
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	20000bf8 	.word	0x20000bf8
}
   4:	000016ed 	.word	0x000016ed
   8:	00003895 	.word	0x00003895
   c:	0000171d 	.word	0x0000171d
  10:	0000171d 	.word	0x0000171d
  14:	0000171d 	.word	0x0000171d
  18:	0000171d 	.word	0x0000171d
	...
  2c:	00001531 	.word	0x00001531
  30:	0000171d 	.word	0x0000171d
  34:	00000000 	.word	0x00000000
  38:	000014e9 	.word	0x000014e9
  3c:	000037c9 	.word	0x000037c9

00000040 <_irq_vector_table>:
  40:	000016ad 000016ad 000016ad 000016ad     ................
  50:	000016ad 000016ad 000016ad 000016ad     ................
  60:	000016ad 000016ad 000016ad 000016ad     ................
  70:	000016ad 000016ad 000016ad 000016ad     ................
  80:	000016ad 000016ad 000016ad 000016ad     ................
  90:	000016ad 000016ad 000016ad 000016ad     ................
  a0:	000016ad 000016ad 000016ad 000016ad     ................
  b0:	000016ad 000016ad 000016ad 000016ad     ................
  c0:	000016ad 000016ad 000016ad 000016ad     ................
  d0:	000016ad 000016ad 000016ad 000016ad     ................
  e0:	000016ad 000016ad 000016ad 000016ad     ................
  f0:	000016ad 000016ad 000016ad 000016ad     ................

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     114:	f000 b96e 	b.w	3f4 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f806 	bl	130 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__udivmoddi4>:
     130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     134:	9d08      	ldr	r5, [sp, #32]
     136:	460e      	mov	r6, r1
     138:	4604      	mov	r4, r0
     13a:	468c      	mov	ip, r1
     13c:	2b00      	cmp	r3, #0
     13e:	f040 8081 	bne.w	244 <CONFIG_IDLE_STACK_SIZE+0x104>
     142:	428a      	cmp	r2, r1
     144:	4617      	mov	r7, r2
     146:	d945      	bls.n	1d4 <CONFIG_IDLE_STACK_SIZE+0x94>
     148:	fab2 f282 	clz	r2, r2
     14c:	b14a      	cbz	r2, 162 <CONFIG_IDLE_STACK_SIZE+0x22>
     14e:	f1c2 0120 	rsb	r1, r2, #32
     152:	fa06 f302 	lsl.w	r3, r6, r2
     156:	fa20 f101 	lsr.w	r1, r0, r1
     15a:	4097      	lsls	r7, r2
     15c:	ea41 0c03 	orr.w	ip, r1, r3
     160:	4094      	lsls	r4, r2
     162:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     166:	0c23      	lsrs	r3, r4, #16
     168:	fbbc f6fe 	udiv	r6, ip, lr
     16c:	b2b9      	uxth	r1, r7
     16e:	fb0e cc16 	mls	ip, lr, r6, ip
     172:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     176:	fb06 f001 	mul.w	r0, r6, r1
     17a:	4298      	cmp	r0, r3
     17c:	d909      	bls.n	192 <CONFIG_IDLE_STACK_SIZE+0x52>
     17e:	18fb      	adds	r3, r7, r3
     180:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
     184:	f080 8115 	bcs.w	3b2 <CONFIG_IDLE_STACK_SIZE+0x272>
     188:	4298      	cmp	r0, r3
     18a:	f240 8112 	bls.w	3b2 <CONFIG_IDLE_STACK_SIZE+0x272>
     18e:	3e02      	subs	r6, #2
     190:	443b      	add	r3, r7
     192:	1a1b      	subs	r3, r3, r0
     194:	b2a4      	uxth	r4, r4
     196:	fbb3 f0fe 	udiv	r0, r3, lr
     19a:	fb0e 3310 	mls	r3, lr, r0, r3
     19e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1a2:	fb00 f101 	mul.w	r1, r0, r1
     1a6:	42a1      	cmp	r1, r4
     1a8:	d909      	bls.n	1be <CONFIG_IDLE_STACK_SIZE+0x7e>
     1aa:	193c      	adds	r4, r7, r4
     1ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     1b0:	f080 8101 	bcs.w	3b6 <CONFIG_IDLE_STACK_SIZE+0x276>
     1b4:	42a1      	cmp	r1, r4
     1b6:	f240 80fe 	bls.w	3b6 <CONFIG_IDLE_STACK_SIZE+0x276>
     1ba:	3802      	subs	r0, #2
     1bc:	443c      	add	r4, r7
     1be:	1a64      	subs	r4, r4, r1
     1c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     1c4:	2100      	movs	r1, #0
     1c6:	b11d      	cbz	r5, 1d0 <CONFIG_IDLE_STACK_SIZE+0x90>
     1c8:	40d4      	lsrs	r4, r2
     1ca:	2300      	movs	r3, #0
     1cc:	e9c5 4300 	strd	r4, r3, [r5]
     1d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d4:	b902      	cbnz	r2, 1d8 <CONFIG_IDLE_STACK_SIZE+0x98>
     1d6:	deff      	udf	#255	; 0xff
     1d8:	fab2 f282 	clz	r2, r2
     1dc:	2a00      	cmp	r2, #0
     1de:	d14f      	bne.n	280 <CONFIG_IDLE_STACK_SIZE+0x140>
     1e0:	1bcb      	subs	r3, r1, r7
     1e2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1e6:	fa1f f887 	uxth.w	r8, r7
     1ea:	2101      	movs	r1, #1
     1ec:	fbb3 fcfe 	udiv	ip, r3, lr
     1f0:	0c26      	lsrs	r6, r4, #16
     1f2:	fb0e 331c 	mls	r3, lr, ip, r3
     1f6:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
     1fa:	fb08 f30c 	mul.w	r3, r8, ip
     1fe:	42b3      	cmp	r3, r6
     200:	d907      	bls.n	212 <CONFIG_IDLE_STACK_SIZE+0xd2>
     202:	19be      	adds	r6, r7, r6
     204:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     208:	d202      	bcs.n	210 <CONFIG_IDLE_STACK_SIZE+0xd0>
     20a:	42b3      	cmp	r3, r6
     20c:	f200 80eb 	bhi.w	3e6 <CONFIG_IDLE_STACK_SIZE+0x2a6>
     210:	4684      	mov	ip, r0
     212:	1af6      	subs	r6, r6, r3
     214:	b2a3      	uxth	r3, r4
     216:	fbb6 f0fe 	udiv	r0, r6, lr
     21a:	fb0e 6610 	mls	r6, lr, r0, r6
     21e:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
     222:	fb08 f800 	mul.w	r8, r8, r0
     226:	45a0      	cmp	r8, r4
     228:	d907      	bls.n	23a <CONFIG_IDLE_STACK_SIZE+0xfa>
     22a:	193c      	adds	r4, r7, r4
     22c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     230:	d202      	bcs.n	238 <CONFIG_IDLE_STACK_SIZE+0xf8>
     232:	45a0      	cmp	r8, r4
     234:	f200 80d2 	bhi.w	3dc <CONFIG_IDLE_STACK_SIZE+0x29c>
     238:	4618      	mov	r0, r3
     23a:	eba4 0408 	sub.w	r4, r4, r8
     23e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     242:	e7c0      	b.n	1c6 <CONFIG_IDLE_STACK_SIZE+0x86>
     244:	428b      	cmp	r3, r1
     246:	d908      	bls.n	25a <CONFIG_IDLE_STACK_SIZE+0x11a>
     248:	2d00      	cmp	r5, #0
     24a:	f000 80af 	beq.w	3ac <CONFIG_IDLE_STACK_SIZE+0x26c>
     24e:	2100      	movs	r1, #0
     250:	e9c5 0600 	strd	r0, r6, [r5]
     254:	4608      	mov	r0, r1
     256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     25a:	fab3 f183 	clz	r1, r3
     25e:	2900      	cmp	r1, #0
     260:	d149      	bne.n	2f6 <CONFIG_IDLE_STACK_SIZE+0x1b6>
     262:	42b3      	cmp	r3, r6
     264:	d302      	bcc.n	26c <CONFIG_IDLE_STACK_SIZE+0x12c>
     266:	4282      	cmp	r2, r0
     268:	f200 80bb 	bhi.w	3e2 <CONFIG_IDLE_STACK_SIZE+0x2a2>
     26c:	1a84      	subs	r4, r0, r2
     26e:	eb66 0303 	sbc.w	r3, r6, r3
     272:	2001      	movs	r0, #1
     274:	469c      	mov	ip, r3
     276:	2d00      	cmp	r5, #0
     278:	d0aa      	beq.n	1d0 <CONFIG_IDLE_STACK_SIZE+0x90>
     27a:	e9c5 4c00 	strd	r4, ip, [r5]
     27e:	e7a7      	b.n	1d0 <CONFIG_IDLE_STACK_SIZE+0x90>
     280:	f1c2 0320 	rsb	r3, r2, #32
     284:	4097      	lsls	r7, r2
     286:	40d8      	lsrs	r0, r3
     288:	4091      	lsls	r1, r2
     28a:	40de      	lsrs	r6, r3
     28c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     290:	4308      	orrs	r0, r1
     292:	ea4f 4c10 	mov.w	ip, r0, lsr #16
     296:	fbb6 f1fe 	udiv	r1, r6, lr
     29a:	fa1f f887 	uxth.w	r8, r7
     29e:	fb0e 6611 	mls	r6, lr, r1, r6
     2a2:	ea4c 4606 	orr.w	r6, ip, r6, lsl #16
     2a6:	fb01 f308 	mul.w	r3, r1, r8
     2aa:	42b3      	cmp	r3, r6
     2ac:	fa04 f402 	lsl.w	r4, r4, r2
     2b0:	d909      	bls.n	2c6 <CONFIG_IDLE_STACK_SIZE+0x186>
     2b2:	19be      	adds	r6, r7, r6
     2b4:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
     2b8:	f080 808e 	bcs.w	3d8 <CONFIG_IDLE_STACK_SIZE+0x298>
     2bc:	42b3      	cmp	r3, r6
     2be:	f240 808b 	bls.w	3d8 <CONFIG_IDLE_STACK_SIZE+0x298>
     2c2:	3902      	subs	r1, #2
     2c4:	443e      	add	r6, r7
     2c6:	1af3      	subs	r3, r6, r3
     2c8:	b286      	uxth	r6, r0
     2ca:	fbb3 f0fe 	udiv	r0, r3, lr
     2ce:	fb0e 3310 	mls	r3, lr, r0, r3
     2d2:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
     2d6:	fb00 f308 	mul.w	r3, r0, r8
     2da:	42b3      	cmp	r3, r6
     2dc:	d907      	bls.n	2ee <CONFIG_IDLE_STACK_SIZE+0x1ae>
     2de:	19be      	adds	r6, r7, r6
     2e0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     2e4:	d274      	bcs.n	3d0 <CONFIG_IDLE_STACK_SIZE+0x290>
     2e6:	42b3      	cmp	r3, r6
     2e8:	d972      	bls.n	3d0 <CONFIG_IDLE_STACK_SIZE+0x290>
     2ea:	3802      	subs	r0, #2
     2ec:	443e      	add	r6, r7
     2ee:	1af3      	subs	r3, r6, r3
     2f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2f4:	e77a      	b.n	1ec <CONFIG_IDLE_STACK_SIZE+0xac>
     2f6:	f1c1 0720 	rsb	r7, r1, #32
     2fa:	fa03 f401 	lsl.w	r4, r3, r1
     2fe:	fa22 f307 	lsr.w	r3, r2, r7
     302:	431c      	orrs	r4, r3
     304:	fa20 f907 	lsr.w	r9, r0, r7
     308:	fa06 f301 	lsl.w	r3, r6, r1
     30c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
     310:	40fe      	lsrs	r6, r7
     312:	ea49 0903 	orr.w	r9, r9, r3
     316:	ea4f 4319 	mov.w	r3, r9, lsr #16
     31a:	fbb6 fefc 	udiv	lr, r6, ip
     31e:	fa1f f884 	uxth.w	r8, r4
     322:	fb0c 661e 	mls	r6, ip, lr, r6
     326:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
     32a:	fb0e fa08 	mul.w	sl, lr, r8
     32e:	45b2      	cmp	sl, r6
     330:	fa02 f201 	lsl.w	r2, r2, r1
     334:	fa00 f301 	lsl.w	r3, r0, r1
     338:	d908      	bls.n	34c <CONFIG_IDLE_STACK_SIZE+0x20c>
     33a:	19a6      	adds	r6, r4, r6
     33c:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
     340:	d248      	bcs.n	3d4 <CONFIG_IDLE_STACK_SIZE+0x294>
     342:	45b2      	cmp	sl, r6
     344:	d946      	bls.n	3d4 <CONFIG_IDLE_STACK_SIZE+0x294>
     346:	f1ae 0e02 	sub.w	lr, lr, #2
     34a:	4426      	add	r6, r4
     34c:	eba6 060a 	sub.w	r6, r6, sl
     350:	fa1f f989 	uxth.w	r9, r9
     354:	fbb6 f0fc 	udiv	r0, r6, ip
     358:	fb0c 6610 	mls	r6, ip, r0, r6
     35c:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
     360:	fb00 f808 	mul.w	r8, r0, r8
     364:	45b0      	cmp	r8, r6
     366:	d907      	bls.n	378 <CONFIG_IDLE_STACK_SIZE+0x238>
     368:	19a6      	adds	r6, r4, r6
     36a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     36e:	d22d      	bcs.n	3cc <CONFIG_IDLE_STACK_SIZE+0x28c>
     370:	45b0      	cmp	r8, r6
     372:	d92b      	bls.n	3cc <CONFIG_IDLE_STACK_SIZE+0x28c>
     374:	3802      	subs	r0, #2
     376:	4426      	add	r6, r4
     378:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     37c:	eba6 0608 	sub.w	r6, r6, r8
     380:	fba0 8902 	umull	r8, r9, r0, r2
     384:	454e      	cmp	r6, r9
     386:	46c4      	mov	ip, r8
     388:	46ce      	mov	lr, r9
     38a:	d318      	bcc.n	3be <CONFIG_IDLE_STACK_SIZE+0x27e>
     38c:	d015      	beq.n	3ba <CONFIG_IDLE_STACK_SIZE+0x27a>
     38e:	b375      	cbz	r5, 3ee <CONFIG_IDLE_STACK_SIZE+0x2ae>
     390:	ebb3 020c 	subs.w	r2, r3, ip
     394:	eb66 060e 	sbc.w	r6, r6, lr
     398:	fa06 f707 	lsl.w	r7, r6, r7
     39c:	fa22 f301 	lsr.w	r3, r2, r1
     3a0:	40ce      	lsrs	r6, r1
     3a2:	431f      	orrs	r7, r3
     3a4:	e9c5 7600 	strd	r7, r6, [r5]
     3a8:	2100      	movs	r1, #0
     3aa:	e711      	b.n	1d0 <CONFIG_IDLE_STACK_SIZE+0x90>
     3ac:	4629      	mov	r1, r5
     3ae:	4628      	mov	r0, r5
     3b0:	e70e      	b.n	1d0 <CONFIG_IDLE_STACK_SIZE+0x90>
     3b2:	4666      	mov	r6, ip
     3b4:	e6ed      	b.n	192 <CONFIG_IDLE_STACK_SIZE+0x52>
     3b6:	4618      	mov	r0, r3
     3b8:	e701      	b.n	1be <CONFIG_IDLE_STACK_SIZE+0x7e>
     3ba:	4543      	cmp	r3, r8
     3bc:	d2e7      	bcs.n	38e <CONFIG_IDLE_STACK_SIZE+0x24e>
     3be:	ebb8 0c02 	subs.w	ip, r8, r2
     3c2:	eb69 0404 	sbc.w	r4, r9, r4
     3c6:	3801      	subs	r0, #1
     3c8:	46a6      	mov	lr, r4
     3ca:	e7e0      	b.n	38e <CONFIG_IDLE_STACK_SIZE+0x24e>
     3cc:	4660      	mov	r0, ip
     3ce:	e7d3      	b.n	378 <CONFIG_IDLE_STACK_SIZE+0x238>
     3d0:	4660      	mov	r0, ip
     3d2:	e78c      	b.n	2ee <CONFIG_IDLE_STACK_SIZE+0x1ae>
     3d4:	4686      	mov	lr, r0
     3d6:	e7b9      	b.n	34c <CONFIG_IDLE_STACK_SIZE+0x20c>
     3d8:	4661      	mov	r1, ip
     3da:	e774      	b.n	2c6 <CONFIG_IDLE_STACK_SIZE+0x186>
     3dc:	3802      	subs	r0, #2
     3de:	443c      	add	r4, r7
     3e0:	e72b      	b.n	23a <CONFIG_IDLE_STACK_SIZE+0xfa>
     3e2:	4608      	mov	r0, r1
     3e4:	e747      	b.n	276 <CONFIG_IDLE_STACK_SIZE+0x136>
     3e6:	f1ac 0c02 	sub.w	ip, ip, #2
     3ea:	443e      	add	r6, r7
     3ec:	e711      	b.n	212 <CONFIG_IDLE_STACK_SIZE+0xd2>
     3ee:	4629      	mov	r1, r5
     3f0:	e6ee      	b.n	1d0 <CONFIG_IDLE_STACK_SIZE+0x90>
     3f2:	bf00      	nop

000003f4 <__aeabi_idiv0>:
     3f4:	4770      	bx	lr
     3f6:	bf00      	nop

000003f8 <main>:

#include <zephyr.h>
#include <sys/printk.h>

void main(void)
{
     3f8:	b508      	push	{r3, lr}
	printk("Hellololo Worldd!\n");
     3fa:	4804      	ldr	r0, [pc, #16]	; (40c <CONFIG_FLASH_SIZE+0xc>)
     3fc:	f003 f828 	bl	3450 <printk>
	printk("Hello Worllld! %s\n", CONFIG_BOARD);
}
     400:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	printk("Hello Worllld! %s\n", CONFIG_BOARD);
     404:	4902      	ldr	r1, [pc, #8]	; (410 <CONFIG_FLASH_SIZE+0x10>)
     406:	4803      	ldr	r0, [pc, #12]	; (414 <CONFIG_FLASH_SIZE+0x14>)
     408:	f003 b822 	b.w	3450 <printk>
     40c:	0000401c 	.word	0x0000401c
     410:	0000402f 	.word	0x0000402f
     414:	00004049 	.word	0x00004049

00000418 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     418:	680b      	ldr	r3, [r1, #0]
     41a:	3301      	adds	r3, #1
     41c:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     41e:	4b01      	ldr	r3, [pc, #4]	; (424 <char_out+0xc>)
     420:	681b      	ldr	r3, [r3, #0]
     422:	4718      	bx	r3
     424:	20000000 	.word	0x20000000

00000428 <__printk_hook_install>:
	_char_out = fn;
     428:	4b01      	ldr	r3, [pc, #4]	; (430 <__printk_hook_install+0x8>)
     42a:	6018      	str	r0, [r3, #0]
}
     42c:	4770      	bx	lr
     42e:	bf00      	nop
     430:	20000000 	.word	0x20000000

00000434 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
     434:	b507      	push	{r0, r1, r2, lr}
     436:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
     438:	2100      	movs	r1, #0
{
     43a:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
     43c:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
     43e:	4803      	ldr	r0, [pc, #12]	; (44c <vprintk+0x18>)
     440:	a901      	add	r1, sp, #4
     442:	f000 f8eb 	bl	61c <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
     446:	b003      	add	sp, #12
     448:	f85d fb04 	ldr.w	pc, [sp], #4
     44c:	00000419 	.word	0x00000419

00000450 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     450:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     454:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     458:	f019 0808 	ands.w	r8, r9, #8
{
     45c:	4604      	mov	r4, r0
     45e:	4693      	mov	fp, r2
	if (processing) {
     460:	d00d      	beq.n	47e <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
     462:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     464:	bf0c      	ite	eq
     466:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     46a:	f049 0920 	orrne.w	r9, r9, #32
     46e:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     472:	f38b 8811 	msr	BASEPRI, fp
     476:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     47a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     47e:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     482:	2902      	cmp	r1, #2
     484:	d107      	bne.n	496 <process_event+0x46>
			evt = process_recheck(mgr);
     486:	4620      	mov	r0, r4
     488:	f002 ffef 	bl	346a <process_recheck>
		if (evt == EVT_NOP) {
     48c:	2800      	cmp	r0, #0
     48e:	d0f0      	beq.n	472 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
     490:	2801      	cmp	r0, #1
     492:	8b23      	ldrh	r3, [r4, #24]
     494:	d150      	bne.n	538 <process_event+0xe8>
			res = mgr->last_res;
     496:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     498:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     49a:	2f00      	cmp	r7, #0
     49c:	da15      	bge.n	4ca <process_event+0x7a>
		*clients = mgr->clients;
     49e:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     4a0:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
     4a4:	e9c4 8800 	strd	r8, r8, [r4]
     4a8:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     4ac:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
     4ae:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     4b0:	8b21      	ldrh	r1, [r4, #24]
     4b2:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     4b6:	45ca      	cmp	sl, r9
     4b8:	d002      	beq.n	4c0 <process_event+0x70>
		if (do_monitors
     4ba:	68a3      	ldr	r3, [r4, #8]
     4bc:	2b00      	cmp	r3, #0
     4be:	d15c      	bne.n	57a <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
     4c0:	b90d      	cbnz	r5, 4c6 <process_event+0x76>
		    || (transit != NULL)) {
     4c2:	2e00      	cmp	r6, #0
     4c4:	d074      	beq.n	5b0 <process_event+0x160>
     4c6:	2300      	movs	r3, #0
     4c8:	e058      	b.n	57c <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     4ca:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     4ce:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     4d0:	2a01      	cmp	r2, #1
     4d2:	d820      	bhi.n	516 <process_event+0xc6>
		*clients = mgr->clients;
     4d4:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     4d8:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     4da:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
     4dc:	b289      	uxth	r1, r1
	list->tail = NULL;
     4de:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     4e2:	d10c      	bne.n	4fe <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     4e4:	2d00      	cmp	r5, #0
     4e6:	462b      	mov	r3, r5
     4e8:	bf38      	it	cc
     4ea:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     4ec:	b12b      	cbz	r3, 4fa <process_event+0xaa>
				mgr->refs += 1U;
     4ee:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
     4f0:	681b      	ldr	r3, [r3, #0]
     4f2:	3201      	adds	r2, #1
     4f4:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     4f6:	2b00      	cmp	r3, #0
     4f8:	d1f8      	bne.n	4ec <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     4fa:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     4fe:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     500:	4620      	mov	r0, r4
     502:	f002 ffb2 	bl	346a <process_recheck>
     506:	4606      	mov	r6, r0
     508:	2800      	cmp	r0, #0
     50a:	d0d1      	beq.n	4b0 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     50c:	8b23      	ldrh	r3, [r4, #24]
     50e:	f043 0320 	orr.w	r3, r3, #32
     512:	8323      	strh	r3, [r4, #24]
     514:	e7cb      	b.n	4ae <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
     516:	2b04      	cmp	r3, #4
     518:	d10c      	bne.n	534 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     51a:	f021 0107 	bic.w	r1, r1, #7
     51e:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
     520:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     522:	4620      	mov	r0, r4
     524:	f002 ffa1 	bl	346a <process_recheck>
     528:	4605      	mov	r5, r0
     52a:	2800      	cmp	r0, #0
     52c:	d0bf      	beq.n	4ae <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     52e:	f041 0120 	orr.w	r1, r1, #32
     532:	8321      	strh	r1, [r4, #24]
     534:	2500      	movs	r5, #0
     536:	e7ba      	b.n	4ae <process_event+0x5e>
		} else if (evt == EVT_START) {
     538:	2803      	cmp	r0, #3
     53a:	d109      	bne.n	550 <process_event+0x100>
			transit = mgr->transitions->start;
     53c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     53e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
     542:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     544:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
     548:	8323      	strh	r3, [r4, #24]
}
     54a:	2500      	movs	r5, #0
		res = 0;
     54c:	462f      	mov	r7, r5
     54e:	e7af      	b.n	4b0 <process_event+0x60>
		} else if (evt == EVT_STOP) {
     550:	2804      	cmp	r0, #4
     552:	d106      	bne.n	562 <process_event+0x112>
			transit = mgr->transitions->stop;
     554:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     556:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
     55a:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     55c:	f043 0304 	orr.w	r3, r3, #4
     560:	e7f2      	b.n	548 <process_event+0xf8>
		} else if (evt == EVT_RESET) {
     562:	2805      	cmp	r0, #5
     564:	d106      	bne.n	574 <process_event+0x124>
			transit = mgr->transitions->reset;
     566:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     568:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
     56c:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     56e:	f043 0305 	orr.w	r3, r3, #5
     572:	e7e9      	b.n	548 <process_event+0xf8>
     574:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     576:	462e      	mov	r6, r5
     578:	e7e8      	b.n	54c <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
     57a:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     57c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     580:	8321      	strh	r1, [r4, #24]
     582:	f38b 8811 	msr	BASEPRI, fp
     586:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     58a:	bb03      	cbnz	r3, 5ce <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
     58c:	2d00      	cmp	r5, #0
     58e:	d133      	bne.n	5f8 <process_event+0x1a8>
			if (transit != NULL) {
     590:	b116      	cbz	r6, 598 <process_event+0x148>
				transit(mgr, transition_complete);
     592:	4921      	ldr	r1, [pc, #132]	; (618 <process_event+0x1c8>)
     594:	4620      	mov	r0, r4
     596:	47b0      	blx	r6
	__asm__ volatile(
     598:	f04f 0320 	mov.w	r3, #32
     59c:	f3ef 8b11 	mrs	fp, BASEPRI
     5a0:	f383 8811 	msr	BASEPRI, r3
     5a4:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     5a8:	8b23      	ldrh	r3, [r4, #24]
     5aa:	f023 0308 	bic.w	r3, r3, #8
     5ae:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     5b0:	8b23      	ldrh	r3, [r4, #24]
     5b2:	06da      	lsls	r2, r3, #27
     5b4:	d528      	bpl.n	608 <process_event+0x1b8>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     5b6:	f023 0310 	bic.w	r3, r3, #16
     5ba:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     5bc:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     5be:	f8b4 9018 	ldrh.w	r9, [r4, #24]
     5c2:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
     5c6:	2900      	cmp	r1, #0
     5c8:	f47f af5b 	bne.w	482 <process_event+0x32>
out:
     5cc:	e751      	b.n	472 <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     5ce:	68a1      	ldr	r1, [r4, #8]
     5d0:	2900      	cmp	r1, #0
     5d2:	d0db      	beq.n	58c <process_event+0x13c>
	return node->next;
     5d4:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
     5d6:	f8d1 b004 	ldr.w	fp, [r1, #4]
     5da:	2b00      	cmp	r3, #0
     5dc:	bf38      	it	cc
     5de:	2300      	movcc	r3, #0
     5e0:	4699      	mov	r9, r3
     5e2:	4652      	mov	r2, sl
     5e4:	463b      	mov	r3, r7
     5e6:	4620      	mov	r0, r4
     5e8:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     5ea:	f1b9 0f00 	cmp.w	r9, #0
     5ee:	d0cd      	beq.n	58c <process_event+0x13c>
     5f0:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
     5f4:	4649      	mov	r1, r9
     5f6:	e7ee      	b.n	5d6 <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
     5f8:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
     5fa:	463b      	mov	r3, r7
     5fc:	4652      	mov	r2, sl
     5fe:	4620      	mov	r0, r4
     600:	682d      	ldr	r5, [r5, #0]
     602:	f002 ff4e 	bl	34a2 <notify_one>
     606:	e7c1      	b.n	58c <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     608:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     60c:	bf1e      	ittt	ne
     60e:	f023 0320 	bicne.w	r3, r3, #32
     612:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
     614:	2102      	movne	r1, #2
     616:	e7d2      	b.n	5be <process_event+0x16e>
     618:	000034cf 	.word	0x000034cf

0000061c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     620:	b091      	sub	sp, #68	; 0x44
     622:	468b      	mov	fp, r1
     624:	9002      	str	r0, [sp, #8]
     626:	4692      	mov	sl, r2
     628:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     62a:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     62c:	f89a 0000 	ldrb.w	r0, [sl]
     630:	b908      	cbnz	r0, 636 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     632:	4628      	mov	r0, r5
     634:	e35e      	b.n	cf4 <CONFIG_ISR_STACK_SIZE+0x4f4>
		if (*fp != '%') {
     636:	2825      	cmp	r0, #37	; 0x25
     638:	f10a 0701 	add.w	r7, sl, #1
     63c:	d007      	beq.n	64e <cbvprintf+0x32>
			OUTC('%');
     63e:	9b02      	ldr	r3, [sp, #8]
     640:	4659      	mov	r1, fp
     642:	4798      	blx	r3
     644:	2800      	cmp	r0, #0
     646:	f2c0 8355 	blt.w	cf4 <CONFIG_ISR_STACK_SIZE+0x4f4>
     64a:	3501      	adds	r5, #1
			break;
     64c:	e210      	b.n	a70 <CONFIG_ISR_STACK_SIZE+0x270>
		} state = {
     64e:	2218      	movs	r2, #24
     650:	2100      	movs	r1, #0
     652:	a80a      	add	r0, sp, #40	; 0x28
     654:	f003 f96a 	bl	392c <memset>
	if (*sp == '%') {
     658:	f89a 3001 	ldrb.w	r3, [sl, #1]
     65c:	2b25      	cmp	r3, #37	; 0x25
     65e:	d078      	beq.n	752 <cbvprintf+0x136>
     660:	2200      	movs	r2, #0
     662:	4694      	mov	ip, r2
     664:	4616      	mov	r6, r2
     666:	4696      	mov	lr, r2
     668:	4610      	mov	r0, r2
     66a:	4639      	mov	r1, r7
		switch (*sp) {
     66c:	f817 3b01 	ldrb.w	r3, [r7], #1
     670:	2b2b      	cmp	r3, #43	; 0x2b
     672:	f000 809d 	beq.w	7b0 <cbvprintf+0x194>
     676:	f200 8094 	bhi.w	7a2 <cbvprintf+0x186>
     67a:	2b20      	cmp	r3, #32
     67c:	f000 809b 	beq.w	7b6 <cbvprintf+0x19a>
     680:	2b23      	cmp	r3, #35	; 0x23
     682:	f000 809a 	beq.w	7ba <cbvprintf+0x19e>
     686:	b128      	cbz	r0, 694 <cbvprintf+0x78>
     688:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     68c:	f040 0004 	orr.w	r0, r0, #4
     690:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     694:	f1be 0f00 	cmp.w	lr, #0
     698:	d005      	beq.n	6a6 <cbvprintf+0x8a>
     69a:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     69e:	f040 0008 	orr.w	r0, r0, #8
     6a2:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     6a6:	b12e      	cbz	r6, 6b4 <cbvprintf+0x98>
     6a8:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     6ac:	f040 0010 	orr.w	r0, r0, #16
     6b0:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     6b4:	f1bc 0f00 	cmp.w	ip, #0
     6b8:	d005      	beq.n	6c6 <cbvprintf+0xaa>
     6ba:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     6be:	f040 0020 	orr.w	r0, r0, #32
     6c2:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     6c6:	b12a      	cbz	r2, 6d4 <cbvprintf+0xb8>
     6c8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     6cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     6d0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
     6d4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     6d8:	f002 0044 	and.w	r0, r2, #68	; 0x44
     6dc:	2844      	cmp	r0, #68	; 0x44
     6de:	d103      	bne.n	6e8 <cbvprintf+0xcc>
		conv->flag_zero = false;
     6e0:	f36f 1286 	bfc	r2, #6, #1
     6e4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
     6e8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     6ec:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     6ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     6f2:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     6f6:	d17b      	bne.n	7f0 <cbvprintf+0x1d4>
		conv->width_star = true;
     6f8:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     6fc:	f042 0201 	orr.w	r2, r2, #1
     700:	1c4b      	adds	r3, r1, #1
     702:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
     706:	781a      	ldrb	r2, [r3, #0]
     708:	2a2e      	cmp	r2, #46	; 0x2e
     70a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     70e:	bf0c      	ite	eq
     710:	2101      	moveq	r1, #1
     712:	2100      	movne	r1, #0
     714:	f361 0241 	bfi	r2, r1, #1, #1
     718:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
     71c:	d174      	bne.n	808 <CONFIG_ISR_STACK_SIZE+0x8>
	if (*sp == '*') {
     71e:	785a      	ldrb	r2, [r3, #1]
     720:	2a2a      	cmp	r2, #42	; 0x2a
     722:	d06a      	beq.n	7fa <cbvprintf+0x1de>
     724:	3301      	adds	r3, #1
	size_t val = 0;
     726:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     728:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     72a:	4618      	mov	r0, r3
     72c:	f810 2b01 	ldrb.w	r2, [r0], #1
     730:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     734:	2f09      	cmp	r7, #9
     736:	f240 808e 	bls.w	856 <CONFIG_ISR_STACK_SIZE+0x56>
	conv->unsupported |= ((conv->prec_value < 0)
     73a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
     73e:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
     740:	f3c2 0040 	ubfx	r0, r2, #1, #1
     744:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     748:	f361 0241 	bfi	r2, r1, #1, #1
     74c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     750:	e05a      	b.n	808 <CONFIG_ISR_STACK_SIZE+0x8>
		conv->specifier = *sp++;
     752:	f10a 0702 	add.w	r7, sl, #2
     756:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
     75a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     75e:	07d9      	lsls	r1, r3, #31
     760:	f140 8149 	bpl.w	9f6 <CONFIG_ISR_STACK_SIZE+0x1f6>
			width = va_arg(ap, int);
     764:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     768:	f1b9 0f00 	cmp.w	r9, #0
     76c:	da07      	bge.n	77e <cbvprintf+0x162>
				conv->flag_dash = true;
     76e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     772:	f042 0204 	orr.w	r2, r2, #4
     776:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
     77a:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
     77e:	075a      	lsls	r2, r3, #29
     780:	f140 8142 	bpl.w	a08 <CONFIG_ISR_STACK_SIZE+0x208>
			int arg = va_arg(ap, int);
     784:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
     788:	f1b8 0f00 	cmp.w	r8, #0
     78c:	f280 8141 	bge.w	a12 <CONFIG_ISR_STACK_SIZE+0x212>
				conv->prec_present = false;
     790:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     794:	f36f 0341 	bfc	r3, #1, #1
     798:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
     79c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
     7a0:	e137      	b.n	a12 <CONFIG_ISR_STACK_SIZE+0x212>
		switch (*sp) {
     7a2:	2b2d      	cmp	r3, #45	; 0x2d
     7a4:	d00c      	beq.n	7c0 <cbvprintf+0x1a4>
     7a6:	2b30      	cmp	r3, #48	; 0x30
     7a8:	f47f af6d 	bne.w	686 <cbvprintf+0x6a>
			conv->flag_zero = true;
     7ac:	2201      	movs	r2, #1
	} while (loop);
     7ae:	e75c      	b.n	66a <cbvprintf+0x4e>
			conv->flag_plus = true;
     7b0:	f04f 0e01 	mov.w	lr, #1
     7b4:	e759      	b.n	66a <cbvprintf+0x4e>
			conv->flag_space = true;
     7b6:	2601      	movs	r6, #1
     7b8:	e757      	b.n	66a <cbvprintf+0x4e>
			conv->flag_hash = true;
     7ba:	f04f 0c01 	mov.w	ip, #1
     7be:	e754      	b.n	66a <cbvprintf+0x4e>
		switch (*sp) {
     7c0:	2001      	movs	r0, #1
     7c2:	e752      	b.n	66a <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
     7c4:	fb0c 0202 	mla	r2, ip, r2, r0
     7c8:	3a30      	subs	r2, #48	; 0x30
     7ca:	4633      	mov	r3, r6
     7cc:	461e      	mov	r6, r3
     7ce:	f816 0b01 	ldrb.w	r0, [r6], #1
     7d2:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     7d6:	2f09      	cmp	r7, #9
     7d8:	d9f4      	bls.n	7c4 <cbvprintf+0x1a8>
	if (sp != wp) {
     7da:	4299      	cmp	r1, r3
     7dc:	d093      	beq.n	706 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
     7de:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
     7e2:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
     7e4:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     7e6:	f362 0141 	bfi	r1, r2, #1, #1
     7ea:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
     7ee:	e78a      	b.n	706 <cbvprintf+0xea>
     7f0:	460b      	mov	r3, r1
	size_t val = 0;
     7f2:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     7f4:	f04f 0c0a 	mov.w	ip, #10
     7f8:	e7e8      	b.n	7cc <cbvprintf+0x1b0>
		conv->prec_star = true;
     7fa:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     7fe:	f042 0204 	orr.w	r2, r2, #4
     802:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
     806:	3302      	adds	r3, #2
	switch (*sp) {
     808:	461f      	mov	r7, r3
     80a:	f817 2b01 	ldrb.w	r2, [r7], #1
     80e:	2a6c      	cmp	r2, #108	; 0x6c
     810:	d041      	beq.n	896 <CONFIG_ISR_STACK_SIZE+0x96>
     812:	d825      	bhi.n	860 <CONFIG_ISR_STACK_SIZE+0x60>
     814:	2a68      	cmp	r2, #104	; 0x68
     816:	d02b      	beq.n	870 <CONFIG_ISR_STACK_SIZE+0x70>
     818:	2a6a      	cmp	r2, #106	; 0x6a
     81a:	d046      	beq.n	8aa <CONFIG_ISR_STACK_SIZE+0xaa>
     81c:	2a4c      	cmp	r2, #76	; 0x4c
     81e:	d04c      	beq.n	8ba <CONFIG_ISR_STACK_SIZE+0xba>
     820:	461f      	mov	r7, r3
	conv->specifier = *sp++;
     822:	f817 2b01 	ldrb.w	r2, [r7], #1
     826:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     82a:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
     82e:	2a78      	cmp	r2, #120	; 0x78
     830:	f200 80d9 	bhi.w	9e6 <CONFIG_ISR_STACK_SIZE+0x1e6>
     834:	2a57      	cmp	r2, #87	; 0x57
     836:	d84d      	bhi.n	8d4 <CONFIG_ISR_STACK_SIZE+0xd4>
     838:	2a41      	cmp	r2, #65	; 0x41
     83a:	d003      	beq.n	844 <CONFIG_ISR_STACK_SIZE+0x44>
     83c:	3a45      	subs	r2, #69	; 0x45
     83e:	2a02      	cmp	r2, #2
     840:	f200 80d1 	bhi.w	9e6 <CONFIG_ISR_STACK_SIZE+0x1e6>
		conv->specifier_cat = SPECIFIER_FP;
     844:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     848:	2204      	movs	r2, #4
     84a:	f362 0302 	bfi	r3, r2, #0, #3
     84e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
     852:	2301      	movs	r3, #1
			break;
     854:	e09e      	b.n	994 <CONFIG_ISR_STACK_SIZE+0x194>
		val = 10U * val + *sp++ - '0';
     856:	fb06 2101 	mla	r1, r6, r1, r2
     85a:	3930      	subs	r1, #48	; 0x30
     85c:	4603      	mov	r3, r0
     85e:	e764      	b.n	72a <cbvprintf+0x10e>
	switch (*sp) {
     860:	2a74      	cmp	r2, #116	; 0x74
     862:	d026      	beq.n	8b2 <CONFIG_ISR_STACK_SIZE+0xb2>
     864:	2a7a      	cmp	r2, #122	; 0x7a
     866:	d1db      	bne.n	820 <CONFIG_ISR_STACK_SIZE+0x20>
		conv->length_mod = LENGTH_Z;
     868:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     86c:	2206      	movs	r2, #6
     86e:	e00d      	b.n	88c <CONFIG_ISR_STACK_SIZE+0x8c>
		if (*++sp == 'h') {
     870:	785a      	ldrb	r2, [r3, #1]
     872:	2a68      	cmp	r2, #104	; 0x68
     874:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     878:	d106      	bne.n	888 <CONFIG_ISR_STACK_SIZE+0x88>
			conv->length_mod = LENGTH_HH;
     87a:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     87c:	f361 02c6 	bfi	r2, r1, #3, #4
     880:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
     884:	1c9f      	adds	r7, r3, #2
     886:	e7cc      	b.n	822 <CONFIG_ISR_STACK_SIZE+0x22>
			conv->length_mod = LENGTH_H;
     888:	4613      	mov	r3, r2
     88a:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
     88c:	f362 03c6 	bfi	r3, r2, #3, #4
     890:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
     894:	e7c5      	b.n	822 <CONFIG_ISR_STACK_SIZE+0x22>
		if (*++sp == 'l') {
     896:	785a      	ldrb	r2, [r3, #1]
     898:	2a6c      	cmp	r2, #108	; 0x6c
     89a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     89e:	d101      	bne.n	8a4 <CONFIG_ISR_STACK_SIZE+0xa4>
			conv->length_mod = LENGTH_LL;
     8a0:	2104      	movs	r1, #4
     8a2:	e7eb      	b.n	87c <CONFIG_ISR_STACK_SIZE+0x7c>
			conv->length_mod = LENGTH_L;
     8a4:	4613      	mov	r3, r2
     8a6:	2203      	movs	r2, #3
     8a8:	e7f0      	b.n	88c <CONFIG_ISR_STACK_SIZE+0x8c>
		conv->length_mod = LENGTH_J;
     8aa:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     8ae:	2205      	movs	r2, #5
     8b0:	e7ec      	b.n	88c <CONFIG_ISR_STACK_SIZE+0x8c>
		conv->length_mod = LENGTH_T;
     8b2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     8b6:	2207      	movs	r2, #7
     8b8:	e7e8      	b.n	88c <CONFIG_ISR_STACK_SIZE+0x8c>
		conv->unsupported = true;
     8ba:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
     8be:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
     8c2:	f023 0302 	bic.w	r3, r3, #2
     8c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     8ca:	f043 0302 	orr.w	r3, r3, #2
     8ce:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
     8d2:	e7a6      	b.n	822 <CONFIG_ISR_STACK_SIZE+0x22>
     8d4:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
     8d8:	2920      	cmp	r1, #32
     8da:	f200 8084 	bhi.w	9e6 <CONFIG_ISR_STACK_SIZE+0x1e6>
     8de:	a001      	add	r0, pc, #4	; (adr r0, 8e4 <CONFIG_ISR_STACK_SIZE+0xe4>)
     8e0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
     8e4:	000009a9 	.word	0x000009a9
     8e8:	000009e7 	.word	0x000009e7
     8ec:	000009e7 	.word	0x000009e7
     8f0:	000009e7 	.word	0x000009e7
     8f4:	000009e7 	.word	0x000009e7
     8f8:	000009e7 	.word	0x000009e7
     8fc:	000009e7 	.word	0x000009e7
     900:	000009e7 	.word	0x000009e7
     904:	000009e7 	.word	0x000009e7
     908:	00000845 	.word	0x00000845
     90c:	000009e7 	.word	0x000009e7
     910:	000009a9 	.word	0x000009a9
     914:	00000969 	.word	0x00000969
     918:	00000845 	.word	0x00000845
     91c:	00000845 	.word	0x00000845
     920:	00000845 	.word	0x00000845
     924:	000009e7 	.word	0x000009e7
     928:	00000969 	.word	0x00000969
     92c:	000009e7 	.word	0x000009e7
     930:	000009e7 	.word	0x000009e7
     934:	000009e7 	.word	0x000009e7
     938:	000009e7 	.word	0x000009e7
     93c:	000009b1 	.word	0x000009b1
     940:	000009a9 	.word	0x000009a9
     944:	000009cd 	.word	0x000009cd
     948:	000009e7 	.word	0x000009e7
     94c:	000009e7 	.word	0x000009e7
     950:	000009cd 	.word	0x000009cd
     954:	000009e7 	.word	0x000009e7
     958:	000009a9 	.word	0x000009a9
     95c:	000009e7 	.word	0x000009e7
     960:	000009e7 	.word	0x000009e7
     964:	000009a9 	.word	0x000009a9
		conv->specifier_cat = SPECIFIER_SINT;
     968:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     96c:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
     96e:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     972:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     976:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     978:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
     97c:	bf02      	ittt	eq
     97e:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
     982:	f041 0101 	orreq.w	r1, r1, #1
     986:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
     98a:	2a63      	cmp	r2, #99	; 0x63
     98c:	d131      	bne.n	9f2 <CONFIG_ISR_STACK_SIZE+0x1f2>
			unsupported = (conv->length_mod != LENGTH_NONE);
     98e:	3b00      	subs	r3, #0
     990:	bf18      	it	ne
     992:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
     994:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     998:	f3c2 0140 	ubfx	r1, r2, #1, #1
     99c:	430b      	orrs	r3, r1
     99e:	f363 0241 	bfi	r2, r3, #1, #1
     9a2:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     9a6:	e6d8      	b.n	75a <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
     9a8:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     9ac:	2002      	movs	r0, #2
     9ae:	e7de      	b.n	96e <CONFIG_ISR_STACK_SIZE+0x16e>
		conv->specifier_cat = SPECIFIER_PTR;
     9b0:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     9b4:	f003 0378 	and.w	r3, r3, #120	; 0x78
     9b8:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
     9bc:	2103      	movs	r1, #3
     9be:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     9c2:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
     9c4:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     9c8:	4143      	adcs	r3, r0
     9ca:	e7e3      	b.n	994 <CONFIG_ISR_STACK_SIZE+0x194>
		conv->specifier_cat = SPECIFIER_PTR;
     9cc:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     9d0:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
     9d2:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     9d6:	f361 0202 	bfi	r2, r1, #0, #3
     9da:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
     9de:	bf14      	ite	ne
     9e0:	2301      	movne	r3, #1
     9e2:	2300      	moveq	r3, #0
     9e4:	e7d6      	b.n	994 <CONFIG_ISR_STACK_SIZE+0x194>
		conv->invalid = true;
     9e6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     9ea:	f043 0301 	orr.w	r3, r3, #1
     9ee:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
     9f2:	2300      	movs	r3, #0
     9f4:	e7ce      	b.n	994 <CONFIG_ISR_STACK_SIZE+0x194>
		} else if (conv->width_present) {
     9f6:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
     9fa:	2a00      	cmp	r2, #0
			width = conv->width_value;
     9fc:	bfb4      	ite	lt
     9fe:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
     a02:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
     a06:	e6ba      	b.n	77e <cbvprintf+0x162>
		} else if (conv->prec_present) {
     a08:	079b      	lsls	r3, r3, #30
     a0a:	f57f aec7 	bpl.w	79c <cbvprintf+0x180>
			precision = conv->prec_value;
     a0e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
     a12:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		conv->pad0_value = 0;
     a16:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     a18:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
     a1c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
     a20:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     a24:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     a26:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     a2a:	d136      	bne.n	a9a <CONFIG_ISR_STACK_SIZE+0x29a>
			switch (length_mod) {
     a2c:	1ed3      	subs	r3, r2, #3
     a2e:	2b04      	cmp	r3, #4
     a30:	d820      	bhi.n	a74 <CONFIG_ISR_STACK_SIZE+0x274>
     a32:	e8df f003 	tbb	[pc, r3]
     a36:	0703      	.short	0x0703
     a38:	1f07      	.short	0x1f07
     a3a:	1f          	.byte	0x1f
     a3b:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
     a3c:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
     a40:	17c1      	asrs	r1, r0, #31
     a42:	e004      	b.n	a4e <CONFIG_ISR_STACK_SIZE+0x24e>
					(sint_value_type)va_arg(ap, intmax_t);
     a44:	3407      	adds	r4, #7
     a46:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
     a4a:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
     a4e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
     a52:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     a56:	f013 0603 	ands.w	r6, r3, #3
     a5a:	d054      	beq.n	b06 <CONFIG_ISR_STACK_SIZE+0x306>
			OUTS(sp, fp);
     a5c:	9802      	ldr	r0, [sp, #8]
     a5e:	463b      	mov	r3, r7
     a60:	4652      	mov	r2, sl
     a62:	4659      	mov	r1, fp
     a64:	f002 fe01 	bl	366a <outs>
     a68:	2800      	cmp	r0, #0
     a6a:	f2c0 8143 	blt.w	cf4 <CONFIG_ISR_STACK_SIZE+0x4f4>
     a6e:	4405      	add	r5, r0
			continue;
     a70:	46ba      	mov	sl, r7
     a72:	e5db      	b.n	62c <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     a74:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
     a78:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
     a7a:	ea4f 71e0 	mov.w	r1, r0, asr #31
     a7e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     a82:	d105      	bne.n	a90 <CONFIG_ISR_STACK_SIZE+0x290>
				value->uint = (unsigned char)value->uint;
     a84:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
     a88:	930a      	str	r3, [sp, #40]	; 0x28
     a8a:	2300      	movs	r3, #0
     a8c:	930b      	str	r3, [sp, #44]	; 0x2c
     a8e:	e7e0      	b.n	a52 <CONFIG_ISR_STACK_SIZE+0x252>
			} else if (length_mod == LENGTH_H) {
     a90:	2a02      	cmp	r2, #2
     a92:	d1de      	bne.n	a52 <CONFIG_ISR_STACK_SIZE+0x252>
				value->sint = (short)value->sint;
     a94:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
     a98:	e7d2      	b.n	a40 <CONFIG_ISR_STACK_SIZE+0x240>
		} else if (specifier_cat == SPECIFIER_UINT) {
     a9a:	2b02      	cmp	r3, #2
     a9c:	d123      	bne.n	ae6 <CONFIG_ISR_STACK_SIZE+0x2e6>
			switch (length_mod) {
     a9e:	1ed3      	subs	r3, r2, #3
     aa0:	2b04      	cmp	r3, #4
     aa2:	d813      	bhi.n	acc <CONFIG_ISR_STACK_SIZE+0x2cc>
     aa4:	e8df f003 	tbb	[pc, r3]
     aa8:	120a0a03 	.word	0x120a0a03
     aac:	12          	.byte	0x12
     aad:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
     aae:	6820      	ldr	r0, [r4, #0]
     ab0:	900a      	str	r0, [sp, #40]	; 0x28
     ab2:	2100      	movs	r1, #0
     ab4:	1d23      	adds	r3, r4, #4
     ab6:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
     ab8:	461c      	mov	r4, r3
     aba:	e7ca      	b.n	a52 <CONFIG_ISR_STACK_SIZE+0x252>
					(uint_value_type)va_arg(ap,
     abc:	3407      	adds	r4, #7
     abe:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
     ac2:	e8f3 0102 	ldrd	r0, r1, [r3], #8
     ac6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
     aca:	e7f5      	b.n	ab8 <CONFIG_ISR_STACK_SIZE+0x2b8>
					(uint_value_type)va_arg(ap, size_t);
     acc:	f854 3b04 	ldr.w	r3, [r4], #4
     ad0:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     ad2:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
     ad4:	f04f 0300 	mov.w	r3, #0
     ad8:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
     ada:	d0d3      	beq.n	a84 <CONFIG_ISR_STACK_SIZE+0x284>
			} else if (length_mod == LENGTH_H) {
     adc:	2a02      	cmp	r2, #2
     ade:	d1b8      	bne.n	a52 <CONFIG_ISR_STACK_SIZE+0x252>
				value->uint = (unsigned short)value->uint;
     ae0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
     ae4:	e7d0      	b.n	a88 <CONFIG_ISR_STACK_SIZE+0x288>
		} else if (specifier_cat == SPECIFIER_FP) {
     ae6:	2b04      	cmp	r3, #4
     ae8:	d107      	bne.n	afa <CONFIG_ISR_STACK_SIZE+0x2fa>
			if (length_mod == LENGTH_UPPER_L) {
     aea:	3407      	adds	r4, #7
     aec:	f024 0407 	bic.w	r4, r4, #7
     af0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
     af4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
     af8:	e7ab      	b.n	a52 <CONFIG_ISR_STACK_SIZE+0x252>
		} else if (specifier_cat == SPECIFIER_PTR) {
     afa:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
     afc:	bf04      	itt	eq
     afe:	f854 3b04 	ldreq.w	r3, [r4], #4
     b02:	930a      	streq	r3, [sp, #40]	; 0x28
     b04:	e7a5      	b.n	a52 <CONFIG_ISR_STACK_SIZE+0x252>
		switch (conv->specifier) {
     b06:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     b0a:	2878      	cmp	r0, #120	; 0x78
     b0c:	d8b0      	bhi.n	a70 <CONFIG_ISR_STACK_SIZE+0x270>
     b0e:	2862      	cmp	r0, #98	; 0x62
     b10:	d822      	bhi.n	b58 <CONFIG_ISR_STACK_SIZE+0x358>
     b12:	2825      	cmp	r0, #37	; 0x25
     b14:	f43f ad93 	beq.w	63e <cbvprintf+0x22>
     b18:	2858      	cmp	r0, #88	; 0x58
     b1a:	d1a9      	bne.n	a70 <CONFIG_ISR_STACK_SIZE+0x270>
			bps = encode_uint(value->uint, conv, buf, bpe);
     b1c:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     b20:	9300      	str	r3, [sp, #0]
     b22:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
     b26:	ab04      	add	r3, sp, #16
     b28:	aa0c      	add	r2, sp, #48	; 0x30
     b2a:	f002 fd53 	bl	35d4 <encode_uint>
     b2e:	4682      	mov	sl, r0
			if (precision >= 0) {
     b30:	f1b8 0f00 	cmp.w	r8, #0
     b34:	f10d 0026 	add.w	r0, sp, #38	; 0x26
     b38:	db0c      	blt.n	b54 <CONFIG_ISR_STACK_SIZE+0x354>
				conv->flag_zero = false;
     b3a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
     b3e:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
     b42:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
     b46:	4598      	cmp	r8, r3
				conv->flag_zero = false;
     b48:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
     b4c:	d902      	bls.n	b54 <CONFIG_ISR_STACK_SIZE+0x354>
					conv->pad0_value = precision - (int)len;
     b4e:	eba8 0303 	sub.w	r3, r8, r3
     b52:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
     b54:	4680      	mov	r8, r0
     b56:	e03d      	b.n	bd4 <CONFIG_ISR_STACK_SIZE+0x3d4>
     b58:	3863      	subs	r0, #99	; 0x63
     b5a:	2815      	cmp	r0, #21
     b5c:	d888      	bhi.n	a70 <CONFIG_ISR_STACK_SIZE+0x270>
     b5e:	a101      	add	r1, pc, #4	; (adr r1, b64 <CONFIG_ISR_STACK_SIZE+0x364>)
     b60:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
     b64:	00000be5 	.word	0x00000be5
     b68:	00000c49 	.word	0x00000c49
     b6c:	00000a71 	.word	0x00000a71
     b70:	00000a71 	.word	0x00000a71
     b74:	00000a71 	.word	0x00000a71
     b78:	00000a71 	.word	0x00000a71
     b7c:	00000c49 	.word	0x00000c49
     b80:	00000a71 	.word	0x00000a71
     b84:	00000a71 	.word	0x00000a71
     b88:	00000a71 	.word	0x00000a71
     b8c:	00000a71 	.word	0x00000a71
     b90:	00000ca7 	.word	0x00000ca7
     b94:	00000c75 	.word	0x00000c75
     b98:	00000c79 	.word	0x00000c79
     b9c:	00000a71 	.word	0x00000a71
     ba0:	00000a71 	.word	0x00000a71
     ba4:	00000bbd 	.word	0x00000bbd
     ba8:	00000a71 	.word	0x00000a71
     bac:	00000c75 	.word	0x00000c75
     bb0:	00000a71 	.word	0x00000a71
     bb4:	00000a71 	.word	0x00000a71
     bb8:	00000c75 	.word	0x00000c75
			if (precision >= 0) {
     bbc:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
     bc0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
     bc4:	db0a      	blt.n	bdc <CONFIG_ISR_STACK_SIZE+0x3dc>
				len = strnlen(bps, precision);
     bc6:	4641      	mov	r1, r8
     bc8:	4650      	mov	r0, sl
     bca:	f002 fe7b 	bl	38c4 <strnlen>
			bpe = bps + len;
     bce:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
     bd2:	2600      	movs	r6, #0
		if (bps == NULL) {
     bd4:	f1ba 0f00 	cmp.w	sl, #0
     bd8:	d10c      	bne.n	bf4 <CONFIG_ISR_STACK_SIZE+0x3f4>
     bda:	e749      	b.n	a70 <CONFIG_ISR_STACK_SIZE+0x270>
				len = strlen(bps);
     bdc:	4650      	mov	r0, sl
     bde:	f002 fe6a 	bl	38b6 <strlen>
     be2:	e7f4      	b.n	bce <CONFIG_ISR_STACK_SIZE+0x3ce>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     be4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     be6:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
     bea:	2600      	movs	r6, #0
			bpe = buf + 1;
     bec:	f10d 0811 	add.w	r8, sp, #17
			bps = buf;
     bf0:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
     bf4:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
     bf8:	b106      	cbz	r6, bfc <CONFIG_ISR_STACK_SIZE+0x3fc>
			nj_len += 1U;
     bfa:	3301      	adds	r3, #1
		if (conv->altform_0c) {
     bfc:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     c00:	06d0      	lsls	r0, r2, #27
     c02:	d56b      	bpl.n	cdc <CONFIG_ISR_STACK_SIZE+0x4dc>
			nj_len += 2U;
     c04:	3302      	adds	r3, #2
		if (conv->pad_fp) {
     c06:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
     c08:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
     c0a:	bf48      	it	mi
     c0c:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
     c0e:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
     c10:	bf48      	it	mi
     c12:	189b      	addmi	r3, r3, r2
		if (width > 0) {
     c14:	f1b9 0f00 	cmp.w	r9, #0
     c18:	dd79      	ble.n	d0e <CONFIG_ISR_STACK_SIZE+0x50e>
			if (!conv->flag_dash) {
     c1a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
     c1e:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
     c22:	f3c2 0380 	ubfx	r3, r2, #2, #1
     c26:	9303      	str	r3, [sp, #12]
     c28:	0753      	lsls	r3, r2, #29
     c2a:	d470      	bmi.n	d0e <CONFIG_ISR_STACK_SIZE+0x50e>
				if (conv->flag_zero) {
     c2c:	0650      	lsls	r0, r2, #25
     c2e:	d564      	bpl.n	cfa <CONFIG_ISR_STACK_SIZE+0x4fa>
					if (sign != 0) {
     c30:	b146      	cbz	r6, c44 <CONFIG_ISR_STACK_SIZE+0x444>
						OUTC(sign);
     c32:	9b02      	ldr	r3, [sp, #8]
     c34:	4659      	mov	r1, fp
     c36:	4630      	mov	r0, r6
     c38:	4798      	blx	r3
     c3a:	2800      	cmp	r0, #0
     c3c:	db5a      	blt.n	cf4 <CONFIG_ISR_STACK_SIZE+0x4f4>
						sign = 0;
     c3e:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
     c40:	3501      	adds	r5, #1
						sign = 0;
     c42:	461e      	mov	r6, r3
					pad = '0';
     c44:	2330      	movs	r3, #48	; 0x30
     c46:	e059      	b.n	cfc <CONFIG_ISR_STACK_SIZE+0x4fc>
			if (conv->flag_plus) {
     c48:	071e      	lsls	r6, r3, #28
     c4a:	d411      	bmi.n	c70 <CONFIG_ISR_STACK_SIZE+0x470>
				sign = ' ';
     c4c:	f013 0610 	ands.w	r6, r3, #16
     c50:	bf18      	it	ne
     c52:	2620      	movne	r6, #32
			sint = value->sint;
     c54:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
     c58:	2a00      	cmp	r2, #0
     c5a:	f173 0100 	sbcs.w	r1, r3, #0
     c5e:	f6bf af5d 	bge.w	b1c <CONFIG_ISR_STACK_SIZE+0x31c>
				value->uint = (uint_value_type)-sint;
     c62:	4252      	negs	r2, r2
     c64:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     c68:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
     c6c:	262d      	movs	r6, #45	; 0x2d
     c6e:	e755      	b.n	b1c <CONFIG_ISR_STACK_SIZE+0x31c>
				sign = '+';
     c70:	262b      	movs	r6, #43	; 0x2b
     c72:	e7ef      	b.n	c54 <CONFIG_ISR_STACK_SIZE+0x454>
		switch (conv->specifier) {
     c74:	2600      	movs	r6, #0
     c76:	e751      	b.n	b1c <CONFIG_ISR_STACK_SIZE+0x31c>
			if (value->ptr != NULL) {
     c78:	980a      	ldr	r0, [sp, #40]	; 0x28
     c7a:	b348      	cbz	r0, cd0 <CONFIG_ISR_STACK_SIZE+0x4d0>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     c7c:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     c80:	9300      	str	r3, [sp, #0]
     c82:	aa0c      	add	r2, sp, #48	; 0x30
     c84:	ab04      	add	r3, sp, #16
     c86:	2100      	movs	r1, #0
     c88:	f002 fca4 	bl	35d4 <encode_uint>
				conv->altform_0c = true;
     c8c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
     c90:	f003 03ef 	and.w	r3, r3, #239	; 0xef
     c94:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
     c98:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
     c9c:	4682      	mov	sl, r0
				conv->altform_0c = true;
     c9e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
     ca2:	2600      	movs	r6, #0
				goto prec_int_pad0;
     ca4:	e744      	b.n	b30 <CONFIG_ISR_STACK_SIZE+0x330>
				store_count(conv, value->ptr, count);
     ca6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
     ca8:	2a07      	cmp	r2, #7
     caa:	f63f aee1 	bhi.w	a70 <CONFIG_ISR_STACK_SIZE+0x270>
     cae:	e8df f002 	tbb	[pc, r2]
     cb2:	040d      	.short	0x040d
     cb4:	08080d06 	.word	0x08080d06
     cb8:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
     cba:	701d      	strb	r5, [r3, #0]
		break;
     cbc:	e6d8      	b.n	a70 <CONFIG_ISR_STACK_SIZE+0x270>
		*(short *)dp = (short)count;
     cbe:	801d      	strh	r5, [r3, #0]
		break;
     cc0:	e6d6      	b.n	a70 <CONFIG_ISR_STACK_SIZE+0x270>
		*(intmax_t *)dp = (intmax_t)count;
     cc2:	4628      	mov	r0, r5
     cc4:	17e9      	asrs	r1, r5, #31
     cc6:	e9c3 0100 	strd	r0, r1, [r3]
		break;
     cca:	e6d1      	b.n	a70 <CONFIG_ISR_STACK_SIZE+0x270>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     ccc:	601d      	str	r5, [r3, #0]
		break;
     cce:	e6cf      	b.n	a70 <CONFIG_ISR_STACK_SIZE+0x270>
			bpe = bps + 5;
     cd0:	f8df 80c4 	ldr.w	r8, [pc, #196]	; d98 <CONFIG_ISR_STACK_SIZE+0x598>
     cd4:	4606      	mov	r6, r0
			bps = "(nil)";
     cd6:	f1a8 0a05 	sub.w	sl, r8, #5
     cda:	e78b      	b.n	bf4 <CONFIG_ISR_STACK_SIZE+0x3f4>
		} else if (conv->altform_0) {
     cdc:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
     cde:	bf48      	it	mi
     ce0:	3301      	addmi	r3, #1
     ce2:	e790      	b.n	c06 <CONFIG_ISR_STACK_SIZE+0x406>
					OUTC(pad);
     ce4:	4618      	mov	r0, r3
     ce6:	9303      	str	r3, [sp, #12]
     ce8:	4659      	mov	r1, fp
     cea:	9b02      	ldr	r3, [sp, #8]
     cec:	4798      	blx	r3
     cee:	2800      	cmp	r0, #0
     cf0:	9b03      	ldr	r3, [sp, #12]
     cf2:	da04      	bge.n	cfe <CONFIG_ISR_STACK_SIZE+0x4fe>
#undef OUTS
#undef OUTC
}
     cf4:	b011      	add	sp, #68	; 0x44
     cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
     cfa:	2320      	movs	r3, #32
     cfc:	444d      	add	r5, r9
     cfe:	464a      	mov	r2, r9
				while (width-- > 0) {
     d00:	2a00      	cmp	r2, #0
     d02:	eba5 0109 	sub.w	r1, r5, r9
     d06:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
     d0a:	dceb      	bgt.n	ce4 <CONFIG_ISR_STACK_SIZE+0x4e4>
     d0c:	460d      	mov	r5, r1
		if (sign != 0) {
     d0e:	b136      	cbz	r6, d1e <CONFIG_ISR_STACK_SIZE+0x51e>
			OUTC(sign);
     d10:	9b02      	ldr	r3, [sp, #8]
     d12:	4659      	mov	r1, fp
     d14:	4630      	mov	r0, r6
     d16:	4798      	blx	r3
     d18:	2800      	cmp	r0, #0
     d1a:	dbeb      	blt.n	cf4 <CONFIG_ISR_STACK_SIZE+0x4f4>
     d1c:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
     d1e:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     d22:	06d9      	lsls	r1, r3, #27
     d24:	d401      	bmi.n	d2a <CONFIG_ISR_STACK_SIZE+0x52a>
     d26:	071a      	lsls	r2, r3, #28
     d28:	d506      	bpl.n	d38 <CONFIG_ISR_STACK_SIZE+0x538>
				OUTC('0');
     d2a:	9b02      	ldr	r3, [sp, #8]
     d2c:	4659      	mov	r1, fp
     d2e:	2030      	movs	r0, #48	; 0x30
     d30:	4798      	blx	r3
     d32:	2800      	cmp	r0, #0
     d34:	dbde      	blt.n	cf4 <CONFIG_ISR_STACK_SIZE+0x4f4>
     d36:	3501      	adds	r5, #1
			if (conv->altform_0c) {
     d38:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     d3c:	06db      	lsls	r3, r3, #27
     d3e:	d507      	bpl.n	d50 <CONFIG_ISR_STACK_SIZE+0x550>
				OUTC(conv->specifier);
     d40:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     d44:	9b02      	ldr	r3, [sp, #8]
     d46:	4659      	mov	r1, fp
     d48:	4798      	blx	r3
     d4a:	2800      	cmp	r0, #0
     d4c:	dbd2      	blt.n	cf4 <CONFIG_ISR_STACK_SIZE+0x4f4>
     d4e:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
     d50:	9e0d      	ldr	r6, [sp, #52]	; 0x34
     d52:	442e      	add	r6, r5
     d54:	1b73      	subs	r3, r6, r5
     d56:	2b00      	cmp	r3, #0
     d58:	dc16      	bgt.n	d88 <CONFIG_ISR_STACK_SIZE+0x588>
			OUTS(bps, bpe);
     d5a:	9802      	ldr	r0, [sp, #8]
     d5c:	4643      	mov	r3, r8
     d5e:	4652      	mov	r2, sl
     d60:	4659      	mov	r1, fp
     d62:	f002 fc82 	bl	366a <outs>
     d66:	2800      	cmp	r0, #0
     d68:	dbc4      	blt.n	cf4 <CONFIG_ISR_STACK_SIZE+0x4f4>
     d6a:	4405      	add	r5, r0
		while (width > 0) {
     d6c:	44a9      	add	r9, r5
     d6e:	eba9 0305 	sub.w	r3, r9, r5
     d72:	2b00      	cmp	r3, #0
     d74:	f77f ae7c 	ble.w	a70 <CONFIG_ISR_STACK_SIZE+0x270>
			OUTC(' ');
     d78:	9b02      	ldr	r3, [sp, #8]
     d7a:	4659      	mov	r1, fp
     d7c:	2020      	movs	r0, #32
     d7e:	4798      	blx	r3
     d80:	2800      	cmp	r0, #0
     d82:	dbb7      	blt.n	cf4 <CONFIG_ISR_STACK_SIZE+0x4f4>
     d84:	3501      	adds	r5, #1
			--width;
     d86:	e7f2      	b.n	d6e <CONFIG_ISR_STACK_SIZE+0x56e>
				OUTC('0');
     d88:	9b02      	ldr	r3, [sp, #8]
     d8a:	4659      	mov	r1, fp
     d8c:	2030      	movs	r0, #48	; 0x30
     d8e:	4798      	blx	r3
     d90:	2800      	cmp	r0, #0
     d92:	dbaf      	blt.n	cf4 <CONFIG_ISR_STACK_SIZE+0x4f4>
     d94:	3501      	adds	r5, #1
     d96:	e7dd      	b.n	d54 <CONFIG_ISR_STACK_SIZE+0x554>
     d98:	00004061 	.word	0x00004061

00000d9c <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
     d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d9e:	4605      	mov	r5, r0
     da0:	f04f 0320 	mov.w	r3, #32
     da4:	f3ef 8611 	mrs	r6, BASEPRI
     da8:	f383 8811 	msr	BASEPRI, r3
     dac:	f3bf 8f6f 	isb	sy
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
     db0:	4b0b      	ldr	r3, [pc, #44]	; (de0 <pm_state_notify+0x44>)
     db2:	681c      	ldr	r4, [r3, #0]
     db4:	2c00      	cmp	r4, #0
     db6:	bf38      	it	cc
     db8:	2400      	movcc	r4, #0
     dba:	b15c      	cbz	r4, dd4 <pm_state_notify+0x38>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
     dbc:	4f09      	ldr	r7, [pc, #36]	; (de4 <pm_state_notify+0x48>)
			callback = notifier->state_exit;
     dbe:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
     dc2:	2d00      	cmp	r5, #0
     dc4:	bf08      	it	eq
     dc6:	4613      	moveq	r3, r2
		if (callback) {
     dc8:	b10b      	cbz	r3, dce <pm_state_notify+0x32>
			callback(z_power_state.state);
     dca:	7838      	ldrb	r0, [r7, #0]
     dcc:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
     dce:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
     dd0:	2c00      	cmp	r4, #0
     dd2:	d1f4      	bne.n	dbe <pm_state_notify+0x22>
	__asm__ volatile(
     dd4:	f386 8811 	msr	BASEPRI, r6
     dd8:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
     ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     dde:	bf00      	nop
     de0:	200001b8 	.word	0x200001b8
     de4:	200001c0 	.word	0x200001c0

00000de8 <pm_system_resume>:
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
     de8:	4b08      	ldr	r3, [pc, #32]	; (e0c <pm_system_resume+0x24>)
{
     dea:	b510      	push	{r4, lr}
	if (!post_ops_done) {
     dec:	681c      	ldr	r4, [r3, #0]
     dee:	b95c      	cbnz	r4, e08 <pm_system_resume+0x20>
		post_ops_done = 1;
     df0:	2201      	movs	r2, #1
     df2:	601a      	str	r2, [r3, #0]
		pm_power_state_exit_post_ops(z_power_state);
     df4:	4b06      	ldr	r3, [pc, #24]	; (e10 <pm_system_resume+0x28>)
     df6:	e893 0003 	ldmia.w	r3, {r0, r1}
     dfa:	f002 fdd2 	bl	39a2 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
     dfe:	4620      	mov	r0, r4
	}
}
     e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pm_state_notify(false);
     e04:	f7ff bfca 	b.w	d9c <pm_state_notify>
}
     e08:	bd10      	pop	{r4, pc}
     e0a:	bf00      	nop
     e0c:	20000004 	.word	0x20000004
     e10:	200001c0 	.word	0x200001c0

00000e14 <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
     e14:	b537      	push	{r0, r1, r2, r4, r5, lr}
	z_power_state = pm_policy_next_state(ticks);
     e16:	466d      	mov	r5, sp
{
     e18:	4601      	mov	r1, r0
	z_power_state = pm_policy_next_state(ticks);
     e1a:	4628      	mov	r0, r5
     e1c:	f002 fc3c 	bl	3698 <pm_policy_next_state>
     e20:	e895 0003 	ldmia.w	r5, {r0, r1}
     e24:	4c0b      	ldr	r4, [pc, #44]	; (e54 <pm_system_suspend+0x40>)
     e26:	e884 0003 	stmia.w	r4, {r0, r1}
	if (z_power_state.state == PM_STATE_ACTIVE) {
     e2a:	7820      	ldrb	r0, [r4, #0]
     e2c:	b180      	cbz	r0, e50 <pm_system_suspend+0x3c>
		LOG_DBG("No PM operations done.");
		return z_power_state.state;
	}
	post_ops_done = 0;
     e2e:	4b0a      	ldr	r3, [pc, #40]	; (e58 <pm_system_suspend+0x44>)
     e30:	2200      	movs	r2, #0
     e32:	601a      	str	r2, [r3, #0]
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
     e34:	f001 fd62 	bl	28fc <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
     e38:	2001      	movs	r0, #1
     e3a:	f7ff ffaf 	bl	d9c <pm_state_notify>
	pm_power_state_set(z_power_state);
     e3e:	e894 0003 	ldmia.w	r4, {r0, r1}
     e42:	f002 fd9b 	bl	397c <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
     e46:	f7ff ffcf 	bl	de8 <pm_system_resume>
	k_sched_unlock();
     e4a:	f001 fe47 	bl	2adc <k_sched_unlock>

	return z_power_state.state;
     e4e:	7820      	ldrb	r0, [r4, #0]
}
     e50:	b003      	add	sp, #12
     e52:	bd30      	pop	{r4, r5, pc}
     e54:	200001c0 	.word	0x200001c0
     e58:	20000004 	.word	0x20000004

00000e5c <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
     e5c:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
     e5e:	4c04      	ldr	r4, [pc, #16]	; (e70 <rtt_console_init+0x14>)
     e60:	4620      	mov	r0, r4
     e62:	f7ff fae1 	bl	428 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
     e66:	4620      	mov	r0, r4
     e68:	f000 fdf0 	bl	1a4c <__stdout_hook_install>

	return 0;
}
     e6c:	2000      	movs	r0, #0
     e6e:	bd10      	pop	{r4, pc}
     e70:	00000e75 	.word	0x00000e75

00000e74 <rtt_console_out>:
{
     e74:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&mutex, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
     e78:	f8df 8060 	ldr.w	r8, [pc, #96]	; edc <rtt_console_out+0x68>
     e7c:	4e16      	ldr	r6, [pc, #88]	; (ed8 <rtt_console_out+0x64>)
	char c = (char)character;
     e7e:	f88d 0007 	strb.w	r0, [sp, #7]
{
     e82:	4604      	mov	r4, r0
	char c = (char)character;
     e84:	2503      	movs	r5, #3
     e86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     e8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     e8e:	4640      	mov	r0, r8
     e90:	f001 fc1c 	bl	26cc <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
     e94:	2201      	movs	r2, #1
     e96:	f10d 0107 	add.w	r1, sp, #7
     e9a:	2000      	movs	r0, #0
     e9c:	f000 fad6 	bl	144c <SEGGER_RTT_WriteNoLock>
     ea0:	4607      	mov	r7, r0
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
     ea2:	4640      	mov	r0, r8
     ea4:	f001 fc8a 	bl	27bc <z_impl_k_mutex_unlock>
		if (cnt) {
     ea8:	b12f      	cbz	r7, eb6 <rtt_console_out+0x42>
			host_present = true;
     eaa:	2301      	movs	r3, #1
     eac:	7033      	strb	r3, [r6, #0]
}
     eae:	4620      	mov	r0, r4
     eb0:	b002      	add	sp, #8
     eb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
     eb6:	7833      	ldrb	r3, [r6, #0]
     eb8:	2b00      	cmp	r3, #0
     eba:	d0f8      	beq.n	eae <rtt_console_out+0x3a>
			if (max_cnt) {
     ebc:	3d01      	subs	r5, #1
     ebe:	d008      	beq.n	ed2 <rtt_console_out+0x5e>
	if (k_is_in_isr()) {
     ec0:	f002 fef6 	bl	3cb0 <k_is_in_isr>
     ec4:	2800      	cmp	r0, #0
     ec6:	d1de      	bne.n	e86 <rtt_console_out+0x12>
	return z_impl_k_sleep(timeout);
     ec8:	2100      	movs	r1, #0
     eca:	2042      	movs	r0, #66	; 0x42
     ecc:	f001 ffa2 	bl	2e14 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
     ed0:	e7d9      	b.n	e86 <rtt_console_out+0x12>
				host_present = false;
     ed2:	7035      	strb	r5, [r6, #0]
     ed4:	e7eb      	b.n	eae <rtt_console_out+0x3a>
     ed6:	bf00      	nop
     ed8:	200003e0 	.word	0x200003e0
     edc:	20000098 	.word	0x20000098

00000ee0 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
     ee0:	4a0e      	ldr	r2, [pc, #56]	; (f1c <onoff_stop+0x3c>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
     ee2:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
     ee4:	1a84      	subs	r4, r0, r2
     ee6:	10a3      	asrs	r3, r4, #2
     ee8:	4c0d      	ldr	r4, [pc, #52]	; (f20 <onoff_stop+0x40>)
     eea:	435c      	muls	r4, r3
{
     eec:	4605      	mov	r5, r0
     eee:	b2e4      	uxtb	r4, r4
	err = set_off_state(&subdata->flags, ctx);
     ef0:	200c      	movs	r0, #12
     ef2:	fb00 2004 	mla	r0, r0, r4, r2
{
     ef6:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
     ef8:	2140      	movs	r1, #64	; 0x40
     efa:	4408      	add	r0, r1
     efc:	f002 fbd9 	bl	36b2 <set_off_state>
	if (err < 0) {
     f00:	1e01      	subs	r1, r0, #0
     f02:	db05      	blt.n	f10 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
     f04:	4b07      	ldr	r3, [pc, #28]	; (f24 <onoff_stop+0x44>)
     f06:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
     f0a:	6863      	ldr	r3, [r4, #4]
     f0c:	4798      	blx	r3
	return 0;
     f0e:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
     f10:	4628      	mov	r0, r5
     f12:	4633      	mov	r3, r6
}
     f14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
     f18:	4718      	bx	r3
     f1a:	bf00      	nop
     f1c:	200001dc 	.word	0x200001dc
     f20:	b6db6db7 	.word	0xb6db6db7
     f24:	00003f6c 	.word	0x00003f6c

00000f28 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
     f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
     f2c:	4e10      	ldr	r6, [pc, #64]	; (f70 <onoff_start+0x48>)
     f2e:	1b84      	subs	r4, r0, r6
     f30:	10a3      	asrs	r3, r4, #2
     f32:	4c10      	ldr	r4, [pc, #64]	; (f74 <onoff_start+0x4c>)
     f34:	435c      	muls	r4, r3
     f36:	b2e4      	uxtb	r4, r4
	err = set_starting_state(&subdata->flags, ctx);
     f38:	250c      	movs	r5, #12
     f3a:	4365      	muls	r5, r4
{
     f3c:	4680      	mov	r8, r0
	err = set_starting_state(&subdata->flags, ctx);
     f3e:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
     f42:	460f      	mov	r7, r1
	err = set_starting_state(&subdata->flags, ctx);
     f44:	4430      	add	r0, r6
     f46:	2140      	movs	r1, #64	; 0x40
     f48:	f002 fbcc 	bl	36e4 <set_starting_state>
	if (err < 0) {
     f4c:	1e01      	subs	r1, r0, #0
     f4e:	db09      	blt.n	f64 <onoff_start+0x3c>
	subdata->cb = cb;
     f50:	4a09      	ldr	r2, [pc, #36]	; (f78 <onoff_start+0x50>)
     f52:	1973      	adds	r3, r6, r5
	subdata->user_data = user_data;
     f54:	e9c3 270e 	strd	r2, r7, [r3, #56]	; 0x38
	 get_sub_config(dev, type)->start();
     f58:	4b08      	ldr	r3, [pc, #32]	; (f7c <onoff_start+0x54>)
     f5a:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
     f5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
     f62:	4718      	bx	r3
		notify(mgr, err);
     f64:	4640      	mov	r0, r8
     f66:	463b      	mov	r3, r7
}
     f68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
     f6c:	4718      	bx	r3
     f6e:	bf00      	nop
     f70:	200001dc 	.word	0x200001dc
     f74:	b6db6db7 	.word	0xb6db6db7
     f78:	00003747 	.word	0x00003747
     f7c:	00003f6c 	.word	0x00003f6c

00000f80 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
     f80:	2200      	movs	r2, #0
{
     f82:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
     f84:	2101      	movs	r1, #1
{
     f86:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
     f88:	4610      	mov	r0, r2
     f8a:	f000 faff 	bl	158c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
     f8e:	2000      	movs	r0, #0
     f90:	f000 fade 	bl	1550 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
     f94:	480f      	ldr	r0, [pc, #60]	; (fd4 <clk_init+0x54>)
     f96:	f001 f9c5 	bl	2324 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
     f9a:	4b0f      	ldr	r3, [pc, #60]	; (fd8 <clk_init+0x58>)
     f9c:	4298      	cmp	r0, r3
     f9e:	d115      	bne.n	fcc <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
     fa0:	f002 fda5 	bl	3aee <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
     fa4:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
     fa6:	490d      	ldr	r1, [pc, #52]	; (fdc <clk_init+0x5c>)
     fa8:	4630      	mov	r0, r6
     faa:	f002 faad 	bl	3508 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
     fae:	2800      	cmp	r0, #0
     fb0:	db0b      	blt.n	fca <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
     fb2:	2501      	movs	r5, #1
     fb4:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
     fb6:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
     fb8:	4908      	ldr	r1, [pc, #32]	; (fdc <clk_init+0x5c>)
     fba:	f104 001c 	add.w	r0, r4, #28
     fbe:	f002 faa3 	bl	3508 <onoff_manager_init>
		if (err < 0) {
     fc2:	2800      	cmp	r0, #0
     fc4:	db01      	blt.n	fca <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
     fc6:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
     fc8:	2000      	movs	r0, #0
}
     fca:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
     fcc:	f06f 0004 	mvn.w	r0, #4
     fd0:	e7fb      	b.n	fca <clk_init+0x4a>
     fd2:	bf00      	nop
     fd4:	00001015 	.word	0x00001015
     fd8:	0bad0000 	.word	0x0bad0000
     fdc:	00003f7c 	.word	0x00003f7c

00000fe0 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
     fe0:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
     fe2:	230c      	movs	r3, #12
     fe4:	4809      	ldr	r0, [pc, #36]	; (100c <clkstarted_handle.constprop.0+0x2c>)
     fe6:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
     fe8:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
     fea:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
     fec:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
     ff0:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
     ff2:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
     ff4:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
     ff6:	4418      	add	r0, r3
     ff8:	f002 fb92 	bl	3720 <set_on_state>
	if (callback) {
     ffc:	b12d      	cbz	r5, 100a <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
     ffe:	4632      	mov	r2, r6
    1000:	462b      	mov	r3, r5
    1002:	4803      	ldr	r0, [pc, #12]	; (1010 <clkstarted_handle.constprop.0+0x30>)
}
    1004:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    1008:	4718      	bx	r3
}
    100a:	bd70      	pop	{r4, r5, r6, pc}
    100c:	200001dc 	.word	0x200001dc
    1010:	20000020 	.word	0x20000020

00001014 <clock_event_handler>:
	switch (event) {
    1014:	b110      	cbz	r0, 101c <clock_event_handler+0x8>
    1016:	2801      	cmp	r0, #1
    1018:	d004      	beq.n	1024 <clock_event_handler+0x10>
    101a:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    101c:	4b03      	ldr	r3, [pc, #12]	; (102c <clock_event_handler+0x18>)
    101e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1020:	075b      	lsls	r3, r3, #29
    1022:	d101      	bne.n	1028 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1024:	f7ff bfdc 	b.w	fe0 <clkstarted_handle.constprop.0>
}
    1028:	4770      	bx	lr
    102a:	bf00      	nop
    102c:	200001dc 	.word	0x200001dc

00001030 <generic_hfclk_start>:
{
    1030:	b508      	push	{r3, lr}
	__asm__ volatile(
    1032:	f04f 0320 	mov.w	r3, #32
    1036:	f3ef 8111 	mrs	r1, BASEPRI
    103a:	f383 8811 	msr	BASEPRI, r3
    103e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    1042:	4a12      	ldr	r2, [pc, #72]	; (108c <generic_hfclk_start+0x5c>)
    1044:	6813      	ldr	r3, [r2, #0]
    1046:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    104a:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    104e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    1050:	d00c      	beq.n	106c <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    1052:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1056:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    105a:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    105e:	f013 0301 	ands.w	r3, r3, #1
    1062:	d003      	beq.n	106c <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    1064:	480a      	ldr	r0, [pc, #40]	; (1090 <generic_hfclk_start+0x60>)
    1066:	f002 fb5b 	bl	3720 <set_on_state>
			already_started = true;
    106a:	2301      	movs	r3, #1
	__asm__ volatile(
    106c:	f381 8811 	msr	BASEPRI, r1
    1070:	f3bf 8f6f 	isb	sy
	if (already_started) {
    1074:	b123      	cbz	r3, 1080 <generic_hfclk_start+0x50>
}
    1076:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    107a:	2000      	movs	r0, #0
    107c:	f7ff bfb0 	b.w	fe0 <clkstarted_handle.constprop.0>
}
    1080:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    1084:	2001      	movs	r0, #1
    1086:	f001 b95d 	b.w	2344 <nrfx_clock_start>
    108a:	bf00      	nop
    108c:	2000022c 	.word	0x2000022c
    1090:	2000021c 	.word	0x2000021c

00001094 <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1094:	4b09      	ldr	r3, [pc, #36]	; (10bc <generic_hfclk_stop+0x28>)
    1096:	f3bf 8f5b 	dmb	ish
    109a:	e853 2f00 	ldrex	r2, [r3]
    109e:	f022 0102 	bic.w	r1, r2, #2
    10a2:	e843 1000 	strex	r0, r1, [r3]
    10a6:	2800      	cmp	r0, #0
    10a8:	d1f7      	bne.n	109a <generic_hfclk_stop+0x6>
    10aa:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    10ae:	07d3      	lsls	r3, r2, #31
    10b0:	d402      	bmi.n	10b8 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    10b2:	2001      	movs	r0, #1
    10b4:	f001 b978 	b.w	23a8 <nrfx_clock_stop>
}
    10b8:	4770      	bx	lr
    10ba:	bf00      	nop
    10bc:	2000022c 	.word	0x2000022c

000010c0 <api_blocking_start>:
{
    10c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    10c2:	2200      	movs	r2, #0
    10c4:	2301      	movs	r3, #1
    10c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    10ca:	4a09      	ldr	r2, [pc, #36]	; (10f0 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    10cc:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    10d0:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    10d2:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    10d6:	f002 fb5c 	bl	3792 <api_start>
	if (err < 0) {
    10da:	2800      	cmp	r0, #0
    10dc:	db05      	blt.n	10ea <api_blocking_start+0x2a>
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    10de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    10e2:	2300      	movs	r3, #0
    10e4:	4668      	mov	r0, sp
    10e6:	f001 ff2f 	bl	2f48 <z_impl_k_sem_take>
}
    10ea:	b005      	add	sp, #20
    10ec:	f85d fb04 	ldr.w	pc, [sp], #4
    10f0:	00003765 	.word	0x00003765

000010f4 <z_nrf_clock_control_lf_on>:
{
    10f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    10f8:	493a      	ldr	r1, [pc, #232]	; (11e4 <z_nrf_clock_control_lf_on+0xf0>)
    10fa:	f3bf 8f5b 	dmb	ish
    10fe:	4606      	mov	r6, r0
    1100:	2201      	movs	r2, #1
    1102:	e851 3f00 	ldrex	r3, [r1]
    1106:	e841 2000 	strex	r0, r2, [r1]
    110a:	2800      	cmp	r0, #0
    110c:	d1f9      	bne.n	1102 <z_nrf_clock_control_lf_on+0xe>
    110e:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    1112:	b933      	cbnz	r3, 1122 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    1114:	4934      	ldr	r1, [pc, #208]	; (11e8 <z_nrf_clock_control_lf_on+0xf4>)
		err = onoff_request(mgr, &cli);
    1116:	4835      	ldr	r0, [pc, #212]	; (11ec <z_nrf_clock_control_lf_on+0xf8>)
    1118:	604b      	str	r3, [r1, #4]
    111a:	60cb      	str	r3, [r1, #12]
    111c:	608a      	str	r2, [r1, #8]
    111e:	f002 fa06 	bl	352e <onoff_request>
	switch (start_mode) {
    1122:	1e73      	subs	r3, r6, #1
    1124:	2b01      	cmp	r3, #1
    1126:	d832      	bhi.n	118e <z_nrf_clock_control_lf_on+0x9a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    1128:	2e01      	cmp	r6, #1
    112a:	d107      	bne.n	113c <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    112c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1130:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    1134:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    1138:	2b01      	cmp	r3, #1
    113a:	d028      	beq.n	118e <z_nrf_clock_control_lf_on+0x9a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    113c:	f002 fdb8 	bl	3cb0 <k_is_in_isr>
    1140:	4604      	mov	r4, r0
    1142:	b918      	cbnz	r0, 114c <z_nrf_clock_control_lf_on+0x58>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    1144:	4b2a      	ldr	r3, [pc, #168]	; (11f0 <z_nrf_clock_control_lf_on+0xfc>)
	int key = isr_mode ? irq_lock() : 0;
    1146:	781b      	ldrb	r3, [r3, #0]
    1148:	2b00      	cmp	r3, #0
    114a:	d144      	bne.n	11d6 <z_nrf_clock_control_lf_on+0xe2>
	__asm__ volatile(
    114c:	f04f 0320 	mov.w	r3, #32
    1150:	f3ef 8511 	mrs	r5, BASEPRI
    1154:	f383 8811 	msr	BASEPRI, r3
    1158:	f3bf 8f6f 	isb	sy
    115c:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    115e:	4f25      	ldr	r7, [pc, #148]	; (11f4 <z_nrf_clock_control_lf_on+0x100>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1160:	f8df 8094 	ldr.w	r8, [pc, #148]	; 11f8 <z_nrf_clock_control_lf_on+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1164:	f8df 9094 	ldr.w	r9, [pc, #148]	; 11fc <z_nrf_clock_control_lf_on+0x108>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    1168:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    116c:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    1170:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    1174:	03d2      	lsls	r2, r2, #15
    1176:	d50c      	bpl.n	1192 <z_nrf_clock_control_lf_on+0x9e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    1178:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    117c:	2b01      	cmp	r3, #1
    117e:	d001      	beq.n	1184 <z_nrf_clock_control_lf_on+0x90>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    1180:	2e01      	cmp	r6, #1
    1182:	d106      	bne.n	1192 <z_nrf_clock_control_lf_on+0x9e>
	if (isr_mode) {
    1184:	b30c      	cbz	r4, 11ca <z_nrf_clock_control_lf_on+0xd6>
	__asm__ volatile(
    1186:	f385 8811 	msr	BASEPRI, r5
    118a:	f3bf 8f6f 	isb	sy
}
    118e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
    1192:	b1ac      	cbz	r4, 11c0 <z_nrf_clock_control_lf_on+0xcc>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    1194:	4628      	mov	r0, r5
    1196:	f000 fa59 	bl	164c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    119a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    119e:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    11a2:	2b00      	cmp	r3, #0
    11a4:	d1e0      	bne.n	1168 <z_nrf_clock_control_lf_on+0x74>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    11a6:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    11a8:	2900      	cmp	r1, #0
    11aa:	d0dd      	beq.n	1168 <z_nrf_clock_control_lf_on+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    11ac:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    11ae:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    11b0:	2301      	movs	r3, #1
    11b2:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    11b6:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    11ba:	f8c9 3000 	str.w	r3, [r9]
}
    11be:	e7d3      	b.n	1168 <z_nrf_clock_control_lf_on+0x74>
	return z_impl_k_sleep(timeout);
    11c0:	2100      	movs	r1, #0
    11c2:	2021      	movs	r0, #33	; 0x21
    11c4:	f001 fe26 	bl	2e14 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    11c8:	e7e7      	b.n	119a <z_nrf_clock_control_lf_on+0xa6>
    p_reg->INTENSET = mask;
    11ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    11ce:	2202      	movs	r2, #2
    11d0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    11d4:	e7db      	b.n	118e <z_nrf_clock_control_lf_on+0x9a>
    p_reg->INTENCLR = mask;
    11d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    11da:	2202      	movs	r2, #2
    11dc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    11e0:	4605      	mov	r5, r0
}
    11e2:	e7bc      	b.n	115e <z_nrf_clock_control_lf_on+0x6a>
    11e4:	20000230 	.word	0x20000230
    11e8:	200001cc 	.word	0x200001cc
    11ec:	200001f8 	.word	0x200001f8
    11f0:	200007f3 	.word	0x200007f3
    11f4:	40000104 	.word	0x40000104
    11f8:	e000e100 	.word	0xe000e100
    11fc:	40000008 	.word	0x40000008

00001200 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(int32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    1200:	4a04      	ldr	r2, [pc, #16]	; (1214 <sys_clock_timeout_handler+0x14>)
    1202:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    1204:	1ac8      	subs	r0, r1, r3
    1206:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    120a:	4403      	add	r3, r0
    120c:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    120e:	f002 b859 	b.w	32c4 <sys_clock_announce>
    1212:	bf00      	nop
    1214:	20000244 	.word	0x20000244

00001218 <set_absolute_alarm>:
{
    1218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    121c:	0086      	lsls	r6, r0, #2
    121e:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    1222:	f100 0450 	add.w	r4, r0, #80	; 0x50
    1226:	f506 3688 	add.w	r6, r6, #69632	; 0x11000
    122a:	00a4      	lsls	r4, r4, #2
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    122c:	f8df 807c 	ldr.w	r8, [pc, #124]	; 12ac <set_absolute_alarm+0x94>
    return p_reg->CC[ch];
    1230:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1234:	b2a4      	uxth	r4, r4
    1236:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    123a:	f44f 3780 	mov.w	r7, #65536	; 0x10000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    123e:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    1242:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    1246:	4087      	lsls	r7, r0
    1248:	46c1      	mov	r9, r8
     return p_reg->COUNTER;
    124a:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    124e:	eba3 030a 	sub.w	r3, r3, sl
    1252:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    1256:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    125a:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    125c:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    1260:	d102      	bne.n	1268 <set_absolute_alarm+0x50>
	z_impl_k_busy_wait(usec_to_wait);
    1262:	2013      	movs	r0, #19
    1264:	f002 fd2a 	bl	3cbc <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    1268:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
    126c:	1aab      	subs	r3, r5, r2
    126e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    1272:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    1276:	bf88      	it	hi
    1278:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    127a:	2300      	movs	r3, #0
    127c:	6023      	str	r3, [r4, #0]
    127e:	6823      	ldr	r3, [r4, #0]
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    1280:	f8c9 7344 	str.w	r7, [r9, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    1284:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    1288:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    128c:	f8d9 3504 	ldr.w	r3, [r9, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    1290:	459a      	cmp	sl, r3
    1292:	d006      	beq.n	12a2 <set_absolute_alarm+0x8a>
	return (a - b) & COUNTER_MAX;
    1294:	1aeb      	subs	r3, r5, r3
    1296:	3b02      	subs	r3, #2
    1298:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    129c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    12a0:	d801      	bhi.n	12a6 <set_absolute_alarm+0x8e>
}
    12a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
    12a6:	462b      	mov	r3, r5
    12a8:	e7cf      	b.n	124a <set_absolute_alarm+0x32>
    12aa:	bf00      	nop
    12ac:	40011000 	.word	0x40011000

000012b0 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    12b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return p_reg->INTENSET & mask;
    12b2:	4e10      	ldr	r6, [pc, #64]	; (12f4 <rtc_nrf_isr+0x44>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    12b4:	4f10      	ldr	r7, [pc, #64]	; (12f8 <rtc_nrf_isr+0x48>)
	ARG_UNUSED(arg);

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    12b6:	2500      	movs	r5, #0
    12b8:	4b10      	ldr	r3, [pc, #64]	; (12fc <rtc_nrf_isr+0x4c>)
    12ba:	2000      	movs	r0, #0
    12bc:	681c      	ldr	r4, [r3, #0]
    12be:	461a      	mov	r2, r3
    12c0:	b105      	cbz	r5, 12c4 <rtc_nrf_isr+0x14>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    12c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return p_reg->INTENSET & mask;
    12c4:	f8d6 1304 	ldr.w	r1, [r6, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    12c8:	03c9      	lsls	r1, r1, #15
    12ca:	d5fa      	bpl.n	12c2 <rtc_nrf_isr+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    12cc:	6839      	ldr	r1, [r7, #0]
    12ce:	2900      	cmp	r1, #0
    12d0:	d0f7      	beq.n	12c2 <rtc_nrf_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    12d2:	603d      	str	r5, [r7, #0]
    12d4:	6839      	ldr	r1, [r7, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    12d6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    12da:	f8c6 1348 	str.w	r1, [r6, #840]	; 0x348
    return p_reg->CC[ch];
    12de:	f8d6 1540 	ldr.w	r1, [r6, #1344]	; 0x540
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    12e2:	2501      	movs	r5, #1
			if (handler) {
    12e4:	b11c      	cbz	r4, 12ee <rtc_nrf_isr+0x3e>
				handler(chan, cc_val,
    12e6:	685a      	ldr	r2, [r3, #4]
    12e8:	6018      	str	r0, [r3, #0]
    12ea:	47a0      	blx	r4
    12ec:	e7e4      	b.n	12b8 <rtc_nrf_isr+0x8>
    12ee:	6014      	str	r4, [r2, #0]
}
    12f0:	e7e7      	b.n	12c2 <rtc_nrf_isr+0x12>
    12f2:	bf00      	nop
    12f4:	40011000 	.word	0x40011000
    12f8:	40011140 	.word	0x40011140
    12fc:	20000238 	.word	0x20000238

00001300 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
    1300:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    1302:	4d10      	ldr	r5, [pc, #64]	; (1344 <sys_clock_driver_init+0x44>)
    1304:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    1306:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
    130a:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->INTENSET = mask;
    130e:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    1312:	4b0d      	ldr	r3, [pc, #52]	; (1348 <sys_clock_driver_init+0x48>)
    1314:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1318:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    131c:	2101      	movs	r1, #1
    131e:	4622      	mov	r2, r4
    1320:	2011      	movs	r0, #17
    1322:	f000 f933 	bl	158c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    1326:	2011      	movs	r0, #17
    1328:	f000 f912 	bl	1550 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    132c:	4a07      	ldr	r2, [pc, #28]	; (134c <sys_clock_driver_init+0x4c>)
    132e:	2301      	movs	r3, #1
    1330:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    1332:	4a07      	ldr	r2, [pc, #28]	; (1350 <sys_clock_driver_init+0x50>)
    1334:	602b      	str	r3, [r5, #0]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    1336:	2002      	movs	r0, #2
	int_mask = BIT_MASK(CHAN_COUNT);
    1338:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    133a:	f7ff fedb 	bl	10f4 <z_nrf_clock_control_lf_on>

	return 0;
}
    133e:	4620      	mov	r0, r4
    1340:	bd38      	pop	{r3, r4, r5, pc}
    1342:	bf00      	nop
    1344:	40011000 	.word	0x40011000
    1348:	e000e100 	.word	0xe000e100
    134c:	40011008 	.word	0x40011008
    1350:	20000240 	.word	0x20000240

00001354 <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    1354:	4b13      	ldr	r3, [pc, #76]	; (13a4 <sys_clock_set_timeout+0x50>)
    1356:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    135a:	bf08      	it	eq
    135c:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    135e:	3801      	subs	r0, #1
    1360:	2800      	cmp	r0, #0
    1362:	dd1c      	ble.n	139e <sys_clock_set_timeout+0x4a>
    1364:	4298      	cmp	r0, r3
    1366:	bfa8      	it	ge
    1368:	4618      	movge	r0, r3
     return p_reg->COUNTER;
    136a:	4b0f      	ldr	r3, [pc, #60]	; (13a8 <sys_clock_set_timeout+0x54>)
    136c:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    1370:	4b0e      	ldr	r3, [pc, #56]	; (13ac <sys_clock_set_timeout+0x58>)
    1372:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
    1374:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    1376:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
    137a:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
		ticks = 0;
    137e:	bf18      	it	ne
    1380:	2000      	movne	r0, #0
	cc_data[chan].callback = handler;
    1382:	4a0b      	ldr	r2, [pc, #44]	; (13b0 <sys_clock_set_timeout+0x5c>)
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    1384:	3301      	adds	r3, #1
    1386:	4403      	add	r3, r0
	cc_data[chan].callback = handler;
    1388:	480a      	ldr	r0, [pc, #40]	; (13b4 <sys_clock_set_timeout+0x60>)
    138a:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    138c:	2000      	movs	r0, #0
    138e:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    1390:	4a04      	ldr	r2, [pc, #16]	; (13a4 <sys_clock_set_timeout+0x50>)
    1392:	4293      	cmp	r3, r2
    1394:	bf94      	ite	ls
    1396:	18c9      	addls	r1, r1, r3
    1398:	1889      	addhi	r1, r1, r2
    139a:	f7ff bf3d 	b.w	1218 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    139e:	2000      	movs	r0, #0
    13a0:	e7e3      	b.n	136a <sys_clock_set_timeout+0x16>
    13a2:	bf00      	nop
    13a4:	007fffff 	.word	0x007fffff
    13a8:	40011000 	.word	0x40011000
    13ac:	20000244 	.word	0x20000244
    13b0:	20000238 	.word	0x20000238
    13b4:	00001201 	.word	0x00001201

000013b8 <sys_clock_elapsed>:
	__asm__ volatile(
    13b8:	f04f 0220 	mov.w	r2, #32
    13bc:	f3ef 8311 	mrs	r3, BASEPRI
    13c0:	f382 8811 	msr	BASEPRI, r2
    13c4:	f3bf 8f6f 	isb	sy
    13c8:	4a06      	ldr	r2, [pc, #24]	; (13e4 <sys_clock_elapsed+0x2c>)
    13ca:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    13ce:	4a06      	ldr	r2, [pc, #24]	; (13e8 <sys_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    13d0:	6812      	ldr	r2, [r2, #0]
    13d2:	1a80      	subs	r0, r0, r2
    13d4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    13d8:	f383 8811 	msr	BASEPRI, r3
    13dc:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    13e0:	4770      	bx	lr
    13e2:	bf00      	nop
    13e4:	40011000 	.word	0x40011000
    13e8:	20000244 	.word	0x20000244

000013ec <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
    13ec:	b510      	push	{r4, lr}
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    13ee:	4c11      	ldr	r4, [pc, #68]	; (1434 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    13f0:	4a11      	ldr	r2, [pc, #68]	; (1438 <_DoInit+0x4c>)
    13f2:	61a2      	str	r2, [r4, #24]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    13f4:	2303      	movs	r3, #3
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    13f6:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
    13fa:	4b10      	ldr	r3, [pc, #64]	; (143c <_DoInit+0x50>)
    13fc:	61e3      	str	r3, [r4, #28]
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    13fe:	6622      	str	r2, [r4, #96]	; 0x60
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    1400:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aDown[0].pBuffer       = _acDownBuffer;
    1404:	4a0e      	ldr	r2, [pc, #56]	; (1440 <_DoInit+0x54>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
    1406:	490f      	ldr	r1, [pc, #60]	; (1444 <_DoInit+0x58>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    1408:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    140a:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    140c:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    140e:	2210      	movs	r2, #16
  strcpy(&p->acID[7], "RTT");
    1410:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
    1412:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    1414:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    1416:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    1418:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    141a:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    141c:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    141e:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    1420:	f002 fa3f 	bl	38a2 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    1424:	4908      	ldr	r1, [pc, #32]	; (1448 <_DoInit+0x5c>)
    1426:	4620      	mov	r0, r4
    1428:	f002 fa3b 	bl	38a2 <strcpy>
  p->acID[6] = ' ';
    142c:	2320      	movs	r3, #32
    142e:	71a3      	strb	r3, [r4, #6]
}
    1430:	bd10      	pop	{r4, pc}
    1432:	bf00      	nop
    1434:	20000248 	.word	0x20000248
    1438:	00004072 	.word	0x00004072
    143c:	200003f1 	.word	0x200003f1
    1440:	200003e1 	.word	0x200003e1
    1444:	0000407b 	.word	0x0000407b
    1448:	0000407f 	.word	0x0000407f

0000144c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    144c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    144e:	4c18      	ldr	r4, [pc, #96]	; (14b0 <SEGGER_RTT_WriteNoLock+0x64>)
    1450:	2318      	movs	r3, #24
    1452:	fb00 3503 	mla	r5, r0, r3, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    1456:	fb03 4000 	mla	r0, r3, r0, r4
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    145a:	4425      	add	r5, r4
  switch (pRing->Flags) {
    145c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    145e:	2c01      	cmp	r4, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    1460:	460f      	mov	r7, r1
    1462:	4616      	mov	r6, r2
  switch (pRing->Flags) {
    1464:	d00f      	beq.n	1486 <SEGGER_RTT_WriteNoLock+0x3a>
    1466:	2c02      	cmp	r4, #2
    1468:	d01a      	beq.n	14a0 <SEGGER_RTT_WriteNoLock+0x54>
    146a:	b9f4      	cbnz	r4, 14aa <SEGGER_RTT_WriteNoLock+0x5e>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    146c:	4628      	mov	r0, r5
    146e:	f002 f9ad 	bl	37cc <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    1472:	4286      	cmp	r6, r0
    1474:	d805      	bhi.n	1482 <SEGGER_RTT_WriteNoLock+0x36>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    1476:	4632      	mov	r2, r6
    1478:	4639      	mov	r1, r7
    147a:	4628      	mov	r0, r5
    147c:	f002 f9b4 	bl	37e8 <_WriteNoCheck>
    1480:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
    1482:	4620      	mov	r0, r4
    1484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
    1486:	4628      	mov	r0, r5
    1488:	f002 f9a0 	bl	37cc <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    148c:	4286      	cmp	r6, r0
    148e:	4634      	mov	r4, r6
    1490:	bf28      	it	cs
    1492:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    1494:	4622      	mov	r2, r4
    1496:	4639      	mov	r1, r7
    1498:	4628      	mov	r0, r5
    149a:	f002 f9a5 	bl	37e8 <_WriteNoCheck>
    break;
    149e:	e7f0      	b.n	1482 <SEGGER_RTT_WriteNoLock+0x36>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    14a0:	4628      	mov	r0, r5
}
    14a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    14a6:	f002 b9bb 	b.w	3820 <_WriteBlocking>
  switch (pRing->Flags) {
    14aa:	2400      	movs	r4, #0
  return Status;
    14ac:	e7e9      	b.n	1482 <SEGGER_RTT_WriteNoLock+0x36>
    14ae:	bf00      	nop
    14b0:	20000248 	.word	0x20000248

000014b4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    14b4:	4a09      	ldr	r2, [pc, #36]	; (14dc <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    14b6:	490a      	ldr	r1, [pc, #40]	; (14e0 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    14b8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    14ba:	6809      	ldr	r1, [r1, #0]
    14bc:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    14be:	4909      	ldr	r1, [pc, #36]	; (14e4 <arch_swap+0x30>)
	_current->arch.basepri = key;
    14c0:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    14c2:	684b      	ldr	r3, [r1, #4]
    14c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    14c8:	604b      	str	r3, [r1, #4]
    14ca:	2300      	movs	r3, #0
    14cc:	f383 8811 	msr	BASEPRI, r3
    14d0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    14d4:	6893      	ldr	r3, [r2, #8]
}
    14d6:	6f98      	ldr	r0, [r3, #120]	; 0x78
    14d8:	4770      	bx	lr
    14da:	bf00      	nop
    14dc:	200003a0 	.word	0x200003a0
    14e0:	00004004 	.word	0x00004004
    14e4:	e000ed00 	.word	0xe000ed00

000014e8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    14e8:	490f      	ldr	r1, [pc, #60]	; (1528 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
    14ea:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    14ec:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    14f0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    14f2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    14f6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    14fa:	2020      	movs	r0, #32
    msr BASEPRI, r0
    14fc:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1500:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1504:	4f09      	ldr	r7, [pc, #36]	; (152c <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1506:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    150a:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    150c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    150e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1510:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    1512:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1514:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1516:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    151a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    151e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    1522:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    1526:	4770      	bx	lr
    ldr r1, =_kernel
    1528:	200003a0 	.word	0x200003a0
    ldr v4, =_SCS_ICSR
    152c:	e000ed04 	.word	0xe000ed04

00001530 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    1530:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1534:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1536:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    153a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    153e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1540:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1544:	2902      	cmp	r1, #2
    beq _oops
    1546:	d0ff      	beq.n	1548 <_oops>

00001548 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1548:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    154a:	f002 f99f 	bl	388c <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    154e:	bd01      	pop	{r0, pc}

00001550 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1550:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1552:	2b00      	cmp	r3, #0
    1554:	db08      	blt.n	1568 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1556:	2201      	movs	r2, #1
    1558:	f000 001f 	and.w	r0, r0, #31
    155c:	fa02 f000 	lsl.w	r0, r2, r0
    1560:	095b      	lsrs	r3, r3, #5
    1562:	4a02      	ldr	r2, [pc, #8]	; (156c <arch_irq_enable+0x1c>)
    1564:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    1568:	4770      	bx	lr
    156a:	bf00      	nop
    156c:	e000e100 	.word	0xe000e100

00001570 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    1570:	4b05      	ldr	r3, [pc, #20]	; (1588 <arch_irq_is_enabled+0x18>)
    1572:	0942      	lsrs	r2, r0, #5
    1574:	f000 001f 	and.w	r0, r0, #31
    1578:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    157c:	2301      	movs	r3, #1
    157e:	fa03 f000 	lsl.w	r0, r3, r0
}
    1582:	4010      	ands	r0, r2
    1584:	4770      	bx	lr
    1586:	bf00      	nop
    1588:	e000e100 	.word	0xe000e100

0000158c <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    158c:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    158e:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1590:	bfa8      	it	ge
    1592:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    1596:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    159a:	bfb8      	it	lt
    159c:	4b06      	ldrlt	r3, [pc, #24]	; (15b8 <z_arm_irq_priority_set+0x2c>)
    159e:	ea4f 1141 	mov.w	r1, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    15a2:	bfac      	ite	ge
    15a4:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    15a8:	f000 000f 	andlt.w	r0, r0, #15
    15ac:	b2c9      	uxtb	r1, r1
    15ae:	bfb4      	ite	lt
    15b0:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    15b2:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    15b6:	4770      	bx	lr
    15b8:	e000ed14 	.word	0xe000ed14

000015bc <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    15bc:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    15c0:	9b00      	ldr	r3, [sp, #0]
    15c2:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    15c6:	490a      	ldr	r1, [pc, #40]	; (15f0 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    15c8:	9b01      	ldr	r3, [sp, #4]
    15ca:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    15ce:	9b02      	ldr	r3, [sp, #8]
    15d0:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    15d4:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    15d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    15dc:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    15e0:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    15e4:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    15e6:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    15e8:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    15ea:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    15ec:	4770      	bx	lr
    15ee:	bf00      	nop
    15f0:	000035c1 	.word	0x000035c1

000015f4 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    15f4:	b508      	push	{r3, lr}
    15f6:	4606      	mov	r6, r0
    15f8:	460d      	mov	r5, r1
    15fa:	4614      	mov	r4, r2
	z_arm_configure_static_mpu_regions();
    15fc:	f000 f990 	bl	1920 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    1600:	4b07      	ldr	r3, [pc, #28]	; (1620 <arch_switch_to_main_thread+0x2c>)
    1602:	609e      	str	r6, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1604:	4620      	mov	r0, r4
    1606:	f385 8809 	msr	PSP, r5
    160a:	2100      	movs	r1, #0
    160c:	b663      	cpsie	if
    160e:	f381 8811 	msr	BASEPRI, r1
    1612:	f3bf 8f6f 	isb	sy
    1616:	2200      	movs	r2, #0
    1618:	2300      	movs	r3, #0
    161a:	f001 ffd1 	bl	35c0 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    161e:	bf00      	nop
    1620:	200003a0 	.word	0x200003a0

00001624 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1624:	4901      	ldr	r1, [pc, #4]	; (162c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    1626:	2210      	movs	r2, #16
	str	r2, [r1]
    1628:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    162a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    162c:	e000ed10 	.word	0xe000ed10

00001630 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1630:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    1632:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1634:	f380 8811 	msr	BASEPRI, r0
	isb
    1638:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    163c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1640:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    1642:	b662      	cpsie	i
	isb
    1644:	f3bf 8f6f 	isb	sy

	bx	lr
    1648:	4770      	bx	lr
    164a:	bf00      	nop

0000164c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    164c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    164e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1650:	f381 8811 	msr	BASEPRI, r1

	wfe
    1654:	bf20      	wfe

	msr	BASEPRI, r0
    1656:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    165a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    165c:	4770      	bx	lr
    165e:	bf00      	nop

00001660 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1660:	bf30      	wfi
    b z_SysNmiOnReset
    1662:	f7ff bffd 	b.w	1660 <z_SysNmiOnReset>
    1666:	bf00      	nop

00001668 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1668:	4a0e      	ldr	r2, [pc, #56]	; (16a4 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    166a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    166c:	4b0e      	ldr	r3, [pc, #56]	; (16a8 <z_arm_prep_c+0x40>)
    166e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1672:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1674:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1678:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    167c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1680:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1684:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    1688:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    168c:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    1690:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1694:	f000 ff72 	bl	257c <z_bss_zero>
	z_data_copy();
    1698:	f001 fd1a 	bl	30d0 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    169c:	f000 f922 	bl	18e4 <z_arm_interrupt_init>
	z_cstart();
    16a0:	f000 ff90 	bl	25c4 <z_cstart>
    16a4:	00000000 	.word	0x00000000
    16a8:	e000ed00 	.word	0xe000ed00

000016ac <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    16ac:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    16ae:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    16b0:	4a0b      	ldr	r2, [pc, #44]	; (16e0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    16b2:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    16b4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    16b6:	bf1e      	ittt	ne
	movne	r1, #0
    16b8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    16ba:	6211      	strne	r1, [r2, #32]
		blne	z_pm_save_idle_exit
    16bc:	f002 fa48 	blne	3b50 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    16c0:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    16c2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    16c6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    16ca:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    16ce:	4905      	ldr	r1, [pc, #20]	; (16e4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    16d0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    16d2:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    16d4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    16d6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    16da:	4903      	ldr	r1, [pc, #12]	; (16e8 <_isr_wrapper+0x3c>)
	bx r1
    16dc:	4708      	bx	r1
    16de:	0000      	.short	0x0000
	ldr r2, =_kernel
    16e0:	200003a0 	.word	0x200003a0
	ldr r1, =_sw_isr_table
    16e4:	00003da0 	.word	0x00003da0
	ldr r1, =z_arm_int_exit
    16e8:	000018c9 	.word	0x000018c9

000016ec <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    16ec:	f002 f944 	bl	3978 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    16f0:	2020      	movs	r0, #32
    msr BASEPRI, r0
    16f2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    16f6:	4808      	ldr	r0, [pc, #32]	; (1718 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    16f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    16fc:	1840      	adds	r0, r0, r1
    msr PSP, r0
    16fe:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1702:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1706:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1708:	4308      	orrs	r0, r1
    msr CONTROL, r0
    170a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    170e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1712:	f7ff ffa9 	bl	1668 <z_arm_prep_c>
    1716:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    1718:	20000d38 	.word	0x20000d38

0000171c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    171c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1720:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    1724:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    1726:	4672      	mov	r2, lr
	bl z_arm_fault
    1728:	f000 f852 	bl	17d0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    172c:	bd01      	pop	{r0, pc}
    172e:	bf00      	nop

00001730 <mem_manage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1730:	4b0e      	ldr	r3, [pc, #56]	; (176c <mem_manage_fault.isra.0+0x3c>)
    1732:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1734:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1736:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1738:	0792      	lsls	r2, r2, #30
    173a:	d508      	bpl.n	174e <mem_manage_fault.isra.0+0x1e>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    173c:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    173e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1740:	0612      	lsls	r2, r2, #24
    1742:	d504      	bpl.n	174e <mem_manage_fault.isra.0+0x1e>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    1744:	b118      	cbz	r0, 174e <mem_manage_fault.isra.0+0x1e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1746:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1748:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    174c:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    174e:	4b07      	ldr	r3, [pc, #28]	; (176c <mem_manage_fault.isra.0+0x3c>)
    1750:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1752:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1754:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1756:	06d2      	lsls	r2, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    1758:	bf58      	it	pl
    175a:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    175c:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    175e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1760:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    1764:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1766:	7008      	strb	r0, [r1, #0]

	return reason;
}
    1768:	4770      	bx	lr
    176a:	bf00      	nop
    176c:	e000ed00 	.word	0xe000ed00

00001770 <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1770:	4b0d      	ldr	r3, [pc, #52]	; (17a8 <bus_fault.isra.0+0x38>)
    1772:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1774:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1776:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1778:	0592      	lsls	r2, r2, #22
    177a:	d508      	bpl.n	178e <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    177c:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    177e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1780:	0412      	lsls	r2, r2, #16
    1782:	d504      	bpl.n	178e <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    1784:	b118      	cbz	r0, 178e <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1786:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1788:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    178c:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    178e:	4b06      	ldr	r3, [pc, #24]	; (17a8 <bus_fault.isra.0+0x38>)
    1790:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1792:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1794:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1796:	bf58      	it	pl
    1798:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    179a:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    179c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    179e:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    17a2:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    17a4:	7008      	strb	r0, [r1, #0]

	return reason;
}
    17a6:	4770      	bx	lr
    17a8:	e000ed00 	.word	0xe000ed00

000017ac <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    17ac:	4b07      	ldr	r3, [pc, #28]	; (17cc <usage_fault.isra.0+0x20>)
    17ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    17b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    17b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    17b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    17b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    17b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    17ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    17bc:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    17c0:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    17c4:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    17c6:	2000      	movs	r0, #0
    17c8:	4770      	bx	lr
    17ca:	bf00      	nop
    17cc:	e000ed00 	.word	0xe000ed00

000017d0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    17d0:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    17d2:	4b36      	ldr	r3, [pc, #216]	; (18ac <z_arm_fault+0xdc>)
    17d4:	685b      	ldr	r3, [r3, #4]
{
    17d6:	b08a      	sub	sp, #40	; 0x28
    17d8:	460e      	mov	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    17da:	f3c3 0308 	ubfx	r3, r3, #0, #9
    17de:	2500      	movs	r5, #0
    17e0:	f385 8811 	msr	BASEPRI, r5
    17e4:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    17e8:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    17ec:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    17f0:	d111      	bne.n	1816 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    17f2:	f002 010c 	and.w	r1, r2, #12
    17f6:	2908      	cmp	r1, #8
    17f8:	d00d      	beq.n	1816 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    17fa:	0711      	lsls	r1, r2, #28
    17fc:	d401      	bmi.n	1802 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    17fe:	4606      	mov	r6, r0
			*nested_exc = true;
    1800:	2501      	movs	r5, #1
	*recoverable = false;
    1802:	2200      	movs	r2, #0
    1804:	3b03      	subs	r3, #3
    1806:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    180a:	2b03      	cmp	r3, #3
    180c:	d847      	bhi.n	189e <z_arm_fault+0xce>
    180e:	e8df f003 	tbb	[pc, r3]
    1812:	3e04      	.short	0x3e04
    1814:	3b42      	.short	0x3b42
		return NULL;
    1816:	462e      	mov	r6, r5
    1818:	e7f3      	b.n	1802 <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    181a:	4b24      	ldr	r3, [pc, #144]	; (18ac <z_arm_fault+0xdc>)
    181c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    181e:	0792      	lsls	r2, r2, #30
    1820:	d43d      	bmi.n	189e <z_arm_fault+0xce>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1822:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    1824:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    1828:	d008      	beq.n	183c <z_arm_fault+0x6c>
		if (SCB_MMFSR != 0) {
    182a:	3328      	adds	r3, #40	; 0x28
    182c:	781b      	ldrb	r3, [r3, #0]
    182e:	b1eb      	cbz	r3, 186c <z_arm_fault+0x9c>
			reason = mem_manage_fault(esf, 1, recoverable);
    1830:	f10d 0107 	add.w	r1, sp, #7
    1834:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    1836:	f7ff ff7b 	bl	1730 <mem_manage_fault.isra.0>
		reason = usage_fault(esf);
    183a:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    183c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1840:	b993      	cbnz	r3, 1868 <z_arm_fault+0x98>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1842:	2220      	movs	r2, #32
    1844:	4631      	mov	r1, r6
    1846:	a802      	add	r0, sp, #8
    1848:	f002 f845 	bl	38d6 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    184c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    184e:	b345      	cbz	r5, 18a2 <z_arm_fault+0xd2>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1850:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1854:	b922      	cbnz	r2, 1860 <z_arm_fault+0x90>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1856:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    185a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    185e:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    1860:	a902      	add	r1, sp, #8
    1862:	4620      	mov	r0, r4
    1864:	f002 f810 	bl	3888 <z_arm_fatal_error>
}
    1868:	b00a      	add	sp, #40	; 0x28
    186a:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    186c:	4b10      	ldr	r3, [pc, #64]	; (18b0 <z_arm_fault+0xe0>)
    186e:	781b      	ldrb	r3, [r3, #0]
    1870:	b12b      	cbz	r3, 187e <z_arm_fault+0xae>
			reason = bus_fault(esf, 1, recoverable);
    1872:	f10d 0107 	add.w	r1, sp, #7
    1876:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    1878:	f7ff ff7a 	bl	1770 <bus_fault.isra.0>
    187c:	e7dd      	b.n	183a <z_arm_fault+0x6a>
		} else if (SCB_UFSR != 0) {
    187e:	4b0d      	ldr	r3, [pc, #52]	; (18b4 <z_arm_fault+0xe4>)
    1880:	8818      	ldrh	r0, [r3, #0]
    1882:	b284      	uxth	r4, r0
    1884:	2c00      	cmp	r4, #0
    1886:	d0d9      	beq.n	183c <z_arm_fault+0x6c>
		reason = usage_fault(esf);
    1888:	f7ff ff90 	bl	17ac <usage_fault.isra.0>
    188c:	e7d5      	b.n	183a <z_arm_fault+0x6a>
		reason = mem_manage_fault(esf, 0, recoverable);
    188e:	f10d 0107 	add.w	r1, sp, #7
    1892:	2000      	movs	r0, #0
    1894:	e7cf      	b.n	1836 <z_arm_fault+0x66>
		reason = bus_fault(esf, 0, recoverable);
    1896:	f10d 0107 	add.w	r1, sp, #7
    189a:	2000      	movs	r0, #0
    189c:	e7ec      	b.n	1878 <z_arm_fault+0xa8>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    189e:	2400      	movs	r4, #0
    18a0:	e7cc      	b.n	183c <z_arm_fault+0x6c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    18a2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    18a6:	f023 0301 	bic.w	r3, r3, #1
    18aa:	e7d8      	b.n	185e <z_arm_fault+0x8e>
    18ac:	e000ed00 	.word	0xe000ed00
    18b0:	e000ed29 	.word	0xe000ed29
    18b4:	e000ed2a 	.word	0xe000ed2a

000018b8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    18b8:	4a02      	ldr	r2, [pc, #8]	; (18c4 <z_arm_fault_init+0xc>)
    18ba:	6953      	ldr	r3, [r2, #20]
    18bc:	f043 0310 	orr.w	r3, r3, #16
    18c0:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    18c2:	4770      	bx	lr
    18c4:	e000ed00 	.word	0xe000ed00

000018c8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    18c8:	4b04      	ldr	r3, [pc, #16]	; (18dc <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    18ca:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    18cc:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    18ce:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    18d0:	d003      	beq.n	18da <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    18d2:	4903      	ldr	r1, [pc, #12]	; (18e0 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    18d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    18d8:	600a      	str	r2, [r1, #0]

000018da <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    18da:	4770      	bx	lr
	ldr r3, =_kernel
    18dc:	200003a0 	.word	0x200003a0
	ldr r1, =_SCS_ICSR
    18e0:	e000ed04 	.word	0xe000ed04

000018e4 <z_arm_interrupt_init>:
    18e4:	4804      	ldr	r0, [pc, #16]	; (18f8 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    18e6:	2300      	movs	r3, #0
    18e8:	2120      	movs	r1, #32
    18ea:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    18ec:	3301      	adds	r3, #1
    18ee:	2b30      	cmp	r3, #48	; 0x30
    18f0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    18f4:	d1f9      	bne.n	18ea <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    18f6:	4770      	bx	lr
    18f8:	e000e100 	.word	0xe000e100

000018fc <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    18fc:	4b06      	ldr	r3, [pc, #24]	; (1918 <z_impl_k_thread_abort+0x1c>)
    18fe:	689b      	ldr	r3, [r3, #8]
    1900:	4283      	cmp	r3, r0
    1902:	d107      	bne.n	1914 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1904:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    1908:	b123      	cbz	r3, 1914 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    190a:	4a04      	ldr	r2, [pc, #16]	; (191c <z_impl_k_thread_abort+0x20>)
    190c:	6853      	ldr	r3, [r2, #4]
    190e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1912:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    1914:	f001 baa6 	b.w	2e64 <z_thread_abort>
    1918:	200003a0 	.word	0x200003a0
    191c:	e000ed00 	.word	0xe000ed00

00001920 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1920:	4b02      	ldr	r3, [pc, #8]	; (192c <z_arm_configure_static_mpu_regions+0xc>)
    1922:	4a03      	ldr	r2, [pc, #12]	; (1930 <z_arm_configure_static_mpu_regions+0x10>)
    1924:	4803      	ldr	r0, [pc, #12]	; (1934 <z_arm_configure_static_mpu_regions+0x14>)
    1926:	2101      	movs	r1, #1
    1928:	f000 b886 	b.w	1a38 <arm_core_mpu_configure_static_mpu_regions>
    192c:	20040000 	.word	0x20040000
    1930:	20000000 	.word	0x20000000
    1934:	00003f88 	.word	0x00003f88

00001938 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    1938:	b5f0      	push	{r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    193a:	4f1e      	ldr	r7, [pc, #120]	; (19b4 <mpu_configure_regions+0x7c>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    193c:	2600      	movs	r6, #0
    193e:	428e      	cmp	r6, r1
    1940:	db01      	blt.n	1946 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    1942:	4610      	mov	r0, r2
    1944:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    1946:	6844      	ldr	r4, [r0, #4]
    1948:	b384      	cbz	r4, 19ac <mpu_configure_regions+0x74>
		if (do_sanity_check &&
    194a:	b153      	cbz	r3, 1962 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    194c:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    1950:	ea14 0f0c 	tst.w	r4, ip
    1954:	d118      	bne.n	1988 <mpu_configure_regions+0x50>
		&&
    1956:	2c1f      	cmp	r4, #31
    1958:	d916      	bls.n	1988 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    195a:	6805      	ldr	r5, [r0, #0]
		&&
    195c:	ea1c 0f05 	tst.w	ip, r5
    1960:	d112      	bne.n	1988 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    1962:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    1964:	6805      	ldr	r5, [r0, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    1966:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    196a:	b2d2      	uxtb	r2, r2
    196c:	d90f      	bls.n	198e <mpu_configure_regions+0x56>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    196e:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    1972:	d80e      	bhi.n	1992 <mpu_configure_regions+0x5a>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    1974:	3c01      	subs	r4, #1
    1976:	fab4 f484 	clz	r4, r4
    197a:	f1c4 041f 	rsb	r4, r4, #31
    197e:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    1980:	2a07      	cmp	r2, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    1982:	ea4c 0404 	orr.w	r4, ip, r4
    1986:	d906      	bls.n	1996 <mpu_configure_regions+0x5e>
			return -EINVAL;
    1988:	f06f 0215 	mvn.w	r2, #21
    198c:	e7d9      	b.n	1942 <mpu_configure_regions+0xa>
		return REGION_32B;
    198e:	2408      	movs	r4, #8
    1990:	e7f6      	b.n	1980 <mpu_configure_regions+0x48>
		return REGION_4G;
    1992:	243e      	movs	r4, #62	; 0x3e
    1994:	e7f4      	b.n	1980 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1996:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    199a:	4315      	orrs	r5, r2
    199c:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    19a0:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    19a4:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    19a6:	60fd      	str	r5, [r7, #12]
		reg_index++;
    19a8:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    19aa:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
    19ac:	3601      	adds	r6, #1
    19ae:	300c      	adds	r0, #12
    19b0:	e7c5      	b.n	193e <mpu_configure_regions+0x6>
    19b2:	bf00      	nop
    19b4:	e000ed90 	.word	0xe000ed90

000019b8 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    19b8:	4b03      	ldr	r3, [pc, #12]	; (19c8 <arm_core_mpu_enable+0x10>)
    19ba:	2205      	movs	r2, #5
    19bc:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    19be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    19c2:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    19c6:	4770      	bx	lr
    19c8:	e000ed90 	.word	0xe000ed90

000019cc <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    19cc:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    19d0:	4b01      	ldr	r3, [pc, #4]	; (19d8 <arm_core_mpu_disable+0xc>)
    19d2:	2200      	movs	r2, #0
    19d4:	605a      	str	r2, [r3, #4]
}
    19d6:	4770      	bx	lr
    19d8:	e000ed90 	.word	0xe000ed90

000019dc <arm_mpu_init>:
 */
static int arm_mpu_init(const struct device *arg)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    19dc:	4913      	ldr	r1, [pc, #76]	; (1a2c <arm_mpu_init+0x50>)
    19de:	6808      	ldr	r0, [r1, #0]
    19e0:	2808      	cmp	r0, #8
{
    19e2:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    19e4:	d81e      	bhi.n	1a24 <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    19e6:	f7ff fff1 	bl	19cc <arm_core_mpu_disable>
	MPU->RNR = index;
    19ea:	4c11      	ldr	r4, [pc, #68]	; (1a30 <arm_mpu_init+0x54>)
    19ec:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    19ee:	2200      	movs	r2, #0
    19f0:	4290      	cmp	r0, r2
    19f2:	f101 010c 	add.w	r1, r1, #12
    19f6:	d105      	bne.n	1a04 <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    19f8:	4b0e      	ldr	r3, [pc, #56]	; (1a34 <arm_mpu_init+0x58>)
    19fa:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    19fc:	f7ff ffdc 	bl	19b8 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    1a00:	2000      	movs	r0, #0
}
    1a02:	bd10      	pop	{r4, pc}
    1a04:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1a06:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    1a0a:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    1a0e:	4313      	orrs	r3, r2
    1a10:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1a14:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1a16:	f851 3c04 	ldr.w	r3, [r1, #-4]
    1a1a:	f043 0301 	orr.w	r3, r3, #1
    1a1e:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1a20:	3201      	adds	r2, #1
    1a22:	e7e5      	b.n	19f0 <arm_mpu_init+0x14>
		return -1;
    1a24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1a28:	e7eb      	b.n	1a02 <arm_mpu_init+0x26>
    1a2a:	bf00      	nop
    1a2c:	00003f94 	.word	0x00003f94
    1a30:	e000ed90 	.word	0xe000ed90
    1a34:	200007f1 	.word	0x200007f1

00001a38 <arm_core_mpu_configure_static_mpu_regions>:
{
    1a38:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    1a3a:	4c03      	ldr	r4, [pc, #12]	; (1a48 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    1a3c:	2301      	movs	r3, #1
    1a3e:	7822      	ldrb	r2, [r4, #0]
    1a40:	f7ff ff7a 	bl	1938 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1a44:	7020      	strb	r0, [r4, #0]
}
    1a46:	bd10      	pop	{r4, pc}
    1a48:	200007f1 	.word	0x200007f1

00001a4c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    1a4c:	4b01      	ldr	r3, [pc, #4]	; (1a54 <__stdout_hook_install+0x8>)
    1a4e:	6018      	str	r0, [r3, #0]
}
    1a50:	4770      	bx	lr
    1a52:	bf00      	nop
    1a54:	20000008 	.word	0x20000008

00001a58 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    1a58:	f04f 0320 	mov.w	r3, #32
    1a5c:	f3ef 8211 	mrs	r2, BASEPRI
    1a60:	f383 8811 	msr	BASEPRI, r3
    1a64:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    1a68:	4906      	ldr	r1, [pc, #24]	; (1a84 <nordicsemi_nrf52_init+0x2c>)
    1a6a:	2301      	movs	r3, #1
    1a6c:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    1a70:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    1a74:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    1a78:	f382 8811 	msr	BASEPRI, r2
    1a7c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1a80:	2000      	movs	r0, #0
    1a82:	4770      	bx	lr
    1a84:	4001e000 	.word	0x4001e000

00001a88 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1a88:	b120      	cbz	r0, 1a94 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    1a8a:	4b03      	ldr	r3, [pc, #12]	; (1a98 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    1a8c:	0180      	lsls	r0, r0, #6
    1a8e:	f043 0301 	orr.w	r3, r3, #1
    1a92:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    1a94:	4770      	bx	lr
    1a96:	bf00      	nop
    1a98:	00003f50 	.word	0x00003f50

00001a9c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    1a9c:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    1a9e:	4b09      	ldr	r3, [pc, #36]	; (1ac4 <gpio_nrfx_init+0x28>)
    1aa0:	781a      	ldrb	r2, [r3, #0]
    1aa2:	b96a      	cbnz	r2, 1ac0 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    1aa4:	2101      	movs	r1, #1
    1aa6:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    1aa8:	2006      	movs	r0, #6
    1aaa:	2105      	movs	r1, #5
    1aac:	f7ff fd6e 	bl	158c <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
    1ab0:	2006      	movs	r0, #6
    1ab2:	f7ff fd4d 	bl	1550 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    1ab6:	4b04      	ldr	r3, [pc, #16]	; (1ac8 <gpio_nrfx_init+0x2c>)
    1ab8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    1abc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    1ac0:	2000      	movs	r0, #0
    1ac2:	bd08      	pop	{r3, pc}
    1ac4:	200007f2 	.word	0x200007f2
    1ac8:	40006000 	.word	0x40006000

00001acc <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    1acc:	4b2b      	ldr	r3, [pc, #172]	; (1b7c <gpio_nrfx_config+0xb0>)
{
    1ace:	b5f0      	push	{r4, r5, r6, r7, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    1ad0:	6844      	ldr	r4, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    1ad2:	482b      	ldr	r0, [pc, #172]	; (1b80 <gpio_nrfx_config+0xb4>)
    1ad4:	4013      	ands	r3, r2
    1ad6:	4283      	cmp	r3, r0
    1ad8:	d041      	beq.n	1b5e <gpio_nrfx_config+0x92>
    1ada:	d80d      	bhi.n	1af8 <gpio_nrfx_config+0x2c>
    1adc:	2b06      	cmp	r3, #6
    1ade:	d015      	beq.n	1b0c <gpio_nrfx_config+0x40>
    1ae0:	d805      	bhi.n	1aee <gpio_nrfx_config+0x22>
    1ae2:	b19b      	cbz	r3, 1b0c <gpio_nrfx_config+0x40>
    1ae4:	2b02      	cmp	r3, #2
    1ae6:	d03c      	beq.n	1b62 <gpio_nrfx_config+0x96>
    1ae8:	f06f 0015 	mvn.w	r0, #21
    1aec:	e036      	b.n	1b5c <gpio_nrfx_config+0x90>
    1aee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    1af2:	d1f9      	bne.n	1ae8 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
    1af4:	2301      	movs	r3, #1
    1af6:	e009      	b.n	1b0c <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    1af8:	4822      	ldr	r0, [pc, #136]	; (1b84 <gpio_nrfx_config+0xb8>)
    1afa:	4283      	cmp	r3, r0
    1afc:	d033      	beq.n	1b66 <gpio_nrfx_config+0x9a>
    1afe:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    1b02:	d032      	beq.n	1b6a <gpio_nrfx_config+0x9e>
    1b04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    1b08:	d1ee      	bne.n	1ae8 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
    1b0a:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
    1b0c:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
    1b0e:	bf54      	ite	pl
    1b10:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
    1b14:	2603      	movmi	r6, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    1b16:	f482 7580 	eor.w	r5, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
    1b1a:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
    1b1c:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    1b20:	f3c5 2500 	ubfx	r5, r5, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    1b24:	d507      	bpl.n	1b36 <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    1b26:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    1b2a:	6867      	ldr	r7, [r4, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    1b2c:	d01f      	beq.n	1b6e <gpio_nrfx_config+0xa2>
			nrf_gpio_port_out_set(reg, BIT(pin));
    1b2e:	2201      	movs	r2, #1
    1b30:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    1b32:	f8c7 2508 	str.w	r2, [r7, #1288]	; 0x508
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    1b36:	7a22      	ldrb	r2, [r4, #8]
        case 1: return NRF_P1;
    1b38:	4c13      	ldr	r4, [pc, #76]	; (1b88 <gpio_nrfx_config+0xbc>)
    1b3a:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    1b3c:	f001 011f 	and.w	r1, r1, #31
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    1b40:	ea40 0245 	orr.w	r2, r0, r5, lsl #1
        case 1: return NRF_P1;
    1b44:	bf18      	it	ne
    1b46:	f04f 44a0 	movne.w	r4, #1342177280	; 0x50000000
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    1b4a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1b4e:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    1b52:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1b56:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
	return 0;
    1b5a:	2000      	movs	r0, #0
}
    1b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
    1b5e:	2307      	movs	r3, #7
    1b60:	e7d4      	b.n	1b0c <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
    1b62:	2304      	movs	r3, #4
    1b64:	e7d2      	b.n	1b0c <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
    1b66:	2305      	movs	r3, #5
    1b68:	e7d0      	b.n	1b0c <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
    1b6a:	2303      	movs	r3, #3
    1b6c:	e7ce      	b.n	1b0c <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    1b6e:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
    1b70:	bf42      	ittt	mi
    1b72:	2201      	movmi	r2, #1
    1b74:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
    1b76:	f8c7 250c 	strmi.w	r2, [r7, #1292]	; 0x50c
}
    1b7a:	e7dc      	b.n	1b36 <gpio_nrfx_config+0x6a>
    1b7c:	00f00006 	.word	0x00f00006
    1b80:	00100006 	.word	0x00100006
    1b84:	00400002 	.word	0x00400002
    1b88:	50000300 	.word	0x50000300

00001b8c <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
    1b8c:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    1b90:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    1b92:	4b08      	ldr	r3, [pc, #32]	; (1bb4 <nrf_gpio_cfg_sense_set+0x28>)
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    1b94:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
    1b96:	bf18      	it	ne
    1b98:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    1b9c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1ba0:	f8d3 2700 	ldr.w	r2, [r3, #1792]	; 0x700
    1ba4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    1ba8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    1bac:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
}
    1bb0:	4770      	bx	lr
    1bb2:	bf00      	nop
    1bb4:	50000300 	.word	0x50000300

00001bb8 <check_level_trigger_pins>:
{
    1bb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct gpio_nrfx_data *data = get_port_data(port);
    1bbc:	6903      	ldr	r3, [r0, #16]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    1bbe:	f8d0 a004 	ldr.w	sl, [r0, #4]
	uint32_t out = data->pin_int_en;
    1bc2:	68de      	ldr	r6, [r3, #12]
        case 1: return NRF_P1;
    1bc4:	f8df b07c 	ldr.w	fp, [pc, #124]	; 1c44 <check_level_trigger_pins+0x8c>
{
    1bc8:	4688      	mov	r8, r1
	out &= ~data->trig_edge & ~data->double_edge;
    1bca:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
    1bce:	430a      	orrs	r2, r1
    1bd0:	ea26 0602 	bic.w	r6, r6, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
    1bd4:	f8da 2004 	ldr.w	r2, [sl, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    1bd8:	691b      	ldr	r3, [r3, #16]
    return p_reg->IN;
    1bda:	f8d2 5510 	ldr.w	r5, [r2, #1296]	; 0x510
    1bde:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
    1be0:	ea26 0505 	bic.w	r5, r6, r5
	uint32_t check_pins = level_pins;
    1be4:	4637      	mov	r7, r6
	uint32_t bit = 1U << pin;
    1be6:	2401      	movs	r4, #1
	uint32_t pin = 0U;
    1be8:	f04f 0900 	mov.w	r9, #0
	while (check_pins) {
    1bec:	b917      	cbnz	r7, 1bf4 <check_level_trigger_pins+0x3c>
}
    1bee:	4628      	mov	r0, r5
    1bf0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (check_pins & bit) {
    1bf4:	423c      	tst	r4, r7
    1bf6:	d021      	beq.n	1c3c <check_level_trigger_pins+0x84>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    1bf8:	f89a 3008 	ldrb.w	r3, [sl, #8]
    1bfc:	f009 001f 	and.w	r0, r9, #31
			if (!(level_pins & bit)) {
    1c00:	4234      	tst	r4, r6
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    1c02:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
			if (!(level_pins & bit)) {
    1c06:	d114      	bne.n	1c32 <check_level_trigger_pins+0x7a>
    return pin_number >> 5;
    1c08:	0942      	lsrs	r2, r0, #5
        case 1: return NRF_P1;
    1c0a:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    1c0c:	f000 031f 	and.w	r3, r0, #31
        case 1: return NRF_P1;
    1c10:	bf14      	ite	ne
    1c12:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    1c16:	465a      	moveq	r2, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    1c18:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    1c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    1c20:	f3c3 4301 	ubfx	r3, r3, #16, #2
				if (high) {
    1c24:	2b02      	cmp	r3, #2
					*sense_levels |= bit;
    1c26:	bf02      	ittt	eq
    1c28:	f8d8 3000 	ldreq.w	r3, [r8]
    1c2c:	4323      	orreq	r3, r4
    1c2e:	f8c8 3000 	streq.w	r3, [r8]
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    1c32:	2100      	movs	r1, #0
    1c34:	f7ff ffaa 	bl	1b8c <nrf_gpio_cfg_sense_set>
			check_pins &= ~bit;
    1c38:	ea27 0704 	bic.w	r7, r7, r4
		++pin;
    1c3c:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
    1c40:	0064      	lsls	r4, r4, #1
    1c42:	e7d3      	b.n	1bec <check_level_trigger_pins+0x34>
    1c44:	50000300 	.word	0x50000300

00001c48 <gpio_nrfx_pin_interrupt_configure>:
{
    1c48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1c4a:	460e      	mov	r6, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    1c4c:	6841      	ldr	r1, [r0, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
    1c4e:	6907      	ldr	r7, [r0, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    1c50:	7a09      	ldrb	r1, [r1, #8]
    1c52:	f006 051f 	and.w	r5, r6, #31
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
    1c56:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    1c5a:	ea45 1541 	orr.w	r5, r5, r1, lsl #5
    1c5e:	d110      	bne.n	1c82 <gpio_nrfx_pin_interrupt_configure+0x3a>
    return pin_number >> 5;
    1c60:	0968      	lsrs	r0, r5, #5
        case 1: return NRF_P1;
    1c62:	2801      	cmp	r0, #1
    *p_pin = pin_number & 0x1F;
    1c64:	f005 011f 	and.w	r1, r5, #31
        case 1: return NRF_P1;
    1c68:	485d      	ldr	r0, [pc, #372]	; (1de0 <gpio_nrfx_pin_interrupt_configure+0x198>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    1c6a:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
        case 1: return NRF_P1;
    1c6e:	bf18      	it	ne
    1c70:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    1c74:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    1c78:	07c8      	lsls	r0, r1, #31
    1c7a:	d507      	bpl.n	1c8c <gpio_nrfx_pin_interrupt_configure+0x44>
		return -ENOTSUP;
    1c7c:	f06f 0022 	mvn.w	r0, #34	; 0x22
    1c80:	e093      	b.n	1daa <gpio_nrfx_pin_interrupt_configure+0x162>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    1c82:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    1c86:	68f9      	ldr	r1, [r7, #12]
    1c88:	f000 8091 	beq.w	1dae <gpio_nrfx_pin_interrupt_configure+0x166>
    1c8c:	68f8      	ldr	r0, [r7, #12]
    1c8e:	2101      	movs	r1, #1
    1c90:	40b1      	lsls	r1, r6
    1c92:	4301      	orrs	r1, r0
    1c94:	6978      	ldr	r0, [r7, #20]
    1c96:	60f9      	str	r1, [r7, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    1c98:	2101      	movs	r1, #1
    1c9a:	40b1      	lsls	r1, r6
    1c9c:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    1ca0:	69ba      	ldr	r2, [r7, #24]
    1ca2:	bf0c      	ite	eq
    1ca4:	4308      	orreq	r0, r1
    1ca6:	4388      	bicne	r0, r1
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    1ca8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    1cac:	bf0c      	ite	eq
    1cae:	430a      	orreq	r2, r1
    1cb0:	438a      	bicne	r2, r1
    1cb2:	61ba      	str	r2, [r7, #24]
    1cb4:	693a      	ldr	r2, [r7, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    1cb6:	6178      	str	r0, [r7, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    1cb8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    1cbc:	bf0c      	ite	eq
    1cbe:	4311      	orreq	r1, r2
    1cc0:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    1cc4:	4a47      	ldr	r2, [pc, #284]	; (1de4 <gpio_nrfx_pin_interrupt_configure+0x19c>)
    1cc6:	6139      	str	r1, [r7, #16]
    1cc8:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    1ccc:	2000      	movs	r0, #0
    1cce:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    1cd0:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    1cd4:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1cd8:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    1cdc:	428d      	cmp	r5, r1
    1cde:	d16b      	bne.n	1db8 <gpio_nrfx_pin_interrupt_configure+0x170>
		    && (intenset & BIT(i))) {
    1ce0:	fa23 f100 	lsr.w	r1, r3, r0
    1ce4:	07c9      	lsls	r1, r1, #31
    1ce6:	d567      	bpl.n	1db8 <gpio_nrfx_pin_interrupt_configure+0x170>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    1ce8:	0083      	lsls	r3, r0, #2
    1cea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    1cee:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    1cf2:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    1cf6:	f021 0101 	bic.w	r1, r1, #1
    1cfa:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    1cfe:	2301      	movs	r3, #1
    1d00:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
    1d02:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
    1d06:	b2c0      	uxtb	r0, r0
    1d08:	f000 fbc8 	bl	249c <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    1d0c:	4628      	mov	r0, r5
    1d0e:	2100      	movs	r1, #0
    1d10:	f7ff ff3c 	bl	1b8c <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
    1d14:	68f8      	ldr	r0, [r7, #12]
    1d16:	40f0      	lsrs	r0, r6
    1d18:	f010 0001 	ands.w	r0, r0, #1
    1d1c:	d045      	beq.n	1daa <gpio_nrfx_pin_interrupt_configure+0x162>
		if (data->trig_edge & BIT(pin)) {
    1d1e:	6978      	ldr	r0, [r7, #20]
    1d20:	40f0      	lsrs	r0, r6
    1d22:	f010 0401 	ands.w	r4, r0, #1
    1d26:	d04e      	beq.n	1dc6 <gpio_nrfx_pin_interrupt_configure+0x17e>
				if (data->double_edge & BIT(pin)) {
    1d28:	69bb      	ldr	r3, [r7, #24]
    1d2a:	40f3      	lsrs	r3, r6
    1d2c:	07db      	lsls	r3, r3, #31
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    1d2e:	bf5f      	itttt	pl
    1d30:	6939      	ldrpl	r1, [r7, #16]
    1d32:	fa21 f606 	lsrpl.w	r6, r1, r6
    1d36:	f006 0601 	andpl.w	r6, r6, #1
    1d3a:	f1c6 0602 	rsbpl	r6, r6, #2
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    1d3e:	f10d 0007 	add.w	r0, sp, #7
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    1d42:	bf54      	ite	pl
    1d44:	b2f6      	uxtbpl	r6, r6
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
    1d46:	2603      	movmi	r6, #3
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    1d48:	f000 fbca 	bl	24e0 <nrfx_gpiote_channel_alloc>
    1d4c:	4b26      	ldr	r3, [pc, #152]	; (1de8 <gpio_nrfx_pin_interrupt_configure+0x1a0>)
    1d4e:	4298      	cmp	r0, r3
    1d50:	d136      	bne.n	1dc0 <gpio_nrfx_pin_interrupt_configure+0x178>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
    1d52:	f89d 1007 	ldrb.w	r1, [sp, #7]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    1d56:	008b      	lsls	r3, r1, #2
    1d58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    1d5c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    1d60:	022d      	lsls	r5, r5, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    1d62:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    1d66:	f422 324f 	bic.w	r2, r2, #211968	; 0x33c00
    1d6a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    1d6e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    1d72:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    1d76:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
    1d7a:	4315      	orrs	r5, r2
    return ((uint32_t)p_reg + event);
    1d7c:	008a      	lsls	r2, r1, #2
    1d7e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    1d82:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    1d86:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    1d8a:	2000      	movs	r0, #0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    1d8c:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    1d90:	6010      	str	r0, [r2, #0]
    1d92:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    1d94:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    1d98:	f042 0201 	orr.w	r2, r2, #1
    1d9c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->INTENSET = mask;
    1da0:	4a10      	ldr	r2, [pc, #64]	; (1de4 <gpio_nrfx_pin_interrupt_configure+0x19c>)
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    1da2:	2301      	movs	r3, #1
    1da4:	408b      	lsls	r3, r1
    1da6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    1daa:	b003      	add	sp, #12
    1dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    1dae:	2001      	movs	r0, #1
    1db0:	40b0      	lsls	r0, r6
    1db2:	ea21 0100 	bic.w	r1, r1, r0
    1db6:	e76d      	b.n	1c94 <gpio_nrfx_pin_interrupt_configure+0x4c>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    1db8:	3001      	adds	r0, #1
    1dba:	2808      	cmp	r0, #8
    1dbc:	d188      	bne.n	1cd0 <gpio_nrfx_pin_interrupt_configure+0x88>
    1dbe:	e7a5      	b.n	1d0c <gpio_nrfx_pin_interrupt_configure+0xc4>
		return -ENODEV;
    1dc0:	f06f 0012 	mvn.w	r0, #18
    1dc4:	e7f1      	b.n	1daa <gpio_nrfx_pin_interrupt_configure+0x162>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    1dc6:	6939      	ldr	r1, [r7, #16]
    1dc8:	40f1      	lsrs	r1, r6
    1dca:	f001 0101 	and.w	r1, r1, #1
    1dce:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    1dd2:	4628      	mov	r0, r5
    1dd4:	b2c9      	uxtb	r1, r1
    1dd6:	f7ff fed9 	bl	1b8c <nrf_gpio_cfg_sense_set>
	int res = 0;
    1dda:	4620      	mov	r0, r4
    1ddc:	e7e5      	b.n	1daa <gpio_nrfx_pin_interrupt_configure+0x162>
    1dde:	bf00      	nop
    1de0:	50000300 	.word	0x50000300
    1de4:	40006000 	.word	0x40006000
    1de8:	0bad0000 	.word	0x0bad0000

00001dec <gpiote_event_handler>:
{
    1dec:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    1dee:	2400      	movs	r4, #0
{
    1df0:	b085      	sub	sp, #20
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    1df2:	e9cd 4400 	strd	r4, r4, [sp]
	uint32_t sense_levels[GPIO_COUNT] = {0};
    1df6:	e9cd 4402 	strd	r4, r4, [sp, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    1dfa:	4e26      	ldr	r6, [pc, #152]	; (1e94 <gpiote_event_handler+0xa8>)
    1dfc:	6835      	ldr	r5, [r6, #0]
	if (port_event) {
    1dfe:	b15d      	cbz	r5, 1e18 <gpiote_event_handler+0x2c>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)),
    1e00:	a902      	add	r1, sp, #8
    1e02:	4825      	ldr	r0, [pc, #148]	; (1e98 <gpiote_event_handler+0xac>)
    1e04:	f7ff fed8 	bl	1bb8 <check_level_trigger_pins>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
    1e08:	a903      	add	r1, sp, #12
		fired_triggers[0] =
    1e0a:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
    1e0c:	4823      	ldr	r0, [pc, #140]	; (1e9c <gpiote_event_handler+0xb0>)
    1e0e:	f7ff fed3 	bl	1bb8 <check_level_trigger_pins>
		fired_triggers[1] =
    1e12:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    1e14:	6034      	str	r4, [r6, #0]
    1e16:	6833      	ldr	r3, [r6, #0]
    return p_reg->INTENSET & mask;
    1e18:	4c21      	ldr	r4, [pc, #132]	; (1ea0 <gpiote_event_handler+0xb4>)
{
    1e1a:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    1e1c:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    1e1e:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
    1e20:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    1e24:	fa06 f102 	lsl.w	r1, r6, r2
    1e28:	4219      	tst	r1, r3
    1e2a:	d01b      	beq.n	1e64 <gpiote_event_handler+0x78>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    1e2c:	0091      	lsls	r1, r2, #2
    1e2e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    1e32:	f501 41c2 	add.w	r1, r1, #24832	; 0x6100
    1e36:	680b      	ldr	r3, [r1, #0]
    1e38:	b1a3      	cbz	r3, 1e64 <gpiote_event_handler+0x78>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    1e3a:	f502 73a2 	add.w	r3, r2, #324	; 0x144
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    1e3e:	af04      	add	r7, sp, #16
    1e40:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    1e44:	f8c1 c000 	str.w	ip, [r1]
    1e48:	f3c3 3040 	ubfx	r0, r3, #13, #1
    1e4c:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    1e50:	f3c3 2304 	ubfx	r3, r3, #8, #5
    1e54:	f850 7c10 	ldr.w	r7, [r0, #-16]
    1e58:	fa06 f303 	lsl.w	r3, r6, r3
    1e5c:	433b      	orrs	r3, r7
    1e5e:	f840 3c10 	str.w	r3, [r0, #-16]
    1e62:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    1e64:	3201      	adds	r2, #1
    1e66:	2a08      	cmp	r2, #8
    1e68:	d1da      	bne.n	1e20 <gpiote_event_handler+0x34>
	if (fired_triggers[0]) {
    1e6a:	9a00      	ldr	r2, [sp, #0]
    1e6c:	b11a      	cbz	r2, 1e76 <gpiote_event_handler+0x8a>
	gpio_fire_callbacks(list, port, pins);
    1e6e:	490a      	ldr	r1, [pc, #40]	; (1e98 <gpiote_event_handler+0xac>)
    1e70:	480c      	ldr	r0, [pc, #48]	; (1ea4 <gpiote_event_handler+0xb8>)
    1e72:	f001 fda1 	bl	39b8 <gpio_fire_callbacks>
	if (fired_triggers[1]) {
    1e76:	9a01      	ldr	r2, [sp, #4]
    1e78:	b11a      	cbz	r2, 1e82 <gpiote_event_handler+0x96>
	gpio_fire_callbacks(list, port, pins);
    1e7a:	4908      	ldr	r1, [pc, #32]	; (1e9c <gpiote_event_handler+0xb0>)
    1e7c:	480a      	ldr	r0, [pc, #40]	; (1ea8 <gpiote_event_handler+0xbc>)
    1e7e:	f001 fd9b 	bl	39b8 <gpio_fire_callbacks>
	if (port_event) {
    1e82:	b12d      	cbz	r5, 1e90 <gpiote_event_handler+0xa4>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
    1e84:	4804      	ldr	r0, [pc, #16]	; (1e98 <gpiote_event_handler+0xac>)
    1e86:	f001 fe01 	bl	3a8c <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
    1e8a:	4804      	ldr	r0, [pc, #16]	; (1e9c <gpiote_event_handler+0xb0>)
    1e8c:	f001 fdfe 	bl	3a8c <cfg_level_pins>
}
    1e90:	b005      	add	sp, #20
    1e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e94:	4000617c 	.word	0x4000617c
    1e98:	20000068 	.word	0x20000068
    1e9c:	20000080 	.word	0x20000080
    1ea0:	40006000 	.word	0x40006000
    1ea4:	200002fc 	.word	0x200002fc
    1ea8:	20000318 	.word	0x20000318

00001eac <uart_nrfx_poll_in>:
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type const * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    1eac:	4b06      	ldr	r3, [pc, #24]	; (1ec8 <uart_nrfx_poll_in+0x1c>)
    1eae:	681a      	ldr	r2, [r3, #0]
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrfx_poll_in(const struct device *dev, unsigned char *c)
{
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
    1eb0:	b13a      	cbz	r2, 1ec2 <uart_nrfx_poll_in+0x16>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1eb2:	2000      	movs	r0, #0
    1eb4:	6018      	str	r0, [r3, #0]
    1eb6:	681b      	ldr	r3, [r3, #0]
    nrf_uart_hwfc_pins_set(p_reg, NRF_UART_PSEL_DISCONNECTED, NRF_UART_PSEL_DISCONNECTED);
}

NRF_STATIC_INLINE uint8_t nrf_uart_rxd_get(NRF_UART_Type const * p_reg)
{
    return p_reg->RXD;
    1eb8:	4b04      	ldr	r3, [pc, #16]	; (1ecc <uart_nrfx_poll_in+0x20>)
    1eba:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    1ebe:	700b      	strb	r3, [r1, #0]
	nrf_uart_event_clear(uart0_addr, NRF_UART_EVENT_RXDRDY);

	/* got a character */
	*c = nrf_uart_rxd_get(uart0_addr);

	return 0;
    1ec0:	4770      	bx	lr
		return -1;
    1ec2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    1ec6:	4770      	bx	lr
    1ec8:	40002108 	.word	0x40002108
    1ecc:	40002000 	.word	0x40002000

00001ed0 <uart_nrfx_err_check>:
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    1ed0:	4b02      	ldr	r3, [pc, #8]	; (1edc <uart_nrfx_err_check+0xc>)
    1ed2:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    1ed6:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
/** Console I/O function */
static int uart_nrfx_err_check(const struct device *dev)
{
	/* register bitfields maps to the defines in uart.h */
	return nrf_uart_errorsrc_get_and_clear(uart0_addr);
}
    1eda:	4770      	bx	lr
    1edc:	40002000 	.word	0x40002000

00001ee0 <uart_nrfx_configure>:

static int uart_nrfx_configure(const struct device *dev,
			       const struct uart_config *cfg)
{
    1ee0:	b530      	push	{r4, r5, lr}
	nrf_uart_config_t uart_cfg;

#if defined(UART_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    1ee2:	794b      	ldrb	r3, [r1, #5]
    1ee4:	2b01      	cmp	r3, #1
    1ee6:	d022      	beq.n	1f2e <uart_nrfx_configure+0x4e>
    1ee8:	2b03      	cmp	r3, #3
    1eea:	d11d      	bne.n	1f28 <uart_nrfx_configure+0x48>
	case UART_CFG_STOP_BITS_1:
		uart_cfg.stop = NRF_UART_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uart_cfg.stop = NRF_UART_STOP_TWO;
    1eec:	2210      	movs	r2, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    1eee:	798b      	ldrb	r3, [r1, #6]
    1ef0:	2b03      	cmp	r3, #3
    1ef2:	d119      	bne.n	1f28 <uart_nrfx_configure+0x48>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    1ef4:	79cb      	ldrb	r3, [r1, #7]
    1ef6:	b9bb      	cbnz	r3, 1f28 <uart_nrfx_configure+0x48>
	}

#if defined(UART_CONFIG_PARITYTYPE_Msk)
	uart_cfg.paritytype = NRF_UART_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    1ef8:	790c      	ldrb	r4, [r1, #4]
    1efa:	b114      	cbz	r4, 1f02 <uart_nrfx_configure+0x22>
    1efc:	2c02      	cmp	r4, #2
    1efe:	d113      	bne.n	1f28 <uart_nrfx_configure+0x48>
	case UART_CFG_PARITY_NONE:
		uart_cfg.parity = NRF_UART_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uart_cfg.parity = NRF_UART_PARITY_INCLUDED;
    1f00:	240e      	movs	r4, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    1f02:	680b      	ldr	r3, [r1, #0]
	switch (baudrate) {
    1f04:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
    1f08:	d061      	beq.n	1fce <uart_nrfx_configure+0xee>
    1f0a:	d82d      	bhi.n	1f68 <uart_nrfx_configure+0x88>
    1f0c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    1f10:	d05f      	beq.n	1fd2 <uart_nrfx_configure+0xf2>
    1f12:	d816      	bhi.n	1f42 <uart_nrfx_configure+0x62>
    1f14:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    1f18:	d05d      	beq.n	1fd6 <uart_nrfx_configure+0xf6>
    1f1a:	d80a      	bhi.n	1f32 <uart_nrfx_configure+0x52>
    1f1c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    1f20:	d05c      	beq.n	1fdc <uart_nrfx_configure+0xfc>
    1f22:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    1f26:	d05c      	beq.n	1fe2 <uart_nrfx_configure+0x102>
    1f28:	f06f 0022 	mvn.w	r0, #34	; 0x22
    1f2c:	e04e      	b.n	1fcc <uart_nrfx_configure+0xec>
	switch (cfg->stop_bits) {
    1f2e:	2200      	movs	r2, #0
    1f30:	e7dd      	b.n	1eee <uart_nrfx_configure+0xe>
	switch (baudrate) {
    1f32:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    1f36:	d057      	beq.n	1fe8 <uart_nrfx_configure+0x108>
    1f38:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    1f3c:	d1f4      	bne.n	1f28 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
    1f3e:	4b34      	ldr	r3, [pc, #208]	; (2010 <uart_nrfx_configure+0x130>)
    1f40:	e039      	b.n	1fb6 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
    1f42:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    1f46:	d052      	beq.n	1fee <uart_nrfx_configure+0x10e>
    1f48:	d807      	bhi.n	1f5a <uart_nrfx_configure+0x7a>
    1f4a:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    1f4e:	d050      	beq.n	1ff2 <uart_nrfx_configure+0x112>
    1f50:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    1f54:	d1e8      	bne.n	1f28 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
    1f56:	4b2f      	ldr	r3, [pc, #188]	; (2014 <uart_nrfx_configure+0x134>)
    1f58:	e02d      	b.n	1fb6 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
    1f5a:	f647 2512 	movw	r5, #31250	; 0x7a12
    1f5e:	42ab      	cmp	r3, r5
    1f60:	d1e2      	bne.n	1f28 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
    1f62:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    1f66:	e026      	b.n	1fb6 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
    1f68:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    1f6c:	d044      	beq.n	1ff8 <uart_nrfx_configure+0x118>
    1f6e:	d811      	bhi.n	1f94 <uart_nrfx_configure+0xb4>
    1f70:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    1f74:	d042      	beq.n	1ffc <uart_nrfx_configure+0x11c>
    1f76:	d808      	bhi.n	1f8a <uart_nrfx_configure+0xaa>
    1f78:	f64d 25c0 	movw	r5, #56000	; 0xdac0
    1f7c:	42ab      	cmp	r3, r5
    1f7e:	d03f      	beq.n	2000 <uart_nrfx_configure+0x120>
    1f80:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    1f84:	d1d0      	bne.n	1f28 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
    1f86:	4b24      	ldr	r3, [pc, #144]	; (2018 <uart_nrfx_configure+0x138>)
    1f88:	e015      	b.n	1fb6 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
    1f8a:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    1f8e:	d1cb      	bne.n	1f28 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
    1f90:	4b22      	ldr	r3, [pc, #136]	; (201c <uart_nrfx_configure+0x13c>)
    1f92:	e010      	b.n	1fb6 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
    1f94:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    1f98:	d035      	beq.n	2006 <uart_nrfx_configure+0x126>
    1f9a:	d807      	bhi.n	1fac <uart_nrfx_configure+0xcc>
    1f9c:	4d20      	ldr	r5, [pc, #128]	; (2020 <uart_nrfx_configure+0x140>)
    1f9e:	42ab      	cmp	r3, r5
    1fa0:	d033      	beq.n	200a <uart_nrfx_configure+0x12a>
    1fa2:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    1fa6:	d1bf      	bne.n	1f28 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
    1fa8:	4b1e      	ldr	r3, [pc, #120]	; (2024 <uart_nrfx_configure+0x144>)
    1faa:	e004      	b.n	1fb6 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
    1fac:	4d1e      	ldr	r5, [pc, #120]	; (2028 <uart_nrfx_configure+0x148>)
    1fae:	42ab      	cmp	r3, r5
    1fb0:	d1ba      	bne.n	1f28 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
    1fb2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    1fb6:	4d1d      	ldr	r5, [pc, #116]	; (202c <uart_nrfx_configure+0x14c>)
                    | (uint32_t)p_cfg->hwfc;
    1fb8:	4322      	orrs	r2, r4
    p_reg->BAUDRATE = baudrate;
    1fba:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    1fbe:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uart_configure(uart0_addr, &uart_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    1fc2:	6903      	ldr	r3, [r0, #16]
    1fc4:	c903      	ldmia	r1, {r0, r1}
    1fc6:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    1fca:	2000      	movs	r0, #0
}
    1fcc:	bd30      	pop	{r4, r5, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
    1fce:	4b18      	ldr	r3, [pc, #96]	; (2030 <uart_nrfx_configure+0x150>)
    1fd0:	e7f1      	b.n	1fb6 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
    1fd2:	4b18      	ldr	r3, [pc, #96]	; (2034 <uart_nrfx_configure+0x154>)
    1fd4:	e7ef      	b.n	1fb6 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
    1fd6:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    1fda:	e7ec      	b.n	1fb6 <uart_nrfx_configure+0xd6>
		nrf_baudrate = 0x00014000;
    1fdc:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    1fe0:	e7e9      	b.n	1fb6 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
    1fe2:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    1fe6:	e7e6      	b.n	1fb6 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
    1fe8:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    1fec:	e7e3      	b.n	1fb6 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
    1fee:	4b12      	ldr	r3, [pc, #72]	; (2038 <uart_nrfx_configure+0x158>)
    1ff0:	e7e1      	b.n	1fb6 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
    1ff2:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
    1ff6:	e7de      	b.n	1fb6 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
    1ff8:	4b10      	ldr	r3, [pc, #64]	; (203c <uart_nrfx_configure+0x15c>)
    1ffa:	e7dc      	b.n	1fb6 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
    1ffc:	4b10      	ldr	r3, [pc, #64]	; (2040 <uart_nrfx_configure+0x160>)
    1ffe:	e7da      	b.n	1fb6 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
    2000:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    2004:	e7d7      	b.n	1fb6 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
    2006:	4b0f      	ldr	r3, [pc, #60]	; (2044 <uart_nrfx_configure+0x164>)
    2008:	e7d5      	b.n	1fb6 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
    200a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    200e:	e7d2      	b.n	1fb6 <uart_nrfx_configure+0xd6>
    2010:	0013b000 	.word	0x0013b000
    2014:	004ea000 	.word	0x004ea000
    2018:	00ebf000 	.word	0x00ebf000
    201c:	01d7e000 	.word	0x01d7e000
    2020:	0003d090 	.word	0x0003d090
    2024:	075f7000 	.word	0x075f7000
    2028:	000f4240 	.word	0x000f4240
    202c:	40002000 	.word	0x40002000
    2030:	009d5000 	.word	0x009d5000
    2034:	00275000 	.word	0x00275000
    2038:	0075f000 	.word	0x0075f000
    203c:	03afb000 	.word	0x03afb000
    2040:	013a9000 	.word	0x013a9000
    2044:	0ebed000 	.word	0x0ebed000

00002048 <uart_nrfx_poll_out>:
{
    2048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    204a:	460e      	mov	r6, r1
	if (!k_is_in_isr()) {
    204c:	f001 fe30 	bl	3cb0 <k_is_in_isr>
    2050:	4d19      	ldr	r5, [pc, #100]	; (20b8 <uart_nrfx_poll_out+0x70>)
    2052:	bb70      	cbnz	r0, 20b2 <uart_nrfx_poll_out+0x6a>
    2054:	2464      	movs	r4, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2056:	2701      	movs	r7, #1
    2058:	f3bf 8f5b 	dmb	ish
    205c:	e855 3f00 	ldrex	r3, [r5]
    2060:	2b00      	cmp	r3, #0
    2062:	d103      	bne.n	206c <uart_nrfx_poll_out+0x24>
    2064:	e845 7200 	strex	r2, r7, [r5]
    2068:	2a00      	cmp	r2, #0
    206a:	d1f7      	bne.n	205c <uart_nrfx_poll_out+0x14>
    206c:	f3bf 8f5b 	dmb	ish
		while (atomic_cas((atomic_t *) lock,
    2070:	d007      	beq.n	2082 <uart_nrfx_poll_out+0x3a>
	return z_impl_k_sleep(timeout);
    2072:	2021      	movs	r0, #33	; 0x21
    2074:	2100      	movs	r1, #0
    2076:	3c01      	subs	r4, #1
    2078:	f000 fecc 	bl	2e14 <z_impl_k_sleep>
			if (--safety_cnt == 0) {
    207c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    2080:	d1ea      	bne.n	2058 <uart_nrfx_poll_out+0x10>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2082:	4c0e      	ldr	r4, [pc, #56]	; (20bc <uart_nrfx_poll_out+0x74>)
    2084:	2200      	movs	r2, #0
    2086:	6022      	str	r2, [r4, #0]
    2088:	6822      	ldr	r2, [r4, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    208a:	4a0d      	ldr	r2, [pc, #52]	; (20c0 <uart_nrfx_poll_out+0x78>)
    208c:	2101      	movs	r1, #1
    208e:	6011      	str	r1, [r2, #0]
    p_reg->TXD = txd;
    2090:	f8c2 6514 	str.w	r6, [r2, #1300]	; 0x514
    2094:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2098:	6823      	ldr	r3, [r4, #0]
	NRFX_WAIT_FOR(event_txdrdy_check(), 1000, 1, res);
    209a:	b923      	cbnz	r3, 20a6 <uart_nrfx_poll_out+0x5e>
    209c:	2001      	movs	r0, #1
    209e:	f001 fd24 	bl	3aea <nrfx_busy_wait>
    20a2:	3e01      	subs	r6, #1
    20a4:	d1f8      	bne.n	2098 <uart_nrfx_poll_out+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    20a6:	4b07      	ldr	r3, [pc, #28]	; (20c4 <uart_nrfx_poll_out+0x7c>)
    20a8:	2201      	movs	r2, #1
    20aa:	601a      	str	r2, [r3, #0]
	*lock = 0;
    20ac:	2300      	movs	r3, #0
    20ae:	602b      	str	r3, [r5, #0]
}
    20b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*lock = 1;
    20b2:	2301      	movs	r3, #1
    20b4:	602b      	str	r3, [r5, #0]
    20b6:	e7e4      	b.n	2082 <uart_nrfx_poll_out+0x3a>
    20b8:	20000334 	.word	0x20000334
    20bc:	4000211c 	.word	0x4000211c
    20c0:	40002008 	.word	0x40002008
    20c4:	4000200c 	.word	0x4000200c

000020c8 <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(const struct device *dev)
{
    20c8:	b510      	push	{r4, lr}
    p_reg->OUTSET = set_mask;
    20ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    p_reg->ENABLE = UART_ENABLE_ENABLE_Disabled;
    20ce:	4c13      	ldr	r4, [pc, #76]	; (211c <uart_nrfx_init+0x54>)
    20d0:	2200      	movs	r2, #0
    20d2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    20d6:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    20da:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    20de:	2103      	movs	r1, #3
    20e0:	f8c3 1764 	str.w	r1, [r3, #1892]	; 0x764
    20e4:	f8c3 2760 	str.w	r2, [r3, #1888]	; 0x760
    p_reg->PSEL.RXD = pselrxd;
    20e8:	2318      	movs	r3, #24
    20ea:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
    p_reg->PSEL.TXD = pseltxd;
    20ee:	2319      	movs	r3, #25
    20f0:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
    p_reg->PSEL.RTS = pselrts;
    20f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    20f8:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
	}

	nrf_uart_hwfc_pins_set(uart0_addr, RTS_PIN, CTS_PIN);

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    20fc:	6901      	ldr	r1, [r0, #16]
    p_reg->PSEL.CTS = pselcts;
    20fe:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    2102:	f7ff feed 	bl	1ee0 <uart_nrfx_configure>
	if (err) {
    2106:	b938      	cbnz	r0, 2118 <uart_nrfx_init+0x50>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
    2108:	2304      	movs	r3, #4
    210a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    210e:	4b04      	ldr	r3, [pc, #16]	; (2120 <uart_nrfx_init+0x58>)
    2110:	6018      	str	r0, [r3, #0]
    2112:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2114:	2301      	movs	r3, #1
    2116:	6023      	str	r3, [r4, #0]
#if HW_FLOW_CONTROL_AVAILABLE
	k_timer_init(&uart0_cb.tx_timeout_timer, tx_timeout, NULL);
#endif
#endif
	return 0;
}
    2118:	bd10      	pop	{r4, pc}
    211a:	bf00      	nop
    211c:	40002000 	.word	0x40002000
    2120:	40002108 	.word	0x40002108

00002124 <nrf52_errata_136>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2124:	4b06      	ldr	r3, [pc, #24]	; (2140 <nrf52_errata_136+0x1c>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    2126:	681b      	ldr	r3, [r3, #0]
    2128:	2b08      	cmp	r3, #8
    212a:	d106      	bne.n	213a <nrf52_errata_136+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    212c:	4b05      	ldr	r3, [pc, #20]	; (2144 <nrf52_errata_136+0x20>)
    212e:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
    2130:	2b05      	cmp	r3, #5
    2132:	d802      	bhi.n	213a <nrf52_errata_136+0x16>
    2134:	4a04      	ldr	r2, [pc, #16]	; (2148 <nrf52_errata_136+0x24>)
    2136:	5cd0      	ldrb	r0, [r2, r3]
    2138:	4770      	bx	lr
                    default:
                        return true;
                }
            }
        #endif
        return false;
    213a:	2000      	movs	r0, #0
    #endif
}
    213c:	4770      	bx	lr
    213e:	bf00      	nop
    2140:	10000130 	.word	0x10000130
    2144:	10000134 	.word	0x10000134
    2148:	000040aa 	.word	0x000040aa

0000214c <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    214c:	4b06      	ldr	r3, [pc, #24]	; (2168 <nrf52_errata_103+0x1c>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    214e:	681b      	ldr	r3, [r3, #0]
    2150:	2b08      	cmp	r3, #8
    2152:	d106      	bne.n	2162 <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    2154:	4b05      	ldr	r3, [pc, #20]	; (216c <nrf52_errata_103+0x20>)
    2156:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
    2158:	2b05      	cmp	r3, #5
    215a:	d802      	bhi.n	2162 <nrf52_errata_103+0x16>
    215c:	4a04      	ldr	r2, [pc, #16]	; (2170 <nrf52_errata_103+0x24>)
    215e:	5cd0      	ldrb	r0, [r2, r3]
    2160:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
    2162:	2000      	movs	r0, #0
    #endif
}
    2164:	4770      	bx	lr
    2166:	bf00      	nop
    2168:	10000130 	.word	0x10000130
    216c:	10000134 	.word	0x10000134
    2170:	000040b0 	.word	0x000040b0

00002174 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    2174:	4a02      	ldr	r2, [pc, #8]	; (2180 <nvmc_wait+0xc>)
    2176:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    217a:	2b00      	cmp	r3, #0
    217c:	d0fb      	beq.n	2176 <nvmc_wait+0x2>
}
    217e:	4770      	bx	lr
    2180:	4001e000 	.word	0x4001e000

00002184 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    2184:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    2186:	f7ff ffcd 	bl	2124 <nrf52_errata_136>
    218a:	b140      	cbz	r0, 219e <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    218c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2190:	2200      	movs	r2, #0
    2192:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    2196:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    219a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    219e:	f7ff ffc1 	bl	2124 <nrf52_errata_136>
    21a2:	2800      	cmp	r0, #0
    21a4:	d046      	beq.n	2234 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    21a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    21aa:	4b52      	ldr	r3, [pc, #328]	; (22f4 <SystemInit+0x170>)
    21ac:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    21b0:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    21b4:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    21b8:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    21bc:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    21c0:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    21c4:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    21c8:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    21cc:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    21d0:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    21d4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    21d8:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    21dc:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    21e0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    21e4:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    21e8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    21ec:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    21f0:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    21f4:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    21f8:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    21fc:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    2200:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    2204:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    2208:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    220c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    2210:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    2214:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    2218:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    221c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    2220:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    2224:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    2228:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    222c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    2230:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    2234:	f7ff ff8a 	bl	214c <nrf52_errata_103>
    2238:	b110      	cbz	r0, 2240 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    223a:	4b2f      	ldr	r3, [pc, #188]	; (22f8 <SystemInit+0x174>)
    223c:	4a2f      	ldr	r2, [pc, #188]	; (22fc <SystemInit+0x178>)
    223e:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    2240:	f7ff ff84 	bl	214c <nrf52_errata_103>
    2244:	b118      	cbz	r0, 224e <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    2246:	4b2e      	ldr	r3, [pc, #184]	; (2300 <SystemInit+0x17c>)
    2248:	22fb      	movs	r2, #251	; 0xfb
    224a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    224e:	f7ff ff7d 	bl	214c <nrf52_errata_103>
    2252:	b148      	cbz	r0, 2268 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    2254:	492b      	ldr	r1, [pc, #172]	; (2304 <SystemInit+0x180>)
    2256:	4b2c      	ldr	r3, [pc, #176]	; (2308 <SystemInit+0x184>)
    2258:	680a      	ldr	r2, [r1, #0]
    225a:	681b      	ldr	r3, [r3, #0]
    225c:	f022 020f 	bic.w	r2, r2, #15
    2260:	f003 030f 	and.w	r3, r3, #15
    2264:	4313      	orrs	r3, r2
    2266:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    2268:	f7ff ff70 	bl	214c <nrf52_errata_103>
    226c:	b118      	cbz	r0, 2276 <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    226e:	4b27      	ldr	r3, [pc, #156]	; (230c <SystemInit+0x188>)
    2270:	f44f 7200 	mov.w	r2, #512	; 0x200
    2274:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    2276:	f7ff ff55 	bl	2124 <nrf52_errata_136>
    227a:	b148      	cbz	r0, 2290 <SystemInit+0x10c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    227c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2280:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    2284:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    2286:	bf44      	itt	mi
    2288:	f06f 0201 	mvnmi.w	r2, #1
    228c:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    2290:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    2294:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    2298:	2a00      	cmp	r2, #0
    229a:	db03      	blt.n	22a4 <SystemInit+0x120>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    229c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    22a0:	2b00      	cmp	r3, #0
    22a2:	da22      	bge.n	22ea <SystemInit+0x166>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    22a4:	491a      	ldr	r1, [pc, #104]	; (2310 <SystemInit+0x18c>)
    22a6:	2301      	movs	r3, #1
    22a8:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    22ac:	f7ff ff62 	bl	2174 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    22b0:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    22b4:	2412      	movs	r4, #18
    22b6:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    22ba:	f7ff ff5b 	bl	2174 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    22be:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    22c2:	f7ff ff57 	bl	2174 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    22c6:	2300      	movs	r3, #0
    22c8:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    22cc:	f7ff ff52 	bl	2174 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    22d0:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    22d4:	490f      	ldr	r1, [pc, #60]	; (2314 <SystemInit+0x190>)
    22d6:	4b10      	ldr	r3, [pc, #64]	; (2318 <SystemInit+0x194>)
    22d8:	68ca      	ldr	r2, [r1, #12]
    22da:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    22de:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    22e0:	60cb      	str	r3, [r1, #12]
    22e2:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    22e6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    22e8:	e7fd      	b.n	22e6 <SystemInit+0x162>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    22ea:	4b0c      	ldr	r3, [pc, #48]	; (231c <SystemInit+0x198>)
    22ec:	4a0c      	ldr	r2, [pc, #48]	; (2320 <SystemInit+0x19c>)
    22ee:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    22f0:	bd10      	pop	{r4, pc}
    22f2:	bf00      	nop
    22f4:	4000c000 	.word	0x4000c000
    22f8:	4000568c 	.word	0x4000568c
    22fc:	00038148 	.word	0x00038148
    2300:	4000f000 	.word	0x4000f000
    2304:	40000ee4 	.word	0x40000ee4
    2308:	10000258 	.word	0x10000258
    230c:	40029640 	.word	0x40029640
    2310:	4001e000 	.word	0x4001e000
    2314:	e000ed00 	.word	0xe000ed00
    2318:	05fa0004 	.word	0x05fa0004
    231c:	20000014 	.word	0x20000014
    2320:	03d09000 	.word	0x03d09000

00002324 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    2324:	4b04      	ldr	r3, [pc, #16]	; (2338 <nrfx_clock_init+0x14>)
    2326:	791a      	ldrb	r2, [r3, #4]
    2328:	b922      	cbnz	r2, 2334 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    232a:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    232c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    232e:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    2330:	4802      	ldr	r0, [pc, #8]	; (233c <nrfx_clock_init+0x18>)
    2332:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    2334:	4802      	ldr	r0, [pc, #8]	; (2340 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    2336:	4770      	bx	lr
    2338:	20000338 	.word	0x20000338
    233c:	0bad0000 	.word	0x0bad0000
    2340:	0bad000c 	.word	0x0bad000c

00002344 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    2344:	b110      	cbz	r0, 234c <nrfx_clock_start+0x8>
    2346:	2801      	cmp	r0, #1
    2348:	d020      	beq.n	238c <nrfx_clock_start+0x48>
    234a:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    234c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2350:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2354:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    2358:	f411 3f80 	tst.w	r1, #65536	; 0x10000
    235c:	4619      	mov	r1, r3
    235e:	d011      	beq.n	2384 <nrfx_clock_start+0x40>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    2360:	f002 0203 	and.w	r2, r2, #3
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    2364:	2a01      	cmp	r2, #1
    2366:	d10d      	bne.n	2384 <nrfx_clock_start+0x40>
    p_reg->LFCLKSRC = (uint32_t)(source);
    2368:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    236c:	4b0c      	ldr	r3, [pc, #48]	; (23a0 <nrfx_clock_start+0x5c>)
    236e:	2200      	movs	r2, #0
    2370:	601a      	str	r2, [r3, #0]
    2372:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    2374:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2378:	2202      	movs	r2, #2
    237a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    237e:	2201      	movs	r2, #1
    2380:	609a      	str	r2, [r3, #8]
}
    2382:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
    2384:	2300      	movs	r3, #0
    2386:	f8c1 3518 	str.w	r3, [r1, #1304]	; 0x518
}
    238a:	e7ef      	b.n	236c <nrfx_clock_start+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    238c:	4b05      	ldr	r3, [pc, #20]	; (23a4 <nrfx_clock_start+0x60>)
    238e:	2200      	movs	r2, #0
    2390:	601a      	str	r2, [r3, #0]
    2392:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    2394:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2398:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    239c:	6018      	str	r0, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    239e:	4770      	bx	lr
    23a0:	40000104 	.word	0x40000104
    23a4:	40000100 	.word	0x40000100

000023a8 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    23a8:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    23aa:	b110      	cbz	r0, 23b2 <nrfx_clock_stop+0xa>
    23ac:	2801      	cmp	r0, #1
    23ae:	d018      	beq.n	23e2 <nrfx_clock_stop+0x3a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    23b0:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
    23b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    23b6:	2202      	movs	r2, #2
    23b8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    23bc:	4a18      	ldr	r2, [pc, #96]	; (2420 <nrfx_clock_stop+0x78>)
    23be:	6010      	str	r0, [r2, #0]
    23c0:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    23c2:	4a18      	ldr	r2, [pc, #96]	; (2424 <nrfx_clock_stop+0x7c>)
    23c4:	2101      	movs	r1, #1
    23c6:	6011      	str	r1, [r2, #0]
    23c8:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    23cc:	461c      	mov	r4, r3
    23ce:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
    23d2:	03db      	lsls	r3, r3, #15
    23d4:	d5ec      	bpl.n	23b0 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    23d6:	2001      	movs	r0, #1
    23d8:	f001 fb87 	bl	3aea <nrfx_busy_wait>
    23dc:	3d01      	subs	r5, #1
    23de:	d1f6      	bne.n	23ce <nrfx_clock_stop+0x26>
    23e0:	e7e6      	b.n	23b0 <nrfx_clock_stop+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    23e2:	4b11      	ldr	r3, [pc, #68]	; (2428 <nrfx_clock_stop+0x80>)
    p_reg->INTENCLR = mask;
    23e4:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    23e8:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    23ea:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    23ee:	601a      	str	r2, [r3, #0]
    23f0:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    23f2:	4b0e      	ldr	r3, [pc, #56]	; (242c <nrfx_clock_stop+0x84>)
    23f4:	f242 7510 	movw	r5, #10000	; 0x2710
    23f8:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    23fa:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    23fe:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
    2402:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2404:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2408:	d505      	bpl.n	2416 <nrfx_clock_stop+0x6e>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    240a:	b123      	cbz	r3, 2416 <nrfx_clock_stop+0x6e>
    240c:	2001      	movs	r0, #1
    240e:	f001 fb6c 	bl	3aea <nrfx_busy_wait>
    2412:	3d01      	subs	r5, #1
    2414:	d1f1      	bne.n	23fa <nrfx_clock_stop+0x52>
            m_clock_cb.hfclk_started = false;
    2416:	4b06      	ldr	r3, [pc, #24]	; (2430 <nrfx_clock_stop+0x88>)
    2418:	2200      	movs	r2, #0
    241a:	715a      	strb	r2, [r3, #5]
    241c:	e7c8      	b.n	23b0 <nrfx_clock_stop+0x8>
    241e:	bf00      	nop
    2420:	40000104 	.word	0x40000104
    2424:	4000000c 	.word	0x4000000c
    2428:	40000100 	.word	0x40000100
    242c:	40000004 	.word	0x40000004
    2430:	20000338 	.word	0x20000338

00002434 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2434:	4b16      	ldr	r3, [pc, #88]	; (2490 <nrfx_power_clock_irq_handler+0x5c>)
    2436:	681a      	ldr	r2, [r3, #0]
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    2438:	b510      	push	{r4, lr}
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    243a:	b16a      	cbz	r2, 2458 <nrfx_power_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    243c:	2200      	movs	r2, #0
    243e:	601a      	str	r2, [r3, #0]
    2440:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    2442:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2446:	2201      	movs	r2, #1
    2448:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    244c:	4b11      	ldr	r3, [pc, #68]	; (2494 <nrfx_power_clock_irq_handler+0x60>)
    244e:	7958      	ldrb	r0, [r3, #5]
    2450:	b910      	cbnz	r0, 2458 <nrfx_power_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
    2452:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    2454:	681b      	ldr	r3, [r3, #0]
    2456:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2458:	4b0f      	ldr	r3, [pc, #60]	; (2498 <nrfx_power_clock_irq_handler+0x64>)
    245a:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    245c:	b172      	cbz	r2, 247c <nrfx_power_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    245e:	2200      	movs	r2, #0
    2460:	601a      	str	r2, [r3, #0]
    2462:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2464:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2468:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    246c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    2470:	0792      	lsls	r2, r2, #30
    2472:	d104      	bne.n	247e <nrfx_power_clock_irq_handler+0x4a>
    p_reg->LFCLKSRC = (uint32_t)(source);
    2474:	2201      	movs	r2, #1
    2476:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    247a:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    247c:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    247e:	2202      	movs	r2, #2
    2480:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    2484:	4b03      	ldr	r3, [pc, #12]	; (2494 <nrfx_power_clock_irq_handler+0x60>)
}
    2486:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    248a:	681b      	ldr	r3, [r3, #0]
    248c:	2001      	movs	r0, #1
    248e:	4718      	bx	r3
    2490:	40000100 	.word	0x40000100
    2494:	20000338 	.word	0x20000338
    2498:	40000104 	.word	0x40000104

0000249c <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
    249c:	2301      	movs	r3, #1
    249e:	fa03 f000 	lsl.w	r0, r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
    24a2:	f010 0fff 	tst.w	r0, #255	; 0xff
    24a6:	d012      	beq.n	24ce <nrfx_gpiote_channel_free+0x32>
	__asm__ volatile(
    24a8:	f04f 0320 	mov.w	r3, #32
    24ac:	f3ef 8111 	mrs	r1, BASEPRI
    24b0:	f383 8811 	msr	BASEPRI, r3
    24b4:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
    24b8:	4a06      	ldr	r2, [pc, #24]	; (24d4 <nrfx_gpiote_channel_free+0x38>)
    24ba:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    24bc:	ea23 0000 	bic.w	r0, r3, r0
    24c0:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
    24c2:	f381 8811 	msr	BASEPRI, r1
    24c6:	f3bf 8f6f 	isb	sy
    24ca:	4803      	ldr	r0, [pc, #12]	; (24d8 <nrfx_gpiote_channel_free+0x3c>)
    24cc:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    24ce:	4803      	ldr	r0, [pc, #12]	; (24dc <nrfx_gpiote_channel_free+0x40>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    24d0:	4770      	bx	lr
    24d2:	bf00      	nop
    24d4:	20000340 	.word	0x20000340
    24d8:	0bad0000 	.word	0x0bad0000
    24dc:	0bad0004 	.word	0x0bad0004

000024e0 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
    24e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    24e4:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
    24e6:	f8df e060 	ldr.w	lr, [pc, #96]	; 2548 <nrfx_gpiote_channel_alloc+0x68>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    24ea:	4816      	ldr	r0, [pc, #88]	; (2544 <nrfx_gpiote_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
    24ec:	f8df 805c 	ldr.w	r8, [pc, #92]	; 254c <nrfx_gpiote_channel_alloc+0x6c>
{
    24f0:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
    24f2:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
    24f4:	2601      	movs	r6, #1
    24f6:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
    24f8:	f04f 0120 	mov.w	r1, #32
    24fc:	f3ef 8c11 	mrs	ip, BASEPRI
    2500:	f381 8811 	msr	BASEPRI, r1
    2504:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    2508:	fa22 f103 	lsr.w	r1, r2, r3
    250c:	07c9      	lsls	r1, r1, #31
    250e:	d50a      	bpl.n	2526 <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
    2510:	f8de 105c 	ldr.w	r1, [lr, #92]	; 0x5c
    2514:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    2518:	4239      	tst	r1, r7
    m_cb.allocated_channels_mask |= (1UL << index);
    251a:	bf01      	itttt	eq
    251c:	4339      	orreq	r1, r7
    251e:	f8ce 105c 	streq.w	r1, [lr, #92]	; 0x5c
            err_code = NRFX_SUCCESS;
    2522:	4640      	moveq	r0, r8
            *p_channel = ch_idx;
    2524:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
    2526:	f38c 8811 	msr	BASEPRI, ip
    252a:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
    252e:	4540      	cmp	r0, r8
    2530:	d005      	beq.n	253e <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
    2532:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    2536:	439a      	bics	r2, r3
    2538:	f104 0401 	add.w	r4, r4, #1
    253c:	d1db      	bne.n	24f6 <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    253e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2542:	bf00      	nop
    2544:	0bad0002 	.word	0x0bad0002
    2548:	20000340 	.word	0x20000340
    254c:	0bad0000 	.word	0x0bad0000

00002550 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    2550:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    2552:	4c09      	ldr	r4, [pc, #36]	; (2578 <idle+0x28>)
	__asm__ volatile(
    2554:	f04f 0220 	mov.w	r2, #32
    2558:	f3ef 8311 	mrs	r3, BASEPRI
    255c:	f382 8811 	msr	BASEPRI, r2
    2560:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
    2564:	f001 fbc4 	bl	3cf0 <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
    2568:	6220      	str	r0, [r4, #32]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
    256a:	f7fe fc53 	bl	e14 <pm_system_suspend>
    256e:	2800      	cmp	r0, #0
    2570:	d1f0      	bne.n	2554 <idle+0x4>
	arch_cpu_idle();
    2572:	f7ff f85d 	bl	1630 <arch_cpu_idle>
}
    2576:	e7ed      	b.n	2554 <idle+0x4>
    2578:	200003a0 	.word	0x200003a0

0000257c <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    257c:	4802      	ldr	r0, [pc, #8]	; (2588 <z_bss_zero+0xc>)
    257e:	4a03      	ldr	r2, [pc, #12]	; (258c <z_bss_zero+0x10>)
    2580:	2100      	movs	r1, #0
    2582:	1a12      	subs	r2, r2, r0
    2584:	f001 b9d2 	b.w	392c <memset>
    2588:	200000b0 	.word	0x200000b0
    258c:	200007f4 	.word	0x200007f4

00002590 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    2590:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    2592:	4b0a      	ldr	r3, [pc, #40]	; (25bc <bg_thread_main+0x2c>)
    2594:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    2596:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    2598:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    259a:	f000 ff19 	bl	33d0 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    259e:	f000 fd8b 	bl	30b8 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    25a2:	2003      	movs	r0, #3
    25a4:	f000 ff14 	bl	33d0 <z_sys_init_run_level>

	z_init_static_threads();
    25a8:	f000 fd28 	bl	2ffc <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    25ac:	f7fd ff24 	bl	3f8 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    25b0:	4a03      	ldr	r2, [pc, #12]	; (25c0 <bg_thread_main+0x30>)
    25b2:	7b13      	ldrb	r3, [r2, #12]
    25b4:	f023 0301 	bic.w	r3, r3, #1
    25b8:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    25ba:	bd08      	pop	{r3, pc}
    25bc:	200007f3 	.word	0x200007f3
    25c0:	20000130 	.word	0x20000130

000025c4 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    25c4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    25c8:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 26c4 <z_cstart+0x100>
    25cc:	b0a7      	sub	sp, #156	; 0x9c
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    25ce:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    25d2:	4d34      	ldr	r5, [pc, #208]	; (26a4 <z_cstart+0xe0>)
	_kernel.ready_q.cache = &z_main_thread;
    25d4:	4e34      	ldr	r6, [pc, #208]	; (26a8 <z_cstart+0xe4>)
    25d6:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    25d8:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 26c8 <z_cstart+0x104>
	z_setup_new_thread(thread, stack,
    25dc:	4f33      	ldr	r7, [pc, #204]	; (26ac <z_cstart+0xe8>)
    25de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    25e2:	2400      	movs	r4, #0
    25e4:	616b      	str	r3, [r5, #20]
    25e6:	23e0      	movs	r3, #224	; 0xe0
    25e8:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    25ec:	77ec      	strb	r4, [r5, #31]
    25ee:	762c      	strb	r4, [r5, #24]
    25f0:	766c      	strb	r4, [r5, #25]
    25f2:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    25f4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    25f6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    25fa:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    25fc:	f7ff f95c 	bl	18b8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    2600:	f7ff f810 	bl	1624 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    2604:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2608:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    260a:	62eb      	str	r3, [r5, #44]	; 0x2c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    260c:	4d28      	ldr	r5, [pc, #160]	; (26b0 <z_cstart+0xec>)
	dummy_thread->base.user_options = K_ESSENTIAL;
    260e:	f240 1301 	movw	r3, #257	; 0x101
    2612:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    2616:	ab06      	add	r3, sp, #24
    2618:	60ab      	str	r3, [r5, #8]
	dummy_thread->stack_info.size = 0U;
    261a:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
#endif
#if defined(CONFIG_MMU) && defined(CONFIG_USERSPACE)
	z_kernel_map_fixup();
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    261e:	f001 fb95 	bl	3d4c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    2622:	4620      	mov	r0, r4
    2624:	f000 fed4 	bl	33d0 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    2628:	2001      	movs	r0, #1
    262a:	f000 fed1 	bl	33d0 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    262e:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
    2632:	f000 fb91 	bl	2d58 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    2636:	4b1f      	ldr	r3, [pc, #124]	; (26b4 <z_cstart+0xf0>)
	_kernel.ready_q.cache = &z_main_thread;
    2638:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    263a:	491f      	ldr	r1, [pc, #124]	; (26b8 <z_cstart+0xf4>)
    263c:	9305      	str	r3, [sp, #20]
    263e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2642:	4653      	mov	r3, sl
    2644:	e9cd 4b03 	strd	r4, fp, [sp, #12]
    2648:	e9cd 4401 	strd	r4, r4, [sp, #4]
    264c:	9400      	str	r4, [sp, #0]
    264e:	4630      	mov	r0, r6
    2650:	f000 fca4 	bl	2f9c <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    2654:	7b73      	ldrb	r3, [r6, #13]
    2656:	4680      	mov	r8, r0
    2658:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
    265c:	4630      	mov	r0, r6
    265e:	7373      	strb	r3, [r6, #13]
    2660:	f001 fadc 	bl	3c1c <z_ready_thread>
	z_setup_new_thread(thread, stack,
    2664:	230f      	movs	r3, #15
    2666:	e9cd 4302 	strd	r4, r3, [sp, #8]
    266a:	4914      	ldr	r1, [pc, #80]	; (26bc <z_cstart+0xf8>)
    266c:	4b14      	ldr	r3, [pc, #80]	; (26c0 <z_cstart+0xfc>)
    266e:	f44f 72a0 	mov.w	r2, #320	; 0x140
    2672:	e9cd b404 	strd	fp, r4, [sp, #16]
    2676:	e9cd 5400 	strd	r5, r4, [sp]
    267a:	4638      	mov	r0, r7
    267c:	f000 fc8e 	bl	2f9c <z_setup_new_thread>
    2680:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    2682:	60ef      	str	r7, [r5, #12]
    2684:	f023 0304 	bic.w	r3, r3, #4
    2688:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    268a:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
    268e:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].id = i;
    2692:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
    2694:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    2698:	4652      	mov	r2, sl
    269a:	4641      	mov	r1, r8
    269c:	4630      	mov	r0, r6
    269e:	f7fe ffa9 	bl	15f4 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    26a2:	bf00      	nop
    26a4:	e000ed00 	.word	0xe000ed00
    26a8:	20000130 	.word	0x20000130
    26ac:	200000b0 	.word	0x200000b0
    26b0:	200003a0 	.word	0x200003a0
    26b4:	000040b6 	.word	0x000040b6
    26b8:	200007f8 	.word	0x200007f8
    26bc:	20000bf8 	.word	0x20000bf8
    26c0:	00002551 	.word	0x00002551
    26c4:	20001538 	.word	0x20001538
    26c8:	00002591 	.word	0x00002591

000026cc <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    26cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    26d0:	4604      	mov	r4, r0
    26d2:	4616      	mov	r6, r2
    26d4:	461f      	mov	r7, r3
    26d6:	f04f 0320 	mov.w	r3, #32
    26da:	f3ef 8811 	mrs	r8, BASEPRI
    26de:	f383 8811 	msr	BASEPRI, r3
    26e2:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    26e6:	68c3      	ldr	r3, [r0, #12]
    26e8:	4a32      	ldr	r2, [pc, #200]	; (27b4 <z_impl_k_mutex_lock+0xe8>)
    26ea:	b16b      	cbz	r3, 2708 <z_impl_k_mutex_lock+0x3c>
    26ec:	6880      	ldr	r0, [r0, #8]
    26ee:	6891      	ldr	r1, [r2, #8]
    26f0:	4288      	cmp	r0, r1
    26f2:	d019      	beq.n	2728 <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    26f4:	ea56 0307 	orrs.w	r3, r6, r7
    26f8:	d118      	bne.n	272c <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    26fa:	f388 8811 	msr	BASEPRI, r8
    26fe:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
    2702:	f06f 000f 	mvn.w	r0, #15
    2706:	e00c      	b.n	2722 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    2708:	6891      	ldr	r1, [r2, #8]
    270a:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    270e:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    2710:	3301      	adds	r3, #1
    2712:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    2714:	6893      	ldr	r3, [r2, #8]
    2716:	60a3      	str	r3, [r4, #8]
    2718:	f388 8811 	msr	BASEPRI, r8
    271c:	f3bf 8f6f 	isb	sy
		return 0;
    2720:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
    2722:	b002      	add	sp, #8
    2724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    2728:	6921      	ldr	r1, [r4, #16]
    272a:	e7f0      	b.n	270e <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    272c:	f990 300e 	ldrsb.w	r3, [r0, #14]
    2730:	f991 100e 	ldrsb.w	r1, [r1, #14]
    2734:	4299      	cmp	r1, r3
    2736:	bfa8      	it	ge
    2738:	4619      	movge	r1, r3
    273a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    273e:	4299      	cmp	r1, r3
    2740:	da2c      	bge.n	279c <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
    2742:	f000 fabd 	bl	2cc0 <z_set_prio>
    2746:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    2748:	e9cd 6700 	strd	r6, r7, [sp]
    274c:	481a      	ldr	r0, [pc, #104]	; (27b8 <z_impl_k_mutex_lock+0xec>)
    274e:	4622      	mov	r2, r4
    2750:	4641      	mov	r1, r8
    2752:	f000 f943 	bl	29dc <z_pend_curr>
	if (got_mutex == 0) {
    2756:	2800      	cmp	r0, #0
    2758:	d0e3      	beq.n	2722 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    275a:	f04f 0320 	mov.w	r3, #32
    275e:	f3ef 8611 	mrs	r6, BASEPRI
    2762:	f383 8811 	msr	BASEPRI, r3
    2766:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    276a:	6823      	ldr	r3, [r4, #0]
    276c:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    276e:	42a3      	cmp	r3, r4
    2770:	d007      	beq.n	2782 <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    2772:	b133      	cbz	r3, 2782 <z_impl_k_mutex_lock+0xb6>
    2774:	f993 300e 	ldrsb.w	r3, [r3, #14]
    2778:	4299      	cmp	r1, r3
    277a:	bfa8      	it	ge
    277c:	4619      	movge	r1, r3
    277e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    2782:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    2784:	f990 300e 	ldrsb.w	r3, [r0, #14]
    2788:	4299      	cmp	r1, r3
    278a:	d109      	bne.n	27a0 <z_impl_k_mutex_lock+0xd4>
	if (resched) {
    278c:	b16d      	cbz	r5, 27aa <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    278e:	480a      	ldr	r0, [pc, #40]	; (27b8 <z_impl_k_mutex_lock+0xec>)
    2790:	4631      	mov	r1, r6
    2792:	f000 f8a1 	bl	28d8 <z_reschedule>
	return -EAGAIN;
    2796:	f06f 000a 	mvn.w	r0, #10
    279a:	e7c2      	b.n	2722 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    279c:	2500      	movs	r5, #0
    279e:	e7d3      	b.n	2748 <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
    27a0:	f000 fa8e 	bl	2cc0 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    27a4:	2800      	cmp	r0, #0
    27a6:	d1f2      	bne.n	278e <z_impl_k_mutex_lock+0xc2>
    27a8:	e7f0      	b.n	278c <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
    27aa:	f386 8811 	msr	BASEPRI, r6
    27ae:	f3bf 8f6f 	isb	sy
    27b2:	e7f0      	b.n	2796 <z_impl_k_mutex_lock+0xca>
    27b4:	200003a0 	.word	0x200003a0
    27b8:	200007f4 	.word	0x200007f4

000027bc <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    27bc:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
    27be:	6883      	ldr	r3, [r0, #8]
{
    27c0:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    27c2:	2b00      	cmp	r3, #0
    27c4:	d036      	beq.n	2834 <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    27c6:	4a1e      	ldr	r2, [pc, #120]	; (2840 <z_impl_k_mutex_unlock+0x84>)
    27c8:	6892      	ldr	r2, [r2, #8]
    27ca:	4293      	cmp	r3, r2
    27cc:	d135      	bne.n	283a <z_impl_k_mutex_unlock+0x7e>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    27ce:	7bda      	ldrb	r2, [r3, #15]
    27d0:	3a01      	subs	r2, #1
    27d2:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
    27d4:	68c3      	ldr	r3, [r0, #12]
    27d6:	2b01      	cmp	r3, #1
    27d8:	d005      	beq.n	27e6 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    27da:	3b01      	subs	r3, #1
    27dc:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
    27de:	f000 f97d 	bl	2adc <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
    27e2:	2000      	movs	r0, #0
}
    27e4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    27e6:	f04f 0320 	mov.w	r3, #32
    27ea:	f3ef 8511 	mrs	r5, BASEPRI
    27ee:	f383 8811 	msr	BASEPRI, r3
    27f2:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    27f6:	6901      	ldr	r1, [r0, #16]
    27f8:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
    27fa:	f990 300e 	ldrsb.w	r3, [r0, #14]
    27fe:	4299      	cmp	r1, r3
    2800:	d001      	beq.n	2806 <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
    2802:	f000 fa5d 	bl	2cc0 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    2806:	4620      	mov	r0, r4
    2808:	f001 fa3a 	bl	3c80 <z_unpend_first_thread>
	mutex->owner = new_owner;
    280c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    280e:	b158      	cbz	r0, 2828 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
    2810:	f990 200e 	ldrsb.w	r2, [r0, #14]
    2814:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    2816:	2200      	movs	r2, #0
    2818:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    281a:	f001 f9ff 	bl	3c1c <z_ready_thread>
		z_reschedule(&lock, key);
    281e:	4809      	ldr	r0, [pc, #36]	; (2844 <z_impl_k_mutex_unlock+0x88>)
    2820:	4629      	mov	r1, r5
    2822:	f000 f859 	bl	28d8 <z_reschedule>
    2826:	e7da      	b.n	27de <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    2828:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    282a:	f385 8811 	msr	BASEPRI, r5
    282e:	f3bf 8f6f 	isb	sy
    2832:	e7d4      	b.n	27de <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    2834:	f06f 0015 	mvn.w	r0, #21
    2838:	e7d4      	b.n	27e4 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    283a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    283e:	e7d1      	b.n	27e4 <z_impl_k_mutex_unlock+0x28>
    2840:	200003a0 	.word	0x200003a0
    2844:	200007f4 	.word	0x200007f4

00002848 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    2848:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    284a:	4c08      	ldr	r4, [pc, #32]	; (286c <z_reset_time_slice+0x24>)
    284c:	6823      	ldr	r3, [r4, #0]
    284e:	b15b      	cbz	r3, 2868 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    2850:	f7fe fdb2 	bl	13b8 <sys_clock_elapsed>
    2854:	4603      	mov	r3, r0
    2856:	6820      	ldr	r0, [r4, #0]
    2858:	4a05      	ldr	r2, [pc, #20]	; (2870 <z_reset_time_slice+0x28>)
    285a:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    285c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    2860:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    2862:	2100      	movs	r1, #0
    2864:	f001 ba54 	b.w	3d10 <z_set_timeout_expiry>
}
    2868:	bd10      	pop	{r4, pc}
    286a:	bf00      	nop
    286c:	200003d8 	.word	0x200003d8
    2870:	200003a0 	.word	0x200003a0

00002874 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    2874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2876:	4604      	mov	r4, r0
    2878:	460d      	mov	r5, r1
	__asm__ volatile(
    287a:	f04f 0320 	mov.w	r3, #32
    287e:	f3ef 8611 	mrs	r6, BASEPRI
    2882:	f383 8811 	msr	BASEPRI, r3
    2886:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    288a:	4b10      	ldr	r3, [pc, #64]	; (28cc <k_sched_time_slice_set+0x58>)
    288c:	2200      	movs	r2, #0
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    288e:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    2892:	f240 30e7 	movw	r0, #999	; 0x3e7
    2896:	2100      	movs	r1, #0
    2898:	611a      	str	r2, [r3, #16]
    289a:	fbe7 0104 	umlal	r0, r1, r7, r4
    289e:	2300      	movs	r3, #0
    28a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    28a4:	f7fd fc2c 	bl	100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    28a8:	2c00      	cmp	r4, #0
    28aa:	4b09      	ldr	r3, [pc, #36]	; (28d0 <k_sched_time_slice_set+0x5c>)
    28ac:	dc09      	bgt.n	28c2 <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    28ae:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    28b0:	4b08      	ldr	r3, [pc, #32]	; (28d4 <k_sched_time_slice_set+0x60>)
    28b2:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    28b4:	f7ff ffc8 	bl	2848 <z_reset_time_slice>
	__asm__ volatile(
    28b8:	f386 8811 	msr	BASEPRI, r6
    28bc:	f3bf 8f6f 	isb	sy
	}
}
    28c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    28c2:	2802      	cmp	r0, #2
    28c4:	bfb8      	it	lt
    28c6:	2002      	movlt	r0, #2
    28c8:	e7f1      	b.n	28ae <k_sched_time_slice_set+0x3a>
    28ca:	bf00      	nop
    28cc:	200003a0 	.word	0x200003a0
    28d0:	200003d8 	.word	0x200003d8
    28d4:	200003d4 	.word	0x200003d4

000028d8 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    28d8:	b949      	cbnz	r1, 28ee <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    28da:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    28de:	b930      	cbnz	r0, 28ee <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    28e0:	4b05      	ldr	r3, [pc, #20]	; (28f8 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    28e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    28e4:	689b      	ldr	r3, [r3, #8]
    28e6:	429a      	cmp	r2, r3
    28e8:	d001      	beq.n	28ee <z_reschedule+0x16>
	ret = arch_swap(key);
    28ea:	f7fe bde3 	b.w	14b4 <arch_swap>
    28ee:	f381 8811 	msr	BASEPRI, r1
    28f2:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    28f6:	4770      	bx	lr
    28f8:	200003a0 	.word	0x200003a0

000028fc <k_sched_lock>:
	__asm__ volatile(
    28fc:	f04f 0320 	mov.w	r3, #32
    2900:	f3ef 8111 	mrs	r1, BASEPRI
    2904:	f383 8811 	msr	BASEPRI, r3
    2908:	f3bf 8f6f 	isb	sy
    290c:	4b04      	ldr	r3, [pc, #16]	; (2920 <k_sched_lock+0x24>)
    290e:	689a      	ldr	r2, [r3, #8]
    2910:	7bd3      	ldrb	r3, [r2, #15]
    2912:	3b01      	subs	r3, #1
    2914:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    2916:	f381 8811 	msr	BASEPRI, r1
    291a:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    291e:	4770      	bx	lr
    2920:	200003a0 	.word	0x200003a0

00002924 <update_cache>:
{
    2924:	b538      	push	{r3, r4, r5, lr}
	thread = _priq_run_best(&_kernel.ready_q.runq);
    2926:	4c0d      	ldr	r4, [pc, #52]	; (295c <update_cache+0x38>)
{
    2928:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
    292a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    292e:	f001 f93e 	bl	3bae <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    2932:	4605      	mov	r5, r0
    2934:	b900      	cbnz	r0, 2938 <update_cache+0x14>
    2936:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
    2938:	68a3      	ldr	r3, [r4, #8]
    293a:	b94a      	cbnz	r2, 2950 <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
    293c:	7b5a      	ldrb	r2, [r3, #13]
    293e:	06d2      	lsls	r2, r2, #27
    2940:	d106      	bne.n	2950 <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    2942:	69aa      	ldr	r2, [r5, #24]
    2944:	b922      	cbnz	r2, 2950 <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(thread)) {
    2946:	89da      	ldrh	r2, [r3, #14]
    2948:	2a7f      	cmp	r2, #127	; 0x7f
    294a:	d901      	bls.n	2950 <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
    294c:	6263      	str	r3, [r4, #36]	; 0x24
}
    294e:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    2950:	429d      	cmp	r5, r3
    2952:	d001      	beq.n	2958 <update_cache+0x34>
			z_reset_time_slice();
    2954:	f7ff ff78 	bl	2848 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    2958:	6265      	str	r5, [r4, #36]	; 0x24
}
    295a:	e7f8      	b.n	294e <update_cache+0x2a>
    295c:	200003a0 	.word	0x200003a0

00002960 <unready_thread>:
{
    2960:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    2962:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    2966:	7b43      	ldrb	r3, [r0, #13]
    2968:	2a00      	cmp	r2, #0
{
    296a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    296c:	da04      	bge.n	2978 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    296e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2972:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    2974:	f001 f8f3 	bl	3b5e <sys_dlist_remove>
	update_cache(thread == _current);
    2978:	4b04      	ldr	r3, [pc, #16]	; (298c <unready_thread+0x2c>)
    297a:	6898      	ldr	r0, [r3, #8]
    297c:	1a43      	subs	r3, r0, r1
    297e:	4258      	negs	r0, r3
    2980:	4158      	adcs	r0, r3
}
    2982:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    2986:	f7ff bfcd 	b.w	2924 <update_cache>
    298a:	bf00      	nop
    298c:	200003a0 	.word	0x200003a0

00002990 <pend>:
{
    2990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2994:	4606      	mov	r6, r0
    2996:	4614      	mov	r4, r2
    2998:	461d      	mov	r5, r3
	__asm__ volatile(
    299a:	f04f 0320 	mov.w	r3, #32
    299e:	f3ef 8711 	mrs	r7, BASEPRI
    29a2:	f383 8811 	msr	BASEPRI, r3
    29a6:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    29aa:	f001 f90a 	bl	3bc2 <add_to_waitq_locked>
	__asm__ volatile(
    29ae:	f387 8811 	msr	BASEPRI, r7
    29b2:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    29b6:	1c6b      	adds	r3, r5, #1
    29b8:	bf08      	it	eq
    29ba:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
    29be:	d008      	beq.n	29d2 <pend+0x42>

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    29c0:	4622      	mov	r2, r4
    29c2:	462b      	mov	r3, r5
    29c4:	f106 0018 	add.w	r0, r6, #24
    29c8:	4903      	ldr	r1, [pc, #12]	; (29d8 <pend+0x48>)
}
    29ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    29ce:	f000 bbe9 	b.w	31a4 <z_add_timeout>
    29d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    29d6:	bf00      	nop
    29d8:	00003c3d 	.word	0x00003c3d

000029dc <z_pend_curr>:
{
    29dc:	b510      	push	{r4, lr}
	pending_current = _current;
    29de:	4b07      	ldr	r3, [pc, #28]	; (29fc <z_pend_curr+0x20>)
    29e0:	6898      	ldr	r0, [r3, #8]
    29e2:	4b07      	ldr	r3, [pc, #28]	; (2a00 <z_pend_curr+0x24>)
{
    29e4:	460c      	mov	r4, r1
	pending_current = _current;
    29e6:	6018      	str	r0, [r3, #0]
{
    29e8:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    29ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    29ee:	f7ff ffcf 	bl	2990 <pend>
    29f2:	4620      	mov	r0, r4
}
    29f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    29f8:	f7fe bd5c 	b.w	14b4 <arch_swap>
    29fc:	200003a0 	.word	0x200003a0
    2a00:	200003d0 	.word	0x200003d0

00002a04 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
    2a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2a08:	4605      	mov	r5, r0
    2a0a:	460f      	mov	r7, r1
		return 0;
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);

	expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    2a0c:	f001 f99a 	bl	3d44 <sys_clock_tick_get_32>
    2a10:	4604      	mov	r4, r0
	__asm__ volatile(
    2a12:	f04f 0320 	mov.w	r3, #32
    2a16:	f3ef 8811 	mrs	r8, BASEPRI
    2a1a:	f383 8811 	msr	BASEPRI, r3
    2a1e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    2a22:	4e12      	ldr	r6, [pc, #72]	; (2a6c <z_tick_sleep.part.0+0x68>)
    2a24:	4b12      	ldr	r3, [pc, #72]	; (2a70 <z_tick_sleep.part.0+0x6c>)
    2a26:	68b0      	ldr	r0, [r6, #8]
    2a28:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    2a2a:	f7ff ff99 	bl	2960 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    2a2e:	68b0      	ldr	r0, [r6, #8]
    2a30:	4910      	ldr	r1, [pc, #64]	; (2a74 <z_tick_sleep.part.0+0x70>)
    2a32:	462a      	mov	r2, r5
    2a34:	463b      	mov	r3, r7
    2a36:	3018      	adds	r0, #24
    2a38:	f000 fbb4 	bl	31a4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    2a3c:	68b2      	ldr	r2, [r6, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    2a3e:	7b53      	ldrb	r3, [r2, #13]
    2a40:	f043 0310 	orr.w	r3, r3, #16
    2a44:	7353      	strb	r3, [r2, #13]
    2a46:	4640      	mov	r0, r8
    2a48:	f7fe fd34 	bl	14b4 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    2a4c:	f001 f97a 	bl	3d44 <sys_clock_tick_get_32>
	expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    2a50:	442c      	add	r4, r5
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    2a52:	1a24      	subs	r4, r4, r0
    2a54:	f04f 0500 	mov.w	r5, #0
    2a58:	f165 0500 	sbc.w	r5, r5, #0
    2a5c:	2c00      	cmp	r4, #0
    2a5e:	f175 0300 	sbcs.w	r3, r5, #0
    2a62:	bfb8      	it	lt
    2a64:	2400      	movlt	r4, #0
		return ticks;
	}
#endif

	return 0;
}
    2a66:	4620      	mov	r0, r4
    2a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2a6c:	200003a0 	.word	0x200003a0
    2a70:	200003d0 	.word	0x200003d0
    2a74:	00003c3d 	.word	0x00003c3d

00002a78 <z_impl_k_thread_suspend>:
{
    2a78:	b570      	push	{r4, r5, r6, lr}
    2a7a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    2a7c:	3018      	adds	r0, #24
    2a7e:	f001 f921 	bl	3cc4 <z_abort_timeout>
    2a82:	f04f 0320 	mov.w	r3, #32
    2a86:	f3ef 8611 	mrs	r6, BASEPRI
    2a8a:	f383 8811 	msr	BASEPRI, r3
    2a8e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    2a92:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    2a96:	7b63      	ldrb	r3, [r4, #13]
    2a98:	2a00      	cmp	r2, #0
    2a9a:	da05      	bge.n	2aa8 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    2a9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2aa0:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    2aa2:	4620      	mov	r0, r4
    2aa4:	f001 f85b 	bl	3b5e <sys_dlist_remove>
		update_cache(thread == _current);
    2aa8:	4d0b      	ldr	r5, [pc, #44]	; (2ad8 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    2aaa:	7b63      	ldrb	r3, [r4, #13]
    2aac:	68a8      	ldr	r0, [r5, #8]
    2aae:	f043 0310 	orr.w	r3, r3, #16
    2ab2:	7363      	strb	r3, [r4, #13]
    2ab4:	1b03      	subs	r3, r0, r4
    2ab6:	4258      	negs	r0, r3
    2ab8:	4158      	adcs	r0, r3
    2aba:	f7ff ff33 	bl	2924 <update_cache>
	__asm__ volatile(
    2abe:	f386 8811 	msr	BASEPRI, r6
    2ac2:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    2ac6:	68ab      	ldr	r3, [r5, #8]
    2ac8:	42a3      	cmp	r3, r4
    2aca:	d103      	bne.n	2ad4 <z_impl_k_thread_suspend+0x5c>
}
    2acc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    2ad0:	f001 b863 	b.w	3b9a <z_reschedule_unlocked>
}
    2ad4:	bd70      	pop	{r4, r5, r6, pc}
    2ad6:	bf00      	nop
    2ad8:	200003a0 	.word	0x200003a0

00002adc <k_sched_unlock>:
{
    2adc:	b510      	push	{r4, lr}
	__asm__ volatile(
    2ade:	f04f 0320 	mov.w	r3, #32
    2ae2:	f3ef 8411 	mrs	r4, BASEPRI
    2ae6:	f383 8811 	msr	BASEPRI, r3
    2aea:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    2aee:	4b08      	ldr	r3, [pc, #32]	; (2b10 <k_sched_unlock+0x34>)
    2af0:	689a      	ldr	r2, [r3, #8]
    2af2:	7bd3      	ldrb	r3, [r2, #15]
    2af4:	3301      	adds	r3, #1
    2af6:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    2af8:	2000      	movs	r0, #0
    2afa:	f7ff ff13 	bl	2924 <update_cache>
	__asm__ volatile(
    2afe:	f384 8811 	msr	BASEPRI, r4
    2b02:	f3bf 8f6f 	isb	sy
}
    2b06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    2b0a:	f001 b846 	b.w	3b9a <z_reschedule_unlocked>
    2b0e:	bf00      	nop
    2b10:	200003a0 	.word	0x200003a0

00002b14 <move_thread_to_end_of_prio_q>:
{
    2b14:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    2b16:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    2b1a:	7b43      	ldrb	r3, [r0, #13]
    2b1c:	2a00      	cmp	r2, #0
{
    2b1e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    2b20:	da04      	bge.n	2b2c <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    2b22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2b26:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    2b28:	f001 f819 	bl	3b5e <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    2b2c:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    2b2e:	4a17      	ldr	r2, [pc, #92]	; (2b8c <move_thread_to_end_of_prio_q+0x78>)
    2b30:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2b34:	4610      	mov	r0, r2
    2b36:	734b      	strb	r3, [r1, #13]
    2b38:	f850 3f28 	ldr.w	r3, [r0, #40]!
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    2b3c:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2b3e:	4283      	cmp	r3, r0
    2b40:	bf08      	it	eq
    2b42:	2300      	moveq	r3, #0
    2b44:	2b00      	cmp	r3, #0
    2b46:	bf38      	it	cc
    2b48:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2b4a:	b1cb      	cbz	r3, 2b80 <move_thread_to_end_of_prio_q+0x6c>
	int32_t b1 = thread_1->base.prio;
    2b4c:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    2b50:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
    2b54:	42a6      	cmp	r6, r4
    2b56:	d00f      	beq.n	2b78 <move_thread_to_end_of_prio_q+0x64>
		return b2 - b1;
    2b58:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    2b5a:	2c00      	cmp	r4, #0
    2b5c:	dd0c      	ble.n	2b78 <move_thread_to_end_of_prio_q+0x64>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    2b5e:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    2b60:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    2b64:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    2b66:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    2b68:	6890      	ldr	r0, [r2, #8]
    2b6a:	1a43      	subs	r3, r0, r1
    2b6c:	4258      	negs	r0, r3
}
    2b6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    2b72:	4158      	adcs	r0, r3
    2b74:	f7ff bed6 	b.w	2924 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    2b78:	42ab      	cmp	r3, r5
    2b7a:	d001      	beq.n	2b80 <move_thread_to_end_of_prio_q+0x6c>
    2b7c:	681b      	ldr	r3, [r3, #0]
    2b7e:	e7e4      	b.n	2b4a <move_thread_to_end_of_prio_q+0x36>
	node->prev = tail;
    2b80:	e9c1 0500 	strd	r0, r5, [r1]
	tail->next = node;
    2b84:	6029      	str	r1, [r5, #0]
	list->tail = node;
    2b86:	62d1      	str	r1, [r2, #44]	; 0x2c
}
    2b88:	e7ee      	b.n	2b68 <move_thread_to_end_of_prio_q+0x54>
    2b8a:	bf00      	nop
    2b8c:	200003a0 	.word	0x200003a0

00002b90 <z_time_slice>:
{
    2b90:	b570      	push	{r4, r5, r6, lr}
    2b92:	4601      	mov	r1, r0
	__asm__ volatile(
    2b94:	f04f 0320 	mov.w	r3, #32
    2b98:	f3ef 8411 	mrs	r4, BASEPRI
    2b9c:	f383 8811 	msr	BASEPRI, r3
    2ba0:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    2ba4:	4b16      	ldr	r3, [pc, #88]	; (2c00 <z_time_slice+0x70>)
    2ba6:	4a17      	ldr	r2, [pc, #92]	; (2c04 <z_time_slice+0x74>)
    2ba8:	6898      	ldr	r0, [r3, #8]
    2baa:	6815      	ldr	r5, [r2, #0]
    2bac:	42a8      	cmp	r0, r5
    2bae:	461d      	mov	r5, r3
    2bb0:	d106      	bne.n	2bc0 <z_time_slice+0x30>
			z_reset_time_slice();
    2bb2:	f7ff fe49 	bl	2848 <z_reset_time_slice>
	__asm__ volatile(
    2bb6:	f384 8811 	msr	BASEPRI, r4
    2bba:	f3bf 8f6f 	isb	sy
}
    2bbe:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    2bc0:	2600      	movs	r6, #0
    2bc2:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
    2bc4:	4a10      	ldr	r2, [pc, #64]	; (2c08 <z_time_slice+0x78>)
    2bc6:	6812      	ldr	r2, [r2, #0]
    2bc8:	b1ba      	cbz	r2, 2bfa <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    2bca:	89c2      	ldrh	r2, [r0, #14]
    2bcc:	2a7f      	cmp	r2, #127	; 0x7f
    2bce:	d814      	bhi.n	2bfa <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    2bd0:	7b42      	ldrb	r2, [r0, #13]
    2bd2:	06d2      	lsls	r2, r2, #27
    2bd4:	d111      	bne.n	2bfa <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    2bd6:	4a0d      	ldr	r2, [pc, #52]	; (2c0c <z_time_slice+0x7c>)
    2bd8:	f990 600e 	ldrsb.w	r6, [r0, #14]
    2bdc:	6812      	ldr	r2, [r2, #0]
    2bde:	4296      	cmp	r6, r2
    2be0:	db0b      	blt.n	2bfa <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    2be2:	4a0b      	ldr	r2, [pc, #44]	; (2c10 <z_time_slice+0x80>)
    2be4:	4290      	cmp	r0, r2
    2be6:	d008      	beq.n	2bfa <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    2be8:	691a      	ldr	r2, [r3, #16]
    2bea:	428a      	cmp	r2, r1
    2bec:	dc02      	bgt.n	2bf4 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
    2bee:	f7ff ff91 	bl	2b14 <move_thread_to_end_of_prio_q>
    2bf2:	e7de      	b.n	2bb2 <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
    2bf4:	1a52      	subs	r2, r2, r1
    2bf6:	611a      	str	r2, [r3, #16]
    2bf8:	e7dd      	b.n	2bb6 <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
    2bfa:	2300      	movs	r3, #0
    2bfc:	612b      	str	r3, [r5, #16]
    2bfe:	e7da      	b.n	2bb6 <z_time_slice+0x26>
    2c00:	200003a0 	.word	0x200003a0
    2c04:	200003d0 	.word	0x200003d0
    2c08:	200003d8 	.word	0x200003d8
    2c0c:	200003d4 	.word	0x200003d4
    2c10:	200000b0 	.word	0x200000b0

00002c14 <ready_thread>:
{
    2c14:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    2c16:	f990 300d 	ldrsb.w	r3, [r0, #13]
    2c1a:	7b42      	ldrb	r2, [r0, #13]
    2c1c:	2b00      	cmp	r3, #0
    2c1e:	db2d      	blt.n	2c7c <ready_thread+0x68>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    2c20:	06d3      	lsls	r3, r2, #27
    2c22:	d12b      	bne.n	2c7c <ready_thread+0x68>
	return !sys_dnode_is_linked(&to->node);
    2c24:	6983      	ldr	r3, [r0, #24]
    2c26:	bb4b      	cbnz	r3, 2c7c <ready_thread+0x68>
	return list->head == list;
    2c28:	4915      	ldr	r1, [pc, #84]	; (2c80 <ready_thread+0x6c>)
	thread->base.thread_state |= _THREAD_QUEUED;
    2c2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
    2c2e:	7342      	strb	r2, [r0, #13]
    2c30:	460a      	mov	r2, r1
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    2c32:	6acd      	ldr	r5, [r1, #44]	; 0x2c
	return list->head == list;
    2c34:	f852 4f28 	ldr.w	r4, [r2, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2c38:	4294      	cmp	r4, r2
    2c3a:	bf18      	it	ne
    2c3c:	4623      	movne	r3, r4
    2c3e:	2b00      	cmp	r3, #0
    2c40:	bf38      	it	cc
    2c42:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2c44:	b1ab      	cbz	r3, 2c72 <ready_thread+0x5e>
	int32_t b1 = thread_1->base.prio;
    2c46:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    2c4a:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
    2c4e:	42a6      	cmp	r6, r4
    2c50:	d00b      	beq.n	2c6a <ready_thread+0x56>
		return b2 - b1;
    2c52:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    2c54:	2c00      	cmp	r4, #0
    2c56:	dd08      	ble.n	2c6a <ready_thread+0x56>
	sys_dnode_t *const prev = successor->prev;
    2c58:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    2c5a:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    2c5e:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    2c60:	6058      	str	r0, [r3, #4]
}
    2c62:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    2c64:	2000      	movs	r0, #0
    2c66:	f7ff be5d 	b.w	2924 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    2c6a:	42ab      	cmp	r3, r5
    2c6c:	d001      	beq.n	2c72 <ready_thread+0x5e>
    2c6e:	681b      	ldr	r3, [r3, #0]
    2c70:	e7e8      	b.n	2c44 <ready_thread+0x30>
	node->prev = tail;
    2c72:	e9c0 2500 	strd	r2, r5, [r0]
	tail->next = node;
    2c76:	6028      	str	r0, [r5, #0]
	list->tail = node;
    2c78:	62c8      	str	r0, [r1, #44]	; 0x2c
}
    2c7a:	e7f2      	b.n	2c62 <ready_thread+0x4e>
}
    2c7c:	bc70      	pop	{r4, r5, r6}
    2c7e:	4770      	bx	lr
    2c80:	200003a0 	.word	0x200003a0

00002c84 <z_sched_start>:
{
    2c84:	b510      	push	{r4, lr}
	__asm__ volatile(
    2c86:	f04f 0220 	mov.w	r2, #32
    2c8a:	f3ef 8411 	mrs	r4, BASEPRI
    2c8e:	f382 8811 	msr	BASEPRI, r2
    2c92:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
    2c96:	7b42      	ldrb	r2, [r0, #13]
    2c98:	0751      	lsls	r1, r2, #29
    2c9a:	d404      	bmi.n	2ca6 <z_sched_start+0x22>
	__asm__ volatile(
    2c9c:	f384 8811 	msr	BASEPRI, r4
    2ca0:	f3bf 8f6f 	isb	sy
}
    2ca4:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    2ca6:	f022 0204 	bic.w	r2, r2, #4
    2caa:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    2cac:	f7ff ffb2 	bl	2c14 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    2cb0:	4621      	mov	r1, r4
    2cb2:	4802      	ldr	r0, [pc, #8]	; (2cbc <z_sched_start+0x38>)
}
    2cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    2cb8:	f7ff be0e 	b.w	28d8 <z_reschedule>
    2cbc:	200007f4 	.word	0x200007f4

00002cc0 <z_set_prio>:
{
    2cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2cc2:	4604      	mov	r4, r0
	__asm__ volatile(
    2cc4:	f04f 0320 	mov.w	r3, #32
    2cc8:	f3ef 8611 	mrs	r6, BASEPRI
    2ccc:	f383 8811 	msr	BASEPRI, r3
    2cd0:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    2cd4:	7b43      	ldrb	r3, [r0, #13]
    2cd6:	06da      	lsls	r2, r3, #27
    2cd8:	b249      	sxtb	r1, r1
    2cda:	d138      	bne.n	2d4e <z_set_prio+0x8e>
    2cdc:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
    2cde:	2d00      	cmp	r5, #0
    2ce0:	d135      	bne.n	2d4e <z_set_prio+0x8e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    2ce2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2ce6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    2ce8:	f000 ff39 	bl	3b5e <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    2cec:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
    2cee:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    2cf0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2cf4:	7343      	strb	r3, [r0, #13]
	return list->head == list;
    2cf6:	4817      	ldr	r0, [pc, #92]	; (2d54 <z_set_prio+0x94>)
    2cf8:	4603      	mov	r3, r0
    2cfa:	f853 7f28 	ldr.w	r7, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2cfe:	429f      	cmp	r7, r3
    2d00:	bf18      	it	ne
    2d02:	463d      	movne	r5, r7
    2d04:	2d00      	cmp	r5, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    2d06:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
    2d08:	461a      	mov	r2, r3
    2d0a:	462b      	mov	r3, r5
    2d0c:	bf38      	it	cc
    2d0e:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2d10:	b1c3      	cbz	r3, 2d44 <z_set_prio+0x84>
	int32_t b2 = thread_2->base.prio;
    2d12:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    2d16:	42a9      	cmp	r1, r5
    2d18:	d010      	beq.n	2d3c <z_set_prio+0x7c>
		return b2 - b1;
    2d1a:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    2d1c:	2d00      	cmp	r5, #0
    2d1e:	dd0d      	ble.n	2d3c <z_set_prio+0x7c>
	sys_dnode_t *const prev = successor->prev;
    2d20:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    2d22:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    2d26:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    2d28:	605c      	str	r4, [r3, #4]
			update_cache(1);
    2d2a:	2001      	movs	r0, #1
    2d2c:	f7ff fdfa 	bl	2924 <update_cache>
    2d30:	2001      	movs	r0, #1
	__asm__ volatile(
    2d32:	f386 8811 	msr	BASEPRI, r6
    2d36:	f3bf 8f6f 	isb	sy
}
    2d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    2d3c:	42bb      	cmp	r3, r7
    2d3e:	d001      	beq.n	2d44 <z_set_prio+0x84>
    2d40:	681b      	ldr	r3, [r3, #0]
    2d42:	e7e5      	b.n	2d10 <z_set_prio+0x50>
	node->prev = tail;
    2d44:	e9c4 2700 	strd	r2, r7, [r4]
	tail->next = node;
    2d48:	603c      	str	r4, [r7, #0]
	list->tail = node;
    2d4a:	62c4      	str	r4, [r0, #44]	; 0x2c
}
    2d4c:	e7ed      	b.n	2d2a <z_set_prio+0x6a>
			thread->base.prio = prio;
    2d4e:	73a1      	strb	r1, [r4, #14]
    2d50:	2000      	movs	r0, #0
    2d52:	e7ee      	b.n	2d32 <z_set_prio+0x72>
    2d54:	200003a0 	.word	0x200003a0

00002d58 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    2d58:	4b04      	ldr	r3, [pc, #16]	; (2d6c <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    2d5a:	2100      	movs	r1, #0
    2d5c:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    2d60:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    2d64:	4608      	mov	r0, r1
    2d66:	f7ff bd85 	b.w	2874 <k_sched_time_slice_set>
    2d6a:	bf00      	nop
    2d6c:	200003a0 	.word	0x200003a0

00002d70 <z_impl_k_yield>:
	if (!z_is_idle_thread_object(_current)) {
    2d70:	4926      	ldr	r1, [pc, #152]	; (2e0c <z_impl_k_yield+0x9c>)
{
    2d72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
    2d74:	688a      	ldr	r2, [r1, #8]
    2d76:	4b26      	ldr	r3, [pc, #152]	; (2e10 <z_impl_k_yield+0xa0>)
    2d78:	429a      	cmp	r2, r3
    2d7a:	d03d      	beq.n	2df8 <z_impl_k_yield+0x88>
	__asm__ volatile(
    2d7c:	f04f 0320 	mov.w	r3, #32
    2d80:	f3ef 8511 	mrs	r5, BASEPRI
    2d84:	f383 8811 	msr	BASEPRI, r3
    2d88:	f3bf 8f6f 	isb	sy
			dequeue_thread(&_kernel.ready_q.runq,
    2d8c:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    2d8e:	7b43      	ldrb	r3, [r0, #13]
    2d90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2d94:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    2d96:	f000 fee2 	bl	3b5e <sys_dlist_remove>
		queue_thread(&_kernel.ready_q.runq, _current);
    2d9a:	688a      	ldr	r2, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    2d9c:	7b53      	ldrb	r3, [r2, #13]
	return list->head == list;
    2d9e:	4608      	mov	r0, r1
    2da0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2da4:	7353      	strb	r3, [r2, #13]
    2da6:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    2daa:	6ace      	ldr	r6, [r1, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2dac:	4283      	cmp	r3, r0
    2dae:	bf08      	it	eq
    2db0:	2300      	moveq	r3, #0
    2db2:	2b00      	cmp	r3, #0
    2db4:	bf38      	it	cc
    2db6:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2db8:	b1cb      	cbz	r3, 2dee <z_impl_k_yield+0x7e>
	int32_t b1 = thread_1->base.prio;
    2dba:	f992 700e 	ldrsb.w	r7, [r2, #14]
	int32_t b2 = thread_2->base.prio;
    2dbe:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
    2dc2:	42a7      	cmp	r7, r4
    2dc4:	d00f      	beq.n	2de6 <z_impl_k_yield+0x76>
		return b2 - b1;
    2dc6:	1be4      	subs	r4, r4, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    2dc8:	2c00      	cmp	r4, #0
    2dca:	dd0c      	ble.n	2de6 <z_impl_k_yield+0x76>
	sys_dnode_t *const prev = successor->prev;
    2dcc:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    2dce:	e9c2 3100 	strd	r3, r1, [r2]
	prev->next = node;
    2dd2:	600a      	str	r2, [r1, #0]
	successor->prev = node;
    2dd4:	605a      	str	r2, [r3, #4]
		update_cache(1);
    2dd6:	2001      	movs	r0, #1
    2dd8:	f7ff fda4 	bl	2924 <update_cache>
    2ddc:	4628      	mov	r0, r5
}
    2dde:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    2de2:	f7fe bb67 	b.w	14b4 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    2de6:	42b3      	cmp	r3, r6
    2de8:	d001      	beq.n	2dee <z_impl_k_yield+0x7e>
    2dea:	681b      	ldr	r3, [r3, #0]
    2dec:	e7e4      	b.n	2db8 <z_impl_k_yield+0x48>
	node->prev = tail;
    2dee:	e9c2 0600 	strd	r0, r6, [r2]
	tail->next = node;
    2df2:	6032      	str	r2, [r6, #0]
	list->tail = node;
    2df4:	62ca      	str	r2, [r1, #44]	; 0x2c
}
    2df6:	e7ee      	b.n	2dd6 <z_impl_k_yield+0x66>
    2df8:	f04f 0320 	mov.w	r3, #32
    2dfc:	f3ef 8011 	mrs	r0, BASEPRI
    2e00:	f383 8811 	msr	BASEPRI, r3
    2e04:	f3bf 8f6f 	isb	sy
    2e08:	e7e9      	b.n	2dde <z_impl_k_yield+0x6e>
    2e0a:	bf00      	nop
    2e0c:	200003a0 	.word	0x200003a0
    2e10:	200000b0 	.word	0x200000b0

00002e14 <z_impl_k_sleep>:

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    2e14:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    2e18:	bf08      	it	eq
    2e1a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    2e1e:	b508      	push	{r3, lr}
    2e20:	4602      	mov	r2, r0
    2e22:	460b      	mov	r3, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    2e24:	d106      	bne.n	2e34 <z_impl_k_sleep+0x20>
		k_thread_suspend(_current);
    2e26:	4b0b      	ldr	r3, [pc, #44]	; (2e54 <z_impl_k_sleep+0x40>)
    2e28:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    2e2a:	f7ff fe25 	bl	2a78 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    2e2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
    2e32:	bd08      	pop	{r3, pc}
	if (ticks == 0) {
    2e34:	4313      	orrs	r3, r2
    2e36:	d10a      	bne.n	2e4e <z_impl_k_sleep+0x3a>
	z_impl_k_yield();
    2e38:	f7ff ff9a 	bl	2d70 <z_impl_k_yield>
		return 0;
    2e3c:	2000      	movs	r0, #0
		} else {
			return (t * to_hz + off) / from_hz;
    2e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    2e42:	fb80 2303 	smull	r2, r3, r0, r3
    2e46:	0bd0      	lsrs	r0, r2, #15
    2e48:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return k_ticks_to_ms_floor64(ticks);
    2e4c:	e7f1      	b.n	2e32 <z_impl_k_sleep+0x1e>
    2e4e:	f7ff fdd9 	bl	2a04 <z_tick_sleep.part.0>
    2e52:	e7f4      	b.n	2e3e <z_impl_k_sleep+0x2a>
    2e54:	200003a0 	.word	0x200003a0

00002e58 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    2e58:	4b01      	ldr	r3, [pc, #4]	; (2e60 <z_impl_k_current_get+0x8>)
    2e5a:	6898      	ldr	r0, [r3, #8]
    2e5c:	4770      	bx	lr
    2e5e:	bf00      	nop
    2e60:	200003a0 	.word	0x200003a0

00002e64 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    2e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2e68:	4604      	mov	r4, r0
    2e6a:	f04f 0320 	mov.w	r3, #32
    2e6e:	f3ef 8611 	mrs	r6, BASEPRI
    2e72:	f383 8811 	msr	BASEPRI, r3
    2e76:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    2e7a:	7b43      	ldrb	r3, [r0, #13]
    2e7c:	071a      	lsls	r2, r3, #28
    2e7e:	d505      	bpl.n	2e8c <z_thread_abort+0x28>
	__asm__ volatile(
    2e80:	f386 8811 	msr	BASEPRI, r6
    2e84:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    2e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    2e8c:	f023 0220 	bic.w	r2, r3, #32
    2e90:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    2e94:	09d2      	lsrs	r2, r2, #7
    2e96:	d120      	bne.n	2eda <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    2e98:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    2e9a:	68a3      	ldr	r3, [r4, #8]
    2e9c:	b113      	cbz	r3, 2ea4 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    2e9e:	4620      	mov	r0, r4
    2ea0:	f000 fe65 	bl	3b6e <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    2ea4:	f104 0018 	add.w	r0, r4, #24
    2ea8:	f000 ff0c 	bl	3cc4 <z_abort_timeout>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    2eac:	f104 0758 	add.w	r7, r4, #88	; 0x58
    2eb0:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    2eb4:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2eb6:	42bd      	cmp	r5, r7
    2eb8:	d000      	beq.n	2ebc <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    2eba:	b9b5      	cbnz	r5, 2eea <z_thread_abort+0x86>
		update_cache(1);
    2ebc:	2001      	movs	r0, #1
    2ebe:	f7ff fd31 	bl	2924 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    2ec2:	4b10      	ldr	r3, [pc, #64]	; (2f04 <z_thread_abort+0xa0>)
    2ec4:	689b      	ldr	r3, [r3, #8]
    2ec6:	42a3      	cmp	r3, r4
    2ec8:	d1da      	bne.n	2e80 <z_thread_abort+0x1c>
    2eca:	f3ef 8305 	mrs	r3, IPSR
    2ece:	2b00      	cmp	r3, #0
    2ed0:	d1d6      	bne.n	2e80 <z_thread_abort+0x1c>
    2ed2:	4630      	mov	r0, r6
    2ed4:	f7fe faee 	bl	14b4 <arch_swap>
	return ret;
    2ed8:	e7d2      	b.n	2e80 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    2eda:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    2ede:	f043 0308 	orr.w	r3, r3, #8
    2ee2:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    2ee4:	f000 fe3b 	bl	3b5e <sys_dlist_remove>
}
    2ee8:	e7d7      	b.n	2e9a <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    2eea:	4628      	mov	r0, r5
    2eec:	f000 fe3f 	bl	3b6e <unpend_thread_no_timeout>
    2ef0:	f105 0018 	add.w	r0, r5, #24
    2ef4:	f000 fee6 	bl	3cc4 <z_abort_timeout>
    2ef8:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    2efc:	4628      	mov	r0, r5
    2efe:	f7ff fe89 	bl	2c14 <ready_thread>
    2f02:	e7d7      	b.n	2eb4 <z_thread_abort+0x50>
    2f04:	200003a0 	.word	0x200003a0

00002f08 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    2f08:	b538      	push	{r3, r4, r5, lr}
    2f0a:	4604      	mov	r4, r0
	__asm__ volatile(
    2f0c:	f04f 0320 	mov.w	r3, #32
    2f10:	f3ef 8511 	mrs	r5, BASEPRI
    2f14:	f383 8811 	msr	BASEPRI, r3
    2f18:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
    2f1c:	f000 feb0 	bl	3c80 <z_unpend_first_thread>

	if (thread != NULL) {
    2f20:	b148      	cbz	r0, 2f36 <z_impl_k_sem_give+0x2e>
    2f22:	2200      	movs	r2, #0
    2f24:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    2f26:	f000 fe79 	bl	3c1c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    2f2a:	4629      	mov	r1, r5
    2f2c:	4805      	ldr	r0, [pc, #20]	; (2f44 <z_impl_k_sem_give+0x3c>)
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
    2f2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    2f32:	f7ff bcd1 	b.w	28d8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    2f36:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    2f3a:	429a      	cmp	r2, r3
    2f3c:	bf18      	it	ne
    2f3e:	3301      	addne	r3, #1
    2f40:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
    2f42:	e7f2      	b.n	2f2a <z_impl_k_sem_give+0x22>
    2f44:	200007f4 	.word	0x200007f4

00002f48 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    2f48:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2f4a:	4614      	mov	r4, r2
    2f4c:	461d      	mov	r5, r3
    2f4e:	f04f 0320 	mov.w	r3, #32
    2f52:	f3ef 8111 	mrs	r1, BASEPRI
    2f56:	f383 8811 	msr	BASEPRI, r3
    2f5a:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
    2f5e:	6883      	ldr	r3, [r0, #8]
    2f60:	b143      	cbz	r3, 2f74 <z_impl_k_sem_take+0x2c>
		sem->count--;
    2f62:	3b01      	subs	r3, #1
    2f64:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    2f66:	f381 8811 	msr	BASEPRI, r1
    2f6a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    2f6e:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
    2f70:	b003      	add	sp, #12
    2f72:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    2f74:	ea54 0305 	orrs.w	r3, r4, r5
    2f78:	d106      	bne.n	2f88 <z_impl_k_sem_take+0x40>
    2f7a:	f381 8811 	msr	BASEPRI, r1
    2f7e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    2f82:	f06f 000f 	mvn.w	r0, #15
    2f86:	e7f3      	b.n	2f70 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    2f88:	4602      	mov	r2, r0
    2f8a:	e9cd 4500 	strd	r4, r5, [sp]
    2f8e:	4802      	ldr	r0, [pc, #8]	; (2f98 <z_impl_k_sem_take+0x50>)
    2f90:	f7ff fd24 	bl	29dc <z_pend_curr>
	return ret;
    2f94:	e7ec      	b.n	2f70 <z_impl_k_sem_take+0x28>
    2f96:	bf00      	nop
    2f98:	200007f4 	.word	0x200007f4

00002f9c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    2f9c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    2fa0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    2fa2:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    2fa4:	2604      	movs	r6, #4
    2fa6:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    2fa8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    2faa:	7386      	strb	r6, [r0, #14]
	sys_dlist_init(&w->waitq);
    2fac:	f100 0558 	add.w	r5, r0, #88	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    2fb0:	1dd6      	adds	r6, r2, #7
	list->tail = (sys_dnode_t *)list;
    2fb2:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    2fb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    2fb8:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    2fba:	f026 0607 	bic.w	r6, r6, #7
	node->prev = NULL;
    2fbe:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    2fc2:	e9c0 1619 	strd	r1, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    2fc6:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    2fc8:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    2fca:	66c5      	str	r5, [r0, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    2fcc:	9202      	str	r2, [sp, #8]
    2fce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    2fd0:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    2fd2:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    2fd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2fd8:	9200      	str	r2, [sp, #0]
    2fda:	4642      	mov	r2, r8
{
    2fdc:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    2fde:	f7fe faed 	bl	15bc <arch_new_thread>
	if (!_current) {
    2fe2:	4b05      	ldr	r3, [pc, #20]	; (2ff8 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
    2fe4:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    2fe6:	689b      	ldr	r3, [r3, #8]
    2fe8:	b103      	cbz	r3, 2fec <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
    2fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    2fec:	6723      	str	r3, [r4, #112]	; 0x70
}
    2fee:	4640      	mov	r0, r8
    2ff0:	b004      	add	sp, #16
    2ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2ff6:	bf00      	nop
    2ff8:	200003a0 	.word	0x200003a0

00002ffc <z_init_static_threads>:
{
    2ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    3000:	4e2a      	ldr	r6, [pc, #168]	; (30ac <z_init_static_threads+0xb0>)
    3002:	4d2b      	ldr	r5, [pc, #172]	; (30b0 <z_init_static_threads+0xb4>)
{
    3004:	b086      	sub	sp, #24
    3006:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
    3008:	42b5      	cmp	r5, r6
    300a:	f105 0430 	add.w	r4, r5, #48	; 0x30
    300e:	d310      	bcc.n	3032 <z_init_static_threads+0x36>
	k_sched_lock();
    3010:	f7ff fc74 	bl	28fc <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    3014:	4c26      	ldr	r4, [pc, #152]	; (30b0 <z_init_static_threads+0xb4>)
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    3016:	f8df a09c 	ldr.w	sl, [pc, #156]	; 30b4 <z_init_static_threads+0xb8>
    301a:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    301e:	f240 36e7 	movw	r6, #999	; 0x3e7
    3022:	2700      	movs	r7, #0
    3024:	4544      	cmp	r4, r8
    3026:	d321      	bcc.n	306c <z_init_static_threads+0x70>
}
    3028:	b006      	add	sp, #24
    302a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
    302e:	f7ff bd55 	b.w	2adc <k_sched_unlock>
		z_setup_new_thread(
    3032:	f854 3c04 	ldr.w	r3, [r4, #-4]
    3036:	9305      	str	r3, [sp, #20]
    3038:	f854 3c10 	ldr.w	r3, [r4, #-16]
    303c:	9304      	str	r3, [sp, #16]
    303e:	f854 3c14 	ldr.w	r3, [r4, #-20]
    3042:	9303      	str	r3, [sp, #12]
    3044:	f854 3c18 	ldr.w	r3, [r4, #-24]
    3048:	9302      	str	r3, [sp, #8]
    304a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    304e:	9301      	str	r3, [sp, #4]
    3050:	f854 3c20 	ldr.w	r3, [r4, #-32]
    3054:	9300      	str	r3, [sp, #0]
    3056:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    305a:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    305e:	f7ff ff9d 	bl	2f9c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    3062:	f854 3c30 	ldr.w	r3, [r4, #-48]
    3066:	655d      	str	r5, [r3, #84]	; 0x54
    3068:	4625      	mov	r5, r4
    306a:	e7cd      	b.n	3008 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    306c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    306e:	1c5a      	adds	r2, r3, #1
    3070:	d00d      	beq.n	308e <z_init_static_threads+0x92>
					    K_MSEC(thread_data->init_delay));
    3072:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    3076:	4630      	mov	r0, r6
    3078:	4639      	mov	r1, r7
    307a:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    307e:	42b9      	cmp	r1, r7
    3080:	bf08      	it	eq
    3082:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
    3084:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    3086:	d104      	bne.n	3092 <z_init_static_threads+0x96>
	z_sched_start(thread);
    3088:	4628      	mov	r0, r5
    308a:	f7ff fdfb 	bl	2c84 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    308e:	3430      	adds	r4, #48	; 0x30
    3090:	e7c8      	b.n	3024 <z_init_static_threads+0x28>
    3092:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3096:	2300      	movs	r3, #0
    3098:	f7fd f832 	bl	100 <__aeabi_uldivmod>
    309c:	4602      	mov	r2, r0
    309e:	460b      	mov	r3, r1
    30a0:	f105 0018 	add.w	r0, r5, #24
    30a4:	4651      	mov	r1, sl
    30a6:	f000 f87d 	bl	31a4 <z_add_timeout>
    30aa:	e7f0      	b.n	308e <z_init_static_threads+0x92>
    30ac:	20000098 	.word	0x20000098
    30b0:	20000098 	.word	0x20000098
    30b4:	00003c3d 	.word	0x00003c3d

000030b8 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    30b8:	4a02      	ldr	r2, [pc, #8]	; (30c4 <boot_banner+0xc>)
    30ba:	4903      	ldr	r1, [pc, #12]	; (30c8 <boot_banner+0x10>)
    30bc:	4803      	ldr	r0, [pc, #12]	; (30cc <boot_banner+0x14>)
    30be:	f000 b9c7 	b.w	3450 <printk>
    30c2:	bf00      	nop
    30c4:	0000402e 	.word	0x0000402e
    30c8:	000040bb 	.word	0x000040bb
    30cc:	000040dc 	.word	0x000040dc

000030d0 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    30d0:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    30d2:	4806      	ldr	r0, [pc, #24]	; (30ec <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    30d4:	4a06      	ldr	r2, [pc, #24]	; (30f0 <z_data_copy+0x20>)
    30d6:	4907      	ldr	r1, [pc, #28]	; (30f4 <z_data_copy+0x24>)
    30d8:	1a12      	subs	r2, r2, r0
    30da:	f000 fbfc 	bl	38d6 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    30de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    30e2:	4a05      	ldr	r2, [pc, #20]	; (30f8 <z_data_copy+0x28>)
    30e4:	4905      	ldr	r1, [pc, #20]	; (30fc <z_data_copy+0x2c>)
    30e6:	4806      	ldr	r0, [pc, #24]	; (3100 <z_data_copy+0x30>)
    30e8:	f000 bbf5 	b.w	38d6 <memcpy>
    30ec:	20000000 	.word	0x20000000
    30f0:	200000ac 	.word	0x200000ac
    30f4:	00004104 	.word	0x00004104
    30f8:	00000000 	.word	0x00000000
    30fc:	00004104 	.word	0x00004104
    3100:	20000000 	.word	0x20000000

00003104 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    3104:	4b03      	ldr	r3, [pc, #12]	; (3114 <elapsed+0x10>)
    3106:	681b      	ldr	r3, [r3, #0]
    3108:	b90b      	cbnz	r3, 310e <elapsed+0xa>
    310a:	f7fe b955 	b.w	13b8 <sys_clock_elapsed>
}
    310e:	2000      	movs	r0, #0
    3110:	4770      	bx	lr
    3112:	bf00      	nop
    3114:	200003dc 	.word	0x200003dc

00003118 <remove_timeout>:
{
    3118:	b530      	push	{r4, r5, lr}
    311a:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    311c:	b168      	cbz	r0, 313a <remove_timeout+0x22>
    311e:	4a0a      	ldr	r2, [pc, #40]	; (3148 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    3120:	6852      	ldr	r2, [r2, #4]
    3122:	4290      	cmp	r0, r2
    3124:	d009      	beq.n	313a <remove_timeout+0x22>
	if (next(t) != NULL) {
    3126:	b143      	cbz	r3, 313a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    3128:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    312c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    3130:	1912      	adds	r2, r2, r4
    3132:	eb45 0101 	adc.w	r1, r5, r1
    3136:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    313a:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    313c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    313e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    3140:	2300      	movs	r3, #0
	node->prev = NULL;
    3142:	e9c0 3300 	strd	r3, r3, [r0]
}
    3146:	bd30      	pop	{r4, r5, pc}
    3148:	20000018 	.word	0x20000018

0000314c <next_timeout>:

static int32_t next_timeout(void)
{
    314c:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    314e:	4b13      	ldr	r3, [pc, #76]	; (319c <next_timeout+0x50>)
    3150:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3152:	429c      	cmp	r4, r3
    3154:	bf08      	it	eq
    3156:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    3158:	f7ff ffd4 	bl	3104 <elapsed>
    315c:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
    315e:	b1bc      	cbz	r4, 3190 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    3160:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    3164:	1b40      	subs	r0, r0, r5
    3166:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    316a:	2801      	cmp	r0, #1
    316c:	f171 0300 	sbcs.w	r3, r1, #0
    3170:	db11      	blt.n	3196 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    3172:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    3176:	2300      	movs	r3, #0
    3178:	4282      	cmp	r2, r0
    317a:	eb73 0401 	sbcs.w	r4, r3, r1
    317e:	da00      	bge.n	3182 <next_timeout+0x36>
    3180:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    3182:	4b07      	ldr	r3, [pc, #28]	; (31a0 <next_timeout+0x54>)
    3184:	691b      	ldr	r3, [r3, #16]
    3186:	b113      	cbz	r3, 318e <next_timeout+0x42>
    3188:	4298      	cmp	r0, r3
    318a:	bfa8      	it	ge
    318c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    318e:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    3190:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    3194:	e7f5      	b.n	3182 <next_timeout+0x36>
    3196:	2000      	movs	r0, #0
    3198:	e7f3      	b.n	3182 <next_timeout+0x36>
    319a:	bf00      	nop
    319c:	20000018 	.word	0x20000018
    31a0:	200003a0 	.word	0x200003a0

000031a4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    31a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    31a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    31ac:	bf08      	it	eq
    31ae:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    31b2:	b085      	sub	sp, #20
    31b4:	4604      	mov	r4, r0
    31b6:	4692      	mov	sl, r2
    31b8:	469b      	mov	fp, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    31ba:	d070      	beq.n	329e <z_add_timeout+0xfa>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	k_ticks_t ticks = timeout.ticks + 1;
    31bc:	1c56      	adds	r6, r2, #1

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    31be:	f06f 0501 	mvn.w	r5, #1
	k_ticks_t ticks = timeout.ticks + 1;
    31c2:	f143 0700 	adc.w	r7, r3, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    31c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    31ca:	ebb5 0806 	subs.w	r8, r5, r6
    31ce:	eb63 0907 	sbc.w	r9, r3, r7
    31d2:	f1b8 0f00 	cmp.w	r8, #0
    31d6:	f179 0300 	sbcs.w	r3, r9, #0
    31da:	db16      	blt.n	320a <z_add_timeout+0x66>
		ticks = Z_TICK_ABS(timeout.ticks) - (curr_tick + elapsed());
    31dc:	4e36      	ldr	r6, [pc, #216]	; (32b8 <z_add_timeout+0x114>)
    31de:	9103      	str	r1, [sp, #12]
    31e0:	f7ff ff90 	bl	3104 <elapsed>
    31e4:	e9d6 2600 	ldrd	r2, r6, [r6]
    31e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    31ec:	1aad      	subs	r5, r5, r2
    31ee:	eb63 0306 	sbc.w	r3, r3, r6
    31f2:	ebb5 020a 	subs.w	r2, r5, sl
    31f6:	eb63 030b 	sbc.w	r3, r3, fp
    31fa:	9200      	str	r2, [sp, #0]
    31fc:	9301      	str	r3, [sp, #4]
    31fe:	e9dd 6700 	ldrd	r6, r7, [sp]
    3202:	9903      	ldr	r1, [sp, #12]
    3204:	1a36      	subs	r6, r6, r0
    3206:	eb67 77e0 	sbc.w	r7, r7, r0, asr #31
	}

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    320a:	60a1      	str	r1, [r4, #8]
	__asm__ volatile(
    320c:	f04f 0320 	mov.w	r3, #32
    3210:	f3ef 8511 	mrs	r5, BASEPRI
    3214:	f383 8811 	msr	BASEPRI, r3
    3218:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    321c:	f7ff ff72 	bl	3104 <elapsed>
	ticks = MAX(1, ticks);
    3220:	2e01      	cmp	r6, #1
	return list->head == list;
    3222:	4a26      	ldr	r2, [pc, #152]	; (32bc <z_add_timeout+0x118>)
    3224:	f177 0300 	sbcs.w	r3, r7, #0
    3228:	bfb8      	it	lt
    322a:	2601      	movlt	r6, #1
    322c:	6813      	ldr	r3, [r2, #0]
    322e:	bfb8      	it	lt
    3230:	2700      	movlt	r7, #0
		to->dticks = ticks + elapsed();
    3232:	1836      	adds	r6, r6, r0
    3234:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3238:	4293      	cmp	r3, r2
    323a:	e9c4 6704 	strd	r6, r7, [r4, #16]
    323e:	d002      	beq.n	3246 <z_add_timeout+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    3240:	f8d2 c004 	ldr.w	ip, [r2, #4]
		for (t = first(); t != NULL; t = next(t)) {
    3244:	b92b      	cbnz	r3, 3252 <z_add_timeout+0xae>
	sys_dnode_t *const tail = list->tail;
    3246:	6853      	ldr	r3, [r2, #4]
	node->prev = tail;
    3248:	e9c4 2300 	strd	r2, r3, [r4]
	tail->next = node;
    324c:	601c      	str	r4, [r3, #0]
	list->tail = node;
    324e:	6054      	str	r4, [r2, #4]
}
    3250:	e012      	b.n	3278 <z_add_timeout+0xd4>
			if (t->dticks > to->dticks) {
    3252:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
    3256:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
    325a:	4546      	cmp	r6, r8
    325c:	eb77 0109 	sbcs.w	r1, r7, r9
    3260:	da20      	bge.n	32a4 <z_add_timeout+0x100>
				t->dticks -= to->dticks;
    3262:	ebb8 0006 	subs.w	r0, r8, r6
    3266:	eb69 0107 	sbc.w	r1, r9, r7
    326a:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    326e:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    3270:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    3274:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    3276:	605c      	str	r4, [r3, #4]
	return list->head == list;
    3278:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    327a:	4293      	cmp	r3, r2
    327c:	d00b      	beq.n	3296 <z_add_timeout+0xf2>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    327e:	429c      	cmp	r4, r3
    3280:	d109      	bne.n	3296 <z_add_timeout+0xf2>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    3282:	f7ff ff63 	bl	314c <next_timeout>

			if (next_time == 0 ||
    3286:	b118      	cbz	r0, 3290 <z_add_timeout+0xec>
			    _current_cpu->slice_ticks != next_time) {
    3288:	4b0d      	ldr	r3, [pc, #52]	; (32c0 <z_add_timeout+0x11c>)
			if (next_time == 0 ||
    328a:	691b      	ldr	r3, [r3, #16]
    328c:	4283      	cmp	r3, r0
    328e:	d002      	beq.n	3296 <z_add_timeout+0xf2>
				sys_clock_set_timeout(next_time, false);
    3290:	2100      	movs	r1, #0
    3292:	f7fe f85f 	bl	1354 <sys_clock_set_timeout>
	__asm__ volatile(
    3296:	f385 8811 	msr	BASEPRI, r5
    329a:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    329e:	b005      	add	sp, #20
    32a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
    32a4:	ebb6 0008 	subs.w	r0, r6, r8
    32a8:	eb67 0109 	sbc.w	r1, r7, r9
	return (node == list->tail) ? NULL : node->next;
    32ac:	4563      	cmp	r3, ip
    32ae:	e9c4 0104 	strd	r0, r1, [r4, #16]
    32b2:	d0c8      	beq.n	3246 <z_add_timeout+0xa2>
    32b4:	681b      	ldr	r3, [r3, #0]
    32b6:	e7c5      	b.n	3244 <z_add_timeout+0xa0>
    32b8:	200001b0 	.word	0x200001b0
    32bc:	20000018 	.word	0x20000018
    32c0:	200003a0 	.word	0x200003a0

000032c4 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    32c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    32c8:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    32ca:	f7ff fc61 	bl	2b90 <z_time_slice>
	__asm__ volatile(
    32ce:	f04f 0320 	mov.w	r3, #32
    32d2:	f3ef 8411 	mrs	r4, BASEPRI
    32d6:	f383 8811 	msr	BASEPRI, r3
    32da:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    32de:	4d2c      	ldr	r5, [pc, #176]	; (3390 <sys_clock_announce+0xcc>)
    32e0:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 3394 <sys_clock_announce+0xd0>
	return list->head == list;
    32e4:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 3398 <sys_clock_announce+0xd4>
    32e8:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    32ea:	4651      	mov	r1, sl
    32ec:	f8d5 c000 	ldr.w	ip, [r5]
    32f0:	f8db 0000 	ldr.w	r0, [fp]
    32f4:	4662      	mov	r2, ip
    32f6:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    32f8:	4558      	cmp	r0, fp
    32fa:	e9da 8900 	ldrd	r8, r9, [sl]
    32fe:	e9cd 2300 	strd	r2, r3, [sp]
    3302:	d00d      	beq.n	3320 <sys_clock_announce+0x5c>
    3304:	b160      	cbz	r0, 3320 <sys_clock_announce+0x5c>
    3306:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    330a:	45b4      	cmp	ip, r6
    330c:	41bb      	sbcs	r3, r7
    330e:	da1e      	bge.n	334e <sys_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    3310:	9b00      	ldr	r3, [sp, #0]
    3312:	ebb6 0c03 	subs.w	ip, r6, r3
    3316:	9b01      	ldr	r3, [sp, #4]
    3318:	eb67 0603 	sbc.w	r6, r7, r3
    331c:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
    3320:	9b00      	ldr	r3, [sp, #0]
    3322:	eb13 0208 	adds.w	r2, r3, r8
    3326:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
    3328:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
    332c:	eb43 0309 	adc.w	r3, r3, r9
    3330:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
    3334:	602e      	str	r6, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
    3336:	f7ff ff09 	bl	314c <next_timeout>
    333a:	4631      	mov	r1, r6
    333c:	f7fe f80a 	bl	1354 <sys_clock_set_timeout>
	__asm__ volatile(
    3340:	f384 8811 	msr	BASEPRI, r4
    3344:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    3348:	b003      	add	sp, #12
    334a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
    334e:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
    3352:	f04f 0200 	mov.w	r2, #0
    3356:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
    335a:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
    335e:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
    3362:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
    3366:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
    336a:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
    336c:	f7ff fed4 	bl	3118 <remove_timeout>
    3370:	f384 8811 	msr	BASEPRI, r4
    3374:	f3bf 8f6f 	isb	sy
		t->fn(t);
    3378:	6883      	ldr	r3, [r0, #8]
    337a:	4798      	blx	r3
	__asm__ volatile(
    337c:	f04f 0320 	mov.w	r3, #32
    3380:	f3ef 8411 	mrs	r4, BASEPRI
    3384:	f383 8811 	msr	BASEPRI, r3
    3388:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
    338c:	4901      	ldr	r1, [pc, #4]	; (3394 <sys_clock_announce+0xd0>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    338e:	e7ad      	b.n	32ec <sys_clock_announce+0x28>
    3390:	200003dc 	.word	0x200003dc
    3394:	200001b0 	.word	0x200001b0
    3398:	20000018 	.word	0x20000018

0000339c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    339c:	b510      	push	{r4, lr}
    339e:	f04f 0320 	mov.w	r3, #32
    33a2:	f3ef 8411 	mrs	r4, BASEPRI
    33a6:	f383 8811 	msr	BASEPRI, r3
    33aa:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    33ae:	f7fe f803 	bl	13b8 <sys_clock_elapsed>
    33b2:	4b06      	ldr	r3, [pc, #24]	; (33cc <sys_clock_tick_get+0x30>)
    33b4:	e9d3 2300 	ldrd	r2, r3, [r3]
    33b8:	1812      	adds	r2, r2, r0
    33ba:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    33be:	f384 8811 	msr	BASEPRI, r4
    33c2:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    33c6:	4610      	mov	r0, r2
    33c8:	4619      	mov	r1, r3
    33ca:	bd10      	pop	{r4, pc}
    33cc:	200001b0 	.word	0x200001b0

000033d0 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    33d0:	4b0e      	ldr	r3, [pc, #56]	; (340c <z_sys_init_run_level+0x3c>)
{
    33d2:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    33d4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    33d8:	3001      	adds	r0, #1
    33da:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    33de:	42a6      	cmp	r6, r4
    33e0:	d800      	bhi.n	33e4 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    33e2:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    33e4:	e9d4 3500 	ldrd	r3, r5, [r4]
    33e8:	4628      	mov	r0, r5
    33ea:	4798      	blx	r3
		if (dev != NULL) {
    33ec:	b165      	cbz	r5, 3408 <z_sys_init_run_level+0x38>
			if (rc != 0) {
    33ee:	68eb      	ldr	r3, [r5, #12]
    33f0:	b130      	cbz	r0, 3400 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    33f2:	2800      	cmp	r0, #0
    33f4:	bfb8      	it	lt
    33f6:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    33f8:	28ff      	cmp	r0, #255	; 0xff
    33fa:	bfa8      	it	ge
    33fc:	20ff      	movge	r0, #255	; 0xff
    33fe:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    3400:	785a      	ldrb	r2, [r3, #1]
    3402:	f042 0201 	orr.w	r2, r2, #1
    3406:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3408:	3408      	adds	r4, #8
    340a:	e7e8      	b.n	33de <z_sys_init_run_level+0xe>
    340c:	00004008 	.word	0x00004008

00003410 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    3410:	4603      	mov	r3, r0
    3412:	b158      	cbz	r0, 342c <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    3414:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    3416:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    341a:	2a01      	cmp	r2, #1
    341c:	d003      	beq.n	3426 <sys_notify_validate+0x16>
    341e:	2a03      	cmp	r2, #3
    3420:	d104      	bne.n	342c <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    3422:	6802      	ldr	r2, [r0, #0]
    3424:	b112      	cbz	r2, 342c <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    3426:	2000      	movs	r0, #0
    3428:	6098      	str	r0, [r3, #8]
    342a:	4770      	bx	lr
		return -EINVAL;
    342c:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    3430:	4770      	bx	lr

00003432 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    3432:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    3434:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    3436:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    343a:	2a03      	cmp	r2, #3
    343c:	f04f 0200 	mov.w	r2, #0
{
    3440:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    3442:	bf0c      	ite	eq
    3444:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = 0;
    3446:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    3448:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    344a:	4770      	bx	lr

0000344c <arch_printk_char_out>:
}
    344c:	2000      	movs	r0, #0
    344e:	4770      	bx	lr

00003450 <printk>:
 * @param fmt formatted string to output
 *
 * @return N/A
 */
void printk(const char *fmt, ...)
{
    3450:	b40f      	push	{r0, r1, r2, r3}
    3452:	b507      	push	{r0, r1, r2, lr}
    3454:	a904      	add	r1, sp, #16
    3456:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    345a:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    345c:	f7fc ffea 	bl	434 <vprintk>
	}
	va_end(ap);
}
    3460:	b003      	add	sp, #12
    3462:	f85d eb04 	ldr.w	lr, [sp], #4
    3466:	b004      	add	sp, #16
    3468:	4770      	bx	lr

0000346a <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    346a:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    346c:	f013 0307 	ands.w	r3, r3, #7
    3470:	d105      	bne.n	347e <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    3472:	6803      	ldr	r3, [r0, #0]
    3474:	2b00      	cmp	r3, #0
		evt = EVT_START;
    3476:	bf0c      	ite	eq
    3478:	2000      	moveq	r0, #0
    347a:	2003      	movne	r0, #3
    347c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    347e:	2b02      	cmp	r3, #2
    3480:	d105      	bne.n	348e <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    3482:	8b43      	ldrh	r3, [r0, #26]
    3484:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
    3486:	bf14      	ite	ne
    3488:	2000      	movne	r0, #0
    348a:	2004      	moveq	r0, #4
    348c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    348e:	2b01      	cmp	r3, #1
    3490:	d105      	bne.n	349e <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    3492:	6803      	ldr	r3, [r0, #0]
    3494:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
    3496:	bf0c      	ite	eq
    3498:	2000      	moveq	r0, #0
    349a:	2005      	movne	r0, #5
    349c:	4770      	bx	lr
	int evt = EVT_NOP;
    349e:	2000      	movs	r0, #0
}
    34a0:	4770      	bx	lr

000034a2 <notify_one>:
{
    34a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    34a6:	460d      	mov	r5, r1
    34a8:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    34aa:	4619      	mov	r1, r3
    34ac:	1d28      	adds	r0, r5, #4
{
    34ae:	4690      	mov	r8, r2
    34b0:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    34b2:	f7ff ffbe 	bl	3432 <sys_notify_finalize>
	if (cb) {
    34b6:	4604      	mov	r4, r0
    34b8:	b138      	cbz	r0, 34ca <notify_one+0x28>
		cb(mgr, cli, state, res);
    34ba:	4633      	mov	r3, r6
    34bc:	4642      	mov	r2, r8
    34be:	4629      	mov	r1, r5
    34c0:	4638      	mov	r0, r7
    34c2:	46a4      	mov	ip, r4
}
    34c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    34c8:	4760      	bx	ip
}
    34ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000034ce <transition_complete>:
{
    34ce:	b410      	push	{r4}
	__asm__ volatile(
    34d0:	f04f 0420 	mov.w	r4, #32
    34d4:	f3ef 8211 	mrs	r2, BASEPRI
    34d8:	f384 8811 	msr	BASEPRI, r4
    34dc:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    34e0:	6141      	str	r1, [r0, #20]
}
    34e2:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    34e4:	2101      	movs	r1, #1
    34e6:	f7fc bfb3 	b.w	450 <process_event>

000034ea <validate_args>:
{
    34ea:	b510      	push	{r4, lr}
    34ec:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    34ee:	b140      	cbz	r0, 3502 <validate_args+0x18>
    34f0:	b139      	cbz	r1, 3502 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    34f2:	1d08      	adds	r0, r1, #4
    34f4:	f7ff ff8c 	bl	3410 <sys_notify_validate>
	if ((rv == 0)
    34f8:	b928      	cbnz	r0, 3506 <validate_args+0x1c>
	    && ((cli->notify.flags
    34fa:	68a3      	ldr	r3, [r4, #8]
    34fc:	f033 0303 	bics.w	r3, r3, #3
    3500:	d001      	beq.n	3506 <validate_args+0x1c>
		rv = -EINVAL;
    3502:	f06f 0015 	mvn.w	r0, #21
}
    3506:	bd10      	pop	{r4, pc}

00003508 <onoff_manager_init>:
{
    3508:	b538      	push	{r3, r4, r5, lr}
    350a:	460c      	mov	r4, r1
	if ((mgr == NULL)
    350c:	4605      	mov	r5, r0
    350e:	b158      	cbz	r0, 3528 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    3510:	b151      	cbz	r1, 3528 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    3512:	680b      	ldr	r3, [r1, #0]
    3514:	b143      	cbz	r3, 3528 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    3516:	684b      	ldr	r3, [r1, #4]
    3518:	b133      	cbz	r3, 3528 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    351a:	221c      	movs	r2, #28
    351c:	2100      	movs	r1, #0
    351e:	f000 fa05 	bl	392c <memset>
    3522:	612c      	str	r4, [r5, #16]
	return 0;
    3524:	2000      	movs	r0, #0
}
    3526:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    3528:	f06f 0015 	mvn.w	r0, #21
    352c:	e7fb      	b.n	3526 <onoff_manager_init+0x1e>

0000352e <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    352e:	b570      	push	{r4, r5, r6, lr}
    3530:	4604      	mov	r4, r0
    3532:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    3534:	f7ff ffd9 	bl	34ea <validate_args>

	if (rv < 0) {
    3538:	1e05      	subs	r5, r0, #0
    353a:	db31      	blt.n	35a0 <onoff_request+0x72>
    353c:	f04f 0320 	mov.w	r3, #32
    3540:	f3ef 8111 	mrs	r1, BASEPRI
    3544:	f383 8811 	msr	BASEPRI, r3
    3548:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    354c:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    354e:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    3550:	f64f 75ff 	movw	r5, #65535	; 0xffff
    3554:	42ab      	cmp	r3, r5
    3556:	f000 0207 	and.w	r2, r0, #7
    355a:	d02e      	beq.n	35ba <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    355c:	2a02      	cmp	r2, #2
    355e:	d10e      	bne.n	357e <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    3560:	3301      	adds	r3, #1
    3562:	8363      	strh	r3, [r4, #26]
	rv = state;
    3564:	4615      	mov	r5, r2
		notify = true;
    3566:	2301      	movs	r3, #1
	__asm__ volatile(
    3568:	f381 8811 	msr	BASEPRI, r1
    356c:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    3570:	b1b3      	cbz	r3, 35a0 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    3572:	2300      	movs	r3, #0
    3574:	4631      	mov	r1, r6
    3576:	4620      	mov	r0, r4
    3578:	f7ff ff93 	bl	34a2 <notify_one>
    357c:	e010      	b.n	35a0 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    357e:	0783      	lsls	r3, r0, #30
    3580:	d001      	beq.n	3586 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    3582:	2a06      	cmp	r2, #6
    3584:	d10e      	bne.n	35a4 <onoff_request+0x76>
	parent->next = child;
    3586:	2300      	movs	r3, #0
    3588:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
    358a:	6863      	ldr	r3, [r4, #4]
    358c:	b993      	cbnz	r3, 35b4 <onoff_request+0x86>
	list->head = node;
    358e:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    3592:	4615      	mov	r5, r2
    3594:	b962      	cbnz	r2, 35b0 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    3596:	460a      	mov	r2, r1
    3598:	4620      	mov	r0, r4
    359a:	2102      	movs	r1, #2
    359c:	f7fc ff58 	bl	450 <process_event>
		}
	}

	return rv;
}
    35a0:	4628      	mov	r0, r5
    35a2:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    35a4:	2a05      	cmp	r2, #5
    35a6:	bf0c      	ite	eq
    35a8:	f06f 0522 	mvneq.w	r5, #34	; 0x22
    35ac:	f06f 0504 	mvnne.w	r5, #4
    35b0:	2300      	movs	r3, #0
    35b2:	e7d9      	b.n	3568 <onoff_request+0x3a>
	parent->next = child;
    35b4:	601e      	str	r6, [r3, #0]
	list->tail = node;
    35b6:	6066      	str	r6, [r4, #4]
}
    35b8:	e7eb      	b.n	3592 <onoff_request+0x64>
		rv = -EAGAIN;
    35ba:	f06f 050a 	mvn.w	r5, #10
    35be:	e7f7      	b.n	35b0 <onoff_request+0x82>

000035c0 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    35c0:	4604      	mov	r4, r0
    35c2:	b508      	push	{r3, lr}
    35c4:	4608      	mov	r0, r1
    35c6:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    35c8:	461a      	mov	r2, r3
    35ca:	47a0      	blx	r4
	return z_impl_k_current_get();
    35cc:	f7ff fc44 	bl	2e58 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    35d0:	f7fe f994 	bl	18fc <z_impl_k_thread_abort>

000035d4 <encode_uint>:
{
    35d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    35d8:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    35da:	78d3      	ldrb	r3, [r2, #3]
{
    35dc:	4614      	mov	r4, r2
	switch (specifier) {
    35de:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    35e0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
    35e4:	4606      	mov	r6, r0
    35e6:	460f      	mov	r7, r1
    35e8:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    35ea:	d02d      	beq.n	3648 <encode_uint+0x74>
    35ec:	d828      	bhi.n	3640 <encode_uint+0x6c>
		return 16;
    35ee:	2b58      	cmp	r3, #88	; 0x58
    35f0:	bf14      	ite	ne
    35f2:	250a      	movne	r5, #10
    35f4:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
    35f6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
    35fa:	46aa      	mov	sl, r5
    35fc:	f04f 0b00 	mov.w	fp, #0
    3600:	4652      	mov	r2, sl
    3602:	465b      	mov	r3, fp
    3604:	4630      	mov	r0, r6
    3606:	4639      	mov	r1, r7
    3608:	f7fc fd7a 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    360c:	2a09      	cmp	r2, #9
    360e:	b2d3      	uxtb	r3, r2
    3610:	d81f      	bhi.n	3652 <encode_uint+0x7e>
    3612:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    3614:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    3616:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    3618:	bf08      	it	eq
    361a:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    361c:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    3620:	d301      	bcc.n	3626 <encode_uint+0x52>
    3622:	45c8      	cmp	r8, r9
    3624:	d812      	bhi.n	364c <encode_uint+0x78>
	if (conv->flag_hash) {
    3626:	7823      	ldrb	r3, [r4, #0]
    3628:	069b      	lsls	r3, r3, #26
    362a:	d505      	bpl.n	3638 <encode_uint+0x64>
		if (radix == 8) {
    362c:	2d08      	cmp	r5, #8
    362e:	d116      	bne.n	365e <encode_uint+0x8a>
			conv->altform_0 = true;
    3630:	78a3      	ldrb	r3, [r4, #2]
    3632:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    3636:	70a3      	strb	r3, [r4, #2]
}
    3638:	4640      	mov	r0, r8
    363a:	b003      	add	sp, #12
    363c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    3640:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    3644:	2b70      	cmp	r3, #112	; 0x70
    3646:	e7d3      	b.n	35f0 <encode_uint+0x1c>
	switch (specifier) {
    3648:	2508      	movs	r5, #8
    364a:	e7d4      	b.n	35f6 <encode_uint+0x22>
		value /= radix;
    364c:	4606      	mov	r6, r0
    364e:	460f      	mov	r7, r1
    3650:	e7d6      	b.n	3600 <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    3652:	9a01      	ldr	r2, [sp, #4]
    3654:	2a19      	cmp	r2, #25
    3656:	bf94      	ite	ls
    3658:	3337      	addls	r3, #55	; 0x37
    365a:	3357      	addhi	r3, #87	; 0x57
    365c:	e7da      	b.n	3614 <encode_uint+0x40>
		} else if (radix == 16) {
    365e:	2d10      	cmp	r5, #16
    3660:	d1ea      	bne.n	3638 <encode_uint+0x64>
			conv->altform_0c = true;
    3662:	78a3      	ldrb	r3, [r4, #2]
    3664:	f043 0310 	orr.w	r3, r3, #16
    3668:	e7e5      	b.n	3636 <encode_uint+0x62>

0000366a <outs>:
{
    366a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    366e:	4607      	mov	r7, r0
    3670:	4688      	mov	r8, r1
    3672:	4615      	mov	r5, r2
    3674:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    3676:	4614      	mov	r4, r2
    3678:	42b4      	cmp	r4, r6
    367a:	eba4 0005 	sub.w	r0, r4, r5
    367e:	d302      	bcc.n	3686 <outs+0x1c>
    3680:	b93e      	cbnz	r6, 3692 <outs+0x28>
    3682:	7823      	ldrb	r3, [r4, #0]
    3684:	b12b      	cbz	r3, 3692 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    3686:	f814 0b01 	ldrb.w	r0, [r4], #1
    368a:	4641      	mov	r1, r8
    368c:	47b8      	blx	r7
		if (rc < 0) {
    368e:	2800      	cmp	r0, #0
    3690:	daf2      	bge.n	3678 <outs+0xe>
}
    3692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00003696 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    3696:	4770      	bx	lr

00003698 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    3698:	2200      	movs	r2, #0
    369a:	8002      	strh	r2, [r0, #0]
    369c:	6042      	str	r2, [r0, #4]
}
    369e:	4770      	bx	lr

000036a0 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    36a0:	6902      	ldr	r2, [r0, #16]
    36a2:	b2cb      	uxtb	r3, r1
    36a4:	210c      	movs	r1, #12
    36a6:	fb03 2101 	mla	r1, r3, r1, r2
    36aa:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
    36ac:	f000 0007 	and.w	r0, r0, #7
    36b0:	4770      	bx	lr

000036b2 <set_off_state>:
	__asm__ volatile(
    36b2:	f04f 0320 	mov.w	r3, #32
    36b6:	f3ef 8211 	mrs	r2, BASEPRI
    36ba:	f383 8811 	msr	BASEPRI, r3
    36be:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    36c2:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    36c4:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    36c8:	d001      	beq.n	36ce <set_off_state+0x1c>
    36ca:	428b      	cmp	r3, r1
    36cc:	d107      	bne.n	36de <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    36ce:	2301      	movs	r3, #1
    36d0:	6003      	str	r3, [r0, #0]
	int err = 0;
    36d2:	2000      	movs	r0, #0
	__asm__ volatile(
    36d4:	f382 8811 	msr	BASEPRI, r2
    36d8:	f3bf 8f6f 	isb	sy
}
    36dc:	4770      	bx	lr
		err = -EPERM;
    36de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    36e2:	e7f7      	b.n	36d4 <set_off_state+0x22>

000036e4 <set_starting_state>:
{
    36e4:	b510      	push	{r4, lr}
	__asm__ volatile(
    36e6:	f04f 0320 	mov.w	r3, #32
    36ea:	f3ef 8211 	mrs	r2, BASEPRI
    36ee:	f383 8811 	msr	BASEPRI, r3
    36f2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    36f6:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    36f8:	f003 0407 	and.w	r4, r3, #7
    36fc:	2c01      	cmp	r4, #1
    36fe:	d106      	bne.n	370e <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    3700:	6001      	str	r1, [r0, #0]
	int err = 0;
    3702:	2000      	movs	r0, #0
	__asm__ volatile(
    3704:	f382 8811 	msr	BASEPRI, r2
    3708:	f3bf 8f6f 	isb	sy
}
    370c:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    370e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    3712:	428b      	cmp	r3, r1
		err = -EALREADY;
    3714:	bf14      	ite	ne
    3716:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    371a:	f06f 0044 	mvneq.w	r0, #68	; 0x44
    371e:	e7f1      	b.n	3704 <set_starting_state+0x20>

00003720 <set_on_state>:
	__asm__ volatile(
    3720:	f04f 0320 	mov.w	r3, #32
    3724:	f3ef 8211 	mrs	r2, BASEPRI
    3728:	f383 8811 	msr	BASEPRI, r3
    372c:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    3730:	6803      	ldr	r3, [r0, #0]
    3732:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    3736:	f043 0302 	orr.w	r3, r3, #2
    373a:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    373c:	f382 8811 	msr	BASEPRI, r2
    3740:	f3bf 8f6f 	isb	sy
}
    3744:	4770      	bx	lr

00003746 <onoff_started_callback>:
	return &data->mgr[type];
    3746:	6900      	ldr	r0, [r0, #16]
{
    3748:	b410      	push	{r4}
	return &data->mgr[type];
    374a:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    374c:	241c      	movs	r4, #28
    374e:	fb03 0004 	mla	r0, r3, r4, r0
    3752:	2100      	movs	r1, #0
}
    3754:	bc10      	pop	{r4}
	notify(mgr, 0);
    3756:	4710      	bx	r2

00003758 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    3758:	2000      	movs	r0, #0
    375a:	f7fe bdf3 	b.w	2344 <nrfx_clock_start>

0000375e <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    375e:	2000      	movs	r0, #0
    3760:	f7fe be22 	b.w	23a8 <nrfx_clock_stop>

00003764 <blocking_start_callback>:
{
    3764:	4610      	mov	r0, r2
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    3766:	f7ff bbcf 	b.w	2f08 <z_impl_k_sem_give>

0000376a <api_stop>:
{
    376a:	b538      	push	{r3, r4, r5, lr}
    376c:	b2cc      	uxtb	r4, r1
	err = set_off_state(&subdata->flags, ctx);
    376e:	230c      	movs	r3, #12
{
    3770:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
    3772:	4363      	muls	r3, r4
    3774:	6900      	ldr	r0, [r0, #16]
    3776:	3340      	adds	r3, #64	; 0x40
    3778:	2180      	movs	r1, #128	; 0x80
    377a:	4418      	add	r0, r3
    377c:	f7ff ff99 	bl	36b2 <set_off_state>
	if (err < 0) {
    3780:	2800      	cmp	r0, #0
    3782:	db05      	blt.n	3790 <api_stop+0x26>
	get_sub_config(dev, type)->stop();
    3784:	6869      	ldr	r1, [r5, #4]
    3786:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
    378a:	6863      	ldr	r3, [r4, #4]
    378c:	4798      	blx	r3
	return 0;
    378e:	2000      	movs	r0, #0
}
    3790:	bd38      	pop	{r3, r4, r5, pc}

00003792 <api_start>:
{
    3792:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3796:	b2cd      	uxtb	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
    3798:	270c      	movs	r7, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    379a:	6904      	ldr	r4, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
    379c:	436f      	muls	r7, r5
{
    379e:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    37a0:	f107 0040 	add.w	r0, r7, #64	; 0x40
    37a4:	2180      	movs	r1, #128	; 0x80
    37a6:	4420      	add	r0, r4
{
    37a8:	4690      	mov	r8, r2
    37aa:	4699      	mov	r9, r3
	err = set_starting_state(&subdata->flags, ctx);
    37ac:	f7ff ff9a 	bl	36e4 <set_starting_state>
	if (err < 0) {
    37b0:	2800      	cmp	r0, #0
    37b2:	db07      	blt.n	37c4 <api_start+0x32>
	subdata->cb = cb;
    37b4:	443c      	add	r4, r7
	subdata->user_data = user_data;
    37b6:	e9c4 890e 	strd	r8, r9, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    37ba:	6873      	ldr	r3, [r6, #4]
    37bc:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
    37c0:	4798      	blx	r3
	return 0;
    37c2:	2000      	movs	r0, #0
}
    37c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000037c8 <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    37c8:	4770      	bx	lr

000037ca <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    37ca:	4770      	bx	lr

000037cc <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
    37cc:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
    37ce:	68c1      	ldr	r1, [r0, #12]
  if (RdOff <= WrOff) {
    37d0:	428b      	cmp	r3, r1
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    37d2:	bf9d      	ittte	ls
    37d4:	6882      	ldrls	r2, [r0, #8]
    37d6:	18d2      	addls	r2, r2, r3
    37d8:	f102 32ff 	addls.w	r2, r2, #4294967295	; 0xffffffff
    r = RdOff - WrOff - 1u;
    37dc:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    37e0:	bf94      	ite	ls
    37e2:	1a50      	subls	r0, r2, r1
    r = RdOff - WrOff - 1u;
    37e4:	1a58      	subhi	r0, r3, r1
}
    37e6:	4770      	bx	lr

000037e8 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    37e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
    37ec:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    37f0:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
    37f2:	eba9 0804 	sub.w	r8, r9, r4
  if (Rem > NumBytes) {
    37f6:	6840      	ldr	r0, [r0, #4]
    37f8:	4590      	cmp	r8, r2
    37fa:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    37fc:	460f      	mov	r7, r1
    37fe:	4414      	add	r4, r2
  if (Rem > NumBytes) {
    3800:	d904      	bls.n	380c <_WriteNoCheck+0x24>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    3802:	f000 f868 	bl	38d6 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
    3806:	60ec      	str	r4, [r5, #12]
}
    3808:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
    380c:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
    380e:	eba4 0409 	sub.w	r4, r4, r9
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
    3812:	f000 f860 	bl	38d6 <memcpy>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    3816:	6868      	ldr	r0, [r5, #4]
    3818:	4622      	mov	r2, r4
    381a:	eb07 0108 	add.w	r1, r7, r8
    381e:	e7f0      	b.n	3802 <_WriteNoCheck+0x1a>

00003820 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    3820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
    3824:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    3826:	4606      	mov	r6, r0
    3828:	4689      	mov	r9, r1
    382a:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
    382c:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    3830:	6934      	ldr	r4, [r6, #16]
    if (RdOff > WrOff) {
    3832:	68b3      	ldr	r3, [r6, #8]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
    3834:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
    3836:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    3838:	bf28      	it	cs
    383a:	18e4      	addcs	r4, r4, r3
    383c:	3c01      	subs	r4, #1
    383e:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    3840:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    3842:	42bc      	cmp	r4, r7
    3844:	bf28      	it	cs
    3846:	463c      	movcs	r4, r7
    3848:	4294      	cmp	r4, r2
    384a:	bf28      	it	cs
    384c:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
    384e:	4649      	mov	r1, r9
    3850:	4428      	add	r0, r5
    3852:	4622      	mov	r2, r4
    3854:	f000 f83f 	bl	38d6 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
    3858:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
    385a:	4425      	add	r5, r4
      WrOff = 0u;
    385c:	42ab      	cmp	r3, r5
    385e:	bf08      	it	eq
    3860:	2500      	moveq	r5, #0
  } while (NumBytes);
    3862:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
    3864:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
    3866:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
    3868:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
    386a:	d1e1      	bne.n	3830 <_WriteBlocking+0x10>
}
    386c:	4640      	mov	r0, r8
    386e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00003872 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    3872:	f7fd bdbb 	b.w	13ec <_DoInit>

00003876 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    3876:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    3878:	f7ff fffb 	bl	3872 <SEGGER_RTT_Init>

	return 0;
}
    387c:	2000      	movs	r0, #0
    387e:	bd08      	pop	{r3, pc}

00003880 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    3880:	2100      	movs	r1, #0
    3882:	2001      	movs	r0, #1
    3884:	f000 b800 	b.w	3888 <z_arm_fatal_error>

00003888 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    3888:	f000 b947 	b.w	3b1a <z_fatal_error>

0000388c <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    388c:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    388e:	6800      	ldr	r0, [r0, #0]
    3890:	f000 b943 	b.w	3b1a <z_fatal_error>

00003894 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    3894:	b508      	push	{r3, lr}
	handler();
    3896:	f7fd fee3 	bl	1660 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    389a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    389e:	f7fe b813 	b.w	18c8 <z_arm_exc_exit>

000038a2 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    38a2:	3901      	subs	r1, #1
    38a4:	4603      	mov	r3, r0
    38a6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    38aa:	b90a      	cbnz	r2, 38b0 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    38ac:	701a      	strb	r2, [r3, #0]

	return dest;
}
    38ae:	4770      	bx	lr
		*d = *s;
    38b0:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    38b4:	e7f7      	b.n	38a6 <strcpy+0x4>

000038b6 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    38b6:	4603      	mov	r3, r0
	size_t n = 0;
    38b8:	2000      	movs	r0, #0

	while (*s != '\0') {
    38ba:	5c1a      	ldrb	r2, [r3, r0]
    38bc:	b902      	cbnz	r2, 38c0 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    38be:	4770      	bx	lr
		n++;
    38c0:	3001      	adds	r0, #1
    38c2:	e7fa      	b.n	38ba <strlen+0x4>

000038c4 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    38c4:	4603      	mov	r3, r0
	size_t n = 0;
    38c6:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    38c8:	5c1a      	ldrb	r2, [r3, r0]
    38ca:	b10a      	cbz	r2, 38d0 <strnlen+0xc>
    38cc:	4288      	cmp	r0, r1
    38ce:	d100      	bne.n	38d2 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    38d0:	4770      	bx	lr
		n++;
    38d2:	3001      	adds	r0, #1
    38d4:	e7f8      	b.n	38c8 <strnlen+0x4>

000038d6 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    38d6:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    38d8:	ea81 0400 	eor.w	r4, r1, r0
    38dc:	07a5      	lsls	r5, r4, #30
    38de:	4603      	mov	r3, r0
    38e0:	d00b      	beq.n	38fa <memcpy+0x24>
    38e2:	3b01      	subs	r3, #1
    38e4:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    38e6:	4291      	cmp	r1, r2
    38e8:	d11b      	bne.n	3922 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    38ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    38ec:	2a00      	cmp	r2, #0
    38ee:	d0fc      	beq.n	38ea <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    38f0:	f811 4b01 	ldrb.w	r4, [r1], #1
    38f4:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    38f8:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
    38fa:	079c      	lsls	r4, r3, #30
    38fc:	d1f6      	bne.n	38ec <memcpy+0x16>
    38fe:	f022 0403 	bic.w	r4, r2, #3
    3902:	1f1d      	subs	r5, r3, #4
    3904:	0896      	lsrs	r6, r2, #2
    3906:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
    3908:	42b9      	cmp	r1, r7
    390a:	d105      	bne.n	3918 <memcpy+0x42>
    390c:	f06f 0503 	mvn.w	r5, #3
    3910:	fb05 2206 	mla	r2, r5, r6, r2
    3914:	4423      	add	r3, r4
    3916:	e7e4      	b.n	38e2 <memcpy+0xc>
			*(d_word++) = *(s_word++);
    3918:	f851 cb04 	ldr.w	ip, [r1], #4
    391c:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
    3920:	e7f2      	b.n	3908 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
    3922:	f811 4b01 	ldrb.w	r4, [r1], #1
    3926:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    392a:	e7dc      	b.n	38e6 <memcpy+0x10>

0000392c <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    392c:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    392e:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    3930:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    3932:	079c      	lsls	r4, r3, #30
    3934:	d111      	bne.n	395a <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
    3936:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    393a:	f022 0603 	bic.w	r6, r2, #3
    393e:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    3942:	441e      	add	r6, r3
    3944:	0894      	lsrs	r4, r2, #2
    3946:	42b3      	cmp	r3, r6
    3948:	d10d      	bne.n	3966 <memset+0x3a>
    394a:	f06f 0503 	mvn.w	r5, #3
    394e:	fb05 2204 	mla	r2, r5, r4, r2
    3952:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    3954:	4293      	cmp	r3, r2
    3956:	d109      	bne.n	396c <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    3958:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    395a:	2a00      	cmp	r2, #0
    395c:	d0fc      	beq.n	3958 <memset+0x2c>
		*(d_byte++) = c_byte;
    395e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    3962:	3a01      	subs	r2, #1
    3964:	e7e5      	b.n	3932 <memset+0x6>
		*(d_word++) = c_word;
    3966:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
    396a:	e7ec      	b.n	3946 <memset+0x1a>
		*(d_byte++) = c_byte;
    396c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    3970:	e7f0      	b.n	3954 <memset+0x28>

00003972 <_stdout_hook_default>:
}
    3972:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3976:	4770      	bx	lr

00003978 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
    3978:	f7fe bc04 	b.w	2184 <SystemInit>

0000397c <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
void pm_power_state_set(struct pm_state_info info)
{
    397c:	b082      	sub	sp, #8
    397e:	ab02      	add	r3, sp, #8
    3980:	e903 0003 	stmdb	r3, {r0, r1}
	switch (info.state) {
    3984:	f89d 3000 	ldrb.w	r3, [sp]
    3988:	2b06      	cmp	r3, #6
    398a:	d108      	bne.n	399e <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    398c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3990:	2201      	movs	r2, #1
    3992:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    3996:	f3bf 8f4f 	dsb	sy
        __WFE();
    399a:	bf20      	wfe
    while (true)
    399c:	e7fd      	b.n	399a <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    399e:	b002      	add	sp, #8
    39a0:	4770      	bx	lr

000039a2 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    39a2:	b082      	sub	sp, #8
    39a4:	ab02      	add	r3, sp, #8
    39a6:	e903 0003 	stmdb	r3, {r0, r1}
    39aa:	2300      	movs	r3, #0
    39ac:	f383 8811 	msr	BASEPRI, r3
    39b0:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    39b4:	b002      	add	sp, #8
    39b6:	4770      	bx	lr

000039b8 <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
    39b8:	b570      	push	{r4, r5, r6, lr}
    39ba:	460e      	mov	r6, r1
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    39bc:	6801      	ldr	r1, [r0, #0]
{
    39be:	4615      	mov	r5, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    39c0:	b189      	cbz	r1, 39e6 <gpio_fire_callbacks+0x2e>
	return node->next;
    39c2:	680c      	ldr	r4, [r1, #0]
    39c4:	2c00      	cmp	r4, #0
    39c6:	bf38      	it	cc
    39c8:	2400      	movcc	r4, #0
		if (cb->pin_mask & pins) {
    39ca:	688a      	ldr	r2, [r1, #8]
    39cc:	402a      	ands	r2, r5
    39ce:	d002      	beq.n	39d6 <gpio_fire_callbacks+0x1e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    39d0:	684b      	ldr	r3, [r1, #4]
    39d2:	4630      	mov	r0, r6
    39d4:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    39d6:	b134      	cbz	r4, 39e6 <gpio_fire_callbacks+0x2e>
    39d8:	6823      	ldr	r3, [r4, #0]
    39da:	2b00      	cmp	r3, #0
    39dc:	bf38      	it	cc
    39de:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    39e0:	4621      	mov	r1, r4
    39e2:	461c      	mov	r4, r3
    39e4:	e7f1      	b.n	39ca <gpio_fire_callbacks+0x12>
		}
	}
}
    39e6:	bd70      	pop	{r4, r5, r6, pc}

000039e8 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    39e8:	6843      	ldr	r3, [r0, #4]
    39ea:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    39ec:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    39f0:	600b      	str	r3, [r1, #0]
}
    39f2:	2000      	movs	r0, #0
    39f4:	4770      	bx	lr

000039f6 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    39f6:	6843      	ldr	r3, [r0, #4]
    39f8:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    39fa:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    39fe:	4042      	eors	r2, r0
    3a00:	400a      	ands	r2, r1
    3a02:	4042      	eors	r2, r0
    p_reg->OUT = value;
    3a04:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    3a08:	2000      	movs	r0, #0
    3a0a:	4770      	bx	lr

00003a0c <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    3a0c:	6843      	ldr	r3, [r0, #4]
    3a0e:	685b      	ldr	r3, [r3, #4]
}
    3a10:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    3a12:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    3a16:	4770      	bx	lr

00003a18 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    3a18:	6843      	ldr	r3, [r0, #4]
    3a1a:	685b      	ldr	r3, [r3, #4]
}
    3a1c:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    3a1e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    3a22:	4770      	bx	lr

00003a24 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    3a24:	6843      	ldr	r3, [r0, #4]
    3a26:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    3a28:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    3a2c:	404b      	eors	r3, r1
    p_reg->OUT = value;
    3a2e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    3a32:	2000      	movs	r0, #0
    3a34:	4770      	bx	lr

00003a36 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    3a36:	6903      	ldr	r3, [r0, #16]
Z_GENLIST_IS_EMPTY(slist)
    3a38:	6858      	ldr	r0, [r3, #4]
{
    3a3a:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    3a3c:	b158      	cbz	r0, 3a56 <gpio_nrfx_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    3a3e:	2400      	movs	r4, #0
    3a40:	4281      	cmp	r1, r0
    3a42:	d113      	bne.n	3a6c <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
    3a44:	6808      	ldr	r0, [r1, #0]
    3a46:	b95c      	cbnz	r4, 3a60 <gpio_nrfx_manage_callback+0x2a>
    3a48:	689c      	ldr	r4, [r3, #8]
	list->head = node;
    3a4a:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    3a4c:	42a1      	cmp	r1, r4
    3a4e:	d100      	bne.n	3a52 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    3a50:	6098      	str	r0, [r3, #8]
	parent->next = child;
    3a52:	2000      	movs	r0, #0
    3a54:	6008      	str	r0, [r1, #0]
	if (set) {
    3a56:	b972      	cbnz	r2, 3a76 <gpio_nrfx_manage_callback+0x40>
	return 0;
    3a58:	2000      	movs	r0, #0
}
    3a5a:	bd30      	pop	{r4, r5, pc}
    3a5c:	4628      	mov	r0, r5
    3a5e:	e7ef      	b.n	3a40 <gpio_nrfx_manage_callback+0xa>
    3a60:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    3a62:	6898      	ldr	r0, [r3, #8]
    3a64:	4281      	cmp	r1, r0
	list->tail = node;
    3a66:	bf08      	it	eq
    3a68:	609c      	streq	r4, [r3, #8]
}
    3a6a:	e7f2      	b.n	3a52 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    3a6c:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    3a6e:	4604      	mov	r4, r0
    3a70:	2d00      	cmp	r5, #0
    3a72:	d1f3      	bne.n	3a5c <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    3a74:	b13a      	cbz	r2, 3a86 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
    3a76:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    3a78:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    3a7a:	6898      	ldr	r0, [r3, #8]
	list->head = node;
    3a7c:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    3a7e:	2800      	cmp	r0, #0
    3a80:	d1ea      	bne.n	3a58 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    3a82:	6099      	str	r1, [r3, #8]
}
    3a84:	e7e9      	b.n	3a5a <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    3a86:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    3a8a:	e7e6      	b.n	3a5a <gpio_nrfx_manage_callback+0x24>

00003a8c <cfg_level_pins>:
{
    3a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct gpio_nrfx_data *data = get_port_data(port);
    3a90:	6907      	ldr	r7, [r0, #16]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    3a92:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
    3a96:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    3a98:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
    3a9c:	4313      	orrs	r3, r2
    3a9e:	ea24 0403 	bic.w	r4, r4, r3
	uint32_t bit = 1U << pin;
    3aa2:	2601      	movs	r6, #1
	uint32_t pin = 0U;
    3aa4:	2500      	movs	r5, #0
	while (level_pins) {
    3aa6:	b90c      	cbnz	r4, 3aac <cfg_level_pins+0x20>
}
    3aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
    3aac:	4226      	tst	r6, r4
    3aae:	d010      	beq.n	3ad2 <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    3ab0:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3ab2:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
    3ab6:	40e9      	lsrs	r1, r5
    3ab8:	f001 0101 	and.w	r1, r1, #1
    3abc:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3ac0:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    3ac4:	b2c9      	uxtb	r1, r1
    3ac6:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
    3aca:	f7fe f85f 	bl	1b8c <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    3ace:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
    3ad2:	3501      	adds	r5, #1
		bit <<= 1;
    3ad4:	0076      	lsls	r6, r6, #1
    3ad6:	e7e6      	b.n	3aa6 <cfg_level_pins+0x1a>

00003ad8 <uart_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    3ad8:	6902      	ldr	r2, [r0, #16]
{
    3ada:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    3adc:	e892 0003 	ldmia.w	r2, {r0, r1}
    3ae0:	e883 0003 	stmia.w	r3, {r0, r1}
}
    3ae4:	2000      	movs	r0, #0
    3ae6:	4770      	bx	lr

00003ae8 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    3ae8:	4700      	bx	r0

00003aea <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    3aea:	f000 b8e7 	b.w	3cbc <z_impl_k_busy_wait>

00003aee <nrfx_clock_enable>:
{
    3aee:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    3af0:	2000      	movs	r0, #0
    3af2:	f7fd fd3d 	bl	1570 <arch_irq_is_enabled>
    3af6:	b918      	cbnz	r0, 3b00 <nrfx_clock_enable+0x12>
}
    3af8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    3afc:	f7fd bd28 	b.w	1550 <arch_irq_enable>
    3b00:	bd08      	pop	{r3, pc}

00003b02 <arch_system_halt>:
	__asm__ volatile(
    3b02:	f04f 0220 	mov.w	r2, #32
    3b06:	f3ef 8311 	mrs	r3, BASEPRI
    3b0a:	f382 8811 	msr	BASEPRI, r2
    3b0e:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
    3b12:	e7fe      	b.n	3b12 <arch_system_halt+0x10>

00003b14 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    3b14:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
    3b16:	f7ff fff4 	bl	3b02 <arch_system_halt>

00003b1a <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    3b1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b1c:	4605      	mov	r5, r0
    3b1e:	460e      	mov	r6, r1
    3b20:	f04f 0320 	mov.w	r3, #32
    3b24:	f3ef 8711 	mrs	r7, BASEPRI
    3b28:	f383 8811 	msr	BASEPRI, r3
    3b2c:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    3b30:	f7ff f992 	bl	2e58 <z_impl_k_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    3b34:	4631      	mov	r1, r6
    3b36:	4604      	mov	r4, r0
    3b38:	4628      	mov	r0, r5
    3b3a:	f7ff ffeb 	bl	3b14 <k_sys_fatal_error_handler>
	__asm__ volatile(
    3b3e:	f387 8811 	msr	BASEPRI, r7
    3b42:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    3b46:	4620      	mov	r0, r4
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
    3b48:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    3b4c:	f7fd bed6 	b.w	18fc <z_impl_k_thread_abort>

00003b50 <z_pm_save_idle_exit>:
{
    3b50:	b508      	push	{r3, lr}
	pm_system_resume();
    3b52:	f7fd f949 	bl	de8 <pm_system_resume>
}
    3b56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    3b5a:	f7ff be36 	b.w	37ca <sys_clock_idle_exit>

00003b5e <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    3b5e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    3b62:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    3b64:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    3b66:	2300      	movs	r3, #0
	node->prev = NULL;
    3b68:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    3b6c:	4770      	bx	lr

00003b6e <unpend_thread_no_timeout>:
{
    3b6e:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    3b70:	f7ff fff5 	bl	3b5e <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    3b74:	7b43      	ldrb	r3, [r0, #13]
    3b76:	f023 0302 	bic.w	r3, r3, #2
    3b7a:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    3b7c:	2300      	movs	r3, #0
    3b7e:	6083      	str	r3, [r0, #8]
}
    3b80:	bd08      	pop	{r3, pc}

00003b82 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    3b82:	4603      	mov	r3, r0
    3b84:	b920      	cbnz	r0, 3b90 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3b86:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    3b8a:	b90a      	cbnz	r2, 3b90 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    3b8c:	f7fd bc92 	b.w	14b4 <arch_swap>
    3b90:	f383 8811 	msr	BASEPRI, r3
    3b94:	f3bf 8f6f 	isb	sy
}
    3b98:	4770      	bx	lr

00003b9a <z_reschedule_unlocked>:
	__asm__ volatile(
    3b9a:	f04f 0320 	mov.w	r3, #32
    3b9e:	f3ef 8011 	mrs	r0, BASEPRI
    3ba2:	f383 8811 	msr	BASEPRI, r3
    3ba6:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    3baa:	f7ff bfea 	b.w	3b82 <z_reschedule_irqlock>

00003bae <z_priq_dumb_best>:
{
    3bae:	4603      	mov	r3, r0
	return list->head == list;
    3bb0:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3bb2:	4283      	cmp	r3, r0
    3bb4:	d003      	beq.n	3bbe <z_priq_dumb_best+0x10>
	if (n != NULL) {
    3bb6:	2800      	cmp	r0, #0
    3bb8:	bf38      	it	cc
    3bba:	2000      	movcc	r0, #0
    3bbc:	4770      	bx	lr
	struct k_thread *thread = NULL;
    3bbe:	2000      	movs	r0, #0
}
    3bc0:	4770      	bx	lr

00003bc2 <add_to_waitq_locked>:
{
    3bc2:	b538      	push	{r3, r4, r5, lr}
    3bc4:	4604      	mov	r4, r0
    3bc6:	460d      	mov	r5, r1
	unready_thread(thread);
    3bc8:	f7fe feca 	bl	2960 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    3bcc:	7b63      	ldrb	r3, [r4, #13]
    3bce:	f043 0302 	orr.w	r3, r3, #2
    3bd2:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    3bd4:	b1b5      	cbz	r5, 3c04 <add_to_waitq_locked+0x42>
	return list->head == list;
    3bd6:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    3bd8:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3bda:	429d      	cmp	r5, r3
    3bdc:	bf08      	it	eq
    3bde:	2300      	moveq	r3, #0
    3be0:	2b00      	cmp	r3, #0
    3be2:	bf38      	it	cc
    3be4:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3be6:	b19b      	cbz	r3, 3c10 <add_to_waitq_locked+0x4e>
	int32_t b1 = thread_1->base.prio;
    3be8:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    3bec:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    3bf0:	4291      	cmp	r1, r2
    3bf2:	d008      	beq.n	3c06 <add_to_waitq_locked+0x44>
		return b2 - b1;
    3bf4:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    3bf6:	2a00      	cmp	r2, #0
    3bf8:	dd05      	ble.n	3c06 <add_to_waitq_locked+0x44>
	sys_dnode_t *const prev = successor->prev;
    3bfa:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    3bfc:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    3c00:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    3c02:	605c      	str	r4, [r3, #4]
}
    3c04:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    3c06:	686a      	ldr	r2, [r5, #4]
    3c08:	4293      	cmp	r3, r2
    3c0a:	d001      	beq.n	3c10 <add_to_waitq_locked+0x4e>
    3c0c:	681b      	ldr	r3, [r3, #0]
    3c0e:	e7ea      	b.n	3be6 <add_to_waitq_locked+0x24>
	sys_dnode_t *const tail = list->tail;
    3c10:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    3c12:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    3c16:	601c      	str	r4, [r3, #0]
	list->tail = node;
    3c18:	606c      	str	r4, [r5, #4]
    3c1a:	e7f3      	b.n	3c04 <add_to_waitq_locked+0x42>

00003c1c <z_ready_thread>:
{
    3c1c:	b510      	push	{r4, lr}
    3c1e:	f04f 0320 	mov.w	r3, #32
    3c22:	f3ef 8411 	mrs	r4, BASEPRI
    3c26:	f383 8811 	msr	BASEPRI, r3
    3c2a:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    3c2e:	f7fe fff1 	bl	2c14 <ready_thread>
	__asm__ volatile(
    3c32:	f384 8811 	msr	BASEPRI, r4
    3c36:	f3bf 8f6f 	isb	sy
}
    3c3a:	bd10      	pop	{r4, pc}

00003c3c <z_thread_timeout>:
{
    3c3c:	b510      	push	{r4, lr}
    3c3e:	4601      	mov	r1, r0
	__asm__ volatile(
    3c40:	f04f 0320 	mov.w	r3, #32
    3c44:	f3ef 8411 	mrs	r4, BASEPRI
    3c48:	f383 8811 	msr	BASEPRI, r3
    3c4c:	f3bf 8f6f 	isb	sy
		if (!killed) {
    3c50:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    3c54:	f013 0f28 	tst.w	r3, #40	; 0x28
    3c58:	d10d      	bne.n	3c76 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    3c5a:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    3c5e:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    3c60:	b10b      	cbz	r3, 3c66 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    3c62:	f7ff ff84 	bl	3b6e <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    3c66:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    3c6a:	f023 0314 	bic.w	r3, r3, #20
    3c6e:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    3c72:	f7fe ffcf 	bl	2c14 <ready_thread>
	__asm__ volatile(
    3c76:	f384 8811 	msr	BASEPRI, r4
    3c7a:	f3bf 8f6f 	isb	sy
}
    3c7e:	bd10      	pop	{r4, pc}

00003c80 <z_unpend_first_thread>:
{
    3c80:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    3c82:	f04f 0320 	mov.w	r3, #32
    3c86:	f3ef 8511 	mrs	r5, BASEPRI
    3c8a:	f383 8811 	msr	BASEPRI, r3
    3c8e:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    3c92:	f7ff ff8c 	bl	3bae <z_priq_dumb_best>
		if (thread != NULL) {
    3c96:	4604      	mov	r4, r0
    3c98:	b120      	cbz	r0, 3ca4 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
    3c9a:	f7ff ff68 	bl	3b6e <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    3c9e:	3018      	adds	r0, #24
    3ca0:	f000 f810 	bl	3cc4 <z_abort_timeout>
	__asm__ volatile(
    3ca4:	f385 8811 	msr	BASEPRI, r5
    3ca8:	f3bf 8f6f 	isb	sy
}
    3cac:	4620      	mov	r0, r4
    3cae:	bd38      	pop	{r3, r4, r5, pc}

00003cb0 <k_is_in_isr>:
    3cb0:	f3ef 8005 	mrs	r0, IPSR
}
    3cb4:	3800      	subs	r0, #0
    3cb6:	bf18      	it	ne
    3cb8:	2001      	movne	r0, #1
    3cba:	4770      	bx	lr

00003cbc <z_impl_k_busy_wait>:
	if (usec_to_wait == 0U) {
    3cbc:	b108      	cbz	r0, 3cc2 <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
    3cbe:	f7fd bee3 	b.w	1a88 <arch_busy_wait>
}
    3cc2:	4770      	bx	lr

00003cc4 <z_abort_timeout>:
{
    3cc4:	b510      	push	{r4, lr}
	__asm__ volatile(
    3cc6:	f04f 0220 	mov.w	r2, #32
    3cca:	f3ef 8411 	mrs	r4, BASEPRI
    3cce:	f382 8811 	msr	BASEPRI, r2
    3cd2:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    3cd6:	6803      	ldr	r3, [r0, #0]
    3cd8:	b13b      	cbz	r3, 3cea <z_abort_timeout+0x26>
			remove_timeout(to);
    3cda:	f7ff fa1d 	bl	3118 <remove_timeout>
			ret = 0;
    3cde:	2000      	movs	r0, #0
	__asm__ volatile(
    3ce0:	f384 8811 	msr	BASEPRI, r4
    3ce4:	f3bf 8f6f 	isb	sy
}
    3ce8:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    3cea:	f06f 0015 	mvn.w	r0, #21
    3cee:	e7f7      	b.n	3ce0 <z_abort_timeout+0x1c>

00003cf0 <z_get_next_timeout_expiry>:
{
    3cf0:	b510      	push	{r4, lr}
	__asm__ volatile(
    3cf2:	f04f 0320 	mov.w	r3, #32
    3cf6:	f3ef 8411 	mrs	r4, BASEPRI
    3cfa:	f383 8811 	msr	BASEPRI, r3
    3cfe:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    3d02:	f7ff fa23 	bl	314c <next_timeout>
	__asm__ volatile(
    3d06:	f384 8811 	msr	BASEPRI, r4
    3d0a:	f3bf 8f6f 	isb	sy
}
    3d0e:	bd10      	pop	{r4, pc}

00003d10 <z_set_timeout_expiry>:
{
    3d10:	b570      	push	{r4, r5, r6, lr}
    3d12:	4604      	mov	r4, r0
    3d14:	460d      	mov	r5, r1
	__asm__ volatile(
    3d16:	f04f 0320 	mov.w	r3, #32
    3d1a:	f3ef 8611 	mrs	r6, BASEPRI
    3d1e:	f383 8811 	msr	BASEPRI, r3
    3d22:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    3d26:	f7ff fa11 	bl	314c <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    3d2a:	2801      	cmp	r0, #1
    3d2c:	dd05      	ble.n	3d3a <z_set_timeout_expiry+0x2a>
    3d2e:	42a0      	cmp	r0, r4
    3d30:	db03      	blt.n	3d3a <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    3d32:	4629      	mov	r1, r5
    3d34:	4620      	mov	r0, r4
    3d36:	f7fd fb0d 	bl	1354 <sys_clock_set_timeout>
	__asm__ volatile(
    3d3a:	f386 8811 	msr	BASEPRI, r6
    3d3e:	f3bf 8f6f 	isb	sy
}
    3d42:	bd70      	pop	{r4, r5, r6, pc}

00003d44 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    3d44:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    3d46:	f7ff fb29 	bl	339c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    3d4a:	bd08      	pop	{r3, pc}

00003d4c <z_device_state_init>:
}
    3d4c:	4770      	bx	lr

00003d4e <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    3d4e:	4770      	bx	lr
