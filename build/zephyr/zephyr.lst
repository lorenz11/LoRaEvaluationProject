
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	20003140 	.word	0x20003140
}
   4:	00004a51 	.word	0x00004a51
   8:	00016a37 	.word	0x00016a37
   c:	00004a81 	.word	0x00004a81
  10:	00004a81 	.word	0x00004a81
  14:	00004a81 	.word	0x00004a81
  18:	00004a81 	.word	0x00004a81
	...
  2c:	00004851 	.word	0x00004851
  30:	00004a81 	.word	0x00004a81
  34:	00000000 	.word	0x00000000
  38:	00004809 	.word	0x00004809
  3c:	00016675 	.word	0x00016675

00000040 <_irq_vector_table>:
  40:	00004a11 00011351 00004a11 00004a11     .J..Q....J...J..
  50:	00004a11 00004a11 00004a11 00004a11     .J...J...J...J..
  60:	00004a11 00004a11 00004a11 00004a11     .J...J...J...J..
  70:	00004a11 00004a11 00004a11 00004a11     .J...J...J...J..
  80:	00004a11 00004a11 00004a11 00004a11     .J...J...J...J..
  90:	00004a11 00004a11 00004a11 00004a11     .J...J...J...J..
  a0:	00004a11 00004a11 00004a11 00004a11     .J...J...J...J..
  b0:	00004a11 00004a11 00004a11 00004a11     .J...J...J...J..
  c0:	00004a11 00004a11 00004a11 00004a11     .J...J...J...J..
  d0:	00004a11 00004a11 00004a11 00004a11     .J...J...J...J..
  e0:	00004a11 00004a11 00004a11 00004a11     .J...J...J...J..
  f0:	00004a11 00004a11 00004a11 00004a11     .J...J...J...J..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     114:	f000 b96e 	b.w	3f4 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f806 	bl	130 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__udivmoddi4>:
     130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     134:	9d08      	ldr	r5, [sp, #32]
     136:	460e      	mov	r6, r1
     138:	4604      	mov	r4, r0
     13a:	468c      	mov	ip, r1
     13c:	2b00      	cmp	r3, #0
     13e:	f040 8081 	bne.w	244 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x84>
     142:	428a      	cmp	r2, r1
     144:	4617      	mov	r7, r2
     146:	d945      	bls.n	1d4 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x14>
     148:	fab2 f282 	clz	r2, r2
     14c:	b14a      	cbz	r2, 162 <CONFIG_IDLE_STACK_SIZE+0x22>
     14e:	f1c2 0120 	rsb	r1, r2, #32
     152:	fa06 f302 	lsl.w	r3, r6, r2
     156:	fa20 f101 	lsr.w	r1, r0, r1
     15a:	4097      	lsls	r7, r2
     15c:	ea41 0c03 	orr.w	ip, r1, r3
     160:	4094      	lsls	r4, r2
     162:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     166:	0c23      	lsrs	r3, r4, #16
     168:	fbbc f6fe 	udiv	r6, ip, lr
     16c:	b2b9      	uxth	r1, r7
     16e:	fb0e cc16 	mls	ip, lr, r6, ip
     172:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     176:	fb06 f001 	mul.w	r0, r6, r1
     17a:	4298      	cmp	r0, r3
     17c:	d909      	bls.n	192 <CONFIG_IDLE_STACK_SIZE+0x52>
     17e:	18fb      	adds	r3, r7, r3
     180:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
     184:	f080 8115 	bcs.w	3b2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x1f2>
     188:	4298      	cmp	r0, r3
     18a:	f240 8112 	bls.w	3b2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x1f2>
     18e:	3e02      	subs	r6, #2
     190:	443b      	add	r3, r7
     192:	1a1b      	subs	r3, r3, r0
     194:	b2a4      	uxth	r4, r4
     196:	fbb3 f0fe 	udiv	r0, r3, lr
     19a:	fb0e 3310 	mls	r3, lr, r0, r3
     19e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1a2:	fb00 f101 	mul.w	r1, r0, r1
     1a6:	42a1      	cmp	r1, r4
     1a8:	d909      	bls.n	1be <CONFIG_IDLE_STACK_SIZE+0x7e>
     1aa:	193c      	adds	r4, r7, r4
     1ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     1b0:	f080 8101 	bcs.w	3b6 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x1f6>
     1b4:	42a1      	cmp	r1, r4
     1b6:	f240 80fe 	bls.w	3b6 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x1f6>
     1ba:	3802      	subs	r0, #2
     1bc:	443c      	add	r4, r7
     1be:	1a64      	subs	r4, r4, r1
     1c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     1c4:	2100      	movs	r1, #0
     1c6:	b11d      	cbz	r5, 1d0 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x10>
     1c8:	40d4      	lsrs	r4, r2
     1ca:	2300      	movs	r3, #0
     1cc:	e9c5 4300 	strd	r4, r3, [r5]
     1d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d4:	b902      	cbnz	r2, 1d8 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x18>
     1d6:	deff      	udf	#255	; 0xff
     1d8:	fab2 f282 	clz	r2, r2
     1dc:	2a00      	cmp	r2, #0
     1de:	d14f      	bne.n	280 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0xc0>
     1e0:	1bcb      	subs	r3, r1, r7
     1e2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1e6:	fa1f f887 	uxth.w	r8, r7
     1ea:	2101      	movs	r1, #1
     1ec:	fbb3 fcfe 	udiv	ip, r3, lr
     1f0:	0c26      	lsrs	r6, r4, #16
     1f2:	fb0e 331c 	mls	r3, lr, ip, r3
     1f6:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
     1fa:	fb08 f30c 	mul.w	r3, r8, ip
     1fe:	42b3      	cmp	r3, r6
     200:	d907      	bls.n	212 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x52>
     202:	19be      	adds	r6, r7, r6
     204:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     208:	d202      	bcs.n	210 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x50>
     20a:	42b3      	cmp	r3, r6
     20c:	f200 80eb 	bhi.w	3e6 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x226>
     210:	4684      	mov	ip, r0
     212:	1af6      	subs	r6, r6, r3
     214:	b2a3      	uxth	r3, r4
     216:	fbb6 f0fe 	udiv	r0, r6, lr
     21a:	fb0e 6610 	mls	r6, lr, r0, r6
     21e:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
     222:	fb08 f800 	mul.w	r8, r8, r0
     226:	45a0      	cmp	r8, r4
     228:	d907      	bls.n	23a <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x7a>
     22a:	193c      	adds	r4, r7, r4
     22c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     230:	d202      	bcs.n	238 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x78>
     232:	45a0      	cmp	r8, r4
     234:	f200 80d2 	bhi.w	3dc <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x21c>
     238:	4618      	mov	r0, r3
     23a:	eba4 0408 	sub.w	r4, r4, r8
     23e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     242:	e7c0      	b.n	1c6 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x6>
     244:	428b      	cmp	r3, r1
     246:	d908      	bls.n	25a <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x9a>
     248:	2d00      	cmp	r5, #0
     24a:	f000 80af 	beq.w	3ac <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x1ec>
     24e:	2100      	movs	r1, #0
     250:	e9c5 0600 	strd	r0, r6, [r5]
     254:	4608      	mov	r0, r1
     256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     25a:	fab3 f183 	clz	r1, r3
     25e:	2900      	cmp	r1, #0
     260:	d149      	bne.n	2f6 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x136>
     262:	42b3      	cmp	r3, r6
     264:	d302      	bcc.n	26c <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0xac>
     266:	4282      	cmp	r2, r0
     268:	f200 80bb 	bhi.w	3e2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x222>
     26c:	1a84      	subs	r4, r0, r2
     26e:	eb66 0303 	sbc.w	r3, r6, r3
     272:	2001      	movs	r0, #1
     274:	469c      	mov	ip, r3
     276:	2d00      	cmp	r5, #0
     278:	d0aa      	beq.n	1d0 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x10>
     27a:	e9c5 4c00 	strd	r4, ip, [r5]
     27e:	e7a7      	b.n	1d0 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x10>
     280:	f1c2 0320 	rsb	r3, r2, #32
     284:	4097      	lsls	r7, r2
     286:	40d8      	lsrs	r0, r3
     288:	4091      	lsls	r1, r2
     28a:	40de      	lsrs	r6, r3
     28c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     290:	4308      	orrs	r0, r1
     292:	ea4f 4c10 	mov.w	ip, r0, lsr #16
     296:	fbb6 f1fe 	udiv	r1, r6, lr
     29a:	fa1f f887 	uxth.w	r8, r7
     29e:	fb0e 6611 	mls	r6, lr, r1, r6
     2a2:	ea4c 4606 	orr.w	r6, ip, r6, lsl #16
     2a6:	fb01 f308 	mul.w	r3, r1, r8
     2aa:	42b3      	cmp	r3, r6
     2ac:	fa04 f402 	lsl.w	r4, r4, r2
     2b0:	d909      	bls.n	2c6 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x106>
     2b2:	19be      	adds	r6, r7, r6
     2b4:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
     2b8:	f080 808e 	bcs.w	3d8 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x218>
     2bc:	42b3      	cmp	r3, r6
     2be:	f240 808b 	bls.w	3d8 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x218>
     2c2:	3902      	subs	r1, #2
     2c4:	443e      	add	r6, r7
     2c6:	1af3      	subs	r3, r6, r3
     2c8:	b286      	uxth	r6, r0
     2ca:	fbb3 f0fe 	udiv	r0, r3, lr
     2ce:	fb0e 3310 	mls	r3, lr, r0, r3
     2d2:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
     2d6:	fb00 f308 	mul.w	r3, r0, r8
     2da:	42b3      	cmp	r3, r6
     2dc:	d907      	bls.n	2ee <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x12e>
     2de:	19be      	adds	r6, r7, r6
     2e0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     2e4:	d274      	bcs.n	3d0 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x210>
     2e6:	42b3      	cmp	r3, r6
     2e8:	d972      	bls.n	3d0 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x210>
     2ea:	3802      	subs	r0, #2
     2ec:	443e      	add	r6, r7
     2ee:	1af3      	subs	r3, r6, r3
     2f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2f4:	e77a      	b.n	1ec <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x2c>
     2f6:	f1c1 0720 	rsb	r7, r1, #32
     2fa:	fa03 f401 	lsl.w	r4, r3, r1
     2fe:	fa22 f307 	lsr.w	r3, r2, r7
     302:	431c      	orrs	r4, r3
     304:	fa20 f907 	lsr.w	r9, r0, r7
     308:	fa06 f301 	lsl.w	r3, r6, r1
     30c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
     310:	40fe      	lsrs	r6, r7
     312:	ea49 0903 	orr.w	r9, r9, r3
     316:	ea4f 4319 	mov.w	r3, r9, lsr #16
     31a:	fbb6 fefc 	udiv	lr, r6, ip
     31e:	fa1f f884 	uxth.w	r8, r4
     322:	fb0c 661e 	mls	r6, ip, lr, r6
     326:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
     32a:	fb0e fa08 	mul.w	sl, lr, r8
     32e:	45b2      	cmp	sl, r6
     330:	fa02 f201 	lsl.w	r2, r2, r1
     334:	fa00 f301 	lsl.w	r3, r0, r1
     338:	d908      	bls.n	34c <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x18c>
     33a:	19a6      	adds	r6, r4, r6
     33c:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
     340:	d248      	bcs.n	3d4 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x214>
     342:	45b2      	cmp	sl, r6
     344:	d946      	bls.n	3d4 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x214>
     346:	f1ae 0e02 	sub.w	lr, lr, #2
     34a:	4426      	add	r6, r4
     34c:	eba6 060a 	sub.w	r6, r6, sl
     350:	fa1f f989 	uxth.w	r9, r9
     354:	fbb6 f0fc 	udiv	r0, r6, ip
     358:	fb0c 6610 	mls	r6, ip, r0, r6
     35c:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
     360:	fb00 f808 	mul.w	r8, r0, r8
     364:	45b0      	cmp	r8, r6
     366:	d907      	bls.n	378 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x1b8>
     368:	19a6      	adds	r6, r4, r6
     36a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     36e:	d22d      	bcs.n	3cc <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x20c>
     370:	45b0      	cmp	r8, r6
     372:	d92b      	bls.n	3cc <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x20c>
     374:	3802      	subs	r0, #2
     376:	4426      	add	r6, r4
     378:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     37c:	eba6 0608 	sub.w	r6, r6, r8
     380:	fba0 8902 	umull	r8, r9, r0, r2
     384:	454e      	cmp	r6, r9
     386:	46c4      	mov	ip, r8
     388:	46ce      	mov	lr, r9
     38a:	d318      	bcc.n	3be <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x1fe>
     38c:	d015      	beq.n	3ba <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x1fa>
     38e:	b375      	cbz	r5, 3ee <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x22e>
     390:	ebb3 020c 	subs.w	r2, r3, ip
     394:	eb66 060e 	sbc.w	r6, r6, lr
     398:	fa06 f707 	lsl.w	r7, r6, r7
     39c:	fa22 f301 	lsr.w	r3, r2, r1
     3a0:	40ce      	lsrs	r6, r1
     3a2:	431f      	orrs	r7, r3
     3a4:	e9c5 7600 	strd	r7, r6, [r5]
     3a8:	2100      	movs	r1, #0
     3aa:	e711      	b.n	1d0 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x10>
     3ac:	4629      	mov	r1, r5
     3ae:	4628      	mov	r0, r5
     3b0:	e70e      	b.n	1d0 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x10>
     3b2:	4666      	mov	r6, ip
     3b4:	e6ed      	b.n	192 <CONFIG_IDLE_STACK_SIZE+0x52>
     3b6:	4618      	mov	r0, r3
     3b8:	e701      	b.n	1be <CONFIG_IDLE_STACK_SIZE+0x7e>
     3ba:	4543      	cmp	r3, r8
     3bc:	d2e7      	bcs.n	38e <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x1ce>
     3be:	ebb8 0c02 	subs.w	ip, r8, r2
     3c2:	eb69 0404 	sbc.w	r4, r9, r4
     3c6:	3801      	subs	r0, #1
     3c8:	46a6      	mov	lr, r4
     3ca:	e7e0      	b.n	38e <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x1ce>
     3cc:	4660      	mov	r0, ip
     3ce:	e7d3      	b.n	378 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x1b8>
     3d0:	4660      	mov	r0, ip
     3d2:	e78c      	b.n	2ee <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x12e>
     3d4:	4686      	mov	lr, r0
     3d6:	e7b9      	b.n	34c <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x18c>
     3d8:	4661      	mov	r1, ip
     3da:	e774      	b.n	2c6 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x106>
     3dc:	3802      	subs	r0, #2
     3de:	443c      	add	r4, r7
     3e0:	e72b      	b.n	23a <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x7a>
     3e2:	4608      	mov	r0, r1
     3e4:	e747      	b.n	276 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0xb6>
     3e6:	f1ac 0c02 	sub.w	ip, ip, #2
     3ea:	443e      	add	r6, r7
     3ec:	e711      	b.n	212 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x52>
     3ee:	4629      	mov	r1, r5
     3f0:	e6ee      	b.n	1d0 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x10>
     3f2:	bf00      	nop

000003f4 <__aeabi_idiv0>:
     3f4:	4770      	bx	lr
     3f6:	bf00      	nop

000003f8 <ll_scan_params_set>:

static struct ll_scan_set ll_scan[BT_CTLR_SCAN_SET];

uint8_t ll_scan_params_set(uint8_t type, uint16_t interval, uint16_t window,
			uint8_t own_addr_type, uint8_t filter_policy)
{
     3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
struct ll_scan_set *ull_scan_is_disabled_get(uint8_t handle)
{
	struct ll_scan_set *scan;

	scan = ull_scan_set_get(handle);
	if (!scan || scan->is_enabled) {
     3fa:	4e19      	ldr	r6, [pc, #100]	; (460 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x14>)
{
     3fc:	f89d 4018 	ldrb.w	r4, [sp, #24]
	if (!scan || scan->is_enabled) {
     400:	f896 5044 	ldrb.w	r5, [r6, #68]	; 0x44
     404:	f015 0701 	ands.w	r7, r5, #1
     408:	d122      	bne.n	450 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x4>
	lll->filter_policy = filter_policy;
     40a:	f896 e032 	ldrb.w	lr, [r6, #50]	; 0x32
	lll->interval = interval;
     40e:	87b1      	strh	r1, [r6, #60]	; 0x3c
	lll->filter_policy = filter_policy;
     410:	0140      	lsls	r0, r0, #5
     412:	00e1      	lsls	r1, r4, #3
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
     414:	f8df c04c 	ldr.w	ip, [pc, #76]	; 464 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x18>
	lll->filter_policy = filter_policy;
     418:	f000 0420 	and.w	r4, r0, #32
     41c:	f001 0118 	and.w	r1, r1, #24
     420:	f02e 0e38 	bic.w	lr, lr, #56	; 0x38
     424:	430c      	orrs	r4, r1
	scan->own_addr_type = own_addr_type;
     426:	f363 0542 	bfi	r5, r3, #1, #2
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
     42a:	fba2 010c 	umull	r0, r1, r2, ip
	lll->filter_policy = filter_policy;
     42e:	ea44 040e 	orr.w	r4, r4, lr
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
     432:	2391      	movs	r3, #145	; 0x91
     434:	fb03 1102 	mla	r1, r3, r2, r1
	scan->own_addr_type = own_addr_type;
     438:	f886 5044 	strb.w	r5, [r6, #68]	; 0x44
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
     43c:	a306      	add	r3, pc, #24	; (adr r3, 458 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xc>)
     43e:	e9d3 2300 	ldrd	r2, r3, [r3]
	lll->filter_policy = filter_policy;
     442:	f886 4032 	strb.w	r4, [r6, #50]	; 0x32
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
     446:	f7ff fe5b 	bl	100 <__aeabi_uldivmod>
     44a:	6430      	str	r0, [r6, #64]	; 0x40
}
     44c:	4638      	mov	r0, r7
     44e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
     450:	270c      	movs	r7, #12
}
     452:	4638      	mov	r0, r7
     454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     456:	bf00      	nop
     458:	1afd498d 	.word	0x1afd498d
     45c:	00000007 	.word	0x00000007
     460:	200019b0 	.word	0x200019b0
     464:	84e72a00 	.word	0x84e72a00

00000468 <ull_scan_params_set>:
{
     468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     46a:	4604      	mov	r4, r0
     46c:	f89d 0018 	ldrb.w	r0, [sp, #24]
	lll->filter_policy = filter_policy;
     470:	7da5      	ldrb	r5, [r4, #22]
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
     472:	4e0f      	ldr	r6, [pc, #60]	; (4b0 <ull_scan_params_set+0x48>)
	lll->interval = interval;
     474:	8422      	strh	r2, [r4, #32]
	lll->filter_policy = filter_policy;
     476:	0149      	lsls	r1, r1, #5
     478:	00c0      	lsls	r0, r0, #3
     47a:	f000 0018 	and.w	r0, r0, #24
     47e:	f001 0120 	and.w	r1, r1, #32
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
     482:	fba3 6706 	umull	r6, r7, r3, r6
	lll->filter_policy = filter_policy;
     486:	4301      	orrs	r1, r0
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
     488:	2291      	movs	r2, #145	; 0x91
	lll->filter_policy = filter_policy;
     48a:	f025 0538 	bic.w	r5, r5, #56	; 0x38
     48e:	4329      	orrs	r1, r5
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
     490:	fb02 7703 	mla	r7, r2, r3, r7
	lll->filter_policy = filter_policy;
     494:	75a1      	strb	r1, [r4, #22]
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
     496:	a304      	add	r3, pc, #16	; (adr r3, 4a8 <ull_scan_params_set+0x40>)
     498:	e9d3 2300 	ldrd	r2, r3, [r3]
     49c:	4630      	mov	r0, r6
     49e:	4639      	mov	r1, r7
     4a0:	f7ff fe2e 	bl	100 <__aeabi_uldivmod>
     4a4:	6260      	str	r0, [r4, #36]	; 0x24
}
     4a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     4a8:	1afd498d 	.word	0x1afd498d
     4ac:	00000007 	.word	0x00000007
     4b0:	84e72a00 	.word	0x84e72a00
     4b4:	00000000 	.word	0x00000000

000004b8 <ull_scan_enable>:
{
     4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	lll->chan = 0;
     4bc:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
{
     4c0:	4604      	mov	r4, r0
	ll_addr_get(lll->init_addr_type, lll->init_addr);
     4c2:	f100 0135 	add.w	r1, r0, #53	; 0x35
	lll->init_addr_type = scan->own_addr_type;
     4c6:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
     4ca:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
     4ce:	f3c0 0040 	ubfx	r0, r0, #1, #1
     4d2:	f360 1386 	bfi	r3, r0, #6, #1
{
     4d6:	b08d      	sub	sp, #52	; 0x34
	lll->init_addr_type = scan->own_addr_type;
     4d8:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	ll_addr_get(lll->init_addr_type, lll->init_addr);
     4dc:	f009 fd54 	bl	9f88 <ll_addr_get>
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
     4e0:	8fa5      	ldrh	r5, [r4, #60]	; 0x3c
     4e2:	4849      	ldr	r0, [pc, #292]	; (608 <CONFIG_BT_COMPANY_ID+0x17>)

static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
     4e4:	61e4      	str	r4, [r4, #28]
     4e6:	fba5 0100 	umull	r0, r1, r5, r0
     4ea:	2391      	movs	r3, #145	; 0x91
     4ec:	fb03 1105 	mla	r1, r3, r5, r1
	return hdr->ref--;
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->disabled_cb = hdr->disabled_param = NULL;
     4f0:	2500      	movs	r5, #0
     4f2:	a343      	add	r3, pc, #268	; (adr r3, 600 <CONFIG_BT_COMPANY_ID+0xf>)
     4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
     4f8:	e9c4 5505 	strd	r5, r5, [r4, #20]
     4fc:	f7ff fe00 	bl	100 <__aeabi_uldivmod>
	if ((lll->ticks_window +
     500:	6c23      	ldr	r3, [r4, #64]	; 0x40
	scan->evt.ticks_active_to_start = 0U;
     502:	6065      	str	r5, [r4, #4]
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
     504:	4606      	mov	r6, r0
	if ((lll->ticks_window +
     506:	3309      	adds	r3, #9
	    (ticks_interval -
     508:	f1a6 0231 	sub.w	r2, r6, #49	; 0x31
	if ((lll->ticks_window +
     50c:	4293      	cmp	r3, r2
	scan->evt.ticks_xtal_to_start =
     50e:	f04f 0131 	mov.w	r1, #49	; 0x31
	scan->evt.ticks_preempt_to_start =
     512:	60a5      	str	r5, [r4, #8]
		lll->ticks_window = 0U;
     514:	bf28      	it	cs
     516:	6425      	strcs	r5, [r4, #64]	; 0x40
	scan->evt.ticks_xtal_to_start =
     518:	6021      	str	r1, [r4, #0]
		scan->evt.ticks_slot =
     51a:	bf34      	ite	cc
     51c:	60e3      	strcc	r3, [r4, #12]
			scan->evt.ticks_slot = ticks_interval -
     51e:	60e2      	strcs	r2, [r4, #12]
	ticks_anchor = ticker_ticks_now_get();
     520:	f009 fd2c 	bl	9f7c <ticker_ticks_now_get>
	if (!lll->conn) {
     524:	6a25      	ldr	r5, [r4, #32]
	ticks_anchor = ticker_ticks_now_get();
     526:	4680      	mov	r8, r0
		ull_sched_after_mstr_slot_get(TICKER_USER_ID_THREAD,
     528:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
	if (!lll->conn) {
     52c:	2d00      	cmp	r5, #0
     52e:	d04c      	beq.n	5ca <ull_scan_enable+0x112>
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     530:	f8cd 9020 	str.w	r9, [sp, #32]
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
     534:	4d35      	ldr	r5, [pc, #212]	; (60c <CONFIG_BT_COMPANY_ID+0x1b>)
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
     536:	f8b4 a03c 	ldrh.w	sl, [r4, #60]	; 0x3c
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
     53a:	4935      	ldr	r1, [pc, #212]	; (610 <CONFIG_BT_COMPANY_ID+0x1f>)
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
     53c:	4832      	ldr	r0, [pc, #200]	; (608 <CONFIG_BT_COMPANY_ID+0x17>)
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     53e:	68e2      	ldr	r2, [r4, #12]
     540:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 61c <CONFIG_BT_COMPANY_ID+0x2b>
     544:	9204      	str	r2, [sp, #16]
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
     546:	1b65      	subs	r5, r4, r5
     548:	fba1 3505 	umull	r3, r5, r1, r5
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
     54c:	fbaa 0100 	umull	r0, r1, sl, r0
     550:	2391      	movs	r3, #145	; 0x91
     552:	fb03 110a 	mla	r1, r3, sl, r1
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     556:	4b2f      	ldr	r3, [pc, #188]	; (614 <CONFIG_BT_COMPANY_ID+0x23>)
     558:	9305      	str	r3, [sp, #20]
     55a:	f04f 0a00 	mov.w	sl, #0
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
     55e:	a328      	add	r3, pc, #160	; (adr r3, 600 <CONFIG_BT_COMPANY_ID+0xf>)
     560:	e9d3 2300 	ldrd	r2, r3, [r3]
	ret_cb = TICKER_STATUS_BUSY;
     564:	2702      	movs	r7, #2
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     566:	f8cd c01c 	str.w	ip, [sp, #28]
     56a:	9406      	str	r4, [sp, #24]
	ret_cb = TICKER_STATUS_BUSY;
     56c:	970b      	str	r7, [sp, #44]	; 0x2c
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     56e:	f8cd a00c 	str.w	sl, [sp, #12]
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
     572:	f7ff fdc5 	bl	100 <__aeabi_uldivmod>
     576:	4610      	mov	r0, r2
     578:	4619      	mov	r1, r3
     57a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     57e:	2300      	movs	r3, #0
     580:	f7ff fdbe 	bl	100 <__aeabi_uldivmod>
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
     584:	092d      	lsrs	r5, r5, #4
			   TICKER_USER_ID_THREAD, TICKER_ID_SCAN_BASE + handle,
     586:	3502      	adds	r5, #2
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     588:	b2ed      	uxtb	r5, r5
     58a:	462a      	mov	r2, r5
     58c:	9002      	str	r0, [sp, #8]
     58e:	4643      	mov	r3, r8
     590:	2103      	movs	r1, #3
     592:	f8cd a000 	str.w	sl, [sp]
     596:	4650      	mov	r0, sl
     598:	9601      	str	r6, [sp, #4]
     59a:	f009 fbc3 	bl	9d24 <ticker_start>
	ret = ull_ticker_status_take(ret, &ret_cb);
     59e:	4649      	mov	r1, r9
     5a0:	f00c f8d2 	bl	c748 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
     5a4:	4605      	mov	r5, r0
     5a6:	b960      	cbnz	r0, 5c2 <ull_scan_enable+0x10a>
	scan->is_enabled = 1U;
     5a8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
     5ac:	f043 0301 	orr.w	r3, r3, #1
		ull_filter_adv_scan_state_cb(BIT(1));
     5b0:	4638      	mov	r0, r7
	scan->is_enabled = 1U;
     5b2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		ull_filter_adv_scan_state_cb(BIT(1));
     5b6:	f010 f907 	bl	107c8 <ull_filter_adv_scan_state_cb>
	return 0;
     5ba:	4628      	mov	r0, r5
}
     5bc:	b00d      	add	sp, #52	; 0x34
     5be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
     5c2:	200c      	movs	r0, #12
}
     5c4:	b00d      	add	sp, #52	; 0x34
     5c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ull_sched_after_mstr_slot_get(TICKER_USER_ID_THREAD,
     5ca:	68e1      	ldr	r1, [r4, #12]
		uint32_t ticks_ref = 0U;
     5cc:	950a      	str	r5, [sp, #40]	; 0x28
		ull_sched_after_mstr_slot_get(TICKER_USER_ID_THREAD,
     5ce:	464b      	mov	r3, r9
     5d0:	aa0a      	add	r2, sp, #40	; 0x28
     5d2:	2003      	movs	r0, #3
		uint32_t offset_us = 0U;
     5d4:	950b      	str	r5, [sp, #44]	; 0x2c
		ull_sched_after_mstr_slot_get(TICKER_USER_ID_THREAD,
     5d6:	f002 fa0b 	bl	29f0 <ull_sched_after_mstr_slot_get>
		if (offset_us) {
     5da:	990b      	ldr	r1, [sp, #44]	; 0x2c
     5dc:	2900      	cmp	r1, #0
     5de:	d0a7      	beq.n	530 <ull_scan_enable+0x78>
				       HAL_TICKER_US_TO_TICKS(offset_us);
     5e0:	480d      	ldr	r0, [pc, #52]	; (618 <CONFIG_BT_COMPANY_ID+0x27>)
     5e2:	a307      	add	r3, pc, #28	; (adr r3, 600 <CONFIG_BT_COMPANY_ID+0xf>)
     5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
     5e8:	fba1 0100 	umull	r0, r1, r1, r0
     5ec:	f7ff fd88 	bl	100 <__aeabi_uldivmod>
			ticks_anchor = ticks_ref +
     5f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				       HAL_TICKER_US_TO_TICKS(offset_us);
     5f2:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
			ticks_anchor = ticks_ref +
     5f6:	4498      	add	r8, r3
     5f8:	e79a      	b.n	530 <ull_scan_enable+0x78>
     5fa:	bf00      	nop
     5fc:	f3af 8000 	nop.w
     600:	1afd498d 	.word	0x1afd498d
     604:	00000007 	.word	0x00000007
     608:	84e72a00 	.word	0x84e72a00
     60c:	200019b0 	.word	0x200019b0
     610:	38e38e39 	.word	0x38e38e39
     614:	0000cbd1 	.word	0x0000cbd1
     618:	3b9aca00 	.word	0x3b9aca00
     61c:	0000b719 	.word	0x0000b719

00000620 <ull_conn_llcp>:

	return 0;
}

int ull_conn_llcp(struct ll_conn *conn, uint32_t ticks_at_expire, uint16_t lazy)
{
     620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     624:	4604      	mov	r4, r0
	/* Check if no other procedure with instant is requested and not in
	 * Encryption setup.
	 */
	if ((conn->llcp_ack == conn->llcp_req) &&
     626:	f890 30bc 	ldrb.w	r3, [r0, #188]	; 0xbc
     62a:	f890 00bb 	ldrb.w	r0, [r0, #187]	; 0xbb
     62e:	4283      	cmp	r3, r0
{
     630:	b08b      	sub	sp, #44	; 0x2c
     632:	460d      	mov	r5, r1
     634:	4616      	mov	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) &&
     636:	d00e      	beq.n	656 <ull_conn_llcp+0x36>
	}

	/* Check if procedures with instant or encryption setup is requested or
	 * active.
	 */
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
     638:	1ac0      	subs	r0, r0, r3
     63a:	f000 0003 	and.w	r0, r0, #3
     63e:	2802      	cmp	r0, #2
     640:	d01b      	beq.n	67a <ull_conn_llcp+0x5a>
		}
	}
#endif /* CONFIG_BT_PERIPHERAL && CONFIG_BT_CTLR_LE_ENC */

	/* Terminate Procedure Request */
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
     642:	f894 2119 	ldrb.w	r2, [r4, #281]	; 0x119
     646:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
     64a:	429a      	cmp	r2, r3
     64c:	d130      	bne.n	6b0 <ull_conn_llcp+0x90>
				conn->procedure_expire++;
			}
		}
	}

	return 0;
     64e:	2000      	movs	r0, #0
}
     650:	b00b      	add	sp, #44	; 0x2c
     652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    !conn->llcp_enc.pause_rx) {
     656:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	if ((conn->llcp_ack == conn->llcp_req) &&
     65a:	f012 0801 	ands.w	r8, r2, #1
     65e:	d1f0      	bne.n	642 <ull_conn_llcp+0x22>
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
     660:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
     664:	f894 70e4 	ldrb.w	r7, [r4, #228]	; 0xe4
     668:	428f      	cmp	r7, r1
     66a:	f000 833a 	beq.w	ce2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4e2>
			conn->llcp_ack -= 2U;
     66e:	1e98      	subs	r0, r3, #2
			conn->llcp_type = LLCP_CONN_UPD;
     670:	2201      	movs	r2, #1
			conn->llcp_ack -= 2U;
     672:	f884 00bc 	strb.w	r0, [r4, #188]	; 0xbc
			conn->llcp_type = LLCP_CONN_UPD;
     676:	f884 20bd 	strb.w	r2, [r4, #189]	; 0xbd
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
     67a:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
     67e:	f894 2185 	ldrb.w	r2, [r4, #389]	; 0x185
     682:	429a      	cmp	r2, r3
     684:	d006      	beq.n	694 <ull_conn_llcp+0x74>
			if ((conn->llcp_length.state ==
     686:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
     68a:	f002 0106 	and.w	r1, r2, #6
     68e:	2904      	cmp	r1, #4
     690:	f000 836d 	beq.w	d6e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x56e>
		switch (conn->llcp_type) {
     694:	f894 70bd 	ldrb.w	r7, [r4, #189]	; 0xbd
     698:	1e7a      	subs	r2, r7, #1
     69a:	2a05      	cmp	r2, #5
     69c:	f200 8313 	bhi.w	cc6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4c6>
     6a0:	e8df f012 	tbh	[pc, r2, lsl #1]
     6a4:	02ae005a 	.word	0x02ae005a
     6a8:	0311024b 	.word	0x0311024b
     6ac:	01b802d8 	.word	0x01b802d8
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
     6b0:	4828      	ldr	r0, [pc, #160]	; (754 <ull_conn_llcp+0x134>)
     6b2:	f007 ff3d 	bl	8530 <mem_acquire>
		if (tx) {
     6b6:	b3a8      	cbz	r0, 724 <ull_conn_llcp+0x104>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
     6b8:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
     6bc:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
     6c0:	7903      	ldrb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
     6c2:	2202      	movs	r2, #2
     6c4:	7142      	strb	r2, [r0, #5]
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
     6c6:	f043 0303 	orr.w	r3, r3, #3
     6ca:	7103      	strb	r3, [r0, #4]
			pdu_tx->llctrl.opcode =
     6cc:	71c2      	strb	r2, [r0, #7]
					 struct node_tx *tx, bool pause)
{
	/* check if a packet was tx-ed and not acked by peer */
	if (
	    /* data/ctrl packet is in the head */
	    conn->tx_head &&
     6ce:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
			pdu_tx->llctrl.terminate_ind.error_code =
     6d2:	f894 211a 	ldrb.w	r2, [r4, #282]	; 0x11a
     6d6:	7202      	strb	r2, [r0, #8]
	if (
     6d8:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
     6dc:	b1b3      	cbz	r3, 70c <ull_conn_llcp+0xec>
#if defined(CONFIG_BT_CTLR_LE_ENC)
	    !conn->llcp_enc.pause_tx &&
     6de:	f894 113e 	ldrb.w	r1, [r4, #318]	; 0x13e
	    conn->tx_head &&
     6e2:	078d      	lsls	r5, r1, #30
     6e4:	d412      	bmi.n	70c <ull_conn_llcp+0xec>
#endif /* CONFIG_BT_CTLR_LE_ENC */
#if defined(CONFIG_BT_CTLR_PHY)
	    !conn->llcp_phy.pause_tx &&
     6e6:	f894 1197 	ldrb.w	r1, [r4, #407]	; 0x197
     6ea:	07c9      	lsls	r1, r1, #31
     6ec:	d40e      	bmi.n	70c <ull_conn_llcp+0xec>

		/* if data transmitted once, keep it at head of the tx list,
		 * as we will insert a ctrl after it, hence advance the
		 * data pointer
		 */
		if (conn->tx_head == conn->tx_data) {
     6ee:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
     6f2:	428b      	cmp	r3, r1
     6f4:	f000 877a 	beq.w	15ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x264>
			conn->tx_data = conn->tx_data->next;
#if defined(CONFIG_BT_CTLR_LE_ENC)
		} else if (!conn->tx_ctrl) {
     6f8:	b94a      	cbnz	r2, 70e <ull_conn_llcp+0xee>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
     6fa:	791a      	ldrb	r2, [r3, #4]
     6fc:	f002 0203 	and.w	r2, r2, #3
     700:	2a03      	cmp	r2, #3
     702:	f001 825f 	beq.w	1bc4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x83c>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
     706:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
     70a:	e002      	b.n	712 <ull_conn_llcp+0xf2>
		/* No packet needing ACK. */

		/* If first ctrl packet then add it as head else add it to the
		 * tail of the ctrl packets.
		 */
		if (!conn->tx_ctrl) {
     70c:	b1da      	cbz	r2, 746 <ull_conn_llcp+0x126>
	tx->next = conn->tx_ctrl_last->next;
     70e:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
     712:	681a      	ldr	r2, [r3, #0]
     714:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
     716:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
     718:	6803      	ldr	r3, [r0, #0]
     71a:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
			ctrl_tx_last_enqueue(conn, tx);
		}
	}

	/* Update last pointer if ctrl added at end of tx list */
	if (!tx->next) {
     71e:	b90b      	cbnz	r3, 724 <ull_conn_llcp+0x104>
		conn->tx_data_last = tx;
     720:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
		if (!conn->procedure_expire) {
     724:	f8b4 00ac 	ldrh.w	r0, [r4, #172]	; 0xac
     728:	2800      	cmp	r0, #0
     72a:	d190      	bne.n	64e <ull_conn_llcp+0x2e>
			conn->procedure_expire = conn->supervision_reload;
     72c:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
			if (conn->procedure_expire <= 1U) {
     730:	2b01      	cmp	r3, #1
     732:	d902      	bls.n	73a <ull_conn_llcp+0x11a>
			conn->procedure_expire = conn->supervision_reload;
     734:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
     738:	e789      	b.n	64e <ull_conn_llcp+0x2e>
				conn->procedure_expire++;
     73a:	3301      	adds	r3, #1
     73c:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
}
     740:	b00b      	add	sp, #44	; 0x2c
     742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tx->next = conn->tx_head;
     746:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
     748:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
     74c:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
     750:	e7e5      	b.n	71e <ull_conn_llcp+0xfe>
     752:	bf00      	nop
     754:	20001a90 	.word	0x20001a90
	struct lll_conn *lll = &conn->lll;
	struct ll_conn *conn_upd;
	uint16_t instant_latency;
	uint16_t event_counter;

	conn_upd = conn_upd_curr;
     758:	4fa3      	ldr	r7, [pc, #652]	; (9e8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1e8>)

	/* set mutex */
	if (!conn_upd) {
     75a:	683b      	ldr	r3, [r7, #0]
     75c:	2b00      	cmp	r3, #0
     75e:	f000 8421 	beq.w	fa4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x7a4>
		conn_upd_curr = conn;
	}

	/* Calculate current event counter */
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
     762:	8e62      	ldrh	r2, [r4, #50]	; 0x32
     764:	8de1      	ldrh	r1, [r4, #46]	; 0x2e

	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
			  0xffff;
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
     766:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
     76a:	440a      	add	r2, r1
     76c:	4432      	add	r2, r6
     76e:	fa1f f882 	uxth.w	r8, r2
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
     772:	f013 0207 	ands.w	r2, r3, #7
     776:	f040 835b 	bne.w	e30 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x630>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
     77a:	f8b4 90c0 	ldrh.w	r9, [r4, #192]	; 0xc0
     77e:	eba8 0309 	sub.w	r3, r8, r9
     782:	fa1f fa83 	uxth.w	sl, r3
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
			sys_cpu_to_le16(conn->llcp.conn_upd.instant);
		/* enqueue control PDU */
		ctrl_tx_enqueue(conn, tx);
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
	} else if (instant_latency <= 0x7FFF) {
     786:	041b      	lsls	r3, r3, #16
     788:	f53f af5b 	bmi.w	642 <ull_conn_llcp+0x22>

		/* procedure request acked */
		conn->llcp_cu.ack = conn->llcp_cu.req;

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
     78c:	f894 115c 	ldrb.w	r1, [r4, #348]	; 0x15c
     790:	f894 315d 	ldrb.w	r3, [r4, #349]	; 0x15d
			conn->llcp_ack = conn->llcp_req;
     794:	f894 00bb 	ldrb.w	r0, [r4, #187]	; 0xbb
     798:	f884 00bc 	strb.w	r0, [r4, #188]	; 0xbc
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
     79c:	428b      	cmp	r3, r1
		conn->llcp_cu.ack = conn->llcp_cu.req;
     79e:	f894 00e4 	ldrb.w	r0, [r4, #228]	; 0xe4
     7a2:	f884 00e5 	strb.w	r0, [r4, #229]	; 0xe5
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
     7a6:	d009      	beq.n	7bc <ull_conn_llcp+0x19c>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
     7a8:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
     7ac:	f003 0307 	and.w	r3, r3, #7
     7b0:	2b05      	cmp	r3, #5
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
     7b2:	bf04      	itt	eq
     7b4:	f884 115d 	strbeq.w	r1, [r4, #349]	; 0x15d

			/* Stop procedure timeout */
			conn->procedure_expire = 0U;
     7b8:	f8a4 20ac 	strheq.w	r2, [r4, #172]	; 0xac
		}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

		/* reset mutex */
		if (conn_upd_curr == conn) {
     7bc:	683b      	ldr	r3, [r7, #0]
     7be:	429c      	cmp	r4, r3
	conn_upd_curr = NULL;
     7c0:	bf04      	itt	eq
     7c2:	2300      	moveq	r3, #0
     7c4:	603b      	streq	r3, [r7, #0]
		}

		lll = &conn->lll;

		/* Acquire Rx node */
		rx = conn->llcp_rx;
     7c6:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
		LL_ASSERT(rx && rx->hdr.link);
     7ca:	2f00      	cmp	r7, #0
     7cc:	f000 871c 	beq.w	1608 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x280>
     7d0:	6838      	ldr	r0, [r7, #0]
     7d2:	2800      	cmp	r0, #0
     7d4:	f000 8718 	beq.w	1608 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x280>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Prepare the rx packet structure */
		if ((conn->llcp_cu.interval != lll->interval) ||
     7d8:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
     7dc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
		conn->llcp_rx = rx->hdr.link->mem;
     7de:	6841      	ldr	r1, [r0, #4]
     7e0:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
		if ((conn->llcp_cu.interval != lll->interval) ||
     7e4:	4293      	cmp	r3, r2
     7e6:	f8b4 10ea 	ldrh.w	r1, [r4, #234]	; 0xea
     7ea:	f8b4 c0ec 	ldrh.w	ip, [r4, #236]	; 0xec
     7ee:	f000 8737 	beq.w	1660 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2d8>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
				       lll->interval * CONN_INT_UNIT_US) !=
		     conn->supervision_reload)) {
			struct node_rx_cu *cu;

			rx->hdr.handle = lll->handle;
     7f2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
     7f4:	80fa      	strh	r2, [r7, #6]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
     7f6:	f04f 0e16 	mov.w	lr, #22

			/* prepare connection update complete structure */
			cu = (void *)rx->pdu;
			cu->status = 0x00;
     7fa:	2200      	movs	r2, #0
			cu->interval = conn->llcp_cu.interval;
     7fc:	83fb      	strh	r3, [r7, #30]
			cu->latency = conn->llcp_cu.latency;
     7fe:	8439      	strh	r1, [r7, #32]
			cu->timeout = conn->llcp_cu.timeout;
     800:	f8a7 c022 	strh.w	ip, [r7, #34]	; 0x22
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
     804:	f887 e004 	strb.w	lr, [r7, #4]
			cu->status = 0x00;
     808:	773a      	strb	r2, [r7, #28]
			/* Mark for buffer for release */
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
		}

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
     80a:	4639      	mov	r1, r7
     80c:	f00b ff26 	bl	c65c <ll_rx_put>
		ll_rx_sched();
     810:	f00b ff2e 	bl	c670 <ll_rx_sched>

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED)
		/* restore to normal prepare */
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
     814:	6823      	ldr	r3, [r4, #0]
     816:	2b00      	cmp	r3, #0
     818:	da09      	bge.n	82e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2e>
			uint32_t ticks_prepare_to_start =
     81a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
				MAX(conn->evt.ticks_active_to_start,
				    conn->evt.ticks_preempt_to_start);

			conn->evt.ticks_xtal_to_start &= ~XON_BITMASK;
     81e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->evt.ticks_xtal_to_start -
     822:	428a      	cmp	r2, r1
     824:	bf2c      	ite	cs
     826:	18a9      	addcs	r1, r5, r2
     828:	1869      	addcc	r1, r5, r1
			conn->evt.ticks_xtal_to_start &= ~XON_BITMASK;
     82a:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->evt.ticks_xtal_to_start -
     82c:	1acd      	subs	r5, r1, r3
					    ticks_prepare_to_start);
		}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * lll->interval;
     82e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
		latency = conn_interval_old / conn->llcp_cu.interval;
     830:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
		conn_interval_old = instant_latency * lll->interval;
     834:	fb13 f30a 	smulbb	r3, r3, sl
     838:	b29b      	uxth	r3, r3
		latency = conn_interval_old / conn->llcp_cu.interval;
     83a:	fbb3 f1f7 	udiv	r1, r3, r7
		conn_interval_new = latency * conn->llcp_cu.interval;
     83e:	fb17 f201 	smulbb	r2, r7, r1
     842:	b292      	uxth	r2, r2
		if (conn_interval_new > conn_interval_old) {
     844:	4293      	cmp	r3, r2
		latency = conn_interval_old / conn->llcp_cu.interval;
     846:	fa1f fa81 	uxth.w	sl, r1
		if (conn_interval_new > conn_interval_old) {
     84a:	f080 86bd 	bcs.w	15c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x240>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
     84e:	1ad3      	subs	r3, r2, r3
     850:	4866      	ldr	r0, [pc, #408]	; (9ec <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1ec>)
     852:	f240 42e2 	movw	r2, #1250	; 0x4e2
     856:	fb02 f303 	mul.w	r3, r2, r3
     85a:	fba3 0100 	umull	r0, r1, r3, r0
     85e:	a360      	add	r3, pc, #384	; (adr r3, 9e0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1e0>)
     860:	e9d3 2300 	ldrd	r2, r3, [r3]
     864:	f7ff fc4c 	bl	100 <__aeabi_uldivmod>
     868:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
     86c:	441d      	add	r5, r3
		} else {
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
				(conn_interval_old - conn_interval_new) *
				CONN_INT_UNIT_US);
		}
		lll->latency_prepare += lazy;
     86e:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
				CONN_INT_UNIT_US) * CONN_INT_UNIT_US);
			periodic_us -= lll->slave.window_widening_periodic_us;
#endif /* CONFIG_BT_PERIPHERAL */

#if defined(CONFIG_BT_CENTRAL)
		} else if (!lll->role) {
     870:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		lll->latency_prepare -= (instant_latency - latency);
     874:	eba9 0808 	sub.w	r8, r9, r8
		lll->latency_prepare += lazy;
     878:	4432      	add	r2, r6
		lll->latency_prepare -= (instant_latency - latency);
     87a:	44d0      	add	r8, sl
     87c:	4442      	add	r2, r8
		conn_interval_us = conn->llcp_cu.interval *
     87e:	f240 46e2 	movw	r6, #1250	; 0x4e2
		} else if (!lll->role) {
     882:	2b00      	cmp	r3, #0
		lll->latency_prepare -= (instant_latency - latency);
     884:	85e2      	strh	r2, [r4, #46]	; 0x2e
		conn_interval_us = conn->llcp_cu.interval *
     886:	fb06 f607 	mul.w	r6, r6, r7
		} else if (!lll->role) {
     88a:	f2c1 8069 	blt.w	1960 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5d8>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
     88e:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
     892:	4956      	ldr	r1, [pc, #344]	; (9ec <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1ec>)
     894:	a352      	add	r3, pc, #328	; (adr r3, 9e0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1e0>)
     896:	e9d3 2300 	ldrd	r2, r3, [r3]
     89a:	fba0 0101 	umull	r0, r1, r0, r1
     89e:	f7ff fc2f 	bl	100 <__aeabi_uldivmod>
     8a2:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000

			/* Workaround: Due to the missing remainder param in
			 * ticker_start function for first interval; add a
			 * tick so as to use the ceiled value.
			 */
			ticks_win_offset += 1U;
     8a6:	f108 0801 	add.w	r8, r8, #1

		lll->interval = conn->llcp_cu.interval;
		lll->latency = conn->llcp_cu.latency;

		conn->supervision_reload =
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
     8aa:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
		lll->latency = conn->llcp_cu.latency;
     8ae:	f8b4 00ea 	ldrh.w	r0, [r4, #234]	; 0xea
		conn->procedure_reload =
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);

#if defined(CONFIG_BT_CTLR_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
     8b2:	4b4f      	ldr	r3, [pc, #316]	; (9f0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1f0>)
		lll->interval = conn->llcp_cu.interval;
     8b4:	8567      	strh	r7, [r4, #42]	; 0x2a
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
     8b6:	f242 7710 	movw	r7, #10000	; 0x2710
     8ba:	fb07 6202 	mla	r2, r7, r2, r6
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
     8be:	494d      	ldr	r1, [pc, #308]	; (9f4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1f4>)
		lll->latency = conn->llcp_cu.latency;
     8c0:	85a0      	strh	r0, [r4, #44]	; 0x2c
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
     8c2:	4433      	add	r3, r6
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
     8c4:	1d87      	adds	r7, r0, #6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
     8c6:	3a01      	subs	r2, #1
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
     8c8:	fbb3 f3f6 	udiv	r3, r3, r6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
     8cc:	fbb2 f2f6 	udiv	r2, r2, r6
     8d0:	f8a4 20a6 	strh.w	r2, [r4, #166]	; 0xa6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
     8d4:	b29a      	uxth	r2, r3
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
     8d6:	42ba      	cmp	r2, r7
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
     8d8:	4431      	add	r1, r6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
     8da:	f8a4 20b2 	strh.w	r2, [r4, #178]	; 0xb2
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
     8de:	fbb1 f1f6 	udiv	r1, r1, r6
     8e2:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
     8e6:	dd02      	ble.n	8ee <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xee>
				     (conn->apto_reload - (lll->latency + 6)) :
     8e8:	1a12      	subs	r2, r2, r0
     8ea:	3a06      	subs	r2, #6
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
     8ec:	b292      	uxth	r2, r2
				     conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

		if (conn->llcp_cu.cmd) {
     8ee:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
     8f2:	f8a4 20ae 	strh.w	r2, [r4, #174]	; 0xae
		if (conn->llcp_cu.cmd) {
     8f6:	071f      	lsls	r7, r3, #28
			conn->supervision_expire = 0U;
     8f8:	bf44      	itt	mi
     8fa:	2300      	movmi	r3, #0
     8fc:	f8a4 30a8 	strhmi.w	r3, [r4, #168]	; 0xa8
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		uint32_t mayfly_was_enabled =
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
     900:	2102      	movs	r1, #2
     902:	2001      	movs	r0, #1
     904:	f012 fea0 	bl	13648 <mayfly_is_enabled>
					  TICKER_USER_ID_ULL_LOW);
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
     908:	2200      	movs	r2, #0
     90a:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
     90c:	4682      	mov	sl, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
     90e:	2001      	movs	r0, #1
     910:	f007 feb2 	bl	8678 <mayfly_enable>
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
     914:	4938      	ldr	r1, [pc, #224]	; (9f8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1f8>)
     916:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
     91a:	4620      	mov	r0, r4
     91c:	f007 fe3e 	bl	859c <mem_index_get>
			      0);
#endif

		/* start slave/master with new timings */
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
     920:	f100 0903 	add.w	r9, r0, #3
     924:	fa5f f989 	uxtb.w	r9, r9
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
     928:	4b34      	ldr	r3, [pc, #208]	; (9fc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1fc>)
     92a:	9400      	str	r4, [sp, #0]
     92c:	464a      	mov	r2, r9
     92e:	2101      	movs	r1, #1
     930:	2000      	movs	r0, #0
     932:	f009 fa7f 	bl	9e34 <ticker_stop>
					    TICKER_USER_ID_ULL_HIGH,
					    ticker_id_conn,
					    ticker_stop_conn_op_cb,
					    (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
     936:	f030 0302 	bics.w	r3, r0, #2
     93a:	d00c      	beq.n	956 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x156>
     93c:	4a30      	ldr	r2, [pc, #192]	; (a00 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x200>)
     93e:	4931      	ldr	r1, [pc, #196]	; (a04 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x204>)
     940:	4831      	ldr	r0, [pc, #196]	; (a08 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x208>)
     942:	f640 238f 	movw	r3, #2703	; 0xa8f
     946:	f015 f9fb 	bl	15d40 <printk>
     94a:	4040      	eors	r0, r0
     94c:	f380 8811 	msr	BASEPRI, r0
     950:	f04f 0003 	mov.w	r0, #3
     954:	df02      	svc	2
		ticker_status =
			ticker_start(TICKER_INSTANCE_ID_CTLR,
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ticks_at_expire, ticks_win_offset,
				     HAL_TICKER_US_TO_TICKS(periodic_us),
     956:	4825      	ldr	r0, [pc, #148]	; (9ec <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1ec>)
			ticker_start(TICKER_INSTANCE_ID_CTLR,
     958:	68e1      	ldr	r1, [r4, #12]
     95a:	4a2c      	ldr	r2, [pc, #176]	; (a0c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x20c>)
     95c:	4b2c      	ldr	r3, [pc, #176]	; (a10 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x210>)
     95e:	9104      	str	r1, [sp, #16]
				     HAL_TICKER_US_TO_TICKS(periodic_us),
     960:	fba6 6700 	umull	r6, r7, r6, r0
			ticker_start(TICKER_INSTANCE_ID_CTLR,
     964:	f64f 7cfe 	movw	ip, #65534	; 0xfffe
     968:	9207      	str	r2, [sp, #28]
     96a:	9305      	str	r3, [sp, #20]
				     HAL_TICKER_REMAINDER(periodic_us),
     96c:	4630      	mov	r0, r6
     96e:	a31c      	add	r3, pc, #112	; (adr r3, 9e0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1e0>)
     970:	e9d3 2300 	ldrd	r2, r3, [r3]
     974:	4639      	mov	r1, r7
			ticker_start(TICKER_INSTANCE_ID_CTLR,
     976:	f8cd c00c 	str.w	ip, [sp, #12]
     97a:	9408      	str	r4, [sp, #32]
     97c:	9406      	str	r4, [sp, #24]
				     HAL_TICKER_REMAINDER(periodic_us),
     97e:	f7ff fbbf 	bl	100 <__aeabi_uldivmod>
     982:	4610      	mov	r0, r2
     984:	4619      	mov	r1, r3
     986:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     98a:	2300      	movs	r3, #0
     98c:	f7ff fbb8 	bl	100 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(periodic_us),
     990:	a313      	add	r3, pc, #76	; (adr r3, 9e0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1e0>)
     992:	e9d3 2300 	ldrd	r2, r3, [r3]
				     HAL_TICKER_REMAINDER(periodic_us),
     996:	4604      	mov	r4, r0
				     HAL_TICKER_US_TO_TICKS(periodic_us),
     998:	4639      	mov	r1, r7
     99a:	4630      	mov	r0, r6
			ticker_start(TICKER_INSTANCE_ID_CTLR,
     99c:	9402      	str	r4, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(periodic_us),
     99e:	f7ff fbaf 	bl	100 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
     9a2:	462b      	mov	r3, r5
     9a4:	e9cd 8000 	strd	r8, r0, [sp]
     9a8:	464a      	mov	r2, r9
     9aa:	2101      	movs	r1, #1
     9ac:	2000      	movs	r0, #0
     9ae:	f009 f9b9 	bl	9d24 <ticker_start>
#else
				     ull_master_ticker_cb,
#endif
				     conn, ticker_start_conn_op_cb,
				     (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
     9b2:	f030 0302 	bics.w	r3, r0, #2
     9b6:	d00c      	beq.n	9d2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1d2>
     9b8:	4a11      	ldr	r2, [pc, #68]	; (a00 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x200>)
     9ba:	4912      	ldr	r1, [pc, #72]	; (a04 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x204>)
     9bc:	4812      	ldr	r0, [pc, #72]	; (a08 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x208>)
     9be:	f640 23a9 	movw	r3, #2729	; 0xaa9
     9c2:	f015 f9bd 	bl	15d40 <printk>
     9c6:	4040      	eors	r0, r0
     9c8:	f380 8811 	msr	BASEPRI, r0
     9cc:	f04f 0003 	mov.w	r0, #3
     9d0:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* enable ticker job, if disabled in this function */
		if (mayfly_was_enabled) {
     9d2:	f1ba 0f00 	cmp.w	sl, #0
     9d6:	f040 86f4 	bne.w	17c2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x43a>
				return -ECANCELED;
     9da:	f06f 0047 	mvn.w	r0, #71	; 0x47
     9de:	e637      	b.n	650 <ull_conn_llcp+0x30>
     9e0:	1afd498d 	.word	0x1afd498d
     9e4:	00000007 	.word	0x00000007
     9e8:	20001a0c 	.word	0x20001a0c
     9ec:	3b9aca00 	.word	0x3b9aca00
     9f0:	01c9c37f 	.word	0x01c9c37f
     9f4:	026259ff 	.word	0x026259ff
     9f8:	20000be0 	.word	0x20000be0
     9fc:	0000d1a5 	.word	0x0000d1a5
     a00:	00019cec 	.word	0x00019cec
     a04:	00019e0c 	.word	0x00019e0c
     a08:	000199cc 	.word	0x000199cc
     a0c:	0000d14d 	.word	0x0000d14d
     a10:	0000fc1d 	.word	0x0000fc1d
			event_counter = lll->event_counter +
     a14:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
     a16:	8e62      	ldrh	r2, [r4, #50]	; 0x32
static inline void event_phy_upd_ind_prep(struct ll_conn *conn,
					  uint16_t event_counter)
{
	struct node_rx_pu *upd;

	if (conn->llcp.phy_upd_ind.initiate) {
     a18:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
			event_counter = lll->event_counter +
     a1c:	440a      	add	r2, r1
					lll->latency_prepare + lazy;
     a1e:	4432      	add	r2, r6
			event_counter = lll->event_counter +
     a20:	b296      	uxth	r6, r2
	if (conn->llcp.phy_upd_ind.initiate) {
     a22:	07da      	lsls	r2, r3, #31
     a24:	4619      	mov	r1, r3
     a26:	f100 8268 	bmi.w	efa <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x6fa>
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
		ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);

		ctrl_tx_enqueue(conn, tx);
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) &
     a2a:	f8b4 20c2 	ldrh.w	r2, [r4, #194]	; 0xc2
     a2e:	1ab6      	subs	r6, r6, r2
     a30:	0430      	lsls	r0, r6, #16
     a32:	f53f ae06 	bmi.w	642 <ull_conn_llcp+0x22>
			/* procedure request acked */
			conn->llcp_ack = conn->llcp_req;
		}

		/* apply new phy */
		old_tx = lll->phy_tx;
     a36:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
		old_rx = lll->phy_rx;
     a3a:	f894 8047 	ldrb.w	r8, [r4, #71]	; 0x47
			conn->llcp_ack = conn->llcp_req;
     a3e:	f894 00bb 	ldrb.w	r0, [r4, #187]	; 0xbb

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
		uint16_t eff_tx_time = lll->max_tx_time;
		uint16_t eff_rx_time = lll->max_rx_time;
     a42:	f8b4 7044 	ldrh.w	r7, [r4, #68]	; 0x44
			conn->llcp_ack = conn->llcp_req;
     a46:	f884 00bc 	strb.w	r0, [r4, #188]	; 0xbc
		uint16_t max_rx_time, max_tx_time;

		dle_max_time_get(conn, &max_rx_time, &max_tx_time);
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

		if (conn->llcp.phy_upd_ind.tx) {
     a4a:	f013 0f1c 	tst.w	r3, #28
		old_tx = lll->phy_tx;
     a4e:	f002 0907 	and.w	r9, r2, #7
		old_rx = lll->phy_rx;
     a52:	f008 0807 	and.w	r8, r8, #7
		if (conn->llcp.phy_upd_ind.tx) {
     a56:	f040 85e7 	bne.w	1628 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2a0>
		uint16_t eff_tx_time = lll->max_tx_time;
     a5a:	f8b4 6042 	ldrh.w	r6, [r4, #66]	; 0x42
						    lll->phy_tx,
						    max_tx_time);

#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
		}
		if (conn->llcp.phy_upd_ind.rx) {
     a5e:	f013 0fe0 	tst.w	r3, #224	; 0xe0
     a62:	d008      	beq.n	a76 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x276>
			lll->phy_rx = conn->llcp.phy_upd_ind.rx;
     a64:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
     a68:	095b      	lsrs	r3, r3, #5
     a6a:	f363 0202 	bfi	r2, r3, #0, #3
     a6e:	f884 2047 	strb.w	r2, [r4, #71]	; 0x47

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
			eff_rx_time =
				calc_eff_time(lll->max_rx_octets, lll->phy_rx,
     a72:	f44f 77a4 	mov.w	r7, #328	; 0x148

#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
		}

		/* Acquire Rx node */
		rx = conn->llcp_rx;
     a76:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
		LL_ASSERT(rx && rx->hdr.link);
     a7a:	2d00      	cmp	r5, #0
     a7c:	f000 85de 	beq.w	163c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2b4>
     a80:	6828      	ldr	r0, [r5, #0]
     a82:	2800      	cmp	r0, #0
     a84:	f000 85da 	beq.w	163c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2b4>
		conn->llcp_rx = rx->hdr.link->mem;
     a88:	f894 e046 	ldrb.w	lr, [r4, #70]	; 0x46
     a8c:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
     a90:	6843      	ldr	r3, [r0, #4]
     a92:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0

		/* generate event if phy changed or initiated by cmd */
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
     a96:	0789      	lsls	r1, r1, #30
     a98:	f3ce 0c02 	ubfx	ip, lr, #0, #3
     a9c:	f00e 0307 	and.w	r3, lr, #7
     aa0:	f3c2 0e02 	ubfx	lr, r2, #0, #3
     aa4:	f002 0207 	and.w	r2, r2, #7
     aa8:	d402      	bmi.n	ab0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2b0>
     aaa:	4599      	cmp	r9, r3
     aac:	f000 8784 	beq.w	19b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x630>
			ll_rx_sched();

			return;
		}

		rx->hdr.handle = lll->handle;
     ab0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     ab2:	80eb      	strh	r3, [r5, #6]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
     ab4:	221a      	movs	r2, #26

		upd = (void *)rx->pdu;
		upd->status = 0U;
     ab6:	2300      	movs	r3, #0
		upd->tx = lll->phy_tx;
     ab8:	f885 c01d 	strb.w	ip, [r5, #29]
		upd->rx = lll->phy_rx;
     abc:	f885 e01e 	strb.w	lr, [r5, #30]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
     ac0:	712a      	strb	r2, [r5, #4]
		upd->status = 0U;
     ac2:	772b      	strb	r3, [r5, #28]

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
     ac4:	4629      	mov	r1, r5
     ac6:	f00b fdc9 	bl	c65c <ll_rx_put>

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
		/* get a rx node for ULL->LL */
		rx = conn->llcp_rx;
     aca:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
		LL_ASSERT(rx && rx->hdr.link);
     ace:	2d00      	cmp	r5, #0
     ad0:	f000 8663 	beq.w	179a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x412>
     ad4:	6828      	ldr	r0, [r5, #0]
     ad6:	2800      	cmp	r0, #0
     ad8:	f000 865f 	beq.w	179a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x412>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Update max tx and/or max rx if changed */
		if ((eff_tx_time <= lll->max_tx_time) &&
     adc:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
		conn->llcp_rx = rx->hdr.link->mem;
     ae0:	6842      	ldr	r2, [r0, #4]
     ae2:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
		if ((eff_tx_time <= lll->max_tx_time) &&
     ae6:	42b3      	cmp	r3, r6
     ae8:	d30a      	bcc.n	b00 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x300>
     aea:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
     aee:	d807      	bhi.n	b00 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x300>
		    (lll->max_tx_time <= max_tx_time) &&
		    (eff_rx_time <= lll->max_rx_time) &&
     af0:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
		    (lll->max_tx_time <= max_tx_time) &&
     af4:	42bb      	cmp	r3, r7
     af6:	d303      	bcc.n	b00 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x300>
		    (eff_rx_time <= lll->max_rx_time) &&
     af8:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
     afc:	f240 8770 	bls.w	19e0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x658>
			/* enqueue rx node towards Thread */
			ll_rx_put(rx->hdr.link, rx);
			ll_rx_sched();
			return;
		}
		lll->max_tx_time = eff_tx_time;
     b00:	f8a4 6042 	strh.w	r6, [r4, #66]	; 0x42
		lll->max_rx_time = eff_rx_time;
     b04:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
		rx->hdr.handle = lll->handle;
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;

		struct pdu_data *pdu_rx = (void *)rx->pdu;

		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
     b08:	7f2b      	ldrb	r3, [r5, #28]
		rx->hdr.handle = lll->handle;
     b0a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
     b0c:	80ea      	strh	r2, [r5, #6]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
     b0e:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
     b12:	2103      	movs	r1, #3
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
     b14:	2209      	movs	r2, #9
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
     b16:	7129      	strb	r1, [r5, #4]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
     b18:	772b      	strb	r3, [r5, #28]
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
     b1a:	776a      	strb	r2, [r5, #29]
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;

		struct pdu_data_llctrl_length_req *lr =
			(void *)&pdu_rx->llctrl.length_rsp;

		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
     b1c:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
     b20:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
     b22:	842b      	strh	r3, [r5, #32]
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
     b24:	2315      	movs	r3, #21
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
     b26:	84aa      	strh	r2, [r5, #36]	; 0x24
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
     b28:	77eb      	strb	r3, [r5, #31]
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
     b2a:	4629      	mov	r1, r5
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
     b2c:	846f      	strh	r7, [r5, #34]	; 0x22
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);
     b2e:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
     b30:	f00b fd94 	bl	c65c <ll_rx_put>
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

		ll_rx_sched();
     b34:	f00b fd9c 	bl	c670 <ll_rx_sched>
     b38:	e583      	b.n	642 <ull_conn_llcp+0x22>
	if (conn->llcp.encryption.state) {
     b3a:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
     b3e:	f013 0503 	ands.w	r5, r3, #3
     b42:	f47f ad7e 	bne.w	642 <ull_conn_llcp+0x22>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
     b46:	48c3      	ldr	r0, [pc, #780]	; (e54 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x654>)
     b48:	f007 fcf2 	bl	8530 <mem_acquire>
	if (!tx) {
     b4c:	4606      	mov	r6, r0
     b4e:	2800      	cmp	r0, #0
     b50:	f43f ad77 	beq.w	642 <ull_conn_llcp+0x22>
	if (!lll->role) {
     b54:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
     b58:	2b00      	cmp	r3, #0
	pdu_ctrl_tx = (void *)tx->pdu;
     b5a:	f100 0804 	add.w	r8, r0, #4
	if (!lll->role) {
     b5e:	f280 83b4 	bge.w	12ca <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xaca>
	else if (!lll->enc_rx) {
     b62:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
     b66:	f013 0308 	ands.w	r3, r3, #8
     b6a:	f040 8769 	bne.w	1a40 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6b8>
		if (conn->llcp.encryption.error_code) {
     b6e:	f894 50cd 	ldrb.w	r5, [r4, #205]	; 0xcd
     b72:	2d00      	cmp	r5, #0
     b74:	f001 807e 	beq.w	1c74 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8ec>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
     b78:	7902      	ldrb	r2, [r0, #4]
	if (conn->common.fex_valid &&
     b7a:	f894 10ba 	ldrb.w	r1, [r4, #186]	; 0xba
	pdu->ll_id = PDU_DATA_LLID_CTRL;
     b7e:	f042 0203 	orr.w	r2, r2, #3
	if (conn->common.fex_valid &&
     b82:	07c9      	lsls	r1, r1, #31
	pdu->ll_id = PDU_DATA_LLID_CTRL;
     b84:	7102      	strb	r2, [r0, #4]
	if (conn->common.fex_valid &&
     b86:	f140 8748 	bpl.w	1a1a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x692>
	    (conn->llcp_feature.features_conn &
     b8a:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
     b8e:	4619      	mov	r1, r3
     b90:	f002 0004 	and.w	r0, r2, #4
	if (conn->common.fex_valid &&
     b94:	ea50 0301 	orrs.w	r3, r0, r1
     b98:	f000 873f 	beq.w	1a1a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x692>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
     b9c:	2211      	movs	r2, #17
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
     b9e:	2303      	movs	r3, #3
		p->error_code = conn->llcp.encryption.error_code;
     ba0:	7275      	strb	r5, [r6, #9]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
     ba2:	71f2      	strb	r2, [r6, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
     ba4:	7233      	strb	r3, [r6, #8]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
     ba6:	7177      	strb	r7, [r6, #5]
	    conn->tx_head &&
     ba8:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
	conn->llcp.encryption.error_code = 0U;
     bac:	2200      	movs	r2, #0
     bae:	f884 20cd 	strb.w	r2, [r4, #205]	; 0xcd
	if (
     bb2:	2b00      	cmp	r3, #0
     bb4:	f000 856d 	beq.w	1692 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x30a>
	    !conn->llcp_enc.pause_tx &&
     bb8:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
     bbc:	0792      	lsls	r2, r2, #30
     bbe:	f100 8568 	bmi.w	1692 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x30a>
	    !conn->llcp_phy.pause_tx &&
     bc2:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
     bc6:	07d7      	lsls	r7, r2, #31
     bc8:	f100 8563 	bmi.w	1692 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x30a>
		if (conn->tx_head == conn->tx_data) {
     bcc:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
     bd0:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
     bd2:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
     bd6:	f000 83cf 	beq.w	1378 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xb78>
		} else if (!conn->tx_ctrl) {
     bda:	2a00      	cmp	r2, #0
     bdc:	f001 8138 	beq.w	1e50 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xac8>
	tx->next = conn->tx_ctrl_last->next;
     be0:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
     be4:	681a      	ldr	r2, [r3, #0]
     be6:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
     be8:	601e      	str	r6, [r3, #0]
	conn->tx_ctrl_last = tx;
     bea:	6833      	ldr	r3, [r6, #0]
     bec:	f8c4 61a4 	str.w	r6, [r4, #420]	; 0x1a4
	if (!tx->next) {
     bf0:	2b00      	cmp	r3, #0
     bf2:	f000 86d2 	beq.w	199a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x612>
	conn->llcp_ack = conn->llcp_req;
     bf6:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
     bfa:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
     bfe:	e520      	b.n	642 <ull_conn_llcp+0x22>
			event_counter = lll->event_counter +
     c00:	8e62      	ldrh	r2, [r4, #50]	; 0x32
     c02:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
	if (conn->llcp.chan_map.initiate) {
     c04:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
			event_counter = lll->event_counter +
     c08:	440a      	add	r2, r1
					lll->latency_prepare + lazy;
     c0a:	4432      	add	r2, r6
	if (conn->llcp.chan_map.initiate) {
     c0c:	07d8      	lsls	r0, r3, #31
			event_counter = lll->event_counter +
     c0e:	b296      	uxth	r6, r2
	if (conn->llcp.chan_map.initiate) {
     c10:	f100 8128 	bmi.w	e64 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x664>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
     c14:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
     c18:	1ab6      	subs	r6, r6, r2
     c1a:	0436      	lsls	r6, r6, #16
     c1c:	f53f ad11 	bmi.w	642 <ull_conn_llcp+0x22>
			conn->llcp_ack = conn->llcp_req;
     c20:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
     c24:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
		memcpy(&lll->data_chan_map[0],
     c28:	f104 0534 	add.w	r5, r4, #52	; 0x34
     c2c:	2205      	movs	r2, #5
     c2e:	f104 01c1 	add.w	r1, r4, #193	; 0xc1
     c32:	4628      	mov	r0, r5
     c34:	f015 ff3c 	bl	16ab0 <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
     c38:	4628      	mov	r0, r5
     c3a:	2105      	movs	r1, #5
     c3c:	f007 fe46 	bl	88cc <util_ones_count_get>
		lll->data_chan_count =
     c40:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
     c44:	2201      	movs	r2, #1
		lll->data_chan_count =
     c46:	f360 0305 	bfi	r3, r0, #0, #6
     c4a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
     c4e:	f884 21b0 	strb.w	r2, [r4, #432]	; 0x1b0
     c52:	e4f6      	b.n	642 <ull_conn_llcp+0x22>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
     c54:	487f      	ldr	r0, [pc, #508]	; (e54 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x654>)
     c56:	f007 fc6b 	bl	8530 <mem_acquire>
	if (tx) {
     c5a:	2800      	cmp	r0, #0
     c5c:	f43f acf1 	beq.w	642 <ull_conn_llcp+0x22>
		conn->llcp_ack = conn->llcp_req;
     c60:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
     c64:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
     c68:	2301      	movs	r3, #1
     c6a:	7143      	strb	r3, [r0, #5]
     c6c:	e9d4 3567 	ldrd	r3, r5, [r4, #412]	; 0x19c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     c70:	7902      	ldrb	r2, [r0, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
     c72:	2112      	movs	r1, #18
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     c74:	f042 0203 	orr.w	r2, r2, #3
     c78:	7102      	strb	r2, [r0, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
     c7a:	71c1      	strb	r1, [r0, #7]
	if (
     c7c:	2b00      	cmp	r3, #0
     c7e:	f000 8388 	beq.w	1392 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa>
	    !conn->llcp_enc.pause_tx &&
     c82:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
     c86:	0796      	lsls	r6, r2, #30
     c88:	f100 8383 	bmi.w	1392 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa>
	    !conn->llcp_phy.pause_tx &&
     c8c:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
     c90:	07d1      	lsls	r1, r2, #31
     c92:	f100 837e 	bmi.w	1392 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa>
		if (conn->tx_head == conn->tx_data) {
     c96:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
     c9a:	4293      	cmp	r3, r2
     c9c:	f001 80ac 	beq.w	1df8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa70>
		} else if (!conn->tx_ctrl) {
     ca0:	2d00      	cmp	r5, #0
     ca2:	f001 80c5 	beq.w	1e30 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xaa8>
	tx->next = conn->tx_ctrl_last->next;
     ca6:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
     caa:	681a      	ldr	r2, [r3, #0]
     cac:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
     cae:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
     cb0:	6803      	ldr	r3, [r0, #0]
     cb2:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
     cb6:	2b00      	cmp	r3, #0
     cb8:	f000 857f 	beq.w	17ba <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x432>
		conn->procedure_expire = conn->procedure_reload;
     cbc:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
     cc0:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
     cc4:	e4bd      	b.n	642 <ull_conn_llcp+0x22>
			LL_ASSERT(0);
     cc6:	4a64      	ldr	r2, [pc, #400]	; (e58 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x658>)
     cc8:	4964      	ldr	r1, [pc, #400]	; (e5c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x65c>)
     cca:	4865      	ldr	r0, [pc, #404]	; (e60 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x660>)
     ccc:	f240 431e 	movw	r3, #1054	; 0x41e
     cd0:	f015 f836 	bl	15d40 <printk>
     cd4:	4040      	eors	r0, r0
     cd6:	f380 8811 	msr	BASEPRI, r0
     cda:	f04f 0003 	mov.w	r0, #3
     cde:	df02      	svc	2
			break;
     ce0:	e4af      	b.n	642 <ull_conn_llcp+0x22>
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
     ce2:	f894 70f9 	ldrb.w	r7, [r4, #249]	; 0xf9
     ce6:	f894 c0f8 	ldrb.w	ip, [r4, #248]	; 0xf8
     cea:	4567      	cmp	r7, ip
     cec:	d156      	bne.n	d9c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x59c>
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
     cee:	f894 7111 	ldrb.w	r7, [r4, #273]	; 0x111
     cf2:	f894 c110 	ldrb.w	ip, [r4, #272]	; 0x110
     cf6:	4567      	cmp	r7, ip
     cf8:	f000 8354 	beq.w	13a4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1c>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
     cfc:	eba7 070c 	sub.w	r7, r7, ip
     d00:	07ff      	lsls	r7, r7, #31
     d02:	f57f ac9e 	bpl.w	642 <ull_conn_llcp+0x22>
	if (conn->llcp_version.tx == 0U) {
     d06:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
     d0a:	07d8      	lsls	r0, r3, #31
     d0c:	f140 8767 	bpl.w	1bde <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x856>
	} else if (conn->llcp_version.rx) {
     d10:	079f      	lsls	r7, r3, #30
     d12:	f140 875f 	bpl.w	1bd4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x84c>
		rx = ll_pdu_rx_alloc();
     d16:	f00b fccf 	bl	c6b8 <ll_pdu_rx_alloc>
		if (!rx) {
     d1a:	4601      	mov	r1, r0
     d1c:	2800      	cmp	r0, #0
     d1e:	f000 8082 	beq.w	e26 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x626>
		conn->llcp_version.ack = conn->llcp_version.req;
     d22:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
     d26:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
		pdu->ll_id = PDU_DATA_LLID_CTRL;
     d2a:	7f03      	ldrb	r3, [r0, #28]
		rx->hdr.handle = conn->lll.handle;
     d2c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
     d2e:	80c2      	strh	r2, [r0, #6]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
     d30:	f043 0303 	orr.w	r3, r3, #3
     d34:	770b      	strb	r3, [r1, #28]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
     d36:	2003      	movs	r0, #3
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
     d38:	2206      	movs	r2, #6
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
     d3a:	230c      	movs	r3, #12
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
     d3c:	7108      	strb	r0, [r1, #4]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
     d3e:	774a      	strb	r2, [r1, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
     d40:	77cb      	strb	r3, [r1, #31]
		pdu->llctrl.version_ind.version_number =
     d42:	f894 0113 	ldrb.w	r0, [r4, #275]	; 0x113
		pdu->llctrl.version_ind.sub_version_number =
     d46:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
		pdu->llctrl.version_ind.company_id =
     d4a:	f8b4 2114 	ldrh.w	r2, [r4, #276]	; 0x114
     d4e:	f8a1 2021 	strh.w	r2, [r1, #33]	; 0x21
		pdu->llctrl.version_ind.version_number =
     d52:	f881 0020 	strb.w	r0, [r1, #32]
		pdu->llctrl.version_ind.sub_version_number =
     d56:	f8a1 3023 	strh.w	r3, [r1, #35]	; 0x23
		ll_rx_put(rx->hdr.link, rx);
     d5a:	6808      	ldr	r0, [r1, #0]
     d5c:	f00b fc7e 	bl	c65c <ll_rx_put>
		ll_rx_sched();
     d60:	f00b fc86 	bl	c670 <ll_rx_sched>
     d64:	f894 00bb 	ldrb.w	r0, [r4, #187]	; 0xbb
     d68:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
     d6c:	e464      	b.n	638 <ull_conn_llcp+0x18>
	switch (conn->llcp_length.state) {
     d6e:	f002 0107 	and.w	r1, r2, #7
     d72:	2906      	cmp	r1, #6
     d74:	f201 82dc 	bhi.w	2330 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xfa8>
     d78:	a001      	add	r0, pc, #4	; (adr r0, d80 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x580>)
     d7a:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
     d7e:	bf00      	nop
     d80:	0000102f 	.word	0x0000102f
     d84:	00000695 	.word	0x00000695
     d88:	00000695 	.word	0x00000695
     d8c:	00000695 	.word	0x00000695
     d90:	00000fab 	.word	0x00000fab
     d94:	00000fab 	.word	0x00000fab
     d98:	00000695 	.word	0x00000695
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
     d9c:	eba7 070c 	sub.w	r7, r7, ip
     da0:	07ff      	lsls	r7, r7, #31
     da2:	f57f ac4e 	bpl.w	642 <ull_conn_llcp+0x22>
	if (conn->common.fex_valid) {
     da6:	f894 10ba 	ldrb.w	r1, [r4, #186]	; 0xba
     daa:	f011 0901 	ands.w	r9, r1, #1
     dae:	f000 8493 	beq.w	16d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x350>
		rx = ll_pdu_rx_alloc();
     db2:	f00b fc81 	bl	c6b8 <ll_pdu_rx_alloc>
		if (!rx) {
     db6:	4607      	mov	r7, r0
     db8:	b3a8      	cbz	r0, e26 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x626>
		conn->llcp_feature.ack = conn->llcp_feature.req;
     dba:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
     dbe:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
		pdu->ll_id = PDU_DATA_LLID_CTRL;
     dc2:	7f03      	ldrb	r3, [r0, #28]
		rx->hdr.handle = conn->lll.handle;
     dc4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
     dc6:	80c2      	strh	r2, [r0, #6]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
     dc8:	f043 0303 	orr.w	r3, r3, #3
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
     dcc:	2209      	movs	r2, #9
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
     dce:	2003      	movs	r0, #3
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
     dd0:	4641      	mov	r1, r8
		pdu->ll_id = PDU_DATA_LLID_CTRL;
     dd2:	773b      	strb	r3, [r7, #28]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
     dd4:	7138      	strb	r0, [r7, #4]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
     dd6:	777a      	strb	r2, [r7, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
     dd8:	77fa      	strb	r2, [r7, #31]
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
     dda:	f107 0020 	add.w	r0, r7, #32
     dde:	2208      	movs	r2, #8
     de0:	f015 fe91 	bl	16b06 <memset>
		sys_put_le64(conn->llcp_feature.features_peer,
     de4:	e9d4 2342 	ldrd	r2, r3, [r4, #264]	; 0x108
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
     de8:	0c10      	lsrs	r0, r2, #16
     dea:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
     dec:	ea4f 2c10 	mov.w	ip, r0, lsr #8
	dst[0] = val;
     df0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	dst[1] = val >> 8;
     df4:	f887 c023 	strb.w	ip, [r7, #35]	; 0x23
     df8:	f3c3 2307 	ubfx	r3, r3, #8, #8
     dfc:	f3c2 2c07 	ubfx	ip, r2, #8, #8
	dst[0] = val;
     e00:	f887 0022 	strb.w	r0, [r7, #34]	; 0x22
	dst[1] = val >> 8;
     e04:	0a08      	lsrs	r0, r1, #8
	dst[0] = val;
     e06:	f887 1026 	strb.w	r1, [r7, #38]	; 0x26
     e0a:	f887 2020 	strb.w	r2, [r7, #32]
	dst[1] = val >> 8;
     e0e:	f887 c021 	strb.w	ip, [r7, #33]	; 0x21
     e12:	f887 0027 	strb.w	r0, [r7, #39]	; 0x27
     e16:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		ll_rx_put(rx->hdr.link, rx);
     e1a:	4639      	mov	r1, r7
	ll_rx_put(rx->hdr.link, rx);
     e1c:	6808      	ldr	r0, [r1, #0]
     e1e:	f00b fc1d 	bl	c65c <ll_rx_put>
	ll_rx_sched();
     e22:	f00b fc25 	bl	c670 <ll_rx_sched>
	break;
     e26:	f894 00bb 	ldrb.w	r0, [r4, #187]	; 0xbb
     e2a:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
     e2e:	e403      	b.n	638 <ull_conn_llcp+0x18>
		switch (conn->llcp_cu.state) {
     e30:	1e53      	subs	r3, r2, #1
     e32:	2b04      	cmp	r3, #4
     e34:	f201 8269 	bhi.w	230a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf82>
     e38:	a201      	add	r2, pc, #4	; (adr r2, e40 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x640>)
     e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     e3e:	bf00      	nop
     e40:	000011b7 	.word	0x000011b7
     e44:	000010d5 	.word	0x000010d5
     e48:	00000643 	.word	0x00000643
     e4c:	000011dd 	.word	0x000011dd
     e50:	00001253 	.word	0x00001253
     e54:	20001a90 	.word	0x20001a90
     e58:	00019cec 	.word	0x00019cec
     e5c:	00019a2c 	.word	0x00019a2c
     e60:	000199cc 	.word	0x000199cc
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
     e64:	48d5      	ldr	r0, [pc, #852]	; (11bc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x9bc>)
     e66:	f007 fb63 	bl	8530 <mem_acquire>
		if (tx) {
     e6a:	4605      	mov	r5, r0
     e6c:	2800      	cmp	r0, #0
     e6e:	f43f abe8 	beq.w	642 <ull_conn_llcp+0x22>
			conn->llcp.chan_map.instant = event_counter +
     e72:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     e74:	7902      	ldrb	r2, [r0, #4]
			conn->llcp.chan_map.initiate = 0U;
     e76:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
			conn->llcp.chan_map.instant = event_counter +
     e7a:	4433      	add	r3, r6
						      conn->lll.latency + 6;
     e7c:	3306      	adds	r3, #6
			conn->llcp.chan_map.instant = event_counter +
     e7e:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
			conn->llcp.chan_map.initiate = 0U;
     e82:	f36f 0100 	bfc	r1, #0, #1
			pdu_ctrl_tx->llctrl.opcode =
     e86:	2301      	movs	r3, #1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     e88:	f042 0203 	orr.w	r2, r2, #3
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
     e8c:	2008      	movs	r0, #8
			conn->llcp.chan_map.initiate = 0U;
     e8e:	f884 10c0 	strb.w	r1, [r4, #192]	; 0xc0
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     e92:	712a      	strb	r2, [r5, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
     e94:	7168      	strb	r0, [r5, #5]
			pdu_ctrl_tx->llctrl.opcode =
     e96:	71eb      	strb	r3, [r5, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
     e98:	2205      	movs	r2, #5
     e9a:	f104 01c1 	add.w	r1, r4, #193	; 0xc1
     e9e:	1828      	adds	r0, r5, r0
     ea0:	f015 fe06 	bl	16ab0 <memcpy>
	    conn->tx_head &&
     ea4:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
     ea8:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
     eac:	f8a5 200d 	strh.w	r2, [r5, #13]
	if (
     eb0:	2b00      	cmp	r3, #0
     eb2:	f000 8499 	beq.w	17e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x460>
	    !conn->llcp_enc.pause_tx &&
     eb6:	f894 113e 	ldrb.w	r1, [r4, #318]	; 0x13e
     eba:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
	    conn->tx_head &&
     ebe:	0789      	lsls	r1, r1, #30
     ec0:	f100 8494 	bmi.w	17ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x464>
	    !conn->llcp_phy.pause_tx &&
     ec4:	f894 1197 	ldrb.w	r1, [r4, #407]	; 0x197
     ec8:	07cf      	lsls	r7, r1, #31
     eca:	f100 848f 	bmi.w	17ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x464>
		if (conn->tx_head == conn->tx_data) {
     ece:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
     ed2:	428b      	cmp	r3, r1
     ed4:	f000 87d4 	beq.w	1e80 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xaf8>
		} else if (!conn->tx_ctrl) {
     ed8:	2a00      	cmp	r2, #0
     eda:	d05a      	beq.n	f92 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x792>
	tx->next = conn->tx_ctrl_last->next;
     edc:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
     ee0:	681a      	ldr	r2, [r3, #0]
     ee2:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
     ee4:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
     ee6:	682b      	ldr	r3, [r5, #0]
     ee8:	f8c4 51a4 	str.w	r5, [r4, #420]	; 0x1a4
	if (!tx->next) {
     eec:	2b00      	cmp	r3, #0
     eee:	f47f aba8 	bne.w	642 <ull_conn_llcp+0x22>
		conn->tx_data_last = tx;
     ef2:	f8c4 51ac 	str.w	r5, [r4, #428]	; 0x1ac
     ef6:	f7ff bba4 	b.w	642 <ull_conn_llcp+0x22>
		rx = ll_pdu_rx_alloc_peek(2);
     efa:	2002      	movs	r0, #2
     efc:	f00b fbbe 	bl	c67c <ll_pdu_rx_alloc_peek>
		if (!rx) {
     f00:	4607      	mov	r7, r0
     f02:	2800      	cmp	r0, #0
     f04:	f43f ab9d 	beq.w	642 <ull_conn_llcp+0x22>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
     f08:	48ac      	ldr	r0, [pc, #688]	; (11bc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x9bc>)
     f0a:	f007 fb11 	bl	8530 <mem_acquire>
		if (!tx) {
     f0e:	4605      	mov	r5, r0
     f10:	2800      	cmp	r0, #0
     f12:	f43f ab96 	beq.w	642 <ull_conn_llcp+0x22>
		conn->llcp.phy_upd_ind.initiate = 0U;
     f16:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
     f1a:	f36f 0300 	bfc	r3, #0, #1
		if (!((conn->llcp.phy_upd_ind.tx |
     f1e:	f3c3 0082 	ubfx	r0, r3, #2, #3
		       conn->llcp.phy_upd_ind.rx) & 0x07)) {
     f22:	f3c3 1242 	ubfx	r2, r3, #5, #3
		if (!((conn->llcp.phy_upd_ind.tx |
     f26:	ea50 0802 	orrs.w	r8, r0, r2
		conn->llcp.phy_upd_ind.initiate = 0U;
     f2a:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
		if (!((conn->llcp.phy_upd_ind.tx |
     f2e:	b2db      	uxtb	r3, r3
     f30:	f040 862a 	bne.w	1b88 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x800>
			conn->llcp_ack = conn->llcp_req;
     f34:	f894 20bb 	ldrb.w	r2, [r4, #187]	; 0xbb
			conn->llcp.phy_upd_ind.instant = 0U;
     f38:	f8a4 80c2 	strh.w	r8, [r4, #194]	; 0xc2
			if (conn->llcp.phy_upd_ind.cmd) {
     f3c:	079b      	lsls	r3, r3, #30
			conn->llcp_ack = conn->llcp_req;
     f3e:	f884 20bc 	strb.w	r2, [r4, #188]	; 0xbc
			if (conn->llcp.phy_upd_ind.cmd) {
     f42:	f100 8709 	bmi.w	1d58 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9d0>
     f46:	4643      	mov	r3, r8
     f48:	4641      	mov	r1, r8
		pdu_ctrl_tx->len =
     f4a:	2205      	movs	r2, #5
     f4c:	716a      	strb	r2, [r5, #5]
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
     f4e:	f885 8008 	strb.w	r8, [r5, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     f52:	792a      	ldrb	r2, [r5, #4]
		ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
     f54:	726b      	strb	r3, [r5, #9]
	    conn->tx_head &&
     f56:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
     f5a:	8169      	strh	r1, [r5, #10]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     f5c:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode =
     f60:	2018      	movs	r0, #24
     f62:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     f66:	712a      	strb	r2, [r5, #4]
		pdu_ctrl_tx->llctrl.opcode =
     f68:	71e8      	strb	r0, [r5, #7]
	if (
     f6a:	2b00      	cmp	r3, #0
     f6c:	f000 8432 	beq.w	17d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x44c>
	    !conn->llcp_enc.pause_tx &&
     f70:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
     f74:	0797      	lsls	r7, r2, #30
     f76:	f100 842d 	bmi.w	17d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x44c>
	    !conn->llcp_phy.pause_tx &&
     f7a:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
     f7e:	07d6      	lsls	r6, r2, #31
     f80:	f100 8428 	bmi.w	17d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x44c>
		if (conn->tx_head == conn->tx_data) {
     f84:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
     f88:	4293      	cmp	r3, r2
     f8a:	f000 876b 	beq.w	1e64 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xadc>
		} else if (!conn->tx_ctrl) {
     f8e:	2900      	cmp	r1, #0
     f90:	d1a4      	bne.n	edc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x6dc>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
     f92:	791a      	ldrb	r2, [r3, #4]
     f94:	f002 0203 	and.w	r2, r2, #3
     f98:	2a03      	cmp	r2, #3
     f9a:	f000 87cf 	beq.w	1f3c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbb4>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
     f9e:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
     fa2:	e79b      	b.n	edc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x6dc>
		conn_upd_curr = conn;
     fa4:	603c      	str	r4, [r7, #0]
     fa6:	f7ff bbdc 	b.w	762 <ull_conn_llcp+0x142>
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
     faa:	f002 0207 	and.w	r2, r2, #7
		lll->max_rx_octets = conn->llcp_length.rx_octets;
     fae:	f8b4 c188 	ldrh.w	ip, [r4, #392]	; 0x188
		lll->max_rx_time = conn->llcp_length.rx_time;
     fb2:	f8b4 118c 	ldrh.w	r1, [r4, #396]	; 0x18c
		tx_octets = conn->llcp_length.tx_octets;
     fb6:	f8b4 918a 	ldrh.w	r9, [r4, #394]	; 0x18a
		uint16_t tx_time = conn->llcp_length.tx_time;
     fba:	f8b4 818e 	ldrh.w	r8, [r4, #398]	; 0x18e
		lll->max_rx_octets = conn->llcp_length.rx_octets;
     fbe:	f8a4 c040 	strh.w	ip, [r4, #64]	; 0x40
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
     fc2:	2a04      	cmp	r2, #4
		lll->max_rx_time = conn->llcp_length.rx_time;
     fc4:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
     fc8:	f000 856a 	beq.w	1aa0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x718>
			conn->llcp_length.state =
     fcc:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
     fd0:	2206      	movs	r2, #6
     fd2:	f362 0302 	bfi	r3, r2, #0, #3
     fd6:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
		rx = conn->llcp_rx;
     fda:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
		LL_ASSERT(rx && rx->hdr.link);
     fde:	2f00      	cmp	r7, #0
     fe0:	f000 8507 	beq.w	19f2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x66a>
     fe4:	6838      	ldr	r0, [r7, #0]
     fe6:	2800      	cmp	r0, #0
     fe8:	f000 8503 	beq.w	19f2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x66a>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
     fec:	7f3b      	ldrb	r3, [r7, #28]
		conn->llcp_rx = rx->hdr.link->mem;
     fee:	6842      	ldr	r2, [r0, #4]
		rx->hdr.handle = conn->lll.handle;
     ff0:	f8b4 e028 	ldrh.w	lr, [r4, #40]	; 0x28
		conn->llcp_rx = rx->hdr.link->mem;
     ff4:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
     ff8:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
     ffc:	2203      	movs	r2, #3
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
     ffe:	773b      	strb	r3, [r7, #28]
		pdu_ctrl_rx->len =
    1000:	f04f 0a09 	mov.w	sl, #9
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    1004:	2315      	movs	r3, #21
		rx->hdr.handle = conn->lll.handle;
    1006:	f8a7 e006 	strh.w	lr, [r7, #6]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    100a:	f8a7 c020 	strh.w	ip, [r7, #32]
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    100e:	8479      	strh	r1, [r7, #34]	; 0x22
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1010:	713a      	strb	r2, [r7, #4]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    1012:	77fb      	strb	r3, [r7, #31]
		ll_rx_put(rx->hdr.link, rx);
    1014:	4639      	mov	r1, r7
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
    1016:	f8a7 9024 	strh.w	r9, [r7, #36]	; 0x24
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    101a:	f8a7 8026 	strh.w	r8, [r7, #38]	; 0x26
		pdu_ctrl_rx->len =
    101e:	f887 a01d 	strb.w	sl, [r7, #29]
		ll_rx_put(rx->hdr.link, rx);
    1022:	f00b fb1b 	bl	c65c <ll_rx_put>
		ll_rx_sched();
    1026:	f00b fb23 	bl	c670 <ll_rx_sched>
	break;
    102a:	f7ff bb33 	b.w	694 <ull_conn_llcp+0x74>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    102e:	4863      	ldr	r0, [pc, #396]	; (11bc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x9bc>)
    1030:	f007 fa7e 	bl	8530 <mem_acquire>
		if (!tx) {
    1034:	2800      	cmp	r0, #0
    1036:	f43f ab2d 	beq.w	694 <ull_conn_llcp+0x74>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    103a:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    103e:	f8b4 718a 	ldrh.w	r7, [r4, #394]	; 0x18a
		conn->default_tx_time = conn->llcp_length.tx_time;
    1042:	f8b4 218e 	ldrh.w	r2, [r4, #398]	; 0x18e
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    1046:	f8a4 70b6 	strh.w	r7, [r4, #182]	; 0xb6
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    104a:	2101      	movs	r1, #1
		conn->default_tx_time = conn->llcp_length.tx_time;
    104c:	f8a4 20b8 	strh.w	r2, [r4, #184]	; 0xb8
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    1050:	f361 0302 	bfi	r3, r1, #0, #3
		pdu_ctrl_tx->len =
    1054:	2209      	movs	r2, #9
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    1056:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
		pdu_ctrl_tx->len =
    105a:	7142      	strb	r2, [r0, #5]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    105c:	7902      	ldrb	r2, [r0, #4]
	    conn->tx_head &&
    105e:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
    1062:	8187      	strh	r7, [r0, #12]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1064:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    1068:	2714      	movs	r7, #20
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
    106a:	72c1      	strb	r1, [r0, #11]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    106c:	73c1      	strb	r1, [r0, #15]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    106e:	f04f 0c00 	mov.w	ip, #0
    1072:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1076:	7102      	strb	r2, [r0, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    1078:	71c7      	strb	r7, [r0, #7]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
    107a:	2248      	movs	r2, #72	; 0x48
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    107c:	271b      	movs	r7, #27
    107e:	f880 c009 	strb.w	ip, [r0, #9]
    1082:	7207      	strb	r7, [r0, #8]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
    1084:	7282      	strb	r2, [r0, #10]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    1086:	7382      	strb	r2, [r0, #14]
	if (
    1088:	2b00      	cmp	r3, #0
    108a:	f000 847c 	beq.w	1986 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5fe>
	    !conn->llcp_enc.pause_tx &&
    108e:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
    1092:	0792      	lsls	r2, r2, #30
    1094:	f100 8477 	bmi.w	1986 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5fe>
	    !conn->llcp_phy.pause_tx &&
    1098:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
    109c:	07d7      	lsls	r7, r2, #31
    109e:	f100 8472 	bmi.w	1986 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5fe>
		if (conn->tx_head == conn->tx_data) {
    10a2:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
    10a6:	4293      	cmp	r3, r2
    10a8:	f000 8702 	beq.w	1eb0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb28>
		} else if (!conn->tx_ctrl) {
    10ac:	2900      	cmp	r1, #0
    10ae:	f000 874c 	beq.w	1f4a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbc2>
	tx->next = conn->tx_ctrl_last->next;
    10b2:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    10b6:	681a      	ldr	r2, [r3, #0]
    10b8:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    10ba:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    10bc:	6803      	ldr	r3, [r0, #0]
    10be:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
    10c2:	2b00      	cmp	r3, #0
    10c4:	f000 863a 	beq.w	1d3c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9b4>
		conn->procedure_expire = conn->procedure_reload;
    10c8:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    10cc:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	break;
    10d0:	f7ff bae0 	b.w	694 <ull_conn_llcp+0x74>
		switch (conn->llcp_cu.state) {
    10d4:	4f3a      	ldr	r7, [pc, #232]	; (11c0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x9c0>)
		rx = ll_pdu_rx_alloc_peek(1);
    10d6:	2001      	movs	r0, #1
    10d8:	f00b fad0 	bl	c67c <ll_pdu_rx_alloc_peek>
		if (!rx) {
    10dc:	4606      	mov	r6, r0
    10de:	2800      	cmp	r0, #0
    10e0:	f43f aaaf 	beq.w	642 <ull_conn_llcp+0x22>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    10e4:	4835      	ldr	r0, [pc, #212]	; (11bc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x9bc>)
    10e6:	f007 fa23 	bl	8530 <mem_acquire>
		if (!tx) {
    10ea:	4680      	mov	r8, r0
    10ec:	2800      	cmp	r0, #0
    10ee:	f43f aaa8 	beq.w	642 <ull_conn_llcp+0x22>
		(void)ll_pdu_rx_alloc();
    10f2:	f00b fae1 	bl	c6b8 <ll_pdu_rx_alloc>
		rx->hdr.link->mem = conn->llcp_rx;
    10f6:	6833      	ldr	r3, [r6, #0]
    10f8:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
    10fc:	605a      	str	r2, [r3, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    10fe:	230c      	movs	r3, #12
		conn->llcp_rx = rx;
    1100:	f8c4 60e0 	str.w	r6, [r4, #224]	; 0xe0
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    1104:	f888 3005 	strb.w	r3, [r8, #5]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
    1108:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    110c:	f898 2004 	ldrb.w	r2, [r8, #4]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
    1110:	482c      	ldr	r0, [pc, #176]	; (11c4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x9c4>)
	conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_REQ;
    1112:	f894 10e6 	ldrb.w	r1, [r4, #230]	; 0xe6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1116:	f042 0203 	orr.w	r2, r2, #3
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
    111a:	fba0 0303 	umull	r0, r3, r0, r3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    111e:	2000      	movs	r0, #0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1120:	f888 2004 	strb.w	r2, [r8, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    1124:	f888 0007 	strb.w	r0, [r8, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
    1128:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
    112c:	f888 2008 	strb.w	r2, [r8, #8]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    1130:	f3c3 238f 	ubfx	r3, r3, #10, #16
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    1134:	6822      	ldr	r2, [r4, #0]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    1136:	f8a8 3009 	strh.w	r3, [r8, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    113a:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
    113e:	f8a8 300b 	strh.w	r3, [r8, #11]
	conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_REQ;
    1142:	2003      	movs	r0, #3
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    1144:	f8b4 30ea 	ldrh.w	r3, [r4, #234]	; 0xea
    1148:	f8a8 300d 	strh.w	r3, [r8, #13]
	conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_REQ;
    114c:	f360 0102 	bfi	r1, r0, #0, #3
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    1150:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
    1154:	f8a8 300f 	strh.w	r3, [r8, #15]
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    1158:	2a00      	cmp	r2, #0
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    115a:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
	conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_REQ;
    115e:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    1162:	da0a      	bge.n	117a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x97a>
			uint32_t ticks_prepare_to_start =
    1164:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
				(conn->evt.ticks_xtal_to_start &
    1168:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
    116c:	428b      	cmp	r3, r1
    116e:	bf2c      	ite	cs
    1170:	18eb      	addcs	r3, r5, r3
    1172:	186b      	addcc	r3, r5, r1
    1174:	1a9a      	subs	r2, r3, r2
    1176:	f8c4 20c8 	str.w	r2, [r4, #200]	; 0xc8
		mfy_sched_offset->fp = fp_mfy_select_or_use;
    117a:	4b13      	ldr	r3, [pc, #76]	; (11c8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x9c8>)
		conn->llcp.conn_upd.pdu_win_offset = (uint16_t *)
    117c:	f108 0109 	add.w	r1, r8, #9
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    1180:	2201      	movs	r2, #1
		conn->llcp.conn_upd.pdu_win_offset = (uint16_t *)
    1182:	f8c4 10c4 	str.w	r1, [r4, #196]	; 0xc4
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    1186:	4610      	mov	r0, r2
    1188:	2102      	movs	r1, #2
		mfy_sched_offset->fp = fp_mfy_select_or_use;
    118a:	60df      	str	r7, [r3, #12]
		mfy_sched_offset->param = (void *)conn;
    118c:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    118e:	f007 faa7 	bl	86e0 <mayfly_enqueue>
		LL_ASSERT(!retval);
    1192:	2800      	cmp	r0, #0
    1194:	f43f aa55 	beq.w	642 <ull_conn_llcp+0x22>
    1198:	4a0c      	ldr	r2, [pc, #48]	; (11cc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x9cc>)
    119a:	490d      	ldr	r1, [pc, #52]	; (11d0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x9d0>)
    119c:	480d      	ldr	r0, [pc, #52]	; (11d4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x9d4>)
    119e:	f640 1334 	movw	r3, #2356	; 0x934
    11a2:	f014 fdcd 	bl	15d40 <printk>
    11a6:	4040      	eors	r0, r0
    11a8:	f380 8811 	msr	BASEPRI, r0
    11ac:	f04f 0003 	mov.w	r0, #3
    11b0:	df02      	svc	2
    11b2:	f7ff ba46 	b.w	642 <ull_conn_llcp+0x22>
			fp_mfy_select_or_use = ull_sched_mfy_win_offset_use;
    11b6:	4f08      	ldr	r7, [pc, #32]	; (11d8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x9d8>)
    11b8:	e78d      	b.n	10d6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x8d6>
    11ba:	bf00      	nop
    11bc:	20001a90 	.word	0x20001a90
    11c0:	00002bb9 	.word	0x00002bb9
    11c4:	d1b71759 	.word	0xd1b71759
    11c8:	2000044c 	.word	0x2000044c
    11cc:	00019cec 	.word	0x00019cec
    11d0:	00019b6c 	.word	0x00019b6c
    11d4:	000199cc 	.word	0x000199cc
    11d8:	0001022d 	.word	0x0001022d
			conn->llcp.conn_upd.instant = event_counter +
    11dc:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    11de:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
				CONTAINER_OF(conn->llcp.conn_upd.pdu_win_offset,
    11e2:	f8d4 50c4 	ldr.w	r5, [r4, #196]	; 0xc4
	    conn->tx_head &&
    11e6:	f8d4 019c 	ldr.w	r0, [r4, #412]	; 0x19c
			conn->llcp.conn_upd.instant = event_counter +
    11ea:	4443      	add	r3, r8
						      conn->lll.latency + 6;
    11ec:	3306      	adds	r3, #6
    11ee:	b29b      	uxth	r3, r3
			conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    11f0:	f36f 0202 	bfc	r2, #0, #3
			conn->llcp.conn_upd.instant = event_counter +
    11f4:	f8a4 30c0 	strh.w	r3, [r4, #192]	; 0xc0
			pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    11f8:	812b      	strh	r3, [r5, #8]
			conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    11fa:	f884 20e6 	strb.w	r2, [r4, #230]	; 0xe6
			tx = CONTAINER_OF(pdu_ctrl_tx, struct node_tx, pdu);
    11fe:	f1a5 0309 	sub.w	r3, r5, #9
	if (
    1202:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
    1206:	2800      	cmp	r0, #0
    1208:	f000 849d 	beq.w	1b46 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7be>
	    !conn->llcp_enc.pause_tx &&
    120c:	f894 113e 	ldrb.w	r1, [r4, #318]	; 0x13e
	    conn->tx_head &&
    1210:	078e      	lsls	r6, r1, #30
    1212:	f100 8498 	bmi.w	1b46 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7be>
	    !conn->llcp_phy.pause_tx &&
    1216:	f894 1197 	ldrb.w	r1, [r4, #407]	; 0x197
    121a:	07c9      	lsls	r1, r1, #31
    121c:	f100 8493 	bmi.w	1b46 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7be>
		if (conn->tx_head == conn->tx_data) {
    1220:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
    1224:	4288      	cmp	r0, r1
    1226:	f000 86e7 	beq.w	1ff8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc70>
		} else if (!conn->tx_ctrl) {
    122a:	2a00      	cmp	r2, #0
    122c:	f000 8737 	beq.w	209e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd16>
	tx->next = conn->tx_ctrl_last->next;
    1230:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
    1234:	6811      	ldr	r1, [r2, #0]
    1236:	f845 1c09 	str.w	r1, [r5, #-9]
	conn->tx_ctrl_last->next = tx;
    123a:	6013      	str	r3, [r2, #0]
	conn->tx_ctrl_last = tx;
    123c:	f855 0c09 	ldr.w	r0, [r5, #-9]
    1240:	f8c4 31a4 	str.w	r3, [r4, #420]	; 0x1a4
	if (!tx->next) {
    1244:	2800      	cmp	r0, #0
    1246:	f47f a9fc 	bne.w	642 <ull_conn_llcp+0x22>
		conn->tx_data_last = tx;
    124a:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
    124e:	f7ff b9f8 	b.w	642 <ull_conn_llcp+0x22>
			conn->llcp_ack = conn->llcp_req;
    1252:	f894 20bb 	ldrb.w	r2, [r4, #187]	; 0xbb
				CONTAINER_OF(conn->llcp.conn_upd.pdu_win_offset,
    1256:	f8d4 50c4 	ldr.w	r5, [r4, #196]	; 0xc4
			conn->llcp_ack = conn->llcp_req;
    125a:	f884 20bc 	strb.w	r2, [r4, #188]	; 0xbc
	    conn->tx_head &&
    125e:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
			conn->llcp_cu.ack = conn->llcp_cu.req;
    1262:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
    1266:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
	conn_upd_curr = NULL;
    126a:	2100      	movs	r1, #0
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    126c:	f894 215c 	ldrb.w	r2, [r4, #348]	; 0x15c
    1270:	f884 215d 	strb.w	r2, [r4, #349]	; 0x15d
	conn_upd_curr = NULL;
    1274:	6039      	str	r1, [r7, #0]
			tx = CONTAINER_OF(pdu_ctrl_tx, struct node_tx, pdu);
    1276:	f1a5 0209 	sub.w	r2, r5, #9
	if (
    127a:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
    127e:	2b00      	cmp	r3, #0
    1280:	f000 846c 	beq.w	1b5c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7d4>
	    !conn->llcp_enc.pause_tx &&
    1284:	f894 013e 	ldrb.w	r0, [r4, #318]	; 0x13e
	    conn->tx_head &&
    1288:	0780      	lsls	r0, r0, #30
    128a:	f100 8467 	bmi.w	1b5c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7d4>
	    !conn->llcp_phy.pause_tx &&
    128e:	f894 0197 	ldrb.w	r0, [r4, #407]	; 0x197
    1292:	07c7      	lsls	r7, r0, #31
    1294:	f100 8462 	bmi.w	1b5c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7d4>
		if (conn->tx_head == conn->tx_data) {
    1298:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
    129c:	4283      	cmp	r3, r0
    129e:	f000 869b 	beq.w	1fd8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc50>
		} else if (!conn->tx_ctrl) {
    12a2:	2900      	cmp	r1, #0
    12a4:	f000 8705 	beq.w	20b2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd2a>
	tx->next = conn->tx_ctrl_last->next;
    12a8:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    12ac:	6819      	ldr	r1, [r3, #0]
    12ae:	f845 1c09 	str.w	r1, [r5, #-9]
	conn->tx_ctrl_last->next = tx;
    12b2:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
    12b4:	f855 3c09 	ldr.w	r3, [r5, #-9]
    12b8:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
	if (!tx->next) {
    12bc:	2b00      	cmp	r3, #0
    12be:	f47f a9c0 	bne.w	642 <ull_conn_llcp+0x22>
		conn->tx_data_last = tx;
    12c2:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
    12c6:	f7ff b9bc 	b.w	642 <ull_conn_llcp+0x22>
		ecb_encrypt(&conn->llcp_enc.ltk[0],
    12ca:	f104 075f 	add.w	r7, r4, #95	; 0x5f
    12ce:	463b      	mov	r3, r7
    12d0:	462a      	mov	r2, r5
    12d2:	f104 01ce 	add.w	r1, r4, #206	; 0xce
    12d6:	f204 1049 	addw	r0, r4, #329	; 0x149
    12da:	f011 fd01 	bl	12ce0 <ecb_encrypt>
		memcpy(&lll->ccm_tx.key[0], &lll->ccm_rx.key[0],
    12de:	4639      	mov	r1, r7
    12e0:	2210      	movs	r2, #16
    12e2:	f104 0080 	add.w	r0, r4, #128	; 0x80
    12e6:	f015 fbe3 	bl	16ab0 <memcpy>
		memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
    12ea:	2208      	movs	r2, #8
    12ec:	f104 0178 	add.w	r1, r4, #120	; 0x78
    12f0:	f104 0099 	add.w	r0, r4, #153	; 0x99
    12f4:	f015 fbdc 	bl	16ab0 <memcpy>
		lll->ccm_rx.direction = 0;
    12f8:	f894 0077 	ldrb.w	r0, [r4, #119]	; 0x77
		lll->ccm_tx.direction = 1;
    12fc:	f894 2098 	ldrb.w	r2, [r4, #152]	; 0x98
		lll->enc_rx = 1;
    1300:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
		lll->ccm_rx.counter = 0;
    1304:	f884 506f 	strb.w	r5, [r4, #111]	; 0x6f
		lll->enc_rx = 1;
    1308:	f043 0308 	orr.w	r3, r3, #8
		lll->ccm_rx.direction = 0;
    130c:	f365 0000 	bfi	r0, r5, #0, #1
		lll->ccm_tx.direction = 1;
    1310:	f042 0201 	orr.w	r2, r2, #1
		lll->ccm_rx.direction = 0;
    1314:	f884 0077 	strb.w	r0, [r4, #119]	; 0x77
		lll->enc_rx = 1;
    1318:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		lll->ccm_rx.counter = 0;
    131c:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
    1320:	f884 5071 	strb.w	r5, [r4, #113]	; 0x71
    1324:	f884 5072 	strb.w	r5, [r4, #114]	; 0x72
    1328:	f884 5073 	strb.w	r5, [r4, #115]	; 0x73
    132c:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
    1330:	f884 5075 	strb.w	r5, [r4, #117]	; 0x75
    1334:	f884 5076 	strb.w	r5, [r4, #118]	; 0x76
		lll->ccm_tx.counter = 0;
    1338:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    133c:	4641      	mov	r1, r8
		lll->ccm_tx.counter = 0;
    133e:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
		lll->ccm_tx.direction = 1;
    1342:	f884 2098 	strb.w	r2, [r4, #152]	; 0x98
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    1346:	4620      	mov	r0, r4
    1348:	f00b fff0 	bl	d32c <start_enc_rsp_send>
	    conn->tx_head &&
    134c:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
	if (
    1350:	2b00      	cmp	r3, #0
    1352:	f000 819e 	beq.w	1692 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x30a>
	    !conn->llcp_enc.pause_tx &&
    1356:	f894 113e 	ldrb.w	r1, [r4, #318]	; 0x13e
    135a:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
	    conn->tx_head &&
    135e:	078d      	lsls	r5, r1, #30
    1360:	f100 8199 	bmi.w	1696 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x30e>
	    !conn->llcp_phy.pause_tx &&
    1364:	f894 1197 	ldrb.w	r1, [r4, #407]	; 0x197
    1368:	07c8      	lsls	r0, r1, #31
    136a:	f100 8194 	bmi.w	1696 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x30e>
		if (conn->tx_head == conn->tx_data) {
    136e:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
    1372:	428b      	cmp	r3, r1
    1374:	f47f ac31 	bne.w	bda <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3da>
			conn->tx_data = conn->tx_data->next;
    1378:	6819      	ldr	r1, [r3, #0]
    137a:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    137e:	2a00      	cmp	r2, #0
    1380:	f47f ac2e 	bne.w	be0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3e0>
			tx->next = conn->tx_head->next;
    1384:	681a      	ldr	r2, [r3, #0]
    1386:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
    1388:	601e      	str	r6, [r3, #0]
				conn->tx_ctrl = tx;
    138a:	6833      	ldr	r3, [r6, #0]
				conn->tx_ctrl_last = tx;
    138c:	e9c4 6668 	strd	r6, r6, [r4, #416]	; 0x1a0
    1390:	e42e      	b.n	bf0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3f0>
		if (!conn->tx_ctrl) {
    1392:	2d00      	cmp	r5, #0
    1394:	f47f ac87 	bne.w	ca6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4a6>
			tx->next = conn->tx_head;
    1398:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    139a:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    139e:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
    13a2:	e488      	b.n	cb6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4b6>
		} else if (conn->llcp_conn_param.ack !=
    13a4:	f894 c15d 	ldrb.w	ip, [r4, #349]	; 0x15d
    13a8:	f894 715c 	ldrb.w	r7, [r4, #348]	; 0x15c
    13ac:	45bc      	cmp	ip, r7
    13ae:	f000 8221 	beq.w	17f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x46c>
	conn_upd = conn_upd_curr;
    13b2:	4fc1      	ldr	r7, [pc, #772]	; (16b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x330>)
    13b4:	f8d7 c000 	ldr.w	ip, [r7]
	if (conn_upd && (conn_upd != conn)) {
    13b8:	f1bc 0f00 	cmp.w	ip, #0
    13bc:	f000 84ed 	beq.w	1d9a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa12>
    13c0:	4564      	cmp	r4, ip
    13c2:	f47f a93e 	bne.w	642 <ull_conn_llcp+0x22>
	switch (conn->llcp_conn_param.state) {
    13c6:	f894 c15e 	ldrb.w	ip, [r4, #350]	; 0x15e
    13ca:	f00c 0c07 	and.w	ip, ip, #7
    13ce:	f1bc 0f07 	cmp.w	ip, #7
    13d2:	f200 8787 	bhi.w	22e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf5c>
    13d6:	f20f 0e08 	addw	lr, pc, #8
    13da:	f85e f02c 	ldr.w	pc, [lr, ip, lsl #2]
    13de:	bf00      	nop
    13e0:	00001505 	.word	0x00001505
    13e4:	00001483 	.word	0x00001483
    13e8:	00001435 	.word	0x00001435
    13ec:	00000639 	.word	0x00000639
    13f0:	00000639 	.word	0x00000639
    13f4:	00000639 	.word	0x00000639
    13f8:	00000639 	.word	0x00000639
    13fc:	00001401 	.word	0x00001401
			event_counter = lll->event_counter +
    1400:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
    1402:	8e63      	ldrh	r3, [r4, #50]	; 0x32
		conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    1404:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
			CONTAINER_OF(conn->llcp_conn_param.pdu_win_offset0,
    1408:	f8d4 1178 	ldr.w	r1, [r4, #376]	; 0x178
			event_counter = lll->event_counter +
    140c:	4403      	add	r3, r0
		conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    140e:	2004      	movs	r0, #4
		pdu_ctrl_tx->llctrl.conn_param_req.reference_conn_event_count =
    1410:	4433      	add	r3, r6
		conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    1412:	f360 0202 	bfi	r2, r0, #0, #3
		pdu_ctrl_tx->llctrl.conn_param_req.reference_conn_event_count =
    1416:	f821 3c02 	strh.w	r3, [r1, #-2]
	ctrl_tx_pause_enqueue(conn, tx, false);
    141a:	4620      	mov	r0, r4
		conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    141c:	f884 215e 	strb.w	r2, [r4, #350]	; 0x15e
	ctrl_tx_pause_enqueue(conn, tx, false);
    1420:	3913      	subs	r1, #19
    1422:	2200      	movs	r2, #0
    1424:	f00b fd80 	bl	cf28 <ctrl_tx_pause_enqueue>
    1428:	f894 00bb 	ldrb.w	r0, [r4, #187]	; 0xbb
    142c:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
}
    1430:	f7ff b902 	b.w	638 <ull_conn_llcp+0x18>
	if (conn->llcp_enc.pause_tx) {
    1434:	0790      	lsls	r0, r2, #30
    1436:	f53f a904 	bmi.w	642 <ull_conn_llcp+0x22>
	rx = ll_pdu_rx_alloc();
    143a:	f00b f93d 	bl	c6b8 <ll_pdu_rx_alloc>
	if (!rx) {
    143e:	4601      	mov	r1, r0
    1440:	2800      	cmp	r0, #0
    1442:	f43f acf0 	beq.w	e26 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x626>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    1446:	f894 015e 	ldrb.w	r0, [r4, #350]	; 0x15e
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    144a:	7f0b      	ldrb	r3, [r1, #28]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    144c:	2203      	movs	r2, #3
    144e:	f362 0002 	bfi	r0, r2, #0, #3
    1452:	f884 015e 	strb.w	r0, [r4, #350]	; 0x15e
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    1456:	4313      	orrs	r3, r2
	rx->hdr.handle = conn->lll.handle;
    1458:	8d20      	ldrh	r0, [r4, #40]	; 0x28
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    145a:	710a      	strb	r2, [r1, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    145c:	2218      	movs	r2, #24
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    145e:	770b      	strb	r3, [r1, #28]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    1460:	774a      	strb	r2, [r1, #29]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    1462:	f8b4 2160 	ldrh.w	r2, [r4, #352]	; 0x160
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    1466:	f8b4 3162 	ldrh.w	r3, [r4, #354]	; 0x162
	rx->hdr.handle = conn->lll.handle;
    146a:	80c8      	strh	r0, [r1, #6]
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    146c:	f8b4 0164 	ldrh.w	r0, [r4, #356]	; 0x164
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    1470:	840a      	strh	r2, [r1, #32]
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    1472:	f8b4 2166 	ldrh.w	r2, [r4, #358]	; 0x166
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    1476:	844b      	strh	r3, [r1, #34]	; 0x22
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    1478:	230f      	movs	r3, #15
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    147a:	8488      	strh	r0, [r1, #36]	; 0x24
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    147c:	84ca      	strh	r2, [r1, #38]	; 0x26
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    147e:	77cb      	strb	r3, [r1, #31]
    1480:	e4cc      	b.n	e1c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x61c>
	if (conn->llcp_conn_param.status) {
    1482:	f894 815f 	ldrb.w	r8, [r4, #351]	; 0x15f
    1486:	f1b8 0f00 	cmp.w	r8, #0
    148a:	f040 8537 	bne.w	1efc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb74>
	if (!conn->lll.role) {
    148e:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    1492:	2b00      	cmp	r3, #0
    1494:	f2c0 8670 	blt.w	2178 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xdf0>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    1498:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
		if (conn->llcp_conn_param.preferred_periodicity) {
    149c:	f894 0168 	ldrb.w	r0, [r4, #360]	; 0x168
		conn->llcp_cu.win_offset_us = 0U;
    14a0:	f8c4 80f0 	str.w	r8, [r4, #240]	; 0xf0
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    14a4:	2205      	movs	r2, #5
    14a6:	f362 0302 	bfi	r3, r2, #0, #3
		conn->llcp_cu.win_size = 1U;
    14aa:	2201      	movs	r2, #1
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    14ac:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
		conn->llcp_cu.win_size = 1U;
    14b0:	f884 20f4 	strb.w	r2, [r4, #244]	; 0xf4
		if (conn->llcp_conn_param.preferred_periodicity) {
    14b4:	2800      	cmp	r0, #0
    14b6:	f000 865b 	beq.w	2170 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xde8>
				((conn->llcp_conn_param.interval_min /
    14ba:	f8b4 3160 	ldrh.w	r3, [r4, #352]	; 0x160
    14be:	fbb3 f3f0 	udiv	r3, r3, r0
				  conn->llcp_conn_param.preferred_periodicity) +
    14c2:	4413      	add	r3, r2
			conn->llcp_cu.interval =
    14c4:	fb13 f300 	smulbb	r3, r3, r0
    14c8:	b29b      	uxth	r3, r3
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    14ca:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    14ce:	f894 00e6 	ldrb.w	r0, [r4, #230]	; 0xe6
    14d2:	f8a4 30e8 	strh.w	r3, [r4, #232]	; 0xe8
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    14d6:	f3c2 03c0 	ubfx	r3, r2, #3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    14da:	00db      	lsls	r3, r3, #3
    14dc:	f020 020f 	bic.w	r2, r0, #15
    14e0:	f043 0302 	orr.w	r3, r3, #2
    14e4:	4313      	orrs	r3, r2
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
    14e6:	f8b4 0164 	ldrh.w	r0, [r4, #356]	; 0x164
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
    14ea:	f8b4 2166 	ldrh.w	r2, [r4, #358]	; 0x166
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    14ee:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
		conn->llcp_cu.ack--;
    14f2:	3901      	subs	r1, #1
    14f4:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
    14f8:	f8a4 00ea 	strh.w	r0, [r4, #234]	; 0xea
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
    14fc:	f8a4 20ec 	strh.w	r2, [r4, #236]	; 0xec
		return;
    1500:	f7ff b89f 	b.w	642 <ull_conn_llcp+0x22>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1504:	486d      	ldr	r0, [pc, #436]	; (16bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x334>)
    1506:	f007 f813 	bl	8530 <mem_acquire>
	if (!tx) {
    150a:	4601      	mov	r1, r0
    150c:	2800      	cmp	r0, #0
    150e:	f43f ac8a 	beq.w	e26 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x626>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1512:	7903      	ldrb	r3, [r0, #4]
	conn_upd_curr = conn;
    1514:	603c      	str	r4, [r7, #0]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1516:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    151a:	2218      	movs	r2, #24
    151c:	7142      	strb	r2, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    151e:	7103      	strb	r3, [r0, #4]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    1520:	f8b4 0160 	ldrh.w	r0, [r4, #352]	; 0x160
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    1524:	f8b4 2162 	ldrh.w	r2, [r4, #354]	; 0x162
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    1528:	f8b4 3164 	ldrh.w	r3, [r4, #356]	; 0x164
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    152c:	8108      	strh	r0, [r1, #8]
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    152e:	f8b4 0166 	ldrh.w	r0, [r4, #358]	; 0x166
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    1532:	814a      	strh	r2, [r1, #10]
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    1534:	818b      	strh	r3, [r1, #12]
	p->preferred_periodicity = 0U;
    1536:	2200      	movs	r2, #0
	p->offset1 = sys_cpu_to_le16(0xffff);
    1538:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	p->preferred_periodicity = 0U;
    153c:	740a      	strb	r2, [r1, #16]
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    153e:	81c8      	strh	r0, [r1, #14]
	p->offset0 = sys_cpu_to_le16(0x0000);
    1540:	74ca      	strb	r2, [r1, #19]
    1542:	750a      	strb	r2, [r1, #20]
	p->offset1 = sys_cpu_to_le16(0xffff);
    1544:	754b      	strb	r3, [r1, #21]
    1546:	758b      	strb	r3, [r1, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
    1548:	75cb      	strb	r3, [r1, #23]
    154a:	760b      	strb	r3, [r1, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
    154c:	764b      	strb	r3, [r1, #25]
    154e:	768b      	strb	r3, [r1, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
    1550:	76cb      	strb	r3, [r1, #27]
    1552:	770b      	strb	r3, [r1, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
    1554:	774b      	strb	r3, [r1, #29]
    1556:	778b      	strb	r3, [r1, #30]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_OFFS_REQ;
    1558:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    155c:	6822      	ldr	r2, [r4, #0]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_OFFS_REQ;
    155e:	2006      	movs	r0, #6
    1560:	f360 0302 	bfi	r3, r0, #0, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    1564:	200f      	movs	r0, #15
    1566:	71c8      	strb	r0, [r1, #7]
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    1568:	2a00      	cmp	r2, #0
	conn->procedure_expire = conn->procedure_reload;
    156a:	f8b4 00aa 	ldrh.w	r0, [r4, #170]	; 0xaa
	conn->llcp_conn_param.state = LLCP_CPR_STATE_OFFS_REQ;
    156e:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
    1572:	f8c4 517c 	str.w	r5, [r4, #380]	; 0x17c
	conn->procedure_expire = conn->procedure_reload;
    1576:	f8a4 00ac 	strh.w	r0, [r4, #172]	; 0xac
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    157a:	da0a      	bge.n	1592 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x20a>
			uint32_t ticks_prepare_to_start =
    157c:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
				(conn->evt.ticks_xtal_to_start &
    1580:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
			conn->llcp_conn_param.ticks_ref -=
    1584:	4283      	cmp	r3, r0
    1586:	bf2c      	ite	cs
    1588:	18eb      	addcs	r3, r5, r3
    158a:	182b      	addcc	r3, r5, r0
    158c:	1a9b      	subs	r3, r3, r2
    158e:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
		conn->llcp_conn_param.pdu_win_offset0 = (uint16_t *)&p->offset0;
    1592:	3113      	adds	r1, #19
		s_mfy_sched_offset.param = (void *)conn;
    1594:	4b4a      	ldr	r3, [pc, #296]	; (16c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x338>)
		conn->llcp_conn_param.pdu_win_offset0 = (uint16_t *)&p->offset0;
    1596:	f8c4 1178 	str.w	r1, [r4, #376]	; 0x178
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    159a:	2201      	movs	r2, #1
    159c:	4610      	mov	r0, r2
    159e:	2102      	movs	r1, #2
		s_mfy_sched_offset.param = (void *)conn;
    15a0:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    15a2:	f007 f89d 	bl	86e0 <mayfly_enqueue>
		LL_ASSERT(!retval);
    15a6:	2800      	cmp	r0, #0
    15a8:	f43f ac3d 	beq.w	e26 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x626>
    15ac:	4a45      	ldr	r2, [pc, #276]	; (16c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x33c>)
    15ae:	4946      	ldr	r1, [pc, #280]	; (16c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x340>)
    15b0:	f640 43aa 	movw	r3, #3242	; 0xcaa
		LL_ASSERT(0);
    15b4:	4845      	ldr	r0, [pc, #276]	; (16cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x344>)
    15b6:	f014 fbc3 	bl	15d40 <printk>
    15ba:	4040      	eors	r0, r0
    15bc:	f380 8811 	msr	BASEPRI, r0
    15c0:	f04f 0003 	mov.w	r0, #3
    15c4:	df02      	svc	2
		break;
    15c6:	e42e      	b.n	e26 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x626>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    15c8:	fb07 3311 	mls	r3, r7, r1, r3
    15cc:	f240 42e2 	movw	r2, #1250	; 0x4e2
    15d0:	483f      	ldr	r0, [pc, #252]	; (16d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x348>)
    15d2:	b29b      	uxth	r3, r3
    15d4:	fb02 f303 	mul.w	r3, r2, r3
    15d8:	fba3 0100 	umull	r0, r1, r3, r0
    15dc:	a334      	add	r3, pc, #208	; (adr r3, 16b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x328>)
    15de:	e9d3 2300 	ldrd	r2, r3, [r3]
    15e2:	f7fe fd8d 	bl	100 <__aeabi_uldivmod>
    15e6:	1a2d      	subs	r5, r5, r0
    15e8:	f7ff b941 	b.w	86e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x6e>
			conn->tx_data = conn->tx_data->next;
    15ec:	6819      	ldr	r1, [r3, #0]
    15ee:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    15f2:	2a00      	cmp	r2, #0
    15f4:	f47f a88b 	bne.w	70e <ull_conn_llcp+0xee>
			tx->next = conn->tx_head->next;
    15f8:	681a      	ldr	r2, [r3, #0]
    15fa:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    15fc:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
    15fe:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    1600:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
    1604:	f7ff b88b 	b.w	71e <ull_conn_llcp+0xfe>
		LL_ASSERT(rx && rx->hdr.link);
    1608:	4a2e      	ldr	r2, [pc, #184]	; (16c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x33c>)
    160a:	4932      	ldr	r1, [pc, #200]	; (16d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x34c>)
    160c:	482f      	ldr	r0, [pc, #188]	; (16cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x344>)
    160e:	f640 13e4 	movw	r3, #2532	; 0x9e4
    1612:	f014 fb95 	bl	15d40 <printk>
    1616:	4040      	eors	r0, r0
    1618:	f380 8811 	msr	BASEPRI, r0
    161c:	f04f 0003 	mov.w	r0, #3
    1620:	df02      	svc	2
    1622:	6838      	ldr	r0, [r7, #0]
    1624:	f7ff b8d8 	b.w	7d8 <ull_conn_llcp+0x1b8>
			lll->phy_tx = conn->llcp.phy_upd_ind.tx;
    1628:	f3c3 0082 	ubfx	r0, r3, #2, #3
    162c:	f360 0202 	bfi	r2, r0, #0, #3
    1630:	f884 2046 	strb.w	r2, [r4, #70]	; 0x46
			eff_tx_time = calc_eff_time(lll->max_tx_octets,
    1634:	f44f 76a4 	mov.w	r6, #328	; 0x148
    1638:	f7ff ba11 	b.w	a5e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x25e>
		LL_ASSERT(rx && rx->hdr.link);
    163c:	4a21      	ldr	r2, [pc, #132]	; (16c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x33c>)
    163e:	4925      	ldr	r1, [pc, #148]	; (16d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x34c>)
    1640:	4822      	ldr	r0, [pc, #136]	; (16cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x344>)
    1642:	f640 7396 	movw	r3, #3990	; 0xf96
    1646:	f014 fb7b 	bl	15d40 <printk>
    164a:	4040      	eors	r0, r0
    164c:	f380 8811 	msr	BASEPRI, r0
    1650:	f04f 0003 	mov.w	r0, #3
    1654:	df02      	svc	2
    1656:	6828      	ldr	r0, [r5, #0]
    1658:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    165c:	f7ff ba14 	b.w	a88 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x288>
		if ((conn->llcp_cu.interval != lll->interval) ||
    1660:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    1662:	428a      	cmp	r2, r1
    1664:	f47f a8c5 	bne.w	7f2 <ull_conn_llcp+0x1d2>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    1668:	f240 42e2 	movw	r2, #1250	; 0x4e2
    166c:	fb02 fb03 	mul.w	fp, r2, r3
    1670:	f242 7210 	movw	r2, #10000	; 0x2710
		    (conn->llcp_cu.latency != lll->latency) ||
    1674:	f8b4 e0a6 	ldrh.w	lr, [r4, #166]	; 0xa6
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    1678:	fb02 b20c 	mla	r2, r2, ip, fp
    167c:	3a01      	subs	r2, #1
    167e:	fbb2 f2fb 	udiv	r2, r2, fp
		    (conn->llcp_cu.latency != lll->latency) ||
    1682:	b292      	uxth	r2, r2
    1684:	4596      	cmp	lr, r2
    1686:	f47f a8b4 	bne.w	7f2 <ull_conn_llcp+0x1d2>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    168a:	2301      	movs	r3, #1
    168c:	713b      	strb	r3, [r7, #4]
    168e:	f7ff b8bc 	b.w	80a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xa>
		if (!conn->tx_ctrl) {
    1692:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
    1696:	2a00      	cmp	r2, #0
    1698:	f47f aaa2 	bne.w	be0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3e0>
			tx->next = conn->tx_head;
    169c:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
    169e:	e9c4 6667 	strd	r6, r6, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    16a2:	f8c4 61a4 	str.w	r6, [r4, #420]	; 0x1a4
    16a6:	f7ff baa3 	b.w	bf0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3f0>
    16aa:	bf00      	nop
    16ac:	f3af 8000 	nop.w
    16b0:	1afd498d 	.word	0x1afd498d
    16b4:	00000007 	.word	0x00000007
    16b8:	20001a0c 	.word	0x20001a0c
    16bc:	20001a90 	.word	0x20001a90
    16c0:	2000045c 	.word	0x2000045c
    16c4:	00019cec 	.word	0x00019cec
    16c8:	00019b6c 	.word	0x00019b6c
    16cc:	000199cc 	.word	0x000199cc
    16d0:	3b9aca00 	.word	0x3b9aca00
    16d4:	00019df8 	.word	0x00019df8
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    16d8:	48d3      	ldr	r0, [pc, #844]	; (1a28 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6a0>)
    16da:	f006 ff29 	bl	8530 <mem_acquire>
	if (tx) {
    16de:	4607      	mov	r7, r0
    16e0:	2800      	cmp	r0, #0
    16e2:	f43f aba0 	beq.w	e26 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x626>
		conn->llcp_feature.ack--;
    16e6:	f894 10f9 	ldrb.w	r1, [r4, #249]	; 0xf9
		conn->llcp_feature.features_conn = LL_FEAT;
    16ea:	4ad0      	ldr	r2, [pc, #832]	; (1a2c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6a4>)
    16ec:	2300      	movs	r3, #0
		conn->llcp_feature.ack--;
    16ee:	3901      	subs	r1, #1
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
    16f0:	2009      	movs	r0, #9
		conn->llcp_feature.features_conn = LL_FEAT;
    16f2:	e9c4 2340 	strd	r2, r3, [r4, #256]	; 0x100
		conn->llcp_feature.ack--;
    16f6:	f884 10f9 	strb.w	r1, [r4, #249]	; 0xf9
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
    16fa:	7178      	strb	r0, [r7, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
    16fc:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    1700:	793b      	ldrb	r3, [r7, #4]
		pdu->llctrl.opcode = !conn->lll.role ?
    1702:	2a00      	cmp	r2, #0
    1704:	bfac      	ite	ge
    1706:	2208      	movge	r2, #8
    1708:	220e      	movlt	r2, #14
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    170a:	f043 0303 	orr.w	r3, r3, #3
		pdu->llctrl.opcode = !conn->lll.role ?
    170e:	71fa      	strb	r2, [r7, #7]
		(void)memset(&pdu->llctrl.feature_req.features[0],
    1710:	2208      	movs	r2, #8
    1712:	4649      	mov	r1, r9
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    1714:	713b      	strb	r3, [r7, #4]
		(void)memset(&pdu->llctrl.feature_req.features[0],
    1716:	18b8      	adds	r0, r7, r2
    1718:	f015 f9f5 	bl	16b06 <memset>
		sys_put_le64(conn->llcp_feature.features_conn,
    171c:	e9d4 2340 	ldrd	r2, r3, [r4, #256]	; 0x100
	sys_put_le16(val >> 16, &dst[2]);
    1720:	0c10      	lsrs	r0, r2, #16
    1722:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
    1724:	ea4f 2c10 	mov.w	ip, r0, lsr #8
	dst[0] = val;
    1728:	733b      	strb	r3, [r7, #12]
	dst[1] = val >> 8;
    172a:	f887 c00b 	strb.w	ip, [r7, #11]
    172e:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
    1732:	72b8      	strb	r0, [r7, #10]
	dst[1] = val >> 8;
    1734:	f3c2 2c07 	ubfx	ip, r2, #8, #8
    1738:	0a08      	lsrs	r0, r1, #8
	dst[0] = val;
    173a:	723a      	strb	r2, [r7, #8]
	dst[1] = val >> 8;
    173c:	f887 c009 	strb.w	ip, [r7, #9]
	dst[0] = val;
    1740:	73b9      	strb	r1, [r7, #14]
	dst[1] = val >> 8;
    1742:	73f8      	strb	r0, [r7, #15]
    1744:	737b      	strb	r3, [r7, #13]
	    conn->tx_head &&
    1746:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
	if (
    174a:	2b00      	cmp	r3, #0
    174c:	f000 8129 	beq.w	19a2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x61a>
	    !conn->llcp_enc.pause_tx &&
    1750:	f894 113e 	ldrb.w	r1, [r4, #318]	; 0x13e
    1754:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
	    conn->tx_head &&
    1758:	0788      	lsls	r0, r1, #30
    175a:	f100 8124 	bmi.w	19a6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x61e>
	    !conn->llcp_phy.pause_tx &&
    175e:	f894 1197 	ldrb.w	r1, [r4, #407]	; 0x197
    1762:	07c9      	lsls	r1, r1, #31
    1764:	f100 811f 	bmi.w	19a6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x61e>
		if (conn->tx_head == conn->tx_data) {
    1768:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
    176c:	428b      	cmp	r3, r1
    176e:	f000 83f6 	beq.w	1f5e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbd6>
		} else if (!conn->tx_ctrl) {
    1772:	2a00      	cmp	r2, #0
    1774:	f000 84be 	beq.w	20f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd6c>
	tx->next = conn->tx_ctrl_last->next;
    1778:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    177c:	681a      	ldr	r2, [r3, #0]
    177e:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
    1780:	601f      	str	r7, [r3, #0]
	conn->tx_ctrl_last = tx;
    1782:	683b      	ldr	r3, [r7, #0]
    1784:	f8c4 71a4 	str.w	r7, [r4, #420]	; 0x1a4
	if (!tx->next) {
    1788:	2b00      	cmp	r3, #0
    178a:	f000 8321 	beq.w	1dd0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa48>
		conn->procedure_expire = conn->procedure_reload;
    178e:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    1792:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
    1796:	f7ff bb46 	b.w	e26 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x626>
		LL_ASSERT(rx && rx->hdr.link);
    179a:	4aa5      	ldr	r2, [pc, #660]	; (1a30 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6a8>)
    179c:	49a5      	ldr	r1, [pc, #660]	; (1a34 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6ac>)
    179e:	48a6      	ldr	r0, [pc, #664]	; (1a38 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6b0>)
    17a0:	f640 73c2 	movw	r3, #4034	; 0xfc2
    17a4:	f014 facc 	bl	15d40 <printk>
    17a8:	4040      	eors	r0, r0
    17aa:	f380 8811 	msr	BASEPRI, r0
    17ae:	f04f 0003 	mov.w	r0, #3
    17b2:	df02      	svc	2
    17b4:	6828      	ldr	r0, [r5, #0]
    17b6:	f7ff b991 	b.w	adc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2dc>
		conn->tx_data_last = tx;
    17ba:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
    17be:	f7ff ba7d 	b.w	cbc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4bc>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
    17c2:	2201      	movs	r2, #1
    17c4:	4610      	mov	r0, r2
    17c6:	2102      	movs	r1, #2
    17c8:	f006 ff56 	bl	8678 <mayfly_enable>
				return -ECANCELED;
    17cc:	f06f 0047 	mvn.w	r0, #71	; 0x47
    17d0:	f7fe bf3e 	b.w	650 <ull_conn_llcp+0x30>
		if (!conn->tx_ctrl) {
    17d4:	2900      	cmp	r1, #0
    17d6:	f47f ab81 	bne.w	edc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x6dc>
			tx->next = conn->tx_head;
    17da:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
    17dc:	e9c4 5567 	strd	r5, r5, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    17e0:	f8c4 51a4 	str.w	r5, [r4, #420]	; 0x1a4
    17e4:	f7ff bb82 	b.w	eec <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x6ec>
    17e8:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
		if (!conn->tx_ctrl) {
    17ec:	2a00      	cmp	r2, #0
    17ee:	f47f ab75 	bne.w	edc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x6dc>
    17f2:	e7f2      	b.n	17da <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x452>
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    17f4:	f894 7184 	ldrb.w	r7, [r4, #388]	; 0x184
    17f8:	f894 2185 	ldrb.w	r2, [r4, #389]	; 0x185
    17fc:	42ba      	cmp	r2, r7
    17fe:	f000 815a 	beq.w	1ab6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x72e>
	switch (conn->llcp_length.state) {
    1802:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
    1806:	f002 0107 	and.w	r1, r2, #7
    180a:	2906      	cmp	r1, #6
    180c:	f200 858d 	bhi.w	232a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xfa2>
    1810:	f20f 0c04 	addw	ip, pc, #4
    1814:	f85c f021 	ldr.w	pc, [ip, r1, lsl #2]
    1818:	000018bf 	.word	0x000018bf
    181c:	00000639 	.word	0x00000639
    1820:	00000639 	.word	0x00000639
    1824:	00000639 	.word	0x00000639
    1828:	00001835 	.word	0x00001835
    182c:	00001835 	.word	0x00001835
    1830:	00000639 	.word	0x00000639
		lll->max_rx_octets = conn->llcp_length.rx_octets;
    1834:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
    1838:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    183c:	f002 0307 	and.w	r3, r2, #7
		lll->max_rx_time = conn->llcp_length.rx_time;
    1840:	f8b4 118c 	ldrh.w	r1, [r4, #396]	; 0x18c
		tx_octets = conn->llcp_length.tx_octets;
    1844:	f8b4 918a 	ldrh.w	r9, [r4, #394]	; 0x18a
		uint16_t tx_time = conn->llcp_length.tx_time;
    1848:	f8b4 818e 	ldrh.w	r8, [r4, #398]	; 0x18e
		lll->max_rx_time = conn->llcp_length.rx_time;
    184c:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    1850:	2b04      	cmp	r3, #4
    1852:	f000 834a 	beq.w	1eea <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb62>
			conn->llcp_length.state =
    1856:	2306      	movs	r3, #6
    1858:	f363 0202 	bfi	r2, r3, #0, #3
    185c:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
		rx = conn->llcp_rx;
    1860:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
		LL_ASSERT(rx && rx->hdr.link);
    1864:	2f00      	cmp	r7, #0
    1866:	f000 8331 	beq.w	1ecc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb44>
    186a:	6838      	ldr	r0, [r7, #0]
    186c:	2800      	cmp	r0, #0
    186e:	f000 832d 	beq.w	1ecc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb44>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    1872:	7f3b      	ldrb	r3, [r7, #28]
		conn->llcp_rx = rx->hdr.link->mem;
    1874:	6842      	ldr	r2, [r0, #4]
		rx->hdr.handle = conn->lll.handle;
    1876:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
		conn->llcp_rx = rx->hdr.link->mem;
    187a:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    187e:	f043 0303 	orr.w	r3, r3, #3
    1882:	773b      	strb	r3, [r7, #28]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1884:	2203      	movs	r2, #3
		pdu_ctrl_rx->len =
    1886:	2309      	movs	r3, #9
    1888:	777b      	strb	r3, [r7, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    188a:	713a      	strb	r2, [r7, #4]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    188c:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    1890:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
    1894:	847a      	strh	r2, [r7, #34]	; 0x22
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    1896:	2315      	movs	r3, #21
    1898:	77fb      	strb	r3, [r7, #31]
		rx->hdr.handle = conn->lll.handle;
    189a:	f8a7 c006 	strh.w	ip, [r7, #6]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    189e:	8439      	strh	r1, [r7, #32]
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
    18a0:	f8a7 9024 	strh.w	r9, [r7, #36]	; 0x24
		ll_rx_put(rx->hdr.link, rx);
    18a4:	4639      	mov	r1, r7
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    18a6:	f8a7 8026 	strh.w	r8, [r7, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
    18aa:	f00a fed7 	bl	c65c <ll_rx_put>
		ll_rx_sched();
    18ae:	f00a fedf 	bl	c670 <ll_rx_sched>
	break;
    18b2:	f894 00bb 	ldrb.w	r0, [r4, #187]	; 0xbb
    18b6:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
    18ba:	f7fe bebd 	b.w	638 <ull_conn_llcp+0x18>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    18be:	485a      	ldr	r0, [pc, #360]	; (1a28 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6a0>)
    18c0:	f006 fe36 	bl	8530 <mem_acquire>
		if (!tx) {
    18c4:	4602      	mov	r2, r0
    18c6:	2800      	cmp	r0, #0
    18c8:	f43f aaad 	beq.w	e26 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x626>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    18cc:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    18d0:	f8b4 718a 	ldrh.w	r7, [r4, #394]	; 0x18a
		conn->default_tx_time = conn->llcp_length.tx_time;
    18d4:	f8b4 118e 	ldrh.w	r1, [r4, #398]	; 0x18e
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    18d8:	f8a4 70b6 	strh.w	r7, [r4, #182]	; 0xb6
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    18dc:	2001      	movs	r0, #1
		conn->default_tx_time = conn->llcp_length.tx_time;
    18de:	f8a4 10b8 	strh.w	r1, [r4, #184]	; 0xb8
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    18e2:	f360 0302 	bfi	r3, r0, #0, #3
		pdu_ctrl_tx->len =
    18e6:	2109      	movs	r1, #9
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    18e8:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
		pdu_ctrl_tx->len =
    18ec:	7151      	strb	r1, [r2, #5]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    18ee:	7911      	ldrb	r1, [r2, #4]
	    conn->tx_head &&
    18f0:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
    18f4:	8197      	strh	r7, [r2, #12]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    18f6:	f041 0103 	orr.w	r1, r1, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    18fa:	f04f 0c14 	mov.w	ip, #20
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
    18fe:	72d0      	strb	r0, [r2, #11]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    1900:	73d0      	strb	r0, [r2, #15]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    1902:	2700      	movs	r7, #0
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1904:	7111      	strb	r1, [r2, #4]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    1906:	201b      	movs	r0, #27
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
    1908:	2148      	movs	r1, #72	; 0x48
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    190a:	f882 c007 	strb.w	ip, [r2, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    190e:	7257      	strb	r7, [r2, #9]
    1910:	7210      	strb	r0, [r2, #8]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
    1912:	7291      	strb	r1, [r2, #10]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    1914:	7391      	strb	r1, [r2, #14]
	if (
    1916:	2b00      	cmp	r3, #0
    1918:	f000 82b9 	beq.w	1e8e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb06>
	    !conn->llcp_enc.pause_tx &&
    191c:	f894 113e 	ldrb.w	r1, [r4, #318]	; 0x13e
	    conn->tx_head &&
    1920:	0789      	lsls	r1, r1, #30
    1922:	f100 82b4 	bmi.w	1e8e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb06>
	    !conn->llcp_phy.pause_tx &&
    1926:	f894 1197 	ldrb.w	r1, [r4, #407]	; 0x197
    192a:	07cf      	lsls	r7, r1, #31
    192c:	f100 82af 	bmi.w	1e8e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb06>
		if (conn->tx_head == conn->tx_data) {
    1930:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
    1934:	428b      	cmp	r3, r1
		if (!conn->tx_ctrl) {
    1936:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
    193a:	f000 84b2 	beq.w	22a2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf1a>
		} else if (!conn->tx_ctrl) {
    193e:	2900      	cmp	r1, #0
    1940:	f000 84a6 	beq.w	2290 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf08>
	tx->next = conn->tx_ctrl_last->next;
    1944:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    1948:	6819      	ldr	r1, [r3, #0]
    194a:	6011      	str	r1, [r2, #0]
	conn->tx_ctrl_last->next = tx;
    194c:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
    194e:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
	if (!tx->next) {
    1952:	6813      	ldr	r3, [r2, #0]
    1954:	2b00      	cmp	r3, #0
    1956:	f47f af1a 	bne.w	178e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x406>
		conn->tx_data_last = tx;
    195a:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
    195e:	e716      	b.n	178e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x406>
			LL_ASSERT(0);
    1960:	4a33      	ldr	r2, [pc, #204]	; (1a30 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6a8>)
    1962:	4936      	ldr	r1, [pc, #216]	; (1a3c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6b4>)
    1964:	4834      	ldr	r0, [pc, #208]	; (1a38 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6b0>)
    1966:	f44f 6326 	mov.w	r3, #2656	; 0xa60
    196a:	f014 f9e9 	bl	15d40 <printk>
    196e:	4040      	eors	r0, r0
    1970:	f380 8811 	msr	BASEPRI, r0
    1974:	f04f 0003 	mov.w	r0, #3
    1978:	df02      	svc	2
		uint32_t ticks_win_offset = 0;
    197a:	f04f 0800 	mov.w	r8, #0
    197e:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
    1982:	f7fe bf92 	b.w	8aa <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xaa>
		if (!conn->tx_ctrl) {
    1986:	2900      	cmp	r1, #0
    1988:	f47f ab93 	bne.w	10b2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x8b2>
			tx->next = conn->tx_head;
    198c:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    198e:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    1992:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
    1996:	f7ff bb94 	b.w	10c2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x8c2>
		conn->tx_data_last = tx;
    199a:	f8c4 61ac 	str.w	r6, [r4, #428]	; 0x1ac
    199e:	f7ff b92a 	b.w	bf6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3f6>
    19a2:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
		if (!conn->tx_ctrl) {
    19a6:	2a00      	cmp	r2, #0
    19a8:	f47f aee6 	bne.w	1778 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3f0>
			tx->next = conn->tx_head;
    19ac:	603b      	str	r3, [r7, #0]
				conn->tx_ctrl = tx;
    19ae:	e9c4 7767 	strd	r7, r7, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    19b2:	f8c4 71a4 	str.w	r7, [r4, #420]	; 0x1a4
    19b6:	e6e7      	b.n	1788 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x400>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    19b8:	4590      	cmp	r8, r2
    19ba:	f47f a879 	bne.w	ab0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2b0>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    19be:	2301      	movs	r3, #1
    19c0:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
    19c2:	4629      	mov	r1, r5
    19c4:	f00a fe4a 	bl	c65c <ll_rx_put>
				rx = conn->llcp_rx;
    19c8:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
				LL_ASSERT(rx && rx->hdr.link);
    19cc:	2d00      	cmp	r5, #0
    19ce:	f000 8379 	beq.w	20c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd3c>
    19d2:	6828      	ldr	r0, [r5, #0]
    19d4:	2800      	cmp	r0, #0
    19d6:	f000 8375 	beq.w	20c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd3c>
				conn->llcp_rx = rx->hdr.link->mem;
    19da:	6843      	ldr	r3, [r0, #4]
    19dc:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    19e0:	2301      	movs	r3, #1
    19e2:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
    19e4:	4629      	mov	r1, r5
    19e6:	f00a fe39 	bl	c65c <ll_rx_put>
			ll_rx_sched();
    19ea:	f00a fe41 	bl	c670 <ll_rx_sched>
			return;
    19ee:	f7fe be28 	b.w	642 <ull_conn_llcp+0x22>
		LL_ASSERT(rx && rx->hdr.link);
    19f2:	4a0f      	ldr	r2, [pc, #60]	; (1a30 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6a8>)
    19f4:	490f      	ldr	r1, [pc, #60]	; (1a34 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6ac>)
    19f6:	4810      	ldr	r0, [pc, #64]	; (1a38 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6b0>)
    19f8:	f640 635d 	movw	r3, #3677	; 0xe5d
    19fc:	f014 f9a0 	bl	15d40 <printk>
    1a00:	4040      	eors	r0, r0
    1a02:	f380 8811 	msr	BASEPRI, r0
    1a06:	f04f 0003 	mov.w	r0, #3
    1a0a:	df02      	svc	2
    1a0c:	6838      	ldr	r0, [r7, #0]
    1a0e:	f8b4 c040 	ldrh.w	ip, [r4, #64]	; 0x40
    1a12:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
    1a16:	f7ff bae9 	b.w	fec <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x7ec>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    1a1a:	230d      	movs	r3, #13
		p->error_code =	conn->llcp.encryption.error_code;
    1a1c:	7235      	strb	r5, [r6, #8]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    1a1e:	71f3      	strb	r3, [r6, #7]
		p->error_code =	conn->llcp.encryption.error_code;
    1a20:	2702      	movs	r7, #2
    1a22:	f7ff b8c0 	b.w	ba6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3a6>
    1a26:	bf00      	nop
    1a28:	20001a90 	.word	0x20001a90
    1a2c:	000141ff 	.word	0x000141ff
    1a30:	00019cec 	.word	0x00019cec
    1a34:	00019df8 	.word	0x00019df8
    1a38:	000199cc 	.word	0x000199cc
    1a3c:	00019a2c 	.word	0x00019a2c
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    1a40:	4641      	mov	r1, r8
    1a42:	4620      	mov	r0, r4
    1a44:	f00b fc72 	bl	d32c <start_enc_rsp_send>
	    conn->tx_head &&
    1a48:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
	if (
    1a4c:	2b00      	cmp	r3, #0
    1a4e:	f000 8090 	beq.w	1b72 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7ea>
	    !conn->llcp_enc.pause_tx &&
    1a52:	f894 113e 	ldrb.w	r1, [r4, #318]	; 0x13e
    1a56:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
	    conn->tx_head &&
    1a5a:	0789      	lsls	r1, r1, #30
    1a5c:	f100 808b 	bmi.w	1b76 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7ee>
	    !conn->llcp_phy.pause_tx &&
    1a60:	f894 1197 	ldrb.w	r1, [r4, #407]	; 0x197
    1a64:	07cf      	lsls	r7, r1, #31
    1a66:	f100 8086 	bmi.w	1b76 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7ee>
		if (conn->tx_head == conn->tx_data) {
    1a6a:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
    1a6e:	428b      	cmp	r3, r1
    1a70:	f000 828e 	beq.w	1f90 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc08>
		} else if (!conn->tx_ctrl) {
    1a74:	2a00      	cmp	r2, #0
    1a76:	f000 82a6 	beq.w	1fc6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc3e>
	tx->next = conn->tx_ctrl_last->next;
    1a7a:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    1a7e:	681a      	ldr	r2, [r3, #0]
    1a80:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
    1a82:	601e      	str	r6, [r3, #0]
	conn->tx_ctrl_last = tx;
    1a84:	6833      	ldr	r3, [r6, #0]
    1a86:	f8c4 61a4 	str.w	r6, [r4, #420]	; 0x1a4
	if (!tx->next) {
    1a8a:	2b00      	cmp	r3, #0
    1a8c:	f000 81cd 	beq.w	1e2a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xaa2>
		conn->llcp_enc.pause_rx = 0U;
    1a90:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
    1a94:	f023 0303 	bic.w	r3, r3, #3
    1a98:	f884 313e 	strb.w	r3, [r4, #318]	; 0x13e
    1a9c:	f7ff b8ab 	b.w	bf6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3f6>
			if (!conn->llcp_length.cache.tx_octets) {
    1aa0:	f8b4 2190 	ldrh.w	r2, [r4, #400]	; 0x190
    1aa4:	2a00      	cmp	r2, #0
    1aa6:	f040 8196 	bne.w	1dd6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa4e>
				conn->llcp_length.ack = conn->llcp_length.req;
    1aaa:	f884 3185 	strb.w	r3, [r4, #389]	; 0x185
				conn->procedure_expire = 0U;
    1aae:	f8a4 20ac 	strh.w	r2, [r4, #172]	; 0xac
    1ab2:	f7ff ba92 	b.w	fda <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x7da>
		} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    1ab6:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
    1aba:	f894 1195 	ldrb.w	r1, [r4, #405]	; 0x195
    1abe:	4291      	cmp	r1, r2
    1ac0:	f43e adbf 	beq.w	642 <ull_conn_llcp+0x22>
	switch (conn->llcp_phy.state) {
    1ac4:	f894 1196 	ldrb.w	r1, [r4, #406]	; 0x196
    1ac8:	f001 0003 	and.w	r0, r1, #3
    1acc:	2803      	cmp	r0, #3
    1ace:	f000 82a3 	beq.w	2018 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc90>
    1ad2:	2800      	cmp	r0, #0
    1ad4:	f47e adb5 	bne.w	642 <ull_conn_llcp+0x22>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1ad8:	48da      	ldr	r0, [pc, #872]	; (1e44 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xabc>)
    1ada:	f006 fd29 	bl	8530 <mem_acquire>
		if (!tx) {
    1ade:	4601      	mov	r1, r0
    1ae0:	2800      	cmp	r0, #0
    1ae2:	f43f a9a0 	beq.w	e26 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x626>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    1ae6:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
		conn->phy_pref_tx = conn->llcp_phy.tx;
    1aea:	f894 2198 	ldrb.w	r2, [r4, #408]	; 0x198
		conn->lll.phy_flags = conn->llcp_phy.flags;
    1aee:	f894 7197 	ldrb.w	r7, [r4, #407]	; 0x197
    1af2:	f894 c046 	ldrb.w	ip, [r4, #70]	; 0x46
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    1af6:	2001      	movs	r0, #1
    1af8:	f360 0301 	bfi	r3, r0, #0, #2
		conn->phy_pref_tx = conn->llcp_phy.tx;
    1afc:	f3c3 0082 	ubfx	r0, r3, #2, #3
    1b00:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
    1b04:	f3c3 1042 	ubfx	r0, r3, #5, #3
    1b08:	f360 02c5 	bfi	r2, r0, #3, #3
		conn->lll.phy_flags = conn->llcp_phy.flags;
    1b0c:	f3c7 0740 	ubfx	r7, r7, #1, #1
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1b10:	7908      	ldrb	r0, [r1, #4]
		conn->phy_pref_rx = conn->llcp_phy.rx;
    1b12:	f884 2198 	strb.w	r2, [r4, #408]	; 0x198
		conn->lll.phy_flags = conn->llcp_phy.flags;
    1b16:	f367 0cc3 	bfi	ip, r7, #3, #1
		conn->phy_pref_tx = conn->llcp_phy.tx;
    1b1a:	f3c3 0282 	ubfx	r2, r3, #2, #3
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    1b1e:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
		conn->lll.phy_flags = conn->llcp_phy.flags;
    1b22:	f884 c046 	strb.w	ip, [r4, #70]	; 0x46
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1b26:	f040 0003 	orr.w	r0, r0, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
    1b2a:	f3c3 1342 	ubfx	r3, r3, #5, #3
		pdu_ctrl_tx->len =
    1b2e:	2703      	movs	r7, #3
		pr->tx_phys = conn->llcp_phy.tx;
    1b30:	720a      	strb	r2, [r1, #8]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    1b32:	2216      	movs	r2, #22
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1b34:	7108      	strb	r0, [r1, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    1b36:	71ca      	strb	r2, [r1, #7]
		pr->rx_phys = conn->llcp_phy.rx;
    1b38:	724b      	strb	r3, [r1, #9]
		pdu_ctrl_tx->len =
    1b3a:	714f      	strb	r7, [r1, #5]
	ctrl_tx_pause_enqueue(conn, tx, false);
    1b3c:	2200      	movs	r2, #0
    1b3e:	4620      	mov	r0, r4
    1b40:	f00b f9f2 	bl	cf28 <ctrl_tx_pause_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    1b44:	e623      	b.n	178e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x406>
		if (!conn->tx_ctrl) {
    1b46:	2a00      	cmp	r2, #0
    1b48:	f47f ab72 	bne.w	1230 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xa30>
			tx->next = conn->tx_head;
    1b4c:	f845 0c09 	str.w	r0, [r5, #-9]
				conn->tx_ctrl = tx;
    1b50:	e9c4 3367 	strd	r3, r3, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    1b54:	f8c4 31a4 	str.w	r3, [r4, #420]	; 0x1a4
    1b58:	f7ff bb74 	b.w	1244 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xa44>
		if (!conn->tx_ctrl) {
    1b5c:	2900      	cmp	r1, #0
    1b5e:	f47f aba3 	bne.w	12a8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xaa8>
			tx->next = conn->tx_head;
    1b62:	f845 3c09 	str.w	r3, [r5, #-9]
				conn->tx_ctrl = tx;
    1b66:	e9c4 2267 	strd	r2, r2, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    1b6a:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
    1b6e:	f7ff bba5 	b.w	12bc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xabc>
    1b72:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
		if (!conn->tx_ctrl) {
    1b76:	2a00      	cmp	r2, #0
    1b78:	f47f af7f 	bne.w	1a7a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6f2>
			tx->next = conn->tx_head;
    1b7c:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
    1b7e:	e9c4 6667 	strd	r6, r6, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    1b82:	f8c4 61a4 	str.w	r6, [r4, #420]	; 0x1a4
    1b86:	e780      	b.n	1a8a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x702>
			conn->llcp.phy_upd_ind.instant = event_counter +
    1b88:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    1b8a:	4433      	add	r3, r6
							 lll->latency +
    1b8c:	3306      	adds	r3, #6
			conn->llcp.phy_upd_ind.instant = event_counter +
    1b8e:	f8a4 30c2 	strh.w	r3, [r4, #194]	; 0xc2
			(void)ll_pdu_rx_alloc();
    1b92:	f00a fd91 	bl	c6b8 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
    1b96:	683b      	ldr	r3, [r7, #0]
    1b98:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
    1b9c:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
    1b9e:	f8c4 70e0 	str.w	r7, [r4, #224]	; 0xe0
			rx = ll_pdu_rx_alloc();
    1ba2:	f00a fd89 	bl	c6b8 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
    1ba6:	6803      	ldr	r3, [r0, #0]
    1ba8:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
    1bac:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
    1bae:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    1bb2:	f8b4 10c2 	ldrh.w	r1, [r4, #194]	; 0xc2
    1bb6:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
    1bba:	f3c3 0882 	ubfx	r8, r3, #2, #3
    1bbe:	095b      	lsrs	r3, r3, #5
    1bc0:	f7ff b9c3 	b.w	f4a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x74a>
	    ((pdu_data_tx->llctrl.opcode !=
    1bc4:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    1bc6:	2a03      	cmp	r2, #3
    1bc8:	f43f ad16 	beq.w	15f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x270>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    1bcc:	2a0a      	cmp	r2, #10
    1bce:	f47e ad9a 	bne.w	706 <ull_conn_llcp+0xe6>
    1bd2:	e511      	b.n	15f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x270>
		LL_ASSERT(0);
    1bd4:	f640 435e 	movw	r3, #3166	; 0xc5e
		LL_ASSERT(0);
    1bd8:	4a9b      	ldr	r2, [pc, #620]	; (1e48 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xac0>)
    1bda:	499c      	ldr	r1, [pc, #624]	; (1e4c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xac4>)
    1bdc:	e4ea      	b.n	15b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x22c>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1bde:	4899      	ldr	r0, [pc, #612]	; (1e44 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xabc>)
    1be0:	f006 fca6 	bl	8530 <mem_acquire>
		if (tx) {
    1be4:	2800      	cmp	r0, #0
    1be6:	f43f a91e 	beq.w	e26 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x626>
			conn->llcp_version.ack--;
    1bea:	f894 2111 	ldrb.w	r2, [r4, #273]	; 0x111
			conn->llcp_version.tx = 1U;
    1bee:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
			conn->llcp_version.ack--;
    1bf2:	3a01      	subs	r2, #1
    1bf4:	f884 2111 	strb.w	r2, [r4, #273]	; 0x111
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    1bf8:	7902      	ldrb	r2, [r0, #4]
			conn->llcp_version.tx = 1U;
    1bfa:	f043 0301 	orr.w	r3, r3, #1
			pdu->len =
    1bfe:	2106      	movs	r1, #6
			conn->llcp_version.tx = 1U;
    1c00:	f884 3112 	strb.w	r3, [r4, #274]	; 0x112
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    1c04:	f042 0203 	orr.w	r2, r2, #3
			pdu->len =
    1c08:	7141      	strb	r1, [r0, #5]
	    conn->tx_head &&
    1c0a:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    1c0e:	7102      	strb	r2, [r0, #4]
			pdu->llctrl.version_ind.version_number =
    1c10:	210b      	movs	r1, #11
			pdu->llctrl.version_ind.company_id = cid;
    1c12:	f06f 020e 	mvn.w	r2, #14
			pdu->llctrl.opcode =
    1c16:	270c      	movs	r7, #12
			pdu->llctrl.version_ind.version_number =
    1c18:	7201      	strb	r1, [r0, #8]
			pdu->llctrl.version_ind.company_id = cid;
    1c1a:	7242      	strb	r2, [r0, #9]
    1c1c:	2105      	movs	r1, #5
			pdu->llctrl.version_ind.sub_version_number = svn;
    1c1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
			pdu->llctrl.opcode =
    1c22:	71c7      	strb	r7, [r0, #7]
			pdu->llctrl.version_ind.company_id = cid;
    1c24:	7281      	strb	r1, [r0, #10]
			pdu->llctrl.version_ind.sub_version_number = svn;
    1c26:	72c2      	strb	r2, [r0, #11]
    1c28:	7302      	strb	r2, [r0, #12]
	if (
    1c2a:	2b00      	cmp	r3, #0
    1c2c:	f000 80f2 	beq.w	1e14 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa8c>
	    !conn->llcp_enc.pause_tx &&
    1c30:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
    1c34:	0791      	lsls	r1, r2, #30
    1c36:	f100 80ed 	bmi.w	1e14 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa8c>
	    !conn->llcp_phy.pause_tx &&
    1c3a:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
    1c3e:	07d2      	lsls	r2, r2, #31
    1c40:	f100 80e8 	bmi.w	1e14 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa8c>
		if (conn->tx_head == conn->tx_data) {
    1c44:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
    1c48:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
    1c4a:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
    1c4e:	f000 82fd 	beq.w	224c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xec4>
		} else if (!conn->tx_ctrl) {
    1c52:	2a00      	cmp	r2, #0
    1c54:	f000 82f2 	beq.w	223c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xeb4>
	tx->next = conn->tx_ctrl_last->next;
    1c58:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    1c5c:	681a      	ldr	r2, [r3, #0]
    1c5e:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    1c60:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    1c62:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
    1c66:	6803      	ldr	r3, [r0, #0]
    1c68:	2b00      	cmp	r3, #0
    1c6a:	f47f ad90 	bne.w	178e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x406>
		conn->tx_data_last = tx;
    1c6e:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
			conn->procedure_expire = conn->procedure_reload;
    1c72:	e58c      	b.n	178e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x406>
			ecb_encrypt(&conn->llcp_enc.ltk[0],
    1c74:	f104 075f 	add.w	r7, r4, #95	; 0x5f
    1c78:	463b      	mov	r3, r7
    1c7a:	462a      	mov	r2, r5
    1c7c:	f104 01ce 	add.w	r1, r4, #206	; 0xce
    1c80:	f204 1049 	addw	r0, r4, #329	; 0x149
    1c84:	f011 f82c 	bl	12ce0 <ecb_encrypt>
			memcpy(&lll->ccm_tx.key[0],
    1c88:	4639      	mov	r1, r7
    1c8a:	2210      	movs	r2, #16
    1c8c:	f104 0080 	add.w	r0, r4, #128	; 0x80
    1c90:	f014 ff0e 	bl	16ab0 <memcpy>
			memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
    1c94:	2208      	movs	r2, #8
    1c96:	f104 0178 	add.w	r1, r4, #120	; 0x78
    1c9a:	f104 0099 	add.w	r0, r4, #153	; 0x99
    1c9e:	f014 ff07 	bl	16ab0 <memcpy>
			lll->ccm_rx.direction = 1U;
    1ca2:	f894 2077 	ldrb.w	r2, [r4, #119]	; 0x77
			lll->ccm_tx.direction = 0U;
    1ca6:	f894 1098 	ldrb.w	r1, [r4, #152]	; 0x98
			lll->enc_rx = 1U;
    1caa:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
			lll->ccm_rx.counter = 0U;
    1cae:	f884 506f 	strb.w	r5, [r4, #111]	; 0x6f
			lll->ccm_rx.direction = 1U;
    1cb2:	f042 0201 	orr.w	r2, r2, #1
			lll->ccm_tx.direction = 0U;
    1cb6:	f365 0100 	bfi	r1, r5, #0, #1
			lll->enc_rx = 1U;
    1cba:	f043 0308 	orr.w	r3, r3, #8
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    1cbe:	2001      	movs	r0, #1
			lll->ccm_rx.direction = 1U;
    1cc0:	f884 2077 	strb.w	r2, [r4, #119]	; 0x77
			lll->ccm_tx.direction = 0U;
    1cc4:	f884 1098 	strb.w	r1, [r4, #152]	; 0x98
			lll->enc_rx = 1U;
    1cc8:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
			lll->ccm_rx.counter = 0U;
    1ccc:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
    1cd0:	f884 5071 	strb.w	r5, [r4, #113]	; 0x71
    1cd4:	f884 5072 	strb.w	r5, [r4, #114]	; 0x72
    1cd8:	f884 5073 	strb.w	r5, [r4, #115]	; 0x73
    1cdc:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
    1ce0:	f884 5075 	strb.w	r5, [r4, #117]	; 0x75
    1ce4:	f884 5076 	strb.w	r5, [r4, #118]	; 0x76
			lll->ccm_tx.counter = 0U;
    1ce8:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
    1cec:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1cf0:	7933      	ldrb	r3, [r6, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    1cf2:	7170      	strb	r0, [r6, #5]
	    conn->tx_head &&
    1cf4:	f8d4 119c 	ldr.w	r1, [r4, #412]	; 0x19c
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1cf8:	f043 0303 	orr.w	r3, r3, #3
			pdu_ctrl_tx->llctrl.opcode =
    1cfc:	2205      	movs	r2, #5
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1cfe:	7133      	strb	r3, [r6, #4]
			pdu_ctrl_tx->llctrl.opcode =
    1d00:	71f2      	strb	r2, [r6, #7]
	if (
    1d02:	b1f9      	cbz	r1, 1d44 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9bc>
	    !conn->llcp_enc.pause_tx &&
    1d04:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
    1d08:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
	    conn->tx_head &&
    1d0c:	0795      	lsls	r5, r2, #30
    1d0e:	d41b      	bmi.n	1d48 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9c0>
	    !conn->llcp_phy.pause_tx &&
    1d10:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
    1d14:	07d0      	lsls	r0, r2, #31
    1d16:	d417      	bmi.n	1d48 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9c0>
		if (conn->tx_head == conn->tx_data) {
    1d18:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
    1d1c:	4291      	cmp	r1, r2
    1d1e:	f000 812b 	beq.w	1f78 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbf0>
		} else if (!conn->tx_ctrl) {
    1d22:	2b00      	cmp	r3, #0
    1d24:	f000 8282 	beq.w	222c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xea4>
	tx->next = conn->tx_ctrl_last->next;
    1d28:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    1d2c:	681a      	ldr	r2, [r3, #0]
    1d2e:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
    1d30:	601e      	str	r6, [r3, #0]
	conn->tx_ctrl_last = tx;
    1d32:	f8c4 61a4 	str.w	r6, [r4, #420]	; 0x1a4
	if (!tx->next) {
    1d36:	6833      	ldr	r3, [r6, #0]
    1d38:	f7fe bf5a 	b.w	bf0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3f0>
		conn->tx_data_last = tx;
    1d3c:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
    1d40:	f7ff b9c2 	b.w	10c8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x8c8>
    1d44:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
		if (!conn->tx_ctrl) {
    1d48:	2b00      	cmp	r3, #0
    1d4a:	d1ed      	bne.n	1d28 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9a0>
			tx->next = conn->tx_head;
    1d4c:	6031      	str	r1, [r6, #0]
				conn->tx_ctrl = tx;
    1d4e:	e9c4 6667 	strd	r6, r6, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    1d52:	f8c4 61a4 	str.w	r6, [r4, #420]	; 0x1a4
    1d56:	e7ee      	b.n	1d36 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9ae>
				(void)ll_pdu_rx_alloc();
    1d58:	f00a fcae 	bl	c6b8 <ll_pdu_rx_alloc>
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    1d5c:	231a      	movs	r3, #26
				rx->hdr.handle = lll->handle;
    1d5e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
				upd->status = 0U;
    1d60:	f887 801c 	strb.w	r8, [r7, #28]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    1d64:	713b      	strb	r3, [r7, #4]
				upd->tx = lll->phy_tx;
    1d66:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
				ll_rx_put(rx->hdr.link, rx);
    1d6a:	6838      	ldr	r0, [r7, #0]
				rx->hdr.handle = lll->handle;
    1d6c:	80fa      	strh	r2, [r7, #6]
				upd->tx = lll->phy_tx;
    1d6e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    1d72:	777b      	strb	r3, [r7, #29]
				upd->rx = lll->phy_rx;
    1d74:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
    1d78:	f3c3 0302 	ubfx	r3, r3, #0, #3
    1d7c:	77bb      	strb	r3, [r7, #30]
				ll_rx_put(rx->hdr.link, rx);
    1d7e:	4639      	mov	r1, r7
    1d80:	f00a fc6c 	bl	c65c <ll_rx_put>
				ll_rx_sched();
    1d84:	f00a fc74 	bl	c670 <ll_rx_sched>
    1d88:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    1d8c:	f8b4 10c2 	ldrh.w	r1, [r4, #194]	; 0xc2
    1d90:	f3c3 0882 	ubfx	r8, r3, #2, #3
    1d94:	095b      	lsrs	r3, r3, #5
    1d96:	f7ff b8d8 	b.w	f4a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x74a>
	switch (conn->llcp_conn_param.state) {
    1d9a:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
    1d9e:	f003 0307 	and.w	r3, r3, #7
    1da2:	2b07      	cmp	r3, #7
    1da4:	f200 829e 	bhi.w	22e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf5c>
    1da8:	a001      	add	r0, pc, #4	; (adr r0, 1db0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa28>)
    1daa:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
    1dae:	bf00      	nop
    1db0:	00001505 	.word	0x00001505
    1db4:	00001483 	.word	0x00001483
    1db8:	00001435 	.word	0x00001435
    1dbc:	00000643 	.word	0x00000643
    1dc0:	00000643 	.word	0x00000643
    1dc4:	00000643 	.word	0x00000643
    1dc8:	00000643 	.word	0x00000643
    1dcc:	00001401 	.word	0x00001401
		conn->tx_data_last = tx;
    1dd0:	f8c4 71ac 	str.w	r7, [r4, #428]	; 0x1ac
		conn->procedure_expire = conn->procedure_reload;
    1dd4:	e4db      	b.n	178e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x406>
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    1dd6:	f894 0186 	ldrb.w	r0, [r4, #390]	; 0x186
				conn->llcp_length.tx_time =
    1dda:	f8b4 7192 	ldrh.w	r7, [r4, #402]	; 0x192
				conn->llcp_length.tx_octets =
    1dde:	f8a4 218a 	strh.w	r2, [r4, #394]	; 0x18a
				conn->llcp_length.cache.tx_octets = 0;
    1de2:	2300      	movs	r3, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    1de4:	f363 0002 	bfi	r0, r3, #0, #3
    1de8:	f884 0186 	strb.w	r0, [r4, #390]	; 0x186
				conn->llcp_length.cache.tx_octets = 0;
    1dec:	f8a4 3190 	strh.w	r3, [r4, #400]	; 0x190
				conn->llcp_length.tx_time =
    1df0:	f8a4 718e 	strh.w	r7, [r4, #398]	; 0x18e
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    1df4:	f7ff b8f1 	b.w	fda <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x7da>
			conn->tx_data = conn->tx_data->next;
    1df8:	681a      	ldr	r2, [r3, #0]
    1dfa:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    1dfe:	2d00      	cmp	r5, #0
    1e00:	f47e af51 	bne.w	ca6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4a6>
			tx->next = conn->tx_head->next;
    1e04:	681a      	ldr	r2, [r3, #0]
    1e06:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    1e08:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
    1e0a:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    1e0c:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
    1e10:	f7fe bf51 	b.w	cb6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4b6>
		if (!conn->tx_ctrl) {
    1e14:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
    1e18:	2a00      	cmp	r2, #0
    1e1a:	f47f af1d 	bne.w	1c58 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8d0>
			tx->next = conn->tx_head;
    1e1e:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    1e20:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    1e24:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
    1e28:	e71d      	b.n	1c66 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8de>
		conn->tx_data_last = tx;
    1e2a:	f8c4 61ac 	str.w	r6, [r4, #428]	; 0x1ac
    1e2e:	e62f      	b.n	1a90 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x708>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    1e30:	791a      	ldrb	r2, [r3, #4]
    1e32:	f002 0203 	and.w	r2, r2, #3
    1e36:	2a03      	cmp	r2, #3
    1e38:	d034      	beq.n	1ea4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb1c>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    1e3a:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    1e3e:	f7fe bf32 	b.w	ca6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4a6>
    1e42:	bf00      	nop
    1e44:	20001a90 	.word	0x20001a90
    1e48:	00019cec 	.word	0x00019cec
    1e4c:	00019a2c 	.word	0x00019a2c
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    1e50:	791a      	ldrb	r2, [r3, #4]
    1e52:	f002 0203 	and.w	r2, r2, #3
    1e56:	2a03      	cmp	r2, #3
    1e58:	f000 8143 	beq.w	20e2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd5a>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    1e5c:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    1e60:	f7fe bebe 	b.w	be0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3e0>
			conn->tx_data = conn->tx_data->next;
    1e64:	681a      	ldr	r2, [r3, #0]
    1e66:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    1e6a:	2900      	cmp	r1, #0
    1e6c:	f47f a836 	bne.w	edc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x6dc>
			tx->next = conn->tx_head->next;
    1e70:	681a      	ldr	r2, [r3, #0]
    1e72:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
    1e74:	601d      	str	r5, [r3, #0]
				conn->tx_ctrl = tx;
    1e76:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
    1e78:	e9c4 5568 	strd	r5, r5, [r4, #416]	; 0x1a0
    1e7c:	f7ff b836 	b.w	eec <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x6ec>
			conn->tx_data = conn->tx_data->next;
    1e80:	6819      	ldr	r1, [r3, #0]
    1e82:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    1e86:	2a00      	cmp	r2, #0
    1e88:	d0f2      	beq.n	1e70 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xae8>
    1e8a:	f7ff b827 	b.w	edc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x6dc>
		if (!conn->tx_ctrl) {
    1e8e:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
    1e92:	2900      	cmp	r1, #0
    1e94:	f47f ad56 	bne.w	1944 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5bc>
			tx->next = conn->tx_head;
    1e98:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl = tx;
    1e9a:	e9c4 2267 	strd	r2, r2, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    1e9e:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
    1ea2:	e556      	b.n	1952 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5ca>
	    ((pdu_data_tx->llctrl.opcode !=
    1ea4:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    1ea6:	2a03      	cmp	r2, #3
    1ea8:	d0ac      	beq.n	1e04 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa7c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    1eaa:	2a0a      	cmp	r2, #10
    1eac:	d1c5      	bne.n	1e3a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xab2>
    1eae:	e7a9      	b.n	1e04 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa7c>
			conn->tx_data = conn->tx_data->next;
    1eb0:	681a      	ldr	r2, [r3, #0]
    1eb2:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    1eb6:	2900      	cmp	r1, #0
    1eb8:	f47f a8fb 	bne.w	10b2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x8b2>
			tx->next = conn->tx_head->next;
    1ebc:	681a      	ldr	r2, [r3, #0]
    1ebe:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    1ec0:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
    1ec2:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    1ec4:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
    1ec8:	f7ff b8fb 	b.w	10c2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x8c2>
		LL_ASSERT(rx && rx->hdr.link);
    1ecc:	4acf      	ldr	r2, [pc, #828]	; (220c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe84>)
    1ece:	49d0      	ldr	r1, [pc, #832]	; (2210 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe88>)
    1ed0:	48d0      	ldr	r0, [pc, #832]	; (2214 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe8c>)
    1ed2:	f640 635d 	movw	r3, #3677	; 0xe5d
    1ed6:	f013 ff33 	bl	15d40 <printk>
    1eda:	4040      	eors	r0, r0
    1edc:	f380 8811 	msr	BASEPRI, r0
    1ee0:	f04f 0003 	mov.w	r0, #3
    1ee4:	df02      	svc	2
    1ee6:	6838      	ldr	r0, [r7, #0]
    1ee8:	e4c3      	b.n	1872 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4ea>
			if (!conn->llcp_length.cache.tx_octets) {
    1eea:	f8b4 3190 	ldrh.w	r3, [r4, #400]	; 0x190
    1eee:	2b00      	cmp	r3, #0
    1ef0:	d15b      	bne.n	1faa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc22>
				conn->llcp_length.ack = conn->llcp_length.req;
    1ef2:	f884 7185 	strb.w	r7, [r4, #389]	; 0x185
				conn->procedure_expire = 0U;
    1ef6:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
    1efa:	e4b1      	b.n	1860 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4d8>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1efc:	48c6      	ldr	r0, [pc, #792]	; (2218 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe90>)
    1efe:	f006 fb17 	bl	8530 <mem_acquire>
		if (!tx) {
    1f02:	4601      	mov	r1, r0
    1f04:	2800      	cmp	r0, #0
    1f06:	f43e af8e 	beq.w	e26 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x626>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    1f0a:	7903      	ldrb	r3, [r0, #4]
    1f0c:	f043 0303 	orr.w	r3, r3, #3
    1f10:	710b      	strb	r3, [r1, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    1f12:	2011      	movs	r0, #17
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    1f14:	2203      	movs	r2, #3
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    1f16:	230f      	movs	r3, #15
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    1f18:	71c8      	strb	r0, [r1, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    1f1a:	714a      	strb	r2, [r1, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    1f1c:	720b      	strb	r3, [r1, #8]
		rej->error_code = conn->llcp_conn_param.status;
    1f1e:	f894 315f 	ldrb.w	r3, [r4, #351]	; 0x15f
    1f22:	724b      	strb	r3, [r1, #9]
	ctrl_tx_pause_enqueue(conn, tx, false);
    1f24:	2200      	movs	r2, #0
    1f26:	4620      	mov	r0, r4
    1f28:	f00a fffe 	bl	cf28 <ctrl_tx_pause_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    1f2c:	f894 315c 	ldrb.w	r3, [r4, #348]	; 0x15c
    1f30:	f884 315d 	strb.w	r3, [r4, #349]	; 0x15d
	conn_upd_curr = NULL;
    1f34:	2300      	movs	r3, #0
    1f36:	603b      	str	r3, [r7, #0]
		return;
    1f38:	f7fe bf75 	b.w	e26 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x626>
	    ((pdu_data_tx->llctrl.opcode !=
    1f3c:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    1f3e:	2a03      	cmp	r2, #3
    1f40:	d096      	beq.n	1e70 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xae8>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    1f42:	2a0a      	cmp	r2, #10
    1f44:	f47f a82b 	bne.w	f9e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x79e>
    1f48:	e792      	b.n	1e70 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xae8>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    1f4a:	791a      	ldrb	r2, [r3, #4]
    1f4c:	f002 0203 	and.w	r2, r2, #3
    1f50:	2a03      	cmp	r2, #3
    1f52:	f000 8187 	beq.w	2264 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xedc>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    1f56:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    1f5a:	f7ff b8aa 	b.w	10b2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x8b2>
			conn->tx_data = conn->tx_data->next;
    1f5e:	6819      	ldr	r1, [r3, #0]
    1f60:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    1f64:	2a00      	cmp	r2, #0
    1f66:	f47f ac07 	bne.w	1778 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3f0>
			tx->next = conn->tx_head->next;
    1f6a:	681a      	ldr	r2, [r3, #0]
    1f6c:	603a      	str	r2, [r7, #0]
			conn->tx_head->next = tx;
    1f6e:	601f      	str	r7, [r3, #0]
				conn->tx_ctrl = tx;
    1f70:	683b      	ldr	r3, [r7, #0]
				conn->tx_ctrl_last = tx;
    1f72:	e9c4 7768 	strd	r7, r7, [r4, #416]	; 0x1a0
    1f76:	e407      	b.n	1788 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x400>
			conn->tx_data = conn->tx_data->next;
    1f78:	680a      	ldr	r2, [r1, #0]
    1f7a:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    1f7e:	2b00      	cmp	r3, #0
    1f80:	f47f aed2 	bne.w	1d28 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9a0>
			tx->next = conn->tx_head->next;
    1f84:	680b      	ldr	r3, [r1, #0]
    1f86:	6033      	str	r3, [r6, #0]
			conn->tx_head->next = tx;
    1f88:	600e      	str	r6, [r1, #0]
				conn->tx_ctrl_last = tx;
    1f8a:	e9c4 6668 	strd	r6, r6, [r4, #416]	; 0x1a0
    1f8e:	e6d2      	b.n	1d36 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9ae>
			conn->tx_data = conn->tx_data->next;
    1f90:	6819      	ldr	r1, [r3, #0]
    1f92:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    1f96:	2a00      	cmp	r2, #0
    1f98:	f47f ad6f 	bne.w	1a7a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6f2>
			tx->next = conn->tx_head->next;
    1f9c:	681a      	ldr	r2, [r3, #0]
    1f9e:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
    1fa0:	601e      	str	r6, [r3, #0]
				conn->tx_ctrl = tx;
    1fa2:	6833      	ldr	r3, [r6, #0]
				conn->tx_ctrl_last = tx;
    1fa4:	e9c4 6668 	strd	r6, r6, [r4, #416]	; 0x1a0
    1fa8:	e56f      	b.n	1a8a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x702>
				conn->llcp_length.cache.tx_octets = 0;
    1faa:	2100      	movs	r1, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    1fac:	f361 0202 	bfi	r2, r1, #0, #3
				conn->llcp_length.tx_octets =
    1fb0:	f8a4 318a 	strh.w	r3, [r4, #394]	; 0x18a
				conn->llcp_length.tx_time =
    1fb4:	f8b4 3192 	ldrh.w	r3, [r4, #402]	; 0x192
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    1fb8:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
				conn->llcp_length.cache.tx_octets = 0;
    1fbc:	f8a4 1190 	strh.w	r1, [r4, #400]	; 0x190
				conn->llcp_length.tx_time =
    1fc0:	f8a4 318e 	strh.w	r3, [r4, #398]	; 0x18e
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    1fc4:	e44c      	b.n	1860 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4d8>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    1fc6:	791a      	ldrb	r2, [r3, #4]
    1fc8:	f002 0203 	and.w	r2, r2, #3
    1fcc:	2a03      	cmp	r2, #3
    1fce:	f000 8125 	beq.w	221c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe94>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    1fd2:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    1fd6:	e550      	b.n	1a7a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6f2>
			conn->tx_data = conn->tx_data->next;
    1fd8:	6818      	ldr	r0, [r3, #0]
    1fda:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    1fde:	2900      	cmp	r1, #0
    1fe0:	f47f a962 	bne.w	12a8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xaa8>
			tx->next = conn->tx_head->next;
    1fe4:	6819      	ldr	r1, [r3, #0]
    1fe6:	f845 1c09 	str.w	r1, [r5, #-9]
			conn->tx_head->next = tx;
    1fea:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl = tx;
    1fec:	f855 3c09 	ldr.w	r3, [r5, #-9]
				conn->tx_ctrl_last = tx;
    1ff0:	e9c4 2268 	strd	r2, r2, [r4, #416]	; 0x1a0
    1ff4:	f7ff b962 	b.w	12bc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xabc>
			conn->tx_data = conn->tx_data->next;
    1ff8:	6801      	ldr	r1, [r0, #0]
    1ffa:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    1ffe:	2a00      	cmp	r2, #0
    2000:	f47f a916 	bne.w	1230 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xa30>
			tx->next = conn->tx_head->next;
    2004:	6802      	ldr	r2, [r0, #0]
    2006:	f845 2c09 	str.w	r2, [r5, #-9]
			conn->tx_head->next = tx;
    200a:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    200c:	f855 0c09 	ldr.w	r0, [r5, #-9]
				conn->tx_ctrl_last = tx;
    2010:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    2014:	f7ff b916 	b.w	1244 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xa44>
		if (conn->llcp_phy.tx & PHY_2M) {
    2018:	0708      	lsls	r0, r1, #28
		conn->llcp_phy.ack = conn->llcp_phy.req;
    201a:	f884 2195 	strb.w	r2, [r4, #405]	; 0x195
		if (conn->llcp_phy.tx & PHY_2M) {
    201e:	f3c1 0282 	ubfx	r2, r1, #2, #3
    2022:	f140 8086 	bpl.w	2132 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xdaa>
			conn->llcp_phy.tx = PHY_2M;
    2026:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
    202a:	2102      	movs	r1, #2
    202c:	f361 0284 	bfi	r2, r1, #2, #3
    2030:	f884 2196 	strb.w	r2, [r4, #406]	; 0x196
		if (conn->llcp_phy.rx & PHY_2M) {
    2034:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
    2038:	0657      	lsls	r7, r2, #25
    203a:	ea4f 1152 	mov.w	r1, r2, lsr #5
    203e:	d570      	bpl.n	2122 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd9a>
			conn->llcp_phy.rx = PHY_2M;
    2040:	2102      	movs	r1, #2
    2042:	f361 1247 	bfi	r2, r1, #5, #3
    2046:	f884 2196 	strb.w	r2, [r4, #406]	; 0x196
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
    204a:	f894 1196 	ldrb.w	r1, [r4, #406]	; 0x196
    204e:	f894 c046 	ldrb.w	ip, [r4, #70]	; 0x46
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    2052:	f894 0047 	ldrb.w	r0, [r4, #71]	; 0x47
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    2056:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
    205a:	f3c1 0782 	ubfx	r7, r1, #2, #3
    205e:	f00c 0c07 	and.w	ip, ip, #7
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    2062:	f000 0007 	and.w	r0, r0, #7
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    2066:	f3c2 0280 	ubfx	r2, r2, #2, #1
			conn->llcp.phy_upd_ind.tx = 0U;
    206a:	45bc      	cmp	ip, r7
    206c:	bf08      	it	eq
    206e:	2700      	moveq	r7, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
    2070:	0052      	lsls	r2, r2, #1
			conn->llcp.phy_upd_ind.rx = 0U;
    2072:	ebb0 1f51 	cmp.w	r0, r1, lsr #5
		conn->llcp.phy_upd_ind.initiate = 1U;
    2076:	f042 0201 	orr.w	r2, r2, #1
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    207a:	ea4f 1151 	mov.w	r1, r1, lsr #5
			conn->llcp.phy_upd_ind.rx = 0U;
    207e:	bf08      	it	eq
    2080:	2100      	moveq	r1, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
    2082:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
		conn->llcp_ack -= 2U;
    2086:	3b02      	subs	r3, #2
		conn->llcp.phy_upd_ind.initiate = 1U;
    2088:	ea42 0287 	orr.w	r2, r2, r7, lsl #2
		conn->llcp_type = LLCP_PHY_UPD;
    208c:	2106      	movs	r1, #6
		conn->llcp_ack -= 2U;
    208e:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
		conn->llcp.phy_upd_ind.initiate = 1U;
    2092:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
		conn->llcp_type = LLCP_PHY_UPD;
    2096:	f884 10bd 	strb.w	r1, [r4, #189]	; 0xbd
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    209a:	f7fe bafb 	b.w	694 <ull_conn_llcp+0x74>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    209e:	7902      	ldrb	r2, [r0, #4]
    20a0:	f002 0203 	and.w	r2, r2, #3
    20a4:	2a03      	cmp	r2, #3
    20a6:	f000 80e5 	beq.w	2274 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xeec>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    20aa:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
    20ae:	f7ff b8bf 	b.w	1230 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xa30>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    20b2:	7919      	ldrb	r1, [r3, #4]
    20b4:	f001 0103 	and.w	r1, r1, #3
    20b8:	2903      	cmp	r1, #3
    20ba:	d024      	beq.n	2106 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd7e>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    20bc:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    20c0:	f7ff b8f2 	b.w	12a8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xaa8>
				LL_ASSERT(rx && rx->hdr.link);
    20c4:	4a51      	ldr	r2, [pc, #324]	; (220c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe84>)
    20c6:	4952      	ldr	r1, [pc, #328]	; (2210 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe88>)
    20c8:	4852      	ldr	r0, [pc, #328]	; (2214 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe8c>)
    20ca:	f640 73a5 	movw	r3, #4005	; 0xfa5
    20ce:	f013 fe37 	bl	15d40 <printk>
    20d2:	4040      	eors	r0, r0
    20d4:	f380 8811 	msr	BASEPRI, r0
    20d8:	f04f 0003 	mov.w	r0, #3
    20dc:	df02      	svc	2
    20de:	6828      	ldr	r0, [r5, #0]
    20e0:	e47b      	b.n	19da <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x652>
	    ((pdu_data_tx->llctrl.opcode !=
    20e2:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    20e4:	2a03      	cmp	r2, #3
    20e6:	f43f a94d 	beq.w	1384 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xb84>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    20ea:	2a0a      	cmp	r2, #10
    20ec:	f47f aeb6 	bne.w	1e5c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xad4>
    20f0:	f7ff b948 	b.w	1384 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xb84>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    20f4:	791a      	ldrb	r2, [r3, #4]
    20f6:	f002 0203 	and.w	r2, r2, #3
    20fa:	2a03      	cmp	r2, #3
    20fc:	d00a      	beq.n	2114 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd8c>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    20fe:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    2102:	f7ff bb39 	b.w	1778 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3f0>
	    ((pdu_data_tx->llctrl.opcode !=
    2106:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    2108:	2903      	cmp	r1, #3
    210a:	f43f af6b 	beq.w	1fe4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc5c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    210e:	290a      	cmp	r1, #10
    2110:	d1d4      	bne.n	20bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd34>
    2112:	e767      	b.n	1fe4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc5c>
	    ((pdu_data_tx->llctrl.opcode !=
    2114:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    2116:	2a03      	cmp	r2, #3
    2118:	f43f af27 	beq.w	1f6a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbe2>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    211c:	2a0a      	cmp	r2, #10
    211e:	d1ee      	bne.n	20fe <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd76>
    2120:	e723      	b.n	1f6a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbe2>
		} else if (conn->llcp_phy.rx & PHY_1M) {
    2122:	07c8      	lsls	r0, r1, #31
    2124:	d50f      	bpl.n	2146 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xdbe>
			conn->llcp_phy.rx = PHY_1M;
    2126:	2101      	movs	r1, #1
    2128:	f361 1247 	bfi	r2, r1, #5, #3
    212c:	f884 2196 	strb.w	r2, [r4, #406]	; 0x196
    2130:	e78b      	b.n	204a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xcc2>
		} else if (conn->llcp_phy.tx & PHY_1M) {
    2132:	07d1      	lsls	r1, r2, #31
    2134:	d510      	bpl.n	2158 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xdd0>
			conn->llcp_phy.tx = PHY_1M;
    2136:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
    213a:	2101      	movs	r1, #1
    213c:	f361 0284 	bfi	r2, r1, #2, #3
    2140:	f884 2196 	strb.w	r2, [r4, #406]	; 0x196
    2144:	e776      	b.n	2034 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xcac>
		} else if (conn->llcp_phy.rx & PHY_CODED) {
    2146:	f011 0104 	ands.w	r1, r1, #4
			conn->llcp_phy.rx = PHY_CODED;
    214a:	bf18      	it	ne
    214c:	2104      	movne	r1, #4
			conn->llcp_phy.rx = 0U;
    214e:	f361 1247 	bfi	r2, r1, #5, #3
    2152:	f884 2196 	strb.w	r2, [r4, #406]	; 0x196
    2156:	e778      	b.n	204a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xcc2>
		} else if (conn->llcp_phy.tx & PHY_CODED) {
    2158:	f012 0204 	ands.w	r2, r2, #4
    215c:	f000 80bb 	beq.w	22d6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf4e>
			conn->llcp_phy.tx = PHY_CODED;
    2160:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
    2164:	2104      	movs	r1, #4
    2166:	f361 0284 	bfi	r2, r1, #2, #3
    216a:	f884 2196 	strb.w	r2, [r4, #406]	; 0x196
    216e:	e761      	b.n	2034 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xcac>
				conn->llcp_conn_param.interval_max;
    2170:	f8b4 3162 	ldrh.w	r3, [r4, #354]	; 0x162
    2174:	f7ff b9a9 	b.w	14ca <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x142>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2178:	4827      	ldr	r0, [pc, #156]	; (2218 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe90>)
    217a:	f006 f9d9 	bl	8530 <mem_acquire>
	if (!tx) {
    217e:	4601      	mov	r1, r0
    2180:	2800      	cmp	r0, #0
    2182:	f43e ae50 	beq.w	e26 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x626>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    2186:	7903      	ldrb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    2188:	2218      	movs	r2, #24
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    218a:	f043 0303 	orr.w	r3, r3, #3
    218e:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    2190:	7142      	strb	r2, [r0, #5]
	rsp->interval_min =
    2192:	f8b4 2160 	ldrh.w	r2, [r4, #352]	; 0x160
	rsp->interval_max =
    2196:	f8b4 3162 	ldrh.w	r3, [r4, #354]	; 0x162
	rsp->latency =
    219a:	f8b4 0164 	ldrh.w	r0, [r4, #356]	; 0x164
	rsp->interval_min =
    219e:	810a      	strh	r2, [r1, #8]
	rsp->timeout =
    21a0:	f8b4 2166 	ldrh.w	r2, [r4, #358]	; 0x166
	rsp->interval_max =
    21a4:	814b      	strh	r3, [r1, #10]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    21a6:	2310      	movs	r3, #16
	rsp->latency =
    21a8:	8188      	strh	r0, [r1, #12]
	rsp->timeout =
    21aa:	81ca      	strh	r2, [r1, #14]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    21ac:	71cb      	strb	r3, [r1, #7]
	rsp->preferred_periodicity =
    21ae:	f894 3168 	ldrb.w	r3, [r4, #360]	; 0x168
    21b2:	740b      	strb	r3, [r1, #16]
	rsp->reference_conn_event_count =
    21b4:	f8b4 316a 	ldrh.w	r3, [r4, #362]	; 0x16a
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
    21b8:	f8b4 016c 	ldrh.w	r0, [r4, #364]	; 0x16c
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
    21bc:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
	rsp->reference_conn_event_count =
    21c0:	f8a1 3011 	strh.w	r3, [r1, #17]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
    21c4:	f8b4 3170 	ldrh.w	r3, [r4, #368]	; 0x170
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
    21c8:	f8a1 0013 	strh.w	r0, [r1, #19]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
    21cc:	f8b4 0172 	ldrh.w	r0, [r4, #370]	; 0x172
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
    21d0:	f8a1 2015 	strh.w	r2, [r1, #21]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
    21d4:	f8b4 2174 	ldrh.w	r2, [r4, #372]	; 0x174
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
    21d8:	f8a1 3017 	strh.w	r3, [r1, #23]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
    21dc:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
    21e0:	f8a1 301d 	strh.w	r3, [r1, #29]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
    21e4:	f8a1 0019 	strh.w	r0, [r1, #25]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
    21e8:	f8a1 201b 	strh.w	r2, [r1, #27]
	ctrl_tx_pause_enqueue(conn, tx, false);
    21ec:	4620      	mov	r0, r4
    21ee:	4642      	mov	r2, r8
    21f0:	f00a fe9a 	bl	cf28 <ctrl_tx_pause_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    21f4:	f894 315c 	ldrb.w	r3, [r4, #348]	; 0x15c
    21f8:	f884 315d 	strb.w	r3, [r4, #349]	; 0x15d
	conn_upd_curr = NULL;
    21fc:	f894 00bb 	ldrb.w	r0, [r4, #187]	; 0xbb
    2200:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
    2204:	f8c7 8000 	str.w	r8, [r7]
}
    2208:	f7fe ba16 	b.w	638 <ull_conn_llcp+0x18>
    220c:	00019cec 	.word	0x00019cec
    2210:	00019df8 	.word	0x00019df8
    2214:	000199cc 	.word	0x000199cc
    2218:	20001a90 	.word	0x20001a90
	    ((pdu_data_tx->llctrl.opcode !=
    221c:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    221e:	2a03      	cmp	r2, #3
    2220:	f43f aebc 	beq.w	1f9c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc14>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    2224:	2a0a      	cmp	r2, #10
    2226:	f47f aed4 	bne.w	1fd2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc4a>
    222a:	e6b7      	b.n	1f9c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc14>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    222c:	790b      	ldrb	r3, [r1, #4]
    222e:	f003 0303 	and.w	r3, r3, #3
    2232:	2b03      	cmp	r3, #3
    2234:	d048      	beq.n	22c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf40>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    2236:	e9c4 1168 	strd	r1, r1, [r4, #416]	; 0x1a0
    223a:	e575      	b.n	1d28 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9a0>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    223c:	791a      	ldrb	r2, [r3, #4]
    223e:	f002 0203 	and.w	r2, r2, #3
    2242:	2a03      	cmp	r2, #3
    2244:	d01e      	beq.n	2284 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xefc>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    2246:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    224a:	e505      	b.n	1c58 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8d0>
			conn->tx_data = conn->tx_data->next;
    224c:	6819      	ldr	r1, [r3, #0]
    224e:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    2252:	2a00      	cmp	r2, #0
    2254:	f47f ad00 	bne.w	1c58 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8d0>
			tx->next = conn->tx_head->next;
    2258:	681a      	ldr	r2, [r3, #0]
    225a:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    225c:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
    225e:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
    2262:	e500      	b.n	1c66 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8de>
	    ((pdu_data_tx->llctrl.opcode !=
    2264:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    2266:	2a03      	cmp	r2, #3
    2268:	f43f ae28 	beq.w	1ebc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb34>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    226c:	2a0a      	cmp	r2, #10
    226e:	f47f ae72 	bne.w	1f56 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbce>
    2272:	e623      	b.n	1ebc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb34>
	    ((pdu_data_tx->llctrl.opcode !=
    2274:	79c2      	ldrb	r2, [r0, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    2276:	2a03      	cmp	r2, #3
    2278:	f43f aec4 	beq.w	2004 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc7c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    227c:	2a0a      	cmp	r2, #10
    227e:	f47f af14 	bne.w	20aa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd22>
    2282:	e6bf      	b.n	2004 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc7c>
	    ((pdu_data_tx->llctrl.opcode !=
    2284:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    2286:	2a03      	cmp	r2, #3
    2288:	d0e6      	beq.n	2258 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xed0>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    228a:	2a0a      	cmp	r2, #10
    228c:	d1db      	bne.n	2246 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xebe>
    228e:	e7e3      	b.n	2258 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xed0>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    2290:	7919      	ldrb	r1, [r3, #4]
    2292:	f001 0103 	and.w	r1, r1, #3
    2296:	2903      	cmp	r1, #3
    2298:	d010      	beq.n	22bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf34>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    229a:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    229e:	f7ff bb51 	b.w	1944 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5bc>
			conn->tx_data = conn->tx_data->next;
    22a2:	6818      	ldr	r0, [r3, #0]
    22a4:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    22a8:	2900      	cmp	r1, #0
    22aa:	f47f ab4b 	bne.w	1944 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5bc>
			tx->next = conn->tx_head->next;
    22ae:	6819      	ldr	r1, [r3, #0]
    22b0:	6011      	str	r1, [r2, #0]
			conn->tx_head->next = tx;
    22b2:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last = tx;
    22b4:	e9c4 2268 	strd	r2, r2, [r4, #416]	; 0x1a0
    22b8:	f7ff bb4b 	b.w	1952 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5ca>
	    ((pdu_data_tx->llctrl.opcode !=
    22bc:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    22be:	2903      	cmp	r1, #3
    22c0:	d0f5      	beq.n	22ae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf26>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    22c2:	290a      	cmp	r1, #10
    22c4:	d1e9      	bne.n	229a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf12>
    22c6:	e7f2      	b.n	22ae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf26>
	    ((pdu_data_tx->llctrl.opcode !=
    22c8:	79cb      	ldrb	r3, [r1, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    22ca:	2b03      	cmp	r3, #3
    22cc:	f43f ae5a 	beq.w	1f84 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbfc>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    22d0:	2b0a      	cmp	r3, #10
    22d2:	d1b0      	bne.n	2236 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xeae>
    22d4:	e656      	b.n	1f84 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbfc>
			conn->llcp_phy.tx = 0U;
    22d6:	f894 1196 	ldrb.w	r1, [r4, #406]	; 0x196
    22da:	f362 0184 	bfi	r1, r2, #2, #3
    22de:	f884 1196 	strb.w	r1, [r4, #406]	; 0x196
    22e2:	e6a7      	b.n	2034 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xcac>
		LL_ASSERT(0);
    22e4:	4a1a      	ldr	r2, [pc, #104]	; (2350 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xfc8>)
    22e6:	491b      	ldr	r1, [pc, #108]	; (2354 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xfcc>)
    22e8:	481b      	ldr	r0, [pc, #108]	; (2358 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xfd0>)
    22ea:	f640 5389 	movw	r3, #3465	; 0xd89
    22ee:	f013 fd27 	bl	15d40 <printk>
    22f2:	4040      	eors	r0, r0
    22f4:	f380 8811 	msr	BASEPRI, r0
    22f8:	f04f 0003 	mov.w	r0, #3
    22fc:	df02      	svc	2
		break;
    22fe:	f894 00bb 	ldrb.w	r0, [r4, #187]	; 0xbb
    2302:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
    2306:	f7fe b997 	b.w	638 <ull_conn_llcp+0x18>
			LL_ASSERT(0);
    230a:	4a11      	ldr	r2, [pc, #68]	; (2350 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xfc8>)
    230c:	4911      	ldr	r1, [pc, #68]	; (2354 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xfcc>)
    230e:	4812      	ldr	r0, [pc, #72]	; (2358 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xfd0>)
    2310:	f44f 6319 	mov.w	r3, #2448	; 0x990
    2314:	f013 fd14 	bl	15d40 <printk>
    2318:	4040      	eors	r0, r0
    231a:	f380 8811 	msr	BASEPRI, r0
    231e:	f04f 0003 	mov.w	r0, #3
    2322:	df02      	svc	2
		void (*fp_mfy_select_or_use)(void *) = NULL;
    2324:	2700      	movs	r7, #0
			break;
    2326:	f7fe bed6 	b.w	10d6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x8d6>
		LL_ASSERT(0);
    232a:	f640 6385 	movw	r3, #3717	; 0xe85
    232e:	e453      	b.n	1bd8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x850>
    2330:	4a07      	ldr	r2, [pc, #28]	; (2350 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xfc8>)
    2332:	4908      	ldr	r1, [pc, #32]	; (2354 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xfcc>)
    2334:	4808      	ldr	r0, [pc, #32]	; (2358 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xfd0>)
    2336:	f640 6385 	movw	r3, #3717	; 0xe85
    233a:	f013 fd01 	bl	15d40 <printk>
    233e:	4040      	eors	r0, r0
    2340:	f380 8811 	msr	BASEPRI, r0
    2344:	f04f 0003 	mov.w	r0, #3
    2348:	df02      	svc	2
		break;
    234a:	f7fe b9a3 	b.w	694 <ull_conn_llcp+0x74>
    234e:	bf00      	nop
    2350:	00019cec 	.word	0x00019cec
    2354:	00019a2c 	.word	0x00019a2c
    2358:	000199cc 	.word	0x000199cc
    235c:	00000000 	.word	0x00000000

00002360 <ll_create_connection>:
uint8_t ll_create_connection(uint16_t scan_interval, uint16_t scan_window,
			  uint8_t filter_policy, uint8_t peer_addr_type,
			  uint8_t const *const peer_addr, uint8_t own_addr_type,
			  uint16_t interval, uint16_t latency, uint16_t timeout)
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
{
    2360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2364:	b089      	sub	sp, #36	; 0x24
    2366:	4607      	mov	r7, r0
    2368:	9302      	str	r3, [sp, #8]
	struct ll_conn *conn;
	memq_link_t *link;
	uint8_t hop;
	int err;

	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
    236a:	2000      	movs	r0, #0
{
    236c:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
    2370:	f89d 904c 	ldrb.w	r9, [sp, #76]	; 0x4c
    2374:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
    2378:	f8bd b058 	ldrh.w	fp, [sp, #88]	; 0x58
    237c:	9303      	str	r3, [sp, #12]
    237e:	4688      	mov	r8, r1
    2380:	4616      	mov	r6, r2
	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
    2382:	f00a fd21 	bl	cdc8 <ull_scan_is_disabled_get>
	if (!scan) {
    2386:	2800      	cmp	r0, #0
    2388:	f000 81a2 	beq.w	26d0 <ll_create_connection+0x370>

#else /* !CONFIG_BT_CTLR_ADV_EXT */
	lll = &scan->lll;
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	if (lll->conn) {
    238c:	6a01      	ldr	r1, [r0, #32]
    238e:	4605      	mov	r5, r0
    2390:	b371      	cbz	r1, 23f0 <ll_create_connection+0x90>
	ull_hdr_init(&conn->ull);
	lll_hdr_init(&conn->lll, conn);

conn_is_valid:
#if defined(CONFIG_BT_CTLR_PRIVACY)
	ull_filter_scan_update(filter_policy);
    2392:	4630      	mov	r0, r6
    2394:	f00e fa3e 	bl	10814 <ull_filter_scan_update>

	lll->rl_idx = FILTER_IDX_NONE;
	lll->rpa_gen = 0;
    2398:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
	lll->rl_idx = FILTER_IDX_NONE;
    239c:	22ff      	movs	r2, #255	; 0xff
	lll->rpa_gen = 0;
    239e:	f36f 0300 	bfc	r3, #0, #1
    23a2:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
	lll->rl_idx = FILTER_IDX_NONE;
    23a6:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
	if (!filter_policy && ull_filter_lll_rl_enabled()) {
    23aa:	b1ae      	cbz	r6, 23d8 <ll_create_connection+0x78>
		/* Look up the resolving list */
		lll->rl_idx = ull_filter_rl_find(peer_addr_type, peer_addr,
						 NULL);
	}

	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    23ac:	f1a9 0302 	sub.w	r3, r9, #2
    23b0:	2b01      	cmp	r3, #1
    23b2:	f240 8157 	bls.w	2664 <ll_create_connection+0x304>
		own_addr_type &= 0x1;
		lll->rpa_gen = 1;
	}
#endif

	scan->own_addr_type = own_addr_type;
    23b6:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
    23ba:	f369 0342 	bfi	r3, r9, #1, #2
    23be:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44

#if defined(CONFIG_BT_CTLR_ADV_EXT)
	return 0;
#else /* !CONFIG_BT_CTLR_ADV_EXT */
	/* wait for stable clocks */
	err = lll_clock_wait();
    23c2:	f00f fbd3 	bl	11b6c <lll_clock_wait>
	if (err) {
    23c6:	2800      	cmp	r0, #0
    23c8:	f040 8158 	bne.w	267c <ll_create_connection+0x31c>
		conn_release(scan);

		return BT_HCI_ERR_HW_FAILURE;
	}

	return ull_scan_enable(scan);
    23cc:	4628      	mov	r0, r5
    23ce:	f7fe f873 	bl	4b8 <ull_scan_enable>
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
}
    23d2:	b009      	add	sp, #36	; 0x24
    23d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!filter_policy && ull_filter_lll_rl_enabled()) {
    23d8:	f00e ffb2 	bl	11340 <ull_filter_lll_rl_enabled>
    23dc:	2800      	cmp	r0, #0
    23de:	d0e5      	beq.n	23ac <ll_create_connection+0x4c>
		lll->rl_idx = ull_filter_rl_find(peer_addr_type, peer_addr,
    23e0:	9802      	ldr	r0, [sp, #8]
    23e2:	9912      	ldr	r1, [sp, #72]	; 0x48
    23e4:	4632      	mov	r2, r6
    23e6:	f00e fb19 	bl	10a1c <ull_filter_rl_find>
    23ea:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
    23ee:	e7dd      	b.n	23ac <ll_create_connection+0x4c>
	link = ll_rx_link_alloc();
    23f0:	9105      	str	r1, [sp, #20]
    23f2:	f00a f927 	bl	c644 <ll_rx_link_alloc>
	if (!link) {
    23f6:	9004      	str	r0, [sp, #16]
    23f8:	2800      	cmp	r0, #0
    23fa:	f000 817e 	beq.w	26fa <ll_create_connection+0x39a>
	conn = ll_conn_acquire();
    23fe:	f00b f89d 	bl	d53c <ll_conn_acquire>
	if (!conn) {
    2402:	9905      	ldr	r1, [sp, #20]
    2404:	4604      	mov	r4, r0
    2406:	2800      	cmp	r0, #0
    2408:	f000 8179 	beq.w	26fe <ll_create_connection+0x39e>
	ull_scan_params_set(lll, 0, scan_interval, scan_window, filter_policy);
    240c:	4643      	mov	r3, r8
    240e:	463a      	mov	r2, r7
    2410:	f105 001c 	add.w	r0, r5, #28
    2414:	9600      	str	r6, [sp, #0]
    2416:	f7fe f827 	bl	468 <ull_scan_params_set>
	lll->adv_addr_type = peer_addr_type;
    241a:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
    241e:	9a02      	ldr	r2, [sp, #8]
	memcpy(lll->adv_addr, peer_addr, BDADDR_SIZE);
    2420:	9912      	ldr	r1, [sp, #72]	; 0x48
	lll->adv_addr_type = peer_addr_type;
    2422:	f362 13c7 	bfi	r3, r2, #7, #1
    2426:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
	memcpy(lll->adv_addr, peer_addr, BDADDR_SIZE);
    242a:	2206      	movs	r2, #6
    242c:	f105 0024 	add.w	r0, r5, #36	; 0x24
    2430:	f014 fb3e 	bl	16ab0 <memcpy>
	lll->conn_timeout = timeout;
    2434:	f8a5 b030 	strh.w	fp, [r5, #48]	; 0x30
	err = util_aa_le32(conn_lll->access_addr);
    2438:	f104 0020 	add.w	r0, r4, #32
    243c:	f006 fa5e 	bl	88fc <util_aa_le32>
	conn_lll = &conn->lll;
    2440:	f104 081c 	add.w	r8, r4, #28
	LL_ASSERT(!err);
    2444:	2800      	cmp	r0, #0
    2446:	f040 8147 	bne.w	26d8 <ll_create_connection+0x378>
	lll_csrand_get(conn_lll->crc_init, sizeof(conn_lll->crc_init));
    244a:	2103      	movs	r1, #3
    244c:	f104 0024 	add.w	r0, r4, #36	; 0x24
    2450:	f00f f904 	bl	1165c <lll_csrand_get>
	if (!conn_lll->link_tx_free) {
    2454:	6da0      	ldr	r0, [r4, #88]	; 0x58
	conn_lll->latency = latency;
    2456:	9a03      	ldr	r2, [sp, #12]
	conn_lll->interval = interval;
    2458:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
	conn_lll->handle = 0xFFFF;
    245c:	f64f 73ff 	movw	r3, #65535	; 0xffff
	conn_lll->latency = latency;
    2460:	85a2      	strh	r2, [r4, #44]	; 0x2c
	conn_lll->handle = 0xFFFF;
    2462:	8523      	strh	r3, [r4, #40]	; 0x28
	if (!conn_lll->link_tx_free) {
    2464:	2800      	cmp	r0, #0
    2466:	f000 8144 	beq.w	26f2 <ll_create_connection+0x392>
	memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
    246a:	f104 024c 	add.w	r2, r4, #76	; 0x4c
    246e:	f104 0148 	add.w	r1, r4, #72	; 0x48
    2472:	f006 f8b3 	bl	85dc <memq_init>
	conn_lll->max_rx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    2476:	6c60      	ldr	r0, [r4, #68]	; 0x44
    2478:	49b3      	ldr	r1, [pc, #716]	; (2748 <ll_create_connection+0x3e8>)
    247a:	4ab4      	ldr	r2, [pc, #720]	; (274c <ll_create_connection+0x3ec>)
	conn_lll->sn = 0;
    247c:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
	conn_lll->max_rx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    2480:	4001      	ands	r1, r0
    2482:	430a      	orrs	r2, r1
	conn_lll->link_tx_free = NULL;
    2484:	2700      	movs	r7, #0
	conn_lll->sn = 0;
    2486:	f023 0307 	bic.w	r3, r3, #7
	conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    248a:	211b      	movs	r1, #27
	conn_lll->max_rx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    248c:	6462      	str	r2, [r4, #68]	; 0x44
	conn_lll->max_rx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    248e:	4ab0      	ldr	r2, [pc, #704]	; (2750 <ll_create_connection+0x3f0>)
    2490:	6422      	str	r2, [r4, #64]	; 0x40
	conn_lll->sn = 0;
    2492:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	conn_lll->link_tx_free = NULL;
    2496:	65a7      	str	r7, [r4, #88]	; 0x58
	conn_lll->packet_tx_head_len = 0;
    2498:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
	conn_lll->latency_prepare = 0;
    249c:	85e7      	strh	r7, [r4, #46]	; 0x2e
	conn_lll->latency_event = 0;
    249e:	6327      	str	r7, [r4, #48]	; 0x30
	conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    24a0:	87e1      	strh	r1, [r4, #62]	; 0x3e
	conn_lll->data_chan_count = ull_chan_map_get(conn_lll->data_chan_map);
    24a2:	f104 0034 	add.w	r0, r4, #52	; 0x34
    24a6:	f00d fefd 	bl	102a4 <ull_chan_map_get>
    24aa:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    24ae:	f360 0305 	bfi	r3, r0, #0, #6
	lll_csrand_get(&hop, sizeof(uint8_t));
    24b2:	2101      	movs	r1, #1
	conn_lll->data_chan_count = ull_chan_map_get(conn_lll->data_chan_map);
    24b4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	lll_csrand_get(&hop, sizeof(uint8_t));
    24b8:	f10d 001f 	add.w	r0, sp, #31
    24bc:	f00f f8ce 	bl	1165c <lll_csrand_get>
	conn_lll->data_chan_hop = 5 + (hop % 12);
    24c0:	f89d 201f 	ldrb.w	r2, [sp, #31]
    24c4:	4ba3      	ldr	r3, [pc, #652]	; (2754 <ll_create_connection+0x3f4>)
	conn_lll->data_chan_use = 0;
    24c6:	f884 703b 	strb.w	r7, [r4, #59]	; 0x3b
	conn_lll->data_chan_hop = 5 + (hop % 12);
    24ca:	fba3 1302 	umull	r1, r3, r3, r2
    24ce:	08db      	lsrs	r3, r3, #3
    24d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	conn_interval_us = (uint32_t)interval * CONN_INT_UNIT_US;
    24d4:	f240 41e2 	movw	r1, #1250	; 0x4e2
	conn_lll->data_chan_hop = 5 + (hop % 12);
    24d8:	eba2 0283 	sub.w	r2, r2, r3, lsl #2
	conn_interval_us = (uint32_t)interval * CONN_INT_UNIT_US;
    24dc:	fb01 fa0a 	mul.w	sl, r1, sl
	conn_lll->data_chan_hop = 5 + (hop % 12);
    24e0:	3205      	adds	r2, #5
	conn->supervision_expire = 0U;
    24e2:	f8a4 70a8 	strh.w	r7, [r4, #168]	; 0xa8
	conn->procedure_expire = 0U;
    24e6:	f8a4 70ac 	strh.w	r7, [r4, #172]	; 0xac
	conn->apto_expire = 0U;
    24ea:	f8a4 70b4 	strh.w	r7, [r4, #180]	; 0xb4
	conn->appto_expire = 0U;
    24ee:	f8a4 70b0 	strh.w	r7, [r4, #176]	; 0xb0
	conn_lll->data_chan_hop = 5 + (hop % 12);
    24f2:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
    24f6:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
    24fa:	f242 7210 	movw	r2, #10000	; 0x2710
	conn_lll->data_chan_sel = 0;
    24fe:	f894 c039 	ldrb.w	ip, [r4, #57]	; 0x39
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
    2502:	4b95      	ldr	r3, [pc, #596]	; (2758 <ll_create_connection+0x3f8>)
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    2504:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
	conn_lll->master.initiated = 0;
    2506:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
    250a:	fb02 770b 	mla	r7, r2, fp, r7
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
    250e:	4a93      	ldr	r2, [pc, #588]	; (275c <ll_create_connection+0x3fc>)
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
    2510:	fbb7 f7fa 	udiv	r7, r7, sl
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
    2514:	4453      	add	r3, sl
	conn_lll->data_chan_sel = 0;
    2516:	f00c 0c3f 	and.w	ip, ip, #63	; 0x3f
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
    251a:	4452      	add	r2, sl
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
    251c:	fbb3 f3fa 	udiv	r3, r3, sl
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
    2520:	f8a4 70a6 	strh.w	r7, [r4, #166]	; 0xa6
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
    2524:	fbb2 fafa 	udiv	sl, r2, sl
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
    2528:	b29f      	uxth	r7, r3
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    252a:	1d8a      	adds	r2, r1, #6
	conn_lll->master.initiated = 0;
    252c:	f020 0003 	bic.w	r0, r0, #3
	conn_lll->data_chan_sel = 0;
    2530:	f884 c039 	strb.w	ip, [r4, #57]	; 0x39
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    2534:	4297      	cmp	r7, r2
	conn->connect_expire = 6U;
    2536:	f04f 0c06 	mov.w	ip, #6
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
    253a:	f8a4 70b2 	strh.w	r7, [r4, #178]	; 0xb2
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
    253e:	f8a4 a0aa 	strh.w	sl, [r4, #170]	; 0xaa
	conn_lll->master.initiated = 0;
    2542:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
	conn->connect_expire = 6U;
    2546:	f8a4 c0a4 	strh.w	ip, [r4, #164]	; 0xa4
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    254a:	dd02      	ble.n	2552 <ll_create_connection+0x1f2>
			     (conn->apto_reload - (conn_lll->latency + 6)) :
    254c:	1a7f      	subs	r7, r7, r1
    254e:	3f06      	subs	r7, #6
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    2550:	b2bf      	uxth	r7, r7
	conn->common.fex_valid = 0U;
    2552:	f8b4 00ba 	ldrh.w	r0, [r4, #186]	; 0xba
	conn->llcp_version.tx = conn->llcp_version.rx = 0U;
    2556:	f894 1112 	ldrb.w	r1, [r4, #274]	; 0x112
	conn_lll->enc_rx = conn_lll->enc_tx = 0U;
    255a:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
	conn->llcp_conn_param.disabled = 0U;
    255e:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    2562:	f8a4 70ae 	strh.w	r7, [r4, #174]	; 0xae
	conn->llcp_terminate.node_rx.hdr.link = link;
    2566:	9f04      	ldr	r7, [sp, #16]
	conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    2568:	f894 e13e 	ldrb.w	lr, [r4, #318]	; 0x13e
	conn->llcp_length.disabled = 0U;
    256c:	f894 c186 	ldrb.w	ip, [r4, #390]	; 0x186
	conn->llcp_terminate.node_rx.hdr.link = link;
    2570:	f8c4 711c 	str.w	r7, [r4, #284]	; 0x11c
	conn->common.fex_valid = 0U;
    2574:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
	conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0U;
    2578:	2700      	movs	r7, #0
	conn->llcp_version.tx = conn->llcp_version.rx = 0U;
    257a:	f021 0103 	bic.w	r1, r1, #3
	conn_lll->enc_rx = conn_lll->enc_tx = 0U;
    257e:	f023 0318 	bic.w	r3, r3, #24
	conn->common.fex_valid = 0U;
    2582:	f8a4 00ba 	strh.w	r0, [r4, #186]	; 0xba
	conn->llcp_conn_param.disabled = 0U;
    2586:	f367 1204 	bfi	r2, r7, #4, #1
	conn->llcp_feature.features_conn = LL_FEAT;
    258a:	4875      	ldr	r0, [pc, #468]	; (2760 <ll_create_connection+0x400>)
	conn->llcp_version.tx = conn->llcp_version.rx = 0U;
    258c:	f884 1112 	strb.w	r1, [r4, #274]	; 0x112
	conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    2590:	f02e 0e07 	bic.w	lr, lr, #7
	conn->llcp_length.disabled = 0U;
    2594:	f367 0cc3 	bfi	ip, r7, #3, #1
	conn->llcp_feature.features_conn = LL_FEAT;
    2598:	2100      	movs	r1, #0
	conn_lll->enc_rx = conn_lll->enc_tx = 0U;
    259a:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	conn->llcp_conn_param.disabled = 0U;
    259e:	f884 215e 	strb.w	r2, [r4, #350]	; 0x15e
	conn->llcp_feature.features_peer = 0;
    25a2:	2300      	movs	r3, #0
    25a4:	2200      	movs	r2, #0
	conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    25a6:	f884 e13e 	strb.w	lr, [r4, #318]	; 0x13e
	conn->llcp_length.disabled = 0U;
    25aa:	f884 c186 	strb.w	ip, [r4, #390]	; 0x186
	conn->llcp_feature.features_conn = LL_FEAT;
    25ae:	e9c4 0140 	strd	r0, r1, [r4, #256]	; 0x100
	conn->llcp_feature.features_peer = 0;
    25b2:	e9c4 2342 	strd	r2, r3, [r4, #264]	; 0x108
	conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0U;
    25b6:	f8a4 70bc 	strh.w	r7, [r4, #188]	; 0xbc
	conn->llcp_rx = NULL;
    25ba:	f8c4 70e0 	str.w	r7, [r4, #224]	; 0xe0
	conn->llcp_cu.req = conn->llcp_cu.ack = 0;
    25be:	f8a4 70e4 	strh.w	r7, [r4, #228]	; 0xe4
	conn->llcp_feature.req = conn->llcp_feature.ack = 0;
    25c2:	f8a4 70f8 	strh.w	r7, [r4, #248]	; 0xf8
	conn->llcp_version.req = conn->llcp_version.ack = 0;
    25c6:	f8a4 7110 	strh.w	r7, [r4, #272]	; 0x110
	conn->llcp_terminate.reason_peer = 0U;
    25ca:	f884 711b 	strb.w	r7, [r4, #283]	; 0x11b
	conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
    25ce:	f8a4 713c 	strh.w	r7, [r4, #316]	; 0x13c
	conn->llcp_conn_param.req = 0U;
    25d2:	f8a4 715c 	strh.w	r7, [r4, #348]	; 0x15c
	conn->llcp_length.req = conn->llcp_length.ack = 0U;
    25d6:	f8a4 7184 	strh.w	r7, [r4, #388]	; 0x184
	conn->llcp_length.cache.tx_octets = 0U;
    25da:	f8a4 7190 	strh.w	r7, [r4, #400]	; 0x190
	conn->default_tx_octets = ull_conn_default_tx_octets_get();
    25de:	f00b faa9 	bl	db34 <ull_conn_default_tx_octets_get>
    25e2:	f8a4 00b6 	strh.w	r0, [r4, #182]	; 0xb6
	conn->default_tx_time = ull_conn_default_tx_time_get();
    25e6:	f00b faab 	bl	db40 <ull_conn_default_tx_time_get>
	conn->llcp_phy.req = conn->llcp_phy.ack = 0U;
    25ea:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
    25ee:	4b5d      	ldr	r3, [pc, #372]	; (2764 <ll_create_connection+0x404>)
	conn->default_tx_time = ull_conn_default_tx_time_get();
    25f0:	f8a4 00b8 	strh.w	r0, [r4, #184]	; 0xb8
	conn->llcp_phy.req = conn->llcp_phy.ack = 0U;
    25f4:	4013      	ands	r3, r2
    25f6:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
	conn->phy_pref_tx = ull_conn_default_phy_tx_get();
    25fa:	f00b faa7 	bl	db4c <ull_conn_default_phy_tx_get>
    25fe:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
    2602:	f360 0302 	bfi	r3, r0, #0, #3
    2606:	f884 3198 	strb.w	r3, [r4, #408]	; 0x198
	conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    260a:	f00b faa5 	bl	db58 <ull_conn_default_phy_rx_get>
    260e:	f894 2198 	ldrb.w	r2, [r4, #408]	; 0x198
						      conn_lll->phy_flags);
    2612:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
	conn->tx_data = conn->tx_data_last = 0;
    2616:	f8c4 71ac 	str.w	r7, [r4, #428]	; 0x1ac
	conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    261a:	f360 02c5 	bfi	r2, r0, #3, #3
	ready_delay_us = lll_radio_tx_ready_delay_get(conn_lll->phy_tx,
    261e:	f3c3 01c0 	ubfx	r1, r3, #3, #1
	conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    2622:	f884 2198 	strb.w	r2, [r4, #408]	; 0x198
	ready_delay_us = lll_radio_tx_ready_delay_get(conn_lll->phy_tx,
    2626:	f003 0007 	and.w	r0, r3, #7
	conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    262a:	e9c4 7769 	strd	r7, r7, [r4, #420]	; 0x1a4
    262e:	e9c4 7767 	strd	r7, r7, [r4, #412]	; 0x19c
	ready_delay_us = lll_radio_tx_ready_delay_get(conn_lll->phy_tx,
    2632:	f00f f949 	bl	118c8 <lll_radio_tx_ready_delay_get>
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2636:	4a4c      	ldr	r2, [pc, #304]	; (2768 <ll_create_connection+0x408>)
	conn->evt.ticks_active_to_start = 0U;
    2638:	6067      	str	r7, [r4, #4]
	conn->evt.ticks_xtal_to_start =
    263a:	2331      	movs	r3, #49	; 0x31
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    263c:	f200 4052 	addw	r0, r0, #1106	; 0x452
    2640:	fba0 0102 	umull	r0, r1, r0, r2
	conn->evt.ticks_xtal_to_start =
    2644:	6023      	str	r3, [r4, #0]
	conn->evt.ticks_preempt_to_start =
    2646:	60a7      	str	r7, [r4, #8]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2648:	a33d      	add	r3, pc, #244	; (adr r3, 2740 <ll_create_connection+0x3e0>)
    264a:	e9d3 2300 	ldrd	r2, r3, [r3]
    264e:	f7fd fd57 	bl	100 <__aeabi_uldivmod>
    2652:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn->evt.ticks_slot =
    2656:	60e0      	str	r0, [r4, #12]
	lll->conn = conn_lll;
    2658:	f8c5 8020 	str.w	r8, [r5, #32]
    265c:	e9c4 7705 	strd	r7, r7, [r4, #20]
    2660:	61e4      	str	r4, [r4, #28]

#if defined(CONFIG_BT_CTLR_JIT_SCHEDULING)
	hdr->score = 0U;
	hdr->latency = 0U;
#endif /* CONFIG_BT_CTLR_JIT_SCHEDULING */
}
    2662:	e696      	b.n	2392 <ll_create_connection+0x32>
		ull_filter_rpa_update(false);
    2664:	2000      	movs	r0, #0
    2666:	f00e f8ef 	bl	10848 <ull_filter_rpa_update>
		lll->rpa_gen = 1;
    266a:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    266e:	f043 0301 	orr.w	r3, r3, #1
		own_addr_type &= 0x1;
    2672:	f009 0901 	and.w	r9, r9, #1
		lll->rpa_gen = 1;
    2676:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
    267a:	e69c      	b.n	23b6 <ll_create_connection+0x56>
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static inline void conn_release(struct ll_scan_set *scan)
{
	struct lll_conn *lll = scan->lll.conn;
    267c:	6a2c      	ldr	r4, [r5, #32]
	struct node_rx_pdu *cc;
	struct ll_conn *conn;
	memq_link_t *link;

	LL_ASSERT(!lll->link_tx_free);
    267e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2680:	b163      	cbz	r3, 269c <ll_create_connection+0x33c>
    2682:	4a3a      	ldr	r2, [pc, #232]	; (276c <ll_create_connection+0x40c>)
    2684:	493a      	ldr	r1, [pc, #232]	; (2770 <ll_create_connection+0x410>)
    2686:	483b      	ldr	r0, [pc, #236]	; (2774 <ll_create_connection+0x414>)
    2688:	f44f 7369 	mov.w	r3, #932	; 0x3a4
    268c:	f013 fb58 	bl	15d40 <printk>
    2690:	4040      	eors	r0, r0
    2692:	f380 8811 	msr	BASEPRI, r0
    2696:	f04f 0003 	mov.w	r0, #3
    269a:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
    269c:	f104 0130 	add.w	r1, r4, #48	; 0x30
    26a0:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    26a4:	f005 ff9e 	bl	85e4 <memq_deinit>
	LL_ASSERT(link);
    26a8:	4606      	mov	r6, r0
    26aa:	2800      	cmp	r0, #0
    26ac:	d03a      	beq.n	2724 <ll_create_connection+0x3c4>
	lll->link_tx_free = link;

	conn = (void *)HDR_LLL2EVT(lll);
    26ae:	6827      	ldr	r7, [r4, #0]
	lll->link_tx_free = link;
    26b0:	63e6      	str	r6, [r4, #60]	; 0x3c

	cc = (void *)&conn->llcp_terminate.node_rx;
	link = cc->hdr.link;
    26b2:	f8d7 411c 	ldr.w	r4, [r7, #284]	; 0x11c
	LL_ASSERT(link);
    26b6:	b33c      	cbz	r4, 2708 <ll_create_connection+0x3a8>

	ll_rx_link_release(link);
    26b8:	4620      	mov	r0, r4
    26ba:	f009 ffc9 	bl	c650 <ll_rx_link_release>

	ll_conn_release(conn);
    26be:	4638      	mov	r0, r7
    26c0:	f00a ff42 	bl	d548 <ll_conn_release>
	scan->lll.conn = NULL;
    26c4:	2300      	movs	r3, #0
		return BT_HCI_ERR_HW_FAILURE;
    26c6:	2003      	movs	r0, #3
	scan->lll.conn = NULL;
    26c8:	622b      	str	r3, [r5, #32]
}
    26ca:	b009      	add	sp, #36	; 0x24
    26cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    26d0:	200c      	movs	r0, #12
}
    26d2:	b009      	add	sp, #36	; 0x24
    26d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	LL_ASSERT(!err);
    26d8:	4a24      	ldr	r2, [pc, #144]	; (276c <ll_create_connection+0x40c>)
    26da:	4927      	ldr	r1, [pc, #156]	; (2778 <ll_create_connection+0x418>)
    26dc:	4825      	ldr	r0, [pc, #148]	; (2774 <ll_create_connection+0x414>)
    26de:	23a1      	movs	r3, #161	; 0xa1
    26e0:	f013 fb2e 	bl	15d40 <printk>
    26e4:	4040      	eors	r0, r0
    26e6:	f380 8811 	msr	BASEPRI, r0
    26ea:	f04f 0003 	mov.w	r0, #3
    26ee:	df02      	svc	2
    26f0:	e6ab      	b.n	244a <ll_create_connection+0xea>
		conn_lll->link_tx_free = &conn_lll->link_tx;
    26f2:	f104 0050 	add.w	r0, r4, #80	; 0x50
    26f6:	65a0      	str	r0, [r4, #88]	; 0x58
    26f8:	e6b7      	b.n	246a <ll_create_connection+0x10a>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    26fa:	2007      	movs	r0, #7
    26fc:	e669      	b.n	23d2 <ll_create_connection+0x72>
		ll_rx_link_release(link);
    26fe:	9804      	ldr	r0, [sp, #16]
    2700:	f009 ffa6 	bl	c650 <ll_rx_link_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    2704:	2007      	movs	r0, #7
    2706:	e664      	b.n	23d2 <ll_create_connection+0x72>
	LL_ASSERT(link);
    2708:	4a18      	ldr	r2, [pc, #96]	; (276c <ll_create_connection+0x40c>)
    270a:	491c      	ldr	r1, [pc, #112]	; (277c <ll_create_connection+0x41c>)
    270c:	4819      	ldr	r0, [pc, #100]	; (2774 <ll_create_connection+0x414>)
    270e:	f240 33ad 	movw	r3, #941	; 0x3ad
    2712:	f013 fb15 	bl	15d40 <printk>
    2716:	4040      	eors	r0, r0
    2718:	f380 8811 	msr	BASEPRI, r0
    271c:	f04f 0003 	mov.w	r0, #3
    2720:	df02      	svc	2
    2722:	e7c9      	b.n	26b8 <ll_create_connection+0x358>
	LL_ASSERT(link);
    2724:	4a11      	ldr	r2, [pc, #68]	; (276c <ll_create_connection+0x40c>)
    2726:	4915      	ldr	r1, [pc, #84]	; (277c <ll_create_connection+0x41c>)
    2728:	4812      	ldr	r0, [pc, #72]	; (2774 <ll_create_connection+0x414>)
    272a:	f240 33a6 	movw	r3, #934	; 0x3a6
    272e:	f013 fb07 	bl	15d40 <printk>
    2732:	4040      	eors	r0, r0
    2734:	f380 8811 	msr	BASEPRI, r0
    2738:	f04f 0003 	mov.w	r0, #3
    273c:	df02      	svc	2
    273e:	e7b6      	b.n	26ae <ll_create_connection+0x34e>
    2740:	1afd498d 	.word	0x1afd498d
    2744:	00000007 	.word	0x00000007
    2748:	f8800000 	.word	0xf8800000
    274c:	01110148 	.word	0x01110148
    2750:	0148001b 	.word	0x0148001b
    2754:	aaaaaaab 	.word	0xaaaaaaab
    2758:	01c9c37f 	.word	0x01c9c37f
    275c:	026259ff 	.word	0x026259ff
    2760:	000141ff 	.word	0x000141ff
    2764:	f6ff0000 	.word	0xf6ff0000
    2768:	3b9aca00 	.word	0x3b9aca00
    276c:	00019ebc 	.word	0x00019ebc
    2770:	00019f00 	.word	0x00019f00
    2774:	000199cc 	.word	0x000199cc
    2778:	00019b30 	.word	0x00019b30
    277c:	00019d44 	.word	0x00019d44

00002780 <ull_master_setup>:
{
    2780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	peer_addr_type = pdu_tx->rx_addr;
    2784:	f891 c01c 	ldrb.w	ip, [r1, #28]
{
    2788:	4614      	mov	r4, r2
	((struct lll_scan *)ftr->param)->conn = NULL;
    278a:	6812      	ldr	r2, [r2, #0]
{
    278c:	b091      	sub	sp, #68	; 0x44
    278e:	460d      	mov	r5, r1
	((struct lll_scan *)ftr->param)->conn = NULL;
    2790:	f04f 0a00 	mov.w	sl, #0
{
    2794:	461e      	mov	r6, r3
	((struct lll_scan *)ftr->param)->conn = NULL;
    2796:	f8c2 a004 	str.w	sl, [r2, #4]
	peer_addr_type = pdu_tx->rx_addr;
    279a:	f3cc 13c0 	ubfx	r3, ip, #7, #1
	scan = ((struct lll_scan *)ftr->param)->hdr.parent;
    279e:	6817      	ldr	r7, [r2, #0]
	peer_addr_type = pdu_tx->rx_addr;
    27a0:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	memcpy(peer_addr, &pdu_tx->connect_ind.adv_addr[0], BDADDR_SIZE);
    27a4:	3124      	adds	r1, #36	; 0x24
    27a6:	2206      	movs	r2, #6
{
    27a8:	4681      	mov	r9, r0
	memcpy(peer_addr, &pdu_tx->connect_ind.adv_addr[0], BDADDR_SIZE);
    27aa:	a80e      	add	r0, sp, #56	; 0x38
	conn = lll->hdr.parent;
    27ac:	f8d6 8000 	ldr.w	r8, [r6]
	memcpy(peer_addr, &pdu_tx->connect_ind.adv_addr[0], BDADDR_SIZE);
    27b0:	f014 f97e 	bl	16ab0 <memcpy>
	chan_sel = pdu_tx->chan_sel;
    27b4:	7f2b      	ldrb	r3, [r5, #28]
	cc->status = 0U;
    27b6:	f8a5 a01c 	strh.w	sl, [r5, #28]
	if (ftr->lrpa_used) {
    27ba:	7c61      	ldrb	r1, [r4, #17]
	uint8_t rl_idx = ftr->rl_idx;
    27bc:	f894 a012 	ldrb.w	sl, [r4, #18]
	chan_sel = pdu_tx->chan_sel;
    27c0:	f3c3 1240 	ubfx	r2, r3, #5, #1
	if (ftr->lrpa_used) {
    27c4:	f011 0101 	ands.w	r1, r1, #1
	chan_sel = pdu_tx->chan_sel;
    27c8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
    27cc:	920b      	str	r2, [sp, #44]	; 0x2c
	if (ftr->lrpa_used) {
    27ce:	f105 002b 	add.w	r0, r5, #43	; 0x2b
		memcpy(&cc->local_rpa[0], &pdu_tx->connect_ind.init_addr[0],
    27d2:	f04f 0206 	mov.w	r2, #6
	if (ftr->lrpa_used) {
    27d6:	f000 80d1 	beq.w	297c <ull_master_setup+0x1fc>
		memcpy(&cc->local_rpa[0], &pdu_tx->connect_ind.init_addr[0],
    27da:	f105 011e 	add.w	r1, r5, #30
    27de:	f014 f967 	bl	16ab0 <memcpy>
	if (rl_idx != FILTER_IDX_NONE) {
    27e2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    27e6:	f105 0325 	add.w	r3, r5, #37	; 0x25
    27ea:	f105 0b1f 	add.w	fp, r5, #31
    27ee:	f000 80cf 	beq.w	2990 <ull_master_setup+0x210>
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
    27f2:	465a      	mov	r2, fp
    27f4:	4650      	mov	r0, sl
    27f6:	f105 011e 	add.w	r1, r5, #30
    27fa:	930d      	str	r3, [sp, #52]	; 0x34
    27fc:	f00d ff3e 	bl	1067c <ll_rl_id_addr_get>
		cc->peer_addr_type += 2;
    2800:	7faa      	ldrb	r2, [r5, #30]
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    2802:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		cc->peer_addr_type += 2;
    2804:	3202      	adds	r2, #2
    2806:	77aa      	strb	r2, [r5, #30]
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    2808:	a90e      	add	r1, sp, #56	; 0x38
    280a:	4618      	mov	r0, r3
    280c:	2206      	movs	r2, #6
    280e:	f014 f94f 	bl	16ab0 <memcpy>
	cc->interval = lll->interval;
    2812:	89f3      	ldrh	r3, [r6, #14]
	cc->latency = lll->latency;
    2814:	8a32      	ldrh	r2, [r6, #16]
	cc->interval = lll->interval;
    2816:	866b      	strh	r3, [r5, #50]	; 0x32
	cc->timeout = scan->lll.conn_timeout;
    2818:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
    281a:	86eb      	strh	r3, [r5, #54]	; 0x36
	cc->latency = lll->latency;
    281c:	86aa      	strh	r2, [r5, #52]	; 0x34
	cc->sca = lll_clock_sca_local_get();
    281e:	f00f f9f7 	bl	11c10 <lll_clock_sca_local_get>
    2822:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
	lll->handle = ll_conn_handle_get(conn);
    2826:	4640      	mov	r0, r8
    2828:	f00a fe94 	bl	d554 <ll_conn_handle_get>
    282c:	4603      	mov	r3, r0
    282e:	81b0      	strh	r0, [r6, #12]
		ll_rx_put(link, rx);
    2830:	4629      	mov	r1, r5
	rx->handle = lll->handle;
    2832:	80eb      	strh	r3, [r5, #6]
		ll_rx_put(link, rx);
    2834:	4648      	mov	r0, r9
		rx_csa = (void *)ftr->extra;
    2836:	6865      	ldr	r5, [r4, #4]
		ll_rx_put(link, rx);
    2838:	f009 ff10 	bl	c65c <ll_rx_put>
		rx->handle = lll->handle;
    283c:	89b3      	ldrh	r3, [r6, #12]
    283e:	80eb      	strh	r3, [r5, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    2840:	2319      	movs	r3, #25
    2842:	712b      	strb	r3, [r5, #4]
		if (chan_sel) {
    2844:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		link = rx->link;
    2846:	f8d5 9000 	ldr.w	r9, [r5]
		if (chan_sel) {
    284a:	2b00      	cmp	r3, #0
    284c:	f040 80ae 	bne.w	29ac <ull_master_setup+0x22c>
			cs->csa = 0x00;
    2850:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    2854:	772b      	strb	r3, [r5, #28]
	ll_rx_put(link, rx);
    2856:	4629      	mov	r1, r5
    2858:	4648      	mov	r0, r9
    285a:	f009 feff 	bl	c65c <ll_rx_put>
	ll_rx_sched();
    285e:	f009 ff07 	bl	c670 <ll_rx_sched>
	ticks_slot_offset = MAX(conn->evt.ticks_active_to_start,
    2862:	e9d8 5200 	ldrd	r5, r2, [r8]
						      lll->phy_flags);
    2866:	f896 002a 	ldrb.w	r0, [r6, #42]	; 0x2a
	conn_offset_us = ftr->radio_end_us;
    286a:	68e3      	ldr	r3, [r4, #12]
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    286c:	89f6      	ldrh	r6, [r6, #14]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    286e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 29e8 <ull_master_setup+0x268>
	ticks_slot_offset = MAX(conn->evt.ticks_active_to_start,
    2872:	4295      	cmp	r5, r2
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    2874:	f240 4ce2 	movw	ip, #1250	; 0x4e2
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
    2878:	f3c0 01c0 	ubfx	r1, r0, #3, #1
    287c:	f000 0007 	and.w	r0, r0, #7
	ticks_slot_offset = MAX(conn->evt.ticks_active_to_start,
    2880:	bf38      	it	cc
    2882:	4615      	movcc	r5, r2
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    2884:	fb0c f606 	mul.w	r6, ip, r6
	conn_offset_us -= EVENT_OVERHEAD_START_US;
    2888:	f5a3 7a86 	sub.w	sl, r3, #268	; 0x10c
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
    288c:	f00f f81c 	bl	118c8 <lll_radio_tx_ready_delay_get>
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    2890:	2200      	movs	r2, #0
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
    2892:	4603      	mov	r3, r0
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    2894:	2102      	movs	r1, #2
    2896:	2001      	movs	r0, #1
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
    2898:	ebaa 0a03 	sub.w	sl, sl, r3
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    289c:	f005 feec 	bl	8678 <mayfly_enable>
	ticker_id_scan = TICKER_ID_SCAN_BASE + ull_scan_handle_get(scan);
    28a0:	4638      	mov	r0, r7
    28a2:	f00a fa69 	bl	cd78 <ull_scan_handle_get>
    28a6:	1c82      	adds	r2, r0, #2
    28a8:	b2d2      	uxtb	r2, r2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    28aa:	4b49      	ldr	r3, [pc, #292]	; (29d0 <ull_master_setup+0x250>)
				    (void *)(uint32_t)ticker_id_scan);
    28ac:	9200      	str	r2, [sp, #0]
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    28ae:	2101      	movs	r1, #1
    28b0:	2000      	movs	r0, #0
    28b2:	f007 fabf 	bl	9e34 <ticker_stop>
	ticks_slot_offset = MAX(conn->evt.ticks_active_to_start,
    28b6:	46ab      	mov	fp, r5
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    28b8:	2201      	movs	r2, #1
    28ba:	2500      	movs	r5, #0
    28bc:	4611      	mov	r1, r2
    28be:	462b      	mov	r3, r5
    28c0:	9500      	str	r5, [sp, #0]
    28c2:	4628      	mov	r0, r5
    28c4:	f007 fab6 	bl	9e34 <ticker_stop>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    28c8:	4640      	mov	r0, r8
    28ca:	f00a fe43 	bl	d554 <ll_conn_handle_get>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    28ce:	f240 333e 	movw	r3, #830	; 0x33e
    28d2:	f8d4 c008 	ldr.w	ip, [r4, #8]
    28d6:	4a3f      	ldr	r2, [pc, #252]	; (29d4 <ull_master_setup+0x254>)
    28d8:	9308      	str	r3, [sp, #32]
    28da:	4b3f      	ldr	r3, [pc, #252]	; (29d8 <ull_master_setup+0x258>)
    28dc:	9207      	str	r2, [sp, #28]
    28de:	f8cd 8018 	str.w	r8, [sp, #24]
    28e2:	9305      	str	r3, [sp, #20]
    28e4:	f8d8 300c 	ldr.w	r3, [r8, #12]
    28e8:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    28ea:	fba6 6709 	umull	r6, r7, r6, r9
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    28ee:	1cc4      	adds	r4, r0, #3
				     HAL_TICKER_REMAINDER(conn_interval_us),
    28f0:	a335      	add	r3, pc, #212	; (adr r3, 29c8 <ull_master_setup+0x248>)
    28f2:	e9d3 2300 	ldrd	r2, r3, [r3]
    28f6:	4630      	mov	r0, r6
    28f8:	4639      	mov	r1, r7
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    28fa:	ebac 0b0b 	sub.w	fp, ip, fp
    28fe:	9503      	str	r5, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2900:	f7fd fbfe 	bl	100 <__aeabi_uldivmod>
    2904:	4610      	mov	r0, r2
    2906:	4619      	mov	r1, r3
    2908:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    290c:	2300      	movs	r3, #0
    290e:	f7fd fbf7 	bl	100 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    2912:	a32d      	add	r3, pc, #180	; (adr r3, 29c8 <ull_master_setup+0x248>)
    2914:	e9d3 2300 	ldrd	r2, r3, [r3]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2918:	4684      	mov	ip, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    291a:	4639      	mov	r1, r7
    291c:	4630      	mov	r0, r6
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    291e:	f8cd c008 	str.w	ip, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    2922:	f7fd fbed 	bl	100 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    2926:	a328      	add	r3, pc, #160	; (adr r3, 29c8 <ull_master_setup+0x248>)
    2928:	e9d3 2300 	ldrd	r2, r3, [r3]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    292c:	4606      	mov	r6, r0
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    292e:	fbaa 0109 	umull	r0, r1, sl, r9
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    2932:	9601      	str	r6, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    2934:	f7fd fbe4 	bl	100 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2938:	b2e4      	uxtb	r4, r4
    293a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    293e:	465b      	mov	r3, fp
    2940:	9000      	str	r0, [sp, #0]
    2942:	4622      	mov	r2, r4
    2944:	4628      	mov	r0, r5
    2946:	2101      	movs	r1, #1
    2948:	f007 f9ec 	bl	9d24 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    294c:	f030 0302 	bics.w	r3, r0, #2
    2950:	d00c      	beq.n	296c <ull_master_setup+0x1ec>
    2952:	4a22      	ldr	r2, [pc, #136]	; (29dc <ull_master_setup+0x25c>)
    2954:	4922      	ldr	r1, [pc, #136]	; (29e0 <ull_master_setup+0x260>)
    2956:	4823      	ldr	r0, [pc, #140]	; (29e4 <ull_master_setup+0x264>)
    2958:	f240 333f 	movw	r3, #831	; 0x33f
    295c:	f013 f9f0 	bl	15d40 <printk>
    2960:	4040      	eors	r0, r0
    2962:	f380 8811 	msr	BASEPRI, r0
    2966:	f04f 0003 	mov.w	r0, #3
    296a:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    296c:	2201      	movs	r2, #1
    296e:	4610      	mov	r0, r2
    2970:	2102      	movs	r1, #2
    2972:	f005 fe81 	bl	8678 <mayfly_enable>
}
    2976:	b011      	add	sp, #68	; 0x44
    2978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memset(&cc->local_rpa[0], 0x0, BDADDR_SIZE);
    297c:	f014 f8c3 	bl	16b06 <memset>
	if (rl_idx != FILTER_IDX_NONE) {
    2980:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    2984:	f105 0325 	add.w	r3, r5, #37	; 0x25
    2988:	f105 0b1f 	add.w	fp, r5, #31
    298c:	f47f af31 	bne.w	27f2 <ull_master_setup+0x72>
		memset(&cc->peer_rpa[0], 0x0, BDADDR_SIZE);
    2990:	4618      	mov	r0, r3
    2992:	2206      	movs	r2, #6
    2994:	2100      	movs	r1, #0
    2996:	f014 f8b6 	bl	16b06 <memset>
		cc->peer_addr_type = peer_addr_type;
    299a:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    299e:	77ab      	strb	r3, [r5, #30]
		memcpy(cc->peer_addr, &peer_addr[0], BDADDR_SIZE);
    29a0:	a90e      	add	r1, sp, #56	; 0x38
    29a2:	4658      	mov	r0, fp
    29a4:	2206      	movs	r2, #6
    29a6:	f014 f883 	bl	16ab0 <memcpy>
    29aa:	e732      	b.n	2812 <ull_master_setup+0x92>
			lll->data_chan_sel = 1;
    29ac:	7f73      	ldrb	r3, [r6, #29]
    29ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    29b2:	7773      	strb	r3, [r6, #29]
			lll->data_chan_id = lll_chan_id(lll->access_addr);
    29b4:	1d30      	adds	r0, r6, #4
    29b6:	f00d fccf 	bl	10358 <lll_chan_id>
			cs->csa = 0x01;
    29ba:	2301      	movs	r3, #1
			lll->data_chan_id = lll_chan_id(lll->access_addr);
    29bc:	83f0      	strh	r0, [r6, #30]
			cs->csa = 0x01;
    29be:	772b      	strb	r3, [r5, #28]
    29c0:	e749      	b.n	2856 <ull_master_setup+0xd6>
    29c2:	bf00      	nop
    29c4:	f3af 8000 	nop.w
    29c8:	1afd498d 	.word	0x1afd498d
    29cc:	00000007 	.word	0x00000007
    29d0:	0000fbe9 	.word	0x0000fbe9
    29d4:	0000fbed 	.word	0x0000fbed
    29d8:	0000fc1d 	.word	0x0000fc1d
    29dc:	00019ebc 	.word	0x00019ebc
    29e0:	00019e0c 	.word	0x00019e0c
    29e4:	000199cc 	.word	0x000199cc
    29e8:	3b9aca00 	.word	0x3b9aca00
    29ec:	00000000 	.word	0x00000000

000029f0 <ull_sched_after_mstr_slot_get>:
				  uint32_t *win_offset_us);
static void ticker_op_cb(uint32_t status, void *param);

void ull_sched_after_mstr_slot_get(uint8_t user_id, uint32_t ticks_slot_abs,
				   uint32_t *ticks_anchor, uint32_t *us_offset)
{
    29f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    29f4:	b08f      	sub	sp, #60	; 0x3c
    29f6:	461c      	mov	r4, r3
	uint8_t ticker_id_prev;
	uint8_t ticker_id;

	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US << 3);

	ticker_id = ticker_id_prev = 0xff;
    29f8:	26ff      	movs	r6, #255	; 0xff
{
    29fa:	9309      	str	r3, [sp, #36]	; 0x24
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US << 3);
    29fc:	3104      	adds	r1, #4
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0U;
    29fe:	2300      	movs	r3, #0
    2a00:	f8df 8108 	ldr.w	r8, [pc, #264]	; 2b0c <ull_sched_after_mstr_slot_get+0x11c>
						 user_id);
			}
		}

		success = (ret_cb == TICKER_STATUS_SUCCESS);
		LL_ASSERT(success);
    2a04:	f8df b108 	ldr.w	fp, [pc, #264]	; 2b10 <ull_sched_after_mstr_slot_get+0x120>
    2a08:	f8df a108 	ldr.w	sl, [pc, #264]	; 2b14 <ull_sched_after_mstr_slot_get+0x124>
    2a0c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 2b18 <ull_sched_after_mstr_slot_get+0x128>
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0U;
    2a10:	6023      	str	r3, [r4, #0]
	ticker_id = ticker_id_prev = 0xff;
    2a12:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
    2a16:	9604      	str	r6, [sp, #16]
	ticks_slot_abs_prev = 0U;
    2a18:	9305      	str	r3, [sp, #20]
{
    2a1a:	4604      	mov	r4, r0
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US << 3);
    2a1c:	9108      	str	r1, [sp, #32]
{
    2a1e:	4615      	mov	r5, r2
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0U;
    2a20:	930c      	str	r3, [sp, #48]	; 0x30
    2a22:	9306      	str	r3, [sp, #24]
    2a24:	af0d      	add	r7, sp, #52	; 0x34
    2a26:	ae0c      	add	r6, sp, #48	; 0x30
		ret_cb = TICKER_STATUS_BUSY;
    2a28:	f04f 0c02 	mov.w	ip, #2
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR, user_id,
    2a2c:	e9cd 8701 	strd	r8, r7, [sp, #4]
    2a30:	9600      	str	r6, [sp, #0]
    2a32:	462b      	mov	r3, r5
    2a34:	f10d 022f 	add.w	r2, sp, #47	; 0x2f
    2a38:	4621      	mov	r1, r4
    2a3a:	2000      	movs	r0, #0
		ret_cb = TICKER_STATUS_BUSY;
    2a3c:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR, user_id,
    2a40:	f007 fa3e 	bl	9ec0 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    2a44:	2802      	cmp	r0, #2
    2a46:	d02d      	beq.n	2aa4 <ull_sched_after_mstr_slot_get+0xb4>
		success = (ret_cb == TICKER_STATUS_SUCCESS);
    2a48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		LL_ASSERT(success);
    2a4a:	2b00      	cmp	r3, #0
    2a4c:	d130      	bne.n	2ab0 <ull_sched_after_mstr_slot_get+0xc0>

		if (ticker_id == 0xff) {
    2a4e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    2a52:	2bff      	cmp	r3, #255	; 0xff
    2a54:	d03c      	beq.n	2ad0 <ull_sched_after_mstr_slot_get+0xe0>
			break;
		}

		if ((ticker_id < TICKER_ID_CONN_BASE) ||
    2a56:	2b03      	cmp	r3, #3
    2a58:	d1e6      	bne.n	2a28 <ull_sched_after_mstr_slot_get+0x38>
		    (ticker_id > TICKER_ID_CONN_LAST)) {
			continue;
		}

		conn = ll_conn_get(ticker_id - TICKER_ID_CONN_BASE);
    2a5a:	2000      	movs	r0, #0
    2a5c:	f00a fd82 	bl	d564 <ll_conn_get>
		if (conn && !conn->lll.role) {
    2a60:	2800      	cmp	r0, #0
    2a62:	d0e1      	beq.n	2a28 <ull_sched_after_mstr_slot_get+0x38>
    2a64:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
    2a68:	2b00      	cmp	r3, #0
    2a6a:	dbdd      	blt.n	2a28 <ull_sched_after_mstr_slot_get+0x38>
			}
#endif

			ticks_slot_abs_curr += conn->evt.ticks_slot;

			if ((ticker_id_prev != 0xff) &&
    2a6c:	9904      	ldr	r1, [sp, #16]
			ticks_slot_abs_curr += conn->evt.ticks_slot;
    2a6e:	68c2      	ldr	r2, [r0, #12]
			uint32_t ticks_to_expire_normal = ticks_to_expire;
    2a70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			if ((ticker_id_prev != 0xff) &&
    2a72:	29ff      	cmp	r1, #255	; 0xff
    2a74:	d00c      	beq.n	2a90 <ull_sched_after_mstr_slot_get+0xa0>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
    2a76:	9906      	ldr	r1, [sp, #24]
    2a78:	9207      	str	r2, [sp, #28]
    2a7a:	4618      	mov	r0, r3
    2a7c:	9304      	str	r3, [sp, #16]
    2a7e:	f007 fa7f 	bl	9f80 <ticker_ticks_diff_get>
						   ticks_to_expire_prev) >
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
    2a82:	9b05      	ldr	r3, [sp, #20]
    2a84:	9a08      	ldr	r2, [sp, #32]
    2a86:	1899      	adds	r1, r3, r2
			if ((ticker_id_prev != 0xff) &&
    2a88:	4288      	cmp	r0, r1
    2a8a:	9b04      	ldr	r3, [sp, #16]
    2a8c:	9a07      	ldr	r2, [sp, #28]
    2a8e:	d822      	bhi.n	2ad6 <ull_sched_after_mstr_slot_get+0xe6>
				break;
			}

			ticker_id_prev = ticker_id;
			ticks_to_expire_prev = ticks_to_expire_normal;
    2a90:	e9cd 2305 	strd	r2, r3, [sp, #20]
			ticker_id_prev = ticker_id;
    2a94:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    2a98:	9304      	str	r3, [sp, #16]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    2a9a:	e7c5      	b.n	2a28 <ull_sched_after_mstr_slot_get+0x38>
				ticker_job_sched(TICKER_INSTANCE_ID_CTLR,
    2a9c:	4621      	mov	r1, r4
    2a9e:	2000      	movs	r0, #0
    2aa0:	f007 fa54 	bl	9f4c <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    2aa4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2aa6:	2b02      	cmp	r3, #2
    2aa8:	d0f8      	beq.n	2a9c <ull_sched_after_mstr_slot_get+0xac>
		success = (ret_cb == TICKER_STATUS_SUCCESS);
    2aaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		LL_ASSERT(success);
    2aac:	2b00      	cmp	r3, #0
    2aae:	d0ce      	beq.n	2a4e <ull_sched_after_mstr_slot_get+0x5e>
    2ab0:	2352      	movs	r3, #82	; 0x52
    2ab2:	465a      	mov	r2, fp
    2ab4:	4651      	mov	r1, sl
    2ab6:	4648      	mov	r0, r9
    2ab8:	f013 f942 	bl	15d40 <printk>
    2abc:	4040      	eors	r0, r0
    2abe:	f380 8811 	msr	BASEPRI, r0
    2ac2:	f04f 0003 	mov.w	r0, #3
    2ac6:	df02      	svc	2
		if (ticker_id == 0xff) {
    2ac8:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    2acc:	2bff      	cmp	r3, #255	; 0xff
    2ace:	d1c2      	bne.n	2a56 <ull_sched_after_mstr_slot_get+0x66>
		}
	}

	if (ticker_id_prev != 0xff) {
    2ad0:	9b04      	ldr	r3, [sp, #16]
    2ad2:	2bff      	cmp	r3, #255	; 0xff
    2ad4:	d010      	beq.n	2af8 <ull_sched_after_mstr_slot_get+0x108>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    2ad6:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    2ada:	480b      	ldr	r0, [pc, #44]	; (2b08 <ull_sched_after_mstr_slot_get+0x118>)
    2adc:	4413      	add	r3, r2
    2ade:	fba3 0100 	umull	r0, r1, r3, r0
    2ae2:	2207      	movs	r2, #7
    2ae4:	fb02 1103 	mla	r1, r2, r3, r1
    2ae8:	a305      	add	r3, pc, #20	; (adr r3, 2b00 <ull_sched_after_mstr_slot_get+0x110>)
    2aea:	e9d3 2300 	ldrd	r2, r3, [r3]
    2aee:	f7fd fb07 	bl	100 <__aeabi_uldivmod>
    2af2:	9b09      	ldr	r3, [sp, #36]	; 0x24
						    ticks_slot_abs_prev) +
    2af4:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    2af6:	6018      	str	r0, [r3, #0]
						    (EVENT_JITTER_US << 3);
	}
}
    2af8:	b00f      	add	sp, #60	; 0x3c
    2afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2afe:	bf00      	nop
    2b00:	3b9aca00 	.word	0x3b9aca00
    2b04:	00000000 	.word	0x00000000
    2b08:	1afd498d 	.word	0x1afd498d
    2b0c:	0000ff59 	.word	0x0000ff59
    2b10:	00019f38 	.word	0x00019f38
    2b14:	00019f7c 	.word	0x00019f7c
    2b18:	000199cc 	.word	0x000199cc
    2b1c:	00000000 	.word	0x00000000

00002b20 <after_mstr_offset_get>:
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

static void after_mstr_offset_get(uint16_t conn_interval, uint32_t ticks_slot,
				  uint32_t ticks_anchor,
				  uint32_t *win_offset_us)
{
    2b20:	b570      	push	{r4, r5, r6, lr}
    2b22:	461c      	mov	r4, r3
    2b24:	b082      	sub	sp, #8
    2b26:	4615      	mov	r5, r2
    2b28:	4606      	mov	r6, r0
	uint32_t ticks_anchor_offset = ticks_anchor;

	ull_sched_after_mstr_slot_get(TICKER_USER_ID_ULL_LOW, ticks_slot,
    2b2a:	aa01      	add	r2, sp, #4
    2b2c:	2002      	movs	r0, #2
	uint32_t ticks_anchor_offset = ticks_anchor;
    2b2e:	9501      	str	r5, [sp, #4]
	ull_sched_after_mstr_slot_get(TICKER_USER_ID_ULL_LOW, ticks_slot,
    2b30:	f7ff ff5e 	bl	29f0 <ull_sched_after_mstr_slot_get>
				      &ticks_anchor_offset, win_offset_us);

	if (!*win_offset_us) {
    2b34:	6823      	ldr	r3, [r4, #0]
    2b36:	b30b      	cbz	r3, 2b7c <after_mstr_offset_get+0x5c>
		return;
	}

	if ((ticks_anchor_offset - ticks_anchor) & BIT(HAL_TICKER_CNTR_MSBIT)) {
    2b38:	9801      	ldr	r0, [sp, #4]
    2b3a:	1b43      	subs	r3, r0, r5
    2b3c:	021b      	lsls	r3, r3, #8
    2b3e:	d41f      	bmi.n	2b80 <after_mstr_offset_get+0x60>
		*win_offset_us -= HAL_TICKER_TICKS_TO_US(
			ticker_ticks_diff_get(ticks_anchor,
					      ticks_anchor_offset));
	} else {
		*win_offset_us += HAL_TICKER_TICKS_TO_US(
    2b40:	4629      	mov	r1, r5
    2b42:	f007 fa1d 	bl	9f80 <ticker_ticks_diff_get>
    2b46:	4b1a      	ldr	r3, [pc, #104]	; (2bb0 <after_mstr_offset_get+0x90>)
    2b48:	4602      	mov	r2, r0
    2b4a:	fba0 0103 	umull	r0, r1, r0, r3
    2b4e:	2307      	movs	r3, #7
    2b50:	fb03 1102 	mla	r1, r3, r2, r1
    2b54:	a314      	add	r3, pc, #80	; (adr r3, 2ba8 <after_mstr_offset_get+0x88>)
    2b56:	e9d3 2300 	ldrd	r2, r3, [r3]
    2b5a:	f7fd fad1 	bl	100 <__aeabi_uldivmod>
    2b5e:	6822      	ldr	r2, [r4, #0]
    2b60:	4402      	add	r2, r0
    2b62:	6022      	str	r2, [r4, #0]
			ticker_ticks_diff_get(ticks_anchor_offset,
					      ticks_anchor));
	}

	if ((*win_offset_us & BIT(31)) == 0) {
    2b64:	2a00      	cmp	r2, #0
    2b66:	db09      	blt.n	2b7c <after_mstr_offset_get+0x5c>
		uint32_t conn_interval_us = conn_interval * CONN_INT_UNIT_US;
    2b68:	f240 41e2 	movw	r1, #1250	; 0x4e2
    2b6c:	fb01 f006 	mul.w	r0, r1, r6

		while (*win_offset_us > conn_interval_us) {
    2b70:	4290      	cmp	r0, r2
    2b72:	d203      	bcs.n	2b7c <after_mstr_offset_get+0x5c>
			*win_offset_us -= conn_interval_us;
    2b74:	1a12      	subs	r2, r2, r0
		while (*win_offset_us > conn_interval_us) {
    2b76:	4290      	cmp	r0, r2
    2b78:	d3fc      	bcc.n	2b74 <after_mstr_offset_get+0x54>
    2b7a:	6022      	str	r2, [r4, #0]
		}
	}
}
    2b7c:	b002      	add	sp, #8
    2b7e:	bd70      	pop	{r4, r5, r6, pc}
		*win_offset_us -= HAL_TICKER_TICKS_TO_US(
    2b80:	4601      	mov	r1, r0
    2b82:	4628      	mov	r0, r5
    2b84:	f007 f9fc 	bl	9f80 <ticker_ticks_diff_get>
    2b88:	4b09      	ldr	r3, [pc, #36]	; (2bb0 <after_mstr_offset_get+0x90>)
    2b8a:	4602      	mov	r2, r0
    2b8c:	fba0 0103 	umull	r0, r1, r0, r3
    2b90:	2307      	movs	r3, #7
    2b92:	fb03 1102 	mla	r1, r3, r2, r1
    2b96:	a304      	add	r3, pc, #16	; (adr r3, 2ba8 <after_mstr_offset_get+0x88>)
    2b98:	e9d3 2300 	ldrd	r2, r3, [r3]
    2b9c:	f7fd fab0 	bl	100 <__aeabi_uldivmod>
    2ba0:	6822      	ldr	r2, [r4, #0]
    2ba2:	1a12      	subs	r2, r2, r0
    2ba4:	6022      	str	r2, [r4, #0]
    2ba6:	e7dd      	b.n	2b64 <after_mstr_offset_get+0x44>
    2ba8:	3b9aca00 	.word	0x3b9aca00
    2bac:	00000000 	.word	0x00000000
    2bb0:	1afd498d 	.word	0x1afd498d
    2bb4:	00000000 	.word	0x00000000

00002bb8 <ull_sched_mfy_win_offset_select>:
{
    2bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    2bbc:	f8b0 216c 	ldrh.w	r2, [r0, #364]	; 0x16c
{
    2bc0:	b088      	sub	sp, #32
    2bc2:	4605      	mov	r5, r0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    2bc4:	f240 43e2 	movw	r3, #1250	; 0x4e2
    2bc8:	4849      	ldr	r0, [pc, #292]	; (2cf0 <ull_sched_mfy_win_offset_select+0x138>)
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
    2bca:	ae05      	add	r6, sp, #20
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    2bcc:	fb03 f302 	mul.w	r3, r3, r2
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
    2bd0:	2700      	movs	r7, #0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    2bd2:	fba3 0100 	umull	r0, r1, r3, r0
	uint8_t offset_m_max = OFFSET_M_MAX;
    2bd6:	2406      	movs	r4, #6
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    2bd8:	a343      	add	r3, pc, #268	; (adr r3, 2ce8 <ull_sched_mfy_win_offset_select+0x130>)
    2bda:	e9d3 2300 	ldrd	r2, r3, [r3]
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
    2bde:	6077      	str	r7, [r6, #4]
    2be0:	9705      	str	r7, [sp, #20]
    2be2:	60b7      	str	r7, [r6, #8]
	uint8_t offset_m_max = OFFSET_M_MAX;
    2be4:	f88d 400f 	strb.w	r4, [sp, #15]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    2be8:	f7fd fa8a 	bl	100 <__aeabi_uldivmod>
	win_offset_calc(conn, 1, &ticks_to_offset,
    2bec:	f10d 020f 	add.w	r2, sp, #15
    2bf0:	9601      	str	r6, [sp, #4]
    2bf2:	f8b5 3162 	ldrh.w	r3, [r5, #354]	; 0x162
    2bf6:	9200      	str	r2, [sp, #0]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    2bf8:	4604      	mov	r4, r0
	win_offset_calc(conn, 1, &ticks_to_offset,
    2bfa:	2101      	movs	r1, #1
    2bfc:	4628      	mov	r0, r5
    2bfe:	aa04      	add	r2, sp, #16
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    2c00:	9404      	str	r4, [sp, #16]
	win_offset_calc(conn, 1, &ticks_to_offset,
    2c02:	f00d f9ab 	bl	ff5c <win_offset_calc.constprop.0>
		while (offset_index_m < offset_m_max) {
    2c06:	f89d c00f 	ldrb.w	ip, [sp, #15]
    2c0a:	f10c 34ff 	add.w	r4, ip, #4294967295	; 0xffffffff
    2c0e:	b2e4      	uxtb	r4, r4
    2c10:	f10d 0316 	add.w	r3, sp, #22
	uint8_t has_offset_s = 0U;
    2c14:	4639      	mov	r1, r7
    2c16:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    2c1a:	462f      	mov	r7, r5
    2c1c:	f105 0e0c 	add.w	lr, r5, #12
			if (win_offset_s != 0xffff) {
    2c20:	f64f 70ff 	movw	r0, #65535	; 0xffff
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
    2c24:	f897 316d 	ldrb.w	r3, [r7, #365]	; 0x16d
    2c28:	f897 216c 	ldrb.w	r2, [r7, #364]	; 0x16c
    2c2c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    2c30:	fa0f f882 	sxth.w	r8, r2
		while (offset_index_m < offset_m_max) {
    2c34:	f1bc 0f00 	cmp.w	ip, #0
    2c38:	d009      	beq.n	2c4e <ull_sched_mfy_win_offset_select+0x96>
    2c3a:	4633      	mov	r3, r6
			if (win_offset_s != 0xffff) {
    2c3c:	4282      	cmp	r2, r0
    2c3e:	d003      	beq.n	2c48 <ull_sched_mfy_win_offset_select+0x90>
				if (win_offset_s ==
    2c40:	8819      	ldrh	r1, [r3, #0]
    2c42:	4291      	cmp	r1, r2
    2c44:	d01e      	beq.n	2c84 <ull_sched_mfy_win_offset_select+0xcc>
				has_offset_s = 1U;
    2c46:	2101      	movs	r1, #1
    2c48:	3302      	adds	r3, #2
		while (offset_index_m < offset_m_max) {
    2c4a:	429c      	cmp	r4, r3
    2c4c:	d1f6      	bne.n	2c3c <ull_sched_mfy_win_offset_select+0x84>
	while (offset_index_s < OFFSET_S_MAX) {
    2c4e:	3702      	adds	r7, #2
    2c50:	45be      	cmp	lr, r7
    2c52:	d1e7      	bne.n	2c24 <ull_sched_mfy_win_offset_select+0x6c>
	} else if (!has_offset_s) {
    2c54:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    2c58:	bb51      	cbnz	r1, 2cb0 <ull_sched_mfy_win_offset_select+0xf8>
		conn->llcp_cu.win_offset_us = win_offset_m[0] *
    2c5a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    2c5e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    2c62:	fb01 f102 	mul.w	r1, r1, r2
	dst[1] = val >> 8;
    2c66:	0a10      	lsrs	r0, r2, #8
    2c68:	f8c5 10f0 	str.w	r1, [r5, #240]	; 0xf0
	dst[0] = val;
    2c6c:	701a      	strb	r2, [r3, #0]
	dst[1] = val >> 8;
    2c6e:	7058      	strb	r0, [r3, #1]
		conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_RDY;
    2c70:	f895 30e6 	ldrb.w	r3, [r5, #230]	; 0xe6
    2c74:	2204      	movs	r2, #4
    2c76:	f362 0302 	bfi	r3, r2, #0, #3
    2c7a:	f885 30e6 	strb.w	r3, [r5, #230]	; 0xe6
}
    2c7e:	b008      	add	sp, #32
    2c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			     (void *)conn->llcp.conn_upd.pdu_win_offset);
    2c84:	f8d5 10c4 	ldr.w	r1, [r5, #196]	; 0xc4
		conn->llcp_cu.win_offset_us = win_offset_s * CONN_INT_UNIT_US;
    2c88:	f240 43e2 	movw	r3, #1250	; 0x4e2
    2c8c:	fb03 f302 	mul.w	r3, r3, r2
    2c90:	0a12      	lsrs	r2, r2, #8
    2c92:	f8c5 30f0 	str.w	r3, [r5, #240]	; 0xf0
    2c96:	704a      	strb	r2, [r1, #1]
	dst[0] = val;
    2c98:	f881 8000 	strb.w	r8, [r1]
		conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_RDY;
    2c9c:	f895 30e6 	ldrb.w	r3, [r5, #230]	; 0xe6
    2ca0:	2204      	movs	r2, #4
    2ca2:	f362 0302 	bfi	r3, r2, #0, #3
    2ca6:	f885 30e6 	strb.w	r3, [r5, #230]	; 0xe6
}
    2caa:	b008      	add	sp, #32
    2cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu_ctrl_tx->len =
    2cb0:	2203      	movs	r2, #3
    2cb2:	f803 2c04 	strb.w	r2, [r3, #-4]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2cb6:	f813 2c05 	ldrb.w	r2, [r3, #-5]
		conn->llcp_cu.state = LLCP_CUI_STATE_REJECT;
    2cba:	f895 10e6 	ldrb.w	r1, [r5, #230]	; 0xe6
    2cbe:	2005      	movs	r0, #5
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2cc0:	f042 0203 	orr.w	r2, r2, #3
		conn->llcp_cu.state = LLCP_CUI_STATE_REJECT;
    2cc4:	f360 0102 	bfi	r1, r0, #0, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2cc8:	f803 2c05 	strb.w	r2, [r3, #-5]
		pdu_ctrl_tx->llctrl.opcode =
    2ccc:	2411      	movs	r4, #17
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
    2cce:	200f      	movs	r0, #15
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
    2cd0:	2220      	movs	r2, #32
		pdu_ctrl_tx->llctrl.opcode =
    2cd2:	f803 4c02 	strb.w	r4, [r3, #-2]
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
    2cd6:	f803 0c01 	strb.w	r0, [r3, #-1]
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
    2cda:	701a      	strb	r2, [r3, #0]
		conn->llcp_cu.state = LLCP_CUI_STATE_REJECT;
    2cdc:	f885 10e6 	strb.w	r1, [r5, #230]	; 0xe6
}
    2ce0:	b008      	add	sp, #32
    2ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2ce6:	bf00      	nop
    2ce8:	1afd498d 	.word	0x1afd498d
    2cec:	00000007 	.word	0x00000007
    2cf0:	3b9aca00 	.word	0x3b9aca00
    2cf4:	00000000 	.word	0x00000000

00002cf8 <isr_window>:
	 */
	radio_tmr_end_capture();
}

static void isr_window(void *param)
{
    2cf8:	b538      	push	{r3, r4, r5, lr}
    2cfa:	4604      	mov	r4, r0
	uint32_t ticks_at_start;
	uint32_t remainder_us;
	struct lll_scan *lll;

	isr_common_done(param);
    2cfc:	f00f f8d6 	bl	11eac <isr_common_done>

	lll = param;

	/* Next radio channel to scan, round-robin 37, 38, and 39. */
	if (++lll->chan == 3U) {
    2d00:	7da2      	ldrb	r2, [r4, #22]
    2d02:	f3c2 0341 	ubfx	r3, r2, #1, #2
    2d06:	3301      	adds	r3, #1
    2d08:	f003 0303 	and.w	r3, r3, #3
    2d0c:	2b03      	cmp	r3, #3
    2d0e:	d034      	beq.n	2d7a <isr_window+0x82>
    2d10:	f363 0242 	bfi	r2, r3, #1, #2
    2d14:	75a2      	strb	r2, [r4, #22]
    2d16:	f103 0025 	add.w	r0, r3, #37	; 0x25
		lll->chan = 0U;
	}
	lll_chan_set(37 + lll->chan);
    2d1a:	f00e fd93 	bl	11844 <lll_chan_set>

#if defined(CONFIG_BT_CENTRAL)
	bool is_sched_advanced = IS_ENABLED(CONFIG_BT_CTLR_SCHED_ADVANCED) &&
				 lll->conn && lll->conn_win_offset_us;
    2d1e:	6863      	ldr	r3, [r4, #4]
    2d20:	b30b      	cbz	r3, 2d66 <isr_window+0x6e>
    2d22:	6923      	ldr	r3, [r4, #16]
    2d24:	b1fb      	cbz	r3, 2d66 <isr_window+0x6e>
		 * a new central event was last calculated at the start of the
		 * initiator window. This can be either the previous full window
		 * start or remainder resume start of the continuous initiator
		 * after it was preempted.
		 */
		ticks_anchor_prev = radio_tmr_start_get();
    2d26:	f010 fb2b 	bl	13380 <radio_tmr_start_get>
    2d2a:	4605      	mov	r5, r0
	} else {
		ticks_anchor_prev = 0U;
	}
#endif /* CONFIG_BT_CENTRAL */

	ticks_at_start = ticker_ticks_now_get() +
    2d2c:	f007 f926 	bl	9f7c <ticker_ticks_now_get>
			 HAL_TICKER_CNTR_CMP_OFFSET_MIN;
	remainder_us = radio_tmr_start_tick(0, ticks_at_start);
    2d30:	1cc1      	adds	r1, r0, #3
    2d32:	2000      	movs	r0, #0
    2d34:	f010 faea 	bl	1330c <radio_tmr_start_tick>

	/* capture end of Rx-ed PDU, for initiator to calculate first
	 * master event.
	 */
	radio_tmr_end_capture();
    2d38:	f010 fb5c 	bl	133f4 <radio_tmr_end_capture>

		/* Calculation to reduce the conn_win_offset_us, as a new
		 * window is started here and the reference ticks_anchor is
		 * now at the start of this new window.
		 */
		ticks_anchor_new = radio_tmr_start_get();
    2d3c:	f010 fb20 	bl	13380 <radio_tmr_start_get>
		ticks_delta = ticker_ticks_diff_get(ticks_anchor_new,
    2d40:	4629      	mov	r1, r5
    2d42:	f007 f91d 	bl	9f80 <ticker_ticks_diff_get>
						    ticks_anchor_prev);
		ticks_delta_us = HAL_TICKER_TICKS_TO_US(ticks_delta);
    2d46:	4b12      	ldr	r3, [pc, #72]	; (2d90 <isr_window+0x98>)
		ticks_delta = ticker_ticks_diff_get(ticks_anchor_new,
    2d48:	4602      	mov	r2, r0
		ticks_delta_us = HAL_TICKER_TICKS_TO_US(ticks_delta);
    2d4a:	fba0 0103 	umull	r0, r1, r0, r3
    2d4e:	2307      	movs	r3, #7
    2d50:	fb03 1102 	mla	r1, r3, r2, r1
    2d54:	a30c      	add	r3, pc, #48	; (adr r3, 2d88 <isr_window+0x90>)
    2d56:	e9d3 2300 	ldrd	r2, r3, [r3]
    2d5a:	f7fd f9d1 	bl	100 <__aeabi_uldivmod>

		/* Underflow is accepted, as it will be corrected at the time of
		 * connection establishment by incrementing it in connection
		 * interval units until it is in the future.
		 */
		lll->conn_win_offset_us -= ticks_delta_us;
    2d5e:	6923      	ldr	r3, [r4, #16]
    2d60:	1a1b      	subs	r3, r3, r0
    2d62:	6123      	str	r3, [r4, #16]
	}
#endif /* CONFIG_BT_CENTRAL */
}
    2d64:	bd38      	pop	{r3, r4, r5, pc}
	ticks_at_start = ticker_ticks_now_get() +
    2d66:	f007 f909 	bl	9f7c <ticker_ticks_now_get>
	remainder_us = radio_tmr_start_tick(0, ticks_at_start);
    2d6a:	1cc1      	adds	r1, r0, #3
    2d6c:	2000      	movs	r0, #0
    2d6e:	f010 facd 	bl	1330c <radio_tmr_start_tick>
}
    2d72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_tmr_end_capture();
    2d76:	f010 bb3d 	b.w	133f4 <radio_tmr_end_capture>
		lll->chan = 0U;
    2d7a:	f36f 0242 	bfc	r2, #1, #2
    2d7e:	75a2      	strb	r2, [r4, #22]
    2d80:	2025      	movs	r0, #37	; 0x25
    2d82:	e7ca      	b.n	2d1a <isr_window+0x22>
    2d84:	f3af 8000 	nop.w
    2d88:	3b9aca00 	.word	0x3b9aca00
    2d8c:	00000000 	.word	0x00000000
    2d90:	1afd498d 	.word	0x1afd498d
    2d94:	00000000 	.word	0x00000000

00002d98 <isr_rx>:
{
    2d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2d9c:	b085      	sub	sp, #20
    2d9e:	4604      	mov	r4, r0
	trx_done = radio_is_done();
    2da0:	f010 f95e 	bl	13060 <radio_is_done>
	if (trx_done) {
    2da4:	f010 0fff 	tst.w	r0, #255	; 0xff
    2da8:	d10a      	bne.n	2dc0 <isr_rx+0x28>
	lll_isr_status_reset();
    2daa:	f00e fda1 	bl	118f0 <lll_isr_status_reset>
	radio_isr_set(isr_done, lll);
    2dae:	48be      	ldr	r0, [pc, #760]	; (30a8 <isr_rx+0x310>)
    2db0:	4621      	mov	r1, r4
    2db2:	f010 f82b 	bl	12e0c <radio_isr_set>
	radio_disable();
    2db6:	f010 f925 	bl	13004 <radio_disable>
}
    2dba:	b005      	add	sp, #20
    2dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		crc_ok = radio_crc_is_valid();
    2dc0:	f010 f96e 	bl	130a0 <radio_crc_is_valid>
    2dc4:	fa5f f980 	uxtb.w	r9, r0
		devmatch_ok = radio_filter_has_match();
    2dc8:	f010 f9f4 	bl	131b4 <radio_filter_has_match>
    2dcc:	fa5f f880 	uxtb.w	r8, r0
		devmatch_id = radio_filter_match_get();
    2dd0:	f010 f9fa 	bl	131c8 <radio_filter_match_get>
    2dd4:	4607      	mov	r7, r0
		irkmatch_ok = radio_ar_has_match();
    2dd6:	f010 fc03 	bl	135e0 <radio_ar_has_match>
    2dda:	b2c6      	uxtb	r6, r0
		irkmatch_id = radio_ar_match_get();
    2ddc:	f010 fbe4 	bl	135a8 <radio_ar_match_get>
    2de0:	4683      	mov	fp, r0
		rssi_ready = radio_rssi_is_ready();
    2de2:	f010 f9af 	bl	13144 <radio_rssi_is_ready>
    2de6:	4682      	mov	sl, r0
	lll_isr_status_reset();
    2de8:	f00e fd82 	bl	118f0 <lll_isr_status_reset>
	node_rx = ull_pdu_rx_alloc_peek(1);
    2dec:	2001      	movs	r0, #1
    2dee:	f009 fd75 	bl	c8dc <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
    2df2:	4605      	mov	r5, r0
    2df4:	2800      	cmp	r0, #0
    2df6:	d03a      	beq.n	2e6e <isr_rx+0xd6>
	rl_idx = devmatch_ok ?
    2df8:	f1b8 0f00 	cmp.w	r8, #0
    2dfc:	d147      	bne.n	2e8e <isr_rx+0xf6>
    2dfe:	2e00      	cmp	r6, #0
    2e00:	d150      	bne.n	2ea4 <isr_rx+0x10c>
    2e02:	27ff      	movs	r7, #255	; 0xff
	if (crc_ok && isr_rx_scan_check(lll, irkmatch_ok, devmatch_ok,
    2e04:	f1b9 0f00 	cmp.w	r9, #0
    2e08:	d0d1      	beq.n	2dae <isr_rx+0x16>

static inline bool isr_rx_scan_check(struct lll_scan *lll, uint8_t irkmatch_ok,
				     uint8_t devmatch_ok, uint8_t rl_idx)
{
#if defined(CONFIG_BT_CTLR_PRIVACY)
	return (((lll->filter_policy & 0x01) == 0) &&
    2e0a:	7da3      	ldrb	r3, [r4, #22]
		 (!devmatch_ok || ull_filter_lll_rl_idx_allowed(irkmatch_ok,
								rl_idx))) ||
    2e0c:	0718      	lsls	r0, r3, #28
    2e0e:	d553      	bpl.n	2eb8 <isr_rx+0x120>
		(((lll->filter_policy & 0x01) != 0) &&
    2e10:	f1b8 0f00 	cmp.w	r8, #0
    2e14:	f000 80a9 	beq.w	2f6a <isr_rx+0x1d2>
	bool dir_report = false;

	if (0) {
#if defined(CONFIG_BT_CENTRAL)
	/* Initiator */
	} else if (lll->conn && !lll->conn->master.cancelled &&
    2e18:	6863      	ldr	r3, [r4, #4]
		rssi_ready = radio_rssi_is_ready();
    2e1a:	fa5f fa8a 	uxtb.w	sl, sl
	} else if (lll->conn && !lll->conn->master.cancelled &&
    2e1e:	b12b      	cbz	r3, 2e2c <isr_rx+0x94>
    2e20:	6863      	ldr	r3, [r4, #4]
    2e22:	f893 3020 	ldrb.w	r3, [r3, #32]
    2e26:	079a      	lsls	r2, r3, #30
    2e28:	f140 80a6 	bpl.w	2f78 <isr_rx+0x1e0>
    2e2c:	7f28      	ldrb	r0, [r5, #28]

		return 0;
#endif /* CONFIG_BT_CENTRAL */

	/* Active scanner */
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    2e2e:	f010 030f 	ands.w	r3, r0, #15
    2e32:	d14f      	bne.n	2ed4 <isr_rx+0x13c>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    2e34:	7f6b      	ldrb	r3, [r5, #29]
    2e36:	2b25      	cmp	r3, #37	; 0x25
    2e38:	d8b9      	bhi.n	2dae <isr_rx+0x16>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind)) &&
    2e3a:	7da2      	ldrb	r2, [r4, #22]
    2e3c:	0692      	lsls	r2, r2, #26
    2e3e:	d503      	bpl.n	2e48 <isr_rx+0xb0>
		   lll->type &&
#if defined(CONFIG_BT_CENTRAL)
		   !lll->conn) {
    2e40:	6862      	ldr	r2, [r4, #4]
		   lll->type &&
    2e42:	2a00      	cmp	r2, #0
    2e44:	f000 821c 	beq.w	3280 <isr_rx+0x4e8>
		return 0;
	}
	/* Passive scanner or scan responses */
	else if (((((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
		    (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    2e48:	2b25      	cmp	r3, #37	; 0x25
	bool dir_report = false;
    2e4a:	bf98      	it	ls
    2e4c:	f04f 0800 	movls.w	r8, #0
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    2e50:	d867      	bhi.n	2f22 <isr_rx+0x18a>
		   (lll->phy)) ||
#endif /* CONFIG_BT_CTLR_ADV_EXT */
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_scan_rsp)) &&
		   (lll->state != 0U) &&
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    2e52:	2b00      	cmp	r3, #0
    2e54:	d0ab      	beq.n	2dae <isr_rx+0x16>
		 (pdu_adv_rx->len != 0) &&
#if defined(CONFIG_BT_CENTRAL)
		   !lll->conn) {
    2e56:	6863      	ldr	r3, [r4, #4]
		 (pdu_adv_rx->len != 0) &&
    2e58:	2b00      	cmp	r3, #0
    2e5a:	d1a8      	bne.n	2dae <isr_rx+0x16>
		   1) {
#endif /* !CONFIG_BT_CENTRAL */
		uint32_t err;

		/* save the scan response packet */
		err = isr_rx_scan_report(lll, rssi_ready,
    2e5c:	2e00      	cmp	r6, #0
    2e5e:	bf14      	ite	ne
    2e60:	4639      	movne	r1, r7
    2e62:	21ff      	moveq	r1, #255	; 0xff
    2e64:	4642      	mov	r2, r8
    2e66:	4650      	mov	r0, sl
    2e68:	f00f f938 	bl	120dc <isr_rx_scan_report.isra.0>
					 irkmatch_ok ? rl_idx :
						       FILTER_IDX_NONE,
					 dir_report);
		if (err) {
    2e6c:	e79f      	b.n	2dae <isr_rx+0x16>
	LL_ASSERT(node_rx);
    2e6e:	4a8f      	ldr	r2, [pc, #572]	; (30ac <isr_rx+0x314>)
    2e70:	498f      	ldr	r1, [pc, #572]	; (30b0 <isr_rx+0x318>)
    2e72:	4890      	ldr	r0, [pc, #576]	; (30b4 <isr_rx+0x31c>)
    2e74:	f240 13c1 	movw	r3, #449	; 0x1c1
    2e78:	f012 ff62 	bl	15d40 <printk>
    2e7c:	4040      	eors	r0, r0
    2e7e:	f380 8811 	msr	BASEPRI, r0
    2e82:	f04f 0003 	mov.w	r0, #3
    2e86:	df02      	svc	2
	rl_idx = devmatch_ok ?
    2e88:	f1b8 0f00 	cmp.w	r8, #0
    2e8c:	d0b7      	beq.n	2dfe <isr_rx+0x66>
		 ull_filter_lll_rl_idx(!!(lll->filter_policy & 0x01),
    2e8e:	7da0      	ldrb	r0, [r4, #22]
    2e90:	b2f9      	uxtb	r1, r7
    2e92:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    2e96:	f00e f8cb 	bl	11030 <ull_filter_lll_rl_idx>
    2e9a:	4607      	mov	r7, r0
	if (crc_ok && isr_rx_scan_check(lll, irkmatch_ok, devmatch_ok,
    2e9c:	f1b9 0f00 	cmp.w	r9, #0
    2ea0:	d085      	beq.n	2dae <isr_rx+0x16>
    2ea2:	e7b2      	b.n	2e0a <isr_rx+0x72>
		 irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
    2ea4:	fa5f f08b 	uxtb.w	r0, fp
    2ea8:	f00e f92c 	bl	11104 <ull_filter_lll_rl_irk_idx>
    2eac:	4607      	mov	r7, r0
	if (crc_ok && isr_rx_scan_check(lll, irkmatch_ok, devmatch_ok,
    2eae:	f1b9 0f00 	cmp.w	r9, #0
    2eb2:	f43f af7c 	beq.w	2dae <isr_rx+0x16>
    2eb6:	e7a8      	b.n	2e0a <isr_rx+0x72>
	return (((lll->filter_policy & 0x01) == 0) &&
    2eb8:	f1b8 0f00 	cmp.w	r8, #0
    2ebc:	d0ac      	beq.n	2e18 <isr_rx+0x80>
		 (!devmatch_ok || ull_filter_lll_rl_idx_allowed(irkmatch_ok,
    2ebe:	4639      	mov	r1, r7
    2ec0:	4630      	mov	r0, r6
    2ec2:	f00e f9ad 	bl	11220 <ull_filter_lll_rl_idx_allowed>
    2ec6:	2800      	cmp	r0, #0
    2ec8:	d1a6      	bne.n	2e18 <isr_rx+0x80>
		(((lll->filter_policy & 0x01) != 0) &&
    2eca:	7da3      	ldrb	r3, [r4, #22]
								rl_idx))) ||
    2ecc:	0718      	lsls	r0, r3, #28
    2ece:	f57f af6e 	bpl.w	2dae <isr_rx+0x16>
    2ed2:	e7a1      	b.n	2e18 <isr_rx+0x80>
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    2ed4:	2b06      	cmp	r3, #6
    2ed6:	f000 8178 	beq.w	31ca <isr_rx+0x432>
	else if (((((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    2eda:	2b02      	cmp	r3, #2
    2edc:	f000 817a 	beq.w	31d4 <isr_rx+0x43c>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind))) ||
    2ee0:	2b01      	cmp	r3, #1
    2ee2:	d11e      	bne.n	2f22 <isr_rx+0x18a>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    2ee4:	7f6b      	ldrb	r3, [r5, #29]
    2ee6:	2b0c      	cmp	r3, #12
    2ee8:	f47f af61 	bne.w	2dae <isr_rx+0x16>
				       struct pdu_adv *pdu, uint8_t rl_idx,
				       bool *dir_report)
{
#if defined(CONFIG_BT_CTLR_PRIVACY)
	if (ull_filter_lll_rl_addr_resolve(pdu->rx_addr,
					   pdu->direct_ind.tgt_addr, rl_idx)) {
    2eec:	f105 0924 	add.w	r9, r5, #36	; 0x24
	if (ull_filter_lll_rl_addr_resolve(pdu->rx_addr,
    2ef0:	09c0      	lsrs	r0, r0, #7
    2ef2:	4649      	mov	r1, r9
    2ef4:	463a      	mov	r2, r7
    2ef6:	f00e fa01 	bl	112fc <ull_filter_lll_rl_addr_resolve>
    2efa:	4680      	mov	r8, r0
    2efc:	bb88      	cbnz	r0, 2f62 <isr_rx+0x1ca>
		 */
		return false;
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	return (((lll->init_addr_type == pdu->rx_addr) &&
    2efe:	7da3      	ldrb	r3, [r4, #22]
    2f00:	7f28      	ldrb	r0, [r5, #28]
		!memcmp(lll->init_addr, pdu->direct_ind.tgt_addr,
			BDADDR_SIZE))) ||
    2f02:	f3c3 1280 	ubfx	r2, r3, #6, #1
    2f06:	ebb2 1fd0 	cmp.w	r2, r0, lsr #7
    2f0a:	f000 823b 	beq.w	3384 <isr_rx+0x5ec>

static inline bool isr_scan_tgta_rpa_check(struct lll_scan *lll,
					   struct pdu_adv *pdu,
					   bool *dir_report)
{
	if (((lll->filter_policy & 0x02) != 0U) &&
    2f0e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    2f12:	079a      	lsls	r2, r3, #30
    2f14:	d504      	bpl.n	2f20 <isr_rx+0x188>
    2f16:	f995 301c 	ldrsb.w	r3, [r5, #28]
    2f1a:	2b00      	cmp	r3, #0
    2f1c:	f2c0 823b 	blt.w	3396 <isr_rx+0x5fe>
    2f20:	7f28      	ldrb	r0, [r5, #28]
					&dir_report))) ||
    2f22:	f000 000f 	and.w	r0, r0, #15
    2f26:	2804      	cmp	r0, #4
    2f28:	f47f af41 	bne.w	2dae <isr_rx+0x16>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    2f2c:	7f6b      	ldrb	r3, [r5, #29]
    2f2e:	2b25      	cmp	r3, #37	; 0x25
    2f30:	f63f af3d 	bhi.w	2dae <isr_rx+0x16>
		   (lll->state != 0U) &&
    2f34:	7da3      	ldrb	r3, [r4, #22]
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_scan_rsp)) &&
    2f36:	07db      	lsls	r3, r3, #31
    2f38:	f57f af39 	bpl.w	2dae <isr_rx+0x16>
	return false;
}

static inline bool isr_scan_rsp_adva_matches(struct pdu_adv *srsp)
{
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    2f3c:	f010 f8be 	bl	130bc <radio_pkt_scratch_get>

	return ((sreq->rx_addr == srsp->tx_addr) &&
    2f40:	7f2b      	ldrb	r3, [r5, #28]
    2f42:	7802      	ldrb	r2, [r0, #0]
    2f44:	f3c3 1380 	ubfx	r3, r3, #6, #1
    2f48:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    2f4c:	f47f af2f 	bne.w	2dae <isr_rx+0x16>
		(memcmp(&sreq->scan_req.adv_addr[0],
    2f50:	3008      	adds	r0, #8
    2f52:	2206      	movs	r2, #6
    2f54:	f105 011e 	add.w	r1, r5, #30
    2f58:	f013 fd9a 	bl	16a90 <memcmp>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    2f5c:	2800      	cmp	r0, #0
    2f5e:	f47f af26 	bne.w	2dae <isr_rx+0x16>
    2f62:	7f6b      	ldrb	r3, [r5, #29]
	bool dir_report = false;
    2f64:	f04f 0800 	mov.w	r8, #0
    2f68:	e773      	b.n	2e52 <isr_rx+0xba>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(rl_idx)));
    2f6a:	4638      	mov	r0, r7
    2f6c:	f00e f91c 	bl	111a8 <ull_filter_lll_irk_whitelisted>
    2f70:	2800      	cmp	r0, #0
    2f72:	f47f af51 	bne.w	2e18 <isr_rx+0x80>
    2f76:	e71a      	b.n	2dae <isr_rx+0x16>
	return ((((lll->filter_policy & 0x01) != 0U) ||
    2f78:	7da3      	ldrb	r3, [r4, #22]
		 isr_scan_init_adva_check(lll, pdu, rl_idx)) &&
    2f7a:	f3c3 08c0 	ubfx	r8, r3, #3, #1
    2f7e:	071b      	lsls	r3, r3, #28
    2f80:	f140 8159 	bpl.w	3236 <isr_rx+0x49e>
    2f84:	7f28      	ldrb	r0, [r5, #28]
    2f86:	f010 030f 	ands.w	r3, r0, #15
    2f8a:	f040 8125 	bne.w	31d8 <isr_rx+0x440>
		(((pdu->type == PDU_ADV_TYPE_ADV_IND) &&
    2f8e:	7f6b      	ldrb	r3, [r5, #29]
    2f90:	2b25      	cmp	r3, #37	; 0x25
    2f92:	d8c6      	bhi.n	2f22 <isr_rx+0x18a>
			rx = ull_pdu_rx_alloc_peek(4);
    2f94:	2004      	movs	r0, #4
    2f96:	f009 fca1 	bl	c8dc <ull_pdu_rx_alloc_peek>
		if (!rx) {
    2f9a:	2800      	cmp	r0, #0
    2f9c:	f43f af07 	beq.w	2dae <isr_rx+0x16>
		pdu_end_us = radio_tmr_end_get();
    2fa0:	f010 fa30 	bl	13404 <radio_tmr_end_get>
		if (!lll->ticks_window) {
    2fa4:	6a63      	ldr	r3, [r4, #36]	; 0x24
		pdu_end_us = radio_tmr_end_get();
    2fa6:	4680      	mov	r8, r0
		if (!lll->ticks_window) {
    2fa8:	b943      	cbnz	r3, 2fbc <isr_rx+0x224>
			scan_interval_us = lll->interval * SCAN_INT_UNIT_US;
    2faa:	8c22      	ldrh	r2, [r4, #32]
    2fac:	f240 2371 	movw	r3, #625	; 0x271
    2fb0:	fb03 f302 	mul.w	r3, r3, r2
			pdu_end_us %= scan_interval_us;
    2fb4:	fbb0 f2f3 	udiv	r2, r0, r3
    2fb8:	fb03 0812 	mls	r8, r3, r2, r0
		if (pdu_end_us > (HAL_TICKER_TICKS_TO_US(evt->ticks_slot) -
    2fbc:	6823      	ldr	r3, [r4, #0]
    2fbe:	483e      	ldr	r0, [pc, #248]	; (30b8 <isr_rx+0x320>)
    2fc0:	68db      	ldr	r3, [r3, #12]
    2fc2:	2207      	movs	r2, #7
    2fc4:	fba3 0100 	umull	r0, r1, r3, r0
    2fc8:	fb02 1103 	mla	r1, r2, r3, r1
    2fcc:	a334      	add	r3, pc, #208	; (adr r3, 30a0 <isr_rx+0x308>)
    2fce:	e9d3 2300 	ldrd	r2, r3, [r3]
    2fd2:	f7fd f895 	bl	100 <__aeabi_uldivmod>
				  EVENT_IFS_US - 352 - EVENT_OVERHEAD_START_US -
    2fd6:	f2a0 3342 	subw	r3, r0, #834	; 0x342
		if (pdu_end_us > (HAL_TICKER_TICKS_TO_US(evt->ticks_slot) -
    2fda:	4543      	cmp	r3, r8
    2fdc:	f4ff aee7 	bcc.w	2dae <isr_rx+0x16>
		radio_switch_complete_and_disable();
    2fe0:	f010 f88a 	bl	130f8 <radio_switch_complete_and_disable>
		lll_conn = lll->conn;
    2fe4:	f8d4 a004 	ldr.w	sl, [r4, #4]
		pdu_tx = (void *)radio_pkt_scratch_get();
    2fe8:	f010 f868 	bl	130bc <radio_pkt_scratch_get>
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
    2fec:	7f2b      	ldrb	r3, [r5, #28]
		pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    2fee:	7802      	ldrb	r2, [r0, #0]
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
    2ff0:	f3c3 1380 	ubfx	r3, r3, #6, #1
		pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    2ff4:	01db      	lsls	r3, r3, #7
    2ff6:	f002 0250 	and.w	r2, r2, #80	; 0x50
    2ffa:	f043 0325 	orr.w	r3, r3, #37	; 0x25
    2ffe:	4313      	orrs	r3, r2
		pdu_tx->len = sizeof(struct pdu_adv_connect_ind);
    3000:	2222      	movs	r2, #34	; 0x22
		pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    3002:	7003      	strb	r3, [r0, #0]
		pdu_tx = (void *)radio_pkt_scratch_get();
    3004:	4681      	mov	r9, r0
		pdu_tx->len = sizeof(struct pdu_adv_connect_ind);
    3006:	7042      	strb	r2, [r0, #1]
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    3008:	4638      	mov	r0, r7
    300a:	f00d fff3 	bl	10ff4 <ull_filter_lll_lrpa_get>
		if (lll->rpa_gen && lrpa) {
    300e:	7de3      	ldrb	r3, [r4, #23]
    3010:	07db      	lsls	r3, r3, #31
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    3012:	4683      	mov	fp, r0
		if (lll->rpa_gen && lrpa) {
    3014:	f109 0002 	add.w	r0, r9, #2
    3018:	f140 811b 	bpl.w	3252 <isr_rx+0x4ba>
    301c:	f1bb 0f00 	cmp.w	fp, #0
    3020:	f000 8117 	beq.w	3252 <isr_rx+0x4ba>
			pdu_tx->tx_addr = 1;
    3024:	f899 3000 	ldrb.w	r3, [r9]
    3028:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    302c:	f889 3000 	strb.w	r3, [r9]
			memcpy(&pdu_tx->connect_ind.init_addr[0], lrpa->val,
    3030:	2206      	movs	r2, #6
    3032:	4659      	mov	r1, fp
    3034:	f013 fd3c 	bl	16ab0 <memcpy>
		memcpy(&pdu_tx->connect_ind.adv_addr[0],
    3038:	2206      	movs	r2, #6
    303a:	f105 011e 	add.w	r1, r5, #30
    303e:	f109 0008 	add.w	r0, r9, #8
    3042:	f013 fd35 	bl	16ab0 <memcpy>
		memcpy(&pdu_tx->connect_ind.access_addr[0],
    3046:	2204      	movs	r2, #4
    3048:	eb0a 0102 	add.w	r1, sl, r2
    304c:	f109 000e 	add.w	r0, r9, #14
    3050:	f013 fd2e 	bl	16ab0 <memcpy>
		memcpy(&pdu_tx->connect_ind.crc_init[0],
    3054:	2203      	movs	r2, #3
    3056:	f10a 0108 	add.w	r1, sl, #8
    305a:	f109 0012 	add.w	r0, r9, #18
    305e:	f013 fd27 	bl	16ab0 <memcpy>
		pdu_tx->connect_ind.win_size = 1;
    3062:	2301      	movs	r3, #1
    3064:	f889 3015 	strb.w	r3, [r9, #21]
		conn_interval_us = (uint32_t)lll_conn->interval *
    3068:	f8ba 300e 	ldrh.w	r3, [sl, #14]
    306c:	9301      	str	r3, [sp, #4]
		conn_offset_us = radio_tmr_end_get() + 502 +
    306e:	f010 f9c9 	bl	13404 <radio_tmr_end_get>
		    lll->conn_win_offset_us == 0U) {
    3072:	f8d4 8010 	ldr.w	r8, [r4, #16]
		conn_offset_us = radio_tmr_end_get() + 502 +
    3076:	f500 63db 	add.w	r3, r0, #1752	; 0x6d8
		if (!IS_ENABLED(CONFIG_BT_CTLR_SCHED_ADVANCED) ||
    307a:	f1b8 0f00 	cmp.w	r8, #0
    307e:	f000 80f7 	beq.w	3270 <isr_rx+0x4d8>
		conn_interval_us = (uint32_t)lll_conn->interval *
    3082:	9901      	ldr	r1, [sp, #4]
    3084:	f240 42e2 	movw	r2, #1250	; 0x4e2
    3088:	fb02 f201 	mul.w	r2, r2, r1
			while ((conn_space_us & ((uint32_t)1 << 31)) ||
    308c:	f1b8 0f00 	cmp.w	r8, #0
    3090:	db01      	blt.n	3096 <isr_rx+0x2fe>
    3092:	4543      	cmp	r3, r8
    3094:	d912      	bls.n	30bc <isr_rx+0x324>
				conn_space_us += conn_interval_us;
    3096:	4490      	add	r8, r2
    3098:	e7f8      	b.n	308c <isr_rx+0x2f4>
    309a:	bf00      	nop
    309c:	f3af 8000 	nop.w
    30a0:	3b9aca00 	.word	0x3b9aca00
    30a4:	00000000 	.word	0x00000000
    30a8:	00011f3d 	.word	0x00011f3d
    30ac:	0001a25c 	.word	0x0001a25c
    30b0:	0001a2a8 	.word	0x0001a2a8
    30b4:	000199cc 	.word	0x000199cc
    30b8:	1afd498d 	.word	0x1afd498d
				sys_cpu_to_le16((conn_space_us -
    30bc:	49d0      	ldr	r1, [pc, #832]	; (3400 <isr_rx+0x668>)
			pdu_tx->connect_ind.win_size++;
    30be:	f899 2015 	ldrb.w	r2, [r9, #21]
				sys_cpu_to_le16((conn_space_us -
    30c2:	eba8 0303 	sub.w	r3, r8, r3
    30c6:	fba1 1303 	umull	r1, r3, r1, r3
			pdu_tx->connect_ind.win_offset =
    30ca:	f3c3 238f 	ubfx	r3, r3, #10, #16
			pdu_tx->connect_ind.win_size++;
    30ce:	3201      	adds	r2, #1
			pdu_tx->connect_ind.win_offset =
    30d0:	f8a9 3016 	strh.w	r3, [r9, #22]
			pdu_tx->connect_ind.win_size++;
    30d4:	f889 2015 	strb.w	r2, [r9, #21]
		pdu_tx->connect_ind.interval =
    30d8:	f8ba 100e 	ldrh.w	r1, [sl, #14]
		pdu_tx->connect_ind.latency =
    30dc:	f8ba 2010 	ldrh.w	r2, [sl, #16]
		pdu_tx->connect_ind.timeout =
    30e0:	8aa3      	ldrh	r3, [r4, #20]
    30e2:	f8a9 301c 	strh.w	r3, [r9, #28]
		pdu_tx->connect_ind.interval =
    30e6:	f8a9 1018 	strh.w	r1, [r9, #24]
		pdu_tx->connect_ind.latency =
    30ea:	f8a9 201a 	strh.w	r2, [r9, #26]
		memcpy(&pdu_tx->connect_ind.chan_map[0],
    30ee:	f10a 0118 	add.w	r1, sl, #24
    30f2:	2205      	movs	r2, #5
    30f4:	f109 001e 	add.w	r0, r9, #30
    30f8:	f013 fcda 	bl	16ab0 <memcpy>
		pdu_tx->connect_ind.hop = lll_conn->data_chan_hop;
    30fc:	f89a 201e 	ldrb.w	r2, [sl, #30]
    3100:	f899 3023 	ldrb.w	r3, [r9, #35]	; 0x23
    3104:	f362 0304 	bfi	r3, r2, #0, #5
    3108:	f889 3023 	strb.w	r3, [r9, #35]	; 0x23
		pdu_tx->connect_ind.sca = lll_clock_sca_local_get();
    310c:	f00e fd80 	bl	11c10 <lll_clock_sca_local_get>
    3110:	f899 3023 	ldrb.w	r3, [r9, #35]	; 0x23
    3114:	f360 1347 	bfi	r3, r0, #5, #3
    3118:	f889 3023 	strb.w	r3, [r9, #35]	; 0x23
		radio_pkt_tx_set(pdu_tx);
    311c:	4648      	mov	r0, r9
    311e:	f00f ff57 	bl	12fd0 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    3122:	f00f ff93 	bl	1304c <radio_is_ready>
    3126:	2800      	cmp	r0, #0
    3128:	f040 80f6 	bne.w	3318 <isr_rx+0x580>
		radio_isr_set(isr_done_cleanup, lll);
    312c:	4621      	mov	r1, r4
    312e:	48b5      	ldr	r0, [pc, #724]	; (3404 <isr_rx+0x66c>)
    3130:	f00f fe6c 	bl	12e0c <radio_isr_set>
		lll->conn->master.initiated = 1;
    3134:	6862      	ldr	r2, [r4, #4]
    3136:	f892 3020 	ldrb.w	r3, [r2, #32]
    313a:	f043 0301 	orr.w	r3, r3, #1
    313e:	f882 3020 	strb.w	r3, [r2, #32]
		rx = ull_pdu_rx_alloc();
    3142:	f009 fbe9 	bl	c918 <ull_pdu_rx_alloc>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    3146:	2314      	movs	r3, #20
		rx = ull_pdu_rx_alloc();
    3148:	4682      	mov	sl, r0
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    314a:	7103      	strb	r3, [r0, #4]
		rx->hdr.handle = 0xffff;
    314c:	f64f 73ff 	movw	r3, #65535	; 0xffff
		memcpy(rx->pdu, pdu_tx, (offsetof(struct pdu_adv, connect_ind) +
    3150:	2224      	movs	r2, #36	; 0x24
		uint8_t pdu_adv_rx_chan_sel = pdu_adv_rx->chan_sel;
    3152:	7f2d      	ldrb	r5, [r5, #28]
		rx->hdr.handle = 0xffff;
    3154:	80c3      	strh	r3, [r0, #6]
		memcpy(rx->pdu, pdu_tx, (offsetof(struct pdu_adv, connect_ind) +
    3156:	4649      	mov	r1, r9
    3158:	301c      	adds	r0, #28
    315a:	f013 fca9 	bl	16ab0 <memcpy>
		pdu_adv_rx->chan_sel = pdu_adv_rx_chan_sel;
    315e:	f89a 301c 	ldrb.w	r3, [sl, #28]
		ftr->param = lll;
    3162:	f8ca 4008 	str.w	r4, [sl, #8]
		uint8_t pdu_adv_rx_chan_sel = pdu_adv_rx->chan_sel;
    3166:	f3c5 1540 	ubfx	r5, r5, #5, #1
		pdu_adv_rx->chan_sel = pdu_adv_rx_chan_sel;
    316a:	f365 1345 	bfi	r3, r5, #5, #1
    316e:	f88a 301c 	strb.w	r3, [sl, #28]
		ftr->ticks_anchor = radio_tmr_start_get();
    3172:	f010 f905 	bl	13380 <radio_tmr_start_get>
				    radio_tx_chain_delay_get(0, 0);
    3176:	2100      	movs	r1, #0
		ftr->ticks_anchor = radio_tmr_start_get();
    3178:	f8ca 0010 	str.w	r0, [sl, #16]
				    radio_tx_chain_delay_get(0, 0);
    317c:	4608      	mov	r0, r1
    317e:	f00f ff33 	bl	12fe8 <radio_tx_chain_delay_get>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    3182:	2e00      	cmp	r6, #0
    3184:	bf08      	it	eq
    3186:	27ff      	moveq	r7, #255	; 0xff
    3188:	f88a 701a 	strb.w	r7, [sl, #26]
		ftr->lrpa_used = lll->rpa_gen && lrpa;
    318c:	7de2      	ldrb	r2, [r4, #23]
		ftr->radio_end_us = conn_space_us -
    318e:	eba8 0000 	sub.w	r0, r8, r0
		ftr->lrpa_used = lll->rpa_gen && lrpa;
    3192:	f012 0201 	ands.w	r2, r2, #1
		ftr->radio_end_us = conn_space_us -
    3196:	f8ca 0014 	str.w	r0, [sl, #20]
		ftr->lrpa_used = lll->rpa_gen && lrpa;
    319a:	d06f      	beq.n	327c <isr_rx+0x4e4>
    319c:	f1bb 0b00 	subs.w	fp, fp, #0
    31a0:	bf18      	it	ne
    31a2:	f04f 0b01 	movne.w	fp, #1
    31a6:	f89a 3019 	ldrb.w	r3, [sl, #25]
    31aa:	f36b 0300 	bfi	r3, fp, #0, #1
    31ae:	f88a 3019 	strb.w	r3, [sl, #25]
			ftr->extra = ull_pdu_rx_alloc();
    31b2:	f009 fbb1 	bl	c918 <ull_pdu_rx_alloc>
		ull_rx_put(rx->hdr.link, rx);
    31b6:	4651      	mov	r1, sl
			ftr->extra = ull_pdu_rx_alloc();
    31b8:	f8ca 000c 	str.w	r0, [sl, #12]
		ull_rx_put(rx->hdr.link, rx);
    31bc:	f8da 0000 	ldr.w	r0, [sl]
    31c0:	f009 fbc2 	bl	c948 <ull_rx_put>
		ull_rx_sched();
    31c4:	f009 fbd0 	bl	c968 <ull_rx_sched>
		if (!err) {
    31c8:	e5f7      	b.n	2dba <isr_rx+0x22>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    31ca:	7f6b      	ldrb	r3, [r5, #29]
    31cc:	2b25      	cmp	r3, #37	; 0x25
    31ce:	f67f ae34 	bls.w	2e3a <isr_rx+0xa2>
    31d2:	e6a6      	b.n	2f22 <isr_rx+0x18a>
    31d4:	7f6b      	ldrb	r3, [r5, #29]
    31d6:	e637      	b.n	2e48 <isr_rx+0xb0>
		  (pdu->len <= sizeof(struct pdu_adv_adv_ind))) ||
    31d8:	2b01      	cmp	r3, #1
    31da:	f47f ae7b 	bne.w	2ed4 <isr_rx+0x13c>
		 ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) &&
    31de:	7f6b      	ldrb	r3, [r5, #29]
    31e0:	2b0c      	cmp	r3, #12
    31e2:	f47f ade4 	bne.w	2dae <isr_rx+0x16>
					   pdu->direct_ind.tgt_addr, rl_idx)) {
    31e6:	f105 0824 	add.w	r8, r5, #36	; 0x24
	if (ull_filter_lll_rl_addr_resolve(pdu->rx_addr,
    31ea:	09c0      	lsrs	r0, r0, #7
    31ec:	4641      	mov	r1, r8
    31ee:	463a      	mov	r2, r7
    31f0:	f00e f884 	bl	112fc <ull_filter_lll_rl_addr_resolve>
    31f4:	2800      	cmp	r0, #0
    31f6:	f47f aecd 	bne.w	2f94 <isr_rx+0x1fc>
	} else if (init && lll->rpa_gen &&
    31fa:	7de3      	ldrb	r3, [r4, #23]
    31fc:	07d8      	lsls	r0, r3, #31
    31fe:	f100 810b 	bmi.w	3418 <isr_rx+0x680>
	return (((lll->init_addr_type == pdu->rx_addr) &&
    3202:	7da3      	ldrb	r3, [r4, #22]
    3204:	7f28      	ldrb	r0, [r5, #28]
			BDADDR_SIZE))) ||
    3206:	f3c3 1280 	ubfx	r2, r3, #6, #1
    320a:	ebb2 1fd0 	cmp.w	r2, r0, lsr #7
    320e:	f000 80eb 	beq.w	33e8 <isr_rx+0x650>
	if (((lll->filter_policy & 0x02) != 0U) &&
    3212:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    3216:	079a      	lsls	r2, r3, #30
    3218:	f57f ae08 	bpl.w	2e2c <isr_rx+0x94>
    321c:	f995 301c 	ldrsb.w	r3, [r5, #28]
    3220:	2b00      	cmp	r3, #0
    3222:	f6bf ae03 	bge.w	2e2c <isr_rx+0x94>
	    (pdu->rx_addr != 0) &&
    3226:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
    322a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    322e:	2b40      	cmp	r3, #64	; 0x40
    3230:	f47f adfc 	bne.w	2e2c <isr_rx+0x94>
    3234:	e6ae      	b.n	2f94 <isr_rx+0x1fc>
	if (rl_idx != FILTER_IDX_NONE) {
    3236:	2fff      	cmp	r7, #255	; 0xff
    3238:	f88d 700f 	strb.w	r7, [sp, #15]
    323c:	d07a      	beq.n	3334 <isr_rx+0x59c>
		return (rl_idx == lll->rl_idx);
    323e:	7e23      	ldrb	r3, [r4, #24]
    3240:	7f28      	ldrb	r0, [r5, #28]
    3242:	1bdb      	subs	r3, r3, r7
    3244:	fab3 f383 	clz	r3, r3
    3248:	095b      	lsrs	r3, r3, #5
	return ((((lll->filter_policy & 0x01) != 0U) ||
    324a:	2b00      	cmp	r3, #0
    324c:	f47f ae9b 	bne.w	2f86 <isr_rx+0x1ee>
    3250:	e5ed      	b.n	2e2e <isr_rx+0x96>
			pdu_tx->tx_addr = lll->init_addr_type;
    3252:	7da3      	ldrb	r3, [r4, #22]
    3254:	f899 2000 	ldrb.w	r2, [r9]
    3258:	f3c3 1380 	ubfx	r3, r3, #6, #1
    325c:	f363 1286 	bfi	r2, r3, #6, #1
    3260:	f889 2000 	strb.w	r2, [r9]
			memcpy(&pdu_tx->connect_ind.init_addr[0],
    3264:	f104 0119 	add.w	r1, r4, #25
    3268:	2206      	movs	r2, #6
    326a:	f013 fc21 	bl	16ab0 <memcpy>
    326e:	e6e3      	b.n	3038 <isr_rx+0x2a0>
			pdu_tx->connect_ind.win_offset = sys_cpu_to_le16(0);
    3270:	f889 8016 	strb.w	r8, [r9, #22]
    3274:	f889 8017 	strb.w	r8, [r9, #23]
		conn_offset_us = radio_tmr_end_get() + 502 +
    3278:	4698      	mov	r8, r3
    327a:	e72d      	b.n	30d8 <isr_rx+0x340>
    327c:	4693      	mov	fp, r2
    327e:	e792      	b.n	31a6 <isr_rx+0x40e>
		radio_tmr_tifs_set(EVENT_IFS_US);
    3280:	2096      	movs	r0, #150	; 0x96
    3282:	f00f ffb7 	bl	131f4 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    3286:	2000      	movs	r0, #0
    3288:	f00f ff1c 	bl	130c4 <radio_switch_complete_and_rx>
		err = isr_rx_scan_report(lll, rssi_ready,
    328c:	2e00      	cmp	r6, #0
    328e:	bf14      	ite	ne
    3290:	4639      	movne	r1, r7
    3292:	21ff      	moveq	r1, #255	; 0xff
    3294:	4650      	mov	r0, sl
    3296:	2200      	movs	r2, #0
    3298:	f00e ff20 	bl	120dc <isr_rx_scan_report.isra.0>
		if (err) {
    329c:	2800      	cmp	r0, #0
    329e:	f47f ad86 	bne.w	2dae <isr_rx+0x16>
		pdu_tx = (void *)radio_pkt_scratch_get();
    32a2:	f00f ff0b 	bl	130bc <radio_pkt_scratch_get>
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
    32a6:	7f2b      	ldrb	r3, [r5, #28]
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    32a8:	7802      	ldrb	r2, [r0, #0]
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
    32aa:	f3c3 1380 	ubfx	r3, r3, #6, #1
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    32ae:	01db      	lsls	r3, r3, #7
		pdu_tx = (void *)radio_pkt_scratch_get();
    32b0:	4606      	mov	r6, r0
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    32b2:	f002 0270 	and.w	r2, r2, #112	; 0x70
    32b6:	f043 0303 	orr.w	r3, r3, #3
    32ba:	4313      	orrs	r3, r2
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
    32bc:	220c      	movs	r2, #12
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    32be:	7033      	strb	r3, [r6, #0]
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    32c0:	4638      	mov	r0, r7
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
    32c2:	7072      	strb	r2, [r6, #1]
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    32c4:	f00d fe96 	bl	10ff4 <ull_filter_lll_lrpa_get>
		if (lll->rpa_gen && lrpa) {
    32c8:	7de3      	ldrb	r3, [r4, #23]
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    32ca:	4601      	mov	r1, r0
		if (lll->rpa_gen && lrpa) {
    32cc:	07d8      	lsls	r0, r3, #31
    32ce:	d54a      	bpl.n	3366 <isr_rx+0x5ce>
    32d0:	2900      	cmp	r1, #0
    32d2:	d048      	beq.n	3366 <isr_rx+0x5ce>
			pdu_tx->tx_addr = 1;
    32d4:	7833      	ldrb	r3, [r6, #0]
    32d6:	4630      	mov	r0, r6
    32d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    32dc:	f800 3b02 	strb.w	r3, [r0], #2
			memcpy(&pdu_tx->scan_req.scan_addr[0], lrpa->val,
    32e0:	2206      	movs	r2, #6
    32e2:	f013 fbe5 	bl	16ab0 <memcpy>
		memcpy(&pdu_tx->scan_req.adv_addr[0],
    32e6:	f105 011e 	add.w	r1, r5, #30
    32ea:	2206      	movs	r2, #6
    32ec:	f106 0008 	add.w	r0, r6, #8
    32f0:	f013 fbde 	bl	16ab0 <memcpy>
		radio_pkt_tx_set(pdu_tx);
    32f4:	4630      	mov	r0, r6
    32f6:	f00f fe6b 	bl	12fd0 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    32fa:	f00f fea7 	bl	1304c <radio_is_ready>
    32fe:	2800      	cmp	r0, #0
    3300:	d154      	bne.n	33ac <isr_rx+0x614>
		radio_tmr_end_capture();
    3302:	f010 f877 	bl	133f4 <radio_tmr_end_capture>
		lll->state = 1U;
    3306:	7da3      	ldrb	r3, [r4, #22]
		radio_isr_set(isr_tx, lll);
    3308:	483f      	ldr	r0, [pc, #252]	; (3408 <isr_rx+0x670>)
		lll->state = 1U;
    330a:	f043 0301 	orr.w	r3, r3, #1
    330e:	75a3      	strb	r3, [r4, #22]
		radio_isr_set(isr_tx, lll);
    3310:	4621      	mov	r1, r4
    3312:	f00f fd7b 	bl	12e0c <radio_isr_set>
		if (!err) {
    3316:	e550      	b.n	2dba <isr_rx+0x22>
		LL_ASSERT(!radio_is_ready());
    3318:	4a3c      	ldr	r2, [pc, #240]	; (340c <isr_rx+0x674>)
    331a:	493d      	ldr	r1, [pc, #244]	; (3410 <isr_rx+0x678>)
    331c:	483d      	ldr	r0, [pc, #244]	; (3414 <isr_rx+0x67c>)
    331e:	f240 337d 	movw	r3, #893	; 0x37d
    3322:	f012 fd0d 	bl	15d40 <printk>
    3326:	4040      	eors	r0, r0
    3328:	f380 8811 	msr	BASEPRI, r0
    332c:	f04f 0003 	mov.w	r0, #3
    3330:	df02      	svc	2
    3332:	e6fb      	b.n	312c <isr_rx+0x394>
	} else if (!ull_filter_lll_rl_addr_allowed(pdu->tx_addr,
    3334:	7f28      	ldrb	r0, [r5, #28]
						   pdu->adv_ind.addr,
    3336:	f105 091e 	add.w	r9, r5, #30
	} else if (!ull_filter_lll_rl_addr_allowed(pdu->tx_addr,
    333a:	f3c0 1080 	ubfx	r0, r0, #6, #1
    333e:	4649      	mov	r1, r9
    3340:	f10d 020f 	add.w	r2, sp, #15
    3344:	f00d ffa0 	bl	11288 <ull_filter_lll_rl_addr_allowed>
    3348:	2800      	cmp	r0, #0
    334a:	f43f ad6f 	beq.w	2e2c <isr_rx+0x94>
	return ((lll->adv_addr_type == pdu->tx_addr) &&
    334e:	7f28      	ldrb	r0, [r5, #28]
    3350:	7da2      	ldrb	r2, [r4, #22]
    3352:	f3c0 1380 	ubfx	r3, r0, #6, #1
    3356:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    335a:	d035      	beq.n	33c8 <isr_rx+0x630>
    335c:	4643      	mov	r3, r8
	return ((((lll->filter_policy & 0x01) != 0U) ||
    335e:	2b00      	cmp	r3, #0
    3360:	f47f ae11 	bne.w	2f86 <isr_rx+0x1ee>
    3364:	e563      	b.n	2e2e <isr_rx+0x96>
			pdu_tx->tx_addr = lll->init_addr_type;
    3366:	7da3      	ldrb	r3, [r4, #22]
    3368:	7832      	ldrb	r2, [r6, #0]
    336a:	f3c3 1380 	ubfx	r3, r3, #6, #1
    336e:	4630      	mov	r0, r6
    3370:	f363 1286 	bfi	r2, r3, #6, #1
    3374:	f800 2b02 	strb.w	r2, [r0], #2
			memcpy(&pdu_tx->scan_req.scan_addr[0],
    3378:	f104 0119 	add.w	r1, r4, #25
    337c:	2206      	movs	r2, #6
    337e:	f013 fb97 	bl	16ab0 <memcpy>
    3382:	e7b0      	b.n	32e6 <isr_rx+0x54e>
		!memcmp(lll->init_addr, pdu->direct_ind.tgt_addr,
    3384:	4649      	mov	r1, r9
    3386:	2206      	movs	r2, #6
    3388:	f104 0019 	add.w	r0, r4, #25
    338c:	f013 fb80 	bl	16a90 <memcmp>
	return (((lll->init_addr_type == pdu->rx_addr) &&
    3390:	b340      	cbz	r0, 33e4 <isr_rx+0x64c>
    3392:	7da3      	ldrb	r3, [r4, #22]
    3394:	e5bb      	b.n	2f0e <isr_rx+0x176>
	    (pdu->rx_addr != 0) &&
    3396:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
    339a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    339e:	2b40      	cmp	r3, #64	; 0x40
    33a0:	f47f adbe 	bne.w	2f20 <isr_rx+0x188>
    33a4:	7f6b      	ldrb	r3, [r5, #29]
			*dir_report = true;
    33a6:	f04f 0801 	mov.w	r8, #1
    33aa:	e552      	b.n	2e52 <isr_rx+0xba>
		LL_ASSERT(!radio_is_ready());
    33ac:	4a17      	ldr	r2, [pc, #92]	; (340c <isr_rx+0x674>)
    33ae:	4918      	ldr	r1, [pc, #96]	; (3410 <isr_rx+0x678>)
    33b0:	4818      	ldr	r0, [pc, #96]	; (3414 <isr_rx+0x67c>)
    33b2:	f240 33fd 	movw	r3, #1021	; 0x3fd
    33b6:	f012 fcc3 	bl	15d40 <printk>
    33ba:	4040      	eors	r0, r0
    33bc:	f380 8811 	msr	BASEPRI, r0
    33c0:	f04f 0003 	mov.w	r0, #3
    33c4:	df02      	svc	2
    33c6:	e79c      	b.n	3302 <isr_rx+0x56a>
		!memcmp(lll->adv_addr, &pdu->adv_ind.addr[0], BDADDR_SIZE));
    33c8:	4649      	mov	r1, r9
    33ca:	2206      	movs	r2, #6
    33cc:	f104 0008 	add.w	r0, r4, #8
    33d0:	f013 fb5e 	bl	16a90 <memcmp>
	return ((lll->adv_addr_type == pdu->tx_addr) &&
    33d4:	fab0 f380 	clz	r3, r0
    33d8:	095b      	lsrs	r3, r3, #5
    33da:	7f28      	ldrb	r0, [r5, #28]
	return ((((lll->filter_policy & 0x01) != 0U) ||
    33dc:	2b00      	cmp	r3, #0
    33de:	f47f add2 	bne.w	2f86 <isr_rx+0x1ee>
    33e2:	e524      	b.n	2e2e <isr_rx+0x96>
    33e4:	7f6b      	ldrb	r3, [r5, #29]
    33e6:	e534      	b.n	2e52 <isr_rx+0xba>
		!memcmp(lll->init_addr, pdu->direct_ind.tgt_addr,
    33e8:	4641      	mov	r1, r8
    33ea:	2206      	movs	r2, #6
    33ec:	f104 0019 	add.w	r0, r4, #25
    33f0:	f013 fb4e 	bl	16a90 <memcmp>
	return (((lll->init_addr_type == pdu->rx_addr) &&
    33f4:	2800      	cmp	r0, #0
    33f6:	f43f adcd 	beq.w	2f94 <isr_rx+0x1fc>
    33fa:	7da3      	ldrb	r3, [r4, #22]
    33fc:	e709      	b.n	3212 <isr_rx+0x47a>
    33fe:	bf00      	nop
    3400:	d1b71759 	.word	0xd1b71759
    3404:	00011e75 	.word	0x00011e75
    3408:	00011f51 	.word	0x00011f51
    340c:	0001a25c 	.word	0x0001a25c
    3410:	0001a2cc 	.word	0x0001a2cc
    3414:	000199cc 	.word	0x000199cc
		   ull_filter_lll_lrpa_get(rl_idx)) {
    3418:	4638      	mov	r0, r7
    341a:	f00d fdeb 	bl	10ff4 <ull_filter_lll_lrpa_get>
	} else if (init && lll->rpa_gen &&
    341e:	2800      	cmp	r0, #0
    3420:	f47f ad04 	bne.w	2e2c <isr_rx+0x94>
    3424:	e6ed      	b.n	3202 <isr_rx+0x46a>
    3426:	bf00      	nop

00003428 <start_scan>:
		start_scan();
	}
}

static void start_scan(void)
{
    3428:	b530      	push	{r4, r5, lr}
	int err;

	/* This demo doesn't require active scan */
	err = bt_le_scan_start(BT_LE_SCAN_PASSIVE, device_found);
    342a:	4d0b      	ldr	r5, [pc, #44]	; (3458 <start_scan+0x30>)
    342c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    342e:	b087      	sub	sp, #28
	err = bt_le_scan_start(BT_LE_SCAN_PASSIVE, device_found);
    3430:	ac01      	add	r4, sp, #4
    3432:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3434:	682b      	ldr	r3, [r5, #0]
    3436:	4909      	ldr	r1, [pc, #36]	; (345c <start_scan+0x34>)
    3438:	6023      	str	r3, [r4, #0]
    343a:	a801      	add	r0, sp, #4
    343c:	f003 f82e 	bl	649c <bt_le_scan_start>
	if (err) {
    3440:	4601      	mov	r1, r0
    3442:	b120      	cbz	r0, 344e <start_scan+0x26>
		printk("Scanning failed to start (err %d)\n", err);
    3444:	4806      	ldr	r0, [pc, #24]	; (3460 <start_scan+0x38>)
    3446:	f012 fc7b 	bl	15d40 <printk>
		return;
	}

	printk("Scanning successfully started\n");
}
    344a:	b007      	add	sp, #28
    344c:	bd30      	pop	{r4, r5, pc}
	printk("Scanning successfully started\n");
    344e:	4805      	ldr	r0, [pc, #20]	; (3464 <start_scan+0x3c>)
    3450:	f012 fc76 	bl	15d40 <printk>
    3454:	e7f9      	b.n	344a <start_scan+0x22>
    3456:	bf00      	nop
    3458:	00019610 	.word	0x00019610
    345c:	000034e1 	.word	0x000034e1
    3460:	0001a56c 	.word	0x0001a56c
    3464:	0001a58f 	.word	0x0001a58f

00003468 <bt_addr_le_to_str.constprop.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    3468:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    346a:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    346c:	b08a      	sub	sp, #40	; 0x28
    346e:	4604      	mov	r4, r0
    3470:	460e      	mov	r6, r1
    3472:	ad07      	add	r5, sp, #28
    3474:	2b03      	cmp	r3, #3
    3476:	d820      	bhi.n	34ba <bt_addr_le_to_str.constprop.0+0x52>
    3478:	e8df f003 	tbb	[pc, r3]
    347c:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    3480:	4911      	ldr	r1, [pc, #68]	; (34c8 <bt_addr_le_to_str.constprop.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    3482:	4628      	mov	r0, r5
    3484:	f013 fade 	bl	16a44 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    3488:	7863      	ldrb	r3, [r4, #1]
    348a:	9304      	str	r3, [sp, #16]
    348c:	78a3      	ldrb	r3, [r4, #2]
    348e:	9303      	str	r3, [sp, #12]
    3490:	78e3      	ldrb	r3, [r4, #3]
    3492:	9302      	str	r3, [sp, #8]
    3494:	7923      	ldrb	r3, [r4, #4]
    3496:	9301      	str	r3, [sp, #4]
    3498:	7963      	ldrb	r3, [r4, #5]
    349a:	9300      	str	r3, [sp, #0]
    349c:	4a0b      	ldr	r2, [pc, #44]	; (34cc <bt_addr_le_to_str.constprop.0+0x64>)
    349e:	79a3      	ldrb	r3, [r4, #6]
    34a0:	9505      	str	r5, [sp, #20]
    34a2:	211e      	movs	r1, #30
    34a4:	4630      	mov	r0, r6
    34a6:	f012 fc58 	bl	15d5a <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    34aa:	b00a      	add	sp, #40	; 0x28
    34ac:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    34ae:	4908      	ldr	r1, [pc, #32]	; (34d0 <bt_addr_le_to_str.constprop.0+0x68>)
    34b0:	e7e7      	b.n	3482 <bt_addr_le_to_str.constprop.0+0x1a>
		strcpy(type, "public-id");
    34b2:	4908      	ldr	r1, [pc, #32]	; (34d4 <bt_addr_le_to_str.constprop.0+0x6c>)
    34b4:	e7e5      	b.n	3482 <bt_addr_le_to_str.constprop.0+0x1a>
		strcpy(type, "random-id");
    34b6:	4908      	ldr	r1, [pc, #32]	; (34d8 <bt_addr_le_to_str.constprop.0+0x70>)
    34b8:	e7e3      	b.n	3482 <bt_addr_le_to_str.constprop.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    34ba:	4a08      	ldr	r2, [pc, #32]	; (34dc <bt_addr_le_to_str.constprop.0+0x74>)
    34bc:	210a      	movs	r1, #10
    34be:	4628      	mov	r0, r5
    34c0:	f012 fc4b 	bl	15d5a <snprintk>
		break;
    34c4:	e7e0      	b.n	3488 <bt_addr_le_to_str.constprop.0+0x20>
    34c6:	bf00      	nop
    34c8:	0001a5ae 	.word	0x0001a5ae
    34cc:	0001a5d7 	.word	0x0001a5d7
    34d0:	0001a5b5 	.word	0x0001a5b5
    34d4:	0001a5bc 	.word	0x0001a5bc
    34d8:	0001a5c6 	.word	0x0001a5c6
    34dc:	0001a5d0 	.word	0x0001a5d0

000034e0 <device_found>:
{
    34e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (default_conn) {
    34e2:	4f18      	ldr	r7, [pc, #96]	; (3544 <device_found+0x64>)
    34e4:	683b      	ldr	r3, [r7, #0]
{
    34e6:	b08f      	sub	sp, #60	; 0x3c
    34e8:	4606      	mov	r6, r0
    34ea:	460c      	mov	r4, r1
	if (default_conn) {
    34ec:	bb3b      	cbnz	r3, 353e <device_found+0x5e>
	if (type != BT_GAP_ADV_TYPE_ADV_IND &&
    34ee:	2a01      	cmp	r2, #1
    34f0:	d825      	bhi.n	353e <device_found+0x5e>
	bt_addr_le_to_str(addr, addr_str, sizeof(addr_str));
    34f2:	a906      	add	r1, sp, #24
    34f4:	f7ff ffb8 	bl	3468 <bt_addr_le_to_str.constprop.0>
	printk("Device found: %s (RSSI %d)\n", addr_str, rssi);
    34f8:	4622      	mov	r2, r4
    34fa:	4813      	ldr	r0, [pc, #76]	; (3548 <device_found+0x68>)
    34fc:	a906      	add	r1, sp, #24
    34fe:	f012 fc1f 	bl	15d40 <printk>
	if (rssi < -70) {
    3502:	3446      	adds	r4, #70	; 0x46
    3504:	db1b      	blt.n	353e <device_found+0x5e>
	if (bt_le_scan_stop()) {
    3506:	f003 f849 	bl	659c <bt_le_scan_stop>
    350a:	b9c0      	cbnz	r0, 353e <device_found+0x5e>
	err = bt_conn_le_create(addr, BT_CONN_LE_CREATE_CONN,
    350c:	4c0f      	ldr	r4, [pc, #60]	; (354c <device_found+0x6c>)
    350e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    3512:	ad02      	add	r5, sp, #8
    3514:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
				BT_LE_CONN_PARAM_DEFAULT, &default_conn);
    3518:	f854 0f10 	ldr.w	r0, [r4, #16]!
    351c:	6861      	ldr	r1, [r4, #4]
    351e:	466b      	mov	r3, sp
    3520:	c303      	stmia	r3!, {r0, r1}
	err = bt_conn_le_create(addr, BT_CONN_LE_CREATE_CONN,
    3522:	466a      	mov	r2, sp
    3524:	463b      	mov	r3, r7
    3526:	4629      	mov	r1, r5
    3528:	4630      	mov	r0, r6
    352a:	f003 fb49 	bl	6bc0 <bt_conn_le_create>
	if (err) {
    352e:	4602      	mov	r2, r0
    3530:	b128      	cbz	r0, 353e <device_found+0x5e>
		printk("Create conn to %s failed (%u)\n", addr_str, err);
    3532:	4807      	ldr	r0, [pc, #28]	; (3550 <device_found+0x70>)
    3534:	a906      	add	r1, sp, #24
    3536:	f012 fc03 	bl	15d40 <printk>
		start_scan();
    353a:	f7ff ff75 	bl	3428 <start_scan>
}
    353e:	b00f      	add	sp, #60	; 0x3c
    3540:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3542:	bf00      	nop
    3544:	20000f78 	.word	0x20000f78
    3548:	0001a5fa 	.word	0x0001a5fa
    354c:	00019624 	.word	0x00019624
    3550:	0001a616 	.word	0x0001a616

00003554 <connected>:

static void connected(struct bt_conn *conn, uint8_t err)
{
    3554:	b570      	push	{r4, r5, r6, lr}
    3556:	b088      	sub	sp, #32
    3558:	460c      	mov	r4, r1
    355a:	4605      	mov	r5, r0
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    355c:	f013 ff90 	bl	17480 <bt_conn_get_dst>
    3560:	4669      	mov	r1, sp
    3562:	f7ff ff81 	bl	3468 <bt_addr_le_to_str.constprop.0>

	if (err) {
    3566:	4e0e      	ldr	r6, [pc, #56]	; (35a0 <connected+0x4c>)
    3568:	b16c      	cbz	r4, 3586 <connected+0x32>
		printk("Failed to connect to %s (%u)\n", addr, err);
    356a:	480e      	ldr	r0, [pc, #56]	; (35a4 <connected+0x50>)
    356c:	4622      	mov	r2, r4
    356e:	4669      	mov	r1, sp
    3570:	f012 fbe6 	bl	15d40 <printk>

		bt_conn_unref(default_conn);
    3574:	6830      	ldr	r0, [r6, #0]
    3576:	f013 ff80 	bl	1747a <bt_conn_unref>
		default_conn = NULL;
    357a:	2300      	movs	r3, #0
    357c:	6033      	str	r3, [r6, #0]

		start_scan();
    357e:	f7ff ff53 	bl	3428 <start_scan>
	}

	printk("Connected: %s\n", addr);

	bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
}
    3582:	b008      	add	sp, #32
    3584:	bd70      	pop	{r4, r5, r6, pc}
	if (conn != default_conn) {
    3586:	6834      	ldr	r4, [r6, #0]
    3588:	42ac      	cmp	r4, r5
    358a:	d1fa      	bne.n	3582 <connected+0x2e>
	printk("Connected: %s\n", addr);
    358c:	4669      	mov	r1, sp
    358e:	4806      	ldr	r0, [pc, #24]	; (35a8 <connected+0x54>)
    3590:	f012 fbd6 	bl	15d40 <printk>
	bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
    3594:	2113      	movs	r1, #19
    3596:	4620      	mov	r0, r4
    3598:	f013 ff74 	bl	17484 <bt_conn_disconnect>
    359c:	e7f1      	b.n	3582 <connected+0x2e>
    359e:	bf00      	nop
    35a0:	20000f78 	.word	0x20000f78
    35a4:	0001a635 	.word	0x0001a635
    35a8:	0001a653 	.word	0x0001a653

000035ac <disconnected>:

static void disconnected(struct bt_conn *conn, uint8_t reason)
{
    35ac:	b530      	push	{r4, r5, lr}
	char addr[BT_ADDR_LE_STR_LEN];

	if (conn != default_conn) {
    35ae:	4c0c      	ldr	r4, [pc, #48]	; (35e0 <disconnected+0x34>)
    35b0:	6823      	ldr	r3, [r4, #0]
    35b2:	4283      	cmp	r3, r0
{
    35b4:	b089      	sub	sp, #36	; 0x24
    35b6:	460d      	mov	r5, r1
	if (conn != default_conn) {
    35b8:	d110      	bne.n	35dc <disconnected+0x30>
		return;
	}

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    35ba:	f013 ff61 	bl	17480 <bt_conn_get_dst>
    35be:	4669      	mov	r1, sp
    35c0:	f7ff ff52 	bl	3468 <bt_addr_le_to_str.constprop.0>

	printk("Disconnected: %s (reason 0x%02x)\n", addr, reason);
    35c4:	4807      	ldr	r0, [pc, #28]	; (35e4 <disconnected+0x38>)
    35c6:	462a      	mov	r2, r5
    35c8:	4669      	mov	r1, sp
    35ca:	f012 fbb9 	bl	15d40 <printk>

	bt_conn_unref(default_conn);
    35ce:	6820      	ldr	r0, [r4, #0]
    35d0:	f013 ff53 	bl	1747a <bt_conn_unref>
	default_conn = NULL;
    35d4:	2300      	movs	r3, #0
    35d6:	6023      	str	r3, [r4, #0]

	start_scan();
    35d8:	f7ff ff26 	bl	3428 <start_scan>
}
    35dc:	b009      	add	sp, #36	; 0x24
    35de:	bd30      	pop	{r4, r5, pc}
    35e0:	20000f78 	.word	0x20000f78
    35e4:	0001a662 	.word	0x0001a662

000035e8 <main>:
		.connected = connected,
		.disconnected = disconnected,
};

void main(void)
{
    35e8:	b508      	push	{r3, lr}
	int err;

	err = bt_enable(NULL);
    35ea:	2000      	movs	r0, #0
    35ec:	f002 fb8a 	bl	5d04 <bt_enable>
	if (err) {
    35f0:	4601      	mov	r1, r0
    35f2:	b120      	cbz	r0, 35fe <main+0x16>
	printk("Bluetooth initializeddddd\n");

	bt_conn_cb_register(&conn_callbacks);

	start_scan();
}
    35f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printk("Bluetooth init failed (err %d)\n", err);
    35f8:	4806      	ldr	r0, [pc, #24]	; (3614 <main+0x2c>)
    35fa:	f012 bba1 	b.w	15d40 <printk>
	printk("Bluetooth initializeddddd\n");
    35fe:	4806      	ldr	r0, [pc, #24]	; (3618 <main+0x30>)
    3600:	f012 fb9e 	bl	15d40 <printk>
	bt_conn_cb_register(&conn_callbacks);
    3604:	4805      	ldr	r0, [pc, #20]	; (361c <main+0x34>)
    3606:	f003 f8e1 	bl	67cc <bt_conn_cb_register>
}
    360a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	start_scan();
    360e:	f7ff bf0b 	b.w	3428 <start_scan>
    3612:	bf00      	nop
    3614:	0001a684 	.word	0x0001a684
    3618:	0001a6a4 	.word	0x0001a6a4
    361c:	20000130 	.word	0x20000130

00003620 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    3620:	680b      	ldr	r3, [r1, #0]
    3622:	3301      	adds	r3, #1
    3624:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    3626:	4b01      	ldr	r3, [pc, #4]	; (362c <char_out+0xc>)
    3628:	681b      	ldr	r3, [r3, #0]
    362a:	4718      	bx	r3
    362c:	20000144 	.word	0x20000144

00003630 <__printk_hook_install>:
	_char_out = fn;
    3630:	4b01      	ldr	r3, [pc, #4]	; (3638 <__printk_hook_install+0x8>)
    3632:	6018      	str	r0, [r3, #0]
}
    3634:	4770      	bx	lr
    3636:	bf00      	nop
    3638:	20000144 	.word	0x20000144

0000363c <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    363c:	b507      	push	{r0, r1, r2, lr}
    363e:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    3640:	2100      	movs	r1, #0
{
    3642:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    3644:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    3646:	4803      	ldr	r0, [pc, #12]	; (3654 <vprintk+0x18>)
    3648:	a901      	add	r1, sp, #4
    364a:	f000 f8ff 	bl	384c <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    364e:	b003      	add	sp, #12
    3650:	f85d fb04 	ldr.w	pc, [sp], #4
    3654:	00003621 	.word	0x00003621

00003658 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    3658:	b530      	push	{r4, r5, lr}
    365a:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    365c:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    3660:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    3662:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
    3664:	a901      	add	r1, sp, #4
    3666:	4805      	ldr	r0, [pc, #20]	; (367c <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    3668:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    366a:	f000 f8ef 	bl	384c <cbvprintf>

	if (ctx.count < ctx.max) {
    366e:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    3672:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    3674:	bfb8      	it	lt
    3676:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    3678:	b005      	add	sp, #20
    367a:	bd30      	pop	{r4, r5, pc}
    367c:	00015d1b 	.word	0x00015d1b

00003680 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    3680:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3684:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    3688:	f019 0808 	ands.w	r8, r9, #8
{
    368c:	4604      	mov	r4, r0
    368e:	4693      	mov	fp, r2
	if (processing) {
    3690:	d00d      	beq.n	36ae <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    3692:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    3694:	bf0c      	ite	eq
    3696:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    369a:	f049 0920 	orrne.w	r9, r9, #32
    369e:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    36a2:	f38b 8811 	msr	BASEPRI, fp
    36a6:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    36aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    36ae:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    36b2:	2902      	cmp	r1, #2
    36b4:	d107      	bne.n	36c6 <process_event+0x46>
			evt = process_recheck(mgr);
    36b6:	4620      	mov	r0, r4
    36b8:	f012 fb5c 	bl	15d74 <process_recheck>
		if (evt == EVT_NOP) {
    36bc:	2800      	cmp	r0, #0
    36be:	d0f0      	beq.n	36a2 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    36c0:	2801      	cmp	r0, #1
    36c2:	8b23      	ldrh	r3, [r4, #24]
    36c4:	d150      	bne.n	3768 <process_event+0xe8>
			res = mgr->last_res;
    36c6:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    36c8:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    36ca:	2f00      	cmp	r7, #0
    36cc:	da15      	bge.n	36fa <process_event+0x7a>
		*clients = mgr->clients;
    36ce:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    36d0:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    36d4:	e9c4 8800 	strd	r8, r8, [r4]
    36d8:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    36dc:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    36de:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    36e0:	8b21      	ldrh	r1, [r4, #24]
    36e2:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    36e6:	45ca      	cmp	sl, r9
    36e8:	d002      	beq.n	36f0 <process_event+0x70>
		if (do_monitors
    36ea:	68a3      	ldr	r3, [r4, #8]
    36ec:	2b00      	cmp	r3, #0
    36ee:	d15c      	bne.n	37aa <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
    36f0:	b90d      	cbnz	r5, 36f6 <process_event+0x76>
		    || (transit != NULL)) {
    36f2:	2e00      	cmp	r6, #0
    36f4:	d074      	beq.n	37e0 <process_event+0x160>
    36f6:	2300      	movs	r3, #0
    36f8:	e058      	b.n	37ac <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    36fa:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    36fe:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    3700:	2a01      	cmp	r2, #1
    3702:	d820      	bhi.n	3746 <process_event+0xc6>
		*clients = mgr->clients;
    3704:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    3708:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    370a:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
    370c:	b289      	uxth	r1, r1
	list->tail = NULL;
    370e:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    3712:	d10c      	bne.n	372e <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    3714:	2d00      	cmp	r5, #0
    3716:	462b      	mov	r3, r5
    3718:	bf38      	it	cc
    371a:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    371c:	b12b      	cbz	r3, 372a <process_event+0xaa>
				mgr->refs += 1U;
    371e:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    3720:	681b      	ldr	r3, [r3, #0]
    3722:	3201      	adds	r2, #1
    3724:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    3726:	2b00      	cmp	r3, #0
    3728:	d1f8      	bne.n	371c <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    372a:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    372e:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    3730:	4620      	mov	r0, r4
    3732:	f012 fb1f 	bl	15d74 <process_recheck>
    3736:	4606      	mov	r6, r0
    3738:	2800      	cmp	r0, #0
    373a:	d0d1      	beq.n	36e0 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    373c:	8b23      	ldrh	r3, [r4, #24]
    373e:	f043 0320 	orr.w	r3, r3, #32
    3742:	8323      	strh	r3, [r4, #24]
    3744:	e7cb      	b.n	36de <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    3746:	2b04      	cmp	r3, #4
    3748:	d10c      	bne.n	3764 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    374a:	f021 0107 	bic.w	r1, r1, #7
    374e:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    3750:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    3752:	4620      	mov	r0, r4
    3754:	f012 fb0e 	bl	15d74 <process_recheck>
    3758:	4605      	mov	r5, r0
    375a:	2800      	cmp	r0, #0
    375c:	d0bf      	beq.n	36de <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    375e:	f041 0120 	orr.w	r1, r1, #32
    3762:	8321      	strh	r1, [r4, #24]
    3764:	2500      	movs	r5, #0
    3766:	e7ba      	b.n	36de <process_event+0x5e>
		} else if (evt == EVT_START) {
    3768:	2803      	cmp	r0, #3
    376a:	d109      	bne.n	3780 <process_event+0x100>
			transit = mgr->transitions->start;
    376c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    376e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    3772:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3774:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    3778:	8323      	strh	r3, [r4, #24]
}
    377a:	2500      	movs	r5, #0
		res = 0;
    377c:	462f      	mov	r7, r5
    377e:	e7af      	b.n	36e0 <process_event+0x60>
		} else if (evt == EVT_STOP) {
    3780:	2804      	cmp	r0, #4
    3782:	d106      	bne.n	3792 <process_event+0x112>
			transit = mgr->transitions->stop;
    3784:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3786:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    378a:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    378c:	f043 0304 	orr.w	r3, r3, #4
    3790:	e7f2      	b.n	3778 <process_event+0xf8>
		} else if (evt == EVT_RESET) {
    3792:	2805      	cmp	r0, #5
    3794:	d106      	bne.n	37a4 <process_event+0x124>
			transit = mgr->transitions->reset;
    3796:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3798:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    379c:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    379e:	f043 0305 	orr.w	r3, r3, #5
    37a2:	e7e9      	b.n	3778 <process_event+0xf8>
    37a4:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    37a6:	462e      	mov	r6, r5
    37a8:	e7e8      	b.n	377c <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
    37aa:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    37ac:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    37b0:	8321      	strh	r1, [r4, #24]
    37b2:	f38b 8811 	msr	BASEPRI, fp
    37b6:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    37ba:	bb03      	cbnz	r3, 37fe <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
    37bc:	2d00      	cmp	r5, #0
    37be:	d133      	bne.n	3828 <process_event+0x1a8>
			if (transit != NULL) {
    37c0:	b116      	cbz	r6, 37c8 <process_event+0x148>
				transit(mgr, transition_complete);
    37c2:	4921      	ldr	r1, [pc, #132]	; (3848 <process_event+0x1c8>)
    37c4:	4620      	mov	r0, r4
    37c6:	47b0      	blx	r6
	__asm__ volatile(
    37c8:	f04f 0320 	mov.w	r3, #32
    37cc:	f3ef 8b11 	mrs	fp, BASEPRI
    37d0:	f383 8811 	msr	BASEPRI, r3
    37d4:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    37d8:	8b23      	ldrh	r3, [r4, #24]
    37da:	f023 0308 	bic.w	r3, r3, #8
    37de:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    37e0:	8b23      	ldrh	r3, [r4, #24]
    37e2:	06da      	lsls	r2, r3, #27
    37e4:	d528      	bpl.n	3838 <process_event+0x1b8>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    37e6:	f023 0310 	bic.w	r3, r3, #16
    37ea:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    37ec:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    37ee:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    37f2:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    37f6:	2900      	cmp	r1, #0
    37f8:	f47f af5b 	bne.w	36b2 <process_event+0x32>
out:
    37fc:	e751      	b.n	36a2 <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    37fe:	68a1      	ldr	r1, [r4, #8]
    3800:	2900      	cmp	r1, #0
    3802:	d0db      	beq.n	37bc <process_event+0x13c>
	return node->next;
    3804:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
    3806:	f8d1 b004 	ldr.w	fp, [r1, #4]
    380a:	2b00      	cmp	r3, #0
    380c:	bf38      	it	cc
    380e:	2300      	movcc	r3, #0
    3810:	4699      	mov	r9, r3
    3812:	4652      	mov	r2, sl
    3814:	463b      	mov	r3, r7
    3816:	4620      	mov	r0, r4
    3818:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    381a:	f1b9 0f00 	cmp.w	r9, #0
    381e:	d0cd      	beq.n	37bc <process_event+0x13c>
    3820:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    3824:	4649      	mov	r1, r9
    3826:	e7ee      	b.n	3806 <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    3828:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    382a:	463b      	mov	r3, r7
    382c:	4652      	mov	r2, sl
    382e:	4620      	mov	r0, r4
    3830:	682d      	ldr	r5, [r5, #0]
    3832:	f012 fabb 	bl	15dac <notify_one>
    3836:	e7c1      	b.n	37bc <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    3838:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    383c:	bf1e      	ittt	ne
    383e:	f023 0320 	bicne.w	r3, r3, #32
    3842:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    3844:	2102      	movne	r1, #2
    3846:	e7d2      	b.n	37ee <process_event+0x16e>
    3848:	00015dd9 	.word	0x00015dd9

0000384c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    384c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3850:	b091      	sub	sp, #68	; 0x44
    3852:	468b      	mov	fp, r1
    3854:	9002      	str	r0, [sp, #8]
    3856:	4692      	mov	sl, r2
    3858:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    385a:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    385c:	f89a 0000 	ldrb.w	r0, [sl]
    3860:	b908      	cbnz	r0, 3866 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    3862:	4628      	mov	r0, r5
    3864:	e35e      	b.n	3f24 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x48c>
		if (*fp != '%') {
    3866:	2825      	cmp	r0, #37	; 0x25
    3868:	f10a 0701 	add.w	r7, sl, #1
    386c:	d007      	beq.n	387e <cbvprintf+0x32>
			OUTC('%');
    386e:	9b02      	ldr	r3, [sp, #8]
    3870:	4659      	mov	r1, fp
    3872:	4798      	blx	r3
    3874:	2800      	cmp	r0, #0
    3876:	f2c0 8355 	blt.w	3f24 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x48c>
    387a:	3501      	adds	r5, #1
			break;
    387c:	e210      	b.n	3ca0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x208>
		} state = {
    387e:	2218      	movs	r2, #24
    3880:	2100      	movs	r1, #0
    3882:	a80a      	add	r0, sp, #40	; 0x28
    3884:	f013 f93f 	bl	16b06 <memset>
	if (*sp == '%') {
    3888:	f89a 3001 	ldrb.w	r3, [sl, #1]
    388c:	2b25      	cmp	r3, #37	; 0x25
    388e:	d078      	beq.n	3982 <cbvprintf+0x136>
    3890:	2200      	movs	r2, #0
    3892:	4694      	mov	ip, r2
    3894:	4616      	mov	r6, r2
    3896:	4696      	mov	lr, r2
    3898:	4610      	mov	r0, r2
    389a:	4639      	mov	r1, r7
		switch (*sp) {
    389c:	f817 3b01 	ldrb.w	r3, [r7], #1
    38a0:	2b2b      	cmp	r3, #43	; 0x2b
    38a2:	f000 809d 	beq.w	39e0 <cbvprintf+0x194>
    38a6:	f200 8094 	bhi.w	39d2 <cbvprintf+0x186>
    38aa:	2b20      	cmp	r3, #32
    38ac:	f000 809b 	beq.w	39e6 <cbvprintf+0x19a>
    38b0:	2b23      	cmp	r3, #35	; 0x23
    38b2:	f000 809a 	beq.w	39ea <cbvprintf+0x19e>
    38b6:	b128      	cbz	r0, 38c4 <cbvprintf+0x78>
    38b8:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    38bc:	f040 0004 	orr.w	r0, r0, #4
    38c0:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    38c4:	f1be 0f00 	cmp.w	lr, #0
    38c8:	d005      	beq.n	38d6 <cbvprintf+0x8a>
    38ca:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    38ce:	f040 0008 	orr.w	r0, r0, #8
    38d2:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    38d6:	b12e      	cbz	r6, 38e4 <cbvprintf+0x98>
    38d8:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    38dc:	f040 0010 	orr.w	r0, r0, #16
    38e0:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    38e4:	f1bc 0f00 	cmp.w	ip, #0
    38e8:	d005      	beq.n	38f6 <cbvprintf+0xaa>
    38ea:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    38ee:	f040 0020 	orr.w	r0, r0, #32
    38f2:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    38f6:	b12a      	cbz	r2, 3904 <cbvprintf+0xb8>
    38f8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    38fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    3900:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    3904:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    3908:	f002 0044 	and.w	r0, r2, #68	; 0x44
    390c:	2844      	cmp	r0, #68	; 0x44
    390e:	d103      	bne.n	3918 <cbvprintf+0xcc>
		conv->flag_zero = false;
    3910:	f36f 1286 	bfc	r2, #6, #1
    3914:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    3918:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    391c:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    391e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    3922:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    3926:	d17b      	bne.n	3a20 <cbvprintf+0x1d4>
		conv->width_star = true;
    3928:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    392c:	f042 0201 	orr.w	r2, r2, #1
    3930:	1c4b      	adds	r3, r1, #1
    3932:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    3936:	781a      	ldrb	r2, [r3, #0]
    3938:	2a2e      	cmp	r2, #46	; 0x2e
    393a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    393e:	bf0c      	ite	eq
    3940:	2101      	moveq	r1, #1
    3942:	2100      	movne	r1, #0
    3944:	f361 0241 	bfi	r2, r1, #1, #1
    3948:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    394c:	d174      	bne.n	3a38 <cbvprintf+0x1ec>
	if (*sp == '*') {
    394e:	785a      	ldrb	r2, [r3, #1]
    3950:	2a2a      	cmp	r2, #42	; 0x2a
    3952:	d06a      	beq.n	3a2a <cbvprintf+0x1de>
    3954:	3301      	adds	r3, #1
	size_t val = 0;
    3956:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    3958:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    395a:	4618      	mov	r0, r3
    395c:	f810 2b01 	ldrb.w	r2, [r0], #1
    3960:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    3964:	2f09      	cmp	r7, #9
    3966:	f240 808e 	bls.w	3a86 <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
    396a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    396e:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    3970:	f3c2 0040 	ubfx	r0, r2, #1, #1
    3974:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    3978:	f361 0241 	bfi	r2, r1, #1, #1
    397c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    3980:	e05a      	b.n	3a38 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
    3982:	f10a 0702 	add.w	r7, sl, #2
    3986:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    398a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    398e:	07d9      	lsls	r1, r3, #31
    3990:	f140 8149 	bpl.w	3c26 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18e>
			width = va_arg(ap, int);
    3994:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    3998:	f1b9 0f00 	cmp.w	r9, #0
    399c:	da07      	bge.n	39ae <cbvprintf+0x162>
				conv->flag_dash = true;
    399e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    39a2:	f042 0204 	orr.w	r2, r2, #4
    39a6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
    39aa:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
    39ae:	075a      	lsls	r2, r3, #29
    39b0:	f140 8142 	bpl.w	3c38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a0>
			int arg = va_arg(ap, int);
    39b4:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    39b8:	f1b8 0f00 	cmp.w	r8, #0
    39bc:	f280 8141 	bge.w	3c42 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1aa>
				conv->prec_present = false;
    39c0:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    39c4:	f36f 0341 	bfc	r3, #1, #1
    39c8:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    39cc:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    39d0:	e137      	b.n	3c42 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1aa>
		switch (*sp) {
    39d2:	2b2d      	cmp	r3, #45	; 0x2d
    39d4:	d00c      	beq.n	39f0 <cbvprintf+0x1a4>
    39d6:	2b30      	cmp	r3, #48	; 0x30
    39d8:	f47f af6d 	bne.w	38b6 <cbvprintf+0x6a>
			conv->flag_zero = true;
    39dc:	2201      	movs	r2, #1
	} while (loop);
    39de:	e75c      	b.n	389a <cbvprintf+0x4e>
			conv->flag_plus = true;
    39e0:	f04f 0e01 	mov.w	lr, #1
    39e4:	e759      	b.n	389a <cbvprintf+0x4e>
			conv->flag_space = true;
    39e6:	2601      	movs	r6, #1
    39e8:	e757      	b.n	389a <cbvprintf+0x4e>
			conv->flag_hash = true;
    39ea:	f04f 0c01 	mov.w	ip, #1
    39ee:	e754      	b.n	389a <cbvprintf+0x4e>
		switch (*sp) {
    39f0:	2001      	movs	r0, #1
    39f2:	e752      	b.n	389a <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
    39f4:	fb0c 0202 	mla	r2, ip, r2, r0
    39f8:	3a30      	subs	r2, #48	; 0x30
    39fa:	4633      	mov	r3, r6
    39fc:	461e      	mov	r6, r3
    39fe:	f816 0b01 	ldrb.w	r0, [r6], #1
    3a02:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    3a06:	2f09      	cmp	r7, #9
    3a08:	d9f4      	bls.n	39f4 <cbvprintf+0x1a8>
	if (sp != wp) {
    3a0a:	4299      	cmp	r1, r3
    3a0c:	d093      	beq.n	3936 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    3a0e:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    3a12:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    3a14:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    3a16:	f362 0141 	bfi	r1, r2, #1, #1
    3a1a:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    3a1e:	e78a      	b.n	3936 <cbvprintf+0xea>
    3a20:	460b      	mov	r3, r1
	size_t val = 0;
    3a22:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    3a24:	f04f 0c0a 	mov.w	ip, #10
    3a28:	e7e8      	b.n	39fc <cbvprintf+0x1b0>
		conv->prec_star = true;
    3a2a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    3a2e:	f042 0204 	orr.w	r2, r2, #4
    3a32:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    3a36:	3302      	adds	r3, #2
	switch (*sp) {
    3a38:	461f      	mov	r7, r3
    3a3a:	f817 2b01 	ldrb.w	r2, [r7], #1
    3a3e:	2a6c      	cmp	r2, #108	; 0x6c
    3a40:	d041      	beq.n	3ac6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2e>
    3a42:	d825      	bhi.n	3a90 <cbvprintf+0x244>
    3a44:	2a68      	cmp	r2, #104	; 0x68
    3a46:	d02b      	beq.n	3aa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8>
    3a48:	2a6a      	cmp	r2, #106	; 0x6a
    3a4a:	d046      	beq.n	3ada <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x42>
    3a4c:	2a4c      	cmp	r2, #76	; 0x4c
    3a4e:	d04c      	beq.n	3aea <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x52>
    3a50:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    3a52:	f817 2b01 	ldrb.w	r2, [r7], #1
    3a56:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    3a5a:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    3a5e:	2a78      	cmp	r2, #120	; 0x78
    3a60:	f200 80d9 	bhi.w	3c16 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x17e>
    3a64:	2a57      	cmp	r2, #87	; 0x57
    3a66:	d84d      	bhi.n	3b04 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6c>
    3a68:	2a41      	cmp	r2, #65	; 0x41
    3a6a:	d003      	beq.n	3a74 <cbvprintf+0x228>
    3a6c:	3a45      	subs	r2, #69	; 0x45
    3a6e:	2a02      	cmp	r2, #2
    3a70:	f200 80d1 	bhi.w	3c16 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x17e>
		conv->specifier_cat = SPECIFIER_FP;
    3a74:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    3a78:	2204      	movs	r2, #4
    3a7a:	f362 0302 	bfi	r3, r2, #0, #3
    3a7e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    3a82:	2301      	movs	r3, #1
			break;
    3a84:	e09e      	b.n	3bc4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x12c>
		val = 10U * val + *sp++ - '0';
    3a86:	fb06 2101 	mla	r1, r6, r1, r2
    3a8a:	3930      	subs	r1, #48	; 0x30
    3a8c:	4603      	mov	r3, r0
    3a8e:	e764      	b.n	395a <cbvprintf+0x10e>
	switch (*sp) {
    3a90:	2a74      	cmp	r2, #116	; 0x74
    3a92:	d026      	beq.n	3ae2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4a>
    3a94:	2a7a      	cmp	r2, #122	; 0x7a
    3a96:	d1db      	bne.n	3a50 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
    3a98:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    3a9c:	2206      	movs	r2, #6
    3a9e:	e00d      	b.n	3abc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x24>
		if (*++sp == 'h') {
    3aa0:	785a      	ldrb	r2, [r3, #1]
    3aa2:	2a68      	cmp	r2, #104	; 0x68
    3aa4:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    3aa8:	d106      	bne.n	3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>
			conv->length_mod = LENGTH_HH;
    3aaa:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    3aac:	f361 02c6 	bfi	r2, r1, #3, #4
    3ab0:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    3ab4:	1c9f      	adds	r7, r3, #2
    3ab6:	e7cc      	b.n	3a52 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
    3ab8:	4613      	mov	r3, r2
    3aba:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    3abc:	f362 03c6 	bfi	r3, r2, #3, #4
    3ac0:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    3ac4:	e7c5      	b.n	3a52 <cbvprintf+0x206>
		if (*++sp == 'l') {
    3ac6:	785a      	ldrb	r2, [r3, #1]
    3ac8:	2a6c      	cmp	r2, #108	; 0x6c
    3aca:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    3ace:	d101      	bne.n	3ad4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3c>
			conv->length_mod = LENGTH_LL;
    3ad0:	2104      	movs	r1, #4
    3ad2:	e7eb      	b.n	3aac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x14>
			conv->length_mod = LENGTH_L;
    3ad4:	4613      	mov	r3, r2
    3ad6:	2203      	movs	r2, #3
    3ad8:	e7f0      	b.n	3abc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x24>
		conv->length_mod = LENGTH_J;
    3ada:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    3ade:	2205      	movs	r2, #5
    3ae0:	e7ec      	b.n	3abc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x24>
		conv->length_mod = LENGTH_T;
    3ae2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    3ae6:	2207      	movs	r2, #7
    3ae8:	e7e8      	b.n	3abc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x24>
		conv->unsupported = true;
    3aea:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    3aee:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    3af2:	f023 0302 	bic.w	r3, r3, #2
    3af6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    3afa:	f043 0302 	orr.w	r3, r3, #2
    3afe:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    3b02:	e7a6      	b.n	3a52 <cbvprintf+0x206>
    3b04:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    3b08:	2920      	cmp	r1, #32
    3b0a:	f200 8084 	bhi.w	3c16 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x17e>
    3b0e:	a001      	add	r0, pc, #4	; (adr r0, 3b14 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x7c>)
    3b10:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    3b14:	00003bd9 	.word	0x00003bd9
    3b18:	00003c17 	.word	0x00003c17
    3b1c:	00003c17 	.word	0x00003c17
    3b20:	00003c17 	.word	0x00003c17
    3b24:	00003c17 	.word	0x00003c17
    3b28:	00003c17 	.word	0x00003c17
    3b2c:	00003c17 	.word	0x00003c17
    3b30:	00003c17 	.word	0x00003c17
    3b34:	00003c17 	.word	0x00003c17
    3b38:	00003a75 	.word	0x00003a75
    3b3c:	00003c17 	.word	0x00003c17
    3b40:	00003bd9 	.word	0x00003bd9
    3b44:	00003b99 	.word	0x00003b99
    3b48:	00003a75 	.word	0x00003a75
    3b4c:	00003a75 	.word	0x00003a75
    3b50:	00003a75 	.word	0x00003a75
    3b54:	00003c17 	.word	0x00003c17
    3b58:	00003b99 	.word	0x00003b99
    3b5c:	00003c17 	.word	0x00003c17
    3b60:	00003c17 	.word	0x00003c17
    3b64:	00003c17 	.word	0x00003c17
    3b68:	00003c17 	.word	0x00003c17
    3b6c:	00003be1 	.word	0x00003be1
    3b70:	00003bd9 	.word	0x00003bd9
    3b74:	00003bfd 	.word	0x00003bfd
    3b78:	00003c17 	.word	0x00003c17
    3b7c:	00003c17 	.word	0x00003c17
    3b80:	00003bfd 	.word	0x00003bfd
    3b84:	00003c17 	.word	0x00003c17
    3b88:	00003bd9 	.word	0x00003bd9
    3b8c:	00003c17 	.word	0x00003c17
    3b90:	00003c17 	.word	0x00003c17
    3b94:	00003bd9 	.word	0x00003bd9
		conv->specifier_cat = SPECIFIER_SINT;
    3b98:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    3b9c:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    3b9e:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    3ba2:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    3ba6:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    3ba8:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    3bac:	bf02      	ittt	eq
    3bae:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    3bb2:	f041 0101 	orreq.w	r1, r1, #1
    3bb6:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    3bba:	2a63      	cmp	r2, #99	; 0x63
    3bbc:	d131      	bne.n	3c22 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    3bbe:	3b00      	subs	r3, #0
    3bc0:	bf18      	it	ne
    3bc2:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    3bc4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    3bc8:	f3c2 0140 	ubfx	r1, r2, #1, #1
    3bcc:	430b      	orrs	r3, r1
    3bce:	f363 0241 	bfi	r2, r3, #1, #1
    3bd2:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    3bd6:	e6d8      	b.n	398a <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    3bd8:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    3bdc:	2002      	movs	r0, #2
    3bde:	e7de      	b.n	3b9e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x106>
		conv->specifier_cat = SPECIFIER_PTR;
    3be0:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    3be4:	f003 0378 	and.w	r3, r3, #120	; 0x78
    3be8:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    3bec:	2103      	movs	r1, #3
    3bee:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    3bf2:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    3bf4:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    3bf8:	4143      	adcs	r3, r0
    3bfa:	e7e3      	b.n	3bc4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x12c>
		conv->specifier_cat = SPECIFIER_PTR;
    3bfc:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    3c00:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    3c02:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    3c06:	f361 0202 	bfi	r2, r1, #0, #3
    3c0a:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    3c0e:	bf14      	ite	ne
    3c10:	2301      	movne	r3, #1
    3c12:	2300      	moveq	r3, #0
    3c14:	e7d6      	b.n	3bc4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x12c>
		conv->invalid = true;
    3c16:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    3c1a:	f043 0301 	orr.w	r3, r3, #1
    3c1e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    3c22:	2300      	movs	r3, #0
    3c24:	e7ce      	b.n	3bc4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x12c>
		} else if (conv->width_present) {
    3c26:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    3c2a:	2a00      	cmp	r2, #0
			width = conv->width_value;
    3c2c:	bfb4      	ite	lt
    3c2e:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
    3c32:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
    3c36:	e6ba      	b.n	39ae <cbvprintf+0x162>
		} else if (conv->prec_present) {
    3c38:	079b      	lsls	r3, r3, #30
    3c3a:	f57f aec7 	bpl.w	39cc <cbvprintf+0x180>
			precision = conv->prec_value;
    3c3e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
    3c42:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		conv->pad0_value = 0;
    3c46:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    3c48:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    3c4c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
    3c50:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    3c54:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    3c56:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    3c5a:	d136      	bne.n	3cca <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x232>
			switch (length_mod) {
    3c5c:	1ed3      	subs	r3, r2, #3
    3c5e:	2b04      	cmp	r3, #4
    3c60:	d820      	bhi.n	3ca4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20c>
    3c62:	e8df f003 	tbb	[pc, r3]
    3c66:	0703      	.short	0x0703
    3c68:	1f07      	.short	0x1f07
    3c6a:	1f          	.byte	0x1f
    3c6b:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    3c6c:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
    3c70:	17c1      	asrs	r1, r0, #31
    3c72:	e004      	b.n	3c7e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
    3c74:	3407      	adds	r4, #7
    3c76:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    3c7a:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
    3c7e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    3c82:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    3c86:	f013 0603 	ands.w	r6, r3, #3
    3c8a:	d054      	beq.n	3d36 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x29e>
			OUTS(sp, fp);
    3c8c:	9802      	ldr	r0, [sp, #8]
    3c8e:	463b      	mov	r3, r7
    3c90:	4652      	mov	r2, sl
    3c92:	4659      	mov	r1, fp
    3c94:	f012 fc3f 	bl	16516 <outs>
    3c98:	2800      	cmp	r0, #0
    3c9a:	f2c0 8143 	blt.w	3f24 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x48c>
    3c9e:	4405      	add	r5, r0
			continue;
    3ca0:	46ba      	mov	sl, r7
    3ca2:	e5db      	b.n	385c <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    3ca4:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
    3ca8:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    3caa:	ea4f 71e0 	mov.w	r1, r0, asr #31
    3cae:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    3cb2:	d105      	bne.n	3cc0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x228>
				value->uint = (unsigned char)value->uint;
    3cb4:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    3cb8:	930a      	str	r3, [sp, #40]	; 0x28
    3cba:	2300      	movs	r3, #0
    3cbc:	930b      	str	r3, [sp, #44]	; 0x2c
    3cbe:	e7e0      	b.n	3c82 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1ea>
			} else if (length_mod == LENGTH_H) {
    3cc0:	2a02      	cmp	r2, #2
    3cc2:	d1de      	bne.n	3c82 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1ea>
				value->sint = (short)value->sint;
    3cc4:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
    3cc8:	e7d2      	b.n	3c70 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1d8>
		} else if (specifier_cat == SPECIFIER_UINT) {
    3cca:	2b02      	cmp	r3, #2
    3ccc:	d123      	bne.n	3d16 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x27e>
			switch (length_mod) {
    3cce:	1ed3      	subs	r3, r2, #3
    3cd0:	2b04      	cmp	r3, #4
    3cd2:	d813      	bhi.n	3cfc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x264>
    3cd4:	e8df f003 	tbb	[pc, r3]
    3cd8:	120a0a03 	.word	0x120a0a03
    3cdc:	12          	.byte	0x12
    3cdd:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    3cde:	6820      	ldr	r0, [r4, #0]
    3ce0:	900a      	str	r0, [sp, #40]	; 0x28
    3ce2:	2100      	movs	r1, #0
    3ce4:	1d23      	adds	r3, r4, #4
    3ce6:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    3ce8:	461c      	mov	r4, r3
    3cea:	e7ca      	b.n	3c82 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1ea>
					(uint_value_type)va_arg(ap,
    3cec:	3407      	adds	r4, #7
    3cee:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
    3cf2:	e8f3 0102 	ldrd	r0, r1, [r3], #8
    3cf6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
    3cfa:	e7f5      	b.n	3ce8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x250>
					(uint_value_type)va_arg(ap, size_t);
    3cfc:	f854 3b04 	ldr.w	r3, [r4], #4
    3d00:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    3d02:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
    3d04:	f04f 0300 	mov.w	r3, #0
    3d08:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    3d0a:	d0d3      	beq.n	3cb4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x21c>
			} else if (length_mod == LENGTH_H) {
    3d0c:	2a02      	cmp	r2, #2
    3d0e:	d1b8      	bne.n	3c82 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1ea>
				value->uint = (unsigned short)value->uint;
    3d10:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    3d14:	e7d0      	b.n	3cb8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x220>
		} else if (specifier_cat == SPECIFIER_FP) {
    3d16:	2b04      	cmp	r3, #4
    3d18:	d107      	bne.n	3d2a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x292>
			if (length_mod == LENGTH_UPPER_L) {
    3d1a:	3407      	adds	r4, #7
    3d1c:	f024 0407 	bic.w	r4, r4, #7
    3d20:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
    3d24:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    3d28:	e7ab      	b.n	3c82 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1ea>
		} else if (specifier_cat == SPECIFIER_PTR) {
    3d2a:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    3d2c:	bf04      	itt	eq
    3d2e:	f854 3b04 	ldreq.w	r3, [r4], #4
    3d32:	930a      	streq	r3, [sp, #40]	; 0x28
    3d34:	e7a5      	b.n	3c82 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1ea>
		switch (conv->specifier) {
    3d36:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    3d3a:	2878      	cmp	r0, #120	; 0x78
    3d3c:	d8b0      	bhi.n	3ca0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x208>
    3d3e:	2862      	cmp	r0, #98	; 0x62
    3d40:	d822      	bhi.n	3d88 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2f0>
    3d42:	2825      	cmp	r0, #37	; 0x25
    3d44:	f43f ad93 	beq.w	386e <cbvprintf+0x22>
    3d48:	2858      	cmp	r0, #88	; 0x58
    3d4a:	d1a9      	bne.n	3ca0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x208>
			bps = encode_uint(value->uint, conv, buf, bpe);
    3d4c:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    3d50:	9300      	str	r3, [sp, #0]
    3d52:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    3d56:	ab04      	add	r3, sp, #16
    3d58:	aa0c      	add	r2, sp, #48	; 0x30
    3d5a:	f012 fb91 	bl	16480 <encode_uint>
    3d5e:	4682      	mov	sl, r0
			if (precision >= 0) {
    3d60:	f1b8 0f00 	cmp.w	r8, #0
    3d64:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    3d68:	db0c      	blt.n	3d84 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2ec>
				conv->flag_zero = false;
    3d6a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    3d6e:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    3d72:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    3d76:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    3d78:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    3d7c:	d902      	bls.n	3d84 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2ec>
					conv->pad0_value = precision - (int)len;
    3d7e:	eba8 0303 	sub.w	r3, r8, r3
    3d82:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    3d84:	4680      	mov	r8, r0
    3d86:	e03d      	b.n	3e04 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x36c>
    3d88:	3863      	subs	r0, #99	; 0x63
    3d8a:	2815      	cmp	r0, #21
    3d8c:	d888      	bhi.n	3ca0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x208>
    3d8e:	a101      	add	r1, pc, #4	; (adr r1, 3d94 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2fc>)
    3d90:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
    3d94:	00003e15 	.word	0x00003e15
    3d98:	00003e79 	.word	0x00003e79
    3d9c:	00003ca1 	.word	0x00003ca1
    3da0:	00003ca1 	.word	0x00003ca1
    3da4:	00003ca1 	.word	0x00003ca1
    3da8:	00003ca1 	.word	0x00003ca1
    3dac:	00003e79 	.word	0x00003e79
    3db0:	00003ca1 	.word	0x00003ca1
    3db4:	00003ca1 	.word	0x00003ca1
    3db8:	00003ca1 	.word	0x00003ca1
    3dbc:	00003ca1 	.word	0x00003ca1
    3dc0:	00003ed7 	.word	0x00003ed7
    3dc4:	00003ea5 	.word	0x00003ea5
    3dc8:	00003ea9 	.word	0x00003ea9
    3dcc:	00003ca1 	.word	0x00003ca1
    3dd0:	00003ca1 	.word	0x00003ca1
    3dd4:	00003ded 	.word	0x00003ded
    3dd8:	00003ca1 	.word	0x00003ca1
    3ddc:	00003ea5 	.word	0x00003ea5
    3de0:	00003ca1 	.word	0x00003ca1
    3de4:	00003ca1 	.word	0x00003ca1
    3de8:	00003ea5 	.word	0x00003ea5
			if (precision >= 0) {
    3dec:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    3df0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    3df4:	db0a      	blt.n	3e0c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x374>
				len = strnlen(bps, precision);
    3df6:	4641      	mov	r1, r8
    3df8:	4650      	mov	r0, sl
    3dfa:	f012 fe34 	bl	16a66 <strnlen>
			bpe = bps + len;
    3dfe:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
    3e02:	2600      	movs	r6, #0
		if (bps == NULL) {
    3e04:	f1ba 0f00 	cmp.w	sl, #0
    3e08:	d10c      	bne.n	3e24 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x38c>
    3e0a:	e749      	b.n	3ca0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x208>
				len = strlen(bps);
    3e0c:	4650      	mov	r0, sl
    3e0e:	f012 fe23 	bl	16a58 <strlen>
    3e12:	e7f4      	b.n	3dfe <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x366>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    3e14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3e16:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    3e1a:	2600      	movs	r6, #0
			bpe = buf + 1;
    3e1c:	f10d 0811 	add.w	r8, sp, #17
			bps = buf;
    3e20:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
    3e24:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    3e28:	b106      	cbz	r6, 3e2c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x394>
			nj_len += 1U;
    3e2a:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    3e2c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    3e30:	06d0      	lsls	r0, r2, #27
    3e32:	d56b      	bpl.n	3f0c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x474>
			nj_len += 2U;
    3e34:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    3e36:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    3e38:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    3e3a:	bf48      	it	mi
    3e3c:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    3e3e:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    3e40:	bf48      	it	mi
    3e42:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    3e44:	f1b9 0f00 	cmp.w	r9, #0
    3e48:	dd79      	ble.n	3f3e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4a6>
			if (!conv->flag_dash) {
    3e4a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    3e4e:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    3e52:	f3c2 0380 	ubfx	r3, r2, #2, #1
    3e56:	9303      	str	r3, [sp, #12]
    3e58:	0753      	lsls	r3, r2, #29
    3e5a:	d470      	bmi.n	3f3e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4a6>
				if (conv->flag_zero) {
    3e5c:	0650      	lsls	r0, r2, #25
    3e5e:	d564      	bpl.n	3f2a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x492>
					if (sign != 0) {
    3e60:	b146      	cbz	r6, 3e74 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3dc>
						OUTC(sign);
    3e62:	9b02      	ldr	r3, [sp, #8]
    3e64:	4659      	mov	r1, fp
    3e66:	4630      	mov	r0, r6
    3e68:	4798      	blx	r3
    3e6a:	2800      	cmp	r0, #0
    3e6c:	db5a      	blt.n	3f24 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x48c>
						sign = 0;
    3e6e:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    3e70:	3501      	adds	r5, #1
						sign = 0;
    3e72:	461e      	mov	r6, r3
					pad = '0';
    3e74:	2330      	movs	r3, #48	; 0x30
    3e76:	e059      	b.n	3f2c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x494>
			if (conv->flag_plus) {
    3e78:	071e      	lsls	r6, r3, #28
    3e7a:	d411      	bmi.n	3ea0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x408>
				sign = ' ';
    3e7c:	f013 0610 	ands.w	r6, r3, #16
    3e80:	bf18      	it	ne
    3e82:	2620      	movne	r6, #32
			sint = value->sint;
    3e84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    3e88:	2a00      	cmp	r2, #0
    3e8a:	f173 0100 	sbcs.w	r1, r3, #0
    3e8e:	f6bf af5d 	bge.w	3d4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2b4>
				value->uint = (uint_value_type)-sint;
    3e92:	4252      	negs	r2, r2
    3e94:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    3e98:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    3e9c:	262d      	movs	r6, #45	; 0x2d
    3e9e:	e755      	b.n	3d4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2b4>
				sign = '+';
    3ea0:	262b      	movs	r6, #43	; 0x2b
    3ea2:	e7ef      	b.n	3e84 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3ec>
		switch (conv->specifier) {
    3ea4:	2600      	movs	r6, #0
    3ea6:	e751      	b.n	3d4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2b4>
			if (value->ptr != NULL) {
    3ea8:	980a      	ldr	r0, [sp, #40]	; 0x28
    3eaa:	b348      	cbz	r0, 3f00 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x468>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    3eac:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    3eb0:	9300      	str	r3, [sp, #0]
    3eb2:	aa0c      	add	r2, sp, #48	; 0x30
    3eb4:	ab04      	add	r3, sp, #16
    3eb6:	2100      	movs	r1, #0
    3eb8:	f012 fae2 	bl	16480 <encode_uint>
				conv->altform_0c = true;
    3ebc:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    3ec0:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    3ec4:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    3ec8:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    3ecc:	4682      	mov	sl, r0
				conv->altform_0c = true;
    3ece:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    3ed2:	2600      	movs	r6, #0
				goto prec_int_pad0;
    3ed4:	e744      	b.n	3d60 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2c8>
				store_count(conv, value->ptr, count);
    3ed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    3ed8:	2a07      	cmp	r2, #7
    3eda:	f63f aee1 	bhi.w	3ca0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x208>
    3ede:	e8df f002 	tbb	[pc, r2]
    3ee2:	040d      	.short	0x040d
    3ee4:	08080d06 	.word	0x08080d06
    3ee8:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
    3eea:	701d      	strb	r5, [r3, #0]
		break;
    3eec:	e6d8      	b.n	3ca0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x208>
		*(short *)dp = (short)count;
    3eee:	801d      	strh	r5, [r3, #0]
		break;
    3ef0:	e6d6      	b.n	3ca0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x208>
		*(intmax_t *)dp = (intmax_t)count;
    3ef2:	4628      	mov	r0, r5
    3ef4:	17e9      	asrs	r1, r5, #31
    3ef6:	e9c3 0100 	strd	r0, r1, [r3]
		break;
    3efa:	e6d1      	b.n	3ca0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x208>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    3efc:	601d      	str	r5, [r3, #0]
		break;
    3efe:	e6cf      	b.n	3ca0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x208>
			bpe = bps + 5;
    3f00:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 3fc8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x530>
    3f04:	4606      	mov	r6, r0
			bps = "(nil)";
    3f06:	f1a8 0a05 	sub.w	sl, r8, #5
    3f0a:	e78b      	b.n	3e24 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x38c>
		} else if (conv->altform_0) {
    3f0c:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    3f0e:	bf48      	it	mi
    3f10:	3301      	addmi	r3, #1
    3f12:	e790      	b.n	3e36 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x39e>
					OUTC(pad);
    3f14:	4618      	mov	r0, r3
    3f16:	9303      	str	r3, [sp, #12]
    3f18:	4659      	mov	r1, fp
    3f1a:	9b02      	ldr	r3, [sp, #8]
    3f1c:	4798      	blx	r3
    3f1e:	2800      	cmp	r0, #0
    3f20:	9b03      	ldr	r3, [sp, #12]
    3f22:	da04      	bge.n	3f2e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x496>
#undef OUTS
#undef OUTC
}
    3f24:	b011      	add	sp, #68	; 0x44
    3f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    3f2a:	2320      	movs	r3, #32
    3f2c:	444d      	add	r5, r9
    3f2e:	464a      	mov	r2, r9
				while (width-- > 0) {
    3f30:	2a00      	cmp	r2, #0
    3f32:	eba5 0109 	sub.w	r1, r5, r9
    3f36:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    3f3a:	dceb      	bgt.n	3f14 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x47c>
    3f3c:	460d      	mov	r5, r1
		if (sign != 0) {
    3f3e:	b136      	cbz	r6, 3f4e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4b6>
			OUTC(sign);
    3f40:	9b02      	ldr	r3, [sp, #8]
    3f42:	4659      	mov	r1, fp
    3f44:	4630      	mov	r0, r6
    3f46:	4798      	blx	r3
    3f48:	2800      	cmp	r0, #0
    3f4a:	dbeb      	blt.n	3f24 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x48c>
    3f4c:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    3f4e:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    3f52:	06d9      	lsls	r1, r3, #27
    3f54:	d401      	bmi.n	3f5a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4c2>
    3f56:	071a      	lsls	r2, r3, #28
    3f58:	d506      	bpl.n	3f68 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4d0>
				OUTC('0');
    3f5a:	9b02      	ldr	r3, [sp, #8]
    3f5c:	4659      	mov	r1, fp
    3f5e:	2030      	movs	r0, #48	; 0x30
    3f60:	4798      	blx	r3
    3f62:	2800      	cmp	r0, #0
    3f64:	dbde      	blt.n	3f24 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x48c>
    3f66:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    3f68:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    3f6c:	06db      	lsls	r3, r3, #27
    3f6e:	d507      	bpl.n	3f80 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4e8>
				OUTC(conv->specifier);
    3f70:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    3f74:	9b02      	ldr	r3, [sp, #8]
    3f76:	4659      	mov	r1, fp
    3f78:	4798      	blx	r3
    3f7a:	2800      	cmp	r0, #0
    3f7c:	dbd2      	blt.n	3f24 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x48c>
    3f7e:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    3f80:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    3f82:	442e      	add	r6, r5
    3f84:	1b73      	subs	r3, r6, r5
    3f86:	2b00      	cmp	r3, #0
    3f88:	dc16      	bgt.n	3fb8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x520>
			OUTS(bps, bpe);
    3f8a:	9802      	ldr	r0, [sp, #8]
    3f8c:	4643      	mov	r3, r8
    3f8e:	4652      	mov	r2, sl
    3f90:	4659      	mov	r1, fp
    3f92:	f012 fac0 	bl	16516 <outs>
    3f96:	2800      	cmp	r0, #0
    3f98:	dbc4      	blt.n	3f24 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x48c>
    3f9a:	4405      	add	r5, r0
		while (width > 0) {
    3f9c:	44a9      	add	r9, r5
    3f9e:	eba9 0305 	sub.w	r3, r9, r5
    3fa2:	2b00      	cmp	r3, #0
    3fa4:	f77f ae7c 	ble.w	3ca0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x208>
			OUTC(' ');
    3fa8:	9b02      	ldr	r3, [sp, #8]
    3faa:	4659      	mov	r1, fp
    3fac:	2020      	movs	r0, #32
    3fae:	4798      	blx	r3
    3fb0:	2800      	cmp	r0, #0
    3fb2:	dbb7      	blt.n	3f24 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x48c>
    3fb4:	3501      	adds	r5, #1
			--width;
    3fb6:	e7f2      	b.n	3f9e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x506>
				OUTC('0');
    3fb8:	9b02      	ldr	r3, [sp, #8]
    3fba:	4659      	mov	r1, fp
    3fbc:	2030      	movs	r0, #48	; 0x30
    3fbe:	4798      	blx	r3
    3fc0:	2800      	cmp	r0, #0
    3fc2:	dbaf      	blt.n	3f24 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x48c>
    3fc4:	3501      	adds	r5, #1
    3fc6:	e7dd      	b.n	3f84 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4ec>
    3fc8:	0001a6c4 	.word	0x0001a6c4

00003fcc <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    3fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3fce:	4605      	mov	r5, r0
    3fd0:	f04f 0320 	mov.w	r3, #32
    3fd4:	f3ef 8611 	mrs	r6, BASEPRI
    3fd8:	f383 8811 	msr	BASEPRI, r3
    3fdc:	f3bf 8f6f 	isb	sy
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3fe0:	4b0b      	ldr	r3, [pc, #44]	; (4010 <pm_state_notify+0x44>)
    3fe2:	681c      	ldr	r4, [r3, #0]
    3fe4:	2c00      	cmp	r4, #0
    3fe6:	bf38      	it	cc
    3fe8:	2400      	movcc	r4, #0
    3fea:	b15c      	cbz	r4, 4004 <pm_state_notify+0x38>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
    3fec:	4f09      	ldr	r7, [pc, #36]	; (4014 <pm_state_notify+0x48>)
			callback = notifier->state_exit;
    3fee:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    3ff2:	2d00      	cmp	r5, #0
    3ff4:	bf08      	it	eq
    3ff6:	4613      	moveq	r3, r2
		if (callback) {
    3ff8:	b10b      	cbz	r3, 3ffe <pm_state_notify+0x32>
			callback(z_power_state.state);
    3ffa:	7838      	ldrb	r0, [r7, #0]
    3ffc:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    3ffe:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    4000:	2c00      	cmp	r4, #0
    4002:	d1f4      	bne.n	3fee <pm_state_notify+0x22>
	__asm__ volatile(
    4004:	f386 8811 	msr	BASEPRI, r6
    4008:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    400c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    400e:	bf00      	nop
    4010:	20000f7c 	.word	0x20000f7c
    4014:	20000f84 	.word	0x20000f84

00004018 <pm_system_resume>:
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
    4018:	4b08      	ldr	r3, [pc, #32]	; (403c <pm_system_resume+0x24>)
{
    401a:	b510      	push	{r4, lr}
	if (!post_ops_done) {
    401c:	681c      	ldr	r4, [r3, #0]
    401e:	b95c      	cbnz	r4, 4038 <pm_system_resume+0x20>
		post_ops_done = 1;
    4020:	2201      	movs	r2, #1
    4022:	601a      	str	r2, [r3, #0]
		pm_power_state_exit_post_ops(z_power_state);
    4024:	4b06      	ldr	r3, [pc, #24]	; (4040 <pm_system_resume+0x28>)
    4026:	e893 0003 	ldmia.w	r3, {r0, r1}
    402a:	f012 fda7 	bl	16b7c <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    402e:	4620      	mov	r0, r4
	}
}
    4030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pm_state_notify(false);
    4034:	f7ff bfca 	b.w	3fcc <pm_state_notify>
}
    4038:	bd10      	pop	{r4, pc}
    403a:	bf00      	nop
    403c:	20000148 	.word	0x20000148
    4040:	20000f84 	.word	0x20000f84

00004044 <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
    4044:	b537      	push	{r0, r1, r2, r4, r5, lr}
	z_power_state = pm_policy_next_state(ticks);
    4046:	466d      	mov	r5, sp
{
    4048:	4601      	mov	r1, r0
	z_power_state = pm_policy_next_state(ticks);
    404a:	4628      	mov	r0, r5
    404c:	f012 fa7a 	bl	16544 <pm_policy_next_state>
    4050:	e895 0003 	ldmia.w	r5, {r0, r1}
    4054:	4c0b      	ldr	r4, [pc, #44]	; (4084 <pm_system_suspend+0x40>)
    4056:	e884 0003 	stmia.w	r4, {r0, r1}
	if (z_power_state.state == PM_STATE_ACTIVE) {
    405a:	7820      	ldrb	r0, [r4, #0]
    405c:	b180      	cbz	r0, 4080 <pm_system_suspend+0x3c>
		LOG_DBG("No PM operations done.");
		return z_power_state.state;
	}
	post_ops_done = 0;
    405e:	4b0a      	ldr	r3, [pc, #40]	; (4088 <pm_system_suspend+0x44>)
    4060:	2200      	movs	r2, #0
    4062:	601a      	str	r2, [r3, #0]
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    4064:	f010 fe7a 	bl	14d5c <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
    4068:	2001      	movs	r0, #1
    406a:	f7ff ffaf 	bl	3fcc <pm_state_notify>
	pm_power_state_set(z_power_state);
    406e:	e894 0003 	ldmia.w	r4, {r0, r1}
    4072:	f012 fd70 	bl	16b56 <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
    4076:	f7ff ffcf 	bl	4018 <pm_system_resume>
	k_sched_unlock();
    407a:	f010 ff5f 	bl	14f3c <k_sched_unlock>

	return z_power_state.state;
    407e:	7820      	ldrb	r0, [r4, #0]
}
    4080:	b003      	add	sp, #12
    4082:	bd30      	pop	{r4, r5, pc}
    4084:	20000f84 	.word	0x20000f84
    4088:	20000148 	.word	0x20000148

0000408c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    408c:	b510      	push	{r4, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    408e:	4807      	ldr	r0, [pc, #28]	; (40ac <uart_console_init+0x20>)
	__stdout_hook_install(console_out);
    4090:	4c07      	ldr	r4, [pc, #28]	; (40b0 <uart_console_init+0x24>)
    4092:	f010 fc5b 	bl	1494c <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    4096:	4b07      	ldr	r3, [pc, #28]	; (40b4 <uart_console_init+0x28>)
    4098:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    409a:	4620      	mov	r0, r4
    409c:	f000 fe88 	bl	4db0 <__stdout_hook_install>
	__printk_hook_install(console_out);
    40a0:	4620      	mov	r0, r4
    40a2:	f7ff fac5 	bl	3630 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
    40a6:	2000      	movs	r0, #0
    40a8:	bd10      	pop	{r4, pc}
    40aa:	bf00      	nop
    40ac:	0001a6c5 	.word	0x0001a6c5
    40b0:	000040b9 	.word	0x000040b9
    40b4:	20000f8c 	.word	0x20000f8c

000040b8 <console_out>:
	if ('\n' == c) {
    40b8:	280a      	cmp	r0, #10
{
    40ba:	b538      	push	{r3, r4, r5, lr}
    40bc:	4d07      	ldr	r5, [pc, #28]	; (40dc <console_out+0x24>)
    40be:	4604      	mov	r4, r0
	if ('\n' == c) {
    40c0:	d104      	bne.n	40cc <console_out+0x14>
    40c2:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    40c4:	6883      	ldr	r3, [r0, #8]
    40c6:	210d      	movs	r1, #13
    40c8:	685b      	ldr	r3, [r3, #4]
    40ca:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    40cc:	6828      	ldr	r0, [r5, #0]
    40ce:	6883      	ldr	r3, [r0, #8]
    40d0:	b2e1      	uxtb	r1, r4
    40d2:	685b      	ldr	r3, [r3, #4]
    40d4:	4798      	blx	r3
}
    40d6:	4620      	mov	r0, r4
    40d8:	bd38      	pop	{r3, r4, r5, pc}
    40da:	bf00      	nop
    40dc:	20000f8c 	.word	0x20000f8c

000040e0 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    40e0:	4a0e      	ldr	r2, [pc, #56]	; (411c <onoff_stop+0x3c>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    40e2:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    40e4:	1a84      	subs	r4, r0, r2
    40e6:	10a3      	asrs	r3, r4, #2
    40e8:	4c0d      	ldr	r4, [pc, #52]	; (4120 <onoff_stop+0x40>)
    40ea:	435c      	muls	r4, r3
{
    40ec:	4605      	mov	r5, r0
    40ee:	b2e4      	uxtb	r4, r4
	err = set_off_state(&subdata->flags, ctx);
    40f0:	200c      	movs	r0, #12
    40f2:	fb00 2004 	mla	r0, r0, r4, r2
{
    40f6:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
    40f8:	2140      	movs	r1, #64	; 0x40
    40fa:	4408      	add	r0, r1
    40fc:	f012 fa2f 	bl	1655e <set_off_state>
	if (err < 0) {
    4100:	1e01      	subs	r1, r0, #0
    4102:	db05      	blt.n	4110 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
    4104:	4b07      	ldr	r3, [pc, #28]	; (4124 <onoff_stop+0x44>)
    4106:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    410a:	6863      	ldr	r3, [r4, #4]
    410c:	4798      	blx	r3
	return 0;
    410e:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
    4110:	4628      	mov	r0, r5
    4112:	4633      	mov	r3, r6
}
    4114:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    4118:	4718      	bx	r3
    411a:	bf00      	nop
    411c:	20000fa4 	.word	0x20000fa4
    4120:	b6db6db7 	.word	0xb6db6db7
    4124:	0001969c 	.word	0x0001969c

00004128 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    4128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    412c:	4e10      	ldr	r6, [pc, #64]	; (4170 <onoff_start+0x48>)
    412e:	1b84      	subs	r4, r0, r6
    4130:	10a3      	asrs	r3, r4, #2
    4132:	4c10      	ldr	r4, [pc, #64]	; (4174 <onoff_start+0x4c>)
    4134:	435c      	muls	r4, r3
    4136:	b2e4      	uxtb	r4, r4
	err = set_starting_state(&subdata->flags, ctx);
    4138:	250c      	movs	r5, #12
    413a:	4365      	muls	r5, r4
{
    413c:	4680      	mov	r8, r0
	err = set_starting_state(&subdata->flags, ctx);
    413e:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
    4142:	460f      	mov	r7, r1
	err = set_starting_state(&subdata->flags, ctx);
    4144:	4430      	add	r0, r6
    4146:	2140      	movs	r1, #64	; 0x40
    4148:	f012 fa22 	bl	16590 <set_starting_state>
	if (err < 0) {
    414c:	1e01      	subs	r1, r0, #0
    414e:	db09      	blt.n	4164 <onoff_start+0x3c>
	subdata->cb = cb;
    4150:	4a09      	ldr	r2, [pc, #36]	; (4178 <onoff_start+0x50>)
    4152:	1973      	adds	r3, r6, r5
	subdata->user_data = user_data;
    4154:	e9c3 270e 	strd	r2, r7, [r3, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    4158:	4b08      	ldr	r3, [pc, #32]	; (417c <onoff_start+0x54>)
    415a:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    415e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    4162:	4718      	bx	r3
		notify(mgr, err);
    4164:	4640      	mov	r0, r8
    4166:	463b      	mov	r3, r7
}
    4168:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    416c:	4718      	bx	r3
    416e:	bf00      	nop
    4170:	20000fa4 	.word	0x20000fa4
    4174:	b6db6db7 	.word	0xb6db6db7
    4178:	000165f3 	.word	0x000165f3
    417c:	0001969c 	.word	0x0001969c

00004180 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4180:	2200      	movs	r2, #0
{
    4182:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4184:	2101      	movs	r1, #1
{
    4186:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4188:	4610      	mov	r0, r2
    418a:	f000 fba3 	bl	48d4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    418e:	2000      	movs	r0, #0
    4190:	f000 fb6e 	bl	4870 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    4194:	480f      	ldr	r0, [pc, #60]	; (41d4 <clk_init+0x54>)
    4196:	f010 faa3 	bl	146e0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    419a:	4b0f      	ldr	r3, [pc, #60]	; (41d8 <clk_init+0x58>)
    419c:	4298      	cmp	r0, r3
    419e:	d115      	bne.n	41cc <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    41a0:	f014 fc09 	bl	189b6 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    41a4:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    41a6:	490d      	ldr	r1, [pc, #52]	; (41dc <clk_init+0x5c>)
    41a8:	4630      	mov	r0, r6
    41aa:	f011 fe32 	bl	15e12 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    41ae:	2800      	cmp	r0, #0
    41b0:	db0b      	blt.n	41ca <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    41b2:	2501      	movs	r5, #1
    41b4:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
    41b6:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    41b8:	4908      	ldr	r1, [pc, #32]	; (41dc <clk_init+0x5c>)
    41ba:	f104 001c 	add.w	r0, r4, #28
    41be:	f011 fe28 	bl	15e12 <onoff_manager_init>
		if (err < 0) {
    41c2:	2800      	cmp	r0, #0
    41c4:	db01      	blt.n	41ca <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    41c6:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    41c8:	2000      	movs	r0, #0
}
    41ca:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    41cc:	f06f 0004 	mvn.w	r0, #4
    41d0:	e7fb      	b.n	41ca <clk_init+0x4a>
    41d2:	bf00      	nop
    41d4:	00004215 	.word	0x00004215
    41d8:	0bad0000 	.word	0x0bad0000
    41dc:	000196ac 	.word	0x000196ac

000041e0 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    41e0:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    41e2:	230c      	movs	r3, #12
    41e4:	4809      	ldr	r0, [pc, #36]	; (420c <clkstarted_handle.constprop.0+0x2c>)
    41e6:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    41e8:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    41ea:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    41ec:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    41f0:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    41f2:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    41f4:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    41f6:	4418      	add	r0, r3
    41f8:	f012 f9e8 	bl	165cc <set_on_state>
	if (callback) {
    41fc:	b12d      	cbz	r5, 420a <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    41fe:	4632      	mov	r2, r6
    4200:	462b      	mov	r3, r5
    4202:	4803      	ldr	r0, [pc, #12]	; (4210 <clkstarted_handle.constprop.0+0x30>)
}
    4204:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    4208:	4718      	bx	r3
}
    420a:	bd70      	pop	{r4, r5, r6, pc}
    420c:	20000fa4 	.word	0x20000fa4
    4210:	20000574 	.word	0x20000574

00004214 <clock_event_handler>:
	switch (event) {
    4214:	b110      	cbz	r0, 421c <clock_event_handler+0x8>
    4216:	2801      	cmp	r0, #1
    4218:	d004      	beq.n	4224 <clock_event_handler+0x10>
    421a:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    421c:	4b03      	ldr	r3, [pc, #12]	; (422c <clock_event_handler+0x18>)
    421e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4220:	075b      	lsls	r3, r3, #29
    4222:	d101      	bne.n	4228 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    4224:	f7ff bfdc 	b.w	41e0 <clkstarted_handle.constprop.0>
}
    4228:	4770      	bx	lr
    422a:	bf00      	nop
    422c:	20000fa4 	.word	0x20000fa4

00004230 <generic_hfclk_start>:
{
    4230:	b508      	push	{r3, lr}
	__asm__ volatile(
    4232:	f04f 0320 	mov.w	r3, #32
    4236:	f3ef 8111 	mrs	r1, BASEPRI
    423a:	f383 8811 	msr	BASEPRI, r3
    423e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    4242:	4a12      	ldr	r2, [pc, #72]	; (428c <generic_hfclk_start+0x5c>)
    4244:	6813      	ldr	r3, [r2, #0]
    4246:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    424a:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    424e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    4250:	d00c      	beq.n	426c <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4252:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4256:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    425a:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    425e:	f013 0301 	ands.w	r3, r3, #1
    4262:	d003      	beq.n	426c <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    4264:	480a      	ldr	r0, [pc, #40]	; (4290 <generic_hfclk_start+0x60>)
    4266:	f012 f9b1 	bl	165cc <set_on_state>
			already_started = true;
    426a:	2301      	movs	r3, #1
	__asm__ volatile(
    426c:	f381 8811 	msr	BASEPRI, r1
    4270:	f3bf 8f6f 	isb	sy
	if (already_started) {
    4274:	b123      	cbz	r3, 4280 <generic_hfclk_start+0x50>
}
    4276:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    427a:	2000      	movs	r0, #0
    427c:	f7ff bfb0 	b.w	41e0 <clkstarted_handle.constprop.0>
}
    4280:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    4284:	2001      	movs	r0, #1
    4286:	f010 ba3b 	b.w	14700 <nrfx_clock_start>
    428a:	bf00      	nop
    428c:	20000ff4 	.word	0x20000ff4
    4290:	20000fe4 	.word	0x20000fe4

00004294 <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4294:	4b09      	ldr	r3, [pc, #36]	; (42bc <generic_hfclk_stop+0x28>)
    4296:	f3bf 8f5b 	dmb	ish
    429a:	e853 2f00 	ldrex	r2, [r3]
    429e:	f022 0102 	bic.w	r1, r2, #2
    42a2:	e843 1000 	strex	r0, r1, [r3]
    42a6:	2800      	cmp	r0, #0
    42a8:	d1f7      	bne.n	429a <generic_hfclk_stop+0x6>
    42aa:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    42ae:	07d3      	lsls	r3, r2, #31
    42b0:	d402      	bmi.n	42b8 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    42b2:	2001      	movs	r0, #1
    42b4:	f010 ba56 	b.w	14764 <nrfx_clock_stop>
}
    42b8:	4770      	bx	lr
    42ba:	bf00      	nop
    42bc:	20000ff4 	.word	0x20000ff4

000042c0 <api_blocking_start>:
{
    42c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    42c2:	2200      	movs	r2, #0
    42c4:	2301      	movs	r3, #1
    42c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    42ca:	ab04      	add	r3, sp, #16
    42cc:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    42d0:	4a09      	ldr	r2, [pc, #36]	; (42f8 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    42d2:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    42d6:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    42d8:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    42dc:	f012 f9af 	bl	1663e <api_start>
	if (err < 0) {
    42e0:	2800      	cmp	r0, #0
    42e2:	db05      	blt.n	42f0 <api_blocking_start+0x30>
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    42e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    42e8:	2300      	movs	r3, #0
    42ea:	4668      	mov	r0, sp
    42ec:	f011 f838 	bl	15360 <z_impl_k_sem_take>
}
    42f0:	b007      	add	sp, #28
    42f2:	f85d fb04 	ldr.w	pc, [sp], #4
    42f6:	bf00      	nop
    42f8:	00016611 	.word	0x00016611

000042fc <z_nrf_clock_control_get_onoff>:
}
    42fc:	4a02      	ldr	r2, [pc, #8]	; (4308 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    42fe:	b2c3      	uxtb	r3, r0
}
    4300:	201c      	movs	r0, #28
    4302:	fb03 2000 	mla	r0, r3, r0, r2
    4306:	4770      	bx	lr
    4308:	20000fa4 	.word	0x20000fa4

0000430c <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    430c:	4b09      	ldr	r3, [pc, #36]	; (4334 <z_nrf_clock_bt_ctlr_hf_request+0x28>)
    430e:	f3bf 8f5b 	dmb	ish
    4312:	e853 2f00 	ldrex	r2, [r3]
    4316:	f042 0101 	orr.w	r1, r2, #1
    431a:	e843 1000 	strex	r0, r1, [r3]
    431e:	2800      	cmp	r0, #0
    4320:	d1f7      	bne.n	4312 <z_nrf_clock_bt_ctlr_hf_request+0x6>
    4322:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
    4326:	0793      	lsls	r3, r2, #30
    4328:	d402      	bmi.n	4330 <z_nrf_clock_bt_ctlr_hf_request+0x24>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    432a:	2001      	movs	r0, #1
    432c:	f010 b9e8 	b.w	14700 <nrfx_clock_start>
}
    4330:	4770      	bx	lr
    4332:	bf00      	nop
    4334:	20000ff4 	.word	0x20000ff4

00004338 <z_nrf_clock_bt_ctlr_hf_release>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4338:	4b09      	ldr	r3, [pc, #36]	; (4360 <z_nrf_clock_bt_ctlr_hf_release+0x28>)
    433a:	f3bf 8f5b 	dmb	ish
    433e:	e853 2f00 	ldrex	r2, [r3]
    4342:	f022 0101 	bic.w	r1, r2, #1
    4346:	e843 1000 	strex	r0, r1, [r3]
    434a:	2800      	cmp	r0, #0
    434c:	d1f7      	bne.n	433e <z_nrf_clock_bt_ctlr_hf_release+0x6>
    434e:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_BT) & HF_USER_GENERIC) {
    4352:	0793      	lsls	r3, r2, #30
    4354:	d402      	bmi.n	435c <z_nrf_clock_bt_ctlr_hf_release+0x24>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    4356:	2001      	movs	r0, #1
    4358:	f010 ba04 	b.w	14764 <nrfx_clock_stop>
}
    435c:	4770      	bx	lr
    435e:	bf00      	nop
    4360:	20000ff4 	.word	0x20000ff4

00004364 <z_nrf_clock_control_lf_on>:
{
    4364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4368:	493a      	ldr	r1, [pc, #232]	; (4454 <z_nrf_clock_control_lf_on+0xf0>)
    436a:	f3bf 8f5b 	dmb	ish
    436e:	4606      	mov	r6, r0
    4370:	2201      	movs	r2, #1
    4372:	e851 3f00 	ldrex	r3, [r1]
    4376:	e841 2000 	strex	r0, r2, [r1]
    437a:	2800      	cmp	r0, #0
    437c:	d1f9      	bne.n	4372 <z_nrf_clock_control_lf_on+0xe>
    437e:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    4382:	b933      	cbnz	r3, 4392 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    4384:	4934      	ldr	r1, [pc, #208]	; (4458 <z_nrf_clock_control_lf_on+0xf4>)
		err = onoff_request(mgr, &cli);
    4386:	4835      	ldr	r0, [pc, #212]	; (445c <z_nrf_clock_control_lf_on+0xf8>)
    4388:	604b      	str	r3, [r1, #4]
    438a:	60cb      	str	r3, [r1, #12]
    438c:	608a      	str	r2, [r1, #8]
    438e:	f011 fd53 	bl	15e38 <onoff_request>
	switch (start_mode) {
    4392:	1e73      	subs	r3, r6, #1
    4394:	2b01      	cmp	r3, #1
    4396:	d832      	bhi.n	43fe <z_nrf_clock_control_lf_on+0x9a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    4398:	2e01      	cmp	r6, #1
    439a:	d107      	bne.n	43ac <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    439c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    43a0:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    43a4:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    43a8:	2b01      	cmp	r3, #1
    43aa:	d028      	beq.n	43fe <z_nrf_clock_control_lf_on+0x9a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    43ac:	f014 fd81 	bl	18eb2 <k_is_in_isr>
    43b0:	4604      	mov	r4, r0
    43b2:	b918      	cbnz	r0, 43bc <z_nrf_clock_control_lf_on+0x58>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    43b4:	4b2a      	ldr	r3, [pc, #168]	; (4460 <z_nrf_clock_control_lf_on+0xfc>)
	int key = isr_mode ? irq_lock() : 0;
    43b6:	781b      	ldrb	r3, [r3, #0]
    43b8:	2b00      	cmp	r3, #0
    43ba:	d144      	bne.n	4446 <z_nrf_clock_control_lf_on+0xe2>
	__asm__ volatile(
    43bc:	f04f 0320 	mov.w	r3, #32
    43c0:	f3ef 8511 	mrs	r5, BASEPRI
    43c4:	f383 8811 	msr	BASEPRI, r3
    43c8:	f3bf 8f6f 	isb	sy
    43cc:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    43ce:	4f25      	ldr	r7, [pc, #148]	; (4464 <z_nrf_clock_control_lf_on+0x100>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    43d0:	f8df 8094 	ldr.w	r8, [pc, #148]	; 4468 <z_nrf_clock_control_lf_on+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    43d4:	f8df 9094 	ldr.w	r9, [pc, #148]	; 446c <z_nrf_clock_control_lf_on+0x108>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    43d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    43dc:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    43e0:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    43e4:	03d2      	lsls	r2, r2, #15
    43e6:	d50c      	bpl.n	4402 <z_nrf_clock_control_lf_on+0x9e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    43e8:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    43ec:	2b01      	cmp	r3, #1
    43ee:	d001      	beq.n	43f4 <z_nrf_clock_control_lf_on+0x90>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    43f0:	2e01      	cmp	r6, #1
    43f2:	d106      	bne.n	4402 <z_nrf_clock_control_lf_on+0x9e>
	if (isr_mode) {
    43f4:	b30c      	cbz	r4, 443a <z_nrf_clock_control_lf_on+0xd6>
	__asm__ volatile(
    43f6:	f385 8811 	msr	BASEPRI, r5
    43fa:	f3bf 8f6f 	isb	sy
}
    43fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
    4402:	b1ac      	cbz	r4, 4430 <z_nrf_clock_control_lf_on+0xcc>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    4404:	4628      	mov	r0, r5
    4406:	f000 fad3 	bl	49b0 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    440a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    440e:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    4412:	2b00      	cmp	r3, #0
    4414:	d1e0      	bne.n	43d8 <z_nrf_clock_control_lf_on+0x74>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4416:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    4418:	2900      	cmp	r1, #0
    441a:	d0dd      	beq.n	43d8 <z_nrf_clock_control_lf_on+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    441c:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    441e:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    4420:	2301      	movs	r3, #1
    4422:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    4426:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    442a:	f8c9 3000 	str.w	r3, [r9]
}
    442e:	e7d3      	b.n	43d8 <z_nrf_clock_control_lf_on+0x74>
	return z_impl_k_sleep(timeout);
    4430:	2100      	movs	r1, #0
    4432:	2021      	movs	r0, #33	; 0x21
    4434:	f010 fed2 	bl	151dc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    4438:	e7e7      	b.n	440a <z_nrf_clock_control_lf_on+0xa6>
    p_reg->INTENSET = mask;
    443a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    443e:	2202      	movs	r2, #2
    4440:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    4444:	e7db      	b.n	43fe <z_nrf_clock_control_lf_on+0x9a>
    p_reg->INTENCLR = mask;
    4446:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    444a:	2202      	movs	r2, #2
    444c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    4450:	4605      	mov	r5, r0
}
    4452:	e7bc      	b.n	43ce <z_nrf_clock_control_lf_on+0x6a>
    4454:	20000ff8 	.word	0x20000ff8
    4458:	20000f94 	.word	0x20000f94
    445c:	20000fc0 	.word	0x20000fc0
    4460:	20002258 	.word	0x20002258
    4464:	40000104 	.word	0x40000104
    4468:	e000e100 	.word	0xe000e100
    446c:	40000008 	.word	0x40000008

00004470 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(int32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    4470:	4a04      	ldr	r2, [pc, #16]	; (4484 <sys_clock_timeout_handler+0x14>)
    4472:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    4474:	1ac8      	subs	r0, r1, r3
    4476:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    447a:	4403      	add	r3, r0
    447c:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    447e:	f011 baf3 	b.w	15a68 <sys_clock_announce>
    4482:	bf00      	nop
    4484:	2000100c 	.word	0x2000100c

00004488 <set_absolute_alarm>:
{
    4488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    448c:	0086      	lsls	r6, r0, #2
    448e:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    4492:	f100 0450 	add.w	r4, r0, #80	; 0x50
    4496:	f506 3688 	add.w	r6, r6, #69632	; 0x11000
    449a:	00a4      	lsls	r4, r4, #2
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    449c:	f8df 807c 	ldr.w	r8, [pc, #124]	; 451c <set_absolute_alarm+0x94>
    return p_reg->CC[ch];
    44a0:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    44a4:	b2a4      	uxth	r4, r4
    44a6:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    44aa:	f44f 3780 	mov.w	r7, #65536	; 0x10000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    44ae:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    44b2:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    44b6:	4087      	lsls	r7, r0
    44b8:	46c1      	mov	r9, r8
     return p_reg->COUNTER;
    44ba:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    44be:	eba3 030a 	sub.w	r3, r3, sl
    44c2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    44c6:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    44ca:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    44cc:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    44d0:	d102      	bne.n	44d8 <set_absolute_alarm+0x50>
	z_impl_k_busy_wait(usec_to_wait);
    44d2:	2013      	movs	r0, #19
    44d4:	f014 fcf3 	bl	18ebe <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    44d8:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
    44dc:	1aab      	subs	r3, r5, r2
    44de:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    44e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    44e6:	bf88      	it	hi
    44e8:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    44ea:	2300      	movs	r3, #0
    44ec:	6023      	str	r3, [r4, #0]
    44ee:	6823      	ldr	r3, [r4, #0]
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    44f0:	f8c9 7344 	str.w	r7, [r9, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    44f4:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    44f8:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    44fc:	f8d9 3504 	ldr.w	r3, [r9, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    4500:	459a      	cmp	sl, r3
    4502:	d006      	beq.n	4512 <set_absolute_alarm+0x8a>
	return (a - b) & COUNTER_MAX;
    4504:	1aeb      	subs	r3, r5, r3
    4506:	3b02      	subs	r3, #2
    4508:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    450c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    4510:	d801      	bhi.n	4516 <set_absolute_alarm+0x8e>
}
    4512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
    4516:	462b      	mov	r3, r5
    4518:	e7cf      	b.n	44ba <set_absolute_alarm+0x32>
    451a:	bf00      	nop
    451c:	40011000 	.word	0x40011000

00004520 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    4520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return p_reg->INTENSET & mask;
    4522:	4e10      	ldr	r6, [pc, #64]	; (4564 <rtc_nrf_isr+0x44>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4524:	4f10      	ldr	r7, [pc, #64]	; (4568 <rtc_nrf_isr+0x48>)
	ARG_UNUSED(arg);

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    4526:	2500      	movs	r5, #0
    4528:	4b10      	ldr	r3, [pc, #64]	; (456c <rtc_nrf_isr+0x4c>)
    452a:	2000      	movs	r0, #0
    452c:	681c      	ldr	r4, [r3, #0]
    452e:	461a      	mov	r2, r3
    4530:	b105      	cbz	r5, 4534 <rtc_nrf_isr+0x14>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    4532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return p_reg->INTENSET & mask;
    4534:	f8d6 1304 	ldr.w	r1, [r6, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    4538:	03c9      	lsls	r1, r1, #15
    453a:	d5fa      	bpl.n	4532 <rtc_nrf_isr+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    453c:	6839      	ldr	r1, [r7, #0]
    453e:	2900      	cmp	r1, #0
    4540:	d0f7      	beq.n	4532 <rtc_nrf_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4542:	603d      	str	r5, [r7, #0]
    4544:	6839      	ldr	r1, [r7, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    4546:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    454a:	f8c6 1348 	str.w	r1, [r6, #840]	; 0x348
    return p_reg->CC[ch];
    454e:	f8d6 1540 	ldr.w	r1, [r6, #1344]	; 0x540
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    4552:	2501      	movs	r5, #1
			if (handler) {
    4554:	b11c      	cbz	r4, 455e <rtc_nrf_isr+0x3e>
				handler(chan, cc_val,
    4556:	685a      	ldr	r2, [r3, #4]
    4558:	6018      	str	r0, [r3, #0]
    455a:	47a0      	blx	r4
    455c:	e7e4      	b.n	4528 <rtc_nrf_isr+0x8>
    455e:	6014      	str	r4, [r2, #0]
}
    4560:	e7e7      	b.n	4532 <rtc_nrf_isr+0x12>
    4562:	bf00      	nop
    4564:	40011000 	.word	0x40011000
    4568:	40011140 	.word	0x40011140
    456c:	20001000 	.word	0x20001000

00004570 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
    4570:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    4572:	4d10      	ldr	r5, [pc, #64]	; (45b4 <sys_clock_driver_init+0x44>)
    4574:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    4576:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
    457a:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->INTENSET = mask;
    457e:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    4582:	4b0d      	ldr	r3, [pc, #52]	; (45b8 <sys_clock_driver_init+0x48>)
    4584:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    4588:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    458c:	2101      	movs	r1, #1
    458e:	4622      	mov	r2, r4
    4590:	2011      	movs	r0, #17
    4592:	f000 f99f 	bl	48d4 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    4596:	2011      	movs	r0, #17
    4598:	f000 f96a 	bl	4870 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    459c:	4a07      	ldr	r2, [pc, #28]	; (45bc <sys_clock_driver_init+0x4c>)
    459e:	2301      	movs	r3, #1
    45a0:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    45a2:	4a07      	ldr	r2, [pc, #28]	; (45c0 <sys_clock_driver_init+0x50>)
    45a4:	602b      	str	r3, [r5, #0]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    45a6:	2002      	movs	r0, #2
	int_mask = BIT_MASK(CHAN_COUNT);
    45a8:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    45aa:	f7ff fedb 	bl	4364 <z_nrf_clock_control_lf_on>

	return 0;
}
    45ae:	4620      	mov	r0, r4
    45b0:	bd38      	pop	{r3, r4, r5, pc}
    45b2:	bf00      	nop
    45b4:	40011000 	.word	0x40011000
    45b8:	e000e100 	.word	0xe000e100
    45bc:	40011008 	.word	0x40011008
    45c0:	20001008 	.word	0x20001008

000045c4 <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    45c4:	4b13      	ldr	r3, [pc, #76]	; (4614 <sys_clock_set_timeout+0x50>)
    45c6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    45ca:	bf08      	it	eq
    45cc:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    45ce:	3801      	subs	r0, #1
    45d0:	2800      	cmp	r0, #0
    45d2:	dd1c      	ble.n	460e <sys_clock_set_timeout+0x4a>
    45d4:	4298      	cmp	r0, r3
    45d6:	bfa8      	it	ge
    45d8:	4618      	movge	r0, r3
     return p_reg->COUNTER;
    45da:	4b0f      	ldr	r3, [pc, #60]	; (4618 <sys_clock_set_timeout+0x54>)
    45dc:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    45e0:	4b0e      	ldr	r3, [pc, #56]	; (461c <sys_clock_set_timeout+0x58>)
    45e2:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
    45e4:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    45e6:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
    45ea:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
		ticks = 0;
    45ee:	bf18      	it	ne
    45f0:	2000      	movne	r0, #0
	cc_data[chan].callback = handler;
    45f2:	4a0b      	ldr	r2, [pc, #44]	; (4620 <sys_clock_set_timeout+0x5c>)
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    45f4:	3301      	adds	r3, #1
    45f6:	4403      	add	r3, r0
	cc_data[chan].callback = handler;
    45f8:	480a      	ldr	r0, [pc, #40]	; (4624 <sys_clock_set_timeout+0x60>)
    45fa:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    45fc:	2000      	movs	r0, #0
    45fe:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    4600:	4a04      	ldr	r2, [pc, #16]	; (4614 <sys_clock_set_timeout+0x50>)
    4602:	4293      	cmp	r3, r2
    4604:	bf94      	ite	ls
    4606:	18c9      	addls	r1, r1, r3
    4608:	1889      	addhi	r1, r1, r2
    460a:	f7ff bf3d 	b.w	4488 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    460e:	2000      	movs	r0, #0
    4610:	e7e3      	b.n	45da <sys_clock_set_timeout+0x16>
    4612:	bf00      	nop
    4614:	007fffff 	.word	0x007fffff
    4618:	40011000 	.word	0x40011000
    461c:	2000100c 	.word	0x2000100c
    4620:	20001000 	.word	0x20001000
    4624:	00004471 	.word	0x00004471

00004628 <sys_clock_elapsed>:
	__asm__ volatile(
    4628:	f04f 0220 	mov.w	r2, #32
    462c:	f3ef 8311 	mrs	r3, BASEPRI
    4630:	f382 8811 	msr	BASEPRI, r2
    4634:	f3bf 8f6f 	isb	sy
    4638:	4a06      	ldr	r2, [pc, #24]	; (4654 <sys_clock_elapsed+0x2c>)
    463a:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    463e:	4a06      	ldr	r2, [pc, #24]	; (4658 <sys_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    4640:	6812      	ldr	r2, [r2, #0]
    4642:	1a80      	subs	r0, r0, r2
    4644:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    4648:	f383 8811 	msr	BASEPRI, r3
    464c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    4650:	4770      	bx	lr
    4652:	bf00      	nop
    4654:	40011000 	.word	0x40011000
    4658:	2000100c 	.word	0x2000100c

0000465c <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
    465c:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    465e:	4e26      	ldr	r6, [pc, #152]	; (46f8 <tc_aes128_set_encrypt_key+0x9c>)
{
    4660:	4607      	mov	r7, r0
    4662:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    4664:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    4666:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    4668:	ad01      	add	r5, sp, #4
    466a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    466c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    466e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    4670:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    4674:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
    4678:	4638      	mov	r0, r7
    467a:	2f00      	cmp	r7, #0
    467c:	d038      	beq.n	46f0 <tc_aes128_set_encrypt_key+0x94>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
    467e:	2c00      	cmp	r4, #0
    4680:	d038      	beq.n	46f4 <tc_aes128_set_encrypt_key+0x98>
    4682:	1f38      	subs	r0, r7, #4
    4684:	4621      	mov	r1, r4
    4686:	4602      	mov	r2, r0
    4688:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    468a:	784b      	ldrb	r3, [r1, #1]
    468c:	780d      	ldrb	r5, [r1, #0]
    468e:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    4690:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    4694:	78cd      	ldrb	r5, [r1, #3]
    4696:	432b      	orrs	r3, r5
    4698:	788d      	ldrb	r5, [r1, #2]
    469a:	3104      	adds	r1, #4
    469c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    46a0:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    46a2:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    46a6:	d1f0      	bne.n	468a <tc_aes128_set_encrypt_key+0x2e>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
    46a8:	4c14      	ldr	r4, [pc, #80]	; (46fc <tc_aes128_set_encrypt_key+0xa0>)
    46aa:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    46ac:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    46ae:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    46b0:	d116      	bne.n	46e0 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    46b2:	f3c3 4207 	ubfx	r2, r3, #16, #8
    46b6:	5ca5      	ldrb	r5, [r4, r2]
    46b8:	0e1a      	lsrs	r2, r3, #24
    46ba:	5ca2      	ldrb	r2, [r4, r2]
    46bc:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    46c0:	f3c3 2507 	ubfx	r5, r3, #8, #8
    46c4:	b2db      	uxtb	r3, r3
    46c6:	5d65      	ldrb	r5, [r4, r5]
    46c8:	5ce3      	ldrb	r3, [r4, r3]
    46ca:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    46ce:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    46d2:	ad0c      	add	r5, sp, #48	; 0x30
    46d4:	f021 0303 	bic.w	r3, r1, #3
    46d8:	442b      	add	r3, r5
    46da:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    46de:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
    46e0:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    46e4:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    46e6:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    46e8:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    46ea:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    46ec:	d1de      	bne.n	46ac <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
    46ee:	2001      	movs	r0, #1
}
    46f0:	b00d      	add	sp, #52	; 0x34
    46f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    46f4:	4620      	mov	r0, r4
    46f6:	e7fb      	b.n	46f0 <tc_aes128_set_encrypt_key+0x94>
    46f8:	0001963c 	.word	0x0001963c
    46fc:	0001a6dc 	.word	0x0001a6dc

00004700 <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
    4700:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4704:	4615      	mov	r5, r2
    4706:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
    4708:	4606      	mov	r6, r0
    470a:	2800      	cmp	r0, #0
    470c:	d058      	beq.n	47c0 <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    470e:	2900      	cmp	r1, #0
    4710:	d059      	beq.n	47c6 <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    4712:	2a00      	cmp	r2, #0
    4714:	d059      	beq.n	47ca <tc_aes_encrypt+0xca>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    4716:	2310      	movs	r3, #16
    4718:	460a      	mov	r2, r1
    471a:	4668      	mov	r0, sp
    471c:	4619      	mov	r1, r3
    471e:	f011 ffab 	bl	16678 <_copy>
	add_round_key(state, s->words);
    4722:	4629      	mov	r1, r5
    4724:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
    4726:	4c2a      	ldr	r4, [pc, #168]	; (47d0 <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
    4728:	f011 ffbe 	bl	166a8 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
    472c:	f105 0710 	add.w	r7, r5, #16
    4730:	46a1      	mov	r9, r4
    4732:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
    4734:	46e8      	mov	r8, sp
{
    4736:	466a      	mov	r2, sp
    4738:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
    473a:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    473c:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
    473e:	5c61      	ldrb	r1, [r4, r1]
    4740:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    4744:	d1f9      	bne.n	473a <tc_aes_encrypt+0x3a>
		sub_bytes(state);
		shift_rows(state);
    4746:	4668      	mov	r0, sp
    4748:	f011 fff3 	bl	16732 <shift_rows>
	mult_row_column(t, s);
    474c:	4669      	mov	r1, sp
    474e:	a804      	add	r0, sp, #16
    4750:	f012 f828 	bl	167a4 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
    4754:	a901      	add	r1, sp, #4
    4756:	a805      	add	r0, sp, #20
    4758:	f012 f824 	bl	167a4 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
    475c:	a902      	add	r1, sp, #8
    475e:	a806      	add	r0, sp, #24
    4760:	f012 f820 	bl	167a4 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
    4764:	a903      	add	r1, sp, #12
    4766:	a807      	add	r0, sp, #28
    4768:	f012 f81c 	bl	167a4 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
    476c:	2310      	movs	r3, #16
    476e:	4619      	mov	r1, r3
    4770:	eb0d 0203 	add.w	r2, sp, r3
    4774:	4668      	mov	r0, sp
    4776:	f011 ff7f 	bl	16678 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    477a:	4639      	mov	r1, r7
    477c:	4668      	mov	r0, sp
    477e:	3710      	adds	r7, #16
    4780:	f011 ff92 	bl	166a8 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
    4784:	42af      	cmp	r7, r5
    4786:	d1d5      	bne.n	4734 <tc_aes_encrypt+0x34>
    4788:	2410      	movs	r4, #16
		s[i] = sbox[s[i]];
    478a:	f898 3000 	ldrb.w	r3, [r8]
	for (i = 0; i < (Nb * Nk); ++i) {
    478e:	3c01      	subs	r4, #1
		s[i] = sbox[s[i]];
    4790:	f819 3003 	ldrb.w	r3, [r9, r3]
    4794:	f808 3b01 	strb.w	r3, [r8], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    4798:	d1f7      	bne.n	478a <tc_aes_encrypt+0x8a>
	}

	sub_bytes(state);
	shift_rows(state);
    479a:	4668      	mov	r0, sp
    479c:	f011 ffc9 	bl	16732 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
    47a0:	4629      	mov	r1, r5
    47a2:	4668      	mov	r0, sp
    47a4:	f011 ff80 	bl	166a8 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
    47a8:	2310      	movs	r3, #16
    47aa:	4619      	mov	r1, r3
    47ac:	466a      	mov	r2, sp
    47ae:	4630      	mov	r0, r6
    47b0:	f011 ff62 	bl	16678 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    47b4:	4668      	mov	r0, sp
    47b6:	2210      	movs	r2, #16
    47b8:	4621      	mov	r1, r4
    47ba:	f011 ff6a 	bl	16692 <_set>

	return TC_CRYPTO_SUCCESS;
    47be:	2001      	movs	r0, #1
}
    47c0:	b009      	add	sp, #36	; 0x24
    47c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
    47c6:	4608      	mov	r0, r1
    47c8:	e7fa      	b.n	47c0 <tc_aes_encrypt+0xc0>
    47ca:	4610      	mov	r0, r2
    47cc:	e7f8      	b.n	47c0 <tc_aes_encrypt+0xc0>
    47ce:	bf00      	nop
    47d0:	0001a6dc 	.word	0x0001a6dc

000047d4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    47d4:	4a09      	ldr	r2, [pc, #36]	; (47fc <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    47d6:	490a      	ldr	r1, [pc, #40]	; (4800 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    47d8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    47da:	6809      	ldr	r1, [r1, #0]
    47dc:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    47de:	4909      	ldr	r1, [pc, #36]	; (4804 <arch_swap+0x30>)
	_current->arch.basepri = key;
    47e0:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    47e2:	684b      	ldr	r3, [r1, #4]
    47e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    47e8:	604b      	str	r3, [r1, #4]
    47ea:	2300      	movs	r3, #0
    47ec:	f383 8811 	msr	BASEPRI, r3
    47f0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    47f4:	6893      	ldr	r3, [r2, #8]
}
    47f6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    47f8:	4770      	bx	lr
    47fa:	bf00      	nop
    47fc:	200021dc 	.word	0x200021dc
    4800:	0001a568 	.word	0x0001a568
    4804:	e000ed00 	.word	0xe000ed00

00004808 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    4808:	490f      	ldr	r1, [pc, #60]	; (4848 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
    480a:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    480c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    4810:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    4812:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    4816:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    481a:	2020      	movs	r0, #32
    msr BASEPRI, r0
    481c:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    4820:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    4824:	4f09      	ldr	r7, [pc, #36]	; (484c <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    4826:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    482a:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    482c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    482e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    4830:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    4832:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    4834:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    4836:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    483a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    483e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    4842:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    4846:	4770      	bx	lr
    ldr r1, =_kernel
    4848:	200021dc 	.word	0x200021dc
    ldr v4, =_SCS_ICSR
    484c:	e000ed04 	.word	0xe000ed04

00004850 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    4850:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    4854:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    4856:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    485a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    485e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    4860:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    4864:	2902      	cmp	r1, #2
    beq _oops
    4866:	d0ff      	beq.n	4868 <_oops>

00004868 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    4868:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    486a:	f012 f8e0 	bl	16a2e <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    486e:	bd01      	pop	{r0, pc}

00004870 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    4870:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    4872:	2b00      	cmp	r3, #0
    4874:	db08      	blt.n	4888 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4876:	2201      	movs	r2, #1
    4878:	f000 001f 	and.w	r0, r0, #31
    487c:	fa02 f000 	lsl.w	r0, r2, r0
    4880:	095b      	lsrs	r3, r3, #5
    4882:	4a02      	ldr	r2, [pc, #8]	; (488c <arch_irq_enable+0x1c>)
    4884:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    4888:	4770      	bx	lr
    488a:	bf00      	nop
    488c:	e000e100 	.word	0xe000e100

00004890 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    4890:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    4892:	2b00      	cmp	r3, #0
    4894:	db0d      	blt.n	48b2 <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4896:	2201      	movs	r2, #1
    4898:	095b      	lsrs	r3, r3, #5
    489a:	f000 001f 	and.w	r0, r0, #31
    489e:	fa02 f000 	lsl.w	r0, r2, r0
    48a2:	3320      	adds	r3, #32
    48a4:	4a03      	ldr	r2, [pc, #12]	; (48b4 <arch_irq_disable+0x24>)
    48a6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    48aa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    48ae:	f3bf 8f6f 	isb	sy
}
    48b2:	4770      	bx	lr
    48b4:	e000e100 	.word	0xe000e100

000048b8 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    48b8:	4b05      	ldr	r3, [pc, #20]	; (48d0 <arch_irq_is_enabled+0x18>)
    48ba:	0942      	lsrs	r2, r0, #5
    48bc:	f000 001f 	and.w	r0, r0, #31
    48c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    48c4:	2301      	movs	r3, #1
    48c6:	fa03 f000 	lsl.w	r0, r3, r0
}
    48ca:	4010      	ands	r0, r2
    48cc:	4770      	bx	lr
    48ce:	bf00      	nop
    48d0:	e000e100 	.word	0xe000e100

000048d4 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    48d4:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    48d6:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    48d8:	bfa8      	it	ge
    48da:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    48de:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    48e2:	bfb8      	it	lt
    48e4:	4b06      	ldrlt	r3, [pc, #24]	; (4900 <z_arm_irq_priority_set+0x2c>)
    48e6:	ea4f 1141 	mov.w	r1, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    48ea:	bfac      	ite	ge
    48ec:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    48f0:	f000 000f 	andlt.w	r0, r0, #15
    48f4:	b2c9      	uxtb	r1, r1
    48f6:	bfb4      	ite	lt
    48f8:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    48fa:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    48fe:	4770      	bx	lr
    4900:	e000ed14 	.word	0xe000ed14

00004904 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    4904:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    4906:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    4908:	4b04      	ldr	r3, [pc, #16]	; (491c <_arch_isr_direct_pm+0x18>)
    490a:	6a18      	ldr	r0, [r3, #32]
    490c:	b118      	cbz	r0, 4916 <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    490e:	2200      	movs	r2, #0
    4910:	621a      	str	r2, [r3, #32]
		z_pm_save_idle_exit(idle_val);
    4912:	f014 f88b 	bl	18a2c <z_pm_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    4916:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    4918:	bd08      	pop	{r3, pc}
    491a:	bf00      	nop
    491c:	200021dc 	.word	0x200021dc

00004920 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    4920:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    4924:	9b00      	ldr	r3, [sp, #0]
    4926:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    492a:	490a      	ldr	r1, [pc, #40]	; (4954 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    492c:	9b01      	ldr	r3, [sp, #4]
    492e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    4932:	9b02      	ldr	r3, [sp, #8]
    4934:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    4938:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    493c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    4940:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    4944:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    4948:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    494a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    494c:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    494e:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    4950:	4770      	bx	lr
    4952:	bf00      	nop
    4954:	00015f15 	.word	0x00015f15

00004958 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    4958:	b508      	push	{r3, lr}
    495a:	4606      	mov	r6, r0
    495c:	460d      	mov	r5, r1
    495e:	4614      	mov	r4, r2
	z_arm_configure_static_mpu_regions();
    4960:	f000 f990 	bl	4c84 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    4964:	4b07      	ldr	r3, [pc, #28]	; (4984 <arch_switch_to_main_thread+0x2c>)
    4966:	609e      	str	r6, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    4968:	4620      	mov	r0, r4
    496a:	f385 8809 	msr	PSP, r5
    496e:	2100      	movs	r1, #0
    4970:	b663      	cpsie	if
    4972:	f381 8811 	msr	BASEPRI, r1
    4976:	f3bf 8f6f 	isb	sy
    497a:	2200      	movs	r2, #0
    497c:	2300      	movs	r3, #0
    497e:	f011 fac9 	bl	15f14 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    4982:	bf00      	nop
    4984:	200021dc 	.word	0x200021dc

00004988 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    4988:	4901      	ldr	r1, [pc, #4]	; (4990 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    498a:	2210      	movs	r2, #16
	str	r2, [r1]
    498c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    498e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    4990:	e000ed10 	.word	0xe000ed10

00004994 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    4994:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    4996:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    4998:	f380 8811 	msr	BASEPRI, r0
	isb
    499c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    49a0:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    49a4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    49a6:	b662      	cpsie	i
	isb
    49a8:	f3bf 8f6f 	isb	sy

	bx	lr
    49ac:	4770      	bx	lr
    49ae:	bf00      	nop

000049b0 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    49b0:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    49b2:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    49b4:	f381 8811 	msr	BASEPRI, r1

	wfe
    49b8:	bf20      	wfe

	msr	BASEPRI, r0
    49ba:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    49be:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    49c0:	4770      	bx	lr
    49c2:	bf00      	nop

000049c4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    49c4:	bf30      	wfi
    b z_SysNmiOnReset
    49c6:	f7ff bffd 	b.w	49c4 <z_SysNmiOnReset>
    49ca:	bf00      	nop

000049cc <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    49cc:	4a0e      	ldr	r2, [pc, #56]	; (4a08 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    49ce:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    49d0:	4b0e      	ldr	r3, [pc, #56]	; (4a0c <z_arm_prep_c+0x40>)
    49d2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    49d6:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    49d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    49dc:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    49e0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    49e4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    49e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    49ec:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    49f0:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    49f4:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    49f8:	f00f ffea 	bl	149d0 <z_bss_zero>
	z_data_copy();
    49fc:	f010 ff3a 	bl	15874 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    4a00:	f000 f922 	bl	4c48 <z_arm_interrupt_init>
	z_cstart();
    4a04:	f010 f808 	bl	14a18 <z_cstart>
    4a08:	00000000 	.word	0x00000000
    4a0c:	e000ed00 	.word	0xe000ed00

00004a10 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    4a10:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    4a12:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    4a14:	4a0b      	ldr	r2, [pc, #44]	; (4a44 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    4a16:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    4a18:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    4a1a:	bf1e      	ittt	ne
	movne	r1, #0
    4a1c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    4a1e:	6211      	strne	r1, [r2, #32]
		blne	z_pm_save_idle_exit
    4a20:	f014 f804 	blne	18a2c <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    4a24:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    4a26:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    4a2a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    4a2e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    4a32:	4905      	ldr	r1, [pc, #20]	; (4a48 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    4a34:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    4a36:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    4a38:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    4a3a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    4a3e:	4903      	ldr	r1, [pc, #12]	; (4a4c <_isr_wrapper+0x3c>)
	bx r1
    4a40:	4708      	bx	r1
    4a42:	0000      	.short	0x0000
	ldr r2, =_kernel
    4a44:	200021dc 	.word	0x200021dc
	ldr r1, =_sw_isr_table
    4a48:	00019424 	.word	0x00019424
	ldr r1, =z_arm_int_exit
    4a4c:	00004c2d 	.word	0x00004c2d

00004a50 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    4a50:	f012 f87f 	bl	16b52 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    4a54:	2020      	movs	r0, #32
    msr BASEPRI, r0
    4a56:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    4a5a:	4808      	ldr	r0, [pc, #32]	; (4a7c <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    4a5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    4a60:	1840      	adds	r0, r0, r1
    msr PSP, r0
    4a62:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    4a66:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    4a6a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    4a6c:	4308      	orrs	r0, r1
    msr CONTROL, r0
    4a6e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    4a72:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    4a76:	f7ff ffa9 	bl	49cc <z_arm_prep_c>
    4a7a:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    4a7c:	20003280 	.word	0x20003280

00004a80 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    4a80:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    4a84:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    4a88:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    4a8a:	4672      	mov	r2, lr
	bl z_arm_fault
    4a8c:	f000 f852 	bl	4b34 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    4a90:	bd01      	pop	{r0, pc}
    4a92:	bf00      	nop

00004a94 <mem_manage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    4a94:	4b0e      	ldr	r3, [pc, #56]	; (4ad0 <mem_manage_fault.isra.0+0x3c>)
    4a96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    4a98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    4a9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4a9c:	0792      	lsls	r2, r2, #30
    4a9e:	d508      	bpl.n	4ab2 <mem_manage_fault.isra.0+0x1e>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    4aa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    4aa2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4aa4:	0612      	lsls	r2, r2, #24
    4aa6:	d504      	bpl.n	4ab2 <mem_manage_fault.isra.0+0x1e>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    4aa8:	b118      	cbz	r0, 4ab2 <mem_manage_fault.isra.0+0x1e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    4aaa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4aac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    4ab0:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    4ab2:	4b07      	ldr	r3, [pc, #28]	; (4ad0 <mem_manage_fault.isra.0+0x3c>)
    4ab4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    4ab6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    4ab8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4aba:	06d2      	lsls	r2, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    4abc:	bf58      	it	pl
    4abe:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    4ac0:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    4ac2:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    4ac4:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    4ac8:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    4aca:	7008      	strb	r0, [r1, #0]

	return reason;
}
    4acc:	4770      	bx	lr
    4ace:	bf00      	nop
    4ad0:	e000ed00 	.word	0xe000ed00

00004ad4 <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    4ad4:	4b0d      	ldr	r3, [pc, #52]	; (4b0c <bus_fault.isra.0+0x38>)
    4ad6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    4ad8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    4ada:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4adc:	0592      	lsls	r2, r2, #22
    4ade:	d508      	bpl.n	4af2 <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    4ae0:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    4ae2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4ae4:	0412      	lsls	r2, r2, #16
    4ae6:	d504      	bpl.n	4af2 <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    4ae8:	b118      	cbz	r0, 4af2 <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    4aea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4aec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    4af0:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    4af2:	4b06      	ldr	r3, [pc, #24]	; (4b0c <bus_fault.isra.0+0x38>)
    4af4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    4af6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4af8:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    4afa:	bf58      	it	pl
    4afc:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    4afe:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    4b00:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    4b02:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    4b06:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    4b08:	7008      	strb	r0, [r1, #0]

	return reason;
}
    4b0a:	4770      	bx	lr
    4b0c:	e000ed00 	.word	0xe000ed00

00004b10 <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    4b10:	4b07      	ldr	r3, [pc, #28]	; (4b30 <usage_fault.isra.0+0x20>)
    4b12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    4b14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    4b16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    4b18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    4b1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    4b1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    4b1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4b20:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    4b24:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    4b28:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    4b2a:	2000      	movs	r0, #0
    4b2c:	4770      	bx	lr
    4b2e:	bf00      	nop
    4b30:	e000ed00 	.word	0xe000ed00

00004b34 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    4b34:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4b36:	4b36      	ldr	r3, [pc, #216]	; (4c10 <z_arm_fault+0xdc>)
    4b38:	685b      	ldr	r3, [r3, #4]
{
    4b3a:	b08a      	sub	sp, #40	; 0x28
    4b3c:	460e      	mov	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    4b42:	2500      	movs	r5, #0
    4b44:	f385 8811 	msr	BASEPRI, r5
    4b48:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    4b4c:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    4b50:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    4b54:	d111      	bne.n	4b7a <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    4b56:	f002 010c 	and.w	r1, r2, #12
    4b5a:	2908      	cmp	r1, #8
    4b5c:	d00d      	beq.n	4b7a <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    4b5e:	0711      	lsls	r1, r2, #28
    4b60:	d401      	bmi.n	4b66 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    4b62:	4606      	mov	r6, r0
			*nested_exc = true;
    4b64:	2501      	movs	r5, #1
	*recoverable = false;
    4b66:	2200      	movs	r2, #0
    4b68:	3b03      	subs	r3, #3
    4b6a:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    4b6e:	2b03      	cmp	r3, #3
    4b70:	d847      	bhi.n	4c02 <z_arm_fault+0xce>
    4b72:	e8df f003 	tbb	[pc, r3]
    4b76:	3e04      	.short	0x3e04
    4b78:	3b42      	.short	0x3b42
		return NULL;
    4b7a:	462e      	mov	r6, r5
    4b7c:	e7f3      	b.n	4b66 <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    4b7e:	4b24      	ldr	r3, [pc, #144]	; (4c10 <z_arm_fault+0xdc>)
    4b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b82:	0792      	lsls	r2, r2, #30
    4b84:	d43d      	bmi.n	4c02 <z_arm_fault+0xce>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    4b86:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    4b88:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    4b8c:	d008      	beq.n	4ba0 <z_arm_fault+0x6c>
		if (SCB_MMFSR != 0) {
    4b8e:	3328      	adds	r3, #40	; 0x28
    4b90:	781b      	ldrb	r3, [r3, #0]
    4b92:	b1eb      	cbz	r3, 4bd0 <z_arm_fault+0x9c>
			reason = mem_manage_fault(esf, 1, recoverable);
    4b94:	f10d 0107 	add.w	r1, sp, #7
    4b98:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    4b9a:	f7ff ff7b 	bl	4a94 <mem_manage_fault.isra.0>
		reason = usage_fault(esf);
    4b9e:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    4ba0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    4ba4:	b993      	cbnz	r3, 4bcc <z_arm_fault+0x98>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    4ba6:	2220      	movs	r2, #32
    4ba8:	4631      	mov	r1, r6
    4baa:	a802      	add	r0, sp, #8
    4bac:	f011 ff80 	bl	16ab0 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    4bb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4bb2:	b345      	cbz	r5, 4c06 <z_arm_fault+0xd2>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    4bb4:	f3c3 0208 	ubfx	r2, r3, #0, #9
    4bb8:	b922      	cbnz	r2, 4bc4 <z_arm_fault+0x90>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    4bba:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    4bbe:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    4bc2:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    4bc4:	a902      	add	r1, sp, #8
    4bc6:	4620      	mov	r0, r4
    4bc8:	f011 ff2f 	bl	16a2a <z_arm_fatal_error>
}
    4bcc:	b00a      	add	sp, #40	; 0x28
    4bce:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    4bd0:	4b10      	ldr	r3, [pc, #64]	; (4c14 <z_arm_fault+0xe0>)
    4bd2:	781b      	ldrb	r3, [r3, #0]
    4bd4:	b12b      	cbz	r3, 4be2 <z_arm_fault+0xae>
			reason = bus_fault(esf, 1, recoverable);
    4bd6:	f10d 0107 	add.w	r1, sp, #7
    4bda:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    4bdc:	f7ff ff7a 	bl	4ad4 <bus_fault.isra.0>
    4be0:	e7dd      	b.n	4b9e <z_arm_fault+0x6a>
		} else if (SCB_UFSR != 0) {
    4be2:	4b0d      	ldr	r3, [pc, #52]	; (4c18 <z_arm_fault+0xe4>)
    4be4:	8818      	ldrh	r0, [r3, #0]
    4be6:	b284      	uxth	r4, r0
    4be8:	2c00      	cmp	r4, #0
    4bea:	d0d9      	beq.n	4ba0 <z_arm_fault+0x6c>
		reason = usage_fault(esf);
    4bec:	f7ff ff90 	bl	4b10 <usage_fault.isra.0>
    4bf0:	e7d5      	b.n	4b9e <z_arm_fault+0x6a>
		reason = mem_manage_fault(esf, 0, recoverable);
    4bf2:	f10d 0107 	add.w	r1, sp, #7
    4bf6:	2000      	movs	r0, #0
    4bf8:	e7cf      	b.n	4b9a <z_arm_fault+0x66>
		reason = bus_fault(esf, 0, recoverable);
    4bfa:	f10d 0107 	add.w	r1, sp, #7
    4bfe:	2000      	movs	r0, #0
    4c00:	e7ec      	b.n	4bdc <z_arm_fault+0xa8>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    4c02:	2400      	movs	r4, #0
    4c04:	e7cc      	b.n	4ba0 <z_arm_fault+0x6c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    4c06:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    4c0a:	f023 0301 	bic.w	r3, r3, #1
    4c0e:	e7d8      	b.n	4bc2 <z_arm_fault+0x8e>
    4c10:	e000ed00 	.word	0xe000ed00
    4c14:	e000ed29 	.word	0xe000ed29
    4c18:	e000ed2a 	.word	0xe000ed2a

00004c1c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    4c1c:	4a02      	ldr	r2, [pc, #8]	; (4c28 <z_arm_fault_init+0xc>)
    4c1e:	6953      	ldr	r3, [r2, #20]
    4c20:	f043 0310 	orr.w	r3, r3, #16
    4c24:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    4c26:	4770      	bx	lr
    4c28:	e000ed00 	.word	0xe000ed00

00004c2c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    4c2c:	4b04      	ldr	r3, [pc, #16]	; (4c40 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    4c2e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    4c30:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    4c32:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    4c34:	d003      	beq.n	4c3e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    4c36:	4903      	ldr	r1, [pc, #12]	; (4c44 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    4c38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    4c3c:	600a      	str	r2, [r1, #0]

00004c3e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    4c3e:	4770      	bx	lr
	ldr r3, =_kernel
    4c40:	200021dc 	.word	0x200021dc
	ldr r1, =_SCS_ICSR
    4c44:	e000ed04 	.word	0xe000ed04

00004c48 <z_arm_interrupt_init>:
    4c48:	4804      	ldr	r0, [pc, #16]	; (4c5c <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    4c4a:	2300      	movs	r3, #0
    4c4c:	2120      	movs	r1, #32
    4c4e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    4c50:	3301      	adds	r3, #1
    4c52:	2b30      	cmp	r3, #48	; 0x30
    4c54:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    4c58:	d1f9      	bne.n	4c4e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    4c5a:	4770      	bx	lr
    4c5c:	e000e100 	.word	0xe000e100

00004c60 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    4c60:	4b06      	ldr	r3, [pc, #24]	; (4c7c <z_impl_k_thread_abort+0x1c>)
    4c62:	689b      	ldr	r3, [r3, #8]
    4c64:	4283      	cmp	r3, r0
    4c66:	d107      	bne.n	4c78 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4c68:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    4c6c:	b123      	cbz	r3, 4c78 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4c6e:	4a04      	ldr	r2, [pc, #16]	; (4c80 <z_impl_k_thread_abort+0x20>)
    4c70:	6853      	ldr	r3, [r2, #4]
    4c72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    4c76:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    4c78:	f010 bae8 	b.w	1524c <z_thread_abort>
    4c7c:	200021dc 	.word	0x200021dc
    4c80:	e000ed00 	.word	0xe000ed00

00004c84 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    4c84:	4b02      	ldr	r3, [pc, #8]	; (4c90 <z_arm_configure_static_mpu_regions+0xc>)
    4c86:	4a03      	ldr	r2, [pc, #12]	; (4c94 <z_arm_configure_static_mpu_regions+0x10>)
    4c88:	4803      	ldr	r0, [pc, #12]	; (4c98 <z_arm_configure_static_mpu_regions+0x14>)
    4c8a:	2101      	movs	r1, #1
    4c8c:	f000 b886 	b.w	4d9c <arm_core_mpu_configure_static_mpu_regions>
    4c90:	20040000 	.word	0x20040000
    4c94:	20000000 	.word	0x20000000
    4c98:	000196b8 	.word	0x000196b8

00004c9c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    4c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    4c9e:	4f1e      	ldr	r7, [pc, #120]	; (4d18 <mpu_configure_regions+0x7c>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    4ca0:	2600      	movs	r6, #0
    4ca2:	428e      	cmp	r6, r1
    4ca4:	db01      	blt.n	4caa <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    4ca6:	4610      	mov	r0, r2
    4ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    4caa:	6844      	ldr	r4, [r0, #4]
    4cac:	b384      	cbz	r4, 4d10 <mpu_configure_regions+0x74>
		if (do_sanity_check &&
    4cae:	b153      	cbz	r3, 4cc6 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    4cb0:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    4cb4:	ea14 0f0c 	tst.w	r4, ip
    4cb8:	d118      	bne.n	4cec <mpu_configure_regions+0x50>
		&&
    4cba:	2c1f      	cmp	r4, #31
    4cbc:	d916      	bls.n	4cec <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    4cbe:	6805      	ldr	r5, [r0, #0]
		&&
    4cc0:	ea1c 0f05 	tst.w	ip, r5
    4cc4:	d112      	bne.n	4cec <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    4cc6:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    4cc8:	6805      	ldr	r5, [r0, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    4cca:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    4cce:	b2d2      	uxtb	r2, r2
    4cd0:	d90f      	bls.n	4cf2 <mpu_configure_regions+0x56>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    4cd2:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    4cd6:	d80e      	bhi.n	4cf6 <mpu_configure_regions+0x5a>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    4cd8:	3c01      	subs	r4, #1
    4cda:	fab4 f484 	clz	r4, r4
    4cde:	f1c4 041f 	rsb	r4, r4, #31
    4ce2:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    4ce4:	2a07      	cmp	r2, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    4ce6:	ea4c 0404 	orr.w	r4, ip, r4
    4cea:	d906      	bls.n	4cfa <mpu_configure_regions+0x5e>
			return -EINVAL;
    4cec:	f06f 0215 	mvn.w	r2, #21
    4cf0:	e7d9      	b.n	4ca6 <mpu_configure_regions+0xa>
		return REGION_32B;
    4cf2:	2408      	movs	r4, #8
    4cf4:	e7f6      	b.n	4ce4 <mpu_configure_regions+0x48>
		return REGION_4G;
    4cf6:	243e      	movs	r4, #62	; 0x3e
    4cf8:	e7f4      	b.n	4ce4 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4cfa:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    4cfe:	4315      	orrs	r5, r2
    4d00:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4d04:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    4d08:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4d0a:	60fd      	str	r5, [r7, #12]
		reg_index++;
    4d0c:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4d0e:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
    4d10:	3601      	adds	r6, #1
    4d12:	300c      	adds	r0, #12
    4d14:	e7c5      	b.n	4ca2 <mpu_configure_regions+0x6>
    4d16:	bf00      	nop
    4d18:	e000ed90 	.word	0xe000ed90

00004d1c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    4d1c:	4b03      	ldr	r3, [pc, #12]	; (4d2c <arm_core_mpu_enable+0x10>)
    4d1e:	2205      	movs	r2, #5
    4d20:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    4d22:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4d26:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    4d2a:	4770      	bx	lr
    4d2c:	e000ed90 	.word	0xe000ed90

00004d30 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    4d30:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    4d34:	4b01      	ldr	r3, [pc, #4]	; (4d3c <arm_core_mpu_disable+0xc>)
    4d36:	2200      	movs	r2, #0
    4d38:	605a      	str	r2, [r3, #4]
}
    4d3a:	4770      	bx	lr
    4d3c:	e000ed90 	.word	0xe000ed90

00004d40 <arm_mpu_init>:
 */
static int arm_mpu_init(const struct device *arg)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    4d40:	4913      	ldr	r1, [pc, #76]	; (4d90 <arm_mpu_init+0x50>)
    4d42:	6808      	ldr	r0, [r1, #0]
    4d44:	2808      	cmp	r0, #8
{
    4d46:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    4d48:	d81e      	bhi.n	4d88 <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    4d4a:	f7ff fff1 	bl	4d30 <arm_core_mpu_disable>
	MPU->RNR = index;
    4d4e:	4c11      	ldr	r4, [pc, #68]	; (4d94 <arm_mpu_init+0x54>)
    4d50:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4d52:	2200      	movs	r2, #0
    4d54:	4290      	cmp	r0, r2
    4d56:	f101 010c 	add.w	r1, r1, #12
    4d5a:	d105      	bne.n	4d68 <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    4d5c:	4b0e      	ldr	r3, [pc, #56]	; (4d98 <arm_mpu_init+0x58>)
    4d5e:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    4d60:	f7ff ffdc 	bl	4d1c <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    4d64:	2000      	movs	r0, #0
}
    4d66:	bd10      	pop	{r4, pc}
    4d68:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4d6a:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    4d6e:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    4d72:	4313      	orrs	r3, r2
    4d74:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4d78:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4d7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
    4d7e:	f043 0301 	orr.w	r3, r3, #1
    4d82:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4d84:	3201      	adds	r2, #1
    4d86:	e7e5      	b.n	4d54 <arm_mpu_init+0x14>
		return -1;
    4d88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4d8c:	e7eb      	b.n	4d66 <arm_mpu_init+0x26>
    4d8e:	bf00      	nop
    4d90:	000196c4 	.word	0x000196c4
    4d94:	e000ed90 	.word	0xe000ed90
    4d98:	2000223a 	.word	0x2000223a

00004d9c <arm_core_mpu_configure_static_mpu_regions>:
{
    4d9c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    4d9e:	4c03      	ldr	r4, [pc, #12]	; (4dac <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    4da0:	2301      	movs	r3, #1
    4da2:	7822      	ldrb	r2, [r4, #0]
    4da4:	f7ff ff7a 	bl	4c9c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    4da8:	7020      	strb	r0, [r4, #0]
}
    4daa:	bd10      	pop	{r4, pc}
    4dac:	2000223a 	.word	0x2000223a

00004db0 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    4db0:	4b01      	ldr	r3, [pc, #4]	; (4db8 <__stdout_hook_install+0x8>)
    4db2:	6018      	str	r0, [r3, #0]
}
    4db4:	4770      	bx	lr
    4db6:	bf00      	nop
    4db8:	2000014c 	.word	0x2000014c

00004dbc <nordicsemi_nrf52_init>:
	__asm__ volatile(
    4dbc:	f04f 0320 	mov.w	r3, #32
    4dc0:	f3ef 8211 	mrs	r2, BASEPRI
    4dc4:	f383 8811 	msr	BASEPRI, r3
    4dc8:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    4dcc:	4906      	ldr	r1, [pc, #24]	; (4de8 <nordicsemi_nrf52_init+0x2c>)
    4dce:	2301      	movs	r3, #1
    4dd0:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    4dd4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    4dd8:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    4ddc:	f382 8811 	msr	BASEPRI, r2
    4de0:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    4de4:	2000      	movs	r0, #0
    4de6:	4770      	bx	lr
    4de8:	4001e000 	.word	0x4001e000

00004dec <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    4dec:	b120      	cbz	r0, 4df8 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    4dee:	4b03      	ldr	r3, [pc, #12]	; (4dfc <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    4df0:	0180      	lsls	r0, r0, #6
    4df2:	f043 0301 	orr.w	r3, r3, #1
    4df6:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    4df8:	4770      	bx	lr
    4dfa:	bf00      	nop
    4dfc:	00019680 	.word	0x00019680

00004e00 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    4e00:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    4e02:	7802      	ldrb	r2, [r0, #0]
    4e04:	2a01      	cmp	r2, #1
{
    4e06:	4604      	mov	r4, r0
    4e08:	460b      	mov	r3, r1
	switch (src->type) {
    4e0a:	d016      	beq.n	4e3a <uuid_to_uuid128+0x3a>
    4e0c:	2a02      	cmp	r2, #2
    4e0e:	d02c      	beq.n	4e6a <uuid_to_uuid128+0x6a>
    4e10:	b98a      	cbnz	r2, 4e36 <uuid_to_uuid128+0x36>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    4e12:	4a19      	ldr	r2, [pc, #100]	; (4e78 <uuid_to_uuid128+0x78>)
    4e14:	460d      	mov	r5, r1
    4e16:	f102 0710 	add.w	r7, r2, #16
    4e1a:	6810      	ldr	r0, [r2, #0]
    4e1c:	6851      	ldr	r1, [r2, #4]
    4e1e:	462e      	mov	r6, r5
    4e20:	c603      	stmia	r6!, {r0, r1}
    4e22:	3208      	adds	r2, #8
    4e24:	42ba      	cmp	r2, r7
    4e26:	4635      	mov	r5, r6
    4e28:	d1f7      	bne.n	4e1a <uuid_to_uuid128+0x1a>
    4e2a:	7812      	ldrb	r2, [r2, #0]
    4e2c:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    4e2e:	8862      	ldrh	r2, [r4, #2]
    4e30:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    4e32:	0a12      	lsrs	r2, r2, #8
    4e34:	739a      	strb	r2, [r3, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    4e36:	bcf0      	pop	{r4, r5, r6, r7}
    4e38:	4770      	bx	lr
		*dst = uuid128_base;
    4e3a:	4a0f      	ldr	r2, [pc, #60]	; (4e78 <uuid_to_uuid128+0x78>)
    4e3c:	460d      	mov	r5, r1
    4e3e:	f102 0710 	add.w	r7, r2, #16
    4e42:	6810      	ldr	r0, [r2, #0]
    4e44:	6851      	ldr	r1, [r2, #4]
    4e46:	462e      	mov	r6, r5
    4e48:	c603      	stmia	r6!, {r0, r1}
    4e4a:	3208      	adds	r2, #8
    4e4c:	42ba      	cmp	r2, r7
    4e4e:	4635      	mov	r5, r6
    4e50:	d1f7      	bne.n	4e42 <uuid_to_uuid128+0x42>
    4e52:	7812      	ldrb	r2, [r2, #0]
    4e54:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    4e56:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
    4e58:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    4e5a:	f3c2 2107 	ubfx	r1, r2, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    4e5e:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    4e60:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    4e62:	0a12      	lsrs	r2, r2, #8
    4e64:	7399      	strb	r1, [r3, #14]
    4e66:	741a      	strb	r2, [r3, #16]
}
    4e68:	e7e5      	b.n	4e36 <uuid_to_uuid128+0x36>
		memcpy(dst, src, sizeof(*dst));
    4e6a:	4601      	mov	r1, r0
}
    4e6c:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
    4e6e:	2211      	movs	r2, #17
    4e70:	4618      	mov	r0, r3
    4e72:	f011 be1d 	b.w	16ab0 <memcpy>
    4e76:	bf00      	nop
    4e78:	0001a7eb 	.word	0x0001a7eb

00004e7c <bt_buf_get_rx>:
NET_BUF_POOL_DEFINE(acl_in_pool, CONFIG_BT_ACL_RX_COUNT, ACL_IN_SIZE,
		    sizeof(struct acl_data), bt_hci_host_num_completed_packets);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    4e7c:	b538      	push	{r3, r4, r5, lr}
    4e7e:	4605      	mov	r5, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf *net_buf_alloc(struct net_buf_pool *pool,
					    k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
    4e80:	4805      	ldr	r0, [pc, #20]	; (4e98 <bt_buf_get_rx+0x1c>)
    4e82:	f013 fc64 	bl	1874e <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    4e86:	4604      	mov	r4, r0
    4e88:	b120      	cbz	r0, 4e94 <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
    4e8a:	2100      	movs	r1, #0
    4e8c:	3008      	adds	r0, #8
    4e8e:	f013 fc7d 	bl	1878c <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    4e92:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    4e94:	4620      	mov	r0, r4
    4e96:	bd38      	pop	{r3, r4, r5, pc}
    4e98:	20000740 	.word	0x20000740

00004e9c <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    4e9c:	b570      	push	{r4, r5, r6, lr}
    4e9e:	4602      	mov	r2, r0
    4ea0:	460b      	mov	r3, r1
	__asm__ volatile(
    4ea2:	f04f 0120 	mov.w	r1, #32
    4ea6:	f3ef 8511 	mrs	r5, BASEPRI
    4eaa:	f381 8811 	msr	BASEPRI, r1
    4eae:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    4eb2:	480c      	ldr	r0, [pc, #48]	; (4ee4 <bt_buf_get_cmd_complete+0x48>)
	bt_dev.sent_cmd = NULL;
    4eb4:	2100      	movs	r1, #0
	buf = bt_dev.sent_cmd;
    4eb6:	f8d0 4100 	ldr.w	r4, [r0, #256]	; 0x100
	bt_dev.sent_cmd = NULL;
    4eba:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
	__asm__ volatile(
    4ebe:	f385 8811 	msr	BASEPRI, r5
    4ec2:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    4ec6:	b924      	cbnz	r4, 4ed2 <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    4ec8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    4ecc:	2001      	movs	r0, #1
    4ece:	f7ff bfd5 	b.w	4e7c <bt_buf_get_rx>
    4ed2:	2301      	movs	r3, #1
    4ed4:	f104 0008 	add.w	r0, r4, #8
    4ed8:	7523      	strb	r3, [r4, #20]
		buf->len = 0U;
    4eda:	81a1      	strh	r1, [r4, #12]
    4edc:	f013 fc56 	bl	1878c <net_buf_simple_reserve>
}
    4ee0:	4620      	mov	r0, r4
    4ee2:	bd70      	pop	{r4, r5, r6, pc}
    4ee4:	20000000 	.word	0x20000000

00004ee8 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    4ee8:	b570      	push	{r4, r5, r6, lr}
    4eea:	4604      	mov	r4, r0
	switch (evt) {
    4eec:	2c0f      	cmp	r4, #15
{
    4eee:	460d      	mov	r5, r1
    4ef0:	4610      	mov	r0, r2
    4ef2:	4619      	mov	r1, r3
	switch (evt) {
    4ef4:	d805      	bhi.n	4f02 <bt_buf_get_evt+0x1a>
    4ef6:	2c0d      	cmp	r4, #13
    4ef8:	d912      	bls.n	4f20 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    4efa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    4efe:	f7ff bfcd 	b.w	4e9c <bt_buf_get_cmd_complete>
	switch (evt) {
    4f02:	2c13      	cmp	r4, #19
    4f04:	d10c      	bne.n	4f20 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
    4f06:	480b      	ldr	r0, [pc, #44]	; (4f34 <bt_buf_get_evt+0x4c>)
    4f08:	f013 fc21 	bl	1874e <net_buf_alloc_fixed>
			if (buf) {
    4f0c:	4604      	mov	r4, r0
    4f0e:	b128      	cbz	r0, 4f1c <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
    4f10:	2100      	movs	r1, #0
    4f12:	3008      	adds	r0, #8
    4f14:	f013 fc3a 	bl	1878c <net_buf_simple_reserve>
    4f18:	2301      	movs	r3, #1
    4f1a:	7523      	strb	r3, [r4, #20]
}
    4f1c:	4620      	mov	r0, r4
    4f1e:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
    4f20:	4602      	mov	r2, r0
    4f22:	460b      	mov	r3, r1
		if (discardable) {
    4f24:	b10d      	cbz	r5, 4f2a <bt_buf_get_evt+0x42>
    4f26:	4804      	ldr	r0, [pc, #16]	; (4f38 <bt_buf_get_evt+0x50>)
    4f28:	e7ee      	b.n	4f08 <bt_buf_get_evt+0x20>
}
    4f2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    4f2e:	2001      	movs	r0, #1
    4f30:	f7ff bfa4 	b.w	4e7c <bt_buf_get_rx>
    4f34:	20000768 	.word	0x20000768
    4f38:	200006c8 	.word	0x200006c8

00004f3c <hci_le_meta_event>:
#endif /* (CONFIG_BT_ISO_BROADCAST) */
#endif /* (CONFIG_BT_ISO) */
};

static void hci_le_meta_event(struct net_buf *buf)
{
    4f3c:	b510      	push	{r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    4f3e:	2101      	movs	r1, #1
    4f40:	4604      	mov	r4, r0
    4f42:	3008      	adds	r0, #8
    4f44:	f013 fc78 	bl	18838 <net_buf_simple_pull_mem>

	evt = net_buf_pull_mem(buf, sizeof(*evt));

	BT_DBG("subevent 0x%02x", evt->subevent);

	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    4f48:	4621      	mov	r1, r4
    4f4a:	4a03      	ldr	r2, [pc, #12]	; (4f58 <hci_le_meta_event+0x1c>)
    4f4c:	7800      	ldrb	r0, [r0, #0]
}
    4f4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    4f52:	2308      	movs	r3, #8
    4f54:	f011 bed6 	b.w	16d04 <handle_event>
    4f58:	00019714 	.word	0x00019714

00004f5c <hci_num_completed_packets>:
{
    4f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < evt->num_handles; i++) {
    4f60:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    4f62:	6887      	ldr	r7, [r0, #8]
	return k_work_submit_to_queue(&k_sys_work_q, work);
    4f64:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 5020 <hci_num_completed_packets+0xc4>
			tx->pending_no_cb = 0U;
    4f68:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
    4f6a:	783b      	ldrb	r3, [r7, #0]
    4f6c:	429d      	cmp	r5, r3
    4f6e:	db01      	blt.n	4f74 <hci_num_completed_packets+0x18>
}
    4f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    4f74:	eb07 0385 	add.w	r3, r7, r5, lsl #2
		conn = bt_conn_lookup_handle(handle);
    4f78:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    4f7c:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
    4f80:	f001 fcf8 	bl	6974 <bt_conn_lookup_handle>
		if (!conn) {
    4f84:	4604      	mov	r4, r0
    4f86:	b350      	cbz	r0, 4fde <hci_num_completed_packets+0x82>
			k_work_submit(&conn->tx_complete_work);
    4f88:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
    4f8c:	b326      	cbz	r6, 4fd8 <hci_num_completed_packets+0x7c>
	__asm__ volatile(
    4f8e:	f04f 0320 	mov.w	r3, #32
    4f92:	f3ef 8211 	mrs	r2, BASEPRI
    4f96:	f383 8811 	msr	BASEPRI, r3
    4f9a:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    4f9e:	69e3      	ldr	r3, [r4, #28]
    4fa0:	b16b      	cbz	r3, 4fbe <hci_num_completed_packets+0x62>
				conn->pending_no_cb--;
    4fa2:	3b01      	subs	r3, #1
    4fa4:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    4fa6:	f382 8811 	msr	BASEPRI, r2
    4faa:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    4fae:	4620      	mov	r0, r4
    4fb0:	f001 fbb4 	bl	671c <bt_conn_get_pkts>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    4fb4:	3e01      	subs	r6, #1
    4fb6:	f010 f9ad 	bl	15314 <z_impl_k_sem_give>
    4fba:	b2b6      	uxth	r6, r6
    4fbc:	e7e6      	b.n	4f8c <hci_num_completed_packets+0x30>
Z_GENLIST_IS_EMPTY(slist)
    4fbe:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    4fc0:	b12b      	cbz	r3, 4fce <hci_num_completed_packets+0x72>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    4fc2:	69a1      	ldr	r1, [r4, #24]
    4fc4:	6818      	ldr	r0, [r3, #0]
	list->head = node;
    4fc6:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    4fc8:	428b      	cmp	r3, r1
	list->tail = node;
    4fca:	bf08      	it	eq
    4fcc:	61a0      	streq	r0, [r4, #24]
    4fce:	f382 8811 	msr	BASEPRI, r2
    4fd2:	f3bf 8f6f 	isb	sy
			if (!node) {
    4fd6:	b923      	cbnz	r3, 4fe2 <hci_num_completed_packets+0x86>
		bt_conn_unref(conn);
    4fd8:	4620      	mov	r0, r4
    4fda:	f012 fa4e 	bl	1747a <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
    4fde:	3501      	adds	r5, #1
    4fe0:	e7c3      	b.n	4f6a <hci_num_completed_packets+0xe>
	__asm__ volatile(
    4fe2:	f04f 0220 	mov.w	r2, #32
    4fe6:	f3ef 8111 	mrs	r1, BASEPRI
    4fea:	f382 8811 	msr	BASEPRI, r2
    4fee:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    4ff2:	68da      	ldr	r2, [r3, #12]
    4ff4:	61e2      	str	r2, [r4, #28]
	parent->next = child;
    4ff6:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
    4ffa:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    4ffc:	f8c3 800c 	str.w	r8, [r3, #12]
    5000:	b952      	cbnz	r2, 5018 <hci_num_completed_packets+0xbc>
	list->head = node;
    5002:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    5006:	f381 8811 	msr	BASEPRI, r1
    500a:	f3bf 8f6f 	isb	sy
    500e:	4651      	mov	r1, sl
    5010:	4648      	mov	r0, r9
    5012:	f013 ffcd 	bl	18fb0 <k_work_submit_to_queue>
    5016:	e7ca      	b.n	4fae <hci_num_completed_packets+0x52>
	parent->next = child;
    5018:	6013      	str	r3, [r2, #0]
	list->tail = node;
    501a:	6263      	str	r3, [r4, #36]	; 0x24
}
    501c:	e7f3      	b.n	5006 <hci_num_completed_packets+0xaa>
    501e:	bf00      	nop
    5020:	20000ed0 	.word	0x20000ed0

00005024 <hci_cmd_done.isra.0>:
static void hci_cmd_done(uint16_t opcode, uint8_t status, struct net_buf *buf)
    5024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5026:	4606      	mov	r6, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    5028:	7988      	ldrb	r0, [r1, #6]
static void hci_cmd_done(uint16_t opcode, uint8_t status, struct net_buf *buf)
    502a:	460c      	mov	r4, r1
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    502c:	f00e fcca 	bl	139c4 <net_buf_pool_get>
    5030:	4b28      	ldr	r3, [pc, #160]	; (50d4 <hci_cmd_done.isra.0+0xb0>)
    5032:	4283      	cmp	r3, r0
    5034:	d14c      	bne.n	50d0 <hci_cmd_done.isra.0+0xac>
	if (cmd(buf)->opcode != opcode) {
    5036:	4620      	mov	r0, r4
    5038:	f00e fccc 	bl	139d4 <net_buf_id>
	if (cmd(buf)->state && !status) {
    503c:	4620      	mov	r0, r4
    503e:	f00e fcc9 	bl	139d4 <net_buf_id>
    5042:	4d25      	ldr	r5, [pc, #148]	; (50d8 <hci_cmd_done.isra.0+0xb4>)
    5044:	270c      	movs	r7, #12
    5046:	fb07 5300 	mla	r3, r7, r0, r5
    504a:	685b      	ldr	r3, [r3, #4]
    504c:	b1e3      	cbz	r3, 5088 <hci_cmd_done.isra.0+0x64>
    504e:	b9de      	cbnz	r6, 5088 <hci_cmd_done.isra.0+0x64>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    5050:	4620      	mov	r0, r4
    5052:	f00e fcbf 	bl	139d4 <net_buf_id>
    5056:	fb07 5000 	mla	r0, r7, r0, r5
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    505a:	2201      	movs	r2, #1
    505c:	6840      	ldr	r0, [r0, #4]
    505e:	e9d0 3100 	ldrd	r3, r1, [r0]

	if (val) {
    5062:	7a00      	ldrb	r0, [r0, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
    5064:	f001 071f 	and.w	r7, r1, #31
    5068:	40ba      	lsls	r2, r7
	if (val) {
    506a:	0949      	lsrs	r1, r1, #5
    506c:	b318      	cbz	r0, 50b6 <hci_cmd_done.isra.0+0x92>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    506e:	f3bf 8f5b 	dmb	ish
    5072:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    5076:	e853 1f00 	ldrex	r1, [r3]
    507a:	4311      	orrs	r1, r2
    507c:	e843 1000 	strex	r0, r1, [r3]
    5080:	2800      	cmp	r0, #0
    5082:	d1f8      	bne.n	5076 <hci_cmd_done.isra.0+0x52>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5084:	f3bf 8f5b 	dmb	ish
	if (cmd(buf)->sync) {
    5088:	4620      	mov	r0, r4
    508a:	f00e fca3 	bl	139d4 <net_buf_id>
    508e:	270c      	movs	r7, #12
    5090:	fb07 5000 	mla	r0, r7, r0, r5
    5094:	6883      	ldr	r3, [r0, #8]
    5096:	b1db      	cbz	r3, 50d0 <hci_cmd_done.isra.0+0xac>
		cmd(buf)->status = status;
    5098:	4620      	mov	r0, r4
    509a:	f00e fc9b 	bl	139d4 <net_buf_id>
    509e:	4378      	muls	r0, r7
    50a0:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    50a2:	4620      	mov	r0, r4
    50a4:	f00e fc96 	bl	139d4 <net_buf_id>
    50a8:	fb07 5500 	mla	r5, r7, r0, r5
    50ac:	68a8      	ldr	r0, [r5, #8]
}
    50ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    50b2:	f010 b92f 	b.w	15314 <z_impl_k_sem_give>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    50b6:	43d2      	mvns	r2, r2
    50b8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    50bc:	f3bf 8f5b 	dmb	ish
    50c0:	e853 1f00 	ldrex	r1, [r3]
    50c4:	4011      	ands	r1, r2
    50c6:	e843 1000 	strex	r0, r1, [r3]
    50ca:	2800      	cmp	r0, #0
    50cc:	d0da      	beq.n	5084 <hci_cmd_done.isra.0+0x60>
    50ce:	e7f7      	b.n	50c0 <hci_cmd_done.isra.0+0x9c>
    50d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    50d2:	bf00      	nop
    50d4:	20000718 	.word	0x20000718
    50d8:	20001010 	.word	0x20001010

000050dc <hci_cmd_status>:
{
    50dc:	b538      	push	{r3, r4, r5, lr}
    50de:	2104      	movs	r1, #4
    50e0:	4604      	mov	r4, r0
    50e2:	3008      	adds	r0, #8
    50e4:	f013 fba8 	bl	18838 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    50e8:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    50ea:	7800      	ldrb	r0, [r0, #0]
    50ec:	4621      	mov	r1, r4
    50ee:	f7ff ff99 	bl	5024 <hci_cmd_done.isra.0>
	if (ncmd) {
    50f2:	b125      	cbz	r5, 50fe <hci_cmd_status+0x22>
    50f4:	4802      	ldr	r0, [pc, #8]	; (5100 <hci_cmd_status+0x24>)
}
    50f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    50fa:	f010 b90b 	b.w	15314 <z_impl_k_sem_give>
    50fe:	bd38      	pop	{r3, r4, r5, pc}
    5100:	200000e8 	.word	0x200000e8

00005104 <hci_cmd_complete>:
{
    5104:	b538      	push	{r3, r4, r5, lr}
    5106:	2103      	movs	r1, #3
    5108:	4604      	mov	r4, r0
    510a:	3008      	adds	r0, #8
    510c:	f013 fb94 	bl	18838 <net_buf_simple_pull_mem>
	status = buf->data[0];
    5110:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    5112:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    5114:	7818      	ldrb	r0, [r3, #0]
    5116:	4621      	mov	r1, r4
    5118:	f7ff ff84 	bl	5024 <hci_cmd_done.isra.0>
	if (ncmd) {
    511c:	b125      	cbz	r5, 5128 <hci_cmd_complete+0x24>
    511e:	4803      	ldr	r0, [pc, #12]	; (512c <hci_cmd_complete+0x28>)
}
    5120:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5124:	f010 b8f6 	b.w	15314 <z_impl_k_sem_give>
    5128:	bd38      	pop	{r3, r4, r5, pc}
    512a:	bf00      	nop
    512c:	200000e8 	.word	0x200000e8

00005130 <bt_hci_cmd_state_set_init>:
{
    5130:	b510      	push	{r4, lr}
	state->bit = bit;
    5132:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
    5136:	f89d 3008 	ldrb.w	r3, [sp, #8]
    513a:	720b      	strb	r3, [r1, #8]
{
    513c:	460c      	mov	r4, r1
	cmd(buf)->state = state;
    513e:	f00e fc49 	bl	139d4 <net_buf_id>
    5142:	4b03      	ldr	r3, [pc, #12]	; (5150 <bt_hci_cmd_state_set_init+0x20>)
    5144:	220c      	movs	r2, #12
    5146:	fb02 3000 	mla	r0, r2, r0, r3
    514a:	6044      	str	r4, [r0, #4]
}
    514c:	bd10      	pop	{r4, pc}
    514e:	bf00      	nop
    5150:	20001010 	.word	0x20001010

00005154 <bt_hci_cmd_create>:
{
    5154:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return net_buf_alloc_fixed(pool, timeout);
    5158:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    515c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5160:	4605      	mov	r5, r0
    5162:	4816      	ldr	r0, [pc, #88]	; (51bc <bt_hci_cmd_create+0x68>)
	cmd(buf)->opcode = opcode;
    5164:	f8df 8058 	ldr.w	r8, [pc, #88]	; 51c0 <bt_hci_cmd_create+0x6c>
{
    5168:	460e      	mov	r6, r1
    516a:	f013 faf0 	bl	1874e <net_buf_alloc_fixed>
    516e:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
    5170:	f100 0b08 	add.w	fp, r0, #8
    5174:	2100      	movs	r1, #0
    5176:	2700      	movs	r7, #0
    5178:	4658      	mov	r0, fp
    517a:	f013 fb07 	bl	1878c <net_buf_simple_reserve>
    517e:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
    5180:	4620      	mov	r0, r4
    5182:	f00e fc27 	bl	139d4 <net_buf_id>
    5186:	f04f 0a0c 	mov.w	sl, #12
    518a:	fb0a 8000 	mla	r0, sl, r0, r8
    518e:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
    5190:	4620      	mov	r0, r4
    5192:	f00e fc1f 	bl	139d4 <net_buf_id>
    5196:	fb0a 8000 	mla	r0, sl, r0, r8
    519a:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
    519c:	4620      	mov	r0, r4
    519e:	f00e fc19 	bl	139d4 <net_buf_id>
    51a2:	fb0a 8000 	mla	r0, sl, r0, r8
	return net_buf_simple_add(&buf->b, len);
    51a6:	2103      	movs	r1, #3
    51a8:	6047      	str	r7, [r0, #4]
    51aa:	4658      	mov	r0, fp
    51ac:	f013 fb25 	bl	187fa <net_buf_simple_add>
	hdr->param_len = param_len;
    51b0:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    51b2:	8005      	strh	r5, [r0, #0]
}
    51b4:	4620      	mov	r0, r4
    51b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    51ba:	bf00      	nop
    51bc:	20000718 	.word	0x20000718
    51c0:	20001010 	.word	0x20001010

000051c4 <bt_hci_cmd_send_sync>:
{
    51c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    51c6:	4615      	mov	r5, r2
    51c8:	b087      	sub	sp, #28
	if (!buf) {
    51ca:	460c      	mov	r4, r1
    51cc:	b921      	cbnz	r1, 51d8 <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
    51ce:	f7ff ffc1 	bl	5154 <bt_hci_cmd_create>
		if (!buf) {
    51d2:	4604      	mov	r4, r0
    51d4:	2800      	cmp	r0, #0
    51d6:	d048      	beq.n	526a <bt_hci_cmd_send_sync+0xa6>
	return z_impl_k_sem_init(sem, initial_count, limit);
    51d8:	2201      	movs	r2, #1
    51da:	2100      	movs	r1, #0
    51dc:	4668      	mov	r0, sp
    51de:	f013 fe58 	bl	18e92 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    51e2:	4620      	mov	r0, r4
    51e4:	f00e fbf6 	bl	139d4 <net_buf_id>
    51e8:	4e21      	ldr	r6, [pc, #132]	; (5270 <bt_hci_cmd_send_sync+0xac>)
    51ea:	230c      	movs	r3, #12
    51ec:	fb03 6000 	mla	r0, r3, r0, r6
    51f0:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
    51f4:	4620      	mov	r0, r4
    51f6:	f013 fada 	bl	187ae <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    51fa:	481e      	ldr	r0, [pc, #120]	; (5274 <bt_hci_cmd_send_sync+0xb0>)
    51fc:	4621      	mov	r1, r4
    51fe:	f013 fac9 	bl	18794 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    5202:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    5206:	2300      	movs	r3, #0
    5208:	4668      	mov	r0, sp
    520a:	f010 f8a9 	bl	15360 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    520e:	4607      	mov	r7, r0
    5210:	b180      	cbz	r0, 5234 <bt_hci_cmd_send_sync+0x70>
    5212:	4a19      	ldr	r2, [pc, #100]	; (5278 <bt_hci_cmd_send_sync+0xb4>)
    5214:	4919      	ldr	r1, [pc, #100]	; (527c <bt_hci_cmd_send_sync+0xb8>)
    5216:	481a      	ldr	r0, [pc, #104]	; (5280 <bt_hci_cmd_send_sync+0xbc>)
    5218:	f240 1337 	movw	r3, #311	; 0x137
    521c:	f010 fd90 	bl	15d40 <printk>
    5220:	4818      	ldr	r0, [pc, #96]	; (5284 <bt_hci_cmd_send_sync+0xc0>)
    5222:	4639      	mov	r1, r7
    5224:	f010 fd8c 	bl	15d40 <printk>
    5228:	4040      	eors	r0, r0
    522a:	f380 8811 	msr	BASEPRI, r0
    522e:	f04f 0003 	mov.w	r0, #3
    5232:	df02      	svc	2
	status = cmd(buf)->status;
    5234:	4620      	mov	r0, r4
    5236:	f00e fbcd 	bl	139d4 <net_buf_id>
    523a:	230c      	movs	r3, #12
    523c:	4343      	muls	r3, r0
    523e:	5cf6      	ldrb	r6, [r6, r3]
	if (status) {
    5240:	b156      	cbz	r6, 5258 <bt_hci_cmd_send_sync+0x94>
		net_buf_unref(buf);
    5242:	4620      	mov	r0, r4
    5244:	f00e fc7a 	bl	13b3c <net_buf_unref>
			return -EIO;
    5248:	2e09      	cmp	r6, #9
    524a:	bf0c      	ite	eq
    524c:	f06f 003c 	mvneq.w	r0, #60	; 0x3c
    5250:	f06f 0004 	mvnne.w	r0, #4
}
    5254:	b007      	add	sp, #28
    5256:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
    5258:	b115      	cbz	r5, 5260 <bt_hci_cmd_send_sync+0x9c>
		*rsp = buf;
    525a:	602c      	str	r4, [r5, #0]
	return 0;
    525c:	4630      	mov	r0, r6
    525e:	e7f9      	b.n	5254 <bt_hci_cmd_send_sync+0x90>
		net_buf_unref(buf);
    5260:	4620      	mov	r0, r4
    5262:	f00e fc6b 	bl	13b3c <net_buf_unref>
	return 0;
    5266:	4628      	mov	r0, r5
    5268:	e7f4      	b.n	5254 <bt_hci_cmd_send_sync+0x90>
			return -ENOBUFS;
    526a:	f06f 0036 	mvn.w	r0, #54	; 0x36
    526e:	e7f1      	b.n	5254 <bt_hci_cmd_send_sync+0x90>
    5270:	20001010 	.word	0x20001010
    5274:	20000104 	.word	0x20000104
    5278:	0001a7fc 	.word	0x0001a7fc
    527c:	0001a830 	.word	0x0001a830
    5280:	0001a839 	.word	0x0001a839
    5284:	0001a856 	.word	0x0001a856

00005288 <hci_init>:
	}
}
#endif /* CONFIG_BT_HCI_VS_EXT */

static int hci_init(void)
{
    5288:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    528a:	4d3d      	ldr	r5, [pc, #244]	; (5380 <hci_init+0xf8>)
    528c:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
    5290:	6899      	ldr	r1, [r3, #8]
    5292:	f011 0101 	ands.w	r1, r1, #1
    5296:	d123      	bne.n	52e0 <hci_init+0x58>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    5298:	aa01      	add	r2, sp, #4
    529a:	f640 4003 	movw	r0, #3075	; 0xc03
    529e:	f7ff ff91 	bl	51c4 <bt_hci_cmd_send_sync>
		if (err) {
    52a2:	4604      	mov	r4, r0
    52a4:	2800      	cmp	r0, #0
    52a6:	d168      	bne.n	537a <hci_init+0xf2>
		hci_reset_complete(rsp);
    52a8:	9b01      	ldr	r3, [sp, #4]
	uint8_t status = buf->data[0];
    52aa:	689b      	ldr	r3, [r3, #8]
	if (status) {
    52ac:	781b      	ldrb	r3, [r3, #0]
    52ae:	b9a3      	cbnz	r3, 52da <hci_init+0x52>
		bt_scan_reset();
    52b0:	f000 ffba 	bl	6228 <bt_scan_reset>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    52b4:	f3bf 8f5b 	dmb	ish
    52b8:	462b      	mov	r3, r5
    52ba:	f853 2f98 	ldr.w	r2, [r3, #152]!
    52be:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    52c2:	f002 0205 	and.w	r2, r2, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    52c6:	f3bf 8f5b 	dmb	ish
    52ca:	e853 1f00 	ldrex	r1, [r3]
    52ce:	e843 2000 	strex	r0, r2, [r3]
    52d2:	2800      	cmp	r0, #0
    52d4:	d1f9      	bne.n	52ca <hci_init+0x42>
    52d6:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    52da:	9801      	ldr	r0, [sp, #4]
    52dc:	f00e fc2e 	bl	13b3c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    52e0:	aa01      	add	r2, sp, #4
    52e2:	2100      	movs	r1, #0
    52e4:	f241 0003 	movw	r0, #4099	; 0x1003
    52e8:	f7ff ff6c 	bl	51c4 <bt_hci_cmd_send_sync>
	if (err) {
    52ec:	4604      	mov	r4, r0
    52ee:	2800      	cmp	r0, #0
    52f0:	d143      	bne.n	537a <hci_init+0xf2>
	read_local_features_complete(rsp);
    52f2:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    52f4:	4823      	ldr	r0, [pc, #140]	; (5384 <hci_init+0xfc>)
    52f6:	6899      	ldr	r1, [r3, #8]
    52f8:	2208      	movs	r2, #8
    52fa:	3101      	adds	r1, #1
    52fc:	f011 fbd8 	bl	16ab0 <memcpy>
	net_buf_unref(rsp);
    5300:	9801      	ldr	r0, [sp, #4]
    5302:	f00e fc1b 	bl	13b3c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    5306:	4621      	mov	r1, r4
    5308:	aa01      	add	r2, sp, #4
    530a:	f241 0001 	movw	r0, #4097	; 0x1001
    530e:	f7ff ff59 	bl	51c4 <bt_hci_cmd_send_sync>
	if (err) {
    5312:	4604      	mov	r4, r0
    5314:	2800      	cmp	r0, #0
    5316:	d130      	bne.n	537a <hci_init+0xf2>
	read_local_ver_complete(rsp);
    5318:	9801      	ldr	r0, [sp, #4]
    531a:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    531c:	785a      	ldrb	r2, [r3, #1]
    531e:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    5322:	78d9      	ldrb	r1, [r3, #3]
    5324:	789a      	ldrb	r2, [r3, #2]
    5326:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    532a:	86ea      	strh	r2, [r5, #54]	; 0x36
	bt_dev.lmp_version = rp->lmp_version;
    532c:	791a      	ldrb	r2, [r3, #4]
    532e:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    5332:	7a19      	ldrb	r1, [r3, #8]
    5334:	79da      	ldrb	r2, [r3, #7]
    5336:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    533a:	872a      	strh	r2, [r5, #56]	; 0x38
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    533c:	795a      	ldrb	r2, [r3, #5]
    533e:	799b      	ldrb	r3, [r3, #6]
    5340:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    5344:	876b      	strh	r3, [r5, #58]	; 0x3a
	net_buf_unref(rsp);
    5346:	f00e fbf9 	bl	13b3c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    534a:	4621      	mov	r1, r4
    534c:	aa01      	add	r2, sp, #4
    534e:	f241 0002 	movw	r0, #4098	; 0x1002
    5352:	f7ff ff37 	bl	51c4 <bt_hci_cmd_send_sync>
	if (err) {
    5356:	4604      	mov	r4, r0
    5358:	b978      	cbnz	r0, 537a <hci_init+0xf2>
	read_supported_commands_complete(rsp);
    535a:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
    535c:	480a      	ldr	r0, [pc, #40]	; (5388 <hci_init+0x100>)
    535e:	6899      	ldr	r1, [r3, #8]
    5360:	2240      	movs	r2, #64	; 0x40
    5362:	3101      	adds	r1, #1
    5364:	f011 fba4 	bl	16ab0 <memcpy>
	net_buf_unref(rsp);
    5368:	9801      	ldr	r0, [sp, #4]
    536a:	f00e fbe7 	bl	13b3c <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    536e:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    5372:	065e      	lsls	r6, r3, #25
    5374:	d40a      	bmi.n	538c <hci_init+0x104>
		return -ENODEV;
    5376:	f06f 0412 	mvn.w	r4, #18
	if (err) {
		return err;
	}

	return 0;
}
    537a:	4620      	mov	r0, r4
    537c:	b002      	add	sp, #8
    537e:	bd70      	pop	{r4, r5, r6, pc}
    5380:	20000000 	.word	0x20000000
    5384:	2000003c 	.word	0x2000003c
    5388:	20000044 	.word	0x20000044
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    538c:	4621      	mov	r1, r4
    538e:	aa01      	add	r2, sp, #4
    5390:	f242 0003 	movw	r0, #8195	; 0x2003
    5394:	f7ff ff16 	bl	51c4 <bt_hci_cmd_send_sync>
	if (err) {
    5398:	4604      	mov	r4, r0
    539a:	2800      	cmp	r0, #0
    539c:	d1ed      	bne.n	537a <hci_init+0xf2>
	read_le_features_complete(rsp);
    539e:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    53a0:	4897      	ldr	r0, [pc, #604]	; (5600 <hci_init+0x378>)
    53a2:	6899      	ldr	r1, [r3, #8]
    53a4:	2208      	movs	r2, #8
    53a6:	3101      	adds	r1, #1
    53a8:	f011 fb82 	bl	16ab0 <memcpy>
	net_buf_unref(rsp);
    53ac:	9801      	ldr	r0, [sp, #4]
    53ae:	f00e fbc5 	bl	13b3c <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    53b2:	4621      	mov	r1, r4
    53b4:	aa01      	add	r2, sp, #4
    53b6:	f242 0002 	movw	r0, #8194	; 0x2002
    53ba:	f7ff ff03 	bl	51c4 <bt_hci_cmd_send_sync>
		if (err) {
    53be:	4604      	mov	r4, r0
    53c0:	2800      	cmp	r0, #0
    53c2:	d1da      	bne.n	537a <hci_init+0xf2>
		le_read_buffer_size_complete(rsp);
    53c4:	9b01      	ldr	r3, [sp, #4]
    53c6:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    53c8:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    53cc:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
    53d0:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
    53d2:	b121      	cbz	r1, 53de <hci_init+0x156>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    53d4:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
    53d6:	488b      	ldr	r0, [pc, #556]	; (5604 <hci_init+0x37c>)
    53d8:	4611      	mov	r1, r2
    53da:	f013 fd5a 	bl	18e92 <z_impl_k_sem_init>
		net_buf_unref(rsp);
    53de:	9801      	ldr	r0, [sp, #4]
    53e0:	f00e fbac 	bl	13b3c <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    53e4:	f895 6040 	ldrb.w	r6, [r5, #64]	; 0x40
    53e8:	f016 0620 	ands.w	r6, r6, #32
    53ec:	f000 80ec 	beq.w	55c8 <hci_init+0x340>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    53f0:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    53f4:	071c      	lsls	r4, r3, #28
    53f6:	d511      	bpl.n	541c <hci_init+0x194>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    53f8:	aa01      	add	r2, sp, #4
    53fa:	2100      	movs	r1, #0
    53fc:	f242 001c 	movw	r0, #8220	; 0x201c
    5400:	f7ff fee0 	bl	51c4 <bt_hci_cmd_send_sync>
		if (err) {
    5404:	4604      	mov	r4, r0
    5406:	2800      	cmp	r0, #0
    5408:	d1b7      	bne.n	537a <hci_init+0xf2>
		le_read_supp_states_complete(rsp);
    540a:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    540c:	6883      	ldr	r3, [r0, #8]
    540e:	f853 2f01 	ldr.w	r2, [r3, #1]!
    5412:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    5414:	e9c5 232a 	strd	r2, r3, [r5, #168]	; 0xa8
		net_buf_unref(rsp);
    5418:	f00e fb90 	bl	13b3c <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    541c:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
    5420:	0698      	lsls	r0, r3, #26
    5422:	d523      	bpl.n	546c <hci_init+0x1e4>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    5424:	f10d 0102 	add.w	r1, sp, #2
    5428:	4668      	mov	r0, sp
    542a:	f011 fd0f 	bl	16e4c <hci_le_read_max_data_len>
		if (err) {
    542e:	4604      	mov	r4, r0
    5430:	2800      	cmp	r0, #0
    5432:	d1a2      	bne.n	537a <hci_init+0xf2>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    5434:	2104      	movs	r1, #4
    5436:	f242 0024 	movw	r0, #8228	; 0x2024
    543a:	f7ff fe8b 	bl	5154 <bt_hci_cmd_create>
		if (!buf) {
    543e:	4606      	mov	r6, r0
    5440:	2800      	cmp	r0, #0
    5442:	f000 80c8 	beq.w	55d6 <hci_init+0x34e>
    5446:	2104      	movs	r1, #4
    5448:	3008      	adds	r0, #8
    544a:	f013 f9d6 	bl	187fa <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    544e:	f8bd 3000 	ldrh.w	r3, [sp]
    5452:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    5454:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    5458:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    545a:	4622      	mov	r2, r4
    545c:	4631      	mov	r1, r6
    545e:	f242 0024 	movw	r0, #8228	; 0x2024
    5462:	f7ff feaf 	bl	51c4 <bt_hci_cmd_send_sync>
		if (err) {
    5466:	4604      	mov	r4, r0
    5468:	2800      	cmp	r0, #0
    546a:	d186      	bne.n	537a <hci_init+0xf2>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    546c:	2108      	movs	r1, #8
    546e:	f242 0001 	movw	r0, #8193	; 0x2001
    5472:	f7ff fe6f 	bl	5154 <bt_hci_cmd_create>
	if (!buf) {
    5476:	4604      	mov	r4, r0
    5478:	2800      	cmp	r0, #0
    547a:	f000 80ac 	beq.w	55d6 <hci_init+0x34e>
    547e:	2108      	movs	r1, #8
    5480:	4408      	add	r0, r1
    5482:	f013 f9ba 	bl	187fa <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    5486:	f895 20a0 	ldrb.w	r2, [r5, #160]	; 0xa0
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    548a:	f012 0f02 	tst.w	r2, #2
    548e:	bf14      	ite	ne
    5490:	232f      	movne	r3, #47	; 0x2f
    5492:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    5494:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    5496:	f895 20a1 	ldrb.w	r2, [r5, #161]	; 0xa1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    549a:	bf48      	it	mi
    549c:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    54a0:	f012 0f09 	tst.w	r2, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    54a4:	bf18      	it	ne
    54a6:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
	dst[0] = val;
    54aa:	2200      	movs	r2, #0
    54ac:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    54ae:	f3c3 2307 	ubfx	r3, r3, #8, #8
    54b2:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    54b4:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    54b6:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    54b8:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    54ba:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    54bc:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    54be:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    54c0:	4621      	mov	r1, r4
    54c2:	f242 0001 	movw	r0, #8193	; 0x2001
    54c6:	f7ff fe7d 	bl	51c4 <bt_hci_cmd_send_sync>
	if (err) {
    54ca:	4604      	mov	r4, r0
    54cc:	2800      	cmp	r0, #0
    54ce:	f47f af54 	bne.w	537a <hci_init+0xf2>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    54d2:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    54d6:	069a      	lsls	r2, r3, #26
    54d8:	d41e      	bmi.n	5518 <hci_init+0x290>
	if (bt_dev.le.acl_mtu) {
    54da:	f8b5 10cc 	ldrh.w	r1, [r5, #204]	; 0xcc
    54de:	b9d9      	cbnz	r1, 5518 <hci_init+0x290>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    54e0:	aa01      	add	r2, sp, #4
    54e2:	f241 0005 	movw	r0, #4101	; 0x1005
    54e6:	f7ff fe6d 	bl	51c4 <bt_hci_cmd_send_sync>
	if (err) {
    54ea:	4604      	mov	r4, r0
    54ec:	2800      	cmp	r0, #0
    54ee:	f47f af44 	bne.w	537a <hci_init+0xf2>
	if (bt_dev.le.acl_mtu) {
    54f2:	f8b5 30cc 	ldrh.w	r3, [r5, #204]	; 0xcc
    54f6:	b963      	cbnz	r3, 5512 <hci_init+0x28a>
	read_buffer_size_complete(rsp);
    54f8:	9b01      	ldr	r3, [sp, #4]
    54fa:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    54fc:	785a      	ldrb	r2, [r3, #1]
    54fe:	7899      	ldrb	r1, [r3, #2]
    5500:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    5504:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    5508:	889a      	ldrh	r2, [r3, #4]
    550a:	483e      	ldr	r0, [pc, #248]	; (5604 <hci_init+0x37c>)
    550c:	4611      	mov	r1, r2
    550e:	f013 fcc0 	bl	18e92 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    5512:	9801      	ldr	r0, [sp, #4]
    5514:	f00e fb12 	bl	13b3c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    5518:	2108      	movs	r1, #8
    551a:	f640 4001 	movw	r0, #3073	; 0xc01
    551e:	f7ff fe19 	bl	5154 <bt_hci_cmd_create>
	if (!buf) {
    5522:	4604      	mov	r4, r0
    5524:	2800      	cmp	r0, #0
    5526:	d056      	beq.n	55d6 <hci_init+0x34e>
    5528:	2108      	movs	r1, #8
    552a:	4408      	add	r0, r1
    552c:	f013 f965 	bl	187fa <net_buf_simple_add>
	dst[0] = val;
    5530:	2310      	movs	r3, #16
    5532:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    5534:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
    5536:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    5538:	7043      	strb	r3, [r0, #1]
    553a:	2602      	movs	r6, #2
    553c:	2320      	movs	r3, #32
	dst[0] = val;
    553e:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    5540:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
    5542:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    5544:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    5546:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    5548:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    554a:	4621      	mov	r1, r4
    554c:	f640 4001 	movw	r0, #3073	; 0xc01
    5550:	f7ff fe38 	bl	51c4 <bt_hci_cmd_send_sync>
	if (err) {
    5554:	4604      	mov	r4, r0
    5556:	2800      	cmp	r0, #0
    5558:	f47f af0f 	bne.w	537a <hci_init+0xf2>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    555c:	4601      	mov	r1, r0
    555e:	aa01      	add	r2, sp, #4
    5560:	f64f 4001 	movw	r0, #64513	; 0xfc01
    5564:	f7ff fe2e 	bl	51c4 <bt_hci_cmd_send_sync>
	if (err) {
    5568:	4604      	mov	r4, r0
    556a:	bb48      	cbnz	r0, 55c0 <hci_init+0x338>
	net_buf_unref(rsp);
    556c:	9801      	ldr	r0, [sp, #4]
    556e:	f00e fae5 	bl	13b3c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    5572:	4621      	mov	r1, r4
    5574:	aa01      	add	r2, sp, #4
    5576:	f64f 4002 	movw	r0, #64514	; 0xfc02
    557a:	f7ff fe23 	bl	51c4 <bt_hci_cmd_send_sync>
	if (err) {
    557e:	4604      	mov	r4, r0
    5580:	b9f0      	cbnz	r0, 55c0 <hci_init+0x338>
	rp.cmds = (void *)rsp->data;
    5582:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    5584:	4820      	ldr	r0, [pc, #128]	; (5608 <hci_init+0x380>)
    5586:	6899      	ldr	r1, [r3, #8]
    5588:	4632      	mov	r2, r6
    558a:	3101      	adds	r1, #1
    558c:	f011 fa90 	bl	16ab0 <memcpy>
	net_buf_unref(rsp);
    5590:	9801      	ldr	r0, [sp, #4]
    5592:	f00e fad3 	bl	13b3c <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    5596:	f895 3085 	ldrb.w	r3, [r5, #133]	; 0x85
    559a:	075b      	lsls	r3, r3, #29
    559c:	d510      	bpl.n	55c0 <hci_init+0x338>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    559e:	aa01      	add	r2, sp, #4
    55a0:	4621      	mov	r1, r4
    55a2:	f64f 4003 	movw	r0, #64515	; 0xfc03
    55a6:	f7ff fe0d 	bl	51c4 <bt_hci_cmd_send_sync>
		if (err) {
    55aa:	b948      	cbnz	r0, 55c0 <hci_init+0x338>
		rp.feat = (void *)rsp->data;
    55ac:	9b01      	ldr	r3, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
    55ae:	4817      	ldr	r0, [pc, #92]	; (560c <hci_init+0x384>)
    55b0:	6899      	ldr	r1, [r3, #8]
    55b2:	2201      	movs	r2, #1
    55b4:	4411      	add	r1, r2
    55b6:	f011 fa7b 	bl	16ab0 <memcpy>
		net_buf_unref(rsp);
    55ba:	9801      	ldr	r0, [sp, #4]
    55bc:	f00e fabe 	bl	13b3c <net_buf_unref>
	err = bt_id_init();
    55c0:	f000 fd8e 	bl	60e0 <bt_id_init>
    55c4:	4604      	mov	r4, r0
	if (err) {
    55c6:	e6d8      	b.n	537a <hci_init+0xf2>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    55c8:	2102      	movs	r1, #2
    55ca:	f640 406d 	movw	r0, #3181	; 0xc6d
    55ce:	f7ff fdc1 	bl	5154 <bt_hci_cmd_create>
		if (!buf) {
    55d2:	4604      	mov	r4, r0
    55d4:	b910      	cbnz	r0, 55dc <hci_init+0x354>
		return -ENOBUFS;
    55d6:	f06f 0436 	mvn.w	r4, #54	; 0x36
    55da:	e6ce      	b.n	537a <hci_init+0xf2>
    55dc:	2102      	movs	r1, #2
    55de:	3008      	adds	r0, #8
    55e0:	f013 f90b 	bl	187fa <net_buf_simple_add>
		cp_le->le = 0x01;
    55e4:	2301      	movs	r3, #1
    55e6:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    55e8:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    55ea:	4621      	mov	r1, r4
    55ec:	4632      	mov	r2, r6
    55ee:	f640 406d 	movw	r0, #3181	; 0xc6d
    55f2:	f7ff fde7 	bl	51c4 <bt_hci_cmd_send_sync>
		if (err) {
    55f6:	4604      	mov	r4, r0
    55f8:	2800      	cmp	r0, #0
    55fa:	f43f aef9 	beq.w	53f0 <hci_init+0x168>
    55fe:	e6bc      	b.n	537a <hci_init+0xf2>
    5600:	200000a0 	.word	0x200000a0
    5604:	200000d0 	.word	0x200000d0
    5608:	20000085 	.word	0x20000085
    560c:	20000084 	.word	0x20000084

00005610 <bt_le_create_conn_legacy>:
{
    5610:	b5f0      	push	{r4, r5, r6, r7, lr}
    5612:	b085      	sub	sp, #20
    5614:	4606      	mov	r6, r0
	err = bt_id_set_create_conn_own_addr(use_filter, &own_addr_type);
    5616:	f10d 0103 	add.w	r1, sp, #3
    561a:	2000      	movs	r0, #0
    561c:	f000 fd40 	bl	60a0 <bt_id_set_create_conn_own_addr>
	if (err) {
    5620:	4604      	mov	r4, r0
    5622:	2800      	cmp	r0, #0
    5624:	d145      	bne.n	56b2 <bt_le_create_conn_legacy+0xa2>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    5626:	2119      	movs	r1, #25
    5628:	f242 000d 	movw	r0, #8205	; 0x200d
    562c:	f7ff fd92 	bl	5154 <bt_hci_cmd_create>
	if (!buf) {
    5630:	4607      	mov	r7, r0
    5632:	2800      	cmp	r0, #0
    5634:	d040      	beq.n	56b8 <bt_le_create_conn_legacy+0xa8>
    5636:	2119      	movs	r1, #25
    5638:	3008      	adds	r0, #8
    563a:	f013 f8de 	bl	187fa <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    563e:	2219      	movs	r2, #25
    5640:	4605      	mov	r5, r0
    5642:	4621      	mov	r1, r4
    5644:	f011 fa5f 	bl	16b06 <memset>
	cp->own_addr_type = own_addr_type;
    5648:	f89d 3003 	ldrb.w	r3, [sp, #3]
    564c:	732b      	strb	r3, [r5, #12]
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
    564e:	f106 0188 	add.w	r1, r6, #136	; 0x88
    5652:	1d68      	adds	r0, r5, #5
    5654:	f011 fb6b 	bl	16d2e <bt_addr_le_copy>
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
    5658:	4b19      	ldr	r3, [pc, #100]	; (56c0 <bt_le_create_conn_legacy+0xb0>)
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_DIRECT;
    565a:	712c      	strb	r4, [r5, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
    565c:	899a      	ldrh	r2, [r3, #12]
    565e:	802a      	strh	r2, [r5, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
    5660:	89da      	ldrh	r2, [r3, #14]
    5662:	806a      	strh	r2, [r5, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    5664:	f8b6 20a0 	ldrh.w	r2, [r6, #160]	; 0xa0
    5668:	f8a5 200d 	strh.w	r2, [r5, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    566c:	f8b6 20a2 	ldrh.w	r2, [r6, #162]	; 0xa2
    5670:	f8a5 200f 	strh.w	r2, [r5, #15]
	state->target = target;
    5674:	3398      	adds	r3, #152	; 0x98
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    5676:	f8b6 20a4 	ldrh.w	r2, [r6, #164]	; 0xa4
    567a:	f8a5 2011 	strh.w	r2, [r5, #17]
	state->target = target;
    567e:	9301      	str	r3, [sp, #4]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    5680:	f8b6 20a6 	ldrh.w	r2, [r6, #166]	; 0xa6
    5684:	f8a5 2013 	strh.w	r2, [r5, #19]
	state->bit = bit;
    5688:	230b      	movs	r3, #11
    568a:	9302      	str	r3, [sp, #8]
	cmd(buf)->state = state;
    568c:	4638      	mov	r0, r7
	state->val = val;
    568e:	2301      	movs	r3, #1
    5690:	f88d 300c 	strb.w	r3, [sp, #12]
	cmd(buf)->state = state;
    5694:	f00e f99e 	bl	139d4 <net_buf_id>
    5698:	4b0a      	ldr	r3, [pc, #40]	; (56c4 <bt_le_create_conn_legacy+0xb4>)
    569a:	220c      	movs	r2, #12
    569c:	fb02 3300 	mla	r3, r2, r0, r3
    56a0:	aa01      	add	r2, sp, #4
    56a2:	605a      	str	r2, [r3, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    56a4:	4639      	mov	r1, r7
    56a6:	4622      	mov	r2, r4
    56a8:	f242 000d 	movw	r0, #8205	; 0x200d
    56ac:	f7ff fd8a 	bl	51c4 <bt_hci_cmd_send_sync>
    56b0:	4604      	mov	r4, r0
}
    56b2:	4620      	mov	r0, r4
    56b4:	b005      	add	sp, #20
    56b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
    56b8:	f06f 0436 	mvn.w	r4, #54	; 0x36
    56bc:	e7f9      	b.n	56b2 <bt_le_create_conn_legacy+0xa2>
    56be:	bf00      	nop
    56c0:	20000000 	.word	0x20000000
    56c4:	20001010 	.word	0x20001010

000056c8 <bt_le_create_conn_cancel>:
{
    56c8:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    56ca:	2100      	movs	r1, #0
{
    56cc:	b085      	sub	sp, #20
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    56ce:	f242 000e 	movw	r0, #8206	; 0x200e
    56d2:	f7ff fd3f 	bl	5154 <bt_hci_cmd_create>
	state->target = target;
    56d6:	4b0c      	ldr	r3, [pc, #48]	; (5708 <bt_le_create_conn_cancel+0x40>)
    56d8:	9301      	str	r3, [sp, #4]
	state->val = val;
    56da:	2500      	movs	r5, #0
	state->bit = bit;
    56dc:	230b      	movs	r3, #11
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    56de:	4604      	mov	r4, r0
	state->bit = bit;
    56e0:	9302      	str	r3, [sp, #8]
	state->val = val;
    56e2:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = state;
    56e6:	f00e f975 	bl	139d4 <net_buf_id>
    56ea:	4b08      	ldr	r3, [pc, #32]	; (570c <bt_le_create_conn_cancel+0x44>)
    56ec:	220c      	movs	r2, #12
    56ee:	fb02 3000 	mla	r0, r2, r0, r3
    56f2:	ab01      	add	r3, sp, #4
    56f4:	6043      	str	r3, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
    56f6:	462a      	mov	r2, r5
    56f8:	4621      	mov	r1, r4
    56fa:	f242 000e 	movw	r0, #8206	; 0x200e
    56fe:	f7ff fd61 	bl	51c4 <bt_hci_cmd_send_sync>
}
    5702:	b005      	add	sp, #20
    5704:	bd30      	pop	{r4, r5, pc}
    5706:	bf00      	nop
    5708:	20000098 	.word	0x20000098
    570c:	20001010 	.word	0x20001010

00005710 <bt_send>:

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
	}

	return bt_dev.drv->send(buf);
    5710:	4b02      	ldr	r3, [pc, #8]	; (571c <bt_send+0xc>)
    5712:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    5716:	691b      	ldr	r3, [r3, #16]
    5718:	4718      	bx	r3
    571a:	bf00      	nop
    571c:	20000000 	.word	0x20000000

00005720 <bt_hci_cmd_send>:
{
    5720:	b538      	push	{r3, r4, r5, lr}
    5722:	4605      	mov	r5, r0
	if (!buf) {
    5724:	460c      	mov	r4, r1
    5726:	b919      	cbnz	r1, 5730 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    5728:	f7ff fd14 	bl	5154 <bt_hci_cmd_create>
		if (!buf) {
    572c:	4604      	mov	r4, r0
    572e:	b198      	cbz	r0, 5758 <bt_hci_cmd_send+0x38>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    5730:	f640 4335 	movw	r3, #3125	; 0xc35
    5734:	429d      	cmp	r5, r3
    5736:	d109      	bne.n	574c <bt_hci_cmd_send+0x2c>
		err = bt_send(buf);
    5738:	4620      	mov	r0, r4
    573a:	f7ff ffe9 	bl	5710 <bt_send>
		if (err) {
    573e:	4605      	mov	r5, r0
    5740:	b110      	cbz	r0, 5748 <bt_hci_cmd_send+0x28>
			net_buf_unref(buf);
    5742:	4620      	mov	r0, r4
    5744:	f00e f9fa 	bl	13b3c <net_buf_unref>
}
    5748:	4628      	mov	r0, r5
    574a:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    574c:	4804      	ldr	r0, [pc, #16]	; (5760 <bt_hci_cmd_send+0x40>)
    574e:	4621      	mov	r1, r4
    5750:	f013 f820 	bl	18794 <net_buf_put>
	return 0;
    5754:	2500      	movs	r5, #0
    5756:	e7f7      	b.n	5748 <bt_hci_cmd_send+0x28>
			return -ENOBUFS;
    5758:	f06f 0536 	mvn.w	r5, #54	; 0x36
    575c:	e7f4      	b.n	5748 <bt_hci_cmd_send+0x28>
    575e:	bf00      	nop
    5760:	20000104 	.word	0x20000104

00005764 <conn_auto_initiate>:
{
    5764:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    5766:	7a83      	ldrb	r3, [r0, #10]
    5768:	2b07      	cmp	r3, #7
{
    576a:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    576c:	d121      	bne.n	57b2 <conn_auto_initiate+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    576e:	f3bf 8f5b 	dmb	ish
    5772:	6843      	ldr	r3, [r0, #4]
    5774:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    5778:	049b      	lsls	r3, r3, #18
    577a:	f100 0604 	add.w	r6, r0, #4
    577e:	d41a      	bmi.n	57b6 <conn_auto_initiate+0x52>
    5780:	78c3      	ldrb	r3, [r0, #3]
    5782:	b123      	cbz	r3, 578e <conn_auto_initiate+0x2a>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
    5784:	4b29      	ldr	r3, [pc, #164]	; (582c <conn_auto_initiate+0xc8>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
    5786:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
    578a:	071d      	lsls	r5, r3, #28
    578c:	d513      	bpl.n	57b6 <conn_auto_initiate+0x52>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    578e:	2102      	movs	r1, #2
    5790:	f242 0016 	movw	r0, #8214	; 0x2016
    5794:	f7ff fcde 	bl	5154 <bt_hci_cmd_create>
	if (!buf) {
    5798:	4605      	mov	r5, r0
    579a:	b160      	cbz	r0, 57b6 <conn_auto_initiate+0x52>
    579c:	2102      	movs	r1, #2
    579e:	3008      	adds	r0, #8
    57a0:	f013 f82b 	bl	187fa <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    57a4:	8823      	ldrh	r3, [r4, #0]
    57a6:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    57a8:	4629      	mov	r1, r5
    57aa:	f242 0016 	movw	r0, #8214	; 0x2016
    57ae:	f7ff ffb7 	bl	5720 <bt_hci_cmd_send>
}
    57b2:	b004      	add	sp, #16
    57b4:	bd70      	pop	{r4, r5, r6, pc}
    57b6:	f3bf 8f5b 	dmb	ish
    57ba:	6863      	ldr	r3, [r4, #4]
    57bc:	4d1b      	ldr	r5, [pc, #108]	; (582c <conn_auto_initiate+0xc8>)
    57be:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    57c2:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    57c6:	f3c3 3100 	ubfx	r1, r3, #12, #1
    57ca:	d117      	bne.n	57fc <conn_auto_initiate+0x98>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    57cc:	f895 30a1 	ldrb.w	r3, [r5, #161]	; 0xa1
    57d0:	07d8      	lsls	r0, r3, #31
    57d2:	d513      	bpl.n	57fc <conn_auto_initiate+0x98>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    57d4:	2302      	movs	r3, #2
    57d6:	9100      	str	r1, [sp, #0]
    57d8:	461a      	mov	r2, r3
    57da:	4620      	mov	r0, r4
    57dc:	f011 fba8 	bl	16f30 <bt_le_set_phy>
		if (!err) {
    57e0:	b960      	cbnz	r0, 57fc <conn_auto_initiate+0x98>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    57e2:	f3bf 8f5b 	dmb	ish
    57e6:	e856 3f00 	ldrex	r3, [r6]
    57ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    57ee:	e846 3200 	strex	r2, r3, [r6]
    57f2:	2a00      	cmp	r2, #0
    57f4:	d1f7      	bne.n	57e6 <conn_auto_initiate+0x82>
    57f6:	f3bf 8f5b 	dmb	ish
			return;
    57fa:	e7da      	b.n	57b2 <conn_auto_initiate+0x4e>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    57fc:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
    5800:	069a      	lsls	r2, r3, #26
    5802:	d5d6      	bpl.n	57b2 <conn_auto_initiate+0x4e>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    5804:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
    5808:	689b      	ldr	r3, [r3, #8]
    580a:	079b      	lsls	r3, r3, #30
    580c:	d5d1      	bpl.n	57b2 <conn_auto_initiate+0x4e>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    580e:	f10d 010e 	add.w	r1, sp, #14
    5812:	a803      	add	r0, sp, #12
    5814:	f011 fb1a 	bl	16e4c <hci_le_read_max_data_len>
			if (!err) {
    5818:	2800      	cmp	r0, #0
    581a:	d1ca      	bne.n	57b2 <conn_auto_initiate+0x4e>
				err = bt_le_set_data_len(conn,
    581c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5820:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    5824:	4620      	mov	r0, r4
    5826:	f011 fb66 	bl	16ef6 <bt_le_set_data_len>
		}
    582a:	e7c2      	b.n	57b2 <conn_auto_initiate+0x4e>
    582c:	20000000 	.word	0x20000000

00005830 <enh_conn_complete>:
{
    5830:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (evt->status) {
    5834:	7805      	ldrb	r5, [r0, #0]
{
    5836:	4604      	mov	r4, r0
	if (evt->status) {
    5838:	b305      	cbz	r5, 587c <enh_conn_complete+0x4c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    583a:	2d02      	cmp	r5, #2
    583c:	d11b      	bne.n	5876 <enh_conn_complete+0x46>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    583e:	2100      	movs	r1, #0
    5840:	2206      	movs	r2, #6
    5842:	4608      	mov	r0, r1
    5844:	f001 f996 	bl	6b74 <bt_conn_lookup_state_le>
	if (!conn) {
    5848:	4604      	mov	r4, r0
    584a:	b188      	cbz	r0, 5870 <enh_conn_complete+0x40>
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
    584c:	7245      	strb	r5, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    584e:	2100      	movs	r1, #0
    5850:	f001 f89c 	bl	698c <bt_conn_set_state>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5854:	f3bf 8f5b 	dmb	ish
    5858:	6863      	ldr	r3, [r4, #4]
    585a:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    585e:	07db      	lsls	r3, r3, #31
    5860:	d503      	bpl.n	586a <enh_conn_complete+0x3a>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    5862:	4629      	mov	r1, r5
    5864:	4620      	mov	r0, r4
    5866:	f001 f891 	bl	698c <bt_conn_set_state>
	bt_conn_unref(conn);
    586a:	4620      	mov	r0, r4
    586c:	f011 fe05 	bl	1747a <bt_conn_unref>
			bt_le_scan_update(false);
    5870:	2000      	movs	r0, #0
    5872:	f000 fcdf 	bl	6234 <bt_le_scan_update>
}
    5876:	b004      	add	sp, #16
    5878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    587c:	7903      	ldrb	r3, [r0, #4]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    587e:	f8b0 7001 	ldrh.w	r7, [r0, #1]
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    5882:	3b02      	subs	r3, #2
    5884:	2b01      	cmp	r3, #1
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    5886:	fa1f f887 	uxth.w	r8, r7
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    588a:	f100 0604 	add.w	r6, r0, #4
    588e:	d82e      	bhi.n	58ee <enh_conn_complete+0xbe>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    5890:	4631      	mov	r1, r6
    5892:	a802      	add	r0, sp, #8
    5894:	f011 fa4b 	bl	16d2e <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    5898:	f89d 3008 	ldrb.w	r3, [sp, #8]
 *  @param dst Bluetooth device address destination buffer.
 *  @param src Bluetooth device address source buffer.
 */
static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    589c:	2206      	movs	r2, #6
    589e:	3b02      	subs	r3, #2
    58a0:	f104 0111 	add.w	r1, r4, #17
    58a4:	f10d 0001 	add.w	r0, sp, #1
    58a8:	f88d 3008 	strb.w	r3, [sp, #8]
    58ac:	f011 f900 	bl	16ab0 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    58b0:	2301      	movs	r3, #1
    58b2:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_MASTER) {
    58b6:	78e0      	ldrb	r0, [r4, #3]
    58b8:	b9a0      	cbnz	r0, 58e4 <enh_conn_complete+0xb4>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    58ba:	2206      	movs	r2, #6
    58bc:	a902      	add	r1, sp, #8
    58be:	f001 f959 	bl	6b74 <bt_conn_lookup_state_le>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    58c2:	78e3      	ldrb	r3, [r4, #3]
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    58c4:	4605      	mov	r5, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    58c6:	b963      	cbnz	r3, 58e2 <enh_conn_complete+0xb2>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    58c8:	f3bf 8f5b 	dmb	ish
    58cc:	4b2e      	ldr	r3, [pc, #184]	; (5988 <enh_conn_complete+0x158>)
    58ce:	e853 2f00 	ldrex	r2, [r3]
    58d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    58d6:	e843 2100 	strex	r1, r2, [r3]
    58da:	2900      	cmp	r1, #0
    58dc:	d1f7      	bne.n	58ce <enh_conn_complete+0x9e>
    58de:	f3bf 8f5b 	dmb	ish
	if (!conn) {
    58e2:	b9bd      	cbnz	r5, 5914 <enh_conn_complete+0xe4>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    58e4:	211f      	movs	r1, #31
    58e6:	4640      	mov	r0, r8
    58e8:	f011 faca 	bl	16e80 <bt_hci_disconnect>
		return;
    58ec:	e7c3      	b.n	5876 <enh_conn_complete+0x46>
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
    58ee:	78c3      	ldrb	r3, [r0, #3]
    58f0:	2b01      	cmp	r3, #1
    58f2:	bf04      	itt	eq
    58f4:	4b25      	ldreq	r3, [pc, #148]	; (598c <enh_conn_complete+0x15c>)
    58f6:	f893 5033 	ldrbeq.w	r5, [r3, #51]	; 0x33
		bt_addr_le_copy(&id_addr,
    58fa:	4631      	mov	r1, r6
    58fc:	4628      	mov	r0, r5
    58fe:	f011 fc71 	bl	171e4 <bt_lookup_id_addr>
    5902:	4601      	mov	r1, r0
    5904:	a802      	add	r0, sp, #8
    5906:	f011 fa12 	bl	16d2e <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    590a:	4631      	mov	r1, r6
    590c:	4668      	mov	r0, sp
    590e:	f011 fa0e 	bl	16d2e <bt_addr_le_copy>
    5912:	e7d0      	b.n	58b6 <enh_conn_complete+0x86>
	conn->handle = handle;
    5914:	4628      	mov	r0, r5
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    5916:	a902      	add	r1, sp, #8
	conn->handle = handle;
    5918:	f820 7b88 	strh.w	r7, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    591c:	f011 fa07 	bl	16d2e <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    5920:	7e22      	ldrb	r2, [r4, #24]
    5922:	7de3      	ldrb	r3, [r4, #23]
    5924:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    5928:	f8a5 309e 	strh.w	r3, [r5, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    592c:	7ea2      	ldrb	r2, [r4, #26]
    592e:	7e63      	ldrb	r3, [r4, #25]
    5930:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    5934:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    5938:	7f22      	ldrb	r2, [r4, #28]
    593a:	7ee3      	ldrb	r3, [r4, #27]
    593c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    5940:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->role = evt->role;
    5944:	78e3      	ldrb	r3, [r4, #3]
    5946:	70eb      	strb	r3, [r5, #3]
	conn->err = 0U;
    5948:	2200      	movs	r2, #0
    594a:	726a      	strb	r2, [r5, #9]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    594c:	b96b      	cbnz	r3, 596a <enh_conn_complete+0x13a>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
    594e:	4669      	mov	r1, sp
    5950:	f105 0096 	add.w	r0, r5, #150	; 0x96
    5954:	f011 f9eb 	bl	16d2e <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
    5958:	7a29      	ldrb	r1, [r5, #8]
			bt_addr_le_copy(&conn->le.init_addr,
    595a:	4b0c      	ldr	r3, [pc, #48]	; (598c <enh_conn_complete+0x15c>)
					&bt_dev.id_addr[conn->id]);
    595c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.init_addr,
    5960:	4419      	add	r1, r3
    5962:	f105 008f 	add.w	r0, r5, #143	; 0x8f
    5966:	f011 f9e2 	bl	16d2e <bt_addr_le_copy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    596a:	2107      	movs	r1, #7
    596c:	4628      	mov	r0, r5
    596e:	f001 f80d 	bl	698c <bt_conn_set_state>
	conn_auto_initiate(conn);
    5972:	4628      	mov	r0, r5
    5974:	f7ff fef6 	bl	5764 <conn_auto_initiate>
	bt_conn_unref(conn);
    5978:	4628      	mov	r0, r5
    597a:	f011 fd7e 	bl	1747a <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    597e:	78eb      	ldrb	r3, [r5, #3]
    5980:	2b00      	cmp	r3, #0
    5982:	f47f af78 	bne.w	5876 <enh_conn_complete+0x46>
    5986:	e773      	b.n	5870 <enh_conn_complete+0x40>
    5988:	20000098 	.word	0x20000098
    598c:	20000000 	.word	0x20000000

00005990 <hci_tx_thread>:
{
    5990:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    5994:	f8df 8104 	ldr.w	r8, [pc, #260]	; 5a9c <hci_tx_thread+0x10c>
		BT_ASSERT(err == 0);
    5998:	f8df a114 	ldr.w	sl, [pc, #276]	; 5ab0 <hci_tx_thread+0x120>
		events[0].state = K_POLL_STATE_NOT_READY;
    599c:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    59a0:	483d      	ldr	r0, [pc, #244]	; (5a98 <hci_tx_thread+0x108>)
		events[0].state = K_POLL_STATE_NOT_READY;
    59a2:	f36f 3310 	bfc	r3, #12, #5
    59a6:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    59aa:	f000 ff7d 	bl	68a8 <bt_conn_prepare_events>
    59ae:	1c45      	adds	r5, r0, #1
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    59b0:	483a      	ldr	r0, [pc, #232]	; (5a9c <hci_tx_thread+0x10c>)
    59b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    59b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    59ba:	4629      	mov	r1, r5
    59bc:	f010 f8da 	bl	15b74 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    59c0:	b160      	cbz	r0, 59dc <hci_tx_thread+0x4c>
    59c2:	4937      	ldr	r1, [pc, #220]	; (5aa0 <hci_tx_thread+0x110>)
    59c4:	4837      	ldr	r0, [pc, #220]	; (5aa4 <hci_tx_thread+0x114>)
    59c6:	f640 1328 	movw	r3, #2344	; 0x928
    59ca:	4652      	mov	r2, sl
    59cc:	f010 f9b8 	bl	15d40 <printk>
    59d0:	4040      	eors	r0, r0
    59d2:	f380 8811 	msr	BASEPRI, r0
    59d6:	f04f 0003 	mov.w	r0, #3
    59da:	df02      	svc	2
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    59dc:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 5ab4 <hci_tx_thread+0x124>
{
    59e0:	4e2e      	ldr	r6, [pc, #184]	; (5a9c <hci_tx_thread+0x10c>)
	return z_impl_k_sem_take(sem, timeout);
    59e2:	f5a9 7782 	sub.w	r7, r9, #260	; 0x104
    59e6:	f1a9 0b1c 	sub.w	fp, r9, #28
	for (; count; ev++, count--) {
    59ea:	b915      	cbnz	r5, 59f2 <hci_tx_thread+0x62>
	z_impl_k_yield();
    59ec:	f00f fba4 	bl	15138 <z_impl_k_yield>
	while (1) {
    59f0:	e7d4      	b.n	599c <hci_tx_thread+0xc>
		switch (ev->state) {
    59f2:	68f3      	ldr	r3, [r6, #12]
    59f4:	f3c3 3304 	ubfx	r3, r3, #12, #5
    59f8:	2b04      	cmp	r3, #4
    59fa:	d142      	bne.n	5a82 <hci_tx_thread+0xf2>
			if (ev->tag == BT_EVENT_CMD_TX) {
    59fc:	7b33      	ldrb	r3, [r6, #12]
    59fe:	2b00      	cmp	r3, #0
    5a00:	d142      	bne.n	5a88 <hci_tx_thread+0xf8>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    5a02:	2200      	movs	r2, #0
    5a04:	2300      	movs	r3, #0
    5a06:	4648      	mov	r0, r9
    5a08:	f012 fea6 	bl	18758 <net_buf_get>
	BT_ASSERT(buf);
    5a0c:	4604      	mov	r4, r0
    5a0e:	b960      	cbnz	r0, 5a2a <hci_tx_thread+0x9a>
    5a10:	4925      	ldr	r1, [pc, #148]	; (5aa8 <hci_tx_thread+0x118>)
    5a12:	4824      	ldr	r0, [pc, #144]	; (5aa4 <hci_tx_thread+0x114>)
    5a14:	f640 03c5 	movw	r3, #2245	; 0x8c5
    5a18:	4652      	mov	r2, sl
    5a1a:	f010 f991 	bl	15d40 <printk>
    5a1e:	4040      	eors	r0, r0
    5a20:	f380 8811 	msr	BASEPRI, r0
    5a24:	f04f 0003 	mov.w	r0, #3
    5a28:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    5a2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5a2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5a32:	4658      	mov	r0, fp
    5a34:	f00f fc94 	bl	15360 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    5a38:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
    5a3c:	b120      	cbz	r0, 5a48 <hci_tx_thread+0xb8>
		net_buf_unref(bt_dev.sent_cmd);
    5a3e:	f00e f87d 	bl	13b3c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    5a42:	2300      	movs	r3, #0
    5a44:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	bt_dev.sent_cmd = net_buf_ref(buf);
    5a48:	4620      	mov	r0, r4
    5a4a:	f012 feb0 	bl	187ae <net_buf_ref>
    5a4e:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
	err = bt_send(buf);
    5a52:	4620      	mov	r0, r4
    5a54:	f7ff fe5c 	bl	5710 <bt_send>
	if (err) {
    5a58:	b198      	cbz	r0, 5a82 <hci_tx_thread+0xf2>
	z_impl_k_sem_give(sem);
    5a5a:	4814      	ldr	r0, [pc, #80]	; (5aac <hci_tx_thread+0x11c>)
    5a5c:	f00f fc5a 	bl	15314 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    5a60:	4620      	mov	r0, r4
    5a62:	f00d ffb7 	bl	139d4 <net_buf_id>
    5a66:	4621      	mov	r1, r4
    5a68:	201f      	movs	r0, #31
    5a6a:	f7ff fadb 	bl	5024 <hci_cmd_done.isra.0>
		net_buf_unref(bt_dev.sent_cmd);
    5a6e:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
    5a72:	f00e f863 	bl	13b3c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    5a76:	2300      	movs	r3, #0
		net_buf_unref(buf);
    5a78:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
    5a7a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
		net_buf_unref(buf);
    5a7e:	f00e f85d 	bl	13b3c <net_buf_unref>
	for (; count; ev++, count--) {
    5a82:	3614      	adds	r6, #20
    5a84:	3d01      	subs	r5, #1
    5a86:	e7b0      	b.n	59ea <hci_tx_thread+0x5a>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    5a88:	2b01      	cmp	r3, #1
    5a8a:	d1fa      	bne.n	5a82 <hci_tx_thread+0xf2>
					conn = CONTAINER_OF(ev->fifo,
    5a8c:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
    5a8e:	3838      	subs	r0, #56	; 0x38
    5a90:	f001 fa68 	bl	6f64 <bt_conn_process_tx>
    5a94:	e7f5      	b.n	5a82 <hci_tx_thread+0xf2>
    5a96:	bf00      	nop
    5a98:	20000164 	.word	0x20000164
    5a9c:	20000150 	.word	0x20000150
    5aa0:	0001a830 	.word	0x0001a830
    5aa4:	0001a839 	.word	0x0001a839
    5aa8:	0001a876 	.word	0x0001a876
    5aac:	200000e8 	.word	0x200000e8
    5ab0:	0001a7fc 	.word	0x0001a7fc
    5ab4:	20000104 	.word	0x20000104

00005ab8 <hci_event_prio>:

#endif /* CONFIG_BT_CONN */
};

void hci_event_prio(struct net_buf *buf)
{
    5ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5abc:	4604      	mov	r4, r0
	struct net_buf_simple_state state;
	struct bt_hci_evt_hdr *hdr;
	uint8_t evt_flags;

	net_buf_simple_save(&buf->b, &state);
    5abe:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    5ac2:	4630      	mov	r0, r6
    5ac4:	f012 fed0 	bl	18868 <net_buf_simple_headroom>
	state->len = buf->len;
    5ac8:	f8b4 800c 	ldrh.w	r8, [r4, #12]

	BT_ASSERT(buf->len >= sizeof(*hdr));
    5acc:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
    5ad0:	4605      	mov	r5, r0
    5ad2:	d80c      	bhi.n	5aee <hci_event_prio+0x36>
    5ad4:	4a1c      	ldr	r2, [pc, #112]	; (5b48 <hci_event_prio+0x90>)
    5ad6:	491d      	ldr	r1, [pc, #116]	; (5b4c <hci_event_prio+0x94>)
    5ad8:	481d      	ldr	r0, [pc, #116]	; (5b50 <hci_event_prio+0x98>)
    5ada:	f640 438f 	movw	r3, #3215	; 0xc8f
    5ade:	f010 f92f 	bl	15d40 <printk>
    5ae2:	4040      	eors	r0, r0
    5ae4:	f380 8811 	msr	BASEPRI, r0
    5ae8:	f04f 0003 	mov.w	r0, #3
    5aec:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    5aee:	2102      	movs	r1, #2
    5af0:	4630      	mov	r0, r6
    5af2:	f012 fea1 	bl	18838 <net_buf_simple_pull_mem>
    5af6:	4607      	mov	r7, r0

	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    5af8:	7800      	ldrb	r0, [r0, #0]
    5afa:	f011 f8f1 	bl	16ce0 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    5afe:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    5b00:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    5b02:	d40c      	bmi.n	5b1e <hci_event_prio+0x66>
    5b04:	4a10      	ldr	r2, [pc, #64]	; (5b48 <hci_event_prio+0x90>)
    5b06:	4913      	ldr	r1, [pc, #76]	; (5b54 <hci_event_prio+0x9c>)
    5b08:	4811      	ldr	r0, [pc, #68]	; (5b50 <hci_event_prio+0x98>)
    5b0a:	f640 4393 	movw	r3, #3219	; 0xc93
    5b0e:	f010 f917 	bl	15d40 <printk>
    5b12:	4040      	eors	r0, r0
    5b14:	f380 8811 	msr	BASEPRI, r0
    5b18:	f04f 0003 	mov.w	r0, #3
    5b1c:	df02      	svc	2

	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    5b1e:	2305      	movs	r3, #5
    5b20:	4a0d      	ldr	r2, [pc, #52]	; (5b58 <hci_event_prio+0xa0>)
    5b22:	7838      	ldrb	r0, [r7, #0]
    5b24:	4621      	mov	r1, r4
    5b26:	f011 f8ed 	bl	16d04 <handle_event>

	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    5b2a:	07b3      	lsls	r3, r6, #30
    5b2c:	d507      	bpl.n	5b3e <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
    5b2e:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    5b30:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    5b34:	fa10 f585 	uxtah	r5, r0, r5
    5b38:	60a5      	str	r5, [r4, #8]
		net_buf_simple_restore(&buf->b, &state);
	} else {
		net_buf_unref(buf);
	}
}
    5b3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    5b3e:	4620      	mov	r0, r4
}
    5b40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    5b44:	f00d bffa 	b.w	13b3c <net_buf_unref>
    5b48:	0001a7fc 	.word	0x0001a7fc
    5b4c:	0001a87a 	.word	0x0001a87a
    5b50:	0001a839 	.word	0x0001a839
    5b54:	0001a893 	.word	0x0001a893
    5b58:	00019784 	.word	0x00019784

00005b5c <bt_recv>:

int bt_recv(struct net_buf *buf)
{
    5b5c:	b570      	push	{r4, r5, r6, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    5b5e:	7d03      	ldrb	r3, [r0, #20]
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_DBG("buf %p len %u", buf, buf->len);

	switch (bt_buf_get_type(buf)) {
    5b60:	2b01      	cmp	r3, #1
{
    5b62:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    5b64:	d036      	beq.n	5bd4 <bt_recv+0x78>
    5b66:	2b03      	cmp	r3, #3
    5b68:	d163      	bne.n	5c32 <bt_recv+0xd6>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    5b6a:	8983      	ldrh	r3, [r0, #12]
    5b6c:	2b03      	cmp	r3, #3
    5b6e:	d80c      	bhi.n	5b8a <bt_recv+0x2e>
    5b70:	4a32      	ldr	r2, [pc, #200]	; (5c3c <bt_recv+0xe0>)
    5b72:	4933      	ldr	r1, [pc, #204]	; (5c40 <bt_recv+0xe4>)
    5b74:	4833      	ldr	r0, [pc, #204]	; (5c44 <bt_recv+0xe8>)
    5b76:	f240 137d 	movw	r3, #381	; 0x17d
    5b7a:	f010 f8e1 	bl	15d40 <printk>
    5b7e:	4040      	eors	r0, r0
    5b80:	f380 8811 	msr	BASEPRI, r0
    5b84:	f04f 0003 	mov.w	r0, #3
    5b88:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    5b8a:	2104      	movs	r1, #4
    5b8c:	f104 0008 	add.w	r0, r4, #8
    5b90:	f012 fe52 	bl	18838 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    5b94:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
    5b96:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    5b98:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    5b9a:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
    5b9c:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
    5b9e:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    5ba2:	429a      	cmp	r2, r3
	acl(buf)->handle = bt_acl_handle(handle);
    5ba4:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
    5ba6:	d003      	beq.n	5bb0 <bt_recv+0x54>
	net_buf_unref(buf);
    5ba8:	4620      	mov	r0, r4
    5baa:	f00d ffc7 	bl	13b3c <net_buf_unref>
    5bae:	e00f      	b.n	5bd0 <bt_recv+0x74>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    5bb0:	f000 fee0 	bl	6974 <bt_conn_lookup_handle>
	if (!conn) {
    5bb4:	4605      	mov	r5, r0
    5bb6:	2800      	cmp	r0, #0
    5bb8:	d0f6      	beq.n	5ba8 <bt_recv+0x4c>
	acl(buf)->index = bt_conn_index(conn);
    5bba:	f001 fa3b 	bl	7034 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    5bbe:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
    5bc0:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    5bc2:	4621      	mov	r1, r4
    5bc4:	4628      	mov	r0, r5
    5bc6:	f011 fbad 	bl	17324 <bt_conn_recv>
	bt_conn_unref(conn);
    5bca:	4628      	mov	r0, r5
    5bcc:	f011 fc55 	bl	1747a <bt_conn_unref>

		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
			net_buf_put(&bt_dev.rx_queue, buf);
		}
#endif
		return 0;
    5bd0:	2000      	movs	r0, #0
	default:
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
		return -EINVAL;
	}
}
    5bd2:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    5bd4:	8983      	ldrh	r3, [r0, #12]
    5bd6:	2b01      	cmp	r3, #1
    5bd8:	d80c      	bhi.n	5bf4 <bt_recv+0x98>
    5bda:	4a18      	ldr	r2, [pc, #96]	; (5c3c <bt_recv+0xe0>)
    5bdc:	4918      	ldr	r1, [pc, #96]	; (5c40 <bt_recv+0xe4>)
    5bde:	4819      	ldr	r0, [pc, #100]	; (5c44 <bt_recv+0xe8>)
    5be0:	f640 03b2 	movw	r3, #2226	; 0x8b2
    5be4:	f010 f8ac 	bl	15d40 <printk>
    5be8:	4040      	eors	r0, r0
    5bea:	f380 8811 	msr	BASEPRI, r0
    5bee:	f04f 0003 	mov.w	r0, #3
    5bf2:	df02      	svc	2
    5bf4:	2102      	movs	r1, #2
    5bf6:	f104 0008 	add.w	r0, r4, #8
    5bfa:	f012 fe1d 	bl	18838 <net_buf_simple_pull_mem>
    5bfe:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    5c00:	7800      	ldrb	r0, [r0, #0]
    5c02:	f011 f86d 	bl	16ce0 <bt_hci_evt_get_flags>
    5c06:	0783      	lsls	r3, r0, #30
    5c08:	d40c      	bmi.n	5c24 <bt_recv+0xc8>
    5c0a:	4a0c      	ldr	r2, [pc, #48]	; (5c3c <bt_recv+0xe0>)
    5c0c:	490e      	ldr	r1, [pc, #56]	; (5c48 <bt_recv+0xec>)
    5c0e:	480d      	ldr	r0, [pc, #52]	; (5c44 <bt_recv+0xe8>)
    5c10:	f640 03b6 	movw	r3, #2230	; 0x8b6
    5c14:	f010 f894 	bl	15d40 <printk>
    5c18:	4040      	eors	r0, r0
    5c1a:	f380 8811 	msr	BASEPRI, r0
    5c1e:	f04f 0003 	mov.w	r0, #3
    5c22:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    5c24:	4a09      	ldr	r2, [pc, #36]	; (5c4c <bt_recv+0xf0>)
    5c26:	7828      	ldrb	r0, [r5, #0]
    5c28:	2304      	movs	r3, #4
    5c2a:	4621      	mov	r1, r4
    5c2c:	f011 f86a 	bl	16d04 <handle_event>
    5c30:	e7ba      	b.n	5ba8 <bt_recv+0x4c>
		net_buf_unref(buf);
    5c32:	f00d ff83 	bl	13b3c <net_buf_unref>
		return -EINVAL;
    5c36:	f06f 0015 	mvn.w	r0, #21
    5c3a:	e7ca      	b.n	5bd2 <bt_recv+0x76>
    5c3c:	0001a7fc 	.word	0x0001a7fc
    5c40:	0001a87a 	.word	0x0001a87a
    5c44:	0001a839 	.word	0x0001a839
    5c48:	0001a8ac 	.word	0x0001a8ac
    5c4c:	00019764 	.word	0x00019764

00005c50 <bt_recv_prio>:

#if defined(CONFIG_BT_RECV_IS_RX_THREAD)
int bt_recv_prio(struct net_buf *buf)
{
    5c50:	b510      	push	{r4, lr}
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    5c52:	7d03      	ldrb	r3, [r0, #20]
    5c54:	2b01      	cmp	r3, #1
{
    5c56:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    5c58:	d00c      	beq.n	5c74 <bt_recv_prio+0x24>
    5c5a:	4a09      	ldr	r2, [pc, #36]	; (5c80 <bt_recv_prio+0x30>)
    5c5c:	4909      	ldr	r1, [pc, #36]	; (5c84 <bt_recv_prio+0x34>)
    5c5e:	480a      	ldr	r0, [pc, #40]	; (5c88 <bt_recv_prio+0x38>)
    5c60:	f640 43d6 	movw	r3, #3286	; 0xcd6
    5c64:	f010 f86c 	bl	15d40 <printk>
    5c68:	4040      	eors	r0, r0
    5c6a:	f380 8811 	msr	BASEPRI, r0
    5c6e:	f04f 0003 	mov.w	r0, #3
    5c72:	df02      	svc	2

	hci_event_prio(buf);
    5c74:	4620      	mov	r0, r4
    5c76:	f7ff ff1f 	bl	5ab8 <hci_event_prio>

	return 0;
}
    5c7a:	2000      	movs	r0, #0
    5c7c:	bd10      	pop	{r4, pc}
    5c7e:	bf00      	nop
    5c80:	0001a7fc 	.word	0x0001a7fc
    5c84:	0001a8da 	.word	0x0001a8da
    5c88:	0001a839 	.word	0x0001a839

00005c8c <bt_hci_driver_register>:
#endif /* defined(CONFIG_BT_RECV_IS_RX_THREAD) */

int bt_hci_driver_register(const struct bt_hci_driver *drv)
{
	if (bt_dev.drv) {
    5c8c:	4a08      	ldr	r2, [pc, #32]	; (5cb0 <bt_hci_driver_register+0x24>)
{
    5c8e:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    5c90:	f8d2 011c 	ldr.w	r0, [r2, #284]	; 0x11c
    5c94:	b930      	cbnz	r0, 5ca4 <bt_hci_driver_register+0x18>
		return -EALREADY;
	}

	if (!drv->open || !drv->send) {
    5c96:	68d9      	ldr	r1, [r3, #12]
    5c98:	b139      	cbz	r1, 5caa <bt_hci_driver_register+0x1e>
    5c9a:	6919      	ldr	r1, [r3, #16]
    5c9c:	b129      	cbz	r1, 5caa <bt_hci_driver_register+0x1e>
		return -EINVAL;
	}

	bt_dev.drv = drv;
    5c9e:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
	BT_DBG("Registered %s", drv->name ? drv->name : "");

	bt_monitor_new_index(BT_MONITOR_TYPE_PRIMARY, drv->bus,
			     BT_ADDR_ANY, drv->name ? drv->name : "bt0");

	return 0;
    5ca2:	4770      	bx	lr
		return -EALREADY;
    5ca4:	f06f 0044 	mvn.w	r0, #68	; 0x44
    5ca8:	4770      	bx	lr
		return -EINVAL;
    5caa:	f06f 0015 	mvn.w	r0, #21
}
    5cae:	4770      	bx	lr
    5cb0:	20000000 	.word	0x20000000

00005cb4 <bt_finalize_init>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5cb4:	4b07      	ldr	r3, [pc, #28]	; (5cd4 <bt_finalize_init+0x20>)
    5cb6:	f3bf 8f5b 	dmb	ish
    5cba:	e853 2f00 	ldrex	r2, [r3]
    5cbe:	f042 0202 	orr.w	r2, r2, #2
    5cc2:	e843 2100 	strex	r1, r2, [r3]
    5cc6:	2900      	cmp	r1, #0
    5cc8:	d1f7      	bne.n	5cba <bt_finalize_init+0x6>
    5cca:	f3bf 8f5b 	dmb	ish
void bt_finalize_init(void)
{
	atomic_set_bit(bt_dev.flags, BT_DEV_READY);

	if (IS_ENABLED(CONFIG_BT_OBSERVER)) {
		bt_le_scan_update(false);
    5cce:	2000      	movs	r0, #0
    5cd0:	f000 bab0 	b.w	6234 <bt_le_scan_update>
    5cd4:	20000098 	.word	0x20000098

00005cd8 <init_work>:
	bt_finalize_init();
	return 0;
}

static void init_work(struct k_work *work)
{
    5cd8:	b510      	push	{r4, lr}
	err = hci_init();
    5cda:	f7ff fad5 	bl	5288 <hci_init>
	if (err) {
    5cde:	4604      	mov	r4, r0
    5ce0:	b928      	cbnz	r0, 5cee <init_work+0x16>
		err = bt_conn_init();
    5ce2:	f001 f9b3 	bl	704c <bt_conn_init>
		if (err) {
    5ce6:	4604      	mov	r4, r0
    5ce8:	b908      	cbnz	r0, 5cee <init_work+0x16>
	bt_finalize_init();
    5cea:	f7ff ffe3 	bl	5cb4 <bt_finalize_init>
	int err;

	err = bt_init();
	if (ready_cb) {
    5cee:	4b04      	ldr	r3, [pc, #16]	; (5d00 <init_work+0x28>)
    5cf0:	681b      	ldr	r3, [r3, #0]
    5cf2:	b11b      	cbz	r3, 5cfc <init_work+0x24>
		ready_cb(err);
    5cf4:	4620      	mov	r0, r4
	}
}
    5cf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    5cfa:	4718      	bx	r3
}
    5cfc:	bd10      	pop	{r4, pc}
    5cfe:	bf00      	nop
    5d00:	20001028 	.word	0x20001028

00005d04 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    5d04:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
    5d06:	4d28      	ldr	r5, [pc, #160]	; (5da8 <bt_enable+0xa4>)
    5d08:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
{
    5d0c:	b088      	sub	sp, #32
    5d0e:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    5d10:	2b00      	cmp	r3, #0
    5d12:	d042      	beq.n	5d9a <bt_enable+0x96>
    5d14:	f3bf 8f5b 	dmb	ish
    5d18:	f105 0298 	add.w	r2, r5, #152	; 0x98
    5d1c:	e852 3f00 	ldrex	r3, [r2]
    5d20:	f043 0101 	orr.w	r1, r3, #1
    5d24:	e842 1000 	strex	r0, r1, [r2]
    5d28:	2800      	cmp	r0, #0
    5d2a:	d1f7      	bne.n	5d1c <bt_enable+0x18>
    5d2c:	f3bf 8f5b 	dmb	ish
		BT_ERR("No HCI driver registered");
		return -ENODEV;
	}

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    5d30:	f013 0301 	ands.w	r3, r3, #1
    5d34:	d134      	bne.n	5da0 <bt_enable+0x9c>
		}
	} else {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}

	ready_cb = cb;
    5d36:	4a1d      	ldr	r2, [pc, #116]	; (5dac <bt_enable+0xa8>)
    5d38:	6016      	str	r6, [r2, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    5d3a:	2000      	movs	r0, #0
    5d3c:	2100      	movs	r1, #0
    5d3e:	f06f 0208 	mvn.w	r2, #8
    5d42:	e9cd 0106 	strd	r0, r1, [sp, #24]
    5d46:	e9cd 3202 	strd	r3, r2, [sp, #8]
    5d4a:	e9cd 3300 	strd	r3, r3, [sp]
    5d4e:	9304      	str	r3, [sp, #16]
    5d50:	4917      	ldr	r1, [pc, #92]	; (5db0 <bt_enable+0xac>)
    5d52:	4b18      	ldr	r3, [pc, #96]	; (5db4 <bt_enable+0xb0>)
    5d54:	4818      	ldr	r0, [pc, #96]	; (5db8 <bt_enable+0xb4>)
    5d56:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5d5a:	f00f fb75 	bl	15448 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    5d5e:	4917      	ldr	r1, [pc, #92]	; (5dbc <bt_enable+0xb8>)
    5d60:	4815      	ldr	r0, [pc, #84]	; (5db8 <bt_enable+0xb4>)
    5d62:	f013 f8b0 	bl	18ec6 <z_impl_k_thread_name_set>

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		bt_hci_ecc_init();
	}

	err = bt_dev.drv->open();
    5d66:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
    5d6a:	68db      	ldr	r3, [r3, #12]
    5d6c:	4798      	blx	r3
	if (err) {
    5d6e:	4604      	mov	r4, r0
    5d70:	b950      	cbnz	r0, 5d88 <bt_enable+0x84>
		return err;
	}

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);

	if (!cb) {
    5d72:	b966      	cbnz	r6, 5d8e <bt_enable+0x8a>
	err = hci_init();
    5d74:	f7ff fa88 	bl	5288 <hci_init>
	if (err) {
    5d78:	4604      	mov	r4, r0
    5d7a:	b928      	cbnz	r0, 5d88 <bt_enable+0x84>
		err = bt_conn_init();
    5d7c:	f001 f966 	bl	704c <bt_conn_init>
		if (err) {
    5d80:	4604      	mov	r4, r0
    5d82:	b908      	cbnz	r0, 5d88 <bt_enable+0x84>
	bt_finalize_init();
    5d84:	f7ff ff96 	bl	5cb4 <bt_finalize_init>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    5d88:	4620      	mov	r0, r4
    5d8a:	b008      	add	sp, #32
    5d8c:	bd70      	pop	{r4, r5, r6, pc}
    5d8e:	f105 0188 	add.w	r1, r5, #136	; 0x88
    5d92:	480b      	ldr	r0, [pc, #44]	; (5dc0 <bt_enable+0xbc>)
    5d94:	f013 f90c 	bl	18fb0 <k_work_submit_to_queue>
    5d98:	e7f6      	b.n	5d88 <bt_enable+0x84>
		return -ENODEV;
    5d9a:	f06f 0412 	mvn.w	r4, #18
    5d9e:	e7f3      	b.n	5d88 <bt_enable+0x84>
		return -EALREADY;
    5da0:	f06f 0444 	mvn.w	r4, #68	; 0x44
    5da4:	e7f0      	b.n	5d88 <bt_enable+0x84>
    5da6:	bf00      	nop
    5da8:	20000000 	.word	0x20000000
    5dac:	20001028 	.word	0x20001028
    5db0:	20002260 	.word	0x20002260
    5db4:	00005991 	.word	0x00005991
    5db8:	20000790 	.word	0x20000790
    5dbc:	0001a8fd 	.word	0x0001a8fd
    5dc0:	20000ed0 	.word	0x20000ed0

00005dc4 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
    5dc4:	4800      	ldr	r0, [pc, #0]	; (5dc8 <bt_get_name+0x4>)
    5dc6:	4770      	bx	lr
    5dc8:	0001a903 	.word	0x0001a903

00005dcc <atomic_get.constprop.0>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5dcc:	4b03      	ldr	r3, [pc, #12]	; (5ddc <atomic_get.constprop.0+0x10>)
    5dce:	f3bf 8f5b 	dmb	ish
    5dd2:	6818      	ldr	r0, [r3, #0]
    5dd4:	f3bf 8f5b 	dmb	ish
}
    5dd8:	4770      	bx	lr
    5dda:	bf00      	nop
    5ddc:	20000098 	.word	0x20000098

00005de0 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
    5de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    5de2:	4f0b      	ldr	r7, [pc, #44]	; (5e10 <id_find+0x30>)
{
    5de4:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    5de6:	2500      	movs	r5, #0
    5de8:	79fb      	ldrb	r3, [r7, #7]
    5dea:	b2ec      	uxtb	r4, r5
    5dec:	42a3      	cmp	r3, r4
    5dee:	d802      	bhi.n	5df6 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    5df0:	f06f 0401 	mvn.w	r4, #1
    5df4:	e009      	b.n	5e0a <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    5df6:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
    5dfa:	2207      	movs	r2, #7
    5dfc:	4439      	add	r1, r7
    5dfe:	4630      	mov	r0, r6
    5e00:	f010 fe46 	bl	16a90 <memcmp>
    5e04:	3501      	adds	r5, #1
    5e06:	2800      	cmp	r0, #0
    5e08:	d1ee      	bne.n	5de8 <id_find+0x8>
}
    5e0a:	4620      	mov	r0, r4
    5e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5e0e:	bf00      	nop
    5e10:	20000000 	.word	0x20000000

00005e14 <set_random_address>:
{
    5e14:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
    5e16:	4914      	ldr	r1, [pc, #80]	; (5e68 <set_random_address+0x54>)
    5e18:	2206      	movs	r2, #6
    5e1a:	4605      	mov	r5, r0
    5e1c:	f010 fe38 	bl	16a90 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    5e20:	4604      	mov	r4, r0
    5e22:	b1e0      	cbz	r0, 5e5e <set_random_address+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    5e24:	2106      	movs	r1, #6
    5e26:	f242 0005 	movw	r0, #8197	; 0x2005
    5e2a:	f7ff f993 	bl	5154 <bt_hci_cmd_create>
	if (!buf) {
    5e2e:	4604      	mov	r4, r0
    5e30:	b1b8      	cbz	r0, 5e62 <set_random_address+0x4e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    5e32:	2206      	movs	r2, #6
    5e34:	4629      	mov	r1, r5
    5e36:	3008      	adds	r0, #8
    5e38:	f012 fce5 	bl	18806 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    5e3c:	4621      	mov	r1, r4
    5e3e:	2200      	movs	r2, #0
    5e40:	f242 0005 	movw	r0, #8197	; 0x2005
    5e44:	f7ff f9be 	bl	51c4 <bt_hci_cmd_send_sync>
	if (err) {
    5e48:	4604      	mov	r4, r0
    5e4a:	b940      	cbnz	r0, 5e5e <set_random_address+0x4a>
	memcpy(dst, src, sizeof(*dst));
    5e4c:	2206      	movs	r2, #6
    5e4e:	4806      	ldr	r0, [pc, #24]	; (5e68 <set_random_address+0x54>)
    5e50:	4629      	mov	r1, r5
    5e52:	f010 fe2d 	bl	16ab0 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    5e56:	4b05      	ldr	r3, [pc, #20]	; (5e6c <set_random_address+0x58>)
    5e58:	2201      	movs	r2, #1
    5e5a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
    5e5e:	4620      	mov	r0, r4
    5e60:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    5e62:	f06f 0436 	mvn.w	r4, #54	; 0x36
    5e66:	e7fa      	b.n	5e5e <set_random_address+0x4a>
    5e68:	2000002d 	.word	0x2000002d
    5e6c:	20000000 	.word	0x20000000

00005e70 <id_create.isra.0>:

static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    5e70:	b530      	push	{r4, r5, lr}
    5e72:	4c15      	ldr	r4, [pc, #84]	; (5ec8 <id_create.isra.0+0x58>)
    5e74:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    5e78:	b085      	sub	sp, #20
    5e7a:	4404      	add	r4, r0
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    5e7c:	460d      	mov	r5, r1
    5e7e:	b181      	cbz	r1, 5ea2 <id_create.isra.0+0x32>
    5e80:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    5e82:	2207      	movs	r2, #7
    5e84:	4669      	mov	r1, sp
    5e86:	4628      	mov	r0, r5
    5e88:	9300      	str	r3, [sp, #0]
    5e8a:	f8cd 3003 	str.w	r3, [sp, #3]
    5e8e:	f010 fdff 	bl	16a90 <memcmp>
    5e92:	b130      	cbz	r0, 5ea2 <id_create.isra.0+0x32>
 *  @param dst Bluetooth LE device address destination buffer.
 *  @param src Bluetooth LE device address source buffer.
 */
static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    5e94:	2207      	movs	r2, #7
    5e96:	4629      	mov	r1, r5
    5e98:	4620      	mov	r0, r4
    5e9a:	f010 fe09 	bl	16ab0 <memcpy>
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}
}
    5e9e:	b005      	add	sp, #20
    5ea0:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
    5ea2:	a802      	add	r0, sp, #8
    5ea4:	f010 ff0e 	bl	16cc4 <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    5ea8:	a802      	add	r0, sp, #8
    5eaa:	f7ff ff99 	bl	5de0 <id_find>
    5eae:	2800      	cmp	r0, #0
    5eb0:	daf7      	bge.n	5ea2 <id_create.isra.0+0x32>
    5eb2:	2207      	movs	r2, #7
    5eb4:	a902      	add	r1, sp, #8
    5eb6:	4620      	mov	r0, r4
    5eb8:	f010 fdfa 	bl	16ab0 <memcpy>
		if (addr) {
    5ebc:	2d00      	cmp	r5, #0
    5ebe:	d0ee      	beq.n	5e9e <id_create.isra.0+0x2e>
    5ec0:	2207      	movs	r2, #7
    5ec2:	4621      	mov	r1, r4
    5ec4:	4628      	mov	r0, r5
    5ec6:	e7e8      	b.n	5e9a <id_create.isra.0+0x2a>
    5ec8:	20000000 	.word	0x20000000

00005ecc <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
    5ecc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5ece:	460c      	mov	r4, r1
	int new_id;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    5ed0:	4605      	mov	r5, r0
    5ed2:	b918      	cbnz	r0, 5edc <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    5ed4:	b1f4      	cbz	r4, 5f14 <bt_id_create+0x48>
		return -EINVAL;
    5ed6:	f06f 0415 	mvn.w	r4, #21
    5eda:	e018      	b.n	5f0e <bt_id_create+0x42>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    5edc:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    5ede:	2207      	movs	r2, #7
    5ee0:	4669      	mov	r1, sp
    5ee2:	9300      	str	r3, [sp, #0]
    5ee4:	f8cd 3003 	str.w	r3, [sp, #3]
    5ee8:	f010 fdd2 	bl	16a90 <memcmp>
    5eec:	2800      	cmp	r0, #0
    5eee:	d0f1      	beq.n	5ed4 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    5ef0:	782b      	ldrb	r3, [r5, #0]
    5ef2:	2b01      	cmp	r3, #1
    5ef4:	d1ef      	bne.n	5ed6 <bt_id_create+0xa>
    5ef6:	79ab      	ldrb	r3, [r5, #6]
    5ef8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    5efc:	2bc0      	cmp	r3, #192	; 0xc0
    5efe:	d1ea      	bne.n	5ed6 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    5f00:	4628      	mov	r0, r5
    5f02:	f7ff ff6d 	bl	5de0 <id_find>
    5f06:	2800      	cmp	r0, #0
    5f08:	dbe4      	blt.n	5ed4 <bt_id_create+0x8>
			return -EALREADY;
    5f0a:	f06f 0444 	mvn.w	r4, #68	; 0x44

	new_id = bt_dev.id_count++;
	id_create(new_id, addr, irk);

	return new_id;
}
    5f0e:	4620      	mov	r0, r4
    5f10:	b002      	add	sp, #8
    5f12:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    5f14:	4e0f      	ldr	r6, [pc, #60]	; (5f54 <bt_id_create+0x88>)
    5f16:	79f3      	ldrb	r3, [r6, #7]
    5f18:	2b01      	cmp	r3, #1
    5f1a:	d017      	beq.n	5f4c <bt_id_create+0x80>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    5f1c:	f7ff ff56 	bl	5dcc <atomic_get.constprop.0>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    5f20:	07c3      	lsls	r3, r0, #31
    5f22:	d40b      	bmi.n	5f3c <bt_id_create+0x70>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
    5f24:	2d00      	cmp	r5, #0
    5f26:	d0d6      	beq.n	5ed6 <bt_id_create+0xa>
    5f28:	2207      	movs	r2, #7
    5f2a:	4669      	mov	r1, sp
    5f2c:	4628      	mov	r0, r5
    5f2e:	9400      	str	r4, [sp, #0]
    5f30:	f8cd 4003 	str.w	r4, [sp, #3]
    5f34:	f010 fdac 	bl	16a90 <memcmp>
    5f38:	2800      	cmp	r0, #0
    5f3a:	d0cc      	beq.n	5ed6 <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
    5f3c:	79f4      	ldrb	r4, [r6, #7]
	id_create(new_id, addr, irk);
    5f3e:	4629      	mov	r1, r5
	new_id = bt_dev.id_count++;
    5f40:	1c63      	adds	r3, r4, #1
	id_create(new_id, addr, irk);
    5f42:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
    5f44:	71f3      	strb	r3, [r6, #7]
	id_create(new_id, addr, irk);
    5f46:	f7ff ff93 	bl	5e70 <id_create.isra.0>
	return new_id;
    5f4a:	e7e0      	b.n	5f0e <bt_id_create+0x42>
		return -ENOMEM;
    5f4c:	f06f 040b 	mvn.w	r4, #11
    5f50:	e7dd      	b.n	5f0e <bt_id_create+0x42>
    5f52:	bf00      	nop
    5f54:	20000000 	.word	0x20000000

00005f58 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
    5f58:	b570      	push	{r4, r5, r6, lr}
    5f5a:	b086      	sub	sp, #24
    5f5c:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    5f5e:	aa01      	add	r2, sp, #4
    5f60:	2100      	movs	r1, #0
    5f62:	f241 0009 	movw	r0, #4105	; 0x1009
    5f66:	f7ff f92d 	bl	51c4 <bt_hci_cmd_send_sync>
	if (err) {
    5f6a:	4604      	mov	r4, r0
    5f6c:	b970      	cbnz	r0, 5f8c <bt_id_read_public_addr+0x34>
		BT_WARN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
    5f6e:	9b01      	ldr	r3, [sp, #4]

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    5f70:	9002      	str	r0, [sp, #8]
    5f72:	689d      	ldr	r5, [r3, #8]
    5f74:	f8ad 000c 	strh.w	r0, [sp, #12]
    5f78:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
    5f7a:	2206      	movs	r2, #6
    5f7c:	a902      	add	r1, sp, #8
    5f7e:	4628      	mov	r0, r5
    5f80:	f010 fd86 	bl	16a90 <memcmp>
    5f84:	b920      	cbnz	r0, 5f90 <bt_id_read_public_addr+0x38>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
    5f86:	9801      	ldr	r0, [sp, #4]
    5f88:	f00d fdd8 	bl	13b3c <net_buf_unref>
		return 0U;
    5f8c:	2000      	movs	r0, #0
    5f8e:	e016      	b.n	5fbe <bt_id_read_public_addr+0x66>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    5f90:	4b0c      	ldr	r3, [pc, #48]	; (5fc4 <bt_id_read_public_addr+0x6c>)
    5f92:	6818      	ldr	r0, [r3, #0]
    5f94:	9004      	str	r0, [sp, #16]
    5f96:	889b      	ldrh	r3, [r3, #4]
    5f98:	f8ad 3014 	strh.w	r3, [sp, #20]
    5f9c:	2206      	movs	r2, #6
    5f9e:	a904      	add	r1, sp, #16
    5fa0:	4628      	mov	r0, r5
    5fa2:	f010 fd75 	bl	16a90 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    5fa6:	2800      	cmp	r0, #0
    5fa8:	d0ed      	beq.n	5f86 <bt_id_read_public_addr+0x2e>
	memcpy(dst, src, sizeof(*dst));
    5faa:	2206      	movs	r2, #6
    5fac:	4629      	mov	r1, r5
    5fae:	1c70      	adds	r0, r6, #1
    5fb0:	f010 fd7e 	bl	16ab0 <memcpy>
	}

	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
    5fb4:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    5fb6:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
    5fb8:	f00d fdc0 	bl	13b3c <net_buf_unref>
	return 1U;
    5fbc:	2001      	movs	r0, #1
}
    5fbe:	b006      	add	sp, #24
    5fc0:	bd70      	pop	{r4, r5, r6, pc}
    5fc2:	bf00      	nop
    5fc4:	0001966f 	.word	0x0001966f

00005fc8 <bt_setup_public_id_addr>:

void bt_setup_public_id_addr(void)
{
    5fc8:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
    5fca:	4668      	mov	r0, sp
    5fcc:	f7ff ffc4 	bl	5f58 <bt_id_read_public_addr>
    5fd0:	4b04      	ldr	r3, [pc, #16]	; (5fe4 <bt_setup_public_id_addr+0x1c>)
    5fd2:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
    5fd4:	b118      	cbz	r0, 5fde <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	id_create(BT_ID_DEFAULT, &addr, irk);
    5fd6:	4669      	mov	r1, sp
    5fd8:	2000      	movs	r0, #0
    5fda:	f7ff ff49 	bl	5e70 <id_create.isra.0>
}
    5fde:	b003      	add	sp, #12
    5fe0:	f85d fb04 	ldr.w	pc, [sp], #4
    5fe4:	20000000 	.word	0x20000000

00005fe8 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
    5fe8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    5fec:	4b15      	ldr	r3, [pc, #84]	; (6044 <bt_read_static_addr+0x5c>)
    5fee:	f893 4086 	ldrb.w	r4, [r3, #134]	; 0x86
    5ff2:	f014 0401 	ands.w	r4, r4, #1
{
    5ff6:	4607      	mov	r7, r0
    5ff8:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    5ffa:	d015      	beq.n	6028 <bt_read_static_addr+0x40>
		BT_WARN("Read Static Addresses command not available");
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    5ffc:	aa01      	add	r2, sp, #4
    5ffe:	2100      	movs	r1, #0
    6000:	f64f 4009 	movw	r0, #64521	; 0xfc09
    6004:	f7ff f8de 	bl	51c4 <bt_hci_cmd_send_sync>
	if (err) {
    6008:	4605      	mov	r5, r0
    600a:	b9c8      	cbnz	r0, 6040 <bt_read_static_addr+0x58>
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	rp = (void *)rsp->data;
    600c:	9b01      	ldr	r3, [sp, #4]
    600e:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
    6010:	785c      	ldrb	r4, [r3, #1]
    6012:	42b4      	cmp	r4, r6
    6014:	bf28      	it	cs
    6016:	4634      	movcs	r4, r6
		net_buf_unref(rsp);
		return 0;
	}

	for (i = 0; i < cnt; i++) {
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    6018:	f04f 0816 	mov.w	r8, #22
    601c:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
    601e:	42a5      	cmp	r5, r4
    6020:	db06      	blt.n	6030 <bt_read_static_addr+0x48>
	}

	net_buf_unref(rsp);
    6022:	9801      	ldr	r0, [sp, #4]
    6024:	f00d fd8a 	bl	13b3c <net_buf_unref>
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
    6028:	4620      	mov	r0, r4
    602a:	b002      	add	sp, #8
    602c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    6030:	fb08 7005 	mla	r0, r8, r5, r7
    6034:	2216      	movs	r2, #22
    6036:	4631      	mov	r1, r6
    6038:	f010 fd3a 	bl	16ab0 <memcpy>
	for (i = 0; i < cnt; i++) {
    603c:	3501      	adds	r5, #1
    603e:	e7ee      	b.n	601e <bt_read_static_addr+0x36>
		return 0;
    6040:	2400      	movs	r4, #0
    6042:	e7f1      	b.n	6028 <bt_read_static_addr+0x40>
    6044:	20000000 	.word	0x20000000

00006048 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
    6048:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
    604a:	4d14      	ldr	r5, [pc, #80]	; (609c <bt_setup_random_id_addr+0x54>)
    604c:	79ec      	ldrb	r4, [r5, #7]
{
    604e:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
    6050:	b9f4      	cbnz	r4, 6090 <bt_setup_random_id_addr+0x48>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    6052:	2101      	movs	r1, #1
    6054:	a802      	add	r0, sp, #8
    6056:	f7ff ffc7 	bl	5fe8 <bt_read_static_addr>
    605a:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
    605c:	b1c0      	cbz	r0, 6090 <bt_setup_random_id_addr+0x48>
					atomic_set_bit(bt_dev.flags,
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    605e:	2716      	movs	r7, #22
    6060:	e00f      	b.n	6082 <bt_setup_random_id_addr+0x3a>
    6062:	ab02      	add	r3, sp, #8
    6064:	fb07 3106 	mla	r1, r7, r6, r3
    6068:	2206      	movs	r2, #6
    606a:	f10d 0001 	add.w	r0, sp, #1
    606e:	f010 fd1f 	bl	16ab0 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
    6072:	2301      	movs	r3, #1

				id_create(i, &addr, irk);
    6074:	4669      	mov	r1, sp
    6076:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
    6078:	f88d 3000 	strb.w	r3, [sp]
				id_create(i, &addr, irk);
    607c:	f7ff fef8 	bl	5e70 <id_create.isra.0>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    6080:	3401      	adds	r4, #1
    6082:	79eb      	ldrb	r3, [r5, #7]
    6084:	b2e6      	uxtb	r6, r4
    6086:	42b3      	cmp	r3, r6
    6088:	d8eb      	bhi.n	6062 <bt_setup_random_id_addr+0x1a>
			}

			return 0;
    608a:	2000      	movs	r0, #0
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
    608c:	b009      	add	sp, #36	; 0x24
    608e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
    6090:	2100      	movs	r1, #0
    6092:	4608      	mov	r0, r1
    6094:	f7ff ff1a 	bl	5ecc <bt_id_create>
    6098:	e7f8      	b.n	608c <bt_setup_random_id_addr+0x44>
    609a:	bf00      	nop
    609c:	20000000 	.word	0x20000000

000060a0 <bt_id_set_create_conn_own_addr>:
	return true;
#endif
}

int bt_id_set_create_conn_own_addr(bool use_filter, uint8_t *own_addr_type)
{
    60a0:	b538      	push	{r3, r4, r5, lr}

		/* If Static Random address is used as Identity address we
		 * need to restore it before creating connection. Otherwise
		 * NRPA used for active scan could be used for connection.
		 */
		if (addr->type == BT_ADDR_LE_RANDOM) {
    60a2:	4c07      	ldr	r4, [pc, #28]	; (60c0 <bt_id_set_create_conn_own_addr+0x20>)
    60a4:	7823      	ldrb	r3, [r4, #0]
    60a6:	2b01      	cmp	r3, #1
{
    60a8:	460d      	mov	r5, r1
		if (addr->type == BT_ADDR_LE_RANDOM) {
    60aa:	d003      	beq.n	60b4 <bt_id_set_create_conn_own_addr+0x14>
			if (err) {
				return err;
			}
		}

		*own_addr_type = addr->type;
    60ac:	7823      	ldrb	r3, [r4, #0]
    60ae:	702b      	strb	r3, [r5, #0]
	}

	return 0;
    60b0:	2000      	movs	r0, #0
}
    60b2:	bd38      	pop	{r3, r4, r5, pc}
			err = set_random_address(&addr->a);
    60b4:	1c60      	adds	r0, r4, #1
    60b6:	f7ff fead 	bl	5e14 <set_random_address>
			if (err) {
    60ba:	2800      	cmp	r0, #0
    60bc:	d0f6      	beq.n	60ac <bt_id_set_create_conn_own_addr+0xc>
    60be:	e7f8      	b.n	60b2 <bt_id_set_create_conn_own_addr+0x12>
    60c0:	20000000 	.word	0x20000000

000060c4 <bt_id_set_scan_own_addr>:

	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
}

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
    60c4:	b510      	push	{r4, lr}
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
    60c6:	4b05      	ldr	r3, [pc, #20]	; (60dc <bt_id_set_scan_own_addr+0x18>)
    60c8:	781b      	ldrb	r3, [r3, #0]
    60ca:	700b      	strb	r3, [r1, #0]
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
    60cc:	2000      	movs	r0, #0
{
    60ce:	460c      	mov	r4, r1
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
    60d0:	f011 f88a 	bl	171e8 <bt_id_set_private_addr>
			if (err) {
    60d4:	b908      	cbnz	r0, 60da <bt_id_set_scan_own_addr+0x16>

				BT_WARN("Ignoring failure to set address for passive scan (%d)",
					err);
			}

			*own_addr_type = BT_ADDR_LE_RANDOM;
    60d6:	2301      	movs	r3, #1
    60d8:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	return 0;
}
    60da:	bd10      	pop	{r4, pc}
    60dc:	20000000 	.word	0x20000000

000060e0 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
    60e0:	b510      	push	{r4, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    60e2:	4c09      	ldr	r4, [pc, #36]	; (6108 <bt_id_init+0x28>)
    60e4:	79e3      	ldrb	r3, [r4, #7]
    60e6:	b10b      	cbz	r3, 60ec <bt_id_init+0xc>

#if defined(CONFIG_BT_PRIVACY)
	k_delayed_work_init(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
    60e8:	2000      	movs	r0, #0
}
    60ea:	bd10      	pop	{r4, pc}
		bt_setup_public_id_addr();
    60ec:	f7ff ff6c 	bl	5fc8 <bt_setup_public_id_addr>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    60f0:	79e3      	ldrb	r3, [r4, #7]
    60f2:	2b00      	cmp	r3, #0
    60f4:	d1f8      	bne.n	60e8 <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
    60f6:	f7ff ffa7 	bl	6048 <bt_setup_random_id_addr>
		if (err) {
    60fa:	2800      	cmp	r0, #0
    60fc:	d1f5      	bne.n	60ea <bt_id_init+0xa>
		err = set_random_address(&bt_dev.id_addr[0].a);
    60fe:	1c60      	adds	r0, r4, #1
}
    6100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = set_random_address(&bt_dev.id_addr[0].a);
    6104:	f7ff be86 	b.w	5e14 <set_random_address>
    6108:	20000000 	.word	0x20000000

0000610c <atomic_get.constprop.0>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    610c:	4b03      	ldr	r3, [pc, #12]	; (611c <atomic_get.constprop.0+0x10>)
    610e:	f3bf 8f5b 	dmb	ish
    6112:	6818      	ldr	r0, [r3, #0]
    6114:	f3bf 8f5b 	dmb	ish
}
    6118:	4770      	bx	lr
    611a:	bf00      	nop
    611c:	20000098 	.word	0x20000098

00006120 <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
    6120:	b530      	push	{r4, r5, lr}
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    6122:	2102      	movs	r1, #2
{
    6124:	b087      	sub	sp, #28
    6126:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    6128:	f242 000c 	movw	r0, #8204	; 0x200c
    612c:	f7ff f812 	bl	5154 <bt_hci_cmd_create>
	if (!buf) {
    6130:	4605      	mov	r5, r0
    6132:	b308      	cbz	r0, 6178 <bt_le_scan_set_enable_legacy+0x58>
	return net_buf_simple_add(&buf->b, len);
    6134:	2102      	movs	r1, #2
    6136:	3008      	adds	r0, #8
    6138:	f012 fb5f 	bl	187fa <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    613c:	2c01      	cmp	r4, #1
    613e:	4602      	mov	r2, r0
    6140:	d117      	bne.n	6172 <bt_le_scan_set_enable_legacy+0x52>
    6142:	f7ff ffe3 	bl	610c <atomic_get.constprop.0>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    6146:	f3c0 2000 	ubfx	r0, r0, #8, #1
    614a:	7050      	strb	r0, [r2, #1]
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
	}

	cp->enable = enable;

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
    614c:	1e63      	subs	r3, r4, #1
	cp->enable = enable;
    614e:	7014      	strb	r4, [r2, #0]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
    6150:	425c      	negs	r4, r3
    6152:	415c      	adcs	r4, r3
    6154:	4a0a      	ldr	r2, [pc, #40]	; (6180 <bt_le_scan_set_enable_legacy+0x60>)
    6156:	9400      	str	r4, [sp, #0]
    6158:	a903      	add	r1, sp, #12
    615a:	4628      	mov	r0, r5
    615c:	2305      	movs	r3, #5
    615e:	f7fe ffe7 	bl	5130 <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    6162:	2200      	movs	r2, #0
    6164:	4629      	mov	r1, r5
    6166:	f242 000c 	movw	r0, #8204	; 0x200c
    616a:	f7ff f82b 	bl	51c4 <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
    616e:	b007      	add	sp, #28
    6170:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    6172:	2300      	movs	r3, #0
    6174:	7043      	strb	r3, [r0, #1]
    6176:	e7e9      	b.n	614c <bt_le_scan_set_enable_legacy+0x2c>
		return -ENOBUFS;
    6178:	f06f 0036 	mvn.w	r0, #54	; 0x36
    617c:	e7f7      	b.n	616e <bt_le_scan_set_enable_legacy+0x4e>
    617e:	bf00      	nop
    6180:	20000098 	.word	0x20000098

00006184 <start_le_scan_legacy>:

	return 0;
}

static int start_le_scan_legacy(uint8_t scan_type, uint16_t interval, uint16_t window)
{
    6184:	b573      	push	{r0, r1, r4, r5, r6, lr}
    6186:	4605      	mov	r5, r0
    6188:	4614      	mov	r4, r2
    618a:	460e      	mov	r6, r1
	struct bt_hci_cp_le_set_scan_param set_param;
	struct net_buf *buf;
	int err;
	bool active_scan;

	(void)memset(&set_param, 0, sizeof(set_param));
    618c:	2207      	movs	r2, #7
    618e:	2100      	movs	r1, #0
    6190:	4668      	mov	r0, sp
    6192:	f010 fcb8 	bl	16b06 <memset>

	if (IS_ENABLED(CONFIG_BT_WHITELIST) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_SCAN_WL)) {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_USE_WHITELIST;
	} else {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_NO_WHITELIST;
    6196:	2300      	movs	r3, #0
    6198:	f88d 3006 	strb.w	r3, [sp, #6]
	}

	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
    619c:	1e6b      	subs	r3, r5, #1
    619e:	4258      	negs	r0, r3
    61a0:	f10d 0105 	add.w	r1, sp, #5
    61a4:	4158      	adcs	r0, r3
	set_param.window = sys_cpu_to_le16(window);
    61a6:	f8ad 4003 	strh.w	r4, [sp, #3]
	set_param.scan_type = scan_type;
    61aa:	f88d 5000 	strb.w	r5, [sp]
	set_param.interval = sys_cpu_to_le16(interval);
    61ae:	f8ad 6001 	strh.w	r6, [sp, #1]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
    61b2:	f7ff ff87 	bl	60c4 <bt_id_set_scan_own_addr>
	if (err) {
    61b6:	4604      	mov	r4, r0
    61b8:	bb38      	cbnz	r0, 620a <start_le_scan_legacy+0x86>
		return err;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    61ba:	2107      	movs	r1, #7
    61bc:	f242 000b 	movw	r0, #8203	; 0x200b
    61c0:	f7fe ffc8 	bl	5154 <bt_hci_cmd_create>
	if (!buf) {
    61c4:	4606      	mov	r6, r0
    61c6:	b348      	cbz	r0, 621c <start_le_scan_legacy+0x98>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    61c8:	2207      	movs	r2, #7
    61ca:	4669      	mov	r1, sp
    61cc:	3008      	adds	r0, #8
    61ce:	f012 fb1a 	bl	18806 <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
    61d2:	4622      	mov	r2, r4
    61d4:	4631      	mov	r1, r6
    61d6:	f242 000b 	movw	r0, #8203	; 0x200b
    61da:	f7fe fff3 	bl	51c4 <bt_hci_cmd_send_sync>
	if (err) {
    61de:	4604      	mov	r4, r0
    61e0:	b998      	cbnz	r0, 620a <start_le_scan_legacy+0x86>
	return bt_le_scan_set_enable_legacy(enable);
    61e2:	2001      	movs	r0, #1
    61e4:	f7ff ff9c 	bl	6120 <bt_le_scan_set_enable_legacy>
		return err;
	}

	err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
	if (err) {
    61e8:	4604      	mov	r4, r0
    61ea:	b970      	cbnz	r0, 620a <start_le_scan_legacy+0x86>
	if (val) {
    61ec:	2d01      	cmp	r5, #1
    61ee:	d10f      	bne.n	6210 <start_le_scan_legacy+0x8c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    61f0:	f3bf 8f5b 	dmb	ish
    61f4:	4b0b      	ldr	r3, [pc, #44]	; (6224 <start_le_scan_legacy+0xa0>)
    61f6:	e853 2f00 	ldrex	r2, [r3]
    61fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    61fe:	e843 2100 	strex	r1, r2, [r3]
    6202:	2900      	cmp	r1, #0
    6204:	d1f7      	bne.n	61f6 <start_le_scan_legacy+0x72>
    6206:	f3bf 8f5b 	dmb	ish
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);

	return 0;
}
    620a:	4620      	mov	r0, r4
    620c:	b002      	add	sp, #8
    620e:	bd70      	pop	{r4, r5, r6, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    6210:	f06f 0180 	mvn.w	r1, #128	; 0x80
    6214:	4803      	ldr	r0, [pc, #12]	; (6224 <start_le_scan_legacy+0xa0>)
    6216:	f010 fffb 	bl	17210 <atomic_and>
    621a:	e7f6      	b.n	620a <start_le_scan_legacy+0x86>
		return -ENOBUFS;
    621c:	f06f 0436 	mvn.w	r4, #54	; 0x36
    6220:	e7f3      	b.n	620a <start_le_scan_legacy+0x86>
    6222:	bf00      	nop
    6224:	20000098 	.word	0x20000098

00006228 <bt_scan_reset>:
	scan_dev_found_cb = NULL;
    6228:	4b01      	ldr	r3, [pc, #4]	; (6230 <bt_scan_reset+0x8>)
    622a:	2200      	movs	r2, #0
    622c:	601a      	str	r2, [r3, #0]
}
    622e:	4770      	bx	lr
    6230:	20001034 	.word	0x20001034

00006234 <bt_le_scan_update>:

	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
}

int bt_le_scan_update(bool fast_scan)
{
    6234:	b538      	push	{r3, r4, r5, lr}
    6236:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    6238:	f7ff ff68 	bl	610c <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    623c:	0641      	lsls	r1, r0, #25
    623e:	f3c0 1280 	ubfx	r2, r0, #6, #1
    6242:	d501      	bpl.n	6248 <bt_le_scan_update+0x14>
		/* don't restart scan if we have pending connection */
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
					       BT_CONN_CONNECT);
		if (conn) {
			bt_conn_unref(conn);
			return 0;
    6244:	2000      	movs	r0, #0
    6246:	e031      	b.n	62ac <bt_le_scan_update+0x78>
    6248:	f7ff ff60 	bl	610c <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    624c:	0683      	lsls	r3, r0, #26
    624e:	d428      	bmi.n	62a2 <bt_le_scan_update+0x6e>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    6250:	2100      	movs	r1, #0
    6252:	2206      	movs	r2, #6
    6254:	4608      	mov	r0, r1
    6256:	f000 fc8d 	bl	6b74 <bt_conn_lookup_state_le>
		if (conn) {
    625a:	4604      	mov	r4, r0
    625c:	bb38      	cbnz	r0, 62ae <bt_le_scan_update+0x7a>
		}

		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    625e:	2202      	movs	r2, #2
    6260:	4601      	mov	r1, r0
    6262:	f000 fc87 	bl	6b74 <bt_conn_lookup_state_le>
					       BT_CONN_CONNECT_SCAN);
		if (conn) {
    6266:	2800      	cmp	r0, #0
    6268:	d0ec      	beq.n	6244 <bt_le_scan_update+0x10>
    626a:	f3bf 8f5b 	dmb	ish
    626e:	4b11      	ldr	r3, [pc, #68]	; (62b4 <bt_le_scan_update+0x80>)
    6270:	e853 2f00 	ldrex	r2, [r3]
    6274:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    6278:	e843 2100 	strex	r1, r2, [r3]
    627c:	2900      	cmp	r1, #0
    627e:	d1f7      	bne.n	6270 <bt_le_scan_update+0x3c>
    6280:	f3bf 8f5b 	dmb	ish
			atomic_set_bit(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP);

			bt_conn_unref(conn);
    6284:	f011 f8f9 	bl	1747a <bt_conn_unref>
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
    6288:	2d00      	cmp	r5, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    628a:	4620      	mov	r0, r4
    628c:	bf18      	it	ne
    628e:	2230      	movne	r2, #48	; 0x30
		return start_passive_scan(fast_scan);
	}
#endif

	return 0;
}
    6290:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    6294:	bf0a      	itet	eq
    6296:	2212      	moveq	r2, #18
    6298:	2160      	movne	r1, #96	; 0x60
    629a:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    629e:	f7ff bf71 	b.w	6184 <start_le_scan_legacy>
	return bt_le_scan_set_enable_legacy(enable);
    62a2:	4610      	mov	r0, r2
    62a4:	f7ff ff3c 	bl	6120 <bt_le_scan_set_enable_legacy>
		if (err) {
    62a8:	2800      	cmp	r0, #0
    62aa:	d0d1      	beq.n	6250 <bt_le_scan_update+0x1c>
}
    62ac:	bd38      	pop	{r3, r4, r5, pc}
			bt_conn_unref(conn);
    62ae:	f011 f8e4 	bl	1747a <bt_conn_unref>
    62b2:	e7c7      	b.n	6244 <bt_le_scan_update+0x10>
    62b4:	20000098 	.word	0x20000098

000062b8 <bt_hci_le_adv_report>:
#endif /* defined(CONFIG_BT_ISO_BROADCAST) */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
    62b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
    62bc:	f100 0708 	add.w	r7, r0, #8
    62c0:	b08d      	sub	sp, #52	; 0x34
    62c2:	4604      	mov	r4, r0
    62c4:	4638      	mov	r0, r7
    62c6:	f012 fabf 	bl	18848 <net_buf_simple_pull_u8>
	if (scan_dev_found_cb) {
    62ca:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 6498 <bt_hci_le_adv_report+0x1e0>
    62ce:	9001      	str	r0, [sp, #4]
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *evt;

	BT_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
    62d0:	9b01      	ldr	r3, [sp, #4]
    62d2:	b913      	cbnz	r3, 62da <bt_hci_le_adv_report+0x22>

		le_adv_recv(&evt->addr, &adv_info, buf, evt->length);

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
	}
}
    62d4:	b00d      	add	sp, #52	; 0x34
    62d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < sizeof(*evt)) {
    62da:	89a3      	ldrh	r3, [r4, #12]
    62dc:	2b08      	cmp	r3, #8
    62de:	d9f9      	bls.n	62d4 <bt_hci_le_adv_report+0x1c>
	return net_buf_simple_pull_mem(&buf->b, len);
    62e0:	2109      	movs	r1, #9
    62e2:	4638      	mov	r0, r7
    62e4:	f012 faa8 	bl	18838 <net_buf_simple_pull_mem>
		adv_info.rssi = evt->data[evt->length];
    62e8:	f890 9008 	ldrb.w	r9, [r0, #8]
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
    62ec:	237f      	movs	r3, #127	; 0x7f
    62ee:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		adv_info.rssi = evt->data[evt->length];
    62f2:	eb00 0309 	add.w	r3, r0, r9
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    62f6:	2201      	movs	r2, #1
		adv_info.rssi = evt->data[evt->length];
    62f8:	7a5b      	ldrb	r3, [r3, #9]
    62fa:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		adv_info.sid = BT_GAP_SID_INVALID;
    62fe:	23ff      	movs	r3, #255	; 0xff
    6300:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		adv_info.interval = 0U;
    6304:	2300      	movs	r3, #0
    6306:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    630a:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
		adv_info.adv_type = evt->evt_type;
    630e:	7802      	ldrb	r2, [r0, #0]
    6310:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    6314:	2a04      	cmp	r2, #4
    6316:	bf9c      	itt	ls
    6318:	4b5d      	ldrls	r3, [pc, #372]	; (6490 <bt_hci_le_adv_report+0x1d8>)
    631a:	5c9b      	ldrbls	r3, [r3, r2]
		adv_info.adv_props = get_adv_props(evt->evt_type);
    631c:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    6320:	4606      	mov	r6, r0
		le_adv_recv(&evt->addr, &adv_info, buf, evt->length);
    6322:	f100 0801 	add.w	r8, r0, #1
    6326:	f7ff fef1 	bl	610c <atomic_get.constprop.0>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    632a:	0645      	lsls	r5, r0, #25
    632c:	d50d      	bpl.n	634a <bt_hci_le_adv_report+0x92>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
    632e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    6332:	0758      	lsls	r0, r3, #29
    6334:	d509      	bpl.n	634a <bt_hci_le_adv_report+0x92>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
    6336:	7a31      	ldrb	r1, [r6, #8]
	return net_buf_simple_pull(&buf->b, len);
    6338:	4638      	mov	r0, r7
    633a:	3101      	adds	r1, #1
    633c:	f012 fa74 	bl	18828 <net_buf_simple_pull>
    6340:	9b01      	ldr	r3, [sp, #4]
    6342:	1e58      	subs	r0, r3, #1
    6344:	b2c3      	uxtb	r3, r0
    6346:	9301      	str	r3, [sp, #4]
    6348:	e7c2      	b.n	62d0 <bt_hci_le_adv_report+0x18>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
    634a:	7873      	ldrb	r3, [r6, #1]
    634c:	1e9a      	subs	r2, r3, #2
    634e:	2a01      	cmp	r2, #1
    6350:	d84f      	bhi.n	63f2 <bt_hci_le_adv_report+0x13a>
	memcpy(dst, src, sizeof(*dst));
    6352:	2207      	movs	r2, #7
    6354:	4641      	mov	r1, r8
    6356:	a804      	add	r0, sp, #16
    6358:	f010 fbaa 	bl	16ab0 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    635c:	f89d 3010 	ldrb.w	r3, [sp, #16]
    6360:	3b02      	subs	r3, #2
    6362:	f88d 3010 	strb.w	r3, [sp, #16]
	info->addr = &id_addr;
    6366:	ab04      	add	r3, sp, #16
    6368:	9308      	str	r3, [sp, #32]
	if (scan_dev_found_cb) {
    636a:	f8da 3000 	ldr.w	r3, [sl]
    636e:	b1b3      	cbz	r3, 639e <bt_hci_le_adv_report+0xe6>
	state->offset = net_buf_simple_headroom(buf);
    6370:	4638      	mov	r0, r7
    6372:	f012 fa79 	bl	18868 <net_buf_simple_headroom>
	state->len = buf->len;
    6376:	89a3      	ldrh	r3, [r4, #12]
    6378:	9302      	str	r3, [sp, #8]
	state->offset = net_buf_simple_headroom(buf);
    637a:	4683      	mov	fp, r0
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    637c:	463b      	mov	r3, r7
    637e:	a804      	add	r0, sp, #16
    6380:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    6384:	f99d 1025 	ldrsb.w	r1, [sp, #37]	; 0x25
    6388:	f8da 5000 	ldr.w	r5, [sl]
		buf->len = len;
    638c:	f8a4 900c 	strh.w	r9, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    6390:	47a8      	blx	r5
	buf->data = buf->__buf + state->offset;
    6392:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    6394:	9b02      	ldr	r3, [sp, #8]
    6396:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf + state->offset;
    6398:	fa10 f08b 	uxtah	r0, r0, fp
    639c:	60a0      	str	r0, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    639e:	4b3d      	ldr	r3, [pc, #244]	; (6494 <bt_hci_le_adv_report+0x1dc>)
    63a0:	681b      	ldr	r3, [r3, #0]
    63a2:	2b00      	cmp	r3, #0
    63a4:	d038      	beq.n	6418 <bt_hci_le_adv_report+0x160>
    63a6:	f1b3 0208 	subs.w	r2, r3, #8
    63aa:	d035      	beq.n	6418 <bt_hci_le_adv_report+0x160>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    63ac:	681d      	ldr	r5, [r3, #0]
    63ae:	b105      	cbz	r5, 63b2 <bt_hci_le_adv_report+0xfa>
    63b0:	3d08      	subs	r5, #8
		if (listener->recv) {
    63b2:	6813      	ldr	r3, [r2, #0]
    63b4:	9203      	str	r2, [sp, #12]
    63b6:	b193      	cbz	r3, 63de <bt_hci_le_adv_report+0x126>
	state->offset = net_buf_simple_headroom(buf);
    63b8:	4638      	mov	r0, r7
    63ba:	f012 fa55 	bl	18868 <net_buf_simple_headroom>
			listener->recv(info, &buf->b);
    63be:	9a03      	ldr	r2, [sp, #12]
	state->len = buf->len;
    63c0:	89a3      	ldrh	r3, [r4, #12]
    63c2:	6812      	ldr	r2, [r2, #0]
			buf->len = len;
    63c4:	f8a4 900c 	strh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    63c8:	4683      	mov	fp, r0
			listener->recv(info, &buf->b);
    63ca:	4639      	mov	r1, r7
    63cc:	a808      	add	r0, sp, #32
	state->len = buf->len;
    63ce:	9302      	str	r3, [sp, #8]
    63d0:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
    63d2:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    63d4:	9b02      	ldr	r3, [sp, #8]
    63d6:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf + state->offset;
    63d8:	fa10 f08b 	uxtah	r0, r0, fp
    63dc:	60a0      	str	r0, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    63de:	b1dd      	cbz	r5, 6418 <bt_hci_le_adv_report+0x160>
Z_GENLIST_PEEK_NEXT(slist, snode)
    63e0:	f115 0308 	adds.w	r3, r5, #8
    63e4:	d002      	beq.n	63ec <bt_hci_le_adv_report+0x134>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    63e6:	68ab      	ldr	r3, [r5, #8]
    63e8:	b103      	cbz	r3, 63ec <bt_hci_le_adv_report+0x134>
    63ea:	3b08      	subs	r3, #8
		adv_info.adv_type = evt->evt_type;
    63ec:	462a      	mov	r2, r5
    63ee:	461d      	mov	r5, r3
    63f0:	e7df      	b.n	63b2 <bt_hci_le_adv_report+0xfa>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
    63f2:	2bff      	cmp	r3, #255	; 0xff
    63f4:	d109      	bne.n	640a <bt_hci_le_adv_report+0x152>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    63f6:	2300      	movs	r3, #0
    63f8:	9306      	str	r3, [sp, #24]
    63fa:	2207      	movs	r2, #7
    63fc:	f8cd 301b 	str.w	r3, [sp, #27]
    6400:	a906      	add	r1, sp, #24
    6402:	a804      	add	r0, sp, #16
    6404:	f010 fb54 	bl	16ab0 <memcpy>
}
    6408:	e7ad      	b.n	6366 <bt_hci_le_adv_report+0xae>
		bt_addr_le_copy(&id_addr,
    640a:	4641      	mov	r1, r8
    640c:	2000      	movs	r0, #0
    640e:	f010 fee9 	bl	171e4 <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
    6412:	2207      	movs	r2, #7
    6414:	4601      	mov	r1, r0
    6416:	e7f4      	b.n	6402 <bt_hci_le_adv_report+0x14a>
	check_pending_conn(&id_addr, addr, info->adv_props);
    6418:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
    641c:	f7ff fe76 	bl	610c <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    6420:	0641      	lsls	r1, r0, #25
    6422:	f3c0 1980 	ubfx	r9, r0, #6, #1
    6426:	d486      	bmi.n	6336 <bt_hci_le_adv_report+0x7e>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
    6428:	07d2      	lsls	r2, r2, #31
    642a:	d584      	bpl.n	6336 <bt_hci_le_adv_report+0x7e>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
    642c:	2202      	movs	r2, #2
    642e:	a904      	add	r1, sp, #16
    6430:	4648      	mov	r0, r9
    6432:	f000 fb9f 	bl	6b74 <bt_conn_lookup_state_le>
	if (!conn) {
    6436:	4605      	mov	r5, r0
    6438:	2800      	cmp	r0, #0
    643a:	f43f af7c 	beq.w	6336 <bt_hci_le_adv_report+0x7e>
    643e:	f7ff fe65 	bl	610c <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    6442:	0683      	lsls	r3, r0, #26
    6444:	d411      	bmi.n	646a <bt_hci_le_adv_report+0x1b2>
    6446:	2207      	movs	r2, #7
    6448:	4641      	mov	r1, r8
    644a:	f105 0096 	add.w	r0, r5, #150	; 0x96
    644e:	f010 fb2f 	bl	16ab0 <memcpy>
	if (bt_le_create_conn(conn)) {
    6452:	4628      	mov	r0, r5
    6454:	f010 fd12 	bl	16e7c <bt_le_create_conn>
    6458:	b960      	cbnz	r0, 6474 <bt_hci_le_adv_report+0x1bc>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    645a:	4628      	mov	r0, r5
    645c:	2106      	movs	r1, #6
    645e:	f000 fa95 	bl	698c <bt_conn_set_state>
	bt_conn_unref(conn);
    6462:	4628      	mov	r0, r5
    6464:	f011 f809 	bl	1747a <bt_conn_unref>
	return;
    6468:	e765      	b.n	6336 <bt_hci_le_adv_report+0x7e>
	return bt_le_scan_set_enable_legacy(enable);
    646a:	4648      	mov	r0, r9
    646c:	f7ff fe58 	bl	6120 <bt_le_scan_set_enable_legacy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    6470:	2800      	cmp	r0, #0
    6472:	d0e8      	beq.n	6446 <bt_hci_le_adv_report+0x18e>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    6474:	231f      	movs	r3, #31
    6476:	726b      	strb	r3, [r5, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    6478:	2100      	movs	r1, #0
    647a:	4628      	mov	r0, r5
    647c:	f000 fa86 	bl	698c <bt_conn_set_state>
	bt_conn_unref(conn);
    6480:	4628      	mov	r0, r5
    6482:	f010 fffa 	bl	1747a <bt_conn_unref>
	bt_le_scan_update(false);
    6486:	2000      	movs	r0, #0
    6488:	f7ff fed4 	bl	6234 <bt_le_scan_update>
    648c:	e753      	b.n	6336 <bt_hci_le_adv_report+0x7e>
    648e:	bf00      	nop
    6490:	0001a90a 	.word	0x0001a90a
    6494:	2000102c 	.word	0x2000102c
    6498:	20001034 	.word	0x20001034

0000649c <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    649c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    64a0:	4605      	mov	r5, r0
    64a2:	460f      	mov	r7, r1
    64a4:	f7ff fe32 	bl	610c <atomic_get.constprop.0>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    64a8:	0780      	lsls	r0, r0, #30
    64aa:	d56f      	bpl.n	658c <bt_le_scan_start+0xf0>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    64ac:	782a      	ldrb	r2, [r5, #0]
    64ae:	2a01      	cmp	r2, #1
    64b0:	d904      	bls.n	64bc <bt_le_scan_start+0x20>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
    64b2:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
    64b6:	4620      	mov	r0, r4
    64b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
    64bc:	686b      	ldr	r3, [r5, #4]
    64be:	f033 030f 	bics.w	r3, r3, #15
    64c2:	d1f6      	bne.n	64b2 <bt_le_scan_start+0x16>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    64c4:	8928      	ldrh	r0, [r5, #8]
    64c6:	1f03      	subs	r3, r0, #4
    64c8:	b29b      	uxth	r3, r3
    64ca:	f643 74fc 	movw	r4, #16380	; 0x3ffc
    64ce:	42a3      	cmp	r3, r4
    64d0:	d8ef      	bhi.n	64b2 <bt_le_scan_start+0x16>
	if (param->window < 0x0004 || param->window > 0x4000) {
    64d2:	8969      	ldrh	r1, [r5, #10]
    64d4:	1f0b      	subs	r3, r1, #4
    64d6:	b29b      	uxth	r3, r3
    64d8:	42a3      	cmp	r3, r4
    64da:	d8ea      	bhi.n	64b2 <bt_le_scan_start+0x16>
	if (param->window > param->interval) {
    64dc:	4288      	cmp	r0, r1
    64de:	d3e8      	bcc.n	64b2 <bt_le_scan_start+0x16>
	if (param->type && !bt_id_scan_random_addr_check()) {
    64e0:	b99a      	cbnz	r2, 650a <bt_le_scan_start+0x6e>
    64e2:	f3bf 8f5b 	dmb	ish
    64e6:	4e2b      	ldr	r6, [pc, #172]	; (6594 <bt_le_scan_start+0xf8>)
    64e8:	e856 0f00 	ldrex	r0, [r6]
    64ec:	f040 0340 	orr.w	r3, r0, #64	; 0x40
    64f0:	e846 3200 	strex	r2, r3, [r6]
    64f4:	2a00      	cmp	r2, #0
    64f6:	d1f7      	bne.n	64e8 <bt_le_scan_start+0x4c>
    64f8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    64fc:	f010 0240 	ands.w	r2, r0, #64	; 0x40
    6500:	46b0      	mov	r8, r6
    6502:	d007      	beq.n	6514 <bt_le_scan_start+0x78>
		return -EALREADY;
    6504:	f06f 0444 	mvn.w	r4, #68	; 0x44
    6508:	e7d5      	b.n	64b6 <bt_le_scan_start+0x1a>
	if (param->type && !bt_id_scan_random_addr_check()) {
    650a:	f010 fe7f 	bl	1720c <bt_id_scan_random_addr_check>
    650e:	2800      	cmp	r0, #0
    6510:	d1e7      	bne.n	64e2 <bt_le_scan_start+0x46>
    6512:	e7ce      	b.n	64b2 <bt_le_scan_start+0x16>
    6514:	f7ff fdfa 	bl	610c <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    6518:	0681      	lsls	r1, r0, #26
    651a:	d50a      	bpl.n	6532 <bt_le_scan_start+0x96>
	return bt_le_scan_set_enable_legacy(enable);
    651c:	4610      	mov	r0, r2
    651e:	f7ff fdff 	bl	6120 <bt_le_scan_set_enable_legacy>
		if (err) {
    6522:	4604      	mov	r4, r0
    6524:	b128      	cbz	r0, 6532 <bt_le_scan_start+0x96>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    6526:	f06f 0140 	mvn.w	r1, #64	; 0x40
    652a:	4630      	mov	r0, r6
    652c:	f010 fe70 	bl	17210 <atomic_and>
		return err;
    6530:	e7c1      	b.n	64b6 <bt_le_scan_start+0x1a>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
    6532:	686b      	ldr	r3, [r5, #4]
	if (val) {
    6534:	07db      	lsls	r3, r3, #31
    6536:	d515      	bpl.n	6564 <bt_le_scan_start+0xc8>
    6538:	f3bf 8f5b 	dmb	ish
    653c:	e858 3f00 	ldrex	r3, [r8]
    6540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6544:	e848 3200 	strex	r2, r3, [r8]
    6548:	2a00      	cmp	r2, #0
    654a:	d1f7      	bne.n	653c <bt_le_scan_start+0xa0>
    654c:	f3bf 8f5b 	dmb	ish
		if (param->timeout) {
    6550:	89ab      	ldrh	r3, [r5, #12]
    6552:	b16b      	cbz	r3, 6570 <bt_le_scan_start+0xd4>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    6554:	480f      	ldr	r0, [pc, #60]	; (6594 <bt_le_scan_start+0xf8>)
    6556:	f06f 0140 	mvn.w	r1, #64	; 0x40
    655a:	f010 fe59 	bl	17210 <atomic_and>
			return -ENOTSUP;
    655e:	f06f 0422 	mvn.w	r4, #34	; 0x22
    6562:	e7a8      	b.n	64b6 <bt_le_scan_start+0x1a>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    6564:	f46f 7180 	mvn.w	r1, #256	; 0x100
    6568:	480a      	ldr	r0, [pc, #40]	; (6594 <bt_le_scan_start+0xf8>)
    656a:	f010 fe51 	bl	17210 <atomic_and>
    656e:	e7ef      	b.n	6550 <bt_le_scan_start+0xb4>
		err = start_le_scan_legacy(param->type, param->interval,
    6570:	896a      	ldrh	r2, [r5, #10]
    6572:	8929      	ldrh	r1, [r5, #8]
    6574:	7828      	ldrb	r0, [r5, #0]
    6576:	f7ff fe05 	bl	6184 <start_le_scan_legacy>
	if (err) {
    657a:	4604      	mov	r4, r0
    657c:	b118      	cbz	r0, 6586 <bt_le_scan_start+0xea>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    657e:	4805      	ldr	r0, [pc, #20]	; (6594 <bt_le_scan_start+0xf8>)
    6580:	f06f 0140 	mvn.w	r1, #64	; 0x40
    6584:	e7d2      	b.n	652c <bt_le_scan_start+0x90>
	scan_dev_found_cb = cb;
    6586:	4b04      	ldr	r3, [pc, #16]	; (6598 <bt_le_scan_start+0xfc>)
    6588:	601f      	str	r7, [r3, #0]
	return 0;
    658a:	e794      	b.n	64b6 <bt_le_scan_start+0x1a>
		return -EAGAIN;
    658c:	f06f 040a 	mvn.w	r4, #10
    6590:	e791      	b.n	64b6 <bt_le_scan_start+0x1a>
    6592:	bf00      	nop
    6594:	20000098 	.word	0x20000098
    6598:	20001034 	.word	0x20001034

0000659c <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
    659c:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    659e:	4808      	ldr	r0, [pc, #32]	; (65c0 <bt_le_scan_stop+0x24>)
    65a0:	f06f 0140 	mvn.w	r1, #64	; 0x40
    65a4:	f010 fe34 	bl	17210 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    65a8:	0643      	lsls	r3, r0, #25
    65aa:	d506      	bpl.n	65ba <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
    65ac:	4b05      	ldr	r3, [pc, #20]	; (65c4 <bt_le_scan_stop+0x28>)
    65ae:	2000      	movs	r0, #0
    65b0:	6018      	str	r0, [r3, #0]
		bt_id_pending_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
    65b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
    65b6:	f7ff be3d 	b.w	6234 <bt_le_scan_update>
}
    65ba:	f06f 0044 	mvn.w	r0, #68	; 0x44
    65be:	bd08      	pop	{r3, pc}
    65c0:	20000098 	.word	0x20000098
    65c4:	20001034 	.word	0x20001034

000065c8 <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    65c8:	2300      	movs	r3, #0
	tx->user_data = NULL;
    65ca:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
    65ce:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
    65d0:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
    65d2:	4801      	ldr	r0, [pc, #4]	; (65d8 <tx_free+0x10>)
    65d4:	f012 bb19 	b.w	18c0a <k_queue_append>
    65d8:	20000670 	.word	0x20000670

000065dc <notify_connected>:
{
    65dc:	b538      	push	{r3, r4, r5, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    65de:	4b09      	ldr	r3, [pc, #36]	; (6604 <notify_connected+0x28>)
    65e0:	681d      	ldr	r5, [r3, #0]
{
    65e2:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    65e4:	7a61      	ldrb	r1, [r4, #9]
    65e6:	b92d      	cbnz	r5, 65f4 <notify_connected+0x18>
	if (!conn->err) {
    65e8:	b951      	cbnz	r1, 6600 <notify_connected+0x24>
		bt_gatt_connected(conn);
    65ea:	4620      	mov	r0, r4
}
    65ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
    65f0:	f001 bef4 	b.w	83dc <bt_gatt_connected>
		if (cb->connected) {
    65f4:	682b      	ldr	r3, [r5, #0]
    65f6:	b10b      	cbz	r3, 65fc <notify_connected+0x20>
			cb->connected(conn, conn->err);
    65f8:	4620      	mov	r0, r4
    65fa:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    65fc:	692d      	ldr	r5, [r5, #16]
    65fe:	e7f1      	b.n	65e4 <notify_connected+0x8>
}
    6600:	bd38      	pop	{r3, r4, r5, pc}
    6602:	bf00      	nop
    6604:	20001038 	.word	0x20001038

00006608 <send_frag>:
	return bt_send(buf);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, uint8_t flags,
		      bool always_consume)
{
    6608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    660c:	694d      	ldr	r5, [r1, #20]
{
    660e:	4604      	mov	r4, r0
    6610:	460e      	mov	r6, r1
    6612:	4690      	mov	r8, r2
    6614:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
    6616:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    661a:	483f      	ldr	r0, [pc, #252]	; (6718 <send_frag+0x110>)
    661c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6620:	f00e fe9e 	bl	15360 <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    6624:	7aa3      	ldrb	r3, [r4, #10]
    6626:	2b07      	cmp	r3, #7
    6628:	d146      	bne.n	66b8 <send_frag+0xb0>
	__asm__ volatile(
    662a:	f04f 0320 	mov.w	r3, #32
    662e:	f3ef 8211 	mrs	r2, BASEPRI
    6632:	f383 8811 	msr	BASEPRI, r3
    6636:	f3bf 8f6f 	isb	sy
		goto fail;
	}

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
    663a:	2d00      	cmp	r5, #0
    663c:	d04e      	beq.n	66dc <send_frag+0xd4>
	parent->next = child;
    663e:	2300      	movs	r3, #0
    6640:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
    6642:	69a3      	ldr	r3, [r4, #24]
    6644:	2b00      	cmp	r3, #0
    6646:	d146      	bne.n	66d6 <send_frag+0xce>
	list->head = node;
    6648:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    664c:	f382 8811 	msr	BASEPRI, r2
    6650:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
    6654:	2104      	movs	r1, #4
    6656:	f106 0008 	add.w	r0, r6, #8
    665a:	f012 f8dd 	bl	18818 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    665e:	8823      	ldrh	r3, [r4, #0]
    6660:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
    6664:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    6668:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    666a:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    666e:	3b04      	subs	r3, #4
    6670:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    6672:	2302      	movs	r3, #2
    6674:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
    6676:	4630      	mov	r0, r6
    6678:	f7ff f84a 	bl	5710 <bt_send>
		err = send_iso(conn, buf, flags);
	} else {
		err = send_acl(conn, buf, flags);
	}

	if (err) {
    667c:	2800      	cmp	r0, #0
    667e:	d049      	beq.n	6714 <send_frag+0x10c>
	__asm__ volatile(
    6680:	f04f 0320 	mov.w	r3, #32
    6684:	f3ef 8111 	mrs	r1, BASEPRI
    6688:	f383 8811 	msr	BASEPRI, r3
    668c:	f3bf 8f6f 	isb	sy
		BT_ERR("Unable to send to driver (err %d)", err);
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
    6690:	2d00      	cmp	r5, #0
    6692:	d039      	beq.n	6708 <send_frag+0x100>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6694:	6963      	ldr	r3, [r4, #20]
    6696:	2200      	movs	r2, #0
    6698:	b153      	cbz	r3, 66b0 <send_frag+0xa8>
    669a:	429d      	cmp	r5, r3
    669c:	d131      	bne.n	6702 <send_frag+0xfa>
Z_GENLIST_REMOVE(slist, snode)
    669e:	682b      	ldr	r3, [r5, #0]
    66a0:	bb4a      	cbnz	r2, 66f6 <send_frag+0xee>
    66a2:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
    66a4:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    66a6:	4295      	cmp	r5, r2
    66a8:	d100      	bne.n	66ac <send_frag+0xa4>
	list->tail = node;
    66aa:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    66ac:	2300      	movs	r3, #0
    66ae:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    66b0:	f381 8811 	msr	BASEPRI, r1
    66b4:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    66b8:	4817      	ldr	r0, [pc, #92]	; (6718 <send_frag+0x110>)
    66ba:	f00e fe2b 	bl	15314 <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
    66be:	b115      	cbz	r5, 66c6 <send_frag+0xbe>
		tx_free(tx);
    66c0:	4628      	mov	r0, r5
    66c2:	f7ff ff81 	bl	65c8 <tx_free>
	}

	if (always_consume) {
    66c6:	b11f      	cbz	r7, 66d0 <send_frag+0xc8>
		net_buf_unref(buf);
    66c8:	4630      	mov	r0, r6
    66ca:	f00d fa37 	bl	13b3c <net_buf_unref>
	}
	return false;
    66ce:	2700      	movs	r7, #0
}
    66d0:	4638      	mov	r0, r7
    66d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    66d6:	601d      	str	r5, [r3, #0]
	list->tail = node;
    66d8:	61a5      	str	r5, [r4, #24]
}
    66da:	e7b7      	b.n	664c <send_frag+0x44>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
    66dc:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
    66de:	b133      	cbz	r3, 66ee <send_frag+0xe6>
			pending_no_cb = &tail_tx->pending_no_cb;
    66e0:	f103 090c 	add.w	r9, r3, #12
    66e4:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    66e6:	3301      	adds	r3, #1
    66e8:	f8c9 3000 	str.w	r3, [r9]
    66ec:	e7ae      	b.n	664c <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
    66ee:	69e3      	ldr	r3, [r4, #28]
    66f0:	f104 091c 	add.w	r9, r4, #28
    66f4:	e7f7      	b.n	66e6 <send_frag+0xde>
	parent->next = child;
    66f6:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    66f8:	69a3      	ldr	r3, [r4, #24]
    66fa:	429d      	cmp	r5, r3
	list->tail = node;
    66fc:	bf08      	it	eq
    66fe:	61a2      	streq	r2, [r4, #24]
}
    6700:	e7d4      	b.n	66ac <send_frag+0xa4>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    6702:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6704:	681b      	ldr	r3, [r3, #0]
    6706:	e7c7      	b.n	6698 <send_frag+0x90>
			(*pending_no_cb)--;
    6708:	f8d9 3000 	ldr.w	r3, [r9]
    670c:	3b01      	subs	r3, #1
    670e:	f8c9 3000 	str.w	r3, [r9]
    6712:	e7cd      	b.n	66b0 <send_frag+0xa8>
	return true;
    6714:	2701      	movs	r7, #1
    6716:	e7db      	b.n	66d0 <send_frag+0xc8>
    6718:	200000d0 	.word	0x200000d0

0000671c <bt_conn_get_pkts>:
}
    671c:	4800      	ldr	r0, [pc, #0]	; (6720 <bt_conn_get_pkts+0x4>)
    671e:	4770      	bx	lr
    6720:	200000d0 	.word	0x200000d0

00006724 <notify_le_param_updated>:
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    6724:	1d03      	adds	r3, r0, #4
{
    6726:	b570      	push	{r4, r5, r6, lr}
    6728:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    672a:	4618      	mov	r0, r3
    672c:	f010 fd7f 	bl	1722e <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    6730:	0582      	lsls	r2, r0, #22
    6732:	d519      	bpl.n	6768 <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
    6734:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    6738:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
    673c:	4291      	cmp	r1, r2
    673e:	d813      	bhi.n	6768 <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
    6740:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
    6744:	4291      	cmp	r1, r2
    6746:	d30f      	bcc.n	6768 <notify_le_param_updated+0x44>
	    conn->le.latency == conn->le.pending_latency &&
    6748:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
    674c:	4291      	cmp	r1, r2
    674e:	d10b      	bne.n	6768 <notify_le_param_updated+0x44>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6750:	f3bf 8f5b 	dmb	ish
    6754:	e853 2f00 	ldrex	r2, [r3]
    6758:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    675c:	e843 2100 	strex	r1, r2, [r3]
    6760:	2900      	cmp	r1, #0
    6762:	d1f7      	bne.n	6754 <notify_le_param_updated+0x30>
    6764:	f3bf 8f5b 	dmb	ish
	for (cb = callback_list; cb; cb = cb->_next) {
    6768:	4b07      	ldr	r3, [pc, #28]	; (6788 <notify_le_param_updated+0x64>)
    676a:	681d      	ldr	r5, [r3, #0]
    676c:	b905      	cbnz	r5, 6770 <notify_le_param_updated+0x4c>
}
    676e:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    6770:	68ee      	ldr	r6, [r5, #12]
    6772:	b13e      	cbz	r6, 6784 <notify_le_param_updated+0x60>
			cb->le_param_updated(conn, conn->le.interval,
    6774:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    6778:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    677c:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    6780:	4620      	mov	r0, r4
    6782:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    6784:	692d      	ldr	r5, [r5, #16]
    6786:	e7f1      	b.n	676c <notify_le_param_updated+0x48>
    6788:	20001038 	.word	0x20001038

0000678c <le_param_req>:
{
    678c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    678e:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    6790:	4608      	mov	r0, r1
{
    6792:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    6794:	f010 fb8f 	bl	16eb6 <bt_le_conn_params_valid>
    6798:	4604      	mov	r4, r0
    679a:	b910      	cbnz	r0, 67a2 <le_param_req+0x16>
		return false;
    679c:	2400      	movs	r4, #0
}
    679e:	4620      	mov	r0, r4
    67a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    67a2:	4b09      	ldr	r3, [pc, #36]	; (67c8 <le_param_req+0x3c>)
    67a4:	681e      	ldr	r6, [r3, #0]
    67a6:	2e00      	cmp	r6, #0
    67a8:	d0f9      	beq.n	679e <le_param_req+0x12>
		if (!cb->le_param_req) {
    67aa:	68b3      	ldr	r3, [r6, #8]
    67ac:	b90b      	cbnz	r3, 67b2 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    67ae:	6936      	ldr	r6, [r6, #16]
    67b0:	e7f9      	b.n	67a6 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    67b2:	4629      	mov	r1, r5
    67b4:	4638      	mov	r0, r7
    67b6:	4798      	blx	r3
    67b8:	2800      	cmp	r0, #0
    67ba:	d0ef      	beq.n	679c <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    67bc:	4628      	mov	r0, r5
    67be:	f010 fb7a 	bl	16eb6 <bt_le_conn_params_valid>
    67c2:	2800      	cmp	r0, #0
    67c4:	d1f3      	bne.n	67ae <le_param_req+0x22>
    67c6:	e7e9      	b.n	679c <le_param_req+0x10>
    67c8:	20001038 	.word	0x20001038

000067cc <bt_conn_cb_register>:
	cb->_next = callback_list;
    67cc:	4b02      	ldr	r3, [pc, #8]	; (67d8 <bt_conn_cb_register+0xc>)
    67ce:	681a      	ldr	r2, [r3, #0]
    67d0:	6102      	str	r2, [r0, #16]
	callback_list = cb;
    67d2:	6018      	str	r0, [r3, #0]
}
    67d4:	4770      	bx	lr
    67d6:	bf00      	nop
    67d8:	20001038 	.word	0x20001038

000067dc <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
    67dc:	b570      	push	{r4, r5, r6, lr}
    67de:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    67e0:	f100 0638 	add.w	r6, r0, #56	; 0x38
    67e4:	2200      	movs	r2, #0
    67e6:	2300      	movs	r3, #0
    67e8:	4630      	mov	r0, r6
    67ea:	f011 ffb5 	bl	18758 <net_buf_get>
    67ee:	4605      	mov	r5, r0
    67f0:	b958      	cbnz	r0, 680a <conn_cleanup+0x2e>
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);

	bt_conn_reset_rx_state(conn);
    67f2:	4620      	mov	r0, r4
    67f4:	f010 fd8d 	bl	17312 <bt_conn_reset_rx_state>
	return k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
    67f8:	f104 0158 	add.w	r1, r4, #88	; 0x58
    67fc:	4807      	ldr	r0, [pc, #28]	; (681c <conn_cleanup+0x40>)

	k_delayed_work_submit(&conn->deferred_work, K_NO_WAIT);
}
    67fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6802:	2200      	movs	r2, #0
    6804:	2300      	movs	r3, #0
    6806:	f00e bffb 	b.w	15800 <k_work_reschedule_for_queue>
		if (tx_data(buf)->tx) {
    680a:	6968      	ldr	r0, [r5, #20]
    680c:	b108      	cbz	r0, 6812 <conn_cleanup+0x36>
			tx_free(tx_data(buf)->tx);
    680e:	f7ff fedb 	bl	65c8 <tx_free>
		net_buf_unref(buf);
    6812:	4628      	mov	r0, r5
    6814:	f00d f992 	bl	13b3c <net_buf_unref>
    6818:	e7e4      	b.n	67e4 <conn_cleanup+0x8>
    681a:	bf00      	nop
    681c:	20000ed0 	.word	0x20000ed0

00006820 <bt_conn_send_cb>:
{
    6820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6824:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
    6826:	7a83      	ldrb	r3, [r0, #10]
    6828:	2b07      	cmp	r3, #7
{
    682a:	4606      	mov	r6, r0
    682c:	460d      	mov	r5, r1
    682e:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
    6830:	d005      	beq.n	683e <bt_conn_send_cb+0x1e>
		net_buf_unref(buf);
    6832:	4608      	mov	r0, r1
    6834:	f00d f982 	bl	13b3c <net_buf_unref>
			return -ENOTCONN;
    6838:	f06f 0038 	mvn.w	r0, #56	; 0x38
    683c:	e015      	b.n	686a <bt_conn_send_cb+0x4a>
	if (cb) {
    683e:	b362      	cbz	r2, 689a <bt_conn_send_cb+0x7a>
	return z_impl_k_current_get();
    6840:	f00e fcee 	bl	15220 <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    6844:	4b16      	ldr	r3, [pc, #88]	; (68a0 <bt_conn_send_cb+0x80>)
    6846:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    6848:	4816      	ldr	r0, [pc, #88]	; (68a4 <bt_conn_send_cb+0x84>)
    684a:	bf07      	ittee	eq
    684c:	2200      	moveq	r2, #0
    684e:	2300      	moveq	r3, #0
    6850:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    6854:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    6858:	f00e f9f2 	bl	14c40 <z_impl_k_queue_get>
    685c:	4604      	mov	r4, r0
		if (!tx) {
    685e:	b930      	cbnz	r0, 686e <bt_conn_send_cb+0x4e>
			net_buf_unref(buf);
    6860:	4628      	mov	r0, r5
    6862:	f00d f96b 	bl	13b3c <net_buf_unref>
			return -ENOBUFS;
    6866:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    686a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
    686e:	7ab3      	ldrb	r3, [r6, #10]
    6870:	2b07      	cmp	r3, #7
    6872:	d006      	beq.n	6882 <bt_conn_send_cb+0x62>
			net_buf_unref(buf);
    6874:	4628      	mov	r0, r5
    6876:	f00d f961 	bl	13b3c <net_buf_unref>
			tx_free(tx);
    687a:	4620      	mov	r0, r4
    687c:	f7ff fea4 	bl	65c8 <tx_free>
    6880:	e7da      	b.n	6838 <bt_conn_send_cb+0x18>
		tx->pending_no_cb = 0U;
    6882:	2300      	movs	r3, #0
		tx->user_data = user_data;
    6884:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
    6888:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    688a:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
    688c:	f106 0038 	add.w	r0, r6, #56	; 0x38
    6890:	4629      	mov	r1, r5
    6892:	f011 ff7f 	bl	18794 <net_buf_put>
	return 0;
    6896:	2000      	movs	r0, #0
    6898:	e7e7      	b.n	686a <bt_conn_send_cb+0x4a>
		tx_data(buf)->tx = NULL;
    689a:	614a      	str	r2, [r1, #20]
    689c:	e7f6      	b.n	688c <bt_conn_send_cb+0x6c>
    689e:	bf00      	nop
    68a0:	20000ed0 	.word	0x20000ed0
    68a4:	20000670 	.word	0x20000670

000068a8 <bt_conn_prepare_events>:

	return 0;
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
    68a8:	b538      	push	{r3, r4, r5, lr}
	int i, ev_count = 0;
	struct bt_conn *conn;

	BT_DBG("");

	conn_change.signaled = 0U;
    68aa:	4b1b      	ldr	r3, [pc, #108]	; (6918 <bt_conn_prepare_events+0x70>)
    68ac:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    68ae:	2101      	movs	r1, #1
{
    68b0:	4604      	mov	r4, r0
	conn_change.signaled = 0U;
    68b2:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    68b4:	f012 fd59 	bl	1936a <k_poll_event_init>
	if (!atomic_get(&conn->ref)) {
    68b8:	4b18      	ldr	r3, [pc, #96]	; (691c <bt_conn_prepare_events+0x74>)
    68ba:	f103 00b8 	add.w	r0, r3, #184	; 0xb8
    68be:	f010 fcb6 	bl	1722e <atomic_get>
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		conn = &acl_conns[i];

		if (!conn_prepare_events(conn, &events[ev_count])) {
    68c2:	f104 0514 	add.w	r5, r4, #20
	if (!atomic_get(&conn->ref)) {
    68c6:	4619      	mov	r1, r3
    68c8:	b908      	cbnz	r0, 68ce <bt_conn_prepare_events+0x26>
		conn_cleanup(conn);
    68ca:	2001      	movs	r0, #1
		}
	}
#endif

	return ev_count;
}
    68cc:	bd38      	pop	{r3, r4, r5, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
    68ce:	7a9a      	ldrb	r2, [r3, #10]
    68d0:	b99a      	cbnz	r2, 68fa <bt_conn_prepare_events+0x52>
    68d2:	f3bf 8f5b 	dmb	ish
    68d6:	1d1a      	adds	r2, r3, #4
    68d8:	e852 0f00 	ldrex	r0, [r2]
    68dc:	f020 0c40 	bic.w	ip, r0, #64	; 0x40
    68e0:	e842 ce00 	strex	lr, ip, [r2]
    68e4:	f1be 0f00 	cmp.w	lr, #0
    68e8:	d1f6      	bne.n	68d8 <bt_conn_prepare_events+0x30>
    68ea:	f3bf 8f5b 	dmb	ish
    68ee:	0642      	lsls	r2, r0, #25
    68f0:	d503      	bpl.n	68fa <bt_conn_prepare_events+0x52>
		conn_cleanup(conn);
    68f2:	4618      	mov	r0, r3
    68f4:	f7ff ff72 	bl	67dc <conn_cleanup>
    68f8:	e7e7      	b.n	68ca <bt_conn_prepare_events+0x22>
	if (conn->state != BT_CONN_CONNECTED) {
    68fa:	7a8b      	ldrb	r3, [r1, #10]
    68fc:	2b07      	cmp	r3, #7
    68fe:	d1e4      	bne.n	68ca <bt_conn_prepare_events+0x22>
	k_poll_event_init(&events[0],
    6900:	4b07      	ldr	r3, [pc, #28]	; (6920 <bt_conn_prepare_events+0x78>)
    6902:	4628      	mov	r0, r5
    6904:	2200      	movs	r2, #0
    6906:	2104      	movs	r1, #4
    6908:	f012 fd2f 	bl	1936a <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    690c:	2301      	movs	r3, #1
    690e:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
    6912:	2002      	movs	r0, #2
	return ev_count;
    6914:	e7da      	b.n	68cc <bt_conn_prepare_events+0x24>
    6916:	bf00      	nop
    6918:	2000018c 	.word	0x2000018c
    691c:	20000810 	.word	0x20000810
    6920:	20000848 	.word	0x20000848

00006924 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
    6924:	b570      	push	{r4, r5, r6, lr}
    6926:	4606      	mov	r6, r0
    6928:	460d      	mov	r5, r1
	conn = bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
    692a:	480e      	ldr	r0, [pc, #56]	; (6964 <bt_conn_add_le+0x40>)
    692c:	2101      	movs	r1, #1
    692e:	f010 fcc8 	bl	172c2 <bt_conn_new>
	if (!conn) {
    6932:	4604      	mov	r4, r0
    6934:	b1a0      	cbz	r0, 6960 <bt_conn_add_le+0x3c>
	k_work_init_delayable(&work->work, handler);
    6936:	490c      	ldr	r1, [pc, #48]	; (6968 <bt_conn_add_le+0x44>)
    6938:	3058      	adds	r0, #88	; 0x58
    693a:	f012 fb56 	bl	18fea <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
    693e:	490b      	ldr	r1, [pc, #44]	; (696c <bt_conn_add_le+0x48>)
    6940:	f104 0028 	add.w	r0, r4, #40	; 0x28
    6944:	f012 fb2b 	bl	18f9e <k_work_init>

	if (!conn) {
		return NULL;
	}

	conn->id = id;
    6948:	7226      	strb	r6, [r4, #8]
    694a:	2207      	movs	r2, #7
    694c:	4629      	mov	r1, r5
    694e:	f104 0088 	add.w	r0, r4, #136	; 0x88
    6952:	f010 f8ad 	bl	16ab0 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
    6956:	2301      	movs	r3, #1
    6958:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    695a:	4b05      	ldr	r3, [pc, #20]	; (6970 <bt_conn_add_le+0x4c>)
    695c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
    6960:	4620      	mov	r0, r4
    6962:	bd70      	pop	{r4, r5, r6, pc}
    6964:	20000810 	.word	0x20000810
    6968:	00006e31 	.word	0x00006e31
    696c:	000172bd 	.word	0x000172bd
    6970:	00280018 	.word	0x00280018

00006974 <bt_conn_lookup_handle>:
		break;
	}
}

struct bt_conn *bt_conn_lookup_handle(uint16_t handle)
{
    6974:	4602      	mov	r2, r0
    6976:	b508      	push	{r3, lr}
	struct bt_conn *conn;

	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
    6978:	2101      	movs	r1, #1
    697a:	4803      	ldr	r0, [pc, #12]	; (6988 <bt_conn_lookup_handle+0x14>)
    697c:	f010 fd54 	bl	17428 <conn_lookup_handle>
		return conn;
	}
#endif

	return NULL;
}
    6980:	2800      	cmp	r0, #0
    6982:	bf38      	it	cc
    6984:	2000      	movcc	r0, #0
    6986:	bd08      	pop	{r3, pc}
    6988:	20000810 	.word	0x20000810

0000698c <bt_conn_set_state>:
{
    698c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->state == state) {
    6990:	7a85      	ldrb	r5, [r0, #10]
    6992:	428d      	cmp	r5, r1
{
    6994:	4604      	mov	r4, r0
	if (conn->state == state) {
    6996:	f000 80c2 	beq.w	6b1e <bt_conn_set_state+0x192>
	conn->state = state;
    699a:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
    699c:	b15d      	cbz	r5, 69b6 <bt_conn_set_state+0x2a>
    699e:	2d06      	cmp	r5, #6
    69a0:	d00c      	beq.n	69bc <bt_conn_set_state+0x30>
	switch (conn->state) {
    69a2:	7aa3      	ldrb	r3, [r4, #10]
    69a4:	2b07      	cmp	r3, #7
    69a6:	f200 80ba 	bhi.w	6b1e <bt_conn_set_state+0x192>
    69aa:	e8df f003 	tbb	[pc, r3]
    69ae:	0e3c      	.short	0x0e3c
    69b0:	b8b8b8b8 	.word	0xb8b8b8b8
    69b4:	257b      	.short	0x257b
		bt_conn_ref(conn);
    69b6:	f010 fd1c 	bl	173f2 <bt_conn_ref>
		break;
    69ba:	e7f2      	b.n	69a2 <bt_conn_set_state+0x16>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    69bc:	7883      	ldrb	r3, [r0, #2]
    69be:	2b01      	cmp	r3, #1
    69c0:	d1ef      	bne.n	69a2 <bt_conn_set_state+0x16>
			k_delayed_work_cancel(&conn->deferred_work);
    69c2:	3058      	adds	r0, #88	; 0x58
    69c4:	f010 fc39 	bl	1723a <k_delayed_work_cancel>
    69c8:	e7eb      	b.n	69a2 <bt_conn_set_state+0x16>
	z_impl_k_sem_give(sem);
    69ca:	4d56      	ldr	r5, [pc, #344]	; (6b24 <bt_conn_set_state+0x198>)
		tx->pending_no_cb = 0U;
    69cc:	2600      	movs	r6, #0
	__asm__ volatile(
    69ce:	f04f 0320 	mov.w	r3, #32
    69d2:	f3ef 8211 	mrs	r2, BASEPRI
    69d6:	f383 8811 	msr	BASEPRI, r3
    69da:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    69de:	69e3      	ldr	r3, [r4, #28]
    69e0:	2b00      	cmp	r3, #0
    69e2:	d07d      	beq.n	6ae0 <bt_conn_set_state+0x154>
			conn->pending_no_cb--;
    69e4:	3b01      	subs	r3, #1
    69e6:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    69e8:	f382 8811 	msr	BASEPRI, r2
    69ec:	f3bf 8f6f 	isb	sy
    69f0:	4628      	mov	r0, r5
    69f2:	f00e fc8f 	bl	15314 <z_impl_k_sem_give>
}
    69f6:	e7ea      	b.n	69ce <bt_conn_set_state+0x42>
		if (conn->type == BT_CONN_TYPE_SCO) {
    69f8:	78a3      	ldrb	r3, [r4, #2]
    69fa:	2b04      	cmp	r3, #4
    69fc:	f000 808f 	beq.w	6b1e <bt_conn_set_state+0x192>
	z_impl_k_queue_init(queue);
    6a00:	f104 0038 	add.w	r0, r4, #56	; 0x38
    6a04:	f012 f8f5 	bl	18bf2 <z_impl_k_queue_init>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    6a08:	2100      	movs	r1, #0
    6a0a:	4847      	ldr	r0, [pc, #284]	; (6b28 <bt_conn_set_state+0x19c>)
    6a0c:	f00f f90e 	bl	15c2c <z_impl_k_poll_signal_raise>
	list->head = NULL;
    6a10:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
    6a12:	4620      	mov	r0, r4
	list->tail = NULL;
    6a14:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
    6a18:	f000 fb5a 	bl	70d0 <bt_l2cap_connected>
		notify_connected(conn);
    6a1c:	4620      	mov	r0, r4
}
    6a1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify_connected(conn);
    6a22:	f7ff bddb 	b.w	65dc <notify_connected>
		if (conn->type == BT_CONN_TYPE_SCO) {
    6a26:	78a3      	ldrb	r3, [r4, #2]
    6a28:	2b04      	cmp	r3, #4
    6a2a:	d105      	bne.n	6a38 <bt_conn_set_state+0xac>
	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
	atomic_val_t old = atomic_dec(&conn->ref);
    6a2c:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
}
    6a30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	atomic_val_t old = atomic_dec(&conn->ref);
    6a34:	f010 bc12 	b.w	1725c <atomic_dec>
		switch (old_state) {
    6a38:	3d01      	subs	r5, #1
    6a3a:	2d05      	cmp	r5, #5
    6a3c:	d86f      	bhi.n	6b1e <bt_conn_set_state+0x192>
    6a3e:	a301      	add	r3, pc, #4	; (adr r3, 6a44 <bt_conn_set_state+0xb8>)
    6a40:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
    6a44:	00006a5d 	.word	0x00006a5d
    6a48:	00006a97 	.word	0x00006a97
    6a4c:	00006a2d 	.word	0x00006a2d
    6a50:	00006a2d 	.word	0x00006a2d
    6a54:	00006a97 	.word	0x00006a97
    6a58:	00006a97 	.word	0x00006a97
			tx_notify(conn);
    6a5c:	4620      	mov	r0, r4
    6a5e:	f010 fc0a 	bl	17276 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
    6a62:	78a3      	ldrb	r3, [r4, #2]
    6a64:	2b01      	cmp	r3, #1
    6a66:	d103      	bne.n	6a70 <bt_conn_set_state+0xe4>
				k_delayed_work_cancel(&conn->deferred_work);
    6a68:	f104 0058 	add.w	r0, r4, #88	; 0x58
    6a6c:	f010 fbe5 	bl	1723a <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6a70:	f3bf 8f5b 	dmb	ish
    6a74:	3404      	adds	r4, #4
    6a76:	e854 3f00 	ldrex	r3, [r4]
    6a7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6a7e:	e844 3200 	strex	r2, r3, [r4]
    6a82:	2a00      	cmp	r2, #0
    6a84:	d1f7      	bne.n	6a76 <bt_conn_set_state+0xea>
    6a86:	f3bf 8f5b 	dmb	ish
    6a8a:	4827      	ldr	r0, [pc, #156]	; (6b28 <bt_conn_set_state+0x19c>)
}
    6a8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6a90:	2100      	movs	r1, #0
    6a92:	f00f b8cb 	b.w	15c2c <z_impl_k_poll_signal_raise>
			if (conn->err) {
    6a96:	7a63      	ldrb	r3, [r4, #9]
    6a98:	2b00      	cmp	r3, #0
    6a9a:	d0c7      	beq.n	6a2c <bt_conn_set_state+0xa0>
				notify_connected(conn);
    6a9c:	4620      	mov	r0, r4
    6a9e:	f7ff fd9d 	bl	65dc <notify_connected>
    6aa2:	e7c3      	b.n	6a2c <bt_conn_set_state+0xa0>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    6aa4:	78a3      	ldrb	r3, [r4, #2]
    6aa6:	2b01      	cmp	r3, #1
    6aa8:	d139      	bne.n	6b1e <bt_conn_set_state+0x192>
				K_MSEC(10 * bt_dev.create_param.timeout));
    6aaa:	4b20      	ldr	r3, [pc, #128]	; (6b2c <bt_conn_set_state+0x1a0>)
    6aac:	8a9b      	ldrh	r3, [r3, #20]
    6aae:	210a      	movs	r1, #10
    6ab0:	4359      	muls	r1, r3
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    6ab2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    6ab6:	f240 36e7 	movw	r6, #999	; 0x3e7
    6aba:	2700      	movs	r7, #0
    6abc:	fbc0 6701 	smlal	r6, r7, r0, r1
    6ac0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6ac4:	2300      	movs	r3, #0
    6ac6:	4630      	mov	r0, r6
    6ac8:	4639      	mov	r1, r7
    6aca:	f7f9 fb19 	bl	100 <__aeabi_uldivmod>
    6ace:	4602      	mov	r2, r0
    6ad0:	460b      	mov	r3, r1
	return k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
    6ad2:	4817      	ldr	r0, [pc, #92]	; (6b30 <bt_conn_set_state+0x1a4>)
    6ad4:	f104 0158 	add.w	r1, r4, #88	; 0x58
}
    6ad8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6adc:	f00e be90 	b.w	15800 <k_work_reschedule_for_queue>
Z_GENLIST_IS_EMPTY(slist)
    6ae0:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
    6ae2:	b128      	cbz	r0, 6af0 <bt_conn_set_state+0x164>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    6ae4:	69a1      	ldr	r1, [r4, #24]
    6ae6:	6803      	ldr	r3, [r0, #0]
	list->head = node;
    6ae8:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    6aea:	4288      	cmp	r0, r1
	list->tail = node;
    6aec:	bf08      	it	eq
    6aee:	61a3      	streq	r3, [r4, #24]
    6af0:	f382 8811 	msr	BASEPRI, r2
    6af4:	f3bf 8f6f 	isb	sy
		if (!node) {
    6af8:	b188      	cbz	r0, 6b1e <bt_conn_set_state+0x192>
	__asm__ volatile(
    6afa:	f04f 0220 	mov.w	r2, #32
    6afe:	f3ef 8311 	mrs	r3, BASEPRI
    6b02:	f382 8811 	msr	BASEPRI, r2
    6b06:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    6b0a:	68c2      	ldr	r2, [r0, #12]
    6b0c:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    6b0e:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
    6b10:	f383 8811 	msr	BASEPRI, r3
    6b14:	f3bf 8f6f 	isb	sy
		tx_free(tx);
    6b18:	f7ff fd56 	bl	65c8 <tx_free>
    6b1c:	e768      	b.n	69f0 <bt_conn_set_state+0x64>
}
    6b1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6b22:	bf00      	nop
    6b24:	200000d0 	.word	0x200000d0
    6b28:	2000018c 	.word	0x2000018c
    6b2c:	20000000 	.word	0x20000000
    6b30:	20000ed0 	.word	0x20000ed0

00006b34 <bt_conn_lookup_addr_le>:
{
    6b34:	b570      	push	{r4, r5, r6, lr}
    6b36:	4605      	mov	r5, r0
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    6b38:	480d      	ldr	r0, [pc, #52]	; (6b70 <bt_conn_lookup_addr_le+0x3c>)
{
    6b3a:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    6b3c:	f010 fc59 	bl	173f2 <bt_conn_ref>
		if (!conn) {
    6b40:	4604      	mov	r4, r0
    6b42:	b130      	cbz	r0, 6b52 <bt_conn_lookup_addr_le+0x1e>
		if (conn->type != BT_CONN_TYPE_LE) {
    6b44:	7883      	ldrb	r3, [r0, #2]
    6b46:	2b01      	cmp	r3, #1
    6b48:	d005      	beq.n	6b56 <bt_conn_lookup_addr_le+0x22>
	atomic_val_t old = atomic_dec(&conn->ref);
    6b4a:	30b8      	adds	r0, #184	; 0xb8
    6b4c:	f010 fb86 	bl	1725c <atomic_dec>
	return NULL;
    6b50:	2400      	movs	r4, #0
}
    6b52:	4620      	mov	r0, r4
    6b54:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
    6b56:	4629      	mov	r1, r5
    6b58:	4632      	mov	r2, r6
    6b5a:	f010 fc2a 	bl	173b2 <bt_conn_is_peer_addr_le>
    6b5e:	4605      	mov	r5, r0
    6b60:	2800      	cmp	r0, #0
    6b62:	d1f6      	bne.n	6b52 <bt_conn_lookup_addr_le+0x1e>
	atomic_val_t old = atomic_dec(&conn->ref);
    6b64:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    6b68:	f010 fb78 	bl	1725c <atomic_dec>
	return NULL;
    6b6c:	462c      	mov	r4, r5
			continue;
    6b6e:	e7f0      	b.n	6b52 <bt_conn_lookup_addr_le+0x1e>
    6b70:	20000810 	.word	0x20000810

00006b74 <bt_conn_lookup_state_le>:
{
    6b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b76:	4605      	mov	r5, r0
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    6b78:	4810      	ldr	r0, [pc, #64]	; (6bbc <bt_conn_lookup_state_le+0x48>)
{
    6b7a:	460e      	mov	r6, r1
    6b7c:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    6b7e:	f010 fc38 	bl	173f2 <bt_conn_ref>
		if (!conn) {
    6b82:	4604      	mov	r4, r0
    6b84:	b1b8      	cbz	r0, 6bb6 <bt_conn_lookup_state_le+0x42>
		if (conn->type != BT_CONN_TYPE_LE) {
    6b86:	7883      	ldrb	r3, [r0, #2]
    6b88:	2b01      	cmp	r3, #1
    6b8a:	d003      	beq.n	6b94 <bt_conn_lookup_state_le+0x20>
			bt_conn_ref(conn);
    6b8c:	f010 fc31 	bl	173f2 <bt_conn_ref>
	return NULL;
    6b90:	2400      	movs	r4, #0
			continue;
    6b92:	e010      	b.n	6bb6 <bt_conn_lookup_state_le+0x42>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
    6b94:	b14e      	cbz	r6, 6baa <bt_conn_lookup_state_le+0x36>
    6b96:	4632      	mov	r2, r6
    6b98:	4629      	mov	r1, r5
    6b9a:	f010 fc0a 	bl	173b2 <bt_conn_is_peer_addr_le>
    6b9e:	b920      	cbnz	r0, 6baa <bt_conn_lookup_state_le+0x36>
	atomic_val_t old = atomic_dec(&conn->ref);
    6ba0:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    6ba4:	f010 fb5a 	bl	1725c <atomic_dec>
    6ba8:	e7f2      	b.n	6b90 <bt_conn_lookup_state_le+0x1c>
		if (!(conn->state == state && conn->id == id)) {
    6baa:	7aa3      	ldrb	r3, [r4, #10]
    6bac:	42bb      	cmp	r3, r7
    6bae:	d1f7      	bne.n	6ba0 <bt_conn_lookup_state_le+0x2c>
    6bb0:	7a23      	ldrb	r3, [r4, #8]
    6bb2:	42ab      	cmp	r3, r5
    6bb4:	d1f4      	bne.n	6ba0 <bt_conn_lookup_state_le+0x2c>
}
    6bb6:	4620      	mov	r0, r4
    6bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6bba:	bf00      	nop
    6bbc:	20000810 	.word	0x20000810

00006bc0 <bt_conn_le_create>:

int bt_conn_le_create(const bt_addr_le_t *peer,
		      const struct bt_conn_le_create_param *create_param,
		      const struct bt_le_conn_param *conn_param,
		      struct bt_conn **ret_conn)
{
    6bc0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    6bc4:	4604      	mov	r4, r0
    6bc6:	4845      	ldr	r0, [pc, #276]	; (6cdc <bt_conn_le_create+0x11c>)
    6bc8:	460e      	mov	r6, r1
    6bca:	4615      	mov	r5, r2
    6bcc:	461f      	mov	r7, r3
    6bce:	f010 fb2e 	bl	1722e <atomic_get>
	struct bt_conn *conn;
	bt_addr_le_t dst;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    6bd2:	0781      	lsls	r1, r0, #30
    6bd4:	d405      	bmi.n	6be2 <bt_conn_le_create+0x22>
		return -EAGAIN;
    6bd6:	f06f 050a 	mvn.w	r5, #10
		return err;
	}

	*ret_conn = conn;
	return 0;
}
    6bda:	4628      	mov	r0, r5
    6bdc:	b002      	add	sp, #8
    6bde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!bt_le_conn_params_valid(conn_param)) {
    6be2:	4610      	mov	r0, r2
    6be4:	f010 f967 	bl	16eb6 <bt_le_conn_params_valid>
    6be8:	b910      	cbnz	r0, 6bf0 <bt_conn_le_create+0x30>
		return -EINVAL;
    6bea:	f06f 0515 	mvn.w	r5, #21
    6bee:	e7f4      	b.n	6bda <bt_conn_le_create+0x1a>
    6bf0:	483a      	ldr	r0, [pc, #232]	; (6cdc <bt_conn_le_create+0x11c>)
    6bf2:	f010 fb1c 	bl	1722e <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    6bf6:	0642      	lsls	r2, r0, #25
    6bf8:	d4ed      	bmi.n	6bd6 <bt_conn_le_create+0x16>
    6bfa:	4838      	ldr	r0, [pc, #224]	; (6cdc <bt_conn_le_create+0x11c>)
    6bfc:	f010 fb17 	bl	1722e <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
    6c00:	0503      	lsls	r3, r0, #20
    6c02:	f3c0 28c0 	ubfx	r8, r0, #11, #1
    6c06:	d462      	bmi.n	6cce <bt_conn_le_create+0x10e>
	if (!bt_id_scan_random_addr_check()) {
    6c08:	f010 fb00 	bl	1720c <bt_id_scan_random_addr_check>
    6c0c:	2800      	cmp	r0, #0
    6c0e:	d0ec      	beq.n	6bea <bt_conn_le_create+0x2a>
	if (bt_conn_exists_le(BT_ID_DEFAULT, peer)) {
    6c10:	4621      	mov	r1, r4
    6c12:	4640      	mov	r0, r8
    6c14:	f010 fc28 	bl	17468 <bt_conn_exists_le>
    6c18:	2800      	cmp	r0, #0
    6c1a:	d1e6      	bne.n	6bea <bt_conn_le_create+0x2a>
	if (peer->type == BT_ADDR_LE_PUBLIC_ID ||
    6c1c:	7823      	ldrb	r3, [r4, #0]
    6c1e:	3b02      	subs	r3, #2
    6c20:	2b01      	cmp	r3, #1
    6c22:	d849      	bhi.n	6cb8 <bt_conn_le_create+0xf8>
    6c24:	2207      	movs	r2, #7
    6c26:	4621      	mov	r1, r4
    6c28:	4668      	mov	r0, sp
    6c2a:	f00f ff41 	bl	16ab0 <memcpy>
		dst.type -= BT_ADDR_LE_PUBLIC_ID;
    6c2e:	f89d 3000 	ldrb.w	r3, [sp]
    6c32:	3b02      	subs	r3, #2
    6c34:	f88d 3000 	strb.w	r3, [sp]
	conn = bt_conn_add_le(BT_ID_DEFAULT, &dst);
    6c38:	4669      	mov	r1, sp
    6c3a:	2000      	movs	r0, #0
    6c3c:	f7ff fe72 	bl	6924 <bt_conn_add_le>
	if (!conn) {
    6c40:	4604      	mov	r4, r0
    6c42:	2800      	cmp	r0, #0
    6c44:	d046      	beq.n	6cd4 <bt_conn_le_create+0x114>
	conn->le.interval_min = param->interval_min;
    6c46:	882b      	ldrh	r3, [r5, #0]
    6c48:	f8a0 30a0 	strh.w	r3, [r0, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
    6c4c:	886b      	ldrh	r3, [r5, #2]
    6c4e:	f8a0 30a2 	strh.w	r3, [r0, #162]	; 0xa2
	conn->le.latency = param->latency;
    6c52:	88ab      	ldrh	r3, [r5, #4]
    6c54:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
	conn->le.timeout = param->timeout;
    6c58:	88eb      	ldrh	r3, [r5, #6]
    6c5a:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
	bt_dev.create_param = *param;
    6c5e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    6c62:	4d1f      	ldr	r5, [pc, #124]	; (6ce0 <bt_conn_le_create+0x120>)
    6c64:	f105 0c08 	add.w	ip, r5, #8
    6c68:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		(bt_dev.create_param.timeout != 0) ?
    6c6c:	8aab      	ldrh	r3, [r5, #20]
	bt_dev.create_param.timeout =
    6c6e:	2b00      	cmp	r3, #0
    6c70:	bf08      	it	eq
    6c72:	f44f 7396 	moveq.w	r3, #300	; 0x12c
    6c76:	82ab      	strh	r3, [r5, #20]
		(bt_dev.create_param.interval_coded != 0) ?
    6c78:	8a2b      	ldrh	r3, [r5, #16]
    6c7a:	462a      	mov	r2, r5
	bt_dev.create_param.interval_coded =
    6c7c:	b903      	cbnz	r3, 6c80 <bt_conn_le_create+0xc0>
    6c7e:	89ab      	ldrh	r3, [r5, #12]
    6c80:	8213      	strh	r3, [r2, #16]
		(bt_dev.create_param.window_coded != 0) ?
    6c82:	8a53      	ldrh	r3, [r2, #18]
	bt_dev.create_param.window_coded =
    6c84:	b903      	cbnz	r3, 6c88 <bt_conn_le_create+0xc8>
    6c86:	89d3      	ldrh	r3, [r2, #14]
    6c88:	8253      	strh	r3, [r2, #18]
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    6c8a:	2106      	movs	r1, #6
    6c8c:	4620      	mov	r0, r4
    6c8e:	f7ff fe7d 	bl	698c <bt_conn_set_state>
	err = bt_le_create_conn(conn);
    6c92:	4620      	mov	r0, r4
    6c94:	f010 f8f2 	bl	16e7c <bt_le_create_conn>
	if (err) {
    6c98:	4605      	mov	r5, r0
    6c9a:	b1b0      	cbz	r0, 6cca <bt_conn_le_create+0x10a>
		conn->err = 0;
    6c9c:	2600      	movs	r6, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    6c9e:	4631      	mov	r1, r6
    6ca0:	4620      	mov	r0, r4
		conn->err = 0;
    6ca2:	7266      	strb	r6, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    6ca4:	f7ff fe72 	bl	698c <bt_conn_set_state>
	atomic_val_t old = atomic_dec(&conn->ref);
    6ca8:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    6cac:	f010 fad6 	bl	1725c <atomic_dec>
		bt_le_scan_update(false);
    6cb0:	4630      	mov	r0, r6
    6cb2:	f7ff fabf 	bl	6234 <bt_le_scan_update>
		return err;
    6cb6:	e790      	b.n	6bda <bt_conn_le_create+0x1a>
		bt_addr_le_copy(&dst, bt_lookup_id_addr(BT_ID_DEFAULT, peer));
    6cb8:	4621      	mov	r1, r4
    6cba:	f010 fa93 	bl	171e4 <bt_lookup_id_addr>
    6cbe:	2207      	movs	r2, #7
    6cc0:	4601      	mov	r1, r0
    6cc2:	4668      	mov	r0, sp
    6cc4:	f00f fef4 	bl	16ab0 <memcpy>
}
    6cc8:	e7b6      	b.n	6c38 <bt_conn_le_create+0x78>
	*ret_conn = conn;
    6cca:	603c      	str	r4, [r7, #0]
	return 0;
    6ccc:	e785      	b.n	6bda <bt_conn_le_create+0x1a>
		return -EALREADY;
    6cce:	f06f 0544 	mvn.w	r5, #68	; 0x44
    6cd2:	e782      	b.n	6bda <bt_conn_le_create+0x1a>
		return -ENOMEM;
    6cd4:	f06f 050b 	mvn.w	r5, #11
    6cd8:	e77f      	b.n	6bda <bt_conn_le_create+0x1a>
    6cda:	bf00      	nop
    6cdc:	20000098 	.word	0x20000098
    6ce0:	20000000 	.word	0x20000000

00006ce4 <bt_le_set_auto_conn>:

#if !defined(CONFIG_BT_WHITELIST)
int bt_le_set_auto_conn(const bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
    6ce4:	b570      	push	{r4, r5, r6, lr}
    6ce6:	4606      	mov	r6, r0
    6ce8:	4839      	ldr	r0, [pc, #228]	; (6dd0 <bt_le_set_auto_conn+0xec>)
    6cea:	460d      	mov	r5, r1
    6cec:	f010 fa9f 	bl	1722e <atomic_get>
	struct bt_conn *conn;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    6cf0:	0780      	lsls	r0, r0, #30
    6cf2:	d566      	bpl.n	6dc2 <bt_le_set_auto_conn+0xde>
		return -EAGAIN;
	}

	if (param && !bt_le_conn_params_valid(param)) {
    6cf4:	b929      	cbnz	r1, 6d02 <bt_le_set_auto_conn+0x1e>
		return -EINVAL;
	}

	if (!bt_id_scan_random_addr_check()) {
    6cf6:	f010 fa89 	bl	1720c <bt_id_scan_random_addr_check>
    6cfa:	b940      	cbnz	r0, 6d0e <bt_le_set_auto_conn+0x2a>
		return -EINVAL;
    6cfc:	f06f 0015 	mvn.w	r0, #21
	}

	bt_conn_unref(conn);

	return 0;
}
    6d00:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
    6d02:	4608      	mov	r0, r1
    6d04:	f010 f8d7 	bl	16eb6 <bt_le_conn_params_valid>
    6d08:	2800      	cmp	r0, #0
    6d0a:	d1f4      	bne.n	6cf6 <bt_le_set_auto_conn+0x12>
    6d0c:	e7f6      	b.n	6cfc <bt_le_set_auto_conn+0x18>
	conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr);
    6d0e:	4631      	mov	r1, r6
    6d10:	2000      	movs	r0, #0
    6d12:	f7ff ff0f 	bl	6b34 <bt_conn_lookup_addr_le>
	if (!conn) {
    6d16:	4604      	mov	r4, r0
    6d18:	b928      	cbnz	r0, 6d26 <bt_le_set_auto_conn+0x42>
		conn = bt_conn_add_le(BT_ID_DEFAULT, addr);
    6d1a:	4631      	mov	r1, r6
    6d1c:	f7ff fe02 	bl	6924 <bt_conn_add_le>
		if (!conn) {
    6d20:	4604      	mov	r4, r0
    6d22:	2800      	cmp	r0, #0
    6d24:	d050      	beq.n	6dc8 <bt_le_set_auto_conn+0xe4>
	if (param) {
    6d26:	1d23      	adds	r3, r4, #4
    6d28:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
    6d2c:	b385      	cbz	r5, 6d90 <bt_le_set_auto_conn+0xac>
	conn->le.interval_min = param->interval_min;
    6d2e:	882a      	ldrh	r2, [r5, #0]
    6d30:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
    6d34:	886a      	ldrh	r2, [r5, #2]
    6d36:	f8a4 20a2 	strh.w	r2, [r4, #162]	; 0xa2
	conn->le.latency = param->latency;
    6d3a:	88aa      	ldrh	r2, [r5, #4]
    6d3c:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
	conn->le.timeout = param->timeout;
    6d40:	88ea      	ldrh	r2, [r5, #6]
    6d42:	f8a4 20a6 	strh.w	r2, [r4, #166]	; 0xa6
    6d46:	f3bf 8f5b 	dmb	ish
    6d4a:	e853 2f00 	ldrex	r2, [r3]
    6d4e:	f042 0101 	orr.w	r1, r2, #1
    6d52:	e843 1000 	strex	r0, r1, [r3]
    6d56:	2800      	cmp	r0, #0
    6d58:	d1f7      	bne.n	6d4a <bt_le_set_auto_conn+0x66>
    6d5a:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_and_set_bit(conn->flags,
    6d5e:	07d1      	lsls	r1, r2, #31
    6d60:	d402      	bmi.n	6d68 <bt_le_set_auto_conn+0x84>
			bt_conn_ref(conn);
    6d62:	4620      	mov	r0, r4
    6d64:	f010 fb45 	bl	173f2 <bt_conn_ref>
	if (conn->state == BT_CONN_DISCONNECTED &&
    6d68:	7aa3      	ldrb	r3, [r4, #10]
    6d6a:	b963      	cbnz	r3, 6d86 <bt_le_set_auto_conn+0xa2>
    6d6c:	4818      	ldr	r0, [pc, #96]	; (6dd0 <bt_le_set_auto_conn+0xec>)
    6d6e:	f010 fa5e 	bl	1722e <atomic_get>
    6d72:	0783      	lsls	r3, r0, #30
    6d74:	d507      	bpl.n	6d86 <bt_le_set_auto_conn+0xa2>
		if (param) {
    6d76:	b11d      	cbz	r5, 6d80 <bt_le_set_auto_conn+0x9c>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    6d78:	2102      	movs	r1, #2
    6d7a:	4620      	mov	r0, r4
    6d7c:	f7ff fe06 	bl	698c <bt_conn_set_state>
		bt_le_scan_update(false);
    6d80:	2000      	movs	r0, #0
    6d82:	f7ff fa57 	bl	6234 <bt_le_scan_update>
	atomic_val_t old = atomic_dec(&conn->ref);
    6d86:	4630      	mov	r0, r6
    6d88:	f010 fa68 	bl	1725c <atomic_dec>
	return 0;
    6d8c:	2000      	movs	r0, #0
    6d8e:	e7b7      	b.n	6d00 <bt_le_set_auto_conn+0x1c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6d90:	f3bf 8f5b 	dmb	ish
    6d94:	e853 2f00 	ldrex	r2, [r3]
    6d98:	f022 0101 	bic.w	r1, r2, #1
    6d9c:	e843 1000 	strex	r0, r1, [r3]
    6da0:	2800      	cmp	r0, #0
    6da2:	d1f7      	bne.n	6d94 <bt_le_set_auto_conn+0xb0>
    6da4:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(conn->flags,
    6da8:	07d2      	lsls	r2, r2, #31
    6daa:	d5dd      	bpl.n	6d68 <bt_le_set_auto_conn+0x84>
	atomic_val_t old = atomic_dec(&conn->ref);
    6dac:	4630      	mov	r0, r6
    6dae:	f010 fa55 	bl	1725c <atomic_dec>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
    6db2:	7aa3      	ldrb	r3, [r4, #10]
    6db4:	2b02      	cmp	r3, #2
    6db6:	d1d7      	bne.n	6d68 <bt_le_set_auto_conn+0x84>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    6db8:	4629      	mov	r1, r5
    6dba:	4620      	mov	r0, r4
    6dbc:	f7ff fde6 	bl	698c <bt_conn_set_state>
    6dc0:	e7d2      	b.n	6d68 <bt_le_set_auto_conn+0x84>
		return -EAGAIN;
    6dc2:	f06f 000a 	mvn.w	r0, #10
    6dc6:	e79b      	b.n	6d00 <bt_le_set_auto_conn+0x1c>
			return -ENOMEM;
    6dc8:	f06f 000b 	mvn.w	r0, #11
    6dcc:	e798      	b.n	6d00 <bt_le_set_auto_conn+0x1c>
    6dce:	bf00      	nop
    6dd0:	20000098 	.word	0x20000098

00006dd4 <send_conn_le_param_update>:
{
    6dd4:	b538      	push	{r3, r4, r5, lr}
    6dd6:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
    6dd8:	4608      	mov	r0, r1
{
    6dda:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    6ddc:	f010 f86b 	bl	16eb6 <bt_le_conn_params_valid>
    6de0:	b308      	cbz	r0, 6e26 <send_conn_le_param_update+0x52>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    6de2:	4b12      	ldr	r3, [pc, #72]	; (6e2c <send_conn_le_param_update+0x58>)
    6de4:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
    6de8:	0799      	lsls	r1, r3, #30
    6dea:	d407      	bmi.n	6dfc <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
    6dec:	78e3      	ldrb	r3, [r4, #3]
    6dee:	b173      	cbz	r3, 6e0e <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
    6df0:	4629      	mov	r1, r5
    6df2:	4620      	mov	r0, r4
}
    6df4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    6df8:	f000 b9c6 	b.w	7188 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    6dfc:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
    6e00:	079a      	lsls	r2, r3, #30
    6e02:	d5f3      	bpl.n	6dec <send_conn_le_param_update+0x18>
    6e04:	1d20      	adds	r0, r4, #4
    6e06:	f010 fa12 	bl	1722e <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    6e0a:	0543      	lsls	r3, r0, #21
    6e0c:	d4ee      	bmi.n	6dec <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
    6e0e:	4629      	mov	r1, r5
    6e10:	4620      	mov	r0, r4
    6e12:	f010 fb70 	bl	174f6 <bt_conn_le_conn_update>
		if (rc == 0) {
    6e16:	b928      	cbnz	r0, 6e24 <send_conn_le_param_update+0x50>
			conn->le.pending_latency = param->latency;
    6e18:	88ab      	ldrh	r3, [r5, #4]
    6e1a:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
    6e1e:	88eb      	ldrh	r3, [r5, #6]
    6e20:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
    6e24:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    6e26:	f06f 0015 	mvn.w	r0, #21
    6e2a:	e7fb      	b.n	6e24 <send_conn_le_param_update+0x50>
    6e2c:	20000000 	.word	0x20000000

00006e30 <deferred_work>:
{
    6e30:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
    6e32:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
{
    6e36:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
    6e38:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
    6e3c:	b99b      	cbnz	r3, 6e66 <deferred_work+0x36>
		bt_l2cap_disconnected(conn);
    6e3e:	4630      	mov	r0, r6
    6e40:	f010 fbdc 	bl	175fc <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    6e44:	4b1f      	ldr	r3, [pc, #124]	; (6ec4 <deferred_work+0x94>)
    6e46:	681d      	ldr	r5, [r3, #0]
    6e48:	b92d      	cbnz	r5, 6e56 <deferred_work+0x26>
	atomic_val_t old = atomic_dec(&conn->ref);
    6e4a:	f104 0060 	add.w	r0, r4, #96	; 0x60
    6e4e:	f010 fa05 	bl	1725c <atomic_dec>
}
    6e52:	b002      	add	sp, #8
    6e54:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->disconnected) {
    6e56:	686b      	ldr	r3, [r5, #4]
    6e58:	b11b      	cbz	r3, 6e62 <deferred_work+0x32>
			cb->disconnected(conn, conn->err);
    6e5a:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
    6e5e:	4630      	mov	r0, r6
    6e60:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    6e62:	692d      	ldr	r5, [r5, #16]
    6e64:	e7f0      	b.n	6e48 <deferred_work+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
    6e66:	f810 3c56 	ldrb.w	r3, [r0, #-86]
    6e6a:	2b01      	cmp	r3, #1
    6e6c:	d1f1      	bne.n	6e52 <deferred_work+0x22>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    6e6e:	f810 3c55 	ldrb.w	r3, [r0, #-85]
    6e72:	b913      	cbnz	r3, 6e7a <deferred_work+0x4a>
		bt_le_create_conn_cancel();
    6e74:	f7fe fc28 	bl	56c8 <bt_le_create_conn_cancel>
		return;
    6e78:	e7eb      	b.n	6e52 <deferred_work+0x22>
	if (atomic_test_and_clear_bit(conn->flags,
    6e7a:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
    6e7e:	f3bf 8f5b 	dmb	ish
    6e82:	e855 3f00 	ldrex	r3, [r5]
    6e86:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    6e8a:	e845 2100 	strex	r1, r2, [r5]
    6e8e:	2900      	cmp	r1, #0
    6e90:	d1f7      	bne.n	6e82 <deferred_work+0x52>
    6e92:	f3bf 8f5b 	dmb	ish
    6e96:	059b      	lsls	r3, r3, #22
    6e98:	d507      	bpl.n	6eaa <deferred_work+0x7a>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    6e9a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    6e9c:	9300      	str	r3, [sp, #0]
		send_conn_le_param_update(conn, param);
    6e9e:	4669      	mov	r1, sp
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    6ea0:	6d23      	ldr	r3, [r4, #80]	; 0x50
    6ea2:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
    6ea4:	4630      	mov	r0, r6
    6ea6:	f7ff ff95 	bl	6dd4 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6eaa:	f3bf 8f5b 	dmb	ish
    6eae:	e855 3f00 	ldrex	r3, [r5]
    6eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6eb6:	e845 3200 	strex	r2, r3, [r5]
    6eba:	2a00      	cmp	r2, #0
    6ebc:	d1f7      	bne.n	6eae <deferred_work+0x7e>
    6ebe:	f3bf 8f5b 	dmb	ish
    6ec2:	e7c6      	b.n	6e52 <deferred_work+0x22>
    6ec4:	20001038 	.word	0x20001038

00006ec8 <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
    6ec8:	b538      	push	{r3, r4, r5, lr}
    6eca:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
    6ecc:	4906      	ldr	r1, [pc, #24]	; (6ee8 <bt_conn_create_pdu_timeout+0x20>)
    6ece:	2800      	cmp	r0, #0
    6ed0:	bf08      	it	eq
    6ed2:	4608      	moveq	r0, r1
    6ed4:	f011 fc3b 	bl	1874e <net_buf_alloc_fixed>
#else
		buf = net_buf_alloc(pool, timeout);
#endif
	}

	if (!buf) {
    6ed8:	4604      	mov	r4, r0
    6eda:	b118      	cbz	r0, 6ee4 <bt_conn_create_pdu_timeout+0x1c>
	net_buf_simple_reserve(&buf->b, reserve);
    6edc:	1d29      	adds	r1, r5, #4
    6ede:	3008      	adds	r0, #8
    6ee0:	f011 fc54 	bl	1878c <net_buf_simple_reserve>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
    6ee4:	4620      	mov	r0, r4
    6ee6:	bd38      	pop	{r3, r4, r5, pc}
    6ee8:	200006a0 	.word	0x200006a0

00006eec <bt_conn_create_frag_timeout>:
{
    6eec:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    6eee:	4801      	ldr	r0, [pc, #4]	; (6ef4 <bt_conn_create_frag_timeout+0x8>)
    6ef0:	f7ff bfea 	b.w	6ec8 <bt_conn_create_pdu_timeout>
    6ef4:	200006f0 	.word	0x200006f0

00006ef8 <create_frag.isra.0>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    6ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6efc:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
    6efe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6f02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6f06:	2000      	movs	r0, #0
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    6f08:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
    6f0a:	f7ff ffef 	bl	6eec <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    6f0e:	7833      	ldrb	r3, [r6, #0]
    6f10:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
    6f12:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    6f14:	f04f 0600 	mov.w	r6, #0
    6f18:	d005      	beq.n	6f26 <create_frag.isra.0+0x2e>
		net_buf_unref(frag);
    6f1a:	f00c fe0f 	bl	13b3c <net_buf_unref>
		return NULL;
    6f1e:	4635      	mov	r5, r6
}
    6f20:	4628      	mov	r0, r5
    6f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
    6f26:	6146      	str	r6, [r0, #20]
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
    6f28:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
    6f2c:	4e0c      	ldr	r6, [pc, #48]	; (6f60 <create_frag.isra.0+0x68>)
    6f2e:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    6f30:	f8b6 80cc 	ldrh.w	r8, [r6, #204]	; 0xcc
    6f34:	f011 fc9c 	bl	18870 <net_buf_simple_tailroom>
    6f38:	4580      	cmp	r8, r0
    6f3a:	d20c      	bcs.n	6f56 <create_frag.isra.0+0x5e>
	return bt_dev.le.acl_mtu;
    6f3c:	f8b6 60cc 	ldrh.w	r6, [r6, #204]	; 0xcc
	return net_buf_simple_add_mem(&buf->b, mem, len);
    6f40:	f854 1f08 	ldr.w	r1, [r4, #8]!
    6f44:	4632      	mov	r2, r6
    6f46:	4638      	mov	r0, r7
    6f48:	f011 fc5d 	bl	18806 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
    6f4c:	4631      	mov	r1, r6
    6f4e:	4620      	mov	r0, r4
    6f50:	f011 fc6a 	bl	18828 <net_buf_simple_pull>
    6f54:	e7e4      	b.n	6f20 <create_frag.isra.0+0x28>
	return net_buf_simple_tailroom(&buf->b);
    6f56:	4638      	mov	r0, r7
    6f58:	f011 fc8a 	bl	18870 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    6f5c:	b286      	uxth	r6, r0
    6f5e:	e7ef      	b.n	6f40 <create_frag.isra.0+0x48>
    6f60:	20000000 	.word	0x20000000

00006f64 <bt_conn_process_tx>:
{
    6f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    6f66:	7a83      	ldrb	r3, [r0, #10]
{
    6f68:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    6f6a:	b993      	cbnz	r3, 6f92 <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6f6c:	f3bf 8f5b 	dmb	ish
    6f70:	1d03      	adds	r3, r0, #4
    6f72:	e853 2f00 	ldrex	r2, [r3]
    6f76:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    6f7a:	e843 1400 	strex	r4, r1, [r3]
    6f7e:	2c00      	cmp	r4, #0
    6f80:	d1f7      	bne.n	6f72 <bt_conn_process_tx+0xe>
    6f82:	f3bf 8f5b 	dmb	ish
    6f86:	0653      	lsls	r3, r2, #25
    6f88:	d503      	bpl.n	6f92 <bt_conn_process_tx+0x2e>
}
    6f8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    6f8e:	f7ff bc25 	b.w	67dc <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    6f92:	2200      	movs	r2, #0
    6f94:	2300      	movs	r3, #0
    6f96:	f105 0038 	add.w	r0, r5, #56	; 0x38
    6f9a:	f011 fbdd 	bl	18758 <net_buf_get>
	BT_ASSERT(buf);
    6f9e:	4604      	mov	r4, r0
    6fa0:	b960      	cbnz	r0, 6fbc <bt_conn_process_tx+0x58>
    6fa2:	4a20      	ldr	r2, [pc, #128]	; (7024 <bt_conn_process_tx+0xc0>)
    6fa4:	4920      	ldr	r1, [pc, #128]	; (7028 <bt_conn_process_tx+0xc4>)
    6fa6:	4821      	ldr	r0, [pc, #132]	; (702c <bt_conn_process_tx+0xc8>)
    6fa8:	f240 5361 	movw	r3, #1377	; 0x561
    6fac:	f00e fec8 	bl	15d40 <printk>
    6fb0:	4040      	eors	r0, r0
    6fb2:	f380 8811 	msr	BASEPRI, r0
    6fb6:	f04f 0003 	mov.w	r0, #3
    6fba:	df02      	svc	2
	return bt_dev.le.acl_mtu;
    6fbc:	4f1c      	ldr	r7, [pc, #112]	; (7030 <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
    6fbe:	89a1      	ldrh	r1, [r4, #12]
    6fc0:	f8b7 20cc 	ldrh.w	r2, [r7, #204]	; 0xcc
    6fc4:	4291      	cmp	r1, r2
    6fc6:	d807      	bhi.n	6fd8 <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
    6fc8:	2300      	movs	r3, #0
    6fca:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
    6fcc:	4621      	mov	r1, r4
    6fce:	4628      	mov	r0, r5
    6fd0:	f7ff fb1a 	bl	6608 <send_frag>
	if (!send_buf(conn, buf)) {
    6fd4:	b140      	cbz	r0, 6fe8 <bt_conn_process_tx+0x84>
}
    6fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
    6fd8:	f105 060a 	add.w	r6, r5, #10
    6fdc:	4621      	mov	r1, r4
    6fde:	4630      	mov	r0, r6
    6fe0:	f7ff ff8a 	bl	6ef8 <create_frag.isra.0>
	if (!frag) {
    6fe4:	4601      	mov	r1, r0
    6fe6:	b920      	cbnz	r0, 6ff2 <bt_conn_process_tx+0x8e>
		net_buf_unref(buf);
    6fe8:	4620      	mov	r0, r4
}
    6fea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    6fee:	f00c bda5 	b.w	13b3c <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
    6ff2:	2301      	movs	r3, #1
    6ff4:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    6ff6:	4628      	mov	r0, r5
    6ff8:	f7ff fb06 	bl	6608 <send_frag>
    6ffc:	2800      	cmp	r0, #0
    6ffe:	d0f3      	beq.n	6fe8 <bt_conn_process_tx+0x84>
	while (buf->len > conn_mtu(conn)) {
    7000:	89a2      	ldrh	r2, [r4, #12]
    7002:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
    7006:	429a      	cmp	r2, r3
    7008:	d802      	bhi.n	7010 <bt_conn_process_tx+0xac>
	return send_frag(conn, buf, FRAG_END, false);
    700a:	2300      	movs	r3, #0
    700c:	2203      	movs	r2, #3
    700e:	e7dd      	b.n	6fcc <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
    7010:	4621      	mov	r1, r4
    7012:	4630      	mov	r0, r6
    7014:	f7ff ff70 	bl	6ef8 <create_frag.isra.0>
		if (!frag) {
    7018:	4601      	mov	r1, r0
    701a:	2800      	cmp	r0, #0
    701c:	d0e4      	beq.n	6fe8 <bt_conn_process_tx+0x84>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    701e:	2301      	movs	r3, #1
    7020:	461a      	mov	r2, r3
    7022:	e7e8      	b.n	6ff6 <bt_conn_process_tx+0x92>
    7024:	0001a90f 	.word	0x0001a90f
    7028:	0001a876 	.word	0x0001a876
    702c:	0001a839 	.word	0x0001a839
    7030:	20000000 	.word	0x20000000

00007034 <bt_conn_index>:
		__ASSERT(0 <= index && index < ARRAY_SIZE(sco_conns),
			"Invalid bt_conn pointer");
		break;
#endif
	default:
		index = conn - acl_conns;
    7034:	4b03      	ldr	r3, [pc, #12]	; (7044 <bt_conn_index+0x10>)
    7036:	1ac0      	subs	r0, r0, r3
    7038:	4b03      	ldr	r3, [pc, #12]	; (7048 <bt_conn_index+0x14>)
    703a:	1180      	asrs	r0, r0, #6
    703c:	4358      	muls	r0, r3
			 "Invalid bt_conn pointer");
		break;
	}

	return (uint8_t)index;
}
    703e:	b2c0      	uxtb	r0, r0
    7040:	4770      	bx	lr
    7042:	bf00      	nop
    7044:	20000810 	.word	0x20000810
    7048:	aaaaaaab 	.word	0xaaaaaaab

0000704c <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
    704c:	b538      	push	{r3, r4, r5, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    704e:	4914      	ldr	r1, [pc, #80]	; (70a0 <bt_conn_init+0x54>)
    7050:	4814      	ldr	r0, [pc, #80]	; (70a4 <bt_conn_init+0x58>)
    7052:	f011 fdda 	bl	18c0a <k_queue_append>
    7056:	4914      	ldr	r1, [pc, #80]	; (70a8 <bt_conn_init+0x5c>)
    7058:	4812      	ldr	r0, [pc, #72]	; (70a4 <bt_conn_init+0x58>)
    705a:	f011 fdd6 	bl	18c0a <k_queue_append>
    705e:	4913      	ldr	r1, [pc, #76]	; (70ac <bt_conn_init+0x60>)
    7060:	4810      	ldr	r0, [pc, #64]	; (70a4 <bt_conn_init+0x58>)
    7062:	f011 fdd2 	bl	18c0a <k_queue_append>
	}

	bt_att_init();
    7066:	f010 ffa6 	bl	17fb6 <bt_att_init>

	err = bt_smp_init();
    706a:	f011 fb6d 	bl	18748 <bt_smp_init>
	if (err) {
    706e:	4605      	mov	r5, r0
    7070:	b9a0      	cbnz	r0, 709c <bt_conn_init+0x50>
		return err;
	}

	bt_l2cap_init();
    7072:	f010 fbaa 	bl	177ca <bt_l2cap_init>

	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    7076:	480e      	ldr	r0, [pc, #56]	; (70b0 <bt_conn_init+0x64>)
    7078:	f010 f9bb 	bl	173f2 <bt_conn_ref>

			if (!conn) {
    707c:	4604      	mov	r4, r0
    707e:	b168      	cbz	r0, 709c <bt_conn_init+0x50>
    7080:	3004      	adds	r0, #4
    7082:	f010 f8d4 	bl	1722e <atomic_get>
				continue;
			}

#if !defined(CONFIG_BT_WHITELIST)
			if (atomic_test_bit(conn->flags,
    7086:	07c3      	lsls	r3, r0, #31
    7088:	d504      	bpl.n	7094 <bt_conn_init+0x48>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
    708a:	7225      	strb	r5, [r4, #8]
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    708c:	2102      	movs	r1, #2
    708e:	4620      	mov	r0, r4
    7090:	f7ff fc7c 	bl	698c <bt_conn_set_state>
	atomic_val_t old = atomic_dec(&conn->ref);
    7094:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    7098:	f010 f8e0 	bl	1725c <atomic_dec>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
    709c:	4628      	mov	r0, r5
    709e:	bd38      	pop	{r3, r4, r5, pc}
    70a0:	2000103c 	.word	0x2000103c
    70a4:	20000670 	.word	0x20000670
    70a8:	2000104c 	.word	0x2000104c
    70ac:	2000105c 	.word	0x2000105c
    70b0:	20000810 	.word	0x20000810

000070b4 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    70b4:	4b04      	ldr	r3, [pc, #16]	; (70c8 <l2cap_accept+0x14>)
    70b6:	6818      	ldr	r0, [r3, #0]
    70b8:	b918      	cbnz	r0, 70c2 <l2cap_accept+0xe>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    70ba:	4a04      	ldr	r2, [pc, #16]	; (70cc <l2cap_accept+0x18>)
    70bc:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
    70be:	600b      	str	r3, [r1, #0]

		return 0;
    70c0:	4770      	bx	lr
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
    70c2:	f06f 000b 	mvn.w	r0, #11
}
    70c6:	4770      	bx	lr
    70c8:	200008d0 	.word	0x200008d0
    70cc:	000197cc 	.word	0x000197cc

000070d0 <bt_l2cap_connected>:
{
    70d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    70d4:	4e29      	ldr	r6, [pc, #164]	; (717c <bt_l2cap_connected+0xac>)
    70d6:	4f2a      	ldr	r7, [pc, #168]	; (7180 <bt_l2cap_connected+0xb0>)
	k_work_init_delayable(&work->work, handler);
    70d8:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 7184 <bt_l2cap_connected+0xb4>
{
    70dc:	4604      	mov	r4, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    70de:	42be      	cmp	r6, r7
    70e0:	d302      	bcc.n	70e8 <bt_l2cap_connected+0x18>
}
    70e2:	b003      	add	sp, #12
    70e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    70e8:	6873      	ldr	r3, [r6, #4]
    70ea:	a901      	add	r1, sp, #4
    70ec:	4620      	mov	r0, r4
    70ee:	4798      	blx	r3
    70f0:	2800      	cmp	r0, #0
    70f2:	db3d      	blt.n	7170 <bt_l2cap_connected+0xa0>
		ch = BT_L2CAP_LE_CHAN(chan);
    70f4:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
    70f6:	8833      	ldrh	r3, [r6, #0]
    70f8:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
		ch->tx.cid = fchan->cid;
    70fc:	f8a5 3054 	strh.w	r3, [r5, #84]	; 0x54
    7100:	4641      	mov	r1, r8
    7102:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    7106:	f8d6 9008 	ldr.w	r9, [r6, #8]
    710a:	f011 ff6e 	bl	18fea <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    710e:	f3bf 8f5b 	dmb	ish
    7112:	f105 0340 	add.w	r3, r5, #64	; 0x40
    7116:	2200      	movs	r2, #0
    7118:	e853 1f00 	ldrex	r1, [r3]
    711c:	e843 2000 	strex	r0, r2, [r3]
    7120:	2800      	cmp	r0, #0
    7122:	d1f9      	bne.n	7118 <bt_l2cap_connected+0x48>
    7124:	f3bf 8f5b 	dmb	ish
	parent->next = child;
    7128:	60aa      	str	r2, [r5, #8]
Z_GENLIST_APPEND(slist, snode)
    712a:	6d62      	ldr	r2, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
    712c:	f105 0308 	add.w	r3, r5, #8
    7130:	bb02      	cbnz	r2, 7174 <bt_l2cap_connected+0xa4>
	list->head = node;
    7132:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (chan->ops->connected) {
    7136:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    7138:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
    713a:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    713c:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
    7140:	681b      	ldr	r3, [r3, #0]
    7142:	b103      	cbz	r3, 7146 <bt_l2cap_connected+0x76>
			chan->ops->connected(chan);
    7144:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7146:	9b01      	ldr	r3, [sp, #4]
    7148:	f3bf 8f5b 	dmb	ish
    714c:	3340      	adds	r3, #64	; 0x40
    714e:	e853 2f00 	ldrex	r2, [r3]
    7152:	f042 0201 	orr.w	r2, r2, #1
    7156:	e843 2100 	strex	r1, r2, [r3]
    715a:	2900      	cmp	r1, #0
    715c:	d1f7      	bne.n	714e <bt_l2cap_connected+0x7e>
    715e:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
    7162:	9801      	ldr	r0, [sp, #4]
    7164:	6843      	ldr	r3, [r0, #4]
    7166:	699b      	ldr	r3, [r3, #24]
    7168:	b113      	cbz	r3, 7170 <bt_l2cap_connected+0xa0>
			chan->ops->status(chan, chan->status);
    716a:	f100 0140 	add.w	r1, r0, #64	; 0x40
    716e:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    7170:	360c      	adds	r6, #12
    7172:	e7b4      	b.n	70de <bt_l2cap_connected+0xe>
	parent->next = child;
    7174:	6013      	str	r3, [r2, #0]
	list->tail = node;
    7176:	6563      	str	r3, [r4, #84]	; 0x54
}
    7178:	e7dd      	b.n	7136 <bt_l2cap_connected+0x66>
    717a:	bf00      	nop
    717c:	000195a4 	.word	0x000195a4
    7180:	000195c8 	.word	0x000195c8
    7184:	000175e5 	.word	0x000175e5

00007188 <bt_l2cap_update_conn_param>:
{
    7188:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
    718a:	4b15      	ldr	r3, [pc, #84]	; (71e0 <bt_l2cap_update_conn_param+0x58>)
    718c:	781a      	ldrb	r2, [r3, #0]
    718e:	3201      	adds	r2, #1
	if (!ident) {
    7190:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    7194:	bf08      	it	eq
    7196:	2201      	moveq	r2, #1
    7198:	701a      	strb	r2, [r3, #0]
{
    719a:	4605      	mov	r5, r0
    719c:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    719e:	2208      	movs	r2, #8
    71a0:	7819      	ldrb	r1, [r3, #0]
    71a2:	2012      	movs	r0, #18
    71a4:	f010 f9d0 	bl	17548 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    71a8:	4606      	mov	r6, r0
    71aa:	b1b0      	cbz	r0, 71da <bt_l2cap_update_conn_param+0x52>
	return net_buf_simple_add(&buf->b, len);
    71ac:	2108      	movs	r1, #8
    71ae:	4408      	add	r0, r1
    71b0:	f011 fb23 	bl	187fa <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    71b4:	8822      	ldrh	r2, [r4, #0]
    71b6:	8002      	strh	r2, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    71b8:	8862      	ldrh	r2, [r4, #2]
    71ba:	8042      	strh	r2, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    71bc:	88a2      	ldrh	r2, [r4, #4]
    71be:	8082      	strh	r2, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    71c0:	88e2      	ldrh	r2, [r4, #6]
    71c2:	80c2      	strh	r2, [r0, #6]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    71c4:	2400      	movs	r4, #0
    71c6:	9400      	str	r4, [sp, #0]
    71c8:	4623      	mov	r3, r4
    71ca:	4632      	mov	r2, r6
    71cc:	2105      	movs	r1, #5
    71ce:	4628      	mov	r0, r5
    71d0:	f010 fa2d 	bl	1762e <bt_l2cap_send_cb>
	return 0;
    71d4:	4620      	mov	r0, r4
}
    71d6:	b002      	add	sp, #8
    71d8:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    71da:	f06f 000b 	mvn.w	r0, #11
    71de:	e7fa      	b.n	71d6 <bt_l2cap_update_conn_param+0x4e>
    71e0:	2000223b 	.word	0x2000223b

000071e4 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
    71e4:	4b02      	ldr	r3, [pc, #8]	; (71f0 <att_cfm_sent+0xc>)
    71e6:	f8c1 3110 	str.w	r3, [r1, #272]	; 0x110

	att_sent(conn, user_data);
    71ea:	f010 bb1c 	b.w	17826 <att_sent>
    71ee:	bf00      	nop
    71f0:	00017c43 	.word	0x00017c43

000071f4 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
    71f4:	4b02      	ldr	r3, [pc, #8]	; (7200 <att_rsp_sent+0xc>)
    71f6:	f8c1 3110 	str.w	r3, [r1, #272]	; 0x110

	att_sent(conn, user_data);
    71fa:	f010 bb14 	b.w	17826 <att_sent>
    71fe:	bf00      	nop
    7200:	00017c27 	.word	0x00017c27

00007204 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
    7204:	4b02      	ldr	r3, [pc, #8]	; (7210 <att_req_sent+0xc>)
    7206:	f8c1 3110 	str.w	r3, [r1, #272]	; 0x110

	att_sent(conn, user_data);
    720a:	f010 bb0c 	b.w	17826 <att_sent>
    720e:	bf00      	nop
    7210:	0000746d 	.word	0x0000746d

00007214 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
    7214:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
    7216:	3808      	subs	r0, #8
    7218:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
    721a:	a901      	add	r1, sp, #4
    721c:	4802      	ldr	r0, [pc, #8]	; (7228 <bt_att_released+0x14>)
    721e:	f00d fce5 	bl	14bec <k_mem_slab_free>
}
    7222:	b003      	add	sp, #12
    7224:	f85d fb04 	ldr.w	pc, [sp], #4
    7228:	20000620 	.word	0x20000620

0000722c <read_group_cb>:
{
    722c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    7230:	4606      	mov	r6, r0
    7232:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    7234:	f04f 0800 	mov.w	r8, #0
    7238:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    723c:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
    723e:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    7240:	f88d 8008 	strb.w	r8, [sp, #8]
    7244:	a902      	add	r1, sp, #8
{
    7246:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    7248:	f8ad 300a 	strh.w	r3, [sp, #10]
    724c:	f00f fce8 	bl	16c20 <bt_uuid_cmp>
    7250:	b1a0      	cbz	r0, 727c <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    7252:	f642 0301 	movw	r3, #10241	; 0x2801
    7256:	6830      	ldr	r0, [r6, #0]
    7258:	f88d 800c 	strb.w	r8, [sp, #12]
    725c:	a903      	add	r1, sp, #12
    725e:	f8ad 300e 	strh.w	r3, [sp, #14]
    7262:	f00f fcdd 	bl	16c20 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    7266:	b148      	cbz	r0, 727c <read_group_cb+0x50>
		if (data->group &&
    7268:	6923      	ldr	r3, [r4, #16]
    726a:	b11b      	cbz	r3, 7274 <read_group_cb+0x48>
    726c:	885a      	ldrh	r2, [r3, #2]
    726e:	42aa      	cmp	r2, r5
    7270:	d200      	bcs.n	7274 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
    7272:	805d      	strh	r5, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    7274:	2001      	movs	r0, #1
}
    7276:	b004      	add	sp, #16
    7278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    727c:	6861      	ldr	r1, [r4, #4]
    727e:	6830      	ldr	r0, [r6, #0]
    7280:	f00f fcce 	bl	16c20 <bt_uuid_cmp>
    7284:	b110      	cbz	r0, 728c <read_group_cb+0x60>
		data->group = NULL;
    7286:	2300      	movs	r3, #0
    7288:	6123      	str	r3, [r4, #16]
    728a:	e7f3      	b.n	7274 <read_group_cb+0x48>
	if (data->rsp->len &&
    728c:	68e3      	ldr	r3, [r4, #12]
    728e:	68a0      	ldr	r0, [r4, #8]
    7290:	781a      	ldrb	r2, [r3, #0]
    7292:	b13a      	cbz	r2, 72a4 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    7294:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
    7298:	8981      	ldrh	r1, [r0, #12]
    729a:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    729c:	4293      	cmp	r3, r2
    729e:	da01      	bge.n	72a4 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
    72a0:	2000      	movs	r0, #0
    72a2:	e7e8      	b.n	7276 <read_group_cb+0x4a>
    72a4:	2104      	movs	r1, #4
    72a6:	3008      	adds	r0, #8
    72a8:	f011 faa7 	bl	187fa <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    72ac:	4b09      	ldr	r3, [pc, #36]	; (72d4 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    72ae:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    72b0:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    72b2:	8005      	strh	r5, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    72b4:	8045      	strh	r5, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    72b6:	4631      	mov	r1, r6
    72b8:	9300      	str	r3, [sp, #0]
    72ba:	9401      	str	r4, [sp, #4]
    72bc:	2300      	movs	r3, #0
    72be:	4638      	mov	r0, r7
    72c0:	f010 fb01 	bl	178c6 <att_chan_read>
	if (read < 0) {
    72c4:	2800      	cmp	r0, #0
    72c6:	dbeb      	blt.n	72a0 <read_group_cb+0x74>
	if (!data->group) {
    72c8:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    72ca:	3800      	subs	r0, #0
    72cc:	bf18      	it	ne
    72ce:	2001      	movne	r0, #1
    72d0:	e7d1      	b.n	7276 <read_group_cb+0x4a>
    72d2:	bf00      	nop
    72d4:	00017b9d 	.word	0x00017b9d

000072d8 <read_type_cb>:
{
    72d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
    72dc:	f8d2 8000 	ldr.w	r8, [r2]
{
    72e0:	4606      	mov	r6, r0
    72e2:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    72e4:	6800      	ldr	r0, [r0, #0]
    72e6:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
    72e8:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
    72ec:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    72ee:	f00f fc97 	bl	16c20 <bt_uuid_cmp>
    72f2:	4607      	mov	r7, r0
    72f4:	2800      	cmp	r0, #0
    72f6:	d13e      	bne.n	7376 <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    72f8:	4628      	mov	r0, r5
    72fa:	2215      	movs	r2, #21
    72fc:	4631      	mov	r1, r6
    72fe:	f011 f9a8 	bl	18652 <bt_gatt_check_perm>
    7302:	4605      	mov	r5, r0
    7304:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    7306:	b148      	cbz	r0, 731c <read_type_cb+0x44>
		if (data->rsp->len) {
    7308:	68e3      	ldr	r3, [r4, #12]
    730a:	781b      	ldrb	r3, [r3, #0]
    730c:	b923      	cbnz	r3, 7318 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
    730e:	2500      	movs	r5, #0
}
    7310:	4628      	mov	r0, r5
    7312:	b003      	add	sp, #12
    7314:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
    7318:	7527      	strb	r7, [r4, #20]
    731a:	e7f8      	b.n	730e <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    731c:	68a0      	ldr	r0, [r4, #8]
    731e:	f011 fa4a 	bl	187b6 <net_buf_frag_last>
    7322:	2102      	movs	r1, #2
    7324:	3008      	adds	r0, #8
    7326:	f011 fa68 	bl	187fa <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    732a:	4b14      	ldr	r3, [pc, #80]	; (737c <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    732c:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    732e:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
    7330:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    7334:	4631      	mov	r1, r6
    7336:	9300      	str	r3, [sp, #0]
    7338:	9401      	str	r4, [sp, #4]
    733a:	462b      	mov	r3, r5
    733c:	4640      	mov	r0, r8
    733e:	f010 fac2 	bl	178c6 <att_chan_read>
	if (read < 0) {
    7342:	2800      	cmp	r0, #0
    7344:	da07      	bge.n	7356 <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
    7346:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    734a:	bf26      	itte	cs
    734c:	4240      	negcs	r0, r0
    734e:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    7350:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
    7352:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    7354:	e7dc      	b.n	7310 <read_type_cb+0x38>
	if (!data->item) {
    7356:	6923      	ldr	r3, [r4, #16]
    7358:	2b00      	cmp	r3, #0
    735a:	d0d8      	beq.n	730e <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    735c:	68a0      	ldr	r0, [r4, #8]
    735e:	f010 fa5a 	bl	17816 <net_buf_frags_len>
    7362:	f8b8 505e 	ldrh.w	r5, [r8, #94]	; 0x5e
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    7366:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    7368:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    736a:	7818      	ldrb	r0, [r3, #0]
    736c:	4285      	cmp	r5, r0
    736e:	bf94      	ite	ls
    7370:	2500      	movls	r5, #0
    7372:	2501      	movhi	r5, #1
    7374:	e7cc      	b.n	7310 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
    7376:	2501      	movs	r5, #1
    7378:	e7ca      	b.n	7310 <read_type_cb+0x38>
    737a:	bf00      	nop
    737c:	00017833 	.word	0x00017833

00007380 <chan_send>:
{
    7380:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    7384:	688b      	ldr	r3, [r1, #8]
    7386:	781b      	ldrb	r3, [r3, #0]
    7388:	2bd2      	cmp	r3, #210	; 0xd2
{
    738a:	4605      	mov	r5, r0
    738c:	460c      	mov	r4, r1
    738e:	4691      	mov	r9, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    7390:	d109      	bne.n	73a6 <chan_send+0x26>
		err = bt_smp_sign(chan->att->conn, buf);
    7392:	6803      	ldr	r3, [r0, #0]
    7394:	6818      	ldr	r0, [r3, #0]
    7396:	f011 f9d4 	bl	18742 <bt_smp_sign>
		if (err) {
    739a:	4606      	mov	r6, r0
    739c:	b118      	cbz	r0, 73a6 <chan_send+0x26>
		net_buf_unref(buf);
    739e:	4620      	mov	r0, r4
    73a0:	f00c fbcc 	bl	13b3c <net_buf_unref>
    73a4:	e038      	b.n	7418 <chan_send+0x98>
	state->offset = net_buf_simple_headroom(buf);
    73a6:	f104 0008 	add.w	r0, r4, #8
    73aa:	f011 fa5d 	bl	18868 <net_buf_simple_headroom>
	state->len = buf->len;
    73ae:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    73b2:	4607      	mov	r7, r0
	chan->sent = cb ? cb : chan_cb(buf);
    73b4:	f1b9 0f00 	cmp.w	r9, #0
    73b8:	d10a      	bne.n	73d0 <chan_send+0x50>
	switch (att_op_get_type(buf->data[0])) {
    73ba:	68a3      	ldr	r3, [r4, #8]
    73bc:	7818      	ldrb	r0, [r3, #0]
    73be:	f010 fa4a 	bl	17856 <att_op_get_type>
    73c2:	1e43      	subs	r3, r0, #1
    73c4:	b2db      	uxtb	r3, r3
    73c6:	2b04      	cmp	r3, #4
    73c8:	bf9c      	itt	ls
    73ca:	4a17      	ldrls	r2, [pc, #92]	; (7428 <chan_send+0xa8>)
    73cc:	f852 9023 	ldrls.w	r9, [r2, r3, lsl #2]
	chan->sent = cb ? cb : chan_cb(buf);
    73d0:	f8c5 9118 	str.w	r9, [r5, #280]	; 0x118
	net_buf_ref(buf);
    73d4:	4620      	mov	r0, r4
    73d6:	f011 f9ea 	bl	187ae <net_buf_ref>
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    73da:	682b      	ldr	r3, [r5, #0]
    73dc:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
    73e0:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
    73e2:	4b12      	ldr	r3, [pc, #72]	; (742c <chan_send+0xac>)
    73e4:	429a      	cmp	r2, r3
    73e6:	d01b      	beq.n	7420 <chan_send+0xa0>
	} else if (cb == chan_cfm_sent) {
    73e8:	4b11      	ldr	r3, [pc, #68]	; (7430 <chan_send+0xb0>)
    73ea:	429a      	cmp	r2, r3
    73ec:	d01a      	beq.n	7424 <chan_send+0xa4>
		return att_sent;
    73ee:	4e11      	ldr	r6, [pc, #68]	; (7434 <chan_send+0xb4>)
    73f0:	4b11      	ldr	r3, [pc, #68]	; (7438 <chan_send+0xb8>)
    73f2:	4912      	ldr	r1, [pc, #72]	; (743c <chan_send+0xbc>)
    73f4:	42b2      	cmp	r2, r6
    73f6:	bf18      	it	ne
    73f8:	460b      	movne	r3, r1
			       &chan->chan.chan);
    73fa:	3508      	adds	r5, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    73fc:	9500      	str	r5, [sp, #0]
    73fe:	4622      	mov	r2, r4
    7400:	2104      	movs	r1, #4
    7402:	f010 f914 	bl	1762e <bt_l2cap_send_cb>
	if (err) {
    7406:	4606      	mov	r6, r0
    7408:	2800      	cmp	r0, #0
    740a:	d0c8      	beq.n	739e <chan_send+0x1e>
	buf->data = buf->__buf + state->offset;
    740c:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    740e:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    7412:	fa10 f787 	uxtah	r7, r0, r7
    7416:	60a7      	str	r7, [r4, #8]
}
    7418:	4630      	mov	r0, r6
    741a:	b003      	add	sp, #12
    741c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return att_rsp_sent;
    7420:	4b07      	ldr	r3, [pc, #28]	; (7440 <chan_send+0xc0>)
    7422:	e7ea      	b.n	73fa <chan_send+0x7a>
		return att_cfm_sent;
    7424:	4b07      	ldr	r3, [pc, #28]	; (7444 <chan_send+0xc4>)
    7426:	e7e8      	b.n	73fa <chan_send+0x7a>
    7428:	000197ec 	.word	0x000197ec
    742c:	00017c27 	.word	0x00017c27
    7430:	00017c43 	.word	0x00017c43
    7434:	0000746d 	.word	0x0000746d
    7438:	00007205 	.word	0x00007205
    743c:	00017827 	.word	0x00017827
    7440:	000071f5 	.word	0x000071f5
    7444:	000071e5 	.word	0x000071e5

00007448 <bt_att_chan_send_rsp.constprop.0>:
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
    7448:	b538      	push	{r3, r4, r5, lr}
	return chan_send(chan, buf, cb);
    744a:	4a07      	ldr	r2, [pc, #28]	; (7468 <bt_att_chan_send_rsp.constprop.0+0x20>)
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
    744c:	4604      	mov	r4, r0
    744e:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
    7450:	f7ff ff96 	bl	7380 <chan_send>
	if (err) {
    7454:	b130      	cbz	r0, 7464 <bt_att_chan_send_rsp.constprop.0+0x1c>
		net_buf_put(&chan->tx_queue, buf);
    7456:	4629      	mov	r1, r5
    7458:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
}
    745c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
    7460:	f011 b998 	b.w	18794 <net_buf_put>
}
    7464:	bd38      	pop	{r3, r4, r5, pc}
    7466:	bf00      	nop
    7468:	00017c27 	.word	0x00017c27

0000746c <chan_req_sent>:
	if (chan->req) {
    746c:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
    7470:	b13b      	cbz	r3, 7482 <chan_req_sent+0x16>
	return k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
    7472:	f100 01e8 	add.w	r1, r0, #232	; 0xe8
    7476:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    747a:	4802      	ldr	r0, [pc, #8]	; (7484 <chan_req_sent+0x18>)
    747c:	2300      	movs	r3, #0
    747e:	f00e b9bf 	b.w	15800 <k_work_reschedule_for_queue>
}
    7482:	4770      	bx	lr
    7484:	20000ed0 	.word	0x20000ed0

00007488 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
    7488:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    748a:	2300      	movs	r3, #0
{
    748c:	4607      	mov	r7, r0
    748e:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    7490:	481e      	ldr	r0, [pc, #120]	; (750c <bt_att_accept+0x84>)
    7492:	2200      	movs	r2, #0
    7494:	4669      	mov	r1, sp
    7496:	f00d fb77 	bl	14b88 <k_mem_slab_alloc>
    749a:	4604      	mov	r4, r0
    749c:	b120      	cbz	r0, 74a8 <bt_att_accept+0x20>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
    749e:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
    74a2:	4620      	mov	r0, r4
    74a4:	b003      	add	sp, #12
    74a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
    74a8:	4601      	mov	r1, r0
    74aa:	222c      	movs	r2, #44	; 0x2c
    74ac:	9800      	ldr	r0, [sp, #0]
    74ae:	f00f fb2a 	bl	16b06 <memset>
	att->conn = conn;
    74b2:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    74b4:	4816      	ldr	r0, [pc, #88]	; (7510 <bt_att_accept+0x88>)
	list->tail = NULL;
    74b6:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
    74b8:	e9c5 7400 	strd	r7, r4, [r5]
	list->tail = NULL;
    74bc:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
    74c0:	2200      	movs	r2, #0
    74c2:	2300      	movs	r3, #0
    74c4:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
    74c6:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    74c8:	f00d fb5e 	bl	14b88 <k_mem_slab_alloc>
    74cc:	4604      	mov	r4, r0
    74ce:	2800      	cmp	r0, #0
    74d0:	d1e5      	bne.n	749e <bt_att_accept+0x16>
	(void)memset(chan, 0, sizeof(*chan));
    74d2:	4601      	mov	r1, r0
    74d4:	f44f 7290 	mov.w	r2, #288	; 0x120
    74d8:	9801      	ldr	r0, [sp, #4]
    74da:	f00f fb14 	bl	16b06 <memset>
	chan->chan.chan.ops = &ops;
    74de:	9801      	ldr	r0, [sp, #4]
    74e0:	4b0c      	ldr	r3, [pc, #48]	; (7514 <bt_att_accept+0x8c>)
    74e2:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
    74e4:	30d0      	adds	r0, #208	; 0xd0
    74e6:	f011 fb84 	bl	18bf2 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    74ea:	9b01      	ldr	r3, [sp, #4]
    74ec:	f3bf 8f5b 	dmb	ish
    74f0:	33c8      	adds	r3, #200	; 0xc8
    74f2:	e853 2f00 	ldrex	r2, [r3]
    74f6:	e843 4100 	strex	r1, r4, [r3]
    74fa:	2900      	cmp	r1, #0
    74fc:	d1f9      	bne.n	74f2 <bt_att_accept+0x6a>
    74fe:	f3bf 8f5b 	dmb	ish
	chan->att = att;
    7502:	9b01      	ldr	r3, [sp, #4]
    7504:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
    7508:	6033      	str	r3, [r6, #0]
	return 0;
    750a:	e7ca      	b.n	74a2 <bt_att_accept+0x1a>
    750c:	20000604 	.word	0x20000604
    7510:	20000620 	.word	0x20000620
    7514:	2000019c 	.word	0x2000019c

00007518 <bt_att_connected>:
{
    7518:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    751a:	2104      	movs	r1, #4
{
    751c:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    751e:	6800      	ldr	r0, [r0, #0]
    7520:	f010 f918 	bl	17754 <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
    7524:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
    7528:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    752a:	b91b      	cbnz	r3, 7534 <bt_att_connected+0x1c>
    752c:	f105 000c 	add.w	r0, r5, #12
    7530:	f011 fb5f 	bl	18bf2 <z_impl_k_queue_init>
Z_GENLIST_PREPEND(slist, snode)
    7534:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	parent->next = child;
    7536:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
Z_GENLIST_PREPEND(slist, snode)
    753a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
    753c:	f504 738a 	add.w	r3, r4, #276	; 0x114
	list->head = node;
    7540:	626b      	str	r3, [r5, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
    7542:	b902      	cbnz	r2, 7546 <bt_att_connected+0x2e>
	list->tail = node;
    7544:	62ab      	str	r3, [r5, #40]	; 0x28
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7546:	f3bf 8f5b 	dmb	ish
    754a:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
	k_work_init_delayable(&work->work, handler);
    754e:	4908      	ldr	r1, [pc, #32]	; (7570 <bt_att_connected+0x58>)
    7550:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
    7554:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    7556:	bf5e      	ittt	pl
    7558:	2317      	movpl	r3, #23
    755a:	f8a4 3056 	strhpl.w	r3, [r4, #86]	; 0x56
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    755e:	f8a4 304a 	strhpl.w	r3, [r4, #74]	; 0x4a
    7562:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
}
    7566:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    756a:	f011 bd3e 	b.w	18fea <k_work_init_delayable>
    756e:	bf00      	nop
    7570:	00017fc5 	.word	0x00017fc5

00007574 <att_write_cmd>:
{
    7574:	b5f0      	push	{r4, r5, r6, r7, lr}
    7576:	4604      	mov	r4, r0
    7578:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
    757a:	f101 0008 	add.w	r0, r1, #8
    757e:	460d      	mov	r5, r1
    7580:	f011 f96a 	bl	18858 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    7584:	6823      	ldr	r3, [r4, #0]
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
    7586:	68af      	ldr	r7, [r5, #8]
    7588:	89ad      	ldrh	r5, [r5, #12]
    758a:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    758c:	2100      	movs	r1, #0
    758e:	6818      	ldr	r0, [r3, #0]
    7590:	f011 f882 	bl	18698 <bt_gatt_change_aware>
    7594:	b320      	cbz	r0, 75e0 <att_write_cmd+0x6c>
	if (!handle) {
    7596:	b32e      	cbz	r6, 75e4 <att_write_cmd+0x70>
	(void)memset(&data, 0, sizeof(data));
    7598:	2218      	movs	r2, #24
    759a:	2100      	movs	r1, #0
    759c:	4668      	mov	r0, sp
    759e:	f00f fab2 	bl	16b06 <memset>
	data.conn = chan->att->conn;
    75a2:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    75a4:	4a10      	ldr	r2, [pc, #64]	; (75e8 <att_write_cmd+0x74>)
	data.conn = chan->att->conn;
    75a6:	681b      	ldr	r3, [r3, #0]
    75a8:	9300      	str	r3, [sp, #0]
	data.req = req;
    75aa:	2300      	movs	r3, #0
    75ac:	f88d 3008 	strb.w	r3, [sp, #8]
	data.offset = offset;
    75b0:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    75b4:	2301      	movs	r3, #1
    75b6:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    75ba:	4631      	mov	r1, r6
    75bc:	466b      	mov	r3, sp
    75be:	4630      	mov	r0, r6
	data.value = value;
    75c0:	9703      	str	r7, [sp, #12]
	data.len = len;
    75c2:	f8ad 5010 	strh.w	r5, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    75c6:	f010 f973 	bl	178b0 <bt_gatt_foreach_attr>
	if (data.err) {
    75ca:	f89d 3014 	ldrb.w	r3, [sp, #20]
    75ce:	b923      	cbnz	r3, 75da <att_write_cmd+0x66>
	if (data.buf) {
    75d0:	9901      	ldr	r1, [sp, #4]
    75d2:	b111      	cbz	r1, 75da <att_write_cmd+0x66>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    75d4:	4620      	mov	r0, r4
    75d6:	f7ff ff37 	bl	7448 <bt_att_chan_send_rsp.constprop.0>
    75da:	2000      	movs	r0, #0
}
    75dc:	b007      	add	sp, #28
    75de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    75e0:	2012      	movs	r0, #18
    75e2:	e7fb      	b.n	75dc <att_write_cmd+0x68>
		return BT_ATT_ERR_INVALID_HANDLE;
    75e4:	2001      	movs	r0, #1
    75e6:	e7f9      	b.n	75dc <att_write_cmd+0x68>
    75e8:	00017d2b 	.word	0x00017d2b

000075ec <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
    75ec:	898b      	ldrh	r3, [r1, #12]
{
    75ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    75f2:	4604      	mov	r4, r0
    75f4:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    75f6:	2b00      	cmp	r3, #0
    75f8:	d05e      	beq.n	76b8 <bt_att_recv+0xcc>
	return net_buf_simple_pull_mem(&buf->b, len);
    75fa:	2101      	movs	r1, #1
    75fc:	f105 0008 	add.w	r0, r5, #8
    7600:	f011 f91a 	bl	18838 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
    7604:	f854 3c08 	ldr.w	r3, [r4, #-8]
    7608:	4607      	mov	r7, r0
    760a:	2b00      	cmp	r3, #0
    760c:	d054      	beq.n	76b8 <bt_att_recv+0xcc>
		if (hdr->code == handlers[i].op) {
    760e:	4a2e      	ldr	r2, [pc, #184]	; (76c8 <bt_att_recv+0xdc>)
    7610:	7801      	ldrb	r1, [r0, #0]
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    7612:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    7616:	2300      	movs	r3, #0
    7618:	4694      	mov	ip, r2
		if (hdr->code == handlers[i].op) {
    761a:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
    761e:	4288      	cmp	r0, r1
    7620:	d11a      	bne.n	7658 <bt_att_recv+0x6c>
		if (handler->type == ATT_REQUEST &&
    7622:	00d9      	lsls	r1, r3, #3
    7624:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    7628:	f893 8002 	ldrb.w	r8, [r3, #2]
    762c:	f1b8 0f01 	cmp.w	r8, #1
    7630:	d020      	beq.n	7674 <bt_att_recv+0x88>
		} else if (handler->type == ATT_INDICATION &&
    7632:	f1b8 0f05 	cmp.w	r8, #5
    7636:	d12d      	bne.n	7694 <bt_att_recv+0xa8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7638:	f3bf 8f5b 	dmb	ish
    763c:	34c0      	adds	r4, #192	; 0xc0
    763e:	e854 2f00 	ldrex	r2, [r4]
    7642:	f042 0302 	orr.w	r3, r2, #2
    7646:	e844 3000 	strex	r0, r3, [r4]
    764a:	2800      	cmp	r0, #0
    764c:	d1f7      	bne.n	763e <bt_att_recv+0x52>
    764e:	f3bf 8f5b 	dmb	ish
    7652:	f012 0f02 	tst.w	r2, #2
    7656:	e01c      	b.n	7692 <bt_att_recv+0xa6>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    7658:	3301      	adds	r3, #1
    765a:	2b0d      	cmp	r3, #13
    765c:	d1dd      	bne.n	761a <bt_att_recv+0x2e>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    765e:	4608      	mov	r0, r1
    7660:	f010 f8f9 	bl	17856 <att_op_get_type>
    7664:	b340      	cbz	r0, 76b8 <bt_att_recv+0xcc>
	if (!req) {
    7666:	b339      	cbz	r1, 76b8 <bt_att_recv+0xcc>
    7668:	2306      	movs	r3, #6
    766a:	2200      	movs	r2, #0
    766c:	4630      	mov	r0, r6
    766e:	f010 fc16 	bl	17e9e <send_err_rsp.part.0>
    7672:	e021      	b.n	76b8 <bt_att_recv+0xcc>
    7674:	34c0      	adds	r4, #192	; 0xc0
    7676:	f3bf 8f5b 	dmb	ish
    767a:	e854 3f00 	ldrex	r3, [r4]
    767e:	f043 0201 	orr.w	r2, r3, #1
    7682:	e844 2000 	strex	r0, r2, [r4]
    7686:	2800      	cmp	r0, #0
    7688:	d1f7      	bne.n	767a <bt_att_recv+0x8e>
    768a:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
    768e:	f013 0f01 	tst.w	r3, #1
    7692:	d111      	bne.n	76b8 <bt_att_recv+0xcc>
	if (buf->len < handler->expect_len) {
    7694:	eb0c 0301 	add.w	r3, ip, r1
    7698:	89a9      	ldrh	r1, [r5, #12]
    769a:	785a      	ldrb	r2, [r3, #1]
    769c:	4291      	cmp	r1, r2
    769e:	d30e      	bcc.n	76be <bt_att_recv+0xd2>
		err = handler->func(att_chan, buf);
    76a0:	685b      	ldr	r3, [r3, #4]
    76a2:	4629      	mov	r1, r5
    76a4:	4630      	mov	r0, r6
    76a6:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    76a8:	f1b8 0f01 	cmp.w	r8, #1
		err = handler->func(att_chan, buf);
    76ac:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    76ae:	d103      	bne.n	76b8 <bt_att_recv+0xcc>
    76b0:	b110      	cbz	r0, 76b8 <bt_att_recv+0xcc>
		send_err_rsp(att_chan, hdr->code, 0, err);
    76b2:	7839      	ldrb	r1, [r7, #0]
	if (!req) {
    76b4:	2900      	cmp	r1, #0
    76b6:	d1d8      	bne.n	766a <bt_att_recv+0x7e>
}
    76b8:	2000      	movs	r0, #0
    76ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (handler->type == ATT_REQUEST && err) {
    76be:	f1b8 0f01 	cmp.w	r8, #1
    76c2:	d1f9      	bne.n	76b8 <bt_att_recv+0xcc>
		err = BT_ATT_ERR_INVALID_PDU;
    76c4:	2304      	movs	r3, #4
    76c6:	e7f4      	b.n	76b2 <bt_att_recv+0xc6>
    76c8:	00019800 	.word	0x00019800

000076cc <att_write_req>:
{
    76cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    76d0:	4604      	mov	r4, r0
    76d2:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
    76d4:	f101 0008 	add.w	r0, r1, #8
    76d8:	460d      	mov	r5, r1
    76da:	f011 f8bd 	bl	18858 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    76de:	6823      	ldr	r3, [r4, #0]
			     handle, 0, buf->data, buf->len);
    76e0:	f8d5 9008 	ldr.w	r9, [r5, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
    76e4:	89ad      	ldrh	r5, [r5, #12]
    76e6:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    76e8:	2101      	movs	r1, #1
    76ea:	6818      	ldr	r0, [r3, #0]
    76ec:	f010 ffd4 	bl	18698 <bt_gatt_change_aware>
    76f0:	2800      	cmp	r0, #0
    76f2:	d03f      	beq.n	7774 <att_write_req+0xa8>
	if (!handle) {
    76f4:	2e00      	cmp	r6, #0
    76f6:	d03f      	beq.n	7778 <att_write_req+0xac>
	(void)memset(&data, 0, sizeof(data));
    76f8:	2218      	movs	r2, #24
    76fa:	2100      	movs	r1, #0
    76fc:	4668      	mov	r0, sp
    76fe:	f00f fa02 	bl	16b06 <memset>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
    7702:	2200      	movs	r2, #0
    7704:	2113      	movs	r1, #19
    7706:	4620      	mov	r0, r4
    7708:	f010 fba4 	bl	17e54 <bt_att_chan_create_pdu>
    770c:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    770e:	b378      	cbz	r0, 7770 <att_write_req+0xa4>
	data.conn = chan->att->conn;
    7710:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    7712:	4a1a      	ldr	r2, [pc, #104]	; (777c <att_write_req+0xb0>)
	data.conn = chan->att->conn;
    7714:	681b      	ldr	r3, [r3, #0]
    7716:	9300      	str	r3, [sp, #0]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    7718:	2301      	movs	r3, #1
    771a:	f88d 3014 	strb.w	r3, [sp, #20]
	data.req = req;
    771e:	f04f 0812 	mov.w	r8, #18
	data.offset = offset;
    7722:	2700      	movs	r7, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    7724:	466b      	mov	r3, sp
    7726:	4631      	mov	r1, r6
    7728:	4630      	mov	r0, r6
	data.len = len;
    772a:	f8ad 5010 	strh.w	r5, [sp, #16]
	data.req = req;
    772e:	f88d 8008 	strb.w	r8, [sp, #8]
	data.offset = offset;
    7732:	f8ad 7012 	strh.w	r7, [sp, #18]
	data.value = value;
    7736:	f8cd 900c 	str.w	r9, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    773a:	f010 f8b9 	bl	178b0 <bt_gatt_foreach_attr>
	if (data.err) {
    773e:	f89d 5014 	ldrb.w	r5, [sp, #20]
    7742:	b175      	cbz	r5, 7762 <att_write_req+0x96>
			net_buf_unref(data.buf);
    7744:	9801      	ldr	r0, [sp, #4]
    7746:	f00c f9f9 	bl	13b3c <net_buf_unref>
	if (!req) {
    774a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    774e:	4632      	mov	r2, r6
    7750:	4641      	mov	r1, r8
    7752:	4620      	mov	r0, r4
    7754:	f010 fba3 	bl	17e9e <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    7758:	463d      	mov	r5, r7
}
    775a:	4628      	mov	r0, r5
    775c:	b007      	add	sp, #28
    775e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (data.buf) {
    7762:	9901      	ldr	r1, [sp, #4]
    7764:	2900      	cmp	r1, #0
    7766:	d0f8      	beq.n	775a <att_write_req+0x8e>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    7768:	4620      	mov	r0, r4
    776a:	f7ff fe6d 	bl	7448 <bt_att_chan_send_rsp.constprop.0>
    776e:	e7f4      	b.n	775a <att_write_req+0x8e>
			return BT_ATT_ERR_UNLIKELY;
    7770:	250e      	movs	r5, #14
    7772:	e7f2      	b.n	775a <att_write_req+0x8e>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    7774:	2512      	movs	r5, #18
    7776:	e7f0      	b.n	775a <att_write_req+0x8e>
		return BT_ATT_ERR_INVALID_HANDLE;
    7778:	2501      	movs	r5, #1
    777a:	e7ee      	b.n	775a <att_write_req+0x8e>
    777c:	00017d2b 	.word	0x00017d2b

00007780 <att_read_group_req>:
{
    7780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    7784:	7b0c      	ldrb	r4, [r1, #12]
    7786:	3c04      	subs	r4, #4
    7788:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    778a:	2c02      	cmp	r4, #2
{
    778c:	4605      	mov	r5, r0
    778e:	b08c      	sub	sp, #48	; 0x30
    7790:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    7792:	d001      	beq.n	7798 <att_read_group_req+0x18>
    7794:	2c10      	cmp	r4, #16
    7796:	d16e      	bne.n	7876 <att_read_group_req+0xf6>
	return net_buf_simple_pull_mem(&buf->b, len);
    7798:	2104      	movs	r1, #4
    779a:	3008      	adds	r0, #8
    779c:	f011 f84c 	bl	18838 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    77a0:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
    77a4:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    77a6:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    77a8:	1d01      	adds	r1, r0, #4
    77aa:	4622      	mov	r2, r4
    77ac:	4640      	mov	r0, r8
    77ae:	f00f fa61 	bl	16c74 <bt_uuid_create>
    77b2:	2800      	cmp	r0, #0
    77b4:	d061      	beq.n	787a <att_read_group_req+0xfa>
	if (!start || !end) {
    77b6:	2e00      	cmp	r6, #0
    77b8:	d03a      	beq.n	7830 <att_read_group_req+0xb0>
    77ba:	2400      	movs	r4, #0
    77bc:	2f00      	cmp	r7, #0
    77be:	d036      	beq.n	782e <att_read_group_req+0xae>
	if (start > end) {
    77c0:	42be      	cmp	r6, r7
    77c2:	d835      	bhi.n	7830 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    77c4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    77c8:	a901      	add	r1, sp, #4
    77ca:	4640      	mov	r0, r8
    77cc:	f88d 4004 	strb.w	r4, [sp, #4]
    77d0:	f8ad 3006 	strh.w	r3, [sp, #6]
    77d4:	f00f fa24 	bl	16c20 <bt_uuid_cmp>
    77d8:	2800      	cmp	r0, #0
    77da:	d134      	bne.n	7846 <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
    77dc:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    77de:	2214      	movs	r2, #20
    77e0:	2100      	movs	r1, #0
    77e2:	a807      	add	r0, sp, #28
    77e4:	f00f f98f 	bl	16b06 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    77e8:	2201      	movs	r2, #1
    77ea:	2111      	movs	r1, #17
    77ec:	4620      	mov	r0, r4
    77ee:	f010 fb73 	bl	17ed8 <bt_att_create_pdu>
    77f2:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    77f4:	2800      	cmp	r0, #0
    77f6:	d040      	beq.n	787a <att_read_group_req+0xfa>
	return net_buf_simple_add(&buf->b, len);
    77f8:	2101      	movs	r1, #1
    77fa:	3008      	adds	r0, #8
	data.uuid = uuid;
    77fc:	e9cd 5807 	strd	r5, r8, [sp, #28]
    7800:	f010 fffb 	bl	187fa <net_buf_simple_add>
	data.rsp->len = 0U;
    7804:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    7808:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    780a:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
    780c:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    7810:	4a1b      	ldr	r2, [pc, #108]	; (7880 <att_read_group_req+0x100>)
	data.group = NULL;
    7812:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    7816:	4639      	mov	r1, r7
    7818:	4630      	mov	r0, r6
    781a:	f010 f849 	bl	178b0 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    781e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7820:	781c      	ldrb	r4, [r3, #0]
    7822:	bb1c      	cbnz	r4, 786c <att_read_group_req+0xec>
		net_buf_unref(data.buf);
    7824:	9809      	ldr	r0, [sp, #36]	; 0x24
    7826:	f00c f989 	bl	13b3c <net_buf_unref>
	if (!req) {
    782a:	230a      	movs	r3, #10
    782c:	e018      	b.n	7860 <att_read_group_req+0xe0>
			*err = 0U;
    782e:	463e      	mov	r6, r7
	if (!req) {
    7830:	2301      	movs	r3, #1
    7832:	4632      	mov	r2, r6
    7834:	2110      	movs	r1, #16
    7836:	4628      	mov	r0, r5
    7838:	f010 fb31 	bl	17e9e <send_err_rsp.part.0>
		return 0;
    783c:	2400      	movs	r4, #0
}
    783e:	4620      	mov	r0, r4
    7840:	b00c      	add	sp, #48	; 0x30
    7842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    7846:	f642 0301 	movw	r3, #10241	; 0x2801
    784a:	a907      	add	r1, sp, #28
    784c:	4640      	mov	r0, r8
    784e:	f88d 401c 	strb.w	r4, [sp, #28]
    7852:	f8ad 301e 	strh.w	r3, [sp, #30]
    7856:	f00f f9e3 	bl	16c20 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    785a:	2800      	cmp	r0, #0
    785c:	d0be      	beq.n	77dc <att_read_group_req+0x5c>
	if (!req) {
    785e:	2310      	movs	r3, #16
    7860:	4632      	mov	r2, r6
    7862:	2110      	movs	r1, #16
    7864:	4628      	mov	r0, r5
    7866:	f010 fb1a 	bl	17e9e <send_err_rsp.part.0>
		return 0;
    786a:	e7e8      	b.n	783e <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    786c:	9909      	ldr	r1, [sp, #36]	; 0x24
    786e:	4628      	mov	r0, r5
    7870:	f7ff fdea 	bl	7448 <bt_att_chan_send_rsp.constprop.0>
	return 0;
    7874:	e7e2      	b.n	783c <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
    7876:	2404      	movs	r4, #4
    7878:	e7e1      	b.n	783e <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
    787a:	240e      	movs	r4, #14
    787c:	e7df      	b.n	783e <att_read_group_req+0xbe>
    787e:	bf00      	nop
    7880:	0000722d 	.word	0x0000722d

00007884 <att_read_mult_req>:
{
    7884:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    7888:	6886      	ldr	r6, [r0, #8]
{
    788a:	b085      	sub	sp, #20
	(void)memset(&data, 0, sizeof(data));
    788c:	2210      	movs	r2, #16
{
    788e:	4604      	mov	r4, r0
    7890:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
    7892:	4668      	mov	r0, sp
    7894:	2100      	movs	r1, #0
    7896:	f00f f936 	bl	16b06 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    789a:	2200      	movs	r2, #0
    789c:	210f      	movs	r1, #15
    789e:	4630      	mov	r0, r6
    78a0:	f010 fb1a 	bl	17ed8 <bt_att_create_pdu>
    78a4:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    78a6:	b358      	cbz	r0, 7900 <att_read_mult_req+0x7c>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    78a8:	f8df 9058 	ldr.w	r9, [pc, #88]	; 7904 <att_read_mult_req+0x80>
	data.chan = chan;
    78ac:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
    78ae:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    78b2:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
    78b6:	89ab      	ldrh	r3, [r5, #12]
    78b8:	2b01      	cmp	r3, #1
    78ba:	d804      	bhi.n	78c6 <att_read_mult_req+0x42>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    78bc:	9902      	ldr	r1, [sp, #8]
    78be:	4620      	mov	r0, r4
    78c0:	f7ff fdc2 	bl	7448 <bt_att_chan_send_rsp.constprop.0>
    78c4:	e018      	b.n	78f8 <att_read_mult_req+0x74>
    78c6:	4638      	mov	r0, r7
    78c8:	f010 ffc6 	bl	18858 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    78cc:	466b      	mov	r3, sp
    78ce:	464a      	mov	r2, r9
    78d0:	4601      	mov	r1, r0
    78d2:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    78d4:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    78d8:	f00f ffea 	bl	178b0 <bt_gatt_foreach_attr>
		if (data.err) {
    78dc:	f89d 300c 	ldrb.w	r3, [sp, #12]
    78e0:	2b00      	cmp	r3, #0
    78e2:	d0e8      	beq.n	78b6 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    78e4:	9802      	ldr	r0, [sp, #8]
    78e6:	f00c f929 	bl	13b3c <net_buf_unref>
	if (!req) {
    78ea:	f89d 300c 	ldrb.w	r3, [sp, #12]
    78ee:	4632      	mov	r2, r6
    78f0:	210e      	movs	r1, #14
    78f2:	4620      	mov	r0, r4
    78f4:	f010 fad3 	bl	17e9e <send_err_rsp.part.0>
	return 0;
    78f8:	2000      	movs	r0, #0
}
    78fa:	b005      	add	sp, #20
    78fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    7900:	200e      	movs	r0, #14
    7902:	e7fa      	b.n	78fa <att_read_mult_req+0x76>
    7904:	00017e01 	.word	0x00017e01

00007908 <att_read_rsp>:
{
    7908:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    790c:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
    7910:	4605      	mov	r5, r0
    7912:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
    7914:	4640      	mov	r0, r8
    7916:	2101      	movs	r1, #1
{
    7918:	4614      	mov	r4, r2
    791a:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
    791c:	f010 febc 	bl	18698 <bt_gatt_change_aware>
    7920:	b388      	cbz	r0, 7986 <att_read_rsp+0x7e>
	if (!handle) {
    7922:	b396      	cbz	r6, 798a <att_read_rsp+0x82>
	(void)memset(&data, 0, sizeof(data));
    7924:	2210      	movs	r2, #16
    7926:	2100      	movs	r1, #0
    7928:	4668      	mov	r0, sp
    792a:	f00f f8ec 	bl	16b06 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    792e:	2200      	movs	r2, #0
    7930:	4621      	mov	r1, r4
    7932:	4640      	mov	r0, r8
    7934:	f010 fad0 	bl	17ed8 <bt_att_create_pdu>
    7938:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    793a:	b340      	cbz	r0, 798e <att_read_rsp+0x86>
	data.offset = offset;
    793c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    7940:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    7944:	2301      	movs	r3, #1
    7946:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    794a:	4a12      	ldr	r2, [pc, #72]	; (7994 <att_read_rsp+0x8c>)
	data.chan = chan;
    794c:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    794e:	466b      	mov	r3, sp
    7950:	4631      	mov	r1, r6
    7952:	4630      	mov	r0, r6
    7954:	f00f ffac 	bl	178b0 <bt_gatt_foreach_attr>
	if (data.err) {
    7958:	f89d 400c 	ldrb.w	r4, [sp, #12]
    795c:	b174      	cbz	r4, 797c <att_read_rsp+0x74>
		net_buf_unref(data.buf);
    795e:	9802      	ldr	r0, [sp, #8]
    7960:	f00c f8ec 	bl	13b3c <net_buf_unref>
	if (!req) {
    7964:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7968:	4632      	mov	r2, r6
    796a:	4639      	mov	r1, r7
    796c:	4628      	mov	r0, r5
    796e:	f010 fa96 	bl	17e9e <send_err_rsp.part.0>
		return 0;
    7972:	2400      	movs	r4, #0
}
    7974:	4620      	mov	r0, r4
    7976:	b004      	add	sp, #16
    7978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    797c:	9902      	ldr	r1, [sp, #8]
    797e:	4628      	mov	r0, r5
    7980:	f7ff fd62 	bl	7448 <bt_att_chan_send_rsp.constprop.0>
	return 0;
    7984:	e7f6      	b.n	7974 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    7986:	2412      	movs	r4, #18
    7988:	e7f4      	b.n	7974 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
    798a:	2401      	movs	r4, #1
    798c:	e7f2      	b.n	7974 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    798e:	240e      	movs	r4, #14
    7990:	e7f0      	b.n	7974 <att_read_rsp+0x6c>
    7992:	bf00      	nop
    7994:	00017e01 	.word	0x00017e01

00007998 <att_read_type_req>:
{
    7998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    799c:	7b0c      	ldrb	r4, [r1, #12]
    799e:	3c04      	subs	r4, #4
    79a0:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    79a2:	2c02      	cmp	r4, #2
{
    79a4:	4605      	mov	r5, r0
    79a6:	b08c      	sub	sp, #48	; 0x30
    79a8:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    79aa:	d001      	beq.n	79b0 <att_read_type_req+0x18>
    79ac:	2c10      	cmp	r4, #16
    79ae:	d14f      	bne.n	7a50 <att_read_type_req+0xb8>
	return net_buf_simple_pull_mem(&buf->b, len);
    79b0:	2104      	movs	r1, #4
    79b2:	3008      	adds	r0, #8
    79b4:	f010 ff40 	bl	18838 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    79b8:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
    79bc:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    79be:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    79c0:	1d01      	adds	r1, r0, #4
    79c2:	4622      	mov	r2, r4
    79c4:	4640      	mov	r0, r8
    79c6:	f00f f955 	bl	16c74 <bt_uuid_create>
    79ca:	b188      	cbz	r0, 79f0 <att_read_type_req+0x58>
	if (!start || !end) {
    79cc:	b19e      	cbz	r6, 79f6 <att_read_type_req+0x5e>
    79ce:	b18f      	cbz	r7, 79f4 <att_read_type_req+0x5c>
	if (start > end) {
    79d0:	42b7      	cmp	r7, r6
    79d2:	d310      	bcc.n	79f6 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
    79d4:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
    79d6:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    79d8:	2100      	movs	r1, #0
    79da:	eb0d 0002 	add.w	r0, sp, r2
    79de:	f00f f892 	bl	16b06 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    79e2:	2201      	movs	r2, #1
    79e4:	2109      	movs	r1, #9
    79e6:	4620      	mov	r0, r4
    79e8:	f010 fa76 	bl	17ed8 <bt_att_create_pdu>
    79ec:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    79ee:	b968      	cbnz	r0, 7a0c <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
    79f0:	240e      	movs	r4, #14
    79f2:	e007      	b.n	7a04 <att_read_type_req+0x6c>
			*err = 0U;
    79f4:	463e      	mov	r6, r7
	if (!req) {
    79f6:	2301      	movs	r3, #1
    79f8:	4632      	mov	r2, r6
    79fa:	2108      	movs	r1, #8
    79fc:	4628      	mov	r0, r5
    79fe:	f010 fa4e 	bl	17e9e <send_err_rsp.part.0>
		return 0;
    7a02:	2400      	movs	r4, #0
}
    7a04:	4620      	mov	r0, r4
    7a06:	b00c      	add	sp, #48	; 0x30
    7a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
    7a0c:	2101      	movs	r1, #1
    7a0e:	3008      	adds	r0, #8
	data.uuid = uuid;
    7a10:	e9cd 5806 	strd	r5, r8, [sp, #24]
    7a14:	f010 fef1 	bl	187fa <net_buf_simple_add>
	data.rsp->len = 0U;
    7a18:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    7a1c:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    7a1e:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    7a20:	4a0c      	ldr	r2, [pc, #48]	; (7a54 <att_read_type_req+0xbc>)
	data.rsp->len = 0U;
    7a22:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    7a26:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    7a28:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    7a2c:	4630      	mov	r0, r6
    7a2e:	ab06      	add	r3, sp, #24
    7a30:	f00f ff3e 	bl	178b0 <bt_gatt_foreach_attr>
	if (data.err) {
    7a34:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    7a38:	b12c      	cbz	r4, 7a46 <att_read_type_req+0xae>
		net_buf_unref(data.buf);
    7a3a:	9808      	ldr	r0, [sp, #32]
    7a3c:	f00c f87e 	bl	13b3c <net_buf_unref>
	if (!req) {
    7a40:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    7a44:	e7d8      	b.n	79f8 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    7a46:	9908      	ldr	r1, [sp, #32]
    7a48:	4628      	mov	r0, r5
    7a4a:	f7ff fcfd 	bl	7448 <bt_att_chan_send_rsp.constprop.0>
	return 0;
    7a4e:	e7d9      	b.n	7a04 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
    7a50:	2404      	movs	r4, #4
    7a52:	e7d7      	b.n	7a04 <att_read_type_req+0x6c>
    7a54:	000072d9 	.word	0x000072d9

00007a58 <att_find_type_req>:
{
    7a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7a5c:	4688      	mov	r8, r1
    7a5e:	b086      	sub	sp, #24
    7a60:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
    7a62:	2106      	movs	r1, #6
    7a64:	f108 0008 	add.w	r0, r8, #8
    7a68:	f010 fee6 	bl	18838 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    7a6c:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
    7a6e:	b317      	cbz	r7, 7ab6 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
    7a70:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
    7a74:	f1b9 0f00 	cmp.w	r9, #0
    7a78:	d01c      	beq.n	7ab4 <att_find_type_req+0x5c>
	if (start > end) {
    7a7a:	454f      	cmp	r7, r9
    7a7c:	d81b      	bhi.n	7ab6 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
    7a7e:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    7a80:	f8ad 3002 	strh.w	r3, [sp, #2]
    7a84:	2400      	movs	r4, #0
    7a86:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    7a8a:	a901      	add	r1, sp, #4
    7a8c:	4668      	mov	r0, sp
	value = buf->data;
    7a8e:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    7a92:	f88d 4000 	strb.w	r4, [sp]
    7a96:	f88d 4004 	strb.w	r4, [sp, #4]
    7a9a:	f8ad 3006 	strh.w	r3, [sp, #6]
    7a9e:	f00f f8bf 	bl	16c20 <bt_uuid_cmp>
    7aa2:	4606      	mov	r6, r0
    7aa4:	b190      	cbz	r0, 7acc <att_find_type_req+0x74>
	if (!req) {
    7aa6:	230a      	movs	r3, #10
    7aa8:	463a      	mov	r2, r7
    7aaa:	2106      	movs	r1, #6
    7aac:	4628      	mov	r0, r5
    7aae:	f010 f9f6 	bl	17e9e <send_err_rsp.part.0>
		return 0;
    7ab2:	e007      	b.n	7ac4 <att_find_type_req+0x6c>
			*err = 0U;
    7ab4:	464f      	mov	r7, r9
	if (!req) {
    7ab6:	2301      	movs	r3, #1
    7ab8:	463a      	mov	r2, r7
    7aba:	2106      	movs	r1, #6
    7abc:	4628      	mov	r0, r5
    7abe:	f010 f9ee 	bl	17e9e <send_err_rsp.part.0>
		return 0;
    7ac2:	2400      	movs	r4, #0
}
    7ac4:	4620      	mov	r0, r4
    7ac6:	b006      	add	sp, #24
    7ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    7acc:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
    7ad0:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    7ad4:	4601      	mov	r1, r0
    7ad6:	2214      	movs	r2, #20
    7ad8:	a801      	add	r0, sp, #4
    7ada:	f00f f814 	bl	16b06 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    7ade:	4632      	mov	r2, r6
    7ae0:	2107      	movs	r1, #7
    7ae2:	4640      	mov	r0, r8
    7ae4:	f010 f9f8 	bl	17ed8 <bt_att_create_pdu>
    7ae8:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    7aea:	b1d8      	cbz	r0, 7b24 <att_find_type_req+0xcc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    7aec:	230a      	movs	r3, #10
    7aee:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    7af2:	4a0d      	ldr	r2, [pc, #52]	; (7b28 <att_find_type_req+0xd0>)
	data.value_len = value_len;
    7af4:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    7af8:	ab01      	add	r3, sp, #4
    7afa:	4649      	mov	r1, r9
    7afc:	4638      	mov	r0, r7
	data.value = value;
    7afe:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
    7b02:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    7b04:	f00f fed4 	bl	178b0 <bt_gatt_foreach_attr>
	if (data.err) {
    7b08:	f89d 4015 	ldrb.w	r4, [sp, #21]
    7b0c:	b12c      	cbz	r4, 7b1a <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    7b0e:	9802      	ldr	r0, [sp, #8]
    7b10:	f00c f814 	bl	13b3c <net_buf_unref>
	if (!req) {
    7b14:	f89d 3015 	ldrb.w	r3, [sp, #21]
    7b18:	e7ce      	b.n	7ab8 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    7b1a:	9902      	ldr	r1, [sp, #8]
    7b1c:	4628      	mov	r0, r5
    7b1e:	f7ff fc93 	bl	7448 <bt_att_chan_send_rsp.constprop.0>
	return 0;
    7b22:	e7cf      	b.n	7ac4 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    7b24:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    7b26:	e7cd      	b.n	7ac4 <att_find_type_req+0x6c>
    7b28:	000179dd 	.word	0x000179dd

00007b2c <att_find_info_req>:
{
    7b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    7b2e:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    7b30:	881e      	ldrh	r6, [r3, #0]
{
    7b32:	b085      	sub	sp, #20
    7b34:	4605      	mov	r5, r0
	if (!start || !end) {
    7b36:	b19e      	cbz	r6, 7b60 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    7b38:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    7b3a:	b184      	cbz	r4, 7b5e <att_find_info_req+0x32>
	if (start > end) {
    7b3c:	42b4      	cmp	r4, r6
    7b3e:	d30f      	bcc.n	7b60 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
    7b40:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
    7b42:	2210      	movs	r2, #16
    7b44:	2100      	movs	r1, #0
    7b46:	4668      	mov	r0, sp
    7b48:	f00e ffdd 	bl	16b06 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    7b4c:	2200      	movs	r2, #0
    7b4e:	2105      	movs	r1, #5
    7b50:	4638      	mov	r0, r7
    7b52:	f010 f9c1 	bl	17ed8 <bt_att_create_pdu>
    7b56:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    7b58:	b958      	cbnz	r0, 7b72 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    7b5a:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
    7b5c:	e007      	b.n	7b6e <att_find_info_req+0x42>
			*err = 0U;
    7b5e:	4626      	mov	r6, r4
	if (!req) {
    7b60:	2301      	movs	r3, #1
    7b62:	4632      	mov	r2, r6
    7b64:	2104      	movs	r1, #4
    7b66:	4628      	mov	r0, r5
    7b68:	f010 f999 	bl	17e9e <send_err_rsp.part.0>
	return 0;
    7b6c:	2000      	movs	r0, #0
}
    7b6e:	b005      	add	sp, #20
    7b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    7b72:	4621      	mov	r1, r4
    7b74:	4a08      	ldr	r2, [pc, #32]	; (7b98 <att_find_info_req+0x6c>)
	data.chan = chan;
    7b76:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    7b78:	466b      	mov	r3, sp
    7b7a:	4630      	mov	r0, r6
    7b7c:	f00f fe98 	bl	178b0 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    7b80:	9c02      	ldr	r4, [sp, #8]
    7b82:	b924      	cbnz	r4, 7b8e <att_find_info_req+0x62>
		net_buf_unref(data.buf);
    7b84:	9801      	ldr	r0, [sp, #4]
    7b86:	f00b ffd9 	bl	13b3c <net_buf_unref>
	if (!req) {
    7b8a:	230a      	movs	r3, #10
    7b8c:	e7e9      	b.n	7b62 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    7b8e:	9901      	ldr	r1, [sp, #4]
    7b90:	4628      	mov	r0, r5
    7b92:	f7ff fc59 	bl	7448 <bt_att_chan_send_rsp.constprop.0>
    7b96:	e7e9      	b.n	7b6c <att_find_info_req+0x40>
    7b98:	00017b05 	.word	0x00017b05

00007b9c <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
    7b9c:	b513      	push	{r0, r1, r4, lr}
    7b9e:	4602      	mov	r2, r0
    7ba0:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    7ba2:	4808      	ldr	r0, [pc, #32]	; (7bc4 <bt_att_req_alloc+0x28>)
    7ba4:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
    7ba6:	2400      	movs	r4, #0
    7ba8:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    7baa:	f00c ffed 	bl	14b88 <k_mem_slab_alloc>
    7bae:	4601      	mov	r1, r0
    7bb0:	b930      	cbnz	r0, 7bc0 <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
    7bb2:	9801      	ldr	r0, [sp, #4]
    7bb4:	2210      	movs	r2, #16
    7bb6:	f00e ffa6 	bl	16b06 <memset>

	return req;
    7bba:	9801      	ldr	r0, [sp, #4]
}
    7bbc:	b002      	add	sp, #8
    7bbe:	bd10      	pop	{r4, pc}
		return NULL;
    7bc0:	4620      	mov	r0, r4
    7bc2:	e7fb      	b.n	7bbc <bt_att_req_alloc+0x20>
    7bc4:	2000063c 	.word	0x2000063c

00007bc8 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    7bc8:	b507      	push	{r0, r1, r2, lr}
    7bca:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
    7bcc:	6880      	ldr	r0, [r0, #8]
    7bce:	b120      	cbz	r0, 7bda <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
    7bd0:	f00b ffb4 	bl	13b3c <net_buf_unref>
		req->buf = NULL;
    7bd4:	9b01      	ldr	r3, [sp, #4]
    7bd6:	2200      	movs	r2, #0
    7bd8:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
    7bda:	4803      	ldr	r0, [pc, #12]	; (7be8 <bt_att_req_free+0x20>)
    7bdc:	a901      	add	r1, sp, #4
    7bde:	f00d f805 	bl	14bec <k_mem_slab_free>
}
    7be2:	b003      	add	sp, #12
    7be4:	f85d fb04 	ldr.w	pc, [sp], #4
    7be8:	2000063c 	.word	0x2000063c

00007bec <att_handle_rsp>:
{
    7bec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	bool pending = k_work_delayable_is_pending(&work->work);
    7bf0:	f100 05e8 	add.w	r5, r0, #232	; 0xe8
    7bf4:	4604      	mov	r4, r0
	return k_work_delayable_busy_get(dwork) != 0;
    7bf6:	4628      	mov	r0, r5
    7bf8:	4688      	mov	r8, r1
    7bfa:	4691      	mov	r9, r2
    7bfc:	461f      	mov	r7, r3
    7bfe:	f011 fa00 	bl	19002 <k_work_delayable_busy_get>
	int rc = k_work_cancel_delayable(&work->work);
    7c02:	4628      	mov	r0, r5
    7c04:	f011 fa11 	bl	1902a <k_work_cancel_delayable>
	if (!chan->req) {
    7c08:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    7c0c:	2600      	movs	r6, #0
    7c0e:	b1f0      	cbz	r0, 7c4e <att_handle_rsp+0x62>
	if (chan->req == &cancel) {
    7c10:	4b10      	ldr	r3, [pc, #64]	; (7c54 <att_handle_rsp+0x68>)
    7c12:	4298      	cmp	r0, r3
    7c14:	d112      	bne.n	7c3c <att_handle_rsp+0x50>
		chan->req = NULL;
    7c16:	f8c4 60cc 	str.w	r6, [r4, #204]	; 0xcc
	bt_att_func_t func = NULL;
    7c1a:	4635      	mov	r5, r6
	att_req_send_process(chan->att);
    7c1c:	6820      	ldr	r0, [r4, #0]
    7c1e:	f010 f858 	bl	17cd2 <att_req_send_process>
	if (func) {
    7c22:	b13d      	cbz	r5, 7c34 <att_handle_rsp+0x48>
		func(chan->att->conn, err, pdu, len, params);
    7c24:	6820      	ldr	r0, [r4, #0]
    7c26:	f8cd a000 	str.w	sl, [sp]
    7c2a:	6800      	ldr	r0, [r0, #0]
    7c2c:	464b      	mov	r3, r9
    7c2e:	4642      	mov	r2, r8
    7c30:	4639      	mov	r1, r7
    7c32:	47a8      	blx	r5
}
    7c34:	2000      	movs	r0, #0
    7c36:	b002      	add	sp, #8
    7c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	func = chan->req->func;
    7c3c:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
    7c3e:	6046      	str	r6, [r0, #4]
	params = chan->req->user_data;
    7c40:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	bt_att_req_free(chan->req);
    7c44:	f7ff ffc0 	bl	7bc8 <bt_att_req_free>
	chan->req = NULL;
    7c48:	f8c4 60cc 	str.w	r6, [r4, #204]	; 0xcc
    7c4c:	e7e6      	b.n	7c1c <att_handle_rsp+0x30>
	bt_att_func_t func = NULL;
    7c4e:	4605      	mov	r5, r0
    7c50:	e7e4      	b.n	7c1c <att_handle_rsp+0x30>
    7c52:	bf00      	nop
    7c54:	2000106c 	.word	0x2000106c

00007c58 <bt_att_disconnected>:
{
    7c58:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
    7c5a:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
    7c5e:	b085      	sub	sp, #20
    7c60:	4604      	mov	r4, r0
	if (!att_chan->att) {
    7c62:	b385      	cbz	r5, 7cc6 <bt_att_disconnected+0x6e>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
    7c64:	f500 718a 	add.w	r1, r0, #276	; 0x114
    7c68:	f105 0024 	add.w	r0, r5, #36	; 0x24
    7c6c:	f00f fdb8 	bl	177e0 <sys_slist_find_and_remove>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
    7c70:	f1a4 0608 	sub.w	r6, r4, #8
    7c74:	f104 07c8 	add.w	r7, r4, #200	; 0xc8
    7c78:	2200      	movs	r2, #0
    7c7a:	2300      	movs	r3, #0
    7c7c:	4638      	mov	r0, r7
    7c7e:	f010 fd6b 	bl	18758 <net_buf_get>
    7c82:	4602      	mov	r2, r0
    7c84:	bb08      	cbnz	r0, 7cca <bt_att_disconnected+0x72>
	if (chan->req) {
    7c86:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
    7c8a:	b123      	cbz	r3, 7c96 <bt_att_disconnected+0x3e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
    7c8c:	4601      	mov	r1, r0
    7c8e:	230e      	movs	r3, #14
    7c90:	4630      	mov	r0, r6
    7c92:	f7ff ffab 	bl	7bec <att_handle_rsp>
	chan->att = NULL;
    7c96:	2300      	movs	r3, #0
    7c98:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
    7c9c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    7c9e:	b993      	cbnz	r3, 7cc6 <bt_att_disconnected+0x6e>
	att_reset(att);
    7ca0:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
    7ca2:	9803      	ldr	r0, [sp, #12]
    7ca4:	2200      	movs	r2, #0
    7ca6:	2300      	movs	r3, #0
    7ca8:	300c      	adds	r0, #12
    7caa:	f010 fd55 	bl	18758 <net_buf_get>
    7cae:	b978      	cbnz	r0, 7cd0 <bt_att_disconnected+0x78>
	att->conn = NULL;
    7cb0:	9a03      	ldr	r2, [sp, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    7cb2:	6856      	ldr	r6, [r2, #4]
	att->conn = NULL;
    7cb4:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    7cb6:	b976      	cbnz	r6, 7cd6 <bt_att_disconnected+0x7e>
	k_mem_slab_free(&att_slab, (void **)&att);
    7cb8:	4813      	ldr	r0, [pc, #76]	; (7d08 <bt_att_disconnected+0xb0>)
    7cba:	a903      	add	r1, sp, #12
    7cbc:	f00c ff96 	bl	14bec <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
    7cc0:	6820      	ldr	r0, [r4, #0]
    7cc2:	f000 fbc9 	bl	8458 <bt_gatt_disconnected>
}
    7cc6:	b005      	add	sp, #20
    7cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
    7cca:	f00b ff37 	bl	13b3c <net_buf_unref>
    7cce:	e7d3      	b.n	7c78 <bt_att_disconnected+0x20>
		net_buf_unref(buf);
    7cd0:	f00b ff34 	bl	13b3c <net_buf_unref>
    7cd4:	e7e5      	b.n	7ca2 <bt_att_disconnected+0x4a>
	return node->next;
    7cd6:	6835      	ldr	r5, [r6, #0]
    7cd8:	2d00      	cmp	r5, #0
    7cda:	bf38      	it	cc
    7cdc:	2500      	movcc	r5, #0
		if (req->func) {
    7cde:	6877      	ldr	r7, [r6, #4]
    7ce0:	b137      	cbz	r7, 7cf0 <bt_att_disconnected+0x98>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
    7ce2:	68f3      	ldr	r3, [r6, #12]
    7ce4:	9300      	str	r3, [sp, #0]
    7ce6:	2300      	movs	r3, #0
    7ce8:	461a      	mov	r2, r3
    7cea:	210e      	movs	r1, #14
    7cec:	4618      	mov	r0, r3
    7cee:	47b8      	blx	r7
		bt_att_req_free(req);
    7cf0:	4630      	mov	r0, r6
    7cf2:	f7ff ff69 	bl	7bc8 <bt_att_req_free>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    7cf6:	2d00      	cmp	r5, #0
    7cf8:	d0de      	beq.n	7cb8 <bt_att_disconnected+0x60>
    7cfa:	682b      	ldr	r3, [r5, #0]
    7cfc:	2b00      	cmp	r3, #0
    7cfe:	bf38      	it	cc
    7d00:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    7d02:	462e      	mov	r6, r5
    7d04:	461d      	mov	r5, r3
    7d06:	e7ea      	b.n	7cde <bt_att_disconnected+0x86>
    7d08:	20000604 	.word	0x20000604

00007d0c <gatt_indicate>:
}
#endif

static int gatt_indicate(struct bt_conn *conn, uint16_t handle,
			 struct bt_gatt_indicate_params *params)
{
    7d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7d10:	4680      	mov	r8, r0
    7d12:	4689      	mov	r9, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    7d14:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
    7d18:	2100      	movs	r1, #0
	    params->func == sc_restore_rsp)) &&
	    !bt_gatt_change_aware(conn, false)) {
		return -EAGAIN;
	}
#endif
	len = sizeof(*ind) + params->len;
    7d1a:	8a96      	ldrh	r6, [r2, #20]
{
    7d1c:	4615      	mov	r5, r2
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    7d1e:	f7ff ff3d 	bl	7b9c <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
    7d22:	3602      	adds	r6, #2
	if (!req) {
    7d24:	4604      	mov	r4, r0
    7d26:	b920      	cbnz	r0, 7d32 <gatt_indicate+0x26>

	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
	if (!buf) {
		BT_WARN("No buffer available to send indication");
		bt_att_req_free(req);
		return -ENOMEM;
    7d28:	f06f 050b 	mvn.w	r5, #11
	if (err) {
		bt_att_req_free(req);
	}

	return err;
}
    7d2c:	4628      	mov	r0, r5
    7d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req->func = func;
    7d32:	4b16      	ldr	r3, [pc, #88]	; (7d8c <gatt_indicate+0x80>)
    7d34:	6043      	str	r3, [r0, #4]
	req->user_data = params;
    7d36:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
    7d38:	4632      	mov	r2, r6
    7d3a:	211d      	movs	r1, #29
    7d3c:	4640      	mov	r0, r8
    7d3e:	f010 f8cb 	bl	17ed8 <bt_att_create_pdu>
	if (!buf) {
    7d42:	4606      	mov	r6, r0
    7d44:	b918      	cbnz	r0, 7d4e <gatt_indicate+0x42>
		bt_att_req_free(req);
    7d46:	4620      	mov	r0, r4
    7d48:	f7ff ff3e 	bl	7bc8 <bt_att_req_free>
    7d4c:	e7ec      	b.n	7d28 <gatt_indicate+0x1c>
	return net_buf_simple_add(&buf->b, len);
    7d4e:	f100 0a08 	add.w	sl, r0, #8
    7d52:	2102      	movs	r1, #2
    7d54:	4650      	mov	r0, sl
    7d56:	f010 fd50 	bl	187fa <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    7d5a:	4607      	mov	r7, r0
    7d5c:	8aa9      	ldrh	r1, [r5, #20]
    7d5e:	f827 9b02 	strh.w	r9, [r7], #2
    7d62:	4650      	mov	r0, sl
    7d64:	f010 fd49 	bl	187fa <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    7d68:	8aaa      	ldrh	r2, [r5, #20]
    7d6a:	6929      	ldr	r1, [r5, #16]
    7d6c:	4638      	mov	r0, r7
    7d6e:	f00e fe9f 	bl	16ab0 <memcpy>
	req->buf = buf;
    7d72:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
    7d74:	4621      	mov	r1, r4
    7d76:	4640      	mov	r0, r8
    7d78:	f010 f972 	bl	18060 <bt_att_req_send>
	if (err) {
    7d7c:	4605      	mov	r5, r0
    7d7e:	2800      	cmp	r0, #0
    7d80:	d0d4      	beq.n	7d2c <gatt_indicate+0x20>
		bt_att_req_free(req);
    7d82:	4620      	mov	r0, r4
    7d84:	f7ff ff20 	bl	7bc8 <bt_att_req_free>
    7d88:	e7d0      	b.n	7d2c <gatt_indicate+0x20>
    7d8a:	bf00      	nop
    7d8c:	0001809f 	.word	0x0001809f

00007d90 <find_sc_cfg>:
{
    7d90:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
    7d92:	4c06      	ldr	r4, [pc, #24]	; (7dac <find_sc_cfg+0x1c>)
    7d94:	7823      	ldrb	r3, [r4, #0]
    7d96:	4283      	cmp	r3, r0
    7d98:	d104      	bne.n	7da4 <find_sc_cfg+0x14>
	return memcmp(a, b, sizeof(*a));
    7d9a:	2207      	movs	r2, #7
    7d9c:	1c60      	adds	r0, r4, #1
    7d9e:	f00e fe77 	bl	16a90 <memcmp>
    7da2:	b108      	cbz	r0, 7da8 <find_sc_cfg+0x18>
	return NULL;
    7da4:	2000      	movs	r0, #0
}
    7da6:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
    7da8:	4620      	mov	r0, r4
    7daa:	e7fc      	b.n	7da6 <find_sc_cfg+0x16>
    7dac:	20002226 	.word	0x20002226

00007db0 <find_cf_cfg>:
{
    7db0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    7db2:	4d0d      	ldr	r5, [pc, #52]	; (7de8 <find_cf_cfg+0x38>)
		if (!conn) {
    7db4:	4604      	mov	r4, r0
    7db6:	b968      	cbnz	r0, 7dd4 <find_cf_cfg+0x24>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    7db8:	9000      	str	r0, [sp, #0]
    7dba:	2207      	movs	r2, #7
    7dbc:	f8cd 0003 	str.w	r0, [sp, #3]
    7dc0:	4669      	mov	r1, sp
    7dc2:	1c68      	adds	r0, r5, #1
    7dc4:	f00e fe64 	bl	16a90 <memcmp>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
    7dc8:	2800      	cmp	r0, #0
    7dca:	bf08      	it	eq
    7dcc:	462c      	moveq	r4, r5
}
    7dce:	4620      	mov	r0, r4
    7dd0:	b003      	add	sp, #12
    7dd2:	bd30      	pop	{r4, r5, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    7dd4:	462a      	mov	r2, r5
    7dd6:	f812 1b01 	ldrb.w	r1, [r2], #1
    7dda:	f00f faea 	bl	173b2 <bt_conn_is_peer_addr_le>
    7dde:	2800      	cmp	r0, #0
	return NULL;
    7de0:	bf14      	ite	ne
    7de2:	462c      	movne	r4, r5
    7de4:	2400      	moveq	r4, #0
    7de6:	e7f2      	b.n	7dce <find_cf_cfg+0x1e>
    7de8:	2000107c 	.word	0x2000107c

00007dec <sc_indicate_rsp>:
{
    7dec:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7dee:	4915      	ldr	r1, [pc, #84]	; (7e44 <sc_indicate_rsp+0x58>)
    7df0:	f3bf 8f5b 	dmb	ish
    7df4:	4604      	mov	r4, r0
    7df6:	f101 0350 	add.w	r3, r1, #80	; 0x50
    7dfa:	e853 2f00 	ldrex	r2, [r3]
    7dfe:	f022 0202 	bic.w	r2, r2, #2
    7e02:	e843 2000 	strex	r0, r2, [r3]
    7e06:	2800      	cmp	r0, #0
    7e08:	d1f7      	bne.n	7dfa <sc_indicate_rsp+0xe>
    7e0a:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7e0e:	f3bf 8f5b 	dmb	ish
    7e12:	6d0b      	ldr	r3, [r1, #80]	; 0x50
    7e14:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    7e18:	07da      	lsls	r2, r3, #31
    7e1a:	d505      	bpl.n	7e28 <sc_indicate_rsp+0x3c>
	return k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
    7e1c:	480a      	ldr	r0, [pc, #40]	; (7e48 <sc_indicate_rsp+0x5c>)
    7e1e:	2200      	movs	r2, #0
    7e20:	2300      	movs	r3, #0
    7e22:	3120      	adds	r1, #32
    7e24:	f00d fcec 	bl	15800 <k_work_reschedule_for_queue>
	cfg = find_cf_cfg(conn);
    7e28:	4620      	mov	r0, r4
    7e2a:	f7ff ffc1 	bl	7db0 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
    7e2e:	b140      	cbz	r0, 7e42 <sc_indicate_rsp+0x56>
    7e30:	7a03      	ldrb	r3, [r0, #8]
    7e32:	07db      	lsls	r3, r3, #31
    7e34:	d505      	bpl.n	7e42 <sc_indicate_rsp+0x56>
}
    7e36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    7e3a:	2100      	movs	r1, #0
    7e3c:	300c      	adds	r0, #12
    7e3e:	f010 b99b 	b.w	18178 <atomic_set_bit>
}
    7e42:	bd10      	pop	{r4, pc}
    7e44:	200009c0 	.word	0x200009c0
    7e48:	20000ed0 	.word	0x20000ed0

00007e4c <notify_cb>:

static uint8_t notify_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			 void *user_data)
{
    7e4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct notify_data *data = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    7e4e:	4b2e      	ldr	r3, [pc, #184]	; (7f08 <notify_cb+0xbc>)
{
    7e50:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    7e52:	6882      	ldr	r2, [r0, #8]
    7e54:	429a      	cmp	r2, r3
{
    7e56:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    7e58:	d12e      	bne.n	7eb8 <notify_cb+0x6c>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    7e5a:	68c7      	ldr	r7, [r0, #12]

	/* Save Service Changed data if peer is not connected */
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
    7e5c:	4b2b      	ldr	r3, [pc, #172]	; (7f0c <notify_cb+0xc0>)
    7e5e:	429f      	cmp	r7, r3
    7e60:	d11a      	bne.n	7e98 <notify_cb+0x4c>
    7e62:	4d2b      	ldr	r5, [pc, #172]	; (7f10 <notify_cb+0xc4>)
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
			struct gatt_sc_cfg *cfg = &sc_cfg[i];
			struct bt_conn *conn;

			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    7e64:	2300      	movs	r3, #0
    7e66:	2207      	movs	r2, #7
    7e68:	4669      	mov	r1, sp
    7e6a:	1c68      	adds	r0, r5, #1
    7e6c:	9300      	str	r3, [sp, #0]
    7e6e:	f8cd 3003 	str.w	r3, [sp, #3]
    7e72:	f00e fe0d 	bl	16a90 <memcmp>
    7e76:	b178      	cbz	r0, 7e98 <notify_cb+0x4c>
				continue;
			}

			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
    7e78:	4629      	mov	r1, r5
    7e7a:	2207      	movs	r2, #7
    7e7c:	f811 0b01 	ldrb.w	r0, [r1], #1
    7e80:	f7fe fe78 	bl	6b74 <bt_conn_lookup_state_le>
						       BT_CONN_CONNECTED);
			if (!conn) {
    7e84:	b9d8      	cbnz	r0, 7ebe <notify_cb+0x72>
				struct sc_data *sc;

				sc = (struct sc_data *)data->ind_params->data;
    7e86:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
    7e88:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
    7e8a:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
    7e8c:	f811 0b01 	ldrb.w	r0, [r1], #1
    7e90:	8853      	ldrh	r3, [r2, #2]
    7e92:	8812      	ldrh	r2, [r2, #0]
    7e94:	f010 fb37 	bl	18506 <sc_save>
		int err;

		/* Check if config value matches data type since consolidated
		 * value may be for a different peer.
		 */
		if (cfg->value != data->type) {
    7e98:	893a      	ldrh	r2, [r7, #8]
    7e9a:	89a3      	ldrh	r3, [r4, #12]
    7e9c:	429a      	cmp	r2, r3
    7e9e:	d10b      	bne.n	7eb8 <notify_cb+0x6c>
			continue;
		}

		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    7ea0:	4639      	mov	r1, r7
    7ea2:	f811 0b01 	ldrb.w	r0, [r1], #1
    7ea6:	f7fe fe45 	bl	6b34 <bt_conn_lookup_addr_le>
		if (!conn) {
    7eaa:	4605      	mov	r5, r0
    7eac:	b120      	cbz	r0, 7eb8 <notify_cb+0x6c>
			continue;
		}

		if (conn->state != BT_CONN_CONNECTED) {
    7eae:	7a83      	ldrb	r3, [r0, #10]
    7eb0:	2b07      	cmp	r3, #7
    7eb2:	d007      	beq.n	7ec4 <notify_cb+0x78>
			continue;
		}

		/* Confirm match if cfg is managed by application */
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
			bt_conn_unref(conn);
    7eb4:	f00f fae1 	bl	1747a <bt_conn_unref>
		}

		data->err = 0;
	}

	return BT_GATT_ITER_CONTINUE;
    7eb8:	2001      	movs	r0, #1
}
    7eba:	b003      	add	sp, #12
    7ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
    7ebe:	f00f fadc 	bl	1747a <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    7ec2:	e7e9      	b.n	7e98 <notify_cb+0x4c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    7ec4:	697b      	ldr	r3, [r7, #20]
    7ec6:	b123      	cbz	r3, 7ed2 <notify_cb+0x86>
    7ec8:	4631      	mov	r1, r6
    7eca:	4798      	blx	r3
    7ecc:	b908      	cbnz	r0, 7ed2 <notify_cb+0x86>
			bt_conn_unref(conn);
    7ece:	4628      	mov	r0, r5
    7ed0:	e7f0      	b.n	7eb4 <notify_cb+0x68>
		if (data->type == BT_GATT_CCC_INDICATE) {
    7ed2:	89a3      	ldrh	r3, [r4, #12]
    7ed4:	88a1      	ldrh	r1, [r4, #4]
    7ed6:	6922      	ldr	r2, [r4, #16]
    7ed8:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
    7eda:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
    7edc:	d110      	bne.n	7f00 <notify_cb+0xb4>
			err = gatt_indicate(conn, data->handle,
    7ede:	f7ff ff15 	bl	7d0c <gatt_indicate>
			if (err == 0) {
    7ee2:	4606      	mov	r6, r0
    7ee4:	b918      	cbnz	r0, 7eee <notify_cb+0xa2>
				data->ind_params->_ref++;
    7ee6:	6922      	ldr	r2, [r4, #16]
    7ee8:	7d93      	ldrb	r3, [r2, #22]
    7eea:	3301      	adds	r3, #1
    7eec:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
    7eee:	4628      	mov	r0, r5
    7ef0:	f00f fac3 	bl	1747a <bt_conn_unref>
		if (err < 0) {
    7ef4:	2e00      	cmp	r6, #0
    7ef6:	f04f 0000 	mov.w	r0, #0
    7efa:	dbde      	blt.n	7eba <notify_cb+0x6e>
		data->err = 0;
    7efc:	60a0      	str	r0, [r4, #8]
    7efe:	e7db      	b.n	7eb8 <notify_cb+0x6c>
			err = gatt_notify(conn, data->handle, data->nfy_params);
    7f00:	f010 f9e9 	bl	182d6 <gatt_notify>
    7f04:	4606      	mov	r6, r0
    7f06:	e7f2      	b.n	7eee <notify_cb+0xa2>
    7f08:	000181e5 	.word	0x000181e5
    7f0c:	200001e4 	.word	0x200001e4
    7f10:	20002226 	.word	0x20002226

00007f14 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
    7f14:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    7f18:	4b24      	ldr	r3, [pc, #144]	; (7fac <disconnected_cb+0x98>)
{
    7f1a:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    7f1c:	6882      	ldr	r2, [r0, #8]
    7f1e:	429a      	cmp	r2, r3
{
    7f20:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    7f22:	d102      	bne.n	7f2a <disconnected_cb+0x16>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    7f24:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
    7f26:	8963      	ldrh	r3, [r4, #10]
    7f28:	bb13      	cbnz	r3, 7f70 <disconnected_cb+0x5c>

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
    7f2a:	2001      	movs	r0, #1
    7f2c:	b002      	add	sp, #8
    7f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    7f32:	f105 0888 	add.w	r8, r5, #136	; 0x88
    7f36:	7a28      	ldrb	r0, [r5, #8]
    7f38:	4641      	mov	r1, r8
    7f3a:	f00f f91a 	bl	17172 <bt_addr_le_is_bonded>
    7f3e:	b988      	cbnz	r0, 7f64 <disconnected_cb+0x50>
				if (ccc == &sc_ccc) {
    7f40:	4b1b      	ldr	r3, [pc, #108]	; (7fb0 <disconnected_cb+0x9c>)
    7f42:	429c      	cmp	r4, r3
    7f44:	d102      	bne.n	7f4c <disconnected_cb+0x38>
					sc_clear(conn);
    7f46:	4628      	mov	r0, r5
    7f48:	f010 fb05 	bl	18556 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    7f4c:	2500      	movs	r5, #0
	memcpy(dst, src, sizeof(*dst));
    7f4e:	2207      	movs	r2, #7
    7f50:	4669      	mov	r1, sp
    7f52:	4630      	mov	r0, r6
    7f54:	9500      	str	r5, [sp, #0]
    7f56:	f8cd 5003 	str.w	r5, [sp, #3]
    7f5a:	f00e fda9 	bl	16ab0 <memcpy>
	cfg->id = 0U;
    7f5e:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
    7f60:	8125      	strh	r5, [r4, #8]
	if (!value_used) {
    7f62:	e01a      	b.n	7f9a <disconnected_cb+0x86>
    7f64:	2207      	movs	r2, #7
    7f66:	4641      	mov	r1, r8
    7f68:	4630      	mov	r0, r6
    7f6a:	f00e fda1 	bl	16ab0 <memcpy>
    7f6e:	e014      	b.n	7f9a <disconnected_cb+0x86>
		if (!cfg->value) {
    7f70:	8923      	ldrh	r3, [r4, #8]
    7f72:	b193      	cbz	r3, 7f9a <disconnected_cb+0x86>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    7f74:	4626      	mov	r6, r4
    7f76:	4628      	mov	r0, r5
    7f78:	f816 1b01 	ldrb.w	r1, [r6], #1
    7f7c:	4632      	mov	r2, r6
    7f7e:	f00f fa18 	bl	173b2 <bt_conn_is_peer_addr_le>
    7f82:	2800      	cmp	r0, #0
    7f84:	d1d5      	bne.n	7f32 <disconnected_cb+0x1e>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    7f86:	7820      	ldrb	r0, [r4, #0]
    7f88:	4631      	mov	r1, r6
    7f8a:	f7fe fdd3 	bl	6b34 <bt_conn_lookup_addr_le>
			if (tmp) {
    7f8e:	b120      	cbz	r0, 7f9a <disconnected_cb+0x86>
				if (tmp->state == BT_CONN_CONNECTED) {
    7f90:	7a85      	ldrb	r5, [r0, #10]
				bt_conn_unref(tmp);
    7f92:	f00f fa72 	bl	1747a <bt_conn_unref>
	if (!value_used) {
    7f96:	2d07      	cmp	r5, #7
    7f98:	d0c7      	beq.n	7f2a <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
    7f9a:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
    7f9c:	2100      	movs	r1, #0
    7f9e:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
    7fa0:	2b00      	cmp	r3, #0
    7fa2:	d0c2      	beq.n	7f2a <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
    7fa4:	4638      	mov	r0, r7
    7fa6:	4798      	blx	r3
    7fa8:	e7bf      	b.n	7f2a <disconnected_cb+0x16>
    7faa:	bf00      	nop
    7fac:	000181e5 	.word	0x000181e5
    7fb0:	200001e4 	.word	0x200001e4

00007fb4 <bt_gatt_init>:
{
    7fb4:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    7fb6:	4b1f      	ldr	r3, [pc, #124]	; (8034 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x34>)
    7fb8:	f3bf 8f5b 	dmb	ish
    7fbc:	2201      	movs	r2, #1
    7fbe:	e853 1f00 	ldrex	r1, [r3]
    7fc2:	2900      	cmp	r1, #0
    7fc4:	d103      	bne.n	7fce <bt_gatt_init+0x1a>
    7fc6:	e843 2000 	strex	r0, r2, [r3]
    7fca:	2800      	cmp	r0, #0
    7fcc:	d1f7      	bne.n	7fbe <bt_gatt_init+0xa>
    7fce:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
    7fd2:	d12d      	bne.n	8030 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x30>
    7fd4:	f3bf 8f5b 	dmb	ish
    7fd8:	4b17      	ldr	r3, [pc, #92]	; (8038 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x38>)
    7fda:	e853 1f00 	ldrex	r1, [r3]
    7fde:	2900      	cmp	r1, #0
    7fe0:	d103      	bne.n	7fea <bt_gatt_init+0x36>
    7fe2:	e843 2000 	strex	r0, r2, [r3]
    7fe6:	2800      	cmp	r0, #0
    7fe8:	d1f7      	bne.n	7fda <bt_gatt_init+0x26>
    7fea:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
    7fee:	d108      	bne.n	8002 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2>
    7ff0:	4a12      	ldr	r2, [pc, #72]	; (803c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3c>)
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    7ff2:	4913      	ldr	r1, [pc, #76]	; (8040 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x40>)
    7ff4:	8813      	ldrh	r3, [r2, #0]
    7ff6:	4c13      	ldr	r4, [pc, #76]	; (8044 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x44>)
	if (!atomic_cas(&service_init, 0, 1)) {
    7ff8:	2000      	movs	r0, #0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    7ffa:	42a1      	cmp	r1, r4
    7ffc:	d312      	bcc.n	8024 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x24>
    7ffe:	b100      	cbz	r0, 8002 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2>
    8000:	8013      	strh	r3, [r2, #0]
	k_work_init_delayable(&work->work, handler);
    8002:	4911      	ldr	r1, [pc, #68]	; (8048 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x48>)
    8004:	4811      	ldr	r0, [pc, #68]	; (804c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4c>)
    8006:	f010 fff0 	bl	18fea <k_work_init_delayable>
	return k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
    800a:	4910      	ldr	r1, [pc, #64]	; (804c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4c>)
    800c:	4810      	ldr	r0, [pc, #64]	; (8050 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x50>)
    800e:	f44f 72a4 	mov.w	r2, #328	; 0x148
    8012:	2300      	movs	r3, #0
    8014:	f00d fbf4 	bl	15800 <k_work_reschedule_for_queue>
}
    8018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&work->work, handler);
    801c:	490d      	ldr	r1, [pc, #52]	; (8054 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x54>)
    801e:	480e      	ldr	r0, [pc, #56]	; (8058 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x58>)
    8020:	f010 bfe3 	b.w	18fea <k_work_init_delayable>
		last_static_handle += svc->attr_count;
    8024:	6848      	ldr	r0, [r1, #4]
    8026:	4403      	add	r3, r0
    8028:	b29b      	uxth	r3, r3
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    802a:	3108      	adds	r1, #8
    802c:	2001      	movs	r0, #1
    802e:	e7e4      	b.n	7ffa <bt_gatt_init+0x46>
}
    8030:	bd10      	pop	{r4, pc}
    8032:	bf00      	nop
    8034:	2000108c 	.word	0x2000108c
    8038:	200010a8 	.word	0x200010a8
    803c:	20002224 	.word	0x20002224
    8040:	000195c8 	.word	0x000195c8
    8044:	000195d8 	.word	0x000195d8
    8048:	0001864f 	.word	0x0001864f
    804c:	20000990 	.word	0x20000990
    8050:	20000ed0 	.word	0x20000ed0
    8054:	000082bd 	.word	0x000082bd
    8058:	200009e0 	.word	0x200009e0

0000805c <bt_gatt_attr_get_handle>:
{
    805c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
    8060:	4603      	mov	r3, r0
    8062:	b148      	cbz	r0, 8078 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
    8064:	8a00      	ldrh	r0, [r0, #16]
    8066:	b938      	cbnz	r0, 8078 <bt_gatt_attr_get_handle+0x1c>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    8068:	4912      	ldr	r1, [pc, #72]	; (80b4 <bt_gatt_attr_get_handle+0x58>)
    806a:	f8df e04c 	ldr.w	lr, [pc, #76]	; 80b8 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
    806e:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    8070:	f04f 0c14 	mov.w	ip, #20
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    8074:	4571      	cmp	r1, lr
    8076:	d301      	bcc.n	807c <bt_gatt_attr_get_handle+0x20>
}
    8078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((attr < &static_svc->attrs[0]) ||
    807c:	e9d1 7600 	ldrd	r7, r6, [r1]
    8080:	42bb      	cmp	r3, r7
    8082:	d304      	bcc.n	808e <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    8084:	fb0c 7206 	mla	r2, ip, r6, r7
    8088:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
    808a:	4293      	cmp	r3, r2
    808c:	d90e      	bls.n	80ac <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
    808e:	19a2      	adds	r2, r4, r6
    8090:	b292      	uxth	r2, r2
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    8092:	3108      	adds	r1, #8
    8094:	4614      	mov	r4, r2
    8096:	e7ed      	b.n	8074 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
    8098:	fb0c 7805 	mla	r8, ip, r5, r7
    809c:	4543      	cmp	r3, r8
    809e:	d007      	beq.n	80b0 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    80a0:	3501      	adds	r5, #1
    80a2:	1962      	adds	r2, r4, r5
    80a4:	42b5      	cmp	r5, r6
    80a6:	b292      	uxth	r2, r2
    80a8:	d1f6      	bne.n	8098 <bt_gatt_attr_get_handle+0x3c>
    80aa:	e7f2      	b.n	8092 <bt_gatt_attr_get_handle+0x36>
    80ac:	2500      	movs	r5, #0
    80ae:	e7f8      	b.n	80a2 <bt_gatt_attr_get_handle+0x46>
    80b0:	4610      	mov	r0, r2
    80b2:	e7e1      	b.n	8078 <bt_gatt_attr_get_handle+0x1c>
    80b4:	000195c8 	.word	0x000195c8
    80b8:	000195d8 	.word	0x000195d8

000080bc <bt_gatt_foreach_attr_type>:
{
    80bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    80c0:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
    80c4:	9100      	str	r1, [sp, #0]
    80c6:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
    80c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    80cc:	2d00      	cmp	r5, #0
    80ce:	bf08      	it	eq
    80d0:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
    80d2:	4b24      	ldr	r3, [pc, #144]	; (8164 <bt_gatt_foreach_attr_type+0xa8>)
    80d4:	881b      	ldrh	r3, [r3, #0]
    80d6:	4283      	cmp	r3, r0
{
    80d8:	4607      	mov	r7, r0
    80da:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
    80dc:	d23c      	bcs.n	8158 <bt_gatt_foreach_attr_type+0x9c>
}
    80de:	b003      	add	sp, #12
    80e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
    80e4:	6873      	ldr	r3, [r6, #4]
    80e6:	4423      	add	r3, r4
    80e8:	42bb      	cmp	r3, r7
    80ea:	d232      	bcs.n	8152 <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
    80ec:	b29c      	uxth	r4, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    80ee:	3608      	adds	r6, #8
    80f0:	4b1d      	ldr	r3, [pc, #116]	; (8168 <bt_gatt_foreach_attr_type+0xac>)
    80f2:	429e      	cmp	r6, r3
    80f4:	d3f6      	bcc.n	80e4 <bt_gatt_foreach_attr_type+0x28>
    80f6:	e7f2      	b.n	80de <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    80f8:	5889      	ldr	r1, [r1, r2]
    80fa:	9301      	str	r3, [sp, #4]
    80fc:	4640      	mov	r0, r8
    80fe:	f00e fd8f 	bl	16c20 <bt_uuid_cmp>
    8102:	9b01      	ldr	r3, [sp, #4]
    8104:	b190      	cbz	r0, 812c <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    8106:	3401      	adds	r4, #1
    8108:	f10a 0a01 	add.w	sl, sl, #1
    810c:	b2a4      	uxth	r4, r4
    810e:	6873      	ldr	r3, [r6, #4]
    8110:	4553      	cmp	r3, sl
    8112:	d9ec      	bls.n	80ee <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
    8114:	9b00      	ldr	r3, [sp, #0]
    8116:	429c      	cmp	r4, r3
    8118:	d8e1      	bhi.n	80de <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
    811a:	42bc      	cmp	r4, r7
    811c:	d3f3      	bcc.n	8106 <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    811e:	6831      	ldr	r1, [r6, #0]
    8120:	fb0b f20a 	mul.w	r2, fp, sl
    8124:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    8126:	f1b8 0f00 	cmp.w	r8, #0
    812a:	d1e5      	bne.n	80f8 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
    812c:	f1b9 0f00 	cmp.w	r9, #0
    8130:	d10b      	bne.n	814a <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
    8132:	3d01      	subs	r5, #1
    8134:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
    8136:	4618      	mov	r0, r3
    8138:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    813a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    813c:	4621      	mov	r1, r4
    813e:	4798      	blx	r3
	if (!*num_matches) {
    8140:	2d00      	cmp	r5, #0
    8142:	d0cc      	beq.n	80de <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    8144:	2800      	cmp	r0, #0
    8146:	d1de      	bne.n	8106 <bt_gatt_foreach_attr_type+0x4a>
    8148:	e7c9      	b.n	80de <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
    814a:	68da      	ldr	r2, [r3, #12]
    814c:	4591      	cmp	r9, r2
    814e:	d1da      	bne.n	8106 <bt_gatt_foreach_attr_type+0x4a>
    8150:	e7ef      	b.n	8132 <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    8152:	f04f 0a00 	mov.w	sl, #0
    8156:	e7da      	b.n	810e <bt_gatt_foreach_attr_type+0x52>
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    8158:	4e04      	ldr	r6, [pc, #16]	; (816c <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
    815a:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
    815c:	f04f 0b14 	mov.w	fp, #20
    8160:	e7c6      	b.n	80f0 <bt_gatt_foreach_attr_type+0x34>
    8162:	bf00      	nop
    8164:	20002224 	.word	0x20002224
    8168:	000195d8 	.word	0x000195d8
    816c:	000195c8 	.word	0x000195c8

00008170 <db_hash_gen.isra.0>:
static void db_hash_gen(bool store)
    8170:	b510      	push	{r4, lr}
    8172:	b0c8      	sub	sp, #288	; 0x120
	uint8_t key[16] = {};
    8174:	2300      	movs	r3, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    8176:	aa1c      	add	r2, sp, #112	; 0x70
    8178:	4669      	mov	r1, sp
    817a:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
    817c:	e9cd 3300 	strd	r3, r3, [sp]
    8180:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    8184:	f00e fb81 	bl	1688a <tc_cmac_setup>
    8188:	b1b8      	cbz	r0, 81ba <db_hash_gen.isra.0+0x4a>
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
    818a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    818e:	2001      	movs	r0, #1
    8190:	4a0b      	ldr	r2, [pc, #44]	; (81c0 <db_hash_gen.isra.0+0x50>)
    8192:	ab04      	add	r3, sp, #16
    8194:	f010 fa50 	bl	18638 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    8198:	480a      	ldr	r0, [pc, #40]	; (81c4 <db_hash_gen.isra.0+0x54>)
    819a:	a904      	add	r1, sp, #16
    819c:	f00e fc0c 	bl	169b8 <tc_cmac_final>
    81a0:	b158      	cbz	r0, 81ba <db_hash_gen.isra.0+0x4a>
    81a2:	4b08      	ldr	r3, [pc, #32]	; (81c4 <db_hash_gen.isra.0+0x54>)
    81a4:	2208      	movs	r2, #8
    81a6:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
    81aa:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
    81ac:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    81b0:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
    81b4:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
    81b6:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
    81b8:	d1f7      	bne.n	81aa <db_hash_gen.isra.0+0x3a>
}
    81ba:	b048      	add	sp, #288	; 0x120
    81bc:	bd10      	pop	{r4, pc}
    81be:	bf00      	nop
    81c0:	000180cd 	.word	0x000180cd
    81c4:	2000223c 	.word	0x2000223c

000081c8 <bt_gatt_indicate>:
{
    81c8:	b530      	push	{r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    81ca:	4b39      	ldr	r3, [pc, #228]	; (82b0 <bt_gatt_indicate+0xe8>)
    81cc:	f3bf 8f5b 	dmb	ish
    81d0:	681b      	ldr	r3, [r3, #0]
    81d2:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    81d6:	079a      	lsls	r2, r3, #30
{
    81d8:	b08b      	sub	sp, #44	; 0x2c
    81da:	4604      	mov	r4, r0
    81dc:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    81de:	d561      	bpl.n	82a4 <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
    81e0:	6848      	ldr	r0, [r1, #4]
    81e2:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    81e4:	b114      	cbz	r4, 81ec <bt_gatt_indicate+0x24>
    81e6:	7aa3      	ldrb	r3, [r4, #10]
    81e8:	2b07      	cmp	r3, #7
    81ea:	d15e      	bne.n	82aa <bt_gatt_indicate+0xe2>
	data.handle = bt_gatt_attr_get_handle(data.attr);
    81ec:	f7ff ff36 	bl	805c <bt_gatt_attr_get_handle>
    81f0:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
    81f4:	b918      	cbnz	r0, 81fe <bt_gatt_indicate+0x36>
		return -ENOENT;
    81f6:	f06f 0001 	mvn.w	r0, #1
}
    81fa:	b00b      	add	sp, #44	; 0x2c
    81fc:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
    81fe:	682a      	ldr	r2, [r5, #0]
    8200:	b9ba      	cbnz	r2, 8232 <bt_gatt_indicate+0x6a>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    8202:	9b05      	ldr	r3, [sp, #20]
    8204:	6818      	ldr	r0, [r3, #0]
    8206:	2300      	movs	r3, #0
    8208:	f88d 3010 	strb.w	r3, [sp, #16]
    820c:	a904      	add	r1, sp, #16
    820e:	f642 0303 	movw	r3, #10243	; 0x2803
    8212:	f8ad 3012 	strh.w	r3, [sp, #18]
    8216:	f00e fd03 	bl	16c20 <bt_uuid_cmp>
    821a:	b1d0      	cbz	r0, 8252 <bt_gatt_indicate+0x8a>
	if (conn) {
    821c:	f8bd 0018 	ldrh.w	r0, [sp, #24]
    8220:	b324      	cbz	r4, 826c <bt_gatt_indicate+0xa4>
		params->_ref = 1;
    8222:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
    8224:	4601      	mov	r1, r0
		params->_ref = 1;
    8226:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
    8228:	462a      	mov	r2, r5
    822a:	4620      	mov	r0, r4
    822c:	f7ff fd6e 	bl	7d0c <gatt_indicate>
    8230:	e7e3      	b.n	81fa <bt_gatt_indicate+0x32>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    8232:	a905      	add	r1, sp, #20
    8234:	9102      	str	r1, [sp, #8]
    8236:	491f      	ldr	r1, [pc, #124]	; (82b4 <bt_gatt_indicate+0xec>)
    8238:	9101      	str	r1, [sp, #4]
    823a:	2101      	movs	r1, #1
	found->attr = NULL;
    823c:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    823e:	9100      	str	r1, [sp, #0]
    8240:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    8244:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    8246:	f7ff ff39 	bl	80bc <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    824a:	9b05      	ldr	r3, [sp, #20]
    824c:	2b00      	cmp	r3, #0
    824e:	d1d8      	bne.n	8202 <bt_gatt_indicate+0x3a>
    8250:	e7d1      	b.n	81f6 <bt_gatt_indicate+0x2e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    8252:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    8254:	68c3      	ldr	r3, [r0, #12]
    8256:	799b      	ldrb	r3, [r3, #6]
    8258:	069b      	lsls	r3, r3, #26
    825a:	d402      	bmi.n	8262 <bt_gatt_indicate+0x9a>
			return -EINVAL;
    825c:	f06f 0015 	mvn.w	r0, #21
    8260:	e7cb      	b.n	81fa <bt_gatt_indicate+0x32>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    8262:	f010 f99b 	bl	1859c <bt_gatt_attr_value_handle>
    8266:	f8ad 0018 	strh.w	r0, [sp, #24]
    826a:	e7d7      	b.n	821c <bt_gatt_indicate+0x54>
	data.err = -ENOTCONN;
    826c:	f06f 0338 	mvn.w	r3, #56	; 0x38
    8270:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
    8272:	2302      	movs	r3, #2
    8274:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    8278:	f642 1302 	movw	r3, #10498	; 0x2902
    827c:	f8ad 3012 	strh.w	r3, [sp, #18]
    8280:	ab05      	add	r3, sp, #20
    8282:	9302      	str	r3, [sp, #8]
    8284:	4b0c      	ldr	r3, [pc, #48]	; (82b8 <bt_gatt_indicate+0xf0>)
    8286:	9301      	str	r3, [sp, #4]
    8288:	2301      	movs	r3, #1
    828a:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
    828c:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    828e:	4623      	mov	r3, r4
    8290:	aa04      	add	r2, sp, #16
    8292:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
    8296:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    8298:	f88d 4010 	strb.w	r4, [sp, #16]
    829c:	f7ff ff0e 	bl	80bc <bt_gatt_foreach_attr_type>
	return data.err;
    82a0:	9807      	ldr	r0, [sp, #28]
    82a2:	e7aa      	b.n	81fa <bt_gatt_indicate+0x32>
		return -EAGAIN;
    82a4:	f06f 000a 	mvn.w	r0, #10
    82a8:	e7a7      	b.n	81fa <bt_gatt_indicate+0x32>
		return -ENOTCONN;
    82aa:	f06f 0038 	mvn.w	r0, #56	; 0x38
    82ae:	e7a4      	b.n	81fa <bt_gatt_indicate+0x32>
    82b0:	20000098 	.word	0x20000098
    82b4:	000180c5 	.word	0x000180c5
    82b8:	00007e4d 	.word	0x00007e4d

000082bc <sc_process>:
{
    82bc:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    82be:	f850 2c08 	ldr.w	r2, [r0, #-8]
    82c2:	9201      	str	r2, [sp, #4]
{
    82c4:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    82c6:	f1a0 0120 	sub.w	r1, r0, #32
    82ca:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    82ce:	f3bf 8f5b 	dmb	ish
    82d2:	e854 2f00 	ldrex	r2, [r4]
    82d6:	f022 0201 	bic.w	r2, r2, #1
    82da:	e844 2000 	strex	r0, r2, [r4]
    82de:	2800      	cmp	r0, #0
    82e0:	d1f7      	bne.n	82d2 <sc_process+0x16>
    82e2:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
    82e6:	4a0d      	ldr	r2, [pc, #52]	; (831c <sc_process+0x60>)
    82e8:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
    82ec:	4a0c      	ldr	r2, [pc, #48]	; (8320 <sc_process+0x64>)
    82ee:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
    82f2:	aa01      	add	r2, sp, #4
	sc->start = 0U;
    82f4:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
    82f6:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
    82fa:	2204      	movs	r2, #4
	sc->start = 0U;
    82fc:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
    8300:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
    8304:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    8308:	f7ff ff5e 	bl	81c8 <bt_gatt_indicate>
    830c:	b918      	cbnz	r0, 8316 <sc_process+0x5a>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
    830e:	2101      	movs	r1, #1
    8310:	4620      	mov	r0, r4
    8312:	f00f ff31 	bl	18178 <atomic_set_bit>
}
    8316:	b002      	add	sp, #8
    8318:	bd10      	pop	{r4, pc}
    831a:	bf00      	nop
    831c:	00019890 	.word	0x00019890
    8320:	00007ded 	.word	0x00007ded

00008324 <update_ccc>:
{
    8324:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    8326:	4b28      	ldr	r3, [pc, #160]	; (83c8 <update_ccc+0xa4>)
	struct bt_conn *conn = data->conn;
    8328:	6815      	ldr	r5, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
    832a:	6882      	ldr	r2, [r0, #8]
    832c:	429a      	cmp	r2, r3
{
    832e:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    8330:	d146      	bne.n	83c0 <update_ccc+0x9c>
	ccc = attr->user_data;
    8332:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
    8334:	8933      	ldrh	r3, [r6, #8]
    8336:	2b00      	cmp	r3, #0
    8338:	d042      	beq.n	83c0 <update_ccc+0x9c>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    833a:	4632      	mov	r2, r6
    833c:	4628      	mov	r0, r5
    833e:	f812 1b01 	ldrb.w	r1, [r2], #1
    8342:	f00f f836 	bl	173b2 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
    8346:	2800      	cmp	r0, #0
    8348:	d03a      	beq.n	83c0 <update_ccc+0x9c>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
    834a:	222a      	movs	r2, #42	; 0x2a
    834c:	4621      	mov	r1, r4
    834e:	4628      	mov	r0, r5
    8350:	f010 f97f 	bl	18652 <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
    8354:	2803      	cmp	r0, #3
    8356:	d033      	beq.n	83c0 <update_ccc+0x9c>
		gatt_ccc_changed(attr, ccc);
    8358:	4631      	mov	r1, r6
    835a:	4620      	mov	r0, r4
    835c:	f00f fe95 	bl	1808a <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
    8360:	4b1a      	ldr	r3, [pc, #104]	; (83cc <update_ccc+0xa8>)
    8362:	429e      	cmp	r6, r3
    8364:	d12c      	bne.n	83c0 <update_ccc+0x9c>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
    8366:	7a28      	ldrb	r0, [r5, #8]
    8368:	f105 0188 	add.w	r1, r5, #136	; 0x88
    836c:	f7ff fd10 	bl	7d90 <find_sc_cfg>
	if (!cfg) {
    8370:	4604      	mov	r4, r0
    8372:	b328      	cbz	r0, 83c0 <update_ccc+0x9c>
	if (!(cfg->data.start || cfg->data.end)) {
    8374:	8902      	ldrh	r2, [r0, #8]
    8376:	8943      	ldrh	r3, [r0, #10]
    8378:	ea53 0102 	orrs.w	r1, r3, r2
    837c:	d020      	beq.n	83c0 <update_ccc+0x9c>
	index = bt_conn_index(conn);
    837e:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
    8380:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
    8384:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
    8388:	f7fe fe54 	bl	7034 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    838c:	4910      	ldr	r1, [pc, #64]	; (83d0 <update_ccc+0xac>)
    838e:	4a11      	ldr	r2, [pc, #68]	; (83d4 <update_ccc+0xb0>)
    8390:	2318      	movs	r3, #24
    8392:	fb03 1300 	mla	r3, r3, r0, r1
	sc_restore_params[index].len = sizeof(sc_range);
    8396:	2604      	movs	r6, #4
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    8398:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
    839a:	4a0f      	ldr	r2, [pc, #60]	; (83d8 <update_ccc+0xb4>)
    839c:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
    839e:	aa01      	add	r2, sp, #4
    83a0:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
    83a2:	829e      	strh	r6, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    83a4:	b203      	sxth	r3, r0
    83a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    83aa:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    83ae:	4628      	mov	r0, r5
    83b0:	f7ff ff0a 	bl	81c8 <bt_gatt_indicate>
	memset(&cfg->data, 0, sizeof(cfg->data));
    83b4:	4632      	mov	r2, r6
    83b6:	2100      	movs	r1, #0
    83b8:	f104 0008 	add.w	r0, r4, #8
    83bc:	f00e fba3 	bl	16b06 <memset>
}
    83c0:	2001      	movs	r0, #1
    83c2:	b002      	add	sp, #8
    83c4:	bd70      	pop	{r4, r5, r6, pc}
    83c6:	bf00      	nop
    83c8:	000181e5 	.word	0x000181e5
    83cc:	200001e4 	.word	0x200001e4
    83d0:	20001090 	.word	0x20001090
    83d4:	00019890 	.word	0x00019890
    83d8:	000181c9 	.word	0x000181c9

000083dc <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
    83dc:	b507      	push	{r0, r1, r2, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    83de:	4a06      	ldr	r2, [pc, #24]	; (83f8 <bt_gatt_connected+0x1c>)
	data.conn = conn;
    83e0:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    83e2:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
    83e4:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    83e6:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
    83ea:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    83ee:	f010 f923 	bl	18638 <bt_gatt_foreach_attr>
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}
    83f2:	b003      	add	sp, #12
    83f4:	f85d fb04 	ldr.w	pc, [sp], #4
    83f8:	00008325 	.word	0x00008325

000083fc <db_hash_read>:
{
    83fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8400:	4680      	mov	r8, r0
	return k_work_delayable_busy_get(dwork) != 0;
    8402:	4813      	ldr	r0, [pc, #76]	; (8450 <db_hash_read+0x54>)
    8404:	f8bd 6018 	ldrh.w	r6, [sp, #24]
    8408:	4615      	mov	r5, r2
    840a:	461f      	mov	r7, r3
    840c:	f010 fdf9 	bl	19002 <k_work_delayable_busy_get>
    8410:	4604      	mov	r4, r0
	int rc = k_work_cancel_delayable(&work->work);
    8412:	480f      	ldr	r0, [pc, #60]	; (8450 <db_hash_read+0x54>)
    8414:	f010 fe09 	bl	1902a <k_work_cancel_delayable>
	if (pending) {
    8418:	b114      	cbz	r4, 8420 <db_hash_read+0x24>
		return (rc == 0) ? 0 : -EINVAL;
    841a:	b908      	cbnz	r0, 8420 <db_hash_read+0x24>
		db_hash_gen(true);
    841c:	f7ff fea8 	bl	8170 <db_hash_gen.isra.0>
	bt_gatt_change_aware(conn, true);
    8420:	2101      	movs	r1, #1
    8422:	4640      	mov	r0, r8
    8424:	f010 f938 	bl	18698 <bt_gatt_change_aware>
	if (offset > value_len) {
    8428:	2e10      	cmp	r6, #16
    842a:	d80d      	bhi.n	8448 <db_hash_read+0x4c>
	len = MIN(buf_len, value_len - offset);
    842c:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
    8430:	4908      	ldr	r1, [pc, #32]	; (8454 <db_hash_read+0x58>)
	len = MIN(buf_len, value_len - offset);
    8432:	42bc      	cmp	r4, r7
    8434:	bfa8      	it	ge
    8436:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
    8438:	4622      	mov	r2, r4
    843a:	4431      	add	r1, r6
    843c:	4628      	mov	r0, r5
    843e:	f00e fb37 	bl	16ab0 <memcpy>
}
    8442:	4620      	mov	r0, r4
    8444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    8448:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
    844c:	e7f9      	b.n	8442 <db_hash_read+0x46>
    844e:	bf00      	nop
    8450:	20000990 	.word	0x20000990
    8454:	2000223c 	.word	0x2000223c

00008458 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
    8458:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    845a:	4603      	mov	r3, r0
    845c:	4a15      	ldr	r2, [pc, #84]	; (84b4 <bt_gatt_disconnected+0x5c>)
{
    845e:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    8460:	f64f 71ff 	movw	r1, #65535	; 0xffff
    8464:	2001      	movs	r0, #1
    8466:	f010 f8e7 	bl	18638 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
    846a:	4628      	mov	r0, r5
    846c:	f7ff fca0 	bl	7db0 <find_cf_cfg>
	if (!cfg) {
    8470:	4604      	mov	r4, r0
    8472:	b1e8      	cbz	r0, 84b0 <bt_gatt_disconnected+0x58>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    8474:	f105 0688 	add.w	r6, r5, #136	; 0x88
    8478:	7a28      	ldrb	r0, [r5, #8]
    847a:	4631      	mov	r1, r6
    847c:	f00e fe79 	bl	17172 <bt_addr_le_is_bonded>
    8480:	b920      	cbnz	r0, 848c <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
    8482:	4620      	mov	r0, r4
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
    8484:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
    8488:	f00f bf07 	b.w	1829a <clear_cf_cfg>
    848c:	1c60      	adds	r0, r4, #1
    848e:	2207      	movs	r2, #7
    8490:	4631      	mov	r1, r6
    8492:	340c      	adds	r4, #12
    8494:	f00e fb0c 	bl	16ab0 <memcpy>
    8498:	f3bf 8f5b 	dmb	ish
    849c:	e854 3f00 	ldrex	r3, [r4]
    84a0:	f023 0302 	bic.w	r3, r3, #2
    84a4:	e844 3200 	strex	r2, r3, [r4]
    84a8:	2a00      	cmp	r2, #0
    84aa:	d1f7      	bne.n	849c <bt_gatt_disconnected+0x44>
    84ac:	f3bf 8f5b 	dmb	ish
}
    84b0:	bd70      	pop	{r4, r5, r6, pc}
    84b2:	bf00      	nop
    84b4:	00007f15 	.word	0x00007f15

000084b8 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
    84b8:	4b04      	ldr	r3, [pc, #16]	; (84cc <bt_smp_accept+0x14>)
    84ba:	6818      	ldr	r0, [r3, #0]
    84bc:	b918      	cbnz	r0, 84c6 <bt_smp_accept+0xe>
			continue;
		}

		smp->chan.ops = &ops;
    84be:	4a04      	ldr	r2, [pc, #16]	; (84d0 <bt_smp_accept+0x18>)
    84c0:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan;
    84c2:	600b      	str	r3, [r1, #0]

		return 0;
    84c4:	4770      	bx	lr
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
    84c6:	f06f 000b 	mvn.w	r0, #11
}
    84ca:	4770      	bx	lr
    84cc:	20000a18 	.word	0x20000a18
    84d0:	0001996c 	.word	0x0001996c

000084d4 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
    84d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    84d8:	4614      	mov	r4, r2
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    84da:	1dc2      	adds	r2, r0, #7
    84dc:	f022 0203 	bic.w	r2, r2, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    84e0:	1e67      	subs	r7, r4, #1
    84e2:	b2bf      	uxth	r7, r7
	*mem_head = mem_pool;
    84e4:	6018      	str	r0, [r3, #0]
{
    84e6:	b082      	sub	sp, #8
    84e8:	4605      	mov	r5, r0
    84ea:	460e      	mov	r6, r1
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    84ec:	fb01 0007 	mla	r0, r1, r7, r0
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    84f0:	8014      	strh	r4, [r2, #0]
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    84f2:	2100      	movs	r1, #0
    84f4:	2204      	movs	r2, #4
    84f6:	f00e fb06 	bl	16b06 <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
    84fa:	b1b7      	cbz	r7, 852a <mem_init+0x56>
    84fc:	3c02      	subs	r4, #2
    84fe:	b2a4      	uxth	r4, r4
    8500:	fb04 6306 	mla	r3, r4, r6, r6
    8504:	fb04 f706 	mul.w	r7, r4, r6
    8508:	441d      	add	r5, r3
    850a:	1aff      	subs	r7, r7, r3
    850c:	f64f 78ff 	movw	r8, #65535	; 0xffff
		uint32_t next;

		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
    8510:	2204      	movs	r2, #4
	while (mem_count--) {
    8512:	3c01      	subs	r4, #1
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
    8514:	19e8      	adds	r0, r5, r7
    8516:	eb0d 0102 	add.w	r1, sp, r2
	while (mem_count--) {
    851a:	b2a4      	uxth	r4, r4
		next = (uint32_t)((uint8_t *) mem_pool +
    851c:	9501      	str	r5, [sp, #4]
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
    851e:	f00e fac7 	bl	16ab0 <memcpy>
	while (mem_count--) {
    8522:	4544      	cmp	r4, r8
    8524:	eba5 0506 	sub.w	r5, r5, r6
    8528:	d1f2      	bne.n	8510 <mem_init+0x3c>
		       (void *)&next, sizeof(next));
	}
}
    852a:	b002      	add	sp, #8
    852c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008530 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    8530:	b570      	push	{r4, r5, r6, lr}
	if (*mem_head) {
    8532:	6805      	ldr	r5, [r0, #0]
{
    8534:	b082      	sub	sp, #8
	if (*mem_head) {
    8536:	b195      	cbz	r5, 855e <mem_acquire+0x2e>
		uint16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    8538:	1deb      	adds	r3, r5, #7
    853a:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    853e:	2204      	movs	r2, #4
    8540:	4604      	mov	r4, r0
    8542:	4629      	mov	r1, r5
    8544:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    8548:	881e      	ldrh	r6, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    854a:	f00e fab1 	bl	16ab0 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    854e:	9b01      	ldr	r3, [sp, #4]
    8550:	b123      	cbz	r3, 855c <mem_acquire+0x2c>
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    8552:	1dda      	adds	r2, r3, #7
    8554:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
    8558:	3e01      	subs	r6, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    855a:	8016      	strh	r6, [r2, #0]
				free_count;
		}

		*mem_head = head;
    855c:	6023      	str	r3, [r4, #0]
		return mem;
	}

	return NULL;
}
    855e:	4628      	mov	r0, r5
    8560:	b002      	add	sp, #8
    8562:	bd70      	pop	{r4, r5, r6, pc}

00008564 <mem_release>:
void mem_release(void *mem, void **mem_head)
{
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    8564:	680b      	ldr	r3, [r1, #0]
{
    8566:	b570      	push	{r4, r5, r6, lr}
    8568:	460c      	mov	r4, r1
    856a:	4605      	mov	r5, r0
	if (*mem_head) {
    856c:	b183      	cbz	r3, 8590 <mem_release+0x2c>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    856e:	3307      	adds	r3, #7
    8570:	f023 0303 	bic.w	r3, r3, #3
    8574:	881e      	ldrh	r6, [r3, #0]
    8576:	3601      	adds	r6, #1
    8578:	b2b6      	uxth	r6, r6
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    857a:	2204      	movs	r2, #4
    857c:	4621      	mov	r1, r4
    857e:	4628      	mov	r0, r5
    8580:	f00e fa96 	bl	16ab0 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
    8584:	1deb      	adds	r3, r5, #7
    8586:	f023 0303 	bic.w	r3, r3, #3
    858a:	801e      	strh	r6, [r3, #0]

	*mem_head = mem;
    858c:	6025      	str	r5, [r4, #0]
}
    858e:	bd70      	pop	{r4, r5, r6, pc}
    8590:	2601      	movs	r6, #1
    8592:	e7f2      	b.n	857a <mem_release+0x16>

00008594 <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
    8594:	fb02 0001 	mla	r0, r2, r1, r0
    8598:	4770      	bx	lr
    859a:	bf00      	nop

0000859c <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint16_t)((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size);
    859c:	1a40      	subs	r0, r0, r1
    859e:	b280      	uxth	r0, r0
}
    85a0:	fbb0 f0f2 	udiv	r0, r0, r2
    85a4:	4770      	bx	lr
    85a6:	bf00      	nop

000085a8 <mem_rcopy>:
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
	src += len;
	while (len--) {
    85a8:	1e53      	subs	r3, r2, #1
	src += len;
    85aa:	4411      	add	r1, r2
	while (len--) {
    85ac:	b29b      	uxth	r3, r3
    85ae:	b142      	cbz	r2, 85c2 <mem_rcopy+0x1a>
    85b0:	43db      	mvns	r3, r3
    85b2:	18ca      	adds	r2, r1, r3
    85b4:	3801      	subs	r0, #1
		*dst++ = *--src;
    85b6:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    85ba:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (len--) {
    85be:	4291      	cmp	r1, r2
    85c0:	d1f9      	bne.n	85b6 <mem_rcopy+0xe>
	}
}
    85c2:	4770      	bx	lr

000085c4 <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
    85c4:	4401      	add	r1, r0
    85c6:	e002      	b.n	85ce <mem_nz+0xa>
		if (*src++) {
    85c8:	f810 3b01 	ldrb.w	r3, [r0], #1
    85cc:	b91b      	cbnz	r3, 85d6 <mem_nz+0x12>
	while (len--) {
    85ce:	4288      	cmp	r0, r1
    85d0:	d1fa      	bne.n	85c8 <mem_nz+0x4>
			return 1;
		}
	}

	return 0;
    85d2:	2000      	movs	r0, #0
    85d4:	4770      	bx	lr
			return 1;
    85d6:	2001      	movs	r0, #1
}
    85d8:	4770      	bx	lr
    85da:	bf00      	nop

000085dc <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
    85dc:	6010      	str	r0, [r2, #0]
    85de:	6008      	str	r0, [r1, #0]

	return link;
}
    85e0:	4770      	bx	lr
    85e2:	bf00      	nop

000085e4 <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
    85e4:	680a      	ldr	r2, [r1, #0]
{
    85e6:	4603      	mov	r3, r0
	if (*head != *tail) {
    85e8:	6800      	ldr	r0, [r0, #0]
    85ea:	4290      	cmp	r0, r2
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
    85ec:	bf05      	ittet	eq
    85ee:	2200      	moveq	r2, #0
    85f0:	600a      	streq	r2, [r1, #0]
		return NULL;
    85f2:	2000      	movne	r0, #0
	*head = *tail = NULL;
    85f4:	601a      	streq	r2, [r3, #0]

	return old_head;
}
    85f6:	4770      	bx	lr

000085f8 <memq_enqueue>:
 * @param mem[in]      The memory payload to be enqueued. Pointed to by old tail
 * @param tail[in,out] Tail of queue. Will be updated to point to link
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
    85f8:	b410      	push	{r4}
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
    85fa:	6814      	ldr	r4, [r2, #0]
    85fc:	6020      	str	r0, [r4, #0]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
    85fe:	6814      	ldr	r4, [r2, #0]
    8600:	6061      	str	r1, [r4, #4]
	 */
	cpu_dmb(); /* Ensure data accesses are synchronized */
	*tail = link; /* Commit: enqueue of memq node */

	return link;
}
    8602:	bc10      	pop	{r4}
	*tail = link; /* Commit: enqueue of memq node */
    8604:	6010      	str	r0, [r2, #0]
}
    8606:	4770      	bx	lr

00008608 <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
    8608:	4288      	cmp	r0, r1
    860a:	d003      	beq.n	8614 <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
    860c:	b11a      	cbz	r2, 8616 <memq_peek+0xe>
		*mem = head->mem;
    860e:	6843      	ldr	r3, [r0, #4]
    8610:	6013      	str	r3, [r2, #0]
    8612:	4770      	bx	lr
		return NULL;
    8614:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
    8616:	4770      	bx	lr

00008618 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
    8618:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    861a:	4283      	cmp	r3, r0
    861c:	d009      	beq.n	8632 <memq_dequeue+0x1a>
	if (mem) {
    861e:	b12a      	cbz	r2, 862c <memq_dequeue+0x14>
		*mem = head->mem;
    8620:	6858      	ldr	r0, [r3, #4]
    8622:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
    8624:	681a      	ldr	r2, [r3, #0]
    8626:	600a      	str	r2, [r1, #0]

	return old_head;
}
    8628:	4618      	mov	r0, r3
    862a:	4770      	bx	lr
	if (old_head == NULL) {
    862c:	2b00      	cmp	r3, #0
    862e:	d1f9      	bne.n	8624 <memq_dequeue+0xc>
    8630:	e7fa      	b.n	8628 <memq_dequeue+0x10>
		return NULL; /* queue is empty */
    8632:	2300      	movs	r3, #0
    8634:	e7f8      	b.n	8628 <memq_dequeue+0x10>
    8636:	bf00      	nop

00008638 <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
    8638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    863c:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8674 <mayfly_init+0x3c>
    8640:	4e0b      	ldr	r6, [pc, #44]	; (8670 <mayfly_init+0x38>)
    8642:	270c      	movs	r7, #12
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
    8644:	f106 0430 	add.w	r4, r6, #48	; 0x30
{
    8648:	4645      	mov	r5, r8
			memq_init(&mfl[callee_id][caller_id],
    864a:	1d22      	adds	r2, r4, #4
    864c:	4621      	mov	r1, r4
    864e:	4628      	mov	r0, r5
    8650:	3c0c      	subs	r4, #12
    8652:	f7ff ffc3 	bl	85dc <memq_init>
		while (caller_id--) {
    8656:	42b4      	cmp	r4, r6
    8658:	f1a5 0508 	sub.w	r5, r5, #8
    865c:	d1f5      	bne.n	864a <mayfly_init+0x12>
	while (callee_id--) {
    865e:	3f04      	subs	r7, #4
    8660:	1d3b      	adds	r3, r7, #4
    8662:	f1a8 0820 	sub.w	r8, r8, #32
    8666:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
    866a:	d1eb      	bne.n	8644 <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    866c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8670:	200011b4 	.word	0x200011b4
    8674:	20001124 	.word	0x20001124

00008678 <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
    8678:	b430      	push	{r4, r5}
    867a:	4603      	mov	r3, r0
    867c:	460c      	mov	r4, r1
	if (enable) {
    867e:	b19a      	cbz	r2, 86a8 <mayfly_enable+0x30>
		if (mft[callee_id][caller_id].enable_req ==
    8680:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    8684:	0108      	lsls	r0, r1, #4
    8686:	4d14      	ldr	r5, [pc, #80]	; (86d8 <mayfly_enable+0x60>)
    8688:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    868c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    8690:	4429      	add	r1, r5
    8692:	7a48      	ldrb	r0, [r1, #9]
    8694:	7a0d      	ldrb	r5, [r1, #8]
    8696:	42a8      	cmp	r0, r5
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    8698:	bf04      	itt	eq
    869a:	3001      	addeq	r0, #1
    869c:	7208      	strbeq	r0, [r1, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    869e:	4621      	mov	r1, r4
    86a0:	4618      	mov	r0, r3

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
    86a2:	bc30      	pop	{r4, r5}
		mayfly_enable_cb(caller_id, callee_id, enable);
    86a4:	f00a bfb0 	b.w	13608 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    86a8:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    86ac:	4d0a      	ldr	r5, [pc, #40]	; (86d8 <mayfly_enable+0x60>)
    86ae:	0112      	lsls	r2, r2, #4
    86b0:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    86b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    86b8:	442b      	add	r3, r5
    86ba:	7a9d      	ldrb	r5, [r3, #10]
    86bc:	7ada      	ldrb	r2, [r3, #11]
    86be:	42aa      	cmp	r2, r5
    86c0:	d001      	beq.n	86c6 <mayfly_enable+0x4e>
}
    86c2:	bc30      	pop	{r4, r5}
    86c4:	4770      	bx	lr
			mfp[callee_id] = 1U;
    86c6:	4d05      	ldr	r5, [pc, #20]	; (86dc <mayfly_enable+0x64>)
			mft[callee_id][caller_id].disable_req++;
    86c8:	3201      	adds	r2, #1
    86ca:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
    86cc:	2301      	movs	r3, #1
    86ce:	546b      	strb	r3, [r5, r1]
}
    86d0:	bc30      	pop	{r4, r5}
			mayfly_pend(caller_id, callee_id);
    86d2:	f00a bfef 	b.w	136b4 <mayfly_pend>
    86d6:	bf00      	nop
    86d8:	20001130 	.word	0x20001130
    86dc:	2000112c 	.word	0x2000112c

000086e0 <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
    86e0:	b570      	push	{r4, r5, r6, lr}
    86e2:	461c      	mov	r4, r3
    86e4:	4606      	mov	r6, r0
    86e6:	460d      	mov	r5, r1
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    86e8:	b322      	cbz	r2, 8734 <mayfly_enqueue+0x54>
    86ea:	7863      	ldrb	r3, [r4, #1]

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    86ec:	7822      	ldrb	r2, [r4, #0]
    86ee:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
    86f0:	f012 0203 	ands.w	r2, r2, #3
    86f4:	d005      	beq.n	8702 <mayfly_enqueue+0x22>
		if (chain) {
			if (state != 1U) {
    86f6:	2a01      	cmp	r2, #1
    86f8:	d040      	beq.n	877c <mayfly_enqueue+0x9c>
				/* mark as ready in queue */
				m->_req = ack + 1;
    86fa:	3301      	adds	r3, #1
    86fc:	b2db      	uxtb	r3, r3
    86fe:	7023      	strb	r3, [r4, #0]

				goto mayfly_enqueue_pend;
    8700:	e00f      	b.n	8722 <mayfly_enqueue+0x42>
		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    8702:	2230      	movs	r2, #48	; 0x30
    8704:	2104      	movs	r1, #4
    8706:	fb12 1105 	smlabb	r1, r2, r5, r1
    870a:	220c      	movs	r2, #12
    870c:	fb12 1206 	smlabb	r2, r2, r6, r1
	m->_req = ack + 1;
    8710:	3301      	adds	r3, #1
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    8712:	491b      	ldr	r1, [pc, #108]	; (8780 <mayfly_enqueue+0xa0>)
    8714:	6860      	ldr	r0, [r4, #4]
	m->_req = ack + 1;
    8716:	b2db      	uxtb	r3, r3
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    8718:	440a      	add	r2, r1
	m->_req = ack + 1;
    871a:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    871c:	4621      	mov	r1, r4
    871e:	f7ff ff6b 	bl	85f8 <memq_enqueue>

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
    8722:	4b18      	ldr	r3, [pc, #96]	; (8784 <mayfly_enqueue+0xa4>)

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    8724:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
    8726:	2201      	movs	r2, #1
	mayfly_pend(caller_id, callee_id);
    8728:	4629      	mov	r1, r5
	mfp[callee_id] = 1U;
    872a:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
    872c:	f00a ffc2 	bl	136b4 <mayfly_pend>

	return 0;
    8730:	2000      	movs	r0, #0
}
    8732:	bd70      	pop	{r4, r5, r6, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    8734:	f00a ffa8 	bl	13688 <mayfly_prio_is_equal>
    8738:	2800      	cmp	r0, #0
    873a:	d0d6      	beq.n	86ea <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    873c:	4629      	mov	r1, r5
    873e:	4630      	mov	r0, r6
    8740:	f00a ff82 	bl	13648 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    8744:	2800      	cmp	r0, #0
    8746:	d0d0      	beq.n	86ea <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    8748:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    874c:	0111      	lsls	r1, r2, #4
    874e:	480c      	ldr	r0, [pc, #48]	; (8780 <mayfly_enqueue+0xa0>)
    8750:	7863      	ldrb	r3, [r4, #1]
    8752:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    8756:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    875a:	4402      	add	r2, r0
		!mayfly_is_enabled(caller_id, callee_id) ||
    875c:	7a91      	ldrb	r1, [r2, #10]
    875e:	7ad2      	ldrb	r2, [r2, #11]
    8760:	4291      	cmp	r1, r2
    8762:	d1c3      	bne.n	86ec <mayfly_enqueue+0xc>
	state = (m->_req - ack) & 0x03;
    8764:	7822      	ldrb	r2, [r4, #0]
    8766:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
    8768:	0792      	lsls	r2, r2, #30
    876a:	d002      	beq.n	8772 <mayfly_enqueue+0x92>
		m->_req = ack + 2;
    876c:	3302      	adds	r3, #2
    876e:	b2db      	uxtb	r3, r3
    8770:	7023      	strb	r3, [r4, #0]
		m->fp(m->param);
    8772:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
    8776:	4798      	blx	r3
		return 0;
    8778:	2000      	movs	r0, #0
}
    877a:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
    877c:	4610      	mov	r0, r2
}
    877e:	bd70      	pop	{r4, r5, r6, pc}
    8780:	20001130 	.word	0x20001130
    8784:	2000112c 	.word	0x2000112c

00008788 <mayfly_run>:
{
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
    8788:	494e      	ldr	r1, [pc, #312]	; (88c4 <mayfly_run+0x13c>)
    878a:	5c0b      	ldrb	r3, [r1, r0]
    878c:	2b00      	cmp	r3, #0
    878e:	f000 8098 	beq.w	88c2 <mayfly_run+0x13a>
{
    8792:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    8796:	4b4c      	ldr	r3, [pc, #304]	; (88c8 <mayfly_run+0x140>)
    8798:	f04f 0b3c 	mov.w	fp, #60	; 0x3c
{
    879c:	b087      	sub	sp, #28
		return;
	}
	mfp[callee_id] = 0U;
    879e:	2200      	movs	r2, #0
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    87a0:	fb0b 3b00 	mla	fp, fp, r0, r3
	mfp[callee_id] = 0U;
    87a4:	540a      	strb	r2, [r1, r0]

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
    87a6:	eb00 0740 	add.w	r7, r0, r0, lsl #1
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    87aa:	f10b 0104 	add.w	r1, fp, #4
	uint8_t enable = 0U;
    87ae:	9203      	str	r2, [sp, #12]
    87b0:	eb03 1707 	add.w	r7, r3, r7, lsl #4
	uint8_t disable = 0U;
    87b4:	9201      	str	r2, [sp, #4]
	while (caller_id--) {
    87b6:	f04f 0903 	mov.w	r9, #3
    87ba:	4688      	mov	r8, r1
    87bc:	9002      	str	r0, [sp, #8]
		memq_link_t *link;
		struct mayfly *m = 0;
    87be:	2300      	movs	r3, #0

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    87c0:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
    87c4:	aa05      	add	r2, sp, #20
		struct mayfly *m = 0;
    87c6:	9305      	str	r3, [sp, #20]
		link = memq_peek(mft[callee_id][caller_id].head,
    87c8:	f7ff ff1e 	bl	8608 <memq_peek>
				 mft[callee_id][caller_id].tail,
				 (void **)&m);
		while (link) {
    87cc:	f107 0624 	add.w	r6, r7, #36	; 0x24
    87d0:	4683      	mov	fp, r0
    87d2:	2800      	cmp	r0, #0
    87d4:	d034      	beq.n	8840 <mayfly_run+0xb8>
#if defined(MAYFLY_UT)
			_state = 0U;
#endif /* MAYFLY_UT */

			/* execute work if ready */
			state = (m->_req - m->_ack) & 0x03;
    87d6:	9c05      	ldr	r4, [sp, #20]
    87d8:	7825      	ldrb	r5, [r4, #0]
    87da:	7863      	ldrb	r3, [r4, #1]
    87dc:	1aed      	subs	r5, r5, r3
    87de:	f005 0503 	and.w	r5, r5, #3
			if (state == 1U) {
    87e2:	2d01      	cmp	r5, #1
    87e4:	d106      	bne.n	87f4 <mayfly_run+0x6c>
#if defined(MAYFLY_UT)
				_state = 1U;
#endif /* MAYFLY_UT */

				/* mark mayfly as ran */
				m->_ack--;
    87e6:	3b01      	subs	r3, #1
    87e8:	7063      	strb	r3, [r4, #1]

				/* call the mayfly function */
				m->fp(m->param);
    87ea:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
    87ee:	4798      	blx	r3
    87f0:	9c05      	ldr	r4, [sp, #20]
    87f2:	7863      	ldrb	r3, [r4, #1]
	req = m->_req;
    87f4:	f894 c000 	ldrb.w	ip, [r4]
    87f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	if (((req - m->_ack) & 0x03) != 1U) {
    87fa:	ebac 0303 	sub.w	r3, ip, r3
    87fe:	f003 0303 	and.w	r3, r3, #3
    8802:	2b01      	cmp	r3, #1
		memq_dequeue(mft[callee_id][caller_id].tail,
    8804:	f04f 0200 	mov.w	r2, #0
    8808:	4631      	mov	r1, r6
	req = m->_req;
    880a:	fa5f fa8c 	uxtb.w	sl, ip
	if (((req - m->_ack) & 0x03) != 1U) {
    880e:	d00d      	beq.n	882c <mayfly_run+0xa4>
		memq_dequeue(mft[callee_id][caller_id].tail,
    8810:	f7ff ff02 	bl	8618 <memq_dequeue>
		ack = m->_ack;
    8814:	7862      	ldrb	r2, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    8816:	7823      	ldrb	r3, [r4, #0]
		m->_link = link;
    8818:	f8c4 b004 	str.w	fp, [r4, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
    881c:	1a9b      	subs	r3, r3, r2
    881e:	f003 0303 	and.w	r3, r3, #3
    8822:	2b01      	cmp	r3, #1
		m->_ack = req;
    8824:	f884 a001 	strb.w	sl, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    8828:	d044      	beq.n	88b4 <mayfly_run+0x12c>
    882a:	6ab8      	ldr	r0, [r7, #40]	; 0x28

			/* dequeue if not re-pended */
			dequeue(callee_id, caller_id, link, m);

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].head,
    882c:	4601      	mov	r1, r0
    882e:	aa05      	add	r2, sp, #20
    8830:	6a78      	ldr	r0, [r7, #36]	; 0x24
    8832:	f7ff fee9 	bl	8608 <memq_peek>
 */
#if defined(CONFIG_BT_MAYFLY_YIELD_AFTER_CALL)
			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1U) {
    8836:	2d01      	cmp	r5, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    8838:	4683      	mov	fp, r0
			if (state == 1U) {
    883a:	d029      	beq.n	8890 <mayfly_run+0x108>
		while (link) {
    883c:	2800      	cmp	r0, #0
    883e:	d1ca      	bne.n	87d6 <mayfly_run+0x4e>
				}
			}
#endif
		}

		if (mft[callee_id][caller_id].disable_req !=
    8840:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    8844:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
    8848:	429a      	cmp	r2, r3
    884a:	d003      	beq.n	8854 <mayfly_run+0xcc>
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1U;

			mft[callee_id][caller_id].disable_ack =
    884c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			disable = 1U;
    8850:	2301      	movs	r3, #1
    8852:	9301      	str	r3, [sp, #4]
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
    8854:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    8858:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
    885c:	429a      	cmp	r2, r3
    885e:	d003      	beq.n	8868 <mayfly_run+0xe0>
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1U;

			mft[callee_id][caller_id].enable_ack =
    8860:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			enable = 1U;
    8864:	2301      	movs	r3, #1
    8866:	9303      	str	r3, [sp, #12]
	while (caller_id--) {
    8868:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    886c:	fa5f f989 	uxtb.w	r9, r9
    8870:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    8874:	f1a7 070c 	sub.w	r7, r7, #12
    8878:	d1a1      	bne.n	87be <mayfly_run+0x36>
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    887a:	e9dd 3a01 	ldrd	r3, sl, [sp, #4]
    887e:	b1b3      	cbz	r3, 88ae <mayfly_run+0x126>
    8880:	9b03      	ldr	r3, [sp, #12]
    8882:	b9a3      	cbnz	r3, 88ae <mayfly_run+0x126>
		mayfly_enable_cb(callee_id, callee_id, 0);
    8884:	461a      	mov	r2, r3
    8886:	4651      	mov	r1, sl
    8888:	4650      	mov	r0, sl
    888a:	f00a febd 	bl	13608 <mayfly_enable_cb>
    888e:	e00e      	b.n	88ae <mayfly_run+0x126>
				if (caller_id || link) {
    8890:	f1b9 0f00 	cmp.w	r9, #0
    8894:	d101      	bne.n	889a <mayfly_run+0x112>
    8896:	2800      	cmp	r0, #0
    8898:	d0d2      	beq.n	8840 <mayfly_run+0xb8>
    889a:	f8dd a008 	ldr.w	sl, [sp, #8]
					mfp[callee_id] = 1U;
    889e:	4a09      	ldr	r2, [pc, #36]	; (88c4 <mayfly_run+0x13c>)
    88a0:	2301      	movs	r3, #1
					mayfly_pend(callee_id, callee_id);
    88a2:	4651      	mov	r1, sl
    88a4:	4650      	mov	r0, sl
					mfp[callee_id] = 1U;
    88a6:	f802 300a 	strb.w	r3, [r2, sl]
					mayfly_pend(callee_id, callee_id);
    88aa:	f00a ff03 	bl	136b4 <mayfly_pend>
	}
}
    88ae:	b007      	add	sp, #28
    88b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			m->_ack = ack;
    88b4:	7062      	strb	r2, [r4, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    88b6:	4621      	mov	r1, r4
    88b8:	4658      	mov	r0, fp
    88ba:	4642      	mov	r2, r8
    88bc:	f7ff fe9c 	bl	85f8 <memq_enqueue>
    88c0:	e7b3      	b.n	882a <mayfly_run+0xa2>
    88c2:	4770      	bx	lr
    88c4:	2000112c 	.word	0x2000112c
    88c8:	20001130 	.word	0x20001130

000088cc <util_ones_count_get>:
 */
uint8_t util_ones_count_get(uint8_t *octets, uint8_t octets_len)
{
	uint8_t one_count = 0U;

	while (octets_len--) {
    88cc:	b1a1      	cbz	r1, 88f8 <util_ones_count_get+0x2c>
    88ce:	1e4b      	subs	r3, r1, #1
    88d0:	b2db      	uxtb	r3, r3
{
    88d2:	b410      	push	{r4}
    88d4:	1e41      	subs	r1, r0, #1
    88d6:	18c4      	adds	r4, r0, r3
	uint8_t one_count = 0U;
    88d8:	2000      	movs	r0, #0
		uint8_t bite;

		bite = *octets;
    88da:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		while (bite) {
    88de:	b13b      	cbz	r3, 88f0 <util_ones_count_get+0x24>
			bite &= (bite - 1);
    88e0:	b25b      	sxtb	r3, r3
    88e2:	1e5a      	subs	r2, r3, #1
    88e4:	4013      	ands	r3, r2
			one_count++;
    88e6:	3001      	adds	r0, #1
		while (bite) {
    88e8:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
			one_count++;
    88ec:	b2c0      	uxtb	r0, r0
		while (bite) {
    88ee:	d1f7      	bne.n	88e0 <util_ones_count_get+0x14>
	while (octets_len--) {
    88f0:	42a1      	cmp	r1, r4
    88f2:	d1f2      	bne.n	88da <util_ones_count_get+0xe>
		}
		octets++;
	}

	return one_count;
}
    88f4:	bc10      	pop	{r4}
    88f6:	4770      	bx	lr
	uint8_t one_count = 0U;
    88f8:	4608      	mov	r0, r1
}
    88fa:	4770      	bx	lr

000088fc <util_aa_le32>:
 * - It shall have at least three ones in the least significant 8 bits.
 * - It shall have no more than eleven transitions in the least significant 16
 *   bits.
 */
int util_aa_le32(uint8_t *dst)
{
    88fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

	/* It shall not be the advertising channel packets Access Address.
	 * It shall not be a sequence that differs from the advertising channel
	 * packets Access Address by only one bit.
	 */
	adv_aa_check = aa ^ PDU_AC_ACCESS_ADDR;
    8900:	4d4f      	ldr	r5, [pc, #316]	; (8a40 <util_aa_le32+0x144>)
{
    8902:	b083      	sub	sp, #12
    8904:	4606      	mov	r6, r0
    8906:	2703      	movs	r7, #3
	consecutive_cnt = 1U;
    8908:	2401      	movs	r4, #1
	lll_csrand_get(dst, sizeof(uint32_t));
    890a:	2104      	movs	r1, #4
    890c:	4630      	mov	r0, r6
    890e:	f008 fea5 	bl	1165c <lll_csrand_get>
	return ((uint16_t)src[1] << 8) | src[0];
    8912:	7873      	ldrb	r3, [r6, #1]
    8914:	78f2      	ldrb	r2, [r6, #3]
    8916:	f896 c002 	ldrb.w	ip, [r6, #2]
    891a:	7830      	ldrb	r0, [r6, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    891c:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
    8920:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
    8924:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
	consecutive_bit = (aa >> bit_idx) & 0x01;
    8928:	231e      	movs	r3, #30
    892a:	ea4f 3cdc 	mov.w	ip, ip, lsr #15
	transitions = 0U;
    892e:	f04f 0e00 	mov.w	lr, #0
	consecutive_cnt = 1U;
    8932:	f04f 0901 	mov.w	r9, #1
    8936:	e00c      	b.n	8952 <util_aa_le32+0x56>
			transitions++;
    8938:	f10e 0101 	add.w	r1, lr, #1
		     (((bit_idx < 29) && (transitions < 1)) ||
    893c:	2b1b      	cmp	r3, #27
			transitions++;
    893e:	b2c9      	uxtb	r1, r1
		     (((bit_idx < 29) && (transitions < 1)) ||
    8940:	d96a      	bls.n	8a18 <util_aa_le32+0x11c>
				consecutive_cnt = 1U;
    8942:	f04f 0901 	mov.w	r9, #1
		if ((transitions > 24) ||
    8946:	2919      	cmp	r1, #25
    8948:	d051      	beq.n	89ee <util_aa_le32+0xf2>
    894a:	468e      	mov	lr, r1
    894c:	4694      	mov	ip, r2
	while (bit_idx--) {
    894e:	3b01      	subs	r3, #1
    8950:	d31e      	bcc.n	8990 <util_aa_le32+0x94>
		bit = (aa >> bit_idx) & 0x01;
    8952:	fa20 f203 	lsr.w	r2, r0, r3
    8956:	f002 0201 	and.w	r2, r2, #1
		if (bit == consecutive_bit) {
    895a:	4594      	cmp	ip, r2
    895c:	d1ec      	bne.n	8938 <util_aa_le32+0x3c>
			consecutive_cnt++;
    895e:	f109 0801 	add.w	r8, r9, #1
    8962:	fa5f f888 	uxtb.w	r8, r8
		if ((consecutive_cnt > 6) ||
    8966:	f1b8 0f06 	cmp.w	r8, #6
    896a:	d90d      	bls.n	8988 <util_aa_le32+0x8c>
    896c:	4671      	mov	r1, lr
			if (consecutive_bit) {
    896e:	fa04 fc03 	lsl.w	ip, r4, r3
    8972:	b3ba      	cbz	r2, 89e4 <util_aa_le32+0xe8>
				aa &= ~BIT(bit_idx);
    8974:	ea20 000c 	bic.w	r0, r0, ip
				consecutive_bit = 0U;
    8978:	f04f 0c00 	mov.w	ip, #0
			if (transitions != transitions_prev) {
    897c:	4571      	cmp	r1, lr
    897e:	d1e6      	bne.n	894e <util_aa_le32+0x52>
				transitions++;
    8980:	3101      	adds	r1, #1
    8982:	b2c9      	uxtb	r1, r1
    8984:	4662      	mov	r2, ip
    8986:	e7dc      	b.n	8942 <util_aa_le32+0x46>
		if ((consecutive_cnt > 6) ||
    8988:	d14c      	bne.n	8a24 <util_aa_le32+0x128>
		     (((bit_idx < 29) && (transitions < 1)) ||
    898a:	46c1      	mov	r9, r8
	while (bit_idx--) {
    898c:	3b01      	subs	r3, #1
    898e:	d2e0      	bcs.n	8952 <util_aa_le32+0x56>
	adv_aa_check = aa ^ PDU_AC_ACCESS_ADDR;
    8990:	ea80 0305 	eor.w	r3, r0, r5
    8994:	9301      	str	r3, [sp, #4]
	while (octets_len--) {
    8996:	f10d 0c04 	add.w	ip, sp, #4
    899a:	f10d 0e08 	add.w	lr, sp, #8
	uint8_t one_count = 0U;
    899e:	2200      	movs	r2, #0
		bite = *octets;
    89a0:	f81c 3b01 	ldrb.w	r3, [ip], #1
		while (bite) {
    89a4:	b13b      	cbz	r3, 89b6 <util_aa_le32+0xba>
			bite &= (bite - 1);
    89a6:	b25b      	sxtb	r3, r3
    89a8:	1e59      	subs	r1, r3, #1
    89aa:	400b      	ands	r3, r1
			one_count++;
    89ac:	3201      	adds	r2, #1
		while (bite) {
    89ae:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
			one_count++;
    89b2:	b2d2      	uxtb	r2, r2
		while (bite) {
    89b4:	d1f7      	bne.n	89a6 <util_aa_le32+0xaa>
	while (octets_len--) {
    89b6:	45e6      	cmp	lr, ip
    89b8:	d1f2      	bne.n	89a0 <util_aa_le32+0xa4>
	if (util_ones_count_get((uint8_t *)&adv_aa_check,
    89ba:	2a01      	cmp	r2, #1
    89bc:	d909      	bls.n	89d2 <util_aa_le32+0xd6>
				sizeof(adv_aa_check)) <= 1) {
		goto again;
	}

	/* It shall not have all four octets equal. */
	if (!((aa & 0xFFFF) ^ (aa >> 16)) &&
    89be:	b283      	uxth	r3, r0
    89c0:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
    89c4:	ea4f 4210 	mov.w	r2, r0, lsr #16
    89c8:	d11b      	bne.n	8a02 <util_aa_le32+0x106>
	    !((aa & 0xFF) ^ (aa >> 24))) {
    89ca:	b2c3      	uxtb	r3, r0
	if (!((aa & 0xFFFF) ^ (aa >> 16)) &&
    89cc:	ebb3 6f10 	cmp.w	r3, r0, lsr #24
    89d0:	d117      	bne.n	8a02 <util_aa_le32+0x106>
	if (!retry) {
    89d2:	3f01      	subs	r7, #1
    89d4:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
    89d8:	d197      	bne.n	890a <util_aa_le32+0xe>
		return -EFAULT;
    89da:	f06f 000d 	mvn.w	r0, #13
	}

	sys_put_le32(aa, dst);

	return 0;
}
    89de:	b003      	add	sp, #12
    89e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				aa |= BIT(bit_idx);
    89e4:	ea40 000c 	orr.w	r0, r0, ip
				consecutive_bit = 1U;
    89e8:	f04f 0c01 	mov.w	ip, #1
    89ec:	e7c6      	b.n	897c <util_aa_le32+0x80>
			if (consecutive_bit) {
    89ee:	3301      	adds	r3, #1
    89f0:	fa04 f303 	lsl.w	r3, r4, r3
    89f4:	b112      	cbz	r2, 89fc <util_aa_le32+0x100>
				aa &= ~(BIT(bit_idx + 1) - 1);
    89f6:	425b      	negs	r3, r3
    89f8:	4018      	ands	r0, r3
    89fa:	e7c9      	b.n	8990 <util_aa_le32+0x94>
				aa |= (BIT(bit_idx + 1) - 1);
    89fc:	3b01      	subs	r3, #1
    89fe:	4318      	orrs	r0, r3
    8a00:	e7c6      	b.n	8990 <util_aa_le32+0x94>
	dst[1] = val >> 8;
    8a02:	f3c0 2107 	ubfx	r1, r0, #8, #8
    8a06:	0a13      	lsrs	r3, r2, #8
	dst[0] = val;
    8a08:	7030      	strb	r0, [r6, #0]
	return 0;
    8a0a:	2000      	movs	r0, #0
	dst[1] = val >> 8;
    8a0c:	7071      	strb	r1, [r6, #1]
	dst[0] = val;
    8a0e:	70b2      	strb	r2, [r6, #2]
	dst[1] = val >> 8;
    8a10:	70f3      	strb	r3, [r6, #3]
}
    8a12:	b003      	add	sp, #12
    8a14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			consecutive_cnt = 1U;
    8a18:	f04f 0801 	mov.w	r8, #1
		      ((bit_idx < 28) && (transitions < 2))))) {
    8a1c:	2901      	cmp	r1, #1
    8a1e:	d9a6      	bls.n	896e <util_aa_le32+0x72>
    8a20:	46c1      	mov	r9, r8
    8a22:	e790      	b.n	8946 <util_aa_le32+0x4a>
		    ((consecutive_cnt < 6) &&
    8a24:	2b1c      	cmp	r3, #28
    8a26:	d904      	bls.n	8a32 <util_aa_le32+0x136>
		     (((bit_idx < 29) && (transitions < 1)) ||
    8a28:	2b1b      	cmp	r3, #27
    8a2a:	d906      	bls.n	8a3a <util_aa_le32+0x13e>
    8a2c:	4694      	mov	ip, r2
    8a2e:	46c1      	mov	r9, r8
    8a30:	e7ac      	b.n	898c <util_aa_le32+0x90>
    8a32:	f1be 0f00 	cmp.w	lr, #0
    8a36:	d099      	beq.n	896c <util_aa_le32+0x70>
    8a38:	e7f6      	b.n	8a28 <util_aa_le32+0x12c>
    8a3a:	4671      	mov	r1, lr
    8a3c:	e7ee      	b.n	8a1c <util_aa_le32+0x120>
    8a3e:	bf00      	nop
    8a40:	8e89bed6 	.word	0x8e89bed6

00008a44 <ticker_worker>:
 *
 * @param param Pointer to ticker instance
 *
 */
void ticker_worker(void *param)
{
    8a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t ticks_expired;
	uint8_t ticker_id_head;

	/* Defer worker if job running */
	instance->worker_trigger = 1U;
	if (instance->job_guard) {
    8a48:	7f82      	ldrb	r2, [r0, #30]
{
    8a4a:	b08f      	sub	sp, #60	; 0x3c
	instance->worker_trigger = 1U;
    8a4c:	2301      	movs	r3, #1
	if (instance->job_guard) {
    8a4e:	9206      	str	r2, [sp, #24]
	instance->worker_trigger = 1U;
    8a50:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    8a52:	2a00      	cmp	r2, #0
    8a54:	d15b      	bne.n	8b0e <ticker_worker+0xca>
		return;
	}

	/* If no tickers queued (active), do nothing */
	if (instance->ticker_id_head == TICKER_NULL) {
    8a56:	7f43      	ldrb	r3, [r0, #29]
    8a58:	2bff      	cmp	r3, #255	; 0xff
    8a5a:	4681      	mov	r9, r0
    8a5c:	d056      	beq.n	8b0c <ticker_worker+0xc8>
		instance->worker_trigger = 0U;
		return;
	}

	/* Get ticks elapsed since last job execution */
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    8a5e:	f00a f907 	bl	12c70 <cntr_cnt_get>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    8a62:	f8d9 2014 	ldr.w	r2, [r9, #20]
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    8a66:	f899 301c 	ldrb.w	r3, [r9, #28]
	ticker_id_head = instance->ticker_id_head;
    8a6a:	f899 601d 	ldrb.w	r6, [r9, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    8a6e:	1a80      	subs	r0, r0, r2
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    8a70:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    8a72:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    8a76:	f000 8140 	beq.w	8cfa <ticker_worker+0x2b6>
		if (instance->ticks_slot_previous > ticks_elapsed) {
    8a7a:	f8d9 3018 	ldr.w	r3, [r9, #24]
	uint8_t slot_reserved = 0;
    8a7e:	42bb      	cmp	r3, r7
    8a80:	bf94      	ite	ls
    8a82:	2300      	movls	r3, #0
    8a84:	2301      	movhi	r3, #1
    8a86:	9303      	str	r3, [sp, #12]
	while (ticker_id_head != TICKER_NULL) {
    8a88:	2eff      	cmp	r6, #255	; 0xff
	node = &instance->nodes[0];
    8a8a:	f8d9 b000 	ldr.w	fp, [r9]
	ticks_expired = 0U;
    8a8e:	f04f 0800 	mov.w	r8, #0
	while (ticker_id_head != TICKER_NULL) {
    8a92:	d046      	beq.n	8b22 <ticker_worker+0xde>
			must_expire_skip = 1U;
    8a94:	46c2      	mov	sl, r8
    8a96:	f8cd 9010 	str.w	r9, [sp, #16]
		ticker = &node[ticker_id_head];
    8a9a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    8a9e:	eb0b 1406 	add.w	r4, fp, r6, lsl #4
    8aa2:	0136      	lsls	r6, r6, #4
		ticks_to_expire = ticker->ticks_to_expire;
    8aa4:	68a1      	ldr	r1, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    8aa6:	42b9      	cmp	r1, r7
    8aa8:	d838      	bhi.n	8b1c <ticker_worker+0xd8>
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    8aaa:	78a2      	ldrb	r2, [r4, #2]
    8aac:	7863      	ldrb	r3, [r4, #1]
		ticker_id_head = ticker->next;
    8aae:	f81b 6006 	ldrb.w	r6, [fp, r6]
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    8ab2:	1a9b      	subs	r3, r3, r2
    8ab4:	b2db      	uxtb	r3, r3
    8ab6:	2b01      	cmp	r3, #1
		ticks_elapsed -= ticks_to_expire;
    8ab8:	eba7 0701 	sub.w	r7, r7, r1
		ticks_expired += ticks_to_expire;
    8abc:	448a      	add	sl, r1
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    8abe:	d12b      	bne.n	8b18 <ticker_worker+0xd4>
		if (ticker->ticks_slot != 0U &&
    8ac0:	69a5      	ldr	r5, [r4, #24]
    8ac2:	2d00      	cmp	r5, #0
    8ac4:	d055      	beq.n	8b72 <ticker_worker+0x12e>
    8ac6:	9b03      	ldr	r3, [sp, #12]
    8ac8:	2b00      	cmp	r3, #0
    8aca:	f000 8092 	beq.w	8bf2 <ticker_worker+0x1ae>
    8ace:	8be3      	ldrh	r3, [r4, #30]
    8ad0:	9305      	str	r3, [sp, #20]
			struct ticker_ext *ext_data = ticker->ext_data;
    8ad2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			if (ext_data &&
    8ad4:	b13b      	cbz	r3, 8ae6 <ticker_worker+0xa2>
    8ad6:	6819      	ldr	r1, [r3, #0]
    8ad8:	b119      	cbz	r1, 8ae2 <ticker_worker+0x9e>
			    ext_data->ticks_slot_window != 0U &&
    8ada:	7a19      	ldrb	r1, [r3, #8]
    8adc:	2900      	cmp	r1, #0
    8ade:	f000 80fa 	beq.w	8cd6 <ticker_worker+0x292>
				ext_data->reschedule_state =
    8ae2:	2100      	movs	r1, #0
    8ae4:	7219      	strb	r1, [r3, #8]
			ticker->lazy_current++;
    8ae6:	9905      	ldr	r1, [sp, #20]
			if ((ticker->must_expire == 0U) ||
    8ae8:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
			ticker->lazy_current++;
    8aec:	3101      	adds	r1, #1
    8aee:	b289      	uxth	r1, r1
    8af0:	83e1      	strh	r1, [r4, #30]
			if ((ticker->must_expire == 0U) ||
    8af2:	b178      	cbz	r0, 8b14 <ticker_worker+0xd0>
    8af4:	8ba0      	ldrh	r0, [r4, #28]
    8af6:	4288      	cmp	r0, r1
    8af8:	d20c      	bcs.n	8b14 <ticker_worker+0xd0>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
    8afa:	2b00      	cmp	r3, #0
    8afc:	f000 8100 	beq.w	8d00 <ticker_worker+0x2bc>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
    8b00:	7a19      	ldrb	r1, [r3, #8]
    8b02:	2901      	cmp	r1, #1
    8b04:	d006      	beq.n	8b14 <ticker_worker+0xd0>
			must_expire_skip = 1U;
    8b06:	f04f 0e01 	mov.w	lr, #1
    8b0a:	e036      	b.n	8b7a <ticker_worker+0x136>
		instance->worker_trigger = 0U;
    8b0c:	77c2      	strb	r2, [r0, #31]
}
    8b0e:	b00f      	add	sp, #60	; 0x3c
    8b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ticker->ack--;
    8b14:	3a01      	subs	r2, #1
    8b16:	70a2      	strb	r2, [r4, #2]
	while (ticker_id_head != TICKER_NULL) {
    8b18:	2eff      	cmp	r6, #255	; 0xff
    8b1a:	d1be      	bne.n	8a9a <ticker_worker+0x56>
    8b1c:	f8dd 9010 	ldr.w	r9, [sp, #16]
    8b20:	46d0      	mov	r8, sl
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    8b22:	f899 300b 	ldrb.w	r3, [r9, #11]
    8b26:	f899 200a 	ldrb.w	r2, [r9, #10]
    8b2a:	429a      	cmp	r2, r3
    8b2c:	d10a      	bne.n	8b44 <ticker_worker+0x100>
	uint8_t idx = *ticks_elapsed_index + 1;
    8b2e:	3201      	adds	r2, #1
    8b30:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
    8b32:	2a02      	cmp	r2, #2
    8b34:	bf1c      	itt	ne
    8b36:	4613      	movne	r3, r2
    8b38:	9306      	strne	r3, [sp, #24]
	*ticks_elapsed_index = idx;
    8b3a:	9a06      	ldr	r2, [sp, #24]
    8b3c:	f889 200b 	strb.w	r2, [r9, #11]
    8b40:	bf08      	it	eq
    8b42:	2300      	moveq	r3, #0
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    8b44:	eb09 0383 	add.w	r3, r9, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    8b48:	f8d9 4024 	ldr.w	r4, [r9, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    8b4c:	f8c3 800c 	str.w	r8, [r3, #12]
	instance->worker_trigger = 0U;
    8b50:	2200      	movs	r2, #0
    8b52:	f889 201f 	strb.w	r2, [r9, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    8b56:	464b      	mov	r3, r9
    8b58:	2201      	movs	r2, #1
    8b5a:	2104      	movs	r1, #4
    8b5c:	2003      	movs	r0, #3
    8b5e:	46a4      	mov	ip, r4
}
    8b60:	b00f      	add	sp, #60	; 0x3c
    8b62:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    8b66:	4760      	bx	ip
    8b68:	e9dd 7a0b 	ldrd	r7, sl, [sp, #44]	; 0x2c
    8b6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8b6e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    8b70:	4644      	mov	r4, r8
		if (ticker->ext_data) {
    8b72:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    8b74:	b1f3      	cbz	r3, 8bb4 <ticker_worker+0x170>
    8b76:	f04f 0e00 	mov.w	lr, #0
			ticker->ext_data->ticks_drift = 0U;
    8b7a:	2100      	movs	r1, #0
			ticker->ext_data->reschedule_state =
    8b7c:	7219      	strb	r1, [r3, #8]
		if (ticker->timeout_func) {
    8b7e:	68e5      	ldr	r5, [r4, #12]
			ticker->ext_data->ticks_drift = 0U;
    8b80:	6059      	str	r1, [r3, #4]
		ticker->ack--;
    8b82:	3a01      	subs	r2, #1
    8b84:	70a2      	strb	r2, [r4, #2]
		if (ticker->timeout_func) {
    8b86:	2d00      	cmp	r5, #0
    8b88:	d0c6      	beq.n	8b18 <ticker_worker+0xd4>
					   ticks_expired -
    8b8a:	9b04      	ldr	r3, [sp, #16]
    8b8c:	6962      	ldr	r2, [r4, #20]
    8b8e:	6958      	ldr	r0, [r3, #20]
			ticker->timeout_func(ticks_at_expire,
    8b90:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8b92:	f894 c003 	ldrb.w	ip, [r4, #3]
    8b96:	6923      	ldr	r3, [r4, #16]
					   ticks_expired -
    8b98:	ebaa 0202 	sub.w	r2, sl, r2
    8b9c:	4410      	add	r0, r2
			ticks_at_expire = (instance->ticks_current +
    8b9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
    8ba2:	f1be 0f00 	cmp.w	lr, #0
    8ba6:	d016      	beq.n	8bd6 <ticker_worker+0x192>
    8ba8:	9300      	str	r3, [sp, #0]
    8baa:	f64f 72ff 	movw	r2, #65535	; 0xffff
    8bae:	4663      	mov	r3, ip
    8bb0:	47a8      	blx	r5
			if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    8bb2:	e7b1      	b.n	8b18 <ticker_worker+0xd4>
		if (ticker->timeout_func) {
    8bb4:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
    8bb6:	3a01      	subs	r2, #1
    8bb8:	70a2      	strb	r2, [r4, #2]
		if (ticker->timeout_func) {
    8bba:	2d00      	cmp	r5, #0
    8bbc:	d0ac      	beq.n	8b18 <ticker_worker+0xd4>
					   ticks_expired -
    8bbe:	9b04      	ldr	r3, [sp, #16]
    8bc0:	6962      	ldr	r2, [r4, #20]
    8bc2:	6958      	ldr	r0, [r3, #20]
			ticker->timeout_func(ticks_at_expire,
    8bc4:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8bc6:	f894 c003 	ldrb.w	ip, [r4, #3]
    8bca:	6923      	ldr	r3, [r4, #16]
					   ticks_expired -
    8bcc:	ebaa 0202 	sub.w	r2, sl, r2
    8bd0:	4410      	add	r0, r2
			ticks_at_expire = (instance->ticks_current +
    8bd2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
    8bd6:	8be2      	ldrh	r2, [r4, #30]
    8bd8:	9300      	str	r3, [sp, #0]
    8bda:	4663      	mov	r3, ip
    8bdc:	47a8      	blx	r5
				if (ticker->ticks_slot != 0U) {
    8bde:	69a2      	ldr	r2, [r4, #24]
				ticker->lazy_current = 0U;
    8be0:	2300      	movs	r3, #0
					slot_reserved = 1U;
    8be2:	429a      	cmp	r2, r3
    8be4:	9a03      	ldr	r2, [sp, #12]
				ticker->lazy_current = 0U;
    8be6:	83e3      	strh	r3, [r4, #30]
					slot_reserved = 1U;
    8be8:	bf18      	it	ne
    8bea:	2201      	movne	r2, #1
    8bec:	9203      	str	r2, [sp, #12]
				ticker->force = 0U;
    8bee:	70e3      	strb	r3, [r4, #3]
				if (ticker->ticks_slot != 0U) {
    8bf0:	e792      	b.n	8b18 <ticker_worker+0xd4>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
    8bf2:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
    8bf6:	9307      	str	r3, [sp, #28]
    8bf8:	3380      	adds	r3, #128	; 0x80
    8bfa:	d0ba      	beq.n	8b72 <ticker_worker+0x12e>
    8bfc:	2eff      	cmp	r6, #255	; 0xff
    8bfe:	d0b8      	beq.n	8b72 <ticker_worker+0x12e>
		int32_t lazy_current = ticker->lazy_current;
    8c00:	8be3      	ldrh	r3, [r4, #30]
		if (lazy_current >= ticker->lazy_periodic) {
    8c02:	f8b4 c01c 	ldrh.w	ip, [r4, #28]
		uint32_t current_age = ticker->ticks_periodic +
    8c06:	6861      	ldr	r1, [r4, #4]
				(lazy_current - ticker->priority);
    8c08:	9807      	ldr	r0, [sp, #28]
		int32_t lazy_current = ticker->lazy_current;
    8c0a:	9305      	str	r3, [sp, #20]
		if (lazy_current >= ticker->lazy_periodic) {
    8c0c:	4563      	cmp	r3, ip
			lazy_current -= ticker->lazy_periodic;
    8c0e:	bf28      	it	cs
    8c10:	eba3 030c 	subcs.w	r3, r3, ip
				(lazy_current - ticker->priority);
    8c14:	1a18      	subs	r0, r3, r0
		uint32_t current_age = ticker->ticks_periodic +
    8c16:	fb03 1301 	mla	r3, r3, r1, r1
    8c1a:	9308      	str	r3, [sp, #32]
		uint32_t acc_ticks_to_expire = 0U;
    8c1c:	e9cd 7a0b 	strd	r7, sl, [sp, #44]	; 0x2c
				(lazy_current - ticker->priority);
    8c20:	9009      	str	r0, [sp, #36]	; 0x24
		uint32_t current_age = ticker->ticks_periodic +
    8c22:	4633      	mov	r3, r6
		uint32_t acc_ticks_to_expire = 0U;
    8c24:	f04f 0c00 	mov.w	ip, #0
    8c28:	920a      	str	r2, [sp, #40]	; 0x28
    8c2a:	46a0      	mov	r8, r4
    8c2c:	960d      	str	r6, [sp, #52]	; 0x34
    8c2e:	9102      	str	r1, [sp, #8]
    8c30:	e02c      	b.n	8c8c <ticker_worker+0x248>
				(ticker->ticks_periodic == 0U) ||
    8c32:	9c02      	ldr	r4, [sp, #8]
					  0U :
    8c34:	eba9 0e0e 	sub.w	lr, r9, lr
				(ticker->ticks_periodic == 0U) ||
    8c38:	2c00      	cmp	r4, #0
    8c3a:	d047      	beq.n	8ccc <ticker_worker+0x288>
    8c3c:	9c08      	ldr	r4, [sp, #32]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
    8c3e:	fb09 ee06 	mla	lr, r9, r6, lr
				(ticker->ticks_periodic == 0U) ||
    8c42:	4574      	cmp	r4, lr
    8c44:	bf8c      	ite	hi
    8c46:	f04f 0e01 	movhi.w	lr, #1
    8c4a:	f04f 0e00 	movls.w	lr, #0
					(ticker->ticks_periodic != 0U) &&
    8c4e:	bf34      	ite	cc
    8c50:	f04f 0901 	movcc.w	r9, #1
    8c54:	f04f 0900 	movcs.w	r9, #0
			if (!lazy_next_periodic_skip &&
    8c58:	4281      	cmp	r1, r0
			uint8_t next_force = (ticker_next->force > ticker->force);
    8c5a:	f892 a003 	ldrb.w	sl, [r2, #3]
    8c5e:	f898 2003 	ldrb.w	r2, [r8, #3]
			if (!lazy_next_periodic_skip &&
    8c62:	d30e      	bcc.n	8c82 <ticker_worker+0x23e>
    8c64:	4592      	cmp	sl, r2
    8c66:	d842      	bhi.n	8cee <ticker_worker+0x2aa>
			    (next_force ||
    8c68:	f117 0f80 	cmn.w	r7, #128	; 0x80
    8c6c:	d03f      	beq.n	8cee <ticker_worker+0x2aa>
			     next_is_critical ||
    8c6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
				(lazy_next - ticker_next->priority) >
    8c70:	1bf6      	subs	r6, r6, r7
			     next_is_critical ||
    8c72:	4296      	cmp	r6, r2
    8c74:	dd02      	ble.n	8c7c <ticker_worker+0x238>
			     (next_has_priority && !current_is_older) ||
    8c76:	f1be 0f00 	cmp.w	lr, #0
    8c7a:	d038      	beq.n	8cee <ticker_worker+0x2aa>
    8c7c:	9a07      	ldr	r2, [sp, #28]
    8c7e:	42ba      	cmp	r2, r7
    8c80:	d032      	beq.n	8ce8 <ticker_worker+0x2a4>
			id_head = ticker_next->next;
    8c82:	f81b 3003 	ldrb.w	r3, [fp, r3]
		while (id_head != TICKER_NULL) {
    8c86:	2bff      	cmp	r3, #255	; 0xff
    8c88:	f43f af6e 	beq.w	8b68 <ticker_worker+0x124>
			struct ticker_node *ticker_next = &nodes[id_head];
    8c8c:	b21b      	sxth	r3, r3
    8c8e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    8c92:	eb0b 1203 	add.w	r2, fp, r3, lsl #4
    8c96:	011b      	lsls	r3, r3, #4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
    8c98:	f8d2 e008 	ldr.w	lr, [r2, #8]
    8c9c:	44f4      	add	ip, lr
			if (acc_ticks_to_expire > ticker->ticks_slot) {
    8c9e:	4565      	cmp	r5, ip
    8ca0:	f4ff af62 	bcc.w	8b68 <ticker_worker+0x124>
			if (ticker_next->ticks_slot == 0U) {
    8ca4:	6991      	ldr	r1, [r2, #24]
    8ca6:	2900      	cmp	r1, #0
    8ca8:	d0eb      	beq.n	8c82 <ticker_worker+0x23e>
			int32_t lazy_next = ticker_next->lazy_current;
    8caa:	8bd1      	ldrh	r1, [r2, #30]
				ticker_next->lazy_periodic > lazy_next;
    8cac:	8b90      	ldrh	r0, [r2, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
    8cae:	f8d2 9004 	ldr.w	r9, [r2, #4]
				ticker_next->priority;
    8cb2:	f992 702d 	ldrsb.w	r7, [r2, #45]	; 0x2d
			if (!lazy_next_periodic_skip) {
    8cb6:	4281      	cmp	r1, r0
			int32_t lazy_next = ticker_next->lazy_current;
    8cb8:	460e      	mov	r6, r1
				lazy_next -= ticker_next->lazy_periodic;
    8cba:	bf28      	it	cs
    8cbc:	1a0e      	subcs	r6, r1, r0
					  0U :
    8cbe:	f1b9 0f00 	cmp.w	r9, #0
    8cc2:	d1b6      	bne.n	8c32 <ticker_worker+0x1ee>
				(ticker->ticks_periodic == 0U) ||
    8cc4:	9c02      	ldr	r4, [sp, #8]
					  0U :
    8cc6:	46ce      	mov	lr, r9
				(ticker->ticks_periodic == 0U) ||
    8cc8:	2c00      	cmp	r4, #0
    8cca:	d1b7      	bne.n	8c3c <ticker_worker+0x1f8>
					(ticker->ticks_periodic != 0U) &&
    8ccc:	f8dd 9008 	ldr.w	r9, [sp, #8]
				(ticker->ticks_periodic == 0U) ||
    8cd0:	f04f 0e01 	mov.w	lr, #1
    8cd4:	e7c0      	b.n	8c58 <ticker_worker+0x214>
			    TICKER_RESCHEDULE_STATE_NONE &&
    8cd6:	8ba1      	ldrh	r1, [r4, #28]
    8cd8:	9805      	ldr	r0, [sp, #20]
    8cda:	4281      	cmp	r1, r0
    8cdc:	f63f af01 	bhi.w	8ae2 <ticker_worker+0x9e>
				ext_data->reschedule_state =
    8ce0:	f04f 0101 	mov.w	r1, #1
    8ce4:	7219      	strb	r1, [r3, #8]
    8ce6:	e6fe      	b.n	8ae6 <ticker_worker+0xa2>
			     (equal_priority && next_is_older))) {
    8ce8:	f1b9 0f00 	cmp.w	r9, #0
    8cec:	d0c9      	beq.n	8c82 <ticker_worker+0x23e>
    8cee:	e9dd 7a0b 	ldrd	r7, sl, [sp, #44]	; 0x2c
    8cf2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8cf4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    8cf6:	4644      	mov	r4, r8
    8cf8:	e6eb      	b.n	8ad2 <ticker_worker+0x8e>
	uint8_t slot_reserved = 0;
    8cfa:	9b06      	ldr	r3, [sp, #24]
    8cfc:	9303      	str	r3, [sp, #12]
    8cfe:	e6c3      	b.n	8a88 <ticker_worker+0x44>
		if (ticker->timeout_func) {
    8d00:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
    8d02:	3a01      	subs	r2, #1
    8d04:	70a2      	strb	r2, [r4, #2]
		if (ticker->timeout_func) {
    8d06:	2d00      	cmp	r5, #0
    8d08:	f43f af06 	beq.w	8b18 <ticker_worker+0xd4>
					   ticks_expired -
    8d0c:	9b04      	ldr	r3, [sp, #16]
    8d0e:	6960      	ldr	r0, [r4, #20]
    8d10:	695a      	ldr	r2, [r3, #20]
			ticker->timeout_func(ticks_at_expire,
    8d12:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8d14:	f894 c003 	ldrb.w	ip, [r4, #3]
    8d18:	6923      	ldr	r3, [r4, #16]
					   ticks_expired -
    8d1a:	ebaa 0000 	sub.w	r0, sl, r0
    8d1e:	4410      	add	r0, r2
			ticks_at_expire = (instance->ticks_current +
    8d20:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
    8d24:	e740      	b.n	8ba8 <ticker_worker+0x164>
    8d26:	bf00      	nop

00008d28 <ticker_job>:
	if (instance->worker_trigger) {
    8d28:	7fc3      	ldrb	r3, [r0, #31]
    8d2a:	2b00      	cmp	r3, #0
    8d2c:	f040 86c9 	bne.w	9ac2 <ticker_job+0xd9a>
{
    8d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
    8d34:	7f82      	ldrb	r2, [r0, #30]
{
    8d36:	b08f      	sub	sp, #60	; 0x3c
    8d38:	4683      	mov	fp, r0
	if (instance->job_guard) {
    8d3a:	2a00      	cmp	r2, #0
    8d3c:	f040 80a5 	bne.w	8e8a <ticker_job+0x162>
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    8d40:	7a82      	ldrb	r2, [r0, #10]
    8d42:	7ac1      	ldrb	r1, [r0, #11]
	ticks_previous = instance->ticks_current;
    8d44:	6940      	ldr	r0, [r0, #20]
    8d46:	9007      	str	r0, [sp, #28]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    8d48:	4291      	cmp	r1, r2
	instance->job_guard = 1U;
    8d4a:	f04f 0001 	mov.w	r0, #1
    8d4e:	f88b 001e 	strb.w	r0, [fp, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    8d52:	f000 86e0 	beq.w	9b16 <ticker_job+0xdee>
	uint8_t idx = *ticks_elapsed_index + 1;
    8d56:	4402      	add	r2, r0
    8d58:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
    8d5a:	2a02      	cmp	r2, #2
    8d5c:	bf12      	itee	ne
    8d5e:	4611      	movne	r1, r2
    8d60:	4619      	moveq	r1, r3
		idx = 0U;
    8d62:	461a      	moveq	r2, r3
		ticks_elapsed =
    8d64:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
	*ticks_elapsed_index = idx;
    8d68:	f88b 200a 	strb.w	r2, [fp, #10]
		ticks_elapsed =
    8d6c:	68ca      	ldr	r2, [r1, #12]
		instance->ticks_current += ticks_elapsed;
    8d6e:	9907      	ldr	r1, [sp, #28]
		ticks_elapsed =
    8d70:	9202      	str	r2, [sp, #8]
		instance->ticks_current += ticks_elapsed;
    8d72:	188a      	adds	r2, r1, r2
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
    8d74:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    8d78:	f8cb 2014 	str.w	r2, [fp, #20]
		flag_elapsed = 1U;
    8d7c:	2201      	movs	r2, #1
    8d7e:	920d      	str	r2, [sp, #52]	; 0x34
	count_user = instance->count_user;
    8d80:	f89b 2009 	ldrb.w	r2, [fp, #9]
	ticker_id_old_head = instance->ticker_id_head;
    8d84:	f89b 101d 	ldrb.w	r1, [fp, #29]
    8d88:	910a      	str	r1, [sp, #40]	; 0x28
	node = &instance->nodes[0];
    8d8a:	f8db 1000 	ldr.w	r1, [fp]
	users = &instance->users[0];
    8d8e:	f8db 0004 	ldr.w	r0, [fp, #4]
	count_user = instance->count_user;
    8d92:	9206      	str	r2, [sp, #24]
	node = &instance->nodes[0];
    8d94:	9104      	str	r1, [sp, #16]
	while (count_user--) {
    8d96:	4611      	mov	r1, r2
    8d98:	3a01      	subs	r2, #1
	users = &instance->users[0];
    8d9a:	900b      	str	r0, [sp, #44]	; 0x2c
	while (count_user--) {
    8d9c:	b2d2      	uxtb	r2, r2
    8d9e:	2900      	cmp	r1, #0
    8da0:	f000 8292 	beq.w	92c8 <ticker_job+0x5a0>
	pending = 0U;
    8da4:	2300      	movs	r3, #0
    8da6:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
    8daa:	9309      	str	r3, [sp, #36]	; 0x24
	insert_head = TICKER_NULL;
    8dac:	23ff      	movs	r3, #255	; 0xff
    8dae:	9301      	str	r3, [sp, #4]
    8db0:	4637      	mov	r7, r6
    8db2:	46d9      	mov	r9, fp
		user_ops = &user->user_op[0];
    8db4:	687b      	ldr	r3, [r7, #4]
    8db6:	9305      	str	r3, [sp, #20]
		while (user->middle != user->last) {
    8db8:	f897 c003 	ldrb.w	ip, [r7, #3]
    8dbc:	78bb      	ldrb	r3, [r7, #2]
    8dbe:	46ba      	mov	sl, r7
    8dc0:	9905      	ldr	r1, [sp, #20]
					ticks_used = 0;
    8dc2:	4698      	mov	r8, r3
			user_op = &user_ops[user->middle];
    8dc4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    8dc8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
			middle = user->middle + 1;
    8dcc:	1c58      	adds	r0, r3, #1
		while (user->middle != user->last) {
    8dce:	4563      	cmp	r3, ip
			user_op = &user_ops[user->middle];
    8dd0:	eb01 0582 	add.w	r5, r1, r2, lsl #2
			middle = user->middle + 1;
    8dd4:	b2c3      	uxtb	r3, r0
		while (user->middle != user->last) {
    8dd6:	f000 815f 	beq.w	9098 <ticker_job+0x370>
			if (middle == user->count_user_op) {
    8dda:	f89a 0000 	ldrb.w	r0, [sl]
				middle = 0U;
    8dde:	4298      	cmp	r0, r3
    8de0:	bf08      	it	eq
    8de2:	2300      	moveq	r3, #0
			user->middle = middle;
    8de4:	f88a 3002 	strb.w	r3, [sl, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    8de8:	f811 2022 	ldrb.w	r2, [r1, r2, lsl #2]
    8dec:	2a04      	cmp	r2, #4
    8dee:	f240 8151 	bls.w	9094 <ticker_job+0x36c>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    8df2:	2a07      	cmp	r2, #7
    8df4:	f200 813f 	bhi.w	9076 <ticker_job+0x34e>
			ticker = &node[user_op->id];
    8df8:	7869      	ldrb	r1, [r5, #1]
    8dfa:	9c04      	ldr	r4, [sp, #16]
    8dfc:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    8e00:	eb04 1400 	add.w	r4, r4, r0, lsl #4
    8e04:	0100      	lsls	r0, r0, #4
			state = (ticker->req - ticker->ack) & 0xff;
    8e06:	78a7      	ldrb	r7, [r4, #2]
			ticker = &node[user_op->id];
    8e08:	9006      	str	r0, [sp, #24]
			state = (ticker->req - ticker->ack) & 0xff;
    8e0a:	7860      	ldrb	r0, [r4, #1]
    8e0c:	1bc0      	subs	r0, r0, r7
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    8e0e:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    8e12:	f000 8130 	beq.w	9076 <ticker_job+0x34e>
			    (state == 0U) ||
    8e16:	2a05      	cmp	r2, #5
    8e18:	f000 8118 	beq.w	904c <ticker_job+0x324>
			if (state == 1U) {
    8e1c:	2801      	cmp	r0, #1
    8e1e:	f040 814f 	bne.w	90c0 <ticker_job+0x398>
	previous = instance->ticker_id_head;
    8e22:	f899 c01d 	ldrb.w	ip, [r9, #29]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    8e26:	f8d9 6000 	ldr.w	r6, [r9]
	while (current != TICKER_NULL) {
    8e2a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    8e2e:	d016      	beq.n	8e5e <ticker_job+0x136>
		ticker_current = &node[current];
    8e30:	eb0c 004c 	add.w	r0, ip, ip, lsl #1
		if (current == id) {
    8e34:	4561      	cmp	r1, ip
		ticker_current = &node[current];
    8e36:	eb06 1000 	add.w	r0, r6, r0, lsl #4
		if (current == id) {
    8e3a:	d064      	beq.n	8f06 <ticker_job+0x1de>
	total = 0U;
    8e3c:	2300      	movs	r3, #0
    8e3e:	e001      	b.n	8e44 <ticker_job+0x11c>
		if (current == id) {
    8e40:	4561      	cmp	r1, ip
    8e42:	d045      	beq.n	8ed0 <ticker_job+0x1a8>
		total += ticker_current->ticks_to_expire;
    8e44:	46e6      	mov	lr, ip
		current = ticker_current->next;
    8e46:	f890 c000 	ldrb.w	ip, [r0]
		total += ticker_current->ticks_to_expire;
    8e4a:	f8d0 8008 	ldr.w	r8, [r0, #8]
	while (current != TICKER_NULL) {
    8e4e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
		ticker_current = &node[current];
    8e52:	eb0c 004c 	add.w	r0, ip, ip, lsl #1
		total += ticker_current->ticks_to_expire;
    8e56:	4443      	add	r3, r8
		ticker_current = &node[current];
    8e58:	eb06 1000 	add.w	r0, r6, r0, lsl #4
	while (current != TICKER_NULL) {
    8e5c:	d1f0      	bne.n	8e40 <ticker_job+0x118>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    8e5e:	2600      	movs	r6, #0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    8e60:	2a05      	cmp	r2, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    8e62:	60a6      	str	r6, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    8e64:	f000 80e0 	beq.w	9028 <ticker_job+0x300>
		ticker->req = ticker->ack;
    8e68:	7067      	strb	r7, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    8e6a:	f899 301c 	ldrb.w	r3, [r9, #28]
    8e6e:	428b      	cmp	r3, r1
    8e70:	d016      	beq.n	8ea0 <ticker_job+0x178>
	if (user_op->fp_op_func) {
    8e72:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    8e74:	2000      	movs	r0, #0
    8e76:	7028      	strb	r0, [r5, #0]
	user_op->status = status;
    8e78:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    8e7a:	b10b      	cbz	r3, 8e80 <ticker_job+0x158>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    8e7c:	6b29      	ldr	r1, [r5, #48]	; 0x30
    8e7e:	4798      	blx	r3
    8e80:	f89a c003 	ldrb.w	ip, [sl, #3]
    8e84:	f89a 3002 	ldrb.w	r3, [sl, #2]
    8e88:	e79a      	b.n	8dc0 <ticker_job+0x98>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_JOB, 1,
    8e8a:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    8e8e:	2104      	movs	r1, #4
    8e90:	4608      	mov	r0, r1
    8e92:	465b      	mov	r3, fp
    8e94:	2201      	movs	r2, #1
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    8e96:	46a4      	mov	ip, r4
}
    8e98:	b00f      	add	sp, #60	; 0x3c
    8e9a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    8e9e:	4760      	bx	ip
			instance->ticker_id_slot_previous = TICKER_NULL;
    8ea0:	23ff      	movs	r3, #255	; 0xff
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
    8ea2:	2a07      	cmp	r2, #7
			instance->ticker_id_slot_previous = TICKER_NULL;
    8ea4:	f889 301c 	strb.w	r3, [r9, #28]
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
    8ea8:	f040 8107 	bne.w	90ba <ticker_job+0x392>
				ticks_at_stop =
    8eac:	6868      	ldr	r0, [r5, #4]
			ticks_current = instance->ticks_current;
    8eae:	f8d9 2014 	ldr.w	r2, [r9, #20]
			if (!((ticks_at_stop - ticks_current) &
    8eb2:	1a83      	subs	r3, r0, r2
    8eb4:	021c      	lsls	r4, r3, #8
    8eb6:	f100 80f7 	bmi.w	90a8 <ticker_job+0x380>
				ticks_used = ticks_elapsed +
    8eba:	9a02      	ldr	r2, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    8ebc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
    8ec0:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
    8ec2:	f8d9 2018 	ldr.w	r2, [r9, #24]
    8ec6:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
    8ec8:	bf88      	it	hi
    8eca:	f8c9 3018 	strhi.w	r3, [r9, #24]
    8ece:	e7d0      	b.n	8e72 <ticker_job+0x14a>
	if (previous == current) {
    8ed0:	eb0e 074e 	add.w	r7, lr, lr, lsl #1
    8ed4:	4571      	cmp	r1, lr
    8ed6:	eb06 1707 	add.w	r7, r6, r7, lsl #4
    8eda:	d016      	beq.n	8f0a <ticker_job+0x1e2>
	node[previous].next = ticker_current->next;
    8edc:	7801      	ldrb	r1, [r0, #0]
	timeout = ticker_current->ticks_to_expire;
    8ede:	f8d0 c008 	ldr.w	ip, [r0, #8]
	node[previous].next = ticker_current->next;
    8ee2:	7039      	strb	r1, [r7, #0]
	if (ticker_current->next != TICKER_NULL) {
    8ee4:	29ff      	cmp	r1, #255	; 0xff
    8ee6:	d006      	beq.n	8ef6 <ticker_job+0x1ce>
		node[ticker_current->next].ticks_to_expire += timeout;
    8ee8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    8eec:	eb06 1101 	add.w	r1, r6, r1, lsl #4
    8ef0:	6888      	ldr	r0, [r1, #8]
    8ef2:	4460      	add	r0, ip
    8ef4:	6088      	str	r0, [r1, #8]
	return (total + timeout);
    8ef6:	eb0c 0603 	add.w	r6, ip, r3
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    8efa:	2a05      	cmp	r2, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    8efc:	60a6      	str	r6, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    8efe:	d009      	beq.n	8f14 <ticker_job+0x1ec>
    8f00:	78a7      	ldrb	r7, [r4, #2]
    8f02:	7869      	ldrb	r1, [r5, #1]
    8f04:	e7b0      	b.n	8e68 <ticker_job+0x140>
		if (current == id) {
    8f06:	4607      	mov	r7, r0
	total = 0U;
    8f08:	2300      	movs	r3, #0
		instance->ticker_id_head = ticker_current->next;
    8f0a:	7802      	ldrb	r2, [r0, #0]
    8f0c:	f889 201d 	strb.w	r2, [r9, #29]
    8f10:	782a      	ldrb	r2, [r5, #0]
    8f12:	e7e3      	b.n	8edc <ticker_job+0x1b4>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    8f14:	f8d9 7014 	ldr.w	r7, [r9, #20]
    8f18:	9703      	str	r7, [sp, #12]
	ticks_now = cntr_cnt_get();
    8f1a:	f009 fea9 	bl	12c70 <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    8f1e:	9b02      	ldr	r3, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    8f20:	eba0 0c07 	sub.w	ip, r0, r7
    8f24:	f02c 477f 	bic.w	r7, ip, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    8f28:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_elapsed) {
    8f2a:	429e      	cmp	r6, r3
	ticks_now = cntr_cnt_get();
    8f2c:	4680      	mov	r8, r0
	if (ticks_to_expire > ticks_elapsed) {
    8f2e:	f240 8087 	bls.w	9040 <ticker_job+0x318>
		ticks_to_expire -= ticks_elapsed;
    8f32:	6962      	ldr	r2, [r4, #20]
    8f34:	1af3      	subs	r3, r6, r3
	if ((ticker->ticks_periodic != 0U) &&
    8f36:	6866      	ldr	r6, [r4, #4]
    8f38:	2e00      	cmp	r6, #0
    8f3a:	d032      	beq.n	8fa2 <ticker_job+0x27a>
	    (user_op->params.update.lazy != 0U)) {
    8f3c:	8aa8      	ldrh	r0, [r5, #20]
	if ((ticker->ticks_periodic != 0U) &&
    8f3e:	b380      	cbz	r0, 8fa2 <ticker_job+0x27a>
		user_op->params.update.lazy--;
    8f40:	3801      	subs	r0, #1
    8f42:	b280      	uxth	r0, r0
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    8f44:	429e      	cmp	r6, r3
    8f46:	f8b4 b01e 	ldrh.w	fp, [r4, #30]
		user_op->params.update.lazy--;
    8f4a:	82a8      	strh	r0, [r5, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    8f4c:	f080 8197 	bcs.w	927e <ticker_job+0x556>
    8f50:	1c71      	adds	r1, r6, #1
    8f52:	9108      	str	r1, [sp, #32]
    8f54:	920c      	str	r2, [sp, #48]	; 0x30
    8f56:	4659      	mov	r1, fp
    8f58:	e013      	b.n	8f82 <ticker_job+0x25a>
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
    8f5a:	f100 70e8 	add.w	r0, r0, #30408704	; 0x1d00000
    8f5e:	f500 30d4 	add.w	r0, r0, #108544	; 0x1a800
    8f62:	f8dd e020 	ldr.w	lr, [sp, #32]
    8f66:	f500 70a5 	add.w	r0, r0, #330	; 0x14a
			ticker->lazy_current--;
    8f6a:	3901      	subs	r1, #1
			ticks_to_expire -= ticker->ticks_periodic +
    8f6c:	eba3 030e 	sub.w	r3, r3, lr
			ticker->lazy_current--;
    8f70:	b289      	uxth	r1, r1
	ticker->remainder_current -= ticker->remainder_periodic;
    8f72:	eba0 000b 	sub.w	r0, r0, fp
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    8f76:	429e      	cmp	r6, r3
			ticker->lazy_current--;
    8f78:	83e1      	strh	r1, [r4, #30]
	ticker->remainder_current -= ticker->remainder_periodic;
    8f7a:	6260      	str	r0, [r4, #36]	; 0x24
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    8f7c:	f080 817c 	bcs.w	9278 <ticker_job+0x550>
    8f80:	8aa8      	ldrh	r0, [r5, #20]
    8f82:	4288      	cmp	r0, r1
    8f84:	f080 8329 	bcs.w	95da <ticker_job+0x8b2>
					   ticker_remainder_dec(ticker);
    8f88:	e9d4 b008 	ldrd	fp, r0, [r4, #32]
	if ((ticker->remainder_current >= BIT(31)) ||
    8f8c:	f8df e1dc 	ldr.w	lr, [pc, #476]	; 916c <ticker_job+0x444>
    8f90:	4a75      	ldr	r2, [pc, #468]	; (9168 <ticker_job+0x440>)
    8f92:	4486      	add	lr, r0
    8f94:	4596      	cmp	lr, r2
    8f96:	d8e0      	bhi.n	8f5a <ticker_job+0x232>
    8f98:	46b6      	mov	lr, r6
    8f9a:	e7e6      	b.n	8f6a <ticker_job+0x242>
    8f9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8f9e:	83e1      	strh	r1, [r4, #30]
		ticker->lazy_periodic = user_op->params.update.lazy;
    8fa0:	83a0      	strh	r0, [r4, #28]
				user_op->params.update.ticks_drift_minus;
    8fa2:	e9d5 0e01 	ldrd	r0, lr, [r5, #4]
	struct ticker_ext *ext_data = ticker->ext_data;
    8fa6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
	ticker->ticks_to_expire = ticks_to_expire +
    8fa8:	4403      	add	r3, r0
	ticker->ticks_to_expire_minus +=
    8faa:	4472      	add	r2, lr
	ticker->ticks_to_expire = ticks_to_expire +
    8fac:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus +=
    8fae:	6162      	str	r2, [r4, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
    8fb0:	b136      	cbz	r6, 8fc0 <ticker_job+0x298>
    8fb2:	6831      	ldr	r1, [r6, #0]
    8fb4:	b121      	cbz	r1, 8fc0 <ticker_job+0x298>
			user_op->params.update.ticks_drift_plus -
    8fb6:	eba0 000e 	sub.w	r0, r0, lr
		ext_data->ticks_drift =
    8fba:	6070      	str	r0, [r6, #4]
    8fbc:	68a3      	ldr	r3, [r4, #8]
    8fbe:	6962      	ldr	r2, [r4, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    8fc0:	f41c 0f00 	tst.w	ip, #8388608	; 0x800000
    8fc4:	d123      	bne.n	900e <ticker_job+0x2e6>
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    8fc6:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_to_expire_minus) {
    8fc8:	4293      	cmp	r3, r2
    8fca:	d92b      	bls.n	9024 <ticker_job+0x2fc>
		ticks_to_expire -= ticks_to_expire_minus;
    8fcc:	1a9b      	subs	r3, r3, r2
		ticks_to_expire_minus = 0U;
    8fce:	2200      	movs	r2, #0
	ticker->ticks_to_expire = ticks_to_expire;
    8fd0:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    8fd2:	6162      	str	r2, [r4, #20]
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    8fd4:	68e9      	ldr	r1, [r5, #12]
    8fd6:	69a3      	ldr	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    8fd8:	692a      	ldr	r2, [r5, #16]
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    8fda:	440b      	add	r3, r1
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    8fdc:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    8fde:	bf88      	it	hi
    8fe0:	1a9b      	subhi	r3, r3, r2
	if (user_op->params.update.force != 0U) {
    8fe2:	7daa      	ldrb	r2, [r5, #22]
		ticker->ticks_slot = 0U;
    8fe4:	bf98      	it	ls
    8fe6:	2300      	movls	r3, #0
    8fe8:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0U) {
    8fea:	b102      	cbz	r2, 8fee <ticker_job+0x2c6>
		ticker->force = user_op->params.update.force;
    8fec:	70e2      	strb	r2, [r4, #3]
	if (user_op->params.update.must_expire) {
    8fee:	7deb      	ldrb	r3, [r5, #23]
    8ff0:	b113      	cbz	r3, 8ff8 <ticker_job+0x2d0>
		ticker->must_expire = (user_op->params.update.must_expire - 1);
    8ff2:	3b01      	subs	r3, #1
    8ff4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->next = *insert_head;
    8ff8:	9b04      	ldr	r3, [sp, #16]
    8ffa:	9a06      	ldr	r2, [sp, #24]
    8ffc:	4619      	mov	r1, r3
    8ffe:	9b01      	ldr	r3, [sp, #4]
    9000:	548b      	strb	r3, [r1, r2]
		ticker->req++;
    9002:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
    9004:	786a      	ldrb	r2, [r5, #1]
    9006:	9201      	str	r2, [sp, #4]
		ticker->req++;
    9008:	3301      	adds	r3, #1
    900a:	7063      	strb	r3, [r4, #1]
    900c:	e731      	b.n	8e72 <ticker_job+0x14a>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    900e:	9903      	ldr	r1, [sp, #12]
    9010:	eba1 0708 	sub.w	r7, r1, r8
    9014:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    9018:	429f      	cmp	r7, r3
    901a:	f080 8129 	bcs.w	9270 <ticker_job+0x548>
			ticks_to_expire -= delta_current_start;
    901e:	1bdb      	subs	r3, r3, r7
	if (ticks_to_expire > ticks_to_expire_minus) {
    9020:	4293      	cmp	r3, r2
    9022:	d8d3      	bhi.n	8fcc <ticker_job+0x2a4>
    9024:	1ad2      	subs	r2, r2, r3
    9026:	e125      	b.n	9274 <ticker_job+0x54c>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    9028:	f8d9 7014 	ldr.w	r7, [r9, #20]
    902c:	9703      	str	r7, [sp, #12]
	ticks_now = cntr_cnt_get();
    902e:	f009 fe1f 	bl	12c70 <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    9032:	9b02      	ldr	r3, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    9034:	eba0 0c07 	sub.w	ip, r0, r7
    9038:	f02c 477f 	bic.w	r7, ip, #4278190080	; 0xff000000
	ticks_now = cntr_cnt_get();
    903c:	4680      	mov	r8, r0
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    903e:	443b      	add	r3, r7
		ticker->ticks_to_expire_minus += ticks_elapsed -
    9040:	6961      	ldr	r1, [r4, #20]
    9042:	440b      	add	r3, r1
    9044:	1b9a      	subs	r2, r3, r6
    9046:	6162      	str	r2, [r4, #20]
		ticks_to_expire = 0U;
    9048:	2300      	movs	r3, #0
    904a:	e774      	b.n	8f36 <ticker_job+0x20e>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
    904c:	686e      	ldr	r6, [r5, #4]
    904e:	2e00      	cmp	r6, #0
    9050:	f47f aee4 	bne.w	8e1c <ticker_job+0xf4>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
    9054:	68ae      	ldr	r6, [r5, #8]
    9056:	2e00      	cmp	r6, #0
    9058:	f47f aee0 	bne.w	8e1c <ticker_job+0xf4>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
    905c:	68ee      	ldr	r6, [r5, #12]
    905e:	2e00      	cmp	r6, #0
    9060:	f47f aedc 	bne.w	8e1c <ticker_job+0xf4>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
    9064:	692e      	ldr	r6, [r5, #16]
    9066:	2e00      	cmp	r6, #0
    9068:	f47f aed8 	bne.w	8e1c <ticker_job+0xf4>
			     (user_op->params.update.lazy == 0U) &&
    906c:	696e      	ldr	r6, [r5, #20]
    906e:	f036 467f 	bics.w	r6, r6, #4278190080	; 0xff000000
    9072:	f47f aed3 	bne.w	8e1c <ticker_job+0xf4>
	if (user_op->fp_op_func) {
    9076:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    9078:	2100      	movs	r1, #0
	user_op->status = status;
    907a:	2001      	movs	r0, #1
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    907c:	7029      	strb	r1, [r5, #0]
	user_op->status = status;
    907e:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    9080:	2a00      	cmp	r2, #0
    9082:	f43f ae9d 	beq.w	8dc0 <ticker_job+0x98>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    9086:	6b29      	ldr	r1, [r5, #48]	; 0x30
    9088:	4790      	blx	r2
    908a:	f89a c003 	ldrb.w	ip, [sl, #3]
    908e:	f89a 3002 	ldrb.w	r3, [sl, #2]
    9092:	e695      	b.n	8dc0 <ticker_job+0x98>
    9094:	4698      	mov	r8, r3
    9096:	e695      	b.n	8dc4 <ticker_job+0x9c>
	while (count_user--) {
    9098:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    909a:	4657      	mov	r7, sl
    909c:	42ba      	cmp	r2, r7
    909e:	f1a7 0308 	sub.w	r3, r7, #8
    90a2:	d01e      	beq.n	90e2 <ticker_job+0x3ba>
    90a4:	461f      	mov	r7, r3
    90a6:	e685      	b.n	8db4 <ticker_job+0x8c>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    90a8:	1a13      	subs	r3, r2, r0
				if (ticks_elapsed > ticks_used) {
    90aa:	9a02      	ldr	r2, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    90ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
    90b0:	429a      	cmp	r2, r3
					ticks_used = ticks_elapsed -
    90b2:	bf8c      	ite	hi
    90b4:	1ad3      	subhi	r3, r2, r3
					ticks_used = 0;
    90b6:	2300      	movls	r3, #0
    90b8:	e703      	b.n	8ec2 <ticker_job+0x19a>
				ticks_at_stop = cntr_cnt_get();
    90ba:	f009 fdd9 	bl	12c70 <cntr_cnt_get>
    90be:	e6f6      	b.n	8eae <ticker_job+0x186>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    90c0:	2104      	movs	r1, #4
    90c2:	464b      	mov	r3, r9
    90c4:	2201      	movs	r2, #1
    90c6:	f8d9 4024 	ldr.w	r4, [r9, #36]	; 0x24
    90ca:	4608      	mov	r0, r1
    90cc:	47a0      	blx	r4
	while (count_user--) {
    90ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
				user->middle = prev;
    90d0:	f88a 8002 	strb.w	r8, [sl, #2]
    90d4:	4657      	mov	r7, sl
				pending = 1U;
    90d6:	2301      	movs	r3, #1
	while (count_user--) {
    90d8:	42ba      	cmp	r2, r7
				pending = 1U;
    90da:	9309      	str	r3, [sp, #36]	; 0x24
    90dc:	f1a7 0308 	sub.w	r3, r7, #8
	while (count_user--) {
    90e0:	d1e0      	bne.n	90a4 <ticker_job+0x37c>
    90e2:	f899 c01d 	ldrb.w	ip, [r9, #29]
    90e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    90e8:	ebb3 030c 	subs.w	r3, r3, ip
    90ec:	bf18      	it	ne
    90ee:	2301      	movne	r3, #1
    90f0:	9306      	str	r3, [sp, #24]
	if (flag_elapsed) {
    90f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    90f4:	46cb      	mov	fp, r9
    90f6:	2b00      	cmp	r3, #0
    90f8:	f040 80ee 	bne.w	92d8 <ticker_job+0x5b0>
	count_user = instance->count_user;
    90fc:	f899 2009 	ldrb.w	r2, [r9, #9]
	node = &instance->nodes[0];
    9100:	f8d9 3000 	ldr.w	r3, [r9]
	users = &instance->users[0];
    9104:	f8d9 1004 	ldr.w	r1, [r9, #4]
	node = &instance->nodes[0];
    9108:	9304      	str	r3, [sp, #16]
	while (count_user--) {
    910a:	1e53      	subs	r3, r2, #1
	users = &instance->users[0];
    910c:	9107      	str	r1, [sp, #28]
	while (count_user--) {
    910e:	b2db      	uxtb	r3, r3
    9110:	2a00      	cmp	r2, #0
    9112:	f000 82e9 	beq.w	96e8 <ticker_job+0x9c0>
    9116:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    911a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    911c:	9303      	str	r3, [sp, #12]
		user_ops = (void *)&user->user_op[0];
    911e:	f8d8 3004 	ldr.w	r3, [r8, #4]
		user_ops_first = user->first;
    9122:	f898 6001 	ldrb.w	r6, [r8, #1]
		user_ops = (void *)&user->user_op[0];
    9126:	9305      	str	r3, [sp, #20]
		while ((insert_head != TICKER_NULL) ||
    9128:	9b01      	ldr	r3, [sp, #4]
    912a:	2bff      	cmp	r3, #255	; 0xff
    912c:	d064      	beq.n	91f8 <ticker_job+0x4d0>
				ticker = &node[id_insert];
    912e:	f8dd a004 	ldr.w	sl, [sp, #4]
    9132:	9b04      	ldr	r3, [sp, #16]
    9134:	fa0f f48a 	sxth.w	r4, sl
    9138:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    913c:	ea4f 1c04 	mov.w	ip, r4, lsl #4
    9140:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				insert_head = ticker->next;
    9144:	f813 300c 	ldrb.w	r3, [r3, ip]
    9148:	9301      	str	r3, [sp, #4]
				user_op = NULL;
    914a:	2500      	movs	r5, #0
	ticker->next = TICKER_NULL;
    914c:	22ff      	movs	r2, #255	; 0xff
    914e:	7022      	strb	r2, [r4, #0]
	(void)ticker_enqueue(instance, id_insert);
    9150:	f8db 7000 	ldr.w	r7, [fp]
	current = instance->ticker_id_head;
    9154:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticker_new = &node[id];
    9158:	eb07 000c 	add.w	r0, r7, ip
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    915c:	4293      	cmp	r3, r2
	ticks_to_expire = ticker_new->ticks_to_expire;
    915e:	6881      	ldr	r1, [r0, #8]
	previous = TICKER_NULL;
    9160:	bf18      	it	ne
    9162:	9202      	strne	r2, [sp, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    9164:	d116      	bne.n	9194 <ticker_job+0x46c>
    9166:	e3ec      	b.n	9942 <ticker_job+0xc1a>
    9168:	7f172b59 	.word	0x7f172b59
    916c:	ff172b5a 	.word	0xff172b5a
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
    9170:	ebb1 010c 	subs.w	r1, r1, ip
    9174:	d106      	bne.n	9184 <ticker_job+0x45c>
    9176:	f8be e01e 	ldrh.w	lr, [lr, #30]
    917a:	f8b0 901e 	ldrh.w	r9, [r0, #30]
    917e:	45f1      	cmp	r9, lr
    9180:	f200 842d 	bhi.w	99de <ticker_job+0xcb6>
		current = ticker_current->next;
    9184:	f817 c002 	ldrb.w	ip, [r7, r2]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    9188:	9302      	str	r3, [sp, #8]
    918a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    918e:	f000 83cc 	beq.w	992a <ticker_job+0xc02>
    9192:	4663      	mov	r3, ip
		(ticker_current = &node[current])->ticks_to_expire))) {
    9194:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
    9198:	eb07 1e0c 	add.w	lr, r7, ip, lsl #4
    919c:	ea4f 120c 	mov.w	r2, ip, lsl #4
		(ticks_to_expire_current =
    91a0:	f8de c008 	ldr.w	ip, [lr, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    91a4:	4561      	cmp	r1, ip
    91a6:	d2e3      	bcs.n	9170 <ticker_job+0x448>
    91a8:	9a02      	ldr	r2, [sp, #8]
	ticker_new->ticks_to_expire = ticks_to_expire;
    91aa:	6081      	str	r1, [r0, #8]
	if (previous == TICKER_NULL) {
    91ac:	2aff      	cmp	r2, #255	; 0xff
	ticker_new->next = current;
    91ae:	7003      	strb	r3, [r0, #0]
	if (previous == TICKER_NULL) {
    91b0:	f040 83c0 	bne.w	9934 <ticker_job+0xc0c>
		instance->ticker_id_head = id;
    91b4:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
    91b8:	2bff      	cmp	r3, #255	; 0xff
    91ba:	d006      	beq.n	91ca <ticker_job+0x4a2>
		node[current].ticks_to_expire -= ticks_to_expire;
    91bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    91c0:	eb07 1703 	add.w	r7, r7, r3, lsl #4
    91c4:	68bb      	ldr	r3, [r7, #8]
    91c6:	1a59      	subs	r1, r3, r1
    91c8:	60b9      	str	r1, [r7, #8]
	ticker->req = ticker->ack + 1;
    91ca:	78a3      	ldrb	r3, [r4, #2]
    91cc:	3301      	adds	r3, #1
    91ce:	7063      	strb	r3, [r4, #1]
			if (user_op) {
    91d0:	2d00      	cmp	r5, #0
    91d2:	d0a9      	beq.n	9128 <ticker_job+0x400>
	if (user_op->fp_op_func) {
    91d4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    91d6:	9a03      	ldr	r2, [sp, #12]
    91d8:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
    91da:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    91dc:	b113      	cbz	r3, 91e4 <ticker_job+0x4bc>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    91de:	6b29      	ldr	r1, [r5, #48]	; 0x30
    91e0:	2000      	movs	r0, #0
    91e2:	4798      	blx	r3
				if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    91e4:	6863      	ldr	r3, [r4, #4]
    91e6:	2b00      	cmp	r3, #0
    91e8:	d19e      	bne.n	9128 <ticker_job+0x400>
					ticker->op_context =
    91ea:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
    91ee:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
    91f2:	9b01      	ldr	r3, [sp, #4]
    91f4:	2bff      	cmp	r3, #255	; 0xff
    91f6:	d19a      	bne.n	912e <ticker_job+0x406>
    91f8:	f898 3002 	ldrb.w	r3, [r8, #2]
    91fc:	42b3      	cmp	r3, r6
    91fe:	d02f      	beq.n	9260 <ticker_job+0x538>
    9200:	9f05      	ldr	r7, [sp, #20]
				if (first == user->count_user_op) {
    9202:	f898 0000 	ldrb.w	r0, [r8]
				user_op = &user_ops[user_ops_first];
    9206:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    920a:	eb06 0282 	add.w	r2, r6, r2, lsl #2
				first = user_ops_first + 1;
    920e:	3601      	adds	r6, #1
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    9210:	f817 1022 	ldrb.w	r1, [r7, r2, lsl #2]
				first = user_ops_first + 1;
    9214:	b2f6      	uxtb	r6, r6
					first = 0U;
    9216:	42b0      	cmp	r0, r6
    9218:	bf08      	it	eq
    921a:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    921c:	2904      	cmp	r1, #4
				user_op = &user_ops[user_ops_first];
    921e:	eb07 0582 	add.w	r5, r7, r2, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    9222:	d11b      	bne.n	925c <ticker_job+0x534>
				id_insert = user_op->id;
    9224:	f895 a001 	ldrb.w	sl, [r5, #1]
				ticker = &node[id_insert];
    9228:	9b04      	ldr	r3, [sp, #16]
    922a:	eb0a 0c4a 	add.w	ip, sl, sl, lsl #1
    922e:	eb03 140c 	add.w	r4, r3, ip, lsl #4
    9232:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
				if (((ticker->req -
    9236:	7861      	ldrb	r1, [r4, #1]
				      ticker->ack) & 0xff) != 0U) {
    9238:	78a3      	ldrb	r3, [r4, #2]
				if (((ticker->req -
    923a:	1ac9      	subs	r1, r1, r3
    923c:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    9240:	f000 8384 	beq.w	994c <ticker_job+0xc24>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    9244:	9b03      	ldr	r3, [sp, #12]
    9246:	f807 3022 	strb.w	r3, [r7, r2, lsl #2]
	if (user_op->fp_op_func) {
    924a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->status = status;
    924c:	2201      	movs	r2, #1
    924e:	62aa      	str	r2, [r5, #40]	; 0x28
		user_op->fp_op_func(user_op->status, user_op->op_context);
    9250:	4610      	mov	r0, r2
	if (user_op->fp_op_func) {
    9252:	b10b      	cbz	r3, 9258 <ticker_job+0x530>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    9254:	6b29      	ldr	r1, [r5, #48]	; 0x30
    9256:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
    9258:	f898 3002 	ldrb.w	r3, [r8, #2]
    925c:	42b3      	cmp	r3, r6
    925e:	d1d0      	bne.n	9202 <ticker_job+0x4da>
	while (count_user--) {
    9260:	9a07      	ldr	r2, [sp, #28]
    9262:	4542      	cmp	r2, r8
    9264:	f1a8 0308 	sub.w	r3, r8, #8
    9268:	f000 823c 	beq.w	96e4 <ticker_job+0x9bc>
    926c:	4698      	mov	r8, r3
    926e:	e756      	b.n	911e <ticker_job+0x3f6>
			ticks_to_expire_minus +=
    9270:	443a      	add	r2, r7
    9272:	1ad2      	subs	r2, r2, r3
		ticks_to_expire = 0U;
    9274:	2300      	movs	r3, #0
    9276:	e6ab      	b.n	8fd0 <ticker_job+0x2a8>
    9278:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    927a:	8aa8      	ldrh	r0, [r5, #20]
    927c:	468b      	mov	fp, r1
		while (ticker->lazy_current < user_op->params.update.lazy) {
    927e:	4558      	cmp	r0, fp
    9280:	f67f ae8e 	bls.w	8fa0 <ticker_job+0x278>
					   ticker_remainder_inc(ticker);
    9284:	6a21      	ldr	r1, [r4, #32]
    9286:	9108      	str	r1, [sp, #32]
    9288:	f106 0e01 	add.w	lr, r6, #1
    928c:	4659      	mov	r1, fp
    928e:	920c      	str	r2, [sp, #48]	; 0x30
    9290:	e008      	b.n	92a4 <ticker_job+0x57c>
	ticker->remainder_current += ticker->remainder_periodic;
    9292:	6260      	str	r0, [r4, #36]	; 0x24
    9294:	46b3      	mov	fp, r6
		while (ticker->lazy_current < user_op->params.update.lazy) {
    9296:	8aa8      	ldrh	r0, [r5, #20]
			ticker->lazy_current++;
    9298:	3101      	adds	r1, #1
    929a:	b289      	uxth	r1, r1
		while (ticker->lazy_current < user_op->params.update.lazy) {
    929c:	4281      	cmp	r1, r0
			ticks_to_expire += ticker->ticks_periodic +
    929e:	445b      	add	r3, fp
		while (ticker->lazy_current < user_op->params.update.lazy) {
    92a0:	f4bf ae7c 	bcs.w	8f9c <ticker_job+0x274>
	ticker->remainder_current += ticker->remainder_periodic;
    92a4:	9a08      	ldr	r2, [sp, #32]
    92a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if ((ticker->remainder_current < BIT(31)) &&
    92a8:	f8df b2cc 	ldr.w	fp, [pc, #716]	; 9578 <ticker_job+0x850>
	ticker->remainder_current += ticker->remainder_periodic;
    92ac:	4410      	add	r0, r2
	if ((ticker->remainder_current < BIT(31)) &&
    92ae:	4ab1      	ldr	r2, [pc, #708]	; (9574 <ticker_job+0x84c>)
    92b0:	4483      	add	fp, r0
    92b2:	4593      	cmp	fp, r2
    92b4:	d8ed      	bhi.n	9292 <ticker_job+0x56a>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    92b6:	f1a0 70e8 	sub.w	r0, r0, #30408704	; 0x1d00000
    92ba:	f5a0 30d4 	sub.w	r0, r0, #108544	; 0x1a800
    92be:	f5a0 70a5 	sub.w	r0, r0, #330	; 0x14a
    92c2:	6260      	str	r0, [r4, #36]	; 0x24
		return 1;
    92c4:	46f3      	mov	fp, lr
    92c6:	e7e6      	b.n	9296 <ticker_job+0x56e>
	if (flag_elapsed) {
    92c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    92ca:	2a00      	cmp	r2, #0
    92cc:	f000 8218 	beq.w	9700 <ticker_job+0x9d8>
	pending = 0U;
    92d0:	9b06      	ldr	r3, [sp, #24]
    92d2:	9309      	str	r3, [sp, #36]	; 0x24
	insert_head = TICKER_NULL;
    92d4:	23ff      	movs	r3, #255	; 0xff
    92d6:	9301      	str	r3, [sp, #4]
	ticks_now = cntr_cnt_get();
    92d8:	f009 fcca 	bl	12c70 <cntr_cnt_get>
	node = &instance->nodes[0];
    92dc:	f8db 3000 	ldr.w	r3, [fp]
	while (instance->ticker_id_head != TICKER_NULL) {
    92e0:	f89b 501d 	ldrb.w	r5, [fp, #29]
	node = &instance->nodes[0];
    92e4:	9304      	str	r3, [sp, #16]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    92e6:	9b07      	ldr	r3, [sp, #28]
	while (instance->ticker_id_head != TICKER_NULL) {
    92e8:	2dff      	cmp	r5, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    92ea:	eba0 0003 	sub.w	r0, r0, r3
    92ee:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
	while (instance->ticker_id_head != TICKER_NULL) {
    92f2:	d04d      	beq.n	9390 <ticker_job+0x668>
    92f4:	f8dd a008 	ldr.w	sl, [sp, #8]
	ticks_expired = 0U;
    92f8:	f04f 0900 	mov.w	r9, #0
		ticker = &node[id_expired];
    92fc:	9b04      	ldr	r3, [sp, #16]
    92fe:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    9302:	eb03 1404 	add.w	r4, r3, r4, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
    9306:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    9308:	4553      	cmp	r3, sl
    930a:	f200 8412 	bhi.w	9b32 <ticker_job+0xe0a>
		if (instance->ticks_slot_previous > ticks_to_expire) {
    930e:	f8db 2018 	ldr.w	r2, [fp, #24]
		skip_collision = (ticker->lazy_current != 0U);
    9312:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
		if (instance->ticks_slot_previous > ticks_to_expire) {
    9316:	4293      	cmp	r3, r2
		ticks_elapsed -= ticks_to_expire;
    9318:	ebaa 0a03 	sub.w	sl, sl, r3
		ticks_expired += ticks_to_expire;
    931c:	4499      	add	r9, r3
		ticks_latency -= ticks_to_expire;
    931e:	eba8 0803 	sub.w	r8, r8, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    9322:	bf25      	ittet	cs
    9324:	f04f 33ff 	movcs.w	r3, #4294967295	; 0xffffffff
    9328:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous -= ticks_to_expire;
    932c:	1ad3      	subcc	r3, r2, r3
			instance->ticks_slot_previous = 0U;
    932e:	2300      	movcs	r3, #0
    9330:	f8cb 3018 	str.w	r3, [fp, #24]
		state = (ticker->req - ticker->ack) & 0xff;
    9334:	7860      	ldrb	r0, [r4, #1]
    9336:	78a1      	ldrb	r1, [r4, #2]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    9338:	69a7      	ldr	r7, [r4, #24]
    933a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    933c:	f894 c000 	ldrb.w	ip, [r4]
    9340:	6866      	ldr	r6, [r4, #4]
    9342:	9703      	str	r7, [sp, #12]
		state = (ticker->req - ticker->ack) & 0xff;
    9344:	1a43      	subs	r3, r0, r1
    9346:	b2db      	uxtb	r3, r3
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    9348:	b117      	cbz	r7, 9350 <ticker_job+0x628>
    934a:	2b02      	cmp	r3, #2
    934c:	f000 8148 	beq.w	95e0 <ticker_job+0x8b8>
		ticker->ticks_to_expire = 0U;
    9350:	2700      	movs	r7, #0
    9352:	60a7      	str	r7, [r4, #8]
		instance->ticker_id_head = ticker->next;
    9354:	f88b c01d 	strb.w	ip, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
    9358:	2e00      	cmp	r6, #0
    935a:	f040 80f9 	bne.w	9550 <ticker_job+0x828>
    935e:	b11a      	cbz	r2, 9368 <ticker_job+0x640>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
    9360:	7a12      	ldrb	r2, [r2, #8]
    9362:	2a01      	cmp	r2, #1
    9364:	f000 80d5 	beq.w	9512 <ticker_job+0x7ea>
			if (state && ((state == 1U) || skip_collision) &&
    9368:	b153      	cbz	r3, 9380 <ticker_job+0x658>
    936a:	2b01      	cmp	r3, #1
    936c:	d002      	beq.n	9374 <ticker_job+0x64c>
    936e:	f1be 0f00 	cmp.w	lr, #0
    9372:	d005      	beq.n	9380 <ticker_job+0x658>
			    ticker->fp_op_func) {
    9374:	6a23      	ldr	r3, [r4, #32]
			if (state && ((state == 1U) || skip_collision) &&
    9376:	b11b      	cbz	r3, 9380 <ticker_job+0x658>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
    9378:	6a61      	ldr	r1, [r4, #36]	; 0x24
    937a:	2001      	movs	r0, #1
    937c:	4798      	blx	r3
    937e:	78a1      	ldrb	r1, [r4, #2]
			ticker->req = ticker->ack;
    9380:	7061      	strb	r1, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
    9382:	f89b 501d 	ldrb.w	r5, [fp, #29]
    9386:	2dff      	cmp	r5, #255	; 0xff
    9388:	d1b8      	bne.n	92fc <ticker_job+0x5d4>
    938a:	f8db 3000 	ldr.w	r3, [fp]
    938e:	9304      	str	r3, [sp, #16]
			flag_compare_update = 1U;
    9390:	9806      	ldr	r0, [sp, #24]
	count_user = instance->count_user;
    9392:	f89b 2009 	ldrb.w	r2, [fp, #9]
			flag_compare_update = 1U;
    9396:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	users = &instance->users[0];
    9398:	f8db 1004 	ldr.w	r1, [fp, #4]
    939c:	9107      	str	r1, [sp, #28]
	while (count_user--) {
    939e:	1e53      	subs	r3, r2, #1
			flag_compare_update = 1U;
    93a0:	42a5      	cmp	r5, r4
    93a2:	bf18      	it	ne
    93a4:	2001      	movne	r0, #1
    93a6:	9006      	str	r0, [sp, #24]
	while (count_user--) {
    93a8:	b2db      	uxtb	r3, r3
    93aa:	2a00      	cmp	r2, #0
    93ac:	f000 812f 	beq.w	960e <ticker_job+0x8e6>
    93b0:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
		user_ops = (void *)&user->user_op[0];
    93b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
		user_ops_first = user->first;
    93b8:	f898 6001 	ldrb.w	r6, [r8, #1]
		user_ops = (void *)&user->user_op[0];
    93bc:	9305      	str	r3, [sp, #20]
		while ((insert_head != TICKER_NULL) ||
    93be:	9b01      	ldr	r3, [sp, #4]
    93c0:	2bff      	cmp	r3, #255	; 0xff
    93c2:	d062      	beq.n	948a <ticker_job+0x762>
				ticker = &node[id_insert];
    93c4:	f8dd a004 	ldr.w	sl, [sp, #4]
    93c8:	9b04      	ldr	r3, [sp, #16]
    93ca:	fa0f f48a 	sxth.w	r4, sl
    93ce:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    93d2:	ea4f 1c04 	mov.w	ip, r4, lsl #4
    93d6:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				insert_head = ticker->next;
    93da:	f813 300c 	ldrb.w	r3, [r3, ip]
    93de:	9301      	str	r3, [sp, #4]
				user_op = NULL;
    93e0:	2500      	movs	r5, #0
	ticker->next = TICKER_NULL;
    93e2:	22ff      	movs	r2, #255	; 0xff
    93e4:	7022      	strb	r2, [r4, #0]
	(void)ticker_enqueue(instance, id_insert);
    93e6:	f8db 7000 	ldr.w	r7, [fp]
	current = instance->ticker_id_head;
    93ea:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticker_new = &node[id];
    93ee:	eb07 000c 	add.w	r0, r7, ip
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    93f2:	4293      	cmp	r3, r2
	ticks_to_expire = ticker_new->ticks_to_expire;
    93f4:	6881      	ldr	r1, [r0, #8]
	previous = TICKER_NULL;
    93f6:	bf18      	it	ne
    93f8:	9203      	strne	r2, [sp, #12]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    93fa:	d112      	bne.n	9422 <ticker_job+0x6fa>
    93fc:	e2ff      	b.n	99fe <ticker_job+0xcd6>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
    93fe:	ebb1 010c 	subs.w	r1, r1, ip
    9402:	d106      	bne.n	9412 <ticker_job+0x6ea>
    9404:	f8be e01e 	ldrh.w	lr, [lr, #30]
    9408:	f8b0 901e 	ldrh.w	r9, [r0, #30]
    940c:	45f1      	cmp	r9, lr
    940e:	f200 8343 	bhi.w	9a98 <ticker_job+0xd70>
		current = ticker_current->next;
    9412:	f817 c002 	ldrb.w	ip, [r7, r2]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    9416:	9303      	str	r3, [sp, #12]
    9418:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    941c:	f000 82e3 	beq.w	99e6 <ticker_job+0xcbe>
    9420:	4663      	mov	r3, ip
		(ticker_current = &node[current])->ticks_to_expire))) {
    9422:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
    9426:	eb07 1e0c 	add.w	lr, r7, ip, lsl #4
    942a:	ea4f 120c 	mov.w	r2, ip, lsl #4
		(ticks_to_expire_current =
    942e:	f8de c008 	ldr.w	ip, [lr, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    9432:	458c      	cmp	ip, r1
    9434:	d9e3      	bls.n	93fe <ticker_job+0x6d6>
    9436:	9a03      	ldr	r2, [sp, #12]
	ticker_new->ticks_to_expire = ticks_to_expire;
    9438:	6081      	str	r1, [r0, #8]
	if (previous == TICKER_NULL) {
    943a:	2aff      	cmp	r2, #255	; 0xff
	ticker_new->next = current;
    943c:	7003      	strb	r3, [r0, #0]
	if (previous == TICKER_NULL) {
    943e:	f040 82d7 	bne.w	99f0 <ticker_job+0xcc8>
		instance->ticker_id_head = id;
    9442:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
    9446:	2bff      	cmp	r3, #255	; 0xff
    9448:	d006      	beq.n	9458 <ticker_job+0x730>
		node[current].ticks_to_expire -= ticks_to_expire;
    944a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    944e:	eb07 1703 	add.w	r7, r7, r3, lsl #4
    9452:	68bb      	ldr	r3, [r7, #8]
    9454:	1a59      	subs	r1, r3, r1
    9456:	60b9      	str	r1, [r7, #8]
	ticker->req = ticker->ack + 1;
    9458:	78a3      	ldrb	r3, [r4, #2]
    945a:	3301      	adds	r3, #1
    945c:	7063      	strb	r3, [r4, #1]
			if (user_op) {
    945e:	2d00      	cmp	r5, #0
    9460:	d0ad      	beq.n	93be <ticker_job+0x696>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    9462:	f04f 0200 	mov.w	r2, #0
	if (user_op->fp_op_func) {
    9466:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    9468:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
    946a:	2200      	movs	r2, #0
    946c:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    946e:	b113      	cbz	r3, 9476 <ticker_job+0x74e>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    9470:	6b29      	ldr	r1, [r5, #48]	; 0x30
    9472:	4610      	mov	r0, r2
    9474:	4798      	blx	r3
				if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    9476:	6863      	ldr	r3, [r4, #4]
    9478:	2b00      	cmp	r3, #0
    947a:	d1a0      	bne.n	93be <ticker_job+0x696>
					ticker->op_context =
    947c:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
    9480:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
    9484:	9b01      	ldr	r3, [sp, #4]
    9486:	2bff      	cmp	r3, #255	; 0xff
    9488:	d19c      	bne.n	93c4 <ticker_job+0x69c>
    948a:	f898 3002 	ldrb.w	r3, [r8, #2]
    948e:	42b3      	cmp	r3, r6
    9490:	d030      	beq.n	94f4 <ticker_job+0x7cc>
    9492:	9f05      	ldr	r7, [sp, #20]
				if (first == user->count_user_op) {
    9494:	f898 0000 	ldrb.w	r0, [r8]
				user_op = &user_ops[user_ops_first];
    9498:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    949c:	eb06 0282 	add.w	r2, r6, r2, lsl #2
				first = user_ops_first + 1;
    94a0:	3601      	adds	r6, #1
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    94a2:	f817 1022 	ldrb.w	r1, [r7, r2, lsl #2]
				first = user_ops_first + 1;
    94a6:	b2f6      	uxtb	r6, r6
					first = 0U;
    94a8:	42b0      	cmp	r0, r6
    94aa:	bf08      	it	eq
    94ac:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    94ae:	2904      	cmp	r1, #4
				user_op = &user_ops[user_ops_first];
    94b0:	eb07 0582 	add.w	r5, r7, r2, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    94b4:	d11c      	bne.n	94f0 <ticker_job+0x7c8>
				id_insert = user_op->id;
    94b6:	f895 a001 	ldrb.w	sl, [r5, #1]
				ticker = &node[id_insert];
    94ba:	9b04      	ldr	r3, [sp, #16]
    94bc:	eb0a 0c4a 	add.w	ip, sl, sl, lsl #1
    94c0:	eb03 140c 	add.w	r4, r3, ip, lsl #4
    94c4:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
				if (((ticker->req -
    94c8:	7861      	ldrb	r1, [r4, #1]
				      ticker->ack) & 0xff) != 0U) {
    94ca:	78a3      	ldrb	r3, [r4, #2]
				if (((ticker->req -
    94cc:	1ac9      	subs	r1, r1, r3
    94ce:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    94d2:	f000 8299 	beq.w	9a08 <ticker_job+0xce0>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    94d6:	f04f 0300 	mov.w	r3, #0
    94da:	f807 3022 	strb.w	r3, [r7, r2, lsl #2]
	if (user_op->fp_op_func) {
    94de:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->status = status;
    94e0:	2201      	movs	r2, #1
    94e2:	62aa      	str	r2, [r5, #40]	; 0x28
		user_op->fp_op_func(user_op->status, user_op->op_context);
    94e4:	4610      	mov	r0, r2
	if (user_op->fp_op_func) {
    94e6:	b10b      	cbz	r3, 94ec <ticker_job+0x7c4>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    94e8:	6b29      	ldr	r1, [r5, #48]	; 0x30
    94ea:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
    94ec:	f898 3002 	ldrb.w	r3, [r8, #2]
    94f0:	42b3      	cmp	r3, r6
    94f2:	d1cf      	bne.n	9494 <ticker_job+0x76c>
	while (count_user--) {
    94f4:	9a07      	ldr	r2, [sp, #28]
    94f6:	4542      	cmp	r2, r8
    94f8:	f1a8 0308 	sub.w	r3, r8, #8
    94fc:	f000 8084 	beq.w	9608 <ticker_job+0x8e0>
    9500:	4698      	mov	r8, r3
    9502:	e757      	b.n	93b4 <ticker_job+0x68c>
		ticker->ticks_to_expire = 0U;
    9504:	f8c4 e008 	str.w	lr, [r4, #8]
		instance->ticker_id_head = ticker->next;
    9508:	f88b c01d 	strb.w	ip, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
    950c:	2e00      	cmp	r6, #0
    950e:	f43f af27 	beq.w	9360 <ticker_job+0x638>
				ticker->req = ticker->ack;
    9512:	4653      	mov	r3, sl
			ticks_to_expire_prep(ticker, instance->ticks_current,
    9514:	9e07      	ldr	r6, [sp, #28]
    9516:	f8db 2014 	ldr.w	r2, [fp, #20]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    951a:	6960      	ldr	r0, [r4, #20]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    951c:	eb06 0709 	add.w	r7, r6, r9
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    9520:	1abe      	subs	r6, r7, r2
    9522:	f416 0f00 	tst.w	r6, #8388608	; 0x800000
    9526:	d14d      	bne.n	95c4 <ticker_job+0x89c>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    9528:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    952c:	4433      	add	r3, r6
	if (ticks_to_expire > ticks_to_expire_minus) {
    952e:	4298      	cmp	r0, r3
    9530:	d250      	bcs.n	95d4 <ticker_job+0x8ac>
		ticks_to_expire -= ticks_to_expire_minus;
    9532:	1a1b      	subs	r3, r3, r0
		ticks_to_expire_minus = 0U;
    9534:	2000      	movs	r0, #0
			ticker->next = *insert_head;
    9536:	9a01      	ldr	r2, [sp, #4]
    9538:	7022      	strb	r2, [r4, #0]
			ticker->req++;
    953a:	3101      	adds	r1, #1
    953c:	7061      	strb	r1, [r4, #1]
	ticker->ticks_to_expire = ticks_to_expire;
    953e:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    9540:	6160      	str	r0, [r4, #20]
			ticker->req++;
    9542:	9501      	str	r5, [sp, #4]
	while (instance->ticker_id_head != TICKER_NULL) {
    9544:	f89b 501d 	ldrb.w	r5, [fp, #29]
    9548:	2dff      	cmp	r5, #255	; 0xff
    954a:	f47f aed7 	bne.w	92fc <ticker_job+0x5d4>
    954e:	e71c      	b.n	938a <ticker_job+0x662>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
    9550:	b112      	cbz	r2, 9558 <ticker_job+0x830>
    9552:	7a13      	ldrb	r3, [r2, #8]
    9554:	2b01      	cmp	r3, #1
    9556:	d0dc      	beq.n	9512 <ticker_job+0x7ea>
				if (!ticker->lazy_current) {
    9558:	f1be 0f00 	cmp.w	lr, #0
    955c:	d151      	bne.n	9602 <ticker_job+0x8da>
					lazy_periodic = ticker->lazy_periodic;
    955e:	8ba7      	ldrh	r7, [r4, #28]
    9560:	9705      	str	r7, [sp, #20]
    9562:	4601      	mov	r1, r0
						ticker_remainder_inc(ticker);
    9564:	6a23      	ldr	r3, [r4, #32]
    9566:	9303      	str	r3, [sp, #12]
    9568:	6a62      	ldr	r2, [r4, #36]	; 0x24
    956a:	9108      	str	r1, [sp, #32]
				ticks_to_expire = 0U;
    956c:	2300      	movs	r3, #0
    956e:	1c70      	adds	r0, r6, #1
    9570:	e009      	b.n	9586 <ticker_job+0x85e>
    9572:	bf00      	nop
    9574:	7f172b59 	.word	0x7f172b59
    9578:	ff172b5a 	.word	0xff172b5a
				while (count--) {
    957c:	3f01      	subs	r7, #1
    957e:	46b4      	mov	ip, r6
    9580:	1c79      	adds	r1, r7, #1
					ticks_to_expire +=
    9582:	4463      	add	r3, ip
				while (count--) {
    9584:	d012      	beq.n	95ac <ticker_job+0x884>
	ticker->remainder_current += ticker->remainder_periodic;
    9586:	9903      	ldr	r1, [sp, #12]
	if ((ticker->remainder_current < BIT(31)) &&
    9588:	f8df c2c4 	ldr.w	ip, [pc, #708]	; 9850 <ticker_job+0xb28>
	ticker->remainder_current += ticker->remainder_periodic;
    958c:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
    958e:	49ad      	ldr	r1, [pc, #692]	; (9844 <ticker_job+0xb1c>)
    9590:	4494      	add	ip, r2
    9592:	458c      	cmp	ip, r1
    9594:	d8f2      	bhi.n	957c <ticker_job+0x854>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    9596:	f1a2 72e8 	sub.w	r2, r2, #30408704	; 0x1d00000
				while (count--) {
    959a:	3f01      	subs	r7, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    959c:	f5a2 32d4 	sub.w	r2, r2, #108544	; 0x1a800
    95a0:	4684      	mov	ip, r0
				while (count--) {
    95a2:	1c79      	adds	r1, r7, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    95a4:	f5a2 72a5 	sub.w	r2, r2, #330	; 0x14a
					ticks_to_expire +=
    95a8:	4463      	add	r3, ip
				while (count--) {
    95aa:	d1ec      	bne.n	9586 <ticker_job+0x85e>
				} else if (!ticker->must_expire) {
    95ac:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    95b0:	9908      	ldr	r1, [sp, #32]
    95b2:	6262      	str	r2, [r4, #36]	; 0x24
    95b4:	2800      	cmp	r0, #0
    95b6:	f000 8285 	beq.w	9ac4 <ticker_job+0xd9c>
				ticker->lazy_current += (lazy_periodic + lazy);
    95ba:	9a05      	ldr	r2, [sp, #20]
    95bc:	4496      	add	lr, r2
    95be:	f8a4 e01e 	strh.w	lr, [r4, #30]
    95c2:	e7a7      	b.n	9514 <ticker_job+0x7ec>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    95c4:	1bd2      	subs	r2, r2, r7
    95c6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    95ca:	429a      	cmp	r2, r3
    95cc:	d216      	bcs.n	95fc <ticker_job+0x8d4>
			ticks_to_expire -= delta_current_start;
    95ce:	1a9b      	subs	r3, r3, r2
	if (ticks_to_expire > ticks_to_expire_minus) {
    95d0:	4298      	cmp	r0, r3
    95d2:	d3ae      	bcc.n	9532 <ticker_job+0x80a>
    95d4:	1ac0      	subs	r0, r0, r3
		ticks_to_expire = 0U;
    95d6:	2300      	movs	r3, #0
    95d8:	e7ad      	b.n	9536 <ticker_job+0x80e>
    95da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    95dc:	468b      	mov	fp, r1
    95de:	e64e      	b.n	927e <ticker_job+0x556>
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    95e0:	f1be 0f00 	cmp.w	lr, #0
    95e4:	f47f aeb4 	bne.w	9350 <ticker_job+0x628>
    95e8:	b112      	cbz	r2, 95f0 <ticker_job+0x8c8>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
    95ea:	7a17      	ldrb	r7, [r2, #8]
    95ec:	2f01      	cmp	r7, #1
    95ee:	d089      	beq.n	9504 <ticker_job+0x7dc>
			instance->ticks_slot_previous = ticker->ticks_slot;
    95f0:	9f03      	ldr	r7, [sp, #12]
			instance->ticker_id_slot_previous = id_expired;
    95f2:	f88b 501c 	strb.w	r5, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    95f6:	f8cb 7018 	str.w	r7, [fp, #24]
    95fa:	e6a9      	b.n	9350 <ticker_job+0x628>
			ticks_to_expire_minus +=
    95fc:	4410      	add	r0, r2
    95fe:	1ac0      	subs	r0, r0, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    9600:	e7e9      	b.n	95d6 <ticker_job+0x8ae>
    9602:	2700      	movs	r7, #0
					lazy_periodic = 0U;
    9604:	9705      	str	r7, [sp, #20]
    9606:	e7ad      	b.n	9564 <ticker_job+0x83c>
    9608:	f8db 3000 	ldr.w	r3, [fp]
    960c:	9304      	str	r3, [sp, #16]
	while (rescheduling) {
    960e:	f89b c01d 	ldrb.w	ip, [fp, #29]
    9612:	9e04      	ldr	r6, [sp, #16]
	uint8_t  rescheduled = 0U;
    9614:	2300      	movs	r3, #0
		while (ticker_id_head != TICKER_NULL) {
    9616:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    961a:	d010      	beq.n	963e <ticker_job+0x916>
    961c:	46e2      	mov	sl, ip
			ticker = &nodes[ticker_id_head];
    961e:	fa0f f28a 	sxth.w	r2, sl
    9622:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    9626:	eb06 1202 	add.w	r2, r6, r2, lsl #4
			ext_data = ticker->ext_data;
    962a:	6a97      	ldr	r7, [r2, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
    962c:	b117      	cbz	r7, 9634 <ticker_job+0x90c>
    962e:	7a39      	ldrb	r1, [r7, #8]
    9630:	2901      	cmp	r1, #1
    9632:	d076      	beq.n	9722 <ticker_job+0x9fa>
			ticker_id_head = ticker->next;
    9634:	f892 a000 	ldrb.w	sl, [r2]
		while (ticker_id_head != TICKER_NULL) {
    9638:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    963c:	d1ef      	bne.n	961e <ticker_job+0x8f6>
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
    963e:	2b00      	cmp	r3, #0
    9640:	d052      	beq.n	96e8 <ticker_job+0x9c0>
	if (instance->ticker_id_head != ticker_id_old_head) {
    9642:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9644:	4562      	cmp	r2, ip
    9646:	f000 827b 	beq.w	9b40 <ticker_job+0xe18>
	if (!pending) {
    964a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    964c:	2b00      	cmp	r3, #0
    964e:	f000 80e4 	beq.w	981a <ticker_job+0xaf2>
    9652:	f89b c01d 	ldrb.w	ip, [fp, #29]
	if (instance->ticker_id_head == TICKER_NULL) {
    9656:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    965a:	f000 827f 	beq.w	9b5c <ticker_job+0xe34>
	if (ticker_id_old_head == TICKER_NULL) {
    965e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9660:	2bff      	cmp	r3, #255	; 0xff
    9662:	f000 8293 	beq.w	9b8c <ticker_job+0xe64>
	ticks_to_expire = ticker->ticks_to_expire;
    9666:	f8db 3000 	ldr.w	r3, [fp]
		LL_ASSERT(i);
    966a:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 9854 <ticker_job+0xb2c>
    966e:	4f76      	ldr	r7, [pc, #472]	; (9848 <ticker_job+0xb20>)
    9670:	4e76      	ldr	r6, [pc, #472]	; (984c <ticker_job+0xb24>)
	ticker = &instance->nodes[instance->ticker_id_head];
    9672:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
    9676:	eb03 130c 	add.w	r3, r3, ip, lsl #4
	i = 10U;
    967a:	250a      	movs	r5, #10
	ticks_to_expire = ticker->ticks_to_expire;
    967c:	f8d3 9008 	ldr.w	r9, [r3, #8]
		ctr = cntr_cnt_get();
    9680:	f009 faf6 	bl	12c70 <cntr_cnt_get>
		cc = instance->ticks_current;
    9684:	f8db 3014 	ldr.w	r3, [fp, #20]
		instance->trigger_set_cb(cc);
    9688:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    968c:	1ac4      	subs	r4, r0, r3
    968e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    9692:	3403      	adds	r4, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
    9694:	454c      	cmp	r4, r9
    9696:	bf2c      	ite	cs
    9698:	191b      	addcs	r3, r3, r4
    969a:	444b      	addcc	r3, r9
		cc &= HAL_TICKER_CNTR_MASK;
    969c:	f023 447f 	bic.w	r4, r3, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
    96a0:	4682      	mov	sl, r0
		instance->trigger_set_cb(cc);
    96a2:	4620      	mov	r0, r4
    96a4:	4790      	blx	r2
		ctr_post = cntr_cnt_get();
    96a6:	f009 fae3 	bl	12c70 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    96aa:	eba0 000a 	sub.w	r0, r0, sl
    96ae:	eba4 040a 	sub.w	r4, r4, sl
    96b2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    96b6:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    96ba:	3003      	adds	r0, #3
		  ticker_ticks_diff_get(cc, ctr));
    96bc:	42a0      	cmp	r0, r4
		i--;
    96be:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		  ticker_ticks_diff_get(cc, ctr));
    96c2:	d91b      	bls.n	96fc <ticker_job+0x9d4>
		LL_ASSERT(i);
    96c4:	2d00      	cmp	r5, #0
    96c6:	d1db      	bne.n	9680 <ticker_job+0x958>
    96c8:	f640 03f3 	movw	r3, #2291	; 0x8f3
    96cc:	4642      	mov	r2, r8
    96ce:	4639      	mov	r1, r7
    96d0:	4630      	mov	r0, r6
    96d2:	f00c fb35 	bl	15d40 <printk>
    96d6:	4040      	eors	r0, r0
    96d8:	f380 8811 	msr	BASEPRI, r0
    96dc:	f04f 0003 	mov.w	r0, #3
    96e0:	df02      	svc	2
    96e2:	e7cd      	b.n	9680 <ticker_job+0x958>
    96e4:	f89b c01d 	ldrb.w	ip, [fp, #29]
	if (instance->ticker_id_head != ticker_id_old_head) {
    96e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    96ea:	4563      	cmp	r3, ip
    96ec:	d1ad      	bne.n	964a <ticker_job+0x922>
	if (!pending) {
    96ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    96f0:	2b00      	cmp	r3, #0
    96f2:	f000 8241 	beq.w	9b78 <ticker_job+0xe50>
	if (flag_compare_update) {
    96f6:	9b06      	ldr	r3, [sp, #24]
    96f8:	2b00      	cmp	r3, #0
    96fa:	d1aa      	bne.n	9652 <ticker_job+0x92a>
    96fc:	f89b 301f 	ldrb.w	r3, [fp, #31]
	instance->job_guard = 0U;
    9700:	2200      	movs	r2, #0
    9702:	f88b 201e 	strb.w	r2, [fp, #30]
	if (instance->worker_trigger) {
    9706:	2b00      	cmp	r3, #0
    9708:	f000 81d8 	beq.w	9abc <ticker_job+0xd94>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    970c:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    9710:	465b      	mov	r3, fp
    9712:	2201      	movs	r2, #1
    9714:	2103      	movs	r1, #3
    9716:	2004      	movs	r0, #4
    9718:	46a4      	mov	ip, r4
}
    971a:	b00f      	add	sp, #60	; 0x3c
    971c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    9720:	4760      	bx	ip
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
    9722:	f89b 301c 	ldrb.w	r3, [fp, #28]
    9726:	2bff      	cmp	r3, #255	; 0xff
    9728:	d042      	beq.n	97b0 <ticker_job+0xa88>
			instance->ticks_slot_previous > ticks_elapsed) {
    972a:	f8db 0018 	ldr.w	r0, [fp, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
    972e:	9b02      	ldr	r3, [sp, #8]
    9730:	4283      	cmp	r3, r0
    9732:	d23d      	bcs.n	97b0 <ticker_job+0xa88>
			window_start_ticks = instance->ticks_slot_previous -
    9734:	1ac3      	subs	r3, r0, r3
    9736:	9301      	str	r3, [sp, #4]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    9738:	e9d7 4300 	ldrd	r4, r3, [r7]
    973c:	42a3      	cmp	r3, r4
		ticker_id_iter = nodes[ticker_id_head].next;
    973e:	f892 e000 	ldrb.w	lr, [r2]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    9742:	d23d      	bcs.n	97c0 <ticker_job+0xa98>
		while (ticker_id_iter != TICKER_NULL &&
    9744:	f1be 0fff 	cmp.w	lr, #255	; 0xff
			ticks_slot_window = ext_data->ticks_slot_window -
    9748:	eba4 0403 	sub.w	r4, r4, r3
		while (ticker_id_iter != TICKER_NULL &&
    974c:	d038      	beq.n	97c0 <ticker_job+0xa98>
		       ticks_start_offset + ticker->ticks_slot <=
    974e:	6995      	ldr	r5, [r2, #24]
		while (ticker_id_iter != TICKER_NULL &&
    9750:	42ac      	cmp	r4, r5
    9752:	f04f 0300 	mov.w	r3, #0
    9756:	d337      	bcc.n	97c8 <ticker_job+0xaa0>
    9758:	4699      	mov	r9, r3
    975a:	4671      	mov	r1, lr
    975c:	9203      	str	r2, [sp, #12]
    975e:	46a8      	mov	r8, r5
    9760:	e01a      	b.n	9798 <ticker_job+0xa70>
			if (node->ticks_to_expire >
    9762:	6888      	ldr	r0, [r1, #8]
					MIN(ticks_slot_window,
    9764:	1f03      	subs	r3, r0, #4
			if (node->ticks_to_expire >
    9766:	2804      	cmp	r0, #4
					MIN(ticks_slot_window,
    9768:	444b      	add	r3, r9
			if (node->ticks_to_expire >
    976a:	d909      	bls.n	9780 <ticker_job+0xa58>
				window_end_ticks =
    976c:	42a3      	cmp	r3, r4
    976e:	bf28      	it	cs
    9770:	4623      	movcs	r3, r4
			if (window_end_ticks > ticks_start_offset +
    9772:	4543      	cmp	r3, r8
    9774:	d904      	bls.n	9780 <ticker_job+0xa58>
			if (ticks_to_expire != 0U &&
    9776:	1b5b      	subs	r3, r3, r5
    9778:	d002      	beq.n	9780 <ticker_job+0xa58>
    977a:	9a01      	ldr	r2, [sp, #4]
    977c:	4293      	cmp	r3, r2
    977e:	d222      	bcs.n	97c6 <ticker_job+0xa9e>
			window_start_ticks  = node->ticks_to_expire +
    9780:	698b      	ldr	r3, [r1, #24]
			ticker_id_iter = node->next;
    9782:	7809      	ldrb	r1, [r1, #0]
			window_start_ticks  = node->ticks_to_expire +
    9784:	18c3      	adds	r3, r0, r3
    9786:	9301      	str	r3, [sp, #4]
			ticks_start_offset += node->ticks_to_expire;
    9788:	4481      	add	r9, r0
			ticks_to_expire     = ticks_slot_window -
    978a:	1b63      	subs	r3, r4, r5
		while (ticker_id_iter != TICKER_NULL &&
    978c:	29ff      	cmp	r1, #255	; 0xff
		       ticks_start_offset + ticker->ticks_slot <=
    978e:	eb09 0805 	add.w	r8, r9, r5
		while (ticker_id_iter != TICKER_NULL &&
    9792:	d018      	beq.n	97c6 <ticker_job+0xa9e>
    9794:	4544      	cmp	r4, r8
    9796:	d316      	bcc.n	97c6 <ticker_job+0xa9e>
			node = &nodes[ticker_id_iter];
    9798:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    979c:	eb06 1101 	add.w	r1, r6, r1, lsl #4
			if (node->ext_data &&
    97a0:	6a88      	ldr	r0, [r1, #40]	; 0x28
    97a2:	2800      	cmp	r0, #0
    97a4:	d0dd      	beq.n	9762 <ticker_job+0xa3a>
    97a6:	7a00      	ldrb	r0, [r0, #8]
    97a8:	2801      	cmp	r0, #1
    97aa:	d1da      	bne.n	9762 <ticker_job+0xa3a>
				ticker_id_iter = node->next;
    97ac:	7809      	ldrb	r1, [r1, #0]
				continue;
    97ae:	e7ed      	b.n	978c <ticker_job+0xa64>
		window_start_ticks = 0U;
    97b0:	2300      	movs	r3, #0
    97b2:	9301      	str	r3, [sp, #4]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    97b4:	e9d7 4300 	ldrd	r4, r3, [r7]
    97b8:	42a3      	cmp	r3, r4
		ticker_id_iter = nodes[ticker_id_head].next;
    97ba:	f892 e000 	ldrb.w	lr, [r2]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    97be:	d3c1      	bcc.n	9744 <ticker_job+0xa1c>
		ticker->ticks_to_expire = ticks_to_expire;
    97c0:	2300      	movs	r3, #0
    97c2:	6093      	str	r3, [r2, #8]
		while (ticker_id_iter != TICKER_NULL) {
    97c4:	e021      	b.n	980a <ticker_job+0xae2>
    97c6:	9a03      	ldr	r2, [sp, #12]
		ticker->ticks_to_expire = ticks_to_expire;
    97c8:	6093      	str	r3, [r2, #8]
    97ca:	4674      	mov	r4, lr
    97cc:	f04f 09ff 	mov.w	r9, #255	; 0xff
    97d0:	e000      	b.n	97d4 <ticker_job+0xaac>
    97d2:	4604      	mov	r4, r0
			node = &nodes[ticker_id_iter];
    97d4:	b221      	sxth	r1, r4
    97d6:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    97da:	eb06 1800 	add.w	r8, r6, r0, lsl #4
    97de:	0100      	lsls	r0, r0, #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
    97e0:	f8d8 5008 	ldr.w	r5, [r8, #8]
    97e4:	429d      	cmp	r5, r3
    97e6:	f080 819a 	bcs.w	9b1e <ticker_job+0xdf6>
				ticker->ticks_to_expire -=
    97ea:	1b5b      	subs	r3, r3, r5
    97ec:	6093      	str	r3, [r2, #8]
			ticker_id_iter = node->next;
    97ee:	5c30      	ldrb	r0, [r6, r0]
		while (ticker_id_iter != TICKER_NULL) {
    97f0:	28ff      	cmp	r0, #255	; 0xff
    97f2:	46a1      	mov	r9, r4
    97f4:	d1ed      	bne.n	97d2 <ticker_job+0xaaa>
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
    97f6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    97fa:	0109      	lsls	r1, r1, #4
			instance->ticker_id_head = nodes[ticker_id_head].next;
    97fc:	f88b e01d 	strb.w	lr, [fp, #29]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
    9800:	5c73      	ldrb	r3, [r6, r1]
    9802:	7013      	strb	r3, [r2, #0]
			nodes[ticker_id_prev].next = ticker_id_head;
    9804:	f806 a001 	strb.w	sl, [r6, r1]
    9808:	46f4      	mov	ip, lr
		ticker->lazy_current--;
    980a:	8bd3      	ldrh	r3, [r2, #30]
    980c:	3b01      	subs	r3, #1
    980e:	83d3      	strh	r3, [r2, #30]
		ext_data->reschedule_state =
    9810:	f04f 0202 	mov.w	r2, #2
		rescheduled  = 1U;
    9814:	2301      	movs	r3, #1
		ext_data->reschedule_state =
    9816:	723a      	strb	r2, [r7, #8]
		rescheduled  = 1U;
    9818:	e6fd      	b.n	9616 <ticker_job+0x8ee>
	count_user = instance->count_user;
    981a:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
    981e:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
    9822:	1e5c      	subs	r4, r3, #1
    9824:	b2e4      	uxtb	r4, r4
    9826:	2b00      	cmp	r3, #0
    9828:	f43f af13 	beq.w	9652 <ticker_job+0x92a>
		flag_compare_update = 1U;
    982c:	2301      	movs	r3, #1
    982e:	9306      	str	r3, [sp, #24]
    9830:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
		uop->status = TICKER_STATUS_SUCCESS;
    9834:	f04f 0900 	mov.w	r9, #0
		while (user->first != user->last) {
    9838:	7863      	ldrb	r3, [r4, #1]
    983a:	78e1      	ldrb	r1, [r4, #3]
		user_op = &user->user_op[0];
    983c:	6865      	ldr	r5, [r4, #4]
		while (user->first != user->last) {
    983e:	4299      	cmp	r1, r3
    9840:	d116      	bne.n	9870 <ticker_job+0xb48>
    9842:	e06b      	b.n	991c <ticker_job+0xbf4>
    9844:	7f172b59 	.word	0x7f172b59
    9848:	00019a38 	.word	0x00019a38
    984c:	000199cc 	.word	0x000199cc
    9850:	ff172b5a 	.word	0xff172b5a
    9854:	0001998c 	.word	0x0001998c
	switch (uop->op) {
    9858:	2b01      	cmp	r3, #1
    985a:	d05b      	beq.n	9914 <ticker_job+0xbec>
			first = user->first + 1;
    985c:	7863      	ldrb	r3, [r4, #1]
			if (first == user->count_user_op) {
    985e:	7822      	ldrb	r2, [r4, #0]
			first = user->first + 1;
    9860:	3301      	adds	r3, #1
    9862:	b2db      	uxtb	r3, r3
				first = 0U;
    9864:	429a      	cmp	r2, r3
    9866:	bf08      	it	eq
    9868:	2300      	moveq	r3, #0
		while (user->first != user->last) {
    986a:	4299      	cmp	r1, r3
			user->first = first;
    986c:	7063      	strb	r3, [r4, #1]
		while (user->first != user->last) {
    986e:	d055      	beq.n	991c <ticker_job+0xbf4>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    9870:	b21b      	sxth	r3, r3
    9872:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    9876:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    987a:	eb05 0283 	add.w	r2, r5, r3, lsl #2
	switch (uop->op) {
    987e:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
    9882:	2b02      	cmp	r3, #2
    9884:	d01b      	beq.n	98be <ticker_job+0xb96>
    9886:	2b03      	cmp	r3, #3
    9888:	d1e6      	bne.n	9858 <ticker_job+0xb30>
		if (uop->id < instance->count_node) {
    988a:	7853      	ldrb	r3, [r2, #1]
    988c:	f89b 1008 	ldrb.w	r1, [fp, #8]
    9890:	4299      	cmp	r1, r3
    9892:	d911      	bls.n	98b8 <ticker_job+0xb90>
			node[uop->id].priority =
    9894:	f8db 1000 	ldr.w	r1, [fp]
    9898:	7910      	ldrb	r0, [r2, #4]
    989a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    989e:	eb01 1303 	add.w	r3, r1, r3, lsl #4
    98a2:	f883 002d 	strb.w	r0, [r3, #45]	; 0x2d
			uop->status = TICKER_STATUS_SUCCESS;
    98a6:	f8c2 9028 	str.w	r9, [r2, #40]	; 0x28
		fp_op_func = uop->fp_op_func;
    98aa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	if (fp_op_func) {
    98ac:	b113      	cbz	r3, 98b4 <ticker_job+0xb8c>
		fp_op_func(uop->status, uop->op_context);
    98ae:	6b11      	ldr	r1, [r2, #48]	; 0x30
    98b0:	6a90      	ldr	r0, [r2, #40]	; 0x28
    98b2:	4798      	blx	r3
    98b4:	78e1      	ldrb	r1, [r4, #3]
    98b6:	e7d1      	b.n	985c <ticker_job+0xb34>
			uop->status = TICKER_STATUS_FAILURE;
    98b8:	2301      	movs	r3, #1
    98ba:	6293      	str	r3, [r2, #40]	; 0x28
    98bc:	e7f5      	b.n	98aa <ticker_job+0xb82>
		ticker_by_next_slot_get(instance,
    98be:	e9d2 7001 	ldrd	r7, r0, [r2, #4]
	_ticker_id_head = *ticker_id_head;
    98c2:	f897 e000 	ldrb.w	lr, [r7]
		ticker_by_next_slot_get(instance,
    98c6:	f8d2 c00c 	ldr.w	ip, [r2, #12]
	node = instance->nodes;
    98ca:	f8db 1000 	ldr.w	r1, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
    98ce:	f8db 8014 	ldr.w	r8, [fp, #20]
    98d2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
    98d6:	d003      	beq.n	98e0 <ticker_job+0xbb8>
    98d8:	6803      	ldr	r3, [r0, #0]
    98da:	4543      	cmp	r3, r8
    98dc:	f000 80e7 	beq.w	9aae <ticker_job+0xd86>
		_ticker_id_head = instance->ticker_id_head;
    98e0:	f89b 301d 	ldrb.w	r3, [fp, #29]
		*ticks_current = instance->ticks_current;
    98e4:	f8c0 8000 	str.w	r8, [r0]
		_ticks_to_expire = 0U;
    98e8:	f04f 0e00 	mov.w	lr, #0
    98ec:	e00d      	b.n	990a <ticker_job+0xbe2>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0U)) {
    98ee:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    98f2:	eb01 1800 	add.w	r8, r1, r0, lsl #4
    98f6:	0100      	lsls	r0, r0, #4
    98f8:	f8d8 a008 	ldr.w	sl, [r8, #8]
	while ((_ticker_id_head != TICKER_NULL) &&
    98fc:	f8d8 8018 	ldr.w	r8, [r8, #24]
    9900:	44d6      	add	lr, sl
    9902:	f1b8 0f00 	cmp.w	r8, #0
    9906:	d102      	bne.n	990e <ticker_job+0xbe6>
		_ticker_id_head = ticker->next;
    9908:	5c0b      	ldrb	r3, [r1, r0]
	while ((_ticker_id_head != TICKER_NULL) &&
    990a:	2bff      	cmp	r3, #255	; 0xff
    990c:	d1ef      	bne.n	98ee <ticker_job+0xbc6>
	*ticker_id_head = _ticker_id_head;
    990e:	703b      	strb	r3, [r7, #0]
	*ticks_to_expire = _ticks_to_expire;
    9910:	f8cc e000 	str.w	lr, [ip]
		fp_op_func = uop->fp_op_func;
    9914:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		uop->status = TICKER_STATUS_SUCCESS;
    9916:	f8c2 9028 	str.w	r9, [r2, #40]	; 0x28
		break;
    991a:	e7c7      	b.n	98ac <ticker_job+0xb84>
	while (count_user--) {
    991c:	42a6      	cmp	r6, r4
    991e:	f1a4 0308 	sub.w	r3, r4, #8
    9922:	f43f aee8 	beq.w	96f6 <ticker_job+0x9ce>
    9926:	461c      	mov	r4, r3
    9928:	e786      	b.n	9838 <ticker_job+0xb10>
	ticker_new->next = current;
    992a:	461a      	mov	r2, r3
	ticker_new->ticks_to_expire = ticks_to_expire;
    992c:	6081      	str	r1, [r0, #8]
	ticker_new->next = current;
    992e:	f880 c000 	strb.w	ip, [r0]
    9932:	4663      	mov	r3, ip
		node[previous].next = id;
    9934:	b212      	sxth	r2, r2
    9936:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    993a:	0112      	lsls	r2, r2, #4
    993c:	f807 a002 	strb.w	sl, [r7, r2]
    9940:	e43a      	b.n	91b8 <ticker_job+0x490>
	ticker_new->next = current;
    9942:	f807 300c 	strb.w	r3, [r7, ip]
		instance->ticker_id_head = id;
    9946:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
    994a:	e43e      	b.n	91ca <ticker_job+0x4a2>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
    994c:	8aaf      	ldrh	r7, [r5, #20]
				ticker_job_op_start(ticker, user_op,
    994e:	f8db e014 	ldr.w	lr, [fp, #20]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
    9952:	f8d5 9024 	ldr.w	r9, [r5, #36]	; 0x24
    9956:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    995a:	429f      	cmp	r7, r3
    995c:	e9d5 0203 	ldrd	r0, r2, [r5, #12]
    9960:	d037      	beq.n	99d2 <ticker_job+0xcaa>
		ticker->must_expire =
    9962:	f64f 73ff 	movw	r3, #65535	; 0xffff
    9966:	1afb      	subs	r3, r7, r3
    9968:	fab3 f383 	clz	r3, r3
    996c:	095b      	lsrs	r3, r3, #5
	ticker->ext_data = start->ext_data;
    996e:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
	ticker->lazy_periodic =
    9972:	f64f 79fd 	movw	r9, #65533	; 0xfffd
	ticker->ticks_periodic = start->ticks_periodic;
    9976:	6060      	str	r0, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    9978:	6222      	str	r2, [r4, #32]
		ticker->must_expire =
    997a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->lazy_periodic =
    997e:	454f      	cmp	r7, r9
    9980:	bf88      	it	hi
    9982:	2700      	movhi	r7, #0
	ticker->timeout_func = start->fp_timeout_func;
    9984:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    9988:	6868      	ldr	r0, [r5, #4]
	ticker->ticks_slot = start->ticks_slot;
    998a:	61a2      	str	r2, [r4, #24]
	ticker->context = start->context;
    998c:	6a2a      	ldr	r2, [r5, #32]
	ticker->lazy_periodic =
    998e:	83a7      	strh	r7, [r4, #28]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    9990:	eba0 070e 	sub.w	r7, r0, lr
	ticker->context = start->context;
    9994:	e9c4 3203 	strd	r3, r2, [r4, #12]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    9998:	023a      	lsls	r2, r7, #8
	ticker->ticks_to_expire = start->ticks_first;
    999a:	68ab      	ldr	r3, [r5, #8]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    999c:	d40d      	bmi.n	99ba <ticker_job+0xc92>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    999e:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    99a2:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_to_expire_minus) {
    99a4:	b193      	cbz	r3, 99cc <ticker_job+0xca4>
	ticker->ticks_to_expire = ticks_to_expire;
    99a6:	60a3      	str	r3, [r4, #8]
	ticker->remainder_current = 0U;
    99a8:	9b03      	ldr	r3, [sp, #12]
    99aa:	6263      	str	r3, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
    99ac:	83e3      	strh	r3, [r4, #30]
	ticker->force = 1U;
    99ae:	f04f 0301 	mov.w	r3, #1
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    99b2:	6161      	str	r1, [r4, #20]
	ticker->force = 1U;
    99b4:	70e3      	strb	r3, [r4, #3]
}
    99b6:	f7ff bbc9 	b.w	914c <ticker_job+0x424>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    99ba:	ebae 0200 	sub.w	r2, lr, r0
    99be:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    99c2:	4293      	cmp	r3, r2
    99c4:	d96f      	bls.n	9aa6 <ticker_job+0xd7e>
			ticks_to_expire -= delta_current_start;
    99c6:	1a9b      	subs	r3, r3, r2
	if (ticks_to_expire > ticks_to_expire_minus) {
    99c8:	2b00      	cmp	r3, #0
    99ca:	d1ec      	bne.n	99a6 <ticker_job+0xc7e>
		ticks_to_expire_minus -= ticks_to_expire;
    99cc:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
    99ce:	2300      	movs	r3, #0
    99d0:	e7e9      	b.n	99a6 <ticker_job+0xc7e>
	ticker->ext_data = start->ext_data;
    99d2:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
    99d6:	6060      	str	r0, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    99d8:	6222      	str	r2, [r4, #32]
	ticker->lazy_periodic =
    99da:	460f      	mov	r7, r1
    99dc:	e7d2      	b.n	9984 <ticker_job+0xc5c>
    99de:	9a02      	ldr	r2, [sp, #8]
    99e0:	4661      	mov	r1, ip
    99e2:	f7ff bbe2 	b.w	91aa <ticker_job+0x482>
	ticker_new->next = current;
    99e6:	461a      	mov	r2, r3
	ticker_new->ticks_to_expire = ticks_to_expire;
    99e8:	6081      	str	r1, [r0, #8]
	ticker_new->next = current;
    99ea:	f880 c000 	strb.w	ip, [r0]
    99ee:	4663      	mov	r3, ip
		node[previous].next = id;
    99f0:	b212      	sxth	r2, r2
    99f2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    99f6:	0112      	lsls	r2, r2, #4
    99f8:	f807 a002 	strb.w	sl, [r7, r2]
    99fc:	e523      	b.n	9446 <ticker_job+0x71e>
	ticker_new->next = current;
    99fe:	f807 300c 	strb.w	r3, [r7, ip]
		instance->ticker_id_head = id;
    9a02:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
    9a06:	e527      	b.n	9458 <ticker_job+0x730>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
    9a08:	8aaf      	ldrh	r7, [r5, #20]
				ticker_job_op_start(ticker, user_op,
    9a0a:	f8db e014 	ldr.w	lr, [fp, #20]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
    9a0e:	f8d5 9024 	ldr.w	r9, [r5, #36]	; 0x24
    9a12:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    9a16:	429f      	cmp	r7, r3
    9a18:	e9d5 0203 	ldrd	r0, r2, [r5, #12]
    9a1c:	d036      	beq.n	9a8c <ticker_job+0xd64>
		ticker->must_expire =
    9a1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    9a22:	1afb      	subs	r3, r7, r3
    9a24:	fab3 f383 	clz	r3, r3
    9a28:	095b      	lsrs	r3, r3, #5
	ticker->ext_data = start->ext_data;
    9a2a:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
	ticker->lazy_periodic =
    9a2e:	f64f 79fd 	movw	r9, #65533	; 0xfffd
	ticker->ticks_periodic = start->ticks_periodic;
    9a32:	6060      	str	r0, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    9a34:	6222      	str	r2, [r4, #32]
		ticker->must_expire =
    9a36:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->lazy_periodic =
    9a3a:	454f      	cmp	r7, r9
    9a3c:	bf88      	it	hi
    9a3e:	2700      	movhi	r7, #0
	ticker->timeout_func = start->fp_timeout_func;
    9a40:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    9a44:	6868      	ldr	r0, [r5, #4]
	ticker->ticks_slot = start->ticks_slot;
    9a46:	61a2      	str	r2, [r4, #24]
	ticker->context = start->context;
    9a48:	6a2a      	ldr	r2, [r5, #32]
	ticker->lazy_periodic =
    9a4a:	83a7      	strh	r7, [r4, #28]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    9a4c:	eba0 070e 	sub.w	r7, r0, lr
	ticker->context = start->context;
    9a50:	e9c4 3203 	strd	r3, r2, [r4, #12]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    9a54:	023a      	lsls	r2, r7, #8
	ticker->ticks_to_expire = start->ticks_first;
    9a56:	68ab      	ldr	r3, [r5, #8]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    9a58:	d40c      	bmi.n	9a74 <ticker_job+0xd4c>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    9a5a:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    9a5e:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_to_expire_minus) {
    9a60:	b18b      	cbz	r3, 9a86 <ticker_job+0xd5e>
	ticker->ticks_to_expire = ticks_to_expire;
    9a62:	60a3      	str	r3, [r4, #8]
	ticker->remainder_current = 0U;
    9a64:	2300      	movs	r3, #0
    9a66:	6263      	str	r3, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
    9a68:	83e3      	strh	r3, [r4, #30]
	ticker->force = 1U;
    9a6a:	f04f 0301 	mov.w	r3, #1
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    9a6e:	6161      	str	r1, [r4, #20]
	ticker->force = 1U;
    9a70:	70e3      	strb	r3, [r4, #3]
}
    9a72:	e4b6      	b.n	93e2 <ticker_job+0x6ba>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    9a74:	ebae 0200 	sub.w	r2, lr, r0
    9a78:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    9a7c:	4293      	cmp	r3, r2
    9a7e:	d90e      	bls.n	9a9e <ticker_job+0xd76>
			ticks_to_expire -= delta_current_start;
    9a80:	1a9b      	subs	r3, r3, r2
	if (ticks_to_expire > ticks_to_expire_minus) {
    9a82:	2b00      	cmp	r3, #0
    9a84:	d1ed      	bne.n	9a62 <ticker_job+0xd3a>
		ticks_to_expire_minus -= ticks_to_expire;
    9a86:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
    9a88:	2300      	movs	r3, #0
    9a8a:	e7ea      	b.n	9a62 <ticker_job+0xd3a>
	ticker->ext_data = start->ext_data;
    9a8c:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
    9a90:	6060      	str	r0, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    9a92:	6222      	str	r2, [r4, #32]
	ticker->lazy_periodic =
    9a94:	460f      	mov	r7, r1
    9a96:	e7d3      	b.n	9a40 <ticker_job+0xd18>
    9a98:	9a03      	ldr	r2, [sp, #12]
    9a9a:	4661      	mov	r1, ip
    9a9c:	e4cc      	b.n	9438 <ticker_job+0x710>
			    (delta_current_start - ticks_to_expire);
    9a9e:	1ad3      	subs	r3, r2, r3
		ticks_to_expire_minus -= ticks_to_expire;
    9aa0:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
    9aa2:	2300      	movs	r3, #0
    9aa4:	e7dd      	b.n	9a62 <ticker_job+0xd3a>
			    (delta_current_start - ticks_to_expire);
    9aa6:	1ad3      	subs	r3, r2, r3
		ticks_to_expire_minus -= ticks_to_expire;
    9aa8:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
    9aaa:	2300      	movs	r3, #0
    9aac:	e77b      	b.n	99a6 <ticker_job+0xc7e>
		ticker = &node[_ticker_id_head];
    9aae:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
    9ab2:	011b      	lsls	r3, r3, #4
	_ticks_to_expire = *ticks_to_expire;
    9ab4:	f8dc e000 	ldr.w	lr, [ip]
		_ticker_id_head = ticker->next;
    9ab8:	5ccb      	ldrb	r3, [r1, r3]
	while ((_ticker_id_head != TICKER_NULL) &&
    9aba:	e726      	b.n	990a <ticker_job+0xbe2>
}
    9abc:	b00f      	add	sp, #60	; 0x3c
    9abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9ac2:	4770      	bx	lr
					while (ticks_to_expire <
    9ac4:	4598      	cmp	r8, r3
    9ac6:	f67f ad78 	bls.w	95ba <ticker_job+0x892>
    9aca:	9f03      	ldr	r7, [sp, #12]
    9acc:	9508      	str	r5, [sp, #32]
    9ace:	f106 0c01 	add.w	ip, r6, #1
    9ad2:	910b      	str	r1, [sp, #44]	; 0x2c
    9ad4:	e005      	b.n	9ae2 <ticker_job+0xdba>
    9ad6:	4635      	mov	r5, r6
						ticks_to_expire +=
    9ad8:	442b      	add	r3, r5
						lazy++;
    9ada:	3001      	adds	r0, #1
					while (ticks_to_expire <
    9adc:	4598      	cmp	r8, r3
						lazy++;
    9ade:	b280      	uxth	r0, r0
					while (ticks_to_expire <
    9ae0:	d911      	bls.n	9b06 <ticker_job+0xdde>
	if ((ticker->remainder_current < BIT(31)) &&
    9ae2:	4d31      	ldr	r5, [pc, #196]	; (9ba8 <ticker_job+0xe80>)
    9ae4:	4931      	ldr	r1, [pc, #196]	; (9bac <ticker_job+0xe84>)
	ticker->remainder_current += ticker->remainder_periodic;
    9ae6:	443a      	add	r2, r7
	if ((ticker->remainder_current < BIT(31)) &&
    9ae8:	1955      	adds	r5, r2, r5
    9aea:	428d      	cmp	r5, r1
    9aec:	d8f3      	bhi.n	9ad6 <ticker_job+0xdae>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    9aee:	4665      	mov	r5, ip
    9af0:	f1a2 72e8 	sub.w	r2, r2, #30408704	; 0x1d00000
						ticks_to_expire +=
    9af4:	442b      	add	r3, r5
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    9af6:	f5a2 32d4 	sub.w	r2, r2, #108544	; 0x1a800
						lazy++;
    9afa:	3001      	adds	r0, #1
					while (ticks_to_expire <
    9afc:	4598      	cmp	r8, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    9afe:	f5a2 72a5 	sub.w	r2, r2, #330	; 0x14a
						lazy++;
    9b02:	b280      	uxth	r0, r0
					while (ticks_to_expire <
    9b04:	d8ed      	bhi.n	9ae2 <ticker_job+0xdba>
    9b06:	9e05      	ldr	r6, [sp, #20]
    9b08:	9d08      	ldr	r5, [sp, #32]
    9b0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    9b0c:	6262      	str	r2, [r4, #36]	; 0x24
    9b0e:	4406      	add	r6, r0
    9b10:	b2b0      	uxth	r0, r6
    9b12:	9005      	str	r0, [sp, #20]
    9b14:	e551      	b.n	95ba <ticker_job+0x892>
		flag_elapsed = 0U;
    9b16:	930d      	str	r3, [sp, #52]	; 0x34
		ticks_elapsed = 0U;
    9b18:	9302      	str	r3, [sp, #8]
    9b1a:	f7ff b931 	b.w	8d80 <ticker_job+0x58>
				node->ticks_to_expire -=
    9b1e:	1aeb      	subs	r3, r5, r3
		if (ticker_id_prev != TICKER_NULL) {
    9b20:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
				node->ticks_to_expire -=
    9b24:	f8c8 3008 	str.w	r3, [r8, #8]
		if (ticker_id_prev != TICKER_NULL) {
    9b28:	f43f ae6f 	beq.w	980a <ticker_job+0xae2>
    9b2c:	fa0f f189 	sxth.w	r1, r9
    9b30:	e661      	b.n	97f6 <ticker_job+0xace>
			ticker->ticks_to_expire -= ticks_elapsed;
    9b32:	eba3 030a 	sub.w	r3, r3, sl
    9b36:	60a3      	str	r3, [r4, #8]
			break;
    9b38:	f8db 3000 	ldr.w	r3, [fp]
    9b3c:	9304      	str	r3, [sp, #16]
    9b3e:	e427      	b.n	9390 <ticker_job+0x668>
	if (!pending) {
    9b40:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9b42:	2a00      	cmp	r2, #0
    9b44:	f47f ad87 	bne.w	9656 <ticker_job+0x92e>
	count_user = instance->count_user;
    9b48:	f89b 2009 	ldrb.w	r2, [fp, #9]
	users = &instance->users[0];
    9b4c:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
    9b50:	1e54      	subs	r4, r2, #1
    9b52:	b2e4      	uxtb	r4, r4
    9b54:	2a00      	cmp	r2, #0
    9b56:	f47f ae6a 	bne.w	982e <ticker_job+0xb06>
    9b5a:	e57c      	b.n	9656 <ticker_job+0x92e>
		if (cntr_stop() == 0) {
    9b5c:	f009 f862 	bl	12c24 <cntr_stop>
    9b60:	2800      	cmp	r0, #0
    9b62:	f47f adcb 	bne.w	96fc <ticker_job+0x9d4>
			instance->ticks_slot_previous = 0U;
    9b66:	f8cb 0018 	str.w	r0, [fp, #24]
			instance->ticks_current = cntr_cnt_get();
    9b6a:	f009 f881 	bl	12c70 <cntr_cnt_get>
    9b6e:	f89b 301f 	ldrb.w	r3, [fp, #31]
    9b72:	f8cb 0014 	str.w	r0, [fp, #20]
    9b76:	e5c3      	b.n	9700 <ticker_job+0x9d8>
	count_user = instance->count_user;
    9b78:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
    9b7c:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
    9b80:	1e5c      	subs	r4, r3, #1
    9b82:	b2e4      	uxtb	r4, r4
    9b84:	2b00      	cmp	r3, #0
    9b86:	f47f ae53 	bne.w	9830 <ticker_job+0xb08>
    9b8a:	e5b4      	b.n	96f6 <ticker_job+0x9ce>
		ticks_current = cntr_cnt_get();
    9b8c:	f009 f870 	bl	12c70 <cntr_cnt_get>
    9b90:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    9b92:	f009 f837 	bl	12c04 <cntr_start>
    9b96:	f89b c01d 	ldrb.w	ip, [fp, #29]
    9b9a:	2800      	cmp	r0, #0
    9b9c:	f47f ad63 	bne.w	9666 <ticker_job+0x93e>
			instance->ticks_current = ticks_current;
    9ba0:	f8cb 4014 	str.w	r4, [fp, #20]
    9ba4:	e55f      	b.n	9666 <ticker_job+0x93e>
    9ba6:	bf00      	nop
    9ba8:	ff172b5a 	.word	0xff172b5a
    9bac:	7f172b59 	.word	0x7f172b59

00009bb0 <ticker_init>:
{
    9bb0:	b4f0      	push	{r4, r5, r6, r7}
    9bb2:	9f04      	ldr	r7, [sp, #16]
    9bb4:	f89d 4014 	ldrb.w	r4, [sp, #20]
    9bb8:	9e06      	ldr	r6, [sp, #24]
	if (instance_index >= TICKER_INSTANCE_MAX) {
    9bba:	2800      	cmp	r0, #0
    9bbc:	d13e      	bne.n	9c3c <ticker_init+0x8c>
	instance->count_node = count_node;
    9bbe:	f8df c084 	ldr.w	ip, [pc, #132]	; 9c44 <ticker_init+0x94>
	while (count_node--) {
    9bc2:	1e4d      	subs	r5, r1, #1
	instance->count_node = count_node;
    9bc4:	f88c 1008 	strb.w	r1, [ip, #8]
	instance->nodes = node;
    9bc8:	f8cc 2000 	str.w	r2, [ip]
	while (count_node--) {
    9bcc:	b2ed      	uxtb	r5, r5
    9bce:	b149      	cbz	r1, 9be4 <ticker_init+0x34>
    9bd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    9bd4:	eb02 1105 	add.w	r1, r2, r5, lsl #4
    9bd8:	4291      	cmp	r1, r2
		instance->nodes[count_node].priority = 0;
    9bda:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
	while (count_node--) {
    9bde:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
    9be2:	d1f9      	bne.n	9bd8 <ticker_init+0x28>
	while (count_user--) {
    9be4:	1e5a      	subs	r2, r3, #1
	instance->count_user = count_user;
    9be6:	f88c 3009 	strb.w	r3, [ip, #9]
	instance->users = user;
    9bea:	f8cc 7004 	str.w	r7, [ip, #4]
	while (count_user--) {
    9bee:	b2d2      	uxtb	r2, r2
    9bf0:	b17b      	cbz	r3, 9c12 <ticker_init+0x62>
    9bf2:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
		users[count_user].user_op = user_op_;
    9bf6:	6056      	str	r6, [r2, #4]
		user_op_ += users[count_user].count_user_op;
    9bf8:	4611      	mov	r1, r2
    9bfa:	f812 3908 	ldrb.w	r3, [r2], #-8
    9bfe:	eb03 0043 	add.w	r0, r3, r3, lsl #1
		count_op -= users[count_user].count_user_op;
    9c02:	1ae4      	subs	r4, r4, r3
	while (count_user--) {
    9c04:	428f      	cmp	r7, r1
		user_op_ += users[count_user].count_user_op;
    9c06:	eb03 0380 	add.w	r3, r3, r0, lsl #2
		count_op -= users[count_user].count_user_op;
    9c0a:	b2e4      	uxtb	r4, r4
		user_op_ += users[count_user].count_user_op;
    9c0c:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	while (count_user--) {
    9c10:	d1f1      	bne.n	9bf6 <ticker_init+0x46>
	if (count_op) {
    9c12:	b99c      	cbnz	r4, 9c3c <ticker_init+0x8c>
	instance->caller_id_get_cb = caller_id_get_cb;
    9c14:	9a07      	ldr	r2, [sp, #28]
    9c16:	f8cc 2020 	str.w	r2, [ip, #32]
	instance->sched_cb = sched_cb;
    9c1a:	9a08      	ldr	r2, [sp, #32]
    9c1c:	f8cc 2024 	str.w	r2, [ip, #36]	; 0x24
	instance->ticker_id_slot_previous = TICKER_NULL;
    9c20:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->trigger_set_cb = trigger_set_cb;
    9c24:	9a09      	ldr	r2, [sp, #36]	; 0x24
	instance->ticks_elapsed_first = 0U;
    9c26:	f8ac 400a 	strh.w	r4, [ip, #10]
	return TICKER_STATUS_SUCCESS;
    9c2a:	4620      	mov	r0, r4
	instance->ticks_slot_previous = 0U;
    9c2c:	e9cc 4405 	strd	r4, r4, [ip, #20]
}
    9c30:	bcf0      	pop	{r4, r5, r6, r7}
	instance->trigger_set_cb = trigger_set_cb;
    9c32:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
	instance->ticker_id_slot_previous = TICKER_NULL;
    9c36:	f8ac 301c 	strh.w	r3, [ip, #28]
}
    9c3a:	4770      	bx	lr
		return TICKER_STATUS_FAILURE;
    9c3c:	2001      	movs	r0, #1
}
    9c3e:	bcf0      	pop	{r4, r5, r6, r7}
    9c40:	4770      	bx	lr
    9c42:	bf00      	nop
    9c44:	200011f0 	.word	0x200011f0

00009c48 <ticker_trigger>:
	if (instance->sched_cb) {
    9c48:	4b0a      	ldr	r3, [pc, #40]	; (9c74 <ticker_trigger+0x2c>)
    9c4a:	222c      	movs	r2, #44	; 0x2c
    9c4c:	fb02 3200 	mla	r2, r2, r0, r3
{
    9c50:	b410      	push	{r4}
	if (instance->sched_cb) {
    9c52:	6a54      	ldr	r4, [r2, #36]	; 0x24
    9c54:	b15c      	cbz	r4, 9c6e <ticker_trigger+0x26>
	instance = &_instance[instance_index];
    9c56:	eb00 0280 	add.w	r2, r0, r0, lsl #2
    9c5a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    9c5e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    9c62:	46a4      	mov	ip, r4
    9c64:	2201      	movs	r2, #1
}
    9c66:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    9c68:	2103      	movs	r1, #3
    9c6a:	2002      	movs	r0, #2
    9c6c:	4760      	bx	ip
}
    9c6e:	bc10      	pop	{r4}
    9c70:	4770      	bx	lr
    9c72:	bf00      	nop
    9c74:	200011f0 	.word	0x200011f0

00009c78 <ticker_start_ext>:
{
    9c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    9c7c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 9d20 <ticker_start_ext+0xa8>
{
    9c80:	f8bd e02c 	ldrh.w	lr, [sp, #44]	; 0x2c
	user = &instance->users[user_id];
    9c84:	272c      	movs	r7, #44	; 0x2c
    9c86:	fb07 8700 	mla	r7, r7, r0, r8
{
    9c8a:	4604      	mov	r4, r0
	user = &instance->users[user_id];
    9c8c:	687d      	ldr	r5, [r7, #4]
    9c8e:	eb05 0cc1 	add.w	ip, r5, r1, lsl #3
	if (last >= user->count_user_op) {
    9c92:	f815 9031 	ldrb.w	r9, [r5, r1, lsl #3]
	last = user->last + 1;
    9c96:	f89c 6003 	ldrb.w	r6, [ip, #3]
	struct ticker_instance *instance = &_instance[instance_index];
    9c9a:	eb04 0584 	add.w	r5, r4, r4, lsl #2
    9c9e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	last = user->last + 1;
    9ca2:	1c75      	adds	r5, r6, #1
{
    9ca4:	4608      	mov	r0, r1
	last = user->last + 1;
    9ca6:	b2ed      	uxtb	r5, r5
	if (last == user->first) {
    9ca8:	f89c 1001 	ldrb.w	r1, [ip, #1]
		last = 0U;
    9cac:	45a9      	cmp	r9, r5
    9cae:	bf98      	it	ls
    9cb0:	2500      	movls	r5, #0
	if (last == user->first) {
    9cb2:	42a9      	cmp	r1, r5
	struct ticker_instance *instance = &_instance[instance_index];
    9cb4:	eb08 0884 	add.w	r8, r8, r4, lsl #2
	if (last == user->first) {
    9cb8:	d02f      	beq.n	9d1a <ticker_start_ext+0xa2>
	user_op = &user->user_op[user->last];
    9cba:	f8dc 1004 	ldr.w	r1, [ip, #4]
    9cbe:	eb06 0446 	add.w	r4, r6, r6, lsl #1
    9cc2:	eb06 0684 	add.w	r6, r6, r4, lsl #2
    9cc6:	eb01 0486 	add.w	r4, r1, r6, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_START;
    9cca:	f04f 0904 	mov.w	r9, #4
    9cce:	f801 9026 	strb.w	r9, [r1, r6, lsl #2]
	user_op->params.start.ticks_at_start = ticks_anchor;
    9cd2:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    9cd4:	9b08      	ldr	r3, [sp, #32]
    9cd6:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    9cd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9cda:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    9cdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9cde:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    9ce0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9ce2:	61a3      	str	r3, [r4, #24]
	user_op->params.start.ext_data = ext_data;
    9ce4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9ce6:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    9ce8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9cea:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    9cec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9cee:	6223      	str	r3, [r4, #32]
	user_op->fp_op_func = fp_op_func;
    9cf0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9cf2:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
    9cf4:	2102      	movs	r1, #2
	user_op->op_context = op_context;
    9cf6:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    9cf8:	7062      	strb	r2, [r4, #1]
	user_op->params.start.lazy = lazy;
    9cfa:	f8a4 e014 	strh.w	lr, [r4, #20]
	user_op->op_context = op_context;
    9cfe:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
    9d00:	62a1      	str	r1, [r4, #40]	; 0x28
	user->last = last;
    9d02:	f88c 5003 	strb.w	r5, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    9d06:	e9d7 3508 	ldrd	r3, r5, [r7, #32]
    9d0a:	4798      	blx	r3
    9d0c:	4643      	mov	r3, r8
    9d0e:	4649      	mov	r1, r9
    9d10:	2200      	movs	r2, #0
    9d12:	47a8      	blx	r5
	return user_op->status;
    9d14:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
    9d16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
    9d1a:	2001      	movs	r0, #1
}
    9d1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9d20:	200011f0 	.word	0x200011f0

00009d24 <ticker_start>:
{
    9d24:	b530      	push	{r4, r5, lr}
    9d26:	b08b      	sub	sp, #44	; 0x2c
    9d28:	e9dd 540e 	ldrd	r5, r4, [sp, #56]	; 0x38
	return ticker_start_ext(instance_index, user_id, ticker_id,
    9d2c:	9500      	str	r5, [sp, #0]
{
    9d2e:	9d10      	ldr	r5, [sp, #64]	; 0x40
	return ticker_start_ext(instance_index, user_id, ticker_id,
    9d30:	9401      	str	r4, [sp, #4]
    9d32:	9502      	str	r5, [sp, #8]
{
    9d34:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
    9d38:	9d12      	ldr	r5, [sp, #72]	; 0x48
	return ticker_start_ext(instance_index, user_id, ticker_id,
    9d3a:	9403      	str	r4, [sp, #12]
    9d3c:	9504      	str	r5, [sp, #16]
{
    9d3e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    9d40:	9d14      	ldr	r5, [sp, #80]	; 0x50
	return ticker_start_ext(instance_index, user_id, ticker_id,
    9d42:	9405      	str	r4, [sp, #20]
    9d44:	9506      	str	r5, [sp, #24]
{
    9d46:	9c15      	ldr	r4, [sp, #84]	; 0x54
    9d48:	9d16      	ldr	r5, [sp, #88]	; 0x58
	return ticker_start_ext(instance_index, user_id, ticker_id,
    9d4a:	9407      	str	r4, [sp, #28]
    9d4c:	2400      	movs	r4, #0
    9d4e:	e9cd 5408 	strd	r5, r4, [sp, #32]
    9d52:	f7ff ff91 	bl	9c78 <ticker_start_ext>
}
    9d56:	b00b      	add	sp, #44	; 0x2c
    9d58:	bd30      	pop	{r4, r5, pc}
    9d5a:	bf00      	nop

00009d5c <ticker_update_ext>:
	struct ticker_instance *instance = &_instance[instance_index];
    9d5c:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 9e00 <ticker_update_ext+0xa4>
{
    9d60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	user = &instance->users[user_id];
    9d64:	272c      	movs	r7, #44	; 0x2c
    9d66:	fb07 c700 	mla	r7, r7, r0, ip
{
    9d6a:	4604      	mov	r4, r0
	user = &instance->users[user_id];
    9d6c:	687d      	ldr	r5, [r7, #4]
{
    9d6e:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
    9d72:	f89d e038 	ldrb.w	lr, [sp, #56]	; 0x38
    9d76:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
    9d7a:	4608      	mov	r0, r1
	user = &instance->users[user_id];
    9d7c:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
	if (last >= user->count_user_op) {
    9d80:	f815 a030 	ldrb.w	sl, [r5, r0, lsl #3]
	last = user->last + 1;
    9d84:	78ce      	ldrb	r6, [r1, #3]
	if (last == user->first) {
    9d86:	f891 9001 	ldrb.w	r9, [r1, #1]
	struct ticker_instance *instance = &_instance[instance_index];
    9d8a:	eb04 0584 	add.w	r5, r4, r4, lsl #2
    9d8e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	last = user->last + 1;
    9d92:	1c75      	adds	r5, r6, #1
    9d94:	b2ed      	uxtb	r5, r5
		last = 0U;
    9d96:	45aa      	cmp	sl, r5
    9d98:	bf98      	it	ls
    9d9a:	2500      	movls	r5, #0
	if (last == user->first) {
    9d9c:	45a9      	cmp	r9, r5
	struct ticker_instance *instance = &_instance[instance_index];
    9d9e:	eb0c 0a84 	add.w	sl, ip, r4, lsl #2
	if (last == user->first) {
    9da2:	d02a      	beq.n	9dfa <ticker_update_ext+0x9e>
	user_op = &user->user_op[user->last];
    9da4:	f8d1 c004 	ldr.w	ip, [r1, #4]
    9da8:	eb06 0446 	add.w	r4, r6, r6, lsl #1
    9dac:	eb06 0684 	add.w	r6, r6, r4, lsl #2
    9db0:	eb0c 0486 	add.w	r4, ip, r6, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    9db4:	f04f 0905 	mov.w	r9, #5
    9db8:	f80c 9026 	strb.w	r9, [ip, r6, lsl #2]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    9dbc:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    9dbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9dc0:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    9dc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9dc4:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    9dc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9dc8:	6123      	str	r3, [r4, #16]
	user_op->fp_op_func = fp_op_func;
    9dca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9dcc:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
    9dce:	2602      	movs	r6, #2
	user_op->op_context = op_context;
    9dd0:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    9dd2:	7062      	strb	r2, [r4, #1]
	user_op->params.update.force = force;
    9dd4:	f884 e016 	strb.w	lr, [r4, #22]
	user_op->op_context = op_context;
    9dd8:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->params.update.lazy = lazy;
    9dda:	f8a4 8014 	strh.w	r8, [r4, #20]
	user_op->params.update.must_expire = must_expire;
    9dde:	f884 b017 	strb.w	fp, [r4, #23]
	user_op->status = TICKER_STATUS_BUSY;
    9de2:	62a6      	str	r6, [r4, #40]	; 0x28
	user->last = last;
    9de4:	70cd      	strb	r5, [r1, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    9de6:	e9d7 3508 	ldrd	r3, r5, [r7, #32]
    9dea:	4798      	blx	r3
    9dec:	4653      	mov	r3, sl
    9dee:	2200      	movs	r2, #0
    9df0:	2104      	movs	r1, #4
    9df2:	47a8      	blx	r5
	return user_op->status;
    9df4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
    9df6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return TICKER_STATUS_FAILURE;
    9dfa:	2001      	movs	r0, #1
}
    9dfc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9e00:	200011f0 	.word	0x200011f0

00009e04 <ticker_update>:
{
    9e04:	b530      	push	{r4, r5, lr}
    9e06:	b089      	sub	sp, #36	; 0x24
    9e08:	e9dd 540c 	ldrd	r5, r4, [sp, #48]	; 0x30
	return ticker_update_ext(instance_index, user_id, ticker_id,
    9e0c:	9500      	str	r5, [sp, #0]
{
    9e0e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	return ticker_update_ext(instance_index, user_id, ticker_id,
    9e10:	9401      	str	r4, [sp, #4]
    9e12:	9502      	str	r5, [sp, #8]
{
    9e14:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
    9e18:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
	return ticker_update_ext(instance_index, user_id, ticker_id,
    9e1c:	9403      	str	r4, [sp, #12]
    9e1e:	9504      	str	r5, [sp, #16]
{
    9e20:	9c11      	ldr	r4, [sp, #68]	; 0x44
    9e22:	9d12      	ldr	r5, [sp, #72]	; 0x48
	return ticker_update_ext(instance_index, user_id, ticker_id,
    9e24:	9405      	str	r4, [sp, #20]
    9e26:	2400      	movs	r4, #0
    9e28:	e9cd 5406 	strd	r5, r4, [sp, #24]
    9e2c:	f7ff ff96 	bl	9d5c <ticker_update_ext>
}
    9e30:	b009      	add	sp, #36	; 0x24
    9e32:	bd30      	pop	{r4, r5, pc}

00009e34 <ticker_stop>:
	struct ticker_instance *instance = &_instance[instance_index];
    9e34:	f8df c084 	ldr.w	ip, [pc, #132]	; 9ebc <ticker_stop+0x88>
{
    9e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	user = &instance->users[user_id];
    9e3c:	272c      	movs	r7, #44	; 0x2c
    9e3e:	fb07 c700 	mla	r7, r7, r0, ip
{
    9e42:	4604      	mov	r4, r0
	user = &instance->users[user_id];
    9e44:	687d      	ldr	r5, [r7, #4]
{
    9e46:	4608      	mov	r0, r1
	user = &instance->users[user_id];
    9e48:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
	if (last >= user->count_user_op) {
    9e4c:	f815 8030 	ldrb.w	r8, [r5, r0, lsl #3]
	last = user->last + 1;
    9e50:	78ce      	ldrb	r6, [r1, #3]
	if (last == user->first) {
    9e52:	f891 e001 	ldrb.w	lr, [r1, #1]
	struct ticker_instance *instance = &_instance[instance_index];
    9e56:	eb04 0584 	add.w	r5, r4, r4, lsl #2
    9e5a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	last = user->last + 1;
    9e5e:	1c75      	adds	r5, r6, #1
    9e60:	b2ed      	uxtb	r5, r5
		last = 0U;
    9e62:	45a8      	cmp	r8, r5
    9e64:	bf98      	it	ls
    9e66:	2500      	movls	r5, #0
	if (last == user->first) {
    9e68:	45ae      	cmp	lr, r5
	struct ticker_instance *instance = &_instance[instance_index];
    9e6a:	eb0c 0484 	add.w	r4, ip, r4, lsl #2
	if (last == user->first) {
    9e6e:	d021      	beq.n	9eb4 <ticker_stop+0x80>
	user_op = &user->user_op[user->last];
    9e70:	f8d1 c004 	ldr.w	ip, [r1, #4]
    9e74:	eb06 0e46 	add.w	lr, r6, r6, lsl #1
    9e78:	eb06 068e 	add.w	r6, r6, lr, lsl #2
    9e7c:	eb0c 0886 	add.w	r8, ip, r6, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    9e80:	f04f 0e06 	mov.w	lr, #6
    9e84:	f80c e026 	strb.w	lr, [ip, r6, lsl #2]
	user_op->fp_op_func = fp_op_func;
    9e88:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
    9e8c:	2602      	movs	r6, #2
	user_op->op_context = op_context;
    9e8e:	9b06      	ldr	r3, [sp, #24]
	user_op->id = ticker_id;
    9e90:	f888 2001 	strb.w	r2, [r8, #1]
	user_op->op_context = op_context;
    9e94:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
    9e98:	f8c8 6028 	str.w	r6, [r8, #40]	; 0x28
	user->last = last;
    9e9c:	70cd      	strb	r5, [r1, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    9e9e:	e9d7 3508 	ldrd	r3, r5, [r7, #32]
    9ea2:	4798      	blx	r3
    9ea4:	4623      	mov	r3, r4
    9ea6:	2200      	movs	r2, #0
    9ea8:	2104      	movs	r1, #4
    9eaa:	47a8      	blx	r5
	return user_op->status;
    9eac:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
}
    9eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    9eb4:	2001      	movs	r0, #1
}
    9eb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9eba:	bf00      	nop
    9ebc:	200011f0 	.word	0x200011f0

00009ec0 <ticker_next_slot_get>:
{
    9ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    9ec4:	4f20      	ldr	r7, [pc, #128]	; (9f48 <ticker_next_slot_get+0x88>)
	user = &instance->users[user_id];
    9ec6:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
    9eca:	fb0c 7c00 	mla	ip, ip, r0, r7
{
    9ece:	4604      	mov	r4, r0
	user = &instance->users[user_id];
    9ed0:	f8dc 5004 	ldr.w	r5, [ip, #4]
{
    9ed4:	4608      	mov	r0, r1
	user = &instance->users[user_id];
    9ed6:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
	if (last >= user->count_user_op) {
    9eda:	f815 8030 	ldrb.w	r8, [r5, r0, lsl #3]
	last = user->last + 1;
    9ede:	78ce      	ldrb	r6, [r1, #3]
	if (last == user->first) {
    9ee0:	f891 e001 	ldrb.w	lr, [r1, #1]
	struct ticker_instance *instance = &_instance[instance_index];
    9ee4:	eb04 0584 	add.w	r5, r4, r4, lsl #2
    9ee8:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	last = user->last + 1;
    9eec:	1c75      	adds	r5, r6, #1
    9eee:	b2ed      	uxtb	r5, r5
		last = 0U;
    9ef0:	45a8      	cmp	r8, r5
    9ef2:	bf98      	it	ls
    9ef4:	2500      	movls	r5, #0
	if (last == user->first) {
    9ef6:	45ae      	cmp	lr, r5
	struct ticker_instance *instance = &_instance[instance_index];
    9ef8:	eb07 0484 	add.w	r4, r7, r4, lsl #2
	if (last == user->first) {
    9efc:	d020      	beq.n	9f40 <ticker_next_slot_get+0x80>
	user_op = &user->user_op[user->last];
    9efe:	f8d1 e004 	ldr.w	lr, [r1, #4]
    9f02:	eb06 0746 	add.w	r7, r6, r6, lsl #1
    9f06:	eb06 0687 	add.w	r6, r6, r7, lsl #2
    9f0a:	eb0e 0786 	add.w	r7, lr, r6, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    9f0e:	f64f 7802 	movw	r8, #65282	; 0xff02
    9f12:	f82e 8026 	strh.w	r8, [lr, r6, lsl #2]
	user_op->params.slot_get.ticks_current = ticks_current;
    9f16:	e9c7 2301 	strd	r2, r3, [r7, #4]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    9f1a:	9b06      	ldr	r3, [sp, #24]
    9f1c:	60fb      	str	r3, [r7, #12]
	user_op->fp_op_func = fp_op_func;
    9f1e:	9b07      	ldr	r3, [sp, #28]
    9f20:	62fb      	str	r3, [r7, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
    9f22:	2602      	movs	r6, #2
	user_op->op_context = op_context;
    9f24:	9b08      	ldr	r3, [sp, #32]
    9f26:	633b      	str	r3, [r7, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
    9f28:	62be      	str	r6, [r7, #40]	; 0x28
	user->last = last;
    9f2a:	70cd      	strb	r5, [r1, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    9f2c:	e9dc 3508 	ldrd	r3, r5, [ip, #32]
    9f30:	4798      	blx	r3
    9f32:	4623      	mov	r3, r4
    9f34:	2200      	movs	r2, #0
    9f36:	2104      	movs	r1, #4
    9f38:	47a8      	blx	r5
	return user_op->status;
    9f3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
}
    9f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    9f40:	2001      	movs	r0, #1
}
    9f42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9f46:	bf00      	nop
    9f48:	200011f0 	.word	0x200011f0

00009f4c <ticker_job_sched>:
{
    9f4c:	b570      	push	{r4, r5, r6, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    9f4e:	4d0a      	ldr	r5, [pc, #40]	; (9f78 <ticker_job_sched+0x2c>)
    9f50:	222c      	movs	r2, #44	; 0x2c
    9f52:	fb02 5200 	mla	r2, r2, r0, r5
    9f56:	e9d2 3608 	ldrd	r3, r6, [r2, #32]
{
    9f5a:	4604      	mov	r4, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    9f5c:	4608      	mov	r0, r1
    9f5e:	4798      	blx	r3
	struct ticker_instance *instance = &_instance[instance_index];
    9f60:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    9f64:	eb04 0343 	add.w	r3, r4, r3, lsl #1
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    9f68:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    9f6c:	46b4      	mov	ip, r6
    9f6e:	2200      	movs	r2, #0
}
    9f70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    9f74:	2104      	movs	r1, #4
    9f76:	4760      	bx	ip
    9f78:	200011f0 	.word	0x200011f0

00009f7c <ticker_ticks_now_get>:
	return cntr_cnt_get();
    9f7c:	f008 be78 	b.w	12c70 <cntr_cnt_get>

00009f80 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    9f80:	1a40      	subs	r0, r0, r1
}
    9f82:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9f86:	4770      	bx	lr

00009f88 <ll_addr_get>:
static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t *ll_addr_get(uint8_t addr_type, uint8_t *bdaddr)
{
	if (addr_type > 1) {
    9f88:	2801      	cmp	r0, #1
    9f8a:	d813      	bhi.n	9fb4 <ll_addr_get+0x2c>
{
    9f8c:	b508      	push	{r3, lr}
		return NULL;
	}

	if (addr_type) {
    9f8e:	b948      	cbnz	r0, 9fa4 <ll_addr_get+0x1c>
		}

		return rnd_addr;
	}

	if (bdaddr) {
    9f90:	b131      	cbz	r1, 9fa0 <ll_addr_get+0x18>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    9f92:	4608      	mov	r0, r1
    9f94:	2206      	movs	r2, #6
    9f96:	4909      	ldr	r1, [pc, #36]	; (9fbc <ll_addr_get+0x34>)
    9f98:	f00c fd8a 	bl	16ab0 <memcpy>
	}

	return pub_addr;
    9f9c:	4807      	ldr	r0, [pc, #28]	; (9fbc <ll_addr_get+0x34>)
}
    9f9e:	bd08      	pop	{r3, pc}
	return pub_addr;
    9fa0:	4806      	ldr	r0, [pc, #24]	; (9fbc <ll_addr_get+0x34>)
}
    9fa2:	bd08      	pop	{r3, pc}
		if (bdaddr) {
    9fa4:	b141      	cbz	r1, 9fb8 <ll_addr_get+0x30>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
    9fa6:	4608      	mov	r0, r1
    9fa8:	2206      	movs	r2, #6
    9faa:	4905      	ldr	r1, [pc, #20]	; (9fc0 <ll_addr_get+0x38>)
    9fac:	f00c fd80 	bl	16ab0 <memcpy>
		return rnd_addr;
    9fb0:	4803      	ldr	r0, [pc, #12]	; (9fc0 <ll_addr_get+0x38>)
}
    9fb2:	bd08      	pop	{r3, pc}
		return NULL;
    9fb4:	2000      	movs	r0, #0
}
    9fb6:	4770      	bx	lr
		return rnd_addr;
    9fb8:	4801      	ldr	r0, [pc, #4]	; (9fc0 <ll_addr_get+0x38>)
}
    9fba:	bd08      	pop	{r3, pc}
    9fbc:	2000121c 	.word	0x2000121c
    9fc0:	20001224 	.word	0x20001224

00009fc4 <ll_addr_set>:

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
    9fc4:	b570      	push	{r4, r5, r6, lr}
    9fc6:	4604      	mov	r4, r0
			return BT_HCI_ERR_CMD_DISALLOWED;
		}
	}

	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
    9fc8:	2000      	movs	r0, #0
{
    9fca:	460e      	mov	r6, r1
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
    9fcc:	f002 ff08 	bl	cde0 <ull_scan_is_enabled>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
    9fd0:	f010 0506 	ands.w	r5, r0, #6
    9fd4:	d10c      	bne.n	9ff0 <ll_addr_set+0x2c>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    9fd6:	4631      	mov	r1, r6
    9fd8:	2206      	movs	r2, #6
	if (addr_type) {
    9fda:	b124      	cbz	r4, 9fe6 <ll_addr_set+0x22>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    9fdc:	4805      	ldr	r0, [pc, #20]	; (9ff4 <ll_addr_set+0x30>)
    9fde:	f00c fd67 	bl	16ab0 <memcpy>
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
    9fe2:	4628      	mov	r0, r5
}
    9fe4:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    9fe6:	4804      	ldr	r0, [pc, #16]	; (9ff8 <ll_addr_set+0x34>)
    9fe8:	f00c fd62 	bl	16ab0 <memcpy>
	return 0;
    9fec:	4620      	mov	r0, r4
}
    9fee:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    9ff0:	200c      	movs	r0, #12
}
    9ff2:	bd70      	pop	{r4, r5, r6, pc}
    9ff4:	20001224 	.word	0x20001224
    9ff8:	2000121c 	.word	0x2000121c

00009ffc <ll_tx_pwr_lvl_get>:
#include "ll.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
	switch (handle_type) {
    9ffc:	2802      	cmp	r0, #2
    9ffe:	d001      	beq.n	a004 <ll_tx_pwr_lvl_get+0x8>
			}
			break;
		}
#endif /* CONFIG_BT_CONN */
		default: {
			return BT_HCI_ERR_UNKNOWN_CMD;
    a000:	2001      	movs	r0, #1
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
    a002:	4770      	bx	lr
{
    a004:	b538      	push	{r3, r4, r5, lr}
    a006:	4604      	mov	r4, r0
			conn = ll_connected_get(handle);
    a008:	4608      	mov	r0, r1
    a00a:	461d      	mov	r5, r3
    a00c:	f003 fab2 	bl	d574 <ll_connected_get>
			if (!conn) {
    a010:	b110      	cbz	r0, a018 <ll_tx_pwr_lvl_get+0x1c>
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
    a012:	2000      	movs	r0, #0
    a014:	7028      	strb	r0, [r5, #0]
}
    a016:	bd38      	pop	{r3, r4, r5, pc}
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
    a018:	4620      	mov	r0, r4
}
    a01a:	bd38      	pop	{r3, r4, r5, pc}

0000a01c <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
    a01c:	2300      	movs	r3, #0
    a01e:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
    a020:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
    a022:	4770      	bx	lr

0000a024 <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(const struct device *unused)
{
    a024:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    a026:	4802      	ldr	r0, [pc, #8]	; (a030 <hci_driver_init+0xc>)
    a028:	f7fb fe30 	bl	5c8c <bt_hci_driver_register>

	return 0;
}
    a02c:	2000      	movs	r0, #0
    a02e:	bd08      	pop	{r3, pc}
    a030:	00019a50 	.word	0x00019a50

0000a034 <hci_driver_send>:
{
    a034:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
    a036:	8983      	ldrh	r3, [r0, #12]
{
    a038:	b083      	sub	sp, #12
	if (!buf->len) {
    a03a:	b123      	cbz	r3, a046 <hci_driver_send+0x12>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    a03c:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
    a03e:	4604      	mov	r4, r0
    a040:	b1c3      	cbz	r3, a074 <hci_driver_send+0x40>
    a042:	2b02      	cmp	r3, #2
    a044:	d004      	beq.n	a050 <hci_driver_send+0x1c>
    a046:	f06f 0515 	mvn.w	r5, #21
}
    a04a:	4628      	mov	r0, r5
    a04c:	b003      	add	sp, #12
    a04e:	bd30      	pop	{r4, r5, pc}
	err = hci_acl_handle(buf, &evt);
    a050:	a901      	add	r1, sp, #4
    a052:	f000 fedb 	bl	ae0c <hci_acl_handle>
	if (evt) {
    a056:	9b01      	ldr	r3, [sp, #4]
	err = hci_acl_handle(buf, &evt);
    a058:	4605      	mov	r5, r0
	if (evt) {
    a05a:	b113      	cbz	r3, a062 <hci_driver_send+0x2e>
		bt_recv_prio(evt);
    a05c:	4618      	mov	r0, r3
    a05e:	f7fb fdf7 	bl	5c50 <bt_recv_prio>
	if (!err) {
    a062:	2d00      	cmp	r5, #0
    a064:	d1f1      	bne.n	a04a <hci_driver_send+0x16>
		net_buf_unref(buf);
    a066:	4620      	mov	r0, r4
    a068:	f009 fd68 	bl	13b3c <net_buf_unref>
    a06c:	2500      	movs	r5, #0
}
    a06e:	4628      	mov	r0, r5
    a070:	b003      	add	sp, #12
    a072:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf, (void **) &node_rx);
    a074:	a901      	add	r1, sp, #4
	struct node_rx_pdu *node_rx = NULL;
    a076:	9301      	str	r3, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
    a078:	f000 fac4 	bl	a604 <hci_cmd_handle>
	if (evt) {
    a07c:	2800      	cmp	r0, #0
    a07e:	d0f2      	beq.n	a066 <hci_driver_send+0x32>
		bt_recv_prio(evt);
    a080:	f7fb fde6 	bl	5c50 <bt_recv_prio>
		if (node_rx) {
    a084:	9d01      	ldr	r5, [sp, #4]
    a086:	2d00      	cmp	r5, #0
    a088:	d0ed      	beq.n	a066 <hci_driver_send+0x32>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    a08a:	4628      	mov	r0, r5
    a08c:	f001 fab6 	bl	b5fc <hci_get_class>
    a090:	7168      	strb	r0, [r5, #5]
			k_fifo_put(&recv_fifo, node_rx);
    a092:	9901      	ldr	r1, [sp, #4]
    a094:	4801      	ldr	r0, [pc, #4]	; (a09c <hci_driver_send+0x68>)
    a096:	f00e fdb8 	bl	18c0a <k_queue_append>
	if (!err) {
    a09a:	e7e4      	b.n	a066 <hci_driver_send+0x32>
    a09c:	20000688 	.word	0x20000688

0000a0a0 <recv_thread>:
{
    a0a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	return z_impl_k_queue_get(queue, timeout);
    a0a2:	4d38      	ldr	r5, [pc, #224]	; (a184 <recv_thread+0xe4>)
		LL_ASSERT(0);
    a0a4:	4f38      	ldr	r7, [pc, #224]	; (a188 <recv_thread+0xe8>)
    a0a6:	4e39      	ldr	r6, [pc, #228]	; (a18c <recv_thread+0xec>)
{
    a0a8:	b083      	sub	sp, #12
    a0aa:	e016      	b.n	a0da <recv_thread+0x3a>
	switch (class) {
    a0ac:	2b00      	cmp	r3, #0
    a0ae:	d13d      	bne.n	a12c <recv_thread+0x8c>
		LL_ASSERT(0);
    a0b0:	4837      	ldr	r0, [pc, #220]	; (a190 <recv_thread+0xf0>)
    a0b2:	f240 1347 	movw	r3, #327	; 0x147
    a0b6:	463a      	mov	r2, r7
    a0b8:	4631      	mov	r1, r6
    a0ba:	f00b fe41 	bl	15d40 <printk>
    a0be:	4040      	eors	r0, r0
    a0c0:	f380 8811 	msr	BASEPRI, r0
    a0c4:	f04f 0003 	mov.w	r0, #3
    a0c8:	df02      	svc	2
	node_rx->hdr.next = NULL;
    a0ca:	9b01      	ldr	r3, [sp, #4]
    a0cc:	2200      	movs	r2, #0
    a0ce:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    a0d0:	a801      	add	r0, sp, #4
    a0d2:	f002 f987 	bl	c3e4 <ll_rx_mem_release>
	z_impl_k_yield();
    a0d6:	f00b f82f 	bl	15138 <z_impl_k_yield>
	return z_impl_k_queue_get(queue, timeout);
    a0da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a0de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a0e2:	4628      	mov	r0, r5
    a0e4:	f00a fdac 	bl	14c40 <z_impl_k_queue_get>
		if (node_rx && !buf) {
    a0e8:	2800      	cmp	r0, #0
    a0ea:	d0f4      	beq.n	a0d6 <recv_thread+0x36>
	uint8_t class = node_rx->hdr.user_meta;
    a0ec:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
    a0ee:	9001      	str	r0, [sp, #4]
	switch (class) {
    a0f0:	2b04      	cmp	r3, #4
    a0f2:	d9db      	bls.n	a0ac <recv_thread+0xc>
    a0f4:	2b05      	cmp	r3, #5
    a0f6:	d1db      	bne.n	a0b0 <recv_thread+0x10>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    a0f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a0fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a100:	2003      	movs	r0, #3
    a102:	f7fa febb 	bl	4e7c <bt_buf_get_rx>
    a106:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    a108:	4601      	mov	r1, r0
    a10a:	9801      	ldr	r0, [sp, #4]
    a10c:	f000 fefe 	bl	af0c <hci_acl_encode>
	node_rx->hdr.next = NULL;
    a110:	9b01      	ldr	r3, [sp, #4]
    a112:	2200      	movs	r2, #0
    a114:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    a116:	a801      	add	r0, sp, #4
    a118:	f002 f964 	bl	c3e4 <ll_rx_mem_release>
		if (buf) {
    a11c:	2c00      	cmp	r4, #0
    a11e:	d0da      	beq.n	a0d6 <recv_thread+0x36>
			if (buf->len) {
    a120:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    a122:	4620      	mov	r0, r4
			if (buf->len) {
    a124:	b1db      	cbz	r3, a15e <recv_thread+0xbe>
				bt_recv(buf);
    a126:	f7fb fd19 	bl	5b5c <bt_recv>
    a12a:	e7d4      	b.n	a0d6 <recv_thread+0x36>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    a12c:	2b02      	cmp	r3, #2
    a12e:	d019      	beq.n	a164 <recv_thread+0xc4>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    a130:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a134:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a138:	2001      	movs	r0, #1
    a13a:	f7fa fe9f 	bl	4e7c <bt_buf_get_rx>
    a13e:	4604      	mov	r4, r0
		if (buf) {
    a140:	9801      	ldr	r0, [sp, #4]
    a142:	b1cc      	cbz	r4, a178 <recv_thread+0xd8>
			hci_evt_encode(node_rx, buf);
    a144:	4621      	mov	r1, r4
    a146:	f000 ff1b 	bl	af80 <hci_evt_encode>
	node_rx->hdr.next = NULL;
    a14a:	9b01      	ldr	r3, [sp, #4]
    a14c:	2200      	movs	r2, #0
    a14e:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    a150:	a801      	add	r0, sp, #4
    a152:	f002 f947 	bl	c3e4 <ll_rx_mem_release>
			if (buf->len) {
    a156:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    a158:	4620      	mov	r0, r4
			if (buf->len) {
    a15a:	2b00      	cmp	r3, #0
    a15c:	d1e3      	bne.n	a126 <recv_thread+0x86>
				net_buf_unref(buf);
    a15e:	f009 fced 	bl	13b3c <net_buf_unref>
    a162:	e7b8      	b.n	a0d6 <recv_thread+0x36>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
    a164:	2200      	movs	r2, #0
    a166:	2300      	movs	r3, #0
    a168:	2101      	movs	r1, #1
    a16a:	2000      	movs	r0, #0
    a16c:	f7fa febc 	bl	4ee8 <bt_buf_get_evt>
    a170:	4604      	mov	r4, r0
		if (buf) {
    a172:	9801      	ldr	r0, [sp, #4]
    a174:	2c00      	cmp	r4, #0
    a176:	d1e5      	bne.n	a144 <recv_thread+0xa4>
	node_rx->hdr.next = NULL;
    a178:	6004      	str	r4, [r0, #0]
	ll_rx_mem_release((void **)&node_rx);
    a17a:	a801      	add	r0, sp, #4
    a17c:	f002 f932 	bl	c3e4 <ll_rx_mem_release>
		if (buf) {
    a180:	e7a9      	b.n	a0d6 <recv_thread+0x36>
    a182:	bf00      	nop
    a184:	20000688 	.word	0x20000688
    a188:	000199ec 	.word	0x000199ec
    a18c:	00019a2c 	.word	0x00019a2c
    a190:	000199cc 	.word	0x000199cc

0000a194 <prio_recv_thread>:
{
    a194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
    a198:	f8df 80b4 	ldr.w	r8, [pc, #180]	; a250 <prio_recv_thread+0xbc>
				k_fifo_put(&recv_fifo, node_rx);
    a19c:	4f2b      	ldr	r7, [pc, #172]	; (a24c <prio_recv_thread+0xb8>)
{
    a19e:	b082      	sub	sp, #8
    a1a0:	e00c      	b.n	a1bc <prio_recv_thread+0x28>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    a1a2:	f7fa fea1 	bl	4ee8 <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    a1a6:	4622      	mov	r2, r4
    a1a8:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    a1ac:	4604      	mov	r4, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    a1ae:	f001 fa0d 	bl	b5cc <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    a1b2:	4620      	mov	r0, r4
    a1b4:	f7fb fd4c 	bl	5c50 <bt_recv_prio>
	z_impl_k_yield();
    a1b8:	f00a ffbe 	bl	15138 <z_impl_k_yield>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    a1bc:	f10d 0102 	add.w	r1, sp, #2
    a1c0:	a801      	add	r0, sp, #4
    a1c2:	f001 ffb1 	bl	c128 <ll_rx_get>
    a1c6:	4604      	mov	r4, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    a1c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a1cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a1d0:	2100      	movs	r1, #0
    a1d2:	2013      	movs	r0, #19
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    a1d4:	2c00      	cmp	r4, #0
    a1d6:	d1e4      	bne.n	a1a2 <prio_recv_thread+0xe>
		if (node_rx) {
    a1d8:	9b01      	ldr	r3, [sp, #4]
    a1da:	b193      	cbz	r3, a202 <prio_recv_thread+0x6e>
			ll_rx_dequeue();
    a1dc:	f002 f88e 	bl	c2fc <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    a1e0:	9e01      	ldr	r6, [sp, #4]
    a1e2:	4630      	mov	r0, r6
    a1e4:	f001 fa0a 	bl	b5fc <hci_get_class>
			buf = process_prio_evt(node_rx, &evt_flags);
    a1e8:	9d01      	ldr	r5, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    a1ea:	7170      	strb	r0, [r6, #5]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
    a1ec:	796b      	ldrb	r3, [r5, #5]
    a1ee:	2b03      	cmp	r3, #3
    a1f0:	d102      	bne.n	a1f8 <prio_recv_thread+0x64>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
    a1f2:	792b      	ldrb	r3, [r5, #4]
    a1f4:	2b15      	cmp	r3, #21
    a1f6:	d00c      	beq.n	a212 <prio_recv_thread+0x7e>
				k_fifo_put(&recv_fifo, node_rx);
    a1f8:	4629      	mov	r1, r5
    a1fa:	4638      	mov	r0, r7
    a1fc:	f00e fd05 	bl	18c0a <k_queue_append>
			continue;
    a200:	e7dc      	b.n	a1bc <prio_recv_thread+0x28>
	return z_impl_k_sem_take(sem, timeout);
    a202:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a206:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a20a:	4640      	mov	r0, r8
    a20c:	f00b f8a8 	bl	15360 <z_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    a210:	e7d4      	b.n	a1bc <prio_recv_thread+0x28>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    a212:	4621      	mov	r1, r4
    a214:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a218:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a21c:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
    a21e:	88ee      	ldrh	r6, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    a220:	f7fa fe62 	bl	4ee8 <bt_buf_get_evt>
    a224:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
    a226:	4622      	mov	r2, r4
    a228:	f105 001c 	add.w	r0, r5, #28
    a22c:	4631      	mov	r1, r6
    a22e:	f000 fe55 	bl	aedc <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
    a232:	4630      	mov	r0, r6
    a234:	f000 fe62 	bl	aefc <hci_disconn_complete_process>
				bt_recv_prio(buf);
    a238:	4620      	mov	r0, r4
			if (buf) {
    a23a:	b124      	cbz	r4, a246 <prio_recv_thread+0xb2>
				bt_recv_prio(buf);
    a23c:	f7fb fd08 	bl	5c50 <bt_recv_prio>
					net_buf_unref(buf);
    a240:	4620      	mov	r0, r4
    a242:	f009 fc7b 	bl	13b3c <net_buf_unref>
    a246:	9d01      	ldr	r5, [sp, #4]
    a248:	e7d6      	b.n	a1f8 <prio_recv_thread+0x64>
    a24a:	bf00      	nop
    a24c:	20000688 	.word	0x20000688
    a250:	20000658 	.word	0x20000658

0000a254 <hci_driver_open>:
{
    a254:	b5d0      	push	{r4, r6, r7, lr}
	err = ll_init(&sem_prio_recv);
    a256:	481a      	ldr	r0, [pc, #104]	; (a2c0 <hci_driver_open+0x6c>)
{
    a258:	b088      	sub	sp, #32
	err = ll_init(&sem_prio_recv);
    a25a:	f001 fc49 	bl	baf0 <ll_init>
	if (err) {
    a25e:	4604      	mov	r4, r0
    a260:	bb58      	cbnz	r0, a2ba <hci_driver_open+0x66>
	hci_init(NULL);
    a262:	f001 f9e1 	bl	b628 <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
    a266:	2600      	movs	r6, #0
    a268:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    a26a:	f06f 0309 	mvn.w	r3, #9
    a26e:	9303      	str	r3, [sp, #12]
    a270:	e9cd 6706 	strd	r6, r7, [sp, #24]
    a274:	e9cd 4401 	strd	r4, r4, [sp, #4]
    a278:	4b12      	ldr	r3, [pc, #72]	; (a2c4 <hci_driver_open+0x70>)
    a27a:	4913      	ldr	r1, [pc, #76]	; (a2c8 <hci_driver_open+0x74>)
    a27c:	9404      	str	r4, [sp, #16]
    a27e:	9400      	str	r4, [sp, #0]
    a280:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    a284:	4811      	ldr	r0, [pc, #68]	; (a2cc <hci_driver_open+0x78>)
    a286:	f00b f8df 	bl	15448 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    a28a:	4911      	ldr	r1, [pc, #68]	; (a2d0 <hci_driver_open+0x7c>)
    a28c:	480f      	ldr	r0, [pc, #60]	; (a2cc <hci_driver_open+0x78>)
    a28e:	f00e fe1a 	bl	18ec6 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    a292:	f06f 0307 	mvn.w	r3, #7
    a296:	9303      	str	r3, [sp, #12]
    a298:	e9cd 6706 	strd	r6, r7, [sp, #24]
    a29c:	e9cd 4401 	strd	r4, r4, [sp, #4]
    a2a0:	4b0c      	ldr	r3, [pc, #48]	; (a2d4 <hci_driver_open+0x80>)
    a2a2:	490d      	ldr	r1, [pc, #52]	; (a2d8 <hci_driver_open+0x84>)
    a2a4:	9404      	str	r4, [sp, #16]
    a2a6:	9400      	str	r4, [sp, #0]
    a2a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    a2ac:	480b      	ldr	r0, [pc, #44]	; (a2dc <hci_driver_open+0x88>)
    a2ae:	f00b f8cb 	bl	15448 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    a2b2:	490b      	ldr	r1, [pc, #44]	; (a2e0 <hci_driver_open+0x8c>)
    a2b4:	4809      	ldr	r0, [pc, #36]	; (a2dc <hci_driver_open+0x88>)
    a2b6:	f00e fe06 	bl	18ec6 <z_impl_k_thread_name_set>
}
    a2ba:	4620      	mov	r0, r4
    a2bc:	b008      	add	sp, #32
    a2be:	bdd0      	pop	{r4, r6, r7, pc}
    a2c0:	20000658 	.word	0x20000658
    a2c4:	0000a195 	.word	0x0000a195
    a2c8:	20002780 	.word	0x20002780
    a2cc:	20000ad8 	.word	0x20000ad8
    a2d0:	00019a30 	.word	0x00019a30
    a2d4:	0000a0a1 	.word	0x0000a0a1
    a2d8:	20002940 	.word	0x20002940
    a2dc:	20000b58 	.word	0x20000b58
    a2e0:	00019a3c 	.word	0x00019a3c

0000a2e4 <cmd_complete_status>:
{
	return bt_hci_cmd_status_create(_opcode, status);
}

static struct net_buf *cmd_complete_status(uint8_t status)
{
    a2e4:	b538      	push	{r3, r4, r5, lr}
	struct net_buf *buf;
	struct bt_hci_evt_cc_status *ccst;

	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    a2e6:	4b07      	ldr	r3, [pc, #28]	; (a304 <cmd_complete_status+0x20>)
{
    a2e8:	4605      	mov	r5, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    a2ea:	2101      	movs	r1, #1
    a2ec:	8818      	ldrh	r0, [r3, #0]
    a2ee:	f00c ff55 	bl	1719c <bt_hci_cmd_complete_create>
    a2f2:	2101      	movs	r1, #1
    a2f4:	4604      	mov	r4, r0
    a2f6:	3008      	adds	r0, #8
    a2f8:	f00e fa7f 	bl	187fa <net_buf_simple_add>
    a2fc:	4603      	mov	r3, r0
	ccst = net_buf_add(buf, sizeof(*ccst));
	ccst->status = status;

	return buf;
}
    a2fe:	4620      	mov	r0, r4
	ccst->status = status;
    a300:	701d      	strb	r5, [r3, #0]
}
    a302:	bd38      	pop	{r3, r4, r5, pc}
    a304:	20002232 	.word	0x20002232

0000a308 <meta_evt>:

static void *meta_evt(struct net_buf *buf, uint8_t subevt, uint8_t melen)
{
    a308:	b570      	push	{r4, r5, r6, lr}
    a30a:	f100 0408 	add.w	r4, r0, #8
    a30e:	460e      	mov	r6, r1
    a310:	4620      	mov	r0, r4
    a312:	2102      	movs	r1, #2
    a314:	4615      	mov	r5, r2
    a316:	f00e fa70 	bl	187fa <net_buf_simple_add>
	struct bt_hci_evt_le_meta_event *me;

	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    a31a:	1c6b      	adds	r3, r5, #1
	hdr->evt = evt;
    a31c:	223e      	movs	r2, #62	; 0x3e
    a31e:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
    a320:	7043      	strb	r3, [r0, #1]
    a322:	2101      	movs	r1, #1
    a324:	4620      	mov	r0, r4
    a326:	f00e fa68 	bl	187fa <net_buf_simple_add>
	me = net_buf_add(buf, sizeof(*me));
	me->subevent = subevt;
    a32a:	7006      	strb	r6, [r0, #0]
    a32c:	4629      	mov	r1, r5
    a32e:	4620      	mov	r0, r4

	return net_buf_add(buf, melen);
}
    a330:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a334:	f00e ba61 	b.w	187fa <net_buf_simple_add>

0000a338 <encrypt_change.part.0>:
	sep->handle = sys_cpu_to_le16(handle);
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
}

static void encrypt_change(uint8_t err, uint16_t handle,
    a338:	b570      	push	{r4, r5, r6, lr}
    a33a:	f102 0508 	add.w	r5, r2, #8
    a33e:	4604      	mov	r4, r0
    a340:	460e      	mov	r6, r1
    a342:	4628      	mov	r0, r5
    a344:	2102      	movs	r1, #2
    a346:	f00e fa58 	bl	187fa <net_buf_simple_add>
    a34a:	4603      	mov	r3, r0
	hdr->evt = evt;
    a34c:	2208      	movs	r2, #8
	hdr->len = len;
    a34e:	2104      	movs	r1, #4
	hdr->evt = evt;
    a350:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
    a352:	7059      	strb	r1, [r3, #1]
    a354:	4628      	mov	r0, r5
    a356:	f00e fa50 	bl	187fa <net_buf_simple_add>
	hci_evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
	ep = net_buf_add(buf, sizeof(*ep));

	ep->status = err;
	ep->handle = sys_cpu_to_le16(handle);
	ep->encrypt = !err ? 1 : 0;
    a35a:	fab4 f384 	clz	r3, r4
    a35e:	095b      	lsrs	r3, r3, #5
	ep->status = err;
    a360:	7004      	strb	r4, [r0, #0]
	ep->encrypt = !err ? 1 : 0;
    a362:	70c3      	strb	r3, [r0, #3]
	ep->handle = sys_cpu_to_le16(handle);
    a364:	f8a0 6001 	strh.w	r6, [r0, #1]
}
    a368:	bd70      	pop	{r4, r5, r6, pc}
    a36a:	bf00      	nop

0000a36c <le_remote_feat_complete>:
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
    a36c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a370:	4c17      	ldr	r4, [pc, #92]	; (a3d0 <le_remote_feat_complete+0x64>)
    a372:	6866      	ldr	r6, [r4, #4]
    a374:	f04f 0900 	mov.w	r9, #0
    a378:	464c      	mov	r4, r9
    a37a:	f006 5500 	and.w	r5, r6, #536870912	; 0x20000000
{
    a37e:	4617      	mov	r7, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a380:	ea54 0205 	orrs.w	r2, r4, r5
    a384:	d009      	beq.n	a39a <le_remote_feat_complete+0x2e>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    a386:	4a13      	ldr	r2, [pc, #76]	; (a3d4 <le_remote_feat_complete+0x68>)
    a388:	6812      	ldr	r2, [r2, #0]
    a38a:	4606      	mov	r6, r0
    a38c:	4688      	mov	r8, r1
    a38e:	f002 0008 	and.w	r0, r2, #8
    a392:	4649      	mov	r1, r9
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a394:	ea50 0201 	orrs.w	r2, r0, r1
    a398:	d101      	bne.n	a39e <le_remote_feat_complete+0x32>
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    a39a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	sep = meta_evt(buf, BT_HCI_EVT_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    a39e:	4618      	mov	r0, r3
    a3a0:	220b      	movs	r2, #11
    a3a2:	2104      	movs	r1, #4
    a3a4:	f7ff ffb0 	bl	a308 <meta_evt>
	sep->status = status;
    a3a8:	7006      	strb	r6, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    a3aa:	f8a0 7001 	strh.w	r7, [r0, #1]
	if (!status) {
    a3ae:	b93e      	cbnz	r6, a3c0 <le_remote_feat_complete+0x54>
		memcpy(&sep->features[0],
    a3b0:	f108 0104 	add.w	r1, r8, #4
    a3b4:	3003      	adds	r0, #3
}
    a3b6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		memcpy(&sep->features[0],
    a3ba:	2208      	movs	r2, #8
    a3bc:	f00c bb78 	b.w	16ab0 <memcpy>
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
    a3c0:	4649      	mov	r1, r9
    a3c2:	3003      	adds	r0, #3
}
    a3c4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
    a3c8:	2208      	movs	r2, #8
    a3ca:	f00c bb9c 	b.w	16b06 <memset>
    a3ce:	bf00      	nop
    a3d0:	20000120 	.word	0x20000120
    a3d4:	20000128 	.word	0x20000128

0000a3d8 <dup_found.isra.0>:
static bool dup_found(uint8_t adv_type, uint8_t addr_type, uint8_t *addr,
    a3d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (dup_count >= 0) {
    a3dc:	f8df 90b8 	ldr.w	r9, [pc, #184]	; a498 <dup_found.isra.0+0xc0>
    a3e0:	f8d9 3000 	ldr.w	r3, [r9]
    a3e4:	2b00      	cmp	r3, #0
    a3e6:	db34      	blt.n	a452 <dup_found.isra.0+0x7a>
    a3e8:	4680      	mov	r8, r0
    a3ea:	460f      	mov	r7, r1
    a3ec:	4616      	mov	r6, r2
		for (i = 0; i < dup_count; i++) {
    a3ee:	d012      	beq.n	a416 <dup_found.isra.0+0x3e>
    a3f0:	4c26      	ldr	r4, [pc, #152]	; (a48c <dup_found.isra.0+0xb4>)
    a3f2:	2500      	movs	r5, #0
			if (memcmp(addr, &dup_filter[i].addr.a.val[0],
    a3f4:	2206      	movs	r2, #6
    a3f6:	4621      	mov	r1, r4
    a3f8:	4630      	mov	r0, r6
    a3fa:	f00c fb49 	bl	16a90 <memcmp>
    a3fe:	b918      	cbnz	r0, a408 <dup_found.isra.0+0x30>
				   sizeof(bt_addr_t)) ||
    a400:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    a404:	42bb      	cmp	r3, r7
    a406:	d027      	beq.n	a458 <dup_found.isra.0+0x80>
		for (i = 0; i < dup_count; i++) {
    a408:	f8d9 3000 	ldr.w	r3, [r9]
    a40c:	3501      	adds	r5, #1
    a40e:	429d      	cmp	r5, r3
    a410:	f104 0408 	add.w	r4, r4, #8
    a414:	dbee      	blt.n	a3f4 <dup_found.isra.0+0x1c>
		memcpy(&dup_filter[dup_curr].addr.a.val[0], addr,
    a416:	4c1e      	ldr	r4, [pc, #120]	; (a490 <dup_found.isra.0+0xb8>)
    a418:	4d1e      	ldr	r5, [pc, #120]	; (a494 <dup_found.isra.0+0xbc>)
    a41a:	6820      	ldr	r0, [r4, #0]
    a41c:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    a420:	4631      	mov	r1, r6
    a422:	2206      	movs	r2, #6
    a424:	3002      	adds	r0, #2
    a426:	f00c fb43 	bl	16ab0 <memcpy>
		dup_filter[dup_curr].addr.type = addr_type;
    a42a:	6823      	ldr	r3, [r4, #0]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    a42c:	f8d9 1000 	ldr.w	r1, [r9]
		dup_filter[dup_curr].mask = BIT(adv_type);
    a430:	2201      	movs	r2, #1
		dup_filter[dup_curr].addr.type = addr_type;
    a432:	eb05 00c3 	add.w	r0, r5, r3, lsl #3
		dup_filter[dup_curr].mask = BIT(adv_type);
    a436:	fa02 f808 	lsl.w	r8, r2, r8
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    a43a:	290f      	cmp	r1, #15
		dup_filter[dup_curr].mask = BIT(adv_type);
    a43c:	f805 8033 	strb.w	r8, [r5, r3, lsl #3]
		dup_filter[dup_curr].addr.type = addr_type;
    a440:	7047      	strb	r7, [r0, #1]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    a442:	dc1c      	bgt.n	a47e <dup_found.isra.0+0xa6>
			dup_count++;
    a444:	3101      	adds	r1, #1
			dup_curr = dup_count;
    a446:	460b      	mov	r3, r1
			dup_count++;
    a448:	f8c9 1000 	str.w	r1, [r9]
			dup_curr = dup_count;
    a44c:	6021      	str	r1, [r4, #0]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    a44e:	2b10      	cmp	r3, #16
    a450:	d018      	beq.n	a484 <dup_found.isra.0+0xac>
	return false;
    a452:	2000      	movs	r0, #0
}
    a454:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!(dup_filter[i].mask & BIT(adv_type))) {
    a458:	490e      	ldr	r1, [pc, #56]	; (a494 <dup_found.isra.0+0xbc>)
    a45a:	f811 2035 	ldrb.w	r2, [r1, r5, lsl #3]
    a45e:	fa22 f308 	lsr.w	r3, r2, r8
    a462:	f013 0301 	ands.w	r3, r3, #1
		dup_filter[i].mask |= BIT(adv_type);
    a466:	f04f 0001 	mov.w	r0, #1
	if (!(dup_filter[i].mask & BIT(adv_type))) {
    a46a:	d1f3      	bne.n	a454 <dup_found.isra.0+0x7c>
		dup_filter[i].mask |= BIT(adv_type);
    a46c:	fa00 f808 	lsl.w	r8, r0, r8
    a470:	ea42 0208 	orr.w	r2, r2, r8
    a474:	f801 2035 	strb.w	r2, [r1, r5, lsl #3]
		return false;
    a478:	4618      	mov	r0, r3
}
    a47a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			dup_curr++;
    a47e:	3301      	adds	r3, #1
    a480:	6023      	str	r3, [r4, #0]
    a482:	e7e4      	b.n	a44e <dup_found.isra.0+0x76>
			dup_curr = 0U;
    a484:	2000      	movs	r0, #0
    a486:	6020      	str	r0, [r4, #0]
    a488:	e7e4      	b.n	a454 <dup_found.isra.0+0x7c>
    a48a:	bf00      	nop
    a48c:	2000123a 	.word	0x2000123a
    a490:	20001234 	.word	0x20001234
    a494:	20001238 	.word	0x20001238
    a498:	20001230 	.word	0x20001230

0000a49c <hci_disconn_complete_encode.part.0>:
void hci_disconn_complete_encode(struct pdu_data *pdu_data, uint16_t handle,
    a49c:	b570      	push	{r4, r5, r6, lr}
    a49e:	f102 0408 	add.w	r4, r2, #8
    a4a2:	4605      	mov	r5, r0
    a4a4:	460e      	mov	r6, r1
    a4a6:	4620      	mov	r0, r4
    a4a8:	2102      	movs	r1, #2
    a4aa:	f00e f9a6 	bl	187fa <net_buf_simple_add>
    a4ae:	4603      	mov	r3, r0
	hdr->evt = evt;
    a4b0:	2205      	movs	r2, #5
	hdr->len = len;
    a4b2:	2104      	movs	r1, #4
	hdr->evt = evt;
    a4b4:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
    a4b6:	7059      	strb	r1, [r3, #1]
    a4b8:	4620      	mov	r0, r4
    a4ba:	f00e f99e 	bl	187fa <net_buf_simple_add>
	ep->status = 0x00;
    a4be:	2300      	movs	r3, #0
	ep->handle = sys_cpu_to_le16(handle);
    a4c0:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->status = 0x00;
    a4c4:	7003      	strb	r3, [r0, #0]
	ep->reason = *((uint8_t *)pdu_data);
    a4c6:	782b      	ldrb	r3, [r5, #0]
    a4c8:	70c3      	strb	r3, [r0, #3]
}
    a4ca:	bd70      	pop	{r4, r5, r6, pc}

0000a4cc <hci_cmd_complete>:
{
    a4cc:	b538      	push	{r3, r4, r5, lr}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    a4ce:	4b06      	ldr	r3, [pc, #24]	; (a4e8 <hci_cmd_complete+0x1c>)
{
    a4d0:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    a4d2:	8818      	ldrh	r0, [r3, #0]
{
    a4d4:	460c      	mov	r4, r1
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    a4d6:	f00c fe61 	bl	1719c <bt_hci_cmd_complete_create>
    a4da:	4621      	mov	r1, r4
    a4dc:	6028      	str	r0, [r5, #0]
}
    a4de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    a4e2:	3008      	adds	r0, #8
    a4e4:	f00e b989 	b.w	187fa <net_buf_simple_add>
    a4e8:	20002232 	.word	0x20002232

0000a4ec <hci_vendor_cmd_handle_common>:
{
    a4ec:	b570      	push	{r4, r5, r6, lr}
    a4ee:	1e43      	subs	r3, r0, #1
    a4f0:	b086      	sub	sp, #24
    a4f2:	4614      	mov	r4, r2
    a4f4:	2b09      	cmp	r3, #9
    a4f6:	d806      	bhi.n	a506 <hci_vendor_cmd_handle_common+0x1a>
    a4f8:	e8df f003 	tbb	[pc, r3]
    a4fc:	05382109 	.word	0x05382109
    a500:	51054605 	.word	0x51054605
    a504:	7465      	.short	0x7465
	return 0;
    a506:	f06f 0015 	mvn.w	r0, #21
}
    a50a:	b006      	add	sp, #24
    a50c:	bd70      	pop	{r4, r5, r6, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
    a50e:	4620      	mov	r0, r4
    a510:	210d      	movs	r1, #13
    a512:	f7ff ffdb 	bl	a4cc <hci_cmd_complete>
    a516:	4603      	mov	r3, r0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    a518:	2202      	movs	r2, #2
	rp->status = 0x00;
    a51a:	2000      	movs	r0, #0
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    a51c:	2405      	movs	r4, #5
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
    a51e:	2163      	movs	r1, #99	; 0x63
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    a520:	71dc      	strb	r4, [r3, #7]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
    a522:	7259      	strb	r1, [r3, #9]
	rp->status = 0x00;
    a524:	7018      	strb	r0, [r3, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    a526:	7098      	strb	r0, [r3, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
    a528:	7118      	strb	r0, [r3, #4]
	rp->fw_variant = 0U;
    a52a:	7158      	strb	r0, [r3, #5]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    a52c:	7218      	strb	r0, [r3, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
    a52e:	7298      	strb	r0, [r3, #10]
    a530:	72d8      	strb	r0, [r3, #11]
    a532:	7318      	strb	r0, [r3, #12]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    a534:	705a      	strb	r2, [r3, #1]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
    a536:	70da      	strb	r2, [r3, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    a538:	719a      	strb	r2, [r3, #6]
}
    a53a:	b006      	add	sp, #24
    a53c:	bd70      	pop	{r4, r5, r6, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
    a53e:	4620      	mov	r0, r4
    a540:	2141      	movs	r1, #65	; 0x41
    a542:	f7ff ffc3 	bl	a4cc <hci_cmd_complete>
	rp->status = 0x00;
    a546:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    a548:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    a54a:	4621      	mov	r1, r4
	rp->status = 0x00;
    a54c:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    a550:	2240      	movs	r2, #64	; 0x40
    a552:	f00c fad8 	bl	16b06 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    a556:	786a      	ldrb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    a558:	78ab      	ldrb	r3, [r5, #2]
	rp->commands[0] |= BIT(5) | BIT(7);
    a55a:	f062 0258 	orn	r2, r2, #88	; 0x58
	rp->commands[1] |= BIT(0) | BIT(1);
    a55e:	f043 0303 	orr.w	r3, r3, #3
	return 0;
    a562:	4620      	mov	r0, r4
	rp->commands[0] |= BIT(5) | BIT(7);
    a564:	706a      	strb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    a566:	70ab      	strb	r3, [r5, #2]
}
    a568:	b006      	add	sp, #24
    a56a:	bd70      	pop	{r4, r5, r6, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
    a56c:	4620      	mov	r0, r4
    a56e:	2109      	movs	r1, #9
    a570:	f7ff ffac 	bl	a4cc <hci_cmd_complete>
	rp->status = 0x00;
    a574:	2400      	movs	r4, #0
    a576:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    a57a:	4621      	mov	r1, r4
    a57c:	2208      	movs	r2, #8
    a57e:	f00c fac2 	bl	16b06 <memset>
	return 0;
    a582:	4620      	mov	r0, r4
}
    a584:	b006      	add	sp, #24
    a586:	bd70      	pop	{r4, r5, r6, pc}
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    a588:	6889      	ldr	r1, [r1, #8]
    a58a:	2000      	movs	r0, #0
    a58c:	f7ff fd1a 	bl	9fc4 <ll_addr_set>
	*evt = cmd_complete_status(0x00);
    a590:	2000      	movs	r0, #0
    a592:	f7ff fea7 	bl	a2e4 <cmd_complete_status>
    a596:	6020      	str	r0, [r4, #0]
    a598:	2000      	movs	r0, #0
}
    a59a:	b006      	add	sp, #24
    a59c:	bd70      	pop	{r4, r5, r6, pc}
	const char build_info[] = HCI_VS_BUILD_INFO;
    a59e:	4e18      	ldr	r6, [pc, #96]	; (a600 <hci_vendor_cmd_handle_common+0x114>)
    a5a0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    a5a2:	ad01      	add	r5, sp, #4
    a5a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    a5a6:	6833      	ldr	r3, [r6, #0]
    a5a8:	802b      	strh	r3, [r5, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    a5aa:	4620      	mov	r0, r4
    a5ac:	2113      	movs	r1, #19
    a5ae:	f7ff ff8d 	bl	a4cc <hci_cmd_complete>
	rp->status = 0x00;
    a5b2:	2400      	movs	r4, #0
    a5b4:	f800 4b01 	strb.w	r4, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    a5b8:	2212      	movs	r2, #18
    a5ba:	a901      	add	r1, sp, #4
    a5bc:	f00c fa78 	bl	16ab0 <memcpy>
	return 0;
    a5c0:	4620      	mov	r0, r4
}
    a5c2:	b006      	add	sp, #24
    a5c4:	bd70      	pop	{r4, r5, r6, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp) +
    a5c6:	4620      	mov	r0, r4
    a5c8:	2118      	movs	r1, #24
    a5ca:	f7ff ff7f 	bl	a4cc <hci_cmd_complete>
	rp->status = 0x00;
    a5ce:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp) +
    a5d0:	4605      	mov	r5, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
    a5d2:	2101      	movs	r1, #1
	rp->status = 0x00;
    a5d4:	f800 4b02 	strb.w	r4, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
    a5d8:	f009 f93a 	bl	13850 <hci_vendor_read_static_addr>
    a5dc:	7068      	strb	r0, [r5, #1]
	return 0;
    a5de:	4620      	mov	r0, r4
}
    a5e0:	b006      	add	sp, #24
    a5e2:	bd70      	pop	{r4, r5, r6, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
    a5e4:	4620      	mov	r0, r4
    a5e6:	2121      	movs	r1, #33	; 0x21
    a5e8:	f7ff ff70 	bl	a4cc <hci_cmd_complete>
	rp->status = 0x00;
    a5ec:	4601      	mov	r1, r0
    a5ee:	2400      	movs	r4, #0
    a5f0:	f801 4b11 	strb.w	r4, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
    a5f4:	3001      	adds	r0, #1
    a5f6:	f009 f99d 	bl	13934 <hci_vendor_read_key_hierarchy_roots>
	return 0;
    a5fa:	4620      	mov	r0, r4
}
    a5fc:	b006      	add	sp, #24
    a5fe:	bd70      	pop	{r4, r5, r6, pc}
    a600:	00019a64 	.word	0x00019a64

0000a604 <hci_cmd_handle>:
{
    a604:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    a606:	8983      	ldrh	r3, [r0, #12]
{
    a608:	b08f      	sub	sp, #60	; 0x3c
	struct net_buf *evt = NULL;
    a60a:	2200      	movs	r2, #0
	if (cmd->len < sizeof(*chdr)) {
    a60c:	2b02      	cmp	r3, #2
	struct net_buf *evt = NULL;
    a60e:	9209      	str	r2, [sp, #36]	; 0x24
	if (cmd->len < sizeof(*chdr)) {
    a610:	f240 8091 	bls.w	a736 <hci_cmd_handle+0x132>
	return net_buf_simple_pull_mem(&buf->b, len);
    a614:	4604      	mov	r4, r0
    a616:	460e      	mov	r6, r1
    a618:	3008      	adds	r0, #8
    a61a:	2103      	movs	r1, #3
    a61c:	f00e f90c 	bl	18838 <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
    a620:	89a2      	ldrh	r2, [r4, #12]
    a622:	7883      	ldrb	r3, [r0, #2]
    a624:	429a      	cmp	r2, r3
    a626:	f0c0 8086 	bcc.w	a736 <hci_cmd_handle+0x132>
	_opcode = sys_le16_to_cpu(chdr->opcode);
    a62a:	8805      	ldrh	r5, [r0, #0]
    a62c:	4fa5      	ldr	r7, [pc, #660]	; (a8c4 <hci_cmd_handle+0x2c0>)
	switch (BT_OGF(_opcode)) {
    a62e:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
	_opcode = sys_le16_to_cpu(chdr->opcode);
    a632:	b2a8      	uxth	r0, r5
    a634:	803d      	strh	r5, [r7, #0]
	ocf = BT_OCF(_opcode);
    a636:	f3c5 0309 	ubfx	r3, r5, #0, #10
	switch (BT_OGF(_opcode)) {
    a63a:	ea4f 2295 	mov.w	r2, r5, lsr #10
    a63e:	d26b      	bcs.n	a718 <hci_cmd_handle+0x114>
    a640:	2a00      	cmp	r2, #0
    a642:	d073      	beq.n	a72c <hci_cmd_handle+0x128>
    a644:	3a01      	subs	r2, #1
    a646:	2a07      	cmp	r2, #7
    a648:	d870      	bhi.n	a72c <hci_cmd_handle+0x128>
    a64a:	e8df f002 	tbb	[pc, r2]
    a64e:	6f93      	.short	0x6f93
    a650:	6f6f5777 	.word	0x6f6f5777
    a654:	046f      	.short	0x046f
	switch (ocf) {
    a656:	3b01      	subs	r3, #1
    a658:	2b4d      	cmp	r3, #77	; 0x4d
    a65a:	d867      	bhi.n	a72c <hci_cmd_handle+0x128>
    a65c:	e8df f013 	tbh	[pc, r3, lsl #1]
    a660:	02cf02dc 	.word	0x02cf02dc
    a664:	0066032b 	.word	0x0066032b
    a668:	00660324 	.word	0x00660324
    a66c:	00660066 	.word	0x00660066
    a670:	00660066 	.word	0x00660066
    a674:	01f4020a 	.word	0x01f4020a
    a678:	0218021e 	.word	0x0218021e
    a67c:	0368036d 	.word	0x0368036d
    a680:	035c0362 	.word	0x035c0362
    a684:	0344034a 	.word	0x0344034a
    a688:	01b301bc 	.word	0x01b301bc
    a68c:	0193019f 	.word	0x0193019f
    a690:	00660142 	.word	0x00660142
    a694:	01700066 	.word	0x01700066
    a698:	00660066 	.word	0x00660066
    a69c:	01640066 	.word	0x01640066
    a6a0:	01500158 	.word	0x01500158
    a6a4:	01d501de 	.word	0x01d501de
    a6a8:	00660066 	.word	0x00660066
    a6ac:	025901cc 	.word	0x025901cc
    a6b0:	02480254 	.word	0x02480254
    a6b4:	02b70237 	.word	0x02b70237
    a6b8:	02a802b0 	.word	0x02a802b0
    a6bc:	025f0287 	.word	0x025f0287
    a6c0:	02e60313 	.word	0x02e60313
    a6c4:	00660066 	.word	0x00660066
    a6c8:	00660066 	.word	0x00660066
    a6cc:	00660066 	.word	0x00660066
    a6d0:	00660066 	.word	0x00660066
    a6d4:	00660066 	.word	0x00660066
    a6d8:	00660066 	.word	0x00660066
    a6dc:	00660066 	.word	0x00660066
    a6e0:	00660066 	.word	0x00660066
    a6e4:	00660066 	.word	0x00660066
    a6e8:	00660066 	.word	0x00660066
    a6ec:	00660066 	.word	0x00660066
    a6f0:	00660066 	.word	0x00660066
    a6f4:	00660186 	.word	0x00660186
    a6f8:	02c80066 	.word	0x02c80066
	switch (ocf) {
    a6fc:	3b01      	subs	r3, #1
    a6fe:	2b08      	cmp	r3, #8
    a700:	d814      	bhi.n	a72c <hci_cmd_handle+0x128>
    a702:	e8df f013 	tbh	[pc, r3, lsl #1]
    a706:	00c7      	.short	0x00c7
    a708:	005f006e 	.word	0x005f006e
    a70c:	00130013 	.word	0x00130013
    a710:	00130013 	.word	0x00130013
    a714:	00e30013 	.word	0x00e30013
	switch (BT_OGF(_opcode)) {
    a718:	2a3f      	cmp	r2, #63	; 0x3f
    a71a:	d107      	bne.n	a72c <hci_cmd_handle+0x128>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
    a71c:	4621      	mov	r1, r4
    a71e:	4618      	mov	r0, r3
    a720:	aa09      	add	r2, sp, #36	; 0x24
    a722:	f7ff fee3 	bl	a4ec <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
    a726:	3016      	adds	r0, #22
    a728:	d14a      	bne.n	a7c0 <hci_cmd_handle+0x1bc>
    a72a:	8838      	ldrh	r0, [r7, #0]
	return bt_hci_cmd_status_create(_opcode, status);
    a72c:	2101      	movs	r1, #1
    a72e:	f00c fd47 	bl	171c0 <bt_hci_cmd_status_create>
}
    a732:	b00f      	add	sp, #60	; 0x3c
    a734:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return NULL;
    a736:	2000      	movs	r0, #0
}
    a738:	b00f      	add	sp, #60	; 0x3c
    a73a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
    a73c:	2b63      	cmp	r3, #99	; 0x63
    a73e:	f000 8337 	beq.w	adb0 <hci_cmd_handle+0x7ac>
    a742:	d82a      	bhi.n	a79a <hci_cmd_handle+0x196>
    a744:	2b03      	cmp	r3, #3
    a746:	f000 8315 	beq.w	ad74 <hci_cmd_handle+0x770>
    a74a:	2b2d      	cmp	r3, #45	; 0x2d
    a74c:	d120      	bne.n	a790 <hci_cmd_handle+0x18c>
		read_tx_power_level(cmd, evt);
    a74e:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    a750:	2104      	movs	r1, #4
    a752:	a809      	add	r0, sp, #36	; 0x24
	handle = sys_le16_to_cpu(cmd->handle);
    a754:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
    a756:	789e      	ldrb	r6, [r3, #2]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    a758:	f7ff feb8 	bl	a4cc <hci_cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    a75c:	b2a9      	uxth	r1, r5
	rp = hci_cmd_complete(evt, sizeof(*rp));
    a75e:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
    a760:	1cc3      	adds	r3, r0, #3
    a762:	4632      	mov	r2, r6
    a764:	2002      	movs	r0, #2
    a766:	f7ff fc49 	bl	9ffc <ll_tx_pwr_lvl_get>
	rp->status = status;
    a76a:	7020      	strb	r0, [r4, #0]
	rp->handle = sys_cpu_to_le16(handle);
    a76c:	9809      	ldr	r0, [sp, #36]	; 0x24
    a76e:	f8a4 5001 	strh.w	r5, [r4, #1]
}
    a772:	e7de      	b.n	a732 <hci_cmd_handle+0x12e>
	switch (ocf) {
    a774:	2b06      	cmp	r3, #6
    a776:	f000 82f3 	beq.w	ad60 <hci_cmd_handle+0x75c>
    a77a:	2b1d      	cmp	r3, #29
    a77c:	d1d6      	bne.n	a72c <hci_cmd_handle+0x128>
	handle = sys_le16_to_cpu(cmd->handle);
    a77e:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
    a780:	8818      	ldrh	r0, [r3, #0]
    a782:	f003 f859 	bl	d838 <ll_version_ind_send>
    a786:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    a788:	8838      	ldrh	r0, [r7, #0]
    a78a:	f00c fd19 	bl	171c0 <bt_hci_cmd_status_create>
}
    a78e:	e7d0      	b.n	a732 <hci_cmd_handle+0x12e>
	switch (ocf) {
    a790:	2b01      	cmp	r3, #1
    a792:	d1cb      	bne.n	a72c <hci_cmd_handle+0x128>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    a794:	68a2      	ldr	r2, [r4, #8]
	event_mask = sys_get_le64(cmd->events);
    a796:	4b4c      	ldr	r3, [pc, #304]	; (a8c8 <hci_cmd_handle+0x2c4>)
    a798:	e240      	b.n	ac1c <hci_cmd_handle+0x618>
	switch (ocf) {
    a79a:	2b7b      	cmp	r3, #123	; 0x7b
    a79c:	f000 830b 	beq.w	adb6 <hci_cmd_handle+0x7b2>
    a7a0:	2b7c      	cmp	r3, #124	; 0x7c
    a7a2:	d1c3      	bne.n	a72c <hci_cmd_handle+0x128>
		write_auth_payload_timeout(cmd, evt);
    a7a4:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    a7a6:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    a7a8:	8859      	ldrh	r1, [r3, #2]
    a7aa:	4628      	mov	r0, r5
    a7ac:	f003 f964 	bl	da78 <ll_apto_set>
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
    a7b0:	4604      	mov	r4, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    a7b2:	2103      	movs	r1, #3
    a7b4:	a809      	add	r0, sp, #36	; 0x24
    a7b6:	f7ff fe89 	bl	a4cc <hci_cmd_complete>
	rp->status = status;
    a7ba:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    a7bc:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (err == -EINVAL) {
    a7c0:	9809      	ldr	r0, [sp, #36]	; 0x24
    a7c2:	e7b6      	b.n	a732 <hci_cmd_handle+0x12e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    a7c4:	2109      	movs	r1, #9
    a7c6:	a809      	add	r0, sp, #36	; 0x24
    a7c8:	f7ff fe80 	bl	a4cc <hci_cmd_complete>
	rp->status = 0x00;
    a7cc:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    a7ce:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    a7d0:	2208      	movs	r2, #8
	rp->status = 0x00;
    a7d2:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    a7d6:	f00c f996 	bl	16b06 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    a7da:	2360      	movs	r3, #96	; 0x60
    a7dc:	9809      	ldr	r0, [sp, #36]	; 0x24
    a7de:	7163      	strb	r3, [r4, #5]
	if (err == -EINVAL) {
    a7e0:	e7a7      	b.n	a732 <hci_cmd_handle+0x12e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    a7e2:	2141      	movs	r1, #65	; 0x41
    a7e4:	a809      	add	r0, sp, #36	; 0x24
    a7e6:	f7ff fe71 	bl	a4cc <hci_cmd_complete>
	rp->status = 0x00;
    a7ea:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    a7ec:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    a7ee:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    a7f0:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    a7f4:	f00c f987 	bl	16b06 <memset>
	rp->commands[0] |= BIT(5);
    a7f8:	7867      	ldrb	r7, [r4, #1]
	rp->commands[5] |= BIT(6) | BIT(7);
    a7fa:	79a6      	ldrb	r6, [r4, #6]
	rp->commands[10] |= BIT(2);
    a7fc:	7ae5      	ldrb	r5, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    a7fe:	7be0      	ldrb	r0, [r4, #15]
	rp->commands[15] |= BIT(1);
    a800:	7c21      	ldrb	r1, [r4, #16]
	rp->commands[22] |= BIT(2);
    a802:	7de2      	ldrb	r2, [r4, #23]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    a804:	7ea3      	ldrb	r3, [r4, #26]
	rp->commands[26] |= BIT(4) | BIT(5);
    a806:	f894 c01b 	ldrb.w	ip, [r4, #27]
	rp->commands[0] |= BIT(5);
    a80a:	f047 0720 	orr.w	r7, r7, #32
    a80e:	7067      	strb	r7, [r4, #1]
	rp->commands[5] |= BIT(6) | BIT(7);
    a810:	f066 063f 	orn	r6, r6, #63	; 0x3f
	rp->commands[28] |= BIT(3);
    a814:	7f67      	ldrb	r7, [r4, #29]
	rp->commands[5] |= BIT(6) | BIT(7);
    a816:	71a6      	strb	r6, [r4, #6]
	rp->commands[10] |= BIT(2);
    a818:	f045 0504 	orr.w	r5, r5, #4
	rp->commands[14] |= BIT(3) | BIT(5);
    a81c:	f040 0028 	orr.w	r0, r0, #40	; 0x28
	rp->commands[15] |= BIT(1);
    a820:	f041 0102 	orr.w	r1, r1, #2
	rp->commands[22] |= BIT(2);
    a824:	f042 0204 	orr.w	r2, r2, #4
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    a828:	f043 0317 	orr.w	r3, r3, #23
	rp->commands[32] |= BIT(4) | BIT(5);
    a82c:	f894 6021 	ldrb.w	r6, [r4, #33]	; 0x21
	rp->commands[10] |= BIT(2);
    a830:	72e5      	strb	r5, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    a832:	73e0      	strb	r0, [r4, #15]
	rp->commands[33] |= BIT(4) | BIT(5);
    a834:	f894 5022 	ldrb.w	r5, [r4, #34]	; 0x22
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    a838:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
	rp->commands[15] |= BIT(1);
    a83c:	7421      	strb	r1, [r4, #16]
	rp->commands[22] |= BIT(2);
    a83e:	75e2      	strb	r2, [r4, #23]
	rp->commands[35] |= BIT(3);
    a840:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
	rp->commands[39] |= BIT(2);
    a844:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    a848:	76a3      	strb	r3, [r4, #26]
	rp->commands[38] |= BIT(7);
    a84a:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[28] |= BIT(0);
    a84e:	f047 0709 	orr.w	r7, r7, #9
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    a852:	f060 0006 	orn	r0, r0, #6
	rp->commands[26] |= BIT(4) | BIT(5);
    a856:	f06c 0c03 	orn	ip, ip, #3
	rp->commands[32] |= BIT(4) | BIT(5);
    a85a:	f046 0630 	orr.w	r6, r6, #48	; 0x30
	rp->commands[33] |= BIT(6) | BIT(7);
    a85e:	f065 050f 	orn	r5, r5, #15
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    a862:	f041 017f 	orr.w	r1, r1, #127	; 0x7f
	rp->commands[39] |= BIT(2);
    a866:	f042 0204 	orr.w	r2, r2, #4
	rp->commands[38] |= BIT(7);
    a86a:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[28] |= BIT(0);
    a86e:	7767      	strb	r7, [r4, #29]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    a870:	27ff      	movs	r7, #255	; 0xff
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    a872:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
	rp->commands[26] |= BIT(4) | BIT(5);
    a876:	f884 c01b 	strb.w	ip, [r4, #27]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    a87a:	9809      	ldr	r0, [sp, #36]	; 0x24
    a87c:	7727      	strb	r7, [r4, #28]
	rp->commands[32] |= BIT(4) | BIT(5);
    a87e:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
	rp->commands[33] |= BIT(6) | BIT(7);
    a882:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    a886:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
	rp->commands[39] |= BIT(2);
    a88a:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	rp->commands[38] |= BIT(7);
    a88e:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	if (err == -EINVAL) {
    a892:	e74e      	b.n	a732 <hci_cmd_handle+0x12e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    a894:	2109      	movs	r1, #9
    a896:	a809      	add	r0, sp, #36	; 0x24
    a898:	f7ff fe18 	bl	a4cc <hci_cmd_complete>
    a89c:	4603      	mov	r3, r0
	rp->status = 0x00;
    a89e:	2200      	movs	r2, #0
	rp->hci_version = LL_VERSION_NUMBER;
    a8a0:	200b      	movs	r0, #11
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
    a8a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    a8a6:	f06f 050e 	mvn.w	r5, #14
    a8aa:	2405      	movs	r4, #5
	rp->status = 0x00;
    a8ac:	701a      	strb	r2, [r3, #0]
	rp->hci_version = LL_VERSION_NUMBER;
    a8ae:	7058      	strb	r0, [r3, #1]
	rp->lmp_version = LL_VERSION_NUMBER;
    a8b0:	7118      	strb	r0, [r3, #4]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    a8b2:	715d      	strb	r5, [r3, #5]
    a8b4:	9809      	ldr	r0, [sp, #36]	; 0x24
    a8b6:	719c      	strb	r4, [r3, #6]
	rp->hci_revision = sys_cpu_to_le16(0);
    a8b8:	709a      	strb	r2, [r3, #2]
    a8ba:	70da      	strb	r2, [r3, #3]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
    a8bc:	71d9      	strb	r1, [r3, #7]
    a8be:	7219      	strb	r1, [r3, #8]
	if (err == -EINVAL) {
    a8c0:	e737      	b.n	a732 <hci_cmd_handle+0x12e>
    a8c2:	bf00      	nop
    a8c4:	20002232 	.word	0x20002232
    a8c8:	20000120 	.word	0x20000120
	rp = hci_cmd_complete(evt, sizeof(*rp));
    a8cc:	2107      	movs	r1, #7
    a8ce:	a809      	add	r0, sp, #36	; 0x24
    a8d0:	f7ff fdfc 	bl	a4cc <hci_cmd_complete>
	rp->status = 0x00;
    a8d4:	4601      	mov	r1, r0
    a8d6:	2000      	movs	r0, #0
    a8d8:	f801 0b01 	strb.w	r0, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    a8dc:	f7ff fb54 	bl	9f88 <ll_addr_get>
	if (err == -EINVAL) {
    a8e0:	9809      	ldr	r0, [sp, #36]	; 0x24
    a8e2:	e726      	b.n	a732 <hci_cmd_handle+0x12e>
		le_start_encryption(cmd, evt);
    a8e4:	68a2      	ldr	r2, [r4, #8]
				 (uint8_t *)&cmd->rand,
    a8e6:	4611      	mov	r1, r2
	status = ll_enc_req_send(handle,
    a8e8:	f102 030c 	add.w	r3, r2, #12
    a8ec:	f831 0b02 	ldrh.w	r0, [r1], #2
    a8f0:	320a      	adds	r2, #10
    a8f2:	f005 fa6f 	bl	fdd4 <ll_enc_req_send>
    a8f6:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    a8f8:	8838      	ldrh	r0, [r7, #0]
    a8fa:	f00c fc61 	bl	171c0 <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
    a8fe:	e718      	b.n	a732 <hci_cmd_handle+0x12e>
		le_set_data_len(cmd, evt);
    a900:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    a902:	881d      	ldrh	r5, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    a904:	889a      	ldrh	r2, [r3, #4]
    a906:	8859      	ldrh	r1, [r3, #2]
    a908:	4628      	mov	r0, r5
    a90a:	f002 ffb1 	bl	d870 <ll_length_req_send>
    a90e:	e74f      	b.n	a7b0 <hci_cmd_handle+0x1ac>
		le_conn_param_req_neg_reply(cmd, evt);
    a910:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    a912:	881d      	ldrh	r5, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
    a914:	789a      	ldrb	r2, [r3, #2]
    a916:	2300      	movs	r3, #0
    a918:	e9cd 3301 	strd	r3, r3, [sp, #4]
    a91c:	4628      	mov	r0, r5
    a91e:	9300      	str	r3, [sp, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
    a920:	2102      	movs	r1, #2
    a922:	f002 fe85 	bl	d630 <ll_conn_update>
    a926:	e743      	b.n	a7b0 <hci_cmd_handle+0x1ac>
		le_conn_param_req_reply(cmd, evt);
    a928:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
    a92a:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    a92c:	8815      	ldrh	r5, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
    a92e:	8853      	ldrh	r3, [r2, #2]
    a930:	9102      	str	r1, [sp, #8]
    a932:	88d1      	ldrh	r1, [r2, #6]
    a934:	9101      	str	r1, [sp, #4]
    a936:	8892      	ldrh	r2, [r2, #4]
    a938:	9200      	str	r2, [sp, #0]
    a93a:	4628      	mov	r0, r5
    a93c:	2200      	movs	r2, #0
    a93e:	e7ef      	b.n	a920 <hci_cmd_handle+0x31c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    a940:	2109      	movs	r1, #9
    a942:	a809      	add	r0, sp, #36	; 0x24
    a944:	f7ff fdc2 	bl	a4cc <hci_cmd_complete>
	dst[0] = val;
    a948:	2470      	movs	r4, #112	; 0x70
	rp->status = 0x00;
    a94a:	2300      	movs	r3, #0
	dst[1] = val >> 8;
    a94c:	2133      	movs	r1, #51	; 0x33
	dst[0] = val;
    a94e:	220f      	movs	r2, #15
    a950:	7044      	strb	r4, [r0, #1]
	dst[1] = val >> 8;
    a952:	7081      	strb	r1, [r0, #2]
	dst[0] = val;
    a954:	70c2      	strb	r2, [r0, #3]
	dst[1] = val >> 8;
    a956:	2413      	movs	r4, #19
	dst[0] = val;
    a958:	213f      	movs	r1, #63	; 0x3f
	dst[1] = val >> 8;
    a95a:	2202      	movs	r2, #2
    a95c:	7003      	strb	r3, [r0, #0]
    a95e:	7104      	strb	r4, [r0, #4]
	dst[0] = val;
    a960:	7141      	strb	r1, [r0, #5]
	dst[1] = val >> 8;
    a962:	7182      	strb	r2, [r0, #6]
	dst[0] = val;
    a964:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
    a966:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
    a968:	9809      	ldr	r0, [sp, #36]	; 0x24
    a96a:	e6e2      	b.n	a732 <hci_cmd_handle+0x12e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    a96c:	2103      	movs	r1, #3
    a96e:	a809      	add	r0, sp, #36	; 0x24
    a970:	f7ff fdac 	bl	a4cc <hci_cmd_complete>
	rp->status = 0x00;
    a974:	4601      	mov	r1, r0
    a976:	2300      	movs	r3, #0
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    a978:	3001      	adds	r0, #1
	rp->status = 0x00;
    a97a:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    a97e:	f7ff fb4d 	bl	a01c <ll_tx_pwr_get>
	if (err == -EINVAL) {
    a982:	9809      	ldr	r0, [sp, #36]	; 0x24
    a984:	e6d5      	b.n	a732 <hci_cmd_handle+0x12e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    a986:	2109      	movs	r1, #9
    a988:	a809      	add	r0, sp, #36	; 0x24
    a98a:	f7ff fd9f 	bl	a4cc <hci_cmd_complete>
	rp->status = 0x00;
    a98e:	2300      	movs	r3, #0
    a990:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
    a994:	2108      	movs	r1, #8
    a996:	f006 fe61 	bl	1165c <lll_csrand_get>
	if (err == -EINVAL) {
    a99a:	9809      	ldr	r0, [sp, #36]	; 0x24
    a99c:	e6c9      	b.n	a732 <hci_cmd_handle+0x12e>
		le_encrypt(cmd, evt);
    a99e:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    a9a0:	aa0a      	add	r2, sp, #40	; 0x28
    a9a2:	f100 0110 	add.w	r1, r0, #16
    a9a6:	2300      	movs	r3, #0
    a9a8:	f008 f99a 	bl	12ce0 <ecb_encrypt>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    a9ac:	2111      	movs	r1, #17
    a9ae:	a809      	add	r0, sp, #36	; 0x24
    a9b0:	f7ff fd8c 	bl	a4cc <hci_cmd_complete>
	rp->status = 0x00;
    a9b4:	2300      	movs	r3, #0
    a9b6:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    a9ba:	a90a      	add	r1, sp, #40	; 0x28
    a9bc:	2210      	movs	r2, #16
    a9be:	f00c f877 	bl	16ab0 <memcpy>
	if (err == -EINVAL) {
    a9c2:	9809      	ldr	r0, [sp, #36]	; 0x24
    a9c4:	e6b5      	b.n	a732 <hci_cmd_handle+0x12e>
	handle = sys_le16_to_cpu(cmd->handle);
    a9c6:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
    a9c8:	8818      	ldrh	r0, [r3, #0]
    a9ca:	f002 ff19 	bl	d800 <ll_feature_req_send>
    a9ce:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    a9d0:	8838      	ldrh	r0, [r7, #0]
    a9d2:	f00c fbf5 	bl	171c0 <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
    a9d6:	e6ac      	b.n	a732 <hci_cmd_handle+0x12e>
	handle = sys_le16_to_cpu(cmd->handle);
    a9d8:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    a9da:	2108      	movs	r1, #8
    a9dc:	a809      	add	r0, sp, #36	; 0x24
	handle = sys_le16_to_cpu(cmd->handle);
    a9de:	881d      	ldrh	r5, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    a9e0:	f7ff fd74 	bl	a4cc <hci_cmd_complete>
    a9e4:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
    a9e6:	1ce1      	adds	r1, r4, #3
	handle = sys_le16_to_cpu(cmd->handle);
    a9e8:	b2a8      	uxth	r0, r5
	status = ll_chm_get(handle, rp->ch_map);
    a9ea:	f002 feaf 	bl	d74c <ll_chm_get>
	rp->status = status;
    a9ee:	7020      	strb	r0, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
    a9f0:	9809      	ldr	r0, [sp, #36]	; 0x24
    a9f2:	f8a4 5001 	strh.w	r5, [r4, #1]
	if (err == -EINVAL) {
    a9f6:	e69c      	b.n	a732 <hci_cmd_handle+0x12e>
		le_add_dev_to_rl(cmd, evt);
    a9f8:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    a9fa:	f100 0217 	add.w	r2, r0, #23
    a9fe:	1dc1      	adds	r1, r0, #7
    aa00:	f006 f8a8 	bl	10b54 <ll_rl_add>
	*evt = cmd_complete_status(status);
    aa04:	f7ff fc6e 	bl	a2e4 <cmd_complete_status>
	if (err == -EINVAL) {
    aa08:	e693      	b.n	a732 <hci_cmd_handle+0x12e>
		le_write_default_data_len(cmd, evt);
    aa0a:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(max_tx_octets, max_tx_time);
    aa0c:	8859      	ldrh	r1, [r3, #2]
    aa0e:	8818      	ldrh	r0, [r3, #0]
    aa10:	f002 ff8a 	bl	d928 <ll_length_default_set>
	*evt = cmd_complete_status(status);
    aa14:	b2c0      	uxtb	r0, r0
    aa16:	f7ff fc65 	bl	a2e4 <cmd_complete_status>
	if (err == -EINVAL) {
    aa1a:	e68a      	b.n	a732 <hci_cmd_handle+0x12e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    aa1c:	2105      	movs	r1, #5
    aa1e:	a809      	add	r0, sp, #36	; 0x24
    aa20:	f7ff fd54 	bl	a4cc <hci_cmd_complete>
	ll_length_default_get(&max_tx_octets, &max_tx_time);
    aa24:	a90a      	add	r1, sp, #40	; 0x28
	rp = hci_cmd_complete(evt, sizeof(*rp));
    aa26:	4604      	mov	r4, r0
	ll_length_default_get(&max_tx_octets, &max_tx_time);
    aa28:	f10d 0022 	add.w	r0, sp, #34	; 0x22
    aa2c:	f002 ff70 	bl	d910 <ll_length_default_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
    aa30:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
    aa34:	f8a4 3001 	strh.w	r3, [r4, #1]
	rp->status = 0x00;
    aa38:	2200      	movs	r2, #0
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    aa3a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	rp->status = 0x00;
    aa3e:	7022      	strb	r2, [r4, #0]
    aa40:	9809      	ldr	r0, [sp, #36]	; 0x24
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    aa42:	f8a4 3003 	strh.w	r3, [r4, #3]
	if (err == -EINVAL) {
    aa46:	e674      	b.n	a732 <hci_cmd_handle+0x12e>
		le_set_scan_enable(cmd, evt);
    aa48:	68a3      	ldr	r3, [r4, #8]
	if (cmd->enable && cmd->filter_dup) {
    aa4a:	7818      	ldrb	r0, [r3, #0]
    aa4c:	2800      	cmp	r0, #0
    aa4e:	f000 81c6 	beq.w	adde <hci_cmd_handle+0x7da>
    aa52:	785b      	ldrb	r3, [r3, #1]
    aa54:	2b00      	cmp	r3, #0
    aa56:	f000 81c2 	beq.w	adde <hci_cmd_handle+0x7da>
		dup_count = 0;
    aa5a:	49be      	ldr	r1, [pc, #760]	; (ad54 <hci_cmd_handle+0x750>)
		dup_curr = 0U;
    aa5c:	4abe      	ldr	r2, [pc, #760]	; (ad58 <hci_cmd_handle+0x754>)
		dup_count = 0;
    aa5e:	2300      	movs	r3, #0
    aa60:	600b      	str	r3, [r1, #0]
		dup_curr = 0U;
    aa62:	6013      	str	r3, [r2, #0]
	status = ll_scan_enable(cmd->enable);
    aa64:	f002 f93e 	bl	cce4 <ll_scan_enable>
	*evt = cmd_complete_status(status);
    aa68:	280c      	cmp	r0, #12
    aa6a:	bf08      	it	eq
    aa6c:	2000      	moveq	r0, #0
    aa6e:	f7ff fc39 	bl	a2e4 <cmd_complete_status>
	if (err == -EINVAL) {
    aa72:	e65e      	b.n	a732 <hci_cmd_handle+0x12e>
		le_set_scan_param(cmd, evt);
    aa74:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
    aa76:	7963      	ldrb	r3, [r4, #5]
    aa78:	f8b4 2003 	ldrh.w	r2, [r4, #3]
    aa7c:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    aa80:	7820      	ldrb	r0, [r4, #0]
    aa82:	79a4      	ldrb	r4, [r4, #6]
    aa84:	9400      	str	r4, [sp, #0]
    aa86:	f7f5 fcb7 	bl	3f8 <ll_scan_params_set>
	*evt = cmd_complete_status(status);
    aa8a:	f7ff fc2b 	bl	a2e4 <cmd_complete_status>
	if (err == -EINVAL) {
    aa8e:	e650      	b.n	a732 <hci_cmd_handle+0x12e>
	status = ll_connect_disable(node_rx);
    aa90:	4630      	mov	r0, r6
    aa92:	f005 f927 	bl	fce4 <ll_connect_disable>
	*evt = cmd_complete_status(status);
    aa96:	f7ff fc25 	bl	a2e4 <cmd_complete_status>
	if (err == -EINVAL) {
    aa9a:	e64a      	b.n	a732 <hci_cmd_handle+0x12e>
		le_create_connection(cmd, evt);
    aa9c:	68a4      	ldr	r4, [r4, #8]
	status = ll_create_connection(scan_interval, scan_window,
    aa9e:	f8b4 5013 	ldrh.w	r5, [r4, #19]
    aaa2:	8861      	ldrh	r1, [r4, #2]
    aaa4:	7963      	ldrb	r3, [r4, #5]
    aaa6:	7922      	ldrb	r2, [r4, #4]
    aaa8:	8820      	ldrh	r0, [r4, #0]
    aaaa:	9504      	str	r5, [sp, #16]
    aaac:	f8b4 5011 	ldrh.w	r5, [r4, #17]
    aab0:	9503      	str	r5, [sp, #12]
    aab2:	f8b4 500f 	ldrh.w	r5, [r4, #15]
    aab6:	9502      	str	r5, [sp, #8]
    aab8:	7b25      	ldrb	r5, [r4, #12]
    aaba:	9501      	str	r5, [sp, #4]
				      &cmd->peer_addr.a.val[0],
    aabc:	3406      	adds	r4, #6
	status = ll_create_connection(scan_interval, scan_window,
    aabe:	9400      	str	r4, [sp, #0]
    aac0:	f7f7 fc4e 	bl	2360 <ll_create_connection>
    aac4:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    aac6:	8838      	ldrh	r0, [r7, #0]
    aac8:	f00c fb7a 	bl	171c0 <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
    aacc:	e631      	b.n	a732 <hci_cmd_handle+0x12e>
    aace:	68a1      	ldr	r1, [r4, #8]
    aad0:	2207      	movs	r2, #7
    aad2:	a80a      	add	r0, sp, #40	; 0x28
    aad4:	f00b ffec 	bl	16ab0 <memcpy>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    aad8:	2107      	movs	r1, #7
    aada:	a809      	add	r0, sp, #36	; 0x24
    aadc:	f7ff fcf6 	bl	a4cc <hci_cmd_complete>
    aae0:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
    aae2:	1c61      	adds	r1, r4, #1
    aae4:	a80a      	add	r0, sp, #40	; 0x28
    aae6:	f006 f999 	bl	10e1c <ll_rl_crpa_get>
    aaea:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
    aaec:	9809      	ldr	r0, [sp, #36]	; 0x24
    aaee:	e620      	b.n	a732 <hci_cmd_handle+0x12e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    aaf0:	2102      	movs	r1, #2
    aaf2:	a809      	add	r0, sp, #36	; 0x24
    aaf4:	f7ff fcea 	bl	a4cc <hci_cmd_complete>
    aaf8:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
    aafa:	f005 fe03 	bl	10704 <ll_rl_size_get>
	rp->status = 0x00;
    aafe:	2300      	movs	r3, #0
	rp->rl_size = ll_rl_size_get();
    ab00:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
    ab02:	7023      	strb	r3, [r4, #0]
	if (err == -EINVAL) {
    ab04:	9809      	ldr	r0, [sp, #36]	; 0x24
    ab06:	e614      	b.n	a732 <hci_cmd_handle+0x12e>
	status = ll_rl_clear();
    ab08:	f005 fdfe 	bl	10708 <ll_rl_clear>
	*evt = cmd_complete_status(status);
    ab0c:	f7ff fbea 	bl	a2e4 <cmd_complete_status>
	if (err == -EINVAL) {
    ab10:	e60f      	b.n	a732 <hci_cmd_handle+0x12e>
	status = ll_rl_remove(&cmd->peer_id_addr);
    ab12:	68a0      	ldr	r0, [r4, #8]
    ab14:	f006 f8de 	bl	10cd4 <ll_rl_remove>
	*evt = cmd_complete_status(status);
    ab18:	f7ff fbe4 	bl	a2e4 <cmd_complete_status>
	if (err == -EINVAL) {
    ab1c:	e609      	b.n	a732 <hci_cmd_handle+0x12e>
	handle = sys_le16_to_cpu(cmd->handle);
    ab1e:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ab20:	2105      	movs	r1, #5
    ab22:	a809      	add	r0, sp, #36	; 0x24
	handle = sys_le16_to_cpu(cmd->handle);
    ab24:	881d      	ldrh	r5, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ab26:	f7ff fcd1 	bl	a4cc <hci_cmd_complete>
    ab2a:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    ab2c:	1d22      	adds	r2, r4, #4
	handle = sys_le16_to_cpu(cmd->handle);
    ab2e:	b2a8      	uxth	r0, r5
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    ab30:	1ce1      	adds	r1, r4, #3
    ab32:	f002 ff0d 	bl	d950 <ll_phy_get>
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
	return __builtin_ffs(op);
    ab36:	78e2      	ldrb	r2, [r4, #3]
    ab38:	7923      	ldrb	r3, [r4, #4]
	rp->status = status;
    ab3a:	7020      	strb	r0, [r4, #0]
    ab3c:	2a00      	cmp	r2, #0
    ab3e:	fa92 f2a2 	rbit	r2, r2
    ab42:	fab2 f282 	clz	r2, r2
    ab46:	bf08      	it	eq
    ab48:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    ab4c:	2b00      	cmp	r3, #0
    ab4e:	fa93 f3a3 	rbit	r3, r3
    ab52:	fab3 f383 	clz	r3, r3
    ab56:	f102 0201 	add.w	r2, r2, #1
    ab5a:	bf08      	it	eq
    ab5c:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    ab60:	70e2      	strb	r2, [r4, #3]
    ab62:	3301      	adds	r3, #1
    ab64:	9809      	ldr	r0, [sp, #36]	; 0x24
	rp->handle = sys_cpu_to_le16(handle);
    ab66:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    ab6a:	7123      	strb	r3, [r4, #4]
	if (err == -EINVAL) {
    ab6c:	e5e1      	b.n	a732 <hci_cmd_handle+0x12e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ab6e:	2109      	movs	r1, #9
    ab70:	a809      	add	r0, sp, #36	; 0x24
    ab72:	f7ff fcab 	bl	a4cc <hci_cmd_complete>
	ll_length_max_get(&max_tx_octets, &max_tx_time,
    ab76:	ab0a      	add	r3, sp, #40	; 0x28
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ab78:	4604      	mov	r4, r0
	ll_length_max_get(&max_tx_octets, &max_tx_time,
    ab7a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
    ab7e:	f10d 001e 	add.w	r0, sp, #30
    ab82:	a908      	add	r1, sp, #32
    ab84:	f002 feda 	bl	d93c <ll_length_max_get>
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    ab88:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
    ab8c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
    ab90:	f8a4 2001 	strh.w	r2, [r4, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    ab94:	f8a4 3003 	strh.w	r3, [r4, #3]
	rp->max_rx_octets = sys_cpu_to_le16(max_rx_octets);
    ab98:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
    ab9c:	f8a4 3005 	strh.w	r3, [r4, #5]
	rp->status = 0x00;
    aba0:	2200      	movs	r2, #0
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
    aba2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	rp->status = 0x00;
    aba6:	7022      	strb	r2, [r4, #0]
    aba8:	9809      	ldr	r0, [sp, #36]	; 0x24
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
    abaa:	f8a4 3007 	strh.w	r3, [r4, #7]
	if (err == -EINVAL) {
    abae:	e5c0      	b.n	a732 <hci_cmd_handle+0x12e>
	uint16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
    abb0:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
    abb2:	8818      	ldrh	r0, [r3, #0]
    abb4:	f005 fdfe 	bl	107b4 <ll_rl_timeout_set>
	*evt = cmd_complete_status(0x00);
    abb8:	2000      	movs	r0, #0
    abba:	f7ff fb93 	bl	a2e4 <cmd_complete_status>
	if (err == -EINVAL) {
    abbe:	e5b8      	b.n	a732 <hci_cmd_handle+0x12e>
	status = ll_rl_enable(cmd->enable);
    abc0:	68a3      	ldr	r3, [r4, #8]
    abc2:	7818      	ldrb	r0, [r3, #0]
    abc4:	f005 fde0 	bl	10788 <ll_rl_enable>
	*evt = cmd_complete_status(status);
    abc8:	f7ff fb8c 	bl	a2e4 <cmd_complete_status>
	if (err == -EINVAL) {
    abcc:	e5b1      	b.n	a732 <hci_cmd_handle+0x12e>
    abce:	68a1      	ldr	r1, [r4, #8]
    abd0:	2207      	movs	r2, #7
    abd2:	a80a      	add	r0, sp, #40	; 0x28
    abd4:	f00b ff6c 	bl	16ab0 <memcpy>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    abd8:	2107      	movs	r1, #7
    abda:	a809      	add	r0, sp, #36	; 0x24
    abdc:	f7ff fc76 	bl	a4cc <hci_cmd_complete>
    abe0:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    abe2:	1c61      	adds	r1, r4, #1
    abe4:	a80a      	add	r0, sp, #40	; 0x28
    abe6:	f006 f93b 	bl	10e60 <ll_rl_lrpa_get>
    abea:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
    abec:	9809      	ldr	r0, [sp, #36]	; 0x24
    abee:	e5a0      	b.n	a732 <hci_cmd_handle+0x12e>
		le_set_privacy_mode(cmd, evt);
    abf0:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    abf2:	79c1      	ldrb	r1, [r0, #7]
    abf4:	f006 f950 	bl	10e98 <ll_priv_mode_set>
	*evt = cmd_complete_status(status);
    abf8:	f7ff fb74 	bl	a2e4 <cmd_complete_status>
	if (err == -EINVAL) {
    abfc:	e599      	b.n	a732 <hci_cmd_handle+0x12e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    abfe:	2104      	movs	r1, #4
    ac00:	a809      	add	r0, sp, #36	; 0x24
    ac02:	f7ff fc63 	bl	a4cc <hci_cmd_complete>
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
    ac06:	2203      	movs	r2, #3
	rp->status = 0x00;
    ac08:	2300      	movs	r3, #0
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
    ac0a:	70c2      	strb	r2, [r0, #3]
	rp->status = 0x00;
    ac0c:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
    ac0e:	221b      	movs	r2, #27
    ac10:	7042      	strb	r2, [r0, #1]
    ac12:	7083      	strb	r3, [r0, #2]
	if (err == -EINVAL) {
    ac14:	9809      	ldr	r0, [sp, #36]	; 0x24
    ac16:	e58c      	b.n	a732 <hci_cmd_handle+0x12e>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    ac18:	68a2      	ldr	r2, [r4, #8]
	le_event_mask = sys_get_le64(cmd->events);
    ac1a:	4b50      	ldr	r3, [pc, #320]	; (ad5c <hci_cmd_handle+0x758>)
    ac1c:	6811      	ldr	r1, [r2, #0]
    ac1e:	6852      	ldr	r2, [r2, #4]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    ac20:	605a      	str	r2, [r3, #4]
    ac22:	6019      	str	r1, [r3, #0]
	*evt = cmd_complete_status(0x00);
    ac24:	2000      	movs	r0, #0
    ac26:	f7ff fb5d 	bl	a2e4 <cmd_complete_status>
}
    ac2a:	e582      	b.n	a732 <hci_cmd_handle+0x12e>
		le_set_phy(cmd, evt);
    ac2c:	68a2      	ldr	r2, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    ac2e:	7895      	ldrb	r5, [r2, #2]
    ac30:	78d1      	ldrb	r1, [r2, #3]
	handle = sys_le16_to_cpu(cmd->handle);
    ac32:	8816      	ldrh	r6, [r2, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    ac34:	f8b2 4005 	ldrh.w	r4, [r2, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    ac38:	07eb      	lsls	r3, r5, #31
		cmd->tx_phys |= mask_phys;
    ac3a:	bf48      	it	mi
    ac3c:	f041 0103 	orrmi.w	r1, r1, #3
    ac40:	7913      	ldrb	r3, [r2, #4]
    ac42:	bf48      	it	mi
    ac44:	70d1      	strbmi	r1, [r2, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    ac46:	07ad      	lsls	r5, r5, #30
		cmd->rx_phys |= mask_phys;
    ac48:	bf44      	itt	mi
    ac4a:	f043 0303 	orrmi.w	r3, r3, #3
    ac4e:	7113      	strbmi	r3, [r2, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
    ac50:	ea43 0201 	orr.w	r2, r3, r1
    ac54:	f032 0203 	bics.w	r2, r2, #3
    ac58:	f040 80ca 	bne.w	adf0 <hci_cmd_handle+0x7ec>
	if (!(cmd->tx_phys & 0x07) ||
    ac5c:	074d      	lsls	r5, r1, #29
    ac5e:	f000 80c3 	beq.w	ade8 <hci_cmd_handle+0x7e4>
    ac62:	075a      	lsls	r2, r3, #29
    ac64:	f000 80c0 	beq.w	ade8 <hci_cmd_handle+0x7e4>
	if (phy_opts & 0x03) {
    ac68:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1U;
    ac6c:	bf1c      	itt	ne
    ac6e:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
    ac72:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    ac76:	4630      	mov	r0, r6
    ac78:	f002 fe92 	bl	d9a0 <ll_phy_req_send>
    ac7c:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    ac7e:	8838      	ldrh	r0, [r7, #0]
    ac80:	f00c fa9e 	bl	171c0 <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
    ac84:	e555      	b.n	a732 <hci_cmd_handle+0x12e>
		le_set_default_phy(cmd, evt);
    ac86:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    ac88:	781a      	ldrb	r2, [r3, #0]
    ac8a:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
    ac8c:	bf4a      	itet	mi
    ac8e:	2007      	movmi	r0, #7
    ac90:	7858      	ldrbpl	r0, [r3, #1]
    ac92:	7058      	strbmi	r0, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    ac94:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
    ac96:	bf4a      	itet	mi
    ac98:	2107      	movmi	r1, #7
    ac9a:	7899      	ldrbpl	r1, [r3, #2]
    ac9c:	7099      	strbmi	r1, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    ac9e:	f002 fe75 	bl	d98c <ll_phy_default_set>
	*evt = cmd_complete_status(status);
    aca2:	f7ff fb1f 	bl	a2e4 <cmd_complete_status>
	if (err == -EINVAL) {
    aca6:	e544      	b.n	a732 <hci_cmd_handle+0x12e>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    aca8:	68a1      	ldr	r1, [r4, #8]
    acaa:	2001      	movs	r0, #1
    acac:	f7ff f98a 	bl	9fc4 <ll_addr_set>
	*evt = cmd_complete_status(status);
    acb0:	f7ff fb18 	bl	a2e4 <cmd_complete_status>
	if (err == -EINVAL) {
    acb4:	e53d      	b.n	a732 <hci_cmd_handle+0x12e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    acb6:	2109      	movs	r1, #9
    acb8:	a809      	add	r0, sp, #36	; 0x24
    acba:	f7ff fc07 	bl	a4cc <hci_cmd_complete>
	rp->status = 0x00;
    acbe:	2500      	movs	r5, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    acc0:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    acc2:	4629      	mov	r1, r5
    acc4:	2208      	movs	r2, #8
	rp->status = 0x00;
    acc6:	f800 5b01 	strb.w	r5, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    acca:	f00b ff1c 	bl	16b06 <memset>
	dst[0] = val;
    acce:	21ff      	movs	r1, #255	; 0xff
	dst[1] = val >> 8;
    acd0:	2241      	movs	r2, #65	; 0x41
	dst[0] = val;
    acd2:	2301      	movs	r3, #1
    acd4:	7061      	strb	r1, [r4, #1]
	dst[1] = val >> 8;
    acd6:	70a2      	strb	r2, [r4, #2]
	dst[0] = val;
    acd8:	70e3      	strb	r3, [r4, #3]
	dst[1] = val >> 8;
    acda:	9809      	ldr	r0, [sp, #36]	; 0x24
    acdc:	7125      	strb	r5, [r4, #4]
	dst[0] = val;
    acde:	7165      	strb	r5, [r4, #5]
	dst[1] = val >> 8;
    ace0:	71a5      	strb	r5, [r4, #6]
	dst[0] = val;
    ace2:	71e5      	strb	r5, [r4, #7]
	dst[1] = val >> 8;
    ace4:	7225      	strb	r5, [r4, #8]
	if (err == -EINVAL) {
    ace6:	e524      	b.n	a732 <hci_cmd_handle+0x12e>
	status = ll_chm_update(&cmd->ch_map[0]);
    ace8:	68a0      	ldr	r0, [r4, #8]
    acea:	f005 f849 	bl	fd80 <ll_chm_update>
	*evt = cmd_complete_status(status);
    acee:	f7ff faf9 	bl	a2e4 <cmd_complete_status>
	if (err == -EINVAL) {
    acf2:	e51e      	b.n	a732 <hci_cmd_handle+0x12e>
		le_conn_update(cmd, evt);
    acf4:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
    acf6:	8911      	ldrh	r1, [r2, #8]
    acf8:	8853      	ldrh	r3, [r2, #2]
    acfa:	8810      	ldrh	r0, [r2, #0]
    acfc:	9102      	str	r1, [sp, #8]
    acfe:	88d1      	ldrh	r1, [r2, #6]
    ad00:	9101      	str	r1, [sp, #4]
    ad02:	8892      	ldrh	r2, [r2, #4]
    ad04:	9200      	str	r2, [sp, #0]
    ad06:	2200      	movs	r2, #0
    ad08:	4611      	mov	r1, r2
    ad0a:	f002 fc91 	bl	d630 <ll_conn_update>
    ad0e:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    ad10:	8838      	ldrh	r0, [r7, #0]
    ad12:	f00c fa55 	bl	171c0 <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
    ad16:	e50c      	b.n	a732 <hci_cmd_handle+0x12e>
	status = ll_wl_remove(&cmd->addr);
    ad18:	68a0      	ldr	r0, [r4, #8]
    ad1a:	f005 fc79 	bl	10610 <ll_wl_remove>
	*evt = cmd_complete_status(status);
    ad1e:	f7ff fae1 	bl	a2e4 <cmd_complete_status>
	if (err == -EINVAL) {
    ad22:	e506      	b.n	a732 <hci_cmd_handle+0x12e>
	status = ll_wl_add(&cmd->addr);
    ad24:	68a0      	ldr	r0, [r4, #8]
    ad26:	f005 feb5 	bl	10a94 <ll_wl_add>
	*evt = cmd_complete_status(status);
    ad2a:	f7ff fadb 	bl	a2e4 <cmd_complete_status>
	if (err == -EINVAL) {
    ad2e:	e500      	b.n	a732 <hci_cmd_handle+0x12e>
	status = ll_wl_clear();
    ad30:	f005 fc42 	bl	105b8 <ll_wl_clear>
	*evt = cmd_complete_status(status);
    ad34:	f7ff fad6 	bl	a2e4 <cmd_complete_status>
	if (err == -EINVAL) {
    ad38:	e4fb      	b.n	a732 <hci_cmd_handle+0x12e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ad3a:	2102      	movs	r1, #2
    ad3c:	a809      	add	r0, sp, #36	; 0x24
    ad3e:	f7ff fbc5 	bl	a4cc <hci_cmd_complete>
	rp->status = 0x00;
    ad42:	2300      	movs	r3, #0
    ad44:	7003      	strb	r3, [r0, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ad46:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
    ad48:	f005 fc34 	bl	105b4 <ll_wl_size_get>
    ad4c:	7060      	strb	r0, [r4, #1]
	if (err == -EINVAL) {
    ad4e:	9809      	ldr	r0, [sp, #36]	; 0x24
    ad50:	e4ef      	b.n	a732 <hci_cmd_handle+0x12e>
    ad52:	bf00      	nop
    ad54:	20001230 	.word	0x20001230
    ad58:	20001234 	.word	0x20001234
    ad5c:	20000128 	.word	0x20000128
		disconnect(cmd, evt);
    ad60:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    ad62:	7899      	ldrb	r1, [r3, #2]
    ad64:	8818      	ldrh	r0, [r3, #0]
    ad66:	f002 fd11 	bl	d78c <ll_terminate_ind_send>
    ad6a:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    ad6c:	8838      	ldrh	r0, [r7, #0]
    ad6e:	f00c fa27 	bl	171c0 <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
    ad72:	e4de      	b.n	a732 <hci_cmd_handle+0x12e>
	dup_count = -1;
    ad74:	4820      	ldr	r0, [pc, #128]	; (adf8 <hci_cmd_handle+0x7f4>)
	event_mask = DEFAULT_EVENT_MASK;
    ad76:	4921      	ldr	r1, [pc, #132]	; (adfc <hci_cmd_handle+0x7f8>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    ad78:	4a21      	ldr	r2, [pc, #132]	; (ae00 <hci_cmd_handle+0x7fc>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    ad7a:	4b22      	ldr	r3, [pc, #136]	; (ae04 <hci_cmd_handle+0x800>)
	dup_count = -1;
    ad7c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    ad80:	6004      	str	r4, [r0, #0]
	event_mask = DEFAULT_EVENT_MASK;
    ad82:	f641 75ff 	movw	r5, #8191	; 0x1fff
    ad86:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    ad8a:	e9c1 4500 	strd	r4, r5, [r1]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    ad8e:	201f      	movs	r0, #31
    ad90:	2100      	movs	r1, #0
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    ad92:	2400      	movs	r4, #0
    ad94:	2500      	movs	r5, #0
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    ad96:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    ad9a:	e9c2 4500 	strd	r4, r5, [r2]
		ll_reset();
    ad9e:	f001 f81f 	bl	bde0 <ll_reset>
		*evt = cmd_complete_status(0x00);
    ada2:	2000      	movs	r0, #0
    ada4:	f7ff fa9e 	bl	a2e4 <cmd_complete_status>
	conn_count = 0U;
    ada8:	4b17      	ldr	r3, [pc, #92]	; (ae08 <hci_cmd_handle+0x804>)
    adaa:	2200      	movs	r2, #0
    adac:	601a      	str	r2, [r3, #0]
}
    adae:	e4c0      	b.n	a732 <hci_cmd_handle+0x12e>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    adb0:	68a2      	ldr	r2, [r4, #8]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    adb2:	4b13      	ldr	r3, [pc, #76]	; (ae00 <hci_cmd_handle+0x7fc>)
    adb4:	e732      	b.n	ac1c <hci_cmd_handle+0x618>
	handle = sys_le16_to_cpu(cmd->handle);
    adb6:	68a3      	ldr	r3, [r4, #8]
    adb8:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    adba:	a90a      	add	r1, sp, #40	; 0x28
    adbc:	4628      	mov	r0, r5
    adbe:	f002 fe37 	bl	da30 <ll_apto_get>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    adc2:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
    adc4:	4604      	mov	r4, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    adc6:	a809      	add	r0, sp, #36	; 0x24
    adc8:	f7ff fb80 	bl	a4cc <hci_cmd_complete>
	rp->status = status;
    adcc:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    adce:	f8a0 5001 	strh.w	r5, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    add2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    add6:	f8a0 3003 	strh.w	r3, [r0, #3]
    adda:	9809      	ldr	r0, [sp, #36]	; 0x24
}
    addc:	e4a9      	b.n	a732 <hci_cmd_handle+0x12e>
		dup_count = -1;
    adde:	4b06      	ldr	r3, [pc, #24]	; (adf8 <hci_cmd_handle+0x7f4>)
    ade0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ade4:	601a      	str	r2, [r3, #0]
    ade6:	e63d      	b.n	aa64 <hci_cmd_handle+0x460>
	return bt_hci_cmd_status_create(_opcode, status);
    ade8:	2112      	movs	r1, #18
    adea:	f00c f9e9 	bl	171c0 <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
    adee:	e4a0      	b.n	a732 <hci_cmd_handle+0x12e>
	return bt_hci_cmd_status_create(_opcode, status);
    adf0:	2111      	movs	r1, #17
    adf2:	f00c f9e5 	bl	171c0 <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
    adf6:	e49c      	b.n	a732 <hci_cmd_handle+0x12e>
    adf8:	20001230 	.word	0x20001230
    adfc:	20000120 	.word	0x20000120
    ae00:	20000bd8 	.word	0x20000bd8
    ae04:	20000128 	.word	0x20000128
    ae08:	2000122c 	.word	0x2000122c

0000ae0c <hci_acl_handle>:
	if (buf->len < sizeof(*acl)) {
    ae0c:	8983      	ldrh	r3, [r0, #12]
	*evt = NULL;
    ae0e:	2200      	movs	r2, #0
	if (buf->len < sizeof(*acl)) {
    ae10:	2b03      	cmp	r3, #3
	*evt = NULL;
    ae12:	600a      	str	r2, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    ae14:	d943      	bls.n	ae9e <hci_acl_handle+0x92>
{
    ae16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ae1a:	4605      	mov	r5, r0
    ae1c:	460e      	mov	r6, r1
    ae1e:	3008      	adds	r0, #8
    ae20:	2104      	movs	r1, #4
    ae22:	f00d fd09 	bl	18838 <net_buf_simple_pull_mem>
	if (buf->len < len) {
    ae26:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
    ae28:	8847      	ldrh	r7, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
    ae2a:	f8b0 8000 	ldrh.w	r8, [r0]
	if (buf->len < len) {
    ae2e:	42bb      	cmp	r3, r7
    ae30:	d30c      	bcc.n	ae4c <hci_acl_handle+0x40>
	if (len > CONFIG_BT_CTLR_TX_BUFFER_SIZE) {
    ae32:	2f1b      	cmp	r7, #27
    ae34:	d80a      	bhi.n	ae4c <hci_acl_handle+0x40>
	node_tx = ll_tx_mem_acquire();
    ae36:	f002 fbaf 	bl	d598 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
    ae3a:	ea4f 3318 	mov.w	r3, r8, lsr #12
	if (!node_tx) {
    ae3e:	4604      	mov	r4, r0
    ae40:	b318      	cbz	r0, ae8a <hci_acl_handle+0x7e>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
    ae42:	089a      	lsrs	r2, r3, #2
    ae44:	d102      	bne.n	ae4c <hci_acl_handle+0x40>
	switch (bt_acl_flags_pb(flags)) {
    ae46:	b1d3      	cbz	r3, ae7e <hci_acl_handle+0x72>
    ae48:	2b01      	cmp	r3, #1
    ae4a:	d003      	beq.n	ae54 <hci_acl_handle+0x48>
		return -EINVAL;
    ae4c:	f06f 0015 	mvn.w	r0, #21
}
    ae50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    ae54:	7902      	ldrb	r2, [r0, #4]
    ae56:	f363 0201 	bfi	r2, r3, #0, #2
    ae5a:	7102      	strb	r2, [r0, #4]
	pdu_data->len = len;
    ae5c:	7167      	strb	r7, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
    ae5e:	68a9      	ldr	r1, [r5, #8]
    ae60:	463a      	mov	r2, r7
    ae62:	1de0      	adds	r0, r4, #7
    ae64:	f00b fe24 	bl	16ab0 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
    ae68:	4621      	mov	r1, r4
    ae6a:	f3c8 000b 	ubfx	r0, r8, #0, #12
    ae6e:	f002 fb9f 	bl	d5b0 <ll_tx_mem_enqueue>
    ae72:	2800      	cmp	r0, #0
    ae74:	d0ec      	beq.n	ae50 <hci_acl_handle+0x44>
		ll_tx_mem_release(node_tx);
    ae76:	4620      	mov	r0, r4
    ae78:	f002 fb94 	bl	d5a4 <ll_tx_mem_release>
    ae7c:	e7e6      	b.n	ae4c <hci_acl_handle+0x40>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    ae7e:	7903      	ldrb	r3, [r0, #4]
    ae80:	2202      	movs	r2, #2
    ae82:	f362 0301 	bfi	r3, r2, #0, #2
    ae86:	7103      	strb	r3, [r0, #4]
		break;
    ae88:	e7e8      	b.n	ae5c <hci_acl_handle+0x50>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    ae8a:	4b13      	ldr	r3, [pc, #76]	; (aed8 <hci_acl_handle+0xcc>)
    ae8c:	6819      	ldr	r1, [r3, #0]
    ae8e:	4603      	mov	r3, r0
    ae90:	f001 7200 	and.w	r2, r1, #33554432	; 0x2000000
    ae94:	4313      	orrs	r3, r2
    ae96:	d105      	bne.n	aea4 <hci_acl_handle+0x98>
		return -ENOBUFS;
    ae98:	f06f 0036 	mvn.w	r0, #54	; 0x36
    ae9c:	e7d8      	b.n	ae50 <hci_acl_handle+0x44>
		return -EINVAL;
    ae9e:	f06f 0015 	mvn.w	r0, #21
}
    aea2:	4770      	bx	lr
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    aea4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    aea8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    aeac:	2001      	movs	r0, #1
    aeae:	f7f9 ffe5 	bl	4e7c <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
    aeb2:	2102      	movs	r1, #2
    aeb4:	6030      	str	r0, [r6, #0]
    aeb6:	3008      	adds	r0, #8
    aeb8:	f00d fc9f 	bl	187fa <net_buf_simple_add>
	hdr->len = len;
    aebc:	2401      	movs	r4, #1
	hdr->evt = evt;
    aebe:	221a      	movs	r2, #26
    aec0:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
    aec2:	7044      	strb	r4, [r0, #1]
    aec4:	6830      	ldr	r0, [r6, #0]
    aec6:	4621      	mov	r1, r4
    aec8:	3008      	adds	r0, #8
    aeca:	f00d fc96 	bl	187fa <net_buf_simple_add>
    aece:	4603      	mov	r3, r0
		return -ENOBUFS;
    aed0:	f06f 0036 	mvn.w	r0, #54	; 0x36
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    aed4:	701c      	strb	r4, [r3, #0]
    aed6:	e7bb      	b.n	ae50 <hci_acl_handle+0x44>
    aed8:	20000120 	.word	0x20000120

0000aedc <hci_disconn_complete_encode>:
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    aedc:	4b06      	ldr	r3, [pc, #24]	; (aef8 <hci_disconn_complete_encode+0x1c>)
    aede:	681b      	ldr	r3, [r3, #0]
{
    aee0:	b430      	push	{r4, r5}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    aee2:	f003 0410 	and.w	r4, r3, #16
    aee6:	2500      	movs	r5, #0
    aee8:	ea54 0305 	orrs.w	r3, r4, r5
    aeec:	d101      	bne.n	aef2 <hci_disconn_complete_encode+0x16>
}
    aeee:	bc30      	pop	{r4, r5}
    aef0:	4770      	bx	lr
    aef2:	bc30      	pop	{r4, r5}
    aef4:	f7ff bad2 	b.w	a49c <hci_disconn_complete_encode.part.0>
    aef8:	20000120 	.word	0x20000120

0000aefc <hci_disconn_complete_process>:
	conn_count--;
    aefc:	4a02      	ldr	r2, [pc, #8]	; (af08 <hci_disconn_complete_process+0xc>)
    aefe:	6813      	ldr	r3, [r2, #0]
    af00:	3b01      	subs	r3, #1
    af02:	6013      	str	r3, [r2, #0]
}
    af04:	4770      	bx	lr
    af06:	bf00      	nop
    af08:	2000122c 	.word	0x2000122c

0000af0c <hci_acl_encode>:
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    af0c:	7f03      	ldrb	r3, [r0, #28]
    af0e:	f003 0303 	and.w	r3, r3, #3
    af12:	3b01      	subs	r3, #1
    af14:	2b01      	cmp	r3, #1
{
    af16:	b570      	push	{r4, r5, r6, lr}
	switch (pdu_data->ll_id) {
    af18:	d90d      	bls.n	af36 <hci_acl_encode+0x2a>
		}
#endif
		break;

	default:
		LL_ASSERT(0);
    af1a:	4a16      	ldr	r2, [pc, #88]	; (af74 <hci_acl_encode+0x68>)
    af1c:	4916      	ldr	r1, [pc, #88]	; (af78 <hci_acl_encode+0x6c>)
    af1e:	4817      	ldr	r0, [pc, #92]	; (af7c <hci_acl_encode+0x70>)
    af20:	f241 73d4 	movw	r3, #6100	; 0x17d4
    af24:	f00a ff0c 	bl	15d40 <printk>
    af28:	4040      	eors	r0, r0
    af2a:	f380 8811 	msr	BASEPRI, r0
    af2e:	f04f 0003 	mov.w	r0, #3
    af32:	df02      	svc	2
		break;
	}
}
    af34:	bd70      	pop	{r4, r5, r6, pc}
    af36:	4604      	mov	r4, r0
    af38:	f101 0508 	add.w	r5, r1, #8
    af3c:	4628      	mov	r0, r5
    af3e:	2104      	movs	r1, #4
	handle = node_rx->hdr.handle;
    af40:	88e6      	ldrh	r6, [r4, #6]
    af42:	f00d fc5a 	bl	187fa <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    af46:	7f23      	ldrb	r3, [r4, #28]
    af48:	f003 0303 	and.w	r3, r3, #3
    af4c:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    af4e:	bf0c      	ite	eq
    af50:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    af54:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
    af58:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
    af5a:	7f61      	ldrb	r1, [r4, #29]
    af5c:	8041      	strh	r1, [r0, #2]
    af5e:	4628      	mov	r0, r5
    af60:	f00d fc4b 	bl	187fa <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
    af64:	7f62      	ldrb	r2, [r4, #29]
    af66:	f104 011f 	add.w	r1, r4, #31
}
    af6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
    af6e:	f00b bd9f 	b.w	16ab0 <memcpy>
    af72:	bf00      	nop
    af74:	00019a78 	.word	0x00019a78
    af78:	00019a2c 	.word	0x00019a2c
    af7c:	000199cc 	.word	0x000199cc

0000af80 <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
    af80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    af84:	7905      	ldrb	r5, [r0, #4]
    af86:	88c7      	ldrh	r7, [r0, #6]
    af88:	2d03      	cmp	r5, #3
{
    af8a:	4604      	mov	r4, r0
    af8c:	b087      	sub	sp, #28
    af8e:	460e      	mov	r6, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
    af90:	f100 001c 	add.w	r0, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    af94:	d01a      	beq.n	afcc <hci_evt_encode+0x4c>
	switch (node_rx->hdr.type) {
    af96:	3d05      	subs	r5, #5
    af98:	2d15      	cmp	r5, #21
    af9a:	d860      	bhi.n	b05e <hci_evt_encode+0xde>
    af9c:	e8df f015 	tbh	[pc, r5, lsl #1]
    afa0:	005f0121 	.word	0x005f0121
    afa4:	005f005f 	.word	0x005f005f
    afa8:	005f005f 	.word	0x005f005f
    afac:	005f005f 	.word	0x005f005f
    afb0:	005f005f 	.word	0x005f005f
    afb4:	005f005f 	.word	0x005f005f
    afb8:	005f005f 	.word	0x005f005f
    afbc:	00d8005f 	.word	0x00d8005f
    afc0:	006f018e 	.word	0x006f018e
    afc4:	00aa0091 	.word	0x00aa0091
    afc8:	003000c0 	.word	0x003000c0
	switch (pdu_data->llctrl.opcode) {
    afcc:	7fe3      	ldrb	r3, [r4, #31]
    afce:	3b03      	subs	r3, #3
    afd0:	2b12      	cmp	r3, #18
    afd2:	f200 8182 	bhi.w	b2da <hci_evt_encode+0x35a>
    afd6:	e8df f013 	tbh	[pc, r3, lsl #1]
    afda:	01eb      	.short	0x01eb
    afdc:	01800180 	.word	0x01800180
    afe0:	021f0213 	.word	0x021f0213
    afe4:	01b30180 	.word	0x01b30180
    afe8:	01800180 	.word	0x01800180
    afec:	01bc0180 	.word	0x01bc0180
    aff0:	01cd0180 	.word	0x01cd0180
    aff4:	01800180 	.word	0x01800180
    aff8:	01800180 	.word	0x01800180
    affc:	01830183 	.word	0x01830183
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b000:	4bc7      	ldr	r3, [pc, #796]	; (b320 <hci_evt_encode+0x3a0>)
    b002:	6858      	ldr	r0, [r3, #4]
    b004:	2100      	movs	r1, #0
    b006:	460a      	mov	r2, r1
    b008:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    b00c:	4313      	orrs	r3, r2
    b00e:	d033      	beq.n	b078 <hci_evt_encode+0xf8>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    b010:	4bc4      	ldr	r3, [pc, #784]	; (b324 <hci_evt_encode+0x3a4>)
    b012:	6818      	ldr	r0, [r3, #0]
    b014:	460b      	mov	r3, r1
    b016:	f400 6200 	and.w	r2, r0, #2048	; 0x800
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b01a:	4313      	orrs	r3, r2
    b01c:	d02c      	beq.n	b078 <hci_evt_encode+0xf8>
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    b01e:	2205      	movs	r2, #5
    b020:	4630      	mov	r0, r6
    b022:	210c      	movs	r1, #12
    b024:	f7ff f970 	bl	a308 <meta_evt>
	sep->status = pu->status;
    b028:	7f23      	ldrb	r3, [r4, #28]
    b02a:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    b02c:	f8a0 7001 	strh.w	r7, [r0, #1]
    b030:	7f62      	ldrb	r2, [r4, #29]
    b032:	2a00      	cmp	r2, #0
    b034:	fa92 f3a2 	rbit	r3, r2
    b038:	fab3 f383 	clz	r3, r3
    b03c:	bf08      	it	eq
    b03e:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    b042:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
    b044:	70c3      	strb	r3, [r0, #3]
    b046:	7fa2      	ldrb	r2, [r4, #30]
    b048:	fa92 f3a2 	rbit	r3, r2
    b04c:	2a00      	cmp	r2, #0
    b04e:	fab3 f383 	clz	r3, r3
    b052:	bf08      	it	eq
    b054:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    b058:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
    b05a:	7103      	strb	r3, [r0, #4]
    b05c:	e00c      	b.n	b078 <hci_evt_encode+0xf8>
		LL_ASSERT(0);
    b05e:	f241 63df 	movw	r3, #5855	; 0x16df
		LL_ASSERT(0);
    b062:	4ab1      	ldr	r2, [pc, #708]	; (b328 <hci_evt_encode+0x3a8>)
    b064:	49b1      	ldr	r1, [pc, #708]	; (b32c <hci_evt_encode+0x3ac>)
    b066:	48b2      	ldr	r0, [pc, #712]	; (b330 <hci_evt_encode+0x3b0>)
    b068:	f00a fe6a 	bl	15d40 <printk>
    b06c:	4040      	eors	r0, r0
    b06e:	f380 8811 	msr	BASEPRI, r0
    b072:	f04f 0003 	mov.w	r0, #3
    b076:	df02      	svc	2
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    b078:	b007      	add	sp, #28
    b07a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b07e:	4ba8      	ldr	r3, [pc, #672]	; (b320 <hci_evt_encode+0x3a0>)
    b080:	6858      	ldr	r0, [r3, #4]
    b082:	2100      	movs	r1, #0
    b084:	460a      	mov	r2, r1
    b086:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    b08a:	4313      	orrs	r3, r2
    b08c:	d0f4      	beq.n	b078 <hci_evt_encode+0xf8>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    b08e:	4ba5      	ldr	r3, [pc, #660]	; (b324 <hci_evt_encode+0x3a4>)
    b090:	6818      	ldr	r0, [r3, #0]
    b092:	460b      	mov	r3, r1
    b094:	f000 0204 	and.w	r2, r0, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b098:	4313      	orrs	r3, r2
    b09a:	d0ed      	beq.n	b078 <hci_evt_encode+0xf8>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    b09c:	2209      	movs	r2, #9
    b09e:	2103      	movs	r1, #3
    b0a0:	4630      	mov	r0, r6
    b0a2:	f7ff f931 	bl	a308 <meta_evt>
	sep->status = cu->status;
    b0a6:	7f23      	ldrb	r3, [r4, #28]
    b0a8:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
    b0aa:	8be1      	ldrh	r1, [r4, #30]
	sep->latency = sys_cpu_to_le16(cu->latency);
    b0ac:	8c22      	ldrh	r2, [r4, #32]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
    b0ae:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    b0b0:	f8a0 3007 	strh.w	r3, [r0, #7]
	sep->handle = sys_cpu_to_le16(handle);
    b0b4:	f8a0 7001 	strh.w	r7, [r0, #1]
	sep->interval = sys_cpu_to_le16(cu->interval);
    b0b8:	f8a0 1003 	strh.w	r1, [r0, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
    b0bc:	f8a0 2005 	strh.w	r2, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
    b0c0:	e7da      	b.n	b078 <hci_evt_encode+0xf8>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    b0c2:	4b97      	ldr	r3, [pc, #604]	; (b320 <hci_evt_encode+0x3a0>)
    b0c4:	6859      	ldr	r1, [r3, #4]
    b0c6:	2400      	movs	r4, #0
    b0c8:	4622      	mov	r2, r4
    b0ca:	f401 4300 	and.w	r3, r1, #32768	; 0x8000
    b0ce:	4313      	orrs	r3, r2
    b0d0:	d0d2      	beq.n	b078 <hci_evt_encode+0xf8>
    b0d2:	3608      	adds	r6, #8
    b0d4:	2102      	movs	r1, #2
    b0d6:	4630      	mov	r0, r6
    b0d8:	f00d fb8f 	bl	187fa <net_buf_simple_add>
    b0dc:	4603      	mov	r3, r0
	hdr->evt = evt;
    b0de:	2230      	movs	r2, #48	; 0x30
	hdr->len = len;
    b0e0:	2103      	movs	r1, #3
    b0e2:	4630      	mov	r0, r6
	hdr->evt = evt;
    b0e4:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
    b0e6:	7059      	strb	r1, [r3, #1]
    b0e8:	f00d fb87 	bl	187fa <net_buf_simple_add>
	ep->status = 0x00;
    b0ec:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    b0ee:	f8a0 7001 	strh.w	r7, [r0, #1]
    b0f2:	e7c1      	b.n	b078 <hci_evt_encode+0xf8>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    b0f4:	4b8f      	ldr	r3, [pc, #572]	; (b334 <hci_evt_encode+0x3b4>)
    b0f6:	6819      	ldr	r1, [r3, #0]
    b0f8:	2300      	movs	r3, #0
    b0fa:	f401 0200 	and.w	r2, r1, #8388608	; 0x800000
    b0fe:	4313      	orrs	r3, r2
    b100:	d0ba      	beq.n	b078 <hci_evt_encode+0xf8>
    b102:	3608      	adds	r6, #8
    b104:	2102      	movs	r1, #2
    b106:	4630      	mov	r0, r6
    b108:	f00d fb77 	bl	187fa <net_buf_simple_add>
    b10c:	4603      	mov	r3, r0
	hdr->evt = evt;
    b10e:	2257      	movs	r2, #87	; 0x57
	hdr->len = len;
    b110:	2102      	movs	r1, #2
    b112:	4630      	mov	r0, r6
	hdr->evt = evt;
    b114:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
    b116:	7059      	strb	r1, [r3, #1]
    b118:	f00d fb6f 	bl	187fa <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    b11c:	8007      	strh	r7, [r0, #0]
    b11e:	e7ab      	b.n	b078 <hci_evt_encode+0xf8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b120:	4b7f      	ldr	r3, [pc, #508]	; (b320 <hci_evt_encode+0x3a0>)
    b122:	6858      	ldr	r0, [r3, #4]
    b124:	2100      	movs	r1, #0
    b126:	460a      	mov	r2, r1
    b128:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    b12c:	4313      	orrs	r3, r2
    b12e:	d0a3      	beq.n	b078 <hci_evt_encode+0xf8>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    b130:	4b7c      	ldr	r3, [pc, #496]	; (b324 <hci_evt_encode+0x3a4>)
    b132:	6818      	ldr	r0, [r3, #0]
    b134:	460b      	mov	r3, r1
    b136:	f400 2200 	and.w	r2, r0, #524288	; 0x80000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b13a:	4313      	orrs	r3, r2
    b13c:	d09c      	beq.n	b078 <hci_evt_encode+0xf8>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
    b13e:	4630      	mov	r0, r6
    b140:	2203      	movs	r2, #3
    b142:	2114      	movs	r1, #20
    b144:	f7ff f8e0 	bl	a308 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    b148:	8007      	strh	r7, [r0, #0]
	sep->chan_sel_algo = cs->csa;
    b14a:	7f23      	ldrb	r3, [r4, #28]
    b14c:	7083      	strb	r3, [r0, #2]
    b14e:	e793      	b.n	b078 <hci_evt_encode+0xf8>
	uint8_t status = cc->status;
    b150:	7f25      	ldrb	r5, [r4, #28]
	if (!status) {
    b152:	2d00      	cmp	r5, #0
    b154:	f000 816a 	beq.w	b42c <hci_evt_encode+0x4ac>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b158:	4b71      	ldr	r3, [pc, #452]	; (b320 <hci_evt_encode+0x3a0>)
    b15a:	6859      	ldr	r1, [r3, #4]
    b15c:	f04f 0800 	mov.w	r8, #0
    b160:	4642      	mov	r2, r8
    b162:	f001 5300 	and.w	r3, r1, #536870912	; 0x20000000
    b166:	4313      	orrs	r3, r2
    b168:	d086      	beq.n	b078 <hci_evt_encode+0xf8>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    b16a:	4b6e      	ldr	r3, [pc, #440]	; (b324 <hci_evt_encode+0x3a4>)
    b16c:	f8d3 c000 	ldr.w	ip, [r3]
    b170:	f240 2101 	movw	r1, #513	; 0x201
    b174:	ea0c 0201 	and.w	r2, ip, r1
    b178:	4643      	mov	r3, r8
    b17a:	4313      	orrs	r3, r2
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    b17c:	f40c 7000 	and.w	r0, ip, #512	; 0x200
    b180:	4641      	mov	r1, r8
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    b182:	f43f af79 	beq.w	b078 <hci_evt_encode+0xf8>
	if (!status) {
    b186:	2d00      	cmp	r5, #0
    b188:	f040 816b 	bne.w	b462 <hci_evt_encode+0x4e2>
		conn_count++;
    b18c:	4a6a      	ldr	r2, [pc, #424]	; (b338 <hci_evt_encode+0x3b8>)
    b18e:	6813      	ldr	r3, [r2, #0]
    b190:	3301      	adds	r3, #1
    b192:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    b194:	ea50 0301 	orrs.w	r3, r0, r1
    b198:	f104 081f 	add.w	r8, r4, #31
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    b19c:	4630      	mov	r0, r6
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    b19e:	f040 81bc 	bne.w	b51a <hci_evt_encode+0x59a>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    b1a2:	2212      	movs	r2, #18
    b1a4:	2101      	movs	r1, #1
    b1a6:	f7ff f8af 	bl	a308 <meta_evt>
	lecc->status = 0x00;
    b1aa:	7005      	strb	r5, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    b1ac:	f8a0 7001 	strh.w	r7, [r0, #1]
	lecc->role = cc->role;
    b1b0:	7f63      	ldrb	r3, [r4, #29]
    b1b2:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
    b1b4:	7fa3      	ldrb	r3, [r4, #30]
    b1b6:	f003 0301 	and.w	r3, r3, #1
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    b1ba:	4606      	mov	r6, r0
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
    b1bc:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &cc->peer_addr[0], BDADDR_SIZE);
    b1be:	4641      	mov	r1, r8
    b1c0:	2206      	movs	r2, #6
    b1c2:	3005      	adds	r0, #5
    b1c4:	f00b fc74 	bl	16ab0 <memcpy>
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
    b1c8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
	lecc->interval = sys_cpu_to_le16(cc->interval);
    b1ca:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	lecc->latency = sys_cpu_to_le16(cc->latency);
    b1cc:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    b1ce:	f8a6 200d 	strh.w	r2, [r6, #13]
	lecc->interval = sys_cpu_to_le16(cc->interval);
    b1d2:	f8a6 100b 	strh.w	r1, [r6, #11]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
    b1d6:	f8a6 300f 	strh.w	r3, [r6, #15]
	lecc->clock_accuracy = cc->sca;
    b1da:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    b1de:	7473      	strb	r3, [r6, #17]
    b1e0:	e74a      	b.n	b078 <hci_evt_encode+0xf8>
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    b1e2:	4a56      	ldr	r2, [pc, #344]	; (b33c <hci_evt_encode+0x3bc>)
	rssi = -(node_rx->hdr.rx_ftr.rssi);
    b1e4:	7e23      	ldrb	r3, [r4, #24]
	if (adv->tx_addr) {
    b1e6:	f894 c01c 	ldrb.w	ip, [r4, #28]
	rl_idx = node_rx->hdr.rx_ftr.rl_idx;
    b1ea:	7ea7      	ldrb	r7, [r4, #26]
	direct = node_rx->hdr.rx_ftr.direct;
    b1ec:	f894 801b 	ldrb.w	r8, [r4, #27]
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    b1f0:	e892 0003 	ldmia.w	r2, {r0, r1}
	rssi = -(node_rx->hdr.rx_ftr.rssi);
    b1f4:	425b      	negs	r3, r3
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    b1f6:	0c0a      	lsrs	r2, r1, #16
	if (adv->tx_addr) {
    b1f8:	f01c 0f40 	tst.w	ip, #64	; 0x40
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    b1fc:	9004      	str	r0, [sp, #16]
    b1fe:	f8ad 1014 	strh.w	r1, [sp, #20]
    b202:	f88d 2016 	strb.w	r2, [sp, #22]
	rssi = -(node_rx->hdr.rx_ftr.rssi);
    b206:	b25d      	sxtb	r5, r3
	if (adv->tx_addr) {
    b208:	f040 8119 	bne.w	b43e <hci_evt_encode+0x4be>
	if (direct) {
    b20c:	4b44      	ldr	r3, [pc, #272]	; (b320 <hci_evt_encode+0x3a0>)
    b20e:	6858      	ldr	r0, [r3, #4]
    b210:	2100      	movs	r1, #0
    b212:	460a      	mov	r2, r1
    b214:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    b218:	f1b8 0f00 	cmp.w	r8, #0
    b21c:	f040 8131 	bne.w	b482 <hci_evt_encode+0x502>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b220:	4313      	orrs	r3, r2
    b222:	f43f af29 	beq.w	b078 <hci_evt_encode+0xf8>
	    !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
    b226:	4b3f      	ldr	r3, [pc, #252]	; (b324 <hci_evt_encode+0x3a4>)
    b228:	6819      	ldr	r1, [r3, #0]
    b22a:	4643      	mov	r3, r8
    b22c:	f001 0202 	and.w	r2, r1, #2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b230:	4313      	orrs	r3, r2
    b232:	f43f af21 	beq.w	b078 <hci_evt_encode+0xf8>
	if (dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
    b236:	7f20      	ldrb	r0, [r4, #28]
    b238:	f104 091e 	add.w	r9, r4, #30
    b23c:	f3c0 1180 	ubfx	r1, r0, #6, #1
    b240:	464a      	mov	r2, r9
    b242:	f000 000f 	and.w	r0, r0, #15
    b246:	f7ff f8c7 	bl	a3d8 <dup_found.isra.0>
    b24a:	2800      	cmp	r0, #0
    b24c:	f47f af14 	bne.w	b078 <hci_evt_encode+0xf8>
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    b250:	7f23      	ldrb	r3, [r4, #28]
    b252:	f003 030f 	and.w	r3, r3, #15
    b256:	2b01      	cmp	r3, #1
    b258:	f000 81a1 	beq.w	b59e <hci_evt_encode+0x61e>
		data_len = (adv->len - BDADDR_SIZE);
    b25c:	7f63      	ldrb	r3, [r4, #29]
    b25e:	f1a3 0806 	sub.w	r8, r3, #6
    b262:	3305      	adds	r3, #5
    b264:	fa5f f888 	uxtb.w	r8, r8
    b268:	b2da      	uxtb	r2, r3
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    b26a:	4630      	mov	r0, r6
    b26c:	2102      	movs	r1, #2
    b26e:	f7ff f84b 	bl	a308 <meta_evt>
	sep->num_reports = 1U;
    b272:	2301      	movs	r3, #1
    b274:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    b276:	7f23      	ldrb	r3, [r4, #28]
    b278:	aa06      	add	r2, sp, #24
    b27a:	f003 030f 	and.w	r3, r3, #15
    b27e:	4413      	add	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    b280:	4606      	mov	r6, r0
	adv_info->evt_type = c_adv_type[adv->type];
    b282:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    b286:	7043      	strb	r3, [r0, #1]
	if (rl_idx < ll_rl_size_get()) {
    b288:	f005 fa3c 	bl	10704 <ll_rl_size_get>
    b28c:	4287      	cmp	r7, r0
    b28e:	f080 817c 	bcs.w	b58a <hci_evt_encode+0x60a>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
    b292:	4638      	mov	r0, r7
    b294:	1cf2      	adds	r2, r6, #3
    b296:	1cb1      	adds	r1, r6, #2
    b298:	f005 f9f0 	bl	1067c <ll_rl_id_addr_get>
		adv_info->addr.type += 2U;
    b29c:	78b3      	ldrb	r3, [r6, #2]
    b29e:	3302      	adds	r3, #2
    b2a0:	70b3      	strb	r3, [r6, #2]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    b2a2:	f106 070a 	add.w	r7, r6, #10
	adv_info->length = data_len;
    b2a6:	f886 8009 	strb.w	r8, [r6, #9]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    b2aa:	f104 0124 	add.w	r1, r4, #36	; 0x24
    b2ae:	4638      	mov	r0, r7
    b2b0:	4642      	mov	r2, r8
    b2b2:	f00b fbfd 	bl	16ab0 <memcpy>
	*prssi = rssi;
    b2b6:	f807 5008 	strb.w	r5, [r7, r8]
    b2ba:	e6dd      	b.n	b078 <hci_evt_encode+0xf8>
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    b2bc:	4b18      	ldr	r3, [pc, #96]	; (b320 <hci_evt_encode+0x3a0>)
    b2be:	6819      	ldr	r1, [r3, #0]
    b2c0:	2300      	movs	r3, #0
    b2c2:	f001 0210 	and.w	r2, r1, #16
    b2c6:	4313      	orrs	r3, r2
    b2c8:	f43f aed6 	beq.w	b078 <hci_evt_encode+0xf8>
    b2cc:	4632      	mov	r2, r6
    b2ce:	4639      	mov	r1, r7
}
    b2d0:	b007      	add	sp, #28
    b2d2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b2d6:	f7ff b8e1 	b.w	a49c <hci_disconn_complete_encode.part.0>
		LL_ASSERT(0);
    b2da:	f241 73a8 	movw	r3, #6056	; 0x17a8
    b2de:	e6c0      	b.n	b062 <hci_evt_encode+0xe2>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b2e0:	4b0f      	ldr	r3, [pc, #60]	; (b320 <hci_evt_encode+0x3a0>)
    b2e2:	6858      	ldr	r0, [r3, #4]
    b2e4:	2100      	movs	r1, #0
    b2e6:	460a      	mov	r2, r1
    b2e8:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    b2ec:	4313      	orrs	r3, r2
    b2ee:	f43f aec3 	beq.w	b078 <hci_evt_encode+0xf8>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    b2f2:	4b0c      	ldr	r3, [pc, #48]	; (b324 <hci_evt_encode+0x3a4>)
    b2f4:	6818      	ldr	r0, [r3, #0]
    b2f6:	460b      	mov	r3, r1
    b2f8:	f000 0240 	and.w	r2, r0, #64	; 0x40
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b2fc:	4313      	orrs	r3, r2
    b2fe:	f43f aebb 	beq.w	b078 <hci_evt_encode+0xf8>
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
    b302:	4630      	mov	r0, r6
    b304:	220a      	movs	r2, #10
    b306:	2107      	movs	r1, #7
    b308:	f7fe fffe 	bl	a308 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    b30c:	8007      	strh	r7, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
    b30e:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    b310:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
    b312:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    b314:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
    b316:	8c23      	ldrh	r3, [r4, #32]
    b318:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    b31a:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    b31c:	8103      	strh	r3, [r0, #8]
    b31e:	e6ab      	b.n	b078 <hci_evt_encode+0xf8>
    b320:	20000120 	.word	0x20000120
    b324:	20000128 	.word	0x20000128
    b328:	00019a78 	.word	0x00019a78
    b32c:	00019a2c 	.word	0x00019a2c
    b330:	000199cc 	.word	0x000199cc
    b334:	20000bd8 	.word	0x20000bd8
    b338:	2000122c 	.word	0x2000122c
    b33c:	00019668 	.word	0x00019668
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    b340:	460b      	mov	r3, r1
    b342:	463a      	mov	r2, r7
    b344:	4601      	mov	r1, r0
    b346:	2000      	movs	r0, #0
}
    b348:	b007      	add	sp, #28
    b34a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    b34e:	f7ff b80d 	b.w	a36c <le_remote_feat_complete>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    b352:	4b99      	ldr	r3, [pc, #612]	; (b5b8 <hci_evt_encode+0x638>)
    b354:	6819      	ldr	r1, [r3, #0]
    b356:	2300      	movs	r3, #0
    b358:	f001 0280 	and.w	r2, r1, #128	; 0x80
    b35c:	4313      	orrs	r3, r2
    b35e:	f43f ae8b 	beq.w	b078 <hci_evt_encode+0xf8>
    b362:	f894 0020 	ldrb.w	r0, [r4, #32]
    b366:	4632      	mov	r2, r6
    b368:	4639      	mov	r1, r7
}
    b36a:	b007      	add	sp, #28
    b36c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b370:	f7fe bfe2 	b.w	a338 <encrypt_change.part.0>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b374:	4b90      	ldr	r3, [pc, #576]	; (b5b8 <hci_evt_encode+0x638>)
    b376:	6858      	ldr	r0, [r3, #4]
    b378:	2100      	movs	r1, #0
    b37a:	460a      	mov	r2, r1
    b37c:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    b380:	4313      	orrs	r3, r2
    b382:	d064      	beq.n	b44e <hci_evt_encode+0x4ce>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    b384:	4b8d      	ldr	r3, [pc, #564]	; (b5bc <hci_evt_encode+0x63c>)
    b386:	6818      	ldr	r0, [r3, #0]
    b388:	460b      	mov	r3, r1
    b38a:	f000 0220 	and.w	r2, r0, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b38e:	4313      	orrs	r3, r2
    b390:	d05d      	beq.n	b44e <hci_evt_encode+0x4ce>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    b392:	4630      	mov	r0, r6
    b394:	220a      	movs	r2, #10
    b396:	2106      	movs	r1, #6
    b398:	f7fe ffb6 	bl	a308 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    b39c:	8007      	strh	r7, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
    b39e:	8c23      	ldrh	r3, [r4, #32]
    b3a0:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
    b3a2:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    b3a4:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
    b3a6:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    b3a8:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
    b3aa:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    b3ac:	8103      	strh	r3, [r0, #8]
    b3ae:	e663      	b.n	b078 <hci_evt_encode+0xf8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b3b0:	4b81      	ldr	r3, [pc, #516]	; (b5b8 <hci_evt_encode+0x638>)
    b3b2:	6858      	ldr	r0, [r3, #4]
    b3b4:	2100      	movs	r1, #0
    b3b6:	460a      	mov	r2, r1
    b3b8:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    b3bc:	4313      	orrs	r3, r2
    b3be:	f43f ae5b 	beq.w	b078 <hci_evt_encode+0xf8>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    b3c2:	4b7e      	ldr	r3, [pc, #504]	; (b5bc <hci_evt_encode+0x63c>)
    b3c4:	6818      	ldr	r0, [r3, #0]
    b3c6:	460b      	mov	r3, r1
    b3c8:	f000 0210 	and.w	r2, r0, #16
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b3cc:	4313      	orrs	r3, r2
    b3ce:	f43f ae53 	beq.w	b078 <hci_evt_encode+0xf8>
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    b3d2:	4630      	mov	r0, r6
    b3d4:	220c      	movs	r2, #12
    b3d6:	2105      	movs	r1, #5
    b3d8:	f7fe ff96 	bl	a308 <meta_evt>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
    b3dc:	f104 0120 	add.w	r1, r4, #32
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    b3e0:	4605      	mov	r5, r0
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
    b3e2:	2208      	movs	r2, #8
	sep->handle = sys_cpu_to_le16(handle);
    b3e4:	f820 7b02 	strh.w	r7, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
    b3e8:	f00b fb62 	bl	16ab0 <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
    b3ec:	f105 000a 	add.w	r0, r5, #10
    b3f0:	f104 0128 	add.w	r1, r4, #40	; 0x28
    b3f4:	2202      	movs	r2, #2
}
    b3f6:	b007      	add	sp, #28
    b3f8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
    b3fc:	f00b bb58 	b.w	16ab0 <memcpy>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    b400:	4b6d      	ldr	r3, [pc, #436]	; (b5b8 <hci_evt_encode+0x638>)
    b402:	6819      	ldr	r1, [r3, #0]
    b404:	2000      	movs	r0, #0
    b406:	f001 0280 	and.w	r2, r1, #128	; 0x80
    b40a:	4603      	mov	r3, r0
    b40c:	4313      	orrs	r3, r2
    b40e:	f43f ae33 	beq.w	b078 <hci_evt_encode+0xf8>
    b412:	4632      	mov	r2, r6
    b414:	4639      	mov	r1, r7
    b416:	e7a8      	b.n	b36a <hci_evt_encode+0x3ea>
	switch (pdu_data->llctrl.unknown_rsp.type) {
    b418:	f894 3020 	ldrb.w	r3, [r4, #32]
    b41c:	2b0e      	cmp	r3, #14
    b41e:	f47f ae2b 	bne.w	b078 <hci_evt_encode+0xf8>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    b422:	460b      	mov	r3, r1
    b424:	463a      	mov	r2, r7
    b426:	2100      	movs	r1, #0
    b428:	201a      	movs	r0, #26
    b42a:	e78d      	b.n	b348 <hci_evt_encode+0x3c8>
		ll_rl_crpa_set(cc->peer_addr_type,
    b42c:	7fa0      	ldrb	r0, [r4, #30]
    b42e:	f104 0325 	add.w	r3, r4, #37	; 0x25
    b432:	22ff      	movs	r2, #255	; 0xff
    b434:	f104 011f 	add.w	r1, r4, #31
    b438:	f005 fccc 	bl	10dd4 <ll_rl_crpa_set>
    b43c:	e68c      	b.n	b158 <hci_evt_encode+0x1d8>
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
    b43e:	2100      	movs	r1, #0
    b440:	4608      	mov	r0, r1
    b442:	f104 031e 	add.w	r3, r4, #30
    b446:	463a      	mov	r2, r7
    b448:	f005 fcc4 	bl	10dd4 <ll_rl_crpa_set>
    b44c:	e6de      	b.n	b20c <hci_evt_encode+0x28c>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
    b44e:	2300      	movs	r3, #0
    b450:	e9cd 3301 	strd	r3, r3, [sp, #4]
    b454:	4638      	mov	r0, r7
    b456:	9300      	str	r3, [sp, #0]
    b458:	221a      	movs	r2, #26
    b45a:	2102      	movs	r1, #2
    b45c:	f002 f8e8 	bl	d630 <ll_conn_update>
		return;
    b460:	e60a      	b.n	b078 <hci_evt_encode+0xf8>
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    b462:	ea50 0301 	orrs.w	r3, r0, r1
    b466:	f040 8084 	bne.w	b572 <hci_evt_encode+0x5f2>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    b46a:	2212      	movs	r2, #18
    b46c:	2101      	movs	r1, #1
    b46e:	4630      	mov	r0, r6
    b470:	f7fe ff4a 	bl	a308 <meta_evt>
    b474:	4604      	mov	r4, r0
		(void)memset(lecc, 0x00, sizeof(*lecc));
    b476:	4641      	mov	r1, r8
    b478:	2212      	movs	r2, #18
    b47a:	f00b fb44 	bl	16b06 <memset>
		lecc->status = status;
    b47e:	7025      	strb	r5, [r4, #0]
		return;
    b480:	e5fa      	b.n	b078 <hci_evt_encode+0xf8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b482:	4313      	orrs	r3, r2
    b484:	f43f adf8 	beq.w	b078 <hci_evt_encode+0xf8>
	    !(le_event_mask & BT_EVT_MASK_LE_DIRECT_ADV_REPORT)) {
    b488:	4b4c      	ldr	r3, [pc, #304]	; (b5bc <hci_evt_encode+0x63c>)
    b48a:	6818      	ldr	r0, [r3, #0]
    b48c:	460b      	mov	r3, r1
    b48e:	f400 6280 	and.w	r2, r0, #1024	; 0x400
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b492:	4313      	orrs	r3, r2
    b494:	f43f adf0 	beq.w	b078 <hci_evt_encode+0xf8>
	LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    b498:	7f20      	ldrb	r0, [r4, #28]
    b49a:	f000 030f 	and.w	r3, r0, #15
    b49e:	2b01      	cmp	r3, #1
    b4a0:	d00d      	beq.n	b4be <hci_evt_encode+0x53e>
    b4a2:	4a47      	ldr	r2, [pc, #284]	; (b5c0 <hci_evt_encode+0x640>)
    b4a4:	4947      	ldr	r1, [pc, #284]	; (b5c4 <hci_evt_encode+0x644>)
    b4a6:	4848      	ldr	r0, [pc, #288]	; (b5c8 <hci_evt_encode+0x648>)
    b4a8:	f241 03e8 	movw	r3, #4328	; 0x10e8
    b4ac:	f00a fc48 	bl	15d40 <printk>
    b4b0:	4040      	eors	r0, r0
    b4b2:	f380 8811 	msr	BASEPRI, r0
    b4b6:	f04f 0003 	mov.w	r0, #3
    b4ba:	df02      	svc	2
    b4bc:	7f20      	ldrb	r0, [r4, #28]
	if (dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
    b4be:	f104 081e 	add.w	r8, r4, #30
    b4c2:	f3c0 1180 	ubfx	r1, r0, #6, #1
    b4c6:	4642      	mov	r2, r8
    b4c8:	f000 000f 	and.w	r0, r0, #15
    b4cc:	f7fe ff84 	bl	a3d8 <dup_found.isra.0>
    b4d0:	2800      	cmp	r0, #0
    b4d2:	f47f add1 	bne.w	b078 <hci_evt_encode+0xf8>
	drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    b4d6:	4630      	mov	r0, r6
    b4d8:	2211      	movs	r2, #17
    b4da:	210b      	movs	r1, #11
    b4dc:	f7fe ff14 	bl	a308 <meta_evt>
	drp->num_reports = 1U;
    b4e0:	2301      	movs	r3, #1
    b4e2:	7003      	strb	r3, [r0, #0]
	dir_info->evt_type = BT_HCI_ADV_DIRECT_IND;
    b4e4:	7043      	strb	r3, [r0, #1]
	drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    b4e6:	4606      	mov	r6, r0
	if (rl_idx < ll_rl_size_get()) {
    b4e8:	f005 f90c 	bl	10704 <ll_rl_size_get>
    b4ec:	4287      	cmp	r7, r0
    b4ee:	d258      	bcs.n	b5a2 <hci_evt_encode+0x622>
		ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
    b4f0:	4638      	mov	r0, r7
    b4f2:	1cf2      	adds	r2, r6, #3
    b4f4:	1cb1      	adds	r1, r6, #2
    b4f6:	f005 f8c1 	bl	1067c <ll_rl_id_addr_get>
		dir_info->addr.type += 2U;
    b4fa:	78b3      	ldrb	r3, [r6, #2]
    b4fc:	3302      	adds	r3, #2
    b4fe:	70b3      	strb	r3, [r6, #2]
	dir_info->dir_addr.type = adv->rx_addr;
    b500:	7f23      	ldrb	r3, [r4, #28]
    b502:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    b506:	7273      	strb	r3, [r6, #9]
	memcpy(&dir_info->dir_addr.a.val[0],
    b508:	f104 0124 	add.w	r1, r4, #36	; 0x24
    b50c:	2206      	movs	r2, #6
    b50e:	f106 000a 	add.w	r0, r6, #10
    b512:	f00b facd 	bl	16ab0 <memcpy>
	dir_info->rssi = rssi;
    b516:	7435      	strb	r5, [r6, #16]
    b518:	e5ae      	b.n	b078 <hci_evt_encode+0xf8>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    b51a:	221e      	movs	r2, #30
    b51c:	210a      	movs	r1, #10
    b51e:	f7fe fef3 	bl	a308 <meta_evt>
		leecc->status = 0x00;
    b522:	7005      	strb	r5, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
    b524:	f8a0 7001 	strh.w	r7, [r0, #1]
		leecc->role = cc->role;
    b528:	7f63      	ldrb	r3, [r4, #29]
    b52a:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = cc->peer_addr_type;
    b52c:	7fa3      	ldrb	r3, [r4, #30]
    b52e:	7103      	strb	r3, [r0, #4]
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    b530:	4606      	mov	r6, r0
		memcpy(&leecc->peer_addr.a.val[0], &cc->peer_addr[0],
    b532:	4641      	mov	r1, r8
    b534:	2206      	movs	r2, #6
    b536:	3005      	adds	r0, #5
    b538:	f00b faba 	bl	16ab0 <memcpy>
		memcpy(&leecc->local_rpa.val[0], &cc->local_rpa[0],
    b53c:	2206      	movs	r2, #6
    b53e:	f104 012b 	add.w	r1, r4, #43	; 0x2b
    b542:	f106 000b 	add.w	r0, r6, #11
    b546:	f00b fab3 	bl	16ab0 <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &cc->peer_rpa[0],
    b54a:	2206      	movs	r2, #6
    b54c:	f104 0125 	add.w	r1, r4, #37	; 0x25
    b550:	f106 0011 	add.w	r0, r6, #17
    b554:	f00b faac 	bl	16ab0 <memcpy>
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
    b558:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
		leecc->interval = sys_cpu_to_le16(cc->interval);
    b55a:	8e61      	ldrh	r1, [r4, #50]	; 0x32
		leecc->latency = sys_cpu_to_le16(cc->latency);
    b55c:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    b55e:	f8a6 2019 	strh.w	r2, [r6, #25]
		leecc->interval = sys_cpu_to_le16(cc->interval);
    b562:	f8a6 1017 	strh.w	r1, [r6, #23]
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
    b566:	f8a6 301b 	strh.w	r3, [r6, #27]
		leecc->clock_accuracy = cc->sca;
    b56a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    b56e:	7773      	strb	r3, [r6, #29]
		return;
    b570:	e582      	b.n	b078 <hci_evt_encode+0xf8>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    b572:	221e      	movs	r2, #30
    b574:	210a      	movs	r1, #10
    b576:	4630      	mov	r0, r6
    b578:	f7fe fec6 	bl	a308 <meta_evt>
    b57c:	4604      	mov	r4, r0
			(void)memset(leecc, 0x00, sizeof(*leecc));
    b57e:	4641      	mov	r1, r8
    b580:	221e      	movs	r2, #30
    b582:	f00b fac0 	bl	16b06 <memset>
			leecc->status = status;
    b586:	7025      	strb	r5, [r4, #0]
			return;
    b588:	e576      	b.n	b078 <hci_evt_encode+0xf8>
		adv_info->addr.type = adv->tx_addr;
    b58a:	7f23      	ldrb	r3, [r4, #28]
    b58c:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    b590:	4649      	mov	r1, r9
		adv_info->addr.type = adv->tx_addr;
    b592:	70b3      	strb	r3, [r6, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    b594:	2206      	movs	r2, #6
    b596:	1cf0      	adds	r0, r6, #3
    b598:	f00b fa8a 	bl	16ab0 <memcpy>
    b59c:	e681      	b.n	b2a2 <hci_evt_encode+0x322>
    b59e:	220b      	movs	r2, #11
    b5a0:	e663      	b.n	b26a <hci_evt_encode+0x2ea>
		dir_info->addr.type = adv->tx_addr;
    b5a2:	7f23      	ldrb	r3, [r4, #28]
    b5a4:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&dir_info->addr.a.val[0], &adv->direct_ind.adv_addr[0],
    b5a8:	4641      	mov	r1, r8
		dir_info->addr.type = adv->tx_addr;
    b5aa:	70b3      	strb	r3, [r6, #2]
		memcpy(&dir_info->addr.a.val[0], &adv->direct_ind.adv_addr[0],
    b5ac:	2206      	movs	r2, #6
    b5ae:	1cf0      	adds	r0, r6, #3
    b5b0:	f00b fa7e 	bl	16ab0 <memcpy>
    b5b4:	e7a4      	b.n	b500 <hci_evt_encode+0x580>
    b5b6:	bf00      	nop
    b5b8:	20000120 	.word	0x20000120
    b5bc:	20000128 	.word	0x20000128
    b5c0:	00019a78 	.word	0x00019a78
    b5c4:	00019ab4 	.word	0x00019ab4
    b5c8:	000199cc 	.word	0x000199cc

0000b5cc <hci_num_cmplt_encode>:

#if defined(CONFIG_BT_CONN)
void hci_num_cmplt_encode(struct net_buf *buf, uint16_t handle, uint8_t num)
{
    b5cc:	b570      	push	{r4, r5, r6, lr}
    b5ce:	f100 0408 	add.w	r4, r0, #8
    b5d2:	460e      	mov	r6, r1
    b5d4:	4620      	mov	r0, r4
    b5d6:	2102      	movs	r1, #2
    b5d8:	4615      	mov	r5, r2
    b5da:	f00d f90e 	bl	187fa <net_buf_simple_add>
    b5de:	4603      	mov	r3, r0
	hdr->evt = evt;
    b5e0:	2213      	movs	r2, #19
	hdr->len = len;
    b5e2:	2105      	movs	r1, #5
	hdr->evt = evt;
    b5e4:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
    b5e6:	7059      	strb	r1, [r3, #1]
    b5e8:	4620      	mov	r0, r4
    b5ea:	f00d f906 	bl	187fa <net_buf_simple_add>

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
	ep->num_handles = num_handles;
    b5ee:	2301      	movs	r3, #1
    b5f0:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    b5f2:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
    b5f6:	f8a0 5003 	strh.w	r5, [r0, #3]
}
    b5fa:	bd70      	pop	{r4, r5, r6, pc}

0000b5fc <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    b5fc:	7903      	ldrb	r3, [r0, #4]
    b5fe:	2b03      	cmp	r3, #3
    b600:	d008      	beq.n	b614 <hci_get_class+0x18>

		switch (node_rx->hdr.type) {
    b602:	3b05      	subs	r3, #5
    b604:	b2db      	uxtb	r3, r3
    b606:	2b15      	cmp	r3, #21
    b608:	d901      	bls.n	b60e <hci_get_class+0x12>
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    b60a:	2000      	movs	r0, #0
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
    b60c:	4770      	bx	lr
    b60e:	4a05      	ldr	r2, [pc, #20]	; (b624 <hci_get_class+0x28>)
    b610:	5cd0      	ldrb	r0, [r2, r3]
    b612:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    b614:	7f03      	ldrb	r3, [r0, #28]
    b616:	f003 0303 	and.w	r3, r3, #3
    b61a:	2b03      	cmp	r3, #3
		return HCI_CLASS_ACL_DATA;
    b61c:	bf0c      	ite	eq
    b61e:	2004      	moveq	r0, #4
    b620:	2005      	movne	r0, #5
    b622:	4770      	bx	lr
    b624:	00019adc 	.word	0x00019adc

0000b628 <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
    b628:	480d      	ldr	r0, [pc, #52]	; (b660 <hci_init+0x38>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    b62a:	4a0e      	ldr	r2, [pc, #56]	; (b664 <hci_init+0x3c>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    b62c:	4b0e      	ldr	r3, [pc, #56]	; (b668 <hci_init+0x40>)
	dup_count = -1;
    b62e:	490f      	ldr	r1, [pc, #60]	; (b66c <hci_init+0x44>)

void hci_init(struct k_poll_signal *signal_host_buf)
{
    b630:	b430      	push	{r4, r5}
	event_mask = DEFAULT_EVENT_MASK;
    b632:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    b636:	f641 75ff 	movw	r5, #8191	; 0x1fff
    b63a:	e9c0 4500 	strd	r4, r5, [r0]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    b63e:	2400      	movs	r4, #0
    b640:	2500      	movs	r5, #0
    b642:	e9c2 4500 	strd	r4, r5, [r2]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    b646:	241f      	movs	r4, #31
    b648:	2500      	movs	r5, #0
    b64a:	e9c3 4500 	strd	r4, r5, [r3]
	conn_count = 0U;
    b64e:	4b08      	ldr	r3, [pc, #32]	; (b670 <hci_init+0x48>)
	dup_count = -1;
    b650:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	conn_count = 0U;
    b654:	2200      	movs	r2, #0
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
    b656:	bc30      	pop	{r4, r5}
	dup_count = -1;
    b658:	6008      	str	r0, [r1, #0]
	conn_count = 0U;
    b65a:	601a      	str	r2, [r3, #0]
}
    b65c:	4770      	bx	lr
    b65e:	bf00      	nop
    b660:	20000120 	.word	0x20000120
    b664:	20000bd8 	.word	0x20000bd8
    b668:	20000128 	.word	0x20000128
    b66c:	20001230 	.word	0x20001230
    b670:	2000122c 	.word	0x2000122c

0000b674 <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
    b674:	f005 bff2 	b.w	1165c <lll_csrand_get>

0000b678 <bt_encrypt_le>:
}

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
    b678:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
    b67a:	2300      	movs	r3, #0
    b67c:	f007 fb30 	bl	12ce0 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
    b680:	2000      	movs	r0, #0
    b682:	bd08      	pop	{r3, pc}

0000b684 <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
    b684:	b510      	push	{r4, lr}
    b686:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
    b688:	f006 f808 	bl	1169c <lll_reset>
	LL_ASSERT(!err);
    b68c:	b950      	cbnz	r0, b6a4 <perform_lll_reset+0x20>
	LL_ASSERT(!err);
#endif /* CONFIG_BT_BROADCASTER */

#if defined(CONFIG_BT_OBSERVER)
	/* Reset scan state */
	err = lll_scan_reset();
    b68e:	f006 fd9d 	bl	121cc <lll_scan_reset>
	LL_ASSERT(!err);
    b692:	b9c0      	cbnz	r0, b6c6 <perform_lll_reset+0x42>
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
    b694:	f006 fe14 	bl	122c0 <lll_conn_reset>
	LL_ASSERT(!err);
    b698:	bb30      	cbnz	r0, b6e8 <perform_lll_reset+0x64>
	z_impl_k_sem_give(sem);
    b69a:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CTLR_DF */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
    b69c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b6a0:	f009 be38 	b.w	15314 <z_impl_k_sem_give>
	LL_ASSERT(!err);
    b6a4:	4a19      	ldr	r2, [pc, #100]	; (b70c <perform_lll_reset+0x88>)
    b6a6:	491a      	ldr	r1, [pc, #104]	; (b710 <perform_lll_reset+0x8c>)
    b6a8:	481a      	ldr	r0, [pc, #104]	; (b714 <perform_lll_reset+0x90>)
    b6aa:	f240 7329 	movw	r3, #1833	; 0x729
    b6ae:	f00a fb47 	bl	15d40 <printk>
    b6b2:	4040      	eors	r0, r0
    b6b4:	f380 8811 	msr	BASEPRI, r0
    b6b8:	f04f 0003 	mov.w	r0, #3
    b6bc:	df02      	svc	2
	err = lll_scan_reset();
    b6be:	f006 fd85 	bl	121cc <lll_scan_reset>
	LL_ASSERT(!err);
    b6c2:	2800      	cmp	r0, #0
    b6c4:	d0e6      	beq.n	b694 <perform_lll_reset+0x10>
    b6c6:	4a11      	ldr	r2, [pc, #68]	; (b70c <perform_lll_reset+0x88>)
    b6c8:	4911      	ldr	r1, [pc, #68]	; (b710 <perform_lll_reset+0x8c>)
    b6ca:	4812      	ldr	r0, [pc, #72]	; (b714 <perform_lll_reset+0x90>)
    b6cc:	f240 7334 	movw	r3, #1844	; 0x734
    b6d0:	f00a fb36 	bl	15d40 <printk>
    b6d4:	4040      	eors	r0, r0
    b6d6:	f380 8811 	msr	BASEPRI, r0
    b6da:	f04f 0003 	mov.w	r0, #3
    b6de:	df02      	svc	2
	err = lll_conn_reset();
    b6e0:	f006 fdee 	bl	122c0 <lll_conn_reset>
	LL_ASSERT(!err);
    b6e4:	2800      	cmp	r0, #0
    b6e6:	d0d8      	beq.n	b69a <perform_lll_reset+0x16>
    b6e8:	4a08      	ldr	r2, [pc, #32]	; (b70c <perform_lll_reset+0x88>)
    b6ea:	4909      	ldr	r1, [pc, #36]	; (b710 <perform_lll_reset+0x8c>)
    b6ec:	4809      	ldr	r0, [pc, #36]	; (b714 <perform_lll_reset+0x90>)
    b6ee:	f240 733a 	movw	r3, #1850	; 0x73a
    b6f2:	f00a fb25 	bl	15d40 <printk>
    b6f6:	4040      	eors	r0, r0
    b6f8:	f380 8811 	msr	BASEPRI, r0
    b6fc:	f04f 0003 	mov.w	r0, #3
    b700:	df02      	svc	2
    b702:	4620      	mov	r0, r4
}
    b704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b708:	f009 be04 	b.w	15314 <z_impl_k_sem_give>
    b70c:	00019af4 	.word	0x00019af4
    b710:	00019b30 	.word	0x00019b30
    b714:	000199cc 	.word	0x000199cc

0000b718 <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
    b718:	6008      	str	r0, [r1, #0]
    b71a:	4801      	ldr	r0, [pc, #4]	; (b720 <ull_ticker_status_give+0x8>)
    b71c:	f009 bdfa 	b.w	15314 <z_impl_k_sem_give>
    b720:	20001640 	.word	0x20001640

0000b724 <disabled_cb>:
    b724:	f009 bdf6 	b.w	15314 <z_impl_k_sem_give>

0000b728 <tx_cmplt_get>:
}
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL */

#if defined(CONFIG_BT_CONN)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
    b728:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_tx *tx;
	uint8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    b72c:	4f2f      	ldr	r7, [pc, #188]	; (b7ec <tx_cmplt_get+0xc4>)
					   uint8_t first, uint8_t last, uint8_t *idx)
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
    b72e:	780b      	ldrb	r3, [r1, #0]
    b730:	783c      	ldrb	r4, [r7, #0]
{
    b732:	460d      	mov	r5, r1
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    b734:	7879      	ldrb	r1, [r7, #1]
    b736:	4299      	cmp	r1, r3
    b738:	bf9c      	itt	ls
    b73a:	78bb      	ldrbls	r3, [r7, #2]
		*idx = first;
    b73c:	702b      	strbls	r3, [r5, #0]
	}

	if (*idx == last) {
    b73e:	429a      	cmp	r2, r3
{
    b740:	4683      	mov	fp, r0
    b742:	4692      	mov	sl, r2
    b744:	d045      	beq.n	b7d2 <tx_cmplt_get+0xaa>
		return NULL;
	}

	i = *idx + 1;
    b746:	1c5a      	adds	r2, r3, #1
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
    b748:	4e29      	ldr	r6, [pc, #164]	; (b7f0 <tx_cmplt_get+0xc8>)
	i = *idx + 1;
    b74a:	b2d2      	uxtb	r2, r2
	p = (void *)(fifo + (*idx) * size);
    b74c:	fb13 f304 	smulbb	r3, r3, r4
		i = 0U;
    b750:	4291      	cmp	r1, r2
    b752:	bf08      	it	eq
    b754:	2200      	moveq	r2, #0
				    mfifo_tx_ack.n, mfifo_tx_ack.f, last,
				    first);
	if (!tx) {
    b756:	18f1      	adds	r1, r6, r3

	*idx = i;
    b758:	702a      	strb	r2, [r5, #0]
    b75a:	d03a      	beq.n	b7d2 <tx_cmplt_get+0xaa>
		return 0;
	}

	*handle = tx->handle;
    b75c:	5af3      	ldrh	r3, [r6, r3]
    b75e:	8003      	strh	r3, [r0, #0]
	cmplt = 0U;
    b760:	f04f 0800 	mov.w	r8, #0
    b764:	f04f 0901 	mov.w	r9, #1
    b768:	e022      	b.n	b7b0 <tx_cmplt_get+0x88>
		struct node_tx *node_tx;
		struct pdu_data *p;

		node_tx = tx->node;
		p = (void *)node_tx->pdu;
		if (!node_tx || (node_tx == (void *)1) ||
    b76a:	b37b      	cbz	r3, b7cc <tx_cmplt_get+0xa4>
		    (((uint32_t)node_tx & ~3) &&
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
    b76c:	7903      	ldrb	r3, [r0, #4]
    b76e:	f003 0303 	and.w	r3, r3, #3
		    (((uint32_t)node_tx & ~3) &&
    b772:	3b01      	subs	r3, #1
    b774:	2b01      	cmp	r3, #1
    b776:	d931      	bls.n	b7dc <tx_cmplt_get+0xb4>
    b778:	2302      	movs	r3, #2
    b77a:	604b      	str	r3, [r1, #4]
			/* ctrl packet or flushed, hence dont count num cmplt */
			tx->node = (void *)2;
		}

		if (((uint32_t)node_tx & ~3)) {
			ll_tx_mem_release(node_tx);
    b77c:	f001 ff12 	bl	d5a4 <ll_tx_mem_release>
	if (*idx >= count) {
    b780:	782b      	ldrb	r3, [r5, #0]
		}

		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    b782:	7879      	ldrb	r1, [r7, #1]
    b784:	7838      	ldrb	r0, [r7, #0]
    b786:	4299      	cmp	r1, r3
    b788:	bf9c      	itt	ls
    b78a:	78bb      	ldrbls	r3, [r7, #2]
		*idx = first;
    b78c:	702b      	strbls	r3, [r5, #0]
	if (*idx == last) {
    b78e:	459a      	cmp	sl, r3
    b790:	d021      	beq.n	b7d6 <tx_cmplt_get+0xae>
	i = *idx + 1;
    b792:	1c5c      	adds	r4, r3, #1
    b794:	b2e4      	uxtb	r4, r4
	p = (void *)(fifo + (*idx) * size);
    b796:	fb13 f300 	smulbb	r3, r3, r0
		i = 0U;
    b79a:	42a1      	cmp	r1, r4
    b79c:	bf08      	it	eq
    b79e:	2400      	moveq	r4, #0
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, first);
	} while (tx && tx->handle == *handle);
    b7a0:	18f1      	adds	r1, r6, r3
	*idx = i;
    b7a2:	702c      	strb	r4, [r5, #0]
    b7a4:	d017      	beq.n	b7d6 <tx_cmplt_get+0xae>
    b7a6:	5af0      	ldrh	r0, [r6, r3]
    b7a8:	f8bb 3000 	ldrh.w	r3, [fp]
    b7ac:	4298      	cmp	r0, r3
    b7ae:	d112      	bne.n	b7d6 <tx_cmplt_get+0xae>
		node_tx = tx->node;
    b7b0:	6848      	ldr	r0, [r1, #4]
		if (!node_tx || (node_tx == (void *)1) ||
    b7b2:	2801      	cmp	r0, #1
    b7b4:	f020 0303 	bic.w	r3, r0, #3
    b7b8:	d8d7      	bhi.n	b76a <tx_cmplt_get+0x42>
			cmplt++;
    b7ba:	f108 0801 	add.w	r8, r8, #1
    b7be:	fa5f f888 	uxtb.w	r8, r8
    b7c2:	f8c1 9004 	str.w	r9, [r1, #4]
		if (((uint32_t)node_tx & ~3)) {
    b7c6:	2b00      	cmp	r3, #0
    b7c8:	d0da      	beq.n	b780 <tx_cmplt_get+0x58>
    b7ca:	e7d7      	b.n	b77c <tx_cmplt_get+0x54>
    b7cc:	2302      	movs	r3, #2
    b7ce:	604b      	str	r3, [r1, #4]
    b7d0:	e7d6      	b.n	b780 <tx_cmplt_get+0x58>
		return 0;
    b7d2:	f04f 0800 	mov.w	r8, #0

	return cmplt;
}
    b7d6:	4640      	mov	r0, r8
    b7d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cmplt++;
    b7dc:	f108 0801 	add.w	r8, r8, #1
    b7e0:	fa5f f888 	uxtb.w	r8, r8
    b7e4:	f8c1 9004 	str.w	r9, [r1, #4]
		if (((uint32_t)node_tx & ~3)) {
    b7e8:	e7c8      	b.n	b77c <tx_cmplt_get+0x54>
    b7ea:	bf00      	nop
    b7ec:	20000340 	.word	0x20000340
    b7f0:	20000344 	.word	0x20000344

0000b7f4 <ull_done>:
}
#endif /* CONFIG_BT_CONN */

#if !defined(CONFIG_BT_CTLR_LOW_LAT_ULL)
static void ull_done(void *param)
{
    b7f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b7f8:	4f3f      	ldr	r7, [pc, #252]	; (b8f8 <ull_done+0x104>)
	case EVENT_DONE_EXTRA_TYPE_NONE:
		/* ignore */
		break;

	default:
		LL_ASSERT(0);
    b7fa:	f8df 810c 	ldr.w	r8, [pc, #268]	; b908 <ull_done+0x114>
    b7fe:	f8df a10c 	ldr.w	sl, [pc, #268]	; b90c <ull_done+0x118>
{
    b802:	b082      	sub	sp, #8
			memq_dequeue(memq_ull_done.tail, &memq_ull_done.head, NULL);
    b804:	46b9      	mov	r9, r7
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
    b806:	e9d7 0100 	ldrd	r0, r1, [r7]
    b80a:	aa01      	add	r2, sp, #4
    b80c:	f7fc fefc 	bl	8608 <memq_peek>
		if (link) {
    b810:	4604      	mov	r4, r0
    b812:	2800      	cmp	r0, #0
    b814:	d042      	beq.n	b89c <ull_done+0xa8>
			memq_dequeue(memq_ull_done.tail, &memq_ull_done.head, NULL);
    b816:	6878      	ldr	r0, [r7, #4]
    b818:	2200      	movs	r2, #0
    b81a:	4649      	mov	r1, r9
    b81c:	f7fc fefc 	bl	8618 <memq_dequeue>
			rx_demux_event_done(link, done);
    b820:	9e01      	ldr	r6, [sp, #4]
	switch (done->extra.type) {
    b822:	f896 3020 	ldrb.w	r3, [r6, #32]
	ull_hdr = done->param;
    b826:	69f5      	ldr	r5, [r6, #28]
	switch (done->extra.type) {
    b828:	b123      	cbz	r3, b834 <ull_done+0x40>
    b82a:	2b01      	cmp	r3, #1
    b82c:	d147      	bne.n	b8be <ull_done+0xca>
		ull_conn_done(done);
    b82e:	4630      	mov	r0, r6
    b830:	f003 fd4e 	bl	f2d0 <ull_conn_done>
	if (!MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
    b834:	f8df c0d8 	ldr.w	ip, [pc, #216]	; b910 <ull_done+0x11c>
    b838:	f89c 2003 	ldrb.w	r2, [ip, #3]
	if (last == count) {
    b83c:	f89c 0001 	ldrb.w	r0, [ip, #1]
    b840:	f89c 1002 	ldrb.w	r1, [ip, #2]
	last = last + 1;
    b844:	1c53      	adds	r3, r2, #1
    b846:	b2db      	uxtb	r3, r3
		last = 0U;
    b848:	4298      	cmp	r0, r3
    b84a:	bf08      	it	eq
    b84c:	2300      	moveq	r3, #0
	if (last == first) {
    b84e:	4299      	cmp	r1, r3
		break;
	}

	/* release done */
	done->extra.type = 0U;
    b850:	f04f 0000 	mov.w	r0, #0
    b854:	f886 0020 	strb.w	r0, [r6, #32]
    b858:	d023      	beq.n	b8a2 <ull_done+0xae>
	done->hdr.link = link;
    b85a:	6034      	str	r4, [r6, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    b85c:	f89c 1000 	ldrb.w	r1, [ip]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    b860:	fb01 c202 	mla	r2, r1, r2, ip
    b864:	6056      	str	r6, [r2, #4]
	*last = idx; /* Commit: Update write index */
    b866:	f88c 3003 	strb.w	r3, [ip, #3]
	/* LLL done synchronized */
	lll_done_sync();
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL_DONE */

	/* ull instance will resume, dont decrement ref */
	if (!ull_hdr) {
    b86a:	2d00      	cmp	r5, #0
    b86c:	d0cb      	beq.n	b806 <ull_done+0x12>
	return hdr->ref;
    b86e:	782b      	ldrb	r3, [r5, #0]
		return;
	}

	/* Decrement prepare reference */
	LL_ASSERT(ull_ref_get(ull_hdr));
    b870:	2b00      	cmp	r3, #0
    b872:	d032      	beq.n	b8da <ull_done+0xe6>
	return hdr->ref--;
    b874:	782b      	ldrb	r3, [r5, #0]
    b876:	3b01      	subs	r3, #1
    b878:	b2db      	uxtb	r3, r3
    b87a:	702b      	strb	r3, [r5, #0]
	return hdr->ref;
    b87c:	782b      	ldrb	r3, [r5, #0]
	ull_ref_dec(ull_hdr);

	/* If disable initiated, signal the semaphore */
	if (!ull_ref_get(ull_hdr) && ull_hdr->disabled_cb) {
    b87e:	2b00      	cmp	r3, #0
    b880:	d1c1      	bne.n	b806 <ull_done+0x12>
    b882:	686b      	ldr	r3, [r5, #4]
    b884:	2b00      	cmp	r3, #0
    b886:	d0be      	beq.n	b806 <ull_done+0x12>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
    b888:	68a8      	ldr	r0, [r5, #8]
    b88a:	4798      	blx	r3
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
    b88c:	e9d7 0100 	ldrd	r0, r1, [r7]
    b890:	aa01      	add	r2, sp, #4
    b892:	f7fc feb9 	bl	8608 <memq_peek>
		if (link) {
    b896:	4604      	mov	r4, r0
    b898:	2800      	cmp	r0, #0
    b89a:	d1bc      	bne.n	b816 <ull_done+0x22>
}
    b89c:	b002      	add	sp, #8
    b89e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	LL_ASSERT(release == done);
    b8a2:	4916      	ldr	r1, [pc, #88]	; (b8fc <ull_done+0x108>)
    b8a4:	4816      	ldr	r0, [pc, #88]	; (b900 <ull_done+0x10c>)
    b8a6:	f640 137b 	movw	r3, #2427	; 0x97b
    b8aa:	4642      	mov	r2, r8
    b8ac:	f00a fa48 	bl	15d40 <printk>
    b8b0:	4040      	eors	r0, r0
    b8b2:	f380 8811 	msr	BASEPRI, r0
    b8b6:	f04f 0003 	mov.w	r0, #3
    b8ba:	df02      	svc	2
    b8bc:	e7d5      	b.n	b86a <ull_done+0x76>
		LL_ASSERT(0);
    b8be:	4810      	ldr	r0, [pc, #64]	; (b900 <ull_done+0x10c>)
    b8c0:	f640 1374 	movw	r3, #2420	; 0x974
    b8c4:	4642      	mov	r2, r8
    b8c6:	4651      	mov	r1, sl
    b8c8:	f00a fa3a 	bl	15d40 <printk>
    b8cc:	4040      	eors	r0, r0
    b8ce:	f380 8811 	msr	BASEPRI, r0
    b8d2:	f04f 0003 	mov.w	r0, #3
    b8d6:	df02      	svc	2
		break;
    b8d8:	e7ac      	b.n	b834 <ull_done+0x40>
	LL_ASSERT(ull_ref_get(ull_hdr));
    b8da:	490a      	ldr	r1, [pc, #40]	; (b904 <ull_done+0x110>)
    b8dc:	4808      	ldr	r0, [pc, #32]	; (b900 <ull_done+0x10c>)
    b8de:	f640 138b 	movw	r3, #2443	; 0x98b
    b8e2:	4642      	mov	r2, r8
    b8e4:	f00a fa2c 	bl	15d40 <printk>
    b8e8:	4040      	eors	r0, r0
    b8ea:	f380 8811 	msr	BASEPRI, r0
    b8ee:	f04f 0003 	mov.w	r0, #3
    b8f2:	df02      	svc	2
    b8f4:	e7be      	b.n	b874 <ull_done+0x80>
    b8f6:	bf00      	nop
    b8f8:	2000162c 	.word	0x2000162c
    b8fc:	00019b50 	.word	0x00019b50
    b900:	000199cc 	.word	0x000199cc
    b904:	00019b38 	.word	0x00019b38
    b908:	00019af4 	.word	0x00019af4
    b90c:	00019a2c 	.word	0x00019a2c
    b910:	200001fc 	.word	0x200001fc

0000b914 <rx_demux>:
{
    b914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b918:	4f6d      	ldr	r7, [pc, #436]	; (bad0 <rx_demux+0x1bc>)
	k_sem_give(sem_recv);
    b91a:	f8df 81c8 	ldr.w	r8, [pc, #456]	; bae4 <rx_demux+0x1d0>
		LL_ASSERT(0);
    b91e:	f8df 91c8 	ldr.w	r9, [pc, #456]	; bae8 <rx_demux+0x1d4>
    b922:	f8df a1c8 	ldr.w	sl, [pc, #456]	; baec <rx_demux+0x1d8>
{
    b926:	b087      	sub	sp, #28
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
    b928:	e9d7 0100 	ldrd	r0, r1, [r7]
    b92c:	aa03      	add	r2, sp, #12
    b92e:	f7fc fe6b 	bl	8608 <memq_peek>
		if (link) {
    b932:	4605      	mov	r5, r0
    b934:	2800      	cmp	r0, #0
    b936:	d036      	beq.n	b9a6 <rx_demux+0x92>
			LL_ASSERT(rx);
    b938:	9b03      	ldr	r3, [sp, #12]
    b93a:	2b00      	cmp	r3, #0
    b93c:	f000 80a4 	beq.w	ba88 <rx_demux+0x174>
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
    b940:	7818      	ldrb	r0, [r3, #0]
    b942:	aa04      	add	r2, sp, #16
    b944:	a902      	add	r1, sp, #8
    b946:	f003 ff37 	bl	f7b8 <ull_conn_ack_by_last_peek>
			if (link_tx) {
    b94a:	4604      	mov	r4, r0
    b94c:	2800      	cmp	r0, #0
    b94e:	d056      	beq.n	b9fe <rx_demux+0xea>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
    b950:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
    b954:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    b958:	f891 b000 	ldrb.w	fp, [r1]
    b95c:	9205      	str	r2, [sp, #20]
    b95e:	f8ad 300a 	strh.w	r3, [sp, #10]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
    b962:	ae05      	add	r6, sp, #20
    b964:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
    b968:	f003 ff3c 	bl	f7e4 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
    b96c:	4621      	mov	r1, r4
    b96e:	9a05      	ldr	r2, [sp, #20]
    b970:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    b974:	f003 ff7e 	bl	f874 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
    b978:	4620      	mov	r0, r4
    b97a:	f003 fef7 	bl	f76c <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
    b97e:	4632      	mov	r2, r6
    b980:	4629      	mov	r1, r5
    b982:	4658      	mov	r0, fp
    b984:	f003 ff18 	bl	f7b8 <ull_conn_ack_by_last_peek>
	} while (link);
    b988:	4604      	mov	r4, r0
    b98a:	2800      	cmp	r0, #0
    b98c:	d1ec      	bne.n	b968 <rx_demux+0x54>
	k_sem_give(sem_recv);
    b98e:	f8d8 0000 	ldr.w	r0, [r8]
    b992:	f009 fcbf 	bl	15314 <z_impl_k_sem_give>
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
    b996:	e9d7 0100 	ldrd	r0, r1, [r7]
    b99a:	aa03      	add	r2, sp, #12
    b99c:	f7fc fe34 	bl	8608 <memq_peek>
		if (link) {
    b9a0:	4605      	mov	r5, r0
    b9a2:	2800      	cmp	r0, #0
    b9a4:	d1c8      	bne.n	b938 <rx_demux+0x24>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
    b9a6:	aa04      	add	r2, sp, #16
    b9a8:	a902      	add	r1, sp, #8
    b9aa:	f10d 0007 	add.w	r0, sp, #7
    b9ae:	f003 fee9 	bl	f784 <ull_conn_ack_peek>
			if (link) {
    b9b2:	4604      	mov	r4, r0
    b9b4:	2800      	cmp	r0, #0
    b9b6:	d064      	beq.n	ba82 <rx_demux+0x16e>
				rx_demux_conn_tx_ack(ack_last, handle,
    b9b8:	9a04      	ldr	r2, [sp, #16]
    b9ba:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    b9be:	f89d b007 	ldrb.w	fp, [sp, #7]
    b9c2:	9205      	str	r2, [sp, #20]
    b9c4:	f8ad 300a 	strh.w	r3, [sp, #10]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
    b9c8:	ae05      	add	r6, sp, #20
    b9ca:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
    b9ce:	f003 ff09 	bl	f7e4 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
    b9d2:	4621      	mov	r1, r4
    b9d4:	9a05      	ldr	r2, [sp, #20]
    b9d6:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    b9da:	f003 ff4b 	bl	f874 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
    b9de:	4620      	mov	r0, r4
    b9e0:	f003 fec4 	bl	f76c <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
    b9e4:	4632      	mov	r2, r6
    b9e6:	4629      	mov	r1, r5
    b9e8:	4658      	mov	r0, fp
    b9ea:	f003 fee5 	bl	f7b8 <ull_conn_ack_by_last_peek>
	} while (link);
    b9ee:	4604      	mov	r4, r0
    b9f0:	2800      	cmp	r0, #0
    b9f2:	d1ec      	bne.n	b9ce <rx_demux+0xba>
	k_sem_give(sem_recv);
    b9f4:	f8d8 0000 	ldr.w	r0, [r8]
    b9f8:	f009 fc8c 	bl	15314 <z_impl_k_sem_give>
			if (nack) {
    b9fc:	e7cb      	b.n	b996 <rx_demux+0x82>
				nack = rx_demux_rx(link, rx);
    b9fe:	9b03      	ldr	r3, [sp, #12]
    ba00:	9305      	str	r3, [sp, #20]
	switch (rx->type) {
    ba02:	791b      	ldrb	r3, [r3, #4]
    ba04:	3b01      	subs	r3, #1
    ba06:	2b14      	cmp	r3, #20
    ba08:	d80c      	bhi.n	ba24 <rx_demux+0x110>
    ba0a:	e8df f003 	tbb	[pc, r3]
    ba0e:	0b19      	.short	0x0b19
    ba10:	0b190b35 	.word	0x0b190b35
    ba14:	0b0b0b0b 	.word	0x0b0b0b0b
    ba18:	0b0b0b0b 	.word	0x0b0b0b0b
    ba1c:	0b0b0b0b 	.word	0x0b0b0b0b
    ba20:	2b0b      	.short	0x2b0b
    ba22:	19          	.byte	0x19
    ba23:	00          	.byte	0x00
		LL_ASSERT(0);
    ba24:	482b      	ldr	r0, [pc, #172]	; (bad4 <rx_demux+0x1c0>)
    ba26:	f640 132f 	movw	r3, #2351	; 0x92f
    ba2a:	464a      	mov	r2, r9
    ba2c:	4651      	mov	r1, sl
    ba2e:	f00a f987 	bl	15d40 <printk>
    ba32:	4040      	eors	r0, r0
    ba34:	f380 8811 	msr	BASEPRI, r0
    ba38:	f04f 0003 	mov.w	r0, #3
    ba3c:	df02      	svc	2
			if (nack) {
    ba3e:	e773      	b.n	b928 <rx_demux+0x14>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    ba40:	4923      	ldr	r1, [pc, #140]	; (bad0 <rx_demux+0x1bc>)
    ba42:	6878      	ldr	r0, [r7, #4]
    ba44:	2200      	movs	r2, #0
    ba46:	f7fc fde7 	bl	8618 <memq_dequeue>
	rx_hdr->ack_last = mfifo_tx_ack.l;
    ba4a:	4b23      	ldr	r3, [pc, #140]	; (bad8 <rx_demux+0x1c4>)
		ll_rx_put(link, rx);
    ba4c:	9905      	ldr	r1, [sp, #20]
	rx_hdr->ack_last = mfifo_tx_ack.l;
    ba4e:	78db      	ldrb	r3, [r3, #3]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    ba50:	4a22      	ldr	r2, [pc, #136]	; (badc <rx_demux+0x1c8>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
    ba52:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    ba54:	4628      	mov	r0, r5
    ba56:	f7fc fdcf 	bl	85f8 <memq_enqueue>
	k_sem_give(sem_recv);
    ba5a:	f8d8 0000 	ldr.w	r0, [r8]
    ba5e:	f009 fc59 	bl	15314 <z_impl_k_sem_give>
			if (nack) {
    ba62:	e798      	b.n	b996 <rx_demux+0x82>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    ba64:	491a      	ldr	r1, [pc, #104]	; (bad0 <rx_demux+0x1bc>)
    ba66:	6878      	ldr	r0, [r7, #4]
    ba68:	2200      	movs	r2, #0
    ba6a:	f7fc fdd5 	bl	8618 <memq_dequeue>
		ull_conn_setup(link, rx);
    ba6e:	9905      	ldr	r1, [sp, #20]
    ba70:	4628      	mov	r0, r5
    ba72:	f002 f877 	bl	db64 <ull_conn_setup>
			if (nack) {
    ba76:	e757      	b.n	b928 <rx_demux+0x14>
		nack = ull_conn_rx(link, (void *)&rx);
    ba78:	a905      	add	r1, sp, #20
    ba7a:	4628      	mov	r0, r5
    ba7c:	f002 f892 	bl	dba4 <ull_conn_rx>
		if (nack) {
    ba80:	b188      	cbz	r0, baa6 <rx_demux+0x192>
}
    ba82:	b007      	add	sp, #28
    ba84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LL_ASSERT(rx);
    ba88:	4915      	ldr	r1, [pc, #84]	; (bae0 <rx_demux+0x1cc>)
    ba8a:	4812      	ldr	r0, [pc, #72]	; (bad4 <rx_demux+0x1c0>)
    ba8c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
    ba90:	464a      	mov	r2, r9
    ba92:	f00a f955 	bl	15d40 <printk>
    ba96:	4040      	eors	r0, r0
    ba98:	f380 8811 	msr	BASEPRI, r0
    ba9c:	f04f 0003 	mov.w	r0, #3
    baa0:	df02      	svc	2
    baa2:	9b03      	ldr	r3, [sp, #12]
    baa4:	e74c      	b.n	b940 <rx_demux+0x2c>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    baa6:	490a      	ldr	r1, [pc, #40]	; (bad0 <rx_demux+0x1bc>)
    baa8:	4602      	mov	r2, r0
    baaa:	6878      	ldr	r0, [r7, #4]
    baac:	f7fc fdb4 	bl	8618 <memq_dequeue>
		if (rx) {
    bab0:	9905      	ldr	r1, [sp, #20]
    bab2:	2900      	cmp	r1, #0
    bab4:	f43f af38 	beq.w	b928 <rx_demux+0x14>
	rx_hdr->ack_last = mfifo_tx_ack.l;
    bab8:	4b07      	ldr	r3, [pc, #28]	; (bad8 <rx_demux+0x1c4>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    baba:	4a08      	ldr	r2, [pc, #32]	; (badc <rx_demux+0x1c8>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
    babc:	78db      	ldrb	r3, [r3, #3]
    babe:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    bac0:	4628      	mov	r0, r5
    bac2:	f7fc fd99 	bl	85f8 <memq_enqueue>
	k_sem_give(sem_recv);
    bac6:	f8d8 0000 	ldr.w	r0, [r8]
    baca:	f009 fc23 	bl	15314 <z_impl_k_sem_give>
			if (nack) {
    bace:	e72b      	b.n	b928 <rx_demux+0x14>
    bad0:	20001634 	.word	0x20001634
    bad4:	000199cc 	.word	0x000199cc
    bad8:	20000340 	.word	0x20000340
    badc:	20001628 	.word	0x20001628
    bae0:	00019b60 	.word	0x00019b60
    bae4:	2000163c 	.word	0x2000163c
    bae8:	00019af4 	.word	0x00019af4
    baec:	00019a2c 	.word	0x00019a2c

0000baf0 <ll_init>:
{
    baf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sem_recv = sem_rx;
    baf4:	4ba3      	ldr	r3, [pc, #652]	; (bd84 <ll_init+0x294>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    baf6:	4ca4      	ldr	r4, [pc, #656]	; (bd88 <ll_init+0x298>)
	sem_recv = sem_rx;
    baf8:	6018      	str	r0, [r3, #0]
{
    bafa:	b086      	sub	sp, #24
	cntr_init();
    bafc:	f007 f874 	bl	12be8 <cntr_init>
	mayfly_init();
    bb00:	f7fc fd9a 	bl	8638 <mayfly_init>
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    bb04:	4aa1      	ldr	r2, [pc, #644]	; (bd8c <ll_init+0x29c>)
    bb06:	48a2      	ldr	r0, [pc, #648]	; (bd90 <ll_init+0x2a0>)
    bb08:	9205      	str	r2, [sp, #20]
    bb0a:	9004      	str	r0, [sp, #16]
    bb0c:	4aa1      	ldr	r2, [pc, #644]	; (bd94 <ll_init+0x2a4>)
    bb0e:	48a2      	ldr	r0, [pc, #648]	; (bd98 <ll_init+0x2a8>)
    bb10:	9203      	str	r2, [sp, #12]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    bb12:	2304      	movs	r3, #4
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    bb14:	220c      	movs	r2, #12
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
    bb16:	2502      	movs	r5, #2
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    bb18:	e9cd 2001 	strd	r2, r0, [sp, #4]
    bb1c:	9400      	str	r4, [sp, #0]
    bb1e:	4a9f      	ldr	r2, [pc, #636]	; (bd9c <ll_init+0x2ac>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    bb20:	7023      	strb	r3, [r4, #0]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    bb22:	4619      	mov	r1, r3
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
    bb24:	7223      	strb	r3, [r4, #8]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    bb26:	2000      	movs	r0, #0
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
    bb28:	7425      	strb	r5, [r4, #16]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_THREAD_OPS;
    bb2a:	7625      	strb	r5, [r4, #24]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    bb2c:	f7fe f840 	bl	9bb0 <ticker_init>
	LL_ASSERT(!err);
    bb30:	2800      	cmp	r0, #0
    bb32:	f040 80e9 	bne.w	bd08 <ll_init+0x218>
	return z_impl_k_sem_init(sem, initial_count, limit);
    bb36:	2201      	movs	r2, #1
    bb38:	2100      	movs	r1, #0
    bb3a:	4899      	ldr	r0, [pc, #612]	; (bda0 <ll_init+0x2b0>)
    bb3c:	f00d f9a9 	bl	18e92 <z_impl_k_sem_init>
	err = lll_init();
    bb40:	f005 fd58 	bl	115f4 <lll_init>
	if (err) {
    bb44:	4604      	mov	r4, r0
    bb46:	b118      	cbz	r0, bb50 <ll_init+0x60>
}
    bb48:	4620      	mov	r0, r4
    bb4a:	b006      	add	sp, #24
    bb4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
    bb50:	4b94      	ldr	r3, [pc, #592]	; (bda4 <ll_init+0x2b4>)
		link = mem_acquire(&mem_link_done.free);
    bb52:	f8df 8258 	ldr.w	r8, [pc, #600]	; bdac <ll_init+0x2bc>
    bb56:	4d94      	ldr	r5, [pc, #592]	; (bda8 <ll_init+0x2b8>)
		rx = mem_acquire(&mem_done.free);
    bb58:	4f92      	ldr	r7, [pc, #584]	; (bda4 <ll_init+0x2b4>)
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
    bb5a:	1d18      	adds	r0, r3, #4
    bb5c:	2203      	movs	r2, #3
    bb5e:	2128      	movs	r1, #40	; 0x28
    bb60:	f7fc fcb8 	bl	84d4 <mem_init>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX +
    bb64:	4643      	mov	r3, r8
    bb66:	2204      	movs	r2, #4
    bb68:	1898      	adds	r0, r3, r2
    bb6a:	2108      	movs	r1, #8
    bb6c:	f7fc fcb2 	bl	84d4 <mem_init>
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
    bb70:	78ec      	ldrb	r4, [r5, #3]
	if (last == count) {
    bb72:	786a      	ldrb	r2, [r5, #1]
    bb74:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
    bb76:	3401      	adds	r4, #1
    bb78:	b2e4      	uxtb	r4, r4
		last = 0U;
    bb7a:	42a2      	cmp	r2, r4
    bb7c:	bf08      	it	eq
    bb7e:	2400      	moveq	r4, #0
	if (last == first) {
    bb80:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_done.free);
    bb82:	4640      	mov	r0, r8
    bb84:	d013      	beq.n	bbae <ll_init+0xbe>
    bb86:	f7fc fcd3 	bl	8530 <mem_acquire>
    bb8a:	4606      	mov	r6, r0
		rx = mem_acquire(&mem_done.free);
    bb8c:	4638      	mov	r0, r7
		if (!link) {
    bb8e:	b176      	cbz	r6, bbae <ll_init+0xbe>
		rx = mem_acquire(&mem_done.free);
    bb90:	f7fc fcce 	bl	8530 <mem_acquire>
		if (!rx) {
    bb94:	b138      	cbz	r0, bba6 <ll_init+0xb6>
		rx->link = link;
    bb96:	6006      	str	r6, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    bb98:	78ea      	ldrb	r2, [r5, #3]
    bb9a:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    bb9c:	fb02 5303 	mla	r3, r2, r3, r5
    bba0:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
    bba2:	70ec      	strb	r4, [r5, #3]
}
    bba4:	e7e5      	b.n	bb72 <ll_init+0x82>
			mem_release(link, &mem_link_done.free);
    bba6:	4981      	ldr	r1, [pc, #516]	; (bdac <ll_init+0x2bc>)
    bba8:	4630      	mov	r0, r6
    bbaa:	f7fc fcdb 	bl	8564 <mem_release>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
    bbae:	4b80      	ldr	r3, [pc, #512]	; (bdb0 <ll_init+0x2c0>)
    bbb0:	2208      	movs	r2, #8
    bbb2:	1d18      	adds	r0, r3, #4
    bbb4:	2148      	movs	r1, #72	; 0x48
    bbb6:	f7fc fc8d 	bl	84d4 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
    bbba:	4b7e      	ldr	r3, [pc, #504]	; (bdb4 <ll_init+0x2c4>)
    bbbc:	220a      	movs	r2, #10
    bbbe:	1d18      	adds	r0, r3, #4
    bbc0:	2108      	movs	r1, #8
    bbc2:	f7fc fc87 	bl	84d4 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
    bbc6:	487b      	ldr	r0, [pc, #492]	; (bdb4 <ll_init+0x2c4>)
    bbc8:	f7fc fcb2 	bl	8530 <mem_acquire>
	LL_ASSERT(link);
    bbcc:	4604      	mov	r4, r0
    bbce:	2800      	cmp	r0, #0
    bbd0:	f000 80c4 	beq.w	bd5c <ll_init+0x26c>
	MEMQ_INIT(ull_rx, link);
    bbd4:	4a78      	ldr	r2, [pc, #480]	; (bdb8 <ll_init+0x2c8>)
    bbd6:	4620      	mov	r0, r4
    bbd8:	1f11      	subs	r1, r2, #4
    bbda:	f7fc fcff 	bl	85dc <memq_init>
	link = mem_acquire(&mem_link_done.free);
    bbde:	4873      	ldr	r0, [pc, #460]	; (bdac <ll_init+0x2bc>)
    bbe0:	f7fc fca6 	bl	8530 <mem_acquire>
	LL_ASSERT(link);
    bbe4:	4604      	mov	r4, r0
    bbe6:	2800      	cmp	r0, #0
    bbe8:	f000 80aa 	beq.w	bd40 <ll_init+0x250>
	MEMQ_INIT(ull_done, link);
    bbec:	4a73      	ldr	r2, [pc, #460]	; (bdbc <ll_init+0x2cc>)
    bbee:	4620      	mov	r0, r4
    bbf0:	1f11      	subs	r1, r2, #4
    bbf2:	f7fc fcf3 	bl	85dc <memq_init>
	link = mem_acquire(&mem_link_rx.free);
    bbf6:	486f      	ldr	r0, [pc, #444]	; (bdb4 <ll_init+0x2c4>)
    bbf8:	f7fc fc9a 	bl	8530 <mem_acquire>
	LL_ASSERT(link);
    bbfc:	4604      	mov	r4, r0
    bbfe:	2800      	cmp	r0, #0
    bc00:	f000 8090 	beq.w	bd24 <ll_init+0x234>
	MEMQ_INIT(ll_rx, link);
    bc04:	4a6e      	ldr	r2, [pc, #440]	; (bdc0 <ll_init+0x2d0>)
	mem_link_rx.quota_pdu = RX_CNT;
    bc06:	4f6f      	ldr	r7, [pc, #444]	; (bdc4 <ll_init+0x2d4>)
    bc08:	4d6f      	ldr	r5, [pc, #444]	; (bdc8 <ll_init+0x2d8>)
		rx = mem_acquire(&mem_pdu_rx.free);
    bc0a:	f8df 91a4 	ldr.w	r9, [pc, #420]	; bdb0 <ll_init+0x2c0>
	MEMQ_INIT(ll_rx, link);
    bc0e:	4620      	mov	r0, r4
    bc10:	1f11      	subs	r1, r2, #4
	mem_link_rx.quota_pdu = RX_CNT;
    bc12:	46b8      	mov	r8, r7
	MEMQ_INIT(ll_rx, link);
    bc14:	f7fc fce2 	bl	85dc <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
    bc18:	2307      	movs	r3, #7
    bc1a:	f808 3b04 	strb.w	r3, [r8], #4
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    bc1e:	78ec      	ldrb	r4, [r5, #3]
    bc20:	2606      	movs	r6, #6
	if (last == count) {
    bc22:	786a      	ldrb	r2, [r5, #1]
    bc24:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
    bc26:	3401      	adds	r4, #1
    bc28:	b2e4      	uxtb	r4, r4
		last = 0U;
    bc2a:	42a2      	cmp	r2, r4
    bc2c:	bf08      	it	eq
    bc2e:	2400      	moveq	r4, #0
	if (last == first) {
    bc30:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
    bc32:	4640      	mov	r0, r8
    bc34:	d064      	beq.n	bd00 <ll_init+0x210>
    bc36:	f7fc fc7b 	bl	8530 <mem_acquire>
    bc3a:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    bc3c:	4648      	mov	r0, r9
		if (!link) {
    bc3e:	f1ba 0f00 	cmp.w	sl, #0
    bc42:	d041      	beq.n	bcc8 <ll_init+0x1d8>
		rx = mem_acquire(&mem_pdu_rx.free);
    bc44:	f7fc fc74 	bl	8530 <mem_acquire>
		if (!rx) {
    bc48:	2800      	cmp	r0, #0
    bc4a:	f000 8095 	beq.w	bd78 <ll_init+0x288>
		rx->link = link;
    bc4e:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    bc52:	78ea      	ldrb	r2, [r5, #3]
    bc54:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    bc56:	fb02 5303 	mla	r3, r2, r3, r5
    bc5a:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
    bc5c:	783b      	ldrb	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
    bc5e:	70ec      	strb	r4, [r5, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    bc60:	3e01      	subs	r6, #1
	mem_link_rx.quota_pdu += delta;
    bc62:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    bc64:	b2f6      	uxtb	r6, r6
	mem_link_rx.quota_pdu += delta;
    bc66:	b2db      	uxtb	r3, r3
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    bc68:	2eff      	cmp	r6, #255	; 0xff
	mem_link_rx.quota_pdu += delta;
    bc6a:	703b      	strb	r3, [r7, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    bc6c:	d1d9      	bne.n	bc22 <ll_init+0x132>
	while (mem_link_rx.quota_pdu &&
    bc6e:	b35b      	cbz	r3, bcc8 <ll_init+0x1d8>
    bc70:	4d56      	ldr	r5, [pc, #344]	; (bdcc <ll_init+0x2dc>)
		link = mem_acquire(&mem_link_rx.free);
    bc72:	4e50      	ldr	r6, [pc, #320]	; (bdb4 <ll_init+0x2c4>)
    bc74:	78ec      	ldrb	r4, [r5, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
    bc76:	f8df 8138 	ldr.w	r8, [pc, #312]	; bdb0 <ll_init+0x2c0>
		link->mem = NULL;
    bc7a:	f04f 0900 	mov.w	r9, #0
	if (last == count) {
    bc7e:	786a      	ldrb	r2, [r5, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    bc80:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
    bc82:	3401      	adds	r4, #1
    bc84:	b2e4      	uxtb	r4, r4
		last = 0U;
    bc86:	42a2      	cmp	r2, r4
    bc88:	bf08      	it	eq
    bc8a:	2400      	moveq	r4, #0
	if (last == first) {
    bc8c:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
    bc8e:	4630      	mov	r0, r6
    bc90:	d01a      	beq.n	bcc8 <ll_init+0x1d8>
    bc92:	f7fc fc4d 	bl	8530 <mem_acquire>
    bc96:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    bc98:	4640      	mov	r0, r8
		if (!link) {
    bc9a:	f1ba 0f00 	cmp.w	sl, #0
    bc9e:	d013      	beq.n	bcc8 <ll_init+0x1d8>
		rx = mem_acquire(&mem_pdu_rx.free);
    bca0:	f7fc fc46 	bl	8530 <mem_acquire>
		if (!rx) {
    bca4:	2800      	cmp	r0, #0
    bca6:	d067      	beq.n	bd78 <ll_init+0x288>
		link->mem = NULL;
    bca8:	f8ca 9004 	str.w	r9, [sl, #4]
		rx->link = link;
    bcac:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    bcb0:	78ea      	ldrb	r2, [r5, #3]
    bcb2:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    bcb4:	fb02 5303 	mla	r3, r2, r3, r5
    bcb8:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
    bcba:	783b      	ldrb	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
    bcbc:	70ec      	strb	r4, [r5, #3]
    bcbe:	3b01      	subs	r3, #1
    bcc0:	b2db      	uxtb	r3, r3
    bcc2:	703b      	strb	r3, [r7, #0]
	while (mem_link_rx.quota_pdu &&
    bcc4:	2b00      	cmp	r3, #0
    bcc6:	d1da      	bne.n	bc7e <ll_init+0x18e>
	err = lll_scan_init();
    bcc8:	f006 fa7e 	bl	121c8 <lll_scan_init>
	if (err) {
    bccc:	4604      	mov	r4, r0
    bcce:	2800      	cmp	r0, #0
    bcd0:	f47f af3a 	bne.w	bb48 <ll_init+0x58>
	err = ull_scan_init();
    bcd4:	f000 ffc4 	bl	cc60 <ull_scan_init>
	if (err) {
    bcd8:	4604      	mov	r4, r0
    bcda:	2800      	cmp	r0, #0
    bcdc:	f47f af34 	bne.w	bb48 <ll_init+0x58>
	err = lll_conn_init();
    bce0:	f006 fae4 	bl	122ac <lll_conn_init>
	if (err) {
    bce4:	4604      	mov	r4, r0
    bce6:	2800      	cmp	r0, #0
    bce8:	f47f af2e 	bne.w	bb48 <ll_init+0x58>
	err = ull_conn_init();
    bcec:	f001 fee6 	bl	dabc <ull_conn_init>
	if (err) {
    bcf0:	4604      	mov	r4, r0
    bcf2:	2800      	cmp	r0, #0
    bcf4:	f47f af28 	bne.w	bb48 <ll_init+0x58>
		ull_filter_reset(true);
    bcf8:	2001      	movs	r0, #1
    bcfa:	f005 f8ff 	bl	10efc <ull_filter_reset>
	return  0;
    bcfe:	e723      	b.n	bb48 <ll_init+0x58>
	if (!max) {
    bd00:	2e00      	cmp	r6, #0
    bd02:	d0e1      	beq.n	bcc8 <ll_init+0x1d8>
    bd04:	783b      	ldrb	r3, [r7, #0]
    bd06:	e7b2      	b.n	bc6e <ll_init+0x17e>
	LL_ASSERT(!err);
    bd08:	4a31      	ldr	r2, [pc, #196]	; (bdd0 <ll_init+0x2e0>)
    bd0a:	4932      	ldr	r1, [pc, #200]	; (bdd4 <ll_init+0x2e4>)
    bd0c:	4832      	ldr	r0, [pc, #200]	; (bdd8 <ll_init+0x2e8>)
    bd0e:	f240 13a9 	movw	r3, #425	; 0x1a9
    bd12:	f00a f815 	bl	15d40 <printk>
    bd16:	4040      	eors	r0, r0
    bd18:	f380 8811 	msr	BASEPRI, r0
    bd1c:	f04f 0003 	mov.w	r0, #3
    bd20:	df02      	svc	2
    bd22:	e708      	b.n	bb36 <ll_init+0x46>
	LL_ASSERT(link);
    bd24:	4a2a      	ldr	r2, [pc, #168]	; (bdd0 <ll_init+0x2e0>)
    bd26:	492d      	ldr	r1, [pc, #180]	; (bddc <ll_init+0x2ec>)
    bd28:	482b      	ldr	r0, [pc, #172]	; (bdd8 <ll_init+0x2e8>)
    bd2a:	f240 7317 	movw	r3, #1815	; 0x717
    bd2e:	f00a f807 	bl	15d40 <printk>
    bd32:	4040      	eors	r0, r0
    bd34:	f380 8811 	msr	BASEPRI, r0
    bd38:	f04f 0003 	mov.w	r0, #3
    bd3c:	df02      	svc	2
    bd3e:	e761      	b.n	bc04 <ll_init+0x114>
	LL_ASSERT(link);
    bd40:	4a23      	ldr	r2, [pc, #140]	; (bdd0 <ll_init+0x2e0>)
    bd42:	4926      	ldr	r1, [pc, #152]	; (bddc <ll_init+0x2ec>)
    bd44:	4824      	ldr	r0, [pc, #144]	; (bdd8 <ll_init+0x2e8>)
    bd46:	f240 730f 	movw	r3, #1807	; 0x70f
    bd4a:	f009 fff9 	bl	15d40 <printk>
    bd4e:	4040      	eors	r0, r0
    bd50:	f380 8811 	msr	BASEPRI, r0
    bd54:	f04f 0003 	mov.w	r0, #3
    bd58:	df02      	svc	2
    bd5a:	e747      	b.n	bbec <ll_init+0xfc>
	LL_ASSERT(link);
    bd5c:	4a1c      	ldr	r2, [pc, #112]	; (bdd0 <ll_init+0x2e0>)
    bd5e:	491f      	ldr	r1, [pc, #124]	; (bddc <ll_init+0x2ec>)
    bd60:	481d      	ldr	r0, [pc, #116]	; (bdd8 <ll_init+0x2e8>)
    bd62:	f240 7307 	movw	r3, #1799	; 0x707
    bd66:	f009 ffeb 	bl	15d40 <printk>
    bd6a:	4040      	eors	r0, r0
    bd6c:	f380 8811 	msr	BASEPRI, r0
    bd70:	f04f 0003 	mov.w	r0, #3
    bd74:	df02      	svc	2
    bd76:	e72d      	b.n	bbd4 <ll_init+0xe4>
			mem_release(link, &mem_link_rx.free);
    bd78:	490e      	ldr	r1, [pc, #56]	; (bdb4 <ll_init+0x2c4>)
    bd7a:	4650      	mov	r0, sl
    bd7c:	f7fc fbf2 	bl	8564 <mem_release>
			return;
    bd80:	e7a2      	b.n	bcc8 <ll_init+0x1d8>
    bd82:	bf00      	nop
    bd84:	2000163c 	.word	0x2000163c
    bd88:	20001988 	.word	0x20001988
    bd8c:	00013849 	.word	0x00013849
    bd90:	00013769 	.word	0x00013769
    bd94:	00013705 	.word	0x00013705
    bd98:	20001718 	.word	0x20001718
    bd9c:	20001658 	.word	0x20001658
    bda0:	20001640 	.word	0x20001640
    bda4:	200012e8 	.word	0x200012e8
    bda8:	200001fc 	.word	0x200001fc
    bdac:	20001364 	.word	0x20001364
    bdb0:	200013e0 	.word	0x200013e0
    bdb4:	2000138c 	.word	0x2000138c
    bdb8:	20001638 	.word	0x20001638
    bdbc:	20001630 	.word	0x20001630
    bdc0:	20001628 	.word	0x20001628
    bdc4:	20001388 	.word	0x20001388
    bdc8:	20000224 	.word	0x20000224
    bdcc:	20000210 	.word	0x20000210
    bdd0:	00019af4 	.word	0x00019af4
    bdd4:	00019b30 	.word	0x00019b30
    bdd8:	000199cc 	.word	0x000199cc
    bddc:	00019d44 	.word	0x00019d44

0000bde0 <ll_reset>:
{
    bde0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bde4:	b087      	sub	sp, #28
	err = ull_scan_reset();
    bde6:	f000 ffc1 	bl	cd6c <ull_scan_reset>
	LL_ASSERT(!err);
    bdea:	2800      	cmp	r0, #0
    bdec:	f040 8124 	bne.w	c038 <ll_reset+0x258>
		err = ll_connect_disable(&rx);
    bdf0:	4668      	mov	r0, sp
    bdf2:	f003 ff77 	bl	fce4 <ll_connect_disable>
		if (!err) {
    bdf6:	2800      	cmp	r0, #0
    bdf8:	f000 8110 	beq.w	c01c <ll_reset+0x23c>
	err = ull_conn_reset();
    bdfc:	f001 fe60 	bl	dac0 <ull_conn_reset>
	LL_ASSERT(!err);
    be00:	2800      	cmp	r0, #0
    be02:	f040 80fd 	bne.w	c000 <ll_reset+0x220>
	MFIFO_INIT(tx_ack);
    be06:	4bb4      	ldr	r3, [pc, #720]	; (c0d8 <ll_reset+0x2f8>)
	MFIFO_INIT(done);
    be08:	4eb4      	ldr	r6, [pc, #720]	; (c0dc <ll_reset+0x2fc>)
	MFIFO_INIT(pdu_rx_free);
    be0a:	4db5      	ldr	r5, [pc, #724]	; (c0e0 <ll_reset+0x300>)
	MFIFO_INIT(ll_pdu_rx_free);
    be0c:	4fb5      	ldr	r7, [pc, #724]	; (c0e4 <ll_reset+0x304>)
	MFIFO_INIT(tx_ack);
    be0e:	2400      	movs	r4, #0
    be10:	805c      	strh	r4, [r3, #2]
		ull_filter_reset(false);
    be12:	4620      	mov	r0, r4
    be14:	f005 f872 	bl	10efc <ull_filter_reset>
	MFIFO_INIT(prep);
    be18:	4bb3      	ldr	r3, [pc, #716]	; (c0e8 <ll_reset+0x308>)
	MFIFO_INIT(done);
    be1a:	8074      	strh	r4, [r6, #2]
	MFIFO_INIT(prep);
    be1c:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(pdu_rx_free);
    be1e:	806c      	strh	r4, [r5, #2]
	MFIFO_INIT(ll_pdu_rx_free);
    be20:	807c      	strh	r4, [r7, #2]
    be22:	2201      	movs	r2, #1
    be24:	4621      	mov	r1, r4
    be26:	4668      	mov	r0, sp
    be28:	f00d f833 	bl	18e92 <z_impl_k_sem_init>
		mfy.param = &sem;
    be2c:	4baf      	ldr	r3, [pc, #700]	; (c0ec <ll_reset+0x30c>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
    be2e:	4622      	mov	r2, r4
    be30:	4621      	mov	r1, r4
    be32:	2003      	movs	r0, #3
		mfy.param = &sem;
    be34:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
    be38:	f7fc fc52 	bl	86e0 <mayfly_enqueue>
		LL_ASSERT(!retval);
    be3c:	2800      	cmp	r0, #0
    be3e:	f040 80d1 	bne.w	bfe4 <ll_reset+0x204>
	return z_impl_k_sem_take(sem, timeout);
    be42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    be46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    be4a:	4668      	mov	r0, sp
    be4c:	f009 fa88 	bl	15360 <z_impl_k_sem_take>
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
    be50:	4ba7      	ldr	r3, [pc, #668]	; (c0f0 <ll_reset+0x310>)
		link = mem_acquire(&mem_link_done.free);
    be52:	f8df 92a0 	ldr.w	r9, [pc, #672]	; c0f4 <ll_reset+0x314>
		rx = mem_acquire(&mem_done.free);
    be56:	f8df 8298 	ldr.w	r8, [pc, #664]	; c0f0 <ll_reset+0x310>
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
    be5a:	1d18      	adds	r0, r3, #4
    be5c:	2203      	movs	r2, #3
    be5e:	2128      	movs	r1, #40	; 0x28
    be60:	f7fc fb38 	bl	84d4 <mem_init>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX +
    be64:	464b      	mov	r3, r9
    be66:	2204      	movs	r2, #4
    be68:	1898      	adds	r0, r3, r2
    be6a:	2108      	movs	r1, #8
    be6c:	f7fc fb32 	bl	84d4 <mem_init>
static inline void done_alloc(void)
    be70:	78f4      	ldrb	r4, [r6, #3]
	if (last == count) {
    be72:	7872      	ldrb	r2, [r6, #1]
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
    be74:	78b3      	ldrb	r3, [r6, #2]
	last = last + 1;
    be76:	3401      	adds	r4, #1
    be78:	b2e4      	uxtb	r4, r4
		last = 0U;
    be7a:	42a2      	cmp	r2, r4
    be7c:	bf08      	it	eq
    be7e:	2400      	moveq	r4, #0
	if (last == first) {
    be80:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_done.free);
    be82:	4648      	mov	r0, r9
    be84:	d016      	beq.n	beb4 <ll_reset+0xd4>
    be86:	f7fc fb53 	bl	8530 <mem_acquire>
    be8a:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_done.free);
    be8c:	4640      	mov	r0, r8
		if (!link) {
    be8e:	f1ba 0f00 	cmp.w	sl, #0
    be92:	d00f      	beq.n	beb4 <ll_reset+0xd4>
		rx = mem_acquire(&mem_done.free);
    be94:	f7fc fb4c 	bl	8530 <mem_acquire>
		if (!rx) {
    be98:	b140      	cbz	r0, beac <ll_reset+0xcc>
		rx->link = link;
    be9a:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    be9e:	78f2      	ldrb	r2, [r6, #3]
    bea0:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    bea2:	fb02 6303 	mla	r3, r2, r3, r6
    bea6:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
    bea8:	70f4      	strb	r4, [r6, #3]
}
    beaa:	e7e2      	b.n	be72 <ll_reset+0x92>
			mem_release(link, &mem_link_done.free);
    beac:	4991      	ldr	r1, [pc, #580]	; (c0f4 <ll_reset+0x314>)
    beae:	4650      	mov	r0, sl
    beb0:	f7fc fb58 	bl	8564 <mem_release>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
    beb4:	4b90      	ldr	r3, [pc, #576]	; (c0f8 <ll_reset+0x318>)
    beb6:	2208      	movs	r2, #8
    beb8:	1d18      	adds	r0, r3, #4
    beba:	2148      	movs	r1, #72	; 0x48
    bebc:	f7fc fb0a 	bl	84d4 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
    bec0:	4b8e      	ldr	r3, [pc, #568]	; (c0fc <ll_reset+0x31c>)
    bec2:	220a      	movs	r2, #10
    bec4:	1d18      	adds	r0, r3, #4
    bec6:	2108      	movs	r1, #8
    bec8:	f7fc fb04 	bl	84d4 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
    becc:	488b      	ldr	r0, [pc, #556]	; (c0fc <ll_reset+0x31c>)
    bece:	f7fc fb2f 	bl	8530 <mem_acquire>
	LL_ASSERT(link);
    bed2:	4604      	mov	r4, r0
    bed4:	2800      	cmp	r0, #0
    bed6:	f000 80cb 	beq.w	c070 <ll_reset+0x290>
	MEMQ_INIT(ull_rx, link);
    beda:	4a89      	ldr	r2, [pc, #548]	; (c100 <ll_reset+0x320>)
    bedc:	4620      	mov	r0, r4
    bede:	1f11      	subs	r1, r2, #4
    bee0:	f7fc fb7c 	bl	85dc <memq_init>
	link = mem_acquire(&mem_link_done.free);
    bee4:	4883      	ldr	r0, [pc, #524]	; (c0f4 <ll_reset+0x314>)
    bee6:	f7fc fb23 	bl	8530 <mem_acquire>
	LL_ASSERT(link);
    beea:	4604      	mov	r4, r0
    beec:	2800      	cmp	r0, #0
    beee:	f000 80cd 	beq.w	c08c <ll_reset+0x2ac>
	MEMQ_INIT(ull_done, link);
    bef2:	4a84      	ldr	r2, [pc, #528]	; (c104 <ll_reset+0x324>)
    bef4:	4620      	mov	r0, r4
    bef6:	1f11      	subs	r1, r2, #4
    bef8:	f7fc fb70 	bl	85dc <memq_init>
	link = mem_acquire(&mem_link_rx.free);
    befc:	487f      	ldr	r0, [pc, #508]	; (c0fc <ll_reset+0x31c>)
    befe:	f7fc fb17 	bl	8530 <mem_acquire>
	LL_ASSERT(link);
    bf02:	4604      	mov	r4, r0
    bf04:	2800      	cmp	r0, #0
    bf06:	f000 80a5 	beq.w	c054 <ll_reset+0x274>
	MEMQ_INIT(ll_rx, link);
    bf0a:	4a7f      	ldr	r2, [pc, #508]	; (c108 <ll_reset+0x328>)
	mem_link_rx.quota_pdu = RX_CNT;
    bf0c:	4e7f      	ldr	r6, [pc, #508]	; (c10c <ll_reset+0x32c>)
		rx = mem_acquire(&mem_pdu_rx.free);
    bf0e:	f8df 91e8 	ldr.w	r9, [pc, #488]	; c0f8 <ll_reset+0x318>
	MEMQ_INIT(ll_rx, link);
    bf12:	4620      	mov	r0, r4
    bf14:	1f11      	subs	r1, r2, #4
	mem_link_rx.quota_pdu = RX_CNT;
    bf16:	46b0      	mov	r8, r6
	MEMQ_INIT(ll_rx, link);
    bf18:	f7fc fb60 	bl	85dc <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
    bf1c:	2307      	movs	r3, #7
    bf1e:	f808 3b04 	strb.w	r3, [r8], #4
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    bf22:	78ec      	ldrb	r4, [r5, #3]
    bf24:	f04f 0a06 	mov.w	sl, #6
	if (last == count) {
    bf28:	786a      	ldrb	r2, [r5, #1]
    bf2a:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
    bf2c:	3401      	adds	r4, #1
    bf2e:	b2e4      	uxtb	r4, r4
		last = 0U;
    bf30:	42a2      	cmp	r2, r4
    bf32:	bf08      	it	eq
    bf34:	2400      	moveq	r4, #0
	if (last == first) {
    bf36:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
    bf38:	4640      	mov	r0, r8
    bf3a:	d04e      	beq.n	bfda <ll_reset+0x1fa>
    bf3c:	f7fc faf8 	bl	8530 <mem_acquire>
    bf40:	4683      	mov	fp, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    bf42:	4648      	mov	r0, r9
		if (!link) {
    bf44:	f1bb 0f00 	cmp.w	fp, #0
    bf48:	d044      	beq.n	bfd4 <ll_reset+0x1f4>
		rx = mem_acquire(&mem_pdu_rx.free);
    bf4a:	f7fc faf1 	bl	8530 <mem_acquire>
		if (!rx) {
    bf4e:	2800      	cmp	r0, #0
    bf50:	f000 80aa 	beq.w	c0a8 <ll_reset+0x2c8>
		rx->link = link;
    bf54:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    bf58:	78ea      	ldrb	r2, [r5, #3]
    bf5a:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    bf5c:	fb02 5303 	mla	r3, r2, r3, r5
    bf60:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
    bf62:	7833      	ldrb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
    bf64:	70ec      	strb	r4, [r5, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    bf66:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
	mem_link_rx.quota_pdu += delta;
    bf6a:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    bf6c:	fa5f fa8a 	uxtb.w	sl, sl
	mem_link_rx.quota_pdu += delta;
    bf70:	b2db      	uxtb	r3, r3
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    bf72:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
	mem_link_rx.quota_pdu += delta;
    bf76:	7033      	strb	r3, [r6, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    bf78:	d1d6      	bne.n	bf28 <ll_reset+0x148>
	while (mem_link_rx.quota_pdu &&
    bf7a:	b35b      	cbz	r3, bfd4 <ll_reset+0x1f4>
    bf7c:	78fc      	ldrb	r4, [r7, #3]
		link = mem_acquire(&mem_link_rx.free);
    bf7e:	f8df 917c 	ldr.w	r9, [pc, #380]	; c0fc <ll_reset+0x31c>
		rx = mem_acquire(&mem_pdu_rx.free);
    bf82:	f8df 8174 	ldr.w	r8, [pc, #372]	; c0f8 <ll_reset+0x318>
		link->mem = NULL;
    bf86:	2500      	movs	r5, #0
	if (last == count) {
    bf88:	787a      	ldrb	r2, [r7, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    bf8a:	78bb      	ldrb	r3, [r7, #2]
	last = last + 1;
    bf8c:	3401      	adds	r4, #1
    bf8e:	b2e4      	uxtb	r4, r4
		last = 0U;
    bf90:	42a2      	cmp	r2, r4
    bf92:	bf08      	it	eq
    bf94:	2400      	moveq	r4, #0
	if (last == first) {
    bf96:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
    bf98:	4648      	mov	r0, r9
    bf9a:	d01b      	beq.n	bfd4 <ll_reset+0x1f4>
    bf9c:	f7fc fac8 	bl	8530 <mem_acquire>
    bfa0:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    bfa2:	4640      	mov	r0, r8
		if (!link) {
    bfa4:	f1ba 0f00 	cmp.w	sl, #0
    bfa8:	d014      	beq.n	bfd4 <ll_reset+0x1f4>
		rx = mem_acquire(&mem_pdu_rx.free);
    bfaa:	f7fc fac1 	bl	8530 <mem_acquire>
		if (!rx) {
    bfae:	2800      	cmp	r0, #0
    bfb0:	f000 808d 	beq.w	c0ce <ll_reset+0x2ee>
		link->mem = NULL;
    bfb4:	f8ca 5004 	str.w	r5, [sl, #4]
		rx->link = link;
    bfb8:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    bfbc:	78fa      	ldrb	r2, [r7, #3]
    bfbe:	783b      	ldrb	r3, [r7, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    bfc0:	fb02 7303 	mla	r3, r2, r3, r7
    bfc4:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
    bfc6:	7833      	ldrb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
    bfc8:	70fc      	strb	r4, [r7, #3]
    bfca:	3b01      	subs	r3, #1
    bfcc:	b2db      	uxtb	r3, r3
    bfce:	7033      	strb	r3, [r6, #0]
	while (mem_link_rx.quota_pdu &&
    bfd0:	2b00      	cmp	r3, #0
    bfd2:	d1d9      	bne.n	bf88 <ll_reset+0x1a8>
}
    bfd4:	b007      	add	sp, #28
    bfd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!max) {
    bfda:	f1ba 0f00 	cmp.w	sl, #0
    bfde:	d0f9      	beq.n	bfd4 <ll_reset+0x1f4>
    bfe0:	7833      	ldrb	r3, [r6, #0]
    bfe2:	e7ca      	b.n	bf7a <ll_reset+0x19a>
		LL_ASSERT(!retval);
    bfe4:	4a4a      	ldr	r2, [pc, #296]	; (c110 <ll_reset+0x330>)
    bfe6:	494b      	ldr	r1, [pc, #300]	; (c114 <ll_reset+0x334>)
    bfe8:	484b      	ldr	r0, [pc, #300]	; (c118 <ll_reset+0x338>)
    bfea:	f240 23cd 	movw	r3, #717	; 0x2cd
    bfee:	f009 fea7 	bl	15d40 <printk>
    bff2:	4040      	eors	r0, r0
    bff4:	f380 8811 	msr	BASEPRI, r0
    bff8:	f04f 0003 	mov.w	r0, #3
    bffc:	df02      	svc	2
    bffe:	e720      	b.n	be42 <ll_reset+0x62>
	LL_ASSERT(!err);
    c000:	4a43      	ldr	r2, [pc, #268]	; (c110 <ll_reset+0x330>)
    c002:	4946      	ldr	r1, [pc, #280]	; (c11c <ll_reset+0x33c>)
    c004:	4844      	ldr	r0, [pc, #272]	; (c118 <ll_reset+0x338>)
    c006:	f240 239b 	movw	r3, #667	; 0x29b
    c00a:	f009 fe99 	bl	15d40 <printk>
    c00e:	4040      	eors	r0, r0
    c010:	f380 8811 	msr	BASEPRI, r0
    c014:	f04f 0003 	mov.w	r0, #3
    c018:	df02      	svc	2
    c01a:	e6f4      	b.n	be06 <ll_reset+0x26>
			scan = ull_scan_is_enabled_get(0);
    c01c:	f000 fec6 	bl	cdac <ull_scan_is_enabled_get>
			LL_ASSERT(scan);
    c020:	4604      	mov	r4, r0
    c022:	2800      	cmp	r0, #0
    c024:	d045      	beq.n	c0b2 <ll_reset+0x2d2>
			scan->is_enabled = 0U;
    c026:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
			scan->lll.conn = NULL;
    c02a:	2200      	movs	r2, #0
			scan->is_enabled = 0U;
    c02c:	f36f 0300 	bfc	r3, #0, #1
    c030:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			scan->lll.conn = NULL;
    c034:	6222      	str	r2, [r4, #32]
    c036:	e6e1      	b.n	bdfc <ll_reset+0x1c>
	LL_ASSERT(!err);
    c038:	4a35      	ldr	r2, [pc, #212]	; (c110 <ll_reset+0x330>)
    c03a:	4938      	ldr	r1, [pc, #224]	; (c11c <ll_reset+0x33c>)
    c03c:	4836      	ldr	r0, [pc, #216]	; (c118 <ll_reset+0x338>)
    c03e:	f240 2351 	movw	r3, #593	; 0x251
    c042:	f009 fe7d 	bl	15d40 <printk>
    c046:	4040      	eors	r0, r0
    c048:	f380 8811 	msr	BASEPRI, r0
    c04c:	f04f 0003 	mov.w	r0, #3
    c050:	df02      	svc	2
    c052:	e6cd      	b.n	bdf0 <ll_reset+0x10>
	LL_ASSERT(link);
    c054:	4a2e      	ldr	r2, [pc, #184]	; (c110 <ll_reset+0x330>)
    c056:	4932      	ldr	r1, [pc, #200]	; (c120 <ll_reset+0x340>)
    c058:	482f      	ldr	r0, [pc, #188]	; (c118 <ll_reset+0x338>)
    c05a:	f240 7317 	movw	r3, #1815	; 0x717
    c05e:	f009 fe6f 	bl	15d40 <printk>
    c062:	4040      	eors	r0, r0
    c064:	f380 8811 	msr	BASEPRI, r0
    c068:	f04f 0003 	mov.w	r0, #3
    c06c:	df02      	svc	2
    c06e:	e74c      	b.n	bf0a <ll_reset+0x12a>
	LL_ASSERT(link);
    c070:	4a27      	ldr	r2, [pc, #156]	; (c110 <ll_reset+0x330>)
    c072:	492b      	ldr	r1, [pc, #172]	; (c120 <ll_reset+0x340>)
    c074:	4828      	ldr	r0, [pc, #160]	; (c118 <ll_reset+0x338>)
    c076:	f240 7307 	movw	r3, #1799	; 0x707
    c07a:	f009 fe61 	bl	15d40 <printk>
    c07e:	4040      	eors	r0, r0
    c080:	f380 8811 	msr	BASEPRI, r0
    c084:	f04f 0003 	mov.w	r0, #3
    c088:	df02      	svc	2
    c08a:	e726      	b.n	beda <ll_reset+0xfa>
	LL_ASSERT(link);
    c08c:	4a20      	ldr	r2, [pc, #128]	; (c110 <ll_reset+0x330>)
    c08e:	4924      	ldr	r1, [pc, #144]	; (c120 <ll_reset+0x340>)
    c090:	4821      	ldr	r0, [pc, #132]	; (c118 <ll_reset+0x338>)
    c092:	f240 730f 	movw	r3, #1807	; 0x70f
    c096:	f009 fe53 	bl	15d40 <printk>
    c09a:	4040      	eors	r0, r0
    c09c:	f380 8811 	msr	BASEPRI, r0
    c0a0:	f04f 0003 	mov.w	r0, #3
    c0a4:	df02      	svc	2
    c0a6:	e724      	b.n	bef2 <ll_reset+0x112>
			mem_release(link, &mem_link_rx.free);
    c0a8:	4914      	ldr	r1, [pc, #80]	; (c0fc <ll_reset+0x31c>)
    c0aa:	4658      	mov	r0, fp
    c0ac:	f7fc fa5a 	bl	8564 <mem_release>
			return;
    c0b0:	e790      	b.n	bfd4 <ll_reset+0x1f4>
			LL_ASSERT(scan);
    c0b2:	4a17      	ldr	r2, [pc, #92]	; (c110 <ll_reset+0x330>)
    c0b4:	491b      	ldr	r1, [pc, #108]	; (c124 <ll_reset+0x344>)
    c0b6:	4818      	ldr	r0, [pc, #96]	; (c118 <ll_reset+0x338>)
    c0b8:	f240 238f 	movw	r3, #655	; 0x28f
    c0bc:	f009 fe40 	bl	15d40 <printk>
    c0c0:	4040      	eors	r0, r0
    c0c2:	f380 8811 	msr	BASEPRI, r0
    c0c6:	f04f 0003 	mov.w	r0, #3
    c0ca:	df02      	svc	2
    c0cc:	e7ab      	b.n	c026 <ll_reset+0x246>
			mem_release(link, &mem_link_rx.free);
    c0ce:	490b      	ldr	r1, [pc, #44]	; (c0fc <ll_reset+0x31c>)
    c0d0:	4650      	mov	r0, sl
    c0d2:	f7fc fa47 	bl	8564 <mem_release>
			return;
    c0d6:	e77d      	b.n	bfd4 <ll_reset+0x1f4>
    c0d8:	20000340 	.word	0x20000340
    c0dc:	200001fc 	.word	0x200001fc
    c0e0:	20000224 	.word	0x20000224
    c0e4:	20000210 	.word	0x20000210
    c0e8:	2000023c 	.word	0x2000023c
    c0ec:	20000364 	.word	0x20000364
    c0f0:	200012e8 	.word	0x200012e8
    c0f4:	20001364 	.word	0x20001364
    c0f8:	200013e0 	.word	0x200013e0
    c0fc:	2000138c 	.word	0x2000138c
    c100:	20001638 	.word	0x20001638
    c104:	20001630 	.word	0x20001630
    c108:	20001628 	.word	0x20001628
    c10c:	20001388 	.word	0x20001388
    c110:	00019af4 	.word	0x00019af4
    c114:	00019b6c 	.word	0x00019b6c
    c118:	000199cc 	.word	0x000199cc
    c11c:	00019b30 	.word	0x00019b30
    c120:	00019d44 	.word	0x00019d44
    c124:	00019b64 	.word	0x00019b64

0000c128 <ll_rx_get>:
{
    c128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c12c:	b085      	sub	sp, #20
    c12e:	e9cd 0100 	strd	r0, r1, [sp]
    c132:	4c67      	ldr	r4, [pc, #412]	; (c2d0 <ll_rx_get+0x1a8>)
				mem_release(link, &mem_link_rx.free);
    c134:	4d67      	ldr	r5, [pc, #412]	; (c2d4 <ll_rx_get+0x1ac>)
    c136:	4e68      	ldr	r6, [pc, #416]	; (c2d8 <ll_rx_get+0x1b0>)
	*node_rx = NULL;
    c138:	9a00      	ldr	r2, [sp, #0]
    c13a:	2300      	movs	r3, #0
    c13c:	6013      	str	r3, [r2, #0]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
    c13e:	e9d6 0100 	ldrd	r0, r1, [r6]
    c142:	aa03      	add	r2, sp, #12
    c144:	f7fc fa60 	bl	8608 <memq_peek>
	if (link) {
    c148:	4680      	mov	r8, r0
    c14a:	2800      	cmp	r0, #0
    c14c:	f000 80b6 	beq.w	c2bc <ll_rx_get+0x194>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
    c150:	9b03      	ldr	r3, [sp, #12]
    c152:	4962      	ldr	r1, [pc, #392]	; (c2dc <ll_rx_get+0x1b4>)
    c154:	781a      	ldrb	r2, [r3, #0]
    c156:	9801      	ldr	r0, [sp, #4]
    c158:	f7ff fae6 	bl	b728 <tx_cmplt_get>
		if (!cmplt) {
    c15c:	4603      	mov	r3, r0
    c15e:	2800      	cmp	r0, #0
    c160:	f040 80a3 	bne.w	c2aa <ll_rx_get+0x182>
			f = mfifo_tx_ack.f;
    c164:	78a2      	ldrb	r2, [r4, #2]
    c166:	f88d 2009 	strb.w	r2, [sp, #9]
				cmplt_curr = tx_cmplt_get(&h, &f,
    c16a:	78e2      	ldrb	r2, [r4, #3]
    c16c:	f10d 0109 	add.w	r1, sp, #9
    c170:	f10d 000a 	add.w	r0, sp, #10
    c174:	461f      	mov	r7, r3
    c176:	f7ff fad7 	bl	b728 <tx_cmplt_get>
    c17a:	ea47 0200 	orr.w	r2, r7, r0
			} while ((cmplt_prev != 0U) ||
    c17e:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
				cmplt_curr = tx_cmplt_get(&h, &f,
    c182:	4603      	mov	r3, r0
			} while ((cmplt_prev != 0U) ||
    c184:	d1f1      	bne.n	c16a <ll_rx_get+0x42>
			if (rx->type == NODE_RX_TYPE_RELEASE) {
    c186:	9b03      	ldr	r3, [sp, #12]
    c188:	7919      	ldrb	r1, [r3, #4]
    c18a:	2901      	cmp	r1, #1
    c18c:	f040 808a 	bne.w	c2a4 <ll_rx_get+0x17c>
				(void)memq_dequeue(memq_ll_rx.tail,
    c190:	4951      	ldr	r1, [pc, #324]	; (c2d8 <ll_rx_get+0x1b0>)
    c192:	6870      	ldr	r0, [r6, #4]
    c194:	f7fc fa40 	bl	8618 <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
    c198:	4951      	ldr	r1, [pc, #324]	; (c2e0 <ll_rx_get+0x1b8>)
    c19a:	4640      	mov	r0, r8
    c19c:	f7fc f9e2 	bl	8564 <mem_release>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    c1a0:	782b      	ldrb	r3, [r5, #0]
    c1a2:	2b06      	cmp	r3, #6
    c1a4:	d86f      	bhi.n	c286 <ll_rx_get+0x15e>
	mem_link_rx.quota_pdu += delta;
    c1a6:	3301      	adds	r3, #1
				mem_release(rx, &mem_pdu_rx.free);
    c1a8:	494e      	ldr	r1, [pc, #312]	; (c2e4 <ll_rx_get+0x1bc>)
    c1aa:	9803      	ldr	r0, [sp, #12]
	mem_link_rx.quota_pdu += delta;
    c1ac:	702b      	strb	r3, [r5, #0]
				mem_release(rx, &mem_pdu_rx.free);
    c1ae:	f7fc f9d9 	bl	8564 <mem_release>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    c1b2:	782b      	ldrb	r3, [r5, #0]
    c1b4:	2b00      	cmp	r3, #0
    c1b6:	d0bf      	beq.n	c138 <ll_rx_get+0x10>
    c1b8:	f8df 8138 	ldr.w	r8, [pc, #312]	; c2f4 <ll_rx_get+0x1cc>
	last = last + 1;
    c1bc:	f898 7003 	ldrb.w	r7, [r8, #3]
	if (last == count) {
    c1c0:	f898 2001 	ldrb.w	r2, [r8, #1]
    c1c4:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
    c1c8:	3701      	adds	r7, #1
    c1ca:	b2ff      	uxtb	r7, r7
		last = 0U;
    c1cc:	42ba      	cmp	r2, r7
    c1ce:	bf08      	it	eq
    c1d0:	2700      	moveq	r7, #0
	if (last == first) {
    c1d2:	429f      	cmp	r7, r3
    c1d4:	d0b0      	beq.n	c138 <ll_rx_get+0x10>
		link = mem_acquire(&mem_link_rx.free);
    c1d6:	4842      	ldr	r0, [pc, #264]	; (c2e0 <ll_rx_get+0x1b8>)
    c1d8:	f7fc f9aa 	bl	8530 <mem_acquire>
		if (!link) {
    c1dc:	4682      	mov	sl, r0
    c1de:	2800      	cmp	r0, #0
    c1e0:	d0aa      	beq.n	c138 <ll_rx_get+0x10>
		rx = mem_acquire(&mem_pdu_rx.free);
    c1e2:	4840      	ldr	r0, [pc, #256]	; (c2e4 <ll_rx_get+0x1bc>)
    c1e4:	f7fc f9a4 	bl	8530 <mem_acquire>
		if (!rx) {
    c1e8:	2800      	cmp	r0, #0
    c1ea:	d062      	beq.n	c2b2 <ll_rx_get+0x18a>
		rx->link = link;
    c1ec:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    c1f0:	f898 2003 	ldrb.w	r2, [r8, #3]
    c1f4:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    c1f8:	fb02 8303 	mla	r3, r2, r3, r8
    c1fc:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
    c1fe:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
    c200:	f888 7003 	strb.w	r7, [r8, #3]
    c204:	3b01      	subs	r3, #1
    c206:	b2db      	uxtb	r3, r3
    c208:	702b      	strb	r3, [r5, #0]
	while (mem_link_rx.quota_pdu &&
    c20a:	2b00      	cmp	r3, #0
    c20c:	d094      	beq.n	c138 <ll_rx_get+0x10>
    c20e:	f8df a0e8 	ldr.w	sl, [pc, #232]	; c2f8 <ll_rx_get+0x1d0>
		link = mem_acquire(&mem_link_rx.free);
    c212:	f8df 80cc 	ldr.w	r8, [pc, #204]	; c2e0 <ll_rx_get+0x1b8>
    c216:	f89a 7003 	ldrb.w	r7, [sl, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
    c21a:	f8df b0c8 	ldr.w	fp, [pc, #200]	; c2e4 <ll_rx_get+0x1bc>
    c21e:	e014      	b.n	c24a <ll_rx_get+0x122>
		link->mem = NULL;
    c220:	2300      	movs	r3, #0
    c222:	f8c9 3004 	str.w	r3, [r9, #4]
		rx->link = link;
    c226:	f8c0 9000 	str.w	r9, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    c22a:	f89a 2003 	ldrb.w	r2, [sl, #3]
    c22e:	f89a 3000 	ldrb.w	r3, [sl]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    c232:	fb02 a303 	mla	r3, r2, r3, sl
    c236:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
    c238:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
    c23a:	f88a 7003 	strb.w	r7, [sl, #3]
    c23e:	3b01      	subs	r3, #1
    c240:	b2db      	uxtb	r3, r3
    c242:	702b      	strb	r3, [r5, #0]
	while (mem_link_rx.quota_pdu &&
    c244:	2b00      	cmp	r3, #0
    c246:	f43f af77 	beq.w	c138 <ll_rx_get+0x10>
	if (last == count) {
    c24a:	f89a 2001 	ldrb.w	r2, [sl, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    c24e:	f89a 3002 	ldrb.w	r3, [sl, #2]
	last = last + 1;
    c252:	3701      	adds	r7, #1
    c254:	b2ff      	uxtb	r7, r7
		last = 0U;
    c256:	42ba      	cmp	r2, r7
    c258:	bf08      	it	eq
    c25a:	2700      	moveq	r7, #0
	if (last == first) {
    c25c:	429f      	cmp	r7, r3
		link = mem_acquire(&mem_link_rx.free);
    c25e:	4640      	mov	r0, r8
    c260:	f43f af6a 	beq.w	c138 <ll_rx_get+0x10>
    c264:	f7fc f964 	bl	8530 <mem_acquire>
    c268:	4681      	mov	r9, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    c26a:	4658      	mov	r0, fp
		if (!link) {
    c26c:	f1b9 0f00 	cmp.w	r9, #0
    c270:	f43f af62 	beq.w	c138 <ll_rx_get+0x10>
		rx = mem_acquire(&mem_pdu_rx.free);
    c274:	f7fc f95c 	bl	8530 <mem_acquire>
		if (!rx) {
    c278:	2800      	cmp	r0, #0
    c27a:	d1d1      	bne.n	c220 <ll_rx_get+0xf8>
			mem_release(link, &mem_link_rx.free);
    c27c:	4918      	ldr	r1, [pc, #96]	; (c2e0 <ll_rx_get+0x1b8>)
    c27e:	4648      	mov	r0, r9
    c280:	f7fc f970 	bl	8564 <mem_release>
			return;
    c284:	e758      	b.n	c138 <ll_rx_get+0x10>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    c286:	4a18      	ldr	r2, [pc, #96]	; (c2e8 <ll_rx_get+0x1c0>)
    c288:	4918      	ldr	r1, [pc, #96]	; (c2ec <ll_rx_get+0x1c4>)
    c28a:	4819      	ldr	r0, [pc, #100]	; (c2f0 <ll_rx_get+0x1c8>)
    c28c:	f240 531c 	movw	r3, #1308	; 0x51c
    c290:	f009 fd56 	bl	15d40 <printk>
    c294:	4040      	eors	r0, r0
    c296:	f380 8811 	msr	BASEPRI, r0
    c29a:	f04f 0003 	mov.w	r0, #3
    c29e:	df02      	svc	2
    c2a0:	782b      	ldrb	r3, [r5, #0]
    c2a2:	e780      	b.n	c1a6 <ll_rx_get+0x7e>
			*node_rx = rx;
    c2a4:	9900      	ldr	r1, [sp, #0]
    c2a6:	600b      	str	r3, [r1, #0]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
    c2a8:	4613      	mov	r3, r2
}
    c2aa:	4618      	mov	r0, r3
    c2ac:	b005      	add	sp, #20
    c2ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, &mem_link_rx.free);
    c2b2:	490b      	ldr	r1, [pc, #44]	; (c2e0 <ll_rx_get+0x1b8>)
    c2b4:	4650      	mov	r0, sl
    c2b6:	f7fc f955 	bl	8564 <mem_release>
			return;
    c2ba:	e73d      	b.n	c138 <ll_rx_get+0x10>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
    c2bc:	78e2      	ldrb	r2, [r4, #3]
    c2be:	4907      	ldr	r1, [pc, #28]	; (c2dc <ll_rx_get+0x1b4>)
    c2c0:	9801      	ldr	r0, [sp, #4]
    c2c2:	f7ff fa31 	bl	b728 <tx_cmplt_get>
    c2c6:	4603      	mov	r3, r0
}
    c2c8:	4618      	mov	r0, r3
    c2ca:	b005      	add	sp, #20
    c2cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c2d0:	20000340 	.word	0x20000340
    c2d4:	20001388 	.word	0x20001388
    c2d8:	20001624 	.word	0x20001624
    c2dc:	20000342 	.word	0x20000342
    c2e0:	2000138c 	.word	0x2000138c
    c2e4:	200013e0 	.word	0x200013e0
    c2e8:	00019af4 	.word	0x00019af4
    c2ec:	00019b74 	.word	0x00019b74
    c2f0:	000199cc 	.word	0x000199cc
    c2f4:	20000224 	.word	0x20000224
    c2f8:	20000210 	.word	0x20000210

0000c2fc <ll_rx_dequeue>:
{
    c2fc:	b510      	push	{r4, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    c2fe:	4932      	ldr	r1, [pc, #200]	; (c3c8 <ll_rx_dequeue+0xcc>)
{
    c300:	b082      	sub	sp, #8
	struct node_rx_hdr *rx = NULL;
    c302:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    c304:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
    c306:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    c308:	aa01      	add	r2, sp, #4
    c30a:	f7fc f985 	bl	8618 <memq_dequeue>
	LL_ASSERT(link);
    c30e:	4604      	mov	r4, r0
    c310:	2800      	cmp	r0, #0
    c312:	d03b      	beq.n	c38c <ll_rx_dequeue+0x90>
	mem_release(link, &mem_link_rx.free);
    c314:	492d      	ldr	r1, [pc, #180]	; (c3cc <ll_rx_dequeue+0xd0>)
    c316:	4620      	mov	r0, r4
    c318:	f7fc f924 	bl	8564 <mem_release>
	switch (rx->type) {
    c31c:	9a01      	ldr	r2, [sp, #4]
    c31e:	7913      	ldrb	r3, [r2, #4]
    c320:	2b1a      	cmp	r3, #26
    c322:	d813      	bhi.n	c34c <ll_rx_dequeue+0x50>
    c324:	e8df f003 	tbb	[pc, r3]
    c328:	0e12120e 	.word	0x0e12120e
    c32c:	12120e12 	.word	0x12120e12
    c330:	12121212 	.word	0x12121212
    c334:	12121212 	.word	0x12121212
    c338:	12121212 	.word	0x12121212
    c33c:	0e0e0e21 	.word	0x0e0e0e21
    c340:	0e0e      	.short	0x0e0e
    c342:	0e          	.byte	0x0e
    c343:	00          	.byte	0x00
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
    c344:	2b00      	cmp	r3, #0
    c346:	d02f      	beq.n	c3a8 <ll_rx_dequeue+0xac>
}
    c348:	b002      	add	sp, #8
    c34a:	bd10      	pop	{r4, pc}
		LL_ASSERT(0);
    c34c:	4a20      	ldr	r2, [pc, #128]	; (c3d0 <ll_rx_dequeue+0xd4>)
    c34e:	4921      	ldr	r1, [pc, #132]	; (c3d4 <ll_rx_dequeue+0xd8>)
    c350:	4821      	ldr	r0, [pc, #132]	; (c3d8 <ll_rx_dequeue+0xdc>)
    c352:	f240 4332 	movw	r3, #1074	; 0x432
    c356:	f009 fcf3 	bl	15d40 <printk>
    c35a:	4040      	eors	r0, r0
    c35c:	f380 8811 	msr	BASEPRI, r0
    c360:	f04f 0003 	mov.w	r0, #3
    c364:	df02      	svc	2
}
    c366:	b002      	add	sp, #8
    c368:	bd10      	pop	{r4, pc}
			struct ll_scan_set *scan = (void *)HDR_LLL2EVT(lll);
    c36a:	6893      	ldr	r3, [r2, #8]
    c36c:	681b      	ldr	r3, [r3, #0]
			scan->is_enabled = 0U;
    c36e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
    c372:	f36f 0200 	bfc	r2, #0, #1
    c376:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			      (ull_scan_is_enabled(0) << 1)) |
    c37a:	2000      	movs	r0, #0
    c37c:	f000 fd30 	bl	cde0 <ull_scan_is_enabled>
			if (!bm) {
    c380:	0040      	lsls	r0, r0, #1
    c382:	d1e1      	bne.n	c348 <ll_rx_dequeue+0x4c>
				ull_filter_adv_scan_state_cb(0);
    c384:	f004 fa20 	bl	107c8 <ull_filter_adv_scan_state_cb>
}
    c388:	b002      	add	sp, #8
    c38a:	bd10      	pop	{r4, pc}
	LL_ASSERT(link);
    c38c:	4a10      	ldr	r2, [pc, #64]	; (c3d0 <ll_rx_dequeue+0xd4>)
    c38e:	4913      	ldr	r1, [pc, #76]	; (c3dc <ll_rx_dequeue+0xe0>)
    c390:	4811      	ldr	r0, [pc, #68]	; (c3d8 <ll_rx_dequeue+0xdc>)
    c392:	f240 3331 	movw	r3, #817	; 0x331
    c396:	f009 fcd3 	bl	15d40 <printk>
    c39a:	4040      	eors	r0, r0
    c39c:	f380 8811 	msr	BASEPRI, r0
    c3a0:	f04f 0003 	mov.w	r0, #3
    c3a4:	df02      	svc	2
    c3a6:	e7b5      	b.n	c314 <ll_rx_dequeue+0x18>
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
    c3a8:	4a09      	ldr	r2, [pc, #36]	; (c3d0 <ll_rx_dequeue+0xd4>)
    c3aa:	490d      	ldr	r1, [pc, #52]	; (c3e0 <ll_rx_dequeue+0xe4>)
    c3ac:	480a      	ldr	r0, [pc, #40]	; (c3d8 <ll_rx_dequeue+0xdc>)
    c3ae:	f240 432e 	movw	r3, #1070	; 0x42e
    c3b2:	f009 fcc5 	bl	15d40 <printk>
    c3b6:	4040      	eors	r0, r0
    c3b8:	f380 8811 	msr	BASEPRI, r0
    c3bc:	f04f 0003 	mov.w	r0, #3
    c3c0:	df02      	svc	2
}
    c3c2:	b002      	add	sp, #8
    c3c4:	bd10      	pop	{r4, pc}
    c3c6:	bf00      	nop
    c3c8:	20001624 	.word	0x20001624
    c3cc:	2000138c 	.word	0x2000138c
    c3d0:	00019af4 	.word	0x00019af4
    c3d4:	00019a2c 	.word	0x00019a2c
    c3d8:	000199cc 	.word	0x000199cc
    c3dc:	00019d44 	.word	0x00019d44
    c3e0:	00019ba8 	.word	0x00019ba8

0000c3e4 <ll_rx_mem_release>:
{
    c3e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	rx = *node_rx;
    c3e8:	6804      	ldr	r4, [r0, #0]
	while (rx) {
    c3ea:	4e89      	ldr	r6, [pc, #548]	; (c610 <ll_rx_mem_release+0x22c>)
{
    c3ec:	4681      	mov	r9, r0
	while (rx) {
    c3ee:	b344      	cbz	r4, c442 <ll_rx_mem_release+0x5e>
			LL_ASSERT(0);
    c3f0:	f8df 8248 	ldr.w	r8, [pc, #584]	; c63c <ll_rx_mem_release+0x258>
    c3f4:	f8df a248 	ldr.w	sl, [pc, #584]	; c640 <ll_rx_mem_release+0x25c>
    c3f8:	4f86      	ldr	r7, [pc, #536]	; (c614 <ll_rx_mem_release+0x230>)
		rx = rx->next;
    c3fa:	4625      	mov	r5, r4
    c3fc:	6824      	ldr	r4, [r4, #0]
		switch (rx_free->type) {
    c3fe:	792b      	ldrb	r3, [r5, #4]
    c400:	2b1a      	cmp	r3, #26
    c402:	d80f      	bhi.n	c424 <ll_rx_mem_release+0x40>
    c404:	e8df f003 	tbb	[pc, r3]
    c408:	940e0e94 	.word	0x940e0e94
    c40c:	0e0e940e 	.word	0x0e0e940e
    c410:	0e0e0e0e 	.word	0x0e0e0e0e
    c414:	0e0e0e0e 	.word	0x0e0e0e0e
    c418:	0e0e0e0e 	.word	0x0e0e0e0e
    c41c:	9494af82 	.word	0x9494af82
    c420:	9494      	.short	0x9494
    c422:	94          	.byte	0x94
    c423:	00          	.byte	0x00
			LL_ASSERT(0);
    c424:	f44f 63a2 	mov.w	r3, #1296	; 0x510
    c428:	4642      	mov	r2, r8
    c42a:	4651      	mov	r1, sl
    c42c:	4638      	mov	r0, r7
    c42e:	f009 fc87 	bl	15d40 <printk>
    c432:	4040      	eors	r0, r0
    c434:	f380 8811 	msr	BASEPRI, r0
    c438:	f04f 0003 	mov.w	r0, #3
    c43c:	df02      	svc	2
	while (rx) {
    c43e:	2c00      	cmp	r4, #0
    c440:	d1db      	bne.n	c3fa <ll_rx_mem_release+0x16>
	*node_rx = rx;
    c442:	2300      	movs	r3, #0
    c444:	f8c9 3000 	str.w	r3, [r9]
	if (max > mem_link_rx.quota_pdu) {
    c448:	7833      	ldrb	r3, [r6, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    c44a:	1e5f      	subs	r7, r3, #1
    c44c:	b2ff      	uxtb	r7, r7
    c44e:	2b00      	cmp	r3, #0
    c450:	d05a      	beq.n	c508 <ll_rx_mem_release+0x124>
    c452:	4d71      	ldr	r5, [pc, #452]	; (c618 <ll_rx_mem_release+0x234>)
		link = mem_acquire(&mem_link_rx.free);
    c454:	f8df 81c8 	ldr.w	r8, [pc, #456]	; c620 <ll_rx_mem_release+0x23c>
    c458:	78ec      	ldrb	r4, [r5, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
    c45a:	f8df 91d0 	ldr.w	r9, [pc, #464]	; c62c <ll_rx_mem_release+0x248>
	if (last == count) {
    c45e:	786a      	ldrb	r2, [r5, #1]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    c460:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
    c462:	3401      	adds	r4, #1
    c464:	b2e4      	uxtb	r4, r4
		last = 0U;
    c466:	42a2      	cmp	r2, r4
    c468:	bf08      	it	eq
    c46a:	2400      	moveq	r4, #0
	if (last == first) {
    c46c:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
    c46e:	4640      	mov	r0, r8
    c470:	f000 80ac 	beq.w	c5cc <ll_rx_mem_release+0x1e8>
    c474:	f7fc f85c 	bl	8530 <mem_acquire>
    c478:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    c47a:	4648      	mov	r0, r9
		if (!link) {
    c47c:	f1ba 0f00 	cmp.w	sl, #0
    c480:	d042      	beq.n	c508 <ll_rx_mem_release+0x124>
		rx = mem_acquire(&mem_pdu_rx.free);
    c482:	f7fc f855 	bl	8530 <mem_acquire>
		if (!rx) {
    c486:	2800      	cmp	r0, #0
    c488:	f000 80bc 	beq.w	c604 <ll_rx_mem_release+0x220>
		rx->link = link;
    c48c:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    c490:	78ea      	ldrb	r2, [r5, #3]
    c492:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    c494:	fb02 5303 	mla	r3, r2, r3, r5
    c498:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
    c49a:	7833      	ldrb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
    c49c:	70ec      	strb	r4, [r5, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    c49e:	3f01      	subs	r7, #1
	mem_link_rx.quota_pdu += delta;
    c4a0:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    c4a2:	b2ff      	uxtb	r7, r7
	mem_link_rx.quota_pdu += delta;
    c4a4:	b2db      	uxtb	r3, r3
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    c4a6:	2fff      	cmp	r7, #255	; 0xff
	mem_link_rx.quota_pdu += delta;
    c4a8:	7033      	strb	r3, [r6, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    c4aa:	d1d8      	bne.n	c45e <ll_rx_mem_release+0x7a>
	while (mem_link_rx.quota_pdu &&
    c4ac:	b363      	cbz	r3, c508 <ll_rx_mem_release+0x124>
    c4ae:	4d5b      	ldr	r5, [pc, #364]	; (c61c <ll_rx_mem_release+0x238>)
		link = mem_acquire(&mem_link_rx.free);
    c4b0:	4f5b      	ldr	r7, [pc, #364]	; (c620 <ll_rx_mem_release+0x23c>)
    c4b2:	78ec      	ldrb	r4, [r5, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
    c4b4:	f8df 8174 	ldr.w	r8, [pc, #372]	; c62c <ll_rx_mem_release+0x248>
		link->mem = NULL;
    c4b8:	f04f 0900 	mov.w	r9, #0
	if (last == count) {
    c4bc:	786a      	ldrb	r2, [r5, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    c4be:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
    c4c0:	3401      	adds	r4, #1
    c4c2:	b2e4      	uxtb	r4, r4
		last = 0U;
    c4c4:	42a2      	cmp	r2, r4
    c4c6:	bf08      	it	eq
    c4c8:	2400      	moveq	r4, #0
	if (last == first) {
    c4ca:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
    c4cc:	4638      	mov	r0, r7
    c4ce:	d01b      	beq.n	c508 <ll_rx_mem_release+0x124>
    c4d0:	f7fc f82e 	bl	8530 <mem_acquire>
    c4d4:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    c4d6:	4640      	mov	r0, r8
		if (!link) {
    c4d8:	f1ba 0f00 	cmp.w	sl, #0
    c4dc:	d014      	beq.n	c508 <ll_rx_mem_release+0x124>
		rx = mem_acquire(&mem_pdu_rx.free);
    c4de:	f7fc f827 	bl	8530 <mem_acquire>
		if (!rx) {
    c4e2:	2800      	cmp	r0, #0
    c4e4:	f000 808e 	beq.w	c604 <ll_rx_mem_release+0x220>
		link->mem = NULL;
    c4e8:	f8ca 9004 	str.w	r9, [sl, #4]
		rx->link = link;
    c4ec:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    c4f0:	78ea      	ldrb	r2, [r5, #3]
    c4f2:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    c4f4:	fb02 5303 	mla	r3, r2, r3, r5
    c4f8:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
    c4fa:	7833      	ldrb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
    c4fc:	70ec      	strb	r4, [r5, #3]
    c4fe:	3b01      	subs	r3, #1
    c500:	b2db      	uxtb	r3, r3
    c502:	7033      	strb	r3, [r6, #0]
	while (mem_link_rx.quota_pdu &&
    c504:	2b00      	cmp	r3, #0
    c506:	d1d9      	bne.n	c4bc <ll_rx_mem_release+0xd8>
}
    c508:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			} else if (cc->status == BT_HCI_ERR_UNKNOWN_CONN_ID) {
    c50c:	7f2b      	ldrb	r3, [r5, #28]
    c50e:	2b02      	cmp	r3, #2
    c510:	d060      	beq.n	c5d4 <ll_rx_mem_release+0x1f0>
				LL_ASSERT(!cc->status);
    c512:	b1db      	cbz	r3, c54c <ll_rx_mem_release+0x168>
    c514:	4943      	ldr	r1, [pc, #268]	; (c624 <ll_rx_mem_release+0x240>)
    c516:	f44f 6391 	mov.w	r3, #1160	; 0x488
    c51a:	4642      	mov	r2, r8
    c51c:	4638      	mov	r0, r7
    c51e:	f009 fc0f 	bl	15d40 <printk>
    c522:	4040      	eors	r0, r0
    c524:	f380 8811 	msr	BASEPRI, r0
    c528:	f04f 0003 	mov.w	r0, #3
    c52c:	df02      	svc	2
    c52e:	792b      	ldrb	r3, [r5, #4]
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
    c530:	b963      	cbnz	r3, c54c <ll_rx_mem_release+0x168>
    c532:	493d      	ldr	r1, [pc, #244]	; (c628 <ll_rx_mem_release+0x244>)
    c534:	f240 43dc 	movw	r3, #1244	; 0x4dc
    c538:	4642      	mov	r2, r8
    c53a:	4638      	mov	r0, r7
    c53c:	f009 fc00 	bl	15d40 <printk>
    c540:	4040      	eors	r0, r0
    c542:	f380 8811 	msr	BASEPRI, r0
    c546:	f04f 0003 	mov.w	r0, #3
    c54a:	df02      	svc	2
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    c54c:	7833      	ldrb	r3, [r6, #0]
    c54e:	2b06      	cmp	r3, #6
    c550:	d82d      	bhi.n	c5ae <ll_rx_mem_release+0x1ca>
	mem_link_rx.quota_pdu += delta;
    c552:	3301      	adds	r3, #1
			mem_release(rx_free, &mem_pdu_rx.free);
    c554:	4935      	ldr	r1, [pc, #212]	; (c62c <ll_rx_mem_release+0x248>)
	mem_link_rx.quota_pdu += delta;
    c556:	7033      	strb	r3, [r6, #0]
			mem_release(rx_free, &mem_pdu_rx.free);
    c558:	4628      	mov	r0, r5
    c55a:	f7fc f803 	bl	8564 <mem_release>
	while (rx) {
    c55e:	2c00      	cmp	r4, #0
    c560:	f47f af4b 	bne.w	c3fa <ll_rx_mem_release+0x16>
    c564:	e76d      	b.n	c442 <ll_rx_mem_release+0x5e>
			conn = ll_conn_get(rx_free->handle);
    c566:	88e8      	ldrh	r0, [r5, #6]
    c568:	f000 fffc 	bl	d564 <ll_conn_get>
			LL_ASSERT(!conn->lll.link_tx_free);
    c56c:	6d83      	ldr	r3, [r0, #88]	; 0x58
			conn = ll_conn_get(rx_free->handle);
    c56e:	4605      	mov	r5, r0
			LL_ASSERT(!conn->lll.link_tx_free);
    c570:	b163      	cbz	r3, c58c <ll_rx_mem_release+0x1a8>
    c572:	492f      	ldr	r1, [pc, #188]	; (c630 <ll_rx_mem_release+0x24c>)
    c574:	f240 5303 	movw	r3, #1283	; 0x503
    c578:	4642      	mov	r2, r8
    c57a:	4638      	mov	r0, r7
    c57c:	f009 fbe0 	bl	15d40 <printk>
    c580:	4040      	eors	r0, r0
    c582:	f380 8811 	msr	BASEPRI, r0
    c586:	f04f 0003 	mov.w	r0, #3
    c58a:	df02      	svc	2
			link = memq_deinit(&conn->lll.memq_tx.head,
    c58c:	f105 014c 	add.w	r1, r5, #76	; 0x4c
    c590:	f105 0048 	add.w	r0, r5, #72	; 0x48
    c594:	f7fc f826 	bl	85e4 <memq_deinit>
			LL_ASSERT(link);
    c598:	4683      	mov	fp, r0
    c59a:	b328      	cbz	r0, c5e8 <ll_rx_mem_release+0x204>
			conn->lll.link_tx_free = link;
    c59c:	f8c5 b058 	str.w	fp, [r5, #88]	; 0x58
			ll_conn_release(conn);
    c5a0:	4628      	mov	r0, r5
    c5a2:	f000 ffd1 	bl	d548 <ll_conn_release>
	while (rx) {
    c5a6:	2c00      	cmp	r4, #0
    c5a8:	f47f af27 	bne.w	c3fa <ll_rx_mem_release+0x16>
    c5ac:	e749      	b.n	c442 <ll_rx_mem_release+0x5e>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    c5ae:	4921      	ldr	r1, [pc, #132]	; (c634 <ll_rx_mem_release+0x250>)
    c5b0:	f240 531c 	movw	r3, #1308	; 0x51c
    c5b4:	4642      	mov	r2, r8
    c5b6:	4638      	mov	r0, r7
    c5b8:	f009 fbc2 	bl	15d40 <printk>
    c5bc:	4040      	eors	r0, r0
    c5be:	f380 8811 	msr	BASEPRI, r0
    c5c2:	f04f 0003 	mov.w	r0, #3
    c5c6:	df02      	svc	2
    c5c8:	7833      	ldrb	r3, [r6, #0]
    c5ca:	e7c2      	b.n	c552 <ll_rx_mem_release+0x16e>
	if (!max) {
    c5cc:	2f00      	cmp	r7, #0
    c5ce:	d09b      	beq.n	c508 <ll_rx_mem_release+0x124>
    c5d0:	7833      	ldrb	r3, [r6, #0]
    c5d2:	e76b      	b.n	c4ac <ll_rx_mem_release+0xc8>
				ull_master_cleanup(rx_free);
    c5d4:	4628      	mov	r0, r5
    c5d6:	f003 fc6f 	bl	feb8 <ull_master_cleanup>
					ull_filter_adv_scan_state_cb(0);
    c5da:	2000      	movs	r0, #0
    c5dc:	f004 f8f4 	bl	107c8 <ull_filter_adv_scan_state_cb>
	while (rx) {
    c5e0:	2c00      	cmp	r4, #0
    c5e2:	f47f af0a 	bne.w	c3fa <ll_rx_mem_release+0x16>
    c5e6:	e72c      	b.n	c442 <ll_rx_mem_release+0x5e>
			LL_ASSERT(link);
    c5e8:	4913      	ldr	r1, [pc, #76]	; (c638 <ll_rx_mem_release+0x254>)
    c5ea:	f240 5306 	movw	r3, #1286	; 0x506
    c5ee:	4642      	mov	r2, r8
    c5f0:	4638      	mov	r0, r7
    c5f2:	f009 fba5 	bl	15d40 <printk>
    c5f6:	4040      	eors	r0, r0
    c5f8:	f380 8811 	msr	BASEPRI, r0
    c5fc:	f04f 0003 	mov.w	r0, #3
    c600:	df02      	svc	2
    c602:	e7cb      	b.n	c59c <ll_rx_mem_release+0x1b8>
			mem_release(link, &mem_link_rx.free);
    c604:	4650      	mov	r0, sl
    c606:	4906      	ldr	r1, [pc, #24]	; (c620 <ll_rx_mem_release+0x23c>)
}
    c608:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mem_release(link, &mem_link_rx.free);
    c60c:	f7fb bfaa 	b.w	8564 <mem_release>
    c610:	20001388 	.word	0x20001388
    c614:	000199cc 	.word	0x000199cc
    c618:	20000224 	.word	0x20000224
    c61c:	20000210 	.word	0x20000210
    c620:	2000138c 	.word	0x2000138c
    c624:	00019bc8 	.word	0x00019bc8
    c628:	00019bd4 	.word	0x00019bd4
    c62c:	200013e0 	.word	0x200013e0
    c630:	00019bf8 	.word	0x00019bf8
    c634:	00019b74 	.word	0x00019b74
    c638:	00019d44 	.word	0x00019d44
    c63c:	00019af4 	.word	0x00019af4
    c640:	00019a2c 	.word	0x00019a2c

0000c644 <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
    c644:	4801      	ldr	r0, [pc, #4]	; (c64c <ll_rx_link_alloc+0x8>)
    c646:	f7fb bf73 	b.w	8530 <mem_acquire>
    c64a:	bf00      	nop
    c64c:	2000138c 	.word	0x2000138c

0000c650 <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
    c650:	4901      	ldr	r1, [pc, #4]	; (c658 <ll_rx_link_release+0x8>)
    c652:	f7fb bf87 	b.w	8564 <mem_release>
    c656:	bf00      	nop
    c658:	2000138c 	.word	0x2000138c

0000c65c <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
    c65c:	4b02      	ldr	r3, [pc, #8]	; (c668 <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    c65e:	4a03      	ldr	r2, [pc, #12]	; (c66c <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
    c660:	78db      	ldrb	r3, [r3, #3]
    c662:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    c664:	f7fb bfc8 	b.w	85f8 <memq_enqueue>
    c668:	20000340 	.word	0x20000340
    c66c:	20001628 	.word	0x20001628

0000c670 <ll_rx_sched>:
	k_sem_give(sem_recv);
    c670:	4b01      	ldr	r3, [pc, #4]	; (c678 <ll_rx_sched+0x8>)
    c672:	6818      	ldr	r0, [r3, #0]
	z_impl_k_sem_give(sem);
    c674:	f008 be4e 	b.w	15314 <z_impl_k_sem_give>
    c678:	2000163c 	.word	0x2000163c

0000c67c <ll_pdu_rx_alloc_peek>:
{
    c67c:	b410      	push	{r4}
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
    c67e:	4b0d      	ldr	r3, [pc, #52]	; (c6b4 <ll_pdu_rx_alloc_peek+0x38>)
    c680:	789a      	ldrb	r2, [r3, #2]
    c682:	78dc      	ldrb	r4, [r3, #3]
	if (last >= first) {
    c684:	42a2      	cmp	r2, r4
    c686:	d809      	bhi.n	c69c <ll_pdu_rx_alloc_peek+0x20>
		return last - first;
    c688:	1aa1      	subs	r1, r4, r2
    c68a:	b2c9      	uxtb	r1, r1
    c68c:	4288      	cmp	r0, r1
    c68e:	d802      	bhi.n	c696 <ll_pdu_rx_alloc_peek+0x1a>
	if (first == last) {
    c690:	42a2      	cmp	r2, r4
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
    c692:	7819      	ldrb	r1, [r3, #0]
    c694:	d109      	bne.n	c6aa <ll_pdu_rx_alloc_peek+0x2e>
		return NULL;
    c696:	2000      	movs	r0, #0
}
    c698:	bc10      	pop	{r4}
    c69a:	4770      	bx	lr
		return count - first + last;
    c69c:	7859      	ldrb	r1, [r3, #1]
    c69e:	1a89      	subs	r1, r1, r2
    c6a0:	4421      	add	r1, r4
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
    c6a2:	b2c9      	uxtb	r1, r1
    c6a4:	4288      	cmp	r0, r1
    c6a6:	d8f6      	bhi.n	c696 <ll_pdu_rx_alloc_peek+0x1a>
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
    c6a8:	7819      	ldrb	r1, [r3, #0]
}
    c6aa:	bc10      	pop	{r4}
	return *((void **)(fifo + first * size));
    c6ac:	fb02 3301 	mla	r3, r2, r1, r3
    c6b0:	6858      	ldr	r0, [r3, #4]
    c6b2:	4770      	bx	lr
    c6b4:	20000210 	.word	0x20000210

0000c6b8 <ll_pdu_rx_alloc>:
{
    c6b8:	b410      	push	{r4}
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
    c6ba:	4b0a      	ldr	r3, [pc, #40]	; (c6e4 <ll_pdu_rx_alloc+0x2c>)
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
    c6bc:	7899      	ldrb	r1, [r3, #2]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
    c6be:	78da      	ldrb	r2, [r3, #3]
    c6c0:	7818      	ldrb	r0, [r3, #0]
    c6c2:	785c      	ldrb	r4, [r3, #1]
    c6c4:	428a      	cmp	r2, r1
    c6c6:	d00a      	beq.n	c6de <ll_pdu_rx_alloc+0x26>
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
    c6c8:	1c4a      	adds	r2, r1, #1
    c6ca:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
    c6cc:	fb01 3100 	mla	r1, r1, r0, r3
	if (_first == count) {
		_first = 0U;
    c6d0:	4294      	cmp	r4, r2
    c6d2:	bf08      	it	eq
    c6d4:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
    c6d6:	6848      	ldr	r0, [r1, #4]
	}

	*first = _first; /* Write back read-index */
    c6d8:	709a      	strb	r2, [r3, #2]
}
    c6da:	bc10      	pop	{r4}
    c6dc:	4770      	bx	lr
		return NULL;
    c6de:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
    c6e0:	e7fb      	b.n	c6da <ll_pdu_rx_alloc+0x22>
    c6e2:	bf00      	nop
    c6e4:	20000210 	.word	0x20000210

0000c6e8 <ll_tx_ack_put>:
{
    c6e8:	b570      	push	{r4, r5, r6, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
    c6ea:	4a13      	ldr	r2, [pc, #76]	; (c738 <ll_tx_ack_put+0x50>)
    c6ec:	78d6      	ldrb	r6, [r2, #3]
	if (last == count) {
    c6ee:	7855      	ldrb	r5, [r2, #1]
    c6f0:	7894      	ldrb	r4, [r2, #2]
	last = last + 1;
    c6f2:	1c73      	adds	r3, r6, #1
    c6f4:	b2db      	uxtb	r3, r3
		last = 0U;
    c6f6:	429d      	cmp	r5, r3
    c6f8:	bf08      	it	eq
    c6fa:	2300      	moveq	r3, #0
	if (last == first) {
    c6fc:	429c      	cmp	r4, r3
    c6fe:	d00a      	beq.n	c716 <ll_tx_ack_put+0x2e>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    c700:	4615      	mov	r5, r2
    c702:	f815 4b04 	ldrb.w	r4, [r5], #4
    c706:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(tx);
    c70a:	192e      	adds	r6, r5, r4
    c70c:	d003      	beq.n	c716 <ll_tx_ack_put+0x2e>
	tx->handle = handle;
    c70e:	5328      	strh	r0, [r5, r4]
	tx->node = node_tx;
    c710:	6071      	str	r1, [r6, #4]
	*last = idx; /* Commit: Update write index */
    c712:	70d3      	strb	r3, [r2, #3]
}
    c714:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(tx);
    c716:	4a09      	ldr	r2, [pc, #36]	; (c73c <ll_tx_ack_put+0x54>)
    c718:	4909      	ldr	r1, [pc, #36]	; (c740 <ll_tx_ack_put+0x58>)
    c71a:	480a      	ldr	r0, [pc, #40]	; (c744 <ll_tx_ack_put+0x5c>)
    c71c:	f240 5364 	movw	r3, #1380	; 0x564
    c720:	f009 fb0e 	bl	15d40 <printk>
    c724:	4040      	eors	r0, r0
    c726:	f380 8811 	msr	BASEPRI, r0
    c72a:	f04f 0003 	mov.w	r0, #3
    c72e:	df02      	svc	2
	tx->handle = handle;
    c730:	2300      	movs	r3, #0
    c732:	801b      	strh	r3, [r3, #0]
    c734:	deff      	udf	#255	; 0xff
    c736:	bf00      	nop
    c738:	20000340 	.word	0x20000340
    c73c:	00019af4 	.word	0x00019af4
    c740:	00019d38 	.word	0x00019d38
    c744:	000199cc 	.word	0x000199cc

0000c748 <ull_ticker_status_take>:
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    c748:	f030 0302 	bics.w	r3, r0, #2
{
    c74c:	b510      	push	{r4, lr}
    c74e:	460c      	mov	r4, r1
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    c750:	d002      	beq.n	c758 <ull_ticker_status_take+0x10>
    c752:	680b      	ldr	r3, [r1, #0]
    c754:	2b02      	cmp	r3, #2
    c756:	d008      	beq.n	c76a <ull_ticker_status_take+0x22>
	return z_impl_k_sem_take(sem, timeout);
    c758:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    c75c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c760:	4809      	ldr	r0, [pc, #36]	; (c788 <ull_ticker_status_take+0x40>)
    c762:	f008 fdfd 	bl	15360 <z_impl_k_sem_take>
	return *ret_cb;
    c766:	6820      	ldr	r0, [r4, #0]
}
    c768:	bd10      	pop	{r4, pc}
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    c76a:	4a08      	ldr	r2, [pc, #32]	; (c78c <ull_ticker_status_take+0x44>)
    c76c:	4908      	ldr	r1, [pc, #32]	; (c790 <ull_ticker_status_take+0x48>)
    c76e:	4809      	ldr	r0, [pc, #36]	; (c794 <ull_ticker_status_take+0x4c>)
    c770:	f44f 63b3 	mov.w	r3, #1432	; 0x598
    c774:	f009 fae4 	bl	15d40 <printk>
    c778:	4040      	eors	r0, r0
    c77a:	f380 8811 	msr	BASEPRI, r0
    c77e:	f04f 0003 	mov.w	r0, #3
    c782:	df02      	svc	2
    c784:	e7e8      	b.n	c758 <ull_ticker_status_take+0x10>
    c786:	bf00      	nop
    c788:	20001640 	.word	0x20001640
    c78c:	00019af4 	.word	0x00019af4
    c790:	00019c18 	.word	0x00019c18
    c794:	000199cc 	.word	0x000199cc

0000c798 <ull_disable_mark_get>:
	return mark_get(mark_disable);
    c798:	4b01      	ldr	r3, [pc, #4]	; (c7a0 <ull_disable_mark_get+0x8>)
}
    c79a:	6818      	ldr	r0, [r3, #0]
    c79c:	4770      	bx	lr
    c79e:	bf00      	nop
    c7a0:	200012e0 	.word	0x200012e0

0000c7a4 <ull_update_mark>:
	if (!*m) {
    c7a4:	4a04      	ldr	r2, [pc, #16]	; (c7b8 <ull_update_mark+0x14>)
    c7a6:	6813      	ldr	r3, [r2, #0]
    c7a8:	b10b      	cbz	r3, c7ae <ull_update_mark+0xa>
}
    c7aa:	4618      	mov	r0, r3
    c7ac:	4770      	bx	lr
		*m = param;
    c7ae:	4603      	mov	r3, r0
    c7b0:	6010      	str	r0, [r2, #0]
}
    c7b2:	4618      	mov	r0, r3
    c7b4:	4770      	bx	lr
    c7b6:	bf00      	nop
    c7b8:	200012e4 	.word	0x200012e4

0000c7bc <ull_update_unmark>:
	if (*m && *m == param) {
    c7bc:	4a04      	ldr	r2, [pc, #16]	; (c7d0 <ull_update_unmark+0x14>)
    c7be:	6813      	ldr	r3, [r2, #0]
    c7c0:	b123      	cbz	r3, c7cc <ull_update_unmark+0x10>
    c7c2:	4298      	cmp	r0, r3
		*m = NULL;
    c7c4:	bf06      	itte	eq
    c7c6:	2100      	moveq	r1, #0
    c7c8:	6011      	streq	r1, [r2, #0]
	return NULL;
    c7ca:	2300      	movne	r3, #0
}
    c7cc:	4618      	mov	r0, r3
    c7ce:	4770      	bx	lr
    c7d0:	200012e4 	.word	0x200012e4

0000c7d4 <ull_update_mark_get>:
	return mark_get(mark_update);
    c7d4:	4b01      	ldr	r3, [pc, #4]	; (c7dc <ull_update_mark_get+0x8>)
}
    c7d6:	6818      	ldr	r0, [r3, #0]
    c7d8:	4770      	bx	lr
    c7da:	bf00      	nop
    c7dc:	200012e4 	.word	0x200012e4

0000c7e0 <ull_disable>:
{
    c7e0:	b530      	push	{r4, r5, lr}
	hdr = HDR_ULL(((struct lll_hdr *)lll)->parent);
    c7e2:	6805      	ldr	r5, [r0, #0]
	if (!hdr) {
    c7e4:	f115 0f10 	cmn.w	r5, #16
{
    c7e8:	b087      	sub	sp, #28
	if (!hdr) {
    c7ea:	d00b      	beq.n	c804 <ull_disable+0x24>
	compiler_barrier();
    c7ec:	4604      	mov	r4, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
    c7ee:	2201      	movs	r2, #1
    c7f0:	4668      	mov	r0, sp
    c7f2:	2100      	movs	r1, #0
    c7f4:	f00c fb4d 	bl	18e92 <z_impl_k_sem_init>
    c7f8:	7c2b      	ldrb	r3, [r5, #16]
	hdr->disabled_cb = disabled_cb;
    c7fa:	4a13      	ldr	r2, [pc, #76]	; (c848 <ull_disable+0x68>)
	hdr->disabled_param = &sem;
    c7fc:	f8c5 d018 	str.w	sp, [r5, #24]
	hdr->disabled_cb = disabled_cb;
    c800:	616a      	str	r2, [r5, #20]
	if (!ull_ref_get(hdr)) {
    c802:	b913      	cbnz	r3, c80a <ull_disable+0x2a>
		return ULL_STATUS_SUCCESS;
    c804:	2000      	movs	r0, #0
}
    c806:	b007      	add	sp, #28
    c808:	bd30      	pop	{r4, r5, pc}
	mfy.param = lll;
    c80a:	4b10      	ldr	r3, [pc, #64]	; (c84c <ull_disable+0x6c>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
    c80c:	2200      	movs	r2, #0
    c80e:	4611      	mov	r1, r2
    c810:	2003      	movs	r0, #3
	mfy.param = lll;
    c812:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
    c814:	f7fb ff64 	bl	86e0 <mayfly_enqueue>
	LL_ASSERT(!ret);
    c818:	b940      	cbnz	r0, c82c <ull_disable+0x4c>
	return z_impl_k_sem_take(sem, timeout);
    c81a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    c81e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c822:	4668      	mov	r0, sp
    c824:	f008 fd9c 	bl	15360 <z_impl_k_sem_take>
}
    c828:	b007      	add	sp, #28
    c82a:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
    c82c:	4a08      	ldr	r2, [pc, #32]	; (c850 <ull_disable+0x70>)
    c82e:	4909      	ldr	r1, [pc, #36]	; (c854 <ull_disable+0x74>)
    c830:	4809      	ldr	r0, [pc, #36]	; (c858 <ull_disable+0x78>)
    c832:	f240 630a 	movw	r3, #1546	; 0x60a
    c836:	f009 fa83 	bl	15d40 <printk>
    c83a:	4040      	eors	r0, r0
    c83c:	f380 8811 	msr	BASEPRI, r0
    c840:	f04f 0003 	mov.w	r0, #3
    c844:	df02      	svc	2
    c846:	e7e8      	b.n	c81a <ull_disable+0x3a>
    c848:	0000b725 	.word	0x0000b725
    c84c:	20000374 	.word	0x20000374
    c850:	00019af4 	.word	0x00019af4
    c854:	00019c10 	.word	0x00019c10
    c858:	000199cc 	.word	0x000199cc

0000c85c <ull_ticker_stop_with_mark>:
{
    c85c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!*m) {
    c85e:	4d1d      	ldr	r5, [pc, #116]	; (c8d4 <ull_ticker_stop_with_mark+0x78>)
    c860:	682b      	ldr	r3, [r5, #0]
{
    c862:	b085      	sub	sp, #20
    c864:	460c      	mov	r4, r1
    c866:	4616      	mov	r6, r2
	if (!*m) {
    c868:	b323      	cbz	r3, c8b4 <ull_ticker_stop_with_mark+0x58>
	if (mark != param) {
    c86a:	4299      	cmp	r1, r3
    c86c:	d112      	bne.n	c894 <ull_ticker_stop_with_mark+0x38>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    c86e:	af03      	add	r7, sp, #12
	ret_cb = TICKER_STATUS_BUSY;
    c870:	2102      	movs	r1, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    c872:	4602      	mov	r2, r0
	ret_cb = TICKER_STATUS_BUSY;
    c874:	9103      	str	r1, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    c876:	4b18      	ldr	r3, [pc, #96]	; (c8d8 <ull_ticker_stop_with_mark+0x7c>)
    c878:	9700      	str	r7, [sp, #0]
    c87a:	2103      	movs	r1, #3
    c87c:	2000      	movs	r0, #0
    c87e:	f7fd fad9 	bl	9e34 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
    c882:	4639      	mov	r1, r7
    c884:	f7ff ff60 	bl	c748 <ull_ticker_status_take>
	if (ret) {
    c888:	b140      	cbz	r0, c89c <ull_ticker_stop_with_mark+0x40>
	if (*m && *m == param) {
    c88a:	682b      	ldr	r3, [r5, #0]
    c88c:	b10b      	cbz	r3, c892 <ull_ticker_stop_with_mark+0x36>
    c88e:	429c      	cmp	r4, r3
    c890:	d012      	beq.n	c8b8 <ull_ticker_stop_with_mark+0x5c>
		if (mark != param) {
    c892:	b1cc      	cbz	r4, c8c8 <ull_ticker_stop_with_mark+0x6c>
			return -ENOLCK;
    c894:	f06f 0021 	mvn.w	r0, #33	; 0x21
}
    c898:	b005      	add	sp, #20
    c89a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = ull_disable(lll_disable);
    c89c:	4630      	mov	r0, r6
    c89e:	f7ff ff9f 	bl	c7e0 <ull_disable>
	if (ret) {
    c8a2:	b9a0      	cbnz	r0, c8ce <ull_ticker_stop_with_mark+0x72>
	if (*m && *m == param) {
    c8a4:	682b      	ldr	r3, [r5, #0]
    c8a6:	b10b      	cbz	r3, c8ac <ull_ticker_stop_with_mark+0x50>
    c8a8:	429c      	cmp	r4, r3
    c8aa:	d00b      	beq.n	c8c4 <ull_ticker_stop_with_mark+0x68>
	if (mark != param) {
    c8ac:	2c00      	cmp	r4, #0
    c8ae:	d1f1      	bne.n	c894 <ull_ticker_stop_with_mark+0x38>
}
    c8b0:	b005      	add	sp, #20
    c8b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = param;
    c8b4:	6029      	str	r1, [r5, #0]
	if (mark != param) {
    c8b6:	e7da      	b.n	c86e <ull_ticker_stop_with_mark+0x12>
		*m = NULL;
    c8b8:	2300      	movs	r3, #0
		return -EALREADY;
    c8ba:	f06f 0044 	mvn.w	r0, #68	; 0x44
		*m = NULL;
    c8be:	602b      	str	r3, [r5, #0]
}
    c8c0:	b005      	add	sp, #20
    c8c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = NULL;
    c8c4:	6028      	str	r0, [r5, #0]
	if (mark != param) {
    c8c6:	e7e7      	b.n	c898 <ull_ticker_stop_with_mark+0x3c>
		return -EALREADY;
    c8c8:	f06f 0044 	mvn.w	r0, #68	; 0x44
    c8cc:	e7e4      	b.n	c898 <ull_ticker_stop_with_mark+0x3c>
		return -EBUSY;
    c8ce:	f06f 000f 	mvn.w	r0, #15
    c8d2:	e7e1      	b.n	c898 <ull_ticker_stop_with_mark+0x3c>
    c8d4:	200012e0 	.word	0x200012e0
    c8d8:	0000b719 	.word	0x0000b719

0000c8dc <ull_pdu_rx_alloc_peek>:
{
    c8dc:	b410      	push	{r4}
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
    c8de:	4b0d      	ldr	r3, [pc, #52]	; (c914 <ull_pdu_rx_alloc_peek+0x38>)
    c8e0:	789a      	ldrb	r2, [r3, #2]
    c8e2:	78dc      	ldrb	r4, [r3, #3]
	if (last >= first) {
    c8e4:	42a2      	cmp	r2, r4
    c8e6:	d809      	bhi.n	c8fc <ull_pdu_rx_alloc_peek+0x20>
		return last - first;
    c8e8:	1aa1      	subs	r1, r4, r2
    c8ea:	b2c9      	uxtb	r1, r1
    c8ec:	4288      	cmp	r0, r1
    c8ee:	d802      	bhi.n	c8f6 <ull_pdu_rx_alloc_peek+0x1a>
	if (first == last) {
    c8f0:	42a2      	cmp	r2, r4
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
    c8f2:	7819      	ldrb	r1, [r3, #0]
    c8f4:	d109      	bne.n	c90a <ull_pdu_rx_alloc_peek+0x2e>
		return NULL;
    c8f6:	2000      	movs	r0, #0
}
    c8f8:	bc10      	pop	{r4}
    c8fa:	4770      	bx	lr
		return count - first + last;
    c8fc:	7859      	ldrb	r1, [r3, #1]
    c8fe:	1a89      	subs	r1, r1, r2
    c900:	4421      	add	r1, r4
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
    c902:	b2c9      	uxtb	r1, r1
    c904:	4288      	cmp	r0, r1
    c906:	d8f6      	bhi.n	c8f6 <ull_pdu_rx_alloc_peek+0x1a>
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
    c908:	7819      	ldrb	r1, [r3, #0]
}
    c90a:	bc10      	pop	{r4}
	return *((void **)(fifo + first * size));
    c90c:	fb02 3301 	mla	r3, r2, r1, r3
    c910:	6858      	ldr	r0, [r3, #4]
    c912:	4770      	bx	lr
    c914:	20000224 	.word	0x20000224

0000c918 <ull_pdu_rx_alloc>:
{
    c918:	b410      	push	{r4}
	return MFIFO_DEQUEUE(pdu_rx_free);
    c91a:	4b0a      	ldr	r3, [pc, #40]	; (c944 <ull_pdu_rx_alloc+0x2c>)
	uint8_t _first = *first; /* Copy read-index */
    c91c:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
    c91e:	78da      	ldrb	r2, [r3, #3]
    c920:	7818      	ldrb	r0, [r3, #0]
    c922:	785c      	ldrb	r4, [r3, #1]
    c924:	428a      	cmp	r2, r1
    c926:	d00a      	beq.n	c93e <ull_pdu_rx_alloc+0x26>
	_first += 1U;
    c928:	1c4a      	adds	r2, r1, #1
    c92a:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
    c92c:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
    c930:	4294      	cmp	r4, r2
    c932:	bf08      	it	eq
    c934:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
    c936:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
    c938:	709a      	strb	r2, [r3, #2]
}
    c93a:	bc10      	pop	{r4}
    c93c:	4770      	bx	lr
		return NULL;
    c93e:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(pdu_rx_free);
    c940:	e7fb      	b.n	c93a <ull_pdu_rx_alloc+0x22>
    c942:	bf00      	nop
    c944:	20000224 	.word	0x20000224

0000c948 <ull_rx_put>:
{
    c948:	b538      	push	{r3, r4, r5, lr}
    c94a:	460c      	mov	r4, r1
    c94c:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
    c94e:	f002 ff13 	bl	f778 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    c952:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
    c954:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    c956:	4a03      	ldr	r2, [pc, #12]	; (c964 <ull_rx_put+0x1c>)
    c958:	4628      	mov	r0, r5
}
    c95a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    c95e:	f7fb be4b 	b.w	85f8 <memq_enqueue>
    c962:	bf00      	nop
    c964:	20001638 	.word	0x20001638

0000c968 <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
    c968:	2201      	movs	r2, #1
    c96a:	4b02      	ldr	r3, [pc, #8]	; (c974 <ull_rx_sched+0xc>)
    c96c:	4611      	mov	r1, r2
    c96e:	2000      	movs	r0, #0
    c970:	f7fb beb6 	b.w	86e0 <mayfly_enqueue>
    c974:	20000384 	.word	0x20000384

0000c978 <ull_prepare_enqueue>:
{
    c978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    c97c:	4e17      	ldr	r6, [pc, #92]	; (c9dc <ull_prepare_enqueue+0x64>)
{
    c97e:	f89d a020 	ldrb.w	sl, [sp, #32]
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    c982:	78f4      	ldrb	r4, [r6, #3]
	if (last == count) {
    c984:	7877      	ldrb	r7, [r6, #1]
    c986:	f896 c002 	ldrb.w	ip, [r6, #2]
	last = last + 1;
    c98a:	1c65      	adds	r5, r4, #1
    c98c:	b2ed      	uxtb	r5, r5
		last = 0U;
    c98e:	42af      	cmp	r7, r5
    c990:	bf08      	it	eq
    c992:	2500      	moveq	r5, #0
	if (last == first) {
    c994:	45ac      	cmp	ip, r5
    c996:	d01d      	beq.n	c9d4 <ull_prepare_enqueue+0x5c>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    c998:	4699      	mov	r9, r3
    c99a:	4633      	mov	r3, r6
    c99c:	460f      	mov	r7, r1
    c99e:	4611      	mov	r1, r2
    c9a0:	f813 2b04 	ldrb.w	r2, [r3], #4
    c9a4:	fb02 3404 	mla	r4, r2, r4, r3
	if (!e) {
    c9a8:	b1a4      	cbz	r4, c9d4 <ull_prepare_enqueue+0x5c>
    c9aa:	4680      	mov	r8, r0
	memcpy(&e->prepare_param, prepare_param, sizeof(e->prepare_param));
    c9ac:	2210      	movs	r2, #16
    c9ae:	4620      	mov	r0, r4
    c9b0:	f00a f87e 	bl	16ab0 <memcpy>
	e->is_resume = is_resume;
    c9b4:	7f22      	ldrb	r2, [r4, #28]
	e->prepare_cb = prepare_cb;
    c9b6:	f8c4 9010 	str.w	r9, [r4, #16]
	e->is_resume = is_resume;
    c9ba:	f00a 0a01 	and.w	sl, sl, #1
    c9be:	f022 0303 	bic.w	r3, r2, #3
    c9c2:	ea43 030a 	orr.w	r3, r3, sl
	e->abort_cb = abort_cb;
    c9c6:	e9c4 8705 	strd	r8, r7, [r4, #20]
	e->is_resume = is_resume;
    c9ca:	7723      	strb	r3, [r4, #28]
	return 0;
    c9cc:	2000      	movs	r0, #0
	*last = idx; /* Commit: Update write index */
    c9ce:	70f5      	strb	r5, [r6, #3]
}
    c9d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOBUFS;
    c9d4:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    c9d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c9dc:	2000023c 	.word	0x2000023c

0000c9e0 <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
    c9e0:	4b05      	ldr	r3, [pc, #20]	; (c9f8 <ull_prepare_dequeue_get+0x18>)
    c9e2:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
    c9e4:	78d9      	ldrb	r1, [r3, #3]
    c9e6:	7818      	ldrb	r0, [r3, #0]
    c9e8:	4291      	cmp	r1, r2
	return (void *)(fifo + first * size);
    c9ea:	bf1a      	itte	ne
    c9ec:	3304      	addne	r3, #4
    c9ee:	fb02 3000 	mlane	r0, r2, r0, r3
		return NULL;
    c9f2:	2000      	moveq	r0, #0
}
    c9f4:	4770      	bx	lr
    c9f6:	bf00      	nop
    c9f8:	2000023c 	.word	0x2000023c

0000c9fc <ull_prepare_dequeue_iter>:
{
    c9fc:	b430      	push	{r4, r5}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
    c9fe:	4b0c      	ldr	r3, [pc, #48]	; (ca30 <ull_prepare_dequeue_iter+0x34>)
	if (*idx >= count) {
    ca00:	7802      	ldrb	r2, [r0, #0]
    ca02:	785c      	ldrb	r4, [r3, #1]
    ca04:	78dd      	ldrb	r5, [r3, #3]
    ca06:	7819      	ldrb	r1, [r3, #0]
    ca08:	4294      	cmp	r4, r2
    ca0a:	bf9c      	itt	ls
    ca0c:	789a      	ldrbls	r2, [r3, #2]
		*idx = first;
    ca0e:	7002      	strbls	r2, [r0, #0]
	if (*idx == last) {
    ca10:	4295      	cmp	r5, r2
    ca12:	d00a      	beq.n	ca2a <ull_prepare_dequeue_iter+0x2e>
	i = *idx + 1;
    ca14:	1c53      	adds	r3, r2, #1
	p = (void *)(fifo + (*idx) * size);
    ca16:	4d07      	ldr	r5, [pc, #28]	; (ca34 <ull_prepare_dequeue_iter+0x38>)
	i = *idx + 1;
    ca18:	b2db      	uxtb	r3, r3
		i = 0U;
    ca1a:	429c      	cmp	r4, r3
    ca1c:	bf08      	it	eq
    ca1e:	2300      	moveq	r3, #0
	*idx = i;
    ca20:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
    ca22:	fb02 5001 	mla	r0, r2, r1, r5
}
    ca26:	bc30      	pop	{r4, r5}
    ca28:	4770      	bx	lr
		return NULL;
    ca2a:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
    ca2c:	e7fb      	b.n	ca26 <ull_prepare_dequeue_iter+0x2a>
    ca2e:	bf00      	nop
    ca30:	2000023c 	.word	0x2000023c
    ca34:	20000240 	.word	0x20000240

0000ca38 <ull_prepare_dequeue>:
{
    ca38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return MFIFO_DEQUEUE_GET(prep);
    ca3c:	4c26      	ldr	r4, [pc, #152]	; (cad8 <ull_prepare_dequeue+0xa0>)
    ca3e:	78a2      	ldrb	r2, [r4, #2]
	if (first == last) {
    ca40:	78e1      	ldrb	r1, [r4, #3]
    ca42:	7823      	ldrb	r3, [r4, #0]
    ca44:	4291      	cmp	r1, r2
    ca46:	d027      	beq.n	ca98 <ull_prepare_dequeue+0x60>
	return (void *)(fifo + first * size);
    ca48:	1d27      	adds	r7, r4, #4
    ca4a:	fb02 7203 	mla	r2, r2, r3, r7
	while (next) {
    ca4e:	b31a      	cbz	r2, ca98 <ull_prepare_dequeue+0x60>
			mfy.param = next;
    ca50:	f8df 9088 	ldr.w	r9, [pc, #136]	; cadc <ull_prepare_dequeue+0xa4>
			LL_ASSERT(!ret);
    ca54:	f8df b090 	ldr.w	fp, [pc, #144]	; cae8 <ull_prepare_dequeue+0xb0>
    ca58:	f8df a090 	ldr.w	sl, [pc, #144]	; caec <ull_prepare_dequeue+0xb4>
    ca5c:	4680      	mov	r8, r0
		uint8_t is_aborted = next->is_aborted;
    ca5e:	7f13      	ldrb	r3, [r2, #28]
		if (!is_aborted) {
    ca60:	0799      	lsls	r1, r3, #30
		uint8_t is_aborted = next->is_aborted;
    ca62:	f3c3 0540 	ubfx	r5, r3, #1, #1
		uint8_t is_resume = next->is_resume;
    ca66:	f003 0601 	and.w	r6, r3, #1
		if (!is_aborted) {
    ca6a:	d517      	bpl.n	ca9c <ull_prepare_dequeue+0x64>
		MFIFO_DEQUEUE(prep);
    ca6c:	78e1      	ldrb	r1, [r4, #3]
	uint8_t _first = *first; /* Copy read-index */
    ca6e:	78a3      	ldrb	r3, [r4, #2]
    ca70:	7822      	ldrb	r2, [r4, #0]
    ca72:	7860      	ldrb	r0, [r4, #1]
	if (_first == last) {
    ca74:	4299      	cmp	r1, r3
    ca76:	d00f      	beq.n	ca98 <ull_prepare_dequeue+0x60>
	_first += 1U;
    ca78:	3301      	adds	r3, #1
    ca7a:	b2db      	uxtb	r3, r3
	if (_first == count) {
    ca7c:	4298      	cmp	r0, r3
    ca7e:	d025      	beq.n	cacc <ull_prepare_dequeue+0x94>
	if (first == last) {
    ca80:	4299      	cmp	r1, r3
	*first = _first; /* Write back read-index */
    ca82:	70a3      	strb	r3, [r4, #2]
	if (first == last) {
    ca84:	d008      	beq.n	ca98 <ull_prepare_dequeue+0x60>
	return (void *)(fifo + first * size);
    ca86:	fb03 7202 	mla	r2, r3, r2, r7
		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
    ca8a:	b12a      	cbz	r2, ca98 <ull_prepare_dequeue+0x60>
    ca8c:	2d00      	cmp	r5, #0
    ca8e:	d1e6      	bne.n	ca5e <ull_prepare_dequeue+0x26>
    ca90:	b116      	cbz	r6, ca98 <ull_prepare_dequeue+0x60>
    ca92:	7f13      	ldrb	r3, [r2, #28]
    ca94:	07db      	lsls	r3, r3, #31
    ca96:	d5e2      	bpl.n	ca5e <ull_prepare_dequeue+0x26>
}
    ca98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mfy.param = next;
    ca9c:	f8c9 2008 	str.w	r2, [r9, #8]
			ret = mayfly_enqueue(caller_id, TICKER_USER_ID_LLL, 0,
    caa0:	4b0e      	ldr	r3, [pc, #56]	; (cadc <ull_prepare_dequeue+0xa4>)
    caa2:	462a      	mov	r2, r5
    caa4:	4629      	mov	r1, r5
    caa6:	4640      	mov	r0, r8
    caa8:	f7fb fe1a 	bl	86e0 <mayfly_enqueue>
			LL_ASSERT(!ret);
    caac:	2800      	cmp	r0, #0
    caae:	d0dd      	beq.n	ca6c <ull_prepare_dequeue+0x34>
    cab0:	480b      	ldr	r0, [pc, #44]	; (cae0 <ull_prepare_dequeue+0xa8>)
    cab2:	f240 6381 	movw	r3, #1665	; 0x681
    cab6:	465a      	mov	r2, fp
    cab8:	4651      	mov	r1, sl
    caba:	f009 f941 	bl	15d40 <printk>
    cabe:	4040      	eors	r0, r0
    cac0:	f380 8811 	msr	BASEPRI, r0
    cac4:	f04f 0003 	mov.w	r0, #3
    cac8:	df02      	svc	2
    caca:	e7cf      	b.n	ca6c <ull_prepare_dequeue+0x34>
	*first = _first; /* Write back read-index */
    cacc:	2300      	movs	r3, #0
    cace:	70a3      	strb	r3, [r4, #2]
	if (first == last) {
    cad0:	2900      	cmp	r1, #0
    cad2:	d0e1      	beq.n	ca98 <ull_prepare_dequeue+0x60>
	return (void *)(fifo + first * size);
    cad4:	4a03      	ldr	r2, [pc, #12]	; (cae4 <ull_prepare_dequeue+0xac>)
    cad6:	e7d9      	b.n	ca8c <ull_prepare_dequeue+0x54>
    cad8:	2000023c 	.word	0x2000023c
    cadc:	200003a4 	.word	0x200003a4
    cae0:	000199cc 	.word	0x000199cc
    cae4:	20000240 	.word	0x20000240
    cae8:	00019af4 	.word	0x00019af4
    caec:	00019c10 	.word	0x00019c10

0000caf0 <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
    caf0:	4b06      	ldr	r3, [pc, #24]	; (cb0c <ull_event_done_extra_get+0x1c>)
    caf2:	7899      	ldrb	r1, [r3, #2]
	if (first == last) {
    caf4:	78d8      	ldrb	r0, [r3, #3]
    caf6:	781a      	ldrb	r2, [r3, #0]
    caf8:	4288      	cmp	r0, r1
    cafa:	d005      	beq.n	cb08 <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
    cafc:	fb01 3302 	mla	r3, r1, r2, r3
    cb00:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
    cb02:	b110      	cbz	r0, cb0a <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
    cb04:	3020      	adds	r0, #32
    cb06:	4770      	bx	lr
		return NULL;
    cb08:	2000      	movs	r0, #0
}
    cb0a:	4770      	bx	lr
    cb0c:	200001fc 	.word	0x200001fc

0000cb10 <ull_event_done>:
{
    cb10:	b570      	push	{r4, r5, r6, lr}
	evdone = MFIFO_DEQUEUE(done);
    cb12:	4a13      	ldr	r2, [pc, #76]	; (cb60 <ull_event_done+0x50>)
	uint8_t _first = *first; /* Copy read-index */
    cb14:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
    cb16:	78d5      	ldrb	r5, [r2, #3]
    cb18:	7814      	ldrb	r4, [r2, #0]
    cb1a:	7856      	ldrb	r6, [r2, #1]
    cb1c:	429d      	cmp	r5, r3
    cb1e:	d01c      	beq.n	cb5a <ull_event_done+0x4a>
	mem = *((void **)(fifo + _first * size));
    cb20:	fb03 2404 	mla	r4, r3, r4, r2
	_first += 1U;
    cb24:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
    cb26:	6864      	ldr	r4, [r4, #4]
	_first += 1U;
    cb28:	b2db      	uxtb	r3, r3
		_first = 0U;
    cb2a:	429e      	cmp	r6, r3
    cb2c:	bf08      	it	eq
    cb2e:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
    cb30:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
    cb32:	b184      	cbz	r4, cb56 <ull_event_done+0x46>
    cb34:	4601      	mov	r1, r0
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
    cb36:	2302      	movs	r3, #2
	evdone->hdr.link = NULL;
    cb38:	2500      	movs	r5, #0
	link = evdone->hdr.link;
    cb3a:	6820      	ldr	r0, [r4, #0]
	memq_enqueue(link, done, &memq_ull_done.tail);
    cb3c:	4a09      	ldr	r2, [pc, #36]	; (cb64 <ull_event_done+0x54>)
	evdone->param = param;
    cb3e:	61e1      	str	r1, [r4, #28]
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
    cb40:	7123      	strb	r3, [r4, #4]
	memq_enqueue(link, done, &memq_ull_done.tail);
    cb42:	4621      	mov	r1, r4
	evdone->hdr.link = NULL;
    cb44:	6025      	str	r5, [r4, #0]
	memq_enqueue(link, done, &memq_ull_done.tail);
    cb46:	f7fb fd57 	bl	85f8 <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
    cb4a:	2201      	movs	r2, #1
    cb4c:	4b06      	ldr	r3, [pc, #24]	; (cb68 <ull_event_done+0x58>)
    cb4e:	4628      	mov	r0, r5
    cb50:	4611      	mov	r1, r2
    cb52:	f7fb fdc5 	bl	86e0 <mayfly_enqueue>
}
    cb56:	4620      	mov	r0, r4
    cb58:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
    cb5a:	2400      	movs	r4, #0
    cb5c:	e7fb      	b.n	cb56 <ull_event_done+0x46>
    cb5e:	bf00      	nop
    cb60:	200001fc 	.word	0x200001fc
    cb64:	20001630 	.word	0x20001630
    cb68:	20000394 	.word	0x20000394

0000cb6c <lll_prepare>:
 *	   -EINPROGRESS: Event already in progress and prepare was queued
 */
int lll_prepare(lll_is_abort_cb_t is_abort_cb, lll_abort_cb_t abort_cb,
		lll_prepare_cb_t prepare_cb, int8_t event_prio,
		struct lll_prepare_param *prepare_param)
{
    cb6c:	b500      	push	{lr}
    cb6e:	b083      	sub	sp, #12
	}

	prepare_param->prio = prio;
#endif /* CONFIG_BT_CTLR_JIT_SCHEDULING */

	return lll_prepare_resolve(is_abort_cb, abort_cb, prepare_cb,
    cb70:	2300      	movs	r3, #0
    cb72:	e9cd 3300 	strd	r3, r3, [sp]
    cb76:	9b04      	ldr	r3, [sp, #16]
    cb78:	f004 ff3a 	bl	119f0 <lll_prepare_resolve>
				   prepare_param, 0, 0);
}
    cb7c:	b003      	add	sp, #12
    cb7e:	f85d fb04 	ldr.w	pc, [sp], #4
    cb82:	bf00      	nop

0000cb84 <lll_resume>:

void lll_resume(void *param)
{
    cb84:	b510      	push	{r4, lr}
    cb86:	4603      	mov	r3, r0
	int ret;

	next = param;
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
				  next->prepare_cb, &next->prepare_param,
				  next->is_resume, 1);
    cb88:	7f00      	ldrb	r0, [r0, #28]
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
    cb8a:	691a      	ldr	r2, [r3, #16]
    cb8c:	6999      	ldr	r1, [r3, #24]
{
    cb8e:	b082      	sub	sp, #8
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
    cb90:	2401      	movs	r4, #1
    cb92:	4020      	ands	r0, r4
    cb94:	9401      	str	r4, [sp, #4]
    cb96:	9000      	str	r0, [sp, #0]
    cb98:	6958      	ldr	r0, [r3, #20]
    cb9a:	f004 ff29 	bl	119f0 <lll_prepare_resolve>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
    cb9e:	b108      	cbz	r0, cba4 <lll_resume+0x20>
    cba0:	3044      	adds	r0, #68	; 0x44
    cba2:	d101      	bne.n	cba8 <lll_resume+0x24>
}
    cba4:	b002      	add	sp, #8
    cba6:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret || ret == -EINPROGRESS);
    cba8:	4a06      	ldr	r2, [pc, #24]	; (cbc4 <lll_resume+0x40>)
    cbaa:	4907      	ldr	r1, [pc, #28]	; (cbc8 <lll_resume+0x44>)
    cbac:	4807      	ldr	r0, [pc, #28]	; (cbcc <lll_resume+0x48>)
    cbae:	234f      	movs	r3, #79	; 0x4f
    cbb0:	f009 f8c6 	bl	15d40 <printk>
    cbb4:	4040      	eors	r0, r0
    cbb6:	f380 8811 	msr	BASEPRI, r0
    cbba:	f04f 0003 	mov.w	r0, #3
    cbbe:	df02      	svc	2
}
    cbc0:	b002      	add	sp, #8
    cbc2:	bd10      	pop	{r4, pc}
    cbc4:	00019c38 	.word	0x00019c38
    cbc8:	00019c7c 	.word	0x00019c7c
    cbcc:	000199cc 	.word	0x000199cc

0000cbd0 <ticker_cb>:
	return 0;
}

static void ticker_cb(uint32_t ticks_at_expire, uint32_t remainder,
		      uint16_t lazy, uint8_t force, void *param)
{
    cbd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cbd4:	9d08      	ldr	r5, [sp, #32]
	return ++hdr->ref;
    cbd6:	7c2c      	ldrb	r4, [r5, #16]
    cbd8:	3401      	adds	r4, #1
    cbda:	b2e4      	uxtb	r4, r4
    cbdc:	742c      	strb	r4, [r5, #16]
    cbde:	4681      	mov	r9, r0
    cbe0:	4688      	mov	r8, r1
    cbe2:	4617      	mov	r7, r2
    cbe4:	461e      	mov	r6, r3
	uint8_t ref;

	DEBUG_RADIO_PREPARE_O(1);

	scan = param;
	lll = &scan->lll;
    cbe6:	351c      	adds	r5, #28
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	/* Increment prepare reference count */
	ref = ull_ref_inc(&scan->ull);
	LL_ASSERT(ref);
    cbe8:	b18c      	cbz	r4, cc0e <ticker_cb+0x3e>

	/* Append timing parameters */
	p.ticks_at_expire = ticks_at_expire;
    cbea:	4c17      	ldr	r4, [pc, #92]	; (cc48 <ticker_cb+0x78>)
	p.remainder = remainder;
	p.lazy = lazy;
	p.param = lll;
	p.force = force;
	mfy.param = &p;
    cbec:	4b17      	ldr	r3, [pc, #92]	; (cc4c <ticker_cb+0x7c>)
	p.ticks_at_expire = ticks_at_expire;
    cbee:	f8c4 9000 	str.w	r9, [r4]

	/* Kick LLL prepare */
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
    cbf2:	2200      	movs	r2, #0
    cbf4:	4611      	mov	r1, r2
    cbf6:	2001      	movs	r0, #1
	mfy.param = &p;
    cbf8:	609c      	str	r4, [r3, #8]
	p.remainder = remainder;
    cbfa:	f8c4 8004 	str.w	r8, [r4, #4]
	p.lazy = lazy;
    cbfe:	8127      	strh	r7, [r4, #8]
	p.param = lll;
    cc00:	60e5      	str	r5, [r4, #12]
	p.force = force;
    cc02:	72a6      	strb	r6, [r4, #10]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
    cc04:	f7fb fd6c 	bl	86e0 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
    cc08:	b978      	cbnz	r0, cc2a <ticker_cb+0x5a>

	DEBUG_RADIO_PREPARE_O(1);
}
    cc0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(ref);
    cc0e:	4a10      	ldr	r2, [pc, #64]	; (cc50 <ticker_cb+0x80>)
    cc10:	4910      	ldr	r1, [pc, #64]	; (cc54 <ticker_cb+0x84>)
    cc12:	4811      	ldr	r0, [pc, #68]	; (cc58 <ticker_cb+0x88>)
    cc14:	f44f 7332 	mov.w	r3, #712	; 0x2c8
    cc18:	f009 f892 	bl	15d40 <printk>
    cc1c:	4040      	eors	r0, r0
    cc1e:	f380 8811 	msr	BASEPRI, r0
    cc22:	f04f 0003 	mov.w	r0, #3
    cc26:	df02      	svc	2
    cc28:	e7df      	b.n	cbea <ticker_cb+0x1a>
	LL_ASSERT(!ret);
    cc2a:	4a09      	ldr	r2, [pc, #36]	; (cc50 <ticker_cb+0x80>)
    cc2c:	490b      	ldr	r1, [pc, #44]	; (cc5c <ticker_cb+0x8c>)
    cc2e:	480a      	ldr	r0, [pc, #40]	; (cc58 <ticker_cb+0x88>)
    cc30:	f240 23d5 	movw	r3, #725	; 0x2d5
    cc34:	f009 f884 	bl	15d40 <printk>
    cc38:	4040      	eors	r0, r0
    cc3a:	f380 8811 	msr	BASEPRI, r0
    cc3e:	f04f 0003 	mov.w	r0, #3
    cc42:	df02      	svc	2
}
    cc44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    cc48:	200019f8 	.word	0x200019f8
    cc4c:	200003b4 	.word	0x200003b4
    cc50:	00019c90 	.word	0x00019c90
    cc54:	00019cd0 	.word	0x00019cd0
    cc58:	000199cc 	.word	0x000199cc
    cc5c:	00019c10 	.word	0x00019c10

0000cc60 <ull_scan_init>:
}
    cc60:	2000      	movs	r0, #0
    cc62:	4770      	bx	lr

0000cc64 <ull_scan_disable>:
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_BASE + handle,
    cc64:	3002      	adds	r0, #2
{
    cc66:	b508      	push	{r3, lr}
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_BASE + handle,
    cc68:	b2c0      	uxtb	r0, r0
    cc6a:	f101 021c 	add.w	r2, r1, #28
    cc6e:	f7ff fdf5 	bl	c85c <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
    cc72:	b110      	cbz	r0, cc7a <ull_scan_disable+0x16>
    cc74:	3045      	adds	r0, #69	; 0x45
    cc76:	d101      	bne.n	cc7c <ull_scan_disable+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
    cc78:	200c      	movs	r0, #12
}
    cc7a:	bd08      	pop	{r3, pc}
	LL_ASSERT(err == 0 || err == -EALREADY);
    cc7c:	4a07      	ldr	r2, [pc, #28]	; (cc9c <ull_scan_disable+0x38>)
    cc7e:	4908      	ldr	r1, [pc, #32]	; (cca0 <ull_scan_disable+0x3c>)
    cc80:	4808      	ldr	r0, [pc, #32]	; (cca4 <ull_scan_disable+0x40>)
    cc82:	f44f 73e5 	mov.w	r3, #458	; 0x1ca
    cc86:	f009 f85b 	bl	15d40 <printk>
    cc8a:	4040      	eors	r0, r0
    cc8c:	f380 8811 	msr	BASEPRI, r0
    cc90:	f04f 0003 	mov.w	r0, #3
    cc94:	df02      	svc	2
		return BT_HCI_ERR_CMD_DISALLOWED;
    cc96:	200c      	movs	r0, #12
}
    cc98:	bd08      	pop	{r3, pc}
    cc9a:	bf00      	nop
    cc9c:	00019c90 	.word	0x00019c90
    cca0:	00019cd4 	.word	0x00019cd4
    cca4:	000199cc 	.word	0x000199cc

0000cca8 <disable.constprop.0>:
	ll_rx_put(rx_hdr->link, rx_hdr);
	ll_rx_sched();
}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

static uint8_t disable(uint8_t handle)
    cca8:	b538      	push	{r3, r4, r5, lr}
	if (!scan || !scan->is_enabled) {
    ccaa:	4c0d      	ldr	r4, [pc, #52]	; (cce0 <disable.constprop.0+0x38>)
    ccac:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    ccb0:	07db      	lsls	r3, r3, #31
    ccb2:	d501      	bpl.n	ccb8 <disable.constprop.0+0x10>
	if (!scan) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

#if defined(CONFIG_BT_CENTRAL)
	if (scan->lll.conn) {
    ccb4:	6a20      	ldr	r0, [r4, #32]
    ccb6:	b110      	cbz	r0, ccbe <disable.constprop.0+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
    ccb8:	250c      	movs	r5, #12
		ull_filter_adv_scan_state_cb(0);
	}
#endif

	return 0;
}
    ccba:	4628      	mov	r0, r5
    ccbc:	bd38      	pop	{r3, r4, r5, pc}
	ret = ull_scan_disable(handle, scan);
    ccbe:	4621      	mov	r1, r4
    ccc0:	f7ff ffd0 	bl	cc64 <ull_scan_disable>
	if (ret) {
    ccc4:	4605      	mov	r5, r0
    ccc6:	2800      	cmp	r0, #0
    ccc8:	d1f7      	bne.n	ccba <disable.constprop.0+0x12>
	scan->is_enabled = 0U;
    ccca:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    ccce:	f360 0300 	bfi	r3, r0, #0, #1
    ccd2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		ull_filter_adv_scan_state_cb(0);
    ccd6:	f003 fd77 	bl	107c8 <ull_filter_adv_scan_state_cb>
}
    ccda:	4628      	mov	r0, r5
    ccdc:	bd38      	pop	{r3, r4, r5, pc}
    ccde:	bf00      	nop
    cce0:	200019b0 	.word	0x200019b0

0000cce4 <ll_scan_enable>:
	if (!enable) {
    cce4:	b380      	cbz	r0, cd48 <ll_scan_enable+0x64>
{
    cce6:	b538      	push	{r3, r4, r5, lr}
	if (!scan || scan->is_enabled) {
    cce8:	4c1f      	ldr	r4, [pc, #124]	; (cd68 <ll_scan_enable+0x84>)
    ccea:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    ccee:	f013 0101 	ands.w	r1, r3, #1
    ccf2:	d135      	bne.n	cd60 <ll_scan_enable+0x7c>
	    (!is_coded_phy && (scan->own_addr_type & 0x1))) {
    ccf4:	079a      	lsls	r2, r3, #30
    ccf6:	f3c3 0541 	ubfx	r5, r3, #1, #2
    ccfa:	d50a      	bpl.n	cd12 <ll_scan_enable+0x2e>
		if (!mem_nz(ll_addr_get(1, NULL), BDADDR_SIZE)) {
    ccfc:	2001      	movs	r0, #1
    ccfe:	f7fd f943 	bl	9f88 <ll_addr_get>
    cd02:	2106      	movs	r1, #6
    cd04:	f7fb fc5e 	bl	85c4 <mem_nz>
    cd08:	b360      	cbz	r0, cd64 <ll_scan_enable+0x80>
    cd0a:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
    cd0e:	f3c5 0541 	ubfx	r5, r5, #1, #2
	ull_filter_scan_update(lll->filter_policy);
    cd12:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    cd16:	f3c0 00c1 	ubfx	r0, r0, #3, #2
    cd1a:	f003 fd7b 	bl	10814 <ull_filter_scan_update>
	lll->rpa_gen = 0;
    cd1e:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
	if ((lll->type & 0x1) &&
    cd22:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
	lll->rpa_gen = 0;
    cd26:	f36f 0300 	bfc	r3, #0, #1
	lll->rl_idx = FILTER_IDX_NONE;
    cd2a:	21ff      	movs	r1, #255	; 0xff
	lll->rpa_gen = 0;
    cd2c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	if ((lll->type & 0x1) &&
    cd30:	0693      	lsls	r3, r2, #26
	lll->rl_idx = FILTER_IDX_NONE;
    cd32:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
	if ((lll->type & 0x1) &&
    cd36:	d502      	bpl.n	cd3e <ll_scan_enable+0x5a>
    cd38:	3d02      	subs	r5, #2
    cd3a:	2d01      	cmp	r5, #1
    cd3c:	d906      	bls.n	cd4c <ll_scan_enable+0x68>
}
    cd3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		err = ull_scan_enable(scan);
    cd42:	4809      	ldr	r0, [pc, #36]	; (cd68 <ll_scan_enable+0x84>)
    cd44:	f7f3 bbb8 	b.w	4b8 <ull_scan_enable>
		err = disable(SCAN_HANDLE_1M);
    cd48:	f7ff bfae 	b.w	cca8 <disable.constprop.0>
		ull_filter_rpa_update(false);
    cd4c:	2000      	movs	r0, #0
    cd4e:	f003 fd7b 	bl	10848 <ull_filter_rpa_update>
		lll->rpa_gen = 1;
    cd52:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    cd56:	f043 0301 	orr.w	r3, r3, #1
    cd5a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    cd5e:	e7ee      	b.n	cd3e <ll_scan_enable+0x5a>
			return BT_HCI_ERR_CMD_DISALLOWED;
    cd60:	200c      	movs	r0, #12
}
    cd62:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_INVALID_PARAM;
    cd64:	2012      	movs	r0, #18
}
    cd66:	bd38      	pop	{r3, r4, r5, pc}
    cd68:	200019b0 	.word	0x200019b0

0000cd6c <ull_scan_reset>:
{
    cd6c:	b508      	push	{r3, lr}
		(void)disable(handle);
    cd6e:	f7ff ff9b 	bl	cca8 <disable.constprop.0>
}
    cd72:	2000      	movs	r0, #0
    cd74:	bd08      	pop	{r3, pc}
    cd76:	bf00      	nop

0000cd78 <ull_scan_handle_get>:
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    cd78:	4a03      	ldr	r2, [pc, #12]	; (cd88 <ull_scan_handle_get+0x10>)
    cd7a:	4b04      	ldr	r3, [pc, #16]	; (cd8c <ull_scan_handle_get+0x14>)
    cd7c:	1a80      	subs	r0, r0, r2
    cd7e:	fba3 3000 	umull	r3, r0, r3, r0
}
    cd82:	f3c0 1007 	ubfx	r0, r0, #4, #8
    cd86:	4770      	bx	lr
    cd88:	200019b0 	.word	0x200019b0
    cd8c:	38e38e39 	.word	0x38e38e39

0000cd90 <ull_scan_lll_handle_get>:
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    cd90:	4a04      	ldr	r2, [pc, #16]	; (cda4 <ull_scan_lll_handle_get+0x14>)
    cd92:	6800      	ldr	r0, [r0, #0]
    cd94:	4b04      	ldr	r3, [pc, #16]	; (cda8 <ull_scan_lll_handle_get+0x18>)
    cd96:	1a80      	subs	r0, r0, r2
    cd98:	fba3 3000 	umull	r3, r0, r3, r0
}
    cd9c:	f3c0 1007 	ubfx	r0, r0, #4, #8
    cda0:	4770      	bx	lr
    cda2:	bf00      	nop
    cda4:	200019b0 	.word	0x200019b0
    cda8:	38e38e39 	.word	0x38e38e39

0000cdac <ull_scan_is_enabled_get>:
	if (handle >= BT_CTLR_SCAN_SET) {
    cdac:	b938      	cbnz	r0, cdbe <ull_scan_is_enabled_get+0x12>
	if (!scan || !scan->is_enabled) {
    cdae:	4805      	ldr	r0, [pc, #20]	; (cdc4 <ull_scan_is_enabled_get+0x18>)
    cdb0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
	return &ll_scan[handle];
    cdb4:	f013 0f01 	tst.w	r3, #1
    cdb8:	bf08      	it	eq
    cdba:	2000      	moveq	r0, #0
    cdbc:	4770      	bx	lr
		return NULL;
    cdbe:	2000      	movs	r0, #0
}
    cdc0:	4770      	bx	lr
    cdc2:	bf00      	nop
    cdc4:	200019b0 	.word	0x200019b0

0000cdc8 <ull_scan_is_disabled_get>:
	if (!scan || scan->is_enabled) {
    cdc8:	4a04      	ldr	r2, [pc, #16]	; (cddc <ull_scan_is_disabled_get+0x14>)
    cdca:	f892 3044 	ldrb.w	r3, [r2, #68]	; 0x44
    cdce:	f003 0301 	and.w	r3, r3, #1
    cdd2:	4303      	orrs	r3, r0
}
    cdd4:	bf0c      	ite	eq
    cdd6:	4610      	moveq	r0, r2
    cdd8:	2000      	movne	r0, #0
    cdda:	4770      	bx	lr
    cddc:	200019b0 	.word	0x200019b0

0000cde0 <ull_scan_is_enabled>:
	if (handle >= BT_CTLR_SCAN_SET) {
    cde0:	b990      	cbnz	r0, ce08 <ull_scan_is_enabled+0x28>
	if (!scan || !scan->is_enabled) {
    cde2:	4a0a      	ldr	r2, [pc, #40]	; (ce0c <ull_scan_is_enabled+0x2c>)
    cde4:	f892 3044 	ldrb.w	r3, [r2, #68]	; 0x44
    cde8:	f013 0001 	ands.w	r0, r3, #1
    cdec:	d00d      	beq.n	ce0a <ull_scan_is_enabled+0x2a>
	return (((uint32_t)scan->is_enabled << scan->lll.type) |
    cdee:	f892 0032 	ldrb.w	r0, [r2, #50]	; 0x32
		(scan->lll.conn ? BIT(2) : 0) |
    cdf2:	6a12      	ldr	r2, [r2, #32]
	return (((uint32_t)scan->is_enabled << scan->lll.type) |
    cdf4:	f003 0301 	and.w	r3, r3, #1
    cdf8:	f3c0 1040 	ubfx	r0, r0, #5, #1
    cdfc:	fa03 f000 	lsl.w	r0, r3, r0
		(scan->lll.conn ? BIT(2) : 0) |
    ce00:	b11a      	cbz	r2, ce0a <ull_scan_is_enabled+0x2a>
    ce02:	f040 0004 	orr.w	r0, r0, #4
    ce06:	4770      	bx	lr
		return 0;
    ce08:	2000      	movs	r0, #0
}
    ce0a:	4770      	bx	lr
    ce0c:	200019b0 	.word	0x200019b0

0000ce10 <ull_scan_filter_pol_get>:
	if (handle >= BT_CTLR_SCAN_SET) {
    ce10:	b950      	cbnz	r0, ce28 <ull_scan_filter_pol_get+0x18>
	if (!scan || !scan->is_enabled) {
    ce12:	4b06      	ldr	r3, [pc, #24]	; (ce2c <ull_scan_filter_pol_get+0x1c>)
    ce14:	f893 0044 	ldrb.w	r0, [r3, #68]	; 0x44
    ce18:	f010 0001 	ands.w	r0, r0, #1
    ce1c:	d005      	beq.n	ce2a <ull_scan_filter_pol_get+0x1a>
	return scan->lll.filter_policy;
    ce1e:	f893 0032 	ldrb.w	r0, [r3, #50]	; 0x32
    ce22:	f3c0 00c1 	ubfx	r0, r0, #3, #2
    ce26:	4770      	bx	lr
		return 0;
    ce28:	2000      	movs	r0, #0
}
    ce2a:	4770      	bx	lr
    ce2c:	200019b0 	.word	0x200019b0

0000ce30 <tx_ull_dequeue>:
{
    ce30:	b410      	push	{r4}
    ce32:	e9d0 2467 	ldrd	r2, r4, [r0, #412]	; 0x19c
    ce36:	4603      	mov	r3, r0
    ce38:	4608      	mov	r0, r1
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
    ce3a:	b164      	cbz	r4, ce56 <tx_ull_dequeue+0x26>
	if (conn->tx_head == conn->tx_ctrl) {
    ce3c:	4294      	cmp	r4, r2
    ce3e:	d027      	beq.n	ce90 <tx_ull_dequeue+0x60>
		if (conn->tx_head == conn->tx_data) {
    ce40:	f8d3 11a8 	ldr.w	r1, [r3, #424]	; 0x1a8
    ce44:	4291      	cmp	r1, r2
    ce46:	d018      	beq.n	ce7a <tx_ull_dequeue+0x4a>
		conn->tx_head = conn->tx_head->next;
    ce48:	6812      	ldr	r2, [r2, #0]
    ce4a:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
		tx->next = NULL;
    ce4e:	2300      	movs	r3, #0
}
    ce50:	bc10      	pop	{r4}
		tx->next = NULL;
    ce52:	6003      	str	r3, [r0, #0]
}
    ce54:	4770      	bx	lr
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
    ce56:	f8d3 11a8 	ldr.w	r1, [r3, #424]	; 0x1a8
    ce5a:	4291      	cmp	r1, r2
    ce5c:	d023      	beq.n	cea6 <tx_ull_dequeue+0x76>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    ce5e:	7911      	ldrb	r1, [r2, #4]
    ce60:	f001 0103 	and.w	r1, r1, #3
    ce64:	2903      	cmp	r1, #3
    ce66:	d00d      	beq.n	ce84 <tx_ull_dequeue+0x54>
		conn->tx_head = conn->tx_head->next;
    ce68:	6812      	ldr	r2, [r2, #0]
    ce6a:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
			conn->tx_ctrl = NULL;
    ce6e:	2200      	movs	r2, #0
			conn->tx_ctrl_last = NULL;
    ce70:	e9c3 2268 	strd	r2, r2, [r3, #416]	; 0x1a0
}
    ce74:	bc10      	pop	{r4}
		tx->next = tx;
    ce76:	6000      	str	r0, [r0, #0]
}
    ce78:	4770      	bx	lr
    ce7a:	4611      	mov	r1, r2
			conn->tx_data = conn->tx_data->next;
    ce7c:	6809      	ldr	r1, [r1, #0]
    ce7e:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
    ce82:	e7e1      	b.n	ce48 <tx_ull_dequeue+0x18>
	    ((pdu_data_tx->llctrl.opcode !=
    ce84:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    ce86:	2903      	cmp	r1, #3
    ce88:	d0de      	beq.n	ce48 <tx_ull_dequeue+0x18>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    ce8a:	290a      	cmp	r1, #10
    ce8c:	d1ec      	bne.n	ce68 <tx_ull_dequeue+0x38>
    ce8e:	e7db      	b.n	ce48 <tx_ull_dequeue+0x18>
    ce90:	f8d3 11a4 	ldr.w	r1, [r3, #420]	; 0x1a4
		conn->tx_head = conn->tx_head->next;
    ce94:	6812      	ldr	r2, [r2, #0]
    ce96:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
    ce9a:	42a1      	cmp	r1, r4
			conn->tx_ctrl = conn->tx_head;
    ce9c:	bf18      	it	ne
    ce9e:	f8c3 21a0 	strne.w	r2, [r3, #416]	; 0x1a0
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
    cea2:	d1e7      	bne.n	ce74 <tx_ull_dequeue+0x44>
    cea4:	e7e3      	b.n	ce6e <tx_ull_dequeue+0x3e>
	if (conn->tx_head == conn->tx_ctrl) {
    cea6:	2a00      	cmp	r2, #0
    cea8:	d1e8      	bne.n	ce7c <tx_ull_dequeue+0x4c>
    ceaa:	f8d3 11a4 	ldr.w	r1, [r3, #420]	; 0x1a4
    ceae:	4614      	mov	r4, r2
    ceb0:	e7f0      	b.n	ce94 <tx_ull_dequeue+0x64>
    ceb2:	bf00      	nop

0000ceb4 <init_reset>:
{
    ceb4:	b538      	push	{r3, r4, r5, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
    ceb6:	4813      	ldr	r0, [pc, #76]	; (cf04 <init_reset+0x50>)
    ceb8:	4b13      	ldr	r3, [pc, #76]	; (cf08 <init_reset+0x54>)
    ceba:	2201      	movs	r2, #1
    cebc:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    cec0:	f7fb fb08 	bl	84d4 <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_CTLR_TX_BUFFERS,
    cec4:	4b11      	ldr	r3, [pc, #68]	; (cf0c <init_reset+0x58>)
    cec6:	2203      	movs	r2, #3
    cec8:	1d18      	adds	r0, r3, #4
    ceca:	2124      	movs	r1, #36	; 0x24
    cecc:	f7fb fb02 	bl	84d4 <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
    ced0:	4b0f      	ldr	r3, [pc, #60]	; (cf10 <init_reset+0x5c>)
    ced2:	2204      	movs	r2, #4
    ced4:	1898      	adds	r0, r3, r2
    ced6:	212c      	movs	r1, #44	; 0x2c
    ced8:	f7fb fafc 	bl	84d4 <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
    cedc:	4b0d      	ldr	r3, [pc, #52]	; (cf14 <init_reset+0x60>)
    cede:	2207      	movs	r2, #7
    cee0:	1d18      	adds	r0, r3, #4
    cee2:	2108      	movs	r1, #8
    cee4:	f7fb faf6 	bl	84d4 <mem_init>
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    cee8:	4b0b      	ldr	r3, [pc, #44]	; (cf18 <init_reset+0x64>)
	default_phy_tx |= PHY_2M;
    ceea:	490c      	ldr	r1, [pc, #48]	; (cf1c <init_reset+0x68>)
	default_phy_rx |= PHY_2M;
    ceec:	4a0c      	ldr	r2, [pc, #48]	; (cf20 <init_reset+0x6c>)
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    ceee:	480d      	ldr	r0, [pc, #52]	; (cf24 <init_reset+0x70>)
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    cef0:	251b      	movs	r5, #27
    cef2:	801d      	strh	r5, [r3, #0]
	default_phy_tx |= PHY_2M;
    cef4:	2303      	movs	r3, #3
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    cef6:	f44f 74a4 	mov.w	r4, #328	; 0x148
	default_phy_tx |= PHY_2M;
    cefa:	700b      	strb	r3, [r1, #0]
	default_phy_rx |= PHY_2M;
    cefc:	7013      	strb	r3, [r2, #0]
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    cefe:	8004      	strh	r4, [r0, #0]
}
    cf00:	2000      	movs	r0, #0
    cf02:	bd38      	pop	{r3, r4, r5, pc}
    cf04:	20000be0 	.word	0x20000be0
    cf08:	20001a08 	.word	0x20001a08
    cf0c:	20001a20 	.word	0x20001a20
    cf10:	20001a90 	.word	0x20001a90
    cf14:	20001b44 	.word	0x20001b44
    cf18:	20002234 	.word	0x20002234
    cf1c:	2000224d 	.word	0x2000224d
    cf20:	2000224c 	.word	0x2000224c
    cf24:	20002236 	.word	0x20002236

0000cf28 <ctrl_tx_pause_enqueue>:
{
    cf28:	b538      	push	{r3, r4, r5, lr}
    cf2a:	4604      	mov	r4, r0
    cf2c:	e9d0 3067 	ldrd	r3, r0, [r0, #412]	; 0x19c
    cf30:	460d      	mov	r5, r1
	if (
    cf32:	b11b      	cbz	r3, cf3c <ctrl_tx_pause_enqueue+0x14>
	    !conn->llcp_enc.pause_tx &&
    cf34:	f894 113e 	ldrb.w	r1, [r4, #318]	; 0x13e
	    conn->tx_head &&
    cf38:	0789      	lsls	r1, r1, #30
    cf3a:	d50b      	bpl.n	cf54 <ctrl_tx_pause_enqueue+0x2c>
		if (!conn->tx_ctrl) {
    cf3c:	b1e0      	cbz	r0, cf78 <ctrl_tx_pause_enqueue+0x50>
			LL_ASSERT(!pause);
    cf3e:	bb2a      	cbnz	r2, cf8c <ctrl_tx_pause_enqueue+0x64>
	tx->next = conn->tx_ctrl_last->next;
    cf40:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    cf44:	681a      	ldr	r2, [r3, #0]
    cf46:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
    cf48:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
    cf4a:	682b      	ldr	r3, [r5, #0]
    cf4c:	f8c4 51a4 	str.w	r5, [r4, #420]	; 0x1a4
	if (!tx->next) {
    cf50:	b17b      	cbz	r3, cf72 <ctrl_tx_pause_enqueue+0x4a>
}
    cf52:	bd38      	pop	{r3, r4, r5, pc}
	    !conn->llcp_phy.pause_tx &&
    cf54:	f894 1197 	ldrb.w	r1, [r4, #407]	; 0x197
    cf58:	07c9      	lsls	r1, r1, #31
    cf5a:	d4ef      	bmi.n	cf3c <ctrl_tx_pause_enqueue+0x14>
		if (conn->tx_head == conn->tx_data) {
    cf5c:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
    cf60:	428b      	cmp	r3, r1
    cf62:	d021      	beq.n	cfa8 <ctrl_tx_pause_enqueue+0x80>
		} else if (!conn->tx_ctrl) {
    cf64:	2800      	cmp	r0, #0
    cf66:	d02e      	beq.n	cfc6 <ctrl_tx_pause_enqueue+0x9e>
			LL_ASSERT(!pause);
    cf68:	2a00      	cmp	r2, #0
    cf6a:	d0e9      	beq.n	cf40 <ctrl_tx_pause_enqueue+0x18>
    cf6c:	f640 0359 	movw	r3, #2137	; 0x859
    cf70:	e00e      	b.n	cf90 <ctrl_tx_pause_enqueue+0x68>
		conn->tx_data_last = tx;
    cf72:	f8c4 51ac 	str.w	r5, [r4, #428]	; 0x1ac
}
    cf76:	bd38      	pop	{r3, r4, r5, pc}
			tx->next = conn->tx_head;
    cf78:	602b      	str	r3, [r5, #0]
			conn->tx_head = tx;
    cf7a:	f8c4 519c 	str.w	r5, [r4, #412]	; 0x19c
			if (!pause) {
    cf7e:	2a00      	cmp	r2, #0
    cf80:	d1e6      	bne.n	cf50 <ctrl_tx_pause_enqueue+0x28>
				conn->tx_ctrl_last = tx;
    cf82:	e9c4 5568 	strd	r5, r5, [r4, #416]	; 0x1a0
	if (!tx->next) {
    cf86:	2b00      	cmp	r3, #0
    cf88:	d1e3      	bne.n	cf52 <ctrl_tx_pause_enqueue+0x2a>
    cf8a:	e7f2      	b.n	cf72 <ctrl_tx_pause_enqueue+0x4a>
			LL_ASSERT(!pause);
    cf8c:	f640 036b 	movw	r3, #2155	; 0x86b
    cf90:	4a15      	ldr	r2, [pc, #84]	; (cfe8 <ctrl_tx_pause_enqueue+0xc0>)
    cf92:	4916      	ldr	r1, [pc, #88]	; (cfec <ctrl_tx_pause_enqueue+0xc4>)
    cf94:	4816      	ldr	r0, [pc, #88]	; (cff0 <ctrl_tx_pause_enqueue+0xc8>)
    cf96:	f008 fed3 	bl	15d40 <printk>
    cf9a:	4040      	eors	r0, r0
    cf9c:	f380 8811 	msr	BASEPRI, r0
    cfa0:	f04f 0003 	mov.w	r0, #3
    cfa4:	df02      	svc	2
    cfa6:	e7cb      	b.n	cf40 <ctrl_tx_pause_enqueue+0x18>
			conn->tx_data = conn->tx_data->next;
    cfa8:	6819      	ldr	r1, [r3, #0]
    cfaa:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    cfae:	2800      	cmp	r0, #0
    cfb0:	d1da      	bne.n	cf68 <ctrl_tx_pause_enqueue+0x40>
			tx->next = conn->tx_head->next;
    cfb2:	6819      	ldr	r1, [r3, #0]
    cfb4:	6029      	str	r1, [r5, #0]
			conn->tx_head->next = tx;
    cfb6:	601d      	str	r5, [r3, #0]
			if (!pause) {
    cfb8:	b90a      	cbnz	r2, cfbe <ctrl_tx_pause_enqueue+0x96>
				conn->tx_ctrl_last = tx;
    cfba:	e9c4 5568 	strd	r5, r5, [r4, #416]	; 0x1a0
    cfbe:	682b      	ldr	r3, [r5, #0]
	if (!tx->next) {
    cfc0:	2b00      	cmp	r3, #0
    cfc2:	d1c6      	bne.n	cf52 <ctrl_tx_pause_enqueue+0x2a>
    cfc4:	e7d5      	b.n	cf72 <ctrl_tx_pause_enqueue+0x4a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    cfc6:	7919      	ldrb	r1, [r3, #4]
    cfc8:	f001 0103 	and.w	r1, r1, #3
    cfcc:	2903      	cmp	r1, #3
    cfce:	d004      	beq.n	cfda <ctrl_tx_pause_enqueue+0xb2>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    cfd0:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
			LL_ASSERT(!pause);
    cfd4:	2a00      	cmp	r2, #0
    cfd6:	d0b3      	beq.n	cf40 <ctrl_tx_pause_enqueue+0x18>
    cfd8:	e7c8      	b.n	cf6c <ctrl_tx_pause_enqueue+0x44>
	    ((pdu_data_tx->llctrl.opcode !=
    cfda:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    cfdc:	2903      	cmp	r1, #3
    cfde:	d0e8      	beq.n	cfb2 <ctrl_tx_pause_enqueue+0x8a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    cfe0:	290a      	cmp	r1, #10
    cfe2:	d1f5      	bne.n	cfd0 <ctrl_tx_pause_enqueue+0xa8>
    cfe4:	e7e5      	b.n	cfb2 <ctrl_tx_pause_enqueue+0x8a>
    cfe6:	bf00      	nop
    cfe8:	00019cec 	.word	0x00019cec
    cfec:	00019d2c 	.word	0x00019d2c
    cff0:	000199cc 	.word	0x000199cc

0000cff4 <tx_lll_flush>:
{
    cff4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct ll_conn *conn = (void *)HDR_LLL2EVT(param);
    cff8:	f8d0 8000 	ldr.w	r8, [r0]
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    cffc:	4934      	ldr	r1, [pc, #208]	; (d0d0 <tx_lll_flush+0xdc>)
{
    cffe:	b083      	sub	sp, #12
    d000:	4605      	mov	r5, r0
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    d002:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
    d006:	4640      	mov	r0, r8
    d008:	f7fb fac8 	bl	859c <mem_index_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
    d00c:	f105 062c 	add.w	r6, r5, #44	; 0x2c
	lll_conn_flush(handle, lll);
    d010:	4629      	mov	r1, r5
    d012:	f005 f957 	bl	122c4 <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
    d016:	6b28      	ldr	r0, [r5, #48]	; 0x30
    d018:	4631      	mov	r1, r6
    d01a:	aa01      	add	r2, sp, #4
    d01c:	f7fb fafc 	bl	8618 <memq_dequeue>
	while (link) {
    d020:	b328      	cbz	r0, d06e <tx_lll_flush+0x7a>
    d022:	4c2c      	ldr	r4, [pc, #176]	; (d0d4 <tx_lll_flush+0xe0>)
		lll_tx->handle = 0xFFFF;
    d024:	f64f 77ff 	movw	r7, #65535	; 0xffff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    d028:	f104 0904 	add.w	r9, r4, #4
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
    d02c:	78e1      	ldrb	r1, [r4, #3]
	if (last == count) {
    d02e:	f894 c001 	ldrb.w	ip, [r4, #1]
    d032:	78a2      	ldrb	r2, [r4, #2]
	last = last + 1;
    d034:	1c4b      	adds	r3, r1, #1
    d036:	b2db      	uxtb	r3, r3
		last = 0U;
    d038:	459c      	cmp	ip, r3
    d03a:	bf08      	it	eq
    d03c:	2300      	moveq	r3, #0
	if (last == first) {
    d03e:	429a      	cmp	r2, r3
    d040:	d035      	beq.n	d0ae <tx_lll_flush+0xba>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    d042:	7822      	ldrb	r2, [r4, #0]
    d044:	fb12 f201 	smulbb	r2, r2, r1
		LL_ASSERT(lll_tx);
    d048:	eb19 0c02 	adds.w	ip, r9, r2
    d04c:	d02f      	beq.n	d0ae <tx_lll_flush+0xba>
		lll_tx->node = tx;
    d04e:	9901      	ldr	r1, [sp, #4]
		lll_tx->handle = 0xFFFF;
    d050:	f829 7002 	strh.w	r7, [r9, r2]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
    d054:	680a      	ldr	r2, [r1, #0]
		lll_tx->node = tx;
    d056:	f8cc 1004 	str.w	r1, [ip, #4]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
    d05a:	6002      	str	r2, [r0, #0]
		tx->next = link;
    d05c:	6008      	str	r0, [r1, #0]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
    d05e:	6b28      	ldr	r0, [r5, #48]	; 0x30
	*last = idx; /* Commit: Update write index */
    d060:	70e3      	strb	r3, [r4, #3]
    d062:	aa01      	add	r2, sp, #4
    d064:	4631      	mov	r1, r6
    d066:	f7fb fad7 	bl	8618 <memq_dequeue>
	while (link) {
    d06a:	2800      	cmp	r0, #0
    d06c:	d1de      	bne.n	d02c <tx_lll_flush+0x38>
	LL_ASSERT(rx->hdr.link);
    d06e:	f8d8 011c 	ldr.w	r0, [r8, #284]	; 0x11c
	rx = (void *)&conn->llcp_terminate.node_rx;
    d072:	f508 748e 	add.w	r4, r8, #284	; 0x11c
	LL_ASSERT(rx->hdr.link);
    d076:	b150      	cbz	r0, d08e <tx_lll_flush+0x9a>
	rx->hdr.link = NULL;
    d078:	2300      	movs	r3, #0
	ull_rx_put(link, rx);
    d07a:	4621      	mov	r1, r4
	rx->hdr.link = NULL;
    d07c:	f8c8 311c 	str.w	r3, [r8, #284]	; 0x11c
	ull_rx_put(link, rx);
    d080:	f7ff fc62 	bl	c948 <ull_rx_put>
	ull_rx_sched();
    d084:	f7ff fc70 	bl	c968 <ull_rx_sched>
}
    d088:	b003      	add	sp, #12
    d08a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(rx->hdr.link);
    d08e:	4a12      	ldr	r2, [pc, #72]	; (d0d8 <tx_lll_flush+0xe4>)
    d090:	4912      	ldr	r1, [pc, #72]	; (d0dc <tx_lll_flush+0xe8>)
    d092:	4813      	ldr	r0, [pc, #76]	; (d0e0 <tx_lll_flush+0xec>)
    d094:	f240 73c6 	movw	r3, #1990	; 0x7c6
    d098:	f008 fe52 	bl	15d40 <printk>
    d09c:	4040      	eors	r0, r0
    d09e:	f380 8811 	msr	BASEPRI, r0
    d0a2:	f04f 0003 	mov.w	r0, #3
    d0a6:	df02      	svc	2
    d0a8:	f8d8 011c 	ldr.w	r0, [r8, #284]	; 0x11c
    d0ac:	e7e4      	b.n	d078 <tx_lll_flush+0x84>
		LL_ASSERT(lll_tx);
    d0ae:	4a0a      	ldr	r2, [pc, #40]	; (d0d8 <tx_lll_flush+0xe4>)
    d0b0:	490c      	ldr	r1, [pc, #48]	; (d0e4 <tx_lll_flush+0xf0>)
    d0b2:	480b      	ldr	r0, [pc, #44]	; (d0e0 <tx_lll_flush+0xec>)
    d0b4:	f240 73b2 	movw	r3, #1970	; 0x7b2
    d0b8:	f008 fe42 	bl	15d40 <printk>
    d0bc:	4040      	eors	r0, r0
    d0be:	f380 8811 	msr	BASEPRI, r0
    d0c2:	f04f 0003 	mov.w	r0, #3
    d0c6:	df02      	svc	2
		lll_tx->handle = 0xFFFF;
    d0c8:	2300      	movs	r3, #0
    d0ca:	801b      	strh	r3, [r3, #0]
    d0cc:	deff      	udf	#255	; 0xff
    d0ce:	bf00      	nop
    d0d0:	20000be0 	.word	0x20000be0
    d0d4:	200003c4 	.word	0x200003c4
    d0d8:	00019cec 	.word	0x00019cec
    d0dc:	00019d3c 	.word	0x00019d3c
    d0e0:	000199cc 	.word	0x000199cc
    d0e4:	00019d34 	.word	0x00019d34

0000d0e8 <ticker_op_stop_cb>:
{
    d0e8:	b510      	push	{r4, lr}
    d0ea:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    d0ec:	b9b0      	cbnz	r0, d11c <ticker_op_stop_cb+0x34>
	mfy.param = param;
    d0ee:	4b12      	ldr	r3, [pc, #72]	; (d138 <ticker_op_stop_cb+0x50>)
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
    d0f0:	2200      	movs	r2, #0
    d0f2:	4611      	mov	r1, r2
    d0f4:	2002      	movs	r0, #2
	mfy.param = param;
    d0f6:	609c      	str	r4, [r3, #8]
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
    d0f8:	f7fb faf2 	bl	86e0 <mayfly_enqueue>
	LL_ASSERT(!retval);
    d0fc:	b900      	cbnz	r0, d100 <ticker_op_stop_cb+0x18>
}
    d0fe:	bd10      	pop	{r4, pc}
	LL_ASSERT(!retval);
    d100:	4a0e      	ldr	r2, [pc, #56]	; (d13c <ticker_op_stop_cb+0x54>)
    d102:	490f      	ldr	r1, [pc, #60]	; (d140 <ticker_op_stop_cb+0x58>)
    d104:	480f      	ldr	r0, [pc, #60]	; (d144 <ticker_op_stop_cb+0x5c>)
    d106:	f240 7321 	movw	r3, #1825	; 0x721
    d10a:	f008 fe19 	bl	15d40 <printk>
    d10e:	4040      	eors	r0, r0
    d110:	f380 8811 	msr	BASEPRI, r0
    d114:	f04f 0003 	mov.w	r0, #3
    d118:	df02      	svc	2
}
    d11a:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    d11c:	4a07      	ldr	r2, [pc, #28]	; (d13c <ticker_op_stop_cb+0x54>)
    d11e:	490a      	ldr	r1, [pc, #40]	; (d148 <ticker_op_stop_cb+0x60>)
    d120:	4808      	ldr	r0, [pc, #32]	; (d144 <ticker_op_stop_cb+0x5c>)
    d122:	f240 731a 	movw	r3, #1818	; 0x71a
    d126:	f008 fe0b 	bl	15d40 <printk>
    d12a:	4040      	eors	r0, r0
    d12c:	f380 8811 	msr	BASEPRI, r0
    d130:	f04f 0003 	mov.w	r0, #3
    d134:	df02      	svc	2
    d136:	e7da      	b.n	d0ee <ticker_op_stop_cb+0x6>
    d138:	2000043c 	.word	0x2000043c
    d13c:	00019cec 	.word	0x00019cec
    d140:	00019b6c 	.word	0x00019b6c
    d144:	000199cc 	.word	0x000199cc
    d148:	00019d4c 	.word	0x00019d4c

0000d14c <ticker_start_conn_op_cb>:
{
    d14c:	b510      	push	{r4, lr}
    d14e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    d150:	b990      	cbnz	r0, d178 <ticker_start_conn_op_cb+0x2c>
	p = ull_update_unmark(param);
    d152:	4620      	mov	r0, r4
    d154:	f7ff fb32 	bl	c7bc <ull_update_unmark>
	LL_ASSERT(p == param);
    d158:	4284      	cmp	r4, r0
    d15a:	d00c      	beq.n	d176 <ticker_start_conn_op_cb+0x2a>
    d15c:	4a0d      	ldr	r2, [pc, #52]	; (d194 <ticker_start_conn_op_cb+0x48>)
    d15e:	490e      	ldr	r1, [pc, #56]	; (d198 <ticker_start_conn_op_cb+0x4c>)
    d160:	480e      	ldr	r0, [pc, #56]	; (d19c <ticker_start_conn_op_cb+0x50>)
    d162:	f240 7311 	movw	r3, #1809	; 0x711
    d166:	f008 fdeb 	bl	15d40 <printk>
    d16a:	4040      	eors	r0, r0
    d16c:	f380 8811 	msr	BASEPRI, r0
    d170:	f04f 0003 	mov.w	r0, #3
    d174:	df02      	svc	2
}
    d176:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    d178:	4a06      	ldr	r2, [pc, #24]	; (d194 <ticker_start_conn_op_cb+0x48>)
    d17a:	4909      	ldr	r1, [pc, #36]	; (d1a0 <ticker_start_conn_op_cb+0x54>)
    d17c:	4807      	ldr	r0, [pc, #28]	; (d19c <ticker_start_conn_op_cb+0x50>)
    d17e:	f240 730e 	movw	r3, #1806	; 0x70e
    d182:	f008 fddd 	bl	15d40 <printk>
    d186:	4040      	eors	r0, r0
    d188:	f380 8811 	msr	BASEPRI, r0
    d18c:	f04f 0003 	mov.w	r0, #3
    d190:	df02      	svc	2
    d192:	e7de      	b.n	d152 <ticker_start_conn_op_cb+0x6>
    d194:	00019cec 	.word	0x00019cec
    d198:	00019d58 	.word	0x00019d58
    d19c:	000199cc 	.word	0x000199cc
    d1a0:	00019d4c 	.word	0x00019d4c

0000d1a4 <ticker_stop_conn_op_cb>:
{
    d1a4:	b510      	push	{r4, lr}
    d1a6:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    d1a8:	b990      	cbnz	r0, d1d0 <ticker_stop_conn_op_cb+0x2c>
	p = ull_update_mark(param);
    d1aa:	4620      	mov	r0, r4
    d1ac:	f7ff fafa 	bl	c7a4 <ull_update_mark>
	LL_ASSERT(p == param);
    d1b0:	4284      	cmp	r4, r0
    d1b2:	d00c      	beq.n	d1ce <ticker_stop_conn_op_cb+0x2a>
    d1b4:	4a0d      	ldr	r2, [pc, #52]	; (d1ec <ticker_stop_conn_op_cb+0x48>)
    d1b6:	490e      	ldr	r1, [pc, #56]	; (d1f0 <ticker_stop_conn_op_cb+0x4c>)
    d1b8:	480e      	ldr	r0, [pc, #56]	; (d1f4 <ticker_stop_conn_op_cb+0x50>)
    d1ba:	f240 7307 	movw	r3, #1799	; 0x707
    d1be:	f008 fdbf 	bl	15d40 <printk>
    d1c2:	4040      	eors	r0, r0
    d1c4:	f380 8811 	msr	BASEPRI, r0
    d1c8:	f04f 0003 	mov.w	r0, #3
    d1cc:	df02      	svc	2
}
    d1ce:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    d1d0:	4a06      	ldr	r2, [pc, #24]	; (d1ec <ticker_stop_conn_op_cb+0x48>)
    d1d2:	4909      	ldr	r1, [pc, #36]	; (d1f8 <ticker_stop_conn_op_cb+0x54>)
    d1d4:	4807      	ldr	r0, [pc, #28]	; (d1f4 <ticker_stop_conn_op_cb+0x50>)
    d1d6:	f240 7304 	movw	r3, #1796	; 0x704
    d1da:	f008 fdb1 	bl	15d40 <printk>
    d1de:	4040      	eors	r0, r0
    d1e0:	f380 8811 	msr	BASEPRI, r0
    d1e4:	f04f 0003 	mov.w	r0, #3
    d1e8:	df02      	svc	2
    d1ea:	e7de      	b.n	d1aa <ticker_stop_conn_op_cb+0x6>
    d1ec:	00019cec 	.word	0x00019cec
    d1f0:	00019d58 	.word	0x00019d58
    d1f4:	000199cc 	.word	0x000199cc
    d1f8:	00019d4c 	.word	0x00019d4c

0000d1fc <ticker_update_conn_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    d1fc:	b900      	cbnz	r0, d200 <ticker_update_conn_op_cb+0x4>
    d1fe:	4770      	bx	lr
{
    d200:	b510      	push	{r4, lr}
    d202:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    d204:	f7ff fae6 	bl	c7d4 <ull_update_mark_get>
    d208:	4284      	cmp	r4, r0
    d20a:	d010      	beq.n	d22e <ticker_update_conn_op_cb+0x32>
    d20c:	f7ff fac4 	bl	c798 <ull_disable_mark_get>
    d210:	4284      	cmp	r4, r0
    d212:	d00c      	beq.n	d22e <ticker_update_conn_op_cb+0x32>
    d214:	4a06      	ldr	r2, [pc, #24]	; (d230 <ticker_update_conn_op_cb+0x34>)
    d216:	4907      	ldr	r1, [pc, #28]	; (d234 <ticker_update_conn_op_cb+0x38>)
    d218:	4807      	ldr	r0, [pc, #28]	; (d238 <ticker_update_conn_op_cb+0x3c>)
    d21a:	f240 63fb 	movw	r3, #1787	; 0x6fb
    d21e:	f008 fd8f 	bl	15d40 <printk>
    d222:	4040      	eors	r0, r0
    d224:	f380 8811 	msr	BASEPRI, r0
    d228:	f04f 0003 	mov.w	r0, #3
    d22c:	df02      	svc	2
}
    d22e:	bd10      	pop	{r4, pc}
    d230:	00019cec 	.word	0x00019cec
    d234:	00019d64 	.word	0x00019d64
    d238:	000199cc 	.word	0x000199cc

0000d23c <reject_ext_ind_send>:
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ) || defined(CONFIG_BT_CTLR_PHY)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
			       uint8_t reject_opcode, uint8_t error_code)
{
    d23c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d240:	4604      	mov	r4, r0
	if (conn->common.txn_lock) {
    d242:	f890 00ba 	ldrb.w	r0, [r0, #186]	; 0xba
{
    d246:	460d      	mov	r5, r1
	if (conn->common.txn_lock) {
    d248:	0781      	lsls	r1, r0, #30
    d24a:	d433      	bmi.n	d2b4 <reject_ext_ind_send+0x78>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    d24c:	4836      	ldr	r0, [pc, #216]	; (d328 <reject_ext_ind_send+0xec>)
    d24e:	4690      	mov	r8, r2
    d250:	461f      	mov	r7, r3
    d252:	f7fb f96d 	bl	8530 <mem_acquire>
	if (!tx) {
    d256:	2800      	cmp	r0, #0
    d258:	d047      	beq.n	d2ea <reject_ext_ind_send+0xae>
	conn->common.txn_lock = 1U;
    d25a:	f894 10ba 	ldrb.w	r1, [r4, #186]	; 0xba
	if (!tx) {
		return err;
	}

	pdu_ctrl_tx = (void *)tx->pdu;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d25e:	7906      	ldrb	r6, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    d260:	2303      	movs	r3, #3
	conn->common.txn_lock = 1U;
    d262:	f041 0102 	orr.w	r1, r1, #2
    d266:	f884 10ba 	strb.w	r1, [r4, #186]	; 0xba
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    d26a:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
    d26c:	f8d4 119c 	ldr.w	r1, [r4, #412]	; 0x19c
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
    d270:	f880 8008 	strb.w	r8, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d274:	ea46 0203 	orr.w	r2, r6, r3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    d278:	2311      	movs	r3, #17
    d27a:	f8d4 61a0 	ldr.w	r6, [r4, #416]	; 0x1a0
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
    d27e:	7247      	strb	r7, [r0, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d280:	7102      	strb	r2, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    d282:	71c3      	strb	r3, [r0, #7]
	if (
    d284:	b1d9      	cbz	r1, d2be <reject_ext_ind_send+0x82>
	    !conn->llcp_enc.pause_tx &&
    d286:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
	    conn->tx_head &&
    d28a:	079a      	lsls	r2, r3, #30
    d28c:	d417      	bmi.n	d2be <reject_ext_ind_send+0x82>
	    !conn->llcp_phy.pause_tx &&
    d28e:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
    d292:	07db      	lsls	r3, r3, #31
    d294:	d413      	bmi.n	d2be <reject_ext_ind_send+0x82>
		if (conn->tx_head == conn->tx_data) {
    d296:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
    d29a:	4299      	cmp	r1, r3
    d29c:	d028      	beq.n	d2f0 <reject_ext_ind_send+0xb4>
		} else if (!conn->tx_ctrl) {
    d29e:	2e00      	cmp	r6, #0
    d2a0:	d034      	beq.n	d30c <reject_ext_ind_send+0xd0>
    d2a2:	f8d4 11a4 	ldr.w	r1, [r4, #420]	; 0x1a4
	tx->next = conn->tx_ctrl_last->next;
    d2a6:	680b      	ldr	r3, [r1, #0]
    d2a8:	6003      	str	r3, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    d2aa:	6008      	str	r0, [r1, #0]
	if (!tx->next) {
    d2ac:	6801      	ldr	r1, [r0, #0]
	conn->tx_ctrl_last = tx;
    d2ae:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
    d2b2:	b179      	cbz	r1, d2d4 <reject_ext_ind_send+0x98>

	ctrl_tx_enqueue(conn, tx);

	/* Mark for buffer for release */
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
    d2b4:	2301      	movs	r3, #1
    d2b6:	712b      	strb	r3, [r5, #4]

	return 0;
    d2b8:	2000      	movs	r0, #0
}
    d2ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!conn->tx_ctrl) {
    d2be:	b166      	cbz	r6, d2da <reject_ext_ind_send+0x9e>
	tx->next = conn->tx_ctrl_last->next;
    d2c0:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    d2c4:	681a      	ldr	r2, [r3, #0]
    d2c6:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    d2c8:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    d2ca:	6801      	ldr	r1, [r0, #0]
    d2cc:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
    d2d0:	2900      	cmp	r1, #0
    d2d2:	d1ef      	bne.n	d2b4 <reject_ext_ind_send+0x78>
		conn->tx_data_last = tx;
    d2d4:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
    d2d8:	e7ec      	b.n	d2b4 <reject_ext_ind_send+0x78>
			tx->next = conn->tx_head;
    d2da:	6001      	str	r1, [r0, #0]
				conn->tx_ctrl = tx;
    d2dc:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    d2e0:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
    d2e4:	2900      	cmp	r1, #0
    d2e6:	d1e5      	bne.n	d2b4 <reject_ext_ind_send+0x78>
    d2e8:	e7f4      	b.n	d2d4 <reject_ext_ind_send+0x98>
		*err = -ENOBUFS;
    d2ea:	f06f 0036 	mvn.w	r0, #54	; 0x36
    d2ee:	e7e4      	b.n	d2ba <reject_ext_ind_send+0x7e>
			conn->tx_data = conn->tx_data->next;
    d2f0:	680b      	ldr	r3, [r1, #0]
    d2f2:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    d2f6:	2e00      	cmp	r6, #0
    d2f8:	d1d3      	bne.n	d2a2 <reject_ext_ind_send+0x66>
			tx->next = conn->tx_head->next;
    d2fa:	680b      	ldr	r3, [r1, #0]
    d2fc:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
    d2fe:	6008      	str	r0, [r1, #0]
				conn->tx_ctrl = tx;
    d300:	6801      	ldr	r1, [r0, #0]
				conn->tx_ctrl_last = tx;
    d302:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
	if (!tx->next) {
    d306:	2900      	cmp	r1, #0
    d308:	d1d4      	bne.n	d2b4 <reject_ext_ind_send+0x78>
    d30a:	e7e3      	b.n	d2d4 <reject_ext_ind_send+0x98>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    d30c:	790b      	ldrb	r3, [r1, #4]
    d30e:	f003 0303 	and.w	r3, r3, #3
    d312:	2b03      	cmp	r3, #3
    d314:	d002      	beq.n	d31c <reject_ext_ind_send+0xe0>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    d316:	f8c4 11a0 	str.w	r1, [r4, #416]	; 0x1a0
    d31a:	e7c4      	b.n	d2a6 <reject_ext_ind_send+0x6a>
	    ((pdu_data_tx->llctrl.opcode !=
    d31c:	79cb      	ldrb	r3, [r1, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    d31e:	2b03      	cmp	r3, #3
    d320:	d0eb      	beq.n	d2fa <reject_ext_ind_send+0xbe>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    d322:	2b0a      	cmp	r3, #10
    d324:	d1f7      	bne.n	d316 <reject_ext_ind_send+0xda>
    d326:	e7e8      	b.n	d2fa <reject_ext_ind_send+0xbe>
    d328:	20001a90 	.word	0x20001a90

0000d32c <start_enc_rsp_send>:
{
    d32c:	b570      	push	{r4, r5, r6, lr}
    d32e:	4604      	mov	r4, r0
	if (!pdu_ctrl_tx) {
    d330:	b179      	cbz	r1, d352 <start_enc_rsp_send+0x26>
	conn->lll.enc_tx = 1;
    d332:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d336:	780b      	ldrb	r3, [r1, #0]
	conn->lll.enc_tx = 1;
    d338:	f042 0210 	orr.w	r2, r2, #16
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    d33c:	2601      	movs	r6, #1
	conn->lll.enc_tx = 1;
    d33e:	f880 205e 	strb.w	r2, [r0, #94]	; 0x5e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d342:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    d346:	2506      	movs	r5, #6
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    d348:	704e      	strb	r6, [r1, #1]
	return 0;
    d34a:	2000      	movs	r0, #0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d34c:	700b      	strb	r3, [r1, #0]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    d34e:	70cd      	strb	r5, [r1, #3]
}
    d350:	bd70      	pop	{r4, r5, r6, pc}
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    d352:	482c      	ldr	r0, [pc, #176]	; (d404 <start_enc_rsp_send+0xd8>)
    d354:	f7fb f8ec 	bl	8530 <mem_acquire>
		if (!tx) {
    d358:	2800      	cmp	r0, #0
    d35a:	d04f      	beq.n	d3fc <start_enc_rsp_send+0xd0>
	conn->lll.enc_tx = 1;
    d35c:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d360:	7902      	ldrb	r2, [r0, #4]
	conn->lll.enc_tx = 1;
    d362:	f043 0310 	orr.w	r3, r3, #16
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    d366:	2101      	movs	r1, #1
	conn->lll.enc_tx = 1;
    d368:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    d36c:	7141      	strb	r1, [r0, #5]
    d36e:	e9d4 3567 	ldrd	r3, r5, [r4, #412]	; 0x19c
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d372:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    d376:	2106      	movs	r1, #6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d378:	7102      	strb	r2, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    d37a:	71c1      	strb	r1, [r0, #7]
	if (
    d37c:	b1bb      	cbz	r3, d3ae <start_enc_rsp_send+0x82>
	    !conn->llcp_enc.pause_tx &&
    d37e:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
    d382:	0791      	lsls	r1, r2, #30
    d384:	d413      	bmi.n	d3ae <start_enc_rsp_send+0x82>
	    !conn->llcp_phy.pause_tx &&
    d386:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
    d38a:	07d2      	lsls	r2, r2, #31
    d38c:	d40f      	bmi.n	d3ae <start_enc_rsp_send+0x82>
		if (conn->tx_head == conn->tx_data) {
    d38e:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
    d392:	4293      	cmp	r3, r2
    d394:	d020      	beq.n	d3d8 <start_enc_rsp_send+0xac>
		} else if (!conn->tx_ctrl) {
    d396:	b1bd      	cbz	r5, d3c8 <start_enc_rsp_send+0x9c>
	tx->next = conn->tx_ctrl_last->next;
    d398:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    d39c:	681a      	ldr	r2, [r3, #0]
    d39e:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    d3a0:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    d3a2:	6803      	ldr	r3, [r0, #0]
    d3a4:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
    d3a8:	b153      	cbz	r3, d3c0 <start_enc_rsp_send+0x94>
	return 0;
    d3aa:	2000      	movs	r0, #0
}
    d3ac:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->tx_ctrl) {
    d3ae:	2d00      	cmp	r5, #0
    d3b0:	d1f2      	bne.n	d398 <start_enc_rsp_send+0x6c>
			tx->next = conn->tx_head;
    d3b2:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    d3b4:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    d3b8:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
    d3bc:	2b00      	cmp	r3, #0
    d3be:	d1f4      	bne.n	d3aa <start_enc_rsp_send+0x7e>
		conn->tx_data_last = tx;
    d3c0:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
	return 0;
    d3c4:	4618      	mov	r0, r3
}
    d3c6:	bd70      	pop	{r4, r5, r6, pc}
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    d3c8:	791a      	ldrb	r2, [r3, #4]
    d3ca:	f002 0203 	and.w	r2, r2, #3
    d3ce:	2a03      	cmp	r2, #3
    d3d0:	d00e      	beq.n	d3f0 <start_enc_rsp_send+0xc4>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    d3d2:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
    d3d6:	e7e1      	b.n	d39c <start_enc_rsp_send+0x70>
			conn->tx_data = conn->tx_data->next;
    d3d8:	681a      	ldr	r2, [r3, #0]
    d3da:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    d3de:	2d00      	cmp	r5, #0
    d3e0:	d1da      	bne.n	d398 <start_enc_rsp_send+0x6c>
			tx->next = conn->tx_head->next;
    d3e2:	681a      	ldr	r2, [r3, #0]
    d3e4:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    d3e6:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
    d3e8:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    d3ea:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
    d3ee:	e7db      	b.n	d3a8 <start_enc_rsp_send+0x7c>
	    ((pdu_data_tx->llctrl.opcode !=
    d3f0:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    d3f2:	2a03      	cmp	r2, #3
    d3f4:	d0f5      	beq.n	d3e2 <start_enc_rsp_send+0xb6>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    d3f6:	2a0a      	cmp	r2, #10
    d3f8:	d1eb      	bne.n	d3d2 <start_enc_rsp_send+0xa6>
    d3fa:	e7f2      	b.n	d3e2 <start_enc_rsp_send+0xb6>
			return -ENOBUFS;
    d3fc:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    d400:	bd70      	pop	{r4, r5, r6, pc}
    d402:	bf00      	nop
    d404:	20001a90 	.word	0x20001a90

0000d408 <ctrl_tx_sec_enqueue>:
	if (conn->llcp_enc.pause_tx) {
    d408:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    d40c:	f8d0 21a0 	ldr.w	r2, [r0, #416]	; 0x1a0
    d410:	079b      	lsls	r3, r3, #30
{
    d412:	b570      	push	{r4, r5, r6, lr}
    d414:	4604      	mov	r4, r0
    d416:	460d      	mov	r5, r1
	if (conn->llcp_enc.pause_tx) {
    d418:	d509      	bpl.n	d42e <ctrl_tx_sec_enqueue+0x26>
		if (!conn->tx_ctrl) {
    d41a:	2a00      	cmp	r2, #0
    d41c:	d044      	beq.n	d4a8 <ctrl_tx_sec_enqueue+0xa0>
			tx->next = conn->tx_ctrl_last->next;
    d41e:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
    d422:	681a      	ldr	r2, [r3, #0]
    d424:	600a      	str	r2, [r1, #0]
			conn->tx_ctrl_last->next = tx;
    d426:	6019      	str	r1, [r3, #0]
		if (!tx->next) {
    d428:	682b      	ldr	r3, [r5, #0]
    d42a:	b36b      	cbz	r3, d488 <ctrl_tx_sec_enqueue+0x80>
}
    d42c:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->tx_head) {
    d42e:	f8d0 119c 	ldr.w	r1, [r0, #412]	; 0x19c
    d432:	b319      	cbz	r1, d47c <ctrl_tx_sec_enqueue+0x74>
			if ((conn->llcp_req != conn->llcp_ack) &&
    d434:	f890 3197 	ldrb.w	r3, [r0, #407]	; 0x197
    d438:	f890 60bb 	ldrb.w	r6, [r0, #187]	; 0xbb
    d43c:	f890 00bc 	ldrb.w	r0, [r0, #188]	; 0xbc
    d440:	4286      	cmp	r6, r0
    d442:	f003 0301 	and.w	r3, r3, #1
    d446:	d003      	beq.n	d450 <ctrl_tx_sec_enqueue+0x48>
    d448:	f894 00bd 	ldrb.w	r0, [r4, #189]	; 0xbd
    d44c:	2803      	cmp	r0, #3
    d44e:	d033      	beq.n	d4b8 <ctrl_tx_sec_enqueue+0xb0>
	    !conn->llcp_phy.pause_tx &&
    d450:	b9eb      	cbnz	r3, d48e <ctrl_tx_sec_enqueue+0x86>
		if (conn->tx_head == conn->tx_data) {
    d452:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
    d456:	4281      	cmp	r1, r0
    d458:	d04b      	beq.n	d4f2 <ctrl_tx_sec_enqueue+0xea>
		} else if (!conn->tx_ctrl) {
    d45a:	2a00      	cmp	r2, #0
    d45c:	d03b      	beq.n	d4d6 <ctrl_tx_sec_enqueue+0xce>
			LL_ASSERT(!pause);
    d45e:	b1c3      	cbz	r3, d492 <ctrl_tx_sec_enqueue+0x8a>
    d460:	f640 0359 	movw	r3, #2137	; 0x859
			LL_ASSERT(!pause);
    d464:	4a32      	ldr	r2, [pc, #200]	; (d530 <ctrl_tx_sec_enqueue+0x128>)
    d466:	4933      	ldr	r1, [pc, #204]	; (d534 <ctrl_tx_sec_enqueue+0x12c>)
    d468:	4833      	ldr	r0, [pc, #204]	; (d538 <ctrl_tx_sec_enqueue+0x130>)
    d46a:	f008 fc69 	bl	15d40 <printk>
    d46e:	4040      	eors	r0, r0
    d470:	f380 8811 	msr	BASEPRI, r0
    d474:	f04f 0003 	mov.w	r0, #3
    d478:	df02      	svc	2
    d47a:	e00a      	b.n	d492 <ctrl_tx_sec_enqueue+0x8a>
		if (!conn->tx_ctrl) {
    d47c:	b94a      	cbnz	r2, d492 <ctrl_tx_sec_enqueue+0x8a>
			tx->next = conn->tx_head;
    d47e:	602a      	str	r2, [r5, #0]
				conn->tx_ctrl = tx;
    d480:	e9c0 5567 	strd	r5, r5, [r0, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    d484:	f8c0 51a4 	str.w	r5, [r0, #420]	; 0x1a4
			conn->tx_data_last = tx;
    d488:	f8c4 51ac 	str.w	r5, [r4, #428]	; 0x1ac
}
    d48c:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->tx_ctrl) {
    d48e:	2a00      	cmp	r2, #0
    d490:	d03f      	beq.n	d512 <ctrl_tx_sec_enqueue+0x10a>
	tx->next = conn->tx_ctrl_last->next;
    d492:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    d496:	681a      	ldr	r2, [r3, #0]
    d498:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
    d49a:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
    d49c:	682b      	ldr	r3, [r5, #0]
    d49e:	f8c4 51a4 	str.w	r5, [r4, #420]	; 0x1a4
		if (!tx->next) {
    d4a2:	2b00      	cmp	r3, #0
    d4a4:	d1c2      	bne.n	d42c <ctrl_tx_sec_enqueue+0x24>
    d4a6:	e7ef      	b.n	d488 <ctrl_tx_sec_enqueue+0x80>
			tx->next = conn->tx_head;
    d4a8:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
    d4ac:	600b      	str	r3, [r1, #0]
			conn->tx_head = tx;
    d4ae:	f8c4 119c 	str.w	r1, [r4, #412]	; 0x19c
		if (!tx->next) {
    d4b2:	2b00      	cmp	r3, #0
    d4b4:	d1ba      	bne.n	d42c <ctrl_tx_sec_enqueue+0x24>
    d4b6:	e7e7      	b.n	d488 <ctrl_tx_sec_enqueue+0x80>
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
    d4b8:	7908      	ldrb	r0, [r1, #4]
			    (conn->llcp_type == LLCP_ENCRYPTION) &&
    d4ba:	f000 0003 	and.w	r0, r0, #3
    d4be:	2803      	cmp	r0, #3
    d4c0:	d1c6      	bne.n	d450 <ctrl_tx_sec_enqueue+0x48>
			    ((pdu_data_tx->llctrl.opcode ==
    d4c2:	79c8      	ldrb	r0, [r1, #7]
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
    d4c4:	2803      	cmp	r0, #3
    d4c6:	d001      	beq.n	d4cc <ctrl_tx_sec_enqueue+0xc4>
			      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
    d4c8:	280a      	cmp	r0, #10
    d4ca:	d1c1      	bne.n	d450 <ctrl_tx_sec_enqueue+0x48>
	    !conn->llcp_phy.pause_tx &&
    d4cc:	b33b      	cbz	r3, d51e <ctrl_tx_sec_enqueue+0x116>
		if (!conn->tx_ctrl) {
    d4ce:	b162      	cbz	r2, d4ea <ctrl_tx_sec_enqueue+0xe2>
			LL_ASSERT(!pause);
    d4d0:	f640 036b 	movw	r3, #2155	; 0x86b
    d4d4:	e7c6      	b.n	d464 <ctrl_tx_sec_enqueue+0x5c>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    d4d6:	790a      	ldrb	r2, [r1, #4]
    d4d8:	f002 0203 	and.w	r2, r2, #3
    d4dc:	2a03      	cmp	r2, #3
    d4de:	d020      	beq.n	d522 <ctrl_tx_sec_enqueue+0x11a>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    d4e0:	e9c4 1168 	strd	r1, r1, [r4, #416]	; 0x1a0
			LL_ASSERT(!pause);
    d4e4:	2b00      	cmp	r3, #0
    d4e6:	d0d4      	beq.n	d492 <ctrl_tx_sec_enqueue+0x8a>
    d4e8:	e7ba      	b.n	d460 <ctrl_tx_sec_enqueue+0x58>
			tx->next = conn->tx_head;
    d4ea:	6029      	str	r1, [r5, #0]
			conn->tx_head = tx;
    d4ec:	f8c4 519c 	str.w	r5, [r4, #412]	; 0x19c
}
    d4f0:	bd70      	pop	{r4, r5, r6, pc}
			conn->tx_data = conn->tx_data->next;
    d4f2:	6808      	ldr	r0, [r1, #0]
    d4f4:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    d4f8:	2a00      	cmp	r2, #0
    d4fa:	d1b0      	bne.n	d45e <ctrl_tx_sec_enqueue+0x56>
			tx->next = conn->tx_head->next;
    d4fc:	680a      	ldr	r2, [r1, #0]
    d4fe:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
    d500:	600d      	str	r5, [r1, #0]
			if (!pause) {
    d502:	2b00      	cmp	r3, #0
    d504:	d190      	bne.n	d428 <ctrl_tx_sec_enqueue+0x20>
				conn->tx_ctrl = tx;
    d506:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
    d508:	e9c4 5568 	strd	r5, r5, [r4, #416]	; 0x1a0
		if (!tx->next) {
    d50c:	2b00      	cmp	r3, #0
    d50e:	d18d      	bne.n	d42c <ctrl_tx_sec_enqueue+0x24>
    d510:	e7ba      	b.n	d488 <ctrl_tx_sec_enqueue+0x80>
			tx->next = conn->tx_head;
    d512:	6029      	str	r1, [r5, #0]
				conn->tx_ctrl = tx;
    d514:	e9c4 5567 	strd	r5, r5, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    d518:	f8c4 51a4 	str.w	r5, [r4, #420]	; 0x1a4
}
    d51c:	bd70      	pop	{r4, r5, r6, pc}
				pause = true;
    d51e:	2301      	movs	r3, #1
    d520:	e797      	b.n	d452 <ctrl_tx_sec_enqueue+0x4a>
	    ((pdu_data_tx->llctrl.opcode !=
    d522:	79ca      	ldrb	r2, [r1, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    d524:	2a03      	cmp	r2, #3
    d526:	d0e9      	beq.n	d4fc <ctrl_tx_sec_enqueue+0xf4>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    d528:	2a0a      	cmp	r2, #10
    d52a:	d1d9      	bne.n	d4e0 <ctrl_tx_sec_enqueue+0xd8>
    d52c:	e7e6      	b.n	d4fc <ctrl_tx_sec_enqueue+0xf4>
    d52e:	bf00      	nop
    d530:	00019cec 	.word	0x00019cec
    d534:	00019d2c 	.word	0x00019d2c
    d538:	000199cc 	.word	0x000199cc

0000d53c <ll_conn_acquire>:
	return mem_acquire(&conn_free);
    d53c:	4801      	ldr	r0, [pc, #4]	; (d544 <ll_conn_acquire+0x8>)
    d53e:	f7fa bff7 	b.w	8530 <mem_acquire>
    d542:	bf00      	nop
    d544:	20001a08 	.word	0x20001a08

0000d548 <ll_conn_release>:
	mem_release(conn, &conn_free);
    d548:	4901      	ldr	r1, [pc, #4]	; (d550 <ll_conn_release+0x8>)
    d54a:	f7fb b80b 	b.w	8564 <mem_release>
    d54e:	bf00      	nop
    d550:	20001a08 	.word	0x20001a08

0000d554 <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    d554:	4902      	ldr	r1, [pc, #8]	; (d560 <ll_conn_handle_get+0xc>)
    d556:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
    d55a:	f7fb b81f 	b.w	859c <mem_index_get>
    d55e:	bf00      	nop
    d560:	20000be0 	.word	0x20000be0

0000d564 <ll_conn_get>:
{
    d564:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    d566:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    d56a:	4801      	ldr	r0, [pc, #4]	; (d570 <ll_conn_get+0xc>)
    d56c:	f7fb b812 	b.w	8594 <mem_get>
    d570:	20000be0 	.word	0x20000be0

0000d574 <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    d574:	b958      	cbnz	r0, d58e <ll_connected_get+0x1a>
{
    d576:	b508      	push	{r3, lr}
    d578:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    d57a:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    d57e:	4805      	ldr	r0, [pc, #20]	; (d594 <ll_connected_get+0x20>)
    d580:	f7fb f808 	bl	8594 <mem_get>
	if (conn->lll.handle != handle) {
    d584:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    d586:	b903      	cbnz	r3, d58a <ll_connected_get+0x16>
}
    d588:	bd08      	pop	{r3, pc}
		return NULL;
    d58a:	2000      	movs	r0, #0
}
    d58c:	bd08      	pop	{r3, pc}
		return NULL;
    d58e:	2000      	movs	r0, #0
}
    d590:	4770      	bx	lr
    d592:	bf00      	nop
    d594:	20000be0 	.word	0x20000be0

0000d598 <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
    d598:	4801      	ldr	r0, [pc, #4]	; (d5a0 <ll_tx_mem_acquire+0x8>)
    d59a:	f7fa bfc9 	b.w	8530 <mem_acquire>
    d59e:	bf00      	nop
    d5a0:	20001a20 	.word	0x20001a20

0000d5a4 <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
    d5a4:	4901      	ldr	r1, [pc, #4]	; (d5ac <ll_tx_mem_release+0x8>)
    d5a6:	f7fa bfdd 	b.w	8564 <mem_release>
    d5aa:	bf00      	nop
    d5ac:	20001a20 	.word	0x20001a20

0000d5b0 <ll_tx_mem_enqueue>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    d5b0:	2800      	cmp	r0, #0
    d5b2:	d133      	bne.n	d61c <ll_tx_mem_enqueue+0x6c>
{
    d5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d5b6:	4602      	mov	r2, r0
    d5b8:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    d5ba:	481a      	ldr	r0, [pc, #104]	; (d624 <ll_tx_mem_enqueue+0x74>)
    d5bc:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    d5c0:	f7fa ffe8 	bl	8594 <mem_get>
	if (conn->lll.handle != handle) {
    d5c4:	8d06      	ldrh	r6, [r0, #40]	; 0x28
    d5c6:	b9d6      	cbnz	r6, d5fe <ll_tx_mem_enqueue+0x4e>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
    d5c8:	4917      	ldr	r1, [pc, #92]	; (d628 <ll_tx_mem_enqueue+0x78>)
    d5ca:	78cf      	ldrb	r7, [r1, #3]
	if (last == count) {
    d5cc:	784d      	ldrb	r5, [r1, #1]
    d5ce:	788a      	ldrb	r2, [r1, #2]
	last = last + 1;
    d5d0:	1c7b      	adds	r3, r7, #1
    d5d2:	b2db      	uxtb	r3, r3
		last = 0U;
    d5d4:	429d      	cmp	r5, r3
    d5d6:	bf08      	it	eq
    d5d8:	2300      	moveq	r3, #0
	if (last == first) {
    d5da:	429a      	cmp	r2, r3
    d5dc:	d012      	beq.n	d604 <ll_tx_mem_enqueue+0x54>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    d5de:	460a      	mov	r2, r1
    d5e0:	f812 5b04 	ldrb.w	r5, [r2], #4
    d5e4:	fb15 f507 	smulbb	r5, r5, r7
	if (!lll_tx) {
    d5e8:	1957      	adds	r7, r2, r5
    d5ea:	d00b      	beq.n	d604 <ll_tx_mem_enqueue+0x54>
	lll_tx->handle = handle;
    d5ec:	5356      	strh	r6, [r2, r5]
	lll_tx->node = tx;
    d5ee:	607c      	str	r4, [r7, #4]
	return hdr->ref;
    d5f0:	7c02      	ldrb	r2, [r0, #16]
	*last = idx; /* Commit: Update write index */
    d5f2:	70cb      	strb	r3, [r1, #3]
	if (ull_ref_get(&conn->ull)) {
    d5f4:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    d5f8:	b93a      	cbnz	r2, d60a <ll_tx_mem_enqueue+0x5a>
	return 0;
    d5fa:	4618      	mov	r0, r3
}
    d5fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
    d5fe:	f06f 0015 	mvn.w	r0, #21
}
    d602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
    d604:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    d608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		mfy.param = conn;
    d60a:	4b08      	ldr	r3, [pc, #32]	; (d62c <ll_tx_mem_enqueue+0x7c>)
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
    d60c:	4632      	mov	r2, r6
		mfy.param = conn;
    d60e:	6098      	str	r0, [r3, #8]
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
    d610:	2101      	movs	r1, #1
    d612:	2003      	movs	r0, #3
    d614:	f7fb f864 	bl	86e0 <mayfly_enqueue>
	return 0;
    d618:	4630      	mov	r0, r6
}
    d61a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
    d61c:	f06f 0015 	mvn.w	r0, #21
}
    d620:	4770      	bx	lr
    d622:	bf00      	nop
    d624:	20000be0 	.word	0x20000be0
    d628:	20000408 	.word	0x20000408
    d62c:	2000042c 	.word	0x2000042c

0000d630 <ll_conn_update>:
{
    d630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d634:	f8bd 9020 	ldrh.w	r9, [sp, #32]
    d638:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
    d63c:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	if (handle >= CONFIG_BT_MAX_CONN) {
    d640:	2800      	cmp	r0, #0
    d642:	d155      	bne.n	d6f0 <ll_conn_update+0xc0>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    d644:	460c      	mov	r4, r1
    d646:	4616      	mov	r6, r2
    d648:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    d64c:	4602      	mov	r2, r0
    d64e:	483e      	ldr	r0, [pc, #248]	; (d748 <ll_conn_update+0x118>)
    d650:	461d      	mov	r5, r3
    d652:	f7fa ff9f 	bl	8594 <mem_get>
	if (conn->lll.handle != handle) {
    d656:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    d658:	2b00      	cmp	r3, #0
    d65a:	d149      	bne.n	d6f0 <ll_conn_update+0xc0>
	if (!cmd) {
    d65c:	b1e4      	cbz	r4, d698 <ll_conn_update+0x68>
		cmd--;
    d65e:	3c01      	subs	r4, #1
		if (cmd) {
    d660:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    d664:	f890 215c 	ldrb.w	r2, [r0, #348]	; 0x15c
    d668:	f890 115d 	ldrb.w	r1, [r0, #349]	; 0x15d
    d66c:	d052      	beq.n	d714 <ll_conn_update+0xe4>
			if ((conn->llcp_conn_param.req ==
    d66e:	428a      	cmp	r2, r1
    d670:	d03b      	beq.n	d6ea <ll_conn_update+0xba>
			    (conn->llcp_conn_param.state !=
    d672:	f890 215e 	ldrb.w	r2, [r0, #350]	; 0x15e
			     conn->llcp_conn_param.ack) ||
    d676:	f002 0107 	and.w	r1, r2, #7
    d67a:	2903      	cmp	r1, #3
    d67c:	d135      	bne.n	d6ea <ll_conn_update+0xba>
			conn->llcp_conn_param.state = cmd;
    d67e:	f004 0407 	and.w	r4, r4, #7
    d682:	f044 0408 	orr.w	r4, r4, #8
    d686:	f022 020f 	bic.w	r2, r2, #15
    d68a:	4314      	orrs	r4, r2
    d68c:	f880 415e 	strb.w	r4, [r0, #350]	; 0x15e
			conn->llcp_conn_param.status = status;
    d690:	f880 615f 	strb.w	r6, [r0, #351]	; 0x15f
	return 0;
    d694:	4618      	mov	r0, r3
    d696:	e029      	b.n	d6ec <ll_conn_update+0xbc>
		if (!conn->llcp_conn_param.disabled &&
    d698:	f890 315e 	ldrb.w	r3, [r0, #350]	; 0x15e
    d69c:	f013 0410 	ands.w	r4, r3, #16
    d6a0:	d029      	beq.n	d6f6 <ll_conn_update+0xc6>
		} else if (conn->lll.role) {
    d6a2:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
    d6a6:	2b00      	cmp	r3, #0
    d6a8:	db4b      	blt.n	d742 <ll_conn_update+0x112>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
    d6aa:	f890 20e4 	ldrb.w	r2, [r0, #228]	; 0xe4
    d6ae:	f890 30e5 	ldrb.w	r3, [r0, #229]	; 0xe5
    d6b2:	4293      	cmp	r3, r2
    d6b4:	d119      	bne.n	d6ea <ll_conn_update+0xba>
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    d6b6:	f890 20e6 	ldrb.w	r2, [r0, #230]	; 0xe6
		conn->llcp_cu.interval = interval_max;
    d6ba:	f8a0 90e8 	strh.w	r9, [r0, #232]	; 0xe8
		conn->llcp_cu.req++;
    d6be:	3301      	adds	r3, #1
		conn->llcp_cu.win_size = 1U;
    d6c0:	2101      	movs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    d6c2:	f022 020f 	bic.w	r2, r2, #15
		conn->llcp_cu.req++;
    d6c6:	f880 30e4 	strb.w	r3, [r0, #228]	; 0xe4
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    d6ca:	f042 0209 	orr.w	r2, r2, #9
		conn->llcp_cu.win_offset_us = 0U;
    d6ce:	2300      	movs	r3, #0
		conn->llcp_cu.win_size = 1U;
    d6d0:	f880 10f4 	strb.w	r1, [r0, #244]	; 0xf4
		conn->llcp_cu.latency = latency;
    d6d4:	f8a0 80ea 	strh.w	r8, [r0, #234]	; 0xea
		conn->llcp_cu.timeout = timeout;
    d6d8:	f8a0 70ec 	strh.w	r7, [r0, #236]	; 0xec
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    d6dc:	f880 20e6 	strb.w	r2, [r0, #230]	; 0xe6
		conn->llcp_cu.win_offset_us = 0U;
    d6e0:	f8c0 30f0 	str.w	r3, [r0, #240]	; 0xf0
	return 0;
    d6e4:	4618      	mov	r0, r3
}
    d6e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
    d6ea:	200c      	movs	r0, #12
}
    d6ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    d6f0:	2002      	movs	r0, #2
}
    d6f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		    (!conn->common.fex_valid ||
    d6f6:	f890 30ba 	ldrb.w	r3, [r0, #186]	; 0xba
		if (!conn->llcp_conn_param.disabled &&
    d6fa:	07db      	lsls	r3, r3, #31
    d6fc:	d506      	bpl.n	d70c <ll_conn_update+0xdc>
		     (conn->llcp_feature.features_conn &
    d6fe:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    d702:	4623      	mov	r3, r4
    d704:	f001 0202 	and.w	r2, r1, #2
		    (!conn->common.fex_valid ||
    d708:	4313      	orrs	r3, r2
    d70a:	d0ca      	beq.n	d6a2 <ll_conn_update+0x72>
    d70c:	f890 215c 	ldrb.w	r2, [r0, #348]	; 0x15c
    d710:	f890 115d 	ldrb.w	r1, [r0, #349]	; 0x15d
			if (conn->llcp_conn_param.req !=
    d714:	428a      	cmp	r2, r1
    d716:	d1e8      	bne.n	d6ea <ll_conn_update+0xba>
			conn->llcp_conn_param.state = cmd;
    d718:	f8b0 315e 	ldrh.w	r3, [r0, #350]	; 0x15e
			conn->llcp_conn_param.interval_min = interval_min;
    d71c:	f8a0 5160 	strh.w	r5, [r0, #352]	; 0x160
			conn->llcp_conn_param.state = cmd;
    d720:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
			conn->llcp_conn_param.req++;
    d724:	3201      	adds	r2, #1
			conn->llcp_conn_param.state = cmd;
    d726:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.req++;
    d72a:	f880 215c 	strb.w	r2, [r0, #348]	; 0x15c
			conn->llcp_conn_param.interval_max = interval_max;
    d72e:	f8a0 9162 	strh.w	r9, [r0, #354]	; 0x162
			conn->llcp_conn_param.latency = latency;
    d732:	f8a0 8164 	strh.w	r8, [r0, #356]	; 0x164
			conn->llcp_conn_param.timeout = timeout;
    d736:	f8a0 7166 	strh.w	r7, [r0, #358]	; 0x166
			conn->llcp_conn_param.state = cmd;
    d73a:	f8a0 315e 	strh.w	r3, [r0, #350]	; 0x15e
	return 0;
    d73e:	2000      	movs	r0, #0
    d740:	e7d4      	b.n	d6ec <ll_conn_update+0xbc>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    d742:	201a      	movs	r0, #26
    d744:	e7d2      	b.n	d6ec <ll_conn_update+0xbc>
    d746:	bf00      	nop
    d748:	20000be0 	.word	0x20000be0

0000d74c <ll_chm_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    d74c:	b9d0      	cbnz	r0, d784 <ll_chm_get+0x38>
{
    d74e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d750:	4602      	mov	r2, r0
    d752:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    d754:	480c      	ldr	r0, [pc, #48]	; (d788 <ll_chm_get+0x3c>)
    d756:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    d75a:	f7fa ff1b 	bl	8594 <mem_get>
	if (conn->lll.handle != handle) {
    d75e:	8d06      	ldrh	r6, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    d760:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
    d762:	b96e      	cbnz	r6, d780 <ll_chm_get+0x34>
    d764:	f100 0734 	add.w	r7, r0, #52	; 0x34
		conn->chm_updated = 0U;
    d768:	f884 61b0 	strb.w	r6, [r4, #432]	; 0x1b0
		memcpy(chm, conn->lll.data_chan_map,
    d76c:	2205      	movs	r2, #5
    d76e:	4639      	mov	r1, r7
    d770:	4628      	mov	r0, r5
    d772:	f009 f99d 	bl	16ab0 <memcpy>
	} while (conn->chm_updated);
    d776:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
    d77a:	2800      	cmp	r0, #0
    d77c:	d1f4      	bne.n	d768 <ll_chm_get+0x1c>
}
    d77e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    d780:	2002      	movs	r0, #2
}
    d782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    d784:	2002      	movs	r0, #2
}
    d786:	4770      	bx	lr
    d788:	20000be0 	.word	0x20000be0

0000d78c <ll_terminate_ind_send>:
	switch (reason) {
    d78c:	2929      	cmp	r1, #41	; 0x29
{
    d78e:	b538      	push	{r3, r4, r5, lr}
    d790:	460d      	mov	r5, r1
    d792:	4604      	mov	r4, r0
	switch (reason) {
    d794:	d819      	bhi.n	d7ca <ll_terminate_ind_send+0x3e>
    d796:	2904      	cmp	r1, #4
    d798:	d919      	bls.n	d7ce <ll_terminate_ind_send+0x42>
    d79a:	1f4b      	subs	r3, r1, #5
    d79c:	2b24      	cmp	r3, #36	; 0x24
    d79e:	d816      	bhi.n	d7ce <ll_terminate_ind_send+0x42>
    d7a0:	e8df f003 	tbb	[pc, r3]
    d7a4:	15151517 	.word	0x15151517
    d7a8:	15151515 	.word	0x15151515
    d7ac:	15151515 	.word	0x15151515
    d7b0:	17171515 	.word	0x17171515
    d7b4:	15151517 	.word	0x15151517
    d7b8:	15151715 	.word	0x15151715
    d7bc:	15151515 	.word	0x15151515
    d7c0:	15151515 	.word	0x15151515
    d7c4:	15151515 	.word	0x15151515
    d7c8:	17          	.byte	0x17
    d7c9:	00          	.byte	0x00
    d7ca:	293b      	cmp	r1, #59	; 0x3b
    d7cc:	d001      	beq.n	d7d2 <ll_terminate_ind_send+0x46>
    d7ce:	2012      	movs	r0, #18
}
    d7d0:	bd38      	pop	{r3, r4, r5, pc}
	if (handle >= CONFIG_BT_MAX_CONN) {
    d7d2:	b98c      	cbnz	r4, d7f8 <ll_terminate_ind_send+0x6c>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    d7d4:	4622      	mov	r2, r4
    d7d6:	4809      	ldr	r0, [pc, #36]	; (d7fc <ll_terminate_ind_send+0x70>)
    d7d8:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    d7dc:	f7fa feda 	bl	8594 <mem_get>
	if (conn->lll.handle != handle) {
    d7e0:	8d02      	ldrh	r2, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    d7e2:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
    d7e4:	b942      	cbnz	r2, d7f8 <ll_terminate_ind_send+0x6c>
	conn->llcp_terminate.req++;
    d7e6:	f890 2118 	ldrb.w	r2, [r0, #280]	; 0x118
	conn->llcp_terminate.reason_own = reason;
    d7ea:	f880 511a 	strb.w	r5, [r0, #282]	; 0x11a
	conn->llcp_terminate.req++;
    d7ee:	3201      	adds	r2, #1
    d7f0:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
	return 0;
    d7f4:	4620      	mov	r0, r4
}
    d7f6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    d7f8:	2002      	movs	r0, #2
}
    d7fa:	bd38      	pop	{r3, r4, r5, pc}
    d7fc:	20000be0 	.word	0x20000be0

0000d800 <ll_feature_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    d800:	b9b0      	cbnz	r0, d830 <ll_feature_req_send+0x30>
{
    d802:	b508      	push	{r3, lr}
    d804:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    d806:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    d80a:	480a      	ldr	r0, [pc, #40]	; (d834 <ll_feature_req_send+0x34>)
    d80c:	f7fa fec2 	bl	8594 <mem_get>
	if (conn->lll.handle != handle) {
    d810:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    d812:	b95b      	cbnz	r3, d82c <ll_feature_req_send+0x2c>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
    d814:	f890 20f9 	ldrb.w	r2, [r0, #249]	; 0xf9
    d818:	f890 10f8 	ldrb.w	r1, [r0, #248]	; 0xf8
    d81c:	428a      	cmp	r2, r1
	conn->llcp_feature.req++;
    d81e:	bf05      	ittet	eq
    d820:	3201      	addeq	r2, #1
    d822:	f880 20f8 	strbeq.w	r2, [r0, #248]	; 0xf8
		return BT_HCI_ERR_CMD_DISALLOWED;
    d826:	200c      	movne	r0, #12
	return 0;
    d828:	4618      	moveq	r0, r3
}
    d82a:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    d82c:	2002      	movs	r0, #2
}
    d82e:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    d830:	2002      	movs	r0, #2
}
    d832:	4770      	bx	lr
    d834:	20000be0 	.word	0x20000be0

0000d838 <ll_version_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    d838:	b9b0      	cbnz	r0, d868 <ll_version_ind_send+0x30>
{
    d83a:	b508      	push	{r3, lr}
    d83c:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    d83e:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    d842:	480a      	ldr	r0, [pc, #40]	; (d86c <ll_version_ind_send+0x34>)
    d844:	f7fa fea6 	bl	8594 <mem_get>
	if (conn->lll.handle != handle) {
    d848:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    d84a:	b95b      	cbnz	r3, d864 <ll_version_ind_send+0x2c>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
    d84c:	f890 2111 	ldrb.w	r2, [r0, #273]	; 0x111
    d850:	f890 1110 	ldrb.w	r1, [r0, #272]	; 0x110
    d854:	428a      	cmp	r2, r1
	conn->llcp_version.req++;
    d856:	bf05      	ittet	eq
    d858:	3201      	addeq	r2, #1
    d85a:	f880 2110 	strbeq.w	r2, [r0, #272]	; 0x110
		return BT_HCI_ERR_CMD_DISALLOWED;
    d85e:	200c      	movne	r0, #12
	return 0;
    d860:	4618      	moveq	r0, r3
}
    d862:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    d864:	2002      	movs	r0, #2
}
    d866:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    d868:	2002      	movs	r0, #2
}
    d86a:	4770      	bx	lr
    d86c:	20000be0 	.word	0x20000be0

0000d870 <ll_length_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    d870:	2800      	cmp	r0, #0
    d872:	d148      	bne.n	d906 <ll_length_req_send+0x96>
{
    d874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d876:	460d      	mov	r5, r1
    d878:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    d87a:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    d87e:	4602      	mov	r2, r0
    d880:	4822      	ldr	r0, [pc, #136]	; (d90c <ll_length_req_send+0x9c>)
    d882:	f7fa fe87 	bl	8594 <mem_get>
	if (conn->lll.handle != handle) {
    d886:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    d888:	bb43      	cbnz	r3, d8dc <ll_length_req_send+0x6c>
	if (conn->llcp_length.disabled ||
    d88a:	f890 3186 	ldrb.w	r3, [r0, #390]	; 0x186
    d88e:	f013 0108 	ands.w	r1, r3, #8
    d892:	d125      	bne.n	d8e0 <ll_length_req_send+0x70>
	    (conn->common.fex_valid &&
    d894:	f890 20ba 	ldrb.w	r2, [r0, #186]	; 0xba
	if (conn->llcp_length.disabled ||
    d898:	07d2      	lsls	r2, r2, #31
    d89a:	d507      	bpl.n	d8ac <ll_length_req_send+0x3c>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_DLE)))) {
    d89c:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
    d8a0:	460f      	mov	r7, r1
    d8a2:	f002 0620 	and.w	r6, r2, #32
	    (conn->common.fex_valid &&
    d8a6:	ea56 0207 	orrs.w	r2, r6, r7
    d8aa:	d019      	beq.n	d8e0 <ll_length_req_send+0x70>
	if (conn->llcp_length.req != conn->llcp_length.ack) {
    d8ac:	f890 1184 	ldrb.w	r1, [r0, #388]	; 0x184
    d8b0:	f890 2185 	ldrb.w	r2, [r0, #389]	; 0x185
    d8b4:	428a      	cmp	r2, r1
    d8b6:	d017      	beq.n	d8e8 <ll_length_req_send+0x78>
		switch (conn->llcp_length.state) {
    d8b8:	f003 0307 	and.w	r3, r3, #7
    d8bc:	2b03      	cmp	r3, #3
    d8be:	d004      	beq.n	d8ca <ll_length_req_send+0x5a>
    d8c0:	3303      	adds	r3, #3
    d8c2:	f003 0307 	and.w	r3, r3, #7
    d8c6:	2b01      	cmp	r3, #1
    d8c8:	d80c      	bhi.n	d8e4 <ll_length_req_send+0x74>
			if (!conn->llcp_length.cache.tx_octets) {
    d8ca:	f8b0 3190 	ldrh.w	r3, [r0, #400]	; 0x190
    d8ce:	b94b      	cbnz	r3, d8e4 <ll_length_req_send+0x74>
				conn->llcp_length.cache.tx_octets = tx_octets;
    d8d0:	f8a0 5190 	strh.w	r5, [r0, #400]	; 0x190
				conn->llcp_length.cache.tx_time = tx_time;
    d8d4:	f8a0 4192 	strh.w	r4, [r0, #402]	; 0x192
				return 0;
    d8d8:	4618      	mov	r0, r3
}
    d8da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    d8dc:	2002      	movs	r0, #2
}
    d8de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    d8e0:	201a      	movs	r0, #26
}
    d8e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
    d8e4:	200c      	movs	r0, #12
}
    d8e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    d8e8:	f890 3186 	ldrb.w	r3, [r0, #390]	; 0x186
	conn->llcp_length.tx_octets = tx_octets;
    d8ec:	f8a0 518a 	strh.w	r5, [r0, #394]	; 0x18a
	conn->llcp_length.req++;
    d8f0:	3201      	adds	r2, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    d8f2:	f36f 0302 	bfc	r3, #0, #3
	conn->llcp_length.req++;
    d8f6:	f880 2184 	strb.w	r2, [r0, #388]	; 0x184
	conn->llcp_length.tx_time = tx_time;
    d8fa:	f8a0 418e 	strh.w	r4, [r0, #398]	; 0x18e
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    d8fe:	f880 3186 	strb.w	r3, [r0, #390]	; 0x186
	return 0;
    d902:	2000      	movs	r0, #0
}
    d904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    d906:	2002      	movs	r0, #2
}
    d908:	4770      	bx	lr
    d90a:	bf00      	nop
    d90c:	20000be0 	.word	0x20000be0

0000d910 <ll_length_default_get>:
	*max_tx_octets = default_tx_octets;
    d910:	4a03      	ldr	r2, [pc, #12]	; (d920 <ll_length_default_get+0x10>)
	*max_tx_time = default_tx_time;
    d912:	4b04      	ldr	r3, [pc, #16]	; (d924 <ll_length_default_get+0x14>)
	*max_tx_octets = default_tx_octets;
    d914:	8812      	ldrh	r2, [r2, #0]
	*max_tx_time = default_tx_time;
    d916:	881b      	ldrh	r3, [r3, #0]
	*max_tx_octets = default_tx_octets;
    d918:	8002      	strh	r2, [r0, #0]
	*max_tx_time = default_tx_time;
    d91a:	800b      	strh	r3, [r1, #0]
}
    d91c:	4770      	bx	lr
    d91e:	bf00      	nop
    d920:	20002234 	.word	0x20002234
    d924:	20002236 	.word	0x20002236

0000d928 <ll_length_default_set>:
	default_tx_octets = max_tx_octets;
    d928:	4a02      	ldr	r2, [pc, #8]	; (d934 <ll_length_default_set+0xc>)
	default_tx_time = max_tx_time;
    d92a:	4b03      	ldr	r3, [pc, #12]	; (d938 <ll_length_default_set+0x10>)
	default_tx_octets = max_tx_octets;
    d92c:	8010      	strh	r0, [r2, #0]
	default_tx_time = max_tx_time;
    d92e:	8019      	strh	r1, [r3, #0]
}
    d930:	2000      	movs	r0, #0
    d932:	4770      	bx	lr
    d934:	20002234 	.word	0x20002234
    d938:	20002236 	.word	0x20002236

0000d93c <ll_length_max_get>:
{
    d93c:	b430      	push	{r4, r5}
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
    d93e:	251b      	movs	r5, #27
	*max_tx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
    d940:	f44f 74a0 	mov.w	r4, #320	; 0x140
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
    d944:	8005      	strh	r5, [r0, #0]
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
    d946:	8015      	strh	r5, [r2, #0]
	*max_tx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
    d948:	800c      	strh	r4, [r1, #0]
	*max_rx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
    d94a:	801c      	strh	r4, [r3, #0]
}
    d94c:	bc30      	pop	{r4, r5}
    d94e:	4770      	bx	lr

0000d950 <ll_phy_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    d950:	b9c0      	cbnz	r0, d984 <ll_phy_get+0x34>
{
    d952:	b538      	push	{r3, r4, r5, lr}
    d954:	460d      	mov	r5, r1
    d956:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    d958:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    d95c:	4602      	mov	r2, r0
    d95e:	480a      	ldr	r0, [pc, #40]	; (d988 <ll_phy_get+0x38>)
    d960:	f7fa fe18 	bl	8594 <mem_get>
    d964:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
    d966:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    d968:	b950      	cbnz	r0, d980 <ll_phy_get+0x30>
	*tx = conn->lll.phy_tx;
    d96a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
    d96e:	f3c2 0202 	ubfx	r2, r2, #0, #3
    d972:	702a      	strb	r2, [r5, #0]
	*rx = conn->lll.phy_rx;
    d974:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
    d978:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d97c:	7023      	strb	r3, [r4, #0]
}
    d97e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    d980:	2002      	movs	r0, #2
}
    d982:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    d984:	2002      	movs	r0, #2
}
    d986:	4770      	bx	lr
    d988:	20000be0 	.word	0x20000be0

0000d98c <ll_phy_default_set>:
	default_phy_tx = tx;
    d98c:	4a02      	ldr	r2, [pc, #8]	; (d998 <ll_phy_default_set+0xc>)
	default_phy_rx = rx;
    d98e:	4b03      	ldr	r3, [pc, #12]	; (d99c <ll_phy_default_set+0x10>)
	default_phy_tx = tx;
    d990:	7010      	strb	r0, [r2, #0]
	default_phy_rx = rx;
    d992:	7019      	strb	r1, [r3, #0]
}
    d994:	2000      	movs	r0, #0
    d996:	4770      	bx	lr
    d998:	2000224d 	.word	0x2000224d
    d99c:	2000224c 	.word	0x2000224c

0000d9a0 <ll_phy_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    d9a0:	2800      	cmp	r0, #0
    d9a2:	d140      	bne.n	da26 <ll_phy_req_send+0x86>
{
    d9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d9a6:	460c      	mov	r4, r1
    d9a8:	4616      	mov	r6, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    d9aa:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    d9ae:	4602      	mov	r2, r0
    d9b0:	481e      	ldr	r0, [pc, #120]	; (da2c <ll_phy_req_send+0x8c>)
    d9b2:	461f      	mov	r7, r3
    d9b4:	f7fa fdee 	bl	8594 <mem_get>
	if (conn->lll.handle != handle) {
    d9b8:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    d9ba:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
    d9bc:	bb6b      	cbnz	r3, da1a <ll_phy_req_send+0x7a>
	if (conn->llcp_phy.disabled ||
    d9be:	f890 0197 	ldrb.w	r0, [r0, #407]	; 0x197
    d9c2:	f010 0008 	ands.w	r0, r0, #8
    d9c6:	d12a      	bne.n	da1e <ll_phy_req_send+0x7e>
	    (conn->common.fex_valid &&
    d9c8:	f895 30ba 	ldrb.w	r3, [r5, #186]	; 0xba
	if (conn->llcp_phy.disabled ||
    d9cc:	07db      	lsls	r3, r3, #31
    d9ce:	d506      	bpl.n	d9de <ll_phy_req_send+0x3e>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_PHY_2M)) &&
    d9d0:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
    d9d4:	4603      	mov	r3, r0
    d9d6:	f401 6210 	and.w	r2, r1, #2304	; 0x900
    d9da:	4313      	orrs	r3, r2
    d9dc:	d01f      	beq.n	da1e <ll_phy_req_send+0x7e>
	if (conn->llcp_phy.req != conn->llcp_phy.ack) {
    d9de:	f895 3194 	ldrb.w	r3, [r5, #404]	; 0x194
    d9e2:	f895 2195 	ldrb.w	r2, [r5, #405]	; 0x195
    d9e6:	429a      	cmp	r2, r3
    d9e8:	d11b      	bne.n	da22 <ll_phy_req_send+0x82>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
    d9ea:	f004 0407 	and.w	r4, r4, #7
    d9ee:	00a4      	lsls	r4, r4, #2
    d9f0:	f8b5 1196 	ldrh.w	r1, [r5, #406]	; 0x196
    d9f4:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
    d9f8:	f007 0307 	and.w	r3, r7, #7
    d9fc:	ea44 1343 	orr.w	r3, r4, r3, lsl #5
    da00:	f006 0601 	and.w	r6, r6, #1
    da04:	ea43 2346 	orr.w	r3, r3, r6, lsl #9
    da08:	f401 4179 	and.w	r1, r1, #63744	; 0xf900
	conn->llcp_phy.req++;
    da0c:	3201      	adds	r2, #1
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
    da0e:	430b      	orrs	r3, r1
	conn->llcp_phy.req++;
    da10:	f885 2194 	strb.w	r2, [r5, #404]	; 0x194
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
    da14:	f8a5 3196 	strh.w	r3, [r5, #406]	; 0x196
}
    da18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    da1a:	2002      	movs	r0, #2
}
    da1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    da1e:	201a      	movs	r0, #26
}
    da20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    da22:	200c      	movs	r0, #12
}
    da24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    da26:	2002      	movs	r0, #2
}
    da28:	4770      	bx	lr
    da2a:	bf00      	nop
    da2c:	20000be0 	.word	0x20000be0

0000da30 <ll_apto_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    da30:	b9d8      	cbnz	r0, da6a <ll_apto_get+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    da32:	4602      	mov	r2, r0
{
    da34:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    da36:	480e      	ldr	r0, [pc, #56]	; (da70 <ll_apto_get+0x40>)
    da38:	460c      	mov	r4, r1
    da3a:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    da3e:	f7fa fda9 	bl	8594 <mem_get>
    da42:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
    da44:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    da46:	b970      	cbnz	r0, da66 <ll_apto_get+0x36>
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
    da48:	f8b2 10b2 	ldrh.w	r1, [r2, #178]	; 0xb2
    da4c:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
    da4e:	4a09      	ldr	r2, [pc, #36]	; (da74 <ll_apto_get+0x44>)
    da50:	fb03 f301 	mul.w	r3, r3, r1
    da54:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
    da58:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    da5c:	fba2 2303 	umull	r2, r3, r2, r3
    da60:	099b      	lsrs	r3, r3, #6
    da62:	8023      	strh	r3, [r4, #0]
}
    da64:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    da66:	2002      	movs	r0, #2
}
    da68:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    da6a:	2002      	movs	r0, #2
}
    da6c:	4770      	bx	lr
    da6e:	bf00      	nop
    da70:	20000be0 	.word	0x20000be0
    da74:	10624dd3 	.word	0x10624dd3

0000da78 <ll_apto_set>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    da78:	b9d8      	cbnz	r0, dab2 <ll_apto_set+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    da7a:	4602      	mov	r2, r0
{
    da7c:	b538      	push	{r3, r4, r5, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    da7e:	480e      	ldr	r0, [pc, #56]	; (dab8 <ll_apto_set+0x40>)
    da80:	460d      	mov	r5, r1
    da82:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    da86:	f7fa fd85 	bl	8594 <mem_get>
    da8a:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
    da8c:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    da8e:	b970      	cbnz	r0, daae <ll_apto_set+0x36>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
    da90:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
    da92:	f240 44e2 	movw	r4, #1250	; 0x4e2
    da96:	fb04 f403 	mul.w	r4, r4, r3
    da9a:	f242 7310 	movw	r3, #10000	; 0x2710
    da9e:	fb03 4305 	mla	r3, r3, r5, r4
    daa2:	3b01      	subs	r3, #1
    daa4:	fbb3 f3f4 	udiv	r3, r3, r4
    daa8:	f8a2 30b2 	strh.w	r3, [r2, #178]	; 0xb2
}
    daac:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    daae:	2002      	movs	r0, #2
}
    dab0:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    dab2:	2002      	movs	r0, #2
}
    dab4:	4770      	bx	lr
    dab6:	bf00      	nop
    dab8:	20000be0 	.word	0x20000be0

0000dabc <ull_conn_init>:
	err = init_reset();
    dabc:	f7ff b9fa 	b.w	ceb4 <init_reset>

0000dac0 <ull_conn_reset>:
{
    dac0:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    dac2:	2200      	movs	r2, #0
    dac4:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    dac8:	4813      	ldr	r0, [pc, #76]	; (db18 <ull_conn_reset+0x58>)
    daca:	f7fa fd63 	bl	8594 <mem_get>
    dace:	4604      	mov	r4, r0
	err = ull_ticker_stop_with_mark(TICKER_ID_CONN_BASE + handle,
    dad0:	f100 021c 	add.w	r2, r0, #28
    dad4:	4601      	mov	r1, r0
    dad6:	2003      	movs	r0, #3
    dad8:	f7fe fec0 	bl	c85c <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
    dadc:	b108      	cbz	r0, dae2 <ull_conn_reset+0x22>
    dade:	3045      	adds	r0, #69	; 0x45
    dae0:	d10b      	bne.n	dafa <ull_conn_reset+0x3a>
	MFIFO_INIT(conn_tx);
    dae2:	480e      	ldr	r0, [pc, #56]	; (db1c <ull_conn_reset+0x5c>)
	MFIFO_INIT(conn_ack);
    dae4:	490e      	ldr	r1, [pc, #56]	; (db20 <ull_conn_reset+0x60>)
	conn_upd_curr = NULL;
    dae6:	4a0f      	ldr	r2, [pc, #60]	; (db24 <ull_conn_reset+0x64>)
	conn->lll.link_tx_free = NULL;
    dae8:	2300      	movs	r3, #0
	MFIFO_INIT(conn_tx);
    daea:	8043      	strh	r3, [r0, #2]
	MFIFO_INIT(conn_ack);
    daec:	804b      	strh	r3, [r1, #2]
	conn->lll.link_tx_free = NULL;
    daee:	65a3      	str	r3, [r4, #88]	; 0x58
}
    daf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	conn_upd_curr = NULL;
    daf4:	6013      	str	r3, [r2, #0]
	err = init_reset();
    daf6:	f7ff b9dd 	b.w	ceb4 <init_reset>
	LL_ASSERT(err == 0 || err == -EALREADY);
    dafa:	4a0b      	ldr	r2, [pc, #44]	; (db28 <ull_conn_reset+0x68>)
    dafc:	490b      	ldr	r1, [pc, #44]	; (db2c <ull_conn_reset+0x6c>)
    dafe:	480c      	ldr	r0, [pc, #48]	; (db30 <ull_conn_reset+0x70>)
    db00:	f240 732d 	movw	r3, #1837	; 0x72d
    db04:	f008 f91c 	bl	15d40 <printk>
    db08:	4040      	eors	r0, r0
    db0a:	f380 8811 	msr	BASEPRI, r0
    db0e:	f04f 0003 	mov.w	r0, #3
    db12:	df02      	svc	2
    db14:	e7e5      	b.n	dae2 <ull_conn_reset+0x22>
    db16:	bf00      	nop
    db18:	20000be0 	.word	0x20000be0
    db1c:	20000408 	.word	0x20000408
    db20:	200003c4 	.word	0x200003c4
    db24:	20001a0c 	.word	0x20001a0c
    db28:	00019cec 	.word	0x00019cec
    db2c:	00019cd4 	.word	0x00019cd4
    db30:	000199cc 	.word	0x000199cc

0000db34 <ull_conn_default_tx_octets_get>:
	return default_tx_octets;
    db34:	4b01      	ldr	r3, [pc, #4]	; (db3c <ull_conn_default_tx_octets_get+0x8>)
}
    db36:	8818      	ldrh	r0, [r3, #0]
    db38:	4770      	bx	lr
    db3a:	bf00      	nop
    db3c:	20002234 	.word	0x20002234

0000db40 <ull_conn_default_tx_time_get>:
	return default_tx_time;
    db40:	4b01      	ldr	r3, [pc, #4]	; (db48 <ull_conn_default_tx_time_get+0x8>)
}
    db42:	8818      	ldrh	r0, [r3, #0]
    db44:	4770      	bx	lr
    db46:	bf00      	nop
    db48:	20002236 	.word	0x20002236

0000db4c <ull_conn_default_phy_tx_get>:
	return default_phy_tx;
    db4c:	4b01      	ldr	r3, [pc, #4]	; (db54 <ull_conn_default_phy_tx_get+0x8>)
}
    db4e:	7818      	ldrb	r0, [r3, #0]
    db50:	4770      	bx	lr
    db52:	bf00      	nop
    db54:	2000224d 	.word	0x2000224d

0000db58 <ull_conn_default_phy_rx_get>:
	return default_phy_rx;
    db58:	4b01      	ldr	r3, [pc, #4]	; (db60 <ull_conn_default_phy_rx_get+0x8>)
}
    db5a:	7818      	ldrb	r0, [r3, #0]
    db5c:	4770      	bx	lr
    db5e:	bf00      	nop
    db60:	2000224c 	.word	0x2000224c

0000db64 <ull_conn_setup>:
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
    db64:	688b      	ldr	r3, [r1, #8]
    db66:	685b      	ldr	r3, [r3, #4]
{
    db68:	b510      	push	{r4, lr}
	switch (lll->role) {
    db6a:	7f5c      	ldrb	r4, [r3, #29]
    db6c:	09e4      	lsrs	r4, r4, #7
    db6e:	d105      	bne.n	db7c <ull_conn_setup+0x18>
		ull_master_setup(link, rx, ftr, lll);
    db70:	460a      	mov	r2, r1
}
    db72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ull_master_setup(link, rx, ftr, lll);
    db76:	3208      	adds	r2, #8
    db78:	f7f4 be02 	b.w	2780 <ull_master_setup>
		LL_ASSERT(0);
    db7c:	4a06      	ldr	r2, [pc, #24]	; (db98 <ull_conn_setup+0x34>)
    db7e:	4907      	ldr	r1, [pc, #28]	; (db9c <ull_conn_setup+0x38>)
    db80:	4807      	ldr	r0, [pc, #28]	; (dba0 <ull_conn_setup+0x3c>)
    db82:	f240 3341 	movw	r3, #833	; 0x341
    db86:	f008 f8db 	bl	15d40 <printk>
    db8a:	4040      	eors	r0, r0
    db8c:	f380 8811 	msr	BASEPRI, r0
    db90:	f04f 0003 	mov.w	r0, #3
    db94:	df02      	svc	2
}
    db96:	bd10      	pop	{r4, pc}
    db98:	00019cec 	.word	0x00019cec
    db9c:	00019a2c 	.word	0x00019a2c
    dba0:	000199cc 	.word	0x000199cc

0000dba4 <ull_conn_rx>:
	conn = ll_connected_get((*rx)->hdr.handle);
    dba4:	680b      	ldr	r3, [r1, #0]
	if (handle >= CONFIG_BT_MAX_CONN) {
    dba6:	88da      	ldrh	r2, [r3, #6]
    dba8:	2a00      	cmp	r2, #0
    dbaa:	f040 80c8 	bne.w	dd3e <ull_conn_rx+0x19a>
{
    dbae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dbb2:	460c      	mov	r4, r1
    dbb4:	b085      	sub	sp, #20
    dbb6:	4607      	mov	r7, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    dbb8:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    dbbc:	48bd      	ldr	r0, [pc, #756]	; (deb4 <ull_conn_rx+0x310>)
    dbbe:	f7fa fce9 	bl	8594 <mem_get>
	if (conn->lll.handle != handle) {
    dbc2:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    dbc4:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
    dbc6:	2b00      	cmp	r3, #0
    dbc8:	f040 80fa 	bne.w	ddc0 <ull_conn_rx+0x21c>
	pdu_rx = (void *)(*rx)->pdu;
    dbcc:	6826      	ldr	r6, [r4, #0]
	switch (pdu_rx->ll_id) {
    dbce:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    dbd2:	7f32      	ldrb	r2, [r6, #28]
    dbd4:	f002 0203 	and.w	r2, r2, #3
    dbd8:	2a03      	cmp	r2, #3
    dbda:	f001 0001 	and.w	r0, r1, #1
    dbde:	d129      	bne.n	dc34 <ull_conn_rx+0x90>
			  struct pdu_data *pdu_rx, struct ll_conn *conn)
{
	int nack = 0;
	uint8_t opcode;

	opcode = pdu_rx->llctrl.opcode;
    dbe0:	f896 901f 	ldrb.w	r9, [r6, #31]

#if defined(CONFIG_BT_CTLR_LE_ENC)
	/* FIXME: do check in individual case to reduce CPU time */
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
    dbe4:	2800      	cmp	r0, #0
    dbe6:	d03b      	beq.n	dc60 <ull_conn_rx+0xbc>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
    dbe8:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
    dbec:	2b00      	cmp	r3, #0
    dbee:	f001 0004 	and.w	r0, r1, #4
    dbf2:	f2c0 8561 	blt.w	e6b8 <ull_conn_rx+0xb14>
	return (!conn->lll.role &&
    dbf6:	2800      	cmp	r0, #0
    dbf8:	f040 84b2 	bne.w	e560 <ull_conn_rx+0x9bc>
		((!conn->llcp_enc.refresh &&
    dbfc:	f1b9 0f02 	cmp.w	r9, #2
    dc00:	f000 8376 	beq.w	e2f0 <ull_conn_rx+0x74c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    dc04:	f1b9 0f05 	cmp.w	r9, #5
    dc08:	f000 842b 	beq.w	e462 <ull_conn_rx+0x8be>
    dc0c:	f1b9 0f06 	cmp.w	r9, #6
    dc10:	f000 857f 	beq.w	e712 <ull_conn_rx+0xb6e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    dc14:	f1b9 0f0d 	cmp.w	r9, #13
    dc18:	f000 8320 	beq.w	e25c <ull_conn_rx+0x6b8>
    dc1c:	f1b9 0f11 	cmp.w	r9, #17
    dc20:	f000 817f 	beq.w	df22 <ull_conn_rx+0x37e>
		conn->llcp_terminate.reason_peer =
    dc24:	233d      	movs	r3, #61	; 0x3d
    dc26:	f885 311b 	strb.w	r3, [r5, #283]	; 0x11b
			BT_HCI_ERR_TERM_DUE_TO_MIC_FAIL;

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    dc2a:	6823      	ldr	r3, [r4, #0]
    dc2c:	2201      	movs	r2, #1
    dc2e:	711a      	strb	r2, [r3, #4]

		return 0;
    dc30:	2000      	movs	r0, #0
    dc32:	e008      	b.n	dc46 <ull_conn_rx+0xa2>
	switch (pdu_rx->ll_id) {
    dc34:	b952      	cbnz	r2, dc4c <ull_conn_rx+0xa8>
		if (conn->llcp_enc.pause_rx) {
    dc36:	b118      	cbz	r0, dc40 <ull_conn_rx+0x9c>
			conn->llcp_terminate.reason_peer =
    dc38:	233d      	movs	r3, #61	; 0x3d
    dc3a:	f885 311b 	strb.w	r3, [r5, #283]	; 0x11b
    dc3e:	6826      	ldr	r6, [r4, #0]
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    dc40:	2301      	movs	r3, #1
    dc42:	7133      	strb	r3, [r6, #4]
	return 0;
    dc44:	2000      	movs	r0, #0
}
    dc46:	b005      	add	sp, #20
    dc48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->llcp_enc.pause_rx) {
    dc4c:	2800      	cmp	r0, #0
    dc4e:	d0f9      	beq.n	dc44 <ull_conn_rx+0xa0>
			conn->llcp_terminate.reason_peer =
    dc50:	223d      	movs	r2, #61	; 0x3d
    dc52:	f885 211b 	strb.w	r2, [r5, #283]	; 0x11b
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    dc56:	6822      	ldr	r2, [r4, #0]
    dc58:	2101      	movs	r1, #1
	return 0;
    dc5a:	4618      	mov	r0, r3
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    dc5c:	7111      	strb	r1, [r2, #4]
    dc5e:	e7f2      	b.n	dc46 <ull_conn_rx+0xa2>
	}
#endif /* CONFIG_BT_CTLR_LE_ENC */

	switch (opcode) {
    dc60:	f1a9 0302 	sub.w	r3, r9, #2
    dc64:	2b17      	cmp	r3, #23
    dc66:	d81d      	bhi.n	dca4 <ull_conn_rx+0x100>
    dc68:	e8df f013 	tbh	[pc, r3, lsl #1]
    dc6c:	001c0342 	.word	0x001c0342
    dc70:	03f603cd 	.word	0x03f603cd
    dc74:	034e0460 	.word	0x034e0460
    dc78:	0378001c 	.word	0x0378001c
    dc7c:	0415001c 	.word	0x0415001c
    dc80:	02f8039e 	.word	0x02f8039e
    dc84:	022b023c 	.word	0x022b023c
    dc88:	015b0190 	.word	0x015b0190
    dc8c:	022102d3 	.word	0x022102d3
    dc90:	029a029a 	.word	0x029a029a
    dc94:	00e7012a 	.word	0x00e7012a
    dc98:	00b1001c 	.word	0x00b1001c
		nack = pause_enc_rsp_send(conn, *rx, 1);
		break;
#endif /* CONFIG_BT_PERIPHERAL */

	case PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP:
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
    dc9c:	7f73      	ldrb	r3, [r6, #29]
    dc9e:	2b01      	cmp	r3, #1
    dca0:	f000 8402 	beq.w	e4a8 <ull_conn_rx+0x904>
    dca4:	f895 00ba 	ldrb.w	r0, [r5, #186]	; 0xba
    dca8:	f000 0402 	and.w	r4, r0, #2
	if (conn->common.txn_lock) {
    dcac:	2c00      	cmp	r4, #0
    dcae:	d1c7      	bne.n	dc40 <ull_conn_rx+0x9c>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    dcb0:	4881      	ldr	r0, [pc, #516]	; (deb8 <ull_conn_rx+0x314>)
    dcb2:	f7fa fc3d 	bl	8530 <mem_acquire>
	if (!tx) {
    dcb6:	2800      	cmp	r0, #0
    dcb8:	f000 8527 	beq.w	e70a <ull_conn_rx+0xb66>
	conn->common.txn_lock = 1U;
    dcbc:	f895 10ba 	ldrb.w	r1, [r5, #186]	; 0xba
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    dcc0:	7903      	ldrb	r3, [r0, #4]
	conn->common.txn_lock = 1U;
    dcc2:	f041 0102 	orr.w	r1, r1, #2
    dcc6:	f885 10ba 	strb.w	r1, [r5, #186]	; 0xba
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
    dcca:	2102      	movs	r1, #2
    dccc:	7141      	strb	r1, [r0, #5]
	    conn->tx_head &&
    dcce:	f8d5 119c 	ldr.w	r1, [r5, #412]	; 0x19c
	pdu->llctrl.unknown_rsp.type = type;
    dcd2:	f880 9008 	strb.w	r9, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    dcd6:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    dcda:	2207      	movs	r2, #7
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    dcdc:	7103      	strb	r3, [r0, #4]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    dcde:	71c2      	strb	r2, [r0, #7]
	if (
    dce0:	b1e9      	cbz	r1, dd1e <ull_conn_rx+0x17a>
	    !conn->llcp_enc.pause_tx &&
    dce2:	f895 313e 	ldrb.w	r3, [r5, #318]	; 0x13e
	    conn->tx_head &&
    dce6:	079a      	lsls	r2, r3, #30
    dce8:	d419      	bmi.n	dd1e <ull_conn_rx+0x17a>
	    !conn->llcp_phy.pause_tx &&
    dcea:	f895 3197 	ldrb.w	r3, [r5, #407]	; 0x197
    dcee:	07db      	lsls	r3, r3, #31
    dcf0:	d415      	bmi.n	dd1e <ull_conn_rx+0x17a>
		if (conn->tx_head == conn->tx_data) {
    dcf2:	f8d5 31a8 	ldr.w	r3, [r5, #424]	; 0x1a8
    dcf6:	4299      	cmp	r1, r3
		if (!conn->tx_ctrl) {
    dcf8:	f8d5 31a0 	ldr.w	r3, [r5, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
    dcfc:	f000 850f 	beq.w	e71e <ull_conn_rx+0xb7a>
		} else if (!conn->tx_ctrl) {
    dd00:	2b00      	cmp	r3, #0
    dd02:	f000 8528 	beq.w	e756 <ull_conn_rx+0xbb2>
    dd06:	f8d5 11a4 	ldr.w	r1, [r5, #420]	; 0x1a4
	tx->next = conn->tx_ctrl_last->next;
    dd0a:	680b      	ldr	r3, [r1, #0]
    dd0c:	6003      	str	r3, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    dd0e:	6008      	str	r0, [r1, #0]
	if (!tx->next) {
    dd10:	6801      	ldr	r1, [r0, #0]
	conn->tx_ctrl_last = tx;
    dd12:	f8c5 01a4 	str.w	r0, [r5, #420]	; 0x1a4
	if (!tx->next) {
    dd16:	2900      	cmp	r1, #0
    dd18:	d192      	bne.n	dc40 <ull_conn_rx+0x9c>
    dd1a:	f000 bc03 	b.w	e524 <ull_conn_rx+0x980>
		if (!conn->tx_ctrl) {
    dd1e:	f8d5 31a0 	ldr.w	r3, [r5, #416]	; 0x1a0
    dd22:	2b00      	cmp	r3, #0
    dd24:	f000 8429 	beq.w	e57a <ull_conn_rx+0x9d6>
	tx->next = conn->tx_ctrl_last->next;
    dd28:	f8d5 31a4 	ldr.w	r3, [r5, #420]	; 0x1a4
    dd2c:	681a      	ldr	r2, [r3, #0]
    dd2e:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    dd30:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    dd32:	6801      	ldr	r1, [r0, #0]
    dd34:	f8c5 01a4 	str.w	r0, [r5, #420]	; 0x1a4
	if (!tx->next) {
    dd38:	2900      	cmp	r1, #0
    dd3a:	d181      	bne.n	dc40 <ull_conn_rx+0x9c>
    dd3c:	e3f2      	b.n	e524 <ull_conn_rx+0x980>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    dd3e:	2201      	movs	r2, #1
    dd40:	711a      	strb	r2, [r3, #4]
		return 0;
    dd42:	2000      	movs	r0, #0
}
    dd44:	4770      	bx	lr
			} else {
				struct pdu_data_llctrl *c = &pdu_rx->llctrl;
				struct pdu_data_llctrl_phy_req *p =
					&c->phy_req;

				conn->llcp_phy.state =
    dd46:	f895 3196 	ldrb.w	r3, [r5, #406]	; 0x196
					LLCP_PHY_STATE_UPD;

				if (conn->llcp_phy.ack ==
    dd4a:	4281      	cmp	r1, r0
				conn->llcp_phy.state =
    dd4c:	f043 0303 	orr.w	r3, r3, #3
    dd50:	f885 3196 	strb.w	r3, [r5, #406]	; 0x196
				if (conn->llcp_phy.ack ==
    dd54:	d10f      	bne.n	dd76 <ull_conn_rx+0x1d2>
				    conn->llcp_phy.req) {
					conn->llcp_phy.ack--;

					conn->llcp_phy.cmd = 0U;

					conn->llcp_phy.tx =
    dd56:	f8b5 2196 	ldrh.w	r2, [r5, #406]	; 0x196
    dd5a:	4858      	ldr	r0, [pc, #352]	; (debc <ull_conn_rx+0x318>)
						conn->phy_pref_tx;
					conn->llcp_phy.rx =
						conn->phy_pref_rx;
    dd5c:	f895 3198 	ldrb.w	r3, [r5, #408]	; 0x198
					conn->llcp_phy.tx =
    dd60:	4010      	ands	r0, r2
    dd62:	f240 42fc 	movw	r2, #1276	; 0x4fc
    dd66:	ea02 0283 	and.w	r2, r2, r3, lsl #2
    dd6a:	4302      	orrs	r2, r0
					conn->llcp_phy.ack--;
    dd6c:	1e4b      	subs	r3, r1, #1
    dd6e:	f885 3195 	strb.w	r3, [r5, #405]	; 0x195
					conn->llcp_phy.tx =
    dd72:	f8a5 2196 	strh.w	r2, [r5, #406]	; 0x196
				}

				conn->llcp_phy.tx &= p->rx_phys;
				conn->llcp_phy.rx &= p->tx_phys;
    dd76:	f895 2196 	ldrb.w	r2, [r5, #406]	; 0x196
				conn->llcp_phy.tx &= p->rx_phys;
    dd7a:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
				conn->llcp_phy.rx &= p->tx_phys;
    dd7e:	f896 1020 	ldrb.w	r1, [r6, #32]
				conn->llcp_phy.tx &= p->rx_phys;
    dd82:	f3c2 0082 	ubfx	r0, r2, #2, #3
    dd86:	4003      	ands	r3, r0
				conn->llcp_phy.rx &= p->tx_phys;
    dd88:	ea01 1152 	and.w	r1, r1, r2, lsr #5
				conn->llcp_phy.tx &= p->rx_phys;
    dd8c:	009b      	lsls	r3, r3, #2
    dd8e:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    dd92:	f002 0203 	and.w	r2, r2, #3
    dd96:	4313      	orrs	r3, r2

				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
    dd98:	f013 0f1c 	tst.w	r3, #28
				conn->llcp_phy.tx &= p->rx_phys;
    dd9c:	f885 3196 	strb.w	r3, [r5, #406]	; 0x196
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
    dda0:	d002      	beq.n	dda8 <ull_conn_rx+0x204>
    dda2:	f013 0fe0 	tst.w	r3, #224	; 0xe0
    dda6:	d105      	bne.n	ddb4 <ull_conn_rx+0x210>
					conn->llcp_phy.tx = 0;
    dda8:	f895 3196 	ldrb.w	r3, [r5, #406]	; 0x196
    ddac:	f003 0303 	and.w	r3, r3, #3
    ddb0:	f885 3196 	strb.w	r3, [r5, #406]	; 0x196
					conn->llcp_phy.rx = 0;
				}

				/* pause data packet tx */
				conn->llcp_phy.pause_tx = 1U;
    ddb4:	f895 3197 	ldrb.w	r3, [r5, #407]	; 0x197
    ddb8:	f043 0301 	orr.w	r3, r3, #1
    ddbc:	f885 3197 	strb.w	r3, [r5, #407]	; 0x197

				/* Mark for buffer for release */
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    ddc0:	6823      	ldr	r3, [r4, #0]
    ddc2:	2201      	movs	r2, #1
	int nack = 0;
    ddc4:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    ddc6:	711a      	strb	r2, [r3, #4]
}
    ddc8:	b005      	add	sp, #20
    ddca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
#endif /* CONFIG_BT_CTLR_PHY */

#if defined(CONFIG_BT_CTLR_MIN_USED_CHAN)
#if defined(CONFIG_BT_CENTRAL)
	case PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND:
		if (conn->lll.role ||
    ddce:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
    ddd2:	2b00      	cmp	r3, #0
    ddd4:	f6ff af66 	blt.w	dca4 <ull_conn_rx+0x100>
    ddd8:	7f73      	ldrb	r3, [r6, #29]
    ddda:	2b03      	cmp	r3, #3
    dddc:	f47f af62 	bne.w	dca4 <ull_conn_rx+0x100>
		if (!conn->lll.role) {
			struct pdu_data_llctrl_min_used_chans_ind *p =
				&pdu_rx->llctrl.min_used_chans_ind;

#if defined(CONFIG_BT_CTLR_PHY)
			if (!(p->phys & (conn->lll.phy_tx |
    dde0:	f895 1046 	ldrb.w	r1, [r5, #70]	; 0x46
					 conn->lll.phy_rx))) {
    dde4:	f895 3047 	ldrb.w	r3, [r5, #71]	; 0x47
			if (!(p->phys & (conn->lll.phy_tx |
    dde8:	f896 2020 	ldrb.w	r2, [r6, #32]
    ddec:	430b      	orrs	r3, r1
    ddee:	f003 0307 	and.w	r3, r3, #7
    ddf2:	4213      	tst	r3, r2
    ddf4:	f43f af26 	beq.w	dc44 <ull_conn_rx+0xa0>
			if (!(p->phys & 0x01)) {
#endif /* !CONFIG_BT_CTLR_PHY */
				break;
			}

			if (((conn->llcp_req - conn->llcp_ack) & 0x03) ==
    ddf8:	f895 30bb 	ldrb.w	r3, [r5, #187]	; 0xbb
    ddfc:	f895 20bc 	ldrb.w	r2, [r5, #188]	; 0xbc
    de00:	1a9b      	subs	r3, r3, r2
    de02:	f003 0303 	and.w	r3, r3, #3
    de06:	2b02      	cmp	r3, #2
    de08:	f43f af1c 	beq.w	dc44 <ull_conn_rx+0xa0>
			    0x02) {
				break;
			}

			ull_chan_map_get(conn->llcp.chan_map.chm);
    de0c:	f105 00c1 	add.w	r0, r5, #193	; 0xc1
    de10:	f002 fa48 	bl	102a4 <ull_chan_map_get>
			/* conn->llcp.chan_map.instant     = 0; */
			conn->llcp.chan_map.initiate = 1U;

			conn->llcp_type = LLCP_CHAN_MAP;
			conn->llcp_ack -= 2U;
    de14:	f895 20bc 	ldrb.w	r2, [r5, #188]	; 0xbc
			conn->llcp.chan_map.initiate = 1U;
    de18:	f895 30c0 	ldrb.w	r3, [r5, #192]	; 0xc0
			conn->llcp_ack -= 2U;
    de1c:	3a02      	subs	r2, #2
			conn->llcp_type = LLCP_CHAN_MAP;
    de1e:	2102      	movs	r1, #2
    de20:	f885 10bd 	strb.w	r1, [r5, #189]	; 0xbd
			conn->llcp_ack -= 2U;
    de24:	f885 20bc 	strb.w	r2, [r5, #188]	; 0xbc
		}

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    de28:	6822      	ldr	r2, [r4, #0]
			conn->llcp.chan_map.initiate = 1U;
    de2a:	f043 0301 	orr.w	r3, r3, #1
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    de2e:	2101      	movs	r1, #1
			conn->llcp.chan_map.initiate = 1U;
    de30:	f885 30c0 	strb.w	r3, [r5, #192]	; 0xc0
	int nack = 0;
    de34:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    de36:	7111      	strb	r1, [r2, #4]

		break;
    de38:	e705      	b.n	dc46 <ull_conn_rx+0xa2>
		if (conn->lll.role ||
    de3a:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
    de3e:	2b00      	cmp	r3, #0
    de40:	f6ff af30 	blt.w	dca4 <ull_conn_rx+0x100>
    de44:	7f73      	ldrb	r3, [r6, #29]
    de46:	2b03      	cmp	r3, #3
    de48:	f47f af2c 	bne.w	dca4 <ull_conn_rx+0x100>
		if (!conn->lll.role &&
    de4c:	f895 2195 	ldrb.w	r2, [r5, #405]	; 0x195
    de50:	f895 3194 	ldrb.w	r3, [r5, #404]	; 0x194
    de54:	429a      	cmp	r2, r3
    de56:	f43f aef3 	beq.w	dc40 <ull_conn_rx+0x9c>
		    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
    de5a:	f895 1196 	ldrb.w	r1, [r5, #406]	; 0x196
		    (conn->llcp_phy.ack != conn->llcp_phy.req) &&
    de5e:	f001 0303 	and.w	r3, r1, #3
    de62:	2b02      	cmp	r3, #2
    de64:	f47f aeec 	bne.w	dc40 <ull_conn_rx+0x9c>
			conn->llcp_phy.tx &= p->rx_phys;
    de68:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
			conn->llcp_phy.rx &= p->tx_phys;
    de6c:	f896 2020 	ldrb.w	r2, [r6, #32]
			conn->llcp_phy.tx &= p->rx_phys;
    de70:	f3c1 0082 	ubfx	r0, r1, #2, #3
    de74:	4003      	ands	r3, r0
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
    de76:	009b      	lsls	r3, r3, #2
    de78:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp_phy.rx &= p->tx_phys;
    de7c:	ea02 1251 	and.w	r2, r2, r1, lsr #5
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
    de80:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
			if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
    de84:	f013 0f1c 	tst.w	r3, #28
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
    de88:	f885 3196 	strb.w	r3, [r5, #406]	; 0x196
			if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
    de8c:	d002      	beq.n	de94 <ull_conn_rx+0x2f0>
    de8e:	f013 0fe0 	tst.w	r3, #224	; 0xe0
    de92:	d105      	bne.n	dea0 <ull_conn_rx+0x2fc>
				conn->llcp_phy.tx = 0;
    de94:	f895 3196 	ldrb.w	r3, [r5, #406]	; 0x196
    de98:	f003 0303 	and.w	r3, r3, #3
    de9c:	f885 3196 	strb.w	r3, [r5, #406]	; 0x196
			conn->llcp_phy.pause_tx = 1U;
    dea0:	f895 3197 	ldrb.w	r3, [r5, #407]	; 0x197
			conn->procedure_expire = 0U;
    dea4:	2200      	movs	r2, #0
			conn->llcp_phy.pause_tx = 1U;
    dea6:	f043 0301 	orr.w	r3, r3, #1
    deaa:	f885 3197 	strb.w	r3, [r5, #407]	; 0x197
			conn->procedure_expire = 0U;
    deae:	f8a5 20ac 	strh.w	r2, [r5, #172]	; 0xac
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    deb2:	e6c5      	b.n	dc40 <ull_conn_rx+0x9c>
    deb4:	20000be0 	.word	0x20000be0
    deb8:	20001a90 	.word	0x20001a90
    debc:	fffffb03 	.word	0xfffffb03
		if (PDU_DATA_LLCTRL_LEN(phy_req) != pdu_rx->len) {
    dec0:	7f73      	ldrb	r3, [r6, #29]
    dec2:	2b03      	cmp	r3, #3
    dec4:	f47f aeee 	bne.w	dca4 <ull_conn_rx+0x100>
		if (!conn->lll.role) {
    dec8:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
    decc:	2b00      	cmp	r3, #0
    dece:	f2c0 8505 	blt.w	e8dc <ull_conn_rx+0xd38>
			if ((conn->llcp_phy.ack !=
    ded2:	f895 1195 	ldrb.w	r1, [r5, #405]	; 0x195
			     conn->llcp_phy.req) &&
    ded6:	f895 0194 	ldrb.w	r0, [r5, #404]	; 0x194
			if ((conn->llcp_phy.ack !=
    deda:	4281      	cmp	r1, r0
    dedc:	d007      	beq.n	deee <ull_conn_rx+0x34a>
			      LLCP_PHY_STATE_RSP_WAIT) ||
    dede:	f895 3196 	ldrb.w	r3, [r5, #406]	; 0x196
    dee2:	f003 0303 	and.w	r3, r3, #3
			     conn->llcp_phy.req) &&
    dee6:	3b01      	subs	r3, #1
    dee8:	2b02      	cmp	r3, #2
    deea:	f240 86dc 	bls.w	eca6 <ull_conn_rx+0x1102>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
    deee:	f895 30bb 	ldrb.w	r3, [r5, #187]	; 0xbb
    def2:	f895 20bc 	ldrb.w	r2, [r5, #188]	; 0xbc
    def6:	1a9b      	subs	r3, r3, r2
    def8:	f003 0303 	and.w	r3, r3, #3
    defc:	2b02      	cmp	r3, #2
    defe:	f000 8680 	beq.w	ec02 <ull_conn_rx+0x105e>
				     LLCP_ENCRYPTION)) ||
    df02:	f895 215c 	ldrb.w	r2, [r5, #348]	; 0x15c
    df06:	f895 315d 	ldrb.w	r3, [r5, #349]	; 0x15d
    df0a:	429a      	cmp	r2, r3
    df0c:	f43f af1b 	beq.w	dd46 <ull_conn_rx+0x1a2>
				nack = reject_ext_ind_send(conn, *rx,
    df10:	4631      	mov	r1, r6
    df12:	4628      	mov	r0, r5
    df14:	232a      	movs	r3, #42	; 0x2a
    df16:	2216      	movs	r2, #22
}
    df18:	b005      	add	sp, #20
    df1a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(conn, *rx,
    df1e:	f7ff b98d 	b.w	d23c <reject_ext_ind_send>
		if (PDU_DATA_LLCTRL_LEN(reject_ext_ind) != pdu_rx->len) {
    df22:	7f73      	ldrb	r3, [r6, #29]
    df24:	2b03      	cmp	r3, #3
    df26:	f47f aebd 	bne.w	dca4 <ull_conn_rx+0x100>
	switch (rej_ext_ind->reject_opcode) {
    df2a:	f896 3020 	ldrb.w	r3, [r6, #32]
    df2e:	3b03      	subs	r3, #3
    df30:	2b13      	cmp	r3, #19
    df32:	f63f ae85 	bhi.w	dc40 <ull_conn_rx+0x9c>
    df36:	a201      	add	r2, pc, #4	; (adr r2, df3c <ull_conn_rx+0x398>)
    df38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    df3c:	0000e679 	.word	0x0000e679
    df40:	0000dc41 	.word	0x0000dc41
    df44:	0000dc41 	.word	0x0000dc41
    df48:	0000dc41 	.word	0x0000dc41
    df4c:	0000dc41 	.word	0x0000dc41
    df50:	0000dc41 	.word	0x0000dc41
    df54:	0000dc41 	.word	0x0000dc41
    df58:	0000dc41 	.word	0x0000dc41
    df5c:	0000dc41 	.word	0x0000dc41
    df60:	0000dc41 	.word	0x0000dc41
    df64:	0000dc41 	.word	0x0000dc41
    df68:	0000dc41 	.word	0x0000dc41
    df6c:	0000e615 	.word	0x0000e615
    df70:	0000dc41 	.word	0x0000dc41
    df74:	0000dc41 	.word	0x0000dc41
    df78:	0000dc41 	.word	0x0000dc41
    df7c:	0000dc41 	.word	0x0000dc41
    df80:	0000e58d 	.word	0x0000e58d
    df84:	0000dc41 	.word	0x0000dc41
    df88:	0000e5c9 	.word	0x0000e5c9
		if (conn->lll.role ||
    df8c:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
    df90:	2b00      	cmp	r3, #0
    df92:	f6ff ae87 	blt.w	dca4 <ull_conn_rx+0x100>
    df96:	7f73      	ldrb	r3, [r6, #29]
    df98:	2b18      	cmp	r3, #24
    df9a:	f47f ae83 	bne.w	dca4 <ull_conn_rx+0x100>
		if (!conn->lll.role &&
    df9e:	f895 215c 	ldrb.w	r2, [r5, #348]	; 0x15c
    dfa2:	f895 315d 	ldrb.w	r3, [r5, #349]	; 0x15d
    dfa6:	429a      	cmp	r2, r3
    dfa8:	f43f ae4a 	beq.w	dc40 <ull_conn_rx+0x9c>
		    (conn->llcp_conn_param.state ==
    dfac:	f895 315e 	ldrb.w	r3, [r5, #350]	; 0x15e
		     conn->llcp_conn_param.ack) &&
    dfb0:	f003 0307 	and.w	r3, r3, #7
    dfb4:	2b04      	cmp	r3, #4
    dfb6:	f47f ae43 	bne.w	dc40 <ull_conn_rx+0x9c>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
    dfba:	8c37      	ldrh	r7, [r6, #32]
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
    dfbc:	2f05      	cmp	r7, #5
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
    dfbe:	b2ba      	uxth	r2, r7
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
    dfc0:	f240 866b 	bls.w	ec9a <ull_conn_rx+0x10f6>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
    dfc4:	8c70      	ldrh	r0, [r6, #34]	; 0x22
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
    dfc6:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
    dfca:	b283      	uxth	r3, r0
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
    dfcc:	f200 8665 	bhi.w	ec9a <ull_conn_rx+0x10f6>
			    (interval_max > 3200) ||
    dfd0:	429a      	cmp	r2, r3
    dfd2:	f200 8662 	bhi.w	ec9a <ull_conn_rx+0x10f6>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
    dfd6:	8cb1      	ldrh	r1, [r6, #36]	; 0x24
			    (interval_min > interval_max) ||
    dfd8:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
    dfdc:	fa1f fc81 	uxth.w	ip, r1
			    (interval_min > interval_max) ||
    dfe0:	f080 865b 	bcs.w	ec9a <ull_conn_rx+0x10f6>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
    dfe4:	8cf2      	ldrh	r2, [r6, #38]	; 0x26
			    (latency > 499) ||
    dfe6:	f1a2 0e0a 	sub.w	lr, r2, #10
    dfea:	fa1f fe8e 	uxth.w	lr, lr
    dfee:	f640 4976 	movw	r9, #3190	; 0xc76
    dff2:	45ce      	cmp	lr, r9
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
    dff4:	fa1f f882 	uxth.w	r8, r2
			    (latency > 499) ||
    dff8:	f200 864f 	bhi.w	ec9a <ull_conn_rx+0x10f6>
			     ((latency + 1) * interval_max)) ||
    dffc:	fb0c 3c03 	mla	ip, ip, r3, r3
			    (timeout < 10) || (timeout > 3200) ||
    e000:	ebbc 0f88 	cmp.w	ip, r8, lsl #2
    e004:	f080 8649 	bcs.w	ec9a <ull_conn_rx+0x10f6>
			     ((latency + 1) * interval_max)) ||
    e008:	f896 e028 	ldrb.w	lr, [r6, #40]	; 0x28
    e00c:	4573      	cmp	r3, lr
    e00e:	f0c0 8644 	bcc.w	ec9a <ull_conn_rx+0x10f6>
			conn->procedure_expire = 0U;
    e012:	2300      	movs	r3, #0
			conn->llcp_conn_param.timeout =	timeout;
    e014:	f8a5 2166 	strh.w	r2, [r5, #358]	; 0x166
			conn->llcp_conn_param.preferred_periodicity =
    e018:	f885 e168 	strb.w	lr, [r5, #360]	; 0x168
			conn->llcp_conn_param.interval_min = interval_min;
    e01c:	f8a5 7160 	strh.w	r7, [r5, #352]	; 0x160
			conn->llcp_conn_param.interval_max = interval_max;
    e020:	f8a5 0162 	strh.w	r0, [r5, #354]	; 0x162
			conn->llcp_conn_param.latency =	latency;
    e024:	f8a5 1164 	strh.w	r1, [r5, #356]	; 0x164
			conn->procedure_expire = 0U;
    e028:	f8a5 30ac 	strh.w	r3, [r5, #172]	; 0xac
				sys_le16_to_cpu(cpr->reference_conn_event_count);
    e02c:	f896 102a 	ldrb.w	r1, [r6, #42]	; 0x2a
    e030:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
    e034:	f895 215e 	ldrb.w	r2, [r5, #350]	; 0x15e
				sys_le16_to_cpu(cpr->reference_conn_event_count);
    e038:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    e03c:	f8a5 316a 	strh.w	r3, [r5, #362]	; 0x16a
				sys_le16_to_cpu(cpr->offset0);
    e040:	f896 102c 	ldrb.w	r1, [r6, #44]	; 0x2c
    e044:	f896 302b 	ldrb.w	r3, [r6, #43]	; 0x2b
    e048:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset0 =
    e04c:	f8a5 316c 	strh.w	r3, [r5, #364]	; 0x16c
				sys_le16_to_cpu(cpr->offset1);
    e050:	f896 102e 	ldrb.w	r1, [r6, #46]	; 0x2e
    e054:	f896 302d 	ldrb.w	r3, [r6, #45]	; 0x2d
    e058:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset1 =
    e05c:	f8a5 316e 	strh.w	r3, [r5, #366]	; 0x16e
				sys_le16_to_cpu(cpr->offset2);
    e060:	f896 1030 	ldrb.w	r1, [r6, #48]	; 0x30
    e064:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
    e068:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset2 =
    e06c:	f8a5 3170 	strh.w	r3, [r5, #368]	; 0x170
				sys_le16_to_cpu(cpr->offset3);
    e070:	f896 1032 	ldrb.w	r1, [r6, #50]	; 0x32
    e074:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
    e078:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset3 =
    e07c:	f8a5 3172 	strh.w	r3, [r5, #370]	; 0x172
				sys_le16_to_cpu(cpr->offset4);
    e080:	f896 1034 	ldrb.w	r1, [r6, #52]	; 0x34
    e084:	f896 3033 	ldrb.w	r3, [r6, #51]	; 0x33
    e088:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset4 =
    e08c:	f8a5 3174 	strh.w	r3, [r5, #372]	; 0x174
				sys_le16_to_cpu(cpr->offset5);
    e090:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
    e094:	f896 0036 	ldrb.w	r0, [r6, #54]	; 0x36
    e098:	6826      	ldr	r6, [r4, #0]
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
    e09a:	2101      	movs	r1, #1
				sys_le16_to_cpu(cpr->offset5);
    e09c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
    e0a0:	f361 0202 	bfi	r2, r1, #0, #3
			conn->llcp_conn_param.offset5 =
    e0a4:	f8a5 3176 	strh.w	r3, [r5, #374]	; 0x176
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
    e0a8:	f885 215e 	strb.w	r2, [r5, #350]	; 0x15e
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    e0ac:	e5c8      	b.n	dc40 <ull_conn_rx+0x9c>
		if (PDU_DATA_LLCTRL_LEN(ping_rsp) != pdu_rx->len) {
    e0ae:	7f71      	ldrb	r1, [r6, #29]
    e0b0:	2901      	cmp	r1, #1
    e0b2:	f47f adf7 	bne.w	dca4 <ull_conn_rx+0x100>
		conn->procedure_expire = 0U;
    e0b6:	2300      	movs	r3, #0
    e0b8:	f8a5 30ac 	strh.w	r3, [r5, #172]	; 0xac
	int nack = 0;
    e0bc:	4618      	mov	r0, r3
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    e0be:	7131      	strb	r1, [r6, #4]
		break;
    e0c0:	e5c1      	b.n	dc46 <ull_conn_rx+0xa2>
		if (PDU_DATA_LLCTRL_LEN(conn_param_req) != pdu_rx->len) {
    e0c2:	7f73      	ldrb	r3, [r6, #29]
    e0c4:	2b18      	cmp	r3, #24
    e0c6:	f47f aded 	bne.w	dca4 <ull_conn_rx+0x100>
		if (conn_upd_curr && (conn_upd_curr != conn)) {
    e0ca:	4fe0      	ldr	r7, [pc, #896]	; (e44c <ull_conn_rx+0x8a8>)
    e0cc:	683b      	ldr	r3, [r7, #0]
    e0ce:	2b00      	cmp	r3, #0
    e0d0:	f000 834b 	beq.w	e76a <ull_conn_rx+0xbc6>
    e0d4:	429d      	cmp	r5, r3
    e0d6:	f000 8348 	beq.w	e76a <ull_conn_rx+0xbc6>
			nack = reject_ext_ind_send(conn, *rx,
    e0da:	4631      	mov	r1, r6
    e0dc:	4628      	mov	r0, r5
    e0de:	2320      	movs	r3, #32
    e0e0:	220f      	movs	r2, #15
    e0e2:	e719      	b.n	df18 <ull_conn_rx+0x374>
		if (conn->lll.role ||
    e0e4:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
    e0e8:	f895 00ba 	ldrb.w	r0, [r5, #186]	; 0xba
    e0ec:	2b00      	cmp	r3, #0
    e0ee:	f000 0402 	and.w	r4, r0, #2
    e0f2:	f6ff addb 	blt.w	dcac <ull_conn_rx+0x108>
    e0f6:	f896 801d 	ldrb.w	r8, [r6, #29]
    e0fa:	f1b8 0f09 	cmp.w	r8, #9
    e0fe:	f47f add5 	bne.w	dcac <ull_conn_rx+0x108>
	if (conn->common.txn_lock) {
    e102:	2c00      	cmp	r4, #0
    e104:	f47f ad9c 	bne.w	dc40 <ull_conn_rx+0x9c>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    e108:	48d1      	ldr	r0, [pc, #836]	; (e450 <ull_conn_rx+0x8ac>)
    e10a:	f7fa fa11 	bl	8530 <mem_acquire>
	if (!tx) {
    e10e:	4607      	mov	r7, r0
    e110:	2800      	cmp	r0, #0
    e112:	f000 82fa 	beq.w	e70a <ull_conn_rx+0xb66>
	conn->common.txn_lock = 1U;
    e116:	f895 10ba 	ldrb.w	r1, [r5, #186]	; 0xba
	feat &= LL_FEAT_BIT_MASK;
    e11a:	f8df c338 	ldr.w	ip, [pc, #824]	; e454 <ull_conn_rx+0x8b0>
	conn->common.txn_lock = 1U;
    e11e:	f041 0102 	orr.w	r1, r1, #2
    e122:	f885 10ba 	strb.w	r1, [r5, #186]	; 0xba
    e126:	6a30      	ldr	r0, [r6, #32]
    e128:	6a71      	ldr	r1, [r6, #36]	; 0x24
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
    e12a:	e9d5 2340 	ldrd	r2, r3, [r5, #256]	; 0x100
	feat &= LL_FEAT_BIT_MASK;
    e12e:	ea40 000c 	orr.w	r0, r0, ip
    e132:	f001 010f 	and.w	r1, r1, #15
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
    e136:	4002      	ands	r2, r0
    e138:	400b      	ands	r3, r1
    e13a:	e9c5 2340 	strd	r2, r3, [r5, #256]	; 0x100
	conn->common.fex_valid = 1U;
    e13e:	f895 20ba 	ldrb.w	r2, [r5, #186]	; 0xba
    e142:	6a30      	ldr	r0, [r6, #32]
    e144:	6a71      	ldr	r1, [r6, #36]	; 0x24
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    e146:	793b      	ldrb	r3, [r7, #4]
	conn->common.fex_valid = 1U;
    e148:	f042 0201 	orr.w	r2, r2, #1
    e14c:	f885 20ba 	strb.w	r2, [r5, #186]	; 0xba
	feat &= LL_FEAT_BIT_MASK;
    e150:	ea40 000c 	orr.w	r0, r0, ip
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    e154:	f043 0303 	orr.w	r3, r3, #3
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
    e158:	2208      	movs	r2, #8
	feat &= LL_FEAT_BIT_MASK;
    e15a:	f001 010f 	and.w	r1, r1, #15
	conn->llcp_feature.features_peer =
    e15e:	e9c5 0142 	strd	r0, r1, [r5, #264]	; 0x108
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    e162:	f887 8005 	strb.w	r8, [r7, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    e166:	f887 8007 	strb.w	r8, [r7, #7]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    e16a:	713b      	strb	r3, [r7, #4]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
    e16c:	4621      	mov	r1, r4
    e16e:	18b8      	adds	r0, r7, r2
    e170:	f008 fcc9 	bl	16b06 <memset>
	feat_result &= 0xFF;
    e174:	f895 3100 	ldrb.w	r3, [r5, #256]	; 0x100
	dst[0] = val;
    e178:	723b      	strb	r3, [r7, #8]
    e17a:	f04f 0801 	mov.w	r8, #1
	dst[1] = val >> 8;
    e17e:	2341      	movs	r3, #65	; 0x41
	ctrl_tx_sec_enqueue(conn, tx);
    e180:	4628      	mov	r0, r5
    e182:	72fc      	strb	r4, [r7, #11]
	dst[0] = val;
    e184:	733c      	strb	r4, [r7, #12]
	dst[1] = val >> 8;
    e186:	737c      	strb	r4, [r7, #13]
	dst[0] = val;
    e188:	73bc      	strb	r4, [r7, #14]
	dst[1] = val >> 8;
    e18a:	73fc      	strb	r4, [r7, #15]
    e18c:	727b      	strb	r3, [r7, #9]
	dst[0] = val;
    e18e:	f887 800a 	strb.w	r8, [r7, #10]
    e192:	4639      	mov	r1, r7
    e194:	f7ff f938 	bl	d408 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
    e198:	f886 8004 	strb.w	r8, [r6, #4]
	return 0;
    e19c:	4620      	mov	r0, r4
    e19e:	e552      	b.n	dc46 <ull_conn_rx+0xa2>
		if (PDU_DATA_LLCTRL_LEN(length_req) != pdu_rx->len) {
    e1a0:	7f73      	ldrb	r3, [r6, #29]
    e1a2:	2b09      	cmp	r3, #9
    e1a4:	f47f ad7e 	bne.w	dca4 <ull_conn_rx+0x100>
	if (pdu_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
    e1a8:	f1b9 0f14 	cmp.w	r9, #20
    e1ac:	f000 8318 	beq.w	e7e0 <ull_conn_rx+0xc3c>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
    e1b0:	f895 3184 	ldrb.w	r3, [r5, #388]	; 0x184
	if (/* Local idle, and Peer request then complete the Peer procedure
    e1b4:	f895 1185 	ldrb.w	r1, [r5, #389]	; 0x185
	eff_tx_octets = conn->lll.max_tx_octets;
    e1b8:	8fea      	ldrh	r2, [r5, #62]	; 0x3e
	eff_rx_octets = conn->lll.max_rx_octets;
    e1ba:	f8b5 8040 	ldrh.w	r8, [r5, #64]	; 0x40
	eff_rx_time = conn->lll.max_rx_time;
    e1be:	f8b5 a044 	ldrh.w	sl, [r5, #68]	; 0x44
	eff_tx_time = conn->lll.max_tx_time;
    e1c2:	f8b5 b042 	ldrh.w	fp, [r5, #66]	; 0x42
	eff_tx_octets = conn->lll.max_tx_octets;
    e1c6:	9200      	str	r2, [sp, #0]
	if (/* Local idle, and Peer request then complete the Peer procedure
    e1c8:	4299      	cmp	r1, r3
    e1ca:	f000 8629 	beq.w	ee20 <ull_conn_rx+0x127c>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
    e1ce:	f895 2186 	ldrb.w	r2, [r5, #390]	; 0x186
	struct node_tx *tx = NULL;
    e1d2:	2100      	movs	r1, #0
	       tx) ||
    e1d4:	f002 0207 	and.w	r2, r2, #7
    e1d8:	2a02      	cmp	r2, #2
    e1da:	f000 8326 	beq.w	e82a <ull_conn_rx+0xc86>
    e1de:	f896 901f 	ldrb.w	r9, [r6, #31]
		if (pdu_rx->llctrl.opcode != PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) {
    e1e2:	f1b9 0f15 	cmp.w	r9, #21
    e1e6:	f43f ad2d 	beq.w	dc44 <ull_conn_rx+0xa0>
			mem_release(tx, &mem_conn_tx_ctrl.free);
    e1ea:	4608      	mov	r0, r1
    e1ec:	4998      	ldr	r1, [pc, #608]	; (e450 <ull_conn_rx+0x8ac>)
    e1ee:	f7fa f9b9 	bl	8564 <mem_release>
			if (conn->llcp_length.state ==
    e1f2:	f895 3186 	ldrb.w	r3, [r5, #390]	; 0x186
			conn->common.txn_lock = 0U;
    e1f6:	f895 20ba 	ldrb.w	r2, [r5, #186]	; 0xba
			if (conn->llcp_length.state ==
    e1fa:	f003 0307 	and.w	r3, r3, #7
			conn->common.txn_lock = 0U;
    e1fe:	f36f 0241 	bfc	r2, #1, #1
			if (conn->llcp_length.state ==
    e202:	2b04      	cmp	r3, #4
			conn->common.txn_lock = 0U;
    e204:	f885 20ba 	strb.w	r2, [r5, #186]	; 0xba
			if (conn->llcp_length.state ==
    e208:	f47f ad1c 	bne.w	dc44 <ull_conn_rx+0xa0>
				return -EBUSY;
    e20c:	f06f 000f 	mvn.w	r0, #15
    e210:	e519      	b.n	dc46 <ull_conn_rx+0xa2>
		if (PDU_DATA_LLCTRL_LEN(ping_req) != pdu_rx->len) {
    e212:	7f77      	ldrb	r7, [r6, #29]
    e214:	f895 00ba 	ldrb.w	r0, [r5, #186]	; 0xba
    e218:	2f01      	cmp	r7, #1
    e21a:	f000 0402 	and.w	r4, r0, #2
    e21e:	f47f ad45 	bne.w	dcac <ull_conn_rx+0x108>
	if (conn->common.txn_lock) {
    e222:	2c00      	cmp	r4, #0
    e224:	f040 84e1 	bne.w	ebea <ull_conn_rx+0x1046>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    e228:	4889      	ldr	r0, [pc, #548]	; (e450 <ull_conn_rx+0x8ac>)
    e22a:	f7fa f981 	bl	8530 <mem_acquire>
	if (!tx) {
    e22e:	4601      	mov	r1, r0
    e230:	2800      	cmp	r0, #0
    e232:	f000 826a 	beq.w	e70a <ull_conn_rx+0xb66>
	conn->common.txn_lock = 1U;
    e236:	f895 20ba 	ldrb.w	r2, [r5, #186]	; 0xba
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    e23a:	7903      	ldrb	r3, [r0, #4]
	conn->common.txn_lock = 1U;
    e23c:	f042 0202 	orr.w	r2, r2, #2
    e240:	f885 20ba 	strb.w	r2, [r5, #186]	; 0xba
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    e244:	f043 0303 	orr.w	r3, r3, #3
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    e248:	2213      	movs	r2, #19
	pdu_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
    e24a:	7147      	strb	r7, [r0, #5]
	ctrl_tx_sec_enqueue(conn, tx);
    e24c:	4628      	mov	r0, r5
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    e24e:	710b      	strb	r3, [r1, #4]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    e250:	71ca      	strb	r2, [r1, #7]
	ctrl_tx_sec_enqueue(conn, tx);
    e252:	f7ff f8d9 	bl	d408 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
    e256:	7137      	strb	r7, [r6, #4]
	return 0;
    e258:	4620      	mov	r0, r4
    e25a:	e4f4      	b.n	dc46 <ull_conn_rx+0xa2>
		if (PDU_DATA_LLCTRL_LEN(reject_ind) != pdu_rx->len) {
    e25c:	7f73      	ldrb	r3, [r6, #29]
    e25e:	2b02      	cmp	r3, #2
    e260:	f47f ad20 	bne.w	dca4 <ull_conn_rx+0x100>
	} else if ((conn->llcp_ack != conn->llcp_req) &&
    e264:	f895 30bb 	ldrb.w	r3, [r5, #187]	; 0xbb
    e268:	f895 20bc 	ldrb.w	r2, [r5, #188]	; 0xbc
    e26c:	429a      	cmp	r2, r3
    e26e:	d004      	beq.n	e27a <ull_conn_rx+0x6d6>
    e270:	f895 20bd 	ldrb.w	r2, [r5, #189]	; 0xbd
    e274:	2a03      	cmp	r2, #3
    e276:	f000 851b 	beq.w	ecb0 <ull_conn_rx+0x110c>
	} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    e27a:	f895 2194 	ldrb.w	r2, [r5, #404]	; 0x194
    e27e:	f895 3195 	ldrb.w	r3, [r5, #405]	; 0x195
    e282:	4293      	cmp	r3, r2
    e284:	f000 84d4 	beq.w	ec30 <ull_conn_rx+0x108c>
		rej_ext_ind->error_code = rej_ind->error_code;
    e288:	f896 1020 	ldrb.w	r1, [r6, #32]
    e28c:	f886 1021 	strb.w	r1, [r6, #33]	; 0x21
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
    e290:	2923      	cmp	r1, #35	; 0x23
    e292:	d012      	beq.n	e2ba <ull_conn_rx+0x716>
		conn->lll.phy_tx_time = conn->lll.phy_tx;
    e294:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
		conn->llcp_phy.pause_tx = 0U;
    e298:	f895 0197 	ldrb.w	r0, [r5, #407]	; 0x197
		conn->llcp_phy.ack = conn->llcp_phy.req;
    e29c:	f885 2195 	strb.w	r2, [r5, #405]	; 0x195
		conn->lll.phy_tx_time = conn->lll.phy_tx;
    e2a0:	f3c3 0202 	ubfx	r2, r3, #0, #3
    e2a4:	f362 1306 	bfi	r3, r2, #4, #3
		conn->llcp_phy.pause_tx = 0U;
    e2a8:	f36f 0000 	bfc	r0, #0, #1
		conn->procedure_expire = 0U;
    e2ac:	2200      	movs	r2, #0
		conn->lll.phy_tx_time = conn->lll.phy_tx;
    e2ae:	f885 3046 	strb.w	r3, [r5, #70]	; 0x46
		conn->llcp_phy.pause_tx = 0U;
    e2b2:	f885 0197 	strb.w	r0, [r5, #407]	; 0x197
		conn->procedure_expire = 0U;
    e2b6:	f8a5 20ac 	strh.w	r2, [r5, #172]	; 0xac
	if (!conn->llcp_phy.cmd) {
    e2ba:	f895 3197 	ldrb.w	r3, [r5, #407]	; 0x197
    e2be:	0758      	lsls	r0, r3, #29
    e2c0:	f57f acbe 	bpl.w	dc40 <ull_conn_rx+0x9c>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    e2c4:	231a      	movs	r3, #26
	p->status = rej_ext_ind->error_code;
    e2c6:	7731      	strb	r1, [r6, #28]
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    e2c8:	7133      	strb	r3, [r6, #4]
	p->tx = conn->lll.phy_tx;
    e2ca:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
    e2ce:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e2d2:	7773      	strb	r3, [r6, #29]
	p->rx = conn->lll.phy_rx;
    e2d4:	f895 3047 	ldrb.w	r3, [r5, #71]	; 0x47
    e2d8:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e2dc:	77b3      	strb	r3, [r6, #30]
	int nack = 0;
    e2de:	2000      	movs	r0, #0
    e2e0:	e4b1      	b.n	dc46 <ull_conn_rx+0xa2>
		((!conn->llcp_enc.refresh &&
    e2e2:	f1b9 0f07 	cmp.w	r9, #7
    e2e6:	d00f      	beq.n	e308 <ull_conn_rx+0x764>
		  (opcode != PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
    e2e8:	f1b9 0f02 	cmp.w	r9, #2
    e2ec:	f040 81f2 	bne.w	e6d4 <ull_conn_rx+0xb30>
		if (PDU_DATA_LLCTRL_LEN(terminate_ind) != pdu_rx->len) {
    e2f0:	7f73      	ldrb	r3, [r6, #29]
    e2f2:	2b02      	cmp	r3, #2
    e2f4:	f47f acd6 	bne.w	dca4 <ull_conn_rx+0x100>
	conn->llcp_terminate.reason_peer = pdu->llctrl.terminate_ind.error_code;
    e2f8:	f896 3020 	ldrb.w	r3, [r6, #32]
    e2fc:	f885 311b 	strb.w	r3, [r5, #283]	; 0x11b
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
    e300:	2301      	movs	r3, #1
    e302:	7133      	strb	r3, [r6, #4]
	int nack = 0;
    e304:	2000      	movs	r0, #0
}
    e306:	e49e      	b.n	dc46 <ull_conn_rx+0xa2>
		if (PDU_DATA_LLCTRL_LEN(unknown_rsp) != pdu_rx->len) {
    e308:	7f73      	ldrb	r3, [r6, #29]
    e30a:	2b02      	cmp	r3, #2
    e30c:	f47f acca 	bne.w	dca4 <ull_conn_rx+0x100>
		} else if ((conn->llcp_conn_param.ack !=
    e310:	f895 115d 	ldrb.w	r1, [r5, #349]	; 0x15d
    e314:	f895 315c 	ldrb.w	r3, [r5, #348]	; 0x15c
    e318:	f896 2020 	ldrb.w	r2, [r6, #32]
    e31c:	4299      	cmp	r1, r3
    e31e:	d002      	beq.n	e326 <ull_conn_rx+0x782>
			    conn->llcp_conn_param.req) &&
    e320:	2a0f      	cmp	r2, #15
    e322:	f000 83f1 	beq.w	eb08 <ull_conn_rx+0xf64>
		} else if ((conn->llcp_length.req != conn->llcp_length.ack) &&
    e326:	f895 3184 	ldrb.w	r3, [r5, #388]	; 0x184
    e32a:	f895 1185 	ldrb.w	r1, [r5, #389]	; 0x185
    e32e:	4299      	cmp	r1, r3
    e330:	d002      	beq.n	e338 <ull_conn_rx+0x794>
    e332:	2a14      	cmp	r2, #20
    e334:	f000 846c 	beq.w	ec10 <ull_conn_rx+0x106c>
		} else if ((conn->llcp_phy.req != conn->llcp_phy.ack) &&
    e338:	f895 1194 	ldrb.w	r1, [r5, #404]	; 0x194
    e33c:	f895 3195 	ldrb.w	r3, [r5, #405]	; 0x195
    e340:	428b      	cmp	r3, r1
    e342:	d002      	beq.n	e34a <ull_conn_rx+0x7a6>
    e344:	2a16      	cmp	r2, #22
    e346:	f000 84c3 	beq.w	ecd0 <ull_conn_rx+0x112c>
			switch (llctrl->unknown_rsp.type) {
    e34a:	2a12      	cmp	r2, #18
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    e34c:	bf04      	itt	eq
    e34e:	2301      	moveq	r3, #1
    e350:	7133      	strbeq	r3, [r6, #4]
		conn->procedure_expire = 0U;
    e352:	2300      	movs	r3, #0
    e354:	f8a5 30ac 	strh.w	r3, [r5, #172]	; 0xac
	int nack = 0;
    e358:	4618      	mov	r0, r3
		break;
    e35a:	e474      	b.n	dc46 <ull_conn_rx+0xa2>
		if ((!IS_ENABLED(CONFIG_BT_CTLR_SLAVE_FEAT_REQ) &&
    e35c:	7f73      	ldrb	r3, [r6, #29]
    e35e:	2b09      	cmp	r3, #9
    e360:	f47f aca0 	bne.w	dca4 <ull_conn_rx+0x100>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    e364:	6a32      	ldr	r2, [r6, #32]
    e366:	6a73      	ldr	r3, [r6, #36]	; 0x24
	feat &= LL_FEAT_BIT_MASK;
    e368:	4f3a      	ldr	r7, [pc, #232]	; (e454 <ull_conn_rx+0x8b0>)
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
    e36a:	e9d5 0140 	ldrd	r0, r1, [r5, #256]	; 0x100
	feat &= LL_FEAT_BIT_MASK;
    e36e:	433a      	orrs	r2, r7
    e370:	f003 030f 	and.w	r3, r3, #15
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
    e374:	4002      	ands	r2, r0
    e376:	400b      	ands	r3, r1
    e378:	e9c5 2340 	strd	r2, r3, [r5, #256]	; 0x100
	conn->common.fex_valid = 1U;
    e37c:	f895 20ba 	ldrb.w	r2, [r5, #186]	; 0xba
    e380:	6a34      	ldr	r4, [r6, #32]
    e382:	6a71      	ldr	r1, [r6, #36]	; 0x24
	conn->llcp_feature.ack = conn->llcp_feature.req;
    e384:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
    e388:	f885 30f9 	strb.w	r3, [r5, #249]	; 0xf9
	feat &= LL_FEAT_BIT_MASK;
    e38c:	433c      	orrs	r4, r7
    e38e:	2300      	movs	r3, #0
    e390:	f001 010f 	and.w	r1, r1, #15
	conn->common.fex_valid = 1U;
    e394:	f042 0201 	orr.w	r2, r2, #1
	conn->llcp_feature.features_peer =
    e398:	e9c5 4142 	strd	r4, r1, [r5, #264]	; 0x108
	conn->common.fex_valid = 1U;
    e39c:	f885 20ba 	strb.w	r2, [r5, #186]	; 0xba
	conn->procedure_expire = 0U;
    e3a0:	f8a5 30ac 	strh.w	r3, [r5, #172]	; 0xac
	int nack = 0;
    e3a4:	4618      	mov	r0, r3
}
    e3a6:	e44e      	b.n	dc46 <ull_conn_rx+0xa2>
		if (PDU_DATA_LLCTRL_LEN(version_ind) != pdu_rx->len) {
    e3a8:	7f74      	ldrb	r4, [r6, #29]
    e3aa:	2c06      	cmp	r4, #6
    e3ac:	f47f ac7a 	bne.w	dca4 <ull_conn_rx+0x100>
	if (!conn->llcp_version.tx) {
    e3b0:	f895 3112 	ldrb.w	r3, [r5, #274]	; 0x112
    e3b4:	07df      	lsls	r7, r3, #31
    e3b6:	f140 83f2 	bpl.w	eb9e <ull_conn_rx+0xffa>
	} else if (!conn->llcp_version.rx) {
    e3ba:	f013 0302 	ands.w	r3, r3, #2
    e3be:	f47f ac3f 	bne.w	dc40 <ull_conn_rx+0x9c>
		conn->llcp_version.ack = conn->llcp_version.req;
    e3c2:	f895 2110 	ldrb.w	r2, [r5, #272]	; 0x110
		conn->procedure_expire = 0U;
    e3c6:	f8a5 30ac 	strh.w	r3, [r5, #172]	; 0xac
		conn->llcp_version.ack = conn->llcp_version.req;
    e3ca:	f885 2111 	strb.w	r2, [r5, #273]	; 0x111
	conn->llcp_version.version_number = v->version_number;
    e3ce:	f896 3020 	ldrb.w	r3, [r6, #32]
    e3d2:	f885 3113 	strb.w	r3, [r5, #275]	; 0x113
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
    e3d6:	f896 1022 	ldrb.w	r1, [r6, #34]	; 0x22
    e3da:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
	conn->llcp_version.rx = 1U;
    e3de:	f895 3112 	ldrb.w	r3, [r5, #274]	; 0x112
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
    e3e2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    e3e6:	f8a5 2114 	strh.w	r2, [r5, #276]	; 0x114
		sys_le16_to_cpu(v->sub_version_number);
    e3ea:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
    e3ee:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
	conn->llcp_version.rx = 1U;
    e3f2:	f043 0302 	orr.w	r3, r3, #2
		sys_le16_to_cpu(v->sub_version_number);
    e3f6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_version.sub_version_number =
    e3fa:	f8a5 2116 	strh.w	r2, [r5, #278]	; 0x116
	conn->llcp_version.rx = 1U;
    e3fe:	f885 3112 	strb.w	r3, [r5, #274]	; 0x112
	return 0;
    e402:	2000      	movs	r0, #0
    e404:	e41f      	b.n	dc46 <ull_conn_rx+0xa2>
		if (conn->lll.role ||
    e406:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
    e40a:	2b00      	cmp	r3, #0
    e40c:	f6ff ac4a 	blt.w	dca4 <ull_conn_rx+0x100>
    e410:	7f73      	ldrb	r3, [r6, #29]
    e412:	2b0d      	cmp	r3, #13
    e414:	f47f ac46 	bne.w	dca4 <ull_conn_rx+0x100>
		memcpy(&conn->llcp.encryption.skd[8],
    e418:	2208      	movs	r2, #8
    e41a:	f106 0120 	add.w	r1, r6, #32
    e41e:	f105 00d6 	add.w	r0, r5, #214	; 0xd6
    e422:	f008 fb45 	bl	16ab0 <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[4],
    e426:	f106 0128 	add.w	r1, r6, #40	; 0x28
    e42a:	2204      	movs	r2, #4
    e42c:	f105 007c 	add.w	r0, r5, #124	; 0x7c
    e430:	f008 fb3e 	bl	16ab0 <memcpy>
		conn->llcp_enc.pause_rx = 1U;
    e434:	f895 313e 	ldrb.w	r3, [r5, #318]	; 0x13e
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    e438:	6822      	ldr	r2, [r4, #0]
		conn->llcp_enc.pause_rx = 1U;
    e43a:	f043 0301 	orr.w	r3, r3, #1
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    e43e:	2101      	movs	r1, #1
		conn->llcp_enc.pause_rx = 1U;
    e440:	f885 313e 	strb.w	r3, [r5, #318]	; 0x13e
	int nack = 0;
    e444:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    e446:	7111      	strb	r1, [r2, #4]
		break;
    e448:	f7ff bbfd 	b.w	dc46 <ull_conn_rx+0xa2>
    e44c:	20001a0c 	.word	0x20001a0c
    e450:	20001a90 	.word	0x20001a90
    e454:	087830d0 	.word	0x087830d0
		if (conn->lll.role || (conn->llcp_req == conn->llcp_ack) ||
    e458:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
    e45c:	2b00      	cmp	r3, #0
    e45e:	f6ff ac21 	blt.w	dca4 <ull_conn_rx+0x100>
    e462:	f895 10bb 	ldrb.w	r1, [r5, #187]	; 0xbb
    e466:	f895 30bc 	ldrb.w	r3, [r5, #188]	; 0xbc
    e46a:	4299      	cmp	r1, r3
    e46c:	f43f ac1a 	beq.w	dca4 <ull_conn_rx+0x100>
    e470:	f895 30bd 	ldrb.w	r3, [r5, #189]	; 0xbd
    e474:	2b03      	cmp	r3, #3
    e476:	f47f ac15 	bne.w	dca4 <ull_conn_rx+0x100>
		    (conn->llcp_type != LLCP_ENCRYPTION) ||
    e47a:	7f73      	ldrb	r3, [r6, #29]
    e47c:	2b01      	cmp	r3, #1
    e47e:	f47f ac11 	bne.w	dca4 <ull_conn_rx+0x100>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
    e482:	f895 20cc 	ldrb.w	r2, [r5, #204]	; 0xcc
    e486:	f36f 0201 	bfc	r2, #0, #2
    e48a:	f885 20cc 	strb.w	r2, [r5, #204]	; 0xcc
	int nack = 0;
    e48e:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    e490:	7133      	strb	r3, [r6, #4]
		break;
    e492:	f7ff bbd8 	b.w	dc46 <ull_conn_rx+0xa2>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
    e496:	7f73      	ldrb	r3, [r6, #29]
    e498:	2b01      	cmp	r3, #1
    e49a:	f47f ac03 	bne.w	dca4 <ull_conn_rx+0x100>
	} else if (!conn->lll.role) {
    e49e:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
    e4a2:	2b00      	cmp	r3, #0
    e4a4:	f2c0 814f 	blt.w	e746 <ull_conn_rx+0xba2>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    e4a8:	48cc      	ldr	r0, [pc, #816]	; (e7dc <ull_conn_rx+0xc38>)
    e4aa:	f7fa f841 	bl	8530 <mem_acquire>
		if (!tx) {
    e4ae:	2800      	cmp	r0, #0
    e4b0:	f000 812b 	beq.w	e70a <ull_conn_rx+0xb66>
	conn->llcp_enc.pause_rx = 1U;
    e4b4:	f895 113e 	ldrb.w	r1, [r5, #318]	; 0x13e
	conn->lll.enc_rx = 0;
    e4b8:	f895 305e 	ldrb.w	r3, [r5, #94]	; 0x5e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e4bc:	7902      	ldrb	r2, [r0, #4]
	conn->llcp_enc.pause_rx = 1U;
    e4be:	f041 0101 	orr.w	r1, r1, #1
    e4c2:	f885 113e 	strb.w	r1, [r5, #318]	; 0x13e
	conn->lll.enc_rx = 0;
    e4c6:	f023 0318 	bic.w	r3, r3, #24
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    e4ca:	2101      	movs	r1, #1
	conn->lll.enc_rx = 0;
    e4cc:	f885 305e 	strb.w	r3, [r5, #94]	; 0x5e
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    e4d0:	7141      	strb	r1, [r0, #5]
	    conn->tx_head &&
    e4d2:	f8d5 319c 	ldr.w	r3, [r5, #412]	; 0x19c
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e4d6:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    e4da:	210b      	movs	r1, #11
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e4dc:	7102      	strb	r2, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    e4de:	71c1      	strb	r1, [r0, #7]
	if (
    e4e0:	2b00      	cmp	r3, #0
    e4e2:	f000 816f 	beq.w	e7c4 <ull_conn_rx+0xc20>
	    !conn->llcp_enc.pause_tx &&
    e4e6:	f895 213e 	ldrb.w	r2, [r5, #318]	; 0x13e
	    conn->tx_head &&
    e4ea:	0791      	lsls	r1, r2, #30
    e4ec:	f100 816a 	bmi.w	e7c4 <ull_conn_rx+0xc20>
	    !conn->llcp_phy.pause_tx &&
    e4f0:	f895 2197 	ldrb.w	r2, [r5, #407]	; 0x197
    e4f4:	07d2      	lsls	r2, r2, #31
    e4f6:	f100 8165 	bmi.w	e7c4 <ull_conn_rx+0xc20>
		if (conn->tx_head == conn->tx_data) {
    e4fa:	f8d5 21a8 	ldr.w	r2, [r5, #424]	; 0x1a8
    e4fe:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
    e500:	f8d5 21a0 	ldr.w	r2, [r5, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
    e504:	f000 8550 	beq.w	efa8 <ull_conn_rx+0x1404>
		} else if (!conn->tx_ctrl) {
    e508:	2a00      	cmp	r2, #0
    e50a:	f000 8544 	beq.w	ef96 <ull_conn_rx+0x13f2>
	tx->next = conn->tx_ctrl_last->next;
    e50e:	f8d5 31a4 	ldr.w	r3, [r5, #420]	; 0x1a4
    e512:	681a      	ldr	r2, [r3, #0]
    e514:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    e516:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    e518:	f8c5 01a4 	str.w	r0, [r5, #420]	; 0x1a4
	if (!tx->next) {
    e51c:	6803      	ldr	r3, [r0, #0]
    e51e:	2b00      	cmp	r3, #0
    e520:	f47f ab8e 	bne.w	dc40 <ull_conn_rx+0x9c>
		conn->tx_data_last = tx;
    e524:	f8c5 01ac 	str.w	r0, [r5, #428]	; 0x1ac
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
    e528:	f7ff bb8a 	b.w	dc40 <ull_conn_rx+0x9c>
		if (PDU_DATA_LLCTRL_LEN(start_enc_rsp) != pdu_rx->len) {
    e52c:	7f73      	ldrb	r3, [r6, #29]
    e52e:	2b01      	cmp	r3, #1
    e530:	f47f abb8 	bne.w	dca4 <ull_conn_rx+0x100>
		if (conn->lll.role) {
    e534:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
    e538:	2b00      	cmp	r3, #0
    e53a:	f2c0 80d3 	blt.w	e6e4 <ull_conn_rx+0xb40>
			conn->llcp_enc.pause_rx = 0U;
    e53e:	f895 113e 	ldrb.w	r1, [r5, #318]	; 0x13e
    e542:	f021 0103 	bic.w	r1, r1, #3
    e546:	f885 113e 	strb.w	r1, [r5, #318]	; 0x13e
		if (conn->llcp_enc.refresh) {
    e54a:	0748      	lsls	r0, r1, #29
    e54c:	f57f af01 	bpl.w	e352 <ull_conn_rx+0x7ae>
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
    e550:	6823      	ldr	r3, [r4, #0]
			conn->llcp_enc.refresh = 0U;
    e552:	f36f 0182 	bfc	r1, #2, #1
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
    e556:	2217      	movs	r2, #23
			conn->llcp_enc.refresh = 0U;
    e558:	f885 113e 	strb.w	r1, [r5, #318]	; 0x13e
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
    e55c:	711a      	strb	r2, [r3, #4]
		conn->procedure_expire = 0U;
    e55e:	e6f8      	b.n	e352 <ull_conn_rx+0x7ae>
		 (conn->llcp_enc.refresh &&
    e560:	f1b9 0f02 	cmp.w	r9, #2
    e564:	f43f aec4 	beq.w	e2f0 <ull_conn_rx+0x74c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    e568:	f1b9 0f0b 	cmp.w	r9, #11
    e56c:	f43f ab96 	beq.w	dc9c <ull_conn_rx+0xf8>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
    e570:	f1b9 0f04 	cmp.w	r9, #4
    e574:	f47f ab46 	bne.w	dc04 <ull_conn_rx+0x60>
    e578:	e74a      	b.n	e410 <ull_conn_rx+0x86c>
			tx->next = conn->tx_head;
    e57a:	6001      	str	r1, [r0, #0]
				conn->tx_ctrl = tx;
    e57c:	e9c5 0067 	strd	r0, r0, [r5, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    e580:	f8c5 01a4 	str.w	r0, [r5, #420]	; 0x1a4
	if (!tx->next) {
    e584:	2900      	cmp	r1, #0
    e586:	f47f ab5b 	bne.w	dc40 <ull_conn_rx+0x9c>
    e58a:	e7cb      	b.n	e524 <ull_conn_rx+0x980>
		if (conn->llcp_length.ack != conn->llcp_length.req) {
    e58c:	f895 2184 	ldrb.w	r2, [r5, #388]	; 0x184
    e590:	f895 3185 	ldrb.w	r3, [r5, #389]	; 0x185
    e594:	4293      	cmp	r3, r2
    e596:	f43f ab53 	beq.w	dc40 <ull_conn_rx+0x9c>
	conn->procedure_expire = 0U;
    e59a:	2300      	movs	r3, #0
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    e59c:	2109      	movs	r1, #9
	conn->llcp_length.ack = conn->llcp_length.req;
    e59e:	f885 2185 	strb.w	r2, [r5, #389]	; 0x185
	conn->procedure_expire = 0U;
    e5a2:	f8a5 30ac 	strh.w	r3, [r5, #172]	; 0xac
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    e5a6:	7771      	strb	r1, [r6, #29]
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
    e5a8:	f8b5 2040 	ldrh.w	r2, [r5, #64]	; 0x40
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
    e5ac:	8fef      	ldrh	r7, [r5, #62]	; 0x3e
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
    e5ae:	f8b5 4044 	ldrh.w	r4, [r5, #68]	; 0x44
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
    e5b2:	f8b5 1042 	ldrh.w	r1, [r5, #66]	; 0x42
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
    e5b6:	8432      	strh	r2, [r6, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    e5b8:	2215      	movs	r2, #21
	int nack = 0;
    e5ba:	4618      	mov	r0, r3
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
    e5bc:	84b7      	strh	r7, [r6, #36]	; 0x24
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
    e5be:	8474      	strh	r4, [r6, #34]	; 0x22
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
    e5c0:	84f1      	strh	r1, [r6, #38]	; 0x26
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    e5c2:	77f2      	strb	r2, [r6, #31]
	if (err) {
    e5c4:	f7ff bb3f 	b.w	dc46 <ull_conn_rx+0xa2>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    e5c8:	f895 0194 	ldrb.w	r0, [r5, #404]	; 0x194
    e5cc:	f895 3195 	ldrb.w	r3, [r5, #405]	; 0x195
    e5d0:	4283      	cmp	r3, r0
    e5d2:	f43f ab35 	beq.w	dc40 <ull_conn_rx+0x9c>
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
    e5d6:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
    e5da:	2a23      	cmp	r2, #35	; 0x23
    e5dc:	d012      	beq.n	e604 <ull_conn_rx+0xa60>
		conn->lll.phy_tx_time = conn->lll.phy_tx;
    e5de:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
		conn->llcp_phy.pause_tx = 0U;
    e5e2:	f895 1197 	ldrb.w	r1, [r5, #407]	; 0x197
		conn->llcp_phy.ack = conn->llcp_phy.req;
    e5e6:	f885 0195 	strb.w	r0, [r5, #405]	; 0x195
		conn->lll.phy_tx_time = conn->lll.phy_tx;
    e5ea:	f3c3 0002 	ubfx	r0, r3, #0, #3
    e5ee:	f360 1306 	bfi	r3, r0, #4, #3
		conn->llcp_phy.pause_tx = 0U;
    e5f2:	f36f 0100 	bfc	r1, #0, #1
		conn->procedure_expire = 0U;
    e5f6:	2000      	movs	r0, #0
		conn->lll.phy_tx_time = conn->lll.phy_tx;
    e5f8:	f885 3046 	strb.w	r3, [r5, #70]	; 0x46
		conn->llcp_phy.pause_tx = 0U;
    e5fc:	f885 1197 	strb.w	r1, [r5, #407]	; 0x197
		conn->procedure_expire = 0U;
    e600:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
	if (!conn->llcp_phy.cmd) {
    e604:	f895 3197 	ldrb.w	r3, [r5, #407]	; 0x197
    e608:	075c      	lsls	r4, r3, #29
    e60a:	f57f ab19 	bpl.w	dc40 <ull_conn_rx+0x9c>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    e60e:	231a      	movs	r3, #26
	p->status = rej_ext_ind->error_code;
    e610:	7732      	strb	r2, [r6, #28]
    e612:	e659      	b.n	e2c8 <ull_conn_rx+0x724>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
    e614:	f895 215d 	ldrb.w	r2, [r5, #349]	; 0x15d
    e618:	f895 315c 	ldrb.w	r3, [r5, #348]	; 0x15c
    e61c:	429a      	cmp	r2, r3
    e61e:	f43f ab0f 	beq.w	dc40 <ull_conn_rx+0x9c>
	if (!lll->role && (rej_ext_ind->error_code ==
    e622:	f995 2039 	ldrsb.w	r2, [r5, #57]	; 0x39
    e626:	2a00      	cmp	r2, #0
    e628:	db04      	blt.n	e634 <ull_conn_rx+0xa90>
    e62a:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
    e62e:	2a1a      	cmp	r2, #26
    e630:	f000 84e7 	beq.w	f002 <ull_conn_rx+0x145e>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
    e634:	f895 215e 	ldrb.w	r2, [r5, #350]	; 0x15e
    e638:	f002 0107 	and.w	r1, r2, #7
    e63c:	2904      	cmp	r1, #4
    e63e:	f000 848d 	beq.w	ef5c <ull_conn_rx+0x13b8>
	if (!conn->llcp_conn_param.cmd) {
    e642:	0710      	lsls	r0, r2, #28
    e644:	f57f aafc 	bpl.w	dc40 <ull_conn_rx+0x9c>
	cu->status = rej_ext_ind->error_code;
    e648:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
    e64c:	7733      	strb	r3, [r6, #28]
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    e64e:	2216      	movs	r2, #22
    e650:	7132      	strb	r2, [r6, #4]
	cu->interval = lll->interval;
    e652:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
	cu->timeout = conn->supervision_reload *
    e654:	f8b5 20a6 	ldrh.w	r2, [r5, #166]	; 0xa6
	cu->latency = lll->latency;
    e658:	8da9      	ldrh	r1, [r5, #44]	; 0x2c
	cu->interval = lll->interval;
    e65a:	83f3      	strh	r3, [r6, #30]
	cu->timeout = conn->supervision_reload *
    e65c:	fb03 f202 	mul.w	r2, r3, r2
		      lll->interval * 125U / 1000;
    e660:	237d      	movs	r3, #125	; 0x7d
    e662:	fb03 f302 	mul.w	r3, r3, r2
	cu->latency = lll->latency;
    e666:	8431      	strh	r1, [r6, #32]
		      lll->interval * 125U / 1000;
    e668:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	int nack = 0;
    e66c:	2000      	movs	r0, #0
		      lll->interval * 125U / 1000;
    e66e:	fbb3 f3f2 	udiv	r3, r3, r2
	cu->timeout = conn->supervision_reload *
    e672:	8473      	strh	r3, [r6, #34]	; 0x22
	if (err) {
    e674:	f7ff bae7 	b.w	dc46 <ull_conn_rx+0xa2>
		if ((conn->llcp_ack != conn->llcp_req) &&
    e678:	f895 30bb 	ldrb.w	r3, [r5, #187]	; 0xbb
    e67c:	f895 20bc 	ldrb.w	r2, [r5, #188]	; 0xbc
    e680:	429a      	cmp	r2, r3
    e682:	f43f aadd 	beq.w	dc40 <ull_conn_rx+0x9c>
    e686:	f895 20bd 	ldrb.w	r2, [r5, #189]	; 0xbd
    e68a:	2a03      	cmp	r2, #3
    e68c:	f47f aad8 	bne.w	dc40 <ull_conn_rx+0x9c>
	conn->llcp_enc.pause_rx = 0U;
    e690:	f895 213e 	ldrb.w	r2, [r5, #318]	; 0x13e
	conn->llcp_ack = conn->llcp_req;
    e694:	f885 30bc 	strb.w	r3, [r5, #188]	; 0xbc
	conn->llcp_enc.pause_rx = 0U;
    e698:	f022 0203 	bic.w	r2, r2, #3
	conn->procedure_expire = 0U;
    e69c:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
    e69e:	f885 213e 	strb.w	r2, [r5, #318]	; 0x13e
	conn->procedure_expire = 0U;
    e6a2:	f8a5 30ac 	strh.w	r3, [r5, #172]	; 0xac
	pdu_rx->llctrl.reject_ind.error_code = rej_ext_ind->error_code;
    e6a6:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
    e6aa:	f886 2020 	strb.w	r2, [r6, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    e6ae:	220d      	movs	r2, #13
	int nack = 0;
    e6b0:	4618      	mov	r0, r3
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    e6b2:	77f2      	strb	r2, [r6, #31]
	if (err) {
    e6b4:	f7ff bac7 	b.w	dc46 <ull_conn_rx+0xa2>
	       (conn->lll.role &&
    e6b8:	2800      	cmp	r0, #0
    e6ba:	f43f ae12 	beq.w	e2e2 <ull_conn_rx+0x73e>
		 (conn->llcp_enc.refresh &&
    e6be:	f1b9 0f02 	cmp.w	r9, #2
    e6c2:	f43f ae15 	beq.w	e2f0 <ull_conn_rx+0x74c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    e6c6:	f1b9 0f0b 	cmp.w	r9, #11
    e6ca:	d038      	beq.n	e73e <ull_conn_rx+0xb9a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
    e6cc:	f1b9 0f03 	cmp.w	r9, #3
    e6d0:	f43f aae8 	beq.w	dca4 <ull_conn_rx+0x100>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    e6d4:	f1b9 0f06 	cmp.w	r9, #6
    e6d8:	f47f aa9c 	bne.w	dc14 <ull_conn_rx+0x70>
		if (PDU_DATA_LLCTRL_LEN(start_enc_rsp) != pdu_rx->len) {
    e6dc:	7f73      	ldrb	r3, [r6, #29]
    e6de:	2b01      	cmp	r3, #1
    e6e0:	f47f aae0 	bne.w	dca4 <ull_conn_rx+0x100>
			if ((conn->llcp_req != conn->llcp_ack) &&
    e6e4:	f895 00bc 	ldrb.w	r0, [r5, #188]	; 0xbc
    e6e8:	f895 30bb 	ldrb.w	r3, [r5, #187]	; 0xbb
    e6ec:	4283      	cmp	r3, r0
    e6ee:	f000 831b 	beq.w	ed28 <ull_conn_rx+0x1184>
    e6f2:	f895 30bd 	ldrb.w	r3, [r5, #189]	; 0xbd
    e6f6:	2b03      	cmp	r3, #3
    e6f8:	f47f aad4 	bne.w	dca4 <ull_conn_rx+0x100>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
    e6fc:	f895 30cc 	ldrb.w	r3, [r5, #204]	; 0xcc
    e700:	f36f 0301 	bfc	r3, #0, #2
    e704:	f885 30cc 	strb.w	r3, [r5, #204]	; 0xcc
			if (conn->llcp_req == conn->llcp_ack) {
    e708:	e71f      	b.n	e54a <ull_conn_rx+0x9a6>
		*err = -ENOBUFS;
    e70a:	f06f 0036 	mvn.w	r0, #54	; 0x36
    e70e:	f7ff ba9a 	b.w	dc46 <ull_conn_rx+0xa2>
		if (PDU_DATA_LLCTRL_LEN(start_enc_rsp) != pdu_rx->len) {
    e712:	7f73      	ldrb	r3, [r6, #29]
    e714:	2b01      	cmp	r3, #1
    e716:	f43f af12 	beq.w	e53e <ull_conn_rx+0x99a>
    e71a:	f7ff bac3 	b.w	dca4 <ull_conn_rx+0x100>
			conn->tx_data = conn->tx_data->next;
    e71e:	680a      	ldr	r2, [r1, #0]
    e720:	f8c5 21a8 	str.w	r2, [r5, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    e724:	2b00      	cmp	r3, #0
    e726:	f47f aaee 	bne.w	dd06 <ull_conn_rx+0x162>
			tx->next = conn->tx_head->next;
    e72a:	680b      	ldr	r3, [r1, #0]
    e72c:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
    e72e:	6008      	str	r0, [r1, #0]
				conn->tx_ctrl = tx;
    e730:	6801      	ldr	r1, [r0, #0]
				conn->tx_ctrl_last = tx;
    e732:	e9c5 0068 	strd	r0, r0, [r5, #416]	; 0x1a0
	if (!tx->next) {
    e736:	2900      	cmp	r1, #0
    e738:	f47f aa82 	bne.w	dc40 <ull_conn_rx+0x9c>
    e73c:	e6f2      	b.n	e524 <ull_conn_rx+0x980>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
    e73e:	7f73      	ldrb	r3, [r6, #29]
    e740:	2b01      	cmp	r3, #1
    e742:	f47f aaaf 	bne.w	dca4 <ull_conn_rx+0x100>
		conn->lll.enc_tx = 0;
    e746:	f895 305e 	ldrb.w	r3, [r5, #94]	; 0x5e
    e74a:	f36f 1304 	bfc	r3, #4, #1
    e74e:	f885 305e 	strb.w	r3, [r5, #94]	; 0x5e
		goto pause_enc_rsp_send_exit;
    e752:	f7ff ba75 	b.w	dc40 <ull_conn_rx+0x9c>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    e756:	790b      	ldrb	r3, [r1, #4]
    e758:	f003 0303 	and.w	r3, r3, #3
    e75c:	2b03      	cmp	r3, #3
    e75e:	f000 8248 	beq.w	ebf2 <ull_conn_rx+0x104e>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    e762:	f8c5 11a0 	str.w	r1, [r5, #416]	; 0x1a0
    e766:	f7ff bad0 	b.w	dd0a <ull_conn_rx+0x166>
		if (!conn->lll.role) {
    e76a:	f995 0039 	ldrsb.w	r0, [r5, #57]	; 0x39
    e76e:	f895 215d 	ldrb.w	r2, [r5, #349]	; 0x15d
    e772:	f895 c15c 	ldrb.w	ip, [r5, #348]	; 0x15c
    e776:	9200      	str	r2, [sp, #0]
    e778:	2800      	cmp	r0, #0
    e77a:	f2c0 8131 	blt.w	e9e0 <ull_conn_rx+0xe3c>
			if ((conn->llcp_conn_param.req !=
    e77e:	4562      	cmp	r2, ip
    e780:	d009      	beq.n	e796 <ull_conn_rx+0xbf2>
			    ((conn->llcp_conn_param.state ==
    e782:	f895 215e 	ldrb.w	r2, [r5, #350]	; 0x15e
					conn->llcp_conn_param.ack) &&
    e786:	f012 0207 	ands.w	r2, r2, #7
    e78a:	f000 824b 	beq.w	ec24 <ull_conn_rx+0x1080>
			      LLCP_CPR_STATE_REQ) ||
    e78e:	3a04      	subs	r2, #4
    e790:	2a01      	cmp	r2, #1
    e792:	f240 8247 	bls.w	ec24 <ull_conn_rx+0x1080>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
    e796:	f895 20bb 	ldrb.w	r2, [r5, #187]	; 0xbb
    e79a:	f895 00bc 	ldrb.w	r0, [r5, #188]	; 0xbc
    e79e:	1a12      	subs	r2, r2, r0
    e7a0:	f002 0203 	and.w	r2, r2, #3
    e7a4:	2a02      	cmp	r2, #2
    e7a6:	f000 8327 	beq.w	edf8 <ull_conn_rx+0x1254>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
    e7aa:	f895 0194 	ldrb.w	r0, [r5, #404]	; 0x194
    e7ae:	f895 2195 	ldrb.w	r2, [r5, #405]	; 0x195
    e7b2:	4290      	cmp	r0, r2
    e7b4:	f000 8344 	beq.w	ee40 <ull_conn_rx+0x129c>
				nack = reject_ext_ind_send(conn, *rx,
    e7b8:	4631      	mov	r1, r6
    e7ba:	4628      	mov	r0, r5
    e7bc:	232a      	movs	r3, #42	; 0x2a
    e7be:	220f      	movs	r2, #15
    e7c0:	f7ff bbaa 	b.w	df18 <ull_conn_rx+0x374>
		if (!conn->tx_ctrl) {
    e7c4:	f8d5 21a0 	ldr.w	r2, [r5, #416]	; 0x1a0
    e7c8:	2a00      	cmp	r2, #0
    e7ca:	f47f aea0 	bne.w	e50e <ull_conn_rx+0x96a>
			tx->next = conn->tx_head;
    e7ce:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    e7d0:	e9c5 0067 	strd	r0, r0, [r5, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    e7d4:	f8c5 01a4 	str.w	r0, [r5, #420]	; 0x1a4
    e7d8:	e6a0      	b.n	e51c <ull_conn_rx+0x978>
    e7da:	bf00      	nop
    e7dc:	20001a90 	.word	0x20001a90
	if (conn->common.txn_lock) {
    e7e0:	f895 30ba 	ldrb.w	r3, [r5, #186]	; 0xba
    e7e4:	079b      	lsls	r3, r3, #30
    e7e6:	f53f aa2b 	bmi.w	dc40 <ull_conn_rx+0x9c>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    e7ea:	48c6      	ldr	r0, [pc, #792]	; (eb04 <ull_conn_rx+0xf60>)
    e7ec:	f7f9 fea0 	bl	8530 <mem_acquire>
	if (!tx) {
    e7f0:	4601      	mov	r1, r0
    e7f2:	2800      	cmp	r0, #0
    e7f4:	d089      	beq.n	e70a <ull_conn_rx+0xb66>
	conn->common.txn_lock = 1U;
    e7f6:	f895 c0ba 	ldrb.w	ip, [r5, #186]	; 0xba
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
    e7fa:	f895 3184 	ldrb.w	r3, [r5, #388]	; 0x184
    e7fe:	f895 0185 	ldrb.w	r0, [r5, #389]	; 0x185
	eff_tx_octets = conn->lll.max_tx_octets;
    e802:	8fea      	ldrh	r2, [r5, #62]	; 0x3e
    e804:	9200      	str	r2, [sp, #0]
	if (/* Local idle, and Peer request then complete the Peer procedure
    e806:	4283      	cmp	r3, r0
	conn->common.txn_lock = 1U;
    e808:	f04c 0202 	orr.w	r2, ip, #2
	eff_rx_octets = conn->lll.max_rx_octets;
    e80c:	f8b5 8040 	ldrh.w	r8, [r5, #64]	; 0x40
	eff_rx_time = conn->lll.max_rx_time;
    e810:	f8b5 a044 	ldrh.w	sl, [r5, #68]	; 0x44
	eff_tx_time = conn->lll.max_tx_time;
    e814:	f8b5 b042 	ldrh.w	fp, [r5, #66]	; 0x42
	conn->common.txn_lock = 1U;
    e818:	f885 20ba 	strb.w	r2, [r5, #186]	; 0xba
	if (/* Local idle, and Peer request then complete the Peer procedure
    e81c:	d005      	beq.n	e82a <ull_conn_rx+0xc86>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
    e81e:	f895 2186 	ldrb.w	r2, [r5, #390]	; 0x186
	    ((conn->llcp_length.req != conn->llcp_length.ack) &&
    e822:	f012 0f06 	tst.w	r2, #6
    e826:	f47f acd5 	bne.w	e1d4 <ull_conn_rx+0x630>
		max_rx_octets = sys_le16_to_cpu(lr->max_rx_octets);
    e82a:	8c32      	ldrh	r2, [r6, #32]
		if (max_rx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
    e82c:	2a1a      	cmp	r2, #26
    e82e:	f240 824d 	bls.w	eccc <ull_conn_rx+0x1128>
			eff_tx_octets = MIN(max_rx_octets,
    e832:	f8b5 00b6 	ldrh.w	r0, [r5, #182]	; 0xb6
    e836:	4282      	cmp	r2, r0
    e838:	bf28      	it	cs
    e83a:	4602      	movcs	r2, r0
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
    e83c:	f8b6 e024 	ldrh.w	lr, [r6, #36]	; 0x24
		if (lr_rx_time >= PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M)) {
    e840:	8c70      	ldrh	r0, [r6, #34]	; 0x22
		lr_tx_time = sys_le16_to_cpu(lr->max_tx_time);
    e842:	f8b6 c026 	ldrh.w	ip, [r6, #38]	; 0x26
			eff_rx_octets = MIN(max_tx_octets,
    e846:	f1be 0f1b 	cmp.w	lr, #27
    e84a:	bf34      	ite	cc
    e84c:	46c6      	movcc	lr, r8
    e84e:	f04f 0e1b 	movcs.w	lr, #27
			eff_tx_time = MIN(lr_rx_time, max_tx_time);
    e852:	f5b0 7fa4 	cmp.w	r0, #328	; 0x148
    e856:	bf34      	ite	cc
    e858:	4658      	movcc	r0, fp
    e85a:	f44f 70a4 	movcs.w	r0, #328	; 0x148
			eff_rx_time = MIN(lr_tx_time, max_rx_time);
    e85e:	f5bc 7fa4 	cmp.w	ip, #328	; 0x148
    e862:	bf34      	ite	cc
    e864:	46d4      	movcc	ip, sl
    e866:	f44f 7ca4 	movcs.w	ip, #328	; 0x148
		if (eff_rx_octets != conn->lll.max_rx_octets) {
    e86a:	45c6      	cmp	lr, r8
    e86c:	f000 829d 	beq.w	edaa <ull_conn_rx+0x1206>
			conn->llcp_length.ack = conn->llcp_length.req - 1;
    e870:	3b01      	subs	r3, #1
    e872:	f885 3185 	strb.w	r3, [r5, #389]	; 0x185
			conn->llcp_length.rx_octets = eff_rx_octets;
    e876:	f8a5 e188 	strh.w	lr, [r5, #392]	; 0x188
				conn->llcp_length.state =
    e87a:	f895 3186 	ldrb.w	r3, [r5, #390]	; 0x186
			conn->llcp_length.tx_octets = eff_tx_octets;
    e87e:	f8a5 218a 	strh.w	r2, [r5, #394]	; 0x18a
			conn->llcp_length.rx_time = eff_rx_time;
    e882:	f8a5 c18c 	strh.w	ip, [r5, #396]	; 0x18c
			conn->llcp_length.tx_time = eff_tx_time;
    e886:	f8a5 018e 	strh.w	r0, [r5, #398]	; 0x18e
			if (tx) {
    e88a:	2900      	cmp	r1, #0
    e88c:	f000 82bf 	beq.w	ee0e <ull_conn_rx+0x126a>
				conn->llcp_length.state =
    e890:	2605      	movs	r6, #5
    e892:	f366 0302 	bfi	r3, r6, #0, #3
    e896:	f885 3186 	strb.w	r3, [r5, #390]	; 0x186
			link->mem = conn->llcp_rx;
    e89a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
    e89e:	607b      	str	r3, [r7, #4]
			(*rx)->hdr.link = link;
    e8a0:	6823      	ldr	r3, [r4, #0]
    e8a2:	601f      	str	r7, [r3, #0]
			conn->llcp_rx = *rx;
    e8a4:	6823      	ldr	r3, [r4, #0]
    e8a6:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
			*rx = NULL;
    e8aa:	2300      	movs	r3, #0
    e8ac:	6023      	str	r3, [r4, #0]
	if (tx) {
    e8ae:	2900      	cmp	r1, #0
    e8b0:	f43f a9c8 	beq.w	dc44 <ull_conn_rx+0xa0>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    e8b4:	790b      	ldrb	r3, [r1, #4]
	pdu_tx->llctrl.length_rsp.max_tx_octets =
    e8b6:	818a      	strh	r2, [r1, #12]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    e8b8:	f043 0303 	orr.w	r3, r3, #3
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    e8bc:	2215      	movs	r2, #21
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    e8be:	2409      	movs	r4, #9
	pdu_tx->llctrl.length_rsp.max_tx_time = sys_cpu_to_le16(eff_tx_time);
    e8c0:	81c8      	strh	r0, [r1, #14]
	pdu_tx->llctrl.length_rsp.max_rx_octets =
    e8c2:	f8a1 e008 	strh.w	lr, [r1, #8]
	ctrl_tx_sec_enqueue(conn, tx);
    e8c6:	4628      	mov	r0, r5
	pdu_tx->llctrl.length_rsp.max_rx_time = sys_cpu_to_le16(eff_rx_time);
    e8c8:	f8a1 c00a 	strh.w	ip, [r1, #10]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    e8cc:	710b      	strb	r3, [r1, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    e8ce:	714c      	strb	r4, [r1, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    e8d0:	71ca      	strb	r2, [r1, #7]
	ctrl_tx_sec_enqueue(conn, tx);
    e8d2:	f7fe fd99 	bl	d408 <ctrl_tx_sec_enqueue>
	return 0;
    e8d6:	2000      	movs	r0, #0
}
    e8d8:	f7ff b9b5 	b.w	dc46 <ull_conn_rx+0xa2>
	if (conn->common.txn_lock) {
    e8dc:	f895 80ba 	ldrb.w	r8, [r5, #186]	; 0xba
    e8e0:	f018 0802 	ands.w	r8, r8, #2
    e8e4:	f47f a9ac 	bne.w	dc40 <ull_conn_rx+0x9c>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    e8e8:	4886      	ldr	r0, [pc, #536]	; (eb04 <ull_conn_rx+0xf60>)
    e8ea:	f7f9 fe21 	bl	8530 <mem_acquire>
	if (!tx) {
    e8ee:	4602      	mov	r2, r0
    e8f0:	2800      	cmp	r0, #0
    e8f2:	f43f af0a 	beq.w	e70a <ull_conn_rx+0xb66>
	conn->common.txn_lock = 1U;
    e8f6:	f895 10ba 	ldrb.w	r1, [r5, #186]	; 0xba
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    e8fa:	f895 0196 	ldrb.w	r0, [r5, #406]	; 0x196
	if (conn->llcp_phy.ack ==
    e8fe:	f895 e195 	ldrb.w	lr, [r5, #405]	; 0x195
    e902:	f895 7194 	ldrb.w	r7, [r5, #404]	; 0x194
    e906:	f895 3198 	ldrb.w	r3, [r5, #408]	; 0x198
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    e90a:	2402      	movs	r4, #2
    e90c:	f364 0001 	bfi	r0, r4, #0, #2
	conn->common.txn_lock = 1U;
    e910:	4321      	orrs	r1, r4
	if (conn->llcp_phy.ack ==
    e912:	4577      	cmp	r7, lr
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    e914:	f885 0196 	strb.w	r0, [r5, #406]	; 0x196
	conn->common.txn_lock = 1U;
    e918:	f885 10ba 	strb.w	r1, [r5, #186]	; 0xba
	if (conn->llcp_phy.ack ==
    e91c:	f3c3 0402 	ubfx	r4, r3, #0, #3
    e920:	f003 0c07 	and.w	ip, r3, #7
    e924:	f3c3 00c2 	ubfx	r0, r3, #3, #3
    e928:	d114      	bne.n	e954 <ull_conn_rx+0xdb0>
		conn->llcp_phy.tx =
    e92a:	f895 1196 	ldrb.w	r1, [r5, #406]	; 0x196
		conn->procedure_expire =
    e92e:	f8b5 30aa 	ldrh.w	r3, [r5, #170]	; 0xaa
    e932:	f8a5 30ac 	strh.w	r3, [r5, #172]	; 0xac
		conn->llcp_phy.tx =
    e936:	f36c 0184 	bfi	r1, ip, #2, #3
		conn->llcp_phy.cmd = 0U;
    e93a:	f895 c197 	ldrb.w	ip, [r5, #407]	; 0x197
		conn->llcp_phy.ack--;
    e93e:	3f01      	subs	r7, #1
		conn->llcp_phy.rx =
    e940:	f360 1147 	bfi	r1, r0, #5, #3
		conn->llcp_phy.cmd = 0U;
    e944:	f368 0c82 	bfi	ip, r8, #2, #1
		conn->llcp_phy.ack--;
    e948:	f885 7195 	strb.w	r7, [r5, #405]	; 0x195
		conn->llcp_phy.rx =
    e94c:	f885 1196 	strb.w	r1, [r5, #406]	; 0x196
		conn->llcp_phy.cmd = 0U;
    e950:	f885 c197 	strb.w	ip, [r5, #407]	; 0x197
	conn->llcp_phy.rx &= p->tx_phys;
    e954:	f895 1196 	ldrb.w	r1, [r5, #406]	; 0x196
	conn->llcp_phy.tx &= p->rx_phys;
    e958:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
	conn->llcp_phy.rx &= p->tx_phys;
    e95c:	f896 7020 	ldrb.w	r7, [r6, #32]
	conn->llcp_phy.tx &= p->rx_phys;
    e960:	f3c1 0c82 	ubfx	ip, r1, #2, #3
    e964:	ea03 030c 	and.w	r3, r3, ip
	conn->llcp_phy.rx &= p->tx_phys;
    e968:	ea07 1751 	and.w	r7, r7, r1, lsr #5
	conn->llcp_phy.tx &= p->rx_phys;
    e96c:	009b      	lsls	r3, r3, #2
    e96e:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
    e972:	f001 0103 	and.w	r1, r1, #3
    e976:	430b      	orrs	r3, r1
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
    e978:	2703      	movs	r7, #3
	conn->llcp_phy.tx &= p->rx_phys;
    e97a:	f885 3196 	strb.w	r3, [r5, #406]	; 0x196
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e97e:	7911      	ldrb	r1, [r2, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
    e980:	7157      	strb	r7, [r2, #5]
	    conn->tx_head &&
    e982:	f8d5 719c 	ldr.w	r7, [r5, #412]	; 0x19c
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
    e986:	7214      	strb	r4, [r2, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e988:	f041 0103 	orr.w	r1, r1, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
    e98c:	2417      	movs	r4, #23
    e98e:	f8d5 31a0 	ldr.w	r3, [r5, #416]	; 0x1a0
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
    e992:	7250      	strb	r0, [r2, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e994:	7111      	strb	r1, [r2, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
    e996:	71d4      	strb	r4, [r2, #7]
	if (
    e998:	2f00      	cmp	r7, #0
    e99a:	f000 81bc 	beq.w	ed16 <ull_conn_rx+0x1172>
	    !conn->llcp_enc.pause_tx &&
    e99e:	f895 113e 	ldrb.w	r1, [r5, #318]	; 0x13e
	    conn->tx_head &&
    e9a2:	0788      	lsls	r0, r1, #30
    e9a4:	f100 81b7 	bmi.w	ed16 <ull_conn_rx+0x1172>
	    !conn->llcp_phy.pause_tx &&
    e9a8:	f895 1197 	ldrb.w	r1, [r5, #407]	; 0x197
    e9ac:	07c9      	lsls	r1, r1, #31
    e9ae:	f100 81b2 	bmi.w	ed16 <ull_conn_rx+0x1172>
		if (conn->tx_head == conn->tx_data) {
    e9b2:	f8d5 11a8 	ldr.w	r1, [r5, #424]	; 0x1a8
    e9b6:	428f      	cmp	r7, r1
    e9b8:	f000 8311 	beq.w	efde <ull_conn_rx+0x143a>
		} else if (!conn->tx_ctrl) {
    e9bc:	2b00      	cmp	r3, #0
    e9be:	f000 8380 	beq.w	f0c2 <ull_conn_rx+0x151e>
	tx->next = conn->tx_ctrl_last->next;
    e9c2:	f8d5 31a4 	ldr.w	r3, [r5, #420]	; 0x1a4
    e9c6:	6819      	ldr	r1, [r3, #0]
    e9c8:	6011      	str	r1, [r2, #0]
	conn->tx_ctrl_last->next = tx;
    e9ca:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
    e9cc:	f8c5 21a4 	str.w	r2, [r5, #420]	; 0x1a4
	if (!tx->next) {
    e9d0:	6813      	ldr	r3, [r2, #0]
    e9d2:	2b00      	cmp	r3, #0
    e9d4:	f47f a934 	bne.w	dc40 <ull_conn_rx+0x9c>
		conn->tx_data_last = tx;
    e9d8:	f8c5 21ac 	str.w	r2, [r5, #428]	; 0x1ac
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
    e9dc:	f7ff b930 	b.w	dc40 <ull_conn_rx+0x9c>
		} else if ((conn->llcp_conn_param.req ==
    e9e0:	9a00      	ldr	r2, [sp, #0]
    e9e2:	4562      	cmp	r2, ip
    e9e4:	d004      	beq.n	e9f0 <ull_conn_rx+0xe4c>
			    conn->llcp_conn_param.ack) ||
    e9e6:	f895 215e 	ldrb.w	r2, [r5, #350]	; 0x15e
    e9ea:	0792      	lsls	r2, r2, #30
    e9ec:	f47f a928 	bne.w	dc40 <ull_conn_rx+0x9c>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
    e9f0:	f8b6 8020 	ldrh.w	r8, [r6, #32]
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
    e9f4:	f1b8 0f05 	cmp.w	r8, #5
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
    e9f8:	fa1f f288 	uxth.w	r2, r8
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
    e9fc:	d97b      	bls.n	eaf6 <ull_conn_rx+0xf52>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
    e9fe:	f8b6 e022 	ldrh.w	lr, [r6, #34]	; 0x22
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
    ea02:	f5be 6f48 	cmp.w	lr, #3200	; 0xc80
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
    ea06:	fa1f f18e 	uxth.w	r1, lr
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
    ea0a:	d874      	bhi.n	eaf6 <ull_conn_rx+0xf52>
			    (interval_max > 3200) ||
    ea0c:	428a      	cmp	r2, r1
    ea0e:	d872      	bhi.n	eaf6 <ull_conn_rx+0xf52>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
    ea10:	f8b6 c024 	ldrh.w	ip, [r6, #36]	; 0x24
			    (interval_min > interval_max) ||
    ea14:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
    ea18:	fa1f fa8c 	uxth.w	sl, ip
			    (interval_min > interval_max) ||
    ea1c:	d26b      	bcs.n	eaf6 <ull_conn_rx+0xf52>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
    ea1e:	8cf0      	ldrh	r0, [r6, #38]	; 0x26
			    (latency > 499) ||
    ea20:	f1a0 090a 	sub.w	r9, r0, #10
    ea24:	fa1f f989 	uxth.w	r9, r9
    ea28:	f640 4b76 	movw	fp, #3190	; 0xc76
    ea2c:	45d9      	cmp	r9, fp
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
    ea2e:	b282      	uxth	r2, r0
			    (latency > 499) ||
    ea30:	d861      	bhi.n	eaf6 <ull_conn_rx+0xf52>
			     ((latency + 1) * interval_max)) ||
    ea32:	fb0a 1901 	mla	r9, sl, r1, r1
			    (timeout < 10) || (timeout > 3200) ||
    ea36:	ebb9 0f82 	cmp.w	r9, r2, lsl #2
    ea3a:	d25c      	bcs.n	eaf6 <ull_conn_rx+0xf52>
			     ((latency + 1) * interval_max)) ||
    ea3c:	f896 b028 	ldrb.w	fp, [r6, #40]	; 0x28
    ea40:	4559      	cmp	r1, fp
    ea42:	d358      	bcc.n	eaf6 <ull_conn_rx+0xf52>
			conn->llcp_conn_param.latency =	latency;
    ea44:	f8a5 c164 	strh.w	ip, [r5, #356]	; 0x164
			conn->llcp_conn_param.interval_min = interval_min;
    ea48:	f8a5 8160 	strh.w	r8, [r5, #352]	; 0x160
			conn->llcp_conn_param.interval_max = interval_max;
    ea4c:	f8a5 e162 	strh.w	lr, [r5, #354]	; 0x162
			conn->llcp_conn_param.timeout =	timeout;
    ea50:	f8a5 0166 	strh.w	r0, [r5, #358]	; 0x166
			conn->llcp_conn_param.preferred_periodicity =
    ea54:	f885 b168 	strb.w	fp, [r5, #360]	; 0x168
				sys_le16_to_cpu(cpr->reference_conn_event_count);
    ea58:	f896 e02a 	ldrb.w	lr, [r6, #42]	; 0x2a
    ea5c:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
			     lll->interval) ||
    ea60:	f8b5 c02a 	ldrh.w	ip, [r5, #42]	; 0x2a
				sys_le16_to_cpu(cpr->reference_conn_event_count);
    ea64:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    ea68:	f8a5 016a 	strh.w	r0, [r5, #362]	; 0x16a
				sys_le16_to_cpu(cpr->offset0);
    ea6c:	f896 e02c 	ldrb.w	lr, [r6, #44]	; 0x2c
    ea70:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    ea74:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset0 =
    ea78:	f8a5 016c 	strh.w	r0, [r5, #364]	; 0x16c
				sys_le16_to_cpu(cpr->offset1);
    ea7c:	f896 e02e 	ldrb.w	lr, [r6, #46]	; 0x2e
    ea80:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
    ea84:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset1 =
    ea88:	f8a5 016e 	strh.w	r0, [r5, #366]	; 0x16e
				sys_le16_to_cpu(cpr->offset2);
    ea8c:	f896 e030 	ldrb.w	lr, [r6, #48]	; 0x30
    ea90:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    ea94:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset2 =
    ea98:	f8a5 0170 	strh.w	r0, [r5, #368]	; 0x170
				sys_le16_to_cpu(cpr->offset3);
    ea9c:	f896 e032 	ldrb.w	lr, [r6, #50]	; 0x32
    eaa0:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    eaa4:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset3 =
    eaa8:	f8a5 0172 	strh.w	r0, [r5, #370]	; 0x172
				sys_le16_to_cpu(cpr->offset4);
    eaac:	f896 0033 	ldrb.w	r0, [r6, #51]	; 0x33
    eab0:	f896 e034 	ldrb.w	lr, [r6, #52]	; 0x34
    eab4:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset4 =
    eab8:	f8a5 0174 	strh.w	r0, [r5, #372]	; 0x174
				sys_le16_to_cpu(cpr->offset5);
    eabc:	f896 0035 	ldrb.w	r0, [r6, #53]	; 0x35
    eac0:	f896 6036 	ldrb.w	r6, [r6, #54]	; 0x36
			if ((conn->llcp_conn_param.interval_max !=
    eac4:	4561      	cmp	r1, ip
				sys_le16_to_cpu(cpr->offset5);
    eac6:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
			conn->llcp_conn_param.offset5 =
    eaca:	f8a5 0176 	strh.w	r0, [r5, #374]	; 0x176
			if ((conn->llcp_conn_param.interval_max !=
    eace:	f000 82d7 	beq.w	f080 <ull_conn_rx+0x14dc>
				conn->llcp_conn_param.state =
    ead2:	f895 215e 	ldrb.w	r2, [r5, #350]	; 0x15e
    ead6:	2103      	movs	r1, #3
    ead8:	f361 0202 	bfi	r2, r1, #0, #3
    eadc:	f885 215e 	strb.w	r2, [r5, #350]	; 0x15e
			conn->llcp_conn_param.ack--;
    eae0:	9a00      	ldr	r2, [sp, #0]
    eae2:	3a01      	subs	r2, #1
    eae4:	f885 215d 	strb.w	r2, [r5, #349]	; 0x15d
			if (!conn_upd_curr) {
    eae8:	2b00      	cmp	r3, #0
    eaea:	f47f a8ab 	bne.w	dc44 <ull_conn_rx+0xa0>
				conn_upd_curr = conn;
    eaee:	603d      	str	r5, [r7, #0]
	int nack = 0;
    eaf0:	4618      	mov	r0, r3
    eaf2:	f7ff b8a8 	b.w	dc46 <ull_conn_rx+0xa2>
				nack = reject_ext_ind_send(conn, *rx,
    eaf6:	4631      	mov	r1, r6
    eaf8:	4628      	mov	r0, r5
    eafa:	231e      	movs	r3, #30
    eafc:	220f      	movs	r2, #15
    eafe:	f7ff ba0b 	b.w	df18 <ull_conn_rx+0x374>
    eb02:	bf00      	nop
    eb04:	20001a90 	.word	0x20001a90
			conn->llcp_conn_param.disabled = 1U;
    eb08:	f895 215e 	ldrb.w	r2, [r5, #350]	; 0x15e
			if (!conn->lll.role) {
    eb0c:	f995 1039 	ldrsb.w	r1, [r5, #57]	; 0x39
			conn->llcp_conn_param.disabled = 1U;
    eb10:	f042 0210 	orr.w	r2, r2, #16
			if (!conn->lll.role) {
    eb14:	2900      	cmp	r1, #0
			conn->llcp_conn_param.disabled = 1U;
    eb16:	f885 215e 	strb.w	r2, [r5, #350]	; 0x15e
			if (!conn->lll.role) {
    eb1a:	f2c0 8112 	blt.w	ed42 <ull_conn_rx+0x119e>
				LL_ASSERT(conn->llcp_cu.req ==
    eb1e:	f895 30e4 	ldrb.w	r3, [r5, #228]	; 0xe4
    eb22:	f895 20e5 	ldrb.w	r2, [r5, #229]	; 0xe5
    eb26:	4293      	cmp	r3, r2
    eb28:	d00e      	beq.n	eb48 <ull_conn_rx+0xfa4>
    eb2a:	4abf      	ldr	r2, [pc, #764]	; (ee28 <ull_conn_rx+0x1284>)
    eb2c:	49bf      	ldr	r1, [pc, #764]	; (ee2c <ull_conn_rx+0x1288>)
    eb2e:	48c0      	ldr	r0, [pc, #768]	; (ee30 <ull_conn_rx+0x128c>)
    eb30:	f641 1315 	movw	r3, #6421	; 0x1915
    eb34:	f007 f904 	bl	15d40 <printk>
    eb38:	4040      	eors	r0, r0
    eb3a:	f380 8811 	msr	BASEPRI, r0
    eb3e:	f04f 0003 	mov.w	r0, #3
    eb42:	df02      	svc	2
    eb44:	f895 20e5 	ldrb.w	r2, [r5, #229]	; 0xe5
				conn->llcp_conn_param.state =
    eb48:	f895 015e 	ldrb.w	r0, [r5, #350]	; 0x15e
				conn->llcp_cu.interval =
    eb4c:	f8b5 3162 	ldrh.w	r3, [r5, #354]	; 0x162
    eb50:	f8a5 30e8 	strh.w	r3, [r5, #232]	; 0xe8
				conn->llcp_conn_param.state =
    eb54:	2305      	movs	r3, #5
    eb56:	f363 0002 	bfi	r0, r3, #0, #3
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    eb5a:	f895 10e6 	ldrb.w	r1, [r5, #230]	; 0xe6
				conn->llcp_cu.ack--;
    eb5e:	1e53      	subs	r3, r2, #1
				conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    eb60:	f3c0 02c0 	ubfx	r2, r0, #3, #1
				conn->llcp_cu.win_size = 1U;
    eb64:	2601      	movs	r6, #1
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    eb66:	00d2      	lsls	r2, r2, #3
				conn->llcp_cu.ack--;
    eb68:	f885 30e5 	strb.w	r3, [r5, #229]	; 0xe5
				conn->llcp_cu.win_size = 1U;
    eb6c:	f885 60f4 	strb.w	r6, [r5, #244]	; 0xf4
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    eb70:	f021 030f 	bic.w	r3, r1, #15
    eb74:	4332      	orrs	r2, r6
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    eb76:	6821      	ldr	r1, [r4, #0]
				conn->llcp_cu.latency =
    eb78:	f8b5 4164 	ldrh.w	r4, [r5, #356]	; 0x164
				conn->llcp_conn_param.state =
    eb7c:	f885 015e 	strb.w	r0, [r5, #350]	; 0x15e
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    eb80:	431a      	orrs	r2, r3
    eb82:	f885 20e6 	strb.w	r2, [r5, #230]	; 0xe6
				conn->llcp_cu.win_offset_us = 0U;
    eb86:	2000      	movs	r0, #0
				conn->llcp_cu.timeout =
    eb88:	f8b5 2166 	ldrh.w	r2, [r5, #358]	; 0x166
				conn->llcp_cu.win_offset_us = 0U;
    eb8c:	f8c5 00f0 	str.w	r0, [r5, #240]	; 0xf0
				conn->llcp_cu.latency =
    eb90:	f8a5 40ea 	strh.w	r4, [r5, #234]	; 0xea
				conn->llcp_cu.timeout =
    eb94:	f8a5 20ec 	strh.w	r2, [r5, #236]	; 0xec
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    eb98:	710e      	strb	r6, [r1, #4]
				break;
    eb9a:	f7ff b854 	b.w	dc46 <ull_conn_rx+0xa2>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    eb9e:	48a5      	ldr	r0, [pc, #660]	; (ee34 <ull_conn_rx+0x1290>)
    eba0:	f7f9 fcc6 	bl	8530 <mem_acquire>
		if (!tx) {
    eba4:	4601      	mov	r1, r0
    eba6:	2800      	cmp	r0, #0
    eba8:	f43f adaf 	beq.w	e70a <ull_conn_rx+0xb66>
		conn->llcp_version.tx = 1U;
    ebac:	f895 2112 	ldrb.w	r2, [r5, #274]	; 0x112
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    ebb0:	7903      	ldrb	r3, [r0, #4]
		conn->llcp_version.tx = 1U;
    ebb2:	f042 0201 	orr.w	r2, r2, #1
    ebb6:	f885 2112 	strb.w	r2, [r5, #274]	; 0x112
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    ebba:	f043 0303 	orr.w	r3, r3, #3
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    ebbe:	220c      	movs	r2, #12
		pdu_tx->len =
    ebc0:	7144      	strb	r4, [r0, #5]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    ebc2:	7103      	strb	r3, [r0, #4]
		v->version_number = LL_VERSION_NUMBER;
    ebc4:	240b      	movs	r4, #11
		v->sub_version_number =
    ebc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
    ebca:	f06f 000e 	mvn.w	r0, #14
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    ebce:	71ca      	strb	r2, [r1, #7]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
    ebd0:	2205      	movs	r2, #5
    ebd2:	7248      	strb	r0, [r1, #9]
		v->sub_version_number =
    ebd4:	72cb      	strb	r3, [r1, #11]
    ebd6:	730b      	strb	r3, [r1, #12]
		v->version_number = LL_VERSION_NUMBER;
    ebd8:	720c      	strb	r4, [r1, #8]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
    ebda:	728a      	strb	r2, [r1, #10]
		ctrl_tx_sec_enqueue(conn, tx);
    ebdc:	4628      	mov	r0, r5
    ebde:	f7fe fc13 	bl	d408 <ctrl_tx_sec_enqueue>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
    ebe2:	2301      	movs	r3, #1
    ebe4:	7133      	strb	r3, [r6, #4]
    ebe6:	f7ff bbf2 	b.w	e3ce <ull_conn_rx+0x82a>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
    ebea:	7137      	strb	r7, [r6, #4]
		*err = 0U;
    ebec:	2000      	movs	r0, #0
    ebee:	f7ff b82a 	b.w	dc46 <ull_conn_rx+0xa2>
	    ((pdu_data_tx->llctrl.opcode !=
    ebf2:	79cb      	ldrb	r3, [r1, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    ebf4:	2b03      	cmp	r3, #3
    ebf6:	f43f ad98 	beq.w	e72a <ull_conn_rx+0xb86>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    ebfa:	2b0a      	cmp	r3, #10
    ebfc:	f47f adb1 	bne.w	e762 <ull_conn_rx+0xbbe>
    ec00:	e593      	b.n	e72a <ull_conn_rx+0xb86>
				      0x03) == 0x02) &&
    ec02:	f895 30bd 	ldrb.w	r3, [r5, #189]	; 0xbd
    ec06:	2b03      	cmp	r3, #3
    ec08:	f47f a982 	bne.w	df10 <ull_conn_rx+0x36c>
    ec0c:	f7ff b979 	b.w	df02 <ull_conn_rx+0x35e>
			conn->llcp_length.disabled = 1U;
    ec10:	f895 2186 	ldrb.w	r2, [r5, #390]	; 0x186
			conn->llcp_length.ack = conn->llcp_length.req;
    ec14:	f885 3185 	strb.w	r3, [r5, #389]	; 0x185
			conn->llcp_length.disabled = 1U;
    ec18:	f042 0308 	orr.w	r3, r2, #8
    ec1c:	f885 3186 	strb.w	r3, [r5, #390]	; 0x186
			conn->llcp_length.ack = conn->llcp_length.req;
    ec20:	f7ff bb97 	b.w	e352 <ull_conn_rx+0x7ae>
				nack = reject_ext_ind_send(conn, *rx,
    ec24:	4631      	mov	r1, r6
    ec26:	4628      	mov	r0, r5
    ec28:	2323      	movs	r3, #35	; 0x23
    ec2a:	220f      	movs	r2, #15
    ec2c:	f7ff b974 	b.w	df18 <ull_conn_rx+0x374>
	} else if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
    ec30:	f895 215d 	ldrb.w	r2, [r5, #349]	; 0x15d
    ec34:	f895 315c 	ldrb.w	r3, [r5, #348]	; 0x15c
    ec38:	429a      	cmp	r2, r3
    ec3a:	f43f aca7 	beq.w	e58c <ull_conn_rx+0x9e8>
		rej_ext_ind->error_code = rej_ind->error_code;
    ec3e:	f896 3020 	ldrb.w	r3, [r6, #32]
    ec42:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
	if (!lll->role && (rej_ext_ind->error_code ==
    ec46:	f995 2039 	ldrsb.w	r2, [r5, #57]	; 0x39
    ec4a:	2a00      	cmp	r2, #0
    ec4c:	db02      	blt.n	ec54 <ull_conn_rx+0x10b0>
    ec4e:	2b1a      	cmp	r3, #26
    ec50:	f000 81d7 	beq.w	f002 <ull_conn_rx+0x145e>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
    ec54:	f895 215e 	ldrb.w	r2, [r5, #350]	; 0x15e
    ec58:	f002 0307 	and.w	r3, r2, #7
    ec5c:	2b04      	cmp	r3, #4
    ec5e:	f47f acf0 	bne.w	e642 <ull_conn_rx+0xa9e>
		LL_ASSERT(conn_upd_curr == conn);
    ec62:	4f75      	ldr	r7, [pc, #468]	; (ee38 <ull_conn_rx+0x1294>)
    ec64:	683b      	ldr	r3, [r7, #0]
    ec66:	429d      	cmp	r5, r3
    ec68:	d00e      	beq.n	ec88 <ull_conn_rx+0x10e4>
    ec6a:	4a6f      	ldr	r2, [pc, #444]	; (ee28 <ull_conn_rx+0x1284>)
    ec6c:	4973      	ldr	r1, [pc, #460]	; (ee3c <ull_conn_rx+0x1298>)
    ec6e:	4870      	ldr	r0, [pc, #448]	; (ee30 <ull_conn_rx+0x128c>)
    ec70:	f241 2329 	movw	r3, #4649	; 0x1229
    ec74:	f007 f864 	bl	15d40 <printk>
    ec78:	4040      	eors	r0, r0
    ec7a:	f380 8811 	msr	BASEPRI, r0
    ec7e:	f04f 0003 	mov.w	r0, #3
    ec82:	df02      	svc	2
    ec84:	f895 215e 	ldrb.w	r2, [r5, #350]	; 0x15e
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    ec88:	f895 315c 	ldrb.w	r3, [r5, #348]	; 0x15c
    ec8c:	f885 315d 	strb.w	r3, [r5, #349]	; 0x15d
	conn_upd_curr = NULL;
    ec90:	2300      	movs	r3, #0
    ec92:	603b      	str	r3, [r7, #0]
		conn->procedure_expire = 0U;
    ec94:	f8a5 30ac 	strh.w	r3, [r5, #172]	; 0xac
    ec98:	e4d3      	b.n	e642 <ull_conn_rx+0xa9e>
				nack = reject_ext_ind_send(conn, *rx,
    ec9a:	4631      	mov	r1, r6
    ec9c:	4628      	mov	r0, r5
    ec9e:	231e      	movs	r3, #30
    eca0:	2210      	movs	r2, #16
    eca2:	f7ff b939 	b.w	df18 <ull_conn_rx+0x374>
				nack = reject_ext_ind_send(conn, *rx,
    eca6:	4631      	mov	r1, r6
    eca8:	4628      	mov	r0, r5
    ecaa:	2323      	movs	r3, #35	; 0x23
    ecac:	f7ff b933 	b.w	df16 <ull_conn_rx+0x372>
	conn->llcp_enc.pause_rx = 0U;
    ecb0:	f895 213e 	ldrb.w	r2, [r5, #318]	; 0x13e
	conn->llcp_ack = conn->llcp_req;
    ecb4:	f885 30bc 	strb.w	r3, [r5, #188]	; 0xbc
	conn->llcp_enc.pause_rx = 0U;
    ecb8:	f022 0203 	bic.w	r2, r2, #3
	conn->procedure_expire = 0U;
    ecbc:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
    ecbe:	f885 213e 	strb.w	r2, [r5, #318]	; 0x13e
	conn->procedure_expire = 0U;
    ecc2:	f8a5 30ac 	strh.w	r3, [r5, #172]	; 0xac
	int nack = 0;
    ecc6:	4618      	mov	r0, r3
    ecc8:	f7fe bfbd 	b.w	dc46 <ull_conn_rx+0xa2>
    eccc:	9a00      	ldr	r2, [sp, #0]
    ecce:	e5b5      	b.n	e83c <ull_conn_rx+0xc98>
			lll->phy_tx_time = lll->phy_tx;
    ecd0:	f895 2046 	ldrb.w	r2, [r5, #70]	; 0x46
			conn->llcp_phy.pause_tx = 0U;
    ecd4:	f895 3197 	ldrb.w	r3, [r5, #407]	; 0x197
			conn->llcp_phy.ack = conn->llcp_phy.req;
    ecd8:	f885 1195 	strb.w	r1, [r5, #405]	; 0x195
			conn->llcp_phy.pause_tx = 0U;
    ecdc:	f023 0309 	bic.w	r3, r3, #9
			lll->phy_tx_time = lll->phy_tx;
    ece0:	4611      	mov	r1, r2
    ece2:	f362 1106 	bfi	r1, r2, #4, #3
			conn->llcp_phy.pause_tx = 0U;
    ece6:	f043 0308 	orr.w	r3, r3, #8
			lll->phy_tx_time = lll->phy_tx;
    ecea:	f885 1046 	strb.w	r1, [r5, #70]	; 0x46
			if (conn->llcp_phy.cmd) {
    ecee:	0759      	lsls	r1, r3, #29
			conn->llcp_phy.pause_tx = 0U;
    ecf0:	f885 3197 	strb.w	r3, [r5, #407]	; 0x197
			lll->phy_tx_time = lll->phy_tx;
    ecf4:	f3c2 0202 	ubfx	r2, r2, #0, #3
			if (conn->llcp_phy.cmd) {
    ecf8:	f140 8084 	bpl.w	ee04 <ull_conn_rx+0x1260>
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    ecfc:	6821      	ldr	r1, [r4, #0]
				p->status = 0U;
    ecfe:	2300      	movs	r3, #0
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    ed00:	201a      	movs	r0, #26
    ed02:	7108      	strb	r0, [r1, #4]
				p->tx = lll->phy_tx;
    ed04:	7772      	strb	r2, [r6, #29]
				p->status = 0U;
    ed06:	7733      	strb	r3, [r6, #28]
				p->rx = lll->phy_rx;
    ed08:	f895 3047 	ldrb.w	r3, [r5, #71]	; 0x47
    ed0c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ed10:	77b3      	strb	r3, [r6, #30]
    ed12:	f7ff bb1e 	b.w	e352 <ull_conn_rx+0x7ae>
		if (!conn->tx_ctrl) {
    ed16:	2b00      	cmp	r3, #0
    ed18:	f47f ae53 	bne.w	e9c2 <ull_conn_rx+0xe1e>
			tx->next = conn->tx_head;
    ed1c:	6017      	str	r7, [r2, #0]
				conn->tx_ctrl = tx;
    ed1e:	e9c5 2267 	strd	r2, r2, [r5, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    ed22:	f8c5 21a4 	str.w	r2, [r5, #420]	; 0x1a4
    ed26:	e653      	b.n	e9d0 <ull_conn_rx+0xe2c>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
    ed28:	f895 20cc 	ldrb.w	r2, [r5, #204]	; 0xcc
				conn->llcp_ack -= 2U;
    ed2c:	3b02      	subs	r3, #2
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
    ed2e:	f36f 0201 	bfc	r2, #0, #2
				conn->llcp_type = LLCP_ENCRYPTION;
    ed32:	2003      	movs	r0, #3
				conn->llcp_ack -= 2U;
    ed34:	f885 30bc 	strb.w	r3, [r5, #188]	; 0xbc
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
    ed38:	f885 20cc 	strb.w	r2, [r5, #204]	; 0xcc
				conn->llcp_type = LLCP_ENCRYPTION;
    ed3c:	f885 00bd 	strb.w	r0, [r5, #189]	; 0xbd
				conn->llcp_ack -= 2U;
    ed40:	e403      	b.n	e54a <ull_conn_rx+0x9a6>
			LL_ASSERT(conn_upd_curr == conn);
    ed42:	4f3d      	ldr	r7, [pc, #244]	; (ee38 <ull_conn_rx+0x1294>)
    ed44:	683a      	ldr	r2, [r7, #0]
    ed46:	4295      	cmp	r5, r2
    ed48:	d00e      	beq.n	ed68 <ull_conn_rx+0x11c4>
    ed4a:	4a37      	ldr	r2, [pc, #220]	; (ee28 <ull_conn_rx+0x1284>)
    ed4c:	493b      	ldr	r1, [pc, #236]	; (ee3c <ull_conn_rx+0x1298>)
    ed4e:	4838      	ldr	r0, [pc, #224]	; (ee30 <ull_conn_rx+0x128c>)
    ed50:	f641 132d 	movw	r3, #6445	; 0x192d
    ed54:	f006 fff4 	bl	15d40 <printk>
    ed58:	4040      	eors	r0, r0
    ed5a:	f380 8811 	msr	BASEPRI, r0
    ed5e:	f04f 0003 	mov.w	r0, #3
    ed62:	df02      	svc	2
    ed64:	f895 315c 	ldrb.w	r3, [r5, #348]	; 0x15c
			if (!conn->llcp_conn_param.cmd) {
    ed68:	f895 215e 	ldrb.w	r2, [r5, #350]	; 0x15e
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    ed6c:	f885 315d 	strb.w	r3, [r5, #349]	; 0x15d
	conn_upd_curr = NULL;
    ed70:	2300      	movs	r3, #0
    ed72:	603b      	str	r3, [r7, #0]
			if (!conn->llcp_conn_param.cmd) {
    ed74:	f012 0308 	ands.w	r3, r2, #8
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    ed78:	6822      	ldr	r2, [r4, #0]
			if (!conn->llcp_conn_param.cmd) {
    ed7a:	f43e af6d 	beq.w	dc58 <ull_conn_rx+0xb4>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    ed7e:	2116      	movs	r1, #22
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    ed80:	231a      	movs	r3, #26
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    ed82:	7111      	strb	r1, [r2, #4]
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    ed84:	7733      	strb	r3, [r6, #28]
			cu->interval = lll->interval;
    ed86:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
			cu->timeout = conn->supervision_reload *
    ed88:	f8b5 20a6 	ldrh.w	r2, [r5, #166]	; 0xa6
			cu->latency = lll->latency;
    ed8c:	8da9      	ldrh	r1, [r5, #44]	; 0x2c
			cu->interval = lll->interval;
    ed8e:	83f3      	strh	r3, [r6, #30]
			cu->timeout = conn->supervision_reload *
    ed90:	fb03 f202 	mul.w	r2, r3, r2
				      lll->interval * 125U / 1000;
    ed94:	237d      	movs	r3, #125	; 0x7d
    ed96:	fb03 f302 	mul.w	r3, r3, r2
			cu->latency = lll->latency;
    ed9a:	8431      	strh	r1, [r6, #32]
				      lll->interval * 125U / 1000;
    ed9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    eda0:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
    eda4:	8473      	strh	r3, [r6, #34]	; 0x22
			    PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ)) {
    eda6:	f7ff bad4 	b.w	e352 <ull_conn_rx+0x7ae>
			conn->procedure_expire = 0U;
    edaa:	2700      	movs	r7, #0
    edac:	f8a5 70ac 	strh.w	r7, [r5, #172]	; 0xac
			if (eff_tx_octets == conn->lll.max_tx_octets &&
    edb0:	9f00      	ldr	r7, [sp, #0]
			conn->llcp_length.ack = conn->llcp_length.req;
    edb2:	f885 3185 	strb.w	r3, [r5, #389]	; 0x185
			if (eff_tx_octets == conn->lll.max_tx_octets &&
    edb6:	42ba      	cmp	r2, r7
    edb8:	f000 8107 	beq.w	efca <ull_conn_rx+0x1426>
			conn->lll.max_rx_time = eff_rx_time;
    edbc:	f8a5 c044 	strh.w	ip, [r5, #68]	; 0x44
			if (tx) {
    edc0:	2900      	cmp	r1, #0
    edc2:	f000 80fe 	beq.w	efc2 <ull_conn_rx+0x141e>
				conn->llcp_length.state =
    edc6:	f895 4186 	ldrb.w	r4, [r5, #390]	; 0x186
				conn->llcp_length.rx_octets = eff_rx_octets;
    edca:	f8a5 e188 	strh.w	lr, [r5, #392]	; 0x188
				conn->llcp_length.state =
    edce:	2703      	movs	r7, #3
					(conn->llcp_length.req - 1);
    edd0:	3b01      	subs	r3, #1
				conn->llcp_length.state =
    edd2:	f367 0402 	bfi	r4, r7, #0, #3
				conn->llcp_length.ack =
    edd6:	f885 3185 	strb.w	r3, [r5, #389]	; 0x185
				conn->llcp_length.tx_octets = eff_tx_octets;
    edda:	f8a5 218a 	strh.w	r2, [r5, #394]	; 0x18a
				conn->llcp_length.rx_time = eff_rx_time;
    edde:	f8a5 c18c 	strh.w	ip, [r5, #396]	; 0x18c
				conn->llcp_length.tx_time = eff_tx_time;
    ede2:	f8a5 018e 	strh.w	r0, [r5, #398]	; 0x18e
				conn->llcp_length.state =
    ede6:	f885 4186 	strb.w	r4, [r5, #390]	; 0x186
			lr->max_rx_octets = sys_cpu_to_le16(eff_rx_octets);
    edea:	f8a6 e020 	strh.w	lr, [r6, #32]
			lr->max_tx_octets = sys_cpu_to_le16(eff_tx_octets);
    edee:	84b2      	strh	r2, [r6, #36]	; 0x24
			lr->max_rx_time = sys_cpu_to_le16(eff_rx_time);
    edf0:	f8a6 c022 	strh.w	ip, [r6, #34]	; 0x22
			lr->max_tx_time = sys_cpu_to_le16(eff_tx_time);
    edf4:	84f0      	strh	r0, [r6, #38]	; 0x26
    edf6:	e55a      	b.n	e8ae <ull_conn_rx+0xd0a>
				      0x03) == 0x02) &&
    edf8:	f895 20bd 	ldrb.w	r2, [r5, #189]	; 0xbd
    edfc:	2a03      	cmp	r2, #3
    edfe:	f47f acdb 	bne.w	e7b8 <ull_conn_rx+0xc14>
    ee02:	e4d2      	b.n	e7aa <ull_conn_rx+0xc06>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    ee04:	6823      	ldr	r3, [r4, #0]
    ee06:	2201      	movs	r2, #1
    ee08:	711a      	strb	r2, [r3, #4]
    ee0a:	f7ff baa2 	b.w	e352 <ull_conn_rx+0x7ae>
				conn->llcp_length.state =
    ee0e:	2604      	movs	r6, #4
    ee10:	f366 0302 	bfi	r3, r6, #0, #3
				conn->lll.max_tx_octets = eff_tx_octets;
    ee14:	87ea      	strh	r2, [r5, #62]	; 0x3e
				conn->lll.max_tx_time = eff_tx_time;
    ee16:	f8a5 0042 	strh.w	r0, [r5, #66]	; 0x42
				conn->llcp_length.state =
    ee1a:	f885 3186 	strb.w	r3, [r5, #390]	; 0x186
    ee1e:	e53c      	b.n	e89a <ull_conn_rx+0xcf6>
	struct node_tx *tx = NULL;
    ee20:	2100      	movs	r1, #0
    ee22:	f7ff b9de 	b.w	e1e2 <ull_conn_rx+0x63e>
    ee26:	bf00      	nop
    ee28:	00019cec 	.word	0x00019cec
    ee2c:	00019db8 	.word	0x00019db8
    ee30:	000199cc 	.word	0x000199cc
    ee34:	20001a90 	.word	0x20001a90
    ee38:	20001a0c 	.word	0x20001a0c
    ee3c:	00019de0 	.word	0x00019de0
				uint16_t interval_min =
    ee40:	f8b6 8020 	ldrh.w	r8, [r6, #32]
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
    ee44:	f1b8 0f05 	cmp.w	r8, #5
				uint16_t interval_min =
    ee48:	fa1f f088 	uxth.w	r0, r8
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
    ee4c:	f67f ae53 	bls.w	eaf6 <ull_conn_rx+0xf52>
				uint16_t interval_max =
    ee50:	f8b6 e022 	ldrh.w	lr, [r6, #34]	; 0x22
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
    ee54:	f5be 6f48 	cmp.w	lr, #3200	; 0xc80
				uint16_t interval_max =
    ee58:	fa1f f28e 	uxth.w	r2, lr
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
    ee5c:	f63f ae4b 	bhi.w	eaf6 <ull_conn_rx+0xf52>
				    (interval_max > 3200) ||
    ee60:	4290      	cmp	r0, r2
    ee62:	f63f ae48 	bhi.w	eaf6 <ull_conn_rx+0xf52>
				uint16_t latency =
    ee66:	f8b6 c024 	ldrh.w	ip, [r6, #36]	; 0x24
    ee6a:	fa1f f08c 	uxth.w	r0, ip
				    (interval_min > interval_max) ||
    ee6e:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
				uint16_t latency =
    ee72:	e9cd 0001 	strd	r0, r0, [sp, #4]
				    (interval_min > interval_max) ||
    ee76:	f4bf ae3e 	bcs.w	eaf6 <ull_conn_rx+0xf52>
				uint16_t timeout =
    ee7a:	8cf0      	ldrh	r0, [r6, #38]	; 0x26
    ee7c:	f8ad 000e 	strh.w	r0, [sp, #14]
				    (latency > 499) ||
    ee80:	f1a0 090a 	sub.w	r9, r0, #10
    ee84:	fa1f f989 	uxth.w	r9, r9
    ee88:	f640 4a76 	movw	sl, #3190	; 0xc76
    ee8c:	45d1      	cmp	r9, sl
				uint16_t timeout =
    ee8e:	fa1f fb80 	uxth.w	fp, r0
				    (latency > 499) ||
    ee92:	f63f ae30 	bhi.w	eaf6 <ull_conn_rx+0xf52>
				     ((latency + 1) * interval_max)) ||
    ee96:	9801      	ldr	r0, [sp, #4]
    ee98:	fb00 2902 	mla	r9, r0, r2, r2
				    (timeout > 3200) ||
    ee9c:	ebb9 0f8b 	cmp.w	r9, fp, lsl #2
    eea0:	f4bf ae29 	bcs.w	eaf6 <ull_conn_rx+0xf52>
				     ((latency + 1) * interval_max)) ||
    eea4:	f896 a028 	ldrb.w	sl, [r6, #40]	; 0x28
    eea8:	4552      	cmp	r2, sl
    eeaa:	f4ff ae24 	bcc.w	eaf6 <ull_conn_rx+0xf52>
				conn->llcp_conn_param.timeout =	timeout;
    eeae:	f8bd 000e 	ldrh.w	r0, [sp, #14]
				conn->llcp_conn_param.latency =	latency;
    eeb2:	f8a5 c164 	strh.w	ip, [r5, #356]	; 0x164
				conn->llcp_conn_param.interval_min =
    eeb6:	f8a5 8160 	strh.w	r8, [r5, #352]	; 0x160
				conn->llcp_conn_param.interval_max =
    eeba:	f8a5 e162 	strh.w	lr, [r5, #354]	; 0x162
				conn->llcp_conn_param.timeout =	timeout;
    eebe:	f8a5 0166 	strh.w	r0, [r5, #358]	; 0x166
				conn->llcp_conn_param.preferred_periodicity =
    eec2:	f885 a168 	strb.w	sl, [r5, #360]	; 0x168
					sys_le16_to_cpu(cpr->reference_conn_event_count);
    eec6:	f896 e02a 	ldrb.w	lr, [r6, #42]	; 0x2a
    eeca:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
				     lll->interval) ||
    eece:	f8b5 c02a 	ldrh.w	ip, [r5, #42]	; 0x2a
					sys_le16_to_cpu(cpr->reference_conn_event_count);
    eed2:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
    eed6:	f8a5 016a 	strh.w	r0, [r5, #362]	; 0x16a
					sys_le16_to_cpu(cpr->offset0);
    eeda:	f896 e02c 	ldrb.w	lr, [r6, #44]	; 0x2c
    eede:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    eee2:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset0 =
    eee6:	f8a5 016c 	strh.w	r0, [r5, #364]	; 0x16c
					sys_le16_to_cpu(cpr->offset1);
    eeea:	f896 e02e 	ldrb.w	lr, [r6, #46]	; 0x2e
    eeee:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
    eef2:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset1 =
    eef6:	f8a5 016e 	strh.w	r0, [r5, #366]	; 0x16e
					sys_le16_to_cpu(cpr->offset2);
    eefa:	f896 e030 	ldrb.w	lr, [r6, #48]	; 0x30
    eefe:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    ef02:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset2 =
    ef06:	f8a5 0170 	strh.w	r0, [r5, #368]	; 0x170
					sys_le16_to_cpu(cpr->offset3);
    ef0a:	f896 e032 	ldrb.w	lr, [r6, #50]	; 0x32
    ef0e:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    ef12:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset3 =
    ef16:	f8a5 0172 	strh.w	r0, [r5, #370]	; 0x172
					sys_le16_to_cpu(cpr->offset4);
    ef1a:	f896 0033 	ldrb.w	r0, [r6, #51]	; 0x33
    ef1e:	f896 e034 	ldrb.w	lr, [r6, #52]	; 0x34
    ef22:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset4 =
    ef26:	f8a5 0174 	strh.w	r0, [r5, #372]	; 0x174
					sys_le16_to_cpu(cpr->offset5);
    ef2a:	f896 0035 	ldrb.w	r0, [r6, #53]	; 0x35
    ef2e:	f896 6036 	ldrb.w	r6, [r6, #54]	; 0x36
				if ((conn->llcp_conn_param.interval_max !=
    ef32:	4562      	cmp	r2, ip
					sys_le16_to_cpu(cpr->offset5);
    ef34:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
				conn->llcp_conn_param.offset5 =
    ef38:	f8a5 0176 	strh.w	r0, [r5, #374]	; 0x176
				if ((conn->llcp_conn_param.interval_max !=
    ef3c:	f000 80c9 	beq.w	f0d2 <ull_conn_rx+0x152e>
					if (conn->llcp_enc.pause_tx) {
    ef40:	0789      	lsls	r1, r1, #30
						conn->llcp_conn_param.state =
    ef42:	f895 215e 	ldrb.w	r2, [r5, #350]	; 0x15e
					if (conn->llcp_enc.pause_tx) {
    ef46:	f57f adc6 	bpl.w	ead6 <ull_conn_rx+0xf32>
						(*rx)->hdr.type =
    ef4a:	6821      	ldr	r1, [r4, #0]
						conn->llcp_conn_param.state =
    ef4c:	2002      	movs	r0, #2
    ef4e:	f360 0202 	bfi	r2, r0, #0, #3
						(*rx)->hdr.type =
    ef52:	2001      	movs	r0, #1
						conn->llcp_conn_param.state =
    ef54:	f885 215e 	strb.w	r2, [r5, #350]	; 0x15e
						(*rx)->hdr.type =
    ef58:	7108      	strb	r0, [r1, #4]
    ef5a:	e5c1      	b.n	eae0 <ull_conn_rx+0xf3c>
		LL_ASSERT(conn_upd_curr == conn);
    ef5c:	4f6c      	ldr	r7, [pc, #432]	; (f110 <ull_conn_rx+0x156c>)
    ef5e:	6839      	ldr	r1, [r7, #0]
    ef60:	428d      	cmp	r5, r1
    ef62:	d010      	beq.n	ef86 <ull_conn_rx+0x13e2>
    ef64:	4a6b      	ldr	r2, [pc, #428]	; (f114 <ull_conn_rx+0x1570>)
    ef66:	496c      	ldr	r1, [pc, #432]	; (f118 <ull_conn_rx+0x1574>)
    ef68:	486c      	ldr	r0, [pc, #432]	; (f11c <ull_conn_rx+0x1578>)
    ef6a:	f241 2329 	movw	r3, #4649	; 0x1229
    ef6e:	f006 fee7 	bl	15d40 <printk>
    ef72:	4040      	eors	r0, r0
    ef74:	f380 8811 	msr	BASEPRI, r0
    ef78:	f04f 0003 	mov.w	r0, #3
    ef7c:	df02      	svc	2
    ef7e:	f895 315c 	ldrb.w	r3, [r5, #348]	; 0x15c
    ef82:	f895 215e 	ldrb.w	r2, [r5, #350]	; 0x15e
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    ef86:	f885 315d 	strb.w	r3, [r5, #349]	; 0x15d
	conn_upd_curr = NULL;
    ef8a:	2300      	movs	r3, #0
    ef8c:	603b      	str	r3, [r7, #0]
		conn->procedure_expire = 0U;
    ef8e:	f8a5 30ac 	strh.w	r3, [r5, #172]	; 0xac
    ef92:	f7ff bb56 	b.w	e642 <ull_conn_rx+0xa9e>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    ef96:	791a      	ldrb	r2, [r3, #4]
    ef98:	f002 0203 	and.w	r2, r2, #3
    ef9c:	2a03      	cmp	r2, #3
    ef9e:	d02a      	beq.n	eff6 <ull_conn_rx+0x1452>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    efa0:	e9c5 3368 	strd	r3, r3, [r5, #416]	; 0x1a0
    efa4:	f7ff bab3 	b.w	e50e <ull_conn_rx+0x96a>
			conn->tx_data = conn->tx_data->next;
    efa8:	6819      	ldr	r1, [r3, #0]
    efaa:	f8c5 11a8 	str.w	r1, [r5, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    efae:	2a00      	cmp	r2, #0
    efb0:	f47f aaad 	bne.w	e50e <ull_conn_rx+0x96a>
			tx->next = conn->tx_head->next;
    efb4:	681a      	ldr	r2, [r3, #0]
    efb6:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    efb8:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
    efba:	e9c5 0068 	strd	r0, r0, [r5, #416]	; 0x1a0
    efbe:	f7ff baad 	b.w	e51c <ull_conn_rx+0x978>
				conn->lll.max_tx_octets = eff_tx_octets;
    efc2:	87ea      	strh	r2, [r5, #62]	; 0x3e
				conn->lll.max_tx_time = eff_tx_time;
    efc4:	f8a5 0042 	strh.w	r0, [r5, #66]	; 0x42
    efc8:	e70f      	b.n	edea <ull_conn_rx+0x1246>
			if (eff_tx_octets == conn->lll.max_tx_octets &&
    efca:	4558      	cmp	r0, fp
    efcc:	f47f aef6 	bne.w	edbc <ull_conn_rx+0x1218>
			    eff_rx_time == conn->lll.max_rx_time &&
    efd0:	45d4      	cmp	ip, sl
    efd2:	f47f aef3 	bne.w	edbc <ull_conn_rx+0x1218>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    efd6:	6823      	ldr	r3, [r4, #0]
    efd8:	2401      	movs	r4, #1
    efda:	711c      	strb	r4, [r3, #4]
				goto send_length_resp;
    efdc:	e467      	b.n	e8ae <ull_conn_rx+0xd0a>
			conn->tx_data = conn->tx_data->next;
    efde:	6839      	ldr	r1, [r7, #0]
    efe0:	f8c5 11a8 	str.w	r1, [r5, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    efe4:	2b00      	cmp	r3, #0
    efe6:	f47f acec 	bne.w	e9c2 <ull_conn_rx+0xe1e>
			tx->next = conn->tx_head->next;
    efea:	683b      	ldr	r3, [r7, #0]
    efec:	6013      	str	r3, [r2, #0]
			conn->tx_head->next = tx;
    efee:	603a      	str	r2, [r7, #0]
				conn->tx_ctrl_last = tx;
    eff0:	e9c5 2268 	strd	r2, r2, [r5, #416]	; 0x1a0
    eff4:	e4ec      	b.n	e9d0 <ull_conn_rx+0xe2c>
	    ((pdu_data_tx->llctrl.opcode !=
    eff6:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    eff8:	2a03      	cmp	r2, #3
    effa:	d0db      	beq.n	efb4 <ull_conn_rx+0x1410>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    effc:	2a0a      	cmp	r2, #10
    effe:	d1cf      	bne.n	efa0 <ull_conn_rx+0x13fc>
    f000:	e7d8      	b.n	efb4 <ull_conn_rx+0x1410>
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
    f002:	f895 30e4 	ldrb.w	r3, [r5, #228]	; 0xe4
    f006:	f895 20e5 	ldrb.w	r2, [r5, #229]	; 0xe5
    f00a:	4293      	cmp	r3, r2
    f00c:	d00e      	beq.n	f02c <ull_conn_rx+0x1488>
    f00e:	4a41      	ldr	r2, [pc, #260]	; (f114 <ull_conn_rx+0x1570>)
    f010:	4943      	ldr	r1, [pc, #268]	; (f120 <ull_conn_rx+0x157c>)
    f012:	4842      	ldr	r0, [pc, #264]	; (f11c <ull_conn_rx+0x1578>)
    f014:	f241 230e 	movw	r3, #4622	; 0x120e
    f018:	f006 fe92 	bl	15d40 <printk>
    f01c:	4040      	eors	r0, r0
    f01e:	f380 8811 	msr	BASEPRI, r0
    f022:	f04f 0003 	mov.w	r0, #3
    f026:	df02      	svc	2
    f028:	f895 20e5 	ldrb.w	r2, [r5, #229]	; 0xe5
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    f02c:	f895 115e 	ldrb.w	r1, [r5, #350]	; 0x15e
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
    f030:	f8b5 3162 	ldrh.w	r3, [r5, #354]	; 0x162
    f034:	f8a5 30e8 	strh.w	r3, [r5, #232]	; 0xe8
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    f038:	2305      	movs	r3, #5
    f03a:	f363 0102 	bfi	r1, r3, #0, #3
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    f03e:	f895 00e6 	ldrb.w	r0, [r5, #230]	; 0xe6
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    f042:	f885 115e 	strb.w	r1, [r5, #350]	; 0x15e
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    f046:	f3c1 03c0 	ubfx	r3, r1, #3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    f04a:	00db      	lsls	r3, r3, #3
    f04c:	f020 000f 	bic.w	r0, r0, #15
    f050:	f043 0301 	orr.w	r3, r3, #1
    f054:	4303      	orrs	r3, r0
		conn->llcp_cu.ack--;
    f056:	3a01      	subs	r2, #1
		conn->llcp_cu.win_size = 1U;
    f058:	2401      	movs	r4, #1
		conn->llcp_cu.ack--;
    f05a:	f885 20e5 	strb.w	r2, [r5, #229]	; 0xe5
		conn->llcp_cu.win_offset_us = 0U;
    f05e:	2000      	movs	r0, #0
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
    f060:	f8b5 2164 	ldrh.w	r2, [r5, #356]	; 0x164
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    f064:	f885 30e6 	strb.w	r3, [r5, #230]	; 0xe6
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
    f068:	f8b5 3166 	ldrh.w	r3, [r5, #358]	; 0x166
		conn->llcp_cu.win_size = 1U;
    f06c:	f885 40f4 	strb.w	r4, [r5, #244]	; 0xf4
		conn->llcp_cu.win_offset_us = 0U;
    f070:	f8c5 00f0 	str.w	r0, [r5, #240]	; 0xf0
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
    f074:	f8a5 20ea 	strh.w	r2, [r5, #234]	; 0xea
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
    f078:	f8a5 30ec 	strh.w	r3, [r5, #236]	; 0xec
	if (err) {
    f07c:	f7fe bde0 	b.w	dc40 <ull_conn_rx+0x9c>
			     lll->interval) ||
    f080:	8da8      	ldrh	r0, [r5, #44]	; 0x2c
    f082:	4550      	cmp	r0, sl
    f084:	f47f ad25 	bne.w	ead2 <ull_conn_rx+0xf2e>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    f088:	f240 40e2 	movw	r0, #1250	; 0x4e2
    f08c:	fb00 f101 	mul.w	r1, r0, r1
    f090:	f242 7010 	movw	r0, #10000	; 0x2710
    f094:	fb00 1202 	mla	r2, r0, r2, r1
			    (conn->llcp_conn_param.latency != lll->latency) ||
    f098:	f8b5 00a6 	ldrh.w	r0, [r5, #166]	; 0xa6
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    f09c:	3a01      	subs	r2, #1
    f09e:	fbb2 f2f1 	udiv	r2, r2, r1
			    (conn->llcp_conn_param.latency != lll->latency) ||
    f0a2:	b292      	uxth	r2, r2
    f0a4:	4290      	cmp	r0, r2
    f0a6:	f47f ad14 	bne.w	ead2 <ull_conn_rx+0xf2e>
				conn->llcp_conn_param.state =
    f0aa:	f8b5 215e 	ldrh.w	r2, [r5, #350]	; 0x15e
    f0ae:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    f0b2:	f042 0201 	orr.w	r2, r2, #1
    f0b6:	f8a5 215e 	strh.w	r2, [r5, #350]	; 0x15e
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    f0ba:	6822      	ldr	r2, [r4, #0]
    f0bc:	2101      	movs	r1, #1
    f0be:	7111      	strb	r1, [r2, #4]
    f0c0:	e50e      	b.n	eae0 <ull_conn_rx+0xf3c>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    f0c2:	793b      	ldrb	r3, [r7, #4]
    f0c4:	f003 0303 	and.w	r3, r3, #3
    f0c8:	2b03      	cmp	r3, #3
    f0ca:	d019      	beq.n	f100 <ull_conn_rx+0x155c>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    f0cc:	e9c5 7768 	strd	r7, r7, [r5, #416]	; 0x1a0
    f0d0:	e477      	b.n	e9c2 <ull_conn_rx+0xe1e>
				     lll->interval) ||
    f0d2:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
    f0d4:	9802      	ldr	r0, [sp, #8]
    f0d6:	4282      	cmp	r2, r0
    f0d8:	f47f af32 	bne.w	ef40 <ull_conn_rx+0x139c>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    f0dc:	f240 42e2 	movw	r2, #1250	; 0x4e2
    f0e0:	fb02 f00c 	mul.w	r0, r2, ip
    f0e4:	f242 7210 	movw	r2, #10000	; 0x2710
				     lll->latency) ||
    f0e8:	f8b5 60a6 	ldrh.w	r6, [r5, #166]	; 0xa6
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    f0ec:	fb02 020b 	mla	r2, r2, fp, r0
    f0f0:	3a01      	subs	r2, #1
    f0f2:	fbb2 f2f0 	udiv	r2, r2, r0
				     lll->latency) ||
    f0f6:	b292      	uxth	r2, r2
    f0f8:	4296      	cmp	r6, r2
    f0fa:	f47f af21 	bne.w	ef40 <ull_conn_rx+0x139c>
    f0fe:	e7d4      	b.n	f0aa <ull_conn_rx+0x1506>
	    ((pdu_data_tx->llctrl.opcode !=
    f100:	79fb      	ldrb	r3, [r7, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    f102:	2b03      	cmp	r3, #3
    f104:	f43f af71 	beq.w	efea <ull_conn_rx+0x1446>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    f108:	2b0a      	cmp	r3, #10
    f10a:	d1df      	bne.n	f0cc <ull_conn_rx+0x1528>
    f10c:	e76d      	b.n	efea <ull_conn_rx+0x1446>
    f10e:	bf00      	nop
    f110:	20001a0c 	.word	0x20001a0c
    f114:	00019cec 	.word	0x00019cec
    f118:	00019de0 	.word	0x00019de0
    f11c:	000199cc 	.word	0x000199cc
    f120:	00019db8 	.word	0x00019db8

0000f124 <ull_conn_tx_demux>:
{
    f124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f128:	4f24      	ldr	r7, [pc, #144]	; (f1bc <ull_conn_tx_demux+0x98>)
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    f12a:	4e25      	ldr	r6, [pc, #148]	; (f1c0 <ull_conn_tx_demux+0x9c>)
    f12c:	78fa      	ldrb	r2, [r7, #3]
{
    f12e:	4604      	mov	r4, r0
	return (void *)(fifo + first * size);
    f130:	1d3d      	adds	r5, r7, #4
    f132:	e021      	b.n	f178 <ull_conn_tx_demux+0x54>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    f134:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    f138:	4630      	mov	r0, r6
    f13a:	f7f9 fa2b 	bl	8594 <mem_get>
	if (conn->lll.handle != handle) {
    f13e:	8d02      	ldrh	r2, [r0, #40]	; 0x28
    f140:	bb32      	cbnz	r2, f190 <ull_conn_tx_demux+0x6c>
			struct node_tx *tx = lll_tx->node;
    f142:	f8d8 3004 	ldr.w	r3, [r8, #4]
			if (!conn->tx_data) {
    f146:	f8d0 11a8 	ldr.w	r1, [r0, #424]	; 0x1a8
			tx->next = NULL;
    f14a:	601a      	str	r2, [r3, #0]
			if (!conn->tx_data) {
    f14c:	b369      	cbz	r1, f1aa <ull_conn_tx_demux+0x86>
			if (conn->tx_data_last) {
    f14e:	f8d0 21ac 	ldr.w	r2, [r0, #428]	; 0x1ac
    f152:	b102      	cbz	r2, f156 <ull_conn_tx_demux+0x32>
				conn->tx_data_last->next = tx;
    f154:	6013      	str	r3, [r2, #0]
			conn->tx_data_last = tx;
    f156:	f8c0 31ac 	str.w	r3, [r0, #428]	; 0x1ac
		MFIFO_DEQUEUE(conn_tx);
    f15a:	78fa      	ldrb	r2, [r7, #3]
	uint8_t _first = *first; /* Copy read-index */
    f15c:	78bb      	ldrb	r3, [r7, #2]
    f15e:	7879      	ldrb	r1, [r7, #1]
	if (_first == last) {
    f160:	429a      	cmp	r2, r3
    f162:	d005      	beq.n	f170 <ull_conn_tx_demux+0x4c>
	_first += 1U;
    f164:	3301      	adds	r3, #1
    f166:	b2db      	uxtb	r3, r3
		_first = 0U;
    f168:	4299      	cmp	r1, r3
    f16a:	bf08      	it	eq
    f16c:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
    f16e:	70bb      	strb	r3, [r7, #2]
	} while (--count);
    f170:	3c01      	subs	r4, #1
    f172:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    f176:	d016      	beq.n	f1a6 <ull_conn_tx_demux+0x82>
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
    f178:	78bb      	ldrb	r3, [r7, #2]
    f17a:	7839      	ldrb	r1, [r7, #0]
	if (first == last) {
    f17c:	4293      	cmp	r3, r2
    f17e:	d012      	beq.n	f1a6 <ull_conn_tx_demux+0x82>
	return (void *)(fifo + first * size);
    f180:	fb13 f301 	smulbb	r3, r3, r1
		if (!lll_tx) {
    f184:	eb15 0803 	adds.w	r8, r5, r3
    f188:	d00d      	beq.n	f1a6 <ull_conn_tx_demux+0x82>
	if (handle >= CONFIG_BT_MAX_CONN) {
    f18a:	5aea      	ldrh	r2, [r5, r3]
    f18c:	2a00      	cmp	r2, #0
    f18e:	d0d1      	beq.n	f134 <ull_conn_tx_demux+0x10>
			struct node_tx *tx = lll_tx->node;
    f190:	f8d8 1004 	ldr.w	r1, [r8, #4]
			p->ll_id = PDU_DATA_LLID_RESV;
    f194:	790b      	ldrb	r3, [r1, #4]
    f196:	f36f 0301 	bfc	r3, #0, #2
    f19a:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(0xFFFF, tx);
    f19c:	f64f 70ff 	movw	r0, #65535	; 0xffff
    f1a0:	f7fd faa2 	bl	c6e8 <ll_tx_ack_put>
    f1a4:	e7d9      	b.n	f15a <ull_conn_tx_demux+0x36>
}
    f1a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (!conn->tx_head) {
    f1aa:	f8d0 219c 	ldr.w	r2, [r0, #412]	; 0x19c
				conn->tx_data = tx;
    f1ae:	f8c0 31a8 	str.w	r3, [r0, #424]	; 0x1a8
				if (!conn->tx_head) {
    f1b2:	2a00      	cmp	r2, #0
    f1b4:	d1cb      	bne.n	f14e <ull_conn_tx_demux+0x2a>
					conn->tx_head = tx;
    f1b6:	f8c0 319c 	str.w	r3, [r0, #412]	; 0x19c
			if (conn->tx_data_last) {
    f1ba:	e7cc      	b.n	f156 <ull_conn_tx_demux+0x32>
    f1bc:	20000408 	.word	0x20000408
    f1c0:	20000be0 	.word	0x20000be0

0000f1c4 <conn_cleanup>:
	if (conn == conn_upd_curr) {
    f1c4:	4b3b      	ldr	r3, [pc, #236]	; (f2b4 <conn_cleanup+0xf0>)
{
    f1c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (conn == conn_upd_curr) {
    f1ca:	681a      	ldr	r2, [r3, #0]
	rx = conn->llcp_rx;
    f1cc:	f8d0 40e0 	ldr.w	r4, [r0, #224]	; 0xe0
	*((uint8_t *)rx->pdu) = reason;
    f1d0:	f880 1138 	strb.w	r1, [r0, #312]	; 0x138
	if (conn == conn_upd_curr) {
    f1d4:	4282      	cmp	r2, r0
	conn_upd_curr = NULL;
    f1d6:	bf04      	itt	eq
    f1d8:	2200      	moveq	r2, #0
    f1da:	601a      	streq	r2, [r3, #0]
	rx->hdr.handle = conn->lll.handle;
    f1dc:	8d02      	ldrh	r2, [r0, #40]	; 0x28
    f1de:	f8a0 2122 	strh.w	r2, [r0, #290]	; 0x122
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    f1e2:	2315      	movs	r3, #21
{
    f1e4:	b083      	sub	sp, #12
    f1e6:	4606      	mov	r6, r0
	struct lll_conn *lll = &conn->lll;
    f1e8:	f100 0b1c 	add.w	fp, r0, #28
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    f1ec:	f880 3120 	strb.w	r3, [r0, #288]	; 0x120
	while (rx) {
    f1f0:	b144      	cbz	r4, f204 <conn_cleanup+0x40>
		hdr->type = NODE_RX_TYPE_RELEASE;
    f1f2:	2501      	movs	r5, #1
		rx = hdr->link->mem;
    f1f4:	6820      	ldr	r0, [r4, #0]
		hdr = &rx->hdr;
    f1f6:	4621      	mov	r1, r4
		rx = hdr->link->mem;
    f1f8:	6844      	ldr	r4, [r0, #4]
		hdr->type = NODE_RX_TYPE_RELEASE;
    f1fa:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
    f1fc:	f7fd fa2e 	bl	c65c <ll_rx_put>
	while (rx) {
    f200:	2c00      	cmp	r4, #0
    f202:	d1f7      	bne.n	f1f4 <conn_cleanup+0x30>
	while (conn->tx_head) {
    f204:	f8d6 119c 	ldr.w	r1, [r6, #412]	; 0x19c
    f208:	b381      	cbz	r1, f26c <conn_cleanup+0xa8>
		link = mem_acquire(&mem_link_tx.free);
    f20a:	f8df 80bc 	ldr.w	r8, [pc, #188]	; f2c8 <conn_cleanup+0x104>
		LL_ASSERT(link);
    f20e:	f8df a0b0 	ldr.w	sl, [pc, #176]	; f2c0 <conn_cleanup+0xfc>
    f212:	f8df 90b8 	ldr.w	r9, [pc, #184]	; f2cc <conn_cleanup+0x108>
    f216:	f106 074c 	add.w	r7, r6, #76	; 0x4c
    f21a:	e007      	b.n	f22c <conn_cleanup+0x68>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
    f21c:	4629      	mov	r1, r5
    f21e:	4620      	mov	r0, r4
    f220:	463a      	mov	r2, r7
    f222:	f7f9 f9e9 	bl	85f8 <memq_enqueue>
	while (conn->tx_head) {
    f226:	f8d6 119c 	ldr.w	r1, [r6, #412]	; 0x19c
    f22a:	b1f9      	cbz	r1, f26c <conn_cleanup+0xa8>
		tx = tx_ull_dequeue(conn, conn->tx_head);
    f22c:	4630      	mov	r0, r6
    f22e:	f7fd fdff 	bl	ce30 <tx_ull_dequeue>
    f232:	4605      	mov	r5, r0
		link = mem_acquire(&mem_link_tx.free);
    f234:	4640      	mov	r0, r8
    f236:	f7f9 f97b 	bl	8530 <mem_acquire>
		LL_ASSERT(link);
    f23a:	4604      	mov	r4, r0
    f23c:	2800      	cmp	r0, #0
    f23e:	d1ed      	bne.n	f21c <conn_cleanup+0x58>
    f240:	481d      	ldr	r0, [pc, #116]	; (f2b8 <conn_cleanup+0xf4>)
    f242:	f240 739a 	movw	r3, #1946	; 0x79a
    f246:	4652      	mov	r2, sl
    f248:	4649      	mov	r1, r9
    f24a:	f006 fd79 	bl	15d40 <printk>
    f24e:	4040      	eors	r0, r0
    f250:	f380 8811 	msr	BASEPRI, r0
    f254:	f04f 0003 	mov.w	r0, #3
    f258:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
    f25a:	4629      	mov	r1, r5
    f25c:	4620      	mov	r0, r4
    f25e:	463a      	mov	r2, r7
    f260:	f7f9 f9ca 	bl	85f8 <memq_enqueue>
	while (conn->tx_head) {
    f264:	f8d6 119c 	ldr.w	r1, [r6, #412]	; 0x19c
    f268:	2900      	cmp	r1, #0
    f26a:	d1df      	bne.n	f22c <conn_cleanup+0x68>
				    TICKER_ID_CONN_BASE + lll->handle,
    f26c:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    f270:	4b12      	ldr	r3, [pc, #72]	; (f2bc <conn_cleanup+0xf8>)
    f272:	f8cd b000 	str.w	fp, [sp]
				    TICKER_ID_CONN_BASE + lll->handle,
    f276:	3203      	adds	r2, #3
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    f278:	b2d2      	uxtb	r2, r2
    f27a:	2101      	movs	r1, #1
    f27c:	2000      	movs	r0, #0
    f27e:	f7fa fdd9 	bl	9e34 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f282:	f030 0302 	bics.w	r3, r0, #2
    f286:	d00c      	beq.n	f2a2 <conn_cleanup+0xde>
    f288:	4a0d      	ldr	r2, [pc, #52]	; (f2c0 <conn_cleanup+0xfc>)
    f28a:	490e      	ldr	r1, [pc, #56]	; (f2c4 <conn_cleanup+0x100>)
    f28c:	480a      	ldr	r0, [pc, #40]	; (f2b8 <conn_cleanup+0xf4>)
    f28e:	f44f 63ec 	mov.w	r3, #1888	; 0x760
    f292:	f006 fd55 	bl	15d40 <printk>
    f296:	4040      	eors	r0, r0
    f298:	f380 8811 	msr	BASEPRI, r0
    f29c:	f04f 0003 	mov.w	r0, #3
    f2a0:	df02      	svc	2
	lll->handle = 0xFFFF;
    f2a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
    f2a6:	20ff      	movs	r0, #255	; 0xff
	lll->handle = 0xFFFF;
    f2a8:	8533      	strh	r3, [r6, #40]	; 0x28
}
    f2aa:	b003      	add	sp, #12
    f2ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ull_conn_tx_demux(UINT8_MAX);
    f2b0:	f7ff bf38 	b.w	f124 <ull_conn_tx_demux>
    f2b4:	20001a0c 	.word	0x20001a0c
    f2b8:	000199cc 	.word	0x000199cc
    f2bc:	0000d0e9 	.word	0x0000d0e9
    f2c0:	00019cec 	.word	0x00019cec
    f2c4:	00019e0c 	.word	0x00019e0c
    f2c8:	20001b44 	.word	0x20001b44
    f2cc:	00019d44 	.word	0x00019d44

0000f2d0 <ull_conn_done>:
{
    f2d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct lll_conn *lll = (void *)HDR_ULL2LLL(done->param);
    f2d4:	69c5      	ldr	r5, [r0, #28]
	if (unlikely(lll->handle == 0xFFFF)) {
    f2d6:	8b2a      	ldrh	r2, [r5, #24]
	struct ll_conn *conn = (void *)HDR_LLL2EVT(lll);
    f2d8:	68ec      	ldr	r4, [r5, #12]
	if (unlikely(lll->handle == 0xFFFF)) {
    f2da:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f2de:	429a      	cmp	r2, r3
{
    f2e0:	b088      	sub	sp, #32
	if (unlikely(lll->handle == 0xFFFF)) {
    f2e2:	d058      	beq.n	f396 <ull_conn_done+0xc6>
	switch (done->extra.mic_state) {
    f2e4:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
    f2e8:	2b01      	cmp	r3, #1
    f2ea:	f000 80d3 	beq.w	f494 <ull_conn_done+0x1c4>
    f2ee:	2b02      	cmp	r3, #2
    f2f0:	f000 80c7 	beq.w	f482 <ull_conn_done+0x1b2>
    f2f4:	2b00      	cmp	r3, #0
    f2f6:	f000 80aa 	beq.w	f44e <ull_conn_done+0x17e>
	reason_peer = conn->llcp_terminate.reason_peer;
    f2fa:	f894 111b 	ldrb.w	r1, [r4, #283]	; 0x11b
	if (reason_peer && (
    f2fe:	2900      	cmp	r1, #0
    f300:	d14c      	bne.n	f39c <ull_conn_done+0xcc>
	latency_event = lll->latency_event;
    f302:	8c2f      	ldrh	r7, [r5, #32]
	if (done->extra.trx_cnt) {
    f304:	8c43      	ldrh	r3, [r0, #34]	; 0x22
	elapsed_event = latency_event + 1;
    f306:	f107 0801 	add.w	r8, r7, #1
    f30a:	fa1f f888 	uxth.w	r8, r8
	if (done->extra.trx_cnt) {
    f30e:	2b00      	cmp	r3, #0
    f310:	d156      	bne.n	f3c0 <ull_conn_done+0xf0>
	if (done->extra.crc_valid) {
    f312:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
    f316:	2b00      	cmp	r3, #0
    f318:	f000 80c2 	beq.w	f4a0 <ull_conn_done+0x1d0>
		conn->supervision_expire = 0U;
    f31c:	2600      	movs	r6, #0
    f31e:	f8a4 60a8 	strh.w	r6, [r4, #168]	; 0xa8
	if (conn->procedure_expire != 0U) {
    f322:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	; 0xac
    f326:	b133      	cbz	r3, f336 <ull_conn_done+0x66>
		if (conn->procedure_expire > elapsed_event) {
    f328:	4543      	cmp	r3, r8
    f32a:	f240 80fc 	bls.w	f526 <ull_conn_done+0x256>
			conn->procedure_expire -= elapsed_event;
    f32e:	eba3 0308 	sub.w	r3, r3, r8
    f332:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	if (conn->apto_expire != 0U) {
    f336:	f8b4 30b4 	ldrh.w	r3, [r4, #180]	; 0xb4
    f33a:	b133      	cbz	r3, f34a <ull_conn_done+0x7a>
		if (conn->apto_expire > elapsed_event) {
    f33c:	4543      	cmp	r3, r8
    f33e:	f240 80d3 	bls.w	f4e8 <ull_conn_done+0x218>
			conn->apto_expire -= elapsed_event;
    f342:	eba3 0308 	sub.w	r3, r3, r8
    f346:	f8a4 30b4 	strh.w	r3, [r4, #180]	; 0xb4
	if (conn->appto_expire != 0U) {
    f34a:	f8b4 20b0 	ldrh.w	r2, [r4, #176]	; 0xb0
    f34e:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
    f352:	f894 10bc 	ldrb.w	r1, [r4, #188]	; 0xbc
    f356:	b15a      	cbz	r2, f370 <ull_conn_done+0xa0>
		if (conn->appto_expire > elapsed_event) {
    f358:	4542      	cmp	r2, r8
    f35a:	f200 80ae 	bhi.w	f4ba <ull_conn_done+0x1ea>
			if ((conn->procedure_expire == 0U) &&
    f35e:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
			conn->appto_expire = 0U;
    f362:	2000      	movs	r0, #0
    f364:	f8a4 00b0 	strh.w	r0, [r4, #176]	; 0xb0
			if ((conn->procedure_expire == 0U) &&
    f368:	b912      	cbnz	r2, f370 <ull_conn_done+0xa0>
    f36a:	4299      	cmp	r1, r3
    f36c:	f000 80e2 	beq.w	f534 <ull_conn_done+0x264>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
    f370:	1a5b      	subs	r3, r3, r1
    f372:	f003 0303 	and.w	r3, r3, #3
    f376:	2b02      	cmp	r3, #2
    f378:	f000 80a9 	beq.w	f4ce <ull_conn_done+0x1fe>
	      (conn->llcp_type == LLCP_CHAN_MAP))) ||
    f37c:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
    f380:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
    f384:	429a      	cmp	r2, r3
    f386:	f000 80c0 	beq.w	f50a <ull_conn_done+0x23a>
		lll->latency_event = 0U;
    f38a:	2300      	movs	r3, #0
    f38c:	842b      	strh	r3, [r5, #32]
	if ((force) || (latency_event != lll->latency_event)) {
    f38e:	2e00      	cmp	r6, #0
    f390:	d136      	bne.n	f400 <ull_conn_done+0x130>
    f392:	2f00      	cmp	r7, #0
    f394:	d134      	bne.n	f400 <ull_conn_done+0x130>
}
    f396:	b008      	add	sp, #32
    f398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			    0 ||
    f39c:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
	if (reason_peer && (
    f3a0:	075a      	lsls	r2, r3, #29
    f3a2:	d471      	bmi.n	f488 <ull_conn_done+0x1b8>
			    conn->master.terminate_ack ||
    f3a4:	293d      	cmp	r1, #61	; 0x3d
    f3a6:	d06f      	beq.n	f488 <ull_conn_done+0x1b8>
	latency_event = lll->latency_event;
    f3a8:	8c2f      	ldrh	r7, [r5, #32]
	if (done->extra.trx_cnt) {
    f3aa:	8c42      	ldrh	r2, [r0, #34]	; 0x22
	elapsed_event = latency_event + 1;
    f3ac:	f107 0801 	add.w	r8, r7, #1
    f3b0:	fa1f f888 	uxth.w	r8, r8
	if (done->extra.trx_cnt) {
    f3b4:	2a00      	cmp	r2, #0
    f3b6:	d0ac      	beq.n	f312 <ull_conn_done+0x42>
			conn->master.terminate_ack = 1;
    f3b8:	f043 0304 	orr.w	r3, r3, #4
    f3bc:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
	if (done->extra.crc_valid) {
    f3c0:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
		conn->connect_expire = 0U;
    f3c4:	2200      	movs	r2, #0
    f3c6:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
	if (done->extra.crc_valid) {
    f3ca:	2b00      	cmp	r3, #0
    f3cc:	d1a6      	bne.n	f31c <ull_conn_done+0x4c>
		if (!conn->supervision_expire) {
    f3ce:	f8b4 60a8 	ldrh.w	r6, [r4, #168]	; 0xa8
    f3d2:	b92e      	cbnz	r6, f3e0 <ull_conn_done+0x110>
			conn->supervision_expire = conn->supervision_reload;
    f3d4:	f8b4 60a6 	ldrh.w	r6, [r4, #166]	; 0xa6
    f3d8:	f8a4 60a8 	strh.w	r6, [r4, #168]	; 0xa8
	if (conn->supervision_expire) {
    f3dc:	2e00      	cmp	r6, #0
    f3de:	d0a0      	beq.n	f322 <ull_conn_done+0x52>
		if (conn->supervision_expire > elapsed_event) {
    f3e0:	45b0      	cmp	r8, r6
    f3e2:	f080 809d 	bcs.w	f520 <ull_conn_done+0x250>
			conn->supervision_expire -= elapsed_event;
    f3e6:	eba6 0608 	sub.w	r6, r6, r8
    f3ea:	b2b6      	uxth	r6, r6
	force = 0U;
    f3ec:	2e06      	cmp	r6, #6
			lll->latency_event = 0U;
    f3ee:	f04f 0300 	mov.w	r3, #0
			conn->supervision_expire -= elapsed_event;
    f3f2:	f8a4 60a8 	strh.w	r6, [r4, #168]	; 0xa8
	force = 0U;
    f3f6:	bf8c      	ite	hi
    f3f8:	2600      	movhi	r6, #0
    f3fa:	2601      	movls	r6, #1
			lll->latency_event = 0U;
    f3fc:	842b      	strh	r3, [r5, #32]
			if (conn->supervision_expire <= 6U) {
    f3fe:	e790      	b.n	f322 <ull_conn_done+0x52>
		lazy = lll->latency_event + 1U;
    f400:	2101      	movs	r1, #1
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
    f402:	7e2a      	ldrb	r2, [r5, #24]
		struct ll_conn *conn = lll->hdr.parent;
    f404:	68ec      	ldr	r4, [r5, #12]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
    f406:	4855      	ldr	r0, [pc, #340]	; (f55c <ull_conn_done+0x28c>)
    f408:	9005      	str	r0, [sp, #20]
    f40a:	2300      	movs	r3, #0
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
    f40c:	3203      	adds	r2, #3
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
    f40e:	e9cd 1603 	strd	r1, r6, [sp, #12]
    f412:	e9cd 3301 	strd	r3, r3, [sp, #4]
    f416:	9300      	str	r3, [sp, #0]
    f418:	4618      	mov	r0, r3
    f41a:	9406      	str	r4, [sp, #24]
    f41c:	b2d2      	uxtb	r2, r2
    f41e:	2101      	movs	r1, #1
    f420:	f7fa fcf0 	bl	9e04 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f424:	f030 0302 	bics.w	r3, r0, #2
    f428:	d0b5      	beq.n	f396 <ull_conn_done+0xc6>
    f42a:	f7fd f9b5 	bl	c798 <ull_disable_mark_get>
    f42e:	4284      	cmp	r4, r0
    f430:	d0b1      	beq.n	f396 <ull_conn_done+0xc6>
    f432:	4a4b      	ldr	r2, [pc, #300]	; (f560 <ull_conn_done+0x290>)
    f434:	494b      	ldr	r1, [pc, #300]	; (f564 <ull_conn_done+0x294>)
    f436:	484c      	ldr	r0, [pc, #304]	; (f568 <ull_conn_done+0x298>)
    f438:	f240 53af 	movw	r3, #1455	; 0x5af
    f43c:	f006 fc80 	bl	15d40 <printk>
    f440:	4040      	eors	r0, r0
    f442:	f380 8811 	msr	BASEPRI, r0
    f446:	f04f 0003 	mov.w	r0, #3
    f44a:	df02      	svc	2
    f44c:	e7a3      	b.n	f396 <ull_conn_done+0xc6>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
    f44e:	f895 304e 	ldrb.w	r3, [r5, #78]	; 0x4e
    f452:	071e      	lsls	r6, r3, #28
    f454:	d542      	bpl.n	f4dc <ull_conn_done+0x20c>
					    (lll->latency + 6)) ?
    f456:	8bab      	ldrh	r3, [r5, #28]
			appto_reload_new = (conn->apto_reload >
    f458:	f8b4 20b2 	ldrh.w	r2, [r4, #178]	; 0xb2
					    (lll->latency + 6)) ?
    f45c:	1d99      	adds	r1, r3, #6
			appto_reload_new = (conn->apto_reload >
    f45e:	428a      	cmp	r2, r1
					   (conn->apto_reload -
    f460:	bfc4      	itt	gt
    f462:	1ad3      	subgt	r3, r2, r3
    f464:	3b06      	subgt	r3, #6
			if (conn->appto_reload != appto_reload_new) {
    f466:	f8b4 10ae 	ldrh.w	r1, [r4, #174]	; 0xae
			appto_reload_new = (conn->apto_reload >
    f46a:	bfcc      	ite	gt
    f46c:	b29b      	uxthgt	r3, r3
    f46e:	4613      	movle	r3, r2
			if (conn->appto_reload != appto_reload_new) {
    f470:	4299      	cmp	r1, r3
    f472:	d04f      	beq.n	f514 <ull_conn_done+0x244>
				conn->appto_reload = appto_reload_new;
    f474:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
				conn->appto_expire = conn->appto_reload;
    f478:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
				conn->apto_expire = conn->apto_reload;
    f47c:	f8a4 20b4 	strh.w	r2, [r4, #180]	; 0xb4
    f480:	e73b      	b.n	f2fa <ull_conn_done+0x2a>
		conn->llcp_terminate.reason_peer =
    f482:	213d      	movs	r1, #61	; 0x3d
    f484:	f884 111b 	strb.w	r1, [r4, #283]	; 0x11b
		conn_cleanup(conn, reason_peer);
    f488:	4620      	mov	r0, r4
}
    f48a:	b008      	add	sp, #32
    f48c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			conn_cleanup(conn, BT_HCI_ERR_LL_RESP_TIMEOUT);
    f490:	f7ff be98 	b.w	f1c4 <conn_cleanup>
		conn->appto_expire = conn->apto_expire = 0U;
    f494:	2300      	movs	r3, #0
    f496:	f8a4 30b4 	strh.w	r3, [r4, #180]	; 0xb4
    f49a:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
		break;
    f49e:	e72c      	b.n	f2fa <ull_conn_done+0x2a>
	else if (conn->connect_expire) {
    f4a0:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
    f4a4:	2b00      	cmp	r3, #0
    f4a6:	d092      	beq.n	f3ce <ull_conn_done+0xfe>
		if (conn->connect_expire > elapsed_event) {
    f4a8:	4543      	cmp	r3, r8
    f4aa:	d94a      	bls.n	f542 <ull_conn_done+0x272>
			conn->connect_expire -= elapsed_event;
    f4ac:	eba3 0308 	sub.w	r3, r3, r8
    f4b0:	f8b4 60a8 	ldrh.w	r6, [r4, #168]	; 0xa8
    f4b4:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
    f4b8:	e790      	b.n	f3dc <ull_conn_done+0x10c>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
    f4ba:	1a5b      	subs	r3, r3, r1
    f4bc:	f003 0303 	and.w	r3, r3, #3
			conn->appto_expire -= elapsed_event;
    f4c0:	eba2 0808 	sub.w	r8, r2, r8
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
    f4c4:	2b02      	cmp	r3, #2
			conn->appto_expire -= elapsed_event;
    f4c6:	f8a4 80b0 	strh.w	r8, [r4, #176]	; 0xb0
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
    f4ca:	f47f af57 	bne.w	f37c <ull_conn_done+0xac>
    f4ce:	f894 30bd 	ldrb.w	r3, [r4, #189]	; 0xbd
    f4d2:	3b01      	subs	r3, #1
    f4d4:	2b01      	cmp	r3, #1
    f4d6:	f63f af51 	bhi.w	f37c <ull_conn_done+0xac>
    f4da:	e756      	b.n	f38a <ull_conn_done+0xba>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
    f4dc:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
    f4e0:	07d9      	lsls	r1, r3, #31
    f4e2:	f57f af0a 	bpl.w	f2fa <ull_conn_done+0x2a>
    f4e6:	e7b6      	b.n	f456 <ull_conn_done+0x186>
			rx = ll_pdu_rx_alloc();
    f4e8:	f7fd f8e6 	bl	c6b8 <ll_pdu_rx_alloc>
			if (rx) {
    f4ec:	4601      	mov	r1, r0
    f4ee:	b1e8      	cbz	r0, f52c <ull_conn_done+0x25c>
				conn->apto_expire = 0U;
    f4f0:	2300      	movs	r3, #0
				rx->handle = lll->handle;
    f4f2:	8b2a      	ldrh	r2, [r5, #24]
				conn->apto_expire = 0U;
    f4f4:	f8a4 30b4 	strh.w	r3, [r4, #180]	; 0xb4
				rx->type = NODE_RX_TYPE_APTO;
    f4f8:	2318      	movs	r3, #24
				rx->handle = lll->handle;
    f4fa:	80c2      	strh	r2, [r0, #6]
				rx->type = NODE_RX_TYPE_APTO;
    f4fc:	7103      	strb	r3, [r0, #4]
				ll_rx_put(rx->link, rx);
    f4fe:	6800      	ldr	r0, [r0, #0]
    f500:	f7fd f8ac 	bl	c65c <ll_rx_put>
				ll_rx_sched();
    f504:	f7fd f8b4 	bl	c670 <ll_rx_sched>
    f508:	e71f      	b.n	f34a <ull_conn_done+0x7a>
    f50a:	8c29      	ldrh	r1, [r5, #32]
	if ((force) || (latency_event != lll->latency_event)) {
    f50c:	b1e6      	cbz	r6, f548 <ull_conn_done+0x278>
		lazy = lll->latency_event + 1U;
    f50e:	3101      	adds	r1, #1
    f510:	b289      	uxth	r1, r1
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
    f512:	e776      	b.n	f402 <ull_conn_done+0x132>
			if (conn->apto_expire == 0U) {
    f514:	f8b4 10b4 	ldrh.w	r1, [r4, #180]	; 0xb4
    f518:	2900      	cmp	r1, #0
    f51a:	f47f aeee 	bne.w	f2fa <ull_conn_done+0x2a>
    f51e:	e7ab      	b.n	f478 <ull_conn_done+0x1a8>
			conn_cleanup(conn, BT_HCI_ERR_CONN_TIMEOUT);
    f520:	4620      	mov	r0, r4
    f522:	2108      	movs	r1, #8
    f524:	e7b1      	b.n	f48a <ull_conn_done+0x1ba>
			conn_cleanup(conn, BT_HCI_ERR_LL_RESP_TIMEOUT);
    f526:	4620      	mov	r0, r4
    f528:	2122      	movs	r1, #34	; 0x22
    f52a:	e7ae      	b.n	f48a <ull_conn_done+0x1ba>
				conn->apto_expire = 1U;
    f52c:	2301      	movs	r3, #1
    f52e:	f8a4 30b4 	strh.w	r3, [r4, #180]	; 0xb4
    f532:	e70a      	b.n	f34a <ull_conn_done+0x7a>
				conn->llcp_ack -= 2U;
    f534:	1e8b      	subs	r3, r1, #2
				conn->llcp_type = LLCP_PING;
    f536:	2205      	movs	r2, #5
				conn->llcp_ack -= 2U;
    f538:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
				conn->llcp_type = LLCP_PING;
    f53c:	f884 20bd 	strb.w	r2, [r4, #189]	; 0xbd
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
    f540:	e71c      	b.n	f37c <ull_conn_done+0xac>
			conn_cleanup(conn, BT_HCI_ERR_CONN_FAIL_TO_ESTAB);
    f542:	4620      	mov	r0, r4
    f544:	213e      	movs	r1, #62	; 0x3e
    f546:	e7a0      	b.n	f48a <ull_conn_done+0x1ba>
	if ((force) || (latency_event != lll->latency_event)) {
    f548:	428f      	cmp	r7, r1
    f54a:	f43f af24 	beq.w	f396 <ull_conn_done+0xc6>
		lazy = lll->latency_event + 1U;
    f54e:	3101      	adds	r1, #1
    f550:	b289      	uxth	r1, r1
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
    f552:	2900      	cmp	r1, #0
    f554:	f43f af1f 	beq.w	f396 <ull_conn_done+0xc6>
    f558:	e753      	b.n	f402 <ull_conn_done+0x132>
    f55a:	bf00      	nop
    f55c:	0000d1fd 	.word	0x0000d1fd
    f560:	00019cec 	.word	0x00019cec
    f564:	00019e3c 	.word	0x00019e3c
    f568:	000199cc 	.word	0x000199cc

0000f56c <ull_conn_tx_lll_enqueue>:
	while (conn->tx_head &&
    f56c:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
    f570:	2b00      	cmp	r3, #0
    f572:	f000 80e5 	beq.w	f740 <ull_conn_tx_lll_enqueue+0x1d4>
    f576:	3901      	subs	r1, #1
{
    f578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
    f57c:	f8df 81c8 	ldr.w	r8, [pc, #456]	; f748 <ull_conn_tx_lll_enqueue+0x1dc>
		LL_ASSERT(link);
    f580:	f8df a1c8 	ldr.w	sl, [pc, #456]	; f74c <ull_conn_tx_lll_enqueue+0x1e0>
    f584:	f8df 91c8 	ldr.w	r9, [pc, #456]	; f750 <ull_conn_tx_lll_enqueue+0x1e4>
    f588:	4604      	mov	r4, r0
    f58a:	b2cd      	uxtb	r5, r1
    f58c:	e012      	b.n	f5b4 <ull_conn_tx_lll_enqueue+0x48>
		link = mem_acquire(&mem_link_tx.free);
    f58e:	4640      	mov	r0, r8
    f590:	f7f8 ffce 	bl	8530 <mem_acquire>
		LL_ASSERT(link);
    f594:	4607      	mov	r7, r0
    f596:	2800      	cmp	r0, #0
    f598:	d064      	beq.n	f664 <ull_conn_tx_lll_enqueue+0xf8>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
    f59a:	4631      	mov	r1, r6
    f59c:	4638      	mov	r0, r7
    f59e:	f104 024c 	add.w	r2, r4, #76	; 0x4c
    f5a2:	f7f9 f829 	bl	85f8 <memq_enqueue>
	while (conn->tx_head &&
    f5a6:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
    f5aa:	3d01      	subs	r5, #1
    f5ac:	b2ed      	uxtb	r5, r5
    f5ae:	2b00      	cmp	r3, #0
    f5b0:	f000 8087 	beq.w	f6c2 <ull_conn_tx_lll_enqueue+0x156>
		 !conn->llcp_phy.pause_tx &&
    f5b4:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
	while (conn->tx_head &&
    f5b8:	07d1      	lsls	r1, r2, #31
    f5ba:	d403      	bmi.n	f5c4 <ull_conn_tx_lll_enqueue+0x58>
		 !conn->llcp_enc.pause_tx &&
    f5bc:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
		 !conn->llcp_phy.pause_tx &&
    f5c0:	0792      	lsls	r2, r2, #30
    f5c2:	d564      	bpl.n	f68e <ull_conn_tx_lll_enqueue+0x122>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
    f5c4:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
    f5c8:	4293      	cmp	r3, r2
    f5ca:	d17a      	bne.n	f6c2 <ull_conn_tx_lll_enqueue+0x156>
    f5cc:	2dff      	cmp	r5, #255	; 0xff
    f5ce:	d078      	beq.n	f6c2 <ull_conn_tx_lll_enqueue+0x156>
		tx = tx_ull_dequeue(conn, conn->tx_head);
    f5d0:	f8d4 119c 	ldr.w	r1, [r4, #412]	; 0x19c
    f5d4:	4620      	mov	r0, r4
    f5d6:	f7fd fc2b 	bl	ce30 <tx_ull_dequeue>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
    f5da:	7903      	ldrb	r3, [r0, #4]
    f5dc:	f003 0303 	and.w	r3, r3, #3
    f5e0:	2b03      	cmp	r3, #3
		tx = tx_ull_dequeue(conn, conn->tx_head);
    f5e2:	4606      	mov	r6, r0
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
    f5e4:	d1d3      	bne.n	f58e <ull_conn_tx_lll_enqueue+0x22>
	switch (pdu_tx->llctrl.opcode) {
    f5e6:	79c3      	ldrb	r3, [r0, #7]
    f5e8:	3b03      	subs	r3, #3
    f5ea:	2b13      	cmp	r3, #19
    f5ec:	d8cf      	bhi.n	f58e <ull_conn_tx_lll_enqueue+0x22>
    f5ee:	a201      	add	r2, pc, #4	; (adr r2, f5f4 <ull_conn_tx_lll_enqueue+0x88>)
    f5f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    f5f4:	0000f64d 	.word	0x0000f64d
    f5f8:	0000f58f 	.word	0x0000f58f
    f5fc:	0000f58f 	.word	0x0000f58f
    f600:	0000f58f 	.word	0x0000f58f
    f604:	0000f58f 	.word	0x0000f58f
    f608:	0000f58f 	.word	0x0000f58f
    f60c:	0000f58f 	.word	0x0000f58f
    f610:	0000f64d 	.word	0x0000f64d
    f614:	0000f645 	.word	0x0000f645
    f618:	0000f58f 	.word	0x0000f58f
    f61c:	0000f58f 	.word	0x0000f58f
    f620:	0000f58f 	.word	0x0000f58f
    f624:	0000f58f 	.word	0x0000f58f
    f628:	0000f58f 	.word	0x0000f58f
    f62c:	0000f58f 	.word	0x0000f58f
    f630:	0000f58f 	.word	0x0000f58f
    f634:	0000f58f 	.word	0x0000f58f
    f638:	0000f58f 	.word	0x0000f58f
    f63c:	0000f58f 	.word	0x0000f58f
    f640:	0000f681 	.word	0x0000f681
		if (!conn->lll.role) {
    f644:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    f648:	2b00      	cmp	r3, #0
    f64a:	daa0      	bge.n	f58e <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_enc.pause_tx = 1U;
    f64c:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
    f650:	f043 0302 	orr.w	r3, r3, #2
    f654:	f884 313e 	strb.w	r3, [r4, #318]	; 0x13e
		link = mem_acquire(&mem_link_tx.free);
    f658:	4640      	mov	r0, r8
    f65a:	f7f8 ff69 	bl	8530 <mem_acquire>
		LL_ASSERT(link);
    f65e:	4607      	mov	r7, r0
    f660:	2800      	cmp	r0, #0
    f662:	d19a      	bne.n	f59a <ull_conn_tx_lll_enqueue+0x2e>
    f664:	4837      	ldr	r0, [pc, #220]	; (f744 <ull_conn_tx_lll_enqueue+0x1d8>)
    f666:	f240 6303 	movw	r3, #1539	; 0x603
    f66a:	4652      	mov	r2, sl
    f66c:	4649      	mov	r1, r9
    f66e:	f006 fb67 	bl	15d40 <printk>
    f672:	4040      	eors	r0, r0
    f674:	f380 8811 	msr	BASEPRI, r0
    f678:	f04f 0003 	mov.w	r0, #3
    f67c:	df02      	svc	2
    f67e:	e78c      	b.n	f59a <ull_conn_tx_lll_enqueue+0x2e>
		conn->llcp_phy.pause_tx = 1U;
    f680:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
    f684:	f043 0301 	orr.w	r3, r3, #1
    f688:	f884 3197 	strb.w	r3, [r4, #407]	; 0x197
		break;
    f68c:	e77f      	b.n	f58e <ull_conn_tx_lll_enqueue+0x22>
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
    f68e:	791a      	ldrb	r2, [r3, #4]
    f690:	f002 0203 	and.w	r2, r2, #3
    f694:	2a03      	cmp	r2, #3
    f696:	d199      	bne.n	f5cc <ull_conn_tx_lll_enqueue+0x60>
	    ((pdu_data_tx->llctrl.opcode ==
    f698:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
    f69a:	2a03      	cmp	r2, #3
    f69c:	d001      	beq.n	f6a2 <ull_conn_tx_lll_enqueue+0x136>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
    f69e:	2a0a      	cmp	r2, #10
    f6a0:	d194      	bne.n	f5cc <ull_conn_tx_lll_enqueue+0x60>
		if (((conn->llcp_req != conn->llcp_ack) &&
    f6a2:	f894 10bc 	ldrb.w	r1, [r4, #188]	; 0xbc
    f6a6:	f894 20bb 	ldrb.w	r2, [r4, #187]	; 0xbb
    f6aa:	428a      	cmp	r2, r1
    f6ac:	d00b      	beq.n	f6c6 <ull_conn_tx_lll_enqueue+0x15a>
    f6ae:	f894 20bd 	ldrb.w	r2, [r4, #189]	; 0xbd
    f6b2:	2a03      	cmp	r2, #3
    f6b4:	d08a      	beq.n	f5cc <ull_conn_tx_lll_enqueue+0x60>
			if ((tx->next != NULL) &&
    f6b6:	681a      	ldr	r2, [r3, #0]
    f6b8:	b11a      	cbz	r2, f6c2 <ull_conn_tx_lll_enqueue+0x156>
    f6ba:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
    f6be:	428a      	cmp	r2, r1
    f6c0:	d02d      	beq.n	f71e <ull_conn_tx_lll_enqueue+0x1b2>
}
    f6c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		    ((conn->llcp_req == conn->llcp_ack) &&
    f6c6:	f894 00f9 	ldrb.w	r0, [r4, #249]	; 0xf9
    f6ca:	f894 10f8 	ldrb.w	r1, [r4, #248]	; 0xf8
    f6ce:	4288      	cmp	r0, r1
    f6d0:	d1f1      	bne.n	f6b6 <ull_conn_tx_lll_enqueue+0x14a>
		     ((conn->llcp_feature.ack != conn->llcp_feature.req) ||
    f6d2:	f894 0111 	ldrb.w	r0, [r4, #273]	; 0x111
    f6d6:	f894 1110 	ldrb.w	r1, [r4, #272]	; 0x110
    f6da:	4288      	cmp	r0, r1
    f6dc:	d1eb      	bne.n	f6b6 <ull_conn_tx_lll_enqueue+0x14a>
		      (conn->llcp_version.ack != conn->llcp_version.req) ||
    f6de:	f894 015d 	ldrb.w	r0, [r4, #349]	; 0x15d
    f6e2:	f894 115c 	ldrb.w	r1, [r4, #348]	; 0x15c
    f6e6:	4288      	cmp	r0, r1
    f6e8:	d1e5      	bne.n	f6b6 <ull_conn_tx_lll_enqueue+0x14a>
		       conn->llcp_conn_param.req) ||
    f6ea:	f894 0185 	ldrb.w	r0, [r4, #389]	; 0x185
    f6ee:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
    f6f2:	4288      	cmp	r0, r1
    f6f4:	d1df      	bne.n	f6b6 <ull_conn_tx_lll_enqueue+0x14a>
		      (conn->llcp_phy.ack != conn->llcp_phy.req) ||
    f6f6:	f894 0195 	ldrb.w	r0, [r4, #405]	; 0x195
    f6fa:	f894 1194 	ldrb.w	r1, [r4, #404]	; 0x194
    f6fe:	4288      	cmp	r0, r1
    f700:	d1d9      	bne.n	f6b6 <ull_conn_tx_lll_enqueue+0x14a>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
    f702:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
    f706:	2101      	movs	r1, #1
    f708:	f361 0301 	bfi	r3, r1, #0, #2
			conn->llcp_ack -= 2U;
    f70c:	3a02      	subs	r2, #2
			conn->llcp_type = LLCP_ENCRYPTION;
    f70e:	2103      	movs	r1, #3
			conn->llcp_ack -= 2U;
    f710:	f884 20bc 	strb.w	r2, [r4, #188]	; 0xbc
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
    f714:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
			conn->llcp_type = LLCP_ENCRYPTION;
    f718:	f884 10bd 	strb.w	r1, [r4, #189]	; 0xbd
			conn->llcp_ack -= 2U;
    f71c:	e756      	b.n	f5cc <ull_conn_tx_lll_enqueue+0x60>
				tx->next = conn->tx_ctrl_last->next;
    f71e:	f8d4 11a4 	ldr.w	r1, [r4, #420]	; 0x1a4
				if (!conn->tx_data_last) {
    f722:	f8d4 01ac 	ldr.w	r0, [r4, #428]	; 0x1ac
				conn->tx_head = tx->next;
    f726:	f8c4 219c 	str.w	r2, [r4, #412]	; 0x19c
				tx->next = conn->tx_ctrl_last->next;
    f72a:	680a      	ldr	r2, [r1, #0]
    f72c:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last->next = tx;
    f72e:	600b      	str	r3, [r1, #0]
				conn->tx_data = tx;
    f730:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
				if (!conn->tx_data_last) {
    f734:	2800      	cmp	r0, #0
    f736:	f47f af49 	bne.w	f5cc <ull_conn_tx_lll_enqueue+0x60>
					conn->tx_data_last = tx;
    f73a:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
    f73e:	e745      	b.n	f5cc <ull_conn_tx_lll_enqueue+0x60>
    f740:	4770      	bx	lr
    f742:	bf00      	nop
    f744:	000199cc 	.word	0x000199cc
    f748:	20001b44 	.word	0x20001b44
    f74c:	00019cec 	.word	0x00019cec
    f750:	00019d44 	.word	0x00019d44

0000f754 <tx_demux>:
{
    f754:	b510      	push	{r4, lr}
    f756:	4604      	mov	r4, r0
	ull_conn_tx_demux(1);
    f758:	2001      	movs	r0, #1
    f75a:	f7ff fce3 	bl	f124 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(param, 1);
    f75e:	4620      	mov	r0, r4
    f760:	2101      	movs	r1, #1
}
    f762:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ull_conn_tx_lll_enqueue(param, 1);
    f766:	f7ff bf01 	b.w	f56c <ull_conn_tx_lll_enqueue>
    f76a:	bf00      	nop

0000f76c <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
    f76c:	4901      	ldr	r1, [pc, #4]	; (f774 <ull_conn_link_tx_release+0x8>)
    f76e:	f7f8 bef9 	b.w	8564 <mem_release>
    f772:	bf00      	nop
    f774:	20001b44 	.word	0x20001b44

0000f778 <ull_conn_ack_last_idx_get>:
	return mfifo_conn_ack.l;
    f778:	4b01      	ldr	r3, [pc, #4]	; (f780 <ull_conn_ack_last_idx_get+0x8>)
}
    f77a:	78d8      	ldrb	r0, [r3, #3]
    f77c:	4770      	bx	lr
    f77e:	bf00      	nop
    f780:	200003c4 	.word	0x200003c4

0000f784 <ull_conn_ack_peek>:
{
    f784:	b4f0      	push	{r4, r5, r6, r7}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
    f786:	4b0b      	ldr	r3, [pc, #44]	; (f7b4 <ull_conn_ack_peek+0x30>)
    f788:	789c      	ldrb	r4, [r3, #2]
    f78a:	78de      	ldrb	r6, [r3, #3]
    f78c:	781f      	ldrb	r7, [r3, #0]
	if (first == last) {
    f78e:	42b4      	cmp	r4, r6
    f790:	d00d      	beq.n	f7ae <ull_conn_ack_peek+0x2a>
	return (void *)(fifo + first * size);
    f792:	3304      	adds	r3, #4
    f794:	fb14 f407 	smulbb	r4, r4, r7
	if (!lll_tx) {
    f798:	4605      	mov	r5, r0
    f79a:	1918      	adds	r0, r3, r4
    f79c:	d005      	beq.n	f7aa <ull_conn_ack_peek+0x26>
	*ack_last = mfifo_conn_ack.l;
    f79e:	702e      	strb	r6, [r5, #0]
	*handle = lll_tx->handle;
    f7a0:	5b1c      	ldrh	r4, [r3, r4]
	*tx = lll_tx->node;
    f7a2:	6843      	ldr	r3, [r0, #4]
	*handle = lll_tx->handle;
    f7a4:	800c      	strh	r4, [r1, #0]
	*tx = lll_tx->node;
    f7a6:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
    f7a8:	6818      	ldr	r0, [r3, #0]
}
    f7aa:	bcf0      	pop	{r4, r5, r6, r7}
    f7ac:	4770      	bx	lr
		return NULL;
    f7ae:	2000      	movs	r0, #0
    f7b0:	e7fb      	b.n	f7aa <ull_conn_ack_peek+0x26>
    f7b2:	bf00      	nop
    f7b4:	200003c4 	.word	0x200003c4

0000f7b8 <ull_conn_ack_by_last_peek>:
{
    f7b8:	b430      	push	{r4, r5}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
    f7ba:	4b09      	ldr	r3, [pc, #36]	; (f7e0 <ull_conn_ack_by_last_peek+0x28>)
    f7bc:	789c      	ldrb	r4, [r3, #2]
    f7be:	781d      	ldrb	r5, [r3, #0]
	if (first == last) {
    f7c0:	4284      	cmp	r4, r0
    f7c2:	d00b      	beq.n	f7dc <ull_conn_ack_by_last_peek+0x24>
	return (void *)(fifo + first * size);
    f7c4:	3304      	adds	r3, #4
    f7c6:	fb14 f405 	smulbb	r4, r4, r5
	if (!lll_tx) {
    f7ca:	1918      	adds	r0, r3, r4
    f7cc:	d004      	beq.n	f7d8 <ull_conn_ack_by_last_peek+0x20>
	*handle = lll_tx->handle;
    f7ce:	5b1c      	ldrh	r4, [r3, r4]
	*tx = lll_tx->node;
    f7d0:	6843      	ldr	r3, [r0, #4]
	*handle = lll_tx->handle;
    f7d2:	800c      	strh	r4, [r1, #0]
	*tx = lll_tx->node;
    f7d4:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
    f7d6:	6818      	ldr	r0, [r3, #0]
}
    f7d8:	bc30      	pop	{r4, r5}
    f7da:	4770      	bx	lr
		return NULL;
    f7dc:	2000      	movs	r0, #0
    f7de:	e7fb      	b.n	f7d8 <ull_conn_ack_by_last_peek+0x20>
    f7e0:	200003c4 	.word	0x200003c4

0000f7e4 <ull_conn_ack_dequeue>:
{
    f7e4:	b410      	push	{r4}
	return MFIFO_DEQUEUE(conn_ack);
    f7e6:	4b0a      	ldr	r3, [pc, #40]	; (f810 <ull_conn_ack_dequeue+0x2c>)
	uint8_t _first = *first; /* Copy read-index */
    f7e8:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
    f7ea:	78da      	ldrb	r2, [r3, #3]
    f7ec:	7818      	ldrb	r0, [r3, #0]
    f7ee:	785c      	ldrb	r4, [r3, #1]
    f7f0:	428a      	cmp	r2, r1
    f7f2:	d00a      	beq.n	f80a <ull_conn_ack_dequeue+0x26>
	_first += 1U;
    f7f4:	1c4a      	adds	r2, r1, #1
    f7f6:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
    f7f8:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
    f7fc:	4294      	cmp	r4, r2
    f7fe:	bf08      	it	eq
    f800:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
    f802:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
    f804:	709a      	strb	r2, [r3, #2]
}
    f806:	bc10      	pop	{r4}
    f808:	4770      	bx	lr
		return NULL;
    f80a:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(conn_ack);
    f80c:	e7fb      	b.n	f806 <ull_conn_ack_dequeue+0x22>
    f80e:	bf00      	nop
    f810:	200003c4 	.word	0x200003c4

0000f814 <ull_conn_lll_ack_enqueue>:
{
    f814:	b570      	push	{r4, r5, r6, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
    f816:	4a13      	ldr	r2, [pc, #76]	; (f864 <ull_conn_lll_ack_enqueue+0x50>)
    f818:	78d6      	ldrb	r6, [r2, #3]
	if (last == count) {
    f81a:	7855      	ldrb	r5, [r2, #1]
    f81c:	7894      	ldrb	r4, [r2, #2]
	last = last + 1;
    f81e:	1c73      	adds	r3, r6, #1
    f820:	b2db      	uxtb	r3, r3
		last = 0U;
    f822:	429d      	cmp	r5, r3
    f824:	bf08      	it	eq
    f826:	2300      	moveq	r3, #0
	if (last == first) {
    f828:	429c      	cmp	r4, r3
    f82a:	d00a      	beq.n	f842 <ull_conn_lll_ack_enqueue+0x2e>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    f82c:	4615      	mov	r5, r2
    f82e:	f815 4b04 	ldrb.w	r4, [r5], #4
    f832:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(lll_tx);
    f836:	192e      	adds	r6, r5, r4
    f838:	d003      	beq.n	f842 <ull_conn_lll_ack_enqueue+0x2e>
	lll_tx->handle = handle;
    f83a:	5328      	strh	r0, [r5, r4]
	lll_tx->node = tx;
    f83c:	6071      	str	r1, [r6, #4]
	*last = idx; /* Commit: Update write index */
    f83e:	70d3      	strb	r3, [r2, #3]
}
    f840:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(lll_tx);
    f842:	4a09      	ldr	r2, [pc, #36]	; (f868 <ull_conn_lll_ack_enqueue+0x54>)
    f844:	4909      	ldr	r1, [pc, #36]	; (f86c <ull_conn_lll_ack_enqueue+0x58>)
    f846:	480a      	ldr	r0, [pc, #40]	; (f870 <ull_conn_lll_ack_enqueue+0x5c>)
    f848:	f240 6341 	movw	r3, #1601	; 0x641
    f84c:	f006 fa78 	bl	15d40 <printk>
    f850:	4040      	eors	r0, r0
    f852:	f380 8811 	msr	BASEPRI, r0
    f856:	f04f 0003 	mov.w	r0, #3
    f85a:	df02      	svc	2
	lll_tx->handle = handle;
    f85c:	2300      	movs	r3, #0
    f85e:	801b      	strh	r3, [r3, #0]
    f860:	deff      	udf	#255	; 0xff
    f862:	bf00      	nop
    f864:	200003c4 	.word	0x200003c4
    f868:	00019cec 	.word	0x00019cec
    f86c:	00019d34 	.word	0x00019d34
    f870:	000199cc 	.word	0x000199cc

0000f874 <ull_conn_tx_ack>:
{
    f874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	LL_ASSERT(pdu_tx->len);
    f876:	7953      	ldrb	r3, [r2, #5]
{
    f878:	4614      	mov	r4, r2
    f87a:	4605      	mov	r5, r0
    f87c:	460e      	mov	r6, r1
	LL_ASSERT(pdu_tx->len);
    f87e:	b36b      	cbz	r3, f8dc <ull_conn_tx_ack+0x68>
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
    f880:	7923      	ldrb	r3, [r4, #4]
    f882:	f003 0203 	and.w	r2, r3, #3
    f886:	2a03      	cmp	r2, #3
    f888:	d00c      	beq.n	f8a4 <ull_conn_tx_ack+0x30>
	} else if (handle == 0xFFFF) {
    f88a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f88e:	4295      	cmp	r5, r2
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
    f890:	bf04      	itt	eq
    f892:	f36f 0301 	bfceq	r3, #0, #2
    f896:	7123      	strbeq	r3, [r4, #4]
	ll_tx_ack_put(handle, tx);
    f898:	4621      	mov	r1, r4
    f89a:	4628      	mov	r0, r5
}
    f89c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_tx_ack_put(handle, tx);
    f8a0:	f7fc bf22 	b.w	c6e8 <ll_tx_ack_put>
		if (handle != 0xFFFF) {
    f8a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f8a8:	429d      	cmp	r5, r3
    f8aa:	d125      	bne.n	f8f8 <ull_conn_tx_ack+0x84>
		if (link->next == (void *)tx) {
    f8ac:	6830      	ldr	r0, [r6, #0]
    f8ae:	4284      	cmp	r4, r0
    f8b0:	d03f      	beq.n	f932 <ull_conn_tx_ack+0xbe>
			LL_ASSERT(!link->next);
    f8b2:	2800      	cmp	r0, #0
    f8b4:	d0f0      	beq.n	f898 <ull_conn_tx_ack+0x24>
    f8b6:	4ab3      	ldr	r2, [pc, #716]	; (fb84 <ull_conn_tx_ack+0x310>)
    f8b8:	49b3      	ldr	r1, [pc, #716]	; (fb88 <ull_conn_tx_ack+0x314>)
    f8ba:	48b4      	ldr	r0, [pc, #720]	; (fb8c <ull_conn_tx_ack+0x318>)
    f8bc:	f240 6361 	movw	r3, #1633	; 0x661
    f8c0:	f006 fa3e 	bl	15d40 <printk>
    f8c4:	4040      	eors	r0, r0
    f8c6:	f380 8811 	msr	BASEPRI, r0
    f8ca:	f04f 0003 	mov.w	r0, #3
    f8ce:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
    f8d0:	4621      	mov	r1, r4
    f8d2:	4628      	mov	r0, r5
}
    f8d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_tx_ack_put(handle, tx);
    f8d8:	f7fc bf06 	b.w	c6e8 <ll_tx_ack_put>
	LL_ASSERT(pdu_tx->len);
    f8dc:	4aa9      	ldr	r2, [pc, #676]	; (fb84 <ull_conn_tx_ack+0x310>)
    f8de:	49ac      	ldr	r1, [pc, #688]	; (fb90 <ull_conn_tx_ack+0x31c>)
    f8e0:	48aa      	ldr	r0, [pc, #680]	; (fb8c <ull_conn_tx_ack+0x318>)
    f8e2:	f240 634e 	movw	r3, #1614	; 0x64e
    f8e6:	f006 fa2b 	bl	15d40 <printk>
    f8ea:	4040      	eors	r0, r0
    f8ec:	f380 8811 	msr	BASEPRI, r0
    f8f0:	f04f 0003 	mov.w	r0, #3
    f8f4:	df02      	svc	2
    f8f6:	e7c3      	b.n	f880 <ull_conn_tx_ack+0xc>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    f8f8:	48a6      	ldr	r0, [pc, #664]	; (fb94 <ull_conn_tx_ack+0x320>)
    f8fa:	462a      	mov	r2, r5
    f8fc:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    f900:	f7f8 fe48 	bl	8594 <mem_get>
    f904:	79e3      	ldrb	r3, [r4, #7]
    f906:	3b02      	subs	r3, #2
    f908:	4607      	mov	r7, r0
	switch (pdu_tx->llctrl.opcode) {
    f90a:	2b16      	cmp	r3, #22
    f90c:	d80d      	bhi.n	f92a <ull_conn_tx_ack+0xb6>
    f90e:	e8df f003 	tbb	[pc, r3]
    f912:	93af      	.short	0x93af
    f914:	180c0c0c 	.word	0x180c0c0c
    f918:	5241180c 	.word	0x5241180c
    f91c:	0c0c370c 	.word	0x0c0c370c
    f920:	180c150c 	.word	0x180c150c
    f924:	0c1f655d 	.word	0x0c1f655d
    f928:	26          	.byte	0x26
    f929:	00          	.byte	0x00
		if (link->next == (void *)tx) {
    f92a:	6830      	ldr	r0, [r6, #0]
    f92c:	42a0      	cmp	r0, r4
    f92e:	d1c0      	bne.n	f8b2 <ull_conn_tx_ack+0x3e>
    f930:	4620      	mov	r0, r4
}
    f932:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			mem_release(tx, &mem_conn_tx_ctrl.free);
    f936:	4998      	ldr	r1, [pc, #608]	; (fb98 <ull_conn_tx_ack+0x324>)
    f938:	f7f8 be14 	b.w	8564 <mem_release>
		if (pdu_tx->llctrl.reject_ext_ind.reject_opcode !=
    f93c:	7a23      	ldrb	r3, [r4, #8]
    f93e:	2b03      	cmp	r3, #3
    f940:	d01e      	beq.n	f980 <ull_conn_tx_ack+0x10c>
			conn->common.txn_lock = 0U;
    f942:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
    f946:	f36f 0341 	bfc	r3, #1, #1
    f94a:	f887 30ba 	strb.w	r3, [r7, #186]	; 0xba
			break;
    f94e:	e7ad      	b.n	f8ac <ull_conn_tx_ack+0x38>
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    f950:	f890 3196 	ldrb.w	r3, [r0, #406]	; 0x196
    f954:	2202      	movs	r2, #2
    f956:	f362 0301 	bfi	r3, r2, #0, #2
    f95a:	f880 3196 	strb.w	r3, [r0, #406]	; 0x196
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
    f95e:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
    f962:	f897 1046 	ldrb.w	r1, [r7, #70]	; 0x46
		conn->llcp_phy.pause_tx = 0U;
    f966:	f897 2197 	ldrb.w	r2, [r7, #407]	; 0x197
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
    f96a:	f3c3 0382 	ubfx	r3, r3, #2, #3
    f96e:	f363 1106 	bfi	r1, r3, #4, #3
		conn->llcp_phy.pause_tx = 0U;
    f972:	f36f 0200 	bfc	r2, #0, #1
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
    f976:	f887 1046 	strb.w	r1, [r7, #70]	; 0x46
		conn->llcp_phy.pause_tx = 0U;
    f97a:	f887 2197 	strb.w	r2, [r7, #407]	; 0x197
		break;
    f97e:	e795      	b.n	f8ac <ull_conn_tx_ack+0x38>
		conn->llcp_enc.pause_rx = 0U;
    f980:	f897 313e 	ldrb.w	r3, [r7, #318]	; 0x13e
		conn->procedure_expire = 0U;
    f984:	2200      	movs	r2, #0
		conn->llcp_enc.pause_rx = 0U;
    f986:	f023 0303 	bic.w	r3, r3, #3
    f98a:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
		conn->procedure_expire = 0U;
    f98e:	f8a7 20ac 	strh.w	r2, [r7, #172]	; 0xac
		break;
    f992:	e78b      	b.n	f8ac <ull_conn_tx_ack+0x38>
		conn->llcp_enc.pause_tx = 1U;
    f994:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
		conn->procedure_expire = conn->procedure_reload;
    f998:	f8b0 20aa 	ldrh.w	r2, [r0, #170]	; 0xaa
    f99c:	f8a0 20ac 	strh.w	r2, [r0, #172]	; 0xac
		conn->llcp_enc.pause_tx = 1U;
    f9a0:	f023 0306 	bic.w	r3, r3, #6
		conn->llcp_enc.ack = conn->llcp_enc.req;
    f9a4:	f890 213c 	ldrb.w	r2, [r0, #316]	; 0x13c
    f9a8:	f880 213d 	strb.w	r2, [r0, #317]	; 0x13d
		conn->llcp_enc.pause_tx = 1U;
    f9ac:	f043 0306 	orr.w	r3, r3, #6
    f9b0:	f880 313e 	strb.w	r3, [r0, #318]	; 0x13e
		break;
    f9b4:	e77a      	b.n	f8ac <ull_conn_tx_ack+0x38>
		if (!conn->lll.role) {
    f9b6:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
    f9ba:	2b00      	cmp	r3, #0
    f9bc:	da5f      	bge.n	fa7e <ull_conn_tx_ack+0x20a>
			conn->llcp_enc.pause_tx = 1U;
    f9be:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    f9c2:	f043 0302 	orr.w	r3, r3, #2
    f9c6:	f880 313e 	strb.w	r3, [r0, #318]	; 0x13e
    f9ca:	e76f      	b.n	f8ac <ull_conn_tx_ack+0x38>
		conn->llcp_length.state = LLCP_LENGTH_STATE_RSP_WAIT;
    f9cc:	f890 3186 	ldrb.w	r3, [r0, #390]	; 0x186
    f9d0:	2202      	movs	r2, #2
    f9d2:	f362 0302 	bfi	r3, r2, #0, #3
    f9d6:	f880 3186 	strb.w	r3, [r0, #390]	; 0x186
		break;
    f9da:	e767      	b.n	f8ac <ull_conn_tx_ack+0x38>
		conn->common.txn_lock = 0U;
    f9dc:	f890 30ba 	ldrb.w	r3, [r0, #186]	; 0xba
		if (conn->llcp_length.req != conn->llcp_length.ack) {
    f9e0:	f890 1184 	ldrb.w	r1, [r0, #388]	; 0x184
    f9e4:	f890 2185 	ldrb.w	r2, [r0, #389]	; 0x185
		conn->common.txn_lock = 0U;
    f9e8:	f36f 0341 	bfc	r3, #1, #1
		if (conn->llcp_length.req != conn->llcp_length.ack) {
    f9ec:	428a      	cmp	r2, r1
		conn->common.txn_lock = 0U;
    f9ee:	f880 30ba 	strb.w	r3, [r0, #186]	; 0xba
		if (conn->llcp_length.req != conn->llcp_length.ack) {
    f9f2:	f43f af5b 	beq.w	f8ac <ull_conn_tx_ack+0x38>
			switch (conn->llcp_length.state) {
    f9f6:	f890 2186 	ldrb.w	r2, [r0, #390]	; 0x186
    f9fa:	f002 0307 	and.w	r3, r2, #7
    f9fe:	2b03      	cmp	r3, #3
    fa00:	d004      	beq.n	fa0c <ull_conn_tx_ack+0x198>
    fa02:	3303      	adds	r3, #3
    fa04:	f003 0307 	and.w	r3, r3, #7
    fa08:	2b01      	cmp	r3, #1
    fa0a:	d88e      	bhi.n	f92a <ull_conn_tx_ack+0xb6>
				conn->lll.max_tx_octets =
    fa0c:	f8b7 318a 	ldrh.w	r3, [r7, #394]	; 0x18a
    fa10:	87fb      	strh	r3, [r7, #62]	; 0x3e
				if (conn->llcp_length.state ==
    fa12:	f002 0307 	and.w	r3, r2, #7
				conn->lll.max_tx_time =
    fa16:	f8b7 018e 	ldrh.w	r0, [r7, #398]	; 0x18e
    fa1a:	f8a7 0042 	strh.w	r0, [r7, #66]	; 0x42
				if (conn->llcp_length.state ==
    fa1e:	2b05      	cmp	r3, #5
    fa20:	f000 8081 	beq.w	fb26 <ull_conn_tx_ack+0x2b2>
				if (!conn->llcp_length.cache.tx_octets) {
    fa24:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
    fa28:	2b00      	cmp	r3, #0
    fa2a:	f040 8082 	bne.w	fb32 <ull_conn_tx_ack+0x2be>
					conn->llcp_length.ack =
    fa2e:	f887 1185 	strb.w	r1, [r7, #389]	; 0x185
					conn->procedure_expire = 0U;
    fa32:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
					break;
    fa36:	e739      	b.n	f8ac <ull_conn_tx_ack+0x38>
		memcpy(&conn->llcp.encryption.skd[0],
    fa38:	2208      	movs	r2, #8
    fa3a:	f104 0112 	add.w	r1, r4, #18
    fa3e:	30ce      	adds	r0, #206	; 0xce
    fa40:	f007 f836 	bl	16ab0 <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[0],
    fa44:	2204      	movs	r2, #4
    fa46:	f104 011a 	add.w	r1, r4, #26
    fa4a:	f107 0078 	add.w	r0, r7, #120	; 0x78
    fa4e:	f007 f82f 	bl	16ab0 <memcpy>
		conn->llcp_enc.pause_tx = 1U;
    fa52:	f897 313e 	ldrb.w	r3, [r7, #318]	; 0x13e
		conn->procedure_expire = conn->procedure_reload;
    fa56:	f8b7 10aa 	ldrh.w	r1, [r7, #170]	; 0xaa
		conn->llcp_enc.ack = conn->llcp_enc.req;
    fa5a:	f897 213c 	ldrb.w	r2, [r7, #316]	; 0x13c
		conn->procedure_expire = conn->procedure_reload;
    fa5e:	f8a7 10ac 	strh.w	r1, [r7, #172]	; 0xac
		conn->llcp_enc.pause_tx = 1U;
    fa62:	f043 0302 	orr.w	r3, r3, #2
    fa66:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
		conn->llcp_enc.ack = conn->llcp_enc.req;
    fa6a:	f887 213d 	strb.w	r2, [r7, #317]	; 0x13d
		break;
    fa6e:	e71d      	b.n	f8ac <ull_conn_tx_ack+0x38>
		uint8_t reason = (pdu_tx->llctrl.terminate_ind.error_code ==
    fa70:	7a21      	ldrb	r1, [r4, #8]
    fa72:	2913      	cmp	r1, #19
		conn_cleanup(conn, reason);
    fa74:	bf08      	it	eq
    fa76:	2116      	moveq	r1, #22
    fa78:	f7ff fba4 	bl	f1c4 <conn_cleanup>
	break;
    fa7c:	e716      	b.n	f8ac <ull_conn_tx_ack+0x38>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    fa7e:	7923      	ldrb	r3, [r4, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    fa80:	2203      	movs	r2, #3
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    fa82:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
    fa86:	2117      	movs	r1, #23
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    fa88:	71e2      	strb	r2, [r4, #7]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
    fa8a:	2208      	movs	r2, #8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    fa8c:	7123      	strb	r3, [r4, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
    fa8e:	7161      	strb	r1, [r4, #5]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
    fa90:	f200 1141 	addw	r1, r0, #321	; 0x141
    fa94:	18a0      	adds	r0, r4, r2
    fa96:	f007 f80b 	bl	16ab0 <memcpy>
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
    fa9a:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
    fa9e:	7423      	strb	r3, [r4, #16]
	pdu_ctrl_tx->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
    faa0:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
    faa4:	7463      	strb	r3, [r4, #17]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_req.skdm,
    faa6:	210c      	movs	r1, #12
    faa8:	f104 0012 	add.w	r0, r4, #18
    faac:	f001 fde2 	bl	11674 <lll_csrand_isr_get>
	    conn->tx_head &&
    fab0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
	if (
    fab4:	b36b      	cbz	r3, fb12 <ull_conn_tx_ack+0x29e>
	    !conn->llcp_enc.pause_tx &&
    fab6:	f897 113e 	ldrb.w	r1, [r7, #318]	; 0x13e
    faba:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
	    conn->tx_head &&
    fabe:	0788      	lsls	r0, r1, #30
    fac0:	d429      	bmi.n	fb16 <ull_conn_tx_ack+0x2a2>
	    !conn->llcp_phy.pause_tx &&
    fac2:	f897 1197 	ldrb.w	r1, [r7, #407]	; 0x197
    fac6:	07c9      	lsls	r1, r1, #31
    fac8:	d425      	bmi.n	fb16 <ull_conn_tx_ack+0x2a2>
		if (conn->tx_head == conn->tx_data) {
    faca:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
    face:	428b      	cmp	r3, r1
    fad0:	d03d      	beq.n	fb4e <ull_conn_tx_ack+0x2da>
		} else if (!conn->tx_ctrl) {
    fad2:	2a00      	cmp	r2, #0
    fad4:	d047      	beq.n	fb66 <ull_conn_tx_ack+0x2f2>
	tx->next = conn->tx_ctrl_last->next;
    fad6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    fada:	681a      	ldr	r2, [r3, #0]
    fadc:	6022      	str	r2, [r4, #0]
	conn->tx_ctrl_last->next = tx;
    fade:	601c      	str	r4, [r3, #0]
	conn->tx_ctrl_last = tx;
    fae0:	6823      	ldr	r3, [r4, #0]
    fae2:	f8c7 41a4 	str.w	r4, [r7, #420]	; 0x1a4
	if (!tx->next) {
    fae6:	6832      	ldr	r2, [r6, #0]
    fae8:	b10b      	cbz	r3, faee <ull_conn_tx_ack+0x27a>
		if (link->next == (void *)tx) {
    faea:	b11a      	cbz	r2, faf4 <ull_conn_tx_ack+0x280>
}
    faec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		conn->tx_data_last = tx;
    faee:	f8c7 41ac 	str.w	r4, [r7, #428]	; 0x1ac
    faf2:	e7fa      	b.n	faea <ull_conn_tx_ack+0x276>
			LL_ASSERT(link->next);
    faf4:	4a23      	ldr	r2, [pc, #140]	; (fb84 <ull_conn_tx_ack+0x310>)
    faf6:	4929      	ldr	r1, [pc, #164]	; (fb9c <ull_conn_tx_ack+0x328>)
    faf8:	4824      	ldr	r0, [pc, #144]	; (fb8c <ull_conn_tx_ack+0x318>)
    fafa:	f240 6359 	movw	r3, #1625	; 0x659
    fafe:	f006 f91f 	bl	15d40 <printk>
    fb02:	4040      	eors	r0, r0
    fb04:	f380 8811 	msr	BASEPRI, r0
    fb08:	f04f 0003 	mov.w	r0, #3
    fb0c:	df02      	svc	2
    fb0e:	2000      	movs	r0, #0
    fb10:	e70f      	b.n	f932 <ull_conn_tx_ack+0xbe>
    fb12:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
		if (!conn->tx_ctrl) {
    fb16:	2a00      	cmp	r2, #0
    fb18:	d1dd      	bne.n	fad6 <ull_conn_tx_ack+0x262>
			tx->next = conn->tx_head;
    fb1a:	6023      	str	r3, [r4, #0]
				conn->tx_ctrl = tx;
    fb1c:	e9c7 4467 	strd	r4, r4, [r7, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    fb20:	f8c7 41a4 	str.w	r4, [r7, #420]	; 0x1a4
    fb24:	e7df      	b.n	fae6 <ull_conn_tx_ack+0x272>
					conn->llcp_length.state =
    fb26:	2304      	movs	r3, #4
    fb28:	f363 0202 	bfi	r2, r3, #0, #3
    fb2c:	f887 2186 	strb.w	r2, [r7, #390]	; 0x186
					break;
    fb30:	e6bc      	b.n	f8ac <ull_conn_tx_ack+0x38>
				conn->llcp_length.cache.tx_octets = 0;
    fb32:	2100      	movs	r1, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    fb34:	f361 0202 	bfi	r2, r1, #0, #3
				conn->llcp_length.tx_octets =
    fb38:	f8a7 318a 	strh.w	r3, [r7, #394]	; 0x18a
				conn->llcp_length.tx_time =
    fb3c:	f8b7 3192 	ldrh.w	r3, [r7, #402]	; 0x192
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    fb40:	f887 2186 	strb.w	r2, [r7, #390]	; 0x186
				conn->llcp_length.cache.tx_octets = 0;
    fb44:	f8a7 1190 	strh.w	r1, [r7, #400]	; 0x190
				conn->llcp_length.tx_time =
    fb48:	f8a7 318e 	strh.w	r3, [r7, #398]	; 0x18e
				break;
    fb4c:	e6ae      	b.n	f8ac <ull_conn_tx_ack+0x38>
			conn->tx_data = conn->tx_data->next;
    fb4e:	6819      	ldr	r1, [r3, #0]
    fb50:	f8c7 11a8 	str.w	r1, [r7, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    fb54:	2a00      	cmp	r2, #0
    fb56:	d1be      	bne.n	fad6 <ull_conn_tx_ack+0x262>
			tx->next = conn->tx_head->next;
    fb58:	681a      	ldr	r2, [r3, #0]
    fb5a:	6022      	str	r2, [r4, #0]
			conn->tx_head->next = tx;
    fb5c:	601c      	str	r4, [r3, #0]
				conn->tx_ctrl = tx;
    fb5e:	6823      	ldr	r3, [r4, #0]
				conn->tx_ctrl_last = tx;
    fb60:	e9c7 4468 	strd	r4, r4, [r7, #416]	; 0x1a0
    fb64:	e7bf      	b.n	fae6 <ull_conn_tx_ack+0x272>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    fb66:	791a      	ldrb	r2, [r3, #4]
    fb68:	f002 0203 	and.w	r2, r2, #3
    fb6c:	2a03      	cmp	r2, #3
    fb6e:	d002      	beq.n	fb76 <ull_conn_tx_ack+0x302>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    fb70:	e9c7 3368 	strd	r3, r3, [r7, #416]	; 0x1a0
    fb74:	e7af      	b.n	fad6 <ull_conn_tx_ack+0x262>
	    ((pdu_data_tx->llctrl.opcode !=
    fb76:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    fb78:	2a03      	cmp	r2, #3
    fb7a:	d0ed      	beq.n	fb58 <ull_conn_tx_ack+0x2e4>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    fb7c:	2a0a      	cmp	r2, #10
    fb7e:	d1f7      	bne.n	fb70 <ull_conn_tx_ack+0x2fc>
    fb80:	e7ea      	b.n	fb58 <ull_conn_tx_ack+0x2e4>
    fb82:	bf00      	nop
    fb84:	00019cec 	.word	0x00019cec
    fb88:	00019ea4 	.word	0x00019ea4
    fb8c:	000199cc 	.word	0x000199cc
    fb90:	00019e98 	.word	0x00019e98
    fb94:	20000be0 	.word	0x20000be0
    fb98:	20001a90 	.word	0x20001a90
    fb9c:	00019eb0 	.word	0x00019eb0

0000fba0 <ull_conn_llcp_req>:
	if (conn_hdr->llcp_req != conn_hdr->llcp_ack) {
    fba0:	f890 30bc 	ldrb.w	r3, [r0, #188]	; 0xbc
    fba4:	f890 20bb 	ldrb.w	r2, [r0, #187]	; 0xbb
    fba8:	4293      	cmp	r3, r2
	conn_hdr->llcp_req++;
    fbaa:	bf03      	ittte	eq
    fbac:	3301      	addeq	r3, #1
    fbae:	f880 30bb 	strbeq.w	r3, [r0, #187]	; 0xbb
	return 0;
    fbb2:	2000      	moveq	r0, #0
		return BT_HCI_ERR_CMD_DISALLOWED;
    fbb4:	200c      	movne	r0, #12
}
    fbb6:	4770      	bx	lr

0000fbb8 <ull_conn_lll_max_tx_octets_get>:
	switch (lll->phy_tx_time) {
    fbb8:	f890 202a 	ldrb.w	r2, [r0, #42]	; 0x2a
    fbbc:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
    fbbe:	f3c2 1202 	ubfx	r2, r2, #4, #3
    fbc2:	2a02      	cmp	r2, #2
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
    fbc4:	bf14      	ite	ne
    fbc6:	08db      	lsrne	r3, r3, #3
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
    fbc8:	089b      	lsreq	r3, r3, #2
	if (lll->enc_tx) {
    fbca:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
	return max_tx_octets;
    fbce:	8c40      	ldrh	r0, [r0, #34]	; 0x22
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
    fbd0:	bf14      	ite	ne
    fbd2:	3b0a      	subne	r3, #10
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
    fbd4:	3b0b      	subeq	r3, #11
    fbd6:	b29b      	uxth	r3, r3
	if (lll->enc_tx) {
    fbd8:	06d2      	lsls	r2, r2, #27
		max_tx_octets -= 4U;
    fbda:	bf44      	itt	mi
    fbdc:	3b04      	submi	r3, #4
    fbde:	b29b      	uxthmi	r3, r3
}
    fbe0:	4298      	cmp	r0, r3
    fbe2:	bf28      	it	cs
    fbe4:	4618      	movcs	r0, r3
    fbe6:	4770      	bx	lr

0000fbe8 <ticker_op_stop_scan_cb>:
}
    fbe8:	4770      	bx	lr
    fbea:	bf00      	nop

0000fbec <ticker_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    fbec:	b900      	cbnz	r0, fbf0 <ticker_op_cb+0x4>
    fbee:	4770      	bx	lr
{
    fbf0:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    fbf2:	4a07      	ldr	r2, [pc, #28]	; (fc10 <ticker_op_cb+0x24>)
    fbf4:	4907      	ldr	r1, [pc, #28]	; (fc14 <ticker_op_cb+0x28>)
    fbf6:	4808      	ldr	r0, [pc, #32]	; (fc18 <ticker_op_cb+0x2c>)
    fbf8:	f240 339a 	movw	r3, #922	; 0x39a
    fbfc:	f006 f8a0 	bl	15d40 <printk>
    fc00:	4040      	eors	r0, r0
    fc02:	f380 8811 	msr	BASEPRI, r0
    fc06:	f04f 0003 	mov.w	r0, #3
    fc0a:	df02      	svc	2
}
    fc0c:	bd08      	pop	{r3, pc}
    fc0e:	bf00      	nop
    fc10:	00019ebc 	.word	0x00019ebc
    fc14:	00019d4c 	.word	0x00019d4c
    fc18:	000199cc 	.word	0x000199cc

0000fc1c <ull_master_ticker_cb>:
{
    fc1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fc20:	9c08      	ldr	r4, [sp, #32]
	if (unlikely(conn->lll.handle == 0xFFFF)) {
    fc22:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
    fc26:	f64f 76ff 	movw	r6, #65535	; 0xffff
    fc2a:	45b4      	cmp	ip, r6
    fc2c:	d030      	beq.n	fc90 <ull_master_ticker_cb+0x74>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
    fc2e:	4605      	mov	r5, r0
    fc30:	4689      	mov	r9, r1
    fc32:	4601      	mov	r1, r0
    fc34:	4620      	mov	r0, r4
    fc36:	461f      	mov	r7, r3
    fc38:	4690      	mov	r8, r2
    fc3a:	f7f0 fcf1 	bl	620 <ull_conn_llcp>
		if (ret) {
    fc3e:	bb38      	cbnz	r0, fc90 <ull_master_ticker_cb+0x74>
	return ++hdr->ref;
    fc40:	7c20      	ldrb	r0, [r4, #16]
    fc42:	3001      	adds	r0, #1
    fc44:	b2c0      	uxtb	r0, r0
    fc46:	7420      	strb	r0, [r4, #16]
	LL_ASSERT(ref);
    fc48:	b390      	cbz	r0, fcb0 <ull_master_ticker_cb+0x94>
	ull_conn_tx_demux(2);
    fc4a:	2002      	movs	r0, #2
    fc4c:	f7ff fa6a 	bl	f124 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, 2);
    fc50:	2102      	movs	r1, #2
    fc52:	4620      	mov	r0, r4
    fc54:	f7ff fc8a 	bl	f56c <ull_conn_tx_lll_enqueue>
	p.ticks_at_expire = ticks_at_expire;
    fc58:	4e1c      	ldr	r6, [pc, #112]	; (fccc <ull_master_ticker_cb+0xb0>)
	mfy.param = &p;
    fc5a:	4b1d      	ldr	r3, [pc, #116]	; (fcd0 <ull_master_ticker_cb+0xb4>)
	p.ticks_at_expire = ticks_at_expire;
    fc5c:	6035      	str	r5, [r6, #0]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
    fc5e:	2200      	movs	r2, #0
	p.param = &conn->lll;
    fc60:	f104 0c1c 	add.w	ip, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
    fc64:	4611      	mov	r1, r2
    fc66:	2001      	movs	r0, #1
	mfy.param = &p;
    fc68:	609e      	str	r6, [r3, #8]
	p.remainder = remainder;
    fc6a:	f8c6 9004 	str.w	r9, [r6, #4]
	p.lazy = lazy;
    fc6e:	f8a6 8008 	strh.w	r8, [r6, #8]
	p.force = force;
    fc72:	72b7      	strb	r7, [r6, #10]
	p.param = &conn->lll;
    fc74:	f8c6 c00c 	str.w	ip, [r6, #12]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
    fc78:	f7f8 fd32 	bl	86e0 <mayfly_enqueue>
	LL_ASSERT(!err);
    fc7c:	b950      	cbnz	r0, fc94 <ull_master_ticker_cb+0x78>
	ull_conn_tx_demux(UINT8_MAX);
    fc7e:	20ff      	movs	r0, #255	; 0xff
    fc80:	f7ff fa50 	bl	f124 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
    fc84:	4620      	mov	r0, r4
    fc86:	21ff      	movs	r1, #255	; 0xff
}
    fc88:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
    fc8c:	f7ff bc6e 	b.w	f56c <ull_conn_tx_lll_enqueue>
}
    fc90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(!err);
    fc94:	4a0f      	ldr	r2, [pc, #60]	; (fcd4 <ull_master_ticker_cb+0xb8>)
    fc96:	4910      	ldr	r1, [pc, #64]	; (fcd8 <ull_master_ticker_cb+0xbc>)
    fc98:	4810      	ldr	r0, [pc, #64]	; (fcdc <ull_master_ticker_cb+0xc0>)
    fc9a:	f240 3386 	movw	r3, #902	; 0x386
    fc9e:	f006 f84f 	bl	15d40 <printk>
    fca2:	4040      	eors	r0, r0
    fca4:	f380 8811 	msr	BASEPRI, r0
    fca8:	f04f 0003 	mov.w	r0, #3
    fcac:	df02      	svc	2
    fcae:	e7e6      	b.n	fc7e <ull_master_ticker_cb+0x62>
	LL_ASSERT(ref);
    fcb0:	4a08      	ldr	r2, [pc, #32]	; (fcd4 <ull_master_ticker_cb+0xb8>)
    fcb2:	490b      	ldr	r1, [pc, #44]	; (fce0 <ull_master_ticker_cb+0xc4>)
    fcb4:	4809      	ldr	r0, [pc, #36]	; (fcdc <ull_master_ticker_cb+0xc0>)
    fcb6:	f240 3373 	movw	r3, #883	; 0x373
    fcba:	f006 f841 	bl	15d40 <printk>
    fcbe:	4040      	eors	r0, r0
    fcc0:	f380 8811 	msr	BASEPRI, r0
    fcc4:	f04f 0003 	mov.w	r0, #3
    fcc8:	df02      	svc	2
    fcca:	e7be      	b.n	fc4a <ull_master_ticker_cb+0x2e>
    fccc:	20001b98 	.word	0x20001b98
    fcd0:	2000046c 	.word	0x2000046c
    fcd4:	00019ebc 	.word	0x00019ebc
    fcd8:	00019b30 	.word	0x00019b30
    fcdc:	000199cc 	.word	0x000199cc
    fce0:	00019cd0 	.word	0x00019cd0

0000fce4 <ll_connect_disable>:
{
    fce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fce8:	4606      	mov	r6, r0
	scan = ull_scan_is_enabled_get(SCAN_HANDLE_1M);
    fcea:	2000      	movs	r0, #0
    fcec:	f7fd f85e 	bl	cdac <ull_scan_is_enabled_get>
	if (!scan) {
    fcf0:	b368      	cbz	r0, fd4e <ll_connect_disable+0x6a>
	conn_lll = scan_lll->conn;
    fcf2:	6a03      	ldr	r3, [r0, #32]
	if (!conn_lll) {
    fcf4:	4604      	mov	r4, r0
    fcf6:	b353      	cbz	r3, fd4e <ll_connect_disable+0x6a>
	conn_lll->master.cancelled = 1U;
    fcf8:	f893 2020 	ldrb.w	r2, [r3, #32]
    fcfc:	f042 0202 	orr.w	r2, r2, #2
    fd00:	f883 2020 	strb.w	r2, [r3, #32]
	conn_lll = scan_lll->conn;
    fd04:	6a07      	ldr	r7, [r0, #32]
	if (!conn_lll) {
    fd06:	b317      	cbz	r7, fd4e <ll_connect_disable+0x6a>
		err = ull_scan_disable(SCAN_HANDLE_1M, scan);
    fd08:	4601      	mov	r1, r0
    fd0a:	2000      	movs	r0, #0
    fd0c:	f7fc ffaa 	bl	cc64 <ull_scan_disable>
	if (!err) {
    fd10:	4605      	mov	r5, r0
    fd12:	b9c8      	cbnz	r0, fd48 <ll_connect_disable+0x64>
		struct ll_conn *conn = (void *)HDR_LLL2EVT(conn_lll);
    fd14:	683f      	ldr	r7, [r7, #0]
		link = node_rx->hdr.link;
    fd16:	f8d7 811c 	ldr.w	r8, [r7, #284]	; 0x11c
		node_rx = (void *)&conn->llcp_terminate.node_rx;
    fd1a:	f507 798e 	add.w	r9, r7, #284	; 0x11c
		LL_ASSERT(link);
    fd1e:	f1b8 0f00 	cmp.w	r8, #0
    fd22:	d018      	beq.n	fd56 <ll_connect_disable+0x72>
		ll_rx_link_release(link);
    fd24:	4640      	mov	r0, r8
    fd26:	f7fc fc93 	bl	c650 <ll_rx_link_release>
		scan_lll = &scan->lll;
    fd2a:	341c      	adds	r4, #28
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    fd2c:	2114      	movs	r1, #20
		node_rx->hdr.handle = 0xffff;
    fd2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
		cc->status = BT_HCI_ERR_UNKNOWN_CONN_ID;
    fd32:	2302      	movs	r3, #2
		node_rx->hdr.rx_ftr.param = scan_lll;
    fd34:	f8c7 4124 	str.w	r4, [r7, #292]	; 0x124
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    fd38:	f887 1120 	strb.w	r1, [r7, #288]	; 0x120
		node_rx->hdr.handle = 0xffff;
    fd3c:	f8a7 2122 	strh.w	r2, [r7, #290]	; 0x122
		cc->status = BT_HCI_ERR_UNKNOWN_CONN_ID;
    fd40:	f887 3138 	strb.w	r3, [r7, #312]	; 0x138
		*rx = node_rx;
    fd44:	f8c6 9000 	str.w	r9, [r6]
}
    fd48:	4628      	mov	r0, r5
    fd4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
    fd4e:	250c      	movs	r5, #12
}
    fd50:	4628      	mov	r0, r5
    fd52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		LL_ASSERT(link);
    fd56:	4a07      	ldr	r2, [pc, #28]	; (fd74 <ll_connect_disable+0x90>)
    fd58:	4907      	ldr	r1, [pc, #28]	; (fd78 <ll_connect_disable+0x94>)
    fd5a:	4808      	ldr	r0, [pc, #32]	; (fd7c <ll_connect_disable+0x98>)
    fd5c:	f44f 73ee 	mov.w	r3, #476	; 0x1dc
    fd60:	f005 ffee 	bl	15d40 <printk>
    fd64:	4040      	eors	r0, r0
    fd66:	f380 8811 	msr	BASEPRI, r0
    fd6a:	f04f 0003 	mov.w	r0, #3
    fd6e:	df02      	svc	2
    fd70:	e7d8      	b.n	fd24 <ll_connect_disable+0x40>
    fd72:	bf00      	nop
    fd74:	00019ebc 	.word	0x00019ebc
    fd78:	00019d44 	.word	0x00019d44
    fd7c:	000199cc 	.word	0x000199cc

0000fd80 <ll_chm_update>:
{
    fd80:	b570      	push	{r4, r5, r6, lr}
    fd82:	4606      	mov	r6, r0
	ull_chan_map_set(chm);
    fd84:	f000 fa9a 	bl	102bc <ull_chan_map_set>
		conn = ll_connected_get(handle);
    fd88:	2000      	movs	r0, #0
    fd8a:	f7fd fbf3 	bl	d574 <ll_connected_get>
		if (!conn || conn->lll.role) {
    fd8e:	4604      	mov	r4, r0
    fd90:	b1e8      	cbz	r0, fdce <ll_chm_update+0x4e>
    fd92:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
    fd96:	2b00      	cmp	r3, #0
    fd98:	db19      	blt.n	fdce <ll_chm_update+0x4e>
		ret = ull_conn_llcp_req(conn);
    fd9a:	f7ff ff01 	bl	fba0 <ull_conn_llcp_req>
		if (ret) {
    fd9e:	4605      	mov	r5, r0
    fda0:	b998      	cbnz	r0, fdca <ll_chm_update+0x4a>
		memcpy(conn->llcp.chan_map.chm, chm,
    fda2:	4631      	mov	r1, r6
    fda4:	2205      	movs	r2, #5
    fda6:	f104 00c1 	add.w	r0, r4, #193	; 0xc1
    fdaa:	f006 fe81 	bl	16ab0 <memcpy>
		conn->llcp.chan_map.initiate = 1U;
    fdae:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
		conn->llcp_req++;
    fdb2:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
		conn->llcp.chan_map.initiate = 1U;
    fdb6:	f042 0201 	orr.w	r2, r2, #1
		conn->llcp_req++;
    fdba:	3301      	adds	r3, #1
		conn->llcp_type = LLCP_CHAN_MAP;
    fdbc:	2102      	movs	r1, #2
		conn->llcp.chan_map.initiate = 1U;
    fdbe:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
		conn->llcp_req++;
    fdc2:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
		conn->llcp_type = LLCP_CHAN_MAP;
    fdc6:	f884 10bd 	strb.w	r1, [r4, #189]	; 0xbd
}
    fdca:	4628      	mov	r0, r5
    fdcc:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    fdce:	2500      	movs	r5, #0
}
    fdd0:	4628      	mov	r0, r5
    fdd2:	bd70      	pop	{r4, r5, r6, pc}

0000fdd4 <ll_enc_req_send>:
{
    fdd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fdd8:	4688      	mov	r8, r1
    fdda:	4616      	mov	r6, r2
    fddc:	4699      	mov	r9, r3
    fdde:	4607      	mov	r7, r0
	conn = ll_connected_get(handle);
    fde0:	f7fd fbc8 	bl	d574 <ll_connected_get>
	if (!conn) {
    fde4:	2800      	cmp	r0, #0
    fde6:	d063      	beq.n	feb0 <ll_enc_req_send+0xdc>
	if ((conn->llcp_enc.req != conn->llcp_enc.ack) ||
    fde8:	f890 213c 	ldrb.w	r2, [r0, #316]	; 0x13c
    fdec:	f890 313d 	ldrb.w	r3, [r0, #317]	; 0x13d
    fdf0:	429a      	cmp	r2, r3
    fdf2:	4604      	mov	r4, r0
    fdf4:	d13d      	bne.n	fe72 <ll_enc_req_send+0x9e>
    fdf6:	f890 20bb 	ldrb.w	r2, [r0, #187]	; 0xbb
    fdfa:	f890 30bc 	ldrb.w	r3, [r0, #188]	; 0xbc
    fdfe:	429a      	cmp	r2, r3
    fe00:	d003      	beq.n	fe0a <ll_enc_req_send+0x36>
	    ((conn->llcp_req != conn->llcp_ack) &&
    fe02:	f890 30bd 	ldrb.w	r3, [r0, #189]	; 0xbd
    fe06:	2b03      	cmp	r3, #3
    fe08:	d033      	beq.n	fe72 <ll_enc_req_send+0x9e>
	tx = ll_tx_mem_acquire();
    fe0a:	f7fd fbc5 	bl	d598 <ll_tx_mem_acquire>
	if (tx) {
    fe0e:	4605      	mov	r5, r0
    fe10:	b378      	cbz	r0, fe72 <ll_enc_req_send+0x9e>
		memcpy(&conn->llcp_enc.ltk[0], ltk, sizeof(conn->llcp_enc.ltk));
    fe12:	4649      	mov	r1, r9
    fe14:	2210      	movs	r2, #16
    fe16:	f204 1049 	addw	r0, r4, #329	; 0x149
    fe1a:	f006 fe49 	bl	16ab0 <memcpy>
		if (!conn->lll.enc_rx && !conn->lll.enc_tx) {
    fe1e:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
    fe22:	f013 0318 	ands.w	r3, r3, #24
    fe26:	d027      	beq.n	fe78 <ll_enc_req_send+0xa4>
		} else if (conn->lll.enc_rx && conn->lll.enc_tx) {
    fe28:	2b18      	cmp	r3, #24
    fe2a:	d11f      	bne.n	fe6c <ll_enc_req_send+0x98>
			memcpy(&conn->llcp_enc.rand[0], rand,
    fe2c:	4641      	mov	r1, r8
    fe2e:	2208      	movs	r2, #8
    fe30:	f204 1041 	addw	r0, r4, #321	; 0x141
    fe34:	f006 fe3c 	bl	16ab0 <memcpy>
			conn->llcp_enc.ediv[0] = ediv[0];
    fe38:	7833      	ldrb	r3, [r6, #0]
    fe3a:	f884 313f 	strb.w	r3, [r4, #319]	; 0x13f
			conn->llcp_enc.ediv[1] = ediv[1];
    fe3e:	7873      	ldrb	r3, [r6, #1]
    fe40:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
    fe44:	792b      	ldrb	r3, [r5, #4]
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
    fe46:	2101      	movs	r1, #1
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
    fe48:	f043 0303 	orr.w	r3, r3, #3
			pdu_data_tx->llctrl.opcode =
    fe4c:	220a      	movs	r2, #10
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
    fe4e:	712b      	strb	r3, [r5, #4]
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
    fe50:	7169      	strb	r1, [r5, #5]
			pdu_data_tx->llctrl.opcode =
    fe52:	71ea      	strb	r2, [r5, #7]
		if (ll_tx_mem_enqueue(handle, tx)) {
    fe54:	4638      	mov	r0, r7
    fe56:	4629      	mov	r1, r5
    fe58:	f7fd fbaa 	bl	d5b0 <ll_tx_mem_enqueue>
    fe5c:	b930      	cbnz	r0, fe6c <ll_enc_req_send+0x98>
		conn->llcp_enc.req++;
    fe5e:	f894 313c 	ldrb.w	r3, [r4, #316]	; 0x13c
    fe62:	3301      	adds	r3, #1
    fe64:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
}
    fe68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ll_tx_mem_release(tx);
    fe6c:	4628      	mov	r0, r5
    fe6e:	f7fd fb99 	bl	d5a4 <ll_tx_mem_release>
			return BT_HCI_ERR_CMD_DISALLOWED;
    fe72:	200c      	movs	r0, #12
}
    fe74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
    fe78:	792b      	ldrb	r3, [r5, #4]
			pdu_data_tx->llctrl.opcode =
    fe7a:	2203      	movs	r2, #3
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
    fe7c:	f043 0303 	orr.w	r3, r3, #3
			pdu_data_tx->llctrl.opcode =
    fe80:	71ea      	strb	r2, [r5, #7]
			pdu_data_tx->len =
    fe82:	2017      	movs	r0, #23
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
    fe84:	2208      	movs	r2, #8
    fe86:	4641      	mov	r1, r8
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
    fe88:	712b      	strb	r3, [r5, #4]
			pdu_data_tx->len =
    fe8a:	7168      	strb	r0, [r5, #5]
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
    fe8c:	18a8      	adds	r0, r5, r2
    fe8e:	f006 fe0f 	bl	16ab0 <memcpy>
			enc_req->ediv[0] = ediv[0];
    fe92:	7833      	ldrb	r3, [r6, #0]
    fe94:	742b      	strb	r3, [r5, #16]
			enc_req->ediv[1] = ediv[1];
    fe96:	7873      	ldrb	r3, [r6, #1]
    fe98:	746b      	strb	r3, [r5, #17]
			lll_csrand_get(enc_req->skdm, sizeof(enc_req->skdm));
    fe9a:	2108      	movs	r1, #8
    fe9c:	f105 0012 	add.w	r0, r5, #18
    fea0:	f001 fbdc 	bl	1165c <lll_csrand_get>
			lll_csrand_get(enc_req->ivm, sizeof(enc_req->ivm));
    fea4:	2104      	movs	r1, #4
    fea6:	f105 001a 	add.w	r0, r5, #26
    feaa:	f001 fbd7 	bl	1165c <lll_csrand_get>
    feae:	e7d1      	b.n	fe54 <ll_enc_req_send+0x80>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    feb0:	2002      	movs	r0, #2
}
    feb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    feb6:	bf00      	nop

0000feb8 <ull_master_cleanup>:
	struct ll_scan_set *scan =
    feb8:	6883      	ldr	r3, [r0, #8]
{
    feba:	b570      	push	{r4, r5, r6, lr}
	struct ll_scan_set *scan =
    febc:	681d      	ldr	r5, [r3, #0]
	conn_lll = scan->lll.conn;
    febe:	6a2c      	ldr	r4, [r5, #32]
	LL_ASSERT(conn_lll);
    fec0:	b31c      	cbz	r4, ff0a <ull_master_cleanup+0x52>
	LL_ASSERT(!conn_lll->link_tx_free);
    fec2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	scan->lll.conn = NULL;
    fec4:	2200      	movs	r2, #0
    fec6:	622a      	str	r2, [r5, #32]
	LL_ASSERT(!conn_lll->link_tx_free);
    fec8:	b163      	cbz	r3, fee4 <ull_master_cleanup+0x2c>
    feca:	4a1e      	ldr	r2, [pc, #120]	; (ff44 <ull_master_cleanup+0x8c>)
    fecc:	491e      	ldr	r1, [pc, #120]	; (ff48 <ull_master_cleanup+0x90>)
    fece:	481f      	ldr	r0, [pc, #124]	; (ff4c <ull_master_cleanup+0x94>)
    fed0:	f44f 731e 	mov.w	r3, #632	; 0x278
    fed4:	f005 ff34 	bl	15d40 <printk>
    fed8:	4040      	eors	r0, r0
    feda:	f380 8811 	msr	BASEPRI, r0
    fede:	f04f 0003 	mov.w	r0, #3
    fee2:	df02      	svc	2
	link = memq_deinit(&conn_lll->memq_tx.head,
    fee4:	f104 0130 	add.w	r1, r4, #48	; 0x30
    fee8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    feec:	f7f8 fb7a 	bl	85e4 <memq_deinit>
	LL_ASSERT(link);
    fef0:	4606      	mov	r6, r0
    fef2:	b1c0      	cbz	r0, ff26 <ull_master_cleanup+0x6e>
	ll_conn_release(conn);
    fef4:	6820      	ldr	r0, [r4, #0]
	conn_lll->link_tx_free = link;
    fef6:	63e6      	str	r6, [r4, #60]	; 0x3c
	ll_conn_release(conn);
    fef8:	f7fd fb26 	bl	d548 <ll_conn_release>
	scan->is_enabled = 0U;
    fefc:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
    ff00:	f36f 0300 	bfc	r3, #0, #1
    ff04:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
}
    ff08:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(conn_lll);
    ff0a:	4a0e      	ldr	r2, [pc, #56]	; (ff44 <ull_master_cleanup+0x8c>)
    ff0c:	4910      	ldr	r1, [pc, #64]	; (ff50 <ull_master_cleanup+0x98>)
    ff0e:	480f      	ldr	r0, [pc, #60]	; (ff4c <ull_master_cleanup+0x94>)
    ff10:	f240 2375 	movw	r3, #629	; 0x275
    ff14:	f005 ff14 	bl	15d40 <printk>
    ff18:	4040      	eors	r0, r0
    ff1a:	f380 8811 	msr	BASEPRI, r0
    ff1e:	f04f 0003 	mov.w	r0, #3
    ff22:	df02      	svc	2
    ff24:	e7cd      	b.n	fec2 <ull_master_cleanup+0xa>
	LL_ASSERT(link);
    ff26:	4a07      	ldr	r2, [pc, #28]	; (ff44 <ull_master_cleanup+0x8c>)
    ff28:	490a      	ldr	r1, [pc, #40]	; (ff54 <ull_master_cleanup+0x9c>)
    ff2a:	4808      	ldr	r0, [pc, #32]	; (ff4c <ull_master_cleanup+0x94>)
    ff2c:	f240 237b 	movw	r3, #635	; 0x27b
    ff30:	f005 ff06 	bl	15d40 <printk>
    ff34:	4040      	eors	r0, r0
    ff36:	f380 8811 	msr	BASEPRI, r0
    ff3a:	f04f 0003 	mov.w	r0, #3
    ff3e:	df02      	svc	2
    ff40:	e7d8      	b.n	fef4 <ull_master_cleanup+0x3c>
    ff42:	bf00      	nop
    ff44:	00019ebc 	.word	0x00019ebc
    ff48:	00019f20 	.word	0x00019f20
    ff4c:	000199cc 	.word	0x000199cc
    ff50:	00019f14 	.word	0x00019f14
    ff54:	00019d44 	.word	0x00019d44

0000ff58 <ticker_op_cb>:

static void ticker_op_cb(uint32_t status, void *param)
{
	*((uint32_t volatile *)param) = status;
    ff58:	6008      	str	r0, [r1, #0]
}
    ff5a:	4770      	bx	lr

0000ff5c <win_offset_calc.constprop.0>:
static void win_offset_calc(struct ll_conn *conn_curr, uint8_t is_select,
    ff5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ff60:	b093      	sub	sp, #76	; 0x4c
    ff62:	4604      	mov	r4, r0
    ff64:	9009      	str	r0, [sp, #36]	; 0x24
	if (conn_curr->lll.role) {
    ff66:	f990 0039 	ldrsb.w	r0, [r0, #57]	; 0x39
	ticks_slot_abs += conn_curr->evt.ticks_slot;
    ff6a:	68e4      	ldr	r4, [r4, #12]
    ff6c:	940d      	str	r4, [sp, #52]	; 0x34
	if (conn_curr->lll.role) {
    ff6e:	2800      	cmp	r0, #0
		ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_TIES_US);
    ff70:	bfb8      	it	lt
    ff72:	3414      	addlt	r4, #20
static void win_offset_calc(struct ll_conn *conn_curr, uint8_t is_select,
    ff74:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
    ff78:	9307      	str	r3, [sp, #28]
	ticker_id = ticker_id_prev = ticker_id_other = 0xff;
    ff7a:	f04f 02ff 	mov.w	r2, #255	; 0xff
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    ff7e:	f04f 0300 	mov.w	r3, #0
		ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_TIES_US);
    ff82:	bfb8      	it	lt
    ff84:	940d      	strlt	r4, [sp, #52]	; 0x34
static void win_offset_calc(struct ll_conn *conn_curr, uint8_t is_select,
    ff86:	e9dd 781c 	ldrd	r7, r8, [sp, #112]	; 0x70
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    ff8a:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
		LL_ASSERT(success);
    ff8e:	f8df b284 	ldr.w	fp, [pc, #644]	; 10214 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x215>
	ticker_id = ticker_id_prev = ticker_id_other = 0xff;
    ff92:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
    ff96:	4691      	mov	r9, r2
		ticks_anchor_prev = offset_index = offset = 0U;
    ff98:	461e      	mov	r6, r3
	ticker_id = ticker_id_prev = ticker_id_other = 0xff;
    ff9a:	9208      	str	r2, [sp, #32]
		ticks_anchor_prev = offset_index = offset = 0U;
    ff9c:	461c      	mov	r4, r3
    ff9e:	9306      	str	r3, [sp, #24]
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    ffa0:	461d      	mov	r5, r3
    ffa2:	9305      	str	r3, [sp, #20]
    ffa4:	e02a      	b.n	fffc <win_offset_calc.constprop.0+0xa0>
		if (ticker_id < TICKER_ID_CONN_BASE) {
    ffa6:	2b02      	cmp	r3, #2
    ffa8:	f000 8100 	beq.w	101ac <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1ad>
		if (ticker_id_other != 0xff) {
    ffac:	9b08      	ldr	r3, [sp, #32]
    ffae:	2bff      	cmp	r3, #255	; 0xff
    ffb0:	d15b      	bne.n	1006a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x6b>
		conn = ll_conn_get(ticker_id - TICKER_ID_CONN_BASE);
    ffb2:	2000      	movs	r0, #0
    ffb4:	f7fd fad6 	bl	d564 <ll_conn_get>
		if ((conn != conn_curr) && (is_select || !conn->lll.role)) {
    ffb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ffba:	4283      	cmp	r3, r0
    ffbc:	d04d      	beq.n	1005a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x5b>
    ffbe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ffc0:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
    ffc4:	783b      	ldrb	r3, [r7, #0]
    ffc6:	2a00      	cmp	r2, #0
    ffc8:	f040 80a3 	bne.w	10112 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x113>
    ffcc:	2900      	cmp	r1, #0
    ffce:	db13      	blt.n	fff8 <win_offset_calc.constprop.0+0x9c>
			ticks_slot_abs_curr += conn->evt.ticks_slot +
    ffd0:	68c1      	ldr	r1, [r0, #12]
				ticks_to_expire + ticks_prepare_reduced;
    ffd2:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
			uint32_t ticks_slot_margin = 0U;
    ffd6:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
			ticks_slot_abs_curr += conn->evt.ticks_slot +
    ffda:	f101 0228 	add.w	r2, r1, #40	; 0x28
    ffde:	920a      	str	r2, [sp, #40]	; 0x28
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
    ffe0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ffe2:	6811      	ldr	r1, [r2, #0]
    ffe4:	4551      	cmp	r1, sl
    ffe6:	f0c0 80a3 	bcc.w	10130 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x131>
			ticks_anchor_prev = ticks_anchor;
    ffea:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ffec:	9206      	str	r2, [sp, #24]
			ticker_id_prev = ticker_id;
    ffee:	f89d 903b 	ldrb.w	r9, [sp, #59]	; 0x3b
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    fff2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    fff4:	9205      	str	r2, [sp, #20]
			ticker_id_prev = ticker_id;
    fff6:	4655      	mov	r5, sl
	} while (offset_index < *offset_max);
    fff8:	429c      	cmp	r4, r3
    fffa:	d231      	bcs.n	10060 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x61>
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
    fffc:	ab11      	add	r3, sp, #68	; 0x44
    fffe:	9302      	str	r3, [sp, #8]
   10000:	4b7f      	ldr	r3, [pc, #508]	; (10200 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x201>)
   10002:	9301      	str	r3, [sp, #4]
   10004:	ab0f      	add	r3, sp, #60	; 0x3c
		ret_cb = TICKER_STATUS_BUSY;
   10006:	2102      	movs	r1, #2
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
   10008:	9300      	str	r3, [sp, #0]
   1000a:	f10d 023b 	add.w	r2, sp, #59	; 0x3b
   1000e:	ab10      	add	r3, sp, #64	; 0x40
   10010:	2000      	movs	r0, #0
		ret_cb = TICKER_STATUS_BUSY;
   10012:	9111      	str	r1, [sp, #68]	; 0x44
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
   10014:	f7f9 ff54 	bl	9ec0 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   10018:	2802      	cmp	r0, #2
   1001a:	d06f      	beq.n	100fc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xfd>
		success = (ret_cb == TICKER_STATUS_SUCCESS);
   1001c:	9b11      	ldr	r3, [sp, #68]	; 0x44
		LL_ASSERT(success);
   1001e:	bb43      	cbnz	r3, 10072 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x73>
		if (ticker_id == 0xff) {
   10020:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   10024:	2bff      	cmp	r3, #255	; 0xff
   10026:	d035      	beq.n	10094 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x95>
		if ((ticker_id_prev != 0xff) &&
   10028:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   1002c:	d012      	beq.n	10054 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x55>
   1002e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   10030:	9906      	ldr	r1, [sp, #24]
   10032:	428a      	cmp	r2, r1
   10034:	d00e      	beq.n	10054 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x55>
			LL_ASSERT(0);
   10036:	4973      	ldr	r1, [pc, #460]	; (10204 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x205>)
   10038:	4873      	ldr	r0, [pc, #460]	; (10208 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x209>)
   1003a:	f240 137b 	movw	r3, #379	; 0x17b
   1003e:	465a      	mov	r2, fp
   10040:	f005 fe7e 	bl	15d40 <printk>
   10044:	4040      	eors	r0, r0
   10046:	f380 8811 	msr	BASEPRI, r0
   1004a:	f04f 0003 	mov.w	r0, #3
   1004e:	df02      	svc	2
   10050:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
		if ((ticker_id < TICKER_ID_SCAN_BASE) ||
   10054:	1e9a      	subs	r2, r3, #2
   10056:	2a01      	cmp	r2, #1
   10058:	d9a5      	bls.n	ffa6 <win_offset_calc.constprop.0+0x4a>
   1005a:	783b      	ldrb	r3, [r7, #0]
	} while (offset_index < *offset_max);
   1005c:	429c      	cmp	r4, r3
   1005e:	d3cd      	bcc.n	fffc <win_offset_calc.constprop.0+0xa0>
	if (ticker_id == 0xff) {
   10060:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   10064:	2bff      	cmp	r3, #255	; 0xff
   10066:	f000 80c1 	beq.w	101ec <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1ed>
	*offset_max = offset_index;
   1006a:	703c      	strb	r4, [r7, #0]
}
   1006c:	b013      	add	sp, #76	; 0x4c
   1006e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LL_ASSERT(success);
   10072:	4966      	ldr	r1, [pc, #408]	; (1020c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x20d>)
   10074:	4864      	ldr	r0, [pc, #400]	; (10208 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x209>)
   10076:	f44f 73b9 	mov.w	r3, #370	; 0x172
   1007a:	465a      	mov	r2, fp
   1007c:	f005 fe60 	bl	15d40 <printk>
   10080:	4040      	eors	r0, r0
   10082:	f380 8811 	msr	BASEPRI, r0
   10086:	f04f 0003 	mov.w	r0, #3
   1008a:	df02      	svc	2
		if (ticker_id == 0xff) {
   1008c:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   10090:	2bff      	cmp	r3, #255	; 0xff
   10092:	d1c9      	bne.n	10028 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x29>
   10094:	f8dd a014 	ldr.w	sl, [sp, #20]
		if (ticks_to_expire_prev < *ticks_to_offset_next) {
   10098:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1009a:	681a      	ldr	r2, [r3, #0]
		while (offset_index < *offset_max) {
   1009c:	783b      	ldrb	r3, [r7, #0]
   1009e:	4295      	cmp	r5, r2
   100a0:	bf38      	it	cc
   100a2:	4615      	movcc	r5, r2
   100a4:	42a3      	cmp	r3, r4
   100a6:	d923      	bls.n	100f0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xf1>
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   100a8:	4859      	ldr	r0, [pc, #356]	; (10210 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x211>)
			if (offset >= conn_interval) {
   100aa:	9e07      	ldr	r6, [sp, #28]
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   100ac:	eb0a 0305 	add.w	r3, sl, r5
   100b0:	fba0 2303 	umull	r2, r3, r0, r3
   100b4:	f3c3 124f 	ubfx	r2, r3, #5, #16
			if (offset >= conn_interval) {
   100b8:	4296      	cmp	r6, r2
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   100ba:	ea4f 1353 	mov.w	r3, r3, lsr #5
			if (offset >= conn_interval) {
   100be:	d803      	bhi.n	100c8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc9>
   100c0:	e084      	b.n	101cc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1cd>
   100c2:	4296      	cmp	r6, r2
   100c4:	f240 8082 	bls.w	101cc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1cd>
			sys_put_le16(offset, (win_offset + (sizeof(uint16_t) *
   100c8:	eb08 0144 	add.w	r1, r8, r4, lsl #1
	dst[0] = val;
   100cc:	f808 3014 	strb.w	r3, [r8, r4, lsl #1]
	dst[1] = val >> 8;
   100d0:	0a12      	lsrs	r2, r2, #8
   100d2:	704a      	strb	r2, [r1, #1]
		while (offset_index < *offset_max) {
   100d4:	7839      	ldrb	r1, [r7, #0]
			offset_index++;
   100d6:	3401      	adds	r4, #1
			ticks_to_expire_prev += HAL_TICKER_US_TO_TICKS(
   100d8:	3528      	adds	r5, #40	; 0x28
			offset_index++;
   100da:	b2e4      	uxtb	r4, r4
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   100dc:	eb0a 0305 	add.w	r3, sl, r5
   100e0:	fba0 2303 	umull	r2, r3, r0, r3
		while (offset_index < *offset_max) {
   100e4:	42a1      	cmp	r1, r4
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   100e6:	f3c3 124f 	ubfx	r2, r3, #5, #16
   100ea:	ea4f 1353 	mov.w	r3, r3, lsr #5
		while (offset_index < *offset_max) {
   100ee:	d8e8      	bhi.n	100c2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc3>
		*ticks_to_offset_next = ticks_to_expire_prev;
   100f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   100f2:	601d      	str	r5, [r3, #0]
	*offset_max = offset_index;
   100f4:	703c      	strb	r4, [r7, #0]
}
   100f6:	b013      	add	sp, #76	; 0x4c
   100f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (ret_cb == TICKER_STATUS_BUSY) {
   100fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   100fe:	2b02      	cmp	r3, #2
   10100:	d18c      	bne.n	1001c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1d>
				ticker_job_sched(TICKER_INSTANCE_ID_CTLR,
   10102:	2102      	movs	r1, #2
   10104:	2000      	movs	r0, #0
   10106:	f7f9 ff21 	bl	9f4c <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   1010a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1010c:	2b02      	cmp	r3, #2
   1010e:	d0f8      	beq.n	10102 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x103>
   10110:	e784      	b.n	1001c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1d>
			if (conn->lll.role) {
   10112:	2900      	cmp	r1, #0
			ticks_slot_abs_curr += conn->evt.ticks_slot +
   10114:	68c0      	ldr	r0, [r0, #12]
				ticks_to_expire + ticks_prepare_reduced;
   10116:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
			if (conn->lll.role) {
   1011a:	da4a      	bge.n	101b2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1b3>
				ticks_slot_abs_curr += ticks_slot_margin;
   1011c:	f100 023c 	add.w	r2, r0, #60	; 0x3c
   10120:	920a      	str	r2, [sp, #40]	; 0x28
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   10122:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10124:	6811      	ldr	r1, [r2, #0]
   10126:	4551      	cmp	r1, sl
				ticks_slot_margin =
   10128:	f04f 0914 	mov.w	r9, #20
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   1012c:	f4bf af5d 	bcs.w	ffea <win_offset_calc.constprop.0+0x8e>
				if (ticks_to_expire_prev <
   10130:	428d      	cmp	r5, r1
   10132:	bf38      	it	cc
   10134:	460d      	movcc	r5, r1
				while ((offset_index < *offset_max) &&
   10136:	429c      	cmp	r4, r3
   10138:	d231      	bcs.n	1019e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x19f>
   1013a:	9b05      	ldr	r3, [sp, #20]
   1013c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1013e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   10142:	4413      	add	r3, r2
   10144:	4499      	add	r9, r3
   10146:	46b0      	mov	r8, r6
   10148:	462e      	mov	r6, r5
   1014a:	464d      	mov	r5, r9
   1014c:	f8dd 9074 	ldr.w	r9, [sp, #116]	; 0x74
   10150:	e011      	b.n	10176 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x177>
					if (offset >= conn_interval) {
   10152:	9a07      	ldr	r2, [sp, #28]
					offset = (ticks_to_expire_prev +
   10154:	f3c3 184f 	ubfx	r8, r3, #5, #16
					if (offset >= conn_interval) {
   10158:	4590      	cmp	r8, r2
   1015a:	ea4f 2318 	mov.w	r3, r8, lsr #8
					ticks_to_expire_prev +=
   1015e:	f106 0628 	add.w	r6, r6, #40	; 0x28
					if (offset >= conn_interval) {
   10162:	d237      	bcs.n	101d4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1d5>
	dst[0] = val;
   10164:	f809 0014 	strb.w	r0, [r9, r4, lsl #1]
	dst[1] = val >> 8;
   10168:	f88c 3001 	strb.w	r3, [ip, #1]
				while ((offset_index < *offset_max) &&
   1016c:	783b      	ldrb	r3, [r7, #0]
					offset_index++;
   1016e:	fa5f f48e 	uxtb.w	r4, lr
				while ((offset_index < *offset_max) &&
   10172:	42a3      	cmp	r3, r4
   10174:	d923      	bls.n	101be <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1bf>
				       (ticker_ticks_diff_get(
   10176:	4631      	mov	r1, r6
   10178:	4650      	mov	r0, sl
   1017a:	f7f9 ff01 	bl	9f80 <ticker_ticks_diff_get>
						  ticks_slot_abs_prev) /
   1017e:	9b05      	ldr	r3, [sp, #20]
   10180:	4a23      	ldr	r2, [pc, #140]	; (10210 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x211>)
   10182:	4433      	add	r3, r6
   10184:	fba2 2303 	umull	r2, r3, r2, r3
				while ((offset_index < *offset_max) &&
   10188:	42a8      	cmp	r0, r5
					sys_put_le16(offset,
   1018a:	eb09 0c44 	add.w	ip, r9, r4, lsl #1
					offset_index++;
   1018e:	f104 0e01 	add.w	lr, r4, #1
						  ticks_slot_abs_prev) /
   10192:	ea4f 1053 	mov.w	r0, r3, lsr #5
				while ((offset_index < *offset_max) &&
   10196:	d2dc      	bcs.n	10152 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x153>
   10198:	4635      	mov	r5, r6
   1019a:	4646      	mov	r6, r8
   1019c:	46c8      	mov	r8, r9
				*ticks_to_offset_next = ticks_to_expire_prev;
   1019e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   101a0:	601d      	str	r5, [r3, #0]
				if (offset >= conn_interval) {
   101a2:	9b07      	ldr	r3, [sp, #28]
   101a4:	42b3      	cmp	r3, r6
   101a6:	d927      	bls.n	101f8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1f9>
   101a8:	783b      	ldrb	r3, [r7, #0]
   101aa:	e71e      	b.n	ffea <win_offset_calc.constprop.0+0x8e>
			ticker_id_other = ticker_id;
   101ac:	9308      	str	r3, [sp, #32]
   101ae:	783b      	ldrb	r3, [r7, #0]
   101b0:	e722      	b.n	fff8 <win_offset_calc.constprop.0+0x9c>
			ticks_slot_abs_curr += conn->evt.ticks_slot +
   101b2:	f100 0228 	add.w	r2, r0, #40	; 0x28
   101b6:	920a      	str	r2, [sp, #40]	; 0x28
			uint32_t ticks_slot_margin = 0U;
   101b8:	f04f 0900 	mov.w	r9, #0
   101bc:	e710      	b.n	ffe0 <win_offset_calc.constprop.0+0x84>
				*ticks_to_offset_next = ticks_to_expire_prev;
   101be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   101c0:	4635      	mov	r5, r6
   101c2:	601d      	str	r5, [r3, #0]
   101c4:	4646      	mov	r6, r8
   101c6:	783b      	ldrb	r3, [r7, #0]
   101c8:	46c8      	mov	r8, r9
				if (offset >= conn_interval) {
   101ca:	e70e      	b.n	ffea <win_offset_calc.constprop.0+0x8e>
		*ticks_to_offset_next = ticks_to_expire_prev;
   101cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
				ticks_to_expire_prev = 0U;
   101ce:	2500      	movs	r5, #0
		*ticks_to_offset_next = ticks_to_expire_prev;
   101d0:	601d      	str	r5, [r3, #0]
   101d2:	e78f      	b.n	100f4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xf5>
				*ticks_to_offset_next = ticks_to_expire_prev;
   101d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   101d6:	f8dd a014 	ldr.w	sl, [sp, #20]
   101da:	2500      	movs	r5, #0
   101dc:	46c8      	mov	r8, r9
   101de:	601d      	str	r5, [r3, #0]
	if (ticker_id == 0xff) {
   101e0:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   101e4:	2bff      	cmp	r3, #255	; 0xff
   101e6:	f47f af40 	bne.w	1006a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x6b>
   101ea:	e755      	b.n	10098 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x99>
		if (ticks_to_expire_prev < *ticks_to_offset_next) {
   101ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   101ee:	681b      	ldr	r3, [r3, #0]
   101f0:	429d      	cmp	r5, r3
   101f2:	bf38      	it	cc
   101f4:	461d      	movcc	r5, r3
		while (offset_index < *offset_max) {
   101f6:	e77b      	b.n	100f0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xf1>
   101f8:	f8dd a014 	ldr.w	sl, [sp, #20]
   101fc:	e7f0      	b.n	101e0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1e1>
   101fe:	bf00      	nop
   10200:	0000ff59 	.word	0x0000ff59
   10204:	00019a2c 	.word	0x00019a2c
   10208:	000199cc 	.word	0x000199cc
   1020c:	00019f7c 	.word	0x00019f7c
   10210:	cccccccd 	.word	0xcccccccd
   10214:	00019f38 	.word	0x00019f38

00010218 <ull_sched_mfy_after_mstr_offset_get>:
	struct lll_scan *lll = p->param;
   10218:	68c3      	ldr	r3, [r0, #12]
	after_mstr_offset_get(lll->conn->interval,
   1021a:	6802      	ldr	r2, [r0, #0]
	struct evt_hdr *conn_evt = HDR_LLL2EVT(lll->conn);
   1021c:	6859      	ldr	r1, [r3, #4]
	after_mstr_offset_get(lll->conn->interval,
   1021e:	6858      	ldr	r0, [r3, #4]
			      (ticks_slot_overhead + conn_evt->ticks_slot),
   10220:	6809      	ldr	r1, [r1, #0]
	after_mstr_offset_get(lll->conn->interval,
   10222:	89c0      	ldrh	r0, [r0, #14]
   10224:	68c9      	ldr	r1, [r1, #12]
   10226:	3310      	adds	r3, #16
   10228:	f7f2 bc7a 	b.w	2b20 <after_mstr_offset_get>

0001022c <ull_sched_mfy_win_offset_use>:
{
   1022c:	b510      	push	{r4, lr}
   1022e:	4604      	mov	r4, r0
	after_mstr_offset_get(conn->lll.interval,
   10230:	f8d0 20c8 	ldr.w	r2, [r0, #200]	; 0xc8
   10234:	68c1      	ldr	r1, [r0, #12]
   10236:	f100 03f0 	add.w	r3, r0, #240	; 0xf0
   1023a:	8d40      	ldrh	r0, [r0, #42]	; 0x2a
   1023c:	f7f2 fc70 	bl	2b20 <after_mstr_offset_get>
	win_offset = conn->llcp_cu.win_offset_us / CONN_INT_UNIT_US;
   10240:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   10244:	4908      	ldr	r1, [pc, #32]	; (10268 <ull_sched_mfy_win_offset_use+0x3c>)
	sys_put_le16(win_offset, (void *)conn->llcp.conn_upd.pdu_win_offset);
   10246:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
	win_offset = conn->llcp_cu.win_offset_us / CONN_INT_UNIT_US;
   1024a:	fba1 1303 	umull	r1, r3, r1, r3
   1024e:	0a9b      	lsrs	r3, r3, #10
   10250:	f3c3 2107 	ubfx	r1, r3, #8, #8
   10254:	7051      	strb	r1, [r2, #1]
	dst[0] = val;
   10256:	7013      	strb	r3, [r2, #0]
	conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_RDY;
   10258:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   1025c:	2204      	movs	r2, #4
   1025e:	f362 0302 	bfi	r3, r2, #0, #3
   10262:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
}
   10266:	bd10      	pop	{r4, pc}
   10268:	d1b71759 	.word	0xd1b71759

0001026c <ull_sched_mfy_free_win_offset_calc>:
{
   1026c:	b530      	push	{r4, r5, lr}
   1026e:	b085      	sub	sp, #20
	win_offset_calc(conn, 0, ticks_to_offset_next,
   10270:	f8d0 3178 	ldr.w	r3, [r0, #376]	; 0x178
   10274:	9301      	str	r3, [sp, #4]
{
   10276:	4604      	mov	r4, r0
	win_offset_calc(conn, 0, ticks_to_offset_next,
   10278:	f10d 020b 	add.w	r2, sp, #11
   1027c:	f8b0 3162 	ldrh.w	r3, [r0, #354]	; 0x162
   10280:	9200      	str	r2, [sp, #0]
	uint32_t ticks_to_offset_default = 0U;
   10282:	2100      	movs	r1, #0
	uint8_t offset_max = 6U;
   10284:	2506      	movs	r5, #6
	win_offset_calc(conn, 0, ticks_to_offset_next,
   10286:	aa03      	add	r2, sp, #12
	uint32_t ticks_to_offset_default = 0U;
   10288:	9103      	str	r1, [sp, #12]
	uint8_t offset_max = 6U;
   1028a:	f88d 500b 	strb.w	r5, [sp, #11]
	win_offset_calc(conn, 0, ticks_to_offset_next,
   1028e:	f7ff fe65 	bl	ff5c <win_offset_calc.constprop.0>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_OFFS_RDY;
   10292:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
   10296:	f043 0307 	orr.w	r3, r3, #7
   1029a:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
}
   1029e:	b005      	add	sp, #20
   102a0:	bd30      	pop	{r4, r5, pc}
   102a2:	bf00      	nop

000102a4 <ull_chan_map_get>:

	return 0;
}

uint8_t ull_chan_map_get(uint8_t *const chan_map)
{
   102a4:	b508      	push	{r3, lr}
	memcpy(chan_map, map, sizeof(map));
   102a6:	4903      	ldr	r1, [pc, #12]	; (102b4 <ull_chan_map_get+0x10>)
   102a8:	2205      	movs	r2, #5
   102aa:	f006 fc01 	bl	16ab0 <memcpy>

	return count;
   102ae:	4b02      	ldr	r3, [pc, #8]	; (102b8 <ull_chan_map_get+0x14>)
}
   102b0:	7818      	ldrb	r0, [r3, #0]
   102b2:	bd08      	pop	{r3, pc}
   102b4:	2000047c 	.word	0x2000047c
   102b8:	20000570 	.word	0x20000570

000102bc <ull_chan_map_set>:

void ull_chan_map_set(uint8_t const *const chan_map)
{
   102bc:	b510      	push	{r4, lr}
	memcpy(map, chan_map, sizeof(map));
   102be:	4c06      	ldr	r4, [pc, #24]	; (102d8 <ull_chan_map_set+0x1c>)
{
   102c0:	4601      	mov	r1, r0
	memcpy(map, chan_map, sizeof(map));
   102c2:	2205      	movs	r2, #5
   102c4:	4620      	mov	r0, r4
   102c6:	f006 fbf3 	bl	16ab0 <memcpy>
	count = util_ones_count_get(map, sizeof(map));
   102ca:	4620      	mov	r0, r4
   102cc:	2105      	movs	r1, #5
   102ce:	f7f8 fafd 	bl	88cc <util_ones_count_get>
   102d2:	4b02      	ldr	r3, [pc, #8]	; (102dc <ull_chan_map_set+0x20>)
   102d4:	7018      	strb	r0, [r3, #0]
}
   102d6:	bd10      	pop	{r4, pc}
   102d8:	2000047c 	.word	0x2000047c
   102dc:	20000570 	.word	0x20000570

000102e0 <lll_chan_sel_1>:
#endif /* CONFIG_BT_CTLR_CHAN_SEL_2 */

#if defined(CONFIG_BT_CONN)
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   102e0:	b470      	push	{r4, r5, r6}
   102e2:	4605      	mov	r5, r0
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   102e4:	7800      	ldrb	r0, [r0, #0]
   102e6:	4c1b      	ldr	r4, [pc, #108]	; (10354 <lll_chan_sel_1+0x74>)
   102e8:	fb02 1101 	mla	r1, r2, r1, r1
   102ec:	180a      	adds	r2, r1, r0
   102ee:	fb84 0102 	smull	r0, r1, r4, r2
   102f2:	4411      	add	r1, r2
   102f4:	1149      	asrs	r1, r1, #5
   102f6:	eb01 04c1 	add.w	r4, r1, r1, lsl #3
   102fa:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   102fe:	1a51      	subs	r1, r2, r1
   10300:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   10302:	08c2      	lsrs	r2, r0, #3
	*chan_use = chan_next;
   10304:	7028      	strb	r0, [r5, #0]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   10306:	5c9c      	ldrb	r4, [r3, r2]
{
   10308:	f89d 500c 	ldrb.w	r5, [sp, #12]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   1030c:	f001 0107 	and.w	r1, r1, #7
   10310:	410c      	asrs	r4, r1
   10312:	f014 0401 	ands.w	r4, r4, #1
   10316:	d11b      	bne.n	10350 <lll_chan_sel_1+0x70>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   10318:	fbb0 f2f5 	udiv	r2, r0, r5
   1031c:	fb05 0212 	mls	r2, r5, r2, r0
   10320:	b2d2      	uxtb	r2, r2
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   10322:	1e5d      	subs	r5, r3, #1
   10324:	1d1e      	adds	r6, r3, #4
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   10326:	f104 0108 	add.w	r1, r4, #8
   1032a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
		bit_count = 8U;
		while (bit_count--) {
   1032e:	4620      	mov	r0, r4
   10330:	b2cc      	uxtb	r4, r1
			if (bite & 0x01) {
   10332:	f013 0f01 	tst.w	r3, #1
				if (chan_index == 0U) {
					break;
				}
				chan_index--;
			}
			chan_next++;
   10336:	f100 0101 	add.w	r1, r0, #1
			bite >>= 1;
   1033a:	ea4f 0353 	mov.w	r3, r3, lsr #1
			if (bite & 0x01) {
   1033e:	d002      	beq.n	10346 <lll_chan_sel_1+0x66>
				if (chan_index == 0U) {
   10340:	b132      	cbz	r2, 10350 <lll_chan_sel_1+0x70>
				chan_index--;
   10342:	3a01      	subs	r2, #1
   10344:	b2d2      	uxtb	r2, r2
			chan_next++;
   10346:	b2c8      	uxtb	r0, r1
		while (bit_count--) {
   10348:	4284      	cmp	r4, r0
   1034a:	d1f2      	bne.n	10332 <lll_chan_sel_1+0x52>
	while (byte_count--) {
   1034c:	42b5      	cmp	r5, r6
   1034e:	d1ea      	bne.n	10326 <lll_chan_sel_1+0x46>
}
   10350:	bc70      	pop	{r4, r5, r6}
   10352:	4770      	bx	lr
   10354:	dd67c8a7 	.word	0xdd67c8a7

00010358 <lll_chan_id>:
{
   10358:	b410      	push	{r4}
	uint16_t aa_ls = ((uint16_t)access_addr[1] << 8) | access_addr[0];
   1035a:	7844      	ldrb	r4, [r0, #1]
	uint16_t aa_ms = ((uint16_t)access_addr[3] << 8) | access_addr[2];
   1035c:	78c1      	ldrb	r1, [r0, #3]
   1035e:	7883      	ldrb	r3, [r0, #2]
	uint16_t aa_ls = ((uint16_t)access_addr[1] << 8) | access_addr[0];
   10360:	7802      	ldrb	r2, [r0, #0]
	uint16_t aa_ms = ((uint16_t)access_addr[3] << 8) | access_addr[2];
   10362:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	uint16_t aa_ls = ((uint16_t)access_addr[1] << 8) | access_addr[0];
   10366:	ea42 2004 	orr.w	r0, r2, r4, lsl #8
}
   1036a:	4058      	eors	r0, r3
   1036c:	bc10      	pop	{r4}
   1036e:	4770      	bx	lr

00010370 <lll_chan_sel_2>:
{
   10370:	b5f0      	push	{r4, r5, r6, r7, lr}
/* Attribution:
 * http://graphics.stanford.edu/%7Eseander/bithacks.html#ReverseByteWith32Bits
 */
static uint8_t chan_rev_8(uint8_t b)
{
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   10372:	4f2f      	ldr	r7, [pc, #188]	; (10430 <lll_chan_sel_2+0xc0>)
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   10374:	4e2f      	ldr	r6, [pc, #188]	; (10434 <lll_chan_sel_2+0xc4>)
static uint16_t chan_prn(uint16_t counter, uint16_t chan_id)
{
	uint8_t iterate;
	uint16_t prn_e;

	prn_e = counter ^ chan_id;
   10376:	ea80 0501 	eor.w	r5, r0, r1
   1037a:	2403      	movs	r4, #3
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   1037c:	0a28      	lsrs	r0, r5, #8
   1037e:	b2ed      	uxtb	r5, r5
   10380:	eb00 2080 	add.w	r0, r0, r0, lsl #10
   10384:	eb05 2585 	add.w	r5, r5, r5, lsl #10
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   10388:	ea06 1e40 	and.w	lr, r6, r0, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   1038c:	ea07 0c40 	and.w	ip, r7, r0, lsl #1
   10390:	ea07 0045 	and.w	r0, r7, r5, lsl #1
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   10394:	ea06 1545 	and.w	r5, r6, r5, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   10398:	ea4c 0c0e 	orr.w	ip, ip, lr
   1039c:	4328      	orrs	r0, r5
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   1039e:	eb00 2500 	add.w	r5, r0, r0, lsl #8
   103a2:	eb0c 2e0c 	add.w	lr, ip, ip, lsl #8
   103a6:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   103aa:	eb0c 2c0e 	add.w	ip, ip, lr, lsl #8
   103ae:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   103b2:	f3c0 4007 	ubfx	r0, r0, #16, #8
   103b6:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   103ba:	eb00 1000 	add.w	r0, r0, r0, lsl #4
   103be:	3c01      	subs	r4, #1
   103c0:	4408      	add	r0, r1

	for (iterate = 0U; iterate < 3; iterate++) {
   103c2:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   103c6:	b285      	uxth	r5, r0
	for (iterate = 0U; iterate < 3; iterate++) {
   103c8:	d1d8      	bne.n	1037c <lll_chan_sel_2+0xc>
	chan_next = prn_e % 37;
   103ca:	481b      	ldr	r0, [pc, #108]	; (10438 <lll_chan_sel_2+0xc8>)
		prn_e = chan_perm(prn_e);
		prn_e = chan_mam(prn_e, chan_id);
	}

	prn_e ^= chan_id;
   103cc:	4069      	eors	r1, r5
	chan_next = prn_e % 37;
   103ce:	fba0 5001 	umull	r5, r0, r0, r1
   103d2:	1a0d      	subs	r5, r1, r0
   103d4:	eb00 0055 	add.w	r0, r0, r5, lsr #1
   103d8:	0940      	lsrs	r0, r0, #5
   103da:	eb00 05c0 	add.w	r5, r0, r0, lsl #3
   103de:	eb00 0085 	add.w	r0, r0, r5, lsl #2
   103e2:	1a08      	subs	r0, r1, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   103e4:	f3c0 05c4 	ubfx	r5, r0, #3, #5
   103e8:	f000 0607 	and.w	r6, r0, #7
   103ec:	5d55      	ldrb	r5, [r2, r5]
   103ee:	4135      	asrs	r5, r6
   103f0:	07ed      	lsls	r5, r5, #31
	chan_next = prn_e % 37;
   103f2:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   103f4:	d41a      	bmi.n	1042c <lll_chan_sel_2+0xbc>
		chan_index = ((uint32_t)chan_count * prn_e) >> 16;
   103f6:	fb01 f303 	mul.w	r3, r1, r3
   103fa:	1e56      	subs	r6, r2, #1
   103fc:	f3c3 4307 	ubfx	r3, r3, #16, #8
	while (byte_count--) {
   10400:	3204      	adds	r2, #4
		bite = *chan_map;
   10402:	f104 0508 	add.w	r5, r4, #8
   10406:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		while (bit_count--) {
   1040a:	4620      	mov	r0, r4
   1040c:	b2ec      	uxtb	r4, r5
			if (bite & 0x01) {
   1040e:	f011 0f01 	tst.w	r1, #1
			chan_next++;
   10412:	f100 0501 	add.w	r5, r0, #1
			bite >>= 1;
   10416:	ea4f 0151 	mov.w	r1, r1, lsr #1
			if (bite & 0x01) {
   1041a:	d002      	beq.n	10422 <lll_chan_sel_2+0xb2>
				if (chan_index == 0U) {
   1041c:	b133      	cbz	r3, 1042c <lll_chan_sel_2+0xbc>
				chan_index--;
   1041e:	3b01      	subs	r3, #1
   10420:	b2db      	uxtb	r3, r3
			chan_next++;
   10422:	b2e8      	uxtb	r0, r5
		while (bit_count--) {
   10424:	42a0      	cmp	r0, r4
   10426:	d1f2      	bne.n	1040e <lll_chan_sel_2+0x9e>
	while (byte_count--) {
   10428:	42b2      	cmp	r2, r6
   1042a:	d1ea      	bne.n	10402 <lll_chan_sel_2+0x92>
}
   1042c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1042e:	bf00      	nop
   10430:	00022110 	.word	0x00022110
   10434:	00088440 	.word	0x00088440
   10438:	bacf914d 	.word	0xbacf914d

0001043c <wl_find>:
		wl[i].taken = 0U;
	}
}

static uint8_t wl_find(uint8_t addr_type, uint8_t *addr, uint8_t *free)
{
   1043c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10440:	4688      	mov	r8, r1
	int i;

	if (free) {
   10442:	4615      	mov	r5, r2
   10444:	b10a      	cbz	r2, 1044a <wl_find+0xe>
		*free = FILTER_IDX_NONE;
   10446:	23ff      	movs	r3, #255	; 0xff
   10448:	7013      	strb	r3, [r2, #0]
   1044a:	4e17      	ldr	r6, [pc, #92]	; (104a8 <wl_find+0x6c>)
	}

	for (i = 0; i < WL_SIZE; i++) {
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   1044c:	f000 0701 	and.w	r7, r0, #1
   10450:	f106 0902 	add.w	r9, r6, #2
{
   10454:	2400      	movs	r4, #0
   10456:	e004      	b.n	10462 <wl_find+0x26>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   10458:	42ba      	cmp	r2, r7
   1045a:	d014      	beq.n	10486 <wl_find+0x4a>
	for (i = 0; i < WL_SIZE; i++) {
   1045c:	3401      	adds	r4, #1
   1045e:	2c08      	cmp	r4, #8
   10460:	d00e      	beq.n	10480 <wl_find+0x44>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   10462:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   10466:	07d9      	lsls	r1, r3, #31
   10468:	f3c3 0240 	ubfx	r2, r3, #1, #1
   1046c:	d4f4      	bmi.n	10458 <wl_find+0x1c>
			return i;
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   1046e:	2d00      	cmp	r5, #0
   10470:	d0f4      	beq.n	1045c <wl_find+0x20>
   10472:	782b      	ldrb	r3, [r5, #0]
   10474:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   10476:	bf08      	it	eq
   10478:	702c      	strbeq	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
   1047a:	3401      	adds	r4, #1
   1047c:	2c08      	cmp	r4, #8
   1047e:	d1f0      	bne.n	10462 <wl_find+0x26>
		}
	}

	return FILTER_IDX_NONE;
   10480:	20ff      	movs	r0, #255	; 0xff
}
   10482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   10486:	2206      	movs	r2, #6
   10488:	4641      	mov	r1, r8
   1048a:	eb09 00c4 	add.w	r0, r9, r4, lsl #3
   1048e:	f006 faff 	bl	16a90 <memcmp>
   10492:	b130      	cbz	r0, 104a2 <wl_find+0x66>
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   10494:	2d00      	cmp	r5, #0
   10496:	d0e1      	beq.n	1045c <wl_find+0x20>
   10498:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   1049c:	07db      	lsls	r3, r3, #31
   1049e:	d4dd      	bmi.n	1045c <wl_find+0x20>
   104a0:	e7e7      	b.n	10472 <wl_find+0x36>
			return i;
   104a2:	b2e0      	uxtb	r0, r4
   104a4:	e7ed      	b.n	10482 <wl_find+0x46>
   104a6:	bf00      	nop
   104a8:	20001dd8 	.word	0x20001dd8

000104ac <wl_update>:

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
}

static void wl_update(void)
{
   104ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   104b0:	4f21      	ldr	r7, [pc, #132]	; (10538 <wl_update+0x8c>)
   104b2:	4d22      	ldr	r5, [pc, #136]	; (1053c <wl_update+0x90>)
			continue;
		}

		j = wl[i].rl_idx;

		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   104b4:	f8df 9088 	ldr.w	r9, [pc, #136]	; 10540 <wl_update+0x94>
   104b8:	f8df a088 	ldr.w	sl, [pc, #136]	; 10544 <wl_update+0x98>
#endif /* !CONFIG_BT_CTLR_PRIVACY */

static void filter_insert(struct lll_filter *filter, int index, uint8_t addr_type,
			   uint8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
   104bc:	f1a7 0802 	sub.w	r8, r7, #2
   104c0:	f1a5 0b02 	sub.w	fp, r5, #2
{
   104c4:	2400      	movs	r4, #0
		if (!wl[i].taken) {
   104c6:	f81b 3034 	ldrb.w	r3, [fp, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   104ca:	2601      	movs	r6, #1
		if (!wl[i].taken) {
   104cc:	f013 0f01 	tst.w	r3, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   104d0:	4638      	mov	r0, r7
	filter->enable_bitmask |= BIT(index);
   104d2:	fa06 f604 	lsl.w	r6, r6, r4
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   104d6:	4629      	mov	r1, r5
   104d8:	f107 0706 	add.w	r7, r7, #6
   104dc:	f04f 0206 	mov.w	r2, #6
		if (!wl[i].taken) {
   104e0:	d022      	beq.n	10528 <wl_update+0x7c>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   104e2:	f899 3000 	ldrb.w	r3, [r9]
   104e6:	b163      	cbz	r3, 10502 <wl_update+0x56>
		j = wl[i].rl_idx;
   104e8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   104ec:	2b07      	cmp	r3, #7
   104ee:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   104f2:	d806      	bhi.n	10502 <wl_update+0x56>
   104f4:	f81a 303c 	ldrb.w	r3, [sl, ip, lsl #3]
   104f8:	f013 0f04 	tst.w	r3, #4
   104fc:	d001      	beq.n	10502 <wl_update+0x56>
   104fe:	06db      	lsls	r3, r3, #27
   10500:	d512      	bpl.n	10528 <wl_update+0x7c>
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   10502:	f81b 3034 	ldrb.w	r3, [fp, r4, lsl #3]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   10506:	f898 e001 	ldrb.w	lr, [r8, #1]
	filter->enable_bitmask |= BIT(index);
   1050a:	f898 c000 	ldrb.w	ip, [r8]
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   1050e:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   10512:	40a3      	lsls	r3, r4
   10514:	ea4e 0303 	orr.w	r3, lr, r3
	filter->enable_bitmask |= BIT(index);
   10518:	ea4c 0606 	orr.w	r6, ip, r6
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1051c:	f888 3001 	strb.w	r3, [r8, #1]
	filter->enable_bitmask |= BIT(index);
   10520:	f888 6000 	strb.w	r6, [r8]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   10524:	f006 fac4 	bl	16ab0 <memcpy>
	for (i = 0U; i < WL_SIZE; i++) {
   10528:	3401      	adds	r4, #1
   1052a:	2c08      	cmp	r4, #8
   1052c:	f105 0508 	add.w	r5, r5, #8
   10530:	d1c9      	bne.n	104c6 <wl_update+0x1a>
}
   10532:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10536:	bf00      	nop
   10538:	20001e1a 	.word	0x20001e1a
   1053c:	20001dda 	.word	0x20001dda
   10540:	2000224f 	.word	0x2000224f
   10544:	20001c60 	.word	0x20001c60

00010548 <rl_update>:
{
   10548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1054c:	f8df 8060 	ldr.w	r8, [pc, #96]	; 105b0 <rl_update+0x68>
	filter->enable_bitmask |= BIT(index);
   10550:	4d16      	ldr	r5, [pc, #88]	; (105ac <rl_update+0x64>)
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   10552:	f108 0701 	add.w	r7, r8, #1
   10556:	1cae      	adds	r6, r5, #2
{
   10558:	2400      	movs	r4, #0
   1055a:	e002      	b.n	10562 <rl_update+0x1a>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1055c:	3401      	adds	r4, #1
   1055e:	2c08      	cmp	r4, #8
   10560:	d021      	beq.n	105a6 <rl_update+0x5e>
		if (rl[i].taken) {
   10562:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   10566:	00d9      	lsls	r1, r3, #3
   10568:	f818 3033 	ldrb.w	r3, [r8, r3, lsl #3]
   1056c:	07da      	lsls	r2, r3, #31
   1056e:	d5f5      	bpl.n	1055c <rl_update+0x14>
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   10570:	786a      	ldrb	r2, [r5, #1]
	filter->enable_bitmask |= BIT(index);
   10572:	f895 c000 	ldrb.w	ip, [r5]
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   10576:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   1057a:	f04f 0e01 	mov.w	lr, #1
   1057e:	fa0e fe04 	lsl.w	lr, lr, r4
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   10582:	40a3      	lsls	r3, r4
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   10584:	eb04 0044 	add.w	r0, r4, r4, lsl #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   10588:	4313      	orrs	r3, r2
	filter->enable_bitmask |= BIT(index);
   1058a:	ea4c 0c0e 	orr.w	ip, ip, lr
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1058e:	4439      	add	r1, r7
   10590:	eb06 0040 	add.w	r0, r6, r0, lsl #1
   10594:	2206      	movs	r2, #6
   10596:	3401      	adds	r4, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   10598:	706b      	strb	r3, [r5, #1]
	filter->enable_bitmask |= BIT(index);
   1059a:	f885 c000 	strb.w	ip, [r5]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1059e:	f006 fa87 	bl	16ab0 <memcpy>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   105a2:	2c08      	cmp	r4, #8
   105a4:	d1dd      	bne.n	10562 <rl_update+0x1a>
}
   105a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   105aa:	bf00      	nop
   105ac:	20001da0 	.word	0x20001da0
   105b0:	20001c60 	.word	0x20001c60

000105b4 <ll_wl_size_get>:
}
   105b4:	2008      	movs	r0, #8
   105b6:	4770      	bx	lr

000105b8 <ll_wl_clear>:
{
   105b8:	b510      	push	{r4, lr}
	if (ull_scan_filter_pol_get(0) & 0x1) {
   105ba:	2000      	movs	r0, #0
   105bc:	f7fc fc28 	bl	ce10 <ull_scan_filter_pol_get>
   105c0:	f010 0001 	ands.w	r0, r0, #1
   105c4:	d11b      	bne.n	105fe <ll_wl_clear+0x46>
   105c6:	4a0f      	ldr	r2, [pc, #60]	; (10604 <ll_wl_clear+0x4c>)
			rl[j].wl = 0U;
   105c8:	4c0f      	ldr	r4, [pc, #60]	; (10608 <ll_wl_clear+0x50>)
		uint8_t j = wl[i].rl_idx;
   105ca:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   105ce:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   105d0:	2b07      	cmp	r3, #7
			rl[j].wl = 0U;
   105d2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   105d6:	d805      	bhi.n	105e4 <ll_wl_clear+0x2c>
			rl[j].wl = 0U;
   105d8:	f814 3031 	ldrb.w	r3, [r4, r1, lsl #3]
   105dc:	f36f 1345 	bfc	r3, #5, #1
   105e0:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
		wl[i].taken = 0U;
   105e4:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   105e8:	f36f 0300 	bfc	r3, #0, #1
   105ec:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   105f0:	3001      	adds	r0, #1
   105f2:	2808      	cmp	r0, #8
   105f4:	d1e9      	bne.n	105ca <ll_wl_clear+0x12>
	wl_anon = 0U;
   105f6:	4b05      	ldr	r3, [pc, #20]	; (1060c <ll_wl_clear+0x54>)
   105f8:	2000      	movs	r0, #0
   105fa:	7018      	strb	r0, [r3, #0]
}
   105fc:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   105fe:	200c      	movs	r0, #12
}
   10600:	bd10      	pop	{r4, pc}
   10602:	bf00      	nop
   10604:	20001dd8 	.word	0x20001dd8
   10608:	20001c60 	.word	0x20001c60
   1060c:	20002250 	.word	0x20002250

00010610 <ll_wl_remove>:
{
   10610:	b538      	push	{r3, r4, r5, lr}
   10612:	4604      	mov	r4, r0
	if (ull_scan_filter_pol_get(0) & 0x1) {
   10614:	2000      	movs	r0, #0
   10616:	f7fc fbfb 	bl	ce10 <ull_scan_filter_pol_get>
   1061a:	f010 0501 	ands.w	r5, r0, #1
   1061e:	d125      	bne.n	1066c <ll_wl_remove+0x5c>
	if (addr->type == ADDR_TYPE_ANON) {
   10620:	7820      	ldrb	r0, [r4, #0]
   10622:	28ff      	cmp	r0, #255	; 0xff
   10624:	d01e      	beq.n	10664 <ll_wl_remove+0x54>
	uint8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   10626:	1c61      	adds	r1, r4, #1
   10628:	462a      	mov	r2, r5
   1062a:	f7ff ff07 	bl	1043c <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   1062e:	2807      	cmp	r0, #7
   10630:	d901      	bls.n	10636 <ll_wl_remove+0x26>
   10632:	2002      	movs	r0, #2
}
   10634:	bd38      	pop	{r3, r4, r5, pc}
		uint8_t j = wl[i].rl_idx;
   10636:	4a0e      	ldr	r2, [pc, #56]	; (10670 <ll_wl_remove+0x60>)
   10638:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   1063c:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   1063e:	2b07      	cmp	r3, #7
   10640:	d808      	bhi.n	10654 <ll_wl_remove+0x44>
			rl[j].wl = 0U;
   10642:	490c      	ldr	r1, [pc, #48]	; (10674 <ll_wl_remove+0x64>)
   10644:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   10648:	f811 4033 	ldrb.w	r4, [r1, r3, lsl #3]
   1064c:	f365 1445 	bfi	r4, r5, #5, #1
   10650:	f801 4033 	strb.w	r4, [r1, r3, lsl #3]
		wl[i].taken = 0U;
   10654:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   10658:	f36f 0300 	bfc	r3, #0, #1
   1065c:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
		return 0;
   10660:	2000      	movs	r0, #0
}
   10662:	bd38      	pop	{r3, r4, r5, pc}
		wl_anon = 0U;
   10664:	4b04      	ldr	r3, [pc, #16]	; (10678 <ll_wl_remove+0x68>)
   10666:	701d      	strb	r5, [r3, #0]
		return 0;
   10668:	4628      	mov	r0, r5
}
   1066a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1066c:	200c      	movs	r0, #12
}
   1066e:	bd38      	pop	{r3, r4, r5, pc}
   10670:	20001dd8 	.word	0x20001dd8
   10674:	20001c60 	.word	0x20001c60
   10678:	20002250 	.word	0x20002250

0001067c <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   1067c:	2807      	cmp	r0, #7
{
   1067e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10682:	4604      	mov	r4, r0
   10684:	460d      	mov	r5, r1
   10686:	4690      	mov	r8, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   10688:	d817      	bhi.n	106ba <ll_rl_id_addr_get+0x3e>
	LL_ASSERT(rl[rl_idx].taken);
   1068a:	4e19      	ldr	r6, [pc, #100]	; (106f0 <ll_rl_id_addr_get+0x74>)
   1068c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   10690:	00a7      	lsls	r7, r4, #2
   10692:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   10696:	07db      	lsls	r3, r3, #31
   10698:	d51c      	bpl.n	106d4 <ll_rl_id_addr_get+0x58>
	*id_addr_type = rl[rl_idx].id_addr_type;
   1069a:	4427      	add	r7, r4
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   1069c:	2128      	movs	r1, #40	; 0x28
	*id_addr_type = rl[rl_idx].id_addr_type;
   1069e:	f816 3037 	ldrb.w	r3, [r6, r7, lsl #3]
   106a2:	f3c3 1380 	ubfx	r3, r3, #6, #1
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   106a6:	fb01 6104 	mla	r1, r1, r4, r6
	*id_addr_type = rl[rl_idx].id_addr_type;
   106aa:	702b      	strb	r3, [r5, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   106ac:	4640      	mov	r0, r8
   106ae:	3101      	adds	r1, #1
}
   106b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   106b4:	2206      	movs	r2, #6
   106b6:	f006 b9fb 	b.w	16ab0 <memcpy>
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   106ba:	4a0e      	ldr	r2, [pc, #56]	; (106f4 <ll_rl_id_addr_get+0x78>)
   106bc:	490e      	ldr	r1, [pc, #56]	; (106f8 <ll_rl_id_addr_get+0x7c>)
   106be:	480f      	ldr	r0, [pc, #60]	; (106fc <ll_rl_id_addr_get+0x80>)
   106c0:	23f3      	movs	r3, #243	; 0xf3
   106c2:	f005 fb3d 	bl	15d40 <printk>
   106c6:	4040      	eors	r0, r0
   106c8:	f380 8811 	msr	BASEPRI, r0
   106cc:	f04f 0003 	mov.w	r0, #3
   106d0:	df02      	svc	2
   106d2:	e7da      	b.n	1068a <ll_rl_id_addr_get+0xe>
	LL_ASSERT(rl[rl_idx].taken);
   106d4:	4a07      	ldr	r2, [pc, #28]	; (106f4 <ll_rl_id_addr_get+0x78>)
   106d6:	490a      	ldr	r1, [pc, #40]	; (10700 <ll_rl_id_addr_get+0x84>)
   106d8:	4808      	ldr	r0, [pc, #32]	; (106fc <ll_rl_id_addr_get+0x80>)
   106da:	23f4      	movs	r3, #244	; 0xf4
   106dc:	f005 fb30 	bl	15d40 <printk>
   106e0:	4040      	eors	r0, r0
   106e2:	f380 8811 	msr	BASEPRI, r0
   106e6:	f04f 0003 	mov.w	r0, #3
   106ea:	df02      	svc	2
   106ec:	e7d5      	b.n	1069a <ll_rl_id_addr_get+0x1e>
   106ee:	bf00      	nop
   106f0:	20001c60 	.word	0x20001c60
   106f4:	00019f84 	.word	0x00019f84
   106f8:	00019fc8 	.word	0x00019fc8
   106fc:	000199cc 	.word	0x000199cc
   10700:	00019fd4 	.word	0x00019fd4

00010704 <ll_rl_size_get>:
   10704:	2008      	movs	r0, #8
   10706:	4770      	bx	lr

00010708 <ll_rl_clear>:
{
   10708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		(IS_ENABLED(CONFIG_BT_OBSERVER) && ull_scan_is_enabled(0)))
   1070a:	2000      	movs	r0, #0
   1070c:	f7fc fb68 	bl	cde0 <ull_scan_is_enabled>
	if (!rl_access_check(false)) {
   10710:	bb98      	cbnz	r0, 1077a <ll_rl_clear+0x72>
		rl[i].taken = 0U;
   10712:	4b1b      	ldr	r3, [pc, #108]	; (10780 <ll_rl_clear+0x78>)
	peer_irk_count = 0U;
   10714:	491b      	ldr	r1, [pc, #108]	; (10784 <ll_rl_clear+0x7c>)
		rl[i].taken = 0U;
   10716:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   1071a:	f893 c000 	ldrb.w	ip, [r3]
   1071e:	f893 7028 	ldrb.w	r7, [r3, #40]	; 0x28
   10722:	f893 6078 	ldrb.w	r6, [r3, #120]	; 0x78
   10726:	f893 50a0 	ldrb.w	r5, [r3, #160]	; 0xa0
   1072a:	f893 40c8 	ldrb.w	r4, [r3, #200]	; 0xc8
	peer_irk_count = 0U;
   1072e:	7008      	strb	r0, [r1, #0]
		rl[i].taken = 0U;
   10730:	f360 0200 	bfi	r2, r0, #0, #1
   10734:	f893 10f0 	ldrb.w	r1, [r3, #240]	; 0xf0
   10738:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
   1073c:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
   10740:	f360 0c00 	bfi	ip, r0, #0, #1
   10744:	f360 0700 	bfi	r7, r0, #0, #1
   10748:	f360 0600 	bfi	r6, r0, #0, #1
   1074c:	f360 0500 	bfi	r5, r0, #0, #1
   10750:	f360 0400 	bfi	r4, r0, #0, #1
   10754:	f360 0100 	bfi	r1, r0, #0, #1
   10758:	f360 0200 	bfi	r2, r0, #0, #1
   1075c:	f883 c000 	strb.w	ip, [r3]
   10760:	f883 7028 	strb.w	r7, [r3, #40]	; 0x28
   10764:	f883 6078 	strb.w	r6, [r3, #120]	; 0x78
   10768:	f883 50a0 	strb.w	r5, [r3, #160]	; 0xa0
   1076c:	f883 40c8 	strb.w	r4, [r3, #200]	; 0xc8
   10770:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
   10774:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
}
   10778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1077a:	200c      	movs	r0, #12
}
   1077c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1077e:	bf00      	nop
   10780:	20001c60 	.word	0x20001c60
   10784:	2000224e 	.word	0x2000224e

00010788 <ll_rl_enable>:
{
   10788:	b510      	push	{r4, lr}
   1078a:	4604      	mov	r4, r0
		(IS_ENABLED(CONFIG_BT_OBSERVER) && ull_scan_is_enabled(0)))
   1078c:	2000      	movs	r0, #0
   1078e:	f7fc fb27 	bl	cde0 <ull_scan_is_enabled>
	if (!rl_access_check(false)) {
   10792:	b958      	cbnz	r0, 107ac <ll_rl_enable+0x24>
	switch (enable) {
   10794:	b134      	cbz	r4, 107a4 <ll_rl_enable+0x1c>
   10796:	2c01      	cmp	r4, #1
   10798:	d001      	beq.n	1079e <ll_rl_enable+0x16>
   1079a:	2012      	movs	r0, #18
}
   1079c:	bd10      	pop	{r4, pc}
		rl_enable = 1U;
   1079e:	4b04      	ldr	r3, [pc, #16]	; (107b0 <ll_rl_enable+0x28>)
   107a0:	701c      	strb	r4, [r3, #0]
}
   107a2:	bd10      	pop	{r4, pc}
		rl_enable = 0U;
   107a4:	4b02      	ldr	r3, [pc, #8]	; (107b0 <ll_rl_enable+0x28>)
   107a6:	701c      	strb	r4, [r3, #0]
	return 0;
   107a8:	4620      	mov	r0, r4
}
   107aa:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   107ac:	200c      	movs	r0, #12
}
   107ae:	bd10      	pop	{r4, pc}
   107b0:	2000224f 	.word	0x2000224f

000107b4 <ll_rl_timeout_set>:
	rpa_timeout_ms = timeout * 1000U;
   107b4:	4a03      	ldr	r2, [pc, #12]	; (107c4 <ll_rl_timeout_set+0x10>)
   107b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   107ba:	fb03 f300 	mul.w	r3, r3, r0
   107be:	6013      	str	r3, [r2, #0]
}
   107c0:	4770      	bx	lr
   107c2:	bf00      	nop
   107c4:	20001dd4 	.word	0x20001dd4

000107c8 <ull_filter_adv_scan_state_cb>:
{
   107c8:	b510      	push	{r4, lr}
	if (bm) {
   107ca:	b1a8      	cbz	r0, 107f8 <ull_filter_adv_scan_state_cb+0x30>
	k_delayed_work_submit(&rpa_work, K_MSEC(rpa_timeout_ms));
   107cc:	4b0e      	ldr	r3, [pc, #56]	; (10808 <ull_filter_adv_scan_state_cb+0x40>)
   107ce:	681a      	ldr	r2, [r3, #0]
   107d0:	f240 30e7 	movw	r0, #999	; 0x3e7
   107d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   107d8:	2100      	movs	r1, #0
   107da:	fbe3 0102 	umlal	r0, r1, r3, r2
   107de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   107e2:	2300      	movs	r3, #0
   107e4:	f7ef fc8c 	bl	100 <__aeabi_uldivmod>
}
   107e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   107ec:	4602      	mov	r2, r0
   107ee:	460b      	mov	r3, r1
	return k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   107f0:	4806      	ldr	r0, [pc, #24]	; (1080c <ull_filter_adv_scan_state_cb+0x44>)
   107f2:	4907      	ldr	r1, [pc, #28]	; (10810 <ull_filter_adv_scan_state_cb+0x48>)
   107f4:	f005 b804 	b.w	15800 <k_work_reschedule_for_queue>
	return k_work_delayable_busy_get(dwork) != 0;
   107f8:	4805      	ldr	r0, [pc, #20]	; (10810 <ull_filter_adv_scan_state_cb+0x48>)
   107fa:	f008 fc02 	bl	19002 <k_work_delayable_busy_get>
   107fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	int rc = k_work_cancel_delayable(&work->work);
   10802:	4803      	ldr	r0, [pc, #12]	; (10810 <ull_filter_adv_scan_state_cb+0x48>)
   10804:	f008 bc11 	b.w	1902a <k_work_cancel_delayable>
   10808:	20001dd4 	.word	0x20001dd4
   1080c:	20000ed0 	.word	0x20000ed0
   10810:	20000da0 	.word	0x20000da0

00010814 <ull_filter_scan_update>:
{
   10814:	b508      	push	{r3, lr}
}

static void filter_clear(struct lll_filter *filter)
{
	filter->enable_bitmask = 0;
   10816:	4b09      	ldr	r3, [pc, #36]	; (1083c <ull_filter_scan_update+0x28>)
   10818:	2200      	movs	r2, #0
   1081a:	801a      	strh	r2, [r3, #0]
	if ((scan_fp & 0x1) &&
   1081c:	07c3      	lsls	r3, r0, #31
   1081e:	d406      	bmi.n	1082e <ull_filter_scan_update+0x1a>
	if (rl_enable &&
   10820:	4b07      	ldr	r3, [pc, #28]	; (10840 <ull_filter_scan_update+0x2c>)
	filter->enable_bitmask = 0;
   10822:	4a08      	ldr	r2, [pc, #32]	; (10844 <ull_filter_scan_update+0x30>)
	if (rl_enable &&
   10824:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   10826:	2100      	movs	r1, #0
   10828:	8011      	strh	r1, [r2, #0]
	if (rl_enable &&
   1082a:	b91b      	cbnz	r3, 10834 <ull_filter_scan_update+0x20>
}
   1082c:	bd08      	pop	{r3, pc}
		wl_update();
   1082e:	f7ff fe3d 	bl	104ac <wl_update>
   10832:	e7f5      	b.n	10820 <ull_filter_scan_update+0xc>
}
   10834:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   10838:	f7ff be86 	b.w	10548 <rl_update>
   1083c:	20001e18 	.word	0x20001e18
   10840:	2000224f 	.word	0x2000224f
   10844:	20001da0 	.word	0x20001da0

00010848 <ull_filter_rpa_update>:
{
   10848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1084c:	4606      	mov	r6, r0
   1084e:	b087      	sub	sp, #28
	return z_impl_k_uptime_ticks();
   10850:	f008 fc43 	bl	190da <z_impl_k_uptime_ticks>
   10854:	0142      	lsls	r2, r0, #5
   10856:	014b      	lsls	r3, r1, #5
   10858:	ebb2 0800 	subs.w	r8, r2, r0
   1085c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
   10860:	eb63 0301 	sbc.w	r3, r3, r1
   10864:	009b      	lsls	r3, r3, #2
   10866:	ea4f 0288 	mov.w	r2, r8, lsl #2
   1086a:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
   1086e:	eb12 0800 	adds.w	r8, r2, r0
   10872:	eb43 0101 	adc.w	r1, r3, r1
   10876:	00c9      	lsls	r1, r1, #3
   10878:	ea41 7158 	orr.w	r1, r1, r8, lsr #29
   1087c:	ea4f 03c8 	mov.w	r3, r8, lsl #3
   10880:	ea4f 38d3 	mov.w	r8, r3, lsr #15
   10884:	0bc8      	lsrs	r0, r1, #15
   10886:	ea48 4841 	orr.w	r8, r8, r1, lsl #17
   1088a:	9001      	str	r0, [sp, #4]
	bool all = timeout || (rpa_last_ms == -1) ||
   1088c:	b9be      	cbnz	r6, 108be <ull_filter_rpa_update+0x76>
   1088e:	4b4b      	ldr	r3, [pc, #300]	; (109bc <ull_filter_rpa_update+0x174>)
   10890:	e9d3 2300 	ldrd	r2, r3, [r3]
   10894:	1c5c      	adds	r4, r3, #1
   10896:	bf08      	it	eq
   10898:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   1089c:	d00f      	beq.n	108be <ull_filter_rpa_update+0x76>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   1089e:	4948      	ldr	r1, [pc, #288]	; (109c0 <ull_filter_rpa_update+0x178>)
   108a0:	6809      	ldr	r1, [r1, #0]
   108a2:	ebb8 0402 	subs.w	r4, r8, r2
   108a6:	eb60 0503 	sbc.w	r5, r0, r3
   108aa:	2300      	movs	r3, #0
	bool all = timeout || (rpa_last_ms == -1) ||
   108ac:	428c      	cmp	r4, r1
   108ae:	eb75 0303 	sbcs.w	r3, r5, r3
   108b2:	bfac      	ite	ge
   108b4:	f04f 0901 	movge.w	r9, #1
   108b8:	f04f 0900 	movlt.w	r9, #0
   108bc:	e001      	b.n	108c2 <ull_filter_rpa_update+0x7a>
   108be:	f04f 0901 	mov.w	r9, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   108c2:	4e40      	ldr	r6, [pc, #256]	; (109c4 <ull_filter_rpa_update+0x17c>)
				LL_ASSERT(!err);
   108c4:	f8df b10c 	ldr.w	fp, [pc, #268]	; 109d4 <ull_filter_rpa_update+0x18c>
   108c8:	f8df a10c 	ldr.w	sl, [pc, #268]	; 109d8 <ull_filter_rpa_update+0x190>
   108cc:	f1a6 0724 	sub.w	r7, r6, #36	; 0x24
	bool all = timeout || (rpa_last_ms == -1) ||
   108d0:	2400      	movs	r4, #0
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   108d2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   108d6:	00a5      	lsls	r5, r4, #2
   108d8:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   108dc:	07d8      	lsls	r0, r3, #31
   108de:	d515      	bpl.n	1090c <ull_filter_rpa_update+0xc4>
   108e0:	f1b9 0f00 	cmp.w	r9, #0
   108e4:	d101      	bne.n	108ea <ull_filter_rpa_update+0xa2>
   108e6:	0799      	lsls	r1, r3, #30
   108e8:	d410      	bmi.n	1090c <ull_filter_rpa_update+0xc4>
			if (rl[i].pirk) {
   108ea:	192b      	adds	r3, r5, r4
   108ec:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   108f0:	075a      	lsls	r2, r3, #29
   108f2:	d431      	bmi.n	10958 <ull_filter_rpa_update+0x110>
			if (rl[i].lirk) {
   108f4:	192b      	adds	r3, r5, r4
   108f6:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   108fa:	071b      	lsls	r3, r3, #28
   108fc:	d416      	bmi.n	1092c <ull_filter_rpa_update+0xe4>
			rl[i].rpas_ready = 1U;
   108fe:	4425      	add	r5, r4
   10900:	f817 3035 	ldrb.w	r3, [r7, r5, lsl #3]
   10904:	f043 0302 	orr.w	r3, r3, #2
   10908:	f807 3035 	strb.w	r3, [r7, r5, lsl #3]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1090c:	3401      	adds	r4, #1
   1090e:	2c08      	cmp	r4, #8
   10910:	f106 0628 	add.w	r6, r6, #40	; 0x28
   10914:	d1dd      	bne.n	108d2 <ull_filter_rpa_update+0x8a>
	if (all) {
   10916:	f1b9 0f00 	cmp.w	r9, #0
   1091a:	d004      	beq.n	10926 <ull_filter_rpa_update+0xde>
		rpa_last_ms = now;
   1091c:	4b27      	ldr	r3, [pc, #156]	; (109bc <ull_filter_rpa_update+0x174>)
   1091e:	9a01      	ldr	r2, [sp, #4]
   10920:	f8c3 8000 	str.w	r8, [r3]
   10924:	605a      	str	r2, [r3, #4]
}
   10926:	b007      	add	sp, #28
   10928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   1092c:	a902      	add	r1, sp, #8
   1092e:	f1a6 001d 	sub.w	r0, r6, #29
   10932:	f006 f95e 	bl	16bf2 <bt_rpa_create>
				LL_ASSERT(!err);
   10936:	2800      	cmp	r0, #0
   10938:	d132      	bne.n	109a0 <ull_filter_rpa_update+0x158>
				rl[i].local_rpa = &rpa;
   1093a:	4a23      	ldr	r2, [pc, #140]	; (109c8 <ull_filter_rpa_update+0x180>)
   1093c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   10940:	eb02 0343 	add.w	r3, r2, r3, lsl #1
	memcpy(dst, src, sizeof(*dst));
   10944:	a902      	add	r1, sp, #8
   10946:	4618      	mov	r0, r3
   10948:	2206      	movs	r2, #6
   1094a:	6031      	str	r1, [r6, #0]
   1094c:	9300      	str	r3, [sp, #0]
   1094e:	f006 f8af 	bl	16ab0 <memcpy>
				rl[i].local_rpa = &local_rpas[i];
   10952:	9b00      	ldr	r3, [sp, #0]
   10954:	6033      	str	r3, [r6, #0]
   10956:	e7d2      	b.n	108fe <ull_filter_rpa_update+0xb6>
	psrc += length - 1;
   10958:	f816 3c0d 	ldrb.w	r3, [r6, #-13]
   1095c:	4a1b      	ldr	r2, [pc, #108]	; (109cc <ull_filter_rpa_update+0x184>)
   1095e:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   10962:	320f      	adds	r2, #15
	for (; length > 0; length--) {
   10964:	f10d 0307 	add.w	r3, sp, #7
   10968:	f10d 0017 	add.w	r0, sp, #23
		*pdst++ = *psrc--;
   1096c:	f812 1901 	ldrb.w	r1, [r2], #-1
   10970:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   10974:	4283      	cmp	r3, r0
   10976:	d1f9      	bne.n	1096c <ull_filter_rpa_update+0x124>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   10978:	1fb1      	subs	r1, r6, #6
   1097a:	a802      	add	r0, sp, #8
   1097c:	f006 f939 	bl	16bf2 <bt_rpa_create>
				LL_ASSERT(!err);
   10980:	2800      	cmp	r0, #0
   10982:	d0b7      	beq.n	108f4 <ull_filter_rpa_update+0xac>
   10984:	4812      	ldr	r0, [pc, #72]	; (109d0 <ull_filter_rpa_update+0x188>)
   10986:	f240 2323 	movw	r3, #547	; 0x223
   1098a:	465a      	mov	r2, fp
   1098c:	4651      	mov	r1, sl
   1098e:	f005 f9d7 	bl	15d40 <printk>
   10992:	4040      	eors	r0, r0
   10994:	f380 8811 	msr	BASEPRI, r0
   10998:	f04f 0003 	mov.w	r0, #3
   1099c:	df02      	svc	2
   1099e:	e7a9      	b.n	108f4 <ull_filter_rpa_update+0xac>
				LL_ASSERT(!err);
   109a0:	480b      	ldr	r0, [pc, #44]	; (109d0 <ull_filter_rpa_update+0x188>)
   109a2:	f44f 730c 	mov.w	r3, #560	; 0x230
   109a6:	465a      	mov	r2, fp
   109a8:	4651      	mov	r1, sl
   109aa:	f005 f9c9 	bl	15d40 <printk>
   109ae:	4040      	eors	r0, r0
   109b0:	f380 8811 	msr	BASEPRI, r0
   109b4:	f04f 0003 	mov.w	r0, #3
   109b8:	df02      	svc	2
   109ba:	e7be      	b.n	1093a <ull_filter_rpa_update+0xf2>
   109bc:	20000d98 	.word	0x20000d98
   109c0:	20001dd4 	.word	0x20001dd4
   109c4:	20001c84 	.word	0x20001c84
   109c8:	20001ba8 	.word	0x20001ba8
   109cc:	20001be0 	.word	0x20001be0
   109d0:	000199cc 	.word	0x000199cc
   109d4:	00019f84 	.word	0x00019f84
   109d8:	00019b30 	.word	0x00019b30

000109dc <rpa_timeout>:
{
   109dc:	b510      	push	{r4, lr}
	ull_filter_rpa_update(true);
   109de:	2001      	movs	r0, #1
   109e0:	f7ff ff32 	bl	10848 <ull_filter_rpa_update>
	k_delayed_work_submit(&rpa_work, K_MSEC(rpa_timeout_ms));
   109e4:	4b0a      	ldr	r3, [pc, #40]	; (10a10 <rpa_timeout+0x34>)
   109e6:	681a      	ldr	r2, [r3, #0]
   109e8:	f240 30e7 	movw	r0, #999	; 0x3e7
   109ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   109f0:	2100      	movs	r1, #0
   109f2:	fbe3 0102 	umlal	r0, r1, r3, r2
   109f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   109fa:	2300      	movs	r3, #0
   109fc:	f7ef fb80 	bl	100 <__aeabi_uldivmod>
}
   10a00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10a04:	4602      	mov	r2, r0
   10a06:	460b      	mov	r3, r1
	return k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   10a08:	4802      	ldr	r0, [pc, #8]	; (10a14 <rpa_timeout+0x38>)
   10a0a:	4903      	ldr	r1, [pc, #12]	; (10a18 <rpa_timeout+0x3c>)
   10a0c:	f004 bef8 	b.w	15800 <k_work_reschedule_for_queue>
   10a10:	20001dd4 	.word	0x20001dd4
   10a14:	20000ed0 	.word	0x20000ed0
   10a18:	20000da0 	.word	0x20000da0

00010a1c <ull_filter_rl_find>:
{
   10a1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10a20:	468b      	mov	fp, r1
	if (free) {
   10a22:	4616      	mov	r6, r2
   10a24:	b10a      	cbz	r2, 10a2a <ull_filter_rl_find+0xe>
		*free = FILTER_IDX_NONE;
   10a26:	23ff      	movs	r3, #255	; 0xff
   10a28:	7013      	strb	r3, [r2, #0]
   10a2a:	f8df 8064 	ldr.w	r8, [pc, #100]	; 10a90 <ull_filter_rl_find+0x74>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   10a2e:	f000 0901 	and.w	r9, r0, #1
   10a32:	f108 0a01 	add.w	sl, r8, #1
{
   10a36:	2400      	movs	r4, #0
   10a38:	e004      	b.n	10a44 <ull_filter_rl_find+0x28>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   10a3a:	454a      	cmp	r2, r9
   10a3c:	d019      	beq.n	10a72 <ull_filter_rl_find+0x56>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   10a3e:	3401      	adds	r4, #1
   10a40:	2c08      	cmp	r4, #8
   10a42:	d012      	beq.n	10a6a <ull_filter_rl_find+0x4e>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   10a44:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   10a48:	00e8      	lsls	r0, r5, #3
   10a4a:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   10a4e:	07d9      	lsls	r1, r3, #31
   10a50:	f3c3 1280 	ubfx	r2, r3, #6, #1
   10a54:	b2e7      	uxtb	r7, r4
   10a56:	d4f0      	bmi.n	10a3a <ull_filter_rl_find+0x1e>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   10a58:	2e00      	cmp	r6, #0
   10a5a:	d0f0      	beq.n	10a3e <ull_filter_rl_find+0x22>
   10a5c:	7833      	ldrb	r3, [r6, #0]
   10a5e:	3401      	adds	r4, #1
   10a60:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   10a62:	bf08      	it	eq
   10a64:	7037      	strbeq	r7, [r6, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   10a66:	2c08      	cmp	r4, #8
   10a68:	d1ec      	bne.n	10a44 <ull_filter_rl_find+0x28>
	return FILTER_IDX_NONE;
   10a6a:	27ff      	movs	r7, #255	; 0xff
}
   10a6c:	4638      	mov	r0, r7
   10a6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   10a72:	4450      	add	r0, sl
   10a74:	2206      	movs	r2, #6
   10a76:	4659      	mov	r1, fp
   10a78:	f006 f80a 	bl	16a90 <memcmp>
   10a7c:	2800      	cmp	r0, #0
   10a7e:	d0f5      	beq.n	10a6c <ull_filter_rl_find+0x50>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   10a80:	2e00      	cmp	r6, #0
   10a82:	d0dc      	beq.n	10a3e <ull_filter_rl_find+0x22>
   10a84:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   10a88:	07db      	lsls	r3, r3, #31
   10a8a:	d4d8      	bmi.n	10a3e <ull_filter_rl_find+0x22>
   10a8c:	e7e6      	b.n	10a5c <ull_filter_rl_find+0x40>
   10a8e:	bf00      	nop
   10a90:	20001c60 	.word	0x20001c60

00010a94 <ll_wl_add>:
{
   10a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10a98:	4605      	mov	r5, r0
   10a9a:	b082      	sub	sp, #8
	if (ull_scan_filter_pol_get(0) & 0x1) {
   10a9c:	2000      	movs	r0, #0
   10a9e:	f7fc f9b7 	bl	ce10 <ull_scan_filter_pol_get>
   10aa2:	f010 0401 	ands.w	r4, r0, #1
   10aa6:	d13a      	bne.n	10b1e <ll_wl_add+0x8a>
	if (addr->type == ADDR_TYPE_ANON) {
   10aa8:	7828      	ldrb	r0, [r5, #0]
   10aaa:	28ff      	cmp	r0, #255	; 0xff
   10aac:	d030      	beq.n	10b10 <ll_wl_add+0x7c>
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   10aae:	f105 0801 	add.w	r8, r5, #1
   10ab2:	4641      	mov	r1, r8
   10ab4:	f10d 0207 	add.w	r2, sp, #7
   10ab8:	f7ff fcc0 	bl	1043c <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   10abc:	2807      	cmp	r0, #7
   10abe:	d923      	bls.n	10b08 <ll_wl_add+0x74>
	} else if (j >= ARRAY_SIZE(wl)) {
   10ac0:	f89d 6007 	ldrb.w	r6, [sp, #7]
   10ac4:	2e07      	cmp	r6, #7
   10ac6:	d83b      	bhi.n	10b40 <ll_wl_add+0xac>
	wl[i].id_addr_type = id_addr->type & 0x1;
   10ac8:	4f1f      	ldr	r7, [pc, #124]	; (10b48 <ll_wl_add+0xb4>)
   10aca:	782a      	ldrb	r2, [r5, #0]
   10acc:	f817 3036 	ldrb.w	r3, [r7, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   10ad0:	eb07 00c6 	add.w	r0, r7, r6, lsl #3
	wl[i].id_addr_type = id_addr->type & 0x1;
   10ad4:	f362 0341 	bfi	r3, r2, #1, #1
   10ad8:	4641      	mov	r1, r8
   10ada:	2206      	movs	r2, #6
   10adc:	3002      	adds	r0, #2
   10ade:	f807 3036 	strb.w	r3, [r7, r6, lsl #3]
   10ae2:	f005 ffe5 	bl	16ab0 <memcpy>
	j = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   10ae6:	7828      	ldrb	r0, [r5, #0]
   10ae8:	4622      	mov	r2, r4
   10aea:	4641      	mov	r1, r8
   10aec:	f7ff ff96 	bl	10a1c <ull_filter_rl_find>
	if (j < ARRAY_SIZE(rl)) {
   10af0:	2807      	cmp	r0, #7
   10af2:	d918      	bls.n	10b26 <ll_wl_add+0x92>
		wl[i].rl_idx = FILTER_IDX_NONE;
   10af4:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
   10af8:	22ff      	movs	r2, #255	; 0xff
   10afa:	705a      	strb	r2, [r3, #1]
	wl[i].taken = 1U;
   10afc:	f817 3036 	ldrb.w	r3, [r7, r6, lsl #3]
   10b00:	f043 0301 	orr.w	r3, r3, #1
   10b04:	f807 3036 	strb.w	r3, [r7, r6, lsl #3]
	return 0;
   10b08:	2000      	movs	r0, #0
}
   10b0a:	b002      	add	sp, #8
   10b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		wl_anon = 1U;
   10b10:	4b0e      	ldr	r3, [pc, #56]	; (10b4c <ll_wl_add+0xb8>)
   10b12:	2201      	movs	r2, #1
		return 0;
   10b14:	4620      	mov	r0, r4
		wl_anon = 1U;
   10b16:	701a      	strb	r2, [r3, #0]
}
   10b18:	b002      	add	sp, #8
   10b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   10b1e:	200c      	movs	r0, #12
}
   10b20:	b002      	add	sp, #8
   10b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rl[j].wl = 1U;
   10b26:	490a      	ldr	r1, [pc, #40]	; (10b50 <ll_wl_add+0xbc>)
   10b28:	eb00 0480 	add.w	r4, r0, r0, lsl #2
		wl[i].rl_idx = j;
   10b2c:	eb07 02c6 	add.w	r2, r7, r6, lsl #3
		rl[j].wl = 1U;
   10b30:	f811 3034 	ldrb.w	r3, [r1, r4, lsl #3]
		wl[i].rl_idx = j;
   10b34:	7050      	strb	r0, [r2, #1]
		rl[j].wl = 1U;
   10b36:	f043 0320 	orr.w	r3, r3, #32
   10b3a:	f801 3034 	strb.w	r3, [r1, r4, lsl #3]
   10b3e:	e7dd      	b.n	10afc <ll_wl_add+0x68>
   10b40:	2007      	movs	r0, #7
}
   10b42:	b002      	add	sp, #8
   10b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10b48:	20001dd8 	.word	0x20001dd8
   10b4c:	20002250 	.word	0x20002250
   10b50:	20001c60 	.word	0x20001c60

00010b54 <ll_rl_add>:
{
   10b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10b58:	4606      	mov	r6, r0
   10b5a:	b085      	sub	sp, #20
		(IS_ENABLED(CONFIG_BT_OBSERVER) && ull_scan_is_enabled(0)))
   10b5c:	2000      	movs	r0, #0
{
   10b5e:	460d      	mov	r5, r1
   10b60:	4690      	mov	r8, r2
		(IS_ENABLED(CONFIG_BT_OBSERVER) && ull_scan_is_enabled(0)))
   10b62:	f7fc f93d 	bl	cde0 <ull_scan_is_enabled>
	if (!rl_access_check(false)) {
   10b66:	2800      	cmp	r0, #0
   10b68:	f040 8085 	bne.w	10c76 <ll_rl_add+0x122>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, &j);
   10b6c:	46b1      	mov	r9, r6
   10b6e:	f10d 020f 	add.w	r2, sp, #15
   10b72:	f819 0b01 	ldrb.w	r0, [r9], #1
   10b76:	4649      	mov	r1, r9
   10b78:	f7ff ff50 	bl	10a1c <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   10b7c:	2807      	cmp	r0, #7
   10b7e:	f240 808b 	bls.w	10c98 <ll_rl_add+0x144>
	} else if (j >= ARRAY_SIZE(rl)) {
   10b82:	f89d 700f 	ldrb.w	r7, [sp, #15]
   10b86:	2f07      	cmp	r7, #7
   10b88:	d879      	bhi.n	10c7e <ll_rl_add+0x12a>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   10b8a:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   10b8e:	4c4c      	ldr	r4, [pc, #304]	; (10cc0 <ll_rl_add+0x16c>)
   10b90:	00db      	lsls	r3, r3, #3
   10b92:	1c58      	adds	r0, r3, #1
	rl[i].id_addr_type = id_addr->type & 0x1;
   10b94:	eb07 0a87 	add.w	sl, r7, r7, lsl #2
   10b98:	2206      	movs	r2, #6
   10b9a:	4649      	mov	r1, r9
   10b9c:	4420      	add	r0, r4
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   10b9e:	9301      	str	r3, [sp, #4]
   10ba0:	f005 ff86 	bl	16ab0 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   10ba4:	7831      	ldrb	r1, [r6, #0]
   10ba6:	f814 203a 	ldrb.w	r2, [r4, sl, lsl #3]
   10baa:	ea4f 0bca 	mov.w	fp, sl, lsl #3
   10bae:	f361 1286 	bfi	r2, r1, #6, #1
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   10bb2:	4628      	mov	r0, r5
   10bb4:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
   10bb6:	f804 200b 	strb.w	r2, [r4, fp]
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   10bba:	f7f7 fd03 	bl	85c4 <mem_nz>
   10bbe:	f814 200b 	ldrb.w	r2, [r4, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   10bc2:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   10bc4:	f360 0282 	bfi	r2, r0, #2, #1
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   10bc8:	4640      	mov	r0, r8
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   10bca:	f804 200b 	strb.w	r2, [r4, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   10bce:	f7f7 fcf9 	bl	85c4 <mem_nz>
   10bd2:	f814 200b 	ldrb.w	r2, [r4, fp]
	if (rl[i].pirk) {
   10bd6:	9b01      	ldr	r3, [sp, #4]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   10bd8:	f000 0001 	and.w	r0, r0, #1
   10bdc:	f360 02c3 	bfi	r2, r0, #3, #1
	if (rl[i].pirk) {
   10be0:	f012 0f04 	tst.w	r2, #4
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   10be4:	f804 200b 	strb.w	r2, [r4, fp]
	rl[i].id_addr_type = id_addr->type & 0x1;
   10be8:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
   10bec:	ea4f 0b87 	mov.w	fp, r7, lsl #2
	if (rl[i].pirk) {
   10bf0:	d01a      	beq.n	10c28 <ll_rl_add+0xd4>
		rl[i].pirk_idx = peer_irk_count;
   10bf2:	f8df e0d8 	ldr.w	lr, [pc, #216]	; 10ccc <ll_rl_add+0x178>
		peer_irk_rl_ids[peer_irk_count] = i;
   10bf6:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 10cd0 <ll_rl_add+0x17c>
		rl[i].pirk_idx = peer_irk_count;
   10bfa:	f89e 1000 	ldrb.w	r1, [lr]
   10bfe:	4a31      	ldr	r2, [pc, #196]	; (10cc4 <ll_rl_add+0x170>)
		peer_irk_rl_ids[peer_irk_count] = i;
   10c00:	f80c 7001 	strb.w	r7, [ip, r1]
		rl[i].pirk_idx = peer_irk_count;
   10c04:	f88a 1017 	strb.w	r1, [sl, #23]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, IRK_SIZE);
   10c08:	eb02 1c01 	add.w	ip, r2, r1, lsl #4
   10c0c:	3101      	adds	r1, #1
	psrc += length - 1;
   10c0e:	f105 020f 	add.w	r2, r5, #15
   10c12:	f88e 1000 	strb.w	r1, [lr]
	for (; length > 0; length--) {
   10c16:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   10c1a:	3d01      	subs	r5, #1
		*pdst++ = *psrc--;
   10c1c:	f812 1901 	ldrb.w	r1, [r2], #-1
   10c20:	f80c 1f01 	strb.w	r1, [ip, #1]!
	for (; length > 0; length--) {
   10c24:	42aa      	cmp	r2, r5
   10c26:	d1f9      	bne.n	10c1c <ll_rl_add+0xc8>
	if (rl[i].lirk) {
   10c28:	2800      	cmp	r0, #0
   10c2a:	d139      	bne.n	10ca0 <ll_rl_add+0x14c>
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   10c2c:	f103 0018 	add.w	r0, r3, #24
   10c30:	2206      	movs	r2, #6
   10c32:	2100      	movs	r1, #0
   10c34:	4420      	add	r0, r4
   10c36:	f005 ff66 	bl	16b06 <memset>
	rl[i].dev = 0U;
   10c3a:	eb0b 0307 	add.w	r3, fp, r7
   10c3e:	00dd      	lsls	r5, r3, #3
	rl[i].rpas_ready = 0U;
   10c40:	f814 3033 	ldrb.w	r3, [r4, r3, lsl #3]
   10c44:	f023 0312 	bic.w	r3, r3, #18
   10c48:	5563      	strb	r3, [r4, r5]
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   10c4a:	4649      	mov	r1, r9
   10c4c:	7830      	ldrb	r0, [r6, #0]
   10c4e:	2200      	movs	r2, #0
   10c50:	f7ff fbf4 	bl	1043c <wl_find>
	if (j < ARRAY_SIZE(wl)) {
   10c54:	2807      	cmp	r0, #7
   10c56:	d916      	bls.n	10c86 <ll_rl_add+0x132>
		rl[i].wl = 0U;
   10c58:	5d63      	ldrb	r3, [r4, r5]
   10c5a:	f36f 1345 	bfc	r3, #5, #1
   10c5e:	5563      	strb	r3, [r4, r5]
	rl[i].taken = 1U;
   10c60:	445f      	add	r7, fp
	return 0;
   10c62:	2000      	movs	r0, #0
	rl[i].taken = 1U;
   10c64:	f814 3037 	ldrb.w	r3, [r4, r7, lsl #3]
   10c68:	f043 0301 	orr.w	r3, r3, #1
   10c6c:	f804 3037 	strb.w	r3, [r4, r7, lsl #3]
}
   10c70:	b005      	add	sp, #20
   10c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   10c76:	200c      	movs	r0, #12
}
   10c78:	b005      	add	sp, #20
   10c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   10c7e:	2007      	movs	r0, #7
}
   10c80:	b005      	add	sp, #20
   10c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		wl[j].rl_idx = i;
   10c86:	4a10      	ldr	r2, [pc, #64]	; (10cc8 <ll_rl_add+0x174>)
		rl[i].wl = 1U;
   10c88:	5d63      	ldrb	r3, [r4, r5]
		wl[j].rl_idx = i;
   10c8a:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
		rl[i].wl = 1U;
   10c8e:	f043 0320 	orr.w	r3, r3, #32
   10c92:	5563      	strb	r3, [r4, r5]
		wl[j].rl_idx = i;
   10c94:	7047      	strb	r7, [r0, #1]
		rl[i].wl = 1U;
   10c96:	e7e3      	b.n	10c60 <ll_rl_add+0x10c>
		return BT_HCI_ERR_INVALID_PARAM;
   10c98:	2012      	movs	r0, #18
}
   10c9a:	b005      	add	sp, #20
   10c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memcpy(rl[i].local_irk, lirk, IRK_SIZE);
   10ca0:	1dd8      	adds	r0, r3, #7
   10ca2:	4641      	mov	r1, r8
   10ca4:	2210      	movs	r2, #16
   10ca6:	4420      	add	r0, r4
   10ca8:	9301      	str	r3, [sp, #4]
   10caa:	f005 ff01 	bl	16ab0 <memcpy>
		rl[i].local_rpa = NULL;
   10cae:	eb0b 0207 	add.w	r2, fp, r7
   10cb2:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
   10cb6:	2100      	movs	r1, #0
   10cb8:	9b01      	ldr	r3, [sp, #4]
   10cba:	6251      	str	r1, [r2, #36]	; 0x24
   10cbc:	e7b6      	b.n	10c2c <ll_rl_add+0xd8>
   10cbe:	bf00      	nop
   10cc0:	20001c60 	.word	0x20001c60
   10cc4:	20001be0 	.word	0x20001be0
   10cc8:	20001dd8 	.word	0x20001dd8
   10ccc:	2000224e 	.word	0x2000224e
   10cd0:	20001bd8 	.word	0x20001bd8

00010cd4 <ll_rl_remove>:
{
   10cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10cd8:	4606      	mov	r6, r0
   10cda:	b083      	sub	sp, #12
		(IS_ENABLED(CONFIG_BT_OBSERVER) && ull_scan_is_enabled(0)))
   10cdc:	2000      	movs	r0, #0
   10cde:	f7fc f87f 	bl	cde0 <ull_scan_is_enabled>
	if (!rl_access_check(false)) {
   10ce2:	2800      	cmp	r0, #0
   10ce4:	d13e      	bne.n	10d64 <ll_rl_remove+0x90>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   10ce6:	4637      	mov	r7, r6
   10ce8:	4602      	mov	r2, r0
   10cea:	4604      	mov	r4, r0
   10cec:	f817 0b01 	ldrb.w	r0, [r7], #1
   10cf0:	4639      	mov	r1, r7
   10cf2:	f7ff fe93 	bl	10a1c <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   10cf6:	2807      	cmp	r0, #7
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   10cf8:	4605      	mov	r5, r0
	if (i < ARRAY_SIZE(rl)) {
   10cfa:	d903      	bls.n	10d04 <ll_rl_remove+0x30>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10cfc:	2002      	movs	r0, #2
}
   10cfe:	b003      	add	sp, #12
   10d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (rl[i].pirk) {
   10d04:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 10dcc <ll_rl_remove+0xf8>
   10d08:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   10d0c:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
   10d10:	f818 3033 	ldrb.w	r3, [r8, r3, lsl #3]
   10d14:	075b      	lsls	r3, r3, #29
   10d16:	ea4f 0980 	mov.w	r9, r0, lsl #2
   10d1a:	d50c      	bpl.n	10d36 <ll_rl_remove+0x62>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   10d1c:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 10dd0 <ll_rl_remove+0xfc>
   10d20:	f89a 2000 	ldrb.w	r2, [sl]
   10d24:	3a01      	subs	r2, #1
			if (pj && pi != pj) {
   10d26:	f012 0bff 	ands.w	fp, r2, #255	; 0xff
   10d2a:	d01f      	beq.n	10d6c <ll_rl_remove+0x98>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   10d2c:	7dcb      	ldrb	r3, [r1, #23]
			if (pj && pi != pj) {
   10d2e:	455b      	cmp	r3, fp
   10d30:	d11e      	bne.n	10d70 <ll_rl_remove+0x9c>
			peer_irk_count--;
   10d32:	f88a 2000 	strb.w	r2, [sl]
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   10d36:	7830      	ldrb	r0, [r6, #0]
   10d38:	4639      	mov	r1, r7
   10d3a:	2200      	movs	r2, #0
   10d3c:	f7ff fb7e 	bl	1043c <wl_find>
		if (j < ARRAY_SIZE(wl)) {
   10d40:	2807      	cmp	r0, #7
   10d42:	d804      	bhi.n	10d4e <ll_rl_remove+0x7a>
			wl[j].rl_idx = FILTER_IDX_NONE;
   10d44:	4b1e      	ldr	r3, [pc, #120]	; (10dc0 <ll_rl_remove+0xec>)
   10d46:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   10d4a:	23ff      	movs	r3, #255	; 0xff
   10d4c:	7043      	strb	r3, [r0, #1]
		rl[i].taken = 0U;
   10d4e:	444d      	add	r5, r9
		return 0;
   10d50:	2000      	movs	r0, #0
		rl[i].taken = 0U;
   10d52:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   10d56:	f36f 0300 	bfc	r3, #0, #1
   10d5a:	f808 3035 	strb.w	r3, [r8, r5, lsl #3]
}
   10d5e:	b003      	add	sp, #12
   10d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   10d64:	200c      	movs	r0, #12
}
   10d66:	b003      	add	sp, #12
   10d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10d6c:	465a      	mov	r2, fp
   10d6e:	e7e0      	b.n	10d32 <ll_rl_remove+0x5e>
				memcpy(peer_irks[pi], peer_irks[pj], IRK_SIZE);
   10d70:	4814      	ldr	r0, [pc, #80]	; (10dc4 <ll_rl_remove+0xf0>)
   10d72:	9301      	str	r3, [sp, #4]
   10d74:	eb00 110b 	add.w	r1, r0, fp, lsl #4
   10d78:	2210      	movs	r2, #16
   10d7a:	eb00 1003 	add.w	r0, r0, r3, lsl #4
   10d7e:	f005 fe97 	bl	16ab0 <memcpy>
   10d82:	9b01      	ldr	r3, [sp, #4]
					if (rl[k].taken && rl[k].pirk &&
   10d84:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   10d88:	eb08 01c2 	add.w	r1, r8, r2, lsl #3
   10d8c:	f818 2032 	ldrb.w	r2, [r8, r2, lsl #3]
   10d90:	f012 0f01 	tst.w	r2, #1
   10d94:	b2e0      	uxtb	r0, r4
   10d96:	f104 0401 	add.w	r4, r4, #1
   10d9a:	d004      	beq.n	10da6 <ll_rl_remove+0xd2>
   10d9c:	0752      	lsls	r2, r2, #29
   10d9e:	d502      	bpl.n	10da6 <ll_rl_remove+0xd2>
   10da0:	7dca      	ldrb	r2, [r1, #23]
   10da2:	455a      	cmp	r2, fp
   10da4:	d005      	beq.n	10db2 <ll_rl_remove+0xde>
				for (k = 0U;
   10da6:	2c08      	cmp	r4, #8
   10da8:	d1ec      	bne.n	10d84 <ll_rl_remove+0xb0>
   10daa:	f89a 2000 	ldrb.w	r2, [sl]
   10dae:	3a01      	subs	r2, #1
   10db0:	e7bf      	b.n	10d32 <ll_rl_remove+0x5e>
						peer_irk_rl_ids[pi] = k;
   10db2:	4c05      	ldr	r4, [pc, #20]	; (10dc8 <ll_rl_remove+0xf4>)
   10db4:	f89a 2000 	ldrb.w	r2, [sl]
   10db8:	54e0      	strb	r0, [r4, r3]
						rl[k].pirk_idx = pi;
   10dba:	75cb      	strb	r3, [r1, #23]
						break;
   10dbc:	3a01      	subs	r2, #1
   10dbe:	e7b8      	b.n	10d32 <ll_rl_remove+0x5e>
   10dc0:	20001dd8 	.word	0x20001dd8
   10dc4:	20001be0 	.word	0x20001be0
   10dc8:	20001bd8 	.word	0x20001bd8
   10dcc:	20001c60 	.word	0x20001c60
   10dd0:	2000224e 	.word	0x2000224e

00010dd4 <ll_rl_crpa_set>:
{
   10dd4:	b538      	push	{r3, r4, r5, lr}
   10dd6:	461c      	mov	r4, r3
	if ((crpa[5] & 0xc0) == 0x40) {
   10dd8:	795b      	ldrb	r3, [r3, #5]
   10dda:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   10dde:	2b40      	cmp	r3, #64	; 0x40
   10de0:	d000      	beq.n	10de4 <ll_rl_crpa_set+0x10>
}
   10de2:	bd38      	pop	{r3, r4, r5, pc}
		if (id_addr) {
   10de4:	b119      	cbz	r1, 10dee <ll_rl_crpa_set+0x1a>
			rl_idx = ull_filter_rl_find(id_addr_type, id_addr, NULL);
   10de6:	2200      	movs	r2, #0
   10de8:	f7ff fe18 	bl	10a1c <ull_filter_rl_find>
   10dec:	4602      	mov	r2, r0
		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   10dee:	2a07      	cmp	r2, #7
   10df0:	d8f7      	bhi.n	10de2 <ll_rl_crpa_set+0xe>
   10df2:	4b09      	ldr	r3, [pc, #36]	; (10e18 <ll_rl_crpa_set+0x44>)
   10df4:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   10df8:	f813 1031 	ldrb.w	r1, [r3, r1, lsl #3]
   10dfc:	07c9      	lsls	r1, r1, #31
   10dfe:	d5f0      	bpl.n	10de2 <ll_rl_crpa_set+0xe>
			memcpy(rl[rl_idx].curr_rpa.val, crpa,
   10e00:	2118      	movs	r1, #24
   10e02:	2028      	movs	r0, #40	; 0x28
   10e04:	fb10 1002 	smlabb	r0, r0, r2, r1
   10e08:	4418      	add	r0, r3
   10e0a:	4621      	mov	r1, r4
   10e0c:	2206      	movs	r2, #6
}
   10e0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			memcpy(rl[rl_idx].curr_rpa.val, crpa,
   10e12:	f005 be4d 	b.w	16ab0 <memcpy>
   10e16:	bf00      	nop
   10e18:	20001c60 	.word	0x20001c60

00010e1c <ll_rl_crpa_get>:
{
   10e1c:	b538      	push	{r3, r4, r5, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   10e1e:	4603      	mov	r3, r0
{
   10e20:	460d      	mov	r5, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   10e22:	f813 0b01 	ldrb.w	r0, [r3], #1
   10e26:	2200      	movs	r2, #0
   10e28:	4619      	mov	r1, r3
   10e2a:	f7ff fdf7 	bl	10a1c <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl) &&
   10e2e:	2807      	cmp	r0, #7
   10e30:	d901      	bls.n	10e36 <ll_rl_crpa_get+0x1a>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10e32:	2002      	movs	r0, #2
}
   10e34:	bd38      	pop	{r3, r4, r5, pc}
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   10e36:	4c09      	ldr	r4, [pc, #36]	; (10e5c <ll_rl_crpa_get+0x40>)
   10e38:	2328      	movs	r3, #40	; 0x28
   10e3a:	2218      	movs	r2, #24
   10e3c:	fb13 2000 	smlabb	r0, r3, r0, r2
   10e40:	4404      	add	r4, r0
   10e42:	4620      	mov	r0, r4
   10e44:	2106      	movs	r1, #6
   10e46:	f7f7 fbbd 	bl	85c4 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   10e4a:	2800      	cmp	r0, #0
   10e4c:	d0f1      	beq.n	10e32 <ll_rl_crpa_get+0x16>
   10e4e:	4621      	mov	r1, r4
   10e50:	4628      	mov	r0, r5
   10e52:	2206      	movs	r2, #6
   10e54:	f005 fe2c 	bl	16ab0 <memcpy>
		return 0;
   10e58:	2000      	movs	r0, #0
}
   10e5a:	bd38      	pop	{r3, r4, r5, pc}
   10e5c:	20001c60 	.word	0x20001c60

00010e60 <ll_rl_lrpa_get>:
{
   10e60:	b510      	push	{r4, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   10e62:	4603      	mov	r3, r0
{
   10e64:	460c      	mov	r4, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   10e66:	f813 0b01 	ldrb.w	r0, [r3], #1
   10e6a:	2200      	movs	r2, #0
   10e6c:	4619      	mov	r1, r3
   10e6e:	f7ff fdd5 	bl	10a1c <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   10e72:	2807      	cmp	r0, #7
   10e74:	d901      	bls.n	10e7a <ll_rl_lrpa_get+0x1a>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10e76:	2002      	movs	r0, #2
}
   10e78:	bd10      	pop	{r4, pc}
		bt_addr_copy(lrpa, rl[i].local_rpa);
   10e7a:	4b06      	ldr	r3, [pc, #24]	; (10e94 <ll_rl_lrpa_get+0x34>)
   10e7c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   10e80:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   10e84:	2206      	movs	r2, #6
   10e86:	6a59      	ldr	r1, [r3, #36]	; 0x24
   10e88:	4620      	mov	r0, r4
   10e8a:	f005 fe11 	bl	16ab0 <memcpy>
		return 0;
   10e8e:	2000      	movs	r0, #0
}
   10e90:	bd10      	pop	{r4, pc}
   10e92:	bf00      	nop
   10e94:	20001c60 	.word	0x20001c60

00010e98 <ll_priv_mode_set>:
{
   10e98:	b570      	push	{r4, r5, r6, lr}
   10e9a:	4605      	mov	r5, r0
		(IS_ENABLED(CONFIG_BT_OBSERVER) && ull_scan_is_enabled(0)))
   10e9c:	2000      	movs	r0, #0
{
   10e9e:	460e      	mov	r6, r1
		(IS_ENABLED(CONFIG_BT_OBSERVER) && ull_scan_is_enabled(0)))
   10ea0:	f7fb ff9e 	bl	cde0 <ull_scan_is_enabled>
	if (!rl_access_check(false)) {
   10ea4:	b968      	cbnz	r0, 10ec2 <ll_priv_mode_set+0x2a>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   10ea6:	4629      	mov	r1, r5
   10ea8:	4602      	mov	r2, r0
   10eaa:	4604      	mov	r4, r0
   10eac:	f811 0b01 	ldrb.w	r0, [r1], #1
   10eb0:	f7ff fdb4 	bl	10a1c <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   10eb4:	2807      	cmp	r0, #7
   10eb6:	d81c      	bhi.n	10ef2 <ll_priv_mode_set+0x5a>
		switch (mode) {
   10eb8:	b186      	cbz	r6, 10edc <ll_priv_mode_set+0x44>
   10eba:	2e01      	cmp	r6, #1
   10ebc:	d003      	beq.n	10ec6 <ll_priv_mode_set+0x2e>
   10ebe:	2012      	movs	r0, #18
}
   10ec0:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   10ec2:	200c      	movs	r0, #12
}
   10ec4:	bd70      	pop	{r4, r5, r6, pc}
			rl[i].dev = 1U;
   10ec6:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   10eca:	490b      	ldr	r1, [pc, #44]	; (10ef8 <ll_priv_mode_set+0x60>)
   10ecc:	f811 2033 	ldrb.w	r2, [r1, r3, lsl #3]
   10ed0:	f042 0210 	orr.w	r2, r2, #16
   10ed4:	f801 2033 	strb.w	r2, [r1, r3, lsl #3]
	return 0;
   10ed8:	4620      	mov	r0, r4
}
   10eda:	bd70      	pop	{r4, r5, r6, pc}
			rl[i].dev = 0U;
   10edc:	4b06      	ldr	r3, [pc, #24]	; (10ef8 <ll_priv_mode_set+0x60>)
   10ede:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   10ee2:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
   10ee6:	f366 1204 	bfi	r2, r6, #4, #1
   10eea:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
	return 0;
   10eee:	4630      	mov	r0, r6
}
   10ef0:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10ef2:	2002      	movs	r0, #2
}
   10ef4:	bd70      	pop	{r4, r5, r6, pc}
   10ef6:	bf00      	nop
   10ef8:	20001c60 	.word	0x20001c60

00010efc <ull_filter_reset>:
	wl_anon = 0U;
   10efc:	4a33      	ldr	r2, [pc, #204]	; (10fcc <ull_filter_reset+0xd0>)
   10efe:	4934      	ldr	r1, [pc, #208]	; (10fd0 <ull_filter_reset+0xd4>)
{
   10f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	wl_anon = 0U;
   10f02:	2300      	movs	r3, #0
   10f04:	4c33      	ldr	r4, [pc, #204]	; (10fd4 <ull_filter_reset+0xd8>)
   10f06:	7013      	strb	r3, [r2, #0]
		uint8_t j = wl[i].rl_idx;
   10f08:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   10f0c:	7852      	ldrb	r2, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   10f0e:	2a07      	cmp	r2, #7
			rl[j].wl = 0U;
   10f10:	eb02 0582 	add.w	r5, r2, r2, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   10f14:	d805      	bhi.n	10f22 <ull_filter_reset+0x26>
			rl[j].wl = 0U;
   10f16:	f811 2035 	ldrb.w	r2, [r1, r5, lsl #3]
   10f1a:	f36f 1245 	bfc	r2, #5, #1
   10f1e:	f801 2035 	strb.w	r2, [r1, r5, lsl #3]
		wl[i].taken = 0U;
   10f22:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   10f26:	f36f 0200 	bfc	r2, #0, #1
   10f2a:	f804 2033 	strb.w	r2, [r4, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   10f2e:	3301      	adds	r3, #1
   10f30:	2b08      	cmp	r3, #8
   10f32:	d1e9      	bne.n	10f08 <ull_filter_reset+0xc>
		rl[i].taken = 0U;
   10f34:	780f      	ldrb	r7, [r1, #0]
   10f36:	f891 5028 	ldrb.w	r5, [r1, #40]	; 0x28
   10f3a:	f891 4050 	ldrb.w	r4, [r1, #80]	; 0x50
   10f3e:	f891 2078 	ldrb.w	r2, [r1, #120]	; 0x78
   10f42:	f891 60a0 	ldrb.w	r6, [r1, #160]	; 0xa0
	rl_enable = 0U;
   10f46:	2300      	movs	r3, #0
		rl[i].taken = 0U;
   10f48:	f363 0700 	bfi	r7, r3, #0, #1
   10f4c:	700f      	strb	r7, [r1, #0]
	rl_enable = 0U;
   10f4e:	4f22      	ldr	r7, [pc, #136]	; (10fd8 <ull_filter_reset+0xdc>)
		rl[i].taken = 0U;
   10f50:	f363 0500 	bfi	r5, r3, #0, #1
   10f54:	f363 0400 	bfi	r4, r3, #0, #1
   10f58:	f363 0200 	bfi	r2, r3, #0, #1
	rl_enable = 0U;
   10f5c:	703b      	strb	r3, [r7, #0]
		rl[i].taken = 0U;
   10f5e:	f881 5028 	strb.w	r5, [r1, #40]	; 0x28
	peer_irk_count = 0U;
   10f62:	4f1e      	ldr	r7, [pc, #120]	; (10fdc <ull_filter_reset+0xe0>)
		rl[i].taken = 0U;
   10f64:	f891 50c8 	ldrb.w	r5, [r1, #200]	; 0xc8
   10f68:	f881 4050 	strb.w	r4, [r1, #80]	; 0x50
   10f6c:	f881 2078 	strb.w	r2, [r1, #120]	; 0x78
   10f70:	f891 40f0 	ldrb.w	r4, [r1, #240]	; 0xf0
   10f74:	f891 2118 	ldrb.w	r2, [r1, #280]	; 0x118
	peer_irk_count = 0U;
   10f78:	703b      	strb	r3, [r7, #0]
		rl[i].taken = 0U;
   10f7a:	f363 0600 	bfi	r6, r3, #0, #1
   10f7e:	f363 0500 	bfi	r5, r3, #0, #1
   10f82:	f363 0400 	bfi	r4, r3, #0, #1
   10f86:	f363 0200 	bfi	r2, r3, #0, #1
   10f8a:	f881 60a0 	strb.w	r6, [r1, #160]	; 0xa0
	rpa_last_ms = -1;
   10f8e:	4b14      	ldr	r3, [pc, #80]	; (10fe0 <ull_filter_reset+0xe4>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   10f90:	4e14      	ldr	r6, [pc, #80]	; (10fe4 <ull_filter_reset+0xe8>)
   10f92:	4f15      	ldr	r7, [pc, #84]	; (10fe8 <ull_filter_reset+0xec>)
		rl[i].taken = 0U;
   10f94:	f881 50c8 	strb.w	r5, [r1, #200]	; 0xc8
   10f98:	f881 40f0 	strb.w	r4, [r1, #240]	; 0xf0
	rpa_last_ms = -1;
   10f9c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   10fa0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   10fa4:	e9c3 4500 	strd	r4, r5, [r3]
		rl[i].taken = 0U;
   10fa8:	f881 2118 	strb.w	r2, [r1, #280]	; 0x118
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   10fac:	6037      	str	r7, [r6, #0]
	if (init) {
   10fae:	b128      	cbz	r0, 10fbc <ull_filter_reset+0xc0>
}
   10fb0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_work_init_delayable(&work->work, handler);
   10fb4:	490d      	ldr	r1, [pc, #52]	; (10fec <ull_filter_reset+0xf0>)
   10fb6:	480e      	ldr	r0, [pc, #56]	; (10ff0 <ull_filter_reset+0xf4>)
   10fb8:	f008 b817 	b.w	18fea <k_work_init_delayable>
	return k_work_delayable_busy_get(dwork) != 0;
   10fbc:	480c      	ldr	r0, [pc, #48]	; (10ff0 <ull_filter_reset+0xf4>)
   10fbe:	f008 f820 	bl	19002 <k_work_delayable_busy_get>
   10fc2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	int rc = k_work_cancel_delayable(&work->work);
   10fc6:	480a      	ldr	r0, [pc, #40]	; (10ff0 <ull_filter_reset+0xf4>)
   10fc8:	f008 b82f 	b.w	1902a <k_work_cancel_delayable>
   10fcc:	20002250 	.word	0x20002250
   10fd0:	20001c60 	.word	0x20001c60
   10fd4:	20001dd8 	.word	0x20001dd8
   10fd8:	2000224f 	.word	0x2000224f
   10fdc:	2000224e 	.word	0x2000224e
   10fe0:	20000d98 	.word	0x20000d98
   10fe4:	20001dd4 	.word	0x20001dd4
   10fe8:	000dbba0 	.word	0x000dbba0
   10fec:	000109dd 	.word	0x000109dd
   10ff0:	20000da0 	.word	0x20000da0

00010ff4 <ull_filter_lll_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   10ff4:	2807      	cmp	r0, #7
   10ff6:	d80d      	bhi.n	11014 <ull_filter_lll_lrpa_get+0x20>
   10ff8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   10ffc:	4906      	ldr	r1, [pc, #24]	; (11018 <ull_filter_lll_lrpa_get+0x24>)
   10ffe:	f811 3030 	ldrb.w	r3, [r1, r0, lsl #3]
   11002:	071a      	lsls	r2, r3, #28
   11004:	ea4f 00c0 	mov.w	r0, r0, lsl #3
   11008:	d504      	bpl.n	11014 <ull_filter_lll_lrpa_get+0x20>
   1100a:	079b      	lsls	r3, r3, #30
   1100c:	d502      	bpl.n	11014 <ull_filter_lll_lrpa_get+0x20>
	return rl[rl_idx].local_rpa;
   1100e:	4408      	add	r0, r1
   11010:	6a40      	ldr	r0, [r0, #36]	; 0x24
   11012:	4770      	bx	lr
		return NULL;
   11014:	2000      	movs	r0, #0
   11016:	4770      	bx	lr
   11018:	20001c60 	.word	0x20001c60

0001101c <ull_filter_lll_irks_get>:
	*count = peer_irk_count;
   1101c:	4b02      	ldr	r3, [pc, #8]	; (11028 <ull_filter_lll_irks_get+0xc>)
   1101e:	781b      	ldrb	r3, [r3, #0]
   11020:	7003      	strb	r3, [r0, #0]
}
   11022:	4802      	ldr	r0, [pc, #8]	; (1102c <ull_filter_lll_irks_get+0x10>)
   11024:	4770      	bx	lr
   11026:	bf00      	nop
   11028:	2000224e 	.word	0x2000224e
   1102c:	20001be0 	.word	0x20001be0

00011030 <ull_filter_lll_rl_idx>:
{
   11030:	b538      	push	{r3, r4, r5, lr}
   11032:	460c      	mov	r4, r1
	if (whitelist) {
   11034:	b150      	cbz	r0, 1104c <ull_filter_lll_rl_idx+0x1c>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   11036:	2907      	cmp	r1, #7
   11038:	d822      	bhi.n	11080 <ull_filter_lll_rl_idx+0x50>
		LL_ASSERT(wl[devmatch_id].taken);
   1103a:	4d2a      	ldr	r5, [pc, #168]	; (110e4 <ull_filter_lll_rl_idx+0xb4>)
   1103c:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
   11040:	07da      	lsls	r2, r3, #31
   11042:	d52f      	bpl.n	110a4 <ull_filter_lll_rl_idx+0x74>
		i = wl[devmatch_id].rl_idx;
   11044:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   11048:	7860      	ldrb	r0, [r4, #1]
}
   1104a:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   1104c:	2907      	cmp	r1, #7
   1104e:	d83a      	bhi.n	110c6 <ull_filter_lll_rl_idx+0x96>
		LL_ASSERT(rl[i].taken);
   11050:	4b25      	ldr	r3, [pc, #148]	; (110e8 <ull_filter_lll_rl_idx+0xb8>)
   11052:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   11056:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   1105a:	07db      	lsls	r3, r3, #31
   1105c:	d501      	bpl.n	11062 <ull_filter_lll_rl_idx+0x32>
   1105e:	4620      	mov	r0, r4
}
   11060:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(rl[i].taken);
   11062:	4a22      	ldr	r2, [pc, #136]	; (110ec <ull_filter_lll_rl_idx+0xbc>)
   11064:	4922      	ldr	r1, [pc, #136]	; (110f0 <ull_filter_lll_rl_idx+0xc0>)
   11066:	4823      	ldr	r0, [pc, #140]	; (110f4 <ull_filter_lll_rl_idx+0xc4>)
   11068:	f44f 732f 	mov.w	r3, #700	; 0x2bc
   1106c:	f004 fe68 	bl	15d40 <printk>
   11070:	4040      	eors	r0, r0
   11072:	f380 8811 	msr	BASEPRI, r0
   11076:	f04f 0003 	mov.w	r0, #3
   1107a:	df02      	svc	2
   1107c:	4620      	mov	r0, r4
}
   1107e:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   11080:	4a1a      	ldr	r2, [pc, #104]	; (110ec <ull_filter_lll_rl_idx+0xbc>)
   11082:	491d      	ldr	r1, [pc, #116]	; (110f8 <ull_filter_lll_rl_idx+0xc8>)
   11084:	481b      	ldr	r0, [pc, #108]	; (110f4 <ull_filter_lll_rl_idx+0xc4>)
   11086:	f240 23b6 	movw	r3, #694	; 0x2b6
   1108a:	f004 fe59 	bl	15d40 <printk>
   1108e:	4040      	eors	r0, r0
   11090:	f380 8811 	msr	BASEPRI, r0
   11094:	f04f 0003 	mov.w	r0, #3
   11098:	df02      	svc	2
		LL_ASSERT(wl[devmatch_id].taken);
   1109a:	4d12      	ldr	r5, [pc, #72]	; (110e4 <ull_filter_lll_rl_idx+0xb4>)
   1109c:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
   110a0:	07da      	lsls	r2, r3, #31
   110a2:	d4cf      	bmi.n	11044 <ull_filter_lll_rl_idx+0x14>
   110a4:	4a11      	ldr	r2, [pc, #68]	; (110ec <ull_filter_lll_rl_idx+0xbc>)
   110a6:	4915      	ldr	r1, [pc, #84]	; (110fc <ull_filter_lll_rl_idx+0xcc>)
   110a8:	4812      	ldr	r0, [pc, #72]	; (110f4 <ull_filter_lll_rl_idx+0xc4>)
   110aa:	f240 23b7 	movw	r3, #695	; 0x2b7
   110ae:	f004 fe47 	bl	15d40 <printk>
   110b2:	4040      	eors	r0, r0
   110b4:	f380 8811 	msr	BASEPRI, r0
   110b8:	f04f 0003 	mov.w	r0, #3
   110bc:	df02      	svc	2
		i = wl[devmatch_id].rl_idx;
   110be:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   110c2:	7860      	ldrb	r0, [r4, #1]
   110c4:	e7c1      	b.n	1104a <ull_filter_lll_rl_idx+0x1a>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   110c6:	4a09      	ldr	r2, [pc, #36]	; (110ec <ull_filter_lll_rl_idx+0xbc>)
   110c8:	490d      	ldr	r1, [pc, #52]	; (11100 <ull_filter_lll_rl_idx+0xd0>)
   110ca:	480a      	ldr	r0, [pc, #40]	; (110f4 <ull_filter_lll_rl_idx+0xc4>)
   110cc:	f240 23ba 	movw	r3, #698	; 0x2ba
   110d0:	f004 fe36 	bl	15d40 <printk>
   110d4:	4040      	eors	r0, r0
   110d6:	f380 8811 	msr	BASEPRI, r0
   110da:	f04f 0003 	mov.w	r0, #3
   110de:	df02      	svc	2
   110e0:	e7b6      	b.n	11050 <ull_filter_lll_rl_idx+0x20>
   110e2:	bf00      	nop
   110e4:	20001dd8 	.word	0x20001dd8
   110e8:	20001c60 	.word	0x20001c60
   110ec:	00019f84 	.word	0x00019f84
   110f0:	0001a148 	.word	0x0001a148
   110f4:	000199cc 	.word	0x000199cc
   110f8:	00019fe8 	.word	0x00019fe8
   110fc:	0001a08c 	.word	0x0001a08c
   11100:	0001a0a4 	.word	0x0001a0a4

00011104 <ull_filter_lll_rl_irk_idx>:
{
   11104:	b510      	push	{r4, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   11106:	4b20      	ldr	r3, [pc, #128]	; (11188 <ull_filter_lll_rl_irk_idx+0x84>)
   11108:	781b      	ldrb	r3, [r3, #0]
   1110a:	4283      	cmp	r3, r0
{
   1110c:	4604      	mov	r4, r0
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1110e:	d90c      	bls.n	1112a <ull_filter_lll_rl_irk_idx+0x26>
	i = peer_irk_rl_ids[irkmatch_id];
   11110:	4b1e      	ldr	r3, [pc, #120]	; (1118c <ull_filter_lll_rl_irk_idx+0x88>)
   11112:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   11114:	2c07      	cmp	r4, #7
   11116:	d819      	bhi.n	1114c <ull_filter_lll_rl_irk_idx+0x48>
	LL_ASSERT(rl[i].taken);
   11118:	4b1d      	ldr	r3, [pc, #116]	; (11190 <ull_filter_lll_rl_irk_idx+0x8c>)
   1111a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1111e:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   11122:	07db      	lsls	r3, r3, #31
   11124:	d520      	bpl.n	11168 <ull_filter_lll_rl_irk_idx+0x64>
}
   11126:	4620      	mov	r0, r4
   11128:	bd10      	pop	{r4, pc}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1112a:	4a1a      	ldr	r2, [pc, #104]	; (11194 <ull_filter_lll_rl_irk_idx+0x90>)
   1112c:	491a      	ldr	r1, [pc, #104]	; (11198 <ull_filter_lll_rl_irk_idx+0x94>)
   1112e:	481b      	ldr	r0, [pc, #108]	; (1119c <ull_filter_lll_rl_irk_idx+0x98>)
   11130:	f240 23c6 	movw	r3, #710	; 0x2c6
   11134:	f004 fe04 	bl	15d40 <printk>
   11138:	4040      	eors	r0, r0
   1113a:	f380 8811 	msr	BASEPRI, r0
   1113e:	f04f 0003 	mov.w	r0, #3
   11142:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   11144:	4b11      	ldr	r3, [pc, #68]	; (1118c <ull_filter_lll_rl_irk_idx+0x88>)
   11146:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   11148:	2c07      	cmp	r4, #7
   1114a:	d9e5      	bls.n	11118 <ull_filter_lll_rl_irk_idx+0x14>
   1114c:	4a11      	ldr	r2, [pc, #68]	; (11194 <ull_filter_lll_rl_irk_idx+0x90>)
   1114e:	4914      	ldr	r1, [pc, #80]	; (111a0 <ull_filter_lll_rl_irk_idx+0x9c>)
   11150:	4812      	ldr	r0, [pc, #72]	; (1119c <ull_filter_lll_rl_irk_idx+0x98>)
   11152:	f44f 7332 	mov.w	r3, #712	; 0x2c8
   11156:	f004 fdf3 	bl	15d40 <printk>
   1115a:	4040      	eors	r0, r0
   1115c:	f380 8811 	msr	BASEPRI, r0
   11160:	f04f 0003 	mov.w	r0, #3
   11164:	df02      	svc	2
   11166:	e7d7      	b.n	11118 <ull_filter_lll_rl_irk_idx+0x14>
	LL_ASSERT(rl[i].taken);
   11168:	4a0a      	ldr	r2, [pc, #40]	; (11194 <ull_filter_lll_rl_irk_idx+0x90>)
   1116a:	490e      	ldr	r1, [pc, #56]	; (111a4 <ull_filter_lll_rl_irk_idx+0xa0>)
   1116c:	480b      	ldr	r0, [pc, #44]	; (1119c <ull_filter_lll_rl_irk_idx+0x98>)
   1116e:	f240 23c9 	movw	r3, #713	; 0x2c9
   11172:	f004 fde5 	bl	15d40 <printk>
   11176:	4040      	eors	r0, r0
   11178:	f380 8811 	msr	BASEPRI, r0
   1117c:	f04f 0003 	mov.w	r0, #3
   11180:	df02      	svc	2
}
   11182:	4620      	mov	r0, r4
   11184:	bd10      	pop	{r4, pc}
   11186:	bf00      	nop
   11188:	2000224e 	.word	0x2000224e
   1118c:	20001bd8 	.word	0x20001bd8
   11190:	20001c60 	.word	0x20001c60
   11194:	00019f84 	.word	0x00019f84
   11198:	0001a154 	.word	0x0001a154
   1119c:	000199cc 	.word	0x000199cc
   111a0:	0001a174 	.word	0x0001a174
   111a4:	0001a148 	.word	0x0001a148

000111a8 <ull_filter_lll_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   111a8:	2807      	cmp	r0, #7
   111aa:	d823      	bhi.n	111f4 <ull_filter_lll_irk_whitelisted+0x4c>
{
   111ac:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(rl[rl_idx].taken);
   111ae:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   111b2:	4e11      	ldr	r6, [pc, #68]	; (111f8 <ull_filter_lll_irk_whitelisted+0x50>)
   111b4:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   111b8:	07db      	lsls	r3, r3, #31
   111ba:	4604      	mov	r4, r0
   111bc:	ea4f 0580 	mov.w	r5, r0, lsl #2
   111c0:	d505      	bpl.n	111ce <ull_filter_lll_irk_whitelisted+0x26>
	return rl[rl_idx].wl;
   111c2:	442c      	add	r4, r5
   111c4:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   111c8:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   111cc:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   111ce:	4a0b      	ldr	r2, [pc, #44]	; (111fc <ull_filter_lll_irk_whitelisted+0x54>)
   111d0:	490b      	ldr	r1, [pc, #44]	; (11200 <ull_filter_lll_irk_whitelisted+0x58>)
   111d2:	480c      	ldr	r0, [pc, #48]	; (11204 <ull_filter_lll_irk_whitelisted+0x5c>)
   111d4:	f44f 7335 	mov.w	r3, #724	; 0x2d4
   111d8:	f004 fdb2 	bl	15d40 <printk>
   111dc:	4040      	eors	r0, r0
   111de:	f380 8811 	msr	BASEPRI, r0
   111e2:	f04f 0003 	mov.w	r0, #3
   111e6:	df02      	svc	2
	return rl[rl_idx].wl;
   111e8:	442c      	add	r4, r5
   111ea:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   111ee:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   111f2:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   111f4:	2000      	movs	r0, #0
}
   111f6:	4770      	bx	lr
   111f8:	20001c60 	.word	0x20001c60
   111fc:	00019f84 	.word	0x00019f84
   11200:	00019fd4 	.word	0x00019fd4
   11204:	000199cc 	.word	0x000199cc

00011208 <ull_filter_lll_get>:
		return &wl_filter;
   11208:	4a03      	ldr	r2, [pc, #12]	; (11218 <ull_filter_lll_get+0x10>)
   1120a:	4b04      	ldr	r3, [pc, #16]	; (1121c <ull_filter_lll_get+0x14>)
}
   1120c:	2800      	cmp	r0, #0
   1120e:	bf0c      	ite	eq
   11210:	4610      	moveq	r0, r2
   11212:	4618      	movne	r0, r3
   11214:	4770      	bx	lr
   11216:	bf00      	nop
   11218:	20001da0 	.word	0x20001da0
   1121c:	20001e18 	.word	0x20001e18

00011220 <ull_filter_lll_rl_idx_allowed>:
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   11220:	4b14      	ldr	r3, [pc, #80]	; (11274 <ull_filter_lll_rl_idx_allowed+0x54>)
   11222:	781b      	ldrb	r3, [r3, #0]
   11224:	b19b      	cbz	r3, 1124e <ull_filter_lll_rl_idx_allowed+0x2e>
   11226:	2907      	cmp	r1, #7
{
   11228:	b570      	push	{r4, r5, r6, lr}
   1122a:	460c      	mov	r4, r1
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   1122c:	d80d      	bhi.n	1124a <ull_filter_lll_rl_idx_allowed+0x2a>
   1122e:	b960      	cbnz	r0, 1124a <ull_filter_lll_rl_idx_allowed+0x2a>
	LL_ASSERT(rl[rl_idx].taken);
   11230:	4e11      	ldr	r6, [pc, #68]	; (11278 <ull_filter_lll_rl_idx_allowed+0x58>)
   11232:	eb01 0381 	add.w	r3, r1, r1, lsl #2
   11236:	008d      	lsls	r5, r1, #2
   11238:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   1123c:	07da      	lsls	r2, r3, #31
   1123e:	d50b      	bpl.n	11258 <ull_filter_lll_rl_idx_allowed+0x38>
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   11240:	442c      	add	r4, r5
   11242:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   11246:	0743      	lsls	r3, r0, #29
   11248:	d403      	bmi.n	11252 <ull_filter_lll_rl_idx_allowed+0x32>
		return true;
   1124a:	2001      	movs	r0, #1
}
   1124c:	bd70      	pop	{r4, r5, r6, pc}
		return true;
   1124e:	2001      	movs	r0, #1
}
   11250:	4770      	bx	lr
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   11252:	f3c0 1000 	ubfx	r0, r0, #4, #1
}
   11256:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   11258:	4a08      	ldr	r2, [pc, #32]	; (1127c <ull_filter_lll_rl_idx_allowed+0x5c>)
   1125a:	4909      	ldr	r1, [pc, #36]	; (11280 <ull_filter_lll_rl_idx_allowed+0x60>)
   1125c:	4809      	ldr	r0, [pc, #36]	; (11284 <ull_filter_lll_rl_idx_allowed+0x64>)
   1125e:	f44f 733f 	mov.w	r3, #764	; 0x2fc
   11262:	f004 fd6d 	bl	15d40 <printk>
   11266:	4040      	eors	r0, r0
   11268:	f380 8811 	msr	BASEPRI, r0
   1126c:	f04f 0003 	mov.w	r0, #3
   11270:	df02      	svc	2
   11272:	e7e5      	b.n	11240 <ull_filter_lll_rl_idx_allowed+0x20>
   11274:	2000224f 	.word	0x2000224f
   11278:	20001c60 	.word	0x20001c60
   1127c:	00019f84 	.word	0x00019f84
   11280:	00019fd4 	.word	0x00019fd4
   11284:	000199cc 	.word	0x000199cc

00011288 <ull_filter_lll_rl_addr_allowed>:
	if (*rl_idx != FILTER_IDX_NONE) {
   11288:	7813      	ldrb	r3, [r2, #0]
   1128a:	2bff      	cmp	r3, #255	; 0xff
   1128c:	d11c      	bne.n	112c8 <ull_filter_lll_rl_addr_allowed+0x40>
{
   1128e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11292:	4d19      	ldr	r5, [pc, #100]	; (112f8 <ull_filter_lll_rl_addr_allowed+0x70>)
   11294:	4606      	mov	r6, r0
	if (*rl_idx != FILTER_IDX_NONE) {
   11296:	2300      	movs	r3, #0
   11298:	1faf      	subs	r7, r5, #6
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   1129a:	eb03 0483 	add.w	r4, r3, r3, lsl #2
   1129e:	fa5f fe83 	uxtb.w	lr, r3
   112a2:	f817 4034 	ldrb.w	r4, [r7, r4, lsl #3]
   112a6:	f014 0001 	ands.w	r0, r4, #1
   112aa:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   112ae:	d003      	beq.n	112b8 <ull_filter_lll_rl_addr_allowed+0x30>
   112b0:	f3c4 1480 	ubfx	r4, r4, #6, #1
   112b4:	42b4      	cmp	r4, r6
   112b6:	d009      	beq.n	112cc <ull_filter_lll_rl_addr_allowed+0x44>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   112b8:	3301      	adds	r3, #1
   112ba:	2b08      	cmp	r3, #8
   112bc:	f105 0528 	add.w	r5, r5, #40	; 0x28
   112c0:	d1eb      	bne.n	1129a <ull_filter_lll_rl_addr_allowed+0x12>
		return true;
   112c2:	2001      	movs	r0, #1
}
   112c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return true;
   112c8:	2001      	movs	r0, #1
}
   112ca:	4770      	bx	lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   112cc:	1fac      	subs	r4, r5, #6
   112ce:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
				if (addr[j] != id_addr[j]) {
   112d2:	f814 af01 	ldrb.w	sl, [r4, #1]!
   112d6:	f818 9f01 	ldrb.w	r9, [r8, #1]!
   112da:	45ca      	cmp	sl, r9
   112dc:	d1ec      	bne.n	112b8 <ull_filter_lll_rl_addr_allowed+0x30>
			for (j = 0U; j < BDADDR_SIZE; j++) {
   112de:	42ac      	cmp	r4, r5
   112e0:	d1f7      	bne.n	112d2 <ull_filter_lll_rl_addr_allowed+0x4a>
				return !rl[i].pirk || rl[i].dev;
   112e2:	4463      	add	r3, ip
				*rl_idx = i;
   112e4:	f882 e000 	strb.w	lr, [r2]
				return !rl[i].pirk || rl[i].dev;
   112e8:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   112ec:	075a      	lsls	r2, r3, #29
   112ee:	d5e9      	bpl.n	112c4 <ull_filter_lll_rl_addr_allowed+0x3c>
   112f0:	f3c3 1000 	ubfx	r0, r3, #4, #1
   112f4:	e7e6      	b.n	112c4 <ull_filter_lll_rl_addr_allowed+0x3c>
   112f6:	bf00      	nop
   112f8:	20001c66 	.word	0x20001c66

000112fc <ull_filter_lll_rl_addr_resolve>:
{
   112fc:	b430      	push	{r4, r5}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   112fe:	4b0e      	ldr	r3, [pc, #56]	; (11338 <ull_filter_lll_rl_addr_resolve+0x3c>)
   11300:	781c      	ldrb	r4, [r3, #0]
   11302:	b174      	cbz	r4, 11322 <ull_filter_lll_rl_addr_resolve+0x26>
   11304:	2a07      	cmp	r2, #7
   11306:	d80c      	bhi.n	11322 <ull_filter_lll_rl_addr_resolve+0x26>
   11308:	4c0c      	ldr	r4, [pc, #48]	; (1133c <ull_filter_lll_rl_addr_resolve+0x40>)
   1130a:	eb02 0582 	add.w	r5, r2, r2, lsl #2
   1130e:	f814 5035 	ldrb.w	r5, [r4, r5, lsl #3]
   11312:	072b      	lsls	r3, r5, #28
   11314:	d505      	bpl.n	11322 <ull_filter_lll_rl_addr_resolve+0x26>
	if ((id_addr_type != 0U) && ((id_addr[5] & 0xc0) == 0x40)) {
   11316:	b120      	cbz	r0, 11322 <ull_filter_lll_rl_addr_resolve+0x26>
   11318:	794b      	ldrb	r3, [r1, #5]
   1131a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1131e:	2b40      	cmp	r3, #64	; 0x40
   11320:	d002      	beq.n	11328 <ull_filter_lll_rl_addr_resolve+0x2c>
}
   11322:	2000      	movs	r0, #0
   11324:	bc30      	pop	{r4, r5}
   11326:	4770      	bx	lr
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   11328:	2028      	movs	r0, #40	; 0x28
   1132a:	fb00 4002 	mla	r0, r0, r2, r4
   1132e:	3007      	adds	r0, #7
}
   11330:	bc30      	pop	{r4, r5}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   11332:	f005 bc4b 	b.w	16bcc <bt_rpa_irk_matches>
   11336:	bf00      	nop
   11338:	2000224f 	.word	0x2000224f
   1133c:	20001c60 	.word	0x20001c60

00011340 <ull_filter_lll_rl_enabled>:
	return rl_enable;
   11340:	4b02      	ldr	r3, [pc, #8]	; (1134c <ull_filter_lll_rl_enabled+0xc>)
   11342:	7818      	ldrb	r0, [r3, #0]
}
   11344:	3800      	subs	r0, #0
   11346:	bf18      	it	ne
   11348:	2001      	movne	r0, #1
   1134a:	4770      	bx	lr
   1134c:	2000224f 	.word	0x2000224f

00011350 <radio_nrf5_isr>:
static void mfy_ticker_job_idle_get(void *param);
static void ticker_op_job_disable(uint32_t status, void *op_context);
#endif
#endif /* CONFIG_BT_CTLR_LOW_LAT */

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   11350:	4668      	mov	r0, sp
   11352:	f020 0107 	bic.w	r1, r0, #7
   11356:	468d      	mov	sp, r1
   11358:	b501      	push	{r0, lr}
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_radio();

	isr_radio();
   1135a:	f001 fd47 	bl	12dec <isr_radio>

	ISR_DIRECT_PM();
   1135e:	f7f3 fad1 	bl	4904 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   11362:	f7f3 fc63 	bl	4c2c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   11366:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1136a:	4685      	mov	sp, r0
   1136c:	4770      	bx	lr
   1136e:	bf00      	nop

00011370 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(const void *arg)
{
   11370:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	lll_prof_enter_ull_high();

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   11372:	4b09      	ldr	r3, [pc, #36]	; (11398 <rtc0_nrf5_isr+0x28>)
   11374:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   11378:	b93a      	cbnz	r2, 1138a <rtc0_nrf5_isr+0x1a>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;

		ticker_trigger(0);
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   1137a:	2001      	movs	r0, #1
   1137c:	f7f7 fa04 	bl	8788 <mayfly_run>

	lll_prof_exit_ull_low();
#endif

	DEBUG_TICKER_ISR(0);
}
   11380:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   11384:	2002      	movs	r0, #2
   11386:	f7f7 b9ff 	b.w	8788 <mayfly_run>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   1138a:	2000      	movs	r0, #0
   1138c:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   11390:	f7f8 fc5a 	bl	9c48 <ticker_trigger>
   11394:	e7f1      	b.n	1137a <rtc0_nrf5_isr+0xa>
   11396:	bf00      	nop
   11398:	4000b000 	.word	0x4000b000

0001139c <swi_lll_nrf5_isr>:
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_lll();

	mayfly_run(TICKER_USER_ID_LLL);
   1139c:	2000      	movs	r0, #0
   1139e:	f7f7 b9f3 	b.w	8788 <mayfly_run>
   113a2:	bf00      	nop

000113a4 <isr_race>:
}

static void isr_race(void *param)
{
	/* NOTE: lll_disable could have a race with ... */
	radio_status_reset();
   113a4:	f001 be46 	b.w	13034 <radio_status_reset>

000113a8 <ticker_stop_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   113a8:	2801      	cmp	r0, #1
   113aa:	d800      	bhi.n	113ae <ticker_stop_op_cb+0x6>
   113ac:	4770      	bx	lr
{
   113ae:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   113b0:	4a06      	ldr	r2, [pc, #24]	; (113cc <ticker_stop_op_cb+0x24>)
   113b2:	4907      	ldr	r1, [pc, #28]	; (113d0 <ticker_stop_op_cb+0x28>)
   113b4:	4807      	ldr	r0, [pc, #28]	; (113d4 <ticker_stop_op_cb+0x2c>)
   113b6:	f240 23d5 	movw	r3, #725	; 0x2d5
   113ba:	f004 fcc1 	bl	15d40 <printk>
   113be:	4040      	eors	r0, r0
   113c0:	f380 8811 	msr	BASEPRI, r0
   113c4:	f04f 0003 	mov.w	r0, #3
   113c8:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   113ca:	bd08      	pop	{r3, pc}
   113cc:	0001a17c 	.word	0x0001a17c
   113d0:	0001a1c4 	.word	0x0001a1c4
   113d4:	000199cc 	.word	0x000199cc

000113d8 <ticker_start_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   113d8:	2801      	cmp	r0, #1
   113da:	d800      	bhi.n	113de <ticker_start_op_cb+0x6>
   113dc:	4770      	bx	lr
{
   113de:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   113e0:	4a06      	ldr	r2, [pc, #24]	; (113fc <ticker_start_op_cb+0x24>)
   113e2:	4907      	ldr	r1, [pc, #28]	; (11400 <ticker_start_op_cb+0x28>)
   113e4:	4807      	ldr	r0, [pc, #28]	; (11404 <ticker_start_op_cb+0x2c>)
   113e6:	f44f 7338 	mov.w	r3, #736	; 0x2e0
   113ea:	f004 fca9 	bl	15d40 <printk>
   113ee:	4040      	eors	r0, r0
   113f0:	f380 8811 	msr	BASEPRI, r0
   113f4:	f04f 0003 	mov.w	r0, #3
   113f8:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   113fa:	bd08      	pop	{r3, pc}
   113fc:	0001a17c 	.word	0x0001a17c
   11400:	0001a1c4 	.word	0x0001a1c4
   11404:	000199cc 	.word	0x000199cc

00011408 <preempt_ticker_start.isra.0>:

static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   11408:	b530      	push	{r4, r5, lr}
	preempt_to = MAX(evt->ticks_active_to_start,
			 evt->ticks_xtal_to_start) -
			 evt->ticks_preempt_to_start;

	/* Setup pre empt timeout */
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1140a:	2200      	movs	r2, #0
static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   1140c:	b08b      	sub	sp, #44	; 0x2c
	evt = HDR_LLL2EVT(prepare_param->param);
   1140e:	680b      	ldr	r3, [r1, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   11410:	4c15      	ldr	r4, [pc, #84]	; (11468 <preempt_ticker_start.isra.0+0x60>)
   11412:	4916      	ldr	r1, [pc, #88]	; (1146c <preempt_ticker_start.isra.0+0x64>)
   11414:	9208      	str	r2, [sp, #32]
   11416:	e9cd 2203 	strd	r2, r2, [sp, #12]
   1141a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   1141e:	9206      	str	r2, [sp, #24]
   11420:	9407      	str	r4, [sp, #28]
   11422:	9105      	str	r1, [sp, #20]
	preempt_to = MAX(evt->ticks_active_to_start,
   11424:	e9d3 5400 	ldrd	r5, r4, [r3]
   11428:	6899      	ldr	r1, [r3, #8]
   1142a:	42a5      	cmp	r5, r4
   1142c:	bf2c      	ite	cs
   1142e:	ebc1 0105 	rsbcs	r1, r1, r5
   11432:	ebc1 0104 	rsbcc	r1, r1, r4
static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   11436:	4603      	mov	r3, r0
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   11438:	9100      	str	r1, [sp, #0]
   1143a:	4610      	mov	r0, r2
   1143c:	4611      	mov	r1, r2
   1143e:	f7f8 fc71 	bl	9d24 <ticker_start>
			   TICKER_NULL_REMAINDER,
			   TICKER_NULL_LAZY,
			   TICKER_NULL_SLOT,
			   preempt_ticker_cb, NULL,
			   ticker_start_op_cb, NULL);
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   11442:	2802      	cmp	r0, #2
   11444:	d801      	bhi.n	1144a <preempt_ticker_start.isra.0+0x42>
		  (ret == TICKER_STATUS_FAILURE) ||
		  (ret == TICKER_STATUS_BUSY));
}
   11446:	b00b      	add	sp, #44	; 0x2c
   11448:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1144a:	4a09      	ldr	r2, [pc, #36]	; (11470 <preempt_ticker_start.isra.0+0x68>)
   1144c:	4909      	ldr	r1, [pc, #36]	; (11474 <preempt_ticker_start.isra.0+0x6c>)
   1144e:	480a      	ldr	r0, [pc, #40]	; (11478 <preempt_ticker_start.isra.0+0x70>)
   11450:	f240 23fe 	movw	r3, #766	; 0x2fe
   11454:	f004 fc74 	bl	15d40 <printk>
   11458:	4040      	eors	r0, r0
   1145a:	f380 8811 	msr	BASEPRI, r0
   1145e:	f04f 0003 	mov.w	r0, #3
   11462:	df02      	svc	2
}
   11464:	b00b      	add	sp, #44	; 0x2c
   11466:	bd30      	pop	{r4, r5, pc}
   11468:	000113d9 	.word	0x000113d9
   1146c:	000115b5 	.word	0x000115b5
   11470:	0001a17c 	.word	0x0001a17c
   11474:	0001a1e4 	.word	0x0001a1e4
   11478:	000199cc 	.word	0x000199cc

0001147c <preempt>:
			     0, &mfy);
	LL_ASSERT(!ret);
}

static void preempt(void *param)
{
   1147c:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll_prepare_cb_t resume_cb;
	struct lll_event *next;
	uint8_t idx;
	int ret;

	if (!event.curr.abort_cb || !event.curr.param) {
   1147e:	4e48      	ldr	r6, [pc, #288]	; (115a0 <preempt+0x124>)
   11480:	68b3      	ldr	r3, [r6, #8]
{
   11482:	b089      	sub	sp, #36	; 0x24
	if (!event.curr.abort_cb || !event.curr.param) {
   11484:	b1ab      	cbz	r3, 114b2 <preempt+0x36>
   11486:	6833      	ldr	r3, [r6, #0]
   11488:	b19b      	cbz	r3, 114b2 <preempt+0x36>
		return;
	}

	idx = UINT8_MAX;
   1148a:	23ff      	movs	r3, #255	; 0xff
	next = ull_prepare_dequeue_iter(&idx);
   1148c:	f10d 000a 	add.w	r0, sp, #10
	idx = UINT8_MAX;
   11490:	f88d 300a 	strb.w	r3, [sp, #10]
	next = ull_prepare_dequeue_iter(&idx);
   11494:	f7fb fab2 	bl	c9fc <ull_prepare_dequeue_iter>
	if (!next) {
   11498:	4604      	mov	r4, r0
   1149a:	b150      	cbz	r0, 114b2 <preempt+0x36>
		return;
	}

	while (next && (next->is_aborted || next->is_resume)) {
   1149c:	7f23      	ldrb	r3, [r4, #28]
   1149e:	f013 0503 	ands.w	r5, r3, #3
		next = ull_prepare_dequeue_iter(&idx);
   114a2:	f10d 000a 	add.w	r0, sp, #10
	while (next && (next->is_aborted || next->is_resume)) {
   114a6:	d006      	beq.n	114b6 <preempt+0x3a>
		next = ull_prepare_dequeue_iter(&idx);
   114a8:	f7fb faa8 	bl	c9fc <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   114ac:	4604      	mov	r4, r0
   114ae:	2800      	cmp	r0, #0
   114b0:	d1f4      	bne.n	1149c <preempt+0x20>
			return;
		}
	} while (next->is_aborted || next->is_resume);

	preempt_ticker_start(&next->prepare_param);
}
   114b2:	b009      	add	sp, #36	; 0x24
   114b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = event.curr.is_abort_cb(next->prepare_param.param,
   114b6:	e9d6 1300 	ldrd	r1, r3, [r6]
   114ba:	68e0      	ldr	r0, [r4, #12]
   114bc:	aa03      	add	r2, sp, #12
   114be:	4798      	blx	r3
	if (!ret) {
   114c0:	4607      	mov	r7, r0
   114c2:	2800      	cmp	r0, #0
   114c4:	d062      	beq.n	1158c <preempt+0x110>
	event.curr.abort_cb(NULL, event.curr.param);
   114c6:	68b3      	ldr	r3, [r6, #8]
   114c8:	6831      	ldr	r1, [r6, #0]
   114ca:	4628      	mov	r0, r5
   114cc:	4798      	blx	r3
	if (ret == -EAGAIN) {
   114ce:	f117 0f0b 	cmn.w	r7, #11
   114d2:	d019      	beq.n	11508 <preempt+0x8c>
		LL_ASSERT(ret == -ECANCELED);
   114d4:	3748      	adds	r7, #72	; 0x48
   114d6:	d010      	beq.n	114fa <preempt+0x7e>
   114d8:	4a32      	ldr	r2, [pc, #200]	; (115a4 <preempt+0x128>)
   114da:	4933      	ldr	r1, [pc, #204]	; (115a8 <preempt+0x12c>)
   114dc:	4833      	ldr	r0, [pc, #204]	; (115ac <preempt+0x130>)
   114de:	f240 3351 	movw	r3, #849	; 0x351
   114e2:	f004 fc2d 	bl	15d40 <printk>
   114e6:	4040      	eors	r0, r0
   114e8:	f380 8811 	msr	BASEPRI, r0
   114ec:	f04f 0003 	mov.w	r0, #3
   114f0:	df02      	svc	2
   114f2:	e002      	b.n	114fa <preempt+0x7e>
	} while (next->is_aborted || next->is_resume);
   114f4:	7f03      	ldrb	r3, [r0, #28]
   114f6:	079b      	lsls	r3, r3, #30
   114f8:	d042      	beq.n	11580 <preempt+0x104>
		next = ull_prepare_dequeue_iter(&idx);
   114fa:	f10d 000a 	add.w	r0, sp, #10
   114fe:	f7fb fa7d 	bl	c9fc <ull_prepare_dequeue_iter>
		if (!next) {
   11502:	2800      	cmp	r0, #0
   11504:	d1f6      	bne.n	114f4 <preempt+0x78>
   11506:	e7d4      	b.n	114b2 <preempt+0x36>
		iter_idx = UINT8_MAX;
   11508:	24ff      	movs	r4, #255	; 0xff
		iter = ull_prepare_dequeue_iter(&iter_idx);
   1150a:	f10d 000b 	add.w	r0, sp, #11
		iter_idx = UINT8_MAX;
   1150e:	f88d 400b 	strb.w	r4, [sp, #11]
		iter = ull_prepare_dequeue_iter(&iter_idx);
   11512:	f7fb fa73 	bl	c9fc <ull_prepare_dequeue_iter>
		while (iter) {
   11516:	bb58      	cbnz	r0, 11570 <preempt+0xf4>
	struct lll_prepare_param prepare_param = {0};
   11518:	2100      	movs	r1, #0
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1151a:	2301      	movs	r3, #1
	prepare_param.param = event.curr.param;
   1151c:	6834      	ldr	r4, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1151e:	9300      	str	r3, [sp, #0]
	struct lll_prepare_param prepare_param = {0};
   11520:	e9cd 1104 	strd	r1, r1, [sp, #16]
   11524:	9106      	str	r1, [sp, #24]
	event.curr.param = NULL;
   11526:	6031      	str	r1, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   11528:	9b03      	ldr	r3, [sp, #12]
	prepare_param.param = event.curr.param;
   1152a:	9407      	str	r4, [sp, #28]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1152c:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
   11530:	aa04      	add	r2, sp, #16
   11532:	f7fb fa21 	bl	c978 <ull_prepare_enqueue>
		LL_ASSERT(!ret);
   11536:	2800      	cmp	r0, #0
   11538:	d0df      	beq.n	114fa <preempt+0x7e>
   1153a:	4a1a      	ldr	r2, [pc, #104]	; (115a4 <preempt+0x128>)
   1153c:	491c      	ldr	r1, [pc, #112]	; (115b0 <preempt+0x134>)
   1153e:	481b      	ldr	r0, [pc, #108]	; (115ac <preempt+0x130>)
   11540:	f240 334f 	movw	r3, #847	; 0x34f
   11544:	f004 fbfc 	bl	15d40 <printk>
   11548:	4040      	eors	r0, r0
   1154a:	f380 8811 	msr	BASEPRI, r0
   1154e:	f04f 0003 	mov.w	r0, #3
   11552:	df02      	svc	2
   11554:	e7d1      	b.n	114fa <preempt+0x7e>
				iter->is_aborted = 1;
   11556:	f043 0302 	orr.w	r3, r3, #2
   1155a:	7703      	strb	r3, [r0, #28]
				iter->abort_cb(&iter->prepare_param,
   1155c:	6983      	ldr	r3, [r0, #24]
   1155e:	4798      	blx	r3
				idx = UINT8_MAX;
   11560:	f88d 400a 	strb.w	r4, [sp, #10]
			iter = ull_prepare_dequeue_iter(&iter_idx);
   11564:	f10d 000b 	add.w	r0, sp, #11
   11568:	f7fb fa48 	bl	c9fc <ull_prepare_dequeue_iter>
		while (iter) {
   1156c:	2800      	cmp	r0, #0
   1156e:	d0d3      	beq.n	11518 <preempt+0x9c>
			if (!iter->is_aborted &&
   11570:	7f03      	ldrb	r3, [r0, #28]
   11572:	079a      	lsls	r2, r3, #30
   11574:	d4f6      	bmi.n	11564 <preempt+0xe8>
			    event.curr.param == iter->prepare_param.param) {
   11576:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   11578:	6831      	ldr	r1, [r6, #0]
   1157a:	4291      	cmp	r1, r2
   1157c:	d1f2      	bne.n	11564 <preempt+0xe8>
   1157e:	e7ea      	b.n	11556 <preempt+0xda>
	preempt_ticker_start(&next->prepare_param);
   11580:	68c1      	ldr	r1, [r0, #12]
   11582:	6800      	ldr	r0, [r0, #0]
   11584:	f7ff ff40 	bl	11408 <preempt_ticker_start.isra.0>
}
   11588:	b009      	add	sp, #36	; 0x24
   1158a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next->is_aborted = 1;
   1158c:	7f23      	ldrb	r3, [r4, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   1158e:	69a2      	ldr	r2, [r4, #24]
   11590:	68e1      	ldr	r1, [r4, #12]
		next->is_aborted = 1;
   11592:	f043 0302 	orr.w	r3, r3, #2
   11596:	7723      	strb	r3, [r4, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   11598:	4620      	mov	r0, r4
   1159a:	4790      	blx	r2
		goto preempt_next;
   1159c:	e7ad      	b.n	114fa <preempt+0x7e>
   1159e:	bf00      	nop
   115a0:	20001e50 	.word	0x20001e50
   115a4:	0001a17c 	.word	0x0001a17c
   115a8:	0001a20c 	.word	0x0001a20c
   115ac:	000199cc 	.word	0x000199cc
   115b0:	00019c10 	.word	0x00019c10

000115b4 <preempt_ticker_cb>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   115b4:	2200      	movs	r2, #0
{
   115b6:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   115b8:	4611      	mov	r1, r2
   115ba:	4b0a      	ldr	r3, [pc, #40]	; (115e4 <preempt_ticker_cb+0x30>)
   115bc:	2001      	movs	r0, #1
   115be:	f7f7 f88f 	bl	86e0 <mayfly_enqueue>
	LL_ASSERT(!ret);
   115c2:	b900      	cbnz	r0, 115c6 <preempt_ticker_cb+0x12>
}
   115c4:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   115c6:	4a08      	ldr	r2, [pc, #32]	; (115e8 <preempt_ticker_cb+0x34>)
   115c8:	4908      	ldr	r1, [pc, #32]	; (115ec <preempt_ticker_cb+0x38>)
   115ca:	4809      	ldr	r0, [pc, #36]	; (115f0 <preempt_ticker_cb+0x3c>)
   115cc:	f44f 7343 	mov.w	r3, #780	; 0x30c
   115d0:	f004 fbb6 	bl	15d40 <printk>
   115d4:	4040      	eors	r0, r0
   115d6:	f380 8811 	msr	BASEPRI, r0
   115da:	f04f 0003 	mov.w	r0, #3
   115de:	df02      	svc	2
}
   115e0:	bd08      	pop	{r3, pc}
   115e2:	bf00      	nop
   115e4:	20000484 	.word	0x20000484
   115e8:	0001a17c 	.word	0x0001a17c
   115ec:	00019c10 	.word	0x00019c10
   115f0:	000199cc 	.word	0x000199cc

000115f4 <lll_init>:
{
   115f4:	b510      	push	{r4, lr}
   115f6:	4816      	ldr	r0, [pc, #88]	; (11650 <lll_init+0x5c>)
   115f8:	f003 f9a8 	bl	1494c <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   115fc:	4b15      	ldr	r3, [pc, #84]	; (11654 <lll_init+0x60>)
   115fe:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   11600:	b310      	cbz	r0, 11648 <lll_init+0x54>
	event.curr.abort_cb = NULL;
   11602:	4b15      	ldr	r3, [pc, #84]	; (11658 <lll_init+0x64>)
   11604:	2400      	movs	r4, #0
   11606:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
   11608:	f000 faa0 	bl	11b4c <lll_clock_init>
	if (err < 0) {
   1160c:	2800      	cmp	r0, #0
   1160e:	db1a      	blt.n	11646 <lll_init+0x52>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   11610:	4622      	mov	r2, r4
   11612:	4621      	mov	r1, r4
   11614:	2001      	movs	r0, #1
   11616:	f7f3 f95d 	bl	48d4 <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   1161a:	4622      	mov	r2, r4
   1161c:	2101      	movs	r1, #1
   1161e:	200b      	movs	r0, #11
   11620:	f7f3 f958 	bl	48d4 <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   11624:	4622      	mov	r2, r4
   11626:	4621      	mov	r1, r4
   11628:	2018      	movs	r0, #24
   1162a:	f7f3 f953 	bl	48d4 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   1162e:	2001      	movs	r0, #1
   11630:	f7f3 f91e 	bl	4870 <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   11634:	200b      	movs	r0, #11
   11636:	f7f3 f91b 	bl	4870 <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   1163a:	2018      	movs	r0, #24
   1163c:	f7f3 f918 	bl	4870 <arch_irq_enable>
	radio_setup();
   11640:	f001 fc04 	bl	12e4c <radio_setup>
	return 0;
   11644:	4620      	mov	r0, r4
}
   11646:	bd10      	pop	{r4, pc}
		return -ENODEV;
   11648:	f06f 0012 	mvn.w	r0, #18
}
   1164c:	bd10      	pop	{r4, pc}
   1164e:	bf00      	nop
   11650:	0001a218 	.word	0x0001a218
   11654:	20001e4c 	.word	0x20001e4c
   11658:	20001e50 	.word	0x20001e50

0001165c <lll_csrand_get>:
	return entropy_get_entropy(dev_entropy, buf, len);
   1165c:	4a04      	ldr	r2, [pc, #16]	; (11670 <lll_csrand_get+0x14>)
{
   1165e:	b410      	push	{r4}
   11660:	4603      	mov	r3, r0
	return entropy_get_entropy(dev_entropy, buf, len);
   11662:	6810      	ldr	r0, [r2, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   11664:	6884      	ldr	r4, [r0, #8]
   11666:	b28a      	uxth	r2, r1
   11668:	4619      	mov	r1, r3
   1166a:	6823      	ldr	r3, [r4, #0]
}
   1166c:	bc10      	pop	{r4}
   1166e:	4718      	bx	r3
   11670:	20001e4c 	.word	0x20001e4c

00011674 <lll_csrand_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   11674:	4b08      	ldr	r3, [pc, #32]	; (11698 <lll_csrand_isr_get+0x24>)
   11676:	681b      	ldr	r3, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   11678:	689a      	ldr	r2, [r3, #8]
{
   1167a:	b410      	push	{r4}
   1167c:	6854      	ldr	r4, [r2, #4]
   1167e:	b134      	cbz	r4, 1168e <lll_csrand_isr_get+0x1a>
   11680:	b28a      	uxth	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   11682:	46a4      	mov	ip, r4
   11684:	4601      	mov	r1, r0
}
   11686:	bc10      	pop	{r4}
   11688:	4618      	mov	r0, r3
   1168a:	2300      	movs	r3, #0
   1168c:	4760      	bx	ip
   1168e:	f06f 0022 	mvn.w	r0, #34	; 0x22
   11692:	bc10      	pop	{r4}
   11694:	4770      	bx	lr
   11696:	bf00      	nop
   11698:	20001e4c 	.word	0x20001e4c

0001169c <lll_reset>:
}
   1169c:	2000      	movs	r0, #0
   1169e:	4770      	bx	lr

000116a0 <lll_disable>:
{
   116a0:	b530      	push	{r4, r5, lr}
	if (!param || (param == event.curr.param)) {
   116a2:	4604      	mov	r4, r0
{
   116a4:	b083      	sub	sp, #12
	if (!param || (param == event.curr.param)) {
   116a6:	b378      	cbz	r0, 11708 <lll_disable+0x68>
   116a8:	4b23      	ldr	r3, [pc, #140]	; (11738 <lll_disable+0x98>)
   116aa:	681a      	ldr	r2, [r3, #0]
   116ac:	4282      	cmp	r2, r0
   116ae:	d025      	beq.n	116fc <lll_disable+0x5c>
		idx = UINT8_MAX;
   116b0:	25ff      	movs	r5, #255	; 0xff
		next = ull_prepare_dequeue_iter(&idx);
   116b2:	f10d 0007 	add.w	r0, sp, #7
		idx = UINT8_MAX;
   116b6:	f88d 5007 	strb.w	r5, [sp, #7]
		next = ull_prepare_dequeue_iter(&idx);
   116ba:	f7fb f99f 	bl	c9fc <ull_prepare_dequeue_iter>
		while (next) {
   116be:	b938      	cbnz	r0, 116d0 <lll_disable+0x30>
   116c0:	e01a      	b.n	116f8 <lll_disable+0x58>
			    (!param || (param == next->prepare_param.param))) {
   116c2:	428c      	cmp	r4, r1
   116c4:	d00a      	beq.n	116dc <lll_disable+0x3c>
			next = ull_prepare_dequeue_iter(&idx);
   116c6:	f10d 0007 	add.w	r0, sp, #7
   116ca:	f7fb f997 	bl	c9fc <ull_prepare_dequeue_iter>
		while (next) {
   116ce:	b198      	cbz	r0, 116f8 <lll_disable+0x58>
			if (!next->is_aborted &&
   116d0:	7f03      	ldrb	r3, [r0, #28]
   116d2:	079b      	lsls	r3, r3, #30
   116d4:	d4f7      	bmi.n	116c6 <lll_disable+0x26>
				next->is_aborted = 1;
   116d6:	68c1      	ldr	r1, [r0, #12]
			if (!next->is_aborted &&
   116d8:	2c00      	cmp	r4, #0
   116da:	d1f2      	bne.n	116c2 <lll_disable+0x22>
				next->is_aborted = 1;
   116dc:	7f03      	ldrb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   116de:	6982      	ldr	r2, [r0, #24]
				next->is_aborted = 1;
   116e0:	f043 0302 	orr.w	r3, r3, #2
   116e4:	7703      	strb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   116e6:	4790      	blx	r2
			next = ull_prepare_dequeue_iter(&idx);
   116e8:	f10d 0007 	add.w	r0, sp, #7
				idx = UINT8_MAX;
   116ec:	f88d 5007 	strb.w	r5, [sp, #7]
			next = ull_prepare_dequeue_iter(&idx);
   116f0:	f7fb f984 	bl	c9fc <ull_prepare_dequeue_iter>
		while (next) {
   116f4:	2800      	cmp	r0, #0
   116f6:	d1eb      	bne.n	116d0 <lll_disable+0x30>
}
   116f8:	b003      	add	sp, #12
   116fa:	bd30      	pop	{r4, r5, pc}
		if (event.curr.abort_cb && event.curr.param) {
   116fc:	689b      	ldr	r3, [r3, #8]
   116fe:	b16b      	cbz	r3, 1171c <lll_disable+0x7c>
   11700:	4621      	mov	r1, r4
			event.curr.abort_cb(NULL, event.curr.param);
   11702:	2000      	movs	r0, #0
   11704:	4798      	blx	r3
   11706:	e7d3      	b.n	116b0 <lll_disable+0x10>
		if (event.curr.abort_cb && event.curr.param) {
   11708:	4a0b      	ldr	r2, [pc, #44]	; (11738 <lll_disable+0x98>)
   1170a:	6893      	ldr	r3, [r2, #8]
   1170c:	2b00      	cmp	r3, #0
   1170e:	d0cf      	beq.n	116b0 <lll_disable+0x10>
   11710:	6811      	ldr	r1, [r2, #0]
   11712:	2900      	cmp	r1, #0
   11714:	d0cc      	beq.n	116b0 <lll_disable+0x10>
			event.curr.abort_cb(NULL, event.curr.param);
   11716:	2000      	movs	r0, #0
   11718:	4798      	blx	r3
   1171a:	e7c9      	b.n	116b0 <lll_disable+0x10>
			LL_ASSERT(!param);
   1171c:	4a07      	ldr	r2, [pc, #28]	; (1173c <lll_disable+0x9c>)
   1171e:	4908      	ldr	r1, [pc, #32]	; (11740 <lll_disable+0xa0>)
   11720:	4808      	ldr	r0, [pc, #32]	; (11744 <lll_disable+0xa4>)
   11722:	23fc      	movs	r3, #252	; 0xfc
   11724:	f004 fb0c 	bl	15d40 <printk>
   11728:	4040      	eors	r0, r0
   1172a:	f380 8811 	msr	BASEPRI, r0
   1172e:	f04f 0003 	mov.w	r0, #3
   11732:	df02      	svc	2
   11734:	e7bc      	b.n	116b0 <lll_disable+0x10>
   11736:	bf00      	nop
   11738:	20001e50 	.word	0x20001e50
   1173c:	0001a17c 	.word	0x0001a17c
   11740:	0001a21c 	.word	0x0001a21c
   11744:	000199cc 	.word	0x000199cc

00011748 <lll_prepare_done>:
}
   11748:	2000      	movs	r0, #0
   1174a:	4770      	bx	lr

0001174c <lll_done>:
{
   1174c:	b538      	push	{r3, r4, r5, lr}
   1174e:	4604      	mov	r4, r0
	next = ull_prepare_dequeue_get();
   11750:	f7fb f946 	bl	c9e0 <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   11754:	b15c      	cbz	r4, 1176e <lll_done+0x22>
   11756:	b318      	cbz	r0, 117a0 <lll_done+0x54>
			ull = HDR_ULL(((struct lll_hdr *)param)->parent);
   11758:	6824      	ldr	r4, [r4, #0]
   1175a:	3410      	adds	r4, #16
	ull_prepare_dequeue(TICKER_USER_ID_LLL);
   1175c:	2000      	movs	r0, #0
   1175e:	f7fb f96b 	bl	ca38 <ull_prepare_dequeue>
	evdone = ull_event_done(ull);
   11762:	4620      	mov	r0, r4
   11764:	f7fb f9d4 	bl	cb10 <ull_event_done>
	LL_ASSERT(evdone);
   11768:	b158      	cbz	r0, 11782 <lll_done+0x36>
}
   1176a:	2000      	movs	r0, #0
   1176c:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(event.curr.abort_cb);
   1176e:	4d1a      	ldr	r5, [pc, #104]	; (117d8 <lll_done+0x8c>)
   11770:	68ab      	ldr	r3, [r5, #8]
   11772:	b31b      	cbz	r3, 117bc <lll_done+0x70>
		param = event.curr.param;
   11774:	682c      	ldr	r4, [r5, #0]
		event.curr.abort_cb = NULL;
   11776:	2300      	movs	r3, #0
   11778:	60ab      	str	r3, [r5, #8]
		event.curr.param = NULL;
   1177a:	602b      	str	r3, [r5, #0]
		if (param) {
   1177c:	2c00      	cmp	r4, #0
   1177e:	d1eb      	bne.n	11758 <lll_done+0xc>
   11780:	e7ec      	b.n	1175c <lll_done+0x10>
	LL_ASSERT(evdone);
   11782:	4a16      	ldr	r2, [pc, #88]	; (117dc <lll_done+0x90>)
   11784:	4916      	ldr	r1, [pc, #88]	; (117e0 <lll_done+0x94>)
   11786:	4817      	ldr	r0, [pc, #92]	; (117e4 <lll_done+0x98>)
   11788:	f240 1361 	movw	r3, #353	; 0x161
   1178c:	f004 fad8 	bl	15d40 <printk>
   11790:	4040      	eors	r0, r0
   11792:	f380 8811 	msr	BASEPRI, r0
   11796:	f04f 0003 	mov.w	r0, #3
   1179a:	df02      	svc	2
}
   1179c:	2000      	movs	r0, #0
   1179e:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(!param || next);
   117a0:	4a0e      	ldr	r2, [pc, #56]	; (117dc <lll_done+0x90>)
   117a2:	4911      	ldr	r1, [pc, #68]	; (117e8 <lll_done+0x9c>)
   117a4:	480f      	ldr	r0, [pc, #60]	; (117e4 <lll_done+0x98>)
   117a6:	f240 1337 	movw	r3, #311	; 0x137
   117aa:	f004 fac9 	bl	15d40 <printk>
   117ae:	4040      	eors	r0, r0
   117b0:	f380 8811 	msr	BASEPRI, r0
   117b4:	f04f 0003 	mov.w	r0, #3
   117b8:	df02      	svc	2
   117ba:	e7cd      	b.n	11758 <lll_done+0xc>
		LL_ASSERT(event.curr.abort_cb);
   117bc:	4a07      	ldr	r2, [pc, #28]	; (117dc <lll_done+0x90>)
   117be:	490b      	ldr	r1, [pc, #44]	; (117ec <lll_done+0xa0>)
   117c0:	4808      	ldr	r0, [pc, #32]	; (117e4 <lll_done+0x98>)
   117c2:	f240 133d 	movw	r3, #317	; 0x13d
   117c6:	f004 fabb 	bl	15d40 <printk>
   117ca:	4040      	eors	r0, r0
   117cc:	f380 8811 	msr	BASEPRI, r0
   117d0:	f04f 0003 	mov.w	r0, #3
   117d4:	df02      	svc	2
   117d6:	e7cd      	b.n	11774 <lll_done+0x28>
   117d8:	20001e50 	.word	0x20001e50
   117dc:	0001a17c 	.word	0x0001a17c
   117e0:	0001a248 	.word	0x0001a248
   117e4:	000199cc 	.word	0x000199cc
   117e8:	0001a224 	.word	0x0001a224
   117ec:	0001a234 	.word	0x0001a234

000117f0 <lll_is_done>:
	return !event.curr.abort_cb;
   117f0:	4b02      	ldr	r3, [pc, #8]	; (117fc <lll_is_done+0xc>)
   117f2:	6898      	ldr	r0, [r3, #8]
}
   117f4:	fab0 f080 	clz	r0, r0
   117f8:	0940      	lsrs	r0, r0, #5
   117fa:	4770      	bx	lr
   117fc:	20001e50 	.word	0x20001e50

00011800 <lll_is_abort_cb>:
}
   11800:	f06f 0047 	mvn.w	r0, #71	; 0x47
   11804:	4770      	bx	lr
   11806:	bf00      	nop

00011808 <lll_evt_offset_get>:
	} else if (evt->ticks_xtal_to_start & XON_BITMASK) {
   11808:	e9d0 2300 	ldrd	r2, r3, [r0]
   1180c:	2a00      	cmp	r2, #0
   1180e:	db04      	blt.n	1181a <lll_evt_offset_get+0x12>
		return MAX(evt->ticks_active_to_start,
   11810:	429a      	cmp	r2, r3
   11812:	bf38      	it	cc
   11814:	461a      	movcc	r2, r3
   11816:	4610      	mov	r0, r2
}
   11818:	4770      	bx	lr
		return MAX(evt->ticks_active_to_start,
   1181a:	6880      	ldr	r0, [r0, #8]
   1181c:	4298      	cmp	r0, r3
   1181e:	bf38      	it	cc
   11820:	4618      	movcc	r0, r3
   11822:	4770      	bx	lr

00011824 <lll_preempt_calc>:
{
   11824:	b510      	push	{r4, lr}
   11826:	4614      	mov	r4, r2
	ticks_now = ticker_ticks_now_get();
   11828:	f7f8 fba8 	bl	9f7c <ticker_ticks_now_get>
	diff = ticks_now - ticks_at_event;
   1182c:	1b02      	subs	r2, r0, r4
	if (diff & BIT(HAL_TICKER_CNTR_MSBIT)) {
   1182e:	0213      	lsls	r3, r2, #8
   11830:	d405      	bmi.n	1183e <lll_preempt_calc+0x1a>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   11832:	1cd0      	adds	r0, r2, #3
	if (diff > HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US)) {
   11834:	2809      	cmp	r0, #9
   11836:	bf94      	ite	ls
   11838:	2000      	movls	r0, #0
   1183a:	2001      	movhi	r0, #1
}
   1183c:	bd10      	pop	{r4, pc}
		return 0;
   1183e:	2000      	movs	r0, #0
}
   11840:	bd10      	pop	{r4, pc}
   11842:	bf00      	nop

00011844 <lll_chan_set>:
	switch (chan) {
   11844:	2826      	cmp	r0, #38	; 0x26
{
   11846:	b510      	push	{r4, lr}
   11848:	4604      	mov	r4, r0
	switch (chan) {
   1184a:	d01c      	beq.n	11886 <lll_chan_set+0x42>
   1184c:	2827      	cmp	r0, #39	; 0x27
   1184e:	d012      	beq.n	11876 <lll_chan_set+0x32>
   11850:	2825      	cmp	r0, #37	; 0x25
   11852:	d008      	beq.n	11866 <lll_chan_set+0x22>
		if (chan < 11) {
   11854:	280a      	cmp	r0, #10
   11856:	d91e      	bls.n	11896 <lll_chan_set+0x52>
		} else if (chan < 40) {
   11858:	2827      	cmp	r0, #39	; 0x27
   1185a:	d821      	bhi.n	118a0 <lll_chan_set+0x5c>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   1185c:	3003      	adds	r0, #3
   1185e:	0040      	lsls	r0, r0, #1
   11860:	f001 fb50 	bl	12f04 <radio_freq_chan_set>
   11864:	e002      	b.n	1186c <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   11866:	2002      	movs	r0, #2
   11868:	f001 fb4c 	bl	12f04 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1186c:	4620      	mov	r0, r4
}
   1186e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   11872:	f001 bb4d 	b.w	12f10 <radio_whiten_iv_set>
		radio_freq_chan_set(80);
   11876:	2050      	movs	r0, #80	; 0x50
   11878:	f001 fb44 	bl	12f04 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1187c:	4620      	mov	r0, r4
}
   1187e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   11882:	f001 bb45 	b.w	12f10 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   11886:	201a      	movs	r0, #26
   11888:	f001 fb3c 	bl	12f04 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1188c:	4620      	mov	r0, r4
}
   1188e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   11892:	f001 bb3d 	b.w	12f10 <radio_whiten_iv_set>
			radio_freq_chan_set(4 + (chan * 2U));
   11896:	3002      	adds	r0, #2
   11898:	0040      	lsls	r0, r0, #1
   1189a:	f001 fb33 	bl	12f04 <radio_freq_chan_set>
   1189e:	e7e5      	b.n	1186c <lll_chan_set+0x28>
			LL_ASSERT(0);
   118a0:	4a06      	ldr	r2, [pc, #24]	; (118bc <lll_chan_set+0x78>)
   118a2:	4907      	ldr	r1, [pc, #28]	; (118c0 <lll_chan_set+0x7c>)
   118a4:	4807      	ldr	r0, [pc, #28]	; (118c4 <lll_chan_set+0x80>)
   118a6:	f240 13cd 	movw	r3, #461	; 0x1cd
   118aa:	f004 fa49 	bl	15d40 <printk>
   118ae:	4040      	eors	r0, r0
   118b0:	f380 8811 	msr	BASEPRI, r0
   118b4:	f04f 0003 	mov.w	r0, #3
   118b8:	df02      	svc	2
   118ba:	e7d7      	b.n	1186c <lll_chan_set+0x28>
   118bc:	0001a17c 	.word	0x0001a17c
   118c0:	00019a2c 	.word	0x00019a2c
   118c4:	000199cc 	.word	0x000199cc

000118c8 <lll_radio_tx_ready_delay_get>:
	return radio_tx_ready_delay_get(phy, flags);
   118c8:	f001 bb88 	b.w	12fdc <radio_tx_ready_delay_get>

000118cc <lll_isr_tx_status_reset>:
{
   118cc:	b508      	push	{r3, lr}
	radio_status_reset();
   118ce:	f001 fbb1 	bl	13034 <radio_status_reset>
}
   118d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   118d6:	f001 bc7d 	b.w	131d4 <radio_tmr_status_reset>
   118da:	bf00      	nop

000118dc <lll_isr_rx_status_reset>:
{
   118dc:	b508      	push	{r3, lr}
	radio_status_reset();
   118de:	f001 fba9 	bl	13034 <radio_status_reset>
	radio_tmr_status_reset();
   118e2:	f001 fc77 	bl	131d4 <radio_tmr_status_reset>
}
   118e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   118ea:	f001 bc23 	b.w	13134 <radio_rssi_status_reset>
   118ee:	bf00      	nop

000118f0 <lll_isr_status_reset>:
{
   118f0:	b508      	push	{r3, lr}
	radio_status_reset();
   118f2:	f001 fb9f 	bl	13034 <radio_status_reset>
	radio_tmr_status_reset();
   118f6:	f001 fc6d 	bl	131d4 <radio_tmr_status_reset>
	radio_filter_status_reset();
   118fa:	f001 fc53 	bl	131a4 <radio_filter_status_reset>
	radio_ar_status_reset();
   118fe:	f001 fe59 	bl	135b4 <radio_ar_status_reset>
}
   11902:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   11906:	f001 bc15 	b.w	13134 <radio_rssi_status_reset>
   1190a:	bf00      	nop

0001190c <lll_isr_cleanup>:
{
   1190c:	b508      	push	{r3, lr}
   1190e:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   11910:	4815      	ldr	r0, [pc, #84]	; (11968 <lll_isr_cleanup+0x5c>)
   11912:	f001 fa7b 	bl	12e0c <radio_isr_set>
	if (!radio_is_idle()) {
   11916:	f001 fbad 	bl	13074 <radio_is_idle>
   1191a:	b150      	cbz	r0, 11932 <lll_isr_cleanup+0x26>
	radio_tmr_stop();
   1191c:	f001 fd36 	bl	1338c <radio_tmr_stop>
	err = lll_hfclock_off();
   11920:	f000 f958 	bl	11bd4 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   11924:	2800      	cmp	r0, #0
   11926:	db0c      	blt.n	11942 <lll_isr_cleanup+0x36>
}
   11928:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1192c:	2000      	movs	r0, #0
   1192e:	f7ff bf0d 	b.w	1174c <lll_done>
		radio_disable();
   11932:	f001 fb67 	bl	13004 <radio_disable>
	radio_tmr_stop();
   11936:	f001 fd29 	bl	1338c <radio_tmr_stop>
	err = lll_hfclock_off();
   1193a:	f000 f94b 	bl	11bd4 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1193e:	2800      	cmp	r0, #0
   11940:	daf2      	bge.n	11928 <lll_isr_cleanup+0x1c>
   11942:	4a0a      	ldr	r2, [pc, #40]	; (1196c <lll_isr_cleanup+0x60>)
   11944:	490a      	ldr	r1, [pc, #40]	; (11970 <lll_isr_cleanup+0x64>)
   11946:	480b      	ldr	r0, [pc, #44]	; (11974 <lll_isr_cleanup+0x68>)
   11948:	f44f 730c 	mov.w	r3, #560	; 0x230
   1194c:	f004 f9f8 	bl	15d40 <printk>
   11950:	4040      	eors	r0, r0
   11952:	f380 8811 	msr	BASEPRI, r0
   11956:	f04f 0003 	mov.w	r0, #3
   1195a:	df02      	svc	2
	lll_done(NULL);
   1195c:	2000      	movs	r0, #0
}
   1195e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   11962:	f7ff bef3 	b.w	1174c <lll_done>
   11966:	bf00      	nop
   11968:	000113a5 	.word	0x000113a5
   1196c:	0001a17c 	.word	0x0001a17c
   11970:	0001a250 	.word	0x0001a250
   11974:	000199cc 	.word	0x000199cc

00011978 <lll_isr_abort>:
{
   11978:	b510      	push	{r4, lr}
   1197a:	4604      	mov	r4, r0
	lll_isr_status_reset();
   1197c:	f7ff ffb8 	bl	118f0 <lll_isr_status_reset>
	lll_isr_cleanup(param);
   11980:	4620      	mov	r0, r4
}
   11982:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   11986:	f7ff bfc1 	b.w	1190c <lll_isr_cleanup>
   1198a:	bf00      	nop

0001198c <lll_isr_early_abort>:
{
   1198c:	b508      	push	{r3, lr}
   1198e:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   11990:	4813      	ldr	r0, [pc, #76]	; (119e0 <lll_isr_early_abort+0x54>)
   11992:	f001 fa3b 	bl	12e0c <radio_isr_set>
	if (!radio_is_idle()) {
   11996:	f001 fb6d 	bl	13074 <radio_is_idle>
   1199a:	b140      	cbz	r0, 119ae <lll_isr_early_abort+0x22>
	err = lll_hfclock_off();
   1199c:	f000 f91a 	bl	11bd4 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   119a0:	2800      	cmp	r0, #0
   119a2:	db0a      	blt.n	119ba <lll_isr_early_abort+0x2e>
}
   119a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   119a8:	2000      	movs	r0, #0
   119aa:	f7ff becf 	b.w	1174c <lll_done>
		radio_disable();
   119ae:	f001 fb29 	bl	13004 <radio_disable>
	err = lll_hfclock_off();
   119b2:	f000 f90f 	bl	11bd4 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   119b6:	2800      	cmp	r0, #0
   119b8:	daf4      	bge.n	119a4 <lll_isr_early_abort+0x18>
   119ba:	4a0a      	ldr	r2, [pc, #40]	; (119e4 <lll_isr_early_abort+0x58>)
   119bc:	490a      	ldr	r1, [pc, #40]	; (119e8 <lll_isr_early_abort+0x5c>)
   119be:	480b      	ldr	r0, [pc, #44]	; (119ec <lll_isr_early_abort+0x60>)
   119c0:	f240 233f 	movw	r3, #575	; 0x23f
   119c4:	f004 f9bc 	bl	15d40 <printk>
   119c8:	4040      	eors	r0, r0
   119ca:	f380 8811 	msr	BASEPRI, r0
   119ce:	f04f 0003 	mov.w	r0, #3
   119d2:	df02      	svc	2
	lll_done(NULL);
   119d4:	2000      	movs	r0, #0
}
   119d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   119da:	f7ff beb7 	b.w	1174c <lll_done>
   119de:	bf00      	nop
   119e0:	000113a5 	.word	0x000113a5
   119e4:	0001a17c 	.word	0x0001a17c
   119e8:	0001a250 	.word	0x0001a250
   119ec:	000199cc 	.word	0x000199cc

000119f0 <lll_prepare_resolve>:
{
   119f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   119f4:	b084      	sub	sp, #16
   119f6:	4605      	mov	r5, r0
	idx = UINT8_MAX;
   119f8:	f04f 0cff 	mov.w	ip, #255	; 0xff
	p = ull_prepare_dequeue_iter(&idx);
   119fc:	f10d 000f 	add.w	r0, sp, #15
{
   11a00:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
	idx = UINT8_MAX;
   11a04:	f88d c00f 	strb.w	ip, [sp, #15]
{
   11a08:	460e      	mov	r6, r1
   11a0a:	4617      	mov	r7, r2
   11a0c:	461c      	mov	r4, r3
	p = ull_prepare_dequeue_iter(&idx);
   11a0e:	f7fa fff5 	bl	c9fc <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   11a12:	b918      	cbnz	r0, 11a1c <lll_prepare_resolve+0x2c>
   11a14:	e01c      	b.n	11a50 <lll_prepare_resolve+0x60>
		p = ull_prepare_dequeue_iter(&idx);
   11a16:	f7fa fff1 	bl	c9fc <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   11a1a:	b1c8      	cbz	r0, 11a50 <lll_prepare_resolve+0x60>
   11a1c:	7f03      	ldrb	r3, [r0, #28]
   11a1e:	079b      	lsls	r3, r3, #30
		p = ull_prepare_dequeue_iter(&idx);
   11a20:	f10d 000f 	add.w	r0, sp, #15
	while (p && (p->is_aborted || p->is_resume)) {
   11a24:	d1f7      	bne.n	11a16 <lll_prepare_resolve+0x26>
	    event.curr.abort_cb ||
   11a26:	4b2c      	ldr	r3, [pc, #176]	; (11ad8 <lll_prepare_resolve+0xe8>)
	if ((!is_dequeue && !is_done_sync()) ||
   11a28:	689a      	ldr	r2, [r3, #8]
   11a2a:	b9a2      	cbnz	r2, 11a56 <lll_prepare_resolve+0x66>
	    (p && is_resume)) {
   11a2c:	f1b8 0f00 	cmp.w	r8, #0
   11a30:	d033      	beq.n	11a9a <lll_prepare_resolve+0xaa>
		err = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   11a32:	f8cd 8000 	str.w	r8, [sp]
   11a36:	463b      	mov	r3, r7
   11a38:	4631      	mov	r1, r6
   11a3a:	4628      	mov	r0, r5
   11a3c:	4622      	mov	r2, r4
   11a3e:	f7fa ff9b 	bl	c978 <ull_prepare_enqueue>
		LL_ASSERT(!err);
   11a42:	b9c8      	cbnz	r0, 11a78 <lll_prepare_resolve+0x88>
		return -EINPROGRESS;
   11a44:	f06f 0443 	mvn.w	r4, #67	; 0x43
}
   11a48:	4620      	mov	r0, r4
   11a4a:	b004      	add	sp, #16
   11a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    event.curr.abort_cb ||
   11a50:	4b21      	ldr	r3, [pc, #132]	; (11ad8 <lll_prepare_resolve+0xe8>)
	if ((!is_dequeue && !is_done_sync()) ||
   11a52:	689a      	ldr	r2, [r3, #8]
   11a54:	b30a      	cbz	r2, 11a9a <lll_prepare_resolve+0xaa>
		err = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   11a56:	f8cd 8000 	str.w	r8, [sp]
   11a5a:	463b      	mov	r3, r7
   11a5c:	4631      	mov	r1, r6
   11a5e:	4628      	mov	r0, r5
   11a60:	4622      	mov	r2, r4
   11a62:	f7fa ff89 	bl	c978 <ull_prepare_enqueue>
		LL_ASSERT(!err);
   11a66:	b938      	cbnz	r0, 11a78 <lll_prepare_resolve+0x88>
		if (is_resume) {
   11a68:	f1b8 0f00 	cmp.w	r8, #0
   11a6c:	d1ea      	bne.n	11a44 <lll_prepare_resolve+0x54>
		preempt_ticker_start(prepare_param);
   11a6e:	68e1      	ldr	r1, [r4, #12]
   11a70:	6820      	ldr	r0, [r4, #0]
   11a72:	f7ff fcc9 	bl	11408 <preempt_ticker_start.isra.0>
   11a76:	e7e5      	b.n	11a44 <lll_prepare_resolve+0x54>
		LL_ASSERT(!err);
   11a78:	4a18      	ldr	r2, [pc, #96]	; (11adc <lll_prepare_resolve+0xec>)
   11a7a:	4919      	ldr	r1, [pc, #100]	; (11ae0 <lll_prepare_resolve+0xf0>)
   11a7c:	4819      	ldr	r0, [pc, #100]	; (11ae4 <lll_prepare_resolve+0xf4>)
   11a7e:	f240 237a 	movw	r3, #634	; 0x27a
   11a82:	f004 f95d 	bl	15d40 <printk>
   11a86:	4040      	eors	r0, r0
   11a88:	f380 8811 	msr	BASEPRI, r0
   11a8c:	f04f 0003 	mov.w	r0, #3
   11a90:	df02      	svc	2
		if (is_resume) {
   11a92:	f1b8 0f00 	cmp.w	r8, #0
   11a96:	d1d5      	bne.n	11a44 <lll_prepare_resolve+0x54>
   11a98:	e7e9      	b.n	11a6e <lll_prepare_resolve+0x7e>
	event.curr.param = prepare_param->param;
   11a9a:	68e2      	ldr	r2, [r4, #12]
   11a9c:	601a      	str	r2, [r3, #0]
	event.curr.abort_cb = abort_cb;
   11a9e:	e9c3 5601 	strd	r5, r6, [r3, #4]
	err = prepare_cb(prepare_param);
   11aa2:	4620      	mov	r0, r4
   11aa4:	47b8      	blx	r7
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   11aa6:	2200      	movs	r2, #0
   11aa8:	4b0f      	ldr	r3, [pc, #60]	; (11ae8 <lll_prepare_resolve+0xf8>)
   11aaa:	9200      	str	r2, [sp, #0]
	err = prepare_cb(prepare_param);
   11aac:	4604      	mov	r4, r0
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   11aae:	4611      	mov	r1, r2
   11ab0:	4610      	mov	r0, r2
   11ab2:	f7f8 f9bf 	bl	9e34 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   11ab6:	2802      	cmp	r0, #2
   11ab8:	d9c6      	bls.n	11a48 <lll_prepare_resolve+0x58>
   11aba:	4a08      	ldr	r2, [pc, #32]	; (11adc <lll_prepare_resolve+0xec>)
   11abc:	490b      	ldr	r1, [pc, #44]	; (11aec <lll_prepare_resolve+0xfc>)
   11abe:	4809      	ldr	r0, [pc, #36]	; (11ae4 <lll_prepare_resolve+0xf4>)
   11ac0:	f44f 732d 	mov.w	r3, #692	; 0x2b4
   11ac4:	f004 f93c 	bl	15d40 <printk>
   11ac8:	4040      	eors	r0, r0
   11aca:	f380 8811 	msr	BASEPRI, r0
   11ace:	f04f 0003 	mov.w	r0, #3
   11ad2:	df02      	svc	2
   11ad4:	e7b8      	b.n	11a48 <lll_prepare_resolve+0x58>
   11ad6:	bf00      	nop
   11ad8:	20001e50 	.word	0x20001e50
   11adc:	0001a17c 	.word	0x0001a17c
   11ae0:	00019b30 	.word	0x00019b30
   11ae4:	000199cc 	.word	0x000199cc
   11ae8:	000113a9 	.word	0x000113a9
   11aec:	0001a1e4 	.word	0x0001a1e4

00011af0 <clock_ready>:
	z_impl_k_sem_give(sem);
   11af0:	f101 0010 	add.w	r0, r1, #16
   11af4:	f003 bc0e 	b.w	15314 <z_impl_k_sem_give>

00011af8 <blocking_on>:

	k_sem_give(&clk_state->sem);
}

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   11af8:	b530      	push	{r4, r5, lr}
   11afa:	4604      	mov	r4, r0
   11afc:	b08b      	sub	sp, #44	; 0x2c
   11afe:	460d      	mov	r5, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
   11b00:	2201      	movs	r2, #1
   11b02:	2100      	movs	r1, #0
   11b04:	a804      	add	r0, sp, #16
   11b06:	f007 f9c4 	bl	18e92 <z_impl_k_sem_init>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   11b0a:	2300      	movs	r3, #0
   11b0c:	4a0e      	ldr	r2, [pc, #56]	; (11b48 <blocking_on+0x50>)
   11b0e:	9303      	str	r3, [sp, #12]
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   11b10:	4620      	mov	r0, r4
   11b12:	2303      	movs	r3, #3
   11b14:	4669      	mov	r1, sp
   11b16:	9201      	str	r2, [sp, #4]
   11b18:	9302      	str	r3, [sp, #8]
   11b1a:	f004 f98d 	bl	15e38 <onoff_request>
	if (err < 0) {
   11b1e:	2800      	cmp	r0, #0
   11b20:	db10      	blt.n	11b44 <blocking_on+0x4c>
   11b22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   11b26:	f240 30e7 	movw	r0, #999	; 0x3e7
   11b2a:	2100      	movs	r1, #0
   11b2c:	fbe3 0105 	umlal	r0, r1, r3, r5
   11b30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11b34:	2300      	movs	r3, #0
   11b36:	f7ee fae3 	bl	100 <__aeabi_uldivmod>
   11b3a:	4602      	mov	r2, r0
   11b3c:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   11b3e:	a804      	add	r0, sp, #16
   11b40:	f003 fc0e 	bl	15360 <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   11b44:	b00b      	add	sp, #44	; 0x2c
   11b46:	bd30      	pop	{r4, r5, pc}
   11b48:	00011af1 	.word	0x00011af1

00011b4c <lll_clock_init>:

int lll_clock_init(void)
{
   11b4c:	b510      	push	{r4, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   11b4e:	2001      	movs	r0, #1
   11b50:	f7f2 fbd4 	bl	42fc <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   11b54:	4904      	ldr	r1, [pc, #16]	; (11b68 <lll_clock_init+0x1c>)
   11b56:	2401      	movs	r4, #1
   11b58:	2300      	movs	r3, #0
   11b5a:	608c      	str	r4, [r1, #8]
   11b5c:	60cb      	str	r3, [r1, #12]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
}
   11b5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11b62:	604b      	str	r3, [r1, #4]
	return onoff_request(mgr, &lf_cli);
   11b64:	f004 b968 	b.w	15e38 <onoff_request>
   11b68:	20001e68 	.word	0x20001e68

00011b6c <lll_clock_wait>:
{
	struct onoff_manager *mgr;
	static bool done;
	int err;

	if (done) {
   11b6c:	4b0c      	ldr	r3, [pc, #48]	; (11ba0 <lll_clock_wait+0x34>)
   11b6e:	781a      	ldrb	r2, [r3, #0]
   11b70:	b10a      	cbz	r2, 11b76 <lll_clock_wait+0xa>
		return 0;
   11b72:	2000      	movs	r0, #0
	if (err != ONOFF_STATE_ON) {
		return -EIO;
	}

	return 0;
}
   11b74:	4770      	bx	lr
{
   11b76:	b510      	push	{r4, lr}
	done = true;
   11b78:	2001      	movs	r0, #1
   11b7a:	7018      	strb	r0, [r3, #0]
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   11b7c:	f7f2 fbbe 	bl	42fc <z_nrf_clock_control_get_onoff>
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   11b80:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   11b84:	4604      	mov	r4, r0
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   11b86:	f7ff ffb7 	bl	11af8 <blocking_on>
	if (err) {
   11b8a:	b938      	cbnz	r0, 11b9c <lll_clock_wait+0x30>
	err = onoff_release(mgr);
   11b8c:	4620      	mov	r0, r4
   11b8e:	f004 f99c 	bl	15eca <onoff_release>
	if (err != ONOFF_STATE_ON) {
   11b92:	2802      	cmp	r0, #2
		return 0;
   11b94:	bf0c      	ite	eq
   11b96:	2000      	moveq	r0, #0
		return -EIO;
   11b98:	f06f 0004 	mvnne.w	r0, #4
}
   11b9c:	bd10      	pop	{r4, pc}
   11b9e:	bf00      	nop
   11ba0:	20002251 	.word	0x20002251

00011ba4 <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   11ba4:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   11ba6:	4b0a      	ldr	r3, [pc, #40]	; (11bd0 <lll_hfclock_on+0x2c>)
   11ba8:	f3bf 8f5b 	dmb	ish
   11bac:	e853 2f00 	ldrex	r2, [r3]
   11bb0:	1c51      	adds	r1, r2, #1
   11bb2:	e843 1000 	strex	r0, r1, [r3]
   11bb6:	2800      	cmp	r0, #0
   11bb8:	d1f8      	bne.n	11bac <lll_hfclock_on+0x8>
   11bba:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   11bbe:	2a00      	cmp	r2, #0
   11bc0:	dd01      	ble.n	11bc6 <lll_hfclock_on+0x22>

	z_nrf_clock_bt_ctlr_hf_request();
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   11bc2:	2000      	movs	r0, #0
   11bc4:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_request();
   11bc6:	f7f2 fba1 	bl	430c <z_nrf_clock_bt_ctlr_hf_request>
}
   11bca:	2000      	movs	r0, #0
   11bcc:	bd08      	pop	{r3, pc}
   11bce:	bf00      	nop
   11bd0:	20001e64 	.word	0x20001e64

00011bd4 <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   11bd4:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   11bd6:	4b0d      	ldr	r3, [pc, #52]	; (11c0c <lll_hfclock_off+0x38>)
   11bd8:	681a      	ldr	r2, [r3, #0]
   11bda:	2a00      	cmp	r2, #0
   11bdc:	dd12      	ble.n	11c04 <lll_hfclock_off+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   11bde:	f3bf 8f5b 	dmb	ish
   11be2:	e853 2f00 	ldrex	r2, [r3]
   11be6:	1e51      	subs	r1, r2, #1
   11be8:	e843 1000 	strex	r0, r1, [r3]
   11bec:	2800      	cmp	r0, #0
   11bee:	d1f8      	bne.n	11be2 <lll_hfclock_off+0xe>
   11bf0:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   11bf4:	2a01      	cmp	r2, #1
   11bf6:	dd01      	ble.n	11bfc <lll_hfclock_off+0x28>
		return 0;
   11bf8:	2000      	movs	r0, #0

	z_nrf_clock_bt_ctlr_hf_release();
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   11bfa:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_release();
   11bfc:	f7f2 fb9c 	bl	4338 <z_nrf_clock_bt_ctlr_hf_release>
	return 0;
   11c00:	2000      	movs	r0, #0
}
   11c02:	bd08      	pop	{r3, pc}
		return -EALREADY;
   11c04:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
   11c08:	bd08      	pop	{r3, pc}
   11c0a:	bf00      	nop
   11c0c:	20001e64 	.word	0x20001e64

00011c10 <lll_clock_sca_local_get>:

uint8_t lll_clock_sca_local_get(void)
{
	return CLOCK_CONTROL_NRF_K32SRC_ACCURACY;
}
   11c10:	2007      	movs	r0, #7
   11c12:	4770      	bx	lr

00011c14 <ticker_stop_cb>:
{
   11c14:	b508      	push	{r3, lr}
	radio_isr_set(isr_done_cleanup, param);
   11c16:	9902      	ldr	r1, [sp, #8]
   11c18:	4803      	ldr	r0, [pc, #12]	; (11c28 <ticker_stop_cb+0x14>)
   11c1a:	f001 f8f7 	bl	12e0c <radio_isr_set>
}
   11c1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_disable();
   11c22:	f001 b9ef 	b.w	13004 <radio_disable>
   11c26:	bf00      	nop
   11c28:	00011e75 	.word	0x00011e75

00011c2c <prepare_cb>:
{
   11c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll = p->param;
   11c2e:	68c4      	ldr	r4, [r0, #12]
	if (unlikely(lll->conn &&
   11c30:	6863      	ldr	r3, [r4, #4]
{
   11c32:	b08d      	sub	sp, #52	; 0x34
   11c34:	4605      	mov	r5, r0
	if (unlikely(lll->conn &&
   11c36:	2b00      	cmp	r3, #0
   11c38:	f040 80ed 	bne.w	11e16 <prepare_cb+0x1ea>
	lll->state = 0U;
   11c3c:	7da3      	ldrb	r3, [r4, #22]
   11c3e:	f36f 0300 	bfc	r3, #0, #1
   11c42:	75a3      	strb	r3, [r4, #22]
	radio_reset();
   11c44:	f001 f924 	bl	12e90 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   11c48:	2000      	movs	r0, #0
   11c4a:	f001 f955 	bl	12ef8 <radio_tx_power_set>
	radio_phy_set(0, 0);
   11c4e:	2100      	movs	r1, #0
   11c50:	4608      	mov	r0, r1
   11c52:	f001 f941 	bl	12ed8 <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_LEG_PAYLOAD_SIZE_MAX, 0);
   11c56:	2200      	movs	r2, #0
   11c58:	2125      	movs	r1, #37	; 0x25
   11c5a:	2008      	movs	r0, #8
   11c5c:	f001 f984 	bl	12f68 <radio_pkt_configure>
	node_rx = ull_pdu_rx_alloc_peek(1);
   11c60:	2001      	movs	r0, #1
   11c62:	f7fa fe3b 	bl	c8dc <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   11c66:	4606      	mov	r6, r0
   11c68:	2800      	cmp	r0, #0
   11c6a:	f000 80c7 	beq.w	11dfc <prepare_cb+0x1d0>
	radio_pkt_rx_set(node_rx->pdu);
   11c6e:	f106 001c 	add.w	r0, r6, #28
   11c72:	f001 f9a7 	bl	12fc4 <radio_pkt_rx_set>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   11c76:	4b71      	ldr	r3, [pc, #452]	; (11e3c <prepare_cb+0x210>)
   11c78:	930b      	str	r3, [sp, #44]	; 0x2c
	radio_aa_set((uint8_t *)&aa);
   11c7a:	a80b      	add	r0, sp, #44	; 0x2c
   11c7c:	f001 f95a 	bl	12f34 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   11c80:	496f      	ldr	r1, [pc, #444]	; (11e40 <prepare_cb+0x214>)
   11c82:	f240 605b 	movw	r0, #1627	; 0x65b
   11c86:	f001 f9ff 	bl	13088 <radio_crc_configure>
	lll_chan_set(37 + lll->chan);
   11c8a:	7da0      	ldrb	r0, [r4, #22]
   11c8c:	f3c0 0041 	ubfx	r0, r0, #1, #2
   11c90:	3025      	adds	r0, #37	; 0x25
   11c92:	f7ff fdd7 	bl	11844 <lll_chan_set>
	radio_isr_set(isr_rx, lll);
   11c96:	4621      	mov	r1, r4
   11c98:	486a      	ldr	r0, [pc, #424]	; (11e44 <prepare_cb+0x218>)
   11c9a:	f001 f8b7 	bl	12e0c <radio_isr_set>
	radio_tmr_tifs_set(EVENT_IFS_US);
   11c9e:	2096      	movs	r0, #150	; 0x96
   11ca0:	f001 faa8 	bl	131f4 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   11ca4:	2300      	movs	r3, #0
   11ca6:	461a      	mov	r2, r3
   11ca8:	4619      	mov	r1, r3
   11caa:	4618      	mov	r0, r3
   11cac:	f001 fa18 	bl	130e0 <radio_switch_complete_and_tx>
	if (ull_filter_lll_rl_enabled()) {
   11cb0:	f7ff fb46 	bl	11340 <ull_filter_lll_rl_enabled>
   11cb4:	2800      	cmp	r0, #0
   11cb6:	d177      	bne.n	11da8 <prepare_cb+0x17c>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER) && lll->filter_policy) {
   11cb8:	7da3      	ldrb	r3, [r4, #22]
   11cba:	f013 0f18 	tst.w	r3, #24
   11cbe:	d151      	bne.n	11d64 <prepare_cb+0x138>
	evt = HDR_LLL2EVT(lll);
   11cc0:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   11cc2:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   11cc4:	4638      	mov	r0, r7
   11cc6:	f7ff fd9f 	bl	11808 <lll_evt_offset_get>
   11cca:	4406      	add	r6, r0
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   11ccc:	686a      	ldr	r2, [r5, #4]
   11cce:	f106 0109 	add.w	r1, r6, #9
   11cd2:	2000      	movs	r0, #0
   11cd4:	f001 fa9a 	bl	1320c <radio_tmr_start>
	radio_tmr_end_capture();
   11cd8:	f001 fb8c 	bl	133f4 <radio_tmr_end_capture>
	radio_rssi_measure();
   11cdc:	f001 fa1a 	bl	13114 <radio_rssi_measure>
				   ull_scan_lll_handle_get(lll)),
   11ce0:	4620      	mov	r0, r4
   11ce2:	f7fb f855 	bl	cd90 <ull_scan_lll_handle_get>
	if (lll_preempt_calc(evt, (TICKER_ID_SCAN_BASE +
   11ce6:	1c81      	adds	r1, r0, #2
   11ce8:	b2c9      	uxtb	r1, r1
   11cea:	4638      	mov	r0, r7
   11cec:	4632      	mov	r2, r6
   11cee:	f7ff fd99 	bl	11824 <lll_preempt_calc>
   11cf2:	4601      	mov	r1, r0
   11cf4:	2800      	cmp	r0, #0
   11cf6:	d14e      	bne.n	11d96 <prepare_cb+0x16a>
		if (lll->ticks_window) {
   11cf8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   11cfa:	b98b      	cbnz	r3, 11d20 <prepare_cb+0xf4>
		if (lll->conn) {
   11cfc:	6863      	ldr	r3, [r4, #4]
   11cfe:	b143      	cbz	r3, 11d12 <prepare_cb+0xe6>
			mfy_after_mstr_offset_get.param = p;
   11d00:	4b51      	ldr	r3, [pc, #324]	; (11e48 <prepare_cb+0x21c>)
			retval = mayfly_enqueue(TICKER_USER_ID_LLL,
   11d02:	2201      	movs	r2, #1
   11d04:	2102      	movs	r1, #2
   11d06:	2000      	movs	r0, #0
			mfy_after_mstr_offset_get.param = p;
   11d08:	609d      	str	r5, [r3, #8]
			retval = mayfly_enqueue(TICKER_USER_ID_LLL,
   11d0a:	f7f6 fce9 	bl	86e0 <mayfly_enqueue>
			LL_ASSERT(!retval);
   11d0e:	2800      	cmp	r0, #0
   11d10:	d161      	bne.n	11dd6 <prepare_cb+0x1aa>
		ret = lll_prepare_done(lll);
   11d12:	4620      	mov	r0, r4
   11d14:	f7ff fd18 	bl	11748 <lll_prepare_done>
		LL_ASSERT(!ret);
   11d18:	bb68      	cbnz	r0, 11d76 <prepare_cb+0x14a>
}
   11d1a:	2000      	movs	r0, #0
   11d1c:	b00d      	add	sp, #52	; 0x34
   11d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   11d20:	f44f 7288 	mov.w	r2, #272	; 0x110
   11d24:	9300      	str	r3, [sp, #0]
   11d26:	9208      	str	r2, [sp, #32]
   11d28:	4b48      	ldr	r3, [pc, #288]	; (11e4c <prepare_cb+0x220>)
   11d2a:	4a49      	ldr	r2, [pc, #292]	; (11e50 <prepare_cb+0x224>)
   11d2c:	9307      	str	r3, [sp, #28]
   11d2e:	9205      	str	r2, [sp, #20]
   11d30:	4633      	mov	r3, r6
   11d32:	e9cd 0003 	strd	r0, r0, [sp, #12]
   11d36:	e9cd 0001 	strd	r0, r0, [sp, #4]
   11d3a:	9406      	str	r4, [sp, #24]
   11d3c:	2201      	movs	r2, #1
   11d3e:	f7f7 fff1 	bl	9d24 <ticker_start>
			LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   11d42:	f030 0302 	bics.w	r3, r0, #2
   11d46:	d0d9      	beq.n	11cfc <prepare_cb+0xd0>
   11d48:	4a42      	ldr	r2, [pc, #264]	; (11e54 <prepare_cb+0x228>)
   11d4a:	4943      	ldr	r1, [pc, #268]	; (11e58 <prepare_cb+0x22c>)
   11d4c:	4843      	ldr	r0, [pc, #268]	; (11e5c <prepare_cb+0x230>)
   11d4e:	f240 1311 	movw	r3, #273	; 0x111
   11d52:	f003 fff5 	bl	15d40 <printk>
   11d56:	4040      	eors	r0, r0
   11d58:	f380 8811 	msr	BASEPRI, r0
   11d5c:	f04f 0003 	mov.w	r0, #3
   11d60:	df02      	svc	2
   11d62:	e7cb      	b.n	11cfc <prepare_cb+0xd0>
		struct lll_filter *wl = ull_filter_lll_get(true);
   11d64:	2001      	movs	r0, #1
   11d66:	f7ff fa4f 	bl	11208 <ull_filter_lll_get>
		radio_filter_configure(wl->enable_bitmask,
   11d6a:	7841      	ldrb	r1, [r0, #1]
   11d6c:	1c82      	adds	r2, r0, #2
   11d6e:	7800      	ldrb	r0, [r0, #0]
   11d70:	f001 f9f2 	bl	13158 <radio_filter_configure>
   11d74:	e7a4      	b.n	11cc0 <prepare_cb+0x94>
		LL_ASSERT(!ret);
   11d76:	4a37      	ldr	r2, [pc, #220]	; (11e54 <prepare_cb+0x228>)
   11d78:	4939      	ldr	r1, [pc, #228]	; (11e60 <prepare_cb+0x234>)
   11d7a:	4838      	ldr	r0, [pc, #224]	; (11e5c <prepare_cb+0x230>)
   11d7c:	f44f 7395 	mov.w	r3, #298	; 0x12a
   11d80:	f003 ffde 	bl	15d40 <printk>
   11d84:	4040      	eors	r0, r0
   11d86:	f380 8811 	msr	BASEPRI, r0
   11d8a:	f04f 0003 	mov.w	r0, #3
   11d8e:	df02      	svc	2
}
   11d90:	2000      	movs	r0, #0
   11d92:	b00d      	add	sp, #52	; 0x34
   11d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(isr_abort, lll);
   11d96:	4833      	ldr	r0, [pc, #204]	; (11e64 <prepare_cb+0x238>)
   11d98:	4621      	mov	r1, r4
   11d9a:	f001 f837 	bl	12e0c <radio_isr_set>
		radio_disable();
   11d9e:	f001 f931 	bl	13004 <radio_disable>
}
   11da2:	2000      	movs	r0, #0
   11da4:	b00d      	add	sp, #52	; 0x34
   11da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ull_filter_lll_get(!!(lll->filter_policy & 0x1));
   11da8:	7da0      	ldrb	r0, [r4, #22]
   11daa:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   11dae:	f7ff fa2b 	bl	11208 <ull_filter_lll_get>
   11db2:	4606      	mov	r6, r0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   11db4:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
   11db8:	f7ff f930 	bl	1101c <ull_filter_lll_irks_get>
		radio_filter_configure(filter->enable_bitmask,
   11dbc:	7871      	ldrb	r1, [r6, #1]
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   11dbe:	4607      	mov	r7, r0
		radio_filter_configure(filter->enable_bitmask,
   11dc0:	1cb2      	adds	r2, r6, #2
   11dc2:	7830      	ldrb	r0, [r6, #0]
   11dc4:	f001 f9c8 	bl	13158 <radio_filter_configure>
		radio_ar_configure(count, irks, 0);
   11dc8:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   11dcc:	4639      	mov	r1, r7
   11dce:	2200      	movs	r2, #0
   11dd0:	f001 fbb8 	bl	13544 <radio_ar_configure>
   11dd4:	e774      	b.n	11cc0 <prepare_cb+0x94>
			LL_ASSERT(!retval);
   11dd6:	4a1f      	ldr	r2, [pc, #124]	; (11e54 <prepare_cb+0x228>)
   11dd8:	4923      	ldr	r1, [pc, #140]	; (11e68 <prepare_cb+0x23c>)
   11dda:	4820      	ldr	r0, [pc, #128]	; (11e5c <prepare_cb+0x230>)
   11ddc:	f240 1325 	movw	r3, #293	; 0x125
   11de0:	f003 ffae 	bl	15d40 <printk>
   11de4:	4040      	eors	r0, r0
   11de6:	f380 8811 	msr	BASEPRI, r0
   11dea:	f04f 0003 	mov.w	r0, #3
   11dee:	df02      	svc	2
		ret = lll_prepare_done(lll);
   11df0:	4620      	mov	r0, r4
   11df2:	f7ff fca9 	bl	11748 <lll_prepare_done>
		LL_ASSERT(!ret);
   11df6:	2800      	cmp	r0, #0
   11df8:	d08f      	beq.n	11d1a <prepare_cb+0xee>
   11dfa:	e7bc      	b.n	11d76 <prepare_cb+0x14a>
	LL_ASSERT(node_rx);
   11dfc:	4a15      	ldr	r2, [pc, #84]	; (11e54 <prepare_cb+0x228>)
   11dfe:	491b      	ldr	r1, [pc, #108]	; (11e6c <prepare_cb+0x240>)
   11e00:	4816      	ldr	r0, [pc, #88]	; (11e5c <prepare_cb+0x230>)
   11e02:	23b0      	movs	r3, #176	; 0xb0
   11e04:	f003 ff9c 	bl	15d40 <printk>
   11e08:	4040      	eors	r0, r0
   11e0a:	f380 8811 	msr	BASEPRI, r0
   11e0e:	f04f 0003 	mov.w	r0, #3
   11e12:	df02      	svc	2
   11e14:	e72b      	b.n	11c6e <prepare_cb+0x42>
	if (unlikely(lll->conn &&
   11e16:	6863      	ldr	r3, [r4, #4]
   11e18:	f893 3020 	ldrb.w	r3, [r3, #32]
   11e1c:	07da      	lsls	r2, r3, #31
   11e1e:	d405      	bmi.n	11e2c <prepare_cb+0x200>
   11e20:	6863      	ldr	r3, [r4, #4]
   11e22:	f893 3020 	ldrb.w	r3, [r3, #32]
   11e26:	079b      	lsls	r3, r3, #30
   11e28:	f57f af08 	bpl.w	11c3c <prepare_cb+0x10>
		radio_isr_set(lll_isr_early_abort, lll);
   11e2c:	4810      	ldr	r0, [pc, #64]	; (11e70 <prepare_cb+0x244>)
   11e2e:	4621      	mov	r1, r4
   11e30:	f000 ffec 	bl	12e0c <radio_isr_set>
		radio_disable();
   11e34:	f001 f8e6 	bl	13004 <radio_disable>
		return 0;
   11e38:	e76f      	b.n	11d1a <prepare_cb+0xee>
   11e3a:	bf00      	nop
   11e3c:	8e89bed6 	.word	0x8e89bed6
   11e40:	00555555 	.word	0x00555555
   11e44:	00002d99 	.word	0x00002d99
   11e48:	20000494 	.word	0x20000494
   11e4c:	00012051 	.word	0x00012051
   11e50:	00011c15 	.word	0x00011c15
   11e54:	0001a25c 	.word	0x0001a25c
   11e58:	0001a2b0 	.word	0x0001a2b0
   11e5c:	000199cc 	.word	0x000199cc
   11e60:	00019c10 	.word	0x00019c10
   11e64:	00012181 	.word	0x00012181
   11e68:	00019b6c 	.word	0x00019b6c
   11e6c:	0001a2a8 	.word	0x0001a2a8
   11e70:	0001198d 	.word	0x0001198d

00011e74 <isr_done_cleanup>:
{
   11e74:	b538      	push	{r3, r4, r5, lr}
   11e76:	4604      	mov	r4, r0
	if (lll_is_done(param)) {
   11e78:	f7ff fcba 	bl	117f0 <lll_is_done>
   11e7c:	b100      	cbz	r0, 11e80 <isr_done_cleanup+0xc>
}
   11e7e:	bd38      	pop	{r3, r4, r5, pc}
	radio_filter_disable();
   11e80:	4605      	mov	r5, r0
   11e82:	f001 f985 	bl	13190 <radio_filter_disable>
	if (++lll->chan == 3U) {
   11e86:	7da2      	ldrb	r2, [r4, #22]
   11e88:	f3c2 0341 	ubfx	r3, r2, #1, #2
   11e8c:	3301      	adds	r3, #1
   11e8e:	f003 0303 	and.w	r3, r3, #3
   11e92:	2b03      	cmp	r3, #3
   11e94:	bf14      	ite	ne
   11e96:	f363 0242 	bfine	r2, r3, #1, #2
		lll->chan = 0U;
   11e9a:	f365 0242 	bfieq	r2, r5, #1, #2
   11e9e:	75a2      	strb	r2, [r4, #22]
	lll_isr_cleanup(param);
   11ea0:	4620      	mov	r0, r4
}
   11ea2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_isr_cleanup(param);
   11ea6:	f7ff bd31 	b.w	1190c <lll_isr_cleanup>
   11eaa:	bf00      	nop

00011eac <isr_common_done>:
{
   11eac:	b530      	push	{r4, r5, lr}
   11eae:	4604      	mov	r4, r0
   11eb0:	b083      	sub	sp, #12
	lll_isr_status_reset();
   11eb2:	f7ff fd1d 	bl	118f0 <lll_isr_status_reset>
	lll->state = 0U;
   11eb6:	7da3      	ldrb	r3, [r4, #22]
   11eb8:	f36f 0300 	bfc	r3, #0, #1
   11ebc:	75a3      	strb	r3, [r4, #22]
	radio_tmr_tifs_set(EVENT_IFS_US);
   11ebe:	2096      	movs	r0, #150	; 0x96
   11ec0:	f001 f998 	bl	131f4 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   11ec4:	2300      	movs	r3, #0
   11ec6:	4618      	mov	r0, r3
   11ec8:	461a      	mov	r2, r3
   11eca:	4619      	mov	r1, r3
   11ecc:	f001 f908 	bl	130e0 <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   11ed0:	2001      	movs	r0, #1
   11ed2:	f7fa fd03 	bl	c8dc <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   11ed6:	4605      	mov	r5, r0
   11ed8:	b1c8      	cbz	r0, 11f0e <isr_common_done+0x62>
	radio_pkt_rx_set(node_rx->pdu);
   11eda:	f105 001c 	add.w	r0, r5, #28
   11ede:	f001 f871 	bl	12fc4 <radio_pkt_rx_set>
	if (ull_filter_lll_rl_enabled()) {
   11ee2:	f7ff fa2d 	bl	11340 <ull_filter_lll_rl_enabled>
   11ee6:	b938      	cbnz	r0, 11ef8 <isr_common_done+0x4c>
	radio_rssi_measure();
   11ee8:	f001 f914 	bl	13114 <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
   11eec:	480f      	ldr	r0, [pc, #60]	; (11f2c <isr_common_done+0x80>)
   11eee:	4621      	mov	r1, r4
   11ef0:	f000 ff8c 	bl	12e0c <radio_isr_set>
}
   11ef4:	b003      	add	sp, #12
   11ef6:	bd30      	pop	{r4, r5, pc}
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   11ef8:	f10d 0007 	add.w	r0, sp, #7
   11efc:	f7ff f88e 	bl	1101c <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   11f00:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   11f02:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   11f04:	f89d 0007 	ldrb.w	r0, [sp, #7]
   11f08:	f001 fb1c 	bl	13544 <radio_ar_configure>
   11f0c:	e7ec      	b.n	11ee8 <isr_common_done+0x3c>
	LL_ASSERT(node_rx);
   11f0e:	4a08      	ldr	r2, [pc, #32]	; (11f30 <isr_common_done+0x84>)
   11f10:	4908      	ldr	r1, [pc, #32]	; (11f34 <isr_common_done+0x88>)
   11f12:	4809      	ldr	r0, [pc, #36]	; (11f38 <isr_common_done+0x8c>)
   11f14:	f240 2335 	movw	r3, #565	; 0x235
   11f18:	f003 ff12 	bl	15d40 <printk>
   11f1c:	4040      	eors	r0, r0
   11f1e:	f380 8811 	msr	BASEPRI, r0
   11f22:	f04f 0003 	mov.w	r0, #3
   11f26:	df02      	svc	2
   11f28:	e7d7      	b.n	11eda <isr_common_done+0x2e>
   11f2a:	bf00      	nop
   11f2c:	00002d99 	.word	0x00002d99
   11f30:	0001a25c 	.word	0x0001a25c
   11f34:	0001a2a8 	.word	0x0001a2a8
   11f38:	000199cc 	.word	0x000199cc

00011f3c <isr_done>:
{
   11f3c:	b508      	push	{r3, lr}
	isr_common_done(param);
   11f3e:	f7ff ffb5 	bl	11eac <isr_common_done>
	radio_rx_enable();
   11f42:	f001 f859 	bl	12ff8 <radio_rx_enable>
}
   11f46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_end_capture();
   11f4a:	f001 ba53 	b.w	133f4 <radio_tmr_end_capture>
   11f4e:	bf00      	nop

00011f50 <isr_tx>:
{
   11f50:	b570      	push	{r4, r5, r6, lr}
   11f52:	b082      	sub	sp, #8
   11f54:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   11f56:	f7ff fcb9 	bl	118cc <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   11f5a:	2096      	movs	r0, #150	; 0x96
   11f5c:	f001 f94a 	bl	131f4 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   11f60:	2300      	movs	r3, #0
   11f62:	4618      	mov	r0, r3
   11f64:	461a      	mov	r2, r3
   11f66:	4619      	mov	r1, r3
   11f68:	f001 f8ba 	bl	130e0 <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   11f6c:	2001      	movs	r0, #1
   11f6e:	f7fa fcb5 	bl	c8dc <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   11f72:	4604      	mov	r4, r0
   11f74:	2800      	cmp	r0, #0
   11f76:	d03e      	beq.n	11ff6 <isr_tx+0xa6>
	radio_pkt_rx_set(node_rx->pdu);
   11f78:	f104 001c 	add.w	r0, r4, #28
   11f7c:	f001 f822 	bl	12fc4 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   11f80:	f001 f864 	bl	1304c <radio_is_ready>
   11f84:	b9d8      	cbnz	r0, 11fbe <isr_tx+0x6e>
	if (ull_filter_lll_rl_enabled()) {
   11f86:	f7ff f9db 	bl	11340 <ull_filter_lll_rl_enabled>
   11f8a:	bb48      	cbnz	r0, 11fe0 <isr_tx+0x90>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   11f8c:	f001 fa40 	bl	13410 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
   11f90:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   11f92:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   11f94:	4608      	mov	r0, r1
   11f96:	f001 f829 	bl	12fec <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(0, 0);
   11f9a:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
   11f9c:	4606      	mov	r6, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
   11f9e:	4608      	mov	r0, r1
   11fa0:	f001 f822 	bl	12fe8 <radio_tx_chain_delay_get>
   11fa4:	4434      	add	r4, r6
   11fa6:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   11fa8:	1a20      	subs	r0, r4, r0
   11faa:	f001 fa03 	bl	133b4 <radio_tmr_hcto_configure>
	radio_rssi_measure();
   11fae:	f001 f8b1 	bl	13114 <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
   11fb2:	4818      	ldr	r0, [pc, #96]	; (12014 <isr_tx+0xc4>)
   11fb4:	4629      	mov	r1, r5
   11fb6:	f000 ff29 	bl	12e0c <radio_isr_set>
}
   11fba:	b002      	add	sp, #8
   11fbc:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(!radio_is_ready());
   11fbe:	4a16      	ldr	r2, [pc, #88]	; (12018 <isr_tx+0xc8>)
   11fc0:	4916      	ldr	r1, [pc, #88]	; (1201c <isr_tx+0xcc>)
   11fc2:	4817      	ldr	r0, [pc, #92]	; (12020 <isr_tx+0xd0>)
   11fc4:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
   11fc8:	f003 feba 	bl	15d40 <printk>
   11fcc:	4040      	eors	r0, r0
   11fce:	f380 8811 	msr	BASEPRI, r0
   11fd2:	f04f 0003 	mov.w	r0, #3
   11fd6:	df02      	svc	2
	if (ull_filter_lll_rl_enabled()) {
   11fd8:	f7ff f9b2 	bl	11340 <ull_filter_lll_rl_enabled>
   11fdc:	2800      	cmp	r0, #0
   11fde:	d0d5      	beq.n	11f8c <isr_tx+0x3c>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   11fe0:	f10d 0007 	add.w	r0, sp, #7
   11fe4:	f7ff f81a 	bl	1101c <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   11fe8:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   11fea:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   11fec:	f89d 0007 	ldrb.w	r0, [sp, #7]
   11ff0:	f001 faa8 	bl	13544 <radio_ar_configure>
   11ff4:	e7ca      	b.n	11f8c <isr_tx+0x3c>
	LL_ASSERT(node_rx);
   11ff6:	4a08      	ldr	r2, [pc, #32]	; (12018 <isr_tx+0xc8>)
   11ff8:	490a      	ldr	r1, [pc, #40]	; (12024 <isr_tx+0xd4>)
   11ffa:	4809      	ldr	r0, [pc, #36]	; (12020 <isr_tx+0xd0>)
   11ffc:	f44f 73fd 	mov.w	r3, #506	; 0x1fa
   12000:	f003 fe9e 	bl	15d40 <printk>
   12004:	4040      	eors	r0, r0
   12006:	f380 8811 	msr	BASEPRI, r0
   1200a:	f04f 0003 	mov.w	r0, #3
   1200e:	df02      	svc	2
   12010:	e7b2      	b.n	11f78 <isr_tx+0x28>
   12012:	bf00      	nop
   12014:	00002d99 	.word	0x00002d99
   12018:	0001a25c 	.word	0x0001a25c
   1201c:	0001a2cc 	.word	0x0001a2cc
   12020:	000199cc 	.word	0x000199cc
   12024:	0001a2a8 	.word	0x0001a2a8

00012028 <resume_prepare_cb>:
	evt = HDR_LLL2EVT(p->param);
   12028:	68c3      	ldr	r3, [r0, #12]
{
   1202a:	b570      	push	{r4, r5, r6, lr}
	evt = HDR_LLL2EVT(p->param);
   1202c:	681e      	ldr	r6, [r3, #0]
{
   1202e:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   12030:	f7f7 ffa4 	bl	9f7c <ticker_ticks_now_get>
   12034:	4605      	mov	r5, r0
   12036:	4630      	mov	r0, r6
   12038:	f7ff fbe6 	bl	11808 <lll_evt_offset_get>
	p->remainder = 0;
   1203c:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   1203e:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   12040:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   12044:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   12046:	4620      	mov	r0, r4
}
   12048:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   1204c:	f7ff bdee 	b.w	11c2c <prepare_cb>

00012050 <ticker_op_start_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   12050:	b900      	cbnz	r0, 12054 <ticker_op_start_cb+0x4>
   12052:	4770      	bx	lr
{
   12054:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   12056:	4a07      	ldr	r2, [pc, #28]	; (12074 <ticker_op_start_cb+0x24>)
   12058:	4907      	ldr	r1, [pc, #28]	; (12078 <ticker_op_start_cb+0x28>)
   1205a:	4808      	ldr	r0, [pc, #32]	; (1207c <ticker_op_start_cb+0x2c>)
   1205c:	f240 1393 	movw	r3, #403	; 0x193
   12060:	f003 fe6e 	bl	15d40 <printk>
   12064:	4040      	eors	r0, r0
   12066:	f380 8811 	msr	BASEPRI, r0
   1206a:	f04f 0003 	mov.w	r0, #3
   1206e:	df02      	svc	2
}
   12070:	bd08      	pop	{r3, pc}
   12072:	bf00      	nop
   12074:	0001a25c 	.word	0x0001a25c
   12078:	00019d4c 	.word	0x00019d4c
   1207c:	000199cc 	.word	0x000199cc

00012080 <is_abort_cb>:
	if (next != curr) {
   12080:	4281      	cmp	r1, r0
{
   12082:	b508      	push	{r3, lr}
	if (next != curr) {
   12084:	d106      	bne.n	12094 <is_abort_cb+0x14>
		radio_isr_set(isr_window, lll);
   12086:	4810      	ldr	r0, [pc, #64]	; (120c8 <is_abort_cb+0x48>)
   12088:	f000 fec0 	bl	12e0c <radio_isr_set>
	radio_disable();
   1208c:	f000 ffba 	bl	13004 <radio_disable>
	return 0;
   12090:	2000      	movs	r0, #0
}
   12092:	bd08      	pop	{r3, pc}
			*resume_cb = resume_prepare_cb;
   12094:	4b0d      	ldr	r3, [pc, #52]	; (120cc <is_abort_cb+0x4c>)
   12096:	6013      	str	r3, [r2, #0]
			err = lll_hfclock_on();
   12098:	f7ff fd84 	bl	11ba4 <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   1209c:	2800      	cmp	r0, #0
   1209e:	db02      	blt.n	120a6 <is_abort_cb+0x26>
   120a0:	f06f 000a 	mvn.w	r0, #10
}
   120a4:	bd08      	pop	{r3, pc}
			LL_ASSERT(err >= 0);
   120a6:	4a0a      	ldr	r2, [pc, #40]	; (120d0 <is_abort_cb+0x50>)
   120a8:	490a      	ldr	r1, [pc, #40]	; (120d4 <is_abort_cb+0x54>)
   120aa:	480b      	ldr	r0, [pc, #44]	; (120d8 <is_abort_cb+0x58>)
   120ac:	f240 134f 	movw	r3, #335	; 0x14f
   120b0:	f003 fe46 	bl	15d40 <printk>
   120b4:	4040      	eors	r0, r0
   120b6:	f380 8811 	msr	BASEPRI, r0
   120ba:	f04f 0003 	mov.w	r0, #3
   120be:	df02      	svc	2
   120c0:	f06f 000a 	mvn.w	r0, #10
}
   120c4:	bd08      	pop	{r3, pc}
   120c6:	bf00      	nop
   120c8:	00002cf9 	.word	0x00002cf9
   120cc:	00012029 	.word	0x00012029
   120d0:	0001a25c 	.word	0x0001a25c
   120d4:	0001a250 	.word	0x0001a250
   120d8:	000199cc 	.word	0x000199cc

000120dc <isr_rx_scan_report.isra.0>:
			&srsp->scan_rsp.addr[0], BDADDR_SIZE) == 0));
}

static int isr_rx_scan_report(struct lll_scan *lll, uint8_t rssi_ready,
   120dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   120de:	4607      	mov	r7, r0
				uint8_t rl_idx, bool dir_report)
{
	struct node_rx_pdu *node_rx;

	node_rx = ull_pdu_rx_alloc_peek(3);
   120e0:	2003      	movs	r0, #3
static int isr_rx_scan_report(struct lll_scan *lll, uint8_t rssi_ready,
   120e2:	460e      	mov	r6, r1
   120e4:	4615      	mov	r5, r2
	node_rx = ull_pdu_rx_alloc_peek(3);
   120e6:	f7fa fbf9 	bl	c8dc <ull_pdu_rx_alloc_peek>
	if (!node_rx) {
   120ea:	b1c0      	cbz	r0, 1211e <isr_rx_scan_report.isra.0+0x42>
		return -ENOBUFS;
	}
	ull_pdu_rx_alloc();
   120ec:	4604      	mov	r4, r0
   120ee:	f7fa fc13 	bl	c918 <ull_pdu_rx_alloc>

	/* Prepare the report (adv or scan resp) */
	node_rx->hdr.handle = 0xffff;
   120f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
			}
			break;
		}
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   120f6:	2305      	movs	r3, #5
	node_rx->hdr.handle = 0xffff;
   120f8:	80e2      	strh	r2, [r4, #6]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   120fa:	7123      	strb	r3, [r4, #4]
	}

	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   120fc:	b95f      	cbnz	r7, 12116 <isr_rx_scan_report.isra.0+0x3a>
   120fe:	207f      	movs	r0, #127	; 0x7f
   12100:	7620      	strb	r0, [r4, #24]
		node_rx->hdr.rx_ftr.chan = _radio.scanner.chan - 1;
		node_rx->hdr.rx_ftr.ticks_anchor = _radio.ticks_anchor;
	}
#endif /* CONFIG_BT_CTLR_EXT_SCAN_FP */

	ull_rx_put(node_rx->hdr.link, node_rx);
   12102:	4621      	mov	r1, r4
   12104:	6820      	ldr	r0, [r4, #0]
	node_rx->hdr.rx_ftr.rl_idx = rl_idx;
   12106:	76a6      	strb	r6, [r4, #26]
	node_rx->hdr.rx_ftr.direct = dir_report;
   12108:	76e5      	strb	r5, [r4, #27]
	ull_rx_put(node_rx->hdr.link, node_rx);
   1210a:	f7fa fc1d 	bl	c948 <ull_rx_put>
	ull_rx_sched();
   1210e:	f7fa fc2b 	bl	c968 <ull_rx_sched>

	return 0;
   12112:	2000      	movs	r0, #0
}
   12114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   12116:	f001 f807 	bl	13128 <radio_rssi_get>
   1211a:	b2c0      	uxtb	r0, r0
   1211c:	e7f0      	b.n	12100 <isr_rx_scan_report.isra.0+0x24>
		return -ENOBUFS;
   1211e:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   12122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00012124 <abort_cb>:
{
   12124:	b510      	push	{r4, lr}
	if (!prepare_param) {
   12126:	b1d8      	cbz	r0, 12160 <abort_cb+0x3c>
	err = lll_hfclock_off();
   12128:	460c      	mov	r4, r1
   1212a:	f7ff fd53 	bl	11bd4 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1212e:	2800      	cmp	r0, #0
   12130:	db04      	blt.n	1213c <abort_cb+0x18>
	lll_done(param);
   12132:	4620      	mov	r0, r4
}
   12134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   12138:	f7ff bb08 	b.w	1174c <lll_done>
	LL_ASSERT(err >= 0);
   1213c:	4a0c      	ldr	r2, [pc, #48]	; (12170 <abort_cb+0x4c>)
   1213e:	490d      	ldr	r1, [pc, #52]	; (12174 <abort_cb+0x50>)
   12140:	480d      	ldr	r0, [pc, #52]	; (12178 <abort_cb+0x54>)
   12142:	f240 1383 	movw	r3, #387	; 0x183
   12146:	f003 fdfb 	bl	15d40 <printk>
   1214a:	4040      	eors	r0, r0
   1214c:	f380 8811 	msr	BASEPRI, r0
   12150:	f04f 0003 	mov.w	r0, #3
   12154:	df02      	svc	2
	lll_done(param);
   12156:	4620      	mov	r0, r4
}
   12158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1215c:	f7ff baf6 	b.w	1174c <lll_done>
			radio_isr_set(isr_abort, param);
   12160:	4806      	ldr	r0, [pc, #24]	; (1217c <abort_cb+0x58>)
   12162:	f000 fe53 	bl	12e0c <radio_isr_set>
}
   12166:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			radio_disable();
   1216a:	f000 bf4b 	b.w	13004 <radio_disable>
   1216e:	bf00      	nop
   12170:	0001a25c 	.word	0x0001a25c
   12174:	0001a250 	.word	0x0001a250
   12178:	000199cc 	.word	0x000199cc
   1217c:	00012181 	.word	0x00012181

00012180 <isr_abort>:
{
   12180:	b530      	push	{r4, r5, lr}
   12182:	b083      	sub	sp, #12
   12184:	4604      	mov	r4, r0
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   12186:	2500      	movs	r5, #0
	lll_isr_status_reset();
   12188:	f7ff fbb2 	bl	118f0 <lll_isr_status_reset>
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   1218c:	462b      	mov	r3, r5
   1218e:	4629      	mov	r1, r5
   12190:	2201      	movs	r2, #1
   12192:	9500      	str	r5, [sp, #0]
   12194:	4628      	mov	r0, r5
   12196:	f7f7 fe4d 	bl	9e34 <ticker_stop>
	radio_disable();
   1219a:	f000 ff33 	bl	13004 <radio_disable>
	radio_filter_disable();
   1219e:	f000 fff7 	bl	13190 <radio_filter_disable>
	if (++lll->chan == 3U) {
   121a2:	7da0      	ldrb	r0, [r4, #22]
   121a4:	f3c0 0241 	ubfx	r2, r0, #1, #2
   121a8:	3201      	adds	r2, #1
   121aa:	f002 0203 	and.w	r2, r2, #3
   121ae:	2a03      	cmp	r2, #3
   121b0:	bf14      	ite	ne
   121b2:	f362 0042 	bfine	r0, r2, #1, #2
		lll->chan = 0U;
   121b6:	f365 0042 	bfieq	r0, r5, #1, #2
   121ba:	75a0      	strb	r0, [r4, #22]
	lll_isr_cleanup(param);
   121bc:	4620      	mov	r0, r4
}
   121be:	b003      	add	sp, #12
   121c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	lll_isr_cleanup(param);
   121c4:	f7ff bba2 	b.w	1190c <lll_isr_cleanup>

000121c8 <lll_scan_init>:
}
   121c8:	2000      	movs	r0, #0
   121ca:	4770      	bx	lr

000121cc <lll_scan_reset>:
   121cc:	2000      	movs	r0, #0
   121ce:	4770      	bx	lr

000121d0 <lll_scan_prepare>:
{
   121d0:	b510      	push	{r4, lr}
   121d2:	b082      	sub	sp, #8
   121d4:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   121d6:	f7ff fce5 	bl	11ba4 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   121da:	2800      	cmp	r0, #0
   121dc:	db19      	blt.n	12212 <lll_scan_prepare+0x42>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   121de:	4a13      	ldr	r2, [pc, #76]	; (1222c <lll_scan_prepare+0x5c>)
   121e0:	4913      	ldr	r1, [pc, #76]	; (12230 <lll_scan_prepare+0x60>)
   121e2:	4814      	ldr	r0, [pc, #80]	; (12234 <lll_scan_prepare+0x64>)
   121e4:	9400      	str	r4, [sp, #0]
   121e6:	2300      	movs	r3, #0
   121e8:	f7fa fcc0 	bl	cb6c <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   121ec:	b108      	cbz	r0, 121f2 <lll_scan_prepare+0x22>
   121ee:	3044      	adds	r0, #68	; 0x44
   121f0:	d101      	bne.n	121f6 <lll_scan_prepare+0x26>
}
   121f2:	b002      	add	sp, #8
   121f4:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   121f6:	4a10      	ldr	r2, [pc, #64]	; (12238 <lll_scan_prepare+0x68>)
   121f8:	4910      	ldr	r1, [pc, #64]	; (1223c <lll_scan_prepare+0x6c>)
   121fa:	4811      	ldr	r0, [pc, #68]	; (12240 <lll_scan_prepare+0x70>)
   121fc:	2375      	movs	r3, #117	; 0x75
   121fe:	f003 fd9f 	bl	15d40 <printk>
   12202:	4040      	eors	r0, r0
   12204:	f380 8811 	msr	BASEPRI, r0
   12208:	f04f 0003 	mov.w	r0, #3
   1220c:	df02      	svc	2
}
   1220e:	b002      	add	sp, #8
   12210:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   12212:	4a09      	ldr	r2, [pc, #36]	; (12238 <lll_scan_prepare+0x68>)
   12214:	490b      	ldr	r1, [pc, #44]	; (12244 <lll_scan_prepare+0x74>)
   12216:	480a      	ldr	r0, [pc, #40]	; (12240 <lll_scan_prepare+0x70>)
   12218:	2372      	movs	r3, #114	; 0x72
   1221a:	f003 fd91 	bl	15d40 <printk>
   1221e:	4040      	eors	r0, r0
   12220:	f380 8811 	msr	BASEPRI, r0
   12224:	f04f 0003 	mov.w	r0, #3
   12228:	df02      	svc	2
   1222a:	e7d8      	b.n	121de <lll_scan_prepare+0xe>
   1222c:	00011c2d 	.word	0x00011c2d
   12230:	00012125 	.word	0x00012125
   12234:	00012081 	.word	0x00012081
   12238:	0001a25c 	.word	0x0001a25c
   1223c:	0001a2e0 	.word	0x0001a2e0
   12240:	000199cc 	.word	0x000199cc
   12244:	0001a250 	.word	0x0001a250

00012248 <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   12248:	b538      	push	{r3, r4, r5, lr}
   1224a:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   1224c:	f7ff fb50 	bl	118f0 <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   12250:	f7fa fc4e 	bl	caf0 <ull_event_done_extra_get>
	LL_ASSERT(e);
   12254:	4604      	mov	r4, r0
   12256:	b178      	cbz	r0, 12278 <isr_done+0x30>

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
	e->trx_cnt = trx_cnt;
   12258:	4b0e      	ldr	r3, [pc, #56]	; (12294 <isr_done+0x4c>)
	e->crc_valid = crc_valid;
   1225a:	490f      	ldr	r1, [pc, #60]	; (12298 <isr_done+0x50>)
	e->trx_cnt = trx_cnt;
   1225c:	881b      	ldrh	r3, [r3, #0]

#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
   1225e:	4a0f      	ldr	r2, [pc, #60]	; (1229c <isr_done+0x54>)
	e->trx_cnt = trx_cnt;
   12260:	8063      	strh	r3, [r4, #2]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   12262:	2301      	movs	r3, #1
	e->crc_valid = crc_valid;
   12264:	7809      	ldrb	r1, [r1, #0]
	e->mic_state = mic_state;
   12266:	7812      	ldrb	r2, [r2, #0]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   12268:	7023      	strb	r3, [r4, #0]
			lll->slave.window_size_event_us = 0;
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   1226a:	4628      	mov	r0, r5
	e->crc_valid = crc_valid;
   1226c:	7121      	strb	r1, [r4, #4]
	e->mic_state = mic_state;
   1226e:	7162      	strb	r2, [r4, #5]
}
   12270:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_isr_cleanup(param);
   12274:	f7ff bb4a 	b.w	1190c <lll_isr_cleanup>
	LL_ASSERT(e);
   12278:	4a09      	ldr	r2, [pc, #36]	; (122a0 <isr_done+0x58>)
   1227a:	490a      	ldr	r1, [pc, #40]	; (122a4 <isr_done+0x5c>)
   1227c:	480a      	ldr	r0, [pc, #40]	; (122a8 <isr_done+0x60>)
   1227e:	f44f 731d 	mov.w	r3, #628	; 0x274
   12282:	f003 fd5d 	bl	15d40 <printk>
   12286:	4040      	eors	r0, r0
   12288:	f380 8811 	msr	BASEPRI, r0
   1228c:	f04f 0003 	mov.w	r0, #3
   12290:	df02      	svc	2
   12292:	e7e1      	b.n	12258 <isr_done+0x10>
   12294:	20002238 	.word	0x20002238
   12298:	20002253 	.word	0x20002253
   1229c:	20002254 	.word	0x20002254
   122a0:	0001a2f4 	.word	0x0001a2f4
   122a4:	0001a340 	.word	0x0001a340
   122a8:	000199cc 	.word	0x000199cc

000122ac <lll_conn_init>:
{
   122ac:	b508      	push	{r3, lr}

static void empty_tx_init(void)
{
	struct pdu_data *p;

	p = (void *)radio_pkt_empty_get();
   122ae:	f000 ff01 	bl	130b4 <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   122b2:	7803      	ldrb	r3, [r0, #0]
   122b4:	2201      	movs	r2, #1
   122b6:	f362 0301 	bfi	r3, r2, #0, #2
   122ba:	7003      	strb	r3, [r0, #0]
}
   122bc:	2000      	movs	r0, #0
   122be:	bd08      	pop	{r3, pc}

000122c0 <lll_conn_reset>:
}
   122c0:	2000      	movs	r0, #0
   122c2:	4770      	bx	lr

000122c4 <lll_conn_flush>:
}
   122c4:	4770      	bx	lr
   122c6:	bf00      	nop

000122c8 <lll_conn_prepare_reset>:
	crc_valid = 0U;
   122c8:	4805      	ldr	r0, [pc, #20]	; (122e0 <lll_conn_prepare_reset+0x18>)
	crc_expire = 0U;
   122ca:	4906      	ldr	r1, [pc, #24]	; (122e4 <lll_conn_prepare_reset+0x1c>)
	mic_state = LLL_CONN_MIC_NONE;
   122cc:	4a06      	ldr	r2, [pc, #24]	; (122e8 <lll_conn_prepare_reset+0x20>)
{
   122ce:	b410      	push	{r4}
	trx_cnt = 0U;
   122d0:	2300      	movs	r3, #0
   122d2:	4c06      	ldr	r4, [pc, #24]	; (122ec <lll_conn_prepare_reset+0x24>)
	crc_valid = 0U;
   122d4:	7003      	strb	r3, [r0, #0]
	crc_expire = 0U;
   122d6:	700b      	strb	r3, [r1, #0]
	mic_state = LLL_CONN_MIC_NONE;
   122d8:	7013      	strb	r3, [r2, #0]
	trx_cnt = 0U;
   122da:	8023      	strh	r3, [r4, #0]
}
   122dc:	bc10      	pop	{r4}
   122de:	4770      	bx	lr
   122e0:	20002253 	.word	0x20002253
   122e4:	20002252 	.word	0x20002252
   122e8:	20002254 	.word	0x20002254
   122ec:	20002238 	.word	0x20002238

000122f0 <lll_conn_abort_cb>:
{
   122f0:	b510      	push	{r4, lr}
	if (!prepare_param) {
   122f2:	b1d0      	cbz	r0, 1232a <lll_conn_abort_cb+0x3a>
	err = lll_hfclock_off();
   122f4:	460c      	mov	r4, r1
   122f6:	f7ff fc6d 	bl	11bd4 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   122fa:	2800      	cmp	r0, #0
   122fc:	db04      	blt.n	12308 <lll_conn_abort_cb+0x18>
	lll_done(param);
   122fe:	4620      	mov	r0, r4
}
   12300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   12304:	f7ff ba22 	b.w	1174c <lll_done>
	LL_ASSERT(err >= 0);
   12308:	4a0b      	ldr	r2, [pc, #44]	; (12338 <lll_conn_abort_cb+0x48>)
   1230a:	490c      	ldr	r1, [pc, #48]	; (1233c <lll_conn_abort_cb+0x4c>)
   1230c:	480c      	ldr	r0, [pc, #48]	; (12340 <lll_conn_abort_cb+0x50>)
   1230e:	239c      	movs	r3, #156	; 0x9c
   12310:	f003 fd16 	bl	15d40 <printk>
   12314:	4040      	eors	r0, r0
   12316:	f380 8811 	msr	BASEPRI, r0
   1231a:	f04f 0003 	mov.w	r0, #3
   1231e:	df02      	svc	2
	lll_done(param);
   12320:	4620      	mov	r0, r4
}
   12322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   12326:	f7ff ba11 	b.w	1174c <lll_done>
		radio_isr_set(isr_done, param);
   1232a:	4806      	ldr	r0, [pc, #24]	; (12344 <lll_conn_abort_cb+0x54>)
   1232c:	f000 fd6e 	bl	12e0c <radio_isr_set>
}
   12330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   12334:	f000 be66 	b.w	13004 <radio_disable>
   12338:	0001a2f4 	.word	0x0001a2f4
   1233c:	0001a250 	.word	0x0001a250
   12340:	000199cc 	.word	0x000199cc
   12344:	00012249 	.word	0x00012249

00012348 <lll_conn_rx_pkt_set>:
{
   12348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1234a:	4605      	mov	r5, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
   1234c:	2001      	movs	r0, #1
   1234e:	f7fa fac5 	bl	c8dc <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   12352:	4604      	mov	r4, r0
   12354:	b348      	cbz	r0, 123aa <lll_conn_rx_pkt_set+0x62>
	phy = lll->phy_rx;
   12356:	f895 602b 	ldrb.w	r6, [r5, #43]	; 0x2b
	max_rx_octets = lll->max_rx_octets;
   1235a:	8caf      	ldrh	r7, [r5, #36]	; 0x24
	phy = lll->phy_rx;
   1235c:	f006 0607 	and.w	r6, r6, #7
	radio_phy_set(phy, 0);
   12360:	4630      	mov	r0, r6
   12362:	2100      	movs	r1, #0
   12364:	f000 fdb8 	bl	12ed8 <radio_phy_set>
	} else if (lll->enc_rx) {
   12368:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
   1236c:	0072      	lsls	r2, r6, #1
   1236e:	071b      	lsls	r3, r3, #28
   12370:	f104 041c 	add.w	r4, r4, #28
   12374:	f042 0201 	orr.w	r2, r2, #1
   12378:	d50e      	bpl.n	12398 <lll_conn_rx_pkt_set+0x50>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   1237a:	1d39      	adds	r1, r7, #4
   1237c:	b2c9      	uxtb	r1, r1
   1237e:	2008      	movs	r0, #8
   12380:	f000 fdf2 	bl	12f68 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   12384:	4622      	mov	r2, r4
   12386:	4631      	mov	r1, r6
   12388:	f105 0043 	add.w	r0, r5, #67	; 0x43
   1238c:	f001 f846 	bl	1341c <radio_ccm_rx_pkt_set>
}
   12390:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   12394:	f000 be16 	b.w	12fc4 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
   12398:	b2f9      	uxtb	r1, r7
   1239a:	2008      	movs	r0, #8
   1239c:	f000 fde4 	bl	12f68 <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   123a0:	4620      	mov	r0, r4
}
   123a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(node_rx->pdu);
   123a6:	f000 be0d 	b.w	12fc4 <radio_pkt_rx_set>
	LL_ASSERT(node_rx);
   123aa:	4a07      	ldr	r2, [pc, #28]	; (123c8 <lll_conn_rx_pkt_set+0x80>)
   123ac:	4907      	ldr	r1, [pc, #28]	; (123cc <lll_conn_rx_pkt_set+0x84>)
   123ae:	4808      	ldr	r0, [pc, #32]	; (123d0 <lll_conn_rx_pkt_set+0x88>)
   123b0:	f240 13d9 	movw	r3, #473	; 0x1d9
   123b4:	f003 fcc4 	bl	15d40 <printk>
   123b8:	4040      	eors	r0, r0
   123ba:	f380 8811 	msr	BASEPRI, r0
   123be:	f04f 0003 	mov.w	r0, #3
   123c2:	df02      	svc	2
   123c4:	e7c7      	b.n	12356 <lll_conn_rx_pkt_set+0xe>
   123c6:	bf00      	nop
   123c8:	0001a2f4 	.word	0x0001a2f4
   123cc:	0001a2a8 	.word	0x0001a2a8
   123d0:	000199cc 	.word	0x000199cc

000123d4 <lll_conn_isr_tx>:
{
   123d4:	b538      	push	{r3, r4, r5, lr}
   123d6:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   123d8:	f7ff fa78 	bl	118cc <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   123dc:	2096      	movs	r0, #150	; 0x96
   123de:	f000 ff09 	bl	131f4 <radio_tmr_tifs_set>
				     lll->phy_flags);
   123e2:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
	radio_switch_complete_and_tx(lll->phy_rx, 0,
   123e6:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
   123ea:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   123ee:	f000 0007 	and.w	r0, r0, #7
   123f2:	f002 0207 	and.w	r2, r2, #7
   123f6:	2100      	movs	r1, #0
   123f8:	f000 fe72 	bl	130e0 <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   123fc:	4620      	mov	r0, r4
   123fe:	f7ff ffa3 	bl	12348 <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   12402:	f000 fe23 	bl	1304c <radio_is_ready>
   12406:	bb58      	cbnz	r0, 12460 <lll_conn_isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 +
   12408:	f001 f802 	bl	13410 <radio_tmr_tifs_base_get>
   1240c:	4605      	mov	r5, r0
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1240e:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
   12412:	2101      	movs	r1, #1
   12414:	f000 0007 	and.w	r0, r0, #7
   12418:	f000 fde8 	bl	12fec <radio_rx_chain_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   1241c:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   12420:	f003 0307 	and.w	r3, r3, #7
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   12424:	4405      	add	r5, r0
#define RANGE_DISTANCE 1000 /* meters */
#define RANGE_DELAY_US (2 * RANGE_DISTANCE * 4 / 1000)

static inline uint32_t addr_us_get(uint8_t phy)
{
	switch (phy) {
   12426:	2b02      	cmp	r3, #2
   12428:	f105 05a3 	add.w	r5, r5, #163	; 0xa3
   1242c:	d016      	beq.n	1245c <lll_conn_isr_tx+0x88>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
   1242e:	2b04      	cmp	r3, #4
   12430:	bf14      	ite	ne
   12432:	2328      	movne	r3, #40	; 0x28
   12434:	f44f 73bc 	moveq.w	r3, #376	; 0x178
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   12438:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
   1243c:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   12440:	f000 0007 	and.w	r0, r0, #7
	hcto += addr_us_get(lll->phy_rx);
   12444:	441d      	add	r5, r3
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   12446:	f000 fdcf 	bl	12fe8 <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   1244a:	1a28      	subs	r0, r5, r0
   1244c:	f000 ffb2 	bl	133b4 <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   12450:	4621      	mov	r1, r4
   12452:	480a      	ldr	r0, [pc, #40]	; (1247c <lll_conn_isr_tx+0xa8>)
}
   12454:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   12458:	f000 bcd8 	b.w	12e0c <radio_isr_set>
	switch (phy) {
   1245c:	2318      	movs	r3, #24
   1245e:	e7eb      	b.n	12438 <lll_conn_isr_tx+0x64>
	LL_ASSERT(!radio_is_ready());
   12460:	4a07      	ldr	r2, [pc, #28]	; (12480 <lll_conn_isr_tx+0xac>)
   12462:	4908      	ldr	r1, [pc, #32]	; (12484 <lll_conn_isr_tx+0xb0>)
   12464:	4808      	ldr	r0, [pc, #32]	; (12488 <lll_conn_isr_tx+0xb4>)
   12466:	f240 13a5 	movw	r3, #421	; 0x1a5
   1246a:	f003 fc69 	bl	15d40 <printk>
   1246e:	4040      	eors	r0, r0
   12470:	f380 8811 	msr	BASEPRI, r0
   12474:	f04f 0003 	mov.w	r0, #3
   12478:	df02      	svc	2
   1247a:	e7c5      	b.n	12408 <lll_conn_isr_tx+0x34>
   1247c:	000125c5 	.word	0x000125c5
   12480:	0001a2f4 	.word	0x0001a2f4
   12484:	0001a2cc 	.word	0x0001a2cc
   12488:	000199cc 	.word	0x000199cc

0001248c <lll_conn_tx_pkt_set>:
{
   1248c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1248e:	460f      	mov	r7, r1
	phy = lll->phy_tx;
   12490:	f890 102a 	ldrb.w	r1, [r0, #42]	; 0x2a
	max_tx_octets = lll->max_tx_octets;
   12494:	8c46      	ldrh	r6, [r0, #34]	; 0x22
	phy = lll->phy_tx;
   12496:	f001 0407 	and.w	r4, r1, #7
{
   1249a:	4605      	mov	r5, r0
	radio_phy_set(phy, flags);
   1249c:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   124a0:	4620      	mov	r0, r4
   124a2:	f000 fd19 	bl	12ed8 <radio_phy_set>
	} else if (lll->enc_tx) {
   124a6:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
   124aa:	0062      	lsls	r2, r4, #1
   124ac:	06db      	lsls	r3, r3, #27
   124ae:	f042 0201 	orr.w	r2, r2, #1
   124b2:	b2f1      	uxtb	r1, r6
   124b4:	d50d      	bpl.n	124d2 <lll_conn_tx_pkt_set+0x46>
		radio_pkt_configure(8, (max_tx_octets + 4U),
   124b6:	3104      	adds	r1, #4
   124b8:	b2c9      	uxtb	r1, r1
   124ba:	2008      	movs	r0, #8
   124bc:	f000 fd54 	bl	12f68 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx,
   124c0:	4639      	mov	r1, r7
   124c2:	f105 0064 	add.w	r0, r5, #100	; 0x64
   124c6:	f000 ffe7 	bl	13498 <radio_ccm_tx_pkt_set>
}
   124ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx,
   124ce:	f000 bd7f 	b.w	12fd0 <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
   124d2:	2008      	movs	r0, #8
   124d4:	f000 fd48 	bl	12f68 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   124d8:	4638      	mov	r0, r7
}
   124da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   124de:	f000 bd77 	b.w	12fd0 <radio_pkt_tx_set>
   124e2:	bf00      	nop

000124e4 <lll_conn_pdu_tx_prep>:
{
   124e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   124e8:	4604      	mov	r4, r0
   124ea:	b083      	sub	sp, #12
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   124ec:	aa01      	add	r2, sp, #4
   124ee:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
{
   124f0:	4689      	mov	r9, r1
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   124f2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   124f4:	f7f6 f888 	bl	8608 <memq_peek>
	if (lll->empty || !link) {
   124f8:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   124fc:	075a      	lsls	r2, r3, #29
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   124fe:	4606      	mov	r6, r0
	if (lll->empty || !link) {
   12500:	d432      	bmi.n	12568 <lll_conn_pdu_tx_prep+0x84>
   12502:	2800      	cmp	r0, #0
   12504:	d04e      	beq.n	125a4 <lll_conn_pdu_tx_prep+0xc0>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   12506:	9a01      	ldr	r2, [sp, #4]
   12508:	f894 7041 	ldrb.w	r7, [r4, #65]	; 0x41
		if (!lll->packet_tx_head_len) {
   1250c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   12510:	f102 0804 	add.w	r8, r2, #4
   12514:	eb08 0507 	add.w	r5, r8, r7
		if (!lll->packet_tx_head_len) {
   12518:	b913      	cbnz	r3, 12520 <lll_conn_pdu_tx_prep+0x3c>
			lll->packet_tx_head_len = p->len;
   1251a:	786b      	ldrb	r3, [r5, #1]
   1251c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
		if (lll->packet_tx_head_offset) {
   12520:	b137      	cbz	r7, 12530 <lll_conn_pdu_tx_prep+0x4c>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   12522:	f818 2007 	ldrb.w	r2, [r8, r7]
   12526:	2101      	movs	r1, #1
   12528:	f361 0201 	bfi	r2, r1, #0, #2
   1252c:	f808 2007 	strb.w	r2, [r8, r7]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   12530:	1bdb      	subs	r3, r3, r7
   12532:	706b      	strb	r3, [r5, #1]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   12534:	4620      	mov	r0, r4
   12536:	f7fd fb3f 	bl	fbb8 <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   1253a:	786b      	ldrb	r3, [r5, #1]
   1253c:	4283      	cmp	r3, r0
   1253e:	d924      	bls.n	1258a <lll_conn_pdu_tx_prep+0xa6>
			p->len = max_tx_octets;
   12540:	7068      	strb	r0, [r5, #1]
			p->md = 1U;
   12542:	f818 3007 	ldrb.w	r3, [r8, r7]
   12546:	f043 0310 	orr.w	r3, r3, #16
   1254a:	f808 3007 	strb.w	r3, [r8, r7]
		p->rfu = 0U;
   1254e:	f818 3007 	ldrb.w	r3, [r8, r7]
		p->resv = 0U;
   12552:	2200      	movs	r2, #0
		p->rfu = 0U;
   12554:	f36f 1347 	bfc	r3, #5, #3
   12558:	f808 3007 	strb.w	r3, [r8, r7]
		p->resv = 0U;
   1255c:	70aa      	strb	r2, [r5, #2]
	*pdu_data_tx = p;
   1255e:	f8c9 5000 	str.w	r5, [r9]
}
   12562:	b003      	add	sp, #12
   12564:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		lll->empty = 1U;
   12568:	f043 0304 	orr.w	r3, r3, #4
   1256c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		p = (void *)radio_pkt_empty_get();
   12570:	f000 fda0 	bl	130b4 <radio_pkt_empty_get>
   12574:	4605      	mov	r5, r0
		if (link || FORCE_MD_CNT_GET()) {
   12576:	b1e6      	cbz	r6, 125b2 <lll_conn_pdu_tx_prep+0xce>
			p->md = 1U;
   12578:	7803      	ldrb	r3, [r0, #0]
   1257a:	f043 0310 	orr.w	r3, r3, #16
   1257e:	7003      	strb	r3, [r0, #0]
	*pdu_data_tx = p;
   12580:	f8c9 5000 	str.w	r5, [r9]
}
   12584:	b003      	add	sp, #12
   12586:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((link->next != lll->memq_tx.tail) ||
   1258a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1258c:	6832      	ldr	r2, [r6, #0]
   1258e:	429a      	cmp	r2, r3
			p->md = 1U;
   12590:	f818 3007 	ldrb.w	r3, [r8, r7]
   12594:	bf14      	ite	ne
   12596:	f043 0310 	orrne.w	r3, r3, #16
			p->md = 0U;
   1259a:	f36f 1304 	bfceq	r3, #4, #1
   1259e:	f808 3007 	strb.w	r3, [r8, r7]
   125a2:	e7d4      	b.n	1254e <lll_conn_pdu_tx_prep+0x6a>
		lll->empty = 1U;
   125a4:	f043 0304 	orr.w	r3, r3, #4
   125a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		p = (void *)radio_pkt_empty_get();
   125ac:	f000 fd82 	bl	130b4 <radio_pkt_empty_get>
   125b0:	4605      	mov	r5, r0
			p->md = 0U;
   125b2:	782b      	ldrb	r3, [r5, #0]
   125b4:	f36f 1304 	bfc	r3, #4, #1
   125b8:	702b      	strb	r3, [r5, #0]
	*pdu_data_tx = p;
   125ba:	f8c9 5000 	str.w	r5, [r9]
}
   125be:	b003      	add	sp, #12
   125c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000125c4 <lll_conn_isr_rx>:
{
   125c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   125c8:	b082      	sub	sp, #8
   125ca:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   125cc:	f000 fd48 	bl	13060 <radio_is_done>
	if (trx_done) {
   125d0:	f010 0fff 	tst.w	r0, #255	; 0xff
   125d4:	d10a      	bne.n	125ec <lll_conn_isr_rx+0x28>
	lll_isr_rx_status_reset();
   125d6:	f7ff f981 	bl	118dc <lll_isr_rx_status_reset>
		radio_isr_set(isr_done, param);
   125da:	48be      	ldr	r0, [pc, #760]	; (128d4 <lll_conn_isr_rx+0x310>)
   125dc:	4621      	mov	r1, r4
   125de:	f000 fc15 	bl	12e0c <radio_isr_set>
		radio_disable();
   125e2:	f000 fd0f 	bl	13004 <radio_disable>
}
   125e6:	b002      	add	sp, #8
   125e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		crc_ok = radio_crc_is_valid();
   125ec:	f000 fd58 	bl	130a0 <radio_crc_is_valid>
   125f0:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
   125f2:	f000 fda7 	bl	13144 <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   125f6:	f7ff f971 	bl	118dc <lll_isr_rx_status_reset>
	trx_cnt++;
   125fa:	4ab7      	ldr	r2, [pc, #732]	; (128d8 <lll_conn_isr_rx+0x314>)
   125fc:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   125fe:	2001      	movs	r0, #1
	trx_cnt++;
   12600:	4403      	add	r3, r0
   12602:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   12604:	f7fa f96a 	bl	c8dc <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   12608:	4606      	mov	r6, r0
   1260a:	2800      	cmp	r0, #0
   1260c:	f000 80c9 	beq.w	127a2 <lll_conn_isr_rx+0x1de>
	if (crc_ok) {
   12610:	2d00      	cmp	r5, #0
   12612:	d148      	bne.n	126a6 <lll_conn_isr_rx+0xe2>
		if (crc_expire == 0U) {
   12614:	4ab1      	ldr	r2, [pc, #708]	; (128dc <lll_conn_isr_rx+0x318>)
   12616:	7817      	ldrb	r7, [r2, #0]
   12618:	2f00      	cmp	r7, #0
   1261a:	f000 80ac 	beq.w	12776 <lll_conn_isr_rx+0x1b2>
	is_empty_pdu_tx_retry = lll->empty;
   1261e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   12622:	3f01      	subs	r7, #1
   12624:	b2ff      	uxtb	r7, r7
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   12626:	a901      	add	r1, sp, #4
   12628:	4620      	mov	r0, r4
		crc_expire--;
   1262a:	7017      	strb	r7, [r2, #0]
	is_empty_pdu_tx_retry = lll->empty;
   1262c:	f3c3 0980 	ubfx	r9, r3, #2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   12630:	f7ff ff58 	bl	124e4 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   12634:	2f00      	cmp	r7, #0
   12636:	f040 8136 	bne.w	128a6 <lll_conn_isr_rx+0x2e2>
		radio_isr_set(isr_done, param);
   1263a:	48a6      	ldr	r0, [pc, #664]	; (128d4 <lll_conn_isr_rx+0x310>)
   1263c:	4621      	mov	r1, r4
   1263e:	f000 fbe5 	bl	12e0c <radio_isr_set>
		} else if (!lll->role) {
   12642:	f994 301d 	ldrsb.w	r3, [r4, #29]
   12646:	2b00      	cmp	r3, #0
   12648:	f280 80fe 	bge.w	12848 <lll_conn_isr_rx+0x284>
	pdu_data_tx->sn = lll->sn;
   1264c:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
   12650:	9901      	ldr	r1, [sp, #4]
	pdu_data_tx->nesn = lll->nesn;
   12652:	f3c2 0340 	ubfx	r3, r2, #1, #1
   12656:	7808      	ldrb	r0, [r1, #0]
	pdu_data_tx->sn = lll->sn;
   12658:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   1265c:	009b      	lsls	r3, r3, #2
   1265e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   12662:	f020 020c 	bic.w	r2, r0, #12
   12666:	4313      	orrs	r3, r2
   12668:	700b      	strb	r3, [r1, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   1266a:	4620      	mov	r0, r4
   1266c:	f7ff ff0e 	bl	1248c <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   12670:	f000 fcec 	bl	1304c <radio_is_ready>
   12674:	2800      	cmp	r0, #0
   12676:	f040 80ca 	bne.w	1280e <lll_conn_isr_rx+0x24a>
	if (!radio_tmr_aa_restore()) {
   1267a:	f000 feb5 	bl	133e8 <radio_tmr_aa_restore>
   1267e:	2800      	cmp	r0, #0
   12680:	d065      	beq.n	1274e <lll_conn_isr_rx+0x18a>
	if (tx_release) {
   12682:	2d00      	cmp	r5, #0
   12684:	d069      	beq.n	1275a <lll_conn_isr_rx+0x196>
		LL_ASSERT(lll->handle != 0xFFFF);
   12686:	89a0      	ldrh	r0, [r4, #12]
   12688:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1268c:	4298      	cmp	r0, r3
   1268e:	f000 80cc 	beq.w	1282a <lll_conn_isr_rx+0x266>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   12692:	4629      	mov	r1, r5
   12694:	f7fd f8be 	bl	f814 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   12698:	2f00      	cmp	r7, #0
   1269a:	d161      	bne.n	12760 <lll_conn_isr_rx+0x19c>
		ull_rx_sched();
   1269c:	f7fa f964 	bl	c968 <ull_rx_sched>
}
   126a0:	b002      	add	sp, #8
   126a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (pdu_data_rx->nesn != lll->sn) {
   126a6:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   126aa:	7f32      	ldrb	r2, [r6, #28]
   126ac:	f003 0101 	and.w	r1, r3, #1
   126b0:	f3c2 0080 	ubfx	r0, r2, #2, #1
   126b4:	4288      	cmp	r0, r1
   126b6:	f000 8084 	beq.w	127c2 <lll_conn_isr_rx+0x1fe>
		lll->sn++;
   126ba:	f081 0101 	eor.w	r1, r1, #1
   126be:	f361 0300 	bfi	r3, r1, #0, #1
		if (!lll->empty) {
   126c2:	f013 0804 	ands.w	r8, r3, #4
		lll->sn++;
   126c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		if (!lll->empty) {
   126ca:	b2da      	uxtb	r2, r3
   126cc:	f040 80c9 	bne.w	12862 <lll_conn_isr_rx+0x29e>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   126d0:	e9d4 010b 	ldrd	r0, r1, [r4, #44]	; 0x2c
   126d4:	aa01      	add	r2, sp, #4
   126d6:	f7f5 ff97 	bl	8608 <memq_peek>
		if (link) {
   126da:	4682      	mov	sl, r0
   126dc:	2800      	cmp	r0, #0
   126de:	f000 80d7 	beq.w	12890 <lll_conn_isr_rx+0x2cc>
			pdu_data_tx = (void *)(tx->pdu +
   126e2:	9f01      	ldr	r7, [sp, #4]
					       lll->packet_tx_head_offset);
   126e4:	f894 9041 	ldrb.w	r9, [r4, #65]	; 0x41
			pdu_data_tx = (void *)(tx->pdu +
   126e8:	3704      	adds	r7, #4
   126ea:	eb07 0309 	add.w	r3, r7, r9
			pdu_data_tx_len = pdu_data_tx->len;
   126ee:	785a      	ldrb	r2, [r3, #1]
			if (pdu_data_tx_len != 0U) {
   126f0:	b152      	cbz	r2, 12708 <lll_conn_isr_rx+0x144>
				if (lll->enc_tx) {
   126f2:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   126f6:	06d9      	lsls	r1, r3, #27
   126f8:	d506      	bpl.n	12708 <lll_conn_isr_rx+0x144>
					lll->ccm_tx.counter++;
   126fa:	e9d4 311d 	ldrd	r3, r1, [r4, #116]	; 0x74
   126fe:	3301      	adds	r3, #1
   12700:	f141 0100 	adc.w	r1, r1, #0
   12704:	e9c4 311d 	strd	r3, r1, [r4, #116]	; 0x74
			if (offset < lll->packet_tx_head_len) {
   12708:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   1270c:	444a      	add	r2, r9
   1270e:	b2d2      	uxtb	r2, r2
			if (offset < lll->packet_tx_head_len) {
   12710:	429a      	cmp	r2, r3
   12712:	f0c0 80c4 	bcc.w	1289e <lll_conn_isr_rx+0x2da>
			} else if (offset == lll->packet_tx_head_len) {
   12716:	f000 810e 	beq.w	12936 <lll_conn_isr_rx+0x372>
				LL_ASSERT(0);
   1271a:	4a71      	ldr	r2, [pc, #452]	; (128e0 <lll_conn_isr_rx+0x31c>)
   1271c:	4971      	ldr	r1, [pc, #452]	; (128e4 <lll_conn_isr_rx+0x320>)
   1271e:	4872      	ldr	r0, [pc, #456]	; (128e8 <lll_conn_isr_rx+0x324>)
   12720:	f44f 7340 	mov.w	r3, #768	; 0x300
   12724:	f003 fb0c 	bl	15d40 <printk>
   12728:	4040      	eors	r0, r0
   1272a:	f380 8811 	msr	BASEPRI, r0
   1272e:	f04f 0003 	mov.w	r0, #3
   12732:	df02      	svc	2
	tx_release = NULL;
   12734:	2500      	movs	r5, #0
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   12736:	f994 301d 	ldrsb.w	r3, [r4, #29]
   1273a:	2b00      	cmp	r3, #0
   1273c:	f2c0 80ee 	blt.w	1291c <lll_conn_isr_rx+0x358>
			    !pdu_data_rx->md) {
   12740:	7f32      	ldrb	r2, [r6, #28]
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   12742:	06d3      	lsls	r3, r2, #27
   12744:	f140 80ee 	bpl.w	12924 <lll_conn_isr_rx+0x360>
   12748:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1274c:	e03c      	b.n	127c8 <lll_conn_isr_rx+0x204>
		radio_tmr_aa_save(radio_tmr_aa_get());
   1274e:	f000 fe3f 	bl	133d0 <radio_tmr_aa_get>
   12752:	f000 fe43 	bl	133dc <radio_tmr_aa_save>
	if (tx_release) {
   12756:	2d00      	cmp	r5, #0
   12758:	d195      	bne.n	12686 <lll_conn_isr_rx+0xc2>
	if (is_rx_enqueue) {
   1275a:	2f00      	cmp	r7, #0
   1275c:	f43f af43 	beq.w	125e6 <lll_conn_isr_rx+0x22>
		ull_pdu_rx_alloc();
   12760:	f7fa f8da 	bl	c918 <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   12764:	2303      	movs	r3, #3
   12766:	7133      	strb	r3, [r6, #4]
		node_rx->hdr.handle = lll->handle;
   12768:	89a3      	ldrh	r3, [r4, #12]
		ull_rx_put(node_rx->hdr.link, node_rx);
   1276a:	6830      	ldr	r0, [r6, #0]
		node_rx->hdr.handle = lll->handle;
   1276c:	80f3      	strh	r3, [r6, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   1276e:	4631      	mov	r1, r6
   12770:	f7fa f8ea 	bl	c948 <ull_rx_put>
	if (is_ull_rx) {
   12774:	e792      	b.n	1269c <lll_conn_isr_rx+0xd8>
		crc_expire--;
   12776:	2301      	movs	r3, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   12778:	a901      	add	r1, sp, #4
   1277a:	4620      	mov	r0, r4
		crc_expire--;
   1277c:	7013      	strb	r3, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1277e:	f7ff feb1 	bl	124e4 <lll_conn_pdu_tx_prep>
		radio_tmr_tifs_set(EVENT_IFS_US);
   12782:	2096      	movs	r0, #150	; 0x96
   12784:	f000 fd36 	bl	131f4 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(lll->phy_rx);
   12788:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
   1278c:	f000 0007 	and.w	r0, r0, #7
   12790:	f000 fc98 	bl	130c4 <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   12794:	4855      	ldr	r0, [pc, #340]	; (128ec <lll_conn_isr_rx+0x328>)
   12796:	4621      	mov	r1, r4
   12798:	f000 fb38 	bl	12e0c <radio_isr_set>
		radio_tmr_end_capture();
   1279c:	f000 fe2a 	bl	133f4 <radio_tmr_end_capture>
   127a0:	e754      	b.n	1264c <lll_conn_isr_rx+0x88>
	LL_ASSERT(node_rx);
   127a2:	4a4f      	ldr	r2, [pc, #316]	; (128e0 <lll_conn_isr_rx+0x31c>)
   127a4:	4952      	ldr	r1, [pc, #328]	; (128f0 <lll_conn_isr_rx+0x32c>)
   127a6:	4850      	ldr	r0, [pc, #320]	; (128e8 <lll_conn_isr_rx+0x324>)
   127a8:	23d1      	movs	r3, #209	; 0xd1
   127aa:	f003 fac9 	bl	15d40 <printk>
   127ae:	4040      	eors	r0, r0
   127b0:	f380 8811 	msr	BASEPRI, r0
   127b4:	f04f 0003 	mov.w	r0, #3
   127b8:	df02      	svc	2
	if (crc_ok) {
   127ba:	2d00      	cmp	r5, #0
   127bc:	f43f af2a 	beq.w	12614 <lll_conn_isr_rx+0x50>
   127c0:	e771      	b.n	126a6 <lll_conn_isr_rx+0xe2>
	is_done = 0U;
   127c2:	f04f 0800 	mov.w	r8, #0
	tx_release = NULL;
   127c6:	4645      	mov	r5, r8
	if ((pdu_data_rx->sn == lll->nesn) &&
   127c8:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   127cc:	f3c3 0140 	ubfx	r1, r3, #1, #1
   127d0:	428a      	cmp	r2, r1
   127d2:	d06a      	beq.n	128aa <lll_conn_isr_rx+0x2e6>
	is_rx_enqueue = 0U;
   127d4:	2700      	movs	r7, #0
		crc_expire = 0U;
   127d6:	4941      	ldr	r1, [pc, #260]	; (128dc <lll_conn_isr_rx+0x318>)
		crc_valid = 1U;
   127d8:	4a46      	ldr	r2, [pc, #280]	; (128f4 <lll_conn_isr_rx+0x330>)
		crc_expire = 0U;
   127da:	2000      	movs	r0, #0
   127dc:	7008      	strb	r0, [r1, #0]
	is_empty_pdu_tx_retry = lll->empty;
   127de:	f3c3 0980 	ubfx	r9, r3, #2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   127e2:	a901      	add	r1, sp, #4
		crc_valid = 1U;
   127e4:	2301      	movs	r3, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   127e6:	4620      	mov	r0, r4
		crc_valid = 1U;
   127e8:	7013      	strb	r3, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   127ea:	f7ff fe7b 	bl	124e4 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   127ee:	f1b8 0f00 	cmp.w	r8, #0
   127f2:	f47f af22 	bne.w	1263a <lll_conn_isr_rx+0x76>
   127f6:	7f33      	ldrb	r3, [r6, #28]
   127f8:	06d9      	lsls	r1, r3, #27
   127fa:	d4c2      	bmi.n	12782 <lll_conn_isr_rx+0x1be>
			      (pdu_data_tx->md == 0) &&
   127fc:	9b01      	ldr	r3, [sp, #4]
   127fe:	781a      	ldrb	r2, [r3, #0]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   12800:	06d2      	lsls	r2, r2, #27
   12802:	d4be      	bmi.n	12782 <lll_conn_isr_rx+0x1be>
			      (pdu_data_tx->md == 0) &&
   12804:	785b      	ldrb	r3, [r3, #1]
   12806:	2b00      	cmp	r3, #0
   12808:	f43f af17 	beq.w	1263a <lll_conn_isr_rx+0x76>
   1280c:	e7b9      	b.n	12782 <lll_conn_isr_rx+0x1be>
	LL_ASSERT(!radio_is_ready());
   1280e:	4a34      	ldr	r2, [pc, #208]	; (128e0 <lll_conn_isr_rx+0x31c>)
   12810:	4939      	ldr	r1, [pc, #228]	; (128f8 <lll_conn_isr_rx+0x334>)
   12812:	4835      	ldr	r0, [pc, #212]	; (128e8 <lll_conn_isr_rx+0x324>)
   12814:	f240 133d 	movw	r3, #317	; 0x13d
   12818:	f003 fa92 	bl	15d40 <printk>
   1281c:	4040      	eors	r0, r0
   1281e:	f380 8811 	msr	BASEPRI, r0
   12822:	f04f 0003 	mov.w	r0, #3
   12826:	df02      	svc	2
   12828:	e727      	b.n	1267a <lll_conn_isr_rx+0xb6>
		LL_ASSERT(lll->handle != 0xFFFF);
   1282a:	4a2d      	ldr	r2, [pc, #180]	; (128e0 <lll_conn_isr_rx+0x31c>)
   1282c:	4933      	ldr	r1, [pc, #204]	; (128fc <lll_conn_isr_rx+0x338>)
   1282e:	482e      	ldr	r0, [pc, #184]	; (128e8 <lll_conn_isr_rx+0x324>)
   12830:	f44f 73a6 	mov.w	r3, #332	; 0x14c
   12834:	f003 fa84 	bl	15d40 <printk>
   12838:	4040      	eors	r0, r0
   1283a:	f380 8811 	msr	BASEPRI, r0
   1283e:	f04f 0003 	mov.w	r0, #3
   12842:	df02      	svc	2
   12844:	89a0      	ldrh	r0, [r4, #12]
   12846:	e724      	b.n	12692 <lll_conn_isr_rx+0xce>
			radio_disable();
   12848:	f000 fbdc 	bl	13004 <radio_disable>
			LL_ASSERT(!radio_is_ready());
   1284c:	f000 fbfe 	bl	1304c <radio_is_ready>
   12850:	2800      	cmp	r0, #0
   12852:	d155      	bne.n	12900 <lll_conn_isr_rx+0x33c>
			lll->empty = is_empty_pdu_tx_retry;
   12854:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   12858:	f369 0382 	bfi	r3, r9, #2, #1
   1285c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
			goto lll_conn_isr_rx_exit;
   12860:	e70b      	b.n	1267a <lll_conn_isr_rx+0xb6>
			lll->empty = 0;
   12862:	f36f 0282 	bfc	r2, #2, #1
   12866:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
			pdu_data_tx = (void *)radio_pkt_empty_get();
   1286a:	f000 fc23 	bl	130b4 <radio_pkt_empty_get>
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   1286e:	f994 301d 	ldrsb.w	r3, [r4, #29]
   12872:	2b00      	cmp	r3, #0
   12874:	db0c      	blt.n	12890 <lll_conn_isr_rx+0x2cc>
			    !pdu_data_rx->md) {
   12876:	7f32      	ldrb	r2, [r6, #28]
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   12878:	f012 0510 	ands.w	r5, r2, #16
   1287c:	d109      	bne.n	12892 <lll_conn_isr_rx+0x2ce>
				*is_done = !pdu_data_tx->md;
   1287e:	f890 8000 	ldrb.w	r8, [r0]
   12882:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   12886:	f088 0810 	eor.w	r8, r8, #16
   1288a:	f3c8 1800 	ubfx	r8, r8, #4, #1
   1288e:	e79b      	b.n	127c8 <lll_conn_isr_rx+0x204>
   12890:	7f32      	ldrb	r2, [r6, #28]
   12892:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
	is_done = 0U;
   12896:	f04f 0800 	mov.w	r8, #0
	tx_release = NULL;
   1289a:	4645      	mov	r5, r8
   1289c:	e794      	b.n	127c8 <lll_conn_isr_rx+0x204>
				lll->packet_tx_head_offset = offset;
   1289e:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
	tx_release = NULL;
   128a2:	2500      	movs	r5, #0
   128a4:	e747      	b.n	12736 <lll_conn_isr_rx+0x172>
	is_rx_enqueue = 0U;
   128a6:	462f      	mov	r7, r5
   128a8:	e76b      	b.n	12782 <lll_conn_isr_rx+0x1be>
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   128aa:	2003      	movs	r0, #3
   128ac:	f7fa f816 	bl	c8dc <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   128b0:	b168      	cbz	r0, 128ce <lll_conn_isr_rx+0x30a>
		lll->nesn++;
   128b2:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   128b6:	f083 0302 	eor.w	r3, r3, #2
   128ba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		if (pdu_data_rx->len != 0) {
   128be:	7f73      	ldrb	r3, [r6, #29]
   128c0:	b12b      	cbz	r3, 128ce <lll_conn_isr_rx+0x30a>
			if (lll->enc_rx) {
   128c2:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   128c6:	0718      	lsls	r0, r3, #28
   128c8:	d444      	bmi.n	12954 <lll_conn_isr_rx+0x390>
			*is_rx_enqueue = 1U;
   128ca:	2701      	movs	r7, #1
   128cc:	e783      	b.n	127d6 <lll_conn_isr_rx+0x212>
   128ce:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   128d2:	e77f      	b.n	127d4 <lll_conn_isr_rx+0x210>
   128d4:	00012249 	.word	0x00012249
   128d8:	20002238 	.word	0x20002238
   128dc:	20002252 	.word	0x20002252
   128e0:	0001a2f4 	.word	0x0001a2f4
   128e4:	00019a2c 	.word	0x00019a2c
   128e8:	000199cc 	.word	0x000199cc
   128ec:	000123d5 	.word	0x000123d5
   128f0:	0001a2a8 	.word	0x0001a2a8
   128f4:	20002253 	.word	0x20002253
   128f8:	0001a2cc 	.word	0x0001a2cc
   128fc:	0001a34c 	.word	0x0001a34c
			LL_ASSERT(!radio_is_ready());
   12900:	4a3b      	ldr	r2, [pc, #236]	; (129f0 <lll_conn_isr_rx+0x42c>)
   12902:	493c      	ldr	r1, [pc, #240]	; (129f4 <lll_conn_isr_rx+0x430>)
   12904:	483c      	ldr	r0, [pc, #240]	; (129f8 <lll_conn_isr_rx+0x434>)
   12906:	f240 1303 	movw	r3, #259	; 0x103
   1290a:	f003 fa19 	bl	15d40 <printk>
   1290e:	4040      	eors	r0, r0
   12910:	f380 8811 	msr	BASEPRI, r0
   12914:	f04f 0003 	mov.w	r0, #3
   12918:	df02      	svc	2
   1291a:	e79b      	b.n	12854 <lll_conn_isr_rx+0x290>
   1291c:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   12920:	7f32      	ldrb	r2, [r6, #28]
   12922:	e751      	b.n	127c8 <lll_conn_isr_rx+0x204>
				*is_done = !pdu_data_tx->md;
   12924:	f817 8009 	ldrb.w	r8, [r7, r9]
   12928:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1292c:	f088 0810 	eor.w	r8, r8, #16
   12930:	f3c8 1800 	ubfx	r8, r8, #4, #1
   12934:	e748      	b.n	127c8 <lll_conn_isr_rx+0x204>
				lll->packet_tx_head_len = 0;
   12936:	2200      	movs	r2, #0
				memq_dequeue(lll->memq_tx.tail,
   12938:	6b20      	ldr	r0, [r4, #48]	; 0x30
				lll->packet_tx_head_len = 0;
   1293a:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
				memq_dequeue(lll->memq_tx.tail,
   1293e:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   12942:	f7f5 fe69 	bl	8618 <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   12946:	9d01      	ldr	r5, [sp, #4]
   12948:	682b      	ldr	r3, [r5, #0]
   1294a:	f8ca 3000 	str.w	r3, [sl]
				tx->next = link;
   1294e:	f8c5 a000 	str.w	sl, [r5]
				FORCE_MD_CNT_SET();
   12952:	e6f0      	b.n	12736 <lll_conn_isr_rx+0x172>
				done = radio_ccm_is_done();
   12954:	f000 fdca 	bl	134ec <radio_ccm_is_done>
				LL_ASSERT(done);
   12958:	2800      	cmp	r0, #0
   1295a:	d03b      	beq.n	129d4 <lll_conn_isr_rx+0x410>
				bool mic_failure = !radio_ccm_mic_is_valid();
   1295c:	f000 fde8 	bl	13530 <radio_ccm_mic_is_valid>
				if (mic_failure &&
   12960:	bb30      	cbnz	r0, 129b0 <lll_conn_isr_rx+0x3ec>
				    lll->ccm_rx.counter == 0 &&
   12962:	f8d4 2053 	ldr.w	r2, [r4, #83]	; 0x53
   12966:	f8d4 3057 	ldr.w	r3, [r4, #87]	; 0x57
				if (mic_failure &&
   1296a:	4313      	orrs	r3, r2
   1296c:	d104      	bne.n	12978 <lll_conn_isr_rx+0x3b4>
				    (pdu_data_rx->ll_id ==
   1296e:	7f33      	ldrb	r3, [r6, #28]
				    lll->ccm_rx.counter == 0 &&
   12970:	f003 0303 	and.w	r3, r3, #3
   12974:	2b03      	cmp	r3, #3
   12976:	d004      	beq.n	12982 <lll_conn_isr_rx+0x3be>
					mic_state = LLL_CONN_MIC_FAIL;
   12978:	4b20      	ldr	r3, [pc, #128]	; (129fc <lll_conn_isr_rx+0x438>)
   1297a:	2202      	movs	r2, #2
   1297c:	701a      	strb	r2, [r3, #0]
	is_rx_enqueue = 0U;
   1297e:	2700      	movs	r7, #0
   12980:	e67b      	b.n	1267a <lll_conn_isr_rx+0xb6>
						radio_pkt_scratch_get();
   12982:	f000 fb9b 	bl	130bc <radio_pkt_scratch_get>
					if (ctrl_pdu_len_check(
   12986:	7842      	ldrb	r2, [r0, #1]
   12988:	2a27      	cmp	r2, #39	; 0x27
						radio_pkt_scratch_get();
   1298a:	4601      	mov	r1, r0
					if (ctrl_pdu_len_check(
   1298c:	d8f4      	bhi.n	12978 <lll_conn_isr_rx+0x3b4>
						memcpy(pdu_data_rx,
   1298e:	3203      	adds	r2, #3
   12990:	f106 001c 	add.w	r0, r6, #28
   12994:	f004 f88c 	bl	16ab0 <memcpy>
						lll->ccm_rx.counter--;
   12998:	f8d4 3053 	ldr.w	r3, [r4, #83]	; 0x53
   1299c:	f8d4 2057 	ldr.w	r2, [r4, #87]	; 0x57
   129a0:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
   129a4:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   129a8:	f8c4 3053 	str.w	r3, [r4, #83]	; 0x53
   129ac:	f8c4 2057 	str.w	r2, [r4, #87]	; 0x57
				lll->ccm_rx.counter++;
   129b0:	f8d4 3053 	ldr.w	r3, [r4, #83]	; 0x53
   129b4:	f8d4 2057 	ldr.w	r2, [r4, #87]	; 0x57
				mic_state = LLL_CONN_MIC_PASS;
   129b8:	4910      	ldr	r1, [pc, #64]	; (129fc <lll_conn_isr_rx+0x438>)
				lll->ccm_rx.counter++;
   129ba:	3301      	adds	r3, #1
						lll->ccm_rx.counter--;
   129bc:	f104 0053 	add.w	r0, r4, #83	; 0x53
				lll->ccm_rx.counter++;
   129c0:	f142 0200 	adc.w	r2, r2, #0
   129c4:	f8c4 3053 	str.w	r3, [r4, #83]	; 0x53
				mic_state = LLL_CONN_MIC_PASS;
   129c8:	2701      	movs	r7, #1
				lll->ccm_rx.counter++;
   129ca:	6042      	str	r2, [r0, #4]
				mic_state = LLL_CONN_MIC_PASS;
   129cc:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   129d0:	700f      	strb	r7, [r1, #0]
		if (err) {
   129d2:	e700      	b.n	127d6 <lll_conn_isr_rx+0x212>
				LL_ASSERT(done);
   129d4:	4a06      	ldr	r2, [pc, #24]	; (129f0 <lll_conn_isr_rx+0x42c>)
   129d6:	490a      	ldr	r1, [pc, #40]	; (12a00 <lll_conn_isr_rx+0x43c>)
   129d8:	4807      	ldr	r0, [pc, #28]	; (129f8 <lll_conn_isr_rx+0x434>)
   129da:	f240 331b 	movw	r3, #795	; 0x31b
   129de:	f003 f9af 	bl	15d40 <printk>
   129e2:	4040      	eors	r0, r0
   129e4:	f380 8811 	msr	BASEPRI, r0
   129e8:	f04f 0003 	mov.w	r0, #3
   129ec:	df02      	svc	2
   129ee:	e7b5      	b.n	1295c <lll_conn_isr_rx+0x398>
   129f0:	0001a2f4 	.word	0x0001a2f4
   129f4:	0001a2cc 	.word	0x0001a2cc
   129f8:	000199cc 	.word	0x000199cc
   129fc:	20002254 	.word	0x20002254
   12a00:	0001a344 	.word	0x0001a344

00012a04 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   12a04:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct evt_hdr *evt;
	uint32_t remainder;

	DEBUG_RADIO_START_M(1);

	lll = p->param;
   12a06:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   12a08:	89a2      	ldrh	r2, [r4, #12]
   12a0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   12a0e:	429a      	cmp	r2, r3
{
   12a10:	b085      	sub	sp, #20
	if (unlikely(lll->handle == 0xFFFF)) {
   12a12:	f000 8092 	beq.w	12b3a <prepare_cb+0x136>

		return 0;
	}

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   12a16:	4605      	mov	r5, r0
   12a18:	f7ff fc56 	bl	122c8 <lll_conn_prepare_reset>

	/* Deduce the latency */
	lll->latency_event = lll->latency_prepare - 1;
   12a1c:	8a61      	ldrh	r1, [r4, #18]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   12a1e:	8ae6      	ldrh	r6, [r4, #22]
	lll->event_counter = lll->event_counter + lll->latency_prepare;

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   12a20:	7f63      	ldrb	r3, [r4, #29]
	lll->latency_event = lll->latency_prepare - 1;
   12a22:	1e48      	subs	r0, r1, #1
	lll->event_counter = lll->event_counter + lll->latency_prepare;
   12a24:	4431      	add	r1, r6
	lll->latency_prepare = 0;
   12a26:	2200      	movs	r2, #0
	lll->latency_event = lll->latency_prepare - 1;
   12a28:	b280      	uxth	r0, r0
	lll->event_counter = lll->event_counter + lll->latency_prepare;
   12a2a:	82e1      	strh	r1, [r4, #22]
	if (lll->data_chan_sel) {
   12a2c:	0659      	lsls	r1, r3, #25
	lll->latency_prepare = 0;
   12a2e:	8262      	strh	r2, [r4, #18]
	lll->latency_event = lll->latency_prepare - 1;
   12a30:	82a0      	strh	r0, [r4, #20]
	if (lll->data_chan_sel) {
   12a32:	f104 0218 	add.w	r2, r4, #24
   12a36:	d463      	bmi.n	12b00 <prepare_cb+0xfc>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   12a38:	f003 063f 	and.w	r6, r3, #63	; 0x3f
   12a3c:	7fa1      	ldrb	r1, [r4, #30]
   12a3e:	9600      	str	r6, [sp, #0]
   12a40:	4613      	mov	r3, r2
   12a42:	4602      	mov	r2, r0
   12a44:	f104 001f 	add.w	r0, r4, #31
   12a48:	f7fd fc4a 	bl	102e0 <lll_chan_sel_1>
   12a4c:	4606      	mov	r6, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* Prepare the Tx PDU */
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   12a4e:	a903      	add	r1, sp, #12
   12a50:	4620      	mov	r0, r4
   12a52:	f7ff fd47 	bl	124e4 <lll_conn_pdu_tx_prep>
	pdu_data_tx->sn = lll->sn;
   12a56:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
   12a5a:	9803      	ldr	r0, [sp, #12]
	pdu_data_tx->nesn = lll->nesn;
   12a5c:	f3c2 0340 	ubfx	r3, r2, #1, #1
   12a60:	7801      	ldrb	r1, [r0, #0]
	pdu_data_tx->sn = lll->sn;
   12a62:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   12a66:	009b      	lsls	r3, r3, #2
   12a68:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   12a6c:	f021 020c 	bic.w	r2, r1, #12
   12a70:	4313      	orrs	r3, r2
   12a72:	7003      	strb	r3, [r0, #0]

	/* Start setting up of Radio h/w */
	radio_reset();
   12a74:	f000 fa0c 	bl	12e90 <radio_reset>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   12a78:	2000      	movs	r0, #0
   12a7a:	f000 fa3d 	bl	12ef8 <radio_tx_power_set>
#endif

	radio_aa_set(lll->access_addr);
   12a7e:	1d20      	adds	r0, r4, #4
   12a80:	f000 fa58 	bl	12f34 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
			    (((uint32_t)lll->crc_init[2] << 16) |
			     ((uint32_t)lll->crc_init[1] << 8) |
   12a84:	7a63      	ldrb	r3, [r4, #9]
			    (((uint32_t)lll->crc_init[2] << 16) |
   12a86:	7aa2      	ldrb	r2, [r4, #10]
			     ((uint32_t)lll->crc_init[0])));
   12a88:	7a21      	ldrb	r1, [r4, #8]
			     ((uint32_t)lll->crc_init[1] << 8) |
   12a8a:	021b      	lsls	r3, r3, #8
			    (((uint32_t)lll->crc_init[2] << 16) |
   12a8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   12a90:	4319      	orrs	r1, r3
   12a92:	f240 605b 	movw	r0, #1627	; 0x65b
   12a96:	f000 faf7 	bl	13088 <radio_crc_configure>
	lll_chan_set(data_chan_use);
   12a9a:	4630      	mov	r0, r6
   12a9c:	f7fe fed2 	bl	11844 <lll_chan_set>

	/* setup the radio tx packet buffer */
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   12aa0:	9903      	ldr	r1, [sp, #12]
   12aa2:	4620      	mov	r0, r4
   12aa4:	f7ff fcf2 	bl	1248c <lll_conn_tx_pkt_set>

	radio_isr_set(lll_conn_isr_tx, lll);
   12aa8:	4621      	mov	r1, r4
   12aaa:	4828      	ldr	r0, [pc, #160]	; (12b4c <prepare_cb+0x148>)
   12aac:	f000 f9ae 	bl	12e0c <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   12ab0:	2096      	movs	r0, #150	; 0x96
   12ab2:	f000 fb9f 	bl	131f4 <radio_tmr_tifs_set>

#if defined(CONFIG_BT_CTLR_PHY)
	radio_switch_complete_and_rx(lll->phy_rx);
   12ab6:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
   12aba:	f000 0007 	and.w	r0, r0, #7
   12abe:	f000 fb01 	bl	130c4 <radio_switch_complete_and_rx>
#else /* !CONFIG_BT_CTLR_PHY */
	radio_switch_complete_and_rx(0);
#endif /* !CONFIG_BT_CTLR_PHY */

	ticks_at_event = p->ticks_at_expire;
	evt = HDR_LLL2EVT(lll);
   12ac2:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   12ac4:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   12ac6:	4638      	mov	r0, r7
   12ac8:	f7fe fe9e 	bl	11808 <lll_evt_offset_get>
   12acc:	4406      	add	r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(1, ticks_at_start, remainder);
   12ace:	686a      	ldr	r2, [r5, #4]
   12ad0:	f106 0109 	add.w	r1, r6, #9
   12ad4:	2001      	movs	r0, #1
   12ad6:	f000 fb99 	bl	1320c <radio_tmr_start>

	/* capture end of Tx-ed PDU, used to calculate HCTO. */
	radio_tmr_end_capture();
   12ada:	f000 fc8b 	bl	133f4 <radio_tmr_end_capture>
#endif /* !CONFIG_BT_CTLR_GPIO_PA_PIN */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(evt, (TICKER_ID_CONN_BASE + lll->handle),
   12ade:	7b21      	ldrb	r1, [r4, #12]
   12ae0:	3103      	adds	r1, #3
   12ae2:	4632      	mov	r2, r6
   12ae4:	4638      	mov	r0, r7
   12ae6:	b2c9      	uxtb	r1, r1
   12ae8:	f7fe fe9c 	bl	11824 <lll_preempt_calc>
   12aec:	b188      	cbz	r0, 12b12 <prepare_cb+0x10e>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   12aee:	4818      	ldr	r0, [pc, #96]	; (12b50 <prepare_cb+0x14c>)
   12af0:	4621      	mov	r1, r4
   12af2:	f000 f98b 	bl	12e0c <radio_isr_set>
		radio_disable();
   12af6:	f000 fa85 	bl	13004 <radio_disable>
	}

	DEBUG_RADIO_START_M(1);

	return 0;
}
   12afa:	2000      	movs	r0, #0
   12afc:	b005      	add	sp, #20
   12afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	event_counter = lll->event_counter + lll->latency_event;
   12b00:	4430      	add	r0, r6
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   12b02:	8be1      	ldrh	r1, [r4, #30]
   12b04:	b280      	uxth	r0, r0
   12b06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   12b0a:	f7fd fc31 	bl	10370 <lll_chan_sel_2>
   12b0e:	4606      	mov	r6, r0
   12b10:	e79d      	b.n	12a4e <prepare_cb+0x4a>
		ret = lll_prepare_done(lll);
   12b12:	4620      	mov	r0, r4
   12b14:	f7fe fe18 	bl	11748 <lll_prepare_done>
		LL_ASSERT(!ret);
   12b18:	2800      	cmp	r0, #0
   12b1a:	d0ee      	beq.n	12afa <prepare_cb+0xf6>
   12b1c:	4a0d      	ldr	r2, [pc, #52]	; (12b54 <prepare_cb+0x150>)
   12b1e:	490e      	ldr	r1, [pc, #56]	; (12b58 <prepare_cb+0x154>)
   12b20:	480e      	ldr	r0, [pc, #56]	; (12b5c <prepare_cb+0x158>)
   12b22:	23e4      	movs	r3, #228	; 0xe4
   12b24:	f003 f90c 	bl	15d40 <printk>
   12b28:	4040      	eors	r0, r0
   12b2a:	f380 8811 	msr	BASEPRI, r0
   12b2e:	f04f 0003 	mov.w	r0, #3
   12b32:	df02      	svc	2
}
   12b34:	2000      	movs	r0, #0
   12b36:	b005      	add	sp, #20
   12b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(lll_isr_early_abort, lll);
   12b3a:	4809      	ldr	r0, [pc, #36]	; (12b60 <prepare_cb+0x15c>)
   12b3c:	4621      	mov	r1, r4
   12b3e:	f000 f965 	bl	12e0c <radio_isr_set>
		radio_disable();
   12b42:	f000 fa5f 	bl	13004 <radio_disable>
}
   12b46:	2000      	movs	r0, #0
   12b48:	b005      	add	sp, #20
   12b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12b4c:	000123d5 	.word	0x000123d5
   12b50:	00011979 	.word	0x00011979
   12b54:	0001a364 	.word	0x0001a364
   12b58:	00019c10 	.word	0x00019c10
   12b5c:	000199cc 	.word	0x000199cc
   12b60:	0001198d 	.word	0x0001198d

00012b64 <lll_master_prepare>:
{
   12b64:	b530      	push	{r4, r5, lr}
   12b66:	b083      	sub	sp, #12
   12b68:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   12b6a:	f7ff f81b 	bl	11ba4 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   12b6e:	2800      	cmp	r0, #0
   12b70:	db1f      	blt.n	12bb2 <lll_master_prepare+0x4e>
	lll = p->param;
   12b72:	68e0      	ldr	r0, [r4, #12]
	elapsed = p->lazy + 1;
   12b74:	8923      	ldrh	r3, [r4, #8]
	lll->latency_prepare += elapsed;
   12b76:	8a45      	ldrh	r5, [r0, #18]
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   12b78:	4a14      	ldr	r2, [pc, #80]	; (12bcc <lll_master_prepare+0x68>)
   12b7a:	4915      	ldr	r1, [pc, #84]	; (12bd0 <lll_master_prepare+0x6c>)
	elapsed = p->lazy + 1;
   12b7c:	3301      	adds	r3, #1
	lll->latency_prepare += elapsed;
   12b7e:	442b      	add	r3, r5
   12b80:	8243      	strh	r3, [r0, #18]
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   12b82:	4814      	ldr	r0, [pc, #80]	; (12bd4 <lll_master_prepare+0x70>)
   12b84:	9400      	str	r4, [sp, #0]
   12b86:	2300      	movs	r3, #0
   12b88:	f7f9 fff0 	bl	cb6c <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   12b8c:	b108      	cbz	r0, 12b92 <lll_master_prepare+0x2e>
   12b8e:	3044      	adds	r0, #68	; 0x44
   12b90:	d101      	bne.n	12b96 <lll_master_prepare+0x32>
}
   12b92:	b003      	add	sp, #12
   12b94:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   12b96:	4a10      	ldr	r2, [pc, #64]	; (12bd8 <lll_master_prepare+0x74>)
   12b98:	4910      	ldr	r1, [pc, #64]	; (12bdc <lll_master_prepare+0x78>)
   12b9a:	4811      	ldr	r0, [pc, #68]	; (12be0 <lll_master_prepare+0x7c>)
   12b9c:	2357      	movs	r3, #87	; 0x57
   12b9e:	f003 f8cf 	bl	15d40 <printk>
   12ba2:	4040      	eors	r0, r0
   12ba4:	f380 8811 	msr	BASEPRI, r0
   12ba8:	f04f 0003 	mov.w	r0, #3
   12bac:	df02      	svc	2
}
   12bae:	b003      	add	sp, #12
   12bb0:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(err >= 0);
   12bb2:	4a09      	ldr	r2, [pc, #36]	; (12bd8 <lll_master_prepare+0x74>)
   12bb4:	490b      	ldr	r1, [pc, #44]	; (12be4 <lll_master_prepare+0x80>)
   12bb6:	480a      	ldr	r0, [pc, #40]	; (12be0 <lll_master_prepare+0x7c>)
   12bb8:	2349      	movs	r3, #73	; 0x49
   12bba:	f003 f8c1 	bl	15d40 <printk>
   12bbe:	4040      	eors	r0, r0
   12bc0:	f380 8811 	msr	BASEPRI, r0
   12bc4:	f04f 0003 	mov.w	r0, #3
   12bc8:	df02      	svc	2
   12bca:	e7d2      	b.n	12b72 <lll_master_prepare+0xe>
   12bcc:	00012a05 	.word	0x00012a05
   12bd0:	000122f1 	.word	0x000122f1
   12bd4:	00011801 	.word	0x00011801
   12bd8:	0001a364 	.word	0x0001a364
   12bdc:	0001a2e0 	.word	0x0001a2e0
   12be0:	000199cc 	.word	0x000199cc
   12be4:	0001a250 	.word	0x0001a250

00012be8 <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   12be8:	4b05      	ldr	r3, [pc, #20]	; (12c00 <cntr_init+0x18>)
    p_reg->EVTENSET = mask;
   12bea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   12bee:	2100      	movs	r1, #0
   12bf0:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   12bf4:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   12bf8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   12bfc:	4770      	bx	lr
   12bfe:	bf00      	nop
   12c00:	4000b000 	.word	0x4000b000

00012c04 <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   12c04:	4b05      	ldr	r3, [pc, #20]	; (12c1c <cntr_start+0x18>)
   12c06:	7818      	ldrb	r0, [r3, #0]
   12c08:	1c42      	adds	r2, r0, #1
   12c0a:	701a      	strb	r2, [r3, #0]
   12c0c:	b918      	cbnz	r0, 12c16 <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   12c0e:	4b04      	ldr	r3, [pc, #16]	; (12c20 <cntr_start+0x1c>)
   12c10:	2201      	movs	r2, #1
   12c12:	601a      	str	r2, [r3, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   12c14:	4770      	bx	lr
		return 1;
   12c16:	2001      	movs	r0, #1
}
   12c18:	4770      	bx	lr
   12c1a:	bf00      	nop
   12c1c:	20002255 	.word	0x20002255
   12c20:	4000b000 	.word	0x4000b000

00012c24 <cntr_stop>:

uint32_t cntr_stop(void)
{
   12c24:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   12c26:	4c0d      	ldr	r4, [pc, #52]	; (12c5c <cntr_stop+0x38>)
   12c28:	7820      	ldrb	r0, [r4, #0]
   12c2a:	b148      	cbz	r0, 12c40 <cntr_stop+0x1c>

	if (--_refcount) {
   12c2c:	3801      	subs	r0, #1
   12c2e:	b2c0      	uxtb	r0, r0
   12c30:	7020      	strb	r0, [r4, #0]
   12c32:	b918      	cbnz	r0, 12c3c <cntr_stop+0x18>
   12c34:	4b0a      	ldr	r3, [pc, #40]	; (12c60 <cntr_stop+0x3c>)
   12c36:	2201      	movs	r2, #1
   12c38:	601a      	str	r2, [r3, #0]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   12c3a:	bd10      	pop	{r4, pc}
		return 1;
   12c3c:	2001      	movs	r0, #1
}
   12c3e:	bd10      	pop	{r4, pc}
	LL_ASSERT(_refcount);
   12c40:	4a08      	ldr	r2, [pc, #32]	; (12c64 <cntr_stop+0x40>)
   12c42:	4909      	ldr	r1, [pc, #36]	; (12c68 <cntr_stop+0x44>)
   12c44:	4809      	ldr	r0, [pc, #36]	; (12c6c <cntr_stop+0x48>)
   12c46:	232d      	movs	r3, #45	; 0x2d
   12c48:	f003 f87a 	bl	15d40 <printk>
   12c4c:	4040      	eors	r0, r0
   12c4e:	f380 8811 	msr	BASEPRI, r0
   12c52:	f04f 0003 	mov.w	r0, #3
   12c56:	df02      	svc	2
   12c58:	7820      	ldrb	r0, [r4, #0]
   12c5a:	e7e7      	b.n	12c2c <cntr_stop+0x8>
   12c5c:	20002255 	.word	0x20002255
   12c60:	4000b004 	.word	0x4000b004
   12c64:	0001a3b4 	.word	0x0001a3b4
   12c68:	0001a400 	.word	0x0001a400
   12c6c:	000199cc 	.word	0x000199cc

00012c70 <cntr_cnt_get>:
     return p_reg->COUNTER;
   12c70:	4b01      	ldr	r3, [pc, #4]	; (12c78 <cntr_cnt_get+0x8>)
   12c72:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   12c76:	4770      	bx	lr
   12c78:	4000b000 	.word	0x4000b000

00012c7c <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   12c7c:	4b02      	ldr	r3, [pc, #8]	; (12c88 <cntr_cmp_set+0xc>)
   12c7e:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   12c82:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   12c86:	4770      	bx	lr
   12c88:	4000b000 	.word	0x4000b000

00012c8c <do_ecb>:
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   12c8c:	b4f0      	push	{r4, r5, r6, r7}
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   12c8e:	4b12      	ldr	r3, [pc, #72]	; (12cd8 <do_ecb+0x4c>)

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12c90:	4d12      	ldr	r5, [pc, #72]	; (12cdc <do_ecb+0x50>)
   12c92:	2601      	movs	r6, #1
   12c94:	4634      	mov	r4, r6
		NRF_ECB->EVENTS_ENDECB = 0;
   12c96:	2100      	movs	r1, #0
   12c98:	602c      	str	r4, [r5, #0]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   12c9a:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   12c9e:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   12ca2:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   12ca6:	601c      	str	r4, [r3, #0]
}
   12ca8:	e005      	b.n	12cb6 <do_ecb+0x2a>
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   12caa:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   12cae:	b932      	cbnz	r2, 12cbe <do_ecb+0x32>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   12cb0:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   12cb4:	b11a      	cbz	r2, 12cbe <do_ecb+0x32>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   12cb6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   12cba:	2a00      	cmp	r2, #0
   12cbc:	d0f5      	beq.n	12caa <do_ecb+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12cbe:	602e      	str	r6, [r5, #0]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   12cc0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   12cc4:	2a00      	cmp	r2, #0
   12cc6:	d1e7      	bne.n	12c98 <do_ecb+0xc>
   12cc8:	f8d3 7504 	ldr.w	r7, [r3, #1284]	; 0x504
   12ccc:	2f00      	cmp	r7, #0
   12cce:	d0e3      	beq.n	12c98 <do_ecb+0xc>

	NRF_ECB->ECBDATAPTR = 0;
}
   12cd0:	bcf0      	pop	{r4, r5, r6, r7}
	NRF_ECB->ECBDATAPTR = 0;
   12cd2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   12cd6:	4770      	bx	lr
   12cd8:	4000e000 	.word	0x4000e000
   12cdc:	4000e004 	.word	0x4000e004

00012ce0 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   12ce0:	b570      	push	{r4, r5, r6, lr}
   12ce2:	b08c      	sub	sp, #48	; 0x30
   12ce4:	460e      	mov	r6, r1
   12ce6:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   12ce8:	4601      	mov	r1, r0
   12cea:	2210      	movs	r2, #16
   12cec:	4668      	mov	r0, sp
{
   12cee:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   12cf0:	f7f5 fc5a 	bl	85a8 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   12cf4:	2210      	movs	r2, #16
   12cf6:	eb0d 0002 	add.w	r0, sp, r2
   12cfa:	4631      	mov	r1, r6
   12cfc:	f7f5 fc54 	bl	85a8 <mem_rcopy>

	do_ecb(&ecb);
   12d00:	4668      	mov	r0, sp
   12d02:	f7ff ffc3 	bl	12c8c <do_ecb>

	if (cipher_text_le) {
   12d06:	b125      	cbz	r5, 12d12 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   12d08:	4628      	mov	r0, r5
   12d0a:	2210      	movs	r2, #16
   12d0c:	a908      	add	r1, sp, #32
   12d0e:	f7f5 fc4b 	bl	85a8 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   12d12:	b124      	cbz	r4, 12d1e <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   12d14:	4620      	mov	r0, r4
   12d16:	2210      	movs	r2, #16
   12d18:	a908      	add	r1, sp, #32
   12d1a:	f003 fec9 	bl	16ab0 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   12d1e:	b00c      	add	sp, #48	; 0x30
   12d20:	bd70      	pop	{r4, r5, r6, pc}
   12d22:	bf00      	nop

00012d24 <sw_switch.isra.0>:
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static uint8_t sw_tifs_toggle;

static void sw_switch(uint8_t dir, uint8_t phy_curr, uint8_t flags_curr, uint8_t phy_next,
   12d24:	b4f0      	push	{r4, r5, r6, r7}
		      uint8_t flags_next)
{
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   12d26:	4e2a      	ldr	r6, [pc, #168]	; (12dd0 <sw_switch.isra.0+0xac>)
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   12d28:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 12de4 <sw_switch.isra.0+0xc0>
   12d2c:	7834      	ldrb	r4, [r6, #0]
   12d2e:	4b29      	ldr	r3, [pc, #164]	; (12dd4 <sw_switch.isra.0+0xb0>)
   12d30:	f8cc 3568 	str.w	r3, [ip, #1384]	; 0x568
   12d34:	f104 030c 	add.w	r3, r4, #12
   12d38:	b2db      	uxtb	r3, r3
   12d3a:	00db      	lsls	r3, r3, #3
	 * (TX/RX).
	 */
	nrf_ppi_event_endpoint_setup(
		NRF_PPI,
		radio_enable_ppi,
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   12d3c:	4f26      	ldr	r7, [pc, #152]	; (12dd8 <sw_switch.isra.0+0xb4>)
   12d3e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   12d42:	00e5      	lsls	r5, r4, #3
   12d44:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   12d48:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   12d4c:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   12d50:	eb07 0784 	add.w	r7, r7, r4, lsl #2
    p_reg->CH[(uint32_t) channel].TEP = tep;
   12d54:	f8cc 556c 	str.w	r5, [ip, #1388]	; 0x56c
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   12d58:	b225      	sxth	r5, r4

NRF_STATIC_INLINE void nrf_ppi_event_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                    nrf_ppi_channel_t channel,
                                                    uint32_t          eep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   12d5a:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	uint8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	uint32_t delay;

	hal_radio_sw_switch_setup(cc, ppi, sw_tifs_toggle);

	if (dir) {
   12d5e:	b388      	cbz	r0, 12dc4 <sw_switch.isra.0+0xa0>
	}
}

static inline uint32_t hal_radio_tx_ready_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   12d60:	f24a 17b8 	movw	r7, #41400	; 0xa1b8
   12d64:	f649 6c34 	movw	ip, #40500	; 0x9e34
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_NS;
   12d68:	f242 40b8 	movw	r0, #9400	; 0x24b8
	switch (phy) {
   12d6c:	2a02      	cmp	r2, #2
   12d6e:	bf14      	ite	ne
   12d70:	463a      	movne	r2, r7
   12d72:	4662      	moveq	r2, ip
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_NS;
   12d74:	f241 3788 	movw	r7, #5000	; 0x1388
   12d78:	2902      	cmp	r1, #2
   12d7a:	bf14      	ite	ne
   12d7c:	4601      	movne	r1, r0
   12d7e:	4639      	moveq	r1, r7
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
   12d80:	4816      	ldr	r0, [pc, #88]	; (12ddc <sw_switch.isra.0+0xb8>)

NRF_STATIC_INLINE void nrf_ppi_task_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                   nrf_ppi_channel_t channel,
                                                   uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].TEP = tep;
   12d82:	4f17      	ldr	r7, [pc, #92]	; (12de0 <sw_switch.isra.0+0xbc>)
   12d84:	f8c3 7514 	str.w	r7, [r3, #1300]	; 0x514
   12d88:	440a      	add	r2, r1
   12d8a:	fba0 3202 	umull	r3, r2, r0, r2
   12d8e:	0992      	lsrs	r2, r2, #6
		}
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
   12d90:	00ab      	lsls	r3, r5, #2
   12d92:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   12d96:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1U;
   12d9a:	3401      	adds	r4, #1
		SW_SWITCH_TIMER->CC[cc]) {
   12d9c:	f8d3 1540 	ldr.w	r1, [r3, #1344]	; 0x540
	if (delay <
   12da0:	4291      	cmp	r1, r2
				 SW_SWITCH_TIMER->CC[cc] - delay);
   12da2:	bf8a      	itet	hi
   12da4:	f8d3 1540 	ldrhi.w	r1, [r3, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   12da8:	2201      	movls	r2, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   12daa:	1a8a      	subhi	r2, r1, r2
   12dac:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    p_reg->CHENSET = mask;
   12db0:	4b0c      	ldr	r3, [pc, #48]	; (12de4 <sw_switch.isra.0+0xc0>)
	sw_tifs_toggle &= 1;
   12db2:	f004 0401 	and.w	r4, r4, #1
   12db6:	f44f 6210 	mov.w	r2, #2304	; 0x900
   12dba:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   12dbe:	7034      	strb	r4, [r6, #0]
}
   12dc0:	bcf0      	pop	{r4, r5, r6, r7}
   12dc2:	4770      	bx	lr
    p_reg->CH[(uint32_t) channel].TEP = tep;
   12dc4:	4a08      	ldr	r2, [pc, #32]	; (12de8 <sw_switch.isra.0+0xc4>)
   12dc6:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
   12dca:	2228      	movs	r2, #40	; 0x28
{
	nrf_ppi_task_endpoint_setup(
		NRF_PPI,
		ppi,
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_RX);
}
   12dcc:	e7e0      	b.n	12d90 <sw_switch.isra.0+0x6c>
   12dce:	bf00      	nop
   12dd0:	20002256 	.word	0x20002256
   12dd4:	4000110c 	.word	0x4000110c
   12dd8:	40009140 	.word	0x40009140
   12ddc:	10624dd3 	.word	0x10624dd3
   12de0:	40001000 	.word	0x40001000
   12de4:	4001f000 	.word	0x4001f000
   12de8:	40001004 	.word	0x40001004

00012dec <isr_radio>:
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   12dec:	4b04      	ldr	r3, [pc, #16]	; (12e00 <isr_radio+0x14>)
   12dee:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   12df2:	b123      	cbz	r3, 12dfe <isr_radio+0x12>
		isr_cb(isr_cb_param);
   12df4:	4a03      	ldr	r2, [pc, #12]	; (12e04 <isr_radio+0x18>)
   12df6:	4b04      	ldr	r3, [pc, #16]	; (12e08 <isr_radio+0x1c>)
   12df8:	6810      	ldr	r0, [r2, #0]
   12dfa:	681b      	ldr	r3, [r3, #0]
   12dfc:	4718      	bx	r3
}
   12dfe:	4770      	bx	lr
   12e00:	40001000 	.word	0x40001000
   12e04:	2000209c 	.word	0x2000209c
   12e08:	20002098 	.word	0x20002098

00012e0c <radio_isr_set>:
{
   12e0c:	b538      	push	{r3, r4, r5, lr}
   12e0e:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   12e10:	2001      	movs	r0, #1
{
   12e12:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   12e14:	f7f1 fd3c 	bl	4890 <arch_irq_disable>
	isr_cb_param = param;
   12e18:	4a08      	ldr	r2, [pc, #32]	; (12e3c <radio_isr_set+0x30>)
	isr_cb = cb;
   12e1a:	4809      	ldr	r0, [pc, #36]	; (12e40 <radio_isr_set+0x34>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12e1c:	4b09      	ldr	r3, [pc, #36]	; (12e44 <radio_isr_set+0x38>)
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   12e1e:	490a      	ldr	r1, [pc, #40]	; (12e48 <radio_isr_set+0x3c>)
	isr_cb_param = param;
   12e20:	6015      	str	r5, [r2, #0]
   12e22:	2510      	movs	r5, #16
   12e24:	2202      	movs	r2, #2
	isr_cb = cb;
   12e26:	6004      	str	r4, [r0, #0]
   12e28:	f8c1 5304 	str.w	r5, [r1, #772]	; 0x304
	irq_enable(RADIO_IRQn);
   12e2c:	2001      	movs	r0, #1
   12e2e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   12e32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   12e36:	f7f1 bd1b 	b.w	4870 <arch_irq_enable>
   12e3a:	bf00      	nop
   12e3c:	2000209c 	.word	0x2000209c
   12e40:	20002098 	.word	0x20002098
   12e44:	e000e100 	.word	0xe000e100
   12e48:	40001000 	.word	0x40001000

00012e4c <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   12e4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12e50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   12e54:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   12e56:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   12e5a:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   12e5e:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   12e62:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   12e66:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   12e6a:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   12e6e:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   12e72:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   12e76:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   12e7a:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   12e7e:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   12e82:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   12e86:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   12e8a:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   12e8e:	4770      	bx	lr

00012e90 <radio_reset>:
{
   12e90:	b510      	push	{r4, lr}
	irq_disable(RADIO_IRQn);
   12e92:	2001      	movs	r0, #1
   12e94:	f7f1 fcfc 	bl	4890 <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (uint32_t) radio_power;
   12e98:	4b0c      	ldr	r3, [pc, #48]	; (12ecc <radio_reset+0x3c>)
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   12e9a:	490d      	ldr	r1, [pc, #52]	; (12ed0 <radio_reset+0x40>)
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   12e9c:	4a0d      	ldr	r2, [pc, #52]	; (12ed4 <radio_reset+0x44>)
   12e9e:	2400      	movs	r4, #0
   12ea0:	2001      	movs	r0, #1
   12ea2:	f8c3 4ffc 	str.w	r4, [r3, #4092]	; 0xffc
   12ea6:	f8c3 0ffc 	str.w	r0, [r3, #4092]	; 0xffc
   12eaa:	680b      	ldr	r3, [r1, #0]
					 0xfffffffe) | 0x01000000;
   12eac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   12eb0:	f023 0301 	bic.w	r3, r3, #1
   12eb4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   12eb8:	f44f 5490 	mov.w	r4, #4608	; 0x1200
		BIT(HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) |
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(0));
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   12ebc:	f44f 5010 	mov.w	r0, #9216	; 0x2400
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   12ec0:	600b      	str	r3, [r1, #0]
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   12ec2:	f8c2 4800 	str.w	r4, [r2, #2048]	; 0x800
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   12ec6:	f8c2 0804 	str.w	r0, [r2, #2052]	; 0x804
}
   12eca:	bd10      	pop	{r4, pc}
   12ecc:	40001000 	.word	0x40001000
   12ed0:	40001774 	.word	0x40001774
   12ed4:	4001f000 	.word	0x4001f000

00012ed8 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   12ed8:	4b06      	ldr	r3, [pc, #24]	; (12ef4 <radio_phy_set+0x1c>)
	switch (phy) {
   12eda:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   12edc:	bf14      	ite	ne
   12ede:	2203      	movne	r2, #3
   12ee0:	2204      	moveq	r2, #4
   12ee2:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   12ee6:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   12eea:	f042 0201 	orr.w	r2, r2, #1
   12eee:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   12ef2:	4770      	bx	lr
   12ef4:	40001000 	.word	0x40001000

00012ef8 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   12ef8:	4b01      	ldr	r3, [pc, #4]	; (12f00 <radio_tx_power_set+0x8>)
   12efa:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   12efe:	4770      	bx	lr
   12f00:	40001000 	.word	0x40001000

00012f04 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   12f04:	4b01      	ldr	r3, [pc, #4]	; (12f0c <radio_freq_chan_set+0x8>)
   12f06:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   12f0a:	4770      	bx	lr
   12f0c:	40001000 	.word	0x40001000

00012f10 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   12f10:	4b07      	ldr	r3, [pc, #28]	; (12f30 <radio_whiten_iv_set+0x20>)
   12f12:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   12f16:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   12f1a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   12f1e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   12f22:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   12f26:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   12f2a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   12f2e:	4770      	bx	lr
   12f30:	40001000 	.word	0x40001000

00012f34 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   12f34:	4a0b      	ldr	r2, [pc, #44]	; (12f64 <radio_aa_set+0x30>)
   12f36:	2100      	movs	r1, #0
	NRF_RADIO->RXADDRESSES =
   12f38:	2301      	movs	r3, #1
{
   12f3a:	b410      	push	{r4}
	NRF_RADIO->TXADDRESS =
   12f3c:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   12f40:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   12f44:	78c3      	ldrb	r3, [r0, #3]
   12f46:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   12f4a:	7843      	ldrb	r3, [r0, #1]
   12f4c:	7884      	ldrb	r4, [r0, #2]
   12f4e:	7801      	ldrb	r1, [r0, #0]
   12f50:	041b      	lsls	r3, r3, #16
   12f52:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
   12f56:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
}
   12f5a:	bc10      	pop	{r4}
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   12f5c:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   12f60:	4770      	bx	lr
   12f62:	bf00      	nop
   12f64:	40001000 	.word	0x40001000

00012f68 <radio_pkt_configure>:
	switch (phy) {
   12f68:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   12f6c:	2b02      	cmp	r3, #2
{
   12f6e:	b410      	push	{r4}
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   12f70:	bf14      	ite	ne
   12f72:	2400      	movne	r4, #0
   12f74:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
	if (dc) {
   12f78:	07d3      	lsls	r3, r2, #31
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   12f7a:	f1c0 0308 	rsb	r3, r0, #8
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   12f7e:	bf48      	it	mi
   12f80:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   12f84:	041b      	lsls	r3, r3, #16
			   ((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   12f86:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   12f8a:	4320      	orrs	r0, r4
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   12f8c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   12f90:	4a0a      	ldr	r2, [pc, #40]	; (12fbc <radio_pkt_configure+0x54>)
}
   12f92:	bc10      	pop	{r4}
			    RADIO_PCNF0_S1LEN_Msk) |
   12f94:	4303      	orrs	r3, r0
   12f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   12f9a:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   12f9e:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   12fa2:	4807      	ldr	r0, [pc, #28]	; (12fc0 <radio_pkt_configure+0x58>)
   12fa4:	4018      	ands	r0, r3
   12fa6:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((uint32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   12faa:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   12fae:	4319      	orrs	r1, r3
   12fb0:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   12fb4:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
   12fb8:	4770      	bx	lr
   12fba:	bf00      	nop
   12fbc:	40001000 	.word	0x40001000
   12fc0:	fef80000 	.word	0xfef80000

00012fc4 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   12fc4:	4b01      	ldr	r3, [pc, #4]	; (12fcc <radio_pkt_rx_set+0x8>)
   12fc6:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   12fca:	4770      	bx	lr
   12fcc:	40001000 	.word	0x40001000

00012fd0 <radio_pkt_tx_set>:
   12fd0:	4b01      	ldr	r3, [pc, #4]	; (12fd8 <radio_pkt_tx_set+0x8>)
   12fd2:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   12fd6:	4770      	bx	lr
   12fd8:	40001000 	.word	0x40001000

00012fdc <radio_tx_ready_delay_get>:
	switch (phy) {
   12fdc:	2802      	cmp	r0, #2
}
   12fde:	bf14      	ite	ne
   12fe0:	2029      	movne	r0, #41	; 0x29
   12fe2:	2028      	moveq	r0, #40	; 0x28
   12fe4:	4770      	bx	lr
   12fe6:	bf00      	nop

00012fe8 <radio_tx_chain_delay_get>:
}
   12fe8:	2001      	movs	r0, #1
   12fea:	4770      	bx	lr

00012fec <radio_rx_chain_delay_get>:
	switch (phy) {
   12fec:	2802      	cmp	r0, #2
}
   12fee:	bf14      	ite	ne
   12ff0:	200a      	movne	r0, #10
   12ff2:	2005      	moveq	r0, #5
   12ff4:	4770      	bx	lr
   12ff6:	bf00      	nop

00012ff8 <radio_rx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12ff8:	4b01      	ldr	r3, [pc, #4]	; (13000 <radio_rx_enable+0x8>)
   12ffa:	2201      	movs	r2, #1
   12ffc:	601a      	str	r2, [r3, #0]
}
   12ffe:	4770      	bx	lr
   13000:	40001004 	.word	0x40001004

00013004 <radio_disable>:
{
   13004:	b430      	push	{r4, r5}
    p_reg->CHENCLR = mask;
   13006:	4a08      	ldr	r2, [pc, #32]	; (13028 <radio_disable+0x24>)
	NRF_RADIO->SHORTS = 0;
   13008:	4808      	ldr	r0, [pc, #32]	; (1302c <radio_disable+0x28>)
   1300a:	4909      	ldr	r1, [pc, #36]	; (13030 <radio_disable+0x2c>)
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   1300c:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   1300e:	f44f 6510 	mov.w	r5, #2304	; 0x900
   13012:	2400      	movs	r4, #0
   13014:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   13018:	6053      	str	r3, [r2, #4]
   1301a:	60d3      	str	r3, [r2, #12]
   1301c:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
   13020:	bc30      	pop	{r4, r5}
   13022:	600b      	str	r3, [r1, #0]
   13024:	4770      	bx	lr
   13026:	bf00      	nop
   13028:	4001f000 	.word	0x4001f000
   1302c:	40001000 	.word	0x40001000
   13030:	40001010 	.word	0x40001010

00013034 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   13034:	4b04      	ldr	r3, [pc, #16]	; (13048 <radio_status_reset+0x14>)
   13036:	2200      	movs	r2, #0
   13038:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   1303c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   13040:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   13044:	4770      	bx	lr
   13046:	bf00      	nop
   13048:	40001000 	.word	0x40001000

0001304c <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   1304c:	4b03      	ldr	r3, [pc, #12]	; (1305c <radio_is_ready+0x10>)
   1304e:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   13052:	3800      	subs	r0, #0
   13054:	bf18      	it	ne
   13056:	2001      	movne	r0, #1
   13058:	4770      	bx	lr
   1305a:	bf00      	nop
   1305c:	40001000 	.word	0x40001000

00013060 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   13060:	4b03      	ldr	r3, [pc, #12]	; (13070 <radio_is_done+0x10>)
   13062:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   13066:	3800      	subs	r0, #0
   13068:	bf18      	it	ne
   1306a:	2001      	movne	r0, #1
   1306c:	4770      	bx	lr
   1306e:	bf00      	nop
   13070:	40001000 	.word	0x40001000

00013074 <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
   13074:	4b03      	ldr	r3, [pc, #12]	; (13084 <radio_is_idle+0x10>)
   13076:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   1307a:	fab0 f080 	clz	r0, r0
   1307e:	0940      	lsrs	r0, r0, #5
   13080:	4770      	bx	lr
   13082:	bf00      	nop
   13084:	40001000 	.word	0x40001000

00013088 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
   13088:	4b04      	ldr	r3, [pc, #16]	; (1309c <radio_crc_configure+0x14>)
   1308a:	f240 1203 	movw	r2, #259	; 0x103
   1308e:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
   13092:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   13096:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   1309a:	4770      	bx	lr
   1309c:	40001000 	.word	0x40001000

000130a0 <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
   130a0:	4b03      	ldr	r3, [pc, #12]	; (130b0 <radio_crc_is_valid+0x10>)
   130a2:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   130a6:	3800      	subs	r0, #0
   130a8:	bf18      	it	ne
   130aa:	2001      	movne	r0, #1
   130ac:	4770      	bx	lr
   130ae:	bf00      	nop
   130b0:	40001000 	.word	0x40001000

000130b4 <radio_pkt_empty_get>:
}
   130b4:	4800      	ldr	r0, [pc, #0]	; (130b8 <radio_pkt_empty_get+0x4>)
   130b6:	4770      	bx	lr
   130b8:	20001f90 	.word	0x20001f90

000130bc <radio_pkt_scratch_get>:
}
   130bc:	4800      	ldr	r0, [pc, #0]	; (130c0 <radio_pkt_scratch_get+0x4>)
   130be:	4770      	bx	lr
   130c0:	20001f94 	.word	0x20001f94

000130c4 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   130c4:	4b05      	ldr	r3, [pc, #20]	; (130dc <radio_switch_complete_and_rx+0x18>)
{
   130c6:	b410      	push	{r4}
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
   130c8:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   130ca:	2403      	movs	r4, #3
{
   130cc:	4602      	mov	r2, r0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   130ce:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
   130d2:	4608      	mov	r0, r1
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   130d4:	bc10      	pop	{r4}
	sw_switch(0, 0, 0, phy_rx, 0);
   130d6:	f7ff be25 	b.w	12d24 <sw_switch.isra.0>
   130da:	bf00      	nop
   130dc:	40001000 	.word	0x40001000

000130e0 <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   130e0:	4b04      	ldr	r3, [pc, #16]	; (130f4 <radio_switch_complete_and_tx+0x14>)
{
   130e2:	b410      	push	{r4}
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   130e4:	2403      	movs	r4, #3
{
   130e6:	4601      	mov	r1, r0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   130e8:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   130ec:	2001      	movs	r0, #1
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   130ee:	bc10      	pop	{r4}
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   130f0:	f7ff be18 	b.w	12d24 <sw_switch.isra.0>
   130f4:	40001000 	.word	0x40001000

000130f8 <radio_switch_complete_and_disable>:

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   130f8:	4904      	ldr	r1, [pc, #16]	; (1310c <radio_switch_complete_and_disable+0x14>)
    p_reg->CHENCLR = mask;
   130fa:	4b05      	ldr	r3, [pc, #20]	; (13110 <radio_switch_complete_and_disable+0x18>)
   130fc:	2003      	movs	r0, #3
   130fe:	f44f 6210 	mov.w	r2, #2304	; 0x900
   13102:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   13106:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1310a:	4770      	bx	lr
   1310c:	40001000 	.word	0x40001000
   13110:	4001f000 	.word	0x4001f000

00013114 <radio_rssi_measure>:

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   13114:	4a03      	ldr	r2, [pc, #12]	; (13124 <radio_rssi_measure+0x10>)
   13116:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1311a:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   1311e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	    (RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}
   13122:	4770      	bx	lr
   13124:	40001000 	.word	0x40001000

00013128 <radio_rssi_get>:

uint32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   13128:	4b01      	ldr	r3, [pc, #4]	; (13130 <radio_rssi_get+0x8>)
   1312a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   1312e:	4770      	bx	lr
   13130:	40001000 	.word	0x40001000

00013134 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   13134:	4b02      	ldr	r3, [pc, #8]	; (13140 <radio_rssi_status_reset+0xc>)
   13136:	2200      	movs	r2, #0
   13138:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   1313c:	4770      	bx	lr
   1313e:	bf00      	nop
   13140:	40001000 	.word	0x40001000

00013144 <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   13144:	4b03      	ldr	r3, [pc, #12]	; (13154 <radio_rssi_is_ready+0x10>)
   13146:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   1314a:	3800      	subs	r0, #0
   1314c:	bf18      	it	ne
   1314e:	2001      	movne	r0, #1
   13150:	4770      	bx	lr
   13152:	bf00      	nop
   13154:	40001000 	.word	0x40001000

00013158 <radio_filter_configure>:

void radio_filter_configure(uint8_t bitmask_enable, uint8_t bitmask_addr_type,
			    uint8_t *bdaddr)
{
   13158:	b430      	push	{r4, r5}
   1315a:	2400      	movs	r4, #0
	uint8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   1315c:	00a3      	lsls	r3, r4, #2
   1315e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   13162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
   13166:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   13168:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
   1316c:	3401      	adds	r4, #1
   1316e:	8895      	ldrh	r5, [r2, #4]
   13170:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   13174:	2c08      	cmp	r4, #8
		bdaddr += 6;
   13176:	f102 0206 	add.w	r2, r2, #6
	for (index = 0U; index < 8; index++) {
   1317a:	d1ef      	bne.n	1315c <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   1317c:	4b03      	ldr	r3, [pc, #12]	; (1318c <radio_filter_configure+0x34>)
   1317e:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
}
   13182:	bc30      	pop	{r4, r5}
	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   13184:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   13188:	4770      	bx	lr
   1318a:	bf00      	nop
   1318c:	40001000 	.word	0x40001000

00013190 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   13190:	4a03      	ldr	r2, [pc, #12]	; (131a0 <radio_filter_disable+0x10>)
   13192:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   13196:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1319a:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   1319e:	4770      	bx	lr
   131a0:	40001000 	.word	0x40001000

000131a4 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   131a4:	4b02      	ldr	r3, [pc, #8]	; (131b0 <radio_filter_status_reset+0xc>)
   131a6:	2200      	movs	r2, #0
   131a8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   131ac:	4770      	bx	lr
   131ae:	bf00      	nop
   131b0:	40001000 	.word	0x40001000

000131b4 <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   131b4:	4b03      	ldr	r3, [pc, #12]	; (131c4 <radio_filter_has_match+0x10>)
   131b6:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   131ba:	3800      	subs	r0, #0
   131bc:	bf18      	it	ne
   131be:	2001      	movne	r0, #1
   131c0:	4770      	bx	lr
   131c2:	bf00      	nop
   131c4:	40001000 	.word	0x40001000

000131c8 <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   131c8:	4b01      	ldr	r3, [pc, #4]	; (131d0 <radio_filter_match_get+0x8>)
   131ca:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   131ce:	4770      	bx	lr
   131d0:	40001000 	.word	0x40001000

000131d4 <radio_tmr_status_reset>:
    p_reg->EVTENCLR = mask;
   131d4:	4904      	ldr	r1, [pc, #16]	; (131e8 <radio_tmr_status_reset+0x14>)
   131d6:	4b05      	ldr	r3, [pc, #20]	; (131ec <radio_tmr_status_reset+0x18>)
   131d8:	4a05      	ldr	r2, [pc, #20]	; (131f0 <radio_tmr_status_reset+0x1c>)
   131da:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   131de:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   131e2:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			BIT(HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI) |
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   131e6:	4770      	bx	lr
   131e8:	4000b000 	.word	0x4000b000
   131ec:	4001f000 	.word	0x4001f000
   131f0:	0e7000c0 	.word	0x0e7000c0

000131f4 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   131f4:	4b03      	ldr	r3, [pc, #12]	; (13204 <radio_tmr_tifs_set+0x10>)
   131f6:	4a04      	ldr	r2, [pc, #16]	; (13208 <radio_tmr_tifs_set+0x14>)
   131f8:	781b      	ldrb	r3, [r3, #0]
   131fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   131fe:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   13202:	4770      	bx	lr
   13204:	20002256 	.word	0x20002256
   13208:	40009000 	.word	0x40009000

0001320c <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   1320c:	b4f0      	push	{r4, r5, r6, r7}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   1320e:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   13212:	4d31      	ldr	r5, [pc, #196]	; (132d8 <radio_tmr_start+0xcc>)
   13214:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   13218:	42ab      	cmp	r3, r5
{
   1321a:	4604      	mov	r4, r0
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   1321c:	d906      	bls.n	1322c <radio_tmr_start+0x20>
		ticks_start--;
		remainder += 30517578UL;
   1321e:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
   13222:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
   13226:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
		ticks_start--;
   1322a:	3901      	subs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1322c:	4d2b      	ldr	r5, [pc, #172]	; (132dc <radio_tmr_start+0xd0>)
	}
	remainder /= 1000000UL;

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   1322e:	4b2c      	ldr	r3, [pc, #176]	; (132e0 <radio_tmr_start+0xd4>)
	remainder /= 1000000UL;
   13230:	482c      	ldr	r0, [pc, #176]	; (132e4 <radio_tmr_start+0xd8>)
   13232:	2601      	movs	r6, #1
   13234:	602e      	str	r6, [r5, #0]
	EVENT_TIMER->MODE = 0;
   13236:	2600      	movs	r6, #0
   13238:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
    p_reg->CC[ch] = cc_val;
   1323c:	4d2a      	ldr	r5, [pc, #168]	; (132e8 <radio_tmr_start+0xdc>)
	remainder /= 1000000UL;
   1323e:	fba0 0202 	umull	r0, r2, r0, r2
	EVENT_TIMER->PRESCALER = 4;
   13242:	2604      	movs	r6, #4
   13244:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
	remainder /= 1000000UL;
   13248:	0c90      	lsrs	r0, r2, #18
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   1324a:	2602      	movs	r6, #2
   1324c:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
    p_reg->CH[(uint32_t) channel].EEP = eep;
   13250:	4a26      	ldr	r2, [pc, #152]	; (132ec <radio_tmr_start+0xe0>)
    p_reg->CC[cc_channel] = cc_value;
   13252:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   13256:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   1325a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   1325e:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344
   13262:	4923      	ldr	r1, [pc, #140]	; (132f0 <radio_tmr_start+0xe4>)
   13264:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    p_reg->CHENSET = mask;
   13268:	2140      	movs	r1, #64	; 0x40
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1326a:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    p_reg->CHENSET = mask;
   1326e:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
	nrf_ppi_channels_disable(
   13272:	b354      	cbz	r4, 132ca <radio_tmr_start+0xbe>
    p_reg->CHENCLR = mask;
   13274:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   13278:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_ppi_channels_enable(
   1327c:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
    p_reg->CHENSET = mask;
   13280:	4b1a      	ldr	r3, [pc, #104]	; (132ec <radio_tmr_start+0xe0>)
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   13282:	4a1c      	ldr	r2, [pc, #112]	; (132f4 <radio_tmr_start+0xe8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13284:	491c      	ldr	r1, [pc, #112]	; (132f8 <radio_tmr_start+0xec>)
   13286:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
   1328a:	2500      	movs	r5, #0
   1328c:	2401      	movs	r4, #1
	SW_SWITCH_TIMER->PRESCALER = 4;
   1328e:	2604      	movs	r6, #4
   13290:	600c      	str	r4, [r1, #0]
	SW_SWITCH_TIMER->MODE = 0;
   13292:	f8c2 5504 	str.w	r5, [r2, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   13296:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   1329a:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508
   1329e:	6014      	str	r4, [r2, #0]
    p_reg->CH[(uint32_t) channel].TEP = tep;
   132a0:	f502 32b0 	add.w	r2, r2, #90112	; 0x16000
    p_reg->CH[(uint32_t) channel].EEP = eep;
   132a4:	4f15      	ldr	r7, [pc, #84]	; (132fc <radio_tmr_start+0xf0>)
   132a6:	4e16      	ldr	r6, [pc, #88]	; (13300 <radio_tmr_start+0xf4>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   132a8:	4d16      	ldr	r5, [pc, #88]	; (13304 <radio_tmr_start+0xf8>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   132aa:	4c17      	ldr	r4, [pc, #92]	; (13308 <radio_tmr_start+0xfc>)
   132ac:	f8c3 7550 	str.w	r7, [r3, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
   132b0:	320c      	adds	r2, #12
   132b2:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
   132b6:	f8c3 6558 	str.w	r6, [r3, #1368]	; 0x558
    p_reg->CH[(uint32_t) channel].TEP = tep;
   132ba:	f8c3 555c 	str.w	r5, [r3, #1372]	; 0x55c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   132be:	f8c3 4560 	str.w	r4, [r3, #1376]	; 0x560
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   132c2:	bcf0      	pop	{r4, r5, r6, r7}
    p_reg->CH[(uint32_t) channel].TEP = tep;
   132c4:	f8c3 2564 	str.w	r2, [r3, #1380]	; 0x564
   132c8:	4770      	bx	lr
    p_reg->CHENCLR = mask;
   132ca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   132ce:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   132d2:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
   132d6:	e7d3      	b.n	13280 <radio_tmr_start+0x74>
   132d8:	7ff0bdbf 	.word	0x7ff0bdbf
   132dc:	4000800c 	.word	0x4000800c
   132e0:	40008000 	.word	0x40008000
   132e4:	431bde83 	.word	0x431bde83
   132e8:	4000b000 	.word	0x4000b000
   132ec:	4001f000 	.word	0x4001f000
   132f0:	4000b148 	.word	0x4000b148
   132f4:	40009000 	.word	0x40009000
   132f8:	4000900c 	.word	0x4000900c
   132fc:	4000110c 	.word	0x4000110c
   13300:	40009140 	.word	0x40009140
   13304:	4001f004 	.word	0x4001f004
   13308:	40009144 	.word	0x40009144

0001330c <radio_tmr_start_tick>:

uint32_t radio_tmr_start_tick(uint8_t trx, uint32_t tick)
{
   1330c:	b4f0      	push	{r4, r5, r6, r7}
    p_reg->CC[cc_channel] = cc_value;
   1330e:	4c16      	ldr	r4, [pc, #88]	; (13368 <radio_tmr_start_tick+0x5c>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13310:	4f16      	ldr	r7, [pc, #88]	; (1336c <radio_tmr_start_tick+0x60>)
   13312:	4e17      	ldr	r6, [pc, #92]	; (13370 <radio_tmr_start_tick+0x64>)
    p_reg->CC[ch] = cc_val;
   13314:	4d17      	ldr	r5, [pc, #92]	; (13374 <radio_tmr_start_tick+0x68>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   13316:	4b18      	ldr	r3, [pc, #96]	; (13378 <radio_tmr_start_tick+0x6c>)
   13318:	2201      	movs	r2, #1
   1331a:	603a      	str	r2, [r7, #0]
   1331c:	6032      	str	r2, [r6, #0]
    p_reg->CC[cc_channel] = cc_value;
   1331e:	f8c4 2540 	str.w	r2, [r4, #1344]	; 0x540
    p_reg->EVTENSET = mask;
   13322:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    p_reg->CC[ch] = cc_val;
   13326:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   1332a:	f8c5 2344 	str.w	r2, [r5, #836]	; 0x344
   1332e:	4913      	ldr	r1, [pc, #76]	; (1337c <radio_tmr_start_tick+0x70>)
   13330:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    p_reg->CHENSET = mask;
   13334:	2240      	movs	r2, #64	; 0x40
    p_reg->CH[(uint32_t) channel].TEP = tep;
   13336:	f8c3 4544 	str.w	r4, [r3, #1348]	; 0x544
    p_reg->CHENSET = mask;
   1333a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	nrf_ppi_channels_disable(
   1333e:	b158      	cbz	r0, 13358 <radio_tmr_start_tick+0x4c>
    p_reg->CHENCLR = mask;
   13340:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   13344:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	nrf_ppi_channels_enable(
   13348:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    p_reg->CHENSET = mask;
   1334c:	4a0a      	ldr	r2, [pc, #40]	; (13378 <radio_tmr_start_tick+0x6c>)
	hal_sw_switch_timer_clear_ppi_config();
#endif /* CONFIG_SOC_SERIES_NRF53X */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder_us;
}
   1334e:	2001      	movs	r0, #1
   13350:	bcf0      	pop	{r4, r5, r6, r7}
   13352:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
   13356:	4770      	bx	lr
    p_reg->CHENCLR = mask;
   13358:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   1335c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   13360:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   13364:	e7f2      	b.n	1334c <radio_tmr_start_tick+0x40>
   13366:	bf00      	nop
   13368:	40008000 	.word	0x40008000
   1336c:	40008004 	.word	0x40008004
   13370:	4000800c 	.word	0x4000800c
   13374:	4000b000 	.word	0x4000b000
   13378:	4001f000 	.word	0x4001f000
   1337c:	4000b148 	.word	0x4000b148

00013380 <radio_tmr_start_get>:
    return p_reg->CC[ch];
   13380:	4b01      	ldr	r3, [pc, #4]	; (13388 <radio_tmr_start_get+0x8>)
   13382:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   13386:	4770      	bx	lr
   13388:	4000b000 	.word	0x4000b000

0001338c <radio_tmr_stop>:

void radio_tmr_stop(void)
{
   1338c:	b410      	push	{r4}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1338e:	4805      	ldr	r0, [pc, #20]	; (133a4 <radio_tmr_stop+0x18>)
   13390:	4c05      	ldr	r4, [pc, #20]	; (133a8 <radio_tmr_stop+0x1c>)
   13392:	4906      	ldr	r1, [pc, #24]	; (133ac <radio_tmr_stop+0x20>)
   13394:	4a06      	ldr	r2, [pc, #24]	; (133b0 <radio_tmr_stop+0x24>)
   13396:	2301      	movs	r3, #1
   13398:	6023      	str	r3, [r4, #0]
   1339a:	6003      	str	r3, [r0, #0]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1339c:	bc10      	pop	{r4}
   1339e:	600b      	str	r3, [r1, #0]
   133a0:	6013      	str	r3, [r2, #0]
   133a2:	4770      	bx	lr
   133a4:	40008010 	.word	0x40008010
   133a8:	40008004 	.word	0x40008004
   133ac:	40009004 	.word	0x40009004
   133b0:	40009010 	.word	0x40009010

000133b4 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   133b4:	4904      	ldr	r1, [pc, #16]	; (133c8 <radio_tmr_hcto_configure+0x14>)
    p_reg->CHENSET = mask;
   133b6:	4b05      	ldr	r3, [pc, #20]	; (133cc <radio_tmr_hcto_configure+0x18>)
   133b8:	f8c1 0544 	str.w	r0, [r1, #1348]	; 0x544
   133bc:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   133c0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   133c4:	4770      	bx	lr
   133c6:	bf00      	nop
   133c8:	40008000 	.word	0x40008000
   133cc:	4001f000 	.word	0x4001f000

000133d0 <radio_tmr_aa_get>:
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   133d0:	4b01      	ldr	r3, [pc, #4]	; (133d8 <radio_tmr_aa_get+0x8>)
   133d2:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   133d6:	4770      	bx	lr
   133d8:	40008000 	.word	0x40008000

000133dc <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   133dc:	4b01      	ldr	r3, [pc, #4]	; (133e4 <radio_tmr_aa_save+0x8>)
   133de:	6018      	str	r0, [r3, #0]
}
   133e0:	4770      	bx	lr
   133e2:	bf00      	nop
   133e4:	200020a0 	.word	0x200020a0

000133e8 <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
   133e8:	4b01      	ldr	r3, [pc, #4]	; (133f0 <radio_tmr_aa_restore+0x8>)
}
   133ea:	6818      	ldr	r0, [r3, #0]
   133ec:	4770      	bx	lr
   133ee:	bf00      	nop
   133f0:	200020a0 	.word	0x200020a0

000133f4 <radio_tmr_end_capture>:
   133f4:	4b02      	ldr	r3, [pc, #8]	; (13400 <radio_tmr_end_capture+0xc>)
   133f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   133fa:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

void radio_tmr_end_capture(void)
{
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
}
   133fe:	4770      	bx	lr
   13400:	4001f000 	.word	0x4001f000

00013404 <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   13404:	4b01      	ldr	r3, [pc, #4]	; (1340c <radio_tmr_end_get+0x8>)
   13406:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   1340a:	4770      	bx	lr
   1340c:	40008000 	.word	0x40008000

00013410 <radio_tmr_tifs_base_get>:
   13410:	4b01      	ldr	r3, [pc, #4]	; (13418 <radio_tmr_tifs_base_get+0x8>)
   13412:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   13416:	4770      	bx	lr
   13418:	40008000 	.word	0x40008000

0001341c <radio_ccm_rx_pkt_set>:
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN || CONFIG_BT_CTLR_GPIO_LNA_PIN */

static uint8_t MALIGN(4) _ccm_scratch[(HAL_RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, uint8_t phy, void *pkt)
{
   1341c:	b4f0      	push	{r4, r5, r6, r7}
			 CCM_MODE_DATARATE_Pos) &
			CCM_MODE_DATARATE_Msk;
		break;

	case PHY_2M:
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   1341e:	f8df c074 	ldr.w	ip, [pc, #116]	; 13494 <radio_ccm_rx_pkt_set+0x78>
   13422:	4d17      	ldr	r5, [pc, #92]	; (13480 <radio_ccm_rx_pkt_set+0x64>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   13424:	4b17      	ldr	r3, [pc, #92]	; (13484 <radio_ccm_rx_pkt_set+0x68>)
	}

#if !defined(CONFIG_SOC_COMPATIBLE_NRF52832) && \
	(!defined(CONFIG_BT_CTLR_DATA_LENGTH_MAX) || \
	 (CONFIG_BT_CTLR_DATA_LENGTH_MAX < ((HAL_RADIO_PDU_LEN_MAX) - 4)))
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   13426:	4f18      	ldr	r7, [pc, #96]	; (13488 <radio_ccm_rx_pkt_set+0x6c>)
#endif
#endif /* !CONFIG_SOC_SERIES_NRF51X */

	NRF_CCM->MODE = mode;
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   13428:	4e18      	ldr	r6, [pc, #96]	; (1348c <radio_ccm_rx_pkt_set+0x70>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1342a:	2400      	movs	r4, #0
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   1342c:	2902      	cmp	r1, #2
   1342e:	bf08      	it	eq
   13430:	4665      	moveq	r5, ip
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   13432:	2102      	movs	r1, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   13434:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   13438:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   1343c:	f8d7 1518 	ldr.w	r1, [r7, #1304]	; 0x518
   13440:	f507 37f0 	add.w	r7, r7, #122880	; 0x1e000
   13444:	b2c9      	uxtb	r1, r1
	NRF_CCM->MAXPACKETSIZE = max_len;
   13446:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
	NRF_CCM->MODE = mode;
   1344a:	f8c3 5504 	str.w	r5, [r3, #1284]	; 0x504
   1344e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   13452:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->OUTPTR = (uint32_t)pkt;
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   13456:	4d0e      	ldr	r5, [pc, #56]	; (13490 <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   13458:	f8c3 650c 	str.w	r6, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (uint32_t)pkt;
   1345c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                            nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13460:	2201      	movs	r2, #1
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   13462:	f8c3 5514 	str.w	r5, [r3, #1300]	; 0x514
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_CRYPT_PPI));

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   13466:	4630      	mov	r0, r6
	NRF_CCM->SHORTS = 0;
   13468:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   1346c:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   13470:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   13474:	f8c7 1504 	str.w	r1, [r7, #1284]	; 0x504
}
   13478:	bcf0      	pop	{r4, r5, r6, r7}
   1347a:	601a      	str	r2, [r3, #0]
   1347c:	4770      	bx	lr
   1347e:	bf00      	nop
   13480:	01000001 	.word	0x01000001
   13484:	4000f000 	.word	0x4000f000
   13488:	40001000 	.word	0x40001000
   1348c:	20001f94 	.word	0x20001f94
   13490:	20001e84 	.word	0x20001e84
   13494:	01010001 	.word	0x01010001

00013498 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
   13498:	b470      	push	{r4, r5, r6}
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1349a:	4b10      	ldr	r3, [pc, #64]	; (134dc <radio_ccm_tx_pkt_set+0x44>)
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)pkt;
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   1349c:	4d10      	ldr	r5, [pc, #64]	; (134e0 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->MODE = mode;
   1349e:	4e11      	ldr	r6, [pc, #68]	; (134e4 <radio_ccm_tx_pkt_set+0x4c>)
{
   134a0:	4604      	mov	r4, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   134a2:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   134a4:	2002      	movs	r0, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   134a6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   134aa:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
	NRF_CCM->MODE = mode;
   134ae:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   134b2:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   134b6:	4e0c      	ldr	r6, [pc, #48]	; (134e8 <radio_ccm_tx_pkt_set+0x50>)
	NRF_CCM->INPTR = (uint32_t)pkt;
   134b8:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   134bc:	2401      	movs	r4, #1
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   134be:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
	NRF_CCM->EVENTS_ERROR = 0;

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   134c2:	4628      	mov	r0, r5
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   134c4:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   134c8:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   134cc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   134d0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   134d4:	601c      	str	r4, [r3, #0]
}
   134d6:	bc70      	pop	{r4, r5, r6}
   134d8:	4770      	bx	lr
   134da:	bf00      	nop
   134dc:	4000f000 	.word	0x4000f000
   134e0:	20001f94 	.word	0x20001f94
   134e4:	01010000 	.word	0x01010000
   134e8:	20001e84 	.word	0x20001e84

000134ec <radio_ccm_is_done>:
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   134ec:	4a0e      	ldr	r2, [pc, #56]	; (13528 <radio_ccm_is_done+0x3c>)
   134ee:	2302      	movs	r3, #2
   134f0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

uint32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   134f4:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   134f8:	b933      	cbnz	r3, 13508 <radio_ccm_is_done+0x1c>
		__WFE();
   134fa:	bf20      	wfe
		__SEV();
   134fc:	bf40      	sev
		__WFE();
   134fe:	bf20      	wfe
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   13500:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   13504:	2b00      	cmp	r3, #0
   13506:	d0f8      	beq.n	134fa <radio_ccm_is_done+0xe>
}

NRF_STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   13508:	4b07      	ldr	r3, [pc, #28]	; (13528 <radio_ccm_is_done+0x3c>)
   1350a:	4a08      	ldr	r2, [pc, #32]	; (1352c <radio_ccm_is_done+0x40>)
   1350c:	2002      	movs	r0, #2
   1350e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   13512:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   13516:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_CCM));

	return (NRF_CCM->EVENTS_ERROR == 0);
   1351a:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   1351e:	fab0 f080 	clz	r0, r0
   13522:	0940      	lsrs	r0, r0, #5
   13524:	4770      	bx	lr
   13526:	bf00      	nop
   13528:	4000f000 	.word	0x4000f000
   1352c:	e000e100 	.word	0xe000e100

00013530 <radio_ccm_mic_is_valid>:

uint32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   13530:	4b03      	ldr	r3, [pc, #12]	; (13540 <radio_ccm_mic_is_valid+0x10>)
   13532:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   13536:	3800      	subs	r0, #0
   13538:	bf18      	it	ne
   1353a:	2001      	movne	r0, #1
   1353c:	4770      	bx	lr
   1353e:	bf00      	nop
   13540:	4000f000 	.word	0x4000f000

00013544 <radio_ar_configure>:
	if (IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) &&
	    ((flags & BIT(1)) || (!(flags & BIT(0)) && (phy > PHY_1M)))) {
		addrptr = NRF_RADIO->PACKETPTR + 1;
		bcc = 80;
	} else {
		addrptr = NRF_RADIO->PACKETPTR - 1;
   13544:	4a14      	ldr	r2, [pc, #80]	; (13598 <radio_ar_configure+0x54>)
	/* For Coded PHY adjust for CI and TERM1 */
	if (IS_ENABLED(CONFIG_BT_CTLR_PHY_CODED) && (phy == PHY_CODED)) {
		bcc += 5;
	}

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   13546:	4b15      	ldr	r3, [pc, #84]	; (1359c <radio_ar_configure+0x58>)
{
   13548:	b470      	push	{r4, r5, r6}
		addrptr = NRF_RADIO->PACKETPTR - 1;
   1354a:	f8d2 5504 	ldr.w	r5, [r2, #1284]	; 0x504
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (uint32_t)irk;
	NRF_AAR->ADDRPTR = addrptr;
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   1354e:	4e14      	ldr	r6, [pc, #80]	; (135a0 <radio_ar_configure+0x5c>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   13550:	2403      	movs	r4, #3
   13552:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
		addrptr = NRF_RADIO->PACKETPTR - 1;
   13556:	3d01      	subs	r5, #1
	NRF_AAR->NIRK = nirk;
   13558:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504

	NRF_AAR->EVENTS_END = 0;
   1355c:	2400      	movs	r4, #0
    p_reg->BCC = radio_bcc;
   1355e:	2040      	movs	r0, #64	; 0x40
	NRF_AAR->IRKPTR = (uint32_t)irk;
   13560:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	NRF_AAR->ADDRPTR = addrptr;
   13564:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   13568:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRF_AAR->EVENTS_END = 0;
   1356c:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   13570:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   13574:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   13578:	f8c2 0560 	str.w	r0, [r2, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   1357c:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   13580:	4908      	ldr	r1, [pc, #32]	; (135a4 <radio_ar_configure+0x60>)
   13582:	4303      	orrs	r3, r0
   13584:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   13588:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1358c:	f8c2 4128 	str.w	r4, [r2, #296]	; 0x128
	radio_bc_configure(bcc);
	radio_bc_status_reset();

	hal_trigger_aar_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}
   13590:	bc70      	pop	{r4, r5, r6}
   13592:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
   13596:	4770      	bx	lr
   13598:	40001000 	.word	0x40001000
   1359c:	4000f000 	.word	0x4000f000
   135a0:	20001e80 	.word	0x20001e80
   135a4:	4001f000 	.word	0x4001f000

000135a8 <radio_ar_match_get>:

uint32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   135a8:	4b01      	ldr	r3, [pc, #4]	; (135b0 <radio_ar_match_get+0x8>)
   135aa:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   135ae:	4770      	bx	lr
   135b0:	4000f000 	.word	0x4000f000

000135b4 <radio_ar_status_reset>:

void radio_ar_status_reset(void)
{
   135b4:	b410      	push	{r4}
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   135b6:	4807      	ldr	r0, [pc, #28]	; (135d4 <radio_ar_status_reset+0x20>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   135b8:	4c07      	ldr	r4, [pc, #28]	; (135d8 <radio_ar_status_reset+0x24>)
    p_reg->CHENCLR = mask;
   135ba:	4a08      	ldr	r2, [pc, #32]	; (135dc <radio_ar_status_reset+0x28>)
   135bc:	2300      	movs	r3, #0
   135be:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   135c2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   135c6:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;

	hal_radio_nrf_ppi_channels_disable(BIT(HAL_TRIGGER_AAR_PPI));
}
   135ca:	bc10      	pop	{r4}
   135cc:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
   135d0:	4770      	bx	lr
   135d2:	bf00      	nop
   135d4:	4000f000 	.word	0x4000f000
   135d8:	40001000 	.word	0x40001000
   135dc:	4001f000 	.word	0x4001f000

000135e0 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   135e0:	4b08      	ldr	r3, [pc, #32]	; (13604 <radio_ar_has_match+0x24>)
   135e2:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

uint32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   135e6:	b160      	cbz	r0, 13602 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   135e8:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   135ec:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   135f0:	b138      	cbz	r0, 13602 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   135f2:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   135f6:	b120      	cbz	r0, 13602 <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   135f8:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   135fc:	fab0 f080 	clz	r0, r0
   13600:	0940      	lsrs	r0, r0, #5
}
   13602:	4770      	bx	lr
   13604:	40001000 	.word	0x40001000

00013608 <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   13608:	2902      	cmp	r1, #2
{
   1360a:	b510      	push	{r4, lr}
   1360c:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1360e:	d00b      	beq.n	13628 <mayfly_enable_cb+0x20>
   13610:	4a0a      	ldr	r2, [pc, #40]	; (1363c <mayfly_enable_cb+0x34>)
   13612:	490b      	ldr	r1, [pc, #44]	; (13640 <mayfly_enable_cb+0x38>)
   13614:	480b      	ldr	r0, [pc, #44]	; (13644 <mayfly_enable_cb+0x3c>)
   13616:	231e      	movs	r3, #30
   13618:	f002 fb92 	bl	15d40 <printk>
   1361c:	4040      	eors	r0, r0
   1361e:	f380 8811 	msr	BASEPRI, r0
   13622:	f04f 0003 	mov.w	r0, #3
   13626:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   13628:	200b      	movs	r0, #11
	if (enable) {
   1362a:	b11c      	cbz	r4, 13634 <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   1362c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   13630:	f7f1 b91e 	b.w	4870 <arch_irq_enable>
}
   13634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   13638:	f7f1 b92a 	b.w	4890 <arch_irq_disable>
   1363c:	0001a40c 	.word	0x0001a40c
   13640:	0001a45c 	.word	0x0001a45c
   13644:	000199cc 	.word	0x000199cc

00013648 <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   13648:	b129      	cbz	r1, 13656 <mayfly_is_enabled+0xe>
   1364a:	3901      	subs	r1, #1
   1364c:	2901      	cmp	r1, #1
   1364e:	d805      	bhi.n	1365c <mayfly_is_enabled+0x14>
	case MAYFLY_CALL_ID_LLL:
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);

	case MAYFLY_CALL_ID_WORKER:
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   13650:	200b      	movs	r0, #11
   13652:	f7f1 b931 	b.w	48b8 <arch_irq_is_enabled>
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   13656:	2018      	movs	r0, #24
   13658:	f7f1 b92e 	b.w	48b8 <arch_irq_is_enabled>
{
   1365c:	b508      	push	{r3, lr}

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   1365e:	4a07      	ldr	r2, [pc, #28]	; (1367c <mayfly_is_enabled+0x34>)
   13660:	4907      	ldr	r1, [pc, #28]	; (13680 <mayfly_is_enabled+0x38>)
   13662:	4808      	ldr	r0, [pc, #32]	; (13684 <mayfly_is_enabled+0x3c>)
   13664:	2336      	movs	r3, #54	; 0x36
   13666:	f002 fb6b 	bl	15d40 <printk>
   1366a:	4040      	eors	r0, r0
   1366c:	f380 8811 	msr	BASEPRI, r0
   13670:	f04f 0003 	mov.w	r0, #3
   13674:	df02      	svc	2
		break;
	}

	return 0;
}
   13676:	2000      	movs	r0, #0
   13678:	bd08      	pop	{r3, pc}
   1367a:	bf00      	nop
   1367c:	0001a40c 	.word	0x0001a40c
   13680:	00019a2c 	.word	0x00019a2c
   13684:	000199cc 	.word	0x000199cc

00013688 <mayfly_prio_is_equal>:
#endif
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   13688:	4288      	cmp	r0, r1
   1368a:	d00b      	beq.n	136a4 <mayfly_prio_is_equal+0x1c>
	return (caller_id == callee_id) ||
   1368c:	2801      	cmp	r0, #1
   1368e:	d003      	beq.n	13698 <mayfly_prio_is_equal+0x10>
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   13690:	2802      	cmp	r0, #2
   13692:	d009      	beq.n	136a8 <mayfly_prio_is_equal+0x20>
   13694:	2000      	movs	r0, #0
#endif
	       0;
}
   13696:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   13698:	f1a1 0002 	sub.w	r0, r1, #2
   1369c:	fab0 f080 	clz	r0, r0
   136a0:	0940      	lsrs	r0, r0, #5
   136a2:	4770      	bx	lr
   136a4:	2001      	movs	r0, #1
   136a6:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   136a8:	f1a1 0001 	sub.w	r0, r1, #1
   136ac:	fab0 f080 	clz	r0, r0
   136b0:	0940      	lsrs	r0, r0, #5
   136b2:	4770      	bx	lr

000136b4 <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   136b4:	2901      	cmp	r1, #1
{
   136b6:	b508      	push	{r3, lr}
	switch (callee_id) {
   136b8:	d00f      	beq.n	136da <mayfly_pend+0x26>
   136ba:	2902      	cmp	r1, #2
   136bc:	d00d      	beq.n	136da <mayfly_pend+0x26>
   136be:	b191      	cbz	r1, 136e6 <mayfly_pend+0x32>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   136c0:	4a0c      	ldr	r2, [pc, #48]	; (136f4 <mayfly_pend+0x40>)
   136c2:	490d      	ldr	r1, [pc, #52]	; (136f8 <mayfly_pend+0x44>)
   136c4:	480d      	ldr	r0, [pc, #52]	; (136fc <mayfly_pend+0x48>)
   136c6:	2367      	movs	r3, #103	; 0x67
   136c8:	f002 fb3a 	bl	15d40 <printk>
   136cc:	4040      	eors	r0, r0
   136ce:	f380 8811 	msr	BASEPRI, r0
   136d2:	f04f 0003 	mov.w	r0, #3
   136d6:	df02      	svc	2
		break;
	}
}
   136d8:	bd08      	pop	{r3, pc}
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   136da:	4b09      	ldr	r3, [pc, #36]	; (13700 <mayfly_pend+0x4c>)
   136dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
   136e0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   136e4:	bd08      	pop	{r3, pc}
   136e6:	4b06      	ldr	r3, [pc, #24]	; (13700 <mayfly_pend+0x4c>)
   136e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   136ec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   136f0:	bd08      	pop	{r3, pc}
   136f2:	bf00      	nop
   136f4:	0001a40c 	.word	0x0001a40c
   136f8:	00019a2c 	.word	0x00019a2c
   136fc:	000199cc 	.word	0x000199cc
   13700:	e000e100 	.word	0xe000e100

00013704 <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   13704:	2803      	cmp	r0, #3
{
   13706:	b510      	push	{r4, lr}
   13708:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1370a:	d804      	bhi.n	13716 <hal_ticker_instance0_caller_id_get+0x12>

	caller_id = caller_id_lut[user_id];
   1370c:	4b11      	ldr	r3, [pc, #68]	; (13754 <hal_ticker_instance0_caller_id_get+0x50>)
   1370e:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   13710:	b18c      	cbz	r4, 13736 <hal_ticker_instance0_caller_id_get+0x32>

	return caller_id;
}
   13712:	4620      	mov	r0, r4
   13714:	bd10      	pop	{r4, pc}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   13716:	4a10      	ldr	r2, [pc, #64]	; (13758 <hal_ticker_instance0_caller_id_get+0x54>)
   13718:	4910      	ldr	r1, [pc, #64]	; (1375c <hal_ticker_instance0_caller_id_get+0x58>)
   1371a:	4811      	ldr	r0, [pc, #68]	; (13760 <hal_ticker_instance0_caller_id_get+0x5c>)
   1371c:	232b      	movs	r3, #43	; 0x2b
   1371e:	f002 fb0f 	bl	15d40 <printk>
   13722:	4040      	eors	r0, r0
   13724:	f380 8811 	msr	BASEPRI, r0
   13728:	f04f 0003 	mov.w	r0, #3
   1372c:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   1372e:	4b09      	ldr	r3, [pc, #36]	; (13754 <hal_ticker_instance0_caller_id_get+0x50>)
   13730:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   13732:	2c00      	cmp	r4, #0
   13734:	d1ed      	bne.n	13712 <hal_ticker_instance0_caller_id_get+0xe>
   13736:	4a08      	ldr	r2, [pc, #32]	; (13758 <hal_ticker_instance0_caller_id_get+0x54>)
   13738:	490a      	ldr	r1, [pc, #40]	; (13764 <hal_ticker_instance0_caller_id_get+0x60>)
   1373a:	4809      	ldr	r0, [pc, #36]	; (13760 <hal_ticker_instance0_caller_id_get+0x5c>)
   1373c:	232e      	movs	r3, #46	; 0x2e
   1373e:	f002 faff 	bl	15d40 <printk>
   13742:	4040      	eors	r0, r0
   13744:	f380 8811 	msr	BASEPRI, r0
   13748:	f04f 0003 	mov.w	r0, #3
   1374c:	df02      	svc	2
}
   1374e:	4620      	mov	r0, r4
   13750:	bd10      	pop	{r4, pc}
   13752:	bf00      	nop
   13754:	0001a4ec 	.word	0x0001a4ec
   13758:	0001a46c 	.word	0x0001a46c
   1375c:	0001a4bc 	.word	0x0001a4bc
   13760:	000199cc 	.word	0x000199cc
   13764:	0001a4dc 	.word	0x0001a4dc

00013768 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   13768:	3801      	subs	r0, #1
{
   1376a:	b510      	push	{r4, lr}
   1376c:	461c      	mov	r4, r3
   1376e:	2804      	cmp	r0, #4
   13770:	d855      	bhi.n	1381e <hal_ticker_instance0_sched+0xb6>
   13772:	e8df f000 	tbb	[pc, r0]
   13776:	1a12      	.short	0x1a12
   13778:	1e16      	.short	0x1e16
   1377a:	03          	.byte	0x03
   1377b:	00          	.byte	0x00
			break;
		}
		break;

	case TICKER_CALL_ID_PROGRAM:
		switch (callee_id) {
   1377c:	2904      	cmp	r1, #4
   1377e:	d01e      	beq.n	137be <hal_ticker_instance0_sched+0x56>
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
   13780:	23ba      	movs	r3, #186	; 0xba
			break;
		}
		break;

	default:
		LL_ASSERT(0);
   13782:	4a28      	ldr	r2, [pc, #160]	; (13824 <hal_ticker_instance0_sched+0xbc>)
   13784:	4928      	ldr	r1, [pc, #160]	; (13828 <hal_ticker_instance0_sched+0xc0>)
   13786:	4829      	ldr	r0, [pc, #164]	; (1382c <hal_ticker_instance0_sched+0xc4>)
   13788:	f002 fada 	bl	15d40 <printk>
   1378c:	4040      	eors	r0, r0
   1378e:	f380 8811 	msr	BASEPRI, r0
   13792:	f04f 0003 	mov.w	r0, #3
   13796:	df02      	svc	2
		break;
	}
}
   13798:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1379a:	2904      	cmp	r1, #4
   1379c:	d01f      	beq.n	137de <hal_ticker_instance0_sched+0x76>
			LL_ASSERT(0);
   1379e:	234e      	movs	r3, #78	; 0x4e
   137a0:	e7ef      	b.n	13782 <hal_ticker_instance0_sched+0x1a>
		switch (callee_id) {
   137a2:	2904      	cmp	r1, #4
   137a4:	d013      	beq.n	137ce <hal_ticker_instance0_sched+0x66>
			LL_ASSERT(0);
   137a6:	237c      	movs	r3, #124	; 0x7c
   137a8:	e7eb      	b.n	13782 <hal_ticker_instance0_sched+0x1a>
		switch (callee_id) {
   137aa:	2903      	cmp	r1, #3
   137ac:	d01f      	beq.n	137ee <hal_ticker_instance0_sched+0x86>
			LL_ASSERT(0);
   137ae:	2365      	movs	r3, #101	; 0x65
   137b0:	e7e7      	b.n	13782 <hal_ticker_instance0_sched+0x1a>
		switch (callee_id) {
   137b2:	2903      	cmp	r1, #3
   137b4:	d02b      	beq.n	1380e <hal_ticker_instance0_sched+0xa6>
   137b6:	2904      	cmp	r1, #4
   137b8:	d021      	beq.n	137fe <hal_ticker_instance0_sched+0x96>
			LL_ASSERT(0);
   137ba:	23a2      	movs	r3, #162	; 0xa2
   137bc:	e7e1      	b.n	13782 <hal_ticker_instance0_sched+0x1a>
			m.param = instance;
   137be:	4b1c      	ldr	r3, [pc, #112]	; (13830 <hal_ticker_instance0_sched+0xc8>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   137c0:	2102      	movs	r1, #2
			m.param = instance;
   137c2:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   137c4:	2003      	movs	r0, #3
}
   137c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   137ca:	f7f4 bf89 	b.w	86e0 <mayfly_enqueue>
			m.param = instance;
   137ce:	4b19      	ldr	r3, [pc, #100]	; (13834 <hal_ticker_instance0_sched+0xcc>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   137d0:	2102      	movs	r1, #2
			m.param = instance;
   137d2:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   137d4:	2001      	movs	r0, #1
}
   137d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   137da:	f7f4 bf81 	b.w	86e0 <mayfly_enqueue>
			m.param = instance;
   137de:	4b16      	ldr	r3, [pc, #88]	; (13838 <hal_ticker_instance0_sched+0xd0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   137e0:	2102      	movs	r1, #2
			m.param = instance;
   137e2:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   137e4:	2000      	movs	r0, #0
}
   137e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   137ea:	f7f4 bf79 	b.w	86e0 <mayfly_enqueue>
			m.param = instance;
   137ee:	4b13      	ldr	r3, [pc, #76]	; (1383c <hal_ticker_instance0_sched+0xd4>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   137f0:	2101      	movs	r1, #1
			m.param = instance;
   137f2:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   137f4:	4608      	mov	r0, r1
}
   137f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   137fa:	f7f4 bf71 	b.w	86e0 <mayfly_enqueue>
			m.param = instance;
   137fe:	4b10      	ldr	r3, [pc, #64]	; (13840 <hal_ticker_instance0_sched+0xd8>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   13800:	2102      	movs	r1, #2
			m.param = instance;
   13802:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   13804:	4608      	mov	r0, r1
}
   13806:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1380a:	f7f4 bf69 	b.w	86e0 <mayfly_enqueue>
			m.param = instance;
   1380e:	4b0d      	ldr	r3, [pc, #52]	; (13844 <hal_ticker_instance0_sched+0xdc>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   13810:	2101      	movs	r1, #1
			m.param = instance;
   13812:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   13814:	2002      	movs	r0, #2
}
   13816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1381a:	f7f4 bf61 	b.w	86e0 <mayfly_enqueue>
		LL_ASSERT(0);
   1381e:	23c0      	movs	r3, #192	; 0xc0
   13820:	e7af      	b.n	13782 <hal_ticker_instance0_sched+0x1a>
   13822:	bf00      	nop
   13824:	0001a46c 	.word	0x0001a46c
   13828:	00019a2c 	.word	0x00019a2c
   1382c:	000199cc 	.word	0x000199cc
   13830:	200004f4 	.word	0x200004f4
   13834:	200004c4 	.word	0x200004c4
   13838:	200004a4 	.word	0x200004a4
   1383c:	200004b4 	.word	0x200004b4
   13840:	200004e4 	.word	0x200004e4
   13844:	200004d4 	.word	0x200004d4

00013848 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
   13848:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   1384a:	2000      	movs	r0, #0
   1384c:	f7ff ba16 	b.w	12c7c <cntr_cmp_set>

00013850 <hci_vendor_read_static_addr>:
				 uint8_t size)
{
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   13850:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   13854:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   13858:	3201      	adds	r2, #1
   1385a:	d008      	beq.n	1386e <hci_vendor_read_static_addr+0x1e>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   1385c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   13860:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   13864:	f013 0301 	ands.w	r3, r3, #1
   13868:	d10f      	bne.n	1388a <hci_vendor_read_static_addr+0x3a>
		}

		return 1;
	}

	return 0;
   1386a:	2000      	movs	r0, #0
   1386c:	4770      	bx	lr
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1386e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   13872:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13876:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   13878:	4293      	cmp	r3, r2
   1387a:	d0f6      	beq.n	1386a <hci_vendor_read_static_addr+0x1a>
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   1387c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   13880:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   13884:	f013 0301 	ands.w	r3, r3, #1
   13888:	d0ef      	beq.n	1386a <hci_vendor_read_static_addr+0x1a>
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   1388a:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	sys_put_le16(val >> 16, &dst[2]);
   1388e:	0c19      	lsrs	r1, r3, #16
{
   13890:	b510      	push	{r4, lr}
	dst[0] = val;
   13892:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   13894:	0a0c      	lsrs	r4, r1, #8
   13896:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1389a:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   1389c:	70c4      	strb	r4, [r0, #3]
   1389e:	7043      	strb	r3, [r0, #1]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   138a0:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	dst[0] = val;
   138a4:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   138a6:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   138aa:	f063 033f 	orn	r3, r3, #63	; 0x3f
   138ae:	7143      	strb	r3, [r0, #5]
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   138b0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   138b4:	3301      	adds	r3, #1
   138b6:	d035      	beq.n	13924 <hci_vendor_read_static_addr+0xd4>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   138b8:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   138bc:	3301      	adds	r3, #1
   138be:	d031      	beq.n	13924 <hci_vendor_read_static_addr+0xd4>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   138c0:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   138c4:	3301      	adds	r3, #1
   138c6:	d02d      	beq.n	13924 <hci_vendor_read_static_addr+0xd4>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   138c8:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   138cc:	3301      	adds	r3, #1
   138ce:	d029      	beq.n	13924 <hci_vendor_read_static_addr+0xd4>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   138d0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
   138d4:	7183      	strb	r3, [r0, #6]
	sys_put_le16(val >> 16, &dst[2]);
   138d6:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   138d8:	0a0c      	lsrs	r4, r1, #8
   138da:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   138de:	7201      	strb	r1, [r0, #8]
	dst[1] = val >> 8;
   138e0:	7244      	strb	r4, [r0, #9]
   138e2:	71c3      	strb	r3, [r0, #7]
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   138e4:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
	dst[0] = val;
   138e8:	7283      	strb	r3, [r0, #10]
	sys_put_le16(val >> 16, &dst[2]);
   138ea:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   138ec:	0a0c      	lsrs	r4, r1, #8
   138ee:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   138f2:	7301      	strb	r1, [r0, #12]
	dst[1] = val >> 8;
   138f4:	7344      	strb	r4, [r0, #13]
   138f6:	72c3      	strb	r3, [r0, #11]
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   138f8:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
	dst[0] = val;
   138fc:	7383      	strb	r3, [r0, #14]
	sys_put_le16(val >> 16, &dst[2]);
   138fe:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   13900:	0a0c      	lsrs	r4, r1, #8
   13902:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   13906:	7401      	strb	r1, [r0, #16]
	dst[1] = val >> 8;
   13908:	7444      	strb	r4, [r0, #17]
   1390a:	73c3      	strb	r3, [r0, #15]
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   1390c:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	dst[0] = val;
   13910:	7483      	strb	r3, [r0, #18]
	sys_put_le16(val >> 16, &dst[2]);
   13912:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   13914:	0a11      	lsrs	r1, r2, #8
   13916:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1391a:	7502      	strb	r2, [r0, #20]
	dst[1] = val >> 8;
   1391c:	7541      	strb	r1, [r0, #21]
   1391e:	74c3      	strb	r3, [r0, #19]
		return 1;
   13920:	2001      	movs	r0, #1
}
   13922:	bd10      	pop	{r4, pc}
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
   13924:	2210      	movs	r2, #16
   13926:	2100      	movs	r1, #0
   13928:	3006      	adds	r0, #6
   1392a:	f003 f8ec 	bl	16b06 <memset>
		return 1;
   1392e:	2001      	movs	r0, #1
}
   13930:	bd10      	pop	{r4, pc}
   13932:	bf00      	nop

00013934 <hci_vendor_read_key_hierarchy_roots>:

void hci_vendor_read_key_hierarchy_roots(uint8_t ir[16], uint8_t er[16])
{
   13934:	b510      	push	{r4, lr}
	/* Mark IR as invalid.
	 * No public address is available, and static address IR should be read
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);
   13936:	2210      	movs	r2, #16
{
   13938:	460c      	mov	r4, r1
	(void)memset(ir, 0x00, 16);
   1393a:	2100      	movs	r1, #0
   1393c:	f003 f8e3 	bl	16b06 <memset>

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   13940:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   13944:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   13948:	3201      	adds	r2, #1
   1394a:	d034      	beq.n	139b6 <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   1394c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   13950:	3201      	adds	r2, #1
   13952:	d030      	beq.n	139b6 <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   13954:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   13958:	3201      	adds	r2, #1
   1395a:	d02c      	beq.n	139b6 <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   1395c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   13960:	3201      	adds	r2, #1
   13962:	d028      	beq.n	139b6 <hci_vendor_read_key_hierarchy_roots+0x82>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   13964:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	dst[0] = val;
   13968:	7022      	strb	r2, [r4, #0]
	sys_put_le16(val >> 16, &dst[2]);
   1396a:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   1396c:	0a08      	lsrs	r0, r1, #8
   1396e:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   13972:	70a1      	strb	r1, [r4, #2]
	dst[1] = val >> 8;
   13974:	70e0      	strb	r0, [r4, #3]
   13976:	7062      	strb	r2, [r4, #1]
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   13978:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	dst[0] = val;
   1397c:	7122      	strb	r2, [r4, #4]
	sys_put_le16(val >> 16, &dst[2]);
   1397e:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   13980:	0a08      	lsrs	r0, r1, #8
   13982:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   13986:	71a1      	strb	r1, [r4, #6]
	dst[1] = val >> 8;
   13988:	71e0      	strb	r0, [r4, #7]
   1398a:	7162      	strb	r2, [r4, #5]
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   1398c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	dst[0] = val;
   13990:	7222      	strb	r2, [r4, #8]
	sys_put_le16(val >> 16, &dst[2]);
   13992:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   13994:	0a08      	lsrs	r0, r1, #8
   13996:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   1399a:	72a1      	strb	r1, [r4, #10]
	dst[1] = val >> 8;
   1399c:	7262      	strb	r2, [r4, #9]
   1399e:	72e0      	strb	r0, [r4, #11]
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   139a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	dst[0] = val;
   139a4:	7323      	strb	r3, [r4, #12]
	sys_put_le16(val >> 16, &dst[2]);
   139a6:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   139a8:	0a11      	lsrs	r1, r2, #8
   139aa:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   139ae:	73a2      	strb	r2, [r4, #14]
	dst[1] = val >> 8;
   139b0:	73e1      	strb	r1, [r4, #15]
   139b2:	7363      	strb	r3, [r4, #13]
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   139b4:	bd10      	pop	{r4, pc}
		(void)memset(er, 0x00, 16);
   139b6:	4620      	mov	r0, r4
   139b8:	2210      	movs	r2, #16
}
   139ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void)memset(er, 0x00, 16);
   139be:	2100      	movs	r1, #0
   139c0:	f003 b8a1 	b.w	16b06 <memset>

000139c4 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   139c4:	4b02      	ldr	r3, [pc, #8]	; (139d0 <net_buf_pool_get+0xc>)
   139c6:	2228      	movs	r2, #40	; 0x28
   139c8:	fb02 3000 	mla	r0, r2, r0, r3
   139cc:	4770      	bx	lr
   139ce:	bf00      	nop
   139d0:	200006a0 	.word	0x200006a0

000139d4 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   139d4:	7983      	ldrb	r3, [r0, #6]

	return buf - pool->__bufs;
   139d6:	4a05      	ldr	r2, [pc, #20]	; (139ec <net_buf_id+0x18>)
   139d8:	2128      	movs	r1, #40	; 0x28
   139da:	fb01 2303 	mla	r3, r1, r3, r2
   139de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   139e0:	1ac0      	subs	r0, r0, r3
}
   139e2:	4b03      	ldr	r3, [pc, #12]	; (139f0 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   139e4:	10c0      	asrs	r0, r0, #3
}
   139e6:	4358      	muls	r0, r3
   139e8:	4770      	bx	lr
   139ea:	bf00      	nop
   139ec:	200006a0 	.word	0x200006a0
   139f0:	aaaaaaab 	.word	0xaaaaaaab

000139f4 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   139f4:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   139f6:	4a0a      	ldr	r2, [pc, #40]	; (13a20 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   139f8:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   139fa:	2428      	movs	r4, #40	; 0x28
   139fc:	fb04 2303 	mla	r3, r4, r3, r2

	*size = MIN(fixed->data_size, *size);
   13a00:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   13a02:	6a1b      	ldr	r3, [r3, #32]
   13a04:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   13a06:	6823      	ldr	r3, [r4, #0]
   13a08:	429a      	cmp	r2, r3
   13a0a:	bf94      	ite	ls
   13a0c:	600a      	strls	r2, [r1, #0]
   13a0e:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   13a10:	f7ff ffe0 	bl	139d4 <net_buf_id>
   13a14:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   13a18:	fb02 3000 	mla	r0, r2, r0, r3
   13a1c:	bd10      	pop	{r4, pc}
   13a1e:	bf00      	nop
   13a20:	200006a0 	.word	0x200006a0

00013a24 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   13a24:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   13a28:	4605      	mov	r5, r0
   13a2a:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   13a2c:	4610      	mov	r0, r2
   13a2e:	4619      	mov	r1, r3
{
   13a30:	4616      	mov	r6, r2
   13a32:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   13a34:	f005 fb53 	bl	190de <sys_clock_timeout_end_calc>
   13a38:	4680      	mov	r8, r0
   13a3a:	4689      	mov	r9, r1
	__asm__ volatile(
   13a3c:	f04f 0320 	mov.w	r3, #32
   13a40:	f3ef 8a11 	mrs	sl, BASEPRI
   13a44:	f383 8811 	msr	BASEPRI, r3
   13a48:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   13a4c:	8b6b      	ldrh	r3, [r5, #26]
   13a4e:	2b00      	cmp	r3, #0
   13a50:	d054      	beq.n	13afc <net_buf_alloc_len+0xd8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   13a52:	8b2a      	ldrh	r2, [r5, #24]
   13a54:	429a      	cmp	r2, r3
   13a56:	d93d      	bls.n	13ad4 <net_buf_alloc_len+0xb0>
	return z_impl_k_queue_get(queue, timeout);
   13a58:	2200      	movs	r2, #0
   13a5a:	2300      	movs	r3, #0
   13a5c:	4628      	mov	r0, r5
   13a5e:	f001 f8ef 	bl	14c40 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   13a62:	4604      	mov	r4, r0
   13a64:	2800      	cmp	r0, #0
   13a66:	d035      	beq.n	13ad4 <net_buf_alloc_len+0xb0>
	__asm__ volatile(
   13a68:	f38a 8811 	msr	BASEPRI, sl
   13a6c:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   13a70:	9b01      	ldr	r3, [sp, #4]
   13a72:	2b00      	cmp	r3, #0
   13a74:	d052      	beq.n	13b1c <net_buf_alloc_len+0xf8>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   13a76:	ea56 0307 	orrs.w	r3, r6, r7
   13a7a:	d010      	beq.n	13a9e <net_buf_alloc_len+0x7a>
   13a7c:	1c7b      	adds	r3, r7, #1
   13a7e:	bf08      	it	eq
   13a80:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   13a84:	d00b      	beq.n	13a9e <net_buf_alloc_len+0x7a>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   13a86:	f002 f85b 	bl	15b40 <sys_clock_tick_get>
   13a8a:	ebb8 0600 	subs.w	r6, r8, r0
   13a8e:	eb69 0701 	sbc.w	r7, r9, r1
   13a92:	2e00      	cmp	r6, #0
   13a94:	f177 0300 	sbcs.w	r3, r7, #0
   13a98:	bfbc      	itt	lt
   13a9a:	2600      	movlt	r6, #0
   13a9c:	2700      	movlt	r7, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   13a9e:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   13aa0:	f8df 8090 	ldr.w	r8, [pc, #144]	; 13b34 <net_buf_alloc_len+0x110>
   13aa4:	2228      	movs	r2, #40	; 0x28
   13aa6:	fb02 8303 	mla	r3, r2, r3, r8
   13aaa:	a901      	add	r1, sp, #4
   13aac:	6a1b      	ldr	r3, [r3, #32]
   13aae:	681b      	ldr	r3, [r3, #0]
   13ab0:	4632      	mov	r2, r6
   13ab2:	681d      	ldr	r5, [r3, #0]
   13ab4:	4620      	mov	r0, r4
   13ab6:	463b      	mov	r3, r7
   13ab8:	47a8      	blx	r5
   13aba:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   13abc:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   13abe:	bb70      	cbnz	r0, 13b1e <net_buf_alloc_len+0xfa>
	k_lifo_put(&pool->free, buf);
   13ac0:	79a0      	ldrb	r0, [r4, #6]
   13ac2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   13ac6:	4621      	mov	r1, r4
   13ac8:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
   13acc:	f005 f8a8 	bl	18c20 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   13ad0:	462c      	mov	r4, r5
}
   13ad2:	e01f      	b.n	13b14 <net_buf_alloc_len+0xf0>
		uninit_count = pool->uninit_count--;
   13ad4:	8b68      	ldrh	r0, [r5, #26]
   13ad6:	1e43      	subs	r3, r0, #1
   13ad8:	836b      	strh	r3, [r5, #26]
   13ada:	f38a 8811 	msr	BASEPRI, sl
   13ade:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   13ae2:	8b2c      	ldrh	r4, [r5, #24]
   13ae4:	1a24      	subs	r4, r4, r0
   13ae6:	6a68      	ldr	r0, [r5, #36]	; 0x24
   13ae8:	2318      	movs	r3, #24
   13aea:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   13aee:	4811      	ldr	r0, [pc, #68]	; (13b34 <net_buf_alloc_len+0x110>)
   13af0:	4b11      	ldr	r3, [pc, #68]	; (13b38 <net_buf_alloc_len+0x114>)
   13af2:	1a2d      	subs	r5, r5, r0
   13af4:	10ed      	asrs	r5, r5, #3
   13af6:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   13af8:	71a5      	strb	r5, [r4, #6]
		goto success;
   13afa:	e7b9      	b.n	13a70 <net_buf_alloc_len+0x4c>
   13afc:	f38a 8811 	msr	BASEPRI, sl
   13b00:	f3bf 8f6f 	isb	sy
   13b04:	4632      	mov	r2, r6
   13b06:	463b      	mov	r3, r7
   13b08:	4628      	mov	r0, r5
   13b0a:	f001 f899 	bl	14c40 <z_impl_k_queue_get>
	if (!buf) {
   13b0e:	4604      	mov	r4, r0
   13b10:	2800      	cmp	r0, #0
   13b12:	d1ad      	bne.n	13a70 <net_buf_alloc_len+0x4c>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   13b14:	4620      	mov	r0, r4
   13b16:	b002      	add	sp, #8
   13b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf->__buf = NULL;
   13b1c:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   13b1e:	2300      	movs	r3, #0
	buf->ref   = 1U;
   13b20:	2201      	movs	r2, #1
	buf->frags = NULL;
   13b22:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   13b24:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   13b26:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   13b28:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   13b2a:	6923      	ldr	r3, [r4, #16]
   13b2c:	81e2      	strh	r2, [r4, #14]
   13b2e:	60a3      	str	r3, [r4, #8]
	return buf;
   13b30:	e7f0      	b.n	13b14 <net_buf_alloc_len+0xf0>
   13b32:	bf00      	nop
   13b34:	200006a0 	.word	0x200006a0
   13b38:	cccccccd 	.word	0xcccccccd

00013b3c <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   13b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13b40:	4d17      	ldr	r5, [pc, #92]	; (13ba0 <net_buf_unref+0x64>)
   13b42:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   13b44:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   13b46:	2728      	movs	r7, #40	; 0x28
	while (buf) {
   13b48:	b90c      	cbnz	r4, 13b4e <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   13b4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   13b4e:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   13b50:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   13b54:	3b01      	subs	r3, #1
   13b56:	b2db      	uxtb	r3, r3
   13b58:	7123      	strb	r3, [r4, #4]
   13b5a:	2b00      	cmp	r3, #0
   13b5c:	d1f5      	bne.n	13b4a <net_buf_unref+0xe>
		if (buf->__buf) {
   13b5e:	6921      	ldr	r1, [r4, #16]
   13b60:	b159      	cbz	r1, 13b7a <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   13b62:	7963      	ldrb	r3, [r4, #5]
   13b64:	079b      	lsls	r3, r3, #30
   13b66:	d407      	bmi.n	13b78 <net_buf_unref+0x3c>
	pool->alloc->cb->unref(buf, data);
   13b68:	79a3      	ldrb	r3, [r4, #6]
   13b6a:	fb07 5303 	mla	r3, r7, r3, r5
   13b6e:	4620      	mov	r0, r4
   13b70:	6a1b      	ldr	r3, [r3, #32]
   13b72:	681b      	ldr	r3, [r3, #0]
   13b74:	689b      	ldr	r3, [r3, #8]
   13b76:	4798      	blx	r3
			buf->__buf = NULL;
   13b78:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   13b7a:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   13b7c:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   13b7e:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   13b82:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   13b84:	69db      	ldr	r3, [r3, #28]
   13b86:	b11b      	cbz	r3, 13b90 <net_buf_unref+0x54>
			pool->destroy(buf);
   13b88:	4620      	mov	r0, r4
   13b8a:	4798      	blx	r3
{
   13b8c:	4644      	mov	r4, r8
   13b8e:	e7db      	b.n	13b48 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   13b90:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   13b94:	4621      	mov	r1, r4
   13b96:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
   13b9a:	f005 f841 	bl	18c20 <k_queue_prepend>
}
   13b9e:	e7f5      	b.n	13b8c <net_buf_unref+0x50>
   13ba0:	200006a0 	.word	0x200006a0

00013ba4 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   13ba4:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   13ba6:	4b09      	ldr	r3, [pc, #36]	; (13bcc <gpio_nrfx_init+0x28>)
   13ba8:	781a      	ldrb	r2, [r3, #0]
   13baa:	b96a      	cbnz	r2, 13bc8 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   13bac:	2101      	movs	r1, #1
   13bae:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   13bb0:	2006      	movs	r0, #6
   13bb2:	2105      	movs	r1, #5
   13bb4:	f7f0 fe8e 	bl	48d4 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   13bb8:	2006      	movs	r0, #6
   13bba:	f7f0 fe59 	bl	4870 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   13bbe:	4b04      	ldr	r3, [pc, #16]	; (13bd0 <gpio_nrfx_init+0x2c>)
   13bc0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   13bc4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   13bc8:	2000      	movs	r0, #0
   13bca:	bd08      	pop	{r3, pc}
   13bcc:	20002257 	.word	0x20002257
   13bd0:	40006000 	.word	0x40006000

00013bd4 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   13bd4:	4b2b      	ldr	r3, [pc, #172]	; (13c84 <gpio_nrfx_config+0xb0>)
{
   13bd6:	b5f0      	push	{r4, r5, r6, r7, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   13bd8:	6844      	ldr	r4, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   13bda:	482b      	ldr	r0, [pc, #172]	; (13c88 <gpio_nrfx_config+0xb4>)
   13bdc:	4013      	ands	r3, r2
   13bde:	4283      	cmp	r3, r0
   13be0:	d041      	beq.n	13c66 <gpio_nrfx_config+0x92>
   13be2:	d80d      	bhi.n	13c00 <gpio_nrfx_config+0x2c>
   13be4:	2b06      	cmp	r3, #6
   13be6:	d015      	beq.n	13c14 <gpio_nrfx_config+0x40>
   13be8:	d805      	bhi.n	13bf6 <gpio_nrfx_config+0x22>
   13bea:	b19b      	cbz	r3, 13c14 <gpio_nrfx_config+0x40>
   13bec:	2b02      	cmp	r3, #2
   13bee:	d03c      	beq.n	13c6a <gpio_nrfx_config+0x96>
   13bf0:	f06f 0015 	mvn.w	r0, #21
   13bf4:	e036      	b.n	13c64 <gpio_nrfx_config+0x90>
   13bf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   13bfa:	d1f9      	bne.n	13bf0 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   13bfc:	2301      	movs	r3, #1
   13bfe:	e009      	b.n	13c14 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   13c00:	4822      	ldr	r0, [pc, #136]	; (13c8c <gpio_nrfx_config+0xb8>)
   13c02:	4283      	cmp	r3, r0
   13c04:	d033      	beq.n	13c6e <gpio_nrfx_config+0x9a>
   13c06:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   13c0a:	d032      	beq.n	13c72 <gpio_nrfx_config+0x9e>
   13c0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   13c10:	d1ee      	bne.n	13bf0 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   13c12:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   13c14:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
   13c16:	bf54      	ite	pl
   13c18:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   13c1c:	2603      	movmi	r6, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   13c1e:	f482 7580 	eor.w	r5, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   13c22:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   13c24:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   13c28:	f3c5 2500 	ubfx	r5, r5, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   13c2c:	d507      	bpl.n	13c3e <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   13c2e:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   13c32:	6867      	ldr	r7, [r4, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   13c34:	d01f      	beq.n	13c76 <gpio_nrfx_config+0xa2>
			nrf_gpio_port_out_set(reg, BIT(pin));
   13c36:	2201      	movs	r2, #1
   13c38:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   13c3a:	f8c7 2508 	str.w	r2, [r7, #1288]	; 0x508
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   13c3e:	7a22      	ldrb	r2, [r4, #8]
        case 1: return NRF_P1;
   13c40:	4c13      	ldr	r4, [pc, #76]	; (13c90 <gpio_nrfx_config+0xbc>)
   13c42:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   13c44:	f001 011f 	and.w	r1, r1, #31
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   13c48:	ea40 0245 	orr.w	r2, r0, r5, lsl #1
        case 1: return NRF_P1;
   13c4c:	bf18      	it	ne
   13c4e:	f04f 44a0 	movne.w	r4, #1342177280	; 0x50000000
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   13c52:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   13c56:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   13c5a:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   13c5e:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
	return 0;
   13c62:	2000      	movs	r0, #0
}
   13c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   13c66:	2307      	movs	r3, #7
   13c68:	e7d4      	b.n	13c14 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   13c6a:	2304      	movs	r3, #4
   13c6c:	e7d2      	b.n	13c14 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   13c6e:	2305      	movs	r3, #5
   13c70:	e7d0      	b.n	13c14 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   13c72:	2303      	movs	r3, #3
   13c74:	e7ce      	b.n	13c14 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   13c76:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   13c78:	bf42      	ittt	mi
   13c7a:	2201      	movmi	r2, #1
   13c7c:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
   13c7e:	f8c7 250c 	strmi.w	r2, [r7, #1292]	; 0x50c
}
   13c82:	e7dc      	b.n	13c3e <gpio_nrfx_config+0x6a>
   13c84:	00f00006 	.word	0x00f00006
   13c88:	00100006 	.word	0x00100006
   13c8c:	00400002 	.word	0x00400002
   13c90:	50000300 	.word	0x50000300

00013c94 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
   13c94:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
   13c98:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
   13c9a:	4b08      	ldr	r3, [pc, #32]	; (13cbc <nrf_gpio_cfg_sense_set+0x28>)
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   13c9c:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
   13c9e:	bf18      	it	ne
   13ca0:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   13ca4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   13ca8:	f8d3 2700 	ldr.w	r2, [r3, #1792]	; 0x700
   13cac:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   13cb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   13cb4:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
}
   13cb8:	4770      	bx	lr
   13cba:	bf00      	nop
   13cbc:	50000300 	.word	0x50000300

00013cc0 <check_level_trigger_pins>:
{
   13cc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct gpio_nrfx_data *data = get_port_data(port);
   13cc4:	6903      	ldr	r3, [r0, #16]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   13cc6:	f8d0 a004 	ldr.w	sl, [r0, #4]
	uint32_t out = data->pin_int_en;
   13cca:	68de      	ldr	r6, [r3, #12]
        case 1: return NRF_P1;
   13ccc:	f8df b07c 	ldr.w	fp, [pc, #124]	; 13d4c <check_level_trigger_pins+0x8c>
{
   13cd0:	4688      	mov	r8, r1
	out &= ~data->trig_edge & ~data->double_edge;
   13cd2:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   13cd6:	430a      	orrs	r2, r1
   13cd8:	ea26 0602 	bic.w	r6, r6, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   13cdc:	f8da 2004 	ldr.w	r2, [sl, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   13ce0:	691b      	ldr	r3, [r3, #16]
    return p_reg->IN;
   13ce2:	f8d2 5510 	ldr.w	r5, [r2, #1296]	; 0x510
   13ce6:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
   13ce8:	ea26 0505 	bic.w	r5, r6, r5
	uint32_t check_pins = level_pins;
   13cec:	4637      	mov	r7, r6
	uint32_t bit = 1U << pin;
   13cee:	2401      	movs	r4, #1
	uint32_t pin = 0U;
   13cf0:	f04f 0900 	mov.w	r9, #0
	while (check_pins) {
   13cf4:	b917      	cbnz	r7, 13cfc <check_level_trigger_pins+0x3c>
}
   13cf6:	4628      	mov	r0, r5
   13cf8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (check_pins & bit) {
   13cfc:	423c      	tst	r4, r7
   13cfe:	d021      	beq.n	13d44 <check_level_trigger_pins+0x84>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   13d00:	f89a 3008 	ldrb.w	r3, [sl, #8]
   13d04:	f009 001f 	and.w	r0, r9, #31
			if (!(level_pins & bit)) {
   13d08:	4234      	tst	r4, r6
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   13d0a:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
			if (!(level_pins & bit)) {
   13d0e:	d114      	bne.n	13d3a <check_level_trigger_pins+0x7a>
    return pin_number >> 5;
   13d10:	0942      	lsrs	r2, r0, #5
        case 1: return NRF_P1;
   13d12:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   13d14:	f000 031f 	and.w	r3, r0, #31
        case 1: return NRF_P1;
   13d18:	bf14      	ite	ne
   13d1a:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
   13d1e:	465a      	moveq	r2, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   13d20:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   13d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   13d28:	f3c3 4301 	ubfx	r3, r3, #16, #2
				if (high) {
   13d2c:	2b02      	cmp	r3, #2
					*sense_levels |= bit;
   13d2e:	bf02      	ittt	eq
   13d30:	f8d8 3000 	ldreq.w	r3, [r8]
   13d34:	4323      	orreq	r3, r4
   13d36:	f8c8 3000 	streq.w	r3, [r8]
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   13d3a:	2100      	movs	r1, #0
   13d3c:	f7ff ffaa 	bl	13c94 <nrf_gpio_cfg_sense_set>
			check_pins &= ~bit;
   13d40:	ea27 0704 	bic.w	r7, r7, r4
		++pin;
   13d44:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
   13d48:	0064      	lsls	r4, r4, #1
   13d4a:	e7d3      	b.n	13cf4 <check_level_trigger_pins+0x34>
   13d4c:	50000300 	.word	0x50000300

00013d50 <gpio_nrfx_pin_interrupt_configure>:
{
   13d50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13d52:	460e      	mov	r6, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   13d54:	6841      	ldr	r1, [r0, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
   13d56:	6907      	ldr	r7, [r0, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   13d58:	7a09      	ldrb	r1, [r1, #8]
   13d5a:	f006 051f 	and.w	r5, r6, #31
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
   13d5e:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   13d62:	ea45 1541 	orr.w	r5, r5, r1, lsl #5
   13d66:	d110      	bne.n	13d8a <gpio_nrfx_pin_interrupt_configure+0x3a>
    return pin_number >> 5;
   13d68:	0968      	lsrs	r0, r5, #5
        case 1: return NRF_P1;
   13d6a:	2801      	cmp	r0, #1
    *p_pin = pin_number & 0x1F;
   13d6c:	f005 011f 	and.w	r1, r5, #31
        case 1: return NRF_P1;
   13d70:	485d      	ldr	r0, [pc, #372]	; (13ee8 <gpio_nrfx_pin_interrupt_configure+0x198>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   13d72:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
        case 1: return NRF_P1;
   13d76:	bf18      	it	ne
   13d78:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   13d7c:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   13d80:	07c8      	lsls	r0, r1, #31
   13d82:	d507      	bpl.n	13d94 <gpio_nrfx_pin_interrupt_configure+0x44>
		return -ENOTSUP;
   13d84:	f06f 0022 	mvn.w	r0, #34	; 0x22
   13d88:	e093      	b.n	13eb2 <gpio_nrfx_pin_interrupt_configure+0x162>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   13d8a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   13d8e:	68f9      	ldr	r1, [r7, #12]
   13d90:	f000 8091 	beq.w	13eb6 <gpio_nrfx_pin_interrupt_configure+0x166>
   13d94:	68f8      	ldr	r0, [r7, #12]
   13d96:	2101      	movs	r1, #1
   13d98:	40b1      	lsls	r1, r6
   13d9a:	4301      	orrs	r1, r0
   13d9c:	6978      	ldr	r0, [r7, #20]
   13d9e:	60f9      	str	r1, [r7, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   13da0:	2101      	movs	r1, #1
   13da2:	40b1      	lsls	r1, r6
   13da4:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   13da8:	69ba      	ldr	r2, [r7, #24]
   13daa:	bf0c      	ite	eq
   13dac:	4308      	orreq	r0, r1
   13dae:	4388      	bicne	r0, r1
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   13db0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   13db4:	bf0c      	ite	eq
   13db6:	430a      	orreq	r2, r1
   13db8:	438a      	bicne	r2, r1
   13dba:	61ba      	str	r2, [r7, #24]
   13dbc:	693a      	ldr	r2, [r7, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   13dbe:	6178      	str	r0, [r7, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   13dc0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   13dc4:	bf0c      	ite	eq
   13dc6:	4311      	orreq	r1, r2
   13dc8:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   13dcc:	4a47      	ldr	r2, [pc, #284]	; (13eec <gpio_nrfx_pin_interrupt_configure+0x19c>)
   13dce:	6139      	str	r1, [r7, #16]
   13dd0:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   13dd4:	2000      	movs	r0, #0
   13dd6:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   13dd8:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   13ddc:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   13de0:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   13de4:	428d      	cmp	r5, r1
   13de6:	d16b      	bne.n	13ec0 <gpio_nrfx_pin_interrupt_configure+0x170>
		    && (intenset & BIT(i))) {
   13de8:	fa23 f100 	lsr.w	r1, r3, r0
   13dec:	07c9      	lsls	r1, r1, #31
   13dee:	d567      	bpl.n	13ec0 <gpio_nrfx_pin_interrupt_configure+0x170>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   13df0:	0083      	lsls	r3, r0, #2
   13df2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   13df6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   13dfa:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   13dfe:	f021 0101 	bic.w	r1, r1, #1
   13e02:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   13e06:	2301      	movs	r3, #1
   13e08:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   13e0a:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   13e0e:	b2c0      	uxtb	r0, r0
   13e10:	f000 fd22 	bl	14858 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   13e14:	4628      	mov	r0, r5
   13e16:	2100      	movs	r1, #0
   13e18:	f7ff ff3c 	bl	13c94 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   13e1c:	68f8      	ldr	r0, [r7, #12]
   13e1e:	40f0      	lsrs	r0, r6
   13e20:	f010 0001 	ands.w	r0, r0, #1
   13e24:	d045      	beq.n	13eb2 <gpio_nrfx_pin_interrupt_configure+0x162>
		if (data->trig_edge & BIT(pin)) {
   13e26:	6978      	ldr	r0, [r7, #20]
   13e28:	40f0      	lsrs	r0, r6
   13e2a:	f010 0401 	ands.w	r4, r0, #1
   13e2e:	d04e      	beq.n	13ece <gpio_nrfx_pin_interrupt_configure+0x17e>
				if (data->double_edge & BIT(pin)) {
   13e30:	69bb      	ldr	r3, [r7, #24]
   13e32:	40f3      	lsrs	r3, r6
   13e34:	07db      	lsls	r3, r3, #31
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   13e36:	bf5f      	itttt	pl
   13e38:	6939      	ldrpl	r1, [r7, #16]
   13e3a:	fa21 f606 	lsrpl.w	r6, r1, r6
   13e3e:	f006 0601 	andpl.w	r6, r6, #1
   13e42:	f1c6 0602 	rsbpl	r6, r6, #2
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   13e46:	f10d 0007 	add.w	r0, sp, #7
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   13e4a:	bf54      	ite	pl
   13e4c:	b2f6      	uxtbpl	r6, r6
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
   13e4e:	2603      	movmi	r6, #3
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   13e50:	f000 fd24 	bl	1489c <nrfx_gpiote_channel_alloc>
   13e54:	4b26      	ldr	r3, [pc, #152]	; (13ef0 <gpio_nrfx_pin_interrupt_configure+0x1a0>)
   13e56:	4298      	cmp	r0, r3
   13e58:	d136      	bne.n	13ec8 <gpio_nrfx_pin_interrupt_configure+0x178>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   13e5a:	f89d 1007 	ldrb.w	r1, [sp, #7]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   13e5e:	008b      	lsls	r3, r1, #2
   13e60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   13e64:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   13e68:	022d      	lsls	r5, r5, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   13e6a:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   13e6e:	f422 324f 	bic.w	r2, r2, #211968	; 0x33c00
   13e72:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   13e76:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   13e7a:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   13e7e:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
   13e82:	4315      	orrs	r5, r2
    return ((uint32_t)p_reg + event);
   13e84:	008a      	lsls	r2, r1, #2
   13e86:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   13e8a:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   13e8e:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   13e92:	2000      	movs	r0, #0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   13e94:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   13e98:	6010      	str	r0, [r2, #0]
   13e9a:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   13e9c:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   13ea0:	f042 0201 	orr.w	r2, r2, #1
   13ea4:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->INTENSET = mask;
   13ea8:	4a10      	ldr	r2, [pc, #64]	; (13eec <gpio_nrfx_pin_interrupt_configure+0x19c>)
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   13eaa:	2301      	movs	r3, #1
   13eac:	408b      	lsls	r3, r1
   13eae:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   13eb2:	b003      	add	sp, #12
   13eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   13eb6:	2001      	movs	r0, #1
   13eb8:	40b0      	lsls	r0, r6
   13eba:	ea21 0100 	bic.w	r1, r1, r0
   13ebe:	e76d      	b.n	13d9c <gpio_nrfx_pin_interrupt_configure+0x4c>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   13ec0:	3001      	adds	r0, #1
   13ec2:	2808      	cmp	r0, #8
   13ec4:	d188      	bne.n	13dd8 <gpio_nrfx_pin_interrupt_configure+0x88>
   13ec6:	e7a5      	b.n	13e14 <gpio_nrfx_pin_interrupt_configure+0xc4>
		return -ENODEV;
   13ec8:	f06f 0012 	mvn.w	r0, #18
   13ecc:	e7f1      	b.n	13eb2 <gpio_nrfx_pin_interrupt_configure+0x162>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   13ece:	6939      	ldr	r1, [r7, #16]
   13ed0:	40f1      	lsrs	r1, r6
   13ed2:	f001 0101 	and.w	r1, r1, #1
   13ed6:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   13eda:	4628      	mov	r0, r5
   13edc:	b2c9      	uxtb	r1, r1
   13ede:	f7ff fed9 	bl	13c94 <nrf_gpio_cfg_sense_set>
	int res = 0;
   13ee2:	4620      	mov	r0, r4
   13ee4:	e7e5      	b.n	13eb2 <gpio_nrfx_pin_interrupt_configure+0x162>
   13ee6:	bf00      	nop
   13ee8:	50000300 	.word	0x50000300
   13eec:	40006000 	.word	0x40006000
   13ef0:	0bad0000 	.word	0x0bad0000

00013ef4 <gpiote_event_handler>:
{
   13ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   13ef6:	2400      	movs	r4, #0
{
   13ef8:	b085      	sub	sp, #20
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   13efa:	e9cd 4400 	strd	r4, r4, [sp]
	uint32_t sense_levels[GPIO_COUNT] = {0};
   13efe:	e9cd 4402 	strd	r4, r4, [sp, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13f02:	4e26      	ldr	r6, [pc, #152]	; (13f9c <gpiote_event_handler+0xa8>)
   13f04:	6835      	ldr	r5, [r6, #0]
	if (port_event) {
   13f06:	b15d      	cbz	r5, 13f20 <gpiote_event_handler+0x2c>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)),
   13f08:	a902      	add	r1, sp, #8
   13f0a:	4825      	ldr	r0, [pc, #148]	; (13fa0 <gpiote_event_handler+0xac>)
   13f0c:	f7ff fed8 	bl	13cc0 <check_level_trigger_pins>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
   13f10:	a903      	add	r1, sp, #12
		fired_triggers[0] =
   13f12:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
   13f14:	4823      	ldr	r0, [pc, #140]	; (13fa4 <gpiote_event_handler+0xb0>)
   13f16:	f7ff fed3 	bl	13cc0 <check_level_trigger_pins>
		fired_triggers[1] =
   13f1a:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   13f1c:	6034      	str	r4, [r6, #0]
   13f1e:	6833      	ldr	r3, [r6, #0]
    return p_reg->INTENSET & mask;
   13f20:	4c21      	ldr	r4, [pc, #132]	; (13fa8 <gpiote_event_handler+0xb4>)
{
   13f22:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   13f24:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   13f26:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
   13f28:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
   13f2c:	fa06 f102 	lsl.w	r1, r6, r2
   13f30:	4219      	tst	r1, r3
   13f32:	d01b      	beq.n	13f6c <gpiote_event_handler+0x78>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13f34:	0091      	lsls	r1, r2, #2
   13f36:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   13f3a:	f501 41c2 	add.w	r1, r1, #24832	; 0x6100
   13f3e:	680b      	ldr	r3, [r1, #0]
   13f40:	b1a3      	cbz	r3, 13f6c <gpiote_event_handler+0x78>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   13f42:	f502 73a2 	add.w	r3, r2, #324	; 0x144
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   13f46:	af04      	add	r7, sp, #16
   13f48:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   13f4c:	f8c1 c000 	str.w	ip, [r1]
   13f50:	f3c3 3040 	ubfx	r0, r3, #13, #1
   13f54:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   13f58:	f3c3 2304 	ubfx	r3, r3, #8, #5
   13f5c:	f850 7c10 	ldr.w	r7, [r0, #-16]
   13f60:	fa06 f303 	lsl.w	r3, r6, r3
   13f64:	433b      	orrs	r3, r7
   13f66:	f840 3c10 	str.w	r3, [r0, #-16]
   13f6a:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   13f6c:	3201      	adds	r2, #1
   13f6e:	2a08      	cmp	r2, #8
   13f70:	d1da      	bne.n	13f28 <gpiote_event_handler+0x34>
	if (fired_triggers[0]) {
   13f72:	9a00      	ldr	r2, [sp, #0]
   13f74:	b11a      	cbz	r2, 13f7e <gpiote_event_handler+0x8a>
	gpio_fire_callbacks(list, port, pins);
   13f76:	490a      	ldr	r1, [pc, #40]	; (13fa0 <gpiote_event_handler+0xac>)
   13f78:	480c      	ldr	r0, [pc, #48]	; (13fac <gpiote_event_handler+0xb8>)
   13f7a:	f004 fc81 	bl	18880 <gpio_fire_callbacks>
	if (fired_triggers[1]) {
   13f7e:	9a01      	ldr	r2, [sp, #4]
   13f80:	b11a      	cbz	r2, 13f8a <gpiote_event_handler+0x96>
	gpio_fire_callbacks(list, port, pins);
   13f82:	4908      	ldr	r1, [pc, #32]	; (13fa4 <gpiote_event_handler+0xb0>)
   13f84:	480a      	ldr	r0, [pc, #40]	; (13fb0 <gpiote_event_handler+0xbc>)
   13f86:	f004 fc7b 	bl	18880 <gpio_fire_callbacks>
	if (port_event) {
   13f8a:	b12d      	cbz	r5, 13f98 <gpiote_event_handler+0xa4>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
   13f8c:	4804      	ldr	r0, [pc, #16]	; (13fa0 <gpiote_event_handler+0xac>)
   13f8e:	f004 fce1 	bl	18954 <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   13f92:	4804      	ldr	r0, [pc, #16]	; (13fa4 <gpiote_event_handler+0xb0>)
   13f94:	f004 fcde 	bl	18954 <cfg_level_pins>
}
   13f98:	b005      	add	sp, #20
   13f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13f9c:	4000617c 	.word	0x4000617c
   13fa0:	200005d4 	.word	0x200005d4
   13fa4:	200005ec 	.word	0x200005ec
   13fa8:	40006000 	.word	0x40006000
   13fac:	200020e0 	.word	0x200020e0
   13fb0:	200020fc 	.word	0x200020fc

00013fb4 <uart_nrfx_poll_in>:
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type const * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13fb4:	4b06      	ldr	r3, [pc, #24]	; (13fd0 <uart_nrfx_poll_in+0x1c>)
   13fb6:	681a      	ldr	r2, [r3, #0]
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrfx_poll_in(const struct device *dev, unsigned char *c)
{
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
   13fb8:	b13a      	cbz	r2, 13fca <uart_nrfx_poll_in+0x16>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13fba:	2000      	movs	r0, #0
   13fbc:	6018      	str	r0, [r3, #0]
   13fbe:	681b      	ldr	r3, [r3, #0]
    nrf_uart_hwfc_pins_set(p_reg, NRF_UART_PSEL_DISCONNECTED, NRF_UART_PSEL_DISCONNECTED);
}

NRF_STATIC_INLINE uint8_t nrf_uart_rxd_get(NRF_UART_Type const * p_reg)
{
    return p_reg->RXD;
   13fc0:	4b04      	ldr	r3, [pc, #16]	; (13fd4 <uart_nrfx_poll_in+0x20>)
   13fc2:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   13fc6:	700b      	strb	r3, [r1, #0]
	nrf_uart_event_clear(uart0_addr, NRF_UART_EVENT_RXDRDY);

	/* got a character */
	*c = nrf_uart_rxd_get(uart0_addr);

	return 0;
   13fc8:	4770      	bx	lr
		return -1;
   13fca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   13fce:	4770      	bx	lr
   13fd0:	40002108 	.word	0x40002108
   13fd4:	40002000 	.word	0x40002000

00013fd8 <uart_nrfx_err_check>:
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   13fd8:	4b02      	ldr	r3, [pc, #8]	; (13fe4 <uart_nrfx_err_check+0xc>)
   13fda:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   13fde:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
/** Console I/O function */
static int uart_nrfx_err_check(const struct device *dev)
{
	/* register bitfields maps to the defines in uart.h */
	return nrf_uart_errorsrc_get_and_clear(uart0_addr);
}
   13fe2:	4770      	bx	lr
   13fe4:	40002000 	.word	0x40002000

00013fe8 <uart_nrfx_configure>:

static int uart_nrfx_configure(const struct device *dev,
			       const struct uart_config *cfg)
{
   13fe8:	b530      	push	{r4, r5, lr}
	nrf_uart_config_t uart_cfg;

#if defined(UART_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   13fea:	794b      	ldrb	r3, [r1, #5]
   13fec:	2b01      	cmp	r3, #1
   13fee:	d022      	beq.n	14036 <uart_nrfx_configure+0x4e>
   13ff0:	2b03      	cmp	r3, #3
   13ff2:	d11d      	bne.n	14030 <uart_nrfx_configure+0x48>
	case UART_CFG_STOP_BITS_1:
		uart_cfg.stop = NRF_UART_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uart_cfg.stop = NRF_UART_STOP_TWO;
   13ff4:	2210      	movs	r2, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   13ff6:	798b      	ldrb	r3, [r1, #6]
   13ff8:	2b03      	cmp	r3, #3
   13ffa:	d119      	bne.n	14030 <uart_nrfx_configure+0x48>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   13ffc:	79cb      	ldrb	r3, [r1, #7]
   13ffe:	b9bb      	cbnz	r3, 14030 <uart_nrfx_configure+0x48>
	}

#if defined(UART_CONFIG_PARITYTYPE_Msk)
	uart_cfg.paritytype = NRF_UART_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   14000:	790c      	ldrb	r4, [r1, #4]
   14002:	b114      	cbz	r4, 1400a <uart_nrfx_configure+0x22>
   14004:	2c02      	cmp	r4, #2
   14006:	d113      	bne.n	14030 <uart_nrfx_configure+0x48>
	case UART_CFG_PARITY_NONE:
		uart_cfg.parity = NRF_UART_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uart_cfg.parity = NRF_UART_PARITY_INCLUDED;
   14008:	240e      	movs	r4, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1400a:	680b      	ldr	r3, [r1, #0]
	switch (baudrate) {
   1400c:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   14010:	d061      	beq.n	140d6 <uart_nrfx_configure+0xee>
   14012:	d82d      	bhi.n	14070 <uart_nrfx_configure+0x88>
   14014:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   14018:	d05f      	beq.n	140da <uart_nrfx_configure+0xf2>
   1401a:	d816      	bhi.n	1404a <uart_nrfx_configure+0x62>
   1401c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   14020:	d05d      	beq.n	140de <uart_nrfx_configure+0xf6>
   14022:	d80a      	bhi.n	1403a <uart_nrfx_configure+0x52>
   14024:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   14028:	d05c      	beq.n	140e4 <uart_nrfx_configure+0xfc>
   1402a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1402e:	d05c      	beq.n	140ea <uart_nrfx_configure+0x102>
   14030:	f06f 0022 	mvn.w	r0, #34	; 0x22
   14034:	e04e      	b.n	140d4 <uart_nrfx_configure+0xec>
	switch (cfg->stop_bits) {
   14036:	2200      	movs	r2, #0
   14038:	e7dd      	b.n	13ff6 <uart_nrfx_configure+0xe>
	switch (baudrate) {
   1403a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1403e:	d057      	beq.n	140f0 <uart_nrfx_configure+0x108>
   14040:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   14044:	d1f4      	bne.n	14030 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
   14046:	4b34      	ldr	r3, [pc, #208]	; (14118 <uart_nrfx_configure+0x130>)
   14048:	e039      	b.n	140be <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   1404a:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1404e:	d052      	beq.n	140f6 <uart_nrfx_configure+0x10e>
   14050:	d807      	bhi.n	14062 <uart_nrfx_configure+0x7a>
   14052:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   14056:	d050      	beq.n	140fa <uart_nrfx_configure+0x112>
   14058:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1405c:	d1e8      	bne.n	14030 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
   1405e:	4b2f      	ldr	r3, [pc, #188]	; (1411c <uart_nrfx_configure+0x134>)
   14060:	e02d      	b.n	140be <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   14062:	f647 2512 	movw	r5, #31250	; 0x7a12
   14066:	42ab      	cmp	r3, r5
   14068:	d1e2      	bne.n	14030 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
   1406a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1406e:	e026      	b.n	140be <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   14070:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   14074:	d044      	beq.n	14100 <uart_nrfx_configure+0x118>
   14076:	d811      	bhi.n	1409c <uart_nrfx_configure+0xb4>
   14078:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1407c:	d042      	beq.n	14104 <uart_nrfx_configure+0x11c>
   1407e:	d808      	bhi.n	14092 <uart_nrfx_configure+0xaa>
   14080:	f64d 25c0 	movw	r5, #56000	; 0xdac0
   14084:	42ab      	cmp	r3, r5
   14086:	d03f      	beq.n	14108 <uart_nrfx_configure+0x120>
   14088:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1408c:	d1d0      	bne.n	14030 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
   1408e:	4b24      	ldr	r3, [pc, #144]	; (14120 <uart_nrfx_configure+0x138>)
   14090:	e015      	b.n	140be <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   14092:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   14096:	d1cb      	bne.n	14030 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
   14098:	4b22      	ldr	r3, [pc, #136]	; (14124 <uart_nrfx_configure+0x13c>)
   1409a:	e010      	b.n	140be <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   1409c:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   140a0:	d035      	beq.n	1410e <uart_nrfx_configure+0x126>
   140a2:	d807      	bhi.n	140b4 <uart_nrfx_configure+0xcc>
   140a4:	4d20      	ldr	r5, [pc, #128]	; (14128 <uart_nrfx_configure+0x140>)
   140a6:	42ab      	cmp	r3, r5
   140a8:	d033      	beq.n	14112 <uart_nrfx_configure+0x12a>
   140aa:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   140ae:	d1bf      	bne.n	14030 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
   140b0:	4b1e      	ldr	r3, [pc, #120]	; (1412c <uart_nrfx_configure+0x144>)
   140b2:	e004      	b.n	140be <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   140b4:	4d1e      	ldr	r5, [pc, #120]	; (14130 <uart_nrfx_configure+0x148>)
   140b6:	42ab      	cmp	r3, r5
   140b8:	d1ba      	bne.n	14030 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
   140ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   140be:	4d1d      	ldr	r5, [pc, #116]	; (14134 <uart_nrfx_configure+0x14c>)
                    | (uint32_t)p_cfg->hwfc;
   140c0:	4322      	orrs	r2, r4
    p_reg->BAUDRATE = baudrate;
   140c2:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   140c6:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uart_configure(uart0_addr, &uart_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   140ca:	6903      	ldr	r3, [r0, #16]
   140cc:	c903      	ldmia	r1, {r0, r1}
   140ce:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   140d2:	2000      	movs	r0, #0
}
   140d4:	bd30      	pop	{r4, r5, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
   140d6:	4b18      	ldr	r3, [pc, #96]	; (14138 <uart_nrfx_configure+0x150>)
   140d8:	e7f1      	b.n	140be <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
   140da:	4b18      	ldr	r3, [pc, #96]	; (1413c <uart_nrfx_configure+0x154>)
   140dc:	e7ef      	b.n	140be <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
   140de:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   140e2:	e7ec      	b.n	140be <uart_nrfx_configure+0xd6>
		nrf_baudrate = 0x00014000;
   140e4:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   140e8:	e7e9      	b.n	140be <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   140ea:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   140ee:	e7e6      	b.n	140be <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
   140f0:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   140f4:	e7e3      	b.n	140be <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
   140f6:	4b12      	ldr	r3, [pc, #72]	; (14140 <uart_nrfx_configure+0x158>)
   140f8:	e7e1      	b.n	140be <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
   140fa:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
   140fe:	e7de      	b.n	140be <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
   14100:	4b10      	ldr	r3, [pc, #64]	; (14144 <uart_nrfx_configure+0x15c>)
   14102:	e7dc      	b.n	140be <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
   14104:	4b10      	ldr	r3, [pc, #64]	; (14148 <uart_nrfx_configure+0x160>)
   14106:	e7da      	b.n	140be <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
   14108:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1410c:	e7d7      	b.n	140be <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
   1410e:	4b0f      	ldr	r3, [pc, #60]	; (1414c <uart_nrfx_configure+0x164>)
   14110:	e7d5      	b.n	140be <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
   14112:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   14116:	e7d2      	b.n	140be <uart_nrfx_configure+0xd6>
   14118:	0013b000 	.word	0x0013b000
   1411c:	004ea000 	.word	0x004ea000
   14120:	00ebf000 	.word	0x00ebf000
   14124:	01d7e000 	.word	0x01d7e000
   14128:	0003d090 	.word	0x0003d090
   1412c:	075f7000 	.word	0x075f7000
   14130:	000f4240 	.word	0x000f4240
   14134:	40002000 	.word	0x40002000
   14138:	009d5000 	.word	0x009d5000
   1413c:	00275000 	.word	0x00275000
   14140:	0075f000 	.word	0x0075f000
   14144:	03afb000 	.word	0x03afb000
   14148:	013a9000 	.word	0x013a9000
   1414c:	0ebed000 	.word	0x0ebed000

00014150 <uart_nrfx_poll_out>:
{
   14150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14152:	460e      	mov	r6, r1
	if (!k_is_in_isr()) {
   14154:	f004 fead 	bl	18eb2 <k_is_in_isr>
   14158:	4d19      	ldr	r5, [pc, #100]	; (141c0 <uart_nrfx_poll_out+0x70>)
   1415a:	bb70      	cbnz	r0, 141ba <uart_nrfx_poll_out+0x6a>
   1415c:	2464      	movs	r4, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1415e:	2701      	movs	r7, #1
   14160:	f3bf 8f5b 	dmb	ish
   14164:	e855 3f00 	ldrex	r3, [r5]
   14168:	2b00      	cmp	r3, #0
   1416a:	d103      	bne.n	14174 <uart_nrfx_poll_out+0x24>
   1416c:	e845 7200 	strex	r2, r7, [r5]
   14170:	2a00      	cmp	r2, #0
   14172:	d1f7      	bne.n	14164 <uart_nrfx_poll_out+0x14>
   14174:	f3bf 8f5b 	dmb	ish
		while (atomic_cas((atomic_t *) lock,
   14178:	d007      	beq.n	1418a <uart_nrfx_poll_out+0x3a>
	return z_impl_k_sleep(timeout);
   1417a:	2021      	movs	r0, #33	; 0x21
   1417c:	2100      	movs	r1, #0
   1417e:	3c01      	subs	r4, #1
   14180:	f001 f82c 	bl	151dc <z_impl_k_sleep>
			if (--safety_cnt == 0) {
   14184:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   14188:	d1ea      	bne.n	14160 <uart_nrfx_poll_out+0x10>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1418a:	4c0e      	ldr	r4, [pc, #56]	; (141c4 <uart_nrfx_poll_out+0x74>)
   1418c:	2200      	movs	r2, #0
   1418e:	6022      	str	r2, [r4, #0]
   14190:	6822      	ldr	r2, [r4, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14192:	4a0d      	ldr	r2, [pc, #52]	; (141c8 <uart_nrfx_poll_out+0x78>)
   14194:	2101      	movs	r1, #1
   14196:	6011      	str	r1, [r2, #0]
    p_reg->TXD = txd;
   14198:	f8c2 6514 	str.w	r6, [r2, #1300]	; 0x514
   1419c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   141a0:	6823      	ldr	r3, [r4, #0]
	NRFX_WAIT_FOR(event_txdrdy_check(), 1000, 1, res);
   141a2:	b923      	cbnz	r3, 141ae <uart_nrfx_poll_out+0x5e>
   141a4:	2001      	movs	r0, #1
   141a6:	f004 fc04 	bl	189b2 <nrfx_busy_wait>
   141aa:	3e01      	subs	r6, #1
   141ac:	d1f8      	bne.n	141a0 <uart_nrfx_poll_out+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   141ae:	4b07      	ldr	r3, [pc, #28]	; (141cc <uart_nrfx_poll_out+0x7c>)
   141b0:	2201      	movs	r2, #1
   141b2:	601a      	str	r2, [r3, #0]
	*lock = 0;
   141b4:	2300      	movs	r3, #0
   141b6:	602b      	str	r3, [r5, #0]
}
   141b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*lock = 1;
   141ba:	2301      	movs	r3, #1
   141bc:	602b      	str	r3, [r5, #0]
   141be:	e7e4      	b.n	1418a <uart_nrfx_poll_out+0x3a>
   141c0:	20002118 	.word	0x20002118
   141c4:	4000211c 	.word	0x4000211c
   141c8:	40002008 	.word	0x40002008
   141cc:	4000200c 	.word	0x4000200c

000141d0 <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(const struct device *dev)
{
   141d0:	b510      	push	{r4, lr}
    p_reg->OUTSET = set_mask;
   141d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    p_reg->ENABLE = UART_ENABLE_ENABLE_Disabled;
   141d6:	4c13      	ldr	r4, [pc, #76]	; (14224 <uart_nrfx_init+0x54>)
   141d8:	2200      	movs	r2, #0
   141da:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   141de:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
   141e2:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   141e6:	2103      	movs	r1, #3
   141e8:	f8c3 1764 	str.w	r1, [r3, #1892]	; 0x764
   141ec:	f8c3 2760 	str.w	r2, [r3, #1888]	; 0x760
    p_reg->PSEL.RXD = pselrxd;
   141f0:	2318      	movs	r3, #24
   141f2:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
    p_reg->PSEL.TXD = pseltxd;
   141f6:	2319      	movs	r3, #25
   141f8:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
    p_reg->PSEL.RTS = pselrts;
   141fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14200:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
	}

	nrf_uart_hwfc_pins_set(uart0_addr, RTS_PIN, CTS_PIN);

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   14204:	6901      	ldr	r1, [r0, #16]
    p_reg->PSEL.CTS = pselcts;
   14206:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   1420a:	f7ff feed 	bl	13fe8 <uart_nrfx_configure>
	if (err) {
   1420e:	b938      	cbnz	r0, 14220 <uart_nrfx_init+0x50>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
   14210:	2304      	movs	r3, #4
   14212:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14216:	4b04      	ldr	r3, [pc, #16]	; (14228 <uart_nrfx_init+0x58>)
   14218:	6018      	str	r0, [r3, #0]
   1421a:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1421c:	2301      	movs	r3, #1
   1421e:	6023      	str	r3, [r4, #0]
#if HW_FLOW_CONTROL_AVAILABLE
	k_timer_init(&uart0_cb.tx_timeout_timer, tx_timeout, NULL);
#endif
#endif
	return 0;
}
   14220:	bd10      	pop	{r4, pc}
   14222:	bf00      	nop
   14224:	40002000 	.word	0x40002000
   14228:	40002108 	.word	0x40002108

0001422c <random_byte_get>:
	__asm__ volatile(
   1422c:	f04f 0320 	mov.w	r3, #32
   14230:	f3ef 8211 	mrs	r2, BASEPRI
   14234:	f383 8811 	msr	BASEPRI, r3
   14238:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1423c:	4b08      	ldr	r3, [pc, #32]	; (14260 <random_byte_get+0x34>)
   1423e:	6819      	ldr	r1, [r3, #0]
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   14240:	b159      	cbz	r1, 1425a <random_byte_get+0x2e>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   14242:	4908      	ldr	r1, [pc, #32]	; (14264 <random_byte_get+0x38>)
   14244:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   14248:	2100      	movs	r1, #0
   1424a:	6019      	str	r1, [r3, #0]
   1424c:	681b      	ldr	r3, [r3, #0]
		retval = nrf_rng_random_value_get(NRF_RNG);
   1424e:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   14250:	f382 8811 	msr	BASEPRI, r2
   14254:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   14258:	4770      	bx	lr
	int retval = -EAGAIN;
   1425a:	f06f 000a 	mvn.w	r0, #10
   1425e:	e7f7      	b.n	14250 <random_byte_get+0x24>
   14260:	4000d100 	.word	0x4000d100
   14264:	4000d000 	.word	0x4000d000

00014268 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   14268:	b5f0      	push	{r4, r5, r6, r7, lr}
   1426a:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   1426c:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   1426e:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   14270:	f04f 0520 	mov.w	r5, #32
   14274:	f3ef 8011 	mrs	r0, BASEPRI
   14278:	f385 8811 	msr	BASEPRI, r5
   1427c:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   14280:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   14282:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   14286:	1ba4      	subs	r4, r4, r6
   14288:	403c      	ands	r4, r7
	if (available < len) {
   1428a:	42a2      	cmp	r2, r4
		len = available;
   1428c:	bf88      	it	hi
   1428e:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   14290:	eb06 0c02 	add.w	ip, r6, r2
   14294:	ea07 0c0c 	and.w	ip, r7, ip
	first = rngp->first_alloc;
   14298:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   1429a:	f883 c000 	strb.w	ip, [r3]
	__asm__ volatile(
   1429e:	f380 8811 	msr	BASEPRI, r0
   142a2:	f3bf 8f6f 	isb	sy
   142a6:	440a      	add	r2, r1
	uint8_t *dst   = buf;
   142a8:	4608      	mov	r0, r1
	irq_unlock(key);

	while (likely(len--)) {
   142aa:	4282      	cmp	r2, r0
   142ac:	d119      	bne.n	142e2 <rng_pool_get+0x7a>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   142ae:	4576      	cmp	r6, lr
   142b0:	d10d      	bne.n	142ce <rng_pool_get+0x66>
	__asm__ volatile(
   142b2:	f04f 0520 	mov.w	r5, #32
   142b6:	f3ef 8211 	mrs	r2, BASEPRI
   142ba:	f385 8811 	msr	BASEPRI, r5
   142be:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   142c2:	781d      	ldrb	r5, [r3, #0]
   142c4:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   142c6:	f382 8811 	msr	BASEPRI, r2
   142ca:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   142ce:	1a41      	subs	r1, r0, r1
	available = available - len;
	if (available <= rngp->threshold) {
   142d0:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   142d2:	b288      	uxth	r0, r1
	available = available - len;
   142d4:	1a21      	subs	r1, r4, r0
	if (available <= rngp->threshold) {
   142d6:	428b      	cmp	r3, r1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   142d8:	bf22      	ittt	cs
   142da:	4b06      	ldrcs	r3, [pc, #24]	; (142f4 <rng_pool_get+0x8c>)
   142dc:	2201      	movcs	r2, #1
   142de:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   142e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   142e2:	eb03 0c05 	add.w	ip, r3, r5
		first = (first + 1) & mask;
   142e6:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   142e8:	f89c c005 	ldrb.w	ip, [ip, #5]
   142ec:	f800 cb01 	strb.w	ip, [r0], #1
		first = (first + 1) & mask;
   142f0:	403d      	ands	r5, r7
   142f2:	e7da      	b.n	142aa <rng_pool_get+0x42>
   142f4:	4000d000 	.word	0x4000d000

000142f8 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   142f8:	43db      	mvns	r3, r3
{
   142fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   142fe:	f013 0501 	ands.w	r5, r3, #1
{
   14302:	460e      	mov	r6, r1
   14304:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   14306:	d004      	beq.n	14312 <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   14308:	4821      	ldr	r0, [pc, #132]	; (14390 <entropy_nrf5_get_entropy_isr+0x98>)
   1430a:	f7ff ffad 	bl	14268 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1430e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   14312:	2a00      	cmp	r2, #0
   14314:	d033      	beq.n	1437e <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   14316:	f04f 0320 	mov.w	r3, #32
   1431a:	f3ef 8811 	mrs	r8, BASEPRI
   1431e:	f383 8811 	msr	BASEPRI, r3
   14322:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   14326:	200d      	movs	r0, #13
   14328:	f7f0 fac6 	bl	48b8 <arch_irq_is_enabled>
   1432c:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1432e:	200d      	movs	r0, #13
   14330:	f7f0 faae 	bl	4890 <arch_irq_disable>
	__asm__ volatile(
   14334:	f388 8811 	msr	BASEPRI, r8
   14338:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1433c:	4a15      	ldr	r2, [pc, #84]	; (14394 <entropy_nrf5_get_entropy_isr+0x9c>)
   1433e:	6015      	str	r5, [r2, #0]
   14340:	6813      	ldr	r3, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   14342:	4b15      	ldr	r3, [pc, #84]	; (14398 <entropy_nrf5_get_entropy_isr+0xa0>)
   14344:	2101      	movs	r1, #1
   14346:	6019      	str	r1, [r3, #0]
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   14348:	4914      	ldr	r1, [pc, #80]	; (1439c <entropy_nrf5_get_entropy_isr+0xa4>)
   1434a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   1434e:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
   14352:	4625      	mov	r5, r4
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   14354:	4691      	mov	r9, r2
   14356:	468a      	mov	sl, r1
   14358:	4698      	mov	r8, r3
   1435a:	f8d9 3000 	ldr.w	r3, [r9]
			while (!nrf_rng_event_check(NRF_RNG,
   1435e:	b183      	cbz	r3, 14382 <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   14360:	f7ff ff64 	bl	1422c <random_byte_get>
			if (byte < 0) {
   14364:	1e03      	subs	r3, r0, #0
   14366:	f8ca 8180 	str.w	r8, [sl, #384]	; 0x180
   1436a:	dbf6      	blt.n	1435a <entropy_nrf5_get_entropy_isr+0x62>
   1436c:	3d01      	subs	r5, #1
   1436e:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
   14370:	5573      	strb	r3, [r6, r5]
		} while (len);
   14372:	2d00      	cmp	r5, #0
   14374:	d1f1      	bne.n	1435a <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   14376:	b117      	cbz	r7, 1437e <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   14378:	200d      	movs	r0, #13
   1437a:	f7f0 fa79 	bl	4870 <arch_irq_enable>
	return cnt;
   1437e:	4620      	mov	r0, r4
   14380:	e7c5      	b.n	1430e <entropy_nrf5_get_entropy_isr+0x16>
  __ASM volatile ("dsb 0xF":::"memory");
   14382:	f3bf 8f4f 	dsb	sy
				__WFE();
   14386:	bf20      	wfe
				__SEV();
   14388:	bf40      	sev
				__WFE();
   1438a:	bf20      	wfe
   1438c:	e7e5      	b.n	1435a <entropy_nrf5_get_entropy_isr+0x62>
   1438e:	bf00      	nop
   14390:	20002150 	.word	0x20002150
   14394:	4000d100 	.word	0x4000d100
   14398:	4000d000 	.word	0x4000d000
   1439c:	e000e100 	.word	0xe000e100

000143a0 <entropy_nrf5_get_entropy>:
{
   143a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   143a4:	4f13      	ldr	r7, [pc, #76]	; (143f4 <entropy_nrf5_get_entropy+0x54>)
   143a6:	460d      	mov	r5, r1
   143a8:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   143aa:	f107 0845 	add.w	r8, r7, #69	; 0x45
   143ae:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   143b2:	b914      	cbnz	r4, 143ba <entropy_nrf5_get_entropy+0x1a>
}
   143b4:	4620      	mov	r0, r4
   143b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   143ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   143be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   143c2:	4638      	mov	r0, r7
   143c4:	f000 ffcc 	bl	15360 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   143c8:	4622      	mov	r2, r4
   143ca:	4629      	mov	r1, r5
   143cc:	4640      	mov	r0, r8
   143ce:	f7ff ff4b 	bl	14268 <rng_pool_get>
   143d2:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   143d4:	4638      	mov	r0, r7
   143d6:	f000 ff9d 	bl	15314 <z_impl_k_sem_give>
		if (bytes == 0U) {
   143da:	b93e      	cbnz	r6, 143ec <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   143dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   143e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   143e4:	4648      	mov	r0, r9
   143e6:	f000 ffbb 	bl	15360 <z_impl_k_sem_take>
			continue;
   143ea:	e7e2      	b.n	143b2 <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   143ec:	1ba4      	subs	r4, r4, r6
   143ee:	b2a4      	uxth	r4, r4
		buf += bytes;
   143f0:	4435      	add	r5, r6
   143f2:	e7de      	b.n	143b2 <entropy_nrf5_get_entropy+0x12>
   143f4:	20002120 	.word	0x20002120

000143f8 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   143f8:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   143fa:	4c19      	ldr	r4, [pc, #100]	; (14460 <entropy_nrf5_init+0x68>)
   143fc:	2201      	movs	r2, #1
   143fe:	4611      	mov	r1, r2
   14400:	4620      	mov	r0, r4
   14402:	f004 fd46 	bl	18e92 <z_impl_k_sem_init>
   14406:	2201      	movs	r2, #1
   14408:	2100      	movs	r1, #0
   1440a:	f104 0018 	add.w	r0, r4, #24
   1440e:	f004 fd40 	bl	18e92 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   14412:	f240 4307 	movw	r3, #1031	; 0x407
   14416:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1441a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1441e:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   14420:	230c      	movs	r3, #12
   14422:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   14426:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   14428:	4b0e      	ldr	r3, [pc, #56]	; (14464 <entropy_nrf5_init+0x6c>)
   1442a:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1442e:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   14432:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   14436:	f042 0201 	orr.w	r2, r2, #1
   1443a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1443e:	4a0a      	ldr	r2, [pc, #40]	; (14468 <entropy_nrf5_init+0x70>)
    p_reg->INTENSET = mask;
   14440:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   14442:	6015      	str	r5, [r2, #0]
   14444:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENSET = mask;
   14446:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1444a:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1444c:	6019      	str	r1, [r3, #0]
   1444e:	200d      	movs	r0, #13
   14450:	f7f0 fa40 	bl	48d4 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   14454:	200d      	movs	r0, #13
   14456:	f7f0 fa0b 	bl	4870 <arch_irq_enable>

	return 0;
}
   1445a:	4628      	mov	r0, r5
   1445c:	bd38      	pop	{r3, r4, r5, pc}
   1445e:	bf00      	nop
   14460:	20002120 	.word	0x20002120
   14464:	4000d000 	.word	0x4000d000
   14468:	4000d100 	.word	0x4000d100

0001446c <isr>:
{
   1446c:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1446e:	f7ff fedd 	bl	1422c <random_byte_get>
	if (byte < 0) {
   14472:	2800      	cmp	r0, #0
   14474:	db20      	blt.n	144b8 <isr+0x4c>
	uint8_t last  = rngp->last;
   14476:	4b17      	ldr	r3, [pc, #92]	; (144d4 <isr+0x68>)
   14478:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1447c:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   14480:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   14484:	1a51      	subs	r1, r2, r1
   14486:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1448a:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1448c:	d10d      	bne.n	144aa <isr+0x3e>
	uint8_t last  = rngp->last;
   1448e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   14492:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   14496:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1449a:	1a51      	subs	r1, r2, r1
   1449c:	ea34 0101 	bics.w	r1, r4, r1
   144a0:	d10b      	bne.n	144ba <isr+0x4e>
   144a2:	4b0d      	ldr	r3, [pc, #52]	; (144d8 <isr+0x6c>)
   144a4:	2201      	movs	r2, #1
   144a6:	601a      	str	r2, [r3, #0]
}
   144a8:	e00e      	b.n	144c8 <isr+0x5c>
	rngp->buffer[last] = byte;
   144aa:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   144ac:	3201      	adds	r2, #1
   144ae:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   144b0:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   144b4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   144b8:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   144ba:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   144bc:	3201      	adds	r2, #1
   144be:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   144c0:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   144c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   144c8:	4804      	ldr	r0, [pc, #16]	; (144dc <isr+0x70>)
}
   144ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   144ce:	f000 bf21 	b.w	15314 <z_impl_k_sem_give>
   144d2:	bf00      	nop
   144d4:	20002120 	.word	0x20002120
   144d8:	4000d004 	.word	0x4000d004
   144dc:	20002138 	.word	0x20002138

000144e0 <nrf52_errata_136>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   144e0:	4b06      	ldr	r3, [pc, #24]	; (144fc <nrf52_errata_136+0x1c>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   144e2:	681b      	ldr	r3, [r3, #0]
   144e4:	2b08      	cmp	r3, #8
   144e6:	d106      	bne.n	144f6 <nrf52_errata_136+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   144e8:	4b05      	ldr	r3, [pc, #20]	; (14500 <nrf52_errata_136+0x20>)
   144ea:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
   144ec:	2b05      	cmp	r3, #5
   144ee:	d802      	bhi.n	144f6 <nrf52_errata_136+0x16>
   144f0:	4a04      	ldr	r2, [pc, #16]	; (14504 <nrf52_errata_136+0x24>)
   144f2:	5cd0      	ldrb	r0, [r2, r3]
   144f4:	4770      	bx	lr
                    default:
                        return true;
                }
            }
        #endif
        return false;
   144f6:	2000      	movs	r0, #0
    #endif
}
   144f8:	4770      	bx	lr
   144fa:	bf00      	nop
   144fc:	10000130 	.word	0x10000130
   14500:	10000134 	.word	0x10000134
   14504:	0001a951 	.word	0x0001a951

00014508 <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   14508:	4b06      	ldr	r3, [pc, #24]	; (14524 <nrf52_errata_103+0x1c>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1450a:	681b      	ldr	r3, [r3, #0]
   1450c:	2b08      	cmp	r3, #8
   1450e:	d106      	bne.n	1451e <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   14510:	4b05      	ldr	r3, [pc, #20]	; (14528 <nrf52_errata_103+0x20>)
   14512:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
   14514:	2b05      	cmp	r3, #5
   14516:	d802      	bhi.n	1451e <nrf52_errata_103+0x16>
   14518:	4a04      	ldr	r2, [pc, #16]	; (1452c <nrf52_errata_103+0x24>)
   1451a:	5cd0      	ldrb	r0, [r2, r3]
   1451c:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   1451e:	2000      	movs	r0, #0
    #endif
}
   14520:	4770      	bx	lr
   14522:	bf00      	nop
   14524:	10000130 	.word	0x10000130
   14528:	10000134 	.word	0x10000134
   1452c:	0001a957 	.word	0x0001a957

00014530 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   14530:	4a02      	ldr	r2, [pc, #8]	; (1453c <nvmc_wait+0xc>)
   14532:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   14536:	2b00      	cmp	r3, #0
   14538:	d0fb      	beq.n	14532 <nvmc_wait+0x2>
}
   1453a:	4770      	bx	lr
   1453c:	4001e000 	.word	0x4001e000

00014540 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   14540:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   14542:	f7ff ffcd 	bl	144e0 <nrf52_errata_136>
   14546:	b140      	cbz	r0, 1455a <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   14548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1454c:	2200      	movs	r2, #0
   1454e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   14552:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   14556:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   1455a:	f7ff ffc1 	bl	144e0 <nrf52_errata_136>
   1455e:	2800      	cmp	r0, #0
   14560:	d046      	beq.n	145f0 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   14562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   14566:	4b52      	ldr	r3, [pc, #328]	; (146b0 <SystemInit+0x170>)
   14568:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1456c:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   14570:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   14574:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   14578:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   1457c:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   14580:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   14584:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   14588:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   1458c:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   14590:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   14594:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   14598:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   1459c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   145a0:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   145a4:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   145a8:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   145ac:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   145b0:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   145b4:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   145b8:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   145bc:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   145c0:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   145c4:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   145c8:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   145cc:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   145d0:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   145d4:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   145d8:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   145dc:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   145e0:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   145e4:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   145e8:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   145ec:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   145f0:	f7ff ff8a 	bl	14508 <nrf52_errata_103>
   145f4:	b110      	cbz	r0, 145fc <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   145f6:	4b2f      	ldr	r3, [pc, #188]	; (146b4 <SystemInit+0x174>)
   145f8:	4a2f      	ldr	r2, [pc, #188]	; (146b8 <SystemInit+0x178>)
   145fa:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   145fc:	f7ff ff84 	bl	14508 <nrf52_errata_103>
   14600:	b118      	cbz	r0, 1460a <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   14602:	4b2e      	ldr	r3, [pc, #184]	; (146bc <SystemInit+0x17c>)
   14604:	22fb      	movs	r2, #251	; 0xfb
   14606:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   1460a:	f7ff ff7d 	bl	14508 <nrf52_errata_103>
   1460e:	b148      	cbz	r0, 14624 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   14610:	492b      	ldr	r1, [pc, #172]	; (146c0 <SystemInit+0x180>)
   14612:	4b2c      	ldr	r3, [pc, #176]	; (146c4 <SystemInit+0x184>)
   14614:	680a      	ldr	r2, [r1, #0]
   14616:	681b      	ldr	r3, [r3, #0]
   14618:	f022 020f 	bic.w	r2, r2, #15
   1461c:	f003 030f 	and.w	r3, r3, #15
   14620:	4313      	orrs	r3, r2
   14622:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   14624:	f7ff ff70 	bl	14508 <nrf52_errata_103>
   14628:	b118      	cbz	r0, 14632 <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   1462a:	4b27      	ldr	r3, [pc, #156]	; (146c8 <SystemInit+0x188>)
   1462c:	f44f 7200 	mov.w	r2, #512	; 0x200
   14630:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   14632:	f7ff ff55 	bl	144e0 <nrf52_errata_136>
   14636:	b148      	cbz	r0, 1464c <SystemInit+0x10c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   14638:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1463c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   14640:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   14642:	bf44      	itt	mi
   14644:	f06f 0201 	mvnmi.w	r2, #1
   14648:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1464c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   14650:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   14654:	2a00      	cmp	r2, #0
   14656:	db03      	blt.n	14660 <SystemInit+0x120>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   14658:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1465c:	2b00      	cmp	r3, #0
   1465e:	da22      	bge.n	146a6 <SystemInit+0x166>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   14660:	491a      	ldr	r1, [pc, #104]	; (146cc <SystemInit+0x18c>)
   14662:	2301      	movs	r3, #1
   14664:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   14668:	f7ff ff62 	bl	14530 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1466c:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
   14670:	2412      	movs	r4, #18
   14672:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   14676:	f7ff ff5b 	bl	14530 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1467a:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   1467e:	f7ff ff57 	bl	14530 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   14682:	2300      	movs	r3, #0
   14684:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   14688:	f7ff ff52 	bl	14530 <nvmc_wait>
   1468c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   14690:	490f      	ldr	r1, [pc, #60]	; (146d0 <SystemInit+0x190>)
   14692:	4b10      	ldr	r3, [pc, #64]	; (146d4 <SystemInit+0x194>)
   14694:	68ca      	ldr	r2, [r1, #12]
   14696:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1469a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1469c:	60cb      	str	r3, [r1, #12]
   1469e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   146a2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   146a4:	e7fd      	b.n	146a2 <SystemInit+0x162>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   146a6:	4b0c      	ldr	r3, [pc, #48]	; (146d8 <SystemInit+0x198>)
   146a8:	4a0c      	ldr	r2, [pc, #48]	; (146dc <SystemInit+0x19c>)
   146aa:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   146ac:	bd10      	pop	{r4, pc}
   146ae:	bf00      	nop
   146b0:	4000c000 	.word	0x4000c000
   146b4:	4000568c 	.word	0x4000568c
   146b8:	00038148 	.word	0x00038148
   146bc:	4000f000 	.word	0x4000f000
   146c0:	40000ee4 	.word	0x40000ee4
   146c4:	10000258 	.word	0x10000258
   146c8:	40029640 	.word	0x40029640
   146cc:	4001e000 	.word	0x4001e000
   146d0:	e000ed00 	.word	0xe000ed00
   146d4:	05fa0004 	.word	0x05fa0004
   146d8:	2000050c 	.word	0x2000050c
   146dc:	03d09000 	.word	0x03d09000

000146e0 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   146e0:	4b04      	ldr	r3, [pc, #16]	; (146f4 <nrfx_clock_init+0x14>)
   146e2:	791a      	ldrb	r2, [r3, #4]
   146e4:	b922      	cbnz	r2, 146f0 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   146e6:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   146e8:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   146ea:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   146ec:	4802      	ldr	r0, [pc, #8]	; (146f8 <nrfx_clock_init+0x18>)
   146ee:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   146f0:	4802      	ldr	r0, [pc, #8]	; (146fc <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   146f2:	4770      	bx	lr
   146f4:	20002174 	.word	0x20002174
   146f8:	0bad0000 	.word	0x0bad0000
   146fc:	0bad000c 	.word	0x0bad000c

00014700 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   14700:	b110      	cbz	r0, 14708 <nrfx_clock_start+0x8>
   14702:	2801      	cmp	r0, #1
   14704:	d020      	beq.n	14748 <nrfx_clock_start+0x48>
   14706:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   14708:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1470c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   14710:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   14714:	f411 3f80 	tst.w	r1, #65536	; 0x10000
   14718:	4619      	mov	r1, r3
   1471a:	d011      	beq.n	14740 <nrfx_clock_start+0x40>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1471c:	f002 0203 	and.w	r2, r2, #3
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   14720:	2a01      	cmp	r2, #1
   14722:	d10d      	bne.n	14740 <nrfx_clock_start+0x40>
    p_reg->LFCLKSRC = (uint32_t)(source);
   14724:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14728:	4b0c      	ldr	r3, [pc, #48]	; (1475c <nrfx_clock_start+0x5c>)
   1472a:	2200      	movs	r2, #0
   1472c:	601a      	str	r2, [r3, #0]
   1472e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   14730:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14734:	2202      	movs	r2, #2
   14736:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1473a:	2201      	movs	r2, #1
   1473c:	609a      	str	r2, [r3, #8]
}
   1473e:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
   14740:	2300      	movs	r3, #0
   14742:	f8c1 3518 	str.w	r3, [r1, #1304]	; 0x518
}
   14746:	e7ef      	b.n	14728 <nrfx_clock_start+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14748:	4b05      	ldr	r3, [pc, #20]	; (14760 <nrfx_clock_start+0x60>)
   1474a:	2200      	movs	r2, #0
   1474c:	601a      	str	r2, [r3, #0]
   1474e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   14750:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14754:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14758:	6018      	str	r0, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   1475a:	4770      	bx	lr
   1475c:	40000104 	.word	0x40000104
   14760:	40000100 	.word	0x40000100

00014764 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   14764:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   14766:	b110      	cbz	r0, 1476e <nrfx_clock_stop+0xa>
   14768:	2801      	cmp	r0, #1
   1476a:	d018      	beq.n	1479e <nrfx_clock_stop+0x3a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   1476c:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   1476e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14772:	2202      	movs	r2, #2
   14774:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14778:	4a18      	ldr	r2, [pc, #96]	; (147dc <nrfx_clock_stop+0x78>)
   1477a:	6010      	str	r0, [r2, #0]
   1477c:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1477e:	4a18      	ldr	r2, [pc, #96]	; (147e0 <nrfx_clock_stop+0x7c>)
   14780:	2101      	movs	r1, #1
   14782:	6011      	str	r1, [r2, #0]
   14784:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   14788:	461c      	mov	r4, r3
   1478a:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   1478e:	03db      	lsls	r3, r3, #15
   14790:	d5ec      	bpl.n	1476c <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   14792:	2001      	movs	r0, #1
   14794:	f004 f90d 	bl	189b2 <nrfx_busy_wait>
   14798:	3d01      	subs	r5, #1
   1479a:	d1f6      	bne.n	1478a <nrfx_clock_stop+0x26>
   1479c:	e7e6      	b.n	1476c <nrfx_clock_stop+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1479e:	4b11      	ldr	r3, [pc, #68]	; (147e4 <nrfx_clock_stop+0x80>)
    p_reg->INTENCLR = mask;
   147a0:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   147a4:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   147a6:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   147aa:	601a      	str	r2, [r3, #0]
   147ac:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   147ae:	4b0e      	ldr	r3, [pc, #56]	; (147e8 <nrfx_clock_stop+0x84>)
   147b0:	f242 7510 	movw	r5, #10000	; 0x2710
   147b4:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   147b6:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   147ba:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
   147be:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   147c0:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   147c4:	d505      	bpl.n	147d2 <nrfx_clock_stop+0x6e>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   147c6:	b123      	cbz	r3, 147d2 <nrfx_clock_stop+0x6e>
   147c8:	2001      	movs	r0, #1
   147ca:	f004 f8f2 	bl	189b2 <nrfx_busy_wait>
   147ce:	3d01      	subs	r5, #1
   147d0:	d1f1      	bne.n	147b6 <nrfx_clock_stop+0x52>
            m_clock_cb.hfclk_started = false;
   147d2:	4b06      	ldr	r3, [pc, #24]	; (147ec <nrfx_clock_stop+0x88>)
   147d4:	2200      	movs	r2, #0
   147d6:	715a      	strb	r2, [r3, #5]
   147d8:	e7c8      	b.n	1476c <nrfx_clock_stop+0x8>
   147da:	bf00      	nop
   147dc:	40000104 	.word	0x40000104
   147e0:	4000000c 	.word	0x4000000c
   147e4:	40000100 	.word	0x40000100
   147e8:	40000004 	.word	0x40000004
   147ec:	20002174 	.word	0x20002174

000147f0 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   147f0:	4b16      	ldr	r3, [pc, #88]	; (1484c <nrfx_power_clock_irq_handler+0x5c>)
   147f2:	681a      	ldr	r2, [r3, #0]
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   147f4:	b510      	push	{r4, lr}
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   147f6:	b16a      	cbz	r2, 14814 <nrfx_power_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   147f8:	2200      	movs	r2, #0
   147fa:	601a      	str	r2, [r3, #0]
   147fc:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   147fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14802:	2201      	movs	r2, #1
   14804:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   14808:	4b11      	ldr	r3, [pc, #68]	; (14850 <nrfx_power_clock_irq_handler+0x60>)
   1480a:	7958      	ldrb	r0, [r3, #5]
   1480c:	b910      	cbnz	r0, 14814 <nrfx_power_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
   1480e:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   14810:	681b      	ldr	r3, [r3, #0]
   14812:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   14814:	4b0f      	ldr	r3, [pc, #60]	; (14854 <nrfx_power_clock_irq_handler+0x64>)
   14816:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   14818:	b172      	cbz	r2, 14838 <nrfx_power_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1481a:	2200      	movs	r2, #0
   1481c:	601a      	str	r2, [r3, #0]
   1481e:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   14820:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14824:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   14828:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   1482c:	0792      	lsls	r2, r2, #30
   1482e:	d104      	bne.n	1483a <nrfx_power_clock_irq_handler+0x4a>
    p_reg->LFCLKSRC = (uint32_t)(source);
   14830:	2201      	movs	r2, #1
   14832:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14836:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   14838:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   1483a:	2202      	movs	r2, #2
   1483c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   14840:	4b03      	ldr	r3, [pc, #12]	; (14850 <nrfx_power_clock_irq_handler+0x60>)
}
   14842:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   14846:	681b      	ldr	r3, [r3, #0]
   14848:	2001      	movs	r0, #1
   1484a:	4718      	bx	r3
   1484c:	40000100 	.word	0x40000100
   14850:	20002174 	.word	0x20002174
   14854:	40000104 	.word	0x40000104

00014858 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   14858:	2301      	movs	r3, #1
   1485a:	fa03 f000 	lsl.w	r0, r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   1485e:	f010 0fff 	tst.w	r0, #255	; 0xff
   14862:	d012      	beq.n	1488a <nrfx_gpiote_channel_free+0x32>
	__asm__ volatile(
   14864:	f04f 0320 	mov.w	r3, #32
   14868:	f3ef 8111 	mrs	r1, BASEPRI
   1486c:	f383 8811 	msr	BASEPRI, r3
   14870:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   14874:	4a06      	ldr	r2, [pc, #24]	; (14890 <nrfx_gpiote_channel_free+0x38>)
   14876:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   14878:	ea23 0000 	bic.w	r0, r3, r0
   1487c:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
   1487e:	f381 8811 	msr	BASEPRI, r1
   14882:	f3bf 8f6f 	isb	sy
   14886:	4803      	ldr	r0, [pc, #12]	; (14894 <nrfx_gpiote_channel_free+0x3c>)
   14888:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   1488a:	4803      	ldr	r0, [pc, #12]	; (14898 <nrfx_gpiote_channel_free+0x40>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1488c:	4770      	bx	lr
   1488e:	bf00      	nop
   14890:	2000217c 	.word	0x2000217c
   14894:	0bad0000 	.word	0x0bad0000
   14898:	0bad0004 	.word	0x0bad0004

0001489c <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   1489c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   148a0:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   148a2:	f8df e060 	ldr.w	lr, [pc, #96]	; 14904 <nrfx_gpiote_channel_alloc+0x68>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   148a6:	4816      	ldr	r0, [pc, #88]	; (14900 <nrfx_gpiote_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   148a8:	f8df 805c 	ldr.w	r8, [pc, #92]	; 14908 <nrfx_gpiote_channel_alloc+0x6c>
{
   148ac:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   148ae:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
   148b0:	2601      	movs	r6, #1
   148b2:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   148b4:	f04f 0120 	mov.w	r1, #32
   148b8:	f3ef 8c11 	mrs	ip, BASEPRI
   148bc:	f381 8811 	msr	BASEPRI, r1
   148c0:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   148c4:	fa22 f103 	lsr.w	r1, r2, r3
   148c8:	07c9      	lsls	r1, r1, #31
   148ca:	d50a      	bpl.n	148e2 <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
   148cc:	f8de 105c 	ldr.w	r1, [lr, #92]	; 0x5c
   148d0:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   148d4:	4239      	tst	r1, r7
    m_cb.allocated_channels_mask |= (1UL << index);
   148d6:	bf01      	itttt	eq
   148d8:	4339      	orreq	r1, r7
   148da:	f8ce 105c 	streq.w	r1, [lr, #92]	; 0x5c
            err_code = NRFX_SUCCESS;
   148de:	4640      	moveq	r0, r8
            *p_channel = ch_idx;
   148e0:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
   148e2:	f38c 8811 	msr	BASEPRI, ip
   148e6:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   148ea:	4540      	cmp	r0, r8
   148ec:	d005      	beq.n	148fa <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   148ee:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   148f2:	439a      	bics	r2, r3
   148f4:	f104 0401 	add.w	r4, r4, #1
   148f8:	d1db      	bne.n	148b2 <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   148fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   148fe:	bf00      	nop
   14900:	0bad0002 	.word	0x0bad0002
   14904:	2000217c 	.word	0x2000217c
   14908:	0bad0000 	.word	0x0bad0000

0001490c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1490c:	4b0e      	ldr	r3, [pc, #56]	; (14948 <z_sys_init_run_level+0x3c>)
{
   1490e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   14910:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   14914:	3001      	adds	r0, #1
   14916:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1491a:	42a6      	cmp	r6, r4
   1491c:	d800      	bhi.n	14920 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   1491e:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   14920:	e9d4 3500 	ldrd	r3, r5, [r4]
   14924:	4628      	mov	r0, r5
   14926:	4798      	blx	r3
		if (dev != NULL) {
   14928:	b165      	cbz	r5, 14944 <z_sys_init_run_level+0x38>
			if (rc != 0) {
   1492a:	68eb      	ldr	r3, [r5, #12]
   1492c:	b130      	cbz	r0, 1493c <z_sys_init_run_level+0x30>
				if (rc < 0) {
   1492e:	2800      	cmp	r0, #0
   14930:	bfb8      	it	lt
   14932:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   14934:	28ff      	cmp	r0, #255	; 0xff
   14936:	bfa8      	it	ge
   14938:	20ff      	movge	r0, #255	; 0xff
   1493a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   1493c:	785a      	ldrb	r2, [r3, #1]
   1493e:	f042 0201 	orr.w	r2, r2, #1
   14942:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   14944:	3408      	adds	r4, #8
   14946:	e7e8      	b.n	1491a <z_sys_init_run_level+0xe>
   14948:	0001a554 	.word	0x0001a554

0001494c <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   1494c:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   1494e:	4605      	mov	r5, r0
   14950:	b910      	cbnz	r0, 14958 <z_impl_device_get_binding+0xc>
		return NULL;
   14952:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   14954:	4620      	mov	r0, r4
   14956:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   14958:	7803      	ldrb	r3, [r0, #0]
   1495a:	2b00      	cmp	r3, #0
   1495c:	d0f9      	beq.n	14952 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   1495e:	4a0f      	ldr	r2, [pc, #60]	; (1499c <z_impl_device_get_binding+0x50>)
   14960:	4c0f      	ldr	r4, [pc, #60]	; (149a0 <z_impl_device_get_binding+0x54>)
   14962:	4616      	mov	r6, r2
   14964:	4294      	cmp	r4, r2
   14966:	d108      	bne.n	1497a <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
   14968:	4c0d      	ldr	r4, [pc, #52]	; (149a0 <z_impl_device_get_binding+0x54>)
   1496a:	42b4      	cmp	r4, r6
   1496c:	d0f1      	beq.n	14952 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1496e:	4620      	mov	r0, r4
   14970:	f004 f82c 	bl	189cc <z_device_ready>
   14974:	b950      	cbnz	r0, 1498c <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   14976:	3418      	adds	r4, #24
   14978:	e7f7      	b.n	1496a <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
   1497a:	4620      	mov	r0, r4
   1497c:	f004 f826 	bl	189cc <z_device_ready>
   14980:	b110      	cbz	r0, 14988 <z_impl_device_get_binding+0x3c>
   14982:	6823      	ldr	r3, [r4, #0]
   14984:	42ab      	cmp	r3, r5
   14986:	d0e5      	beq.n	14954 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   14988:	3418      	adds	r4, #24
   1498a:	e7eb      	b.n	14964 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1498c:	6821      	ldr	r1, [r4, #0]
   1498e:	4628      	mov	r0, r5
   14990:	f002 f872 	bl	16a78 <strcmp>
   14994:	2800      	cmp	r0, #0
   14996:	d1ee      	bne.n	14976 <z_impl_device_get_binding+0x2a>
   14998:	e7dc      	b.n	14954 <z_impl_device_get_binding+0x8>
   1499a:	bf00      	nop
   1499c:	20000604 	.word	0x20000604
   149a0:	20000574 	.word	0x20000574

000149a4 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   149a4:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   149a6:	4c09      	ldr	r4, [pc, #36]	; (149cc <idle+0x28>)
	__asm__ volatile(
   149a8:	f04f 0220 	mov.w	r2, #32
   149ac:	f3ef 8311 	mrs	r3, BASEPRI
   149b0:	f382 8811 	msr	BASEPRI, r2
   149b4:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   149b8:	f004 fb61 	bl	1907e <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
   149bc:	6220      	str	r0, [r4, #32]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
   149be:	f7ef fb41 	bl	4044 <pm_system_suspend>
   149c2:	2800      	cmp	r0, #0
   149c4:	d1f0      	bne.n	149a8 <idle+0x4>
	arch_cpu_idle();
   149c6:	f7ef ffe5 	bl	4994 <arch_cpu_idle>
}
   149ca:	e7ed      	b.n	149a8 <idle+0x4>
   149cc:	200021dc 	.word	0x200021dc

000149d0 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   149d0:	4802      	ldr	r0, [pc, #8]	; (149dc <z_bss_zero+0xc>)
   149d2:	4a03      	ldr	r2, [pc, #12]	; (149e0 <z_bss_zero+0x10>)
   149d4:	2100      	movs	r1, #0
   149d6:	1a12      	subs	r2, r2, r0
   149d8:	f002 b895 	b.w	16b06 <memset>
   149dc:	20000790 	.word	0x20000790
   149e0:	2000225c 	.word	0x2000225c

000149e4 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   149e4:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   149e6:	4b0a      	ldr	r3, [pc, #40]	; (14a10 <bg_thread_main+0x2c>)
   149e8:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   149ea:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   149ec:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   149ee:	f7ff ff8d 	bl	1490c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   149f2:	f000 ff33 	bl	1585c <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   149f6:	2003      	movs	r0, #3
   149f8:	f7ff ff88 	bl	1490c <z_sys_init_run_level>

	z_init_static_threads();
   149fc:	f000 fd50 	bl	154a0 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   14a00:	f7ee fdf2 	bl	35e8 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   14a04:	4a03      	ldr	r2, [pc, #12]	; (14a14 <bg_thread_main+0x30>)
   14a06:	7b13      	ldrb	r3, [r2, #12]
   14a08:	f023 0301 	bic.w	r3, r3, #1
   14a0c:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   14a0e:	bd08      	pop	{r3, pc}
   14a10:	20002258 	.word	0x20002258
   14a14:	20000e50 	.word	0x20000e50

00014a18 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   14a18:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   14a1c:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 14b18 <z_cstart+0x100>
   14a20:	b0a7      	sub	sp, #156	; 0x9c
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   14a22:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   14a26:	4d34      	ldr	r5, [pc, #208]	; (14af8 <z_cstart+0xe0>)
	_kernel.ready_q.cache = &z_main_thread;
   14a28:	4e34      	ldr	r6, [pc, #208]	; (14afc <z_cstart+0xe4>)
   14a2a:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   14a2c:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 14b1c <z_cstart+0x104>
	z_setup_new_thread(thread, stack,
   14a30:	4f33      	ldr	r7, [pc, #204]	; (14b00 <z_cstart+0xe8>)
   14a32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14a36:	2400      	movs	r4, #0
   14a38:	616b      	str	r3, [r5, #20]
   14a3a:	23e0      	movs	r3, #224	; 0xe0
   14a3c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   14a40:	77ec      	strb	r4, [r5, #31]
   14a42:	762c      	strb	r4, [r5, #24]
   14a44:	766c      	strb	r4, [r5, #25]
   14a46:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   14a48:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   14a4a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   14a4e:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   14a50:	f7f0 f8e4 	bl	4c1c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   14a54:	f7ef ff98 	bl	4988 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   14a58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14a5c:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   14a5e:	62eb      	str	r3, [r5, #44]	; 0x2c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   14a60:	4d28      	ldr	r5, [pc, #160]	; (14b04 <z_cstart+0xec>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   14a62:	f240 1301 	movw	r3, #257	; 0x101
   14a66:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   14a6a:	ab06      	add	r3, sp, #24
   14a6c:	60ab      	str	r3, [r5, #8]
	dummy_thread->stack_info.size = 0U;
   14a6e:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
#endif
#if defined(CONFIG_MMU) && defined(CONFIG_USERSPACE)
	z_kernel_map_fixup();
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   14a72:	f003 ffaa 	bl	189ca <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   14a76:	4620      	mov	r0, r4
   14a78:	f7ff ff48 	bl	1490c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   14a7c:	2001      	movs	r0, #1
   14a7e:	f7ff ff45 	bl	1490c <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   14a82:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
   14a86:	f000 fb4b 	bl	15120 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   14a8a:	4b1f      	ldr	r3, [pc, #124]	; (14b08 <z_cstart+0xf0>)
	_kernel.ready_q.cache = &z_main_thread;
   14a8c:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   14a8e:	491f      	ldr	r1, [pc, #124]	; (14b0c <z_cstart+0xf4>)
   14a90:	9305      	str	r3, [sp, #20]
   14a92:	f44f 6280 	mov.w	r2, #1024	; 0x400
   14a96:	4653      	mov	r3, sl
   14a98:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   14a9c:	e9cd 4401 	strd	r4, r4, [sp, #4]
   14aa0:	9400      	str	r4, [sp, #0]
   14aa2:	4630      	mov	r0, r6
   14aa4:	f000 fca0 	bl	153e8 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   14aa8:	7b73      	ldrb	r3, [r6, #13]
   14aaa:	4680      	mov	r8, r0
   14aac:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   14ab0:	4630      	mov	r0, r6
   14ab2:	7373      	strb	r3, [r6, #13]
   14ab4:	f004 f976 	bl	18da4 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   14ab8:	230f      	movs	r3, #15
   14aba:	e9cd 4302 	strd	r4, r3, [sp, #8]
   14abe:	4914      	ldr	r1, [pc, #80]	; (14b10 <z_cstart+0xf8>)
   14ac0:	4b14      	ldr	r3, [pc, #80]	; (14b14 <z_cstart+0xfc>)
   14ac2:	f44f 72a0 	mov.w	r2, #320	; 0x140
   14ac6:	e9cd b404 	strd	fp, r4, [sp, #16]
   14aca:	e9cd 5400 	strd	r5, r4, [sp]
   14ace:	4638      	mov	r0, r7
   14ad0:	f000 fc8a 	bl	153e8 <z_setup_new_thread>
   14ad4:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   14ad6:	60ef      	str	r7, [r5, #12]
   14ad8:	f023 0304 	bic.w	r3, r3, #4
   14adc:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   14ade:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
   14ae2:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].id = i;
   14ae6:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   14ae8:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   14aec:	4652      	mov	r2, sl
   14aee:	4641      	mov	r1, r8
   14af0:	4630      	mov	r0, r6
   14af2:	f7ef ff31 	bl	4958 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   14af6:	bf00      	nop
   14af8:	e000ed00 	.word	0xe000ed00
   14afc:	20000e50 	.word	0x20000e50
   14b00:	20000dd0 	.word	0x20000dd0
   14b04:	200021dc 	.word	0x200021dc
   14b08:	0001a95d 	.word	0x0001a95d
   14b0c:	20002d40 	.word	0x20002d40
   14b10:	20003140 	.word	0x20003140
   14b14:	000149a5 	.word	0x000149a5
   14b18:	20003a80 	.word	0x20003a80
   14b1c:	000149e5 	.word	0x000149e5

00014b20 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   14b20:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   14b22:	4c06      	ldr	r4, [pc, #24]	; (14b3c <statics_init+0x1c>)
   14b24:	4d06      	ldr	r5, [pc, #24]	; (14b40 <statics_init+0x20>)
   14b26:	42ac      	cmp	r4, r5
   14b28:	d301      	bcc.n	14b2e <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   14b2a:	2000      	movs	r0, #0
   14b2c:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   14b2e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   14b32:	4620      	mov	r0, r4
   14b34:	f003 ff81 	bl	18a3a <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   14b38:	3414      	adds	r4, #20
   14b3a:	e7f4      	b.n	14b26 <statics_init+0x6>
   14b3c:	20000658 	.word	0x20000658
   14b40:	20000658 	.word	0x20000658

00014b44 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   14b44:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   14b46:	4b0e      	ldr	r3, [pc, #56]	; (14b80 <init_mem_slab_module+0x3c>)
   14b48:	4c0e      	ldr	r4, [pc, #56]	; (14b84 <init_mem_slab_module+0x40>)
   14b4a:	42a3      	cmp	r3, r4
   14b4c:	d301      	bcc.n	14b52 <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   14b4e:	2000      	movs	r0, #0
	return rc;
}
   14b50:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   14b52:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   14b56:	ea41 0200 	orr.w	r2, r1, r0
   14b5a:	f012 0203 	ands.w	r2, r2, #3
   14b5e:	d10b      	bne.n	14b78 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   14b60:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   14b62:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   14b64:	42aa      	cmp	r2, r5
   14b66:	d101      	bne.n	14b6c <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   14b68:	331c      	adds	r3, #28
   14b6a:	e7ee      	b.n	14b4a <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   14b6c:	695e      	ldr	r6, [r3, #20]
   14b6e:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   14b70:	3201      	adds	r2, #1
		slab->free_list = p;
   14b72:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   14b74:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   14b76:	e7f5      	b.n	14b64 <init_mem_slab_module+0x20>
		return -EINVAL;
   14b78:	f06f 0015 	mvn.w	r0, #21
	return rc;
   14b7c:	e7e8      	b.n	14b50 <init_mem_slab_module+0xc>
   14b7e:	bf00      	nop
   14b80:	20000604 	.word	0x20000604
   14b84:	20000658 	.word	0x20000658

00014b88 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   14b88:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   14b8a:	460c      	mov	r4, r1
   14b8c:	4616      	mov	r6, r2
   14b8e:	461f      	mov	r7, r3
   14b90:	f04f 0320 	mov.w	r3, #32
   14b94:	f3ef 8111 	mrs	r1, BASEPRI
   14b98:	f383 8811 	msr	BASEPRI, r3
   14b9c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   14ba0:	6943      	ldr	r3, [r0, #20]
   14ba2:	b15b      	cbz	r3, 14bbc <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   14ba4:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   14ba6:	681b      	ldr	r3, [r3, #0]
   14ba8:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   14baa:	6983      	ldr	r3, [r0, #24]
   14bac:	3301      	adds	r3, #1
   14bae:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   14bb0:	2000      	movs	r0, #0
	__asm__ volatile(
   14bb2:	f381 8811 	msr	BASEPRI, r1
   14bb6:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   14bba:	e011      	b.n	14be0 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   14bbc:	ea56 0207 	orrs.w	r2, r6, r7
   14bc0:	d103      	bne.n	14bca <k_mem_slab_alloc+0x42>
		*mem = NULL;
   14bc2:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   14bc4:	f06f 000b 	mvn.w	r0, #11
   14bc8:	e7f3      	b.n	14bb2 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   14bca:	4602      	mov	r2, r0
   14bcc:	e9cd 6700 	strd	r6, r7, [sp]
   14bd0:	4804      	ldr	r0, [pc, #16]	; (14be4 <k_mem_slab_alloc+0x5c>)
   14bd2:	f000 f933 	bl	14e3c <z_pend_curr>
		if (result == 0) {
   14bd6:	b918      	cbnz	r0, 14be0 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   14bd8:	4b03      	ldr	r3, [pc, #12]	; (14be8 <k_mem_slab_alloc+0x60>)
   14bda:	689b      	ldr	r3, [r3, #8]
   14bdc:	695b      	ldr	r3, [r3, #20]
   14bde:	6023      	str	r3, [r4, #0]
}
   14be0:	b002      	add	sp, #8
   14be2:	bdd0      	pop	{r4, r6, r7, pc}
   14be4:	20002259 	.word	0x20002259
   14be8:	200021dc 	.word	0x200021dc

00014bec <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   14bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14bee:	4604      	mov	r4, r0
   14bf0:	460d      	mov	r5, r1
	__asm__ volatile(
   14bf2:	f04f 0320 	mov.w	r3, #32
   14bf6:	f3ef 8611 	mrs	r6, BASEPRI
   14bfa:	f383 8811 	msr	BASEPRI, r3
   14bfe:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (slab->free_list == NULL) {
   14c02:	6947      	ldr	r7, [r0, #20]
   14c04:	b96f      	cbnz	r7, 14c22 <k_mem_slab_free+0x36>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   14c06:	f004 f8ff 	bl	18e08 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   14c0a:	b150      	cbz	r0, 14c22 <k_mem_slab_free+0x36>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   14c0c:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   14c0e:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   14c10:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   14c12:	f004 f8c7 	bl	18da4 <z_ready_thread>
			z_reschedule(&lock, key);
   14c16:	4631      	mov	r1, r6
   14c18:	4808      	ldr	r0, [pc, #32]	; (14c3c <k_mem_slab_free+0x50>)
	}
	**(char ***) mem = slab->free_list;
	slab->free_list = *(char **) mem;
	slab->num_used--;
	k_spin_unlock(&lock, key);
}
   14c1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&lock, key);
   14c1e:	f000 b88b 	b.w	14d38 <z_reschedule>
	**(char ***) mem = slab->free_list;
   14c22:	682b      	ldr	r3, [r5, #0]
   14c24:	6962      	ldr	r2, [r4, #20]
   14c26:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   14c28:	682b      	ldr	r3, [r5, #0]
   14c2a:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   14c2c:	69a3      	ldr	r3, [r4, #24]
   14c2e:	3b01      	subs	r3, #1
   14c30:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   14c32:	f386 8811 	msr	BASEPRI, r6
   14c36:	f3bf 8f6f 	isb	sy
}
   14c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14c3c:	20002259 	.word	0x20002259

00014c40 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   14c40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14c42:	4616      	mov	r6, r2
   14c44:	461f      	mov	r7, r3
	__asm__ volatile(
   14c46:	f04f 0320 	mov.w	r3, #32
   14c4a:	f3ef 8511 	mrs	r5, BASEPRI
   14c4e:	f383 8811 	msr	BASEPRI, r3
   14c52:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
   14c56:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   14c58:	b19c      	cbz	r4, 14c82 <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   14c5a:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   14c5c:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   14c5e:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   14c62:	4294      	cmp	r4, r2
	list->head = node;
   14c64:	6003      	str	r3, [r0, #0]
	list->tail = node;
   14c66:	bf08      	it	eq
   14c68:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   14c6a:	2101      	movs	r1, #1
   14c6c:	4620      	mov	r0, r4
   14c6e:	f003 ffb4 	bl	18bda <z_queue_node_peek>
   14c72:	4604      	mov	r4, r0
	__asm__ volatile(
   14c74:	f385 8811 	msr	BASEPRI, r5
   14c78:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   14c7c:	4620      	mov	r0, r4
   14c7e:	b003      	add	sp, #12
   14c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   14c82:	ea56 0307 	orrs.w	r3, r6, r7
   14c86:	d0f5      	beq.n	14c74 <z_impl_k_queue_get+0x34>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   14c88:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   14c8c:	e9cd 6700 	strd	r6, r7, [sp]
   14c90:	4629      	mov	r1, r5
   14c92:	4610      	mov	r0, r2
   14c94:	f000 f8d2 	bl	14e3c <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   14c98:	2800      	cmp	r0, #0
   14c9a:	d1ef      	bne.n	14c7c <z_impl_k_queue_get+0x3c>
   14c9c:	4b01      	ldr	r3, [pc, #4]	; (14ca4 <z_impl_k_queue_get+0x64>)
   14c9e:	689b      	ldr	r3, [r3, #8]
   14ca0:	695c      	ldr	r4, [r3, #20]
   14ca2:	e7eb      	b.n	14c7c <z_impl_k_queue_get+0x3c>
   14ca4:	200021dc 	.word	0x200021dc

00014ca8 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   14ca8:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   14caa:	4c08      	ldr	r4, [pc, #32]	; (14ccc <z_reset_time_slice+0x24>)
   14cac:	6823      	ldr	r3, [r4, #0]
   14cae:	b15b      	cbz	r3, 14cc8 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   14cb0:	f7ef fcba 	bl	4628 <sys_clock_elapsed>
   14cb4:	4603      	mov	r3, r0
   14cb6:	6820      	ldr	r0, [r4, #0]
   14cb8:	4a05      	ldr	r2, [pc, #20]	; (14cd0 <z_reset_time_slice+0x28>)
   14cba:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   14cbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   14cc0:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   14cc2:	2100      	movs	r1, #0
   14cc4:	f004 b9eb 	b.w	1909e <z_set_timeout_expiry>
}
   14cc8:	bd10      	pop	{r4, pc}
   14cca:	bf00      	nop
   14ccc:	20002214 	.word	0x20002214
   14cd0:	200021dc 	.word	0x200021dc

00014cd4 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   14cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14cd6:	4604      	mov	r4, r0
   14cd8:	460d      	mov	r5, r1
	__asm__ volatile(
   14cda:	f04f 0320 	mov.w	r3, #32
   14cde:	f3ef 8611 	mrs	r6, BASEPRI
   14ce2:	f383 8811 	msr	BASEPRI, r3
   14ce6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   14cea:	4b10      	ldr	r3, [pc, #64]	; (14d2c <k_sched_time_slice_set+0x58>)
   14cec:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   14cee:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   14cf2:	f240 30e7 	movw	r0, #999	; 0x3e7
   14cf6:	2100      	movs	r1, #0
   14cf8:	611a      	str	r2, [r3, #16]
   14cfa:	fbe7 0104 	umlal	r0, r1, r7, r4
   14cfe:	2300      	movs	r3, #0
   14d00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14d04:	f7eb f9fc 	bl	100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   14d08:	2c00      	cmp	r4, #0
   14d0a:	4b09      	ldr	r3, [pc, #36]	; (14d30 <k_sched_time_slice_set+0x5c>)
   14d0c:	dc09      	bgt.n	14d22 <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   14d0e:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   14d10:	4b08      	ldr	r3, [pc, #32]	; (14d34 <k_sched_time_slice_set+0x60>)
   14d12:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   14d14:	f7ff ffc8 	bl	14ca8 <z_reset_time_slice>
	__asm__ volatile(
   14d18:	f386 8811 	msr	BASEPRI, r6
   14d1c:	f3bf 8f6f 	isb	sy
	}
}
   14d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   14d22:	2802      	cmp	r0, #2
   14d24:	bfb8      	it	lt
   14d26:	2002      	movlt	r0, #2
   14d28:	e7f1      	b.n	14d0e <k_sched_time_slice_set+0x3a>
   14d2a:	bf00      	nop
   14d2c:	200021dc 	.word	0x200021dc
   14d30:	20002214 	.word	0x20002214
   14d34:	20002210 	.word	0x20002210

00014d38 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   14d38:	b949      	cbnz	r1, 14d4e <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   14d3a:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   14d3e:	b930      	cbnz	r0, 14d4e <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   14d40:	4b05      	ldr	r3, [pc, #20]	; (14d58 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   14d42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   14d44:	689b      	ldr	r3, [r3, #8]
   14d46:	429a      	cmp	r2, r3
   14d48:	d001      	beq.n	14d4e <z_reschedule+0x16>
	ret = arch_swap(key);
   14d4a:	f7ef bd43 	b.w	47d4 <arch_swap>
   14d4e:	f381 8811 	msr	BASEPRI, r1
   14d52:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   14d56:	4770      	bx	lr
   14d58:	200021dc 	.word	0x200021dc

00014d5c <k_sched_lock>:
	__asm__ volatile(
   14d5c:	f04f 0320 	mov.w	r3, #32
   14d60:	f3ef 8111 	mrs	r1, BASEPRI
   14d64:	f383 8811 	msr	BASEPRI, r3
   14d68:	f3bf 8f6f 	isb	sy
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   14d6c:	4b04      	ldr	r3, [pc, #16]	; (14d80 <k_sched_lock+0x24>)
   14d6e:	689a      	ldr	r2, [r3, #8]
   14d70:	7bd3      	ldrb	r3, [r2, #15]
   14d72:	3b01      	subs	r3, #1
   14d74:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   14d76:	f381 8811 	msr	BASEPRI, r1
   14d7a:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   14d7e:	4770      	bx	lr
   14d80:	200021dc 	.word	0x200021dc

00014d84 <update_cache>:
{
   14d84:	b538      	push	{r3, r4, r5, lr}
	thread = _priq_run_best(&_kernel.ready_q.runq);
   14d86:	4c0d      	ldr	r4, [pc, #52]	; (14dbc <update_cache+0x38>)
{
   14d88:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
   14d8a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   14d8e:	f003 ffd2 	bl	18d36 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   14d92:	4605      	mov	r5, r0
   14d94:	b900      	cbnz	r0, 14d98 <update_cache+0x14>
   14d96:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   14d98:	68a3      	ldr	r3, [r4, #8]
   14d9a:	b94a      	cbnz	r2, 14db0 <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
   14d9c:	7b5a      	ldrb	r2, [r3, #13]
   14d9e:	06d2      	lsls	r2, r2, #27
   14da0:	d106      	bne.n	14db0 <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   14da2:	69aa      	ldr	r2, [r5, #24]
   14da4:	b922      	cbnz	r2, 14db0 <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(thread)) {
   14da6:	89da      	ldrh	r2, [r3, #14]
   14da8:	2a7f      	cmp	r2, #127	; 0x7f
   14daa:	d901      	bls.n	14db0 <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
   14dac:	6263      	str	r3, [r4, #36]	; 0x24
}
   14dae:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   14db0:	429d      	cmp	r5, r3
   14db2:	d001      	beq.n	14db8 <update_cache+0x34>
			z_reset_time_slice();
   14db4:	f7ff ff78 	bl	14ca8 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   14db8:	6265      	str	r5, [r4, #36]	; 0x24
}
   14dba:	e7f8      	b.n	14dae <update_cache+0x2a>
   14dbc:	200021dc 	.word	0x200021dc

00014dc0 <unready_thread>:
{
   14dc0:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   14dc2:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   14dc6:	7b43      	ldrb	r3, [r0, #13]
   14dc8:	2a00      	cmp	r2, #0
{
   14dca:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   14dcc:	da04      	bge.n	14dd8 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   14dce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   14dd2:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   14dd4:	f003 ff6a 	bl	18cac <sys_dlist_remove>
	update_cache(thread == _current);
   14dd8:	4b04      	ldr	r3, [pc, #16]	; (14dec <unready_thread+0x2c>)
   14dda:	6898      	ldr	r0, [r3, #8]
   14ddc:	1a43      	subs	r3, r0, r1
   14dde:	4258      	negs	r0, r3
   14de0:	4158      	adcs	r0, r3
}
   14de2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   14de6:	f7ff bfcd 	b.w	14d84 <update_cache>
   14dea:	bf00      	nop
   14dec:	200021dc 	.word	0x200021dc

00014df0 <pend>:
{
   14df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14df4:	4606      	mov	r6, r0
   14df6:	4614      	mov	r4, r2
   14df8:	461d      	mov	r5, r3
	__asm__ volatile(
   14dfa:	f04f 0320 	mov.w	r3, #32
   14dfe:	f3ef 8711 	mrs	r7, BASEPRI
   14e02:	f383 8811 	msr	BASEPRI, r3
   14e06:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   14e0a:	f003 ff9e 	bl	18d4a <add_to_waitq_locked>
	__asm__ volatile(
   14e0e:	f387 8811 	msr	BASEPRI, r7
   14e12:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   14e16:	1c6b      	adds	r3, r5, #1
   14e18:	bf08      	it	eq
   14e1a:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
   14e1e:	d008      	beq.n	14e32 <pend+0x42>

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   14e20:	4622      	mov	r2, r4
   14e22:	462b      	mov	r3, r5
   14e24:	f106 0018 	add.w	r0, r6, #24
   14e28:	4903      	ldr	r1, [pc, #12]	; (14e38 <pend+0x48>)
}
   14e2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   14e2e:	f000 bd8b 	b.w	15948 <z_add_timeout>
   14e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14e36:	bf00      	nop
   14e38:	00018dc5 	.word	0x00018dc5

00014e3c <z_pend_curr>:
{
   14e3c:	b510      	push	{r4, lr}
	pending_current = _current;
   14e3e:	4b07      	ldr	r3, [pc, #28]	; (14e5c <z_pend_curr+0x20>)
   14e40:	6898      	ldr	r0, [r3, #8]
   14e42:	4b07      	ldr	r3, [pc, #28]	; (14e60 <z_pend_curr+0x24>)
{
   14e44:	460c      	mov	r4, r1
	pending_current = _current;
   14e46:	6018      	str	r0, [r3, #0]
{
   14e48:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   14e4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   14e4e:	f7ff ffcf 	bl	14df0 <pend>
   14e52:	4620      	mov	r0, r4
}
   14e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   14e58:	f7ef bcbc 	b.w	47d4 <arch_swap>
   14e5c:	200021dc 	.word	0x200021dc
   14e60:	2000220c 	.word	0x2000220c

00014e64 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
   14e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14e68:	4605      	mov	r5, r0
   14e6a:	460f      	mov	r7, r1
		return 0;
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);

	expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   14e6c:	f004 f931 	bl	190d2 <sys_clock_tick_get_32>
   14e70:	4604      	mov	r4, r0
	__asm__ volatile(
   14e72:	f04f 0320 	mov.w	r3, #32
   14e76:	f3ef 8811 	mrs	r8, BASEPRI
   14e7a:	f383 8811 	msr	BASEPRI, r3
   14e7e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   14e82:	4e12      	ldr	r6, [pc, #72]	; (14ecc <z_tick_sleep.part.0+0x68>)
   14e84:	4b12      	ldr	r3, [pc, #72]	; (14ed0 <z_tick_sleep.part.0+0x6c>)
   14e86:	68b0      	ldr	r0, [r6, #8]
   14e88:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   14e8a:	f7ff ff99 	bl	14dc0 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   14e8e:	68b0      	ldr	r0, [r6, #8]
   14e90:	4910      	ldr	r1, [pc, #64]	; (14ed4 <z_tick_sleep.part.0+0x70>)
   14e92:	462a      	mov	r2, r5
   14e94:	463b      	mov	r3, r7
   14e96:	3018      	adds	r0, #24
   14e98:	f000 fd56 	bl	15948 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   14e9c:	68b2      	ldr	r2, [r6, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   14e9e:	7b53      	ldrb	r3, [r2, #13]
   14ea0:	f043 0310 	orr.w	r3, r3, #16
   14ea4:	7353      	strb	r3, [r2, #13]
   14ea6:	4640      	mov	r0, r8
   14ea8:	f7ef fc94 	bl	47d4 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   14eac:	f004 f911 	bl	190d2 <sys_clock_tick_get_32>
	expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   14eb0:	442c      	add	r4, r5
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   14eb2:	1a24      	subs	r4, r4, r0
   14eb4:	f04f 0500 	mov.w	r5, #0
   14eb8:	f165 0500 	sbc.w	r5, r5, #0
   14ebc:	2c00      	cmp	r4, #0
   14ebe:	f175 0300 	sbcs.w	r3, r5, #0
   14ec2:	bfb8      	it	lt
   14ec4:	2400      	movlt	r4, #0
		return ticks;
	}
#endif

	return 0;
}
   14ec6:	4620      	mov	r0, r4
   14ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14ecc:	200021dc 	.word	0x200021dc
   14ed0:	2000220c 	.word	0x2000220c
   14ed4:	00018dc5 	.word	0x00018dc5

00014ed8 <z_impl_k_thread_suspend>:
{
   14ed8:	b570      	push	{r4, r5, r6, lr}
   14eda:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   14edc:	3018      	adds	r0, #24
   14ede:	f004 f8b8 	bl	19052 <z_abort_timeout>
   14ee2:	f04f 0320 	mov.w	r3, #32
   14ee6:	f3ef 8611 	mrs	r6, BASEPRI
   14eea:	f383 8811 	msr	BASEPRI, r3
   14eee:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   14ef2:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   14ef6:	7b63      	ldrb	r3, [r4, #13]
   14ef8:	2a00      	cmp	r2, #0
   14efa:	da05      	bge.n	14f08 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   14efc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   14f00:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   14f02:	4620      	mov	r0, r4
   14f04:	f003 fed2 	bl	18cac <sys_dlist_remove>
		update_cache(thread == _current);
   14f08:	4d0b      	ldr	r5, [pc, #44]	; (14f38 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   14f0a:	7b63      	ldrb	r3, [r4, #13]
   14f0c:	68a8      	ldr	r0, [r5, #8]
   14f0e:	f043 0310 	orr.w	r3, r3, #16
   14f12:	7363      	strb	r3, [r4, #13]
   14f14:	1b03      	subs	r3, r0, r4
   14f16:	4258      	negs	r0, r3
   14f18:	4158      	adcs	r0, r3
   14f1a:	f7ff ff33 	bl	14d84 <update_cache>
	__asm__ volatile(
   14f1e:	f386 8811 	msr	BASEPRI, r6
   14f22:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   14f26:	68ab      	ldr	r3, [r5, #8]
   14f28:	42a3      	cmp	r3, r4
   14f2a:	d103      	bne.n	14f34 <z_impl_k_thread_suspend+0x5c>
}
   14f2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   14f30:	f003 bef7 	b.w	18d22 <z_reschedule_unlocked>
}
   14f34:	bd70      	pop	{r4, r5, r6, pc}
   14f36:	bf00      	nop
   14f38:	200021dc 	.word	0x200021dc

00014f3c <k_sched_unlock>:
{
   14f3c:	b510      	push	{r4, lr}
	__asm__ volatile(
   14f3e:	f04f 0320 	mov.w	r3, #32
   14f42:	f3ef 8411 	mrs	r4, BASEPRI
   14f46:	f383 8811 	msr	BASEPRI, r3
   14f4a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   14f4e:	4b08      	ldr	r3, [pc, #32]	; (14f70 <k_sched_unlock+0x34>)
   14f50:	689a      	ldr	r2, [r3, #8]
   14f52:	7bd3      	ldrb	r3, [r2, #15]
   14f54:	3301      	adds	r3, #1
   14f56:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   14f58:	2000      	movs	r0, #0
   14f5a:	f7ff ff13 	bl	14d84 <update_cache>
	__asm__ volatile(
   14f5e:	f384 8811 	msr	BASEPRI, r4
   14f62:	f3bf 8f6f 	isb	sy
}
   14f66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   14f6a:	f003 beda 	b.w	18d22 <z_reschedule_unlocked>
   14f6e:	bf00      	nop
   14f70:	200021dc 	.word	0x200021dc

00014f74 <move_thread_to_end_of_prio_q>:
{
   14f74:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   14f76:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   14f7a:	7b43      	ldrb	r3, [r0, #13]
   14f7c:	2a00      	cmp	r2, #0
{
   14f7e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   14f80:	da04      	bge.n	14f8c <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   14f82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   14f86:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   14f88:	f003 fe90 	bl	18cac <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   14f8c:	7b4b      	ldrb	r3, [r1, #13]
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   14f8e:	4a17      	ldr	r2, [pc, #92]	; (14fec <move_thread_to_end_of_prio_q+0x78>)
   14f90:	f063 037f 	orn	r3, r3, #127	; 0x7f
   14f94:	4610      	mov	r0, r2
   14f96:	734b      	strb	r3, [r1, #13]
   14f98:	f850 3f28 	ldr.w	r3, [r0, #40]!
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   14f9c:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14f9e:	4283      	cmp	r3, r0
   14fa0:	bf08      	it	eq
   14fa2:	2300      	moveq	r3, #0
   14fa4:	2b00      	cmp	r3, #0
   14fa6:	bf38      	it	cc
   14fa8:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14faa:	b1cb      	cbz	r3, 14fe0 <move_thread_to_end_of_prio_q+0x6c>
	int32_t b1 = thread_1->base.prio;
   14fac:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   14fb0:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
   14fb4:	42a6      	cmp	r6, r4
   14fb6:	d00f      	beq.n	14fd8 <move_thread_to_end_of_prio_q+0x64>
		return b2 - b1;
   14fb8:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   14fba:	2c00      	cmp	r4, #0
   14fbc:	dd0c      	ble.n	14fd8 <move_thread_to_end_of_prio_q+0x64>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   14fbe:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   14fc0:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   14fc4:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   14fc6:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   14fc8:	6890      	ldr	r0, [r2, #8]
   14fca:	1a43      	subs	r3, r0, r1
   14fcc:	4258      	negs	r0, r3
}
   14fce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   14fd2:	4158      	adcs	r0, r3
   14fd4:	f7ff bed6 	b.w	14d84 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   14fd8:	42ab      	cmp	r3, r5
   14fda:	d001      	beq.n	14fe0 <move_thread_to_end_of_prio_q+0x6c>
   14fdc:	681b      	ldr	r3, [r3, #0]
   14fde:	e7e4      	b.n	14faa <move_thread_to_end_of_prio_q+0x36>
	node->prev = tail;
   14fe0:	e9c1 0500 	strd	r0, r5, [r1]
	tail->next = node;
   14fe4:	6029      	str	r1, [r5, #0]
	list->tail = node;
   14fe6:	62d1      	str	r1, [r2, #44]	; 0x2c
}
   14fe8:	e7ee      	b.n	14fc8 <move_thread_to_end_of_prio_q+0x54>
   14fea:	bf00      	nop
   14fec:	200021dc 	.word	0x200021dc

00014ff0 <z_time_slice>:
{
   14ff0:	b570      	push	{r4, r5, r6, lr}
   14ff2:	4601      	mov	r1, r0
	__asm__ volatile(
   14ff4:	f04f 0320 	mov.w	r3, #32
   14ff8:	f3ef 8411 	mrs	r4, BASEPRI
   14ffc:	f383 8811 	msr	BASEPRI, r3
   15000:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   15004:	4b16      	ldr	r3, [pc, #88]	; (15060 <z_time_slice+0x70>)
   15006:	4a17      	ldr	r2, [pc, #92]	; (15064 <z_time_slice+0x74>)
   15008:	6898      	ldr	r0, [r3, #8]
   1500a:	6815      	ldr	r5, [r2, #0]
   1500c:	42a8      	cmp	r0, r5
   1500e:	461d      	mov	r5, r3
   15010:	d106      	bne.n	15020 <z_time_slice+0x30>
			z_reset_time_slice();
   15012:	f7ff fe49 	bl	14ca8 <z_reset_time_slice>
	__asm__ volatile(
   15016:	f384 8811 	msr	BASEPRI, r4
   1501a:	f3bf 8f6f 	isb	sy
}
   1501e:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   15020:	2600      	movs	r6, #0
   15022:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   15024:	4a10      	ldr	r2, [pc, #64]	; (15068 <z_time_slice+0x78>)
   15026:	6812      	ldr	r2, [r2, #0]
   15028:	b1ba      	cbz	r2, 1505a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1502a:	89c2      	ldrh	r2, [r0, #14]
   1502c:	2a7f      	cmp	r2, #127	; 0x7f
   1502e:	d814      	bhi.n	1505a <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   15030:	7b42      	ldrb	r2, [r0, #13]
   15032:	06d2      	lsls	r2, r2, #27
   15034:	d111      	bne.n	1505a <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   15036:	4a0d      	ldr	r2, [pc, #52]	; (1506c <z_time_slice+0x7c>)
   15038:	f990 600e 	ldrsb.w	r6, [r0, #14]
   1503c:	6812      	ldr	r2, [r2, #0]
   1503e:	4296      	cmp	r6, r2
   15040:	db0b      	blt.n	1505a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   15042:	4a0b      	ldr	r2, [pc, #44]	; (15070 <z_time_slice+0x80>)
   15044:	4290      	cmp	r0, r2
   15046:	d008      	beq.n	1505a <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   15048:	691a      	ldr	r2, [r3, #16]
   1504a:	428a      	cmp	r2, r1
   1504c:	dc02      	bgt.n	15054 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
   1504e:	f7ff ff91 	bl	14f74 <move_thread_to_end_of_prio_q>
   15052:	e7de      	b.n	15012 <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
   15054:	1a52      	subs	r2, r2, r1
   15056:	611a      	str	r2, [r3, #16]
   15058:	e7dd      	b.n	15016 <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
   1505a:	2300      	movs	r3, #0
   1505c:	612b      	str	r3, [r5, #16]
   1505e:	e7da      	b.n	15016 <z_time_slice+0x26>
   15060:	200021dc 	.word	0x200021dc
   15064:	2000220c 	.word	0x2000220c
   15068:	20002214 	.word	0x20002214
   1506c:	20002210 	.word	0x20002210
   15070:	20000dd0 	.word	0x20000dd0

00015074 <ready_thread>:
{
   15074:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   15076:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1507a:	7b42      	ldrb	r2, [r0, #13]
   1507c:	2b00      	cmp	r3, #0
   1507e:	db2d      	blt.n	150dc <ready_thread+0x68>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   15080:	06d3      	lsls	r3, r2, #27
   15082:	d12b      	bne.n	150dc <ready_thread+0x68>
	return !sys_dnode_is_linked(&to->node);
   15084:	6983      	ldr	r3, [r0, #24]
   15086:	bb4b      	cbnz	r3, 150dc <ready_thread+0x68>
	return list->head == list;
   15088:	4915      	ldr	r1, [pc, #84]	; (150e0 <ready_thread+0x6c>)
	thread->base.thread_state |= _THREAD_QUEUED;
   1508a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1508e:	7342      	strb	r2, [r0, #13]
   15090:	460a      	mov	r2, r1
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   15092:	6acd      	ldr	r5, [r1, #44]	; 0x2c
	return list->head == list;
   15094:	f852 4f28 	ldr.w	r4, [r2, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15098:	4294      	cmp	r4, r2
   1509a:	bf18      	it	ne
   1509c:	4623      	movne	r3, r4
   1509e:	2b00      	cmp	r3, #0
   150a0:	bf38      	it	cc
   150a2:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   150a4:	b1ab      	cbz	r3, 150d2 <ready_thread+0x5e>
	int32_t b1 = thread_1->base.prio;
   150a6:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   150aa:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
   150ae:	42a6      	cmp	r6, r4
   150b0:	d00b      	beq.n	150ca <ready_thread+0x56>
		return b2 - b1;
   150b2:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   150b4:	2c00      	cmp	r4, #0
   150b6:	dd08      	ble.n	150ca <ready_thread+0x56>
	sys_dnode_t *const prev = successor->prev;
   150b8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   150ba:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   150be:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   150c0:	6058      	str	r0, [r3, #4]
}
   150c2:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   150c4:	2000      	movs	r0, #0
   150c6:	f7ff be5d 	b.w	14d84 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   150ca:	42ab      	cmp	r3, r5
   150cc:	d001      	beq.n	150d2 <ready_thread+0x5e>
   150ce:	681b      	ldr	r3, [r3, #0]
   150d0:	e7e8      	b.n	150a4 <ready_thread+0x30>
	node->prev = tail;
   150d2:	e9c0 2500 	strd	r2, r5, [r0]
	tail->next = node;
   150d6:	6028      	str	r0, [r5, #0]
	list->tail = node;
   150d8:	62c8      	str	r0, [r1, #44]	; 0x2c
}
   150da:	e7f2      	b.n	150c2 <ready_thread+0x4e>
}
   150dc:	bc70      	pop	{r4, r5, r6}
   150de:	4770      	bx	lr
   150e0:	200021dc 	.word	0x200021dc

000150e4 <z_sched_start>:
{
   150e4:	b510      	push	{r4, lr}
	__asm__ volatile(
   150e6:	f04f 0220 	mov.w	r2, #32
   150ea:	f3ef 8411 	mrs	r4, BASEPRI
   150ee:	f382 8811 	msr	BASEPRI, r2
   150f2:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   150f6:	7b42      	ldrb	r2, [r0, #13]
   150f8:	0751      	lsls	r1, r2, #29
   150fa:	d404      	bmi.n	15106 <z_sched_start+0x22>
	__asm__ volatile(
   150fc:	f384 8811 	msr	BASEPRI, r4
   15100:	f3bf 8f6f 	isb	sy
}
   15104:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   15106:	f022 0204 	bic.w	r2, r2, #4
   1510a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1510c:	f7ff ffb2 	bl	15074 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   15110:	4621      	mov	r1, r4
   15112:	4802      	ldr	r0, [pc, #8]	; (1511c <z_sched_start+0x38>)
}
   15114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   15118:	f7ff be0e 	b.w	14d38 <z_reschedule>
   1511c:	20002259 	.word	0x20002259

00015120 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   15120:	4b04      	ldr	r3, [pc, #16]	; (15134 <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   15122:	2100      	movs	r1, #0
   15124:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   15128:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   1512c:	4608      	mov	r0, r1
   1512e:	f7ff bdd1 	b.w	14cd4 <k_sched_time_slice_set>
   15132:	bf00      	nop
   15134:	200021dc 	.word	0x200021dc

00015138 <z_impl_k_yield>:
	if (!z_is_idle_thread_object(_current)) {
   15138:	4926      	ldr	r1, [pc, #152]	; (151d4 <z_impl_k_yield+0x9c>)
{
   1513a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   1513c:	688a      	ldr	r2, [r1, #8]
   1513e:	4b26      	ldr	r3, [pc, #152]	; (151d8 <z_impl_k_yield+0xa0>)
   15140:	429a      	cmp	r2, r3
   15142:	d03d      	beq.n	151c0 <z_impl_k_yield+0x88>
	__asm__ volatile(
   15144:	f04f 0320 	mov.w	r3, #32
   15148:	f3ef 8511 	mrs	r5, BASEPRI
   1514c:	f383 8811 	msr	BASEPRI, r3
   15150:	f3bf 8f6f 	isb	sy
			dequeue_thread(&_kernel.ready_q.runq,
   15154:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   15156:	7b43      	ldrb	r3, [r0, #13]
   15158:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1515c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1515e:	f003 fda5 	bl	18cac <sys_dlist_remove>
		queue_thread(&_kernel.ready_q.runq, _current);
   15162:	688a      	ldr	r2, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   15164:	7b53      	ldrb	r3, [r2, #13]
	return list->head == list;
   15166:	4608      	mov	r0, r1
   15168:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1516c:	7353      	strb	r3, [r2, #13]
   1516e:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   15172:	6ace      	ldr	r6, [r1, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15174:	4283      	cmp	r3, r0
   15176:	bf08      	it	eq
   15178:	2300      	moveq	r3, #0
   1517a:	2b00      	cmp	r3, #0
   1517c:	bf38      	it	cc
   1517e:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15180:	b1cb      	cbz	r3, 151b6 <z_impl_k_yield+0x7e>
	int32_t b1 = thread_1->base.prio;
   15182:	f992 700e 	ldrsb.w	r7, [r2, #14]
	int32_t b2 = thread_2->base.prio;
   15186:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
   1518a:	42a7      	cmp	r7, r4
   1518c:	d00f      	beq.n	151ae <z_impl_k_yield+0x76>
		return b2 - b1;
   1518e:	1be4      	subs	r4, r4, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   15190:	2c00      	cmp	r4, #0
   15192:	dd0c      	ble.n	151ae <z_impl_k_yield+0x76>
	sys_dnode_t *const prev = successor->prev;
   15194:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   15196:	e9c2 3100 	strd	r3, r1, [r2]
	prev->next = node;
   1519a:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   1519c:	605a      	str	r2, [r3, #4]
		update_cache(1);
   1519e:	2001      	movs	r0, #1
   151a0:	f7ff fdf0 	bl	14d84 <update_cache>
   151a4:	4628      	mov	r0, r5
}
   151a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   151aa:	f7ef bb13 	b.w	47d4 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   151ae:	42b3      	cmp	r3, r6
   151b0:	d001      	beq.n	151b6 <z_impl_k_yield+0x7e>
   151b2:	681b      	ldr	r3, [r3, #0]
   151b4:	e7e4      	b.n	15180 <z_impl_k_yield+0x48>
	node->prev = tail;
   151b6:	e9c2 0600 	strd	r0, r6, [r2]
	tail->next = node;
   151ba:	6032      	str	r2, [r6, #0]
	list->tail = node;
   151bc:	62ca      	str	r2, [r1, #44]	; 0x2c
}
   151be:	e7ee      	b.n	1519e <z_impl_k_yield+0x66>
   151c0:	f04f 0320 	mov.w	r3, #32
   151c4:	f3ef 8011 	mrs	r0, BASEPRI
   151c8:	f383 8811 	msr	BASEPRI, r3
   151cc:	f3bf 8f6f 	isb	sy
   151d0:	e7e9      	b.n	151a6 <z_impl_k_yield+0x6e>
   151d2:	bf00      	nop
   151d4:	200021dc 	.word	0x200021dc
   151d8:	20000dd0 	.word	0x20000dd0

000151dc <z_impl_k_sleep>:

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   151dc:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   151e0:	bf08      	it	eq
   151e2:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   151e6:	b508      	push	{r3, lr}
   151e8:	4602      	mov	r2, r0
   151ea:	460b      	mov	r3, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   151ec:	d106      	bne.n	151fc <z_impl_k_sleep+0x20>
		k_thread_suspend(_current);
   151ee:	4b0b      	ldr	r3, [pc, #44]	; (1521c <z_impl_k_sleep+0x40>)
   151f0:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   151f2:	f7ff fe71 	bl	14ed8 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   151f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   151fa:	bd08      	pop	{r3, pc}
	if (ticks == 0) {
   151fc:	4313      	orrs	r3, r2
   151fe:	d10a      	bne.n	15216 <z_impl_k_sleep+0x3a>
	z_impl_k_yield();
   15200:	f7ff ff9a 	bl	15138 <z_impl_k_yield>
		return 0;
   15204:	2000      	movs	r0, #0
			return (t * to_hz + off) / from_hz;
   15206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1520a:	fb80 2303 	smull	r2, r3, r0, r3
   1520e:	0bd0      	lsrs	r0, r2, #15
   15210:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   15214:	e7f1      	b.n	151fa <z_impl_k_sleep+0x1e>
   15216:	f7ff fe25 	bl	14e64 <z_tick_sleep.part.0>
   1521a:	e7f4      	b.n	15206 <z_impl_k_sleep+0x2a>
   1521c:	200021dc 	.word	0x200021dc

00015220 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   15220:	4b01      	ldr	r3, [pc, #4]	; (15228 <z_impl_k_current_get+0x8>)
   15222:	6898      	ldr	r0, [r3, #8]
   15224:	4770      	bx	lr
   15226:	bf00      	nop
   15228:	200021dc 	.word	0x200021dc

0001522c <z_impl_k_is_preempt_thread>:
   1522c:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/k_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   15230:	b93b      	cbnz	r3, 15242 <z_impl_k_is_preempt_thread+0x16>
   15232:	4b05      	ldr	r3, [pc, #20]	; (15248 <z_impl_k_is_preempt_thread+0x1c>)
   15234:	689b      	ldr	r3, [r3, #8]
   15236:	89d8      	ldrh	r0, [r3, #14]
   15238:	287f      	cmp	r0, #127	; 0x7f
   1523a:	bf8c      	ite	hi
   1523c:	2000      	movhi	r0, #0
   1523e:	2001      	movls	r0, #1
   15240:	4770      	bx	lr
   15242:	2000      	movs	r0, #0
}
   15244:	4770      	bx	lr
   15246:	bf00      	nop
   15248:	200021dc 	.word	0x200021dc

0001524c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   1524c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15250:	4604      	mov	r4, r0
   15252:	f04f 0320 	mov.w	r3, #32
   15256:	f3ef 8611 	mrs	r6, BASEPRI
   1525a:	f383 8811 	msr	BASEPRI, r3
   1525e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   15262:	7b43      	ldrb	r3, [r0, #13]
   15264:	071a      	lsls	r2, r3, #28
   15266:	d505      	bpl.n	15274 <z_thread_abort+0x28>
	__asm__ volatile(
   15268:	f386 8811 	msr	BASEPRI, r6
   1526c:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   15270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   15274:	f023 0220 	bic.w	r2, r3, #32
   15278:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   1527c:	09d2      	lsrs	r2, r2, #7
   1527e:	d120      	bne.n	152c2 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   15280:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   15282:	68a3      	ldr	r3, [r4, #8]
   15284:	b113      	cbz	r3, 1528c <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   15286:	4620      	mov	r0, r4
   15288:	f003 fd18 	bl	18cbc <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   1528c:	f104 0018 	add.w	r0, r4, #24
   15290:	f003 fedf 	bl	19052 <z_abort_timeout>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   15294:	f104 0758 	add.w	r7, r4, #88	; 0x58
   15298:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   1529c:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1529e:	42bd      	cmp	r5, r7
   152a0:	d000      	beq.n	152a4 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   152a2:	b9b5      	cbnz	r5, 152d2 <z_thread_abort+0x86>
		update_cache(1);
   152a4:	2001      	movs	r0, #1
   152a6:	f7ff fd6d 	bl	14d84 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   152aa:	4b10      	ldr	r3, [pc, #64]	; (152ec <z_thread_abort+0xa0>)
   152ac:	689b      	ldr	r3, [r3, #8]
   152ae:	42a3      	cmp	r3, r4
   152b0:	d1da      	bne.n	15268 <z_thread_abort+0x1c>
   152b2:	f3ef 8305 	mrs	r3, IPSR
   152b6:	2b00      	cmp	r3, #0
   152b8:	d1d6      	bne.n	15268 <z_thread_abort+0x1c>
   152ba:	4630      	mov	r0, r6
   152bc:	f7ef fa8a 	bl	47d4 <arch_swap>
	return ret;
   152c0:	e7d2      	b.n	15268 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   152c2:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   152c6:	f043 0308 	orr.w	r3, r3, #8
   152ca:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   152cc:	f003 fcee 	bl	18cac <sys_dlist_remove>
}
   152d0:	e7d7      	b.n	15282 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   152d2:	4628      	mov	r0, r5
   152d4:	f003 fcf2 	bl	18cbc <unpend_thread_no_timeout>
   152d8:	f105 0018 	add.w	r0, r5, #24
   152dc:	f003 feb9 	bl	19052 <z_abort_timeout>
   152e0:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   152e4:	4628      	mov	r0, r5
   152e6:	f7ff fec5 	bl	15074 <ready_thread>
   152ea:	e7d7      	b.n	1529c <z_thread_abort+0x50>
   152ec:	200021dc 	.word	0x200021dc

000152f0 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   152f0:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   152f2:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   152f6:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   152f8:	e9cd 6700 	strd	r6, r7, [sp]
   152fc:	f7ff fd9e 	bl	14e3c <z_pend_curr>

	if (data != NULL) {
   15300:	b11c      	cbz	r4, 1530a <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   15302:	4b03      	ldr	r3, [pc, #12]	; (15310 <z_sched_wait+0x20>)
   15304:	689b      	ldr	r3, [r3, #8]
   15306:	695b      	ldr	r3, [r3, #20]
   15308:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1530a:	b002      	add	sp, #8
   1530c:	bdd0      	pop	{r4, r6, r7, pc}
   1530e:	bf00      	nop
   15310:	200021dc 	.word	0x200021dc

00015314 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   15314:	b538      	push	{r3, r4, r5, lr}
   15316:	4604      	mov	r4, r0
	__asm__ volatile(
   15318:	f04f 0320 	mov.w	r3, #32
   1531c:	f3ef 8511 	mrs	r5, BASEPRI
   15320:	f383 8811 	msr	BASEPRI, r3
   15324:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   15328:	f003 fd6e 	bl	18e08 <z_unpend_first_thread>

	if (thread != NULL) {
   1532c:	b148      	cbz	r0, 15342 <z_impl_k_sem_give+0x2e>
   1532e:	2200      	movs	r2, #0
   15330:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   15332:	f003 fd37 	bl	18da4 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   15336:	4629      	mov	r1, r5
   15338:	4808      	ldr	r0, [pc, #32]	; (1535c <z_impl_k_sem_give+0x48>)
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   1533a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1533e:	f7ff bcfb 	b.w	14d38 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   15342:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   15346:	429a      	cmp	r2, r3
   15348:	bf18      	it	ne
   1534a:	3301      	addne	r3, #1
   1534c:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1534e:	2102      	movs	r1, #2
   15350:	f104 0010 	add.w	r0, r4, #16
   15354:	f004 f818 	bl	19388 <z_handle_obj_poll_events>
}
   15358:	e7ed      	b.n	15336 <z_impl_k_sem_give+0x22>
   1535a:	bf00      	nop
   1535c:	20002259 	.word	0x20002259

00015360 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   15360:	b537      	push	{r0, r1, r2, r4, r5, lr}
   15362:	4614      	mov	r4, r2
   15364:	461d      	mov	r5, r3
   15366:	f04f 0320 	mov.w	r3, #32
   1536a:	f3ef 8111 	mrs	r1, BASEPRI
   1536e:	f383 8811 	msr	BASEPRI, r3
   15372:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   15376:	6883      	ldr	r3, [r0, #8]
   15378:	b143      	cbz	r3, 1538c <z_impl_k_sem_take+0x2c>
		sem->count--;
   1537a:	3b01      	subs	r3, #1
   1537c:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   1537e:	f381 8811 	msr	BASEPRI, r1
   15382:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   15386:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   15388:	b003      	add	sp, #12
   1538a:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1538c:	ea54 0305 	orrs.w	r3, r4, r5
   15390:	d106      	bne.n	153a0 <z_impl_k_sem_take+0x40>
   15392:	f381 8811 	msr	BASEPRI, r1
   15396:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1539a:	f06f 000f 	mvn.w	r0, #15
   1539e:	e7f3      	b.n	15388 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   153a0:	4602      	mov	r2, r0
   153a2:	e9cd 4500 	strd	r4, r5, [sp]
   153a6:	4802      	ldr	r0, [pc, #8]	; (153b0 <z_impl_k_sem_take+0x50>)
   153a8:	f7ff fd48 	bl	14e3c <z_pend_curr>
	return ret;
   153ac:	e7ec      	b.n	15388 <z_impl_k_sem_take+0x28>
   153ae:	bf00      	nop
   153b0:	20002259 	.word	0x20002259

000153b4 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   153b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   153b6:	4b09      	ldr	r3, [pc, #36]	; (153dc <k_sys_work_q_init+0x28>)
   153b8:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   153ba:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   153bc:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   153be:	9300      	str	r3, [sp, #0]
   153c0:	4907      	ldr	r1, [pc, #28]	; (153e0 <k_sys_work_q_init+0x2c>)
   153c2:	4808      	ldr	r0, [pc, #32]	; (153e4 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   153c4:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   153c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   153cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
   153d0:	f000 f9de 	bl	15790 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   153d4:	4620      	mov	r0, r4
   153d6:	b004      	add	sp, #16
   153d8:	bd10      	pop	{r4, pc}
   153da:	bf00      	nop
   153dc:	0001a962 	.word	0x0001a962
   153e0:	20003a80 	.word	0x20003a80
   153e4:	20000ed0 	.word	0x20000ed0

000153e8 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   153e8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   153ec:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   153ee:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   153f0:	2604      	movs	r6, #4
   153f2:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   153f4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   153f6:	7386      	strb	r6, [r0, #14]
	sys_dlist_init(&w->waitq);
   153f8:	f100 0558 	add.w	r5, r0, #88	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   153fc:	1dd6      	adds	r6, r2, #7
	list->tail = (sys_dnode_t *)list;
   153fe:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   15402:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   15404:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   15406:	f026 0607 	bic.w	r6, r6, #7
	node->prev = NULL;
   1540a:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   1540e:	e9c0 161a 	strd	r1, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   15412:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   15414:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   15416:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   15418:	9202      	str	r2, [sp, #8]
   1541a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1541c:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   1541e:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   15422:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   15424:	9200      	str	r2, [sp, #0]
   15426:	4642      	mov	r2, r8
{
   15428:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1542a:	f7ef fa79 	bl	4920 <arch_new_thread>
	if (!_current) {
   1542e:	4b05      	ldr	r3, [pc, #20]	; (15444 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
   15430:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   15432:	689b      	ldr	r3, [r3, #8]
   15434:	b103      	cbz	r3, 15438 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
   15436:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   15438:	6763      	str	r3, [r4, #116]	; 0x74
}
   1543a:	4640      	mov	r0, r8
   1543c:	b004      	add	sp, #16
   1543e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15442:	bf00      	nop
   15444:	200021dc 	.word	0x200021dc

00015448 <z_impl_k_thread_create>:
{
   15448:	b5f0      	push	{r4, r5, r6, r7, lr}
   1544a:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1544c:	2500      	movs	r5, #0
   1544e:	9505      	str	r5, [sp, #20]
   15450:	9d10      	ldr	r5, [sp, #64]	; 0x40
   15452:	9504      	str	r5, [sp, #16]
   15454:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   15456:	9503      	str	r5, [sp, #12]
   15458:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1545a:	9502      	str	r5, [sp, #8]
{
   1545c:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   15460:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   15462:	9501      	str	r5, [sp, #4]
   15464:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   15466:	9500      	str	r5, [sp, #0]
{
   15468:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1546a:	f7ff ffbd 	bl	153e8 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1546e:	1c7b      	adds	r3, r7, #1
   15470:	bf08      	it	eq
   15472:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   15476:	d005      	beq.n	15484 <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   15478:	ea56 0307 	orrs.w	r3, r6, r7
   1547c:	d105      	bne.n	1548a <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   1547e:	4620      	mov	r0, r4
   15480:	f7ff fe30 	bl	150e4 <z_sched_start>
}
   15484:	4620      	mov	r0, r4
   15486:	b007      	add	sp, #28
   15488:	bdf0      	pop	{r4, r5, r6, r7, pc}
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1548a:	4904      	ldr	r1, [pc, #16]	; (1549c <z_impl_k_thread_create+0x54>)
   1548c:	4632      	mov	r2, r6
   1548e:	463b      	mov	r3, r7
   15490:	f104 0018 	add.w	r0, r4, #24
   15494:	f000 fa58 	bl	15948 <z_add_timeout>
   15498:	e7f4      	b.n	15484 <z_impl_k_thread_create+0x3c>
   1549a:	bf00      	nop
   1549c:	00018dc5 	.word	0x00018dc5

000154a0 <z_init_static_threads>:
{
   154a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   154a4:	4e2a      	ldr	r6, [pc, #168]	; (15550 <z_init_static_threads+0xb0>)
   154a6:	4d2b      	ldr	r5, [pc, #172]	; (15554 <z_init_static_threads+0xb4>)
{
   154a8:	b086      	sub	sp, #24
   154aa:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
   154ac:	42b5      	cmp	r5, r6
   154ae:	f105 0430 	add.w	r4, r5, #48	; 0x30
   154b2:	d310      	bcc.n	154d6 <z_init_static_threads+0x36>
	k_sched_lock();
   154b4:	f7ff fc52 	bl	14d5c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   154b8:	4c26      	ldr	r4, [pc, #152]	; (15554 <z_init_static_threads+0xb4>)
   154ba:	f8df a09c 	ldr.w	sl, [pc, #156]	; 15558 <z_init_static_threads+0xb8>
   154be:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   154c2:	f240 36e7 	movw	r6, #999	; 0x3e7
   154c6:	2700      	movs	r7, #0
   154c8:	4544      	cmp	r4, r8
   154ca:	d321      	bcc.n	15510 <z_init_static_threads+0x70>
}
   154cc:	b006      	add	sp, #24
   154ce:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   154d2:	f7ff bd33 	b.w	14f3c <k_sched_unlock>
		z_setup_new_thread(
   154d6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   154da:	9305      	str	r3, [sp, #20]
   154dc:	f854 3c10 	ldr.w	r3, [r4, #-16]
   154e0:	9304      	str	r3, [sp, #16]
   154e2:	f854 3c14 	ldr.w	r3, [r4, #-20]
   154e6:	9303      	str	r3, [sp, #12]
   154e8:	f854 3c18 	ldr.w	r3, [r4, #-24]
   154ec:	9302      	str	r3, [sp, #8]
   154ee:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   154f2:	9301      	str	r3, [sp, #4]
   154f4:	f854 3c20 	ldr.w	r3, [r4, #-32]
   154f8:	9300      	str	r3, [sp, #0]
   154fa:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   154fe:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   15502:	f7ff ff71 	bl	153e8 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   15506:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1550a:	655d      	str	r5, [r3, #84]	; 0x54
   1550c:	4625      	mov	r5, r4
   1550e:	e7cd      	b.n	154ac <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   15510:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15512:	1c5a      	adds	r2, r3, #1
   15514:	d00d      	beq.n	15532 <z_init_static_threads+0x92>
					    K_MSEC(thread_data->init_delay));
   15516:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1551a:	4630      	mov	r0, r6
   1551c:	4639      	mov	r1, r7
   1551e:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   15522:	42b9      	cmp	r1, r7
   15524:	bf08      	it	eq
   15526:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
   15528:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1552a:	d104      	bne.n	15536 <z_init_static_threads+0x96>
	z_sched_start(thread);
   1552c:	4628      	mov	r0, r5
   1552e:	f7ff fdd9 	bl	150e4 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   15532:	3430      	adds	r4, #48	; 0x30
   15534:	e7c8      	b.n	154c8 <z_init_static_threads+0x28>
   15536:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1553a:	2300      	movs	r3, #0
   1553c:	f7ea fde0 	bl	100 <__aeabi_uldivmod>
   15540:	4602      	mov	r2, r0
   15542:	460b      	mov	r3, r1
   15544:	f105 0018 	add.w	r0, r5, #24
   15548:	4651      	mov	r1, sl
   1554a:	f000 f9fd 	bl	15948 <z_add_timeout>
   1554e:	e7f0      	b.n	15532 <z_init_static_threads+0x92>
   15550:	20000604 	.word	0x20000604
   15554:	20000604 	.word	0x20000604
   15558:	00018dc5 	.word	0x00018dc5

0001555c <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
   1555c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1555e:	68c3      	ldr	r3, [r0, #12]
   15560:	079a      	lsls	r2, r3, #30
{
   15562:	4604      	mov	r4, r0
   15564:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   15566:	f3c3 0540 	ubfx	r5, r3, #1, #1
   1556a:	d41f      	bmi.n	155ac <submit_to_queue_locked+0x50>
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   1556c:	075f      	lsls	r7, r3, #29
   1556e:	d41f      	bmi.n	155b0 <submit_to_queue_locked+0x54>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
   15570:	680a      	ldr	r2, [r1, #0]
   15572:	b90a      	cbnz	r2, 15578 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   15574:	6882      	ldr	r2, [r0, #8]
   15576:	600a      	str	r2, [r1, #0]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   15578:	07d8      	lsls	r0, r3, #31
			__ASSERT_NO_MSG(work->queue != NULL);
			*queuep = work->queue;
   1557a:	bf44      	itt	mi
   1557c:	68a3      	ldrmi	r3, [r4, #8]
   1557e:	6033      	strmi	r3, [r6, #0]
			ret = 2;
		}

		int rc = queue_submit_locked(*queuep, work);
   15580:	6837      	ldr	r7, [r6, #0]
			ret = 2;
   15582:	bf4c      	ite	mi
   15584:	2502      	movmi	r5, #2
		ret = 1;
   15586:	2501      	movpl	r5, #1
	if (queue == NULL) {
   15588:	b37f      	cbz	r7, 155ea <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1558a:	4b1b      	ldr	r3, [pc, #108]	; (155f8 <submit_to_queue_locked+0x9c>)
   1558c:	689b      	ldr	r3, [r3, #8]
   1558e:	42bb      	cmp	r3, r7
   15590:	d111      	bne.n	155b6 <submit_to_queue_locked+0x5a>
   15592:	f003 fc8e 	bl	18eb2 <k_is_in_isr>
   15596:	f080 0001 	eor.w	r0, r0, #1
   1559a:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
   1559c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   155a0:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   155a2:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   155a6:	d523      	bpl.n	155f0 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   155a8:	b13a      	cbz	r2, 155ba <submit_to_queue_locked+0x5e>
   155aa:	b940      	cbnz	r0, 155be <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   155ac:	f06f 050f 	mvn.w	r5, #15
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
		*queuep = NULL;
   155b0:	2300      	movs	r3, #0
   155b2:	6033      	str	r3, [r6, #0]
	}

	return ret;
   155b4:	e013      	b.n	155de <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   155b6:	2000      	movs	r0, #0
   155b8:	e7f0      	b.n	1559c <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   155ba:	071b      	lsls	r3, r3, #28
   155bc:	d4f6      	bmi.n	155ac <submit_to_queue_locked+0x50>
	parent->next = child;
   155be:	2300      	movs	r3, #0
   155c0:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   155c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   155c6:	b963      	cbnz	r3, 155e2 <submit_to_queue_locked+0x86>
	list->head = node;
   155c8:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   155cc:	4638      	mov	r0, r7
   155ce:	f003 fc7f 	bl	18ed0 <notify_queue_locked>
	*flagp |= BIT(bit);
   155d2:	68e3      	ldr	r3, [r4, #12]
   155d4:	f043 0304 	orr.w	r3, r3, #4
   155d8:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   155da:	6833      	ldr	r3, [r6, #0]
   155dc:	60a3      	str	r3, [r4, #8]
}
   155de:	4628      	mov	r0, r5
   155e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   155e2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   155e4:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   155e8:	e7f0      	b.n	155cc <submit_to_queue_locked+0x70>
		return -EINVAL;
   155ea:	f06f 0515 	mvn.w	r5, #21
   155ee:	e7df      	b.n	155b0 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   155f0:	f06f 0512 	mvn.w	r5, #18
   155f4:	e7dc      	b.n	155b0 <submit_to_queue_locked+0x54>
   155f6:	bf00      	nop
   155f8:	200021dc 	.word	0x200021dc

000155fc <finalize_cancel_locked>:
	*flagp &= ~BIT(bit);
   155fc:	68c3      	ldr	r3, [r0, #12]
{
   155fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   15602:	4c17      	ldr	r4, [pc, #92]	; (15660 <finalize_cancel_locked+0x64>)
	*flagp &= ~BIT(bit);
   15604:	f023 0302 	bic.w	r3, r3, #2
{
   15608:	4607      	mov	r7, r0
	*flagp &= ~BIT(bit);
   1560a:	60c3      	str	r3, [r0, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1560c:	6820      	ldr	r0, [r4, #0]
   1560e:	b320      	cbz	r0, 1565a <finalize_cancel_locked+0x5e>
	return node->next;
   15610:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   15612:	2600      	movs	r6, #0
   15614:	2d00      	cmp	r5, #0
   15616:	bf38      	it	cc
   15618:	2500      	movcc	r5, #0
	parent->next = child;
   1561a:	46b0      	mov	r8, r6
		if (wc->work == work) {
   1561c:	6842      	ldr	r2, [r0, #4]
   1561e:	42ba      	cmp	r2, r7
   15620:	4603      	mov	r3, r0
   15622:	d10b      	bne.n	1563c <finalize_cancel_locked+0x40>
Z_GENLIST_REMOVE(slist, snode)
   15624:	6803      	ldr	r3, [r0, #0]
   15626:	b996      	cbnz	r6, 1564e <finalize_cancel_locked+0x52>
   15628:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   1562a:	6023      	str	r3, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1562c:	4290      	cmp	r0, r2
   1562e:	d100      	bne.n	15632 <finalize_cancel_locked+0x36>
	list->tail = node;
   15630:	6063      	str	r3, [r4, #4]
	parent->next = child;
   15632:	f840 8b08 	str.w	r8, [r0], #8
	z_impl_k_sem_give(sem);
   15636:	f7ff fe6d 	bl	15314 <z_impl_k_sem_give>
}
   1563a:	4633      	mov	r3, r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1563c:	b16d      	cbz	r5, 1565a <finalize_cancel_locked+0x5e>
	return node->next;
   1563e:	682a      	ldr	r2, [r5, #0]
   15640:	2a00      	cmp	r2, #0
   15642:	bf38      	it	cc
   15644:	2200      	movcc	r2, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   15646:	4628      	mov	r0, r5
   15648:	461e      	mov	r6, r3
   1564a:	4615      	mov	r5, r2
   1564c:	e7e6      	b.n	1561c <finalize_cancel_locked+0x20>
	parent->next = child;
   1564e:	6033      	str	r3, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   15650:	6863      	ldr	r3, [r4, #4]
   15652:	4298      	cmp	r0, r3
	list->tail = node;
   15654:	bf08      	it	eq
   15656:	6066      	streq	r6, [r4, #4]
}
   15658:	e7eb      	b.n	15632 <finalize_cancel_locked+0x36>
}
   1565a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1565e:	bf00      	nop
   15660:	20002218 	.word	0x20002218

00015664 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   15664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   15668:	f8df 9120 	ldr.w	r9, [pc, #288]	; 1578c <work_queue_main+0x128>
{
   1566c:	b087      	sub	sp, #28
   1566e:	4604      	mov	r4, r0
					   K_FOREVER, NULL);
   15670:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   15674:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   15678:	f100 0888 	add.w	r8, r0, #136	; 0x88
	__asm__ volatile(
   1567c:	f04f 0320 	mov.w	r3, #32
   15680:	f3ef 8a11 	mrs	sl, BASEPRI
   15684:	f383 8811 	msr	BASEPRI, r3
   15688:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   1568c:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
	return list->head;
   15690:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
Z_GENLIST_GET(slist, snode)
   15694:	b9c5      	cbnz	r5, 156c8 <work_queue_main+0x64>
	*flagp &= ~BIT(bit);
   15696:	f023 0204 	bic.w	r2, r3, #4
		} else if (flag_test_and_clear(&queue->flags,
   1569a:	0759      	lsls	r1, r3, #29
	*flagp &= ~BIT(bit);
   1569c:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
		} else if (flag_test_and_clear(&queue->flags,
   156a0:	d508      	bpl.n	156b4 <work_queue_main+0x50>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   156a2:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   156a6:	2200      	movs	r2, #0
   156a8:	2101      	movs	r1, #1
   156aa:	4628      	mov	r0, r5
   156ac:	f003 fbd4 	bl	18e58 <z_sched_wake>
   156b0:	2800      	cmp	r0, #0
   156b2:	d1f8      	bne.n	156a6 <work_queue_main+0x42>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   156b4:	2300      	movs	r3, #0
   156b6:	e9cd 6700 	strd	r6, r7, [sp]
   156ba:	9302      	str	r3, [sp, #8]
   156bc:	4642      	mov	r2, r8
   156be:	4651      	mov	r1, sl
   156c0:	4648      	mov	r0, r9
   156c2:	f7ff fe15 	bl	152f0 <z_sched_wait>
			continue;
   156c6:	e7d9      	b.n	1567c <work_queue_main+0x18>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   156c8:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   156cc:	6829      	ldr	r1, [r5, #0]
	list->head = node;
   156ce:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   156d2:	4295      	cmp	r5, r2
   156d4:	d101      	bne.n	156da <work_queue_main+0x76>
	list->tail = node;
   156d6:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   156da:	f043 0302 	orr.w	r3, r3, #2
   156de:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   156e2:	f38a 8811 	msr	BASEPRI, sl
   156e6:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		if (work != NULL) {
			bool yield;
			k_work_handler_t handler = work->handler;
   156ea:	f8d5 a004 	ldr.w	sl, [r5, #4]
	__asm__ volatile(
   156ee:	f04f 0320 	mov.w	r3, #32
   156f2:	f3ef 8b11 	mrs	fp, BASEPRI
   156f6:	f383 8811 	msr	BASEPRI, r3
   156fa:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   156fe:	68eb      	ldr	r3, [r5, #12]
   15700:	f023 0304 	bic.w	r3, r3, #4
	return (*flagp & BIT(bit)) != 0U;
   15704:	f3c3 0140 	ubfx	r1, r3, #1, #1
	*flagp &= ~BIT(bit);
   15708:	60eb      	str	r3, [r5, #12]
	if (ret) {
   1570a:	f081 0201 	eor.w	r2, r1, #1
   1570e:	b129      	cbz	r1, 1571c <work_queue_main+0xb8>
		finalize_cancel_locked(work);
   15710:	4628      	mov	r0, r5
   15712:	9205      	str	r2, [sp, #20]
   15714:	f7ff ff72 	bl	155fc <finalize_cancel_locked>
   15718:	9a05      	ldr	r2, [sp, #20]
   1571a:	e002      	b.n	15722 <work_queue_main+0xbe>
	*flagp |= BIT(bit);
   1571c:	f043 0301 	orr.w	r3, r3, #1
   15720:	60eb      	str	r3, [r5, #12]
	__asm__ volatile(
   15722:	f38b 8811 	msr	BASEPRI, fp
   15726:	f3bf 8f6f 	isb	sy

			__ASSERT_NO_MSG(handler != 0);

			if (work_set_running(work, queue)) {
   1572a:	b9b2      	cbnz	r2, 1575a <work_queue_main+0xf6>
	__asm__ volatile(
   1572c:	f04f 0320 	mov.w	r3, #32
   15730:	f3ef 8211 	mrs	r2, BASEPRI
   15734:	f383 8811 	msr	BASEPRI, r3
   15738:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   1573c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   15740:	f023 0302 	bic.w	r3, r3, #2
   15744:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   15748:	f382 8811 	msr	BASEPRI, r2
   1574c:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
   15750:	05db      	lsls	r3, r3, #23
   15752:	d493      	bmi.n	1567c <work_queue_main+0x18>
	z_impl_k_yield();
   15754:	f7ff fcf0 	bl	15138 <z_impl_k_yield>
}
   15758:	e790      	b.n	1567c <work_queue_main+0x18>
				handler(work);
   1575a:	4628      	mov	r0, r5
   1575c:	47d0      	blx	sl
	__asm__ volatile(
   1575e:	f04f 0320 	mov.w	r3, #32
   15762:	f3ef 8a11 	mrs	sl, BASEPRI
   15766:	f383 8811 	msr	BASEPRI, r3
   1576a:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   1576e:	68eb      	ldr	r3, [r5, #12]
   15770:	f023 0301 	bic.w	r3, r3, #1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   15774:	079a      	lsls	r2, r3, #30
	*flagp &= ~BIT(bit);
   15776:	60eb      	str	r3, [r5, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   15778:	d502      	bpl.n	15780 <work_queue_main+0x11c>
		finalize_cancel_locked(work);
   1577a:	4628      	mov	r0, r5
   1577c:	f7ff ff3e 	bl	155fc <finalize_cancel_locked>
	__asm__ volatile(
   15780:	f38a 8811 	msr	BASEPRI, sl
   15784:	f3bf 8f6f 	isb	sy
}
   15788:	e7d0      	b.n	1572c <work_queue_main+0xc8>
   1578a:	bf00      	nop
   1578c:	20002259 	.word	0x20002259

00015790 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   15790:	b5f0      	push	{r4, r5, r6, r7, lr}
   15792:	b089      	sub	sp, #36	; 0x24
   15794:	4604      	mov	r4, r0
	list->head = NULL;
   15796:	2000      	movs	r0, #0
	list->tail = NULL;
   15798:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   1579c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1579e:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   157a2:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   157a6:	f104 0090 	add.w	r0, r4, #144	; 0x90
   157aa:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   157ae:	b31d      	cbz	r5, 157f8 <k_work_queue_start+0x68>
   157b0:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   157b2:	2800      	cmp	r0, #0
   157b4:	f240 1001 	movw	r0, #257	; 0x101
   157b8:	bf08      	it	eq
   157ba:	2001      	moveq	r0, #1
	*flagp = flags;
   157bc:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   157c0:	2000      	movs	r0, #0
   157c2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   157c6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   157ca:	e9cd 3003 	strd	r3, r0, [sp, #12]
   157ce:	e9cd 0001 	strd	r0, r0, [sp, #4]
   157d2:	e9cd 6706 	strd	r6, r7, [sp, #24]
   157d6:	4b09      	ldr	r3, [pc, #36]	; (157fc <k_work_queue_start+0x6c>)
   157d8:	9400      	str	r4, [sp, #0]
   157da:	4620      	mov	r0, r4
   157dc:	f7ff fe34 	bl	15448 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   157e0:	b125      	cbz	r5, 157ec <k_work_queue_start+0x5c>
   157e2:	6829      	ldr	r1, [r5, #0]
   157e4:	b111      	cbz	r1, 157ec <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   157e6:	4620      	mov	r0, r4
   157e8:	f003 fb6d 	bl	18ec6 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   157ec:	4620      	mov	r0, r4
		k_thread_name_set(&queue->thread, cfg->name);
	}

	k_thread_start(&queue->thread);
}
   157ee:	b009      	add	sp, #36	; 0x24
   157f0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   157f4:	f003 bb6a 	b.w	18ecc <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   157f8:	2001      	movs	r0, #1
   157fa:	e7df      	b.n	157bc <k_work_queue_start+0x2c>
   157fc:	00015665 	.word	0x00015665

00015800 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   15800:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   15802:	460c      	mov	r4, r1
   15804:	9001      	str	r0, [sp, #4]
   15806:	4616      	mov	r6, r2
   15808:	461f      	mov	r7, r3
	__asm__ volatile(
   1580a:	f04f 0320 	mov.w	r3, #32
   1580e:	f3ef 8511 	mrs	r5, BASEPRI
   15812:	f383 8811 	msr	BASEPRI, r3
   15816:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   1581a:	4608      	mov	r0, r1
   1581c:	f003 fb5f 	bl	18ede <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   15820:	ea56 0307 	orrs.w	r3, r6, r7
   15824:	d109      	bne.n	1583a <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   15826:	a901      	add	r1, sp, #4
   15828:	4620      	mov	r0, r4
   1582a:	f7ff fe97 	bl	1555c <submit_to_queue_locked>
	__asm__ volatile(
   1582e:	f385 8811 	msr	BASEPRI, r5
   15832:	f3bf 8f6f 	isb	sy
	ret = schedule_for_queue_locked(&queue, dwork, delay);

	k_spin_unlock(&lock, key);

	return ret;
}
   15836:	b003      	add	sp, #12
   15838:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   1583a:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1583c:	4906      	ldr	r1, [pc, #24]	; (15858 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   1583e:	f043 0308 	orr.w	r3, r3, #8
   15842:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   15844:	9b01      	ldr	r3, [sp, #4]
   15846:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   15848:	f104 0010 	add.w	r0, r4, #16
   1584c:	4632      	mov	r2, r6
   1584e:	463b      	mov	r3, r7
   15850:	f000 f87a 	bl	15948 <z_add_timeout>
	return ret;
   15854:	2001      	movs	r0, #1
   15856:	e7ea      	b.n	1582e <k_work_reschedule_for_queue+0x2e>
   15858:	00018f61 	.word	0x00018f61

0001585c <boot_banner>:
#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
	       STRINGIFY(BUILD_VERSION), BOOT_DELAY_BANNER);
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
   1585c:	4a02      	ldr	r2, [pc, #8]	; (15868 <boot_banner+0xc>)
   1585e:	4903      	ldr	r1, [pc, #12]	; (1586c <boot_banner+0x10>)
   15860:	4803      	ldr	r0, [pc, #12]	; (15870 <boot_banner+0x14>)
   15862:	f000 ba6d 	b.w	15d40 <printk>
   15866:	bf00      	nop
   15868:	0001a615 	.word	0x0001a615
   1586c:	0001a96b 	.word	0x0001a96b
   15870:	0001a972 	.word	0x0001a972

00015874 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   15874:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   15876:	4806      	ldr	r0, [pc, #24]	; (15890 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   15878:	4a06      	ldr	r2, [pc, #24]	; (15894 <z_data_copy+0x20>)
   1587a:	4907      	ldr	r1, [pc, #28]	; (15898 <z_data_copy+0x24>)
   1587c:	1a12      	subs	r2, r2, r0
   1587e:	f001 f917 	bl	16ab0 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   15882:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   15886:	4a05      	ldr	r2, [pc, #20]	; (1589c <z_data_copy+0x28>)
   15888:	4905      	ldr	r1, [pc, #20]	; (158a0 <z_data_copy+0x2c>)
   1588a:	4806      	ldr	r0, [pc, #24]	; (158a4 <z_data_copy+0x30>)
   1588c:	f001 b910 	b.w	16ab0 <memcpy>
   15890:	20000000 	.word	0x20000000
   15894:	20000790 	.word	0x20000790
   15898:	0001a99c 	.word	0x0001a99c
   1589c:	00000000 	.word	0x00000000
   158a0:	0001a99c 	.word	0x0001a99c
   158a4:	20000000 	.word	0x20000000

000158a8 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   158a8:	4b03      	ldr	r3, [pc, #12]	; (158b8 <elapsed+0x10>)
   158aa:	681b      	ldr	r3, [r3, #0]
   158ac:	b90b      	cbnz	r3, 158b2 <elapsed+0xa>
   158ae:	f7ee bebb 	b.w	4628 <sys_clock_elapsed>
}
   158b2:	2000      	movs	r0, #0
   158b4:	4770      	bx	lr
   158b6:	bf00      	nop
   158b8:	20002220 	.word	0x20002220

000158bc <remove_timeout>:
{
   158bc:	b530      	push	{r4, r5, lr}
   158be:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   158c0:	b168      	cbz	r0, 158de <remove_timeout+0x22>
   158c2:	4a0a      	ldr	r2, [pc, #40]	; (158ec <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   158c4:	6852      	ldr	r2, [r2, #4]
   158c6:	4290      	cmp	r0, r2
   158c8:	d009      	beq.n	158de <remove_timeout+0x22>
	if (next(t) != NULL) {
   158ca:	b143      	cbz	r3, 158de <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   158cc:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   158d0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   158d4:	1912      	adds	r2, r2, r4
   158d6:	eb45 0101 	adc.w	r1, r5, r1
   158da:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   158de:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   158e0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   158e2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   158e4:	2300      	movs	r3, #0
	node->prev = NULL;
   158e6:	e9c0 3300 	strd	r3, r3, [r0]
}
   158ea:	bd30      	pop	{r4, r5, pc}
   158ec:	20000510 	.word	0x20000510

000158f0 <next_timeout>:

static int32_t next_timeout(void)
{
   158f0:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   158f2:	4b13      	ldr	r3, [pc, #76]	; (15940 <next_timeout+0x50>)
   158f4:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   158f6:	429c      	cmp	r4, r3
   158f8:	bf08      	it	eq
   158fa:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   158fc:	f7ff ffd4 	bl	158a8 <elapsed>
   15900:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   15902:	b1bc      	cbz	r4, 15934 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   15904:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   15908:	1b40      	subs	r0, r0, r5
   1590a:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   1590e:	2801      	cmp	r0, #1
   15910:	f171 0300 	sbcs.w	r3, r1, #0
   15914:	db11      	blt.n	1593a <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   15916:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1591a:	2300      	movs	r3, #0
   1591c:	4282      	cmp	r2, r0
   1591e:	eb73 0401 	sbcs.w	r4, r3, r1
   15922:	da00      	bge.n	15926 <next_timeout+0x36>
   15924:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   15926:	4b07      	ldr	r3, [pc, #28]	; (15944 <next_timeout+0x54>)
   15928:	691b      	ldr	r3, [r3, #16]
   1592a:	b113      	cbz	r3, 15932 <next_timeout+0x42>
   1592c:	4298      	cmp	r0, r3
   1592e:	bfa8      	it	ge
   15930:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   15932:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   15934:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   15938:	e7f5      	b.n	15926 <next_timeout+0x36>
   1593a:	2000      	movs	r0, #0
   1593c:	e7f3      	b.n	15926 <next_timeout+0x36>
   1593e:	bf00      	nop
   15940:	20000510 	.word	0x20000510
   15944:	200021dc 	.word	0x200021dc

00015948 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   15948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1594c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   15950:	bf08      	it	eq
   15952:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   15956:	b085      	sub	sp, #20
   15958:	4604      	mov	r4, r0
   1595a:	4692      	mov	sl, r2
   1595c:	469b      	mov	fp, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1595e:	d070      	beq.n	15a42 <z_add_timeout+0xfa>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	k_ticks_t ticks = timeout.ticks + 1;
   15960:	1c56      	adds	r6, r2, #1

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   15962:	f06f 0501 	mvn.w	r5, #1
	k_ticks_t ticks = timeout.ticks + 1;
   15966:	f143 0700 	adc.w	r7, r3, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   1596a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1596e:	ebb5 0806 	subs.w	r8, r5, r6
   15972:	eb63 0907 	sbc.w	r9, r3, r7
   15976:	f1b8 0f00 	cmp.w	r8, #0
   1597a:	f179 0300 	sbcs.w	r3, r9, #0
   1597e:	db16      	blt.n	159ae <z_add_timeout+0x66>
		ticks = Z_TICK_ABS(timeout.ticks) - (curr_tick + elapsed());
   15980:	4e36      	ldr	r6, [pc, #216]	; (15a5c <z_add_timeout+0x114>)
   15982:	9103      	str	r1, [sp, #12]
   15984:	f7ff ff90 	bl	158a8 <elapsed>
   15988:	e9d6 2600 	ldrd	r2, r6, [r6]
   1598c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15990:	1aad      	subs	r5, r5, r2
   15992:	eb63 0306 	sbc.w	r3, r3, r6
   15996:	ebb5 020a 	subs.w	r2, r5, sl
   1599a:	eb63 030b 	sbc.w	r3, r3, fp
   1599e:	9200      	str	r2, [sp, #0]
   159a0:	9301      	str	r3, [sp, #4]
   159a2:	e9dd 6700 	ldrd	r6, r7, [sp]
   159a6:	9903      	ldr	r1, [sp, #12]
   159a8:	1a36      	subs	r6, r6, r0
   159aa:	eb67 77e0 	sbc.w	r7, r7, r0, asr #31
	}

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   159ae:	60a1      	str	r1, [r4, #8]
	__asm__ volatile(
   159b0:	f04f 0320 	mov.w	r3, #32
   159b4:	f3ef 8511 	mrs	r5, BASEPRI
   159b8:	f383 8811 	msr	BASEPRI, r3
   159bc:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   159c0:	f7ff ff72 	bl	158a8 <elapsed>
	ticks = MAX(1, ticks);
   159c4:	2e01      	cmp	r6, #1
	return list->head == list;
   159c6:	4a26      	ldr	r2, [pc, #152]	; (15a60 <z_add_timeout+0x118>)
   159c8:	f177 0300 	sbcs.w	r3, r7, #0
   159cc:	bfb8      	it	lt
   159ce:	2601      	movlt	r6, #1
   159d0:	6813      	ldr	r3, [r2, #0]
   159d2:	bfb8      	it	lt
   159d4:	2700      	movlt	r7, #0
		to->dticks = ticks + elapsed();
   159d6:	1836      	adds	r6, r6, r0
   159d8:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   159dc:	4293      	cmp	r3, r2
   159de:	e9c4 6704 	strd	r6, r7, [r4, #16]
   159e2:	d002      	beq.n	159ea <z_add_timeout+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   159e4:	f8d2 c004 	ldr.w	ip, [r2, #4]
		for (t = first(); t != NULL; t = next(t)) {
   159e8:	b92b      	cbnz	r3, 159f6 <z_add_timeout+0xae>
	sys_dnode_t *const tail = list->tail;
   159ea:	6853      	ldr	r3, [r2, #4]
	node->prev = tail;
   159ec:	e9c4 2300 	strd	r2, r3, [r4]
	tail->next = node;
   159f0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   159f2:	6054      	str	r4, [r2, #4]
}
   159f4:	e012      	b.n	15a1c <z_add_timeout+0xd4>
			if (t->dticks > to->dticks) {
   159f6:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
   159fa:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
   159fe:	4546      	cmp	r6, r8
   15a00:	eb77 0109 	sbcs.w	r1, r7, r9
   15a04:	da20      	bge.n	15a48 <z_add_timeout+0x100>
				t->dticks -= to->dticks;
   15a06:	ebb8 0006 	subs.w	r0, r8, r6
   15a0a:	eb69 0107 	sbc.w	r1, r9, r7
   15a0e:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   15a12:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   15a14:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   15a18:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   15a1a:	605c      	str	r4, [r3, #4]
	return list->head == list;
   15a1c:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15a1e:	4293      	cmp	r3, r2
   15a20:	d00b      	beq.n	15a3a <z_add_timeout+0xf2>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   15a22:	429c      	cmp	r4, r3
   15a24:	d109      	bne.n	15a3a <z_add_timeout+0xf2>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   15a26:	f7ff ff63 	bl	158f0 <next_timeout>

			if (next_time == 0 ||
   15a2a:	b118      	cbz	r0, 15a34 <z_add_timeout+0xec>
			    _current_cpu->slice_ticks != next_time) {
   15a2c:	4b0d      	ldr	r3, [pc, #52]	; (15a64 <z_add_timeout+0x11c>)
			if (next_time == 0 ||
   15a2e:	691b      	ldr	r3, [r3, #16]
   15a30:	4283      	cmp	r3, r0
   15a32:	d002      	beq.n	15a3a <z_add_timeout+0xf2>
				sys_clock_set_timeout(next_time, false);
   15a34:	2100      	movs	r1, #0
   15a36:	f7ee fdc5 	bl	45c4 <sys_clock_set_timeout>
	__asm__ volatile(
   15a3a:	f385 8811 	msr	BASEPRI, r5
   15a3e:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   15a42:	b005      	add	sp, #20
   15a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   15a48:	ebb6 0008 	subs.w	r0, r6, r8
   15a4c:	eb67 0109 	sbc.w	r1, r7, r9
	return (node == list->tail) ? NULL : node->next;
   15a50:	4563      	cmp	r3, ip
   15a52:	e9c4 0104 	strd	r0, r1, [r4, #16]
   15a56:	d0c8      	beq.n	159ea <z_add_timeout+0xa2>
   15a58:	681b      	ldr	r3, [r3, #0]
   15a5a:	e7c5      	b.n	159e8 <z_add_timeout+0xa0>
   15a5c:	20000f70 	.word	0x20000f70
   15a60:	20000510 	.word	0x20000510
   15a64:	200021dc 	.word	0x200021dc

00015a68 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   15a68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a6c:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   15a6e:	f7ff fabf 	bl	14ff0 <z_time_slice>
	__asm__ volatile(
   15a72:	f04f 0320 	mov.w	r3, #32
   15a76:	f3ef 8411 	mrs	r4, BASEPRI
   15a7a:	f383 8811 	msr	BASEPRI, r3
   15a7e:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   15a82:	4d2c      	ldr	r5, [pc, #176]	; (15b34 <sys_clock_announce+0xcc>)
   15a84:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 15b38 <sys_clock_announce+0xd0>
	return list->head == list;
   15a88:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 15b3c <sys_clock_announce+0xd4>
   15a8c:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   15a8e:	4651      	mov	r1, sl
   15a90:	f8d5 c000 	ldr.w	ip, [r5]
   15a94:	f8db 0000 	ldr.w	r0, [fp]
   15a98:	4662      	mov	r2, ip
   15a9a:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15a9c:	4558      	cmp	r0, fp
   15a9e:	e9da 8900 	ldrd	r8, r9, [sl]
   15aa2:	e9cd 2300 	strd	r2, r3, [sp]
   15aa6:	d00d      	beq.n	15ac4 <sys_clock_announce+0x5c>
   15aa8:	b160      	cbz	r0, 15ac4 <sys_clock_announce+0x5c>
   15aaa:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   15aae:	45b4      	cmp	ip, r6
   15ab0:	41bb      	sbcs	r3, r7
   15ab2:	da1e      	bge.n	15af2 <sys_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   15ab4:	9b00      	ldr	r3, [sp, #0]
   15ab6:	ebb6 0c03 	subs.w	ip, r6, r3
   15aba:	9b01      	ldr	r3, [sp, #4]
   15abc:	eb67 0603 	sbc.w	r6, r7, r3
   15ac0:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
   15ac4:	9b00      	ldr	r3, [sp, #0]
   15ac6:	eb13 0208 	adds.w	r2, r3, r8
   15aca:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
   15acc:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
   15ad0:	eb43 0309 	adc.w	r3, r3, r9
   15ad4:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
   15ad8:	602e      	str	r6, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
   15ada:	f7ff ff09 	bl	158f0 <next_timeout>
   15ade:	4631      	mov	r1, r6
   15ae0:	f7ee fd70 	bl	45c4 <sys_clock_set_timeout>
	__asm__ volatile(
   15ae4:	f384 8811 	msr	BASEPRI, r4
   15ae8:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   15aec:	b003      	add	sp, #12
   15aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
   15af2:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
   15af6:	f04f 0200 	mov.w	r2, #0
   15afa:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
   15afe:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
   15b02:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
   15b06:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
   15b0a:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
   15b0e:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
   15b10:	f7ff fed4 	bl	158bc <remove_timeout>
   15b14:	f384 8811 	msr	BASEPRI, r4
   15b18:	f3bf 8f6f 	isb	sy
		t->fn(t);
   15b1c:	6883      	ldr	r3, [r0, #8]
   15b1e:	4798      	blx	r3
	__asm__ volatile(
   15b20:	f04f 0320 	mov.w	r3, #32
   15b24:	f3ef 8411 	mrs	r4, BASEPRI
   15b28:	f383 8811 	msr	BASEPRI, r3
   15b2c:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
   15b30:	4901      	ldr	r1, [pc, #4]	; (15b38 <sys_clock_announce+0xd0>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   15b32:	e7ad      	b.n	15a90 <sys_clock_announce+0x28>
   15b34:	20002220 	.word	0x20002220
   15b38:	20000f70 	.word	0x20000f70
   15b3c:	20000510 	.word	0x20000510

00015b40 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   15b40:	b510      	push	{r4, lr}
   15b42:	f04f 0320 	mov.w	r3, #32
   15b46:	f3ef 8411 	mrs	r4, BASEPRI
   15b4a:	f383 8811 	msr	BASEPRI, r3
   15b4e:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   15b52:	f7ee fd69 	bl	4628 <sys_clock_elapsed>
   15b56:	4b06      	ldr	r3, [pc, #24]	; (15b70 <sys_clock_tick_get+0x30>)
   15b58:	e9d3 2300 	ldrd	r2, r3, [r3]
   15b5c:	1812      	adds	r2, r2, r0
   15b5e:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   15b62:	f384 8811 	msr	BASEPRI, r4
   15b66:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   15b6a:	4610      	mov	r0, r2
   15b6c:	4619      	mov	r1, r3
   15b6e:	bd10      	pop	{r4, pc}
   15b70:	20000f70 	.word	0x20000f70

00015b74 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   15b74:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   15b78:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   15b7a:	4b29      	ldr	r3, [pc, #164]	; (15c20 <z_impl_k_poll+0xac>)
   15b7c:	689d      	ldr	r5, [r3, #8]

	poller->is_polling = true;
   15b7e:	2301      	movs	r3, #1
   15b80:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	poller->mode = MODE_POLL;
   15b84:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	events_registered = register_events(events, num_events, poller,
   15b88:	ea52 0307 	orrs.w	r3, r2, r7
{
   15b8c:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   15b8e:	bf0c      	ite	eq
   15b90:	2301      	moveq	r3, #1
   15b92:	2300      	movne	r3, #0
   15b94:	f105 0260 	add.w	r2, r5, #96	; 0x60
{
   15b98:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   15b9a:	f003 fb29 	bl	191f0 <register_events>
   15b9e:	4681      	mov	r9, r0
	__asm__ volatile(
   15ba0:	f04f 0320 	mov.w	r3, #32
   15ba4:	f3ef 8a11 	mrs	sl, BASEPRI
   15ba8:	f383 8811 	msr	BASEPRI, r3
   15bac:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   15bb0:	f895 4060 	ldrb.w	r4, [r5, #96]	; 0x60
   15bb4:	b964      	cbnz	r4, 15bd0 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   15bb6:	4601      	mov	r1, r0
   15bb8:	4652      	mov	r2, sl
   15bba:	4640      	mov	r0, r8
   15bbc:	f003 fab8 	bl	19130 <clear_event_registrations>
	__asm__ volatile(
   15bc0:	f38a 8811 	msr	BASEPRI, sl
   15bc4:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   15bc8:	4620      	mov	r0, r4
   15bca:	b002      	add	sp, #8
   15bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   15bd0:	2300      	movs	r3, #0
   15bd2:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   15bd6:	ea56 0307 	orrs.w	r3, r6, r7
   15bda:	d106      	bne.n	15bea <z_impl_k_poll+0x76>
   15bdc:	f38a 8811 	msr	BASEPRI, sl
   15be0:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   15be4:	f06f 040a 	mvn.w	r4, #10
   15be8:	e7ee      	b.n	15bc8 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   15bea:	e9cd 6700 	strd	r6, r7, [sp]
   15bee:	4a0d      	ldr	r2, [pc, #52]	; (15c24 <z_impl_k_poll+0xb0>)
   15bf0:	480d      	ldr	r0, [pc, #52]	; (15c28 <z_impl_k_poll+0xb4>)
   15bf2:	4651      	mov	r1, sl
   15bf4:	f7ff f922 	bl	14e3c <z_pend_curr>
   15bf8:	4604      	mov	r4, r0
	__asm__ volatile(
   15bfa:	f04f 0320 	mov.w	r3, #32
   15bfe:	f3ef 8511 	mrs	r5, BASEPRI
   15c02:	f383 8811 	msr	BASEPRI, r3
   15c06:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   15c0a:	462a      	mov	r2, r5
   15c0c:	4649      	mov	r1, r9
   15c0e:	4640      	mov	r0, r8
   15c10:	f003 fa8e 	bl	19130 <clear_event_registrations>
	__asm__ volatile(
   15c14:	f385 8811 	msr	BASEPRI, r5
   15c18:	f3bf 8f6f 	isb	sy
	return swap_rc;
   15c1c:	e7d4      	b.n	15bc8 <z_impl_k_poll+0x54>
   15c1e:	bf00      	nop
   15c20:	200021dc 	.word	0x200021dc
   15c24:	20000518 	.word	0x20000518
   15c28:	20002259 	.word	0x20002259

00015c2c <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   15c2c:	b538      	push	{r3, r4, r5, lr}
   15c2e:	4603      	mov	r3, r0
	__asm__ volatile(
   15c30:	f04f 0220 	mov.w	r2, #32
   15c34:	f3ef 8511 	mrs	r5, BASEPRI
   15c38:	f382 8811 	msr	BASEPRI, r2
   15c3c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   15c40:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   15c42:	2101      	movs	r1, #1
   15c44:	6081      	str	r1, [r0, #8]
	return list->head == list;
   15c46:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   15c48:	4283      	cmp	r3, r0
   15c4a:	d106      	bne.n	15c5a <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   15c4c:	f385 8811 	msr	BASEPRI, r5
   15c50:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&sig->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   15c54:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
   15c56:	4620      	mov	r0, r4
   15c58:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   15c5a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   15c5e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   15c60:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   15c62:	2300      	movs	r3, #0
	node->prev = NULL;
   15c64:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   15c68:	f003 fb23 	bl	192b2 <signal_poll_event>
	z_reschedule(&lock, key);
   15c6c:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   15c6e:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   15c70:	4801      	ldr	r0, [pc, #4]	; (15c78 <z_impl_k_poll_signal_raise+0x4c>)
   15c72:	f7ff f861 	bl	14d38 <z_reschedule>
	return rc;
   15c76:	e7ee      	b.n	15c56 <z_impl_k_poll_signal_raise+0x2a>
   15c78:	20002259 	.word	0x20002259

00015c7c <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   15c7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   15c7e:	4606      	mov	r6, r0
   15c80:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   15c82:	f003 f916 	bl	18eb2 <k_is_in_isr>
   15c86:	b980      	cbnz	r0, 15caa <z_thread_aligned_alloc+0x2e>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   15c88:	4b0b      	ldr	r3, [pc, #44]	; (15cb8 <z_thread_aligned_alloc+0x3c>)
   15c8a:	689b      	ldr	r3, [r3, #8]
   15c8c:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   15c8e:	b184      	cbz	r4, 15cb2 <z_thread_aligned_alloc+0x36>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   15c90:	2204      	movs	r2, #4
   15c92:	18aa      	adds	r2, r5, r2
   15c94:	d209      	bcs.n	15caa <z_thread_aligned_alloc+0x2e>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   15c96:	2000      	movs	r0, #0
   15c98:	2100      	movs	r1, #0
   15c9a:	e9cd 0100 	strd	r0, r1, [sp]
   15c9e:	f046 0104 	orr.w	r1, r6, #4
   15ca2:	4620      	mov	r0, r4
   15ca4:	f002 fed1 	bl	18a4a <k_heap_aligned_alloc>
	if (mem == NULL) {
   15ca8:	b908      	cbnz	r0, 15cae <z_thread_aligned_alloc+0x32>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   15caa:	2400      	movs	r4, #0
	}

	return ret;
   15cac:	e001      	b.n	15cb2 <z_thread_aligned_alloc+0x36>
	*heap_ref = heap;
   15cae:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   15cb0:	1d04      	adds	r4, r0, #4
}
   15cb2:	4620      	mov	r0, r4
   15cb4:	b002      	add	sp, #8
   15cb6:	bd70      	pop	{r4, r5, r6, pc}
   15cb8:	200021dc 	.word	0x200021dc

00015cbc <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   15cbc:	4603      	mov	r3, r0
   15cbe:	b140      	cbz	r0, 15cd2 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   15cc0:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   15cc2:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   15cc6:	2a02      	cmp	r2, #2
   15cc8:	d006      	beq.n	15cd8 <sys_notify_validate+0x1c>
   15cca:	2a03      	cmp	r2, #3
   15ccc:	d004      	beq.n	15cd8 <sys_notify_validate+0x1c>
   15cce:	2a01      	cmp	r2, #1
   15cd0:	d005      	beq.n	15cde <sys_notify_validate+0x22>
		return -EINVAL;
   15cd2:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   15cd6:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   15cd8:	681a      	ldr	r2, [r3, #0]
   15cda:	2a00      	cmp	r2, #0
   15cdc:	d0f9      	beq.n	15cd2 <sys_notify_validate+0x16>
		notify->result = 0;
   15cde:	2000      	movs	r0, #0
   15ce0:	6098      	str	r0, [r3, #8]
   15ce2:	4770      	bx	lr

00015ce4 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   15ce4:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   15ce6:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   15cea:	2a02      	cmp	r2, #2
{
   15cec:	b510      	push	{r4, lr}
   15cee:	4603      	mov	r3, r0
	notify->result = res;
   15cf0:	6081      	str	r1, [r0, #8]
	switch (method) {
   15cf2:	d00a      	beq.n	15d0a <sys_notify_finalize+0x26>
   15cf4:	2a03      	cmp	r2, #3
   15cf6:	d10b      	bne.n	15d10 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   15cf8:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   15cfa:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   15cfc:	2200      	movs	r2, #0
   15cfe:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   15d00:	b108      	cbz	r0, 15d06 <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
   15d02:	f7ff ff93 	bl	15c2c <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   15d06:	4620      	mov	r0, r4
   15d08:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   15d0a:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = 0;
   15d0c:	2400      	movs	r4, #0
		break;
   15d0e:	e7f5      	b.n	15cfc <sys_notify_finalize+0x18>
	switch (method) {
   15d10:	2400      	movs	r4, #0
   15d12:	4620      	mov	r0, r4
   15d14:	e7f2      	b.n	15cfc <sys_notify_finalize+0x18>

00015d16 <arch_printk_char_out>:
}
   15d16:	2000      	movs	r0, #0
   15d18:	4770      	bx	lr

00015d1a <str_out>:
{
   15d1a:	b530      	push	{r4, r5, lr}
   15d1c:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   15d1e:	680c      	ldr	r4, [r1, #0]
   15d20:	1c55      	adds	r5, r2, #1
   15d22:	b114      	cbz	r4, 15d2a <str_out+0x10>
   15d24:	684b      	ldr	r3, [r1, #4]
   15d26:	4293      	cmp	r3, r2
   15d28:	dc01      	bgt.n	15d2e <str_out+0x14>
		ctx->count++;
   15d2a:	608d      	str	r5, [r1, #8]
}
   15d2c:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   15d2e:	3b01      	subs	r3, #1
   15d30:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   15d32:	bf08      	it	eq
   15d34:	2200      	moveq	r2, #0
   15d36:	608d      	str	r5, [r1, #8]
   15d38:	bf0c      	ite	eq
   15d3a:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   15d3c:	54a0      	strbne	r0, [r4, r2]
   15d3e:	e7f5      	b.n	15d2c <str_out+0x12>

00015d40 <printk>:
{
   15d40:	b40f      	push	{r0, r1, r2, r3}
   15d42:	b507      	push	{r0, r1, r2, lr}
   15d44:	a904      	add	r1, sp, #16
   15d46:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   15d4a:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   15d4c:	f7ed fc76 	bl	363c <vprintk>
}
   15d50:	b003      	add	sp, #12
   15d52:	f85d eb04 	ldr.w	lr, [sp], #4
   15d56:	b004      	add	sp, #16
   15d58:	4770      	bx	lr

00015d5a <snprintk>:
{
   15d5a:	b40c      	push	{r2, r3}
   15d5c:	b507      	push	{r0, r1, r2, lr}
   15d5e:	ab04      	add	r3, sp, #16
   15d60:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   15d64:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   15d66:	f7ed fc77 	bl	3658 <vsnprintk>
}
   15d6a:	b003      	add	sp, #12
   15d6c:	f85d eb04 	ldr.w	lr, [sp], #4
   15d70:	b002      	add	sp, #8
   15d72:	4770      	bx	lr

00015d74 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   15d74:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   15d76:	f013 0307 	ands.w	r3, r3, #7
   15d7a:	d105      	bne.n	15d88 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   15d7c:	6803      	ldr	r3, [r0, #0]
   15d7e:	2b00      	cmp	r3, #0
		evt = EVT_START;
   15d80:	bf0c      	ite	eq
   15d82:	2000      	moveq	r0, #0
   15d84:	2003      	movne	r0, #3
   15d86:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   15d88:	2b02      	cmp	r3, #2
   15d8a:	d105      	bne.n	15d98 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   15d8c:	8b43      	ldrh	r3, [r0, #26]
   15d8e:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   15d90:	bf14      	ite	ne
   15d92:	2000      	movne	r0, #0
   15d94:	2004      	moveq	r0, #4
   15d96:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   15d98:	2b01      	cmp	r3, #1
   15d9a:	d105      	bne.n	15da8 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   15d9c:	6803      	ldr	r3, [r0, #0]
   15d9e:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   15da0:	bf0c      	ite	eq
   15da2:	2000      	moveq	r0, #0
   15da4:	2005      	movne	r0, #5
   15da6:	4770      	bx	lr
	int evt = EVT_NOP;
   15da8:	2000      	movs	r0, #0
}
   15daa:	4770      	bx	lr

00015dac <notify_one>:
{
   15dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15db0:	460d      	mov	r5, r1
   15db2:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   15db4:	4619      	mov	r1, r3
   15db6:	1d28      	adds	r0, r5, #4
{
   15db8:	4690      	mov	r8, r2
   15dba:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   15dbc:	f7ff ff92 	bl	15ce4 <sys_notify_finalize>
	if (cb) {
   15dc0:	4604      	mov	r4, r0
   15dc2:	b138      	cbz	r0, 15dd4 <notify_one+0x28>
		cb(mgr, cli, state, res);
   15dc4:	4633      	mov	r3, r6
   15dc6:	4642      	mov	r2, r8
   15dc8:	4629      	mov	r1, r5
   15dca:	4638      	mov	r0, r7
   15dcc:	46a4      	mov	ip, r4
}
   15dce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   15dd2:	4760      	bx	ip
}
   15dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00015dd8 <transition_complete>:
{
   15dd8:	b410      	push	{r4}
	__asm__ volatile(
   15dda:	f04f 0420 	mov.w	r4, #32
   15dde:	f3ef 8211 	mrs	r2, BASEPRI
   15de2:	f384 8811 	msr	BASEPRI, r4
   15de6:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   15dea:	6141      	str	r1, [r0, #20]
}
   15dec:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   15dee:	2101      	movs	r1, #1
   15df0:	f7ed bc46 	b.w	3680 <process_event>

00015df4 <validate_args>:
{
   15df4:	b510      	push	{r4, lr}
   15df6:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   15df8:	b140      	cbz	r0, 15e0c <validate_args+0x18>
   15dfa:	b139      	cbz	r1, 15e0c <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   15dfc:	1d08      	adds	r0, r1, #4
   15dfe:	f7ff ff5d 	bl	15cbc <sys_notify_validate>
	if ((rv == 0)
   15e02:	b928      	cbnz	r0, 15e10 <validate_args+0x1c>
	    && ((cli->notify.flags
   15e04:	68a3      	ldr	r3, [r4, #8]
   15e06:	f033 0303 	bics.w	r3, r3, #3
   15e0a:	d001      	beq.n	15e10 <validate_args+0x1c>
		rv = -EINVAL;
   15e0c:	f06f 0015 	mvn.w	r0, #21
}
   15e10:	bd10      	pop	{r4, pc}

00015e12 <onoff_manager_init>:
{
   15e12:	b538      	push	{r3, r4, r5, lr}
   15e14:	460c      	mov	r4, r1
	if ((mgr == NULL)
   15e16:	4605      	mov	r5, r0
   15e18:	b158      	cbz	r0, 15e32 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   15e1a:	b151      	cbz	r1, 15e32 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   15e1c:	680b      	ldr	r3, [r1, #0]
   15e1e:	b143      	cbz	r3, 15e32 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   15e20:	684b      	ldr	r3, [r1, #4]
   15e22:	b133      	cbz	r3, 15e32 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   15e24:	221c      	movs	r2, #28
   15e26:	2100      	movs	r1, #0
   15e28:	f000 fe6d 	bl	16b06 <memset>
   15e2c:	612c      	str	r4, [r5, #16]
	return 0;
   15e2e:	2000      	movs	r0, #0
}
   15e30:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   15e32:	f06f 0015 	mvn.w	r0, #21
   15e36:	e7fb      	b.n	15e30 <onoff_manager_init+0x1e>

00015e38 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   15e38:	b570      	push	{r4, r5, r6, lr}
   15e3a:	4604      	mov	r4, r0
   15e3c:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   15e3e:	f7ff ffd9 	bl	15df4 <validate_args>

	if (rv < 0) {
   15e42:	1e05      	subs	r5, r0, #0
   15e44:	db31      	blt.n	15eaa <onoff_request+0x72>
   15e46:	f04f 0320 	mov.w	r3, #32
   15e4a:	f3ef 8111 	mrs	r1, BASEPRI
   15e4e:	f383 8811 	msr	BASEPRI, r3
   15e52:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   15e56:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   15e58:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   15e5a:	f64f 75ff 	movw	r5, #65535	; 0xffff
   15e5e:	42ab      	cmp	r3, r5
   15e60:	f000 0207 	and.w	r2, r0, #7
   15e64:	d02e      	beq.n	15ec4 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   15e66:	2a02      	cmp	r2, #2
   15e68:	d10e      	bne.n	15e88 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   15e6a:	3301      	adds	r3, #1
   15e6c:	8363      	strh	r3, [r4, #26]
	rv = state;
   15e6e:	4615      	mov	r5, r2
		notify = true;
   15e70:	2301      	movs	r3, #1
	__asm__ volatile(
   15e72:	f381 8811 	msr	BASEPRI, r1
   15e76:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   15e7a:	b1b3      	cbz	r3, 15eaa <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   15e7c:	2300      	movs	r3, #0
   15e7e:	4631      	mov	r1, r6
   15e80:	4620      	mov	r0, r4
   15e82:	f7ff ff93 	bl	15dac <notify_one>
   15e86:	e010      	b.n	15eaa <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   15e88:	0783      	lsls	r3, r0, #30
   15e8a:	d001      	beq.n	15e90 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   15e8c:	2a06      	cmp	r2, #6
   15e8e:	d10e      	bne.n	15eae <onoff_request+0x76>
	parent->next = child;
   15e90:	2300      	movs	r3, #0
   15e92:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   15e94:	6863      	ldr	r3, [r4, #4]
   15e96:	b993      	cbnz	r3, 15ebe <onoff_request+0x86>
	list->head = node;
   15e98:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   15e9c:	4615      	mov	r5, r2
   15e9e:	b962      	cbnz	r2, 15eba <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   15ea0:	460a      	mov	r2, r1
   15ea2:	4620      	mov	r0, r4
   15ea4:	2102      	movs	r1, #2
   15ea6:	f7ed fbeb 	bl	3680 <process_event>
		}
	}

	return rv;
}
   15eaa:	4628      	mov	r0, r5
   15eac:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   15eae:	2a05      	cmp	r2, #5
   15eb0:	bf0c      	ite	eq
   15eb2:	f06f 0522 	mvneq.w	r5, #34	; 0x22
   15eb6:	f06f 0504 	mvnne.w	r5, #4
   15eba:	2300      	movs	r3, #0
   15ebc:	e7d9      	b.n	15e72 <onoff_request+0x3a>
	parent->next = child;
   15ebe:	601e      	str	r6, [r3, #0]
	list->tail = node;
   15ec0:	6066      	str	r6, [r4, #4]
}
   15ec2:	e7eb      	b.n	15e9c <onoff_request+0x64>
		rv = -EAGAIN;
   15ec4:	f06f 050a 	mvn.w	r5, #10
   15ec8:	e7f7      	b.n	15eba <onoff_request+0x82>

00015eca <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   15eca:	b510      	push	{r4, lr}
	__asm__ volatile(
   15ecc:	f04f 0320 	mov.w	r3, #32
   15ed0:	f3ef 8211 	mrs	r2, BASEPRI
   15ed4:	f383 8811 	msr	BASEPRI, r3
   15ed8:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   15edc:	8b04      	ldrh	r4, [r0, #24]
   15ede:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   15ee2:	2c02      	cmp	r4, #2
   15ee4:	d00a      	beq.n	15efc <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
   15ee6:	2c01      	cmp	r4, #1
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   15ee8:	bf0c      	ite	eq
   15eea:	f06f 0004 	mvneq.w	r0, #4
   15eee:	f06f 0022 	mvnne.w	r0, #34	; 0x22
	__asm__ volatile(
   15ef2:	f382 8811 	msr	BASEPRI, r2
   15ef6:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   15efa:	e008      	b.n	15f0e <onoff_release+0x44>
	mgr->refs -= 1U;
   15efc:	8b43      	ldrh	r3, [r0, #26]
   15efe:	3b01      	subs	r3, #1
   15f00:	b29b      	uxth	r3, r3
   15f02:	8343      	strh	r3, [r0, #26]
	if (stop) {
   15f04:	b923      	cbnz	r3, 15f10 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   15f06:	4621      	mov	r1, r4
   15f08:	f7ed fbba 	bl	3680 <process_event>
	int rv = state;
   15f0c:	4620      	mov	r0, r4
}
   15f0e:	bd10      	pop	{r4, pc}
	int rv = state;
   15f10:	4620      	mov	r0, r4
   15f12:	e7ee      	b.n	15ef2 <onoff_release+0x28>

00015f14 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   15f14:	4604      	mov	r4, r0
   15f16:	b508      	push	{r3, lr}
   15f18:	4608      	mov	r0, r1
   15f1a:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   15f1c:	461a      	mov	r2, r3
   15f1e:	47a0      	blx	r4
	return z_impl_k_current_get();
   15f20:	f7ff f97e 	bl	15220 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   15f24:	f7ee fe9c 	bl	4c60 <z_impl_k_thread_abort>

00015f28 <chunk_field>:
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   15f28:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   15f2a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   15f2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   15f32:	bf2c      	ite	cs
   15f34:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   15f38:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   15f3c:	4770      	bx	lr

00015f3e <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   15f3e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   15f42:	6880      	ldr	r0, [r0, #8]
   15f44:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   15f48:	bf2c      	ite	cs
   15f4a:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   15f4e:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   15f52:	4770      	bx	lr

00015f54 <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
   15f54:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   15f56:	2201      	movs	r2, #1
   15f58:	f7ff ffe6 	bl	15f28 <chunk_field>
}
   15f5c:	0840      	lsrs	r0, r0, #1
   15f5e:	bd08      	pop	{r3, pc}

00015f60 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   15f60:	6883      	ldr	r3, [r0, #8]
   15f62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
   15f66:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   15f6a:	d308      	bcc.n	15f7e <set_chunk_used+0x1e>
		if (used) {
   15f6c:	684b      	ldr	r3, [r1, #4]
   15f6e:	b11a      	cbz	r2, 15f78 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   15f70:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   15f74:	604b      	str	r3, [r1, #4]
   15f76:	4770      	bx	lr
   15f78:	f023 0301 	bic.w	r3, r3, #1
   15f7c:	e7fa      	b.n	15f74 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
   15f7e:	884b      	ldrh	r3, [r1, #2]
   15f80:	b11a      	cbz	r2, 15f8a <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   15f82:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   15f86:	804b      	strh	r3, [r1, #2]
		}
	}
}
   15f88:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   15f8a:	f023 0301 	bic.w	r3, r3, #1
   15f8e:	e7fa      	b.n	15f86 <set_chunk_used+0x26>

00015f90 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   15f90:	0053      	lsls	r3, r2, #1
   15f92:	2201      	movs	r2, #1
   15f94:	f7ff bfd3 	b.w	15f3e <chunk_set>

00015f98 <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   15f98:	6880      	ldr	r0, [r0, #8]
	return chunksz * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   15f9a:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   15f9c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   15fa0:	bf2c      	ite	cs
   15fa2:	2002      	movcs	r0, #2
   15fa4:	2001      	movcc	r0, #1
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   15fa6:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
   15fa8:	fab0 f080 	clz	r0, r0
}
   15fac:	f1c0 001f 	rsb	r0, r0, #31
   15fb0:	4770      	bx	lr

00015fb2 <merge_chunks>:
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   15fb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15fb6:	4616      	mov	r6, r2
   15fb8:	4604      	mov	r4, r0
   15fba:	460f      	mov	r7, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   15fbc:	f7ff ffca 	bl	15f54 <chunk_size>
   15fc0:	4631      	mov	r1, r6
   15fc2:	4605      	mov	r5, r0
   15fc4:	4620      	mov	r0, r4
   15fc6:	f7ff ffc5 	bl	15f54 <chunk_size>
   15fca:	4405      	add	r5, r0

	set_chunk_size(h, lc, newsz);
   15fcc:	462a      	mov	r2, r5
   15fce:	4639      	mov	r1, r7
   15fd0:	4620      	mov	r0, r4
   15fd2:	f7ff ffdd 	bl	15f90 <set_chunk_size>
	return c + chunk_size(h, c);
   15fd6:	4631      	mov	r1, r6
   15fd8:	4620      	mov	r0, r4
   15fda:	f7ff ffbb 	bl	15f54 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   15fde:	462b      	mov	r3, r5
   15fe0:	1831      	adds	r1, r6, r0
   15fe2:	2200      	movs	r2, #0
   15fe4:	4620      	mov	r0, r4
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   15fe6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   15fea:	f7ff bfa8 	b.w	15f3e <chunk_set>

00015fee <split_chunks>:
{
   15fee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15ff2:	4614      	mov	r4, r2
   15ff4:	4605      	mov	r5, r0
   15ff6:	460e      	mov	r6, r1
	chunksz_t sz0 = chunk_size(h, lc);
   15ff8:	f7ff ffac 	bl	15f54 <chunk_size>
	chunksz_t lsz = rc - lc;
   15ffc:	eba4 0806 	sub.w	r8, r4, r6
	chunksz_t rsz = sz0 - lsz;
   16000:	1b37      	subs	r7, r6, r4
   16002:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   16004:	4642      	mov	r2, r8
   16006:	4631      	mov	r1, r6
   16008:	4628      	mov	r0, r5
   1600a:	f7ff ffc1 	bl	15f90 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   1600e:	463a      	mov	r2, r7
   16010:	4621      	mov	r1, r4
   16012:	4628      	mov	r0, r5
   16014:	f7ff ffbc 	bl	15f90 <set_chunk_size>
   16018:	4643      	mov	r3, r8
   1601a:	2200      	movs	r2, #0
   1601c:	4621      	mov	r1, r4
   1601e:	4628      	mov	r0, r5
   16020:	f7ff ff8d 	bl	15f3e <chunk_set>
	return c + chunk_size(h, c);
   16024:	4621      	mov	r1, r4
   16026:	4628      	mov	r0, r5
   16028:	f7ff ff94 	bl	15f54 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1602c:	463b      	mov	r3, r7
   1602e:	1821      	adds	r1, r4, r0
   16030:	2200      	movs	r2, #0
   16032:	4628      	mov	r0, r5
}
   16034:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   16038:	f7ff bf81 	b.w	15f3e <chunk_set>

0001603c <free_list_remove_bidx>:
{
   1603c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16040:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   16042:	2203      	movs	r2, #3
   16044:	460e      	mov	r6, r1
   16046:	4604      	mov	r4, r0
   16048:	f7ff ff6e 	bl	15f28 <chunk_field>
	if (next_free_chunk(h, c) == c) {
   1604c:	4286      	cmp	r6, r0
   1604e:	4605      	mov	r5, r0
   16050:	f107 0804 	add.w	r8, r7, #4
   16054:	d10b      	bne.n	1606e <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   16056:	2301      	movs	r3, #1
   16058:	fa03 f707 	lsl.w	r7, r3, r7
   1605c:	68e3      	ldr	r3, [r4, #12]
   1605e:	ea23 0307 	bic.w	r3, r3, r7
   16062:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   16064:	2300      	movs	r3, #0
   16066:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   1606a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   1606e:	4631      	mov	r1, r6
   16070:	2202      	movs	r2, #2
   16072:	4620      	mov	r0, r4
   16074:	f7ff ff58 	bl	15f28 <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
   16078:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
   1607a:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   1607c:	4601      	mov	r1, r0
		b->next = second;
   1607e:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   16082:	4620      	mov	r0, r4
   16084:	2203      	movs	r2, #3
   16086:	f7ff ff5a 	bl	15f3e <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1608a:	4633      	mov	r3, r6
   1608c:	4629      	mov	r1, r5
   1608e:	4620      	mov	r0, r4
   16090:	2202      	movs	r2, #2
}
   16092:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   16096:	f7ff bf52 	b.w	15f3e <chunk_set>

0001609a <free_list_remove>:
{
   1609a:	b538      	push	{r3, r4, r5, lr}
   1609c:	4604      	mov	r4, r0
   1609e:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   160a0:	f7ff ff58 	bl	15f54 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   160a4:	68a3      	ldr	r3, [r4, #8]
   160a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   160aa:	4601      	mov	r1, r0
   160ac:	d301      	bcc.n	160b2 <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   160ae:	2801      	cmp	r0, #1
   160b0:	d009      	beq.n	160c6 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   160b2:	4620      	mov	r0, r4
   160b4:	f7ff ff70 	bl	15f98 <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   160b8:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   160ba:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   160bc:	4620      	mov	r0, r4
}
   160be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   160c2:	f7ff bfbb 	b.w	1603c <free_list_remove_bidx>
}
   160c6:	bd38      	pop	{r3, r4, r5, pc}

000160c8 <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   160c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   160cc:	4605      	mov	r5, r0
   160ce:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   160d0:	f7ff ff62 	bl	15f98 <bucket_idx>
   160d4:	eb05 0a80 	add.w	sl, r5, r0, lsl #2
   160d8:	4606      	mov	r6, r0
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   160da:	f8da 9010 	ldr.w	r9, [sl, #16]
   160de:	f1b9 0f00 	cmp.w	r9, #0
   160e2:	d01b      	beq.n	1611c <alloc_chunk+0x54>
   160e4:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   160e6:	f8da 4010 	ldr.w	r4, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   160ea:	4628      	mov	r0, r5
   160ec:	4621      	mov	r1, r4
   160ee:	f7ff ff31 	bl	15f54 <chunk_size>
   160f2:	4540      	cmp	r0, r8
   160f4:	d307      	bcc.n	16106 <alloc_chunk+0x3e>
				free_list_remove_bidx(h, c, bi);
   160f6:	4632      	mov	r2, r6

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   160f8:	4621      	mov	r1, r4
   160fa:	4628      	mov	r0, r5
   160fc:	f7ff ff9e 	bl	1603c <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   16100:	4620      	mov	r0, r4
   16102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return chunk_field(h, c, FREE_NEXT);
   16106:	2203      	movs	r2, #3
   16108:	4621      	mov	r1, r4
   1610a:	4628      	mov	r0, r5
   1610c:	f7ff ff0c 	bl	15f28 <chunk_field>
		} while (--i && b->next != first);
   16110:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   16112:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   16116:	d001      	beq.n	1611c <alloc_chunk+0x54>
   16118:	4581      	cmp	r9, r0
   1611a:	d1e4      	bne.n	160e6 <alloc_chunk+0x1e>
	uint32_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   1611c:	68e9      	ldr	r1, [r5, #12]
   1611e:	3601      	adds	r6, #1
   16120:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   16124:	40b4      	lsls	r4, r6
	if (bmask != 0U) {
   16126:	400c      	ands	r4, r1
   16128:	d0ea      	beq.n	16100 <alloc_chunk+0x38>
		int minbucket = __builtin_ctz(bmask);
   1612a:	fa94 f2a4 	rbit	r2, r4
   1612e:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   16132:	1d13      	adds	r3, r2, #4
   16134:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
   16138:	e7de      	b.n	160f8 <alloc_chunk+0x30>

0001613a <free_list_add>:
{
   1613a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1613e:	4604      	mov	r4, r0
   16140:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   16142:	f7ff ff07 	bl	15f54 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   16146:	68a3      	ldr	r3, [r4, #8]
   16148:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1614c:	4601      	mov	r1, r0
   1614e:	d301      	bcc.n	16154 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   16150:	2801      	cmp	r0, #1
   16152:	d035      	beq.n	161c0 <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   16154:	4620      	mov	r0, r4
   16156:	f7ff ff1f 	bl	15f98 <bucket_idx>
	if (b->next == 0U) {
   1615a:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   1615e:	6916      	ldr	r6, [r2, #16]
   16160:	b99e      	cbnz	r6, 1618a <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   16162:	2301      	movs	r3, #1
   16164:	fa03 f000 	lsl.w	r0, r3, r0
   16168:	68e3      	ldr	r3, [r4, #12]
   1616a:	4303      	orrs	r3, r0
   1616c:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   1616e:	4629      	mov	r1, r5
		b->next = c;
   16170:	6115      	str	r5, [r2, #16]
   16172:	462b      	mov	r3, r5
   16174:	2202      	movs	r2, #2
   16176:	4620      	mov	r0, r4
   16178:	f7ff fee1 	bl	15f3e <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1617c:	2203      	movs	r2, #3
   1617e:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   16180:	4620      	mov	r0, r4
}
   16182:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   16186:	f7ff beda 	b.w	15f3e <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   1618a:	2202      	movs	r2, #2
   1618c:	4631      	mov	r1, r6
   1618e:	4620      	mov	r0, r4
   16190:	f7ff feca 	bl	15f28 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
   16194:	2202      	movs	r2, #2
   16196:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
   16198:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   1619a:	4629      	mov	r1, r5
   1619c:	4620      	mov	r0, r4
   1619e:	f7ff fece 	bl	15f3e <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   161a2:	4633      	mov	r3, r6
   161a4:	2203      	movs	r2, #3
   161a6:	4629      	mov	r1, r5
   161a8:	4620      	mov	r0, r4
   161aa:	f7ff fec8 	bl	15f3e <chunk_set>
   161ae:	2203      	movs	r2, #3
   161b0:	4639      	mov	r1, r7
   161b2:	462b      	mov	r3, r5
   161b4:	4620      	mov	r0, r4
   161b6:	f7ff fec2 	bl	15f3e <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   161ba:	2202      	movs	r2, #2
   161bc:	4631      	mov	r1, r6
   161be:	e7df      	b.n	16180 <free_list_add+0x46>
   161c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000161c4 <free_chunk>:
{
   161c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   161c6:	460c      	mov	r4, r1
   161c8:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   161ca:	f7ff fec3 	bl	15f54 <chunk_size>
   161ce:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   161d0:	2201      	movs	r2, #1
   161d2:	4631      	mov	r1, r6
   161d4:	4628      	mov	r0, r5
   161d6:	f7ff fea7 	bl	15f28 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   161da:	07c3      	lsls	r3, r0, #31
   161dc:	d40c      	bmi.n	161f8 <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
   161de:	4631      	mov	r1, r6
   161e0:	4628      	mov	r0, r5
   161e2:	f7ff ff5a 	bl	1609a <free_list_remove>
	return c + chunk_size(h, c);
   161e6:	4621      	mov	r1, r4
   161e8:	4628      	mov	r0, r5
   161ea:	f7ff feb3 	bl	15f54 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   161ee:	4621      	mov	r1, r4
   161f0:	1822      	adds	r2, r4, r0
   161f2:	4628      	mov	r0, r5
   161f4:	f7ff fedd 	bl	15fb2 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   161f8:	2200      	movs	r2, #0
   161fa:	4621      	mov	r1, r4
   161fc:	4628      	mov	r0, r5
   161fe:	f7ff fe93 	bl	15f28 <chunk_field>
   16202:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   16204:	2201      	movs	r2, #1
   16206:	4639      	mov	r1, r7
   16208:	4628      	mov	r0, r5
   1620a:	f7ff fe8d 	bl	15f28 <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   1620e:	f010 0601 	ands.w	r6, r0, #1
   16212:	d113      	bne.n	1623c <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
   16214:	4639      	mov	r1, r7
   16216:	4628      	mov	r0, r5
   16218:	f7ff ff3f 	bl	1609a <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   1621c:	4621      	mov	r1, r4
   1621e:	4632      	mov	r2, r6
   16220:	4628      	mov	r0, r5
   16222:	f7ff fe81 	bl	15f28 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   16226:	4622      	mov	r2, r4
   16228:	1a21      	subs	r1, r4, r0
   1622a:	4628      	mov	r0, r5
   1622c:	f7ff fec1 	bl	15fb2 <merge_chunks>
   16230:	4621      	mov	r1, r4
   16232:	4632      	mov	r2, r6
   16234:	4628      	mov	r0, r5
   16236:	f7ff fe77 	bl	15f28 <chunk_field>
   1623a:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   1623c:	4621      	mov	r1, r4
   1623e:	4628      	mov	r0, r5
}
   16240:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   16244:	f7ff bf79 	b.w	1613a <free_list_add>

00016248 <sys_heap_free>:
{
   16248:	b510      	push	{r4, lr}
	if (mem == NULL) {
   1624a:	b191      	cbz	r1, 16272 <sys_heap_free+0x2a>
	struct z_heap *h = heap->heap;
   1624c:	6800      	ldr	r0, [r0, #0]
	return big_heap(h) ? 8 : 4;
   1624e:	6883      	ldr	r3, [r0, #8]
   16250:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   16254:	bf2c      	ite	cs
   16256:	2408      	movcs	r4, #8
   16258:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1625a:	1b0c      	subs	r4, r1, r4
   1625c:	1a24      	subs	r4, r4, r0
   1625e:	08e4      	lsrs	r4, r4, #3
	set_chunk_used(h, c, false);
   16260:	4621      	mov	r1, r4
   16262:	2200      	movs	r2, #0
   16264:	f7ff fe7c 	bl	15f60 <set_chunk_used>
	free_chunk(h, c);
   16268:	4621      	mov	r1, r4
}
   1626a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	free_chunk(h, c);
   1626e:	f7ff bfa9 	b.w	161c4 <free_chunk>
}
   16272:	bd10      	pop	{r4, pc}

00016274 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   16274:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   16276:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   16278:	b909      	cbnz	r1, 1627e <sys_heap_alloc+0xa>
		return NULL;
   1627a:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
   1627c:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   1627e:	68ab      	ldr	r3, [r5, #8]
   16280:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   16284:	d9f9      	bls.n	1627a <sys_heap_alloc+0x6>
   16286:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1628a:	bf2c      	ite	cs
   1628c:	2208      	movcs	r2, #8
   1628e:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   16290:	1dcc      	adds	r4, r1, #7
   16292:	4414      	add	r4, r2
   16294:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   16296:	4621      	mov	r1, r4
   16298:	4628      	mov	r0, r5
   1629a:	f7ff ff15 	bl	160c8 <alloc_chunk>
	if (c == 0U) {
   1629e:	4606      	mov	r6, r0
   162a0:	2800      	cmp	r0, #0
   162a2:	d0ea      	beq.n	1627a <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   162a4:	4601      	mov	r1, r0
   162a6:	4628      	mov	r0, r5
   162a8:	f7ff fe54 	bl	15f54 <chunk_size>
   162ac:	42a0      	cmp	r0, r4
   162ae:	d909      	bls.n	162c4 <sys_heap_alloc+0x50>
		split_chunks(h, c, c + chunk_sz);
   162b0:	4434      	add	r4, r6
   162b2:	4631      	mov	r1, r6
   162b4:	4628      	mov	r0, r5
   162b6:	4622      	mov	r2, r4
   162b8:	f7ff fe99 	bl	15fee <split_chunks>
		free_list_add(h, c + chunk_sz);
   162bc:	4621      	mov	r1, r4
   162be:	4628      	mov	r0, r5
   162c0:	f7ff ff3b 	bl	1613a <free_list_add>
	set_chunk_used(h, c, true);
   162c4:	4628      	mov	r0, r5
   162c6:	2201      	movs	r2, #1
   162c8:	4631      	mov	r1, r6
   162ca:	f7ff fe49 	bl	15f60 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   162ce:	68ab      	ldr	r3, [r5, #8]
   162d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   162d4:	bf2c      	ite	cs
   162d6:	2008      	movcs	r0, #8
   162d8:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   162da:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   162de:	4428      	add	r0, r5
	return chunk_mem(h, c);
   162e0:	e7cc      	b.n	1627c <sys_heap_alloc+0x8>

000162e2 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   162e2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_heap *h = heap->heap;
   162e6:	6806      	ldr	r6, [r0, #0]
{
   162e8:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   162ea:	424a      	negs	r2, r1
   162ec:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   162f0:	ea31 0202 	bics.w	r2, r1, r2
   162f4:	68b5      	ldr	r5, [r6, #8]
{
   162f6:	460b      	mov	r3, r1
	if (align != rew) {
   162f8:	d00f      	beq.n	1631a <sys_heap_aligned_alloc+0x38>
   162fa:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   162fe:	bf34      	ite	cc
   16300:	2104      	movcc	r1, #4
   16302:	2108      	movcs	r1, #8
   16304:	42b9      	cmp	r1, r7
   16306:	460a      	mov	r2, r1
   16308:	46b9      	mov	r9, r7
   1630a:	bf28      	it	cs
   1630c:	463a      	movcs	r2, r7
		align -= rew;
   1630e:	1bdf      	subs	r7, r3, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   16310:	b994      	cbnz	r4, 16338 <sys_heap_aligned_alloc+0x56>
		return NULL;
   16312:	2500      	movs	r5, #0
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
   16314:	4628      	mov	r0, r5
   16316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1631a:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1631e:	bf34      	ite	cc
   16320:	2204      	movcc	r2, #4
   16322:	2208      	movcs	r2, #8
		if (align <= chunk_header_bytes(h)) {
   16324:	4291      	cmp	r1, r2
   16326:	d804      	bhi.n	16332 <sys_heap_aligned_alloc+0x50>
			return sys_heap_alloc(heap, bytes);
   16328:	4621      	mov	r1, r4
}
   1632a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   1632e:	f7ff bfa1 	b.w	16274 <sys_heap_alloc>
		rew = 0;
   16332:	f04f 0900 	mov.w	r9, #0
   16336:	e7eb      	b.n	16310 <sys_heap_aligned_alloc+0x2e>
	if (bytes == 0 || size_too_big(h, bytes)) {
   16338:	ebb5 0fd4 	cmp.w	r5, r4, lsr #3
   1633c:	d9e9      	bls.n	16312 <sys_heap_aligned_alloc+0x30>
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   1633e:	1de1      	adds	r1, r4, #7
   16340:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   16344:	4439      	add	r1, r7
   16346:	bf2c      	ite	cs
   16348:	2308      	movcs	r3, #8
   1634a:	2304      	movcc	r3, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1634c:	1a89      	subs	r1, r1, r2
   1634e:	4419      	add	r1, r3
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   16350:	08c9      	lsrs	r1, r1, #3
   16352:	4630      	mov	r0, r6
   16354:	f7ff feb8 	bl	160c8 <alloc_chunk>
	if (c0 == 0) {
   16358:	4680      	mov	r8, r0
   1635a:	2800      	cmp	r0, #0
   1635c:	d0d9      	beq.n	16312 <sys_heap_aligned_alloc+0x30>
	return big_heap(h) ? 8 : 4;
   1635e:	68b3      	ldr	r3, [r6, #8]
   16360:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   16364:	bf2c      	ite	cs
   16366:	2308      	movcs	r3, #8
   16368:	2304      	movcc	r3, #4
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   1636a:	eb09 05c0 	add.w	r5, r9, r0, lsl #3
   1636e:	441d      	add	r5, r3
   16370:	1e7a      	subs	r2, r7, #1
   16372:	4435      	add	r5, r6
   16374:	427f      	negs	r7, r7
   16376:	4415      	add	r5, r2
   16378:	403d      	ands	r5, r7
   1637a:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1637e:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   16380:	1aeb      	subs	r3, r5, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   16382:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   16384:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   16386:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   1638a:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   1638c:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   16390:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   16394:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   16398:	d208      	bcs.n	163ac <sys_heap_aligned_alloc+0xca>
		split_chunks(h, c0, c);
   1639a:	4601      	mov	r1, r0
   1639c:	463a      	mov	r2, r7
   1639e:	4630      	mov	r0, r6
   163a0:	f7ff fe25 	bl	15fee <split_chunks>
		free_list_add(h, c0);
   163a4:	4641      	mov	r1, r8
   163a6:	4630      	mov	r0, r6
   163a8:	f7ff fec7 	bl	1613a <free_list_add>
	return c + chunk_size(h, c);
   163ac:	4639      	mov	r1, r7
   163ae:	4630      	mov	r0, r6
   163b0:	f7ff fdd0 	bl	15f54 <chunk_size>
   163b4:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   163b6:	4284      	cmp	r4, r0
   163b8:	d208      	bcs.n	163cc <sys_heap_aligned_alloc+0xea>
		split_chunks(h, c, c_end);
   163ba:	4639      	mov	r1, r7
   163bc:	4630      	mov	r0, r6
   163be:	4622      	mov	r2, r4
   163c0:	f7ff fe15 	bl	15fee <split_chunks>
		free_list_add(h, c_end);
   163c4:	4621      	mov	r1, r4
   163c6:	4630      	mov	r0, r6
   163c8:	f7ff feb7 	bl	1613a <free_list_add>
	set_chunk_used(h, c, true);
   163cc:	2201      	movs	r2, #1
   163ce:	4639      	mov	r1, r7
   163d0:	4630      	mov	r0, r6
   163d2:	f7ff fdc5 	bl	15f60 <set_chunk_used>
	return mem;
   163d6:	e79d      	b.n	16314 <sys_heap_aligned_alloc+0x32>

000163d8 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   163d8:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   163dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   163de:	bf2c      	ite	cs
   163e0:	2508      	movcs	r5, #8
   163e2:	2504      	movcc	r5, #4
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   163e4:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   163e6:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   163e8:	440d      	add	r5, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   163ea:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   163ee:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   163f2:	1b2d      	subs	r5, r5, r4
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   163f4:	2300      	movs	r3, #0
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   163f6:	08ed      	lsrs	r5, r5, #3
	heap->heap = h;
   163f8:	6004      	str	r4, [r0, #0]

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   163fa:	4629      	mov	r1, r5
	h->end_chunk = heap_sz;
   163fc:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
   163fe:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   16400:	4620      	mov	r0, r4
   16402:	f7ff fdc9 	bl	15f98 <bucket_idx>
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   16406:	0086      	lsls	r6, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   16408:	361b      	adds	r6, #27
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1640a:	1c41      	adds	r1, r0, #1
   1640c:	08f6      	lsrs	r6, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1640e:	f104 0210 	add.w	r2, r4, #16
		h->buckets[i].next = 0;
   16412:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
   16414:	428b      	cmp	r3, r1
   16416:	db2f      	blt.n	16478 <sys_heap_init+0xa0>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   16418:	4632      	mov	r2, r6
   1641a:	4620      	mov	r0, r4
   1641c:	2100      	movs	r1, #0
   1641e:	f7ff fdb7 	bl	15f90 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   16422:	2300      	movs	r3, #0
   16424:	461a      	mov	r2, r3
   16426:	4619      	mov	r1, r3
   16428:	4620      	mov	r0, r4
   1642a:	f7ff fd88 	bl	15f3e <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1642e:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
   16430:	4620      	mov	r0, r4
   16432:	2201      	movs	r2, #1
   16434:	2100      	movs	r1, #0
   16436:	f7ff fd93 	bl	15f60 <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1643a:	463a      	mov	r2, r7
   1643c:	4631      	mov	r1, r6
   1643e:	f7ff fda7 	bl	15f90 <set_chunk_size>
   16442:	4633      	mov	r3, r6
   16444:	4631      	mov	r1, r6
   16446:	4620      	mov	r0, r4
   16448:	2200      	movs	r2, #0
   1644a:	f7ff fd78 	bl	15f3e <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
   1644e:	4629      	mov	r1, r5
   16450:	4620      	mov	r0, r4
   16452:	2200      	movs	r2, #0
   16454:	f7ff fd9c 	bl	15f90 <set_chunk_size>
   16458:	463b      	mov	r3, r7
   1645a:	4629      	mov	r1, r5
   1645c:	4620      	mov	r0, r4
   1645e:	2200      	movs	r2, #0
   16460:	f7ff fd6d 	bl	15f3e <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
   16464:	4629      	mov	r1, r5
   16466:	4620      	mov	r0, r4
   16468:	2201      	movs	r2, #1
   1646a:	f7ff fd79 	bl	15f60 <set_chunk_used>

	free_list_add(h, chunk0_size);
   1646e:	4631      	mov	r1, r6
}
   16470:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   16474:	f7ff be61 	b.w	1613a <free_list_add>
		h->buckets[i].next = 0;
   16478:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   1647c:	3301      	adds	r3, #1
   1647e:	e7c9      	b.n	16414 <sys_heap_init+0x3c>

00016480 <encode_uint>:
{
   16480:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16484:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   16486:	78d3      	ldrb	r3, [r2, #3]
{
   16488:	4614      	mov	r4, r2
	switch (specifier) {
   1648a:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1648c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
   16490:	4606      	mov	r6, r0
   16492:	460f      	mov	r7, r1
   16494:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   16496:	d02d      	beq.n	164f4 <encode_uint+0x74>
   16498:	d828      	bhi.n	164ec <encode_uint+0x6c>
		return 16;
   1649a:	2b58      	cmp	r3, #88	; 0x58
   1649c:	bf14      	ite	ne
   1649e:	250a      	movne	r5, #10
   164a0:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
   164a2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
   164a6:	46aa      	mov	sl, r5
   164a8:	f04f 0b00 	mov.w	fp, #0
   164ac:	4652      	mov	r2, sl
   164ae:	465b      	mov	r3, fp
   164b0:	4630      	mov	r0, r6
   164b2:	4639      	mov	r1, r7
   164b4:	f7e9 fe24 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   164b8:	2a09      	cmp	r2, #9
   164ba:	b2d3      	uxtb	r3, r2
   164bc:	d81f      	bhi.n	164fe <encode_uint+0x7e>
   164be:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   164c0:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   164c2:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   164c4:	bf08      	it	eq
   164c6:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   164c8:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   164cc:	d301      	bcc.n	164d2 <encode_uint+0x52>
   164ce:	45c8      	cmp	r8, r9
   164d0:	d812      	bhi.n	164f8 <encode_uint+0x78>
	if (conv->flag_hash) {
   164d2:	7823      	ldrb	r3, [r4, #0]
   164d4:	069b      	lsls	r3, r3, #26
   164d6:	d505      	bpl.n	164e4 <encode_uint+0x64>
		if (radix == 8) {
   164d8:	2d08      	cmp	r5, #8
   164da:	d116      	bne.n	1650a <encode_uint+0x8a>
			conv->altform_0 = true;
   164dc:	78a3      	ldrb	r3, [r4, #2]
   164de:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   164e2:	70a3      	strb	r3, [r4, #2]
}
   164e4:	4640      	mov	r0, r8
   164e6:	b003      	add	sp, #12
   164e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   164ec:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   164f0:	2b70      	cmp	r3, #112	; 0x70
   164f2:	e7d3      	b.n	1649c <encode_uint+0x1c>
	switch (specifier) {
   164f4:	2508      	movs	r5, #8
   164f6:	e7d4      	b.n	164a2 <encode_uint+0x22>
		value /= radix;
   164f8:	4606      	mov	r6, r0
   164fa:	460f      	mov	r7, r1
   164fc:	e7d6      	b.n	164ac <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   164fe:	9a01      	ldr	r2, [sp, #4]
   16500:	2a19      	cmp	r2, #25
   16502:	bf94      	ite	ls
   16504:	3337      	addls	r3, #55	; 0x37
   16506:	3357      	addhi	r3, #87	; 0x57
   16508:	e7da      	b.n	164c0 <encode_uint+0x40>
		} else if (radix == 16) {
   1650a:	2d10      	cmp	r5, #16
   1650c:	d1ea      	bne.n	164e4 <encode_uint+0x64>
			conv->altform_0c = true;
   1650e:	78a3      	ldrb	r3, [r4, #2]
   16510:	f043 0310 	orr.w	r3, r3, #16
   16514:	e7e5      	b.n	164e2 <encode_uint+0x62>

00016516 <outs>:
{
   16516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1651a:	4607      	mov	r7, r0
   1651c:	4688      	mov	r8, r1
   1651e:	4615      	mov	r5, r2
   16520:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   16522:	4614      	mov	r4, r2
   16524:	42b4      	cmp	r4, r6
   16526:	eba4 0005 	sub.w	r0, r4, r5
   1652a:	d302      	bcc.n	16532 <outs+0x1c>
   1652c:	b93e      	cbnz	r6, 1653e <outs+0x28>
   1652e:	7823      	ldrb	r3, [r4, #0]
   16530:	b12b      	cbz	r3, 1653e <outs+0x28>
		int rc = out((int)*sp++, ctx);
   16532:	f814 0b01 	ldrb.w	r0, [r4], #1
   16536:	4641      	mov	r1, r8
   16538:	47b8      	blx	r7
		if (rc < 0) {
   1653a:	2800      	cmp	r0, #0
   1653c:	daf2      	bge.n	16524 <outs+0xe>
}
   1653e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00016542 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   16542:	4770      	bx	lr

00016544 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   16544:	2200      	movs	r2, #0
   16546:	8002      	strh	r2, [r0, #0]
   16548:	6042      	str	r2, [r0, #4]
}
   1654a:	4770      	bx	lr

0001654c <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1654c:	6902      	ldr	r2, [r0, #16]
   1654e:	b2cb      	uxtb	r3, r1
   16550:	210c      	movs	r1, #12
   16552:	fb03 2101 	mla	r1, r3, r1, r2
   16556:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
   16558:	f000 0007 	and.w	r0, r0, #7
   1655c:	4770      	bx	lr

0001655e <set_off_state>:
	__asm__ volatile(
   1655e:	f04f 0320 	mov.w	r3, #32
   16562:	f3ef 8211 	mrs	r2, BASEPRI
   16566:	f383 8811 	msr	BASEPRI, r3
   1656a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1656e:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   16570:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   16574:	d001      	beq.n	1657a <set_off_state+0x1c>
   16576:	428b      	cmp	r3, r1
   16578:	d107      	bne.n	1658a <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1657a:	2301      	movs	r3, #1
   1657c:	6003      	str	r3, [r0, #0]
	int err = 0;
   1657e:	2000      	movs	r0, #0
	__asm__ volatile(
   16580:	f382 8811 	msr	BASEPRI, r2
   16584:	f3bf 8f6f 	isb	sy
}
   16588:	4770      	bx	lr
		err = -EPERM;
   1658a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1658e:	e7f7      	b.n	16580 <set_off_state+0x22>

00016590 <set_starting_state>:
{
   16590:	b510      	push	{r4, lr}
	__asm__ volatile(
   16592:	f04f 0320 	mov.w	r3, #32
   16596:	f3ef 8211 	mrs	r2, BASEPRI
   1659a:	f383 8811 	msr	BASEPRI, r3
   1659e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   165a2:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   165a4:	f003 0407 	and.w	r4, r3, #7
   165a8:	2c01      	cmp	r4, #1
   165aa:	d106      	bne.n	165ba <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   165ac:	6001      	str	r1, [r0, #0]
	int err = 0;
   165ae:	2000      	movs	r0, #0
	__asm__ volatile(
   165b0:	f382 8811 	msr	BASEPRI, r2
   165b4:	f3bf 8f6f 	isb	sy
}
   165b8:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   165ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   165be:	428b      	cmp	r3, r1
		err = -EALREADY;
   165c0:	bf14      	ite	ne
   165c2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   165c6:	f06f 0044 	mvneq.w	r0, #68	; 0x44
   165ca:	e7f1      	b.n	165b0 <set_starting_state+0x20>

000165cc <set_on_state>:
	__asm__ volatile(
   165cc:	f04f 0320 	mov.w	r3, #32
   165d0:	f3ef 8211 	mrs	r2, BASEPRI
   165d4:	f383 8811 	msr	BASEPRI, r3
   165d8:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   165dc:	6803      	ldr	r3, [r0, #0]
   165de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   165e2:	f043 0302 	orr.w	r3, r3, #2
   165e6:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   165e8:	f382 8811 	msr	BASEPRI, r2
   165ec:	f3bf 8f6f 	isb	sy
}
   165f0:	4770      	bx	lr

000165f2 <onoff_started_callback>:
	return &data->mgr[type];
   165f2:	6900      	ldr	r0, [r0, #16]
{
   165f4:	b410      	push	{r4}
	return &data->mgr[type];
   165f6:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   165f8:	241c      	movs	r4, #28
   165fa:	fb03 0004 	mla	r0, r3, r4, r0
   165fe:	2100      	movs	r1, #0
}
   16600:	bc10      	pop	{r4}
	notify(mgr, 0);
   16602:	4710      	bx	r2

00016604 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   16604:	2000      	movs	r0, #0
   16606:	f7fe b87b 	b.w	14700 <nrfx_clock_start>

0001660a <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1660a:	2000      	movs	r0, #0
   1660c:	f7fe b8aa 	b.w	14764 <nrfx_clock_stop>

00016610 <blocking_start_callback>:
{
   16610:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   16612:	f7fe be7f 	b.w	15314 <z_impl_k_sem_give>

00016616 <api_stop>:
{
   16616:	b538      	push	{r3, r4, r5, lr}
   16618:	b2cc      	uxtb	r4, r1
	err = set_off_state(&subdata->flags, ctx);
   1661a:	230c      	movs	r3, #12
{
   1661c:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   1661e:	4363      	muls	r3, r4
   16620:	6900      	ldr	r0, [r0, #16]
   16622:	3340      	adds	r3, #64	; 0x40
   16624:	2180      	movs	r1, #128	; 0x80
   16626:	4418      	add	r0, r3
   16628:	f7ff ff99 	bl	1655e <set_off_state>
	if (err < 0) {
   1662c:	2800      	cmp	r0, #0
   1662e:	db05      	blt.n	1663c <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   16630:	6869      	ldr	r1, [r5, #4]
   16632:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
   16636:	6863      	ldr	r3, [r4, #4]
   16638:	4798      	blx	r3
	return 0;
   1663a:	2000      	movs	r0, #0
}
   1663c:	bd38      	pop	{r3, r4, r5, pc}

0001663e <api_start>:
{
   1663e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16642:	b2cd      	uxtb	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
   16644:	270c      	movs	r7, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   16646:	6904      	ldr	r4, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
   16648:	436f      	muls	r7, r5
{
   1664a:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   1664c:	f107 0040 	add.w	r0, r7, #64	; 0x40
   16650:	2180      	movs	r1, #128	; 0x80
   16652:	4420      	add	r0, r4
{
   16654:	4690      	mov	r8, r2
   16656:	4699      	mov	r9, r3
	err = set_starting_state(&subdata->flags, ctx);
   16658:	f7ff ff9a 	bl	16590 <set_starting_state>
	if (err < 0) {
   1665c:	2800      	cmp	r0, #0
   1665e:	db07      	blt.n	16670 <api_start+0x32>
	subdata->cb = cb;
   16660:	443c      	add	r4, r7
	subdata->user_data = user_data;
   16662:	e9c4 890e 	strd	r8, r9, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   16666:	6873      	ldr	r3, [r6, #4]
   16668:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
   1666c:	4798      	blx	r3
	return 0;
   1666e:	2000      	movs	r0, #0
}
   16670:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00016674 <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   16674:	4770      	bx	lr

00016676 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   16676:	4770      	bx	lr

00016678 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   16678:	b538      	push	{r3, r4, r5, lr}
   1667a:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   1667c:	42ab      	cmp	r3, r5
{
   1667e:	4611      	mov	r1, r2
   16680:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   16682:	d804      	bhi.n	1668e <_copy+0x16>
		(void)memcpy(to, from, from_len);
   16684:	461a      	mov	r2, r3
   16686:	f000 fa13 	bl	16ab0 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   1668a:	4620      	mov	r0, r4
   1668c:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1668e:	2400      	movs	r4, #0
   16690:	e7fb      	b.n	1668a <_copy+0x12>

00016692 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   16692:	f000 ba38 	b.w	16b06 <memset>

00016696 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   16696:	09c3      	lsrs	r3, r0, #7
   16698:	005a      	lsls	r2, r3, #1
   1669a:	4413      	add	r3, r2
   1669c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   166a0:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   166a4:	b2c0      	uxtb	r0, r0
   166a6:	4770      	bx	lr

000166a8 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   166a8:	78cb      	ldrb	r3, [r1, #3]
   166aa:	7802      	ldrb	r2, [r0, #0]
   166ac:	4053      	eors	r3, r2
   166ae:	7003      	strb	r3, [r0, #0]
   166b0:	884b      	ldrh	r3, [r1, #2]
   166b2:	7842      	ldrb	r2, [r0, #1]
   166b4:	4053      	eors	r3, r2
   166b6:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   166b8:	680a      	ldr	r2, [r1, #0]
   166ba:	7883      	ldrb	r3, [r0, #2]
   166bc:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   166c0:	7083      	strb	r3, [r0, #2]
   166c2:	680a      	ldr	r2, [r1, #0]
   166c4:	78c3      	ldrb	r3, [r0, #3]
   166c6:	4053      	eors	r3, r2
   166c8:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   166ca:	79cb      	ldrb	r3, [r1, #7]
   166cc:	7902      	ldrb	r2, [r0, #4]
   166ce:	4053      	eors	r3, r2
   166d0:	7103      	strb	r3, [r0, #4]
   166d2:	88cb      	ldrh	r3, [r1, #6]
   166d4:	7942      	ldrb	r2, [r0, #5]
   166d6:	4053      	eors	r3, r2
   166d8:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   166da:	684a      	ldr	r2, [r1, #4]
   166dc:	7983      	ldrb	r3, [r0, #6]
   166de:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   166e2:	7183      	strb	r3, [r0, #6]
   166e4:	684a      	ldr	r2, [r1, #4]
   166e6:	79c3      	ldrb	r3, [r0, #7]
   166e8:	4053      	eors	r3, r2
   166ea:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   166ec:	7acb      	ldrb	r3, [r1, #11]
   166ee:	7a02      	ldrb	r2, [r0, #8]
   166f0:	4053      	eors	r3, r2
   166f2:	7203      	strb	r3, [r0, #8]
   166f4:	7a42      	ldrb	r2, [r0, #9]
   166f6:	894b      	ldrh	r3, [r1, #10]
   166f8:	4053      	eors	r3, r2
   166fa:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   166fc:	688a      	ldr	r2, [r1, #8]
   166fe:	7a83      	ldrb	r3, [r0, #10]
   16700:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   16704:	7283      	strb	r3, [r0, #10]
   16706:	688a      	ldr	r2, [r1, #8]
   16708:	7ac3      	ldrb	r3, [r0, #11]
   1670a:	4053      	eors	r3, r2
   1670c:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1670e:	7bcb      	ldrb	r3, [r1, #15]
   16710:	7b02      	ldrb	r2, [r0, #12]
   16712:	4053      	eors	r3, r2
   16714:	7303      	strb	r3, [r0, #12]
   16716:	89cb      	ldrh	r3, [r1, #14]
   16718:	7b42      	ldrb	r2, [r0, #13]
   1671a:	4053      	eors	r3, r2
   1671c:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1671e:	68ca      	ldr	r2, [r1, #12]
   16720:	7b83      	ldrb	r3, [r0, #14]
   16722:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   16726:	7383      	strb	r3, [r0, #14]
   16728:	68ca      	ldr	r2, [r1, #12]
   1672a:	7bc3      	ldrb	r3, [r0, #15]
   1672c:	4053      	eors	r3, r2
   1672e:	73c3      	strb	r3, [r0, #15]
}
   16730:	4770      	bx	lr

00016732 <shift_rows>:
{
   16732:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   16734:	7802      	ldrb	r2, [r0, #0]
   16736:	f88d 2000 	strb.w	r2, [sp]
   1673a:	7942      	ldrb	r2, [r0, #5]
   1673c:	f88d 2001 	strb.w	r2, [sp, #1]
   16740:	7a82      	ldrb	r2, [r0, #10]
   16742:	f88d 2002 	strb.w	r2, [sp, #2]
   16746:	7bc2      	ldrb	r2, [r0, #15]
   16748:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1674c:	7902      	ldrb	r2, [r0, #4]
   1674e:	f88d 2004 	strb.w	r2, [sp, #4]
   16752:	7a42      	ldrb	r2, [r0, #9]
   16754:	f88d 2005 	strb.w	r2, [sp, #5]
   16758:	7b82      	ldrb	r2, [r0, #14]
   1675a:	f88d 2006 	strb.w	r2, [sp, #6]
   1675e:	78c2      	ldrb	r2, [r0, #3]
   16760:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   16764:	7a02      	ldrb	r2, [r0, #8]
   16766:	f88d 2008 	strb.w	r2, [sp, #8]
   1676a:	7b42      	ldrb	r2, [r0, #13]
   1676c:	f88d 2009 	strb.w	r2, [sp, #9]
   16770:	7882      	ldrb	r2, [r0, #2]
   16772:	f88d 200a 	strb.w	r2, [sp, #10]
   16776:	79c2      	ldrb	r2, [r0, #7]
   16778:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1677c:	7b02      	ldrb	r2, [r0, #12]
   1677e:	f88d 200c 	strb.w	r2, [sp, #12]
   16782:	7842      	ldrb	r2, [r0, #1]
   16784:	7ac3      	ldrb	r3, [r0, #11]
   16786:	f88d 200d 	strb.w	r2, [sp, #13]
   1678a:	7982      	ldrb	r2, [r0, #6]
   1678c:	f88d 200e 	strb.w	r2, [sp, #14]
   16790:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   16794:	2310      	movs	r3, #16
   16796:	466a      	mov	r2, sp
   16798:	4619      	mov	r1, r3
   1679a:	f7ff ff6d 	bl	16678 <_copy>
}
   1679e:	b005      	add	sp, #20
   167a0:	f85d fb04 	ldr.w	pc, [sp], #4

000167a4 <mult_row_column>:
{
   167a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   167a6:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   167a8:	7808      	ldrb	r0, [r1, #0]
{
   167aa:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   167ac:	f7ff ff73 	bl	16696 <_double_byte>
   167b0:	4605      	mov	r5, r0
   167b2:	7860      	ldrb	r0, [r4, #1]
   167b4:	f7ff ff6f 	bl	16696 <_double_byte>
   167b8:	78a2      	ldrb	r2, [r4, #2]
   167ba:	7863      	ldrb	r3, [r4, #1]
   167bc:	4053      	eors	r3, r2
   167be:	78e2      	ldrb	r2, [r4, #3]
   167c0:	4053      	eors	r3, r2
   167c2:	405d      	eors	r5, r3
   167c4:	4045      	eors	r5, r0
   167c6:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   167c8:	7860      	ldrb	r0, [r4, #1]
   167ca:	7827      	ldrb	r7, [r4, #0]
   167cc:	f7ff ff63 	bl	16696 <_double_byte>
   167d0:	4605      	mov	r5, r0
   167d2:	78a0      	ldrb	r0, [r4, #2]
   167d4:	f7ff ff5f 	bl	16696 <_double_byte>
   167d8:	78a3      	ldrb	r3, [r4, #2]
   167da:	405f      	eors	r7, r3
   167dc:	78e3      	ldrb	r3, [r4, #3]
   167de:	405f      	eors	r7, r3
   167e0:	407d      	eors	r5, r7
   167e2:	4045      	eors	r5, r0
   167e4:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   167e6:	78a0      	ldrb	r0, [r4, #2]
   167e8:	7865      	ldrb	r5, [r4, #1]
   167ea:	7827      	ldrb	r7, [r4, #0]
   167ec:	f7ff ff53 	bl	16696 <_double_byte>
   167f0:	406f      	eors	r7, r5
   167f2:	4605      	mov	r5, r0
   167f4:	78e0      	ldrb	r0, [r4, #3]
   167f6:	f7ff ff4e 	bl	16696 <_double_byte>
   167fa:	78e3      	ldrb	r3, [r4, #3]
   167fc:	405f      	eors	r7, r3
   167fe:	407d      	eors	r5, r7
   16800:	4045      	eors	r5, r0
   16802:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   16804:	7820      	ldrb	r0, [r4, #0]
   16806:	f7ff ff46 	bl	16696 <_double_byte>
   1680a:	7863      	ldrb	r3, [r4, #1]
   1680c:	7825      	ldrb	r5, [r4, #0]
   1680e:	405d      	eors	r5, r3
   16810:	78a3      	ldrb	r3, [r4, #2]
   16812:	405d      	eors	r5, r3
   16814:	4045      	eors	r5, r0
   16816:	78e0      	ldrb	r0, [r4, #3]
   16818:	f7ff ff3d 	bl	16696 <_double_byte>
   1681c:	b2ed      	uxtb	r5, r5
   1681e:	4045      	eors	r5, r0
   16820:	70f5      	strb	r5, [r6, #3]
}
   16822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00016824 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   16824:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   16826:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   16828:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1682a:	f912 3b10 	ldrsb.w	r3, [r2], #16
   1682e:	2b00      	cmp	r3, #0
   16830:	bfb4      	ite	lt
   16832:	2387      	movlt	r3, #135	; 0x87
   16834:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   16836:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1683a:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   1683e:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   16840:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   16844:	d002      	beq.n	1684c <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   16846:	7813      	ldrb	r3, [r2, #0]
   16848:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   1684a:	e7f4      	b.n	16836 <gf_double+0x12>
	}
}
   1684c:	bd10      	pop	{r4, pc}

0001684e <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   1684e:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   16850:	b120      	cbz	r0, 1685c <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   16852:	2258      	movs	r2, #88	; 0x58
   16854:	2100      	movs	r1, #0
   16856:	f7ff ff1c 	bl	16692 <_set>
   1685a:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1685c:	bd08      	pop	{r3, pc}

0001685e <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   1685e:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   16860:	4604      	mov	r4, r0
   16862:	b188      	cbz	r0, 16888 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   16864:	2210      	movs	r2, #16
   16866:	2100      	movs	r1, #0
   16868:	f7ff ff13 	bl	16692 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   1686c:	2210      	movs	r2, #16
   1686e:	f104 0030 	add.w	r0, r4, #48	; 0x30
   16872:	2100      	movs	r1, #0
   16874:	f7ff ff0d 	bl	16692 <_set>
	s->leftover_offset = 0;
   16878:	2300      	movs	r3, #0
   1687a:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   1687c:	2200      	movs	r2, #0
   1687e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   16882:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   16886:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   16888:	bd10      	pop	{r4, pc}

0001688a <tc_cmac_setup>:
{
   1688a:	b570      	push	{r4, r5, r6, lr}
   1688c:	460d      	mov	r5, r1
   1688e:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   16890:	4604      	mov	r4, r0
   16892:	b310      	cbz	r0, 168da <tc_cmac_setup+0x50>
   16894:	b311      	cbz	r1, 168dc <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   16896:	2258      	movs	r2, #88	; 0x58
   16898:	2100      	movs	r1, #0
   1689a:	f7ff fefa 	bl	16692 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   1689e:	4629      	mov	r1, r5
	s->sched = sched;
   168a0:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   168a2:	4630      	mov	r0, r6
   168a4:	f7ed feda 	bl	465c <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   168a8:	2210      	movs	r2, #16
   168aa:	2100      	movs	r1, #0
   168ac:	4620      	mov	r0, r4
   168ae:	f7ff fef0 	bl	16692 <_set>
	gf_double (s->K1, s->iv);
   168b2:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   168b6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   168b8:	4621      	mov	r1, r4
   168ba:	4620      	mov	r0, r4
   168bc:	f7ed ff20 	bl	4700 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   168c0:	4621      	mov	r1, r4
   168c2:	4628      	mov	r0, r5
   168c4:	f7ff ffae 	bl	16824 <gf_double>
	gf_double (s->K2, s->K1);
   168c8:	4629      	mov	r1, r5
   168ca:	f104 0020 	add.w	r0, r4, #32
   168ce:	f7ff ffa9 	bl	16824 <gf_double>
	tc_cmac_init(s);
   168d2:	4620      	mov	r0, r4
   168d4:	f7ff ffc3 	bl	1685e <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   168d8:	2001      	movs	r0, #1
}
   168da:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   168dc:	4608      	mov	r0, r1
   168de:	e7fc      	b.n	168da <tc_cmac_setup+0x50>

000168e0 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   168e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   168e4:	460d      	mov	r5, r1
   168e6:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   168e8:	4604      	mov	r4, r0
   168ea:	2800      	cmp	r0, #0
   168ec:	d062      	beq.n	169b4 <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   168ee:	b912      	cbnz	r2, 168f6 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   168f0:	2001      	movs	r0, #1
}
   168f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   168f6:	2900      	cmp	r1, #0
   168f8:	d05c      	beq.n	169b4 <tc_cmac_update+0xd4>
	if (s->countdown == 0) {
   168fa:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   168fe:	ea50 0301 	orrs.w	r3, r0, r1
   16902:	d057      	beq.n	169b4 <tc_cmac_update+0xd4>
	s->countdown--;
   16904:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
	if (s->leftover_offset > 0) {
   16908:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   1690c:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
   16910:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   16914:	f1b8 0f00 	cmp.w	r8, #0
   16918:	d02a      	beq.n	16970 <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   1691a:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   1691e:	f108 0030 	add.w	r0, r8, #48	; 0x30
   16922:	42be      	cmp	r6, r7
   16924:	4420      	add	r0, r4
   16926:	d208      	bcs.n	1693a <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   16928:	462a      	mov	r2, r5
   1692a:	4633      	mov	r3, r6
   1692c:	4631      	mov	r1, r6
   1692e:	f7ff fea3 	bl	16678 <_copy>
			s->leftover_offset += data_length;
   16932:	6c62      	ldr	r2, [r4, #68]	; 0x44
   16934:	4432      	add	r2, r6
   16936:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   16938:	e7da      	b.n	168f0 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   1693a:	463b      	mov	r3, r7
   1693c:	462a      	mov	r2, r5
   1693e:	4639      	mov	r1, r7
   16940:	f7ff fe9a 	bl	16678 <_copy>
		data_length -= remaining_space;
   16944:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   16946:	2300      	movs	r3, #0
   16948:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   1694a:	4446      	add	r6, r8
		data += remaining_space;
   1694c:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1694e:	1e63      	subs	r3, r4, #1
   16950:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   16954:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   16958:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1695c:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   1695e:	ea82 0200 	eor.w	r2, r2, r0
   16962:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   16964:	d1f6      	bne.n	16954 <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   16966:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   16968:	4621      	mov	r1, r4
   1696a:	4620      	mov	r0, r4
   1696c:	f7ed fec8 	bl	4700 <tc_aes_encrypt>
   16970:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   16974:	2e10      	cmp	r6, #16
   16976:	d80a      	bhi.n	1698e <tc_cmac_update+0xae>
	if (data_length > 0) {
   16978:	2e00      	cmp	r6, #0
   1697a:	d0b9      	beq.n	168f0 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   1697c:	4633      	mov	r3, r6
   1697e:	462a      	mov	r2, r5
   16980:	4631      	mov	r1, r6
   16982:	f104 0030 	add.w	r0, r4, #48	; 0x30
   16986:	f7ff fe77 	bl	16678 <_copy>
		s->leftover_offset = data_length;
   1698a:	6466      	str	r6, [r4, #68]	; 0x44
   1698c:	e7b0      	b.n	168f0 <tc_cmac_update+0x10>
   1698e:	1e63      	subs	r3, r4, #1
   16990:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   16992:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   16996:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1699a:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   1699c:	ea82 0200 	eor.w	r2, r2, r0
   169a0:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   169a2:	d1f6      	bne.n	16992 <tc_cmac_update+0xb2>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   169a4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   169a6:	4621      	mov	r1, r4
   169a8:	4620      	mov	r0, r4
   169aa:	f7ed fea9 	bl	4700 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   169ae:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   169b0:	3e10      	subs	r6, #16
   169b2:	e7df      	b.n	16974 <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   169b4:	2000      	movs	r0, #0
   169b6:	e79c      	b.n	168f2 <tc_cmac_update+0x12>

000169b8 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   169b8:	b570      	push	{r4, r5, r6, lr}
   169ba:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   169bc:	4605      	mov	r5, r0
   169be:	b1e8      	cbz	r0, 169fc <tc_cmac_final+0x44>
   169c0:	b369      	cbz	r1, 16a1e <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   169c2:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   169c4:	2a10      	cmp	r2, #16
   169c6:	d11a      	bne.n	169fe <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   169c8:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   169ca:	1e63      	subs	r3, r4, #1
   169cc:	3901      	subs	r1, #1
   169ce:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   169d2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   169d6:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   169da:	4072      	eors	r2, r6
   169dc:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   169e0:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   169e2:	ea82 0206 	eor.w	r2, r2, r6
   169e6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   169e8:	d1f3      	bne.n	169d2 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   169ea:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   169ec:	4621      	mov	r1, r4
   169ee:	4628      	mov	r0, r5
   169f0:	f7ed fe86 	bl	4700 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   169f4:	4620      	mov	r0, r4
   169f6:	f7ff ff2a 	bl	1684e <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   169fa:	2001      	movs	r0, #1
}
   169fc:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   169fe:	f102 0030 	add.w	r0, r2, #48	; 0x30
   16a02:	2100      	movs	r1, #0
   16a04:	f1c2 0210 	rsb	r2, r2, #16
   16a08:	4420      	add	r0, r4
   16a0a:	f7ff fe42 	bl	16692 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   16a0e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   16a10:	4423      	add	r3, r4
   16a12:	2280      	movs	r2, #128	; 0x80
   16a14:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   16a18:	f104 0120 	add.w	r1, r4, #32
   16a1c:	e7d5      	b.n	169ca <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   16a1e:	4608      	mov	r0, r1
   16a20:	e7ec      	b.n	169fc <tc_cmac_final+0x44>

00016a22 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   16a22:	2100      	movs	r1, #0
   16a24:	2001      	movs	r0, #1
   16a26:	f000 b800 	b.w	16a2a <z_arm_fatal_error>

00016a2a <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   16a2a:	f001 bfe4 	b.w	189f6 <z_fatal_error>

00016a2e <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   16a2e:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   16a30:	6800      	ldr	r0, [r0, #0]
   16a32:	f001 bfe0 	b.w	189f6 <z_fatal_error>

00016a36 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   16a36:	b508      	push	{r3, lr}
	handler();
   16a38:	f7ed ffc4 	bl	49c4 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   16a3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   16a40:	f7ee b8f4 	b.w	4c2c <z_arm_exc_exit>

00016a44 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   16a44:	3901      	subs	r1, #1
   16a46:	4603      	mov	r3, r0
   16a48:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   16a4c:	b90a      	cbnz	r2, 16a52 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   16a4e:	701a      	strb	r2, [r3, #0]

	return dest;
}
   16a50:	4770      	bx	lr
		*d = *s;
   16a52:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   16a56:	e7f7      	b.n	16a48 <strcpy+0x4>

00016a58 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   16a58:	4603      	mov	r3, r0
	size_t n = 0;
   16a5a:	2000      	movs	r0, #0

	while (*s != '\0') {
   16a5c:	5c1a      	ldrb	r2, [r3, r0]
   16a5e:	b902      	cbnz	r2, 16a62 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   16a60:	4770      	bx	lr
		n++;
   16a62:	3001      	adds	r0, #1
   16a64:	e7fa      	b.n	16a5c <strlen+0x4>

00016a66 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   16a66:	4603      	mov	r3, r0
	size_t n = 0;
   16a68:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   16a6a:	5c1a      	ldrb	r2, [r3, r0]
   16a6c:	b10a      	cbz	r2, 16a72 <strnlen+0xc>
   16a6e:	4288      	cmp	r0, r1
   16a70:	d100      	bne.n	16a74 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   16a72:	4770      	bx	lr
		n++;
   16a74:	3001      	adds	r0, #1
   16a76:	e7f8      	b.n	16a6a <strnlen+0x4>

00016a78 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   16a78:	1e43      	subs	r3, r0, #1
   16a7a:	3901      	subs	r1, #1
   16a7c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   16a80:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   16a84:	4282      	cmp	r2, r0
   16a86:	d101      	bne.n	16a8c <strcmp+0x14>
   16a88:	2a00      	cmp	r2, #0
   16a8a:	d1f7      	bne.n	16a7c <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   16a8c:	1a10      	subs	r0, r2, r0
   16a8e:	4770      	bx	lr

00016a90 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   16a90:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   16a92:	b15a      	cbz	r2, 16aac <memcmp+0x1c>
   16a94:	3901      	subs	r1, #1
   16a96:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   16a98:	f810 2b01 	ldrb.w	r2, [r0], #1
   16a9c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   16aa0:	42a0      	cmp	r0, r4
   16aa2:	d001      	beq.n	16aa8 <memcmp+0x18>
   16aa4:	429a      	cmp	r2, r3
   16aa6:	d0f7      	beq.n	16a98 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   16aa8:	1ad0      	subs	r0, r2, r3
}
   16aaa:	bd10      	pop	{r4, pc}
		return 0;
   16aac:	4610      	mov	r0, r2
   16aae:	e7fc      	b.n	16aaa <memcmp+0x1a>

00016ab0 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   16ab0:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   16ab2:	ea81 0400 	eor.w	r4, r1, r0
   16ab6:	07a5      	lsls	r5, r4, #30
   16ab8:	4603      	mov	r3, r0
   16aba:	d00b      	beq.n	16ad4 <memcpy+0x24>
   16abc:	3b01      	subs	r3, #1
   16abe:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   16ac0:	4291      	cmp	r1, r2
   16ac2:	d11b      	bne.n	16afc <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   16ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   16ac6:	2a00      	cmp	r2, #0
   16ac8:	d0fc      	beq.n	16ac4 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   16aca:	f811 4b01 	ldrb.w	r4, [r1], #1
   16ace:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
   16ad2:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
   16ad4:	079c      	lsls	r4, r3, #30
   16ad6:	d1f6      	bne.n	16ac6 <memcpy+0x16>
   16ad8:	f022 0403 	bic.w	r4, r2, #3
   16adc:	1f1d      	subs	r5, r3, #4
   16ade:	0896      	lsrs	r6, r2, #2
   16ae0:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   16ae2:	42b9      	cmp	r1, r7
   16ae4:	d105      	bne.n	16af2 <memcpy+0x42>
   16ae6:	f06f 0503 	mvn.w	r5, #3
   16aea:	fb05 2206 	mla	r2, r5, r6, r2
   16aee:	4423      	add	r3, r4
   16af0:	e7e4      	b.n	16abc <memcpy+0xc>
			*(d_word++) = *(s_word++);
   16af2:	f851 cb04 	ldr.w	ip, [r1], #4
   16af6:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   16afa:	e7f2      	b.n	16ae2 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   16afc:	f811 4b01 	ldrb.w	r4, [r1], #1
   16b00:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   16b04:	e7dc      	b.n	16ac0 <memcpy+0x10>

00016b06 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   16b06:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   16b08:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
   16b0a:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   16b0c:	079c      	lsls	r4, r3, #30
   16b0e:	d111      	bne.n	16b34 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   16b10:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   16b14:	f022 0603 	bic.w	r6, r2, #3
   16b18:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   16b1c:	441e      	add	r6, r3
   16b1e:	0894      	lsrs	r4, r2, #2
   16b20:	42b3      	cmp	r3, r6
   16b22:	d10d      	bne.n	16b40 <memset+0x3a>
   16b24:	f06f 0503 	mvn.w	r5, #3
   16b28:	fb05 2204 	mla	r2, r5, r4, r2
   16b2c:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   16b2e:	4293      	cmp	r3, r2
   16b30:	d109      	bne.n	16b46 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   16b32:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   16b34:	2a00      	cmp	r2, #0
   16b36:	d0fc      	beq.n	16b32 <memset+0x2c>
		*(d_byte++) = c_byte;
   16b38:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   16b3c:	3a01      	subs	r2, #1
   16b3e:	e7e5      	b.n	16b0c <memset+0x6>
		*(d_word++) = c_word;
   16b40:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   16b44:	e7ec      	b.n	16b20 <memset+0x1a>
		*(d_byte++) = c_byte;
   16b46:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   16b4a:	e7f0      	b.n	16b2e <memset+0x28>

00016b4c <_stdout_hook_default>:
}
   16b4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16b50:	4770      	bx	lr

00016b52 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   16b52:	f7fd bcf5 	b.w	14540 <SystemInit>

00016b56 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
void pm_power_state_set(struct pm_state_info info)
{
   16b56:	b082      	sub	sp, #8
   16b58:	ab02      	add	r3, sp, #8
   16b5a:	e903 0003 	stmdb	r3, {r0, r1}
	switch (info.state) {
   16b5e:	f89d 3000 	ldrb.w	r3, [sp]
   16b62:	2b06      	cmp	r3, #6
   16b64:	d108      	bne.n	16b78 <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   16b66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   16b6a:	2201      	movs	r2, #1
   16b6c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   16b70:	f3bf 8f4f 	dsb	sy
        __WFE();
   16b74:	bf20      	wfe
    while (true)
   16b76:	e7fd      	b.n	16b74 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   16b78:	b002      	add	sp, #8
   16b7a:	4770      	bx	lr

00016b7c <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   16b7c:	b082      	sub	sp, #8
   16b7e:	ab02      	add	r3, sp, #8
   16b80:	e903 0003 	stmdb	r3, {r0, r1}
   16b84:	2300      	movs	r3, #0
   16b86:	f383 8811 	msr	BASEPRI, r3
   16b8a:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   16b8e:	b002      	add	sp, #8
   16b90:	4770      	bx	lr

00016b92 <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   16b92:	b530      	push	{r4, r5, lr}
   16b94:	b085      	sub	sp, #20
   16b96:	4604      	mov	r4, r0
   16b98:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   16b9a:	4668      	mov	r0, sp
   16b9c:	2203      	movs	r2, #3
   16b9e:	f7ff ff87 	bl	16ab0 <memcpy>
	(void)memset(res + 3, 0, 13);
   16ba2:	220d      	movs	r2, #13
   16ba4:	2100      	movs	r1, #0
   16ba6:	f10d 0003 	add.w	r0, sp, #3
   16baa:	f7ff ffac 	bl	16b06 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   16bae:	4620      	mov	r0, r4
   16bb0:	466a      	mov	r2, sp
   16bb2:	4669      	mov	r1, sp
   16bb4:	f7f4 fd60 	bl	b678 <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   16bb8:	4604      	mov	r4, r0
   16bba:	b920      	cbnz	r0, 16bc6 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   16bbc:	2203      	movs	r2, #3
   16bbe:	4669      	mov	r1, sp
   16bc0:	4628      	mov	r0, r5
   16bc2:	f7ff ff75 	bl	16ab0 <memcpy>

	return 0;
}
   16bc6:	4620      	mov	r0, r4
   16bc8:	b005      	add	sp, #20
   16bca:	bd30      	pop	{r4, r5, pc}

00016bcc <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   16bcc:	b513      	push	{r0, r1, r4, lr}
   16bce:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   16bd0:	aa01      	add	r2, sp, #4
   16bd2:	3103      	adds	r1, #3
   16bd4:	f7ff ffdd 	bl	16b92 <ah>
	if (err) {
   16bd8:	b948      	cbnz	r0, 16bee <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   16bda:	2203      	movs	r2, #3
   16bdc:	a901      	add	r1, sp, #4
   16bde:	4620      	mov	r0, r4
   16be0:	f7ff ff56 	bl	16a90 <memcmp>
   16be4:	fab0 f080 	clz	r0, r0
   16be8:	0940      	lsrs	r0, r0, #5
}
   16bea:	b002      	add	sp, #8
   16bec:	bd10      	pop	{r4, pc}
		return false;
   16bee:	2000      	movs	r0, #0
   16bf0:	e7fb      	b.n	16bea <bt_rpa_irk_matches+0x1e>

00016bf2 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   16bf2:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   16bf4:	1cce      	adds	r6, r1, #3
{
   16bf6:	4605      	mov	r5, r0
   16bf8:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   16bfa:	4630      	mov	r0, r6
   16bfc:	2103      	movs	r1, #3
   16bfe:	f7f4 fd39 	bl	b674 <bt_rand>
	if (err) {
   16c02:	b960      	cbnz	r0, 16c1e <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   16c04:	7963      	ldrb	r3, [r4, #5]
   16c06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   16c0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   16c0e:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   16c10:	4622      	mov	r2, r4
   16c12:	4631      	mov	r1, r6
   16c14:	4628      	mov	r0, r5
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   16c16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   16c1a:	f7ff bfba 	b.w	16b92 <ah>
}
   16c1e:	bd70      	pop	{r4, r5, r6, pc}

00016c20 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   16c20:	b510      	push	{r4, lr}
   16c22:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   16c24:	7801      	ldrb	r1, [r0, #0]
   16c26:	7822      	ldrb	r2, [r4, #0]
   16c28:	428a      	cmp	r2, r1
{
   16c2a:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   16c2c:	d00e      	beq.n	16c4c <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   16c2e:	4669      	mov	r1, sp
   16c30:	f7ee f8e6 	bl	4e00 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   16c34:	a905      	add	r1, sp, #20
   16c36:	4620      	mov	r0, r4
   16c38:	f7ee f8e2 	bl	4e00 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   16c3c:	2210      	movs	r2, #16
   16c3e:	f10d 0115 	add.w	r1, sp, #21
   16c42:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   16c46:	f7ff ff23 	bl	16a90 <memcmp>
   16c4a:	e007      	b.n	16c5c <bt_uuid_cmp+0x3c>
	switch (u1->type) {
   16c4c:	2a01      	cmp	r2, #1
   16c4e:	d007      	beq.n	16c60 <bt_uuid_cmp+0x40>
   16c50:	2a02      	cmp	r2, #2
   16c52:	d008      	beq.n	16c66 <bt_uuid_cmp+0x46>
   16c54:	b95a      	cbnz	r2, 16c6e <bt_uuid_cmp+0x4e>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   16c56:	8840      	ldrh	r0, [r0, #2]
   16c58:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   16c5a:	1ac0      	subs	r0, r0, r3
	}

	return -EINVAL;
}
   16c5c:	b00a      	add	sp, #40	; 0x28
   16c5e:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   16c60:	6840      	ldr	r0, [r0, #4]
   16c62:	6863      	ldr	r3, [r4, #4]
   16c64:	e7f9      	b.n	16c5a <bt_uuid_cmp+0x3a>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   16c66:	2210      	movs	r2, #16
   16c68:	1c61      	adds	r1, r4, #1
   16c6a:	3001      	adds	r0, #1
   16c6c:	e7eb      	b.n	16c46 <bt_uuid_cmp+0x26>
	switch (u1->type) {
   16c6e:	f06f 0015 	mvn.w	r0, #21
   16c72:	e7f3      	b.n	16c5c <bt_uuid_cmp+0x3c>

00016c74 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   16c74:	2a04      	cmp	r2, #4
{
   16c76:	b538      	push	{r3, r4, r5, lr}
   16c78:	460c      	mov	r4, r1
	switch (data_len) {
   16c7a:	d00d      	beq.n	16c98 <bt_uuid_create+0x24>
   16c7c:	2a10      	cmp	r2, #16
   16c7e:	d019      	beq.n	16cb4 <bt_uuid_create+0x40>
   16c80:	2a02      	cmp	r2, #2
   16c82:	f04f 0300 	mov.w	r3, #0
   16c86:	d11b      	bne.n	16cc0 <bt_uuid_create+0x4c>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   16c88:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   16c8a:	784a      	ldrb	r2, [r1, #1]
   16c8c:	780b      	ldrb	r3, [r1, #0]
   16c8e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   16c92:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   16c94:	2001      	movs	r0, #1
}
   16c96:	bd38      	pop	{r3, r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   16c98:	2301      	movs	r3, #1
   16c9a:	7003      	strb	r3, [r0, #0]
   16c9c:	78a2      	ldrb	r2, [r4, #2]
   16c9e:	78c9      	ldrb	r1, [r1, #3]
   16ca0:	7865      	ldrb	r5, [r4, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   16ca2:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   16ca6:	7822      	ldrb	r2, [r4, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   16ca8:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   16cac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   16cb0:	6042      	str	r2, [r0, #4]
		break;
   16cb2:	e7ef      	b.n	16c94 <bt_uuid_create+0x20>
		uuid->type = BT_UUID_TYPE_128;
   16cb4:	2302      	movs	r3, #2
   16cb6:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   16cba:	f7ff fef9 	bl	16ab0 <memcpy>
		break;
   16cbe:	e7e9      	b.n	16c94 <bt_uuid_create+0x20>
	switch (data_len) {
   16cc0:	4618      	mov	r0, r3
   16cc2:	e7e8      	b.n	16c96 <bt_uuid_create+0x22>

00016cc4 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   16cc4:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   16cc6:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   16cc8:	2106      	movs	r1, #6
{
   16cca:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   16ccc:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   16cd0:	f7f4 fcd0 	bl	b674 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   16cd4:	b918      	cbnz	r0, 16cde <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   16cd6:	79a3      	ldrb	r3, [r4, #6]
   16cd8:	f063 033f 	orn	r3, r3, #63	; 0x3f
   16cdc:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   16cde:	bd10      	pop	{r4, pc}

00016ce0 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   16ce0:	280f      	cmp	r0, #15
   16ce2:	d806      	bhi.n	16cf2 <bt_hci_evt_get_flags+0x12>
   16ce4:	280d      	cmp	r0, #13
   16ce6:	d80b      	bhi.n	16d00 <bt_hci_evt_get_flags+0x20>
   16ce8:	2805      	cmp	r0, #5
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   16cea:	bf14      	ite	ne
   16cec:	2002      	movne	r0, #2
   16cee:	2003      	moveq	r0, #3
   16cf0:	4770      	bx	lr
	switch (evt) {
   16cf2:	2813      	cmp	r0, #19
   16cf4:	d004      	beq.n	16d00 <bt_hci_evt_get_flags+0x20>
   16cf6:	281a      	cmp	r0, #26
   16cf8:	bf14      	ite	ne
   16cfa:	2002      	movne	r0, #2
   16cfc:	2001      	moveq	r0, #1
   16cfe:	4770      	bx	lr
   16d00:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   16d02:	4770      	bx	lr

00016d04 <handle_event>:
{
   16d04:	b410      	push	{r4}
   16d06:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   16d0a:	4604      	mov	r4, r0
   16d0c:	4608      	mov	r0, r1
		if (handler->event != event) {
   16d0e:	7811      	ldrb	r1, [r2, #0]
   16d10:	42a1      	cmp	r1, r4
   16d12:	d004      	beq.n	16d1e <handle_event+0x1a>
	for (i = 0; i < num_handlers; i++) {
   16d14:	3208      	adds	r2, #8
   16d16:	429a      	cmp	r2, r3
   16d18:	d1f9      	bne.n	16d0e <handle_event+0xa>
}
   16d1a:	bc10      	pop	{r4}
   16d1c:	4770      	bx	lr
		if (buf->len < handler->min_len) {
   16d1e:	8981      	ldrh	r1, [r0, #12]
   16d20:	7853      	ldrb	r3, [r2, #1]
   16d22:	4299      	cmp	r1, r3
   16d24:	d3f9      	bcc.n	16d1a <handle_event+0x16>
		handler->handler(buf);
   16d26:	6853      	ldr	r3, [r2, #4]
}
   16d28:	bc10      	pop	{r4}
		handler->handler(buf);
   16d2a:	4718      	bx	r3

00016d2c <hci_data_buf_overflow>:
}
   16d2c:	4770      	bx	lr

00016d2e <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   16d2e:	2207      	movs	r2, #7
   16d30:	f7ff bebe 	b.w	16ab0 <memcpy>

00016d34 <le_data_len_change>:
{
   16d34:	b508      	push	{r3, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16d36:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   16d38:	8818      	ldrh	r0, [r3, #0]
   16d3a:	f7ef fe1b 	bl	6974 <bt_conn_lookup_handle>
	if (!conn) {
   16d3e:	b118      	cbz	r0, 16d48 <le_data_len_change+0x14>
}
   16d40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_conn_unref(conn);
   16d44:	f000 bb99 	b.w	1747a <bt_conn_unref>
}
   16d48:	bd08      	pop	{r3, pc}

00016d4a <hci_disconn_complete_prio>:
{
   16d4a:	b510      	push	{r4, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   16d4c:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
   16d4e:	781a      	ldrb	r2, [r3, #0]
   16d50:	b96a      	cbnz	r2, 16d6e <hci_disconn_complete_prio+0x24>
	conn = bt_conn_lookup_handle(handle);
   16d52:	f8b3 0001 	ldrh.w	r0, [r3, #1]
   16d56:	f7ef fe0d 	bl	6974 <bt_conn_lookup_handle>
	if (!conn) {
   16d5a:	4604      	mov	r4, r0
   16d5c:	b138      	cbz	r0, 16d6e <hci_disconn_complete_prio+0x24>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   16d5e:	2101      	movs	r1, #1
   16d60:	f7ef fe14 	bl	698c <bt_conn_set_state>
	bt_conn_unref(conn);
   16d64:	4620      	mov	r0, r4
}
   16d66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   16d6a:	f000 bb86 	b.w	1747a <bt_conn_unref>
}
   16d6e:	bd10      	pop	{r4, pc}

00016d70 <hci_hardware_error>:
	return net_buf_simple_pull_mem(&buf->b, len);
   16d70:	2101      	movs	r1, #1
   16d72:	3008      	adds	r0, #8
   16d74:	f001 bd60 	b.w	18838 <net_buf_simple_pull_mem>

00016d78 <hci_vendor_event>:
   16d78:	4770      	bx	lr

00016d7a <hci_disconn_complete>:
{
   16d7a:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   16d7c:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
   16d7e:	7835      	ldrb	r5, [r6, #0]
   16d80:	bb15      	cbnz	r5, 16dc8 <hci_disconn_complete+0x4e>
	conn = bt_conn_lookup_handle(handle);
   16d82:	f8b6 0001 	ldrh.w	r0, [r6, #1]
   16d86:	f7ef fdf5 	bl	6974 <bt_conn_lookup_handle>
	if (!conn) {
   16d8a:	4604      	mov	r4, r0
   16d8c:	b1e0      	cbz	r0, 16dc8 <hci_disconn_complete+0x4e>
	conn->err = evt->reason;
   16d8e:	78f3      	ldrb	r3, [r6, #3]
   16d90:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   16d92:	4629      	mov	r1, r5
   16d94:	f7ef fdfa 	bl	698c <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
   16d98:	78a3      	ldrb	r3, [r4, #2]
	conn->handle = 0U;
   16d9a:	8025      	strh	r5, [r4, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
   16d9c:	2b01      	cmp	r3, #1
   16d9e:	d004      	beq.n	16daa <hci_disconn_complete+0x30>
	bt_conn_unref(conn);
   16da0:	4620      	mov	r0, r4
}
   16da2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   16da6:	f000 bb68 	b.w	1747a <bt_conn_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16daa:	f3bf 8f5b 	dmb	ish
   16dae:	6863      	ldr	r3, [r4, #4]
   16db0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   16db4:	07db      	lsls	r3, r3, #31
   16db6:	d5f3      	bpl.n	16da0 <hci_disconn_complete+0x26>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   16db8:	4620      	mov	r0, r4
   16dba:	2102      	movs	r1, #2
   16dbc:	f7ef fde6 	bl	698c <bt_conn_set_state>
		bt_le_scan_update(false);
   16dc0:	4628      	mov	r0, r5
   16dc2:	f7ef fa37 	bl	6234 <bt_le_scan_update>
   16dc6:	e7eb      	b.n	16da0 <hci_disconn_complete+0x26>
}
   16dc8:	bd70      	pop	{r4, r5, r6, pc}

00016dca <le_conn_update_complete>:
{
   16dca:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   16dcc:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   16dce:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   16dd2:	f7ef fdcf 	bl	6974 <bt_conn_lookup_handle>
	if (!conn) {
   16dd6:	4604      	mov	r4, r0
   16dd8:	b1c0      	cbz	r0, 16e0c <le_conn_update_complete+0x42>
	if (!evt->status) {
   16dda:	782b      	ldrb	r3, [r5, #0]
   16ddc:	b9c3      	cbnz	r3, 16e10 <le_conn_update_complete+0x46>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   16dde:	792a      	ldrb	r2, [r5, #4]
   16de0:	78eb      	ldrb	r3, [r5, #3]
   16de2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   16de6:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   16dea:	79aa      	ldrb	r2, [r5, #6]
   16dec:	796b      	ldrb	r3, [r5, #5]
   16dee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   16df2:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   16df6:	79eb      	ldrb	r3, [r5, #7]
   16df8:	7a2a      	ldrb	r2, [r5, #8]
   16dfa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   16dfe:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   16e02:	f7ef fc8f 	bl	6724 <notify_le_param_updated>
	bt_conn_unref(conn);
   16e06:	4620      	mov	r0, r4
   16e08:	f000 fb37 	bl	1747a <bt_conn_unref>
}
   16e0c:	b003      	add	sp, #12
   16e0e:	bd30      	pop	{r4, r5, pc}
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   16e10:	2b1a      	cmp	r3, #26
   16e12:	d1f8      	bne.n	16e06 <le_conn_update_complete+0x3c>
   16e14:	78c3      	ldrb	r3, [r0, #3]
   16e16:	2b01      	cmp	r3, #1
   16e18:	d1f5      	bne.n	16e06 <le_conn_update_complete+0x3c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16e1a:	f3bf 8f5b 	dmb	ish
   16e1e:	1d03      	adds	r3, r0, #4
   16e20:	e853 2f00 	ldrex	r2, [r3]
   16e24:	f442 6180 	orr.w	r1, r2, #1024	; 0x400
   16e28:	e843 1500 	strex	r5, r1, [r3]
   16e2c:	2d00      	cmp	r5, #0
   16e2e:	d1f7      	bne.n	16e20 <le_conn_update_complete+0x56>
   16e30:	f3bf 8f5b 	dmb	ish
		   conn->role == BT_HCI_ROLE_SLAVE &&
   16e34:	0553      	lsls	r3, r2, #21
   16e36:	d4e6      	bmi.n	16e06 <le_conn_update_complete+0x3c>
		param.interval_min = conn->le.interval_min;
   16e38:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   16e3c:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
   16e3e:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
   16e40:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   16e44:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   16e46:	f7f0 f99f 	bl	7188 <bt_l2cap_update_conn_param>
   16e4a:	e7dc      	b.n	16e06 <le_conn_update_complete+0x3c>

00016e4c <hci_le_read_max_data_len>:
{
   16e4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   16e4e:	4606      	mov	r6, r0
   16e50:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   16e52:	aa01      	add	r2, sp, #4
   16e54:	2100      	movs	r1, #0
   16e56:	f242 002f 	movw	r0, #8239	; 0x202f
   16e5a:	f7ee f9b3 	bl	51c4 <bt_hci_cmd_send_sync>
	if (err) {
   16e5e:	4604      	mov	r4, r0
   16e60:	b948      	cbnz	r0, 16e76 <hci_le_read_max_data_len+0x2a>
	rp = (void *)rsp->data;
   16e62:	9801      	ldr	r0, [sp, #4]
   16e64:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   16e66:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   16e6a:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   16e6c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   16e70:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   16e72:	f7fc fe63 	bl	13b3c <net_buf_unref>
}
   16e76:	4620      	mov	r0, r4
   16e78:	b002      	add	sp, #8
   16e7a:	bd70      	pop	{r4, r5, r6, pc}

00016e7c <bt_le_create_conn>:
	return bt_le_create_conn_legacy(conn);
   16e7c:	f7ee bbc8 	b.w	5610 <bt_le_create_conn_legacy>

00016e80 <bt_hci_disconnect>:
{
   16e80:	b570      	push	{r4, r5, r6, lr}
   16e82:	4606      	mov	r6, r0
   16e84:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   16e86:	f240 4006 	movw	r0, #1030	; 0x406
   16e8a:	2103      	movs	r1, #3
   16e8c:	f7ee f962 	bl	5154 <bt_hci_cmd_create>
	if (!buf) {
   16e90:	4604      	mov	r4, r0
   16e92:	b168      	cbz	r0, 16eb0 <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   16e94:	2103      	movs	r1, #3
   16e96:	3008      	adds	r0, #8
   16e98:	f001 fcaf 	bl	187fa <net_buf_simple_add>
	disconn->reason = reason;
   16e9c:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   16e9e:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   16ea0:	4621      	mov	r1, r4
   16ea2:	2200      	movs	r2, #0
}
   16ea4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   16ea8:	f240 4006 	movw	r0, #1030	; 0x406
   16eac:	f7ee b98a 	b.w	51c4 <bt_hci_cmd_send_sync>
}
   16eb0:	f06f 0036 	mvn.w	r0, #54	; 0x36
   16eb4:	bd70      	pop	{r4, r5, r6, pc}

00016eb6 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   16eb6:	8802      	ldrh	r2, [r0, #0]
   16eb8:	8843      	ldrh	r3, [r0, #2]
   16eba:	429a      	cmp	r2, r3
{
   16ebc:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   16ebe:	d818      	bhi.n	16ef2 <bt_le_conn_params_valid+0x3c>
   16ec0:	2a05      	cmp	r2, #5
   16ec2:	d916      	bls.n	16ef2 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   16ec4:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   16ec8:	d813      	bhi.n	16ef2 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   16eca:	8884      	ldrh	r4, [r0, #4]
   16ecc:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   16ed0:	d20f      	bcs.n	16ef2 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   16ed2:	88c1      	ldrh	r1, [r0, #6]
   16ed4:	f1a1 020a 	sub.w	r2, r1, #10
   16ed8:	b292      	uxth	r2, r2
   16eda:	f640 4076 	movw	r0, #3190	; 0xc76
   16ede:	4282      	cmp	r2, r0
   16ee0:	d807      	bhi.n	16ef2 <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
   16ee2:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   16ee6:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   16eea:	bf34      	ite	cc
   16eec:	2001      	movcc	r0, #1
   16eee:	2000      	movcs	r0, #0
}
   16ef0:	bd10      	pop	{r4, pc}
		return false;
   16ef2:	2000      	movs	r0, #0
   16ef4:	e7fc      	b.n	16ef0 <bt_le_conn_params_valid+0x3a>

00016ef6 <bt_le_set_data_len>:
{
   16ef6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16ef8:	4607      	mov	r7, r0
   16efa:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   16efc:	f242 0022 	movw	r0, #8226	; 0x2022
   16f00:	2106      	movs	r1, #6
{
   16f02:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   16f04:	f7ee f926 	bl	5154 <bt_hci_cmd_create>
	if (!buf) {
   16f08:	4604      	mov	r4, r0
   16f0a:	b170      	cbz	r0, 16f2a <bt_le_set_data_len+0x34>
   16f0c:	2106      	movs	r1, #6
   16f0e:	3008      	adds	r0, #8
   16f10:	f001 fc73 	bl	187fa <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   16f14:	883b      	ldrh	r3, [r7, #0]
   16f16:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   16f18:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   16f1a:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   16f1c:	4621      	mov	r1, r4
   16f1e:	f242 0022 	movw	r0, #8226	; 0x2022
}
   16f22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   16f26:	f7ee bbfb 	b.w	5720 <bt_hci_cmd_send>
}
   16f2a:	f06f 0036 	mvn.w	r0, #54	; 0x36
   16f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00016f30 <bt_le_set_phy>:
{
   16f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16f34:	4680      	mov	r8, r0
   16f36:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   16f38:	f242 0032 	movw	r0, #8242	; 0x2032
   16f3c:	2107      	movs	r1, #7
{
   16f3e:	f89d 9020 	ldrb.w	r9, [sp, #32]
   16f42:	4616      	mov	r6, r2
   16f44:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   16f46:	f7ee f905 	bl	5154 <bt_hci_cmd_create>
	if (!buf) {
   16f4a:	4604      	mov	r4, r0
   16f4c:	b190      	cbz	r0, 16f74 <bt_le_set_phy+0x44>
   16f4e:	2107      	movs	r1, #7
   16f50:	3008      	adds	r0, #8
   16f52:	f001 fc52 	bl	187fa <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   16f56:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   16f5a:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   16f5c:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   16f5e:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   16f60:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   16f62:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   16f66:	4621      	mov	r1, r4
   16f68:	f242 0032 	movw	r0, #8242	; 0x2032
}
   16f6c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   16f70:	f7ee bbd6 	b.w	5720 <bt_hci_cmd_send>
}
   16f74:	f06f 0036 	mvn.w	r0, #54	; 0x36
   16f78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00016f7c <le_phy_update_complete>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16f7c:	6883      	ldr	r3, [r0, #8]
{
   16f7e:	b510      	push	{r4, lr}
	conn = bt_conn_lookup_handle(handle);
   16f80:	f8b3 0001 	ldrh.w	r0, [r3, #1]
   16f84:	f7ef fcf6 	bl	6974 <bt_conn_lookup_handle>
	if (!conn) {
   16f88:	4604      	mov	r4, r0
   16f8a:	b310      	cbz	r0, 16fd2 <le_phy_update_complete+0x56>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16f8c:	f3bf 8f5b 	dmb	ish
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   16f90:	1d03      	adds	r3, r0, #4
   16f92:	e853 2f00 	ldrex	r2, [r3]
   16f96:	f022 0180 	bic.w	r1, r2, #128	; 0x80
   16f9a:	e843 1c00 	strex	ip, r1, [r3]
   16f9e:	f1bc 0f00 	cmp.w	ip, #0
   16fa2:	d1f6      	bne.n	16f92 <le_phy_update_complete+0x16>
   16fa4:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   16fa8:	0612      	lsls	r2, r2, #24
   16faa:	d50d      	bpl.n	16fc8 <le_phy_update_complete+0x4c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16fac:	f3bf 8f5b 	dmb	ish
   16fb0:	e853 2f00 	ldrex	r2, [r3]
   16fb4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   16fb8:	e843 2100 	strex	r1, r2, [r3]
   16fbc:	2900      	cmp	r1, #0
   16fbe:	d1f7      	bne.n	16fb0 <le_phy_update_complete+0x34>
   16fc0:	f3bf 8f5b 	dmb	ish
		conn_auto_initiate(conn);
   16fc4:	f7ee fbce 	bl	5764 <conn_auto_initiate>
	bt_conn_unref(conn);
   16fc8:	4620      	mov	r0, r4
}
   16fca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   16fce:	f000 ba54 	b.w	1747a <bt_conn_unref>
}
   16fd2:	bd10      	pop	{r4, pc}

00016fd4 <le_remote_feat_complete>:
{
   16fd4:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   16fd6:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   16fd8:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   16fdc:	f7ef fcca 	bl	6974 <bt_conn_lookup_handle>
	if (!conn) {
   16fe0:	4604      	mov	r4, r0
   16fe2:	b1d8      	cbz	r0, 1701c <le_remote_feat_complete+0x48>
	if (!evt->status) {
   16fe4:	782b      	ldrb	r3, [r5, #0]
   16fe6:	b923      	cbnz	r3, 16ff2 <le_remote_feat_complete+0x1e>
		memcpy(conn->le.features, evt->features,
   16fe8:	2208      	movs	r2, #8
   16fea:	1ce9      	adds	r1, r5, #3
   16fec:	30ac      	adds	r0, #172	; 0xac
   16fee:	f7ff fd5f 	bl	16ab0 <memcpy>
   16ff2:	f3bf 8f5b 	dmb	ish
   16ff6:	1d23      	adds	r3, r4, #4
   16ff8:	e853 2f00 	ldrex	r2, [r3]
   16ffc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   17000:	e843 2100 	strex	r1, r2, [r3]
   17004:	2900      	cmp	r1, #0
   17006:	d1f7      	bne.n	16ff8 <le_remote_feat_complete+0x24>
   17008:	f3bf 8f5b 	dmb	ish
	conn_auto_initiate(conn);
   1700c:	4620      	mov	r0, r4
   1700e:	f7ee fba9 	bl	5764 <conn_auto_initiate>
	bt_conn_unref(conn);
   17012:	4620      	mov	r0, r4
}
   17014:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   17018:	f000 ba2f 	b.w	1747a <bt_conn_unref>
}
   1701c:	bd38      	pop	{r3, r4, r5, pc}

0001701e <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   1701e:	6880      	ldr	r0, [r0, #8]
   17020:	f7ee bc06 	b.w	5830 <enh_conn_complete>

00017024 <le_legacy_conn_complete>:
{
   17024:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   17026:	6881      	ldr	r1, [r0, #8]
{
   17028:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   1702a:	780b      	ldrb	r3, [r1, #0]
   1702c:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   17030:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   17034:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   17038:	78cb      	ldrb	r3, [r1, #3]
   1703a:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   1703e:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   17042:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   17046:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   1704a:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   1704e:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   17052:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   17056:	7c4b      	ldrb	r3, [r1, #17]
   17058:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1705c:	a803      	add	r0, sp, #12
   1705e:	3104      	adds	r1, #4
   17060:	f7ff fe65 	bl	16d2e <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   17064:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   17066:	4669      	mov	r1, sp
   17068:	2206      	movs	r2, #6
   1706a:	f10d 0013 	add.w	r0, sp, #19
   1706e:	9400      	str	r4, [sp, #0]
   17070:	f8ad 4004 	strh.w	r4, [sp, #4]
   17074:	f7ff fd1c 	bl	16ab0 <memcpy>
   17078:	2206      	movs	r2, #6
   1707a:	4669      	mov	r1, sp
   1707c:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   17080:	9400      	str	r4, [sp, #0]
   17082:	f8ad 4004 	strh.w	r4, [sp, #4]
   17086:	f7ff fd13 	bl	16ab0 <memcpy>
	enh_conn_complete(&enh);
   1708a:	a802      	add	r0, sp, #8
   1708c:	f7ee fbd0 	bl	5830 <enh_conn_complete>
}
   17090:	b00a      	add	sp, #40	; 0x28
   17092:	bd10      	pop	{r4, pc}

00017094 <le_conn_param_neg_reply>:
{
   17094:	b570      	push	{r4, r5, r6, lr}
   17096:	4606      	mov	r6, r0
   17098:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   1709a:	f242 0021 	movw	r0, #8225	; 0x2021
   1709e:	2103      	movs	r1, #3
   170a0:	f7ee f858 	bl	5154 <bt_hci_cmd_create>
	if (!buf) {
   170a4:	4604      	mov	r4, r0
   170a6:	b160      	cbz	r0, 170c2 <le_conn_param_neg_reply+0x2e>
   170a8:	2103      	movs	r1, #3
   170aa:	3008      	adds	r0, #8
   170ac:	f001 fba5 	bl	187fa <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   170b0:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   170b2:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   170b4:	4621      	mov	r1, r4
   170b6:	f242 0021 	movw	r0, #8225	; 0x2021
}
   170ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   170be:	f7ee bb2f 	b.w	5720 <bt_hci_cmd_send>
}
   170c2:	bd70      	pop	{r4, r5, r6, pc}

000170c4 <le_conn_param_req>:
{
   170c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   170c6:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   170c8:	78d9      	ldrb	r1, [r3, #3]
   170ca:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   170cc:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   170ce:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   170d2:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   170d6:	7959      	ldrb	r1, [r3, #5]
   170d8:	791a      	ldrb	r2, [r3, #4]
   170da:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   170de:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   170e2:	799a      	ldrb	r2, [r3, #6]
   170e4:	79d9      	ldrb	r1, [r3, #7]
   170e6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   170ea:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   170ee:	7a1a      	ldrb	r2, [r3, #8]
   170f0:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   170f2:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   170f4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   170f8:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   170fa:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   170fe:	f7ef fc39 	bl	6974 <bt_conn_lookup_handle>
	if (!conn) {
   17102:	4606      	mov	r6, r0
   17104:	b928      	cbnz	r0, 17112 <le_conn_param_req+0x4e>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   17106:	2102      	movs	r1, #2
   17108:	4620      	mov	r0, r4
   1710a:	f7ff ffc3 	bl	17094 <le_conn_param_neg_reply>
}
   1710e:	b003      	add	sp, #12
   17110:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   17112:	4669      	mov	r1, sp
   17114:	f7ef fb3a 	bl	678c <le_param_req>
   17118:	b938      	cbnz	r0, 1712a <le_conn_param_req+0x66>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   1711a:	211e      	movs	r1, #30
   1711c:	4620      	mov	r0, r4
   1711e:	f7ff ffb9 	bl	17094 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   17122:	4630      	mov	r0, r6
   17124:	f000 f9a9 	bl	1747a <bt_conn_unref>
   17128:	e7f1      	b.n	1710e <le_conn_param_req+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   1712a:	210e      	movs	r1, #14
   1712c:	f242 0020 	movw	r0, #8224	; 0x2020
   17130:	f7ee f810 	bl	5154 <bt_hci_cmd_create>
	if (!buf) {
   17134:	4605      	mov	r5, r0
   17136:	2800      	cmp	r0, #0
   17138:	d0f3      	beq.n	17122 <le_conn_param_req+0x5e>
   1713a:	210e      	movs	r1, #14
   1713c:	3008      	adds	r0, #8
   1713e:	f001 fb5c 	bl	187fa <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
   17142:	220e      	movs	r2, #14
   17144:	4604      	mov	r4, r0
   17146:	2100      	movs	r1, #0
   17148:	f7ff fcdd 	bl	16b06 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   1714c:	f8bd 3000 	ldrh.w	r3, [sp]
   17150:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   17152:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   17156:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   17158:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1715c:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1715e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   17162:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   17164:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   17166:	4629      	mov	r1, r5
   17168:	f242 0020 	movw	r0, #8224	; 0x2020
   1716c:	f7ee fad8 	bl	5720 <bt_hci_cmd_send>
   17170:	e7d7      	b.n	17122 <le_conn_param_req+0x5e>

00017172 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   17172:	2000      	movs	r0, #0
   17174:	4770      	bx	lr

00017176 <bt_hci_evt_create>:
#include <stdint.h>
#include <sys/byteorder.h>
#include <drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   17176:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   17178:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   1717c:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   1717e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17182:	2100      	movs	r1, #0
{
   17184:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   17186:	f7ed feaf 	bl	4ee8 <bt_buf_get_evt>
   1718a:	2102      	movs	r1, #2
   1718c:	4604      	mov	r4, r0
   1718e:	3008      	adds	r0, #8
   17190:	f001 fb33 	bl	187fa <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = evt;
   17194:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   17196:	7045      	strb	r5, [r0, #1]

	return buf;
}
   17198:	4620      	mov	r0, r4
   1719a:	bd70      	pop	{r4, r5, r6, pc}

0001719c <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   1719c:	3103      	adds	r1, #3
{
   1719e:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   171a0:	b2c9      	uxtb	r1, r1
{
   171a2:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   171a4:	200e      	movs	r0, #14
   171a6:	f7ff ffe6 	bl	17176 <bt_hci_evt_create>
   171aa:	2103      	movs	r1, #3
   171ac:	4604      	mov	r4, r0
   171ae:	3008      	adds	r0, #8
   171b0:	f001 fb23 	bl	187fa <net_buf_simple_add>

	cc = net_buf_add(buf, sizeof(*cc));
	cc->ncmd = 1U;
   171b4:	2301      	movs	r3, #1
   171b6:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   171b8:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   171bc:	4620      	mov	r0, r4
   171be:	bd38      	pop	{r3, r4, r5, pc}

000171c0 <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   171c0:	b570      	push	{r4, r5, r6, lr}
   171c2:	4605      	mov	r5, r0
   171c4:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   171c6:	200f      	movs	r0, #15
   171c8:	2104      	movs	r1, #4
   171ca:	f7ff ffd4 	bl	17176 <bt_hci_evt_create>
   171ce:	2104      	movs	r1, #4
   171d0:	4604      	mov	r4, r0
   171d2:	3008      	adds	r0, #8
   171d4:	f001 fb11 	bl	187fa <net_buf_simple_add>

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
	cs->ncmd = 1U;
   171d8:	2201      	movs	r2, #1
	cs->status = status;
   171da:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   171dc:	7042      	strb	r2, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   171de:	8045      	strh	r5, [r0, #2]

	return buf;
}
   171e0:	4620      	mov	r0, r4
   171e2:	bd70      	pop	{r4, r5, r6, pc}

000171e4 <bt_lookup_id_addr>:
}
   171e4:	4608      	mov	r0, r1
   171e6:	4770      	bx	lr

000171e8 <bt_id_set_private_addr>:
{
   171e8:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   171ea:	2106      	movs	r1, #6
   171ec:	4668      	mov	r0, sp
   171ee:	f7f4 fa41 	bl	b674 <bt_rand>
	if (err) {
   171f2:	b940      	cbnz	r0, 17206 <bt_id_set_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   171f4:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   171f8:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   171fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   171fe:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   17202:	f7ee fe07 	bl	5e14 <set_random_address>
}
   17206:	b003      	add	sp, #12
   17208:	f85d fb04 	ldr.w	pc, [sp], #4

0001720c <bt_id_scan_random_addr_check>:
}
   1720c:	2001      	movs	r0, #1
   1720e:	4770      	bx	lr

00017210 <atomic_and>:
{
   17210:	4603      	mov	r3, r0
}
   17212:	f3bf 8f5b 	dmb	ish
   17216:	e853 0f00 	ldrex	r0, [r3]
   1721a:	ea00 0201 	and.w	r2, r0, r1
   1721e:	e843 2c00 	strex	ip, r2, [r3]
   17222:	f1bc 0f00 	cmp.w	ip, #0
   17226:	d1f6      	bne.n	17216 <atomic_and+0x6>
   17228:	f3bf 8f5b 	dmb	ish
   1722c:	4770      	bx	lr

0001722e <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1722e:	f3bf 8f5b 	dmb	ish
   17232:	6800      	ldr	r0, [r0, #0]
   17234:	f3bf 8f5b 	dmb	ish
}
   17238:	4770      	bx	lr

0001723a <k_delayed_work_cancel>:
{
   1723a:	b538      	push	{r3, r4, r5, lr}
   1723c:	4605      	mov	r5, r0
	return k_work_delayable_busy_get(dwork) != 0;
   1723e:	f001 fee0 	bl	19002 <k_work_delayable_busy_get>
   17242:	4604      	mov	r4, r0
	int rc = k_work_cancel_delayable(&work->work);
   17244:	4628      	mov	r0, r5
   17246:	f001 fef0 	bl	1902a <k_work_cancel_delayable>
	if (pending) {
   1724a:	b124      	cbz	r4, 17256 <k_delayed_work_cancel+0x1c>
		return (rc == 0) ? 0 : -EINVAL;
   1724c:	2800      	cmp	r0, #0
   1724e:	bf18      	it	ne
   17250:	f06f 0015 	mvnne.w	r0, #21
}
   17254:	bd38      	pop	{r3, r4, r5, pc}
	return -EALREADY;
   17256:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1725a:	e7fb      	b.n	17254 <k_delayed_work_cancel+0x1a>

0001725c <atomic_dec>:
{
   1725c:	4603      	mov	r3, r0
}
   1725e:	f3bf 8f5b 	dmb	ish
   17262:	e853 0f00 	ldrex	r0, [r3]
   17266:	1e42      	subs	r2, r0, #1
   17268:	e843 2100 	strex	r1, r2, [r3]
   1726c:	2900      	cmp	r1, #0
   1726e:	d1f8      	bne.n	17262 <atomic_dec+0x6>
   17270:	f3bf 8f5b 	dmb	ish
   17274:	4770      	bx	lr

00017276 <tx_notify>:
{
   17276:	b570      	push	{r4, r5, r6, lr}
   17278:	4604      	mov	r4, r0
	__asm__ volatile(
   1727a:	f04f 0220 	mov.w	r2, #32
   1727e:	f3ef 8311 	mrs	r3, BASEPRI
   17282:	f382 8811 	msr	BASEPRI, r2
   17286:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   1728a:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   1728c:	b920      	cbnz	r0, 17298 <tx_notify+0x22>
	__asm__ volatile(
   1728e:	f383 8811 	msr	BASEPRI, r3
   17292:	f3bf 8f6f 	isb	sy
}
   17296:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17298:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1729a:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1729c:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1729e:	4288      	cmp	r0, r1
	list->tail = node;
   172a0:	bf08      	it	eq
   172a2:	6262      	streq	r2, [r4, #36]	; 0x24
   172a4:	f383 8811 	msr	BASEPRI, r3
   172a8:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   172ac:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   172b0:	f7ef f98a 	bl	65c8 <tx_free>
		cb(conn, user_data);
   172b4:	4631      	mov	r1, r6
   172b6:	4620      	mov	r0, r4
   172b8:	47a8      	blx	r5
	while (1) {
   172ba:	e7de      	b.n	1727a <tx_notify+0x4>

000172bc <tx_complete_work>:
	tx_notify(conn);
   172bc:	3828      	subs	r0, #40	; 0x28
   172be:	f7ff bfda 	b.w	17276 <tx_notify>

000172c2 <bt_conn_new>:
{
   172c2:	b538      	push	{r3, r4, r5, lr}
   172c4:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   172c6:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   172c8:	2501      	movs	r5, #1
   172ca:	428b      	cmp	r3, r1
   172cc:	d102      	bne.n	172d4 <bt_conn_new+0x12>
		return NULL;
   172ce:	2400      	movs	r4, #0
}
   172d0:	4620      	mov	r0, r4
   172d2:	bd38      	pop	{r3, r4, r5, pc}
   172d4:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
   172d8:	f3bf 8f5b 	dmb	ish
   172dc:	e852 0f00 	ldrex	r0, [r2]
   172e0:	2800      	cmp	r0, #0
   172e2:	d104      	bne.n	172ee <bt_conn_new+0x2c>
   172e4:	e842 5c00 	strex	ip, r5, [r2]
   172e8:	f1bc 0f00 	cmp.w	ip, #0
   172ec:	d1f6      	bne.n	172dc <bt_conn_new+0x1a>
   172ee:	f3bf 8f5b 	dmb	ish
   172f2:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   172f6:	d002      	beq.n	172fe <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
   172f8:	3301      	adds	r3, #1
   172fa:	4604      	mov	r4, r0
   172fc:	e7e5      	b.n	172ca <bt_conn_new+0x8>
	if (!conn) {
   172fe:	2c00      	cmp	r4, #0
   17300:	d0e6      	beq.n	172d0 <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   17302:	22b8      	movs	r2, #184	; 0xb8
   17304:	2100      	movs	r1, #0
   17306:	4620      	mov	r0, r4
   17308:	f7ff fbfd 	bl	16b06 <memset>
	return conn;
   1730c:	e7e0      	b.n	172d0 <bt_conn_new+0xe>

0001730e <bt_conn_get_security>:
}
   1730e:	2001      	movs	r0, #1
   17310:	4770      	bx	lr

00017312 <bt_conn_reset_rx_state>:
{
   17312:	b510      	push	{r4, lr}
   17314:	4604      	mov	r4, r0
	if (!conn->rx) {
   17316:	6900      	ldr	r0, [r0, #16]
   17318:	b118      	cbz	r0, 17322 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   1731a:	f7fc fc0f 	bl	13b3c <net_buf_unref>
	conn->rx = NULL;
   1731e:	2300      	movs	r3, #0
   17320:	6123      	str	r3, [r4, #16]
}
   17322:	bd10      	pop	{r4, pc}

00017324 <bt_conn_recv>:
{
   17324:	b570      	push	{r4, r5, r6, lr}
   17326:	4616      	mov	r6, r2
   17328:	4604      	mov	r4, r0
   1732a:	460d      	mov	r5, r1
	tx_notify(conn);
   1732c:	f7ff ffa3 	bl	17276 <tx_notify>
	switch (flags) {
   17330:	2e01      	cmp	r6, #1
   17332:	d01a      	beq.n	1736a <bt_conn_recv+0x46>
   17334:	2e02      	cmp	r6, #2
   17336:	d11a      	bne.n	1736e <bt_conn_recv+0x4a>
		if (conn->rx) {
   17338:	6923      	ldr	r3, [r4, #16]
   1733a:	b113      	cbz	r3, 17342 <bt_conn_recv+0x1e>
			bt_conn_reset_rx_state(conn);
   1733c:	4620      	mov	r0, r4
   1733e:	f7ff ffe8 	bl	17312 <bt_conn_reset_rx_state>
		conn->rx = buf;
   17342:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   17344:	6921      	ldr	r1, [r4, #16]
   17346:	898a      	ldrh	r2, [r1, #12]
   17348:	2a01      	cmp	r2, #1
   1734a:	d931      	bls.n	173b0 <bt_conn_recv+0x8c>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   1734c:	6888      	ldr	r0, [r1, #8]
	return ((uint16_t)src[1] << 8) | src[0];
   1734e:	7845      	ldrb	r5, [r0, #1]
   17350:	7803      	ldrb	r3, [r0, #0]
   17352:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   17356:	3304      	adds	r3, #4
   17358:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   1735a:	429a      	cmp	r2, r3
   1735c:	d328      	bcc.n	173b0 <bt_conn_recv+0x8c>
	if (conn->rx->len > acl_total_len) {
   1735e:	d920      	bls.n	173a2 <bt_conn_recv+0x7e>
		bt_conn_reset_rx_state(conn);
   17360:	4620      	mov	r0, r4
}
   17362:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   17366:	f7ff bfd4 	b.w	17312 <bt_conn_reset_rx_state>
		if (!conn->rx) {
   1736a:	6920      	ldr	r0, [r4, #16]
   1736c:	b918      	cbnz	r0, 17376 <bt_conn_recv+0x52>
		bt_conn_reset_rx_state(conn);
   1736e:	4620      	mov	r0, r4
   17370:	f7ff ffcf 	bl	17312 <bt_conn_reset_rx_state>
   17374:	e001      	b.n	1737a <bt_conn_recv+0x56>
		if (!buf->len) {
   17376:	89ae      	ldrh	r6, [r5, #12]
   17378:	b926      	cbnz	r6, 17384 <bt_conn_recv+0x60>
		net_buf_unref(buf);
   1737a:	4628      	mov	r0, r5
}
   1737c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
   17380:	f7fc bbdc 	b.w	13b3c <net_buf_unref>
	return net_buf_simple_tailroom(&buf->b);
   17384:	3008      	adds	r0, #8
   17386:	f001 fa73 	bl	18870 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   1738a:	4286      	cmp	r6, r0
   1738c:	d8ef      	bhi.n	1736e <bt_conn_recv+0x4a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1738e:	6920      	ldr	r0, [r4, #16]
   17390:	89aa      	ldrh	r2, [r5, #12]
   17392:	68a9      	ldr	r1, [r5, #8]
   17394:	3008      	adds	r0, #8
   17396:	f001 fa36 	bl	18806 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   1739a:	4628      	mov	r0, r5
   1739c:	f7fc fbce 	bl	13b3c <net_buf_unref>
		break;
   173a0:	e7d0      	b.n	17344 <bt_conn_recv+0x20>
	conn->rx = NULL;
   173a2:	2300      	movs	r3, #0
   173a4:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf);
   173a6:	4620      	mov	r0, r4
}
   173a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
   173ac:	f000 b9f2 	b.w	17794 <bt_l2cap_recv>
}
   173b0:	bd70      	pop	{r4, r5, r6, pc}

000173b2 <bt_conn_is_peer_addr_le>:
{
   173b2:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   173b4:	7a03      	ldrb	r3, [r0, #8]
   173b6:	428b      	cmp	r3, r1
{
   173b8:	4604      	mov	r4, r0
   173ba:	4615      	mov	r5, r2
	if (id != conn->id) {
   173bc:	d115      	bne.n	173ea <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   173be:	f100 0188 	add.w	r1, r0, #136	; 0x88
   173c2:	2207      	movs	r2, #7
   173c4:	4628      	mov	r0, r5
   173c6:	f7ff fb63 	bl	16a90 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   173ca:	b180      	cbz	r0, 173ee <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   173cc:	78e3      	ldrb	r3, [r4, #3]
   173ce:	2207      	movs	r2, #7
   173d0:	b943      	cbnz	r3, 173e4 <bt_conn_is_peer_addr_le+0x32>
   173d2:	f104 0196 	add.w	r1, r4, #150	; 0x96
   173d6:	4628      	mov	r0, r5
   173d8:	f7ff fb5a 	bl	16a90 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   173dc:	fab0 f080 	clz	r0, r0
   173e0:	0940      	lsrs	r0, r0, #5
}
   173e2:	bd38      	pop	{r3, r4, r5, pc}
   173e4:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   173e8:	e7f5      	b.n	173d6 <bt_conn_is_peer_addr_le+0x24>
		return false;
   173ea:	2000      	movs	r0, #0
   173ec:	e7f9      	b.n	173e2 <bt_conn_is_peer_addr_le+0x30>
		return true;
   173ee:	2001      	movs	r0, #1
   173f0:	e7f7      	b.n	173e2 <bt_conn_is_peer_addr_le+0x30>

000173f2 <bt_conn_ref>:
{
   173f2:	b510      	push	{r4, lr}
   173f4:	4603      	mov	r3, r0
		old = atomic_get(&conn->ref);
   173f6:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
   173fa:	4610      	mov	r0, r2
   173fc:	f7ff ff17 	bl	1722e <atomic_get>
		if (!old) {
   17400:	b180      	cbz	r0, 17424 <bt_conn_ref+0x32>
   17402:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   17406:	1c41      	adds	r1, r0, #1
   17408:	e852 4f00 	ldrex	r4, [r2]
   1740c:	4284      	cmp	r4, r0
   1740e:	d104      	bne.n	1741a <bt_conn_ref+0x28>
   17410:	e842 1c00 	strex	ip, r1, [r2]
   17414:	f1bc 0f00 	cmp.w	ip, #0
   17418:	d1f6      	bne.n	17408 <bt_conn_ref+0x16>
   1741a:	f3bf 8f5b 	dmb	ish
   1741e:	d1ec      	bne.n	173fa <bt_conn_ref+0x8>
}
   17420:	4618      	mov	r0, r3
   17422:	bd10      	pop	{r4, pc}
			return NULL;
   17424:	4603      	mov	r3, r0
   17426:	e7fb      	b.n	17420 <bt_conn_ref+0x2e>

00017428 <conn_lookup_handle>:
{
   17428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1742c:	4606      	mov	r6, r0
   1742e:	460d      	mov	r5, r1
   17430:	4617      	mov	r7, r2
	for (i = 0; i < size; i++) {
   17432:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   17434:	f04f 08c0 	mov.w	r8, #192	; 0xc0
	for (i = 0; i < size; i++) {
   17438:	42ac      	cmp	r4, r5
   1743a:	d102      	bne.n	17442 <conn_lookup_handle+0x1a>
	return NULL;
   1743c:	2000      	movs	r0, #0
}
   1743e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   17442:	fb08 6004 	mla	r0, r8, r4, r6
   17446:	f7ff ffd4 	bl	173f2 <bt_conn_ref>
		if (!conn) {
   1744a:	b158      	cbz	r0, 17464 <conn_lookup_handle+0x3c>
		if (!bt_conn_is_handle_valid(conn)) {
   1744c:	7a83      	ldrb	r3, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   1744e:	2b01      	cmp	r3, #1
   17450:	d002      	beq.n	17458 <conn_lookup_handle+0x30>
   17452:	3b07      	subs	r3, #7
   17454:	2b01      	cmp	r3, #1
   17456:	d802      	bhi.n	1745e <conn_lookup_handle+0x36>
		if (conn->handle != handle) {
   17458:	8803      	ldrh	r3, [r0, #0]
   1745a:	42bb      	cmp	r3, r7
   1745c:	d0ef      	beq.n	1743e <conn_lookup_handle+0x16>
	atomic_val_t old = atomic_dec(&conn->ref);
   1745e:	30b8      	adds	r0, #184	; 0xb8
   17460:	f7ff fefc 	bl	1725c <atomic_dec>
	for (i = 0; i < size; i++) {
   17464:	3401      	adds	r4, #1
   17466:	e7e7      	b.n	17438 <conn_lookup_handle+0x10>

00017468 <bt_conn_exists_le>:
{
   17468:	b508      	push	{r3, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   1746a:	f7ef fb63 	bl	6b34 <bt_conn_lookup_addr_le>
	if (conn) {
   1746e:	b118      	cbz	r0, 17478 <bt_conn_exists_le+0x10>
	atomic_val_t old = atomic_dec(&conn->ref);
   17470:	30b8      	adds	r0, #184	; 0xb8
   17472:	f7ff fef3 	bl	1725c <atomic_dec>
		return true;
   17476:	2001      	movs	r0, #1
}
   17478:	bd08      	pop	{r3, pc}

0001747a <bt_conn_unref>:
	atomic_val_t old = atomic_dec(&conn->ref);
   1747a:	30b8      	adds	r0, #184	; 0xb8
   1747c:	f7ff beee 	b.w	1725c <atomic_dec>

00017480 <bt_conn_get_dst>:
}
   17480:	3088      	adds	r0, #136	; 0x88
   17482:	4770      	bx	lr

00017484 <bt_conn_disconnect>:
{
   17484:	b538      	push	{r3, r4, r5, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   17486:	7883      	ldrb	r3, [r0, #2]
   17488:	2b01      	cmp	r3, #1
{
   1748a:	4604      	mov	r4, r0
   1748c:	460d      	mov	r5, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1748e:	d103      	bne.n	17498 <bt_conn_disconnect+0x14>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
   17490:	2100      	movs	r1, #0
   17492:	3088      	adds	r0, #136	; 0x88
   17494:	f7ef fc26 	bl	6ce4 <bt_le_set_auto_conn>
	switch (conn->state) {
   17498:	7aa3      	ldrb	r3, [r4, #10]
   1749a:	3b02      	subs	r3, #2
   1749c:	2b06      	cmp	r3, #6
   1749e:	d805      	bhi.n	174ac <bt_conn_disconnect+0x28>
   174a0:	e8df f003 	tbb	[pc, r3]
   174a4:	04040408 	.word	0x04040408
   174a8:	1a12      	.short	0x1a12
   174aa:	10          	.byte	0x10
   174ab:	00          	.byte	0x00
   174ac:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
   174b0:	4628      	mov	r0, r5
   174b2:	bd38      	pop	{r3, r4, r5, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   174b4:	4620      	mov	r0, r4
		conn->err = reason;
   174b6:	7265      	strb	r5, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   174b8:	2100      	movs	r1, #0
   174ba:	f7ef fa67 	bl	698c <bt_conn_set_state>
			bt_le_scan_update(false);
   174be:	2000      	movs	r0, #0
   174c0:	f7ee feb8 	bl	6234 <bt_le_scan_update>
		return 0;
   174c4:	2500      	movs	r5, #0
   174c6:	e7f3      	b.n	174b0 <bt_conn_disconnect+0x2c>
			k_delayed_work_cancel(&conn->deferred_work);
   174c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   174cc:	f7ff feb5 	bl	1723a <k_delayed_work_cancel>
}
   174d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_create_conn_cancel();
   174d4:	f7ee b8f8 	b.w	56c8 <bt_le_create_conn_cancel>
	err = bt_hci_disconnect(conn->handle, reason);
   174d8:	4629      	mov	r1, r5
   174da:	8820      	ldrh	r0, [r4, #0]
   174dc:	f7ff fcd0 	bl	16e80 <bt_hci_disconnect>
	if (err) {
   174e0:	4605      	mov	r5, r0
   174e2:	2800      	cmp	r0, #0
   174e4:	d1e4      	bne.n	174b0 <bt_conn_disconnect+0x2c>
	if (conn->state == BT_CONN_CONNECTED) {
   174e6:	7aa3      	ldrb	r3, [r4, #10]
   174e8:	2b07      	cmp	r3, #7
   174ea:	d1e1      	bne.n	174b0 <bt_conn_disconnect+0x2c>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   174ec:	2108      	movs	r1, #8
   174ee:	4620      	mov	r0, r4
   174f0:	f7ef fa4c 	bl	698c <bt_conn_set_state>
   174f4:	e7dc      	b.n	174b0 <bt_conn_disconnect+0x2c>

000174f6 <bt_conn_le_conn_update>:
{
   174f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   174f8:	4607      	mov	r7, r0
   174fa:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   174fc:	f242 0013 	movw	r0, #8211	; 0x2013
   17500:	210e      	movs	r1, #14
   17502:	f7ed fe27 	bl	5154 <bt_hci_cmd_create>
	if (!buf) {
   17506:	4606      	mov	r6, r0
   17508:	b1d0      	cbz	r0, 17540 <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1750a:	210e      	movs	r1, #14
   1750c:	3008      	adds	r0, #8
   1750e:	f001 f974 	bl	187fa <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   17512:	220e      	movs	r2, #14
   17514:	4604      	mov	r4, r0
   17516:	2100      	movs	r1, #0
   17518:	f7ff faf5 	bl	16b06 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1751c:	883b      	ldrh	r3, [r7, #0]
   1751e:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   17520:	882b      	ldrh	r3, [r5, #0]
   17522:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   17524:	886b      	ldrh	r3, [r5, #2]
   17526:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   17528:	88ab      	ldrh	r3, [r5, #4]
   1752a:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1752c:	88eb      	ldrh	r3, [r5, #6]
   1752e:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   17530:	4631      	mov	r1, r6
   17532:	2200      	movs	r2, #0
}
   17534:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   17538:	f242 0013 	movw	r0, #8211	; 0x2013
   1753c:	f7ed be42 	b.w	51c4 <bt_hci_cmd_send_sync>
}
   17540:	f06f 0036 	mvn.w	r0, #54	; 0x36
   17544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00017546 <l2cap_connected>:
}
   17546:	4770      	bx	lr

00017548 <l2cap_create_le_sig_pdu.isra.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   17548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1754a:	4607      	mov	r7, r0
   1754c:	460e      	mov	r6, r1
   1754e:	4615      	mov	r5, r2
	return bt_conn_create_pdu_timeout(pool,
   17550:	2300      	movs	r3, #0
   17552:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   17556:	2104      	movs	r1, #4
   17558:	2000      	movs	r0, #0
   1755a:	f7ef fcb5 	bl	6ec8 <bt_conn_create_pdu_timeout>
	if (!buf) {
   1755e:	4604      	mov	r4, r0
   17560:	b130      	cbz	r0, 17570 <l2cap_create_le_sig_pdu.isra.0+0x28>
   17562:	2104      	movs	r1, #4
   17564:	3008      	adds	r0, #8
   17566:	f001 f948 	bl	187fa <net_buf_simple_add>
	hdr->code = code;
   1756a:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
   1756c:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   1756e:	8045      	strh	r5, [r0, #2]
}
   17570:	4620      	mov	r0, r4
   17572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00017574 <l2cap_disconnected>:
   17574:	4770      	bx	lr

00017576 <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   17576:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   17578:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1757a:	b17b      	cbz	r3, 1759c <bt_l2cap_chan_remove+0x26>
   1757c:	3b08      	subs	r3, #8
   1757e:	2200      	movs	r2, #0
   17580:	b163      	cbz	r3, 1759c <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   17582:	428b      	cmp	r3, r1
   17584:	f103 0408 	add.w	r4, r3, #8
   17588:	d10f      	bne.n	175aa <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   1758a:	688b      	ldr	r3, [r1, #8]
   1758c:	b93a      	cbnz	r2, 1759e <bt_l2cap_chan_remove+0x28>
   1758e:	6d42      	ldr	r2, [r0, #84]	; 0x54
	list->head = node;
   17590:	6503      	str	r3, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   17592:	4294      	cmp	r4, r2
   17594:	d100      	bne.n	17598 <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   17596:	6543      	str	r3, [r0, #84]	; 0x54
	parent->next = child;
   17598:	2300      	movs	r3, #0
   1759a:	608b      	str	r3, [r1, #8]
}
   1759c:	bd10      	pop	{r4, pc}
   1759e:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   175a0:	6d43      	ldr	r3, [r0, #84]	; 0x54
   175a2:	429c      	cmp	r4, r3
	list->tail = node;
   175a4:	bf08      	it	eq
   175a6:	6542      	streq	r2, [r0, #84]	; 0x54
}
   175a8:	e7f6      	b.n	17598 <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   175aa:	2c00      	cmp	r4, #0
   175ac:	d0f6      	beq.n	1759c <bt_l2cap_chan_remove+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   175ae:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   175b0:	2b00      	cmp	r3, #0
   175b2:	d0f3      	beq.n	1759c <bt_l2cap_chan_remove+0x26>
   175b4:	3b08      	subs	r3, #8
   175b6:	4622      	mov	r2, r4
   175b8:	e7e2      	b.n	17580 <bt_l2cap_chan_remove+0xa>

000175ba <bt_l2cap_chan_del>:
{
   175ba:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   175bc:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   175c0:	4604      	mov	r4, r0
	if (!chan->conn) {
   175c2:	b123      	cbz	r3, 175ce <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   175c4:	686b      	ldr	r3, [r5, #4]
   175c6:	b103      	cbz	r3, 175ca <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   175c8:	4798      	blx	r3
	chan->conn = NULL;
   175ca:	2300      	movs	r3, #0
   175cc:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   175ce:	68e3      	ldr	r3, [r4, #12]
   175d0:	b10b      	cbz	r3, 175d6 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   175d2:	4620      	mov	r0, r4
   175d4:	4798      	blx	r3
	if (ops->released) {
   175d6:	69eb      	ldr	r3, [r5, #28]
   175d8:	b11b      	cbz	r3, 175e2 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   175da:	4620      	mov	r0, r4
}
   175dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   175e0:	4718      	bx	r3
}
   175e2:	bd70      	pop	{r4, r5, r6, pc}

000175e4 <l2cap_rtx_timeout>:
{
   175e4:	b508      	push	{r3, lr}
	bt_l2cap_chan_remove(conn, &chan->chan);
   175e6:	f1a0 0110 	sub.w	r1, r0, #16
   175ea:	f850 0c10 	ldr.w	r0, [r0, #-16]
   175ee:	f7ff ffc2 	bl	17576 <bt_l2cap_chan_remove>
}
   175f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_l2cap_chan_del(&chan->chan);
   175f6:	4608      	mov	r0, r1
   175f8:	f7ff bfdf 	b.w	175ba <bt_l2cap_chan_del>

000175fc <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   175fc:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   175fe:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   17600:	b18b      	cbz	r3, 17626 <bt_l2cap_disconnected+0x2a>
   17602:	f1b3 0008 	subs.w	r0, r3, #8
   17606:	d00e      	beq.n	17626 <bt_l2cap_disconnected+0x2a>
   17608:	681c      	ldr	r4, [r3, #0]
   1760a:	b104      	cbz	r4, 1760e <bt_l2cap_disconnected+0x12>
   1760c:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   1760e:	f7ff ffd4 	bl	175ba <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   17612:	b144      	cbz	r4, 17626 <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   17614:	f114 0308 	adds.w	r3, r4, #8
   17618:	d002      	beq.n	17620 <bt_l2cap_disconnected+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1761a:	68a3      	ldr	r3, [r4, #8]
   1761c:	b103      	cbz	r3, 17620 <bt_l2cap_disconnected+0x24>
   1761e:	3b08      	subs	r3, #8
{
   17620:	4620      	mov	r0, r4
   17622:	461c      	mov	r4, r3
   17624:	e7f3      	b.n	1760e <bt_l2cap_disconnected+0x12>
}
   17626:	bd10      	pop	{r4, pc}

00017628 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   17628:	3104      	adds	r1, #4
   1762a:	f7ef bc4d 	b.w	6ec8 <bt_conn_create_pdu_timeout>

0001762e <bt_l2cap_send_cb>:
{
   1762e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17632:	4614      	mov	r4, r2
   17634:	4605      	mov	r5, r0
   17636:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   17638:	f102 0008 	add.w	r0, r2, #8
   1763c:	2104      	movs	r1, #4
   1763e:	461e      	mov	r6, r3
   17640:	f8dd 8018 	ldr.w	r8, [sp, #24]
   17644:	f001 f8e8 	bl	18818 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   17648:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   1764a:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1764c:	3a04      	subs	r2, #4
   1764e:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   17650:	4643      	mov	r3, r8
   17652:	4632      	mov	r2, r6
   17654:	4621      	mov	r1, r4
   17656:	4628      	mov	r0, r5
}
   17658:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1765c:	f7ef b8e0 	b.w	6820 <bt_conn_send_cb>

00017660 <l2cap_send_reject.constprop.0>:
static void l2cap_send_reject(struct bt_conn *conn, uint8_t ident,
   17660:	b537      	push	{r0, r1, r2, r4, r5, lr}
   17662:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   17664:	2202      	movs	r2, #2
   17666:	2001      	movs	r0, #1
   17668:	f7ff ff6e 	bl	17548 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   1766c:	4604      	mov	r4, r0
   1766e:	b160      	cbz	r0, 1768a <l2cap_send_reject.constprop.0+0x2a>
	return net_buf_simple_add(&buf->b, len);
   17670:	2102      	movs	r1, #2
   17672:	3008      	adds	r0, #8
   17674:	f001 f8c1 	bl	187fa <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   17678:	2300      	movs	r3, #0
   1767a:	7003      	strb	r3, [r0, #0]
   1767c:	7043      	strb	r3, [r0, #1]
   1767e:	4622      	mov	r2, r4
   17680:	9300      	str	r3, [sp, #0]
   17682:	2105      	movs	r1, #5
   17684:	4628      	mov	r0, r5
   17686:	f7ff ffd2 	bl	1762e <bt_l2cap_send_cb>
}
   1768a:	b003      	add	sp, #12
   1768c:	bd30      	pop	{r4, r5, pc}

0001768e <l2cap_recv>:
{
   1768e:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   17690:	898b      	ldrh	r3, [r1, #12]
   17692:	2b03      	cmp	r3, #3
{
   17694:	b085      	sub	sp, #20
   17696:	4605      	mov	r5, r0
   17698:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1769a:	d911      	bls.n	176c0 <l2cap_recv+0x32>
	return net_buf_simple_pull_mem(&buf->b, len);
   1769c:	2104      	movs	r1, #4
   1769e:	f104 0008 	add.w	r0, r4, #8
   176a2:	f001 f8c9 	bl	18838 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   176a6:	89a3      	ldrh	r3, [r4, #12]
   176a8:	8842      	ldrh	r2, [r0, #2]
   176aa:	429a      	cmp	r2, r3
   176ac:	d108      	bne.n	176c0 <l2cap_recv+0x32>
	if (!hdr->ident) {
   176ae:	7841      	ldrb	r1, [r0, #1]
   176b0:	b131      	cbz	r1, 176c0 <l2cap_recv+0x32>
	switch (hdr->code) {
   176b2:	7803      	ldrb	r3, [r0, #0]
   176b4:	2b12      	cmp	r3, #18
   176b6:	d006      	beq.n	176c6 <l2cap_recv+0x38>
   176b8:	2b13      	cmp	r3, #19
   176ba:	d001      	beq.n	176c0 <l2cap_recv+0x32>
   176bc:	2b01      	cmp	r3, #1
   176be:	d147      	bne.n	17750 <l2cap_recv+0xc2>
}
   176c0:	2000      	movs	r0, #0
   176c2:	b005      	add	sp, #20
   176c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (buf->len < sizeof(*req)) {
   176c6:	2a07      	cmp	r2, #7
   176c8:	d9fa      	bls.n	176c0 <l2cap_recv+0x32>
			le_conn_param_update_req(l2cap, hdr->ident, buf);
   176ca:	682d      	ldr	r5, [r5, #0]
	if (conn->role != BT_HCI_ROLE_MASTER) {
   176cc:	78ef      	ldrb	r7, [r5, #3]
   176ce:	b11f      	cbz	r7, 176d8 <l2cap_recv+0x4a>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
   176d0:	4628      	mov	r0, r5
		l2cap_send_reject(chan->conn, hdr->ident,
   176d2:	f7ff ffc5 	bl	17660 <l2cap_send_reject.constprop.0>
		break;
   176d6:	e7f3      	b.n	176c0 <l2cap_recv+0x32>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
   176d8:	68a2      	ldr	r2, [r4, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
   176da:	7850      	ldrb	r0, [r2, #1]
   176dc:	7813      	ldrb	r3, [r2, #0]
   176de:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   176e2:	f8ad 3008 	strh.w	r3, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
   176e6:	78d0      	ldrb	r0, [r2, #3]
   176e8:	7893      	ldrb	r3, [r2, #2]
   176ea:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   176ee:	f8ad 300a 	strh.w	r3, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
   176f2:	7950      	ldrb	r0, [r2, #5]
   176f4:	7913      	ldrb	r3, [r2, #4]
   176f6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   176fa:	f8ad 300c 	strh.w	r3, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
   176fe:	7993      	ldrb	r3, [r2, #6]
   17700:	79d2      	ldrb	r2, [r2, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   17702:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
   17704:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   17708:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
   1770a:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   1770e:	f7ff ff1b 	bl	17548 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   17712:	4604      	mov	r4, r0
   17714:	2800      	cmp	r0, #0
   17716:	d0d3      	beq.n	176c0 <l2cap_recv+0x32>
	accepted = le_param_req(conn, &param);
   17718:	a902      	add	r1, sp, #8
   1771a:	4628      	mov	r0, r5
   1771c:	f7ef f836 	bl	678c <le_param_req>
	return net_buf_simple_add(&buf->b, len);
   17720:	2102      	movs	r1, #2
   17722:	4606      	mov	r6, r0
   17724:	f104 0008 	add.w	r0, r4, #8
   17728:	f001 f867 	bl	187fa <net_buf_simple_add>
	if (accepted) {
   1772c:	f086 0301 	eor.w	r3, r6, #1
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
   17730:	b2db      	uxtb	r3, r3
   17732:	8003      	strh	r3, [r0, #0]
   17734:	4622      	mov	r2, r4
   17736:	9700      	str	r7, [sp, #0]
   17738:	463b      	mov	r3, r7
   1773a:	2105      	movs	r1, #5
   1773c:	4628      	mov	r0, r5
   1773e:	f7ff ff76 	bl	1762e <bt_l2cap_send_cb>
	if (accepted) {
   17742:	2e00      	cmp	r6, #0
   17744:	d0bc      	beq.n	176c0 <l2cap_recv+0x32>
		bt_conn_le_conn_update(conn, &param);
   17746:	a902      	add	r1, sp, #8
   17748:	4628      	mov	r0, r5
   1774a:	f7ff fed4 	bl	174f6 <bt_conn_le_conn_update>
   1774e:	e7b7      	b.n	176c0 <l2cap_recv+0x32>
		l2cap_send_reject(chan->conn, hdr->ident,
   17750:	6828      	ldr	r0, [r5, #0]
   17752:	e7be      	b.n	176d2 <l2cap_recv+0x44>

00017754 <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   17754:	6d00      	ldr	r0, [r0, #80]	; 0x50
   17756:	b160      	cbz	r0, 17772 <bt_l2cap_le_lookup_tx_cid+0x1e>
   17758:	3808      	subs	r0, #8
   1775a:	b900      	cbnz	r0, 1775e <bt_l2cap_le_lookup_tx_cid+0xa>
   1775c:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   1775e:	f8b0 3054 	ldrh.w	r3, [r0, #84]	; 0x54
   17762:	428b      	cmp	r3, r1
   17764:	d005      	beq.n	17772 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   17766:	f110 0308 	adds.w	r3, r0, #8
   1776a:	d001      	beq.n	17770 <bt_l2cap_le_lookup_tx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1776c:	6880      	ldr	r0, [r0, #8]
   1776e:	e7f2      	b.n	17756 <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   17770:	4618      	mov	r0, r3
}
   17772:	4770      	bx	lr

00017774 <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   17774:	6d00      	ldr	r0, [r0, #80]	; 0x50
   17776:	b160      	cbz	r0, 17792 <bt_l2cap_le_lookup_rx_cid+0x1e>
   17778:	3808      	subs	r0, #8
   1777a:	b900      	cbnz	r0, 1777e <bt_l2cap_le_lookup_rx_cid+0xa>
   1777c:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1777e:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   17782:	428b      	cmp	r3, r1
   17784:	d005      	beq.n	17792 <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   17786:	f110 0308 	adds.w	r3, r0, #8
   1778a:	d001      	beq.n	17790 <bt_l2cap_le_lookup_rx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1778c:	6880      	ldr	r0, [r0, #8]
   1778e:	e7f2      	b.n	17776 <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   17790:	4618      	mov	r0, r3
}
   17792:	4770      	bx	lr

00017794 <bt_l2cap_recv>:
{
   17794:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   17796:	898b      	ldrh	r3, [r1, #12]
   17798:	2b03      	cmp	r3, #3
{
   1779a:	4605      	mov	r5, r0
   1779c:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1779e:	d804      	bhi.n	177aa <bt_l2cap_recv+0x16>
	net_buf_unref(buf);
   177a0:	4620      	mov	r0, r4
}
   177a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   177a6:	f7fc b9c9 	b.w	13b3c <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   177aa:	2104      	movs	r1, #4
   177ac:	f104 0008 	add.w	r0, r4, #8
   177b0:	f001 f842 	bl	18838 <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   177b4:	8841      	ldrh	r1, [r0, #2]
   177b6:	4628      	mov	r0, r5
   177b8:	f7ff ffdc 	bl	17774 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   177bc:	2800      	cmp	r0, #0
   177be:	d0ef      	beq.n	177a0 <bt_l2cap_recv+0xc>
	chan->ops->recv(chan, buf);
   177c0:	6843      	ldr	r3, [r0, #4]
   177c2:	4621      	mov	r1, r4
   177c4:	691b      	ldr	r3, [r3, #16]
   177c6:	4798      	blx	r3
   177c8:	e7ea      	b.n	177a0 <bt_l2cap_recv+0xc>

000177ca <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   177ca:	4770      	bx	lr

000177cc <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   177cc:	4603      	mov	r3, r0
Z_GENLIST_IS_EMPTY(slist)
   177ce:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   177d0:	b128      	cbz	r0, 177de <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   177d2:	6859      	ldr	r1, [r3, #4]
   177d4:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   177d6:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   177d8:	4288      	cmp	r0, r1
	list->tail = node;
   177da:	bf08      	it	eq
   177dc:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   177de:	4770      	bx	lr

000177e0 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   177e0:	4603      	mov	r3, r0
   177e2:	6800      	ldr	r0, [r0, #0]
   177e4:	2200      	movs	r2, #0
   177e6:	b900      	cbnz	r0, 177ea <sys_slist_find_and_remove+0xa>
   177e8:	4770      	bx	lr
   177ea:	4288      	cmp	r0, r1
   177ec:	d110      	bne.n	17810 <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   177ee:	6808      	ldr	r0, [r1, #0]
   177f0:	b942      	cbnz	r2, 17804 <sys_slist_find_and_remove+0x24>
   177f2:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   177f4:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   177f6:	4291      	cmp	r1, r2
   177f8:	d100      	bne.n	177fc <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   177fa:	6058      	str	r0, [r3, #4]
	parent->next = child;
   177fc:	2300      	movs	r3, #0
   177fe:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   17800:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   17802:	4770      	bx	lr
	parent->next = child;
   17804:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   17806:	6858      	ldr	r0, [r3, #4]
   17808:	4281      	cmp	r1, r0
	list->tail = node;
   1780a:	bf08      	it	eq
   1780c:	605a      	streq	r2, [r3, #4]
}
   1780e:	e7f5      	b.n	177fc <sys_slist_find_and_remove+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   17810:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   17812:	6800      	ldr	r0, [r0, #0]
   17814:	e7e7      	b.n	177e6 <sys_slist_find_and_remove+0x6>

00017816 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   17816:	4603      	mov	r3, r0
	size_t bytes = 0;
   17818:	2000      	movs	r0, #0

	while (buf) {
   1781a:	b903      	cbnz	r3, 1781e <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   1781c:	4770      	bx	lr
		bytes += buf->len;
   1781e:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   17820:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   17822:	4410      	add	r0, r2
		buf = buf->frags;
   17824:	e7f9      	b.n	1781a <net_buf_frags_len+0x4>

00017826 <att_sent>:
	if (chan->ops->sent) {
   17826:	684b      	ldr	r3, [r1, #4]
   17828:	695b      	ldr	r3, [r3, #20]
{
   1782a:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   1782c:	b103      	cbz	r3, 17830 <att_sent+0xa>
		chan->ops->sent(chan);
   1782e:	4718      	bx	r3
}
   17830:	4770      	bx	lr

00017832 <attr_read_type_cb>:
{
   17832:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   17834:	68d4      	ldr	r4, [r2, #12]
   17836:	7823      	ldrb	r3, [r4, #0]
   17838:	3102      	adds	r1, #2
   1783a:	b913      	cbnz	r3, 17842 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   1783c:	7021      	strb	r1, [r4, #0]
	return true;
   1783e:	2001      	movs	r0, #1
   17840:	e006      	b.n	17850 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   17842:	428b      	cmp	r3, r1
   17844:	d0fb      	beq.n	1783e <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   17846:	8983      	ldrh	r3, [r0, #12]
   17848:	3b02      	subs	r3, #2
   1784a:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   1784c:	2000      	movs	r0, #0
   1784e:	6110      	str	r0, [r2, #16]
}
   17850:	bd10      	pop	{r4, pc}

00017852 <att_prepare_write_req>:
}
   17852:	2006      	movs	r0, #6
   17854:	4770      	bx	lr

00017856 <att_op_get_type>:
	switch (op) {
   17856:	281e      	cmp	r0, #30
   17858:	d816      	bhi.n	17888 <att_op_get_type+0x32>
   1785a:	b308      	cbz	r0, 178a0 <att_op_get_type+0x4a>
   1785c:	1e43      	subs	r3, r0, #1
   1785e:	2b1d      	cmp	r3, #29
   17860:	d81e      	bhi.n	178a0 <att_op_get_type+0x4a>
   17862:	e8df f003 	tbb	[pc, r3]
   17866:	2317      	.short	0x2317
   17868:	23172317 	.word	0x23172317
   1786c:	23172317 	.word	0x23172317
   17870:	23172317 	.word	0x23172317
   17874:	23172317 	.word	0x23172317
   17878:	231d1d17 	.word	0x231d1d17
   1787c:	1d172317 	.word	0x1d172317
   17880:	0f1b1d19 	.word	0x0f1b1d19
   17884:	2004      	movs	r0, #4
   17886:	4770      	bx	lr
   17888:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   1788c:	2b52      	cmp	r3, #82	; 0x52
   1788e:	d107      	bne.n	178a0 <att_op_get_type+0x4a>
		return ATT_COMMAND;
   17890:	2000      	movs	r0, #0
}
   17892:	4770      	bx	lr
		return ATT_RESPONSE;
   17894:	2002      	movs	r0, #2
   17896:	4770      	bx	lr
		return ATT_NOTIFICATION;
   17898:	2003      	movs	r0, #3
   1789a:	4770      	bx	lr
		return ATT_INDICATION;
   1789c:	2005      	movs	r0, #5
   1789e:	4770      	bx	lr
		return ATT_COMMAND;
   178a0:	f010 0f40 	tst.w	r0, #64	; 0x40
   178a4:	bf0c      	ite	eq
   178a6:	2006      	moveq	r0, #6
   178a8:	2000      	movne	r0, #0
   178aa:	4770      	bx	lr
		return ATT_REQUEST;
   178ac:	2001      	movs	r0, #1
   178ae:	4770      	bx	lr

000178b0 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   178b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   178b2:	e9cd 2301 	strd	r2, r3, [sp, #4]
   178b6:	2300      	movs	r3, #0
   178b8:	9300      	str	r3, [sp, #0]
   178ba:	461a      	mov	r2, r3
   178bc:	f7f0 fbfe 	bl	80bc <bt_gatt_foreach_attr_type>
				  user_data);
}
   178c0:	b005      	add	sp, #20
   178c2:	f85d fb04 	ldr.w	pc, [sp], #4

000178c6 <att_chan_read>:
{
   178c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   178ca:	4680      	mov	r8, r0
   178cc:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   178ce:	4610      	mov	r0, r2
{
   178d0:	4699      	mov	r9, r3
   178d2:	468b      	mov	fp, r1
   178d4:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   178d6:	f7ff ff9e 	bl	17816 <net_buf_frags_len>
   178da:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
   178de:	4283      	cmp	r3, r0
   178e0:	d97a      	bls.n	179d8 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   178e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   178e6:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   178e8:	4630      	mov	r0, r6
   178ea:	f000 ff64 	bl	187b6 <net_buf_frag_last>
	size_t len, total = 0;
   178ee:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   178f2:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   178f4:	4630      	mov	r0, r6
   178f6:	f7ff ff8e 	bl	17816 <net_buf_frags_len>
   178fa:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
   178fe:	f105 0708 	add.w	r7, r5, #8
   17902:	1a24      	subs	r4, r4, r0
   17904:	4638      	mov	r0, r7
   17906:	f000 ffb3 	bl	18870 <net_buf_simple_tailroom>
   1790a:	4284      	cmp	r4, r0
   1790c:	d211      	bcs.n	17932 <att_chan_read+0x6c>
   1790e:	4630      	mov	r0, r6
   17910:	f7ff ff81 	bl	17816 <net_buf_frags_len>
   17914:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   17918:	1a24      	subs	r4, r4, r0
		if (!len) {
   1791a:	bb34      	cbnz	r4, 1796a <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   1791c:	79b0      	ldrb	r0, [r6, #6]
   1791e:	f7fc f851 	bl	139c4 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   17922:	2200      	movs	r2, #0
   17924:	2300      	movs	r3, #0
   17926:	f000 ff12 	bl	1874e <net_buf_alloc_fixed>
			if (!frag) {
   1792a:	4605      	mov	r5, r0
   1792c:	b930      	cbnz	r0, 1793c <att_chan_read+0x76>
	return total;
   1792e:	4657      	mov	r7, sl
   17930:	e02c      	b.n	1798c <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   17932:	4638      	mov	r0, r7
   17934:	f000 ff9c 	bl	18870 <net_buf_simple_tailroom>
   17938:	4604      	mov	r4, r0
   1793a:	e7ee      	b.n	1791a <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   1793c:	4601      	mov	r1, r0
   1793e:	4630      	mov	r0, r6
   17940:	f000 ff4a 	bl	187d8 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   17944:	4630      	mov	r0, r6
   17946:	f7ff ff66 	bl	17816 <net_buf_frags_len>
   1794a:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1794e:	f105 0708 	add.w	r7, r5, #8
   17952:	1a24      	subs	r4, r4, r0
   17954:	4638      	mov	r0, r7
   17956:	f000 ff8b 	bl	18870 <net_buf_simple_tailroom>
   1795a:	4284      	cmp	r4, r0
   1795c:	d21a      	bcs.n	17994 <att_chan_read+0xce>
   1795e:	4630      	mov	r0, r6
   17960:	f7ff ff59 	bl	17816 <net_buf_frags_len>
   17964:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   17968:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   1796a:	68a9      	ldr	r1, [r5, #8]
   1796c:	89aa      	ldrh	r2, [r5, #12]
   1796e:	f8db 7004 	ldr.w	r7, [fp, #4]
   17972:	9803      	ldr	r0, [sp, #12]
   17974:	f8cd 9000 	str.w	r9, [sp]
   17978:	440a      	add	r2, r1
   1797a:	b2a3      	uxth	r3, r4
   1797c:	4659      	mov	r1, fp
   1797e:	47b8      	blx	r7
		if (read < 0) {
   17980:	1e07      	subs	r7, r0, #0
   17982:	da0c      	bge.n	1799e <att_chan_read+0xd8>
				return total;
   17984:	f1ba 0f00 	cmp.w	sl, #0
   17988:	bf18      	it	ne
   1798a:	4657      	movne	r7, sl
}
   1798c:	4638      	mov	r0, r7
   1798e:	b005      	add	sp, #20
   17990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17994:	4638      	mov	r0, r7
   17996:	f000 ff6b 	bl	18870 <net_buf_simple_tailroom>
   1799a:	4604      	mov	r4, r0
   1799c:	e7e5      	b.n	1796a <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   1799e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   179a0:	b993      	cbnz	r3, 179c8 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   179a2:	4639      	mov	r1, r7
   179a4:	f105 0008 	add.w	r0, r5, #8
   179a8:	f000 ff27 	bl	187fa <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   179ac:	4630      	mov	r0, r6
   179ae:	f7ff ff32 	bl	17816 <net_buf_frags_len>
   179b2:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
		offset += read;
   179b6:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   179b8:	4283      	cmp	r3, r0
		total += read;
   179ba:	44ba      	add	sl, r7
		offset += read;
   179bc:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   179c0:	d9b5      	bls.n	1792e <att_chan_read+0x68>
   179c2:	42a7      	cmp	r7, r4
   179c4:	d096      	beq.n	178f4 <att_chan_read+0x2e>
   179c6:	e7b2      	b.n	1792e <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   179c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   179ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   179cc:	4639      	mov	r1, r7
   179ce:	4628      	mov	r0, r5
   179d0:	4798      	blx	r3
   179d2:	2800      	cmp	r0, #0
   179d4:	d1e5      	bne.n	179a2 <att_chan_read+0xdc>
   179d6:	e7aa      	b.n	1792e <att_chan_read+0x68>
		return 0;
   179d8:	2700      	movs	r7, #0
   179da:	e7d7      	b.n	1798c <att_chan_read+0xc6>

000179dc <find_type_cb>:
{
   179dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   179e0:	f8d2 9000 	ldr.w	r9, [r2]
{
   179e4:	b091      	sub	sp, #68	; 0x44
   179e6:	4607      	mov	r7, r0
   179e8:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   179ea:	2500      	movs	r5, #0
   179ec:	f642 0301 	movw	r3, #10241	; 0x2801
   179f0:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   179f2:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   179f6:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   179fa:	a90b      	add	r1, sp, #44	; 0x2c
{
   179fc:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   179fe:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   17a02:	f7ff f90d 	bl	16c20 <bt_uuid_cmp>
   17a06:	2800      	cmp	r0, #0
   17a08:	d079      	beq.n	17afe <find_type_cb+0x122>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   17a0a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   17a0e:	6838      	ldr	r0, [r7, #0]
   17a10:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   17a14:	a90b      	add	r1, sp, #44	; 0x2c
   17a16:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   17a1a:	f7ff f901 	bl	16c20 <bt_uuid_cmp>
   17a1e:	b138      	cbz	r0, 17a30 <find_type_cb+0x54>
		if (data->group &&
   17a20:	68a3      	ldr	r3, [r4, #8]
   17a22:	b11b      	cbz	r3, 17a2c <find_type_cb+0x50>
   17a24:	885a      	ldrh	r2, [r3, #2]
   17a26:	42b2      	cmp	r2, r6
   17a28:	d200      	bcs.n	17a2c <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   17a2a:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   17a2c:	2001      	movs	r0, #1
   17a2e:	e009      	b.n	17a44 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   17a30:	6861      	ldr	r1, [r4, #4]
   17a32:	4608      	mov	r0, r1
   17a34:	f7ff feef 	bl	17816 <net_buf_frags_len>
   17a38:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
   17a3c:	1a1b      	subs	r3, r3, r0
   17a3e:	2b03      	cmp	r3, #3
   17a40:	d803      	bhi.n	17a4a <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   17a42:	2000      	movs	r0, #0
}
   17a44:	b011      	add	sp, #68	; 0x44
   17a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   17a4a:	4608      	mov	r0, r1
   17a4c:	f000 feb3 	bl	187b6 <net_buf_frag_last>
   17a50:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   17a52:	6860      	ldr	r0, [r4, #4]
   17a54:	f7ff fedf 	bl	17816 <net_buf_frags_len>
   17a58:	f8b9 a05e 	ldrh.w	sl, [r9, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
   17a5c:	f105 0b08 	add.w	fp, r5, #8
   17a60:	ebaa 0a00 	sub.w	sl, sl, r0
   17a64:	4658      	mov	r0, fp
   17a66:	f000 ff03 	bl	18870 <net_buf_simple_tailroom>
   17a6a:	4550      	cmp	r0, sl
   17a6c:	d93f      	bls.n	17aee <find_type_cb+0x112>
   17a6e:	6860      	ldr	r0, [r4, #4]
   17a70:	f7ff fed1 	bl	17816 <net_buf_frags_len>
   17a74:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
   17a78:	1a18      	subs	r0, r3, r0
	if (!len) {
   17a7a:	b970      	cbnz	r0, 17a9a <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   17a7c:	6863      	ldr	r3, [r4, #4]
   17a7e:	7998      	ldrb	r0, [r3, #6]
   17a80:	f7fb ffa0 	bl	139c4 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   17a84:	2200      	movs	r2, #0
   17a86:	2300      	movs	r3, #0
   17a88:	f000 fe61 	bl	1874e <net_buf_alloc_fixed>
		if (!frag) {
   17a8c:	4605      	mov	r5, r0
   17a8e:	2800      	cmp	r0, #0
   17a90:	d0d7      	beq.n	17a42 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   17a92:	4601      	mov	r1, r0
   17a94:	6860      	ldr	r0, [r4, #4]
   17a96:	f000 fe9f 	bl	187d8 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   17a9a:	2300      	movs	r3, #0
   17a9c:	9300      	str	r3, [sp, #0]
   17a9e:	f8d7 9004 	ldr.w	r9, [r7, #4]
   17aa2:	4639      	mov	r1, r7
   17aa4:	2310      	movs	r3, #16
   17aa6:	aa02      	add	r2, sp, #8
   17aa8:	4640      	mov	r0, r8
   17aaa:	47c8      	blx	r9
	if (read < 0) {
   17aac:	1e07      	subs	r7, r0, #0
   17aae:	db26      	blt.n	17afe <find_type_cb+0x122>
	if (read != data->value_len) {
   17ab0:	7c22      	ldrb	r2, [r4, #16]
   17ab2:	68e0      	ldr	r0, [r4, #12]
   17ab4:	42ba      	cmp	r2, r7
   17ab6:	d01e      	beq.n	17af6 <find_type_cb+0x11a>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   17ab8:	4601      	mov	r1, r0
   17aba:	a80b      	add	r0, sp, #44	; 0x2c
   17abc:	f7ff f8da 	bl	16c74 <bt_uuid_create>
   17ac0:	b1e8      	cbz	r0, 17afe <find_type_cb+0x122>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   17ac2:	b2fa      	uxtb	r2, r7
   17ac4:	a902      	add	r1, sp, #8
   17ac6:	a806      	add	r0, sp, #24
   17ac8:	f7ff f8d4 	bl	16c74 <bt_uuid_create>
   17acc:	b1b8      	cbz	r0, 17afe <find_type_cb+0x122>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   17ace:	a906      	add	r1, sp, #24
   17ad0:	a80b      	add	r0, sp, #44	; 0x2c
   17ad2:	f7ff f8a5 	bl	16c20 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   17ad6:	b990      	cbnz	r0, 17afe <find_type_cb+0x122>
	data->err = 0x00;
   17ad8:	2300      	movs	r3, #0
   17ada:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   17adc:	2104      	movs	r1, #4
   17ade:	f105 0008 	add.w	r0, r5, #8
   17ae2:	f000 fe8a 	bl	187fa <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   17ae6:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   17ae8:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   17aea:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   17aec:	e79e      	b.n	17a2c <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   17aee:	4658      	mov	r0, fp
   17af0:	f000 febe 	bl	18870 <net_buf_simple_tailroom>
   17af4:	e7c1      	b.n	17a7a <find_type_cb+0x9e>
	} else if (memcmp(data->value, uuid, read)) {
   17af6:	a902      	add	r1, sp, #8
   17af8:	f7fe ffca 	bl	16a90 <memcmp>
   17afc:	e7eb      	b.n	17ad6 <find_type_cb+0xfa>
	data->group = NULL;
   17afe:	2300      	movs	r3, #0
   17b00:	60a3      	str	r3, [r4, #8]
   17b02:	e793      	b.n	17a2c <find_type_cb+0x50>

00017b04 <find_info_cb>:
{
   17b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   17b06:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   17b08:	6817      	ldr	r7, [r2, #0]
{
   17b0a:	4605      	mov	r5, r0
   17b0c:	460e      	mov	r6, r1
   17b0e:	4614      	mov	r4, r2
	if (!data->rsp) {
   17b10:	b963      	cbnz	r3, 17b2c <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   17b12:	6850      	ldr	r0, [r2, #4]
   17b14:	2101      	movs	r1, #1
   17b16:	3008      	adds	r0, #8
   17b18:	f000 fe6f 	bl	187fa <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   17b1c:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   17b1e:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   17b20:	781b      	ldrb	r3, [r3, #0]
   17b22:	2b00      	cmp	r3, #0
   17b24:	bf0c      	ite	eq
   17b26:	2301      	moveq	r3, #1
   17b28:	2302      	movne	r3, #2
   17b2a:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   17b2c:	68a3      	ldr	r3, [r4, #8]
   17b2e:	781b      	ldrb	r3, [r3, #0]
   17b30:	2b01      	cmp	r3, #1
   17b32:	d003      	beq.n	17b3c <find_info_cb+0x38>
   17b34:	2b02      	cmp	r3, #2
   17b36:	d019      	beq.n	17b6c <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   17b38:	2000      	movs	r0, #0
   17b3a:	e016      	b.n	17b6a <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   17b3c:	682b      	ldr	r3, [r5, #0]
   17b3e:	781b      	ldrb	r3, [r3, #0]
   17b40:	2b00      	cmp	r3, #0
   17b42:	d1f9      	bne.n	17b38 <find_info_cb+0x34>
   17b44:	6860      	ldr	r0, [r4, #4]
   17b46:	2104      	movs	r1, #4
   17b48:	3008      	adds	r0, #8
   17b4a:	f000 fe56 	bl	187fa <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   17b4e:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   17b50:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   17b52:	885b      	ldrh	r3, [r3, #2]
   17b54:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   17b56:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   17b58:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   17b5a:	899b      	ldrh	r3, [r3, #12]
   17b5c:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   17b60:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   17b62:	2804      	cmp	r0, #4
   17b64:	bf94      	ite	ls
   17b66:	2000      	movls	r0, #0
   17b68:	2001      	movhi	r0, #1
}
   17b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   17b6c:	682b      	ldr	r3, [r5, #0]
   17b6e:	781b      	ldrb	r3, [r3, #0]
   17b70:	2b02      	cmp	r3, #2
   17b72:	d1e1      	bne.n	17b38 <find_info_cb+0x34>
   17b74:	6860      	ldr	r0, [r4, #4]
   17b76:	2112      	movs	r1, #18
   17b78:	3008      	adds	r0, #8
   17b7a:	f000 fe3e 	bl	187fa <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   17b7e:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   17b80:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   17b82:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   17b84:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   17b88:	3101      	adds	r1, #1
   17b8a:	f7fe ff91 	bl	16ab0 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   17b8e:	6863      	ldr	r3, [r4, #4]
   17b90:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   17b94:	899b      	ldrh	r3, [r3, #12]
   17b96:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   17b98:	2812      	cmp	r0, #18
   17b9a:	e7e3      	b.n	17b64 <find_info_cb+0x60>

00017b9c <attr_read_group_cb>:
	if (!data->rsp->len) {
   17b9c:	68d0      	ldr	r0, [r2, #12]
   17b9e:	7803      	ldrb	r3, [r0, #0]
   17ba0:	3104      	adds	r1, #4
   17ba2:	b913      	cbnz	r3, 17baa <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   17ba4:	7001      	strb	r1, [r0, #0]
	return true;
   17ba6:	2001      	movs	r0, #1
}
   17ba8:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   17baa:	428b      	cmp	r3, r1
   17bac:	d0fb      	beq.n	17ba6 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   17bae:	6891      	ldr	r1, [r2, #8]
   17bb0:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   17bb2:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   17bb4:	3b04      	subs	r3, #4
   17bb6:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   17bb8:	6110      	str	r0, [r2, #16]
		return false;
   17bba:	4770      	bx	lr

00017bbc <chan_req_send>:
{
   17bbc:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   17bbe:	688e      	ldr	r6, [r1, #8]
{
   17bc0:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   17bc2:	4630      	mov	r0, r6
{
   17bc4:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   17bc6:	f7ff fe26 	bl	17816 <net_buf_frags_len>
   17bca:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
   17bce:	4283      	cmp	r3, r0
   17bd0:	d30a      	bcc.n	17be8 <chan_req_send+0x2c>
	req->buf = NULL;
   17bd2:	2200      	movs	r2, #0
	chan->req = req;
   17bd4:	f8c5 10cc 	str.w	r1, [r5, #204]	; 0xcc
	err = chan_send(chan, buf, NULL);
   17bd8:	4628      	mov	r0, r5
	req->buf = NULL;
   17bda:	608a      	str	r2, [r1, #8]
	err = chan_send(chan, buf, NULL);
   17bdc:	4631      	mov	r1, r6
   17bde:	f7ef fbcf 	bl	7380 <chan_send>
	if (err) {
   17be2:	b100      	cbz	r0, 17be6 <chan_req_send+0x2a>
		req->buf = buf;
   17be4:	60a6      	str	r6, [r4, #8]
}
   17be6:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   17be8:	f06f 0023 	mvn.w	r0, #35	; 0x23
   17bec:	e7fb      	b.n	17be6 <chan_req_send+0x2a>

00017bee <process_queue>:
{
   17bee:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   17bf0:	2200      	movs	r2, #0
{
   17bf2:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   17bf4:	2300      	movs	r3, #0
   17bf6:	4608      	mov	r0, r1
{
   17bf8:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   17bfa:	f000 fdad 	bl	18758 <net_buf_get>
	if (buf) {
   17bfe:	4605      	mov	r5, r0
   17c00:	b160      	cbz	r0, 17c1c <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   17c02:	4601      	mov	r1, r0
   17c04:	2200      	movs	r2, #0
   17c06:	4620      	mov	r0, r4
   17c08:	f7ef fbba 	bl	7380 <chan_send>
		if (err) {
   17c0c:	4604      	mov	r4, r0
   17c0e:	b118      	cbz	r0, 17c18 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   17c10:	4629      	mov	r1, r5
   17c12:	4630      	mov	r0, r6
   17c14:	f001 f804 	bl	18c20 <k_queue_prepend>
}
   17c18:	4620      	mov	r0, r4
   17c1a:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   17c1c:	f06f 0401 	mvn.w	r4, #1
   17c20:	e7fa      	b.n	17c18 <process_queue+0x2a>

00017c22 <att_exec_write_req>:
   17c22:	2006      	movs	r0, #6
   17c24:	4770      	bx	lr

00017c26 <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17c26:	30c8      	adds	r0, #200	; 0xc8
   17c28:	f3bf 8f5b 	dmb	ish
   17c2c:	e850 3f00 	ldrex	r3, [r0]
   17c30:	f023 0301 	bic.w	r3, r3, #1
   17c34:	e840 3200 	strex	r2, r3, [r0]
   17c38:	2a00      	cmp	r2, #0
   17c3a:	d1f7      	bne.n	17c2c <chan_rsp_sent+0x6>
   17c3c:	f3bf 8f5b 	dmb	ish
}
   17c40:	4770      	bx	lr

00017c42 <chan_cfm_sent>:
   17c42:	30c8      	adds	r0, #200	; 0xc8
   17c44:	f3bf 8f5b 	dmb	ish
   17c48:	e850 3f00 	ldrex	r3, [r0]
   17c4c:	f023 0302 	bic.w	r3, r3, #2
   17c50:	e840 3200 	strex	r2, r3, [r0]
   17c54:	2a00      	cmp	r2, #0
   17c56:	d1f7      	bne.n	17c48 <chan_cfm_sent+0x6>
   17c58:	f3bf 8f5b 	dmb	ish
}
   17c5c:	4770      	bx	lr

00017c5e <att_get>:
{
   17c5e:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   17c60:	7a83      	ldrb	r3, [r0, #10]
   17c62:	2b07      	cmp	r3, #7
   17c64:	d001      	beq.n	17c6a <att_get+0xc>
		return NULL;
   17c66:	2000      	movs	r0, #0
}
   17c68:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   17c6a:	2104      	movs	r1, #4
   17c6c:	f7ff fd82 	bl	17774 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   17c70:	2800      	cmp	r0, #0
   17c72:	d0f8      	beq.n	17c66 <att_get+0x8>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17c74:	f3bf 8f5b 	dmb	ish
   17c78:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   17c7c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   17c80:	075b      	lsls	r3, r3, #29
   17c82:	d4f0      	bmi.n	17c66 <att_get+0x8>
	return att_chan->att;
   17c84:	f850 0c08 	ldr.w	r0, [r0, #-8]
   17c88:	e7ee      	b.n	17c68 <att_get+0xa>

00017c8a <bt_att_status>:
{
   17c8a:	b538      	push	{r3, r4, r5, lr}
   17c8c:	f3bf 8f5b 	dmb	ish
   17c90:	680b      	ldr	r3, [r1, #0]
   17c92:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   17c96:	07db      	lsls	r3, r3, #31
{
   17c98:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   17c9a:	d519      	bpl.n	17cd0 <bt_att_status+0x46>
	if (!chan->att) {
   17c9c:	f850 0c08 	ldr.w	r0, [r0, #-8]
   17ca0:	b1b0      	cbz	r0, 17cd0 <bt_att_status+0x46>
	if (chan->req) {
   17ca2:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
   17ca6:	b99b      	cbnz	r3, 17cd0 <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   17ca8:	3004      	adds	r0, #4
   17caa:	f7ff fd8f 	bl	177cc <sys_slist_get>
	if (!node) {
   17cae:	4604      	mov	r4, r0
   17cb0:	b170      	cbz	r0, 17cd0 <bt_att_status+0x46>
	return chan_req_send(chan, req);
   17cb2:	4601      	mov	r1, r0
   17cb4:	f1a5 0008 	sub.w	r0, r5, #8
   17cb8:	f7ff ff80 	bl	17bbc <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   17cbc:	2800      	cmp	r0, #0
   17cbe:	da07      	bge.n	17cd0 <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   17cc0:	f855 3c08 	ldr.w	r3, [r5, #-8]
Z_GENLIST_PREPEND(slist, snode)
   17cc4:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   17cc6:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   17cc8:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   17cca:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   17ccc:	b902      	cbnz	r2, 17cd0 <bt_att_status+0x46>
	list->tail = node;
   17cce:	609c      	str	r4, [r3, #8]
}
   17cd0:	bd38      	pop	{r3, r4, r5, pc}

00017cd2 <att_req_send_process>:
{
   17cd2:	b570      	push	{r4, r5, r6, lr}
   17cd4:	4605      	mov	r5, r0
	node = sys_slist_get(&att->reqs);
   17cd6:	3004      	adds	r0, #4
   17cd8:	f7ff fd78 	bl	177cc <sys_slist_get>
	if (!node) {
   17cdc:	4606      	mov	r6, r0
   17cde:	b1c0      	cbz	r0, 17d12 <att_req_send_process+0x40>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   17ce0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   17ce2:	b153      	cbz	r3, 17cfa <att_req_send_process+0x28>
   17ce4:	f5b3 708e 	subs.w	r0, r3, #284	; 0x11c
   17ce8:	d007      	beq.n	17cfa <att_req_send_process+0x28>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   17cea:	681c      	ldr	r4, [r3, #0]
   17cec:	b10c      	cbz	r4, 17cf2 <att_req_send_process+0x20>
   17cee:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
		if (!chan->req) {
   17cf2:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   17cf6:	b13b      	cbz	r3, 17d08 <att_req_send_process+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   17cf8:	b964      	cbnz	r4, 17d14 <att_req_send_process+0x42>
Z_GENLIST_PREPEND(slist, snode)
   17cfa:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   17cfc:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   17cfe:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   17d00:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   17d02:	b933      	cbnz	r3, 17d12 <att_req_send_process+0x40>
	list->tail = node;
   17d04:	60ae      	str	r6, [r5, #8]
}
   17d06:	e004      	b.n	17d12 <att_req_send_process+0x40>
	return chan_req_send(chan, req);
   17d08:	4631      	mov	r1, r6
   17d0a:	f7ff ff57 	bl	17bbc <chan_req_send>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   17d0e:	2800      	cmp	r0, #0
   17d10:	dbf2      	blt.n	17cf8 <att_req_send_process+0x26>
}
   17d12:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   17d14:	f514 738e 	adds.w	r3, r4, #284	; 0x11c
   17d18:	d004      	beq.n	17d24 <att_req_send_process+0x52>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   17d1a:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   17d1e:	b10b      	cbz	r3, 17d24 <att_req_send_process+0x52>
   17d20:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
{
   17d24:	4620      	mov	r0, r4
   17d26:	461c      	mov	r4, r3
   17d28:	e7e3      	b.n	17cf2 <att_req_send_process+0x20>

00017d2a <write_cb>:
{
   17d2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17d2c:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   17d2e:	4601      	mov	r1, r0
{
   17d30:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   17d32:	222a      	movs	r2, #42	; 0x2a
   17d34:	6820      	ldr	r0, [r4, #0]
   17d36:	f000 fc8c 	bl	18652 <bt_gatt_check_perm>
   17d3a:	4605      	mov	r5, r0
   17d3c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   17d3e:	bb00      	cbnz	r0, 17d82 <write_cb+0x58>
	if (!data->req) {
   17d40:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   17d42:	68b7      	ldr	r7, [r6, #8]
   17d44:	68e2      	ldr	r2, [r4, #12]
   17d46:	6820      	ldr	r0, [r4, #0]
	if (!data->req) {
   17d48:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
   17d4a:	bf14      	ite	ne
   17d4c:	2300      	movne	r3, #0
   17d4e:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   17d50:	9301      	str	r3, [sp, #4]
   17d52:	8a63      	ldrh	r3, [r4, #18]
   17d54:	9300      	str	r3, [sp, #0]
   17d56:	4631      	mov	r1, r6
   17d58:	8a23      	ldrh	r3, [r4, #16]
   17d5a:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   17d5c:	1e03      	subs	r3, r0, #0
   17d5e:	db05      	blt.n	17d6c <write_cb+0x42>
   17d60:	8a22      	ldrh	r2, [r4, #16]
   17d62:	4293      	cmp	r3, r2
   17d64:	d10b      	bne.n	17d7e <write_cb+0x54>
	data->err = 0U;
   17d66:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   17d68:	2501      	movs	r5, #1
   17d6a:	e005      	b.n	17d78 <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   17d6c:	f113 0fff 	cmn.w	r3, #255	; 0xff
   17d70:	d305      	bcc.n	17d7e <write_cb+0x54>
		return -err;
   17d72:	425b      	negs	r3, r3
   17d74:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   17d76:	7523      	strb	r3, [r4, #20]
}
   17d78:	4628      	mov	r0, r5
   17d7a:	b003      	add	sp, #12
   17d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   17d7e:	230e      	movs	r3, #14
   17d80:	e7f9      	b.n	17d76 <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   17d82:	2500      	movs	r5, #0
   17d84:	e7f8      	b.n	17d78 <write_cb+0x4e>

00017d86 <bt_att_sent>:
{
   17d86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   17d88:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
	struct bt_att *att = chan->att;
   17d8c:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   17d90:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   17d92:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   17d96:	b10b      	cbz	r3, 17d9c <bt_att_sent+0x16>
		chan->sent(chan);
   17d98:	4638      	mov	r0, r7
   17d9a:	4798      	blx	r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17d9c:	f3bf 8f5b 	dmb	ish
   17da0:	f105 03c0 	add.w	r3, r5, #192	; 0xc0
   17da4:	e853 2f00 	ldrex	r2, [r3]
   17da8:	f022 0210 	bic.w	r2, r2, #16
   17dac:	e843 2100 	strex	r1, r2, [r3]
   17db0:	2900      	cmp	r1, #0
   17db2:	d1f7      	bne.n	17da4 <bt_att_sent+0x1e>
   17db4:	f3bf 8f5b 	dmb	ish
	if (!att) {
   17db8:	b30c      	cbz	r4, 17dfe <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   17dba:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
   17dbe:	b98b      	cbnz	r3, 17de4 <bt_att_sent+0x5e>
   17dc0:	6863      	ldr	r3, [r4, #4]
   17dc2:	b17b      	cbz	r3, 17de4 <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   17dc4:	1d20      	adds	r0, r4, #4
   17dc6:	f7ff fd01 	bl	177cc <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   17dca:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   17dcc:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   17dce:	4638      	mov	r0, r7
   17dd0:	f7ff fef4 	bl	17bbc <chan_req_send>
   17dd4:	2800      	cmp	r0, #0
   17dd6:	da12      	bge.n	17dfe <bt_att_sent+0x78>
Z_GENLIST_PREPEND(slist, snode)
   17dd8:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   17dda:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   17ddc:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   17dde:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   17de0:	b903      	cbnz	r3, 17de4 <bt_att_sent+0x5e>
	list->tail = node;
   17de2:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   17de4:	f105 01c8 	add.w	r1, r5, #200	; 0xc8
   17de8:	4638      	mov	r0, r7
   17dea:	f7ff ff00 	bl	17bee <process_queue>
	if (!err) {
   17dee:	b130      	cbz	r0, 17dfe <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   17df0:	f104 010c 	add.w	r1, r4, #12
   17df4:	4638      	mov	r0, r7
}
   17df6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   17dfa:	f7ff bef8 	b.w	17bee <process_queue>
}
   17dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00017e00 <read_cb>:
{
   17e00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   17e04:	f8d2 8000 	ldr.w	r8, [r2]
{
   17e08:	4606      	mov	r6, r0
	data->err = 0x00;
   17e0a:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   17e0c:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   17e10:	7317      	strb	r7, [r2, #12]
{
   17e12:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   17e14:	4631      	mov	r1, r6
   17e16:	2215      	movs	r2, #21
   17e18:	f000 fc1b 	bl	18652 <bt_gatt_check_perm>
   17e1c:	4604      	mov	r4, r0
   17e1e:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   17e20:	b9a0      	cbnz	r0, 17e4c <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   17e22:	e9cd 0000 	strd	r0, r0, [sp]
   17e26:	88ab      	ldrh	r3, [r5, #4]
   17e28:	68aa      	ldr	r2, [r5, #8]
   17e2a:	4631      	mov	r1, r6
   17e2c:	4640      	mov	r0, r8
   17e2e:	f7ff fd4a 	bl	178c6 <att_chan_read>
	if (ret < 0) {
   17e32:	1e03      	subs	r3, r0, #0
   17e34:	da0c      	bge.n	17e50 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   17e36:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   17e3a:	bf26      	itte	cs
   17e3c:	425b      	negcs	r3, r3
   17e3e:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   17e40:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   17e42:	732b      	strb	r3, [r5, #12]
}
   17e44:	4620      	mov	r0, r4
   17e46:	b002      	add	sp, #8
   17e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   17e4c:	463c      	mov	r4, r7
   17e4e:	e7f9      	b.n	17e44 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   17e50:	2401      	movs	r4, #1
   17e52:	e7f7      	b.n	17e44 <read_cb+0x44>

00017e54 <bt_att_chan_create_pdu>:
{
   17e54:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   17e56:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
   17e5a:	3201      	adds	r2, #1
   17e5c:	429a      	cmp	r2, r3
{
   17e5e:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   17e60:	d81b      	bhi.n	17e9a <bt_att_chan_create_pdu+0x46>
	switch (att_op_get_type(op)) {
   17e62:	4608      	mov	r0, r1
   17e64:	f7ff fcf7 	bl	17856 <att_op_get_type>
   17e68:	2802      	cmp	r0, #2
   17e6a:	d001      	beq.n	17e70 <bt_att_chan_create_pdu+0x1c>
   17e6c:	2804      	cmp	r0, #4
   17e6e:	d10f      	bne.n	17e90 <bt_att_chan_create_pdu+0x3c>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   17e70:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   17e74:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   17e76:	2100      	movs	r1, #0
   17e78:	4608      	mov	r0, r1
   17e7a:	f7ff fbd5 	bl	17628 <bt_l2cap_create_pdu_timeout>
   17e7e:	4604      	mov	r4, r0
	if (!buf) {
   17e80:	b120      	cbz	r0, 17e8c <bt_att_chan_create_pdu+0x38>
   17e82:	2101      	movs	r1, #1
   17e84:	3008      	adds	r0, #8
   17e86:	f000 fcb8 	bl	187fa <net_buf_simple_add>
	hdr->code = op;
   17e8a:	7005      	strb	r5, [r0, #0]
}
   17e8c:	4620      	mov	r0, r4
   17e8e:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_l2cap_create_pdu(NULL, 0);
   17e90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17e94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17e98:	e7ed      	b.n	17e76 <bt_att_chan_create_pdu+0x22>
		return NULL;
   17e9a:	2400      	movs	r4, #0
   17e9c:	e7f6      	b.n	17e8c <bt_att_chan_create_pdu+0x38>

00017e9e <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   17e9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17ea2:	4688      	mov	r8, r1
   17ea4:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   17ea6:	2101      	movs	r1, #1
   17ea8:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   17eaa:	4605      	mov	r5, r0
   17eac:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   17eae:	f7ff ffd1 	bl	17e54 <bt_att_chan_create_pdu>
	if (!buf) {
   17eb2:	4604      	mov	r4, r0
   17eb4:	b170      	cbz	r0, 17ed4 <send_err_rsp.part.0+0x36>
   17eb6:	2104      	movs	r1, #4
   17eb8:	3008      	adds	r0, #8
   17eba:	f000 fc9e 	bl	187fa <net_buf_simple_add>
	rsp->request = req;
   17ebe:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   17ec2:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   17ec4:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   17ec8:	4621      	mov	r1, r4
   17eca:	4628      	mov	r0, r5
}
   17ecc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   17ed0:	f7ef baba 	b.w	7448 <bt_att_chan_send_rsp.constprop.0>
}
   17ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00017ed8 <bt_att_create_pdu>:
{
   17ed8:	b570      	push	{r4, r5, r6, lr}
   17eda:	460e      	mov	r6, r1
   17edc:	4615      	mov	r5, r2
	att = att_get(conn);
   17ede:	f7ff febe 	bl	17c5e <att_get>
	if (!att) {
   17ee2:	b170      	cbz	r0, 17f02 <bt_att_create_pdu+0x2a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   17ee4:	6a43      	ldr	r3, [r0, #36]	; 0x24
   17ee6:	b163      	cbz	r3, 17f02 <bt_att_create_pdu+0x2a>
   17ee8:	f5b3 708e 	subs.w	r0, r3, #284	; 0x11c
   17eec:	d009      	beq.n	17f02 <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   17eee:	681b      	ldr	r3, [r3, #0]
   17ef0:	b10b      	cbz	r3, 17ef6 <bt_att_create_pdu+0x1e>
   17ef2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   17ef6:	1c6a      	adds	r2, r5, #1
   17ef8:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
   17efc:	428a      	cmp	r2, r1
   17efe:	d902      	bls.n	17f06 <bt_att_create_pdu+0x2e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   17f00:	b93b      	cbnz	r3, 17f12 <bt_att_create_pdu+0x3a>
}
   17f02:	2000      	movs	r0, #0
   17f04:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   17f06:	462a      	mov	r2, r5
   17f08:	4631      	mov	r1, r6
}
   17f0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   17f0e:	f7ff bfa1 	b.w	17e54 <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
   17f12:	f513 748e 	adds.w	r4, r3, #284	; 0x11c
   17f16:	d004      	beq.n	17f22 <bt_att_create_pdu+0x4a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   17f18:	f8d3 411c 	ldr.w	r4, [r3, #284]	; 0x11c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   17f1c:	b10c      	cbz	r4, 17f22 <bt_att_create_pdu+0x4a>
   17f1e:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
{
   17f22:	4618      	mov	r0, r3
   17f24:	4623      	mov	r3, r4
   17f26:	e7e7      	b.n	17ef8 <bt_att_create_pdu+0x20>

00017f28 <att_read_blob_req>:
{
   17f28:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   17f2a:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   17f2c:	8813      	ldrh	r3, [r2, #0]
   17f2e:	8852      	ldrh	r2, [r2, #2]
   17f30:	9200      	str	r2, [sp, #0]
   17f32:	210c      	movs	r1, #12
   17f34:	220d      	movs	r2, #13
   17f36:	f7ef fce7 	bl	7908 <att_read_rsp>
}
   17f3a:	b003      	add	sp, #12
   17f3c:	f85d fb04 	ldr.w	pc, [sp], #4

00017f40 <att_read_req>:
{
   17f40:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   17f42:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   17f44:	2200      	movs	r2, #0
   17f46:	881b      	ldrh	r3, [r3, #0]
   17f48:	9200      	str	r2, [sp, #0]
   17f4a:	210a      	movs	r1, #10
   17f4c:	220b      	movs	r2, #11
   17f4e:	f7ef fcdb 	bl	7908 <att_read_rsp>
}
   17f52:	b003      	add	sp, #12
   17f54:	f85d fb04 	ldr.w	pc, [sp], #4

00017f58 <att_mtu_req>:
{
   17f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   17f5a:	6803      	ldr	r3, [r0, #0]
{
   17f5c:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   17f5e:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17f60:	f3bf 8f5b 	dmb	ish
   17f64:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
   17f68:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   17f6c:	f3c3 04c0 	ubfx	r4, r3, #3, #1
   17f70:	071b      	lsls	r3, r3, #28
   17f72:	d41a      	bmi.n	17faa <att_mtu_req+0x52>
	mtu_client = sys_le16_to_cpu(req->mtu);
   17f74:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   17f76:	881b      	ldrh	r3, [r3, #0]
   17f78:	2b16      	cmp	r3, #22
   17f7a:	d918      	bls.n	17fae <att_mtu_req+0x56>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   17f7c:	2202      	movs	r2, #2
   17f7e:	2103      	movs	r1, #3
   17f80:	f7ff ffaa 	bl	17ed8 <bt_att_create_pdu>
	if (!pdu) {
   17f84:	4606      	mov	r6, r0
   17f86:	b1a0      	cbz	r0, 17fb2 <att_mtu_req+0x5a>
   17f88:	2102      	movs	r1, #2
   17f8a:	3008      	adds	r0, #8
   17f8c:	f000 fc35 	bl	187fa <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   17f90:	2717      	movs	r7, #23
   17f92:	7007      	strb	r7, [r0, #0]
   17f94:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   17f96:	4631      	mov	r1, r6
   17f98:	4628      	mov	r0, r5
   17f9a:	f7ef fa55 	bl	7448 <bt_att_chan_send_rsp.constprop.0>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   17f9e:	f8a5 7052 	strh.w	r7, [r5, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   17fa2:	f8a5 705e 	strh.w	r7, [r5, #94]	; 0x5e
	return 0;
   17fa6:	4620      	mov	r0, r4
}
   17fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   17faa:	2006      	movs	r0, #6
   17fac:	e7fc      	b.n	17fa8 <att_mtu_req+0x50>
		return BT_ATT_ERR_INVALID_PDU;
   17fae:	2004      	movs	r0, #4
   17fb0:	e7fa      	b.n	17fa8 <att_mtu_req+0x50>
		return BT_ATT_ERR_UNLIKELY;
   17fb2:	200e      	movs	r0, #14
   17fb4:	e7f8      	b.n	17fa8 <att_mtu_req+0x50>

00017fb6 <bt_att_init>:
	bt_gatt_init();
   17fb6:	f7ef bffd 	b.w	7fb4 <bt_gatt_init>

00017fba <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   17fba:	898a      	ldrh	r2, [r1, #12]
   17fbc:	6889      	ldr	r1, [r1, #8]
   17fbe:	2300      	movs	r3, #0
   17fc0:	f7ef be14 	b.w	7bec <att_handle_rsp>

00017fc4 <att_timeout>:
	bt_att_disconnected(&chan->chan.chan);
   17fc4:	38e0      	subs	r0, #224	; 0xe0
   17fc6:	f7ef be47 	b.w	7c58 <bt_att_disconnected>

00017fca <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   17fca:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   17fce:	4607      	mov	r7, r0
   17fd0:	460d      	mov	r5, r1
   17fd2:	4616      	mov	r6, r2
   17fd4:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   17fd6:	f7ff fe42 	bl	17c5e <att_get>
	if (!att) {
   17fda:	4604      	mov	r4, r0
   17fdc:	b938      	cbnz	r0, 17fee <bt_att_send+0x24>
		net_buf_unref(buf);
   17fde:	4628      	mov	r0, r5
   17fe0:	f7fb fdac 	bl	13b3c <net_buf_unref>
		return -ENOTCONN;
   17fe4:	f06f 0038 	mvn.w	r0, #56	; 0x38

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   17fe8:	b002      	add	sp, #8
   17fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   17fee:	b146      	cbz	r6, 18002 <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   17ff0:	f8cd 8000 	str.w	r8, [sp]
   17ff4:	4633      	mov	r3, r6
   17ff6:	462a      	mov	r2, r5
   17ff8:	2104      	movs	r1, #4
   17ffa:	4638      	mov	r0, r7
   17ffc:	f7ff fb17 	bl	1762e <bt_l2cap_send_cb>
   18000:	e7f2      	b.n	17fe8 <bt_att_send+0x1e>
	net_buf_put(&att->tx_queue, buf);
   18002:	f100 060c 	add.w	r6, r0, #12
   18006:	4629      	mov	r1, r5
   18008:	4630      	mov	r0, r6
   1800a:	f000 fbc3 	bl	18794 <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   1800e:	2200      	movs	r2, #0
   18010:	2300      	movs	r3, #0
   18012:	4630      	mov	r0, r6
   18014:	f000 fba0 	bl	18758 <net_buf_get>
	if (!buf) {
   18018:	4605      	mov	r5, r0
   1801a:	b908      	cbnz	r0, 18020 <bt_att_send+0x56>
	return 0;
   1801c:	2000      	movs	r0, #0
   1801e:	e7e3      	b.n	17fe8 <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18020:	6a63      	ldr	r3, [r4, #36]	; 0x24
   18022:	b1c3      	cbz	r3, 18056 <bt_att_send+0x8c>
   18024:	f5b3 708e 	subs.w	r0, r3, #284	; 0x11c
   18028:	d015      	beq.n	18056 <bt_att_send+0x8c>
   1802a:	681c      	ldr	r4, [r3, #0]
   1802c:	b10c      	cbz	r4, 18032 <bt_att_send+0x68>
   1802e:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
	return chan_send(chan, buf, cb);
   18032:	2200      	movs	r2, #0
   18034:	4629      	mov	r1, r5
   18036:	f7ef f9a3 	bl	7380 <chan_send>
		if (err >= 0) {
   1803a:	2800      	cmp	r0, #0
   1803c:	daee      	bge.n	1801c <bt_att_send+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1803e:	b154      	cbz	r4, 18056 <bt_att_send+0x8c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   18040:	f514 738e 	adds.w	r3, r4, #284	; 0x11c
   18044:	d004      	beq.n	18050 <bt_att_send+0x86>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   18046:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   1804a:	b10b      	cbz	r3, 18050 <bt_att_send+0x86>
   1804c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
{
   18050:	4620      	mov	r0, r4
   18052:	461c      	mov	r4, r3
   18054:	e7ed      	b.n	18032 <bt_att_send+0x68>
		k_queue_prepend(&att->tx_queue._queue, buf);
   18056:	4629      	mov	r1, r5
   18058:	4630      	mov	r0, r6
   1805a:	f000 fde1 	bl	18c20 <k_queue_prepend>
   1805e:	e7dd      	b.n	1801c <bt_att_send+0x52>

00018060 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   18060:	b510      	push	{r4, lr}
   18062:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   18064:	f7ff fdfb 	bl	17c5e <att_get>
	if (!att) {
   18068:	b160      	cbz	r0, 18084 <bt_att_req_send+0x24>
	parent->next = child;
   1806a:	2300      	movs	r3, #0
   1806c:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   1806e:	6883      	ldr	r3, [r0, #8]
   18070:	b92b      	cbnz	r3, 1807e <bt_att_req_send+0x1e>
	list->head = node;
   18072:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   18076:	f7ff fe2c 	bl	17cd2 <att_req_send_process>

	return 0;
   1807a:	2000      	movs	r0, #0
}
   1807c:	bd10      	pop	{r4, pc}
	parent->next = child;
   1807e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   18080:	6084      	str	r4, [r0, #8]
}
   18082:	e7f8      	b.n	18076 <bt_att_req_send+0x16>
		return -ENOTCONN;
   18084:	f06f 0038 	mvn.w	r0, #56	; 0x38
   18088:	e7f8      	b.n	1807c <bt_att_req_send+0x1c>

0001808a <gatt_ccc_changed>:
{
   1808a:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   1808c:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   1808e:	895a      	ldrh	r2, [r3, #10]
   18090:	428a      	cmp	r2, r1
   18092:	d003      	beq.n	1809c <gatt_ccc_changed+0x12>
		ccc->value = value;
   18094:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   18096:	68db      	ldr	r3, [r3, #12]
   18098:	b103      	cbz	r3, 1809c <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   1809a:	4718      	bx	r3
}
   1809c:	4770      	bx	lr

0001809e <gatt_indicate_rsp>:
{
   1809e:	b510      	push	{r4, lr}
   180a0:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   180a2:	68a3      	ldr	r3, [r4, #8]
{
   180a4:	460a      	mov	r2, r1
	if (params->func) {
   180a6:	b10b      	cbz	r3, 180ac <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   180a8:	4621      	mov	r1, r4
   180aa:	4798      	blx	r3
	params->_ref--;
   180ac:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   180ae:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   180b0:	3b01      	subs	r3, #1
   180b2:	b2db      	uxtb	r3, r3
   180b4:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   180b6:	b122      	cbz	r2, 180c2 <gatt_indicate_rsp+0x24>
   180b8:	b91b      	cbnz	r3, 180c2 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   180ba:	4620      	mov	r0, r4
}
   180bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   180c0:	4710      	bx	r2
}
   180c2:	bd10      	pop	{r4, pc}

000180c4 <match_uuid>:
	data->attr = attr;
   180c4:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   180c6:	8091      	strh	r1, [r2, #4]
}
   180c8:	2000      	movs	r0, #0
   180ca:	4770      	bx	lr

000180cc <gen_hash_m>:
{
   180cc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   180ce:	6807      	ldr	r7, [r0, #0]
   180d0:	783d      	ldrb	r5, [r7, #0]
{
   180d2:	b089      	sub	sp, #36	; 0x24
   180d4:	4606      	mov	r6, r0
   180d6:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   180d8:	b10d      	cbz	r5, 180de <gen_hash_m+0x12>
	switch (u16->val) {
   180da:	2501      	movs	r5, #1
   180dc:	e014      	b.n	18108 <gen_hash_m+0x3c>
   180de:	887b      	ldrh	r3, [r7, #2]
   180e0:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   180e4:	d004      	beq.n	180f0 <gen_hash_m+0x24>
   180e6:	d812      	bhi.n	1810e <gen_hash_m+0x42>
   180e8:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   180ec:	2b03      	cmp	r3, #3
   180ee:	d8f4      	bhi.n	180da <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   180f0:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   180f4:	2202      	movs	r2, #2
   180f6:	f10d 010e 	add.w	r1, sp, #14
   180fa:	4620      	mov	r0, r4
   180fc:	f7fe fbf0 	bl	168e0 <tc_cmac_update>
   18100:	b9e0      	cbnz	r0, 1813c <gen_hash_m+0x70>
			state->err = -EINVAL;
   18102:	f06f 0315 	mvn.w	r3, #21
   18106:	65a3      	str	r3, [r4, #88]	; 0x58
}
   18108:	4628      	mov	r0, r5
   1810a:	b009      	add	sp, #36	; 0x24
   1810c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   1810e:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   18112:	33ff      	adds	r3, #255	; 0xff
   18114:	b29b      	uxth	r3, r3
   18116:	2b04      	cmp	r3, #4
   18118:	d8df      	bhi.n	180da <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1811a:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1811e:	2202      	movs	r2, #2
   18120:	f10d 010e 	add.w	r1, sp, #14
   18124:	4620      	mov	r0, r4
   18126:	f7fe fbdb 	bl	168e0 <tc_cmac_update>
   1812a:	2800      	cmp	r0, #0
   1812c:	d0e9      	beq.n	18102 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   1812e:	887b      	ldrh	r3, [r7, #2]
   18130:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   18134:	2202      	movs	r2, #2
   18136:	f10d 010e 	add.w	r1, sp, #14
   1813a:	e017      	b.n	1816c <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   1813c:	887b      	ldrh	r3, [r7, #2]
   1813e:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   18142:	2202      	movs	r2, #2
   18144:	f10d 010e 	add.w	r1, sp, #14
   18148:	4620      	mov	r0, r4
   1814a:	f7fe fbc9 	bl	168e0 <tc_cmac_update>
   1814e:	2800      	cmp	r0, #0
   18150:	d0d7      	beq.n	18102 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   18152:	2000      	movs	r0, #0
   18154:	2310      	movs	r3, #16
   18156:	eb0d 0203 	add.w	r2, sp, r3
   1815a:	6877      	ldr	r7, [r6, #4]
   1815c:	9000      	str	r0, [sp, #0]
   1815e:	4631      	mov	r1, r6
   18160:	47b8      	blx	r7
		if (len < 0) {
   18162:	1e02      	subs	r2, r0, #0
   18164:	da01      	bge.n	1816a <gen_hash_m+0x9e>
			state->err = len;
   18166:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   18168:	e7ce      	b.n	18108 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   1816a:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1816c:	4620      	mov	r0, r4
   1816e:	f7fe fbb7 	bl	168e0 <tc_cmac_update>
   18172:	2800      	cmp	r0, #0
   18174:	d1b1      	bne.n	180da <gen_hash_m+0xe>
   18176:	e7c4      	b.n	18102 <gen_hash_m+0x36>

00018178 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   18178:	2301      	movs	r3, #1
   1817a:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1817c:	f3bf 8f5b 	dmb	ish
   18180:	e850 2f00 	ldrex	r2, [r0]
   18184:	431a      	orrs	r2, r3
   18186:	e840 2100 	strex	r1, r2, [r0]
   1818a:	2900      	cmp	r1, #0
   1818c:	d1f8      	bne.n	18180 <atomic_set_bit+0x8>
   1818e:	f3bf 8f5b 	dmb	ish
}
   18192:	4770      	bx	lr

00018194 <find_ccc_cfg>:
{
   18194:	b537      	push	{r0, r1, r2, r4, r5, lr}
   18196:	460c      	mov	r4, r1
   18198:	1c4d      	adds	r5, r1, #1
		if (conn) {
   1819a:	b148      	cbz	r0, 181b0 <find_ccc_cfg+0x1c>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1819c:	7809      	ldrb	r1, [r1, #0]
   1819e:	462a      	mov	r2, r5
   181a0:	f7ff f907 	bl	173b2 <bt_conn_is_peer_addr_le>
   181a4:	2800      	cmp	r0, #0
	return NULL;
   181a6:	bf08      	it	eq
   181a8:	2400      	moveq	r4, #0
}
   181aa:	4620      	mov	r0, r4
   181ac:	b003      	add	sp, #12
   181ae:	bd30      	pop	{r4, r5, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   181b0:	9000      	str	r0, [sp, #0]
   181b2:	2207      	movs	r2, #7
   181b4:	f8cd 0003 	str.w	r0, [sp, #3]
   181b8:	4669      	mov	r1, sp
   181ba:	4628      	mov	r0, r5
   181bc:	f7fe fc68 	bl	16a90 <memcmp>
   181c0:	2800      	cmp	r0, #0
	return NULL;
   181c2:	bf18      	it	ne
   181c4:	2400      	movne	r4, #0
   181c6:	e7f0      	b.n	181aa <find_ccc_cfg+0x16>

000181c8 <sc_restore_rsp>:
{
   181c8:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   181ca:	f7ef fdf1 	bl	7db0 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   181ce:	b140      	cbz	r0, 181e2 <sc_restore_rsp+0x1a>
   181d0:	7a03      	ldrb	r3, [r0, #8]
   181d2:	07db      	lsls	r3, r3, #31
   181d4:	d505      	bpl.n	181e2 <sc_restore_rsp+0x1a>
}
   181d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   181da:	2100      	movs	r1, #0
   181dc:	300c      	adds	r0, #12
   181de:	f7ff bfcb 	b.w	18178 <atomic_set_bit>
}
   181e2:	bd08      	pop	{r3, pc}

000181e4 <bt_gatt_attr_write_ccc>:
{
   181e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   181e8:	461f      	mov	r7, r3
   181ea:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
   181ee:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   181f2:	4606      	mov	r6, r0
   181f4:	4688      	mov	r8, r1
	if (offset) {
   181f6:	2b00      	cmp	r3, #0
   181f8:	d146      	bne.n	18288 <bt_gatt_attr_write_ccc+0xa4>
	if (!len || len > sizeof(uint16_t)) {
   181fa:	1e7b      	subs	r3, r7, #1
   181fc:	2b01      	cmp	r3, #1
   181fe:	d846      	bhi.n	1828e <bt_gatt_attr_write_ccc+0xaa>
	if (len < sizeof(uint16_t)) {
   18200:	2f01      	cmp	r7, #1
		value = *(uint8_t *)buf;
   18202:	7815      	ldrb	r5, [r2, #0]
   18204:	bf18      	it	ne
   18206:	7853      	ldrbne	r3, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
   18208:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
   1820a:	bf0c      	ite	eq
   1820c:	b2ad      	uxtheq	r5, r5
   1820e:	ea45 2503 	orrne.w	r5, r5, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
   18212:	f7ff ffbf 	bl	18194 <find_ccc_cfg>
	if (!cfg) {
   18216:	4604      	mov	r4, r0
   18218:	b988      	cbnz	r0, 1823e <bt_gatt_attr_write_ccc+0x5a>
		if (!value) {
   1821a:	b91d      	cbnz	r5, 18224 <bt_gatt_attr_write_ccc+0x40>
			return len;
   1821c:	4638      	mov	r0, r7
}
   1821e:	b003      	add	sp, #12
   18220:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   18224:	4649      	mov	r1, r9
   18226:	f7ff ffb5 	bl	18194 <find_ccc_cfg>
		if (!cfg) {
   1822a:	4604      	mov	r4, r0
   1822c:	b390      	cbz	r0, 18294 <bt_gatt_attr_write_ccc+0xb0>
	memcpy(dst, src, sizeof(*dst));
   1822e:	2207      	movs	r2, #7
   18230:	f106 0188 	add.w	r1, r6, #136	; 0x88
   18234:	3001      	adds	r0, #1
   18236:	f7fe fc3b 	bl	16ab0 <memcpy>
		cfg->id = conn->id;
   1823a:	7a33      	ldrb	r3, [r6, #8]
   1823c:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   1823e:	f8d9 3010 	ldr.w	r3, [r9, #16]
   18242:	b9ab      	cbnz	r3, 18270 <bt_gatt_attr_write_ccc+0x8c>
	if (cfg->value != ccc->value) {
   18244:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	cfg->value = value;
   18248:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   1824a:	42ab      	cmp	r3, r5
   1824c:	d003      	beq.n	18256 <bt_gatt_attr_write_ccc+0x72>
		gatt_ccc_changed(attr, ccc);
   1824e:	4649      	mov	r1, r9
   18250:	4640      	mov	r0, r8
   18252:	f7ff ff1a 	bl	1808a <gatt_ccc_changed>
	if (!value) {
   18256:	2d00      	cmp	r5, #0
   18258:	d1e0      	bne.n	1821c <bt_gatt_attr_write_ccc+0x38>
   1825a:	2207      	movs	r2, #7
   1825c:	4669      	mov	r1, sp
   1825e:	1c60      	adds	r0, r4, #1
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   18260:	9500      	str	r5, [sp, #0]
   18262:	f8cd 5003 	str.w	r5, [sp, #3]
   18266:	f7fe fc23 	bl	16ab0 <memcpy>
	cfg->id = 0U;
   1826a:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1826c:	8125      	strh	r5, [r4, #8]
}
   1826e:	e7d5      	b.n	1821c <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   18270:	462a      	mov	r2, r5
   18272:	4641      	mov	r1, r8
   18274:	4630      	mov	r0, r6
   18276:	4798      	blx	r3
		if (write < 0) {
   18278:	2800      	cmp	r0, #0
   1827a:	dbd0      	blt.n	1821e <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
   1827c:	3801      	subs	r0, #1
   1827e:	2801      	cmp	r0, #1
   18280:	d9e0      	bls.n	18244 <bt_gatt_attr_write_ccc+0x60>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   18282:	f06f 000d 	mvn.w	r0, #13
   18286:	e7ca      	b.n	1821e <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   18288:	f06f 0006 	mvn.w	r0, #6
   1828c:	e7c7      	b.n	1821e <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1828e:	f06f 000c 	mvn.w	r0, #12
   18292:	e7c4      	b.n	1821e <bt_gatt_attr_write_ccc+0x3a>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   18294:	f06f 0010 	mvn.w	r0, #16
   18298:	e7c1      	b.n	1821e <bt_gatt_attr_write_ccc+0x3a>

0001829a <clear_cf_cfg>:
{
   1829a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1829c:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1829e:	2500      	movs	r5, #0
   182a0:	2207      	movs	r2, #7
   182a2:	4669      	mov	r1, sp
   182a4:	3001      	adds	r0, #1
   182a6:	9500      	str	r5, [sp, #0]
   182a8:	f8cd 5003 	str.w	r5, [sp, #3]
   182ac:	f7fe fc00 	bl	16ab0 <memcpy>
	memset(cfg->data, 0, sizeof(cfg->data));
   182b0:	f104 0008 	add.w	r0, r4, #8
   182b4:	2201      	movs	r2, #1
   182b6:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   182b8:	340c      	adds	r4, #12
   182ba:	f7fe fc24 	bl	16b06 <memset>
   182be:	f3bf 8f5b 	dmb	ish
   182c2:	e854 3f00 	ldrex	r3, [r4]
   182c6:	e844 5200 	strex	r2, r5, [r4]
   182ca:	2a00      	cmp	r2, #0
   182cc:	d1f9      	bne.n	182c2 <clear_cf_cfg+0x28>
   182ce:	f3bf 8f5b 	dmb	ish
}
   182d2:	b003      	add	sp, #12
   182d4:	bd30      	pop	{r4, r5, pc}

000182d6 <gatt_notify>:
{
   182d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   182da:	4614      	mov	r4, r2
				sizeof(*nfy) + params->len);
   182dc:	8992      	ldrh	r2, [r2, #12]
{
   182de:	4688      	mov	r8, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   182e0:	3202      	adds	r2, #2
   182e2:	211b      	movs	r1, #27
{
   182e4:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   182e6:	f7ff fdf7 	bl	17ed8 <bt_att_create_pdu>
	if (!buf) {
   182ea:	4605      	mov	r5, r0
   182ec:	b1c8      	cbz	r0, 18322 <gatt_notify+0x4c>
   182ee:	f100 0908 	add.w	r9, r0, #8
   182f2:	2102      	movs	r1, #2
   182f4:	4648      	mov	r0, r9
   182f6:	f000 fa80 	bl	187fa <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   182fa:	4606      	mov	r6, r0
   182fc:	89a1      	ldrh	r1, [r4, #12]
   182fe:	f826 8b02 	strh.w	r8, [r6], #2
   18302:	4648      	mov	r0, r9
   18304:	f000 fa79 	bl	187fa <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   18308:	89a2      	ldrh	r2, [r4, #12]
   1830a:	68a1      	ldr	r1, [r4, #8]
   1830c:	4630      	mov	r0, r6
   1830e:	f7fe fbcf 	bl	16ab0 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   18312:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   18316:	4629      	mov	r1, r5
   18318:	4638      	mov	r0, r7
}
   1831a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   1831e:	f7ff be54 	b.w	17fca <bt_att_send>
}
   18322:	f06f 000b 	mvn.w	r0, #11
   18326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001832a <cf_write>:
{
   1832a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1832e:	4698      	mov	r8, r3
   18330:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   18334:	2b01      	cmp	r3, #1
{
   18336:	4606      	mov	r6, r0
   18338:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   1833a:	d831      	bhi.n	183a0 <cf_write+0x76>
	if (offset + len > sizeof(cfg->data)) {
   1833c:	4443      	add	r3, r8
   1833e:	2b01      	cmp	r3, #1
   18340:	4645      	mov	r5, r8
   18342:	dc30      	bgt.n	183a6 <cf_write+0x7c>
	cfg = find_cf_cfg(conn);
   18344:	f7ef fd34 	bl	7db0 <find_cf_cfg>
	if (!cfg) {
   18348:	4604      	mov	r4, r0
   1834a:	b918      	cbnz	r0, 18354 <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   1834c:	f7ef fd30 	bl	7db0 <find_cf_cfg>
	if (!cfg) {
   18350:	4604      	mov	r4, r0
   18352:	b358      	cbz	r0, 183ac <cf_write+0x82>
{
   18354:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   18356:	f1b8 0f00 	cmp.w	r8, #0
   1835a:	d10f      	bne.n	1837c <cf_write+0x52>
   1835c:	f106 0188 	add.w	r1, r6, #136	; 0x88
   18360:	2207      	movs	r2, #7
   18362:	1c60      	adds	r0, r4, #1
   18364:	f7fe fba4 	bl	16ab0 <memcpy>
	cfg->id = conn->id;
   18368:	4620      	mov	r0, r4
   1836a:	7a33      	ldrb	r3, [r6, #8]
   1836c:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   18370:	2100      	movs	r1, #0
   18372:	f7ff ff01 	bl	18178 <atomic_set_bit>
}
   18376:	4628      	mov	r0, r5
   18378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1837c:	7a20      	ldrb	r0, [r4, #8]
   1837e:	fa20 f301 	lsr.w	r3, r0, r1
   18382:	07da      	lsls	r2, r3, #31
   18384:	d503      	bpl.n	1838e <cf_write+0x64>
		    !(value[i / 8] & BIT(i % 8))) {
   18386:	783b      	ldrb	r3, [r7, #0]
   18388:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1838a:	07db      	lsls	r3, r3, #31
   1838c:	d511      	bpl.n	183b2 <cf_write+0x88>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1838e:	3101      	adds	r1, #1
   18390:	2903      	cmp	r1, #3
   18392:	d1e0      	bne.n	18356 <cf_write+0x2c>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   18394:	783b      	ldrb	r3, [r7, #0]
   18396:	f003 0307 	and.w	r3, r3, #7
   1839a:	4318      	orrs	r0, r3
   1839c:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   1839e:	e7dd      	b.n	1835c <cf_write+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   183a0:	f06f 0506 	mvn.w	r5, #6
   183a4:	e7e7      	b.n	18376 <cf_write+0x4c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   183a6:	f06f 050c 	mvn.w	r5, #12
   183aa:	e7e4      	b.n	18376 <cf_write+0x4c>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   183ac:	f06f 0510 	mvn.w	r5, #16
   183b0:	e7e1      	b.n	18376 <cf_write+0x4c>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   183b2:	f06f 0512 	mvn.w	r5, #18
   183b6:	e7de      	b.n	18376 <cf_write+0x4c>

000183b8 <read_appearance>:
{
   183b8:	b513      	push	{r0, r1, r4, lr}
   183ba:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   183be:	4610      	mov	r0, r2
	if (offset > value_len) {
   183c0:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   183c2:	f04f 0200 	mov.w	r2, #0
   183c6:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   183ca:	d80d      	bhi.n	183e8 <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   183cc:	f1c1 0402 	rsb	r4, r1, #2
   183d0:	429c      	cmp	r4, r3
   183d2:	bfa8      	it	ge
   183d4:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   183d6:	f10d 0306 	add.w	r3, sp, #6
   183da:	4622      	mov	r2, r4
   183dc:	4419      	add	r1, r3
   183de:	f7fe fb67 	bl	16ab0 <memcpy>
}
   183e2:	4620      	mov	r0, r4
   183e4:	b002      	add	sp, #8
   183e6:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   183e8:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   183ec:	e7f9      	b.n	183e2 <read_appearance+0x2a>

000183ee <read_name>:
{
   183ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   183f2:	4698      	mov	r8, r3
   183f4:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   183f8:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   183fa:	f7ed fce3 	bl	5dc4 <bt_get_name>
   183fe:	4607      	mov	r7, r0
				 strlen(name));
   18400:	f7fe fb2a 	bl	16a58 <strlen>
	if (offset > value_len) {
   18404:	b283      	uxth	r3, r0
   18406:	42b3      	cmp	r3, r6
   18408:	d30c      	bcc.n	18424 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   1840a:	1b9c      	subs	r4, r3, r6
   1840c:	4544      	cmp	r4, r8
   1840e:	bfa8      	it	ge
   18410:	4644      	movge	r4, r8
   18412:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   18414:	4622      	mov	r2, r4
   18416:	19b9      	adds	r1, r7, r6
   18418:	4628      	mov	r0, r5
   1841a:	f7fe fb49 	bl	16ab0 <memcpy>
}
   1841e:	4620      	mov	r0, r4
   18420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   18424:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   18428:	e7f9      	b.n	1841e <read_name+0x30>

0001842a <cf_read>:
{
   1842a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1842c:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   1842e:	2300      	movs	r3, #0
{
   18430:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   18434:	f88d 3004 	strb.w	r3, [sp, #4]
{
   18438:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   1843a:	f7ef fcb9 	bl	7db0 <find_cf_cfg>
	if (cfg) {
   1843e:	b128      	cbz	r0, 1844c <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   18440:	f100 0108 	add.w	r1, r0, #8
   18444:	2201      	movs	r2, #1
   18446:	a801      	add	r0, sp, #4
   18448:	f7fe fb32 	bl	16ab0 <memcpy>
	if (offset > value_len) {
   1844c:	2e01      	cmp	r6, #1
   1844e:	d80d      	bhi.n	1846c <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   18450:	f1c6 0401 	rsb	r4, r6, #1
   18454:	42bc      	cmp	r4, r7
   18456:	bfa8      	it	ge
   18458:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1845a:	ab01      	add	r3, sp, #4
   1845c:	4622      	mov	r2, r4
   1845e:	1999      	adds	r1, r3, r6
   18460:	4628      	mov	r0, r5
   18462:	f7fe fb25 	bl	16ab0 <memcpy>
}
   18466:	4620      	mov	r0, r4
   18468:	b003      	add	sp, #12
   1846a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1846c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   18470:	e7f9      	b.n	18466 <cf_read+0x3c>

00018472 <bt_gatt_attr_read_ccc>:
{
   18472:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   18474:	68c9      	ldr	r1, [r1, #12]
{
   18476:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   1847a:	4615      	mov	r5, r2
   1847c:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   1847e:	f7ff fe89 	bl	18194 <find_ccc_cfg>
	if (cfg) {
   18482:	b100      	cbz	r0, 18486 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   18484:	8900      	ldrh	r0, [r0, #8]
   18486:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   1848a:	2e02      	cmp	r6, #2
   1848c:	d80e      	bhi.n	184ac <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   1848e:	f1c6 0402 	rsb	r4, r6, #2
   18492:	42bc      	cmp	r4, r7
   18494:	bfa8      	it	ge
   18496:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   18498:	f10d 0306 	add.w	r3, sp, #6
   1849c:	4622      	mov	r2, r4
   1849e:	1999      	adds	r1, r3, r6
   184a0:	4628      	mov	r0, r5
   184a2:	f7fe fb05 	bl	16ab0 <memcpy>
}
   184a6:	4620      	mov	r0, r4
   184a8:	b003      	add	sp, #12
   184aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   184ac:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   184b0:	e7f9      	b.n	184a6 <bt_gatt_attr_read_ccc+0x34>

000184b2 <bt_gatt_attr_read_service>:
{
   184b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   184b4:	68c9      	ldr	r1, [r1, #12]
{
   184b6:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   184ba:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   184bc:	780b      	ldrb	r3, [r1, #0]
{
   184be:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   184c0:	b993      	cbnz	r3, 184e8 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   184c2:	884b      	ldrh	r3, [r1, #2]
   184c4:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   184c8:	2d02      	cmp	r5, #2
   184ca:	d819      	bhi.n	18500 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   184cc:	f1c5 0202 	rsb	r2, r5, #2
   184d0:	4294      	cmp	r4, r2
   184d2:	bfa8      	it	ge
   184d4:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   184d6:	f10d 0306 	add.w	r3, sp, #6
   184da:	4622      	mov	r2, r4
   184dc:	1959      	adds	r1, r3, r5
   184de:	f7fe fae7 	bl	16ab0 <memcpy>
}
   184e2:	4620      	mov	r0, r4
   184e4:	b003      	add	sp, #12
   184e6:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   184e8:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   184ea:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   184ee:	d807      	bhi.n	18500 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   184f0:	f1c5 0210 	rsb	r2, r5, #16
   184f4:	4294      	cmp	r4, r2
   184f6:	bfa8      	it	ge
   184f8:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   184fa:	4622      	mov	r2, r4
   184fc:	4429      	add	r1, r5
   184fe:	e7ee      	b.n	184de <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   18500:	f06f 0406 	mvn.w	r4, #6
   18504:	e7ed      	b.n	184e2 <bt_gatt_attr_read_service+0x30>

00018506 <sc_save>:
{
   18506:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1850a:	4680      	mov	r8, r0
   1850c:	460f      	mov	r7, r1
   1850e:	4616      	mov	r6, r2
   18510:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   18512:	f7ef fc3d 	bl	7d90 <find_sc_cfg>
	if (!cfg) {
   18516:	4604      	mov	r4, r0
   18518:	b968      	cbnz	r0, 18536 <sc_save+0x30>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1851a:	4669      	mov	r1, sp
   1851c:	9000      	str	r0, [sp, #0]
   1851e:	f8cd 0003 	str.w	r0, [sp, #3]
   18522:	f7ef fc35 	bl	7d90 <find_sc_cfg>
		if (!cfg) {
   18526:	4604      	mov	r4, r0
   18528:	b180      	cbz	r0, 1854c <sc_save+0x46>
		cfg->id = id;
   1852a:	f800 8b01 	strb.w	r8, [r0], #1
   1852e:	2207      	movs	r2, #7
   18530:	4639      	mov	r1, r7
   18532:	f7fe fabd 	bl	16ab0 <memcpy>
	if (!(cfg->data.start || cfg->data.end)) {
   18536:	8922      	ldrh	r2, [r4, #8]
   18538:	8963      	ldrh	r3, [r4, #10]
   1853a:	b91a      	cbnz	r2, 18544 <sc_save+0x3e>
   1853c:	b923      	cbnz	r3, 18548 <sc_save+0x42>
		cfg->data.start = start;
   1853e:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   18540:	8165      	strh	r5, [r4, #10]
   18542:	e003      	b.n	1854c <sc_save+0x46>
	if (new_start >= *start && new_end <= *end) {
   18544:	4296      	cmp	r6, r2
   18546:	d304      	bcc.n	18552 <sc_save+0x4c>
   18548:	429d      	cmp	r5, r3
   1854a:	d8f9      	bhi.n	18540 <sc_save+0x3a>
}
   1854c:	b002      	add	sp, #8
   1854e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*start = new_start;
   18552:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   18554:	e7f8      	b.n	18548 <sc_save+0x42>

00018556 <sc_clear>:
{
   18556:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   18558:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   1855c:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1855e:	4631      	mov	r1, r6
   18560:	7a00      	ldrb	r0, [r0, #8]
   18562:	f7fe fe06 	bl	17172 <bt_addr_le_is_bonded>
   18566:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   18568:	4631      	mov	r1, r6
   1856a:	f7ef fc11 	bl	7d90 <find_sc_cfg>
	if (!cfg) {
   1856e:	b128      	cbz	r0, 1857c <sc_clear+0x26>
}
   18570:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   18574:	220c      	movs	r2, #12
   18576:	2100      	movs	r1, #0
   18578:	f7fe bac5 	b.w	16b06 <memset>
}
   1857c:	bd70      	pop	{r4, r5, r6, pc}

0001857e <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   1857e:	2a02      	cmp	r2, #2
{
   18580:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   18582:	d108      	bne.n	18596 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   18584:	2300      	movs	r3, #0
   18586:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1858a:	461a      	mov	r2, r3
   1858c:	7a00      	ldrb	r0, [r0, #8]
   1858e:	f7ff ffba 	bl	18506 <sc_save>
}
   18592:	2002      	movs	r0, #2
   18594:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   18596:	f7ff ffde 	bl	18556 <sc_clear>
   1859a:	e7fa      	b.n	18592 <sc_ccc_cfg_write+0x14>

0001859c <bt_gatt_attr_value_handle>:
{
   1859c:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1859e:	4604      	mov	r4, r0
   185a0:	b910      	cbnz	r0, 185a8 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   185a2:	2000      	movs	r0, #0
}
   185a4:	b002      	add	sp, #8
   185a6:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   185a8:	2300      	movs	r3, #0
   185aa:	f88d 3004 	strb.w	r3, [sp, #4]
   185ae:	6800      	ldr	r0, [r0, #0]
   185b0:	f642 0303 	movw	r3, #10243	; 0x2803
   185b4:	a901      	add	r1, sp, #4
   185b6:	f8ad 3006 	strh.w	r3, [sp, #6]
   185ba:	f7fe fb31 	bl	16c20 <bt_uuid_cmp>
   185be:	2800      	cmp	r0, #0
   185c0:	d1ef      	bne.n	185a2 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   185c2:	68e3      	ldr	r3, [r4, #12]
   185c4:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   185c6:	2800      	cmp	r0, #0
   185c8:	d1ec      	bne.n	185a4 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   185ca:	4620      	mov	r0, r4
   185cc:	f7ef fd46 	bl	805c <bt_gatt_attr_get_handle>
   185d0:	3001      	adds	r0, #1
   185d2:	b280      	uxth	r0, r0
	return handle;
   185d4:	e7e6      	b.n	185a4 <bt_gatt_attr_value_handle+0x8>

000185d6 <bt_gatt_attr_read_chrc>:
{
   185d6:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   185d8:	68cf      	ldr	r7, [r1, #12]
{
   185da:	b087      	sub	sp, #28
   185dc:	4608      	mov	r0, r1
   185de:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   185e0:	79bb      	ldrb	r3, [r7, #6]
   185e2:	f88d 3004 	strb.w	r3, [sp, #4]
{
   185e6:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   185ea:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   185ec:	f7ff ffd6 	bl	1859c <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   185f0:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   185f2:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   185f6:	780b      	ldrb	r3, [r1, #0]
   185f8:	b99b      	cbnz	r3, 18622 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   185fa:	884b      	ldrh	r3, [r1, #2]
   185fc:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   18600:	2105      	movs	r1, #5
	if (offset > value_len) {
   18602:	42b1      	cmp	r1, r6
   18604:	d315      	bcc.n	18632 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   18606:	1b89      	subs	r1, r1, r6
   18608:	42a1      	cmp	r1, r4
   1860a:	bfa8      	it	ge
   1860c:	4621      	movge	r1, r4
   1860e:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   18610:	ab01      	add	r3, sp, #4
   18612:	4622      	mov	r2, r4
   18614:	1999      	adds	r1, r3, r6
   18616:	4628      	mov	r0, r5
   18618:	f7fe fa4a 	bl	16ab0 <memcpy>
}
   1861c:	4620      	mov	r0, r4
   1861e:	b007      	add	sp, #28
   18620:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   18622:	3101      	adds	r1, #1
   18624:	2210      	movs	r2, #16
   18626:	f10d 0007 	add.w	r0, sp, #7
   1862a:	f7fe fa41 	bl	16ab0 <memcpy>
		value_len += 16U;
   1862e:	2113      	movs	r1, #19
   18630:	e7e7      	b.n	18602 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   18632:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   18636:	e7f1      	b.n	1861c <bt_gatt_attr_read_chrc+0x46>

00018638 <bt_gatt_foreach_attr>:
{
   18638:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1863a:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1863e:	2300      	movs	r3, #0
   18640:	9300      	str	r3, [sp, #0]
   18642:	461a      	mov	r2, r3
   18644:	f7ef fd3a 	bl	80bc <bt_gatt_foreach_attr_type>
}
   18648:	b005      	add	sp, #20
   1864a:	f85d fb04 	ldr.w	pc, [sp], #4

0001864e <db_hash_process>:
	db_hash_gen(true);
   1864e:	f7ef bd8f 	b.w	8170 <db_hash_gen.isra.0>

00018652 <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   18652:	07d3      	lsls	r3, r2, #31
{
   18654:	b510      	push	{r4, lr}
   18656:	7c8c      	ldrb	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   18658:	d504      	bpl.n	18664 <bt_gatt_check_perm+0x12>
   1865a:	f014 0f15 	tst.w	r4, #21
   1865e:	d017      	beq.n	18690 <bt_gatt_check_perm+0x3e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   18660:	684b      	ldr	r3, [r1, #4]
   18662:	b1ab      	cbz	r3, 18690 <bt_gatt_check_perm+0x3e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   18664:	0793      	lsls	r3, r2, #30
   18666:	d504      	bpl.n	18672 <bt_gatt_check_perm+0x20>
   18668:	f014 0f2a 	tst.w	r4, #42	; 0x2a
   1866c:	d012      	beq.n	18694 <bt_gatt_check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   1866e:	688b      	ldr	r3, [r1, #8]
   18670:	b183      	cbz	r3, 18694 <bt_gatt_check_perm+0x42>
	mask &= attr->perm;
   18672:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   18674:	f014 0f30 	tst.w	r4, #48	; 0x30
   18678:	d104      	bne.n	18684 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   1867a:	f014 000c 	ands.w	r0, r4, #12
   1867e:	bf18      	it	ne
   18680:	200f      	movne	r0, #15
}
   18682:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   18684:	f7fe fe43 	bl	1730e <bt_conn_get_security>
   18688:	2802      	cmp	r0, #2
   1868a:	d8f6      	bhi.n	1867a <bt_gatt_check_perm+0x28>
			return BT_ATT_ERR_AUTHENTICATION;
   1868c:	2005      	movs	r0, #5
   1868e:	e7f8      	b.n	18682 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   18690:	2002      	movs	r0, #2
   18692:	e7f6      	b.n	18682 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   18694:	2003      	movs	r0, #3
   18696:	e7f4      	b.n	18682 <bt_gatt_check_perm+0x30>

00018698 <bt_gatt_change_aware>:
{
   18698:	b510      	push	{r4, lr}
   1869a:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   1869c:	f7ef fb88 	bl	7db0 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   186a0:	4603      	mov	r3, r0
   186a2:	b910      	cbnz	r0, 186aa <bt_gatt_change_aware+0x12>
		return true;
   186a4:	2401      	movs	r4, #1
}
   186a6:	4620      	mov	r0, r4
   186a8:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   186aa:	7a02      	ldrb	r2, [r0, #8]
   186ac:	07d2      	lsls	r2, r2, #31
   186ae:	d5f9      	bpl.n	186a4 <bt_gatt_change_aware+0xc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   186b0:	f3bf 8f5b 	dmb	ish
   186b4:	68d9      	ldr	r1, [r3, #12]
   186b6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   186ba:	f011 0101 	ands.w	r1, r1, #1
   186be:	f100 000c 	add.w	r0, r0, #12
   186c2:	d1ef      	bne.n	186a4 <bt_gatt_change_aware+0xc>
	if (!req) {
   186c4:	2c00      	cmp	r4, #0
   186c6:	d0ee      	beq.n	186a6 <bt_gatt_change_aware+0xe>
   186c8:	f3bf 8f5b 	dmb	ish
   186cc:	68db      	ldr	r3, [r3, #12]
   186ce:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   186d2:	f3c3 0440 	ubfx	r4, r3, #1, #1
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   186d6:	079b      	lsls	r3, r3, #30
   186d8:	d50e      	bpl.n	186f8 <bt_gatt_change_aware+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   186da:	f3bf 8f5b 	dmb	ish
   186de:	e850 3f00 	ldrex	r3, [r0]
   186e2:	f023 0302 	bic.w	r3, r3, #2
   186e6:	e840 3200 	strex	r2, r3, [r0]
   186ea:	2a00      	cmp	r2, #0
   186ec:	d1f7      	bne.n	186de <bt_gatt_change_aware+0x46>
   186ee:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   186f2:	f7ff fd41 	bl	18178 <atomic_set_bit>
	return false;
   186f6:	e7d6      	b.n	186a6 <bt_gatt_change_aware+0xe>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   186f8:	2101      	movs	r1, #1
   186fa:	e7fa      	b.n	186f2 <bt_gatt_change_aware+0x5a>

000186fc <bt_smp_recv>:
{
   186fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   186fe:	2100      	movs	r1, #0
	struct bt_conn *conn = chan->conn;
   18700:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   18702:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18706:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1870a:	4608      	mov	r0, r1
   1870c:	f7fe ff8c 	bl	17628 <bt_l2cap_create_pdu_timeout>
   18710:	f100 0608 	add.w	r6, r0, #8
   18714:	4604      	mov	r4, r0
   18716:	2101      	movs	r1, #1
   18718:	4630      	mov	r0, r6
   1871a:	f000 f86e 	bl	187fa <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   1871e:	2505      	movs	r5, #5
   18720:	7005      	strb	r5, [r0, #0]
   18722:	2101      	movs	r1, #1
   18724:	4630      	mov	r0, r6
   18726:	f000 f868 	bl	187fa <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   1872a:	7005      	strb	r5, [r0, #0]
   1872c:	2500      	movs	r5, #0
   1872e:	9500      	str	r5, [sp, #0]
   18730:	462b      	mov	r3, r5
   18732:	4622      	mov	r2, r4
   18734:	2106      	movs	r1, #6
   18736:	4638      	mov	r0, r7
   18738:	f7fe ff79 	bl	1762e <bt_l2cap_send_cb>
}
   1873c:	4628      	mov	r0, r5
   1873e:	b003      	add	sp, #12
   18740:	bdf0      	pop	{r4, r5, r6, r7, pc}

00018742 <bt_smp_sign>:
   18742:	f06f 0022 	mvn.w	r0, #34	; 0x22
   18746:	4770      	bx	lr

00018748 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   18748:	2000      	movs	r0, #0
   1874a:	4770      	bx	lr

0001874c <fixed_data_unref>:
}
   1874c:	4770      	bx	lr

0001874e <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1874e:	6a01      	ldr	r1, [r0, #32]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   18750:	6849      	ldr	r1, [r1, #4]
   18752:	6809      	ldr	r1, [r1, #0]
   18754:	f7fb b966 	b.w	13a24 <net_buf_alloc_len>

00018758 <net_buf_get>:
{
   18758:	b570      	push	{r4, r5, r6, lr}
   1875a:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   1875c:	f7fc fa70 	bl	14c40 <z_impl_k_queue_get>
	if (!buf) {
   18760:	4605      	mov	r5, r0
   18762:	b128      	cbz	r0, 18770 <net_buf_get+0x18>
   18764:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   18766:	7963      	ldrb	r3, [r4, #5]
   18768:	f013 0301 	ands.w	r3, r3, #1
   1876c:	d102      	bne.n	18774 <net_buf_get+0x1c>
	frag->frags = NULL;
   1876e:	6023      	str	r3, [r4, #0]
}
   18770:	4628      	mov	r0, r5
   18772:	bd70      	pop	{r4, r5, r6, pc}
   18774:	2300      	movs	r3, #0
   18776:	2200      	movs	r2, #0
   18778:	4630      	mov	r0, r6
   1877a:	f7fc fa61 	bl	14c40 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   1877e:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   18780:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   18782:	f023 0301 	bic.w	r3, r3, #1
   18786:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   18788:	4604      	mov	r4, r0
   1878a:	e7ec      	b.n	18766 <net_buf_get+0xe>

0001878c <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   1878c:	6883      	ldr	r3, [r0, #8]
   1878e:	440b      	add	r3, r1
   18790:	6003      	str	r3, [r0, #0]
}
   18792:	4770      	bx	lr

00018794 <net_buf_put>:
{
   18794:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   18796:	460a      	mov	r2, r1
   18798:	6814      	ldr	r4, [r2, #0]
   1879a:	b914      	cbnz	r4, 187a2 <net_buf_put+0xe>
}
   1879c:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   1879e:	f000 ba49 	b.w	18c34 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   187a2:	7953      	ldrb	r3, [r2, #5]
   187a4:	f043 0301 	orr.w	r3, r3, #1
   187a8:	7153      	strb	r3, [r2, #5]
   187aa:	4622      	mov	r2, r4
   187ac:	e7f4      	b.n	18798 <net_buf_put+0x4>

000187ae <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   187ae:	7902      	ldrb	r2, [r0, #4]
   187b0:	3201      	adds	r2, #1
   187b2:	7102      	strb	r2, [r0, #4]
	return buf;
}
   187b4:	4770      	bx	lr

000187b6 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   187b6:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   187b8:	4618      	mov	r0, r3
   187ba:	681b      	ldr	r3, [r3, #0]
   187bc:	2b00      	cmp	r3, #0
   187be:	d1fb      	bne.n	187b8 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   187c0:	4770      	bx	lr

000187c2 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   187c2:	6802      	ldr	r2, [r0, #0]
{
   187c4:	b510      	push	{r4, lr}
	if (parent->frags) {
   187c6:	b12a      	cbz	r2, 187d4 <net_buf_frag_insert+0x12>
   187c8:	460b      	mov	r3, r1
	while (buf->frags) {
   187ca:	461c      	mov	r4, r3
   187cc:	681b      	ldr	r3, [r3, #0]
   187ce:	2b00      	cmp	r3, #0
   187d0:	d1fb      	bne.n	187ca <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   187d2:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   187d4:	6001      	str	r1, [r0, #0]
}
   187d6:	bd10      	pop	{r4, pc}

000187d8 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   187d8:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   187da:	4604      	mov	r4, r0
   187dc:	b920      	cbnz	r0, 187e8 <net_buf_frag_add+0x10>
	buf->ref++;
   187de:	790b      	ldrb	r3, [r1, #4]
   187e0:	3301      	adds	r3, #1
   187e2:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   187e4:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   187e6:	bd10      	pop	{r4, pc}
   187e8:	4603      	mov	r3, r0
	while (buf->frags) {
   187ea:	4618      	mov	r0, r3
   187ec:	681b      	ldr	r3, [r3, #0]
   187ee:	2b00      	cmp	r3, #0
   187f0:	d1fb      	bne.n	187ea <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   187f2:	f7ff ffe6 	bl	187c2 <net_buf_frag_insert>
   187f6:	4620      	mov	r0, r4
   187f8:	e7f5      	b.n	187e6 <net_buf_frag_add+0xe>

000187fa <net_buf_simple_add>:
	return buf->data + buf->len;
   187fa:	8883      	ldrh	r3, [r0, #4]
   187fc:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   187fe:	4419      	add	r1, r3
   18800:	8081      	strh	r1, [r0, #4]
	return tail;
}
   18802:	18d0      	adds	r0, r2, r3
   18804:	4770      	bx	lr

00018806 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   18806:	b430      	push	{r4, r5}
   18808:	8884      	ldrh	r4, [r0, #4]
   1880a:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   1880c:	18a3      	adds	r3, r4, r2
   1880e:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   18810:	1928      	adds	r0, r5, r4
}
   18812:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   18814:	f7fe b94c 	b.w	16ab0 <memcpy>

00018818 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   18818:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   1881a:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   1881c:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   1881e:	1a40      	subs	r0, r0, r1
	buf->len += len;
   18820:	4411      	add	r1, r2
	buf->data -= len;
   18822:	6018      	str	r0, [r3, #0]
	buf->len += len;
   18824:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   18826:	4770      	bx	lr

00018828 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   18828:	8882      	ldrh	r2, [r0, #4]
   1882a:	1a52      	subs	r2, r2, r1
{
   1882c:	4603      	mov	r3, r0
	buf->len -= len;
   1882e:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   18830:	6800      	ldr	r0, [r0, #0]
   18832:	4408      	add	r0, r1
   18834:	6018      	str	r0, [r3, #0]
}
   18836:	4770      	bx	lr

00018838 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   18838:	4603      	mov	r3, r0
	void *data = buf->data;
   1883a:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1883c:	889a      	ldrh	r2, [r3, #4]
   1883e:	1a52      	subs	r2, r2, r1
	buf->data += len;
   18840:	4401      	add	r1, r0
	buf->len -= len;
   18842:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   18844:	6019      	str	r1, [r3, #0]

	return data;
}
   18846:	4770      	bx	lr

00018848 <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   18848:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   1884a:	6803      	ldr	r3, [r0, #0]
   1884c:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   1884e:	2101      	movs	r1, #1
   18850:	f7ff ffea 	bl	18828 <net_buf_simple_pull>

	return val;
}
   18854:	4620      	mov	r0, r4
   18856:	bd10      	pop	{r4, pc}

00018858 <net_buf_simple_pull_le16>:

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   18858:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   1885a:	6803      	ldr	r3, [r0, #0]
   1885c:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1885e:	2102      	movs	r1, #2
   18860:	f7ff ffe2 	bl	18828 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   18864:	4620      	mov	r0, r4
   18866:	bd10      	pop	{r4, pc}

00018868 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   18868:	6802      	ldr	r2, [r0, #0]
   1886a:	6880      	ldr	r0, [r0, #8]
}
   1886c:	1a10      	subs	r0, r2, r0
   1886e:	4770      	bx	lr

00018870 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   18870:	8883      	ldrh	r3, [r0, #4]
   18872:	88c2      	ldrh	r2, [r0, #6]
   18874:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   18876:	6803      	ldr	r3, [r0, #0]
   18878:	6880      	ldr	r0, [r0, #8]
   1887a:	1a18      	subs	r0, r3, r0
}
   1887c:	1a10      	subs	r0, r2, r0
   1887e:	4770      	bx	lr

00018880 <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
   18880:	b570      	push	{r4, r5, r6, lr}
   18882:	460e      	mov	r6, r1
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   18884:	6801      	ldr	r1, [r0, #0]
{
   18886:	4615      	mov	r5, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   18888:	b189      	cbz	r1, 188ae <gpio_fire_callbacks+0x2e>
	return node->next;
   1888a:	680c      	ldr	r4, [r1, #0]
   1888c:	2c00      	cmp	r4, #0
   1888e:	bf38      	it	cc
   18890:	2400      	movcc	r4, #0
		if (cb->pin_mask & pins) {
   18892:	688a      	ldr	r2, [r1, #8]
   18894:	402a      	ands	r2, r5
   18896:	d002      	beq.n	1889e <gpio_fire_callbacks+0x1e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   18898:	684b      	ldr	r3, [r1, #4]
   1889a:	4630      	mov	r0, r6
   1889c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1889e:	b134      	cbz	r4, 188ae <gpio_fire_callbacks+0x2e>
   188a0:	6823      	ldr	r3, [r4, #0]
   188a2:	2b00      	cmp	r3, #0
   188a4:	bf38      	it	cc
   188a6:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   188a8:	4621      	mov	r1, r4
   188aa:	461c      	mov	r4, r3
   188ac:	e7f1      	b.n	18892 <gpio_fire_callbacks+0x12>
		}
	}
}
   188ae:	bd70      	pop	{r4, r5, r6, pc}

000188b0 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   188b0:	6843      	ldr	r3, [r0, #4]
   188b2:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   188b4:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   188b8:	600b      	str	r3, [r1, #0]
}
   188ba:	2000      	movs	r0, #0
   188bc:	4770      	bx	lr

000188be <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   188be:	6843      	ldr	r3, [r0, #4]
   188c0:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   188c2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   188c6:	4042      	eors	r2, r0
   188c8:	400a      	ands	r2, r1
   188ca:	4042      	eors	r2, r0
    p_reg->OUT = value;
   188cc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   188d0:	2000      	movs	r0, #0
   188d2:	4770      	bx	lr

000188d4 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   188d4:	6843      	ldr	r3, [r0, #4]
   188d6:	685b      	ldr	r3, [r3, #4]
}
   188d8:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   188da:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   188de:	4770      	bx	lr

000188e0 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   188e0:	6843      	ldr	r3, [r0, #4]
   188e2:	685b      	ldr	r3, [r3, #4]
}
   188e4:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   188e6:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   188ea:	4770      	bx	lr

000188ec <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   188ec:	6843      	ldr	r3, [r0, #4]
   188ee:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   188f0:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   188f4:	404b      	eors	r3, r1
    p_reg->OUT = value;
   188f6:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   188fa:	2000      	movs	r0, #0
   188fc:	4770      	bx	lr

000188fe <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   188fe:	6903      	ldr	r3, [r0, #16]
Z_GENLIST_IS_EMPTY(slist)
   18900:	6858      	ldr	r0, [r3, #4]
{
   18902:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   18904:	b158      	cbz	r0, 1891e <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   18906:	2400      	movs	r4, #0
   18908:	4281      	cmp	r1, r0
   1890a:	d113      	bne.n	18934 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   1890c:	6808      	ldr	r0, [r1, #0]
   1890e:	b95c      	cbnz	r4, 18928 <gpio_nrfx_manage_callback+0x2a>
   18910:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   18912:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   18914:	42a1      	cmp	r1, r4
   18916:	d100      	bne.n	1891a <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   18918:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1891a:	2000      	movs	r0, #0
   1891c:	6008      	str	r0, [r1, #0]
	if (set) {
   1891e:	b972      	cbnz	r2, 1893e <gpio_nrfx_manage_callback+0x40>
	return 0;
   18920:	2000      	movs	r0, #0
}
   18922:	bd30      	pop	{r4, r5, pc}
   18924:	4628      	mov	r0, r5
   18926:	e7ef      	b.n	18908 <gpio_nrfx_manage_callback+0xa>
   18928:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1892a:	6898      	ldr	r0, [r3, #8]
   1892c:	4281      	cmp	r1, r0
	list->tail = node;
   1892e:	bf08      	it	eq
   18930:	609c      	streq	r4, [r3, #8]
}
   18932:	e7f2      	b.n	1891a <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   18934:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   18936:	4604      	mov	r4, r0
   18938:	2d00      	cmp	r5, #0
   1893a:	d1f3      	bne.n	18924 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   1893c:	b13a      	cbz	r2, 1894e <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   1893e:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   18940:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   18942:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   18944:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   18946:	2800      	cmp	r0, #0
   18948:	d1ea      	bne.n	18920 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   1894a:	6099      	str	r1, [r3, #8]
}
   1894c:	e7e9      	b.n	18922 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   1894e:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   18952:	e7e6      	b.n	18922 <gpio_nrfx_manage_callback+0x24>

00018954 <cfg_level_pins>:
{
   18954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct gpio_nrfx_data *data = get_port_data(port);
   18958:	6907      	ldr	r7, [r0, #16]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   1895a:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   1895e:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   18960:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
   18964:	4313      	orrs	r3, r2
   18966:	ea24 0403 	bic.w	r4, r4, r3
	uint32_t bit = 1U << pin;
   1896a:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   1896c:	2500      	movs	r5, #0
	while (level_pins) {
   1896e:	b90c      	cbnz	r4, 18974 <cfg_level_pins+0x20>
}
   18970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   18974:	4226      	tst	r6, r4
   18976:	d010      	beq.n	1899a <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   18978:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1897a:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1897e:	40e9      	lsrs	r1, r5
   18980:	f001 0101 	and.w	r1, r1, #1
   18984:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   18988:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1898c:	b2c9      	uxtb	r1, r1
   1898e:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   18992:	f7fb f97f 	bl	13c94 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   18996:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   1899a:	3501      	adds	r5, #1
		bit <<= 1;
   1899c:	0076      	lsls	r6, r6, #1
   1899e:	e7e6      	b.n	1896e <cfg_level_pins+0x1a>

000189a0 <uart_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   189a0:	6902      	ldr	r2, [r0, #16]
{
   189a2:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   189a4:	e892 0003 	ldmia.w	r2, {r0, r1}
   189a8:	e883 0003 	stmia.w	r3, {r0, r1}
}
   189ac:	2000      	movs	r0, #0
   189ae:	4770      	bx	lr

000189b0 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   189b0:	4700      	bx	r0

000189b2 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   189b2:	f000 ba84 	b.w	18ebe <z_impl_k_busy_wait>

000189b6 <nrfx_clock_enable>:
{
   189b6:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   189b8:	2000      	movs	r0, #0
   189ba:	f7eb ff7d 	bl	48b8 <arch_irq_is_enabled>
   189be:	b918      	cbnz	r0, 189c8 <nrfx_clock_enable+0x12>
}
   189c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   189c4:	f7eb bf54 	b.w	4870 <arch_irq_enable>
   189c8:	bd08      	pop	{r3, pc}

000189ca <z_device_state_init>:
}
   189ca:	4770      	bx	lr

000189cc <z_device_ready>:
	return __device_end - __device_start;
}

bool z_device_ready(const struct device *dev)
{
	return dev->state->initialized && (dev->state->init_res == 0U);
   189cc:	68c3      	ldr	r3, [r0, #12]
   189ce:	8818      	ldrh	r0, [r3, #0]
   189d0:	f3c0 0008 	ubfx	r0, r0, #0, #9
}
   189d4:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   189d8:	4258      	negs	r0, r3
   189da:	4158      	adcs	r0, r3
   189dc:	4770      	bx	lr

000189de <arch_system_halt>:
	__asm__ volatile(
   189de:	f04f 0220 	mov.w	r2, #32
   189e2:	f3ef 8311 	mrs	r3, BASEPRI
   189e6:	f382 8811 	msr	BASEPRI, r2
   189ea:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
   189ee:	e7fe      	b.n	189ee <arch_system_halt+0x10>

000189f0 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   189f0:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
   189f2:	f7ff fff4 	bl	189de <arch_system_halt>

000189f6 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   189f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   189f8:	4605      	mov	r5, r0
   189fa:	460e      	mov	r6, r1
   189fc:	f04f 0320 	mov.w	r3, #32
   18a00:	f3ef 8711 	mrs	r7, BASEPRI
   18a04:	f383 8811 	msr	BASEPRI, r3
   18a08:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   18a0c:	f7fc fc08 	bl	15220 <z_impl_k_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   18a10:	4631      	mov	r1, r6
   18a12:	4604      	mov	r4, r0
   18a14:	4628      	mov	r0, r5
   18a16:	f7ff ffeb 	bl	189f0 <k_sys_fatal_error_handler>
	__asm__ volatile(
   18a1a:	f387 8811 	msr	BASEPRI, r7
   18a1e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   18a22:	4620      	mov	r0, r4
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   18a24:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   18a28:	f7ec b91a 	b.w	4c60 <z_impl_k_thread_abort>

00018a2c <z_pm_save_idle_exit>:
{
   18a2c:	b508      	push	{r3, lr}
	pm_system_resume();
   18a2e:	f7eb faf3 	bl	4018 <pm_system_resume>
}
   18a32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   18a36:	f7fd be1e 	b.w	16676 <sys_clock_idle_exit>

00018a3a <k_heap_init>:
{
   18a3a:	b410      	push	{r4}
   18a3c:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   18a40:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   18a44:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   18a46:	f7fd bcc7 	b.w	163d8 <sys_heap_init>

00018a4a <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   18a4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18a4e:	b087      	sub	sp, #28
   18a50:	4604      	mov	r4, r0
   18a52:	460e      	mov	r6, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   18a54:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
{
   18a58:	4617      	mov	r7, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   18a5a:	f000 fb40 	bl	190de <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   18a5e:	f104 0914 	add.w	r9, r4, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   18a62:	4605      	mov	r5, r0
   18a64:	4688      	mov	r8, r1
	__asm__ volatile(
   18a66:	f04f 0320 	mov.w	r3, #32
   18a6a:	f3ef 8b11 	mrs	fp, BASEPRI
   18a6e:	f383 8811 	msr	BASEPRI, r3
   18a72:	f3bf 8f6f 	isb	sy
		now = sys_clock_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   18a76:	f104 0a0c 	add.w	sl, r4, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   18a7a:	463a      	mov	r2, r7
   18a7c:	4631      	mov	r1, r6
   18a7e:	4620      	mov	r0, r4
   18a80:	f7fd fc2f 	bl	162e2 <sys_heap_aligned_alloc>
   18a84:	9005      	str	r0, [sp, #20]
		now = sys_clock_tick_get();
   18a86:	f7fd f85b 	bl	15b40 <sys_clock_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   18a8a:	9b05      	ldr	r3, [sp, #20]
   18a8c:	b13b      	cbz	r3, 18a9e <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   18a8e:	f38b 8811 	msr	BASEPRI, fp
   18a92:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   18a96:	4618      	mov	r0, r3
   18a98:	b007      	add	sp, #28
   18a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   18a9e:	1a2a      	subs	r2, r5, r0
   18aa0:	9202      	str	r2, [sp, #8]
   18aa2:	eb68 0201 	sbc.w	r2, r8, r1
   18aa6:	9203      	str	r2, [sp, #12]
   18aa8:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   18aac:	2901      	cmp	r1, #1
   18aae:	f172 0200 	sbcs.w	r2, r2, #0
   18ab2:	dbec      	blt.n	18a8e <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   18ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   18ab8:	4659      	mov	r1, fp
   18aba:	e9cd 2300 	strd	r2, r3, [sp]
   18abe:	4648      	mov	r0, r9
   18ac0:	4652      	mov	r2, sl
   18ac2:	f7fc f9bb 	bl	14e3c <z_pend_curr>
	__asm__ volatile(
   18ac6:	f04f 0320 	mov.w	r3, #32
   18aca:	f3ef 8b11 	mrs	fp, BASEPRI
   18ace:	f383 8811 	msr	BASEPRI, r3
   18ad2:	f3bf 8f6f 	isb	sy
   18ad6:	e7d0      	b.n	18a7a <k_heap_aligned_alloc+0x30>

00018ad8 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   18ad8:	b538      	push	{r3, r4, r5, lr}
   18ada:	4604      	mov	r4, r0
   18adc:	f04f 0320 	mov.w	r3, #32
   18ae0:	f3ef 8511 	mrs	r5, BASEPRI
   18ae4:	f383 8811 	msr	BASEPRI, r3
   18ae8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   18aec:	f7fd fbac 	bl	16248 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   18af0:	f104 000c 	add.w	r0, r4, #12
   18af4:	f000 f9a0 	bl	18e38 <z_unpend_all>
   18af8:	b130      	cbz	r0, 18b08 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   18afa:	4629      	mov	r1, r5
   18afc:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   18b00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   18b04:	f7fc b918 	b.w	14d38 <z_reschedule>
	__asm__ volatile(
   18b08:	f385 8811 	msr	BASEPRI, r5
   18b0c:	f3bf 8f6f 	isb	sy
}
   18b10:	bd38      	pop	{r3, r4, r5, pc}

00018b12 <queue_insert>:
{
   18b12:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18b16:	4699      	mov	r9, r3
   18b18:	4604      	mov	r4, r0
   18b1a:	f89d 3020 	ldrb.w	r3, [sp, #32]
   18b1e:	460d      	mov	r5, r1
   18b20:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   18b22:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   18b26:	f04f 0220 	mov.w	r2, #32
   18b2a:	f3ef 8711 	mrs	r7, BASEPRI
   18b2e:	f382 8811 	msr	BASEPRI, r2
   18b32:	f3bf 8f6f 	isb	sy
	if (is_append) {
   18b36:	b103      	cbz	r3, 18b3a <queue_insert+0x28>
		prev = sys_sflist_peek_tail(&queue->data_q);
   18b38:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   18b3a:	4630      	mov	r0, r6
   18b3c:	f000 f964 	bl	18e08 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   18b40:	b158      	cbz	r0, 18b5a <queue_insert+0x48>
   18b42:	2400      	movs	r4, #0
   18b44:	67c4      	str	r4, [r0, #124]	; 0x7c
   18b46:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   18b4a:	f000 f92b 	bl	18da4 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   18b4e:	4630      	mov	r0, r6
   18b50:	4639      	mov	r1, r7
   18b52:	f7fc f8f1 	bl	14d38 <z_reschedule>
	return 0;
   18b56:	2000      	movs	r0, #0
   18b58:	e00c      	b.n	18b74 <queue_insert+0x62>
	if (alloc) {
   18b5a:	f1b9 0f00 	cmp.w	r9, #0
   18b5e:	d01b      	beq.n	18b98 <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   18b60:	2108      	movs	r1, #8
   18b62:	f7fd f88b 	bl	15c7c <z_thread_aligned_alloc>
		if (anode == NULL) {
   18b66:	b938      	cbnz	r0, 18b78 <queue_insert+0x66>
	__asm__ volatile(
   18b68:	f387 8811 	msr	BASEPRI, r7
   18b6c:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   18b70:	f06f 000b 	mvn.w	r0, #11
}
   18b74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   18b78:	2301      	movs	r3, #1
		anode->data = data;
   18b7a:	f8c0 8004 	str.w	r8, [r0, #4]
   18b7e:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   18b80:	6803      	ldr	r3, [r0, #0]
   18b82:	f003 0203 	and.w	r2, r3, #3
   18b86:	b95d      	cbnz	r5, 18ba0 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   18b88:	6823      	ldr	r3, [r4, #0]
   18b8a:	4313      	orrs	r3, r2
   18b8c:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   18b8e:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   18b90:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   18b92:	b973      	cbnz	r3, 18bb2 <queue_insert+0xa0>
	list->tail = node;
   18b94:	6060      	str	r0, [r4, #4]
}
   18b96:	e00c      	b.n	18bb2 <queue_insert+0xa0>
	node->next_and_flags = flags;
   18b98:	f8c8 9000 	str.w	r9, [r8]
}
   18b9c:	4640      	mov	r0, r8
   18b9e:	e7ef      	b.n	18b80 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   18ba0:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   18ba2:	f033 0303 	bics.w	r3, r3, #3
   18ba6:	d110      	bne.n	18bca <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   18ba8:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   18baa:	6862      	ldr	r2, [r4, #4]
   18bac:	b93a      	cbnz	r2, 18bbe <queue_insert+0xac>
	list->head = node;
   18bae:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   18bb2:	2104      	movs	r1, #4
   18bb4:	f104 0010 	add.w	r0, r4, #16
   18bb8:	f000 fbe6 	bl	19388 <z_handle_obj_poll_events>
   18bbc:	e7c7      	b.n	18b4e <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   18bbe:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   18bc0:	f003 0303 	and.w	r3, r3, #3
   18bc4:	4303      	orrs	r3, r0
   18bc6:	6013      	str	r3, [r2, #0]
   18bc8:	e7e4      	b.n	18b94 <queue_insert+0x82>
   18bca:	4313      	orrs	r3, r2
   18bcc:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   18bce:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   18bd0:	f003 0303 	and.w	r3, r3, #3
   18bd4:	4303      	orrs	r3, r0
   18bd6:	602b      	str	r3, [r5, #0]
}
   18bd8:	e7eb      	b.n	18bb2 <queue_insert+0xa0>

00018bda <z_queue_node_peek>:
{
   18bda:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   18bdc:	4604      	mov	r4, r0
   18bde:	b130      	cbz	r0, 18bee <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   18be0:	6802      	ldr	r2, [r0, #0]
   18be2:	0793      	lsls	r3, r2, #30
   18be4:	d003      	beq.n	18bee <z_queue_node_peek+0x14>
		ret = anode->data;
   18be6:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   18be8:	b109      	cbz	r1, 18bee <z_queue_node_peek+0x14>
			k_free(anode);
   18bea:	f000 fbdb 	bl	193a4 <k_free>
}
   18bee:	4620      	mov	r0, r4
   18bf0:	bd10      	pop	{r4, pc}

00018bf2 <z_impl_k_queue_init>:
	list->head = NULL;
   18bf2:	2300      	movs	r3, #0
	list->tail = NULL;
   18bf4:	e9c0 3300 	strd	r3, r3, [r0]
   18bf8:	f100 0308 	add.w	r3, r0, #8
   18bfc:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   18c00:	f100 0310 	add.w	r3, r0, #16
   18c04:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   18c08:	4770      	bx	lr

00018c0a <k_queue_append>:
{
   18c0a:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   18c0c:	2301      	movs	r3, #1
   18c0e:	9300      	str	r3, [sp, #0]
   18c10:	2300      	movs	r3, #0
{
   18c12:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   18c14:	4619      	mov	r1, r3
   18c16:	f7ff ff7c 	bl	18b12 <queue_insert>
}
   18c1a:	b003      	add	sp, #12
   18c1c:	f85d fb04 	ldr.w	pc, [sp], #4

00018c20 <k_queue_prepend>:
{
   18c20:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   18c22:	2300      	movs	r3, #0
{
   18c24:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   18c26:	9300      	str	r3, [sp, #0]
   18c28:	4619      	mov	r1, r3
   18c2a:	f7ff ff72 	bl	18b12 <queue_insert>
}
   18c2e:	b003      	add	sp, #12
   18c30:	f85d fb04 	ldr.w	pc, [sp], #4

00018c34 <k_queue_append_list>:
{
   18c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18c38:	4605      	mov	r5, r0
   18c3a:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   18c3c:	460c      	mov	r4, r1
   18c3e:	b391      	cbz	r1, 18ca6 <k_queue_append_list+0x72>
   18c40:	b38a      	cbz	r2, 18ca6 <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   18c42:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   18c46:	f04f 0320 	mov.w	r3, #32
   18c4a:	f3ef 8811 	mrs	r8, BASEPRI
   18c4e:	f383 8811 	msr	BASEPRI, r3
   18c52:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   18c56:	4638      	mov	r0, r7
   18c58:	f000 f8d6 	bl	18e08 <z_unpend_first_thread>
   18c5c:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   18c60:	b920      	cbnz	r0, 18c6c <k_queue_append_list+0x38>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   18c62:	686b      	ldr	r3, [r5, #4]
   18c64:	b9cb      	cbnz	r3, 18c9a <k_queue_append_list+0x66>
	list->head = node;
   18c66:	602c      	str	r4, [r5, #0]
	list->tail = node;
   18c68:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   18c6a:	e00a      	b.n	18c82 <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   18c6c:	6144      	str	r4, [r0, #20]
   18c6e:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   18c72:	f000 f897 	bl	18da4 <z_ready_thread>
		head = *(void **)head;
   18c76:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   18c78:	4638      	mov	r0, r7
   18c7a:	f000 f8c5 	bl	18e08 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   18c7e:	2c00      	cmp	r4, #0
   18c80:	d1ee      	bne.n	18c60 <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   18c82:	2104      	movs	r1, #4
   18c84:	f105 0010 	add.w	r0, r5, #16
   18c88:	f000 fb7e 	bl	19388 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   18c8c:	4638      	mov	r0, r7
   18c8e:	4641      	mov	r1, r8
   18c90:	f7fc f852 	bl	14d38 <z_reschedule>
	return 0;
   18c94:	2000      	movs	r0, #0
}
   18c96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   18c9a:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   18c9c:	f001 0103 	and.w	r1, r1, #3
   18ca0:	430c      	orrs	r4, r1
   18ca2:	601c      	str	r4, [r3, #0]
}
   18ca4:	e7e0      	b.n	18c68 <k_queue_append_list+0x34>
		return -EINVAL;
   18ca6:	f06f 0015 	mvn.w	r0, #21
   18caa:	e7f4      	b.n	18c96 <k_queue_append_list+0x62>

00018cac <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   18cac:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   18cb0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   18cb2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   18cb4:	2300      	movs	r3, #0
	node->prev = NULL;
   18cb6:	e9c0 3300 	strd	r3, r3, [r0]
}
   18cba:	4770      	bx	lr

00018cbc <unpend_thread_no_timeout>:
{
   18cbc:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   18cbe:	f7ff fff5 	bl	18cac <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   18cc2:	7b43      	ldrb	r3, [r0, #13]
   18cc4:	f023 0302 	bic.w	r3, r3, #2
   18cc8:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   18cca:	2300      	movs	r3, #0
   18ccc:	6083      	str	r3, [r0, #8]
}
   18cce:	bd08      	pop	{r3, pc}

00018cd0 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   18cd0:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   18cd4:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   18cd8:	4283      	cmp	r3, r0
		return b2 - b1;
   18cda:	bf14      	ite	ne
   18cdc:	1ac0      	subne	r0, r0, r3
	return 0;
   18cde:	2000      	moveq	r0, #0
}
   18ce0:	4770      	bx	lr

00018ce2 <z_unpend_thread>:
{
   18ce2:	b510      	push	{r4, lr}
   18ce4:	f04f 0320 	mov.w	r3, #32
   18ce8:	f3ef 8411 	mrs	r4, BASEPRI
   18cec:	f383 8811 	msr	BASEPRI, r3
   18cf0:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   18cf4:	f7ff ffe2 	bl	18cbc <unpend_thread_no_timeout>
	__asm__ volatile(
   18cf8:	f384 8811 	msr	BASEPRI, r4
   18cfc:	f3bf 8f6f 	isb	sy
}
   18d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_abort_timeout(&thread->base.timeout);
   18d04:	3018      	adds	r0, #24
   18d06:	f000 b9a4 	b.w	19052 <z_abort_timeout>

00018d0a <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   18d0a:	4603      	mov	r3, r0
   18d0c:	b920      	cbnz	r0, 18d18 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   18d0e:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   18d12:	b90a      	cbnz	r2, 18d18 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   18d14:	f7eb bd5e 	b.w	47d4 <arch_swap>
   18d18:	f383 8811 	msr	BASEPRI, r3
   18d1c:	f3bf 8f6f 	isb	sy
}
   18d20:	4770      	bx	lr

00018d22 <z_reschedule_unlocked>:
	__asm__ volatile(
   18d22:	f04f 0320 	mov.w	r3, #32
   18d26:	f3ef 8011 	mrs	r0, BASEPRI
   18d2a:	f383 8811 	msr	BASEPRI, r3
   18d2e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   18d32:	f7ff bfea 	b.w	18d0a <z_reschedule_irqlock>

00018d36 <z_priq_dumb_best>:
{
   18d36:	4603      	mov	r3, r0
	return list->head == list;
   18d38:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18d3a:	4283      	cmp	r3, r0
   18d3c:	d003      	beq.n	18d46 <z_priq_dumb_best+0x10>
	if (n != NULL) {
   18d3e:	2800      	cmp	r0, #0
   18d40:	bf38      	it	cc
   18d42:	2000      	movcc	r0, #0
   18d44:	4770      	bx	lr
	struct k_thread *thread = NULL;
   18d46:	2000      	movs	r0, #0
}
   18d48:	4770      	bx	lr

00018d4a <add_to_waitq_locked>:
{
   18d4a:	b538      	push	{r3, r4, r5, lr}
   18d4c:	4604      	mov	r4, r0
   18d4e:	460d      	mov	r5, r1
	unready_thread(thread);
   18d50:	f7fc f836 	bl	14dc0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   18d54:	7b63      	ldrb	r3, [r4, #13]
   18d56:	f043 0302 	orr.w	r3, r3, #2
   18d5a:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   18d5c:	b1b5      	cbz	r5, 18d8c <add_to_waitq_locked+0x42>
	return list->head == list;
   18d5e:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   18d60:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18d62:	429d      	cmp	r5, r3
   18d64:	bf08      	it	eq
   18d66:	2300      	moveq	r3, #0
   18d68:	2b00      	cmp	r3, #0
   18d6a:	bf38      	it	cc
   18d6c:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18d6e:	b19b      	cbz	r3, 18d98 <add_to_waitq_locked+0x4e>
	int32_t b1 = thread_1->base.prio;
   18d70:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   18d74:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   18d78:	4291      	cmp	r1, r2
   18d7a:	d008      	beq.n	18d8e <add_to_waitq_locked+0x44>
		return b2 - b1;
   18d7c:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   18d7e:	2a00      	cmp	r2, #0
   18d80:	dd05      	ble.n	18d8e <add_to_waitq_locked+0x44>
	sys_dnode_t *const prev = successor->prev;
   18d82:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   18d84:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   18d88:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   18d8a:	605c      	str	r4, [r3, #4]
}
   18d8c:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   18d8e:	686a      	ldr	r2, [r5, #4]
   18d90:	4293      	cmp	r3, r2
   18d92:	d001      	beq.n	18d98 <add_to_waitq_locked+0x4e>
   18d94:	681b      	ldr	r3, [r3, #0]
   18d96:	e7ea      	b.n	18d6e <add_to_waitq_locked+0x24>
	sys_dnode_t *const tail = list->tail;
   18d98:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   18d9a:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   18d9e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   18da0:	606c      	str	r4, [r5, #4]
   18da2:	e7f3      	b.n	18d8c <add_to_waitq_locked+0x42>

00018da4 <z_ready_thread>:
{
   18da4:	b510      	push	{r4, lr}
   18da6:	f04f 0320 	mov.w	r3, #32
   18daa:	f3ef 8411 	mrs	r4, BASEPRI
   18dae:	f383 8811 	msr	BASEPRI, r3
   18db2:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   18db6:	f7fc f95d 	bl	15074 <ready_thread>
	__asm__ volatile(
   18dba:	f384 8811 	msr	BASEPRI, r4
   18dbe:	f3bf 8f6f 	isb	sy
}
   18dc2:	bd10      	pop	{r4, pc}

00018dc4 <z_thread_timeout>:
{
   18dc4:	b510      	push	{r4, lr}
   18dc6:	4601      	mov	r1, r0
	__asm__ volatile(
   18dc8:	f04f 0320 	mov.w	r3, #32
   18dcc:	f3ef 8411 	mrs	r4, BASEPRI
   18dd0:	f383 8811 	msr	BASEPRI, r3
   18dd4:	f3bf 8f6f 	isb	sy
		if (!killed) {
   18dd8:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   18ddc:	f013 0f28 	tst.w	r3, #40	; 0x28
   18de0:	d10d      	bne.n	18dfe <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   18de2:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   18de6:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   18de8:	b10b      	cbz	r3, 18dee <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   18dea:	f7ff ff67 	bl	18cbc <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   18dee:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   18df2:	f023 0314 	bic.w	r3, r3, #20
   18df6:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   18dfa:	f7fc f93b 	bl	15074 <ready_thread>
	__asm__ volatile(
   18dfe:	f384 8811 	msr	BASEPRI, r4
   18e02:	f3bf 8f6f 	isb	sy
}
   18e06:	bd10      	pop	{r4, pc}

00018e08 <z_unpend_first_thread>:
{
   18e08:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   18e0a:	f04f 0320 	mov.w	r3, #32
   18e0e:	f3ef 8511 	mrs	r5, BASEPRI
   18e12:	f383 8811 	msr	BASEPRI, r3
   18e16:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   18e1a:	f7ff ff8c 	bl	18d36 <z_priq_dumb_best>
		if (thread != NULL) {
   18e1e:	4604      	mov	r4, r0
   18e20:	b120      	cbz	r0, 18e2c <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   18e22:	f7ff ff4b 	bl	18cbc <unpend_thread_no_timeout>
   18e26:	3018      	adds	r0, #24
   18e28:	f000 f913 	bl	19052 <z_abort_timeout>
	__asm__ volatile(
   18e2c:	f385 8811 	msr	BASEPRI, r5
   18e30:	f3bf 8f6f 	isb	sy
}
   18e34:	4620      	mov	r0, r4
   18e36:	bd38      	pop	{r3, r4, r5, pc}

00018e38 <z_unpend_all>:
{
   18e38:	b538      	push	{r3, r4, r5, lr}
   18e3a:	4605      	mov	r5, r0
	int need_sched = 0;
   18e3c:	2000      	movs	r0, #0
	return list->head == list;
   18e3e:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18e40:	42a5      	cmp	r5, r4
   18e42:	d000      	beq.n	18e46 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   18e44:	b904      	cbnz	r4, 18e48 <z_unpend_all+0x10>
}
   18e46:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   18e48:	4620      	mov	r0, r4
   18e4a:	f7ff ff4a 	bl	18ce2 <z_unpend_thread>
		z_ready_thread(thread);
   18e4e:	4620      	mov	r0, r4
   18e50:	f7ff ffa8 	bl	18da4 <z_ready_thread>
		need_sched = 1;
   18e54:	2001      	movs	r0, #1
   18e56:	e7f2      	b.n	18e3e <z_unpend_all+0x6>

00018e58 <z_sched_wake>:
{
   18e58:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   18e5a:	f04f 0320 	mov.w	r3, #32
   18e5e:	f3ef 8511 	mrs	r5, BASEPRI
   18e62:	f383 8811 	msr	BASEPRI, r3
   18e66:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   18e6a:	f7ff ff64 	bl	18d36 <z_priq_dumb_best>
		if (thread != NULL) {
   18e6e:	4604      	mov	r4, r0
   18e70:	b150      	cbz	r0, 18e88 <z_sched_wake+0x30>
   18e72:	67c1      	str	r1, [r0, #124]	; 0x7c
   18e74:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   18e76:	f7ff ff21 	bl	18cbc <unpend_thread_no_timeout>
   18e7a:	3018      	adds	r0, #24
   18e7c:	f000 f8e9 	bl	19052 <z_abort_timeout>
			ready_thread(thread);
   18e80:	4620      	mov	r0, r4
   18e82:	f7fc f8f7 	bl	15074 <ready_thread>
			ret = true;
   18e86:	2001      	movs	r0, #1
	__asm__ volatile(
   18e88:	f385 8811 	msr	BASEPRI, r5
   18e8c:	f3bf 8f6f 	isb	sy
}
   18e90:	bd38      	pop	{r3, r4, r5, pc}

00018e92 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   18e92:	b15a      	cbz	r2, 18eac <z_impl_k_sem_init+0x1a>
   18e94:	428a      	cmp	r2, r1
   18e96:	d309      	bcc.n	18eac <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   18e98:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   18e9c:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   18ea0:	e9c0 0000 	strd	r0, r0, [r0]
   18ea4:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   18ea8:	2000      	movs	r0, #0
   18eaa:	4770      	bx	lr
		return -EINVAL;
   18eac:	f06f 0015 	mvn.w	r0, #21
}
   18eb0:	4770      	bx	lr

00018eb2 <k_is_in_isr>:
   18eb2:	f3ef 8005 	mrs	r0, IPSR
}
   18eb6:	3800      	subs	r0, #0
   18eb8:	bf18      	it	ne
   18eba:	2001      	movne	r0, #1
   18ebc:	4770      	bx	lr

00018ebe <z_impl_k_busy_wait>:
	if (usec_to_wait == 0U) {
   18ebe:	b108      	cbz	r0, 18ec4 <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
   18ec0:	f7eb bf94 	b.w	4dec <arch_busy_wait>
}
   18ec4:	4770      	bx	lr

00018ec6 <z_impl_k_thread_name_set>:
}
   18ec6:	f06f 0046 	mvn.w	r0, #70	; 0x46
   18eca:	4770      	bx	lr

00018ecc <z_impl_k_thread_start>:
	z_sched_start(thread);
   18ecc:	f7fc b90a 	b.w	150e4 <z_sched_start>

00018ed0 <notify_queue_locked>:
	if (queue != NULL) {
   18ed0:	b120      	cbz	r0, 18edc <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   18ed2:	2200      	movs	r2, #0
   18ed4:	4611      	mov	r1, r2
   18ed6:	3088      	adds	r0, #136	; 0x88
   18ed8:	f7ff bfbe 	b.w	18e58 <z_sched_wake>
}
   18edc:	4770      	bx	lr

00018ede <unschedule_locked>:
	bool ret = flag_test(flagp, bit);
   18ede:	68c3      	ldr	r3, [r0, #12]
{
   18ee0:	b510      	push	{r4, lr}
	*flagp &= ~BIT(bit);
   18ee2:	f023 0208 	bic.w	r2, r3, #8
	return (*flagp & BIT(bit)) != 0U;
   18ee6:	f3c3 04c0 	ubfx	r4, r3, #3, #1
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   18eea:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   18eec:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   18eee:	d502      	bpl.n	18ef6 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   18ef0:	3010      	adds	r0, #16
   18ef2:	f000 f8ae 	bl	19052 <z_abort_timeout>
}
   18ef6:	4620      	mov	r0, r4
   18ef8:	bd10      	pop	{r4, pc}

00018efa <cancel_async_locked>:
{
   18efa:	4603      	mov	r3, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   18efc:	68c0      	ldr	r0, [r0, #12]
{
   18efe:	b510      	push	{r4, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   18f00:	0784      	lsls	r4, r0, #30
   18f02:	f3c0 0140 	ubfx	r1, r0, #1, #1
   18f06:	d416      	bmi.n	18f36 <cancel_async_locked+0x3c>
	*flagp &= ~BIT(bit);
   18f08:	f020 0404 	bic.w	r4, r0, #4
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   18f0c:	0740      	lsls	r0, r0, #29
		queue_remove_locked(work->queue, work);
   18f0e:	689a      	ldr	r2, [r3, #8]
	*flagp &= ~BIT(bit);
   18f10:	60dc      	str	r4, [r3, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   18f12:	d510      	bpl.n	18f36 <cancel_async_locked+0x3c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   18f14:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
   18f18:	b168      	cbz	r0, 18f36 <cancel_async_locked+0x3c>
   18f1a:	4283      	cmp	r3, r0
   18f1c:	d11d      	bne.n	18f5a <cancel_async_locked+0x60>
Z_GENLIST_REMOVE(slist, snode)
   18f1e:	6818      	ldr	r0, [r3, #0]
   18f20:	b999      	cbnz	r1, 18f4a <cancel_async_locked+0x50>
   18f22:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	list->head = node;
   18f26:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   18f2a:	428b      	cmp	r3, r1
   18f2c:	d101      	bne.n	18f32 <cancel_async_locked+0x38>
	list->tail = node;
   18f2e:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
	parent->next = child;
   18f32:	2200      	movs	r2, #0
   18f34:	601a      	str	r2, [r3, #0]
	return flags_get(&work->flags) & K_WORK_MASK;
   18f36:	68da      	ldr	r2, [r3, #12]
	if (ret != 0) {
   18f38:	f012 000f 	ands.w	r0, r2, #15
	*flagp |= BIT(bit);
   18f3c:	bf1e      	ittt	ne
   18f3e:	f042 0202 	orrne.w	r2, r2, #2
   18f42:	60da      	strne	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   18f44:	f002 000f 	andne.w	r0, r2, #15
}
   18f48:	bd10      	pop	{r4, pc}
   18f4a:	6008      	str	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   18f4c:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
   18f50:	4283      	cmp	r3, r0
	list->tail = node;
   18f52:	bf08      	it	eq
   18f54:	f8c2 1084 	streq.w	r1, [r2, #132]	; 0x84
}
   18f58:	e7eb      	b.n	18f32 <cancel_async_locked+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   18f5a:	4601      	mov	r1, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   18f5c:	6800      	ldr	r0, [r0, #0]
   18f5e:	e7db      	b.n	18f18 <cancel_async_locked+0x1e>

00018f60 <work_timeout>:
{
   18f60:	b513      	push	{r0, r1, r4, lr}
	__asm__ volatile(
   18f62:	f04f 0320 	mov.w	r3, #32
   18f66:	f3ef 8411 	mrs	r4, BASEPRI
   18f6a:	f383 8811 	msr	BASEPRI, r3
   18f6e:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   18f72:	2300      	movs	r3, #0
   18f74:	9301      	str	r3, [sp, #4]
	bool ret = flag_test(flagp, bit);
   18f76:	f850 3c04 	ldr.w	r3, [r0, #-4]
	*flagp &= ~BIT(bit);
   18f7a:	f023 0208 	bic.w	r2, r3, #8
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   18f7e:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   18f80:	f840 2c04 	str.w	r2, [r0, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   18f84:	d505      	bpl.n	18f92 <work_timeout+0x32>
		queue = dw->queue;
   18f86:	6983      	ldr	r3, [r0, #24]
   18f88:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   18f8a:	a901      	add	r1, sp, #4
   18f8c:	3810      	subs	r0, #16
   18f8e:	f7fc fae5 	bl	1555c <submit_to_queue_locked>
	__asm__ volatile(
   18f92:	f384 8811 	msr	BASEPRI, r4
   18f96:	f3bf 8f6f 	isb	sy
}
   18f9a:	b002      	add	sp, #8
   18f9c:	bd10      	pop	{r4, pc}

00018f9e <k_work_init>:
{
   18f9e:	b538      	push	{r3, r4, r5, lr}
   18fa0:	4604      	mov	r4, r0
   18fa2:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   18fa4:	2210      	movs	r2, #16
   18fa6:	2100      	movs	r1, #0
   18fa8:	f7fd fdad 	bl	16b06 <memset>
   18fac:	6065      	str	r5, [r4, #4]
}
   18fae:	bd38      	pop	{r3, r4, r5, pc}

00018fb0 <k_work_submit_to_queue>:
{
   18fb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   18fb2:	9001      	str	r0, [sp, #4]
   18fb4:	4608      	mov	r0, r1
	__asm__ volatile(
   18fb6:	f04f 0320 	mov.w	r3, #32
   18fba:	f3ef 8511 	mrs	r5, BASEPRI
   18fbe:	f383 8811 	msr	BASEPRI, r3
   18fc2:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   18fc6:	a901      	add	r1, sp, #4
   18fc8:	f7fc fac8 	bl	1555c <submit_to_queue_locked>
   18fcc:	4604      	mov	r4, r0
	__asm__ volatile(
   18fce:	f385 8811 	msr	BASEPRI, r5
   18fd2:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   18fd6:	2800      	cmp	r0, #0
   18fd8:	dd04      	ble.n	18fe4 <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
   18fda:	f7fc f927 	bl	1522c <z_impl_k_is_preempt_thread>
   18fde:	b108      	cbz	r0, 18fe4 <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
   18fe0:	f7fc f8aa 	bl	15138 <z_impl_k_yield>
}
   18fe4:	4620      	mov	r0, r4
   18fe6:	b003      	add	sp, #12
   18fe8:	bd30      	pop	{r4, r5, pc}

00018fea <k_work_init_delayable>:
{
   18fea:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   18fec:	2230      	movs	r2, #48	; 0x30
{
   18fee:	4604      	mov	r4, r0
   18ff0:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   18ff2:	2100      	movs	r1, #0
   18ff4:	f7fd fd87 	bl	16b06 <memset>
   18ff8:	f44f 7380 	mov.w	r3, #256	; 0x100
   18ffc:	6065      	str	r5, [r4, #4]
   18ffe:	60e3      	str	r3, [r4, #12]
}
   19000:	bd38      	pop	{r3, r4, r5, pc}

00019002 <k_work_delayable_busy_get>:
	__asm__ volatile(
   19002:	f04f 0220 	mov.w	r2, #32
   19006:	f3ef 8311 	mrs	r3, BASEPRI
   1900a:	f382 8811 	msr	BASEPRI, r2
   1900e:	f3bf 8f6f 	isb	sy
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19012:	f3bf 8f5b 	dmb	ish
   19016:	68c0      	ldr	r0, [r0, #12]
   19018:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
   1901c:	f383 8811 	msr	BASEPRI, r3
   19020:	f3bf 8f6f 	isb	sy
}
   19024:	f000 000f 	and.w	r0, r0, #15
   19028:	4770      	bx	lr

0001902a <k_work_cancel_delayable>:

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   1902a:	b538      	push	{r3, r4, r5, lr}
   1902c:	4604      	mov	r4, r0
	__asm__ volatile(
   1902e:	f04f 0320 	mov.w	r3, #32
   19032:	f3ef 8511 	mrs	r5, BASEPRI
   19036:	f383 8811 	msr	BASEPRI, r3
   1903a:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   1903e:	f7ff ff4e 	bl	18ede <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   19042:	4620      	mov	r0, r4
   19044:	f7ff ff59 	bl	18efa <cancel_async_locked>
	__asm__ volatile(
   19048:	f385 8811 	msr	BASEPRI, r5
   1904c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = cancel_delayable_async_locked(dwork);

	k_spin_unlock(&lock, key);
	return ret;
}
   19050:	bd38      	pop	{r3, r4, r5, pc}

00019052 <z_abort_timeout>:
{
   19052:	b510      	push	{r4, lr}
	__asm__ volatile(
   19054:	f04f 0220 	mov.w	r2, #32
   19058:	f3ef 8411 	mrs	r4, BASEPRI
   1905c:	f382 8811 	msr	BASEPRI, r2
   19060:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   19064:	6803      	ldr	r3, [r0, #0]
   19066:	b13b      	cbz	r3, 19078 <z_abort_timeout+0x26>
			remove_timeout(to);
   19068:	f7fc fc28 	bl	158bc <remove_timeout>
			ret = 0;
   1906c:	2000      	movs	r0, #0
	__asm__ volatile(
   1906e:	f384 8811 	msr	BASEPRI, r4
   19072:	f3bf 8f6f 	isb	sy
}
   19076:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   19078:	f06f 0015 	mvn.w	r0, #21
   1907c:	e7f7      	b.n	1906e <z_abort_timeout+0x1c>

0001907e <z_get_next_timeout_expiry>:
{
   1907e:	b510      	push	{r4, lr}
	__asm__ volatile(
   19080:	f04f 0320 	mov.w	r3, #32
   19084:	f3ef 8411 	mrs	r4, BASEPRI
   19088:	f383 8811 	msr	BASEPRI, r3
   1908c:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   19090:	f7fc fc2e 	bl	158f0 <next_timeout>
	__asm__ volatile(
   19094:	f384 8811 	msr	BASEPRI, r4
   19098:	f3bf 8f6f 	isb	sy
}
   1909c:	bd10      	pop	{r4, pc}

0001909e <z_set_timeout_expiry>:
{
   1909e:	b570      	push	{r4, r5, r6, lr}
   190a0:	4604      	mov	r4, r0
   190a2:	460d      	mov	r5, r1
	__asm__ volatile(
   190a4:	f04f 0320 	mov.w	r3, #32
   190a8:	f3ef 8611 	mrs	r6, BASEPRI
   190ac:	f383 8811 	msr	BASEPRI, r3
   190b0:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   190b4:	f7fc fc1c 	bl	158f0 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   190b8:	2801      	cmp	r0, #1
   190ba:	dd05      	ble.n	190c8 <z_set_timeout_expiry+0x2a>
   190bc:	42a0      	cmp	r0, r4
   190be:	db03      	blt.n	190c8 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   190c0:	4629      	mov	r1, r5
   190c2:	4620      	mov	r0, r4
   190c4:	f7eb fa7e 	bl	45c4 <sys_clock_set_timeout>
	__asm__ volatile(
   190c8:	f386 8811 	msr	BASEPRI, r6
   190cc:	f3bf 8f6f 	isb	sy
}
   190d0:	bd70      	pop	{r4, r5, r6, pc}

000190d2 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   190d2:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   190d4:	f7fc fd34 	bl	15b40 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   190d8:	bd08      	pop	{r3, pc}

000190da <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   190da:	f7fc bd31 	b.w	15b40 <sys_clock_tick_get>

000190de <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   190de:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   190e0:	1c4b      	adds	r3, r1, #1
   190e2:	bf08      	it	eq
   190e4:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   190e8:	4604      	mov	r4, r0
   190ea:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   190ec:	d013      	beq.n	19116 <sys_clock_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   190ee:	ea54 0105 	orrs.w	r1, r4, r5
   190f2:	d103      	bne.n	190fc <sys_clock_timeout_end_calc+0x1e>

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
	return sys_clock_tick_get() + MAX(1, dt);
}
   190f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   190f8:	f7fc bd22 	b.w	15b40 <sys_clock_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   190fc:	f06f 0101 	mvn.w	r1, #1
   19100:	1a0a      	subs	r2, r1, r0
   19102:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19106:	eb61 0305 	sbc.w	r3, r1, r5
   1910a:	2a00      	cmp	r2, #0
   1910c:	f173 0100 	sbcs.w	r1, r3, #0
   19110:	db02      	blt.n	19118 <sys_clock_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
   19112:	4610      	mov	r0, r2
   19114:	4619      	mov	r1, r3
}
   19116:	bd38      	pop	{r3, r4, r5, pc}
	return sys_clock_tick_get() + MAX(1, dt);
   19118:	f7fc fd12 	bl	15b40 <sys_clock_tick_get>
   1911c:	2c01      	cmp	r4, #1
   1911e:	f175 0300 	sbcs.w	r3, r5, #0
   19122:	bfbc      	itt	lt
   19124:	2401      	movlt	r4, #1
   19126:	2500      	movlt	r5, #0
   19128:	1820      	adds	r0, r4, r0
   1912a:	eb45 0101 	adc.w	r1, r5, r1
   1912e:	e7f2      	b.n	19116 <sys_clock_timeout_end_calc+0x38>

00019130 <clear_event_registrations>:
	while (num_events--) {
   19130:	2314      	movs	r3, #20
{
   19132:	b530      	push	{r4, r5, lr}
   19134:	fb03 0101 	mla	r1, r3, r1, r0
	event->poller = NULL;
   19138:	2400      	movs	r4, #0
	while (num_events--) {
   1913a:	4281      	cmp	r1, r0
   1913c:	d100      	bne.n	19140 <clear_event_registrations+0x10>
}
   1913e:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   19140:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   19144:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   19148:	f003 030f 	and.w	r3, r3, #15
   1914c:	2b02      	cmp	r3, #2
   1914e:	d80a      	bhi.n	19166 <clear_event_registrations+0x36>
   19150:	b15b      	cbz	r3, 1916a <clear_event_registrations+0x3a>
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   19152:	f851 3c14 	ldr.w	r3, [r1, #-20]
   19156:	b143      	cbz	r3, 1916a <clear_event_registrations+0x3a>
	sys_dnode_t *const prev = node->prev;
   19158:	f851 5c10 	ldr.w	r5, [r1, #-16]
	prev->next = next;
   1915c:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   1915e:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   19160:	e941 4405 	strd	r4, r4, [r1, #-20]
}
   19164:	e001      	b.n	1916a <clear_event_registrations+0x3a>
	switch (event->type) {
   19166:	2b04      	cmp	r3, #4
   19168:	d0f3      	beq.n	19152 <clear_event_registrations+0x22>
   1916a:	f382 8811 	msr	BASEPRI, r2
   1916e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   19172:	f04f 0320 	mov.w	r3, #32
   19176:	f3ef 8211 	mrs	r2, BASEPRI
   1917a:	f383 8811 	msr	BASEPRI, r3
   1917e:	f3bf 8f6f 	isb	sy
   19182:	3914      	subs	r1, #20
   19184:	e7d9      	b.n	1913a <clear_event_registrations+0xa>

00019186 <add_event>:
{
   19186:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19188:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1918a:	e9d0 2300 	ldrd	r2, r3, [r0]
   1918e:	4290      	cmp	r0, r2
   19190:	4604      	mov	r4, r0
   19192:	460d      	mov	r5, r1
   19194:	d105      	bne.n	191a2 <add_event+0x1c>
	sys_dnode_t *const tail = list->tail;
   19196:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   19198:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   1919c:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1919e:	6065      	str	r5, [r4, #4]
}
   191a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   191a2:	2b00      	cmp	r3, #0
   191a4:	d0f7      	beq.n	19196 <add_event+0x10>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   191a6:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   191a8:	b100      	cbz	r0, 191ac <add_event+0x26>
   191aa:	3860      	subs	r0, #96	; 0x60
   191ac:	b107      	cbz	r7, 191b0 <add_event+0x2a>
   191ae:	3f60      	subs	r7, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   191b0:	4639      	mov	r1, r7
   191b2:	f7ff fd8d 	bl	18cd0 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   191b6:	2800      	cmp	r0, #0
   191b8:	dced      	bgt.n	19196 <add_event+0x10>
	return list->head == list;
   191ba:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   191bc:	42b4      	cmp	r4, r6
   191be:	d0ea      	beq.n	19196 <add_event+0x10>
   191c0:	2e00      	cmp	r6, #0
   191c2:	bf38      	it	cc
   191c4:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   191c6:	2e00      	cmp	r6, #0
   191c8:	d0e5      	beq.n	19196 <add_event+0x10>
		if (z_sched_prio_cmp(poller_thread(poller),
   191ca:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   191cc:	b101      	cbz	r1, 191d0 <add_event+0x4a>
   191ce:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   191d0:	4638      	mov	r0, r7
   191d2:	f7ff fd7d 	bl	18cd0 <z_sched_prio_cmp>
   191d6:	2800      	cmp	r0, #0
   191d8:	dd05      	ble.n	191e6 <add_event+0x60>
	sys_dnode_t *const prev = successor->prev;
   191da:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   191dc:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   191e0:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   191e2:	6075      	str	r5, [r6, #4]
			return;
   191e4:	e7dc      	b.n	191a0 <add_event+0x1a>
	return (node == list->tail) ? NULL : node->next;
   191e6:	6863      	ldr	r3, [r4, #4]
   191e8:	42b3      	cmp	r3, r6
   191ea:	d0d4      	beq.n	19196 <add_event+0x10>
   191ec:	6836      	ldr	r6, [r6, #0]
   191ee:	e7ea      	b.n	191c6 <add_event+0x40>

000191f0 <register_events>:
{
   191f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   191f4:	f04f 0a00 	mov.w	sl, #0
{
   191f8:	460e      	mov	r6, r1
   191fa:	4614      	mov	r4, r2
   191fc:	461f      	mov	r7, r3
   191fe:	4683      	mov	fp, r0
	int events_registered = 0;
   19200:	4655      	mov	r5, sl
	event->poller = NULL;
   19202:	46d0      	mov	r8, sl
	for (int ii = 0; ii < num_events; ii++) {
   19204:	45b2      	cmp	sl, r6
   19206:	db02      	blt.n	1920e <register_events+0x1e>
}
   19208:	4628      	mov	r0, r5
   1920a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1920e:	f04f 0320 	mov.w	r3, #32
   19212:	f3ef 8911 	mrs	r9, BASEPRI
   19216:	f383 8811 	msr	BASEPRI, r3
   1921a:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   1921e:	f89b 200d 	ldrb.w	r2, [fp, #13]
   19222:	f002 020f 	and.w	r2, r2, #15
   19226:	2a02      	cmp	r2, #2
   19228:	d006      	beq.n	19238 <register_events+0x48>
   1922a:	2a04      	cmp	r2, #4
   1922c:	d008      	beq.n	19240 <register_events+0x50>
   1922e:	2a01      	cmp	r2, #1
   19230:	d120      	bne.n	19274 <register_events+0x84>
		if (event->signal->signaled != 0U) {
   19232:	f8db 3010 	ldr.w	r3, [fp, #16]
   19236:	e001      	b.n	1923c <register_events+0x4c>
		if (k_sem_count_get(event->sem) > 0U) {
   19238:	f8db 3010 	ldr.w	r3, [fp, #16]
		if (event->signal->signaled != 0U) {
   1923c:	689b      	ldr	r3, [r3, #8]
   1923e:	e002      	b.n	19246 <register_events+0x56>
		if (!k_queue_is_empty(event->queue)) {
   19240:	f8db 3010 	ldr.w	r3, [fp, #16]
   19244:	681b      	ldr	r3, [r3, #0]
		if (event->signal->signaled != 0U) {
   19246:	b1ab      	cbz	r3, 19274 <register_events+0x84>
	event->state |= state;
   19248:	f8db 300c 	ldr.w	r3, [fp, #12]
	event->poller = NULL;
   1924c:	f8cb 8008 	str.w	r8, [fp, #8]
	event->state |= state;
   19250:	f3c3 3104 	ubfx	r1, r3, #12, #5
   19254:	430a      	orrs	r2, r1
   19256:	f362 3310 	bfi	r3, r2, #12, #5
   1925a:	f8cb 300c 	str.w	r3, [fp, #12]
			poller->is_polling = false;
   1925e:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   19262:	f389 8811 	msr	BASEPRI, r9
   19266:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1926a:	f10a 0a01 	add.w	sl, sl, #1
   1926e:	f10b 0b14 	add.w	fp, fp, #20
   19272:	e7c7      	b.n	19204 <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   19274:	2f00      	cmp	r7, #0
   19276:	d1f4      	bne.n	19262 <register_events+0x72>
   19278:	7823      	ldrb	r3, [r4, #0]
   1927a:	2b00      	cmp	r3, #0
   1927c:	d0f1      	beq.n	19262 <register_events+0x72>
	switch (event->type) {
   1927e:	f89b 300d 	ldrb.w	r3, [fp, #13]
   19282:	f003 030f 	and.w	r3, r3, #15
   19286:	2b02      	cmp	r3, #2
   19288:	d008      	beq.n	1929c <register_events+0xac>
   1928a:	2b04      	cmp	r3, #4
   1928c:	d006      	beq.n	1929c <register_events+0xac>
   1928e:	2b01      	cmp	r3, #1
   19290:	d10b      	bne.n	192aa <register_events+0xba>
		add_event(&event->signal->poll_events, event, poller);
   19292:	f8db 0010 	ldr.w	r0, [fp, #16]
   19296:	4622      	mov	r2, r4
   19298:	4659      	mov	r1, fp
   1929a:	e004      	b.n	192a6 <register_events+0xb6>
		add_event(&event->queue->poll_events, event, poller);
   1929c:	f8db 0010 	ldr.w	r0, [fp, #16]
   192a0:	4622      	mov	r2, r4
   192a2:	4659      	mov	r1, fp
   192a4:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   192a6:	f7ff ff6e 	bl	19186 <add_event>
	event->poller = poller;
   192aa:	f8cb 4008 	str.w	r4, [fp, #8]
			events_registered += 1;
   192ae:	3501      	adds	r5, #1
   192b0:	e7d7      	b.n	19262 <register_events+0x72>

000192b2 <signal_poll_event>:
{
   192b2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   192b6:	6884      	ldr	r4, [r0, #8]
{
   192b8:	4605      	mov	r5, r0
   192ba:	460e      	mov	r6, r1
	if (poller != NULL) {
   192bc:	b144      	cbz	r4, 192d0 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   192be:	7863      	ldrb	r3, [r4, #1]
   192c0:	2b01      	cmp	r3, #1
   192c2:	d138      	bne.n	19336 <signal_poll_event+0x84>
	if (!z_is_thread_pending(thread)) {
   192c4:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   192c8:	f013 0302 	ands.w	r3, r3, #2
   192cc:	d10a      	bne.n	192e4 <signal_poll_event+0x32>
		poller->is_polling = false;
   192ce:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   192d0:	68eb      	ldr	r3, [r5, #12]
   192d2:	f3c3 3104 	ubfx	r1, r3, #12, #5
   192d6:	430e      	orrs	r6, r1
	event->poller = NULL;
   192d8:	2000      	movs	r0, #0
	event->state |= state;
   192da:	f366 3310 	bfi	r3, r6, #12, #5
	event->poller = NULL;
   192de:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   192e0:	60eb      	str	r3, [r5, #12]
	return retcode;
   192e2:	e00d      	b.n	19300 <signal_poll_event+0x4e>
	if (z_is_thread_timeout_expired(thread)) {
   192e4:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   192e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   192ec:	f06f 0001 	mvn.w	r0, #1
   192f0:	428b      	cmp	r3, r1
   192f2:	bf08      	it	eq
   192f4:	4282      	cmpeq	r2, r0
   192f6:	d105      	bne.n	19304 <signal_poll_event+0x52>
		poller->is_polling = false;
   192f8:	2300      	movs	r3, #0
   192fa:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   192fc:	f06f 000a 	mvn.w	r0, #10
}
   19300:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   19304:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   19308:	4640      	mov	r0, r8
   1930a:	f7ff fcea 	bl	18ce2 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1930e:	2e08      	cmp	r6, #8
   19310:	bf0c      	ite	eq
   19312:	f06f 0303 	mvneq.w	r3, #3
   19316:	2300      	movne	r3, #0
   19318:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1931a:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1931e:	06db      	lsls	r3, r3, #27
   19320:	d102      	bne.n	19328 <signal_poll_event+0x76>
	if (!z_is_thread_ready(thread)) {
   19322:	f854 7c48 	ldr.w	r7, [r4, #-72]
   19326:	b10f      	cbz	r7, 1932c <signal_poll_event+0x7a>
		poller->is_polling = false;
   19328:	2300      	movs	r3, #0
   1932a:	e7d0      	b.n	192ce <signal_poll_event+0x1c>
	z_ready_thread(thread);
   1932c:	4640      	mov	r0, r8
   1932e:	f7ff fd39 	bl	18da4 <z_ready_thread>
		poller->is_polling = false;
   19332:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   19334:	e7cc      	b.n	192d0 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   19336:	2b02      	cmp	r3, #2
   19338:	d1f6      	bne.n	19328 <signal_poll_event+0x76>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   1933a:	7823      	ldrb	r3, [r4, #0]
   1933c:	2b00      	cmp	r3, #0
   1933e:	d0c7      	beq.n	192d0 <signal_poll_event+0x1e>
   19340:	f854 7c04 	ldr.w	r7, [r4, #-4]
   19344:	2f00      	cmp	r7, #0
   19346:	d0f4      	beq.n	19332 <signal_poll_event+0x80>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   19348:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   1934c:	f1a4 0914 	sub.w	r9, r4, #20
   19350:	f104 0014 	add.w	r0, r4, #20
   19354:	f7ff fe7d 	bl	19052 <z_abort_timeout>
		twork->poll_result = 0;
   19358:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   1935c:	4649      	mov	r1, r9
   1935e:	4638      	mov	r0, r7
   19360:	f7ff fe26 	bl	18fb0 <k_work_submit_to_queue>
		poller->is_polling = false;
   19364:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   19368:	e7b2      	b.n	192d0 <signal_poll_event+0x1e>

0001936a <k_poll_event_init>:
{
   1936a:	b510      	push	{r4, lr}
	event->type = type;
   1936c:	0452      	lsls	r2, r2, #17
   1936e:	0209      	lsls	r1, r1, #8
   19370:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
   19374:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
   19378:	430a      	orrs	r2, r1
   1937a:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   1937c:	2400      	movs	r4, #0
	event->type = type;
   1937e:	430a      	orrs	r2, r1
	event->obj = obj;
   19380:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   19384:	6084      	str	r4, [r0, #8]
}
   19386:	bd10      	pop	{r4, pc}

00019388 <z_handle_obj_poll_events>:
{
   19388:	4603      	mov	r3, r0
	return list->head == list;
   1938a:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1938c:	4283      	cmp	r3, r0
   1938e:	d008      	beq.n	193a2 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   19390:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   19394:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   19396:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   19398:	2300      	movs	r3, #0
	node->prev = NULL;
   1939a:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   1939e:	f7ff bf88 	b.w	192b2 <signal_poll_event>
}
   193a2:	4770      	bx	lr

000193a4 <k_free>:
	if (ptr != NULL) {
   193a4:	b120      	cbz	r0, 193b0 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   193a6:	1f01      	subs	r1, r0, #4
   193a8:	f850 0c04 	ldr.w	r0, [r0, #-4]
   193ac:	f7ff bb94 	b.w	18ad8 <k_heap_free>
}
   193b0:	4770      	bx	lr

000193b2 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   193b2:	4770      	bx	lr
