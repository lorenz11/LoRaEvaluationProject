
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	2000d390 	.word	0x2000d390
}
   4:	00005bf5 	.word	0x00005bf5
   8:	00020b51 	.word	0x00020b51
   c:	00005c25 	.word	0x00005c25
  10:	00005c25 	.word	0x00005c25
  14:	00005c25 	.word	0x00005c25
  18:	00005c25 	.word	0x00005c25
	...
  2c:	00005985 	.word	0x00005985
  30:	00005c25 	.word	0x00005c25
  34:	00000000 	.word	0x00000000
  38:	0000593d 	.word	0x0000593d
  3c:	0001f8f7 	.word	0x0001f8f7

00000040 <_irq_vector_table>:
  40:	00005bb5 00017a55 00005bb5 00005bb5     .[..Uz...[...[..
  50:	00005bb5 00005bb5 00005bb5 00005bb5     .[...[...[...[..
  60:	00005bb5 00005bb5 00005bb5 00005bb5     .[...[...[...[..
  70:	00005bb5 00005bb5 00005bb5 00005bb5     .[...[...[...[..
  80:	00005bb5 00005bb5 00005bb5 00005bb5     .[...[...[...[..
  90:	00005bb5 00005bb5 00005bb5 00005bb5     .[...[...[...[..
  a0:	00005bb5 00005bb5 00005bb5 00005bb5     .[...[...[...[..
  b0:	00005bb5 00005bb5 00005bb5 00005bb5     .[...[...[...[..
  c0:	00005bb5 00005bb5 00005bb5 00005bb5     .[...[...[...[..
  d0:	00005bb5 00005bb5 00005bb5 00005bb5     .[...[...[...[..
  e0:	00005bb5 00005bb5 00005bb5 00005bb5     .[...[...[...[..
  f0:	00005bb5 00005bb5 00005bb5 00005bb5     .[...[...[...[..

Disassembly of section text:

00000100 <__aeabi_drsub>:
     100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     104:	e002      	b.n	10c <__adddf3>
     106:	bf00      	nop

00000108 <__aeabi_dsub>:
     108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000010c <__adddf3>:
     10c:	b530      	push	{r4, r5, lr}
     10e:	ea4f 0441 	mov.w	r4, r1, lsl #1
     112:	ea4f 0543 	mov.w	r5, r3, lsl #1
     116:	ea94 0f05 	teq	r4, r5
     11a:	bf08      	it	eq
     11c:	ea90 0f02 	teqeq	r0, r2
     120:	bf1f      	itttt	ne
     122:	ea54 0c00 	orrsne.w	ip, r4, r0
     126:	ea55 0c02 	orrsne.w	ip, r5, r2
     12a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     12e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     132:	f000 80e2 	beq.w	2fa <CONFIG_BT_HCI_TX_STACK_SIZE+0x7a>
     136:	ea4f 5454 	mov.w	r4, r4, lsr #21
     13a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     13e:	bfb8      	it	lt
     140:	426d      	neglt	r5, r5
     142:	dd0c      	ble.n	15e <CONFIG_IDLE_STACK_SIZE+0x1e>
     144:	442c      	add	r4, r5
     146:	ea80 0202 	eor.w	r2, r0, r2
     14a:	ea81 0303 	eor.w	r3, r1, r3
     14e:	ea82 0000 	eor.w	r0, r2, r0
     152:	ea83 0101 	eor.w	r1, r3, r1
     156:	ea80 0202 	eor.w	r2, r0, r2
     15a:	ea81 0303 	eor.w	r3, r1, r3
     15e:	2d36      	cmp	r5, #54	; 0x36
     160:	bf88      	it	hi
     162:	bd30      	pophi	{r4, r5, pc}
     164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     168:	ea4f 3101 	mov.w	r1, r1, lsl #12
     16c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     174:	d002      	beq.n	17c <CONFIG_IDLE_STACK_SIZE+0x3c>
     176:	4240      	negs	r0, r0
     178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     17c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     180:	ea4f 3303 	mov.w	r3, r3, lsl #12
     184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     188:	d002      	beq.n	190 <CONFIG_IDLE_STACK_SIZE+0x50>
     18a:	4252      	negs	r2, r2
     18c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     190:	ea94 0f05 	teq	r4, r5
     194:	f000 80a7 	beq.w	2e6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x66>
     198:	f1a4 0401 	sub.w	r4, r4, #1
     19c:	f1d5 0e20 	rsbs	lr, r5, #32
     1a0:	db0d      	blt.n	1be <CONFIG_IDLE_STACK_SIZE+0x7e>
     1a2:	fa02 fc0e 	lsl.w	ip, r2, lr
     1a6:	fa22 f205 	lsr.w	r2, r2, r5
     1aa:	1880      	adds	r0, r0, r2
     1ac:	f141 0100 	adc.w	r1, r1, #0
     1b0:	fa03 f20e 	lsl.w	r2, r3, lr
     1b4:	1880      	adds	r0, r0, r2
     1b6:	fa43 f305 	asr.w	r3, r3, r5
     1ba:	4159      	adcs	r1, r3
     1bc:	e00e      	b.n	1dc <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x1c>
     1be:	f1a5 0520 	sub.w	r5, r5, #32
     1c2:	f10e 0e20 	add.w	lr, lr, #32
     1c6:	2a01      	cmp	r2, #1
     1c8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1cc:	bf28      	it	cs
     1ce:	f04c 0c02 	orrcs.w	ip, ip, #2
     1d2:	fa43 f305 	asr.w	r3, r3, r5
     1d6:	18c0      	adds	r0, r0, r3
     1d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1e0:	d507      	bpl.n	1f2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x32>
     1e2:	f04f 0e00 	mov.w	lr, #0
     1e6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ea:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ee:	eb6e 0101 	sbc.w	r1, lr, r1
     1f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1f6:	d31b      	bcc.n	230 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x70>
     1f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1fc:	d30c      	bcc.n	218 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x58>
     1fe:	0849      	lsrs	r1, r1, #1
     200:	ea5f 0030 	movs.w	r0, r0, rrx
     204:	ea4f 0c3c 	mov.w	ip, ip, rrx
     208:	f104 0401 	add.w	r4, r4, #1
     20c:	ea4f 5244 	mov.w	r2, r4, lsl #21
     210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     214:	f080 809a 	bcs.w	34c <CONFIG_BT_DEVICE_APPEARANCE+0xb>
     218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     21c:	bf08      	it	eq
     21e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     222:	f150 0000 	adcs.w	r0, r0, #0
     226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     22a:	ea41 0105 	orr.w	r1, r1, r5
     22e:	bd30      	pop	{r4, r5, pc}
     230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     234:	4140      	adcs	r0, r0
     236:	eb41 0101 	adc.w	r1, r1, r1
     23a:	3c01      	subs	r4, #1
     23c:	bf28      	it	cs
     23e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     242:	d2e9      	bcs.n	218 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x58>
     244:	f091 0f00 	teq	r1, #0
     248:	bf04      	itt	eq
     24a:	4601      	moveq	r1, r0
     24c:	2000      	moveq	r0, #0
     24e:	fab1 f381 	clz	r3, r1
     252:	bf08      	it	eq
     254:	3320      	addeq	r3, #32
     256:	f1a3 030b 	sub.w	r3, r3, #11
     25a:	f1b3 0220 	subs.w	r2, r3, #32
     25e:	da0c      	bge.n	27a <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0xba>
     260:	320c      	adds	r2, #12
     262:	dd08      	ble.n	276 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0xb6>
     264:	f102 0c14 	add.w	ip, r2, #20
     268:	f1c2 020c 	rsb	r2, r2, #12
     26c:	fa01 f00c 	lsl.w	r0, r1, ip
     270:	fa21 f102 	lsr.w	r1, r1, r2
     274:	e00c      	b.n	290 <CONFIG_BT_HCI_TX_STACK_SIZE+0x10>
     276:	f102 0214 	add.w	r2, r2, #20
     27a:	bfd8      	it	le
     27c:	f1c2 0c20 	rsble	ip, r2, #32
     280:	fa01 f102 	lsl.w	r1, r1, r2
     284:	fa20 fc0c 	lsr.w	ip, r0, ip
     288:	bfdc      	itt	le
     28a:	ea41 010c 	orrle.w	r1, r1, ip
     28e:	4090      	lslle	r0, r2
     290:	1ae4      	subs	r4, r4, r3
     292:	bfa2      	ittt	ge
     294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     298:	4329      	orrge	r1, r5
     29a:	bd30      	popge	{r4, r5, pc}
     29c:	ea6f 0404 	mvn.w	r4, r4
     2a0:	3c1f      	subs	r4, #31
     2a2:	da1c      	bge.n	2de <CONFIG_BT_HCI_TX_STACK_SIZE+0x5e>
     2a4:	340c      	adds	r4, #12
     2a6:	dc0e      	bgt.n	2c6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x46>
     2a8:	f104 0414 	add.w	r4, r4, #20
     2ac:	f1c4 0220 	rsb	r2, r4, #32
     2b0:	fa20 f004 	lsr.w	r0, r0, r4
     2b4:	fa01 f302 	lsl.w	r3, r1, r2
     2b8:	ea40 0003 	orr.w	r0, r0, r3
     2bc:	fa21 f304 	lsr.w	r3, r1, r4
     2c0:	ea45 0103 	orr.w	r1, r5, r3
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f1c4 040c 	rsb	r4, r4, #12
     2ca:	f1c4 0220 	rsb	r2, r4, #32
     2ce:	fa20 f002 	lsr.w	r0, r0, r2
     2d2:	fa01 f304 	lsl.w	r3, r1, r4
     2d6:	ea40 0003 	orr.w	r0, r0, r3
     2da:	4629      	mov	r1, r5
     2dc:	bd30      	pop	{r4, r5, pc}
     2de:	fa21 f004 	lsr.w	r0, r1, r4
     2e2:	4629      	mov	r1, r5
     2e4:	bd30      	pop	{r4, r5, pc}
     2e6:	f094 0f00 	teq	r4, #0
     2ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ee:	bf06      	itte	eq
     2f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2f4:	3401      	addeq	r4, #1
     2f6:	3d01      	subne	r5, #1
     2f8:	e74e      	b.n	198 <CONFIG_IDLE_STACK_SIZE+0x58>
     2fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2fe:	bf18      	it	ne
     300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     304:	d029      	beq.n	35a <CONFIG_BT_DEVICE_APPEARANCE+0x19>
     306:	ea94 0f05 	teq	r4, r5
     30a:	bf08      	it	eq
     30c:	ea90 0f02 	teqeq	r0, r2
     310:	d005      	beq.n	31e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x1e>
     312:	ea54 0c00 	orrs.w	ip, r4, r0
     316:	bf04      	itt	eq
     318:	4619      	moveq	r1, r3
     31a:	4610      	moveq	r0, r2
     31c:	bd30      	pop	{r4, r5, pc}
     31e:	ea91 0f03 	teq	r1, r3
     322:	bf1e      	ittt	ne
     324:	2100      	movne	r1, #0
     326:	2000      	movne	r0, #0
     328:	bd30      	popne	{r4, r5, pc}
     32a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     32e:	d105      	bne.n	33c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x3c>
     330:	0040      	lsls	r0, r0, #1
     332:	4149      	adcs	r1, r1
     334:	bf28      	it	cs
     336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     33a:	bd30      	pop	{r4, r5, pc}
     33c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     340:	bf3c      	itt	cc
     342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     346:	bd30      	popcc	{r4, r5, pc}
     348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     34c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     354:	f04f 0000 	mov.w	r0, #0
     358:	bd30      	pop	{r4, r5, pc}
     35a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     35e:	bf1a      	itte	ne
     360:	4619      	movne	r1, r3
     362:	4610      	movne	r0, r2
     364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     368:	bf1c      	itt	ne
     36a:	460b      	movne	r3, r1
     36c:	4602      	movne	r2, r0
     36e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     372:	bf06      	itte	eq
     374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     378:	ea91 0f03 	teqeq	r1, r3
     37c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     380:	bd30      	pop	{r4, r5, pc}
     382:	bf00      	nop

00000384 <__aeabi_ui2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f04f 0500 	mov.w	r5, #0
     39c:	f04f 0100 	mov.w	r1, #0
     3a0:	e750      	b.n	244 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x84>
     3a2:	bf00      	nop

000003a4 <__aeabi_i2d>:
     3a4:	f090 0f00 	teq	r0, #0
     3a8:	bf04      	itt	eq
     3aa:	2100      	moveq	r1, #0
     3ac:	4770      	bxeq	lr
     3ae:	b530      	push	{r4, r5, lr}
     3b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     3bc:	bf48      	it	mi
     3be:	4240      	negmi	r0, r0
     3c0:	f04f 0100 	mov.w	r1, #0
     3c4:	e73e      	b.n	244 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x84>
     3c6:	bf00      	nop

000003c8 <__aeabi_f2d>:
     3c8:	0042      	lsls	r2, r0, #1
     3ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ce:	ea4f 0131 	mov.w	r1, r1, rrx
     3d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3d6:	bf1f      	itttt	ne
     3d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3e4:	4770      	bxne	lr
     3e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ea:	bf08      	it	eq
     3ec:	4770      	bxeq	lr
     3ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3f2:	bf04      	itt	eq
     3f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3f8:	4770      	bxeq	lr
     3fa:	b530      	push	{r4, r5, lr}
     3fc:	f44f 7460 	mov.w	r4, #896	; 0x380
     400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     408:	e71c      	b.n	244 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x84>
     40a:	bf00      	nop

0000040c <__aeabi_ul2d>:
     40c:	ea50 0201 	orrs.w	r2, r0, r1
     410:	bf08      	it	eq
     412:	4770      	bxeq	lr
     414:	b530      	push	{r4, r5, lr}
     416:	f04f 0500 	mov.w	r5, #0
     41a:	e00a      	b.n	432 <__aeabi_l2d+0x16>

0000041c <__aeabi_l2d>:
     41c:	ea50 0201 	orrs.w	r2, r0, r1
     420:	bf08      	it	eq
     422:	4770      	bxeq	lr
     424:	b530      	push	{r4, r5, lr}
     426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     42a:	d502      	bpl.n	432 <__aeabi_l2d+0x16>
     42c:	4240      	negs	r0, r0
     42e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     432:	f44f 6480 	mov.w	r4, #1024	; 0x400
     436:	f104 0432 	add.w	r4, r4, #50	; 0x32
     43a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     43e:	f43f aed8 	beq.w	1f2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x32>
     442:	f04f 0203 	mov.w	r2, #3
     446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     44a:	bf18      	it	ne
     44c:	3203      	addne	r2, #3
     44e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     452:	bf18      	it	ne
     454:	3203      	addne	r2, #3
     456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     45a:	f1c2 0320 	rsb	r3, r2, #32
     45e:	fa00 fc03 	lsl.w	ip, r0, r3
     462:	fa20 f002 	lsr.w	r0, r0, r2
     466:	fa01 fe03 	lsl.w	lr, r1, r3
     46a:	ea40 000e 	orr.w	r0, r0, lr
     46e:	fa21 f102 	lsr.w	r1, r1, r2
     472:	4414      	add	r4, r2
     474:	e6bd      	b.n	1f2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x32>
     476:	bf00      	nop

00000478 <__aeabi_dmul>:
     478:	b570      	push	{r4, r5, r6, lr}
     47a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     47e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     482:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     486:	bf1d      	ittte	ne
     488:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     48c:	ea94 0f0c 	teqne	r4, ip
     490:	ea95 0f0c 	teqne	r5, ip
     494:	f000 f8de 	bleq	654 <CONFIG_BT_COMPANY_ID+0x63>
     498:	442c      	add	r4, r5
     49a:	ea81 0603 	eor.w	r6, r1, r3
     49e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     4a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     4a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     4aa:	bf18      	it	ne
     4ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     4b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     4b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     4b8:	d038      	beq.n	52c <__aeabi_dmul+0xb4>
     4ba:	fba0 ce02 	umull	ip, lr, r0, r2
     4be:	f04f 0500 	mov.w	r5, #0
     4c2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4ca:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ce:	f04f 0600 	mov.w	r6, #0
     4d2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4d6:	f09c 0f00 	teq	ip, #0
     4da:	bf18      	it	ne
     4dc:	f04e 0e01 	orrne.w	lr, lr, #1
     4e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4ec:	d204      	bcs.n	4f8 <__aeabi_dmul+0x80>
     4ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4f2:	416d      	adcs	r5, r5
     4f4:	eb46 0606 	adc.w	r6, r6, r6
     4f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     500:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     504:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     508:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     50c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     510:	bf88      	it	hi
     512:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     516:	d81e      	bhi.n	556 <__aeabi_dmul+0xde>
     518:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     51c:	bf08      	it	eq
     51e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     522:	f150 0000 	adcs.w	r0, r0, #0
     526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     52a:	bd70      	pop	{r4, r5, r6, pc}
     52c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     530:	ea46 0101 	orr.w	r1, r6, r1
     534:	ea40 0002 	orr.w	r0, r0, r2
     538:	ea81 0103 	eor.w	r1, r1, r3
     53c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     540:	bfc2      	ittt	gt
     542:	ebd4 050c 	rsbsgt	r5, r4, ip
     546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     54a:	bd70      	popgt	{r4, r5, r6, pc}
     54c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     550:	f04f 0e00 	mov.w	lr, #0
     554:	3c01      	subs	r4, #1
     556:	f300 80ab 	bgt.w	6b0 <CONFIG_BT_COMPANY_ID+0xbf>
     55a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     55e:	bfde      	ittt	le
     560:	2000      	movle	r0, #0
     562:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     566:	bd70      	pople	{r4, r5, r6, pc}
     568:	f1c4 0400 	rsb	r4, r4, #0
     56c:	3c20      	subs	r4, #32
     56e:	da35      	bge.n	5dc <CONFIG_BT_CTLR_XTAL_THRESHOLD>
     570:	340c      	adds	r4, #12
     572:	dc1b      	bgt.n	5ac <__aeabi_dmul+0x134>
     574:	f104 0414 	add.w	r4, r4, #20
     578:	f1c4 0520 	rsb	r5, r4, #32
     57c:	fa00 f305 	lsl.w	r3, r0, r5
     580:	fa20 f004 	lsr.w	r0, r0, r4
     584:	fa01 f205 	lsl.w	r2, r1, r5
     588:	ea40 0002 	orr.w	r0, r0, r2
     58c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     590:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     598:	fa21 f604 	lsr.w	r6, r1, r4
     59c:	eb42 0106 	adc.w	r1, r2, r6
     5a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5a4:	bf08      	it	eq
     5a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5aa:	bd70      	pop	{r4, r5, r6, pc}
     5ac:	f1c4 040c 	rsb	r4, r4, #12
     5b0:	f1c4 0520 	rsb	r5, r4, #32
     5b4:	fa00 f304 	lsl.w	r3, r0, r4
     5b8:	fa20 f005 	lsr.w	r0, r0, r5
     5bc:	fa01 f204 	lsl.w	r2, r1, r4
     5c0:	ea40 0002 	orr.w	r0, r0, r2
     5c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5cc:	f141 0100 	adc.w	r1, r1, #0
     5d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5d4:	bf08      	it	eq
     5d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5da:	bd70      	pop	{r4, r5, r6, pc}
     5dc:	f1c4 0520 	rsb	r5, r4, #32
     5e0:	fa00 f205 	lsl.w	r2, r0, r5
     5e4:	ea4e 0e02 	orr.w	lr, lr, r2
     5e8:	fa20 f304 	lsr.w	r3, r0, r4
     5ec:	fa01 f205 	lsl.w	r2, r1, r5
     5f0:	ea43 0302 	orr.w	r3, r3, r2
     5f4:	fa21 f004 	lsr.w	r0, r1, r4
     5f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5fc:	fa21 f204 	lsr.w	r2, r1, r4
     600:	ea20 0002 	bic.w	r0, r0, r2
     604:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     60c:	bf08      	it	eq
     60e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     612:	bd70      	pop	{r4, r5, r6, pc}
     614:	f094 0f00 	teq	r4, #0
     618:	d10f      	bne.n	63a <CONFIG_BT_COMPANY_ID+0x49>
     61a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     61e:	0040      	lsls	r0, r0, #1
     620:	eb41 0101 	adc.w	r1, r1, r1
     624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3c01      	subeq	r4, #1
     62c:	d0f7      	beq.n	61e <CONFIG_BT_COMPANY_ID+0x2d>
     62e:	ea41 0106 	orr.w	r1, r1, r6
     632:	f095 0f00 	teq	r5, #0
     636:	bf18      	it	ne
     638:	4770      	bxne	lr
     63a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     63e:	0052      	lsls	r2, r2, #1
     640:	eb43 0303 	adc.w	r3, r3, r3
     644:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     648:	bf08      	it	eq
     64a:	3d01      	subeq	r5, #1
     64c:	d0f7      	beq.n	63e <CONFIG_BT_COMPANY_ID+0x4d>
     64e:	ea43 0306 	orr.w	r3, r3, r6
     652:	4770      	bx	lr
     654:	ea94 0f0c 	teq	r4, ip
     658:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     65c:	bf18      	it	ne
     65e:	ea95 0f0c 	teqne	r5, ip
     662:	d00c      	beq.n	67e <CONFIG_BT_COMPANY_ID+0x8d>
     664:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     668:	bf18      	it	ne
     66a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66e:	d1d1      	bne.n	614 <CONFIG_BT_COMPANY_ID+0x23>
     670:	ea81 0103 	eor.w	r1, r1, r3
     674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     678:	f04f 0000 	mov.w	r0, #0
     67c:	bd70      	pop	{r4, r5, r6, pc}
     67e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     682:	bf06      	itte	eq
     684:	4610      	moveq	r0, r2
     686:	4619      	moveq	r1, r3
     688:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     68c:	d019      	beq.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     68e:	ea94 0f0c 	teq	r4, ip
     692:	d102      	bne.n	69a <CONFIG_BT_COMPANY_ID+0xa9>
     694:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     698:	d113      	bne.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     69a:	ea95 0f0c 	teq	r5, ip
     69e:	d105      	bne.n	6ac <CONFIG_BT_COMPANY_ID+0xbb>
     6a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     6a4:	bf1c      	itt	ne
     6a6:	4610      	movne	r0, r2
     6a8:	4619      	movne	r1, r3
     6aa:	d10a      	bne.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     6ac:	ea81 0103 	eor.w	r1, r1, r3
     6b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     6bc:	f04f 0000 	mov.w	r0, #0
     6c0:	bd70      	pop	{r4, r5, r6, pc}
     6c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6ca:	bd70      	pop	{r4, r5, r6, pc}

000006cc <__aeabi_ddiv>:
     6cc:	b570      	push	{r4, r5, r6, lr}
     6ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6da:	bf1d      	ittte	ne
     6dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6e0:	ea94 0f0c 	teqne	r4, ip
     6e4:	ea95 0f0c 	teqne	r5, ip
     6e8:	f000 f8a7 	bleq	83a <CONFIG_ISR_STACK_SIZE+0x3a>
     6ec:	eba4 0405 	sub.w	r4, r4, r5
     6f0:	ea81 0e03 	eor.w	lr, r1, r3
     6f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6fc:	f000 8088 	beq.w	810 <CONFIG_ISR_STACK_SIZE+0x10>
     700:	ea4f 3303 	mov.w	r3, r3, lsl #12
     704:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     708:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     70c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     710:	ea4f 2202 	mov.w	r2, r2, lsl #8
     714:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     718:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     71c:	ea4f 2600 	mov.w	r6, r0, lsl #8
     720:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     724:	429d      	cmp	r5, r3
     726:	bf08      	it	eq
     728:	4296      	cmpeq	r6, r2
     72a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     72e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     732:	d202      	bcs.n	73a <__aeabi_ddiv+0x6e>
     734:	085b      	lsrs	r3, r3, #1
     736:	ea4f 0232 	mov.w	r2, r2, rrx
     73a:	1ab6      	subs	r6, r6, r2
     73c:	eb65 0503 	sbc.w	r5, r5, r3
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     74a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     74e:	ebb6 0e02 	subs.w	lr, r6, r2
     752:	eb75 0e03 	sbcs.w	lr, r5, r3
     756:	bf22      	ittt	cs
     758:	1ab6      	subcs	r6, r6, r2
     75a:	4675      	movcs	r5, lr
     75c:	ea40 000c 	orrcs.w	r0, r0, ip
     760:	085b      	lsrs	r3, r3, #1
     762:	ea4f 0232 	mov.w	r2, r2, rrx
     766:	ebb6 0e02 	subs.w	lr, r6, r2
     76a:	eb75 0e03 	sbcs.w	lr, r5, r3
     76e:	bf22      	ittt	cs
     770:	1ab6      	subcs	r6, r6, r2
     772:	4675      	movcs	r5, lr
     774:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     778:	085b      	lsrs	r3, r3, #1
     77a:	ea4f 0232 	mov.w	r2, r2, rrx
     77e:	ebb6 0e02 	subs.w	lr, r6, r2
     782:	eb75 0e03 	sbcs.w	lr, r5, r3
     786:	bf22      	ittt	cs
     788:	1ab6      	subcs	r6, r6, r2
     78a:	4675      	movcs	r5, lr
     78c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     790:	085b      	lsrs	r3, r3, #1
     792:	ea4f 0232 	mov.w	r2, r2, rrx
     796:	ebb6 0e02 	subs.w	lr, r6, r2
     79a:	eb75 0e03 	sbcs.w	lr, r5, r3
     79e:	bf22      	ittt	cs
     7a0:	1ab6      	subcs	r6, r6, r2
     7a2:	4675      	movcs	r5, lr
     7a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     7a8:	ea55 0e06 	orrs.w	lr, r5, r6
     7ac:	d018      	beq.n	7e0 <__aeabi_ddiv+0x114>
     7ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
     7b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     7b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
     7ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     7be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7ca:	d1c0      	bne.n	74e <__aeabi_ddiv+0x82>
     7cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7d0:	d10b      	bne.n	7ea <__aeabi_ddiv+0x11e>
     7d2:	ea41 0100 	orr.w	r1, r1, r0
     7d6:	f04f 0000 	mov.w	r0, #0
     7da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7de:	e7b6      	b.n	74e <__aeabi_ddiv+0x82>
     7e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7e4:	bf04      	itt	eq
     7e6:	4301      	orreq	r1, r0
     7e8:	2000      	moveq	r0, #0
     7ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ee:	bf88      	it	hi
     7f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7f4:	f63f aeaf 	bhi.w	556 <__aeabi_dmul+0xde>
     7f8:	ebb5 0c03 	subs.w	ip, r5, r3
     7fc:	bf04      	itt	eq
     7fe:	ebb6 0c02 	subseq.w	ip, r6, r2
     802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     806:	f150 0000 	adcs.w	r0, r0, #0
     80a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     80e:	bd70      	pop	{r4, r5, r6, pc}
     810:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     814:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     818:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     81c:	bfc2      	ittt	gt
     81e:	ebd4 050c 	rsbsgt	r5, r4, ip
     822:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     826:	bd70      	popgt	{r4, r5, r6, pc}
     828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     82c:	f04f 0e00 	mov.w	lr, #0
     830:	3c01      	subs	r4, #1
     832:	e690      	b.n	556 <__aeabi_dmul+0xde>
     834:	ea45 0e06 	orr.w	lr, r5, r6
     838:	e68d      	b.n	556 <__aeabi_dmul+0xde>
     83a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     83e:	ea94 0f0c 	teq	r4, ip
     842:	bf08      	it	eq
     844:	ea95 0f0c 	teqeq	r5, ip
     848:	f43f af3b 	beq.w	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     84c:	ea94 0f0c 	teq	r4, ip
     850:	d10a      	bne.n	868 <CONFIG_ISR_STACK_SIZE+0x68>
     852:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     856:	f47f af34 	bne.w	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     85a:	ea95 0f0c 	teq	r5, ip
     85e:	f47f af25 	bne.w	6ac <CONFIG_BT_COMPANY_ID+0xbb>
     862:	4610      	mov	r0, r2
     864:	4619      	mov	r1, r3
     866:	e72c      	b.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     868:	ea95 0f0c 	teq	r5, ip
     86c:	d106      	bne.n	87c <CONFIG_ISR_STACK_SIZE+0x7c>
     86e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     872:	f43f aefd 	beq.w	670 <CONFIG_BT_COMPANY_ID+0x7f>
     876:	4610      	mov	r0, r2
     878:	4619      	mov	r1, r3
     87a:	e722      	b.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     87c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     880:	bf18      	it	ne
     882:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     886:	f47f aec5 	bne.w	614 <CONFIG_BT_COMPANY_ID+0x23>
     88a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     88e:	f47f af0d 	bne.w	6ac <CONFIG_BT_COMPANY_ID+0xbb>
     892:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     896:	f47f aeeb 	bne.w	670 <CONFIG_BT_COMPANY_ID+0x7f>
     89a:	e712      	b.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>

0000089c <__gedf2>:
     89c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
     8a0:	e006      	b.n	8b0 <__cmpdf2+0x4>
     8a2:	bf00      	nop

000008a4 <__ledf2>:
     8a4:	f04f 0c01 	mov.w	ip, #1
     8a8:	e002      	b.n	8b0 <__cmpdf2+0x4>
     8aa:	bf00      	nop

000008ac <__cmpdf2>:
     8ac:	f04f 0c01 	mov.w	ip, #1
     8b0:	f84d cd04 	str.w	ip, [sp, #-4]!
     8b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     8b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     8bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     8c0:	bf18      	it	ne
     8c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     8c6:	d01b      	beq.n	900 <__cmpdf2+0x54>
     8c8:	b001      	add	sp, #4
     8ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     8ce:	bf0c      	ite	eq
     8d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     8d4:	ea91 0f03 	teqne	r1, r3
     8d8:	bf02      	ittt	eq
     8da:	ea90 0f02 	teqeq	r0, r2
     8de:	2000      	moveq	r0, #0
     8e0:	4770      	bxeq	lr
     8e2:	f110 0f00 	cmn.w	r0, #0
     8e6:	ea91 0f03 	teq	r1, r3
     8ea:	bf58      	it	pl
     8ec:	4299      	cmppl	r1, r3
     8ee:	bf08      	it	eq
     8f0:	4290      	cmpeq	r0, r2
     8f2:	bf2c      	ite	cs
     8f4:	17d8      	asrcs	r0, r3, #31
     8f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     8fa:	f040 0001 	orr.w	r0, r0, #1
     8fe:	4770      	bx	lr
     900:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     908:	d102      	bne.n	910 <__cmpdf2+0x64>
     90a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     90e:	d107      	bne.n	920 <__cmpdf2+0x74>
     910:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     918:	d1d6      	bne.n	8c8 <__cmpdf2+0x1c>
     91a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     91e:	d0d3      	beq.n	8c8 <__cmpdf2+0x1c>
     920:	f85d 0b04 	ldr.w	r0, [sp], #4
     924:	4770      	bx	lr
     926:	bf00      	nop

00000928 <__aeabi_cdrcmple>:
     928:	4684      	mov	ip, r0
     92a:	4610      	mov	r0, r2
     92c:	4662      	mov	r2, ip
     92e:	468c      	mov	ip, r1
     930:	4619      	mov	r1, r3
     932:	4663      	mov	r3, ip
     934:	e000      	b.n	938 <__aeabi_cdcmpeq>
     936:	bf00      	nop

00000938 <__aeabi_cdcmpeq>:
     938:	b501      	push	{r0, lr}
     93a:	f7ff ffb7 	bl	8ac <__cmpdf2>
     93e:	2800      	cmp	r0, #0
     940:	bf48      	it	mi
     942:	f110 0f00 	cmnmi.w	r0, #0
     946:	bd01      	pop	{r0, pc}

00000948 <__aeabi_dcmpeq>:
     948:	f84d ed08 	str.w	lr, [sp, #-8]!
     94c:	f7ff fff4 	bl	938 <__aeabi_cdcmpeq>
     950:	bf0c      	ite	eq
     952:	2001      	moveq	r0, #1
     954:	2000      	movne	r0, #0
     956:	f85d fb08 	ldr.w	pc, [sp], #8
     95a:	bf00      	nop

0000095c <__aeabi_dcmplt>:
     95c:	f84d ed08 	str.w	lr, [sp, #-8]!
     960:	f7ff ffea 	bl	938 <__aeabi_cdcmpeq>
     964:	bf34      	ite	cc
     966:	2001      	movcc	r0, #1
     968:	2000      	movcs	r0, #0
     96a:	f85d fb08 	ldr.w	pc, [sp], #8
     96e:	bf00      	nop

00000970 <__aeabi_dcmple>:
     970:	f84d ed08 	str.w	lr, [sp, #-8]!
     974:	f7ff ffe0 	bl	938 <__aeabi_cdcmpeq>
     978:	bf94      	ite	ls
     97a:	2001      	movls	r0, #1
     97c:	2000      	movhi	r0, #0
     97e:	f85d fb08 	ldr.w	pc, [sp], #8
     982:	bf00      	nop

00000984 <__aeabi_dcmpge>:
     984:	f84d ed08 	str.w	lr, [sp, #-8]!
     988:	f7ff ffce 	bl	928 <__aeabi_cdrcmple>
     98c:	bf94      	ite	ls
     98e:	2001      	movls	r0, #1
     990:	2000      	movhi	r0, #0
     992:	f85d fb08 	ldr.w	pc, [sp], #8
     996:	bf00      	nop

00000998 <__aeabi_dcmpgt>:
     998:	f84d ed08 	str.w	lr, [sp, #-8]!
     99c:	f7ff ffc4 	bl	928 <__aeabi_cdrcmple>
     9a0:	bf34      	ite	cc
     9a2:	2001      	movcc	r0, #1
     9a4:	2000      	movcs	r0, #0
     9a6:	f85d fb08 	ldr.w	pc, [sp], #8
     9aa:	bf00      	nop

000009ac <__aeabi_d2iz>:
     9ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
     9b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     9b4:	d215      	bcs.n	9e2 <__aeabi_d2iz+0x36>
     9b6:	d511      	bpl.n	9dc <__aeabi_d2iz+0x30>
     9b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     9bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     9c0:	d912      	bls.n	9e8 <__aeabi_d2iz+0x3c>
     9c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     9c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     9ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     9ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     9d2:	fa23 f002 	lsr.w	r0, r3, r2
     9d6:	bf18      	it	ne
     9d8:	4240      	negne	r0, r0
     9da:	4770      	bx	lr
     9dc:	f04f 0000 	mov.w	r0, #0
     9e0:	4770      	bx	lr
     9e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     9e6:	d105      	bne.n	9f4 <__aeabi_d2iz+0x48>
     9e8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     9ec:	bf08      	it	eq
     9ee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     9f2:	4770      	bx	lr
     9f4:	f04f 0000 	mov.w	r0, #0
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <__aeabi_d2uiz>:
     9fc:	004a      	lsls	r2, r1, #1
     9fe:	d211      	bcs.n	a24 <__aeabi_d2uiz+0x28>
     a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     a04:	d211      	bcs.n	a2a <__aeabi_d2uiz+0x2e>
     a06:	d50d      	bpl.n	a24 <__aeabi_d2uiz+0x28>
     a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     a10:	d40e      	bmi.n	a30 <__aeabi_d2uiz+0x34>
     a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     a1e:	fa23 f002 	lsr.w	r0, r3, r2
     a22:	4770      	bx	lr
     a24:	f04f 0000 	mov.w	r0, #0
     a28:	4770      	bx	lr
     a2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     a2e:	d102      	bne.n	a36 <__aeabi_d2uiz+0x3a>
     a30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     a34:	4770      	bx	lr
     a36:	f04f 0000 	mov.w	r0, #0
     a3a:	4770      	bx	lr

00000a3c <__aeabi_uldivmod>:
     a3c:	b953      	cbnz	r3, a54 <__aeabi_uldivmod+0x18>
     a3e:	b94a      	cbnz	r2, a54 <__aeabi_uldivmod+0x18>
     a40:	2900      	cmp	r1, #0
     a42:	bf08      	it	eq
     a44:	2800      	cmpeq	r0, #0
     a46:	bf1c      	itt	ne
     a48:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     a4c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     a50:	f000 b96e 	b.w	d30 <__aeabi_idiv0>
     a54:	f1ad 0c08 	sub.w	ip, sp, #8
     a58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     a5c:	f000 f806 	bl	a6c <__udivmoddi4>
     a60:	f8dd e004 	ldr.w	lr, [sp, #4]
     a64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     a68:	b004      	add	sp, #16
     a6a:	4770      	bx	lr

00000a6c <__udivmoddi4>:
     a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     a70:	9d08      	ldr	r5, [sp, #32]
     a72:	460e      	mov	r6, r1
     a74:	4604      	mov	r4, r0
     a76:	468c      	mov	ip, r1
     a78:	2b00      	cmp	r3, #0
     a7a:	f040 8081 	bne.w	b80 <__udivmoddi4+0x114>
     a7e:	428a      	cmp	r2, r1
     a80:	4617      	mov	r7, r2
     a82:	d945      	bls.n	b10 <__udivmoddi4+0xa4>
     a84:	fab2 f282 	clz	r2, r2
     a88:	b14a      	cbz	r2, a9e <__udivmoddi4+0x32>
     a8a:	f1c2 0120 	rsb	r1, r2, #32
     a8e:	fa06 f302 	lsl.w	r3, r6, r2
     a92:	fa20 f101 	lsr.w	r1, r0, r1
     a96:	4097      	lsls	r7, r2
     a98:	ea41 0c03 	orr.w	ip, r1, r3
     a9c:	4094      	lsls	r4, r2
     a9e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     aa2:	0c23      	lsrs	r3, r4, #16
     aa4:	fbbc f6fe 	udiv	r6, ip, lr
     aa8:	b2b9      	uxth	r1, r7
     aaa:	fb0e cc16 	mls	ip, lr, r6, ip
     aae:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     ab2:	fb06 f001 	mul.w	r0, r6, r1
     ab6:	4298      	cmp	r0, r3
     ab8:	d909      	bls.n	ace <__udivmoddi4+0x62>
     aba:	18fb      	adds	r3, r7, r3
     abc:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
     ac0:	f080 8115 	bcs.w	cee <__udivmoddi4+0x282>
     ac4:	4298      	cmp	r0, r3
     ac6:	f240 8112 	bls.w	cee <__udivmoddi4+0x282>
     aca:	3e02      	subs	r6, #2
     acc:	443b      	add	r3, r7
     ace:	1a1b      	subs	r3, r3, r0
     ad0:	b2a4      	uxth	r4, r4
     ad2:	fbb3 f0fe 	udiv	r0, r3, lr
     ad6:	fb0e 3310 	mls	r3, lr, r0, r3
     ada:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     ade:	fb00 f101 	mul.w	r1, r0, r1
     ae2:	42a1      	cmp	r1, r4
     ae4:	d909      	bls.n	afa <__udivmoddi4+0x8e>
     ae6:	193c      	adds	r4, r7, r4
     ae8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     aec:	f080 8101 	bcs.w	cf2 <__udivmoddi4+0x286>
     af0:	42a1      	cmp	r1, r4
     af2:	f240 80fe 	bls.w	cf2 <__udivmoddi4+0x286>
     af6:	3802      	subs	r0, #2
     af8:	443c      	add	r4, r7
     afa:	1a64      	subs	r4, r4, r1
     afc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     b00:	2100      	movs	r1, #0
     b02:	b11d      	cbz	r5, b0c <__udivmoddi4+0xa0>
     b04:	40d4      	lsrs	r4, r2
     b06:	2300      	movs	r3, #0
     b08:	e9c5 4300 	strd	r4, r3, [r5]
     b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     b10:	b902      	cbnz	r2, b14 <__udivmoddi4+0xa8>
     b12:	deff      	udf	#255	; 0xff
     b14:	fab2 f282 	clz	r2, r2
     b18:	2a00      	cmp	r2, #0
     b1a:	d14f      	bne.n	bbc <__udivmoddi4+0x150>
     b1c:	1bcb      	subs	r3, r1, r7
     b1e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     b22:	fa1f f887 	uxth.w	r8, r7
     b26:	2101      	movs	r1, #1
     b28:	fbb3 fcfe 	udiv	ip, r3, lr
     b2c:	0c26      	lsrs	r6, r4, #16
     b2e:	fb0e 331c 	mls	r3, lr, ip, r3
     b32:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
     b36:	fb08 f30c 	mul.w	r3, r8, ip
     b3a:	42b3      	cmp	r3, r6
     b3c:	d907      	bls.n	b4e <__udivmoddi4+0xe2>
     b3e:	19be      	adds	r6, r7, r6
     b40:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     b44:	d202      	bcs.n	b4c <__udivmoddi4+0xe0>
     b46:	42b3      	cmp	r3, r6
     b48:	f200 80eb 	bhi.w	d22 <__udivmoddi4+0x2b6>
     b4c:	4684      	mov	ip, r0
     b4e:	1af6      	subs	r6, r6, r3
     b50:	b2a3      	uxth	r3, r4
     b52:	fbb6 f0fe 	udiv	r0, r6, lr
     b56:	fb0e 6610 	mls	r6, lr, r0, r6
     b5a:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
     b5e:	fb08 f800 	mul.w	r8, r8, r0
     b62:	45a0      	cmp	r8, r4
     b64:	d907      	bls.n	b76 <__udivmoddi4+0x10a>
     b66:	193c      	adds	r4, r7, r4
     b68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     b6c:	d202      	bcs.n	b74 <__udivmoddi4+0x108>
     b6e:	45a0      	cmp	r8, r4
     b70:	f200 80d2 	bhi.w	d18 <__udivmoddi4+0x2ac>
     b74:	4618      	mov	r0, r3
     b76:	eba4 0408 	sub.w	r4, r4, r8
     b7a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     b7e:	e7c0      	b.n	b02 <__udivmoddi4+0x96>
     b80:	428b      	cmp	r3, r1
     b82:	d908      	bls.n	b96 <__udivmoddi4+0x12a>
     b84:	2d00      	cmp	r5, #0
     b86:	f000 80af 	beq.w	ce8 <__udivmoddi4+0x27c>
     b8a:	2100      	movs	r1, #0
     b8c:	e9c5 0600 	strd	r0, r6, [r5]
     b90:	4608      	mov	r0, r1
     b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     b96:	fab3 f183 	clz	r1, r3
     b9a:	2900      	cmp	r1, #0
     b9c:	d149      	bne.n	c32 <__udivmoddi4+0x1c6>
     b9e:	42b3      	cmp	r3, r6
     ba0:	d302      	bcc.n	ba8 <__udivmoddi4+0x13c>
     ba2:	4282      	cmp	r2, r0
     ba4:	f200 80bb 	bhi.w	d1e <__udivmoddi4+0x2b2>
     ba8:	1a84      	subs	r4, r0, r2
     baa:	eb66 0303 	sbc.w	r3, r6, r3
     bae:	2001      	movs	r0, #1
     bb0:	469c      	mov	ip, r3
     bb2:	2d00      	cmp	r5, #0
     bb4:	d0aa      	beq.n	b0c <__udivmoddi4+0xa0>
     bb6:	e9c5 4c00 	strd	r4, ip, [r5]
     bba:	e7a7      	b.n	b0c <__udivmoddi4+0xa0>
     bbc:	f1c2 0320 	rsb	r3, r2, #32
     bc0:	4097      	lsls	r7, r2
     bc2:	40d8      	lsrs	r0, r3
     bc4:	4091      	lsls	r1, r2
     bc6:	40de      	lsrs	r6, r3
     bc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     bcc:	4308      	orrs	r0, r1
     bce:	ea4f 4c10 	mov.w	ip, r0, lsr #16
     bd2:	fbb6 f1fe 	udiv	r1, r6, lr
     bd6:	fa1f f887 	uxth.w	r8, r7
     bda:	fb0e 6611 	mls	r6, lr, r1, r6
     bde:	ea4c 4606 	orr.w	r6, ip, r6, lsl #16
     be2:	fb01 f308 	mul.w	r3, r1, r8
     be6:	42b3      	cmp	r3, r6
     be8:	fa04 f402 	lsl.w	r4, r4, r2
     bec:	d909      	bls.n	c02 <__udivmoddi4+0x196>
     bee:	19be      	adds	r6, r7, r6
     bf0:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
     bf4:	f080 808e 	bcs.w	d14 <__udivmoddi4+0x2a8>
     bf8:	42b3      	cmp	r3, r6
     bfa:	f240 808b 	bls.w	d14 <__udivmoddi4+0x2a8>
     bfe:	3902      	subs	r1, #2
     c00:	443e      	add	r6, r7
     c02:	1af3      	subs	r3, r6, r3
     c04:	b286      	uxth	r6, r0
     c06:	fbb3 f0fe 	udiv	r0, r3, lr
     c0a:	fb0e 3310 	mls	r3, lr, r0, r3
     c0e:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
     c12:	fb00 f308 	mul.w	r3, r0, r8
     c16:	42b3      	cmp	r3, r6
     c18:	d907      	bls.n	c2a <__udivmoddi4+0x1be>
     c1a:	19be      	adds	r6, r7, r6
     c1c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     c20:	d274      	bcs.n	d0c <__udivmoddi4+0x2a0>
     c22:	42b3      	cmp	r3, r6
     c24:	d972      	bls.n	d0c <__udivmoddi4+0x2a0>
     c26:	3802      	subs	r0, #2
     c28:	443e      	add	r6, r7
     c2a:	1af3      	subs	r3, r6, r3
     c2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     c30:	e77a      	b.n	b28 <__udivmoddi4+0xbc>
     c32:	f1c1 0720 	rsb	r7, r1, #32
     c36:	fa03 f401 	lsl.w	r4, r3, r1
     c3a:	fa22 f307 	lsr.w	r3, r2, r7
     c3e:	431c      	orrs	r4, r3
     c40:	fa20 f907 	lsr.w	r9, r0, r7
     c44:	fa06 f301 	lsl.w	r3, r6, r1
     c48:	ea4f 4c14 	mov.w	ip, r4, lsr #16
     c4c:	40fe      	lsrs	r6, r7
     c4e:	ea49 0903 	orr.w	r9, r9, r3
     c52:	ea4f 4319 	mov.w	r3, r9, lsr #16
     c56:	fbb6 fefc 	udiv	lr, r6, ip
     c5a:	fa1f f884 	uxth.w	r8, r4
     c5e:	fb0c 661e 	mls	r6, ip, lr, r6
     c62:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
     c66:	fb0e fa08 	mul.w	sl, lr, r8
     c6a:	45b2      	cmp	sl, r6
     c6c:	fa02 f201 	lsl.w	r2, r2, r1
     c70:	fa00 f301 	lsl.w	r3, r0, r1
     c74:	d908      	bls.n	c88 <__udivmoddi4+0x21c>
     c76:	19a6      	adds	r6, r4, r6
     c78:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
     c7c:	d248      	bcs.n	d10 <__udivmoddi4+0x2a4>
     c7e:	45b2      	cmp	sl, r6
     c80:	d946      	bls.n	d10 <__udivmoddi4+0x2a4>
     c82:	f1ae 0e02 	sub.w	lr, lr, #2
     c86:	4426      	add	r6, r4
     c88:	eba6 060a 	sub.w	r6, r6, sl
     c8c:	fa1f f989 	uxth.w	r9, r9
     c90:	fbb6 f0fc 	udiv	r0, r6, ip
     c94:	fb0c 6610 	mls	r6, ip, r0, r6
     c98:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
     c9c:	fb00 f808 	mul.w	r8, r0, r8
     ca0:	45b0      	cmp	r8, r6
     ca2:	d907      	bls.n	cb4 <__udivmoddi4+0x248>
     ca4:	19a6      	adds	r6, r4, r6
     ca6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     caa:	d22d      	bcs.n	d08 <__udivmoddi4+0x29c>
     cac:	45b0      	cmp	r8, r6
     cae:	d92b      	bls.n	d08 <__udivmoddi4+0x29c>
     cb0:	3802      	subs	r0, #2
     cb2:	4426      	add	r6, r4
     cb4:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     cb8:	eba6 0608 	sub.w	r6, r6, r8
     cbc:	fba0 8902 	umull	r8, r9, r0, r2
     cc0:	454e      	cmp	r6, r9
     cc2:	46c4      	mov	ip, r8
     cc4:	46ce      	mov	lr, r9
     cc6:	d318      	bcc.n	cfa <__udivmoddi4+0x28e>
     cc8:	d015      	beq.n	cf6 <__udivmoddi4+0x28a>
     cca:	b375      	cbz	r5, d2a <__udivmoddi4+0x2be>
     ccc:	ebb3 020c 	subs.w	r2, r3, ip
     cd0:	eb66 060e 	sbc.w	r6, r6, lr
     cd4:	fa06 f707 	lsl.w	r7, r6, r7
     cd8:	fa22 f301 	lsr.w	r3, r2, r1
     cdc:	40ce      	lsrs	r6, r1
     cde:	431f      	orrs	r7, r3
     ce0:	e9c5 7600 	strd	r7, r6, [r5]
     ce4:	2100      	movs	r1, #0
     ce6:	e711      	b.n	b0c <__udivmoddi4+0xa0>
     ce8:	4629      	mov	r1, r5
     cea:	4628      	mov	r0, r5
     cec:	e70e      	b.n	b0c <__udivmoddi4+0xa0>
     cee:	4666      	mov	r6, ip
     cf0:	e6ed      	b.n	ace <__udivmoddi4+0x62>
     cf2:	4618      	mov	r0, r3
     cf4:	e701      	b.n	afa <__udivmoddi4+0x8e>
     cf6:	4543      	cmp	r3, r8
     cf8:	d2e7      	bcs.n	cca <__udivmoddi4+0x25e>
     cfa:	ebb8 0c02 	subs.w	ip, r8, r2
     cfe:	eb69 0404 	sbc.w	r4, r9, r4
     d02:	3801      	subs	r0, #1
     d04:	46a6      	mov	lr, r4
     d06:	e7e0      	b.n	cca <__udivmoddi4+0x25e>
     d08:	4660      	mov	r0, ip
     d0a:	e7d3      	b.n	cb4 <__udivmoddi4+0x248>
     d0c:	4660      	mov	r0, ip
     d0e:	e78c      	b.n	c2a <__udivmoddi4+0x1be>
     d10:	4686      	mov	lr, r0
     d12:	e7b9      	b.n	c88 <__udivmoddi4+0x21c>
     d14:	4661      	mov	r1, ip
     d16:	e774      	b.n	c02 <__udivmoddi4+0x196>
     d18:	3802      	subs	r0, #2
     d1a:	443c      	add	r4, r7
     d1c:	e72b      	b.n	b76 <__udivmoddi4+0x10a>
     d1e:	4608      	mov	r0, r1
     d20:	e747      	b.n	bb2 <__udivmoddi4+0x146>
     d22:	f1ac 0c02 	sub.w	ip, ip, #2
     d26:	443e      	add	r6, r7
     d28:	e711      	b.n	b4e <__udivmoddi4+0xe2>
     d2a:	4629      	mov	r1, r5
     d2c:	e6ee      	b.n	b0c <__udivmoddi4+0xa0>
     d2e:	bf00      	nop

00000d30 <__aeabi_idiv0>:
     d30:	4770      	bx	lr
     d32:	bf00      	nop

00000d34 <strcmp>:
     d34:	f810 2b01 	ldrb.w	r2, [r0], #1
     d38:	f811 3b01 	ldrb.w	r3, [r1], #1
     d3c:	2a01      	cmp	r2, #1
     d3e:	bf28      	it	cs
     d40:	429a      	cmpcs	r2, r3
     d42:	d0f7      	beq.n	d34 <strcmp>
     d44:	1ad0      	subs	r0, r2, r3
     d46:	4770      	bx	lr

00000d48 <strlen>:
     d48:	4603      	mov	r3, r0
     d4a:	f813 2b01 	ldrb.w	r2, [r3], #1
     d4e:	2a00      	cmp	r2, #0
     d50:	d1fb      	bne.n	d4a <strlen+0x2>
     d52:	1a18      	subs	r0, r3, r0
     d54:	3801      	subs	r0, #1
     d56:	4770      	bx	lr

00000d58 <hci_init>:
	}
}
#endif /* CONFIG_BT_HCI_VS_EXT */

static int hci_init(void)
{
     d58:	b570      	push	{r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
     d5a:	4d46      	ldr	r5, [pc, #280]	; (e74 <hci_init+0x11c>)
     d5c:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
     d60:	6899      	ldr	r1, [r3, #8]
     d62:	f011 0101 	ands.w	r1, r1, #1
{
     d66:	b088      	sub	sp, #32
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
     d68:	d121      	bne.n	dae <hci_init+0x56>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
     d6a:	aa03      	add	r2, sp, #12
     d6c:	f640 4003 	movw	r0, #3075	; 0xc03
     d70:	f006 fb04 	bl	737c <bt_hci_cmd_send_sync>
		if (err) {
     d74:	4604      	mov	r4, r0
     d76:	2800      	cmp	r0, #0
     d78:	d178      	bne.n	e6c <hci_init+0x114>
		hci_reset_complete(rsp);
     d7a:	9b03      	ldr	r3, [sp, #12]
	uint8_t status = buf->data[0];
     d7c:	689b      	ldr	r3, [r3, #8]
	if (status) {
     d7e:	781b      	ldrb	r3, [r3, #0]
     d80:	b993      	cbnz	r3, da8 <hci_init+0x50>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
     d82:	f3bf 8f5b 	dmb	ish
     d86:	462b      	mov	r3, r5
     d88:	f853 2f98 	ldr.w	r2, [r3, #152]!
     d8c:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
     d90:	f002 0205 	and.w	r2, r2, #5
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     d94:	f3bf 8f5b 	dmb	ish
     d98:	e853 1f00 	ldrex	r1, [r3]
     d9c:	e843 2000 	strex	r0, r2, [r3]
     da0:	2800      	cmp	r0, #0
     da2:	d1f9      	bne.n	d98 <hci_init+0x40>
     da4:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
     da8:	9803      	ldr	r0, [sp, #12]
     daa:	f019 fc27 	bl	1a5fc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
     dae:	aa03      	add	r2, sp, #12
     db0:	2100      	movs	r1, #0
     db2:	f241 0003 	movw	r0, #4099	; 0x1003
     db6:	f006 fae1 	bl	737c <bt_hci_cmd_send_sync>
	if (err) {
     dba:	4604      	mov	r4, r0
     dbc:	2800      	cmp	r0, #0
     dbe:	d155      	bne.n	e6c <hci_init+0x114>
	read_local_features_complete(rsp);
     dc0:	9a03      	ldr	r2, [sp, #12]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
     dc2:	4e2d      	ldr	r6, [pc, #180]	; (e78 <hci_init+0x120>)
     dc4:	6893      	ldr	r3, [r2, #8]
     dc6:	f853 0f01 	ldr.w	r0, [r3, #1]!
     dca:	6859      	ldr	r1, [r3, #4]
     dcc:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
     dce:	4610      	mov	r0, r2
     dd0:	f019 fc14 	bl	1a5fc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
     dd4:	4621      	mov	r1, r4
     dd6:	aa03      	add	r2, sp, #12
     dd8:	f241 0001 	movw	r0, #4097	; 0x1001
     ddc:	f006 face 	bl	737c <bt_hci_cmd_send_sync>
	if (err) {
     de0:	4604      	mov	r4, r0
     de2:	2800      	cmp	r0, #0
     de4:	d142      	bne.n	e6c <hci_init+0x114>
	read_local_ver_complete(rsp);
     de6:	9803      	ldr	r0, [sp, #12]
     de8:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
     dea:	785a      	ldrb	r2, [r3, #1]
     dec:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
     df0:	78d9      	ldrb	r1, [r3, #3]
     df2:	789a      	ldrb	r2, [r3, #2]
     df4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     df8:	86ea      	strh	r2, [r5, #54]	; 0x36
	bt_dev.lmp_version = rp->lmp_version;
     dfa:	791a      	ldrb	r2, [r3, #4]
     dfc:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
     e00:	7a19      	ldrb	r1, [r3, #8]
     e02:	79da      	ldrb	r2, [r3, #7]
     e04:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     e08:	872a      	strh	r2, [r5, #56]	; 0x38
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
     e0a:	795a      	ldrb	r2, [r3, #5]
     e0c:	799b      	ldrb	r3, [r3, #6]
     e0e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
     e12:	876b      	strh	r3, [r5, #58]	; 0x3a
	net_buf_unref(rsp);
     e14:	f019 fbf2 	bl	1a5fc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
     e18:	4621      	mov	r1, r4
     e1a:	aa03      	add	r2, sp, #12
     e1c:	f241 0002 	movw	r0, #4098	; 0x1002
     e20:	f006 faac 	bl	737c <bt_hci_cmd_send_sync>
	if (err) {
     e24:	4604      	mov	r4, r0
     e26:	bb08      	cbnz	r0, e6c <hci_init+0x114>
	read_supported_commands_complete(rsp);
     e28:	9b03      	ldr	r3, [sp, #12]
     e2a:	689a      	ldr	r2, [r3, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
     e2c:	1c53      	adds	r3, r2, #1
     e2e:	3241      	adds	r2, #65	; 0x41
     e30:	6818      	ldr	r0, [r3, #0]
     e32:	6859      	ldr	r1, [r3, #4]
     e34:	4634      	mov	r4, r6
     e36:	c403      	stmia	r4!, {r0, r1}
     e38:	3308      	adds	r3, #8
     e3a:	4293      	cmp	r3, r2
     e3c:	4626      	mov	r6, r4
     e3e:	d1f7      	bne.n	e30 <hci_init+0xd8>
		bt_hci_ecc_supported_commands(bt_dev.supported_commands);
     e40:	480e      	ldr	r0, [pc, #56]	; (e7c <hci_init+0x124>)
     e42:	f01f ff25 	bl	20c90 <bt_hci_ecc_supported_commands>
	net_buf_unref(rsp);
     e46:	9803      	ldr	r0, [sp, #12]
     e48:	f019 fbd8 	bl	1a5fc <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
     e4c:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
     e50:	065a      	lsls	r2, r3, #25
     e52:	d41b      	bmi.n	e8c <hci_init+0x134>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
     e54:	4b0a      	ldr	r3, [pc, #40]	; (e80 <hci_init+0x128>)
     e56:	490b      	ldr	r1, [pc, #44]	; (e84 <hci_init+0x12c>)
		BT_ERR("Non-LE capable controller detected!");
     e58:	480b      	ldr	r0, [pc, #44]	; (e88 <hci_init+0x130>)
     e5a:	1ac9      	subs	r1, r1, r3
     e5c:	08c9      	lsrs	r1, r1, #3
     e5e:	0189      	lsls	r1, r1, #6
     e60:	f041 0101 	orr.w	r1, r1, #1
     e64:	f01e f934 	bl	1f0d0 <log_0>
		return -ENODEV;
     e68:	f06f 0412 	mvn.w	r4, #18
	if (err) {
		return err;
	}

	return 0;
}
     e6c:	4620      	mov	r0, r4
     e6e:	b008      	add	sp, #32
     e70:	bd70      	pop	{r4, r5, r6, pc}
     e72:	bf00      	nop
     e74:	20000000 	.word	0x20000000
     e78:	2000003c 	.word	0x2000003c
     e7c:	20000044 	.word	0x20000044
     e80:	00023ed8 	.word	0x00023ed8
     e84:	00023fb0 	.word	0x00023fb0
     e88:	000267b1 	.word	0x000267b1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
     e8c:	aa03      	add	r2, sp, #12
     e8e:	2100      	movs	r1, #0
     e90:	f242 0003 	movw	r0, #8195	; 0x2003
     e94:	f006 fa72 	bl	737c <bt_hci_cmd_send_sync>
	if (err) {
     e98:	4604      	mov	r4, r0
     e9a:	2800      	cmp	r0, #0
     e9c:	d1e6      	bne.n	e6c <hci_init+0x114>
	read_le_features_complete(rsp);
     e9e:	9a03      	ldr	r2, [sp, #12]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
     ea0:	4ebf      	ldr	r6, [pc, #764]	; (11a0 <hci_init+0x448>)
     ea2:	6893      	ldr	r3, [r2, #8]
     ea4:	f853 0f01 	ldr.w	r0, [r3, #1]!
     ea8:	6859      	ldr	r1, [r3, #4]
     eaa:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
     eac:	4610      	mov	r0, r2
     eae:	f019 fba5 	bl	1a5fc <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
     eb2:	4621      	mov	r1, r4
     eb4:	aa03      	add	r2, sp, #12
     eb6:	f242 0002 	movw	r0, #8194	; 0x2002
     eba:	f006 fa5f 	bl	737c <bt_hci_cmd_send_sync>
		if (err) {
     ebe:	4604      	mov	r4, r0
     ec0:	2800      	cmp	r0, #0
     ec2:	d1d3      	bne.n	e6c <hci_init+0x114>
		le_read_buffer_size_complete(rsp);
     ec4:	9b03      	ldr	r3, [sp, #12]
     ec6:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
     ec8:	f8b3 2001 	ldrh.w	r2, [r3, #1]
     ecc:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
     ed0:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
     ed2:	b129      	cbz	r1, ee0 <hci_init+0x188>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
     ed4:	78da      	ldrb	r2, [r3, #3]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
     ed6:	4611      	mov	r1, r2
     ed8:	f106 0028 	add.w	r0, r6, #40	; 0x28
     edc:	f022 fbc1 	bl	23662 <z_impl_k_sem_init>
		net_buf_unref(rsp);
     ee0:	9803      	ldr	r0, [sp, #12]
     ee2:	f019 fb8b 	bl	1a5fc <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
     ee6:	f895 6040 	ldrb.w	r6, [r5, #64]	; 0x40
     eea:	f016 0620 	ands.w	r6, r6, #32
     eee:	f000 80eb 	beq.w	10c8 <hci_init+0x370>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
     ef2:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
     ef6:	071b      	lsls	r3, r3, #28
     ef8:	d511      	bpl.n	f1e <hci_init+0x1c6>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
     efa:	aa03      	add	r2, sp, #12
     efc:	2100      	movs	r1, #0
     efe:	f242 001c 	movw	r0, #8220	; 0x201c
     f02:	f006 fa3b 	bl	737c <bt_hci_cmd_send_sync>
		if (err) {
     f06:	4604      	mov	r4, r0
     f08:	2800      	cmp	r0, #0
     f0a:	d1af      	bne.n	e6c <hci_init+0x114>
		le_read_supp_states_complete(rsp);
     f0c:	9803      	ldr	r0, [sp, #12]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
     f0e:	6883      	ldr	r3, [r0, #8]
     f10:	f853 2f01 	ldr.w	r2, [r3, #1]!
     f14:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
     f16:	e9c5 232a 	strd	r2, r3, [r5, #168]	; 0xa8
		net_buf_unref(rsp);
     f1a:	f019 fb6f 	bl	1a5fc <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
     f1e:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
     f22:	069e      	lsls	r6, r3, #26
     f24:	d524      	bpl.n	f70 <hci_init+0x218>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
     f26:	a902      	add	r1, sp, #8
     f28:	f10d 0006 	add.w	r0, sp, #6
     f2c:	f006 fa9e 	bl	746c <hci_le_read_max_data_len>
		if (err) {
     f30:	4604      	mov	r4, r0
     f32:	2800      	cmp	r0, #0
     f34:	d19a      	bne.n	e6c <hci_init+0x114>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
     f36:	2104      	movs	r1, #4
     f38:	f242 0024 	movw	r0, #8228	; 0x2024
     f3c:	f006 f8ba 	bl	70b4 <bt_hci_cmd_create>
		if (!buf) {
     f40:	4606      	mov	r6, r0
     f42:	2800      	cmp	r0, #0
     f44:	f000 80c7 	beq.w	10d6 <hci_init+0x37e>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
     f48:	2104      	movs	r1, #4
     f4a:	3008      	adds	r0, #8
     f4c:	f021 fe3b 	bl	22bc6 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
     f50:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     f54:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
     f56:	f8bd 3008 	ldrh.w	r3, [sp, #8]
     f5a:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
     f5c:	4622      	mov	r2, r4
     f5e:	4631      	mov	r1, r6
     f60:	f242 0024 	movw	r0, #8228	; 0x2024
     f64:	f006 fa0a 	bl	737c <bt_hci_cmd_send_sync>
		if (err) {
     f68:	4604      	mov	r4, r0
     f6a:	2800      	cmp	r0, #0
     f6c:	f47f af7e 	bne.w	e6c <hci_init+0x114>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
     f70:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
     f74:	065c      	lsls	r4, r3, #25
     f76:	d510      	bpl.n	f9a <hci_init+0x242>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
     f78:	aa03      	add	r2, sp, #12
     f7a:	2100      	movs	r1, #0
     f7c:	f242 002a 	movw	r0, #8234	; 0x202a
     f80:	f006 f9fc 	bl	737c <bt_hci_cmd_send_sync>
		if (err) {
     f84:	4604      	mov	r4, r0
     f86:	2800      	cmp	r0, #0
     f88:	f47f af70 	bne.w	e6c <hci_init+0x114>
		le_read_resolving_list_size_complete(rsp);
     f8c:	9803      	ldr	r0, [sp, #12]
	bt_dev.le.rl_size = rp->rl_size;
     f8e:	6883      	ldr	r3, [r0, #8]
     f90:	785b      	ldrb	r3, [r3, #1]
     f92:	f885 30e8 	strb.w	r3, [r5, #232]	; 0xe8
		net_buf_unref(rsp);
     f96:	f019 fb31 	bl	1a5fc <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
     f9a:	2108      	movs	r1, #8
     f9c:	f242 0001 	movw	r0, #8193	; 0x2001
     fa0:	f006 f888 	bl	70b4 <bt_hci_cmd_create>
	if (!buf) {
     fa4:	4604      	mov	r4, r0
     fa6:	2800      	cmp	r0, #0
     fa8:	f000 8095 	beq.w	10d6 <hci_init+0x37e>
     fac:	2108      	movs	r1, #8
     fae:	4408      	add	r0, r1
     fb0:	f021 fe09 	bl	22bc6 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
     fb4:	f895 10a0 	ldrb.w	r1, [r5, #160]	; 0xa0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
     fb8:	f011 0f40 	tst.w	r1, #64	; 0x40
     fbc:	4602      	mov	r2, r0
     fbe:	f240 2302 	movw	r3, #514	; 0x202
     fc2:	bf08      	it	eq
     fc4:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
     fc6:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
     fc8:	bf4c      	ite	mi
     fca:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
     fce:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
     fd2:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
     fd4:	f895 30a1 	ldrb.w	r3, [r5, #161]	; 0xa1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
     fd8:	bf48      	it	mi
     fda:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
     fde:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     fe2:	f895 3066 	ldrb.w	r3, [r5, #102]	; 0x66
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
     fe6:	bf18      	it	ne
     fe8:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     fec:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
     ff0:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
     ff2:	bf48      	it	mi
     ff4:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     ff8:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
     ffa:	bf08      	it	eq
     ffc:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
    1000:	2100      	movs	r1, #0
    1002:	f01f fef4 	bl	20dee <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    1006:	4621      	mov	r1, r4
    1008:	2200      	movs	r2, #0
    100a:	f242 0001 	movw	r0, #8193	; 0x2001
    100e:	f006 f9b5 	bl	737c <bt_hci_cmd_send_sync>
	if (err) {
    1012:	4604      	mov	r4, r0
    1014:	2800      	cmp	r0, #0
    1016:	f47f af29 	bne.w	e6c <hci_init+0x114>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    101a:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    101e:	0698      	lsls	r0, r3, #26
    1020:	d41e      	bmi.n	1060 <hci_init+0x308>
	if (bt_dev.le.acl_mtu) {
    1022:	f8b5 10cc 	ldrh.w	r1, [r5, #204]	; 0xcc
    1026:	b9d9      	cbnz	r1, 1060 <hci_init+0x308>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    1028:	aa03      	add	r2, sp, #12
    102a:	f241 0005 	movw	r0, #4101	; 0x1005
    102e:	f006 f9a5 	bl	737c <bt_hci_cmd_send_sync>
	if (err) {
    1032:	4604      	mov	r4, r0
    1034:	2800      	cmp	r0, #0
    1036:	f47f af19 	bne.w	e6c <hci_init+0x114>
	if (bt_dev.le.acl_mtu) {
    103a:	f8b5 30cc 	ldrh.w	r3, [r5, #204]	; 0xcc
    103e:	b963      	cbnz	r3, 105a <hci_init+0x302>
	read_buffer_size_complete(rsp);
    1040:	9b03      	ldr	r3, [sp, #12]
    1042:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    1044:	785a      	ldrb	r2, [r3, #1]
    1046:	7899      	ldrb	r1, [r3, #2]
    1048:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    104c:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    1050:	889a      	ldrh	r2, [r3, #4]
    1052:	4854      	ldr	r0, [pc, #336]	; (11a4 <hci_init+0x44c>)
    1054:	4611      	mov	r1, r2
    1056:	f022 fb04 	bl	23662 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    105a:	9803      	ldr	r0, [sp, #12]
    105c:	f019 face 	bl	1a5fc <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    1060:	2108      	movs	r1, #8
    1062:	f640 4001 	movw	r0, #3073	; 0xc01
    1066:	f006 f825 	bl	70b4 <bt_hci_cmd_create>
	if (!buf) {
    106a:	4604      	mov	r4, r0
    106c:	b398      	cbz	r0, 10d6 <hci_init+0x37e>
    106e:	2108      	movs	r1, #8
    1070:	4408      	add	r0, r1
    1072:	f021 fda8 	bl	22bc6 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    1076:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
    107a:	07d9      	lsls	r1, r3, #31
    107c:	4602      	mov	r2, r0
    107e:	d53f      	bpl.n	1100 <hci_init+0x3a8>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    1080:	a145      	add	r1, pc, #276	; (adr r1, 1198 <hci_init+0x440>)
    1082:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
    1086:	f01f feb2 	bl	20dee <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    108a:	4621      	mov	r1, r4
    108c:	2200      	movs	r2, #0
    108e:	f640 4001 	movw	r0, #3073	; 0xc01
    1092:	f006 f973 	bl	737c <bt_hci_cmd_send_sync>
	if (err) {
    1096:	4604      	mov	r4, r0
    1098:	2800      	cmp	r0, #0
    109a:	f47f aee7 	bne.w	e6c <hci_init+0x114>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    109e:	4601      	mov	r1, r0
    10a0:	aa02      	add	r2, sp, #8
    10a2:	f64f 4001 	movw	r0, #64513	; 0xfc01
    10a6:	f006 f969 	bl	737c <bt_hci_cmd_send_sync>
	if (err) {
    10aa:	4c3f      	ldr	r4, [pc, #252]	; (11a8 <hci_init+0x450>)
    10ac:	4b3f      	ldr	r3, [pc, #252]	; (11ac <hci_init+0x454>)
    10ae:	1ae4      	subs	r4, r4, r3
    10b0:	08e4      	lsrs	r4, r4, #3
    10b2:	01a4      	lsls	r4, r4, #6
    10b4:	b340      	cbz	r0, 1108 <hci_init+0x3b0>
		BT_WARN("Vendor HCI extensions not available");
    10b6:	483e      	ldr	r0, [pc, #248]	; (11b0 <hci_init+0x458>)
    10b8:	f044 0102 	orr.w	r1, r4, #2
			BT_WARN("Failed to read supported vendor features");
    10bc:	f01e f808 	bl	1f0d0 <log_0>
	err = bt_id_init();
    10c0:	f007 f9ae 	bl	8420 <bt_id_init>
    10c4:	4604      	mov	r4, r0
	if (err) {
    10c6:	e6d1      	b.n	e6c <hci_init+0x114>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    10c8:	2102      	movs	r1, #2
    10ca:	f640 406d 	movw	r0, #3181	; 0xc6d
    10ce:	f005 fff1 	bl	70b4 <bt_hci_cmd_create>
		if (!buf) {
    10d2:	4604      	mov	r4, r0
    10d4:	b910      	cbnz	r0, 10dc <hci_init+0x384>
		return -ENOBUFS;
    10d6:	f06f 0468 	mvn.w	r4, #104	; 0x68
    10da:	e6c7      	b.n	e6c <hci_init+0x114>
    10dc:	2102      	movs	r1, #2
    10de:	3008      	adds	r0, #8
    10e0:	f021 fd71 	bl	22bc6 <net_buf_simple_add>
		cp_le->le = 0x01;
    10e4:	2301      	movs	r3, #1
    10e6:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    10e8:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    10ea:	4621      	mov	r1, r4
    10ec:	4632      	mov	r2, r6
    10ee:	f640 406d 	movw	r0, #3181	; 0xc6d
    10f2:	f006 f943 	bl	737c <bt_hci_cmd_send_sync>
		if (err) {
    10f6:	4604      	mov	r4, r0
    10f8:	2800      	cmp	r0, #0
    10fa:	f43f aefa 	beq.w	ef2 <hci_init+0x19a>
    10fe:	e6b5      	b.n	e6c <hci_init+0x114>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    1100:	482c      	ldr	r0, [pc, #176]	; (11b4 <hci_init+0x45c>)
    1102:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    1106:	e7be      	b.n	1086 <hci_init+0x32e>
	rp.info = (void *)rsp->data;
    1108:	9b02      	ldr	r3, [sp, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    110a:	482b      	ldr	r0, [pc, #172]	; (11b8 <hci_init+0x460>)
	rp.info = (void *)rsp->data;
    110c:	689d      	ldr	r5, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    110e:	f8b5 2001 	ldrh.w	r2, [r5, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
    1112:	2a03      	cmp	r2, #3
		return plat_str[platform];
    1114:	bf96      	itet	ls
    1116:	4929      	ldrls	r1, [pc, #164]	; (11bc <hci_init+0x464>)
	return "unknown";
    1118:	4929      	ldrhi	r1, [pc, #164]	; (11c0 <hci_init+0x468>)
		return plat_str[platform];
    111a:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    111e:	f044 0303 	orr.w	r3, r4, #3
    1122:	f01d fff6 	bl	1f112 <log_2>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    1126:	f8b5 1001 	ldrh.w	r1, [r5, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
    112a:	f8b5 2003 	ldrh.w	r2, [r5, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    112e:	2902      	cmp	r1, #2
	BT_INFO("HW Variant: %s (0x%04x)",
    1130:	f044 0303 	orr.w	r3, r4, #3
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    1134:	d12e      	bne.n	1194 <hci_init+0x43c>
	if (variant < ARRAY_SIZE(nordic_str)) {
    1136:	2a03      	cmp	r2, #3
    1138:	d82c      	bhi.n	1194 <hci_init+0x43c>
		return nordic_str[variant];
    113a:	4922      	ldr	r1, [pc, #136]	; (11c4 <hci_init+0x46c>)
    113c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    1140:	4821      	ldr	r0, [pc, #132]	; (11c8 <hci_init+0x470>)
    1142:	f01d ffe6 	bl	1f112 <log_2>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    1146:	796a      	ldrb	r2, [r5, #5]
    1148:	4820      	ldr	r0, [pc, #128]	; (11cc <hci_init+0x474>)
	if (variant < ARRAY_SIZE(var_str)) {
    114a:	2a03      	cmp	r2, #3
		return var_str[variant];
    114c:	bf96      	itet	ls
    114e:	4920      	ldrls	r1, [pc, #128]	; (11d0 <hci_init+0x478>)
	return "unknown";
    1150:	491b      	ldrhi	r1, [pc, #108]	; (11c0 <hci_init+0x468>)
		return var_str[variant];
    1152:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    1156:	e9cd 1203 	strd	r1, r2, [sp, #12]
    115a:	79aa      	ldrb	r2, [r5, #6]
    115c:	9205      	str	r2, [sp, #20]
    115e:	f8b5 2007 	ldrh.w	r2, [r5, #7]
    1162:	9206      	str	r2, [sp, #24]
    1164:	f8d5 2009 	ldr.w	r2, [r5, #9]
    1168:	9207      	str	r2, [sp, #28]
    116a:	f044 0303 	orr.w	r3, r4, #3
    116e:	2205      	movs	r2, #5
    1170:	a903      	add	r1, sp, #12
    1172:	f01e f803 	bl	1f17c <log_n>
	net_buf_unref(rsp);
    1176:	9802      	ldr	r0, [sp, #8]
    1178:	f019 fa40 	bl	1a5fc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    117c:	aa02      	add	r2, sp, #8
    117e:	2100      	movs	r1, #0
    1180:	f64f 4002 	movw	r0, #64514	; 0xfc02
    1184:	f006 f8fa 	bl	737c <bt_hci_cmd_send_sync>
	if (err) {
    1188:	4605      	mov	r5, r0
    118a:	b328      	cbz	r0, 11d8 <hci_init+0x480>
		BT_WARN("Failed to read supported vendor commands");
    118c:	4811      	ldr	r0, [pc, #68]	; (11d4 <hci_init+0x47c>)
    118e:	f044 0102 	orr.w	r1, r4, #2
    1192:	e793      	b.n	10bc <hci_init+0x364>
		return "unknown";
    1194:	490a      	ldr	r1, [pc, #40]	; (11c0 <hci_init+0x468>)
    1196:	e7d3      	b.n	1140 <hci_init+0x3e8>
    1198:	02008890 	.word	0x02008890
    119c:	20008000 	.word	0x20008000
    11a0:	200000a0 	.word	0x200000a0
    11a4:	200000d0 	.word	0x200000d0
    11a8:	00023fb0 	.word	0x00023fb0
    11ac:	00023ed8 	.word	0x00023ed8
    11b0:	000267d5 	.word	0x000267d5
    11b4:	02008810 	.word	0x02008810
    11b8:	000267f9 	.word	0x000267f9
    11bc:	000245d8 	.word	0x000245d8
    11c0:	000264a7 	.word	0x000264a7
    11c4:	00024598 	.word	0x00024598
    11c8:	00026812 	.word	0x00026812
    11cc:	0002682a 	.word	0x0002682a
    11d0:	00024610 	.word	0x00024610
    11d4:	00026857 	.word	0x00026857
	rp.cmds = (void *)rsp->data;
    11d8:	9802      	ldr	r0, [sp, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    11da:	4e10      	ldr	r6, [pc, #64]	; (121c <hci_init+0x4c4>)
    11dc:	6883      	ldr	r3, [r0, #8]
    11de:	f8b3 3001 	ldrh.w	r3, [r3, #1]
    11e2:	f8a6 3085 	strh.w	r3, [r6, #133]	; 0x85
	net_buf_unref(rsp);
    11e6:	f019 fa09 	bl	1a5fc <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    11ea:	f896 3085 	ldrb.w	r3, [r6, #133]	; 0x85
    11ee:	075b      	lsls	r3, r3, #29
    11f0:	f57f af66 	bpl.w	10c0 <hci_init+0x368>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    11f4:	aa02      	add	r2, sp, #8
    11f6:	4629      	mov	r1, r5
    11f8:	f64f 4003 	movw	r0, #64515	; 0xfc03
    11fc:	f006 f8be 	bl	737c <bt_hci_cmd_send_sync>
		if (err) {
    1200:	b118      	cbz	r0, 120a <hci_init+0x4b2>
			BT_WARN("Failed to read supported vendor features");
    1202:	4807      	ldr	r0, [pc, #28]	; (1220 <hci_init+0x4c8>)
    1204:	f044 0102 	orr.w	r1, r4, #2
    1208:	e758      	b.n	10bc <hci_init+0x364>
		rp.feat = (void *)rsp->data;
    120a:	9802      	ldr	r0, [sp, #8]
		memcpy(bt_dev.vs_features, rp.feat->features,
    120c:	6883      	ldr	r3, [r0, #8]
    120e:	785b      	ldrb	r3, [r3, #1]
    1210:	f886 3084 	strb.w	r3, [r6, #132]	; 0x84
		net_buf_unref(rsp);
    1214:	f019 f9f2 	bl	1a5fc <net_buf_unref>
    1218:	e752      	b.n	10c0 <hci_init+0x368>
    121a:	bf00      	nop
    121c:	20000000 	.word	0x20000000
    1220:	00026880 	.word	0x00026880
    1224:	00000000 	.word	0x00000000

00001228 <ull_drift_ticks_get>:
 * @param ticks_drift_minus[out] Negative part of drift uncertainty window
 */
void ull_drift_ticks_get(struct node_rx_event_done *done,
			 uint32_t *ticks_drift_plus,
			 uint32_t *ticks_drift_minus)
{
    1228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	start_to_address_actual_us =
		done->extra.drift.start_to_address_actual_us;
	window_widening_event_us =
		done->extra.drift.window_widening_event_us;
	preamble_to_addr_us =
    122c:	e9d0 c70b 	ldrd	ip, r7, [r0, #44]	; 0x2c
	start_to_address_actual_us =
    1230:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
		done->extra.drift.preamble_to_addr_us;

	start_to_address_expected_us = EVENT_JITTER_US +
				       EVENT_TICKER_RES_MARGIN_US +
				       window_widening_event_us +
    1234:	eb0c 0407 	add.w	r4, ip, r7
	start_to_address_expected_us = EVENT_JITTER_US +
    1238:	3430      	adds	r4, #48	; 0x30
				       preamble_to_addr_us;

	if (start_to_address_actual_us <= start_to_address_expected_us) {
    123a:	45a0      	cmp	r8, r4
{
    123c:	460e      	mov	r6, r1
    123e:	4615      	mov	r5, r2
	if (start_to_address_actual_us <= start_to_address_expected_us) {
    1240:	d818      	bhi.n	1274 <ull_drift_ticks_get+0x4c>
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
    1242:	4f1b      	ldr	r7, [pc, #108]	; (12b0 <ull_drift_ticks_get+0x88>)
    1244:	a318      	add	r3, pc, #96	; (adr r3, 12a8 <ull_drift_ticks_get+0x80>)
    1246:	e9d3 2300 	ldrd	r2, r3, [r3]
    124a:	fbac 0107 	umull	r0, r1, ip, r7
    124e:	f7ff fbf5 	bl	a3c <__aeabi_uldivmod>
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
    1252:	eba4 0408 	sub.w	r4, r4, r8
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
    1256:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
    125a:	6030      	str	r0, [r6, #0]
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
    125c:	a312      	add	r3, pc, #72	; (adr r3, 12a8 <ull_drift_ticks_get+0x80>)
    125e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1262:	fba4 0107 	umull	r0, r1, r4, r7
    1266:	f7ff fbe9 	bl	a3c <__aeabi_uldivmod>
    126a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
    126e:	6028      	str	r0, [r5, #0]
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
					       EVENT_TICKER_RES_MARGIN_US +
					       preamble_to_addr_us);
	}
}
    1270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
    1274:	4c0e      	ldr	r4, [pc, #56]	; (12b0 <ull_drift_ticks_get+0x88>)
    1276:	a30c      	add	r3, pc, #48	; (adr r3, 12a8 <ull_drift_ticks_get+0x80>)
    1278:	e9d3 2300 	ldrd	r2, r3, [r3]
    127c:	fba8 0104 	umull	r0, r1, r8, r4
    1280:	f7ff fbdc 	bl	a3c <__aeabi_uldivmod>
    1284:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
    1288:	f107 0030 	add.w	r0, r7, #48	; 0x30
		*ticks_drift_plus =
    128c:	6033      	str	r3, [r6, #0]
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
    128e:	fba0 0104 	umull	r0, r1, r0, r4
    1292:	a305      	add	r3, pc, #20	; (adr r3, 12a8 <ull_drift_ticks_get+0x80>)
    1294:	e9d3 2300 	ldrd	r2, r3, [r3]
    1298:	f7ff fbd0 	bl	a3c <__aeabi_uldivmod>
    129c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
    12a0:	6028      	str	r0, [r5, #0]
}
    12a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    12a6:	bf00      	nop
    12a8:	1afd498d 	.word	0x1afd498d
    12ac:	00000007 	.word	0x00000007
    12b0:	3b9aca00 	.word	0x3b9aca00
    12b4:	00000000 	.word	0x00000000

000012b8 <ll_adv_enable>:
	uint8_t aux_is_started = 0U;
	uint32_t ticks_anchor;
#endif /* !CONFIG_BT_HCI_MESH_EXT */
#else /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
uint8_t ll_adv_enable(uint8_t enable)
{
    12b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    12bc:	4ca8      	ldr	r4, [pc, #672]	; (1560 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1d8>)
    12be:	f894 604a 	ldrb.w	r6, [r4, #74]	; 0x4a
    12c2:	b08f      	sub	sp, #60	; 0x3c
    12c4:	f006 0601 	and.w	r6, r6, #1
	struct pdu_adv *pdu_adv;
	struct ll_adv_set *adv;
	struct lll_adv *lll;
	uint32_t ret;

	if (!enable) {
    12c8:	2800      	cmp	r0, #0
    12ca:	f000 8153 	beq.w	1574 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1ec>
static inline struct ll_adv_set *is_disabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
    12ce:	bbb6      	cbnz	r6, 133e <ll_adv_enable+0x86>
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    12d0:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    12d4:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
	ull_filter_adv_update(lll->filter_policy);
    12d8:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    12dc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    12e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    12e4:	f000 0003 	and.w	r0, r0, #3
	lll->rl_idx = FILTER_IDX_NONE;
    12e8:	21ff      	movs	r1, #255	; 0xff
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    12ea:	f8d2 8038 	ldr.w	r8, [r2, #56]	; 0x38
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    12ee:	f8d3 902c 	ldr.w	r9, [r3, #44]	; 0x2c
    12f2:	f884 1026 	strb.w	r1, [r4, #38]	; 0x26
	ull_filter_adv_update(lll->filter_policy);
    12f6:	f015 fe61 	bl	16fbc <ull_filter_adv_update>
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    12fa:	f894 004a 	ldrb.w	r0, [r4, #74]	; 0x4a
    12fe:	0742      	lsls	r2, r0, #29
    1300:	f100 8113 	bmi.w	152a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a2>
	if (pdu_adv_to_update) {
    1304:	f1b9 0f00 	cmp.w	r9, #0
    1308:	d011      	beq.n	132e <ll_adv_enable+0x76>
		adv_addr = ull_adv_pdu_update_addrs(adv, pdu_adv_to_update);
    130a:	4895      	ldr	r0, [pc, #596]	; (1560 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1d8>)
    130c:	4649      	mov	r1, r9
    130e:	f010 fcff 	bl	11d10 <ull_adv_pdu_update_addrs>
		if (pdu_adv_to_update->tx_addr &&
    1312:	f899 3000 	ldrb.w	r3, [r9]
    1316:	065b      	lsls	r3, r3, #25
    1318:	d505      	bpl.n	1326 <ll_adv_enable+0x6e>
		    !mem_nz((void *)adv_addr, BDADDR_SIZE)) {
    131a:	2106      	movs	r1, #6
    131c:	f00b ff26 	bl	d16c <mem_nz>
		if (pdu_adv_to_update->tx_addr &&
    1320:	2800      	cmp	r0, #0
    1322:	f000 8240 	beq.w	17a6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x41e>
			ull_adv_pdu_update_addrs(adv, pdu_scan);
    1326:	488e      	ldr	r0, [pc, #568]	; (1560 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1d8>)
    1328:	4641      	mov	r1, r8
    132a:	f010 fcf1 	bl	11d10 <ull_adv_pdu_update_addrs>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    132e:	f899 3000 	ldrb.w	r3, [r9]
    1332:	f013 0f0e 	tst.w	r3, #14
    1336:	f040 80ce 	bne.w	14d6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x14e>
		if (lll->conn) {
    133a:	6a23      	ldr	r3, [r4, #32]
    133c:	b123      	cbz	r3, 1348 <ll_adv_enable+0x90>
	ret = ull_ticker_status_take(ret, &ret_cb);
	if (ret) {
		mark = ull_disable_unmark(adv);
		LL_ASSERT(mark == adv);

		return BT_HCI_ERR_CMD_DISALLOWED;
    133e:	260c      	movs	r6, #12
}
    1340:	4630      	mov	r0, r6
    1342:	b00f      	add	sp, #60	; 0x3c
    1344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		link = ll_rx_link_alloc();
    1348:	f00f fdc6 	bl	10ed8 <ll_rx_link_alloc>
		if (!link) {
    134c:	4682      	mov	sl, r0
    134e:	2800      	cmp	r0, #0
    1350:	f000 8246 	beq.w	17e0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x458>
		node_rx = ll_rx_alloc();
    1354:	f00f fdcc 	bl	10ef0 <ll_rx_alloc>
		if (!node_rx) {
    1358:	4683      	mov	fp, r0
    135a:	2800      	cmp	r0, #0
    135c:	f000 8259 	beq.w	1812 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x48a>
		conn = ll_conn_acquire();
    1360:	f011 fa3c 	bl	127dc <ll_conn_acquire>
		if (!conn) {
    1364:	4605      	mov	r5, r0
    1366:	2800      	cmp	r0, #0
    1368:	f000 8250 	beq.w	180c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x484>
		conn_lll->handle = 0xFFFF;
    136c:	f64f 73ff 	movw	r3, #65535	; 0xffff
		if (!conn_lll->link_tx_free) {
    1370:	6f40      	ldr	r0, [r0, #116]	; 0x74
		conn_lll->handle = 0xFFFF;
    1372:	852b      	strh	r3, [r5, #40]	; 0x28
		conn_lll = &conn->lll;
    1374:	f105 031c 	add.w	r3, r5, #28
    1378:	930b      	str	r3, [sp, #44]	; 0x2c
		if (!conn_lll->link_tx_free) {
    137a:	2800      	cmp	r0, #0
    137c:	f000 822c 	beq.w	17d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x450>
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
    1380:	f105 0268 	add.w	r2, r5, #104	; 0x68
    1384:	f105 0164 	add.w	r1, r5, #100	; 0x64
    1388:	f00b fefc 	bl	d184 <memq_init>
			conn_lll->phy_tx = PHY_1M;
    138c:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
    1390:	4874      	ldr	r0, [pc, #464]	; (1564 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1dc>)
		conn_lll->data_chan_sel = 0;
    1392:	f895 1039 	ldrb.w	r1, [r5, #57]	; 0x39
		conn_lll->max_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    1396:	4b74      	ldr	r3, [pc, #464]	; (1568 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1e0>)
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
    1398:	f895 713a 	ldrb.w	r7, [r5, #314]	; 0x13a
		conn_lll->slave.initiated = 0;
    139c:	f895 c03c 	ldrb.w	ip, [r5, #60]	; 0x3c
		conn->llcp_terminate.node_rx.hdr.link = link;
    13a0:	f8c5 a144 	str.w	sl, [r5, #324]	; 0x144
			conn_lll->phy_tx = PHY_1M;
    13a4:	4002      	ands	r2, r0
		conn_lll->sn = 0;
    13a6:	f895 007a 	ldrb.w	r0, [r5, #122]	; 0x7a
		conn_lll->data_chan_sel = 0;
    13aa:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    13ae:	f061 017f 	orn	r1, r1, #127	; 0x7f
		conn_lll->sn = 0;
    13b2:	f020 001f 	bic.w	r0, r0, #31
		conn_lll->data_chan_sel = 0;
    13b6:	f885 1039 	strb.w	r1, [r5, #57]	; 0x39
		conn_lll->sn = 0;
    13ba:	f885 007a 	strb.w	r0, [r5, #122]	; 0x7a
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    13be:	f04f 111b 	mov.w	r1, #1769499	; 0x1b001b
		conn->llcp_feature.features_conn = LL_FEAT;
    13c2:	486a      	ldr	r0, [pc, #424]	; (156c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1e4>)
			conn_lll->phy_tx = PHY_1M;
    13c4:	f442 7288 	orr.w	r2, r2, #272	; 0x110
		conn_lll->max_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    13c8:	e9c5 1316 	strd	r1, r3, [r5, #88]	; 0x58
			conn_lll->phy_tx = PHY_1M;
    13cc:	f042 0201 	orr.w	r2, r2, #1
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
    13d0:	f027 0703 	bic.w	r7, r7, #3
		conn->llcp_feature.features_conn = LL_FEAT;
    13d4:	2100      	movs	r1, #0
    13d6:	e9c5 014a 	strd	r0, r1, [r5, #296]	; 0x128
		conn_lll->slave.initiated = 0;
    13da:	f02c 0c07 	bic.w	ip, ip, #7
			conn_lll->phy_tx = PHY_1M;
    13de:	f8a5 2060 	strh.w	r2, [r5, #96]	; 0x60
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
    13e2:	f885 713a 	strb.w	r7, [r5, #314]	; 0x13a
		conn->connect_expire = 6;
    13e6:	2206      	movs	r2, #6
		conn_lll->latency_prepare = 0;
    13e8:	2700      	movs	r7, #0
		conn->llcp_feature.features_peer = 0;
    13ea:	2000      	movs	r0, #0
    13ec:	2100      	movs	r1, #0
    13ee:	e9c5 014c 	strd	r0, r1, [r5, #304]	; 0x130
		conn_lll->slave.initiated = 0;
    13f2:	f885 c03c 	strb.w	ip, [r5, #60]	; 0x3c
		conn->connect_expire = 6;
    13f6:	f8a5 20c0 	strh.w	r2, [r5, #192]	; 0xc0
		conn_lll->slave.window_widening_event_us = 0;
    13fa:	e9c5 7712 	strd	r7, r7, [r5, #72]	; 0x48
		conn_lll->latency_prepare = 0;
    13fe:	85ef      	strh	r7, [r5, #46]	; 0x2e
		conn_lll->latency_event = 0;
    1400:	632f      	str	r7, [r5, #48]	; 0x30
		conn_lll->data_chan_use = 0;
    1402:	f885 703b 	strb.w	r7, [r5, #59]	; 0x3b
		conn_lll->slave.window_size_prepare_us = 0;
    1406:	652f      	str	r7, [r5, #80]	; 0x50
		conn->supervision_expire = 0;
    1408:	f8a5 70c4 	strh.w	r7, [r5, #196]	; 0xc4
		conn->procedure_expire = 0;
    140c:	f8a5 70c8 	strh.w	r7, [r5, #200]	; 0xc8
		conn->llcp_rx = NULL;
    1410:	f8c5 7108 	str.w	r7, [r5, #264]	; 0x108
		conn->llcp_cu.req = conn->llcp_cu.ack = 0;
    1414:	f8a5 710c 	strh.w	r7, [r5, #268]	; 0x10c
		conn->llcp_feature.req = conn->llcp_feature.ack = 0;
    1418:	f8a5 7120 	strh.w	r7, [r5, #288]	; 0x120
		conn->llcp_version.req = conn->llcp_version.ack = 0;
    141c:	f8a5 7138 	strh.w	r7, [r5, #312]	; 0x138
		conn->llcp_terminate.reason_peer = 0;
    1420:	f885 7143 	strb.w	r7, [r5, #323]	; 0x143
		conn_lll->link_tx_free = NULL;
    1424:	676f      	str	r7, [r5, #116]	; 0x74
		conn_lll->packet_tx_head_len = 0;
    1426:	f8a5 7078 	strh.w	r7, [r5, #120]	; 0x78
		conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
    142a:	f8a5 7164 	strh.w	r7, [r5, #356]	; 0x164
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    142e:	f895 1166 	ldrb.w	r1, [r5, #358]	; 0x166
		conn->llcp_conn_param.disabled = 0;
    1432:	f895 c186 	ldrb.w	ip, [r5, #390]	; 0x186
		conn->llcp_length.disabled = 0U;
    1436:	f895 01ae 	ldrb.w	r0, [r5, #430]	; 0x1ae
		conn->common.fex_valid = 0;
    143a:	f8b5 20d8 	ldrh.w	r2, [r5, #216]	; 0xd8
		conn->llcp_conn_param.req = 0;
    143e:	f8a5 7184 	strh.w	r7, [r5, #388]	; 0x184
		conn->llcp_conn_param.disabled = 0;
    1442:	f367 1c04 	bfi	ip, r7, #4, #1
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    1446:	f021 0107 	bic.w	r1, r1, #7
		conn->common.fex_valid = 0;
    144a:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
		conn->llcp_length.disabled = 0U;
    144e:	f367 00c3 	bfi	r0, r7, #3, #1
		conn->llcp_conn_param.disabled = 0;
    1452:	f885 c186 	strb.w	ip, [r5, #390]	; 0x186
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    1456:	f885 1166 	strb.w	r1, [r5, #358]	; 0x166
		conn->common.fex_valid = 0;
    145a:	f8a5 20d8 	strh.w	r2, [r5, #216]	; 0xd8
		conn->slave.ticks_to_offset = 0;
    145e:	f8c5 70e0 	str.w	r7, [r5, #224]	; 0xe0
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
    1462:	f8a5 70e4 	strh.w	r7, [r5, #228]	; 0xe4
    1466:	f885 70e6 	strb.w	r7, [r5, #230]	; 0xe6
		conn->llcp_length.req = conn->llcp_length.ack = 0U;
    146a:	f8a5 71ac 	strh.w	r7, [r5, #428]	; 0x1ac
		conn->llcp_length.cache.tx_octets = 0U;
    146e:	f8a5 71b8 	strh.w	r7, [r5, #440]	; 0x1b8
		conn->llcp_length.disabled = 0U;
    1472:	f885 01ae 	strb.w	r0, [r5, #430]	; 0x1ae
		conn->default_tx_octets = ull_conn_default_tx_octets_get();
    1476:	f011 fceb 	bl	12e50 <ull_conn_default_tx_octets_get>
    147a:	f8a5 00d2 	strh.w	r0, [r5, #210]	; 0xd2
		conn->default_tx_time = ull_conn_default_tx_time_get();
    147e:	f011 fced 	bl	12e5c <ull_conn_default_tx_time_get>
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
    1482:	f8d5 11bc 	ldr.w	r1, [r5, #444]	; 0x1bc
    1486:	4a3a      	ldr	r2, [pc, #232]	; (1570 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1e8>)
		conn->default_tx_time = ull_conn_default_tx_time_get();
    1488:	f8a5 00d4 	strh.w	r0, [r5, #212]	; 0xd4
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
    148c:	400a      	ands	r2, r1
    148e:	f8c5 21bc 	str.w	r2, [r5, #444]	; 0x1bc
		conn->phy_pref_tx = ull_conn_default_phy_tx_get();
    1492:	f011 fce9 	bl	12e68 <ull_conn_default_phy_tx_get>
    1496:	f895 21c0 	ldrb.w	r2, [r5, #448]	; 0x1c0
    149a:	f360 0202 	bfi	r2, r0, #0, #3
    149e:	f885 21c0 	strb.w	r2, [r5, #448]	; 0x1c0
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    14a2:	f011 fce7 	bl	12e74 <ull_conn_default_phy_rx_get>
    14a6:	f895 21c0 	ldrb.w	r2, [r5, #448]	; 0x1c0
		lll->conn = conn_lll;
    14aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    14ac:	6223      	str	r3, [r4, #32]
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    14ae:	f360 02c5 	bfi	r2, r0, #3, #3
		adv->node_rx_cc_free = node_rx;
    14b2:	e9c4 ab10 	strd	sl, fp, [r4, #64]	; 0x40
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    14b6:	e9c5 7773 	strd	r7, r7, [r5, #460]	; 0x1cc
    14ba:	e9c5 7771 	strd	r7, r7, [r5, #452]	; 0x1c4
	return hdr->ref--;
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->disabled_cb = hdr->disabled_param = NULL;
    14be:	e9c5 7705 	strd	r7, r7, [r5, #20]
		conn->tx_data = conn->tx_data_last = 0;
    14c2:	f8c5 71d4 	str.w	r7, [r5, #468]	; 0x1d4
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    14c6:	f885 21c0 	strb.w	r2, [r5, #448]	; 0x1c0

static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
    14ca:	61ed      	str	r5, [r5, #28]
		err = lll_clock_wait();
    14cc:	f016 feca 	bl	18264 <lll_clock_wait>
		if (err) {
    14d0:	2800      	cmp	r0, #0
    14d2:	f040 816a 	bne.w	17aa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x422>
	uint8_t ch_map = lll->chan_map;
    14d6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    14da:	2101      	movs	r1, #1
	uint8_t ch_map = lll->chan_map;
    14dc:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    14e0:	a80d      	add	r0, sp, #52	; 0x34
	uint8_t ch_map = lll->chan_map;
    14e2:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    14e6:	f00b ffc5 	bl	d474 <util_ones_count_get>
	if (adv_chn_cnt == 0) {
    14ea:	b390      	cbz	r0, 1552 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1ca>
		if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
    14ec:	f899 3000 	ldrb.w	r3, [r9]
    14f0:	f003 030f 	and.w	r3, r3, #15
    14f4:	2b02      	cmp	r3, #2
    14f6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
    14fa:	f000 80a7 	beq.w	164c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2c4>
			if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    14fe:	2b01      	cmp	r3, #1
    1500:	f000 8157 	beq.w	17b2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x42a>
					BYTES2US((PDU_OVERHEAD_SIZE(PHY_1M) +
    1504:	f898 0001 	ldrb.w	r0, [r8, #1]
    1508:	3010      	adds	r0, #16
		const uint16_t scan_rsp_us =
    150a:	00c0      	lsls	r0, r0, #3
			} else if (pdu_adv->type == PDU_ADV_TYPE_ADV_IND) {
    150c:	2b00      	cmp	r3, #0
    150e:	f040 8142 	bne.w	1796 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x40e>
				adv_size += pdu_adv->len;
    1512:	f899 3001 	ldrb.w	r3, [r9, #1]
    1516:	3310      	adds	r3, #16
    1518:	00db      	lsls	r3, r3, #3
    151a:	f503 714d 	add.w	r1, r3, #820	; 0x334
    151e:	4408      	add	r0, r1
    1520:	f503 739a 	add.w	r3, r3, #308	; 0x134
			slot_us += (BYTES2US(adv_size, phy) + EVENT_IFS_MAX_US
    1524:	fb03 0002 	mla	r0, r3, r2, r0
    1528:	e09b      	b.n	1662 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2da>
		lll->rl_idx = ull_filter_rl_find(adv->peer_addr_type,
    152a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    152e:	4632      	mov	r2, r6
    1530:	f104 014b 	add.w	r1, r4, #75	; 0x4b
    1534:	f015 feb2 	bl	1729c <ull_filter_rl_find>
		if (lll->rl_idx != FILTER_IDX_NONE) {
    1538:	28ff      	cmp	r0, #255	; 0xff
		lll->rl_idx = ull_filter_rl_find(adv->peer_addr_type,
    153a:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
		if (lll->rl_idx != FILTER_IDX_NONE) {
    153e:	f43f aee1 	beq.w	1304 <ll_adv_enable+0x4c>
			ull_filter_rpa_update(false);
    1542:	4630      	mov	r0, r6
    1544:	f015 fd54 	bl	16ff0 <ull_filter_rpa_update>
	if (pdu_adv_to_update) {
    1548:	f1b9 0f00 	cmp.w	r9, #0
    154c:	f47f aedd 	bne.w	130a <ll_adv_enable+0x52>
    1550:	e6ed      	b.n	132e <ll_adv_enable+0x76>
	if (adv->lll.conn) {
    1552:	6a23      	ldr	r3, [r4, #32]
    1554:	2b00      	cmp	r3, #0
    1556:	f43f aef2 	beq.w	133e <ll_adv_enable+0x86>
		conn_release(adv);
    155a:	f010 f979 	bl	11850 <conn_release.constprop.0>
    155e:	e6ee      	b.n	133e <ll_adv_enable+0x86>
    1560:	20002238 	.word	0x20002238
    1564:	fffff880 	.word	0xfffff880
    1568:	01480148 	.word	0x01480148
    156c:	0001417f 	.word	0x0001417f
    1570:	f6ff0000 	.word	0xf6ff0000
	if (!adv || !adv->is_enabled) {
    1574:	2e00      	cmp	r6, #0
    1576:	f43f aee2 	beq.w	133e <ll_adv_enable+0x86>
	if (adv->lll.conn) {
    157a:	6a23      	ldr	r3, [r4, #32]
    157c:	b15b      	cbz	r3, 1596 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x20e>
		adv->lll.conn->slave.cancelled = 1U;
    157e:	f893 2020 	ldrb.w	r2, [r3, #32]
    1582:	f042 0202 	orr.w	r2, r2, #2
    1586:	f883 2020 	strb.w	r2, [r3, #32]
		if (unlikely(adv->lll.conn->slave.initiated)) {
    158a:	6a23      	ldr	r3, [r4, #32]
    158c:	f893 3020 	ldrb.w	r3, [r3, #32]
    1590:	07d8      	lsls	r0, r3, #31
    1592:	f53f aed4 	bmi.w	133e <ll_adv_enable+0x86>
	mark = ull_disable_mark(adv);
    1596:	48a8      	ldr	r0, [pc, #672]	; (1838 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4b0>)
    1598:	f00f fd54 	bl	11044 <ull_disable_mark>
	LL_ASSERT(mark == adv);
    159c:	4284      	cmp	r4, r0
    159e:	d00c      	beq.n	15ba <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x232>
    15a0:	4aa6      	ldr	r2, [pc, #664]	; (183c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4b4>)
    15a2:	49a7      	ldr	r1, [pc, #668]	; (1840 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4b8>)
    15a4:	48a7      	ldr	r0, [pc, #668]	; (1844 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4bc>)
    15a6:	f240 73df 	movw	r3, #2015	; 0x7df
    15aa:	f01d f9b7 	bl	1e91c <printk>
    15ae:	4040      	eors	r0, r0
    15b0:	f380 8811 	msr	BASEPRI, r0
    15b4:	f04f 0003 	mov.w	r0, #3
    15b8:	df02      	svc	2
	if (adv->lll.is_hdcd) {
    15ba:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    15be:	07d9      	lsls	r1, r3, #31
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    15c0:	ad0d      	add	r5, sp, #52	; 0x34
	if (adv->lll.is_hdcd) {
    15c2:	d50e      	bpl.n	15e2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x25a>
		ret_cb = TICKER_STATUS_BUSY;
    15c4:	2202      	movs	r2, #2
    15c6:	920d      	str	r2, [sp, #52]	; 0x34
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    15c8:	2103      	movs	r1, #3
    15ca:	4b9f      	ldr	r3, [pc, #636]	; (1848 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4c0>)
    15cc:	9500      	str	r5, [sp, #0]
    15ce:	2201      	movs	r2, #1
    15d0:	2000      	movs	r0, #0
    15d2:	f00d f95f 	bl	e894 <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
    15d6:	4629      	mov	r1, r5
    15d8:	f00f fd0c 	bl	10ff4 <ull_ticker_status_take>
		if (ret) {
    15dc:	2800      	cmp	r0, #0
    15de:	f040 811d 	bne.w	181c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x494>
	ret_cb = TICKER_STATUS_BUSY;
    15e2:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    15e4:	2103      	movs	r1, #3
    15e6:	4b98      	ldr	r3, [pc, #608]	; (1848 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4c0>)
    15e8:	9500      	str	r5, [sp, #0]
    15ea:	2000      	movs	r0, #0
	ret_cb = TICKER_STATUS_BUSY;
    15ec:	920d      	str	r2, [sp, #52]	; 0x34
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    15ee:	f00d f951 	bl	e894 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
    15f2:	4629      	mov	r1, r5
    15f4:	f00f fcfe 	bl	10ff4 <ull_ticker_status_take>
	if (ret) {
    15f8:	2800      	cmp	r0, #0
    15fa:	f040 80f3 	bne.w	17e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x45c>
	}

	ret = ull_disable(&adv->lll);
    15fe:	4893      	ldr	r0, [pc, #588]	; (184c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4c4>)
    1600:	f00f fd5c 	bl	110bc <ull_disable>
	LL_ASSERT(!ret);
    1604:	2800      	cmp	r0, #0
    1606:	f040 80d9 	bne.w	17bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x434>

	mark = ull_disable_unmark(adv);
    160a:	488b      	ldr	r0, [pc, #556]	; (1838 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4b0>)
    160c:	f00f fd26 	bl	1105c <ull_disable_unmark>
	LL_ASSERT(mark == adv);
    1610:	4284      	cmp	r4, r0
    1612:	d00c      	beq.n	162e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2a6>
    1614:	4a89      	ldr	r2, [pc, #548]	; (183c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4b4>)
    1616:	498a      	ldr	r1, [pc, #552]	; (1840 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4b8>)
    1618:	488a      	ldr	r0, [pc, #552]	; (1844 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4bc>)
    161a:	f640 0301 	movw	r3, #2049	; 0x801
    161e:	f01d f97d 	bl	1e91c <printk>
    1622:	4040      	eors	r0, r0
    1624:	f380 8811 	msr	BASEPRI, r0
    1628:	f04f 0003 	mov.w	r0, #3
    162c:	df02      	svc	2
		}
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT && (CONFIG_BT_CTLR_ADV_AUX_SET > 0) */

#if defined(CONFIG_BT_PERIPHERAL)
	if (adv->lll.conn) {
    162e:	6a23      	ldr	r3, [r4, #32]
    1630:	b10b      	cbz	r3, 1636 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2ae>
		conn_release(adv);
    1632:	f010 f90d 	bl	11850 <conn_release.constprop.0>
		ll_rx_link_release(node_rx_adv_term->hdr.link);
		ll_rx_release(node_rx_adv_term);
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	adv->is_enabled = 0U;
    1636:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
		ull_filter_adv_scan_state_cb(0);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	return 0;
    163a:	2600      	movs	r6, #0
	adv->is_enabled = 0U;
    163c:	f36f 0300 	bfc	r3, #0, #1
}
    1640:	4630      	mov	r0, r6
	adv->is_enabled = 0U;
    1642:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
}
    1646:	b00f      	add	sp, #60	; 0x3c
    1648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			adv_size += pdu_adv->len;
    164c:	f899 3001 	ldrb.w	r3, [r9, #1]
    1650:	3310      	adds	r3, #16
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
    1652:	00db      	lsls	r3, r3, #3
    1654:	fb00 f003 	mul.w	r0, r0, r3
    1658:	f500 70aa 	add.w	r0, r0, #340	; 0x154
				   rxtx_turn_us * (adv_chn_cnt - 1);
    165c:	2364      	movs	r3, #100	; 0x64
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
    165e:	fb03 0002 	mla	r0, r3, r2, r0
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    1662:	4a7b      	ldr	r2, [pc, #492]	; (1850 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4c8>)
    1664:	61e4      	str	r4, [r4, #28]
	adv->evt.ticks_xtal_to_start =
    1666:	2331      	movs	r3, #49	; 0x31
    1668:	2500      	movs	r5, #0
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    166a:	fba0 0102 	umull	r0, r1, r0, r2
	adv->evt.ticks_xtal_to_start =
    166e:	6023      	str	r3, [r4, #0]
    1670:	e9c4 5505 	strd	r5, r5, [r4, #20]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    1674:	a36e      	add	r3, pc, #440	; (adr r3, 1830 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4a8>)
    1676:	e9d3 2300 	ldrd	r2, r3, [r3]
	adv->evt.ticks_preempt_to_start =
    167a:	e9c4 5501 	strd	r5, r5, [r4, #4]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    167e:	f7ff f9dd 	bl	a3c <__aeabi_uldivmod>
	uint16_t interval = adv->interval;
    1682:	f8b4 8048 	ldrh.w	r8, [r4, #72]	; 0x48
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    1686:	60e0      	str	r0, [r4, #12]
	ticks_anchor = ticker_ticks_now_get();
    1688:	f00d f94a 	bl	e920 <ticker_ticks_now_get>
    168c:	4607      	mov	r7, r0
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
    168e:	f1b8 0f00 	cmp.w	r8, #0
    1692:	d108      	bne.n	16a6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x31e>
    1694:	f899 5000 	ldrb.w	r5, [r9]
    1698:	f005 050f 	and.w	r5, r5, #15
    169c:	f1a5 0501 	sub.w	r5, r5, #1
    16a0:	fab5 f585 	clz	r5, r5
    16a4:	096d      	lsrs	r5, r5, #5
    16a6:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    16aa:	68e3      	ldr	r3, [r4, #12]
    16ac:	f365 0200 	bfi	r2, r5, #0, #1
	if (lll->is_hdcd) {
    16b0:	f012 0501 	ands.w	r5, r2, #1
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
    16b4:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
	if (lll->is_hdcd) {
    16b8:	d03d      	beq.n	1736 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3ae>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    16ba:	f8df 918c 	ldr.w	r9, [pc, #396]	; 1848 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4c0>
    16be:	4965      	ldr	r1, [pc, #404]	; (1854 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4cc>)
    16c0:	9304      	str	r3, [sp, #16]
    16c2:	2000      	movs	r0, #0
		ret_cb = TICKER_STATUS_BUSY;
    16c4:	2502      	movs	r5, #2
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    16c6:	f10d 0830 	add.w	r8, sp, #48	; 0x30
    16ca:	9301      	str	r3, [sp, #4]
    16cc:	9105      	str	r1, [sp, #20]
    16ce:	e9cd 9807 	strd	r9, r8, [sp, #28]
    16d2:	2103      	movs	r1, #3
    16d4:	e9cd 0002 	strd	r0, r0, [sp, #8]
    16d8:	9406      	str	r4, [sp, #24]
    16da:	462a      	mov	r2, r5
    16dc:	9000      	str	r0, [sp, #0]
    16de:	463b      	mov	r3, r7
		ret_cb = TICKER_STATUS_BUSY;
    16e0:	950c      	str	r5, [sp, #48]	; 0x30
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    16e2:	f00d f84f 	bl	e784 <ticker_start>
		ret = ull_ticker_status_take(ret, &ret_cb);
    16e6:	4641      	mov	r1, r8
    16e8:	f00f fc84 	bl	10ff4 <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
    16ec:	2800      	cmp	r0, #0
    16ee:	f47f af30 	bne.w	1552 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1ca>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    16f2:	4959      	ldr	r1, [pc, #356]	; (1858 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4d0>)
    16f4:	9105      	str	r1, [sp, #20]
    16f6:	f24a 32d8 	movw	r2, #41944	; 0xa3d8
    16fa:	9200      	str	r2, [sp, #0]
    16fc:	e9cd 9807 	strd	r9, r8, [sp, #28]
    1700:	e9cd 0003 	strd	r0, r0, [sp, #12]
    1704:	e9cd 0001 	strd	r0, r0, [sp, #4]
    1708:	9406      	str	r4, [sp, #24]
    170a:	463b      	mov	r3, r7
    170c:	2201      	movs	r2, #1
    170e:	2103      	movs	r1, #3
		ret_cb = TICKER_STATUS_BUSY;
    1710:	950c      	str	r5, [sp, #48]	; 0x30
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1712:	f00d f837 	bl	e784 <ticker_start>
	ret = ull_ticker_status_take(ret, &ret_cb);
    1716:	4641      	mov	r1, r8
    1718:	f00f fc6c 	bl	10ff4 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    171c:	2800      	cmp	r0, #0
    171e:	f47f af18 	bne.w	1552 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1ca>
	adv->is_enabled = 1;
    1722:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
}
    1726:	4630      	mov	r0, r6
	adv->is_enabled = 1;
    1728:	f043 0301 	orr.w	r3, r3, #1
    172c:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
}
    1730:	b00f      	add	sp, #60	; 0x3c
    1732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    1736:	4849      	ldr	r0, [pc, #292]	; (185c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4d4>)
		ll_adv_ticker_ext[handle].ticks_slot_window =
    1738:	4a49      	ldr	r2, [pc, #292]	; (1860 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4d8>)
		ret = ticker_start_ext(
    173a:	f8df e10c 	ldr.w	lr, [pc, #268]	; 1848 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4c0>
    173e:	f8df c114 	ldr.w	ip, [pc, #276]	; 1854 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4cc>
    1742:	9406      	str	r4, [sp, #24]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    1744:	fba8 0100 	umull	r0, r1, r8, r0
    1748:	f04f 0991 	mov.w	r9, #145	; 0x91
    174c:	fb09 1108 	mla	r1, r9, r8, r1
			ULL_ADV_RANDOM_DELAY + ticks_slot;
    1750:	f203 1847 	addw	r8, r3, #327	; 0x147
		ll_adv_ticker_ext[handle].ticks_slot_window =
    1754:	f8c2 8000 	str.w	r8, [r2]
		ret_cb = TICKER_STATUS_BUSY;
    1758:	f04f 0902 	mov.w	r9, #2
		ret = ticker_start_ext(
    175c:	9304      	str	r3, [sp, #16]
    175e:	9209      	str	r2, [sp, #36]	; 0x24
    1760:	f10d 0830 	add.w	r8, sp, #48	; 0x30
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    1764:	a332      	add	r3, pc, #200	; (adr r3, 1830 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4a8>)
    1766:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret = ticker_start_ext(
    176a:	f64f 7aff 	movw	sl, #65535	; 0xffff
    176e:	e9cd e807 	strd	lr, r8, [sp, #28]
    1772:	9502      	str	r5, [sp, #8]
		ret_cb = TICKER_STATUS_BUSY;
    1774:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
		ret = ticker_start_ext(
    1778:	f8cd c014 	str.w	ip, [sp, #20]
    177c:	f8cd a00c 	str.w	sl, [sp, #12]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    1780:	f7ff f95c 	bl	a3c <__aeabi_uldivmod>
		ret = ticker_start_ext(
    1784:	464a      	mov	r2, r9
    1786:	e9cd 5000 	strd	r5, r0, [sp]
    178a:	463b      	mov	r3, r7
    178c:	4628      	mov	r0, r5
    178e:	2103      	movs	r1, #3
    1790:	f00c ffa2 	bl	e6d8 <ticker_start_ext>
    1794:	e7bf      	b.n	1716 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x38e>
			} else if (pdu_adv->type == PDU_ADV_TYPE_SCAN_IND) {
    1796:	2b06      	cmp	r3, #6
    1798:	f43f aebb 	beq.w	1512 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18a>
    179c:	f44f 73da 	mov.w	r3, #436	; 0x1b4
    17a0:	f44f 701b 	mov.w	r0, #620	; 0x26c
    17a4:	e6be      	b.n	1524 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x19c>
			return BT_HCI_ERR_INVALID_PARAM;
    17a6:	2612      	movs	r6, #18
    17a8:	e5ca      	b.n	1340 <ll_adv_enable+0x88>
			conn_release(adv);
    17aa:	f010 f851 	bl	11850 <conn_release.constprop.0>
			return BT_HCI_ERR_HW_FAILURE;
    17ae:	2603      	movs	r6, #3
    17b0:	e5c6      	b.n	1340 <ll_adv_enable+0x88>
    17b2:	f44f 73f2 	mov.w	r3, #484	; 0x1e4
    17b6:	f44f 707f 	mov.w	r0, #1020	; 0x3fc
    17ba:	e6b3      	b.n	1524 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x19c>
	LL_ASSERT(!ret);
    17bc:	4a1f      	ldr	r2, [pc, #124]	; (183c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4b4>)
    17be:	4929      	ldr	r1, [pc, #164]	; (1864 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4dc>)
    17c0:	4820      	ldr	r0, [pc, #128]	; (1844 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4bc>)
    17c2:	f240 73fe 	movw	r3, #2046	; 0x7fe
    17c6:	f01d f8a9 	bl	1e91c <printk>
    17ca:	4040      	eors	r0, r0
    17cc:	f380 8811 	msr	BASEPRI, r0
    17d0:	f04f 0003 	mov.w	r0, #3
    17d4:	df02      	svc	2
    17d6:	e718      	b.n	160a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x282>
			conn_lll->link_tx_free = &conn_lll->link_tx;
    17d8:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    17dc:	6768      	str	r0, [r5, #116]	; 0x74
    17de:	e5cf      	b.n	1380 <ll_adv_enable+0xc8>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    17e0:	2607      	movs	r6, #7
    17e2:	e5ad      	b.n	1340 <ll_adv_enable+0x88>
		mark = ull_disable_unmark(adv);
    17e4:	4814      	ldr	r0, [pc, #80]	; (1838 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4b0>)
    17e6:	f00f fc39 	bl	1105c <ull_disable_unmark>
		LL_ASSERT(mark == adv);
    17ea:	4284      	cmp	r4, r0
    17ec:	f43f ada7 	beq.w	133e <ll_adv_enable+0x86>
    17f0:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
    17f4:	4a11      	ldr	r2, [pc, #68]	; (183c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4b4>)
    17f6:	4912      	ldr	r1, [pc, #72]	; (1840 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4b8>)
    17f8:	4812      	ldr	r0, [pc, #72]	; (1844 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4bc>)
    17fa:	f01d f88f 	bl	1e91c <printk>
    17fe:	4040      	eors	r0, r0
    1800:	f380 8811 	msr	BASEPRI, r0
    1804:	f04f 0003 	mov.w	r0, #3
    1808:	df02      	svc	2
    180a:	e598      	b.n	133e <ll_adv_enable+0x86>
			ll_rx_release(node_rx);
    180c:	4658      	mov	r0, fp
    180e:	f00f fb75 	bl	10efc <ll_rx_release>
			ll_rx_link_release(link);
    1812:	4650      	mov	r0, sl
    1814:	f00f fb66 	bl	10ee4 <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    1818:	2607      	movs	r6, #7
    181a:	e591      	b.n	1340 <ll_adv_enable+0x88>
			mark = ull_disable_unmark(adv);
    181c:	4806      	ldr	r0, [pc, #24]	; (1838 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4b0>)
    181e:	f00f fc1d 	bl	1105c <ull_disable_unmark>
			LL_ASSERT(mark == adv);
    1822:	4284      	cmp	r4, r0
    1824:	f43f ad8b 	beq.w	133e <ll_adv_enable+0x86>
    1828:	f240 73ea 	movw	r3, #2026	; 0x7ea
    182c:	e7e2      	b.n	17f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x46c>
    182e:	bf00      	nop
    1830:	1afd498d 	.word	0x1afd498d
    1834:	00000007 	.word	0x00000007
    1838:	20002238 	.word	0x20002238
    183c:	00024d38 	.word	0x00024d38
    1840:	00024e28 	.word	0x00024e28
    1844:	00024904 	.word	0x00024904
    1848:	0000ff1d 	.word	0x0000ff1d
    184c:	20002254 	.word	0x20002254
    1850:	3b9aca00 	.word	0x3b9aca00
    1854:	000114c1 	.word	0x000114c1
    1858:	00011769 	.word	0x00011769
    185c:	84e72a00 	.word	0x84e72a00
    1860:	2000228c 	.word	0x2000228c
    1864:	00024c98 	.word	0x00024c98

00001868 <event_conn_upd_prep>:
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
}

static inline int event_conn_upd_prep(struct ll_conn *conn, uint16_t lazy,
				      uint32_t ticks_at_expire)
{
    1868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_conn *lll = &conn->lll;
	struct ll_conn *conn_upd;
	uint16_t instant_latency;
	uint16_t event_counter;

	conn_upd = conn_upd_curr;
    186c:	4dc8      	ldr	r5, [pc, #800]	; (1b90 <event_conn_upd_prep+0x328>)

	/* set mutex */
	if (!conn_upd) {
    186e:	682b      	ldr	r3, [r5, #0]
{
    1870:	b08b      	sub	sp, #44	; 0x2c
    1872:	4604      	mov	r4, r0
    1874:	460f      	mov	r7, r1
    1876:	4691      	mov	r9, r2
	if (!conn_upd) {
    1878:	2b00      	cmp	r3, #0
    187a:	f000 8214 	beq.w	1ca6 <event_conn_upd_prep+0x43e>
		conn_upd_curr = conn;
	}

	/* Calculate current event counter */
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    187e:	8e66      	ldrh	r6, [r4, #50]	; 0x32
    1880:	8de2      	ldrh	r2, [r4, #46]	; 0x2e

	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
			  0xffff;
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    1882:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    1886:	4416      	add	r6, r2
    1888:	443e      	add	r6, r7
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    188a:	f013 0307 	ands.w	r3, r3, #7
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    188e:	b2b6      	uxth	r6, r6
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    1890:	f040 81a7 	bne.w	1be2 <event_conn_upd_prep+0x37a>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    1894:	f8b4 80e8 	ldrh.w	r8, [r4, #232]	; 0xe8
    1898:	eba6 0208 	sub.w	r2, r6, r8
    189c:	fa1f fa82 	uxth.w	sl, r2
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
			sys_cpu_to_le16(conn->llcp.conn_upd.instant);
		/* enqueue control PDU */
		ctrl_tx_enqueue(conn, tx);
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
	} else if (instant_latency <= 0x7FFF) {
    18a0:	0412      	lsls	r2, r2, #16
    18a2:	f100 825e 	bmi.w	1d62 <event_conn_upd_prep+0x4fa>
		uint32_t ticker_status;
		uint32_t periodic_us;
		uint16_t latency;

#if defined(CONFIG_BT_PERIPHERAL) && defined(CONFIG_BT_CTLR_LE_ENC)
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
    18a6:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
    18aa:	2a00      	cmp	r2, #0
    18ac:	f2c0 813d 	blt.w	1b2a <event_conn_upd_prep+0x2c2>
			conn->slave.llcp_type = LLCP_NONE;
		} else
#endif /* CONFIG_BT_PERIPHERAL && CONFIG_BT_CTLR_LE_ENC */
		{
			/* procedure request acked */
			conn->llcp_ack = conn->llcp_req;
    18b0:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    18b4:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5

		/* procedure request acked */
		conn->llcp_cu.ack = conn->llcp_cu.req;

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    18b8:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
    18bc:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
		conn->llcp_cu.ack = conn->llcp_cu.req;
    18c0:	f894 110c 	ldrb.w	r1, [r4, #268]	; 0x10c
    18c4:	f884 110d 	strb.w	r1, [r4, #269]	; 0x10d
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    18c8:	4293      	cmp	r3, r2
    18ca:	d006      	beq.n	18da <event_conn_upd_prep+0x72>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    18cc:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    18d0:	f003 0307 	and.w	r3, r3, #7
    18d4:	2b05      	cmp	r3, #5
    18d6:	f000 824f 	beq.w	1d78 <event_conn_upd_prep+0x510>
			conn->procedure_expire = 0U;
		}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

		/* reset mutex */
		if (conn_upd_curr == conn) {
    18da:	682b      	ldr	r3, [r5, #0]
    18dc:	42a3      	cmp	r3, r4
	conn_upd_curr = NULL;
    18de:	bf04      	itt	eq
    18e0:	2300      	moveq	r3, #0
    18e2:	602b      	streq	r3, [r5, #0]
		}

		lll = &conn->lll;

		/* Acquire Rx node */
		rx = conn->llcp_rx;
    18e4:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
		LL_ASSERT(rx && rx->hdr.link);
    18e8:	2d00      	cmp	r5, #0
    18ea:	f000 816b 	beq.w	1bc4 <event_conn_upd_prep+0x35c>
    18ee:	6828      	ldr	r0, [r5, #0]
    18f0:	2800      	cmp	r0, #0
    18f2:	f000 8167 	beq.w	1bc4 <event_conn_upd_prep+0x35c>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Prepare the rx packet structure */
		if ((conn->llcp_cu.interval != lll->interval) ||
    18f6:	f8b4 3110 	ldrh.w	r3, [r4, #272]	; 0x110
    18fa:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
		conn->llcp_rx = rx->hdr.link->mem;
    18fe:	6842      	ldr	r2, [r0, #4]
    1900:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
		if ((conn->llcp_cu.interval != lll->interval) ||
    1904:	4563      	cmp	r3, ip
    1906:	f8b4 2112 	ldrh.w	r2, [r4, #274]	; 0x112
    190a:	f8b4 1114 	ldrh.w	r1, [r4, #276]	; 0x114
    190e:	f000 8120 	beq.w	1b52 <event_conn_upd_prep+0x2ea>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
				       lll->interval * CONN_INT_UNIT_US) !=
		     conn->supervision_reload)) {
			struct node_rx_cu *cu;

			rx->hdr.handle = lll->handle;
    1912:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
    1916:	f8a5 c006 	strh.w	ip, [r5, #6]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    191a:	f04f 0e16 	mov.w	lr, #22

			/* prepare connection update complete structure */
			cu = (void *)rx->pdu;
			cu->status = 0x00;
    191e:	f04f 0c00 	mov.w	ip, #0
			cu->interval = conn->llcp_cu.interval;
    1922:	83eb      	strh	r3, [r5, #30]
			cu->latency = conn->llcp_cu.latency;
    1924:	842a      	strh	r2, [r5, #32]
			cu->timeout = conn->llcp_cu.timeout;
    1926:	8469      	strh	r1, [r5, #34]	; 0x22
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    1928:	f885 e004 	strb.w	lr, [r5, #4]
			cu->status = 0x00;
    192c:	f885 c01c 	strb.w	ip, [r5, #28]
			/* Mark for buffer for release */
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
		}

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
    1930:	4629      	mov	r1, r5
    1932:	f00f fae9 	bl	10f08 <ll_rx_put>
		ll_rx_sched();
    1936:	f00f faf1 	bl	10f1c <ll_rx_sched>

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED)
		/* restore to normal prepare */
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    193a:	6823      	ldr	r3, [r4, #0]
    193c:	2b00      	cmp	r3, #0
    193e:	f2c0 80fc 	blt.w	1b3a <event_conn_upd_prep+0x2d2>
					    ticks_prepare_to_start);
		}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * lll->interval;
    1942:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
		latency = conn_interval_old / conn->llcp_cu.interval;
    1944:	f8b4 5110 	ldrh.w	r5, [r4, #272]	; 0x110
		conn_interval_old = instant_latency * lll->interval;
    1948:	fb10 f00a 	smulbb	r0, r0, sl
    194c:	b280      	uxth	r0, r0
		latency = conn_interval_old / conn->llcp_cu.interval;
    194e:	fbb0 f3f5 	udiv	r3, r0, r5
		conn_interval_new = latency * conn->llcp_cu.interval;
    1952:	fb15 f203 	smulbb	r2, r5, r3
    1956:	b292      	uxth	r2, r2
		if (conn_interval_new > conn_interval_old) {
    1958:	4290      	cmp	r0, r2
		latency = conn_interval_old / conn->llcp_cu.interval;
    195a:	fa1f fb83 	uxth.w	fp, r3
		if (conn_interval_new > conn_interval_old) {
    195e:	f0c0 80d3 	bcc.w	1b08 <event_conn_upd_prep+0x2a0>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
				(conn_interval_new - conn_interval_old) *
				CONN_INT_UNIT_US);
		} else {
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1962:	fb05 0313 	mls	r3, r5, r3, r0
    1966:	f240 42e2 	movw	r2, #1250	; 0x4e2
    196a:	488a      	ldr	r0, [pc, #552]	; (1b94 <event_conn_upd_prep+0x32c>)
    196c:	b29b      	uxth	r3, r3
    196e:	fb02 f303 	mul.w	r3, r2, r3
    1972:	fba3 0100 	umull	r0, r1, r3, r0
    1976:	a384      	add	r3, pc, #528	; (adr r3, 1b88 <event_conn_upd_prep+0x320>)
    1978:	e9d3 2300 	ldrd	r2, r3, [r3]
    197c:	f7ff f85e 	bl	a3c <__aeabi_uldivmod>
    1980:	eba9 0900 	sub.w	r9, r9, r0
				(conn_interval_old - conn_interval_new) *
				CONN_INT_UNIT_US);
		}
		lll->latency_prepare += lazy;
    1984:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
			CONN_INT_UNIT_US;
		periodic_us = conn_interval_us;

		if (0) {
#if defined(CONFIG_BT_PERIPHERAL)
		} else if (lll->role) {
    1986:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		lll->latency_prepare -= (instant_latency - latency);
    198a:	eba8 0606 	sub.w	r6, r8, r6
    198e:	445e      	add	r6, fp
		lll->latency_prepare += lazy;
    1990:	440f      	add	r7, r1
		lll->latency_prepare -= (instant_latency - latency);
    1992:	4437      	add	r7, r6
		conn_interval_us = conn->llcp_cu.interval *
    1994:	f240 48e2 	movw	r8, #1250	; 0x4e2
		} else if (lll->role) {
    1998:	2b00      	cmp	r3, #0
		lll->latency_prepare -= (instant_latency - latency);
    199a:	85e7      	strh	r7, [r4, #46]	; 0x2e
		conn_interval_us = conn->llcp_cu.interval *
    199c:	fb08 f505 	mul.w	r5, r8, r5
		} else if (lll->role) {
    19a0:	f2c0 8183 	blt.w	1caa <event_conn_upd_prep+0x442>
			 */
			ticks_win_offset += 1U;
#endif /* CONFIG_BT_CENTRAL */

		} else {
			LL_ASSERT(0);
    19a4:	4a7c      	ldr	r2, [pc, #496]	; (1b98 <event_conn_upd_prep+0x330>)
    19a6:	497d      	ldr	r1, [pc, #500]	; (1b9c <event_conn_upd_prep+0x334>)
    19a8:	487d      	ldr	r0, [pc, #500]	; (1ba0 <event_conn_upd_prep+0x338>)
    19aa:	f44f 6326 	mov.w	r3, #2656	; 0xa60
    19ae:	f01c ffb5 	bl	1e91c <printk>
    19b2:	4040      	eors	r0, r0
    19b4:	f380 8811 	msr	BASEPRI, r0
    19b8:	f04f 0003 	mov.w	r0, #3
    19bc:	df02      	svc	2
		uint32_t ticks_win_offset = 0;
    19be:	2700      	movs	r7, #0
		periodic_us = conn_interval_us;
    19c0:	46aa      	mov	sl, r5

		lll->interval = conn->llcp_cu.interval;
		lll->latency = conn->llcp_cu.latency;

		conn->supervision_reload =
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    19c2:	f8b4 2114 	ldrh.w	r2, [r4, #276]	; 0x114
		lll->latency = conn->llcp_cu.latency;
    19c6:	f8b4 0112 	ldrh.w	r0, [r4, #274]	; 0x112
		conn->procedure_reload =
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);

#if defined(CONFIG_BT_CTLR_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    19ca:	4b76      	ldr	r3, [pc, #472]	; (1ba4 <event_conn_upd_prep+0x33c>)
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    19cc:	4976      	ldr	r1, [pc, #472]	; (1ba8 <event_conn_upd_prep+0x340>)
		lll->latency = conn->llcp_cu.latency;
    19ce:	85a0      	strh	r0, [r4, #44]	; 0x2c
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    19d0:	f242 7c10 	movw	ip, #10000	; 0x2710
    19d4:	fb0c 5202 	mla	r2, ip, r2, r5
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    19d8:	442b      	add	r3, r5
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    19da:	4429      	add	r1, r5
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    19dc:	fbb3 f3f5 	udiv	r3, r3, r5
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    19e0:	f100 0c06 	add.w	ip, r0, #6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    19e4:	3a01      	subs	r2, #1
    19e6:	fbb2 f2f5 	udiv	r2, r2, r5
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    19ea:	fbb1 f5f5 	udiv	r5, r1, r5
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    19ee:	b299      	uxth	r1, r3
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    19f0:	f8a4 20c2 	strh.w	r2, [r4, #194]	; 0xc2
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    19f4:	4561      	cmp	r1, ip
		lll->interval = conn->llcp_cu.interval;
    19f6:	f8b4 2110 	ldrh.w	r2, [r4, #272]	; 0x110
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    19fa:	f8a4 10ce 	strh.w	r1, [r4, #206]	; 0xce
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    19fe:	f8a4 50c6 	strh.w	r5, [r4, #198]	; 0xc6
		lll->interval = conn->llcp_cu.interval;
    1a02:	8562      	strh	r2, [r4, #42]	; 0x2a
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1a04:	dd02      	ble.n	1a0c <event_conn_upd_prep+0x1a4>
				     (conn->apto_reload - (lll->latency + 6)) :
    1a06:	1a09      	subs	r1, r1, r0
    1a08:	3906      	subs	r1, #6
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1a0a:	b289      	uxth	r1, r1
				     conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

		if (conn->llcp_cu.cmd) {
    1a0c:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1a10:	f8a4 10ca 	strh.w	r1, [r4, #202]	; 0xca
		if (conn->llcp_cu.cmd) {
    1a14:	071b      	lsls	r3, r3, #28
			conn->supervision_expire = 0U;
    1a16:	bf44      	itt	mi
    1a18:	2300      	movmi	r3, #0
    1a1a:	f8a4 30c4 	strhmi.w	r3, [r4, #196]	; 0xc4
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		uint32_t mayfly_was_enabled =
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    1a1e:	2102      	movs	r1, #2
    1a20:	2001      	movs	r0, #1
    1a22:	f018 fb6d 	bl	1a100 <mayfly_is_enabled>
					  TICKER_USER_ID_ULL_LOW);
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    1a26:	2200      	movs	r2, #0
    1a28:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    1a2a:	4605      	mov	r5, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    1a2c:	2001      	movs	r0, #1
    1a2e:	f00b fbf7 	bl	d220 <mayfly_enable>
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    1a32:	495e      	ldr	r1, [pc, #376]	; (1bac <event_conn_upd_prep+0x344>)
    1a34:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    1a38:	4620      	mov	r0, r4
    1a3a:	f00b fb83 	bl	d144 <mem_index_get>
			      0);
#endif

		/* start slave/master with new timings */
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    1a3e:	f100 0803 	add.w	r8, r0, #3
    1a42:	fa5f f888 	uxtb.w	r8, r8
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
    1a46:	4b5a      	ldr	r3, [pc, #360]	; (1bb0 <event_conn_upd_prep+0x348>)
    1a48:	9400      	str	r4, [sp, #0]
    1a4a:	4642      	mov	r2, r8
    1a4c:	2101      	movs	r1, #1
    1a4e:	2000      	movs	r0, #0
    1a50:	f00c ff20 	bl	e894 <ticker_stop>
					    TICKER_USER_ID_ULL_HIGH,
					    ticker_id_conn,
					    ticker_stop_conn_op_cb,
					    (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    1a54:	f030 0302 	bics.w	r3, r0, #2
    1a58:	d00c      	beq.n	1a74 <event_conn_upd_prep+0x20c>
    1a5a:	4a4f      	ldr	r2, [pc, #316]	; (1b98 <event_conn_upd_prep+0x330>)
    1a5c:	4955      	ldr	r1, [pc, #340]	; (1bb4 <event_conn_upd_prep+0x34c>)
    1a5e:	4850      	ldr	r0, [pc, #320]	; (1ba0 <event_conn_upd_prep+0x338>)
    1a60:	f640 238f 	movw	r3, #2703	; 0xa8f
    1a64:	f01c ff5a 	bl	1e91c <printk>
    1a68:	4040      	eors	r0, r0
    1a6a:	f380 8811 	msr	BASEPRI, r0
    1a6e:	f04f 0003 	mov.w	r0, #3
    1a72:	df02      	svc	2
		ticker_status =
			ticker_start(TICKER_INSTANCE_ID_CTLR,
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ticks_at_expire, ticks_win_offset,
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    1a74:	4b47      	ldr	r3, [pc, #284]	; (1b94 <event_conn_upd_prep+0x32c>)
    1a76:	fbaa ab03 	umull	sl, fp, sl, r3
    1a7a:	4650      	mov	r0, sl
    1a7c:	a342      	add	r3, pc, #264	; (adr r3, 1b88 <event_conn_upd_prep+0x320>)
    1a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1a82:	4659      	mov	r1, fp
    1a84:	f7fe ffda 	bl	a3c <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
    1a88:	4a4b      	ldr	r2, [pc, #300]	; (1bb8 <event_conn_upd_prep+0x350>)
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1a8a:	68e3      	ldr	r3, [r4, #12]
    1a8c:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(periodic_us),
    1a8e:	f020 467f 	bic.w	r6, r0, #4278190080	; 0xff000000
    1a92:	fba6 2302 	umull	r2, r3, r6, r2
    1a96:	2007      	movs	r0, #7
    1a98:	fb00 3306 	mla	r3, r0, r6, r3
    1a9c:	ebba 0002 	subs.w	r0, sl, r2
    1aa0:	eb6b 0103 	sbc.w	r1, fp, r3
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1aa4:	f8df e114 	ldr.w	lr, [pc, #276]	; 1bbc <event_conn_upd_prep+0x354>
    1aa8:	f8df c114 	ldr.w	ip, [pc, #276]	; 1bc0 <event_conn_upd_prep+0x358>
    1aac:	9408      	str	r4, [sp, #32]
    1aae:	9406      	str	r4, [sp, #24]
				     HAL_TICKER_REMAINDER(periodic_us),
    1ab0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1ab4:	2300      	movs	r3, #0
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1ab6:	f64f 74fe 	movw	r4, #65534	; 0xfffe
    1aba:	f8cd e01c 	str.w	lr, [sp, #28]
    1abe:	f8cd c014 	str.w	ip, [sp, #20]
    1ac2:	9403      	str	r4, [sp, #12]
				     HAL_TICKER_REMAINDER(periodic_us),
    1ac4:	f7fe ffba 	bl	a3c <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1ac8:	464b      	mov	r3, r9
    1aca:	e9cd 6001 	strd	r6, r0, [sp, #4]
    1ace:	9700      	str	r7, [sp, #0]
    1ad0:	4642      	mov	r2, r8
    1ad2:	2101      	movs	r1, #1
    1ad4:	2000      	movs	r0, #0
    1ad6:	f00c fe55 	bl	e784 <ticker_start>
#else
				     ull_master_ticker_cb,
#endif
				     conn, ticker_start_conn_op_cb,
				     (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    1ada:	f030 0302 	bics.w	r3, r0, #2
    1ade:	d00c      	beq.n	1afa <event_conn_upd_prep+0x292>
    1ae0:	4a2d      	ldr	r2, [pc, #180]	; (1b98 <event_conn_upd_prep+0x330>)
    1ae2:	4934      	ldr	r1, [pc, #208]	; (1bb4 <event_conn_upd_prep+0x34c>)
    1ae4:	482e      	ldr	r0, [pc, #184]	; (1ba0 <event_conn_upd_prep+0x338>)
    1ae6:	f640 23a9 	movw	r3, #2729	; 0xaa9
    1aea:	f01c ff17 	bl	1e91c <printk>
    1aee:	4040      	eors	r0, r0
    1af0:	f380 8811 	msr	BASEPRI, r0
    1af4:	f04f 0003 	mov.w	r0, #3
    1af8:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* enable ticker job, if disabled in this function */
		if (mayfly_was_enabled) {
    1afa:	2d00      	cmp	r5, #0
    1afc:	f040 8136 	bne.w	1d6c <event_conn_upd_prep+0x504>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
				      TICKER_USER_ID_ULL_LOW, 1);
		}
#endif

		return 0;
    1b00:	2000      	movs	r0, #0
	}

	return -EINPROGRESS;
}
    1b02:	b00b      	add	sp, #44	; 0x2c
    1b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    1b08:	1a12      	subs	r2, r2, r0
    1b0a:	f240 43e2 	movw	r3, #1250	; 0x4e2
    1b0e:	4821      	ldr	r0, [pc, #132]	; (1b94 <event_conn_upd_prep+0x32c>)
    1b10:	fb03 f202 	mul.w	r2, r3, r2
    1b14:	fba2 0100 	umull	r0, r1, r2, r0
    1b18:	a31b      	add	r3, pc, #108	; (adr r3, 1b88 <event_conn_upd_prep+0x320>)
    1b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b1e:	f7fe ff8d 	bl	a3c <__aeabi_uldivmod>
    1b22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1b26:	4481      	add	r9, r0
    1b28:	e72c      	b.n	1984 <event_conn_upd_prep+0x11c>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
    1b2a:	f894 20d9 	ldrb.w	r2, [r4, #217]	; 0xd9
    1b2e:	2a00      	cmp	r2, #0
    1b30:	f43f aebe 	beq.w	18b0 <event_conn_upd_prep+0x48>
			conn->slave.llcp_type = LLCP_NONE;
    1b34:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
    1b38:	e6be      	b.n	18b8 <event_conn_upd_prep+0x50>
			uint32_t ticks_prepare_to_start =
    1b3a:	e9d4 0201 	ldrd	r0, r2, [r4, #4]
			conn->evt.ticks_xtal_to_start &= ~XON_BITMASK;
    1b3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    1b42:	4282      	cmp	r2, r0
    1b44:	bf2c      	ite	cs
    1b46:	4491      	addcs	r9, r2
    1b48:	4481      	addcc	r9, r0
    1b4a:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->evt.ticks_xtal_to_start -
    1b4c:	eba9 0903 	sub.w	r9, r9, r3
    1b50:	e6f7      	b.n	1942 <event_conn_upd_prep+0xda>
		if ((conn->llcp_cu.interval != lll->interval) ||
    1b52:	f8b4 c02c 	ldrh.w	ip, [r4, #44]	; 0x2c
    1b56:	4594      	cmp	ip, r2
    1b58:	f47f aedb 	bne.w	1912 <event_conn_upd_prep+0xaa>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    1b5c:	f240 4ce2 	movw	ip, #1250	; 0x4e2
    1b60:	fb0c fb03 	mul.w	fp, ip, r3
    1b64:	f242 7c10 	movw	ip, #10000	; 0x2710
		    (conn->llcp_cu.latency != lll->latency) ||
    1b68:	f8b4 e0c2 	ldrh.w	lr, [r4, #194]	; 0xc2
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    1b6c:	fb0c bc01 	mla	ip, ip, r1, fp
    1b70:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    1b74:	fbbc fcfb 	udiv	ip, ip, fp
		    (conn->llcp_cu.latency != lll->latency) ||
    1b78:	fa1f fc8c 	uxth.w	ip, ip
    1b7c:	45e6      	cmp	lr, ip
    1b7e:	f47f aec8 	bne.w	1912 <event_conn_upd_prep+0xaa>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    1b82:	2301      	movs	r3, #1
    1b84:	712b      	strb	r3, [r5, #4]
    1b86:	e6d3      	b.n	1930 <event_conn_upd_prep+0xc8>
    1b88:	1afd498d 	.word	0x1afd498d
    1b8c:	00000007 	.word	0x00000007
    1b90:	200022ac 	.word	0x200022ac
    1b94:	3b9aca00 	.word	0x3b9aca00
    1b98:	00024e44 	.word	0x00024e44
    1b9c:	00024974 	.word	0x00024974
    1ba0:	00024904 	.word	0x00024904
    1ba4:	01c9c37f 	.word	0x01c9c37f
    1ba8:	026259ff 	.word	0x026259ff
    1bac:	200012a8 	.word	0x200012a8
    1bb0:	000120e5 	.word	0x000120e5
    1bb4:	00024f24 	.word	0x00024f24
    1bb8:	1afd498d 	.word	0x1afd498d
    1bbc:	0001208d 	.word	0x0001208d
    1bc0:	000168ed 	.word	0x000168ed
		LL_ASSERT(rx && rx->hdr.link);
    1bc4:	4a80      	ldr	r2, [pc, #512]	; (1dc8 <event_conn_upd_prep+0x560>)
    1bc6:	4981      	ldr	r1, [pc, #516]	; (1dcc <event_conn_upd_prep+0x564>)
    1bc8:	4881      	ldr	r0, [pc, #516]	; (1dd0 <event_conn_upd_prep+0x568>)
    1bca:	f640 13e4 	movw	r3, #2532	; 0x9e4
    1bce:	f01c fea5 	bl	1e91c <printk>
    1bd2:	4040      	eors	r0, r0
    1bd4:	f380 8811 	msr	BASEPRI, r0
    1bd8:	f04f 0003 	mov.w	r0, #3
    1bdc:	df02      	svc	2
    1bde:	6828      	ldr	r0, [r5, #0]
    1be0:	e689      	b.n	18f6 <event_conn_upd_prep+0x8e>
		rx = ll_pdu_rx_alloc_peek(1);
    1be2:	2001      	movs	r0, #1
    1be4:	f00f f9a0 	bl	10f28 <ll_pdu_rx_alloc_peek>
		if (!rx) {
    1be8:	4607      	mov	r7, r0
    1bea:	2800      	cmp	r0, #0
    1bec:	f000 80ca 	beq.w	1d84 <event_conn_upd_prep+0x51c>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1bf0:	4878      	ldr	r0, [pc, #480]	; (1dd4 <event_conn_upd_prep+0x56c>)
    1bf2:	f00b fa73 	bl	d0dc <mem_acquire>
		if (!tx) {
    1bf6:	4605      	mov	r5, r0
    1bf8:	2800      	cmp	r0, #0
    1bfa:	f000 80c3 	beq.w	1d84 <event_conn_upd_prep+0x51c>
		(void)ll_pdu_rx_alloc();
    1bfe:	f00f f9b1 	bl	10f64 <ll_pdu_rx_alloc>
		rx->hdr.link->mem = conn->llcp_rx;
    1c02:	683a      	ldr	r2, [r7, #0]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1c04:	792b      	ldrb	r3, [r5, #4]
		rx->hdr.link->mem = conn->llcp_rx;
    1c06:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
    1c0a:	6051      	str	r1, [r2, #4]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1c0c:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    1c10:	220c      	movs	r2, #12
		conn->llcp_rx = rx;
    1c12:	f8c4 7108 	str.w	r7, [r4, #264]	; 0x108
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    1c16:	716a      	strb	r2, [r5, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1c18:	712b      	strb	r3, [r5, #4]
		conn->llcp.conn_upd.instant = event_counter +
    1c1a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
    1c1c:	f8d4 2118 	ldr.w	r2, [r4, #280]	; 0x118
    1c20:	4f6d      	ldr	r7, [pc, #436]	; (1dd8 <event_conn_upd_prep+0x570>)
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    1c22:	f894 110e 	ldrb.w	r1, [r4, #270]	; 0x10e
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    1c26:	2000      	movs	r0, #0
		conn->llcp.conn_upd.instant = event_counter +
    1c28:	441e      	add	r6, r3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    1c2a:	71e8      	strb	r0, [r5, #7]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
    1c2c:	fba7 3202 	umull	r3, r2, r7, r2
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    1c30:	f3c2 228f 	ubfx	r2, r2, #10, #16
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
    1c34:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
    1c38:	722b      	strb	r3, [r5, #8]
	    conn->tx_head &&
    1c3a:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    1c3e:	f8a5 2009 	strh.w	r2, [r5, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    1c42:	f8b4 2110 	ldrh.w	r2, [r4, #272]	; 0x110
    1c46:	f8a5 200b 	strh.w	r2, [r5, #11]
					      conn->lll.latency + 6;
    1c4a:	3606      	adds	r6, #6
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    1c4c:	f8b4 2112 	ldrh.w	r2, [r4, #274]	; 0x112
    1c50:	f8a5 200d 	strh.w	r2, [r5, #13]
					      conn->lll.latency + 6;
    1c54:	b2b6      	uxth	r6, r6
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    1c56:	f8b4 2114 	ldrh.w	r2, [r4, #276]	; 0x114
    1c5a:	f8a5 200f 	strh.w	r2, [r5, #15]
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    1c5e:	f360 0102 	bfi	r1, r0, #0, #3
		conn->llcp.conn_upd.instant = event_counter +
    1c62:	f8a4 60e8 	strh.w	r6, [r4, #232]	; 0xe8
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    1c66:	f884 110e 	strb.w	r1, [r4, #270]	; 0x10e
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    1c6a:	f8a5 6011 	strh.w	r6, [r5, #17]
	if (
    1c6e:	2b00      	cmp	r3, #0
    1c70:	d069      	beq.n	1d46 <event_conn_upd_prep+0x4de>
	    !conn->llcp_enc.pause_tx &&
    1c72:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
    1c76:	0790      	lsls	r0, r2, #30
    1c78:	d465      	bmi.n	1d46 <event_conn_upd_prep+0x4de>
	    !conn->llcp_phy.pause_tx &&
    1c7a:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
    1c7e:	07d1      	lsls	r1, r2, #31
    1c80:	d461      	bmi.n	1d46 <event_conn_upd_prep+0x4de>
		if (conn->tx_head == conn->tx_data) {
    1c82:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
    1c86:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
    1c88:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
    1c8c:	f000 8085 	beq.w	1d9a <event_conn_upd_prep+0x532>
		} else if (!conn->tx_ctrl) {
    1c90:	2a00      	cmp	r2, #0
    1c92:	d15b      	bne.n	1d4c <event_conn_upd_prep+0x4e4>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    1c94:	791a      	ldrb	r2, [r3, #4]
    1c96:	f002 0203 	and.w	r2, r2, #3
    1c9a:	2a03      	cmp	r2, #3
    1c9c:	f000 8089 	beq.w	1db2 <event_conn_upd_prep+0x54a>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    1ca0:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
    1ca4:	e054      	b.n	1d50 <event_conn_upd_prep+0x4e8>
		conn_upd_curr = conn;
    1ca6:	6028      	str	r0, [r5, #0]
    1ca8:	e5e9      	b.n	187e <event_conn_upd_prep+0x16>
			lll->slave.window_widening_prepare_us -=
    1caa:	6ca2      	ldr	r2, [r4, #72]	; 0x48
				lll->slave.window_widening_periodic_us *
    1cac:	6c23      	ldr	r3, [r4, #64]	; 0x40
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1cae:	4f4b      	ldr	r7, [pc, #300]	; (1ddc <event_conn_upd_prep+0x574>)
			lll->slave.window_widening_prepare_us -=
    1cb0:	fb03 231a 	mls	r3, r3, sl, r2
    1cb4:	64a3      	str	r3, [r4, #72]	; 0x48
				(((lll_clock_ppm_local_get() +
    1cb6:	f016 fb27 	bl	18308 <lll_clock_ppm_local_get>
    1cba:	4606      	mov	r6, r0
				   lll_clock_ppm_get(conn->slave.sca)) *
    1cbc:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
    1cc0:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    1cc4:	f016 fb22 	bl	1830c <lll_clock_ppm_get>
				(((lll_clock_ppm_local_get() +
    1cc8:	4406      	add	r6, r0
				   lll_clock_ppm_get(conn->slave.sca)) *
    1cca:	fb05 f606 	mul.w	r6, r5, r6
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    1cce:	4b44      	ldr	r3, [pc, #272]	; (1de0 <event_conn_upd_prep+0x578>)
			lll->slave.window_widening_prepare_us +=
    1cd0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
    1cd2:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    1cd6:	f506 2674 	add.w	r6, r6, #999424	; 0xf4000
    1cda:	f206 263f 	addw	r6, r6, #575	; 0x23f
    1cde:	fba3 3606 	umull	r3, r6, r3, r6
    1ce2:	0cb6      	lsrs	r6, r6, #18
				lll->slave.window_widening_periodic_us *
    1ce4:	fb06 f00b 	mul.w	r0, r6, fp
				(conn_interval_us >> 1) - EVENT_IFS_US;
    1ce8:	086b      	lsrs	r3, r5, #1
			lll->slave.window_widening_prepare_us +=
    1cea:	4402      	add	r2, r0
				(conn_interval_us >> 1) - EVENT_IFS_US;
    1cec:	3b96      	subs	r3, #150	; 0x96
			lll->slave.window_widening_prepare_us +=
    1cee:	429a      	cmp	r2, r3
    1cf0:	bf28      	it	cs
    1cf2:	461a      	movcs	r2, r3
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
    1cf4:	fb08 fc01 	mul.w	ip, r8, r1
			conn->slave.ticks_to_offset = 0U;
    1cf8:	f04f 0e00 	mov.w	lr, #0
			lll->slave.window_widening_max_us =
    1cfc:	e9c4 3211 	strd	r3, r2, [r4, #68]	; 0x44
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1d00:	fba0 0107 	umull	r0, r1, r0, r7
    1d04:	a32e      	add	r3, pc, #184	; (adr r3, 1dc0 <event_conn_upd_prep+0x558>)
    1d06:	e9d3 2300 	ldrd	r2, r3, [r3]
			lll->slave.window_size_prepare_us =
    1d0a:	f8c4 c050 	str.w	ip, [r4, #80]	; 0x50
			conn->slave.ticks_to_offset = 0U;
    1d0e:	f8c4 e0e0 	str.w	lr, [r4, #224]	; 0xe0
			lll->slave.window_widening_periodic_us =
    1d12:	6426      	str	r6, [r4, #64]	; 0x40
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1d14:	f7fe fe92 	bl	a3c <__aeabi_uldivmod>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1d18:	4b2f      	ldr	r3, [pc, #188]	; (1dd8 <event_conn_upd_prep+0x570>)
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1d1a:	4684      	mov	ip, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1d1c:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
    1d20:	fba3 3000 	umull	r3, r0, r3, r0
    1d24:	0a80      	lsrs	r0, r0, #10
    1d26:	fb08 f000 	mul.w	r0, r8, r0
    1d2a:	fba0 0107 	umull	r0, r1, r0, r7
    1d2e:	a324      	add	r3, pc, #144	; (adr r3, 1dc0 <event_conn_upd_prep+0x558>)
    1d30:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1d34:	eba9 090c 	sub.w	r9, r9, ip
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1d38:	f7fe fe80 	bl	a3c <__aeabi_uldivmod>
			periodic_us -= lll->slave.window_widening_periodic_us;
    1d3c:	eba5 0a06 	sub.w	sl, r5, r6
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1d40:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
			periodic_us -= lll->slave.window_widening_periodic_us;
    1d44:	e63d      	b.n	19c2 <event_conn_upd_prep+0x15a>
		if (!conn->tx_ctrl) {
    1d46:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
    1d4a:	b302      	cbz	r2, 1d8e <event_conn_upd_prep+0x526>
	tx->next = conn->tx_ctrl_last->next;
    1d4c:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    1d50:	681a      	ldr	r2, [r3, #0]
    1d52:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
    1d54:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
    1d56:	682b      	ldr	r3, [r5, #0]
    1d58:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
	if (!tx->next) {
    1d5c:	b90b      	cbnz	r3, 1d62 <event_conn_upd_prep+0x4fa>
		conn->tx_data_last = tx;
    1d5e:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
	return -EINPROGRESS;
    1d62:	f06f 0076 	mvn.w	r0, #118	; 0x76
}
    1d66:	b00b      	add	sp, #44	; 0x2c
    1d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
    1d6c:	2201      	movs	r2, #1
    1d6e:	4610      	mov	r0, r2
    1d70:	2102      	movs	r1, #2
    1d72:	f00b fa55 	bl	d220 <mayfly_enable>
    1d76:	e6c3      	b.n	1b00 <event_conn_upd_prep+0x298>
			conn->procedure_expire = 0U;
    1d78:	2300      	movs	r3, #0
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    1d7a:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
			conn->procedure_expire = 0U;
    1d7e:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
    1d82:	e5aa      	b.n	18da <event_conn_upd_prep+0x72>
			return -ENOBUFS;
    1d84:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    1d88:	b00b      	add	sp, #44	; 0x2c
    1d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tx->next = conn->tx_head;
    1d8e:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
    1d90:	e9c4 5571 	strd	r5, r5, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    1d94:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
    1d98:	e7e0      	b.n	1d5c <event_conn_upd_prep+0x4f4>
			conn->tx_data = conn->tx_data->next;
    1d9a:	6819      	ldr	r1, [r3, #0]
    1d9c:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    1da0:	2a00      	cmp	r2, #0
    1da2:	d1d3      	bne.n	1d4c <event_conn_upd_prep+0x4e4>
			tx->next = conn->tx_head->next;
    1da4:	681a      	ldr	r2, [r3, #0]
    1da6:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
    1da8:	601d      	str	r5, [r3, #0]
				conn->tx_ctrl = tx;
    1daa:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
    1dac:	e9c4 5572 	strd	r5, r5, [r4, #456]	; 0x1c8
    1db0:	e7d4      	b.n	1d5c <event_conn_upd_prep+0x4f4>
	    ((pdu_data_tx->llctrl.opcode !=
    1db2:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    1db4:	2a03      	cmp	r2, #3
    1db6:	d0f5      	beq.n	1da4 <event_conn_upd_prep+0x53c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    1db8:	2a0a      	cmp	r2, #10
    1dba:	f47f af71 	bne.w	1ca0 <event_conn_upd_prep+0x438>
    1dbe:	e7f1      	b.n	1da4 <event_conn_upd_prep+0x53c>
    1dc0:	1afd498d 	.word	0x1afd498d
    1dc4:	00000007 	.word	0x00000007
    1dc8:	00024e44 	.word	0x00024e44
    1dcc:	00024f10 	.word	0x00024f10
    1dd0:	00024904 	.word	0x00024904
    1dd4:	20002330 	.word	0x20002330
    1dd8:	d1b71759 	.word	0xd1b71759
    1ddc:	3b9aca00 	.word	0x3b9aca00
    1de0:	431bde83 	.word	0x431bde83
    1de4:	00000000 	.word	0x00000000

00001de8 <ull_slave_setup>:
static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *params);

void ull_slave_setup(memq_link_t *link, struct node_rx_hdr *rx,
		     struct node_rx_ftr *ftr, struct lll_conn *lll)
{
    1de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1dec:	460f      	mov	r7, r1
    1dee:	4616      	mov	r6, r2
    1df0:	4681      	mov	r9, r0
	conn = lll->hdr.parent;

	/* Populate the slave context */
	pdu_adv = (void *)((struct node_rx_pdu *)rx)->pdu;

	peer_addr_type = pdu_adv->tx_addr;
    1df2:	7f0a      	ldrb	r2, [r1, #28]
    1df4:	f857 0f1e 	ldr.w	r0, [r7, #30]!
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);

#if defined(CONFIG_BT_CTLR_PRIVACY)
	uint8_t rl_idx = ftr->rl_idx;
    1df8:	f896 a012 	ldrb.w	sl, [r6, #18]
    1dfc:	88bc      	ldrh	r4, [r7, #4]
	conn = lll->hdr.parent;
    1dfe:	f8d3 8000 	ldr.w	r8, [r3]
{
    1e02:	b095      	sub	sp, #84	; 0x54
    1e04:	460d      	mov	r5, r1
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    1e06:	6831      	ldr	r1, [r6, #0]
    1e08:	f8ad 404c 	strh.w	r4, [sp, #76]	; 0x4c
	peer_addr_type = pdu_adv->tx_addr;
    1e0c:	f3c2 1280 	ubfx	r2, r2, #6, #1

	if (rl_idx != FILTER_IDX_NONE) {
    1e10:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    1e14:	f8d1 b000 	ldr.w	fp, [r1]
	peer_addr_type = pdu_adv->tx_addr;
    1e18:	9012      	str	r0, [sp, #72]	; 0x48
{
    1e1a:	461c      	mov	r4, r3
	peer_addr_type = pdu_adv->tx_addr;
    1e1c:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
	if (rl_idx != FILTER_IDX_NONE) {
    1e20:	d148      	bne.n	1eb4 <ull_slave_setup+0xcc>
		peer_addr_type += 2;
	} else {
#else /* CONFIG_BT_CTLR_PRIVACY */
	if (1) {
#endif /* CONFIG_BT_CTLR_PRIVACY */
		memcpy(peer_id_addr, peer_addr, BDADDR_SIZE);
    1e22:	ab12      	add	r3, sp, #72	; 0x48
    1e24:	e893 0003 	ldmia.w	r3, {r0, r1}
    1e28:	9010      	str	r0, [sp, #64]	; 0x40
    1e2a:	f8ad 1044 	strh.w	r1, [sp, #68]	; 0x44
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    1e2e:	462a      	mov	r2, r5
    1e30:	462b      	mov	r3, r5
    1e32:	f832 1f2e 	ldrh.w	r1, [r2, #46]!
    1e36:	7892      	ldrb	r2, [r2, #2]
    1e38:	72a2      	strb	r2, [r4, #10]
    1e3a:	8121      	strh	r1, [r4, #8]
    1e3c:	f8d5 202a 	ldr.w	r2, [r5, #42]	; 0x2a
    1e40:	6062      	str	r2, [r4, #4]
    1e42:	f853 2f3a 	ldr.w	r2, [r3, #58]!
    1e46:	61a2      	str	r2, [r4, #24]
	memcpy(conn->own_addr, own_addr, sizeof(conn->own_addr));
#endif /* CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN */

	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    1e48:	f104 0018 	add.w	r0, r4, #24
    1e4c:	791b      	ldrb	r3, [r3, #4]
    1e4e:	7103      	strb	r3, [r0, #4]
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    1e50:	2105      	movs	r1, #5
    1e52:	f00b fb0f 	bl	d474 <util_ones_count_get>
			       sizeof(lll->data_chan_map));
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    1e56:	f895 203f 	ldrb.w	r2, [r5, #63]	; 0x3f
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    1e5a:	7f63      	ldrb	r3, [r4, #29]
    1e5c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    1e60:	f360 0305 	bfi	r3, r0, #0, #6
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    1e64:	f3c2 0104 	ubfx	r1, r2, #0, #5
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    1e68:	7763      	strb	r3, [r4, #29]
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    1e6a:	77a1      	strb	r1, [r4, #30]
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    1e6c:	8eaf      	ldrh	r7, [r5, #52]	; 0x34
    1e6e:	81e7      	strh	r7, [r4, #14]
	if ((lll->data_chan_count < 2) || (lll->data_chan_hop < 5) ||
    1e70:	2801      	cmp	r0, #1
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    1e72:	b2bf      	uxth	r7, r7
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    1e74:	f002 031f 	and.w	r3, r2, #31
	if ((lll->data_chan_count < 2) || (lll->data_chan_hop < 5) ||
    1e78:	d905      	bls.n	1e86 <ull_slave_setup+0x9e>
    1e7a:	331b      	adds	r3, #27
    1e7c:	f003 031f 	and.w	r3, r3, #31
    1e80:	2b0b      	cmp	r3, #11
    1e82:	d800      	bhi.n	1e86 <ull_slave_setup+0x9e>
	    (lll->data_chan_hop > 16) || !lll->interval) {
    1e84:	bb17      	cbnz	r7, 1ecc <ull_slave_setup+0xe4>
		lll->slave.initiated = 0U;
    1e86:	f894 3020 	ldrb.w	r3, [r4, #32]

		/* Mark for buffer for release */
		rx->type = NODE_RX_TYPE_RELEASE;
    1e8a:	2701      	movs	r7, #1
		lll->slave.initiated = 0U;
    1e8c:	f36f 0300 	bfc	r3, #0, #1
    1e90:	f884 3020 	strb.w	r3, [r4, #32]
		rx->type = NODE_RX_TYPE_RELEASE;
    1e94:	712f      	strb	r7, [r5, #4]
			struct node_rx_pdu *rx_csa;

			/* pick the rx node instance stored within the
			 * connection rx node.
			 */
			rx_csa = (void *)ftr->extra;
    1e96:	6874      	ldr	r4, [r6, #4]

			/* Enqueue the connection event to be release */
			ll_rx_put(link, rx);
    1e98:	4648      	mov	r0, r9
    1e9a:	4629      	mov	r1, r5
    1e9c:	f00f f834 	bl	10f08 <ll_rx_put>
			/* Mark for buffer for release */
			rx->type = NODE_RX_TYPE_RELEASE;
		}

		/* Enqueue connection or CSA event to be release */
		ll_rx_put(link, rx);
    1ea0:	6820      	ldr	r0, [r4, #0]
			rx->type = NODE_RX_TYPE_RELEASE;
    1ea2:	7127      	strb	r7, [r4, #4]
		ll_rx_put(link, rx);
    1ea4:	4621      	mov	r1, r4
    1ea6:	f00f f82f 	bl	10f08 <ll_rx_put>
		ll_rx_sched();
    1eaa:	f00f f837 	bl	10f1c <ll_rx_sched>
	/* enable ticker job, irrespective of disabled in this function so
	 * first connection event can be scheduled as soon as possible.
	 */
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
#endif
}
    1eae:	b015      	add	sp, #84	; 0x54
    1eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ll_rl_id_addr_get(rl_idx, &peer_addr_type, peer_id_addr);
    1eb4:	aa10      	add	r2, sp, #64	; 0x40
    1eb6:	f10d 013f 	add.w	r1, sp, #63	; 0x3f
    1eba:	4650      	mov	r0, sl
    1ebc:	f014 ffb0 	bl	16e20 <ll_rl_id_addr_get>
		peer_addr_type += 2;
    1ec0:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
    1ec4:	3302      	adds	r3, #2
    1ec6:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
    1eca:	e7b0      	b.n	1e2e <ull_slave_setup+0x46>
	((struct lll_adv *)ftr->param)->conn = NULL;
    1ecc:	6833      	ldr	r3, [r6, #0]
	conn->slave.sca = pdu_adv->connect_ind.sca;
    1ece:	f898 10d8 	ldrb.w	r1, [r8, #216]	; 0xd8
	((struct lll_adv *)ftr->param)->conn = NULL;
    1ed2:	2000      	movs	r0, #0
    1ed4:	6058      	str	r0, [r3, #4]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    1ed6:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
    1eda:	f895 0037 	ldrb.w	r0, [r5, #55]	; 0x37
	conn->slave.sca = pdu_adv->connect_ind.sca;
    1ede:	0952      	lsrs	r2, r2, #5
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    1ee0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	conn->slave.sca = pdu_adv->connect_ind.sca;
    1ee4:	f362 01c5 	bfi	r1, r2, #3, #3
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    1ee8:	8223      	strh	r3, [r4, #16]
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    1eea:	f240 42e2 	movw	r2, #1250	; 0x4e2
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    1eee:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
	conn->slave.sca = pdu_adv->connect_ind.sca;
    1ef0:	f888 10d8 	strb.w	r1, [r8, #216]	; 0xd8
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    1ef4:	fb02 f707 	mul.w	r7, r2, r7
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    1ef8:	930b      	str	r3, [sp, #44]	; 0x2c
		(((lll_clock_ppm_local_get() +
    1efa:	f016 fa05 	bl	18308 <lll_clock_ppm_local_get>
    1efe:	4603      	mov	r3, r0
		   lll_clock_ppm_get(conn->slave.sca)) *
    1f00:	f898 00d8 	ldrb.w	r0, [r8, #216]	; 0xd8
		(((lll_clock_ppm_local_get() +
    1f04:	930a      	str	r3, [sp, #40]	; 0x28
		   lll_clock_ppm_get(conn->slave.sca)) *
    1f06:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    1f0a:	f016 f9ff 	bl	1830c <lll_clock_ppm_get>
		(((lll_clock_ppm_local_get() +
    1f0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    1f10:	f8df e2d8 	ldr.w	lr, [pc, #728]	; 21ec <ull_slave_setup+0x404>
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size *
    1f14:	f895 c031 	ldrb.w	ip, [r5, #49]	; 0x31
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1f18:	49ab      	ldr	r1, [pc, #684]	; (21c8 <ull_slave_setup+0x3e0>)
		(((lll_clock_ppm_local_get() +
    1f1a:	4403      	add	r3, r0
		   lll_clock_ppm_get(conn->slave.sca)) *
    1f1c:	fb07 f303 	mul.w	r3, r7, r3
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    1f20:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    1f24:	f203 233f 	addw	r3, r3, #575	; 0x23f
    1f28:	fbae 2303 	umull	r2, r3, lr, r3
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    1f2c:	ea4f 0e57 	mov.w	lr, r7, lsr #1
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size *
    1f30:	f240 42e2 	movw	r2, #1250	; 0x4e2
    1f34:	fb02 f20c 	mul.w	r2, r2, ip
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    1f38:	0c9b      	lsrs	r3, r3, #18
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    1f3a:	f1ae 0e96 	sub.w	lr, lr, #150	; 0x96
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size *
    1f3e:	63a2      	str	r2, [r4, #56]	; 0x38
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    1f40:	f8c4 e028 	str.w	lr, [r4, #40]	; 0x28
	lll->slave.window_widening_periodic_us =
    1f44:	6263      	str	r3, [r4, #36]	; 0x24
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    1f46:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1f48:	8a20      	ldrh	r0, [r4, #16]
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1f4a:	f8df c2a4 	ldr.w	ip, [pc, #676]	; 21f0 <ull_slave_setup+0x408>
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    1f4e:	f242 7210 	movw	r2, #10000	; 0x2710
    1f52:	fb02 7203 	mla	r2, r2, r3, r7
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1f56:	4439      	add	r1, r7
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1f58:	f100 0e06 	add.w	lr, r0, #6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    1f5c:	3a01      	subs	r2, #1
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1f5e:	fbb1 f1f7 	udiv	r1, r1, r7
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    1f62:	fbb2 f2f7 	udiv	r2, r2, r7
    1f66:	f8a8 20c2 	strh.w	r2, [r8, #194]	; 0xc2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1f6a:	b28a      	uxth	r2, r1
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1f6c:	4572      	cmp	r2, lr
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1f6e:	44bc      	add	ip, r7
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1f70:	f8a8 20ce 	strh.w	r2, [r8, #206]	; 0xce
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1f74:	fbbc fcf7 	udiv	ip, ip, r7
    1f78:	f8a8 c0c6 	strh.w	ip, [r8, #198]	; 0xc6
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1f7c:	dd02      	ble.n	1f84 <ull_slave_setup+0x19c>
			     (conn->apto_reload - (lll->latency + 6)) :
    1f7e:	1a12      	subs	r2, r2, r0
    1f80:	3a06      	subs	r2, #6
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1f82:	b292      	uxth	r2, r2
    1f84:	f8a8 20ca 	strh.w	r2, [r8, #202]	; 0xca
    1f88:	6862      	ldr	r2, [r4, #4]
    1f8a:	f8c8 20dc 	str.w	r2, [r8, #220]	; 0xdc
		chan_sel = pdu_adv->chan_sel;
    1f8e:	7f2a      	ldrb	r2, [r5, #28]
    1f90:	930c      	str	r3, [sp, #48]	; 0x30
	cc->status = 0U;
    1f92:	f44f 7180 	mov.w	r1, #256	; 0x100
    1f96:	83a9      	strh	r1, [r5, #28]
		chan_sel = pdu_adv->chan_sel;
    1f98:	f3c2 1340 	ubfx	r3, r2, #5, #1
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    1f9c:	f89b 0026 	ldrb.w	r0, [fp, #38]	; 0x26
		chan_sel = pdu_adv->chan_sel;
    1fa0:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    1fa4:	930a      	str	r3, [sp, #40]	; 0x28
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    1fa6:	f015 fc6d 	bl	17884 <ull_filter_lll_lrpa_used>
    1faa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1fac:	f105 022b 	add.w	r2, r5, #43	; 0x2b
    1fb0:	2800      	cmp	r0, #0
    1fb2:	f000 80e0 	beq.w	2176 <ull_slave_setup+0x38e>
    1fb6:	4629      	mov	r1, r5
    1fb8:	f851 0f24 	ldr.w	r0, [r1, #36]!
    1fbc:	f8c5 002b 	str.w	r0, [r5, #43]	; 0x2b
    1fc0:	8889      	ldrh	r1, [r1, #4]
    1fc2:	8091      	strh	r1, [r2, #4]
	if (rl_idx != FILTER_IDX_NONE) {
    1fc4:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    1fc8:	f000 80d9 	beq.w	217e <ull_slave_setup+0x396>
    1fcc:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
    1fd0:	9812      	ldr	r0, [sp, #72]	; 0x48
    1fd2:	f8a5 2029 	strh.w	r2, [r5, #41]	; 0x29
    1fd6:	f8c5 0025 	str.w	r0, [r5, #37]	; 0x25
	cc->peer_addr_type = peer_addr_type;
    1fda:	f89d 103f 	ldrb.w	r1, [sp, #63]	; 0x3f
    1fde:	9810      	ldr	r0, [sp, #64]	; 0x40
    1fe0:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
    1fe4:	77a9      	strb	r1, [r5, #30]
    1fe6:	f8c5 001f 	str.w	r0, [r5, #31]
    1fea:	f8a5 2023 	strh.w	r2, [r5, #35]	; 0x23
	cc->sca = conn->slave.sca;
    1fee:	f898 20d8 	ldrb.w	r2, [r8, #216]	; 0xd8
	cc->interval = lll->interval;
    1ff2:	89e0      	ldrh	r0, [r4, #14]
	cc->latency = lll->latency;
    1ff4:	8a21      	ldrh	r1, [r4, #16]
    1ff6:	86a9      	strh	r1, [r5, #52]	; 0x34
	cc->sca = conn->slave.sca;
    1ff8:	f3c2 02c2 	ubfx	r2, r2, #3, #3
	cc->timeout = timeout;
    1ffc:	86eb      	strh	r3, [r5, #54]	; 0x36
	cc->interval = lll->interval;
    1ffe:	8668      	strh	r0, [r5, #50]	; 0x32
	cc->sca = conn->slave.sca;
    2000:	f885 2038 	strb.w	r2, [r5, #56]	; 0x38
	lll->handle = ll_conn_handle_get(conn);
    2004:	4640      	mov	r0, r8
    2006:	f010 fbf5 	bl	127f4 <ll_conn_handle_get>
		ll_rx_put(link, rx);
    200a:	4629      	mov	r1, r5
	lll->handle = ll_conn_handle_get(conn);
    200c:	81a0      	strh	r0, [r4, #12]
	rx->handle = lll->handle;
    200e:	80e8      	strh	r0, [r5, #6]
		rx_csa = (void *)ftr->extra;
    2010:	6875      	ldr	r5, [r6, #4]
		ll_rx_put(link, rx);
    2012:	4648      	mov	r0, r9
    2014:	f00e ff78 	bl	10f08 <ll_rx_put>
		rx->handle = lll->handle;
    2018:	89a3      	ldrh	r3, [r4, #12]
    201a:	80eb      	strh	r3, [r5, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    201c:	2319      	movs	r3, #25
    201e:	712b      	strb	r3, [r5, #4]
		if (chan_sel) {
    2020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		link = rx->link;
    2022:	f8d5 9000 	ldr.w	r9, [r5]
		if (chan_sel) {
    2026:	2b00      	cmp	r3, #0
    2028:	f040 80b7 	bne.w	219a <ull_slave_setup+0x3b2>
			cs->csa = 0x00;
    202c:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    2030:	772b      	strb	r3, [r5, #28]
	ll_rx_put(link, rx);
    2032:	4629      	mov	r1, r5
    2034:	4648      	mov	r0, r9
    2036:	f00e ff67 	bl	10f08 <ll_rx_put>
	ll_rx_sched();
    203a:	f00e ff6f 	bl	10f1c <ll_rx_sched>
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    203e:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
    2042:	2101      	movs	r1, #1
    2044:	f000 0007 	and.w	r0, r0, #7
    2048:	f015 ffba 	bl	17fc0 <lll_radio_rx_ready_delay_get>
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    204c:	4a5f      	ldr	r2, [pc, #380]	; (21cc <ull_slave_setup+0x3e4>)
	conn->evt.ticks_active_to_start = 0U;
    204e:	2500      	movs	r5, #0
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    2050:	4681      	mov	r9, r0
	conn->evt.ticks_xtal_to_start =
    2052:	2331      	movs	r3, #49	; 0x31
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2054:	f200 4052 	addw	r0, r0, #1106	; 0x452
    2058:	fba0 0102 	umull	r0, r1, r0, r2
	conn->evt.ticks_xtal_to_start =
    205c:	f8c8 3000 	str.w	r3, [r8]
	conn->evt.ticks_preempt_to_start =
    2060:	e9c8 5501 	strd	r5, r5, [r8, #4]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2064:	a356      	add	r3, pc, #344	; (adr r3, 21c0 <ull_slave_setup+0x3d8>)
    2066:	e9d3 2300 	ldrd	r2, r3, [r3]
    206a:	f7fe fce7 	bl	a3c <__aeabi_uldivmod>
	conn_offset_us = ftr->radio_end_us;
    206e:	68f3      	ldr	r3, [r6, #12]
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    2070:	990b      	ldr	r1, [sp, #44]	; 0x2c
	conn_interval_us -= lll->slave.window_widening_periodic_us;
    2072:	6a64      	ldr	r4, [r4, #36]	; 0x24
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    2074:	f240 42e2 	movw	r2, #1250	; 0x4e2
    2078:	fb02 3301 	mla	r3, r2, r1, r3
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    207c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn_offset_us -= EVENT_JITTER_US;
    2080:	f203 3386 	addw	r3, r3, #902	; 0x386
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    2084:	462a      	mov	r2, r5
    2086:	2102      	movs	r1, #2
	conn->evt.ticks_slot =
    2088:	f8c8 000c 	str.w	r0, [r8, #12]
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    208c:	2001      	movs	r0, #1
	conn_offset_us -= ready_delay_us;
    208e:	eba3 0909 	sub.w	r9, r3, r9
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    2092:	f00b f8c5 	bl	d220 <mayfly_enable>
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
    2096:	4658      	mov	r0, fp
    2098:	f00f fd74 	bl	11b84 <ull_adv_handle_get>
    209c:	1c82      	adds	r2, r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    209e:	4b4c      	ldr	r3, [pc, #304]	; (21d0 <ull_slave_setup+0x3e8>)
    20a0:	f8cd b000 	str.w	fp, [sp]
    20a4:	b2d2      	uxtb	r2, r2
    20a6:	4628      	mov	r0, r5
    20a8:	2101      	movs	r1, #1
    20aa:	f00c fbf3 	bl	e894 <ticker_stop>
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void ticker_op_stop_adv_cb(uint32_t status, void *param)
{
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    20ae:	2801      	cmp	r0, #1
	conn_interval_us -= lll->slave.window_widening_periodic_us;
    20b0:	eba7 0404 	sub.w	r4, r7, r4
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    20b4:	d07c      	beq.n	21b0 <ull_slave_setup+0x3c8>
	if (adv->lll.is_hdcd) {
    20b6:	f89b 3024 	ldrb.w	r3, [fp, #36]	; 0x24
    20ba:	07db      	lsls	r3, r3, #31
    20bc:	d465      	bmi.n	218a <ull_slave_setup+0x3a2>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    20be:	4640      	mov	r0, r8
    20c0:	f010 fb98 	bl	127f4 <ll_conn_handle_get>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    20c4:	f8df b104 	ldr.w	fp, [pc, #260]	; 21cc <ull_slave_setup+0x3e4>
    20c8:	fba4 450b 	umull	r4, r5, r4, fp
    20cc:	a33c      	add	r3, pc, #240	; (adr r3, 21c0 <ull_slave_setup+0x3d8>)
    20ce:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    20d2:	4607      	mov	r7, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    20d4:	4629      	mov	r1, r5
    20d6:	4620      	mov	r0, r4
    20d8:	f7fe fcb0 	bl	a3c <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(conn_interval_us),
    20dc:	4a3d      	ldr	r2, [pc, #244]	; (21d4 <ull_slave_setup+0x3ec>)
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    20de:	f8cd 8018 	str.w	r8, [sp, #24]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    20e2:	f020 4a7f 	bic.w	sl, r0, #4278190080	; 0xff000000
    20e6:	fbaa 2302 	umull	r2, r3, sl, r2
    20ea:	2107      	movs	r1, #7
    20ec:	fb01 330a 	mla	r3, r1, sl, r3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    20f0:	f240 11a1 	movw	r1, #417	; 0x1a1
    20f4:	68b6      	ldr	r6, [r6, #8]
    20f6:	9108      	str	r1, [sp, #32]
    20f8:	4937      	ldr	r1, [pc, #220]	; (21d8 <ull_slave_setup+0x3f0>)
    20fa:	9107      	str	r1, [sp, #28]
    20fc:	4937      	ldr	r1, [pc, #220]	; (21dc <ull_slave_setup+0x3f4>)
    20fe:	9105      	str	r1, [sp, #20]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2100:	1aa0      	subs	r0, r4, r2
    2102:	eb65 0103 	sbc.w	r1, r5, r3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2106:	f8d8 300c 	ldr.w	r3, [r8, #12]
    210a:	9304      	str	r3, [sp, #16]
    210c:	2400      	movs	r4, #0
				     HAL_TICKER_REMAINDER(conn_interval_us),
    210e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2112:	2300      	movs	r3, #0
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2114:	9403      	str	r4, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2116:	f7fe fc91 	bl	a3c <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    211a:	a329      	add	r3, pc, #164	; (adr r3, 21c0 <ull_slave_setup+0x3d8>)
    211c:	e9d3 2300 	ldrd	r2, r3, [r3]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2120:	4605      	mov	r5, r0
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    2122:	fba9 010b 	umull	r0, r1, r9, fp
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2126:	e9cd a501 	strd	sl, r5, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    212a:	f7fe fc87 	bl	a3c <__aeabi_uldivmod>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    212e:	3703      	adds	r7, #3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2130:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2134:	b2ff      	uxtb	r7, r7
    2136:	3e31      	subs	r6, #49	; 0x31
    2138:	4633      	mov	r3, r6
    213a:	9000      	str	r0, [sp, #0]
    213c:	463a      	mov	r2, r7
    213e:	4620      	mov	r0, r4
    2140:	2101      	movs	r1, #1
    2142:	f00c fb1f 	bl	e784 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    2146:	f030 0302 	bics.w	r3, r0, #2
    214a:	d00c      	beq.n	2166 <ull_slave_setup+0x37e>
    214c:	4a24      	ldr	r2, [pc, #144]	; (21e0 <ull_slave_setup+0x3f8>)
    214e:	4925      	ldr	r1, [pc, #148]	; (21e4 <ull_slave_setup+0x3fc>)
    2150:	4825      	ldr	r0, [pc, #148]	; (21e8 <ull_slave_setup+0x400>)
    2152:	f44f 73d1 	mov.w	r3, #418	; 0x1a2
    2156:	f01c fbe1 	bl	1e91c <printk>
    215a:	4040      	eors	r0, r0
    215c:	f380 8811 	msr	BASEPRI, r0
    2160:	f04f 0003 	mov.w	r0, #3
    2164:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    2166:	2201      	movs	r2, #1
    2168:	4610      	mov	r0, r2
    216a:	2102      	movs	r1, #2
    216c:	f00b f858 	bl	d220 <mayfly_enable>
}
    2170:	b015      	add	sp, #84	; 0x54
    2172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    2176:	f8c5 002b 	str.w	r0, [r5, #43]	; 0x2b
    217a:	8090      	strh	r0, [r2, #4]
    217c:	e722      	b.n	1fc4 <ull_slave_setup+0x1dc>
    217e:	2100      	movs	r1, #0
    2180:	f8c5 1025 	str.w	r1, [r5, #37]	; 0x25
    2184:	f8a5 1029 	strh.w	r1, [r5, #41]	; 0x29
    2188:	e727      	b.n	1fda <ull_slave_setup+0x1f2>
		ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    218a:	2300      	movs	r3, #0
    218c:	2201      	movs	r2, #1
    218e:	9300      	str	r3, [sp, #0]
    2190:	4618      	mov	r0, r3
    2192:	4611      	mov	r1, r2
    2194:	f00c fb7e 	bl	e894 <ticker_stop>
    2198:	e791      	b.n	20be <ull_slave_setup+0x2d6>
			lll->data_chan_sel = 1;
    219a:	7f63      	ldrb	r3, [r4, #29]
    219c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    21a0:	7763      	strb	r3, [r4, #29]
			lll->data_chan_id = lll_chan_id(lll->access_addr);
    21a2:	1d20      	adds	r0, r4, #4
    21a4:	f014 fcc4 	bl	16b30 <lll_chan_id>
			cs->csa = 0x01;
    21a8:	2301      	movs	r3, #1
			lll->data_chan_id = lll_chan_id(lll->access_addr);
    21aa:	83e0      	strh	r0, [r4, #30]
			cs->csa = 0x01;
    21ac:	772b      	strb	r3, [r5, #28]
    21ae:	e740      	b.n	2032 <ull_slave_setup+0x24a>
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    21b0:	f00e ff60 	bl	11074 <ull_disable_mark_get>
    21b4:	4583      	cmp	fp, r0
    21b6:	f43f af7e 	beq.w	20b6 <ull_slave_setup+0x2ce>
    21ba:	f014 fb73 	bl	168a4 <ticker_op_stop_adv_cb.part.0>
    21be:	e77a      	b.n	20b6 <ull_slave_setup+0x2ce>
    21c0:	1afd498d 	.word	0x1afd498d
    21c4:	00000007 	.word	0x00000007
    21c8:	01c9c37f 	.word	0x01c9c37f
    21cc:	3b9aca00 	.word	0x3b9aca00
    21d0:	000168d1 	.word	0x000168d1
    21d4:	1afd498d 	.word	0x1afd498d
    21d8:	00016875 	.word	0x00016875
    21dc:	000168ed 	.word	0x000168ed
    21e0:	0002506c 	.word	0x0002506c
    21e4:	00024f24 	.word	0x00024f24
    21e8:	00024904 	.word	0x00024904
    21ec:	431bde83 	.word	0x431bde83
    21f0:	026259ff 	.word	0x026259ff
    21f4:	00000000 	.word	0x00000000

000021f8 <SX1276SetChannel>:
    return SX1276.Settings.State;
}

void SX1276SetChannel( uint32_t freq )
{
    SX1276.Settings.Channel = freq;
    21f8:	4b11      	ldr	r3, [pc, #68]	; (2240 <SX1276SetChannel+0x48>)
{
    21fa:	b510      	push	{r4, lr}
    SX1276.Settings.Channel = freq;
    21fc:	f8c3 00e4 	str.w	r0, [r3, #228]	; 0xe4
    freq = ( uint32_t )( ( double )freq / ( double )FREQ_STEP );
    2200:	f7fe f8c0 	bl	384 <__aeabi_ui2d>
    2204:	a30c      	add	r3, pc, #48	; (adr r3, 2238 <SX1276SetChannel+0x40>)
    2206:	e9d3 2300 	ldrd	r2, r3, [r3]
    220a:	f7fe fa5f 	bl	6cc <__aeabi_ddiv>
    220e:	f7fe fbf5 	bl	9fc <__aeabi_d2uiz>
    2212:	4604      	mov	r4, r0
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freq >> 16 ) & 0xFF ) );
    2214:	f3c0 4107 	ubfx	r1, r0, #16, #8
    2218:	2006      	movs	r0, #6
    221a:	f020 fe64 	bl	22ee6 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freq >> 8 ) & 0xFF ) );
    221e:	f3c4 2107 	ubfx	r1, r4, #8, #8
    2222:	2007      	movs	r0, #7
    2224:	f020 fe5f 	bl	22ee6 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( freq & 0xFF ) );
    2228:	b2e1      	uxtb	r1, r4
    222a:	2008      	movs	r0, #8
}
    222c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SX1276Write( REG_FRFLSB, ( uint8_t )( freq & 0xFF ) );
    2230:	f020 be59 	b.w	22ee6 <SX1276Write>
    2234:	f3af 8000 	nop.w
    2238:	00000000 	.word	0x00000000
    223c:	404e8480 	.word	0x404e8480
    2240:	20002bbc 	.word	0x20002bbc
    2244:	00000000 	.word	0x00000000

00002248 <RxChainCalibration>:
 * Performs the Rx chain calibration for LF and HF bands
 * \remark Must be called just after the reset so all registers are at their
 *         default values
 */
static void RxChainCalibration( void )
{
    2248:	b570      	push	{r4, r5, r6, lr}
    uint8_t regPaConfigInitVal;
    uint32_t initialFreq;

    // Save context
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
    224a:	2009      	movs	r0, #9
    224c:	f020 fe56 	bl	22efc <SX1276Read>
    2250:	4605      	mov	r5, r0
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
    2252:	2006      	movs	r0, #6
    2254:	f020 fe52 	bl	22efc <SX1276Read>
    2258:	4606      	mov	r6, r0
                              ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
    225a:	2007      	movs	r0, #7
    225c:	f020 fe4e 	bl	22efc <SX1276Read>
    2260:	0204      	lsls	r4, r0, #8
                              ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) * ( double )FREQ_STEP;
    2262:	2008      	movs	r0, #8
    2264:	f020 fe4a 	bl	22efc <SX1276Read>
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
    2268:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
    226c:	4320      	orrs	r0, r4
    226e:	f7fe f889 	bl	384 <__aeabi_ui2d>
                              ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) * ( double )FREQ_STEP;
    2272:	a31b      	add	r3, pc, #108	; (adr r3, 22e0 <RxChainCalibration+0x98>)
    2274:	e9d3 2300 	ldrd	r2, r3, [r3]
    2278:	f7fe f8fe 	bl	478 <__aeabi_dmul>
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
    227c:	f7fe fbbe 	bl	9fc <__aeabi_d2uiz>

    // Cut the PA just in case, RFO output, power = -1 dBm
    SX1276Write( REG_PACONFIG, 0x00 );
    2280:	2100      	movs	r1, #0
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
    2282:	4604      	mov	r4, r0
    SX1276Write( REG_PACONFIG, 0x00 );
    2284:	2009      	movs	r0, #9
    2286:	f020 fe2e 	bl	22ee6 <SX1276Write>

    // Launch Rx chain calibration for LF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
    228a:	203b      	movs	r0, #59	; 0x3b
    228c:	f020 fe36 	bl	22efc <SX1276Read>
    2290:	f040 0140 	orr.w	r1, r0, #64	; 0x40
    2294:	b2c9      	uxtb	r1, r1
    2296:	203b      	movs	r0, #59	; 0x3b
    2298:	f020 fe25 	bl	22ee6 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
    229c:	203b      	movs	r0, #59	; 0x3b
    229e:	f020 fe2d 	bl	22efc <SX1276Read>
    22a2:	0682      	lsls	r2, r0, #26
    22a4:	d4fa      	bmi.n	229c <RxChainCalibration+0x54>
    {
    }

    // Sets a Frequency in HF band
    SX1276SetChannel( 868000000 );
    22a6:	4810      	ldr	r0, [pc, #64]	; (22e8 <RxChainCalibration+0xa0>)
    22a8:	f7ff ffa6 	bl	21f8 <SX1276SetChannel>

    // Launch Rx chain calibration for HF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
    22ac:	203b      	movs	r0, #59	; 0x3b
    22ae:	f020 fe25 	bl	22efc <SX1276Read>
    22b2:	f040 0140 	orr.w	r1, r0, #64	; 0x40
    22b6:	b2c9      	uxtb	r1, r1
    22b8:	203b      	movs	r0, #59	; 0x3b
    22ba:	f020 fe14 	bl	22ee6 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
    22be:	203b      	movs	r0, #59	; 0x3b
    22c0:	f020 fe1c 	bl	22efc <SX1276Read>
    22c4:	0683      	lsls	r3, r0, #26
    22c6:	d4fa      	bmi.n	22be <RxChainCalibration+0x76>
    {
    }

    // Restore context
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
    22c8:	4629      	mov	r1, r5
    22ca:	2009      	movs	r0, #9
    22cc:	f020 fe0b 	bl	22ee6 <SX1276Write>
    SX1276SetChannel( initialFreq );
    22d0:	4620      	mov	r0, r4
}
    22d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    SX1276SetChannel( initialFreq );
    22d6:	f7ff bf8f 	b.w	21f8 <SX1276SetChannel>
    22da:	bf00      	nop
    22dc:	f3af 8000 	nop.w
    22e0:	00000000 	.word	0x00000000
    22e4:	404e8480 	.word	0x404e8480
    22e8:	33bca100 	.word	0x33bca100
    22ec:	00000000 	.word	0x00000000

000022f0 <SX1276GetTimeOnAir>:
        break;
    }
}

uint32_t SX1276GetTimeOnAir( RadioModems_t modem, uint8_t pktLen )
{
    22f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    22f4:	4688      	mov	r8, r1
    uint32_t airTime = 0;

    switch( modem )
    22f6:	b120      	cbz	r0, 2302 <SX1276GetTimeOnAir+0x12>
    22f8:	2801      	cmp	r0, #1
    22fa:	d055      	beq.n	23a8 <SX1276GetTimeOnAir+0xb8>
    22fc:	2000      	movs	r0, #0
            airTime = floor( tOnAir * 1000 + 0.999 );
        }
        break;
    }
    return airTime;
}
    22fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
    2302:	4c71      	ldr	r4, [pc, #452]	; (24c8 <SX1276GetTimeOnAir+0x1d8>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
    2304:	2027      	movs	r0, #39	; 0x27
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
    2306:	f8b4 50fc 	ldrh.w	r5, [r4, #252]	; 0xfc
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
    230a:	f020 fdf7 	bl	22efc <SX1276Read>
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
    230e:	3501      	adds	r5, #1
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
    2310:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
    2314:	4428      	add	r0, r5
    2316:	f7fe f845 	bl	3a4 <__aeabi_i2d>
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
    231a:	f894 30fe 	ldrb.w	r3, [r4, #254]	; 0xfe
    231e:	2200      	movs	r2, #0
    2320:	2b00      	cmp	r3, #0
    2322:	d13c      	bne.n	239e <SX1276GetTimeOnAir+0xae>
    2324:	4b69      	ldr	r3, [pc, #420]	; (24cc <SX1276GetTimeOnAir+0x1dc>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
    2326:	f7fd fef1 	bl	10c <__adddf3>
    232a:	4606      	mov	r6, r0
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
    232c:	2030      	movs	r0, #48	; 0x30
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
    232e:	460f      	mov	r7, r1
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
    2330:	f020 fde4 	bl	22efc <SX1276Read>
    2334:	f030 03f9 	bics.w	r3, r0, #249	; 0xf9
    2338:	bf14      	ite	ne
    233a:	4b64      	ldrne	r3, [pc, #400]	; (24cc <SX1276GetTimeOnAir+0x1dc>)
    233c:	2300      	moveq	r3, #0
    233e:	2200      	movs	r2, #0
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
    2340:	4630      	mov	r0, r6
    2342:	4639      	mov	r1, r7
    2344:	f7fd fee2 	bl	10c <__adddf3>
    2348:	4606      	mov	r6, r0
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
    234a:	4640      	mov	r0, r8
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
    234c:	460f      	mov	r7, r1
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
    234e:	f7fe f829 	bl	3a4 <__aeabi_i2d>
    2352:	4602      	mov	r2, r0
    2354:	460b      	mov	r3, r1
    2356:	4630      	mov	r0, r6
    2358:	4639      	mov	r1, r7
    235a:	f7fd fed7 	bl	10c <__adddf3>
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
    235e:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
    2362:	2200      	movs	r2, #0
    2364:	b9eb      	cbnz	r3, 23a2 <SX1276GetTimeOnAir+0xb2>
    2366:	2300      	movs	r3, #0
                                     pktLen +
    2368:	f7fd fed0 	bl	10c <__adddf3>
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
    236c:	4b58      	ldr	r3, [pc, #352]	; (24d0 <SX1276GetTimeOnAir+0x1e0>)
    236e:	2200      	movs	r2, #0
    2370:	f7fe f882 	bl	478 <__aeabi_dmul>
    2374:	4606      	mov	r6, r0
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
    2376:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
    237a:	460f      	mov	r7, r1
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
    237c:	f7fe f802 	bl	384 <__aeabi_ui2d>
    2380:	4602      	mov	r2, r0
    2382:	460b      	mov	r3, r1
    2384:	4630      	mov	r0, r6
    2386:	4639      	mov	r1, r7
    2388:	f7fe f9a0 	bl	6cc <__aeabi_ddiv>
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
    238c:	4b51      	ldr	r3, [pc, #324]	; (24d4 <SX1276GetTimeOnAir+0x1e4>)
    238e:	2200      	movs	r2, #0
    2390:	f7fe f872 	bl	478 <__aeabi_dmul>
    2394:	f01c f966 	bl	1e664 <round>
            airTime = floor( tOnAir * 1000 + 0.999 );
    2398:	f7fe fb30 	bl	9fc <__aeabi_d2uiz>
    return airTime;
    239c:	e7af      	b.n	22fe <SX1276GetTimeOnAir+0xe>
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
    239e:	2300      	movs	r3, #0
    23a0:	e7c1      	b.n	2326 <SX1276GetTimeOnAir+0x36>
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
    23a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    23a6:	e7df      	b.n	2368 <SX1276GetTimeOnAir+0x78>
            switch( SX1276.Settings.LoRa.Bandwidth )
    23a8:	4a47      	ldr	r2, [pc, #284]	; (24c8 <SX1276GetTimeOnAir+0x1d8>)
    23aa:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    23ae:	3b07      	subs	r3, #7
    23b0:	2b02      	cmp	r3, #2
    23b2:	4692      	mov	sl, r2
    23b4:	d87f      	bhi.n	24b6 <SX1276GetTimeOnAir+0x1c6>
    23b6:	4a48      	ldr	r2, [pc, #288]	; (24d8 <SX1276GetTimeOnAir+0x1e8>)
    23b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    23bc:	e9d3 4500 	ldrd	r4, r5, [r3]
            double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
    23c0:	f8da b124 	ldr.w	fp, [sl, #292]	; 0x124
    23c4:	2001      	movs	r0, #1
    23c6:	fa00 f00b 	lsl.w	r0, r0, fp
    23ca:	f7fd ffeb 	bl	3a4 <__aeabi_i2d>
    23ce:	4602      	mov	r2, r0
    23d0:	460b      	mov	r3, r1
    23d2:	4620      	mov	r0, r4
    23d4:	4629      	mov	r1, r5
    23d6:	f7fe f979 	bl	6cc <__aeabi_ddiv>
    23da:	4602      	mov	r2, r0
    23dc:	460b      	mov	r3, r1
            double ts = 1 / rs;
    23de:	2000      	movs	r0, #0
    23e0:	493a      	ldr	r1, [pc, #232]	; (24cc <SX1276GetTimeOnAir+0x1dc>)
    23e2:	f7fe f973 	bl	6cc <__aeabi_ddiv>
    23e6:	4604      	mov	r4, r0
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
    23e8:	f8ba 012a 	ldrh.w	r0, [sl, #298]	; 0x12a
            double ts = 1 / rs;
    23ec:	460d      	mov	r5, r1
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
    23ee:	f7fd ffd9 	bl	3a4 <__aeabi_i2d>
    23f2:	4b3a      	ldr	r3, [pc, #232]	; (24dc <SX1276GetTimeOnAir+0x1ec>)
    23f4:	2200      	movs	r2, #0
    23f6:	f7fd fe89 	bl	10c <__adddf3>
    23fa:	4622      	mov	r2, r4
    23fc:	462b      	mov	r3, r5
    23fe:	f7fe f83b 	bl	478 <__aeabi_dmul>
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
    2402:	f89a 212c 	ldrb.w	r2, [sl, #300]	; 0x12c
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
    2406:	f89a 312e 	ldrb.w	r3, [sl, #302]	; 0x12e
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
    240a:	460f      	mov	r7, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
    240c:	ea4f 018b 	mov.w	r1, fp, lsl #2
    2410:	f1c1 011c 	rsb	r1, r1, #28
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
    2414:	2a00      	cmp	r2, #0
    2416:	eb01 1303 	add.w	r3, r1, r3, lsl #4
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
    241a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
    241e:	4606      	mov	r6, r0
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
    2420:	bf14      	ite	ne
    2422:	2014      	movne	r0, #20
    2424:	2000      	moveq	r0, #0
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
    2426:	1a18      	subs	r0, r3, r0
    2428:	f7fd ffac 	bl	384 <__aeabi_ui2d>
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
    242c:	f89a 3128 	ldrb.w	r3, [sl, #296]	; 0x128
    2430:	2b00      	cmp	r3, #0
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
    2432:	4680      	mov	r8, r0
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
    2434:	bf14      	ite	ne
    2436:	2002      	movne	r0, #2
    2438:	2000      	moveq	r0, #0
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
    243a:	ebab 0000 	sub.w	r0, fp, r0
    243e:	0080      	lsls	r0, r0, #2
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
    2440:	4689      	mov	r9, r1
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
    2442:	f7fd ff9f 	bl	384 <__aeabi_ui2d>
    2446:	4602      	mov	r2, r0
    2448:	460b      	mov	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
    244a:	4640      	mov	r0, r8
    244c:	4649      	mov	r1, r9
    244e:	f7fe f93d 	bl	6cc <__aeabi_ddiv>
    2452:	f000 fb61 	bl	2b18 <ceil>
    2456:	4680      	mov	r8, r0
                                 ( SX1276.Settings.LoRa.Coderate + 4 );
    2458:	f89a 0129 	ldrb.w	r0, [sl, #297]	; 0x129
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
    245c:	4689      	mov	r9, r1
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
    245e:	3004      	adds	r0, #4
    2460:	f7fd ffa0 	bl	3a4 <__aeabi_i2d>
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
    2464:	4642      	mov	r2, r8
    2466:	464b      	mov	r3, r9
    2468:	f7fe f806 	bl	478 <__aeabi_dmul>
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
    246c:	2200      	movs	r2, #0
    246e:	2300      	movs	r3, #0
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
    2470:	4680      	mov	r8, r0
    2472:	4689      	mov	r9, r1
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
    2474:	f7fe fa90 	bl	998 <__aeabi_dcmpgt>
    2478:	b918      	cbnz	r0, 2482 <SX1276GetTimeOnAir+0x192>
    247a:	f04f 0800 	mov.w	r8, #0
    247e:	f04f 0900 	mov.w	r9, #0
    2482:	4b13      	ldr	r3, [pc, #76]	; (24d0 <SX1276GetTimeOnAir+0x1e0>)
    2484:	2200      	movs	r2, #0
    2486:	4640      	mov	r0, r8
    2488:	4649      	mov	r1, r9
    248a:	f7fd fe3f 	bl	10c <__adddf3>
            double tPayload = nPayload * ts;
    248e:	4622      	mov	r2, r4
    2490:	462b      	mov	r3, r5
    2492:	f7fd fff1 	bl	478 <__aeabi_dmul>
            double tOnAir = tPreamble + tPayload;
    2496:	4632      	mov	r2, r6
    2498:	463b      	mov	r3, r7
    249a:	f7fd fe37 	bl	10c <__adddf3>
            airTime = floor( tOnAir * 1000 + 0.999 );
    249e:	4b0d      	ldr	r3, [pc, #52]	; (24d4 <SX1276GetTimeOnAir+0x1e4>)
    24a0:	2200      	movs	r2, #0
    24a2:	f7fd ffe9 	bl	478 <__aeabi_dmul>
    24a6:	a306      	add	r3, pc, #24	; (adr r3, 24c0 <SX1276GetTimeOnAir+0x1d0>)
    24a8:	e9d3 2300 	ldrd	r2, r3, [r3]
    24ac:	f7fd fe2e 	bl	10c <__adddf3>
    24b0:	f000 fc1a 	bl	2ce8 <floor>
    24b4:	e770      	b.n	2398 <SX1276GetTimeOnAir+0xa8>
            switch( SX1276.Settings.LoRa.Bandwidth )
    24b6:	2400      	movs	r4, #0
    24b8:	2500      	movs	r5, #0
    24ba:	e781      	b.n	23c0 <SX1276GetTimeOnAir+0xd0>
    24bc:	f3af 8000 	nop.w
    24c0:	d916872b 	.word	0xd916872b
    24c4:	3feff7ce 	.word	0x3feff7ce
    24c8:	20002bbc 	.word	0x20002bbc
    24cc:	3ff00000 	.word	0x3ff00000
    24d0:	40200000 	.word	0x40200000
    24d4:	408f4000 	.word	0x408f4000
    24d8:	00024178 	.word	0x00024178
    24dc:	40110000 	.word	0x40110000

000024e0 <SX1276SetRxConfig>:
{
    24e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    24e4:	b089      	sub	sp, #36	; 0x24
    24e6:	4699      	mov	r9, r3
    24e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    24ea:	9304      	str	r3, [sp, #16]
    24ec:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
    24f0:	9301      	str	r3, [sp, #4]
    24f2:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
    24f6:	9302      	str	r3, [sp, #8]
    24f8:	4683      	mov	fp, r0
    24fa:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
    24fe:	9305      	str	r3, [sp, #20]
    2500:	460c      	mov	r4, r1
    2502:	4690      	mov	r8, r2
    2504:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
    2508:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
    250c:	9206      	str	r2, [sp, #24]
    250e:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
    2512:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
    2516:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
    251a:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
    251e:	9107      	str	r1, [sp, #28]
    SX1276SetModem( modem );
    2520:	f019 fa68 	bl	1b9f4 <SX1276SetModem>
    switch( modem )
    2524:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    2528:	f1bb 0f00 	cmp.w	fp, #0
    252c:	d007      	beq.n	253e <SX1276SetRxConfig+0x5e>
    252e:	f1bb 0f01 	cmp.w	fp, #1
    2532:	9907      	ldr	r1, [sp, #28]
    2534:	f000 8089 	beq.w	264a <SX1276SetRxConfig+0x16a>
}
    2538:	b009      	add	sp, #36	; 0x24
    253a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
    253e:	f8df b29c 	ldr.w	fp, [pc, #668]	; 27dc <SX1276SetRxConfig+0x2fc>
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
    2542:	9904      	ldr	r1, [sp, #16]
            SX1276.Settings.Fsk.Datarate = datarate;
    2544:	f8cb 80f8 	str.w	r8, [fp, #248]	; 0xf8
            SX1276.Settings.Fsk.IqInverted = iqInverted;
    2548:	f88b 2101 	strb.w	r2, [fp, #257]	; 0x101
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
    254c:	f88b 3102 	strb.w	r3, [fp, #258]	; 0x102
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
    2550:	4640      	mov	r0, r8
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
    2552:	f8cb 40f0 	str.w	r4, [fp, #240]	; 0xf0
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
    2556:	f8cb 10f4 	str.w	r1, [fp, #244]	; 0xf4
            SX1276.Settings.Fsk.FixLen = fixLen;
    255a:	f88b 50fe 	strb.w	r5, [fp, #254]	; 0xfe
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
    255e:	f88b 70ff 	strb.w	r7, [fp, #255]	; 0xff
            SX1276.Settings.Fsk.CrcOn = crcOn;
    2562:	f88b a100 	strb.w	sl, [fp, #256]	; 0x100
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
    2566:	f8ab 60fc 	strh.w	r6, [fp, #252]	; 0xfc
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
    256a:	f7fd ff0b 	bl	384 <__aeabi_ui2d>
    256e:	4680      	mov	r8, r0
    2570:	4602      	mov	r2, r0
    2572:	460b      	mov	r3, r1
    2574:	4689      	mov	r9, r1
    2576:	2000      	movs	r0, #0
    2578:	4995      	ldr	r1, [pc, #596]	; (27d0 <SX1276SetRxConfig+0x2f0>)
    257a:	f7fe f8a7 	bl	6cc <__aeabi_ddiv>
    257e:	4b95      	ldr	r3, [pc, #596]	; (27d4 <SX1276SetRxConfig+0x2f4>)
    2580:	2200      	movs	r2, #0
    2582:	f7fd ff79 	bl	478 <__aeabi_dmul>
    2586:	e9cd 0102 	strd	r0, r1, [sp, #8]
    258a:	9801      	ldr	r0, [sp, #4]
    258c:	f7fd ff0a 	bl	3a4 <__aeabi_i2d>
    2590:	4602      	mov	r2, r0
    2592:	460b      	mov	r3, r1
    2594:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    2598:	f7fd ff6e 	bl	478 <__aeabi_dmul>
    259c:	4b8e      	ldr	r3, [pc, #568]	; (27d8 <SX1276SetRxConfig+0x2f8>)
    259e:	2200      	movs	r2, #0
    25a0:	f7fd ff6a 	bl	478 <__aeabi_dmul>
    25a4:	f7fe fa2a 	bl	9fc <__aeabi_d2uiz>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
    25a8:	4642      	mov	r2, r8
    25aa:	464b      	mov	r3, r9
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
    25ac:	f8cb 0108 	str.w	r0, [fp, #264]	; 0x108
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
    25b0:	a185      	add	r1, pc, #532	; (adr r1, 27c8 <SX1276SetRxConfig+0x2e8>)
    25b2:	e9d1 0100 	ldrd	r0, r1, [r1]
    25b6:	f7fe f889 	bl	6cc <__aeabi_ddiv>
    25ba:	f7fe fa1f 	bl	9fc <__aeabi_d2uiz>
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
    25be:	f3c0 2107 	ubfx	r1, r0, #8, #8
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
    25c2:	fa1f f880 	uxth.w	r8, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
    25c6:	2002      	movs	r0, #2
    25c8:	f020 fc8d 	bl	22ee6 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
    25cc:	fa5f f188 	uxtb.w	r1, r8
    25d0:	2003      	movs	r0, #3
    25d2:	f020 fc88 	bl	22ee6 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
    25d6:	4620      	mov	r0, r4
    25d8:	f019 f822 	bl	1b620 <GetFskBandwidthRegValue>
    25dc:	4601      	mov	r1, r0
    25de:	2012      	movs	r0, #18
    25e0:	f020 fc81 	bl	22ee6 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
    25e4:	9804      	ldr	r0, [sp, #16]
    25e6:	f019 f81b 	bl	1b620 <GetFskBandwidthRegValue>
    25ea:	4601      	mov	r1, r0
    25ec:	2013      	movs	r0, #19
    25ee:	f020 fc7a 	bl	22ee6 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
    25f2:	0a31      	lsrs	r1, r6, #8
    25f4:	2025      	movs	r0, #37	; 0x25
    25f6:	f020 fc76 	bl	22ee6 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
    25fa:	b2f1      	uxtb	r1, r6
    25fc:	2026      	movs	r0, #38	; 0x26
    25fe:	f020 fc72 	bl	22ee6 <SX1276Write>
            if( fixLen == 1 )
    2602:	b305      	cbz	r5, 2646 <SX1276SetRxConfig+0x166>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
    2604:	4639      	mov	r1, r7
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
    2606:	2032      	movs	r0, #50	; 0x32
    2608:	f020 fc6d 	bl	22ee6 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
    260c:	2030      	movs	r0, #48	; 0x30
    260e:	f020 fc75 	bl	22efc <SX1276Read>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
    2612:	2d00      	cmp	r5, #0
                           RF_PACKETCONFIG1_CRC_MASK &
    2614:	f000 016f 	and.w	r1, r0, #111	; 0x6f
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
    2618:	ea41 110a 	orr.w	r1, r1, sl, lsl #4
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
    261c:	bf14      	ite	ne
    261e:	2000      	movne	r0, #0
    2620:	f06f 007f 	mvneq.w	r0, #127	; 0x7f
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
    2624:	4301      	orrs	r1, r0
            SX1276Write( REG_PACKETCONFIG1,
    2626:	b2c9      	uxtb	r1, r1
    2628:	2030      	movs	r0, #48	; 0x30
    262a:	f020 fc5c 	bl	22ee6 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
    262e:	2031      	movs	r0, #49	; 0x31
    2630:	f020 fc64 	bl	22efc <SX1276Read>
    2634:	f040 0140 	orr.w	r1, r0, #64	; 0x40
    2638:	b2c9      	uxtb	r1, r1
    263a:	2031      	movs	r0, #49	; 0x31
}
    263c:	b009      	add	sp, #36	; 0x24
    263e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    2642:	f020 bc50 	b.w	22ee6 <SX1276Write>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
    2646:	21ff      	movs	r1, #255	; 0xff
    2648:	e7dd      	b.n	2606 <SX1276SetRxConfig+0x126>
            if( bandwidth > 2 )
    264a:	2c02      	cmp	r4, #2
    264c:	d900      	bls.n	2650 <SX1276SetRxConfig+0x170>
                while( 1 );
    264e:	e7fe      	b.n	264e <SX1276SetRxConfig+0x16e>
            bandwidth += 7;
    2650:	f104 0b07 	add.w	fp, r4, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
    2654:	4c61      	ldr	r4, [pc, #388]	; (27dc <SX1276SetRxConfig+0x2fc>)
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
    2656:	f884 112f 	strb.w	r1, [r4, #303]	; 0x12f
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
    265a:	9902      	ldr	r1, [sp, #8]
    265c:	f884 1130 	strb.w	r1, [r4, #304]	; 0x130
    2660:	4641      	mov	r1, r8
    2662:	2906      	cmp	r1, #6
    2664:	bf38      	it	cc
    2666:	2106      	movcc	r1, #6
    2668:	290c      	cmp	r1, #12
            SX1276.Settings.LoRa.IqInverted = iqInverted;
    266a:	f884 2131 	strb.w	r2, [r4, #305]	; 0x131
    266e:	460a      	mov	r2, r1
    2670:	bf28      	it	cs
    2672:	220c      	movcs	r2, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    2674:	f1bb 0f07 	cmp.w	fp, #7
            SX1276.Settings.LoRa.Datarate = datarate;
    2678:	e9c4 b848 	strd	fp, r8, [r4, #288]	; 0x120
            SX1276.Settings.LoRa.Coderate = coderate;
    267c:	f884 9129 	strb.w	r9, [r4, #297]	; 0x129
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
    2680:	f8a4 612a 	strh.w	r6, [r4, #298]	; 0x12a
            SX1276.Settings.LoRa.FixLen = fixLen;
    2684:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
    2688:	f884 712d 	strb.w	r7, [r4, #301]	; 0x12d
            SX1276.Settings.LoRa.CrcOn = crcOn;
    268c:	f884 a12e 	strb.w	sl, [r4, #302]	; 0x12e
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
    2690:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    2694:	d178      	bne.n	2788 <SX1276SetRxConfig+0x2a8>
    2696:	f1a2 030b 	sub.w	r3, r2, #11
    269a:	2b01      	cmp	r3, #1
    269c:	bf8c      	ite	hi
    269e:	2300      	movhi	r3, #0
    26a0:	2301      	movls	r3, #1
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
    26a2:	201d      	movs	r0, #29
    26a4:	9204      	str	r2, [sp, #16]
    26a6:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    26aa:	f020 fc27 	bl	22efc <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
    26ae:	ea45 0149 	orr.w	r1, r5, r9, lsl #1
    26b2:	ea41 110b 	orr.w	r1, r1, fp, lsl #4
            SX1276Write( REG_LR_MODEMCONFIG1,
    26b6:	b2c9      	uxtb	r1, r1
    26b8:	201d      	movs	r0, #29
    26ba:	f020 fc14 	bl	22ee6 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
    26be:	201e      	movs	r0, #30
    26c0:	f020 fc1c 	bl	22efc <SX1276Read>
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
    26c4:	9b01      	ldr	r3, [sp, #4]
            SX1276Write( REG_LR_MODEMCONFIG2,
    26c6:	9a04      	ldr	r2, [sp, #16]
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
    26c8:	f3c3 2101 	ubfx	r1, r3, #8, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
    26cc:	ea41 018a 	orr.w	r1, r1, sl, lsl #2
    26d0:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
    26d4:	f000 0008 	and.w	r0, r0, #8
            SX1276Write( REG_LR_MODEMCONFIG2,
    26d8:	4301      	orrs	r1, r0
    26da:	b2c9      	uxtb	r1, r1
    26dc:	201e      	movs	r0, #30
    26de:	f020 fc02 	bl	22ee6 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
    26e2:	2026      	movs	r0, #38	; 0x26
    26e4:	f020 fc0a 	bl	22efc <SX1276Read>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
    26e8:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
    26ec:	f020 0108 	bic.w	r1, r0, #8
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
    26f0:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
            SX1276Write( REG_LR_MODEMCONFIG3,
    26f4:	b2c9      	uxtb	r1, r1
    26f6:	2026      	movs	r0, #38	; 0x26
    26f8:	f020 fbf5 	bl	22ee6 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
    26fc:	f89d 1004 	ldrb.w	r1, [sp, #4]
    2700:	201f      	movs	r0, #31
    2702:	f020 fbf0 	bl	22ee6 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
    2706:	0a31      	lsrs	r1, r6, #8
    2708:	2020      	movs	r0, #32
    270a:	f020 fbec 	bl	22ee6 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
    270e:	b2f1      	uxtb	r1, r6
    2710:	2021      	movs	r0, #33	; 0x21
    2712:	f020 fbe8 	bl	22ee6 <SX1276Write>
            if( fixLen == 1 )
    2716:	b11d      	cbz	r5, 2720 <SX1276SetRxConfig+0x240>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
    2718:	4639      	mov	r1, r7
    271a:	2022      	movs	r0, #34	; 0x22
    271c:	f020 fbe3 	bl	22ee6 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
    2720:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
    2724:	b16b      	cbz	r3, 2742 <SX1276SetRxConfig+0x262>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
    2726:	2044      	movs	r0, #68	; 0x44
    2728:	f020 fbe8 	bl	22efc <SX1276Read>
    272c:	f060 017f 	orn	r1, r0, #127	; 0x7f
    2730:	b2c9      	uxtb	r1, r1
    2732:	2044      	movs	r0, #68	; 0x44
    2734:	f020 fbd7 	bl	22ee6 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
    2738:	f894 1130 	ldrb.w	r1, [r4, #304]	; 0x130
    273c:	2024      	movs	r0, #36	; 0x24
    273e:	f020 fbd2 	bl	22ee6 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
    2742:	f1bb 0f09 	cmp.w	fp, #9
    2746:	d12e      	bne.n	27a6 <SX1276SetRxConfig+0x2c6>
    2748:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
    274c:	4b24      	ldr	r3, [pc, #144]	; (27e0 <SX1276SetRxConfig+0x300>)
    274e:	429a      	cmp	r2, r3
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
    2750:	f04f 0102 	mov.w	r1, #2
    2754:	f04f 0036 	mov.w	r0, #54	; 0x36
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
    2758:	d921      	bls.n	279e <SX1276SetRxConfig+0x2be>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
    275a:	f020 fbc4 	bl	22ee6 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
    275e:	2164      	movs	r1, #100	; 0x64
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
    2760:	203a      	movs	r0, #58	; 0x3a
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
    2762:	f020 fbc0 	bl	22ee6 <SX1276Write>
            if( datarate == 6 )
    2766:	f1b8 0f06 	cmp.w	r8, #6
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    276a:	f04f 0031 	mov.w	r0, #49	; 0x31
            if( datarate == 6 )
    276e:	d81d      	bhi.n	27ac <SX1276SetRxConfig+0x2cc>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    2770:	f020 fbc4 	bl	22efc <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
    2774:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
                SX1276Write( REG_LR_DETECTOPTIMIZE,
    2778:	f041 0105 	orr.w	r1, r1, #5
    277c:	2031      	movs	r0, #49	; 0x31
    277e:	f020 fbb2 	bl	22ee6 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    2782:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    2784:	2037      	movs	r0, #55	; 0x37
    2786:	e759      	b.n	263c <SX1276SetRxConfig+0x15c>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    2788:	f1bb 0f08 	cmp.w	fp, #8
    278c:	d105      	bne.n	279a <SX1276SetRxConfig+0x2ba>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
    278e:	f1b8 0f0b 	cmp.w	r8, #11
    2792:	bf94      	ite	ls
    2794:	2300      	movls	r3, #0
    2796:	2301      	movhi	r3, #1
    2798:	e783      	b.n	26a2 <SX1276SetRxConfig+0x1c2>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
    279a:	2300      	movs	r3, #0
    279c:	e781      	b.n	26a2 <SX1276SetRxConfig+0x1c2>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
    279e:	f020 fba2 	bl	22ee6 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
    27a2:	217f      	movs	r1, #127	; 0x7f
    27a4:	e7dc      	b.n	2760 <SX1276SetRxConfig+0x280>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
    27a6:	2103      	movs	r1, #3
    27a8:	2036      	movs	r0, #54	; 0x36
    27aa:	e7da      	b.n	2762 <SX1276SetRxConfig+0x282>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    27ac:	f020 fba6 	bl	22efc <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
    27b0:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
                SX1276Write( REG_LR_DETECTOPTIMIZE,
    27b4:	f041 0103 	orr.w	r1, r1, #3
    27b8:	2031      	movs	r0, #49	; 0x31
    27ba:	f020 fb94 	bl	22ee6 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    27be:	210a      	movs	r1, #10
    27c0:	e7e0      	b.n	2784 <SX1276SetRxConfig+0x2a4>
    27c2:	bf00      	nop
    27c4:	f3af 8000 	nop.w
    27c8:	00000000 	.word	0x00000000
    27cc:	417e8480 	.word	0x417e8480
    27d0:	3ff00000 	.word	0x3ff00000
    27d4:	40200000 	.word	0x40200000
    27d8:	408f4000 	.word	0x408f4000
    27dc:	20002bbc 	.word	0x20002bbc
    27e0:	1f4add40 	.word	0x1f4add40
    27e4:	00000000 	.word	0x00000000

000027e8 <SX1276SetTxConfig>:
{
    27e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    27ec:	b087      	sub	sp, #28
    27ee:	461d      	mov	r5, r3
    27f0:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    27f4:	9302      	str	r3, [sp, #8]
    27f6:	4689      	mov	r9, r1
    27f8:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    27fc:	9918      	ldr	r1, [sp, #96]	; 0x60
    27fe:	9304      	str	r3, [sp, #16]
    2800:	4692      	mov	sl, r2
    2802:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
    2806:	9205      	str	r2, [sp, #20]
    2808:	9103      	str	r1, [sp, #12]
    280a:	9001      	str	r0, [sp, #4]
    280c:	9f10      	ldr	r7, [sp, #64]	; 0x40
    280e:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
    2812:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
    2816:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
    281a:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
    SX1276SetModem( modem );
    281e:	f019 f8e9 	bl	1b9f4 <SX1276SetModem>
    SX1276SetRfTxPower( power );
    2822:	4648      	mov	r0, r9
    2824:	f018 fe92 	bl	1b54c <SX1276SetRfTxPower>
    switch( modem )
    2828:	9a01      	ldr	r2, [sp, #4]
    282a:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
    282e:	b12a      	cbz	r2, 283c <SX1276SetTxConfig+0x54>
    2830:	2a01      	cmp	r2, #1
    2832:	9a05      	ldr	r2, [sp, #20]
    2834:	d064      	beq.n	2900 <SX1276SetTxConfig+0x118>
}
    2836:	b007      	add	sp, #28
    2838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Power = power;
    283c:	4a7e      	ldr	r2, [pc, #504]	; (2a38 <SX1276SetTxConfig+0x250>)
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
    283e:	4650      	mov	r0, sl
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
    2840:	e9c2 a53b 	strd	sl, r5, [r2, #236]	; 0xec
            SX1276.Settings.Fsk.CrcOn = crcOn;
    2844:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
            SX1276.Settings.Fsk.Power = power;
    2848:	f882 90e8 	strb.w	r9, [r2, #232]	; 0xe8
            SX1276.Settings.Fsk.Datarate = datarate;
    284c:	f8c2 70f8 	str.w	r7, [r2, #248]	; 0xf8
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
    2850:	f8a2 80fc 	strh.w	r8, [r2, #252]	; 0xfc
            SX1276.Settings.Fsk.FixLen = fixLen;
    2854:	f882 60fe 	strb.w	r6, [r2, #254]	; 0xfe
            SX1276.Settings.Fsk.IqInverted = iqInverted;
    2858:	f882 3101 	strb.w	r3, [r2, #257]	; 0x101
            SX1276.Settings.Fsk.TxTimeout = timeout;
    285c:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
    2860:	f7fd fd90 	bl	384 <__aeabi_ui2d>
    2864:	a370      	add	r3, pc, #448	; (adr r3, 2a28 <SX1276SetTxConfig+0x240>)
    2866:	e9d3 2300 	ldrd	r2, r3, [r3]
    286a:	f7fd ff2f 	bl	6cc <__aeabi_ddiv>
    286e:	f7fe f8c5 	bl	9fc <__aeabi_d2uiz>
    2872:	b285      	uxth	r5, r0
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
    2874:	f3c0 2107 	ubfx	r1, r0, #8, #8
    2878:	2004      	movs	r0, #4
    287a:	f020 fb34 	bl	22ee6 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
    287e:	b2e9      	uxtb	r1, r5
    2880:	2005      	movs	r0, #5
    2882:	f020 fb30 	bl	22ee6 <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
    2886:	4638      	mov	r0, r7
    2888:	f7fd fd7c 	bl	384 <__aeabi_ui2d>
    288c:	4602      	mov	r2, r0
    288e:	460b      	mov	r3, r1
    2890:	a167      	add	r1, pc, #412	; (adr r1, 2a30 <SX1276SetTxConfig+0x248>)
    2892:	e9d1 0100 	ldrd	r0, r1, [r1]
    2896:	f7fd ff19 	bl	6cc <__aeabi_ddiv>
    289a:	f7fe f8af 	bl	9fc <__aeabi_d2uiz>
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
    289e:	f3c0 2107 	ubfx	r1, r0, #8, #8
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
    28a2:	b285      	uxth	r5, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
    28a4:	2002      	movs	r0, #2
    28a6:	f020 fb1e 	bl	22ee6 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
    28aa:	b2e9      	uxtb	r1, r5
    28ac:	2003      	movs	r0, #3
    28ae:	f020 fb1a 	bl	22ee6 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
    28b2:	ea4f 2118 	mov.w	r1, r8, lsr #8
    28b6:	2025      	movs	r0, #37	; 0x25
    28b8:	f020 fb15 	bl	22ee6 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
    28bc:	fa5f f188 	uxtb.w	r1, r8
    28c0:	2026      	movs	r0, #38	; 0x26
    28c2:	f020 fb10 	bl	22ee6 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
    28c6:	2030      	movs	r0, #48	; 0x30
    28c8:	f020 fb18 	bl	22efc <SX1276Read>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
    28cc:	2e00      	cmp	r6, #0
                           RF_PACKETCONFIG1_CRC_MASK &
    28ce:	f000 006f 	and.w	r0, r0, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
    28d2:	bf14      	ite	ne
    28d4:	2100      	movne	r1, #0
    28d6:	f06f 017f 	mvneq.w	r1, #127	; 0x7f
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
    28da:	ea40 1404 	orr.w	r4, r0, r4, lsl #4
    28de:	4321      	orrs	r1, r4
            SX1276Write( REG_PACKETCONFIG1,
    28e0:	b2c9      	uxtb	r1, r1
    28e2:	2030      	movs	r0, #48	; 0x30
    28e4:	f020 faff 	bl	22ee6 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
    28e8:	2031      	movs	r0, #49	; 0x31
    28ea:	f020 fb07 	bl	22efc <SX1276Read>
    28ee:	f040 0140 	orr.w	r1, r0, #64	; 0x40
    28f2:	b2c9      	uxtb	r1, r1
    28f4:	2031      	movs	r0, #49	; 0x31
}
    28f6:	b007      	add	sp, #28
    28f8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    28fc:	f020 baf3 	b.w	22ee6 <SX1276Write>
            SX1276.Settings.LoRa.Power = power;
    2900:	484d      	ldr	r0, [pc, #308]	; (2a38 <SX1276SetTxConfig+0x250>)
            if( bandwidth > 2 )
    2902:	2d02      	cmp	r5, #2
            SX1276.Settings.LoRa.Power = power;
    2904:	f880 911c 	strb.w	r9, [r0, #284]	; 0x11c
            if( bandwidth > 2 )
    2908:	4681      	mov	r9, r0
    290a:	d900      	bls.n	290e <SX1276SetTxConfig+0x126>
                while( 1 );
    290c:	e7fe      	b.n	290c <SX1276SetTxConfig+0x124>
            bandwidth += 7;
    290e:	2f06      	cmp	r7, #6
    2910:	46ba      	mov	sl, r7
    2912:	bf38      	it	cc
    2914:	f04f 0a06 	movcc.w	sl, #6
    2918:	3507      	adds	r5, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
    291a:	f1ba 0f0c 	cmp.w	sl, #12
            SX1276.Settings.LoRa.Datarate = datarate;
    291e:	e9c0 5748 	strd	r5, r7, [r0, #288]	; 0x120
            SX1276.Settings.LoRa.Coderate = coderate;
    2922:	f880 b129 	strb.w	fp, [r0, #297]	; 0x129
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
    2926:	f8a0 812a 	strh.w	r8, [r0, #298]	; 0x12a
            SX1276.Settings.LoRa.FixLen = fixLen;
    292a:	f880 612c 	strb.w	r6, [r0, #300]	; 0x12c
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
    292e:	f880 212f 	strb.w	r2, [r0, #303]	; 0x12f
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
    2932:	bf28      	it	cs
    2934:	f04f 0a0c 	movcs.w	sl, #12
    2938:	9802      	ldr	r0, [sp, #8]
    293a:	f889 0130 	strb.w	r0, [r9, #304]	; 0x130
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    293e:	2d07      	cmp	r5, #7
            SX1276.Settings.LoRa.CrcOn = crcOn;
    2940:	f889 412e 	strb.w	r4, [r9, #302]	; 0x12e
            SX1276.Settings.LoRa.IqInverted = iqInverted;
    2944:	f889 3131 	strb.w	r3, [r9, #305]	; 0x131
            SX1276.Settings.LoRa.TxTimeout = timeout;
    2948:	f8c9 1134 	str.w	r1, [r9, #308]	; 0x134
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    294c:	d157      	bne.n	29fe <SX1276SetTxConfig+0x216>
    294e:	f1aa 030b 	sub.w	r3, sl, #11
    2952:	2b01      	cmp	r3, #1
    2954:	bf8c      	ite	hi
    2956:	2300      	movhi	r3, #0
    2958:	2301      	movls	r3, #1
    295a:	f889 3128 	strb.w	r3, [r9, #296]	; 0x128
            if( SX1276.Settings.LoRa.FreqHopOn == true )
    295e:	b16a      	cbz	r2, 297c <SX1276SetTxConfig+0x194>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
    2960:	2044      	movs	r0, #68	; 0x44
    2962:	f020 facb 	bl	22efc <SX1276Read>
    2966:	f060 017f 	orn	r1, r0, #127	; 0x7f
    296a:	b2c9      	uxtb	r1, r1
    296c:	2044      	movs	r0, #68	; 0x44
    296e:	f020 faba 	bl	22ee6 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
    2972:	f899 1130 	ldrb.w	r1, [r9, #304]	; 0x130
    2976:	2024      	movs	r0, #36	; 0x24
    2978:	f020 fab5 	bl	22ee6 <SX1276Write>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
    297c:	ea46 064b 	orr.w	r6, r6, fp, lsl #1
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
    2980:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
    2982:	ea46 1505 	orr.w	r5, r6, r5, lsl #4
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
    2986:	f020 fab9 	bl	22efc <SX1276Read>
            SX1276Write( REG_LR_MODEMCONFIG1,
    298a:	b2e9      	uxtb	r1, r5
    298c:	201d      	movs	r0, #29
    298e:	f020 faaa 	bl	22ee6 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
    2992:	201e      	movs	r0, #30
    2994:	f020 fab2 	bl	22efc <SX1276Read>
                           ( datarate << 4 ) | ( crcOn << 2 ) );
    2998:	00a4      	lsls	r4, r4, #2
                           RFLR_MODEMCONFIG2_SF_MASK &
    299a:	f000 000b 	and.w	r0, r0, #11
            SX1276Write( REG_LR_MODEMCONFIG2,
    299e:	ea44 1a0a 	orr.w	sl, r4, sl, lsl #4
    29a2:	ea4a 0a00 	orr.w	sl, sl, r0
    29a6:	fa5f f18a 	uxtb.w	r1, sl
    29aa:	201e      	movs	r0, #30
    29ac:	f020 fa9b 	bl	22ee6 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
    29b0:	2026      	movs	r0, #38	; 0x26
    29b2:	f020 faa3 	bl	22efc <SX1276Read>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
    29b6:	f899 3128 	ldrb.w	r3, [r9, #296]	; 0x128
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
    29ba:	f020 0108 	bic.w	r1, r0, #8
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
    29be:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
            SX1276Write( REG_LR_MODEMCONFIG3,
    29c2:	b2c9      	uxtb	r1, r1
    29c4:	2026      	movs	r0, #38	; 0x26
    29c6:	f020 fa8e 	bl	22ee6 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
    29ca:	ea4f 2118 	mov.w	r1, r8, lsr #8
    29ce:	2020      	movs	r0, #32
    29d0:	f020 fa89 	bl	22ee6 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
    29d4:	2021      	movs	r0, #33	; 0x21
    29d6:	fa5f f188 	uxtb.w	r1, r8
    29da:	f020 fa84 	bl	22ee6 <SX1276Write>
            if( datarate == 6 )
    29de:	2f06      	cmp	r7, #6
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    29e0:	f04f 0031 	mov.w	r0, #49	; 0x31
            if( datarate == 6 )
    29e4:	d814      	bhi.n	2a10 <SX1276SetTxConfig+0x228>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    29e6:	f020 fa89 	bl	22efc <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
    29ea:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
                SX1276Write( REG_LR_DETECTOPTIMIZE,
    29ee:	f041 0105 	orr.w	r1, r1, #5
    29f2:	2031      	movs	r0, #49	; 0x31
    29f4:	f020 fa77 	bl	22ee6 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    29f8:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    29fa:	2037      	movs	r0, #55	; 0x37
    29fc:	e77b      	b.n	28f6 <SX1276SetTxConfig+0x10e>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    29fe:	2d08      	cmp	r5, #8
    2a00:	d104      	bne.n	2a0c <SX1276SetTxConfig+0x224>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
    2a02:	2f0b      	cmp	r7, #11
    2a04:	bf94      	ite	ls
    2a06:	2300      	movls	r3, #0
    2a08:	2301      	movhi	r3, #1
    2a0a:	e7a6      	b.n	295a <SX1276SetTxConfig+0x172>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
    2a0c:	2300      	movs	r3, #0
    2a0e:	e7a4      	b.n	295a <SX1276SetTxConfig+0x172>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    2a10:	f020 fa74 	bl	22efc <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
    2a14:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
                SX1276Write( REG_LR_DETECTOPTIMIZE,
    2a18:	f041 0103 	orr.w	r1, r1, #3
    2a1c:	2031      	movs	r0, #49	; 0x31
    2a1e:	f020 fa62 	bl	22ee6 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    2a22:	210a      	movs	r1, #10
    2a24:	e7e9      	b.n	29fa <SX1276SetTxConfig+0x212>
    2a26:	bf00      	nop
    2a28:	00000000 	.word	0x00000000
    2a2c:	404e8480 	.word	0x404e8480
    2a30:	00000000 	.word	0x00000000
    2a34:	417e8480 	.word	0x417e8480
    2a38:	20002bbc 	.word	0x20002bbc
    2a3c:	00000000 	.word	0x00000000

00002a40 <SX1276OnDio2Irq>:
            break;
    }
}

void SX1276OnDio2Irq( void* context )
{
    2a40:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
    2a42:	4b31      	ldr	r3, [pc, #196]	; (2b08 <SX1276OnDio2Irq+0xc8>)
    2a44:	f893 10e0 	ldrb.w	r1, [r3, #224]	; 0xe0
    2a48:	2901      	cmp	r1, #1
    2a4a:	461c      	mov	r4, r3
    2a4c:	d002      	beq.n	2a54 <SX1276OnDio2Irq+0x14>
    2a4e:	2902      	cmp	r1, #2
    2a50:	d04c      	beq.n	2aec <SX1276OnDio2Irq+0xac>
            }
            break;
        default:
            break;
    }
}
    2a52:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
    2a54:	f893 20e1 	ldrb.w	r2, [r3, #225]	; 0xe1
    2a58:	b1ca      	cbz	r2, 2a8e <SX1276OnDio2Irq+0x4e>
    2a5a:	2a01      	cmp	r2, #1
    2a5c:	d1f9      	bne.n	2a52 <SX1276OnDio2Irq+0x12>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
    2a5e:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
    2a62:	2b00      	cmp	r3, #0
    2a64:	d0f5      	beq.n	2a52 <SX1276OnDio2Irq+0x12>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
    2a66:	2102      	movs	r1, #2
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
    2a68:	2012      	movs	r0, #18
    2a6a:	f020 fa3c 	bl	22ee6 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
    2a6e:	4b27      	ldr	r3, [pc, #156]	; (2b0c <SX1276OnDio2Irq+0xcc>)
    2a70:	681b      	ldr	r3, [r3, #0]
    2a72:	2b00      	cmp	r3, #0
    2a74:	d0ed      	beq.n	2a52 <SX1276OnDio2Irq+0x12>
    2a76:	695c      	ldr	r4, [r3, #20]
    2a78:	2c00      	cmp	r4, #0
    2a7a:	d0ea      	beq.n	2a52 <SX1276OnDio2Irq+0x12>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
    2a7c:	201c      	movs	r0, #28
    2a7e:	f020 fa3d 	bl	22efc <SX1276Read>
    2a82:	4623      	mov	r3, r4
    2a84:	f000 003f 	and.w	r0, r0, #63	; 0x3f
}
    2a88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
    2a8c:	4718      	bx	r3
                if( SX1276.DIO4.port == NULL )
    2a8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2a90:	b90b      	cbnz	r3, 2a96 <SX1276OnDio2Irq+0x56>
                    SX1276.Settings.FskPacketHandler.PreambleDetected = true;
    2a92:	f884 110c 	strb.w	r1, [r4, #268]	; 0x10c
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == false ) )
    2a96:	f8b4 510c 	ldrh.w	r5, [r4, #268]	; 0x10c
    2a9a:	2d01      	cmp	r5, #1
    2a9c:	d1d9      	bne.n	2a52 <SX1276OnDio2Irq+0x12>
                    TimerStop( &RxTimeoutSyncWord );
    2a9e:	481c      	ldr	r0, [pc, #112]	; (2b10 <SX1276OnDio2Irq+0xd0>)
    2aa0:	f019 fbd8 	bl	1c254 <TimerStop>
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
    2aa4:	2011      	movs	r0, #17
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
    2aa6:	f884 510d 	strb.w	r5, [r4, #269]	; 0x10d
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
    2aaa:	f020 fa27 	bl	22efc <SX1276Read>
    2aae:	0840      	lsrs	r0, r0, #1
    2ab0:	4240      	negs	r0, r0
    2ab2:	f884 010e 	strb.w	r0, [r4, #270]	; 0x10e
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )( double )( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
    2ab6:	201b      	movs	r0, #27
    2ab8:	f020 fa20 	bl	22efc <SX1276Read>
    2abc:	4605      	mov	r5, r0
                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) ) *
    2abe:	201c      	movs	r0, #28
    2ac0:	f020 fa1c 	bl	22efc <SX1276Read>
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )( double )( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
    2ac4:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
    2ac8:	f7fd fc6c 	bl	3a4 <__aeabi_i2d>
                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) ) *
    2acc:	a30c      	add	r3, pc, #48	; (adr r3, 2b00 <SX1276OnDio2Irq+0xc0>)
    2ace:	e9d3 2300 	ldrd	r2, r3, [r3]
    2ad2:	f7fd fcd1 	bl	478 <__aeabi_dmul>
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )( double )( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
    2ad6:	f7fd ff69 	bl	9ac <__aeabi_d2iz>
    2ada:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
    2ade:	200c      	movs	r0, #12
    2ae0:	f020 fa0c 	bl	22efc <SX1276Read>
    2ae4:	0940      	lsrs	r0, r0, #5
    2ae6:	f884 0114 	strb.w	r0, [r4, #276]	; 0x114
    2aea:	e7b2      	b.n	2a52 <SX1276OnDio2Irq+0x12>
            switch( SX1276.Settings.Modem )
    2aec:	f893 20e1 	ldrb.w	r2, [r3, #225]	; 0xe1
    2af0:	2a01      	cmp	r2, #1
    2af2:	d1ae      	bne.n	2a52 <SX1276OnDio2Irq+0x12>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
    2af4:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
    2af8:	2b00      	cmp	r3, #0
    2afa:	d0aa      	beq.n	2a52 <SX1276OnDio2Irq+0x12>
    2afc:	e7b4      	b.n	2a68 <SX1276OnDio2Irq+0x28>
    2afe:	bf00      	nop
    2b00:	00000000 	.word	0x00000000
    2b04:	404e8480 	.word	0x404e8480
    2b08:	20002bbc 	.word	0x20002bbc
    2b0c:	20002b88 	.word	0x20002b88
    2b10:	20002b8c 	.word	0x20002b8c
    2b14:	00000000 	.word	0x00000000

00002b18 <ceil>:
    2b18:	b580      	push	{r7, lr}
    2b1a:	b08c      	sub	sp, #48	; 0x30
    2b1c:	af00      	add	r7, sp, #0
    2b1e:	e9c7 0100 	strd	r0, r1, [r7]
    2b22:	e9d7 2300 	ldrd	r2, r3, [r7]
    2b26:	e9c7 2304 	strd	r2, r3, [r7, #16]
    2b2a:	697b      	ldr	r3, [r7, #20]
    2b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    2b2e:	693b      	ldr	r3, [r7, #16]
    2b30:	62bb      	str	r3, [r7, #40]	; 0x28
    2b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2b34:	151b      	asrs	r3, r3, #20
    2b36:	f3c3 030a 	ubfx	r3, r3, #0, #11
    2b3a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
    2b3e:	627b      	str	r3, [r7, #36]	; 0x24
    2b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2b42:	2b13      	cmp	r3, #19
    2b44:	dc61      	bgt.n	2c0a <ceil+0xf2>
    2b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2b48:	2b00      	cmp	r3, #0
    2b4a:	da28      	bge.n	2b9e <ceil+0x86>
    2b4c:	a162      	add	r1, pc, #392	; (adr r1, 2cd8 <ceil+0x1c0>)
    2b4e:	e9d1 0100 	ldrd	r0, r1, [r1]
    2b52:	e9d7 2300 	ldrd	r2, r3, [r7]
    2b56:	f7fd fad9 	bl	10c <__adddf3>
    2b5a:	4602      	mov	r2, r0
    2b5c:	460b      	mov	r3, r1
    2b5e:	4610      	mov	r0, r2
    2b60:	4619      	mov	r1, r3
    2b62:	f04f 0200 	mov.w	r2, #0
    2b66:	f04f 0300 	mov.w	r3, #0
    2b6a:	f7fd ff15 	bl	998 <__aeabi_dcmpgt>
    2b6e:	4603      	mov	r3, r0
    2b70:	2b00      	cmp	r3, #0
    2b72:	f000 80a0 	beq.w	2cb6 <ceil+0x19e>
    2b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2b78:	2b00      	cmp	r3, #0
    2b7a:	da05      	bge.n	2b88 <ceil+0x70>
    2b7c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    2b80:	62fb      	str	r3, [r7, #44]	; 0x2c
    2b82:	2300      	movs	r3, #0
    2b84:	62bb      	str	r3, [r7, #40]	; 0x28
    2b86:	e096      	b.n	2cb6 <ceil+0x19e>
    2b88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2b8c:	4313      	orrs	r3, r2
    2b8e:	2b00      	cmp	r3, #0
    2b90:	f000 8091 	beq.w	2cb6 <ceil+0x19e>
    2b94:	4b52      	ldr	r3, [pc, #328]	; (2ce0 <ceil+0x1c8>)
    2b96:	62fb      	str	r3, [r7, #44]	; 0x2c
    2b98:	2300      	movs	r3, #0
    2b9a:	62bb      	str	r3, [r7, #40]	; 0x28
    2b9c:	e08b      	b.n	2cb6 <ceil+0x19e>
    2b9e:	4a51      	ldr	r2, [pc, #324]	; (2ce4 <ceil+0x1cc>)
    2ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2ba2:	fa42 f303 	asr.w	r3, r2, r3
    2ba6:	623b      	str	r3, [r7, #32]
    2ba8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2baa:	6a3b      	ldr	r3, [r7, #32]
    2bac:	401a      	ands	r2, r3
    2bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2bb0:	4313      	orrs	r3, r2
    2bb2:	2b00      	cmp	r3, #0
    2bb4:	d102      	bne.n	2bbc <ceil+0xa4>
    2bb6:	e9d7 2300 	ldrd	r2, r3, [r7]
    2bba:	e086      	b.n	2cca <ceil+0x1b2>
    2bbc:	a146      	add	r1, pc, #280	; (adr r1, 2cd8 <ceil+0x1c0>)
    2bbe:	e9d1 0100 	ldrd	r0, r1, [r1]
    2bc2:	e9d7 2300 	ldrd	r2, r3, [r7]
    2bc6:	f7fd faa1 	bl	10c <__adddf3>
    2bca:	4602      	mov	r2, r0
    2bcc:	460b      	mov	r3, r1
    2bce:	4610      	mov	r0, r2
    2bd0:	4619      	mov	r1, r3
    2bd2:	f04f 0200 	mov.w	r2, #0
    2bd6:	f04f 0300 	mov.w	r3, #0
    2bda:	f7fd fedd 	bl	998 <__aeabi_dcmpgt>
    2bde:	4603      	mov	r3, r0
    2be0:	2b00      	cmp	r3, #0
    2be2:	d068      	beq.n	2cb6 <ceil+0x19e>
    2be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2be6:	2b00      	cmp	r3, #0
    2be8:	dd07      	ble.n	2bfa <ceil+0xe2>
    2bea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    2bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2bf0:	fa42 f303 	asr.w	r3, r2, r3
    2bf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2bf6:	4413      	add	r3, r2
    2bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    2bfa:	6a3b      	ldr	r3, [r7, #32]
    2bfc:	43da      	mvns	r2, r3
    2bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2c00:	4013      	ands	r3, r2
    2c02:	62fb      	str	r3, [r7, #44]	; 0x2c
    2c04:	2300      	movs	r3, #0
    2c06:	62bb      	str	r3, [r7, #40]	; 0x28
    2c08:	e055      	b.n	2cb6 <ceil+0x19e>
    2c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2c0c:	2b33      	cmp	r3, #51	; 0x33
    2c0e:	dd0f      	ble.n	2c30 <ceil+0x118>
    2c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    2c16:	d108      	bne.n	2c2a <ceil+0x112>
    2c18:	e9d7 0100 	ldrd	r0, r1, [r7]
    2c1c:	4602      	mov	r2, r0
    2c1e:	460b      	mov	r3, r1
    2c20:	f7fd fa74 	bl	10c <__adddf3>
    2c24:	4602      	mov	r2, r0
    2c26:	460b      	mov	r3, r1
    2c28:	e04f      	b.n	2cca <ceil+0x1b2>
    2c2a:	e9d7 2300 	ldrd	r2, r3, [r7]
    2c2e:	e04c      	b.n	2cca <ceil+0x1b2>
    2c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2c32:	3b14      	subs	r3, #20
    2c34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2c38:	fa22 f303 	lsr.w	r3, r2, r3
    2c3c:	623b      	str	r3, [r7, #32]
    2c3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2c40:	6a3b      	ldr	r3, [r7, #32]
    2c42:	4013      	ands	r3, r2
    2c44:	2b00      	cmp	r3, #0
    2c46:	d102      	bne.n	2c4e <ceil+0x136>
    2c48:	e9d7 2300 	ldrd	r2, r3, [r7]
    2c4c:	e03d      	b.n	2cca <ceil+0x1b2>
    2c4e:	a122      	add	r1, pc, #136	; (adr r1, 2cd8 <ceil+0x1c0>)
    2c50:	e9d1 0100 	ldrd	r0, r1, [r1]
    2c54:	e9d7 2300 	ldrd	r2, r3, [r7]
    2c58:	f7fd fa58 	bl	10c <__adddf3>
    2c5c:	4602      	mov	r2, r0
    2c5e:	460b      	mov	r3, r1
    2c60:	4610      	mov	r0, r2
    2c62:	4619      	mov	r1, r3
    2c64:	f04f 0200 	mov.w	r2, #0
    2c68:	f04f 0300 	mov.w	r3, #0
    2c6c:	f7fd fe94 	bl	998 <__aeabi_dcmpgt>
    2c70:	4603      	mov	r3, r0
    2c72:	2b00      	cmp	r3, #0
    2c74:	d01f      	beq.n	2cb6 <ceil+0x19e>
    2c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2c78:	2b00      	cmp	r3, #0
    2c7a:	dd17      	ble.n	2cac <ceil+0x194>
    2c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2c7e:	2b14      	cmp	r3, #20
    2c80:	d103      	bne.n	2c8a <ceil+0x172>
    2c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2c84:	3301      	adds	r3, #1
    2c86:	62fb      	str	r3, [r7, #44]	; 0x2c
    2c88:	e010      	b.n	2cac <ceil+0x194>
    2c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2c8c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
    2c90:	2201      	movs	r2, #1
    2c92:	409a      	lsls	r2, r3
    2c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2c96:	4413      	add	r3, r2
    2c98:	61fb      	str	r3, [r7, #28]
    2c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2c9c:	69fa      	ldr	r2, [r7, #28]
    2c9e:	429a      	cmp	r2, r3
    2ca0:	d202      	bcs.n	2ca8 <ceil+0x190>
    2ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2ca4:	3301      	adds	r3, #1
    2ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
    2ca8:	69fb      	ldr	r3, [r7, #28]
    2caa:	62bb      	str	r3, [r7, #40]	; 0x28
    2cac:	6a3b      	ldr	r3, [r7, #32]
    2cae:	43da      	mvns	r2, r3
    2cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2cb2:	4013      	ands	r3, r2
    2cb4:	62bb      	str	r3, [r7, #40]	; 0x28
    2cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2cb8:	60fb      	str	r3, [r7, #12]
    2cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2cbc:	60bb      	str	r3, [r7, #8]
    2cbe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    2cc2:	e9c7 2300 	strd	r2, r3, [r7]
    2cc6:	e9d7 2300 	ldrd	r2, r3, [r7]
    2cca:	4610      	mov	r0, r2
    2ccc:	4619      	mov	r1, r3
    2cce:	3730      	adds	r7, #48	; 0x30
    2cd0:	46bd      	mov	sp, r7
    2cd2:	bd80      	pop	{r7, pc}
    2cd4:	f3af 8000 	nop.w
    2cd8:	8800759c 	.word	0x8800759c
    2cdc:	7e37e43c 	.word	0x7e37e43c
    2ce0:	3ff00000 	.word	0x3ff00000
    2ce4:	000fffff 	.word	0x000fffff

00002ce8 <floor>:
    2ce8:	b580      	push	{r7, lr}
    2cea:	b08c      	sub	sp, #48	; 0x30
    2cec:	af00      	add	r7, sp, #0
    2cee:	e9c7 0100 	strd	r0, r1, [r7]
    2cf2:	e9d7 2300 	ldrd	r2, r3, [r7]
    2cf6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    2cfa:	697b      	ldr	r3, [r7, #20]
    2cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    2cfe:	693b      	ldr	r3, [r7, #16]
    2d00:	62bb      	str	r3, [r7, #40]	; 0x28
    2d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2d04:	151b      	asrs	r3, r3, #20
    2d06:	f3c3 030a 	ubfx	r3, r3, #0, #11
    2d0a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
    2d0e:	627b      	str	r3, [r7, #36]	; 0x24
    2d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2d12:	2b13      	cmp	r3, #19
    2d14:	dc62      	bgt.n	2ddc <floor+0xf4>
    2d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2d18:	2b00      	cmp	r3, #0
    2d1a:	da29      	bge.n	2d70 <floor+0x88>
    2d1c:	a162      	add	r1, pc, #392	; (adr r1, 2ea8 <floor+0x1c0>)
    2d1e:	e9d1 0100 	ldrd	r0, r1, [r1]
    2d22:	e9d7 2300 	ldrd	r2, r3, [r7]
    2d26:	f7fd f9f1 	bl	10c <__adddf3>
    2d2a:	4602      	mov	r2, r0
    2d2c:	460b      	mov	r3, r1
    2d2e:	4610      	mov	r0, r2
    2d30:	4619      	mov	r1, r3
    2d32:	f04f 0200 	mov.w	r2, #0
    2d36:	f04f 0300 	mov.w	r3, #0
    2d3a:	f7fd fe2d 	bl	998 <__aeabi_dcmpgt>
    2d3e:	4603      	mov	r3, r0
    2d40:	2b00      	cmp	r3, #0
    2d42:	f000 80a1 	beq.w	2e88 <floor+0x1a0>
    2d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2d48:	2b00      	cmp	r3, #0
    2d4a:	db04      	blt.n	2d56 <floor+0x6e>
    2d4c:	2300      	movs	r3, #0
    2d4e:	62bb      	str	r3, [r7, #40]	; 0x28
    2d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2d52:	62fb      	str	r3, [r7, #44]	; 0x2c
    2d54:	e098      	b.n	2e88 <floor+0x1a0>
    2d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2d58:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    2d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2d5e:	4313      	orrs	r3, r2
    2d60:	2b00      	cmp	r3, #0
    2d62:	f000 8091 	beq.w	2e88 <floor+0x1a0>
    2d66:	4b52      	ldr	r3, [pc, #328]	; (2eb0 <floor+0x1c8>)
    2d68:	62fb      	str	r3, [r7, #44]	; 0x2c
    2d6a:	2300      	movs	r3, #0
    2d6c:	62bb      	str	r3, [r7, #40]	; 0x28
    2d6e:	e08b      	b.n	2e88 <floor+0x1a0>
    2d70:	4a50      	ldr	r2, [pc, #320]	; (2eb4 <floor+0x1cc>)
    2d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2d74:	fa42 f303 	asr.w	r3, r2, r3
    2d78:	623b      	str	r3, [r7, #32]
    2d7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2d7c:	6a3b      	ldr	r3, [r7, #32]
    2d7e:	401a      	ands	r2, r3
    2d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2d82:	4313      	orrs	r3, r2
    2d84:	2b00      	cmp	r3, #0
    2d86:	d102      	bne.n	2d8e <floor+0xa6>
    2d88:	e9d7 2300 	ldrd	r2, r3, [r7]
    2d8c:	e086      	b.n	2e9c <floor+0x1b4>
    2d8e:	a146      	add	r1, pc, #280	; (adr r1, 2ea8 <floor+0x1c0>)
    2d90:	e9d1 0100 	ldrd	r0, r1, [r1]
    2d94:	e9d7 2300 	ldrd	r2, r3, [r7]
    2d98:	f7fd f9b8 	bl	10c <__adddf3>
    2d9c:	4602      	mov	r2, r0
    2d9e:	460b      	mov	r3, r1
    2da0:	4610      	mov	r0, r2
    2da2:	4619      	mov	r1, r3
    2da4:	f04f 0200 	mov.w	r2, #0
    2da8:	f04f 0300 	mov.w	r3, #0
    2dac:	f7fd fdf4 	bl	998 <__aeabi_dcmpgt>
    2db0:	4603      	mov	r3, r0
    2db2:	2b00      	cmp	r3, #0
    2db4:	d068      	beq.n	2e88 <floor+0x1a0>
    2db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2db8:	2b00      	cmp	r3, #0
    2dba:	da07      	bge.n	2dcc <floor+0xe4>
    2dbc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    2dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2dc2:	fa42 f303 	asr.w	r3, r2, r3
    2dc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2dc8:	4413      	add	r3, r2
    2dca:	62fb      	str	r3, [r7, #44]	; 0x2c
    2dcc:	6a3b      	ldr	r3, [r7, #32]
    2dce:	43da      	mvns	r2, r3
    2dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2dd2:	4013      	ands	r3, r2
    2dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    2dd6:	2300      	movs	r3, #0
    2dd8:	62bb      	str	r3, [r7, #40]	; 0x28
    2dda:	e055      	b.n	2e88 <floor+0x1a0>
    2ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2dde:	2b33      	cmp	r3, #51	; 0x33
    2de0:	dd0f      	ble.n	2e02 <floor+0x11a>
    2de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2de4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    2de8:	d108      	bne.n	2dfc <floor+0x114>
    2dea:	e9d7 0100 	ldrd	r0, r1, [r7]
    2dee:	4602      	mov	r2, r0
    2df0:	460b      	mov	r3, r1
    2df2:	f7fd f98b 	bl	10c <__adddf3>
    2df6:	4602      	mov	r2, r0
    2df8:	460b      	mov	r3, r1
    2dfa:	e04f      	b.n	2e9c <floor+0x1b4>
    2dfc:	e9d7 2300 	ldrd	r2, r3, [r7]
    2e00:	e04c      	b.n	2e9c <floor+0x1b4>
    2e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2e04:	3b14      	subs	r3, #20
    2e06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2e0a:	fa22 f303 	lsr.w	r3, r2, r3
    2e0e:	623b      	str	r3, [r7, #32]
    2e10:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2e12:	6a3b      	ldr	r3, [r7, #32]
    2e14:	4013      	ands	r3, r2
    2e16:	2b00      	cmp	r3, #0
    2e18:	d102      	bne.n	2e20 <floor+0x138>
    2e1a:	e9d7 2300 	ldrd	r2, r3, [r7]
    2e1e:	e03d      	b.n	2e9c <floor+0x1b4>
    2e20:	a121      	add	r1, pc, #132	; (adr r1, 2ea8 <floor+0x1c0>)
    2e22:	e9d1 0100 	ldrd	r0, r1, [r1]
    2e26:	e9d7 2300 	ldrd	r2, r3, [r7]
    2e2a:	f7fd f96f 	bl	10c <__adddf3>
    2e2e:	4602      	mov	r2, r0
    2e30:	460b      	mov	r3, r1
    2e32:	4610      	mov	r0, r2
    2e34:	4619      	mov	r1, r3
    2e36:	f04f 0200 	mov.w	r2, #0
    2e3a:	f04f 0300 	mov.w	r3, #0
    2e3e:	f7fd fdab 	bl	998 <__aeabi_dcmpgt>
    2e42:	4603      	mov	r3, r0
    2e44:	2b00      	cmp	r3, #0
    2e46:	d01f      	beq.n	2e88 <floor+0x1a0>
    2e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2e4a:	2b00      	cmp	r3, #0
    2e4c:	da17      	bge.n	2e7e <floor+0x196>
    2e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2e50:	2b14      	cmp	r3, #20
    2e52:	d103      	bne.n	2e5c <floor+0x174>
    2e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2e56:	3301      	adds	r3, #1
    2e58:	62fb      	str	r3, [r7, #44]	; 0x2c
    2e5a:	e010      	b.n	2e7e <floor+0x196>
    2e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2e5e:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
    2e62:	2201      	movs	r2, #1
    2e64:	409a      	lsls	r2, r3
    2e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2e68:	4413      	add	r3, r2
    2e6a:	61fb      	str	r3, [r7, #28]
    2e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2e6e:	69fa      	ldr	r2, [r7, #28]
    2e70:	429a      	cmp	r2, r3
    2e72:	d202      	bcs.n	2e7a <floor+0x192>
    2e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2e76:	3301      	adds	r3, #1
    2e78:	62fb      	str	r3, [r7, #44]	; 0x2c
    2e7a:	69fb      	ldr	r3, [r7, #28]
    2e7c:	62bb      	str	r3, [r7, #40]	; 0x28
    2e7e:	6a3b      	ldr	r3, [r7, #32]
    2e80:	43da      	mvns	r2, r3
    2e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2e84:	4013      	ands	r3, r2
    2e86:	62bb      	str	r3, [r7, #40]	; 0x28
    2e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2e8a:	60fb      	str	r3, [r7, #12]
    2e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2e8e:	60bb      	str	r3, [r7, #8]
    2e90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    2e94:	e9c7 2300 	strd	r2, r3, [r7]
    2e98:	e9d7 2300 	ldrd	r2, r3, [r7]
    2e9c:	4610      	mov	r0, r2
    2e9e:	4619      	mov	r1, r3
    2ea0:	3730      	adds	r7, #48	; 0x30
    2ea2:	46bd      	mov	sp, r7
    2ea4:	bd80      	pop	{r7, pc}
    2ea6:	bf00      	nop
    2ea8:	8800759c 	.word	0x8800759c
    2eac:	7e37e43c 	.word	0x7e37e43c
    2eb0:	bff00000 	.word	0xbff00000
    2eb4:	000fffff 	.word	0x000fffff

00002eb8 <disconnected>:
}

// triggered when disconnected from phone
static void disconnected(struct bt_conn *conn, uint8_t reason)
{
	printk("Disconnected (reason 0x%02x)\n", reason);
    2eb8:	4801      	ldr	r0, [pc, #4]	; (2ec0 <disconnected+0x8>)
    2eba:	f01b bd2f 	b.w	1e91c <printk>
    2ebe:	bf00      	nop
    2ec0:	0002595c 	.word	0x0002595c

00002ec4 <connected>:
	if (err) {
    2ec4:	b111      	cbz	r1, 2ecc <connected+0x8>
		printk("Connection failed (err 0x%02x)\n", err);
    2ec6:	4803      	ldr	r0, [pc, #12]	; (2ed4 <connected+0x10>)
    2ec8:	f01b bd28 	b.w	1e91c <printk>
		printk("Connected\n");
    2ecc:	4802      	ldr	r0, [pc, #8]	; (2ed8 <connected+0x14>)
    2ece:	f01b bd25 	b.w	1e91c <printk>
    2ed2:	bf00      	nop
    2ed4:	0002597a 	.word	0x0002597a
    2ed8:	0002599a 	.word	0x0002599a

00002edc <auth_cancel>:

	printk("Advertising successfully started\n");
}

static void auth_cancel(struct bt_conn *conn)
{
    2edc:	b530      	push	{r4, r5, lr}
    2ede:	b093      	sub	sp, #76	; 0x4c
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    2ee0:	f01e fb27 	bl	21532 <bt_conn_get_dst>
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    2ee4:	7803      	ldrb	r3, [r0, #0]
    2ee6:	4604      	mov	r4, r0
    2ee8:	ad07      	add	r5, sp, #28
    2eea:	2b03      	cmp	r3, #3
    2eec:	d824      	bhi.n	2f38 <auth_cancel+0x5c>
    2eee:	e8df f003 	tbb	[pc, r3]
    2ef2:	1d02      	.short	0x1d02
    2ef4:	211f      	.short	0x211f
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    2ef6:	4913      	ldr	r1, [pc, #76]	; (2f44 <auth_cancel+0x68>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    2ef8:	4628      	mov	r0, r5
    2efa:	f020 fe96 	bl	23c2a <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    2efe:	79a3      	ldrb	r3, [r4, #6]
    2f00:	9505      	str	r5, [sp, #20]
    2f02:	7862      	ldrb	r2, [r4, #1]
    2f04:	9204      	str	r2, [sp, #16]
    2f06:	78a2      	ldrb	r2, [r4, #2]
    2f08:	9203      	str	r2, [sp, #12]
    2f0a:	78e2      	ldrb	r2, [r4, #3]
    2f0c:	9202      	str	r2, [sp, #8]
    2f0e:	7922      	ldrb	r2, [r4, #4]
    2f10:	9201      	str	r2, [sp, #4]
    2f12:	7962      	ldrb	r2, [r4, #5]
    2f14:	9200      	str	r2, [sp, #0]
    2f16:	211e      	movs	r1, #30
    2f18:	4a0b      	ldr	r2, [pc, #44]	; (2f48 <auth_cancel+0x6c>)
    2f1a:	a80a      	add	r0, sp, #40	; 0x28
    2f1c:	f01b fd0b 	bl	1e936 <snprintk>

	printk("Pairing cancelled: %s\n", addr);
    2f20:	480a      	ldr	r0, [pc, #40]	; (2f4c <auth_cancel+0x70>)
    2f22:	a90a      	add	r1, sp, #40	; 0x28
    2f24:	f01b fcfa 	bl	1e91c <printk>
}
    2f28:	b013      	add	sp, #76	; 0x4c
    2f2a:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    2f2c:	4908      	ldr	r1, [pc, #32]	; (2f50 <auth_cancel+0x74>)
    2f2e:	e7e3      	b.n	2ef8 <auth_cancel+0x1c>
		strcpy(type, "public-id");
    2f30:	4908      	ldr	r1, [pc, #32]	; (2f54 <auth_cancel+0x78>)
    2f32:	e7e1      	b.n	2ef8 <auth_cancel+0x1c>
		strcpy(type, "random-id");
    2f34:	4908      	ldr	r1, [pc, #32]	; (2f58 <auth_cancel+0x7c>)
    2f36:	e7df      	b.n	2ef8 <auth_cancel+0x1c>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    2f38:	4a08      	ldr	r2, [pc, #32]	; (2f5c <auth_cancel+0x80>)
    2f3a:	210a      	movs	r1, #10
    2f3c:	4628      	mov	r0, r5
    2f3e:	f01b fcfa 	bl	1e936 <snprintk>
		break;
    2f42:	e7dc      	b.n	2efe <auth_cancel+0x22>
    2f44:	000259a5 	.word	0x000259a5
    2f48:	000259c7 	.word	0x000259c7
    2f4c:	000259ea 	.word	0x000259ea
    2f50:	000259ac 	.word	0x000259ac
    2f54:	000259b3 	.word	0x000259b3
    2f58:	000259bd 	.word	0x000259bd
    2f5c:	000276ba 	.word	0x000276ba

00002f60 <main>:
}*/



void main(void)
{
    2f60:	b570      	push	{r4, r5, r6, lr}
    int err;

	err = bt_enable(NULL);
    2f62:	2000      	movs	r0, #0
{
    2f64:	b088      	sub	sp, #32
	err = bt_enable(NULL);
    2f66:	f004 fe4f 	bl	7c08 <bt_enable>
	if (err) {
    2f6a:	4606      	mov	r6, r0
    2f6c:	b128      	cbz	r0, 2f7a <main+0x1a>
		printk("Bluetooth init failed (err %d)\n", err);
    2f6e:	4601      	mov	r1, r0
    2f70:	4812      	ldr	r0, [pc, #72]	; (2fbc <main+0x5c>)
    2f72:	f01b fcd3 	bl	1e91c <printk>

	bt_ready();

	bt_conn_cb_register(&conn_callbacks);
	bt_conn_auth_cb_register(&auth_cb_display);
}
    2f76:	b008      	add	sp, #32
    2f78:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    2f7a:	4d11      	ldr	r5, [pc, #68]	; (2fc0 <main+0x60>)
	printk("Bluetooth initialized\n");
    2f7c:	4811      	ldr	r0, [pc, #68]	; (2fc4 <main+0x64>)
    2f7e:	f01b fccd 	bl	1e91c <printk>
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    2f82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2f84:	ac03      	add	r4, sp, #12
    2f86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2f88:	682b      	ldr	r3, [r5, #0]
    2f8a:	6023      	str	r3, [r4, #0]
    2f8c:	490e      	ldr	r1, [pc, #56]	; (2fc8 <main+0x68>)
    2f8e:	9600      	str	r6, [sp, #0]
    2f90:	4633      	mov	r3, r6
    2f92:	2202      	movs	r2, #2
    2f94:	a803      	add	r0, sp, #12
    2f96:	f005 fcad 	bl	88f4 <bt_le_adv_start>
	if (err) {
    2f9a:	4601      	mov	r1, r0
    2f9c:	b148      	cbz	r0, 2fb2 <main+0x52>
		printk("Advertising failed to start (err %d)\n", err);
    2f9e:	480b      	ldr	r0, [pc, #44]	; (2fcc <main+0x6c>)
    2fa0:	f01b fcbc 	bl	1e91c <printk>
	bt_conn_cb_register(&conn_callbacks);
    2fa4:	480a      	ldr	r0, [pc, #40]	; (2fd0 <main+0x70>)
    2fa6:	f005 ffa1 	bl	8eec <bt_conn_cb_register>
	bt_conn_auth_cb_register(&auth_cb_display);
    2faa:	480a      	ldr	r0, [pc, #40]	; (2fd4 <main+0x74>)
    2fac:	f006 fbd6 	bl	975c <bt_conn_auth_cb_register>
    2fb0:	e7e1      	b.n	2f76 <main+0x16>
	printk("Advertising successfully started\n");
    2fb2:	4809      	ldr	r0, [pc, #36]	; (2fd8 <main+0x78>)
    2fb4:	f01b fcb2 	bl	1e91c <printk>
    2fb8:	e7f4      	b.n	2fa4 <main+0x44>
    2fba:	bf00      	nop
    2fbc:	00025a01 	.word	0x00025a01
    2fc0:	000240b0 	.word	0x000240b0
    2fc4:	00025a21 	.word	0x00025a21
    2fc8:	00024190 	.word	0x00024190
    2fcc:	00025a38 	.word	0x00025a38
    2fd0:	2000015c 	.word	0x2000015c
    2fd4:	20000138 	.word	0x20000138
    2fd8:	00025a5e 	.word	0x00025a5e

00002fdc <__printk_hook_install>:
 *
 * @return N/A
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
    2fdc:	4b01      	ldr	r3, [pc, #4]	; (2fe4 <__printk_hook_install+0x8>)
    2fde:	6018      	str	r0, [r3, #0]
}
    2fe0:	4770      	bx	lr
    2fe2:	bf00      	nop
    2fe4:	20000178 	.word	0x20000178

00002fe8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    2fe8:	b530      	push	{r4, r5, lr}
    2fea:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    2fec:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    2ff0:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    2ff2:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
    2ff4:	a901      	add	r1, sp, #4
    2ff6:	4805      	ldr	r0, [pc, #20]	; (300c <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    2ff8:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    2ffa:	f000 f955 	bl	32a8 <cbvprintf>

	if (ctx.count < ctx.max) {
    2ffe:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    3002:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    3004:	bfb8      	it	lt
    3006:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    3008:	b005      	add	sp, #20
    300a:	bd30      	pop	{r4, r5, pc}
    300c:	0001e8f7 	.word	0x0001e8f7

00003010 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    3010:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3014:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    3018:	f019 0808 	ands.w	r8, r9, #8
{
    301c:	4604      	mov	r4, r0
    301e:	4693      	mov	fp, r2
	if (processing) {
    3020:	d00d      	beq.n	303e <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    3022:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    3024:	bf0c      	ite	eq
    3026:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    302a:	f049 0920 	orrne.w	r9, r9, #32
    302e:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    3032:	f38b 8811 	msr	BASEPRI, fp
    3036:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    303a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    303e:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    3042:	2902      	cmp	r1, #2
    3044:	d107      	bne.n	3056 <process_event+0x46>
			evt = process_recheck(mgr);
    3046:	4620      	mov	r0, r4
    3048:	f01b fc82 	bl	1e950 <process_recheck>
		if (evt == EVT_NOP) {
    304c:	2800      	cmp	r0, #0
    304e:	d0f0      	beq.n	3032 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    3050:	2801      	cmp	r0, #1
    3052:	8b23      	ldrh	r3, [r4, #24]
    3054:	d150      	bne.n	30f8 <process_event+0xe8>
			res = mgr->last_res;
    3056:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3058:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    305a:	2f00      	cmp	r7, #0
    305c:	da15      	bge.n	308a <process_event+0x7a>
		*clients = mgr->clients;
    305e:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3060:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    3064:	e9c4 8800 	strd	r8, r8, [r4]
    3068:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    306c:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    306e:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    3070:	8b21      	ldrh	r1, [r4, #24]
    3072:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    3076:	45ca      	cmp	sl, r9
    3078:	d002      	beq.n	3080 <process_event+0x70>
		if (do_monitors
    307a:	68a3      	ldr	r3, [r4, #8]
    307c:	2b00      	cmp	r3, #0
    307e:	d15c      	bne.n	313a <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
    3080:	b90d      	cbnz	r5, 3086 <process_event+0x76>
		    || (transit != NULL)) {
    3082:	2e00      	cmp	r6, #0
    3084:	d074      	beq.n	3170 <process_event+0x160>
    3086:	2300      	movs	r3, #0
    3088:	e058      	b.n	313c <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    308a:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    308e:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    3090:	2a01      	cmp	r2, #1
    3092:	d820      	bhi.n	30d6 <process_event+0xc6>
		*clients = mgr->clients;
    3094:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    3098:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    309a:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
    309c:	b289      	uxth	r1, r1
	list->tail = NULL;
    309e:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    30a2:	d10c      	bne.n	30be <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    30a4:	2d00      	cmp	r5, #0
    30a6:	462b      	mov	r3, r5
    30a8:	bf38      	it	cc
    30aa:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    30ac:	b12b      	cbz	r3, 30ba <process_event+0xaa>
				mgr->refs += 1U;
    30ae:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    30b0:	681b      	ldr	r3, [r3, #0]
    30b2:	3201      	adds	r2, #1
    30b4:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    30b6:	2b00      	cmp	r3, #0
    30b8:	d1f8      	bne.n	30ac <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    30ba:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    30be:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    30c0:	4620      	mov	r0, r4
    30c2:	f01b fc45 	bl	1e950 <process_recheck>
    30c6:	4606      	mov	r6, r0
    30c8:	2800      	cmp	r0, #0
    30ca:	d0d1      	beq.n	3070 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    30cc:	8b23      	ldrh	r3, [r4, #24]
    30ce:	f043 0320 	orr.w	r3, r3, #32
    30d2:	8323      	strh	r3, [r4, #24]
    30d4:	e7cb      	b.n	306e <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    30d6:	2b04      	cmp	r3, #4
    30d8:	d10c      	bne.n	30f4 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    30da:	f021 0107 	bic.w	r1, r1, #7
    30de:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    30e0:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    30e2:	4620      	mov	r0, r4
    30e4:	f01b fc34 	bl	1e950 <process_recheck>
    30e8:	4605      	mov	r5, r0
    30ea:	2800      	cmp	r0, #0
    30ec:	d0bf      	beq.n	306e <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    30ee:	f041 0120 	orr.w	r1, r1, #32
    30f2:	8321      	strh	r1, [r4, #24]
    30f4:	2500      	movs	r5, #0
    30f6:	e7ba      	b.n	306e <process_event+0x5e>
		} else if (evt == EVT_START) {
    30f8:	2803      	cmp	r0, #3
    30fa:	d109      	bne.n	3110 <process_event+0x100>
			transit = mgr->transitions->start;
    30fc:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    30fe:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    3102:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3104:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    3108:	8323      	strh	r3, [r4, #24]
}
    310a:	2500      	movs	r5, #0
		res = 0;
    310c:	462f      	mov	r7, r5
    310e:	e7af      	b.n	3070 <process_event+0x60>
		} else if (evt == EVT_STOP) {
    3110:	2804      	cmp	r0, #4
    3112:	d106      	bne.n	3122 <process_event+0x112>
			transit = mgr->transitions->stop;
    3114:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3116:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    311a:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    311c:	f043 0304 	orr.w	r3, r3, #4
    3120:	e7f2      	b.n	3108 <process_event+0xf8>
		} else if (evt == EVT_RESET) {
    3122:	2805      	cmp	r0, #5
    3124:	d106      	bne.n	3134 <process_event+0x124>
			transit = mgr->transitions->reset;
    3126:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3128:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    312c:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    312e:	f043 0305 	orr.w	r3, r3, #5
    3132:	e7e9      	b.n	3108 <process_event+0xf8>
    3134:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    3136:	462e      	mov	r6, r5
    3138:	e7e8      	b.n	310c <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
    313a:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    313c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    3140:	8321      	strh	r1, [r4, #24]
    3142:	f38b 8811 	msr	BASEPRI, fp
    3146:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    314a:	bb03      	cbnz	r3, 318e <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
    314c:	2d00      	cmp	r5, #0
    314e:	d133      	bne.n	31b8 <process_event+0x1a8>
			if (transit != NULL) {
    3150:	b116      	cbz	r6, 3158 <process_event+0x148>
				transit(mgr, transition_complete);
    3152:	4921      	ldr	r1, [pc, #132]	; (31d8 <process_event+0x1c8>)
    3154:	4620      	mov	r0, r4
    3156:	47b0      	blx	r6
	__asm__ volatile(
    3158:	f04f 0320 	mov.w	r3, #32
    315c:	f3ef 8b11 	mrs	fp, BASEPRI
    3160:	f383 8811 	msr	BASEPRI, r3
    3164:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    3168:	8b23      	ldrh	r3, [r4, #24]
    316a:	f023 0308 	bic.w	r3, r3, #8
    316e:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    3170:	8b23      	ldrh	r3, [r4, #24]
    3172:	06da      	lsls	r2, r3, #27
    3174:	d528      	bpl.n	31c8 <process_event+0x1b8>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    3176:	f023 0310 	bic.w	r3, r3, #16
    317a:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    317c:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    317e:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    3182:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    3186:	2900      	cmp	r1, #0
    3188:	f47f af5b 	bne.w	3042 <process_event+0x32>
out:
    318c:	e751      	b.n	3032 <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    318e:	68a1      	ldr	r1, [r4, #8]
    3190:	2900      	cmp	r1, #0
    3192:	d0db      	beq.n	314c <process_event+0x13c>
	return node->next;
    3194:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
    3196:	f8d1 b004 	ldr.w	fp, [r1, #4]
    319a:	2b00      	cmp	r3, #0
    319c:	bf38      	it	cc
    319e:	2300      	movcc	r3, #0
    31a0:	4699      	mov	r9, r3
    31a2:	4652      	mov	r2, sl
    31a4:	463b      	mov	r3, r7
    31a6:	4620      	mov	r0, r4
    31a8:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    31aa:	f1b9 0f00 	cmp.w	r9, #0
    31ae:	d0cd      	beq.n	314c <process_event+0x13c>
    31b0:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    31b4:	4649      	mov	r1, r9
    31b6:	e7ee      	b.n	3196 <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    31b8:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    31ba:	463b      	mov	r3, r7
    31bc:	4652      	mov	r2, sl
    31be:	4620      	mov	r0, r4
    31c0:	682d      	ldr	r5, [r5, #0]
    31c2:	f01b fbe1 	bl	1e988 <notify_one>
    31c6:	e7c1      	b.n	314c <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    31c8:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    31cc:	bf1e      	ittt	ne
    31ce:	f023 0320 	bicne.w	r3, r3, #32
    31d2:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    31d4:	2102      	movne	r1, #2
    31d6:	e7d2      	b.n	317e <process_event+0x16e>
    31d8:	0001e9b5 	.word	0x0001e9b5

000031dc <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    31dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
    31de:	4e09      	ldr	r6, [pc, #36]	; (3204 <extract_decimal+0x28>)
    31e0:	6801      	ldr	r1, [r0, #0]
{
    31e2:	4602      	mov	r2, r0
		val = 10U * val + *sp++ - '0';
    31e4:	270a      	movs	r7, #10
	size_t val = 0;
    31e6:	2000      	movs	r0, #0
    31e8:	460c      	mov	r4, r1
	while (isdigit((int)(unsigned char)*sp)) {
    31ea:	3101      	adds	r1, #1
    31ec:	7823      	ldrb	r3, [r4, #0]
    31ee:	5d9d      	ldrb	r5, [r3, r6]
    31f0:	076d      	lsls	r5, r5, #29
    31f2:	d401      	bmi.n	31f8 <extract_decimal+0x1c>
	}
	*str = sp;
    31f4:	6014      	str	r4, [r2, #0]
	return val;
}
    31f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    31f8:	fb07 3300 	mla	r3, r7, r0, r3
    31fc:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    3200:	e7f2      	b.n	31e8 <extract_decimal+0xc>
    3202:	bf00      	nop
    3204:	00027c10 	.word	0x00027c10

00003208 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    3208:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    320c:	4614      	mov	r4, r2
    320e:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    3210:	78d3      	ldrb	r3, [r2, #3]
    3212:	4a24      	ldr	r2, [pc, #144]	; (32a4 <encode_uint+0x9c>)
    3214:	f813 a002 	ldrb.w	sl, [r3, r2]
	switch (specifier) {
    3218:	2b6f      	cmp	r3, #111	; 0x6f
    321a:	f00a 0203 	and.w	r2, sl, #3
{
    321e:	4606      	mov	r6, r0
    3220:	460f      	mov	r7, r1
    3222:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    3224:	d02d      	beq.n	3282 <encode_uint+0x7a>
    3226:	d828      	bhi.n	327a <encode_uint+0x72>
		return 16;
    3228:	2b58      	cmp	r3, #88	; 0x58
    322a:	bf14      	ite	ne
    322c:	250a      	movne	r5, #10
    322e:	2510      	moveq	r5, #16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    3230:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    3234:	46aa      	mov	sl, r5
    3236:	f04f 0b00 	mov.w	fp, #0
    323a:	4652      	mov	r2, sl
    323c:	465b      	mov	r3, fp
    323e:	4630      	mov	r0, r6
    3240:	4639      	mov	r1, r7
    3242:	f7fd fbfb 	bl	a3c <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    3246:	2a09      	cmp	r2, #9
    3248:	b2d3      	uxtb	r3, r2
    324a:	d81f      	bhi.n	328c <encode_uint+0x84>
    324c:	3330      	adds	r3, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    324e:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    3250:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    3252:	bf08      	it	eq
    3254:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    3256:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    325a:	d301      	bcc.n	3260 <encode_uint+0x58>
    325c:	45c8      	cmp	r8, r9
    325e:	d812      	bhi.n	3286 <encode_uint+0x7e>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    3260:	7823      	ldrb	r3, [r4, #0]
    3262:	069b      	lsls	r3, r3, #26
    3264:	d505      	bpl.n	3272 <encode_uint+0x6a>
		if (radix == 8) {
    3266:	2d08      	cmp	r5, #8
    3268:	d116      	bne.n	3298 <encode_uint+0x90>
			conv->altform_0 = true;
    326a:	78a3      	ldrb	r3, [r4, #2]
    326c:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    3270:	70a3      	strb	r3, [r4, #2]
		}
	}

	return bp;
}
    3272:	4640      	mov	r0, r8
    3274:	b003      	add	sp, #12
    3276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    327a:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    327e:	2b70      	cmp	r3, #112	; 0x70
    3280:	e7d3      	b.n	322a <encode_uint+0x22>
	switch (specifier) {
    3282:	2508      	movs	r5, #8
    3284:	e7d4      	b.n	3230 <encode_uint+0x28>
		value /= radix;
    3286:	4606      	mov	r6, r0
    3288:	460f      	mov	r7, r1
    328a:	e7d6      	b.n	323a <encode_uint+0x32>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    328c:	9a01      	ldr	r2, [sp, #4]
    328e:	2a01      	cmp	r2, #1
    3290:	bf0c      	ite	eq
    3292:	3337      	addeq	r3, #55	; 0x37
    3294:	3357      	addne	r3, #87	; 0x57
    3296:	e7da      	b.n	324e <encode_uint+0x46>
		} else if (radix == 16) {
    3298:	2d10      	cmp	r5, #16
    329a:	d1ea      	bne.n	3272 <encode_uint+0x6a>
			conv->altform_0c = true;
    329c:	78a3      	ldrb	r3, [r4, #2]
    329e:	f043 0310 	orr.w	r3, r3, #16
    32a2:	e7e5      	b.n	3270 <encode_uint+0x68>
    32a4:	00027c10 	.word	0x00027c10

000032a8 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    32a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    32ac:	4682      	mov	sl, r0
    32ae:	b093      	sub	sp, #76	; 0x4c
    32b0:	468b      	mov	fp, r1
    32b2:	4691      	mov	r9, r2
    32b4:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    32b6:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    32b8:	f899 0000 	ldrb.w	r0, [r9]
    32bc:	b908      	cbnz	r0, 32c2 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    32be:	4628      	mov	r0, r5
    32c0:	e33a      	b.n	3938 <cbvprintf+0x690>
		if (*fp != '%') {
    32c2:	f109 0301 	add.w	r3, r9, #1
    32c6:	2825      	cmp	r0, #37	; 0x25
    32c8:	9302      	str	r3, [sp, #8]
    32ca:	d006      	beq.n	32da <cbvprintf+0x32>
			OUTC('%');
    32cc:	4659      	mov	r1, fp
    32ce:	47d0      	blx	sl
    32d0:	2800      	cmp	r0, #0
    32d2:	f2c0 8331 	blt.w	3938 <cbvprintf+0x690>
    32d6:	3501      	adds	r5, #1
			break;
    32d8:	e1f1      	b.n	36be <cbvprintf+0x416>
		} state = {
    32da:	2218      	movs	r2, #24
    32dc:	2100      	movs	r1, #0
    32de:	a80c      	add	r0, sp, #48	; 0x30
    32e0:	f020 fc9b 	bl	23c1a <memset>
	if (*sp == '%') {
    32e4:	f899 3001 	ldrb.w	r3, [r9, #1]
    32e8:	2b25      	cmp	r3, #37	; 0x25
    32ea:	d059      	beq.n	33a0 <cbvprintf+0xf8>
    32ec:	9a02      	ldr	r2, [sp, #8]
    32ee:	4616      	mov	r6, r2
		switch (*sp) {
    32f0:	f812 3b01 	ldrb.w	r3, [r2], #1
    32f4:	2b2b      	cmp	r3, #43	; 0x2b
    32f6:	f000 808b 	beq.w	3410 <cbvprintf+0x168>
    32fa:	d879      	bhi.n	33f0 <cbvprintf+0x148>
    32fc:	2b20      	cmp	r3, #32
    32fe:	f000 808c 	beq.w	341a <cbvprintf+0x172>
    3302:	2b23      	cmp	r3, #35	; 0x23
    3304:	f000 808e 	beq.w	3424 <cbvprintf+0x17c>
	if (conv->flag_zero && conv->flag_dash) {
    3308:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    330c:	f003 0244 	and.w	r2, r3, #68	; 0x44
    3310:	2a44      	cmp	r2, #68	; 0x44
    3312:	d103      	bne.n	331c <cbvprintf+0x74>
		conv->flag_zero = false;
    3314:	f36f 1386 	bfc	r3, #6, #1
    3318:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
    331c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    3320:	9605      	str	r6, [sp, #20]
    3322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    3326:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
    332a:	7833      	ldrb	r3, [r6, #0]
    332c:	2b2a      	cmp	r3, #42	; 0x2a
    332e:	d17e      	bne.n	342e <cbvprintf+0x186>
		conv->width_star = true;
    3330:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    3334:	f043 0301 	orr.w	r3, r3, #1
    3338:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
    333c:	1c73      	adds	r3, r6, #1
	sp = extract_prec(conv, sp);
    333e:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
    3340:	781a      	ldrb	r2, [r3, #0]
    3342:	2a2e      	cmp	r2, #46	; 0x2e
    3344:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    3348:	bf0c      	ite	eq
    334a:	2101      	moveq	r1, #1
    334c:	2100      	movne	r1, #0
    334e:	f361 0241 	bfi	r2, r1, #1, #1
    3352:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
    3356:	d10b      	bne.n	3370 <cbvprintf+0xc8>
	++sp;
    3358:	1c5a      	adds	r2, r3, #1
    335a:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
    335c:	785a      	ldrb	r2, [r3, #1]
    335e:	2a2a      	cmp	r2, #42	; 0x2a
    3360:	d17b      	bne.n	345a <cbvprintf+0x1b2>
		conv->prec_star = true;
    3362:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    3366:	f042 0204 	orr.w	r2, r2, #4
    336a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
    336e:	3302      	adds	r3, #2
	switch (*sp) {
    3370:	4619      	mov	r1, r3
    3372:	f811 0b01 	ldrb.w	r0, [r1], #1
    3376:	286c      	cmp	r0, #108	; 0x6c
    3378:	f000 80b6 	beq.w	34e8 <cbvprintf+0x240>
    337c:	d87d      	bhi.n	347a <cbvprintf+0x1d2>
    337e:	2868      	cmp	r0, #104	; 0x68
    3380:	f000 8084 	beq.w	348c <cbvprintf+0x1e4>
    3384:	286a      	cmp	r0, #106	; 0x6a
    3386:	f000 80b9 	beq.w	34fc <cbvprintf+0x254>
    338a:	284c      	cmp	r0, #76	; 0x4c
    338c:	f000 80bd 	beq.w	350a <cbvprintf+0x262>
		conv->length_mod = LENGTH_NONE;
    3390:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    3394:	f36f 02c6 	bfc	r2, #3, #4
    3398:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		break;
    339c:	4619      	mov	r1, r3
    339e:	e080      	b.n	34a2 <cbvprintf+0x1fa>
		conv->specifier = *sp++;
    33a0:	f109 0202 	add.w	r2, r9, #2
    33a4:	9202      	str	r2, [sp, #8]
    33a6:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
    33aa:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    33ae:	07d9      	lsls	r1, r3, #31
    33b0:	f140 8149 	bpl.w	3646 <cbvprintf+0x39e>
			width = va_arg(ap, int);
    33b4:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    33b8:	f1b8 0f00 	cmp.w	r8, #0
    33bc:	da07      	bge.n	33ce <cbvprintf+0x126>
				conv->flag_dash = true;
    33be:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    33c2:	f042 0204 	orr.w	r2, r2, #4
    33c6:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
    33ca:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
    33ce:	075a      	lsls	r2, r3, #29
    33d0:	f140 8142 	bpl.w	3658 <cbvprintf+0x3b0>
			int arg = va_arg(ap, int);
    33d4:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
    33d8:	2f00      	cmp	r7, #0
    33da:	f280 8141 	bge.w	3660 <cbvprintf+0x3b8>
				conv->prec_present = false;
    33de:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    33e2:	f36f 0341 	bfc	r3, #1, #1
    33e6:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
    33ea:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    33ee:	e137      	b.n	3660 <cbvprintf+0x3b8>
		switch (*sp) {
    33f0:	2b2d      	cmp	r3, #45	; 0x2d
    33f2:	d006      	beq.n	3402 <cbvprintf+0x15a>
    33f4:	2b30      	cmp	r3, #48	; 0x30
    33f6:	d187      	bne.n	3308 <cbvprintf+0x60>
			conv->flag_zero = true;
    33f8:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    33fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3400:	e003      	b.n	340a <cbvprintf+0x162>
			conv->flag_dash = true;
    3402:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    3406:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
    340a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			break;
    340e:	e76e      	b.n	32ee <cbvprintf+0x46>
			conv->flag_plus = true;
    3410:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    3414:	f043 0308 	orr.w	r3, r3, #8
    3418:	e7f7      	b.n	340a <cbvprintf+0x162>
			conv->flag_space = true;
    341a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    341e:	f043 0310 	orr.w	r3, r3, #16
    3422:	e7f2      	b.n	340a <cbvprintf+0x162>
			conv->flag_hash = true;
    3424:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    3428:	f043 0320 	orr.w	r3, r3, #32
    342c:	e7ed      	b.n	340a <cbvprintf+0x162>
	size_t width = extract_decimal(&sp);
    342e:	a805      	add	r0, sp, #20
    3430:	f7ff fed4 	bl	31dc <extract_decimal>
	if (sp != wp) {
    3434:	9b05      	ldr	r3, [sp, #20]
    3436:	42b3      	cmp	r3, r6
    3438:	d081      	beq.n	333e <cbvprintf+0x96>
		conv->unsupported |= ((conv->width_value < 0)
    343a:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
    343e:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
    3440:	f3c1 0240 	ubfx	r2, r1, #1, #1
    3444:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    3448:	0052      	lsls	r2, r2, #1
    344a:	f062 027f 	orn	r2, r2, #127	; 0x7f
    344e:	f001 017d 	and.w	r1, r1, #125	; 0x7d
    3452:	430a      	orrs	r2, r1
    3454:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
    3458:	e771      	b.n	333e <cbvprintf+0x96>
	size_t prec = extract_decimal(&sp);
    345a:	a805      	add	r0, sp, #20
    345c:	f7ff febe 	bl	31dc <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    3460:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
    3464:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
    3466:	f3c3 0240 	ubfx	r2, r3, #1, #1
    346a:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
    346e:	f360 0341 	bfi	r3, r0, #1, #1
    3472:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
    3476:	9b05      	ldr	r3, [sp, #20]
    3478:	e77a      	b.n	3370 <cbvprintf+0xc8>
	switch (*sp) {
    347a:	2874      	cmp	r0, #116	; 0x74
    347c:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    3480:	d040      	beq.n	3504 <cbvprintf+0x25c>
    3482:	287a      	cmp	r0, #122	; 0x7a
    3484:	d184      	bne.n	3390 <cbvprintf+0xe8>
		conv->length_mod = LENGTH_Z;
    3486:	4613      	mov	r3, r2
    3488:	2206      	movs	r2, #6
    348a:	e028      	b.n	34de <cbvprintf+0x236>
		if (*++sp == 'h') {
    348c:	785a      	ldrb	r2, [r3, #1]
    348e:	2a68      	cmp	r2, #104	; 0x68
    3490:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    3494:	d121      	bne.n	34da <cbvprintf+0x232>
			conv->length_mod = LENGTH_HH;
    3496:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    3498:	f361 02c6 	bfi	r2, r1, #3, #4
    349c:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
    34a0:	1c99      	adds	r1, r3, #2
	conv->specifier = *sp++;
    34a2:	460b      	mov	r3, r1
    34a4:	f813 2b01 	ldrb.w	r2, [r3], #1
    34a8:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
    34aa:	2a78      	cmp	r2, #120	; 0x78
    34ac:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
	conv->specifier = *sp++;
    34b0:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
    34b4:	f200 80bf 	bhi.w	3636 <cbvprintf+0x38e>
    34b8:	2a57      	cmp	r2, #87	; 0x57
    34ba:	d833      	bhi.n	3524 <cbvprintf+0x27c>
    34bc:	2a41      	cmp	r2, #65	; 0x41
    34be:	d003      	beq.n	34c8 <cbvprintf+0x220>
    34c0:	3a45      	subs	r2, #69	; 0x45
    34c2:	2a02      	cmp	r2, #2
    34c4:	f200 80b7 	bhi.w	3636 <cbvprintf+0x38e>
		conv->specifier_cat = SPECIFIER_FP;
    34c8:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    34cc:	2204      	movs	r2, #4
    34ce:	f362 0302 	bfi	r3, r2, #0, #3
    34d2:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			unsupported = true;
    34d6:	2301      	movs	r3, #1
			break;
    34d8:	e084      	b.n	35e4 <cbvprintf+0x33c>
			conv->length_mod = LENGTH_H;
    34da:	4613      	mov	r3, r2
    34dc:	2202      	movs	r2, #2
			conv->length_mod = LENGTH_L;
    34de:	f362 03c6 	bfi	r3, r2, #3, #4
    34e2:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    34e6:	e7dc      	b.n	34a2 <cbvprintf+0x1fa>
		if (*++sp == 'l') {
    34e8:	785a      	ldrb	r2, [r3, #1]
    34ea:	2a6c      	cmp	r2, #108	; 0x6c
    34ec:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    34f0:	d101      	bne.n	34f6 <cbvprintf+0x24e>
			conv->length_mod = LENGTH_LL;
    34f2:	2104      	movs	r1, #4
    34f4:	e7d0      	b.n	3498 <cbvprintf+0x1f0>
			conv->length_mod = LENGTH_L;
    34f6:	4613      	mov	r3, r2
    34f8:	2203      	movs	r2, #3
    34fa:	e7f0      	b.n	34de <cbvprintf+0x236>
		conv->length_mod = LENGTH_J;
    34fc:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    3500:	2205      	movs	r2, #5
    3502:	e7ec      	b.n	34de <cbvprintf+0x236>
		conv->length_mod = LENGTH_T;
    3504:	4613      	mov	r3, r2
    3506:	2207      	movs	r2, #7
    3508:	e7e9      	b.n	34de <cbvprintf+0x236>
		conv->unsupported = true;
    350a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    350e:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    3512:	f023 0302 	bic.w	r3, r3, #2
    3516:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    351a:	f043 0302 	orr.w	r3, r3, #2
    351e:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
    3522:	e7be      	b.n	34a2 <cbvprintf+0x1fa>
    3524:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    3528:	2920      	cmp	r1, #32
    352a:	f200 8084 	bhi.w	3636 <cbvprintf+0x38e>
    352e:	a001      	add	r0, pc, #4	; (adr r0, 3534 <cbvprintf+0x28c>)
    3530:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    3534:	000035f9 	.word	0x000035f9
    3538:	00003637 	.word	0x00003637
    353c:	00003637 	.word	0x00003637
    3540:	00003637 	.word	0x00003637
    3544:	00003637 	.word	0x00003637
    3548:	00003637 	.word	0x00003637
    354c:	00003637 	.word	0x00003637
    3550:	00003637 	.word	0x00003637
    3554:	00003637 	.word	0x00003637
    3558:	000034c9 	.word	0x000034c9
    355c:	00003637 	.word	0x00003637
    3560:	000035f9 	.word	0x000035f9
    3564:	000035b9 	.word	0x000035b9
    3568:	000034c9 	.word	0x000034c9
    356c:	000034c9 	.word	0x000034c9
    3570:	000034c9 	.word	0x000034c9
    3574:	00003637 	.word	0x00003637
    3578:	000035b9 	.word	0x000035b9
    357c:	00003637 	.word	0x00003637
    3580:	00003637 	.word	0x00003637
    3584:	00003637 	.word	0x00003637
    3588:	00003637 	.word	0x00003637
    358c:	00003601 	.word	0x00003601
    3590:	000035f9 	.word	0x000035f9
    3594:	0000361d 	.word	0x0000361d
    3598:	00003637 	.word	0x00003637
    359c:	00003637 	.word	0x00003637
    35a0:	0000361d 	.word	0x0000361d
    35a4:	00003637 	.word	0x00003637
    35a8:	000035f9 	.word	0x000035f9
    35ac:	00003637 	.word	0x00003637
    35b0:	00003637 	.word	0x00003637
    35b4:	000035f9 	.word	0x000035f9
		conv->specifier_cat = SPECIFIER_SINT;
    35b8:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
    35bc:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    35be:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    35c2:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    35c6:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    35c8:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
			conv->invalid = true;
    35cc:	bf02      	ittt	eq
    35ce:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
    35d2:	f041 0101 	orreq.w	r1, r1, #1
    35d6:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
    35da:	2a63      	cmp	r2, #99	; 0x63
    35dc:	d131      	bne.n	3642 <cbvprintf+0x39a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    35de:	3b00      	subs	r3, #0
    35e0:	bf18      	it	ne
    35e2:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    35e4:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    35e8:	f3c2 0140 	ubfx	r1, r2, #1, #1
    35ec:	430b      	orrs	r3, r1
    35ee:	f363 0241 	bfi	r2, r3, #1, #1
    35f2:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    35f6:	e6d8      	b.n	33aa <cbvprintf+0x102>
		conv->specifier_cat = SPECIFIER_UINT;
    35f8:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
    35fc:	2002      	movs	r0, #2
    35fe:	e7de      	b.n	35be <cbvprintf+0x316>
		conv->specifier_cat = SPECIFIER_PTR;
    3600:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    3604:	f003 0378 	and.w	r3, r3, #120	; 0x78
    3608:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    360c:	2103      	movs	r1, #3
    360e:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    3612:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    3614:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    3618:	4143      	adcs	r3, r0
    361a:	e7e3      	b.n	35e4 <cbvprintf+0x33c>
		conv->specifier_cat = SPECIFIER_PTR;
    361c:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    3620:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    3622:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    3626:	f361 0202 	bfi	r2, r1, #0, #3
    362a:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
    362e:	bf14      	ite	ne
    3630:	2301      	movne	r3, #1
    3632:	2300      	moveq	r3, #0
    3634:	e7d6      	b.n	35e4 <cbvprintf+0x33c>
		conv->invalid = true;
    3636:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    363a:	f043 0301 	orr.w	r3, r3, #1
    363e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	bool unsupported = false;
    3642:	2300      	movs	r3, #0
    3644:	e7ce      	b.n	35e4 <cbvprintf+0x33c>
		} else if (conv->width_present) {
    3646:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
    364a:	2a00      	cmp	r2, #0
			width = conv->width_value;
    364c:	bfb4      	ite	lt
    364e:	f8dd 803c 	ldrlt.w	r8, [sp, #60]	; 0x3c
		int width = -1;
    3652:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
    3656:	e6ba      	b.n	33ce <cbvprintf+0x126>
		} else if (conv->prec_present) {
    3658:	079f      	lsls	r7, r3, #30
    365a:	f57f aec6 	bpl.w	33ea <cbvprintf+0x142>
			precision = conv->prec_value;
    365e:	9f10      	ldr	r7, [sp, #64]	; 0x40
			= (enum length_mod_enum)conv->length_mod;
    3660:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		conv->pad0_value = 0;
    3664:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    3666:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
			= (enum specifier_cat_enum)conv->specifier_cat;
    366a:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		enum specifier_cat_enum specifier_cat
    366e:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    3672:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    3674:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    3678:	d137      	bne.n	36ea <cbvprintf+0x442>
			switch (length_mod) {
    367a:	1ecb      	subs	r3, r1, #3
    367c:	2b04      	cmp	r3, #4
    367e:	d821      	bhi.n	36c4 <cbvprintf+0x41c>
    3680:	e8df f003 	tbb	[pc, r3]
    3684:	20070703 	.word	0x20070703
    3688:	20          	.byte	0x20
    3689:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    368a:	f854 2b04 	ldr.w	r2, [r4], #4
				value->sint = (short)value->sint;
    368e:	17d3      	asrs	r3, r2, #31
    3690:	e004      	b.n	369c <cbvprintf+0x3f4>
					(sint_value_type)va_arg(ap, intmax_t);
    3692:	3407      	adds	r4, #7
    3694:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    3698:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->sint = (short)value->sint;
    369c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
    36a0:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    36a4:	f013 0603 	ands.w	r6, r3, #3
    36a8:	d055      	beq.n	3756 <cbvprintf+0x4ae>
			OUTS(sp, fp);
    36aa:	9b02      	ldr	r3, [sp, #8]
    36ac:	464a      	mov	r2, r9
    36ae:	4659      	mov	r1, fp
    36b0:	4650      	mov	r0, sl
    36b2:	f01b fcd3 	bl	1f05c <outs>
    36b6:	2800      	cmp	r0, #0
    36b8:	f2c0 813e 	blt.w	3938 <cbvprintf+0x690>
    36bc:	4405      	add	r5, r0
			OUTS(bps, bpe);
    36be:	f8dd 9008 	ldr.w	r9, [sp, #8]
    36c2:	e5f9      	b.n	32b8 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    36c4:	f854 2b04 	ldr.w	r2, [r4], #4
			if (length_mod == LENGTH_HH) {
    36c8:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    36ca:	ea4f 73e2 	mov.w	r3, r2, asr #31
    36ce:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    36d2:	d105      	bne.n	36e0 <cbvprintf+0x438>
				value->uint = (unsigned char)value->uint;
    36d4:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
    36d8:	930c      	str	r3, [sp, #48]	; 0x30
    36da:	2300      	movs	r3, #0
    36dc:	930d      	str	r3, [sp, #52]	; 0x34
    36de:	e7df      	b.n	36a0 <cbvprintf+0x3f8>
			} else if (length_mod == LENGTH_H) {
    36e0:	2902      	cmp	r1, #2
    36e2:	d1dd      	bne.n	36a0 <cbvprintf+0x3f8>
				value->sint = (short)value->sint;
    36e4:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
    36e8:	e7d1      	b.n	368e <cbvprintf+0x3e6>
		} else if (specifier_cat == SPECIFIER_UINT) {
    36ea:	2b02      	cmp	r3, #2
    36ec:	d123      	bne.n	3736 <cbvprintf+0x48e>
			switch (length_mod) {
    36ee:	1ecb      	subs	r3, r1, #3
    36f0:	2b04      	cmp	r3, #4
    36f2:	d813      	bhi.n	371c <cbvprintf+0x474>
    36f4:	e8df f003 	tbb	[pc, r3]
    36f8:	120a0a03 	.word	0x120a0a03
    36fc:	12          	.byte	0x12
    36fd:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    36fe:	6822      	ldr	r2, [r4, #0]
    3700:	920c      	str	r2, [sp, #48]	; 0x30
    3702:	2300      	movs	r3, #0
    3704:	1d20      	adds	r0, r4, #4
    3706:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
    3708:	4604      	mov	r4, r0
    370a:	e7c9      	b.n	36a0 <cbvprintf+0x3f8>
					(uint_value_type)va_arg(ap,
    370c:	3407      	adds	r4, #7
    370e:	f024 0007 	bic.w	r0, r4, #7
				value->uint =
    3712:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    3716:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
    371a:	e7f5      	b.n	3708 <cbvprintf+0x460>
					(uint_value_type)va_arg(ap, size_t);
    371c:	f854 3b04 	ldr.w	r3, [r4], #4
    3720:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    3722:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    3724:	f04f 0300 	mov.w	r3, #0
    3728:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
    372a:	d0d3      	beq.n	36d4 <cbvprintf+0x42c>
			} else if (length_mod == LENGTH_H) {
    372c:	2902      	cmp	r1, #2
    372e:	d1b7      	bne.n	36a0 <cbvprintf+0x3f8>
				value->uint = (unsigned short)value->uint;
    3730:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    3734:	e7d0      	b.n	36d8 <cbvprintf+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
    3736:	2b04      	cmp	r3, #4
    3738:	d107      	bne.n	374a <cbvprintf+0x4a2>
			if (length_mod == LENGTH_UPPER_L) {
    373a:	3407      	adds	r4, #7
    373c:	f024 0407 	bic.w	r4, r4, #7
    3740:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->ldbl = va_arg(ap, long double);
    3744:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    3748:	e7aa      	b.n	36a0 <cbvprintf+0x3f8>
		} else if (specifier_cat == SPECIFIER_PTR) {
    374a:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    374c:	bf04      	itt	eq
    374e:	f854 3b04 	ldreq.w	r3, [r4], #4
    3752:	930c      	streq	r3, [sp, #48]	; 0x30
    3754:	e7a4      	b.n	36a0 <cbvprintf+0x3f8>
		switch (conv->specifier) {
    3756:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    375a:	2878      	cmp	r0, #120	; 0x78
    375c:	d8af      	bhi.n	36be <cbvprintf+0x416>
    375e:	2862      	cmp	r0, #98	; 0x62
    3760:	d820      	bhi.n	37a4 <cbvprintf+0x4fc>
    3762:	2825      	cmp	r0, #37	; 0x25
    3764:	f43f adb2 	beq.w	32cc <cbvprintf+0x24>
    3768:	2858      	cmp	r0, #88	; 0x58
    376a:	d1a8      	bne.n	36be <cbvprintf+0x416>
			bps = encode_uint(value->uint, conv, buf, bpe);
    376c:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
    3770:	9300      	str	r3, [sp, #0]
    3772:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    3776:	ab06      	add	r3, sp, #24
    3778:	aa0e      	add	r2, sp, #56	; 0x38
    377a:	f7ff fd45 	bl	3208 <encode_uint>
    377e:	4681      	mov	r9, r0
			if (precision >= 0) {
    3780:	2f00      	cmp	r7, #0
    3782:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
    3786:	db0b      	blt.n	37a0 <cbvprintf+0x4f8>
				conv->flag_zero = false;
    3788:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
				size_t len = bpe - bps;
    378c:	eba0 0309 	sub.w	r3, r0, r9
				conv->flag_zero = false;
    3790:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    3794:	429f      	cmp	r7, r3
				conv->flag_zero = false;
    3796:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
    379a:	d901      	bls.n	37a0 <cbvprintf+0x4f8>
					conv->pad0_value = precision - (int)len;
    379c:	1aff      	subs	r7, r7, r3
    379e:	970f      	str	r7, [sp, #60]	; 0x3c
		const char *bpe = buf + sizeof(buf);
    37a0:	4607      	mov	r7, r0
    37a2:	e03c      	b.n	381e <cbvprintf+0x576>
    37a4:	3863      	subs	r0, #99	; 0x63
    37a6:	2815      	cmp	r0, #21
    37a8:	d889      	bhi.n	36be <cbvprintf+0x416>
    37aa:	a201      	add	r2, pc, #4	; (adr r2, 37b0 <cbvprintf+0x508>)
    37ac:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    37b0:	0000382f 	.word	0x0000382f
    37b4:	00003891 	.word	0x00003891
    37b8:	000036bf 	.word	0x000036bf
    37bc:	000036bf 	.word	0x000036bf
    37c0:	000036bf 	.word	0x000036bf
    37c4:	000036bf 	.word	0x000036bf
    37c8:	00003891 	.word	0x00003891
    37cc:	000036bf 	.word	0x000036bf
    37d0:	000036bf 	.word	0x000036bf
    37d4:	000036bf 	.word	0x000036bf
    37d8:	000036bf 	.word	0x000036bf
    37dc:	000038ef 	.word	0x000038ef
    37e0:	000038bd 	.word	0x000038bd
    37e4:	000038c1 	.word	0x000038c1
    37e8:	000036bf 	.word	0x000036bf
    37ec:	000036bf 	.word	0x000036bf
    37f0:	00003809 	.word	0x00003809
    37f4:	000036bf 	.word	0x000036bf
    37f8:	000038bd 	.word	0x000038bd
    37fc:	000036bf 	.word	0x000036bf
    3800:	000036bf 	.word	0x000036bf
    3804:	000038bd 	.word	0x000038bd
			if (precision >= 0) {
    3808:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
    380a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			if (precision >= 0) {
    380e:	db0a      	blt.n	3826 <cbvprintf+0x57e>
				len = strnlen(bps, precision);
    3810:	4639      	mov	r1, r7
    3812:	4648      	mov	r0, r9
    3814:	f020 fa24 	bl	23c60 <strnlen>
			bpe = bps + len;
    3818:	eb09 0700 	add.w	r7, r9, r0
		char sign = 0;
    381c:	2600      	movs	r6, #0
		if (bps == NULL) {
    381e:	f1b9 0f00 	cmp.w	r9, #0
    3822:	d10c      	bne.n	383e <cbvprintf+0x596>
    3824:	e74b      	b.n	36be <cbvprintf+0x416>
				len = strlen(bps);
    3826:	4648      	mov	r0, r9
    3828:	f7fd fa8e 	bl	d48 <strlen>
    382c:	e7f4      	b.n	3818 <cbvprintf+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    382e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3830:	f88d 3018 	strb.w	r3, [sp, #24]
			break;
    3834:	2600      	movs	r6, #0
			bpe = buf + 1;
    3836:	f10d 0719 	add.w	r7, sp, #25
			bps = buf;
    383a:	f10d 0918 	add.w	r9, sp, #24
		size_t nj_len = (bpe - bps);
    383e:	eba7 0309 	sub.w	r3, r7, r9
		if (sign != 0) {
    3842:	b106      	cbz	r6, 3846 <cbvprintf+0x59e>
			nj_len += 1U;
    3844:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    3846:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    384a:	06d0      	lsls	r0, r2, #27
    384c:	d569      	bpl.n	3922 <cbvprintf+0x67a>
			nj_len += 2U;
    384e:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    3850:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    3852:	990f      	ldr	r1, [sp, #60]	; 0x3c
			nj_len += conv->pad0_pre_exp;
    3854:	bf48      	it	mi
    3856:	9a10      	ldrmi	r2, [sp, #64]	; 0x40
		nj_len += conv->pad0_value;
    3858:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    385a:	bf48      	it	mi
    385c:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    385e:	f1b8 0f00 	cmp.w	r8, #0
    3862:	dd76      	ble.n	3952 <cbvprintf+0x6aa>
			if (!conv->flag_dash) {
    3864:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
			width -= (int)nj_len;
    3868:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
    386c:	f3c2 0380 	ubfx	r3, r2, #2, #1
    3870:	9303      	str	r3, [sp, #12]
    3872:	0753      	lsls	r3, r2, #29
    3874:	d46d      	bmi.n	3952 <cbvprintf+0x6aa>
				if (conv->flag_zero) {
    3876:	0650      	lsls	r0, r2, #25
    3878:	d561      	bpl.n	393e <cbvprintf+0x696>
					if (sign != 0) {
    387a:	b13e      	cbz	r6, 388c <cbvprintf+0x5e4>
						OUTC(sign);
    387c:	4659      	mov	r1, fp
    387e:	4630      	mov	r0, r6
    3880:	47d0      	blx	sl
    3882:	2800      	cmp	r0, #0
    3884:	db58      	blt.n	3938 <cbvprintf+0x690>
						sign = 0;
    3886:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    3888:	3501      	adds	r5, #1
						sign = 0;
    388a:	461e      	mov	r6, r3
					pad = '0';
    388c:	2330      	movs	r3, #48	; 0x30
    388e:	e057      	b.n	3940 <cbvprintf+0x698>
			if (conv->flag_plus) {
    3890:	071e      	lsls	r6, r3, #28
    3892:	d411      	bmi.n	38b8 <cbvprintf+0x610>
				sign = ' ';
    3894:	f013 0610 	ands.w	r6, r3, #16
    3898:	bf18      	it	ne
    389a:	2620      	movne	r6, #32
			sint = value->sint;
    389c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
    38a0:	2a00      	cmp	r2, #0
    38a2:	f173 0100 	sbcs.w	r1, r3, #0
    38a6:	f6bf af61 	bge.w	376c <cbvprintf+0x4c4>
				value->uint = (uint_value_type)-sint;
    38aa:	4252      	negs	r2, r2
    38ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    38b0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
    38b4:	262d      	movs	r6, #45	; 0x2d
    38b6:	e759      	b.n	376c <cbvprintf+0x4c4>
				sign = '+';
    38b8:	262b      	movs	r6, #43	; 0x2b
    38ba:	e7ef      	b.n	389c <cbvprintf+0x5f4>
		switch (conv->specifier) {
    38bc:	2600      	movs	r6, #0
    38be:	e755      	b.n	376c <cbvprintf+0x4c4>
			if (value->ptr != NULL) {
    38c0:	980c      	ldr	r0, [sp, #48]	; 0x30
    38c2:	b348      	cbz	r0, 3918 <cbvprintf+0x670>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    38c4:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
    38c8:	9300      	str	r3, [sp, #0]
    38ca:	aa0e      	add	r2, sp, #56	; 0x38
    38cc:	ab06      	add	r3, sp, #24
    38ce:	2100      	movs	r1, #0
    38d0:	f7ff fc9a 	bl	3208 <encode_uint>
				conv->altform_0c = true;
    38d4:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    38d8:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    38dc:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    38e0:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    38e4:	4681      	mov	r9, r0
				conv->altform_0c = true;
    38e6:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
    38ea:	2600      	movs	r6, #0
				goto prec_int_pad0;
    38ec:	e748      	b.n	3780 <cbvprintf+0x4d8>
				store_count(conv, value->ptr, count);
    38ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
    38f0:	2907      	cmp	r1, #7
    38f2:	f63f aee4 	bhi.w	36be <cbvprintf+0x416>
    38f6:	e8df f001 	tbb	[pc, r1]
    38fa:	040d      	.short	0x040d
    38fc:	08080d06 	.word	0x08080d06
    3900:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
    3902:	701d      	strb	r5, [r3, #0]
		break;
    3904:	e6db      	b.n	36be <cbvprintf+0x416>
		*(short *)dp = (short)count;
    3906:	801d      	strh	r5, [r3, #0]
		break;
    3908:	e6d9      	b.n	36be <cbvprintf+0x416>
		*(intmax_t *)dp = (intmax_t)count;
    390a:	4628      	mov	r0, r5
    390c:	17e9      	asrs	r1, r5, #31
    390e:	e9c3 0100 	strd	r0, r1, [r3]
		break;
    3912:	e6d4      	b.n	36be <cbvprintf+0x416>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    3914:	601d      	str	r5, [r3, #0]
		break;
    3916:	e6d2      	b.n	36be <cbvprintf+0x416>
			bpe = bps + 5;
    3918:	4f2e      	ldr	r7, [pc, #184]	; (39d4 <cbvprintf+0x72c>)
    391a:	4606      	mov	r6, r0
			bps = "(nil)";
    391c:	f1a7 0905 	sub.w	r9, r7, #5
    3920:	e78d      	b.n	383e <cbvprintf+0x596>
		} else if (conv->altform_0) {
    3922:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    3924:	bf48      	it	mi
    3926:	3301      	addmi	r3, #1
    3928:	e792      	b.n	3850 <cbvprintf+0x5a8>
					OUTC(pad);
    392a:	4618      	mov	r0, r3
    392c:	4659      	mov	r1, fp
    392e:	9303      	str	r3, [sp, #12]
    3930:	47d0      	blx	sl
    3932:	2800      	cmp	r0, #0
    3934:	9b03      	ldr	r3, [sp, #12]
    3936:	da04      	bge.n	3942 <cbvprintf+0x69a>
#undef OUTS
#undef OUTC
}
    3938:	b013      	add	sp, #76	; 0x4c
    393a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    393e:	2320      	movs	r3, #32
    3940:	4445      	add	r5, r8
    3942:	4642      	mov	r2, r8
				while (width-- > 0) {
    3944:	2a00      	cmp	r2, #0
    3946:	eba5 0108 	sub.w	r1, r5, r8
    394a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    394e:	dcec      	bgt.n	392a <cbvprintf+0x682>
    3950:	460d      	mov	r5, r1
		if (sign != 0) {
    3952:	b12e      	cbz	r6, 3960 <cbvprintf+0x6b8>
			OUTC(sign);
    3954:	4659      	mov	r1, fp
    3956:	4630      	mov	r0, r6
    3958:	47d0      	blx	sl
    395a:	2800      	cmp	r0, #0
    395c:	dbec      	blt.n	3938 <cbvprintf+0x690>
    395e:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    3960:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    3964:	06d9      	lsls	r1, r3, #27
    3966:	d401      	bmi.n	396c <cbvprintf+0x6c4>
    3968:	071a      	lsls	r2, r3, #28
    396a:	d505      	bpl.n	3978 <cbvprintf+0x6d0>
				OUTC('0');
    396c:	4659      	mov	r1, fp
    396e:	2030      	movs	r0, #48	; 0x30
    3970:	47d0      	blx	sl
    3972:	2800      	cmp	r0, #0
    3974:	dbe0      	blt.n	3938 <cbvprintf+0x690>
    3976:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    3978:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    397c:	06db      	lsls	r3, r3, #27
    397e:	d506      	bpl.n	398e <cbvprintf+0x6e6>
				OUTC(conv->specifier);
    3980:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    3984:	4659      	mov	r1, fp
    3986:	47d0      	blx	sl
    3988:	2800      	cmp	r0, #0
    398a:	dbd5      	blt.n	3938 <cbvprintf+0x690>
    398c:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    398e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    3990:	442e      	add	r6, r5
    3992:	1b73      	subs	r3, r6, r5
    3994:	2b00      	cmp	r3, #0
    3996:	dc15      	bgt.n	39c4 <cbvprintf+0x71c>
			OUTS(bps, bpe);
    3998:	463b      	mov	r3, r7
    399a:	464a      	mov	r2, r9
    399c:	4659      	mov	r1, fp
    399e:	4650      	mov	r0, sl
    39a0:	f01b fb5c 	bl	1f05c <outs>
    39a4:	2800      	cmp	r0, #0
    39a6:	dbc7      	blt.n	3938 <cbvprintf+0x690>
    39a8:	4405      	add	r5, r0
		while (width > 0) {
    39aa:	44a8      	add	r8, r5
    39ac:	eba8 0305 	sub.w	r3, r8, r5
    39b0:	2b00      	cmp	r3, #0
    39b2:	f77f ae84 	ble.w	36be <cbvprintf+0x416>
			OUTC(' ');
    39b6:	4659      	mov	r1, fp
    39b8:	2020      	movs	r0, #32
    39ba:	47d0      	blx	sl
    39bc:	2800      	cmp	r0, #0
    39be:	dbbb      	blt.n	3938 <cbvprintf+0x690>
    39c0:	3501      	adds	r5, #1
			--width;
    39c2:	e7f3      	b.n	39ac <cbvprintf+0x704>
				OUTC('0');
    39c4:	4659      	mov	r1, fp
    39c6:	2030      	movs	r0, #48	; 0x30
    39c8:	47d0      	blx	sl
    39ca:	2800      	cmp	r0, #0
    39cc:	dbb4      	blt.n	3938 <cbvprintf+0x690>
    39ce:	3501      	adds	r5, #1
    39d0:	e7df      	b.n	3992 <cbvprintf+0x6ea>
    39d2:	bf00      	nop
    39d4:	00025a92 	.word	0x00025a92

000039d8 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    39d8:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    39da:	4910      	ldr	r1, [pc, #64]	; (3a1c <enable_logger+0x44>)
    39dc:	4810      	ldr	r0, [pc, #64]	; (3a20 <enable_logger+0x48>)
{
    39de:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    39e0:	2200      	movs	r2, #0
    39e2:	f01f ff8f 	bl	23904 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    39e6:	4d0f      	ldr	r5, [pc, #60]	; (3a24 <enable_logger+0x4c>)
    39e8:	490f      	ldr	r1, [pc, #60]	; (3a28 <enable_logger+0x50>)
    39ea:	2200      	movs	r2, #0
    39ec:	2300      	movs	r3, #0
    39ee:	e9cd 2306 	strd	r2, r3, [sp, #24]
    39f2:	2400      	movs	r4, #0
    39f4:	230e      	movs	r3, #14
    39f6:	e9cd 3403 	strd	r3, r4, [sp, #12]
    39fa:	e9cd 4401 	strd	r4, r4, [sp, #4]
    39fe:	4b0b      	ldr	r3, [pc, #44]	; (3a2c <enable_logger+0x54>)
    3a00:	9400      	str	r4, [sp, #0]
    3a02:	f44f 7240 	mov.w	r2, #768	; 0x300
    3a06:	4628      	mov	r0, r5
    3a08:	f01a f96a 	bl	1dce0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    3a0c:	4908      	ldr	r1, [pc, #32]	; (3a30 <enable_logger+0x58>)
    3a0e:	4628      	mov	r0, r5
    3a10:	f01f fe41 	bl	23696 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    3a14:	4620      	mov	r0, r4
    3a16:	b009      	add	sp, #36	; 0x24
    3a18:	bd30      	pop	{r4, r5, pc}
    3a1a:	bf00      	nop
    3a1c:	00003a35 	.word	0x00003a35
    3a20:	20000a80 	.word	0x20000a80
    3a24:	20000ab8 	.word	0x20000ab8
    3a28:	200036e0 	.word	0x200036e0
    3a2c:	00003e9d 	.word	0x00003e9d
    3a30:	00025a93 	.word	0x00025a93

00003a34 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    3a34:	4801      	ldr	r0, [pc, #4]	; (3a3c <log_process_thread_timer_expiry_fn+0x8>)
    3a36:	f01a b8b9 	b.w	1dbac <z_impl_k_sem_give>
    3a3a:	bf00      	nop
    3a3c:	20000918 	.word	0x20000918

00003a40 <z_log_get_s_mask>:
{
    3a40:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a42:	4605      	mov	r5, r0
		} else if (arm && isalpha((int)curr)) {
    3a44:	4e0f      	ldr	r6, [pc, #60]	; (3a84 <z_log_get_s_mask+0x44>)
	uint32_t mask = 0U;
    3a46:	2000      	movs	r0, #0
	uint32_t arg = 0U;
    3a48:	4603      	mov	r3, r0
	bool arm = false;
    3a4a:	4602      	mov	r2, r0
				mask |= BIT(arg);
    3a4c:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
    3a4e:	f815 4b01 	ldrb.w	r4, [r5], #1
    3a52:	b10c      	cbz	r4, 3a58 <z_log_get_s_mask+0x18>
    3a54:	428b      	cmp	r3, r1
    3a56:	d300      	bcc.n	3a5a <z_log_get_s_mask+0x1a>
}
    3a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
    3a5a:	2c25      	cmp	r4, #37	; 0x25
    3a5c:	d102      	bne.n	3a64 <z_log_get_s_mask+0x24>
			arm = !arm;
    3a5e:	f082 0201 	eor.w	r2, r2, #1
    3a62:	e7f4      	b.n	3a4e <z_log_get_s_mask+0xe>
		} else if (arm && isalpha((int)curr)) {
    3a64:	2a00      	cmp	r2, #0
    3a66:	d0f2      	beq.n	3a4e <z_log_get_s_mask+0xe>
    3a68:	f814 c006 	ldrb.w	ip, [r4, r6]
    3a6c:	f01c 0f03 	tst.w	ip, #3
    3a70:	d0ed      	beq.n	3a4e <z_log_get_s_mask+0xe>
			if (curr == 's') {
    3a72:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
    3a74:	bf04      	itt	eq
    3a76:	fa07 f203 	lsleq.w	r2, r7, r3
    3a7a:	4310      	orreq	r0, r2
			arg++;
    3a7c:	3301      	adds	r3, #1
			arm = false;
    3a7e:	2200      	movs	r2, #0
    3a80:	e7e5      	b.n	3a4e <z_log_get_s_mask+0xe>
    3a82:	bf00      	nop
    3a84:	00027c10 	.word	0x00027c10

00003a88 <log_core_init>:
{
    3a88:	b508      	push	{r3, lr}
		log_msg_pool_init();
    3a8a:	f000 fa69 	bl	3f60 <log_msg_pool_init>
		log_list_init(&list);
    3a8e:	4809      	ldr	r0, [pc, #36]	; (3ab4 <log_core_init+0x2c>)
    3a90:	f01b fafb 	bl	1f08a <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    3a94:	2308      	movs	r3, #8
    3a96:	2248      	movs	r2, #72	; 0x48
    3a98:	4907      	ldr	r1, [pc, #28]	; (3ab8 <log_core_init+0x30>)
    3a9a:	4808      	ldr	r0, [pc, #32]	; (3abc <log_core_init+0x34>)
    3a9c:	f01f fbe1 	bl	23262 <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
    3aa0:	4b07      	ldr	r3, [pc, #28]	; (3ac0 <log_core_init+0x38>)
    3aa2:	4a08      	ldr	r2, [pc, #32]	; (3ac4 <log_core_init+0x3c>)
    3aa4:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    3aa6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
}
    3aaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
    3aae:	f000 bca1 	b.w	43f4 <log_output_timestamp_freq_set>
    3ab2:	bf00      	nop
    3ab4:	20001674 	.word	0x20001674
    3ab8:	2000e0d0 	.word	0x2000e0d0
    3abc:	2000167c 	.word	0x2000167c
    3ac0:	2000017c 	.word	0x2000017c
    3ac4:	0001f0c9 	.word	0x0001f0c9

00003ac8 <dropped_notify>:
{
    3ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3aca:	4b0f      	ldr	r3, [pc, #60]	; (3b08 <dropped_notify+0x40>)
    3acc:	f3bf 8f5b 	dmb	ish
    3ad0:	2500      	movs	r5, #0
    3ad2:	e853 7f00 	ldrex	r7, [r3]
    3ad6:	e843 5200 	strex	r2, r5, [r3]
    3ada:	2a00      	cmp	r2, #0
    3adc:	d1f9      	bne.n	3ad2 <dropped_notify+0xa>
    3ade:	f3bf 8f5b 	dmb	ish
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    3ae2:	4c0a      	ldr	r4, [pc, #40]	; (3b0c <dropped_notify+0x44>)
    3ae4:	4e0a      	ldr	r6, [pc, #40]	; (3b10 <dropped_notify+0x48>)
    3ae6:	1b36      	subs	r6, r6, r4
    3ae8:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    3aea:	42b5      	cmp	r5, r6
    3aec:	db00      	blt.n	3af0 <dropped_notify+0x28>
}
    3aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    3af0:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    3af2:	795b      	ldrb	r3, [r3, #5]
    3af4:	b12b      	cbz	r3, 3b02 <dropped_notify+0x3a>
	if (backend->api->dropped != NULL) {
    3af6:	6823      	ldr	r3, [r4, #0]
    3af8:	68db      	ldr	r3, [r3, #12]
    3afa:	b113      	cbz	r3, 3b02 <dropped_notify+0x3a>
		backend->api->dropped(backend, cnt);
    3afc:	4639      	mov	r1, r7
    3afe:	4620      	mov	r0, r4
    3b00:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    3b02:	3501      	adds	r5, #1
    3b04:	3410      	adds	r4, #16
    3b06:	e7f0      	b.n	3aea <dropped_notify+0x22>
    3b08:	2000166c 	.word	0x2000166c
    3b0c:	00024048 	.word	0x00024048
    3b10:	00024058 	.word	0x00024058

00003b14 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    3b14:	4b06      	ldr	r3, [pc, #24]	; (3b30 <log_dropped+0x1c>)
    3b16:	f3bf 8f5b 	dmb	ish
    3b1a:	e853 2f00 	ldrex	r2, [r3]
    3b1e:	3201      	adds	r2, #1
    3b20:	e843 2100 	strex	r1, r2, [r3]
    3b24:	2900      	cmp	r1, #0
    3b26:	d1f8      	bne.n	3b1a <log_dropped+0x6>
    3b28:	f3bf 8f5b 	dmb	ish
}
    3b2c:	4770      	bx	lr
    3b2e:	bf00      	nop
    3b30:	2000166c 	.word	0x2000166c

00003b34 <log_source_name_get>:
    3b34:	4a04      	ldr	r2, [pc, #16]	; (3b48 <log_source_name_get+0x14>)
    3b36:	4b05      	ldr	r3, [pc, #20]	; (3b4c <log_source_name_get+0x18>)
    3b38:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    3b3a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    3b3e:	bf34      	ite	cc
    3b40:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    3b44:	2000      	movcs	r0, #0
}
    3b46:	4770      	bx	lr
    3b48:	00023ed8 	.word	0x00023ed8
    3b4c:	00024048 	.word	0x00024048

00003b50 <log_backend_enable>:
	id += backend - log_backend_get(0);
    3b50:	4b09      	ldr	r3, [pc, #36]	; (3b78 <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
    3b52:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
    3b54:	1ac3      	subs	r3, r0, r3
    3b56:	111b      	asrs	r3, r3, #4
    3b58:	3301      	adds	r3, #1
{
    3b5a:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
    3b5c:	7113      	strb	r3, [r2, #4]
	log_backend_activate(backend, ctx);
    3b5e:	6843      	ldr	r3, [r0, #4]
	if (!backend_attached) {
    3b60:	4c06      	ldr	r4, [pc, #24]	; (3b7c <log_backend_enable+0x2c>)
	backend->cb->ctx = ctx;
    3b62:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    3b64:	2201      	movs	r2, #1
    3b66:	715a      	strb	r2, [r3, #5]
    3b68:	7822      	ldrb	r2, [r4, #0]
    3b6a:	b912      	cbnz	r2, 3b72 <log_backend_enable+0x22>
    3b6c:	4804      	ldr	r0, [pc, #16]	; (3b80 <log_backend_enable+0x30>)
    3b6e:	f01a f81d 	bl	1dbac <z_impl_k_sem_give>
	backend_attached = true;
    3b72:	2301      	movs	r3, #1
    3b74:	7023      	strb	r3, [r4, #0]
}
    3b76:	bd10      	pop	{r4, pc}
    3b78:	00024048 	.word	0x00024048
    3b7c:	20002e7e 	.word	0x20002e7e
    3b80:	20000918 	.word	0x20000918

00003b84 <log_init>:
{
    3b84:	b570      	push	{r4, r5, r6, lr}
    3b86:	4b11      	ldr	r3, [pc, #68]	; (3bcc <log_init+0x48>)
    3b88:	f3bf 8f5b 	dmb	ish
    3b8c:	e853 5f00 	ldrex	r5, [r3]
    3b90:	1c6a      	adds	r2, r5, #1
    3b92:	e843 2100 	strex	r1, r2, [r3]
    3b96:	2900      	cmp	r1, #0
    3b98:	d1f8      	bne.n	3b8c <log_init+0x8>
    3b9a:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    3b9e:	b92d      	cbnz	r5, 3bac <log_init+0x28>
	return __log_backends_end - __log_backends_start;
    3ba0:	4c0b      	ldr	r4, [pc, #44]	; (3bd0 <log_init+0x4c>)
    3ba2:	4e0c      	ldr	r6, [pc, #48]	; (3bd4 <log_init+0x50>)
    3ba4:	1b36      	subs	r6, r6, r4
    3ba6:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    3ba8:	42b5      	cmp	r5, r6
    3baa:	db00      	blt.n	3bae <log_init+0x2a>
}
    3bac:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    3bae:	7b23      	ldrb	r3, [r4, #12]
    3bb0:	b14b      	cbz	r3, 3bc6 <log_init+0x42>
			if (backend->api->init != NULL) {
    3bb2:	6823      	ldr	r3, [r4, #0]
    3bb4:	695b      	ldr	r3, [r3, #20]
    3bb6:	b10b      	cbz	r3, 3bbc <log_init+0x38>
				backend->api->init(backend);
    3bb8:	4620      	mov	r0, r4
    3bba:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    3bbc:	2204      	movs	r2, #4
    3bbe:	2100      	movs	r1, #0
    3bc0:	4620      	mov	r0, r4
    3bc2:	f7ff ffc5 	bl	3b50 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    3bc6:	3501      	adds	r5, #1
    3bc8:	3410      	adds	r4, #16
    3bca:	e7ed      	b.n	3ba8 <log_init+0x24>
    3bcc:	20001670 	.word	0x20001670
    3bd0:	00024048 	.word	0x00024048
    3bd4:	00024058 	.word	0x00024058

00003bd8 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    3bd8:	4b17      	ldr	r3, [pc, #92]	; (3c38 <log_strdup+0x60>)
    3bda:	4298      	cmp	r0, r3
{
    3bdc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    3bde:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    3be0:	d302      	bcc.n	3be8 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    3be2:	4b16      	ldr	r3, [pc, #88]	; (3c3c <log_strdup+0x64>)
    3be4:	4298      	cmp	r0, r3
    3be6:	d321      	bcc.n	3c2c <log_strdup+0x54>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    3be8:	4815      	ldr	r0, [pc, #84]	; (3c40 <log_strdup+0x68>)
    3bea:	2200      	movs	r2, #0
    3bec:	2300      	movs	r3, #0
    3bee:	a901      	add	r1, sp, #4
    3bf0:	f019 fb0c 	bl	1d20c <k_mem_slab_alloc>
	if (err != 0) {
    3bf4:	4605      	mov	r5, r0
    3bf6:	b9e0      	cbnz	r0, 3c32 <log_strdup+0x5a>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3bf8:	2201      	movs	r2, #1
    3bfa:	9b01      	ldr	r3, [sp, #4]
    3bfc:	f3bf 8f5b 	dmb	ish
    3c00:	e853 1f00 	ldrex	r1, [r3]
    3c04:	e843 2000 	strex	r0, r2, [r3]
    3c08:	2800      	cmp	r0, #0
    3c0a:	d1f9      	bne.n	3c00 <log_strdup+0x28>
    3c0c:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    3c10:	9e01      	ldr	r6, [sp, #4]
    3c12:	1d33      	adds	r3, r6, #4
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    3c14:	2241      	movs	r2, #65	; 0x41
    3c16:	4618      	mov	r0, r3
    3c18:	4621      	mov	r1, r4
    3c1a:	f020 f80e 	bl	23c3a <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    3c1e:	227e      	movs	r2, #126	; 0x7e
    3c20:	4603      	mov	r3, r0
    3c22:	f886 2045 	strb.w	r2, [r6, #69]	; 0x45
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    3c26:	f886 5046 	strb.w	r5, [r6, #70]	; 0x46
	return dup->buf;
    3c2a:	461c      	mov	r4, r3
}
    3c2c:	4620      	mov	r0, r4
    3c2e:	b002      	add	sp, #8
    3c30:	bd70      	pop	{r4, r5, r6, pc}
		return (char *)log_strdup_fail_msg;
    3c32:	4b04      	ldr	r3, [pc, #16]	; (3c44 <log_strdup+0x6c>)
    3c34:	e7f9      	b.n	3c2a <log_strdup+0x52>
    3c36:	bf00      	nop
    3c38:	00023c84 	.word	0x00023c84
    3c3c:	00027d10 	.word	0x00027d10
    3c40:	2000167c 	.word	0x2000167c
    3c44:	00025a9b 	.word	0x00025a9b

00003c48 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
    3c48:	b150      	cbz	r0, 3c60 <log_is_strdup+0x18>
    3c4a:	4b06      	ldr	r3, [pc, #24]	; (3c64 <log_is_strdup+0x1c>)
    3c4c:	4298      	cmp	r0, r3
    3c4e:	d306      	bcc.n	3c5e <log_is_strdup+0x16>
    3c50:	f503 7310 	add.w	r3, r3, #576	; 0x240
    3c54:	4298      	cmp	r0, r3
    3c56:	bf2c      	ite	cs
    3c58:	2000      	movcs	r0, #0
    3c5a:	2001      	movcc	r0, #1
    3c5c:	4770      	bx	lr
    3c5e:	2000      	movs	r0, #0
}
    3c60:	4770      	bx	lr
    3c62:	bf00      	nop
    3c64:	2000e0d0 	.word	0x2000e0d0

00003c68 <z_impl_log_process>:
{
    3c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
    3c6c:	4b4c      	ldr	r3, [pc, #304]	; (3da0 <z_impl_log_process+0x138>)
    3c6e:	781b      	ldrb	r3, [r3, #0]
{
    3c70:	b085      	sub	sp, #20
    3c72:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    3c74:	b903      	cbnz	r3, 3c78 <z_impl_log_process+0x10>
    3c76:	b360      	cbz	r0, 3cd2 <z_impl_log_process+0x6a>
    3c78:	f04f 0320 	mov.w	r3, #32
    3c7c:	f3ef 8611 	mrs	r6, BASEPRI
    3c80:	f383 8811 	msr	BASEPRI, r3
    3c84:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
    3c88:	4846      	ldr	r0, [pc, #280]	; (3da4 <z_impl_log_process+0x13c>)
    3c8a:	f01b fa0e 	bl	1f0aa <log_list_head_get>
    3c8e:	4605      	mov	r5, r0
	__asm__ volatile(
    3c90:	f386 8811 	msr	BASEPRI, r6
    3c94:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    3c98:	b178      	cbz	r0, 3cba <z_impl_log_process+0x52>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    3c9a:	f3bf 8f5b 	dmb	ish
    3c9e:	4b42      	ldr	r3, [pc, #264]	; (3da8 <z_impl_log_process+0x140>)
    3ca0:	e853 2f00 	ldrex	r2, [r3]
    3ca4:	3a01      	subs	r2, #1
    3ca6:	e843 2100 	strex	r1, r2, [r3]
    3caa:	2900      	cmp	r1, #0
    3cac:	d1f8      	bne.n	3ca0 <z_impl_log_process+0x38>
    3cae:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
    3cb2:	b194      	cbz	r4, 3cda <z_impl_log_process+0x72>
	log_msg_put(msg);
    3cb4:	4628      	mov	r0, r5
    3cb6:	f01b fb09 	bl	1f2cc <log_msg_put>
	if (!bypass && dropped_cnt) {
    3cba:	b924      	cbnz	r4, 3cc6 <z_impl_log_process+0x5e>
    3cbc:	4b3b      	ldr	r3, [pc, #236]	; (3dac <z_impl_log_process+0x144>)
    3cbe:	681b      	ldr	r3, [r3, #0]
    3cc0:	b10b      	cbz	r3, 3cc6 <z_impl_log_process+0x5e>
		dropped_notify();
    3cc2:	f7ff ff01 	bl	3ac8 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    3cc6:	4837      	ldr	r0, [pc, #220]	; (3da4 <z_impl_log_process+0x13c>)
    3cc8:	f01b f9ed 	bl	1f0a6 <log_list_head_peek>
    3ccc:	1e04      	subs	r4, r0, #0
    3cce:	bf18      	it	ne
    3cd0:	2401      	movne	r4, #1
}
    3cd2:	4620      	mov	r0, r4
    3cd4:	b005      	add	sp, #20
    3cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    3cda:	4b35      	ldr	r3, [pc, #212]	; (3db0 <z_impl_log_process+0x148>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
    3cdc:	781b      	ldrb	r3, [r3, #0]
    3cde:	b9cb      	cbnz	r3, 3d14 <z_impl_log_process+0xac>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    3ce0:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
    3ce2:	07db      	lsls	r3, r3, #31
    3ce4:	d416      	bmi.n	3d14 <z_impl_log_process+0xac>
	msg_str = log_msg_str_get(msg);
    3ce6:	f01b fb04 	bl	1f2f2 <log_msg_str_get>
    3cea:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    3cec:	4628      	mov	r0, r5
    3cee:	f01b facb 	bl	1f288 <log_msg_nargs_get>
    3cf2:	4601      	mov	r1, r0
    3cf4:	4640      	mov	r0, r8
    3cf6:	f7ff fea3 	bl	3a40 <z_log_get_s_mask>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    3cfa:	4f2e      	ldr	r7, [pc, #184]	; (3db4 <z_impl_log_process+0x14c>)
    3cfc:	4b2e      	ldr	r3, [pc, #184]	; (3db8 <z_impl_log_process+0x150>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    3cfe:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 3dd4 <z_impl_log_process+0x16c>
    3d02:	1bdb      	subs	r3, r3, r7
    3d04:	08db      	lsrs	r3, r3, #3
    3d06:	9303      	str	r3, [sp, #12]
    3d08:	4b2c      	ldr	r3, [pc, #176]	; (3dbc <z_impl_log_process+0x154>)
    3d0a:	1bdb      	subs	r3, r3, r7
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    3d0c:	4606      	mov	r6, r0
    3d0e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
    3d12:	b936      	cbnz	r6, 3d22 <z_impl_log_process+0xba>
    3d14:	4e2a      	ldr	r6, [pc, #168]	; (3dc0 <z_impl_log_process+0x158>)
    3d16:	4f2b      	ldr	r7, [pc, #172]	; (3dc4 <z_impl_log_process+0x15c>)
    3d18:	1bbf      	subs	r7, r7, r6
    3d1a:	113f      	asrs	r7, r7, #4
    3d1c:	f04f 0800 	mov.w	r8, #0
    3d20:	e03a      	b.n	3d98 <z_impl_log_process+0x130>
		idx = 31 - __builtin_clz(mask);
    3d22:	fab6 f186 	clz	r1, r6
    3d26:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    3d2a:	4649      	mov	r1, r9
    3d2c:	4628      	mov	r0, r5
    3d2e:	f01b faae 	bl	1f28e <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    3d32:	4b25      	ldr	r3, [pc, #148]	; (3dc8 <z_impl_log_process+0x160>)
    3d34:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
    3d36:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    3d38:	d302      	bcc.n	3d40 <z_impl_log_process+0xd8>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    3d3a:	4b24      	ldr	r3, [pc, #144]	; (3dcc <z_impl_log_process+0x164>)
    3d3c:	4298      	cmp	r0, r3
    3d3e:	d31a      	bcc.n	3d76 <z_impl_log_process+0x10e>
    3d40:	4608      	mov	r0, r1
    3d42:	f7ff ff81 	bl	3c48 <log_is_strdup>
    3d46:	4602      	mov	r2, r0
    3d48:	b9a8      	cbnz	r0, 3d76 <z_impl_log_process+0x10e>
    3d4a:	4b21      	ldr	r3, [pc, #132]	; (3dd0 <z_impl_log_process+0x168>)
    3d4c:	4299      	cmp	r1, r3
    3d4e:	d012      	beq.n	3d76 <z_impl_log_process+0x10e>
	return msg->hdr.ids.source_id;
    3d50:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    3d52:	9803      	ldr	r0, [sp, #12]
    3d54:	0999      	lsrs	r1, r3, #6
    3d56:	ebb0 1f93 	cmp.w	r0, r3, lsr #6
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    3d5a:	ea4f 138a 	mov.w	r3, sl, lsl #6
    3d5e:	f043 0301 	orr.w	r3, r3, #1
	return __log_const_start[source_id].name;
    3d62:	bf88      	it	hi
    3d64:	f857 2031 	ldrhi.w	r2, [r7, r1, lsl #3]
    3d68:	f8ad 3000 	strh.w	r3, [sp]
    3d6c:	4649      	mov	r1, r9
    3d6e:	4643      	mov	r3, r8
    3d70:	4658      	mov	r0, fp
    3d72:	f01b f9e7 	bl	1f144 <log_3>
		mask &= ~BIT(idx);
    3d76:	2101      	movs	r1, #1
    3d78:	fa01 f109 	lsl.w	r1, r1, r9
    3d7c:	ea26 0601 	bic.w	r6, r6, r1
    3d80:	e7c7      	b.n	3d12 <z_impl_log_process+0xaa>
	return backend->cb->active;
    3d82:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
    3d84:	795b      	ldrb	r3, [r3, #5]
    3d86:	b123      	cbz	r3, 3d92 <z_impl_log_process+0x12a>
	backend->api->put(backend, msg);
    3d88:	6833      	ldr	r3, [r6, #0]
    3d8a:	4629      	mov	r1, r5
    3d8c:	681b      	ldr	r3, [r3, #0]
    3d8e:	4630      	mov	r0, r6
    3d90:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    3d92:	f108 0801 	add.w	r8, r8, #1
    3d96:	3610      	adds	r6, #16
    3d98:	45b8      	cmp	r8, r7
    3d9a:	dbf2      	blt.n	3d82 <z_impl_log_process+0x11a>
    3d9c:	e78a      	b.n	3cb4 <z_impl_log_process+0x4c>
    3d9e:	bf00      	nop
    3da0:	20002e7e 	.word	0x20002e7e
    3da4:	20001674 	.word	0x20001674
    3da8:	20001668 	.word	0x20001668
    3dac:	2000166c 	.word	0x2000166c
    3db0:	20002e7f 	.word	0x20002e7f
    3db4:	00023ed8 	.word	0x00023ed8
    3db8:	00024048 	.word	0x00024048
    3dbc:	00023ff0 	.word	0x00023ff0
    3dc0:	00024048 	.word	0x00024048
    3dc4:	00024058 	.word	0x00024058
    3dc8:	00023c84 	.word	0x00023c84
    3dcc:	00027d10 	.word	0x00027d10
    3dd0:	00025a9b 	.word	0x00025a9b
    3dd4:	00025ab5 	.word	0x00025ab5

00003dd8 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    3dd8:	4b29      	ldr	r3, [pc, #164]	; (3e80 <msg_finalize+0xa8>)
{
    3dda:	b537      	push	{r0, r1, r2, r4, r5, lr}
	msg->hdr.timestamp = timestamp_func();
    3ddc:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    3dde:	8141      	strh	r1, [r0, #10]
{
    3de0:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    3de2:	4798      	blx	r3
    3de4:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    3de6:	f04f 0320 	mov.w	r3, #32
    3dea:	f3ef 8511 	mrs	r5, BASEPRI
    3dee:	f383 8811 	msr	BASEPRI, r3
    3df2:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    3df6:	4823      	ldr	r0, [pc, #140]	; (3e84 <msg_finalize+0xac>)
    3df8:	4621      	mov	r1, r4
    3dfa:	f01b f94a 	bl	1f092 <log_list_add_tail>
	__asm__ volatile(
    3dfe:	f385 8811 	msr	BASEPRI, r5
    3e02:	f3bf 8f6f 	isb	sy
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    3e06:	f3bf 8f5b 	dmb	ish
    3e0a:	4b1f      	ldr	r3, [pc, #124]	; (3e88 <msg_finalize+0xb0>)
    3e0c:	e853 2f00 	ldrex	r2, [r3]
    3e10:	3201      	adds	r2, #1
    3e12:	e843 2100 	strex	r1, r2, [r3]
    3e16:	2900      	cmp	r1, #0
    3e18:	d1f8      	bne.n	3e0c <msg_finalize+0x34>
    3e1a:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    3e1e:	4a1b      	ldr	r2, [pc, #108]	; (3e8c <msg_finalize+0xb4>)
    3e20:	7812      	ldrb	r2, [r2, #0]
    3e22:	b182      	cbz	r2, 3e46 <msg_finalize+0x6e>
	__asm__ volatile(
    3e24:	f04f 0320 	mov.w	r3, #32
    3e28:	f3ef 8411 	mrs	r4, BASEPRI
    3e2c:	f383 8811 	msr	BASEPRI, r3
    3e30:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    3e34:	2000      	movs	r0, #0
    3e36:	f7ff ff17 	bl	3c68 <z_impl_log_process>
	__asm__ volatile(
    3e3a:	f384 8811 	msr	BASEPRI, r4
    3e3e:	f3bf 8f6f 	isb	sy
}
    3e42:	b003      	add	sp, #12
    3e44:	bd30      	pop	{r4, r5, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    3e46:	4a12      	ldr	r2, [pc, #72]	; (3e90 <msg_finalize+0xb8>)
    3e48:	681b      	ldr	r3, [r3, #0]
    3e4a:	6812      	ldr	r2, [r2, #0]
    3e4c:	2a00      	cmp	r2, #0
    3e4e:	d0f8      	beq.n	3e42 <msg_finalize+0x6a>
    3e50:	2b01      	cmp	r3, #1
    3e52:	d10a      	bne.n	3e6a <msg_finalize+0x92>
	z_impl_k_timer_start(timer, duration, period);
    3e54:	2200      	movs	r2, #0
    3e56:	2300      	movs	r3, #0
    3e58:	e9cd 2300 	strd	r2, r3, [sp]
    3e5c:	480d      	ldr	r0, [pc, #52]	; (3e94 <msg_finalize+0xbc>)
    3e5e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    3e62:	2300      	movs	r3, #0
    3e64:	f01a fafa 	bl	1e45c <z_impl_k_timer_start>
    3e68:	e7eb      	b.n	3e42 <msg_finalize+0x6a>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    3e6a:	2b0a      	cmp	r3, #10
    3e6c:	d1e9      	bne.n	3e42 <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
    3e6e:	4809      	ldr	r0, [pc, #36]	; (3e94 <msg_finalize+0xbc>)
    3e70:	f01f fd54 	bl	2391c <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    3e74:	4808      	ldr	r0, [pc, #32]	; (3e98 <msg_finalize+0xc0>)
}
    3e76:	b003      	add	sp, #12
    3e78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    3e7c:	f019 be96 	b.w	1dbac <z_impl_k_sem_give>
    3e80:	2000017c 	.word	0x2000017c
    3e84:	20001674 	.word	0x20001674
    3e88:	20001668 	.word	0x20001668
    3e8c:	20002e7f 	.word	0x20002e7f
    3e90:	20001698 	.word	0x20001698
    3e94:	20000a80 	.word	0x20000a80
    3e98:	20000918 	.word	0x20000918

00003e9c <log_process_thread_func>:
{
    3e9c:	b510      	push	{r4, lr}
	log_init();
    3e9e:	f7ff fe71 	bl	3b84 <log_init>
	return z_impl_k_current_get();
    3ea2:	f019 fe09 	bl	1dab8 <z_impl_k_current_get>
	proc_tid = process_tid;
    3ea6:	4b0c      	ldr	r3, [pc, #48]	; (3ed8 <log_process_thread_func+0x3c>)
    3ea8:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    3eaa:	b130      	cbz	r0, 3eba <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    3eac:	4b0b      	ldr	r3, [pc, #44]	; (3edc <log_process_thread_func+0x40>)
	    process_tid &&
    3eae:	681b      	ldr	r3, [r3, #0]
    3eb0:	2b09      	cmp	r3, #9
    3eb2:	dd02      	ble.n	3eba <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    3eb4:	480a      	ldr	r0, [pc, #40]	; (3ee0 <log_process_thread_func+0x44>)
    3eb6:	f019 fe79 	bl	1dbac <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    3eba:	4c09      	ldr	r4, [pc, #36]	; (3ee0 <log_process_thread_func+0x44>)
    3ebc:	2000      	movs	r0, #0
    3ebe:	f7ff fed3 	bl	3c68 <z_impl_log_process>
		if (log_process(false) == false) {
    3ec2:	2800      	cmp	r0, #0
    3ec4:	d1fa      	bne.n	3ebc <log_process_thread_func+0x20>
    3ec6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3eca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3ece:	4620      	mov	r0, r4
    3ed0:	f019 fe92 	bl	1dbf8 <z_impl_k_sem_take>
    3ed4:	e7f2      	b.n	3ebc <log_process_thread_func+0x20>
    3ed6:	bf00      	nop
    3ed8:	20001698 	.word	0x20001698
    3edc:	20001668 	.word	0x20001668
    3ee0:	20000918 	.word	0x20000918

00003ee4 <z_impl_log_panic>:
{
    3ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    3ee6:	4f0e      	ldr	r7, [pc, #56]	; (3f20 <z_impl_log_panic+0x3c>)
    3ee8:	783d      	ldrb	r5, [r7, #0]
    3eea:	b975      	cbnz	r5, 3f0a <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    3eec:	4c0d      	ldr	r4, [pc, #52]	; (3f24 <z_impl_log_panic+0x40>)
    3eee:	4e0e      	ldr	r6, [pc, #56]	; (3f28 <z_impl_log_panic+0x44>)
	log_init();
    3ef0:	f7ff fe48 	bl	3b84 <log_init>
    3ef4:	1b36      	subs	r6, r6, r4
    3ef6:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    3ef8:	42b5      	cmp	r5, r6
    3efa:	db07      	blt.n	3f0c <z_impl_log_panic+0x28>
    3efc:	2000      	movs	r0, #0
    3efe:	f7ff feb3 	bl	3c68 <z_impl_log_process>
		while (log_process(false) == true) {
    3f02:	2800      	cmp	r0, #0
    3f04:	d1fa      	bne.n	3efc <z_impl_log_panic+0x18>
	panic_mode = true;
    3f06:	2301      	movs	r3, #1
    3f08:	703b      	strb	r3, [r7, #0]
}
    3f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    3f0c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    3f0e:	795b      	ldrb	r3, [r3, #5]
    3f10:	b11b      	cbz	r3, 3f1a <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    3f12:	6823      	ldr	r3, [r4, #0]
    3f14:	4620      	mov	r0, r4
    3f16:	691b      	ldr	r3, [r3, #16]
    3f18:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    3f1a:	3501      	adds	r5, #1
    3f1c:	3410      	adds	r4, #16
    3f1e:	e7eb      	b.n	3ef8 <z_impl_log_panic+0x14>
    3f20:	20002e7f 	.word	0x20002e7f
    3f24:	00024048 	.word	0x00024048
    3f28:	00024058 	.word	0x00024058

00003f2c <log_free>:
{
    3f2c:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    3f2e:	3804      	subs	r0, #4
    3f30:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    3f32:	f3bf 8f5b 	dmb	ish
    3f36:	e850 3f00 	ldrex	r3, [r0]
    3f3a:	1e5a      	subs	r2, r3, #1
    3f3c:	e840 2100 	strex	r1, r2, [r0]
    3f40:	2900      	cmp	r1, #0
    3f42:	d1f8      	bne.n	3f36 <log_free+0xa>
    3f44:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    3f48:	2b01      	cmp	r3, #1
    3f4a:	d103      	bne.n	3f54 <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    3f4c:	4803      	ldr	r0, [pc, #12]	; (3f5c <log_free+0x30>)
    3f4e:	a901      	add	r1, sp, #4
    3f50:	f019 f98e 	bl	1d270 <k_mem_slab_free>
}
    3f54:	b003      	add	sp, #12
    3f56:	f85d fb04 	ldr.w	pc, [sp], #4
    3f5a:	bf00      	nop
    3f5c:	2000167c 	.word	0x2000167c

00003f60 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    3f60:	2320      	movs	r3, #32
    3f62:	4902      	ldr	r1, [pc, #8]	; (3f6c <log_msg_pool_init+0xc>)
    3f64:	4802      	ldr	r0, [pc, #8]	; (3f70 <log_msg_pool_init+0x10>)
    3f66:	461a      	mov	r2, r3
    3f68:	f01f b97b 	b.w	23262 <k_mem_slab_init>
    3f6c:	2000e310 	.word	0x2000e310
    3f70:	2000169c 	.word	0x2000169c

00003f74 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    3f74:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
    3f76:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    3f78:	4d09      	ldr	r5, [pc, #36]	; (3fa0 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    3f7a:	9301      	str	r3, [sp, #4]
    3f7c:	2001      	movs	r0, #1
    3f7e:	f7ff fe73 	bl	3c68 <z_impl_log_process>
    3f82:	4604      	mov	r4, r0
			log_dropped();
    3f84:	f7ff fdc6 	bl	3b14 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    3f88:	2200      	movs	r2, #0
    3f8a:	2300      	movs	r3, #0
    3f8c:	a901      	add	r1, sp, #4
    3f8e:	4628      	mov	r0, r5
    3f90:	f019 f93c 	bl	1d20c <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    3f94:	b108      	cbz	r0, 3f9a <log_msg_no_space_handle+0x26>
    3f96:	2c00      	cmp	r4, #0
    3f98:	d1f0      	bne.n	3f7c <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
    3f9a:	9801      	ldr	r0, [sp, #4]
    3f9c:	b003      	add	sp, #12
    3f9e:	bd30      	pop	{r4, r5, pc}
    3fa0:	2000169c 	.word	0x2000169c

00003fa4 <log_msg_chunk_alloc>:
{
    3fa4:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    3fa6:	2300      	movs	r3, #0
    3fa8:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    3faa:	4807      	ldr	r0, [pc, #28]	; (3fc8 <log_msg_chunk_alloc+0x24>)
    3fac:	2200      	movs	r2, #0
    3fae:	2300      	movs	r3, #0
    3fb0:	a901      	add	r1, sp, #4
    3fb2:	f019 f92b 	bl	1d20c <k_mem_slab_alloc>
	if (err != 0) {
    3fb6:	b110      	cbz	r0, 3fbe <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
    3fb8:	f7ff ffdc 	bl	3f74 <log_msg_no_space_handle>
    3fbc:	9001      	str	r0, [sp, #4]
}
    3fbe:	9801      	ldr	r0, [sp, #4]
    3fc0:	b003      	add	sp, #12
    3fc2:	f85d fb04 	ldr.w	pc, [sp], #4
    3fc6:	bf00      	nop
    3fc8:	2000169c 	.word	0x2000169c

00003fcc <msg_free>:
{
    3fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    3fce:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
    3fd0:	7a45      	ldrb	r5, [r0, #9]
{
    3fd2:	b085      	sub	sp, #20
	return msg->hdr.params.std.nargs;
    3fd4:	092d      	lsrs	r5, r5, #4
{
    3fd6:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
    3fd8:	07d8      	lsls	r0, r3, #31
    3fda:	d41c      	bmi.n	4016 <msg_free+0x4a>
    3fdc:	b1dd      	cbz	r5, 4016 <msg_free+0x4a>
		uint32_t smask = 0U;
    3fde:	2400      	movs	r4, #0
		for (i = 0U; i < nargs; i++) {
    3fe0:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
    3fe2:	9801      	ldr	r0, [sp, #4]
    3fe4:	4631      	mov	r1, r6
    3fe6:	f01b f952 	bl	1f28e <log_msg_arg_get>
    3fea:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    3fec:	f7ff fe2c 	bl	3c48 <log_is_strdup>
    3ff0:	b170      	cbz	r0, 4010 <msg_free+0x44>
				if (smask == 0U) {
    3ff2:	b934      	cbnz	r4, 4002 <msg_free+0x36>
					smask = z_log_get_s_mask(
    3ff4:	9b01      	ldr	r3, [sp, #4]
    3ff6:	4629      	mov	r1, r5
    3ff8:	6918      	ldr	r0, [r3, #16]
    3ffa:	f7ff fd21 	bl	3a40 <z_log_get_s_mask>
					if (smask == 0U) {
    3ffe:	4604      	mov	r4, r0
    4000:	b148      	cbz	r0, 4016 <msg_free+0x4a>
				if (smask & BIT(i)) {
    4002:	fa24 f306 	lsr.w	r3, r4, r6
    4006:	07d9      	lsls	r1, r3, #31
    4008:	d502      	bpl.n	4010 <msg_free+0x44>
					log_free(buf);
    400a:	4638      	mov	r0, r7
    400c:	f7ff ff8e 	bl	3f2c <log_free>
		for (i = 0U; i < nargs; i++) {
    4010:	3601      	adds	r6, #1
    4012:	42ae      	cmp	r6, r5
    4014:	d3e5      	bcc.n	3fe2 <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
    4016:	9b01      	ldr	r3, [sp, #4]
    4018:	7a1a      	ldrb	r2, [r3, #8]
    401a:	0792      	lsls	r2, r2, #30
    401c:	d504      	bpl.n	4028 <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
    401e:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    4020:	4c08      	ldr	r4, [pc, #32]	; (4044 <msg_free+0x78>)
    4022:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    4024:	9b03      	ldr	r3, [sp, #12]
    4026:	b92b      	cbnz	r3, 4034 <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    4028:	4806      	ldr	r0, [pc, #24]	; (4044 <msg_free+0x78>)
    402a:	a901      	add	r1, sp, #4
    402c:	f019 f920 	bl	1d270 <k_mem_slab_free>
}
    4030:	b005      	add	sp, #20
    4032:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
    4034:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    4036:	a903      	add	r1, sp, #12
    4038:	4620      	mov	r0, r4
    403a:	f019 f919 	bl	1d270 <k_mem_slab_free>
		cont = next;
    403e:	9503      	str	r5, [sp, #12]
    4040:	e7f0      	b.n	4024 <msg_free+0x58>
    4042:	bf00      	nop
    4044:	2000169c 	.word	0x2000169c

00004048 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    4048:	b40e      	push	{r1, r2, r3}
    404a:	b503      	push	{r0, r1, lr}
    404c:	ab03      	add	r3, sp, #12
    404e:	4601      	mov	r1, r0
    4050:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    4054:	4804      	ldr	r0, [pc, #16]	; (4068 <print_formatted+0x20>)
	va_start(args, fmt);
    4056:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    4058:	f7ff f926 	bl	32a8 <cbvprintf>
	va_end(args);

	return length;
}
    405c:	b002      	add	sp, #8
    405e:	f85d eb04 	ldr.w	lr, [sp], #4
    4062:	b003      	add	sp, #12
    4064:	4770      	bx	lr
    4066:	bf00      	nop
    4068:	0001f73f 	.word	0x0001f73f

0000406c <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, uint16_t source_id)
{
    406c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4070:	b085      	sub	sp, #20
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    4072:	f011 0402 	ands.w	r4, r1, #2
{
    4076:	4690      	mov	r8, r2
    4078:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    407c:	4606      	mov	r6, r0
    407e:	461a      	mov	r2, r3
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    4080:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    4084:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    4088:	d007      	beq.n	409a <prefix_print+0x2e>
	if (!format) {
    408a:	f011 0f44 	tst.w	r1, #68	; 0x44
    408e:	d137      	bne.n	4100 <prefix_print+0x94>
		length = print_formatted(output, "[%08lu] ", timestamp);
    4090:	4932      	ldr	r1, [pc, #200]	; (415c <prefix_print+0xf0>)
    4092:	f7ff ffd9 	bl	4048 <print_formatted>
			length = print_formatted(output,
    4096:	4601      	mov	r1, r0
		length += timestamp_print(output, flags, timestamp);
    4098:	460c      	mov	r4, r1
	if (color) {
    409a:	f1b9 0f00 	cmp.w	r9, #0
    409e:	d00a      	beq.n	40b6 <prefix_print+0x4a>
		const char *log_color = start && (colors[level] != NULL) ?
    40a0:	4b2f      	ldr	r3, [pc, #188]	; (4160 <prefix_print+0xf4>)
		print_formatted(output, "%s", log_color);
    40a2:	4930      	ldr	r1, [pc, #192]	; (4164 <prefix_print+0xf8>)
		const char *log_color = start && (colors[level] != NULL) ?
    40a4:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(output, "%s", log_color);
    40a8:	4b2f      	ldr	r3, [pc, #188]	; (4168 <prefix_print+0xfc>)
    40aa:	4630      	mov	r0, r6
    40ac:	2a00      	cmp	r2, #0
    40ae:	bf08      	it	eq
    40b0:	461a      	moveq	r2, r3
    40b2:	f7ff ffc9 	bl	4048 <print_formatted>
	if (level_on) {
    40b6:	b13d      	cbz	r5, 40c8 <prefix_print+0x5c>
		total += print_formatted(output, "<%s> ", severity[level]);
    40b8:	4b2c      	ldr	r3, [pc, #176]	; (416c <prefix_print+0x100>)
    40ba:	492d      	ldr	r1, [pc, #180]	; (4170 <prefix_print+0x104>)
    40bc:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    40c0:	4630      	mov	r0, r6
    40c2:	f7ff ffc1 	bl	4048 <print_formatted>
    40c6:	4605      	mov	r5, r0
	total += print_formatted(output,
    40c8:	f1b8 0f00 	cmp.w	r8, #0
    40cc:	d043      	beq.n	4156 <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    40ce:	2301      	movs	r3, #1
    40d0:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(output,
    40d4:	4b27      	ldr	r3, [pc, #156]	; (4174 <prefix_print+0x108>)
    40d6:	f017 0f10 	tst.w	r7, #16
    40da:	4f27      	ldr	r7, [pc, #156]	; (4178 <prefix_print+0x10c>)
    40dc:	bf18      	it	ne
    40de:	461f      	movne	r7, r3
    40e0:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    40e4:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    40e8:	f7ff fd24 	bl	3b34 <log_source_name_get>
    40ec:	4639      	mov	r1, r7
    40ee:	4602      	mov	r2, r0
    40f0:	4630      	mov	r0, r6
    40f2:	f7ff ffa9 	bl	4048 <print_formatted>
    40f6:	4428      	add	r0, r5

	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);

	return length;
}
    40f8:	4420      	add	r0, r4
    40fa:	b005      	add	sp, #20
    40fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    4100:	4b1e      	ldr	r3, [pc, #120]	; (417c <prefix_print+0x110>)
    4102:	6819      	ldr	r1, [r3, #0]
    4104:	2900      	cmp	r1, #0
    4106:	d0c7      	beq.n	4098 <prefix_print+0x2c>
		timestamp /= timestamp_div;
    4108:	4b1d      	ldr	r3, [pc, #116]	; (4180 <prefix_print+0x114>)
    410a:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    410e:	681b      	ldr	r3, [r3, #0]
    4110:	fbb2 f3f3 	udiv	r3, r2, r3
		ms = (remainder * 1000U) / freq;
    4114:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		total_seconds = timestamp / freq;
    4118:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    411c:	fbb4 f2fe 	udiv	r2, r4, lr
    4120:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
    4124:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    4128:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    412c:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    4130:	fbb4 fbf1 	udiv	fp, r4, r1
    4134:	fb01 441b 	mls	r4, r1, fp, r4
    4138:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    413c:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    4140:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(output,
    4144:	e9cd b101 	strd	fp, r1, [sp, #4]
    4148:	fb0a e113 	mls	r1, sl, r3, lr
    414c:	9100      	str	r1, [sp, #0]
    414e:	490d      	ldr	r1, [pc, #52]	; (4184 <prefix_print+0x118>)
    4150:	f7ff ff7a 	bl	4048 <print_formatted>
    4154:	e79f      	b.n	4096 <prefix_print+0x2a>
	total += print_formatted(output,
    4156:	4f08      	ldr	r7, [pc, #32]	; (4178 <prefix_print+0x10c>)
    4158:	e7c2      	b.n	40e0 <prefix_print+0x74>
    415a:	bf00      	nop
    415c:	00025b06 	.word	0x00025b06
    4160:	000241a0 	.word	0x000241a0
    4164:	00026a2e 	.word	0x00026a2e
    4168:	00025af8 	.word	0x00025af8
    416c:	000241b4 	.word	0x000241b4
    4170:	00025b2b 	.word	0x00025b2b
    4174:	00025b02 	.word	0x00025b02
    4178:	00025afd 	.word	0x00025afd
    417c:	200016b8 	.word	0x200016b8
    4180:	200016bc 	.word	0x200016bc
    4184:	00025b0f 	.word	0x00025b0f

00004188 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
    4188:	b538      	push	{r3, r4, r5, lr}
    418a:	460c      	mov	r4, r1
	if (color) {
    418c:	07e1      	lsls	r1, r4, #31
{
    418e:	4605      	mov	r5, r0
	if (color) {
    4190:	d503      	bpl.n	419a <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
    4192:	4a08      	ldr	r2, [pc, #32]	; (41b4 <postfix_print+0x2c>)
    4194:	4908      	ldr	r1, [pc, #32]	; (41b8 <postfix_print+0x30>)
    4196:	f7ff ff57 	bl	4048 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    419a:	06e2      	lsls	r2, r4, #27
    419c:	d408      	bmi.n	41b0 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    419e:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    41a0:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    41a2:	bf4c      	ite	mi
    41a4:	4905      	ldrmi	r1, [pc, #20]	; (41bc <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    41a6:	4906      	ldrpl	r1, [pc, #24]	; (41c0 <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
    41a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    41ac:	f7ff bf4c 	b.w	4048 <print_formatted>
}
    41b0:	bd38      	pop	{r3, r4, r5, pc}
    41b2:	bf00      	nop
    41b4:	00025af8 	.word	0x00025af8
    41b8:	00026a2e 	.word	0x00026a2e
    41bc:	00025b32 	.word	0x00025b32
    41c0:	00025b31 	.word	0x00025b31

000041c4 <hexdump_line_print>:
{
    41c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    41c8:	461d      	mov	r5, r3
    41ca:	9b08      	ldr	r3, [sp, #32]
    41cc:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    41ce:	06da      	lsls	r2, r3, #27
{
    41d0:	4604      	mov	r4, r0
    41d2:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    41d4:	d405      	bmi.n	41e2 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    41d6:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    41d8:	bf4c      	ite	mi
    41da:	492b      	ldrmi	r1, [pc, #172]	; (4288 <hexdump_line_print+0xc4>)
		print_formatted(ctx, "\r\n");
    41dc:	492b      	ldrpl	r1, [pc, #172]	; (428c <hexdump_line_print+0xc8>)
    41de:	f7ff ff33 	bl	4048 <print_formatted>
		print_formatted(output, " ");
    41e2:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 4294 <hexdump_line_print+0xd0>
{
    41e6:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    41ea:	45a8      	cmp	r8, r5
    41ec:	db2d      	blt.n	424a <hexdump_line_print+0x86>
			print_formatted(output, "   ");
    41ee:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 4298 <hexdump_line_print+0xd4>
			print_formatted(output, "%02x ", data[i]);
    41f2:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 429c <hexdump_line_print+0xd8>
			print_formatted(output, " ");
    41f6:	f8df a09c 	ldr.w	sl, [pc, #156]	; 4294 <hexdump_line_print+0xd0>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    41fa:	2500      	movs	r5, #0
		if (i < length) {
    41fc:	42bd      	cmp	r5, r7
    41fe:	d232      	bcs.n	4266 <hexdump_line_print+0xa2>
			print_formatted(output, "%02x ", data[i]);
    4200:	5d72      	ldrb	r2, [r6, r5]
    4202:	4649      	mov	r1, r9
    4204:	4620      	mov	r0, r4
    4206:	f7ff ff1f 	bl	4048 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    420a:	3501      	adds	r5, #1
    420c:	2d10      	cmp	r5, #16
    420e:	d123      	bne.n	4258 <hexdump_line_print+0x94>
	print_formatted(output, "|");
    4210:	491f      	ldr	r1, [pc, #124]	; (4290 <hexdump_line_print+0xcc>)
			print_formatted(output, " ");
    4212:	f8df 8080 	ldr.w	r8, [pc, #128]	; 4294 <hexdump_line_print+0xd0>
			      isprint((int)c) ? c : '.');
    4216:	f8df 9088 	ldr.w	r9, [pc, #136]	; 42a0 <hexdump_line_print+0xdc>
			print_formatted(output, "%c",
    421a:	f8df a088 	ldr.w	sl, [pc, #136]	; 42a4 <hexdump_line_print+0xe0>
	print_formatted(output, "|");
    421e:	4620      	mov	r0, r4
    4220:	f7ff ff12 	bl	4048 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    4224:	2500      	movs	r5, #0
		if (i < length) {
    4226:	42af      	cmp	r7, r5
    4228:	d929      	bls.n	427e <hexdump_line_print+0xba>
			char c = (char)data[i];
    422a:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(output, "%c",
    422c:	f812 3009 	ldrb.w	r3, [r2, r9]
    4230:	f013 0f97 	tst.w	r3, #151	; 0x97
    4234:	bf08      	it	eq
    4236:	222e      	moveq	r2, #46	; 0x2e
    4238:	4651      	mov	r1, sl
    423a:	4620      	mov	r0, r4
    423c:	f7ff ff04 	bl	4048 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    4240:	3501      	adds	r5, #1
    4242:	2d10      	cmp	r5, #16
    4244:	d114      	bne.n	4270 <hexdump_line_print+0xac>
}
    4246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
    424a:	4649      	mov	r1, r9
    424c:	4620      	mov	r0, r4
    424e:	f7ff fefb 	bl	4048 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    4252:	f108 0801 	add.w	r8, r8, #1
    4256:	e7c8      	b.n	41ea <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    4258:	076a      	lsls	r2, r5, #29
    425a:	d1cf      	bne.n	41fc <hexdump_line_print+0x38>
			print_formatted(output, " ");
    425c:	4651      	mov	r1, sl
    425e:	4620      	mov	r0, r4
    4260:	f7ff fef2 	bl	4048 <print_formatted>
    4264:	e7ca      	b.n	41fc <hexdump_line_print+0x38>
			print_formatted(output, "   ");
    4266:	4641      	mov	r1, r8
    4268:	4620      	mov	r0, r4
    426a:	f7ff feed 	bl	4048 <print_formatted>
    426e:	e7cc      	b.n	420a <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    4270:	076b      	lsls	r3, r5, #29
    4272:	d1d8      	bne.n	4226 <hexdump_line_print+0x62>
			print_formatted(output, " ");
    4274:	4641      	mov	r1, r8
    4276:	4620      	mov	r0, r4
    4278:	f7ff fee6 	bl	4048 <print_formatted>
    427c:	e7d3      	b.n	4226 <hexdump_line_print+0x62>
			print_formatted(output, " ");
    427e:	4641      	mov	r1, r8
    4280:	4620      	mov	r0, r4
    4282:	f7ff fee1 	bl	4048 <print_formatted>
    4286:	e7db      	b.n	4240 <hexdump_line_print+0x7c>
    4288:	00025b32 	.word	0x00025b32
    428c:	00025b31 	.word	0x00025b31
    4290:	00025b3e 	.word	0x00025b3e
    4294:	00025b3c 	.word	0x00025b3c
    4298:	00025b3a 	.word	0x00025b3a
    429c:	00025b34 	.word	0x00025b34
    42a0:	00027c10 	.word	0x00027c10
    42a4:	00025b40 	.word	0x00025b40

000042a8 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg,
			    uint32_t flags)
{
    42a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    42ac:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(output, flags, std_msg, timestamp,
    42ae:	f013 0807 	ands.w	r8, r3, #7
{
    42b2:	4617      	mov	r7, r2
    42b4:	b08a      	sub	sp, #40	; 0x28
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    42b6:	7a0a      	ldrb	r2, [r1, #8]
    42b8:	4605      	mov	r5, r0
    42ba:	460e      	mov	r6, r1
			0 : prefix_print(output, flags, std_msg, timestamp,
    42bc:	d020      	beq.n	4300 <log_output_msg_process+0x58>
	return msg->hdr.ids.source_id;
    42be:	8949      	ldrh	r1, [r1, #10]
    42c0:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    42c4:	0989      	lsrs	r1, r1, #6
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    42c6:	43d2      	mvns	r2, r2
    42c8:	e9cd 8300 	strd	r8, r3, [sp]
    42cc:	9102      	str	r1, [sp, #8]
    42ce:	68f3      	ldr	r3, [r6, #12]
    42d0:	f002 0201 	and.w	r2, r2, #1
    42d4:	4639      	mov	r1, r7
    42d6:	f7ff fec9 	bl	406c <prefix_print>
    42da:	4681      	mov	r9, r0
    42dc:	7a34      	ldrb	r4, [r6, #8]
    42de:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    42e0:	f014 0401 	ands.w	r4, r4, #1
    42e4:	d00e      	beq.n	4304 <log_output_msg_process+0x5c>
		std_print(msg, output);
    42e6:	4629      	mov	r1, r5
    42e8:	4630      	mov	r0, r6
    42ea:	f01b f8be 	bl	1f46a <std_print>
		raw_string_print(msg, output);
	} else {
		hexdump_print(msg, output, prefix_offset, flags);
	}

	if (!raw_string) {
    42ee:	f1b8 0f00 	cmp.w	r8, #0
    42f2:	d02b      	beq.n	434c <log_output_msg_process+0xa4>
		postfix_print(output, flags, level);
    42f4:	4642      	mov	r2, r8
    42f6:	4639      	mov	r1, r7
    42f8:	4628      	mov	r0, r5
    42fa:	f7ff ff45 	bl	4188 <postfix_print>
    42fe:	e025      	b.n	434c <log_output_msg_process+0xa4>
			0 : prefix_print(output, flags, std_msg, timestamp,
    4300:	46c1      	mov	r9, r8
    4302:	e7eb      	b.n	42dc <log_output_msg_process+0x34>
	} else if (raw_string) {
    4304:	f1b8 0f00 	cmp.w	r8, #0
    4308:	d126      	bne.n	4358 <log_output_msg_process+0xb0>
	size_t offset = 0;
    430a:	4627      	mov	r7, r4
		length = output->size;
    430c:	68eb      	ldr	r3, [r5, #12]
    430e:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
    4310:	aa06      	add	r2, sp, #24
    4312:	463b      	mov	r3, r7
    4314:	68a9      	ldr	r1, [r5, #8]
    4316:	4630      	mov	r0, r6
    4318:	f01b f893 	bl	1f442 <log_msg_hexdump_data_get>
		output->control_block->offset = length;
    431c:	9a06      	ldr	r2, [sp, #24]
    431e:	686b      	ldr	r3, [r5, #4]
    4320:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    4322:	b13a      	cbz	r2, 4334 <log_output_msg_process+0x8c>
			eol = (output->buf[length - 1] == '\n');
    4324:	68ab      	ldr	r3, [r5, #8]
    4326:	4413      	add	r3, r2
    4328:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    432c:	f1a4 030a 	sub.w	r3, r4, #10
    4330:	425c      	negs	r4, r3
    4332:	415c      	adcs	r4, r3
		log_output_flush(output);
    4334:	4628      	mov	r0, r5
    4336:	f01b f9f5 	bl	1f724 <log_output_flush>
		offset += length;
    433a:	9b06      	ldr	r3, [sp, #24]
    433c:	441f      	add	r7, r3
	} while (length > 0);
    433e:	2b00      	cmp	r3, #0
    4340:	d1e4      	bne.n	430c <log_output_msg_process+0x64>
	if (eol) {
    4342:	b11c      	cbz	r4, 434c <log_output_msg_process+0xa4>
		print_formatted(output, "\r");
    4344:	4913      	ldr	r1, [pc, #76]	; (4394 <log_output_msg_process+0xec>)
    4346:	4628      	mov	r0, r5
    4348:	f7ff fe7e 	bl	4048 <print_formatted>
	}

	log_output_flush(output);
    434c:	4628      	mov	r0, r5
    434e:	f01b f9e9 	bl	1f724 <log_output_flush>
}
    4352:	b00a      	add	sp, #40	; 0x28
    4354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(output, "%s", log_msg_str_get(msg));
    4358:	4630      	mov	r0, r6
    435a:	f01a ffca 	bl	1f2f2 <log_msg_str_get>
    435e:	490e      	ldr	r1, [pc, #56]	; (4398 <log_output_msg_process+0xf0>)
    4360:	4602      	mov	r2, r0
    4362:	4628      	mov	r0, r5
    4364:	f7ff fe70 	bl	4048 <print_formatted>
		length = sizeof(buf);
    4368:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    436c:	aa05      	add	r2, sp, #20
    436e:	4623      	mov	r3, r4
    4370:	a906      	add	r1, sp, #24
    4372:	4630      	mov	r0, r6
		length = sizeof(buf);
    4374:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    4378:	f01b f863 	bl	1f442 <log_msg_hexdump_data_get>
		if (length) {
    437c:	9a05      	ldr	r2, [sp, #20]
    437e:	2a00      	cmp	r2, #0
    4380:	d0b8      	beq.n	42f4 <log_output_msg_process+0x4c>
			hexdump_line_print(output, buf, length,
    4382:	464b      	mov	r3, r9
    4384:	9700      	str	r7, [sp, #0]
    4386:	a906      	add	r1, sp, #24
    4388:	4628      	mov	r0, r5
    438a:	f7ff ff1b 	bl	41c4 <hexdump_line_print>
			offset += length;
    438e:	9b05      	ldr	r3, [sp, #20]
    4390:	441c      	add	r4, r3
		length = sizeof(buf);
    4392:	e7eb      	b.n	436c <log_output_msg_process+0xc4>
    4394:	00025b43 	.word	0x00025b43
    4398:	00026a2e 	.word	0x00026a2e

0000439c <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    439c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    439e:	f242 730f 	movw	r3, #9999	; 0x270f
    43a2:	428b      	cmp	r3, r1
    43a4:	bf28      	it	cs
    43a6:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    43a8:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    43aa:	4a0f      	ldr	r2, [pc, #60]	; (43e8 <log_output_dropped_process+0x4c>)
{
    43ac:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    43ae:	2105      	movs	r1, #5
    43b0:	4668      	mov	r0, sp
    43b2:	f01a fac0 	bl	1e936 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    43b6:	6863      	ldr	r3, [r4, #4]
    43b8:	490c      	ldr	r1, [pc, #48]	; (43ec <log_output_dropped_process+0x50>)
    43ba:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    43bc:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    43be:	220b      	movs	r2, #11
    43c0:	4628      	mov	r0, r5
    43c2:	f01b f845 	bl	1f450 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    43c6:	6863      	ldr	r3, [r4, #4]
    43c8:	4632      	mov	r2, r6
    43ca:	4669      	mov	r1, sp
    43cc:	4628      	mov	r0, r5
    43ce:	685b      	ldr	r3, [r3, #4]
    43d0:	f01b f83e 	bl	1f450 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    43d4:	6863      	ldr	r3, [r4, #4]
    43d6:	4906      	ldr	r1, [pc, #24]	; (43f0 <log_output_dropped_process+0x54>)
    43d8:	685b      	ldr	r3, [r3, #4]
    43da:	221b      	movs	r2, #27
    43dc:	4628      	mov	r0, r5
    43de:	f01b f837 	bl	1f450 <buffer_write>
		     output->control_block->ctx);
}
    43e2:	b002      	add	sp, #8
    43e4:	bd70      	pop	{r4, r5, r6, pc}
    43e6:	bf00      	nop
    43e8:	00025da7 	.word	0x00025da7
    43ec:	00025b81 	.word	0x00025b81
    43f0:	00025b65 	.word	0x00025b65

000043f4 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    43f4:	4a08      	ldr	r2, [pc, #32]	; (4418 <log_output_timestamp_freq_set+0x24>)
{
    43f6:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    43f8:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    43fa:	4c08      	ldr	r4, [pc, #32]	; (441c <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    43fc:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    43fe:	2100      	movs	r1, #0
    4400:	42a0      	cmp	r0, r4
    4402:	d804      	bhi.n	440e <log_output_timestamp_freq_set+0x1a>
    4404:	b101      	cbz	r1, 4408 <log_output_timestamp_freq_set+0x14>
    4406:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    4408:	4b05      	ldr	r3, [pc, #20]	; (4420 <log_output_timestamp_freq_set+0x2c>)
    440a:	6018      	str	r0, [r3, #0]
}
    440c:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    440e:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    4410:	005b      	lsls	r3, r3, #1
    4412:	2101      	movs	r1, #1
    4414:	e7f4      	b.n	4400 <log_output_timestamp_freq_set+0xc>
    4416:	bf00      	nop
    4418:	200016bc 	.word	0x200016bc
    441c:	000f4240 	.word	0x000f4240
    4420:	200016b8 	.word	0x200016b8

00004424 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    4424:	4b01      	ldr	r3, [pc, #4]	; (442c <log_backend_rtt_init+0x8>)
    4426:	2201      	movs	r2, #1
    4428:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    442a:	4770      	bx	lr
    442c:	20002e90 	.word	0x20002e90

00004430 <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = true;
    4430:	4b02      	ldr	r3, [pc, #8]	; (443c <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    4432:	4803      	ldr	r0, [pc, #12]	; (4440 <panic+0x10>)
    4434:	2201      	movs	r2, #1
    4436:	701a      	strb	r2, [r3, #0]
    4438:	f01b b974 	b.w	1f724 <log_output_flush>
    443c:	20002e91 	.word	0x20002e91
    4440:	000241e0 	.word	0x000241e0

00004444 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    4444:	4801      	ldr	r0, [pc, #4]	; (444c <dropped+0x8>)
    4446:	f7ff bfa9 	b.w	439c <log_output_dropped_process>
    444a:	bf00      	nop
    444c:	000241e0 	.word	0x000241e0

00004450 <put>:
{
    4450:	b510      	push	{r4, lr}
	log_msg_get(msg);
    4452:	4608      	mov	r0, r1
    4454:	460c      	mov	r4, r1
    4456:	f01a ff0a 	bl	1f26e <log_msg_get>
	log_output_msg_process(output, msg, flags);
    445a:	4805      	ldr	r0, [pc, #20]	; (4470 <put+0x20>)
    445c:	4621      	mov	r1, r4
    445e:	220f      	movs	r2, #15
    4460:	f7ff ff22 	bl	42a8 <log_output_msg_process>
	log_msg_put(msg);
    4464:	4620      	mov	r0, r4
}
    4466:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    446a:	f01a bf2f 	b.w	1f2cc <log_msg_put>
    446e:	bf00      	nop
    4470:	000241e0 	.word	0x000241e0

00004474 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    4474:	4b05      	ldr	r3, [pc, #20]	; (448c <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
    4476:	781b      	ldrb	r3, [r3, #0]
    4478:	b11b      	cbz	r3, 4482 <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
    447a:	f241 3088 	movw	r0, #5000	; 0x1388
    447e:	f01f b906 	b.w	2368e <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    4482:	20a4      	movs	r0, #164	; 0xa4
    4484:	2100      	movs	r1, #0
    4486:	f019 baf5 	b.w	1da74 <z_impl_k_sleep>
    448a:	bf00      	nop
    448c:	20002e91 	.word	0x20002e91

00004490 <data_out_block_mode>:
{
    4490:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    4494:	f8df 9090 	ldr.w	r9, [pc, #144]	; 4528 <data_out_block_mode+0x98>
	return z_impl_k_mutex_lock(mutex, timeout);
    4498:	f8df b090 	ldr.w	fp, [pc, #144]	; 452c <data_out_block_mode+0x9c>
{
    449c:	4607      	mov	r7, r0
    449e:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    44a0:	2404      	movs	r4, #4
    44a2:	46ca      	mov	sl, r9
		if (!is_sync_mode()) {
    44a4:	f899 3000 	ldrb.w	r3, [r9]
    44a8:	b933      	cbnz	r3, 44b8 <data_out_block_mode+0x28>
    44aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    44ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    44b2:	4658      	mov	r0, fp
    44b4:	f018 ff06 	bl	1d2c4 <z_impl_k_mutex_lock>
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    44b8:	4632      	mov	r2, r6
    44ba:	4639      	mov	r1, r7
    44bc:	2000      	movs	r0, #0
    44be:	f001 f807 	bl	54d0 <SEGGER_RTT_WriteSkipNoLock>
		if (!is_sync_mode()) {
    44c2:	f89a 3000 	ldrb.w	r3, [sl]
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    44c6:	4680      	mov	r8, r0
		if (!is_sync_mode()) {
    44c8:	b913      	cbnz	r3, 44d0 <data_out_block_mode+0x40>
	return z_impl_k_mutex_unlock(mutex);
    44ca:	4658      	mov	r0, fp
    44cc:	f018 ff72 	bl	1d3b4 <z_impl_k_mutex_unlock>
		if (ret) {
    44d0:	4d14      	ldr	r5, [pc, #80]	; (4524 <data_out_block_mode+0x94>)
    44d2:	f1b8 0f00 	cmp.w	r8, #0
    44d6:	d018      	beq.n	450a <data_out_block_mode+0x7a>
	host_present = true;
    44d8:	2301      	movs	r3, #1
    44da:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
    44dc:	f89a 3000 	ldrb.w	r3, [sl]
    44e0:	b933      	cbnz	r3, 44f0 <data_out_block_mode+0x60>
}
    44e2:	4630      	mov	r0, r6
    44e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (retry_cnt == 0) {
    44e8:	b95c      	cbnz	r4, 4502 <data_out_block_mode+0x72>
		host_present = false;
    44ea:	702c      	strb	r4, [r5, #0]
    44ec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    44f0:	2000      	movs	r0, #0
    44f2:	f001 f86d 	bl	55d0 <SEGGER_RTT_HasDataUp>
    44f6:	2800      	cmp	r0, #0
    44f8:	d0f3      	beq.n	44e2 <data_out_block_mode+0x52>
    44fa:	782b      	ldrb	r3, [r5, #0]
    44fc:	2b00      	cmp	r3, #0
    44fe:	d1f3      	bne.n	44e8 <data_out_block_mode+0x58>
    4500:	e7ef      	b.n	44e2 <data_out_block_mode+0x52>
			on_failed_write(retry_cnt--);
    4502:	3c01      	subs	r4, #1
    4504:	f7ff ffb6 	bl	4474 <on_failed_write.part.0>
    4508:	e7f2      	b.n	44f0 <data_out_block_mode+0x60>
		} else if (host_present) {
    450a:	782b      	ldrb	r3, [r5, #0]
    450c:	b113      	cbz	r3, 4514 <data_out_block_mode+0x84>
	if (retry_cnt == 0) {
    450e:	3c01      	subs	r4, #1
    4510:	d104      	bne.n	451c <data_out_block_mode+0x8c>
		host_present = false;
    4512:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    4514:	782b      	ldrb	r3, [r5, #0]
    4516:	2b00      	cmp	r3, #0
    4518:	d1c4      	bne.n	44a4 <data_out_block_mode+0x14>
    451a:	e7e2      	b.n	44e2 <data_out_block_mode+0x52>
    451c:	f7ff ffaa 	bl	4474 <on_failed_write.part.0>
    4520:	e7f8      	b.n	4514 <data_out_block_mode+0x84>
    4522:	bf00      	nop
    4524:	20002e90 	.word	0x20002e90
    4528:	20002e91 	.word	0x20002e91
    452c:	200008ec 	.word	0x200008ec

00004530 <lec_ccc_cfg_changed>:
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    4530:	4b07      	ldr	r3, [pc, #28]	; (4550 <lec_ccc_cfg_changed+0x20>)
    4532:	4a08      	ldr	r2, [pc, #32]	; (4554 <lec_ccc_cfg_changed+0x24>)
{
	ARG_UNUSED(attr);

	bool notif_enabled = (value == BT_GATT_CCC_NOTIFY);

	LOG_INF("LSES notifications %s", notif_enabled ? "enabled" : "disabled");
    4534:	4808      	ldr	r0, [pc, #32]	; (4558 <lec_ccc_cfg_changed+0x28>)
    4536:	1ad2      	subs	r2, r2, r3
    4538:	08d2      	lsrs	r2, r2, #3
    453a:	4b08      	ldr	r3, [pc, #32]	; (455c <lec_ccc_cfg_changed+0x2c>)
    453c:	0192      	lsls	r2, r2, #6
    453e:	2901      	cmp	r1, #1
    4540:	bf14      	ite	ne
    4542:	4601      	movne	r1, r0
    4544:	4619      	moveq	r1, r3
    4546:	f042 0203 	orr.w	r2, r2, #3
    454a:	4805      	ldr	r0, [pc, #20]	; (4560 <lec_ccc_cfg_changed+0x30>)
    454c:	f01a bdcd 	b.w	1f0ea <log_1>
    4550:	00023ed8 	.word	0x00023ed8
    4554:	00024000 	.word	0x00024000
    4558:	00025bc7 	.word	0x00025bc7
    455c:	00025bbf 	.word	0x00025bbf
    4560:	00025bd0 	.word	0x00025bd0

00004564 <lora_config.constprop.0>:
			      struct lora_modem_config *config)
{
	const struct lora_driver_api *api =
		(const struct lora_driver_api *)dev->api;

	return api->config(dev, config);
    4564:	6883      	ldr	r3, [r0, #8]
    4566:	4901      	ldr	r1, [pc, #4]	; (456c <lora_config.constprop.0+0x8>)
    4568:	681b      	ldr	r3, [r3, #0]
    456a:	4718      	bx	r3
    456c:	200016d4 	.word	0x200016d4

00004570 <exec_loop>:

// to control the sending LoRa messages loop in explore mode
static uint16_t number_of_messages = 0;
static uint8_t time_between_msgs = 0;

void exec_loop(void *a, void *b, void *c) {
    4570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t len = loop_data_length;
    4574:	4b26      	ldr	r3, [pc, #152]	; (4610 <exec_loop+0xa0>)
    4576:	881b      	ldrh	r3, [r3, #0]
	char data[len];
    4578:	1dda      	adds	r2, r3, #7
    457a:	4669      	mov	r1, sp
    457c:	08d2      	lsrs	r2, r2, #3
    457e:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
void exec_loop(void *a, void *b, void *c) {
    4582:	af00      	add	r7, sp, #0
    4584:	4923      	ldr	r1, [pc, #140]	; (4614 <exec_loop+0xa4>)
	char data[len];
    4586:	4695      	mov	sp, r2
    4588:	466e      	mov	r6, sp
	
		for(uint16_t i = 0; i < len; i++) {
    458a:	eb0d 0003 	add.w	r0, sp, r3
    458e:	4282      	cmp	r2, r0
    4590:	d119      	bne.n	45c6 <exec_loop+0x56>
			data[i] = loop_data[i];
		}
		data[len] = '.';
    4592:	222e      	movs	r2, #46	; 0x2e
    4594:	54f2      	strb	r2, [r6, r3]
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    4596:	4820      	ldr	r0, [pc, #128]	; (4618 <exec_loop+0xa8>)
    4598:	4c20      	ldr	r4, [pc, #128]	; (461c <exec_loop+0xac>)

		// send message
		lora_dev = device_get_binding(DEFAULT_RADIO);

		uint16_t i = 0;
		while (i < number_of_messages) {
    459a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 462c <exec_loop+0xbc>
    459e:	f018 fc9f 	bl	1cee0 <z_impl_device_get_binding>
    45a2:	4b1f      	ldr	r3, [pc, #124]	; (4620 <exec_loop+0xb0>)
    45a4:	1ae4      	subs	r4, r4, r3
    45a6:	08e4      	lsrs	r4, r4, #3
			lora_send(lora_dev, data, MAX_DATA_LEN);
			
			LOG_INF("Data sent!");
    45a8:	01a4      	lsls	r4, r4, #6
    45aa:	4605      	mov	r5, r0
		while (i < number_of_messages) {
    45ac:	f04f 0800 	mov.w	r8, #0
			LOG_INF("Data sent!");
    45b0:	f044 0403 	orr.w	r4, r4, #3
		while (i < number_of_messages) {
    45b4:	f8b9 2000 	ldrh.w	r2, [r9]
    45b8:	fa1f f388 	uxth.w	r3, r8
    45bc:	429a      	cmp	r2, r3
    45be:	d807      	bhi.n	45d0 <exec_loop+0x60>
			k_sleep(K_SECONDS(time_between_msgs));
			i++;
		}

	return;
}
    45c0:	46bd      	mov	sp, r7
    45c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			data[i] = loop_data[i];
    45c6:	f811 4b01 	ldrb.w	r4, [r1], #1
    45ca:	f802 4b01 	strb.w	r4, [r2], #1
		for(uint16_t i = 0; i < len; i++) {
    45ce:	e7de      	b.n	458e <exec_loop+0x1e>
			lora_send(lora_dev, data, MAX_DATA_LEN);
    45d0:	2214      	movs	r2, #20
    45d2:	4631      	mov	r1, r6
    45d4:	4628      	mov	r0, r5
    45d6:	f01b f8e7 	bl	1f7a8 <lora_send>
			LOG_INF("Data sent!");
    45da:	4621      	mov	r1, r4
    45dc:	4811      	ldr	r0, [pc, #68]	; (4624 <exec_loop+0xb4>)
    45de:	f01a fd77 	bl	1f0d0 <log_0>
			k_sleep(K_SECONDS(time_between_msgs));
    45e2:	4b11      	ldr	r3, [pc, #68]	; (4628 <exec_loop+0xb8>)
    45e4:	781b      	ldrb	r3, [r3, #0]
    45e6:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    45ea:	fb0c fc03 	mul.w	ip, ip, r3
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    45ee:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
    45f2:	f240 30e7 	movw	r0, #999	; 0x3e7
    45f6:	2100      	movs	r1, #0
    45f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    45fc:	2300      	movs	r3, #0
    45fe:	fbee 010c 	umlal	r0, r1, lr, ip
    4602:	f7fc fa1b 	bl	a3c <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    4606:	f019 fa35 	bl	1da74 <z_impl_k_sleep>
			i++;
    460a:	f108 0801 	add.w	r8, r8, #1
    460e:	e7d1      	b.n	45b4 <exec_loop+0x44>
    4610:	20002e54 	.word	0x20002e54
    4614:	20002e92 	.word	0x20002e92
    4618:	00025be6 	.word	0x00025be6
    461c:	00024000 	.word	0x00024000
    4620:	00023ed8 	.word	0x00023ed8
    4624:	00025bed 	.word	0x00025bed
    4628:	2000306e 	.word	0x2000306e
    462c:	20002e56 	.word	0x20002e56

00004630 <send_command_cb>:
{
    4630:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4634:	461c      	mov	r4, r3
    4636:	b089      	sub	sp, #36	; 0x24
	char data[len + 1];
    4638:	f103 0801 	add.w	r8, r3, #1
    463c:	3308      	adds	r3, #8
{
    463e:	4611      	mov	r1, r2
	char data[len + 1];
    4640:	08db      	lsrs	r3, r3, #3
    4642:	466a      	mov	r2, sp
    4644:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
{
    4648:	af08      	add	r7, sp, #32
	if(*pc == '&') {
    464a:	f891 9000 	ldrb.w	r9, [r1]
    464e:	481b      	ldr	r0, [pc, #108]	; (46bc <send_command_cb+0x8c>)
	char data[len + 1];
    4650:	469d      	mov	sp, r3
    4652:	ad08      	add	r5, sp, #32
	for(uint16_t i = 0; i < len; i++) {
    4654:	2300      	movs	r3, #0
    4656:	b29a      	uxth	r2, r3
    4658:	4294      	cmp	r4, r2
    465a:	d828      	bhi.n	46ae <send_command_cb+0x7e>
	data[len] = '.';
    465c:	232e      	movs	r3, #46	; 0x2e
    465e:	552b      	strb	r3, [r5, r4]
	printk("msg: %s\n", data);
    4660:	4817      	ldr	r0, [pc, #92]	; (46c0 <send_command_cb+0x90>)
    4662:	4629      	mov	r1, r5
    4664:	f01a f95a 	bl	1e91c <printk>
    4668:	4816      	ldr	r0, [pc, #88]	; (46c4 <send_command_cb+0x94>)
    466a:	f018 fc39 	bl	1cee0 <z_impl_device_get_binding>
	ret = lora_send(lora_dev, data, len + 1);
    466e:	4642      	mov	r2, r8
    4670:	4629      	mov	r1, r5
    4672:	f01b f899 	bl	1f7a8 <lora_send>
	if(isPing) {
    4676:	f1b9 0f26 	cmp.w	r9, #38	; 0x26
    467a:	d113      	bne.n	46a4 <send_command_cb+0x74>
		ping_len = len;
    467c:	4b12      	ldr	r3, [pc, #72]	; (46c8 <send_command_cb+0x98>)
    467e:	801c      	strh	r4, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    4680:	2200      	movs	r2, #0
    4682:	2300      	movs	r3, #0
    4684:	e9cd 2306 	strd	r2, r3, [sp, #24]
    4688:	2300      	movs	r3, #0
    468a:	2205      	movs	r2, #5
    468c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    4690:	e9cd 3301 	strd	r3, r3, [sp, #4]
    4694:	9300      	str	r3, [sp, #0]
    4696:	490d      	ldr	r1, [pc, #52]	; (46cc <send_command_cb+0x9c>)
    4698:	4b0d      	ldr	r3, [pc, #52]	; (46d0 <send_command_cb+0xa0>)
    469a:	480e      	ldr	r0, [pc, #56]	; (46d4 <send_command_cb+0xa4>)
    469c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    46a0:	f019 fb1e 	bl	1dce0 <z_impl_k_thread_create>
}
    46a4:	2000      	movs	r0, #0
    46a6:	3704      	adds	r7, #4
    46a8:	46bd      	mov	sp, r7
    46aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		data[i] = *pc;
    46ae:	5cce      	ldrb	r6, [r1, r3]
    46b0:	54ee      	strb	r6, [r5, r3]
		ping_content[i] = *pc;
    46b2:	f800 6b01 	strb.w	r6, [r0], #1
	for(uint16_t i = 0; i < len; i++) {
    46b6:	3301      	adds	r3, #1
    46b8:	e7cd      	b.n	4656 <send_command_cb+0x26>
    46ba:	bf00      	nop
    46bc:	20002f92 	.word	0x20002f92
    46c0:	00025bf8 	.word	0x00025bf8
    46c4:	00025be6 	.word	0x00025be6
    46c8:	20002e5a 	.word	0x20002e5a
    46cc:	200039e0 	.word	0x200039e0
    46d0:	00004b95 	.word	0x00004b95
    46d4:	20000c38 	.word	0x20000c38

000046d8 <exec_experiment>:
					188,189,190,191,192,193,194,195,196,197,198,199};*/

uint8_t random_d [200] = {0};					

// experiment send thread code
void exec_experiment(void *a, void *b, void *c) {
    46d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    46dc:	b08d      	sub	sp, #52	; 0x34
    46de:	af04      	add	r7, sp, #16
    46e0:	48b9      	ldr	r0, [pc, #740]	; (49c8 <exec_experiment+0x2f0>)
	while(!experiment_started) {
		l = lora_recv(lora_dev, data, MAX_DATA_LEN, K_FOREVER,
					&rssi, &snr);
		
		if(data[0] == 33) {					// in this case it is a ping instead of the experiment settings, which start the experiment procedure
			config.tx = true;
    46e2:	f8df a2f8 	ldr.w	sl, [pc, #760]	; 49dc <exec_experiment+0x304>
			lora_config(lora_dev, &config);	
			lora_send(lora_dev, data, 5);
			data[0] = -1;
			config.tx = false;
			lora_config(lora_dev, &config);	
			printk("responded to ping\n");			
    46e6:	f8df b310 	ldr.w	fp, [pc, #784]	; 49f8 <exec_experiment+0x320>
    46ea:	f018 fbf9 	bl	1cee0 <z_impl_device_get_binding>
	uint8_t data[MAX_DATA_LEN] = {0};
    46ee:	2210      	movs	r2, #16
    46f0:	2100      	movs	r1, #0
    46f2:	4604      	mov	r4, r0
    46f4:	18b8      	adds	r0, r7, r2
    46f6:	60f9      	str	r1, [r7, #12]
    46f8:	f01f fa8f 	bl	23c1a <memset>
	while(!experiment_started) {
    46fc:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    4700:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			    k_timeout_t timeout, int16_t *rssi, int8_t *snr)
{
	const struct lora_driver_api *api =
		(const struct lora_driver_api *)dev->api;

	return api->recv(dev, data, size, timeout, rssi, snr);
    4704:	68a3      	ldr	r3, [r4, #8]
    4706:	e9cd 8900 	strd	r8, r9, [sp]
    470a:	f107 0509 	add.w	r5, r7, #9
    470e:	f107 060a 	add.w	r6, r7, #10
    4712:	9503      	str	r5, [sp, #12]
    4714:	9602      	str	r6, [sp, #8]
    4716:	689b      	ldr	r3, [r3, #8]
    4718:	2214      	movs	r2, #20
    471a:	f107 010c 	add.w	r1, r7, #12
    471e:	4620      	mov	r0, r4
    4720:	4798      	blx	r3
		if(data[0] == 33) {					// in this case it is a ping instead of the experiment settings, which start the experiment procedure
    4722:	7b3a      	ldrb	r2, [r7, #12]
    4724:	2a21      	cmp	r2, #33	; 0x21
    4726:	4603      	mov	r3, r0
    4728:	f000 80dd 	beq.w	48e6 <exec_experiment+0x20e>
			}
		}
		uint16_t d = atoi(delay); 


		config.tx = true;
    472c:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 49dc <exec_experiment+0x304>
		char delay[l-9];
    4730:	1e9a      	subs	r2, r3, #2
    4732:	f022 0207 	bic.w	r2, r2, #7
	while(!experiment_ready) {
    4736:	46eb      	mov	fp, sp
		char delay[l-9];
    4738:	ebad 0d02 	sub.w	sp, sp, r2
    473c:	a804      	add	r0, sp, #16
		for(int16_t i = 0; i < l; i++) {
    473e:	2100      	movs	r1, #0
    4740:	b20a      	sxth	r2, r1
    4742:	429a      	cmp	r2, r3
    4744:	f2c0 80e7 	blt.w	4916 <exec_experiment+0x23e>
		uint16_t d = atoi(delay); 
    4748:	f01f fa47 	bl	23bda <atoi>
		config.tx = true;
    474c:	f04f 0a01 	mov.w	sl, #1
		uint16_t d = atoi(delay); 
    4750:	6078      	str	r0, [r7, #4]
		ret = lora_config(lora_dev, &config);
    4752:	4620      	mov	r0, r4
		config.tx = true;
    4754:	f889 a00b 	strb.w	sl, [r9, #11]
		ret = lora_config(lora_dev, &config);
    4758:	f7ff ff04 	bl	4564 <lora_config.constprop.0>
	return z_impl_k_sleep(timeout);
    475c:	2100      	movs	r1, #0
    475e:	f641 109a 	movw	r0, #6554	; 0x199a
    4762:	f019 f987 	bl	1da74 <z_impl_k_sleep>
		
		k_sleep(K_MSEC(200));
		ret = lora_send(lora_dev, data, MAX_DATA_LEN);						// send received experiment settings back as ACK
    4766:	2214      	movs	r2, #20
    4768:	f107 010c 	add.w	r1, r7, #12
    476c:	4620      	mov	r0, r4
    476e:	f01b f81b 	bl	1f7a8 <lora_send>

		config.tx = false;
    4772:	f04f 0800 	mov.w	r8, #0
		ret = lora_config(lora_dev, &config);
    4776:	4620      	mov	r0, r4
		config.tx = false;
    4778:	f889 800b 	strb.w	r8, [r9, #11]
		ret = lora_config(lora_dev, &config);
    477c:	f7ff fef2 	bl	4564 <lora_config.constprop.0>
		
		printk("delay countdown (re-)started\n");
    4780:	4892      	ldr	r0, [pc, #584]	; (49cc <exec_experiment+0x2f4>)
    4782:	f01a f8cb 	bl	1e91c <printk>
		l = lora_recv(lora_dev, data, MAX_DATA_LEN, K_SECONDS(d),			// listen for retransmission in case ACK was lost as long as the specified delay
    4786:	687b      	ldr	r3, [r7, #4]
    4788:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    478c:	b29b      	uxth	r3, r3
    478e:	fb0c fc03 	mul.w	ip, ip, r3
    4792:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
    4796:	f240 30e7 	movw	r0, #999	; 0x3e7
    479a:	2100      	movs	r1, #0
    479c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    47a0:	2300      	movs	r3, #0
    47a2:	fbee 010c 	umlal	r0, r1, lr, ip
    47a6:	f7fc f949 	bl	a3c <__aeabi_uldivmod>
    47aa:	68a3      	ldr	r3, [r4, #8]
    47ac:	e9cd 0100 	strd	r0, r1, [sp]
    47b0:	e9cd 6502 	strd	r6, r5, [sp, #8]
    47b4:	2214      	movs	r2, #20
    47b6:	689b      	ldr	r3, [r3, #8]
    47b8:	f107 010c 	add.w	r1, r7, #12
    47bc:	4620      	mov	r0, r4
    47be:	4798      	blx	r3
				&rssi, &snr);
		if (l < 0) {
    47c0:	1e03      	subs	r3, r0, #0
    47c2:	f280 80b5 	bge.w	4930 <exec_experiment+0x258>
			experiment_ready = true;
			printk("experiment started\n");
    47c6:	4882      	ldr	r0, [pc, #520]	; (49d0 <exec_experiment+0x2f8>)
    47c8:	f01a f8a8 	bl	1e91c <printk>
	}



	// start experiment
	char transmission_data[data[2]]; 	// data[2] contains msg length
    47cc:	7bbb      	ldrb	r3, [r7, #14]
	transmission_data[5] = '_';

	config.tx = true;
    47ce:	f889 a00b 	strb.w	sl, [r9, #11]
	char transmission_data[data[2]]; 	// data[2] contains msg length
    47d2:	3307      	adds	r3, #7
    47d4:	f403 73fc 	and.w	r3, r3, #504	; 0x1f8
    47d8:	46dd      	mov	sp, fp
    47da:	ebad 0d03 	sub.w	sp, sp, r3
    47de:	ad04      	add	r5, sp, #16
	transmission_data[5] = '_';
    47e0:	235f      	movs	r3, #95	; 0x5f
    47e2:	716b      	strb	r3, [r5, #5]
	config.tx = true;
    47e4:	4646      	mov	r6, r8
	int ret;
	for(uint8_t i = 0; i < 8; i++) {
		if(((data[4] >> i)  & 0x01) == 1) {					// the 4th byte of the settings byte array represents the frequencies to use
    47e6:	7c3b      	ldrb	r3, [r7, #16]
    47e8:	4133      	asrs	r3, r6
    47ea:	07db      	lsls	r3, r3, #31
    47ec:	d571      	bpl.n	48d2 <exec_experiment+0x1fa>
			config.frequency = frequencies[i];				// if a bit in that byte is set, the corresponding frequency will be used;
    47ee:	4b79      	ldr	r3, [pc, #484]	; (49d4 <exec_experiment+0x2fc>)
			transmission_data[0] = (char) i + 48;
			printk("frequency: %d\n", frequencies[i]);
    47f0:	4879      	ldr	r0, [pc, #484]	; (49d8 <exec_experiment+0x300>)
			config.frequency = frequencies[i];				// if a bit in that byte is set, the corresponding frequency will be used;
    47f2:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
    47f6:	4b79      	ldr	r3, [pc, #484]	; (49dc <exec_experiment+0x304>)
    47f8:	6019      	str	r1, [r3, #0]
			transmission_data[0] = (char) i + 48;
    47fa:	f106 0330 	add.w	r3, r6, #48	; 0x30
    47fe:	702b      	strb	r3, [r5, #0]
			printk("frequency: %d\n", frequencies[i]);
    4800:	f01a f88c 	bl	1e91c <printk>
    4804:	f04f 0800 	mov.w	r8, #0
		} else {
			continue;
		}

		for(uint8_t j = 0; j < 3; j++) {
			if(((data[5] >> j)  & 0x01) == 1) {
    4808:	7c7a      	ldrb	r2, [r7, #17]
    480a:	fa42 f208 	asr.w	r2, r2, r8
    480e:	07d0      	lsls	r0, r2, #31
    4810:	fa5f f388 	uxtb.w	r3, r8
    4814:	d558      	bpl.n	48c8 <exec_experiment+0x1f0>
				config.bandwidth =  j;
    4816:	4a71      	ldr	r2, [pc, #452]	; (49dc <exec_experiment+0x304>)
				transmission_data[1] = (char) j + 48;
				printk("bandwidth: %d\n", j);
    4818:	4871      	ldr	r0, [pc, #452]	; (49e0 <exec_experiment+0x308>)
				config.bandwidth =  j;
    481a:	7113      	strb	r3, [r2, #4]
				transmission_data[1] = (char) j + 48;
    481c:	3330      	adds	r3, #48	; 0x30
    481e:	706b      	strb	r3, [r5, #1]
				printk("bandwidth: %d\n", j);
    4820:	4641      	mov	r1, r8
    4822:	f01a f87b 	bl	1e91c <printk>
    4826:	f04f 0900 	mov.w	r9, #0
			} else {
				continue;
			}
			for(uint8_t k = 0; k < 6; k++) {
				if(((data[6] >> k)  & 0x01) == 1) {
    482a:	7cbb      	ldrb	r3, [r7, #18]
    482c:	fa43 f309 	asr.w	r3, r3, r9
    4830:	07d9      	lsls	r1, r3, #31
    4832:	d544      	bpl.n	48be <exec_experiment+0x1e6>
					config.datarate =  k + 7;
    4834:	4969      	ldr	r1, [pc, #420]	; (49dc <exec_experiment+0x304>)
					transmission_data[2] = (char) k + 48;
					printk("data rate: %d\n", k+7);
    4836:	486b      	ldr	r0, [pc, #428]	; (49e4 <exec_experiment+0x30c>)
    4838:	fa5f f389 	uxtb.w	r3, r9
					config.datarate =  k + 7;
    483c:	1dda      	adds	r2, r3, #7
					transmission_data[2] = (char) k + 48;
    483e:	3330      	adds	r3, #48	; 0x30
					config.datarate =  k + 7;
    4840:	714a      	strb	r2, [r1, #5]
					transmission_data[2] = (char) k + 48;
    4842:	70ab      	strb	r3, [r5, #2]
					printk("data rate: %d\n", k+7);
    4844:	f109 0107 	add.w	r1, r9, #7
    4848:	f01a f868 	bl	1e91c <printk>
    484c:	f04f 0a00 	mov.w	sl, #0
				} else {
					continue;
				}
				for(uint8_t l = 0; l < 4; l++) {
					if(((data[7] >> l)  & 0x01) == 1) {
    4850:	7cfb      	ldrb	r3, [r7, #19]
    4852:	fa43 f30a 	asr.w	r3, r3, sl
    4856:	07da      	lsls	r2, r3, #31
    4858:	d52c      	bpl.n	48b4 <exec_experiment+0x1dc>
						config.coding_rate =  l + 1;
    485a:	4960      	ldr	r1, [pc, #384]	; (49dc <exec_experiment+0x304>)
						transmission_data[3] = (char) l + 48;
						printk("coding rate: %d\n", l+1);
    485c:	4862      	ldr	r0, [pc, #392]	; (49e8 <exec_experiment+0x310>)
    485e:	fa5f f38a 	uxtb.w	r3, sl
						config.coding_rate =  l + 1;
    4862:	1c5a      	adds	r2, r3, #1
						transmission_data[3] = (char) l + 48;
    4864:	3330      	adds	r3, #48	; 0x30
						config.coding_rate =  l + 1;
    4866:	718a      	strb	r2, [r1, #6]
						transmission_data[3] = (char) l + 48;
    4868:	70eb      	strb	r3, [r5, #3]
						printk("coding rate: %d\n", l+1);
    486a:	f10a 0101 	add.w	r1, sl, #1
    486e:	f01a f855 	bl	1e91c <printk>
    4872:	f04f 0b00 	mov.w	fp, #0
					} else {
						continue;
					}
					for(uint8_t m = 0; m < 8; m++) {
						if(((data[8] >> m)  & 0x01) == 1) {
    4876:	7d3b      	ldrb	r3, [r7, #20]
    4878:	fa43 f30b 	asr.w	r3, r3, fp
    487c:	07db      	lsls	r3, r3, #31
    487e:	d514      	bpl.n	48aa <exec_experiment+0x1d2>
							config.tx_power =  m + 1;
    4880:	fa5f f38b 	uxtb.w	r3, fp
    4884:	1c5a      	adds	r2, r3, #1
    4886:	4955      	ldr	r1, [pc, #340]	; (49dc <exec_experiment+0x304>)
							transmission_data[4] = (char) m + 48;
    4888:	3330      	adds	r3, #48	; 0x30
    488a:	712b      	strb	r3, [r5, #4]
							
							ret = lora_config(lora_dev, &config);
    488c:	4620      	mov	r0, r4
							config.tx_power =  m + 1;
    488e:	728a      	strb	r2, [r1, #10]
							ret = lora_config(lora_dev, &config);
    4890:	f7ff fe68 	bl	4564 <lora_config.constprop.0>
							
							for(uint8_t n = 0; n < data[0]; n++) {											// data[0] contains the number of LoRa transmissions per parameter combination
    4894:	2300      	movs	r3, #0
    4896:	607b      	str	r3, [r7, #4]
    4898:	7938      	ldrb	r0, [r7, #4]
    489a:	7b3b      	ldrb	r3, [r7, #12]
    489c:	4283      	cmp	r3, r0
    489e:	d849      	bhi.n	4934 <exec_experiment+0x25c>
    48a0:	f44f 3020 	mov.w	r0, #163840	; 0x28000
    48a4:	2100      	movs	r1, #0
    48a6:	f019 f8e5 	bl	1da74 <z_impl_k_sleep>
					for(uint8_t m = 0; m < 8; m++) {
    48aa:	f10b 0b01 	add.w	fp, fp, #1
    48ae:	f1bb 0f08 	cmp.w	fp, #8
    48b2:	d1e0      	bne.n	4876 <exec_experiment+0x19e>
				for(uint8_t l = 0; l < 4; l++) {
    48b4:	f10a 0a01 	add.w	sl, sl, #1
    48b8:	f1ba 0f04 	cmp.w	sl, #4
    48bc:	d1c8      	bne.n	4850 <exec_experiment+0x178>
			for(uint8_t k = 0; k < 6; k++) {
    48be:	f109 0901 	add.w	r9, r9, #1
    48c2:	f1b9 0f06 	cmp.w	r9, #6
    48c6:	d1b0      	bne.n	482a <exec_experiment+0x152>
		for(uint8_t j = 0; j < 3; j++) {
    48c8:	f108 0801 	add.w	r8, r8, #1
    48cc:	f1b8 0f03 	cmp.w	r8, #3
    48d0:	d19a      	bne.n	4808 <exec_experiment+0x130>
	for(uint8_t i = 0; i < 8; i++) {
    48d2:	3601      	adds	r6, #1
    48d4:	2e08      	cmp	r6, #8
    48d6:	d186      	bne.n	47e6 <exec_experiment+0x10e>
				}
			}
		}
	}

	printk("end of experiment...........\n");
    48d8:	4844      	ldr	r0, [pc, #272]	; (49ec <exec_experiment+0x314>)
    48da:	f01a f81f 	bl	1e91c <printk>

	return;
}
    48de:	3724      	adds	r7, #36	; 0x24
    48e0:	46bd      	mov	sp, r7
    48e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			config.tx = true;
    48e6:	2301      	movs	r3, #1
			lora_config(lora_dev, &config);	
    48e8:	4620      	mov	r0, r4
			config.tx = true;
    48ea:	f88a 300b 	strb.w	r3, [sl, #11]
			lora_config(lora_dev, &config);	
    48ee:	f7ff fe39 	bl	4564 <lora_config.constprop.0>
			lora_send(lora_dev, data, 5);
    48f2:	2205      	movs	r2, #5
    48f4:	f107 010c 	add.w	r1, r7, #12
    48f8:	4620      	mov	r0, r4
    48fa:	f01a ff55 	bl	1f7a8 <lora_send>
			data[0] = -1;
    48fe:	23ff      	movs	r3, #255	; 0xff
    4900:	733b      	strb	r3, [r7, #12]
			lora_config(lora_dev, &config);	
    4902:	4620      	mov	r0, r4
			config.tx = false;
    4904:	2300      	movs	r3, #0
    4906:	f88a 300b 	strb.w	r3, [sl, #11]
			lora_config(lora_dev, &config);	
    490a:	f7ff fe2b 	bl	4564 <lora_config.constprop.0>
			printk("responded to ping\n");			
    490e:	4658      	mov	r0, fp
    4910:	f01a f804 	bl	1e91c <printk>
	while(!experiment_started) {
    4914:	e6f6      	b.n	4704 <exec_experiment+0x2c>
			if(i > 8) {														// get experiment start delay
    4916:	2a08      	cmp	r2, #8
    4918:	dd08      	ble.n	492c <exec_experiment+0x254>
				delay[i-9] = data[i];
    491a:	f107 0e20 	add.w	lr, r7, #32
    491e:	eb00 0c02 	add.w	ip, r0, r2
    4922:	4472      	add	r2, lr
    4924:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    4928:	f80c 2c09 	strb.w	r2, [ip, #-9]
		for(int16_t i = 0; i < l; i++) {
    492c:	3101      	adds	r1, #1
    492e:	e707      	b.n	4740 <exec_experiment+0x68>
    4930:	46dd      	mov	sp, fp
	while(!experiment_ready) {
    4932:	e6fd      	b.n	4730 <exec_experiment+0x58>
								transmission_data[6] = (char) n / 100 + 48;									// include numbering into transmission content (as String (3 bytes) not as byte (1 byte))
    4934:	2364      	movs	r3, #100	; 0x64
    4936:	fbb0 f3f3 	udiv	r3, r0, r3
    493a:	3330      	adds	r3, #48	; 0x30
    493c:	71ab      	strb	r3, [r5, #6]
								transmission_data[7] = (char) n / 10 + 48;									// this line needs to be changed if max number of transmissions per combination is changed (it is 100 now)
    493e:	230a      	movs	r3, #10
    4940:	fbb0 f1f3 	udiv	r1, r0, r3
    4944:	f101 0230 	add.w	r2, r1, #48	; 0x30
								transmission_data[8] = (char) n % 10 + 48;
    4948:	fb03 0111 	mls	r1, r3, r1, r0
								for(uint8_t p = 9; p < (data[2] - 1); p++) {								// data[2] contains message length (length of the transmitted content)
    494c:	7bbb      	ldrb	r3, [r7, #14]
								transmission_data[7] = (char) n / 10 + 48;									// this line needs to be changed if max number of transmissions per combination is changed (it is 100 now)
    494e:	71ea      	strb	r2, [r5, #7]
									transmission_data[p] = random_d[(n * (data[2] - 9) + (p - 9)) % 200];	// fills the message up with with random payload data until desired message length
    4950:	f1a3 0209 	sub.w	r2, r3, #9
								transmission_data[8] = (char) n % 10 + 48;
    4954:	3130      	adds	r1, #48	; 0x30
									transmission_data[p] = random_d[(n * (data[2] - 9) + (p - 9)) % 200];	// fills the message up with with random payload data until desired message length
    4956:	4342      	muls	r2, r0
								transmission_data[8] = (char) n % 10 + 48;
    4958:	7229      	strb	r1, [r5, #8]
								for(uint8_t p = 9; p < (data[2] - 1); p++) {								// data[2] contains message length (length of the transmitted content)
    495a:	1e59      	subs	r1, r3, #1
    495c:	f1a2 0309 	sub.w	r3, r2, #9
    4960:	603b      	str	r3, [r7, #0]
									transmission_data[p] = random_d[(n * (data[2] - 9) + (p - 9)) % 200];	// fills the message up with with random payload data until desired message length
    4962:	f04f 0cc8 	mov.w	ip, #200	; 0xc8
								for(uint8_t p = 9; p < (data[2] - 1); p++) {								// data[2] contains message length (length of the transmitted content)
    4966:	2309      	movs	r3, #9
    4968:	428b      	cmp	r3, r1
    496a:	db20      	blt.n	49ae <exec_experiment+0x2d6>
								transmission_data[data[2] - 1] = '.';
    496c:	232e      	movs	r3, #46	; 0x2e
    496e:	546b      	strb	r3, [r5, r1]
								printk("transmission data: %s\n", transmission_data);
    4970:	481f      	ldr	r0, [pc, #124]	; (49f0 <exec_experiment+0x318>)
    4972:	4629      	mov	r1, r5
    4974:	f019 ffd2 	bl	1e91c <printk>
								ret = lora_send(lora_dev, transmission_data, data[2]);
    4978:	7bba      	ldrb	r2, [r7, #14]
    497a:	4629      	mov	r1, r5
    497c:	4620      	mov	r0, r4
    497e:	f01a ff13 	bl	1f7a8 <lora_send>
								k_sleep(K_MSEC(data[1] * 1000));											// data[1] contains the number of seconds between transmissions
    4982:	7b7b      	ldrb	r3, [r7, #13]
    4984:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    4988:	fb0c fc03 	mul.w	ip, ip, r3
    498c:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
    4990:	f240 30e7 	movw	r0, #999	; 0x3e7
    4994:	2100      	movs	r1, #0
    4996:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    499a:	2300      	movs	r3, #0
    499c:	fbce 010c 	smlal	r0, r1, lr, ip
    49a0:	f7fc f84c 	bl	a3c <__aeabi_uldivmod>
    49a4:	f019 f866 	bl	1da74 <z_impl_k_sleep>
							for(uint8_t n = 0; n < data[0]; n++) {											// data[0] contains the number of LoRa transmissions per parameter combination
    49a8:	687b      	ldr	r3, [r7, #4]
    49aa:	3301      	adds	r3, #1
    49ac:	e773      	b.n	4896 <exec_experiment+0x1be>
									transmission_data[p] = random_d[(n * (data[2] - 9) + (p - 9)) % 200];	// fills the message up with with random payload data until desired message length
    49ae:	683a      	ldr	r2, [r7, #0]
    49b0:	eb03 0e02 	add.w	lr, r3, r2
    49b4:	4a0f      	ldr	r2, [pc, #60]	; (49f4 <exec_experiment+0x31c>)
    49b6:	fb9e f0fc 	sdiv	r0, lr, ip
    49ba:	fb0c e010 	mls	r0, ip, r0, lr
    49be:	5c10      	ldrb	r0, [r2, r0]
    49c0:	54e8      	strb	r0, [r5, r3]
								for(uint8_t p = 9; p < (data[2] - 1); p++) {								// data[2] contains message length (length of the transmitted content)
    49c2:	3301      	adds	r3, #1
    49c4:	b2db      	uxtb	r3, r3
    49c6:	e7cf      	b.n	4968 <exec_experiment+0x290>
    49c8:	00025be6 	.word	0x00025be6
    49cc:	00025c14 	.word	0x00025c14
    49d0:	00025c32 	.word	0x00025c32
    49d4:	200001dc 	.word	0x200001dc
    49d8:	00025c46 	.word	0x00025c46
    49dc:	200016d4 	.word	0x200016d4
    49e0:	00025c55 	.word	0x00025c55
    49e4:	00025c64 	.word	0x00025c64
    49e8:	00025c73 	.word	0x00025c73
    49ec:	00025c9b 	.word	0x00025c9b
    49f0:	00025c84 	.word	0x00025c84
    49f4:	20002fa6 	.word	0x20002fa6
    49f8:	00025c01 	.word	0x00025c01

000049fc <loop_command_cb>:
{	
    49fc:	b530      	push	{r4, r5, lr}
    49fe:	4614      	mov	r4, r2
	printk("at loop c callback...\n");
    4a00:	4821      	ldr	r0, [pc, #132]	; (4a88 <loop_command_cb+0x8c>)
{	
    4a02:	b089      	sub	sp, #36	; 0x24
    4a04:	461d      	mov	r5, r3
	printk("at loop c callback...\n");
    4a06:	f019 ff89 	bl	1e91c <printk>
	if(*pc == '!') {						// set number of loops in explore mode
    4a0a:	7823      	ldrb	r3, [r4, #0]
    4a0c:	2b21      	cmp	r3, #33	; 0x21
    4a0e:	d107      	bne.n	4a20 <loop_command_cb+0x24>
		uint16_t i = atoi(pc);
    4a10:	1c60      	adds	r0, r4, #1
    4a12:	f01f f8e2 	bl	23bda <atoi>
		number_of_messages = i;						
    4a16:	4b1d      	ldr	r3, [pc, #116]	; (4a8c <loop_command_cb+0x90>)
		uint16_t i = atoi(pc);
    4a18:	8018      	strh	r0, [r3, #0]
}
    4a1a:	2000      	movs	r0, #0
    4a1c:	b009      	add	sp, #36	; 0x24
    4a1e:	bd30      	pop	{r4, r5, pc}
	} else if (*pc == '#') {				// set the time between messages
    4a20:	2b23      	cmp	r3, #35	; 0x23
    4a22:	d105      	bne.n	4a30 <loop_command_cb+0x34>
		uint16_t i = atoi(pc);
    4a24:	1c60      	adds	r0, r4, #1
    4a26:	f01f f8d8 	bl	23bda <atoi>
		time_between_msgs = i;
    4a2a:	4b19      	ldr	r3, [pc, #100]	; (4a90 <loop_command_cb+0x94>)
    4a2c:	7018      	strb	r0, [r3, #0]
    4a2e:	e7f4      	b.n	4a1a <loop_command_cb+0x1e>
	} else if(*pc == '$') {
    4a30:	2b24      	cmp	r3, #36	; 0x24
    4a32:	d109      	bne.n	4a48 <loop_command_cb+0x4c>
		if(thread0_tid != NULL) {
    4a34:	4b17      	ldr	r3, [pc, #92]	; (4a94 <loop_command_cb+0x98>)
    4a36:	6818      	ldr	r0, [r3, #0]
    4a38:	2800      	cmp	r0, #0
    4a3a:	d0ee      	beq.n	4a1a <loop_command_cb+0x1e>
	z_impl_k_thread_abort(thread);
    4a3c:	f001 fb24 	bl	6088 <z_impl_k_thread_abort>
			printk("loop thread canceled\n");
    4a40:	4815      	ldr	r0, [pc, #84]	; (4a98 <loop_command_cb+0x9c>)
    4a42:	f019 ff6b 	bl	1e91c <printk>
    4a46:	e7e8      	b.n	4a1a <loop_command_cb+0x1e>
		loop_data_length = len;
    4a48:	4b14      	ldr	r3, [pc, #80]	; (4a9c <loop_command_cb+0xa0>)
    4a4a:	801d      	strh	r5, [r3, #0]
		for(uint16_t i = 0; i < len; i++) {
    4a4c:	4b14      	ldr	r3, [pc, #80]	; (4aa0 <loop_command_cb+0xa4>)
    4a4e:	4425      	add	r5, r4
    4a50:	42ac      	cmp	r4, r5
    4a52:	d114      	bne.n	4a7e <loop_command_cb+0x82>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    4a54:	2200      	movs	r2, #0
    4a56:	2300      	movs	r3, #0
    4a58:	e9cd 2306 	strd	r2, r3, [sp, #24]
    4a5c:	2300      	movs	r3, #0
    4a5e:	2205      	movs	r2, #5
    4a60:	e9cd 2303 	strd	r2, r3, [sp, #12]
    4a64:	e9cd 3301 	strd	r3, r3, [sp, #4]
    4a68:	9300      	str	r3, [sp, #0]
    4a6a:	490e      	ldr	r1, [pc, #56]	; (4aa4 <loop_command_cb+0xa8>)
    4a6c:	4b0e      	ldr	r3, [pc, #56]	; (4aa8 <loop_command_cb+0xac>)
    4a6e:	480f      	ldr	r0, [pc, #60]	; (4aac <loop_command_cb+0xb0>)
    4a70:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    4a74:	f019 f934 	bl	1dce0 <z_impl_k_thread_create>
		thread0_tid = k_thread_create(&thread_data0, stack_area0,
    4a78:	4b06      	ldr	r3, [pc, #24]	; (4a94 <loop_command_cb+0x98>)
    4a7a:	6018      	str	r0, [r3, #0]
    4a7c:	e7cd      	b.n	4a1a <loop_command_cb+0x1e>
			loop_data[i] = *pc;
    4a7e:	f814 2b01 	ldrb.w	r2, [r4], #1
    4a82:	f803 2b01 	strb.w	r2, [r3], #1
		for(uint16_t i = 0; i < len; i++) {
    4a86:	e7e3      	b.n	4a50 <loop_command_cb+0x54>
    4a88:	00025cb9 	.word	0x00025cb9
    4a8c:	20002e56 	.word	0x20002e56
    4a90:	2000306e 	.word	0x2000306e
    4a94:	200016e0 	.word	0x200016e0
    4a98:	00025cd0 	.word	0x00025cd0
    4a9c:	20002e54 	.word	0x20002e54
    4aa0:	20002e92 	.word	0x20002e92
    4aa4:	200041e0 	.word	0x200041e0
    4aa8:	00004571 	.word	0x00004571
    4aac:	20000b38 	.word	0x20000b38

00004ab0 <change_config>:
void change_config(uint8_t* pu, bool tx) {
    4ab0:	b570      	push	{r4, r5, r6, lr}
	config.frequency = frequencies[*pu];
    4ab2:	4b1e      	ldr	r3, [pc, #120]	; (4b2c <change_config+0x7c>)
    4ab4:	7802      	ldrb	r2, [r0, #0]
    4ab6:	4d1e      	ldr	r5, [pc, #120]	; (4b30 <change_config+0x80>)
    4ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4abc:	602b      	str	r3, [r5, #0]
void change_config(uint8_t* pu, bool tx) {
    4abe:	4604      	mov	r4, r0
    4ac0:	460e      	mov	r6, r1
	printk("fr data %d\n", *pu);
    4ac2:	7801      	ldrb	r1, [r0, #0]
    4ac4:	481b      	ldr	r0, [pc, #108]	; (4b34 <change_config+0x84>)
    4ac6:	f019 ff29 	bl	1e91c <printk>
	config.bandwidth = *pu;
    4aca:	7861      	ldrb	r1, [r4, #1]
	printk("bw data %d\n", *pu);
    4acc:	481a      	ldr	r0, [pc, #104]	; (4b38 <change_config+0x88>)
	config.bandwidth = *pu;
    4ace:	7129      	strb	r1, [r5, #4]
	printk("bw data %d\n", *pu);
    4ad0:	f019 ff24 	bl	1e91c <printk>
	config.datarate = *pu + 7;
    4ad4:	78a3      	ldrb	r3, [r4, #2]
	printk("sf data %d\n", *pu);
    4ad6:	4819      	ldr	r0, [pc, #100]	; (4b3c <change_config+0x8c>)
	config.datarate = *pu + 7;
    4ad8:	3307      	adds	r3, #7
    4ada:	716b      	strb	r3, [r5, #5]
	printk("sf data %d\n", *pu);
    4adc:	78a1      	ldrb	r1, [r4, #2]
    4ade:	f019 ff1d 	bl	1e91c <printk>
	config.preamble_len = 8;
    4ae2:	2308      	movs	r3, #8
    4ae4:	812b      	strh	r3, [r5, #8]
	config.coding_rate = *pu + 1;
    4ae6:	78e3      	ldrb	r3, [r4, #3]
	printk("cr data %d\n", *pu);
    4ae8:	4815      	ldr	r0, [pc, #84]	; (4b40 <change_config+0x90>)
	config.coding_rate = *pu + 1;
    4aea:	3301      	adds	r3, #1
    4aec:	71ab      	strb	r3, [r5, #6]
	printk("cr data %d\n", *pu);
    4aee:	78e1      	ldrb	r1, [r4, #3]
    4af0:	f019 ff14 	bl	1e91c <printk>
	config.tx_power = *pu + 5;
    4af4:	7923      	ldrb	r3, [r4, #4]
	printk("pw data %d\n", *pu);
    4af6:	4813      	ldr	r0, [pc, #76]	; (4b44 <change_config+0x94>)
	config.tx_power = *pu + 5;
    4af8:	3305      	adds	r3, #5
    4afa:	72ab      	strb	r3, [r5, #10]
	printk("pw data %d\n", *pu);
    4afc:	7921      	ldrb	r1, [r4, #4]
    4afe:	f019 ff0d 	bl	1e91c <printk>
	config.tx = tx;
    4b02:	72ee      	strb	r6, [r5, #11]
    4b04:	4810      	ldr	r0, [pc, #64]	; (4b48 <change_config+0x98>)
    4b06:	f018 f9eb 	bl	1cee0 <z_impl_device_get_binding>
	ret = lora_config(lora_dev, &config);
    4b0a:	f7ff fd2b 	bl	4564 <lora_config.constprop.0>
	if (ret < 0) {
    4b0e:	2800      	cmp	r0, #0
    4b10:	da0b      	bge.n	4b2a <change_config+0x7a>
    4b12:	490e      	ldr	r1, [pc, #56]	; (4b4c <change_config+0x9c>)
    4b14:	4b0e      	ldr	r3, [pc, #56]	; (4b50 <change_config+0xa0>)
		LOG_ERR("LoRa config failed");
    4b16:	480f      	ldr	r0, [pc, #60]	; (4b54 <change_config+0xa4>)
    4b18:	1ac9      	subs	r1, r1, r3
    4b1a:	08c9      	lsrs	r1, r1, #3
    4b1c:	0189      	lsls	r1, r1, #6
}
    4b1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		LOG_ERR("LoRa config failed");
    4b22:	f041 0101 	orr.w	r1, r1, #1
    4b26:	f01a bad3 	b.w	1f0d0 <log_0>
}
    4b2a:	bd70      	pop	{r4, r5, r6, pc}
    4b2c:	200001dc 	.word	0x200001dc
    4b30:	200016d4 	.word	0x200016d4
    4b34:	00025ce6 	.word	0x00025ce6
    4b38:	00025cf2 	.word	0x00025cf2
    4b3c:	00025cfe 	.word	0x00025cfe
    4b40:	00025d0a 	.word	0x00025d0a
    4b44:	00025d16 	.word	0x00025d16
    4b48:	00025be6 	.word	0x00025be6
    4b4c:	00024000 	.word	0x00024000
    4b50:	00023ed8 	.word	0x00023ed8
    4b54:	00025d22 	.word	0x00025d22

00004b58 <bt_lses_notify>:
	return 0;
}

// notify phone about anything (currently only distinguishable in type of message (and only used for -2 = config changed))
int bt_lses_notify(int8_t type_of_notification)
{
    4b58:	b510      	push	{r4, lr}
	int rc;
	static int8_t notifier[1];
	notifier[0] = type_of_notification;
    4b5a:	4c0c      	ldr	r4, [pc, #48]	; (4b8c <bt_lses_notify+0x34>)
{
    4b5c:	b086      	sub	sp, #24
	notifier[0] = type_of_notification;
    4b5e:	7020      	strb	r0, [r4, #0]
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
    4b60:	2218      	movs	r2, #24
    4b62:	2100      	movs	r1, #0
    4b64:	4668      	mov	r0, sp
    4b66:	f01f f858 	bl	23c1a <memset>

	params.attr = attr;
    4b6a:	4b09      	ldr	r3, [pc, #36]	; (4b90 <bt_lses_notify+0x38>)
	params.data = data;
	params.len = len;

	return bt_gatt_notify_cb(conn, &params);
    4b6c:	4669      	mov	r1, sp
	params.data = data;
    4b6e:	e9cd 3401 	strd	r3, r4, [sp, #4]
	return bt_gatt_notify_cb(conn, &params);
    4b72:	2000      	movs	r0, #0
	params.len = len;
    4b74:	2301      	movs	r3, #1
    4b76:	f8ad 300c 	strh.w	r3, [sp, #12]
	return bt_gatt_notify_cb(conn, &params);
    4b7a:	f006 fb85 	bl	b288 <bt_gatt_notify_cb>

	rc = bt_gatt_notify(NULL, &lses_svc.attrs[1], &notifier, sizeof(notifier));
	return rc == -ENOTCONN ? 0 : rc;
}
    4b7e:	f110 0f80 	cmn.w	r0, #128	; 0x80
    4b82:	bf08      	it	eq
    4b84:	2000      	moveq	r0, #0
    4b86:	b006      	add	sp, #24
    4b88:	bd10      	pop	{r4, pc}
    4b8a:	bf00      	nop
    4b8c:	20002f91 	.word	0x20002f91
    4b90:	00024268 	.word	0x00024268

00004b94 <wait_for_ping_return>:
void wait_for_ping_return(void *a, void *b, void *c) {
    4b94:	b570      	push	{r4, r5, r6, lr}
    4b96:	b08a      	sub	sp, #40	; 0x28
    4b98:	4828      	ldr	r0, [pc, #160]	; (4c3c <wait_for_ping_return+0xa8>)
	config.tx = false;
    4b9a:	4e29      	ldr	r6, [pc, #164]	; (4c40 <wait_for_ping_return+0xac>)
    4b9c:	f018 f9a0 	bl	1cee0 <z_impl_device_get_binding>
    4ba0:	2500      	movs	r5, #0
    4ba2:	4604      	mov	r4, r0
    4ba4:	72f5      	strb	r5, [r6, #11]
	lora_config(lora_dev, &config);						
    4ba6:	f7ff fcdd 	bl	4564 <lora_config.constprop.0>
	char resp[MAX_DATA_LEN] = {0};
    4baa:	4629      	mov	r1, r5
    4bac:	2210      	movs	r2, #16
    4bae:	a806      	add	r0, sp, #24
    4bb0:	9505      	str	r5, [sp, #20]
    4bb2:	f01f f832 	bl	23c1a <memset>
    4bb6:	f44f 30c0 	mov.w	r0, #98304	; 0x18000
    4bba:	2100      	movs	r1, #0
    4bbc:	68a3      	ldr	r3, [r4, #8]
    4bbe:	f10d 0211 	add.w	r2, sp, #17
    4bc2:	e9cd 0100 	strd	r0, r1, [sp]
    4bc6:	9203      	str	r2, [sp, #12]
    4bc8:	f10d 0212 	add.w	r2, sp, #18
    4bcc:	9202      	str	r2, [sp, #8]
    4bce:	2214      	movs	r2, #20
    4bd0:	eb0d 0102 	add.w	r1, sp, r2
    4bd4:	689b      	ldr	r3, [r3, #8]
    4bd6:	4620      	mov	r0, r4
    4bd8:	4798      	blx	r3
	printk("content: %s\n", ping_content);
    4bda:	491a      	ldr	r1, [pc, #104]	; (4c44 <wait_for_ping_return+0xb0>)
    4bdc:	4605      	mov	r5, r0
    4bde:	481a      	ldr	r0, [pc, #104]	; (4c48 <wait_for_ping_return+0xb4>)
    4be0:	f019 fe9c 	bl	1e91c <printk>
	printk("resp %s\n", resp);
    4be4:	4819      	ldr	r0, [pc, #100]	; (4c4c <wait_for_ping_return+0xb8>)
    4be6:	a905      	add	r1, sp, #20
    4be8:	f019 fe98 	bl	1e91c <printk>
	if (l < 0) {
    4bec:	2d00      	cmp	r5, #0
    4bee:	da10      	bge.n	4c12 <wait_for_ping_return+0x7e>
    4bf0:	4917      	ldr	r1, [pc, #92]	; (4c50 <wait_for_ping_return+0xbc>)
    4bf2:	4b18      	ldr	r3, [pc, #96]	; (4c54 <wait_for_ping_return+0xc0>)
		LOG_ERR("no response received");	
    4bf4:	4818      	ldr	r0, [pc, #96]	; (4c58 <wait_for_ping_return+0xc4>)
    4bf6:	1ac9      	subs	r1, r1, r3
    4bf8:	08c9      	lsrs	r1, r1, #3
    4bfa:	0189      	lsls	r1, r1, #6
    4bfc:	f041 0101 	orr.w	r1, r1, #1
    4c00:	f01a fa66 	bl	1f0d0 <log_0>
	config.tx = true;
    4c04:	2301      	movs	r3, #1
	lora_config(lora_dev, &config);	
    4c06:	4620      	mov	r0, r4
	config.tx = true;
    4c08:	72f3      	strb	r3, [r6, #11]
	lora_config(lora_dev, &config);	
    4c0a:	f7ff fcab 	bl	4564 <lora_config.constprop.0>
}
    4c0e:	b00a      	add	sp, #40	; 0x28
    4c10:	bd70      	pop	{r4, r5, r6, pc}
		if(memcmp(ping_content, resp, ping_len * sizeof(uint8_t)) == 0) {
    4c12:	4b12      	ldr	r3, [pc, #72]	; (4c5c <wait_for_ping_return+0xc8>)
    4c14:	480b      	ldr	r0, [pc, #44]	; (4c44 <wait_for_ping_return+0xb0>)
    4c16:	881a      	ldrh	r2, [r3, #0]
    4c18:	a905      	add	r1, sp, #20
    4c1a:	f01e ffe2 	bl	23be2 <memcmp>
    4c1e:	b938      	cbnz	r0, 4c30 <wait_for_ping_return+0x9c>
			printk("ping is okay\n");
    4c20:	480f      	ldr	r0, [pc, #60]	; (4c60 <wait_for_ping_return+0xcc>)
    4c22:	f019 fe7b 	bl	1e91c <printk>
			bt_lses_notify(-3);									// check if received ping exactly matches sent ping
    4c26:	f06f 0002 	mvn.w	r0, #2
			bt_lses_notify(-4);	
    4c2a:	f7ff ff95 	bl	4b58 <bt_lses_notify>
    4c2e:	e7e9      	b.n	4c04 <wait_for_ping_return+0x70>
			printk("ping does not match\n");	
    4c30:	480c      	ldr	r0, [pc, #48]	; (4c64 <wait_for_ping_return+0xd0>)
    4c32:	f019 fe73 	bl	1e91c <printk>
			bt_lses_notify(-4);	
    4c36:	f06f 0003 	mvn.w	r0, #3
    4c3a:	e7f6      	b.n	4c2a <wait_for_ping_return+0x96>
    4c3c:	00025be6 	.word	0x00025be6
    4c40:	200016d4 	.word	0x200016d4
    4c44:	20002f92 	.word	0x20002f92
    4c48:	00025d35 	.word	0x00025d35
    4c4c:	00025d42 	.word	0x00025d42
    4c50:	00024000 	.word	0x00024000
    4c54:	00023ed8 	.word	0x00023ed8
    4c58:	00025d4b 	.word	0x00025d4b
    4c5c:	20002e5a 	.word	0x20002e5a
    4c60:	00025d60 	.word	0x00025d60
    4c64:	00025d6e 	.word	0x00025d6e

00004c68 <prepare_sender_cb>:
{
    4c68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	printk("in cb\n");
    4c6c:	4836      	ldr	r0, [pc, #216]	; (4d48 <prepare_sender_cb+0xe0>)
    4c6e:	4e37      	ldr	r6, [pc, #220]	; (4d4c <prepare_sender_cb+0xe4>)
    4c70:	4f37      	ldr	r7, [pc, #220]	; (4d50 <prepare_sender_cb+0xe8>)
{
    4c72:	461d      	mov	r5, r3
    4c74:	b089      	sub	sp, #36	; 0x24
    4c76:	4614      	mov	r4, r2
	printk("in cb\n");
    4c78:	f019 fe50 	bl	1e91c <printk>
	if(len == 20) {
    4c7c:	2d14      	cmp	r5, #20
    4c7e:	d119      	bne.n	4cb4 <prepare_sender_cb+0x4c>
		printk("in len = 20  pi: %d\n", payload_index);
    4c80:	8831      	ldrh	r1, [r6, #0]
    4c82:	4834      	ldr	r0, [pc, #208]	; (4d54 <prepare_sender_cb+0xec>)
			printk("x: %d", *pc);
    4c84:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 4d78 <prepare_sender_cb+0x110>
		printk("in len = 20  pi: %d\n", payload_index);
    4c88:	f019 fe48 	bl	1e91c <printk>
		for(uint8_t i = 0; i < 20;i++) {
    4c8c:	f104 0514 	add.w	r5, r4, #20
			random_d[payload_index] = *pc;
    4c90:	8833      	ldrh	r3, [r6, #0]
    4c92:	7822      	ldrb	r2, [r4, #0]
    4c94:	54fa      	strb	r2, [r7, r3]
			printk("x: %d", *pc);
    4c96:	4640      	mov	r0, r8
    4c98:	f814 1b01 	ldrb.w	r1, [r4], #1
    4c9c:	f019 fe3e 	bl	1e91c <printk>
			payload_index++;
    4ca0:	8833      	ldrh	r3, [r6, #0]
		for(uint8_t i = 0; i < 20;i++) {
    4ca2:	42ac      	cmp	r4, r5
			payload_index++;
    4ca4:	f103 0301 	add.w	r3, r3, #1
    4ca8:	8033      	strh	r3, [r6, #0]
		for(uint8_t i = 0; i < 20;i++) {
    4caa:	d1f1      	bne.n	4c90 <prepare_sender_cb+0x28>
}
    4cac:	2000      	movs	r0, #0
    4cae:	b009      	add	sp, #36	; 0x24
    4cb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	payload_index = 0;
    4cb4:	2300      	movs	r3, #0
		printk(", %d", random_d[i]);
    4cb6:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 4d7c <prepare_sender_cb+0x114>
	payload_index = 0;
    4cba:	8033      	strh	r3, [r6, #0]
	for(int16_t i = 0; i < 5; i++) {
    4cbc:	46b8      	mov	r8, r7
	payload_index = 0;
    4cbe:	2605      	movs	r6, #5
		printk(", %d", random_d[i]);
    4cc0:	3e01      	subs	r6, #1
    4cc2:	f818 1b01 	ldrb.w	r1, [r8], #1
    4cc6:	4648      	mov	r0, r9
    4cc8:	b2b6      	uxth	r6, r6
    4cca:	f019 fe27 	bl	1e91c <printk>
	for(int16_t i = 0; i < 5; i++) {
    4cce:	2e00      	cmp	r6, #0
    4cd0:	d1f6      	bne.n	4cc0 <prepare_sender_cb+0x58>
		printk(", %d", random_d[i]);
    4cd2:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 4d7c <prepare_sender_cb+0x114>
    4cd6:	26be      	movs	r6, #190	; 0xbe
    4cd8:	5db9      	ldrb	r1, [r7, r6]
    4cda:	4640      	mov	r0, r8
    4cdc:	3601      	adds	r6, #1
    4cde:	f019 fe1d 	bl	1e91c <printk>
	for(int16_t i = 190; i < 196; i++) {
    4ce2:	2ec4      	cmp	r6, #196	; 0xc4
    4ce4:	d1f8      	bne.n	4cd8 <prepare_sender_cb+0x70>
    4ce6:	481c      	ldr	r0, [pc, #112]	; (4d58 <prepare_sender_cb+0xf0>)
    4ce8:	4e1c      	ldr	r6, [pc, #112]	; (4d5c <prepare_sender_cb+0xf4>)
    4cea:	f018 f8f9 	bl	1cee0 <z_impl_device_get_binding>
	if(len == 1) {									// an already prepared sender is supposed to be canceled
    4cee:	2d01      	cmp	r5, #1
    4cf0:	d10c      	bne.n	4d0c <prepare_sender_cb+0xa4>
		config.tx = true;
    4cf2:	4b1b      	ldr	r3, [pc, #108]	; (4d60 <prepare_sender_cb+0xf8>)
    4cf4:	72dd      	strb	r5, [r3, #11]
		lora_config(lora_dev, &config);
    4cf6:	f7ff fc35 	bl	4564 <lora_config.constprop.0>
		if(thread1_tid != NULL) {
    4cfa:	6830      	ldr	r0, [r6, #0]
    4cfc:	2800      	cmp	r0, #0
    4cfe:	d0d5      	beq.n	4cac <prepare_sender_cb+0x44>
	z_impl_k_thread_abort(thread);
    4d00:	f001 f9c2 	bl	6088 <z_impl_k_thread_abort>
			printk("thread canceled\n");
    4d04:	4817      	ldr	r0, [pc, #92]	; (4d64 <prepare_sender_cb+0xfc>)
	printk("sender ready\n");
    4d06:	f019 fe09 	bl	1e91c <printk>
	return 0;
    4d0a:	e7cf      	b.n	4cac <prepare_sender_cb+0x44>
	change_config(pc, false);
    4d0c:	2100      	movs	r1, #0
    4d0e:	4620      	mov	r0, r4
    4d10:	f7ff fece 	bl	4ab0 <change_config>
	bt_lses_notify(-2);
    4d14:	f06f 0001 	mvn.w	r0, #1
    4d18:	f7ff ff1e 	bl	4b58 <bt_lses_notify>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    4d1c:	2200      	movs	r2, #0
    4d1e:	2300      	movs	r3, #0
    4d20:	e9cd 2306 	strd	r2, r3, [sp, #24]
    4d24:	2300      	movs	r3, #0
    4d26:	2205      	movs	r2, #5
    4d28:	e9cd 2303 	strd	r2, r3, [sp, #12]
    4d2c:	e9cd 3301 	strd	r3, r3, [sp, #4]
    4d30:	9300      	str	r3, [sp, #0]
    4d32:	490d      	ldr	r1, [pc, #52]	; (4d68 <prepare_sender_cb+0x100>)
    4d34:	4b0d      	ldr	r3, [pc, #52]	; (4d6c <prepare_sender_cb+0x104>)
    4d36:	480e      	ldr	r0, [pc, #56]	; (4d70 <prepare_sender_cb+0x108>)
    4d38:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    4d3c:	f018 ffd0 	bl	1dce0 <z_impl_k_thread_create>
	thread1_tid = k_thread_create(&thread_data1, stack_area1,
    4d40:	6030      	str	r0, [r6, #0]
	printk("sender ready\n");
    4d42:	480c      	ldr	r0, [pc, #48]	; (4d74 <prepare_sender_cb+0x10c>)
    4d44:	e7df      	b.n	4d06 <prepare_sender_cb+0x9e>
    4d46:	bf00      	nop
    4d48:	00025d83 	.word	0x00025d83
    4d4c:	20002e58 	.word	0x20002e58
    4d50:	20002fa6 	.word	0x20002fa6
    4d54:	00025d8a 	.word	0x00025d8a
    4d58:	00025be6 	.word	0x00025be6
    4d5c:	200016e4 	.word	0x200016e4
    4d60:	200016d4 	.word	0x200016d4
    4d64:	00025cd5 	.word	0x00025cd5
    4d68:	200081e0 	.word	0x200081e0
    4d6c:	000046d9 	.word	0x000046d9
    4d70:	20000bb8 	.word	0x20000bb8
    4d74:	00025daa 	.word	0x00025daa
    4d78:	00025d9f 	.word	0x00025d9f
    4d7c:	00025da5 	.word	0x00025da5

00004d80 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    4d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4d82:	4605      	mov	r5, r0
	__asm__ volatile(
    4d84:	f04f 0320 	mov.w	r3, #32
    4d88:	f3ef 8611 	mrs	r6, BASEPRI
    4d8c:	f383 8811 	msr	BASEPRI, r3
    4d90:	f3bf 8f6f 	isb	sy
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    4d94:	4b0b      	ldr	r3, [pc, #44]	; (4dc4 <pm_state_notify+0x44>)
    4d96:	681c      	ldr	r4, [r3, #0]
    4d98:	2c00      	cmp	r4, #0
    4d9a:	bf38      	it	cc
    4d9c:	2400      	movcc	r4, #0
    4d9e:	b15c      	cbz	r4, 4db8 <pm_state_notify+0x38>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
    4da0:	4f09      	ldr	r7, [pc, #36]	; (4dc8 <pm_state_notify+0x48>)
			callback = notifier->state_exit;
    4da2:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    4da6:	2d00      	cmp	r5, #0
    4da8:	bf08      	it	eq
    4daa:	4613      	moveq	r3, r2
		if (callback) {
    4dac:	b10b      	cbz	r3, 4db2 <pm_state_notify+0x32>
			callback(z_power_state.state);
    4dae:	7838      	ldrb	r0, [r7, #0]
    4db0:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    4db2:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    4db4:	2c00      	cmp	r4, #0
    4db6:	d1f4      	bne.n	4da2 <pm_state_notify+0x22>
	__asm__ volatile(
    4db8:	f386 8811 	msr	BASEPRI, r6
    4dbc:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    4dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4dc2:	bf00      	nop
    4dc4:	200016e8 	.word	0x200016e8
    4dc8:	200016f0 	.word	0x200016f0

00004dcc <pm_system_resume>:
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
    4dcc:	4b08      	ldr	r3, [pc, #32]	; (4df0 <pm_system_resume+0x24>)
{
    4dce:	b510      	push	{r4, lr}
	if (!post_ops_done) {
    4dd0:	681c      	ldr	r4, [r3, #0]
    4dd2:	b95c      	cbnz	r4, 4dec <pm_system_resume+0x20>
		post_ops_done = 1;
    4dd4:	2201      	movs	r2, #1
    4dd6:	601a      	str	r2, [r3, #0]
		pm_power_state_exit_post_ops(z_power_state);
    4dd8:	4b06      	ldr	r3, [pc, #24]	; (4df4 <pm_system_resume+0x28>)
    4dda:	e893 0003 	ldmia.w	r3, {r0, r1}
    4dde:	f01b fed6 	bl	20b8e <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    4de2:	4620      	mov	r0, r4
	}
}
    4de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pm_state_notify(false);
    4de8:	f7ff bfca 	b.w	4d80 <pm_state_notify>
}
    4dec:	bd10      	pop	{r4, pc}
    4dee:	bf00      	nop
    4df0:	200001fc 	.word	0x200001fc
    4df4:	200016f0 	.word	0x200016f0

00004df8 <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
    4df8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	z_power_state = pm_policy_next_state(ticks);
    4dfa:	466d      	mov	r5, sp
{
    4dfc:	4601      	mov	r1, r0
	z_power_state = pm_policy_next_state(ticks);
    4dfe:	4628      	mov	r0, r5
    4e00:	f01a fce2 	bl	1f7c8 <pm_policy_next_state>
    4e04:	e895 0003 	ldmia.w	r5, {r0, r1}
    4e08:	4c0b      	ldr	r4, [pc, #44]	; (4e38 <pm_system_suspend+0x40>)
    4e0a:	e884 0003 	stmia.w	r4, {r0, r1}
	if (z_power_state.state == PM_STATE_ACTIVE) {
    4e0e:	7820      	ldrb	r0, [r4, #0]
    4e10:	b180      	cbz	r0, 4e34 <pm_system_suspend+0x3c>
		LOG_DBG("No PM operations done.");
		return z_power_state.state;
	}
	post_ops_done = 0;
    4e12:	4b0a      	ldr	r3, [pc, #40]	; (4e3c <pm_system_suspend+0x44>)
    4e14:	2200      	movs	r2, #0
    4e16:	601a      	str	r2, [r3, #0]
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    4e18:	f018 fba0 	bl	1d55c <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
    4e1c:	2001      	movs	r0, #1
    4e1e:	f7ff ffaf 	bl	4d80 <pm_state_notify>
	pm_power_state_set(z_power_state);
    4e22:	e894 0003 	ldmia.w	r4, {r0, r1}
    4e26:	f01b fe9f 	bl	20b68 <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
    4e2a:	f7ff ffcf 	bl	4dcc <pm_system_resume>
	k_sched_unlock();
    4e2e:	f018 fc85 	bl	1d73c <k_sched_unlock>

	return z_power_state.state;
    4e32:	7820      	ldrb	r0, [r4, #0]
}
    4e34:	b003      	add	sp, #12
    4e36:	bd30      	pop	{r4, r5, pc}
    4e38:	200016f0 	.word	0x200016f0
    4e3c:	200001fc 	.word	0x200001fc

00004e40 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
    4e40:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    4e42:	4c04      	ldr	r4, [pc, #16]	; (4e54 <rtt_console_init+0x14>)
    4e44:	4620      	mov	r0, r4
    4e46:	f7fe f8c9 	bl	2fdc <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    4e4a:	4620      	mov	r0, r4
    4e4c:	f001 f9e0 	bl	6210 <__stdout_hook_install>

	return 0;
}
    4e50:	2000      	movs	r0, #0
    4e52:	bd10      	pop	{r4, pc}
    4e54:	00004e59 	.word	0x00004e59

00004e58 <rtt_console_out>:
{
    4e58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
    4e5c:	f8df 8060 	ldr.w	r8, [pc, #96]	; 4ec0 <rtt_console_out+0x68>
    4e60:	4e16      	ldr	r6, [pc, #88]	; (4ebc <rtt_console_out+0x64>)
	char c = (char)character;
    4e62:	f88d 0007 	strb.w	r0, [sp, #7]
{
    4e66:	4604      	mov	r4, r0
	char c = (char)character;
    4e68:	2503      	movs	r5, #3
    4e6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4e6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4e72:	4640      	mov	r0, r8
    4e74:	f018 fa26 	bl	1d2c4 <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    4e78:	2201      	movs	r2, #1
    4e7a:	f10d 0107 	add.w	r1, sp, #7
    4e7e:	2000      	movs	r0, #0
    4e80:	f000 fb72 	bl	5568 <SEGGER_RTT_WriteNoLock>
    4e84:	4607      	mov	r7, r0
	return z_impl_k_mutex_unlock(mutex);
    4e86:	4640      	mov	r0, r8
    4e88:	f018 fa94 	bl	1d3b4 <z_impl_k_mutex_unlock>
		if (cnt) {
    4e8c:	b12f      	cbz	r7, 4e9a <rtt_console_out+0x42>
			host_present = true;
    4e8e:	2301      	movs	r3, #1
    4e90:	7033      	strb	r3, [r6, #0]
}
    4e92:	4620      	mov	r0, r4
    4e94:	b002      	add	sp, #8
    4e96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
    4e9a:	7833      	ldrb	r3, [r6, #0]
    4e9c:	2b00      	cmp	r3, #0
    4e9e:	d0f8      	beq.n	4e92 <rtt_console_out+0x3a>
			if (max_cnt) {
    4ea0:	3d01      	subs	r5, #1
    4ea2:	d008      	beq.n	4eb6 <rtt_console_out+0x5e>
	if (k_is_in_isr()) {
    4ea4:	f01e fbed 	bl	23682 <k_is_in_isr>
    4ea8:	2800      	cmp	r0, #0
    4eaa:	d1de      	bne.n	4e6a <rtt_console_out+0x12>
	return z_impl_k_sleep(timeout);
    4eac:	2100      	movs	r1, #0
    4eae:	2042      	movs	r0, #66	; 0x42
    4eb0:	f018 fde0 	bl	1da74 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
    4eb4:	e7d9      	b.n	4e6a <rtt_console_out+0x12>
				host_present = false;
    4eb6:	7035      	strb	r5, [r6, #0]
    4eb8:	e7eb      	b.n	4e92 <rtt_console_out+0x3a>
    4eba:	bf00      	nop
    4ebc:	2000306f 	.word	0x2000306f
    4ec0:	200008ec 	.word	0x200008ec

00004ec4 <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    4ec4:	b570      	push	{r4, r5, r6, lr}
    4ec6:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
    4ec8:	480d      	ldr	r0, [pc, #52]	; (4f00 <onoff_stop+0x3c>)
    4eca:	1a23      	subs	r3, r4, r0
    4ecc:	109a      	asrs	r2, r3, #2
    4ece:	4b0d      	ldr	r3, [pc, #52]	; (4f04 <onoff_stop+0x40>)
    4ed0:	4353      	muls	r3, r2
    4ed2:	b2db      	uxtb	r3, r3
	err = set_off_state(&subdata->flags, ctx);
    4ed4:	250c      	movs	r5, #12
    4ed6:	435d      	muls	r5, r3
    4ed8:	f105 0340 	add.w	r3, r5, #64	; 0x40
{
    4edc:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
    4ede:	4418      	add	r0, r3
    4ee0:	2140      	movs	r1, #64	; 0x40
    4ee2:	f01a fc7e 	bl	1f7e2 <set_off_state>
	if (err < 0) {
    4ee6:	1e01      	subs	r1, r0, #0
    4ee8:	db04      	blt.n	4ef4 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
    4eea:	4b07      	ldr	r3, [pc, #28]	; (4f08 <onoff_stop+0x44>)
    4eec:	442b      	add	r3, r5
    4eee:	685b      	ldr	r3, [r3, #4]
    4ef0:	4798      	blx	r3
	return 0;
    4ef2:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
    4ef4:	4620      	mov	r0, r4
    4ef6:	4633      	mov	r3, r6
}
    4ef8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    4efc:	4718      	bx	r3
    4efe:	bf00      	nop
    4f00:	2000170c 	.word	0x2000170c
    4f04:	b6db6db7 	.word	0xb6db6db7
    4f08:	00024358 	.word	0x00024358

00004f0c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    4f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    4f10:	4c0f      	ldr	r4, [pc, #60]	; (4f50 <onoff_start+0x44>)
    4f12:	4d10      	ldr	r5, [pc, #64]	; (4f54 <onoff_start+0x48>)
    4f14:	1b03      	subs	r3, r0, r4
    4f16:	109b      	asrs	r3, r3, #2
    4f18:	435d      	muls	r5, r3
    4f1a:	b2eb      	uxtb	r3, r5
	err = set_starting_state(&subdata->flags, ctx);
    4f1c:	250c      	movs	r5, #12
    4f1e:	435d      	muls	r5, r3
{
    4f20:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
    4f22:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
    4f26:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
    4f28:	4420      	add	r0, r4
    4f2a:	2140      	movs	r1, #64	; 0x40
    4f2c:	f01a fc72 	bl	1f814 <set_starting_state>
	if (err < 0) {
    4f30:	1e01      	subs	r1, r0, #0
    4f32:	db08      	blt.n	4f46 <onoff_start+0x3a>
	subdata->cb = cb;
    4f34:	4b08      	ldr	r3, [pc, #32]	; (4f58 <onoff_start+0x4c>)
    4f36:	442c      	add	r4, r5
	subdata->user_data = user_data;
    4f38:	e9c4 360e 	strd	r3, r6, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    4f3c:	4b07      	ldr	r3, [pc, #28]	; (4f5c <onoff_start+0x50>)
    4f3e:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    4f40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    4f44:	4718      	bx	r3
		notify(mgr, err);
    4f46:	4638      	mov	r0, r7
    4f48:	4633      	mov	r3, r6
}
    4f4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    4f4e:	4718      	bx	r3
    4f50:	2000170c 	.word	0x2000170c
    4f54:	b6db6db7 	.word	0xb6db6db7
    4f58:	0001f877 	.word	0x0001f877
    4f5c:	00024358 	.word	0x00024358

00004f60 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4f60:	2200      	movs	r2, #0
{
    4f62:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4f64:	2101      	movs	r1, #1
{
    4f66:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4f68:	4610      	mov	r0, r2
    4f6a:	f000 fd4d 	bl	5a08 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    4f6e:	2000      	movs	r0, #0
    4f70:	f000 fd18 	bl	59a4 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    4f74:	480f      	ldr	r0, [pc, #60]	; (4fb4 <clk_init+0x54>)
    4f76:	f017 fd2f 	bl	1c9d8 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    4f7a:	4b0f      	ldr	r3, [pc, #60]	; (4fb8 <clk_init+0x58>)
    4f7c:	4298      	cmp	r0, r3
    4f7e:	d115      	bne.n	4fac <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    4f80:	f01e f892 	bl	230a8 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    4f84:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    4f86:	490d      	ldr	r1, [pc, #52]	; (4fbc <clk_init+0x5c>)
    4f88:	4630      	mov	r0, r6
    4f8a:	f019 fd30 	bl	1e9ee <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    4f8e:	2800      	cmp	r0, #0
    4f90:	db0b      	blt.n	4faa <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    4f92:	2501      	movs	r5, #1
    4f94:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
    4f96:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    4f98:	4908      	ldr	r1, [pc, #32]	; (4fbc <clk_init+0x5c>)
    4f9a:	f104 001c 	add.w	r0, r4, #28
    4f9e:	f019 fd26 	bl	1e9ee <onoff_manager_init>
		if (err < 0) {
    4fa2:	2800      	cmp	r0, #0
    4fa4:	db01      	blt.n	4faa <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    4fa6:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    4fa8:	2000      	movs	r0, #0
}
    4faa:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    4fac:	f06f 0004 	mvn.w	r0, #4
    4fb0:	e7fb      	b.n	4faa <clk_init+0x4a>
    4fb2:	bf00      	nop
    4fb4:	00004ff5 	.word	0x00004ff5
    4fb8:	0bad0000 	.word	0x0bad0000
    4fbc:	00024370 	.word	0x00024370

00004fc0 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    4fc0:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    4fc2:	230c      	movs	r3, #12
    4fc4:	4809      	ldr	r0, [pc, #36]	; (4fec <clkstarted_handle.constprop.0+0x2c>)
    4fc6:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    4fc8:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    4fca:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    4fcc:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    4fd0:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    4fd2:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    4fd4:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    4fd6:	4418      	add	r0, r3
    4fd8:	f01a fc3a 	bl	1f850 <set_on_state>
	if (callback) {
    4fdc:	b12d      	cbz	r5, 4fea <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    4fde:	4632      	mov	r2, r6
    4fe0:	462b      	mov	r3, r5
    4fe2:	4803      	ldr	r0, [pc, #12]	; (4ff0 <clkstarted_handle.constprop.0+0x30>)
}
    4fe4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    4fe8:	4718      	bx	r3
}
    4fea:	bd70      	pop	{r4, r5, r6, pc}
    4fec:	2000170c 	.word	0x2000170c
    4ff0:	2000079c 	.word	0x2000079c

00004ff4 <clock_event_handler>:
	switch (event) {
    4ff4:	b110      	cbz	r0, 4ffc <clock_event_handler+0x8>
    4ff6:	2801      	cmp	r0, #1
    4ff8:	d004      	beq.n	5004 <clock_event_handler+0x10>
    4ffa:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    4ffc:	4b03      	ldr	r3, [pc, #12]	; (500c <clock_event_handler+0x18>)
    4ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    5000:	075b      	lsls	r3, r3, #29
    5002:	d101      	bne.n	5008 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    5004:	f7ff bfdc 	b.w	4fc0 <clkstarted_handle.constprop.0>
}
    5008:	4770      	bx	lr
    500a:	bf00      	nop
    500c:	2000170c 	.word	0x2000170c

00005010 <generic_hfclk_start>:
{
    5010:	b508      	push	{r3, lr}
	__asm__ volatile(
    5012:	f04f 0320 	mov.w	r3, #32
    5016:	f3ef 8111 	mrs	r1, BASEPRI
    501a:	f383 8811 	msr	BASEPRI, r3
    501e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    5022:	4a12      	ldr	r2, [pc, #72]	; (506c <generic_hfclk_start+0x5c>)
    5024:	6813      	ldr	r3, [r2, #0]
    5026:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    502a:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    502e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    5030:	d00c      	beq.n	504c <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    5032:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5036:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    503a:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    503e:	f013 0301 	ands.w	r3, r3, #1
    5042:	d003      	beq.n	504c <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    5044:	480a      	ldr	r0, [pc, #40]	; (5070 <generic_hfclk_start+0x60>)
    5046:	f01a fc03 	bl	1f850 <set_on_state>
			already_started = true;
    504a:	2301      	movs	r3, #1
	__asm__ volatile(
    504c:	f381 8811 	msr	BASEPRI, r1
    5050:	f3bf 8f6f 	isb	sy
	if (already_started) {
    5054:	b123      	cbz	r3, 5060 <generic_hfclk_start+0x50>
}
    5056:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    505a:	2000      	movs	r0, #0
    505c:	f7ff bfb0 	b.w	4fc0 <clkstarted_handle.constprop.0>
}
    5060:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    5064:	2001      	movs	r0, #1
    5066:	f017 bcc7 	b.w	1c9f8 <nrfx_clock_start>
    506a:	bf00      	nop
    506c:	2000175c 	.word	0x2000175c
    5070:	2000174c 	.word	0x2000174c

00005074 <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5074:	4b09      	ldr	r3, [pc, #36]	; (509c <generic_hfclk_stop+0x28>)
    5076:	f3bf 8f5b 	dmb	ish
    507a:	e853 2f00 	ldrex	r2, [r3]
    507e:	f022 0102 	bic.w	r1, r2, #2
    5082:	e843 1000 	strex	r0, r1, [r3]
    5086:	2800      	cmp	r0, #0
    5088:	d1f7      	bne.n	507a <generic_hfclk_stop+0x6>
    508a:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    508e:	07d3      	lsls	r3, r2, #31
    5090:	d402      	bmi.n	5098 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    5092:	2001      	movs	r0, #1
    5094:	f017 bce2 	b.w	1ca5c <nrfx_clock_stop>
}
    5098:	4770      	bx	lr
    509a:	bf00      	nop
    509c:	2000175c 	.word	0x2000175c

000050a0 <api_blocking_start>:
{
    50a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    50a2:	2200      	movs	r2, #0
    50a4:	2301      	movs	r3, #1
    50a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    50aa:	ab04      	add	r3, sp, #16
    50ac:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    50b0:	4a09      	ldr	r2, [pc, #36]	; (50d8 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    50b2:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    50b6:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    50b8:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    50bc:	f01a fc01 	bl	1f8c2 <api_start>
	if (err < 0) {
    50c0:	2800      	cmp	r0, #0
    50c2:	db05      	blt.n	50d0 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    50c4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    50c8:	2300      	movs	r3, #0
    50ca:	4668      	mov	r0, sp
    50cc:	f018 fd94 	bl	1dbf8 <z_impl_k_sem_take>
}
    50d0:	b007      	add	sp, #28
    50d2:	f85d fb04 	ldr.w	pc, [sp], #4
    50d6:	bf00      	nop
    50d8:	0001f895 	.word	0x0001f895

000050dc <z_nrf_clock_control_get_onoff>:
}
    50dc:	4a02      	ldr	r2, [pc, #8]	; (50e8 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    50de:	b2c3      	uxtb	r3, r0
}
    50e0:	201c      	movs	r0, #28
    50e2:	fb03 2000 	mla	r0, r3, r0, r2
    50e6:	4770      	bx	lr
    50e8:	2000170c 	.word	0x2000170c

000050ec <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    50ec:	4b09      	ldr	r3, [pc, #36]	; (5114 <z_nrf_clock_bt_ctlr_hf_request+0x28>)
    50ee:	f3bf 8f5b 	dmb	ish
    50f2:	e853 2f00 	ldrex	r2, [r3]
    50f6:	f042 0101 	orr.w	r1, r2, #1
    50fa:	e843 1000 	strex	r0, r1, [r3]
    50fe:	2800      	cmp	r0, #0
    5100:	d1f7      	bne.n	50f2 <z_nrf_clock_bt_ctlr_hf_request+0x6>
    5102:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
    5106:	0793      	lsls	r3, r2, #30
    5108:	d402      	bmi.n	5110 <z_nrf_clock_bt_ctlr_hf_request+0x24>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    510a:	2001      	movs	r0, #1
    510c:	f017 bc74 	b.w	1c9f8 <nrfx_clock_start>
}
    5110:	4770      	bx	lr
    5112:	bf00      	nop
    5114:	2000175c 	.word	0x2000175c

00005118 <z_nrf_clock_bt_ctlr_hf_release>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5118:	4b09      	ldr	r3, [pc, #36]	; (5140 <z_nrf_clock_bt_ctlr_hf_release+0x28>)
    511a:	f3bf 8f5b 	dmb	ish
    511e:	e853 2f00 	ldrex	r2, [r3]
    5122:	f022 0101 	bic.w	r1, r2, #1
    5126:	e843 1000 	strex	r0, r1, [r3]
    512a:	2800      	cmp	r0, #0
    512c:	d1f7      	bne.n	511e <z_nrf_clock_bt_ctlr_hf_release+0x6>
    512e:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_BT) & HF_USER_GENERIC) {
    5132:	0793      	lsls	r3, r2, #30
    5134:	d402      	bmi.n	513c <z_nrf_clock_bt_ctlr_hf_release+0x24>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    5136:	2001      	movs	r0, #1
    5138:	f017 bc90 	b.w	1ca5c <nrfx_clock_stop>
}
    513c:	4770      	bx	lr
    513e:	bf00      	nop
    5140:	2000175c 	.word	0x2000175c

00005144 <z_nrf_clock_control_lf_on>:
{
    5144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    5148:	493a      	ldr	r1, [pc, #232]	; (5234 <z_nrf_clock_control_lf_on+0xf0>)
    514a:	f3bf 8f5b 	dmb	ish
    514e:	4606      	mov	r6, r0
    5150:	2201      	movs	r2, #1
    5152:	e851 3f00 	ldrex	r3, [r1]
    5156:	e841 2000 	strex	r0, r2, [r1]
    515a:	2800      	cmp	r0, #0
    515c:	d1f9      	bne.n	5152 <z_nrf_clock_control_lf_on+0xe>
    515e:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    5162:	b933      	cbnz	r3, 5172 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    5164:	4934      	ldr	r1, [pc, #208]	; (5238 <z_nrf_clock_control_lf_on+0xf4>)
		err = onoff_request(mgr, &cli);
    5166:	4835      	ldr	r0, [pc, #212]	; (523c <z_nrf_clock_control_lf_on+0xf8>)
    5168:	604b      	str	r3, [r1, #4]
    516a:	60cb      	str	r3, [r1, #12]
    516c:	608a      	str	r2, [r1, #8]
    516e:	f019 fc51 	bl	1ea14 <onoff_request>
	switch (start_mode) {
    5172:	1e73      	subs	r3, r6, #1
    5174:	2b01      	cmp	r3, #1
    5176:	d832      	bhi.n	51de <z_nrf_clock_control_lf_on+0x9a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    5178:	2e01      	cmp	r6, #1
    517a:	d107      	bne.n	518c <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    517c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5180:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    5184:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    5188:	2b01      	cmp	r3, #1
    518a:	d028      	beq.n	51de <z_nrf_clock_control_lf_on+0x9a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    518c:	f01e fa79 	bl	23682 <k_is_in_isr>
    5190:	4604      	mov	r4, r0
    5192:	b918      	cbnz	r0, 519c <z_nrf_clock_control_lf_on+0x58>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    5194:	4b2a      	ldr	r3, [pc, #168]	; (5240 <z_nrf_clock_control_lf_on+0xfc>)
	int key = isr_mode ? irq_lock() : 0;
    5196:	781b      	ldrb	r3, [r3, #0]
    5198:	2b00      	cmp	r3, #0
    519a:	d144      	bne.n	5226 <z_nrf_clock_control_lf_on+0xe2>
	__asm__ volatile(
    519c:	f04f 0320 	mov.w	r3, #32
    51a0:	f3ef 8511 	mrs	r5, BASEPRI
    51a4:	f383 8811 	msr	BASEPRI, r3
    51a8:	f3bf 8f6f 	isb	sy
    51ac:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    51ae:	4f25      	ldr	r7, [pc, #148]	; (5244 <z_nrf_clock_control_lf_on+0x100>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    51b0:	f8df 8094 	ldr.w	r8, [pc, #148]	; 5248 <z_nrf_clock_control_lf_on+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    51b4:	f8df 9094 	ldr.w	r9, [pc, #148]	; 524c <z_nrf_clock_control_lf_on+0x108>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    51b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    51bc:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    51c0:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    51c4:	03d2      	lsls	r2, r2, #15
    51c6:	d50c      	bpl.n	51e2 <z_nrf_clock_control_lf_on+0x9e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    51c8:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    51cc:	2b01      	cmp	r3, #1
    51ce:	d001      	beq.n	51d4 <z_nrf_clock_control_lf_on+0x90>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    51d0:	2e01      	cmp	r6, #1
    51d2:	d106      	bne.n	51e2 <z_nrf_clock_control_lf_on+0x9e>
	if (isr_mode) {
    51d4:	b30c      	cbz	r4, 521a <z_nrf_clock_control_lf_on+0xd6>
	__asm__ volatile(
    51d6:	f385 8811 	msr	BASEPRI, r5
    51da:	f3bf 8f6f 	isb	sy
}
    51de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
    51e2:	b1ac      	cbz	r4, 5210 <z_nrf_clock_control_lf_on+0xcc>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    51e4:	4628      	mov	r0, r5
    51e6:	f000 fc7d 	bl	5ae4 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    51ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    51ee:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    51f2:	2b00      	cmp	r3, #0
    51f4:	d1e0      	bne.n	51b8 <z_nrf_clock_control_lf_on+0x74>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    51f6:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    51f8:	2900      	cmp	r1, #0
    51fa:	d0dd      	beq.n	51b8 <z_nrf_clock_control_lf_on+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    51fc:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    51fe:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    5200:	2301      	movs	r3, #1
    5202:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    5206:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    520a:	f8c9 3000 	str.w	r3, [r9]
}
    520e:	e7d3      	b.n	51b8 <z_nrf_clock_control_lf_on+0x74>
	return z_impl_k_sleep(timeout);
    5210:	2100      	movs	r1, #0
    5212:	2021      	movs	r0, #33	; 0x21
    5214:	f018 fc2e 	bl	1da74 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    5218:	e7e7      	b.n	51ea <z_nrf_clock_control_lf_on+0xa6>
    p_reg->INTENSET = mask;
    521a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    521e:	2202      	movs	r2, #2
    5220:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    5224:	e7db      	b.n	51de <z_nrf_clock_control_lf_on+0x9a>
    p_reg->INTENCLR = mask;
    5226:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    522a:	2202      	movs	r2, #2
    522c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    5230:	4605      	mov	r5, r0
}
    5232:	e7bc      	b.n	51ae <z_nrf_clock_control_lf_on+0x6a>
    5234:	20001760 	.word	0x20001760
    5238:	200016fc 	.word	0x200016fc
    523c:	20001728 	.word	0x20001728
    5240:	200036df 	.word	0x200036df
    5244:	40000104 	.word	0x40000104
    5248:	e000e100 	.word	0xe000e100
    524c:	40000008 	.word	0x40000008

00005250 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(int32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    5250:	4a04      	ldr	r2, [pc, #16]	; (5264 <sys_clock_timeout_handler+0x14>)
    5252:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    5254:	1ac8      	subs	r0, r1, r3
    5256:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    525a:	4403      	add	r3, r0
    525c:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    525e:	f019 b84f 	b.w	1e300 <sys_clock_announce>
    5262:	bf00      	nop
    5264:	20001774 	.word	0x20001774

00005268 <set_absolute_alarm>:
{
    5268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    526c:	0086      	lsls	r6, r0, #2
    526e:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    5272:	f100 0450 	add.w	r4, r0, #80	; 0x50
    5276:	f506 3688 	add.w	r6, r6, #69632	; 0x11000
    527a:	00a4      	lsls	r4, r4, #2
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    527c:	f8df 807c 	ldr.w	r8, [pc, #124]	; 52fc <set_absolute_alarm+0x94>
    return p_reg->CC[ch];
    5280:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5284:	b2a4      	uxth	r4, r4
    5286:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    528a:	f44f 3780 	mov.w	r7, #65536	; 0x10000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    528e:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    5292:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5296:	4087      	lsls	r7, r0
    5298:	46c1      	mov	r9, r8
     return p_reg->COUNTER;
    529a:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    529e:	eba3 030a 	sub.w	r3, r3, sl
    52a2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    52a6:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    52aa:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    52ac:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    52b0:	d102      	bne.n	52b8 <set_absolute_alarm+0x50>
	z_impl_k_busy_wait(usec_to_wait);
    52b2:	2013      	movs	r0, #19
    52b4:	f01e f9eb 	bl	2368e <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    52b8:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
    52bc:	1aab      	subs	r3, r5, r2
    52be:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    52c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    52c6:	bf88      	it	hi
    52c8:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    52ca:	2300      	movs	r3, #0
    52cc:	6023      	str	r3, [r4, #0]
    52ce:	6823      	ldr	r3, [r4, #0]
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    52d0:	f8c9 7344 	str.w	r7, [r9, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    52d4:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    52d8:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    52dc:	f8d9 3504 	ldr.w	r3, [r9, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    52e0:	459a      	cmp	sl, r3
    52e2:	d006      	beq.n	52f2 <set_absolute_alarm+0x8a>
	return (a - b) & COUNTER_MAX;
    52e4:	1aeb      	subs	r3, r5, r3
    52e6:	3b02      	subs	r3, #2
    52e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    52ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    52f0:	d801      	bhi.n	52f6 <set_absolute_alarm+0x8e>
}
    52f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
    52f6:	462b      	mov	r3, r5
    52f8:	e7cf      	b.n	529a <set_absolute_alarm+0x32>
    52fa:	bf00      	nop
    52fc:	40011000 	.word	0x40011000

00005300 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    5300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return p_reg->INTENSET & mask;
    5302:	4e10      	ldr	r6, [pc, #64]	; (5344 <rtc_nrf_isr+0x44>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5304:	4f10      	ldr	r7, [pc, #64]	; (5348 <rtc_nrf_isr+0x48>)
	ARG_UNUSED(arg);

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    5306:	2500      	movs	r5, #0
    5308:	4b10      	ldr	r3, [pc, #64]	; (534c <rtc_nrf_isr+0x4c>)
    530a:	2000      	movs	r0, #0
    530c:	681c      	ldr	r4, [r3, #0]
    530e:	461a      	mov	r2, r3
    5310:	b105      	cbz	r5, 5314 <rtc_nrf_isr+0x14>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    5312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return p_reg->INTENSET & mask;
    5314:	f8d6 1304 	ldr.w	r1, [r6, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    5318:	03c9      	lsls	r1, r1, #15
    531a:	d5fa      	bpl.n	5312 <rtc_nrf_isr+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    531c:	6839      	ldr	r1, [r7, #0]
    531e:	2900      	cmp	r1, #0
    5320:	d0f7      	beq.n	5312 <rtc_nrf_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5322:	603d      	str	r5, [r7, #0]
    5324:	6839      	ldr	r1, [r7, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    5326:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    532a:	f8c6 1348 	str.w	r1, [r6, #840]	; 0x348
    return p_reg->CC[ch];
    532e:	f8d6 1540 	ldr.w	r1, [r6, #1344]	; 0x540
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    5332:	2501      	movs	r5, #1
			if (handler) {
    5334:	b11c      	cbz	r4, 533e <rtc_nrf_isr+0x3e>
				handler(chan, cc_val,
    5336:	685a      	ldr	r2, [r3, #4]
    5338:	6018      	str	r0, [r3, #0]
    533a:	47a0      	blx	r4
    533c:	e7e4      	b.n	5308 <rtc_nrf_isr+0x8>
    533e:	6014      	str	r4, [r2, #0]
}
    5340:	e7e7      	b.n	5312 <rtc_nrf_isr+0x12>
    5342:	bf00      	nop
    5344:	40011000 	.word	0x40011000
    5348:	40011140 	.word	0x40011140
    534c:	20001768 	.word	0x20001768

00005350 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
    5350:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    5352:	4d10      	ldr	r5, [pc, #64]	; (5394 <sys_clock_driver_init+0x44>)
    5354:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    5356:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
    535a:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->INTENSET = mask;
    535e:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    5362:	4b0d      	ldr	r3, [pc, #52]	; (5398 <sys_clock_driver_init+0x48>)
    5364:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    5368:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    536c:	2101      	movs	r1, #1
    536e:	4622      	mov	r2, r4
    5370:	2011      	movs	r0, #17
    5372:	f000 fb49 	bl	5a08 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    5376:	2011      	movs	r0, #17
    5378:	f000 fb14 	bl	59a4 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    537c:	4a07      	ldr	r2, [pc, #28]	; (539c <sys_clock_driver_init+0x4c>)
    537e:	2301      	movs	r3, #1
    5380:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    5382:	4a07      	ldr	r2, [pc, #28]	; (53a0 <sys_clock_driver_init+0x50>)
    5384:	602b      	str	r3, [r5, #0]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    5386:	2002      	movs	r0, #2
	int_mask = BIT_MASK(CHAN_COUNT);
    5388:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    538a:	f7ff fedb 	bl	5144 <z_nrf_clock_control_lf_on>

	return 0;
}
    538e:	4620      	mov	r0, r4
    5390:	bd38      	pop	{r3, r4, r5, pc}
    5392:	bf00      	nop
    5394:	40011000 	.word	0x40011000
    5398:	e000e100 	.word	0xe000e100
    539c:	40011008 	.word	0x40011008
    53a0:	20001770 	.word	0x20001770

000053a4 <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    53a4:	4b13      	ldr	r3, [pc, #76]	; (53f4 <sys_clock_set_timeout+0x50>)
    53a6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    53aa:	bf08      	it	eq
    53ac:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    53ae:	3801      	subs	r0, #1
    53b0:	2800      	cmp	r0, #0
    53b2:	dd1c      	ble.n	53ee <sys_clock_set_timeout+0x4a>
    53b4:	4298      	cmp	r0, r3
    53b6:	bfa8      	it	ge
    53b8:	4618      	movge	r0, r3
     return p_reg->COUNTER;
    53ba:	4b0f      	ldr	r3, [pc, #60]	; (53f8 <sys_clock_set_timeout+0x54>)
    53bc:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    53c0:	4b0e      	ldr	r3, [pc, #56]	; (53fc <sys_clock_set_timeout+0x58>)
    53c2:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
    53c4:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    53c6:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
    53ca:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
		ticks = 0;
    53ce:	bf18      	it	ne
    53d0:	2000      	movne	r0, #0
	cc_data[chan].callback = handler;
    53d2:	4a0b      	ldr	r2, [pc, #44]	; (5400 <sys_clock_set_timeout+0x5c>)
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    53d4:	3301      	adds	r3, #1
    53d6:	4403      	add	r3, r0
	cc_data[chan].callback = handler;
    53d8:	480a      	ldr	r0, [pc, #40]	; (5404 <sys_clock_set_timeout+0x60>)
    53da:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    53dc:	2000      	movs	r0, #0
    53de:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    53e0:	4a04      	ldr	r2, [pc, #16]	; (53f4 <sys_clock_set_timeout+0x50>)
    53e2:	4293      	cmp	r3, r2
    53e4:	bf94      	ite	ls
    53e6:	18c9      	addls	r1, r1, r3
    53e8:	1889      	addhi	r1, r1, r2
    53ea:	f7ff bf3d 	b.w	5268 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    53ee:	2000      	movs	r0, #0
    53f0:	e7e3      	b.n	53ba <sys_clock_set_timeout+0x16>
    53f2:	bf00      	nop
    53f4:	007fffff 	.word	0x007fffff
    53f8:	40011000 	.word	0x40011000
    53fc:	20001774 	.word	0x20001774
    5400:	20001768 	.word	0x20001768
    5404:	00005251 	.word	0x00005251

00005408 <sys_clock_elapsed>:
	__asm__ volatile(
    5408:	f04f 0220 	mov.w	r2, #32
    540c:	f3ef 8311 	mrs	r3, BASEPRI
    5410:	f382 8811 	msr	BASEPRI, r2
    5414:	f3bf 8f6f 	isb	sy
    5418:	4a06      	ldr	r2, [pc, #24]	; (5434 <sys_clock_elapsed+0x2c>)
    541a:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    541e:	4a06      	ldr	r2, [pc, #24]	; (5438 <sys_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    5420:	6812      	ldr	r2, [r2, #0]
    5422:	1a80      	subs	r0, r0, r2
    5424:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    5428:	f383 8811 	msr	BASEPRI, r3
    542c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    5430:	4770      	bx	lr
    5432:	bf00      	nop
    5434:	40011000 	.word	0x40011000
    5438:	20001774 	.word	0x20001774

0000543c <sys_clock_cycle_get_32>:
	__asm__ volatile(
    543c:	f04f 0320 	mov.w	r3, #32
    5440:	f3ef 8211 	mrs	r2, BASEPRI
    5444:	f383 8811 	msr	BASEPRI, r3
    5448:	f3bf 8f6f 	isb	sy

uint32_t sys_clock_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
    544c:	4906      	ldr	r1, [pc, #24]	; (5468 <sys_clock_cycle_get_32+0x2c>)
    544e:	4b07      	ldr	r3, [pc, #28]	; (546c <sys_clock_cycle_get_32+0x30>)
    5450:	6808      	ldr	r0, [r1, #0]
    5452:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    5456:	f382 8811 	msr	BASEPRI, r2
    545a:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    545e:	1a1b      	subs	r3, r3, r0
    5460:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    5464:	4418      	add	r0, r3
    5466:	4770      	bx	lr
    5468:	20001774 	.word	0x20001774
    546c:	40011000 	.word	0x40011000

00005470 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
    5470:	b510      	push	{r4, lr}
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    5472:	4c11      	ldr	r4, [pc, #68]	; (54b8 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    5474:	4a11      	ldr	r2, [pc, #68]	; (54bc <_DoInit+0x4c>)
    5476:	61a2      	str	r2, [r4, #24]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    5478:	2303      	movs	r3, #3
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    547a:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
    547e:	4b10      	ldr	r3, [pc, #64]	; (54c0 <_DoInit+0x50>)
    5480:	61e3      	str	r3, [r4, #28]
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    5482:	6622      	str	r2, [r4, #96]	; 0x60
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    5484:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aDown[0].pBuffer       = _acDownBuffer;
    5488:	4a0e      	ldr	r2, [pc, #56]	; (54c4 <_DoInit+0x54>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
    548a:	490f      	ldr	r1, [pc, #60]	; (54c8 <_DoInit+0x58>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    548c:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    548e:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    5490:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    5492:	2210      	movs	r2, #16
  strcpy(&p->acID[7], "RTT");
    5494:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
    5496:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    5498:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    549a:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    549c:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    549e:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    54a0:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    54a2:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    54a4:	f01e fbc1 	bl	23c2a <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    54a8:	4908      	ldr	r1, [pc, #32]	; (54cc <_DoInit+0x5c>)
    54aa:	4620      	mov	r0, r4
    54ac:	f01e fbbd 	bl	23c2a <strcpy>
  p->acID[6] = ' ';
    54b0:	2320      	movs	r3, #32
    54b2:	71a3      	strb	r3, [r4, #6]
}
    54b4:	bd10      	pop	{r4, pc}
    54b6:	bf00      	nop
    54b8:	20001778 	.word	0x20001778
    54bc:	00025ded 	.word	0x00025ded
    54c0:	20003080 	.word	0x20003080
    54c4:	20003070 	.word	0x20003070
    54c8:	00025df6 	.word	0x00025df6
    54cc:	00025dfa 	.word	0x00025dfa

000054d0 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    54d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  RdOff = pRing->RdOff;
    54d4:	4f23      	ldr	r7, [pc, #140]	; (5564 <SEGGER_RTT_WriteSkipNoLock+0x94>)
    54d6:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    54da:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    54dc:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    54e0:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    54e2:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    54e4:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    54e6:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    54e8:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    54ea:	d834      	bhi.n	5556 <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    54ec:	f8d2 a020 	ldr.w	sl, [r2, #32]
    54f0:	ebaa 0905 	sub.w	r9, sl, r5
    54f4:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    54f8:	4294      	cmp	r4, r2
    54fa:	d811      	bhi.n	5520 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
    54fc:	f04f 0918 	mov.w	r9, #24
    5500:	fb06 9309 	mla	r3, r6, r9, r9
    5504:	443b      	add	r3, r7
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    5506:	4622      	mov	r2, r4
    5508:	6858      	ldr	r0, [r3, #4]
    550a:	4641      	mov	r1, r8
    550c:	4428      	add	r0, r5
    550e:	f01e fb76 	bl	23bfe <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    5512:	fb09 7606 	mla	r6, r9, r6, r7
    5516:	442c      	add	r4, r5
      // Therefore, check if 2nd memcpy is necessary at all
      //
      if (NumBytes) {
        memcpy(pRing->pBuffer, pData + Rem, NumBytes);
      }
      pRing->WrOff = NumBytes;
    5518:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
    551a:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    551c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    5520:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    5522:	429c      	cmp	r4, r3
    5524:	d81b      	bhi.n	555e <SEGGER_RTT_WriteSkipNoLock+0x8e>
      memcpy(pRing->pBuffer + WrOff, pData, Rem);       // Copy 1st chunk
    5526:	fb00 bb0b 	mla	fp, r0, fp, fp
    552a:	44bb      	add	fp, r7
    552c:	464a      	mov	r2, r9
    552e:	f8db 0004 	ldr.w	r0, [fp, #4]
    5532:	442c      	add	r4, r5
    5534:	4428      	add	r0, r5
    5536:	f01e fb62 	bl	23bfe <memcpy>
      if (NumBytes) {
    553a:	ebb4 040a 	subs.w	r4, r4, sl
    553e:	d006      	beq.n	554e <SEGGER_RTT_WriteSkipNoLock+0x7e>
    5540:	f8db 0004 	ldr.w	r0, [fp, #4]
    5544:	4622      	mov	r2, r4
    5546:	eb08 0109 	add.w	r1, r8, r9
    554a:	f01e fb58 	bl	23bfe <memcpy>
      pRing->WrOff = NumBytes;
    554e:	2018      	movs	r0, #24
    5550:	fb00 7606 	mla	r6, r0, r6, r7
    5554:	e7e0      	b.n	5518 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
    5556:	3b01      	subs	r3, #1
    5558:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    555a:	42a3      	cmp	r3, r4
    555c:	d2ce      	bcs.n	54fc <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    555e:	2000      	movs	r0, #0
    5560:	e7dc      	b.n	551c <SEGGER_RTT_WriteSkipNoLock+0x4c>
    5562:	bf00      	nop
    5564:	20001778 	.word	0x20001778

00005568 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    5568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    556a:	4c18      	ldr	r4, [pc, #96]	; (55cc <SEGGER_RTT_WriteNoLock+0x64>)
    556c:	2318      	movs	r3, #24
    556e:	fb00 3503 	mla	r5, r0, r3, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    5572:	fb03 4000 	mla	r0, r3, r0, r4
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    5576:	4425      	add	r5, r4
  switch (pRing->Flags) {
    5578:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    557a:	2c01      	cmp	r4, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    557c:	460f      	mov	r7, r1
    557e:	4616      	mov	r6, r2
  switch (pRing->Flags) {
    5580:	d00f      	beq.n	55a2 <SEGGER_RTT_WriteNoLock+0x3a>
    5582:	2c02      	cmp	r4, #2
    5584:	d01a      	beq.n	55bc <SEGGER_RTT_WriteNoLock+0x54>
    5586:	b9f4      	cbnz	r4, 55c6 <SEGGER_RTT_WriteNoLock+0x5e>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    5588:	4628      	mov	r0, r5
    558a:	f01a f9b6 	bl	1f8fa <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    558e:	4286      	cmp	r6, r0
    5590:	d805      	bhi.n	559e <SEGGER_RTT_WriteNoLock+0x36>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    5592:	4632      	mov	r2, r6
    5594:	4639      	mov	r1, r7
    5596:	4628      	mov	r0, r5
    5598:	f01a f9bd 	bl	1f916 <_WriteNoCheck>
    559c:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
    559e:	4620      	mov	r0, r4
    55a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
    55a2:	4628      	mov	r0, r5
    55a4:	f01a f9a9 	bl	1f8fa <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    55a8:	4286      	cmp	r6, r0
    55aa:	4634      	mov	r4, r6
    55ac:	bf28      	it	cs
    55ae:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    55b0:	4622      	mov	r2, r4
    55b2:	4639      	mov	r1, r7
    55b4:	4628      	mov	r0, r5
    55b6:	f01a f9ae 	bl	1f916 <_WriteNoCheck>
    break;
    55ba:	e7f0      	b.n	559e <SEGGER_RTT_WriteNoLock+0x36>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    55bc:	4628      	mov	r0, r5
}
    55be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    55c2:	f01a b9c4 	b.w	1f94e <_WriteBlocking>
  switch (pRing->Flags) {
    55c6:	2400      	movs	r4, #0
  return Status;
    55c8:	e7e9      	b.n	559e <SEGGER_RTT_WriteNoLock+0x36>
    55ca:	bf00      	nop
    55cc:	20001778 	.word	0x20001778

000055d0 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  v = pRing->RdOff;
    55d0:	4b03      	ldr	r3, [pc, #12]	; (55e0 <SEGGER_RTT_HasDataUp+0x10>)
    55d2:	2218      	movs	r2, #24
    55d4:	fb02 3300 	mla	r3, r2, r0, r3
    55d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    55da:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    55dc:	1a80      	subs	r0, r0, r2
    55de:	4770      	bx	lr
    55e0:	20001778 	.word	0x20001778

000055e4 <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
    55e4:	4b01      	ldr	r3, [pc, #4]	; (55ec <uECC_get_rng+0x8>)
    55e6:	6818      	ldr	r0, [r3, #0]
    55e8:	4770      	bx	lr
    55ea:	bf00      	nop
    55ec:	20000200 	.word	0x20000200

000055f0 <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
    55f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    55f2:	2208      	movs	r2, #8
{
    55f4:	b089      	sub	sp, #36	; 0x24
    55f6:	460c      	mov	r4, r1
    55f8:	4606      	mov	r6, r0
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    55fa:	f01a fb9c 	bl	1fd36 <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
    55fe:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    5600:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
    5602:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    5604:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
    5606:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    5608:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
    560a:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    560c:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    560e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    5610:	9307      	str	r3, [sp, #28]
	tmp[0] = tmp[1] = tmp[2] = 0;
    5612:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    5614:	2308      	movs	r3, #8
    5616:	466a      	mov	r2, sp
    5618:	4669      	mov	r1, sp
    561a:	4668      	mov	r0, sp
	tmp[0] = tmp[1] = tmp[2] = 0;
    561c:	e9cd 7701 	strd	r7, r7, [sp, #4]
    5620:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    5622:	f01a fa8a 	bl	1fb3a <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    5626:	2308      	movs	r3, #8
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    5628:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    562a:	466a      	mov	r2, sp
    562c:	4631      	mov	r1, r6
    562e:	4630      	mov	r0, r6
    5630:	f01a fa83 	bl	1fb3a <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
    5634:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5636:	9303      	str	r3, [sp, #12]
	tmp[4] = product[13];
    5638:	6b63      	ldr	r3, [r4, #52]	; 0x34
    563a:	9304      	str	r3, [sp, #16]
	tmp[5] = product[14];
    563c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    563e:	9305      	str	r3, [sp, #20]
	tmp[6] = product[15];
    5640:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    5642:	4405      	add	r5, r0
	tmp[7] = 0;
    5644:	e9cd 3706 	strd	r3, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    5648:	466a      	mov	r2, sp
    564a:	2308      	movs	r3, #8
    564c:	4669      	mov	r1, sp
    564e:	4668      	mov	r0, sp
    5650:	f01a fa73 	bl	1fb3a <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    5654:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    5656:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    5658:	2308      	movs	r3, #8
    565a:	466a      	mov	r2, sp
    565c:	4630      	mov	r0, r6
    565e:	f01a fa6c 	bl	1fb3a <uECC_vli_add>

	/* s3 */
	tmp[0] = product[8];
    5662:	6a23      	ldr	r3, [r4, #32]
    5664:	9300      	str	r3, [sp, #0]
	tmp[1] = product[9];
    5666:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5668:	9301      	str	r3, [sp, #4]
	tmp[2] = product[10];
    566a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    566c:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
    566e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    5670:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    5672:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    5674:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    5676:	4405      	add	r5, r0
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    5678:	2308      	movs	r3, #8
    567a:	466a      	mov	r2, sp
    567c:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    567e:	e9cd 7704 	strd	r7, r7, [sp, #16]
    5682:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    5684:	f01a fa59 	bl	1fb3a <uECC_vli_add>

	/* s4 */
	tmp[0] = product[9];
    5688:	6a63      	ldr	r3, [r4, #36]	; 0x24
    568a:	9300      	str	r3, [sp, #0]
	tmp[1] = product[10];
    568c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
    568e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	tmp[1] = product[10];
    5690:	9301      	str	r3, [sp, #4]
	tmp[2] = product[11];
    5692:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5694:	9302      	str	r3, [sp, #8]
	tmp[4] = product[14];
    5696:	9204      	str	r2, [sp, #16]
	tmp[3] = product[13];
    5698:	6b63      	ldr	r3, [r4, #52]	; 0x34
	tmp[5] = product[15];
    569a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	tmp[3] = product[13];
    569c:	9303      	str	r3, [sp, #12]
	tmp[6] = product[13];
    569e:	e9cd 2305 	strd	r2, r3, [sp, #20]
	tmp[7] = product[8];
    56a2:	6a23      	ldr	r3, [r4, #32]
    56a4:	9307      	str	r3, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    56a6:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    56a8:	2308      	movs	r3, #8
    56aa:	466a      	mov	r2, sp
    56ac:	4630      	mov	r0, r6
    56ae:	f01a fa44 	bl	1fb3a <uECC_vli_add>

	/* d1 */
	tmp[0] = product[11];
    56b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    56b4:	9300      	str	r3, [sp, #0]
	tmp[1] = product[12];
    56b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    56b8:	9301      	str	r3, [sp, #4]
	tmp[2] = product[13];
    56ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
    56bc:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
    56be:	6a23      	ldr	r3, [r4, #32]
    56c0:	9306      	str	r3, [sp, #24]
	tmp[7] = product[10];
    56c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    56c4:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    56c6:	4405      	add	r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    56c8:	2308      	movs	r3, #8
    56ca:	466a      	mov	r2, sp
    56cc:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    56ce:	e9cd 7704 	strd	r7, r7, [sp, #16]
    56d2:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    56d4:	f01a fb65 	bl	1fda2 <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
    56d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    56da:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
    56dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
    56de:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
    56e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    56e2:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
    56e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    56e6:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
    56e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    56ea:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
    56ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    56ee:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    56f0:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    56f2:	2308      	movs	r3, #8
    56f4:	466a      	mov	r2, sp
    56f6:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
    56f8:	e9cd 7704 	strd	r7, r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    56fc:	f01a fb51 	bl	1fda2 <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
    5700:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5702:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
    5704:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    5706:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
    5708:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    570a:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
    570c:	6a23      	ldr	r3, [r4, #32]
    570e:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
    5710:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5712:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
    5714:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
    5716:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
    571a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    571c:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    571e:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    5720:	2308      	movs	r3, #8
    5722:	466a      	mov	r2, sp
    5724:	4630      	mov	r0, r6
    5726:	f01a fb3c 	bl	1fda2 <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
    572a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    572c:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
    572e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
    5730:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
    5734:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5736:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
    5738:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    573a:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
    573c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
    573e:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
    5742:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5744:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    5746:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    5748:	2308      	movs	r3, #8
    574a:	466a      	mov	r2, sp
    574c:	4630      	mov	r0, r6
    574e:	f01a fb28 	bl	1fda2 <uECC_vli_sub>

	if (carry < 0) {
    5752:	1a2d      	subs	r5, r5, r0
    5754:	d410      	bmi.n	5778 <vli_mmod_fast_secp256r1+0x188>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
		while (carry < 0);
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    5756:	4c0d      	ldr	r4, [pc, #52]	; (578c <vli_mmod_fast_secp256r1+0x19c>)
		while (carry || 
    5758:	b935      	cbnz	r5, 5768 <vli_mmod_fast_secp256r1+0x178>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    575a:	2208      	movs	r2, #8
    575c:	4631      	mov	r1, r6
    575e:	4620      	mov	r0, r4
    5760:	f01a faf5 	bl	1fd4e <uECC_vli_cmp_unsafe>
		while (carry || 
    5764:	2801      	cmp	r0, #1
    5766:	d00f      	beq.n	5788 <vli_mmod_fast_secp256r1+0x198>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    5768:	2308      	movs	r3, #8
    576a:	4622      	mov	r2, r4
    576c:	4631      	mov	r1, r6
    576e:	4630      	mov	r0, r6
    5770:	f01a fb17 	bl	1fda2 <uECC_vli_sub>
    5774:	1a2d      	subs	r5, r5, r0
    5776:	e7ef      	b.n	5758 <vli_mmod_fast_secp256r1+0x168>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    5778:	4a04      	ldr	r2, [pc, #16]	; (578c <vli_mmod_fast_secp256r1+0x19c>)
    577a:	2308      	movs	r3, #8
    577c:	4631      	mov	r1, r6
    577e:	4630      	mov	r0, r6
    5780:	f01a f9db 	bl	1fb3a <uECC_vli_add>
		while (carry < 0);
    5784:	182d      	adds	r5, r5, r0
    5786:	d4f8      	bmi.n	577a <vli_mmod_fast_secp256r1+0x18a>
		}
	}
}
    5788:	b009      	add	sp, #36	; 0x24
    578a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    578c:	00024380 	.word	0x00024380

00005790 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
    5790:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    5792:	4e26      	ldr	r6, [pc, #152]	; (582c <tc_aes128_set_encrypt_key+0x9c>)
{
    5794:	4607      	mov	r7, r0
    5796:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    5798:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    579a:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    579c:	ad01      	add	r5, sp, #4
    579e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    57a0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    57a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    57a4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    57a8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
    57ac:	4638      	mov	r0, r7
    57ae:	2f00      	cmp	r7, #0
    57b0:	d038      	beq.n	5824 <tc_aes128_set_encrypt_key+0x94>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
    57b2:	2c00      	cmp	r4, #0
    57b4:	d038      	beq.n	5828 <tc_aes128_set_encrypt_key+0x98>
    57b6:	1f38      	subs	r0, r7, #4
    57b8:	4621      	mov	r1, r4
    57ba:	4602      	mov	r2, r0
    57bc:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    57be:	784b      	ldrb	r3, [r1, #1]
    57c0:	780d      	ldrb	r5, [r1, #0]
    57c2:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    57c4:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    57c8:	78cd      	ldrb	r5, [r1, #3]
    57ca:	432b      	orrs	r3, r5
    57cc:	788d      	ldrb	r5, [r1, #2]
    57ce:	3104      	adds	r1, #4
    57d0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    57d4:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    57d6:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    57da:	d1f0      	bne.n	57be <tc_aes128_set_encrypt_key+0x2e>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
    57dc:	4c14      	ldr	r4, [pc, #80]	; (5830 <tc_aes128_set_encrypt_key+0xa0>)
    57de:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    57e0:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    57e2:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    57e4:	d116      	bne.n	5814 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    57e6:	f3c3 4207 	ubfx	r2, r3, #16, #8
    57ea:	5ca5      	ldrb	r5, [r4, r2]
    57ec:	0e1a      	lsrs	r2, r3, #24
    57ee:	5ca2      	ldrb	r2, [r4, r2]
    57f0:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    57f4:	f3c3 2507 	ubfx	r5, r3, #8, #8
    57f8:	b2db      	uxtb	r3, r3
    57fa:	5d65      	ldrb	r5, [r4, r5]
    57fc:	5ce3      	ldrb	r3, [r4, r3]
    57fe:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    5802:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    5806:	ad0c      	add	r5, sp, #48	; 0x30
    5808:	f021 0303 	bic.w	r3, r1, #3
    580c:	442b      	add	r3, r5
    580e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    5812:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
    5814:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    5818:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    581a:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    581c:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    581e:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    5820:	d1de      	bne.n	57e0 <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
    5822:	2001      	movs	r0, #1
}
    5824:	b00d      	add	sp, #52	; 0x34
    5826:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    5828:	4620      	mov	r0, r4
    582a:	e7fb      	b.n	5824 <tc_aes128_set_encrypt_key+0x94>
    582c:	000240c4 	.word	0x000240c4
    5830:	00025e01 	.word	0x00025e01

00005834 <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
    5834:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5838:	4615      	mov	r5, r2
    583a:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
    583c:	4606      	mov	r6, r0
    583e:	2800      	cmp	r0, #0
    5840:	d058      	beq.n	58f4 <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    5842:	2900      	cmp	r1, #0
    5844:	d059      	beq.n	58fa <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    5846:	2a00      	cmp	r2, #0
    5848:	d059      	beq.n	58fe <tc_aes_encrypt+0xca>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    584a:	2310      	movs	r3, #16
    584c:	460a      	mov	r2, r1
    584e:	4668      	mov	r0, sp
    5850:	4619      	mov	r1, r3
    5852:	f01a f8ac 	bl	1f9ae <_copy>
	add_round_key(state, s->words);
    5856:	4629      	mov	r1, r5
    5858:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
    585a:	4c2a      	ldr	r4, [pc, #168]	; (5904 <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
    585c:	f01a ffb3 	bl	207c6 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
    5860:	f105 0710 	add.w	r7, r5, #16
    5864:	46a1      	mov	r9, r4
    5866:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
    5868:	46e8      	mov	r8, sp
{
    586a:	466a      	mov	r2, sp
    586c:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
    586e:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    5870:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
    5872:	5c61      	ldrb	r1, [r4, r1]
    5874:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    5878:	d1f9      	bne.n	586e <tc_aes_encrypt+0x3a>
		sub_bytes(state);
		shift_rows(state);
    587a:	4668      	mov	r0, sp
    587c:	f01a ffe8 	bl	20850 <shift_rows>
	mult_row_column(t, s);
    5880:	4669      	mov	r1, sp
    5882:	a804      	add	r0, sp, #16
    5884:	f01b f81d 	bl	208c2 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
    5888:	a901      	add	r1, sp, #4
    588a:	a805      	add	r0, sp, #20
    588c:	f01b f819 	bl	208c2 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
    5890:	a902      	add	r1, sp, #8
    5892:	a806      	add	r0, sp, #24
    5894:	f01b f815 	bl	208c2 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
    5898:	a903      	add	r1, sp, #12
    589a:	a807      	add	r0, sp, #28
    589c:	f01b f811 	bl	208c2 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
    58a0:	2310      	movs	r3, #16
    58a2:	4619      	mov	r1, r3
    58a4:	eb0d 0203 	add.w	r2, sp, r3
    58a8:	4668      	mov	r0, sp
    58aa:	f01a f880 	bl	1f9ae <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    58ae:	4639      	mov	r1, r7
    58b0:	4668      	mov	r0, sp
    58b2:	3710      	adds	r7, #16
    58b4:	f01a ff87 	bl	207c6 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
    58b8:	42af      	cmp	r7, r5
    58ba:	d1d5      	bne.n	5868 <tc_aes_encrypt+0x34>
    58bc:	2410      	movs	r4, #16
		s[i] = sbox[s[i]];
    58be:	f898 3000 	ldrb.w	r3, [r8]
	for (i = 0; i < (Nb * Nk); ++i) {
    58c2:	3c01      	subs	r4, #1
		s[i] = sbox[s[i]];
    58c4:	f819 3003 	ldrb.w	r3, [r9, r3]
    58c8:	f808 3b01 	strb.w	r3, [r8], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    58cc:	d1f7      	bne.n	58be <tc_aes_encrypt+0x8a>
	}

	sub_bytes(state);
	shift_rows(state);
    58ce:	4668      	mov	r0, sp
    58d0:	f01a ffbe 	bl	20850 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
    58d4:	4629      	mov	r1, r5
    58d6:	4668      	mov	r0, sp
    58d8:	f01a ff75 	bl	207c6 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
    58dc:	2310      	movs	r3, #16
    58de:	4619      	mov	r1, r3
    58e0:	466a      	mov	r2, sp
    58e2:	4630      	mov	r0, r6
    58e4:	f01a f863 	bl	1f9ae <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    58e8:	4668      	mov	r0, sp
    58ea:	2210      	movs	r2, #16
    58ec:	4621      	mov	r1, r4
    58ee:	f01a f86b 	bl	1f9c8 <_set>

	return TC_CRYPTO_SUCCESS;
    58f2:	2001      	movs	r0, #1
}
    58f4:	b009      	add	sp, #36	; 0x24
    58f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
    58fa:	4608      	mov	r0, r1
    58fc:	e7fa      	b.n	58f4 <tc_aes_encrypt+0xc0>
    58fe:	4610      	mov	r0, r2
    5900:	e7f8      	b.n	58f4 <tc_aes_encrypt+0xc0>
    5902:	bf00      	nop
    5904:	00025e01 	.word	0x00025e01

00005908 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    5908:	4a09      	ldr	r2, [pc, #36]	; (5930 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    590a:	490a      	ldr	r1, [pc, #40]	; (5934 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    590c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    590e:	6809      	ldr	r1, [r1, #0]
    5910:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    5912:	4909      	ldr	r1, [pc, #36]	; (5938 <arch_swap+0x30>)
	_current->arch.basepri = key;
    5914:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    5916:	684b      	ldr	r3, [r1, #4]
    5918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    591c:	604b      	str	r3, [r1, #4]
    591e:	2300      	movs	r3, #0
    5920:	f383 8811 	msr	BASEPRI, r3
    5924:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    5928:	6893      	ldr	r3, [r2, #8]
}
    592a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    592c:	4770      	bx	lr
    592e:	bf00      	nop
    5930:	20002e0c 	.word	0x20002e0c
    5934:	00025944 	.word	0x00025944
    5938:	e000ed00 	.word	0xe000ed00

0000593c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    593c:	490f      	ldr	r1, [pc, #60]	; (597c <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
    593e:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    5940:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    5944:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    5946:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    594a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    594e:	2020      	movs	r0, #32
    msr BASEPRI, r0
    5950:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    5954:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    5958:	4f09      	ldr	r7, [pc, #36]	; (5980 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    595a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    595e:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    5960:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    5962:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    5964:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    5966:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    5968:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    596a:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    596e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    5972:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    5976:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    597a:	4770      	bx	lr
    ldr r1, =_kernel
    597c:	20002e0c 	.word	0x20002e0c
    ldr v4, =_SCS_ICSR
    5980:	e000ed04 	.word	0xe000ed04

00005984 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    5984:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    5988:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    598a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    598e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    5992:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    5994:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    5998:	2902      	cmp	r1, #2
    beq _oops
    599a:	d0ff      	beq.n	599c <_oops>

0000599c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    599c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    599e:	f01b f8d3 	bl	20b48 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    59a2:	bd01      	pop	{r0, pc}

000059a4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    59a4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    59a6:	2b00      	cmp	r3, #0
    59a8:	db08      	blt.n	59bc <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    59aa:	2201      	movs	r2, #1
    59ac:	f000 001f 	and.w	r0, r0, #31
    59b0:	fa02 f000 	lsl.w	r0, r2, r0
    59b4:	095b      	lsrs	r3, r3, #5
    59b6:	4a02      	ldr	r2, [pc, #8]	; (59c0 <arch_irq_enable+0x1c>)
    59b8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    59bc:	4770      	bx	lr
    59be:	bf00      	nop
    59c0:	e000e100 	.word	0xe000e100

000059c4 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    59c4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    59c6:	2b00      	cmp	r3, #0
    59c8:	db0d      	blt.n	59e6 <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    59ca:	2201      	movs	r2, #1
    59cc:	095b      	lsrs	r3, r3, #5
    59ce:	f000 001f 	and.w	r0, r0, #31
    59d2:	fa02 f000 	lsl.w	r0, r2, r0
    59d6:	3320      	adds	r3, #32
    59d8:	4a03      	ldr	r2, [pc, #12]	; (59e8 <arch_irq_disable+0x24>)
    59da:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    59de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    59e2:	f3bf 8f6f 	isb	sy
}
    59e6:	4770      	bx	lr
    59e8:	e000e100 	.word	0xe000e100

000059ec <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    59ec:	4b05      	ldr	r3, [pc, #20]	; (5a04 <arch_irq_is_enabled+0x18>)
    59ee:	0942      	lsrs	r2, r0, #5
    59f0:	f000 001f 	and.w	r0, r0, #31
    59f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    59f8:	2301      	movs	r3, #1
    59fa:	fa03 f000 	lsl.w	r0, r3, r0
}
    59fe:	4010      	ands	r0, r2
    5a00:	4770      	bx	lr
    5a02:	bf00      	nop
    5a04:	e000e100 	.word	0xe000e100

00005a08 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    5a08:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    5a0a:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5a0c:	bfa8      	it	ge
    5a0e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    5a12:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5a16:	bfb8      	it	lt
    5a18:	4b06      	ldrlt	r3, [pc, #24]	; (5a34 <z_arm_irq_priority_set+0x2c>)
    5a1a:	ea4f 1141 	mov.w	r1, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5a1e:	bfac      	ite	ge
    5a20:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5a24:	f000 000f 	andlt.w	r0, r0, #15
    5a28:	b2c9      	uxtb	r1, r1
    5a2a:	bfb4      	ite	lt
    5a2c:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5a2e:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    5a32:	4770      	bx	lr
    5a34:	e000ed14 	.word	0xe000ed14

00005a38 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    5a38:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    5a3a:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    5a3c:	4b04      	ldr	r3, [pc, #16]	; (5a50 <_arch_isr_direct_pm+0x18>)
    5a3e:	6a18      	ldr	r0, [r3, #32]
    5a40:	b118      	cbz	r0, 5a4a <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    5a42:	2200      	movs	r2, #0
    5a44:	621a      	str	r2, [r3, #32]
		z_pm_save_idle_exit(idle_val);
    5a46:	f01d fb99 	bl	2317c <z_pm_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    5a4a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    5a4c:	bd08      	pop	{r3, pc}
    5a4e:	bf00      	nop
    5a50:	20002e0c 	.word	0x20002e0c

00005a54 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    5a54:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    5a58:	9b00      	ldr	r3, [sp, #0]
    5a5a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    5a5e:	490a      	ldr	r1, [pc, #40]	; (5a88 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    5a60:	9b01      	ldr	r3, [sp, #4]
    5a62:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    5a66:	9b02      	ldr	r3, [sp, #8]
    5a68:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    5a6c:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    5a70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    5a74:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    5a78:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    5a7c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    5a7e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    5a80:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    5a82:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    5a84:	4770      	bx	lr
    5a86:	bf00      	nop
    5a88:	0001eaf1 	.word	0x0001eaf1

00005a8c <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    5a8c:	b508      	push	{r3, lr}
    5a8e:	4606      	mov	r6, r0
    5a90:	460d      	mov	r5, r1
    5a92:	4614      	mov	r4, r2
	z_arm_configure_static_mpu_regions();
    5a94:	f000 fb0a 	bl	60ac <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    5a98:	4b07      	ldr	r3, [pc, #28]	; (5ab8 <arch_switch_to_main_thread+0x2c>)
    5a9a:	609e      	str	r6, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    5a9c:	4620      	mov	r0, r4
    5a9e:	f385 8809 	msr	PSP, r5
    5aa2:	2100      	movs	r1, #0
    5aa4:	b663      	cpsie	if
    5aa6:	f381 8811 	msr	BASEPRI, r1
    5aaa:	f3bf 8f6f 	isb	sy
    5aae:	2200      	movs	r2, #0
    5ab0:	2300      	movs	r3, #0
    5ab2:	f019 f81d 	bl	1eaf0 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    5ab6:	bf00      	nop
    5ab8:	20002e0c 	.word	0x20002e0c

00005abc <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    5abc:	4901      	ldr	r1, [pc, #4]	; (5ac4 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    5abe:	2210      	movs	r2, #16
	str	r2, [r1]
    5ac0:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    5ac2:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    5ac4:	e000ed10 	.word	0xe000ed10

00005ac8 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    5ac8:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    5aca:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    5acc:	f380 8811 	msr	BASEPRI, r0
	isb
    5ad0:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    5ad4:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    5ad8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    5ada:	b662      	cpsie	i
	isb
    5adc:	f3bf 8f6f 	isb	sy

	bx	lr
    5ae0:	4770      	bx	lr
    5ae2:	bf00      	nop

00005ae4 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    5ae4:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    5ae6:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    5ae8:	f381 8811 	msr	BASEPRI, r1

	wfe
    5aec:	bf20      	wfe

	msr	BASEPRI, r0
    5aee:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    5af2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    5af4:	4770      	bx	lr
    5af6:	bf00      	nop

00005af8 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    5af8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5afa:	4606      	mov	r6, r0

	if (esf != NULL) {
    5afc:	460c      	mov	r4, r1
    5afe:	b301      	cbz	r1, 5b42 <z_arm_fatal_error+0x4a>
    5b00:	4b13      	ldr	r3, [pc, #76]	; (5b50 <z_arm_fatal_error+0x58>)
    5b02:	4d14      	ldr	r5, [pc, #80]	; (5b54 <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    5b04:	4814      	ldr	r0, [pc, #80]	; (5b58 <z_arm_fatal_error+0x60>)
    5b06:	1aed      	subs	r5, r5, r3
    5b08:	08ed      	lsrs	r5, r5, #3
    5b0a:	01ad      	lsls	r5, r5, #6
    5b0c:	f045 0501 	orr.w	r5, r5, #1
    5b10:	f8ad 5000 	strh.w	r5, [sp]
    5b14:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    5b18:	6809      	ldr	r1, [r1, #0]
    5b1a:	f019 fb13 	bl	1f144 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    5b1e:	f8ad 5000 	strh.w	r5, [sp]
    5b22:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    5b26:	68e1      	ldr	r1, [r4, #12]
    5b28:	480c      	ldr	r0, [pc, #48]	; (5b5c <z_arm_fatal_error+0x64>)
    5b2a:	f019 fb0b 	bl	1f144 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    5b2e:	69e1      	ldr	r1, [r4, #28]
    5b30:	480b      	ldr	r0, [pc, #44]	; (5b60 <z_arm_fatal_error+0x68>)
    5b32:	462a      	mov	r2, r5
    5b34:	f019 fad9 	bl	1f0ea <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    5b38:	69a1      	ldr	r1, [r4, #24]
    5b3a:	480a      	ldr	r0, [pc, #40]	; (5b64 <z_arm_fatal_error+0x6c>)
    5b3c:	462a      	mov	r2, r5
    5b3e:	f019 fad4 	bl	1f0ea <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    5b42:	4621      	mov	r1, r4
    5b44:	4630      	mov	r0, r6
}
    5b46:	b002      	add	sp, #8
    5b48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    5b4c:	f017 ba0c 	b.w	1cf68 <z_fatal_error>
    5b50:	00023ed8 	.word	0x00023ed8
    5b54:	00024018 	.word	0x00024018
    5b58:	00025f01 	.word	0x00025f01
    5b5c:	00025f30 	.word	0x00025f30
    5b60:	00025f5f 	.word	0x00025f5f
    5b64:	00025f6e 	.word	0x00025f6e

00005b68 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    5b68:	bf30      	wfi
    b z_SysNmiOnReset
    5b6a:	f7ff bffd 	b.w	5b68 <z_SysNmiOnReset>
    5b6e:	bf00      	nop

00005b70 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    5b70:	4a0e      	ldr	r2, [pc, #56]	; (5bac <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    5b72:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    5b74:	4b0e      	ldr	r3, [pc, #56]	; (5bb0 <z_arm_prep_c+0x40>)
    5b76:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    5b7a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    5b7c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5b80:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    5b84:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    5b88:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    5b8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    5b90:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    5b94:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    5b98:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    5b9c:	f017 fa58 	bl	1d050 <z_bss_zero>
	z_data_copy();
    5ba0:	f018 fab4 	bl	1e10c <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    5ba4:	f000 fa64 	bl	6070 <z_arm_interrupt_init>
	z_cstart();
    5ba8:	f017 fa76 	bl	1d098 <z_cstart>
    5bac:	00000000 	.word	0x00000000
    5bb0:	e000ed00 	.word	0xe000ed00

00005bb4 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    5bb4:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    5bb6:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    5bb8:	4a0b      	ldr	r2, [pc, #44]	; (5be8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    5bba:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    5bbc:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    5bbe:	bf1e      	ittt	ne
	movne	r1, #0
    5bc0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    5bc2:	6211      	strne	r1, [r2, #32]
		blne	z_pm_save_idle_exit
    5bc4:	f01d fada 	blne	2317c <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    5bc8:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    5bca:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    5bce:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    5bd2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    5bd6:	4905      	ldr	r1, [pc, #20]	; (5bec <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    5bd8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    5bda:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    5bdc:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    5bde:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    5be2:	4903      	ldr	r1, [pc, #12]	; (5bf0 <_isr_wrapper+0x3c>)
	bx r1
    5be4:	4708      	bx	r1
    5be6:	0000      	.short	0x0000
	ldr r2, =_kernel
    5be8:	20002e0c 	.word	0x20002e0c
	ldr r1, =_sw_isr_table
    5bec:	00023d14 	.word	0x00023d14
	ldr r1, =z_arm_int_exit
    5bf0:	00006055 	.word	0x00006055

00005bf4 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    5bf4:	f01a ffb6 	bl	20b64 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    5bf8:	2020      	movs	r0, #32
    msr BASEPRI, r0
    5bfa:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    5bfe:	4808      	ldr	r0, [pc, #32]	; (5c20 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    5c00:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    5c04:	1840      	adds	r0, r0, r1
    msr PSP, r0
    5c06:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    5c0a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    5c0e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    5c10:	4308      	orrs	r0, r1
    msr CONTROL, r0
    5c12:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    5c16:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    5c1a:	f7ff ffa9 	bl	5b70 <z_arm_prep_c>
    5c1e:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    5c20:	2000d4d0 	.word	0x2000d4d0

00005c24 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    5c24:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    5c28:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    5c2c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    5c2e:	4672      	mov	r2, lr
	bl z_arm_fault
    5c30:	f000 f934 	bl	5e9c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    5c34:	bd01      	pop	{r0, pc}
    5c36:	bf00      	nop

00005c38 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    5c38:	b570      	push	{r4, r5, r6, lr}
    5c3a:	4b23      	ldr	r3, [pc, #140]	; (5cc8 <usage_fault.isra.0+0x90>)
    5c3c:	4c23      	ldr	r4, [pc, #140]	; (5ccc <usage_fault.isra.0+0x94>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    5c3e:	4d24      	ldr	r5, [pc, #144]	; (5cd0 <usage_fault.isra.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    5c40:	4824      	ldr	r0, [pc, #144]	; (5cd4 <usage_fault.isra.0+0x9c>)
    5c42:	1ae4      	subs	r4, r4, r3
    5c44:	08e4      	lsrs	r4, r4, #3
    5c46:	01a4      	lsls	r4, r4, #6
    5c48:	f044 0601 	orr.w	r6, r4, #1
    5c4c:	4631      	mov	r1, r6
    5c4e:	f019 fa3f 	bl	1f0d0 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    5c52:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    5c54:	0193      	lsls	r3, r2, #6
    5c56:	d503      	bpl.n	5c60 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
    5c58:	481f      	ldr	r0, [pc, #124]	; (5cd8 <usage_fault.isra.0+0xa0>)
    5c5a:	4631      	mov	r1, r6
    5c5c:	f019 fa38 	bl	1f0d0 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    5c60:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5c62:	01dd      	lsls	r5, r3, #7
    5c64:	d504      	bpl.n	5c70 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
    5c66:	481d      	ldr	r0, [pc, #116]	; (5cdc <usage_fault.isra.0+0xa4>)
    5c68:	f044 0101 	orr.w	r1, r4, #1
    5c6c:	f019 fa30 	bl	1f0d0 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    5c70:	4d17      	ldr	r5, [pc, #92]	; (5cd0 <usage_fault.isra.0+0x98>)
    5c72:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    5c74:	0310      	lsls	r0, r2, #12
    5c76:	d504      	bpl.n	5c82 <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    5c78:	4819      	ldr	r0, [pc, #100]	; (5ce0 <usage_fault.isra.0+0xa8>)
    5c7a:	f044 0101 	orr.w	r1, r4, #1
    5c7e:	f019 fa27 	bl	1f0d0 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    5c82:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5c84:	0359      	lsls	r1, r3, #13
    5c86:	d504      	bpl.n	5c92 <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    5c88:	4816      	ldr	r0, [pc, #88]	; (5ce4 <usage_fault.isra.0+0xac>)
    5c8a:	f044 0101 	orr.w	r1, r4, #1
    5c8e:	f019 fa1f 	bl	1f0d0 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    5c92:	4d0f      	ldr	r5, [pc, #60]	; (5cd0 <usage_fault.isra.0+0x98>)
    5c94:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    5c96:	0392      	lsls	r2, r2, #14
    5c98:	d504      	bpl.n	5ca4 <usage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    5c9a:	4813      	ldr	r0, [pc, #76]	; (5ce8 <usage_fault.isra.0+0xb0>)
    5c9c:	f044 0101 	orr.w	r1, r4, #1
    5ca0:	f019 fa16 	bl	1f0d0 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    5ca4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5ca6:	03db      	lsls	r3, r3, #15
    5ca8:	d504      	bpl.n	5cb4 <usage_fault.isra.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    5caa:	4810      	ldr	r0, [pc, #64]	; (5cec <usage_fault.isra.0+0xb4>)
    5cac:	f044 0101 	orr.w	r1, r4, #1
    5cb0:	f019 fa0e 	bl	1f0d0 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    5cb4:	4a06      	ldr	r2, [pc, #24]	; (5cd0 <usage_fault.isra.0+0x98>)
    5cb6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5cb8:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    5cbc:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    5cc0:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    5cc2:	2000      	movs	r0, #0
    5cc4:	bd70      	pop	{r4, r5, r6, pc}
    5cc6:	bf00      	nop
    5cc8:	00023ed8 	.word	0x00023ed8
    5ccc:	00024018 	.word	0x00024018
    5cd0:	e000ed00 	.word	0xe000ed00
    5cd4:	00025f9c 	.word	0x00025f9c
    5cd8:	00025fb4 	.word	0x00025fb4
    5cdc:	00025fc7 	.word	0x00025fc7
    5ce0:	00025fe1 	.word	0x00025fe1
    5ce4:	00025fff 	.word	0x00025fff
    5ce8:	00026024 	.word	0x00026024
    5cec:	0002603e 	.word	0x0002603e

00005cf0 <mem_manage_fault.isra.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    5cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5cf4:	4b28      	ldr	r3, [pc, #160]	; (5d98 <mem_manage_fault.isra.0+0xa8>)
    5cf6:	4c29      	ldr	r4, [pc, #164]	; (5d9c <mem_manage_fault.isra.0+0xac>)
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    5cf8:	4d29      	ldr	r5, [pc, #164]	; (5da0 <mem_manage_fault.isra.0+0xb0>)
    5cfa:	1ae4      	subs	r4, r4, r3
    5cfc:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    5cfe:	01a4      	lsls	r4, r4, #6
    5d00:	f044 0801 	orr.w	r8, r4, #1
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    5d04:	4607      	mov	r7, r0
    5d06:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    5d08:	4826      	ldr	r0, [pc, #152]	; (5da4 <mem_manage_fault.isra.0+0xb4>)
    5d0a:	4641      	mov	r1, r8
    5d0c:	f019 f9e0 	bl	1f0d0 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    5d10:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    5d12:	06d0      	lsls	r0, r2, #27
    5d14:	d503      	bpl.n	5d1e <mem_manage_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    5d16:	4824      	ldr	r0, [pc, #144]	; (5da8 <mem_manage_fault.isra.0+0xb8>)
    5d18:	4641      	mov	r1, r8
    5d1a:	f019 f9d9 	bl	1f0d0 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    5d1e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5d20:	0719      	lsls	r1, r3, #28
    5d22:	d504      	bpl.n	5d2e <mem_manage_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    5d24:	4821      	ldr	r0, [pc, #132]	; (5dac <mem_manage_fault.isra.0+0xbc>)
    5d26:	f044 0101 	orr.w	r1, r4, #1
    5d2a:	f019 f9d1 	bl	1f0d0 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    5d2e:	4d1c      	ldr	r5, [pc, #112]	; (5da0 <mem_manage_fault.isra.0+0xb0>)
    5d30:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5d32:	079a      	lsls	r2, r3, #30
    5d34:	d512      	bpl.n	5d5c <mem_manage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Data Access Violation");
    5d36:	f044 0801 	orr.w	r8, r4, #1
    5d3a:	4641      	mov	r1, r8
    5d3c:	481c      	ldr	r0, [pc, #112]	; (5db0 <mem_manage_fault.isra.0+0xc0>)
    5d3e:	f019 f9c7 	bl	1f0d0 <log_0>
		uint32_t temp = SCB->MMFAR;
    5d42:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    5d44:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5d46:	061b      	lsls	r3, r3, #24
    5d48:	d508      	bpl.n	5d5c <mem_manage_fault.isra.0+0x6c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    5d4a:	481a      	ldr	r0, [pc, #104]	; (5db4 <mem_manage_fault.isra.0+0xc4>)
    5d4c:	4642      	mov	r2, r8
    5d4e:	f019 f9cc 	bl	1f0ea <log_1>
			if (from_hard_fault != 0) {
    5d52:	b11f      	cbz	r7, 5d5c <mem_manage_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    5d54:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5d56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    5d5a:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    5d5c:	4d10      	ldr	r5, [pc, #64]	; (5da0 <mem_manage_fault.isra.0+0xb0>)
    5d5e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    5d60:	07d0      	lsls	r0, r2, #31
    5d62:	d504      	bpl.n	5d6e <mem_manage_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
    5d64:	4814      	ldr	r0, [pc, #80]	; (5db8 <mem_manage_fault.isra.0+0xc8>)
    5d66:	f044 0101 	orr.w	r1, r4, #1
    5d6a:	f019 f9b1 	bl	1f0d0 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    5d6e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5d70:	0699      	lsls	r1, r3, #26
    5d72:	d504      	bpl.n	5d7e <mem_manage_fault.isra.0+0x8e>
		PR_FAULT_INFO(
    5d74:	4811      	ldr	r0, [pc, #68]	; (5dbc <mem_manage_fault.isra.0+0xcc>)
    5d76:	f044 0101 	orr.w	r1, r4, #1
    5d7a:	f019 f9a9 	bl	1f0d0 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    5d7e:	4b08      	ldr	r3, [pc, #32]	; (5da0 <mem_manage_fault.isra.0+0xb0>)
    5d80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5d82:	06d2      	lsls	r2, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    5d84:	bf58      	it	pl
    5d86:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    5d88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    5d8a:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    5d8c:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    5d90:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    5d92:	7030      	strb	r0, [r6, #0]
}
    5d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5d98:	00023ed8 	.word	0x00023ed8
    5d9c:	00024018 	.word	0x00024018
    5da0:	e000ed00 	.word	0xe000ed00
    5da4:	00026069 	.word	0x00026069
    5da8:	0002607f 	.word	0x0002607f
    5dac:	000260b2 	.word	0x000260b2
    5db0:	000260c5 	.word	0x000260c5
    5db4:	000260dd 	.word	0x000260dd
    5db8:	000260f3 	.word	0x000260f3
    5dbc:	00026112 	.word	0x00026112

00005dc0 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    5dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5dc4:	4b2a      	ldr	r3, [pc, #168]	; (5e70 <bus_fault.isra.0+0xb0>)
    5dc6:	4c2b      	ldr	r4, [pc, #172]	; (5e74 <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    5dc8:	4d2b      	ldr	r5, [pc, #172]	; (5e78 <bus_fault.isra.0+0xb8>)
    5dca:	1ae4      	subs	r4, r4, r3
    5dcc:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    5dce:	01a4      	lsls	r4, r4, #6
    5dd0:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    5dd4:	4607      	mov	r7, r0
    5dd6:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    5dd8:	4828      	ldr	r0, [pc, #160]	; (5e7c <bus_fault.isra.0+0xbc>)
    5dda:	4641      	mov	r1, r8
    5ddc:	f019 f978 	bl	1f0d0 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    5de0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    5de2:	04d1      	lsls	r1, r2, #19
    5de4:	d503      	bpl.n	5dee <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
    5de6:	4826      	ldr	r0, [pc, #152]	; (5e80 <bus_fault.isra.0+0xc0>)
    5de8:	4641      	mov	r1, r8
    5dea:	f019 f971 	bl	1f0d0 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    5dee:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5df0:	051a      	lsls	r2, r3, #20
    5df2:	d504      	bpl.n	5dfe <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    5df4:	4823      	ldr	r0, [pc, #140]	; (5e84 <bus_fault.isra.0+0xc4>)
    5df6:	f044 0101 	orr.w	r1, r4, #1
    5dfa:	f019 f969 	bl	1f0d0 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    5dfe:	4d1e      	ldr	r5, [pc, #120]	; (5e78 <bus_fault.isra.0+0xb8>)
    5e00:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5e02:	059b      	lsls	r3, r3, #22
    5e04:	d512      	bpl.n	5e2c <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
    5e06:	f044 0801 	orr.w	r8, r4, #1
    5e0a:	481f      	ldr	r0, [pc, #124]	; (5e88 <bus_fault.isra.0+0xc8>)
    5e0c:	4641      	mov	r1, r8
    5e0e:	f019 f95f 	bl	1f0d0 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    5e12:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    5e14:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5e16:	0418      	lsls	r0, r3, #16
    5e18:	d508      	bpl.n	5e2c <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    5e1a:	481c      	ldr	r0, [pc, #112]	; (5e8c <bus_fault.isra.0+0xcc>)
    5e1c:	4642      	mov	r2, r8
    5e1e:	f019 f964 	bl	1f0ea <log_1>
			if (from_hard_fault != 0) {
    5e22:	b11f      	cbz	r7, 5e2c <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    5e24:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5e26:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    5e2a:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    5e2c:	4d12      	ldr	r5, [pc, #72]	; (5e78 <bus_fault.isra.0+0xb8>)
    5e2e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5e30:	0559      	lsls	r1, r3, #21
    5e32:	d504      	bpl.n	5e3e <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
    5e34:	4816      	ldr	r0, [pc, #88]	; (5e90 <bus_fault.isra.0+0xd0>)
    5e36:	f044 0101 	orr.w	r1, r4, #1
    5e3a:	f019 f949 	bl	1f0d0 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    5e3e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5e40:	05da      	lsls	r2, r3, #23
    5e42:	d50d      	bpl.n	5e60 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
    5e44:	4813      	ldr	r0, [pc, #76]	; (5e94 <bus_fault.isra.0+0xd4>)
    5e46:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    5e4a:	f019 f941 	bl	1f0d0 <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    5e4e:	4a0a      	ldr	r2, [pc, #40]	; (5e78 <bus_fault.isra.0+0xb8>)
    5e50:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    5e52:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    5e54:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    5e58:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    5e5a:	7030      	strb	r0, [r6, #0]
}
    5e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    5e60:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5e62:	049b      	lsls	r3, r3, #18
    5e64:	d5f3      	bpl.n	5e4e <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    5e66:	480c      	ldr	r0, [pc, #48]	; (5e98 <bus_fault.isra.0+0xd8>)
    5e68:	f044 0101 	orr.w	r1, r4, #1
    5e6c:	e7ed      	b.n	5e4a <bus_fault.isra.0+0x8a>
    5e6e:	bf00      	nop
    5e70:	00023ed8 	.word	0x00023ed8
    5e74:	00024018 	.word	0x00024018
    5e78:	e000ed00 	.word	0xe000ed00
    5e7c:	00026141 	.word	0x00026141
    5e80:	00026157 	.word	0x00026157
    5e84:	000260b2 	.word	0x000260b2
    5e88:	00026168 	.word	0x00026168
    5e8c:	00026181 	.word	0x00026181
    5e90:	00026196 	.word	0x00026196
    5e94:	000261b1 	.word	0x000261b1
    5e98:	00026112 	.word	0x00026112

00005e9c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    5e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5ea0:	460d      	mov	r5, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    5ea2:	495a      	ldr	r1, [pc, #360]	; (600c <z_arm_fault+0x170>)
    5ea4:	684f      	ldr	r7, [r1, #4]
{
    5ea6:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    5ea8:	f3c7 0408 	ubfx	r4, r7, #0, #9
    5eac:	2600      	movs	r6, #0
    5eae:	f386 8811 	msr	BASEPRI, r6
    5eb2:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    5eb6:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    5eba:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    5ebe:	d10d      	bne.n	5edc <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    5ec0:	f002 010c 	and.w	r1, r2, #12
    5ec4:	2908      	cmp	r1, #8
    5ec6:	d10b      	bne.n	5ee0 <z_arm_fault+0x44>
    5ec8:	4951      	ldr	r1, [pc, #324]	; (6010 <z_arm_fault+0x174>)
    5eca:	4b52      	ldr	r3, [pc, #328]	; (6014 <z_arm_fault+0x178>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    5ecc:	4852      	ldr	r0, [pc, #328]	; (6018 <z_arm_fault+0x17c>)
    5ece:	1ac9      	subs	r1, r1, r3
    5ed0:	08c9      	lsrs	r1, r1, #3
    5ed2:	0189      	lsls	r1, r1, #6
    5ed4:	f041 0101 	orr.w	r1, r1, #1
    5ed8:	f019 f8fa 	bl	1f0d0 <log_0>
		return NULL;
    5edc:	4635      	mov	r5, r6
    5ede:	e003      	b.n	5ee8 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    5ee0:	0712      	lsls	r2, r2, #28
    5ee2:	d401      	bmi.n	5ee8 <z_arm_fault+0x4c>
			ptr_esf = (z_arch_esf_t *)msp;
    5ee4:	4605      	mov	r5, r0
			*nested_exc = true;
    5ee6:	2601      	movs	r6, #1
	*recoverable = false;
    5ee8:	2300      	movs	r3, #0
    5eea:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    5eee:	1ee3      	subs	r3, r4, #3
    5ef0:	2b09      	cmp	r3, #9
    5ef2:	d871      	bhi.n	5fd8 <z_arm_fault+0x13c>
    5ef4:	e8df f003 	tbb	[pc, r3]
    5ef8:	3c635f05 	.word	0x3c635f05
    5efc:	70707070 	.word	0x70707070
    5f00:	6770      	.short	0x6770
    5f02:	4b44      	ldr	r3, [pc, #272]	; (6014 <z_arm_fault+0x178>)
    5f04:	4f42      	ldr	r7, [pc, #264]	; (6010 <z_arm_fault+0x174>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    5f06:	4845      	ldr	r0, [pc, #276]	; (601c <z_arm_fault+0x180>)
    5f08:	1aff      	subs	r7, r7, r3
    5f0a:	08ff      	lsrs	r7, r7, #3
    5f0c:	01bf      	lsls	r7, r7, #6
    5f0e:	f047 0701 	orr.w	r7, r7, #1
    5f12:	4639      	mov	r1, r7
    5f14:	f019 f8dc 	bl	1f0d0 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    5f18:	4b3c      	ldr	r3, [pc, #240]	; (600c <z_arm_fault+0x170>)
    5f1a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
	*recoverable = false;
    5f1c:	f04f 0800 	mov.w	r8, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    5f20:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
    5f24:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    5f28:	d005      	beq.n	5f36 <z_arm_fault+0x9a>
		PR_EXC("  Bus fault on vector table read");
    5f2a:	483d      	ldr	r0, [pc, #244]	; (6020 <z_arm_fault+0x184>)
    5f2c:	4639      	mov	r1, r7
	PR_FAULT_INFO(
    5f2e:	f019 f8cf 	bl	1f0d0 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    5f32:	2400      	movs	r4, #0
}
    5f34:	e01f      	b.n	5f76 <z_arm_fault+0xda>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    5f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5f38:	005b      	lsls	r3, r3, #1
    5f3a:	d51c      	bpl.n	5f76 <z_arm_fault+0xda>
		PR_EXC("  Fault escalation (see below)");
    5f3c:	4839      	ldr	r0, [pc, #228]	; (6024 <z_arm_fault+0x188>)
    5f3e:	4639      	mov	r1, r7
    5f40:	f019 f8c6 	bl	1f0d0 <log_0>
		if (SCB_MMFSR != 0) {
    5f44:	4b38      	ldr	r3, [pc, #224]	; (6028 <z_arm_fault+0x18c>)
    5f46:	781b      	ldrb	r3, [r3, #0]
    5f48:	b12b      	cbz	r3, 5f56 <z_arm_fault+0xba>
			reason = mem_manage_fault(esf, 1, recoverable);
    5f4a:	f10d 0107 	add.w	r1, sp, #7
    5f4e:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    5f50:	f7ff fece 	bl	5cf0 <mem_manage_fault.isra.0>
    5f54:	e00e      	b.n	5f74 <z_arm_fault+0xd8>
		} else if (SCB_BFSR != 0) {
    5f56:	4b35      	ldr	r3, [pc, #212]	; (602c <z_arm_fault+0x190>)
    5f58:	781b      	ldrb	r3, [r3, #0]
    5f5a:	b12b      	cbz	r3, 5f68 <z_arm_fault+0xcc>
			reason = bus_fault(esf, 1, recoverable);
    5f5c:	f10d 0107 	add.w	r1, sp, #7
    5f60:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    5f62:	f7ff ff2d 	bl	5dc0 <bus_fault.isra.0>
    5f66:	e005      	b.n	5f74 <z_arm_fault+0xd8>
		} else if (SCB_UFSR != 0) {
    5f68:	4b31      	ldr	r3, [pc, #196]	; (6030 <z_arm_fault+0x194>)
    5f6a:	881b      	ldrh	r3, [r3, #0]
    5f6c:	b29b      	uxth	r3, r3
    5f6e:	b113      	cbz	r3, 5f76 <z_arm_fault+0xda>
			reason = usage_fault(esf);
    5f70:	f7ff fe62 	bl	5c38 <usage_fault.isra.0>
    5f74:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    5f76:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5f7a:	b9cb      	cbnz	r3, 5fb0 <z_arm_fault+0x114>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    5f7c:	462b      	mov	r3, r5
    5f7e:	f103 0720 	add.w	r7, r3, #32
    5f82:	ad02      	add	r5, sp, #8
    5f84:	6818      	ldr	r0, [r3, #0]
    5f86:	6859      	ldr	r1, [r3, #4]
    5f88:	462a      	mov	r2, r5
    5f8a:	c203      	stmia	r2!, {r0, r1}
    5f8c:	3308      	adds	r3, #8
    5f8e:	42bb      	cmp	r3, r7
    5f90:	4615      	mov	r5, r2
    5f92:	d1f7      	bne.n	5f84 <z_arm_fault+0xe8>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    5f94:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5f96:	b39e      	cbz	r6, 6000 <z_arm_fault+0x164>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    5f98:	f3c3 0208 	ubfx	r2, r3, #0, #9
    5f9c:	b922      	cbnz	r2, 5fa8 <z_arm_fault+0x10c>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    5f9e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    5fa2:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    5fa6:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    5fa8:	a902      	add	r1, sp, #8
    5faa:	4620      	mov	r0, r4
    5fac:	f7ff fda4 	bl	5af8 <z_arm_fatal_error>
}
    5fb0:	b00a      	add	sp, #40	; 0x28
    5fb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    5fb6:	f10d 0107 	add.w	r1, sp, #7
    5fba:	2000      	movs	r0, #0
    5fbc:	e7c8      	b.n	5f50 <z_arm_fault+0xb4>
		reason = bus_fault(esf, 0, recoverable);
    5fbe:	f10d 0107 	add.w	r1, sp, #7
    5fc2:	2000      	movs	r0, #0
    5fc4:	e7cd      	b.n	5f62 <z_arm_fault+0xc6>
    5fc6:	4912      	ldr	r1, [pc, #72]	; (6010 <z_arm_fault+0x174>)
    5fc8:	4b12      	ldr	r3, [pc, #72]	; (6014 <z_arm_fault+0x178>)
	PR_FAULT_INFO(
    5fca:	481a      	ldr	r0, [pc, #104]	; (6034 <z_arm_fault+0x198>)
    5fcc:	1ac9      	subs	r1, r1, r3
    5fce:	08c9      	lsrs	r1, r1, #3
    5fd0:	0189      	lsls	r1, r1, #6
    5fd2:	f041 0101 	orr.w	r1, r1, #1
    5fd6:	e7aa      	b.n	5f2e <z_arm_fault+0x92>
    5fd8:	4a0e      	ldr	r2, [pc, #56]	; (6014 <z_arm_fault+0x178>)
    5fda:	4b0d      	ldr	r3, [pc, #52]	; (6010 <z_arm_fault+0x174>)
	PR_FAULT_INFO("***** %s %d) *****",
    5fdc:	4816      	ldr	r0, [pc, #88]	; (6038 <z_arm_fault+0x19c>)
    5fde:	4917      	ldr	r1, [pc, #92]	; (603c <z_arm_fault+0x1a0>)
    5fe0:	1a9b      	subs	r3, r3, r2
    5fe2:	08db      	lsrs	r3, r3, #3
    5fe4:	f417 7ff8 	tst.w	r7, #496	; 0x1f0
    5fe8:	ea4f 1383 	mov.w	r3, r3, lsl #6
    5fec:	bf18      	it	ne
    5fee:	4601      	movne	r1, r0
    5ff0:	f043 0301 	orr.w	r3, r3, #1
    5ff4:	4812      	ldr	r0, [pc, #72]	; (6040 <z_arm_fault+0x1a4>)
    5ff6:	f1a4 0210 	sub.w	r2, r4, #16
    5ffa:	f019 f88a 	bl	1f112 <log_2>
    5ffe:	e798      	b.n	5f32 <z_arm_fault+0x96>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    6000:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    6004:	f023 0301 	bic.w	r3, r3, #1
    6008:	e7cd      	b.n	5fa6 <z_arm_fault+0x10a>
    600a:	bf00      	nop
    600c:	e000ed00 	.word	0xe000ed00
    6010:	00024018 	.word	0x00024018
    6014:	00023ed8 	.word	0x00023ed8
    6018:	000261c9 	.word	0x000261c9
    601c:	000261f4 	.word	0x000261f4
    6020:	0002620b 	.word	0x0002620b
    6024:	0002622c 	.word	0x0002622c
    6028:	e000ed28 	.word	0xe000ed28
    602c:	e000ed29 	.word	0xe000ed29
    6030:	e000ed2a 	.word	0xe000ed2a
    6034:	0002624b 	.word	0x0002624b
    6038:	00026284 	.word	0x00026284
    603c:	0002626f 	.word	0x0002626f
    6040:	0002629d 	.word	0x0002629d

00006044 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    6044:	4a02      	ldr	r2, [pc, #8]	; (6050 <z_arm_fault_init+0xc>)
    6046:	6953      	ldr	r3, [r2, #20]
    6048:	f043 0310 	orr.w	r3, r3, #16
    604c:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    604e:	4770      	bx	lr
    6050:	e000ed00 	.word	0xe000ed00

00006054 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    6054:	4b04      	ldr	r3, [pc, #16]	; (6068 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    6056:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    6058:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    605a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    605c:	d003      	beq.n	6066 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    605e:	4903      	ldr	r1, [pc, #12]	; (606c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    6060:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    6064:	600a      	str	r2, [r1, #0]

00006066 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    6066:	4770      	bx	lr
	ldr r3, =_kernel
    6068:	20002e0c 	.word	0x20002e0c
	ldr r1, =_SCS_ICSR
    606c:	e000ed04 	.word	0xe000ed04

00006070 <z_arm_interrupt_init>:
    6070:	4804      	ldr	r0, [pc, #16]	; (6084 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    6072:	2300      	movs	r3, #0
    6074:	2120      	movs	r1, #32
    6076:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    6078:	3301      	adds	r3, #1
    607a:	2b30      	cmp	r3, #48	; 0x30
    607c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    6080:	d1f9      	bne.n	6076 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    6082:	4770      	bx	lr
    6084:	e000e100 	.word	0xe000e100

00006088 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    6088:	4b06      	ldr	r3, [pc, #24]	; (60a4 <z_impl_k_thread_abort+0x1c>)
    608a:	689b      	ldr	r3, [r3, #8]
    608c:	4283      	cmp	r3, r0
    608e:	d107      	bne.n	60a0 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    6090:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    6094:	b123      	cbz	r3, 60a0 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    6096:	4a04      	ldr	r2, [pc, #16]	; (60a8 <z_impl_k_thread_abort+0x20>)
    6098:	6853      	ldr	r3, [r2, #4]
    609a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    609e:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    60a0:	f017 bd20 	b.w	1dae4 <z_thread_abort>
    60a4:	20002e0c 	.word	0x20002e0c
    60a8:	e000ed00 	.word	0xe000ed00

000060ac <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    60ac:	4b02      	ldr	r3, [pc, #8]	; (60b8 <z_arm_configure_static_mpu_regions+0xc>)
    60ae:	4a03      	ldr	r2, [pc, #12]	; (60bc <z_arm_configure_static_mpu_regions+0x10>)
    60b0:	4803      	ldr	r0, [pc, #12]	; (60c0 <z_arm_configure_static_mpu_regions+0x14>)
    60b2:	2101      	movs	r1, #1
    60b4:	f000 b8a2 	b.w	61fc <arm_core_mpu_configure_static_mpu_regions>
    60b8:	20040000 	.word	0x20040000
    60bc:	20000000 	.word	0x20000000
    60c0:	0002442c 	.word	0x0002442c

000060c4 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    60c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    60c6:	4f28      	ldr	r7, [pc, #160]	; (6168 <mpu_configure_regions+0xa4>)
    60c8:	460e      	mov	r6, r1
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    60ca:	2100      	movs	r1, #0
    60cc:	42b1      	cmp	r1, r6
    60ce:	da14      	bge.n	60fa <mpu_configure_regions+0x36>
		if (regions[i].size == 0U) {
    60d0:	6844      	ldr	r4, [r0, #4]
    60d2:	2c00      	cmp	r4, #0
    60d4:	d045      	beq.n	6162 <mpu_configure_regions+0x9e>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    60d6:	b1c3      	cbz	r3, 610a <mpu_configure_regions+0x46>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    60d8:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    60dc:	ea14 0f0c 	tst.w	r4, ip
    60e0:	d00d      	beq.n	60fe <mpu_configure_regions+0x3a>
    60e2:	4a22      	ldr	r2, [pc, #136]	; (616c <mpu_configure_regions+0xa8>)
    60e4:	4b22      	ldr	r3, [pc, #136]	; (6170 <mpu_configure_regions+0xac>)
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    60e6:	4823      	ldr	r0, [pc, #140]	; (6174 <mpu_configure_regions+0xb0>)
    60e8:	1ad2      	subs	r2, r2, r3
    60ea:	08d2      	lsrs	r2, r2, #3
    60ec:	0192      	lsls	r2, r2, #6
    60ee:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    60f2:	f018 fffa 	bl	1f0ea <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    60f6:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    60fa:	4610      	mov	r0, r2
    60fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
    60fe:	2c1f      	cmp	r4, #31
    6100:	d9ef      	bls.n	60e2 <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
    6102:	6805      	ldr	r5, [r0, #0]
		&&
    6104:	ea1c 0f05 	tst.w	ip, r5
    6108:	d1eb      	bne.n	60e2 <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    610a:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    610c:	b2d5      	uxtb	r5, r2
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    610e:	f8d0 c008 	ldr.w	ip, [r0, #8]
	region_conf.base = new_region->start;
    6112:	6802      	ldr	r2, [r0, #0]
    6114:	d916      	bls.n	6144 <mpu_configure_regions+0x80>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    6116:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    611a:	d815      	bhi.n	6148 <mpu_configure_regions+0x84>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    611c:	3c01      	subs	r4, #1
    611e:	fab4 f484 	clz	r4, r4
    6122:	f1c4 041f 	rsb	r4, r4, #31
    6126:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    6128:	2d07      	cmp	r5, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    612a:	ea4c 0404 	orr.w	r4, ip, r4
    612e:	d90d      	bls.n	614c <mpu_configure_regions+0x88>
    6130:	4a0e      	ldr	r2, [pc, #56]	; (616c <mpu_configure_regions+0xa8>)
    6132:	4b0f      	ldr	r3, [pc, #60]	; (6170 <mpu_configure_regions+0xac>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    6134:	4810      	ldr	r0, [pc, #64]	; (6178 <mpu_configure_regions+0xb4>)
    6136:	1ad2      	subs	r2, r2, r3
    6138:	08d2      	lsrs	r2, r2, #3
    613a:	0192      	lsls	r2, r2, #6
    613c:	f042 0201 	orr.w	r2, r2, #1
    6140:	4629      	mov	r1, r5
    6142:	e7d6      	b.n	60f2 <mpu_configure_regions+0x2e>
		return REGION_32B;
    6144:	2408      	movs	r4, #8
    6146:	e7ef      	b.n	6128 <mpu_configure_regions+0x64>
		return REGION_4G;
    6148:	243e      	movs	r4, #62	; 0x3e
    614a:	e7ed      	b.n	6128 <mpu_configure_regions+0x64>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    614c:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    6150:	432a      	orrs	r2, r5
    6152:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    6156:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    615a:	60bd      	str	r5, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    615c:	60fa      	str	r2, [r7, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    615e:	613c      	str	r4, [r7, #16]
		reg_index++;
    6160:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
    6162:	3101      	adds	r1, #1
    6164:	300c      	adds	r0, #12
    6166:	e7b1      	b.n	60cc <mpu_configure_regions+0x8>
    6168:	e000ed90 	.word	0xe000ed90
    616c:	00024008 	.word	0x00024008
    6170:	00023ed8 	.word	0x00023ed8
    6174:	000262b4 	.word	0x000262b4
    6178:	000262d7 	.word	0x000262d7

0000617c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    617c:	4b03      	ldr	r3, [pc, #12]	; (618c <arm_core_mpu_enable+0x10>)
    617e:	2205      	movs	r2, #5
    6180:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    6182:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6186:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    618a:	4770      	bx	lr
    618c:	e000ed90 	.word	0xe000ed90

00006190 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    6190:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    6194:	4b01      	ldr	r3, [pc, #4]	; (619c <arm_core_mpu_disable+0xc>)
    6196:	2200      	movs	r2, #0
    6198:	605a      	str	r2, [r3, #4]
}
    619a:	4770      	bx	lr
    619c:	e000ed90 	.word	0xe000ed90

000061a0 <arm_mpu_init>:
 */
static int arm_mpu_init(const struct device *arg)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    61a0:	4913      	ldr	r1, [pc, #76]	; (61f0 <arm_mpu_init+0x50>)
    61a2:	6808      	ldr	r0, [r1, #0]
    61a4:	2808      	cmp	r0, #8
{
    61a6:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    61a8:	d81e      	bhi.n	61e8 <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    61aa:	f7ff fff1 	bl	6190 <arm_core_mpu_disable>
	MPU->RNR = index;
    61ae:	4c11      	ldr	r4, [pc, #68]	; (61f4 <arm_mpu_init+0x54>)
    61b0:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    61b2:	2200      	movs	r2, #0
    61b4:	4290      	cmp	r0, r2
    61b6:	f101 010c 	add.w	r1, r1, #12
    61ba:	d105      	bne.n	61c8 <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    61bc:	4b0e      	ldr	r3, [pc, #56]	; (61f8 <arm_mpu_init+0x58>)
    61be:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    61c0:	f7ff ffdc 	bl	617c <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    61c4:	2000      	movs	r0, #0
}
    61c6:	bd10      	pop	{r4, pc}
    61c8:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    61ca:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    61ce:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    61d2:	4313      	orrs	r3, r2
    61d4:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    61d8:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    61da:	f851 3c04 	ldr.w	r3, [r1, #-4]
    61de:	f043 0301 	orr.w	r3, r3, #1
    61e2:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    61e4:	3201      	adds	r2, #1
    61e6:	e7e5      	b.n	61b4 <arm_mpu_init+0x14>
		return -1;
    61e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    61ec:	e7eb      	b.n	61c6 <arm_mpu_init+0x26>
    61ee:	bf00      	nop
    61f0:	00024438 	.word	0x00024438
    61f4:	e000ed90 	.word	0xe000ed90
    61f8:	20003480 	.word	0x20003480

000061fc <arm_core_mpu_configure_static_mpu_regions>:
{
    61fc:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    61fe:	4c03      	ldr	r4, [pc, #12]	; (620c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    6200:	2301      	movs	r3, #1
    6202:	7822      	ldrb	r2, [r4, #0]
    6204:	f7ff ff5e 	bl	60c4 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    6208:	7020      	strb	r0, [r4, #0]
}
    620a:	bd10      	pop	{r4, pc}
    620c:	20003480 	.word	0x20003480

00006210 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    6210:	4b01      	ldr	r3, [pc, #4]	; (6218 <__stdout_hook_install+0x8>)
    6212:	6018      	str	r0, [r3, #0]
}
    6214:	4770      	bx	lr
    6216:	bf00      	nop
    6218:	20000204 	.word	0x20000204

0000621c <nordicsemi_nrf52_init>:
	__asm__ volatile(
    621c:	f04f 0320 	mov.w	r3, #32
    6220:	f3ef 8211 	mrs	r2, BASEPRI
    6224:	f383 8811 	msr	BASEPRI, r3
    6228:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    622c:	4906      	ldr	r1, [pc, #24]	; (6248 <nordicsemi_nrf52_init+0x2c>)
    622e:	2301      	movs	r3, #1
    6230:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    6234:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    6238:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    623c:	f382 8811 	msr	BASEPRI, r2
    6240:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    6244:	2000      	movs	r0, #0
    6246:	4770      	bx	lr
    6248:	4001e000 	.word	0x4001e000

0000624c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    624c:	b120      	cbz	r0, 6258 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    624e:	4b03      	ldr	r3, [pc, #12]	; (625c <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    6250:	0180      	lsls	r0, r0, #6
    6252:	f043 0301 	orr.w	r3, r3, #1
    6256:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    6258:	4770      	bx	lr
    625a:	bf00      	nop
    625c:	00024170 	.word	0x00024170

00006260 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    6260:	4b0e      	ldr	r3, [pc, #56]	; (629c <bt_hex_real+0x3c>)
    6262:	2940      	cmp	r1, #64	; 0x40
{
    6264:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
    6266:	bf28      	it	cs
    6268:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    626a:	4c0d      	ldr	r4, [pc, #52]	; (62a0 <bt_hex_real+0x40>)
    626c:	1846      	adds	r6, r0, r1
    626e:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
    6270:	42b0      	cmp	r0, r6
    6272:	f103 0302 	add.w	r3, r3, #2
    6276:	d104      	bne.n	6282 <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    6278:	2300      	movs	r3, #0
    627a:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    627e:	4807      	ldr	r0, [pc, #28]	; (629c <bt_hex_real+0x3c>)
    6280:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    6282:	7802      	ldrb	r2, [r0, #0]
    6284:	0912      	lsrs	r2, r2, #4
    6286:	5ca2      	ldrb	r2, [r4, r2]
    6288:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    628c:	f810 2b01 	ldrb.w	r2, [r0], #1
    6290:	f002 020f 	and.w	r2, r2, #15
    6294:	5ca2      	ldrb	r2, [r4, r2]
    6296:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    629a:	e7e9      	b.n	6270 <bt_hex_real+0x10>
    629c:	20003481 	.word	0x20003481
    62a0:	00026310 	.word	0x00026310

000062a4 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    62a4:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    62a6:	7803      	ldrb	r3, [r0, #0]
    62a8:	b08b      	sub	sp, #44	; 0x2c
    62aa:	4604      	mov	r4, r0
    62ac:	ad07      	add	r5, sp, #28
    62ae:	2b03      	cmp	r3, #3
    62b0:	d821      	bhi.n	62f6 <bt_addr_le_str_real+0x52>
    62b2:	e8df f003 	tbb	[pc, r3]
    62b6:	1a02      	.short	0x1a02
    62b8:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    62ba:	4912      	ldr	r1, [pc, #72]	; (6304 <bt_addr_le_str_real+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    62bc:	4628      	mov	r0, r5
    62be:	f01d fcb4 	bl	23c2a <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    62c2:	7863      	ldrb	r3, [r4, #1]
    62c4:	9304      	str	r3, [sp, #16]
    62c6:	78a3      	ldrb	r3, [r4, #2]
    62c8:	9303      	str	r3, [sp, #12]
    62ca:	78e3      	ldrb	r3, [r4, #3]
    62cc:	9302      	str	r3, [sp, #8]
    62ce:	7923      	ldrb	r3, [r4, #4]
    62d0:	9301      	str	r3, [sp, #4]
    62d2:	7963      	ldrb	r3, [r4, #5]
    62d4:	9300      	str	r3, [sp, #0]
    62d6:	4a0c      	ldr	r2, [pc, #48]	; (6308 <bt_addr_le_str_real+0x64>)
    62d8:	79a3      	ldrb	r3, [r4, #6]
    62da:	9505      	str	r5, [sp, #20]
    62dc:	211e      	movs	r1, #30
    62de:	480b      	ldr	r0, [pc, #44]	; (630c <bt_addr_le_str_real+0x68>)
    62e0:	f018 fb29 	bl	1e936 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    62e4:	4809      	ldr	r0, [pc, #36]	; (630c <bt_addr_le_str_real+0x68>)
    62e6:	b00b      	add	sp, #44	; 0x2c
    62e8:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    62ea:	4909      	ldr	r1, [pc, #36]	; (6310 <bt_addr_le_str_real+0x6c>)
    62ec:	e7e6      	b.n	62bc <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    62ee:	4909      	ldr	r1, [pc, #36]	; (6314 <bt_addr_le_str_real+0x70>)
    62f0:	e7e4      	b.n	62bc <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    62f2:	4909      	ldr	r1, [pc, #36]	; (6318 <bt_addr_le_str_real+0x74>)
    62f4:	e7e2      	b.n	62bc <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    62f6:	4a09      	ldr	r2, [pc, #36]	; (631c <bt_addr_le_str_real+0x78>)
    62f8:	210a      	movs	r1, #10
    62fa:	4628      	mov	r0, r5
    62fc:	f018 fb1b 	bl	1e936 <snprintk>
		break;
    6300:	e7df      	b.n	62c2 <bt_addr_le_str_real+0x1e>
    6302:	bf00      	nop
    6304:	000259a5 	.word	0x000259a5
    6308:	000259c7 	.word	0x000259c7
    630c:	20003502 	.word	0x20003502
    6310:	000259ac 	.word	0x000259ac
    6314:	000259b3 	.word	0x000259b3
    6318:	000259bd 	.word	0x000259bd
    631c:	000276ba 	.word	0x000276ba

00006320 <ecc_thread>:

	bt_recv(buf);
}

static void ecc_thread(void *p1, void *p2, void *p3)
{
    6320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6324:	4b6a      	ldr	r3, [pc, #424]	; (64d0 <ecc_thread+0x1b0>)
    6326:	4d6b      	ldr	r5, [pc, #428]	; (64d4 <ecc_thread+0x1b4>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6328:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 64f4 <ecc_thread+0x1d4>
	return z_impl_k_sem_take(sem, timeout);
    632c:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 64f8 <ecc_thread+0x1d8>
    6330:	1aed      	subs	r5, r5, r3
    6332:	08ed      	lsrs	r5, r5, #3
    6334:	4647      	mov	r7, r8
    6336:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    633a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    633e:	4648      	mov	r0, r9
    6340:	f017 fc5a 	bl	1dbf8 <z_impl_k_sem_take>
    6344:	f3bf 8f5b 	dmb	ish
    6348:	f8d8 4000 	ldr.w	r4, [r8]
    634c:	f3bf 8f5b 	dmb	ish
	while (true) {
		k_sem_take(&cmd_sem, K_FOREVER);

		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    6350:	f014 0401 	ands.w	r4, r4, #1
    6354:	d05a      	beq.n	640c <ecc_thread+0xec>
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
    6356:	f8df a194 	ldr.w	sl, [pc, #404]	; 64ec <ecc_thread+0x1cc>
    635a:	4c5f      	ldr	r4, [pc, #380]	; (64d8 <ecc_thread+0x1b8>)
	} while (memcmp(ecc.private_key_be, debug_private_key_be, 32) == 0);
    635c:	4e5f      	ldr	r6, [pc, #380]	; (64dc <ecc_thread+0x1bc>)
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
    635e:	4860      	ldr	r0, [pc, #384]	; (64e0 <ecc_thread+0x1c0>)
    6360:	4652      	mov	r2, sl
    6362:	4621      	mov	r1, r4
    6364:	f019 fb42 	bl	1f9ec <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
    6368:	bbe8      	cbnz	r0, 63e6 <ecc_thread+0xc6>
			BT_ERR("Failed to create ECC public/private pair");
    636a:	01a9      	lsls	r1, r5, #6
    636c:	485d      	ldr	r0, [pc, #372]	; (64e4 <ecc_thread+0x1c4>)
    636e:	f041 0101 	orr.w	r1, r1, #1
    6372:	f018 fead 	bl	1f0d0 <log_0>
			return BT_HCI_ERR_UNSPECIFIED;
    6376:	f04f 0a1f 	mov.w	sl, #31
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    637a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    637e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6382:	2001      	movs	r0, #1
    6384:	f000 f9dc 	bl	6740 <bt_buf_get_rx>
    6388:	f100 0608 	add.w	r6, r0, #8
    638c:	2102      	movs	r1, #2
    638e:	4604      	mov	r4, r0
    6390:	4630      	mov	r0, r6
    6392:	f01c fc18 	bl	22bc6 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    6396:	233e      	movs	r3, #62	; 0x3e
    6398:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    639a:	2342      	movs	r3, #66	; 0x42
    639c:	7043      	strb	r3, [r0, #1]
    639e:	2101      	movs	r1, #1
    63a0:	4630      	mov	r0, r6
    63a2:	f01c fc10 	bl	22bc6 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
    63a6:	2308      	movs	r3, #8
    63a8:	7003      	strb	r3, [r0, #0]
    63aa:	2141      	movs	r1, #65	; 0x41
    63ac:	4630      	mov	r0, r6
    63ae:	f01c fc0a 	bl	22bc6 <net_buf_simple_add>
    63b2:	4606      	mov	r6, r0
	evt->status = status;
    63b4:	f800 ab01 	strb.w	sl, [r0], #1
	if (status) {
    63b8:	f1ba 0f00 	cmp.w	sl, #0
    63bc:	d01d      	beq.n	63fa <ecc_thread+0xda>
__ssp_bos_icheck3(memset, void *, int)
    63be:	2240      	movs	r2, #64	; 0x40
    63c0:	2100      	movs	r1, #0
    63c2:	f01d fc2a 	bl	23c1a <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    63c6:	f3bf 8f5b 	dmb	ish
    63ca:	e857 3f00 	ldrex	r3, [r7]
    63ce:	f023 0301 	bic.w	r3, r3, #1
    63d2:	e847 3200 	strex	r2, r3, [r7]
    63d6:	2a00      	cmp	r2, #0
    63d8:	d1f7      	bne.n	63ca <ecc_thread+0xaa>
    63da:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    63de:	4620      	mov	r0, r4
	bt_recv(buf);
    63e0:	f001 fab0 	bl	7944 <bt_recv>
	while (true) {
    63e4:	e7a7      	b.n	6336 <ecc_thread+0x16>
	} while (memcmp(ecc.private_key_be, debug_private_key_be, 32) == 0);
    63e6:	2220      	movs	r2, #32
    63e8:	4631      	mov	r1, r6
    63ea:	4620      	mov	r0, r4
    63ec:	f01d fbf9 	bl	23be2 <memcmp>
    63f0:	2800      	cmp	r0, #0
    63f2:	d0b4      	beq.n	635e <ecc_thread+0x3e>
	return 0;
    63f4:	f04f 0a00 	mov.w	sl, #0
    63f8:	e7bf      	b.n	637a <ecc_thread+0x5a>
		sys_memcpy_swap(evt->key, ecc.public_key_be, 32);
    63fa:	4939      	ldr	r1, [pc, #228]	; (64e0 <ecc_thread+0x1c0>)
    63fc:	f01a fc3e 	bl	20c7c <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecc.public_key_be[32], 32);
    6400:	4939      	ldr	r1, [pc, #228]	; (64e8 <ecc_thread+0x1c8>)
    6402:	f106 0021 	add.w	r0, r6, #33	; 0x21
    6406:	f01a fc39 	bl	20c7c <sys_memcpy_swap.constprop.0>
    640a:	e7dc      	b.n	63c6 <ecc_thread+0xa6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    640c:	f3bf 8f5b 	dmb	ish
    6410:	f8d8 3000 	ldr.w	r3, [r8]
    6414:	f3bf 8f5b 	dmb	ish
			emulate_le_p256_public_key_cmd();
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
    6418:	079b      	lsls	r3, r3, #30
    641a:	d58c      	bpl.n	6336 <ecc_thread+0x16>
	ret = uECC_valid_public_key(ecc.public_key_be, &curve_secp256r1);
    641c:	4933      	ldr	r1, [pc, #204]	; (64ec <ecc_thread+0x1cc>)
    641e:	4830      	ldr	r0, [pc, #192]	; (64e0 <ecc_thread+0x1c0>)
    6420:	f01a f9ae 	bl	20780 <uECC_valid_public_key>
	if (ret < 0) {
    6424:	1e01      	subs	r1, r0, #0
    6426:	da38      	bge.n	649a <ecc_thread+0x17a>
		BT_ERR("public key is not valid (ret %d)", ret);
    6428:	01aa      	lsls	r2, r5, #6
    642a:	4831      	ldr	r0, [pc, #196]	; (64f0 <ecc_thread+0x1d0>)
    642c:	f042 0201 	orr.w	r2, r2, #1
    6430:	f018 fe5b 	bl	1f0ea <log_1>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    6434:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6438:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    643c:	2001      	movs	r0, #1
    643e:	f000 f97f 	bl	6740 <bt_buf_get_rx>
    6442:	f100 0a08 	add.w	sl, r0, #8
    6446:	2102      	movs	r1, #2
    6448:	4606      	mov	r6, r0
    644a:	4650      	mov	r0, sl
    644c:	f01c fbbb 	bl	22bc6 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    6450:	233e      	movs	r3, #62	; 0x3e
    6452:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    6454:	2322      	movs	r3, #34	; 0x22
    6456:	7043      	strb	r3, [r0, #1]
    6458:	2101      	movs	r1, #1
    645a:	4650      	mov	r0, sl
    645c:	f01c fbb3 	bl	22bc6 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
    6460:	2309      	movs	r3, #9
    6462:	7003      	strb	r3, [r0, #0]
    6464:	2121      	movs	r1, #33	; 0x21
    6466:	4650      	mov	r0, sl
    6468:	f01c fbad 	bl	22bc6 <net_buf_simple_add>
    646c:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
    646e:	3001      	adds	r0, #1
    6470:	bb3c      	cbnz	r4, 64c2 <ecc_thread+0x1a2>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
    6472:	221f      	movs	r2, #31
    6474:	701a      	strb	r2, [r3, #0]
    6476:	21ff      	movs	r1, #255	; 0xff
    6478:	2220      	movs	r2, #32
    647a:	f01d fbce 	bl	23c1a <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    647e:	f3bf 8f5b 	dmb	ish
    6482:	e857 3f00 	ldrex	r3, [r7]
    6486:	f023 0302 	bic.w	r3, r3, #2
    648a:	e847 3200 	strex	r2, r3, [r7]
    648e:	2a00      	cmp	r2, #0
    6490:	d1f7      	bne.n	6482 <ecc_thread+0x162>
    6492:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    6496:	4630      	mov	r0, r6
    6498:	e7a2      	b.n	63e0 <ecc_thread+0xc0>
		ret = uECC_shared_secret(ecc.public_key_be,
    649a:	490f      	ldr	r1, [pc, #60]	; (64d8 <ecc_thread+0x1b8>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    649c:	f3bf 8f5b 	dmb	ish
    64a0:	f8d8 3000 	ldr.w	r3, [r8]
    64a4:	480d      	ldr	r0, [pc, #52]	; (64dc <ecc_thread+0x1bc>)
    64a6:	f3bf 8f5b 	dmb	ish
    64aa:	f013 0f04 	tst.w	r3, #4
    64ae:	f101 0220 	add.w	r2, r1, #32
    64b2:	4b0e      	ldr	r3, [pc, #56]	; (64ec <ecc_thread+0x1cc>)
    64b4:	bf18      	it	ne
    64b6:	4601      	movne	r1, r0
    64b8:	4610      	mov	r0, r2
    64ba:	f019 fae4 	bl	1fa86 <uECC_shared_secret>
    64be:	4604      	mov	r4, r0
    64c0:	e7b8      	b.n	6434 <ecc_thread+0x114>
		evt->status = 0U;
    64c2:	2200      	movs	r2, #0
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
    64c4:	4906      	ldr	r1, [pc, #24]	; (64e0 <ecc_thread+0x1c0>)
		evt->status = 0U;
    64c6:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
    64c8:	f01a fbd8 	bl	20c7c <sys_memcpy_swap.constprop.0>
    64cc:	e7d7      	b.n	647e <ecc_thread+0x15e>
    64ce:	bf00      	nop
    64d0:	00023ed8 	.word	0x00023ed8
    64d4:	00023fb8 	.word	0x00023fb8
    64d8:	20003520 	.word	0x20003520
    64dc:	00026384 	.word	0x00026384
    64e0:	20003540 	.word	0x20003540
    64e4:	00026328 	.word	0x00026328
    64e8:	20003560 	.word	0x20003560
    64ec:	00024458 	.word	0x00024458
    64f0:	00026351 	.word	0x00026351
    64f4:	20001820 	.word	0x20001820
    64f8:	20000900 	.word	0x20000900

000064fc <le_gen_dhkey>:
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
}

static uint8_t le_gen_dhkey(uint8_t *key, uint8_t key_type)
{
    64fc:	b570      	push	{r4, r5, r6, lr}
    64fe:	4c21      	ldr	r4, [pc, #132]	; (6584 <le_gen_dhkey+0x88>)
    6500:	f3bf 8f5b 	dmb	ish
    6504:	6823      	ldr	r3, [r4, #0]
    6506:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    650a:	07da      	lsls	r2, r3, #31
{
    650c:	4606      	mov	r6, r0
    650e:	460d      	mov	r5, r1
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    6510:	d501      	bpl.n	6516 <le_gen_dhkey+0x1a>
		return BT_HCI_ERR_CMD_DISALLOWED;
    6512:	200c      	movs	r0, #12
			  key_type == BT_HCI_LE_KEY_TYPE_DEBUG);

	k_sem_give(&cmd_sem);

	return BT_HCI_ERR_SUCCESS;
}
    6514:	bd70      	pop	{r4, r5, r6, pc}
	if (key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
    6516:	2901      	cmp	r1, #1
    6518:	d831      	bhi.n	657e <le_gen_dhkey+0x82>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    651a:	f3bf 8f5b 	dmb	ish
    651e:	e854 3f00 	ldrex	r3, [r4]
    6522:	f043 0202 	orr.w	r2, r3, #2
    6526:	e844 2100 	strex	r1, r2, [r4]
    652a:	2900      	cmp	r1, #0
    652c:	d1f7      	bne.n	651e <le_gen_dhkey+0x22>
    652e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
    6532:	079b      	lsls	r3, r3, #30
    6534:	d4ed      	bmi.n	6512 <le_gen_dhkey+0x16>
	sys_memcpy_swap(ecc.public_key_be, key, 32);
    6536:	4814      	ldr	r0, [pc, #80]	; (6588 <le_gen_dhkey+0x8c>)
    6538:	4631      	mov	r1, r6
    653a:	f01a fb9f 	bl	20c7c <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecc.public_key_be[32], &key[32], 32);
    653e:	4813      	ldr	r0, [pc, #76]	; (658c <le_gen_dhkey+0x90>)
    6540:	f106 0120 	add.w	r1, r6, #32
    6544:	f01a fb9a 	bl	20c7c <sys_memcpy_swap.constprop.0>
    6548:	f3bf 8f5b 	dmb	ish
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	if (val) {
    654c:	b175      	cbz	r5, 656c <le_gen_dhkey+0x70>
    654e:	e854 3f00 	ldrex	r3, [r4]
    6552:	f043 0304 	orr.w	r3, r3, #4
    6556:	e844 3200 	strex	r2, r3, [r4]
    655a:	2a00      	cmp	r2, #0
    655c:	d1f7      	bne.n	654e <le_gen_dhkey+0x52>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    655e:	f3bf 8f5b 	dmb	ish
	z_impl_k_sem_give(sem);
    6562:	480b      	ldr	r0, [pc, #44]	; (6590 <le_gen_dhkey+0x94>)
    6564:	f017 fb22 	bl	1dbac <z_impl_k_sem_give>
    6568:	2000      	movs	r0, #0
    656a:	e7d3      	b.n	6514 <le_gen_dhkey+0x18>
    656c:	e854 3f00 	ldrex	r3, [r4]
    6570:	f023 0304 	bic.w	r3, r3, #4
    6574:	e844 3200 	strex	r2, r3, [r4]
    6578:	2a00      	cmp	r2, #0
    657a:	d0f0      	beq.n	655e <le_gen_dhkey+0x62>
    657c:	e7f6      	b.n	656c <le_gen_dhkey+0x70>
		return BT_HCI_ERR_INVALID_PARAM;
    657e:	2012      	movs	r0, #18
    6580:	e7c8      	b.n	6514 <le_gen_dhkey+0x18>
    6582:	bf00      	nop
    6584:	20001820 	.word	0x20001820
    6588:	20003540 	.word	0x20003540
    658c:	20003560 	.word	0x20003560
    6590:	20000900 	.word	0x20000900

00006594 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
    6594:	b570      	push	{r4, r5, r6, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    6596:	7d06      	ldrb	r6, [r0, #20]
    6598:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
    659a:	b976      	cbnz	r6, 65ba <bt_hci_ecc_send+0x26>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
    659c:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
    659e:	881d      	ldrh	r5, [r3, #0]
    65a0:	f242 0226 	movw	r2, #8230	; 0x2026
    65a4:	4295      	cmp	r5, r2
    65a6:	d045      	beq.n	6634 <bt_hci_ecc_send+0xa0>
    65a8:	d80f      	bhi.n	65ca <bt_hci_ecc_send+0x36>
    65aa:	f242 0201 	movw	r2, #8193	; 0x2001
    65ae:	4295      	cmp	r5, r2
    65b0:	d04f      	beq.n	6652 <bt_hci_ecc_send+0xbe>
    65b2:	f242 0325 	movw	r3, #8229	; 0x2025
    65b6:	429d      	cmp	r5, r3
    65b8:	d013      	beq.n	65e2 <bt_hci_ecc_send+0x4e>
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
    65ba:	4b2a      	ldr	r3, [pc, #168]	; (6664 <bt_hci_ecc_send+0xd0>)
    65bc:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    65c0:	4620      	mov	r0, r4
    65c2:	691b      	ldr	r3, [r3, #16]
}
    65c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
    65c8:	4718      	bx	r3
		switch (sys_le16_to_cpu(chdr->opcode)) {
    65ca:	f242 035e 	movw	r3, #8286	; 0x205e
    65ce:	429d      	cmp	r5, r3
    65d0:	d1f3      	bne.n	65ba <bt_hci_ecc_send+0x26>
 *
 * @return New beginning of the buffer data.
 */
static inline void *net_buf_pull(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull(&buf->b, len);
    65d2:	2103      	movs	r1, #3
    65d4:	3008      	adds	r0, #8
    65d6:	f01c fb16 	bl	22c06 <net_buf_simple_pull>
	cmd = (void *)buf->data;
    65da:	68a0      	ldr	r0, [r4, #8]
	status = le_gen_dhkey(cmd->key, cmd->key_type);
    65dc:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    65e0:	e02e      	b.n	6640 <bt_hci_ecc_send+0xac>
    65e2:	2103      	movs	r1, #3
    65e4:	3008      	adds	r0, #8
    65e6:	f01c fb0e 	bl	22c06 <net_buf_simple_pull>
	net_buf_unref(buf);
    65ea:	4620      	mov	r0, r4
    65ec:	f014 f806 	bl	1a5fc <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    65f0:	f3bf 8f5b 	dmb	ish
    65f4:	4b1c      	ldr	r3, [pc, #112]	; (6668 <bt_hci_ecc_send+0xd4>)
    65f6:	681a      	ldr	r2, [r3, #0]
    65f8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
    65fc:	0792      	lsls	r2, r2, #30
    65fe:	d507      	bpl.n	6610 <bt_hci_ecc_send+0x7c>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    6600:	260c      	movs	r6, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
    6602:	4631      	mov	r1, r6
    6604:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
    6608:	f01a fb14 	bl	20c34 <send_cmd_status>
}
    660c:	2000      	movs	r0, #0
    660e:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6610:	f3bf 8f5b 	dmb	ish
    6614:	e853 2f00 	ldrex	r2, [r3]
    6618:	f042 0101 	orr.w	r1, r2, #1
    661c:	e843 1000 	strex	r0, r1, [r3]
    6620:	2800      	cmp	r0, #0
    6622:	d1f7      	bne.n	6614 <bt_hci_ecc_send+0x80>
    6624:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
    6628:	07d3      	lsls	r3, r2, #31
    662a:	d4e9      	bmi.n	6600 <bt_hci_ecc_send+0x6c>
    662c:	480f      	ldr	r0, [pc, #60]	; (666c <bt_hci_ecc_send+0xd8>)
    662e:	f017 fabd 	bl	1dbac <z_impl_k_sem_give>
}
    6632:	e7e6      	b.n	6602 <bt_hci_ecc_send+0x6e>
    6634:	2103      	movs	r1, #3
    6636:	3008      	adds	r0, #8
    6638:	f01c fae5 	bl	22c06 <net_buf_simple_pull>
	status = le_gen_dhkey(cmd->key, BT_HCI_LE_KEY_TYPE_GENERATED);
    663c:	68a0      	ldr	r0, [r4, #8]
    663e:	4631      	mov	r1, r6
	status = le_gen_dhkey(cmd->key, cmd->key_type);
    6640:	f7ff ff5c 	bl	64fc <le_gen_dhkey>
    6644:	4606      	mov	r6, r0
	net_buf_unref(buf);
    6646:	4620      	mov	r0, r4
    6648:	f013 ffd8 	bl	1a5fc <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
    664c:	4631      	mov	r1, r6
    664e:	4628      	mov	r0, r5
    6650:	e7da      	b.n	6608 <bt_hci_ecc_send+0x74>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
    6652:	78da      	ldrb	r2, [r3, #3]
    6654:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    6658:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
    665a:	791a      	ldrb	r2, [r3, #4]
    665c:	f022 0201 	bic.w	r2, r2, #1
    6660:	711a      	strb	r2, [r3, #4]
}
    6662:	e7aa      	b.n	65ba <bt_hci_ecc_send+0x26>
    6664:	20000000 	.word	0x20000000
    6668:	20001820 	.word	0x20001820
    666c:	20000900 	.word	0x20000900

00006670 <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
    6670:	b510      	push	{r4, lr}
    6672:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    6674:	4c0c      	ldr	r4, [pc, #48]	; (66a8 <bt_hci_ecc_init+0x38>)
    6676:	490d      	ldr	r1, [pc, #52]	; (66ac <bt_hci_ecc_init+0x3c>)
    6678:	2200      	movs	r2, #0
    667a:	2300      	movs	r3, #0
    667c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    6680:	2300      	movs	r3, #0
    6682:	220a      	movs	r2, #10
    6684:	e9cd 2303 	strd	r2, r3, [sp, #12]
    6688:	e9cd 3301 	strd	r3, r3, [sp, #4]
    668c:	9300      	str	r3, [sp, #0]
    668e:	f44f 628a 	mov.w	r2, #1104	; 0x450
    6692:	4b07      	ldr	r3, [pc, #28]	; (66b0 <bt_hci_ecc_init+0x40>)
    6694:	4620      	mov	r0, r4
    6696:	f017 fb23 	bl	1dce0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    669a:	4906      	ldr	r1, [pc, #24]	; (66b4 <bt_hci_ecc_init+0x44>)
    669c:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_KERNEL_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
    669e:	b008      	add	sp, #32
    66a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    66a4:	f01c bff7 	b.w	23696 <z_impl_k_thread_name_set>
    66a8:	20000cb8 	.word	0x20000cb8
    66ac:	2000c1e0 	.word	0x2000c1e0
    66b0:	00006321 	.word	0x00006321
    66b4:	00026372 	.word	0x00026372

000066b8 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    66b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    66ba:	460b      	mov	r3, r1
	switch (src->type) {
    66bc:	7801      	ldrb	r1, [r0, #0]
    66be:	2901      	cmp	r1, #1
{
    66c0:	4602      	mov	r2, r0
	switch (src->type) {
    66c2:	d015      	beq.n	66f0 <uuid_to_uuid128+0x38>
    66c4:	2902      	cmp	r1, #2
    66c6:	d02b      	beq.n	6720 <uuid_to_uuid128+0x68>
    66c8:	b989      	cbnz	r1, 66ee <uuid_to_uuid128+0x36>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    66ca:	4c1c      	ldr	r4, [pc, #112]	; (673c <uuid_to_uuid128+0x84>)
    66cc:	461d      	mov	r5, r3
    66ce:	f104 0710 	add.w	r7, r4, #16
    66d2:	6820      	ldr	r0, [r4, #0]
    66d4:	6861      	ldr	r1, [r4, #4]
    66d6:	462e      	mov	r6, r5
    66d8:	c603      	stmia	r6!, {r0, r1}
    66da:	3408      	adds	r4, #8
    66dc:	42bc      	cmp	r4, r7
    66de:	4635      	mov	r5, r6
    66e0:	d1f7      	bne.n	66d2 <uuid_to_uuid128+0x1a>
		sys_put_le16(BT_UUID_16(src)->val,
    66e2:	8852      	ldrh	r2, [r2, #2]
		*dst = uuid128_base;
    66e4:	7821      	ldrb	r1, [r4, #0]
    66e6:	7031      	strb	r1, [r6, #0]
	dst[0] = val;
    66e8:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    66ea:	0a12      	lsrs	r2, r2, #8
    66ec:	739a      	strb	r2, [r3, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    66ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst = uuid128_base;
    66f0:	4c12      	ldr	r4, [pc, #72]	; (673c <uuid_to_uuid128+0x84>)
    66f2:	461d      	mov	r5, r3
    66f4:	f104 0710 	add.w	r7, r4, #16
    66f8:	6820      	ldr	r0, [r4, #0]
    66fa:	6861      	ldr	r1, [r4, #4]
    66fc:	462e      	mov	r6, r5
    66fe:	c603      	stmia	r6!, {r0, r1}
    6700:	3408      	adds	r4, #8
    6702:	42bc      	cmp	r4, r7
    6704:	4635      	mov	r5, r6
    6706:	d1f7      	bne.n	66f8 <uuid_to_uuid128+0x40>
		sys_put_le32(BT_UUID_32(src)->val,
    6708:	6852      	ldr	r2, [r2, #4]
		*dst = uuid128_base;
    670a:	7821      	ldrb	r1, [r4, #0]
    670c:	7031      	strb	r1, [r6, #0]
    670e:	f3c2 2107 	ubfx	r1, r2, #8, #8
	dst[0] = val;
    6712:	735a      	strb	r2, [r3, #13]
	sys_put_le16(val >> 16, &dst[2]);
    6714:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    6716:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    6718:	0a12      	lsrs	r2, r2, #8
    671a:	7399      	strb	r1, [r3, #14]
    671c:	741a      	strb	r2, [r3, #16]
}
    671e:	e7e6      	b.n	66ee <uuid_to_uuid128+0x36>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    6720:	f100 0510 	add.w	r5, r0, #16
    6724:	6810      	ldr	r0, [r2, #0]
    6726:	6851      	ldr	r1, [r2, #4]
    6728:	461c      	mov	r4, r3
    672a:	c403      	stmia	r4!, {r0, r1}
    672c:	3208      	adds	r2, #8
    672e:	42aa      	cmp	r2, r5
    6730:	4623      	mov	r3, r4
    6732:	d1f7      	bne.n	6724 <uuid_to_uuid128+0x6c>
    6734:	7812      	ldrb	r2, [r2, #0]
    6736:	7022      	strb	r2, [r4, #0]
    6738:	e7d9      	b.n	66ee <uuid_to_uuid128+0x36>
    673a:	bf00      	nop
    673c:	000263a4 	.word	0x000263a4

00006740 <bt_buf_get_rx>:
NET_BUF_POOL_DEFINE(acl_in_pool, CONFIG_BT_ACL_RX_COUNT, ACL_IN_SIZE,
		    sizeof(struct acl_data), bt_hci_host_num_completed_packets);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    6740:	b538      	push	{r3, r4, r5, lr}
    6742:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
    6744:	4805      	ldr	r0, [pc, #20]	; (675c <bt_buf_get_rx+0x1c>)
    6746:	f01c f9e8 	bl	22b1a <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    674a:	4604      	mov	r4, r0
    674c:	b120      	cbz	r0, 6758 <bt_buf_get_rx+0x18>
	net_buf_simple_reserve(&buf->b, reserve);
    674e:	2100      	movs	r1, #0
    6750:	3008      	adds	r0, #8
    6752:	f01c fa01 	bl	22b58 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    6756:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    6758:	4620      	mov	r0, r4
    675a:	bd38      	pop	{r3, r4, r5, pc}
    675c:	20000a30 	.word	0x20000a30

00006760 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    6760:	b570      	push	{r4, r5, r6, lr}
    6762:	4602      	mov	r2, r0
    6764:	460b      	mov	r3, r1
	__asm__ volatile(
    6766:	f04f 0120 	mov.w	r1, #32
    676a:	f3ef 8511 	mrs	r5, BASEPRI
    676e:	f381 8811 	msr	BASEPRI, r1
    6772:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    6776:	480c      	ldr	r0, [pc, #48]	; (67a8 <bt_buf_get_cmd_complete+0x48>)
	bt_dev.sent_cmd = NULL;
    6778:	2100      	movs	r1, #0
	buf = bt_dev.sent_cmd;
    677a:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
	bt_dev.sent_cmd = NULL;
    677e:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
	__asm__ volatile(
    6782:	f385 8811 	msr	BASEPRI, r5
    6786:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    678a:	b924      	cbnz	r4, 6796 <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    678c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    6790:	2001      	movs	r0, #1
    6792:	f7ff bfd5 	b.w	6740 <bt_buf_get_rx>
    6796:	2301      	movs	r3, #1
    6798:	f104 0008 	add.w	r0, r4, #8
    679c:	7523      	strb	r3, [r4, #20]
		buf->len = 0U;
    679e:	81a1      	strh	r1, [r4, #12]
    67a0:	f01c f9da 	bl	22b58 <net_buf_simple_reserve>
}
    67a4:	4620      	mov	r0, r4
    67a6:	bd70      	pop	{r4, r5, r6, pc}
    67a8:	20000000 	.word	0x20000000

000067ac <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    67ac:	b570      	push	{r4, r5, r6, lr}
    67ae:	4604      	mov	r4, r0
	switch (evt) {
    67b0:	2c0f      	cmp	r4, #15
{
    67b2:	460d      	mov	r5, r1
    67b4:	4610      	mov	r0, r2
    67b6:	4619      	mov	r1, r3
	switch (evt) {
    67b8:	d805      	bhi.n	67c6 <bt_buf_get_evt+0x1a>
    67ba:	2c0d      	cmp	r4, #13
    67bc:	d912      	bls.n	67e4 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    67be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    67c2:	f7ff bfcd 	b.w	6760 <bt_buf_get_cmd_complete>
	switch (evt) {
    67c6:	2c13      	cmp	r4, #19
    67c8:	d10c      	bne.n	67e4 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
    67ca:	480b      	ldr	r0, [pc, #44]	; (67f8 <bt_buf_get_evt+0x4c>)
    67cc:	f01c f9a5 	bl	22b1a <net_buf_alloc_fixed>
			if (buf) {
    67d0:	4604      	mov	r4, r0
    67d2:	b128      	cbz	r0, 67e0 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
    67d4:	2100      	movs	r1, #0
    67d6:	3008      	adds	r0, #8
    67d8:	f01c f9be 	bl	22b58 <net_buf_simple_reserve>
    67dc:	2301      	movs	r3, #1
    67de:	7523      	strb	r3, [r4, #20]
}
    67e0:	4620      	mov	r0, r4
    67e2:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
    67e4:	4602      	mov	r2, r0
    67e6:	460b      	mov	r3, r1
		if (discardable) {
    67e8:	b10d      	cbz	r5, 67ee <bt_buf_get_evt+0x42>
    67ea:	4804      	ldr	r0, [pc, #16]	; (67fc <bt_buf_get_evt+0x50>)
    67ec:	e7ee      	b.n	67cc <bt_buf_get_evt+0x20>
}
    67ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    67f2:	2001      	movs	r0, #1
    67f4:	f7ff bfa4 	b.w	6740 <bt_buf_get_rx>
    67f8:	20000a58 	.word	0x20000a58
    67fc:	200009b8 	.word	0x200009b8

00006800 <ver_str>:
{
    6800:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    6802:	4d0b      	ldr	r5, [pc, #44]	; (6830 <ver_str+0x30>)
{
    6804:	4606      	mov	r6, r0
	const char * const str[] = {
    6806:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    6808:	b08c      	sub	sp, #48	; 0x30
	const char * const str[] = {
    680a:	466c      	mov	r4, sp
    680c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    680e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6810:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6812:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    6816:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (ver < ARRAY_SIZE(str)) {
    681a:	2e0b      	cmp	r6, #11
		return str[ver];
    681c:	bf9b      	ittet	ls
    681e:	ab0c      	addls	r3, sp, #48	; 0x30
    6820:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	return "unknown";
    6824:	4803      	ldrhi	r0, [pc, #12]	; (6834 <ver_str+0x34>)
		return str[ver];
    6826:	f856 0c30 	ldrls.w	r0, [r6, #-48]
}
    682a:	b00c      	add	sp, #48	; 0x30
    682c:	bd70      	pop	{r4, r5, r6, pc}
    682e:	bf00      	nop
    6830:	000240f0 	.word	0x000240f0
    6834:	000264a7 	.word	0x000264a7

00006838 <hci_data_buf_overflow>:
    6838:	4905      	ldr	r1, [pc, #20]	; (6850 <hci_data_buf_overflow+0x18>)
    683a:	4a06      	ldr	r2, [pc, #24]	; (6854 <hci_data_buf_overflow+0x1c>)
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
    683c:	6883      	ldr	r3, [r0, #8]
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    683e:	4806      	ldr	r0, [pc, #24]	; (6858 <hci_data_buf_overflow+0x20>)
    6840:	1a52      	subs	r2, r2, r1
    6842:	08d2      	lsrs	r2, r2, #3
    6844:	0192      	lsls	r2, r2, #6
    6846:	7819      	ldrb	r1, [r3, #0]
    6848:	f042 0202 	orr.w	r2, r2, #2
    684c:	f018 bc4d 	b.w	1f0ea <log_1>
    6850:	00023ed8 	.word	0x00023ed8
    6854:	00023fb0 	.word	0x00023fb0
    6858:	000264af 	.word	0x000264af

0000685c <le_data_len_change>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    685c:	6883      	ldr	r3, [r0, #8]
{
    685e:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    6860:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    6862:	4620      	mov	r0, r4
    6864:	f002 fcce 	bl	9204 <bt_conn_lookup_handle>
	if (!conn) {
    6868:	b960      	cbnz	r0, 6884 <le_data_len_change+0x28>
    686a:	4a08      	ldr	r2, [pc, #32]	; (688c <le_data_len_change+0x30>)
    686c:	4b08      	ldr	r3, [pc, #32]	; (6890 <le_data_len_change+0x34>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    686e:	4809      	ldr	r0, [pc, #36]	; (6894 <le_data_len_change+0x38>)
    6870:	1ad2      	subs	r2, r2, r3
    6872:	08d2      	lsrs	r2, r2, #3
    6874:	0192      	lsls	r2, r2, #6
    6876:	4621      	mov	r1, r4
    6878:	f042 0201 	orr.w	r2, r2, #1
}
    687c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    6880:	f018 bc33 	b.w	1f0ea <log_1>
}
    6884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
    6888:	f01a be1a 	b.w	214c0 <bt_conn_unref>
    688c:	00023fb0 	.word	0x00023fb0
    6890:	00023ed8 	.word	0x00023ed8
    6894:	000264d7 	.word	0x000264d7

00006898 <hci_disconn_complete_prio>:
{
    6898:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    689a:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
    689c:	781a      	ldrb	r2, [r3, #0]
    689e:	b9da      	cbnz	r2, 68d8 <hci_disconn_complete_prio+0x40>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    68a0:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    68a4:	4628      	mov	r0, r5
    68a6:	f002 fcad 	bl	9204 <bt_conn_lookup_handle>
	if (!conn) {
    68aa:	4604      	mov	r4, r0
    68ac:	b960      	cbnz	r0, 68c8 <hci_disconn_complete_prio+0x30>
    68ae:	4b0b      	ldr	r3, [pc, #44]	; (68dc <hci_disconn_complete_prio+0x44>)
    68b0:	4a0b      	ldr	r2, [pc, #44]	; (68e0 <hci_disconn_complete_prio+0x48>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    68b2:	480c      	ldr	r0, [pc, #48]	; (68e4 <hci_disconn_complete_prio+0x4c>)
    68b4:	1ad2      	subs	r2, r2, r3
    68b6:	08d2      	lsrs	r2, r2, #3
    68b8:	0192      	lsls	r2, r2, #6
    68ba:	4629      	mov	r1, r5
    68bc:	f042 0201 	orr.w	r2, r2, #1
}
    68c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    68c4:	f018 bc11 	b.w	1f0ea <log_1>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    68c8:	2101      	movs	r1, #1
    68ca:	f002 fca7 	bl	921c <bt_conn_set_state>
	bt_conn_unref(conn);
    68ce:	4620      	mov	r0, r4
}
    68d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    68d4:	f01a bdf4 	b.w	214c0 <bt_conn_unref>
}
    68d8:	bd38      	pop	{r3, r4, r5, pc}
    68da:	bf00      	nop
    68dc:	00023ed8 	.word	0x00023ed8
    68e0:	00023fb0 	.word	0x00023fb0
    68e4:	000264fb 	.word	0x000264fb

000068e8 <hci_disconn_complete>:
{
    68e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    68ea:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    68ec:	7835      	ldrb	r5, [r6, #0]
    68ee:	b9f5      	cbnz	r5, 692e <hci_disconn_complete+0x46>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    68f0:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    68f4:	4638      	mov	r0, r7
    68f6:	f002 fc85 	bl	9204 <bt_conn_lookup_handle>
	if (!conn) {
    68fa:	4604      	mov	r4, r0
    68fc:	b960      	cbnz	r0, 6918 <hci_disconn_complete+0x30>
    68fe:	4b0c      	ldr	r3, [pc, #48]	; (6930 <hci_disconn_complete+0x48>)
    6900:	4a0c      	ldr	r2, [pc, #48]	; (6934 <hci_disconn_complete+0x4c>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    6902:	480d      	ldr	r0, [pc, #52]	; (6938 <hci_disconn_complete+0x50>)
    6904:	1ad2      	subs	r2, r2, r3
    6906:	08d2      	lsrs	r2, r2, #3
    6908:	0192      	lsls	r2, r2, #6
    690a:	4639      	mov	r1, r7
    690c:	f042 0201 	orr.w	r2, r2, #1
}
    6910:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    6914:	f018 bbe9 	b.w	1f0ea <log_1>
	conn->err = evt->reason;
    6918:	78f3      	ldrb	r3, [r6, #3]
    691a:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    691c:	4629      	mov	r1, r5
    691e:	f002 fc7d 	bl	921c <bt_conn_set_state>
	conn->handle = 0U;
    6922:	8025      	strh	r5, [r4, #0]
		bt_conn_unref(conn);
    6924:	4620      	mov	r0, r4
}
    6926:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    692a:	f01a bdc9 	b.w	214c0 <bt_conn_unref>
}
    692e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6930:	00023ed8 	.word	0x00023ed8
    6934:	00023fb0 	.word	0x00023fb0
    6938:	000264fb 	.word	0x000264fb

0000693c <hci_hardware_error>:
{
    693c:	b508      	push	{r3, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    693e:	2101      	movs	r1, #1
    6940:	3008      	adds	r0, #8
    6942:	f01c f968 	bl	22c16 <net_buf_simple_pull_mem>
    6946:	4b06      	ldr	r3, [pc, #24]	; (6960 <hci_hardware_error+0x24>)
    6948:	4a06      	ldr	r2, [pc, #24]	; (6964 <hci_hardware_error+0x28>)
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    694a:	7801      	ldrb	r1, [r0, #0]
    694c:	4806      	ldr	r0, [pc, #24]	; (6968 <hci_hardware_error+0x2c>)
    694e:	1ad2      	subs	r2, r2, r3
    6950:	08d2      	lsrs	r2, r2, #3
    6952:	0192      	lsls	r2, r2, #6
}
    6954:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    6958:	f042 0201 	orr.w	r2, r2, #1
    695c:	f018 bbc5 	b.w	1f0ea <log_1>
    6960:	00023ed8 	.word	0x00023ed8
    6964:	00023fb0 	.word	0x00023fb0
    6968:	00026521 	.word	0x00026521

0000696c <hci_vendor_event>:
{
    696c:	b510      	push	{r4, lr}
    696e:	4a0a      	ldr	r2, [pc, #40]	; (6998 <hci_vendor_event+0x2c>)
    6970:	4c0a      	ldr	r4, [pc, #40]	; (699c <hci_vendor_event+0x30>)
		BT_WARN("Unhandled vendor-specific event: %s",
    6972:	8981      	ldrh	r1, [r0, #12]
    6974:	6880      	ldr	r0, [r0, #8]
    6976:	1aa4      	subs	r4, r4, r2
    6978:	f7ff fc72 	bl	6260 <bt_hex_real>
    697c:	f7fd f92c 	bl	3bd8 <log_strdup>
    6980:	08e4      	lsrs	r4, r4, #3
    6982:	01a4      	lsls	r4, r4, #6
    6984:	f044 0402 	orr.w	r4, r4, #2
    6988:	4601      	mov	r1, r0
    698a:	4622      	mov	r2, r4
    698c:	4804      	ldr	r0, [pc, #16]	; (69a0 <hci_vendor_event+0x34>)
}
    698e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    6992:	f018 bbaa 	b.w	1f0ea <log_1>
    6996:	bf00      	nop
    6998:	00023ed8 	.word	0x00023ed8
    699c:	00023fb0 	.word	0x00023fb0
    69a0:	00026543 	.word	0x00026543

000069a4 <hci_encrypt_key_refresh_complete>:
{
    69a4:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
    69a6:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    69a8:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
    69ac:	781d      	ldrb	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    69ae:	4630      	mov	r0, r6
    69b0:	f002 fc28 	bl	9204 <bt_conn_lookup_handle>
	if (!conn) {
    69b4:	4604      	mov	r4, r0
    69b6:	b960      	cbnz	r0, 69d2 <hci_encrypt_key_refresh_complete+0x2e>
    69b8:	4a1e      	ldr	r2, [pc, #120]	; (6a34 <hci_encrypt_key_refresh_complete+0x90>)
    69ba:	4b1f      	ldr	r3, [pc, #124]	; (6a38 <hci_encrypt_key_refresh_complete+0x94>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    69bc:	481f      	ldr	r0, [pc, #124]	; (6a3c <hci_encrypt_key_refresh_complete+0x98>)
    69be:	1ad2      	subs	r2, r2, r3
    69c0:	08d2      	lsrs	r2, r2, #3
    69c2:	0192      	lsls	r2, r2, #6
    69c4:	4631      	mov	r1, r6
    69c6:	f042 0201 	orr.w	r2, r2, #1
}
    69ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    69ce:	f018 bb8c 	b.w	1f0ea <log_1>
	if (status) {
    69d2:	b165      	cbz	r5, 69ee <hci_encrypt_key_refresh_complete+0x4a>
	switch (hci_err) {
    69d4:	2d29      	cmp	r5, #41	; 0x29
    69d6:	bf96      	itet	ls
    69d8:	4b19      	ldrls	r3, [pc, #100]	; (6a40 <hci_encrypt_key_refresh_complete+0x9c>)
	if (status) {
    69da:	2208      	movhi	r2, #8
    69dc:	5d5a      	ldrbls	r2, [r3, r5]
		bt_conn_security_changed(conn, status,
    69de:	4629      	mov	r1, r5
    69e0:	f002 fa6e 	bl	8ec0 <bt_conn_security_changed>
	bt_conn_unref(conn);
    69e4:	4620      	mov	r0, r4
}
    69e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    69ea:	f01a bd69 	b.w	214c0 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    69ee:	7883      	ldrb	r3, [r0, #2]
    69f0:	2b01      	cmp	r3, #1
    69f2:	d107      	bne.n	6a04 <hci_encrypt_key_refresh_complete+0x60>
		bt_smp_update_keys(conn);
    69f4:	f006 fa18 	bl	ce28 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
    69f8:	4620      	mov	r0, r4
    69fa:	f01a f9d4 	bl	20da6 <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
    69fe:	2800      	cmp	r0, #0
    6a00:	bf08      	it	eq
    6a02:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
    6a04:	4b0e      	ldr	r3, [pc, #56]	; (6a40 <hci_encrypt_key_refresh_complete+0x9c>)
    6a06:	4629      	mov	r1, r5
    6a08:	5d5a      	ldrb	r2, [r3, r5]
    6a0a:	4620      	mov	r0, r4
    6a0c:	f002 fa58 	bl	8ec0 <bt_conn_security_changed>
	if (status) {
    6a10:	2d00      	cmp	r5, #0
    6a12:	d0e7      	beq.n	69e4 <hci_encrypt_key_refresh_complete+0x40>
    6a14:	4b08      	ldr	r3, [pc, #32]	; (6a38 <hci_encrypt_key_refresh_complete+0x94>)
    6a16:	4907      	ldr	r1, [pc, #28]	; (6a34 <hci_encrypt_key_refresh_complete+0x90>)
		BT_ERR("Failed to set required security level");
    6a18:	480a      	ldr	r0, [pc, #40]	; (6a44 <hci_encrypt_key_refresh_complete+0xa0>)
    6a1a:	1ac9      	subs	r1, r1, r3
    6a1c:	08c9      	lsrs	r1, r1, #3
    6a1e:	0189      	lsls	r1, r1, #6
    6a20:	f041 0101 	orr.w	r1, r1, #1
    6a24:	f018 fb54 	bl	1f0d0 <log_0>
		bt_conn_disconnect(conn, status);
    6a28:	4629      	mov	r1, r5
    6a2a:	4620      	mov	r0, r4
    6a2c:	f01a fd83 	bl	21536 <bt_conn_disconnect>
    6a30:	e7d8      	b.n	69e4 <hci_encrypt_key_refresh_complete+0x40>
    6a32:	bf00      	nop
    6a34:	00023fb0 	.word	0x00023fb0
    6a38:	00023ed8 	.word	0x00023ed8
    6a3c:	000264fb 	.word	0x000264fb
    6a40:	00026ae2 	.word	0x00026ae2
    6a44:	00026567 	.word	0x00026567

00006a48 <hci_encrypt_change>:
{
    6a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
    6a4a:	6886      	ldr	r6, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    6a4c:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	uint8_t status = evt->status;
    6a50:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
    6a52:	4638      	mov	r0, r7
    6a54:	f002 fbd6 	bl	9204 <bt_conn_lookup_handle>
	if (!conn) {
    6a58:	4604      	mov	r4, r0
    6a5a:	b960      	cbnz	r0, 6a76 <hci_encrypt_change+0x2e>
    6a5c:	4b1f      	ldr	r3, [pc, #124]	; (6adc <hci_encrypt_change+0x94>)
    6a5e:	4a20      	ldr	r2, [pc, #128]	; (6ae0 <hci_encrypt_change+0x98>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    6a60:	4820      	ldr	r0, [pc, #128]	; (6ae4 <hci_encrypt_change+0x9c>)
    6a62:	1ad2      	subs	r2, r2, r3
    6a64:	08d2      	lsrs	r2, r2, #3
    6a66:	0192      	lsls	r2, r2, #6
    6a68:	4639      	mov	r1, r7
    6a6a:	f042 0201 	orr.w	r2, r2, #1
}
    6a6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    6a72:	f018 bb3a 	b.w	1f0ea <log_1>
	if (status) {
    6a76:	b165      	cbz	r5, 6a92 <hci_encrypt_change+0x4a>
	switch (hci_err) {
    6a78:	2d29      	cmp	r5, #41	; 0x29
    6a7a:	bf96      	itet	ls
    6a7c:	4b1a      	ldrls	r3, [pc, #104]	; (6ae8 <hci_encrypt_change+0xa0>)
	if (status) {
    6a7e:	2208      	movhi	r2, #8
    6a80:	5d5a      	ldrbls	r2, [r3, r5]
		bt_conn_security_changed(conn, status,
    6a82:	4629      	mov	r1, r5
    6a84:	f002 fa1c 	bl	8ec0 <bt_conn_security_changed>
	bt_conn_unref(conn);
    6a88:	4620      	mov	r0, r4
}
    6a8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    6a8e:	f01a bd17 	b.w	214c0 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    6a92:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
    6a94:	78f3      	ldrb	r3, [r6, #3]
    6a96:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
    6a98:	2a01      	cmp	r2, #1
    6a9a:	d108      	bne.n	6aae <hci_encrypt_change+0x66>
		if (conn->encrypt) {
    6a9c:	b10b      	cbz	r3, 6aa2 <hci_encrypt_change+0x5a>
			bt_smp_update_keys(conn);
    6a9e:	f006 f9c3 	bl	ce28 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
    6aa2:	4620      	mov	r0, r4
    6aa4:	f01a f97f 	bl	20da6 <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
    6aa8:	2800      	cmp	r0, #0
    6aaa:	bf08      	it	eq
    6aac:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
    6aae:	4b0e      	ldr	r3, [pc, #56]	; (6ae8 <hci_encrypt_change+0xa0>)
    6ab0:	4629      	mov	r1, r5
    6ab2:	5d5a      	ldrb	r2, [r3, r5]
    6ab4:	4620      	mov	r0, r4
    6ab6:	f002 fa03 	bl	8ec0 <bt_conn_security_changed>
	if (status) {
    6aba:	2d00      	cmp	r5, #0
    6abc:	d0e4      	beq.n	6a88 <hci_encrypt_change+0x40>
    6abe:	4b07      	ldr	r3, [pc, #28]	; (6adc <hci_encrypt_change+0x94>)
    6ac0:	4907      	ldr	r1, [pc, #28]	; (6ae0 <hci_encrypt_change+0x98>)
		BT_ERR("Failed to set required security level");
    6ac2:	480a      	ldr	r0, [pc, #40]	; (6aec <hci_encrypt_change+0xa4>)
    6ac4:	1ac9      	subs	r1, r1, r3
    6ac6:	08c9      	lsrs	r1, r1, #3
    6ac8:	0189      	lsls	r1, r1, #6
    6aca:	f041 0101 	orr.w	r1, r1, #1
    6ace:	f018 faff 	bl	1f0d0 <log_0>
		bt_conn_disconnect(conn, status);
    6ad2:	4629      	mov	r1, r5
    6ad4:	4620      	mov	r0, r4
    6ad6:	f01a fd2e 	bl	21536 <bt_conn_disconnect>
    6ada:	e7d5      	b.n	6a88 <hci_encrypt_change+0x40>
    6adc:	00023ed8 	.word	0x00023ed8
    6ae0:	00023fb0 	.word	0x00023fb0
    6ae4:	000264fb 	.word	0x000264fb
    6ae8:	00026ae2 	.word	0x00026ae2
    6aec:	00026567 	.word	0x00026567

00006af0 <hci_cmd_done>:
{
    6af0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6af4:	4607      	mov	r7, r0
    6af6:	b085      	sub	sp, #20
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    6af8:	7990      	ldrb	r0, [r2, #6]
    6afa:	4e43      	ldr	r6, [pc, #268]	; (6c08 <hci_cmd_done+0x118>)
{
    6afc:	4688      	mov	r8, r1
    6afe:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    6b00:	f013 fcc0 	bl	1a484 <net_buf_pool_get>
    6b04:	4286      	cmp	r6, r0
    6b06:	d016      	beq.n	6b36 <hci_cmd_done+0x46>
    6b08:	4b40      	ldr	r3, [pc, #256]	; (6c0c <hci_cmd_done+0x11c>)
    6b0a:	4d41      	ldr	r5, [pc, #260]	; (6c10 <hci_cmd_done+0x120>)
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    6b0c:	79a0      	ldrb	r0, [r4, #6]
    6b0e:	9700      	str	r7, [sp, #0]
    6b10:	1aed      	subs	r5, r5, r3
    6b12:	08ed      	lsrs	r5, r5, #3
    6b14:	9001      	str	r0, [sp, #4]
    6b16:	f013 fcb5 	bl	1a484 <net_buf_pool_get>
    6b1a:	01ad      	lsls	r5, r5, #6
    6b1c:	f045 0502 	orr.w	r5, r5, #2
    6b20:	e9cd 0602 	strd	r0, r6, [sp, #8]
    6b24:	462b      	mov	r3, r5
    6b26:	483b      	ldr	r0, [pc, #236]	; (6c14 <hci_cmd_done+0x124>)
    6b28:	2204      	movs	r2, #4
    6b2a:	4669      	mov	r1, sp
    6b2c:	f018 fb26 	bl	1f17c <log_n>
}
    6b30:	b005      	add	sp, #20
    6b32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
    6b36:	4620      	mov	r0, r4
    6b38:	f013 fcac 	bl	1a494 <net_buf_id>
    6b3c:	4d36      	ldr	r5, [pc, #216]	; (6c18 <hci_cmd_done+0x128>)
    6b3e:	f04f 090c 	mov.w	r9, #12
    6b42:	fb09 5300 	mla	r3, r9, r0, r5
    6b46:	885b      	ldrh	r3, [r3, #2]
    6b48:	42bb      	cmp	r3, r7
    6b4a:	d011      	beq.n	6b70 <hci_cmd_done+0x80>
    6b4c:	4b2f      	ldr	r3, [pc, #188]	; (6c0c <hci_cmd_done+0x11c>)
    6b4e:	4e30      	ldr	r6, [pc, #192]	; (6c10 <hci_cmd_done+0x120>)
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    6b50:	4620      	mov	r0, r4
    6b52:	1af6      	subs	r6, r6, r3
    6b54:	f013 fc9e 	bl	1a494 <net_buf_id>
    6b58:	08f6      	lsrs	r6, r6, #3
    6b5a:	fb09 5000 	mla	r0, r9, r0, r5
    6b5e:	01b6      	lsls	r6, r6, #6
    6b60:	f046 0602 	orr.w	r6, r6, #2
    6b64:	8842      	ldrh	r2, [r0, #2]
    6b66:	482d      	ldr	r0, [pc, #180]	; (6c1c <hci_cmd_done+0x12c>)
    6b68:	4633      	mov	r3, r6
    6b6a:	4639      	mov	r1, r7
    6b6c:	f018 fad1 	bl	1f112 <log_2>
	if (cmd(buf)->state && !status) {
    6b70:	4620      	mov	r0, r4
    6b72:	f013 fc8f 	bl	1a494 <net_buf_id>
    6b76:	260c      	movs	r6, #12
    6b78:	fb06 5000 	mla	r0, r6, r0, r5
    6b7c:	6843      	ldr	r3, [r0, #4]
    6b7e:	b1f3      	cbz	r3, 6bbe <hci_cmd_done+0xce>
    6b80:	f1b8 0f00 	cmp.w	r8, #0
    6b84:	d11b      	bne.n	6bbe <hci_cmd_done+0xce>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    6b86:	4620      	mov	r0, r4
    6b88:	f013 fc84 	bl	1a494 <net_buf_id>
    6b8c:	fb06 5000 	mla	r0, r6, r0, r5
	atomic_val_t mask = ATOMIC_MASK(bit);
    6b90:	2201      	movs	r2, #1
    6b92:	6840      	ldr	r0, [r0, #4]
    6b94:	e9d0 3100 	ldrd	r3, r1, [r0]
	if (val) {
    6b98:	7a00      	ldrb	r0, [r0, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
    6b9a:	f001 061f 	and.w	r6, r1, #31
    6b9e:	40b2      	lsls	r2, r6
	if (val) {
    6ba0:	0949      	lsrs	r1, r1, #5
    6ba2:	b320      	cbz	r0, 6bee <hci_cmd_done+0xfe>
    6ba4:	f3bf 8f5b 	dmb	ish
    6ba8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    6bac:	e853 1f00 	ldrex	r1, [r3]
    6bb0:	4311      	orrs	r1, r2
    6bb2:	e843 1000 	strex	r0, r1, [r3]
    6bb6:	2800      	cmp	r0, #0
    6bb8:	d1f8      	bne.n	6bac <hci_cmd_done+0xbc>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6bba:	f3bf 8f5b 	dmb	ish
	if (cmd(buf)->sync) {
    6bbe:	4620      	mov	r0, r4
    6bc0:	f013 fc68 	bl	1a494 <net_buf_id>
    6bc4:	260c      	movs	r6, #12
    6bc6:	fb06 5000 	mla	r0, r6, r0, r5
    6bca:	6883      	ldr	r3, [r0, #8]
    6bcc:	2b00      	cmp	r3, #0
    6bce:	d0af      	beq.n	6b30 <hci_cmd_done+0x40>
		cmd(buf)->status = status;
    6bd0:	4620      	mov	r0, r4
    6bd2:	f013 fc5f 	bl	1a494 <net_buf_id>
    6bd6:	4370      	muls	r0, r6
    6bd8:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    6bdc:	4620      	mov	r0, r4
    6bde:	f013 fc59 	bl	1a494 <net_buf_id>
    6be2:	fb06 5500 	mla	r5, r6, r0, r5
    6be6:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
    6be8:	f016 ffe0 	bl	1dbac <z_impl_k_sem_give>
}
    6bec:	e7a0      	b.n	6b30 <hci_cmd_done+0x40>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    6bee:	43d2      	mvns	r2, r2
    6bf0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    6bf4:	f3bf 8f5b 	dmb	ish
    6bf8:	e853 1f00 	ldrex	r1, [r3]
    6bfc:	4011      	ands	r1, r2
    6bfe:	e843 1000 	strex	r0, r1, [r3]
    6c02:	2800      	cmp	r0, #0
    6c04:	d0d9      	beq.n	6bba <hci_cmd_done+0xca>
    6c06:	e7f7      	b.n	6bf8 <hci_cmd_done+0x108>
    6c08:	20000a08 	.word	0x20000a08
    6c0c:	00023ed8 	.word	0x00023ed8
    6c10:	00023fb0 	.word	0x00023fb0
    6c14:	0002658d 	.word	0x0002658d
    6c18:	20001824 	.word	0x20001824
    6c1c:	000265c2 	.word	0x000265c2

00006c20 <handle_event>:
{
    6c20:	b573      	push	{r0, r1, r4, r5, r6, lr}
    6c22:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    6c26:	4605      	mov	r5, r0
    6c28:	4608      	mov	r0, r1
		if (handler->event != event) {
    6c2a:	7811      	ldrb	r1, [r2, #0]
    6c2c:	42a9      	cmp	r1, r5
    6c2e:	d01a      	beq.n	6c66 <handle_event+0x46>
	for (i = 0; i < num_handlers; i++) {
    6c30:	3208      	adds	r2, #8
    6c32:	429a      	cmp	r2, r3
    6c34:	d1f9      	bne.n	6c2a <handle_event+0xa>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    6c36:	8986      	ldrh	r6, [r0, #12]
    6c38:	4b16      	ldr	r3, [pc, #88]	; (6c94 <handle_event+0x74>)
    6c3a:	4c17      	ldr	r4, [pc, #92]	; (6c98 <handle_event+0x78>)
    6c3c:	6880      	ldr	r0, [r0, #8]
    6c3e:	4631      	mov	r1, r6
    6c40:	1ae4      	subs	r4, r4, r3
    6c42:	f7ff fb0d 	bl	6260 <bt_hex_real>
    6c46:	f7fc ffc7 	bl	3bd8 <log_strdup>
    6c4a:	08e4      	lsrs	r4, r4, #3
    6c4c:	01a4      	lsls	r4, r4, #6
    6c4e:	f044 0402 	orr.w	r4, r4, #2
    6c52:	4603      	mov	r3, r0
    6c54:	f8ad 4000 	strh.w	r4, [sp]
    6c58:	4810      	ldr	r0, [pc, #64]	; (6c9c <handle_event+0x7c>)
    6c5a:	4632      	mov	r2, r6
    6c5c:	4629      	mov	r1, r5
    6c5e:	f018 fa71 	bl	1f144 <log_3>
}
    6c62:	b002      	add	sp, #8
    6c64:	bd70      	pop	{r4, r5, r6, pc}
		if (buf->len < handler->min_len) {
    6c66:	8981      	ldrh	r1, [r0, #12]
    6c68:	7853      	ldrb	r3, [r2, #1]
    6c6a:	428b      	cmp	r3, r1
    6c6c:	d90d      	bls.n	6c8a <handle_event+0x6a>
    6c6e:	4a09      	ldr	r2, [pc, #36]	; (6c94 <handle_event+0x74>)
    6c70:	4b09      	ldr	r3, [pc, #36]	; (6c98 <handle_event+0x78>)
			BT_ERR("Too small (%u bytes) event 0x%02x",
    6c72:	480b      	ldr	r0, [pc, #44]	; (6ca0 <handle_event+0x80>)
    6c74:	1a9b      	subs	r3, r3, r2
    6c76:	08db      	lsrs	r3, r3, #3
    6c78:	019b      	lsls	r3, r3, #6
    6c7a:	f043 0301 	orr.w	r3, r3, #1
    6c7e:	462a      	mov	r2, r5
}
    6c80:	b002      	add	sp, #8
    6c82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
    6c86:	f018 ba44 	b.w	1f112 <log_2>
		handler->handler(buf);
    6c8a:	6853      	ldr	r3, [r2, #4]
}
    6c8c:	b002      	add	sp, #8
    6c8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		handler->handler(buf);
    6c92:	4718      	bx	r3
    6c94:	00023ed8 	.word	0x00023ed8
    6c98:	00023fb0 	.word	0x00023fb0
    6c9c:	00026617 	.word	0x00026617
    6ca0:	000265f5 	.word	0x000265f5

00006ca4 <hci_le_meta_event>:
{
    6ca4:	b510      	push	{r4, lr}
    6ca6:	2101      	movs	r1, #1
    6ca8:	4604      	mov	r4, r0
    6caa:	3008      	adds	r0, #8
    6cac:	f01b ffb3 	bl	22c16 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    6cb0:	4621      	mov	r1, r4
    6cb2:	4a03      	ldr	r2, [pc, #12]	; (6cc0 <hci_le_meta_event+0x1c>)
    6cb4:	7800      	ldrb	r0, [r0, #0]
}
    6cb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    6cba:	230a      	movs	r3, #10
    6cbc:	f7ff bfb0 	b.w	6c20 <handle_event>
    6cc0:	00024538 	.word	0x00024538

00006cc4 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    6cc4:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    6cc6:	4c0c      	ldr	r4, [pc, #48]	; (6cf8 <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    6cc8:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    6cca:	2205      	movs	r2, #5
    6ccc:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    6cd0:	f002 fbda 	bl	9488 <bt_conn_lookup_state_le>
		if (!conn) {
    6cd4:	b970      	cbnz	r0, 6cf4 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
    6cd6:	4b09      	ldr	r3, [pc, #36]	; (6cfc <find_pending_connect.part.0+0x38>)
    6cd8:	6818      	ldr	r0, [r3, #0]
    6cda:	889a      	ldrh	r2, [r3, #4]
    6cdc:	9000      	str	r0, [sp, #0]
    6cde:	799b      	ldrb	r3, [r3, #6]
    6ce0:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    6ce4:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
						       BT_ADDR_LE_NONE,
    6ce8:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    6cec:	2204      	movs	r2, #4
    6cee:	4669      	mov	r1, sp
    6cf0:	f002 fbca 	bl	9488 <bt_conn_lookup_state_le>
}
    6cf4:	b002      	add	sp, #8
    6cf6:	bd10      	pop	{r4, pc}
    6cf8:	20000000 	.word	0x20000000
    6cfc:	00024120 	.word	0x00024120

00006d00 <hci_num_completed_packets>:
{
    6d00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6d04:	4d3a      	ldr	r5, [pc, #232]	; (6df0 <hci_num_completed_packets+0xf0>)
    6d06:	4b3b      	ldr	r3, [pc, #236]	; (6df4 <hci_num_completed_packets+0xf4>)
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    6d08:	f8d0 8008 	ldr.w	r8, [r0, #8]
	return k_work_submit_to_queue(&k_sys_work_q, work);
    6d0c:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 6e00 <hci_num_completed_packets+0x100>
    6d10:	1aed      	subs	r5, r5, r3
	for (i = 0; i < evt->num_handles; i++) {
    6d12:	2600      	movs	r6, #0
    6d14:	08ed      	lsrs	r5, r5, #3
			tx->pending_no_cb = 0U;
    6d16:	46b1      	mov	r9, r6
	for (i = 0; i < evt->num_handles; i++) {
    6d18:	f898 3000 	ldrb.w	r3, [r8]
    6d1c:	429e      	cmp	r6, r3
    6d1e:	db01      	blt.n	6d24 <hci_num_completed_packets+0x24>
}
    6d20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    6d24:	eb08 0386 	add.w	r3, r8, r6, lsl #2
    6d28:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    6d2c:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
    6d30:	4658      	mov	r0, fp
    6d32:	f002 fa67 	bl	9204 <bt_conn_lookup_handle>
		if (!conn) {
    6d36:	4604      	mov	r4, r0
    6d38:	b1d8      	cbz	r0, 6d72 <hci_num_completed_packets+0x72>
			k_work_submit(&conn->tx_complete_work);
    6d3a:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
    6d3e:	2f00      	cmp	r7, #0
    6d40:	d033      	beq.n	6daa <hci_num_completed_packets+0xaa>
	__asm__ volatile(
    6d42:	f04f 0320 	mov.w	r3, #32
    6d46:	f3ef 8211 	mrs	r2, BASEPRI
    6d4a:	f383 8811 	msr	BASEPRI, r3
    6d4e:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    6d52:	69e3      	ldr	r3, [r4, #28]
    6d54:	b1b3      	cbz	r3, 6d84 <hci_num_completed_packets+0x84>
				conn->pending_no_cb--;
    6d56:	3b01      	subs	r3, #1
    6d58:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    6d5a:	f382 8811 	msr	BASEPRI, r2
    6d5e:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    6d62:	4620      	mov	r0, r4
    6d64:	f002 f836 	bl	8dd4 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
    6d68:	3f01      	subs	r7, #1
    6d6a:	f016 ff1f 	bl	1dbac <z_impl_k_sem_give>
    6d6e:	b2bf      	uxth	r7, r7
    6d70:	e7e5      	b.n	6d3e <hci_num_completed_packets+0x3e>
			BT_ERR("No connection for handle %u", handle);
    6d72:	01aa      	lsls	r2, r5, #6
    6d74:	4820      	ldr	r0, [pc, #128]	; (6df8 <hci_num_completed_packets+0xf8>)
    6d76:	f042 0201 	orr.w	r2, r2, #1
    6d7a:	4659      	mov	r1, fp
    6d7c:	f018 f9b5 	bl	1f0ea <log_1>
	for (i = 0; i < evt->num_handles; i++) {
    6d80:	3601      	adds	r6, #1
    6d82:	e7c9      	b.n	6d18 <hci_num_completed_packets+0x18>
Z_GENLIST_IS_EMPTY(slist)
    6d84:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    6d86:	b12b      	cbz	r3, 6d94 <hci_num_completed_packets+0x94>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    6d88:	69a1      	ldr	r1, [r4, #24]
    6d8a:	6818      	ldr	r0, [r3, #0]
	list->head = node;
    6d8c:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    6d8e:	428b      	cmp	r3, r1
	list->tail = node;
    6d90:	bf08      	it	eq
    6d92:	61a0      	streq	r0, [r4, #24]
    6d94:	f382 8811 	msr	BASEPRI, r2
    6d98:	f3bf 8f6f 	isb	sy
			if (!node) {
    6d9c:	b94b      	cbnz	r3, 6db2 <hci_num_completed_packets+0xb2>
				BT_ERR("packets count mismatch");
    6d9e:	01a9      	lsls	r1, r5, #6
    6da0:	4816      	ldr	r0, [pc, #88]	; (6dfc <hci_num_completed_packets+0xfc>)
    6da2:	f041 0101 	orr.w	r1, r1, #1
    6da6:	f018 f993 	bl	1f0d0 <log_0>
		bt_conn_unref(conn);
    6daa:	4620      	mov	r0, r4
    6dac:	f01a fb88 	bl	214c0 <bt_conn_unref>
    6db0:	e7e6      	b.n	6d80 <hci_num_completed_packets+0x80>
	__asm__ volatile(
    6db2:	f04f 0220 	mov.w	r2, #32
    6db6:	f3ef 8111 	mrs	r1, BASEPRI
    6dba:	f382 8811 	msr	BASEPRI, r2
    6dbe:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    6dc2:	68da      	ldr	r2, [r3, #12]
    6dc4:	61e2      	str	r2, [r4, #28]
	parent->next = child;
    6dc6:	f8c3 9000 	str.w	r9, [r3]
Z_GENLIST_APPEND(slist, snode)
    6dca:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    6dcc:	f8c3 900c 	str.w	r9, [r3, #12]
    6dd0:	b952      	cbnz	r2, 6de8 <hci_num_completed_packets+0xe8>
	list->head = node;
    6dd2:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    6dd6:	f381 8811 	msr	BASEPRI, r1
    6dda:	f3bf 8f6f 	isb	sy
    6dde:	4659      	mov	r1, fp
    6de0:	4650      	mov	r0, sl
    6de2:	f01c fccf 	bl	23784 <k_work_submit_to_queue>
    6de6:	e7bc      	b.n	6d62 <hci_num_completed_packets+0x62>
	parent->next = child;
    6de8:	6013      	str	r3, [r2, #0]
	list->tail = node;
    6dea:	6263      	str	r3, [r4, #36]	; 0x24
}
    6dec:	e7f3      	b.n	6dd6 <hci_num_completed_packets+0xd6>
    6dee:	bf00      	nop
    6df0:	00023fb0 	.word	0x00023fb0
    6df4:	00023ed8 	.word	0x00023ed8
    6df8:	00026639 	.word	0x00026639
    6dfc:	00026655 	.word	0x00026655
    6e00:	200015c0 	.word	0x200015c0

00006e04 <hci_tx_thread>:
{
    6e04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6e08:	4d51      	ldr	r5, [pc, #324]	; (6f50 <hci_tx_thread+0x14c>)
    6e0a:	4b52      	ldr	r3, [pc, #328]	; (6f54 <hci_tx_thread+0x150>)
		events[0].state = K_POLL_STATE_NOT_READY;
    6e0c:	f8df 914c 	ldr.w	r9, [pc, #332]	; 6f5c <hci_tx_thread+0x158>
		BT_ASSERT(err == 0);
    6e10:	f8df a174 	ldr.w	sl, [pc, #372]	; 6f88 <hci_tx_thread+0x184>
    6e14:	1aed      	subs	r5, r5, r3
    6e16:	08ed      	lsrs	r5, r5, #3
		events[0].state = K_POLL_STATE_NOT_READY;
    6e18:	f8d9 300c 	ldr.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    6e1c:	484e      	ldr	r0, [pc, #312]	; (6f58 <hci_tx_thread+0x154>)
		events[0].state = K_POLL_STATE_NOT_READY;
    6e1e:	f36f 3310 	bfc	r3, #12, #5
    6e22:	f8c9 300c 	str.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    6e26:	f002 f981 	bl	912c <bt_conn_prepare_events>
    6e2a:	1c47      	adds	r7, r0, #1
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    6e2c:	484b      	ldr	r0, [pc, #300]	; (6f5c <hci_tx_thread+0x158>)
    6e2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6e32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6e36:	4639      	mov	r1, r7
    6e38:	f017 fb70 	bl	1e51c <z_impl_k_poll>
		BT_ASSERT(err == 0);
    6e3c:	b160      	cbz	r0, 6e58 <hci_tx_thread+0x54>
    6e3e:	4948      	ldr	r1, [pc, #288]	; (6f60 <hci_tx_thread+0x15c>)
    6e40:	4848      	ldr	r0, [pc, #288]	; (6f64 <hci_tx_thread+0x160>)
    6e42:	f640 1328 	movw	r3, #2344	; 0x928
    6e46:	4652      	mov	r2, sl
    6e48:	f017 fd68 	bl	1e91c <printk>
    6e4c:	4040      	eors	r0, r0
    6e4e:	f380 8811 	msr	BASEPRI, r0
    6e52:	f04f 0003 	mov.w	r0, #3
    6e56:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    6e58:	4e43      	ldr	r6, [pc, #268]	; (6f68 <hci_tx_thread+0x164>)
{
    6e5a:	f8df 8100 	ldr.w	r8, [pc, #256]	; 6f5c <hci_tx_thread+0x158>
    6e5e:	f106 0bf0 	add.w	fp, r6, #240	; 0xf0
	for (; count; ev++, count--) {
    6e62:	b917      	cbnz	r7, 6e6a <hci_tx_thread+0x66>
	z_impl_k_yield();
    6e64:	f016 fdb4 	bl	1d9d0 <z_impl_k_yield>
	while (1) {
    6e68:	e7d6      	b.n	6e18 <hci_tx_thread+0x14>
		switch (ev->state) {
    6e6a:	f8d8 100c 	ldr.w	r1, [r8, #12]
    6e6e:	f3c1 3104 	ubfx	r1, r1, #12, #5
    6e72:	2901      	cmp	r1, #1
    6e74:	d959      	bls.n	6f2a <hci_tx_thread+0x126>
    6e76:	2904      	cmp	r1, #4
    6e78:	d163      	bne.n	6f42 <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
    6e7a:	f898 300c 	ldrb.w	r3, [r8, #12]
    6e7e:	2b00      	cmp	r3, #0
    6e80:	d157      	bne.n	6f32 <hci_tx_thread+0x12e>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    6e82:	483a      	ldr	r0, [pc, #232]	; (6f6c <hci_tx_thread+0x168>)
    6e84:	2200      	movs	r2, #0
    6e86:	2300      	movs	r3, #0
    6e88:	f01b fe4c 	bl	22b24 <net_buf_get>
	BT_ASSERT(buf);
    6e8c:	4604      	mov	r4, r0
    6e8e:	b960      	cbnz	r0, 6eaa <hci_tx_thread+0xa6>
    6e90:	4937      	ldr	r1, [pc, #220]	; (6f70 <hci_tx_thread+0x16c>)
    6e92:	4834      	ldr	r0, [pc, #208]	; (6f64 <hci_tx_thread+0x160>)
    6e94:	f640 03c5 	movw	r3, #2245	; 0x8c5
    6e98:	4652      	mov	r2, sl
    6e9a:	f017 fd3f 	bl	1e91c <printk>
    6e9e:	4040      	eors	r0, r0
    6ea0:	f380 8811 	msr	BASEPRI, r0
    6ea4:	f04f 0003 	mov.w	r0, #3
    6ea8:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    6eaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6eae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6eb2:	4658      	mov	r0, fp
    6eb4:	f016 fea0 	bl	1dbf8 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    6eb8:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
    6ebc:	b163      	cbz	r3, 6ed8 <hci_tx_thread+0xd4>
		BT_ERR("Uncleared pending sent_cmd");
    6ebe:	01a9      	lsls	r1, r5, #6
    6ec0:	482c      	ldr	r0, [pc, #176]	; (6f74 <hci_tx_thread+0x170>)
    6ec2:	f041 0101 	orr.w	r1, r1, #1
    6ec6:	f018 f903 	bl	1f0d0 <log_0>
		net_buf_unref(bt_dev.sent_cmd);
    6eca:	f8d6 0108 	ldr.w	r0, [r6, #264]	; 0x108
    6ece:	f013 fb95 	bl	1a5fc <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    6ed2:	2300      	movs	r3, #0
    6ed4:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
	bt_dev.sent_cmd = net_buf_ref(buf);
    6ed8:	4620      	mov	r0, r4
    6eda:	f01b fe4e 	bl	22b7a <net_buf_ref>
    6ede:	f8c6 0108 	str.w	r0, [r6, #264]	; 0x108
	BT_DBG("buf %p len %u type %u", buf, buf->len, bt_buf_get_type(buf));

	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
    6ee2:	4620      	mov	r0, r4
    6ee4:	f7ff fb56 	bl	6594 <bt_hci_ecc_send>
	if (err) {
    6ee8:	4601      	mov	r1, r0
    6eea:	b1f0      	cbz	r0, 6f2a <hci_tx_thread+0x126>
		BT_ERR("Unable to send to driver (err %d)", err);
    6eec:	01aa      	lsls	r2, r5, #6
    6eee:	4822      	ldr	r0, [pc, #136]	; (6f78 <hci_tx_thread+0x174>)
    6ef0:	f042 0201 	orr.w	r2, r2, #1
    6ef4:	f018 f8f9 	bl	1f0ea <log_1>
	z_impl_k_sem_give(sem);
    6ef8:	4820      	ldr	r0, [pc, #128]	; (6f7c <hci_tx_thread+0x178>)
    6efa:	f016 fe57 	bl	1dbac <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    6efe:	4620      	mov	r0, r4
    6f00:	f013 fac8 	bl	1a494 <net_buf_id>
    6f04:	4b1e      	ldr	r3, [pc, #120]	; (6f80 <hci_tx_thread+0x17c>)
    6f06:	220c      	movs	r2, #12
    6f08:	fb02 3000 	mla	r0, r2, r0, r3
    6f0c:	211f      	movs	r1, #31
    6f0e:	8840      	ldrh	r0, [r0, #2]
    6f10:	4622      	mov	r2, r4
    6f12:	f7ff fded 	bl	6af0 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    6f16:	f8d6 0108 	ldr.w	r0, [r6, #264]	; 0x108
    6f1a:	f013 fb6f 	bl	1a5fc <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    6f1e:	2300      	movs	r3, #0
		net_buf_unref(buf);
    6f20:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
    6f22:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
		net_buf_unref(buf);
    6f26:	f013 fb69 	bl	1a5fc <net_buf_unref>
	for (; count; ev++, count--) {
    6f2a:	f108 0814 	add.w	r8, r8, #20
    6f2e:	3f01      	subs	r7, #1
    6f30:	e797      	b.n	6e62 <hci_tx_thread+0x5e>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    6f32:	2b01      	cmp	r3, #1
    6f34:	d1f9      	bne.n	6f2a <hci_tx_thread+0x126>
					conn = CONTAINER_OF(ev->fifo,
    6f36:	f8d8 0010 	ldr.w	r0, [r8, #16]
					bt_conn_process_tx(conn);
    6f3a:	3838      	subs	r0, #56	; 0x38
    6f3c:	f002 fba6 	bl	968c <bt_conn_process_tx>
    6f40:	e7f3      	b.n	6f2a <hci_tx_thread+0x126>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    6f42:	01aa      	lsls	r2, r5, #6
    6f44:	480f      	ldr	r0, [pc, #60]	; (6f84 <hci_tx_thread+0x180>)
    6f46:	f042 0202 	orr.w	r2, r2, #2
    6f4a:	f018 f8ce 	bl	1f0ea <log_1>
    6f4e:	e7ec      	b.n	6f2a <hci_tx_thread+0x126>
    6f50:	00023fb0 	.word	0x00023fb0
    6f54:	00023ed8 	.word	0x00023ed8
    6f58:	2000021c 	.word	0x2000021c
    6f5c:	20000208 	.word	0x20000208
    6f60:	000266a0 	.word	0x000266a0
    6f64:	000266a9 	.word	0x000266a9
    6f68:	20000000 	.word	0x20000000
    6f6c:	2000010c 	.word	0x2000010c
    6f70:	000263b8 	.word	0x000263b8
    6f74:	000266c6 	.word	0x000266c6
    6f78:	000266e1 	.word	0x000266e1
    6f7c:	200000f0 	.word	0x200000f0
    6f80:	20001824 	.word	0x20001824
    6f84:	00026703 	.word	0x00026703
    6f88:	0002666c 	.word	0x0002666c

00006f8c <le_conn_update_complete>:
{
    6f8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    6f8e:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    6f90:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    6f94:	4630      	mov	r0, r6
    6f96:	f002 f935 	bl	9204 <bt_conn_lookup_handle>
	if (!conn) {
    6f9a:	4604      	mov	r4, r0
    6f9c:	b960      	cbnz	r0, 6fb8 <le_conn_update_complete+0x2c>
    6f9e:	4a22      	ldr	r2, [pc, #136]	; (7028 <le_conn_update_complete+0x9c>)
    6fa0:	4b22      	ldr	r3, [pc, #136]	; (702c <le_conn_update_complete+0xa0>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    6fa2:	4823      	ldr	r0, [pc, #140]	; (7030 <le_conn_update_complete+0xa4>)
    6fa4:	1ad2      	subs	r2, r2, r3
    6fa6:	08d2      	lsrs	r2, r2, #3
    6fa8:	0192      	lsls	r2, r2, #6
    6faa:	f042 0201 	orr.w	r2, r2, #1
    6fae:	4631      	mov	r1, r6
    6fb0:	f018 f89b 	bl	1f0ea <log_1>
}
    6fb4:	b002      	add	sp, #8
    6fb6:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
    6fb8:	782b      	ldrb	r3, [r5, #0]
    6fba:	b9bb      	cbnz	r3, 6fec <le_conn_update_complete+0x60>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    6fbc:	792a      	ldrb	r2, [r5, #4]
    6fbe:	78eb      	ldrb	r3, [r5, #3]
    6fc0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    6fc4:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    6fc8:	79aa      	ldrb	r2, [r5, #6]
    6fca:	796b      	ldrb	r3, [r5, #5]
    6fcc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    6fd0:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    6fd4:	79eb      	ldrb	r3, [r5, #7]
    6fd6:	7a2a      	ldrb	r2, [r5, #8]
    6fd8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    6fdc:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
    6fe0:	f001 fefc 	bl	8ddc <notify_le_param_updated>
	bt_conn_unref(conn);
    6fe4:	4620      	mov	r0, r4
    6fe6:	f01a fa6b 	bl	214c0 <bt_conn_unref>
    6fea:	e7e3      	b.n	6fb4 <le_conn_update_complete+0x28>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    6fec:	2b1a      	cmp	r3, #26
    6fee:	d1f9      	bne.n	6fe4 <le_conn_update_complete+0x58>
    6ff0:	78c3      	ldrb	r3, [r0, #3]
    6ff2:	2b01      	cmp	r3, #1
    6ff4:	d1f6      	bne.n	6fe4 <le_conn_update_complete+0x58>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6ff6:	f3bf 8f5b 	dmb	ish
    6ffa:	1d03      	adds	r3, r0, #4
    6ffc:	e853 2f00 	ldrex	r2, [r3]
    7000:	f442 6180 	orr.w	r1, r2, #1024	; 0x400
    7004:	e843 1500 	strex	r5, r1, [r3]
    7008:	2d00      	cmp	r5, #0
    700a:	d1f7      	bne.n	6ffc <le_conn_update_complete+0x70>
    700c:	f3bf 8f5b 	dmb	ish
		   conn->role == BT_HCI_ROLE_SLAVE &&
    7010:	0553      	lsls	r3, r2, #21
    7012:	d4e7      	bmi.n	6fe4 <le_conn_update_complete+0x58>
		param.interval_min = conn->le.interval_min;
    7014:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    7018:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
    701a:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
    701c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
    7020:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
    7022:	f002 fd51 	bl	9ac8 <bt_l2cap_update_conn_param>
    7026:	e7dd      	b.n	6fe4 <le_conn_update_complete+0x58>
    7028:	00023fb0 	.word	0x00023fb0
    702c:	00023ed8 	.word	0x00023ed8
    7030:	000264d7 	.word	0x000264d7

00007034 <hci_cmd_status>:
{
    7034:	b538      	push	{r3, r4, r5, lr}
    7036:	2104      	movs	r1, #4
    7038:	4604      	mov	r4, r0
    703a:	3008      	adds	r0, #8
    703c:	f01b fdeb 	bl	22c16 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    7040:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    7042:	7801      	ldrb	r1, [r0, #0]
    7044:	8840      	ldrh	r0, [r0, #2]
    7046:	4622      	mov	r2, r4
    7048:	f7ff fd52 	bl	6af0 <hci_cmd_done>
	if (ncmd) {
    704c:	b125      	cbz	r5, 7058 <hci_cmd_status+0x24>
    704e:	4803      	ldr	r0, [pc, #12]	; (705c <hci_cmd_status+0x28>)
}
    7050:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    7054:	f016 bdaa 	b.w	1dbac <z_impl_k_sem_give>
    7058:	bd38      	pop	{r3, r4, r5, pc}
    705a:	bf00      	nop
    705c:	200000f0 	.word	0x200000f0

00007060 <hci_cmd_complete>:
{
    7060:	b538      	push	{r3, r4, r5, lr}
    7062:	2103      	movs	r1, #3
    7064:	4604      	mov	r4, r0
    7066:	3008      	adds	r0, #8
    7068:	f01b fdd5 	bl	22c16 <net_buf_simple_pull_mem>
	status = buf->data[0];
    706c:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    706e:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    7070:	7819      	ldrb	r1, [r3, #0]
    7072:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    7076:	4622      	mov	r2, r4
    7078:	f7ff fd3a 	bl	6af0 <hci_cmd_done>
	if (ncmd) {
    707c:	b125      	cbz	r5, 7088 <hci_cmd_complete+0x28>
    707e:	4803      	ldr	r0, [pc, #12]	; (708c <hci_cmd_complete+0x2c>)
}
    7080:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    7084:	f016 bd92 	b.w	1dbac <z_impl_k_sem_give>
    7088:	bd38      	pop	{r3, r4, r5, pc}
    708a:	bf00      	nop
    708c:	200000f0 	.word	0x200000f0

00007090 <bt_hci_cmd_state_set_init>:
{
    7090:	b510      	push	{r4, lr}
	state->bit = bit;
    7092:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
    7096:	f89d 3008 	ldrb.w	r3, [sp, #8]
    709a:	720b      	strb	r3, [r1, #8]
{
    709c:	460c      	mov	r4, r1
	cmd(buf)->state = state;
    709e:	f013 f9f9 	bl	1a494 <net_buf_id>
    70a2:	4b03      	ldr	r3, [pc, #12]	; (70b0 <bt_hci_cmd_state_set_init+0x20>)
    70a4:	220c      	movs	r2, #12
    70a6:	fb02 3000 	mla	r0, r2, r0, r3
    70aa:	6044      	str	r4, [r0, #4]
}
    70ac:	bd10      	pop	{r4, pc}
    70ae:	bf00      	nop
    70b0:	20001824 	.word	0x20001824

000070b4 <bt_hci_cmd_create>:
{
    70b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return net_buf_alloc_fixed(pool, timeout);
    70b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    70bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    70c0:	4605      	mov	r5, r0
    70c2:	4816      	ldr	r0, [pc, #88]	; (711c <bt_hci_cmd_create+0x68>)
	cmd(buf)->opcode = opcode;
    70c4:	f8df 8058 	ldr.w	r8, [pc, #88]	; 7120 <bt_hci_cmd_create+0x6c>
{
    70c8:	460e      	mov	r6, r1
    70ca:	f01b fd26 	bl	22b1a <net_buf_alloc_fixed>
    70ce:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
    70d0:	f100 0b08 	add.w	fp, r0, #8
    70d4:	2100      	movs	r1, #0
    70d6:	2700      	movs	r7, #0
    70d8:	4658      	mov	r0, fp
    70da:	f01b fd3d 	bl	22b58 <net_buf_simple_reserve>
    70de:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
    70e0:	4620      	mov	r0, r4
    70e2:	f013 f9d7 	bl	1a494 <net_buf_id>
    70e6:	f04f 0a0c 	mov.w	sl, #12
    70ea:	fb0a 8000 	mla	r0, sl, r0, r8
    70ee:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
    70f0:	4620      	mov	r0, r4
    70f2:	f013 f9cf 	bl	1a494 <net_buf_id>
    70f6:	fb0a 8000 	mla	r0, sl, r0, r8
    70fa:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
    70fc:	4620      	mov	r0, r4
    70fe:	f013 f9c9 	bl	1a494 <net_buf_id>
    7102:	fb0a 8000 	mla	r0, sl, r0, r8
	return net_buf_simple_add(&buf->b, len);
    7106:	2103      	movs	r1, #3
    7108:	6047      	str	r7, [r0, #4]
    710a:	4658      	mov	r0, fp
    710c:	f01b fd5b 	bl	22bc6 <net_buf_simple_add>
	hdr->param_len = param_len;
    7110:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    7112:	8005      	strh	r5, [r0, #0]
}
    7114:	4620      	mov	r0, r4
    7116:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    711a:	bf00      	nop
    711c:	20000a08 	.word	0x20000a08
    7120:	20001824 	.word	0x20001824

00007124 <bt_hci_cmd_send>:
{
    7124:	b538      	push	{r3, r4, r5, lr}
    7126:	4605      	mov	r5, r0
	if (!buf) {
    7128:	460c      	mov	r4, r1
    712a:	b919      	cbnz	r1, 7134 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    712c:	f7ff ffc2 	bl	70b4 <bt_hci_cmd_create>
		if (!buf) {
    7130:	4604      	mov	r4, r0
    7132:	b1f0      	cbz	r0, 7172 <bt_hci_cmd_send+0x4e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    7134:	f640 4335 	movw	r3, #3125	; 0xc35
    7138:	429d      	cmp	r5, r3
    713a:	d114      	bne.n	7166 <bt_hci_cmd_send+0x42>
		return bt_hci_ecc_send(buf);
    713c:	4620      	mov	r0, r4
    713e:	f7ff fa29 	bl	6594 <bt_hci_ecc_send>
		if (err) {
    7142:	4605      	mov	r5, r0
    7144:	b168      	cbz	r0, 7162 <bt_hci_cmd_send+0x3e>
    7146:	4b0c      	ldr	r3, [pc, #48]	; (7178 <bt_hci_cmd_send+0x54>)
    7148:	4a0c      	ldr	r2, [pc, #48]	; (717c <bt_hci_cmd_send+0x58>)
    714a:	1ad2      	subs	r2, r2, r3
    714c:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Unable to send to driver (err %d)", err);
    714e:	0192      	lsls	r2, r2, #6
    7150:	4601      	mov	r1, r0
    7152:	f042 0201 	orr.w	r2, r2, #1
    7156:	480a      	ldr	r0, [pc, #40]	; (7180 <bt_hci_cmd_send+0x5c>)
    7158:	f017 ffc7 	bl	1f0ea <log_1>
			net_buf_unref(buf);
    715c:	4620      	mov	r0, r4
    715e:	f013 fa4d 	bl	1a5fc <net_buf_unref>
}
    7162:	4628      	mov	r0, r5
    7164:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    7166:	4807      	ldr	r0, [pc, #28]	; (7184 <bt_hci_cmd_send+0x60>)
    7168:	4621      	mov	r1, r4
    716a:	f01b fcf9 	bl	22b60 <net_buf_put>
	return 0;
    716e:	2500      	movs	r5, #0
    7170:	e7f7      	b.n	7162 <bt_hci_cmd_send+0x3e>
			return -ENOBUFS;
    7172:	f06f 0568 	mvn.w	r5, #104	; 0x68
    7176:	e7f4      	b.n	7162 <bt_hci_cmd_send+0x3e>
    7178:	00023ed8 	.word	0x00023ed8
    717c:	00023fb0 	.word	0x00023fb0
    7180:	000266e1 	.word	0x000266e1
    7184:	2000010c 	.word	0x2000010c

00007188 <le_ltk_request>:
{
    7188:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
    718a:	6886      	ldr	r6, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    718c:	8837      	ldrh	r7, [r6, #0]
    718e:	b2bd      	uxth	r5, r7
{
    7190:	b087      	sub	sp, #28
	conn = bt_conn_lookup_handle(handle);
    7192:	4628      	mov	r0, r5
    7194:	f002 f836 	bl	9204 <bt_conn_lookup_handle>
	if (!conn) {
    7198:	4604      	mov	r4, r0
    719a:	b960      	cbnz	r0, 71b6 <le_ltk_request+0x2e>
    719c:	4a2a      	ldr	r2, [pc, #168]	; (7248 <le_ltk_request+0xc0>)
    719e:	4b2b      	ldr	r3, [pc, #172]	; (724c <le_ltk_request+0xc4>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    71a0:	482b      	ldr	r0, [pc, #172]	; (7250 <le_ltk_request+0xc8>)
    71a2:	1ad2      	subs	r2, r2, r3
    71a4:	08d2      	lsrs	r2, r2, #3
    71a6:	0192      	lsls	r2, r2, #6
    71a8:	f042 0201 	orr.w	r2, r2, #1
    71ac:	4629      	mov	r1, r5
    71ae:	f017 ff9c 	bl	1f0ea <log_1>
}
    71b2:	b007      	add	sp, #28
    71b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
    71b6:	ad02      	add	r5, sp, #8
    71b8:	f8d6 2002 	ldr.w	r2, [r6, #2]
    71bc:	f8d6 3006 	ldr.w	r3, [r6, #6]
    71c0:	9501      	str	r5, [sp, #4]
    71c2:	8971      	ldrh	r1, [r6, #10]
    71c4:	9100      	str	r1, [sp, #0]
    71c6:	f01b fb15 	bl	227f4 <bt_smp_request_ltk>
    71ca:	b360      	cbz	r0, 7226 <le_ltk_request+0x9e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    71cc:	2112      	movs	r1, #18
    71ce:	f242 001a 	movw	r0, #8218	; 0x201a
    71d2:	f7ff ff6f 	bl	70b4 <bt_hci_cmd_create>
	if (!buf) {
    71d6:	4606      	mov	r6, r0
    71d8:	b968      	cbnz	r0, 71f6 <le_ltk_request+0x6e>
    71da:	491b      	ldr	r1, [pc, #108]	; (7248 <le_ltk_request+0xc0>)
    71dc:	4b1b      	ldr	r3, [pc, #108]	; (724c <le_ltk_request+0xc4>)
		BT_ERR("Out of command buffers");
    71de:	481d      	ldr	r0, [pc, #116]	; (7254 <le_ltk_request+0xcc>)
    71e0:	1ac9      	subs	r1, r1, r3
    71e2:	08c9      	lsrs	r1, r1, #3
    71e4:	0189      	lsls	r1, r1, #6
    71e6:	f041 0101 	orr.w	r1, r1, #1
    71ea:	f017 ff71 	bl	1f0d0 <log_0>
	bt_conn_unref(conn);
    71ee:	4620      	mov	r0, r4
    71f0:	f01a f966 	bl	214c0 <bt_conn_unref>
    71f4:	e7dd      	b.n	71b2 <le_ltk_request+0x2a>
    71f6:	2112      	movs	r1, #18
    71f8:	3008      	adds	r0, #8
    71fa:	f01b fce4 	bl	22bc6 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
    71fe:	4603      	mov	r3, r0
    7200:	462a      	mov	r2, r5
    7202:	f823 7b02 	strh.w	r7, [r3], #2
    7206:	af06      	add	r7, sp, #24
    7208:	4615      	mov	r5, r2
    720a:	cd03      	ldmia	r5!, {r0, r1}
    720c:	42bd      	cmp	r5, r7
    720e:	6018      	str	r0, [r3, #0]
    7210:	6059      	str	r1, [r3, #4]
    7212:	462a      	mov	r2, r5
    7214:	f103 0308 	add.w	r3, r3, #8
    7218:	d1f6      	bne.n	7208 <le_ltk_request+0x80>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    721a:	4631      	mov	r1, r6
    721c:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    7220:	f7ff ff80 	bl	7124 <bt_hci_cmd_send>
    7224:	e7e3      	b.n	71ee <le_ltk_request+0x66>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    7226:	2102      	movs	r1, #2
    7228:	f242 001b 	movw	r0, #8219	; 0x201b
    722c:	f7ff ff42 	bl	70b4 <bt_hci_cmd_create>
	if (!buf) {
    7230:	4605      	mov	r5, r0
    7232:	2800      	cmp	r0, #0
    7234:	d0d1      	beq.n	71da <le_ltk_request+0x52>
    7236:	2102      	movs	r1, #2
    7238:	3008      	adds	r0, #8
    723a:	f01b fcc4 	bl	22bc6 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    723e:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(handle);
    7240:	8007      	strh	r7, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    7242:	f242 001b 	movw	r0, #8219	; 0x201b
    7246:	e7eb      	b.n	7220 <le_ltk_request+0x98>
    7248:	00023fb0 	.word	0x00023fb0
    724c:	00023ed8 	.word	0x00023ed8
    7250:	000264d7 	.word	0x000264d7
    7254:	00026724 	.word	0x00026724

00007258 <le_conn_param_neg_reply>:
{
    7258:	b570      	push	{r4, r5, r6, lr}
    725a:	4606      	mov	r6, r0
    725c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    725e:	f242 0021 	movw	r0, #8225	; 0x2021
    7262:	2103      	movs	r1, #3
    7264:	f7ff ff26 	bl	70b4 <bt_hci_cmd_create>
	if (!buf) {
    7268:	4604      	mov	r4, r0
    726a:	b958      	cbnz	r0, 7284 <le_conn_param_neg_reply+0x2c>
    726c:	490c      	ldr	r1, [pc, #48]	; (72a0 <le_conn_param_neg_reply+0x48>)
    726e:	4b0d      	ldr	r3, [pc, #52]	; (72a4 <le_conn_param_neg_reply+0x4c>)
		BT_ERR("Unable to allocate buffer");
    7270:	480d      	ldr	r0, [pc, #52]	; (72a8 <le_conn_param_neg_reply+0x50>)
    7272:	1ac9      	subs	r1, r1, r3
    7274:	08c9      	lsrs	r1, r1, #3
    7276:	0189      	lsls	r1, r1, #6
}
    7278:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
    727c:	f041 0101 	orr.w	r1, r1, #1
    7280:	f017 bf26 	b.w	1f0d0 <log_0>
    7284:	2103      	movs	r1, #3
    7286:	3008      	adds	r0, #8
    7288:	f01b fc9d 	bl	22bc6 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    728c:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    728e:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    7290:	4621      	mov	r1, r4
    7292:	f242 0021 	movw	r0, #8225	; 0x2021
}
    7296:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    729a:	f7ff bf43 	b.w	7124 <bt_hci_cmd_send>
    729e:	bf00      	nop
    72a0:	00023fb0 	.word	0x00023fb0
    72a4:	00023ed8 	.word	0x00023ed8
    72a8:	0002673b 	.word	0x0002673b

000072ac <le_conn_param_req>:
{
    72ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    72ae:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    72b0:	78d9      	ldrb	r1, [r3, #3]
    72b2:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    72b4:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    72b6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    72ba:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    72be:	7959      	ldrb	r1, [r3, #5]
    72c0:	791a      	ldrb	r2, [r3, #4]
    72c2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    72c6:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    72ca:	799a      	ldrb	r2, [r3, #6]
    72cc:	79d9      	ldrb	r1, [r3, #7]
    72ce:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    72d2:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    72d6:	7a1a      	ldrb	r2, [r3, #8]
    72d8:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    72da:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    72dc:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    72e0:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
    72e2:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    72e6:	f001 ff8d 	bl	9204 <bt_conn_lookup_handle>
	if (!conn) {
    72ea:	4606      	mov	r6, r0
    72ec:	b980      	cbnz	r0, 7310 <le_conn_param_req+0x64>
    72ee:	4b20      	ldr	r3, [pc, #128]	; (7370 <le_conn_param_req+0xc4>)
    72f0:	4a20      	ldr	r2, [pc, #128]	; (7374 <le_conn_param_req+0xc8>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    72f2:	4821      	ldr	r0, [pc, #132]	; (7378 <le_conn_param_req+0xcc>)
    72f4:	1ad2      	subs	r2, r2, r3
    72f6:	08d2      	lsrs	r2, r2, #3
    72f8:	0192      	lsls	r2, r2, #6
    72fa:	4621      	mov	r1, r4
    72fc:	f042 0201 	orr.w	r2, r2, #1
    7300:	f017 fef3 	bl	1f0ea <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    7304:	2102      	movs	r1, #2
    7306:	4620      	mov	r0, r4
    7308:	f7ff ffa6 	bl	7258 <le_conn_param_neg_reply>
}
    730c:	b003      	add	sp, #12
    730e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
    7310:	4669      	mov	r1, sp
    7312:	f001 fd9b 	bl	8e4c <le_param_req>
    7316:	b938      	cbnz	r0, 7328 <le_conn_param_req+0x7c>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    7318:	211e      	movs	r1, #30
    731a:	4620      	mov	r0, r4
    731c:	f7ff ff9c 	bl	7258 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    7320:	4630      	mov	r0, r6
    7322:	f01a f8cd 	bl	214c0 <bt_conn_unref>
    7326:	e7f1      	b.n	730c <le_conn_param_req+0x60>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    7328:	210e      	movs	r1, #14
    732a:	f242 0020 	movw	r0, #8224	; 0x2020
    732e:	f7ff fec1 	bl	70b4 <bt_hci_cmd_create>
	if (!buf) {
    7332:	4605      	mov	r5, r0
    7334:	2800      	cmp	r0, #0
    7336:	d0f3      	beq.n	7320 <le_conn_param_req+0x74>
    7338:	210e      	movs	r1, #14
    733a:	3008      	adds	r0, #8
    733c:	f01b fc43 	bl	22bc6 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
    7340:	220e      	movs	r2, #14
    7342:	4604      	mov	r4, r0
    7344:	2100      	movs	r1, #0
    7346:	f01c fc68 	bl	23c1a <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    734a:	f8bd 3000 	ldrh.w	r3, [sp]
    734e:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    7350:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    7354:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    7356:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    735a:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    735c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
    7360:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    7362:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    7364:	4629      	mov	r1, r5
    7366:	f242 0020 	movw	r0, #8224	; 0x2020
    736a:	f7ff fedb 	bl	7124 <bt_hci_cmd_send>
    736e:	e7d7      	b.n	7320 <le_conn_param_req+0x74>
    7370:	00023ed8 	.word	0x00023ed8
    7374:	00023fb0 	.word	0x00023fb0
    7378:	000264d7 	.word	0x000264d7

0000737c <bt_hci_cmd_send_sync>:
{
    737c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7380:	4607      	mov	r7, r0
    7382:	b086      	sub	sp, #24
    7384:	4615      	mov	r5, r2
	if (!buf) {
    7386:	460c      	mov	r4, r1
    7388:	b921      	cbnz	r1, 7394 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
    738a:	f7ff fe93 	bl	70b4 <bt_hci_cmd_create>
		if (!buf) {
    738e:	4604      	mov	r4, r0
    7390:	2800      	cmp	r0, #0
    7392:	d055      	beq.n	7440 <bt_hci_cmd_send_sync+0xc4>
	return z_impl_k_sem_init(sem, initial_count, limit);
    7394:	2201      	movs	r2, #1
    7396:	2100      	movs	r1, #0
    7398:	4668      	mov	r0, sp
    739a:	f01c f962 	bl	23662 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    739e:	4620      	mov	r0, r4
    73a0:	f013 f878 	bl	1a494 <net_buf_id>
    73a4:	4e28      	ldr	r6, [pc, #160]	; (7448 <bt_hci_cmd_send_sync+0xcc>)
    73a6:	230c      	movs	r3, #12
    73a8:	fb03 6000 	mla	r0, r3, r0, r6
    73ac:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
    73b0:	4620      	mov	r0, r4
    73b2:	f01b fbe2 	bl	22b7a <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    73b6:	4825      	ldr	r0, [pc, #148]	; (744c <bt_hci_cmd_send_sync+0xd0>)
    73b8:	4621      	mov	r1, r4
    73ba:	f01b fbd1 	bl	22b60 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    73be:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    73c2:	2300      	movs	r3, #0
    73c4:	4668      	mov	r0, sp
    73c6:	f016 fc17 	bl	1dbf8 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    73ca:	4680      	mov	r8, r0
    73cc:	b180      	cbz	r0, 73f0 <bt_hci_cmd_send_sync+0x74>
    73ce:	4a20      	ldr	r2, [pc, #128]	; (7450 <bt_hci_cmd_send_sync+0xd4>)
    73d0:	4920      	ldr	r1, [pc, #128]	; (7454 <bt_hci_cmd_send_sync+0xd8>)
    73d2:	4821      	ldr	r0, [pc, #132]	; (7458 <bt_hci_cmd_send_sync+0xdc>)
    73d4:	f240 1337 	movw	r3, #311	; 0x137
    73d8:	f017 faa0 	bl	1e91c <printk>
    73dc:	481f      	ldr	r0, [pc, #124]	; (745c <bt_hci_cmd_send_sync+0xe0>)
    73de:	4641      	mov	r1, r8
    73e0:	f017 fa9c 	bl	1e91c <printk>
    73e4:	4040      	eors	r0, r0
    73e6:	f380 8811 	msr	BASEPRI, r0
    73ea:	f04f 0003 	mov.w	r0, #3
    73ee:	df02      	svc	2
	status = cmd(buf)->status;
    73f0:	4620      	mov	r0, r4
    73f2:	f013 f84f 	bl	1a494 <net_buf_id>
    73f6:	230c      	movs	r3, #12
    73f8:	4343      	muls	r3, r0
    73fa:	5cf6      	ldrb	r6, [r6, r3]
	if (status) {
    73fc:	b1be      	cbz	r6, 742e <bt_hci_cmd_send_sync+0xb2>
    73fe:	4a18      	ldr	r2, [pc, #96]	; (7460 <bt_hci_cmd_send_sync+0xe4>)
    7400:	4b18      	ldr	r3, [pc, #96]	; (7464 <bt_hci_cmd_send_sync+0xe8>)
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    7402:	4819      	ldr	r0, [pc, #100]	; (7468 <bt_hci_cmd_send_sync+0xec>)
    7404:	1a9b      	subs	r3, r3, r2
    7406:	08db      	lsrs	r3, r3, #3
    7408:	019b      	lsls	r3, r3, #6
    740a:	f043 0302 	orr.w	r3, r3, #2
    740e:	4632      	mov	r2, r6
    7410:	4639      	mov	r1, r7
    7412:	f017 fe7e 	bl	1f112 <log_2>
		net_buf_unref(buf);
    7416:	4620      	mov	r0, r4
    7418:	f013 f8f0 	bl	1a5fc <net_buf_unref>
			return -EIO;
    741c:	2e09      	cmp	r6, #9
    741e:	bf0c      	ite	eq
    7420:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
    7424:	f06f 0004 	mvnne.w	r0, #4
}
    7428:	b006      	add	sp, #24
    742a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
    742e:	b115      	cbz	r5, 7436 <bt_hci_cmd_send_sync+0xba>
		*rsp = buf;
    7430:	602c      	str	r4, [r5, #0]
	return 0;
    7432:	4630      	mov	r0, r6
    7434:	e7f8      	b.n	7428 <bt_hci_cmd_send_sync+0xac>
		net_buf_unref(buf);
    7436:	4620      	mov	r0, r4
    7438:	f013 f8e0 	bl	1a5fc <net_buf_unref>
	return 0;
    743c:	4628      	mov	r0, r5
    743e:	e7f3      	b.n	7428 <bt_hci_cmd_send_sync+0xac>
			return -ENOBUFS;
    7440:	f06f 0068 	mvn.w	r0, #104	; 0x68
    7444:	e7f0      	b.n	7428 <bt_hci_cmd_send_sync+0xac>
    7446:	bf00      	nop
    7448:	20001824 	.word	0x20001824
    744c:	2000010c 	.word	0x2000010c
    7450:	0002666c 	.word	0x0002666c
    7454:	000266a0 	.word	0x000266a0
    7458:	000266a9 	.word	0x000266a9
    745c:	00026755 	.word	0x00026755
    7460:	00023ed8 	.word	0x00023ed8
    7464:	00023fb0 	.word	0x00023fb0
    7468:	00026775 	.word	0x00026775

0000746c <hci_le_read_max_data_len>:
{
    746c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    746e:	4606      	mov	r6, r0
    7470:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    7472:	aa01      	add	r2, sp, #4
    7474:	2100      	movs	r1, #0
    7476:	f242 002f 	movw	r0, #8239	; 0x202f
    747a:	f7ff ff7f 	bl	737c <bt_hci_cmd_send_sync>
	if (err) {
    747e:	4604      	mov	r4, r0
    7480:	b160      	cbz	r0, 749c <hci_le_read_max_data_len+0x30>
    7482:	490c      	ldr	r1, [pc, #48]	; (74b4 <hci_le_read_max_data_len+0x48>)
    7484:	4b0c      	ldr	r3, [pc, #48]	; (74b8 <hci_le_read_max_data_len+0x4c>)
		BT_ERR("Failed to read DLE max data len");
    7486:	480d      	ldr	r0, [pc, #52]	; (74bc <hci_le_read_max_data_len+0x50>)
    7488:	1ac9      	subs	r1, r1, r3
    748a:	08c9      	lsrs	r1, r1, #3
    748c:	0189      	lsls	r1, r1, #6
    748e:	f041 0101 	orr.w	r1, r1, #1
    7492:	f017 fe1d 	bl	1f0d0 <log_0>
}
    7496:	4620      	mov	r0, r4
    7498:	b002      	add	sp, #8
    749a:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    749c:	9801      	ldr	r0, [sp, #4]
    749e:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    74a0:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    74a4:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
    74a6:	f8b3 3003 	ldrh.w	r3, [r3, #3]
    74aa:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
    74ac:	f013 f8a6 	bl	1a5fc <net_buf_unref>
	return 0;
    74b0:	e7f1      	b.n	7496 <hci_le_read_max_data_len+0x2a>
    74b2:	bf00      	nop
    74b4:	00023fb0 	.word	0x00023fb0
    74b8:	00023ed8 	.word	0x00023ed8
    74bc:	00026791 	.word	0x00026791

000074c0 <conn_auto_initiate>:
{
    74c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    74c2:	7b43      	ldrb	r3, [r0, #13]
    74c4:	2b07      	cmp	r3, #7
{
    74c6:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    74c8:	d121      	bne.n	750e <conn_auto_initiate+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    74ca:	f3bf 8f5b 	dmb	ish
    74ce:	6843      	ldr	r3, [r0, #4]
    74d0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    74d4:	049b      	lsls	r3, r3, #18
    74d6:	f100 0604 	add.w	r6, r0, #4
    74da:	d41a      	bmi.n	7512 <conn_auto_initiate+0x52>
    74dc:	78c3      	ldrb	r3, [r0, #3]
    74de:	b123      	cbz	r3, 74ea <conn_auto_initiate+0x2a>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
    74e0:	4b35      	ldr	r3, [pc, #212]	; (75b8 <conn_auto_initiate+0xf8>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
    74e2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
    74e6:	071d      	lsls	r5, r3, #28
    74e8:	d513      	bpl.n	7512 <conn_auto_initiate+0x52>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    74ea:	2102      	movs	r1, #2
    74ec:	f242 0016 	movw	r0, #8214	; 0x2016
    74f0:	f7ff fde0 	bl	70b4 <bt_hci_cmd_create>
	if (!buf) {
    74f4:	4605      	mov	r5, r0
    74f6:	b160      	cbz	r0, 7512 <conn_auto_initiate+0x52>
    74f8:	2102      	movs	r1, #2
    74fa:	3008      	adds	r0, #8
    74fc:	f01b fb63 	bl	22bc6 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    7500:	8823      	ldrh	r3, [r4, #0]
    7502:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    7504:	4629      	mov	r1, r5
    7506:	f242 0016 	movw	r0, #8214	; 0x2016
    750a:	f7ff fe0b 	bl	7124 <bt_hci_cmd_send>
}
    750e:	b004      	add	sp, #16
    7510:	bd70      	pop	{r4, r5, r6, pc}
    7512:	f3bf 8f5b 	dmb	ish
    7516:	6863      	ldr	r3, [r4, #4]
    7518:	4d27      	ldr	r5, [pc, #156]	; (75b8 <conn_auto_initiate+0xf8>)
    751a:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    751e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    7522:	f3c3 3100 	ubfx	r1, r3, #12, #1
    7526:	d122      	bne.n	756e <conn_auto_initiate+0xae>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    7528:	f895 30a1 	ldrb.w	r3, [r5, #161]	; 0xa1
    752c:	07d8      	lsls	r0, r3, #31
    752e:	d51e      	bpl.n	756e <conn_auto_initiate+0xae>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    7530:	2302      	movs	r3, #2
    7532:	9100      	str	r1, [sp, #0]
    7534:	461a      	mov	r2, r3
    7536:	4620      	mov	r0, r4
    7538:	f019 fca1 	bl	20e7e <bt_le_set_phy>
		if (!err) {
    753c:	4601      	mov	r1, r0
    753e:	b960      	cbnz	r0, 755a <conn_auto_initiate+0x9a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7540:	f3bf 8f5b 	dmb	ish
    7544:	e856 3f00 	ldrex	r3, [r6]
    7548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    754c:	e846 3200 	strex	r2, r3, [r6]
    7550:	2a00      	cmp	r2, #0
    7552:	d1f7      	bne.n	7544 <conn_auto_initiate+0x84>
    7554:	f3bf 8f5b 	dmb	ish
			return;
    7558:	e7d9      	b.n	750e <conn_auto_initiate+0x4e>
    755a:	4a18      	ldr	r2, [pc, #96]	; (75bc <conn_auto_initiate+0xfc>)
    755c:	4b18      	ldr	r3, [pc, #96]	; (75c0 <conn_auto_initiate+0x100>)
		BT_ERR("Failed to set LE PHY (%d)", err);
    755e:	4819      	ldr	r0, [pc, #100]	; (75c4 <conn_auto_initiate+0x104>)
    7560:	1ad2      	subs	r2, r2, r3
    7562:	08d2      	lsrs	r2, r2, #3
    7564:	0192      	lsls	r2, r2, #6
    7566:	f042 0201 	orr.w	r2, r2, #1
    756a:	f017 fdbe 	bl	1f0ea <log_1>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    756e:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
    7572:	069a      	lsls	r2, r3, #26
    7574:	d5cb      	bpl.n	750e <conn_auto_initiate+0x4e>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    7576:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    757a:	689b      	ldr	r3, [r3, #8]
    757c:	079b      	lsls	r3, r3, #30
    757e:	d5c6      	bpl.n	750e <conn_auto_initiate+0x4e>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    7580:	f10d 010e 	add.w	r1, sp, #14
    7584:	a803      	add	r0, sp, #12
    7586:	f7ff ff71 	bl	746c <hci_le_read_max_data_len>
			if (!err) {
    758a:	2800      	cmp	r0, #0
    758c:	d1bf      	bne.n	750e <conn_auto_initiate+0x4e>
				err = bt_le_set_data_len(conn,
    758e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    7592:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7596:	4620      	mov	r0, r4
    7598:	f019 fc54 	bl	20e44 <bt_le_set_data_len>
				if (err) {
    759c:	4601      	mov	r1, r0
    759e:	2800      	cmp	r0, #0
    75a0:	d0b5      	beq.n	750e <conn_auto_initiate+0x4e>
    75a2:	4b07      	ldr	r3, [pc, #28]	; (75c0 <conn_auto_initiate+0x100>)
    75a4:	4a05      	ldr	r2, [pc, #20]	; (75bc <conn_auto_initiate+0xfc>)
					BT_ERR("Failed to set data len (%d)", err);
    75a6:	4808      	ldr	r0, [pc, #32]	; (75c8 <conn_auto_initiate+0x108>)
    75a8:	1ad2      	subs	r2, r2, r3
    75aa:	08d2      	lsrs	r2, r2, #3
    75ac:	0192      	lsls	r2, r2, #6
    75ae:	f042 0201 	orr.w	r2, r2, #1
    75b2:	f017 fd9a 	bl	1f0ea <log_1>
		}
    75b6:	e7aa      	b.n	750e <conn_auto_initiate+0x4e>
    75b8:	20000000 	.word	0x20000000
    75bc:	00023fb0 	.word	0x00023fb0
    75c0:	00023ed8 	.word	0x00023ed8
    75c4:	000268a9 	.word	0x000268a9
    75c8:	000268c3 	.word	0x000268c3

000075cc <le_phy_update_complete>:
{
    75cc:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    75ce:	6883      	ldr	r3, [r0, #8]
    75d0:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    75d4:	4628      	mov	r0, r5
    75d6:	f001 fe15 	bl	9204 <bt_conn_lookup_handle>
	if (!conn) {
    75da:	4604      	mov	r4, r0
    75dc:	b960      	cbnz	r0, 75f8 <le_phy_update_complete+0x2c>
    75de:	4b17      	ldr	r3, [pc, #92]	; (763c <le_phy_update_complete+0x70>)
    75e0:	4a17      	ldr	r2, [pc, #92]	; (7640 <le_phy_update_complete+0x74>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    75e2:	4818      	ldr	r0, [pc, #96]	; (7644 <le_phy_update_complete+0x78>)
    75e4:	1ad2      	subs	r2, r2, r3
    75e6:	08d2      	lsrs	r2, r2, #3
    75e8:	0192      	lsls	r2, r2, #6
    75ea:	4629      	mov	r1, r5
    75ec:	f042 0201 	orr.w	r2, r2, #1
}
    75f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    75f4:	f017 bd79 	b.w	1f0ea <log_1>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    75f8:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    75fa:	f3bf 8f5b 	dmb	ish
    75fe:	e853 2f00 	ldrex	r2, [r3]
    7602:	f022 0180 	bic.w	r1, r2, #128	; 0x80
    7606:	e843 1500 	strex	r5, r1, [r3]
    760a:	2d00      	cmp	r5, #0
    760c:	d1f7      	bne.n	75fe <le_phy_update_complete+0x32>
    760e:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    7612:	0612      	lsls	r2, r2, #24
    7614:	d50d      	bpl.n	7632 <le_phy_update_complete+0x66>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7616:	f3bf 8f5b 	dmb	ish
    761a:	e853 2f00 	ldrex	r2, [r3]
    761e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    7622:	e843 2100 	strex	r1, r2, [r3]
    7626:	2900      	cmp	r1, #0
    7628:	d1f7      	bne.n	761a <le_phy_update_complete+0x4e>
    762a:	f3bf 8f5b 	dmb	ish
		conn_auto_initiate(conn);
    762e:	f7ff ff47 	bl	74c0 <conn_auto_initiate>
	bt_conn_unref(conn);
    7632:	4620      	mov	r0, r4
}
    7634:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    7638:	f019 bf42 	b.w	214c0 <bt_conn_unref>
    763c:	00023ed8 	.word	0x00023ed8
    7640:	00023fb0 	.word	0x00023fb0
    7644:	000264d7 	.word	0x000264d7

00007648 <le_remote_feat_complete>:
{
    7648:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    764a:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    764c:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    7650:	4630      	mov	r0, r6
    7652:	f001 fdd7 	bl	9204 <bt_conn_lookup_handle>
	if (!conn) {
    7656:	4604      	mov	r4, r0
    7658:	b960      	cbnz	r0, 7674 <le_remote_feat_complete+0x2c>
    765a:	4a15      	ldr	r2, [pc, #84]	; (76b0 <le_remote_feat_complete+0x68>)
    765c:	4b15      	ldr	r3, [pc, #84]	; (76b4 <le_remote_feat_complete+0x6c>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    765e:	4816      	ldr	r0, [pc, #88]	; (76b8 <le_remote_feat_complete+0x70>)
    7660:	1ad2      	subs	r2, r2, r3
    7662:	08d2      	lsrs	r2, r2, #3
    7664:	0192      	lsls	r2, r2, #6
    7666:	4631      	mov	r1, r6
    7668:	f042 0201 	orr.w	r2, r2, #1
}
    766c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    7670:	f017 bd3b 	b.w	1f0ea <log_1>
	if (!evt->status) {
    7674:	782b      	ldrb	r3, [r5, #0]
    7676:	b933      	cbnz	r3, 7686 <le_remote_feat_complete+0x3e>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    7678:	f855 3f03 	ldr.w	r3, [r5, #3]!
    767c:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
    7680:	686b      	ldr	r3, [r5, #4]
    7682:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
    7686:	1d23      	adds	r3, r4, #4
    7688:	f3bf 8f5b 	dmb	ish
    768c:	e853 2f00 	ldrex	r2, [r3]
    7690:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    7694:	e843 2100 	strex	r1, r2, [r3]
    7698:	2900      	cmp	r1, #0
    769a:	d1f7      	bne.n	768c <le_remote_feat_complete+0x44>
    769c:	f3bf 8f5b 	dmb	ish
	conn_auto_initiate(conn);
    76a0:	4620      	mov	r0, r4
    76a2:	f7ff ff0d 	bl	74c0 <conn_auto_initiate>
	bt_conn_unref(conn);
    76a6:	4620      	mov	r0, r4
}
    76a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    76ac:	f019 bf08 	b.w	214c0 <bt_conn_unref>
    76b0:	00023fb0 	.word	0x00023fb0
    76b4:	00023ed8 	.word	0x00023ed8
    76b8:	000264d7 	.word	0x000264d7

000076bc <enh_conn_complete>:
{
    76bc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    76c0:	4604      	mov	r4, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    76c2:	f8b0 8001 	ldrh.w	r8, [r0, #1]
	bt_id_pending_keys_update();
    76c6:	f000 fb97 	bl	7df8 <bt_id_pending_keys_update>
	if (evt->status) {
    76ca:	7825      	ldrb	r5, [r4, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    76cc:	fa1f f788 	uxth.w	r7, r8
	if (evt->status) {
    76d0:	b3b5      	cbz	r5, 7740 <enh_conn_complete+0x84>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    76d2:	2d3c      	cmp	r5, #60	; 0x3c
    76d4:	d128      	bne.n	7728 <enh_conn_complete+0x6c>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    76d6:	f000 ffe9 	bl	86ac <bt_le_adv_lookup_legacy>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    76da:	f3bf 8f5b 	dmb	ish
    76de:	3010      	adds	r0, #16
    76e0:	e850 3f00 	ldrex	r3, [r0]
    76e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    76e8:	e840 3200 	strex	r2, r3, [r0]
    76ec:	2a00      	cmp	r2, #0
    76ee:	d1f7      	bne.n	76e0 <enh_conn_complete+0x24>
    76f0:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    76f4:	2000      	movs	r0, #0
    76f6:	f7ff fae5 	bl	6cc4 <find_pending_connect.part.0>
		if (!conn) {
    76fa:	4604      	mov	r4, r0
    76fc:	b960      	cbnz	r0, 7718 <enh_conn_complete+0x5c>
    76fe:	495e      	ldr	r1, [pc, #376]	; (7878 <enh_conn_complete+0x1bc>)
    7700:	4b5e      	ldr	r3, [pc, #376]	; (787c <enh_conn_complete+0x1c0>)
			BT_ERR("No pending slave connection");
    7702:	485f      	ldr	r0, [pc, #380]	; (7880 <enh_conn_complete+0x1c4>)
    7704:	1ac9      	subs	r1, r1, r3
    7706:	08c9      	lsrs	r1, r1, #3
    7708:	0189      	lsls	r1, r1, #6
    770a:	f041 0101 	orr.w	r1, r1, #1
    770e:	f017 fcdf 	bl	1f0d0 <log_0>
}
    7712:	b004      	add	sp, #16
    7714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
    7718:	7305      	strb	r5, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    771a:	2100      	movs	r1, #0
    771c:	f001 fd7e 	bl	921c <bt_conn_set_state>
		bt_conn_unref(conn);
    7720:	4620      	mov	r0, r4
	bt_conn_unref(conn);
    7722:	f019 fecd 	bl	214c0 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    7726:	e7f4      	b.n	7712 <enh_conn_complete+0x56>
    7728:	4b54      	ldr	r3, [pc, #336]	; (787c <enh_conn_complete+0x1c0>)
    772a:	4a53      	ldr	r2, [pc, #332]	; (7878 <enh_conn_complete+0x1bc>)
		BT_WARN("Unexpected status 0x%02x", evt->status);
    772c:	4855      	ldr	r0, [pc, #340]	; (7884 <enh_conn_complete+0x1c8>)
    772e:	1ad2      	subs	r2, r2, r3
    7730:	08d2      	lsrs	r2, r2, #3
    7732:	0192      	lsls	r2, r2, #6
    7734:	f042 0202 	orr.w	r2, r2, #2
    7738:	4629      	mov	r1, r5
    773a:	f017 fcd6 	bl	1f0ea <log_1>
		return;
    773e:	e7e8      	b.n	7712 <enh_conn_complete+0x56>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    7740:	7923      	ldrb	r3, [r4, #4]
    7742:	3b02      	subs	r3, #2
    7744:	2b01      	cmp	r3, #1
    7746:	f104 0604 	add.w	r6, r4, #4
    774a:	d841      	bhi.n	77d0 <enh_conn_complete+0x114>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    774c:	4631      	mov	r1, r6
    774e:	a802      	add	r0, sp, #8
    7750:	f019 fb46 	bl	20de0 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    7754:	f89d 3008 	ldrb.w	r3, [sp, #8]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    7758:	f104 0111 	add.w	r1, r4, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    775c:	3b02      	subs	r3, #2
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    775e:	f10d 0001 	add.w	r0, sp, #1
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    7762:	f88d 3008 	strb.w	r3, [sp, #8]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    7766:	f019 fb36 	bl	20dd6 <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    776a:	2301      	movs	r3, #1
    776c:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    7770:	78e3      	ldrb	r3, [r4, #3]
    7772:	2b01      	cmp	r3, #1
    7774:	d116      	bne.n	77a4 <enh_conn_complete+0xe8>
    7776:	a802      	add	r0, sp, #8
    7778:	f7ff faa4 	bl	6cc4 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    777c:	78e3      	ldrb	r3, [r4, #3]
    777e:	2b01      	cmp	r3, #1
    7780:	4605      	mov	r5, r0
    7782:	d10e      	bne.n	77a2 <enh_conn_complete+0xe6>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    7784:	f000 ff92 	bl	86ac <bt_le_adv_lookup_legacy>
    7788:	f3bf 8f5b 	dmb	ish
    778c:	3010      	adds	r0, #16
    778e:	e850 3f00 	ldrex	r3, [r0]
    7792:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    7796:	e840 3200 	strex	r2, r3, [r0]
    779a:	2a00      	cmp	r2, #0
    779c:	d1f7      	bne.n	778e <enh_conn_complete+0xd2>
    779e:	f3bf 8f5b 	dmb	ish
	if (!conn) {
    77a2:	bb45      	cbnz	r5, 77f6 <enh_conn_complete+0x13a>
    77a4:	4a35      	ldr	r2, [pc, #212]	; (787c <enh_conn_complete+0x1c0>)
    77a6:	4c34      	ldr	r4, [pc, #208]	; (7878 <enh_conn_complete+0x1bc>)
		BT_ERR("No pending conn for peer %s",
    77a8:	4630      	mov	r0, r6
    77aa:	1aa4      	subs	r4, r4, r2
    77ac:	f7fe fd7a 	bl	62a4 <bt_addr_le_str_real>
    77b0:	f7fc fa12 	bl	3bd8 <log_strdup>
    77b4:	08e4      	lsrs	r4, r4, #3
    77b6:	01a4      	lsls	r4, r4, #6
    77b8:	f044 0401 	orr.w	r4, r4, #1
    77bc:	4601      	mov	r1, r0
    77be:	4622      	mov	r2, r4
    77c0:	4831      	ldr	r0, [pc, #196]	; (7888 <enh_conn_complete+0x1cc>)
    77c2:	f017 fc92 	bl	1f0ea <log_1>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    77c6:	211f      	movs	r1, #31
    77c8:	4638      	mov	r0, r7
    77ca:	f019 fb20 	bl	20e0e <bt_hci_disconnect>
		return;
    77ce:	e7a0      	b.n	7712 <enh_conn_complete+0x56>
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
    77d0:	78e3      	ldrb	r3, [r4, #3]
    77d2:	2b01      	cmp	r3, #1
    77d4:	bf04      	itt	eq
    77d6:	4b2d      	ldreq	r3, [pc, #180]	; (788c <enh_conn_complete+0x1d0>)
    77d8:	f893 5033 	ldrbeq.w	r5, [r3, #51]	; 0x33
		bt_addr_le_copy(&id_addr,
    77dc:	4631      	mov	r1, r6
    77de:	4628      	mov	r0, r5
    77e0:	f019 fc97 	bl	21112 <bt_lookup_id_addr>
    77e4:	4601      	mov	r1, r0
    77e6:	a802      	add	r0, sp, #8
    77e8:	f019 fafa 	bl	20de0 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    77ec:	4631      	mov	r1, r6
    77ee:	4668      	mov	r0, sp
    77f0:	f019 faf6 	bl	20de0 <bt_addr_le_copy>
    77f4:	e7bc      	b.n	7770 <enh_conn_complete+0xb4>
	conn->handle = handle;
    77f6:	4628      	mov	r0, r5
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    77f8:	a902      	add	r1, sp, #8
	conn->handle = handle;
    77fa:	f820 8b88 	strh.w	r8, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    77fe:	f019 faef 	bl	20de0 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    7802:	7e22      	ldrb	r2, [r4, #24]
    7804:	7de3      	ldrb	r3, [r4, #23]
    7806:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    780a:	f8a5 309e 	strh.w	r3, [r5, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    780e:	7ea2      	ldrb	r2, [r4, #26]
    7810:	7e63      	ldrb	r3, [r4, #25]
    7812:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    7816:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    781a:	7ee3      	ldrb	r3, [r4, #27]
    781c:	7f22      	ldrb	r2, [r4, #28]
    781e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    7822:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->role = evt->role;
    7826:	78e3      	ldrb	r3, [r4, #3]
    7828:	70eb      	strb	r3, [r5, #3]
	conn->err = 0U;
    782a:	2400      	movs	r4, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    782c:	2b01      	cmp	r3, #1
	conn->err = 0U;
    782e:	732c      	strb	r4, [r5, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    7830:	d118      	bne.n	7864 <enh_conn_complete+0x1a8>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    7832:	4669      	mov	r1, sp
    7834:	f105 008f 	add.w	r0, r5, #143	; 0x8f
    7838:	f019 fad2 	bl	20de0 <bt_addr_le_copy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    783c:	f000 ff36 	bl	86ac <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
    7840:	7a29      	ldrb	r1, [r5, #8]
    7842:	4a12      	ldr	r2, [pc, #72]	; (788c <enh_conn_complete+0x1d0>)
    7844:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
    7848:	4411      	add	r1, r2
    784a:	f105 0096 	add.w	r0, r5, #150	; 0x96
    784e:	f019 fac7 	bl	20de0 <bt_addr_le_copy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    7852:	f8d2 10ac 	ldr.w	r1, [r2, #172]	; 0xac
    7856:	4622      	mov	r2, r4
    7858:	f001 0340 	and.w	r3, r1, #64	; 0x40
    785c:	4313      	orrs	r3, r2
    785e:	d001      	beq.n	7864 <enh_conn_complete+0x1a8>
			bt_le_adv_resume();
    7860:	f001 f856 	bl	8910 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    7864:	2107      	movs	r1, #7
    7866:	4628      	mov	r0, r5
    7868:	f001 fcd8 	bl	921c <bt_conn_set_state>
	conn_auto_initiate(conn);
    786c:	4628      	mov	r0, r5
    786e:	f7ff fe27 	bl	74c0 <conn_auto_initiate>
	bt_conn_unref(conn);
    7872:	4628      	mov	r0, r5
    7874:	e755      	b.n	7722 <enh_conn_complete+0x66>
    7876:	bf00      	nop
    7878:	00023fb0 	.word	0x00023fb0
    787c:	00023ed8 	.word	0x00023ed8
    7880:	000268df 	.word	0x000268df
    7884:	000268fb 	.word	0x000268fb
    7888:	00026914 	.word	0x00026914
    788c:	20000000 	.word	0x20000000

00007890 <bt_security_err_get>:
	switch (hci_err) {
    7890:	2829      	cmp	r0, #41	; 0x29
    7892:	bf9a      	itte	ls
    7894:	4b01      	ldrls	r3, [pc, #4]	; (789c <bt_security_err_get+0xc>)
    7896:	5c18      	ldrbls	r0, [r3, r0]
{
    7898:	2008      	movhi	r0, #8
}
    789a:	4770      	bx	lr
    789c:	00026ae2 	.word	0x00026ae2

000078a0 <hci_event_prio>:

#endif /* CONFIG_BT_CONN */
};

void hci_event_prio(struct net_buf *buf)
{
    78a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    78a4:	4604      	mov	r4, r0
	struct net_buf_simple_state state;
	struct bt_hci_evt_hdr *hdr;
	uint8_t evt_flags;

	net_buf_simple_save(&buf->b, &state);
    78a6:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    78aa:	4630      	mov	r0, r6
    78ac:	f01b f9c3 	bl	22c36 <net_buf_simple_headroom>
	state->len = buf->len;
    78b0:	f8b4 800c 	ldrh.w	r8, [r4, #12]

	BT_ASSERT(buf->len >= sizeof(*hdr));
    78b4:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
    78b8:	4605      	mov	r5, r0
    78ba:	d80c      	bhi.n	78d6 <hci_event_prio+0x36>
    78bc:	4a1c      	ldr	r2, [pc, #112]	; (7930 <hci_event_prio+0x90>)
    78be:	491d      	ldr	r1, [pc, #116]	; (7934 <hci_event_prio+0x94>)
    78c0:	481d      	ldr	r0, [pc, #116]	; (7938 <hci_event_prio+0x98>)
    78c2:	f640 438f 	movw	r3, #3215	; 0xc8f
    78c6:	f017 f829 	bl	1e91c <printk>
    78ca:	4040      	eors	r0, r0
    78cc:	f380 8811 	msr	BASEPRI, r0
    78d0:	f04f 0003 	mov.w	r0, #3
    78d4:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    78d6:	2102      	movs	r1, #2
    78d8:	4630      	mov	r0, r6
    78da:	f01b f99c 	bl	22c16 <net_buf_simple_pull_mem>
    78de:	4607      	mov	r7, r0

	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    78e0:	7800      	ldrb	r0, [r0, #0]
    78e2:	f019 fa4e 	bl	20d82 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    78e6:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    78e8:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    78ea:	d40c      	bmi.n	7906 <hci_event_prio+0x66>
    78ec:	4a10      	ldr	r2, [pc, #64]	; (7930 <hci_event_prio+0x90>)
    78ee:	4913      	ldr	r1, [pc, #76]	; (793c <hci_event_prio+0x9c>)
    78f0:	4811      	ldr	r0, [pc, #68]	; (7938 <hci_event_prio+0x98>)
    78f2:	f640 4393 	movw	r3, #3219	; 0xc93
    78f6:	f017 f811 	bl	1e91c <printk>
    78fa:	4040      	eors	r0, r0
    78fc:	f380 8811 	msr	BASEPRI, r0
    7900:	f04f 0003 	mov.w	r0, #3
    7904:	df02      	svc	2

	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    7906:	2305      	movs	r3, #5
    7908:	4a0d      	ldr	r2, [pc, #52]	; (7940 <hci_event_prio+0xa0>)
    790a:	7838      	ldrb	r0, [r7, #0]
    790c:	4621      	mov	r1, r4
    790e:	f7ff f987 	bl	6c20 <handle_event>

	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    7912:	07b3      	lsls	r3, r6, #30
    7914:	d507      	bpl.n	7926 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
    7916:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    7918:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    791c:	fa10 f585 	uxtah	r5, r0, r5
    7920:	60a5      	str	r5, [r4, #8]
		net_buf_simple_restore(&buf->b, &state);
	} else {
		net_buf_unref(buf);
	}
}
    7922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    7926:	4620      	mov	r0, r4
}
    7928:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    792c:	f012 be66 	b.w	1a5fc <net_buf_unref>
    7930:	0002666c 	.word	0x0002666c
    7934:	00026930 	.word	0x00026930
    7938:	000266a9 	.word	0x000266a9
    793c:	00026949 	.word	0x00026949
    7940:	000245e8 	.word	0x000245e8

00007944 <bt_recv>:

int bt_recv(struct net_buf *buf)
{
    7944:	b570      	push	{r4, r5, r6, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    7946:	7d01      	ldrb	r1, [r0, #20]
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_DBG("buf %p len %u", buf, buf->len);

	switch (bt_buf_get_type(buf)) {
    7948:	2901      	cmp	r1, #1
{
    794a:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    794c:	d04b      	beq.n	79e6 <bt_recv+0xa2>
    794e:	2903      	cmp	r1, #3
    7950:	d178      	bne.n	7a44 <bt_recv+0x100>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    7952:	8983      	ldrh	r3, [r0, #12]
    7954:	2b03      	cmp	r3, #3
    7956:	d80c      	bhi.n	7972 <bt_recv+0x2e>
    7958:	4a42      	ldr	r2, [pc, #264]	; (7a64 <bt_recv+0x120>)
    795a:	4943      	ldr	r1, [pc, #268]	; (7a68 <bt_recv+0x124>)
    795c:	4843      	ldr	r0, [pc, #268]	; (7a6c <bt_recv+0x128>)
    795e:	f240 137d 	movw	r3, #381	; 0x17d
    7962:	f016 ffdb 	bl	1e91c <printk>
    7966:	4040      	eors	r0, r0
    7968:	f380 8811 	msr	BASEPRI, r0
    796c:	f04f 0003 	mov.w	r0, #3
    7970:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    7972:	2104      	movs	r1, #4
    7974:	f104 0008 	add.w	r0, r4, #8
    7978:	f01b f94d 	bl	22c16 <net_buf_simple_pull_mem>
	if (buf->len != len) {
    797c:	89a1      	ldrh	r1, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
    797e:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    7980:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    7982:	23ff      	movs	r3, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
    7984:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    7988:	428a      	cmp	r2, r1
	acl(buf)->handle = bt_acl_handle(handle);
    798a:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    798c:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
    798e:	d00d      	beq.n	79ac <bt_recv+0x68>
    7990:	4837      	ldr	r0, [pc, #220]	; (7a70 <bt_recv+0x12c>)
    7992:	4b38      	ldr	r3, [pc, #224]	; (7a74 <bt_recv+0x130>)
    7994:	1a1b      	subs	r3, r3, r0
    7996:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    7998:	019b      	lsls	r3, r3, #6
    799a:	4837      	ldr	r0, [pc, #220]	; (7a78 <bt_recv+0x134>)
    799c:	f043 0301 	orr.w	r3, r3, #1
    79a0:	f017 fbb7 	bl	1f112 <log_2>
	net_buf_unref(buf);
    79a4:	4620      	mov	r0, r4
    79a6:	f012 fe29 	bl	1a5fc <net_buf_unref>
    79aa:	e01a      	b.n	79e2 <bt_recv+0x9e>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    79ac:	f001 fc2a 	bl	9204 <bt_conn_lookup_handle>
	if (!conn) {
    79b0:	4605      	mov	r5, r0
    79b2:	b958      	cbnz	r0, 79cc <bt_recv+0x88>
    79b4:	4b2e      	ldr	r3, [pc, #184]	; (7a70 <bt_recv+0x12c>)
    79b6:	4a2f      	ldr	r2, [pc, #188]	; (7a74 <bt_recv+0x130>)
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    79b8:	8ae1      	ldrh	r1, [r4, #22]
    79ba:	4830      	ldr	r0, [pc, #192]	; (7a7c <bt_recv+0x138>)
    79bc:	1ad2      	subs	r2, r2, r3
    79be:	08d2      	lsrs	r2, r2, #3
    79c0:	0192      	lsls	r2, r2, #6
    79c2:	f042 0201 	orr.w	r2, r2, #1
    79c6:	f017 fb90 	bl	1f0ea <log_1>
		net_buf_unref(buf);
    79ca:	e7eb      	b.n	79a4 <bt_recv+0x60>
	acl(buf)->index = bt_conn_index(conn);
    79cc:	f001 fee2 	bl	9794 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    79d0:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
    79d2:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    79d4:	4621      	mov	r1, r4
    79d6:	4628      	mov	r0, r5
    79d8:	f001 fab2 	bl	8f40 <bt_conn_recv>
	bt_conn_unref(conn);
    79dc:	4628      	mov	r0, r5
    79de:	f019 fd6f 	bl	214c0 <bt_conn_unref>

		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
			net_buf_put(&bt_dev.rx_queue, buf);
		}
#endif
		return 0;
    79e2:	2000      	movs	r0, #0
	default:
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
		return -EINVAL;
	}
}
    79e4:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    79e6:	8983      	ldrh	r3, [r0, #12]
    79e8:	2b01      	cmp	r3, #1
    79ea:	d80c      	bhi.n	7a06 <bt_recv+0xc2>
    79ec:	4a1d      	ldr	r2, [pc, #116]	; (7a64 <bt_recv+0x120>)
    79ee:	491e      	ldr	r1, [pc, #120]	; (7a68 <bt_recv+0x124>)
    79f0:	481e      	ldr	r0, [pc, #120]	; (7a6c <bt_recv+0x128>)
    79f2:	f640 03b2 	movw	r3, #2226	; 0x8b2
    79f6:	f016 ff91 	bl	1e91c <printk>
    79fa:	4040      	eors	r0, r0
    79fc:	f380 8811 	msr	BASEPRI, r0
    7a00:	f04f 0003 	mov.w	r0, #3
    7a04:	df02      	svc	2
    7a06:	2102      	movs	r1, #2
    7a08:	f104 0008 	add.w	r0, r4, #8
    7a0c:	f01b f903 	bl	22c16 <net_buf_simple_pull_mem>
    7a10:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    7a12:	7800      	ldrb	r0, [r0, #0]
    7a14:	f019 f9b5 	bl	20d82 <bt_hci_evt_get_flags>
    7a18:	0783      	lsls	r3, r0, #30
    7a1a:	d40c      	bmi.n	7a36 <bt_recv+0xf2>
    7a1c:	4a11      	ldr	r2, [pc, #68]	; (7a64 <bt_recv+0x120>)
    7a1e:	4918      	ldr	r1, [pc, #96]	; (7a80 <bt_recv+0x13c>)
    7a20:	4812      	ldr	r0, [pc, #72]	; (7a6c <bt_recv+0x128>)
    7a22:	f640 03b6 	movw	r3, #2230	; 0x8b6
    7a26:	f016 ff79 	bl	1e91c <printk>
    7a2a:	4040      	eors	r0, r0
    7a2c:	f380 8811 	msr	BASEPRI, r0
    7a30:	f04f 0003 	mov.w	r0, #3
    7a34:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    7a36:	4a13      	ldr	r2, [pc, #76]	; (7a84 <bt_recv+0x140>)
    7a38:	7828      	ldrb	r0, [r5, #0]
    7a3a:	2306      	movs	r3, #6
    7a3c:	4621      	mov	r1, r4
    7a3e:	f7ff f8ef 	bl	6c20 <handle_event>
    7a42:	e7af      	b.n	79a4 <bt_recv+0x60>
    7a44:	4b0a      	ldr	r3, [pc, #40]	; (7a70 <bt_recv+0x12c>)
    7a46:	4a0b      	ldr	r2, [pc, #44]	; (7a74 <bt_recv+0x130>)
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    7a48:	480f      	ldr	r0, [pc, #60]	; (7a88 <bt_recv+0x144>)
    7a4a:	1ad2      	subs	r2, r2, r3
    7a4c:	08d2      	lsrs	r2, r2, #3
    7a4e:	0192      	lsls	r2, r2, #6
    7a50:	f042 0201 	orr.w	r2, r2, #1
    7a54:	f017 fb49 	bl	1f0ea <log_1>
		net_buf_unref(buf);
    7a58:	4620      	mov	r0, r4
    7a5a:	f012 fdcf 	bl	1a5fc <net_buf_unref>
		return -EINVAL;
    7a5e:	f06f 0015 	mvn.w	r0, #21
    7a62:	e7bf      	b.n	79e4 <bt_recv+0xa0>
    7a64:	0002666c 	.word	0x0002666c
    7a68:	00026930 	.word	0x00026930
    7a6c:	000266a9 	.word	0x000266a9
    7a70:	00023ed8 	.word	0x00023ed8
    7a74:	00023fb0 	.word	0x00023fb0
    7a78:	00026962 	.word	0x00026962
    7a7c:	00026986 	.word	0x00026986
    7a80:	000269a8 	.word	0x000269a8
    7a84:	000245a8 	.word	0x000245a8
    7a88:	000269d6 	.word	0x000269d6

00007a8c <bt_recv_prio>:

#if defined(CONFIG_BT_RECV_IS_RX_THREAD)
int bt_recv_prio(struct net_buf *buf)
{
    7a8c:	b510      	push	{r4, lr}
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    7a8e:	7d03      	ldrb	r3, [r0, #20]
    7a90:	2b01      	cmp	r3, #1
{
    7a92:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    7a94:	d00c      	beq.n	7ab0 <bt_recv_prio+0x24>
    7a96:	4a09      	ldr	r2, [pc, #36]	; (7abc <bt_recv_prio+0x30>)
    7a98:	4909      	ldr	r1, [pc, #36]	; (7ac0 <bt_recv_prio+0x34>)
    7a9a:	480a      	ldr	r0, [pc, #40]	; (7ac4 <bt_recv_prio+0x38>)
    7a9c:	f640 43d6 	movw	r3, #3286	; 0xcd6
    7aa0:	f016 ff3c 	bl	1e91c <printk>
    7aa4:	4040      	eors	r0, r0
    7aa6:	f380 8811 	msr	BASEPRI, r0
    7aaa:	f04f 0003 	mov.w	r0, #3
    7aae:	df02      	svc	2

	hci_event_prio(buf);
    7ab0:	4620      	mov	r0, r4
    7ab2:	f7ff fef5 	bl	78a0 <hci_event_prio>

	return 0;
}
    7ab6:	2000      	movs	r0, #0
    7ab8:	bd10      	pop	{r4, pc}
    7aba:	bf00      	nop
    7abc:	0002666c 	.word	0x0002666c
    7ac0:	000269ea 	.word	0x000269ea
    7ac4:	000266a9 	.word	0x000266a9

00007ac8 <bt_hci_driver_register>:
#endif /* defined(CONFIG_BT_RECV_IS_RX_THREAD) */

int bt_hci_driver_register(const struct bt_hci_driver *drv)
{
	if (bt_dev.drv) {
    7ac8:	4a08      	ldr	r2, [pc, #32]	; (7aec <bt_hci_driver_register+0x24>)
{
    7aca:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    7acc:	f8d2 0124 	ldr.w	r0, [r2, #292]	; 0x124
    7ad0:	b930      	cbnz	r0, 7ae0 <bt_hci_driver_register+0x18>
		return -EALREADY;
	}

	if (!drv->open || !drv->send) {
    7ad2:	68d9      	ldr	r1, [r3, #12]
    7ad4:	b139      	cbz	r1, 7ae6 <bt_hci_driver_register+0x1e>
    7ad6:	6919      	ldr	r1, [r3, #16]
    7ad8:	b129      	cbz	r1, 7ae6 <bt_hci_driver_register+0x1e>
		return -EINVAL;
	}

	bt_dev.drv = drv;
    7ada:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
	BT_DBG("Registered %s", drv->name ? drv->name : "");

	bt_monitor_new_index(BT_MONITOR_TYPE_PRIMARY, drv->bus,
			     BT_ADDR_ANY, drv->name ? drv->name : "bt0");

	return 0;
    7ade:	4770      	bx	lr
		return -EALREADY;
    7ae0:	f06f 0077 	mvn.w	r0, #119	; 0x77
    7ae4:	4770      	bx	lr
		return -EINVAL;
    7ae6:	f06f 0015 	mvn.w	r0, #21
}
    7aea:	4770      	bx	lr
    7aec:	20000000 	.word	0x20000000

00007af0 <bt_finalize_init>:

void bt_finalize_init(void)
{
    7af0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7af4:	4c30      	ldr	r4, [pc, #192]	; (7bb8 <bt_finalize_init+0xc8>)
    7af6:	f3bf 8f5b 	dmb	ish
    7afa:	b087      	sub	sp, #28
    7afc:	f104 0398 	add.w	r3, r4, #152	; 0x98
    7b00:	e853 2f00 	ldrex	r2, [r3]
    7b04:	f042 0202 	orr.w	r2, r2, #2
    7b08:	e843 2100 	strex	r1, r2, [r3]
    7b0c:	2900      	cmp	r1, #0
    7b0e:	d1f7      	bne.n	7b00 <bt_finalize_init+0x10>
    7b10:	f3bf 8f5b 	dmb	ish
    7b14:	4b29      	ldr	r3, [pc, #164]	; (7bbc <bt_finalize_init+0xcc>)
    7b16:	4d2a      	ldr	r5, [pc, #168]	; (7bc0 <bt_finalize_init+0xd0>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    7b18:	492a      	ldr	r1, [pc, #168]	; (7bc4 <bt_finalize_init+0xd4>)
    7b1a:	4e2b      	ldr	r6, [pc, #172]	; (7bc8 <bt_finalize_init+0xd8>)
		BT_INFO("Identity[%d]: %s",
    7b1c:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 7bd8 <bt_finalize_init+0xe8>
    7b20:	1aed      	subs	r5, r5, r3
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    7b22:	79e3      	ldrb	r3, [r4, #7]
    7b24:	4620      	mov	r0, r4
    7b26:	2b01      	cmp	r3, #1
    7b28:	bf88      	it	hi
    7b2a:	460e      	movhi	r6, r1
    7b2c:	f7fe fbba 	bl	62a4 <bt_addr_le_str_real>
    7b30:	f7fc f852 	bl	3bd8 <log_strdup>
    7b34:	08ed      	lsrs	r5, r5, #3
    7b36:	01ad      	lsls	r5, r5, #6
    7b38:	f045 0703 	orr.w	r7, r5, #3
    7b3c:	4602      	mov	r2, r0
    7b3e:	4631      	mov	r1, r6
    7b40:	4822      	ldr	r0, [pc, #136]	; (7bcc <bt_finalize_init+0xdc>)
    7b42:	463b      	mov	r3, r7
    7b44:	f017 fae5 	bl	1f112 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    7b48:	46a0      	mov	r8, r4
    7b4a:	2601      	movs	r6, #1
    7b4c:	79e3      	ldrb	r3, [r4, #7]
    7b4e:	429e      	cmp	r6, r3
    7b50:	f108 0807 	add.w	r8, r8, #7
    7b54:	db22      	blt.n	7b9c <bt_finalize_init+0xac>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    7b56:	f894 6034 	ldrb.w	r6, [r4, #52]	; 0x34
    7b5a:	4630      	mov	r0, r6
    7b5c:	f7fe fe50 	bl	6800 <ver_str>
    7b60:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    7b62:	9304      	str	r3, [sp, #16]
    7b64:	f045 0503 	orr.w	r5, r5, #3
    7b68:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
    7b6a:	9305      	str	r3, [sp, #20]
    7b6c:	e9cd 0602 	strd	r0, r6, [sp, #8]
    7b70:	462b      	mov	r3, r5
    7b72:	a902      	add	r1, sp, #8
    7b74:	2204      	movs	r2, #4
    7b76:	4816      	ldr	r0, [pc, #88]	; (7bd0 <bt_finalize_init+0xe0>)
    7b78:	f017 fb00 	bl	1f17c <log_n>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    7b7c:	f894 6035 	ldrb.w	r6, [r4, #53]	; 0x35
    7b80:	4630      	mov	r0, r6
    7b82:	f7fe fe3d 	bl	6800 <ver_str>
    7b86:	8f23      	ldrh	r3, [r4, #56]	; 0x38
    7b88:	f8ad 5000 	strh.w	r5, [sp]
    7b8c:	4601      	mov	r1, r0
    7b8e:	4632      	mov	r2, r6
    7b90:	4810      	ldr	r0, [pc, #64]	; (7bd4 <bt_finalize_init+0xe4>)
    7b92:	f017 fad7 	bl	1f144 <log_3>
	if (IS_ENABLED(CONFIG_BT_OBSERVER)) {
		bt_le_scan_update(false);
	}

	bt_dev_show_info();
}
    7b96:	b007      	add	sp, #28
    7b98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_INFO("Identity[%d]: %s",
    7b9c:	4640      	mov	r0, r8
    7b9e:	f7fe fb81 	bl	62a4 <bt_addr_le_str_real>
    7ba2:	f7fc f819 	bl	3bd8 <log_strdup>
    7ba6:	4631      	mov	r1, r6
    7ba8:	4602      	mov	r2, r0
    7baa:	463b      	mov	r3, r7
    7bac:	4648      	mov	r0, r9
    7bae:	f017 fab0 	bl	1f112 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    7bb2:	3601      	adds	r6, #1
    7bb4:	e7ca      	b.n	7b4c <bt_finalize_init+0x5c>
    7bb6:	bf00      	nop
    7bb8:	20000000 	.word	0x20000000
    7bbc:	00023ed8 	.word	0x00023ed8
    7bc0:	00023fb0 	.word	0x00023fb0
    7bc4:	00026a0d 	.word	0x00026a0d
    7bc8:	00025b33 	.word	0x00025b33
    7bcc:	00026a11 	.word	0x00026a11
    7bd0:	00026a31 	.word	0x00026a31
    7bd4:	00026a6f 	.word	0x00026a6f
    7bd8:	00026a20 	.word	0x00026a20

00007bdc <init_work>:
	bt_finalize_init();
	return 0;
}

static void init_work(struct k_work *work)
{
    7bdc:	b510      	push	{r4, lr}
	err = hci_init();
    7bde:	f7f9 f8bb 	bl	d58 <hci_init>
	if (err) {
    7be2:	4604      	mov	r4, r0
    7be4:	b928      	cbnz	r0, 7bf2 <init_work+0x16>
		err = bt_conn_init();
    7be6:	f001 fde1 	bl	97ac <bt_conn_init>
		if (err) {
    7bea:	4604      	mov	r4, r0
    7bec:	b908      	cbnz	r0, 7bf2 <init_work+0x16>
	bt_finalize_init();
    7bee:	f7ff ff7f 	bl	7af0 <bt_finalize_init>
	int err;

	err = bt_init();
	if (ready_cb) {
    7bf2:	4b04      	ldr	r3, [pc, #16]	; (7c04 <init_work+0x28>)
    7bf4:	681b      	ldr	r3, [r3, #0]
    7bf6:	b11b      	cbz	r3, 7c00 <init_work+0x24>
		ready_cb(err);
    7bf8:	4620      	mov	r0, r4
	}
}
    7bfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    7bfe:	4718      	bx	r3
}
    7c00:	bd10      	pop	{r4, pc}
    7c02:	bf00      	nop
    7c04:	2000183c 	.word	0x2000183c

00007c08 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    7c08:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
    7c0a:	4d34      	ldr	r5, [pc, #208]	; (7cdc <bt_enable+0xd4>)
    7c0c:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
{
    7c10:	b088      	sub	sp, #32
    7c12:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    7c14:	b973      	cbnz	r3, 7c34 <bt_enable+0x2c>
    7c16:	4b32      	ldr	r3, [pc, #200]	; (7ce0 <bt_enable+0xd8>)
    7c18:	4932      	ldr	r1, [pc, #200]	; (7ce4 <bt_enable+0xdc>)
		BT_ERR("No HCI driver registered");
    7c1a:	4833      	ldr	r0, [pc, #204]	; (7ce8 <bt_enable+0xe0>)
    7c1c:	1ac9      	subs	r1, r1, r3
    7c1e:	08c9      	lsrs	r1, r1, #3
    7c20:	0189      	lsls	r1, r1, #6
    7c22:	f041 0101 	orr.w	r1, r1, #1
    7c26:	f017 fa53 	bl	1f0d0 <log_0>
		return -ENODEV;
    7c2a:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    7c2e:	4620      	mov	r0, r4
    7c30:	b008      	add	sp, #32
    7c32:	bd70      	pop	{r4, r5, r6, pc}
    7c34:	f105 0298 	add.w	r2, r5, #152	; 0x98
    7c38:	f3bf 8f5b 	dmb	ish
    7c3c:	e852 3f00 	ldrex	r3, [r2]
    7c40:	f043 0101 	orr.w	r1, r3, #1
    7c44:	e842 1000 	strex	r0, r1, [r2]
    7c48:	2800      	cmp	r0, #0
    7c4a:	d1f7      	bne.n	7c3c <bt_enable+0x34>
    7c4c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    7c50:	f013 0301 	ands.w	r3, r3, #1
    7c54:	d13f      	bne.n	7cd6 <bt_enable+0xce>
	ready_cb = cb;
    7c56:	4a25      	ldr	r2, [pc, #148]	; (7cec <bt_enable+0xe4>)
    7c58:	6016      	str	r6, [r2, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    7c5a:	2000      	movs	r0, #0
    7c5c:	2100      	movs	r1, #0
    7c5e:	f06f 0208 	mvn.w	r2, #8
    7c62:	e9cd 0106 	strd	r0, r1, [sp, #24]
    7c66:	e9cd 3202 	strd	r3, r2, [sp, #8]
    7c6a:	e9cd 3300 	strd	r3, r3, [sp]
    7c6e:	9304      	str	r3, [sp, #16]
    7c70:	491f      	ldr	r1, [pc, #124]	; (7cf0 <bt_enable+0xe8>)
    7c72:	4b20      	ldr	r3, [pc, #128]	; (7cf4 <bt_enable+0xec>)
    7c74:	4820      	ldr	r0, [pc, #128]	; (7cf8 <bt_enable+0xf0>)
    7c76:	f44f 7220 	mov.w	r2, #640	; 0x280
    7c7a:	f016 f831 	bl	1dce0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    7c7e:	491f      	ldr	r1, [pc, #124]	; (7cfc <bt_enable+0xf4>)
    7c80:	481d      	ldr	r0, [pc, #116]	; (7cf8 <bt_enable+0xf0>)
    7c82:	f01b fd08 	bl	23696 <z_impl_k_thread_name_set>
		bt_hci_ecc_init();
    7c86:	f7fe fcf3 	bl	6670 <bt_hci_ecc_init>
	err = bt_dev.drv->open();
    7c8a:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    7c8e:	68db      	ldr	r3, [r3, #12]
    7c90:	4798      	blx	r3
	if (err) {
    7c92:	4604      	mov	r4, r0
    7c94:	b158      	cbz	r0, 7cae <bt_enable+0xa6>
    7c96:	4b12      	ldr	r3, [pc, #72]	; (7ce0 <bt_enable+0xd8>)
    7c98:	4a12      	ldr	r2, [pc, #72]	; (7ce4 <bt_enable+0xdc>)
    7c9a:	1ad2      	subs	r2, r2, r3
    7c9c:	08d2      	lsrs	r2, r2, #3
		BT_ERR("HCI driver open failed (%d)", err);
    7c9e:	0192      	lsls	r2, r2, #6
    7ca0:	4601      	mov	r1, r0
    7ca2:	f042 0201 	orr.w	r2, r2, #1
    7ca6:	4816      	ldr	r0, [pc, #88]	; (7d00 <bt_enable+0xf8>)
    7ca8:	f017 fa1f 	bl	1f0ea <log_1>
		return err;
    7cac:	e7bf      	b.n	7c2e <bt_enable+0x26>
	if (!cb) {
    7cae:	b966      	cbnz	r6, 7cca <bt_enable+0xc2>
	err = hci_init();
    7cb0:	f7f9 f852 	bl	d58 <hci_init>
	if (err) {
    7cb4:	4604      	mov	r4, r0
    7cb6:	2800      	cmp	r0, #0
    7cb8:	d1b9      	bne.n	7c2e <bt_enable+0x26>
		err = bt_conn_init();
    7cba:	f001 fd77 	bl	97ac <bt_conn_init>
		if (err) {
    7cbe:	4604      	mov	r4, r0
    7cc0:	2800      	cmp	r0, #0
    7cc2:	d1b4      	bne.n	7c2e <bt_enable+0x26>
	bt_finalize_init();
    7cc4:	f7ff ff14 	bl	7af0 <bt_finalize_init>
	return 0;
    7cc8:	e7b1      	b.n	7c2e <bt_enable+0x26>
    7cca:	f105 0188 	add.w	r1, r5, #136	; 0x88
    7cce:	480d      	ldr	r0, [pc, #52]	; (7d04 <bt_enable+0xfc>)
    7cd0:	f01b fd58 	bl	23784 <k_work_submit_to_queue>
    7cd4:	e7ab      	b.n	7c2e <bt_enable+0x26>
		return -EALREADY;
    7cd6:	f06f 0477 	mvn.w	r4, #119	; 0x77
    7cda:	e7a8      	b.n	7c2e <bt_enable+0x26>
    7cdc:	20000000 	.word	0x20000000
    7ce0:	00023ed8 	.word	0x00023ed8
    7ce4:	00023fb0 	.word	0x00023fb0
    7ce8:	00026a96 	.word	0x00026a96
    7cec:	2000183c 	.word	0x2000183c
    7cf0:	2000c630 	.word	0x2000c630
    7cf4:	00006e05 	.word	0x00006e05
    7cf8:	20000d38 	.word	0x20000d38
    7cfc:	00026aaf 	.word	0x00026aaf
    7d00:	00026ab5 	.word	0x00026ab5
    7d04:	200015c0 	.word	0x200015c0

00007d08 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
    7d08:	4800      	ldr	r0, [pc, #0]	; (7d0c <bt_get_name+0x4>)
    7d0a:	4770      	bx	lr
    7d0c:	00026ad1 	.word	0x00026ad1

00007d10 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
    7d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    7d12:	4f0b      	ldr	r7, [pc, #44]	; (7d40 <id_find+0x30>)
{
    7d14:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    7d16:	2500      	movs	r5, #0
    7d18:	79fb      	ldrb	r3, [r7, #7]
    7d1a:	b2ec      	uxtb	r4, r5
    7d1c:	42a3      	cmp	r3, r4
    7d1e:	d802      	bhi.n	7d26 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    7d20:	f06f 0401 	mvn.w	r4, #1
    7d24:	e009      	b.n	7d3a <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    7d26:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
    7d2a:	2207      	movs	r2, #7
    7d2c:	4439      	add	r1, r7
    7d2e:	4630      	mov	r0, r6
    7d30:	f01b ff57 	bl	23be2 <memcmp>
    7d34:	3501      	adds	r5, #1
    7d36:	2800      	cmp	r0, #0
    7d38:	d1ee      	bne.n	7d18 <id_find+0x8>
}
    7d3a:	4620      	mov	r0, r4
    7d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7d3e:	bf00      	nop
    7d40:	20000000 	.word	0x20000000

00007d44 <set_random_address>:
{
    7d44:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
    7d46:	2206      	movs	r2, #6
    7d48:	4913      	ldr	r1, [pc, #76]	; (7d98 <set_random_address+0x54>)
    7d4a:	4605      	mov	r5, r0
    7d4c:	f01b ff49 	bl	23be2 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    7d50:	4602      	mov	r2, r0
    7d52:	b1d8      	cbz	r0, 7d8c <set_random_address+0x48>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    7d54:	2106      	movs	r1, #6
    7d56:	f242 0005 	movw	r0, #8197	; 0x2005
    7d5a:	f7ff f9ab 	bl	70b4 <bt_hci_cmd_create>
	if (!buf) {
    7d5e:	4604      	mov	r4, r0
    7d60:	b1b0      	cbz	r0, 7d90 <set_random_address+0x4c>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    7d62:	2206      	movs	r2, #6
    7d64:	4629      	mov	r1, r5
    7d66:	3008      	adds	r0, #8
    7d68:	f01a ff33 	bl	22bd2 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    7d6c:	2200      	movs	r2, #0
    7d6e:	4621      	mov	r1, r4
    7d70:	f242 0005 	movw	r0, #8197	; 0x2005
    7d74:	f7ff fb02 	bl	737c <bt_hci_cmd_send_sync>
	if (err) {
    7d78:	4602      	mov	r2, r0
    7d7a:	b938      	cbnz	r0, 7d8c <set_random_address+0x48>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
    7d7c:	4629      	mov	r1, r5
    7d7e:	4806      	ldr	r0, [pc, #24]	; (7d98 <set_random_address+0x54>)
    7d80:	f019 f96c 	bl	2105c <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    7d84:	4b05      	ldr	r3, [pc, #20]	; (7d9c <set_random_address+0x58>)
    7d86:	2101      	movs	r1, #1
    7d88:	f883 102c 	strb.w	r1, [r3, #44]	; 0x2c
}
    7d8c:	4610      	mov	r0, r2
    7d8e:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    7d90:	f06f 0268 	mvn.w	r2, #104	; 0x68
    7d94:	e7fa      	b.n	7d8c <set_random_address+0x48>
    7d96:	bf00      	nop
    7d98:	2000002d 	.word	0x2000002d
    7d9c:	20000000 	.word	0x20000000

00007da0 <id_create.isra.0>:

static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    7da0:	b530      	push	{r4, r5, lr}
    7da2:	4c14      	ldr	r4, [pc, #80]	; (7df4 <id_create.isra.0+0x54>)
    7da4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    7da8:	b085      	sub	sp, #20
    7daa:	4404      	add	r4, r0
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    7dac:	460d      	mov	r5, r1
    7dae:	b179      	cbz	r1, 7dd0 <id_create.isra.0+0x30>
    7db0:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    7db2:	2207      	movs	r2, #7
    7db4:	4669      	mov	r1, sp
    7db6:	4628      	mov	r0, r5
    7db8:	9300      	str	r3, [sp, #0]
    7dba:	f8cd 3003 	str.w	r3, [sp, #3]
    7dbe:	f01b ff10 	bl	23be2 <memcmp>
    7dc2:	b128      	cbz	r0, 7dd0 <id_create.isra.0+0x30>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    7dc4:	4629      	mov	r1, r5
    7dc6:	4620      	mov	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    7dc8:	f019 f94d 	bl	21066 <bt_addr_le_copy>
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}
}
    7dcc:	b005      	add	sp, #20
    7dce:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
    7dd0:	a802      	add	r0, sp, #8
    7dd2:	f018 ffc8 	bl	20d66 <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    7dd6:	a802      	add	r0, sp, #8
    7dd8:	f7ff ff9a 	bl	7d10 <id_find>
    7ddc:	2800      	cmp	r0, #0
    7dde:	daf7      	bge.n	7dd0 <id_create.isra.0+0x30>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    7de0:	a902      	add	r1, sp, #8
    7de2:	4620      	mov	r0, r4
    7de4:	f019 f93f 	bl	21066 <bt_addr_le_copy>
		if (addr) {
    7de8:	2d00      	cmp	r5, #0
    7dea:	d0ef      	beq.n	7dcc <id_create.isra.0+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    7dec:	4621      	mov	r1, r4
    7dee:	4628      	mov	r0, r5
    7df0:	e7ea      	b.n	7dc8 <id_create.isra.0+0x28>
    7df2:	bf00      	nop
    7df4:	20000000 	.word	0x20000000

00007df8 <bt_id_pending_keys_update>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7df8:	4b0a      	ldr	r3, [pc, #40]	; (7e24 <bt_id_pending_keys_update+0x2c>)
    7dfa:	f3bf 8f5b 	dmb	ish
    7dfe:	e853 2f00 	ldrex	r2, [r3]
    7e02:	f422 4180 	bic.w	r1, r2, #16384	; 0x4000
    7e06:	e843 1000 	strex	r0, r1, [r3]
    7e0a:	2800      	cmp	r0, #0
    7e0c:	d1f7      	bne.n	7dfe <bt_id_pending_keys_update+0x6>
    7e0e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    7e12:	0453      	lsls	r3, r2, #17
    7e14:	d504      	bpl.n	7e20 <bt_id_pending_keys_update+0x28>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
    7e16:	4904      	ldr	r1, [pc, #16]	; (7e28 <bt_id_pending_keys_update+0x30>)
    7e18:	2200      	movs	r2, #0
    7e1a:	2002      	movs	r0, #2
    7e1c:	f005 b8d0 	b.w	cfc0 <bt_keys_foreach>
}
    7e20:	4770      	bx	lr
    7e22:	bf00      	nop
    7e24:	20000098 	.word	0x20000098
    7e28:	0002114b 	.word	0x0002114b

00007e2c <bt_id_add>:
{
    7e2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    7e2e:	4e5e      	ldr	r6, [pc, #376]	; (7fa8 <bt_id_add+0x17c>)
    7e30:	f896 20e8 	ldrb.w	r2, [r6, #232]	; 0xe8
    7e34:	f896 30e9 	ldrb.w	r3, [r6, #233]	; 0xe9
{
    7e38:	4604      	mov	r4, r0
    7e3a:	4635      	mov	r5, r6
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    7e3c:	b10a      	cbz	r2, 7e42 <bt_id_add+0x16>
    7e3e:	429a      	cmp	r2, r3
    7e40:	d208      	bcs.n	7e54 <bt_id_add+0x28>
		bt_dev.le.rl_entries++;
    7e42:	3301      	adds	r3, #1
    7e44:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		keys->state |= BT_KEYS_ID_ADDED;
    7e48:	7a23      	ldrb	r3, [r4, #8]
    7e4a:	f043 0304 	orr.w	r3, r3, #4
    7e4e:	7223      	strb	r3, [r4, #8]
}
    7e50:	b003      	add	sp, #12
    7e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    7e54:	2100      	movs	r1, #0
    7e56:	2206      	movs	r2, #6
    7e58:	4608      	mov	r0, r1
    7e5a:	f001 fb15 	bl	9488 <bt_conn_lookup_state_le>
	if (conn) {
    7e5e:	4607      	mov	r7, r0
    7e60:	b198      	cbz	r0, 7e8a <bt_id_add+0x5e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7e62:	f3bf 8f5b 	dmb	ish
    7e66:	3698      	adds	r6, #152	; 0x98
    7e68:	e856 3f00 	ldrex	r3, [r6]
    7e6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    7e70:	e846 3200 	strex	r2, r3, [r6]
    7e74:	2a00      	cmp	r2, #0
    7e76:	d1f7      	bne.n	7e68 <bt_id_add+0x3c>
    7e78:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
    7e7c:	7a23      	ldrb	r3, [r4, #8]
    7e7e:	f043 0301 	orr.w	r3, r3, #1
    7e82:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
    7e84:	f019 fb1c 	bl	214c0 <bt_conn_unref>
		return;
    7e88:	e7e2      	b.n	7e50 <bt_id_add+0x24>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
    7e8a:	4601      	mov	r1, r0
    7e8c:	4847      	ldr	r0, [pc, #284]	; (7fac <bt_id_add+0x180>)
    7e8e:	f000 fc07 	bl	86a0 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries) {
    7e92:	f896 30e9 	ldrb.w	r3, [r6, #233]	; 0xe9
    7e96:	b173      	cbz	r3, 7eb6 <bt_id_add+0x8a>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    7e98:	4638      	mov	r0, r7
    7e9a:	f019 f8c7 	bl	2102c <addr_res_enable>
		if (err) {
    7e9e:	b150      	cbz	r0, 7eb6 <bt_id_add+0x8a>
    7ea0:	4943      	ldr	r1, [pc, #268]	; (7fb0 <bt_id_add+0x184>)
    7ea2:	4b44      	ldr	r3, [pc, #272]	; (7fb4 <bt_id_add+0x188>)
			BT_WARN("Failed to disable address resolution");
    7ea4:	4844      	ldr	r0, [pc, #272]	; (7fb8 <bt_id_add+0x18c>)
    7ea6:	1ac9      	subs	r1, r1, r3
    7ea8:	08c9      	lsrs	r1, r1, #3
    7eaa:	0189      	lsls	r1, r1, #6
    7eac:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("Set privacy mode command is not supported");
    7eb0:	f017 f90e 	bl	1f0d0 <log_0>
	if (err) {
    7eb4:	e023      	b.n	7efe <bt_id_add+0xd2>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
    7eb6:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
    7eba:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
    7ebe:	429a      	cmp	r2, r3
    7ec0:	d125      	bne.n	7f0e <bt_id_add+0xe2>
    7ec2:	4b3c      	ldr	r3, [pc, #240]	; (7fb4 <bt_id_add+0x188>)
    7ec4:	4e3a      	ldr	r6, [pc, #232]	; (7fb0 <bt_id_add+0x184>)
		BT_WARN("Resolving list size exceeded. Switching to host.");
    7ec6:	483d      	ldr	r0, [pc, #244]	; (7fbc <bt_id_add+0x190>)
    7ec8:	1af6      	subs	r6, r6, r3
    7eca:	08f6      	lsrs	r6, r6, #3
    7ecc:	01b6      	lsls	r6, r6, #6
    7ece:	f046 0102 	orr.w	r1, r6, #2
    7ed2:	f017 f8fd 	bl	1f0d0 <log_0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
    7ed6:	2200      	movs	r2, #0
    7ed8:	4611      	mov	r1, r2
    7eda:	f242 0029 	movw	r0, #8233	; 0x2029
    7ede:	f7ff fa4d 	bl	737c <bt_hci_cmd_send_sync>
		if (err) {
    7ee2:	b118      	cbz	r0, 7eec <bt_id_add+0xc0>
			BT_ERR("Failed to clear resolution list");
    7ee4:	4836      	ldr	r0, [pc, #216]	; (7fc0 <bt_id_add+0x194>)
    7ee6:	f046 0101 	orr.w	r1, r6, #1
    7eea:	e7e1      	b.n	7eb0 <bt_id_add+0x84>
		bt_dev.le.rl_entries++;
    7eec:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
    7ef0:	3301      	adds	r3, #1
    7ef2:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		keys->state |= BT_KEYS_ID_ADDED;
    7ef6:	7a23      	ldrb	r3, [r4, #8]
    7ef8:	f043 0304 	orr.w	r3, r3, #4
    7efc:	7223      	strb	r3, [r4, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    7efe:	2001      	movs	r0, #1
    7f00:	f019 f894 	bl	2102c <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
    7f04:	482f      	ldr	r0, [pc, #188]	; (7fc4 <bt_id_add+0x198>)
    7f06:	2100      	movs	r1, #0
    7f08:	f000 fbca 	bl	86a0 <bt_le_ext_adv_foreach>
    7f0c:	e7a0      	b.n	7e50 <bt_id_add+0x24>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
    7f0e:	1c67      	adds	r7, r4, #1
    7f10:	f104 012a 	add.w	r1, r4, #42	; 0x2a
    7f14:	4638      	mov	r0, r7
    7f16:	f019 f8ad 	bl	21074 <hci_id_add.isra.0>
	if (err) {
    7f1a:	4606      	mov	r6, r0
    7f1c:	b140      	cbz	r0, 7f30 <bt_id_add+0x104>
    7f1e:	4924      	ldr	r1, [pc, #144]	; (7fb0 <bt_id_add+0x184>)
    7f20:	4b24      	ldr	r3, [pc, #144]	; (7fb4 <bt_id_add+0x188>)
		BT_ERR("Failed to add IRK to controller");
    7f22:	4829      	ldr	r0, [pc, #164]	; (7fc8 <bt_id_add+0x19c>)
    7f24:	1ac9      	subs	r1, r1, r3
    7f26:	08c9      	lsrs	r1, r1, #3
    7f28:	0189      	lsls	r1, r1, #6
    7f2a:	f041 0101 	orr.w	r1, r1, #1
    7f2e:	e7bf      	b.n	7eb0 <bt_id_add+0x84>
	bt_dev.le.rl_entries++;
    7f30:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
    7f34:	3301      	adds	r3, #1
    7f36:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
	keys->state |= BT_KEYS_ID_ADDED;
    7f3a:	7a23      	ldrb	r3, [r4, #8]
    7f3c:	f043 0304 	orr.w	r3, r3, #4
    7f40:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
    7f42:	f895 306b 	ldrb.w	r3, [r5, #107]	; 0x6b
    7f46:	075b      	lsls	r3, r3, #29
    7f48:	d408      	bmi.n	7f5c <bt_id_add+0x130>
    7f4a:	4919      	ldr	r1, [pc, #100]	; (7fb0 <bt_id_add+0x184>)
    7f4c:	4b19      	ldr	r3, [pc, #100]	; (7fb4 <bt_id_add+0x188>)
		BT_WARN("Set privacy mode command is not supported");
    7f4e:	481f      	ldr	r0, [pc, #124]	; (7fcc <bt_id_add+0x1a0>)
    7f50:	1ac9      	subs	r1, r1, r3
    7f52:	08c9      	lsrs	r1, r1, #3
    7f54:	0189      	lsls	r1, r1, #6
    7f56:	f041 0102 	orr.w	r1, r1, #2
    7f5a:	e7a9      	b.n	7eb0 <bt_id_add+0x84>
	bt_addr_le_copy(&cp.id_addr, addr);
    7f5c:	4639      	mov	r1, r7
    7f5e:	4668      	mov	r0, sp
    7f60:	f019 f881 	bl	21066 <bt_addr_le_copy>
	cp.mode = mode;
    7f64:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    7f66:	2108      	movs	r1, #8
    7f68:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
    7f6c:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    7f70:	f7ff f8a0 	bl	70b4 <bt_hci_cmd_create>
	if (!buf) {
    7f74:	4604      	mov	r4, r0
    7f76:	b940      	cbnz	r0, 7f8a <bt_id_add+0x15e>
    7f78:	490d      	ldr	r1, [pc, #52]	; (7fb0 <bt_id_add+0x184>)
    7f7a:	4b0e      	ldr	r3, [pc, #56]	; (7fb4 <bt_id_add+0x188>)
		BT_ERR("Failed to set privacy mode");
    7f7c:	4814      	ldr	r0, [pc, #80]	; (7fd0 <bt_id_add+0x1a4>)
    7f7e:	1ac9      	subs	r1, r1, r3
    7f80:	08c9      	lsrs	r1, r1, #3
    7f82:	0189      	lsls	r1, r1, #6
    7f84:	f041 0101 	orr.w	r1, r1, #1
    7f88:	e792      	b.n	7eb0 <bt_id_add+0x84>
    7f8a:	2208      	movs	r2, #8
    7f8c:	4669      	mov	r1, sp
    7f8e:	4410      	add	r0, r2
    7f90:	f01a fe1f 	bl	22bd2 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
    7f94:	4632      	mov	r2, r6
    7f96:	4621      	mov	r1, r4
    7f98:	f242 004e 	movw	r0, #8270	; 0x204e
    7f9c:	f7ff f9ee 	bl	737c <bt_hci_cmd_send_sync>
	if (err) {
    7fa0:	2800      	cmp	r0, #0
    7fa2:	d0ac      	beq.n	7efe <bt_id_add+0xd2>
    7fa4:	e7e8      	b.n	7f78 <bt_id_add+0x14c>
    7fa6:	bf00      	nop
    7fa8:	20000000 	.word	0x20000000
    7fac:	000210e1 	.word	0x000210e1
    7fb0:	00023fc0 	.word	0x00023fc0
    7fb4:	00023ed8 	.word	0x00023ed8
    7fb8:	00026b0c 	.word	0x00026b0c
    7fbc:	00026b31 	.word	0x00026b31
    7fc0:	00026b62 	.word	0x00026b62
    7fc4:	00021003 	.word	0x00021003
    7fc8:	00026b82 	.word	0x00026b82
    7fcc:	00026ba2 	.word	0x00026ba2
    7fd0:	00026bcc 	.word	0x00026bcc

00007fd4 <bt_id_del>:
{
    7fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size ||
    7fd8:	4e47      	ldr	r6, [pc, #284]	; (80f8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf8>)
    7fda:	f896 20e8 	ldrb.w	r2, [r6, #232]	; 0xe8
    7fde:	f896 30e9 	ldrb.w	r3, [r6, #233]	; 0xe9
{
    7fe2:	4604      	mov	r4, r0
    7fe4:	4635      	mov	r5, r6
	if (!bt_dev.le.rl_size ||
    7fe6:	b112      	cbz	r2, 7fee <bt_id_del+0x1a>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    7fe8:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
    7fea:	4293      	cmp	r3, r2
    7fec:	dd08      	ble.n	8000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC>
		bt_dev.le.rl_entries--;
    7fee:	3b01      	subs	r3, #1
    7ff0:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		keys->state &= ~BT_KEYS_ID_ADDED;
    7ff4:	7a23      	ldrb	r3, [r4, #8]
    7ff6:	f023 0304 	bic.w	r3, r3, #4
    7ffa:	7223      	strb	r3, [r4, #8]
}
    7ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    8000:	2100      	movs	r1, #0
    8002:	2206      	movs	r2, #6
    8004:	4608      	mov	r0, r1
    8006:	f001 fa3f 	bl	9488 <bt_conn_lookup_state_le>
	if (conn) {
    800a:	4607      	mov	r7, r0
    800c:	b1a0      	cbz	r0, 8038 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x38>
    800e:	f3bf 8f5b 	dmb	ish
    8012:	3698      	adds	r6, #152	; 0x98
    8014:	e856 3f00 	ldrex	r3, [r6]
    8018:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    801c:	e846 3200 	strex	r2, r3, [r6]
    8020:	2a00      	cmp	r2, #0
    8022:	d1f7      	bne.n	8014 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14>
    8024:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
    8028:	7a23      	ldrb	r3, [r4, #8]
    802a:	f043 0302 	orr.w	r3, r3, #2
    802e:	7223      	strb	r3, [r4, #8]
}
    8030:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
    8034:	f019 ba44 	b.w	214c0 <bt_conn_unref>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
    8038:	4601      	mov	r1, r0
    803a:	4830      	ldr	r0, [pc, #192]	; (80fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xfc>)
    803c:	f000 fb30 	bl	86a0 <bt_le_ext_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    8040:	4638      	mov	r0, r7
    8042:	f018 fff3 	bl	2102c <addr_res_enable>
	if (err) {
    8046:	4606      	mov	r6, r0
    8048:	b1b0      	cbz	r0, 8078 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x78>
    804a:	4a2d      	ldr	r2, [pc, #180]	; (8100 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x100>)
    804c:	4b2d      	ldr	r3, [pc, #180]	; (8104 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x104>)
    804e:	1ad2      	subs	r2, r2, r3
    8050:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Disabling address resolution failed (err %d)", err);
    8052:	0192      	lsls	r2, r2, #6
    8054:	4601      	mov	r1, r0
    8056:	f042 0201 	orr.w	r2, r2, #1
    805a:	482b      	ldr	r0, [pc, #172]	; (8108 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x108>)
    805c:	f017 f845 	bl	1f0ea <log_1>
	if (bt_dev.le.rl_entries) {
    8060:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
    8064:	b113      	cbz	r3, 806c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6c>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    8066:	2001      	movs	r0, #1
    8068:	f018 ffe0 	bl	2102c <addr_res_enable>
}
    806c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
    8070:	4826      	ldr	r0, [pc, #152]	; (810c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10c>)
    8072:	2100      	movs	r1, #0
    8074:	f000 bb14 	b.w	86a0 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    8078:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
    807c:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
    8080:	429a      	cmp	r2, r3
    8082:	d20c      	bcs.n	809e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9e>
		bt_dev.le.rl_entries--;
    8084:	3b01      	subs	r3, #1
    8086:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		keys->state &= ~BT_KEYS_ID_ADDED;
    808a:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    808c:	4920      	ldr	r1, [pc, #128]	; (8110 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x110>)
		keys->state &= ~BT_KEYS_ID_ADDED;
    808e:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    8092:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
    8094:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    8096:	2002      	movs	r0, #2
    8098:	f004 ff92 	bl	cfc0 <bt_keys_foreach>
		goto done;
    809c:	e7e0      	b.n	8060 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x60>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
    809e:	2107      	movs	r1, #7
    80a0:	f242 0028 	movw	r0, #8232	; 0x2028
    80a4:	f7ff f806 	bl	70b4 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
    80a8:	f104 0801 	add.w	r8, r4, #1
	if (!buf) {
    80ac:	4607      	mov	r7, r0
    80ae:	b950      	cbnz	r0, 80c6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc6>
    80b0:	4b14      	ldr	r3, [pc, #80]	; (8104 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x104>)
    80b2:	4913      	ldr	r1, [pc, #76]	; (8100 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x100>)
		BT_ERR("Failed to remove IRK from controller");
    80b4:	4817      	ldr	r0, [pc, #92]	; (8114 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x114>)
    80b6:	1ac9      	subs	r1, r1, r3
    80b8:	08c9      	lsrs	r1, r1, #3
    80ba:	0189      	lsls	r1, r1, #6
    80bc:	f041 0101 	orr.w	r1, r1, #1
    80c0:	f017 f806 	bl	1f0d0 <log_0>
		goto done;
    80c4:	e7cc      	b.n	8060 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x60>
	return net_buf_simple_add(&buf->b, len);
    80c6:	2107      	movs	r1, #7
    80c8:	3008      	adds	r0, #8
    80ca:	f01a fd7c 	bl	22bc6 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    80ce:	4641      	mov	r1, r8
    80d0:	f018 ffc9 	bl	21066 <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
    80d4:	4632      	mov	r2, r6
    80d6:	4639      	mov	r1, r7
    80d8:	f242 0028 	movw	r0, #8232	; 0x2028
    80dc:	f7ff f94e 	bl	737c <bt_hci_cmd_send_sync>
	if (err) {
    80e0:	2800      	cmp	r0, #0
    80e2:	d1e5      	bne.n	80b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb0>
	bt_dev.le.rl_entries--;
    80e4:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
    80e8:	3b01      	subs	r3, #1
    80ea:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
	keys->state &= ~BT_KEYS_ID_ADDED;
    80ee:	7a23      	ldrb	r3, [r4, #8]
    80f0:	f023 0304 	bic.w	r3, r3, #4
    80f4:	7223      	strb	r3, [r4, #8]
    80f6:	e7b3      	b.n	8060 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x60>
    80f8:	20000000 	.word	0x20000000
    80fc:	000210e1 	.word	0x000210e1
    8100:	00023fc0 	.word	0x00023fc0
    8104:	00023ed8 	.word	0x00023ed8
    8108:	00026be7 	.word	0x00026be7
    810c:	00021003 	.word	0x00021003
    8110:	000210cf 	.word	0x000210cf
    8114:	00026c14 	.word	0x00026c14

00008118 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
    8118:	b573      	push	{r0, r1, r4, r5, r6, lr}
    811a:	460c      	mov	r4, r1
	int new_id;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    811c:	4605      	mov	r5, r0
    811e:	b918      	cbnz	r0, 8128 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    8120:	b34c      	cbz	r4, 8176 <bt_id_create+0x5e>
		return -EINVAL;
    8122:	f06f 0415 	mvn.w	r4, #21
    8126:	e023      	b.n	8170 <bt_id_create+0x58>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    8128:	2300      	movs	r3, #0
    812a:	2207      	movs	r2, #7
    812c:	4669      	mov	r1, sp
    812e:	9300      	str	r3, [sp, #0]
    8130:	f8cd 3003 	str.w	r3, [sp, #3]
    8134:	f01b fd55 	bl	23be2 <memcmp>
    8138:	2800      	cmp	r0, #0
    813a:	d0f1      	beq.n	8120 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    813c:	782b      	ldrb	r3, [r5, #0]
    813e:	2b01      	cmp	r3, #1
    8140:	d104      	bne.n	814c <bt_id_create+0x34>
    8142:	79ab      	ldrb	r3, [r5, #6]
    8144:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    8148:	2bc0      	cmp	r3, #192	; 0xc0
    814a:	d00a      	beq.n	8162 <bt_id_create+0x4a>
    814c:	4b1b      	ldr	r3, [pc, #108]	; (81bc <bt_id_create+0xa4>)
    814e:	491c      	ldr	r1, [pc, #112]	; (81c0 <bt_id_create+0xa8>)
			BT_ERR("Only static random identity address supported");
    8150:	481c      	ldr	r0, [pc, #112]	; (81c4 <bt_id_create+0xac>)
    8152:	1ac9      	subs	r1, r1, r3
    8154:	08c9      	lsrs	r1, r1, #3
    8156:	0189      	lsls	r1, r1, #6
    8158:	f041 0101 	orr.w	r1, r1, #1
    815c:	f016 ffb8 	bl	1f0d0 <log_0>
			return -EINVAL;
    8160:	e7df      	b.n	8122 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    8162:	4628      	mov	r0, r5
    8164:	f7ff fdd4 	bl	7d10 <id_find>
    8168:	2800      	cmp	r0, #0
    816a:	dbd9      	blt.n	8120 <bt_id_create+0x8>
			return -EALREADY;
    816c:	f06f 0477 	mvn.w	r4, #119	; 0x77

	new_id = bt_dev.id_count++;
	id_create(new_id, addr, irk);

	return new_id;
}
    8170:	4620      	mov	r0, r4
    8172:	b002      	add	sp, #8
    8174:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    8176:	4e14      	ldr	r6, [pc, #80]	; (81c8 <bt_id_create+0xb0>)
    8178:	79f3      	ldrb	r3, [r6, #7]
    817a:	2b01      	cmp	r3, #1
    817c:	d01b      	beq.n	81b6 <bt_id_create+0x9e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    817e:	f3bf 8f5b 	dmb	ish
    8182:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
    8186:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    818a:	07db      	lsls	r3, r3, #31
    818c:	d40b      	bmi.n	81a6 <bt_id_create+0x8e>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
    818e:	2d00      	cmp	r5, #0
    8190:	d0c7      	beq.n	8122 <bt_id_create+0xa>
    8192:	2207      	movs	r2, #7
    8194:	4669      	mov	r1, sp
    8196:	4628      	mov	r0, r5
    8198:	9400      	str	r4, [sp, #0]
    819a:	f8cd 4003 	str.w	r4, [sp, #3]
    819e:	f01b fd20 	bl	23be2 <memcmp>
    81a2:	2800      	cmp	r0, #0
    81a4:	d0bd      	beq.n	8122 <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
    81a6:	79f4      	ldrb	r4, [r6, #7]
	id_create(new_id, addr, irk);
    81a8:	4629      	mov	r1, r5
	new_id = bt_dev.id_count++;
    81aa:	1c63      	adds	r3, r4, #1
	id_create(new_id, addr, irk);
    81ac:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
    81ae:	71f3      	strb	r3, [r6, #7]
	id_create(new_id, addr, irk);
    81b0:	f7ff fdf6 	bl	7da0 <id_create.isra.0>
	return new_id;
    81b4:	e7dc      	b.n	8170 <bt_id_create+0x58>
		return -ENOMEM;
    81b6:	f06f 040b 	mvn.w	r4, #11
    81ba:	e7d9      	b.n	8170 <bt_id_create+0x58>
    81bc:	00023ed8 	.word	0x00023ed8
    81c0:	00023fc0 	.word	0x00023fc0
    81c4:	00026c39 	.word	0x00026c39
    81c8:	20000000 	.word	0x20000000

000081cc <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
    81cc:	b570      	push	{r4, r5, r6, lr}
    81ce:	b086      	sub	sp, #24
    81d0:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    81d2:	aa01      	add	r2, sp, #4
    81d4:	2100      	movs	r1, #0
    81d6:	f241 0009 	movw	r0, #4105	; 0x1009
    81da:	f7ff f8cf 	bl	737c <bt_hci_cmd_send_sync>
	if (err) {
    81de:	4604      	mov	r4, r0
    81e0:	b160      	cbz	r0, 81fc <bt_id_read_public_addr+0x30>
    81e2:	4919      	ldr	r1, [pc, #100]	; (8248 <bt_id_read_public_addr+0x7c>)
    81e4:	4b19      	ldr	r3, [pc, #100]	; (824c <bt_id_read_public_addr+0x80>)
		BT_WARN("Failed to read public address");
    81e6:	481a      	ldr	r0, [pc, #104]	; (8250 <bt_id_read_public_addr+0x84>)
    81e8:	1ac9      	subs	r1, r1, r3
    81ea:	08c9      	lsrs	r1, r1, #3
    81ec:	0189      	lsls	r1, r1, #6
    81ee:	f041 0102 	orr.w	r1, r1, #2
    81f2:	f016 ff6d 	bl	1f0d0 <log_0>

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
		return 0U;
    81f6:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
    81f8:	b006      	add	sp, #24
    81fa:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    81fc:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    81fe:	9002      	str	r0, [sp, #8]
    8200:	689d      	ldr	r5, [r3, #8]
    8202:	f8ad 000c 	strh.w	r0, [sp, #12]
    8206:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
    8208:	2206      	movs	r2, #6
    820a:	a902      	add	r1, sp, #8
    820c:	4628      	mov	r0, r5
    820e:	f01b fce8 	bl	23be2 <memcmp>
    8212:	b918      	cbnz	r0, 821c <bt_id_read_public_addr+0x50>
		net_buf_unref(rsp);
    8214:	9801      	ldr	r0, [sp, #4]
    8216:	f012 f9f1 	bl	1a5fc <net_buf_unref>
    821a:	e7ec      	b.n	81f6 <bt_id_read_public_addr+0x2a>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    821c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8220:	2206      	movs	r2, #6
    8222:	a904      	add	r1, sp, #16
    8224:	4628      	mov	r0, r5
    8226:	9304      	str	r3, [sp, #16]
    8228:	f8ad 3014 	strh.w	r3, [sp, #20]
    822c:	f01b fcd9 	bl	23be2 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    8230:	2800      	cmp	r0, #0
    8232:	d0ef      	beq.n	8214 <bt_id_read_public_addr+0x48>
	bt_addr_copy(&addr->a, &rp->bdaddr);
    8234:	4629      	mov	r1, r5
    8236:	1c70      	adds	r0, r6, #1
    8238:	f018 ff10 	bl	2105c <bt_addr_copy>
	net_buf_unref(rsp);
    823c:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    823e:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
    8240:	f012 f9dc 	bl	1a5fc <net_buf_unref>
	return 1U;
    8244:	2001      	movs	r0, #1
    8246:	e7d7      	b.n	81f8 <bt_id_read_public_addr+0x2c>
    8248:	00023fc0 	.word	0x00023fc0
    824c:	00023ed8 	.word	0x00023ed8
    8250:	00026c67 	.word	0x00026c67

00008254 <bt_setup_public_id_addr>:

void bt_setup_public_id_addr(void)
{
    8254:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
    8256:	4668      	mov	r0, sp
    8258:	f7ff ffb8 	bl	81cc <bt_id_read_public_addr>
    825c:	4b04      	ldr	r3, [pc, #16]	; (8270 <bt_setup_public_id_addr+0x1c>)
    825e:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
    8260:	b118      	cbz	r0, 826a <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	id_create(BT_ID_DEFAULT, &addr, irk);
    8262:	4669      	mov	r1, sp
    8264:	2000      	movs	r0, #0
    8266:	f7ff fd9b 	bl	7da0 <id_create.isra.0>
}
    826a:	b003      	add	sp, #12
    826c:	f85d fb04 	ldr.w	pc, [sp], #4
    8270:	20000000 	.word	0x20000000

00008274 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
    8274:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    8276:	4b27      	ldr	r3, [pc, #156]	; (8314 <bt_read_static_addr+0xa0>)
    8278:	f893 4086 	ldrb.w	r4, [r3, #134]	; 0x86
    827c:	f014 0401 	ands.w	r4, r4, #1
{
    8280:	4605      	mov	r5, r0
    8282:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    8284:	d10a      	bne.n	829c <bt_read_static_addr+0x28>
    8286:	4924      	ldr	r1, [pc, #144]	; (8318 <bt_read_static_addr+0xa4>)
    8288:	4b24      	ldr	r3, [pc, #144]	; (831c <bt_read_static_addr+0xa8>)
		BT_WARN("Read Static Addresses command not available");
    828a:	4825      	ldr	r0, [pc, #148]	; (8320 <bt_read_static_addr+0xac>)
    828c:	1ac9      	subs	r1, r1, r3
    828e:	08c9      	lsrs	r1, r1, #3
    8290:	0189      	lsls	r1, r1, #6
    8292:	f041 0102 	orr.w	r1, r1, #2
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
	}

	net_buf_unref(rsp);
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
    8296:	f016 ff1b 	bl	1f0d0 <log_0>
    829a:	e012      	b.n	82c2 <bt_read_static_addr+0x4e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    829c:	aa01      	add	r2, sp, #4
    829e:	2100      	movs	r1, #0
    82a0:	f64f 4009 	movw	r0, #64521	; 0xfc09
    82a4:	f7ff f86a 	bl	737c <bt_hci_cmd_send_sync>
	if (err) {
    82a8:	4603      	mov	r3, r0
    82aa:	b168      	cbz	r0, 82c8 <bt_read_static_addr+0x54>
    82ac:	4b1b      	ldr	r3, [pc, #108]	; (831c <bt_read_static_addr+0xa8>)
    82ae:	491a      	ldr	r1, [pc, #104]	; (8318 <bt_read_static_addr+0xa4>)
		BT_WARN("Failed to read static addresses");
    82b0:	481c      	ldr	r0, [pc, #112]	; (8324 <bt_read_static_addr+0xb0>)
    82b2:	1ac9      	subs	r1, r1, r3
    82b4:	08c9      	lsrs	r1, r1, #3
    82b6:	0189      	lsls	r1, r1, #6
    82b8:	f041 0102 	orr.w	r1, r1, #2
    82bc:	f016 ff08 	bl	1f0d0 <log_0>
		return 0;
    82c0:	2400      	movs	r4, #0
	}

	return cnt;
}
    82c2:	4620      	mov	r0, r4
    82c4:	b003      	add	sp, #12
    82c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = (void *)rsp->data;
    82c8:	9801      	ldr	r0, [sp, #4]
    82ca:	6882      	ldr	r2, [r0, #8]
	cnt = MIN(rp->num_addrs, size);
    82cc:	7854      	ldrb	r4, [r2, #1]
    82ce:	f04f 0c16 	mov.w	ip, #22
    82d2:	42b4      	cmp	r4, r6
    82d4:	bf28      	it	cs
    82d6:	4634      	movcs	r4, r6
    82d8:	eb02 070c 	add.w	r7, r2, ip
	for (i = 0; i < cnt; i++) {
    82dc:	42a3      	cmp	r3, r4
    82de:	db0c      	blt.n	82fa <bt_read_static_addr+0x86>
	net_buf_unref(rsp);
    82e0:	f012 f98c 	bl	1a5fc <net_buf_unref>
	if (!cnt) {
    82e4:	2c00      	cmp	r4, #0
    82e6:	d1ec      	bne.n	82c2 <bt_read_static_addr+0x4e>
    82e8:	490b      	ldr	r1, [pc, #44]	; (8318 <bt_read_static_addr+0xa4>)
    82ea:	4b0c      	ldr	r3, [pc, #48]	; (831c <bt_read_static_addr+0xa8>)
		BT_WARN("No static addresses stored in controller");
    82ec:	480e      	ldr	r0, [pc, #56]	; (8328 <bt_read_static_addr+0xb4>)
    82ee:	1ac9      	subs	r1, r1, r3
    82f0:	08c9      	lsrs	r1, r1, #3
    82f2:	0189      	lsls	r1, r1, #6
    82f4:	f041 0102 	orr.w	r1, r1, #2
    82f8:	e7cd      	b.n	8296 <bt_read_static_addr+0x22>
    82fa:	1c96      	adds	r6, r2, #2
    82fc:	fb0c 5103 	mla	r1, ip, r3, r5
    8300:	f856 eb04 	ldr.w	lr, [r6], #4
    8304:	f841 eb04 	str.w	lr, [r1], #4
    8308:	42be      	cmp	r6, r7
    830a:	d1f9      	bne.n	8300 <bt_read_static_addr+0x8c>
    830c:	883e      	ldrh	r6, [r7, #0]
    830e:	800e      	strh	r6, [r1, #0]
	for (i = 0; i < cnt; i++) {
    8310:	3301      	adds	r3, #1
    8312:	e7e3      	b.n	82dc <bt_read_static_addr+0x68>
    8314:	20000000 	.word	0x20000000
    8318:	00023fc0 	.word	0x00023fc0
    831c:	00023ed8 	.word	0x00023ed8
    8320:	00026c85 	.word	0x00026c85
    8324:	00026cb1 	.word	0x00026cb1
    8328:	00026cd1 	.word	0x00026cd1

0000832c <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
    832c:	b570      	push	{r4, r5, r6, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
    832e:	4d13      	ldr	r5, [pc, #76]	; (837c <bt_setup_random_id_addr+0x50>)
    8330:	79ec      	ldrb	r4, [r5, #7]
{
    8332:	b088      	sub	sp, #32
	if (!bt_dev.id_count) {
    8334:	b9ec      	cbnz	r4, 8372 <bt_setup_random_id_addr+0x46>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    8336:	2101      	movs	r1, #1
    8338:	a802      	add	r0, sp, #8
    833a:	f7ff ff9b 	bl	8274 <bt_read_static_addr>
    833e:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
    8340:	b1b8      	cbz	r0, 8372 <bt_setup_random_id_addr+0x46>
					atomic_set_bit(bt_dev.flags,
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    8342:	2616      	movs	r6, #22
    8344:	e00e      	b.n	8364 <bt_setup_random_id_addr+0x38>
    8346:	ab02      	add	r3, sp, #8
    8348:	fb06 3102 	mla	r1, r6, r2, r3
    834c:	f10d 0001 	add.w	r0, sp, #1
    8350:	f018 fe84 	bl	2105c <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
    8354:	2301      	movs	r3, #1

				id_create(i, &addr, irk);
    8356:	4669      	mov	r1, sp
    8358:	4610      	mov	r0, r2
				addr.type = BT_ADDR_LE_RANDOM;
    835a:	f88d 3000 	strb.w	r3, [sp]
				id_create(i, &addr, irk);
    835e:	f7ff fd1f 	bl	7da0 <id_create.isra.0>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    8362:	3401      	adds	r4, #1
    8364:	79eb      	ldrb	r3, [r5, #7]
    8366:	b2e2      	uxtb	r2, r4
    8368:	4293      	cmp	r3, r2
    836a:	d8ec      	bhi.n	8346 <bt_setup_random_id_addr+0x1a>
			}

			return 0;
    836c:	2000      	movs	r0, #0
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
    836e:	b008      	add	sp, #32
    8370:	bd70      	pop	{r4, r5, r6, pc}
	return bt_id_create(NULL, NULL);
    8372:	2100      	movs	r1, #0
    8374:	4608      	mov	r0, r1
    8376:	f7ff fecf 	bl	8118 <bt_id_create>
    837a:	e7f8      	b.n	836e <bt_setup_random_id_addr+0x42>
    837c:	20000000 	.word	0x20000000

00008380 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
    8380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    8384:	f011 0401 	ands.w	r4, r1, #1
	id_addr = &bt_dev.id_addr[adv->id];
    8388:	7805      	ldrb	r5, [r0, #0]
{
    838a:	460e      	mov	r6, r1
    838c:	4690      	mov	r8, r2
    838e:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    8390:	d026      	beq.n	83e0 <bt_id_set_adv_own_addr+0x60>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    8392:	4c22      	ldr	r4, [pc, #136]	; (841c <bt_id_set_adv_own_addr+0x9c>)
    8394:	b12a      	cbz	r2, 83a2 <bt_id_set_adv_own_addr+0x22>
    8396:	0688      	lsls	r0, r1, #26
    8398:	d503      	bpl.n	83a2 <bt_id_set_adv_own_addr+0x22>
    839a:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
    839e:	0659      	lsls	r1, r3, #25
    83a0:	d539      	bpl.n	8416 <bt_id_set_adv_own_addr+0x96>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    83a2:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    83a6:	ea4f 09c5 	mov.w	r9, r5, lsl #3
    83aa:	5ce3      	ldrb	r3, [r4, r3]
    83ac:	2b01      	cmp	r3, #1
    83ae:	d008      	beq.n	83c2 <bt_id_set_adv_own_addr+0x42>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
    83b0:	eba9 0505 	sub.w	r5, r9, r5
    83b4:	5d63      	ldrb	r3, [r4, r5]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    83b6:	f1b8 0f00 	cmp.w	r8, #0
    83ba:	d10c      	bne.n	83d6 <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    83bc:	703b      	strb	r3, [r7, #0]
		if (err) {
			return err;
		}
	}

	return 0;
    83be:	2000      	movs	r0, #0
    83c0:	e007      	b.n	83d2 <bt_id_set_adv_own_addr+0x52>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    83c2:	2007      	movs	r0, #7
    83c4:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    83c8:	4420      	add	r0, r4
    83ca:	f7ff fcbb 	bl	7d44 <set_random_address>
				if (err) {
    83ce:	2800      	cmp	r0, #0
    83d0:	d0ee      	beq.n	83b0 <bt_id_set_adv_own_addr+0x30>
}
    83d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    83d6:	06b2      	lsls	r2, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    83d8:	bf48      	it	mi
    83da:	f043 0302 	orrmi.w	r3, r3, #2
    83de:	e7ed      	b.n	83bc <bt_id_set_adv_own_addr+0x3c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    83e0:	074b      	lsls	r3, r1, #29
    83e2:	d514      	bpl.n	840e <bt_id_set_adv_own_addr+0x8e>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    83e4:	4e0d      	ldr	r6, [pc, #52]	; (841c <bt_id_set_adv_own_addr+0x9c>)
    83e6:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    83ea:	ea4f 08c5 	mov.w	r8, r5, lsl #3
    83ee:	5cf3      	ldrb	r3, [r6, r3]
    83f0:	2b01      	cmp	r3, #1
    83f2:	d10a      	bne.n	840a <bt_id_set_adv_own_addr+0x8a>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    83f4:	2007      	movs	r0, #7
    83f6:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    83fa:	4430      	add	r0, r6
    83fc:	f7ff fca2 	bl	7d44 <set_random_address>
			*own_addr_type = id_addr->type;
    8400:	eba8 0505 	sub.w	r5, r8, r5
    8404:	5d73      	ldrb	r3, [r6, r5]
			*own_addr_type = BT_ADDR_LE_RANDOM;
    8406:	703b      	strb	r3, [r7, #0]
		if (err) {
    8408:	e7e3      	b.n	83d2 <bt_id_set_adv_own_addr+0x52>
	int err = 0;
    840a:	4620      	mov	r0, r4
    840c:	e7f8      	b.n	8400 <bt_id_set_adv_own_addr+0x80>
			err = bt_id_set_adv_private_addr(adv);
    840e:	f018 fe88 	bl	21122 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    8412:	2301      	movs	r3, #1
    8414:	e7f7      	b.n	8406 <bt_id_set_adv_own_addr+0x86>
			return -ENOTSUP;
    8416:	f06f 0085 	mvn.w	r0, #133	; 0x85
    841a:	e7da      	b.n	83d2 <bt_id_set_adv_own_addr+0x52>
    841c:	20000000 	.word	0x20000000

00008420 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
    8420:	b538      	push	{r3, r4, r5, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    8422:	4d14      	ldr	r5, [pc, #80]	; (8474 <bt_id_init+0x54>)
    8424:	79eb      	ldrb	r3, [r5, #7]
    8426:	b113      	cbz	r3, 842e <bt_id_init+0xe>

#if defined(CONFIG_BT_PRIVACY)
	k_delayed_work_init(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
    8428:	2400      	movs	r4, #0
}
    842a:	4620      	mov	r0, r4
    842c:	bd38      	pop	{r3, r4, r5, pc}
		bt_setup_public_id_addr();
    842e:	f7ff ff11 	bl	8254 <bt_setup_public_id_addr>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    8432:	79eb      	ldrb	r3, [r5, #7]
    8434:	2b00      	cmp	r3, #0
    8436:	d1f7      	bne.n	8428 <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
    8438:	f7ff ff78 	bl	832c <bt_setup_random_id_addr>
		if (err) {
    843c:	4604      	mov	r4, r0
    843e:	b150      	cbz	r0, 8456 <bt_id_init+0x36>
    8440:	490d      	ldr	r1, [pc, #52]	; (8478 <bt_id_init+0x58>)
    8442:	4b0e      	ldr	r3, [pc, #56]	; (847c <bt_id_init+0x5c>)
			BT_ERR("Unable to set identity address");
    8444:	480e      	ldr	r0, [pc, #56]	; (8480 <bt_id_init+0x60>)
    8446:	1ac9      	subs	r1, r1, r3
    8448:	08c9      	lsrs	r1, r1, #3
    844a:	0189      	lsls	r1, r1, #6
    844c:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Unable to set random address");
    8450:	f016 fe3e 	bl	1f0d0 <log_0>
			return err;
    8454:	e7e9      	b.n	842a <bt_id_init+0xa>
		err = set_random_address(&bt_dev.id_addr[0].a);
    8456:	1c68      	adds	r0, r5, #1
    8458:	f7ff fc74 	bl	7d44 <set_random_address>
		if (err) {
    845c:	4604      	mov	r4, r0
    845e:	2800      	cmp	r0, #0
    8460:	d0e3      	beq.n	842a <bt_id_init+0xa>
    8462:	4905      	ldr	r1, [pc, #20]	; (8478 <bt_id_init+0x58>)
    8464:	4b05      	ldr	r3, [pc, #20]	; (847c <bt_id_init+0x5c>)
			BT_ERR("Unable to set random address");
    8466:	4807      	ldr	r0, [pc, #28]	; (8484 <bt_id_init+0x64>)
    8468:	1ac9      	subs	r1, r1, r3
    846a:	08c9      	lsrs	r1, r1, #3
    846c:	0189      	lsls	r1, r1, #6
    846e:	f041 0101 	orr.w	r1, r1, #1
    8472:	e7ed      	b.n	8450 <bt_id_init+0x30>
    8474:	20000000 	.word	0x20000000
    8478:	00023fc0 	.word	0x00023fc0
    847c:	00023ed8 	.word	0x00023ed8
    8480:	00026cfa 	.word	0x00026cfa
    8484:	00026d19 	.word	0x00026d19

00008488 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    8488:	6843      	ldr	r3, [r0, #4]
{
    848a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    848c:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    848e:	0558      	lsls	r0, r3, #21
    8490:	d502      	bpl.n	8498 <valid_adv_param+0x10>
		return false;
    8492:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
    8494:	b003      	add	sp, #12
    8496:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    8498:	6922      	ldr	r2, [r4, #16]
    849a:	b10a      	cbz	r2, 84a0 <valid_adv_param+0x18>
    849c:	07d9      	lsls	r1, r3, #31
    849e:	d5f8      	bpl.n	8492 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    84a0:	4d1a      	ldr	r5, [pc, #104]	; (850c <valid_adv_param+0x84>)
    84a2:	7820      	ldrb	r0, [r4, #0]
    84a4:	79eb      	ldrb	r3, [r5, #7]
    84a6:	4283      	cmp	r3, r0
    84a8:	d9f3      	bls.n	8492 <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    84aa:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    84ae:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    84b0:	2207      	movs	r2, #7
    84b2:	4669      	mov	r1, sp
    84b4:	4428      	add	r0, r5
    84b6:	9300      	str	r3, [sp, #0]
    84b8:	f8cd 3003 	str.w	r3, [sp, #3]
    84bc:	f01b fb91 	bl	23be2 <memcmp>
	if (param->id >= bt_dev.id_count ||
    84c0:	2800      	cmp	r0, #0
    84c2:	d0e6      	beq.n	8492 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    84c4:	6860      	ldr	r0, [r4, #4]
    84c6:	07c2      	lsls	r2, r0, #31
    84c8:	d406      	bmi.n	84d8 <valid_adv_param+0x50>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    84ca:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    84ce:	2b08      	cmp	r3, #8
    84d0:	d802      	bhi.n	84d8 <valid_adv_param+0x50>
    84d2:	68a3      	ldr	r3, [r4, #8]
    84d4:	2b9f      	cmp	r3, #159	; 0x9f
    84d6:	d9dc      	bls.n	8492 <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    84d8:	f010 0f30 	tst.w	r0, #48	; 0x30
    84dc:	d002      	beq.n	84e4 <valid_adv_param+0x5c>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    84de:	6923      	ldr	r3, [r4, #16]
    84e0:	2b00      	cmp	r3, #0
    84e2:	d0d6      	beq.n	8492 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    84e4:	06c3      	lsls	r3, r0, #27
    84e6:	d401      	bmi.n	84ec <valid_adv_param+0x64>
    84e8:	6923      	ldr	r3, [r4, #16]
    84ea:	b943      	cbnz	r3, 84fe <valid_adv_param+0x76>
		if (param->interval_min > param->interval_max ||
    84ec:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    84f0:	429a      	cmp	r2, r3
    84f2:	d8ce      	bhi.n	8492 <valid_adv_param+0xa>
    84f4:	2a1f      	cmp	r2, #31
    84f6:	d9cc      	bls.n	8492 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    84f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    84fc:	d8c9      	bhi.n	8492 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    84fe:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    8502:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    8506:	bf18      	it	ne
    8508:	2001      	movne	r0, #1
    850a:	e7c3      	b.n	8494 <valid_adv_param+0xc>
    850c:	20000000 	.word	0x20000000

00008510 <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
    8510:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8514:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    8516:	2120      	movs	r1, #32
{
    8518:	4682      	mov	sl, r0
    851a:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    851c:	f7fe fdca 	bl	70b4 <bt_hci_cmd_create>
	if (!buf) {
    8520:	4606      	mov	r6, r0
    8522:	2800      	cmp	r0, #0
    8524:	d05c      	beq.n	85e0 <hci_set_ad+0xd0>
    8526:	2120      	movs	r1, #32
    8528:	3008      	adds	r0, #8
    852a:	f01a fb4c 	bl	22bc6 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
    852e:	2220      	movs	r2, #32
    8530:	2100      	movs	r1, #0
    8532:	4681      	mov	r9, r0
    8534:	f01b fb71 	bl	23c1a <memset>
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));

	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    8538:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
    853c:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
    8540:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
    8542:	2500      	movs	r5, #0
		for (size_t j = 0; j < ad[i].len; j++) {
    8544:	f8d4 8000 	ldr.w	r8, [r4]
    8548:	2300      	movs	r3, #0
    854a:	6862      	ldr	r2, [r4, #4]
    854c:	4293      	cmp	r3, r2
    854e:	d30d      	bcc.n	856c <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
    8550:	9b00      	ldr	r3, [sp, #0]
    8552:	3408      	adds	r4, #8
    8554:	429c      	cmp	r4, r3
    8556:	d1f5      	bne.n	8544 <hci_set_ad+0x34>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    8558:	2200      	movs	r2, #0
    855a:	4631      	mov	r1, r6
    855c:	4650      	mov	r0, sl
	*data_len = set_data_len;
    855e:	f889 5000 	strb.w	r5, [r9]
}
    8562:	b003      	add	sp, #12
    8564:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    8568:	f7fe bf08 	b.w	737c <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
    856c:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
    8570:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
    8574:	1ca8      	adds	r0, r5, #2
    8576:	1811      	adds	r1, r2, r0
    8578:	291f      	cmp	r1, #31
    857a:	d91a      	bls.n	85b2 <hci_set_ad+0xa2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
    857c:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
    8580:	f1c5 021d 	rsb	r2, r5, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
    8584:	d101      	bne.n	858a <hci_set_ad+0x7a>
    8586:	2a00      	cmp	r2, #0
    8588:	dc11      	bgt.n	85ae <hci_set_ad+0x9e>
    858a:	4b17      	ldr	r3, [pc, #92]	; (85e8 <hci_set_ad+0xd8>)
    858c:	4917      	ldr	r1, [pc, #92]	; (85ec <hci_set_ad+0xdc>)
					BT_ERR("Too big advertising data");
    858e:	4818      	ldr	r0, [pc, #96]	; (85f0 <hci_set_ad+0xe0>)
    8590:	1ac9      	subs	r1, r1, r3
    8592:	08c9      	lsrs	r1, r1, #3
    8594:	0189      	lsls	r1, r1, #6
    8596:	f041 0101 	orr.w	r1, r1, #1
    859a:	f016 fd99 	bl	1f0d0 <log_0>
		net_buf_unref(buf);
    859e:	4630      	mov	r0, r6
    85a0:	f012 f82c 	bl	1a5fc <net_buf_unref>
					return -EINVAL;
    85a4:	f06f 0015 	mvn.w	r0, #21
}
    85a8:	b003      	add	sp, #12
    85aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
    85ae:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
    85b2:	b2d7      	uxtb	r7, r2
    85b4:	1c79      	adds	r1, r7, #1
    85b6:	f80b 1005 	strb.w	r1, [fp, r5]
    85ba:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
    85bc:	b2c9      	uxtb	r1, r1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    85be:	fa5b f080 	uxtab	r0, fp, r0
    85c2:	f80b c001 	strb.w	ip, [fp, r1]
    85c6:	f8d8 1004 	ldr.w	r1, [r8, #4]
    85ca:	9301      	str	r3, [sp, #4]
			set_data_len += len;
    85cc:	3702      	adds	r7, #2
    85ce:	f01b fb16 	bl	23bfe <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
    85d2:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
    85d4:	443d      	add	r5, r7
    85d6:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
    85d8:	3301      	adds	r3, #1
    85da:	f108 0808 	add.w	r8, r8, #8
    85de:	e7b4      	b.n	854a <hci_set_ad+0x3a>
		return -ENOBUFS;
    85e0:	f06f 0068 	mvn.w	r0, #104	; 0x68
    85e4:	e7e0      	b.n	85a8 <hci_set_ad+0x98>
    85e6:	bf00      	nop
    85e8:	00023ed8 	.word	0x00023ed8
    85ec:	00023ed8 	.word	0x00023ed8
    85f0:	00026d3c 	.word	0x00026d3c

000085f4 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    85f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    85f6:	4605      	mov	r5, r0
	struct bt_adv_id_check_data check_data = {
		.id = adv->id,
    85f8:	7802      	ldrb	r2, [r0, #0]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    85fa:	4827      	ldr	r0, [pc, #156]	; (8698 <le_adv_start_add_conn+0xa4>)
{
    85fc:	b085      	sub	sp, #20
    85fe:	460f      	mov	r7, r1
    8600:	f018 fdc2 	bl	21188 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
    8604:	f010 0f40 	tst.w	r0, #64	; 0x40
    8608:	4b24      	ldr	r3, [pc, #144]	; (869c <le_adv_start_add_conn+0xa8>)
    860a:	d008      	beq.n	861e <le_adv_start_add_conn+0x2a>
    860c:	f103 0028 	add.w	r0, r3, #40	; 0x28
    8610:	f018 fdba 	bl	21188 <atomic_get>
    8614:	05c1      	lsls	r1, r0, #23
    8616:	d502      	bpl.n	861e <le_adv_start_add_conn+0x2a>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE) &&
    8618:	7e19      	ldrb	r1, [r3, #24]
    861a:	4291      	cmp	r1, r2
    861c:	d132      	bne.n	8684 <le_adv_start_add_conn+0x90>
	bt_le_ext_adv_foreach(adv_id_check_connectable_func, &check_data);
	if (check_data.adv_enabled) {
		return -ENOTSUP;
	}

	bt_dev.adv_conn_id = adv->id;
    861e:	462e      	mov	r6, r5
    8620:	4669      	mov	r1, sp
    8622:	f816 2b09 	ldrb.w	r2, [r6], #9
    8626:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    862a:	4630      	mov	r0, r6

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    862c:	2300      	movs	r3, #0
    862e:	2207      	movs	r2, #7
    8630:	9300      	str	r3, [sp, #0]
    8632:	f8cd 3003 	str.w	r3, [sp, #3]
    8636:	f01b fad4 	bl	23be2 <memcmp>
    863a:	4604      	mov	r4, r0
    863c:	7828      	ldrb	r0, [r5, #0]
    863e:	b164      	cbz	r4, 865a <le_adv_start_add_conn+0x66>
		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
		*out_conn = conn;
		return 0;
	}

	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    8640:	4631      	mov	r1, r6
    8642:	f000 fefb 	bl	943c <bt_conn_exists_le>
    8646:	4604      	mov	r4, r0
    8648:	b9f8      	cbnz	r0, 868a <le_adv_start_add_conn+0x96>
		return -EINVAL;
	}

	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    864a:	7828      	ldrb	r0, [r5, #0]
    864c:	4631      	mov	r1, r6
    864e:	f000 fdab 	bl	91a8 <bt_conn_add_le>
	if (!conn) {
    8652:	4605      	mov	r5, r0
    8654:	b1e0      	cbz	r0, 8690 <le_adv_start_add_conn+0x9c>
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    8656:	2105      	movs	r1, #5
    8658:	e00e      	b.n	8678 <le_adv_start_add_conn+0x84>
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    865a:	f06f 03ff 	mvn.w	r3, #255	; 0xff
    865e:	9302      	str	r3, [sp, #8]
    8660:	a902      	add	r1, sp, #8
    8662:	f64f 73ff 	movw	r3, #65535	; 0xffff
    8666:	f8ad 300c 	strh.w	r3, [sp, #12]
    866a:	f88d 300e 	strb.w	r3, [sp, #14]
    866e:	f000 fd9b 	bl	91a8 <bt_conn_add_le>
		if (!conn) {
    8672:	4605      	mov	r5, r0
    8674:	b160      	cbz	r0, 8690 <le_adv_start_add_conn+0x9c>
		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
    8676:	2104      	movs	r1, #4
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    8678:	f000 fdd0 	bl	921c <bt_conn_set_state>
	*out_conn = conn;
    867c:	603d      	str	r5, [r7, #0]
	return 0;
}
    867e:	4620      	mov	r0, r4
    8680:	b005      	add	sp, #20
    8682:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOTSUP;
    8684:	f06f 0485 	mvn.w	r4, #133	; 0x85
    8688:	e7f9      	b.n	867e <le_adv_start_add_conn+0x8a>
		return -EINVAL;
    868a:	f06f 0415 	mvn.w	r4, #21
    868e:	e7f6      	b.n	867e <le_adv_start_add_conn+0x8a>
		return -ENOMEM;
    8690:	f06f 040b 	mvn.w	r4, #11
    8694:	e7f3      	b.n	867e <le_adv_start_add_conn+0x8a>
    8696:	bf00      	nop
    8698:	20000028 	.word	0x20000028
    869c:	20000000 	.word	0x20000000

000086a0 <bt_le_ext_adv_foreach>:
{
    86a0:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
    86a2:	4801      	ldr	r0, [pc, #4]	; (86a8 <bt_le_ext_adv_foreach+0x8>)
    86a4:	4718      	bx	r3
    86a6:	bf00      	nop
    86a8:	20000018 	.word	0x20000018

000086ac <bt_le_adv_lookup_legacy>:
}
    86ac:	4800      	ldr	r0, [pc, #0]	; (86b0 <bt_le_adv_lookup_legacy+0x4>)
    86ae:	4770      	bx	lr
    86b0:	20000018 	.word	0x20000018

000086b4 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    86b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
    86b8:	690e      	ldr	r6, [r1, #16]
{
    86ba:	b08d      	sub	sp, #52	; 0x34
    86bc:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
    86be:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable;
    86c0:	ebb6 0b03 	subs.w	fp, r6, r3
{
    86c4:	4605      	mov	r5, r0
    86c6:	4886      	ldr	r0, [pc, #536]	; (88e0 <bt_le_adv_start_legacy+0x22c>)
	struct bt_conn *conn = NULL;
    86c8:	9305      	str	r3, [sp, #20]
	bool dir_adv = (param->peer != NULL), scannable;
    86ca:	bf18      	it	ne
    86cc:	f04f 0b01 	movne.w	fp, #1
{
    86d0:	460c      	mov	r4, r1
    86d2:	4691      	mov	r9, r2
    86d4:	f018 fd58 	bl	21188 <atomic_get>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    86d8:	0787      	lsls	r7, r0, #30
    86da:	f140 80f5 	bpl.w	88c8 <bt_le_adv_start_legacy+0x214>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    86de:	4608      	mov	r0, r1
    86e0:	f7ff fed2 	bl	8488 <valid_adv_param>
    86e4:	b928      	cbnz	r0, 86f2 <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
    86e6:	f06f 0b15 	mvn.w	fp, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    86ea:	4658      	mov	r0, fp
    86ec:	b00d      	add	sp, #52	; 0x34
    86ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
    86f2:	4620      	mov	r0, r4
    86f4:	f018 fd27 	bl	21146 <bt_id_adv_random_addr_check>
    86f8:	4607      	mov	r7, r0
    86fa:	2800      	cmp	r0, #0
    86fc:	d0f3      	beq.n	86e6 <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    86fe:	f105 0810 	add.w	r8, r5, #16
    8702:	4640      	mov	r0, r8
    8704:	f018 fd40 	bl	21188 <atomic_get>
    8708:	f3c0 1380 	ubfx	r3, r0, #6, #1
    870c:	0640      	lsls	r0, r0, #25
    870e:	f100 80de 	bmi.w	88ce <bt_le_adv_start_legacy+0x21a>
	(void)memset(&set_param, 0, sizeof(set_param));
    8712:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    8716:	f8cd 302b 	str.w	r3, [sp, #43]	; 0x2b
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    871a:	68a3      	ldr	r3, [r4, #8]
    871c:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.channel_map  = get_adv_channel_map(param->options);
    8720:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    8722:	68e3      	ldr	r3, [r4, #12]
    8724:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
    8728:	f018 fd1f 	bl	2116a <get_adv_channel_map>
	if (adv->id != param->id) {
    872c:	782a      	ldrb	r2, [r5, #0]
    872e:	7823      	ldrb	r3, [r4, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
    8730:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	if (adv->id != param->id) {
    8734:	429a      	cmp	r2, r3
    8736:	d004      	beq.n	8742 <bt_le_adv_start_legacy+0x8e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    8738:	4869      	ldr	r0, [pc, #420]	; (88e0 <bt_le_adv_start_legacy+0x22c>)
    873a:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    873e:	f018 fd29 	bl	21194 <atomic_and>
	bt_dev.adv_conn_id = adv->id;
    8742:	4a68      	ldr	r2, [pc, #416]	; (88e4 <bt_le_adv_start_legacy+0x230>)
	adv->id = param->id;
    8744:	7823      	ldrb	r3, [r4, #0]
    8746:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
    8748:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
    874c:	6861      	ldr	r1, [r4, #4]
    874e:	465a      	mov	r2, fp
    8750:	f10d 0325 	add.w	r3, sp, #37	; 0x25
    8754:	4628      	mov	r0, r5
    8756:	f7ff fe13 	bl	8380 <bt_id_set_adv_own_addr>
	if (err) {
    875a:	4683      	mov	fp, r0
    875c:	2800      	cmp	r0, #0
    875e:	d1c4      	bne.n	86ea <bt_le_adv_start_legacy+0x36>
	if (dir_adv) {
    8760:	f105 0009 	add.w	r0, r5, #9
    8764:	2e00      	cmp	r6, #0
    8766:	d04a      	beq.n	87fe <bt_le_adv_start_legacy+0x14a>
		bt_addr_le_copy(&adv->target_addr, param->peer);
    8768:	6921      	ldr	r1, [r4, #16]
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    876a:	f018 fd22 	bl	211b2 <bt_addr_le_copy>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    876e:	6860      	ldr	r0, [r4, #4]
    8770:	07c1      	lsls	r1, r0, #31
    8772:	d54c      	bpl.n	880e <bt_le_adv_start_legacy+0x15a>
		if (dir_adv) {
    8774:	2e00      	cmp	r6, #0
    8776:	d047      	beq.n	8808 <bt_le_adv_start_legacy+0x154>
				set_param.type = BT_HCI_ADV_DIRECT_IND;
    8778:	f010 0f10 	tst.w	r0, #16
    877c:	bf14      	ite	ne
    877e:	2304      	movne	r3, #4
    8780:	2301      	moveq	r3, #1
			bt_addr_le_copy(&set_param.direct_addr, param->peer);
    8782:	6921      	ldr	r1, [r4, #16]
    8784:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    8788:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    878c:	f018 fd11 	bl	211b2 <bt_addr_le_copy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    8790:	210f      	movs	r1, #15
    8792:	f242 0006 	movw	r0, #8198	; 0x2006
    8796:	f7fe fc8d 	bl	70b4 <bt_hci_cmd_create>
	if (!buf) {
    879a:	4683      	mov	fp, r0
    879c:	2800      	cmp	r0, #0
    879e:	f000 8099 	beq.w	88d4 <bt_le_adv_start_legacy+0x220>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    87a2:	220f      	movs	r2, #15
    87a4:	a908      	add	r1, sp, #32
    87a6:	3008      	adds	r0, #8
    87a8:	f01a fa13 	bl	22bd2 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    87ac:	2200      	movs	r2, #0
    87ae:	4659      	mov	r1, fp
    87b0:	f242 0006 	movw	r0, #8198	; 0x2006
    87b4:	f7fe fde2 	bl	737c <bt_hci_cmd_send_sync>
	if (err) {
    87b8:	2800      	cmp	r0, #0
    87ba:	f040 808e 	bne.w	88da <bt_le_adv_start_legacy+0x226>
	if (!dir_adv) {
    87be:	b38e      	cbz	r6, 8824 <bt_le_adv_start_legacy+0x170>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    87c0:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    87c2:	07da      	lsls	r2, r3, #31
    87c4:	d43f      	bmi.n	8846 <bt_le_adv_start_legacy+0x192>
	return bt_le_adv_set_enable_legacy(adv, enable);
    87c6:	2101      	movs	r1, #1
    87c8:	4628      	mov	r0, r5
    87ca:	f018 fd8c 	bl	212e6 <bt_le_adv_set_enable_legacy>
	if (err) {
    87ce:	4683      	mov	fp, r0
    87d0:	2800      	cmp	r0, #0
    87d2:	d072      	beq.n	88ba <bt_le_adv_start_legacy+0x206>
    87d4:	4b44      	ldr	r3, [pc, #272]	; (88e8 <bt_le_adv_start_legacy+0x234>)
    87d6:	4945      	ldr	r1, [pc, #276]	; (88ec <bt_le_adv_start_legacy+0x238>)
		BT_ERR("Failed to start advertiser");
    87d8:	4845      	ldr	r0, [pc, #276]	; (88f0 <bt_le_adv_start_legacy+0x23c>)
    87da:	1ac9      	subs	r1, r1, r3
    87dc:	08c9      	lsrs	r1, r1, #3
    87de:	0189      	lsls	r1, r1, #6
    87e0:	f041 0101 	orr.w	r1, r1, #1
    87e4:	f016 fc74 	bl	1f0d0 <log_0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    87e8:	9805      	ldr	r0, [sp, #20]
    87ea:	2800      	cmp	r0, #0
    87ec:	f43f af7d 	beq.w	86ea <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    87f0:	2100      	movs	r1, #0
    87f2:	f000 fd13 	bl	921c <bt_conn_set_state>
			bt_conn_unref(conn);
    87f6:	9805      	ldr	r0, [sp, #20]
    87f8:	f018 fe62 	bl	214c0 <bt_conn_unref>
    87fc:	e775      	b.n	86ea <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    87fe:	9606      	str	r6, [sp, #24]
    8800:	a906      	add	r1, sp, #24
    8802:	f8cd 601b 	str.w	r6, [sp, #27]
    8806:	e7b0      	b.n	876a <bt_le_adv_start_legacy+0xb6>
			set_param.type = BT_HCI_ADV_IND;
    8808:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
    880c:	e7c0      	b.n	8790 <bt_le_adv_start_legacy+0xdc>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    880e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    8810:	b933      	cbnz	r3, 8820 <bt_le_adv_start_legacy+0x16c>
    8812:	f3c0 07c0 	ubfx	r7, r0, #3, #1
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
    8816:	f1c7 0303 	rsb	r3, r7, #3
    881a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    881e:	e7b7      	b.n	8790 <bt_le_adv_start_legacy+0xdc>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    8820:	2701      	movs	r7, #1
    8822:	e7f8      	b.n	8816 <bt_le_adv_start_legacy+0x162>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
    8824:	6863      	ldr	r3, [r4, #4]
    8826:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    882a:	e9cd 7301 	strd	r7, r3, [sp, #4]
    882e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    8830:	9300      	str	r3, [sp, #0]
    8832:	4652      	mov	r2, sl
    8834:	9b16      	ldr	r3, [sp, #88]	; 0x58
    8836:	4649      	mov	r1, r9
    8838:	4628      	mov	r0, r5
    883a:	f018 fcd8 	bl	211ee <le_adv_update.constprop.0>
		if (err) {
    883e:	4683      	mov	fp, r0
    8840:	2800      	cmp	r0, #0
    8842:	d0bd      	beq.n	87c0 <bt_le_adv_start_legacy+0x10c>
    8844:	e751      	b.n	86ea <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
    8846:	a905      	add	r1, sp, #20
    8848:	4628      	mov	r0, r5
    884a:	f7ff fed3 	bl	85f4 <le_adv_start_add_conn>
		if (err) {
    884e:	4683      	mov	fp, r0
    8850:	2800      	cmp	r0, #0
    8852:	d0b8      	beq.n	87c6 <bt_le_adv_start_legacy+0x112>
			if (err == -ENOMEM && !dir_adv &&
    8854:	f110 0f0c 	cmn.w	r0, #12
    8858:	f47f af47 	bne.w	86ea <bt_le_adv_start_legacy+0x36>
    885c:	2e00      	cmp	r6, #0
    885e:	f47f af44 	bne.w	86ea <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    8862:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
    8864:	079b      	lsls	r3, r3, #30
    8866:	f53f af40 	bmi.w	86ea <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    886a:	6860      	ldr	r0, [r4, #4]
    886c:	f080 0002 	eor.w	r0, r0, #2
    8870:	f3c0 0b40 	ubfx	fp, r0, #1, #1
    8874:	f00b 0201 	and.w	r2, fp, #1
    8878:	210c      	movs	r1, #12
    887a:	4640      	mov	r0, r8
    887c:	f018 fca0 	bl	211c0 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
    8880:	6862      	ldr	r2, [r4, #4]
    8882:	2107      	movs	r1, #7
    8884:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    8888:	4640      	mov	r0, r8
    888a:	f018 fc99 	bl	211c0 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    888e:	6862      	ldr	r2, [r4, #4]
    8890:	2108      	movs	r1, #8
    8892:	f002 0201 	and.w	r2, r2, #1
    8896:	4640      	mov	r0, r8
    8898:	f018 fc92 	bl	211c0 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    889c:	463a      	mov	r2, r7
    889e:	2109      	movs	r1, #9
    88a0:	4640      	mov	r0, r8
    88a2:	f018 fc8d 	bl	211c0 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    88a6:	6862      	ldr	r2, [r4, #4]
    88a8:	210b      	movs	r1, #11
    88aa:	f3c2 0280 	ubfx	r2, r2, #2, #1
    88ae:	4640      	mov	r0, r8
    88b0:	f018 fc86 	bl	211c0 <atomic_set_bit_to>
	return 0;
    88b4:	f04f 0b00 	mov.w	fp, #0
    88b8:	e717      	b.n	86ea <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    88ba:	9805      	ldr	r0, [sp, #20]
    88bc:	b108      	cbz	r0, 88c2 <bt_le_adv_start_legacy+0x20e>
		bt_conn_unref(conn);
    88be:	f018 fdff 	bl	214c0 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    88c2:	2e00      	cmp	r6, #0
    88c4:	d1d6      	bne.n	8874 <bt_le_adv_start_legacy+0x1c0>
    88c6:	e7d0      	b.n	886a <bt_le_adv_start_legacy+0x1b6>
		return -EAGAIN;
    88c8:	f06f 0b0a 	mvn.w	fp, #10
    88cc:	e70d      	b.n	86ea <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
    88ce:	f06f 0b77 	mvn.w	fp, #119	; 0x77
    88d2:	e70a      	b.n	86ea <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
    88d4:	f06f 0b68 	mvn.w	fp, #104	; 0x68
    88d8:	e707      	b.n	86ea <bt_le_adv_start_legacy+0x36>
    88da:	4683      	mov	fp, r0
    88dc:	e705      	b.n	86ea <bt_le_adv_start_legacy+0x36>
    88de:	bf00      	nop
    88e0:	20000098 	.word	0x20000098
    88e4:	20000000 	.word	0x20000000
    88e8:	00023ed8 	.word	0x00023ed8
    88ec:	00023ed8 	.word	0x00023ed8
    88f0:	00026d55 	.word	0x00026d55

000088f4 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    88f4:	b513      	push	{r0, r1, r4, lr}

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    88f6:	9c04      	ldr	r4, [sp, #16]
    88f8:	e9cd 3400 	strd	r3, r4, [sp]
    88fc:	4613      	mov	r3, r2
    88fe:	460a      	mov	r2, r1
    8900:	4601      	mov	r1, r0
    8902:	4802      	ldr	r0, [pc, #8]	; (890c <bt_le_adv_start+0x18>)
    8904:	f7ff fed6 	bl	86b4 <bt_le_adv_start_legacy>
	if (err) {
		bt_le_adv_delete_legacy();
	}

	return err;
}
    8908:	b002      	add	sp, #8
    890a:	bd10      	pop	{r4, pc}
    890c:	20000018 	.word	0x20000018

00008910 <bt_le_adv_resume>:
	return 0;
}

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
    8910:	b537      	push	{r0, r1, r2, r4, r5, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    8912:	481e      	ldr	r0, [pc, #120]	; (898c <bt_le_adv_resume+0x7c>)
    8914:	4c1d      	ldr	r4, [pc, #116]	; (898c <bt_le_adv_resume+0x7c>)
    8916:	f018 fc37 	bl	21188 <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    891a:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    891e:	d032      	beq.n	8986 <bt_le_adv_resume+0x76>
    8920:	4620      	mov	r0, r4
    8922:	f018 fc31 	bl	21188 <atomic_get>
    8926:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    8928:	f3c0 1580 	ubfx	r5, r0, #6, #1
    892c:	d42b      	bmi.n	8986 <bt_le_adv_resume+0x76>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    892e:	4620      	mov	r0, r4
    8930:	f018 fc2a 	bl	21188 <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    8934:	05c3      	lsls	r3, r0, #23
    8936:	d526      	bpl.n	8986 <bt_le_adv_resume+0x76>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
    8938:	a901      	add	r1, sp, #4
    893a:	f1a4 0010 	sub.w	r0, r4, #16
    893e:	f7ff fe59 	bl	85f4 <le_adv_start_add_conn>
	if (err) {
    8942:	bb00      	cbnz	r0, 8986 <bt_le_adv_resume+0x76>
	return bt_le_adv_set_enable_legacy(adv, enable);
    8944:	2101      	movs	r1, #1
    8946:	f1a4 0010 	sub.w	r0, r4, #16
    894a:	f018 fccc 	bl	212e6 <bt_le_adv_set_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		bt_id_set_adv_private_addr(adv);
	}

	err = bt_le_adv_set_enable(adv, true);
	if (err) {
    894e:	b150      	cbz	r0, 8966 <bt_le_adv_resume+0x56>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    8950:	4629      	mov	r1, r5
    8952:	9801      	ldr	r0, [sp, #4]
    8954:	f000 fc62 	bl	921c <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    8958:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    895c:	4620      	mov	r0, r4
    895e:	f018 fc19 	bl	21194 <atomic_and>
	return (old & mask) != 0;
    8962:	f3c0 3500 	ubfx	r5, r0, #12, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
    8966:	9801      	ldr	r0, [sp, #4]
    8968:	f018 fdaa 	bl	214c0 <bt_conn_unref>
	if (persist_paused) {
    896c:	b15d      	cbz	r5, 8986 <bt_le_adv_resume+0x76>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    896e:	f3bf 8f5b 	dmb	ish
    8972:	e854 3f00 	ldrex	r3, [r4]
    8976:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    897a:	e844 3200 	strex	r2, r3, [r4]
    897e:	2a00      	cmp	r2, #0
    8980:	d1f7      	bne.n	8972 <bt_le_adv_resume+0x62>
    8982:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
    8986:	b003      	add	sp, #12
    8988:	bd30      	pop	{r4, r5, pc}
    898a:	bf00      	nop
    898c:	20000028 	.word	0x20000028

00008990 <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
    8990:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, 64) == 0;
    8992:	4904      	ldr	r1, [pc, #16]	; (89a4 <bt_pub_key_is_debug+0x14>)
    8994:	2240      	movs	r2, #64	; 0x40
    8996:	f01b f924 	bl	23be2 <memcmp>
}
    899a:	fab0 f080 	clz	r0, r0
    899e:	0940      	lsrs	r0, r0, #5
    89a0:	bd08      	pop	{r3, pc}
    89a2:	bf00      	nop
    89a4:	00026e05 	.word	0x00026e05

000089a8 <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    89a8:	b570      	push	{r4, r5, r6, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
    89aa:	4b44      	ldr	r3, [pc, #272]	; (8abc <bt_pub_key_gen+0x114>)
    89ac:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
    89b0:	f003 0306 	and.w	r3, r3, #6
    89b4:	2b06      	cmp	r3, #6
    89b6:	d00d      	beq.n	89d4 <bt_pub_key_gen+0x2c>
    89b8:	4b41      	ldr	r3, [pc, #260]	; (8ac0 <bt_pub_key_gen+0x118>)
    89ba:	4942      	ldr	r1, [pc, #264]	; (8ac4 <bt_pub_key_gen+0x11c>)
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
    89bc:	4842      	ldr	r0, [pc, #264]	; (8ac8 <bt_pub_key_gen+0x120>)
    89be:	1ac9      	subs	r1, r1, r3
    89c0:	08c9      	lsrs	r1, r1, #3
    89c2:	0189      	lsls	r1, r1, #6
    89c4:	f041 0102 	orr.w	r1, r1, #2
    89c8:	f016 fb82 	bl	1f0d0 <log_0>
		return -ENOTSUP;
    89cc:	f06f 0685 	mvn.w	r6, #133	; 0x85
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
    89d0:	4630      	mov	r0, r6
    89d2:	bd70      	pop	{r4, r5, r6, pc}
	if (!new_cb) {
    89d4:	2800      	cmp	r0, #0
    89d6:	d06d      	beq.n	8ab4 <bt_pub_key_gen+0x10c>
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    89d8:	4d3c      	ldr	r5, [pc, #240]	; (8acc <bt_pub_key_gen+0x124>)
    89da:	682a      	ldr	r2, [r5, #0]
    89dc:	b10a      	cbz	r2, 89e2 <bt_pub_key_gen+0x3a>
    89de:	1f13      	subs	r3, r2, #4
    89e0:	b9bb      	cbnz	r3, 8a12 <bt_pub_key_gen+0x6a>
	parent->next = child;
    89e2:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
    89e4:	686a      	ldr	r2, [r5, #4]
	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
    89e6:	1d03      	adds	r3, r0, #4
	list->head = node;
    89e8:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
    89ea:	b902      	cbnz	r2, 89ee <bt_pub_key_gen+0x46>
	list->tail = node;
    89ec:	606b      	str	r3, [r5, #4]
    89ee:	4c38      	ldr	r4, [pc, #224]	; (8ad0 <bt_pub_key_gen+0x128>)
    89f0:	f3bf 8f5b 	dmb	ish
    89f4:	e854 2f00 	ldrex	r2, [r4]
    89f8:	f042 0310 	orr.w	r3, r2, #16
    89fc:	e844 3100 	strex	r1, r3, [r4]
    8a00:	2900      	cmp	r1, #0
    8a02:	d1f7      	bne.n	89f4 <bt_pub_key_gen+0x4c>
    8a04:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    8a08:	f012 0210 	ands.w	r2, r2, #16
    8a0c:	d017      	beq.n	8a3e <bt_pub_key_gen+0x96>
		return 0;
    8a0e:	2600      	movs	r6, #0
    8a10:	e7de      	b.n	89d0 <bt_pub_key_gen+0x28>
		if (cb == new_cb) {
    8a12:	4283      	cmp	r3, r0
    8a14:	d10c      	bne.n	8a30 <bt_pub_key_gen+0x88>
    8a16:	4b2a      	ldr	r3, [pc, #168]	; (8ac0 <bt_pub_key_gen+0x118>)
    8a18:	492a      	ldr	r1, [pc, #168]	; (8ac4 <bt_pub_key_gen+0x11c>)
			BT_WARN("Callback already registered");
    8a1a:	482e      	ldr	r0, [pc, #184]	; (8ad4 <bt_pub_key_gen+0x12c>)
    8a1c:	1ac9      	subs	r1, r1, r3
    8a1e:	08c9      	lsrs	r1, r1, #3
    8a20:	0189      	lsls	r1, r1, #6
    8a22:	f041 0102 	orr.w	r1, r1, #2
    8a26:	f016 fb53 	bl	1f0d0 <log_0>
			return -EALREADY;
    8a2a:	f06f 0677 	mvn.w	r6, #119	; 0x77
    8a2e:	e7cf      	b.n	89d0 <bt_pub_key_gen+0x28>
Z_GENLIST_PEEK_NEXT(slist, snode)
    8a30:	1d19      	adds	r1, r3, #4
    8a32:	d0d6      	beq.n	89e2 <bt_pub_key_gen+0x3a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    8a34:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    8a36:	2b00      	cmp	r3, #0
    8a38:	d0d3      	beq.n	89e2 <bt_pub_key_gen+0x3a>
    8a3a:	3b04      	subs	r3, #4
    8a3c:	e7d0      	b.n	89e0 <bt_pub_key_gen+0x38>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8a3e:	f3bf 8f5b 	dmb	ish
    8a42:	e854 3f00 	ldrex	r3, [r4]
    8a46:	f023 0308 	bic.w	r3, r3, #8
    8a4a:	e844 3100 	strex	r1, r3, [r4]
    8a4e:	2900      	cmp	r1, #0
    8a50:	d1f7      	bne.n	8a42 <bt_pub_key_gen+0x9a>
    8a52:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    8a56:	4611      	mov	r1, r2
    8a58:	f242 0025 	movw	r0, #8229	; 0x2025
    8a5c:	f7fe fc8e 	bl	737c <bt_hci_cmd_send_sync>
	if (err) {
    8a60:	4606      	mov	r6, r0
    8a62:	2800      	cmp	r0, #0
    8a64:	d0d3      	beq.n	8a0e <bt_pub_key_gen+0x66>
    8a66:	4b16      	ldr	r3, [pc, #88]	; (8ac0 <bt_pub_key_gen+0x118>)
    8a68:	4916      	ldr	r1, [pc, #88]	; (8ac4 <bt_pub_key_gen+0x11c>)
		BT_ERR("Sending LE P256 Public Key command failed");
    8a6a:	481b      	ldr	r0, [pc, #108]	; (8ad8 <bt_pub_key_gen+0x130>)
    8a6c:	1ac9      	subs	r1, r1, r3
    8a6e:	08c9      	lsrs	r1, r1, #3
    8a70:	0189      	lsls	r1, r1, #6
    8a72:	f041 0101 	orr.w	r1, r1, #1
    8a76:	f016 fb2b 	bl	1f0d0 <log_0>
    8a7a:	f3bf 8f5b 	dmb	ish
    8a7e:	e854 3f00 	ldrex	r3, [r4]
    8a82:	f023 0310 	bic.w	r3, r3, #16
    8a86:	e844 3200 	strex	r2, r3, [r4]
    8a8a:	2a00      	cmp	r2, #0
    8a8c:	d1f7      	bne.n	8a7e <bt_pub_key_gen+0xd6>
    8a8e:	f3bf 8f5b 	dmb	ish
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    8a92:	682c      	ldr	r4, [r5, #0]
    8a94:	b91c      	cbnz	r4, 8a9e <bt_pub_key_gen+0xf6>
	list->head = NULL;
    8a96:	2300      	movs	r3, #0
	list->tail = NULL;
    8a98:	e9c5 3300 	strd	r3, r3, [r5]
		return err;
    8a9c:	e798      	b.n	89d0 <bt_pub_key_gen+0x28>
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    8a9e:	3c04      	subs	r4, #4
    8aa0:	2c00      	cmp	r4, #0
    8aa2:	d0f8      	beq.n	8a96 <bt_pub_key_gen+0xee>
			if (cb->func) {
    8aa4:	6823      	ldr	r3, [r4, #0]
    8aa6:	b10b      	cbz	r3, 8aac <bt_pub_key_gen+0x104>
				cb->func(NULL);
    8aa8:	2000      	movs	r0, #0
    8aaa:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    8aac:	1d23      	adds	r3, r4, #4
    8aae:	d0f2      	beq.n	8a96 <bt_pub_key_gen+0xee>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    8ab0:	6864      	ldr	r4, [r4, #4]
	return node->next;
    8ab2:	e7ef      	b.n	8a94 <bt_pub_key_gen+0xec>
		return -EINVAL;
    8ab4:	f06f 0615 	mvn.w	r6, #21
    8ab8:	e78a      	b.n	89d0 <bt_pub_key_gen+0x28>
    8aba:	bf00      	nop
    8abc:	20000000 	.word	0x20000000
    8ac0:	00023ed8 	.word	0x00023ed8
    8ac4:	00023fa0 	.word	0x00023fa0
    8ac8:	00026d77 	.word	0x00026d77
    8acc:	20001844 	.word	0x20001844
    8ad0:	20000098 	.word	0x20000098
    8ad4:	00026d96 	.word	0x00026d96
    8ad8:	00026db2 	.word	0x00026db2

00008adc <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8adc:	4b05      	ldr	r3, [pc, #20]	; (8af4 <bt_pub_key_get+0x18>)
    8ade:	f3bf 8f5b 	dmb	ish
    8ae2:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
}
    8ae4:	4804      	ldr	r0, [pc, #16]	; (8af8 <bt_pub_key_get+0x1c>)
    8ae6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    8aea:	f013 0f08 	tst.w	r3, #8
}
    8aee:	bf08      	it	eq
    8af0:	2000      	moveq	r0, #0
    8af2:	4770      	bx	lr
    8af4:	20000098 	.word	0x20000098
    8af8:	20003580 	.word	0x20003580

00008afc <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    8afc:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (dh_key_cb == cb) {
    8afe:	4d27      	ldr	r5, [pc, #156]	; (8b9c <bt_dh_key_gen+0xa0>)
    8b00:	682b      	ldr	r3, [r5, #0]
    8b02:	428b      	cmp	r3, r1
{
    8b04:	4604      	mov	r4, r0
	if (dh_key_cb == cb) {
    8b06:	d042      	beq.n	8b8e <bt_dh_key_gen+0x92>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    8b08:	b11b      	cbz	r3, 8b12 <bt_dh_key_gen+0x16>
		return -EBUSY;
    8b0a:	f06f 040f 	mvn.w	r4, #15
		BT_WARN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
    8b0e:	4620      	mov	r0, r4
    8b10:	bd70      	pop	{r4, r5, r6, pc}
    8b12:	4b23      	ldr	r3, [pc, #140]	; (8ba0 <bt_dh_key_gen+0xa4>)
    8b14:	f3bf 8f5b 	dmb	ish
    8b18:	681a      	ldr	r2, [r3, #0]
    8b1a:	f3bf 8f5b 	dmb	ish
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    8b1e:	06d2      	lsls	r2, r2, #27
    8b20:	d4f3      	bmi.n	8b0a <bt_dh_key_gen+0xe>
    8b22:	f3bf 8f5b 	dmb	ish
    8b26:	681b      	ldr	r3, [r3, #0]
    8b28:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    8b2c:	071b      	lsls	r3, r3, #28
    8b2e:	d531      	bpl.n	8b94 <bt_dh_key_gen+0x98>
	dh_key_cb = cb;
    8b30:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    8b32:	f242 0026 	movw	r0, #8230	; 0x2026
    8b36:	2140      	movs	r1, #64	; 0x40
    8b38:	f7fe fabc 	bl	70b4 <bt_hci_cmd_create>
	if (!buf) {
    8b3c:	4606      	mov	r6, r0
    8b3e:	b318      	cbz	r0, 8b88 <bt_dh_key_gen+0x8c>
	return net_buf_simple_add(&buf->b, len);
    8b40:	2140      	movs	r1, #64	; 0x40
    8b42:	3008      	adds	r0, #8
    8b44:	f01a f83f 	bl	22bc6 <net_buf_simple_add>
    8b48:	4623      	mov	r3, r4
    8b4a:	f104 0240 	add.w	r2, r4, #64	; 0x40
    8b4e:	f853 1b04 	ldr.w	r1, [r3], #4
    8b52:	f840 1b04 	str.w	r1, [r0], #4
    8b56:	4293      	cmp	r3, r2
    8b58:	d1f9      	bne.n	8b4e <bt_dh_key_gen+0x52>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    8b5a:	2200      	movs	r2, #0
    8b5c:	4631      	mov	r1, r6
    8b5e:	f242 0026 	movw	r0, #8230	; 0x2026
    8b62:	f7fe fc0b 	bl	737c <bt_hci_cmd_send_sync>
	if (err) {
    8b66:	4604      	mov	r4, r0
    8b68:	2800      	cmp	r0, #0
    8b6a:	d0d0      	beq.n	8b0e <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
    8b6c:	2300      	movs	r3, #0
    8b6e:	602b      	str	r3, [r5, #0]
    8b70:	4a0c      	ldr	r2, [pc, #48]	; (8ba4 <bt_dh_key_gen+0xa8>)
    8b72:	4b0d      	ldr	r3, [pc, #52]	; (8ba8 <bt_dh_key_gen+0xac>)
		BT_WARN("Failed to generate DHKey (err %d)", err);
    8b74:	480d      	ldr	r0, [pc, #52]	; (8bac <bt_dh_key_gen+0xb0>)
    8b76:	1ad2      	subs	r2, r2, r3
    8b78:	08d2      	lsrs	r2, r2, #3
    8b7a:	0192      	lsls	r2, r2, #6
    8b7c:	f042 0202 	orr.w	r2, r2, #2
    8b80:	4621      	mov	r1, r4
    8b82:	f016 fab2 	bl	1f0ea <log_1>
		return err;
    8b86:	e7c2      	b.n	8b0e <bt_dh_key_gen+0x12>
		return -ENOBUFS;
    8b88:	f06f 0468 	mvn.w	r4, #104	; 0x68
    8b8c:	e7ee      	b.n	8b6c <bt_dh_key_gen+0x70>
		return -EALREADY;
    8b8e:	f06f 0477 	mvn.w	r4, #119	; 0x77
    8b92:	e7bc      	b.n	8b0e <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
    8b94:	f06f 047c 	mvn.w	r4, #124	; 0x7c
    8b98:	e7b9      	b.n	8b0e <bt_dh_key_gen+0x12>
    8b9a:	bf00      	nop
    8b9c:	20001840 	.word	0x20001840
    8ba0:	20000098 	.word	0x20000098
    8ba4:	00023fa0 	.word	0x00023fa0
    8ba8:	00023ed8 	.word	0x00023ed8
    8bac:	00026ddc 	.word	0x00026ddc

00008bb0 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
    8bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8bb2:	4b20      	ldr	r3, [pc, #128]	; (8c34 <bt_hci_evt_le_pkey_complete+0x84>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    8bb4:	6886      	ldr	r6, [r0, #8]
    8bb6:	f3bf 8f5b 	dmb	ish
    8bba:	e853 2f00 	ldrex	r2, [r3]
    8bbe:	f022 0210 	bic.w	r2, r2, #16
    8bc2:	e843 2100 	strex	r1, r2, [r3]
    8bc6:	2900      	cmp	r1, #0
    8bc8:	d1f7      	bne.n	8bba <bt_hci_evt_le_pkey_complete+0xa>
    8bca:	f3bf 8f5b 	dmb	ish

	BT_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
    8bce:	7832      	ldrb	r2, [r6, #0]
    8bd0:	b9aa      	cbnz	r2, 8bfe <bt_hci_evt_le_pkey_complete+0x4e>
		memcpy(pub_key, evt->key, 64);
    8bd2:	4919      	ldr	r1, [pc, #100]	; (8c38 <bt_hci_evt_le_pkey_complete+0x88>)
    8bd4:	1c72      	adds	r2, r6, #1
    8bd6:	f106 0041 	add.w	r0, r6, #65	; 0x41
    8bda:	f852 4b04 	ldr.w	r4, [r2], #4
    8bde:	f841 4b04 	str.w	r4, [r1], #4
    8be2:	4282      	cmp	r2, r0
    8be4:	d1f9      	bne.n	8bda <bt_hci_evt_le_pkey_complete+0x2a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8be6:	f3bf 8f5b 	dmb	ish
    8bea:	e853 2f00 	ldrex	r2, [r3]
    8bee:	f042 0208 	orr.w	r2, r2, #8
    8bf2:	e843 2100 	strex	r1, r2, [r3]
    8bf6:	2900      	cmp	r1, #0
    8bf8:	d1f7      	bne.n	8bea <bt_hci_evt_le_pkey_complete+0x3a>
    8bfa:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    8bfe:	4d0f      	ldr	r5, [pc, #60]	; (8c3c <bt_hci_evt_le_pkey_complete+0x8c>)
    8c00:	682c      	ldr	r4, [r5, #0]
    8c02:	b91c      	cbnz	r4, 8c0c <bt_hci_evt_le_pkey_complete+0x5c>
	list->head = NULL;
    8c04:	2300      	movs	r3, #0
	list->tail = NULL;
    8c06:	e9c5 3300 	strd	r3, r3, [r5]
			cb->func(evt->status ? NULL : pub_key);
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
    8c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			cb->func(evt->status ? NULL : pub_key);
    8c0c:	4f0a      	ldr	r7, [pc, #40]	; (8c38 <bt_hci_evt_le_pkey_complete+0x88>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    8c0e:	3c04      	subs	r4, #4
    8c10:	2c00      	cmp	r4, #0
    8c12:	d0f7      	beq.n	8c04 <bt_hci_evt_le_pkey_complete+0x54>
		if (cb->func) {
    8c14:	6823      	ldr	r3, [r4, #0]
    8c16:	b12b      	cbz	r3, 8c24 <bt_hci_evt_le_pkey_complete+0x74>
			cb->func(evt->status ? NULL : pub_key);
    8c18:	7832      	ldrb	r2, [r6, #0]
    8c1a:	2a00      	cmp	r2, #0
    8c1c:	bf0c      	ite	eq
    8c1e:	4638      	moveq	r0, r7
    8c20:	2000      	movne	r0, #0
    8c22:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    8c24:	1d23      	adds	r3, r4, #4
    8c26:	d0ed      	beq.n	8c04 <bt_hci_evt_le_pkey_complete+0x54>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    8c28:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    8c2a:	2c00      	cmp	r4, #0
    8c2c:	d0ea      	beq.n	8c04 <bt_hci_evt_le_pkey_complete+0x54>
    8c2e:	3c04      	subs	r4, #4
    8c30:	e7ee      	b.n	8c10 <bt_hci_evt_le_pkey_complete+0x60>
    8c32:	bf00      	nop
    8c34:	20000098 	.word	0x20000098
    8c38:	20003580 	.word	0x20003580
    8c3c:	20001844 	.word	0x20001844

00008c40 <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
    8c40:	4905      	ldr	r1, [pc, #20]	; (8c58 <bt_hci_evt_le_dhkey_complete+0x18>)
    8c42:	680b      	ldr	r3, [r1, #0]
    8c44:	b133      	cbz	r3, 8c54 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    8c46:	6882      	ldr	r2, [r0, #8]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
    8c48:	2000      	movs	r0, #0
    8c4a:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
    8c4c:	7811      	ldrb	r1, [r2, #0]
    8c4e:	b901      	cbnz	r1, 8c52 <bt_hci_evt_le_dhkey_complete+0x12>
    8c50:	1c50      	adds	r0, r2, #1
    8c52:	4718      	bx	r3
	}
}
    8c54:	4770      	bx	lr
    8c56:	bf00      	nop
    8c58:	20001840 	.word	0x20001840

00008c5c <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    8c5c:	2300      	movs	r3, #0
	tx->user_data = NULL;
    8c5e:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
    8c62:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
    8c64:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
    8c66:	4801      	ldr	r0, [pc, #4]	; (8c6c <tx_free+0x10>)
    8c68:	f01a bb92 	b.w	23390 <k_queue_append>
    8c6c:	20000960 	.word	0x20000960

00008c70 <notify_connected>:
{
    8c70:	b538      	push	{r3, r4, r5, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    8c72:	4b09      	ldr	r3, [pc, #36]	; (8c98 <notify_connected+0x28>)
    8c74:	681d      	ldr	r5, [r3, #0]
{
    8c76:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    8c78:	7b21      	ldrb	r1, [r4, #12]
    8c7a:	b92d      	cbnz	r5, 8c88 <notify_connected+0x18>
	if (!conn->err) {
    8c7c:	b951      	cbnz	r1, 8c94 <notify_connected+0x24>
		bt_gatt_connected(conn);
    8c7e:	4620      	mov	r0, r4
}
    8c80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
    8c84:	f002 bcb8 	b.w	b5f8 <bt_gatt_connected>
		if (cb->connected) {
    8c88:	682b      	ldr	r3, [r5, #0]
    8c8a:	b10b      	cbz	r3, 8c90 <notify_connected+0x20>
			cb->connected(conn, conn->err);
    8c8c:	4620      	mov	r0, r4
    8c8e:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    8c90:	69ad      	ldr	r5, [r5, #24]
    8c92:	e7f1      	b.n	8c78 <notify_connected+0x8>
}
    8c94:	bd38      	pop	{r3, r4, r5, pc}
    8c96:	bf00      	nop
    8c98:	20001850 	.word	0x20001850

00008c9c <send_frag>:
	return bt_send(buf);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, uint8_t flags,
		      bool always_consume)
{
    8c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    8ca0:	694d      	ldr	r5, [r1, #20]
{
    8ca2:	4604      	mov	r4, r0
    8ca4:	460e      	mov	r6, r1
    8ca6:	4691      	mov	r9, r2
    8ca8:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
    8caa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8cae:	4845      	ldr	r0, [pc, #276]	; (8dc4 <send_frag+0x128>)
    8cb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8cb4:	f014 ffa0 	bl	1dbf8 <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    8cb8:	7b63      	ldrb	r3, [r4, #13]
    8cba:	2b07      	cmp	r3, #7
    8cbc:	d151      	bne.n	8d62 <send_frag+0xc6>
	__asm__ volatile(
    8cbe:	f04f 0320 	mov.w	r3, #32
    8cc2:	f3ef 8211 	mrs	r2, BASEPRI
    8cc6:	f383 8811 	msr	BASEPRI, r3
    8cca:	f3bf 8f6f 	isb	sy
		goto fail;
	}

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
    8cce:	2d00      	cmp	r5, #0
    8cd0:	d059      	beq.n	8d86 <send_frag+0xea>
	parent->next = child;
    8cd2:	2300      	movs	r3, #0
    8cd4:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
    8cd6:	69a3      	ldr	r3, [r4, #24]
    8cd8:	2b00      	cmp	r3, #0
    8cda:	d151      	bne.n	8d80 <send_frag+0xe4>
	list->head = node;
    8cdc:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    8ce0:	f382 8811 	msr	BASEPRI, r2
    8ce4:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
    8ce8:	2104      	movs	r1, #4
    8cea:	f106 0008 	add.w	r0, r6, #8
    8cee:	f019 ff82 	bl	22bf6 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    8cf2:	8823      	ldrh	r3, [r4, #0]
    8cf4:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
    8cf8:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    8cfc:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    8cfe:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    8d02:	3b04      	subs	r3, #4
    8d04:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    8d06:	2302      	movs	r3, #2
    8d08:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
    8d0a:	4630      	mov	r0, r6
    8d0c:	f018 f937 	bl	20f7e <bt_send>
		err = send_iso(conn, buf, flags);
	} else {
		err = send_acl(conn, buf, flags);
	}

	if (err) {
    8d10:	4601      	mov	r1, r0
    8d12:	2800      	cmp	r0, #0
    8d14:	d053      	beq.n	8dbe <send_frag+0x122>
    8d16:	4b2c      	ldr	r3, [pc, #176]	; (8dc8 <send_frag+0x12c>)
    8d18:	4a2c      	ldr	r2, [pc, #176]	; (8dcc <send_frag+0x130>)
		BT_ERR("Unable to send to driver (err %d)", err);
    8d1a:	482d      	ldr	r0, [pc, #180]	; (8dd0 <send_frag+0x134>)
    8d1c:	1ad2      	subs	r2, r2, r3
    8d1e:	08d2      	lsrs	r2, r2, #3
    8d20:	0192      	lsls	r2, r2, #6
    8d22:	f042 0201 	orr.w	r2, r2, #1
    8d26:	f016 f9e0 	bl	1f0ea <log_1>
	__asm__ volatile(
    8d2a:	f04f 0320 	mov.w	r3, #32
    8d2e:	f3ef 8111 	mrs	r1, BASEPRI
    8d32:	f383 8811 	msr	BASEPRI, r3
    8d36:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
    8d3a:	2d00      	cmp	r5, #0
    8d3c:	d039      	beq.n	8db2 <send_frag+0x116>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    8d3e:	6963      	ldr	r3, [r4, #20]
    8d40:	2200      	movs	r2, #0
    8d42:	b153      	cbz	r3, 8d5a <send_frag+0xbe>
    8d44:	429d      	cmp	r5, r3
    8d46:	d131      	bne.n	8dac <send_frag+0x110>
Z_GENLIST_REMOVE(slist, snode)
    8d48:	682b      	ldr	r3, [r5, #0]
    8d4a:	bb4a      	cbnz	r2, 8da0 <send_frag+0x104>
    8d4c:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
    8d4e:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    8d50:	4295      	cmp	r5, r2
    8d52:	d100      	bne.n	8d56 <send_frag+0xba>
	list->tail = node;
    8d54:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    8d56:	2300      	movs	r3, #0
    8d58:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    8d5a:	f381 8811 	msr	BASEPRI, r1
    8d5e:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    8d62:	4818      	ldr	r0, [pc, #96]	; (8dc4 <send_frag+0x128>)
    8d64:	f014 ff22 	bl	1dbac <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
    8d68:	b115      	cbz	r5, 8d70 <send_frag+0xd4>
		tx_free(tx);
    8d6a:	4628      	mov	r0, r5
    8d6c:	f7ff ff76 	bl	8c5c <tx_free>
	}

	if (always_consume) {
    8d70:	b11f      	cbz	r7, 8d7a <send_frag+0xde>
		net_buf_unref(buf);
    8d72:	4630      	mov	r0, r6
    8d74:	f011 fc42 	bl	1a5fc <net_buf_unref>
	}
	return false;
    8d78:	2700      	movs	r7, #0
}
    8d7a:	4638      	mov	r0, r7
    8d7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8d80:	601d      	str	r5, [r3, #0]
	list->tail = node;
    8d82:	61a5      	str	r5, [r4, #24]
}
    8d84:	e7ac      	b.n	8ce0 <send_frag+0x44>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
    8d86:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
    8d88:	b133      	cbz	r3, 8d98 <send_frag+0xfc>
			pending_no_cb = &tail_tx->pending_no_cb;
    8d8a:	f103 080c 	add.w	r8, r3, #12
    8d8e:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    8d90:	3301      	adds	r3, #1
    8d92:	f8c8 3000 	str.w	r3, [r8]
    8d96:	e7a3      	b.n	8ce0 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
    8d98:	69e3      	ldr	r3, [r4, #28]
    8d9a:	f104 081c 	add.w	r8, r4, #28
    8d9e:	e7f7      	b.n	8d90 <send_frag+0xf4>
	parent->next = child;
    8da0:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    8da2:	69a3      	ldr	r3, [r4, #24]
    8da4:	429d      	cmp	r5, r3
	list->tail = node;
    8da6:	bf08      	it	eq
    8da8:	61a2      	streq	r2, [r4, #24]
}
    8daa:	e7d4      	b.n	8d56 <send_frag+0xba>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    8dac:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    8dae:	681b      	ldr	r3, [r3, #0]
    8db0:	e7c7      	b.n	8d42 <send_frag+0xa6>
			(*pending_no_cb)--;
    8db2:	f8d8 3000 	ldr.w	r3, [r8]
    8db6:	3b01      	subs	r3, #1
    8db8:	f8c8 3000 	str.w	r3, [r8]
    8dbc:	e7cd      	b.n	8d5a <send_frag+0xbe>
	return true;
    8dbe:	2701      	movs	r7, #1
    8dc0:	e7db      	b.n	8d7a <send_frag+0xde>
    8dc2:	bf00      	nop
    8dc4:	200000d0 	.word	0x200000d0
    8dc8:	00023ed8 	.word	0x00023ed8
    8dcc:	00023ef0 	.word	0x00023ef0
    8dd0:	000266e1 	.word	0x000266e1

00008dd4 <bt_conn_get_pkts>:
}
    8dd4:	4800      	ldr	r0, [pc, #0]	; (8dd8 <bt_conn_get_pkts+0x4>)
    8dd6:	4770      	bx	lr
    8dd8:	200000d0 	.word	0x200000d0

00008ddc <notify_le_param_updated>:
{
    8ddc:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8dde:	f3bf 8f5b 	dmb	ish
    8de2:	6842      	ldr	r2, [r0, #4]
    8de4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    8de8:	0592      	lsls	r2, r2, #22
{
    8dea:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    8dec:	f100 0304 	add.w	r3, r0, #4
    8df0:	d519      	bpl.n	8e26 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
    8df2:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    8df6:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	; 0xa0
    8dfa:	4291      	cmp	r1, r2
    8dfc:	d813      	bhi.n	8e26 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
    8dfe:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
    8e02:	4291      	cmp	r1, r2
    8e04:	d30f      	bcc.n	8e26 <notify_le_param_updated+0x4a>
	    conn->le.latency == conn->le.pending_latency &&
    8e06:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
    8e0a:	4291      	cmp	r1, r2
    8e0c:	d10b      	bne.n	8e26 <notify_le_param_updated+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8e0e:	f3bf 8f5b 	dmb	ish
    8e12:	e853 2f00 	ldrex	r2, [r3]
    8e16:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    8e1a:	e843 2100 	strex	r1, r2, [r3]
    8e1e:	2900      	cmp	r1, #0
    8e20:	d1f7      	bne.n	8e12 <notify_le_param_updated+0x36>
    8e22:	f3bf 8f5b 	dmb	ish
	for (cb = callback_list; cb; cb = cb->_next) {
    8e26:	4b08      	ldr	r3, [pc, #32]	; (8e48 <notify_le_param_updated+0x6c>)
    8e28:	681d      	ldr	r5, [r3, #0]
    8e2a:	b905      	cbnz	r5, 8e2e <notify_le_param_updated+0x52>
}
    8e2c:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    8e2e:	68ee      	ldr	r6, [r5, #12]
    8e30:	b13e      	cbz	r6, 8e42 <notify_le_param_updated+0x66>
			cb->le_param_updated(conn, conn->le.interval,
    8e32:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    8e36:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    8e3a:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    8e3e:	4620      	mov	r0, r4
    8e40:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    8e42:	69ad      	ldr	r5, [r5, #24]
    8e44:	e7f1      	b.n	8e2a <notify_le_param_updated+0x4e>
    8e46:	bf00      	nop
    8e48:	20001850 	.word	0x20001850

00008e4c <le_param_req>:
{
    8e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8e4e:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    8e50:	4608      	mov	r0, r1
{
    8e52:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    8e54:	f018 f873 	bl	20f3e <bt_le_conn_params_valid>
    8e58:	4604      	mov	r4, r0
    8e5a:	b910      	cbnz	r0, 8e62 <le_param_req+0x16>
		return false;
    8e5c:	2400      	movs	r4, #0
}
    8e5e:	4620      	mov	r0, r4
    8e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    8e62:	4b09      	ldr	r3, [pc, #36]	; (8e88 <le_param_req+0x3c>)
    8e64:	681e      	ldr	r6, [r3, #0]
    8e66:	2e00      	cmp	r6, #0
    8e68:	d0f9      	beq.n	8e5e <le_param_req+0x12>
		if (!cb->le_param_req) {
    8e6a:	68b3      	ldr	r3, [r6, #8]
    8e6c:	b90b      	cbnz	r3, 8e72 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    8e6e:	69b6      	ldr	r6, [r6, #24]
    8e70:	e7f9      	b.n	8e66 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    8e72:	4629      	mov	r1, r5
    8e74:	4638      	mov	r0, r7
    8e76:	4798      	blx	r3
    8e78:	2800      	cmp	r0, #0
    8e7a:	d0ef      	beq.n	8e5c <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    8e7c:	4628      	mov	r0, r5
    8e7e:	f018 f85e 	bl	20f3e <bt_le_conn_params_valid>
    8e82:	2800      	cmp	r0, #0
    8e84:	d1f3      	bne.n	8e6e <le_param_req+0x22>
    8e86:	e7e9      	b.n	8e5c <le_param_req+0x10>
    8e88:	20001850 	.word	0x20001850

00008e8c <bt_conn_identity_resolved>:
{
    8e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->role == BT_HCI_ROLE_MASTER) {
    8e8e:	78c3      	ldrb	r3, [r0, #3]
{
    8e90:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
    8e92:	b93b      	cbnz	r3, 8ea4 <bt_conn_identity_resolved+0x18>
		rpa = &conn->le.resp_addr;
    8e94:	f100 0696 	add.w	r6, r0, #150	; 0x96
	for (cb = callback_list; cb; cb = cb->_next) {
    8e98:	4b08      	ldr	r3, [pc, #32]	; (8ebc <bt_conn_identity_resolved+0x30>)
    8e9a:	681d      	ldr	r5, [r3, #0]
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    8e9c:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
    8ea0:	b91d      	cbnz	r5, 8eaa <bt_conn_identity_resolved+0x1e>
}
    8ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rpa = &conn->le.init_addr;
    8ea4:	f100 068f 	add.w	r6, r0, #143	; 0x8f
    8ea8:	e7f6      	b.n	8e98 <bt_conn_identity_resolved+0xc>
		if (cb->identity_resolved) {
    8eaa:	692b      	ldr	r3, [r5, #16]
    8eac:	b11b      	cbz	r3, 8eb6 <bt_conn_identity_resolved+0x2a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    8eae:	463a      	mov	r2, r7
    8eb0:	4631      	mov	r1, r6
    8eb2:	4620      	mov	r0, r4
    8eb4:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    8eb6:	69ad      	ldr	r5, [r5, #24]
    8eb8:	e7f2      	b.n	8ea0 <bt_conn_identity_resolved+0x14>
    8eba:	bf00      	nop
    8ebc:	20001850 	.word	0x20001850

00008ec0 <bt_conn_security_changed>:
{
    8ec0:	b570      	push	{r4, r5, r6, lr}
	conn->required_sec_level = conn->sec_level;
    8ec2:	7a43      	ldrb	r3, [r0, #9]
    8ec4:	7283      	strb	r3, [r0, #10]
{
    8ec6:	4604      	mov	r4, r0
    8ec8:	4616      	mov	r6, r2
	bt_l2cap_security_changed(conn, hci_err);
    8eca:	f018 fbcf 	bl	2166c <bt_l2cap_security_changed>
	for (cb = callback_list; cb; cb = cb->_next) {
    8ece:	4b06      	ldr	r3, [pc, #24]	; (8ee8 <bt_conn_security_changed+0x28>)
    8ed0:	681d      	ldr	r5, [r3, #0]
    8ed2:	b905      	cbnz	r5, 8ed6 <bt_conn_security_changed+0x16>
}
    8ed4:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->security_changed) {
    8ed6:	696b      	ldr	r3, [r5, #20]
    8ed8:	b11b      	cbz	r3, 8ee2 <bt_conn_security_changed+0x22>
			cb->security_changed(conn, conn->sec_level, err);
    8eda:	7a61      	ldrb	r1, [r4, #9]
    8edc:	4632      	mov	r2, r6
    8ede:	4620      	mov	r0, r4
    8ee0:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    8ee2:	69ad      	ldr	r5, [r5, #24]
    8ee4:	e7f5      	b.n	8ed2 <bt_conn_security_changed+0x12>
    8ee6:	bf00      	nop
    8ee8:	20001850 	.word	0x20001850

00008eec <bt_conn_cb_register>:
	cb->_next = callback_list;
    8eec:	4b02      	ldr	r3, [pc, #8]	; (8ef8 <bt_conn_cb_register+0xc>)
    8eee:	681a      	ldr	r2, [r3, #0]
    8ef0:	6182      	str	r2, [r0, #24]
	callback_list = cb;
    8ef2:	6018      	str	r0, [r3, #0]
}
    8ef4:	4770      	bx	lr
    8ef6:	bf00      	nop
    8ef8:	20001850 	.word	0x20001850

00008efc <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
    8efc:	b570      	push	{r4, r5, r6, lr}
    8efe:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    8f00:	f100 0638 	add.w	r6, r0, #56	; 0x38
    8f04:	2200      	movs	r2, #0
    8f06:	2300      	movs	r3, #0
    8f08:	4630      	mov	r0, r6
    8f0a:	f019 fe0b 	bl	22b24 <net_buf_get>
    8f0e:	4605      	mov	r5, r0
    8f10:	b958      	cbnz	r0, 8f2a <conn_cleanup+0x2e>
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);

	bt_conn_reset_rx_state(conn);
    8f12:	4620      	mov	r0, r4
    8f14:	f018 fa90 	bl	21438 <bt_conn_reset_rx_state>
	return k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
    8f18:	f104 0158 	add.w	r1, r4, #88	; 0x58
    8f1c:	4807      	ldr	r0, [pc, #28]	; (8f3c <conn_cleanup+0x40>)

	k_delayed_work_submit(&conn->deferred_work, K_NO_WAIT);
}
    8f1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8f22:	2200      	movs	r2, #0
    8f24:	2300      	movs	r3, #0
    8f26:	f015 b8b7 	b.w	1e098 <k_work_reschedule_for_queue>
		if (tx_data(buf)->tx) {
    8f2a:	6968      	ldr	r0, [r5, #20]
    8f2c:	b108      	cbz	r0, 8f32 <conn_cleanup+0x36>
			tx_free(tx_data(buf)->tx);
    8f2e:	f7ff fe95 	bl	8c5c <tx_free>
		net_buf_unref(buf);
    8f32:	4628      	mov	r0, r5
    8f34:	f011 fb62 	bl	1a5fc <net_buf_unref>
    8f38:	e7e4      	b.n	8f04 <conn_cleanup+0x8>
    8f3a:	bf00      	nop
    8f3c:	200015c0 	.word	0x200015c0

00008f40 <bt_conn_recv>:
{
    8f40:	b570      	push	{r4, r5, r6, lr}
    8f42:	4616      	mov	r6, r2
    8f44:	4604      	mov	r4, r0
    8f46:	460d      	mov	r5, r1
	tx_notify(conn);
    8f48:	f018 f9f4 	bl	21334 <tx_notify>
	switch (flags) {
    8f4c:	2e01      	cmp	r6, #1
    8f4e:	d02e      	beq.n	8fae <bt_conn_recv+0x6e>
    8f50:	2e02      	cmp	r6, #2
    8f52:	d15b      	bne.n	900c <bt_conn_recv+0xcc>
		if (conn->rx) {
    8f54:	6923      	ldr	r3, [r4, #16]
    8f56:	b163      	cbz	r3, 8f72 <bt_conn_recv+0x32>
    8f58:	4b37      	ldr	r3, [pc, #220]	; (9038 <bt_conn_recv+0xf8>)
    8f5a:	4938      	ldr	r1, [pc, #224]	; (903c <bt_conn_recv+0xfc>)
			BT_ERR("Unexpected first L2CAP frame");
    8f5c:	4838      	ldr	r0, [pc, #224]	; (9040 <bt_conn_recv+0x100>)
    8f5e:	1ac9      	subs	r1, r1, r3
    8f60:	08c9      	lsrs	r1, r1, #3
    8f62:	0189      	lsls	r1, r1, #6
    8f64:	f041 0101 	orr.w	r1, r1, #1
    8f68:	f016 f8b2 	bl	1f0d0 <log_0>
			bt_conn_reset_rx_state(conn);
    8f6c:	4620      	mov	r0, r4
    8f6e:	f018 fa63 	bl	21438 <bt_conn_reset_rx_state>
		conn->rx = buf;
    8f72:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
    8f74:	6923      	ldr	r3, [r4, #16]
    8f76:	8999      	ldrh	r1, [r3, #12]
    8f78:	2901      	cmp	r1, #1
    8f7a:	d95b      	bls.n	9034 <bt_conn_recv+0xf4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
    8f7c:	6898      	ldr	r0, [r3, #8]
	return ((uint16_t)src[1] << 8) | src[0];
    8f7e:	7845      	ldrb	r5, [r0, #1]
    8f80:	7802      	ldrb	r2, [r0, #0]
    8f82:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    8f86:	3204      	adds	r2, #4
    8f88:	b292      	uxth	r2, r2
	if (conn->rx->len < acl_total_len) {
    8f8a:	428a      	cmp	r2, r1
    8f8c:	d852      	bhi.n	9034 <bt_conn_recv+0xf4>
	if (conn->rx->len > acl_total_len) {
    8f8e:	d249      	bcs.n	9024 <bt_conn_recv+0xe4>
    8f90:	4829      	ldr	r0, [pc, #164]	; (9038 <bt_conn_recv+0xf8>)
    8f92:	4b2a      	ldr	r3, [pc, #168]	; (903c <bt_conn_recv+0xfc>)
    8f94:	1a1b      	subs	r3, r3, r0
    8f96:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL len mismatch (%u > %u)",
    8f98:	019b      	lsls	r3, r3, #6
    8f9a:	482a      	ldr	r0, [pc, #168]	; (9044 <bt_conn_recv+0x104>)
    8f9c:	f043 0301 	orr.w	r3, r3, #1
    8fa0:	f016 f8b7 	bl	1f112 <log_2>
		bt_conn_reset_rx_state(conn);
    8fa4:	4620      	mov	r0, r4
}
    8fa6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
    8faa:	f018 ba45 	b.w	21438 <bt_conn_reset_rx_state>
		if (!conn->rx) {
    8fae:	6920      	ldr	r0, [r4, #16]
    8fb0:	b968      	cbnz	r0, 8fce <bt_conn_recv+0x8e>
    8fb2:	4922      	ldr	r1, [pc, #136]	; (903c <bt_conn_recv+0xfc>)
    8fb4:	4b20      	ldr	r3, [pc, #128]	; (9038 <bt_conn_recv+0xf8>)
			BT_ERR("Unexpected L2CAP continuation");
    8fb6:	4824      	ldr	r0, [pc, #144]	; (9048 <bt_conn_recv+0x108>)
    8fb8:	1ac9      	subs	r1, r1, r3
    8fba:	08c9      	lsrs	r1, r1, #3
    8fbc:	0189      	lsls	r1, r1, #6
    8fbe:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Not enough buffer space for L2CAP data");
    8fc2:	f016 f885 	bl	1f0d0 <log_0>
			bt_conn_reset_rx_state(conn);
    8fc6:	4620      	mov	r0, r4
    8fc8:	f018 fa36 	bl	21438 <bt_conn_reset_rx_state>
    8fcc:	e001      	b.n	8fd2 <bt_conn_recv+0x92>
		if (!buf->len) {
    8fce:	89ae      	ldrh	r6, [r5, #12]
    8fd0:	b926      	cbnz	r6, 8fdc <bt_conn_recv+0x9c>
			net_buf_unref(buf);
    8fd2:	4628      	mov	r0, r5
}
    8fd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
    8fd8:	f011 bb10 	b.w	1a5fc <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
    8fdc:	3008      	adds	r0, #8
    8fde:	f019 fe2e 	bl	22c3e <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    8fe2:	4286      	cmp	r6, r0
    8fe4:	d908      	bls.n	8ff8 <bt_conn_recv+0xb8>
    8fe6:	4915      	ldr	r1, [pc, #84]	; (903c <bt_conn_recv+0xfc>)
    8fe8:	4b13      	ldr	r3, [pc, #76]	; (9038 <bt_conn_recv+0xf8>)
			BT_ERR("Not enough buffer space for L2CAP data");
    8fea:	4818      	ldr	r0, [pc, #96]	; (904c <bt_conn_recv+0x10c>)
    8fec:	1ac9      	subs	r1, r1, r3
    8fee:	08c9      	lsrs	r1, r1, #3
    8ff0:	0189      	lsls	r1, r1, #6
    8ff2:	f041 0101 	orr.w	r1, r1, #1
    8ff6:	e7e4      	b.n	8fc2 <bt_conn_recv+0x82>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    8ff8:	6920      	ldr	r0, [r4, #16]
    8ffa:	89aa      	ldrh	r2, [r5, #12]
    8ffc:	68a9      	ldr	r1, [r5, #8]
    8ffe:	3008      	adds	r0, #8
    9000:	f019 fde7 	bl	22bd2 <net_buf_simple_add_mem>
		net_buf_unref(buf);
    9004:	4628      	mov	r0, r5
    9006:	f011 faf9 	bl	1a5fc <net_buf_unref>
		break;
    900a:	e7b3      	b.n	8f74 <bt_conn_recv+0x34>
    900c:	4a0a      	ldr	r2, [pc, #40]	; (9038 <bt_conn_recv+0xf8>)
    900e:	4b0b      	ldr	r3, [pc, #44]	; (903c <bt_conn_recv+0xfc>)
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    9010:	480f      	ldr	r0, [pc, #60]	; (9050 <bt_conn_recv+0x110>)
    9012:	1a9b      	subs	r3, r3, r2
    9014:	08db      	lsrs	r3, r3, #3
    9016:	019b      	lsls	r3, r3, #6
    9018:	f043 0201 	orr.w	r2, r3, #1
    901c:	4631      	mov	r1, r6
    901e:	f016 f864 	bl	1f0ea <log_1>
		bt_conn_reset_rx_state(conn);
    9022:	e7d0      	b.n	8fc6 <bt_conn_recv+0x86>
	conn->rx = NULL;
    9024:	2200      	movs	r2, #0
    9026:	6122      	str	r2, [r4, #16]
	bt_l2cap_recv(conn, buf);
    9028:	4620      	mov	r0, r4
    902a:	4619      	mov	r1, r3
}
    902c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
    9030:	f000 bd12 	b.w	9a58 <bt_l2cap_recv>
}
    9034:	bd70      	pop	{r4, r5, r6, pc}
    9036:	bf00      	nop
    9038:	00023ed8 	.word	0x00023ed8
    903c:	00023ef0 	.word	0x00023ef0
    9040:	00026e45 	.word	0x00026e45
    9044:	00026ec5 	.word	0x00026ec5
    9048:	00026e62 	.word	0x00026e62
    904c:	00026e80 	.word	0x00026e80
    9050:	00026ea7 	.word	0x00026ea7

00009054 <bt_conn_send_cb>:
{
    9054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9058:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
    905a:	7b43      	ldrb	r3, [r0, #13]
    905c:	2b07      	cmp	r3, #7
{
    905e:	4606      	mov	r6, r0
    9060:	460d      	mov	r5, r1
    9062:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
    9064:	d00f      	beq.n	9086 <bt_conn_send_cb+0x32>
    9066:	4b2a      	ldr	r3, [pc, #168]	; (9110 <bt_conn_send_cb+0xbc>)
    9068:	492a      	ldr	r1, [pc, #168]	; (9114 <bt_conn_send_cb+0xc0>)
		BT_ERR("not connected!");
    906a:	482b      	ldr	r0, [pc, #172]	; (9118 <bt_conn_send_cb+0xc4>)
    906c:	1ac9      	subs	r1, r1, r3
    906e:	08c9      	lsrs	r1, r1, #3
    9070:	0189      	lsls	r1, r1, #6
    9072:	f041 0101 	orr.w	r1, r1, #1
    9076:	f016 f82b 	bl	1f0d0 <log_0>
		net_buf_unref(buf);
    907a:	4628      	mov	r0, r5
    907c:	f011 fabe 	bl	1a5fc <net_buf_unref>
			return -ENOTCONN;
    9080:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    9084:	e020      	b.n	90c8 <bt_conn_send_cb+0x74>
	if (cb) {
    9086:	2a00      	cmp	r2, #0
    9088:	d040      	beq.n	910c <bt_conn_send_cb+0xb8>
	return z_impl_k_current_get();
    908a:	f014 fd15 	bl	1dab8 <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    908e:	4b23      	ldr	r3, [pc, #140]	; (911c <bt_conn_send_cb+0xc8>)
    9090:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    9092:	4823      	ldr	r0, [pc, #140]	; (9120 <bt_conn_send_cb+0xcc>)
    9094:	bf07      	ittee	eq
    9096:	2200      	moveq	r2, #0
    9098:	2300      	moveq	r3, #0
    909a:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    909e:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    90a2:	f014 f9cd 	bl	1d440 <z_impl_k_queue_get>
    90a6:	4604      	mov	r4, r0
		if (!tx) {
    90a8:	b980      	cbnz	r0, 90cc <bt_conn_send_cb+0x78>
    90aa:	4b19      	ldr	r3, [pc, #100]	; (9110 <bt_conn_send_cb+0xbc>)
    90ac:	4919      	ldr	r1, [pc, #100]	; (9114 <bt_conn_send_cb+0xc0>)
			BT_ERR("Unable to allocate TX context");
    90ae:	481d      	ldr	r0, [pc, #116]	; (9124 <bt_conn_send_cb+0xd0>)
    90b0:	1ac9      	subs	r1, r1, r3
    90b2:	08c9      	lsrs	r1, r1, #3
    90b4:	0189      	lsls	r1, r1, #6
    90b6:	f041 0101 	orr.w	r1, r1, #1
    90ba:	f016 f809 	bl	1f0d0 <log_0>
			net_buf_unref(buf);
    90be:	4628      	mov	r0, r5
    90c0:	f011 fa9c 	bl	1a5fc <net_buf_unref>
			return -ENOBUFS;
    90c4:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    90c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
    90cc:	7b73      	ldrb	r3, [r6, #13]
    90ce:	2b07      	cmp	r3, #7
    90d0:	d010      	beq.n	90f4 <bt_conn_send_cb+0xa0>
    90d2:	4b0f      	ldr	r3, [pc, #60]	; (9110 <bt_conn_send_cb+0xbc>)
    90d4:	490f      	ldr	r1, [pc, #60]	; (9114 <bt_conn_send_cb+0xc0>)
			BT_WARN("Disconnected while allocating context");
    90d6:	4814      	ldr	r0, [pc, #80]	; (9128 <bt_conn_send_cb+0xd4>)
    90d8:	1ac9      	subs	r1, r1, r3
    90da:	08c9      	lsrs	r1, r1, #3
    90dc:	0189      	lsls	r1, r1, #6
    90de:	f041 0102 	orr.w	r1, r1, #2
    90e2:	f015 fff5 	bl	1f0d0 <log_0>
			net_buf_unref(buf);
    90e6:	4628      	mov	r0, r5
    90e8:	f011 fa88 	bl	1a5fc <net_buf_unref>
			tx_free(tx);
    90ec:	4620      	mov	r0, r4
    90ee:	f7ff fdb5 	bl	8c5c <tx_free>
    90f2:	e7c5      	b.n	9080 <bt_conn_send_cb+0x2c>
		tx->pending_no_cb = 0U;
    90f4:	2300      	movs	r3, #0
		tx->user_data = user_data;
    90f6:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
    90fa:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    90fc:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
    90fe:	f106 0038 	add.w	r0, r6, #56	; 0x38
    9102:	4629      	mov	r1, r5
    9104:	f019 fd2c 	bl	22b60 <net_buf_put>
	return 0;
    9108:	2000      	movs	r0, #0
    910a:	e7dd      	b.n	90c8 <bt_conn_send_cb+0x74>
		tx_data(buf)->tx = NULL;
    910c:	614a      	str	r2, [r1, #20]
    910e:	e7f6      	b.n	90fe <bt_conn_send_cb+0xaa>
    9110:	00023ed8 	.word	0x00023ed8
    9114:	00023ef0 	.word	0x00023ef0
    9118:	00026ee0 	.word	0x00026ee0
    911c:	200015c0 	.word	0x200015c0
    9120:	20000960 	.word	0x20000960
    9124:	00026eef 	.word	0x00026eef
    9128:	00026f0d 	.word	0x00026f0d

0000912c <bt_conn_prepare_events>:

	return 0;
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
    912c:	b538      	push	{r3, r4, r5, lr}
	int i, ev_count = 0;
	struct bt_conn *conn;

	BT_DBG("");

	conn_change.signaled = 0U;
    912e:	4b1b      	ldr	r3, [pc, #108]	; (919c <bt_conn_prepare_events+0x70>)
    9130:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    9132:	2101      	movs	r1, #1
	conn_change.signaled = 0U;
    9134:	609a      	str	r2, [r3, #8]
{
    9136:	4604      	mov	r4, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    9138:	f01a fd2a 	bl	23b90 <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    913c:	f3bf 8f5b 	dmb	ish
    9140:	4b17      	ldr	r3, [pc, #92]	; (91a0 <bt_conn_prepare_events+0x74>)
    9142:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
    9146:	f3bf 8f5b 	dmb	ish
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		conn = &acl_conns[i];

		if (!conn_prepare_events(conn, &events[ev_count])) {
    914a:	f104 0014 	add.w	r0, r4, #20
    914e:	4619      	mov	r1, r3
	if (!atomic_get(&conn->ref)) {
    9150:	b90a      	cbnz	r2, 9156 <bt_conn_prepare_events+0x2a>
		conn_cleanup(conn);
    9152:	2001      	movs	r0, #1
		}
	}
#endif

	return ev_count;
}
    9154:	bd38      	pop	{r3, r4, r5, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
    9156:	7b5a      	ldrb	r2, [r3, #13]
    9158:	b99a      	cbnz	r2, 9182 <bt_conn_prepare_events+0x56>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    915a:	f3bf 8f5b 	dmb	ish
    915e:	1d1a      	adds	r2, r3, #4
    9160:	e852 5f00 	ldrex	r5, [r2]
    9164:	f025 0c40 	bic.w	ip, r5, #64	; 0x40
    9168:	e842 ce00 	strex	lr, ip, [r2]
    916c:	f1be 0f00 	cmp.w	lr, #0
    9170:	d1f6      	bne.n	9160 <bt_conn_prepare_events+0x34>
    9172:	f3bf 8f5b 	dmb	ish
    9176:	066a      	lsls	r2, r5, #25
    9178:	d503      	bpl.n	9182 <bt_conn_prepare_events+0x56>
		conn_cleanup(conn);
    917a:	4618      	mov	r0, r3
    917c:	f7ff febe 	bl	8efc <conn_cleanup>
    9180:	e7e7      	b.n	9152 <bt_conn_prepare_events+0x26>
	if (conn->state != BT_CONN_CONNECTED) {
    9182:	7b4b      	ldrb	r3, [r1, #13]
    9184:	2b07      	cmp	r3, #7
    9186:	d1e4      	bne.n	9152 <bt_conn_prepare_events+0x26>
	k_poll_event_init(&events[0],
    9188:	4b06      	ldr	r3, [pc, #24]	; (91a4 <bt_conn_prepare_events+0x78>)
    918a:	2200      	movs	r2, #0
    918c:	2104      	movs	r1, #4
    918e:	f01a fcff 	bl	23b90 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    9192:	2301      	movs	r3, #1
    9194:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
    9198:	2002      	movs	r0, #2
	return ev_count;
    919a:	e7db      	b.n	9154 <bt_conn_prepare_events+0x28>
    919c:	20000244 	.word	0x20000244
    91a0:	20000db8 	.word	0x20000db8
    91a4:	20000df0 	.word	0x20000df0

000091a8 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
    91a8:	b570      	push	{r4, r5, r6, lr}
    91aa:	4606      	mov	r6, r0
    91ac:	460d      	mov	r5, r1
	conn = bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
    91ae:	4811      	ldr	r0, [pc, #68]	; (91f4 <bt_conn_add_le+0x4c>)
    91b0:	2101      	movs	r1, #1
    91b2:	f018 f8e5 	bl	21380 <bt_conn_new>
	if (!conn) {
    91b6:	4604      	mov	r4, r0
    91b8:	b1c8      	cbz	r0, 91ee <bt_conn_add_le+0x46>
	k_work_init_delayable(&work->work, handler);
    91ba:	490f      	ldr	r1, [pc, #60]	; (91f8 <bt_conn_add_le+0x50>)
    91bc:	3058      	adds	r0, #88	; 0x58
    91be:	f01a fafe 	bl	237be <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
    91c2:	490e      	ldr	r1, [pc, #56]	; (91fc <bt_conn_add_le+0x54>)
    91c4:	f104 0028 	add.w	r0, r4, #40	; 0x28
    91c8:	f01a fad3 	bl	23772 <k_work_init>

	if (!conn) {
		return NULL;
	}

	conn->id = id;
    91cc:	7226      	strb	r6, [r4, #8]
    91ce:	682b      	ldr	r3, [r5, #0]
    91d0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    91d4:	88ab      	ldrh	r3, [r5, #4]
    91d6:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
    91da:	79ab      	ldrb	r3, [r5, #6]
    91dc:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
    91e0:	2301      	movs	r3, #1
    91e2:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
    91e4:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
    91e6:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    91e8:	4b05      	ldr	r3, [pc, #20]	; (9200 <bt_conn_add_le+0x58>)
    91ea:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
    91ee:	4620      	mov	r0, r4
    91f0:	bd70      	pop	{r4, r5, r6, pc}
    91f2:	bf00      	nop
    91f4:	20000db8 	.word	0x20000db8
    91f8:	00009531 	.word	0x00009531
    91fc:	0002137b 	.word	0x0002137b
    9200:	00280018 	.word	0x00280018

00009204 <bt_conn_lookup_handle>:
		break;
	}
}

struct bt_conn *bt_conn_lookup_handle(uint16_t handle)
{
    9204:	4602      	mov	r2, r0
    9206:	b508      	push	{r3, lr}
	struct bt_conn *conn;

	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
    9208:	2101      	movs	r1, #1
    920a:	4803      	ldr	r0, [pc, #12]	; (9218 <bt_conn_lookup_handle+0x14>)
    920c:	f018 f96f 	bl	214ee <conn_lookup_handle>
		return conn;
	}
#endif

	return NULL;
}
    9210:	2800      	cmp	r0, #0
    9212:	bf38      	it	cc
    9214:	2000      	movcc	r0, #0
    9216:	bd08      	pop	{r3, pc}
    9218:	20000db8 	.word	0x20000db8

0000921c <bt_conn_set_state>:
{
    921c:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
    921e:	7b46      	ldrb	r6, [r0, #13]
    9220:	428e      	cmp	r6, r1
{
    9222:	4604      	mov	r4, r0
    9224:	460d      	mov	r5, r1
	if (conn->state == state) {
    9226:	d112      	bne.n	924e <bt_conn_set_state+0x32>
    9228:	4b6b      	ldr	r3, [pc, #428]	; (93d8 <bt_conn_set_state+0x1bc>)
    922a:	4a6c      	ldr	r2, [pc, #432]	; (93dc <bt_conn_set_state+0x1c0>)
		BT_WARN("no transition %s", state2str(state));
    922c:	486c      	ldr	r0, [pc, #432]	; (93e0 <bt_conn_set_state+0x1c4>)
    922e:	2e08      	cmp	r6, #8
    9230:	eba2 0203 	sub.w	r2, r2, r3
    9234:	bf96      	itet	ls
    9236:	4b6b      	ldrls	r3, [pc, #428]	; (93e4 <bt_conn_set_state+0x1c8>)
    9238:	496b      	ldrhi	r1, [pc, #428]	; (93e8 <bt_conn_set_state+0x1cc>)
    923a:	f853 1026 	ldrls.w	r1, [r3, r6, lsl #2]
    923e:	08d2      	lsrs	r2, r2, #3
    9240:	0192      	lsls	r2, r2, #6
    9242:	f042 0202 	orr.w	r2, r2, #2
}
    9246:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
    924a:	f015 bf4e 	b.w	1f0ea <log_1>
	conn->state = state;
    924e:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
    9250:	b90e      	cbnz	r6, 9256 <bt_conn_set_state+0x3a>
		bt_conn_ref(conn);
    9252:	f018 f91a 	bl	2148a <bt_conn_ref>
	switch (conn->state) {
    9256:	7b63      	ldrb	r3, [r4, #13]
    9258:	2b08      	cmp	r3, #8
    925a:	f200 80b2 	bhi.w	93c2 <bt_conn_set_state+0x1a6>
    925e:	e8df f003 	tbb	[pc, r3]
    9262:	053f      	.short	0x053f
    9264:	babababa 	.word	0xbabababa
    9268:	1cba      	.short	0x1cba
    926a:	ba          	.byte	0xba
    926b:	00          	.byte	0x00
	z_impl_k_sem_give(sem);
    926c:	4d5f      	ldr	r5, [pc, #380]	; (93ec <bt_conn_set_state+0x1d0>)
		tx->pending_no_cb = 0U;
    926e:	2600      	movs	r6, #0
	__asm__ volatile(
    9270:	f04f 0320 	mov.w	r3, #32
    9274:	f3ef 8211 	mrs	r2, BASEPRI
    9278:	f383 8811 	msr	BASEPRI, r3
    927c:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    9280:	69e3      	ldr	r3, [r4, #28]
    9282:	2b00      	cmp	r3, #0
    9284:	d07e      	beq.n	9384 <bt_conn_set_state+0x168>
			conn->pending_no_cb--;
    9286:	3b01      	subs	r3, #1
    9288:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    928a:	f382 8811 	msr	BASEPRI, r2
    928e:	f3bf 8f6f 	isb	sy
    9292:	4628      	mov	r0, r5
    9294:	f014 fc8a 	bl	1dbac <z_impl_k_sem_give>
}
    9298:	e7ea      	b.n	9270 <bt_conn_set_state+0x54>
		if (conn->type == BT_CONN_TYPE_SCO) {
    929a:	78a3      	ldrb	r3, [r4, #2]
    929c:	2b04      	cmp	r3, #4
    929e:	f000 809a 	beq.w	93d6 <bt_conn_set_state+0x1ba>
	z_impl_k_queue_init(queue);
    92a2:	f104 0038 	add.w	r0, r4, #56	; 0x38
    92a6:	f01a f867 	bl	23378 <z_impl_k_queue_init>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    92aa:	2100      	movs	r1, #0
    92ac:	4850      	ldr	r0, [pc, #320]	; (93f0 <bt_conn_set_state+0x1d4>)
    92ae:	f015 f991 	bl	1e5d4 <z_impl_k_poll_signal_raise>
	list->head = NULL;
    92b2:	2300      	movs	r3, #0
	list->tail = NULL;
    92b4:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		bt_l2cap_connected(conn);
    92b8:	4620      	mov	r0, r4
    92ba:	f000 faff 	bl	98bc <bt_l2cap_connected>
		notify_connected(conn);
    92be:	4620      	mov	r0, r4
    92c0:	f7ff fcd6 	bl	8c70 <notify_connected>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    92c4:	78e3      	ldrb	r3, [r4, #3]
    92c6:	2b01      	cmp	r3, #1
    92c8:	f040 8085 	bne.w	93d6 <bt_conn_set_state+0x1ba>
	return k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
    92cc:	f104 0158 	add.w	r1, r4, #88	; 0x58
    92d0:	4848      	ldr	r0, [pc, #288]	; (93f4 <bt_conn_set_state+0x1d8>)
}
    92d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    92d6:	f44f 3220 	mov.w	r2, #163840	; 0x28000
    92da:	2300      	movs	r3, #0
    92dc:	f014 bedc 	b.w	1e098 <k_work_reschedule_for_queue>
		if (conn->type == BT_CONN_TYPE_SCO) {
    92e0:	78a3      	ldrb	r3, [r4, #2]
    92e2:	2b04      	cmp	r3, #4
    92e4:	d104      	bne.n	92f0 <bt_conn_set_state+0xd4>
			bt_conn_unref(conn);
    92e6:	4620      	mov	r0, r4
}
    92e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
    92ec:	f018 b8e8 	b.w	214c0 <bt_conn_unref>
		switch (old_state) {
    92f0:	2e08      	cmp	r6, #8
    92f2:	d870      	bhi.n	93d6 <bt_conn_set_state+0x1ba>
    92f4:	a301      	add	r3, pc, #4	; (adr r3, 92fc <bt_conn_set_state+0xe0>)
    92f6:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
    92fa:	bf00      	nop
    92fc:	00009371 	.word	0x00009371
    9300:	00009321 	.word	0x00009321
    9304:	00009363 	.word	0x00009363
    9308:	000092e7 	.word	0x000092e7
    930c:	000092e7 	.word	0x000092e7
    9310:	00009363 	.word	0x00009363
    9314:	00009363 	.word	0x00009363
    9318:	00009371 	.word	0x00009371
    931c:	00009371 	.word	0x00009371
			tx_notify(conn);
    9320:	4620      	mov	r0, r4
    9322:	f018 f807 	bl	21334 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
    9326:	78a3      	ldrb	r3, [r4, #2]
    9328:	2b01      	cmp	r3, #1
    932a:	d107      	bne.n	933c <bt_conn_set_state+0x120>
	bool pending = k_work_delayable_is_pending(&work->work);
    932c:	f104 0558 	add.w	r5, r4, #88	; 0x58
	return k_work_delayable_busy_get(dwork) != 0;
    9330:	4628      	mov	r0, r5
    9332:	f01a fa50 	bl	237d6 <k_work_delayable_busy_get>
	int rc = k_work_cancel_delayable(&work->work);
    9336:	4628      	mov	r0, r5
    9338:	f01a fa61 	bl	237fe <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    933c:	f3bf 8f5b 	dmb	ish
    9340:	3404      	adds	r4, #4
    9342:	e854 3f00 	ldrex	r3, [r4]
    9346:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    934a:	e844 3200 	strex	r2, r3, [r4]
    934e:	2a00      	cmp	r2, #0
    9350:	d1f7      	bne.n	9342 <bt_conn_set_state+0x126>
    9352:	f3bf 8f5b 	dmb	ish
    9356:	4826      	ldr	r0, [pc, #152]	; (93f0 <bt_conn_set_state+0x1d4>)
}
    9358:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    935c:	2100      	movs	r1, #0
    935e:	f015 b939 	b.w	1e5d4 <z_impl_k_poll_signal_raise>
			if (conn->err) {
    9362:	7b23      	ldrb	r3, [r4, #12]
    9364:	2b00      	cmp	r3, #0
    9366:	d0be      	beq.n	92e6 <bt_conn_set_state+0xca>
				notify_connected(conn);
    9368:	4620      	mov	r0, r4
    936a:	f7ff fc81 	bl	8c70 <notify_connected>
    936e:	e7ba      	b.n	92e6 <bt_conn_set_state+0xca>
    9370:	4a1a      	ldr	r2, [pc, #104]	; (93dc <bt_conn_set_state+0x1c0>)
    9372:	4b19      	ldr	r3, [pc, #100]	; (93d8 <bt_conn_set_state+0x1bc>)
			BT_WARN("Invalid (%u) old state", state);
    9374:	4820      	ldr	r0, [pc, #128]	; (93f8 <bt_conn_set_state+0x1dc>)
    9376:	1ad2      	subs	r2, r2, r3
    9378:	08d2      	lsrs	r2, r2, #3
    937a:	0192      	lsls	r2, r2, #6
    937c:	f042 0202 	orr.w	r2, r2, #2
    9380:	4629      	mov	r1, r5
    9382:	e760      	b.n	9246 <bt_conn_set_state+0x2a>
Z_GENLIST_IS_EMPTY(slist)
    9384:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
    9386:	b128      	cbz	r0, 9394 <bt_conn_set_state+0x178>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    9388:	69a1      	ldr	r1, [r4, #24]
    938a:	6803      	ldr	r3, [r0, #0]
	list->head = node;
    938c:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    938e:	4288      	cmp	r0, r1
	list->tail = node;
    9390:	bf08      	it	eq
    9392:	61a3      	streq	r3, [r4, #24]
    9394:	f382 8811 	msr	BASEPRI, r2
    9398:	f3bf 8f6f 	isb	sy
		if (!node) {
    939c:	b1d8      	cbz	r0, 93d6 <bt_conn_set_state+0x1ba>
	__asm__ volatile(
    939e:	f04f 0220 	mov.w	r2, #32
    93a2:	f3ef 8311 	mrs	r3, BASEPRI
    93a6:	f382 8811 	msr	BASEPRI, r2
    93aa:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    93ae:	68c2      	ldr	r2, [r0, #12]
    93b0:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    93b2:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
    93b4:	f383 8811 	msr	BASEPRI, r3
    93b8:	f3bf 8f6f 	isb	sy
		tx_free(tx);
    93bc:	f7ff fc4e 	bl	8c5c <tx_free>
    93c0:	e767      	b.n	9292 <bt_conn_set_state+0x76>
    93c2:	4a06      	ldr	r2, [pc, #24]	; (93dc <bt_conn_set_state+0x1c0>)
    93c4:	4b04      	ldr	r3, [pc, #16]	; (93d8 <bt_conn_set_state+0x1bc>)
		BT_WARN("no valid (%u) state was set", state);
    93c6:	480d      	ldr	r0, [pc, #52]	; (93fc <bt_conn_set_state+0x1e0>)
    93c8:	1ad2      	subs	r2, r2, r3
    93ca:	08d2      	lsrs	r2, r2, #3
    93cc:	0192      	lsls	r2, r2, #6
    93ce:	f042 0202 	orr.w	r2, r2, #2
    93d2:	4629      	mov	r1, r5
    93d4:	e737      	b.n	9246 <bt_conn_set_state+0x2a>
}
    93d6:	bd70      	pop	{r4, r5, r6, pc}
    93d8:	00023ed8 	.word	0x00023ed8
    93dc:	00023ef0 	.word	0x00023ef0
    93e0:	00026f3d 	.word	0x00026f3d
    93e4:	00024620 	.word	0x00024620
    93e8:	00026f33 	.word	0x00026f33
    93ec:	200000d0 	.word	0x200000d0
    93f0:	20000244 	.word	0x20000244
    93f4:	200015c0 	.word	0x200015c0
    93f8:	00026f4e 	.word	0x00026f4e
    93fc:	00026f65 	.word	0x00026f65

00009400 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
    9400:	b570      	push	{r4, r5, r6, lr}
    9402:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    9404:	480c      	ldr	r0, [pc, #48]	; (9438 <bt_conn_lookup_addr_le+0x38>)
{
    9406:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    9408:	f018 f83f 	bl	2148a <bt_conn_ref>

		if (!conn) {
    940c:	4604      	mov	r4, r0
    940e:	b128      	cbz	r0, 941c <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    9410:	7883      	ldrb	r3, [r0, #2]
    9412:	2b01      	cmp	r3, #1
    9414:	d004      	beq.n	9420 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
    9416:	f018 f853 	bl	214c0 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
    941a:	2400      	movs	r4, #0
}
    941c:	4620      	mov	r0, r4
    941e:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
    9420:	4629      	mov	r1, r5
    9422:	4632      	mov	r2, r6
    9424:	f018 f811 	bl	2144a <bt_conn_is_peer_addr_le>
    9428:	4605      	mov	r5, r0
    942a:	2800      	cmp	r0, #0
    942c:	d1f6      	bne.n	941c <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
    942e:	4620      	mov	r0, r4
    9430:	f018 f846 	bl	214c0 <bt_conn_unref>
	return NULL;
    9434:	462c      	mov	r4, r5
			continue;
    9436:	e7f1      	b.n	941c <bt_conn_lookup_addr_le+0x1c>
    9438:	20000db8 	.word	0x20000db8

0000943c <bt_conn_exists_le>:
{
    943c:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
    943e:	f7ff ffdf 	bl	9400 <bt_conn_lookup_addr_le>
	if (conn) {
    9442:	4604      	mov	r4, r0
    9444:	b1a0      	cbz	r0, 9470 <bt_conn_exists_le+0x34>
    9446:	4b0b      	ldr	r3, [pc, #44]	; (9474 <bt_conn_exists_le+0x38>)
    9448:	4a0b      	ldr	r2, [pc, #44]	; (9478 <bt_conn_exists_le+0x3c>)
    944a:	1ad2      	subs	r2, r2, r3
		BT_WARN("Found valid connection in %s state",
    944c:	7b43      	ldrb	r3, [r0, #13]
    944e:	480b      	ldr	r0, [pc, #44]	; (947c <bt_conn_exists_le+0x40>)
    9450:	2b08      	cmp	r3, #8
    9452:	bf96      	itet	ls
    9454:	490a      	ldrls	r1, [pc, #40]	; (9480 <bt_conn_exists_le+0x44>)
    9456:	490b      	ldrhi	r1, [pc, #44]	; (9484 <bt_conn_exists_le+0x48>)
    9458:	f851 1023 	ldrls.w	r1, [r1, r3, lsl #2]
    945c:	08d2      	lsrs	r2, r2, #3
    945e:	0192      	lsls	r2, r2, #6
    9460:	f042 0202 	orr.w	r2, r2, #2
    9464:	f015 fe41 	bl	1f0ea <log_1>
		bt_conn_unref(conn);
    9468:	4620      	mov	r0, r4
    946a:	f018 f829 	bl	214c0 <bt_conn_unref>
		return true;
    946e:	2001      	movs	r0, #1
}
    9470:	bd10      	pop	{r4, pc}
    9472:	bf00      	nop
    9474:	00023ed8 	.word	0x00023ed8
    9478:	00023ef0 	.word	0x00023ef0
    947c:	00026f81 	.word	0x00026f81
    9480:	00024620 	.word	0x00024620
    9484:	00026f33 	.word	0x00026f33

00009488 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
    9488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    948a:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    948c:	480f      	ldr	r0, [pc, #60]	; (94cc <bt_conn_lookup_state_le+0x44>)
{
    948e:	460e      	mov	r6, r1
    9490:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    9492:	f017 fffa 	bl	2148a <bt_conn_ref>

		if (!conn) {
    9496:	4604      	mov	r4, r0
    9498:	b1b0      	cbz	r0, 94c8 <bt_conn_lookup_state_le+0x40>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    949a:	7883      	ldrb	r3, [r0, #2]
    949c:	2b01      	cmp	r3, #1
    949e:	d003      	beq.n	94a8 <bt_conn_lookup_state_le+0x20>
			bt_conn_ref(conn);
    94a0:	f017 fff3 	bl	2148a <bt_conn_ref>
		}

		return conn;
	}

	return NULL;
    94a4:	2400      	movs	r4, #0
			continue;
    94a6:	e00f      	b.n	94c8 <bt_conn_lookup_state_le+0x40>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
    94a8:	b146      	cbz	r6, 94bc <bt_conn_lookup_state_le+0x34>
    94aa:	4632      	mov	r2, r6
    94ac:	4629      	mov	r1, r5
    94ae:	f017 ffcc 	bl	2144a <bt_conn_is_peer_addr_le>
    94b2:	b918      	cbnz	r0, 94bc <bt_conn_lookup_state_le+0x34>
			bt_conn_unref(conn);
    94b4:	4620      	mov	r0, r4
    94b6:	f018 f803 	bl	214c0 <bt_conn_unref>
    94ba:	e7f3      	b.n	94a4 <bt_conn_lookup_state_le+0x1c>
		if (!(conn->state == state && conn->id == id)) {
    94bc:	7b63      	ldrb	r3, [r4, #13]
    94be:	42bb      	cmp	r3, r7
    94c0:	d1f8      	bne.n	94b4 <bt_conn_lookup_state_le+0x2c>
    94c2:	7a23      	ldrb	r3, [r4, #8]
    94c4:	42ab      	cmp	r3, r5
    94c6:	d1f5      	bne.n	94b4 <bt_conn_lookup_state_le+0x2c>
}
    94c8:	4620      	mov	r0, r4
    94ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    94cc:	20000db8 	.word	0x20000db8

000094d0 <send_conn_le_param_update>:
{
    94d0:	b538      	push	{r3, r4, r5, lr}
    94d2:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
    94d4:	4608      	mov	r0, r1
{
    94d6:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    94d8:	f017 fd31 	bl	20f3e <bt_le_conn_params_valid>
    94dc:	b318      	cbz	r0, 9526 <send_conn_le_param_update+0x56>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    94de:	4b13      	ldr	r3, [pc, #76]	; (952c <send_conn_le_param_update+0x5c>)
    94e0:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
    94e4:	0799      	lsls	r1, r3, #30
    94e6:	d407      	bmi.n	94f8 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
    94e8:	78e3      	ldrb	r3, [r4, #3]
    94ea:	b183      	cbz	r3, 950e <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
    94ec:	4629      	mov	r1, r5
    94ee:	4620      	mov	r0, r4
}
    94f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    94f4:	f000 bae8 	b.w	9ac8 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    94f8:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
    94fc:	079a      	lsls	r2, r3, #30
    94fe:	d5f3      	bpl.n	94e8 <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9500:	f3bf 8f5b 	dmb	ish
    9504:	6863      	ldr	r3, [r4, #4]
    9506:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    950a:	055b      	lsls	r3, r3, #21
    950c:	d4ec      	bmi.n	94e8 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
    950e:	4629      	mov	r1, r5
    9510:	4620      	mov	r0, r4
    9512:	f018 f834 	bl	2157e <bt_conn_le_conn_update>
		if (rc == 0) {
    9516:	b928      	cbnz	r0, 9524 <send_conn_le_param_update+0x54>
			conn->le.pending_latency = param->latency;
    9518:	88ab      	ldrh	r3, [r5, #4]
    951a:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
    951e:	88eb      	ldrh	r3, [r5, #6]
    9520:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
    9524:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    9526:	f06f 0015 	mvn.w	r0, #21
    952a:	e7fb      	b.n	9524 <send_conn_le_param_update+0x54>
    952c:	20000000 	.word	0x20000000

00009530 <deferred_work>:
{
    9530:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
    9532:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
    9536:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
    9538:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
    953c:	b993      	cbnz	r3, 9564 <deferred_work+0x34>
		bt_l2cap_disconnected(conn);
    953e:	4630      	mov	r0, r6
    9540:	f018 f87e 	bl	21640 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    9544:	4b1f      	ldr	r3, [pc, #124]	; (95c4 <deferred_work+0x94>)
    9546:	681d      	ldr	r5, [r3, #0]
    9548:	b925      	cbnz	r5, 9554 <deferred_work+0x24>
		bt_conn_unref(conn);
    954a:	4630      	mov	r0, r6
    954c:	f017 ffb8 	bl	214c0 <bt_conn_unref>
}
    9550:	b002      	add	sp, #8
    9552:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->disconnected) {
    9554:	686b      	ldr	r3, [r5, #4]
    9556:	b11b      	cbz	r3, 9560 <deferred_work+0x30>
			cb->disconnected(conn, conn->err);
    9558:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
    955c:	4630      	mov	r0, r6
    955e:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    9560:	69ad      	ldr	r5, [r5, #24]
    9562:	e7f1      	b.n	9548 <deferred_work+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
    9564:	f810 3c56 	ldrb.w	r3, [r0, #-86]
    9568:	2b01      	cmp	r3, #1
    956a:	d1f1      	bne.n	9550 <deferred_work+0x20>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    956c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
    9570:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
    9574:	e855 3f00 	ldrex	r3, [r5]
    9578:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    957c:	e845 2100 	strex	r1, r2, [r5]
    9580:	2900      	cmp	r1, #0
    9582:	d1f7      	bne.n	9574 <deferred_work+0x44>
    9584:	f3bf 8f5b 	dmb	ish
    9588:	059b      	lsls	r3, r3, #22
    958a:	d514      	bpl.n	95b6 <deferred_work+0x86>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    958c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    958e:	9300      	str	r3, [sp, #0]
    9590:	6d23      	ldr	r3, [r4, #80]	; 0x50
    9592:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
    9594:	4669      	mov	r1, sp
    9596:	4630      	mov	r0, r6
    9598:	f7ff ff9a 	bl	94d0 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    959c:	f3bf 8f5b 	dmb	ish
    95a0:	e855 3f00 	ldrex	r3, [r5]
    95a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    95a8:	e845 3200 	strex	r2, r3, [r5]
    95ac:	2a00      	cmp	r2, #0
    95ae:	d1f7      	bne.n	95a0 <deferred_work+0x70>
    95b0:	f3bf 8f5b 	dmb	ish
    95b4:	e7cc      	b.n	9550 <deferred_work+0x20>
		param = BT_LE_CONN_PARAM(
    95b6:	4a04      	ldr	r2, [pc, #16]	; (95c8 <deferred_work+0x98>)
    95b8:	6810      	ldr	r0, [r2, #0]
    95ba:	6851      	ldr	r1, [r2, #4]
    95bc:	466b      	mov	r3, sp
    95be:	c303      	stmia	r3!, {r0, r1}
    95c0:	e7e8      	b.n	9594 <deferred_work+0x64>
    95c2:	bf00      	nop
    95c4:	20001850 	.word	0x20001850
    95c8:	0002412e 	.word	0x0002412e

000095cc <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
    95cc:	b538      	push	{r3, r4, r5, lr}
    95ce:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
    95d0:	490c      	ldr	r1, [pc, #48]	; (9604 <bt_conn_create_pdu_timeout+0x38>)
    95d2:	2800      	cmp	r0, #0
    95d4:	bf08      	it	eq
    95d6:	4608      	moveq	r0, r1
    95d8:	f019 fa9f 	bl	22b1a <net_buf_alloc_fixed>
#else
		buf = net_buf_alloc(pool, timeout);
#endif
	}

	if (!buf) {
    95dc:	4604      	mov	r4, r0
    95de:	b958      	cbnz	r0, 95f8 <bt_conn_create_pdu_timeout+0x2c>
    95e0:	4909      	ldr	r1, [pc, #36]	; (9608 <bt_conn_create_pdu_timeout+0x3c>)
    95e2:	4b0a      	ldr	r3, [pc, #40]	; (960c <bt_conn_create_pdu_timeout+0x40>)
		BT_WARN("Unable to allocate buffer within timeout");
    95e4:	480a      	ldr	r0, [pc, #40]	; (9610 <bt_conn_create_pdu_timeout+0x44>)
    95e6:	1ac9      	subs	r1, r1, r3
    95e8:	08c9      	lsrs	r1, r1, #3
    95ea:	0189      	lsls	r1, r1, #6
    95ec:	f041 0102 	orr.w	r1, r1, #2
    95f0:	f015 fd6e 	bl	1f0d0 <log_0>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
    95f4:	4620      	mov	r0, r4
    95f6:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_simple_reserve(&buf->b, reserve);
    95f8:	1d29      	adds	r1, r5, #4
    95fa:	3008      	adds	r0, #8
    95fc:	f019 faac 	bl	22b58 <net_buf_simple_reserve>
	return buf;
    9600:	e7f8      	b.n	95f4 <bt_conn_create_pdu_timeout+0x28>
    9602:	bf00      	nop
    9604:	20000990 	.word	0x20000990
    9608:	00023ef0 	.word	0x00023ef0
    960c:	00023ed8 	.word	0x00023ed8
    9610:	00026fa4 	.word	0x00026fa4

00009614 <bt_conn_create_frag_timeout>:
{
    9614:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    9616:	4801      	ldr	r0, [pc, #4]	; (961c <bt_conn_create_frag_timeout+0x8>)
    9618:	f7ff bfd8 	b.w	95cc <bt_conn_create_pdu_timeout>
    961c:	200009e0 	.word	0x200009e0

00009620 <create_frag.isra.0>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    9620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9624:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
    9626:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    962a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    962e:	2000      	movs	r0, #0
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    9630:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
    9632:	f7ff ffef 	bl	9614 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    9636:	7833      	ldrb	r3, [r6, #0]
    9638:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
    963a:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    963c:	f04f 0600 	mov.w	r6, #0
    9640:	d005      	beq.n	964e <create_frag.isra.0+0x2e>
		net_buf_unref(frag);
    9642:	f010 ffdb 	bl	1a5fc <net_buf_unref>
		return NULL;
    9646:	4635      	mov	r5, r6
}
    9648:	4628      	mov	r0, r5
    964a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
    964e:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
    9650:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
    9654:	4e0c      	ldr	r6, [pc, #48]	; (9688 <create_frag.isra.0+0x68>)
    9656:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    9658:	f8b6 80cc 	ldrh.w	r8, [r6, #204]	; 0xcc
    965c:	f019 faef 	bl	22c3e <net_buf_simple_tailroom>
    9660:	4580      	cmp	r8, r0
    9662:	d20c      	bcs.n	967e <create_frag.isra.0+0x5e>
	return bt_dev.le.acl_mtu;
    9664:	f8b6 60cc 	ldrh.w	r6, [r6, #204]	; 0xcc
	return net_buf_simple_add_mem(&buf->b, mem, len);
    9668:	f854 1f08 	ldr.w	r1, [r4, #8]!
    966c:	4632      	mov	r2, r6
    966e:	4638      	mov	r0, r7
    9670:	f019 faaf 	bl	22bd2 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
    9674:	4631      	mov	r1, r6
    9676:	4620      	mov	r0, r4
    9678:	f019 fac5 	bl	22c06 <net_buf_simple_pull>
    967c:	e7e4      	b.n	9648 <create_frag.isra.0+0x28>
	return net_buf_simple_tailroom(&buf->b);
    967e:	4638      	mov	r0, r7
    9680:	f019 fadd 	bl	22c3e <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    9684:	b286      	uxth	r6, r0
    9686:	e7ef      	b.n	9668 <create_frag.isra.0+0x48>
    9688:	20000000 	.word	0x20000000

0000968c <bt_conn_process_tx>:
{
    968c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    968e:	7b43      	ldrb	r3, [r0, #13]
{
    9690:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    9692:	b993      	cbnz	r3, 96ba <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9694:	f3bf 8f5b 	dmb	ish
    9698:	1d03      	adds	r3, r0, #4
    969a:	e853 2f00 	ldrex	r2, [r3]
    969e:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    96a2:	e843 1400 	strex	r4, r1, [r3]
    96a6:	2c00      	cmp	r4, #0
    96a8:	d1f7      	bne.n	969a <bt_conn_process_tx+0xe>
    96aa:	f3bf 8f5b 	dmb	ish
    96ae:	0653      	lsls	r3, r2, #25
    96b0:	d503      	bpl.n	96ba <bt_conn_process_tx+0x2e>
}
    96b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    96b6:	f7ff bc21 	b.w	8efc <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    96ba:	2200      	movs	r2, #0
    96bc:	2300      	movs	r3, #0
    96be:	f105 0038 	add.w	r0, r5, #56	; 0x38
    96c2:	f019 fa2f 	bl	22b24 <net_buf_get>
	BT_ASSERT(buf);
    96c6:	4604      	mov	r4, r0
    96c8:	b960      	cbnz	r0, 96e4 <bt_conn_process_tx+0x58>
    96ca:	4a20      	ldr	r2, [pc, #128]	; (974c <bt_conn_process_tx+0xc0>)
    96cc:	4920      	ldr	r1, [pc, #128]	; (9750 <bt_conn_process_tx+0xc4>)
    96ce:	4821      	ldr	r0, [pc, #132]	; (9754 <bt_conn_process_tx+0xc8>)
    96d0:	f240 5361 	movw	r3, #1377	; 0x561
    96d4:	f015 f922 	bl	1e91c <printk>
    96d8:	4040      	eors	r0, r0
    96da:	f380 8811 	msr	BASEPRI, r0
    96de:	f04f 0003 	mov.w	r0, #3
    96e2:	df02      	svc	2
	return bt_dev.le.acl_mtu;
    96e4:	4f1c      	ldr	r7, [pc, #112]	; (9758 <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
    96e6:	89a1      	ldrh	r1, [r4, #12]
    96e8:	f8b7 20cc 	ldrh.w	r2, [r7, #204]	; 0xcc
    96ec:	4291      	cmp	r1, r2
    96ee:	d807      	bhi.n	9700 <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
    96f0:	2300      	movs	r3, #0
    96f2:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
    96f4:	4621      	mov	r1, r4
    96f6:	4628      	mov	r0, r5
    96f8:	f7ff fad0 	bl	8c9c <send_frag>
	if (!send_buf(conn, buf)) {
    96fc:	b140      	cbz	r0, 9710 <bt_conn_process_tx+0x84>
}
    96fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
    9700:	f105 060d 	add.w	r6, r5, #13
    9704:	4621      	mov	r1, r4
    9706:	4630      	mov	r0, r6
    9708:	f7ff ff8a 	bl	9620 <create_frag.isra.0>
	if (!frag) {
    970c:	4601      	mov	r1, r0
    970e:	b920      	cbnz	r0, 971a <bt_conn_process_tx+0x8e>
		net_buf_unref(buf);
    9710:	4620      	mov	r0, r4
}
    9712:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    9716:	f010 bf71 	b.w	1a5fc <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
    971a:	2301      	movs	r3, #1
    971c:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    971e:	4628      	mov	r0, r5
    9720:	f7ff fabc 	bl	8c9c <send_frag>
    9724:	2800      	cmp	r0, #0
    9726:	d0f3      	beq.n	9710 <bt_conn_process_tx+0x84>
	while (buf->len > conn_mtu(conn)) {
    9728:	89a2      	ldrh	r2, [r4, #12]
    972a:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
    972e:	429a      	cmp	r2, r3
    9730:	d802      	bhi.n	9738 <bt_conn_process_tx+0xac>
	return send_frag(conn, buf, FRAG_END, false);
    9732:	2300      	movs	r3, #0
    9734:	2203      	movs	r2, #3
    9736:	e7dd      	b.n	96f4 <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
    9738:	4621      	mov	r1, r4
    973a:	4630      	mov	r0, r6
    973c:	f7ff ff70 	bl	9620 <create_frag.isra.0>
		if (!frag) {
    9740:	4601      	mov	r1, r0
    9742:	2800      	cmp	r0, #0
    9744:	d0e4      	beq.n	9710 <bt_conn_process_tx+0x84>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    9746:	2301      	movs	r3, #1
    9748:	461a      	mov	r2, r3
    974a:	e7e8      	b.n	971e <bt_conn_process_tx+0x92>
    974c:	00026fcd 	.word	0x00026fcd
    9750:	000263b8 	.word	0x000263b8
    9754:	000266a9 	.word	0x000266a9
    9758:	20000000 	.word	0x20000000

0000975c <bt_conn_auth_cb_register>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
    975c:	4b0c      	ldr	r3, [pc, #48]	; (9790 <bt_conn_auth_cb_register+0x34>)
    975e:	b908      	cbnz	r0, 9764 <bt_conn_auth_cb_register+0x8>
		bt_auth = NULL;
    9760:	6018      	str	r0, [r3, #0]
		return 0;
    9762:	4770      	bx	lr
	}

	if (bt_auth) {
    9764:	681a      	ldr	r2, [r3, #0]
    9766:	b962      	cbnz	r2, 9782 <bt_conn_auth_cb_register+0x26>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
    9768:	6902      	ldr	r2, [r0, #16]
    976a:	b93a      	cbnz	r2, 977c <bt_conn_auth_cb_register+0x20>
    976c:	6802      	ldr	r2, [r0, #0]
    976e:	b95a      	cbnz	r2, 9788 <bt_conn_auth_cb_register+0x2c>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
    9770:	6842      	ldr	r2, [r0, #4]
    9772:	b94a      	cbnz	r2, 9788 <bt_conn_auth_cb_register+0x2c>
    9774:	6882      	ldr	r2, [r0, #8]
    9776:	b93a      	cbnz	r2, 9788 <bt_conn_auth_cb_register+0x2c>
    9778:	6942      	ldr	r2, [r0, #20]
    977a:	b92a      	cbnz	r2, 9788 <bt_conn_auth_cb_register+0x2c>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
    977c:	6018      	str	r0, [r3, #0]
	return 0;
    977e:	2000      	movs	r0, #0
    9780:	4770      	bx	lr
		return -EALREADY;
    9782:	f06f 0077 	mvn.w	r0, #119	; 0x77
    9786:	4770      	bx	lr
		return -EINVAL;
    9788:	f06f 0015 	mvn.w	r0, #21
}
    978c:	4770      	bx	lr
    978e:	bf00      	nop
    9790:	2000184c 	.word	0x2000184c

00009794 <bt_conn_index>:
		__ASSERT(0 <= index && index < ARRAY_SIZE(sco_conns),
			"Invalid bt_conn pointer");
		break;
#endif
	default:
		index = conn - acl_conns;
    9794:	4b03      	ldr	r3, [pc, #12]	; (97a4 <bt_conn_index+0x10>)
    9796:	1ac0      	subs	r0, r0, r3
    9798:	4b03      	ldr	r3, [pc, #12]	; (97a8 <bt_conn_index+0x14>)
    979a:	1180      	asrs	r0, r0, #6
    979c:	4358      	muls	r0, r3
			 "Invalid bt_conn pointer");
		break;
	}

	return (uint8_t)index;
}
    979e:	b2c0      	uxtb	r0, r0
    97a0:	4770      	bx	lr
    97a2:	bf00      	nop
    97a4:	20000db8 	.word	0x20000db8
    97a8:	aaaaaaab 	.word	0xaaaaaaab

000097ac <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
    97ac:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    97ae:	490b      	ldr	r1, [pc, #44]	; (97dc <bt_conn_init+0x30>)
    97b0:	480b      	ldr	r0, [pc, #44]	; (97e0 <bt_conn_init+0x34>)
    97b2:	f019 fded 	bl	23390 <k_queue_append>
    97b6:	490b      	ldr	r1, [pc, #44]	; (97e4 <bt_conn_init+0x38>)
    97b8:	4809      	ldr	r0, [pc, #36]	; (97e0 <bt_conn_init+0x34>)
    97ba:	f019 fde9 	bl	23390 <k_queue_append>
    97be:	490a      	ldr	r1, [pc, #40]	; (97e8 <bt_conn_init+0x3c>)
    97c0:	4807      	ldr	r0, [pc, #28]	; (97e0 <bt_conn_init+0x34>)
    97c2:	f019 fde5 	bl	23390 <k_queue_append>
	}

	bt_att_init();
    97c6:	f018 faae 	bl	21d26 <bt_att_init>

	err = bt_smp_init();
    97ca:	f003 fbbb 	bl	cf44 <bt_smp_init>
	if (err) {
    97ce:	4604      	mov	r4, r0
    97d0:	b908      	cbnz	r0, 97d6 <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
    97d2:	f017 ffa1 	bl	21718 <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
    97d6:	4620      	mov	r0, r4
    97d8:	bd10      	pop	{r4, pc}
    97da:	bf00      	nop
    97dc:	20001854 	.word	0x20001854
    97e0:	20000960 	.word	0x20000960
    97e4:	20001864 	.word	0x20001864
    97e8:	20001874 	.word	0x20001874

000097ec <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    97ec:	4a0b      	ldr	r2, [pc, #44]	; (981c <l2cap_accept+0x30>)
{
    97ee:	b508      	push	{r3, lr}
    97f0:	4603      	mov	r3, r0
		if (l2cap->chan.chan.conn) {
    97f2:	6810      	ldr	r0, [r2, #0]
    97f4:	b918      	cbnz	r0, 97fe <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    97f6:	4b0a      	ldr	r3, [pc, #40]	; (9820 <l2cap_accept+0x34>)
    97f8:	6053      	str	r3, [r2, #4]
		*chan = &l2cap->chan.chan;
    97fa:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    97fc:	bd08      	pop	{r3, pc}
    97fe:	4909      	ldr	r1, [pc, #36]	; (9824 <l2cap_accept+0x38>)
    9800:	4a09      	ldr	r2, [pc, #36]	; (9828 <l2cap_accept+0x3c>)
	BT_ERR("No available L2CAP context for conn %p", conn);
    9802:	480a      	ldr	r0, [pc, #40]	; (982c <l2cap_accept+0x40>)
    9804:	1a52      	subs	r2, r2, r1
    9806:	08d2      	lsrs	r2, r2, #3
    9808:	0192      	lsls	r2, r2, #6
    980a:	f042 0201 	orr.w	r2, r2, #1
    980e:	4619      	mov	r1, r3
    9810:	f015 fc6b 	bl	1f0ea <log_1>
	return -ENOMEM;
    9814:	f06f 000b 	mvn.w	r0, #11
    9818:	e7f0      	b.n	97fc <l2cap_accept+0x10>
    981a:	bf00      	nop
    981c:	20000e78 	.word	0x20000e78
    9820:	00024664 	.word	0x00024664
    9824:	00023ed8 	.word	0x00023ed8
    9828:	00023fd0 	.word	0x00023fd0
    982c:	0002705a 	.word	0x0002705a

00009830 <l2cap_create_le_sig_pdu.isra.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    9830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9832:	4605      	mov	r5, r0
    9834:	460f      	mov	r7, r1
    9836:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
    9838:	2300      	movs	r3, #0
    983a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    983e:	2104      	movs	r1, #4
    9840:	2000      	movs	r0, #0
    9842:	f7ff fec3 	bl	95cc <bt_conn_create_pdu_timeout>
	if (!buf) {
    9846:	4604      	mov	r4, r0
    9848:	b960      	cbnz	r0, 9864 <l2cap_create_le_sig_pdu.isra.0+0x34>
    984a:	4a0a      	ldr	r2, [pc, #40]	; (9874 <l2cap_create_le_sig_pdu.isra.0+0x44>)
    984c:	4b0a      	ldr	r3, [pc, #40]	; (9878 <l2cap_create_le_sig_pdu.isra.0+0x48>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
    984e:	480b      	ldr	r0, [pc, #44]	; (987c <l2cap_create_le_sig_pdu.isra.0+0x4c>)
    9850:	1ad2      	subs	r2, r2, r3
    9852:	08d2      	lsrs	r2, r2, #3
    9854:	0192      	lsls	r2, r2, #6
    9856:	f042 0201 	orr.w	r2, r2, #1
    985a:	4629      	mov	r1, r5
    985c:	f015 fc45 	bl	1f0ea <log_1>
}
    9860:	4620      	mov	r0, r4
    9862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
    9864:	2104      	movs	r1, #4
    9866:	3008      	adds	r0, #8
    9868:	f019 f9ad 	bl	22bc6 <net_buf_simple_add>
	hdr->code = code;
    986c:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
    986e:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    9870:	8046      	strh	r6, [r0, #2]
	return buf;
    9872:	e7f5      	b.n	9860 <l2cap_create_le_sig_pdu.isra.0+0x30>
    9874:	00023fd0 	.word	0x00023fd0
    9878:	00023ed8 	.word	0x00023ed8
    987c:	00027081 	.word	0x00027081

00009880 <l2cap_rtx_timeout>:
{
    9880:	b538      	push	{r3, r4, r5, lr}
    9882:	4a0b      	ldr	r2, [pc, #44]	; (98b0 <l2cap_rtx_timeout+0x30>)
    9884:	4b0b      	ldr	r3, [pc, #44]	; (98b4 <l2cap_rtx_timeout+0x34>)
	struct bt_conn *conn = chan->chan.conn;
    9886:	4604      	mov	r4, r0
    9888:	1ad2      	subs	r2, r2, r3
    988a:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
    988e:	480a      	ldr	r0, [pc, #40]	; (98b8 <l2cap_rtx_timeout+0x38>)
    9890:	08d2      	lsrs	r2, r2, #3
    9892:	0192      	lsls	r2, r2, #6
    9894:	4621      	mov	r1, r4
    9896:	f042 0201 	orr.w	r2, r2, #1
    989a:	f015 fc26 	bl	1f0ea <log_1>
	bt_l2cap_chan_remove(conn, &chan->chan);
    989e:	4628      	mov	r0, r5
    98a0:	4621      	mov	r1, r4
    98a2:	f017 fe96 	bl	215d2 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    98a6:	4620      	mov	r0, r4
}
    98a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
    98ac:	f017 beb3 	b.w	21616 <bt_l2cap_chan_del>
    98b0:	00023fd0 	.word	0x00023fd0
    98b4:	00023ed8 	.word	0x00023ed8
    98b8:	000270a9 	.word	0x000270a9

000098bc <bt_l2cap_connected>:
{
    98bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    98c0:	4e29      	ldr	r6, [pc, #164]	; (9968 <bt_l2cap_connected+0xac>)
    98c2:	4f2a      	ldr	r7, [pc, #168]	; (996c <bt_l2cap_connected+0xb0>)
	k_work_init_delayable(&work->work, handler);
    98c4:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 9970 <bt_l2cap_connected+0xb4>
{
    98c8:	4604      	mov	r4, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    98ca:	42be      	cmp	r6, r7
    98cc:	d302      	bcc.n	98d4 <bt_l2cap_connected+0x18>
}
    98ce:	b003      	add	sp, #12
    98d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    98d4:	6873      	ldr	r3, [r6, #4]
    98d6:	a901      	add	r1, sp, #4
    98d8:	4620      	mov	r0, r4
    98da:	4798      	blx	r3
    98dc:	2800      	cmp	r0, #0
    98de:	db3d      	blt.n	995c <bt_l2cap_connected+0xa0>
		ch = BT_L2CAP_LE_CHAN(chan);
    98e0:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
    98e2:	8833      	ldrh	r3, [r6, #0]
    98e4:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
		ch->tx.cid = fchan->cid;
    98e8:	f8a5 3054 	strh.w	r3, [r5, #84]	; 0x54
    98ec:	4641      	mov	r1, r8
    98ee:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    98f2:	f8d6 9008 	ldr.w	r9, [r6, #8]
    98f6:	f019 ff62 	bl	237be <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    98fa:	f3bf 8f5b 	dmb	ish
    98fe:	f105 0340 	add.w	r3, r5, #64	; 0x40
    9902:	2200      	movs	r2, #0
    9904:	e853 1f00 	ldrex	r1, [r3]
    9908:	e843 2000 	strex	r0, r2, [r3]
    990c:	2800      	cmp	r0, #0
    990e:	d1f9      	bne.n	9904 <bt_l2cap_connected+0x48>
    9910:	f3bf 8f5b 	dmb	ish
	parent->next = child;
    9914:	60aa      	str	r2, [r5, #8]
Z_GENLIST_APPEND(slist, snode)
    9916:	6d62      	ldr	r2, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
    9918:	f105 0308 	add.w	r3, r5, #8
    991c:	bb02      	cbnz	r2, 9960 <bt_l2cap_connected+0xa4>
	list->head = node;
    991e:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (chan->ops->connected) {
    9922:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    9924:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
    9926:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    9928:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
    992c:	681b      	ldr	r3, [r3, #0]
    992e:	b103      	cbz	r3, 9932 <bt_l2cap_connected+0x76>
			chan->ops->connected(chan);
    9930:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9932:	9b01      	ldr	r3, [sp, #4]
    9934:	f3bf 8f5b 	dmb	ish
    9938:	3340      	adds	r3, #64	; 0x40
    993a:	e853 2f00 	ldrex	r2, [r3]
    993e:	f042 0201 	orr.w	r2, r2, #1
    9942:	e843 2100 	strex	r1, r2, [r3]
    9946:	2900      	cmp	r1, #0
    9948:	d1f7      	bne.n	993a <bt_l2cap_connected+0x7e>
    994a:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
    994e:	9801      	ldr	r0, [sp, #4]
    9950:	6843      	ldr	r3, [r0, #4]
    9952:	699b      	ldr	r3, [r3, #24]
    9954:	b113      	cbz	r3, 995c <bt_l2cap_connected+0xa0>
			chan->ops->status(chan, chan->status);
    9956:	f100 0140 	add.w	r1, r0, #64	; 0x40
    995a:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    995c:	360c      	adds	r6, #12
    995e:	e7b4      	b.n	98ca <bt_l2cap_connected+0xe>
	parent->next = child;
    9960:	6013      	str	r3, [r2, #0]
	list->tail = node;
    9962:	6563      	str	r3, [r4, #84]	; 0x54
}
    9964:	e7dd      	b.n	9922 <bt_l2cap_connected+0x66>
    9966:	bf00      	nop
    9968:	00023e94 	.word	0x00023e94
    996c:	00023eb8 	.word	0x00023eb8
    9970:	00009881 	.word	0x00009881

00009974 <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
    9974:	898b      	ldrh	r3, [r1, #12]
    9976:	2b03      	cmp	r3, #3
{
    9978:	b573      	push	{r0, r1, r4, r5, r6, lr}
    997a:	4606      	mov	r6, r0
    997c:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    997e:	d80a      	bhi.n	9996 <l2cap_recv+0x22>
    9980:	492e      	ldr	r1, [pc, #184]	; (9a3c <l2cap_recv+0xc8>)
    9982:	4b2f      	ldr	r3, [pc, #188]	; (9a40 <l2cap_recv+0xcc>)
		BT_ERR("Too small L2CAP signaling PDU");
    9984:	482f      	ldr	r0, [pc, #188]	; (9a44 <l2cap_recv+0xd0>)
    9986:	1ac9      	subs	r1, r1, r3
    9988:	08c9      	lsrs	r1, r1, #3
    998a:	0189      	lsls	r1, r1, #6
    998c:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Invalid ident value in L2CAP PDU");
    9990:	f015 fb9e 	bl	1f0d0 <log_0>
		return 0;
    9994:	e013      	b.n	99be <l2cap_recv+0x4a>
	return net_buf_simple_pull_mem(&buf->b, len);
    9996:	2104      	movs	r1, #4
    9998:	f105 0008 	add.w	r0, r5, #8
    999c:	f019 f93b 	bl	22c16 <net_buf_simple_pull_mem>
	if (buf->len != len) {
    99a0:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
    99a2:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
    99a4:	428a      	cmp	r2, r1
    99a6:	4604      	mov	r4, r0
    99a8:	d00c      	beq.n	99c4 <l2cap_recv+0x50>
    99aa:	4825      	ldr	r0, [pc, #148]	; (9a40 <l2cap_recv+0xcc>)
    99ac:	4b23      	ldr	r3, [pc, #140]	; (9a3c <l2cap_recv+0xc8>)
    99ae:	1a1b      	subs	r3, r3, r0
    99b0:	08db      	lsrs	r3, r3, #3
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    99b2:	019b      	lsls	r3, r3, #6
    99b4:	4824      	ldr	r0, [pc, #144]	; (9a48 <l2cap_recv+0xd4>)
    99b6:	f043 0301 	orr.w	r3, r3, #1
    99ba:	f015 fbaa 	bl	1f112 <log_2>
}
    99be:	2000      	movs	r0, #0
    99c0:	b002      	add	sp, #8
    99c2:	bd70      	pop	{r4, r5, r6, pc}
	if (!hdr->ident) {
    99c4:	7843      	ldrb	r3, [r0, #1]
    99c6:	b943      	cbnz	r3, 99da <l2cap_recv+0x66>
    99c8:	491c      	ldr	r1, [pc, #112]	; (9a3c <l2cap_recv+0xc8>)
    99ca:	4b1d      	ldr	r3, [pc, #116]	; (9a40 <l2cap_recv+0xcc>)
		BT_ERR("Invalid ident value in L2CAP PDU");
    99cc:	481f      	ldr	r0, [pc, #124]	; (9a4c <l2cap_recv+0xd8>)
    99ce:	1ac9      	subs	r1, r1, r3
    99d0:	08c9      	lsrs	r1, r1, #3
    99d2:	0189      	lsls	r1, r1, #6
    99d4:	f041 0101 	orr.w	r1, r1, #1
    99d8:	e7da      	b.n	9990 <l2cap_recv+0x1c>
	switch (hdr->code) {
    99da:	7801      	ldrb	r1, [r0, #0]
    99dc:	2901      	cmp	r1, #1
    99de:	d0ee      	beq.n	99be <l2cap_recv+0x4a>
    99e0:	2913      	cmp	r1, #19
    99e2:	d10a      	bne.n	99fa <l2cap_recv+0x86>
	if (buf->len < sizeof(*rsp)) {
    99e4:	2a01      	cmp	r2, #1
    99e6:	d8ea      	bhi.n	99be <l2cap_recv+0x4a>
    99e8:	4914      	ldr	r1, [pc, #80]	; (9a3c <l2cap_recv+0xc8>)
    99ea:	4b15      	ldr	r3, [pc, #84]	; (9a40 <l2cap_recv+0xcc>)
		BT_ERR("Too small LE conn param rsp");
    99ec:	4818      	ldr	r0, [pc, #96]	; (9a50 <l2cap_recv+0xdc>)
    99ee:	1ac9      	subs	r1, r1, r3
    99f0:	08c9      	lsrs	r1, r1, #3
    99f2:	0189      	lsls	r1, r1, #6
    99f4:	f041 0101 	orr.w	r1, r1, #1
    99f8:	e7ca      	b.n	9990 <l2cap_recv+0x1c>
    99fa:	4b11      	ldr	r3, [pc, #68]	; (9a40 <l2cap_recv+0xcc>)
    99fc:	4a0f      	ldr	r2, [pc, #60]	; (9a3c <l2cap_recv+0xc8>)
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    99fe:	4815      	ldr	r0, [pc, #84]	; (9a54 <l2cap_recv+0xe0>)
    9a00:	1ad2      	subs	r2, r2, r3
    9a02:	08d2      	lsrs	r2, r2, #3
    9a04:	0192      	lsls	r2, r2, #6
    9a06:	f042 0202 	orr.w	r2, r2, #2
    9a0a:	f015 fb6e 	bl	1f0ea <log_1>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    9a0e:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
    9a10:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    9a12:	2202      	movs	r2, #2
    9a14:	2001      	movs	r0, #1
    9a16:	f7ff ff0b 	bl	9830 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    9a1a:	4604      	mov	r4, r0
    9a1c:	2800      	cmp	r0, #0
    9a1e:	d0ce      	beq.n	99be <l2cap_recv+0x4a>
	return net_buf_simple_add(&buf->b, len);
    9a20:	2102      	movs	r1, #2
    9a22:	3008      	adds	r0, #8
    9a24:	f019 f8cf 	bl	22bc6 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    9a28:	2300      	movs	r3, #0
    9a2a:	7003      	strb	r3, [r0, #0]
    9a2c:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    9a2e:	4622      	mov	r2, r4
    9a30:	9300      	str	r3, [sp, #0]
    9a32:	2105      	movs	r1, #5
    9a34:	4628      	mov	r0, r5
    9a36:	f017 fe36 	bl	216a6 <bt_l2cap_send_cb>
}
    9a3a:	e7c0      	b.n	99be <l2cap_recv+0x4a>
    9a3c:	00023fd0 	.word	0x00023fd0
    9a40:	00023ed8 	.word	0x00023ed8
    9a44:	000270b9 	.word	0x000270b9
    9a48:	000270d7 	.word	0x000270d7
    9a4c:	000270f8 	.word	0x000270f8
    9a50:	00027119 	.word	0x00027119
    9a54:	00027135 	.word	0x00027135

00009a58 <bt_l2cap_recv>:
{
    9a58:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
    9a5a:	898b      	ldrh	r3, [r1, #12]
    9a5c:	2b03      	cmp	r3, #3
{
    9a5e:	4605      	mov	r5, r0
    9a60:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    9a62:	d80e      	bhi.n	9a82 <bt_l2cap_recv+0x2a>
    9a64:	4914      	ldr	r1, [pc, #80]	; (9ab8 <bt_l2cap_recv+0x60>)
    9a66:	4b15      	ldr	r3, [pc, #84]	; (9abc <bt_l2cap_recv+0x64>)
		BT_ERR("Too small L2CAP PDU received");
    9a68:	4815      	ldr	r0, [pc, #84]	; (9ac0 <bt_l2cap_recv+0x68>)
    9a6a:	1ac9      	subs	r1, r1, r3
    9a6c:	08c9      	lsrs	r1, r1, #3
    9a6e:	0189      	lsls	r1, r1, #6
    9a70:	f041 0101 	orr.w	r1, r1, #1
    9a74:	f015 fb2c 	bl	1f0d0 <log_0>
	net_buf_unref(buf);
    9a78:	4620      	mov	r0, r4
}
    9a7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
    9a7e:	f010 bdbd 	b.w	1a5fc <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
    9a82:	2104      	movs	r1, #4
    9a84:	f104 0008 	add.w	r0, r4, #8
    9a88:	f019 f8c5 	bl	22c16 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
    9a8c:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    9a8e:	4628      	mov	r0, r5
    9a90:	f017 fe32 	bl	216f8 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    9a94:	b950      	cbnz	r0, 9aac <bt_l2cap_recv+0x54>
    9a96:	4b09      	ldr	r3, [pc, #36]	; (9abc <bt_l2cap_recv+0x64>)
    9a98:	4a07      	ldr	r2, [pc, #28]	; (9ab8 <bt_l2cap_recv+0x60>)
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
    9a9a:	480a      	ldr	r0, [pc, #40]	; (9ac4 <bt_l2cap_recv+0x6c>)
    9a9c:	1ad2      	subs	r2, r2, r3
    9a9e:	08d2      	lsrs	r2, r2, #3
    9aa0:	0192      	lsls	r2, r2, #6
    9aa2:	f042 0202 	orr.w	r2, r2, #2
    9aa6:	f015 fb20 	bl	1f0ea <log_1>
		net_buf_unref(buf);
    9aaa:	e7e5      	b.n	9a78 <bt_l2cap_recv+0x20>
	chan->ops->recv(chan, buf);
    9aac:	6843      	ldr	r3, [r0, #4]
    9aae:	4621      	mov	r1, r4
    9ab0:	691b      	ldr	r3, [r3, #16]
    9ab2:	4798      	blx	r3
    9ab4:	e7e0      	b.n	9a78 <bt_l2cap_recv+0x20>
    9ab6:	bf00      	nop
    9ab8:	00023fd0 	.word	0x00023fd0
    9abc:	00023ed8 	.word	0x00023ed8
    9ac0:	00027153 	.word	0x00027153
    9ac4:	00027170 	.word	0x00027170

00009ac8 <bt_l2cap_update_conn_param>:
{
    9ac8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
    9aca:	4b15      	ldr	r3, [pc, #84]	; (9b20 <bt_l2cap_update_conn_param+0x58>)
    9acc:	781a      	ldrb	r2, [r3, #0]
    9ace:	3201      	adds	r2, #1
	if (!ident) {
    9ad0:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    9ad4:	bf08      	it	eq
    9ad6:	2201      	moveq	r2, #1
    9ad8:	701a      	strb	r2, [r3, #0]
{
    9ada:	4605      	mov	r5, r0
    9adc:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    9ade:	2208      	movs	r2, #8
    9ae0:	7819      	ldrb	r1, [r3, #0]
    9ae2:	2012      	movs	r0, #18
    9ae4:	f7ff fea4 	bl	9830 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    9ae8:	4606      	mov	r6, r0
    9aea:	b1b0      	cbz	r0, 9b1a <bt_l2cap_update_conn_param+0x52>
	return net_buf_simple_add(&buf->b, len);
    9aec:	2108      	movs	r1, #8
    9aee:	4408      	add	r0, r1
    9af0:	f019 f869 	bl	22bc6 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    9af4:	8822      	ldrh	r2, [r4, #0]
    9af6:	8002      	strh	r2, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    9af8:	8862      	ldrh	r2, [r4, #2]
    9afa:	8042      	strh	r2, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    9afc:	88a2      	ldrh	r2, [r4, #4]
    9afe:	8082      	strh	r2, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    9b00:	88e2      	ldrh	r2, [r4, #6]
    9b02:	80c2      	strh	r2, [r0, #6]
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    9b04:	2400      	movs	r4, #0
    9b06:	9400      	str	r4, [sp, #0]
    9b08:	4623      	mov	r3, r4
    9b0a:	4632      	mov	r2, r6
    9b0c:	2105      	movs	r1, #5
    9b0e:	4628      	mov	r0, r5
    9b10:	f017 fdc9 	bl	216a6 <bt_l2cap_send_cb>
	return 0;
    9b14:	4620      	mov	r0, r4
}
    9b16:	b002      	add	sp, #8
    9b18:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    9b1a:	f06f 000b 	mvn.w	r0, #11
    9b1e:	e7fa      	b.n	9b16 <bt_l2cap_update_conn_param+0x4e>
    9b20:	200035c0 	.word	0x200035c0

00009b24 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
    9b24:	4b02      	ldr	r3, [pc, #8]	; (9b30 <att_cfm_sent+0xc>)
    9b26:	f8c1 3110 	str.w	r3, [r1, #272]	; 0x110

	att_sent(conn, user_data);
    9b2a:	f017 be23 	b.w	21774 <att_sent>
    9b2e:	bf00      	nop
    9b30:	00021a73 	.word	0x00021a73

00009b34 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
    9b34:	4b02      	ldr	r3, [pc, #8]	; (9b40 <att_rsp_sent+0xc>)
    9b36:	f8c1 3110 	str.w	r3, [r1, #272]	; 0x110

	att_sent(conn, user_data);
    9b3a:	f017 be1b 	b.w	21774 <att_sent>
    9b3e:	bf00      	nop
    9b40:	00021a57 	.word	0x00021a57

00009b44 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
    9b44:	4b02      	ldr	r3, [pc, #8]	; (9b50 <att_req_sent+0xc>)
    9b46:	f8c1 3110 	str.w	r3, [r1, #272]	; 0x110

	att_sent(conn, user_data);
    9b4a:	f017 be13 	b.w	21774 <att_sent>
    9b4e:	bf00      	nop
    9b50:	00009fb1 	.word	0x00009fb1

00009b54 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
    9b54:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
    9b56:	3808      	subs	r0, #8
    9b58:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
    9b5a:	a901      	add	r1, sp, #4
    9b5c:	4802      	ldr	r0, [pc, #8]	; (9b68 <bt_att_released+0x14>)
    9b5e:	f013 fb87 	bl	1d270 <k_mem_slab_free>
}
    9b62:	b003      	add	sp, #12
    9b64:	f85d fb04 	ldr.w	pc, [sp], #4
    9b68:	200008b4 	.word	0x200008b4

00009b6c <read_group_cb>:
{
    9b6c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    9b70:	4606      	mov	r6, r0
    9b72:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    9b74:	f04f 0800 	mov.w	r8, #0
    9b78:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    9b7c:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
    9b7e:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    9b80:	f88d 8008 	strb.w	r8, [sp, #8]
    9b84:	a902      	add	r1, sp, #8
{
    9b86:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    9b88:	f8ad 300a 	strh.w	r3, [sp, #10]
    9b8c:	f017 f894 	bl	20cb8 <bt_uuid_cmp>
    9b90:	b1a0      	cbz	r0, 9bbc <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    9b92:	f642 0301 	movw	r3, #10241	; 0x2801
    9b96:	6830      	ldr	r0, [r6, #0]
    9b98:	f88d 800c 	strb.w	r8, [sp, #12]
    9b9c:	a903      	add	r1, sp, #12
    9b9e:	f8ad 300e 	strh.w	r3, [sp, #14]
    9ba2:	f017 f889 	bl	20cb8 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    9ba6:	b148      	cbz	r0, 9bbc <read_group_cb+0x50>
		if (data->group &&
    9ba8:	6923      	ldr	r3, [r4, #16]
    9baa:	b11b      	cbz	r3, 9bb4 <read_group_cb+0x48>
    9bac:	885a      	ldrh	r2, [r3, #2]
    9bae:	42aa      	cmp	r2, r5
    9bb0:	d200      	bcs.n	9bb4 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
    9bb2:	805d      	strh	r5, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    9bb4:	2001      	movs	r0, #1
}
    9bb6:	b004      	add	sp, #16
    9bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    9bbc:	6861      	ldr	r1, [r4, #4]
    9bbe:	6830      	ldr	r0, [r6, #0]
    9bc0:	f017 f87a 	bl	20cb8 <bt_uuid_cmp>
    9bc4:	b110      	cbz	r0, 9bcc <read_group_cb+0x60>
		data->group = NULL;
    9bc6:	2300      	movs	r3, #0
    9bc8:	6123      	str	r3, [r4, #16]
    9bca:	e7f3      	b.n	9bb4 <read_group_cb+0x48>
	if (data->rsp->len &&
    9bcc:	68e3      	ldr	r3, [r4, #12]
    9bce:	68a0      	ldr	r0, [r4, #8]
    9bd0:	781a      	ldrb	r2, [r3, #0]
    9bd2:	b13a      	cbz	r2, 9be4 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    9bd4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
    9bd8:	8981      	ldrh	r1, [r0, #12]
    9bda:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    9bdc:	4293      	cmp	r3, r2
    9bde:	da01      	bge.n	9be4 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
    9be0:	2000      	movs	r0, #0
    9be2:	e7e8      	b.n	9bb6 <read_group_cb+0x4a>
    9be4:	2104      	movs	r1, #4
    9be6:	3008      	adds	r0, #8
    9be8:	f018 ffed 	bl	22bc6 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    9bec:	4b09      	ldr	r3, [pc, #36]	; (9c14 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    9bee:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    9bf0:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    9bf2:	8005      	strh	r5, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    9bf4:	8045      	strh	r5, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    9bf6:	4631      	mov	r1, r6
    9bf8:	9300      	str	r3, [sp, #0]
    9bfa:	9401      	str	r4, [sp, #4]
    9bfc:	2300      	movs	r3, #0
    9bfe:	4638      	mov	r0, r7
    9c00:	f017 fe08 	bl	21814 <att_chan_read>
	if (read < 0) {
    9c04:	2800      	cmp	r0, #0
    9c06:	dbeb      	blt.n	9be0 <read_group_cb+0x74>
	if (!data->group) {
    9c08:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    9c0a:	3800      	subs	r0, #0
    9c0c:	bf18      	it	ne
    9c0e:	2001      	movne	r0, #1
    9c10:	e7d1      	b.n	9bb6 <read_group_cb+0x4a>
    9c12:	bf00      	nop
    9c14:	0002192b 	.word	0x0002192b

00009c18 <read_type_cb>:
{
    9c18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
    9c1c:	f8d2 8000 	ldr.w	r8, [r2]
{
    9c20:	4606      	mov	r6, r0
    9c22:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    9c24:	6800      	ldr	r0, [r0, #0]
    9c26:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
    9c28:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
    9c2c:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    9c2e:	f017 f843 	bl	20cb8 <bt_uuid_cmp>
    9c32:	4607      	mov	r7, r0
    9c34:	2800      	cmp	r0, #0
    9c36:	d13e      	bne.n	9cb6 <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    9c38:	4628      	mov	r0, r5
    9c3a:	2215      	movs	r2, #21
    9c3c:	4631      	mov	r1, r6
    9c3e:	f018 fb04 	bl	2224a <bt_gatt_check_perm>
    9c42:	4605      	mov	r5, r0
    9c44:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    9c46:	b148      	cbz	r0, 9c5c <read_type_cb+0x44>
		if (data->rsp->len) {
    9c48:	68e3      	ldr	r3, [r4, #12]
    9c4a:	781b      	ldrb	r3, [r3, #0]
    9c4c:	b923      	cbnz	r3, 9c58 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
    9c4e:	2500      	movs	r5, #0
}
    9c50:	4628      	mov	r0, r5
    9c52:	b003      	add	sp, #12
    9c54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
    9c58:	7527      	strb	r7, [r4, #20]
    9c5a:	e7f8      	b.n	9c4e <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    9c5c:	68a0      	ldr	r0, [r4, #8]
    9c5e:	f018 ff90 	bl	22b82 <net_buf_frag_last>
    9c62:	2102      	movs	r1, #2
    9c64:	3008      	adds	r0, #8
    9c66:	f018 ffae 	bl	22bc6 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    9c6a:	4b14      	ldr	r3, [pc, #80]	; (9cbc <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    9c6c:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    9c6e:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
    9c70:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    9c74:	4631      	mov	r1, r6
    9c76:	9300      	str	r3, [sp, #0]
    9c78:	9401      	str	r4, [sp, #4]
    9c7a:	462b      	mov	r3, r5
    9c7c:	4640      	mov	r0, r8
    9c7e:	f017 fdc9 	bl	21814 <att_chan_read>
	if (read < 0) {
    9c82:	2800      	cmp	r0, #0
    9c84:	da07      	bge.n	9c96 <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
    9c86:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    9c8a:	bf26      	itte	cs
    9c8c:	4240      	negcs	r0, r0
    9c8e:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    9c90:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
    9c92:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    9c94:	e7dc      	b.n	9c50 <read_type_cb+0x38>
	if (!data->item) {
    9c96:	6923      	ldr	r3, [r4, #16]
    9c98:	2b00      	cmp	r3, #0
    9c9a:	d0d8      	beq.n	9c4e <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    9c9c:	68a0      	ldr	r0, [r4, #8]
    9c9e:	f017 fd61 	bl	21764 <net_buf_frags_len>
    9ca2:	f8b8 505e 	ldrh.w	r5, [r8, #94]	; 0x5e
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    9ca6:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    9ca8:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    9caa:	7818      	ldrb	r0, [r3, #0]
    9cac:	4285      	cmp	r5, r0
    9cae:	bf94      	ite	ls
    9cb0:	2500      	movls	r5, #0
    9cb2:	2501      	movhi	r5, #1
    9cb4:	e7cc      	b.n	9c50 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
    9cb6:	2501      	movs	r5, #1
    9cb8:	e7ca      	b.n	9c50 <read_type_cb+0x38>
    9cba:	bf00      	nop
    9cbc:	00021781 	.word	0x00021781

00009cc0 <find_type_cb>:
{
    9cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
    9cc4:	f8d2 9000 	ldr.w	r9, [r2]
{
    9cc8:	b091      	sub	sp, #68	; 0x44
    9cca:	4607      	mov	r7, r0
    9ccc:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    9cce:	2500      	movs	r5, #0
    9cd0:	f642 0301 	movw	r3, #10241	; 0x2801
    9cd4:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
    9cd6:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    9cda:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    9cde:	a90b      	add	r1, sp, #44	; 0x2c
{
    9ce0:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    9ce2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    9ce6:	f016 ffe7 	bl	20cb8 <bt_uuid_cmp>
    9cea:	2800      	cmp	r0, #0
    9cec:	d066      	beq.n	9dbc <find_type_cb+0xfc>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    9cee:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    9cf2:	6838      	ldr	r0, [r7, #0]
    9cf4:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    9cf8:	a90b      	add	r1, sp, #44	; 0x2c
    9cfa:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    9cfe:	f016 ffdb 	bl	20cb8 <bt_uuid_cmp>
    9d02:	b138      	cbz	r0, 9d14 <find_type_cb+0x54>
		if (data->group &&
    9d04:	68a3      	ldr	r3, [r4, #8]
    9d06:	b11b      	cbz	r3, 9d10 <find_type_cb+0x50>
    9d08:	885a      	ldrh	r2, [r3, #2]
    9d0a:	42b2      	cmp	r2, r6
    9d0c:	d200      	bcs.n	9d10 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
    9d0e:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
    9d10:	2001      	movs	r0, #1
    9d12:	e009      	b.n	9d28 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
    9d14:	6861      	ldr	r1, [r4, #4]
    9d16:	4608      	mov	r0, r1
    9d18:	f017 fd24 	bl	21764 <net_buf_frags_len>
    9d1c:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
    9d20:	1a1b      	subs	r3, r3, r0
    9d22:	2b03      	cmp	r3, #3
    9d24:	d803      	bhi.n	9d2e <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
    9d26:	2000      	movs	r0, #0
}
    9d28:	b011      	add	sp, #68	; 0x44
    9d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
    9d2e:	4608      	mov	r0, r1
    9d30:	f018 ff27 	bl	22b82 <net_buf_frag_last>
    9d34:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
    9d36:	6860      	ldr	r0, [r4, #4]
    9d38:	f017 fd14 	bl	21764 <net_buf_frags_len>
    9d3c:	f8b9 a05e 	ldrh.w	sl, [r9, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
    9d40:	f105 0b08 	add.w	fp, r5, #8
    9d44:	ebaa 0a00 	sub.w	sl, sl, r0
    9d48:	4658      	mov	r0, fp
    9d4a:	f018 ff78 	bl	22c3e <net_buf_simple_tailroom>
    9d4e:	4582      	cmp	sl, r0
    9d50:	d237      	bcs.n	9dc2 <find_type_cb+0x102>
    9d52:	6860      	ldr	r0, [r4, #4]
    9d54:	f017 fd06 	bl	21764 <net_buf_frags_len>
    9d58:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
    9d5c:	1a18      	subs	r0, r3, r0
	if (!len) {
    9d5e:	b970      	cbnz	r0, 9d7e <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
    9d60:	6863      	ldr	r3, [r4, #4]
    9d62:	7998      	ldrb	r0, [r3, #6]
    9d64:	f010 fb8e 	bl	1a484 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
    9d68:	2200      	movs	r2, #0
    9d6a:	2300      	movs	r3, #0
    9d6c:	f018 fed5 	bl	22b1a <net_buf_alloc_fixed>
		if (!frag) {
    9d70:	4605      	mov	r5, r0
    9d72:	2800      	cmp	r0, #0
    9d74:	d0d7      	beq.n	9d26 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
    9d76:	4601      	mov	r1, r0
    9d78:	6860      	ldr	r0, [r4, #4]
    9d7a:	f018 ff13 	bl	22ba4 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    9d7e:	2300      	movs	r3, #0
    9d80:	9300      	str	r3, [sp, #0]
    9d82:	f8d7 9004 	ldr.w	r9, [r7, #4]
    9d86:	4639      	mov	r1, r7
    9d88:	2310      	movs	r3, #16
    9d8a:	aa02      	add	r2, sp, #8
    9d8c:	4640      	mov	r0, r8
    9d8e:	47c8      	blx	r9
	if (read < 0) {
    9d90:	1e07      	subs	r7, r0, #0
    9d92:	db13      	blt.n	9dbc <find_type_cb+0xfc>
	if (read != data->value_len) {
    9d94:	7c22      	ldrb	r2, [r4, #16]
    9d96:	68e0      	ldr	r0, [r4, #12]
    9d98:	42ba      	cmp	r2, r7
    9d9a:	d037      	beq.n	9e0c <find_type_cb+0x14c>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    9d9c:	4601      	mov	r1, r0
    9d9e:	a80b      	add	r0, sp, #44	; 0x2c
    9da0:	f016 ffb4 	bl	20d0c <bt_uuid_create>
    9da4:	b988      	cbnz	r0, 9dca <find_type_cb+0x10a>
    9da6:	4a1b      	ldr	r2, [pc, #108]	; (9e14 <find_type_cb+0x154>)
    9da8:	4b1b      	ldr	r3, [pc, #108]	; (9e18 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %u", data->value_len);
    9daa:	7c21      	ldrb	r1, [r4, #16]
    9dac:	481b      	ldr	r0, [pc, #108]	; (9e1c <find_type_cb+0x15c>)
    9dae:	1ad2      	subs	r2, r2, r3
    9db0:	08d2      	lsrs	r2, r2, #3
    9db2:	0192      	lsls	r2, r2, #6
    9db4:	f042 0202 	orr.w	r2, r2, #2
			BT_WARN("Unable to create UUID: size %d", read);
    9db8:	f015 f997 	bl	1f0ea <log_1>
	data->group = NULL;
    9dbc:	2300      	movs	r3, #0
    9dbe:	60a3      	str	r3, [r4, #8]
    9dc0:	e7a6      	b.n	9d10 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
    9dc2:	4658      	mov	r0, fp
    9dc4:	f018 ff3b 	bl	22c3e <net_buf_simple_tailroom>
    9dc8:	e7c9      	b.n	9d5e <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
    9dca:	b2fa      	uxtb	r2, r7
    9dcc:	a902      	add	r1, sp, #8
    9dce:	a806      	add	r0, sp, #24
    9dd0:	f016 ff9c 	bl	20d0c <bt_uuid_create>
    9dd4:	b948      	cbnz	r0, 9dea <find_type_cb+0x12a>
    9dd6:	4a0f      	ldr	r2, [pc, #60]	; (9e14 <find_type_cb+0x154>)
    9dd8:	4b0f      	ldr	r3, [pc, #60]	; (9e18 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %d", read);
    9dda:	4811      	ldr	r0, [pc, #68]	; (9e20 <find_type_cb+0x160>)
    9ddc:	1ad2      	subs	r2, r2, r3
    9dde:	08d2      	lsrs	r2, r2, #3
    9de0:	0192      	lsls	r2, r2, #6
    9de2:	f042 0202 	orr.w	r2, r2, #2
    9de6:	4639      	mov	r1, r7
    9de8:	e7e6      	b.n	9db8 <find_type_cb+0xf8>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
    9dea:	a906      	add	r1, sp, #24
    9dec:	a80b      	add	r0, sp, #44	; 0x2c
    9dee:	f016 ff63 	bl	20cb8 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
    9df2:	2800      	cmp	r0, #0
    9df4:	d1e2      	bne.n	9dbc <find_type_cb+0xfc>
	data->err = 0x00;
    9df6:	2300      	movs	r3, #0
    9df8:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
    9dfa:	2104      	movs	r1, #4
    9dfc:	f105 0008 	add.w	r0, r5, #8
    9e00:	f018 fee1 	bl	22bc6 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
    9e04:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    9e06:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    9e08:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
    9e0a:	e781      	b.n	9d10 <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
    9e0c:	a902      	add	r1, sp, #8
    9e0e:	f019 fee8 	bl	23be2 <memcmp>
    9e12:	e7ee      	b.n	9df2 <find_type_cb+0x132>
    9e14:	00023ee0 	.word	0x00023ee0
    9e18:	00023ed8 	.word	0x00023ed8
    9e1c:	000271a5 	.word	0x000271a5
    9e20:	000271c4 	.word	0x000271c4

00009e24 <chan_send>:
{
    9e24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    9e28:	688b      	ldr	r3, [r1, #8]
    9e2a:	781b      	ldrb	r3, [r3, #0]
    9e2c:	2bd2      	cmp	r3, #210	; 0xd2
{
    9e2e:	4605      	mov	r5, r0
    9e30:	460c      	mov	r4, r1
    9e32:	4691      	mov	r9, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    9e34:	d113      	bne.n	9e5e <chan_send+0x3a>
		err = bt_smp_sign(chan->att->conn, buf);
    9e36:	6803      	ldr	r3, [r0, #0]
    9e38:	6818      	ldr	r0, [r3, #0]
    9e3a:	f018 fd7d 	bl	22938 <bt_smp_sign>
		if (err) {
    9e3e:	4606      	mov	r6, r0
    9e40:	b168      	cbz	r0, 9e5e <chan_send+0x3a>
    9e42:	4927      	ldr	r1, [pc, #156]	; (9ee0 <chan_send+0xbc>)
    9e44:	4b27      	ldr	r3, [pc, #156]	; (9ee4 <chan_send+0xc0>)
			BT_ERR("Error signing data");
    9e46:	4828      	ldr	r0, [pc, #160]	; (9ee8 <chan_send+0xc4>)
    9e48:	1ac9      	subs	r1, r1, r3
    9e4a:	08c9      	lsrs	r1, r1, #3
    9e4c:	0189      	lsls	r1, r1, #6
    9e4e:	f041 0101 	orr.w	r1, r1, #1
    9e52:	f015 f93d 	bl	1f0d0 <log_0>
		net_buf_unref(buf);
    9e56:	4620      	mov	r0, r4
    9e58:	f010 fbd0 	bl	1a5fc <net_buf_unref>
    9e5c:	e038      	b.n	9ed0 <chan_send+0xac>
	state->offset = net_buf_simple_headroom(buf);
    9e5e:	f104 0008 	add.w	r0, r4, #8
    9e62:	f018 fee8 	bl	22c36 <net_buf_simple_headroom>
	state->len = buf->len;
    9e66:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    9e6a:	4607      	mov	r7, r0
	chan->sent = cb ? cb : chan_cb(buf);
    9e6c:	f1b9 0f00 	cmp.w	r9, #0
    9e70:	d10a      	bne.n	9e88 <chan_send+0x64>
	switch (att_op_get_type(buf->data[0])) {
    9e72:	68a3      	ldr	r3, [r4, #8]
    9e74:	7818      	ldrb	r0, [r3, #0]
    9e76:	f017 fc95 	bl	217a4 <att_op_get_type>
    9e7a:	1e43      	subs	r3, r0, #1
    9e7c:	b2db      	uxtb	r3, r3
    9e7e:	2b04      	cmp	r3, #4
    9e80:	bf9c      	itt	ls
    9e82:	4a1a      	ldrls	r2, [pc, #104]	; (9eec <chan_send+0xc8>)
    9e84:	f852 9023 	ldrls.w	r9, [r2, r3, lsl #2]
	chan->sent = cb ? cb : chan_cb(buf);
    9e88:	f8c5 9118 	str.w	r9, [r5, #280]	; 0x118
	net_buf_ref(buf);
    9e8c:	4620      	mov	r0, r4
    9e8e:	f018 fe74 	bl	22b7a <net_buf_ref>
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    9e92:	682b      	ldr	r3, [r5, #0]
    9e94:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
    9e98:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
    9e9a:	4b15      	ldr	r3, [pc, #84]	; (9ef0 <chan_send+0xcc>)
    9e9c:	429a      	cmp	r2, r3
    9e9e:	d01b      	beq.n	9ed8 <chan_send+0xb4>
	} else if (cb == chan_cfm_sent) {
    9ea0:	4b14      	ldr	r3, [pc, #80]	; (9ef4 <chan_send+0xd0>)
    9ea2:	429a      	cmp	r2, r3
    9ea4:	d01a      	beq.n	9edc <chan_send+0xb8>
		return att_sent;
    9ea6:	4e14      	ldr	r6, [pc, #80]	; (9ef8 <chan_send+0xd4>)
    9ea8:	4b14      	ldr	r3, [pc, #80]	; (9efc <chan_send+0xd8>)
    9eaa:	4915      	ldr	r1, [pc, #84]	; (9f00 <chan_send+0xdc>)
    9eac:	42b2      	cmp	r2, r6
    9eae:	bf18      	it	ne
    9eb0:	460b      	movne	r3, r1
			       &chan->chan.chan);
    9eb2:	3508      	adds	r5, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    9eb4:	9500      	str	r5, [sp, #0]
    9eb6:	4622      	mov	r2, r4
    9eb8:	2104      	movs	r1, #4
    9eba:	f017 fbf4 	bl	216a6 <bt_l2cap_send_cb>
	if (err) {
    9ebe:	4606      	mov	r6, r0
    9ec0:	2800      	cmp	r0, #0
    9ec2:	d0c8      	beq.n	9e56 <chan_send+0x32>
	buf->data = buf->__buf + state->offset;
    9ec4:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    9ec6:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    9eca:	fa10 f787 	uxtah	r7, r0, r7
    9ece:	60a7      	str	r7, [r4, #8]
}
    9ed0:	4630      	mov	r0, r6
    9ed2:	b003      	add	sp, #12
    9ed4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return att_rsp_sent;
    9ed8:	4b0a      	ldr	r3, [pc, #40]	; (9f04 <chan_send+0xe0>)
    9eda:	e7ea      	b.n	9eb2 <chan_send+0x8e>
		return att_cfm_sent;
    9edc:	4b0a      	ldr	r3, [pc, #40]	; (9f08 <chan_send+0xe4>)
    9ede:	e7e8      	b.n	9eb2 <chan_send+0x8e>
    9ee0:	00023ee0 	.word	0x00023ee0
    9ee4:	00023ed8 	.word	0x00023ed8
    9ee8:	000271e3 	.word	0x000271e3
    9eec:	00024684 	.word	0x00024684
    9ef0:	00021a57 	.word	0x00021a57
    9ef4:	00021a73 	.word	0x00021a73
    9ef8:	00009fb1 	.word	0x00009fb1
    9efc:	00009b45 	.word	0x00009b45
    9f00:	00021775 	.word	0x00021775
    9f04:	00009b35 	.word	0x00009b35
    9f08:	00009b25 	.word	0x00009b25

00009f0c <att_get>:
{
    9f0c:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    9f0e:	7b43      	ldrb	r3, [r0, #13]
    9f10:	2b07      	cmp	r3, #7
    9f12:	d00b      	beq.n	9f2c <att_get+0x20>
    9f14:	4918      	ldr	r1, [pc, #96]	; (9f78 <att_get+0x6c>)
    9f16:	4b19      	ldr	r3, [pc, #100]	; (9f7c <att_get+0x70>)
		BT_WARN("Not connected");
    9f18:	4819      	ldr	r0, [pc, #100]	; (9f80 <att_get+0x74>)
    9f1a:	1ac9      	subs	r1, r1, r3
    9f1c:	08c9      	lsrs	r1, r1, #3
    9f1e:	0189      	lsls	r1, r1, #6
    9f20:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("ATT channel flagged as disconnected");
    9f24:	f015 f8d4 	bl	1f0d0 <log_0>
		return NULL;
    9f28:	2400      	movs	r4, #0
    9f2a:	e00e      	b.n	9f4a <att_get+0x3e>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    9f2c:	2104      	movs	r1, #4
    9f2e:	f017 fbe3 	bl	216f8 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    9f32:	4604      	mov	r4, r0
    9f34:	b958      	cbnz	r0, 9f4e <att_get+0x42>
    9f36:	4910      	ldr	r1, [pc, #64]	; (9f78 <att_get+0x6c>)
    9f38:	4b10      	ldr	r3, [pc, #64]	; (9f7c <att_get+0x70>)
		BT_ERR("Unable to find ATT channel");
    9f3a:	4812      	ldr	r0, [pc, #72]	; (9f84 <att_get+0x78>)
    9f3c:	1ac9      	subs	r1, r1, r3
    9f3e:	08c9      	lsrs	r1, r1, #3
    9f40:	0189      	lsls	r1, r1, #6
    9f42:	f041 0101 	orr.w	r1, r1, #1
    9f46:	f015 f8c3 	bl	1f0d0 <log_0>
}
    9f4a:	4620      	mov	r0, r4
    9f4c:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9f4e:	f3bf 8f5b 	dmb	ish
    9f52:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
    9f56:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
    9f5a:	075b      	lsls	r3, r3, #29
    9f5c:	d508      	bpl.n	9f70 <att_get+0x64>
    9f5e:	4906      	ldr	r1, [pc, #24]	; (9f78 <att_get+0x6c>)
    9f60:	4b06      	ldr	r3, [pc, #24]	; (9f7c <att_get+0x70>)
		BT_WARN("ATT channel flagged as disconnected");
    9f62:	4809      	ldr	r0, [pc, #36]	; (9f88 <att_get+0x7c>)
    9f64:	1ac9      	subs	r1, r1, r3
    9f66:	08c9      	lsrs	r1, r1, #3
    9f68:	0189      	lsls	r1, r1, #6
    9f6a:	f041 0102 	orr.w	r1, r1, #2
    9f6e:	e7d9      	b.n	9f24 <att_get+0x18>
	return att_chan->att;
    9f70:	f850 4c08 	ldr.w	r4, [r0, #-8]
    9f74:	e7e9      	b.n	9f4a <att_get+0x3e>
    9f76:	bf00      	nop
    9f78:	00023ee0 	.word	0x00023ee0
    9f7c:	00023ed8 	.word	0x00023ed8
    9f80:	000271f6 	.word	0x000271f6
    9f84:	00027204 	.word	0x00027204
    9f88:	0002721f 	.word	0x0002721f

00009f8c <bt_att_chan_send_rsp.constprop.0>:
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
    9f8c:	b538      	push	{r3, r4, r5, lr}
	return chan_send(chan, buf, cb);
    9f8e:	4a07      	ldr	r2, [pc, #28]	; (9fac <bt_att_chan_send_rsp.constprop.0+0x20>)
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
    9f90:	4604      	mov	r4, r0
    9f92:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
    9f94:	f7ff ff46 	bl	9e24 <chan_send>
	if (err) {
    9f98:	b130      	cbz	r0, 9fa8 <bt_att_chan_send_rsp.constprop.0+0x1c>
		net_buf_put(&chan->tx_queue, buf);
    9f9a:	4629      	mov	r1, r5
    9f9c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
}
    9fa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
    9fa4:	f018 bddc 	b.w	22b60 <net_buf_put>
}
    9fa8:	bd38      	pop	{r3, r4, r5, pc}
    9faa:	bf00      	nop
    9fac:	00021a57 	.word	0x00021a57

00009fb0 <chan_req_sent>:
	if (chan->req) {
    9fb0:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
    9fb4:	b13b      	cbz	r3, 9fc6 <chan_req_sent+0x16>
	return k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
    9fb6:	f100 01e8 	add.w	r1, r0, #232	; 0xe8
    9fba:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    9fbe:	4802      	ldr	r0, [pc, #8]	; (9fc8 <chan_req_sent+0x18>)
    9fc0:	2300      	movs	r3, #0
    9fc2:	f014 b869 	b.w	1e098 <k_work_reschedule_for_queue>
}
    9fc6:	4770      	bx	lr
    9fc8:	200015c0 	.word	0x200015c0

00009fcc <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
    9fcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    9fce:	2300      	movs	r3, #0
{
    9fd0:	4606      	mov	r6, r0
    9fd2:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    9fd4:	4828      	ldr	r0, [pc, #160]	; (a078 <bt_att_accept+0xac>)
    9fd6:	2200      	movs	r2, #0
    9fd8:	4669      	mov	r1, sp
    9fda:	f013 f917 	bl	1d20c <k_mem_slab_alloc>
    9fde:	4604      	mov	r4, r0
    9fe0:	b178      	cbz	r0, a002 <bt_att_accept+0x36>
    9fe2:	4a26      	ldr	r2, [pc, #152]	; (a07c <bt_att_accept+0xb0>)
    9fe4:	4b26      	ldr	r3, [pc, #152]	; (a080 <bt_att_accept+0xb4>)
		BT_ERR("No available ATT context for conn %p", conn);
    9fe6:	4827      	ldr	r0, [pc, #156]	; (a084 <bt_att_accept+0xb8>)
    9fe8:	1ad2      	subs	r2, r2, r3
    9fea:	08d2      	lsrs	r2, r2, #3
    9fec:	0192      	lsls	r2, r2, #6
    9fee:	f042 0201 	orr.w	r2, r2, #1
    9ff2:	4631      	mov	r1, r6
		BT_ERR("No available ATT channel for conn %p", att->conn);
    9ff4:	f015 f879 	bl	1f0ea <log_1>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
    9ff8:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
    9ffc:	4620      	mov	r0, r4
    9ffe:	b003      	add	sp, #12
    a000:	bdf0      	pop	{r4, r5, r6, r7, pc}
__ssp_bos_icheck3(memset, void *, int)
    a002:	4601      	mov	r1, r0
    a004:	222c      	movs	r2, #44	; 0x2c
    a006:	9800      	ldr	r0, [sp, #0]
    a008:	f019 fe07 	bl	23c1a <memset>
	att->conn = conn;
    a00c:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    a00e:	481e      	ldr	r0, [pc, #120]	; (a088 <bt_att_accept+0xbc>)
	list->tail = NULL;
    a010:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
    a012:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
    a016:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
    a01a:	2200      	movs	r2, #0
    a01c:	2300      	movs	r3, #0
    a01e:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
    a020:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    a022:	f013 f8f3 	bl	1d20c <k_mem_slab_alloc>
    a026:	4604      	mov	r4, r0
    a028:	b148      	cbz	r0, a03e <bt_att_accept+0x72>
    a02a:	4a14      	ldr	r2, [pc, #80]	; (a07c <bt_att_accept+0xb0>)
    a02c:	4b14      	ldr	r3, [pc, #80]	; (a080 <bt_att_accept+0xb4>)
		BT_ERR("No available ATT channel for conn %p", att->conn);
    a02e:	6829      	ldr	r1, [r5, #0]
    a030:	4816      	ldr	r0, [pc, #88]	; (a08c <bt_att_accept+0xc0>)
    a032:	1ad2      	subs	r2, r2, r3
    a034:	08d2      	lsrs	r2, r2, #3
    a036:	0192      	lsls	r2, r2, #6
    a038:	f042 0201 	orr.w	r2, r2, #1
    a03c:	e7da      	b.n	9ff4 <bt_att_accept+0x28>
    a03e:	4601      	mov	r1, r0
    a040:	f44f 7290 	mov.w	r2, #288	; 0x120
    a044:	9801      	ldr	r0, [sp, #4]
    a046:	f019 fde8 	bl	23c1a <memset>
	chan->chan.chan.ops = &ops;
    a04a:	9801      	ldr	r0, [sp, #4]
    a04c:	4b10      	ldr	r3, [pc, #64]	; (a090 <bt_att_accept+0xc4>)
    a04e:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
    a050:	30d0      	adds	r0, #208	; 0xd0
    a052:	f019 f991 	bl	23378 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    a056:	9b01      	ldr	r3, [sp, #4]
    a058:	f3bf 8f5b 	dmb	ish
    a05c:	33c8      	adds	r3, #200	; 0xc8
    a05e:	e853 2f00 	ldrex	r2, [r3]
    a062:	e843 4100 	strex	r1, r4, [r3]
    a066:	2900      	cmp	r1, #0
    a068:	d1f9      	bne.n	a05e <bt_att_accept+0x92>
    a06a:	f3bf 8f5b 	dmb	ish
	chan->att = att;
    a06e:	9b01      	ldr	r3, [sp, #4]
    a070:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
    a074:	603b      	str	r3, [r7, #0]
	return 0;
    a076:	e7c1      	b.n	9ffc <bt_att_accept+0x30>
    a078:	20000898 	.word	0x20000898
    a07c:	00023ee0 	.word	0x00023ee0
    a080:	00023ed8 	.word	0x00023ed8
    a084:	00027243 	.word	0x00027243
    a088:	200008b4 	.word	0x200008b4
    a08c:	00027268 	.word	0x00027268
    a090:	20000254 	.word	0x20000254

0000a094 <bt_att_connected>:
{
    a094:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    a096:	2104      	movs	r1, #4
{
    a098:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    a09a:	6800      	ldr	r0, [r0, #0]
    a09c:	f017 fb1c 	bl	216d8 <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
    a0a0:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
    a0a4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    a0a6:	b91b      	cbnz	r3, a0b0 <bt_att_connected+0x1c>
    a0a8:	f105 000c 	add.w	r0, r5, #12
    a0ac:	f019 f964 	bl	23378 <z_impl_k_queue_init>
Z_GENLIST_PREPEND(slist, snode)
    a0b0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	parent->next = child;
    a0b2:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
Z_GENLIST_PREPEND(slist, snode)
    a0b6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
    a0b8:	f504 738a 	add.w	r3, r4, #276	; 0x114
	list->head = node;
    a0bc:	626b      	str	r3, [r5, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
    a0be:	b902      	cbnz	r2, a0c2 <bt_att_connected+0x2e>
	list->tail = node;
    a0c0:	62ab      	str	r3, [r5, #40]	; 0x28
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a0c2:	f3bf 8f5b 	dmb	ish
    a0c6:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
	k_work_init_delayable(&work->work, handler);
    a0ca:	4908      	ldr	r1, [pc, #32]	; (a0ec <bt_att_connected+0x58>)
    a0cc:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
    a0d0:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    a0d2:	bf5e      	ittt	pl
    a0d4:	2317      	movpl	r3, #23
    a0d6:	f8a4 3056 	strhpl.w	r3, [r4, #86]	; 0x56
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    a0da:	f8a4 304a 	strhpl.w	r3, [r4, #74]	; 0x4a
    a0de:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
}
    a0e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    a0e6:	f019 bb6a 	b.w	237be <k_work_init_delayable>
    a0ea:	bf00      	nop
    a0ec:	0000aa25 	.word	0x0000aa25

0000a0f0 <att_write_cmd>:
{
    a0f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    a0f2:	4604      	mov	r4, r0
    a0f4:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
    a0f6:	f101 0008 	add.w	r0, r1, #8
    a0fa:	460d      	mov	r5, r1
    a0fc:	f018 fd93 	bl	22c26 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    a100:	6823      	ldr	r3, [r4, #0]
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
    a102:	68af      	ldr	r7, [r5, #8]
    a104:	89ad      	ldrh	r5, [r5, #12]
    a106:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    a108:	2100      	movs	r1, #0
    a10a:	6818      	ldr	r0, [r3, #0]
    a10c:	f018 f8c8 	bl	222a0 <bt_gatt_change_aware>
    a110:	b1f8      	cbz	r0, a152 <att_write_cmd+0x62>
	if (!handle) {
    a112:	b306      	cbz	r6, a156 <att_write_cmd+0x66>
	(void)memset(&data, 0, sizeof(data));
    a114:	2214      	movs	r2, #20
    a116:	2100      	movs	r1, #0
    a118:	a801      	add	r0, sp, #4
    a11a:	f019 fd7e 	bl	23c1a <memset>
	data.conn = chan->att->conn;
    a11e:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    a120:	4a0e      	ldr	r2, [pc, #56]	; (a15c <att_write_cmd+0x6c>)
	data.conn = chan->att->conn;
    a122:	681b      	ldr	r3, [r3, #0]
    a124:	9300      	str	r3, [sp, #0]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    a126:	2301      	movs	r3, #1
    a128:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    a12c:	4631      	mov	r1, r6
    a12e:	466b      	mov	r3, sp
    a130:	4630      	mov	r0, r6
	data.value = value;
    a132:	9703      	str	r7, [sp, #12]
	data.len = len;
    a134:	f8ad 5010 	strh.w	r5, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    a138:	f017 fb61 	bl	217fe <bt_gatt_foreach_attr>
	if (data.err) {
    a13c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    a140:	b923      	cbnz	r3, a14c <att_write_cmd+0x5c>
	if (data.buf) {
    a142:	9901      	ldr	r1, [sp, #4]
    a144:	b111      	cbz	r1, a14c <att_write_cmd+0x5c>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    a146:	4620      	mov	r0, r4
    a148:	f7ff ff20 	bl	9f8c <bt_att_chan_send_rsp.constprop.0>
    a14c:	2000      	movs	r0, #0
}
    a14e:	b007      	add	sp, #28
    a150:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    a152:	2012      	movs	r0, #18
    a154:	e7fb      	b.n	a14e <att_write_cmd+0x5e>
		return BT_ATT_ERR_INVALID_HANDLE;
    a156:	2001      	movs	r0, #1
    a158:	e7f9      	b.n	a14e <att_write_cmd+0x5e>
    a15a:	bf00      	nop
    a15c:	00021b2f 	.word	0x00021b2f

0000a160 <bt_att_chan_create_pdu>:
{
    a160:	b538      	push	{r3, r4, r5, lr}
    a162:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
    a164:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
    a168:	3201      	adds	r2, #1
    a16a:	428a      	cmp	r2, r1
    a16c:	d90c      	bls.n	a188 <bt_att_chan_create_pdu+0x28>
    a16e:	481a      	ldr	r0, [pc, #104]	; (a1d8 <bt_att_chan_create_pdu+0x78>)
    a170:	4b1a      	ldr	r3, [pc, #104]	; (a1dc <bt_att_chan_create_pdu+0x7c>)
    a172:	1a1b      	subs	r3, r3, r0
    a174:	08db      	lsrs	r3, r3, #3
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    a176:	019b      	lsls	r3, r3, #6
    a178:	4819      	ldr	r0, [pc, #100]	; (a1e0 <bt_att_chan_create_pdu+0x80>)
    a17a:	f043 0302 	orr.w	r3, r3, #2
    a17e:	f014 ffc8 	bl	1f112 <log_2>
		return NULL;
    a182:	2400      	movs	r4, #0
}
    a184:	4620      	mov	r0, r4
    a186:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
    a188:	4628      	mov	r0, r5
    a18a:	f017 fb0b 	bl	217a4 <att_op_get_type>
    a18e:	2802      	cmp	r0, #2
    a190:	d001      	beq.n	a196 <bt_att_chan_create_pdu+0x36>
    a192:	2804      	cmp	r0, #4
    a194:	d114      	bne.n	a1c0 <bt_att_chan_create_pdu+0x60>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
    a196:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    a19a:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
    a19c:	2100      	movs	r1, #0
    a19e:	4608      	mov	r0, r1
    a1a0:	f017 fa7e 	bl	216a0 <bt_l2cap_create_pdu_timeout>
    a1a4:	4604      	mov	r4, r0
	if (!buf) {
    a1a6:	b980      	cbnz	r0, a1ca <bt_att_chan_create_pdu+0x6a>
    a1a8:	4b0b      	ldr	r3, [pc, #44]	; (a1d8 <bt_att_chan_create_pdu+0x78>)
    a1aa:	4a0c      	ldr	r2, [pc, #48]	; (a1dc <bt_att_chan_create_pdu+0x7c>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
    a1ac:	480d      	ldr	r0, [pc, #52]	; (a1e4 <bt_att_chan_create_pdu+0x84>)
    a1ae:	1ad2      	subs	r2, r2, r3
    a1b0:	08d2      	lsrs	r2, r2, #3
    a1b2:	0192      	lsls	r2, r2, #6
    a1b4:	f042 0201 	orr.w	r2, r2, #1
    a1b8:	4629      	mov	r1, r5
    a1ba:	f014 ff96 	bl	1f0ea <log_1>
		return NULL;
    a1be:	e7e1      	b.n	a184 <bt_att_chan_create_pdu+0x24>
		buf = bt_l2cap_create_pdu(NULL, 0);
    a1c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a1c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a1c8:	e7e8      	b.n	a19c <bt_att_chan_create_pdu+0x3c>
	return net_buf_simple_add(&buf->b, len);
    a1ca:	2101      	movs	r1, #1
    a1cc:	3008      	adds	r0, #8
    a1ce:	f018 fcfa 	bl	22bc6 <net_buf_simple_add>
	hdr->code = op;
    a1d2:	7005      	strb	r5, [r0, #0]
	return buf;
    a1d4:	e7d6      	b.n	a184 <bt_att_chan_create_pdu+0x24>
    a1d6:	bf00      	nop
    a1d8:	00023ed8 	.word	0x00023ed8
    a1dc:	00023ee0 	.word	0x00023ee0
    a1e0:	0002728d 	.word	0x0002728d
    a1e4:	00027081 	.word	0x00027081

0000a1e8 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
    a1e8:	898b      	ldrh	r3, [r1, #12]
{
    a1ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a1ee:	4604      	mov	r4, r0
    a1f0:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
    a1f2:	b963      	cbnz	r3, a20e <bt_att_recv+0x26>
    a1f4:	494c      	ldr	r1, [pc, #304]	; (a328 <bt_att_recv+0x140>)
    a1f6:	4b4d      	ldr	r3, [pc, #308]	; (a32c <bt_att_recv+0x144>)
		BT_ERR("Too small ATT PDU received");
    a1f8:	484d      	ldr	r0, [pc, #308]	; (a330 <bt_att_recv+0x148>)
    a1fa:	1ac9      	subs	r1, r1, r3
    a1fc:	08c9      	lsrs	r1, r1, #3
    a1fe:	0189      	lsls	r1, r1, #6
    a200:	f041 0101 	orr.w	r1, r1, #1
			BT_WARN("Ignoring unexpected indication");
    a204:	f014 ff64 	bl	1f0d0 <log_0>
}
    a208:	2000      	movs	r0, #0
    a20a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
    a20e:	2101      	movs	r1, #1
    a210:	f108 0008 	add.w	r0, r8, #8
    a214:	f018 fcff 	bl	22c16 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
    a218:	f854 3c08 	ldr.w	r3, [r4, #-8]
    a21c:	4605      	mov	r5, r0
    a21e:	2b00      	cmp	r3, #0
    a220:	d0f2      	beq.n	a208 <bt_att_recv+0x20>
		if (hdr->code == handlers[i].op) {
    a222:	4a44      	ldr	r2, [pc, #272]	; (a334 <bt_att_recv+0x14c>)
    a224:	7801      	ldrb	r1, [r0, #0]
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    a226:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    a22a:	2300      	movs	r3, #0
    a22c:	4694      	mov	ip, r2
		if (hdr->code == handlers[i].op) {
    a22e:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
    a232:	4288      	cmp	r0, r1
    a234:	d11d      	bne.n	a272 <bt_att_recv+0x8a>
		if (handler->type == ATT_REQUEST &&
    a236:	00d8      	lsls	r0, r3, #3
    a238:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    a23c:	789f      	ldrb	r7, [r3, #2]
    a23e:	2f01      	cmp	r7, #1
    a240:	d132      	bne.n	a2a8 <bt_att_recv+0xc0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a242:	f3bf 8f5b 	dmb	ish
    a246:	34c0      	adds	r4, #192	; 0xc0
    a248:	e854 3f00 	ldrex	r3, [r4]
    a24c:	f043 0201 	orr.w	r2, r3, #1
    a250:	e844 2100 	strex	r1, r2, [r4]
    a254:	2900      	cmp	r1, #0
    a256:	d1f7      	bne.n	a248 <bt_att_recv+0x60>
    a258:	f3bf 8f5b 	dmb	ish
    a25c:	07da      	lsls	r2, r3, #31
    a25e:	d53d      	bpl.n	a2dc <bt_att_recv+0xf4>
    a260:	4931      	ldr	r1, [pc, #196]	; (a328 <bt_att_recv+0x140>)
    a262:	4b32      	ldr	r3, [pc, #200]	; (a32c <bt_att_recv+0x144>)
			BT_WARN("Ignoring unexpected request");
    a264:	4834      	ldr	r0, [pc, #208]	; (a338 <bt_att_recv+0x150>)
    a266:	1ac9      	subs	r1, r1, r3
    a268:	08c9      	lsrs	r1, r1, #3
    a26a:	0189      	lsls	r1, r1, #6
    a26c:	f041 0102 	orr.w	r1, r1, #2
    a270:	e7c8      	b.n	a204 <bt_att_recv+0x1c>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    a272:	3301      	adds	r3, #1
    a274:	2b0d      	cmp	r3, #13
    a276:	d1da      	bne.n	a22e <bt_att_recv+0x46>
    a278:	4b2c      	ldr	r3, [pc, #176]	; (a32c <bt_att_recv+0x144>)
    a27a:	4a2b      	ldr	r2, [pc, #172]	; (a328 <bt_att_recv+0x140>)
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
    a27c:	482f      	ldr	r0, [pc, #188]	; (a33c <bt_att_recv+0x154>)
    a27e:	1ad2      	subs	r2, r2, r3
    a280:	08d2      	lsrs	r2, r2, #3
    a282:	0192      	lsls	r2, r2, #6
    a284:	f042 0202 	orr.w	r2, r2, #2
    a288:	f014 ff2f 	bl	1f0ea <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    a28c:	7829      	ldrb	r1, [r5, #0]
    a28e:	4608      	mov	r0, r1
    a290:	f017 fa88 	bl	217a4 <att_op_get_type>
    a294:	2800      	cmp	r0, #0
    a296:	d0b7      	beq.n	a208 <bt_att_recv+0x20>
	if (!req) {
    a298:	2900      	cmp	r1, #0
    a29a:	d0b5      	beq.n	a208 <bt_att_recv+0x20>
    a29c:	2306      	movs	r3, #6
    a29e:	2200      	movs	r2, #0
    a2a0:	4630      	mov	r0, r6
    a2a2:	f017 fcd9 	bl	21c58 <send_err_rsp.part.0>
    a2a6:	e7af      	b.n	a208 <bt_att_recv+0x20>
		} else if (handler->type == ATT_INDICATION &&
    a2a8:	2f05      	cmp	r7, #5
    a2aa:	d117      	bne.n	a2dc <bt_att_recv+0xf4>
    a2ac:	f3bf 8f5b 	dmb	ish
    a2b0:	34c0      	adds	r4, #192	; 0xc0
    a2b2:	e854 3f00 	ldrex	r3, [r4]
    a2b6:	f043 0202 	orr.w	r2, r3, #2
    a2ba:	e844 2100 	strex	r1, r2, [r4]
    a2be:	2900      	cmp	r1, #0
    a2c0:	d1f7      	bne.n	a2b2 <bt_att_recv+0xca>
    a2c2:	f3bf 8f5b 	dmb	ish
    a2c6:	079b      	lsls	r3, r3, #30
    a2c8:	d508      	bpl.n	a2dc <bt_att_recv+0xf4>
    a2ca:	4917      	ldr	r1, [pc, #92]	; (a328 <bt_att_recv+0x140>)
    a2cc:	4b17      	ldr	r3, [pc, #92]	; (a32c <bt_att_recv+0x144>)
			BT_WARN("Ignoring unexpected indication");
    a2ce:	481c      	ldr	r0, [pc, #112]	; (a340 <bt_att_recv+0x158>)
    a2d0:	1ac9      	subs	r1, r1, r3
    a2d2:	08c9      	lsrs	r1, r1, #3
    a2d4:	0189      	lsls	r1, r1, #6
    a2d6:	f041 0102 	orr.w	r1, r1, #2
    a2da:	e793      	b.n	a204 <bt_att_recv+0x1c>
	if (buf->len < handler->expect_len) {
    a2dc:	eb0c 0300 	add.w	r3, ip, r0
    a2e0:	f8b8 100c 	ldrh.w	r1, [r8, #12]
    a2e4:	785a      	ldrb	r2, [r3, #1]
    a2e6:	428a      	cmp	r2, r1
    a2e8:	d90e      	bls.n	a308 <bt_att_recv+0x120>
    a2ea:	4a10      	ldr	r2, [pc, #64]	; (a32c <bt_att_recv+0x144>)
    a2ec:	4b0e      	ldr	r3, [pc, #56]	; (a328 <bt_att_recv+0x140>)
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    a2ee:	4815      	ldr	r0, [pc, #84]	; (a344 <bt_att_recv+0x15c>)
    a2f0:	1a9b      	subs	r3, r3, r2
    a2f2:	08db      	lsrs	r3, r3, #3
    a2f4:	019b      	lsls	r3, r3, #6
    a2f6:	782a      	ldrb	r2, [r5, #0]
    a2f8:	f043 0301 	orr.w	r3, r3, #1
    a2fc:	f014 ff09 	bl	1f112 <log_2>
	if (handler->type == ATT_REQUEST && err) {
    a300:	2f01      	cmp	r7, #1
    a302:	d181      	bne.n	a208 <bt_att_recv+0x20>
		err = BT_ATT_ERR_INVALID_PDU;
    a304:	2304      	movs	r3, #4
    a306:	e00a      	b.n	a31e <bt_att_recv+0x136>
		err = handler->func(att_chan, buf);
    a308:	685b      	ldr	r3, [r3, #4]
    a30a:	4641      	mov	r1, r8
    a30c:	4630      	mov	r0, r6
    a30e:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    a310:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
    a312:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    a314:	f47f af78 	bne.w	a208 <bt_att_recv+0x20>
    a318:	2800      	cmp	r0, #0
    a31a:	f43f af75 	beq.w	a208 <bt_att_recv+0x20>
		send_err_rsp(att_chan, hdr->code, 0, err);
    a31e:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    a320:	2900      	cmp	r1, #0
    a322:	f43f af71 	beq.w	a208 <bt_att_recv+0x20>
    a326:	e7ba      	b.n	a29e <bt_att_recv+0xb6>
    a328:	00023ee0 	.word	0x00023ee0
    a32c:	00023ed8 	.word	0x00023ed8
    a330:	000272b2 	.word	0x000272b2
    a334:	00024698 	.word	0x00024698
    a338:	000272cd 	.word	0x000272cd
    a33c:	00027327 	.word	0x00027327
    a340:	000272e9 	.word	0x000272e9
    a344:	00027308 	.word	0x00027308

0000a348 <att_write_req>:
{
    a348:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a34c:	4604      	mov	r4, r0
    a34e:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
    a350:	f101 0008 	add.w	r0, r1, #8
    a354:	460d      	mov	r5, r1
    a356:	f018 fc66 	bl	22c26 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    a35a:	6823      	ldr	r3, [r4, #0]
			     handle, 0, buf->data, buf->len);
    a35c:	f8d5 9008 	ldr.w	r9, [r5, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
    a360:	89ad      	ldrh	r5, [r5, #12]
    a362:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    a364:	2101      	movs	r1, #1
    a366:	6818      	ldr	r0, [r3, #0]
    a368:	f017 ff9a 	bl	222a0 <bt_gatt_change_aware>
    a36c:	2800      	cmp	r0, #0
    a36e:	d03f      	beq.n	a3f0 <att_write_req+0xa8>
	if (!handle) {
    a370:	2e00      	cmp	r6, #0
    a372:	d03f      	beq.n	a3f4 <att_write_req+0xac>
	(void)memset(&data, 0, sizeof(data));
    a374:	2218      	movs	r2, #24
    a376:	2100      	movs	r1, #0
    a378:	4668      	mov	r0, sp
    a37a:	f019 fc4e 	bl	23c1a <memset>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
    a37e:	2200      	movs	r2, #0
    a380:	2113      	movs	r1, #19
    a382:	4620      	mov	r0, r4
    a384:	f7ff feec 	bl	a160 <bt_att_chan_create_pdu>
    a388:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    a38a:	b378      	cbz	r0, a3ec <att_write_req+0xa4>
	data.conn = chan->att->conn;
    a38c:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    a38e:	4a1a      	ldr	r2, [pc, #104]	; (a3f8 <att_write_req+0xb0>)
	data.conn = chan->att->conn;
    a390:	681b      	ldr	r3, [r3, #0]
    a392:	9300      	str	r3, [sp, #0]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    a394:	2301      	movs	r3, #1
    a396:	f88d 3014 	strb.w	r3, [sp, #20]
	data.req = req;
    a39a:	f04f 0812 	mov.w	r8, #18
	data.offset = offset;
    a39e:	2700      	movs	r7, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    a3a0:	466b      	mov	r3, sp
    a3a2:	4631      	mov	r1, r6
    a3a4:	4630      	mov	r0, r6
	data.len = len;
    a3a6:	f8ad 5010 	strh.w	r5, [sp, #16]
	data.req = req;
    a3aa:	f88d 8008 	strb.w	r8, [sp, #8]
	data.offset = offset;
    a3ae:	f8ad 7012 	strh.w	r7, [sp, #18]
	data.value = value;
    a3b2:	f8cd 900c 	str.w	r9, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    a3b6:	f017 fa22 	bl	217fe <bt_gatt_foreach_attr>
	if (data.err) {
    a3ba:	f89d 5014 	ldrb.w	r5, [sp, #20]
    a3be:	b175      	cbz	r5, a3de <att_write_req+0x96>
			net_buf_unref(data.buf);
    a3c0:	9801      	ldr	r0, [sp, #4]
    a3c2:	f010 f91b 	bl	1a5fc <net_buf_unref>
	if (!req) {
    a3c6:	f89d 3014 	ldrb.w	r3, [sp, #20]
    a3ca:	4632      	mov	r2, r6
    a3cc:	4641      	mov	r1, r8
    a3ce:	4620      	mov	r0, r4
    a3d0:	f017 fc42 	bl	21c58 <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    a3d4:	463d      	mov	r5, r7
}
    a3d6:	4628      	mov	r0, r5
    a3d8:	b007      	add	sp, #28
    a3da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (data.buf) {
    a3de:	9901      	ldr	r1, [sp, #4]
    a3e0:	2900      	cmp	r1, #0
    a3e2:	d0f8      	beq.n	a3d6 <att_write_req+0x8e>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    a3e4:	4620      	mov	r0, r4
    a3e6:	f7ff fdd1 	bl	9f8c <bt_att_chan_send_rsp.constprop.0>
    a3ea:	e7f4      	b.n	a3d6 <att_write_req+0x8e>
			return BT_ATT_ERR_UNLIKELY;
    a3ec:	250e      	movs	r5, #14
    a3ee:	e7f2      	b.n	a3d6 <att_write_req+0x8e>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    a3f0:	2512      	movs	r5, #18
    a3f2:	e7f0      	b.n	a3d6 <att_write_req+0x8e>
		return BT_ATT_ERR_INVALID_HANDLE;
    a3f4:	2501      	movs	r5, #1
    a3f6:	e7ee      	b.n	a3d6 <att_write_req+0x8e>
    a3f8:	00021b2f 	.word	0x00021b2f

0000a3fc <bt_att_create_pdu>:
{
    a3fc:	b570      	push	{r4, r5, r6, lr}
    a3fe:	460e      	mov	r6, r1
    a400:	4615      	mov	r5, r2
	att = att_get(conn);
    a402:	f7ff fd83 	bl	9f0c <att_get>
	if (!att) {
    a406:	b1c0      	cbz	r0, a43a <bt_att_create_pdu+0x3e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    a408:	6a43      	ldr	r3, [r0, #36]	; 0x24
	return list->head;
    a40a:	1c69      	adds	r1, r5, #1
    a40c:	b15b      	cbz	r3, a426 <bt_att_create_pdu+0x2a>
    a40e:	f5b3 708e 	subs.w	r0, r3, #284	; 0x11c
    a412:	d008      	beq.n	a426 <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    a414:	681b      	ldr	r3, [r3, #0]
    a416:	b10b      	cbz	r3, a41c <bt_att_create_pdu+0x20>
    a418:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
		if (len + sizeof(op) > chan->chan.tx.mtu) {
    a41c:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    a420:	4291      	cmp	r1, r2
    a422:	d90c      	bls.n	a43e <bt_att_create_pdu+0x42>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    a424:	b98b      	cbnz	r3, a44a <bt_att_create_pdu+0x4e>
    a426:	4a0e      	ldr	r2, [pc, #56]	; (a460 <bt_att_create_pdu+0x64>)
    a428:	4b0e      	ldr	r3, [pc, #56]	; (a464 <bt_att_create_pdu+0x68>)
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
    a42a:	480f      	ldr	r0, [pc, #60]	; (a468 <bt_att_create_pdu+0x6c>)
    a42c:	1ad2      	subs	r2, r2, r3
    a42e:	08d2      	lsrs	r2, r2, #3
    a430:	0192      	lsls	r2, r2, #6
    a432:	f042 0202 	orr.w	r2, r2, #2
    a436:	f014 fe58 	bl	1f0ea <log_1>
}
    a43a:	2000      	movs	r0, #0
    a43c:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
    a43e:	462a      	mov	r2, r5
    a440:	4631      	mov	r1, r6
}
    a442:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
    a446:	f7ff be8b 	b.w	a160 <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
    a44a:	f513 748e 	adds.w	r4, r3, #284	; 0x11c
    a44e:	d004      	beq.n	a45a <bt_att_create_pdu+0x5e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    a450:	f8d3 411c 	ldr.w	r4, [r3, #284]	; 0x11c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    a454:	b10c      	cbz	r4, a45a <bt_att_create_pdu+0x5e>
    a456:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
{
    a45a:	4618      	mov	r0, r3
    a45c:	4623      	mov	r3, r4
    a45e:	e7dd      	b.n	a41c <bt_att_create_pdu+0x20>
    a460:	00023ee0 	.word	0x00023ee0
    a464:	00023ed8 	.word	0x00023ed8
    a468:	00027341 	.word	0x00027341

0000a46c <att_read_group_req>:
{
    a46c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    a470:	7b0c      	ldrb	r4, [r1, #12]
    a472:	3c04      	subs	r4, #4
    a474:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    a476:	2c02      	cmp	r4, #2
{
    a478:	4605      	mov	r5, r0
    a47a:	b08c      	sub	sp, #48	; 0x30
    a47c:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    a47e:	d001      	beq.n	a484 <att_read_group_req+0x18>
    a480:	2c10      	cmp	r4, #16
    a482:	d16e      	bne.n	a562 <att_read_group_req+0xf6>
	return net_buf_simple_pull_mem(&buf->b, len);
    a484:	2104      	movs	r1, #4
    a486:	3008      	adds	r0, #8
    a488:	f018 fbc5 	bl	22c16 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    a48c:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
    a490:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    a492:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    a494:	1d01      	adds	r1, r0, #4
    a496:	4622      	mov	r2, r4
    a498:	4640      	mov	r0, r8
    a49a:	f016 fc37 	bl	20d0c <bt_uuid_create>
    a49e:	2800      	cmp	r0, #0
    a4a0:	d061      	beq.n	a566 <att_read_group_req+0xfa>
	if (!start || !end) {
    a4a2:	2e00      	cmp	r6, #0
    a4a4:	d03a      	beq.n	a51c <att_read_group_req+0xb0>
    a4a6:	2400      	movs	r4, #0
    a4a8:	2f00      	cmp	r7, #0
    a4aa:	d036      	beq.n	a51a <att_read_group_req+0xae>
	if (start > end) {
    a4ac:	42be      	cmp	r6, r7
    a4ae:	d835      	bhi.n	a51c <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    a4b0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    a4b4:	a901      	add	r1, sp, #4
    a4b6:	4640      	mov	r0, r8
    a4b8:	f88d 4004 	strb.w	r4, [sp, #4]
    a4bc:	f8ad 3006 	strh.w	r3, [sp, #6]
    a4c0:	f016 fbfa 	bl	20cb8 <bt_uuid_cmp>
    a4c4:	2800      	cmp	r0, #0
    a4c6:	d134      	bne.n	a532 <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
    a4c8:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    a4ca:	2214      	movs	r2, #20
    a4cc:	2100      	movs	r1, #0
    a4ce:	a807      	add	r0, sp, #28
    a4d0:	f019 fba3 	bl	23c1a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    a4d4:	2201      	movs	r2, #1
    a4d6:	2111      	movs	r1, #17
    a4d8:	4620      	mov	r0, r4
    a4da:	f7ff ff8f 	bl	a3fc <bt_att_create_pdu>
    a4de:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    a4e0:	2800      	cmp	r0, #0
    a4e2:	d040      	beq.n	a566 <att_read_group_req+0xfa>
	return net_buf_simple_add(&buf->b, len);
    a4e4:	2101      	movs	r1, #1
    a4e6:	3008      	adds	r0, #8
	data.uuid = uuid;
    a4e8:	e9cd 5807 	strd	r5, r8, [sp, #28]
    a4ec:	f018 fb6b 	bl	22bc6 <net_buf_simple_add>
	data.rsp->len = 0U;
    a4f0:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    a4f4:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    a4f6:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
    a4f8:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    a4fc:	4a1b      	ldr	r2, [pc, #108]	; (a56c <att_read_group_req+0x100>)
	data.group = NULL;
    a4fe:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    a502:	4639      	mov	r1, r7
    a504:	4630      	mov	r0, r6
    a506:	f017 f97a 	bl	217fe <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    a50a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a50c:	781c      	ldrb	r4, [r3, #0]
    a50e:	bb1c      	cbnz	r4, a558 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
    a510:	9809      	ldr	r0, [sp, #36]	; 0x24
    a512:	f010 f873 	bl	1a5fc <net_buf_unref>
	if (!req) {
    a516:	230a      	movs	r3, #10
    a518:	e018      	b.n	a54c <att_read_group_req+0xe0>
			*err = 0U;
    a51a:	463e      	mov	r6, r7
	if (!req) {
    a51c:	2301      	movs	r3, #1
    a51e:	4632      	mov	r2, r6
    a520:	2110      	movs	r1, #16
    a522:	4628      	mov	r0, r5
    a524:	f017 fb98 	bl	21c58 <send_err_rsp.part.0>
		return 0;
    a528:	2400      	movs	r4, #0
}
    a52a:	4620      	mov	r0, r4
    a52c:	b00c      	add	sp, #48	; 0x30
    a52e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    a532:	f642 0301 	movw	r3, #10241	; 0x2801
    a536:	a907      	add	r1, sp, #28
    a538:	4640      	mov	r0, r8
    a53a:	f88d 401c 	strb.w	r4, [sp, #28]
    a53e:	f8ad 301e 	strh.w	r3, [sp, #30]
    a542:	f016 fbb9 	bl	20cb8 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    a546:	2800      	cmp	r0, #0
    a548:	d0be      	beq.n	a4c8 <att_read_group_req+0x5c>
	if (!req) {
    a54a:	2310      	movs	r3, #16
    a54c:	4632      	mov	r2, r6
    a54e:	2110      	movs	r1, #16
    a550:	4628      	mov	r0, r5
    a552:	f017 fb81 	bl	21c58 <send_err_rsp.part.0>
		return 0;
    a556:	e7e8      	b.n	a52a <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    a558:	9909      	ldr	r1, [sp, #36]	; 0x24
    a55a:	4628      	mov	r0, r5
    a55c:	f7ff fd16 	bl	9f8c <bt_att_chan_send_rsp.constprop.0>
	return 0;
    a560:	e7e2      	b.n	a528 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
    a562:	2404      	movs	r4, #4
    a564:	e7e1      	b.n	a52a <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
    a566:	240e      	movs	r4, #14
    a568:	e7df      	b.n	a52a <att_read_group_req+0xbe>
    a56a:	bf00      	nop
    a56c:	00009b6d 	.word	0x00009b6d

0000a570 <att_read_mult_req>:
{
    a570:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    a574:	6886      	ldr	r6, [r0, #8]
{
    a576:	b085      	sub	sp, #20
	(void)memset(&data, 0, sizeof(data));
    a578:	2210      	movs	r2, #16
{
    a57a:	4604      	mov	r4, r0
    a57c:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
    a57e:	4668      	mov	r0, sp
    a580:	2100      	movs	r1, #0
    a582:	f019 fb4a 	bl	23c1a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    a586:	2200      	movs	r2, #0
    a588:	210f      	movs	r1, #15
    a58a:	4630      	mov	r0, r6
    a58c:	f7ff ff36 	bl	a3fc <bt_att_create_pdu>
    a590:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    a592:	b358      	cbz	r0, a5ec <att_read_mult_req+0x7c>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    a594:	f8df 9058 	ldr.w	r9, [pc, #88]	; a5f0 <att_read_mult_req+0x80>
	data.chan = chan;
    a598:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
    a59a:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    a59e:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
    a5a2:	89ab      	ldrh	r3, [r5, #12]
    a5a4:	2b01      	cmp	r3, #1
    a5a6:	d804      	bhi.n	a5b2 <att_read_mult_req+0x42>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    a5a8:	9902      	ldr	r1, [sp, #8]
    a5aa:	4620      	mov	r0, r4
    a5ac:	f7ff fcee 	bl	9f8c <bt_att_chan_send_rsp.constprop.0>
    a5b0:	e018      	b.n	a5e4 <att_read_mult_req+0x74>
    a5b2:	4638      	mov	r0, r7
    a5b4:	f018 fb37 	bl	22c26 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    a5b8:	466b      	mov	r3, sp
    a5ba:	464a      	mov	r2, r9
    a5bc:	4601      	mov	r1, r0
    a5be:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    a5c0:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    a5c4:	f017 f91b 	bl	217fe <bt_gatt_foreach_attr>
		if (data.err) {
    a5c8:	f89d 300c 	ldrb.w	r3, [sp, #12]
    a5cc:	2b00      	cmp	r3, #0
    a5ce:	d0e8      	beq.n	a5a2 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    a5d0:	9802      	ldr	r0, [sp, #8]
    a5d2:	f010 f813 	bl	1a5fc <net_buf_unref>
	if (!req) {
    a5d6:	f89d 300c 	ldrb.w	r3, [sp, #12]
    a5da:	4632      	mov	r2, r6
    a5dc:	210e      	movs	r1, #14
    a5de:	4620      	mov	r0, r4
    a5e0:	f017 fb3a 	bl	21c58 <send_err_rsp.part.0>
	return 0;
    a5e4:	2000      	movs	r0, #0
}
    a5e6:	b005      	add	sp, #20
    a5e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    a5ec:	200e      	movs	r0, #14
    a5ee:	e7fa      	b.n	a5e6 <att_read_mult_req+0x76>
    a5f0:	00021c05 	.word	0x00021c05

0000a5f4 <att_read_rsp>:
{
    a5f4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    a5f8:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
    a5fc:	4605      	mov	r5, r0
    a5fe:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
    a600:	4640      	mov	r0, r8
    a602:	2101      	movs	r1, #1
{
    a604:	4614      	mov	r4, r2
    a606:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
    a608:	f017 fe4a 	bl	222a0 <bt_gatt_change_aware>
    a60c:	b388      	cbz	r0, a672 <att_read_rsp+0x7e>
	if (!handle) {
    a60e:	b396      	cbz	r6, a676 <att_read_rsp+0x82>
	(void)memset(&data, 0, sizeof(data));
    a610:	2210      	movs	r2, #16
    a612:	2100      	movs	r1, #0
    a614:	4668      	mov	r0, sp
    a616:	f019 fb00 	bl	23c1a <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    a61a:	2200      	movs	r2, #0
    a61c:	4621      	mov	r1, r4
    a61e:	4640      	mov	r0, r8
    a620:	f7ff feec 	bl	a3fc <bt_att_create_pdu>
    a624:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    a626:	b340      	cbz	r0, a67a <att_read_rsp+0x86>
	data.offset = offset;
    a628:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    a62c:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    a630:	2301      	movs	r3, #1
    a632:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    a636:	4a12      	ldr	r2, [pc, #72]	; (a680 <att_read_rsp+0x8c>)
	data.chan = chan;
    a638:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    a63a:	466b      	mov	r3, sp
    a63c:	4631      	mov	r1, r6
    a63e:	4630      	mov	r0, r6
    a640:	f017 f8dd 	bl	217fe <bt_gatt_foreach_attr>
	if (data.err) {
    a644:	f89d 400c 	ldrb.w	r4, [sp, #12]
    a648:	b174      	cbz	r4, a668 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
    a64a:	9802      	ldr	r0, [sp, #8]
    a64c:	f00f ffd6 	bl	1a5fc <net_buf_unref>
	if (!req) {
    a650:	f89d 300c 	ldrb.w	r3, [sp, #12]
    a654:	4632      	mov	r2, r6
    a656:	4639      	mov	r1, r7
    a658:	4628      	mov	r0, r5
    a65a:	f017 fafd 	bl	21c58 <send_err_rsp.part.0>
		return 0;
    a65e:	2400      	movs	r4, #0
}
    a660:	4620      	mov	r0, r4
    a662:	b004      	add	sp, #16
    a664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    a668:	9902      	ldr	r1, [sp, #8]
    a66a:	4628      	mov	r0, r5
    a66c:	f7ff fc8e 	bl	9f8c <bt_att_chan_send_rsp.constprop.0>
	return 0;
    a670:	e7f6      	b.n	a660 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    a672:	2412      	movs	r4, #18
    a674:	e7f4      	b.n	a660 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
    a676:	2401      	movs	r4, #1
    a678:	e7f2      	b.n	a660 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    a67a:	240e      	movs	r4, #14
    a67c:	e7f0      	b.n	a660 <att_read_rsp+0x6c>
    a67e:	bf00      	nop
    a680:	00021c05 	.word	0x00021c05

0000a684 <att_read_type_req>:
{
    a684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    a688:	7b0c      	ldrb	r4, [r1, #12]
    a68a:	3c04      	subs	r4, #4
    a68c:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    a68e:	2c02      	cmp	r4, #2
{
    a690:	4605      	mov	r5, r0
    a692:	b08c      	sub	sp, #48	; 0x30
    a694:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    a696:	d001      	beq.n	a69c <att_read_type_req+0x18>
    a698:	2c10      	cmp	r4, #16
    a69a:	d14f      	bne.n	a73c <att_read_type_req+0xb8>
	return net_buf_simple_pull_mem(&buf->b, len);
    a69c:	2104      	movs	r1, #4
    a69e:	3008      	adds	r0, #8
    a6a0:	f018 fab9 	bl	22c16 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    a6a4:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
    a6a8:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    a6aa:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    a6ac:	1d01      	adds	r1, r0, #4
    a6ae:	4622      	mov	r2, r4
    a6b0:	4640      	mov	r0, r8
    a6b2:	f016 fb2b 	bl	20d0c <bt_uuid_create>
    a6b6:	b188      	cbz	r0, a6dc <att_read_type_req+0x58>
	if (!start || !end) {
    a6b8:	b19e      	cbz	r6, a6e2 <att_read_type_req+0x5e>
    a6ba:	b18f      	cbz	r7, a6e0 <att_read_type_req+0x5c>
	if (start > end) {
    a6bc:	42b7      	cmp	r7, r6
    a6be:	d310      	bcc.n	a6e2 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
    a6c0:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
    a6c2:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    a6c4:	2100      	movs	r1, #0
    a6c6:	eb0d 0002 	add.w	r0, sp, r2
    a6ca:	f019 faa6 	bl	23c1a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    a6ce:	2201      	movs	r2, #1
    a6d0:	2109      	movs	r1, #9
    a6d2:	4620      	mov	r0, r4
    a6d4:	f7ff fe92 	bl	a3fc <bt_att_create_pdu>
    a6d8:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    a6da:	b968      	cbnz	r0, a6f8 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
    a6dc:	240e      	movs	r4, #14
    a6de:	e007      	b.n	a6f0 <att_read_type_req+0x6c>
			*err = 0U;
    a6e0:	463e      	mov	r6, r7
	if (!req) {
    a6e2:	2301      	movs	r3, #1
    a6e4:	4632      	mov	r2, r6
    a6e6:	2108      	movs	r1, #8
    a6e8:	4628      	mov	r0, r5
    a6ea:	f017 fab5 	bl	21c58 <send_err_rsp.part.0>
		return 0;
    a6ee:	2400      	movs	r4, #0
}
    a6f0:	4620      	mov	r0, r4
    a6f2:	b00c      	add	sp, #48	; 0x30
    a6f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
    a6f8:	2101      	movs	r1, #1
    a6fa:	3008      	adds	r0, #8
	data.uuid = uuid;
    a6fc:	e9cd 5806 	strd	r5, r8, [sp, #24]
    a700:	f018 fa61 	bl	22bc6 <net_buf_simple_add>
	data.rsp->len = 0U;
    a704:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    a708:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    a70a:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    a70c:	4a0c      	ldr	r2, [pc, #48]	; (a740 <att_read_type_req+0xbc>)
	data.rsp->len = 0U;
    a70e:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    a712:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    a714:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    a718:	4630      	mov	r0, r6
    a71a:	ab06      	add	r3, sp, #24
    a71c:	f017 f86f 	bl	217fe <bt_gatt_foreach_attr>
	if (data.err) {
    a720:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    a724:	b12c      	cbz	r4, a732 <att_read_type_req+0xae>
		net_buf_unref(data.buf);
    a726:	9808      	ldr	r0, [sp, #32]
    a728:	f00f ff68 	bl	1a5fc <net_buf_unref>
	if (!req) {
    a72c:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    a730:	e7d8      	b.n	a6e4 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    a732:	9908      	ldr	r1, [sp, #32]
    a734:	4628      	mov	r0, r5
    a736:	f7ff fc29 	bl	9f8c <bt_att_chan_send_rsp.constprop.0>
	return 0;
    a73a:	e7d9      	b.n	a6f0 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
    a73c:	2404      	movs	r4, #4
    a73e:	e7d7      	b.n	a6f0 <att_read_type_req+0x6c>
    a740:	00009c19 	.word	0x00009c19

0000a744 <att_find_type_req>:
{
    a744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a748:	4688      	mov	r8, r1
    a74a:	b086      	sub	sp, #24
    a74c:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
    a74e:	2106      	movs	r1, #6
    a750:	f108 0008 	add.w	r0, r8, #8
    a754:	f018 fa5f 	bl	22c16 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    a758:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
    a75a:	b317      	cbz	r7, a7a2 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
    a75c:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
    a760:	f1b9 0f00 	cmp.w	r9, #0
    a764:	d01c      	beq.n	a7a0 <att_find_type_req+0x5c>
	if (start > end) {
    a766:	454f      	cmp	r7, r9
    a768:	d81b      	bhi.n	a7a2 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
    a76a:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    a76c:	f8ad 3002 	strh.w	r3, [sp, #2]
    a770:	2400      	movs	r4, #0
    a772:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    a776:	a901      	add	r1, sp, #4
    a778:	4668      	mov	r0, sp
	value = buf->data;
    a77a:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    a77e:	f88d 4000 	strb.w	r4, [sp]
    a782:	f88d 4004 	strb.w	r4, [sp, #4]
    a786:	f8ad 3006 	strh.w	r3, [sp, #6]
    a78a:	f016 fa95 	bl	20cb8 <bt_uuid_cmp>
    a78e:	4606      	mov	r6, r0
    a790:	b190      	cbz	r0, a7b8 <att_find_type_req+0x74>
	if (!req) {
    a792:	230a      	movs	r3, #10
    a794:	463a      	mov	r2, r7
    a796:	2106      	movs	r1, #6
    a798:	4628      	mov	r0, r5
    a79a:	f017 fa5d 	bl	21c58 <send_err_rsp.part.0>
		return 0;
    a79e:	e007      	b.n	a7b0 <att_find_type_req+0x6c>
			*err = 0U;
    a7a0:	464f      	mov	r7, r9
	if (!req) {
    a7a2:	2301      	movs	r3, #1
    a7a4:	463a      	mov	r2, r7
    a7a6:	2106      	movs	r1, #6
    a7a8:	4628      	mov	r0, r5
    a7aa:	f017 fa55 	bl	21c58 <send_err_rsp.part.0>
		return 0;
    a7ae:	2400      	movs	r4, #0
}
    a7b0:	4620      	mov	r0, r4
    a7b2:	b006      	add	sp, #24
    a7b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    a7b8:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
    a7bc:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    a7c0:	4601      	mov	r1, r0
    a7c2:	2214      	movs	r2, #20
    a7c4:	a801      	add	r0, sp, #4
    a7c6:	f019 fa28 	bl	23c1a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    a7ca:	4632      	mov	r2, r6
    a7cc:	2107      	movs	r1, #7
    a7ce:	4640      	mov	r0, r8
    a7d0:	f7ff fe14 	bl	a3fc <bt_att_create_pdu>
    a7d4:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    a7d6:	b1d8      	cbz	r0, a810 <att_find_type_req+0xcc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    a7d8:	230a      	movs	r3, #10
    a7da:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    a7de:	4a0d      	ldr	r2, [pc, #52]	; (a814 <att_find_type_req+0xd0>)
	data.value_len = value_len;
    a7e0:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    a7e4:	ab01      	add	r3, sp, #4
    a7e6:	4649      	mov	r1, r9
    a7e8:	4638      	mov	r0, r7
	data.value = value;
    a7ea:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
    a7ee:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    a7f0:	f017 f805 	bl	217fe <bt_gatt_foreach_attr>
	if (data.err) {
    a7f4:	f89d 4015 	ldrb.w	r4, [sp, #21]
    a7f8:	b12c      	cbz	r4, a806 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    a7fa:	9802      	ldr	r0, [sp, #8]
    a7fc:	f00f fefe 	bl	1a5fc <net_buf_unref>
	if (!req) {
    a800:	f89d 3015 	ldrb.w	r3, [sp, #21]
    a804:	e7ce      	b.n	a7a4 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    a806:	9902      	ldr	r1, [sp, #8]
    a808:	4628      	mov	r0, r5
    a80a:	f7ff fbbf 	bl	9f8c <bt_att_chan_send_rsp.constprop.0>
	return 0;
    a80e:	e7cf      	b.n	a7b0 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    a810:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    a812:	e7cd      	b.n	a7b0 <att_find_type_req+0x6c>
    a814:	00009cc1 	.word	0x00009cc1

0000a818 <att_find_info_req>:
{
    a818:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    a81a:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    a81c:	881e      	ldrh	r6, [r3, #0]
{
    a81e:	b085      	sub	sp, #20
    a820:	4605      	mov	r5, r0
	if (!start || !end) {
    a822:	b19e      	cbz	r6, a84c <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    a824:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    a826:	b184      	cbz	r4, a84a <att_find_info_req+0x32>
	if (start > end) {
    a828:	42b4      	cmp	r4, r6
    a82a:	d30f      	bcc.n	a84c <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
    a82c:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
    a82e:	2210      	movs	r2, #16
    a830:	2100      	movs	r1, #0
    a832:	4668      	mov	r0, sp
    a834:	f019 f9f1 	bl	23c1a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    a838:	2200      	movs	r2, #0
    a83a:	2105      	movs	r1, #5
    a83c:	4638      	mov	r0, r7
    a83e:	f7ff fddd 	bl	a3fc <bt_att_create_pdu>
    a842:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    a844:	b958      	cbnz	r0, a85e <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    a846:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
    a848:	e007      	b.n	a85a <att_find_info_req+0x42>
			*err = 0U;
    a84a:	4626      	mov	r6, r4
	if (!req) {
    a84c:	2301      	movs	r3, #1
    a84e:	4632      	mov	r2, r6
    a850:	2104      	movs	r1, #4
    a852:	4628      	mov	r0, r5
    a854:	f017 fa00 	bl	21c58 <send_err_rsp.part.0>
	return 0;
    a858:	2000      	movs	r0, #0
}
    a85a:	b005      	add	sp, #20
    a85c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    a85e:	4621      	mov	r1, r4
    a860:	4a08      	ldr	r2, [pc, #32]	; (a884 <att_find_info_req+0x6c>)
	data.chan = chan;
    a862:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    a864:	466b      	mov	r3, sp
    a866:	4630      	mov	r0, r6
    a868:	f016 ffc9 	bl	217fe <bt_gatt_foreach_attr>
	if (!data.rsp) {
    a86c:	9c02      	ldr	r4, [sp, #8]
    a86e:	b924      	cbnz	r4, a87a <att_find_info_req+0x62>
		net_buf_unref(data.buf);
    a870:	9801      	ldr	r0, [sp, #4]
    a872:	f00f fec3 	bl	1a5fc <net_buf_unref>
	if (!req) {
    a876:	230a      	movs	r3, #10
    a878:	e7e9      	b.n	a84e <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    a87a:	9901      	ldr	r1, [sp, #4]
    a87c:	4628      	mov	r0, r5
    a87e:	f7ff fb85 	bl	9f8c <bt_att_chan_send_rsp.constprop.0>
    a882:	e7e9      	b.n	a858 <att_find_info_req+0x40>
    a884:	000219b1 	.word	0x000219b1

0000a888 <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
    a888:	b513      	push	{r0, r1, r4, lr}
    a88a:	4602      	mov	r2, r0
    a88c:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    a88e:	4808      	ldr	r0, [pc, #32]	; (a8b0 <bt_att_req_alloc+0x28>)
    a890:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
    a892:	2400      	movs	r4, #0
    a894:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    a896:	f012 fcb9 	bl	1d20c <k_mem_slab_alloc>
    a89a:	4601      	mov	r1, r0
    a89c:	b930      	cbnz	r0, a8ac <bt_att_req_alloc+0x24>
    a89e:	9801      	ldr	r0, [sp, #4]
    a8a0:	221c      	movs	r2, #28
    a8a2:	f019 f9ba 	bl	23c1a <memset>

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));

	return req;
    a8a6:	9801      	ldr	r0, [sp, #4]
}
    a8a8:	b002      	add	sp, #8
    a8aa:	bd10      	pop	{r4, pc}
		return NULL;
    a8ac:	4620      	mov	r0, r4
    a8ae:	e7fb      	b.n	a8a8 <bt_att_req_alloc+0x20>
    a8b0:	200008d0 	.word	0x200008d0

0000a8b4 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    a8b4:	b507      	push	{r0, r1, r2, lr}
    a8b6:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
    a8b8:	6880      	ldr	r0, [r0, #8]
    a8ba:	b120      	cbz	r0, a8c6 <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
    a8bc:	f00f fe9e 	bl	1a5fc <net_buf_unref>
		req->buf = NULL;
    a8c0:	9b01      	ldr	r3, [sp, #4]
    a8c2:	2200      	movs	r2, #0
    a8c4:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
    a8c6:	4803      	ldr	r0, [pc, #12]	; (a8d4 <bt_att_req_free+0x20>)
    a8c8:	a901      	add	r1, sp, #4
    a8ca:	f012 fcd1 	bl	1d270 <k_mem_slab_free>
}
    a8ce:	b003      	add	sp, #12
    a8d0:	f85d fb04 	ldr.w	pc, [sp], #4
    a8d4:	200008d0 	.word	0x200008d0

0000a8d8 <att_handle_rsp>:
{
    a8d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	bool pending = k_work_delayable_is_pending(&work->work);
    a8dc:	f100 05e8 	add.w	r5, r0, #232	; 0xe8
    a8e0:	4604      	mov	r4, r0
	return k_work_delayable_busy_get(dwork) != 0;
    a8e2:	4628      	mov	r0, r5
    a8e4:	460f      	mov	r7, r1
    a8e6:	4690      	mov	r8, r2
    a8e8:	461e      	mov	r6, r3
    a8ea:	f018 ff74 	bl	237d6 <k_work_delayable_busy_get>
	int rc = k_work_cancel_delayable(&work->work);
    a8ee:	4628      	mov	r0, r5
    a8f0:	f018 ff85 	bl	237fe <k_work_cancel_delayable>
	if (!chan->req) {
    a8f4:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
    a8f8:	b9e5      	cbnz	r5, a934 <att_handle_rsp+0x5c>
    a8fa:	4919      	ldr	r1, [pc, #100]	; (a960 <att_handle_rsp+0x88>)
    a8fc:	4819      	ldr	r0, [pc, #100]	; (a964 <att_handle_rsp+0x8c>)
    a8fe:	1a40      	subs	r0, r0, r1
    a900:	08c0      	lsrs	r0, r0, #3
		BT_WARN("No pending ATT request");
    a902:	0180      	lsls	r0, r0, #6
    a904:	f040 0102 	orr.w	r1, r0, #2
    a908:	4817      	ldr	r0, [pc, #92]	; (a968 <att_handle_rsp+0x90>)
    a90a:	f014 fbe1 	bl	1f0d0 <log_0>
	bt_att_func_t func = NULL;
    a90e:	46aa      	mov	sl, r5
	att_req_send_process(chan->att);
    a910:	6820      	ldr	r0, [r4, #0]
    a912:	f017 f8e0 	bl	21ad6 <att_req_send_process>
	if (func) {
    a916:	f1ba 0f00 	cmp.w	sl, #0
    a91a:	d007      	beq.n	a92c <att_handle_rsp+0x54>
		func(chan->att->conn, err, pdu, len, params);
    a91c:	6820      	ldr	r0, [r4, #0]
    a91e:	f8cd 9000 	str.w	r9, [sp]
    a922:	6800      	ldr	r0, [r0, #0]
    a924:	4643      	mov	r3, r8
    a926:	463a      	mov	r2, r7
    a928:	4631      	mov	r1, r6
    a92a:	47d0      	blx	sl
}
    a92c:	2000      	movs	r0, #0
    a92e:	b003      	add	sp, #12
    a930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->req == &cancel) {
    a934:	4b0d      	ldr	r3, [pc, #52]	; (a96c <att_handle_rsp+0x94>)
    a936:	429d      	cmp	r5, r3
    a938:	f04f 0b00 	mov.w	fp, #0
    a93c:	d103      	bne.n	a946 <att_handle_rsp+0x6e>
		chan->req = NULL;
    a93e:	f8c4 b0cc 	str.w	fp, [r4, #204]	; 0xcc
	bt_att_func_t func = NULL;
    a942:	46da      	mov	sl, fp
		goto process;
    a944:	e7e4      	b.n	a910 <att_handle_rsp+0x38>
	func = chan->req->func;
    a946:	f8d5 a004 	ldr.w	sl, [r5, #4]
	chan->req->func = NULL;
    a94a:	f8c5 b004 	str.w	fp, [r5, #4]
	bt_att_req_free(chan->req);
    a94e:	4628      	mov	r0, r5
	params = chan->req->user_data;
    a950:	f8d5 9018 	ldr.w	r9, [r5, #24]
	bt_att_req_free(chan->req);
    a954:	f7ff ffae 	bl	a8b4 <bt_att_req_free>
	chan->req = NULL;
    a958:	f8c4 b0cc 	str.w	fp, [r4, #204]	; 0xcc
    a95c:	e7d8      	b.n	a910 <att_handle_rsp+0x38>
    a95e:	bf00      	nop
    a960:	00023ed8 	.word	0x00023ed8
    a964:	00023ee0 	.word	0x00023ee0
    a968:	0002735c 	.word	0x0002735c
    a96c:	20001884 	.word	0x20001884

0000a970 <bt_att_disconnected>:
{
    a970:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
    a972:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
    a976:	b085      	sub	sp, #20
    a978:	4604      	mov	r4, r0
	if (!att_chan->att) {
    a97a:	b385      	cbz	r5, a9de <bt_att_disconnected+0x6e>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
    a97c:	f500 718a 	add.w	r1, r0, #276	; 0x114
    a980:	f105 0024 	add.w	r0, r5, #36	; 0x24
    a984:	f016 fed3 	bl	2172e <sys_slist_find_and_remove>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
    a988:	f1a4 0608 	sub.w	r6, r4, #8
    a98c:	f104 07c8 	add.w	r7, r4, #200	; 0xc8
    a990:	2200      	movs	r2, #0
    a992:	2300      	movs	r3, #0
    a994:	4638      	mov	r0, r7
    a996:	f018 f8c5 	bl	22b24 <net_buf_get>
    a99a:	4602      	mov	r2, r0
    a99c:	bb08      	cbnz	r0, a9e2 <bt_att_disconnected+0x72>
	if (chan->req) {
    a99e:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
    a9a2:	b123      	cbz	r3, a9ae <bt_att_disconnected+0x3e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
    a9a4:	4601      	mov	r1, r0
    a9a6:	230e      	movs	r3, #14
    a9a8:	4630      	mov	r0, r6
    a9aa:	f7ff ff95 	bl	a8d8 <att_handle_rsp>
	chan->att = NULL;
    a9ae:	2300      	movs	r3, #0
    a9b0:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
    a9b4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    a9b6:	b993      	cbnz	r3, a9de <bt_att_disconnected+0x6e>
	att_reset(att);
    a9b8:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
    a9ba:	9803      	ldr	r0, [sp, #12]
    a9bc:	2200      	movs	r2, #0
    a9be:	2300      	movs	r3, #0
    a9c0:	300c      	adds	r0, #12
    a9c2:	f018 f8af 	bl	22b24 <net_buf_get>
    a9c6:	b978      	cbnz	r0, a9e8 <bt_att_disconnected+0x78>
	att->conn = NULL;
    a9c8:	9a03      	ldr	r2, [sp, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    a9ca:	6856      	ldr	r6, [r2, #4]
	att->conn = NULL;
    a9cc:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    a9ce:	b976      	cbnz	r6, a9ee <bt_att_disconnected+0x7e>
	k_mem_slab_free(&att_slab, (void **)&att);
    a9d0:	4813      	ldr	r0, [pc, #76]	; (aa20 <bt_att_disconnected+0xb0>)
    a9d2:	a903      	add	r1, sp, #12
    a9d4:	f012 fc4c 	bl	1d270 <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
    a9d8:	6820      	ldr	r0, [r4, #0]
    a9da:	f000 fe5b 	bl	b694 <bt_gatt_disconnected>
}
    a9de:	b005      	add	sp, #20
    a9e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
    a9e2:	f00f fe0b 	bl	1a5fc <net_buf_unref>
    a9e6:	e7d3      	b.n	a990 <bt_att_disconnected+0x20>
		net_buf_unref(buf);
    a9e8:	f00f fe08 	bl	1a5fc <net_buf_unref>
    a9ec:	e7e5      	b.n	a9ba <bt_att_disconnected+0x4a>
	return node->next;
    a9ee:	6835      	ldr	r5, [r6, #0]
    a9f0:	2d00      	cmp	r5, #0
    a9f2:	bf38      	it	cc
    a9f4:	2500      	movcc	r5, #0
		if (req->func) {
    a9f6:	6877      	ldr	r7, [r6, #4]
    a9f8:	b137      	cbz	r7, aa08 <bt_att_disconnected+0x98>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
    a9fa:	69b3      	ldr	r3, [r6, #24]
    a9fc:	9300      	str	r3, [sp, #0]
    a9fe:	2300      	movs	r3, #0
    aa00:	461a      	mov	r2, r3
    aa02:	210e      	movs	r1, #14
    aa04:	4618      	mov	r0, r3
    aa06:	47b8      	blx	r7
		bt_att_req_free(req);
    aa08:	4630      	mov	r0, r6
    aa0a:	f7ff ff53 	bl	a8b4 <bt_att_req_free>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    aa0e:	2d00      	cmp	r5, #0
    aa10:	d0de      	beq.n	a9d0 <bt_att_disconnected+0x60>
    aa12:	682b      	ldr	r3, [r5, #0]
    aa14:	2b00      	cmp	r3, #0
    aa16:	bf38      	it	cc
    aa18:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    aa1a:	462e      	mov	r6, r5
    aa1c:	461d      	mov	r5, r3
    aa1e:	e7ea      	b.n	a9f6 <bt_att_disconnected+0x86>
    aa20:	20000898 	.word	0x20000898

0000aa24 <att_timeout>:
    aa24:	4b08      	ldr	r3, [pc, #32]	; (aa48 <att_timeout+0x24>)
    aa26:	4909      	ldr	r1, [pc, #36]	; (aa4c <att_timeout+0x28>)
{
    aa28:	b510      	push	{r4, lr}
    aa2a:	1ac9      	subs	r1, r1, r3
    aa2c:	08c9      	lsrs	r1, r1, #3
	BT_ERR("ATT Timeout");
    aa2e:	0189      	lsls	r1, r1, #6
{
    aa30:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    aa32:	f041 0101 	orr.w	r1, r1, #1
    aa36:	4806      	ldr	r0, [pc, #24]	; (aa50 <att_timeout+0x2c>)
    aa38:	f014 fb4a 	bl	1f0d0 <log_0>
	bt_att_disconnected(&chan->chan.chan);
    aa3c:	f1a4 00e0 	sub.w	r0, r4, #224	; 0xe0
}
    aa40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
    aa44:	f7ff bf94 	b.w	a970 <bt_att_disconnected>
    aa48:	00023ed8 	.word	0x00023ed8
    aa4c:	00023ee0 	.word	0x00023ee0
    aa50:	00027373 	.word	0x00027373

0000aa54 <gatt_indicate>:
}
#endif

static int gatt_indicate(struct bt_conn *conn, uint16_t handle,
			 struct bt_gatt_indicate_params *params)
{
    aa54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    aa58:	4680      	mov	r8, r0
    aa5a:	4689      	mov	r9, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    aa5c:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
    aa60:	2100      	movs	r1, #0
	    params->func == sc_restore_rsp)) &&
	    !bt_gatt_change_aware(conn, false)) {
		return -EAGAIN;
	}
#endif
	len = sizeof(*ind) + params->len;
    aa62:	8a96      	ldrh	r6, [r2, #20]
{
    aa64:	4615      	mov	r5, r2
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    aa66:	f7ff ff0f 	bl	a888 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
    aa6a:	3602      	adds	r6, #2
	if (!req) {
    aa6c:	4604      	mov	r4, r0
    aa6e:	b920      	cbnz	r0, aa7a <gatt_indicate+0x26>

	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
	if (!buf) {
		BT_WARN("No buffer available to send indication");
		bt_att_req_free(req);
		return -ENOMEM;
    aa70:	f06f 050b 	mvn.w	r5, #11
	if (err) {
		bt_att_req_free(req);
	}

	return err;
}
    aa74:	4628      	mov	r0, r5
    aa76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req->encode = encode;
    aa7a:	2300      	movs	r3, #0
    aa7c:	60c3      	str	r3, [r0, #12]
	req->att_op = op;
    aa7e:	211d      	movs	r1, #29
	req->func = func;
    aa80:	4b1b      	ldr	r3, [pc, #108]	; (aaf0 <gatt_indicate+0x9c>)
	req->len = len;
    aa82:	6146      	str	r6, [r0, #20]
	req->att_op = op;
    aa84:	7441      	strb	r1, [r0, #17]
	req->func = func;
    aa86:	6043      	str	r3, [r0, #4]
	req->user_data = params;
    aa88:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
    aa8a:	4632      	mov	r2, r6
    aa8c:	4640      	mov	r0, r8
    aa8e:	f7ff fcb5 	bl	a3fc <bt_att_create_pdu>
	if (!buf) {
    aa92:	4606      	mov	r6, r0
    aa94:	b968      	cbnz	r0, aab2 <gatt_indicate+0x5e>
    aa96:	4b17      	ldr	r3, [pc, #92]	; (aaf4 <gatt_indicate+0xa0>)
    aa98:	4917      	ldr	r1, [pc, #92]	; (aaf8 <gatt_indicate+0xa4>)
		BT_WARN("No buffer available to send indication");
    aa9a:	4818      	ldr	r0, [pc, #96]	; (aafc <gatt_indicate+0xa8>)
    aa9c:	1ac9      	subs	r1, r1, r3
    aa9e:	08c9      	lsrs	r1, r1, #3
    aaa0:	0189      	lsls	r1, r1, #6
    aaa2:	f041 0102 	orr.w	r1, r1, #2
    aaa6:	f014 fb13 	bl	1f0d0 <log_0>
		bt_att_req_free(req);
    aaaa:	4620      	mov	r0, r4
    aaac:	f7ff ff02 	bl	a8b4 <bt_att_req_free>
    aab0:	e7de      	b.n	aa70 <gatt_indicate+0x1c>
	return net_buf_simple_add(&buf->b, len);
    aab2:	f100 0a08 	add.w	sl, r0, #8
    aab6:	2102      	movs	r1, #2
    aab8:	4650      	mov	r0, sl
    aaba:	f018 f884 	bl	22bc6 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    aabe:	4607      	mov	r7, r0
    aac0:	8aa9      	ldrh	r1, [r5, #20]
    aac2:	f827 9b02 	strh.w	r9, [r7], #2
    aac6:	4650      	mov	r0, sl
    aac8:	f018 f87d 	bl	22bc6 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    aacc:	8aaa      	ldrh	r2, [r5, #20]
    aace:	6929      	ldr	r1, [r5, #16]
    aad0:	4638      	mov	r0, r7
    aad2:	f019 f894 	bl	23bfe <memcpy>
	req->buf = buf;
    aad6:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
    aad8:	4621      	mov	r1, r4
    aada:	4640      	mov	r0, r8
    aadc:	f017 f9b6 	bl	21e4c <bt_att_req_send>
	if (err) {
    aae0:	4605      	mov	r5, r0
    aae2:	2800      	cmp	r0, #0
    aae4:	d0c6      	beq.n	aa74 <gatt_indicate+0x20>
		bt_att_req_free(req);
    aae6:	4620      	mov	r0, r4
    aae8:	f7ff fee4 	bl	a8b4 <bt_att_req_free>
    aaec:	e7c2      	b.n	aa74 <gatt_indicate+0x20>
    aaee:	bf00      	nop
    aaf0:	00021e93 	.word	0x00021e93
    aaf4:	00023ed8 	.word	0x00023ed8
    aaf8:	00023fa8 	.word	0x00023fa8
    aafc:	00027386 	.word	0x00027386

0000ab00 <read_ppcp>:
{
    ab00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    ab02:	4610      	mov	r0, r2
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    ab04:	4a07      	ldr	r2, [pc, #28]	; (ab24 <read_ppcp+0x24>)
{
    ab06:	4619      	mov	r1, r3
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    ab08:	f44f 1328 	mov.w	r3, #2752512	; 0x2a0000
    ab0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
    ab10:	2308      	movs	r3, #8
    ab12:	9300      	str	r3, [sp, #0]
    ab14:	f8bd 2018 	ldrh.w	r2, [sp, #24]
    ab18:	446b      	add	r3, sp
    ab1a:	f017 fa41 	bl	21fa0 <bt_gatt_attr_read.constprop.0>
}
    ab1e:	b005      	add	sp, #20
    ab20:	f85d fb04 	ldr.w	pc, [sp], #4
    ab24:	00280018 	.word	0x00280018

0000ab28 <find_sc_cfg>:
{
    ab28:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
    ab2a:	4c0e      	ldr	r4, [pc, #56]	; (ab64 <find_sc_cfg+0x3c>)
    ab2c:	7823      	ldrb	r3, [r4, #0]
    ab2e:	4283      	cmp	r3, r0
{
    ab30:	4605      	mov	r5, r0
    ab32:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
    ab34:	d00a      	beq.n	ab4c <find_sc_cfg+0x24>
    ab36:	7b23      	ldrb	r3, [r4, #12]
    ab38:	42ab      	cmp	r3, r5
    ab3a:	d111      	bne.n	ab60 <find_sc_cfg+0x38>
    ab3c:	480a      	ldr	r0, [pc, #40]	; (ab68 <find_sc_cfg+0x40>)
    ab3e:	2207      	movs	r2, #7
    ab40:	4631      	mov	r1, r6
    ab42:	f019 f84e 	bl	23be2 <memcmp>
    ab46:	b958      	cbnz	r0, ab60 <find_sc_cfg+0x38>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    ab48:	2001      	movs	r0, #1
    ab4a:	e005      	b.n	ab58 <find_sc_cfg+0x30>
    ab4c:	2207      	movs	r2, #7
    ab4e:	1c60      	adds	r0, r4, #1
    ab50:	f019 f847 	bl	23be2 <memcmp>
		if (id == sc_cfg[i].id &&
    ab54:	2800      	cmp	r0, #0
    ab56:	d1ee      	bne.n	ab36 <find_sc_cfg+0xe>
			return &sc_cfg[i];
    ab58:	230c      	movs	r3, #12
    ab5a:	fb03 4000 	mla	r0, r3, r0, r4
    ab5e:	e000      	b.n	ab62 <find_sc_cfg+0x3a>
	return NULL;
    ab60:	2000      	movs	r0, #0
}
    ab62:	bd70      	pop	{r4, r5, r6, pc}
    ab64:	20002e5e 	.word	0x20002e5e
    ab68:	20002e6b 	.word	0x20002e6b

0000ab6c <sc_save>:
{
    ab6c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    ab70:	4680      	mov	r8, r0
    ab72:	460f      	mov	r7, r1
    ab74:	4616      	mov	r6, r2
    ab76:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
    ab78:	f7ff ffd6 	bl	ab28 <find_sc_cfg>
	if (!cfg) {
    ab7c:	4604      	mov	r4, r0
    ab7e:	b9c8      	cbnz	r0, abb4 <sc_save+0x48>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    ab80:	4669      	mov	r1, sp
    ab82:	9000      	str	r0, [sp, #0]
    ab84:	f8cd 0003 	str.w	r0, [sp, #3]
    ab88:	f7ff ffce 	bl	ab28 <find_sc_cfg>
		if (!cfg) {
    ab8c:	4604      	mov	r4, r0
    ab8e:	b960      	cbnz	r0, abaa <sc_save+0x3e>
    ab90:	490f      	ldr	r1, [pc, #60]	; (abd0 <sc_save+0x64>)
    ab92:	4b10      	ldr	r3, [pc, #64]	; (abd4 <sc_save+0x68>)
			BT_ERR("unable to save SC: no cfg left");
    ab94:	4810      	ldr	r0, [pc, #64]	; (abd8 <sc_save+0x6c>)
    ab96:	1ac9      	subs	r1, r1, r3
    ab98:	08c9      	lsrs	r1, r1, #3
    ab9a:	0189      	lsls	r1, r1, #6
    ab9c:	f041 0101 	orr.w	r1, r1, #1
    aba0:	f014 fa96 	bl	1f0d0 <log_0>
}
    aba4:	b002      	add	sp, #8
    aba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
    abaa:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
    abae:	4639      	mov	r1, r7
    abb0:	f017 f9ea 	bl	21f88 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
    abb4:	8922      	ldrh	r2, [r4, #8]
    abb6:	8963      	ldrh	r3, [r4, #10]
    abb8:	b91a      	cbnz	r2, abc2 <sc_save+0x56>
    abba:	b923      	cbnz	r3, abc6 <sc_save+0x5a>
		cfg->data.start = start;
    abbc:	8126      	strh	r6, [r4, #8]
		*end = new_end;
    abbe:	8165      	strh	r5, [r4, #10]
    abc0:	e7f0      	b.n	aba4 <sc_save+0x38>
	if (new_start >= *start && new_end <= *end) {
    abc2:	4296      	cmp	r6, r2
    abc4:	d302      	bcc.n	abcc <sc_save+0x60>
    abc6:	429d      	cmp	r5, r3
    abc8:	d9ec      	bls.n	aba4 <sc_save+0x38>
    abca:	e7f8      	b.n	abbe <sc_save+0x52>
		*start = new_start;
    abcc:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
    abce:	e7fa      	b.n	abc6 <sc_save+0x5a>
    abd0:	00023fa8 	.word	0x00023fa8
    abd4:	00023ed8 	.word	0x00023ed8
    abd8:	000273ad 	.word	0x000273ad

0000abdc <find_cf_cfg>:
{
    abdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    abde:	4c16      	ldr	r4, [pc, #88]	; (ac38 <find_cf_cfg+0x5c>)
		if (!conn) {
    abe0:	4605      	mov	r5, r0
    abe2:	b140      	cbz	r0, abf6 <find_cf_cfg+0x1a>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    abe4:	4622      	mov	r2, r4
    abe6:	f812 1b01 	ldrb.w	r1, [r2], #1
    abea:	f016 fc2e 	bl	2144a <bt_conn_is_peer_addr_le>
    abee:	b1c0      	cbz	r0, ac22 <find_cf_cfg+0x46>
}
    abf0:	4620      	mov	r0, r4
    abf2:	b003      	add	sp, #12
    abf4:	bd30      	pop	{r4, r5, pc}
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    abf6:	9000      	str	r0, [sp, #0]
    abf8:	2207      	movs	r2, #7
    abfa:	f8cd 0003 	str.w	r0, [sp, #3]
    abfe:	4669      	mov	r1, sp
    ac00:	1c60      	adds	r0, r4, #1
    ac02:	f018 ffee 	bl	23be2 <memcmp>
    ac06:	2800      	cmp	r0, #0
    ac08:	d0f2      	beq.n	abf0 <find_cf_cfg+0x14>
    ac0a:	2207      	movs	r2, #7
    ac0c:	4669      	mov	r1, sp
    ac0e:	f104 0011 	add.w	r0, r4, #17
    ac12:	9500      	str	r5, [sp, #0]
    ac14:	f8cd 5003 	str.w	r5, [sp, #3]
    ac18:	f018 ffe3 	bl	23be2 <memcmp>
    ac1c:	b948      	cbnz	r0, ac32 <find_cf_cfg+0x56>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
    ac1e:	3410      	adds	r4, #16
    ac20:	e7e6      	b.n	abf0 <find_cf_cfg+0x14>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    ac22:	7c21      	ldrb	r1, [r4, #16]
    ac24:	f104 0211 	add.w	r2, r4, #17
    ac28:	4628      	mov	r0, r5
    ac2a:	f016 fc0e 	bl	2144a <bt_conn_is_peer_addr_le>
    ac2e:	2800      	cmp	r0, #0
    ac30:	d1f5      	bne.n	ac1e <find_cf_cfg+0x42>
	return NULL;
    ac32:	2400      	movs	r4, #0
    ac34:	e7dc      	b.n	abf0 <find_cf_cfg+0x14>
    ac36:	bf00      	nop
    ac38:	200018a0 	.word	0x200018a0

0000ac3c <cf_write>:
{
    ac3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ac40:	4698      	mov	r8, r3
    ac42:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
    ac46:	2b01      	cmp	r3, #1
{
    ac48:	4606      	mov	r6, r0
    ac4a:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
    ac4c:	d83d      	bhi.n	acca <cf_write+0x8e>
	if (offset + len > sizeof(cfg->data)) {
    ac4e:	4443      	add	r3, r8
    ac50:	2b01      	cmp	r3, #1
    ac52:	4645      	mov	r5, r8
    ac54:	dc3c      	bgt.n	acd0 <cf_write+0x94>
	cfg = find_cf_cfg(conn);
    ac56:	f7ff ffc1 	bl	abdc <find_cf_cfg>
	if (!cfg) {
    ac5a:	4604      	mov	r4, r0
    ac5c:	b990      	cbnz	r0, ac84 <cf_write+0x48>
		cfg = find_cf_cfg(NULL);
    ac5e:	f7ff ffbd 	bl	abdc <find_cf_cfg>
	if (!cfg) {
    ac62:	4604      	mov	r4, r0
    ac64:	b970      	cbnz	r0, ac84 <cf_write+0x48>
    ac66:	4b1d      	ldr	r3, [pc, #116]	; (acdc <cf_write+0xa0>)
    ac68:	491d      	ldr	r1, [pc, #116]	; (ace0 <cf_write+0xa4>)
		BT_WARN("No space to store Client Supported Features");
    ac6a:	481e      	ldr	r0, [pc, #120]	; (ace4 <cf_write+0xa8>)
    ac6c:	1ac9      	subs	r1, r1, r3
    ac6e:	08c9      	lsrs	r1, r1, #3
    ac70:	0189      	lsls	r1, r1, #6
    ac72:	f041 0102 	orr.w	r1, r1, #2
    ac76:	f014 fa2b 	bl	1f0d0 <log_0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    ac7a:	f06f 0510 	mvn.w	r5, #16
}
    ac7e:	4628      	mov	r0, r5
    ac80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
    ac84:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
    ac86:	f1b8 0f00 	cmp.w	r8, #0
    ac8a:	d10c      	bne.n	aca6 <cf_write+0x6a>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    ac8c:	f106 0188 	add.w	r1, r6, #136	; 0x88
    ac90:	1c60      	adds	r0, r4, #1
    ac92:	f017 f979 	bl	21f88 <bt_addr_le_copy>
	cfg->id = conn->id;
    ac96:	4620      	mov	r0, r4
    ac98:	7a33      	ldrb	r3, [r6, #8]
    ac9a:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    ac9e:	2100      	movs	r1, #0
    aca0:	f017 f964 	bl	21f6c <atomic_set_bit>
	return len;
    aca4:	e7eb      	b.n	ac7e <cf_write+0x42>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
    aca6:	7a20      	ldrb	r0, [r4, #8]
    aca8:	fa20 f301 	lsr.w	r3, r0, r1
    acac:	07da      	lsls	r2, r3, #31
    acae:	d503      	bpl.n	acb8 <cf_write+0x7c>
		    !(value[i / 8] & BIT(i % 8))) {
    acb0:	783b      	ldrb	r3, [r7, #0]
    acb2:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
    acb4:	07db      	lsls	r3, r3, #31
    acb6:	d50e      	bpl.n	acd6 <cf_write+0x9a>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
    acb8:	3101      	adds	r1, #1
    acba:	2903      	cmp	r1, #3
    acbc:	d1e3      	bne.n	ac86 <cf_write+0x4a>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
    acbe:	783b      	ldrb	r3, [r7, #0]
    acc0:	f003 0307 	and.w	r3, r3, #7
    acc4:	4318      	orrs	r0, r3
    acc6:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
    acc8:	e7e0      	b.n	ac8c <cf_write+0x50>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    acca:	f06f 0506 	mvn.w	r5, #6
    acce:	e7d6      	b.n	ac7e <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    acd0:	f06f 050c 	mvn.w	r5, #12
    acd4:	e7d3      	b.n	ac7e <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
    acd6:	f06f 0512 	mvn.w	r5, #18
    acda:	e7d0      	b.n	ac7e <cf_write+0x42>
    acdc:	00023ed8 	.word	0x00023ed8
    ace0:	00023fa8 	.word	0x00023fa8
    ace4:	000273cc 	.word	0x000273cc

0000ace8 <sc_indicate_rsp>:
{
    ace8:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    acea:	4915      	ldr	r1, [pc, #84]	; (ad40 <sc_indicate_rsp+0x58>)
    acec:	f3bf 8f5b 	dmb	ish
    acf0:	4604      	mov	r4, r0
    acf2:	f101 0350 	add.w	r3, r1, #80	; 0x50
    acf6:	e853 2f00 	ldrex	r2, [r3]
    acfa:	f022 0202 	bic.w	r2, r2, #2
    acfe:	e843 2000 	strex	r0, r2, [r3]
    ad02:	2800      	cmp	r0, #0
    ad04:	d1f7      	bne.n	acf6 <sc_indicate_rsp+0xe>
    ad06:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ad0a:	f3bf 8f5b 	dmb	ish
    ad0e:	6d0b      	ldr	r3, [r1, #80]	; 0x50
    ad10:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    ad14:	07da      	lsls	r2, r3, #31
    ad16:	d505      	bpl.n	ad24 <sc_indicate_rsp+0x3c>
	return k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
    ad18:	480a      	ldr	r0, [pc, #40]	; (ad44 <sc_indicate_rsp+0x5c>)
    ad1a:	2200      	movs	r2, #0
    ad1c:	2300      	movs	r3, #0
    ad1e:	3120      	adds	r1, #32
    ad20:	f013 f9ba 	bl	1e098 <k_work_reschedule_for_queue>
	cfg = find_cf_cfg(conn);
    ad24:	4620      	mov	r0, r4
    ad26:	f7ff ff59 	bl	abdc <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
    ad2a:	b140      	cbz	r0, ad3e <sc_indicate_rsp+0x56>
    ad2c:	7a03      	ldrb	r3, [r0, #8]
    ad2e:	07db      	lsls	r3, r3, #31
    ad30:	d505      	bpl.n	ad3e <sc_indicate_rsp+0x56>
}
    ad32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    ad36:	2100      	movs	r1, #0
    ad38:	300c      	adds	r0, #12
    ad3a:	f017 b917 	b.w	21f6c <atomic_set_bit>
}
    ad3e:	bd10      	pop	{r4, pc}
    ad40:	20000f68 	.word	0x20000f68
    ad44:	200015c0 	.word	0x200015c0

0000ad48 <bt_gatt_attr_write_ccc>:
{
    ad48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    ad4c:	461f      	mov	r7, r3
    ad4e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
    ad52:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
    ad56:	4606      	mov	r6, r0
    ad58:	4688      	mov	r8, r1
	if (offset) {
    ad5a:	2b00      	cmp	r3, #0
    ad5c:	d151      	bne.n	ae02 <bt_gatt_attr_write_ccc+0xba>
	if (!len || len > sizeof(uint16_t)) {
    ad5e:	1e7b      	subs	r3, r7, #1
    ad60:	2b01      	cmp	r3, #1
    ad62:	d851      	bhi.n	ae08 <bt_gatt_attr_write_ccc+0xc0>
	if (len < sizeof(uint16_t)) {
    ad64:	2f01      	cmp	r7, #1
		value = *(uint8_t *)buf;
    ad66:	7815      	ldrb	r5, [r2, #0]
    ad68:	bf18      	it	ne
    ad6a:	7852      	ldrbne	r2, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
    ad6c:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
    ad6e:	bf0c      	ite	eq
    ad70:	b2ad      	uxtheq	r5, r5
    ad72:	ea45 2502 	orrne.w	r5, r5, r2, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
    ad76:	f017 f9c6 	bl	22106 <find_ccc_cfg>
	if (!cfg) {
    ad7a:	4604      	mov	r4, r0
    ad7c:	b9e8      	cbnz	r0, adba <bt_gatt_attr_write_ccc+0x72>
		if (!value) {
    ad7e:	b91d      	cbnz	r5, ad88 <bt_gatt_attr_write_ccc+0x40>
			return len;
    ad80:	4638      	mov	r0, r7
}
    ad82:	b003      	add	sp, #12
    ad84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
    ad88:	4649      	mov	r1, r9
    ad8a:	f017 f9bc 	bl	22106 <find_ccc_cfg>
		if (!cfg) {
    ad8e:	4604      	mov	r4, r0
    ad90:	b960      	cbnz	r0, adac <bt_gatt_attr_write_ccc+0x64>
    ad92:	4b1f      	ldr	r3, [pc, #124]	; (ae10 <bt_gatt_attr_write_ccc+0xc8>)
    ad94:	491f      	ldr	r1, [pc, #124]	; (ae14 <bt_gatt_attr_write_ccc+0xcc>)
			BT_WARN("No space to store CCC cfg");
    ad96:	4820      	ldr	r0, [pc, #128]	; (ae18 <bt_gatt_attr_write_ccc+0xd0>)
    ad98:	1ac9      	subs	r1, r1, r3
    ad9a:	08c9      	lsrs	r1, r1, #3
    ad9c:	0189      	lsls	r1, r1, #6
    ad9e:	f041 0102 	orr.w	r1, r1, #2
    ada2:	f014 f995 	bl	1f0d0 <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    ada6:	f06f 0010 	mvn.w	r0, #16
    adaa:	e7ea      	b.n	ad82 <bt_gatt_attr_write_ccc+0x3a>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    adac:	f106 0188 	add.w	r1, r6, #136	; 0x88
    adb0:	3001      	adds	r0, #1
    adb2:	f017 f8e9 	bl	21f88 <bt_addr_le_copy>
		cfg->id = conn->id;
    adb6:	7a33      	ldrb	r3, [r6, #8]
    adb8:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
    adba:	f8d9 301c 	ldr.w	r3, [r9, #28]
    adbe:	b9a3      	cbnz	r3, adea <bt_gatt_attr_write_ccc+0xa2>
	if (cfg->value != ccc->value) {
    adc0:	f8b9 3014 	ldrh.w	r3, [r9, #20]
	cfg->value = value;
    adc4:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
    adc6:	42ab      	cmp	r3, r5
    adc8:	d003      	beq.n	add2 <bt_gatt_attr_write_ccc+0x8a>
		gatt_ccc_changed(attr, ccc);
    adca:	4649      	mov	r1, r9
    adcc:	4640      	mov	r0, r8
    adce:	f017 f852 	bl	21e76 <gatt_ccc_changed>
	if (!value) {
    add2:	2d00      	cmp	r5, #0
    add4:	d1d4      	bne.n	ad80 <bt_gatt_attr_write_ccc+0x38>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    add6:	4669      	mov	r1, sp
    add8:	1c60      	adds	r0, r4, #1
    adda:	9500      	str	r5, [sp, #0]
    addc:	f8cd 5003 	str.w	r5, [sp, #3]
    ade0:	f017 f8d2 	bl	21f88 <bt_addr_le_copy>
	cfg->id = 0U;
    ade4:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
    ade6:	8125      	strh	r5, [r4, #8]
}
    ade8:	e7ca      	b.n	ad80 <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
    adea:	462a      	mov	r2, r5
    adec:	4641      	mov	r1, r8
    adee:	4630      	mov	r0, r6
    adf0:	4798      	blx	r3
		if (write < 0) {
    adf2:	2800      	cmp	r0, #0
    adf4:	dbc5      	blt.n	ad82 <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
    adf6:	3801      	subs	r0, #1
    adf8:	2801      	cmp	r0, #1
    adfa:	d9e1      	bls.n	adc0 <bt_gatt_attr_write_ccc+0x78>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
    adfc:	f06f 000d 	mvn.w	r0, #13
    ae00:	e7bf      	b.n	ad82 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    ae02:	f06f 0006 	mvn.w	r0, #6
    ae06:	e7bc      	b.n	ad82 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    ae08:	f06f 000c 	mvn.w	r0, #12
    ae0c:	e7b9      	b.n	ad82 <bt_gatt_attr_write_ccc+0x3a>
    ae0e:	bf00      	nop
    ae10:	00023ed8 	.word	0x00023ed8
    ae14:	00023fa8 	.word	0x00023fa8
    ae18:	000273f8 	.word	0x000273f8

0000ae1c <gatt_notify>:
{
    ae1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ae20:	4614      	mov	r4, r2
				sizeof(*nfy) + params->len);
    ae22:	8992      	ldrh	r2, [r2, #12]
{
    ae24:	4688      	mov	r8, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    ae26:	3202      	adds	r2, #2
    ae28:	211b      	movs	r1, #27
{
    ae2a:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    ae2c:	f7ff fae6 	bl	a3fc <bt_att_create_pdu>
	if (!buf) {
    ae30:	4605      	mov	r5, r0
    ae32:	b1c8      	cbz	r0, ae68 <gatt_notify+0x4c>
    ae34:	f100 0908 	add.w	r9, r0, #8
    ae38:	2102      	movs	r1, #2
    ae3a:	4648      	mov	r0, r9
    ae3c:	f017 fec3 	bl	22bc6 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    ae40:	4606      	mov	r6, r0
    ae42:	89a1      	ldrh	r1, [r4, #12]
    ae44:	f826 8b02 	strh.w	r8, [r6], #2
    ae48:	4648      	mov	r0, r9
    ae4a:	f017 febc 	bl	22bc6 <net_buf_simple_add>
    ae4e:	89a2      	ldrh	r2, [r4, #12]
    ae50:	68a1      	ldr	r1, [r4, #8]
    ae52:	4630      	mov	r0, r6
    ae54:	f018 fed3 	bl	23bfe <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
    ae58:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    ae5c:	4629      	mov	r1, r5
    ae5e:	4638      	mov	r0, r7
}
    ae60:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
    ae64:	f016 bfa7 	b.w	21db6 <bt_att_send>
    ae68:	4b06      	ldr	r3, [pc, #24]	; (ae84 <gatt_notify+0x68>)
    ae6a:	4907      	ldr	r1, [pc, #28]	; (ae88 <gatt_notify+0x6c>)
		BT_WARN("No buffer available to send notification");
    ae6c:	4807      	ldr	r0, [pc, #28]	; (ae8c <gatt_notify+0x70>)
    ae6e:	1ac9      	subs	r1, r1, r3
    ae70:	08c9      	lsrs	r1, r1, #3
    ae72:	0189      	lsls	r1, r1, #6
    ae74:	f041 0102 	orr.w	r1, r1, #2
    ae78:	f014 f92a 	bl	1f0d0 <log_0>
}
    ae7c:	f06f 000b 	mvn.w	r0, #11
    ae80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ae84:	00023ed8 	.word	0x00023ed8
    ae88:	00023fa8 	.word	0x00023fa8
    ae8c:	00027412 	.word	0x00027412

0000ae90 <notify_cb>:

static uint8_t notify_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			 void *user_data)
{
    ae90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct notify_data *data = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    ae94:	4b38      	ldr	r3, [pc, #224]	; (af78 <notify_cb+0xe8>)
{
    ae96:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    ae98:	6882      	ldr	r2, [r0, #8]
    ae9a:	429a      	cmp	r2, r3
{
    ae9c:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    ae9e:	d003      	beq.n	aea8 <notify_cb+0x18>
		return BT_GATT_ITER_CONTINUE;
    aea0:	2001      	movs	r0, #1

		data->err = 0;
	}

	return BT_GATT_ITER_CONTINUE;
}
    aea2:	b003      	add	sp, #12
    aea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc = attr->user_data;
    aea8:	f8d0 900c 	ldr.w	r9, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
    aeac:	4b33      	ldr	r3, [pc, #204]	; (af7c <notify_cb+0xec>)
    aeae:	4599      	cmp	r9, r3
    aeb0:	d01a      	beq.n	aee8 <notify_cb+0x58>
    aeb2:	f109 0701 	add.w	r7, r9, #1
    aeb6:	f109 0a15 	add.w	sl, r9, #21
    aeba:	f04f 0b00 	mov.w	fp, #0
		if (cfg->value != data->type) {
    aebe:	f8b7 2007 	ldrh.w	r2, [r7, #7]
    aec2:	89a3      	ldrh	r3, [r4, #12]
    aec4:	429a      	cmp	r2, r3
    aec6:	d10b      	bne.n	aee0 <notify_cb+0x50>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    aec8:	f817 0c01 	ldrb.w	r0, [r7, #-1]
    aecc:	4639      	mov	r1, r7
    aece:	f7fe fa97 	bl	9400 <bt_conn_lookup_addr_le>
		if (!conn) {
    aed2:	4605      	mov	r5, r0
    aed4:	b120      	cbz	r0, aee0 <notify_cb+0x50>
		if (conn->state != BT_CONN_CONNECTED) {
    aed6:	7b43      	ldrb	r3, [r0, #13]
    aed8:	2b07      	cmp	r3, #7
    aeda:	d029      	beq.n	af30 <notify_cb+0xa0>
			bt_conn_unref(conn);
    aedc:	f016 faf0 	bl	214c0 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    aee0:	370a      	adds	r7, #10
    aee2:	4557      	cmp	r7, sl
    aee4:	d0dc      	beq.n	aea0 <notify_cb+0x10>
    aee6:	e7ea      	b.n	aebe <notify_cb+0x2e>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    aee8:	2600      	movs	r6, #0
    aeea:	4d25      	ldr	r5, [pc, #148]	; (af80 <notify_cb+0xf0>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    aeec:	4637      	mov	r7, r6
    aeee:	2207      	movs	r2, #7
    aef0:	4669      	mov	r1, sp
    aef2:	4628      	mov	r0, r5
    aef4:	9700      	str	r7, [sp, #0]
    aef6:	f8cd 7003 	str.w	r7, [sp, #3]
    aefa:	f018 fe72 	bl	23be2 <memcmp>
    aefe:	b178      	cbz	r0, af20 <notify_cb+0x90>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
    af00:	f815 0c01 	ldrb.w	r0, [r5, #-1]
    af04:	2207      	movs	r2, #7
    af06:	4629      	mov	r1, r5
    af08:	f7fe fabe 	bl	9488 <bt_conn_lookup_state_le>
			if (!conn) {
    af0c:	b968      	cbnz	r0, af2a <notify_cb+0x9a>
				sc = (struct sc_data *)data->ind_params->data;
    af0e:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
    af10:	f815 0c01 	ldrb.w	r0, [r5, #-1]
				sc = (struct sc_data *)data->ind_params->data;
    af14:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
    af16:	4629      	mov	r1, r5
    af18:	8853      	ldrh	r3, [r2, #2]
    af1a:	8812      	ldrh	r2, [r2, #0]
    af1c:	f7ff fe26 	bl	ab6c <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    af20:	350c      	adds	r5, #12
    af22:	2e00      	cmp	r6, #0
    af24:	d1c5      	bne.n	aeb2 <notify_cb+0x22>
    af26:	2601      	movs	r6, #1
    af28:	e7e1      	b.n	aeee <notify_cb+0x5e>
			bt_conn_unref(conn);
    af2a:	f016 fac9 	bl	214c0 <bt_conn_unref>
    af2e:	e7f7      	b.n	af20 <notify_cb+0x90>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    af30:	f8d9 3020 	ldr.w	r3, [r9, #32]
    af34:	b123      	cbz	r3, af40 <notify_cb+0xb0>
    af36:	4641      	mov	r1, r8
    af38:	4798      	blx	r3
    af3a:	b908      	cbnz	r0, af40 <notify_cb+0xb0>
			bt_conn_unref(conn);
    af3c:	4628      	mov	r0, r5
    af3e:	e7cd      	b.n	aedc <notify_cb+0x4c>
		if (data->type == BT_GATT_CCC_INDICATE) {
    af40:	89a3      	ldrh	r3, [r4, #12]
    af42:	88a1      	ldrh	r1, [r4, #4]
    af44:	6922      	ldr	r2, [r4, #16]
    af46:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
    af48:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
    af4a:	d10f      	bne.n	af6c <notify_cb+0xdc>
			err = gatt_indicate(conn, data->handle,
    af4c:	f7ff fd82 	bl	aa54 <gatt_indicate>
			if (err == 0) {
    af50:	4606      	mov	r6, r0
    af52:	b918      	cbnz	r0, af5c <notify_cb+0xcc>
				data->ind_params->_ref++;
    af54:	6922      	ldr	r2, [r4, #16]
    af56:	7d93      	ldrb	r3, [r2, #22]
    af58:	3301      	adds	r3, #1
    af5a:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
    af5c:	4628      	mov	r0, r5
    af5e:	f016 faaf 	bl	214c0 <bt_conn_unref>
		if (err < 0) {
    af62:	2e00      	cmp	r6, #0
    af64:	db06      	blt.n	af74 <notify_cb+0xe4>
		data->err = 0;
    af66:	f8c4 b008 	str.w	fp, [r4, #8]
    af6a:	e7b9      	b.n	aee0 <notify_cb+0x50>
			err = gatt_notify(conn, data->handle, data->nfy_params);
    af6c:	f7ff ff56 	bl	ae1c <gatt_notify>
    af70:	4606      	mov	r6, r0
    af72:	e7f3      	b.n	af5c <notify_cb+0xcc>
			return BT_GATT_ITER_STOP;
    af74:	2000      	movs	r0, #0
    af76:	e794      	b.n	aea2 <notify_cb+0x12>
    af78:	0000ad49 	.word	0x0000ad49
    af7c:	200002a4 	.word	0x200002a4
    af80:	20002e5f 	.word	0x20002e5f

0000af84 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
    af84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    af88:	4b2a      	ldr	r3, [pc, #168]	; (b034 <disconnected_cb+0xb0>)
{
    af8a:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    af8c:	6882      	ldr	r2, [r0, #8]
    af8e:	429a      	cmp	r2, r3
{
    af90:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    af92:	d12f      	bne.n	aff4 <disconnected_cb+0x70>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    af94:	68c5      	ldr	r5, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
    af96:	8aab      	ldrh	r3, [r5, #20]
    af98:	b363      	cbz	r3, aff4 <disconnected_cb+0x70>
				bt_conn_unref(tmp);
			}
		} else {
			/* Clear value if not paired */
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
				if (ccc == &sc_ccc) {
    af9a:	f8df b09c 	ldr.w	fp, [pc, #156]	; b038 <disconnected_cb+0xb4>
    af9e:	1c6c      	adds	r4, r5, #1
    afa0:	f105 0a15 	add.w	sl, r5, #21
	value_used = false;
    afa4:	f04f 0800 	mov.w	r8, #0
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    afa8:	f106 0988 	add.w	r9, r6, #136	; 0x88
		if (!cfg->value) {
    afac:	f8b4 3007 	ldrh.w	r3, [r4, #7]
    afb0:	b19b      	cbz	r3, afda <disconnected_cb+0x56>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    afb2:	f814 1c01 	ldrb.w	r1, [r4, #-1]
    afb6:	4622      	mov	r2, r4
    afb8:	4630      	mov	r0, r6
    afba:	f016 fa46 	bl	2144a <bt_conn_is_peer_addr_le>
    afbe:	b9e8      	cbnz	r0, affc <disconnected_cb+0x78>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    afc0:	f814 0c01 	ldrb.w	r0, [r4, #-1]
    afc4:	4621      	mov	r1, r4
    afc6:	f7fe fa1b 	bl	9400 <bt_conn_lookup_addr_le>
			if (tmp) {
    afca:	b130      	cbz	r0, afda <disconnected_cb+0x56>
				if (tmp->state == BT_CONN_CONNECTED) {
    afcc:	7b43      	ldrb	r3, [r0, #13]
					value_used = true;
    afce:	2b07      	cmp	r3, #7
    afd0:	bf08      	it	eq
    afd2:	f04f 0801 	moveq.w	r8, #1
				bt_conn_unref(tmp);
    afd6:	f016 fa73 	bl	214c0 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    afda:	340a      	adds	r4, #10
    afdc:	4554      	cmp	r4, sl
    afde:	d1e5      	bne.n	afac <disconnected_cb+0x28>
			}
		}
	}

	/* If all values are now disabled, reset value while disconnected */
	if (!value_used) {
    afe0:	f1b8 0f00 	cmp.w	r8, #0
    afe4:	d106      	bne.n	aff4 <disconnected_cb+0x70>
		ccc->value = 0U;
		if (ccc->cfg_changed) {
    afe6:	69ab      	ldr	r3, [r5, #24]
		ccc->value = 0U;
    afe8:	f8a5 8014 	strh.w	r8, [r5, #20]
		if (ccc->cfg_changed) {
    afec:	b113      	cbz	r3, aff4 <disconnected_cb+0x70>
			ccc->cfg_changed(attr, ccc->value);
    afee:	4641      	mov	r1, r8
    aff0:	4638      	mov	r0, r7
    aff2:	4798      	blx	r3

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
    aff4:	2001      	movs	r0, #1
    aff6:	b003      	add	sp, #12
    aff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    affc:	7a30      	ldrb	r0, [r6, #8]
    affe:	4649      	mov	r1, r9
    b000:	f015 ffbf 	bl	20f82 <bt_addr_le_is_bonded>
    b004:	b988      	cbnz	r0, b02a <disconnected_cb+0xa6>
				if (ccc == &sc_ccc) {
    b006:	455d      	cmp	r5, fp
    b008:	d102      	bne.n	b010 <disconnected_cb+0x8c>
					sc_clear(conn);
    b00a:	4630      	mov	r0, r6
    b00c:	f017 f834 	bl	22078 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    b010:	2200      	movs	r2, #0
    b012:	4669      	mov	r1, sp
    b014:	4620      	mov	r0, r4
    b016:	9200      	str	r2, [sp, #0]
    b018:	f8cd 2003 	str.w	r2, [sp, #3]
    b01c:	f016 ffb4 	bl	21f88 <bt_addr_le_copy>
	cfg->id = 0U;
    b020:	f804 2c01 	strb.w	r2, [r4, #-1]
	cfg->value = 0U;
    b024:	f8a4 2007 	strh.w	r2, [r4, #7]
}
    b028:	e7d7      	b.n	afda <disconnected_cb+0x56>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    b02a:	4649      	mov	r1, r9
    b02c:	4620      	mov	r0, r4
    b02e:	f016 ffab 	bl	21f88 <bt_addr_le_copy>
    b032:	e7d2      	b.n	afda <disconnected_cb+0x56>
    b034:	0000ad49 	.word	0x0000ad49
    b038:	200002a4 	.word	0x200002a4

0000b03c <bt_gatt_init>:
{
    b03c:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    b03e:	4b1f      	ldr	r3, [pc, #124]	; (b0bc <bt_gatt_init+0x80>)
    b040:	f3bf 8f5b 	dmb	ish
    b044:	2201      	movs	r2, #1
    b046:	e853 1f00 	ldrex	r1, [r3]
    b04a:	2900      	cmp	r1, #0
    b04c:	d103      	bne.n	b056 <bt_gatt_init+0x1a>
    b04e:	e843 2000 	strex	r0, r2, [r3]
    b052:	2800      	cmp	r0, #0
    b054:	d1f7      	bne.n	b046 <bt_gatt_init+0xa>
    b056:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
    b05a:	d12d      	bne.n	b0b8 <bt_gatt_init+0x7c>
    b05c:	f3bf 8f5b 	dmb	ish
    b060:	4b17      	ldr	r3, [pc, #92]	; (b0c0 <bt_gatt_init+0x84>)
    b062:	e853 1f00 	ldrex	r1, [r3]
    b066:	2900      	cmp	r1, #0
    b068:	d103      	bne.n	b072 <bt_gatt_init+0x36>
    b06a:	e843 2000 	strex	r0, r2, [r3]
    b06e:	2800      	cmp	r0, #0
    b070:	d1f7      	bne.n	b062 <bt_gatt_init+0x26>
    b072:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
    b076:	d108      	bne.n	b08a <bt_gatt_init+0x4e>
    b078:	4a12      	ldr	r2, [pc, #72]	; (b0c4 <bt_gatt_init+0x88>)
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    b07a:	4913      	ldr	r1, [pc, #76]	; (b0c8 <bt_gatt_init+0x8c>)
    b07c:	8813      	ldrh	r3, [r2, #0]
    b07e:	4c13      	ldr	r4, [pc, #76]	; (b0cc <bt_gatt_init+0x90>)
	if (!atomic_cas(&service_init, 0, 1)) {
    b080:	2000      	movs	r0, #0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    b082:	42a1      	cmp	r1, r4
    b084:	d312      	bcc.n	b0ac <bt_gatt_init+0x70>
    b086:	b100      	cbz	r0, b08a <bt_gatt_init+0x4e>
    b088:	8013      	strh	r3, [r2, #0]
	k_work_init_delayable(&work->work, handler);
    b08a:	4911      	ldr	r1, [pc, #68]	; (b0d0 <bt_gatt_init+0x94>)
    b08c:	4811      	ldr	r0, [pc, #68]	; (b0d4 <bt_gatt_init+0x98>)
    b08e:	f018 fb96 	bl	237be <k_work_init_delayable>
	return k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
    b092:	4910      	ldr	r1, [pc, #64]	; (b0d4 <bt_gatt_init+0x98>)
    b094:	4810      	ldr	r0, [pc, #64]	; (b0d8 <bt_gatt_init+0x9c>)
    b096:	f44f 72a4 	mov.w	r2, #328	; 0x148
    b09a:	2300      	movs	r3, #0
    b09c:	f012 fffc 	bl	1e098 <k_work_reschedule_for_queue>
}
    b0a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&work->work, handler);
    b0a4:	490d      	ldr	r1, [pc, #52]	; (b0dc <bt_gatt_init+0xa0>)
    b0a6:	480e      	ldr	r0, [pc, #56]	; (b0e0 <bt_gatt_init+0xa4>)
    b0a8:	f018 bb89 	b.w	237be <k_work_init_delayable>
		last_static_handle += svc->attr_count;
    b0ac:	6848      	ldr	r0, [r1, #4]
    b0ae:	4403      	add	r3, r0
    b0b0:	b29b      	uxth	r3, r3
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    b0b2:	3108      	adds	r1, #8
    b0b4:	2001      	movs	r0, #1
    b0b6:	e7e4      	b.n	b082 <bt_gatt_init+0x46>
}
    b0b8:	bd10      	pop	{r4, pc}
    b0ba:	bf00      	nop
    b0bc:	200018c0 	.word	0x200018c0
    b0c0:	200018dc 	.word	0x200018dc
    b0c4:	20002e5c 	.word	0x20002e5c
    b0c8:	00023eb8 	.word	0x00023eb8
    b0cc:	00023ed8 	.word	0x00023ed8
    b0d0:	00022247 	.word	0x00022247
    b0d4:	20000f38 	.word	0x20000f38
    b0d8:	200015c0 	.word	0x200015c0
    b0dc:	0000b469 	.word	0x0000b469
    b0e0:	20000f88 	.word	0x20000f88

0000b0e4 <bt_gatt_attr_get_handle>:
{
    b0e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
    b0e8:	4603      	mov	r3, r0
    b0ea:	b148      	cbz	r0, b100 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
    b0ec:	8a00      	ldrh	r0, [r0, #16]
    b0ee:	b938      	cbnz	r0, b100 <bt_gatt_attr_get_handle+0x1c>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    b0f0:	4912      	ldr	r1, [pc, #72]	; (b13c <bt_gatt_attr_get_handle+0x58>)
    b0f2:	f8df e04c 	ldr.w	lr, [pc, #76]	; b140 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
    b0f6:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    b0f8:	f04f 0c14 	mov.w	ip, #20
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    b0fc:	4571      	cmp	r1, lr
    b0fe:	d301      	bcc.n	b104 <bt_gatt_attr_get_handle+0x20>
}
    b100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((attr < &static_svc->attrs[0]) ||
    b104:	e9d1 7600 	ldrd	r7, r6, [r1]
    b108:	42bb      	cmp	r3, r7
    b10a:	d304      	bcc.n	b116 <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    b10c:	fb0c 7206 	mla	r2, ip, r6, r7
    b110:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
    b112:	4293      	cmp	r3, r2
    b114:	d90e      	bls.n	b134 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
    b116:	19a2      	adds	r2, r4, r6
    b118:	b292      	uxth	r2, r2
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    b11a:	3108      	adds	r1, #8
    b11c:	4614      	mov	r4, r2
    b11e:	e7ed      	b.n	b0fc <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
    b120:	fb0c 7805 	mla	r8, ip, r5, r7
    b124:	4543      	cmp	r3, r8
    b126:	d007      	beq.n	b138 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    b128:	3501      	adds	r5, #1
    b12a:	1962      	adds	r2, r4, r5
    b12c:	42b5      	cmp	r5, r6
    b12e:	b292      	uxth	r2, r2
    b130:	d1f6      	bne.n	b120 <bt_gatt_attr_get_handle+0x3c>
    b132:	e7f2      	b.n	b11a <bt_gatt_attr_get_handle+0x36>
    b134:	2500      	movs	r5, #0
    b136:	e7f8      	b.n	b12a <bt_gatt_attr_get_handle+0x46>
    b138:	4610      	mov	r0, r2
    b13a:	e7e1      	b.n	b100 <bt_gatt_attr_get_handle+0x1c>
    b13c:	00023eb8 	.word	0x00023eb8
    b140:	00023ed8 	.word	0x00023ed8

0000b144 <bt_gatt_foreach_attr_type>:
{
    b144:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b148:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
    b14c:	9100      	str	r1, [sp, #0]
    b14e:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
    b150:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b154:	2d00      	cmp	r5, #0
    b156:	bf08      	it	eq
    b158:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
    b15a:	4b24      	ldr	r3, [pc, #144]	; (b1ec <bt_gatt_foreach_attr_type+0xa8>)
    b15c:	881b      	ldrh	r3, [r3, #0]
    b15e:	4283      	cmp	r3, r0
{
    b160:	4607      	mov	r7, r0
    b162:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
    b164:	d23c      	bcs.n	b1e0 <bt_gatt_foreach_attr_type+0x9c>
}
    b166:	b003      	add	sp, #12
    b168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
    b16c:	6873      	ldr	r3, [r6, #4]
    b16e:	4423      	add	r3, r4
    b170:	42bb      	cmp	r3, r7
    b172:	d232      	bcs.n	b1da <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
    b174:	b29c      	uxth	r4, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    b176:	3608      	adds	r6, #8
    b178:	4b1d      	ldr	r3, [pc, #116]	; (b1f0 <bt_gatt_foreach_attr_type+0xac>)
    b17a:	429e      	cmp	r6, r3
    b17c:	d3f6      	bcc.n	b16c <bt_gatt_foreach_attr_type+0x28>
    b17e:	e7f2      	b.n	b166 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    b180:	5889      	ldr	r1, [r1, r2]
    b182:	9301      	str	r3, [sp, #4]
    b184:	4640      	mov	r0, r8
    b186:	f015 fd97 	bl	20cb8 <bt_uuid_cmp>
    b18a:	9b01      	ldr	r3, [sp, #4]
    b18c:	b190      	cbz	r0, b1b4 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    b18e:	3401      	adds	r4, #1
    b190:	f10a 0a01 	add.w	sl, sl, #1
    b194:	b2a4      	uxth	r4, r4
    b196:	6873      	ldr	r3, [r6, #4]
    b198:	4553      	cmp	r3, sl
    b19a:	d9ec      	bls.n	b176 <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
    b19c:	9b00      	ldr	r3, [sp, #0]
    b19e:	429c      	cmp	r4, r3
    b1a0:	d8e1      	bhi.n	b166 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
    b1a2:	42bc      	cmp	r4, r7
    b1a4:	d3f3      	bcc.n	b18e <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    b1a6:	6831      	ldr	r1, [r6, #0]
    b1a8:	fb0b f20a 	mul.w	r2, fp, sl
    b1ac:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    b1ae:	f1b8 0f00 	cmp.w	r8, #0
    b1b2:	d1e5      	bne.n	b180 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
    b1b4:	f1b9 0f00 	cmp.w	r9, #0
    b1b8:	d10b      	bne.n	b1d2 <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
    b1ba:	3d01      	subs	r5, #1
    b1bc:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
    b1be:	4618      	mov	r0, r3
    b1c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    b1c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b1c4:	4621      	mov	r1, r4
    b1c6:	4798      	blx	r3
	if (!*num_matches) {
    b1c8:	2d00      	cmp	r5, #0
    b1ca:	d0cc      	beq.n	b166 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    b1cc:	2800      	cmp	r0, #0
    b1ce:	d1de      	bne.n	b18e <bt_gatt_foreach_attr_type+0x4a>
    b1d0:	e7c9      	b.n	b166 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
    b1d2:	68da      	ldr	r2, [r3, #12]
    b1d4:	4591      	cmp	r9, r2
    b1d6:	d1da      	bne.n	b18e <bt_gatt_foreach_attr_type+0x4a>
    b1d8:	e7ef      	b.n	b1ba <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    b1da:	f04f 0a00 	mov.w	sl, #0
    b1de:	e7da      	b.n	b196 <bt_gatt_foreach_attr_type+0x52>
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    b1e0:	4e04      	ldr	r6, [pc, #16]	; (b1f4 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
    b1e2:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
    b1e4:	f04f 0b14 	mov.w	fp, #20
    b1e8:	e7c6      	b.n	b178 <bt_gatt_foreach_attr_type+0x34>
    b1ea:	bf00      	nop
    b1ec:	20002e5c 	.word	0x20002e5c
    b1f0:	00023ed8 	.word	0x00023ed8
    b1f4:	00023eb8 	.word	0x00023eb8

0000b1f8 <db_hash_gen.isra.0>:
static void db_hash_gen(bool store)
    b1f8:	b510      	push	{r4, lr}
    b1fa:	b0c8      	sub	sp, #288	; 0x120
	uint8_t key[16] = {};
    b1fc:	2300      	movs	r3, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    b1fe:	aa1c      	add	r2, sp, #112	; 0x70
    b200:	4669      	mov	r1, sp
    b202:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
    b204:	e9cd 3300 	strd	r3, r3, [sp]
    b208:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    b20c:	f015 fbcc 	bl	209a8 <tc_cmac_setup>
    b210:	b958      	cbnz	r0, b22a <db_hash_gen.isra.0+0x32>
    b212:	4917      	ldr	r1, [pc, #92]	; (b270 <db_hash_gen.isra.0+0x78>)
    b214:	4b17      	ldr	r3, [pc, #92]	; (b274 <db_hash_gen.isra.0+0x7c>)
		BT_ERR("Unable to setup AES CMAC");
    b216:	4818      	ldr	r0, [pc, #96]	; (b278 <db_hash_gen.isra.0+0x80>)
    b218:	1ac9      	subs	r1, r1, r3
    b21a:	08c9      	lsrs	r1, r1, #3
    b21c:	0189      	lsls	r1, r1, #6
    b21e:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Unable to calculate hash");
    b222:	f013 ff55 	bl	1f0d0 <log_0>
}
    b226:	b048      	add	sp, #288	; 0x120
    b228:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
    b22a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b22e:	2001      	movs	r0, #1
    b230:	4a12      	ldr	r2, [pc, #72]	; (b27c <db_hash_gen.isra.0+0x84>)
    b232:	ab04      	add	r3, sp, #16
    b234:	f016 fffc 	bl	22230 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    b238:	4811      	ldr	r0, [pc, #68]	; (b280 <db_hash_gen.isra.0+0x88>)
    b23a:	a904      	add	r1, sp, #16
    b23c:	f015 fc4b 	bl	20ad6 <tc_cmac_final>
    b240:	b940      	cbnz	r0, b254 <db_hash_gen.isra.0+0x5c>
    b242:	490b      	ldr	r1, [pc, #44]	; (b270 <db_hash_gen.isra.0+0x78>)
    b244:	4b0b      	ldr	r3, [pc, #44]	; (b274 <db_hash_gen.isra.0+0x7c>)
		BT_ERR("Unable to calculate hash");
    b246:	480f      	ldr	r0, [pc, #60]	; (b284 <db_hash_gen.isra.0+0x8c>)
    b248:	1ac9      	subs	r1, r1, r3
    b24a:	08c9      	lsrs	r1, r1, #3
    b24c:	0189      	lsls	r1, r1, #6
    b24e:	f041 0101 	orr.w	r1, r1, #1
    b252:	e7e6      	b.n	b222 <db_hash_gen.isra.0+0x2a>
    b254:	4b0a      	ldr	r3, [pc, #40]	; (b280 <db_hash_gen.isra.0+0x88>)
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    b256:	2208      	movs	r2, #8
    b258:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
    b25c:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
    b25e:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    b262:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
    b266:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
    b268:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
    b26a:	d1f7      	bne.n	b25c <db_hash_gen.isra.0+0x64>
    b26c:	e7db      	b.n	b226 <db_hash_gen.isra.0+0x2e>
    b26e:	bf00      	nop
    b270:	00023fa8 	.word	0x00023fa8
    b274:	00023ed8 	.word	0x00023ed8
    b278:	0002743b 	.word	0x0002743b
    b27c:	00021ec1 	.word	0x00021ec1
    b280:	200035c1 	.word	0x200035c1
    b284:	00027454 	.word	0x00027454

0000b288 <bt_gatt_notify_cb>:
{
    b288:	b530      	push	{r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b28a:	4b37      	ldr	r3, [pc, #220]	; (b368 <bt_gatt_notify_cb+0xe0>)
    b28c:	f3bf 8f5b 	dmb	ish
    b290:	681b      	ldr	r3, [r3, #0]
    b292:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    b296:	079a      	lsls	r2, r3, #30
{
    b298:	b08b      	sub	sp, #44	; 0x2c
    b29a:	4604      	mov	r4, r0
    b29c:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    b29e:	d55d      	bpl.n	b35c <bt_gatt_notify_cb+0xd4>
	data.attr = params->attr;
    b2a0:	6848      	ldr	r0, [r1, #4]
    b2a2:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    b2a4:	b114      	cbz	r4, b2ac <bt_gatt_notify_cb+0x24>
    b2a6:	7b63      	ldrb	r3, [r4, #13]
    b2a8:	2b07      	cmp	r3, #7
    b2aa:	d15a      	bne.n	b362 <bt_gatt_notify_cb+0xda>
	data.handle = bt_gatt_attr_get_handle(data.attr);
    b2ac:	f7ff ff1a 	bl	b0e4 <bt_gatt_attr_get_handle>
    b2b0:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
    b2b4:	b918      	cbnz	r0, b2be <bt_gatt_notify_cb+0x36>
		return -ENOENT;
    b2b6:	f06f 0001 	mvn.w	r0, #1
}
    b2ba:	b00b      	add	sp, #44	; 0x2c
    b2bc:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
    b2be:	682a      	ldr	r2, [r5, #0]
    b2c0:	b9aa      	cbnz	r2, b2ee <bt_gatt_notify_cb+0x66>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    b2c2:	9b05      	ldr	r3, [sp, #20]
    b2c4:	6818      	ldr	r0, [r3, #0]
    b2c6:	2300      	movs	r3, #0
    b2c8:	f88d 3010 	strb.w	r3, [sp, #16]
    b2cc:	a904      	add	r1, sp, #16
    b2ce:	f642 0303 	movw	r3, #10243	; 0x2803
    b2d2:	f8ad 3012 	strh.w	r3, [sp, #18]
    b2d6:	f015 fcef 	bl	20cb8 <bt_uuid_cmp>
    b2da:	b1c0      	cbz	r0, b30e <bt_gatt_notify_cb+0x86>
	if (conn) {
    b2dc:	f8bd 0018 	ldrh.w	r0, [sp, #24]
    b2e0:	b314      	cbz	r4, b328 <bt_gatt_notify_cb+0xa0>
		return gatt_notify(conn, data.handle, params);
    b2e2:	4601      	mov	r1, r0
    b2e4:	462a      	mov	r2, r5
    b2e6:	4620      	mov	r0, r4
    b2e8:	f7ff fd98 	bl	ae1c <gatt_notify>
    b2ec:	e7e5      	b.n	b2ba <bt_gatt_notify_cb+0x32>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    b2ee:	a905      	add	r1, sp, #20
    b2f0:	9102      	str	r1, [sp, #8]
    b2f2:	491e      	ldr	r1, [pc, #120]	; (b36c <bt_gatt_notify_cb+0xe4>)
    b2f4:	9101      	str	r1, [sp, #4]
    b2f6:	2101      	movs	r1, #1
	found->attr = NULL;
    b2f8:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    b2fa:	9100      	str	r1, [sp, #0]
    b2fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    b300:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    b302:	f7ff ff1f 	bl	b144 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    b306:	9b05      	ldr	r3, [sp, #20]
    b308:	2b00      	cmp	r3, #0
    b30a:	d1da      	bne.n	b2c2 <bt_gatt_notify_cb+0x3a>
    b30c:	e7d3      	b.n	b2b6 <bt_gatt_notify_cb+0x2e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    b30e:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
    b310:	68c3      	ldr	r3, [r0, #12]
    b312:	799b      	ldrb	r3, [r3, #6]
    b314:	06db      	lsls	r3, r3, #27
    b316:	d402      	bmi.n	b31e <bt_gatt_notify_cb+0x96>
			return -EINVAL;
    b318:	f06f 0015 	mvn.w	r0, #21
    b31c:	e7cd      	b.n	b2ba <bt_gatt_notify_cb+0x32>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    b31e:	f016 ff40 	bl	221a2 <bt_gatt_attr_value_handle>
    b322:	f8ad 0018 	strh.w	r0, [sp, #24]
    b326:	e7d9      	b.n	b2dc <bt_gatt_notify_cb+0x54>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    b328:	f642 1202 	movw	r2, #10498	; 0x2902
    b32c:	f8ad 2012 	strh.w	r2, [sp, #18]
    b330:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
    b332:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    b336:	9202      	str	r2, [sp, #8]
    b338:	4a0d      	ldr	r2, [pc, #52]	; (b370 <bt_gatt_notify_cb+0xe8>)
	data.err = -ENOTCONN;
    b33a:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
    b33c:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    b33e:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
    b342:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    b346:	aa04      	add	r2, sp, #16
    b348:	4623      	mov	r3, r4
    b34a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
    b34e:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    b350:	f88d 4010 	strb.w	r4, [sp, #16]
    b354:	f7ff fef6 	bl	b144 <bt_gatt_foreach_attr_type>
	return data.err;
    b358:	9807      	ldr	r0, [sp, #28]
    b35a:	e7ae      	b.n	b2ba <bt_gatt_notify_cb+0x32>
		return -EAGAIN;
    b35c:	f06f 000a 	mvn.w	r0, #10
    b360:	e7ab      	b.n	b2ba <bt_gatt_notify_cb+0x32>
		return -ENOTCONN;
    b362:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    b366:	e7a8      	b.n	b2ba <bt_gatt_notify_cb+0x32>
    b368:	20000098 	.word	0x20000098
    b36c:	00021eb9 	.word	0x00021eb9
    b370:	0000ae91 	.word	0x0000ae91

0000b374 <bt_gatt_indicate>:
{
    b374:	b530      	push	{r4, r5, lr}
    b376:	4b39      	ldr	r3, [pc, #228]	; (b45c <bt_gatt_indicate+0xe8>)
    b378:	f3bf 8f5b 	dmb	ish
    b37c:	681b      	ldr	r3, [r3, #0]
    b37e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    b382:	079a      	lsls	r2, r3, #30
{
    b384:	b08b      	sub	sp, #44	; 0x2c
    b386:	4604      	mov	r4, r0
    b388:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    b38a:	d561      	bpl.n	b450 <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
    b38c:	6848      	ldr	r0, [r1, #4]
    b38e:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    b390:	b114      	cbz	r4, b398 <bt_gatt_indicate+0x24>
    b392:	7b63      	ldrb	r3, [r4, #13]
    b394:	2b07      	cmp	r3, #7
    b396:	d15e      	bne.n	b456 <bt_gatt_indicate+0xe2>
	data.handle = bt_gatt_attr_get_handle(data.attr);
    b398:	f7ff fea4 	bl	b0e4 <bt_gatt_attr_get_handle>
    b39c:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
    b3a0:	b918      	cbnz	r0, b3aa <bt_gatt_indicate+0x36>
		return -ENOENT;
    b3a2:	f06f 0001 	mvn.w	r0, #1
}
    b3a6:	b00b      	add	sp, #44	; 0x2c
    b3a8:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
    b3aa:	682a      	ldr	r2, [r5, #0]
    b3ac:	b9ba      	cbnz	r2, b3de <bt_gatt_indicate+0x6a>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    b3ae:	9b05      	ldr	r3, [sp, #20]
    b3b0:	6818      	ldr	r0, [r3, #0]
    b3b2:	2300      	movs	r3, #0
    b3b4:	f88d 3010 	strb.w	r3, [sp, #16]
    b3b8:	a904      	add	r1, sp, #16
    b3ba:	f642 0303 	movw	r3, #10243	; 0x2803
    b3be:	f8ad 3012 	strh.w	r3, [sp, #18]
    b3c2:	f015 fc79 	bl	20cb8 <bt_uuid_cmp>
    b3c6:	b1d0      	cbz	r0, b3fe <bt_gatt_indicate+0x8a>
	if (conn) {
    b3c8:	f8bd 0018 	ldrh.w	r0, [sp, #24]
    b3cc:	b324      	cbz	r4, b418 <bt_gatt_indicate+0xa4>
		params->_ref = 1;
    b3ce:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
    b3d0:	4601      	mov	r1, r0
		params->_ref = 1;
    b3d2:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
    b3d4:	462a      	mov	r2, r5
    b3d6:	4620      	mov	r0, r4
    b3d8:	f7ff fb3c 	bl	aa54 <gatt_indicate>
    b3dc:	e7e3      	b.n	b3a6 <bt_gatt_indicate+0x32>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    b3de:	a905      	add	r1, sp, #20
    b3e0:	9102      	str	r1, [sp, #8]
    b3e2:	491f      	ldr	r1, [pc, #124]	; (b460 <bt_gatt_indicate+0xec>)
    b3e4:	9101      	str	r1, [sp, #4]
    b3e6:	2101      	movs	r1, #1
	found->attr = NULL;
    b3e8:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    b3ea:	9100      	str	r1, [sp, #0]
    b3ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    b3f0:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    b3f2:	f7ff fea7 	bl	b144 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    b3f6:	9b05      	ldr	r3, [sp, #20]
    b3f8:	2b00      	cmp	r3, #0
    b3fa:	d1d8      	bne.n	b3ae <bt_gatt_indicate+0x3a>
    b3fc:	e7d1      	b.n	b3a2 <bt_gatt_indicate+0x2e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    b3fe:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    b400:	68c3      	ldr	r3, [r0, #12]
    b402:	799b      	ldrb	r3, [r3, #6]
    b404:	069b      	lsls	r3, r3, #26
    b406:	d402      	bmi.n	b40e <bt_gatt_indicate+0x9a>
			return -EINVAL;
    b408:	f06f 0015 	mvn.w	r0, #21
    b40c:	e7cb      	b.n	b3a6 <bt_gatt_indicate+0x32>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    b40e:	f016 fec8 	bl	221a2 <bt_gatt_attr_value_handle>
    b412:	f8ad 0018 	strh.w	r0, [sp, #24]
    b416:	e7d7      	b.n	b3c8 <bt_gatt_indicate+0x54>
	data.err = -ENOTCONN;
    b418:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    b41c:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
    b41e:	2302      	movs	r3, #2
    b420:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    b424:	f642 1302 	movw	r3, #10498	; 0x2902
    b428:	f8ad 3012 	strh.w	r3, [sp, #18]
    b42c:	ab05      	add	r3, sp, #20
    b42e:	9302      	str	r3, [sp, #8]
    b430:	4b0c      	ldr	r3, [pc, #48]	; (b464 <bt_gatt_indicate+0xf0>)
    b432:	9301      	str	r3, [sp, #4]
    b434:	2301      	movs	r3, #1
    b436:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
    b438:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    b43a:	4623      	mov	r3, r4
    b43c:	aa04      	add	r2, sp, #16
    b43e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
    b442:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    b444:	f88d 4010 	strb.w	r4, [sp, #16]
    b448:	f7ff fe7c 	bl	b144 <bt_gatt_foreach_attr_type>
	return data.err;
    b44c:	9807      	ldr	r0, [sp, #28]
    b44e:	e7aa      	b.n	b3a6 <bt_gatt_indicate+0x32>
		return -EAGAIN;
    b450:	f06f 000a 	mvn.w	r0, #10
    b454:	e7a7      	b.n	b3a6 <bt_gatt_indicate+0x32>
		return -ENOTCONN;
    b456:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    b45a:	e7a4      	b.n	b3a6 <bt_gatt_indicate+0x32>
    b45c:	20000098 	.word	0x20000098
    b460:	00021eb9 	.word	0x00021eb9
    b464:	0000ae91 	.word	0x0000ae91

0000b468 <sc_process>:
{
    b468:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    b46a:	f850 2c08 	ldr.w	r2, [r0, #-8]
    b46e:	9201      	str	r2, [sp, #4]
{
    b470:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    b472:	f1a0 0120 	sub.w	r1, r0, #32
    b476:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b47a:	f3bf 8f5b 	dmb	ish
    b47e:	e854 2f00 	ldrex	r2, [r4]
    b482:	f022 0201 	bic.w	r2, r2, #1
    b486:	e844 2000 	strex	r0, r2, [r4]
    b48a:	2800      	cmp	r0, #0
    b48c:	d1f7      	bne.n	b47e <sc_process+0x16>
    b48e:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
    b492:	4a0d      	ldr	r2, [pc, #52]	; (b4c8 <sc_process+0x60>)
    b494:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
    b498:	4a0c      	ldr	r2, [pc, #48]	; (b4cc <sc_process+0x64>)
    b49a:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
    b49e:	aa01      	add	r2, sp, #4
	sc->start = 0U;
    b4a0:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
    b4a2:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
    b4a6:	2204      	movs	r2, #4
	sc->start = 0U;
    b4a8:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
    b4ac:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
    b4b0:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    b4b4:	f7ff ff5e 	bl	b374 <bt_gatt_indicate>
    b4b8:	b918      	cbnz	r0, b4c2 <sc_process+0x5a>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
    b4ba:	2101      	movs	r1, #1
    b4bc:	4620      	mov	r0, r4
    b4be:	f016 fd55 	bl	21f6c <atomic_set_bit>
}
    b4c2:	b002      	add	sp, #8
    b4c4:	bd10      	pop	{r4, pc}
    b4c6:	bf00      	nop
    b4c8:	00024728 	.word	0x00024728
    b4cc:	0000ace9 	.word	0x0000ace9

0000b4d0 <update_ccc>:
{
    b4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    b4d4:	6881      	ldr	r1, [r0, #8]
{
    b4d6:	4617      	mov	r7, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    b4d8:	4a3e      	ldr	r2, [pc, #248]	; (b5d4 <update_ccc+0x104>)
    b4da:	4291      	cmp	r1, r2
{
    b4dc:	b085      	sub	sp, #20
    b4de:	4682      	mov	sl, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    b4e0:	d174      	bne.n	b5cc <update_ccc+0xfc>
    b4e2:	4c3d      	ldr	r4, [pc, #244]	; (b5d8 <update_ccc+0x108>)
    b4e4:	493d      	ldr	r1, [pc, #244]	; (b5dc <update_ccc+0x10c>)
	ccc = attr->user_data;
    b4e6:	f8d0 800c 	ldr.w	r8, [r0, #12]
	struct bt_conn *conn = data->conn;
    b4ea:	683d      	ldr	r5, [r7, #0]
				BT_WARN("CCC %p not writable", attr);
    b4ec:	f8df b104 	ldr.w	fp, [pc, #260]	; b5f4 <update_ccc+0x124>
    b4f0:	1a64      	subs	r4, r4, r1
    b4f2:	08e4      	lsrs	r4, r4, #3
    b4f4:	f108 0315 	add.w	r3, r8, #21
    b4f8:	ea4f 1984 	mov.w	r9, r4, lsl #6
    b4fc:	f108 0601 	add.w	r6, r8, #1
    b500:	9300      	str	r3, [sp, #0]
    b502:	f049 0902 	orr.w	r9, r9, #2
		if (!cfg->value ||
    b506:	f8b6 2007 	ldrh.w	r2, [r6, #7]
    b50a:	b19a      	cbz	r2, b534 <update_ccc+0x64>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    b50c:	f816 1c01 	ldrb.w	r1, [r6, #-1]
    b510:	4632      	mov	r2, r6
    b512:	4628      	mov	r0, r5
    b514:	f015 ff99 	bl	2144a <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
    b518:	b160      	cbz	r0, b534 <update_ccc+0x64>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
    b51a:	222a      	movs	r2, #42	; 0x2a
    b51c:	4651      	mov	r1, sl
    b51e:	4628      	mov	r0, r5
    b520:	f016 fe93 	bl	2224a <bt_gatt_check_perm>
		if (err) {
    b524:	b1d8      	cbz	r0, b55e <update_ccc+0x8e>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
    b526:	2803      	cmp	r0, #3
    b528:	d109      	bne.n	b53e <update_ccc+0x6e>
				BT_WARN("CCC %p not writable", attr);
    b52a:	464a      	mov	r2, r9
    b52c:	4651      	mov	r1, sl
    b52e:	4658      	mov	r0, fp
    b530:	f013 fddb 	bl	1f0ea <log_1>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    b534:	9b00      	ldr	r3, [sp, #0]
    b536:	360a      	adds	r6, #10
    b538:	429e      	cmp	r6, r3
    b53a:	d047      	beq.n	b5cc <update_ccc+0xfc>
    b53c:	e7e3      	b.n	b506 <update_ccc+0x36>
				sec = BT_SECURITY_L3;
    b53e:	2805      	cmp	r0, #5
    b540:	bf14      	ite	ne
    b542:	2202      	movne	r2, #2
    b544:	2203      	moveq	r2, #3
			    bt_conn_get_security(conn) < sec) {
    b546:	4628      	mov	r0, r5
				sec = BT_SECURITY_L3;
    b548:	9201      	str	r2, [sp, #4]
			    bt_conn_get_security(conn) < sec) {
    b54a:	f015 ff73 	bl	21434 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
    b54e:	9a01      	ldr	r2, [sp, #4]
    b550:	4282      	cmp	r2, r0
    b552:	d904      	bls.n	b55e <update_ccc+0x8e>
				if (data->sec < sec) {
    b554:	7939      	ldrb	r1, [r7, #4]
    b556:	4291      	cmp	r1, r2
    b558:	d2ec      	bcs.n	b534 <update_ccc+0x64>
					data->sec = sec;
    b55a:	713a      	strb	r2, [r7, #4]
    b55c:	e7ea      	b.n	b534 <update_ccc+0x64>
		gatt_ccc_changed(attr, ccc);
    b55e:	4641      	mov	r1, r8
    b560:	4650      	mov	r0, sl
    b562:	f016 fc88 	bl	21e76 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
    b566:	4b1e      	ldr	r3, [pc, #120]	; (b5e0 <update_ccc+0x110>)
    b568:	4598      	cmp	r8, r3
    b56a:	d12f      	bne.n	b5cc <update_ccc+0xfc>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
    b56c:	7a28      	ldrb	r0, [r5, #8]
    b56e:	f105 0188 	add.w	r1, r5, #136	; 0x88
    b572:	f7ff fad9 	bl	ab28 <find_sc_cfg>
	if (!cfg) {
    b576:	4606      	mov	r6, r0
    b578:	b340      	cbz	r0, b5cc <update_ccc+0xfc>
	if (!(cfg->data.start || cfg->data.end)) {
    b57a:	8902      	ldrh	r2, [r0, #8]
    b57c:	8943      	ldrh	r3, [r0, #10]
    b57e:	ea52 0103 	orrs.w	r1, r2, r3
    b582:	d023      	beq.n	b5cc <update_ccc+0xfc>
	index = bt_conn_index(conn);
    b584:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
    b586:	f8ad 200c 	strh.w	r2, [sp, #12]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
    b58a:	f8ad 300e 	strh.w	r3, [sp, #14]
	index = bt_conn_index(conn);
    b58e:	f7fe f901 	bl	9794 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    b592:	4914      	ldr	r1, [pc, #80]	; (b5e4 <update_ccc+0x114>)
    b594:	4a14      	ldr	r2, [pc, #80]	; (b5e8 <update_ccc+0x118>)
    b596:	2318      	movs	r3, #24
    b598:	fb03 1300 	mla	r3, r3, r0, r1
    b59c:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
    b59e:	4a13      	ldr	r2, [pc, #76]	; (b5ec <update_ccc+0x11c>)
    b5a0:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
    b5a2:	aa03      	add	r2, sp, #12
    b5a4:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
    b5a6:	2204      	movs	r2, #4
    b5a8:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    b5aa:	b203      	sxth	r3, r0
    b5ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    b5b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    b5b4:	4628      	mov	r0, r5
    b5b6:	f7ff fedd 	bl	b374 <bt_gatt_indicate>
    b5ba:	b128      	cbz	r0, b5c8 <update_ccc+0xf8>
		BT_ERR("SC restore indication failed");
    b5bc:	01a1      	lsls	r1, r4, #6
    b5be:	480c      	ldr	r0, [pc, #48]	; (b5f0 <update_ccc+0x120>)
    b5c0:	f041 0101 	orr.w	r1, r1, #1
    b5c4:	f013 fd84 	bl	1f0d0 <log_0>
__ssp_bos_icheck3(memset, void *, int)
    b5c8:	2300      	movs	r3, #0
    b5ca:	60b3      	str	r3, [r6, #8]
}
    b5cc:	2001      	movs	r0, #1
    b5ce:	b005      	add	sp, #20
    b5d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b5d4:	0000ad49 	.word	0x0000ad49
    b5d8:	00023fa8 	.word	0x00023fa8
    b5dc:	00023ed8 	.word	0x00023ed8
    b5e0:	200002a4 	.word	0x200002a4
    b5e4:	200018c4 	.word	0x200018c4
    b5e8:	00024728 	.word	0x00024728
    b5ec:	000220bb 	.word	0x000220bb
    b5f0:	00027481 	.word	0x00027481
    b5f4:	0002746d 	.word	0x0002746d

0000b5f8 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
    b5f8:	b513      	push	{r0, r1, r4, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    b5fa:	4a0b      	ldr	r2, [pc, #44]	; (b628 <bt_gatt_connected+0x30>)
	data.conn = conn;
    b5fc:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    b5fe:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
    b602:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    b604:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
    b606:	2001      	movs	r0, #1
    b608:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    b60c:	f016 fe10 	bl	22230 <bt_gatt_foreach_attr>
	 * client prior to sending an indication or notification. If the client
	 * does not have an LTK indicating that the client has lost the bond,
	 * enabling encryption will fail.
	 */
	if (IS_ENABLED(CONFIG_BT_SMP) &&
	    bt_conn_get_security(conn) < data.sec) {
    b610:	4620      	mov	r0, r4
    b612:	f015 ff0f 	bl	21434 <bt_conn_get_security>
    b616:	f89d 1004 	ldrb.w	r1, [sp, #4]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    b61a:	4288      	cmp	r0, r1
    b61c:	d202      	bcs.n	b624 <bt_gatt_connected+0x2c>
		bt_conn_set_security(conn, data.sec);
    b61e:	4620      	mov	r0, r4
    b620:	f015 fed5 	bl	213ce <bt_conn_set_security>
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}
    b624:	b002      	add	sp, #8
    b626:	bd10      	pop	{r4, pc}
    b628:	0000b4d1 	.word	0x0000b4d1

0000b62c <bt_gatt_encrypt_change>:

void bt_gatt_encrypt_change(struct bt_conn *conn)
{
    b62c:	b507      	push	{r0, r1, r2, lr}
	BT_DBG("conn %p", conn);

	data.conn = conn;
	data.sec = BT_SECURITY_L1;

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    b62e:	4a06      	ldr	r2, [pc, #24]	; (b648 <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
    b630:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    b632:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
    b634:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    b636:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
    b63a:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    b63e:	f016 fdf7 	bl	22230 <bt_gatt_foreach_attr>
}
    b642:	b003      	add	sp, #12
    b644:	f85d fb04 	ldr.w	pc, [sp], #4
    b648:	0000b4d1 	.word	0x0000b4d1

0000b64c <db_hash_read>:
{
    b64c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b650:	4606      	mov	r6, r0
	return k_work_delayable_busy_get(dwork) != 0;
    b652:	480e      	ldr	r0, [pc, #56]	; (b68c <db_hash_read+0x40>)
    b654:	f8bd 8018 	ldrh.w	r8, [sp, #24]
    b658:	4614      	mov	r4, r2
    b65a:	461d      	mov	r5, r3
    b65c:	f018 f8bb 	bl	237d6 <k_work_delayable_busy_get>
    b660:	4607      	mov	r7, r0
	int rc = k_work_cancel_delayable(&work->work);
    b662:	480a      	ldr	r0, [pc, #40]	; (b68c <db_hash_read+0x40>)
    b664:	f018 f8cb 	bl	237fe <k_work_cancel_delayable>
	if (pending) {
    b668:	b117      	cbz	r7, b670 <db_hash_read+0x24>
		return (rc == 0) ? 0 : -EINVAL;
    b66a:	b908      	cbnz	r0, b670 <db_hash_read+0x24>
		db_hash_gen(true);
    b66c:	f7ff fdc4 	bl	b1f8 <db_hash_gen.isra.0>
	bt_gatt_change_aware(conn, true);
    b670:	2101      	movs	r1, #1
    b672:	4630      	mov	r0, r6
    b674:	f016 fe14 	bl	222a0 <bt_gatt_change_aware>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
    b678:	2310      	movs	r3, #16
    b67a:	9306      	str	r3, [sp, #24]
    b67c:	4642      	mov	r2, r8
    b67e:	4629      	mov	r1, r5
    b680:	4620      	mov	r0, r4
    b682:	4b03      	ldr	r3, [pc, #12]	; (b690 <db_hash_read+0x44>)
}
    b684:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
    b688:	f016 bc8a 	b.w	21fa0 <bt_gatt_attr_read.constprop.0>
    b68c:	20000f38 	.word	0x20000f38
    b690:	200035c1 	.word	0x200035c1

0000b694 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
    b694:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    b696:	4603      	mov	r3, r0
    b698:	4a14      	ldr	r2, [pc, #80]	; (b6ec <bt_gatt_disconnected+0x58>)
{
    b69a:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    b69c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b6a0:	2001      	movs	r0, #1
    b6a2:	f016 fdc5 	bl	22230 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
    b6a6:	4628      	mov	r0, r5
    b6a8:	f7ff fa98 	bl	abdc <find_cf_cfg>
	if (!cfg) {
    b6ac:	4604      	mov	r4, r0
    b6ae:	b1e0      	cbz	r0, b6ea <bt_gatt_disconnected+0x56>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b6b0:	f105 0688 	add.w	r6, r5, #136	; 0x88
    b6b4:	7a28      	ldrb	r0, [r5, #8]
    b6b6:	4631      	mov	r1, r6
    b6b8:	f015 fc63 	bl	20f82 <bt_addr_le_is_bonded>
    b6bc:	b920      	cbnz	r0, b6c8 <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
    b6be:	4620      	mov	r0, r4
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
    b6c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
    b6c4:	f016 bcc0 	b.w	22048 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    b6c8:	1c60      	adds	r0, r4, #1
    b6ca:	4631      	mov	r1, r6
    b6cc:	340c      	adds	r4, #12
    b6ce:	f016 fc5b 	bl	21f88 <bt_addr_le_copy>
    b6d2:	f3bf 8f5b 	dmb	ish
    b6d6:	e854 3f00 	ldrex	r3, [r4]
    b6da:	f023 0302 	bic.w	r3, r3, #2
    b6de:	e844 3200 	strex	r2, r3, [r4]
    b6e2:	2a00      	cmp	r2, #0
    b6e4:	d1f7      	bne.n	b6d6 <bt_gatt_disconnected+0x42>
    b6e6:	f3bf 8f5b 	dmb	ish
}
    b6ea:	bd70      	pop	{r4, r5, r6, pc}
    b6ec:	0000af85 	.word	0x0000af85

0000b6f0 <get_io_capa>:
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
    b6f0:	4b10      	ldr	r3, [pc, #64]	; (b734 <get_io_capa+0x44>)
    b6f2:	681b      	ldr	r3, [r3, #0]
    b6f4:	b1bb      	cbz	r3, b726 <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    b6f6:	681a      	ldr	r2, [r3, #0]
    b6f8:	b142      	cbz	r2, b70c <get_io_capa+0x1c>
    b6fa:	6859      	ldr	r1, [r3, #4]
    b6fc:	b131      	cbz	r1, b70c <get_io_capa+0x1c>
    b6fe:	6899      	ldr	r1, [r3, #8]
    b700:	b911      	cbnz	r1, b708 <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
    b702:	490d      	ldr	r1, [pc, #52]	; (b738 <get_io_capa+0x48>)
    b704:	7809      	ldrb	r1, [r1, #0]
    b706:	b939      	cbnz	r1, b718 <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    b708:	2004      	movs	r0, #4
    b70a:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
    b70c:	490a      	ldr	r1, [pc, #40]	; (b738 <get_io_capa+0x48>)
    b70e:	7809      	ldrb	r1, [r1, #0]
    b710:	b111      	cbz	r1, b718 <get_io_capa+0x28>
    b712:	b10a      	cbz	r2, b718 <get_io_capa+0x28>
    b714:	6899      	ldr	r1, [r3, #8]
    b716:	b941      	cbnz	r1, b72a <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
    b718:	685b      	ldr	r3, [r3, #4]
    b71a:	b943      	cbnz	r3, b72e <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
    b71c:	2a00      	cmp	r2, #0
    b71e:	bf0c      	ite	eq
    b720:	2003      	moveq	r0, #3
    b722:	2000      	movne	r0, #0
    b724:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
    b726:	2003      	movs	r0, #3
    b728:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
    b72a:	2001      	movs	r0, #1
    b72c:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
    b72e:	2002      	movs	r0, #2
	}
}
    b730:	4770      	bx	lr
    b732:	bf00      	nop
    b734:	2000184c 	.word	0x2000184c
    b738:	200035d2 	.word	0x200035d2

0000b73c <smp_dhkey_generate>:
}
#endif /* CONFIG_BT_PERIPHERAL */

static void bt_smp_dhkey_ready(const uint8_t *dhkey);
static uint8_t smp_dhkey_generate(struct bt_smp *smp)
{
    b73c:	b538      	push	{r3, r4, r5, lr}
	int err;

	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
    b73e:	f100 05c4 	add.w	r5, r0, #196	; 0xc4
{
    b742:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
    b744:	2108      	movs	r1, #8
    b746:	4628      	mov	r0, r5
    b748:	f016 fde8 	bl	2231c <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
    b74c:	490a      	ldr	r1, [pc, #40]	; (b778 <smp_dhkey_generate+0x3c>)
    b74e:	f204 1017 	addw	r0, r4, #279	; 0x117
    b752:	f7fd f9d3 	bl	8afc <bt_dh_key_gen>
	if (err) {
    b756:	b170      	cbz	r0, b776 <smp_dhkey_generate+0x3a>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
    b758:	2108      	movs	r1, #8
    b75a:	4628      	mov	r0, r5
    b75c:	f016 fe04 	bl	22368 <atomic_clear_bit>
    b760:	4b06      	ldr	r3, [pc, #24]	; (b77c <smp_dhkey_generate+0x40>)
    b762:	4907      	ldr	r1, [pc, #28]	; (b780 <smp_dhkey_generate+0x44>)

		BT_ERR("Failed to generate DHKey");
    b764:	4807      	ldr	r0, [pc, #28]	; (b784 <smp_dhkey_generate+0x48>)
    b766:	1ac9      	subs	r1, r1, r3
    b768:	08c9      	lsrs	r1, r1, #3
    b76a:	0189      	lsls	r1, r1, #6
    b76c:	f041 0101 	orr.w	r1, r1, #1
    b770:	f013 fcae 	bl	1f0d0 <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
    b774:	2008      	movs	r0, #8
	}

	return 0;
}
    b776:	bd38      	pop	{r3, r4, r5, pc}
    b778:	000229a7 	.word	0x000229a7
    b77c:	00023ed8 	.word	0x00023ed8
    b780:	00023fe0 	.word	0x00023fe0
    b784:	000274ad 	.word	0x000274ad

0000b788 <get_auth.isra.0>:
	if (sc_supported) {
    b788:	4b0c      	ldr	r3, [pc, #48]	; (b7bc <get_auth.isra.0+0x34>)
    b78a:	781b      	ldrb	r3, [r3, #0]
static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
    b78c:	b510      	push	{r4, lr}
	if (sc_supported) {
    b78e:	b17b      	cbz	r3, b7b0 <get_auth.isra.0+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
    b790:	f000 040f 	and.w	r4, r0, #15
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    b794:	f7ff ffac 	bl	b6f0 <get_io_capa>
	if (bondable) {
    b798:	4b09      	ldr	r3, [pc, #36]	; (b7c0 <get_auth.isra.0+0x38>)
    b79a:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    b79c:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
    b79e:	bf0c      	ite	eq
    b7a0:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
    b7a4:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
    b7a8:	b12b      	cbz	r3, b7b6 <get_auth.isra.0+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
    b7aa:	f044 0001 	orr.w	r0, r4, #1
}
    b7ae:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
    b7b0:	f000 0407 	and.w	r4, r0, #7
    b7b4:	e7ee      	b.n	b794 <get_auth.isra.0+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
    b7b6:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
    b7ba:	e7f8      	b.n	b7ae <get_auth.isra.0+0x26>
    b7bc:	200035d2 	.word	0x200035d2
    b7c0:	2000079b 	.word	0x2000079b

0000b7c4 <smp_chan_get>:
{
    b7c4:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
    b7c6:	2106      	movs	r1, #6
    b7c8:	f015 ff96 	bl	216f8 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    b7cc:	4604      	mov	r4, r0
    b7ce:	b948      	cbnz	r0, b7e4 <smp_chan_get+0x20>
    b7d0:	4905      	ldr	r1, [pc, #20]	; (b7e8 <smp_chan_get+0x24>)
    b7d2:	4b06      	ldr	r3, [pc, #24]	; (b7ec <smp_chan_get+0x28>)
		BT_ERR("Unable to find SMP channel");
    b7d4:	4806      	ldr	r0, [pc, #24]	; (b7f0 <smp_chan_get+0x2c>)
    b7d6:	1ac9      	subs	r1, r1, r3
    b7d8:	08c9      	lsrs	r1, r1, #3
    b7da:	0189      	lsls	r1, r1, #6
    b7dc:	f041 0101 	orr.w	r1, r1, #1
    b7e0:	f013 fc76 	bl	1f0d0 <log_0>
}
    b7e4:	4620      	mov	r0, r4
    b7e6:	bd10      	pop	{r4, pc}
    b7e8:	00023fe0 	.word	0x00023fe0
    b7ec:	00023ed8 	.word	0x00023ed8
    b7f0:	000274c6 	.word	0x000274c6

0000b7f4 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
    b7f4:	4a0b      	ldr	r2, [pc, #44]	; (b824 <bt_smp_accept+0x30>)
{
    b7f6:	b508      	push	{r3, lr}
    b7f8:	4603      	mov	r3, r0
		if (smp->chan.chan.conn) {
    b7fa:	6810      	ldr	r0, [r2, #0]
    b7fc:	b918      	cbnz	r0, b806 <bt_smp_accept+0x12>
			continue;
		}

		smp->chan.chan.ops = &ops;
    b7fe:	4b0a      	ldr	r3, [pc, #40]	; (b828 <bt_smp_accept+0x34>)
    b800:	6053      	str	r3, [r2, #4]

		*chan = &smp->chan.chan;
    b802:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    b804:	bd08      	pop	{r3, pc}
    b806:	4909      	ldr	r1, [pc, #36]	; (b82c <bt_smp_accept+0x38>)
    b808:	4a09      	ldr	r2, [pc, #36]	; (b830 <bt_smp_accept+0x3c>)
	BT_ERR("No available SMP context for conn %p", conn);
    b80a:	480a      	ldr	r0, [pc, #40]	; (b834 <bt_smp_accept+0x40>)
    b80c:	1a52      	subs	r2, r2, r1
    b80e:	08d2      	lsrs	r2, r2, #3
    b810:	0192      	lsls	r2, r2, #6
    b812:	f042 0201 	orr.w	r2, r2, #1
    b816:	4619      	mov	r1, r3
    b818:	f013 fc67 	bl	1f0ea <log_1>
	return -ENOMEM;
    b81c:	f06f 000b 	mvn.w	r0, #11
    b820:	e7f0      	b.n	b804 <bt_smp_accept+0x10>
    b822:	bf00      	nop
    b824:	20000fc0 	.word	0x20000fc0
    b828:	000248a4 	.word	0x000248a4
    b82c:	00023ed8 	.word	0x00023ed8
    b830:	00023fe0 	.word	0x00023fe0
    b834:	000274e1 	.word	0x000274e1

0000b838 <smp_init>:
{
    b838:	b538      	push	{r3, r4, r5, lr}
	(void)memset((uint8_t *)smp + sizeof(smp->chan), 0,
    b83a:	f100 05c0 	add.w	r5, r0, #192	; 0xc0
{
    b83e:	4604      	mov	r4, r0
    b840:	22f0      	movs	r2, #240	; 0xf0
    b842:	2100      	movs	r1, #0
    b844:	4628      	mov	r0, r5
    b846:	f018 f9e8 	bl	23c1a <memset>
	if (bt_rand(smp->prnd, 16)) {
    b84a:	f104 00e7 	add.w	r0, r4, #231	; 0xe7
    b84e:	2110      	movs	r1, #16
    b850:	f004 fb12 	bl	fe78 <bt_rand>
    b854:	4604      	mov	r4, r0
    b856:	b948      	cbnz	r0, b86c <smp_init+0x34>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    b858:	2105      	movs	r1, #5
    b85a:	4628      	mov	r0, r5
    b85c:	f016 fd5e 	bl	2231c <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
    b860:	f7fd f93c 	bl	8adc <bt_pub_key_get>
    b864:	4b02      	ldr	r3, [pc, #8]	; (b870 <smp_init+0x38>)
    b866:	6018      	str	r0, [r3, #0]
}
    b868:	4620      	mov	r0, r4
    b86a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    b86c:	2408      	movs	r4, #8
    b86e:	e7fb      	b.n	b868 <smp_init+0x30>
    b870:	200018e0 	.word	0x200018e0

0000b874 <smp_send.isra.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
    b874:	b513      	push	{r0, r1, r4, lr}
    b876:	4613      	mov	r3, r2
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
    b878:	2200      	movs	r2, #0
    b87a:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
    b87c:	4604      	mov	r4, r0
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
    b87e:	460a      	mov	r2, r1
    b880:	6800      	ldr	r0, [r0, #0]
    b882:	2106      	movs	r1, #6
    b884:	f015 ff0f 	bl	216a6 <bt_l2cap_send_cb>
	return k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
    b888:	4805      	ldr	r0, [pc, #20]	; (b8a0 <smp_send.isra.0+0x2c>)
    b88a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    b88e:	2300      	movs	r3, #0
    b890:	f504 71d8 	add.w	r1, r4, #432	; 0x1b0
}
    b894:	b002      	add	sp, #8
    b896:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b89a:	f012 bbfd 	b.w	1e098 <k_work_reschedule_for_queue>
    b89e:	bf00      	nop
    b8a0:	200015c0 	.word	0x200015c0

0000b8a4 <smp_find>:
{
    b8a4:	4601      	mov	r1, r0
    b8a6:	b508      	push	{r3, lr}
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
    b8a8:	4803      	ldr	r0, [pc, #12]	; (b8b8 <smp_find+0x14>)
    b8aa:	f016 fe14 	bl	224d6 <atomic_test_bit>
    b8ae:	2800      	cmp	r0, #0
}
    b8b0:	4802      	ldr	r0, [pc, #8]	; (b8bc <smp_find+0x18>)
    b8b2:	bf08      	it	eq
    b8b4:	2000      	moveq	r0, #0
    b8b6:	bd08      	pop	{r3, pc}
    b8b8:	20001084 	.word	0x20001084
    b8bc:	20000fc0 	.word	0x20000fc0

0000b8c0 <compute_and_check_and_send_slave_dhcheck>:
{
    b8c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	(void)memset(r, 0, sizeof(r));
    b8c4:	2210      	movs	r2, #16
{
    b8c6:	b0a2      	sub	sp, #136	; 0x88
    b8c8:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
    b8ca:	2100      	movs	r1, #0
    b8cc:	eb0d 0002 	add.w	r0, sp, r2
    b8d0:	f018 f9a3 	bl	23c1a <memset>
	switch (smp->method) {
    b8d4:	f894 10c8 	ldrb.w	r1, [r4, #200]	; 0xc8
    b8d8:	2905      	cmp	r1, #5
    b8da:	f200 809d 	bhi.w	ba18 <compute_and_check_and_send_slave_dhcheck+0x158>
    b8de:	e8df f001 	tbb	[pc, r1]
    b8e2:	0306      	.short	0x0306
    b8e4:	8a9b0603 	.word	0x8a9b0603
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    b8e8:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
    b8ec:	9304      	str	r3, [sp, #16]
	uint8_t m[53] = { 0x00, /* counter */
    b8ee:	4b85      	ldr	r3, [pc, #532]	; (bb04 <compute_and_check_and_send_slave_dhcheck+0x244>)
		   &smp->chan.chan.conn->le.init_addr,
    b8f0:	f8d4 a000 	ldr.w	sl, [r4]
	uint8_t m[53] = { 0x00, /* counter */
    b8f4:	aa14      	add	r2, sp, #80	; 0x50
    b8f6:	f103 0730 	add.w	r7, r3, #48	; 0x30
    b8fa:	4615      	mov	r5, r2
    b8fc:	6818      	ldr	r0, [r3, #0]
    b8fe:	6859      	ldr	r1, [r3, #4]
    b900:	4616      	mov	r6, r2
    b902:	c603      	stmia	r6!, {r0, r1}
    b904:	3308      	adds	r3, #8
    b906:	42bb      	cmp	r3, r7
    b908:	4632      	mov	r2, r6
    b90a:	d1f7      	bne.n	b8fc <compute_and_check_and_send_slave_dhcheck+0x3c>
    b90c:	6818      	ldr	r0, [r3, #0]
    b90e:	791b      	ldrb	r3, [r3, #4]
    b910:	6030      	str	r0, [r6, #0]
    b912:	7133      	strb	r3, [r6, #4]
	sys_memcpy_swap(ws, w, 32);
    b914:	ae0c      	add	r6, sp, #48	; 0x30
    b916:	2220      	movs	r2, #32
    b918:	f204 1157 	addw	r1, r4, #343	; 0x157
    b91c:	4630      	mov	r0, r6
    b91e:	f016 fcf1 	bl	22304 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
    b922:	4879      	ldr	r0, [pc, #484]	; (bb08 <compute_and_check_and_send_slave_dhcheck+0x248>)
    b924:	ab08      	add	r3, sp, #32
    b926:	2220      	movs	r2, #32
    b928:	4631      	mov	r1, r6
    b92a:	f016 fd33 	bl	22394 <bt_smp_aes_cmac>
	if (err) {
    b92e:	2800      	cmp	r0, #0
    b930:	f040 80df 	bne.w	baf2 <compute_and_check_and_send_slave_dhcheck+0x232>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    b934:	f104 08f7 	add.w	r8, r4, #247	; 0xf7
	sys_memcpy_swap(m + 5, n1, 16);
    b938:	2210      	movs	r2, #16
    b93a:	4641      	mov	r1, r8
    b93c:	f10d 0055 	add.w	r0, sp, #85	; 0x55
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    b940:	f104 09e7 	add.w	r9, r4, #231	; 0xe7
	sys_memcpy_swap(m + 5, n1, 16);
    b944:	f016 fcde 	bl	22304 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
    b948:	2210      	movs	r2, #16
    b94a:	4649      	mov	r1, r9
    b94c:	f10d 0065 	add.w	r0, sp, #101	; 0x65
    b950:	f016 fcd8 	bl	22304 <sys_memcpy_swap>
	m[37] = a1->type;
    b954:	f89a 308f 	ldrb.w	r3, [sl, #143]	; 0x8f
    b958:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    b95c:	2206      	movs	r2, #6
    b95e:	f10a 0190 	add.w	r1, sl, #144	; 0x90
    b962:	f10d 0076 	add.w	r0, sp, #118	; 0x76
    b966:	f016 fccd 	bl	22304 <sys_memcpy_swap>
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    b96a:	f204 1787 	addw	r7, r4, #391	; 0x187
	m[44] = a2->type;
    b96e:	f89a 3096 	ldrb.w	r3, [sl, #150]	; 0x96
    b972:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    b976:	2206      	movs	r2, #6
    b978:	f10a 0197 	add.w	r1, sl, #151	; 0x97
    b97c:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
    b980:	f016 fcc0 	bl	22304 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
    b984:	463b      	mov	r3, r7
    b986:	2235      	movs	r2, #53	; 0x35
    b988:	4629      	mov	r1, r5
    b98a:	a808      	add	r0, sp, #32
    b98c:	f016 fd02 	bl	22394 <bt_smp_aes_cmac>
	if (err) {
    b990:	2800      	cmp	r0, #0
    b992:	f040 80ae 	bne.w	baf2 <compute_and_check_and_send_slave_dhcheck+0x232>
	sys_mem_swap(mackey, 16);
    b996:	4638      	mov	r0, r7
    b998:	f016 fd1a 	bl	223d0 <sys_mem_swap.constprop.0>
		   smp->tk)) {
    b99c:	f204 1a07 	addw	sl, r4, #263	; 0x107
	m[0] = 0x01;
    b9a0:	2301      	movs	r3, #1
    b9a2:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    b9a6:	2235      	movs	r2, #53	; 0x35
    b9a8:	4653      	mov	r3, sl
    b9aa:	4629      	mov	r1, r5
    b9ac:	a808      	add	r0, sp, #32
    b9ae:	f016 fcf1 	bl	22394 <bt_smp_aes_cmac>
	if (err) {
    b9b2:	2800      	cmp	r0, #0
    b9b4:	f040 809d 	bne.w	baf2 <compute_and_check_and_send_slave_dhcheck+0x232>
	sys_mem_swap(ltk, 16);
    b9b8:	4650      	mov	r0, sl
    b9ba:	f016 fd09 	bl	223d0 <sys_mem_swap.constprop.0>
		   &smp->chan.chan.conn->le.resp_addr,
    b9be:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    b9c0:	4638      	mov	r0, r7
		   &smp->chan.chan.conn->le.resp_addr,
    b9c2:	f852 3bd1 	ldr.w	r3, [r2], #209
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    b9c6:	9503      	str	r5, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
    b9c8:	f103 018f 	add.w	r1, r3, #143	; 0x8f
		   &smp->chan.chan.conn->le.resp_addr,
    b9cc:	3396      	adds	r3, #150	; 0x96
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    b9ce:	e9cd 2300 	strd	r2, r3, [sp]
    b9d2:	9102      	str	r1, [sp, #8]
    b9d4:	ab04      	add	r3, sp, #16
    b9d6:	4642      	mov	r2, r8
    b9d8:	4649      	mov	r1, r9
    b9da:	f016 fd07 	bl	223ec <smp_f6>
    b9de:	b338      	cbz	r0, ba30 <compute_and_check_and_send_slave_dhcheck+0x170>
    b9e0:	494a      	ldr	r1, [pc, #296]	; (bb0c <compute_and_check_and_send_slave_dhcheck+0x24c>)
    b9e2:	4b4b      	ldr	r3, [pc, #300]	; (bb10 <compute_and_check_and_send_slave_dhcheck+0x250>)
		BT_ERR("Calculate local DHKey check failed");
    b9e4:	484b      	ldr	r0, [pc, #300]	; (bb14 <compute_and_check_and_send_slave_dhcheck+0x254>)
    b9e6:	1ac9      	subs	r1, r1, r3
    b9e8:	08c9      	lsrs	r1, r1, #3
    b9ea:	0189      	lsls	r1, r1, #6
    b9ec:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Calculate LTK failed");
    b9f0:	f013 fb6e 	bl	1f0d0 <log_0>
    b9f4:	e01a      	b.n	ba2c <compute_and_check_and_send_slave_dhcheck+0x16c>
		if (smp->oobd_remote) {
    b9f6:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    b9fa:	2b00      	cmp	r3, #0
    b9fc:	f43f af77 	beq.w	b8ee <compute_and_check_and_send_slave_dhcheck+0x2e>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
    ba00:	ad04      	add	r5, sp, #16
    ba02:	f103 0610 	add.w	r6, r3, #16
    ba06:	6818      	ldr	r0, [r3, #0]
    ba08:	6859      	ldr	r1, [r3, #4]
    ba0a:	462a      	mov	r2, r5
    ba0c:	c203      	stmia	r2!, {r0, r1}
    ba0e:	3308      	adds	r3, #8
    ba10:	42b3      	cmp	r3, r6
    ba12:	4615      	mov	r5, r2
    ba14:	d1f7      	bne.n	ba06 <compute_and_check_and_send_slave_dhcheck+0x146>
    ba16:	e76a      	b.n	b8ee <compute_and_check_and_send_slave_dhcheck+0x2e>
    ba18:	4a3c      	ldr	r2, [pc, #240]	; (bb0c <compute_and_check_and_send_slave_dhcheck+0x24c>)
    ba1a:	4b3d      	ldr	r3, [pc, #244]	; (bb10 <compute_and_check_and_send_slave_dhcheck+0x250>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    ba1c:	483e      	ldr	r0, [pc, #248]	; (bb18 <compute_and_check_and_send_slave_dhcheck+0x258>)
    ba1e:	1ad2      	subs	r2, r2, r3
    ba20:	08d2      	lsrs	r2, r2, #3
    ba22:	0192      	lsls	r2, r2, #6
    ba24:	f042 0201 	orr.w	r2, r2, #1
    ba28:	f013 fb5f 	bl	1f0ea <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
    ba2c:	2008      	movs	r0, #8
    ba2e:	e05b      	b.n	bae8 <compute_and_check_and_send_slave_dhcheck+0x228>
	if (smp->method == LE_SC_OOB) {
    ba30:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    ba34:	2b05      	cmp	r3, #5
    ba36:	d10f      	bne.n	ba58 <compute_and_check_and_send_slave_dhcheck+0x198>
		if (smp->oobd_local) {
    ba38:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
    ba3c:	b331      	cbz	r1, ba8c <compute_and_check_and_send_slave_dhcheck+0x1cc>
			memcpy(r, smp->oobd_local->r, sizeof(r));
    ba3e:	460b      	mov	r3, r1
    ba40:	f10d 0c10 	add.w	ip, sp, #16
    ba44:	f101 0e10 	add.w	lr, r1, #16
    ba48:	6818      	ldr	r0, [r3, #0]
    ba4a:	6859      	ldr	r1, [r3, #4]
    ba4c:	4662      	mov	r2, ip
    ba4e:	c203      	stmia	r2!, {r0, r1}
    ba50:	3308      	adds	r3, #8
    ba52:	4573      	cmp	r3, lr
    ba54:	4694      	mov	ip, r2
    ba56:	d1f7      	bne.n	ba48 <compute_and_check_and_send_slave_dhcheck+0x188>
		   &smp->chan.chan.conn->le.init_addr,
    ba58:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    ba5a:	4638      	mov	r0, r7
		   &smp->chan.chan.conn->le.init_addr,
    ba5c:	f852 3bca 	ldr.w	r3, [r2], #202
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    ba60:	9603      	str	r6, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, re)) {
    ba62:	f103 0196 	add.w	r1, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
    ba66:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    ba68:	e9cd 2300 	strd	r2, r3, [sp]
    ba6c:	9102      	str	r1, [sp, #8]
    ba6e:	ab04      	add	r3, sp, #16
    ba70:	464a      	mov	r2, r9
    ba72:	4641      	mov	r1, r8
    ba74:	f016 fcba 	bl	223ec <smp_f6>
    ba78:	b170      	cbz	r0, ba98 <compute_and_check_and_send_slave_dhcheck+0x1d8>
    ba7a:	4924      	ldr	r1, [pc, #144]	; (bb0c <compute_and_check_and_send_slave_dhcheck+0x24c>)
    ba7c:	4b24      	ldr	r3, [pc, #144]	; (bb10 <compute_and_check_and_send_slave_dhcheck+0x250>)
		BT_ERR("Calculate remote DHKey check failed");
    ba7e:	4827      	ldr	r0, [pc, #156]	; (bb1c <compute_and_check_and_send_slave_dhcheck+0x25c>)
    ba80:	1ac9      	subs	r1, r1, r3
    ba82:	08c9      	lsrs	r1, r1, #3
    ba84:	0189      	lsls	r1, r1, #6
    ba86:	f041 0101 	orr.w	r1, r1, #1
    ba8a:	e7b1      	b.n	b9f0 <compute_and_check_and_send_slave_dhcheck+0x130>
			memset(r, 0, sizeof(r));
    ba8c:	2210      	movs	r2, #16
    ba8e:	eb0d 0002 	add.w	r0, sp, r2
    ba92:	f018 f8c2 	bl	23c1a <memset>
    ba96:	e7df      	b.n	ba58 <compute_and_check_and_send_slave_dhcheck+0x198>
	if (memcmp(smp->e, re, 16)) {
    ba98:	2210      	movs	r2, #16
    ba9a:	4631      	mov	r1, r6
    ba9c:	f204 1077 	addw	r0, r4, #375	; 0x177
    baa0:	f018 f89f 	bl	23be2 <memcmp>
    baa4:	bb18      	cbnz	r0, baee <compute_and_check_and_send_slave_dhcheck+0x22e>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
    baa6:	210d      	movs	r1, #13
    baa8:	4620      	mov	r0, r4
    baaa:	f016 fd42 	bl	22532 <smp_create_pdu.isra.0>
	if (!buf) {
    baae:	4606      	mov	r6, r0
    bab0:	2800      	cmp	r0, #0
    bab2:	d0bb      	beq.n	ba2c <compute_and_check_and_send_slave_dhcheck+0x16c>
    bab4:	2110      	movs	r1, #16
    bab6:	3008      	adds	r0, #8
    bab8:	f017 f885 	bl	22bc6 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    babc:	af18      	add	r7, sp, #96	; 0x60
    babe:	4603      	mov	r3, r0
    bac0:	462a      	mov	r2, r5
    bac2:	ca03      	ldmia	r2!, {r0, r1}
    bac4:	42ba      	cmp	r2, r7
    bac6:	6018      	str	r0, [r3, #0]
    bac8:	6059      	str	r1, [r3, #4]
    baca:	4615      	mov	r5, r2
    bacc:	f103 0308 	add.w	r3, r3, #8
    bad0:	d1f6      	bne.n	bac0 <compute_and_check_and_send_slave_dhcheck+0x200>
	smp_send(smp, buf, NULL, NULL);
    bad2:	2200      	movs	r2, #0
    bad4:	4631      	mov	r1, r6
    bad6:	4620      	mov	r0, r4
    bad8:	f7ff fecc 	bl	b874 <smp_send.isra.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    badc:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    bae0:	2101      	movs	r1, #1
    bae2:	f016 fc1b 	bl	2231c <atomic_set_bit>
	return 0;
    bae6:	2000      	movs	r0, #0
}
    bae8:	b022      	add	sp, #136	; 0x88
    baea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    baee:	200b      	movs	r0, #11
    baf0:	e7fa      	b.n	bae8 <compute_and_check_and_send_slave_dhcheck+0x228>
    baf2:	4906      	ldr	r1, [pc, #24]	; (bb0c <compute_and_check_and_send_slave_dhcheck+0x24c>)
    baf4:	4b06      	ldr	r3, [pc, #24]	; (bb10 <compute_and_check_and_send_slave_dhcheck+0x250>)
		BT_ERR("Calculate LTK failed");
    baf6:	480a      	ldr	r0, [pc, #40]	; (bb20 <compute_and_check_and_send_slave_dhcheck+0x260>)
    baf8:	1ac9      	subs	r1, r1, r3
    bafa:	08c9      	lsrs	r1, r1, #3
    bafc:	0189      	lsls	r1, r1, #6
    bafe:	f041 0101 	orr.w	r1, r1, #1
    bb02:	e775      	b.n	b9f0 <compute_and_check_and_send_slave_dhcheck+0x130>
    bb04:	00024136 	.word	0x00024136
    bb08:	000277f6 	.word	0x000277f6
    bb0c:	00023fe0 	.word	0x00023fe0
    bb10:	00023ed8 	.word	0x00023ed8
    bb14:	00027522 	.word	0x00027522
    bb18:	00027506 	.word	0x00027506
    bb1c:	00027545 	.word	0x00027545
    bb20:	00027569 	.word	0x00027569

0000bb24 <smp_send_pairing_confirm>:
{
    bb24:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
    bb26:	f890 40c8 	ldrb.w	r4, [r0, #200]	; 0xc8
    bb2a:	2c02      	cmp	r4, #2
{
    bb2c:	4605      	mov	r5, r0
	switch (smp->method) {
    bb2e:	d824      	bhi.n	bb7a <smp_send_pairing_confirm+0x56>
    bb30:	b14c      	cbz	r4, bb46 <smp_send_pairing_confirm+0x22>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    bb32:	f890 319c 	ldrb.w	r3, [r0, #412]	; 0x19c
    bb36:	f8d0 4198 	ldr.w	r4, [r0, #408]	; 0x198
    bb3a:	40dc      	lsrs	r4, r3
    bb3c:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
    bb40:	f064 047f 	orn	r4, r4, #127	; 0x7f
    bb44:	b2e4      	uxtb	r4, r4
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    bb46:	2103      	movs	r1, #3
    bb48:	4628      	mov	r0, r5
    bb4a:	f016 fcf2 	bl	22532 <smp_create_pdu.isra.0>
	if (!buf) {
    bb4e:	4606      	mov	r6, r0
    bb50:	b300      	cbz	r0, bb94 <smp_send_pairing_confirm+0x70>
    bb52:	2110      	movs	r1, #16
    bb54:	3008      	adds	r0, #8
    bb56:	f017 f836 	bl	22bc6 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
    bb5a:	9000      	str	r0, [sp, #0]
    bb5c:	4816      	ldr	r0, [pc, #88]	; (bbb8 <smp_send_pairing_confirm+0x94>)
    bb5e:	4623      	mov	r3, r4
    bb60:	6800      	ldr	r0, [r0, #0]
    bb62:	f105 02e7 	add.w	r2, r5, #231	; 0xe7
    bb66:	f205 1117 	addw	r1, r5, #279	; 0x117
    bb6a:	f016 fc8d 	bl	22488 <smp_f4>
    bb6e:	4604      	mov	r4, r0
    bb70:	b1a0      	cbz	r0, bb9c <smp_send_pairing_confirm+0x78>
		net_buf_unref(buf);
    bb72:	4630      	mov	r0, r6
    bb74:	f00e fd42 	bl	1a5fc <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    bb78:	e00c      	b.n	bb94 <smp_send_pairing_confirm+0x70>
	switch (smp->method) {
    bb7a:	2c03      	cmp	r4, #3
    bb7c:	d00c      	beq.n	bb98 <smp_send_pairing_confirm+0x74>
    bb7e:	4a0f      	ldr	r2, [pc, #60]	; (bbbc <smp_send_pairing_confirm+0x98>)
    bb80:	4b0f      	ldr	r3, [pc, #60]	; (bbc0 <smp_send_pairing_confirm+0x9c>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    bb82:	4810      	ldr	r0, [pc, #64]	; (bbc4 <smp_send_pairing_confirm+0xa0>)
    bb84:	1ad2      	subs	r2, r2, r3
    bb86:	08d2      	lsrs	r2, r2, #3
    bb88:	0192      	lsls	r2, r2, #6
    bb8a:	f042 0201 	orr.w	r2, r2, #1
    bb8e:	4621      	mov	r1, r4
    bb90:	f013 faab 	bl	1f0ea <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
    bb94:	2008      	movs	r0, #8
    bb96:	e00c      	b.n	bbb2 <smp_send_pairing_confirm+0x8e>
	switch (smp->method) {
    bb98:	2400      	movs	r4, #0
    bb9a:	e7d4      	b.n	bb46 <smp_send_pairing_confirm+0x22>
	smp_send(smp, buf, NULL, NULL);
    bb9c:	4602      	mov	r2, r0
    bb9e:	4631      	mov	r1, r6
    bba0:	4628      	mov	r0, r5
    bba2:	f7ff fe67 	bl	b874 <smp_send.isra.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    bba6:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
    bbaa:	4621      	mov	r1, r4
    bbac:	f016 fbdc 	bl	22368 <atomic_clear_bit>
	return 0;
    bbb0:	4620      	mov	r0, r4
}
    bbb2:	b002      	add	sp, #8
    bbb4:	bd70      	pop	{r4, r5, r6, pc}
    bbb6:	bf00      	nop
    bbb8:	200018e0 	.word	0x200018e0
    bbbc:	00023fe0 	.word	0x00023fe0
    bbc0:	00023ed8 	.word	0x00023ed8
    bbc4:	00027506 	.word	0x00027506

0000bbc8 <smp_public_key_slave>:
{
    bbc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
    bbca:	f100 05c4 	add.w	r5, r0, #196	; 0xc4
{
    bbce:	4604      	mov	r4, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
    bbd0:	210e      	movs	r1, #14
    bbd2:	4628      	mov	r0, r5
    bbd4:	f016 fc7f 	bl	224d6 <atomic_test_bit>
    bbd8:	b998      	cbnz	r0, bc02 <smp_public_key_slave+0x3a>
	    memcmp(smp->pkey, sc_public_key, 64) == 0) {
    bbda:	4b4f      	ldr	r3, [pc, #316]	; (bd18 <smp_public_key_slave+0x150>)
    bbdc:	2240      	movs	r2, #64	; 0x40
    bbde:	6819      	ldr	r1, [r3, #0]
    bbe0:	f204 1017 	addw	r0, r4, #279	; 0x117
    bbe4:	f017 fffd 	bl	23be2 <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
    bbe8:	b958      	cbnz	r0, bc02 <smp_public_key_slave+0x3a>
    bbea:	494c      	ldr	r1, [pc, #304]	; (bd1c <smp_public_key_slave+0x154>)
    bbec:	4b4c      	ldr	r3, [pc, #304]	; (bd20 <smp_public_key_slave+0x158>)
		BT_WARN("Remote is using identical public key");
    bbee:	484d      	ldr	r0, [pc, #308]	; (bd24 <smp_public_key_slave+0x15c>)
    bbf0:	1ac9      	subs	r1, r1, r3
    bbf2:	08c9      	lsrs	r1, r1, #3
    bbf4:	0189      	lsls	r1, r1, #6
    bbf6:	f041 0102 	orr.w	r1, r1, #2
    bbfa:	f013 fa69 	bl	1f0d0 <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
    bbfe:	2008      	movs	r0, #8
    bc00:	e037      	b.n	bc72 <smp_public_key_slave+0xaa>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
    bc02:	210c      	movs	r1, #12
    bc04:	4620      	mov	r0, r4
    bc06:	f016 fc94 	bl	22532 <smp_create_pdu.isra.0>
	if (!req_buf) {
    bc0a:	4606      	mov	r6, r0
    bc0c:	2800      	cmp	r0, #0
    bc0e:	d0f6      	beq.n	bbfe <smp_public_key_slave+0x36>
    bc10:	2140      	movs	r1, #64	; 0x40
    bc12:	3008      	adds	r0, #8
    bc14:	f016 ffd7 	bl	22bc6 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
    bc18:	4b3f      	ldr	r3, [pc, #252]	; (bd18 <smp_public_key_slave+0x150>)
    bc1a:	681b      	ldr	r3, [r3, #0]
    bc1c:	4602      	mov	r2, r0
    bc1e:	f103 0120 	add.w	r1, r3, #32
    bc22:	f853 7b04 	ldr.w	r7, [r3], #4
    bc26:	f842 7b04 	str.w	r7, [r2], #4
    bc2a:	428b      	cmp	r3, r1
    bc2c:	d1f9      	bne.n	bc22 <smp_public_key_slave+0x5a>
    bc2e:	f100 0220 	add.w	r2, r0, #32
    bc32:	f103 0120 	add.w	r1, r3, #32
    bc36:	f853 0b04 	ldr.w	r0, [r3], #4
    bc3a:	f842 0b04 	str.w	r0, [r2], #4
    bc3e:	428b      	cmp	r3, r1
    bc40:	d1f9      	bne.n	bc36 <smp_public_key_slave+0x6e>
	smp_send(smp, req_buf, NULL, NULL);
    bc42:	4631      	mov	r1, r6
    bc44:	2200      	movs	r2, #0
    bc46:	4620      	mov	r0, r4
    bc48:	f7ff fe14 	bl	b874 <smp_send.isra.0>
	switch (smp->method) {
    bc4c:	f894 10c8 	ldrb.w	r1, [r4, #200]	; 0xc8
    bc50:	2905      	cmp	r1, #5
    bc52:	d853      	bhi.n	bcfc <smp_public_key_slave+0x134>
    bc54:	e8df f001 	tbb	[pc, r1]
    bc58:	030e3503 	.word	0x030e3503
    bc5c:	5052      	.short	0x5052
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    bc5e:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    bc62:	2104      	movs	r1, #4
    bc64:	f016 fb5a 	bl	2231c <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
    bc68:	4620      	mov	r0, r4
    bc6a:	f7ff ff5b 	bl	bb24 <smp_send_pairing_confirm>
		if (err) {
    bc6e:	2800      	cmp	r0, #0
    bc70:	d035      	beq.n	bcde <smp_public_key_slave+0x116>
}
    bc72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    bc74:	2104      	movs	r1, #4
    bc76:	f504 70cc 	add.w	r0, r4, #408	; 0x198
    bc7a:	f004 f8fd 	bl	fe78 <bt_rand>
    bc7e:	2800      	cmp	r0, #0
    bc80:	d1bd      	bne.n	bbfe <smp_public_key_slave+0x36>
		smp->passkey %= 1000000;
    bc82:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
    bc86:	4a28      	ldr	r2, [pc, #160]	; (bd28 <smp_public_key_slave+0x160>)
	if (bt_auth && bt_auth->passkey_display) {
    bc88:	4e28      	ldr	r6, [pc, #160]	; (bd2c <smp_public_key_slave+0x164>)
		smp->passkey %= 1000000;
    bc8a:	fbb1 f3f2 	udiv	r3, r1, r2
    bc8e:	fb02 1313 	mls	r3, r2, r3, r1
    bc92:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
	if (bt_auth && bt_auth->passkey_display) {
    bc96:	6833      	ldr	r3, [r6, #0]
	smp->passkey_round = 0U;
    bc98:	f884 019c 	strb.w	r0, [r4, #412]	; 0x19c
	if (bt_auth && bt_auth->passkey_display) {
    bc9c:	b15b      	cbz	r3, bcb6 <smp_public_key_slave+0xee>
    bc9e:	681b      	ldr	r3, [r3, #0]
    bca0:	b14b      	cbz	r3, bcb6 <smp_public_key_slave+0xee>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    bca2:	210b      	movs	r1, #11
    bca4:	4628      	mov	r0, r5
    bca6:	f016 fb39 	bl	2231c <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    bcaa:	6833      	ldr	r3, [r6, #0]
    bcac:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
    bcb0:	681b      	ldr	r3, [r3, #0]
    bcb2:	6820      	ldr	r0, [r4, #0]
    bcb4:	4798      	blx	r3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    bcb6:	2103      	movs	r1, #3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    bcb8:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    bcbc:	f016 fb2e 	bl	2231c <atomic_set_bit>
		break;
    bcc0:	e00d      	b.n	bcde <smp_public_key_slave+0x116>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    bcc2:	2103      	movs	r1, #3
    bcc4:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    bcc8:	f016 fb28 	bl	2231c <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    bccc:	4628      	mov	r0, r5
    bcce:	210a      	movs	r1, #10
    bcd0:	f016 fb24 	bl	2231c <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
    bcd4:	4b15      	ldr	r3, [pc, #84]	; (bd2c <smp_public_key_slave+0x164>)
    bcd6:	6820      	ldr	r0, [r4, #0]
    bcd8:	681b      	ldr	r3, [r3, #0]
    bcda:	685b      	ldr	r3, [r3, #4]
    bcdc:	4798      	blx	r3
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    bcde:	4628      	mov	r0, r5
    bce0:	2107      	movs	r1, #7
    bce2:	f016 fb1b 	bl	2231c <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
    bce6:	2008      	movs	r0, #8
    bce8:	f7ff fddc 	bl	b8a4 <smp_find>
    bcec:	b988      	cbnz	r0, bd12 <smp_public_key_slave+0x14a>
		return smp_dhkey_generate(smp);
    bcee:	4620      	mov	r0, r4
}
    bcf0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return smp_dhkey_generate(smp);
    bcf4:	f7ff bd22 	b.w	b73c <smp_dhkey_generate>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    bcf8:	2104      	movs	r1, #4
    bcfa:	e7dd      	b.n	bcb8 <smp_public_key_slave+0xf0>
    bcfc:	4b08      	ldr	r3, [pc, #32]	; (bd20 <smp_public_key_slave+0x158>)
    bcfe:	4a07      	ldr	r2, [pc, #28]	; (bd1c <smp_public_key_slave+0x154>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    bd00:	480b      	ldr	r0, [pc, #44]	; (bd30 <smp_public_key_slave+0x168>)
    bd02:	1ad2      	subs	r2, r2, r3
    bd04:	08d2      	lsrs	r2, r2, #3
    bd06:	0192      	lsls	r2, r2, #6
    bd08:	f042 0201 	orr.w	r2, r2, #1
    bd0c:	f013 f9ed 	bl	1f0ea <log_1>
    bd10:	e775      	b.n	bbfe <smp_public_key_slave+0x36>
	return 0;
    bd12:	2000      	movs	r0, #0
    bd14:	e7ad      	b.n	bc72 <smp_public_key_slave+0xaa>
    bd16:	bf00      	nop
    bd18:	200018e0 	.word	0x200018e0
    bd1c:	00023fe0 	.word	0x00023fe0
    bd20:	00023ed8 	.word	0x00023ed8
    bd24:	0002757e 	.word	0x0002757e
    bd28:	000f4240 	.word	0x000f4240
    bd2c:	2000184c 	.word	0x2000184c
    bd30:	00027506 	.word	0x00027506

0000bd34 <smp_public_key>:
{
    bd34:	b538      	push	{r3, r4, r5, lr}
    bd36:	688b      	ldr	r3, [r1, #8]
    bd38:	4604      	mov	r4, r0
	memcpy(smp->pkey, req->x, 32);
    bd3a:	f200 1017 	addw	r0, r0, #279	; 0x117
    bd3e:	4602      	mov	r2, r0
    bd40:	f103 0120 	add.w	r1, r3, #32
    bd44:	f853 5b04 	ldr.w	r5, [r3], #4
    bd48:	f842 5b04 	str.w	r5, [r2], #4
    bd4c:	428b      	cmp	r3, r1
    bd4e:	d1f9      	bne.n	bd44 <smp_public_key+0x10>
    bd50:	f204 1237 	addw	r2, r4, #311	; 0x137
    bd54:	f103 0120 	add.w	r1, r3, #32
    bd58:	f853 5b04 	ldr.w	r5, [r3], #4
    bd5c:	f842 5b04 	str.w	r5, [r2], #4
    bd60:	428b      	cmp	r3, r1
    bd62:	d1f9      	bne.n	bd58 <smp_public_key+0x24>
	if (bt_pub_key_is_debug(smp->pkey)) {
    bd64:	f7fc fe14 	bl	8990 <bt_pub_key_is_debug>
    bd68:	b948      	cbnz	r0, bd7e <smp_public_key+0x4a>
	if (!sc_public_key) {
    bd6a:	4b1b      	ldr	r3, [pc, #108]	; (bdd8 <smp_public_key+0xa4>)
    bd6c:	681d      	ldr	r5, [r3, #0]
    bd6e:	bb75      	cbnz	r5, bdce <smp_public_key+0x9a>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    bd70:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    bd74:	2106      	movs	r1, #6
    bd76:	f016 fad1 	bl	2231c <atomic_set_bit>
		return 0;
    bd7a:	4628      	mov	r0, r5
    bd7c:	e026      	b.n	bdcc <smp_public_key+0x98>
    bd7e:	4b17      	ldr	r3, [pc, #92]	; (bddc <smp_public_key+0xa8>)
    bd80:	4917      	ldr	r1, [pc, #92]	; (bde0 <smp_public_key+0xac>)
		BT_INFO("Remote is using Debug Public key");
    bd82:	4818      	ldr	r0, [pc, #96]	; (bde4 <smp_public_key+0xb0>)
    bd84:	1ac9      	subs	r1, r1, r3
    bd86:	08c9      	lsrs	r1, r1, #3
    bd88:	0189      	lsls	r1, r1, #6
    bd8a:	f041 0103 	orr.w	r1, r1, #3
    bd8e:	f013 f99f 	bl	1f0d0 <log_0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
    bd92:	210e      	movs	r1, #14
    bd94:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    bd98:	f016 fac0 	bl	2231c <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
    bd9c:	6825      	ldr	r5, [r4, #0]
	if (!conn->le.keys) {
    bd9e:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    bda2:	b933      	cbnz	r3, bdb2 <smp_public_key+0x7e>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    bda4:	7a28      	ldrb	r0, [r5, #8]
    bda6:	f105 0188 	add.w	r1, r5, #136	; 0x88
    bdaa:	f001 f8e1 	bl	cf70 <bt_keys_get_addr>
    bdae:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
    bdb2:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    bdb6:	2b00      	cmp	r3, #0
    bdb8:	d0d7      	beq.n	bd6a <smp_public_key+0x36>
    bdba:	89da      	ldrh	r2, [r3, #14]
    bdbc:	f002 0224 	and.w	r2, r2, #36	; 0x24
    bdc0:	2a00      	cmp	r2, #0
    bdc2:	d0d2      	beq.n	bd6a <smp_public_key+0x36>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
    bdc4:	7b5b      	ldrb	r3, [r3, #13]
    bdc6:	079b      	lsls	r3, r3, #30
    bdc8:	d4cf      	bmi.n	bd6a <smp_public_key+0x36>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
    bdca:	2003      	movs	r0, #3
}
    bdcc:	bd38      	pop	{r3, r4, r5, pc}
	err = smp_public_key_slave(smp);
    bdce:	4620      	mov	r0, r4
}
    bdd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	err = smp_public_key_slave(smp);
    bdd4:	f7ff bef8 	b.w	bbc8 <smp_public_key_slave>
    bdd8:	200018e0 	.word	0x200018e0
    bddc:	00023ed8 	.word	0x00023ed8
    bde0:	00023fe0 	.word	0x00023fe0
    bde4:	000275a3 	.word	0x000275a3

0000bde8 <smp_pairing_req>:
{
    bde8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
    bdec:	688d      	ldr	r5, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    bdee:	78eb      	ldrb	r3, [r5, #3]
    bdf0:	3b07      	subs	r3, #7
    bdf2:	2b09      	cmp	r3, #9
{
    bdf4:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    bdf6:	d904      	bls.n	be02 <smp_pairing_req+0x1a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    bdf8:	2506      	movs	r5, #6
}
    bdfa:	4628      	mov	r0, r5
    bdfc:	b002      	add	sp, #8
    bdfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct bt_conn *conn = smp->chan.chan.conn;
    be02:	6807      	ldr	r7, [r0, #0]
	if (!conn->le.keys) {
    be04:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
    be08:	b163      	cbz	r3, be24 <smp_pairing_req+0x3c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
    be0a:	f104 06c4 	add.w	r6, r4, #196	; 0xc4
    be0e:	210f      	movs	r1, #15
    be10:	4630      	mov	r0, r6
    be12:	f016 fb60 	bl	224d6 <atomic_test_bit>
    be16:	b980      	cbnz	r0, be3a <smp_pairing_req+0x52>
		int ret = smp_init(smp);
    be18:	4620      	mov	r0, r4
    be1a:	f7ff fd0d 	bl	b838 <smp_init>
		if (ret) {
    be1e:	b160      	cbz	r0, be3a <smp_pairing_req+0x52>
			return ret;
    be20:	b2c5      	uxtb	r5, r0
    be22:	e7ea      	b.n	bdfa <smp_pairing_req+0x12>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    be24:	7a38      	ldrb	r0, [r7, #8]
    be26:	f107 0188 	add.w	r1, r7, #136	; 0x88
    be2a:	f001 f8a1 	bl	cf70 <bt_keys_get_addr>
    be2e:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
		if (!conn->le.keys) {
    be32:	2800      	cmp	r0, #0
    be34:	d1e9      	bne.n	be0a <smp_pairing_req+0x22>
	switch (sec) {
    be36:	2508      	movs	r5, #8
    be38:	e7df      	b.n	bdfa <smp_pairing_req+0x12>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    be3a:	2301      	movs	r3, #1
    be3c:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
    be40:	682b      	ldr	r3, [r5, #0]
    be42:	f8c4 30ca 	str.w	r3, [r4, #202]	; 0xca
    be46:	88ab      	ldrh	r3, [r5, #4]
    be48:	f8a4 30ce 	strh.w	r3, [r4, #206]	; 0xce
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    be4c:	2302      	movs	r3, #2
    be4e:	f884 30d0 	strb.w	r3, [r4, #208]	; 0xd0
	rsp->auth_req = get_auth(conn, req->auth_req);
    be52:	78a8      	ldrb	r0, [r5, #2]
    be54:	f7ff fc98 	bl	b788 <get_auth.isra.0>
    be58:	f884 00d3 	strb.w	r0, [r4, #211]	; 0xd3
    be5c:	4680      	mov	r8, r0
	rsp->io_capability = get_io_capa();
    be5e:	f7ff fc47 	bl	b6f0 <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    be62:	4bae      	ldr	r3, [pc, #696]	; (c11c <smp_pairing_req+0x334>)
	rsp->io_capability = get_io_capa();
    be64:	f884 00d1 	strb.w	r0, [r4, #209]	; 0xd1
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    be68:	781b      	ldrb	r3, [r3, #0]
    be6a:	f884 30d2 	strb.w	r3, [r4, #210]	; 0xd2
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    be6e:	2310      	movs	r3, #16
    be70:	f884 30d4 	strb.w	r3, [r4, #212]	; 0xd4
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
    be74:	792b      	ldrb	r3, [r5, #4]
    be76:	f003 0303 	and.w	r3, r3, #3
    be7a:	f884 30d5 	strb.w	r3, [r4, #213]	; 0xd5
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    be7e:	796b      	ldrb	r3, [r5, #5]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    be80:	f018 0f08 	tst.w	r8, #8
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    be84:	f003 0301 	and.w	r3, r3, #1
    be88:	f884 30d6 	strb.w	r3, [r4, #214]	; 0xd6
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    be8c:	d00f      	beq.n	beae <smp_pairing_req+0xc6>
    be8e:	78ab      	ldrb	r3, [r5, #2]
    be90:	0719      	lsls	r1, r3, #28
    be92:	d50c      	bpl.n	beae <smp_pairing_req+0xc6>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    be94:	2105      	movs	r1, #5
    be96:	4630      	mov	r0, r6
    be98:	f016 fa40 	bl	2231c <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
    be9c:	f894 30d5 	ldrb.w	r3, [r4, #213]	; 0xd5
    bea0:	f003 0302 	and.w	r3, r3, #2
    bea4:	f884 30d5 	strb.w	r3, [r4, #213]	; 0xd5
		rsp->resp_key_dist &= SEND_KEYS_SC;
    bea8:	2300      	movs	r3, #0
    beaa:	f884 30d6 	strb.w	r3, [r4, #214]	; 0xd6
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    beae:	f894 30d3 	ldrb.w	r3, [r4, #211]	; 0xd3
    beb2:	069a      	lsls	r2, r3, #26
    beb4:	d506      	bpl.n	bec4 <smp_pairing_req+0xdc>
    beb6:	78ab      	ldrb	r3, [r5, #2]
    beb8:	069b      	lsls	r3, r3, #26
    beba:	d503      	bpl.n	bec4 <smp_pairing_req+0xdc>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    bebc:	2114      	movs	r1, #20
    bebe:	4630      	mov	r0, r6
    bec0:	f016 fa2c 	bl	2231c <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
    bec4:	f894 30d6 	ldrb.w	r3, [r4, #214]	; 0xd6
    bec8:	f884 31a8 	strb.w	r3, [r4, #424]	; 0x1a8
	smp->remote_dist = rsp->init_key_dist;
    becc:	f894 30d5 	ldrb.w	r3, [r4, #213]	; 0xd5
    bed0:	f884 31a9 	strb.w	r3, [r4, #425]	; 0x1a9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    bed4:	f894 30d3 	ldrb.w	r3, [r4, #211]	; 0xd3
    bed8:	07d8      	lsls	r0, r3, #31
    beda:	d506      	bpl.n	beea <smp_pairing_req+0x102>
    bedc:	78ab      	ldrb	r3, [r5, #2]
    bede:	07d9      	lsls	r1, r3, #31
    bee0:	d503      	bpl.n	beea <smp_pairing_req+0x102>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    bee2:	210d      	movs	r1, #13
    bee4:	4630      	mov	r0, r6
    bee6:	f016 fa19 	bl	2231c <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    beea:	2103      	movs	r1, #3
    beec:	4630      	mov	r0, r6
    beee:	f016 fa15 	bl	2231c <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    bef2:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
    bef4:	782d      	ldrb	r5, [r5, #0]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    bef6:	f016 faee 	bl	224d6 <atomic_test_bit>
    befa:	bb48      	cbnz	r0, bf50 <smp_pairing_req+0x168>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    befc:	2d04      	cmp	r5, #4
    befe:	d81d      	bhi.n	bf3c <smp_pairing_req+0x154>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
    bf00:	f894 20d2 	ldrb.w	r2, [r4, #210]	; 0xd2
    bf04:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
    bf08:	4013      	ands	r3, r2
    bf0a:	07da      	lsls	r2, r3, #31
    bf0c:	d43d      	bmi.n	bf8a <smp_pairing_req+0x1a2>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    bf0e:	f894 00cc 	ldrb.w	r0, [r4, #204]	; 0xcc
    bf12:	f894 30d3 	ldrb.w	r3, [r4, #211]	; 0xd3
    bf16:	4318      	orrs	r0, r3
    bf18:	f010 0004 	ands.w	r0, r0, #4
    bf1c:	d00e      	beq.n	bf3c <smp_pairing_req+0x154>
	method = gen_method_legacy[remote_io][get_io_capa()];
    bf1e:	f7ff fbe7 	bl	b6f0 <get_io_capa>
    bf22:	4b7f      	ldr	r3, [pc, #508]	; (c120 <smp_pairing_req+0x338>)
    bf24:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    bf28:	441d      	add	r5, r3
    bf2a:	5c28      	ldrb	r0, [r5, r0]
	if (method == PASSKEY_ROLE) {
    bf2c:	2804      	cmp	r0, #4
    bf2e:	d105      	bne.n	bf3c <smp_pairing_req+0x154>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    bf30:	6823      	ldr	r3, [r4, #0]
    bf32:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_INPUT;
    bf34:	2b00      	cmp	r3, #0
    bf36:	bf0c      	ite	eq
    bf38:	2002      	moveq	r0, #2
    bf3a:	2001      	movne	r0, #1
	smp->method = get_pair_method(smp, req->io_capability);
    bf3c:	f884 00c8 	strb.w	r0, [r4, #200]	; 0xc8
	if (!update_keys_check(smp, conn->le.keys)) {
    bf40:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
    bf44:	4620      	mov	r0, r4
    bf46:	f016 facf 	bl	224e8 <update_keys_check>
    bf4a:	bb20      	cbnz	r0, bf96 <smp_pairing_req+0x1ae>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
    bf4c:	2503      	movs	r5, #3
    bf4e:	e754      	b.n	bdfa <smp_pairing_req+0x12>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
    bf50:	f894 00cc 	ldrb.w	r0, [r4, #204]	; 0xcc
    bf54:	f894 20d3 	ldrb.w	r2, [r4, #211]	; 0xd3
    bf58:	ea00 0302 	and.w	r3, r0, r2
    bf5c:	071b      	lsls	r3, r3, #28
    bf5e:	d506      	bpl.n	bf6e <smp_pairing_req+0x186>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
    bf60:	f894 10d2 	ldrb.w	r1, [r4, #210]	; 0xd2
    bf64:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
    bf68:	430b      	orrs	r3, r1
    bf6a:	07d9      	lsls	r1, r3, #31
    bf6c:	d40f      	bmi.n	bf8e <smp_pairing_req+0x1a6>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    bf6e:	2d04      	cmp	r5, #4
    bf70:	d80f      	bhi.n	bf92 <smp_pairing_req+0x1aa>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    bf72:	4310      	orrs	r0, r2
    bf74:	f010 0004 	ands.w	r0, r0, #4
    bf78:	d0e0      	beq.n	bf3c <smp_pairing_req+0x154>
	return gen_method_sc[remote_io][get_io_capa()];
    bf7a:	f7ff fbb9 	bl	b6f0 <get_io_capa>
    bf7e:	4b69      	ldr	r3, [pc, #420]	; (c124 <smp_pairing_req+0x33c>)
    bf80:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    bf84:	441d      	add	r5, r3
    bf86:	5c28      	ldrb	r0, [r5, r0]
    bf88:	e7d8      	b.n	bf3c <smp_pairing_req+0x154>
		return LEGACY_OOB;
    bf8a:	2006      	movs	r0, #6
    bf8c:	e7d6      	b.n	bf3c <smp_pairing_req+0x154>
			return LE_SC_OOB;
    bf8e:	2005      	movs	r0, #5
    bf90:	e7d4      	b.n	bf3c <smp_pairing_req+0x154>
		return JUST_WORKS;
    bf92:	2000      	movs	r0, #0
    bf94:	e7d2      	b.n	bf3c <smp_pairing_req+0x154>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
    bf96:	6823      	ldr	r3, [r4, #0]
    bf98:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
    bf9a:	2b03      	cmp	r3, #3
    bf9c:	d036      	beq.n	c00c <smp_pairing_req+0x224>
    bf9e:	d822      	bhi.n	bfe6 <smp_pairing_req+0x1fe>
    bfa0:	3b01      	subs	r3, #1
    bfa2:	2b01      	cmp	r3, #1
    bfa4:	f63f af47 	bhi.w	be36 <smp_pairing_req+0x4e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    bfa8:	2105      	movs	r1, #5
    bfaa:	4630      	mov	r0, r6
    bfac:	f016 fa93 	bl	224d6 <atomic_test_bit>
    bfb0:	2800      	cmp	r0, #0
    bfb2:	f040 80c5 	bne.w	c140 <smp_pairing_req+0x358>
	struct bt_conn *conn = smp->chan.chan.conn;
    bfb6:	6825      	ldr	r5, [r4, #0]
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
    bfb8:	f105 0188 	add.w	r1, r5, #136	; 0x88
    bfbc:	7a28      	ldrb	r0, [r5, #8]
    bfbe:	f001 f85d 	bl	d07c <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
    bfc2:	f894 10c8 	ldrb.w	r1, [r4, #200]	; 0xc8
    bfc6:	b330      	cbz	r0, c016 <smp_pairing_req+0x22e>
    bfc8:	7b43      	ldrb	r3, [r0, #13]
    bfca:	07db      	lsls	r3, r3, #31
    bfcc:	d523      	bpl.n	c016 <smp_pairing_req+0x22e>
    bfce:	bb11      	cbnz	r1, c016 <smp_pairing_req+0x22e>
    bfd0:	4b55      	ldr	r3, [pc, #340]	; (c128 <smp_pairing_req+0x340>)
    bfd2:	4956      	ldr	r1, [pc, #344]	; (c12c <smp_pairing_req+0x344>)
		BT_ERR("JustWorks failed, authenticated keys present");
    bfd4:	4856      	ldr	r0, [pc, #344]	; (c130 <smp_pairing_req+0x348>)
    bfd6:	1ac9      	subs	r1, r1, r3
    bfd8:	08c9      	lsrs	r1, r1, #3
    bfda:	0189      	lsls	r1, r1, #6
    bfdc:	f041 0101 	orr.w	r1, r1, #1
    bfe0:	f013 f876 	bl	1f0d0 <log_0>
	if (ret) {
    bfe4:	e727      	b.n	be36 <smp_pairing_req+0x4e>
	switch (sec) {
    bfe6:	2b04      	cmp	r3, #4
    bfe8:	f47f af25 	bne.w	be36 <smp_pairing_req+0x4e>
	return MIN(req->max_key_size, rsp->max_key_size);
    bfec:	f894 30d4 	ldrb.w	r3, [r4, #212]	; 0xd4
    bff0:	f894 20cd 	ldrb.w	r2, [r4, #205]	; 0xcd
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
    bff4:	4293      	cmp	r3, r2
    bff6:	bf28      	it	cs
    bff8:	4613      	movcs	r3, r2
    bffa:	2b10      	cmp	r3, #16
    bffc:	f47f aefc 	bne.w	bdf8 <smp_pairing_req+0x10>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    c000:	2105      	movs	r1, #5
    c002:	4630      	mov	r0, r6
    c004:	f016 fa67 	bl	224d6 <atomic_test_bit>
    c008:	2800      	cmp	r0, #0
    c00a:	d09f      	beq.n	bf4c <smp_pairing_req+0x164>
		if (smp->method == JUST_WORKS) {
    c00c:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    c010:	2b00      	cmp	r3, #0
    c012:	d1c9      	bne.n	bfa8 <smp_pairing_req+0x1c0>
    c014:	e79a      	b.n	bf4c <smp_pairing_req+0x164>
	switch (smp->method) {
    c016:	2906      	cmp	r1, #6
    c018:	d868      	bhi.n	c0ec <smp_pairing_req+0x304>
    c01a:	e8df f001 	tbb	[pc, r1]
    c01e:	5d1b      	.short	0x5d1b
    c020:	67676732 	.word	0x67676732
    c024:	04          	.byte	0x04
    c025:	00          	.byte	0x00
		if (bt_auth && bt_auth->oob_data_request) {
    c026:	4d43      	ldr	r5, [pc, #268]	; (c134 <smp_pairing_req+0x34c>)
    c028:	682b      	ldr	r3, [r5, #0]
    c02a:	2b00      	cmp	r3, #0
    c02c:	d069      	beq.n	c102 <smp_pairing_req+0x31a>
    c02e:	68db      	ldr	r3, [r3, #12]
    c030:	2b00      	cmp	r3, #0
    c032:	d066      	beq.n	c102 <smp_pairing_req+0x31a>
			struct bt_conn_oob_info info = {
    c034:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    c036:	210a      	movs	r1, #10
    c038:	4630      	mov	r0, r6
			struct bt_conn_oob_info info = {
    c03a:	f8ad 3004 	strh.w	r3, [sp, #4]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    c03e:	f016 f96d 	bl	2231c <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
    c042:	682b      	ldr	r3, [r5, #0]
    c044:	6820      	ldr	r0, [r4, #0]
    c046:	68db      	ldr	r3, [r3, #12]
    c048:	a901      	add	r1, sp, #4
    c04a:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    c04c:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    c050:	2b00      	cmp	r3, #0
    c052:	d158      	bne.n	c106 <smp_pairing_req+0x31e>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    c054:	210f      	movs	r1, #15
    c056:	4630      	mov	r0, r6
    c058:	f016 fa3d 	bl	224d6 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    c05c:	4605      	mov	r5, r0
    c05e:	2800      	cmp	r0, #0
    c060:	d151      	bne.n	c106 <smp_pairing_req+0x31e>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    c062:	4f34      	ldr	r7, [pc, #208]	; (c134 <smp_pairing_req+0x34c>)
    c064:	683b      	ldr	r3, [r7, #0]
    c066:	2b00      	cmp	r3, #0
    c068:	d04d      	beq.n	c106 <smp_pairing_req+0x31e>
	    bt_auth && bt_auth->pairing_confirm) {
    c06a:	695b      	ldr	r3, [r3, #20]
    c06c:	2b00      	cmp	r3, #0
    c06e:	d04a      	beq.n	c106 <smp_pairing_req+0x31e>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    c070:	4630      	mov	r0, r6
    c072:	210a      	movs	r1, #10
    c074:	f016 f952 	bl	2231c <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    c078:	683b      	ldr	r3, [r7, #0]
    c07a:	6820      	ldr	r0, [r4, #0]
    c07c:	695b      	ldr	r3, [r3, #20]
		bt_auth->pairing_confirm(conn);
    c07e:	4798      	blx	r3
		return 0;
    c080:	e6bb      	b.n	bdfa <smp_pairing_req+0x12>
			if (bt_rand(&passkey, sizeof(passkey))) {
    c082:	2104      	movs	r1, #4
    c084:	eb0d 0001 	add.w	r0, sp, r1
    c088:	f003 fef6 	bl	fe78 <bt_rand>
    c08c:	2800      	cmp	r0, #0
    c08e:	f47f aed2 	bne.w	be36 <smp_pairing_req+0x4e>
			passkey %= 1000000;
    c092:	9901      	ldr	r1, [sp, #4]
    c094:	4a28      	ldr	r2, [pc, #160]	; (c138 <smp_pairing_req+0x350>)
		if (bt_auth && bt_auth->passkey_display) {
    c096:	4f27      	ldr	r7, [pc, #156]	; (c134 <smp_pairing_req+0x34c>)
			passkey %= 1000000;
    c098:	fbb1 f3f2 	udiv	r3, r1, r2
    c09c:	fb02 1313 	mls	r3, r2, r3, r1
    c0a0:	9301      	str	r3, [sp, #4]
		if (bt_auth && bt_auth->passkey_display) {
    c0a2:	683b      	ldr	r3, [r7, #0]
    c0a4:	b153      	cbz	r3, c0bc <smp_pairing_req+0x2d4>
    c0a6:	681b      	ldr	r3, [r3, #0]
    c0a8:	b143      	cbz	r3, c0bc <smp_pairing_req+0x2d4>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    c0aa:	210b      	movs	r1, #11
    c0ac:	4630      	mov	r0, r6
    c0ae:	f016 f935 	bl	2231c <atomic_set_bit>
			bt_auth->passkey_display(conn, passkey);
    c0b2:	683b      	ldr	r3, [r7, #0]
    c0b4:	9901      	ldr	r1, [sp, #4]
    c0b6:	681b      	ldr	r3, [r3, #0]
    c0b8:	4628      	mov	r0, r5
    c0ba:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
    c0bc:	9b01      	ldr	r3, [sp, #4]
	dst[0] = val;
    c0be:	f884 3107 	strb.w	r3, [r4, #263]	; 0x107
	dst[1] = val >> 8;
    c0c2:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    c0c6:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    c0c8:	f884 3109 	strb.w	r3, [r4, #265]	; 0x109
	dst[1] = val >> 8;
    c0cc:	0a1b      	lsrs	r3, r3, #8
    c0ce:	f884 2108 	strb.w	r2, [r4, #264]	; 0x108
    c0d2:	f884 310a 	strb.w	r3, [r4, #266]	; 0x10a
	if (ret) {
    c0d6:	e7b9      	b.n	c04c <smp_pairing_req+0x264>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    c0d8:	4630      	mov	r0, r6
    c0da:	210a      	movs	r1, #10
    c0dc:	f016 f91e 	bl	2231c <atomic_set_bit>
		bt_auth->passkey_entry(conn);
    c0e0:	4b14      	ldr	r3, [pc, #80]	; (c134 <smp_pairing_req+0x34c>)
    c0e2:	681b      	ldr	r3, [r3, #0]
    c0e4:	4628      	mov	r0, r5
    c0e6:	685b      	ldr	r3, [r3, #4]
    c0e8:	4798      	blx	r3
	if (ret) {
    c0ea:	e7af      	b.n	c04c <smp_pairing_req+0x264>
    c0ec:	4b0e      	ldr	r3, [pc, #56]	; (c128 <smp_pairing_req+0x340>)
    c0ee:	4a0f      	ldr	r2, [pc, #60]	; (c12c <smp_pairing_req+0x344>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    c0f0:	4812      	ldr	r0, [pc, #72]	; (c13c <smp_pairing_req+0x354>)
    c0f2:	1ad2      	subs	r2, r2, r3
    c0f4:	08d2      	lsrs	r2, r2, #3
    c0f6:	0192      	lsls	r2, r2, #6
    c0f8:	f042 0201 	orr.w	r2, r2, #1
    c0fc:	f012 fff5 	bl	1f0ea <log_1>
	if (ret) {
    c100:	e699      	b.n	be36 <smp_pairing_req+0x4e>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
    c102:	2502      	movs	r5, #2
    c104:	e679      	b.n	bdfa <smp_pairing_req+0x12>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    c106:	2103      	movs	r1, #3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    c108:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    c10c:	f016 f906 	bl	2231c <atomic_set_bit>
	return send_pairing_rsp(smp);
    c110:	4620      	mov	r0, r4
    c112:	f016 fa4c 	bl	225ae <send_pairing_rsp>
    c116:	4605      	mov	r5, r0
    c118:	e66f      	b.n	bdfa <smp_pairing_req+0x12>
    c11a:	bf00      	nop
    c11c:	200035d1 	.word	0x200035d1
    c120:	000277c4 	.word	0x000277c4
    c124:	000277dd 	.word	0x000277dd
    c128:	00023ed8 	.word	0x00023ed8
    c12c:	00023fe0 	.word	0x00023fe0
    c130:	000275c4 	.word	0x000275c4
    c134:	2000184c 	.word	0x2000184c
    c138:	000f4240 	.word	0x000f4240
    c13c:	00027506 	.word	0x00027506
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    c140:	f894 50c8 	ldrb.w	r5, [r4, #200]	; 0xc8
    c144:	b9a5      	cbnz	r5, c170 <smp_pairing_req+0x388>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    c146:	210f      	movs	r1, #15
    c148:	4630      	mov	r0, r6
    c14a:	f016 f9c4 	bl	224d6 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    c14e:	b978      	cbnz	r0, c170 <smp_pairing_req+0x388>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    c150:	f8df 8020 	ldr.w	r8, [pc, #32]	; c174 <smp_pairing_req+0x38c>
    c154:	f8d8 3000 	ldr.w	r3, [r8]
    c158:	b153      	cbz	r3, c170 <smp_pairing_req+0x388>
	    bt_auth && bt_auth->pairing_confirm) {
    c15a:	695b      	ldr	r3, [r3, #20]
    c15c:	b143      	cbz	r3, c170 <smp_pairing_req+0x388>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    c15e:	4630      	mov	r0, r6
    c160:	210a      	movs	r1, #10
    c162:	f016 f8db 	bl	2231c <atomic_set_bit>
		bt_auth->pairing_confirm(conn);
    c166:	f8d8 3000 	ldr.w	r3, [r8]
    c16a:	4638      	mov	r0, r7
    c16c:	695b      	ldr	r3, [r3, #20]
    c16e:	e786      	b.n	c07e <smp_pairing_req+0x296>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    c170:	210c      	movs	r1, #12
    c172:	e7c9      	b.n	c108 <smp_pairing_req+0x320>
    c174:	2000184c 	.word	0x2000184c

0000c178 <smp_ident_info>:
{
    c178:	b570      	push	{r4, r5, r6, lr}
    c17a:	460b      	mov	r3, r1
    c17c:	4605      	mov	r5, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    c17e:	210d      	movs	r1, #13
    c180:	30c4      	adds	r0, #196	; 0xc4
    c182:	f016 f9a8 	bl	224d6 <atomic_test_bit>
    c186:	b338      	cbz	r0, c1d8 <smp_ident_info+0x60>
		struct bt_smp_ident_info *req = (void *)buf->data;
    c188:	689c      	ldr	r4, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    c18a:	682b      	ldr	r3, [r5, #0]
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
    c18c:	f103 0688 	add.w	r6, r3, #136	; 0x88
    c190:	7a19      	ldrb	r1, [r3, #8]
    c192:	4632      	mov	r2, r6
    c194:	2002      	movs	r0, #2
    c196:	f016 fc9d 	bl	22ad4 <bt_keys_get_type>
		if (!keys) {
    c19a:	b990      	cbnz	r0, c1c2 <smp_ident_info+0x4a>
    c19c:	4a12      	ldr	r2, [pc, #72]	; (c1e8 <smp_ident_info+0x70>)
    c19e:	4c13      	ldr	r4, [pc, #76]	; (c1ec <smp_ident_info+0x74>)
			BT_ERR("Unable to get keys for %s",
    c1a0:	4630      	mov	r0, r6
    c1a2:	1aa4      	subs	r4, r4, r2
    c1a4:	f7fa f87e 	bl	62a4 <bt_addr_le_str_real>
    c1a8:	f7f7 fd16 	bl	3bd8 <log_strdup>
    c1ac:	08e4      	lsrs	r4, r4, #3
    c1ae:	01a4      	lsls	r4, r4, #6
    c1b0:	f044 0401 	orr.w	r4, r4, #1
    c1b4:	4601      	mov	r1, r0
    c1b6:	4622      	mov	r2, r4
    c1b8:	480d      	ldr	r0, [pc, #52]	; (c1f0 <smp_ident_info+0x78>)
    c1ba:	f012 ff96 	bl	1f0ea <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    c1be:	2008      	movs	r0, #8
}
    c1c0:	bd70      	pop	{r4, r5, r6, pc}
    c1c2:	4622      	mov	r2, r4
    c1c4:	f100 032a 	add.w	r3, r0, #42	; 0x2a
    c1c8:	f104 0110 	add.w	r1, r4, #16
    c1cc:	f852 0b04 	ldr.w	r0, [r2], #4
    c1d0:	f843 0b04 	str.w	r0, [r3], #4
    c1d4:	428a      	cmp	r2, r1
    c1d6:	d1f9      	bne.n	c1cc <smp_ident_info+0x54>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
    c1d8:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
    c1dc:	2109      	movs	r1, #9
    c1de:	f016 f89d 	bl	2231c <atomic_set_bit>
	return 0;
    c1e2:	2000      	movs	r0, #0
    c1e4:	e7ec      	b.n	c1c0 <smp_ident_info+0x48>
    c1e6:	bf00      	nop
    c1e8:	00023ed8 	.word	0x00023ed8
    c1ec:	00023fe0 	.word	0x00023fe0
    c1f0:	000275f1 	.word	0x000275f1

0000c1f4 <smp_encrypt_info>:
{
    c1f4:	b570      	push	{r4, r5, r6, lr}
    c1f6:	460b      	mov	r3, r1
    c1f8:	4605      	mov	r5, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    c1fa:	210d      	movs	r1, #13
    c1fc:	30c4      	adds	r0, #196	; 0xc4
    c1fe:	f016 f96a 	bl	224d6 <atomic_test_bit>
    c202:	b338      	cbz	r0, c254 <smp_encrypt_info+0x60>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
    c204:	689c      	ldr	r4, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    c206:	682b      	ldr	r3, [r5, #0]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    c208:	f103 0688 	add.w	r6, r3, #136	; 0x88
    c20c:	7a19      	ldrb	r1, [r3, #8]
    c20e:	4632      	mov	r2, r6
    c210:	2004      	movs	r0, #4
    c212:	f016 fc5f 	bl	22ad4 <bt_keys_get_type>
		if (!keys) {
    c216:	b990      	cbnz	r0, c23e <smp_encrypt_info+0x4a>
    c218:	4a12      	ldr	r2, [pc, #72]	; (c264 <smp_encrypt_info+0x70>)
    c21a:	4c13      	ldr	r4, [pc, #76]	; (c268 <smp_encrypt_info+0x74>)
			BT_ERR("Unable to get keys for %s",
    c21c:	4630      	mov	r0, r6
    c21e:	1aa4      	subs	r4, r4, r2
    c220:	f7fa f840 	bl	62a4 <bt_addr_le_str_real>
    c224:	f7f7 fcd8 	bl	3bd8 <log_strdup>
    c228:	08e4      	lsrs	r4, r4, #3
    c22a:	01a4      	lsls	r4, r4, #6
    c22c:	f044 0401 	orr.w	r4, r4, #1
    c230:	4601      	mov	r1, r0
    c232:	4622      	mov	r2, r4
    c234:	480d      	ldr	r0, [pc, #52]	; (c26c <smp_encrypt_info+0x78>)
    c236:	f012 ff58 	bl	1f0ea <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    c23a:	2008      	movs	r0, #8
}
    c23c:	bd70      	pop	{r4, r5, r6, pc}
    c23e:	4622      	mov	r2, r4
    c240:	f100 031a 	add.w	r3, r0, #26
    c244:	f104 0110 	add.w	r1, r4, #16
    c248:	f852 0b04 	ldr.w	r0, [r2], #4
    c24c:	f843 0b04 	str.w	r0, [r3], #4
    c250:	428a      	cmp	r2, r1
    c252:	d1f9      	bne.n	c248 <smp_encrypt_info+0x54>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
    c254:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
    c258:	2107      	movs	r1, #7
    c25a:	f016 f85f 	bl	2231c <atomic_set_bit>
	return 0;
    c25e:	2000      	movs	r0, #0
    c260:	e7ec      	b.n	c23c <smp_encrypt_info+0x48>
    c262:	bf00      	nop
    c264:	00023ed8 	.word	0x00023ed8
    c268:	00023fe0 	.word	0x00023fe0
    c26c:	000275f1 	.word	0x000275f1

0000c270 <bt_smp_connected>:
{
    c270:	b510      	push	{r4, lr}
	k_work_init_delayable(&work->work, handler);
    c272:	4905      	ldr	r1, [pc, #20]	; (c288 <bt_smp_connected+0x18>)
    c274:	4604      	mov	r4, r0
    c276:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
    c27a:	f017 faa0 	bl	237be <k_work_init_delayable>
	smp_reset(smp);
    c27e:	4620      	mov	r0, r4
}
    c280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
    c284:	f016 b9f3 	b.w	2266e <smp_reset>
    c288:	0000cded 	.word	0x0000cded

0000c28c <smp_pairing_confirm>:
{
    c28c:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
    c28e:	688d      	ldr	r5, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
    c290:	f100 06c4 	add.w	r6, r0, #196	; 0xc4
{
    c294:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
    c296:	210b      	movs	r1, #11
    c298:	4630      	mov	r0, r6
    c29a:	f016 f865 	bl	22368 <atomic_clear_bit>
    c29e:	462b      	mov	r3, r5
    c2a0:	f104 02d7 	add.w	r2, r4, #215	; 0xd7
    c2a4:	f105 0110 	add.w	r1, r5, #16
    c2a8:	f853 0b04 	ldr.w	r0, [r3], #4
    c2ac:	f842 0b04 	str.w	r0, [r2], #4
    c2b0:	428b      	cmp	r3, r1
    c2b2:	d1f9      	bne.n	c2a8 <smp_pairing_confirm+0x1c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    c2b4:	2105      	movs	r1, #5
    c2b6:	4630      	mov	r0, r6
    c2b8:	f016 f90d 	bl	224d6 <atomic_test_bit>
    c2bc:	b920      	cbnz	r0, c2c8 <smp_pairing_confirm+0x3c>
		return legacy_pairing_confirm(smp);
    c2be:	4620      	mov	r0, r4
}
    c2c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return legacy_pairing_confirm(smp);
    c2c4:	f016 ba54 	b.w	22770 <legacy_pairing_confirm>
	switch (smp->method) {
    c2c8:	f894 10c8 	ldrb.w	r1, [r4, #200]	; 0xc8
    c2cc:	2901      	cmp	r1, #1
    c2ce:	d00b      	beq.n	c2e8 <smp_pairing_confirm+0x5c>
    c2d0:	2902      	cmp	r1, #2
    c2d2:	d115      	bne.n	c300 <smp_pairing_confirm+0x74>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    c2d4:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    c2d8:	2104      	movs	r1, #4
    c2da:	f016 f81f 	bl	2231c <atomic_set_bit>
		return smp_send_pairing_confirm(smp);
    c2de:	4620      	mov	r0, r4
}
    c2e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
    c2e4:	f7ff bc1e 	b.w	bb24 <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    c2e8:	210a      	movs	r1, #10
    c2ea:	4630      	mov	r0, r6
    c2ec:	f016 f8f3 	bl	224d6 <atomic_test_bit>
    c2f0:	2800      	cmp	r0, #0
    c2f2:	d0ef      	beq.n	c2d4 <smp_pairing_confirm+0x48>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    c2f4:	4630      	mov	r0, r6
    c2f6:	2100      	movs	r1, #0
    c2f8:	f016 f810 	bl	2231c <atomic_set_bit>
			return 0;
    c2fc:	2000      	movs	r0, #0
}
    c2fe:	bd70      	pop	{r4, r5, r6, pc}
    c300:	4b05      	ldr	r3, [pc, #20]	; (c318 <smp_pairing_confirm+0x8c>)
    c302:	4a06      	ldr	r2, [pc, #24]	; (c31c <smp_pairing_confirm+0x90>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    c304:	4806      	ldr	r0, [pc, #24]	; (c320 <smp_pairing_confirm+0x94>)
    c306:	1ad2      	subs	r2, r2, r3
    c308:	08d2      	lsrs	r2, r2, #3
    c30a:	0192      	lsls	r2, r2, #6
    c30c:	f042 0201 	orr.w	r2, r2, #1
    c310:	f012 feeb 	bl	1f0ea <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
    c314:	2008      	movs	r0, #8
    c316:	e7f2      	b.n	c2fe <smp_pairing_confirm+0x72>
    c318:	00023ed8 	.word	0x00023ed8
    c31c:	00023fe0 	.word	0x00023fe0
    c320:	00027506 	.word	0x00027506

0000c324 <smp_pairing_random>:
{
    c324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c328:	688b      	ldr	r3, [r1, #8]
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    c32a:	f100 08f7 	add.w	r8, r0, #247	; 0xf7
{
    c32e:	b09c      	sub	sp, #112	; 0x70
    c330:	4604      	mov	r4, r0
    c332:	4642      	mov	r2, r8
    c334:	f103 0110 	add.w	r1, r3, #16
    c338:	f853 0b04 	ldr.w	r0, [r3], #4
    c33c:	f842 0b04 	str.w	r0, [r2], #4
    c340:	428b      	cmp	r3, r1
    c342:	d1f9      	bne.n	c338 <smp_pairing_random+0x14>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    c344:	f104 06c4 	add.w	r6, r4, #196	; 0xc4
    c348:	2105      	movs	r1, #5
    c34a:	4630      	mov	r0, r6
    c34c:	f016 f8c3 	bl	224d6 <atomic_test_bit>
    c350:	2800      	cmp	r0, #0
    c352:	d14d      	bne.n	c3f0 <smp_pairing_random+0xcc>
	struct bt_conn *conn = smp->chan.chan.conn;
    c354:	6823      	ldr	r3, [r4, #0]
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    c356:	f204 1707 	addw	r7, r4, #263	; 0x107
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    c35a:	f103 0296 	add.w	r2, r3, #150	; 0x96
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    c35e:	ad08      	add	r5, sp, #32
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    c360:	338f      	adds	r3, #143	; 0x8f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    c362:	9201      	str	r2, [sp, #4]
    c364:	9300      	str	r3, [sp, #0]
    c366:	9502      	str	r5, [sp, #8]
    c368:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    c36c:	f104 02c9 	add.w	r2, r4, #201	; 0xc9
    c370:	4641      	mov	r1, r8
    c372:	4638      	mov	r0, r7
    c374:	f016 f9a0 	bl	226b8 <smp_c1>
	if (err) {
    c378:	bb20      	cbnz	r0, c3c4 <smp_pairing_random+0xa0>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
    c37a:	2210      	movs	r2, #16
    c37c:	4629      	mov	r1, r5
    c37e:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
    c382:	f017 fc2e 	bl	23be2 <memcmp>
    c386:	2800      	cmp	r0, #0
    c388:	f040 8098 	bne.w	c4bc <smp_pairing_random+0x198>
	memcpy(out + 8, r1, 8);
    c38c:	4622      	mov	r2, r4
	memcpy(out, r2, 8);
    c38e:	f8d8 0000 	ldr.w	r0, [r8]
    c392:	f8d8 1004 	ldr.w	r1, [r8, #4]
    c396:	462b      	mov	r3, r5
    c398:	c303      	stmia	r3!, {r0, r1}
	memcpy(out + 8, r1, 8);
    c39a:	f852 0fe7 	ldr.w	r0, [r2, #231]!
    c39e:	6851      	ldr	r1, [r2, #4]
    c3a0:	ab0a      	add	r3, sp, #40	; 0x28
    c3a2:	c303      	stmia	r3!, {r0, r1}
	return bt_encrypt_le(k, out, out);
    c3a4:	462a      	mov	r2, r5
    c3a6:	4629      	mov	r1, r5
    c3a8:	4638      	mov	r0, r7
    c3aa:	f003 fd67 	bl	fe7c <bt_encrypt_le>
		if (err) {
    c3ae:	b158      	cbz	r0, c3c8 <smp_pairing_random+0xa4>
    c3b0:	4976      	ldr	r1, [pc, #472]	; (c58c <smp_pairing_random+0x268>)
    c3b2:	4b77      	ldr	r3, [pc, #476]	; (c590 <smp_pairing_random+0x26c>)
			BT_ERR("Calculate STK failed");
    c3b4:	4877      	ldr	r0, [pc, #476]	; (c594 <smp_pairing_random+0x270>)
    c3b6:	1ac9      	subs	r1, r1, r3
    c3b8:	08c9      	lsrs	r1, r1, #3
    c3ba:	0189      	lsls	r1, r1, #6
    c3bc:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Calculate confirm failed");
    c3c0:	f012 fe86 	bl	1f0d0 <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
    c3c4:	2508      	movs	r5, #8
    c3c6:	e07a      	b.n	c4be <smp_pairing_random+0x19a>
    c3c8:	463b      	mov	r3, r7
    c3ca:	af0c      	add	r7, sp, #48	; 0x30
    c3cc:	462a      	mov	r2, r5
    c3ce:	ca03      	ldmia	r2!, {r0, r1}
    c3d0:	42ba      	cmp	r2, r7
    c3d2:	6018      	str	r0, [r3, #0]
    c3d4:	6059      	str	r1, [r3, #4]
    c3d6:	4615      	mov	r5, r2
    c3d8:	f103 0308 	add.w	r3, r3, #8
    c3dc:	d1f6      	bne.n	c3cc <smp_pairing_random+0xa8>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    c3de:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    c3e0:	4630      	mov	r0, r6
    c3e2:	f015 ff9b 	bl	2231c <atomic_set_bit>
	return smp_send_pairing_random(smp);
    c3e6:	4620      	mov	r0, r4
    c3e8:	f016 f8c3 	bl	22572 <smp_send_pairing_random>
    c3ec:	4605      	mov	r5, r0
    c3ee:	e066      	b.n	c4be <smp_pairing_random+0x19a>
	switch (smp->method) {
    c3f0:	f894 10c8 	ldrb.w	r1, [r4, #200]	; 0xc8
    c3f4:	2905      	cmp	r1, #5
    c3f6:	f200 80a9 	bhi.w	c54c <smp_pairing_random+0x228>
    c3fa:	e8df f001 	tbb	[pc, r1]
    c3fe:	3c35      	.short	0x3c35
    c400:	89a7033c 	.word	0x89a7033c
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
    c404:	4b64      	ldr	r3, [pc, #400]	; (c598 <smp_pairing_random+0x274>)
	sys_memcpy_swap(m, u, 32);
    c406:	2220      	movs	r2, #32
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
    c408:	681d      	ldr	r5, [r3, #0]
	sys_memcpy_swap(m, u, 32);
    c40a:	eb0d 0002 	add.w	r0, sp, r2
    c40e:	f204 1117 	addw	r1, r4, #279	; 0x117
    c412:	f015 ff77 	bl	22304 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
    c416:	2220      	movs	r2, #32
    c418:	4629      	mov	r1, r5
    c41a:	a810      	add	r0, sp, #64	; 0x40
    c41c:	f015 ff72 	bl	22304 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
    c420:	2210      	movs	r2, #16
    c422:	f104 01e7 	add.w	r1, r4, #231	; 0xe7
    c426:	a818      	add	r0, sp, #96	; 0x60
    c428:	f015 ff6c 	bl	22304 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
    c42c:	2210      	movs	r2, #16
    c42e:	eb0d 0002 	add.w	r0, sp, r2
    c432:	4641      	mov	r1, r8
    c434:	f015 ff66 	bl	22304 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
    c438:	ab04      	add	r3, sp, #16
    c43a:	2250      	movs	r2, #80	; 0x50
    c43c:	a908      	add	r1, sp, #32
    c43e:	4618      	mov	r0, r3
    c440:	f015 ffa8 	bl	22394 <bt_smp_aes_cmac>
	if (err) {
    c444:	2800      	cmp	r0, #0
    c446:	d1bd      	bne.n	c3c4 <smp_pairing_random+0xa0>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    c448:	210a      	movs	r1, #10
    c44a:	4630      	mov	r0, r6
    c44c:	9d07      	ldr	r5, [sp, #28]
    c44e:	f015 ff65 	bl	2231c <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    c452:	4a52      	ldr	r2, [pc, #328]	; (c59c <smp_pairing_random+0x278>)
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    c454:	4b52      	ldr	r3, [pc, #328]	; (c5a0 <smp_pairing_random+0x27c>)
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    c456:	6812      	ldr	r2, [r2, #0]
    c458:	6820      	ldr	r0, [r4, #0]
    c45a:	6892      	ldr	r2, [r2, #8]
    c45c:	ba2d      	rev	r5, r5
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    c45e:	fbb5 f1f3 	udiv	r1, r5, r3
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    c462:	fb03 5111 	mls	r1, r3, r1, r5
    c466:	4790      	blx	r2
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    c468:	210d      	movs	r1, #13
    c46a:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    c46e:	f015 ff55 	bl	2231c <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    c472:	2110      	movs	r1, #16
    c474:	e7b4      	b.n	c3e0 <smp_pairing_random+0xbc>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    c476:	f894 219c 	ldrb.w	r2, [r4, #412]	; 0x19c
    c47a:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    c47e:	4946      	ldr	r1, [pc, #280]	; (c598 <smp_pairing_random+0x274>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    c480:	40d3      	lsrs	r3, r2
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    c482:	ad08      	add	r5, sp, #32
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    c484:	f003 0301 	and.w	r3, r3, #1
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    c488:	9500      	str	r5, [sp, #0]
    c48a:	6809      	ldr	r1, [r1, #0]
    c48c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c490:	4642      	mov	r2, r8
    c492:	f204 1017 	addw	r0, r4, #279	; 0x117
    c496:	f015 fff7 	bl	22488 <smp_f4>
    c49a:	b140      	cbz	r0, c4ae <smp_pairing_random+0x18a>
    c49c:	493b      	ldr	r1, [pc, #236]	; (c58c <smp_pairing_random+0x268>)
    c49e:	4b3c      	ldr	r3, [pc, #240]	; (c590 <smp_pairing_random+0x26c>)
		BT_ERR("Calculate confirm failed");
    c4a0:	4840      	ldr	r0, [pc, #256]	; (c5a4 <smp_pairing_random+0x280>)
    c4a2:	1ac9      	subs	r1, r1, r3
    c4a4:	08c9      	lsrs	r1, r1, #3
    c4a6:	0189      	lsls	r1, r1, #6
    c4a8:	f041 0101 	orr.w	r1, r1, #1
    c4ac:	e788      	b.n	c3c0 <smp_pairing_random+0x9c>
	if (memcmp(smp->pcnf, cfm, 16)) {
    c4ae:	2210      	movs	r2, #16
    c4b0:	4629      	mov	r1, r5
    c4b2:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
    c4b6:	f017 fb94 	bl	23be2 <memcmp>
    c4ba:	b120      	cbz	r0, c4c6 <smp_pairing_random+0x1a2>
		return BT_SMP_ERR_CONFIRM_FAILED;
    c4bc:	2504      	movs	r5, #4
}
    c4be:	4628      	mov	r0, r5
    c4c0:	b01c      	add	sp, #112	; 0x70
    c4c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		atomic_set_bit(smp->allowed_cmds,
    c4c6:	f104 07c0 	add.w	r7, r4, #192	; 0xc0
    c4ca:	2103      	movs	r1, #3
    c4cc:	4638      	mov	r0, r7
    c4ce:	f015 ff25 	bl	2231c <atomic_set_bit>
		err = smp_send_pairing_random(smp);
    c4d2:	4620      	mov	r0, r4
    c4d4:	f016 f84d 	bl	22572 <smp_send_pairing_random>
		if (err) {
    c4d8:	4605      	mov	r5, r0
    c4da:	2800      	cmp	r0, #0
    c4dc:	d1ef      	bne.n	c4be <smp_pairing_random+0x19a>
		smp->passkey_round++;
    c4de:	f894 319c 	ldrb.w	r3, [r4, #412]	; 0x19c
    c4e2:	3301      	adds	r3, #1
    c4e4:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
    c4e6:	2b14      	cmp	r3, #20
		smp->passkey_round++;
    c4e8:	f884 319c 	strb.w	r3, [r4, #412]	; 0x19c
		if (smp->passkey_round == 20U) {
    c4ec:	d108      	bne.n	c500 <smp_pairing_random+0x1dc>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    c4ee:	4638      	mov	r0, r7
    c4f0:	210d      	movs	r1, #13
    c4f2:	f015 ff13 	bl	2231c <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    c4f6:	2110      	movs	r1, #16
    c4f8:	4630      	mov	r0, r6
    c4fa:	f015 ff0f 	bl	2231c <atomic_set_bit>
			return 0;
    c4fe:	e7de      	b.n	c4be <smp_pairing_random+0x19a>
		if (bt_rand(smp->prnd, 16)) {
    c500:	2110      	movs	r1, #16
    c502:	f104 00e7 	add.w	r0, r4, #231	; 0xe7
    c506:	f003 fcb7 	bl	fe78 <bt_rand>
    c50a:	2800      	cmp	r0, #0
    c50c:	d0d7      	beq.n	c4be <smp_pairing_random+0x19a>
    c50e:	e759      	b.n	c3c4 <smp_pairing_random+0xa0>
		if (bt_rand(smp->prnd, 16)) {
    c510:	2110      	movs	r1, #16
    c512:	f104 00e7 	add.w	r0, r4, #231	; 0xe7
    c516:	f003 fcaf 	bl	fe78 <bt_rand>
    c51a:	2800      	cmp	r0, #0
    c51c:	f47f af52 	bne.w	c3c4 <smp_pairing_random+0xa0>
		if (bt_auth && bt_auth->oob_data_request) {
    c520:	4f1e      	ldr	r7, [pc, #120]	; (c59c <smp_pairing_random+0x278>)
    c522:	683b      	ldr	r3, [r7, #0]
    c524:	b1eb      	cbz	r3, c562 <smp_pairing_random+0x23e>
    c526:	68db      	ldr	r3, [r3, #12]
    c528:	b1db      	cbz	r3, c562 <smp_pairing_random+0x23e>
			struct bt_conn_oob_info info = {
    c52a:	4b1f      	ldr	r3, [pc, #124]	; (c5a8 <smp_pairing_random+0x284>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    c52c:	f894 20cb 	ldrb.w	r2, [r4, #203]	; 0xcb
			struct bt_conn_oob_info info = {
    c530:	881b      	ldrh	r3, [r3, #0]
    c532:	f8ad 3020 	strh.w	r3, [sp, #32]
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    c536:	f894 30d2 	ldrb.w	r3, [r4, #210]	; 0xd2
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
    c53a:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    c53c:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
    c540:	d411      	bmi.n	c566 <smp_pairing_random+0x242>
				     BT_CONN_OOB_BOTH_PEERS :
    c542:	2b00      	cmp	r3, #0
    c544:	bf0c      	ite	eq
    c546:	2003      	moveq	r0, #3
    c548:	2001      	movne	r0, #1
    c54a:	e00f      	b.n	c56c <smp_pairing_random+0x248>
    c54c:	4b10      	ldr	r3, [pc, #64]	; (c590 <smp_pairing_random+0x26c>)
    c54e:	4a0f      	ldr	r2, [pc, #60]	; (c58c <smp_pairing_random+0x268>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    c550:	4816      	ldr	r0, [pc, #88]	; (c5ac <smp_pairing_random+0x288>)
    c552:	1ad2      	subs	r2, r2, r3
    c554:	08d2      	lsrs	r2, r2, #3
    c556:	0192      	lsls	r2, r2, #6
    c558:	f042 0201 	orr.w	r2, r2, #1
    c55c:	f012 fdc5 	bl	1f0ea <log_1>
    c560:	e730      	b.n	c3c4 <smp_pairing_random+0xa0>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
    c562:	2502      	movs	r5, #2
    c564:	e7ab      	b.n	c4be <smp_pairing_random+0x19a>
				     BT_CONN_OOB_BOTH_PEERS :
    c566:	2b00      	cmp	r3, #0
    c568:	bf18      	it	ne
    c56a:	2002      	movne	r0, #2
			smp->oobd_local = NULL;
    c56c:	2500      	movs	r5, #0
	info->lesc.oob_config = oob_config;
    c56e:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
			smp->oobd_remote = NULL;
    c572:	e9c4 5568 	strd	r5, r5, [r4, #416]	; 0x1a0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
    c576:	4630      	mov	r0, r6
    c578:	210c      	movs	r1, #12
    c57a:	f015 fecf 	bl	2231c <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
    c57e:	683b      	ldr	r3, [r7, #0]
    c580:	6820      	ldr	r0, [r4, #0]
    c582:	68db      	ldr	r3, [r3, #12]
    c584:	a908      	add	r1, sp, #32
    c586:	4798      	blx	r3
			return 0;
    c588:	e799      	b.n	c4be <smp_pairing_random+0x19a>
    c58a:	bf00      	nop
    c58c:	00023fe0 	.word	0x00023fe0
    c590:	00023ed8 	.word	0x00023ed8
    c594:	0002760b 	.word	0x0002760b
    c598:	200018e0 	.word	0x200018e0
    c59c:	2000184c 	.word	0x2000184c
    c5a0:	000f4240 	.word	0x000f4240
    c5a4:	00027620 	.word	0x00027620
    c5a8:	0002416b 	.word	0x0002416b
    c5ac:	00027506 	.word	0x00027506

0000c5b0 <bt_smp_start_security>:
{
    c5b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
    c5b4:	78c4      	ldrb	r4, [r0, #3]
    c5b6:	2c01      	cmp	r4, #1
{
    c5b8:	4605      	mov	r5, r0
	switch (conn->role) {
    c5ba:	d005      	beq.n	c5c8 <bt_smp_start_security+0x18>
		return -EINVAL;
    c5bc:	f06f 0415 	mvn.w	r4, #21
}
    c5c0:	4620      	mov	r0, r4
    c5c2:	b003      	add	sp, #12
    c5c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
    c5c8:	f7ff f8fc 	bl	b7c4 <smp_chan_get>
	if (!smp) {
    c5cc:	4606      	mov	r6, r0
    c5ce:	2800      	cmp	r0, #0
    c5d0:	f000 80a1 	beq.w	c716 <bt_smp_start_security+0x166>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    c5d4:	f100 07c4 	add.w	r7, r0, #196	; 0xc4
    c5d8:	2104      	movs	r1, #4
    c5da:	4638      	mov	r0, r7
    c5dc:	f015 ff7b 	bl	224d6 <atomic_test_bit>
    c5e0:	2800      	cmp	r0, #0
    c5e2:	f040 809b 	bne.w	c71c <bt_smp_start_security+0x16c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    c5e6:	2103      	movs	r1, #3
    c5e8:	4638      	mov	r0, r7
    c5ea:	f015 ff74 	bl	224d6 <atomic_test_bit>
    c5ee:	b110      	cbz	r0, c5f6 <bt_smp_start_security+0x46>
		return -EBUSY;
    c5f0:	f06f 040f 	mvn.w	r4, #15
    c5f4:	e7e4      	b.n	c5c0 <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    c5f6:	4621      	mov	r1, r4
    c5f8:	4638      	mov	r0, r7
    c5fa:	f015 ff6c 	bl	224d6 <atomic_test_bit>
    c5fe:	2800      	cmp	r0, #0
    c600:	d1f6      	bne.n	c5f0 <bt_smp_start_security+0x40>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
    c602:	7aab      	ldrb	r3, [r5, #10]
	switch (conn->required_sec_level) {
    c604:	2b03      	cmp	r3, #3
    c606:	d03d      	beq.n	c684 <bt_smp_start_security+0xd4>
    c608:	d82c      	bhi.n	c664 <bt_smp_start_security+0xb4>
    c60a:	3b01      	subs	r3, #1
    c60c:	2b01      	cmp	r3, #1
    c60e:	d947      	bls.n	c6a0 <bt_smp_start_security+0xf0>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
    c610:	210b      	movs	r1, #11
    c612:	1d28      	adds	r0, r5, #4
    c614:	f015 ff5f 	bl	224d6 <atomic_test_bit>
    c618:	2800      	cmp	r0, #0
    c61a:	d1cf      	bne.n	c5bc <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
    c61c:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    c620:	b983      	cbnz	r3, c644 <bt_smp_start_security+0x94>
						     conn->id, &conn->le.dst);
    c622:	f105 0488 	add.w	r4, r5, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
    c626:	7a29      	ldrb	r1, [r5, #8]
    c628:	4622      	mov	r2, r4
    c62a:	2020      	movs	r0, #32
    c62c:	f000 fcd6 	bl	cfdc <bt_keys_find>
    c630:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
    c634:	b930      	cbnz	r0, c644 <bt_smp_start_security+0x94>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
    c636:	7a29      	ldrb	r1, [r5, #8]
    c638:	4622      	mov	r2, r4
    c63a:	2004      	movs	r0, #4
    c63c:	f000 fcce 	bl	cfdc <bt_keys_find>
    c640:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
    c644:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    c648:	2b00      	cmp	r3, #0
    c64a:	d0b7      	beq.n	c5bc <bt_smp_start_security+0xc>
    c64c:	89da      	ldrh	r2, [r3, #14]
    c64e:	f002 0224 	and.w	r2, r2, #36	; 0x24
    c652:	2a00      	cmp	r2, #0
    c654:	d0b2      	beq.n	c5bc <bt_smp_start_security+0xc>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
    c656:	7aaa      	ldrb	r2, [r5, #10]
    c658:	2a02      	cmp	r2, #2
    c65a:	d921      	bls.n	c6a0 <bt_smp_start_security+0xf0>
    c65c:	7b5b      	ldrb	r3, [r3, #13]
    c65e:	07db      	lsls	r3, r3, #31
    c660:	d5ac      	bpl.n	c5bc <bt_smp_start_security+0xc>
    c662:	e01d      	b.n	c6a0 <bt_smp_start_security+0xf0>
	switch (conn->required_sec_level) {
    c664:	2b04      	cmp	r3, #4
    c666:	d1d3      	bne.n	c610 <bt_smp_start_security+0x60>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    c668:	f7ff f842 	bl	b6f0 <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    c66c:	2803      	cmp	r0, #3
    c66e:	d104      	bne.n	c67a <bt_smp_start_security+0xca>
    c670:	4b2c      	ldr	r3, [pc, #176]	; (c724 <bt_smp_start_security+0x174>)
    c672:	681b      	ldr	r3, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    c674:	b1fb      	cbz	r3, c6b6 <bt_smp_start_security+0x106>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    c676:	68dc      	ldr	r4, [r3, #12]
    c678:	b10c      	cbz	r4, c67e <bt_smp_start_security+0xce>
    c67a:	4b2b      	ldr	r3, [pc, #172]	; (c728 <bt_smp_start_security+0x178>)
    c67c:	781c      	ldrb	r4, [r3, #0]
    c67e:	f004 0401 	and.w	r4, r4, #1
    c682:	e00b      	b.n	c69c <bt_smp_start_security+0xec>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    c684:	f7ff f834 	bl	b6f0 <get_io_capa>
    c688:	2803      	cmp	r0, #3
    c68a:	d107      	bne.n	c69c <bt_smp_start_security+0xec>
		       (bt_auth && bt_auth->oob_data_request);
    c68c:	4b25      	ldr	r3, [pc, #148]	; (c724 <bt_smp_start_security+0x174>)
    c68e:	681c      	ldr	r4, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    c690:	2c00      	cmp	r4, #0
    c692:	d0bd      	beq.n	c610 <bt_smp_start_security+0x60>
		       (bt_auth && bt_auth->oob_data_request);
    c694:	68e4      	ldr	r4, [r4, #12]
    c696:	3c00      	subs	r4, #0
    c698:	bf18      	it	ne
    c69a:	2401      	movne	r4, #1
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
    c69c:	2c00      	cmp	r4, #0
    c69e:	d0b7      	beq.n	c610 <bt_smp_start_security+0x60>
	if (!conn->le.keys) {
    c6a0:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    c6a4:	b14b      	cbz	r3, c6ba <bt_smp_start_security+0x10a>
	if (smp_init(smp) != 0) {
    c6a6:	4630      	mov	r0, r6
    c6a8:	f7ff f8c6 	bl	b838 <smp_init>
    c6ac:	4604      	mov	r4, r0
    c6ae:	b180      	cbz	r0, c6d2 <bt_smp_start_security+0x122>
		return -ENOBUFS;
    c6b0:	f06f 0468 	mvn.w	r4, #104	; 0x68
    c6b4:	e784      	b.n	c5c0 <bt_smp_start_security+0x10>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    c6b6:	2400      	movs	r4, #0
    c6b8:	e7e1      	b.n	c67e <bt_smp_start_security+0xce>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    c6ba:	7a28      	ldrb	r0, [r5, #8]
    c6bc:	f105 0188 	add.w	r1, r5, #136	; 0x88
    c6c0:	f000 fc56 	bl	cf70 <bt_keys_get_addr>
    c6c4:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
    c6c8:	2800      	cmp	r0, #0
    c6ca:	d1ec      	bne.n	c6a6 <bt_smp_start_security+0xf6>
			return -ENOMEM;
    c6cc:	f06f 040b 	mvn.w	r4, #11
    c6d0:	e776      	b.n	c5c0 <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
    c6d2:	210b      	movs	r1, #11
    c6d4:	4630      	mov	r0, r6
    c6d6:	f015 ff2c 	bl	22532 <smp_create_pdu.isra.0>
	if (!req_buf) {
    c6da:	4680      	mov	r8, r0
    c6dc:	2800      	cmp	r0, #0
    c6de:	d0e7      	beq.n	c6b0 <bt_smp_start_security+0x100>
    c6e0:	2101      	movs	r1, #1
    c6e2:	3008      	adds	r0, #8
    c6e4:	f016 fa6f 	bl	22bc6 <net_buf_simple_add>
    c6e8:	4681      	mov	r9, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
    c6ea:	2009      	movs	r0, #9
    c6ec:	f7ff f84c 	bl	b788 <get_auth.isra.0>
    c6f0:	4623      	mov	r3, r4
    c6f2:	f889 0000 	strb.w	r0, [r9]
    c6f6:	4642      	mov	r2, r8
    c6f8:	9400      	str	r4, [sp, #0]
    c6fa:	2106      	movs	r1, #6
    c6fc:	4628      	mov	r0, r5
    c6fe:	f014 ffd2 	bl	216a6 <bt_l2cap_send_cb>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    c702:	4638      	mov	r0, r7
    c704:	210f      	movs	r1, #15
    c706:	f015 fe09 	bl	2231c <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
    c70a:	2101      	movs	r1, #1
    c70c:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
    c710:	f015 fe04 	bl	2231c <atomic_set_bit>
	return 0;
    c714:	e754      	b.n	c5c0 <bt_smp_start_security+0x10>
		return -ENOTCONN;
    c716:	f06f 047f 	mvn.w	r4, #127	; 0x7f
    c71a:	e751      	b.n	c5c0 <bt_smp_start_security+0x10>
		return -EIO;
    c71c:	f06f 0404 	mvn.w	r4, #4
    c720:	e74e      	b.n	c5c0 <bt_smp_start_security+0x10>
    c722:	bf00      	nop
    c724:	2000184c 	.word	0x2000184c
    c728:	200035d2 	.word	0x200035d2

0000c72c <smp_pairing_complete>:
{
    c72c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    c730:	4606      	mov	r6, r0
    c732:	f8df 80ac 	ldr.w	r8, [pc, #172]	; c7e0 <smp_pairing_complete+0xb4>
    c736:	f856 4bc4 	ldr.w	r4, [r6], #196
{
    c73a:	4607      	mov	r7, r0
	if (!status) {
    c73c:	b9b9      	cbnz	r1, c76e <smp_pairing_complete+0x42>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
    c73e:	210d      	movs	r1, #13
    c740:	4630      	mov	r0, r6
    c742:	f015 fec8 	bl	224d6 <atomic_test_bit>
		if (bt_auth && bt_auth->pairing_complete) {
    c746:	f8d8 3000 	ldr.w	r3, [r8]
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
    c74a:	4601      	mov	r1, r0
		if (bt_auth && bt_auth->pairing_complete) {
    c74c:	b11b      	cbz	r3, c756 <smp_pairing_complete+0x2a>
    c74e:	699b      	ldr	r3, [r3, #24]
    c750:	b10b      	cbz	r3, c756 <smp_pairing_complete+0x2a>
			bt_auth->pairing_failed(conn, security_err);
    c752:	4620      	mov	r0, r4
    c754:	4798      	blx	r3
	smp_reset(smp);
    c756:	4638      	mov	r0, r7
    c758:	f015 ff89 	bl	2266e <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
    c75c:	7a62      	ldrb	r2, [r4, #9]
    c75e:	7aa3      	ldrb	r3, [r4, #10]
    c760:	429a      	cmp	r2, r3
    c762:	d036      	beq.n	c7d2 <smp_pairing_complete+0xa6>
		bt_smp_start_security(conn);
    c764:	4620      	mov	r0, r4
}
    c766:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_smp_start_security(conn);
    c76a:	f7ff bf21 	b.w	c5b0 <bt_smp_start_security>
	switch (smp_err) {
    c76e:	3901      	subs	r1, #1
    c770:	b2c9      	uxtb	r1, r1
    c772:	290d      	cmp	r1, #13
    c774:	bf9c      	itt	ls
    c776:	4b18      	ldrls	r3, [pc, #96]	; (c7d8 <smp_pairing_complete+0xac>)
    c778:	5c5d      	ldrbls	r5, [r3, r1]
		if (conn->le.keys &&
    c77a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
	if (!status) {
    c77e:	bf88      	it	hi
    c780:	2508      	movhi	r5, #8
		if (conn->le.keys &&
    c782:	b143      	cbz	r3, c796 <smp_pairing_complete+0x6a>
    c784:	7b1b      	ldrb	r3, [r3, #12]
    c786:	b9eb      	cbnz	r3, c7c4 <smp_pairing_complete+0x98>
			bt_keys_clear(conn->le.keys);
    c788:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    c78c:	f016 f9b6 	bl	22afc <bt_keys_clear>
			conn->le.keys = NULL;
    c790:	2300      	movs	r3, #0
    c792:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
    c796:	2102      	movs	r1, #2
    c798:	4630      	mov	r0, r6
    c79a:	f015 fe9c 	bl	224d6 <atomic_test_bit>
    c79e:	b940      	cbnz	r0, c7b2 <smp_pairing_complete+0x86>
	switch (err) {
    c7a0:	2d08      	cmp	r5, #8
    c7a2:	bf16      	itet	ne
    c7a4:	4b0d      	ldrne	r3, [pc, #52]	; (c7dc <smp_pairing_complete+0xb0>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
    c7a6:	211f      	moveq	r1, #31
    c7a8:	5d59      	ldrbne	r1, [r3, r5]
			bt_conn_security_changed(conn,
    c7aa:	462a      	mov	r2, r5
    c7ac:	4620      	mov	r0, r4
    c7ae:	f7fc fb87 	bl	8ec0 <bt_conn_security_changed>
		if (bt_auth && bt_auth->pairing_failed) {
    c7b2:	f8d8 3000 	ldr.w	r3, [r8]
    c7b6:	2b00      	cmp	r3, #0
    c7b8:	d0cd      	beq.n	c756 <smp_pairing_complete+0x2a>
    c7ba:	69db      	ldr	r3, [r3, #28]
    c7bc:	2b00      	cmp	r3, #0
    c7be:	d0ca      	beq.n	c756 <smp_pairing_complete+0x2a>
			bt_auth->pairing_failed(conn, security_err);
    c7c0:	4629      	mov	r1, r5
    c7c2:	e7c6      	b.n	c752 <smp_pairing_complete+0x26>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
    c7c4:	2102      	movs	r1, #2
    c7c6:	4630      	mov	r0, r6
    c7c8:	f015 fe85 	bl	224d6 <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
    c7cc:	2800      	cmp	r0, #0
    c7ce:	d1db      	bne.n	c788 <smp_pairing_complete+0x5c>
    c7d0:	e7e1      	b.n	c796 <smp_pairing_complete+0x6a>
}
    c7d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c7d6:	bf00      	nop
    c7d8:	000277a6 	.word	0x000277a6
    c7dc:	000277bc 	.word	0x000277bc
    c7e0:	2000184c 	.word	0x2000184c

0000c7e4 <bt_smp_recv>:
{
    c7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    c7e6:	898b      	ldrh	r3, [r1, #12]
{
    c7e8:	4604      	mov	r4, r0
    c7ea:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    c7ec:	b95b      	cbnz	r3, c806 <bt_smp_recv+0x22>
    c7ee:	493a      	ldr	r1, [pc, #232]	; (c8d8 <bt_smp_recv+0xf4>)
    c7f0:	4b3a      	ldr	r3, [pc, #232]	; (c8dc <bt_smp_recv+0xf8>)
		BT_ERR("Too small SMP PDU received");
    c7f2:	483b      	ldr	r0, [pc, #236]	; (c8e0 <bt_smp_recv+0xfc>)
    c7f4:	1ac9      	subs	r1, r1, r3
    c7f6:	08c9      	lsrs	r1, r1, #3
    c7f8:	0189      	lsls	r1, r1, #6
    c7fa:	f041 0101 	orr.w	r1, r1, #1
    c7fe:	f012 fc67 	bl	1f0d0 <log_0>
}
    c802:	2000      	movs	r0, #0
    c804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
    c806:	2101      	movs	r1, #1
    c808:	f105 0008 	add.w	r0, r5, #8
    c80c:	f016 fa03 	bl	22c16 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    c810:	2104      	movs	r1, #4
    c812:	4606      	mov	r6, r0
    c814:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    c818:	f015 fe5d 	bl	224d6 <atomic_test_bit>
    c81c:	7831      	ldrb	r1, [r6, #0]
    c81e:	b150      	cbz	r0, c836 <bt_smp_recv+0x52>
    c820:	4a2d      	ldr	r2, [pc, #180]	; (c8d8 <bt_smp_recv+0xf4>)
    c822:	4b2e      	ldr	r3, [pc, #184]	; (c8dc <bt_smp_recv+0xf8>)
		BT_WARN("SMP command (code 0x%02x) received after timeout",
    c824:	482f      	ldr	r0, [pc, #188]	; (c8e4 <bt_smp_recv+0x100>)
    c826:	1ad2      	subs	r2, r2, r3
    c828:	08d2      	lsrs	r2, r2, #3
    c82a:	0192      	lsls	r2, r2, #6
    c82c:	f042 0202 	orr.w	r2, r2, #2
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
    c830:	f012 fc5b 	bl	1f0ea <log_1>
		return 0;
    c834:	e7e5      	b.n	c802 <bt_smp_recv+0x1e>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
    c836:	290e      	cmp	r1, #14
    c838:	d908      	bls.n	c84c <bt_smp_recv+0x68>
    c83a:	4a27      	ldr	r2, [pc, #156]	; (c8d8 <bt_smp_recv+0xf4>)
    c83c:	4b27      	ldr	r3, [pc, #156]	; (c8dc <bt_smp_recv+0xf8>)
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
    c83e:	482a      	ldr	r0, [pc, #168]	; (c8e8 <bt_smp_recv+0x104>)
    c840:	1ad2      	subs	r2, r2, r3
    c842:	08d2      	lsrs	r2, r2, #3
    c844:	0192      	lsls	r2, r2, #6
    c846:	f042 0202 	orr.w	r2, r2, #2
    c84a:	e7f1      	b.n	c830 <bt_smp_recv+0x4c>
	if (!handlers[hdr->code].func) {
    c84c:	4f27      	ldr	r7, [pc, #156]	; (c8ec <bt_smp_recv+0x108>)
    c84e:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
    c852:	b973      	cbnz	r3, c872 <bt_smp_recv+0x8e>
    c854:	4b21      	ldr	r3, [pc, #132]	; (c8dc <bt_smp_recv+0xf8>)
    c856:	4a20      	ldr	r2, [pc, #128]	; (c8d8 <bt_smp_recv+0xf4>)
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
    c858:	4825      	ldr	r0, [pc, #148]	; (c8f0 <bt_smp_recv+0x10c>)
    c85a:	1ad2      	subs	r2, r2, r3
    c85c:	08d2      	lsrs	r2, r2, #3
    c85e:	0192      	lsls	r2, r2, #6
    c860:	f042 0202 	orr.w	r2, r2, #2
    c864:	f012 fc41 	bl	1f0ea <log_1>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
    c868:	2107      	movs	r1, #7
		smp_error(smp, err);
    c86a:	4620      	mov	r0, r4
    c86c:	f016 f867 	bl	2293e <smp_error>
    c870:	e7c7      	b.n	c802 <bt_smp_recv+0x1e>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
    c872:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    c876:	f015 fee2 	bl	2263e <atomic_test_and_clear_bit>
    c87a:	7831      	ldrb	r1, [r6, #0]
    c87c:	b970      	cbnz	r0, c89c <bt_smp_recv+0xb8>
    c87e:	4b17      	ldr	r3, [pc, #92]	; (c8dc <bt_smp_recv+0xf8>)
    c880:	4a15      	ldr	r2, [pc, #84]	; (c8d8 <bt_smp_recv+0xf4>)
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
    c882:	481c      	ldr	r0, [pc, #112]	; (c8f4 <bt_smp_recv+0x110>)
    c884:	1ad2      	subs	r2, r2, r3
    c886:	08d2      	lsrs	r2, r2, #3
    c888:	0192      	lsls	r2, r2, #6
    c88a:	f042 0202 	orr.w	r2, r2, #2
    c88e:	f012 fc2c 	bl	1f0ea <log_1>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
    c892:	7833      	ldrb	r3, [r6, #0]
    c894:	2b05      	cmp	r3, #5
    c896:	d0b4      	beq.n	c802 <bt_smp_recv+0x1e>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    c898:	2108      	movs	r1, #8
    c89a:	e7e6      	b.n	c86a <bt_smp_recv+0x86>
	if (buf->len != handlers[hdr->code].expect_len) {
    c89c:	eb07 03c1 	add.w	r3, r7, r1, lsl #3
    c8a0:	89a8      	ldrh	r0, [r5, #12]
    c8a2:	791b      	ldrb	r3, [r3, #4]
    c8a4:	4283      	cmp	r3, r0
    c8a6:	d00d      	beq.n	c8c4 <bt_smp_recv+0xe0>
    c8a8:	4a0c      	ldr	r2, [pc, #48]	; (c8dc <bt_smp_recv+0xf8>)
    c8aa:	4b0b      	ldr	r3, [pc, #44]	; (c8d8 <bt_smp_recv+0xf4>)
    c8ac:	1a9b      	subs	r3, r3, r2
    c8ae:	08db      	lsrs	r3, r3, #3
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    c8b0:	019b      	lsls	r3, r3, #6
    c8b2:	460a      	mov	r2, r1
    c8b4:	f043 0301 	orr.w	r3, r3, #1
    c8b8:	4601      	mov	r1, r0
    c8ba:	480f      	ldr	r0, [pc, #60]	; (c8f8 <bt_smp_recv+0x114>)
    c8bc:	f012 fc29 	bl	1f112 <log_2>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
    c8c0:	210a      	movs	r1, #10
    c8c2:	e7d2      	b.n	c86a <bt_smp_recv+0x86>
	err = handlers[hdr->code].func(smp, buf);
    c8c4:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
    c8c8:	4620      	mov	r0, r4
    c8ca:	4629      	mov	r1, r5
    c8cc:	4798      	blx	r3
	if (err) {
    c8ce:	4601      	mov	r1, r0
    c8d0:	2800      	cmp	r0, #0
    c8d2:	d096      	beq.n	c802 <bt_smp_recv+0x1e>
    c8d4:	e7c9      	b.n	c86a <bt_smp_recv+0x86>
    c8d6:	bf00      	nop
    c8d8:	00023fe0 	.word	0x00023fe0
    c8dc:	00023ed8 	.word	0x00023ed8
    c8e0:	00027639 	.word	0x00027639
    c8e4:	00027654 	.word	0x00027654
    c8e8:	00027685 	.word	0x00027685
    c8ec:	0002482c 	.word	0x0002482c
    c8f0:	000276a7 	.word	0x000276a7
    c8f4:	000276c1 	.word	0x000276c1
    c8f8:	00027308 	.word	0x00027308

0000c8fc <bt_smp_pkey_ready>:
	sc_public_key = pkey;
    c8fc:	4b13      	ldr	r3, [pc, #76]	; (c94c <bt_smp_pkey_ready+0x50>)
{
    c8fe:	b510      	push	{r4, lr}
	sc_public_key = pkey;
    c900:	6018      	str	r0, [r3, #0]
	if (!pkey) {
    c902:	b958      	cbnz	r0, c91c <bt_smp_pkey_ready+0x20>
    c904:	4912      	ldr	r1, [pc, #72]	; (c950 <bt_smp_pkey_ready+0x54>)
    c906:	4b13      	ldr	r3, [pc, #76]	; (c954 <bt_smp_pkey_ready+0x58>)
		BT_WARN("Public key not available");
    c908:	4813      	ldr	r0, [pc, #76]	; (c958 <bt_smp_pkey_ready+0x5c>)
    c90a:	1ac9      	subs	r1, r1, r3
    c90c:	08c9      	lsrs	r1, r1, #3
    c90e:	0189      	lsls	r1, r1, #6
}
    c910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Public key not available");
    c914:	f041 0102 	orr.w	r1, r1, #2
    c918:	f012 bbda 	b.w	1f0d0 <log_0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c91c:	4c0f      	ldr	r4, [pc, #60]	; (c95c <bt_smp_pkey_ready+0x60>)
	z_impl_k_sem_give(sem);
    c91e:	4810      	ldr	r0, [pc, #64]	; (c960 <bt_smp_pkey_ready+0x64>)
    c920:	f011 f944 	bl	1dbac <z_impl_k_sem_give>
    c924:	f3bf 8f5b 	dmb	ish
    c928:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
    c92c:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    c930:	065b      	lsls	r3, r3, #25
    c932:	d509      	bpl.n	c948 <bt_smp_pkey_ready+0x4c>
		err = smp_public_key_slave(smp);
    c934:	4620      	mov	r0, r4
    c936:	f7ff f947 	bl	bbc8 <smp_public_key_slave>
		if (err) {
    c93a:	4601      	mov	r1, r0
    c93c:	b120      	cbz	r0, c948 <bt_smp_pkey_ready+0x4c>
			smp_error(smp, err);
    c93e:	4620      	mov	r0, r4
}
    c940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
    c944:	f015 bffb 	b.w	2293e <smp_error>
}
    c948:	bd10      	pop	{r4, pc}
    c94a:	bf00      	nop
    c94c:	200018e0 	.word	0x200018e0
    c950:	00023fe0 	.word	0x00023fe0
    c954:	00023ed8 	.word	0x00023ed8
    c958:	000276dc 	.word	0x000276dc
    c95c:	20000fc0 	.word	0x20000fc0
    c960:	20000930 	.word	0x20000930

0000c964 <smp_ident_addr_info>:
{
    c964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
    c968:	688d      	ldr	r5, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
    c96a:	6807      	ldr	r7, [r0, #0]
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    c96c:	782b      	ldrb	r3, [r5, #0]
{
    c96e:	4604      	mov	r4, r0
    c970:	f107 0688 	add.w	r6, r7, #136	; 0x88
    c974:	b313      	cbz	r3, c9bc <smp_ident_addr_info+0x58>
	if (!bt_addr_le_is_identity(&req->addr)) {
    c976:	79ab      	ldrb	r3, [r5, #6]
    c978:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    c97c:	2bc0      	cmp	r3, #192	; 0xc0
    c97e:	d01d      	beq.n	c9bc <smp_ident_addr_info+0x58>
    c980:	4b4b      	ldr	r3, [pc, #300]	; (cab0 <smp_ident_addr_info+0x14c>)
    c982:	4c4c      	ldr	r4, [pc, #304]	; (cab4 <smp_ident_addr_info+0x150>)
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
    c984:	4628      	mov	r0, r5
    c986:	1ae4      	subs	r4, r4, r3
    c988:	f7f9 fc8c 	bl	62a4 <bt_addr_le_str_real>
    c98c:	f7f7 f924 	bl	3bd8 <log_strdup>
    c990:	08e4      	lsrs	r4, r4, #3
    c992:	01a4      	lsls	r4, r4, #6
    c994:	f044 0401 	orr.w	r4, r4, #1
    c998:	4601      	mov	r1, r0
    c99a:	4622      	mov	r2, r4
    c99c:	4846      	ldr	r0, [pc, #280]	; (cab8 <smp_ident_addr_info+0x154>)
    c99e:	f012 fba4 	bl	1f0ea <log_1>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
    c9a2:	4630      	mov	r0, r6
    c9a4:	f7f9 fc7e 	bl	62a4 <bt_addr_le_str_real>
    c9a8:	f7f7 f916 	bl	3bd8 <log_strdup>
    c9ac:	4622      	mov	r2, r4
    c9ae:	4601      	mov	r1, r0
    c9b0:	4842      	ldr	r0, [pc, #264]	; (cabc <smp_ident_addr_info+0x158>)
    c9b2:	f012 fb9a 	bl	1f0ea <log_1>
		return BT_SMP_ERR_INVALID_PARAMS;
    c9b6:	200a      	movs	r0, #10
}
    c9b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return memcmp(a, b, sizeof(*a));
    c9bc:	2207      	movs	r2, #7
    c9be:	4629      	mov	r1, r5
    c9c0:	4630      	mov	r0, r6
    c9c2:	f017 f90e 	bl	23be2 <memcmp>
	if (bt_addr_le_cmp(&conn->le.dst, &req->addr) != 0) {
    c9c6:	b168      	cbz	r0, c9e4 <smp_ident_addr_info+0x80>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
    c9c8:	7a38      	ldrb	r0, [r7, #8]
    c9ca:	4629      	mov	r1, r5
    c9cc:	f000 fb56 	bl	d07c <bt_keys_find_addr>
		if (keys) {
    c9d0:	4680      	mov	r8, r0
    c9d2:	b138      	cbz	r0, c9e4 <smp_ident_addr_info+0x80>
			if (!update_keys_check(smp, keys)) {
    c9d4:	4601      	mov	r1, r0
    c9d6:	4620      	mov	r0, r4
    c9d8:	f015 fd86 	bl	224e8 <update_keys_check>
    c9dc:	b308      	cbz	r0, ca22 <smp_ident_addr_info+0xbe>
			bt_keys_clear(keys);
    c9de:	4640      	mov	r0, r8
    c9e0:	f016 f88c 	bl	22afc <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    c9e4:	210d      	movs	r1, #13
    c9e6:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    c9ea:	f015 fd74 	bl	224d6 <atomic_test_bit>
    c9ee:	2800      	cmp	r0, #0
    c9f0:	d044      	beq.n	ca7c <smp_ident_addr_info+0x118>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
    c9f2:	7a39      	ldrb	r1, [r7, #8]
    c9f4:	4632      	mov	r2, r6
    c9f6:	2002      	movs	r0, #2
    c9f8:	f016 f86c 	bl	22ad4 <bt_keys_get_type>
		if (!keys) {
    c9fc:	4680      	mov	r8, r0
    c9fe:	b990      	cbnz	r0, ca26 <smp_ident_addr_info+0xc2>
    ca00:	4a2b      	ldr	r2, [pc, #172]	; (cab0 <smp_ident_addr_info+0x14c>)
    ca02:	4c2c      	ldr	r4, [pc, #176]	; (cab4 <smp_ident_addr_info+0x150>)
			BT_ERR("Unable to get keys for %s",
    ca04:	4630      	mov	r0, r6
    ca06:	1aa4      	subs	r4, r4, r2
    ca08:	f7f9 fc4c 	bl	62a4 <bt_addr_le_str_real>
    ca0c:	f7f7 f8e4 	bl	3bd8 <log_strdup>
    ca10:	08e4      	lsrs	r4, r4, #3
    ca12:	01a4      	lsls	r4, r4, #6
    ca14:	f044 0401 	orr.w	r4, r4, #1
    ca18:	4601      	mov	r1, r0
    ca1a:	4622      	mov	r2, r4
    ca1c:	4828      	ldr	r0, [pc, #160]	; (cac0 <smp_ident_addr_info+0x15c>)
    ca1e:	f012 fb64 	bl	1f0ea <log_1>
				return BT_SMP_ERR_UNSPECIFIED;
    ca22:	2008      	movs	r0, #8
    ca24:	e7c8      	b.n	c9b8 <smp_ident_addr_info+0x54>
		if (conn->role == BT_HCI_ROLE_MASTER) {
    ca26:	78fb      	ldrb	r3, [r7, #3]
    ca28:	2b00      	cmp	r3, #0
    ca2a:	d13d      	bne.n	caa8 <smp_ident_addr_info+0x144>
			dst = &conn->le.resp_addr;
    ca2c:	f107 0396 	add.w	r3, r7, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
    ca30:	781a      	ldrb	r2, [r3, #0]
    ca32:	2a01      	cmp	r2, #1
    ca34:	d11f      	bne.n	ca76 <smp_ident_addr_info+0x112>
		if (bt_addr_le_is_rpa(dst)) {
    ca36:	799a      	ldrb	r2, [r3, #6]
    ca38:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    ca3c:	2a40      	cmp	r2, #64	; 0x40
    ca3e:	d11a      	bne.n	ca76 <smp_ident_addr_info+0x112>
    ca40:	f853 2f01 	ldr.w	r2, [r3, #1]!
    ca44:	f8c8 203a 	str.w	r2, [r8, #58]	; 0x3a
    ca48:	889b      	ldrh	r3, [r3, #4]
    ca4a:	f8a8 303e 	strh.w	r3, [r8, #62]	; 0x3e
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    ca4e:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
    ca52:	b183      	cbz	r3, ca76 <smp_ident_addr_info+0x112>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
    ca54:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
    ca58:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    ca5c:	2bc0      	cmp	r3, #192	; 0xc0
    ca5e:	d00a      	beq.n	ca76 <smp_ident_addr_info+0x112>
				bt_addr_le_copy(&keys->addr, &req->addr);
    ca60:	4629      	mov	r1, r5
    ca62:	f108 0001 	add.w	r0, r8, #1
    ca66:	f015 fc8e 	bl	22386 <bt_addr_le_copy>
				bt_addr_le_copy(&conn->le.dst, &req->addr);
    ca6a:	4630      	mov	r0, r6
    ca6c:	f015 fc8b 	bl	22386 <bt_addr_le_copy>
				bt_conn_identity_resolved(conn);
    ca70:	4638      	mov	r0, r7
    ca72:	f7fc fa0b 	bl	8e8c <bt_conn_identity_resolved>
		bt_id_add(keys);
    ca76:	4640      	mov	r0, r8
    ca78:	f7fb f9d8 	bl	7e2c <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    ca7c:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
    ca80:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    ca84:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    ca86:	f884 21a9 	strb.w	r2, [r4, #425]	; 0x1a9
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    ca8a:	d504      	bpl.n	ca96 <smp_ident_addr_info+0x132>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    ca8c:	210a      	movs	r1, #10
    ca8e:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    ca92:	f015 fc43 	bl	2231c <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
    ca96:	f8b4 51a8 	ldrh.w	r5, [r4, #424]	; 0x1a8
    ca9a:	b91d      	cbnz	r5, caa4 <smp_ident_addr_info+0x140>
		smp_pairing_complete(smp, 0);
    ca9c:	4629      	mov	r1, r5
    ca9e:	4620      	mov	r0, r4
    caa0:	f7ff fe44 	bl	c72c <smp_pairing_complete>
	return 0;
    caa4:	2000      	movs	r0, #0
    caa6:	e787      	b.n	c9b8 <smp_ident_addr_info+0x54>
			dst = &conn->le.init_addr;
    caa8:	f107 038f 	add.w	r3, r7, #143	; 0x8f
    caac:	e7c0      	b.n	ca30 <smp_ident_addr_info+0xcc>
    caae:	bf00      	nop
    cab0:	00023ed8 	.word	0x00023ed8
    cab4:	00023fe0 	.word	0x00023fe0
    cab8:	000276f5 	.word	0x000276f5
    cabc:	00027722 	.word	0x00027722
    cac0:	000275f1 	.word	0x000275f1

0000cac4 <smp_master_ident>:
{
    cac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cac6:	4604      	mov	r4, r0
    cac8:	460b      	mov	r3, r1
	struct bt_conn *conn = smp->chan.chan.conn;
    caca:	f850 7bc4 	ldr.w	r7, [r0], #196
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    cace:	210d      	movs	r1, #13
    cad0:	f015 fd01 	bl	224d6 <atomic_test_bit>
    cad4:	b348      	cbz	r0, cb2a <smp_master_ident+0x66>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    cad6:	f107 0688 	add.w	r6, r7, #136	; 0x88
    cada:	7a39      	ldrb	r1, [r7, #8]
		struct bt_smp_master_ident *req = (void *)buf->data;
    cadc:	689d      	ldr	r5, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    cade:	4632      	mov	r2, r6
    cae0:	2004      	movs	r0, #4
    cae2:	f015 fff7 	bl	22ad4 <bt_keys_get_type>
		if (!keys) {
    cae6:	b990      	cbnz	r0, cb0e <smp_master_ident+0x4a>
    cae8:	4a1b      	ldr	r2, [pc, #108]	; (cb58 <smp_master_ident+0x94>)
    caea:	4c1c      	ldr	r4, [pc, #112]	; (cb5c <smp_master_ident+0x98>)
			BT_ERR("Unable to get keys for %s",
    caec:	4630      	mov	r0, r6
    caee:	1aa4      	subs	r4, r4, r2
    caf0:	f7f9 fbd8 	bl	62a4 <bt_addr_le_str_real>
    caf4:	f7f7 f870 	bl	3bd8 <log_strdup>
    caf8:	08e4      	lsrs	r4, r4, #3
    cafa:	01a4      	lsls	r4, r4, #6
    cafc:	f044 0401 	orr.w	r4, r4, #1
    cb00:	4601      	mov	r1, r0
    cb02:	4622      	mov	r2, r4
    cb04:	4816      	ldr	r0, [pc, #88]	; (cb60 <smp_master_ident+0x9c>)
    cb06:	f012 faf0 	bl	1f0ea <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    cb0a:	2008      	movs	r0, #8
}
    cb0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cb0e:	882b      	ldrh	r3, [r5, #0]
    cb10:	8303      	strh	r3, [r0, #24]
    cb12:	462b      	mov	r3, r5
    cb14:	f853 2f02 	ldr.w	r2, [r3, #2]!
    cb18:	6102      	str	r2, [r0, #16]
    cb1a:	685a      	ldr	r2, [r3, #4]
    cb1c:	6142      	str	r2, [r0, #20]
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
    cb1e:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
    cb22:	f023 0301 	bic.w	r3, r3, #1
    cb26:	f884 31a9 	strb.w	r3, [r4, #425]	; 0x1a9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    cb2a:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
    cb2e:	079a      	lsls	r2, r3, #30
    cb30:	d50d      	bpl.n	cb4e <smp_master_ident+0x8a>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    cb32:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    cb34:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    cb38:	f015 fbf0 	bl	2231c <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
    cb3c:	f8b4 51a8 	ldrh.w	r5, [r4, #424]	; 0x1a8
    cb40:	b91d      	cbnz	r5, cb4a <smp_master_ident+0x86>
		smp_pairing_complete(smp, 0);
    cb42:	4629      	mov	r1, r5
    cb44:	4620      	mov	r0, r4
    cb46:	f7ff fdf1 	bl	c72c <smp_pairing_complete>
	return 0;
    cb4a:	2000      	movs	r0, #0
    cb4c:	e7de      	b.n	cb0c <smp_master_ident+0x48>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    cb4e:	075b      	lsls	r3, r3, #29
    cb50:	d5f4      	bpl.n	cb3c <smp_master_ident+0x78>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    cb52:	210a      	movs	r1, #10
    cb54:	e7ee      	b.n	cb34 <smp_master_ident+0x70>
    cb56:	bf00      	nop
    cb58:	00023ed8 	.word	0x00023ed8
    cb5c:	00023fe0 	.word	0x00023fe0
    cb60:	000275f1 	.word	0x000275f1

0000cb64 <smp_pairing_failed>:
{
    cb64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cb66:	4a15      	ldr	r2, [pc, #84]	; (cbbc <smp_pairing_failed+0x58>)
    cb68:	4b15      	ldr	r3, [pc, #84]	; (cbc0 <smp_pairing_failed+0x5c>)
	struct bt_smp_pairing_fail *req = (void *)buf->data;
    cb6a:	688e      	ldr	r6, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
    cb6c:	4605      	mov	r5, r0
    cb6e:	1ad2      	subs	r2, r2, r3
    cb70:	08d2      	lsrs	r2, r2, #3
    cb72:	f855 7bc4 	ldr.w	r7, [r5], #196
	BT_ERR("reason 0x%x", req->reason);
    cb76:	7831      	ldrb	r1, [r6, #0]
    cb78:	0192      	lsls	r2, r2, #6
{
    cb7a:	4604      	mov	r4, r0
	BT_ERR("reason 0x%x", req->reason);
    cb7c:	f042 0201 	orr.w	r2, r2, #1
    cb80:	4810      	ldr	r0, [pc, #64]	; (cbc4 <smp_pairing_failed+0x60>)
    cb82:	f012 fab2 	bl	1f0ea <log_1>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    cb86:	210a      	movs	r1, #10
    cb88:	4628      	mov	r0, r5
    cb8a:	f015 fd58 	bl	2263e <atomic_test_and_clear_bit>
    cb8e:	b140      	cbz	r0, cba2 <smp_pairing_failed+0x3e>
		if (bt_auth && bt_auth->cancel) {
    cb90:	4b0d      	ldr	r3, [pc, #52]	; (cbc8 <smp_pairing_failed+0x64>)
    cb92:	681b      	ldr	r3, [r3, #0]
    cb94:	b963      	cbnz	r3, cbb0 <smp_pairing_failed+0x4c>
	smp_pairing_complete(smp, req->reason);
    cb96:	4620      	mov	r0, r4
    cb98:	7831      	ldrb	r1, [r6, #0]
    cb9a:	f7ff fdc7 	bl	c72c <smp_pairing_complete>
}
    cb9e:	2000      	movs	r0, #0
    cba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
    cba2:	210b      	movs	r1, #11
    cba4:	4628      	mov	r0, r5
    cba6:	f015 fd4a 	bl	2263e <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    cbaa:	2800      	cmp	r0, #0
    cbac:	d1f0      	bne.n	cb90 <smp_pairing_failed+0x2c>
    cbae:	e7f2      	b.n	cb96 <smp_pairing_failed+0x32>
		if (bt_auth && bt_auth->cancel) {
    cbb0:	691b      	ldr	r3, [r3, #16]
    cbb2:	2b00      	cmp	r3, #0
    cbb4:	d0ef      	beq.n	cb96 <smp_pairing_failed+0x32>
			bt_auth->cancel(conn);
    cbb6:	4638      	mov	r0, r7
    cbb8:	4798      	blx	r3
    cbba:	e7ec      	b.n	cb96 <smp_pairing_failed+0x32>
    cbbc:	00023fe0 	.word	0x00023fe0
    cbc0:	00023ed8 	.word	0x00023ed8
    cbc4:	00027709 	.word	0x00027709
    cbc8:	2000184c 	.word	0x2000184c

0000cbcc <bt_smp_encrypt_change>:
{
    cbcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->conn;
    cbd0:	4605      	mov	r5, r0
{
    cbd2:	b089      	sub	sp, #36	; 0x24
	struct bt_conn *conn = chan->conn;
    cbd4:	f855 7bc4 	ldr.w	r7, [r5], #196
{
    cbd8:	4604      	mov	r4, r0
    cbda:	460e      	mov	r6, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    cbdc:	4628      	mov	r0, r5
    cbde:	2101      	movs	r1, #1
    cbe0:	f015 fd2d 	bl	2263e <atomic_test_and_clear_bit>
    cbe4:	b310      	cbz	r0, cc2c <bt_smp_encrypt_change+0x60>
	if (hci_status) {
    cbe6:	b1be      	cbz	r6, cc18 <bt_smp_encrypt_change+0x4c>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    cbe8:	2103      	movs	r1, #3
    cbea:	4628      	mov	r0, r5
    cbec:	f015 fc73 	bl	224d6 <atomic_test_bit>
    cbf0:	b1e0      	cbz	r0, cc2c <bt_smp_encrypt_change+0x60>
			uint8_t smp_err = smp_err_get(
    cbf2:	4630      	mov	r0, r6
    cbf4:	f7fa fe4c 	bl	7890 <bt_security_err_get>
	switch (auth_err) {
    cbf8:	3801      	subs	r0, #1
    cbfa:	b2c0      	uxtb	r0, r0
    cbfc:	2807      	cmp	r0, #7
    cbfe:	bf9a      	itte	ls
    cc00:	4b72      	ldrls	r3, [pc, #456]	; (cdcc <bt_smp_encrypt_change+0x200>)
    cc02:	5c1e      	ldrbls	r6, [r3, r0]
			uint8_t smp_err = smp_err_get(
    cc04:	2600      	movhi	r6, #0
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
    cc06:	2102      	movs	r1, #2
    cc08:	4628      	mov	r0, r5
    cc0a:	f015 fb87 	bl	2231c <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
    cc0e:	4631      	mov	r1, r6
		smp_pairing_complete(smp, 0);
    cc10:	4620      	mov	r0, r4
    cc12:	f7ff fd8b 	bl	c72c <smp_pairing_complete>
    cc16:	e009      	b.n	cc2c <bt_smp_encrypt_change+0x60>
	if (!conn->encrypt) {
    cc18:	7afb      	ldrb	r3, [r7, #11]
    cc1a:	b13b      	cbz	r3, cc2c <bt_smp_encrypt_change+0x60>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    cc1c:	2103      	movs	r1, #3
    cc1e:	4628      	mov	r0, r5
    cc20:	f015 fc59 	bl	224d6 <atomic_test_bit>
    cc24:	b928      	cbnz	r0, cc32 <bt_smp_encrypt_change+0x66>
		smp_reset(smp);
    cc26:	4620      	mov	r0, r4
    cc28:	f015 fd21 	bl	2266e <smp_reset>
}
    cc2c:	b009      	add	sp, #36	; 0x24
    cc2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    cc32:	2105      	movs	r1, #5
    cc34:	4628      	mov	r0, r5
    cc36:	f015 fc4e 	bl	224d6 <atomic_test_bit>
    cc3a:	b198      	cbz	r0, cc64 <bt_smp_encrypt_change+0x98>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
    cc3c:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
    cc40:	071f      	lsls	r7, r3, #28
    cc42:	d507      	bpl.n	cc54 <bt_smp_encrypt_change+0x88>
    cc44:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
    cc48:	071e      	lsls	r6, r3, #28
    cc4a:	d503      	bpl.n	cc54 <bt_smp_encrypt_change+0x88>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
    cc4c:	2111      	movs	r1, #17
    cc4e:	4628      	mov	r0, r5
    cc50:	f015 fb64 	bl	2231c <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
    cc54:	f8b4 31a8 	ldrh.w	r3, [r4, #424]	; 0x1a8
    cc58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    cc5c:	f023 0308 	bic.w	r3, r3, #8
    cc60:	f8a4 31a8 	strh.w	r3, [r4, #424]	; 0x1a8
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
    cc64:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
    cc68:	07d8      	lsls	r0, r3, #31
    cc6a:	d51e      	bpl.n	ccaa <bt_smp_encrypt_change+0xde>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
    cc6c:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    cc6e:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    cc72:	f015 fb53 	bl	2231c <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
    cc76:	4628      	mov	r0, r5
    cc78:	2102      	movs	r1, #2
    cc7a:	f015 fb4f 	bl	2231c <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
    cc7e:	6820      	ldr	r0, [r4, #0]
	if (!keys) {
    cc80:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
    cc84:	b9cb      	cbnz	r3, ccba <bt_smp_encrypt_change+0xee>
    cc86:	4a52      	ldr	r2, [pc, #328]	; (cdd0 <bt_smp_encrypt_change+0x204>)
    cc88:	4c52      	ldr	r4, [pc, #328]	; (cdd4 <bt_smp_encrypt_change+0x208>)
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
    cc8a:	3088      	adds	r0, #136	; 0x88
    cc8c:	1aa4      	subs	r4, r4, r2
    cc8e:	f7f9 fb09 	bl	62a4 <bt_addr_le_str_real>
    cc92:	f7f6 ffa1 	bl	3bd8 <log_strdup>
    cc96:	08e4      	lsrs	r4, r4, #3
    cc98:	01a4      	lsls	r4, r4, #6
    cc9a:	f044 0401 	orr.w	r4, r4, #1
    cc9e:	4601      	mov	r1, r0
    cca0:	4622      	mov	r2, r4
    cca2:	484d      	ldr	r0, [pc, #308]	; (cdd8 <bt_smp_encrypt_change+0x20c>)
    cca4:	f012 fa21 	bl	1f0ea <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
    cca8:	e7c0      	b.n	cc2c <bt_smp_encrypt_change+0x60>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    ccaa:	0799      	lsls	r1, r3, #30
    ccac:	d501      	bpl.n	ccb2 <bt_smp_encrypt_change+0xe6>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    ccae:	2108      	movs	r1, #8
    ccb0:	e7dd      	b.n	cc6e <bt_smp_encrypt_change+0xa2>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    ccb2:	075a      	lsls	r2, r3, #29
    ccb4:	d5df      	bpl.n	cc76 <bt_smp_encrypt_change+0xaa>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    ccb6:	210a      	movs	r1, #10
    ccb8:	e7d9      	b.n	cc6e <bt_smp_encrypt_change+0xa2>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    ccba:	2105      	movs	r1, #5
    ccbc:	4628      	mov	r0, r5
    ccbe:	f015 fc0a 	bl	224d6 <atomic_test_bit>
    ccc2:	b9b0      	cbnz	r0, ccf2 <bt_smp_encrypt_change+0x126>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
    ccc4:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
    ccc8:	07db      	lsls	r3, r3, #31
    ccca:	d512      	bpl.n	ccf2 <bt_smp_encrypt_change+0x126>
	struct bt_keys *keys = conn->le.keys;
    cccc:	6823      	ldr	r3, [r4, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
    ccce:	211a      	movs	r1, #26
    ccd0:	a801      	add	r0, sp, #4
	struct bt_keys *keys = conn->le.keys;
    ccd2:	f8d3 60b4 	ldr.w	r6, [r3, #180]	; 0xb4
		if (bt_rand((void *)&rand, sizeof(rand))) {
    ccd6:	f003 f8cf 	bl	fe78 <bt_rand>
    ccda:	4680      	mov	r8, r0
    ccdc:	b170      	cbz	r0, ccfc <bt_smp_encrypt_change+0x130>
    ccde:	493d      	ldr	r1, [pc, #244]	; (cdd4 <bt_smp_encrypt_change+0x208>)
    cce0:	4b3b      	ldr	r3, [pc, #236]	; (cdd0 <bt_smp_encrypt_change+0x204>)
			BT_ERR("Unable to get random bytes");
    cce2:	483e      	ldr	r0, [pc, #248]	; (cddc <bt_smp_encrypt_change+0x210>)
    cce4:	1ac9      	subs	r1, r1, r3
    cce6:	08c9      	lsrs	r1, r1, #3
    cce8:	0189      	lsls	r1, r1, #6
    ccea:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Unable to allocate Encrypt Info buffer");
    ccee:	f012 f9ef 	bl	1f0d0 <log_0>
	if (!smp->local_dist && !smp->remote_dist) {
    ccf2:	f8b4 11a8 	ldrh.w	r1, [r4, #424]	; 0x1a8
    ccf6:	2900      	cmp	r1, #0
    ccf8:	d198      	bne.n	cc2c <bt_smp_encrypt_change+0x60>
    ccfa:	e789      	b.n	cc10 <bt_smp_encrypt_change+0x44>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
    ccfc:	2106      	movs	r1, #6
    ccfe:	4620      	mov	r0, r4
    cd00:	f015 fc17 	bl	22532 <smp_create_pdu.isra.0>
		if (!buf) {
    cd04:	4607      	mov	r7, r0
    cd06:	b940      	cbnz	r0, cd1a <bt_smp_encrypt_change+0x14e>
    cd08:	4932      	ldr	r1, [pc, #200]	; (cdd4 <bt_smp_encrypt_change+0x208>)
    cd0a:	4b31      	ldr	r3, [pc, #196]	; (cdd0 <bt_smp_encrypt_change+0x204>)
			BT_ERR("Unable to allocate Encrypt Info buffer");
    cd0c:	4834      	ldr	r0, [pc, #208]	; (cde0 <bt_smp_encrypt_change+0x214>)
    cd0e:	1ac9      	subs	r1, r1, r3
    cd10:	08c9      	lsrs	r1, r1, #3
    cd12:	0189      	lsls	r1, r1, #6
    cd14:	f041 0101 	orr.w	r1, r1, #1
    cd18:	e7e9      	b.n	ccee <bt_smp_encrypt_change+0x122>
	return net_buf_simple_add(&buf->b, len);
    cd1a:	2110      	movs	r1, #16
    cd1c:	3008      	adds	r0, #8
    cd1e:	f015 ff52 	bl	22bc6 <net_buf_simple_add>
    cd22:	7b32      	ldrb	r2, [r6, #12]
    cd24:	a901      	add	r1, sp, #4
    cd26:	4681      	mov	r9, r0
    cd28:	f016 ff69 	bl	23bfe <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
    cd2c:	7b30      	ldrb	r0, [r6, #12]
    cd2e:	280f      	cmp	r0, #15
    cd30:	d805      	bhi.n	cd3e <bt_smp_encrypt_change+0x172>
__ssp_bos_icheck3(memset, void *, int)
    cd32:	f1c0 0210 	rsb	r2, r0, #16
    cd36:	4641      	mov	r1, r8
    cd38:	4448      	add	r0, r9
    cd3a:	f016 ff6e 	bl	23c1a <memset>
		smp_send(smp, buf, NULL, NULL);
    cd3e:	4639      	mov	r1, r7
    cd40:	2200      	movs	r2, #0
    cd42:	4620      	mov	r0, r4
    cd44:	f7fe fd96 	bl	b874 <smp_send.isra.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_MASTER_IDENT,
    cd48:	2107      	movs	r1, #7
    cd4a:	4620      	mov	r0, r4
    cd4c:	f015 fbf1 	bl	22532 <smp_create_pdu.isra.0>
		if (!buf) {
    cd50:	4607      	mov	r7, r0
    cd52:	b940      	cbnz	r0, cd66 <bt_smp_encrypt_change+0x19a>
    cd54:	491f      	ldr	r1, [pc, #124]	; (cdd4 <bt_smp_encrypt_change+0x208>)
    cd56:	4b1e      	ldr	r3, [pc, #120]	; (cdd0 <bt_smp_encrypt_change+0x204>)
			BT_ERR("Unable to allocate Master Ident buffer");
    cd58:	4822      	ldr	r0, [pc, #136]	; (cde4 <bt_smp_encrypt_change+0x218>)
    cd5a:	1ac9      	subs	r1, r1, r3
    cd5c:	08c9      	lsrs	r1, r1, #3
    cd5e:	0189      	lsls	r1, r1, #6
    cd60:	f041 0101 	orr.w	r1, r1, #1
    cd64:	e7c3      	b.n	ccee <bt_smp_encrypt_change+0x122>
    cd66:	210a      	movs	r1, #10
    cd68:	3008      	adds	r0, #8
    cd6a:	f015 ff2c 	bl	22bc6 <net_buf_simple_add>
    cd6e:	aa05      	add	r2, sp, #20
    cd70:	4603      	mov	r3, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    cd72:	ca03      	ldmia	r2!, {r0, r1}
    cd74:	f8c3 0002 	str.w	r0, [r3, #2]
    cd78:	f8c3 1006 	str.w	r1, [r3, #6]
    cd7c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    cd80:	801a      	strh	r2, [r3, #0]
		smp_send(smp, buf, smp_ident_sent, NULL);
    cd82:	4639      	mov	r1, r7
    cd84:	4a18      	ldr	r2, [pc, #96]	; (cde8 <bt_smp_encrypt_change+0x21c>)
    cd86:	4620      	mov	r0, r4
    cd88:	f7fe fd74 	bl	b874 <smp_send.isra.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    cd8c:	4628      	mov	r0, r5
    cd8e:	210d      	movs	r1, #13
    cd90:	f015 fba1 	bl	224d6 <atomic_test_bit>
    cd94:	ad05      	add	r5, sp, #20
    cd96:	2800      	cmp	r0, #0
    cd98:	d0ab      	beq.n	ccf2 <bt_smp_encrypt_change+0x126>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
    cd9a:	2101      	movs	r1, #1
    cd9c:	4630      	mov	r0, r6
    cd9e:	f015 fea9 	bl	22af4 <bt_keys_add_type>
    cda2:	f106 074a 	add.w	r7, r6, #74	; 0x4a
    cda6:	ab01      	add	r3, sp, #4
    cda8:	461a      	mov	r2, r3
    cdaa:	ca03      	ldmia	r2!, {r0, r1}
    cdac:	42aa      	cmp	r2, r5
    cdae:	6038      	str	r0, [r7, #0]
    cdb0:	6079      	str	r1, [r7, #4]
    cdb2:	4613      	mov	r3, r2
    cdb4:	f107 0708 	add.w	r7, r7, #8
    cdb8:	d1f6      	bne.n	cda8 <bt_smp_encrypt_change+0x1dc>
    cdba:	462b      	mov	r3, r5
    cdbc:	cb03      	ldmia	r3!, {r0, r1}
    cdbe:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    cdc2:	6430      	str	r0, [r6, #64]	; 0x40
    cdc4:	6471      	str	r1, [r6, #68]	; 0x44
    cdc6:	f8a6 3048 	strh.w	r3, [r6, #72]	; 0x48
    cdca:	e792      	b.n	ccf2 <bt_smp_encrypt_change+0x126>
    cdcc:	000277b4 	.word	0x000277b4
    cdd0:	00023ed8 	.word	0x00023ed8
    cdd4:	00023fe0 	.word	0x00023fe0
    cdd8:	00027715 	.word	0x00027715
    cddc:	0002772a 	.word	0x0002772a
    cde0:	00027745 	.word	0x00027745
    cde4:	0002776c 	.word	0x0002776c
    cde8:	00022a9d 	.word	0x00022a9d

0000cdec <smp_timeout>:
    cdec:	4b0b      	ldr	r3, [pc, #44]	; (ce1c <smp_timeout+0x30>)
    cdee:	490c      	ldr	r1, [pc, #48]	; (ce20 <smp_timeout+0x34>)
{
    cdf0:	b510      	push	{r4, lr}
    cdf2:	1ac9      	subs	r1, r1, r3
    cdf4:	08c9      	lsrs	r1, r1, #3
	BT_ERR("SMP Timeout");
    cdf6:	0189      	lsls	r1, r1, #6
{
    cdf8:	4604      	mov	r4, r0
	BT_ERR("SMP Timeout");
    cdfa:	f041 0101 	orr.w	r1, r1, #1
    cdfe:	4809      	ldr	r0, [pc, #36]	; (ce24 <smp_timeout+0x38>)
    ce00:	f012 f966 	bl	1f0d0 <log_0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
    ce04:	f5a4 70d8 	sub.w	r0, r4, #432	; 0x1b0
    ce08:	2108      	movs	r1, #8
    ce0a:	f7ff fc8f 	bl	c72c <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    ce0e:	f1a4 00ec 	sub.w	r0, r4, #236	; 0xec
    ce12:	2104      	movs	r1, #4
}
    ce14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    ce18:	f015 ba80 	b.w	2231c <atomic_set_bit>
    ce1c:	00023ed8 	.word	0x00023ed8
    ce20:	00023fe0 	.word	0x00023fe0
    ce24:	00027793 	.word	0x00027793

0000ce28 <bt_smp_update_keys>:
{
    ce28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ce2a:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
    ce2c:	f7fe fcca 	bl	b7c4 <smp_chan_get>
	if (!smp) {
    ce30:	4605      	mov	r5, r0
    ce32:	2800      	cmp	r0, #0
    ce34:	d074      	beq.n	cf20 <bt_smp_update_keys+0xf8>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    ce36:	f100 06c4 	add.w	r6, r0, #196	; 0xc4
    ce3a:	2103      	movs	r1, #3
    ce3c:	4630      	mov	r0, r6
    ce3e:	f015 fb4a 	bl	224d6 <atomic_test_bit>
    ce42:	2800      	cmp	r0, #0
    ce44:	d06c      	beq.n	cf20 <bt_smp_update_keys+0xf8>
	if (conn->le.keys) {
    ce46:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    ce4a:	b108      	cbz	r0, ce50 <bt_smp_update_keys+0x28>
		bt_keys_clear(conn->le.keys);
    ce4c:	f015 fe56 	bl	22afc <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    ce50:	f104 0788 	add.w	r7, r4, #136	; 0x88
    ce54:	7a20      	ldrb	r0, [r4, #8]
    ce56:	4639      	mov	r1, r7
    ce58:	f000 f88a 	bl	cf70 <bt_keys_get_addr>
    ce5c:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
    ce60:	b9b0      	cbnz	r0, ce90 <bt_smp_update_keys+0x68>
    ce62:	4a35      	ldr	r2, [pc, #212]	; (cf38 <bt_smp_update_keys+0x110>)
    ce64:	4c35      	ldr	r4, [pc, #212]	; (cf3c <bt_smp_update_keys+0x114>)
		BT_ERR("Unable to get keys for %s",
    ce66:	4638      	mov	r0, r7
    ce68:	1aa4      	subs	r4, r4, r2
    ce6a:	f7f9 fa1b 	bl	62a4 <bt_addr_le_str_real>
    ce6e:	f7f6 feb3 	bl	3bd8 <log_strdup>
    ce72:	08e4      	lsrs	r4, r4, #3
    ce74:	01a4      	lsls	r4, r4, #6
    ce76:	f044 0401 	orr.w	r4, r4, #1
    ce7a:	4601      	mov	r1, r0
    ce7c:	4622      	mov	r2, r4
    ce7e:	4830      	ldr	r0, [pc, #192]	; (cf40 <bt_smp_update_keys+0x118>)
    ce80:	f012 f933 	bl	1f0ea <log_1>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    ce84:	4628      	mov	r0, r5
    ce86:	2108      	movs	r1, #8
}
    ce88:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    ce8c:	f015 bd57 	b.w	2293e <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
    ce90:	210e      	movs	r1, #14
    ce92:	4630      	mov	r0, r6
    ce94:	f015 fb1f 	bl	224d6 <atomic_test_bit>
    ce98:	b128      	cbz	r0, cea6 <bt_smp_update_keys+0x7e>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
    ce9a:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
    ce9e:	7b53      	ldrb	r3, [r2, #13]
    cea0:	f043 0302 	orr.w	r3, r3, #2
    cea4:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
    cea6:	f895 20c8 	ldrb.w	r2, [r5, #200]	; 0xc8
    ceaa:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
    ceae:	2a03      	cmp	r2, #3
    ceb0:	7b4b      	ldrb	r3, [r1, #13]
    ceb2:	d836      	bhi.n	cf22 <bt_smp_update_keys+0xfa>
    ceb4:	b3c2      	cbz	r2, cf28 <bt_smp_update_keys+0x100>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
    ceb6:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
    ceba:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
    cebc:	f895 30d4 	ldrb.w	r3, [r5, #212]	; 0xd4
    cec0:	f895 20cd 	ldrb.w	r2, [r5, #205]	; 0xcd
    cec4:	4293      	cmp	r3, r2
    cec6:	bf28      	it	cs
    cec8:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
    ceca:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    cecc:	4630      	mov	r0, r6
    cece:	2105      	movs	r1, #5
    ced0:	f015 fb01 	bl	224d6 <atomic_test_bit>
    ced4:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
    ced8:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    ceda:	b340      	cbz	r0, cf2e <bt_smp_update_keys+0x106>
		conn->le.keys->flags |= BT_KEYS_SC;
    cedc:	f042 0210 	orr.w	r2, r2, #16
    cee0:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    cee2:	210d      	movs	r1, #13
    cee4:	4630      	mov	r0, r6
    cee6:	f015 faf6 	bl	224d6 <atomic_test_bit>
    ceea:	b1c8      	cbz	r0, cf20 <bt_smp_update_keys+0xf8>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
    ceec:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    cef0:	2120      	movs	r1, #32
    cef2:	f015 fdff 	bl	22af4 <bt_keys_add_type>
    cef6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
    cefa:	f205 1207 	addw	r2, r5, #263	; 0x107
    cefe:	331a      	adds	r3, #26
    cf00:	f205 1517 	addw	r5, r5, #279	; 0x117
    cf04:	f852 1b04 	ldr.w	r1, [r2], #4
    cf08:	f843 1b04 	str.w	r1, [r3], #4
    cf0c:	42aa      	cmp	r2, r5
    cf0e:	d1f9      	bne.n	cf04 <bt_smp_update_keys+0xdc>
__ssp_bos_icheck3(memset, void *, int)
    cf10:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
    cf14:	2300      	movs	r3, #0
    cf16:	6113      	str	r3, [r2, #16]
    cf18:	6153      	str	r3, [r2, #20]
    cf1a:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
    cf1e:	8313      	strh	r3, [r2, #24]
}
    cf20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (smp->method) {
    cf22:	3a05      	subs	r2, #5
    cf24:	2a01      	cmp	r2, #1
    cf26:	d9c6      	bls.n	ceb6 <bt_smp_update_keys+0x8e>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
    cf28:	f023 0301 	bic.w	r3, r3, #1
    cf2c:	e7c5      	b.n	ceba <bt_smp_update_keys+0x92>
		conn->le.keys->flags &= ~BT_KEYS_SC;
    cf2e:	f022 0210 	bic.w	r2, r2, #16
    cf32:	735a      	strb	r2, [r3, #13]
    cf34:	e7f4      	b.n	cf20 <bt_smp_update_keys+0xf8>
    cf36:	bf00      	nop
    cf38:	00023ed8 	.word	0x00023ed8
    cf3c:	00023fe0 	.word	0x00023fe0
    cf40:	000275f1 	.word	0x000275f1

0000cf44 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
    cf44:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
    cf46:	4b07      	ldr	r3, [pc, #28]	; (cf64 <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
    cf48:	4807      	ldr	r0, [pc, #28]	; (cf68 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
    cf4a:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
    cf4e:	f003 0306 	and.w	r3, r3, #6
    cf52:	1f9a      	subs	r2, r3, #6
    cf54:	4253      	negs	r3, r2
    cf56:	4153      	adcs	r3, r2
    cf58:	4a04      	ldr	r2, [pc, #16]	; (cf6c <bt_smp_init+0x28>)
    cf5a:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
    cf5c:	f7fb fd24 	bl	89a8 <bt_pub_key_gen>
	}

	return smp_self_test();
}
    cf60:	2000      	movs	r0, #0
    cf62:	bd08      	pop	{r3, pc}
    cf64:	20000000 	.word	0x20000000
    cf68:	200002c8 	.word	0x200002c8
    cf6c:	200035d2 	.word	0x200035d2

0000cf70 <bt_keys_get_addr>:
static uint32_t aging_counter_val;
static struct bt_keys *last_keys_updated;
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
    cf70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    cf72:	4c11      	ldr	r4, [pc, #68]	; (cfb8 <bt_keys_get_addr+0x48>)
    cf74:	7823      	ldrb	r3, [r4, #0]
    cf76:	4283      	cmp	r3, r0
{
    cf78:	4605      	mov	r5, r0
    cf7a:	460e      	mov	r6, r1
    cf7c:	4627      	mov	r7, r4
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    cf7e:	d00b      	beq.n	cf98 <bt_keys_get_addr+0x28>
			return keys;
		}

		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
    cf80:	2400      	movs	r4, #0
	return memcmp(a, b, sizeof(*a));
    cf82:	480e      	ldr	r0, [pc, #56]	; (cfbc <bt_keys_get_addr+0x4c>)
    cf84:	9400      	str	r4, [sp, #0]
    cf86:	2207      	movs	r2, #7
    cf88:	4669      	mov	r1, sp
    cf8a:	f8cd 4003 	str.w	r4, [sp, #3]
    cf8e:	f016 fe28 	bl	23be2 <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
    cf92:	b140      	cbz	r0, cfa6 <bt_keys_get_addr+0x36>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
    cf94:	4620      	mov	r0, r4
    cf96:	e00c      	b.n	cfb2 <bt_keys_get_addr+0x42>
    cf98:	2207      	movs	r2, #7
    cf9a:	1c60      	adds	r0, r4, #1
    cf9c:	f016 fe21 	bl	23be2 <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    cfa0:	2800      	cmp	r0, #0
    cfa2:	d1ed      	bne.n	cf80 <bt_keys_get_addr+0x10>
    cfa4:	e7f6      	b.n	cf94 <bt_keys_get_addr+0x24>
		bt_addr_le_copy(&keys->addr, addr);
    cfa6:	4805      	ldr	r0, [pc, #20]	; (cfbc <bt_keys_get_addr+0x4c>)
		keys->id = id;
    cfa8:	703d      	strb	r5, [r7, #0]
		bt_addr_le_copy(&keys->addr, addr);
    cfaa:	4631      	mov	r1, r6
    cfac:	f015 fd8b 	bl	22ac6 <bt_addr_le_copy>
		return keys;
    cfb0:	4801      	ldr	r0, [pc, #4]	; (cfb8 <bt_keys_get_addr+0x48>)
}
    cfb2:	b003      	add	sp, #12
    cfb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cfb6:	bf00      	nop
    cfb8:	200018e4 	.word	0x200018e4
    cfbc:	200018e5 	.word	0x200018e5

0000cfc0 <bt_keys_foreach>:
	}
}

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
    cfc0:	460b      	mov	r3, r1
    cfc2:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
    cfc4:	4a04      	ldr	r2, [pc, #16]	; (cfd8 <bt_keys_foreach+0x18>)
{
    cfc6:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
    cfc8:	89d4      	ldrh	r4, [r2, #14]
    cfca:	4204      	tst	r4, r0
    cfcc:	d002      	beq.n	cfd4 <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
		}
	}
}
    cfce:	bc10      	pop	{r4}
			func(&key_pool[i], data);
    cfd0:	4610      	mov	r0, r2
    cfd2:	4718      	bx	r3
}
    cfd4:	bc10      	pop	{r4}
    cfd6:	4770      	bx	lr
    cfd8:	200018e4 	.word	0x200018e4

0000cfdc <bt_keys_find>:

struct bt_keys *bt_keys_find(int type, uint8_t id, const bt_addr_le_t *addr)
{
    cfdc:	b510      	push	{r4, lr}
	int i;

	BT_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
    cfde:	4c09      	ldr	r4, [pc, #36]	; (d004 <bt_keys_find+0x28>)
{
    cfe0:	460b      	mov	r3, r1
    cfe2:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
    cfe4:	89e2      	ldrh	r2, [r4, #14]
    cfe6:	4202      	tst	r2, r0
    cfe8:	d007      	beq.n	cffa <bt_keys_find+0x1e>
    cfea:	7822      	ldrb	r2, [r4, #0]
    cfec:	429a      	cmp	r2, r3
    cfee:	d104      	bne.n	cffa <bt_keys_find+0x1e>
    cff0:	2207      	movs	r2, #7
    cff2:	1c60      	adds	r0, r4, #1
    cff4:	f016 fdf5 	bl	23be2 <memcmp>
    cff8:	b108      	cbz	r0, cffe <bt_keys_find+0x22>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
    cffa:	2000      	movs	r0, #0
}
    cffc:	bd10      	pop	{r4, pc}
			return &key_pool[i];
    cffe:	4620      	mov	r0, r4
    d000:	e7fc      	b.n	cffc <bt_keys_find+0x20>
    d002:	bf00      	nop
    d004:	200018e4 	.word	0x200018e4

0000d008 <bt_keys_find_irk>:

	return keys;
}

struct bt_keys *bt_keys_find_irk(uint8_t id, const bt_addr_le_t *addr)
{
    d008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
    d00a:	780b      	ldrb	r3, [r1, #0]
    d00c:	2b01      	cmp	r3, #1
    d00e:	4607      	mov	r7, r0
    d010:	460d      	mov	r5, r1
    d012:	d001      	beq.n	d018 <bt_keys_find_irk+0x10>
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
		return NULL;
    d014:	2000      	movs	r0, #0
	}

	BT_DBG("No IRK for %s", bt_addr_le_str(addr));

	return NULL;
}
    d016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
    d018:	798b      	ldrb	r3, [r1, #6]
    d01a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    d01e:	2b40      	cmp	r3, #64	; 0x40
    d020:	d1f8      	bne.n	d014 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    d022:	4c13      	ldr	r4, [pc, #76]	; (d070 <bt_keys_find_irk+0x68>)
    d024:	89e3      	ldrh	r3, [r4, #14]
    d026:	f013 0f02 	tst.w	r3, #2
    d02a:	4626      	mov	r6, r4
    d02c:	d0f2      	beq.n	d014 <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
    d02e:	7833      	ldrb	r3, [r6, #0]
    d030:	42bb      	cmp	r3, r7
    d032:	d10b      	bne.n	d04c <bt_keys_find_irk+0x44>
	return memcmp(a, b, sizeof(*a));
    d034:	2206      	movs	r2, #6
    d036:	f106 013a 	add.w	r1, r6, #58	; 0x3a
    d03a:	1c68      	adds	r0, r5, #1
    d03c:	f016 fdd1 	bl	23be2 <memcmp>
    d040:	b908      	cbnz	r0, d046 <bt_keys_find_irk+0x3e>
			return &key_pool[i];
    d042:	4620      	mov	r0, r4
    d044:	e7e7      	b.n	d016 <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    d046:	89f3      	ldrh	r3, [r6, #14]
    d048:	079b      	lsls	r3, r3, #30
    d04a:	d5e3      	bpl.n	d014 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
    d04c:	7833      	ldrb	r3, [r6, #0]
    d04e:	42bb      	cmp	r3, r7
    d050:	d1e0      	bne.n	d014 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
    d052:	3501      	adds	r5, #1
    d054:	4807      	ldr	r0, [pc, #28]	; (d074 <bt_keys_find_irk+0x6c>)
    d056:	4629      	mov	r1, r5
    d058:	f013 fdc2 	bl	20be0 <bt_rpa_irk_matches>
    d05c:	2800      	cmp	r0, #0
    d05e:	d0d9      	beq.n	d014 <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
    d060:	682b      	ldr	r3, [r5, #0]
    d062:	4805      	ldr	r0, [pc, #20]	; (d078 <bt_keys_find_irk+0x70>)
    d064:	f8c6 303a 	str.w	r3, [r6, #58]	; 0x3a
    d068:	88ab      	ldrh	r3, [r5, #4]
    d06a:	8083      	strh	r3, [r0, #4]
			return &key_pool[i];
    d06c:	383a      	subs	r0, #58	; 0x3a
}
    d06e:	e7d2      	b.n	d016 <bt_keys_find_irk+0xe>
    d070:	200018e4 	.word	0x200018e4
    d074:	2000190e 	.word	0x2000190e
    d078:	2000191e 	.word	0x2000191e

0000d07c <bt_keys_find_addr>:

struct bt_keys *bt_keys_find_addr(uint8_t id, const bt_addr_le_t *addr)
{
    d07c:	b510      	push	{r4, lr}
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if (key_pool[i].id == id &&
    d07e:	4c06      	ldr	r4, [pc, #24]	; (d098 <bt_keys_find_addr+0x1c>)
    d080:	7823      	ldrb	r3, [r4, #0]
    d082:	4283      	cmp	r3, r0
    d084:	d104      	bne.n	d090 <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
    d086:	2207      	movs	r2, #7
    d088:	1c60      	adds	r0, r4, #1
    d08a:	f016 fdaa 	bl	23be2 <memcmp>
    d08e:	b108      	cbz	r0, d094 <bt_keys_find_addr+0x18>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
    d090:	2000      	movs	r0, #0
}
    d092:	bd10      	pop	{r4, pc}
			return &key_pool[i];
    d094:	4620      	mov	r0, r4
    d096:	e7fc      	b.n	d092 <bt_keys_find_addr+0x16>
    d098:	200018e4 	.word	0x200018e4

0000d09c <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
    d09c:	b470      	push	{r4, r5, r6}
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    d09e:	1e54      	subs	r4, r2, #1
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    d0a0:	1dc5      	adds	r5, r0, #7
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    d0a2:	b2a4      	uxth	r4, r4
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    d0a4:	f025 0503 	bic.w	r5, r5, #3
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    d0a8:	fb01 f604 	mul.w	r6, r1, r4
	*mem_head = mem_pool;
    d0ac:	6018      	str	r0, [r3, #0]
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    d0ae:	802a      	strh	r2, [r5, #0]
		     sizeof(mem_pool));
	while (mem_count--) {
    d0b0:	1e93      	subs	r3, r2, #2
    d0b2:	2200      	movs	r2, #0
    d0b4:	5182      	str	r2, [r0, r6]
    d0b6:	b17c      	cbz	r4, d0d8 <mem_init+0x3c>
    d0b8:	b29b      	uxth	r3, r3
    d0ba:	fb03 1401 	mla	r4, r3, r1, r1
    d0be:	fb03 f201 	mul.w	r2, r3, r1
    d0c2:	4420      	add	r0, r4
    d0c4:	1b12      	subs	r2, r2, r4
    d0c6:	f64f 74ff 	movw	r4, #65535	; 0xffff
    d0ca:	3b01      	subs	r3, #1
    d0cc:	b29b      	uxth	r3, r3
    d0ce:	42a3      	cmp	r3, r4
    d0d0:	5080      	str	r0, [r0, r2]
    d0d2:	eba0 0001 	sub.w	r0, r0, r1
    d0d6:	d1f8      	bne.n	d0ca <mem_init+0x2e>
		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
    d0d8:	bc70      	pop	{r4, r5, r6}
    d0da:	4770      	bx	lr

0000d0dc <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    d0dc:	4603      	mov	r3, r0
	if (*mem_head) {
    d0de:	6800      	ldr	r0, [r0, #0]
    d0e0:	b180      	cbz	r0, d104 <mem_acquire+0x28>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    d0e2:	6802      	ldr	r2, [r0, #0]

		/* Store free mem_count after the list's next pointer */
		if (head) {
    d0e4:	b162      	cbz	r2, d100 <mem_acquire+0x24>
{
    d0e6:	b410      	push	{r4}
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    d0e8:	1dc4      	adds	r4, r0, #7
    d0ea:	f024 0403 	bic.w	r4, r4, #3
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    d0ee:	1dd1      	adds	r1, r2, #7
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    d0f0:	8824      	ldrh	r4, [r4, #0]
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    d0f2:	f021 0103 	bic.w	r1, r1, #3
		free_count--;
    d0f6:	3c01      	subs	r4, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    d0f8:	800c      	strh	r4, [r1, #0]
		*mem_head = head;
		return mem;
	}

	return NULL;
}
    d0fa:	bc10      	pop	{r4}
		*mem_head = head;
    d0fc:	601a      	str	r2, [r3, #0]
}
    d0fe:	4770      	bx	lr
		*mem_head = head;
    d100:	601a      	str	r2, [r3, #0]
		return mem;
    d102:	4770      	bx	lr
}
    d104:	4770      	bx	lr
    d106:	bf00      	nop

0000d108 <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    d108:	b410      	push	{r4}
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    d10a:	680b      	ldr	r3, [r1, #0]
{
    d10c:	b083      	sub	sp, #12
    d10e:	4602      	mov	r2, r0
    d110:	9001      	str	r0, [sp, #4]
	if (*mem_head) {
    d112:	b183      	cbz	r3, d136 <mem_release+0x2e>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    d114:	3307      	adds	r3, #7
    d116:	f023 0303 	bic.w	r3, r3, #3
    d11a:	8818      	ldrh	r0, [r3, #0]
    d11c:	3001      	adds	r0, #1
    d11e:	b280      	uxth	r0, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    d120:	4613      	mov	r3, r2
    d122:	680c      	ldr	r4, [r1, #0]
    d124:	f843 4b07 	str.w	r4, [r3], #7
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
    d128:	f023 0303 	bic.w	r3, r3, #3
    d12c:	8018      	strh	r0, [r3, #0]

	*mem_head = mem;
    d12e:	600a      	str	r2, [r1, #0]
}
    d130:	b003      	add	sp, #12
    d132:	bc10      	pop	{r4}
    d134:	4770      	bx	lr
    d136:	2001      	movs	r0, #1
    d138:	e7f2      	b.n	d120 <mem_release+0x18>
    d13a:	bf00      	nop

0000d13c <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
    d13c:	fb02 0001 	mla	r0, r2, r1, r0
    d140:	4770      	bx	lr
    d142:	bf00      	nop

0000d144 <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint16_t)((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size);
    d144:	1a40      	subs	r0, r0, r1
    d146:	b280      	uxth	r0, r0
}
    d148:	fbb0 f0f2 	udiv	r0, r0, r2
    d14c:	4770      	bx	lr
    d14e:	bf00      	nop

0000d150 <mem_rcopy>:
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
	src += len;
	while (len--) {
    d150:	1e53      	subs	r3, r2, #1
	src += len;
    d152:	4411      	add	r1, r2
	while (len--) {
    d154:	b29b      	uxth	r3, r3
    d156:	b142      	cbz	r2, d16a <mem_rcopy+0x1a>
    d158:	43db      	mvns	r3, r3
    d15a:	18ca      	adds	r2, r1, r3
    d15c:	3801      	subs	r0, #1
		*dst++ = *--src;
    d15e:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    d162:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (len--) {
    d166:	4291      	cmp	r1, r2
    d168:	d1f9      	bne.n	d15e <mem_rcopy+0xe>
	}
}
    d16a:	4770      	bx	lr

0000d16c <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
    d16c:	4401      	add	r1, r0
    d16e:	e002      	b.n	d176 <mem_nz+0xa>
		if (*src++) {
    d170:	f810 3b01 	ldrb.w	r3, [r0], #1
    d174:	b91b      	cbnz	r3, d17e <mem_nz+0x12>
	while (len--) {
    d176:	4288      	cmp	r0, r1
    d178:	d1fa      	bne.n	d170 <mem_nz+0x4>
			return 1;
		}
	}

	return 0;
    d17a:	2000      	movs	r0, #0
    d17c:	4770      	bx	lr
			return 1;
    d17e:	2001      	movs	r0, #1
}
    d180:	4770      	bx	lr
    d182:	bf00      	nop

0000d184 <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
    d184:	6010      	str	r0, [r2, #0]
    d186:	6008      	str	r0, [r1, #0]

	return link;
}
    d188:	4770      	bx	lr
    d18a:	bf00      	nop

0000d18c <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
    d18c:	680a      	ldr	r2, [r1, #0]
{
    d18e:	4603      	mov	r3, r0
	if (*head != *tail) {
    d190:	6800      	ldr	r0, [r0, #0]
    d192:	4290      	cmp	r0, r2
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
    d194:	bf05      	ittet	eq
    d196:	2200      	moveq	r2, #0
    d198:	600a      	streq	r2, [r1, #0]
		return NULL;
    d19a:	2000      	movne	r0, #0
	*head = *tail = NULL;
    d19c:	601a      	streq	r2, [r3, #0]

	return old_head;
}
    d19e:	4770      	bx	lr

0000d1a0 <memq_enqueue>:
 * @param mem[in]      The memory payload to be enqueued. Pointed to by old tail
 * @param tail[in,out] Tail of queue. Will be updated to point to link
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
    d1a0:	b410      	push	{r4}
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
    d1a2:	6814      	ldr	r4, [r2, #0]
    d1a4:	6020      	str	r0, [r4, #0]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
    d1a6:	6814      	ldr	r4, [r2, #0]
    d1a8:	6061      	str	r1, [r4, #4]
	 */
	cpu_dmb(); /* Ensure data accesses are synchronized */
	*tail = link; /* Commit: enqueue of memq node */

	return link;
}
    d1aa:	bc10      	pop	{r4}
	*tail = link; /* Commit: enqueue of memq node */
    d1ac:	6010      	str	r0, [r2, #0]
}
    d1ae:	4770      	bx	lr

0000d1b0 <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
    d1b0:	4288      	cmp	r0, r1
    d1b2:	d003      	beq.n	d1bc <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
    d1b4:	b11a      	cbz	r2, d1be <memq_peek+0xe>
		*mem = head->mem;
    d1b6:	6843      	ldr	r3, [r0, #4]
    d1b8:	6013      	str	r3, [r2, #0]
    d1ba:	4770      	bx	lr
		return NULL;
    d1bc:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
    d1be:	4770      	bx	lr

0000d1c0 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
    d1c0:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    d1c2:	4283      	cmp	r3, r0
    d1c4:	d009      	beq.n	d1da <memq_dequeue+0x1a>
	if (mem) {
    d1c6:	b12a      	cbz	r2, d1d4 <memq_dequeue+0x14>
		*mem = head->mem;
    d1c8:	6858      	ldr	r0, [r3, #4]
    d1ca:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
    d1cc:	681a      	ldr	r2, [r3, #0]
    d1ce:	600a      	str	r2, [r1, #0]

	return old_head;
}
    d1d0:	4618      	mov	r0, r3
    d1d2:	4770      	bx	lr
	if (old_head == NULL) {
    d1d4:	2b00      	cmp	r3, #0
    d1d6:	d1f9      	bne.n	d1cc <memq_dequeue+0xc>
    d1d8:	e7fa      	b.n	d1d0 <memq_dequeue+0x10>
		return NULL; /* queue is empty */
    d1da:	2300      	movs	r3, #0
    d1dc:	e7f8      	b.n	d1d0 <memq_dequeue+0x10>
    d1de:	bf00      	nop

0000d1e0 <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
    d1e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d1e4:	f8df 8034 	ldr.w	r8, [pc, #52]	; d21c <mayfly_init+0x3c>
    d1e8:	4e0b      	ldr	r6, [pc, #44]	; (d218 <mayfly_init+0x38>)
    d1ea:	270c      	movs	r7, #12
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
    d1ec:	f106 0430 	add.w	r4, r6, #48	; 0x30
{
    d1f0:	4645      	mov	r5, r8
			memq_init(&mfl[callee_id][caller_id],
    d1f2:	1d22      	adds	r2, r4, #4
    d1f4:	4621      	mov	r1, r4
    d1f6:	4628      	mov	r0, r5
    d1f8:	3c0c      	subs	r4, #12
    d1fa:	f7ff ffc3 	bl	d184 <memq_init>
		while (caller_id--) {
    d1fe:	42b4      	cmp	r4, r6
    d200:	f1a5 0508 	sub.w	r5, r5, #8
    d204:	d1f5      	bne.n	d1f2 <mayfly_init+0x12>
	while (callee_id--) {
    d206:	3f04      	subs	r7, #4
    d208:	1d3b      	adds	r3, r7, #4
    d20a:	f1a8 0820 	sub.w	r8, r8, #32
    d20e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
    d212:	d1eb      	bne.n	d1ec <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    d214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d218:	20001a48 	.word	0x20001a48
    d21c:	200019b8 	.word	0x200019b8

0000d220 <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
    d220:	b430      	push	{r4, r5}
    d222:	4603      	mov	r3, r0
    d224:	460c      	mov	r4, r1
	if (enable) {
    d226:	b19a      	cbz	r2, d250 <mayfly_enable+0x30>
		if (mft[callee_id][caller_id].enable_req ==
    d228:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    d22c:	0108      	lsls	r0, r1, #4
    d22e:	4d14      	ldr	r5, [pc, #80]	; (d280 <mayfly_enable+0x60>)
    d230:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    d234:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    d238:	4429      	add	r1, r5
    d23a:	7a48      	ldrb	r0, [r1, #9]
    d23c:	7a0d      	ldrb	r5, [r1, #8]
    d23e:	42a8      	cmp	r0, r5
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    d240:	bf04      	itt	eq
    d242:	3001      	addeq	r0, #1
    d244:	7208      	strbeq	r0, [r1, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    d246:	4621      	mov	r1, r4
    d248:	4618      	mov	r0, r3

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
    d24a:	bc30      	pop	{r4, r5}
		mayfly_enable_cb(caller_id, callee_id, enable);
    d24c:	f00c bf38 	b.w	1a0c0 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    d250:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    d254:	4d0a      	ldr	r5, [pc, #40]	; (d280 <mayfly_enable+0x60>)
    d256:	0112      	lsls	r2, r2, #4
    d258:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    d25c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    d260:	442b      	add	r3, r5
    d262:	7a9d      	ldrb	r5, [r3, #10]
    d264:	7ada      	ldrb	r2, [r3, #11]
    d266:	42aa      	cmp	r2, r5
    d268:	d001      	beq.n	d26e <mayfly_enable+0x4e>
}
    d26a:	bc30      	pop	{r4, r5}
    d26c:	4770      	bx	lr
			mfp[callee_id] = 1U;
    d26e:	4d05      	ldr	r5, [pc, #20]	; (d284 <mayfly_enable+0x64>)
			mft[callee_id][caller_id].disable_req++;
    d270:	3201      	adds	r2, #1
    d272:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
    d274:	2301      	movs	r3, #1
    d276:	546b      	strb	r3, [r5, r1]
}
    d278:	bc30      	pop	{r4, r5}
			mayfly_pend(caller_id, callee_id);
    d27a:	f00c bf77 	b.w	1a16c <mayfly_pend>
    d27e:	bf00      	nop
    d280:	200019c4 	.word	0x200019c4
    d284:	200019c0 	.word	0x200019c0

0000d288 <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
    d288:	b570      	push	{r4, r5, r6, lr}
    d28a:	461c      	mov	r4, r3
    d28c:	4606      	mov	r6, r0
    d28e:	460d      	mov	r5, r1
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    d290:	b322      	cbz	r2, d2dc <mayfly_enqueue+0x54>
    d292:	7863      	ldrb	r3, [r4, #1]

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    d294:	7822      	ldrb	r2, [r4, #0]
    d296:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
    d298:	f012 0203 	ands.w	r2, r2, #3
    d29c:	d005      	beq.n	d2aa <mayfly_enqueue+0x22>
		if (chain) {
			if (state != 1U) {
    d29e:	2a01      	cmp	r2, #1
    d2a0:	d040      	beq.n	d324 <mayfly_enqueue+0x9c>
				/* mark as ready in queue */
				m->_req = ack + 1;
    d2a2:	3301      	adds	r3, #1
    d2a4:	b2db      	uxtb	r3, r3
    d2a6:	7023      	strb	r3, [r4, #0]

				goto mayfly_enqueue_pend;
    d2a8:	e00f      	b.n	d2ca <mayfly_enqueue+0x42>
		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    d2aa:	2230      	movs	r2, #48	; 0x30
    d2ac:	2104      	movs	r1, #4
    d2ae:	fb12 1105 	smlabb	r1, r2, r5, r1
    d2b2:	220c      	movs	r2, #12
    d2b4:	fb12 1206 	smlabb	r2, r2, r6, r1
	m->_req = ack + 1;
    d2b8:	3301      	adds	r3, #1
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    d2ba:	491b      	ldr	r1, [pc, #108]	; (d328 <mayfly_enqueue+0xa0>)
    d2bc:	6860      	ldr	r0, [r4, #4]
	m->_req = ack + 1;
    d2be:	b2db      	uxtb	r3, r3
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    d2c0:	440a      	add	r2, r1
	m->_req = ack + 1;
    d2c2:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    d2c4:	4621      	mov	r1, r4
    d2c6:	f7ff ff6b 	bl	d1a0 <memq_enqueue>

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
    d2ca:	4b18      	ldr	r3, [pc, #96]	; (d32c <mayfly_enqueue+0xa4>)

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    d2cc:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
    d2ce:	2201      	movs	r2, #1
	mayfly_pend(caller_id, callee_id);
    d2d0:	4629      	mov	r1, r5
	mfp[callee_id] = 1U;
    d2d2:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
    d2d4:	f00c ff4a 	bl	1a16c <mayfly_pend>

	return 0;
    d2d8:	2000      	movs	r0, #0
}
    d2da:	bd70      	pop	{r4, r5, r6, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    d2dc:	f00c ff30 	bl	1a140 <mayfly_prio_is_equal>
    d2e0:	2800      	cmp	r0, #0
    d2e2:	d0d6      	beq.n	d292 <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    d2e4:	4629      	mov	r1, r5
    d2e6:	4630      	mov	r0, r6
    d2e8:	f00c ff0a 	bl	1a100 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    d2ec:	2800      	cmp	r0, #0
    d2ee:	d0d0      	beq.n	d292 <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    d2f0:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    d2f4:	0111      	lsls	r1, r2, #4
    d2f6:	480c      	ldr	r0, [pc, #48]	; (d328 <mayfly_enqueue+0xa0>)
    d2f8:	7863      	ldrb	r3, [r4, #1]
    d2fa:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    d2fe:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    d302:	4402      	add	r2, r0
		!mayfly_is_enabled(caller_id, callee_id) ||
    d304:	7a91      	ldrb	r1, [r2, #10]
    d306:	7ad2      	ldrb	r2, [r2, #11]
    d308:	4291      	cmp	r1, r2
    d30a:	d1c3      	bne.n	d294 <mayfly_enqueue+0xc>
	state = (m->_req - ack) & 0x03;
    d30c:	7822      	ldrb	r2, [r4, #0]
    d30e:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
    d310:	0792      	lsls	r2, r2, #30
    d312:	d002      	beq.n	d31a <mayfly_enqueue+0x92>
		m->_req = ack + 2;
    d314:	3302      	adds	r3, #2
    d316:	b2db      	uxtb	r3, r3
    d318:	7023      	strb	r3, [r4, #0]
		m->fp(m->param);
    d31a:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
    d31e:	4798      	blx	r3
		return 0;
    d320:	2000      	movs	r0, #0
}
    d322:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
    d324:	4610      	mov	r0, r2
}
    d326:	bd70      	pop	{r4, r5, r6, pc}
    d328:	200019c4 	.word	0x200019c4
    d32c:	200019c0 	.word	0x200019c0

0000d330 <mayfly_run>:
{
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
    d330:	494e      	ldr	r1, [pc, #312]	; (d46c <mayfly_run+0x13c>)
    d332:	5c0b      	ldrb	r3, [r1, r0]
    d334:	2b00      	cmp	r3, #0
    d336:	f000 8098 	beq.w	d46a <mayfly_run+0x13a>
{
    d33a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    d33e:	4b4c      	ldr	r3, [pc, #304]	; (d470 <mayfly_run+0x140>)
    d340:	f04f 0b3c 	mov.w	fp, #60	; 0x3c
{
    d344:	b087      	sub	sp, #28
		return;
	}
	mfp[callee_id] = 0U;
    d346:	2200      	movs	r2, #0
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    d348:	fb0b 3b00 	mla	fp, fp, r0, r3
	mfp[callee_id] = 0U;
    d34c:	540a      	strb	r2, [r1, r0]

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
    d34e:	eb00 0740 	add.w	r7, r0, r0, lsl #1
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    d352:	f10b 0104 	add.w	r1, fp, #4
	uint8_t enable = 0U;
    d356:	9203      	str	r2, [sp, #12]
    d358:	eb03 1707 	add.w	r7, r3, r7, lsl #4
	uint8_t disable = 0U;
    d35c:	9201      	str	r2, [sp, #4]
	while (caller_id--) {
    d35e:	f04f 0903 	mov.w	r9, #3
    d362:	4688      	mov	r8, r1
    d364:	9002      	str	r0, [sp, #8]
		memq_link_t *link;
		struct mayfly *m = 0;
    d366:	2300      	movs	r3, #0

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    d368:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
    d36c:	aa05      	add	r2, sp, #20
		struct mayfly *m = 0;
    d36e:	9305      	str	r3, [sp, #20]
		link = memq_peek(mft[callee_id][caller_id].head,
    d370:	f7ff ff1e 	bl	d1b0 <memq_peek>
				 mft[callee_id][caller_id].tail,
				 (void **)&m);
		while (link) {
    d374:	f107 0624 	add.w	r6, r7, #36	; 0x24
    d378:	4683      	mov	fp, r0
    d37a:	2800      	cmp	r0, #0
    d37c:	d034      	beq.n	d3e8 <mayfly_run+0xb8>
#if defined(MAYFLY_UT)
			_state = 0U;
#endif /* MAYFLY_UT */

			/* execute work if ready */
			state = (m->_req - m->_ack) & 0x03;
    d37e:	9c05      	ldr	r4, [sp, #20]
    d380:	7825      	ldrb	r5, [r4, #0]
    d382:	7863      	ldrb	r3, [r4, #1]
    d384:	1aed      	subs	r5, r5, r3
    d386:	f005 0503 	and.w	r5, r5, #3
			if (state == 1U) {
    d38a:	2d01      	cmp	r5, #1
    d38c:	d106      	bne.n	d39c <mayfly_run+0x6c>
#if defined(MAYFLY_UT)
				_state = 1U;
#endif /* MAYFLY_UT */

				/* mark mayfly as ran */
				m->_ack--;
    d38e:	3b01      	subs	r3, #1
    d390:	7063      	strb	r3, [r4, #1]

				/* call the mayfly function */
				m->fp(m->param);
    d392:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
    d396:	4798      	blx	r3
    d398:	9c05      	ldr	r4, [sp, #20]
    d39a:	7863      	ldrb	r3, [r4, #1]
	req = m->_req;
    d39c:	f894 c000 	ldrb.w	ip, [r4]
    d3a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	if (((req - m->_ack) & 0x03) != 1U) {
    d3a2:	ebac 0303 	sub.w	r3, ip, r3
    d3a6:	f003 0303 	and.w	r3, r3, #3
    d3aa:	2b01      	cmp	r3, #1
		memq_dequeue(mft[callee_id][caller_id].tail,
    d3ac:	f04f 0200 	mov.w	r2, #0
    d3b0:	4631      	mov	r1, r6
	req = m->_req;
    d3b2:	fa5f fa8c 	uxtb.w	sl, ip
	if (((req - m->_ack) & 0x03) != 1U) {
    d3b6:	d00d      	beq.n	d3d4 <mayfly_run+0xa4>
		memq_dequeue(mft[callee_id][caller_id].tail,
    d3b8:	f7ff ff02 	bl	d1c0 <memq_dequeue>
		ack = m->_ack;
    d3bc:	7862      	ldrb	r2, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    d3be:	7823      	ldrb	r3, [r4, #0]
		m->_link = link;
    d3c0:	f8c4 b004 	str.w	fp, [r4, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
    d3c4:	1a9b      	subs	r3, r3, r2
    d3c6:	f003 0303 	and.w	r3, r3, #3
    d3ca:	2b01      	cmp	r3, #1
		m->_ack = req;
    d3cc:	f884 a001 	strb.w	sl, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    d3d0:	d044      	beq.n	d45c <mayfly_run+0x12c>
    d3d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28

			/* dequeue if not re-pended */
			dequeue(callee_id, caller_id, link, m);

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].head,
    d3d4:	4601      	mov	r1, r0
    d3d6:	aa05      	add	r2, sp, #20
    d3d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
    d3da:	f7ff fee9 	bl	d1b0 <memq_peek>
 */
#if defined(CONFIG_BT_MAYFLY_YIELD_AFTER_CALL)
			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1U) {
    d3de:	2d01      	cmp	r5, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    d3e0:	4683      	mov	fp, r0
			if (state == 1U) {
    d3e2:	d029      	beq.n	d438 <mayfly_run+0x108>
		while (link) {
    d3e4:	2800      	cmp	r0, #0
    d3e6:	d1ca      	bne.n	d37e <mayfly_run+0x4e>
				}
			}
#endif
		}

		if (mft[callee_id][caller_id].disable_req !=
    d3e8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    d3ec:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
    d3f0:	429a      	cmp	r2, r3
    d3f2:	d003      	beq.n	d3fc <mayfly_run+0xcc>
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1U;

			mft[callee_id][caller_id].disable_ack =
    d3f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			disable = 1U;
    d3f8:	2301      	movs	r3, #1
    d3fa:	9301      	str	r3, [sp, #4]
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
    d3fc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    d400:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
    d404:	429a      	cmp	r2, r3
    d406:	d003      	beq.n	d410 <mayfly_run+0xe0>
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1U;

			mft[callee_id][caller_id].enable_ack =
    d408:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			enable = 1U;
    d40c:	2301      	movs	r3, #1
    d40e:	9303      	str	r3, [sp, #12]
	while (caller_id--) {
    d410:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    d414:	fa5f f989 	uxtb.w	r9, r9
    d418:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    d41c:	f1a7 070c 	sub.w	r7, r7, #12
    d420:	d1a1      	bne.n	d366 <mayfly_run+0x36>
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    d422:	e9dd 3a01 	ldrd	r3, sl, [sp, #4]
    d426:	b1b3      	cbz	r3, d456 <mayfly_run+0x126>
    d428:	9b03      	ldr	r3, [sp, #12]
    d42a:	b9a3      	cbnz	r3, d456 <mayfly_run+0x126>
		mayfly_enable_cb(callee_id, callee_id, 0);
    d42c:	461a      	mov	r2, r3
    d42e:	4651      	mov	r1, sl
    d430:	4650      	mov	r0, sl
    d432:	f00c fe45 	bl	1a0c0 <mayfly_enable_cb>
    d436:	e00e      	b.n	d456 <mayfly_run+0x126>
				if (caller_id || link) {
    d438:	f1b9 0f00 	cmp.w	r9, #0
    d43c:	d101      	bne.n	d442 <mayfly_run+0x112>
    d43e:	2800      	cmp	r0, #0
    d440:	d0d2      	beq.n	d3e8 <mayfly_run+0xb8>
    d442:	f8dd a008 	ldr.w	sl, [sp, #8]
					mfp[callee_id] = 1U;
    d446:	4a09      	ldr	r2, [pc, #36]	; (d46c <mayfly_run+0x13c>)
    d448:	2301      	movs	r3, #1
					mayfly_pend(callee_id, callee_id);
    d44a:	4651      	mov	r1, sl
    d44c:	4650      	mov	r0, sl
					mfp[callee_id] = 1U;
    d44e:	f802 300a 	strb.w	r3, [r2, sl]
					mayfly_pend(callee_id, callee_id);
    d452:	f00c fe8b 	bl	1a16c <mayfly_pend>
	}
}
    d456:	b007      	add	sp, #28
    d458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			m->_ack = ack;
    d45c:	7062      	strb	r2, [r4, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    d45e:	4621      	mov	r1, r4
    d460:	4658      	mov	r0, fp
    d462:	4642      	mov	r2, r8
    d464:	f7ff fe9c 	bl	d1a0 <memq_enqueue>
    d468:	e7b3      	b.n	d3d2 <mayfly_run+0xa2>
    d46a:	4770      	bx	lr
    d46c:	200019c0 	.word	0x200019c0
    d470:	200019c4 	.word	0x200019c4

0000d474 <util_ones_count_get>:
 */
uint8_t util_ones_count_get(uint8_t *octets, uint8_t octets_len)
{
	uint8_t one_count = 0U;

	while (octets_len--) {
    d474:	b1a1      	cbz	r1, d4a0 <util_ones_count_get+0x2c>
    d476:	1e4b      	subs	r3, r1, #1
    d478:	b2db      	uxtb	r3, r3
{
    d47a:	b410      	push	{r4}
    d47c:	1e41      	subs	r1, r0, #1
    d47e:	18c4      	adds	r4, r0, r3
	uint8_t one_count = 0U;
    d480:	2000      	movs	r0, #0
		uint8_t bite;

		bite = *octets;
    d482:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		while (bite) {
    d486:	b13b      	cbz	r3, d498 <util_ones_count_get+0x24>
			bite &= (bite - 1);
    d488:	b25b      	sxtb	r3, r3
    d48a:	1e5a      	subs	r2, r3, #1
    d48c:	4013      	ands	r3, r2
			one_count++;
    d48e:	3001      	adds	r0, #1
		while (bite) {
    d490:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
			one_count++;
    d494:	b2c0      	uxtb	r0, r0
		while (bite) {
    d496:	d1f7      	bne.n	d488 <util_ones_count_get+0x14>
	while (octets_len--) {
    d498:	42a1      	cmp	r1, r4
    d49a:	d1f2      	bne.n	d482 <util_ones_count_get+0xe>
		}
		octets++;
	}

	return one_count;
}
    d49c:	bc10      	pop	{r4}
    d49e:	4770      	bx	lr
	uint8_t one_count = 0U;
    d4a0:	4608      	mov	r0, r1
}
    d4a2:	4770      	bx	lr

0000d4a4 <ticker_worker>:
 *
 * @param param Pointer to ticker instance
 *
 */
void ticker_worker(void *param)
{
    d4a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t ticks_expired;
	uint8_t ticker_id_head;

	/* Defer worker if job running */
	instance->worker_trigger = 1U;
	if (instance->job_guard) {
    d4a8:	7f82      	ldrb	r2, [r0, #30]
{
    d4aa:	b08f      	sub	sp, #60	; 0x3c
	instance->worker_trigger = 1U;
    d4ac:	2301      	movs	r3, #1
	if (instance->job_guard) {
    d4ae:	9206      	str	r2, [sp, #24]
	instance->worker_trigger = 1U;
    d4b0:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    d4b2:	2a00      	cmp	r2, #0
    d4b4:	d15b      	bne.n	d56e <ticker_worker+0xca>
		return;
	}

	/* If no tickers queued (active), do nothing */
	if (instance->ticker_id_head == TICKER_NULL) {
    d4b6:	7f43      	ldrb	r3, [r0, #29]
    d4b8:	2bff      	cmp	r3, #255	; 0xff
    d4ba:	4681      	mov	r9, r0
    d4bc:	d056      	beq.n	d56c <ticker_worker+0xc8>
		instance->worker_trigger = 0U;
		return;
	}

	/* Get ticks elapsed since last job execution */
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    d4be:	f00c f967 	bl	19790 <cntr_cnt_get>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    d4c2:	f8d9 2014 	ldr.w	r2, [r9, #20]
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    d4c6:	f899 301c 	ldrb.w	r3, [r9, #28]
	ticker_id_head = instance->ticker_id_head;
    d4ca:	f899 601d 	ldrb.w	r6, [r9, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    d4ce:	1a80      	subs	r0, r0, r2
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    d4d0:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    d4d2:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    d4d6:	f000 8140 	beq.w	d75a <ticker_worker+0x2b6>
		if (instance->ticks_slot_previous > ticks_elapsed) {
    d4da:	f8d9 3018 	ldr.w	r3, [r9, #24]
	uint8_t slot_reserved = 0;
    d4de:	42bb      	cmp	r3, r7
    d4e0:	bf94      	ite	ls
    d4e2:	2300      	movls	r3, #0
    d4e4:	2301      	movhi	r3, #1
    d4e6:	9303      	str	r3, [sp, #12]
	while (ticker_id_head != TICKER_NULL) {
    d4e8:	2eff      	cmp	r6, #255	; 0xff
	node = &instance->nodes[0];
    d4ea:	f8d9 b000 	ldr.w	fp, [r9]
	ticks_expired = 0U;
    d4ee:	f04f 0800 	mov.w	r8, #0
	while (ticker_id_head != TICKER_NULL) {
    d4f2:	d046      	beq.n	d582 <ticker_worker+0xde>
			must_expire_skip = 1U;
    d4f4:	46c2      	mov	sl, r8
    d4f6:	f8cd 9010 	str.w	r9, [sp, #16]
		ticker = &node[ticker_id_head];
    d4fa:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    d4fe:	eb0b 1406 	add.w	r4, fp, r6, lsl #4
    d502:	0136      	lsls	r6, r6, #4
		ticks_to_expire = ticker->ticks_to_expire;
    d504:	68a1      	ldr	r1, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    d506:	42b9      	cmp	r1, r7
    d508:	d838      	bhi.n	d57c <ticker_worker+0xd8>
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    d50a:	78a2      	ldrb	r2, [r4, #2]
    d50c:	7863      	ldrb	r3, [r4, #1]
		ticker_id_head = ticker->next;
    d50e:	f81b 6006 	ldrb.w	r6, [fp, r6]
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    d512:	1a9b      	subs	r3, r3, r2
    d514:	b2db      	uxtb	r3, r3
    d516:	2b01      	cmp	r3, #1
		ticks_elapsed -= ticks_to_expire;
    d518:	eba7 0701 	sub.w	r7, r7, r1
		ticks_expired += ticks_to_expire;
    d51c:	448a      	add	sl, r1
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    d51e:	d12b      	bne.n	d578 <ticker_worker+0xd4>
		if (ticker->ticks_slot != 0U &&
    d520:	69a5      	ldr	r5, [r4, #24]
    d522:	2d00      	cmp	r5, #0
    d524:	d055      	beq.n	d5d2 <ticker_worker+0x12e>
    d526:	9b03      	ldr	r3, [sp, #12]
    d528:	2b00      	cmp	r3, #0
    d52a:	f000 8092 	beq.w	d652 <ticker_worker+0x1ae>
    d52e:	8be3      	ldrh	r3, [r4, #30]
    d530:	9305      	str	r3, [sp, #20]
			struct ticker_ext *ext_data = ticker->ext_data;
    d532:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			if (ext_data &&
    d534:	b13b      	cbz	r3, d546 <ticker_worker+0xa2>
    d536:	6819      	ldr	r1, [r3, #0]
    d538:	b119      	cbz	r1, d542 <ticker_worker+0x9e>
			    ext_data->ticks_slot_window != 0U &&
    d53a:	7a19      	ldrb	r1, [r3, #8]
    d53c:	2900      	cmp	r1, #0
    d53e:	f000 80fa 	beq.w	d736 <ticker_worker+0x292>
				ext_data->reschedule_state =
    d542:	2100      	movs	r1, #0
    d544:	7219      	strb	r1, [r3, #8]
			ticker->lazy_current++;
    d546:	9905      	ldr	r1, [sp, #20]
			if ((ticker->must_expire == 0U) ||
    d548:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
			ticker->lazy_current++;
    d54c:	3101      	adds	r1, #1
    d54e:	b289      	uxth	r1, r1
    d550:	83e1      	strh	r1, [r4, #30]
			if ((ticker->must_expire == 0U) ||
    d552:	b178      	cbz	r0, d574 <ticker_worker+0xd0>
    d554:	8ba0      	ldrh	r0, [r4, #28]
    d556:	4288      	cmp	r0, r1
    d558:	d20c      	bcs.n	d574 <ticker_worker+0xd0>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
    d55a:	2b00      	cmp	r3, #0
    d55c:	f000 8100 	beq.w	d760 <ticker_worker+0x2bc>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
    d560:	7a19      	ldrb	r1, [r3, #8]
    d562:	2901      	cmp	r1, #1
    d564:	d006      	beq.n	d574 <ticker_worker+0xd0>
			must_expire_skip = 1U;
    d566:	f04f 0e01 	mov.w	lr, #1
    d56a:	e036      	b.n	d5da <ticker_worker+0x136>
		instance->worker_trigger = 0U;
    d56c:	77c2      	strb	r2, [r0, #31]
}
    d56e:	b00f      	add	sp, #60	; 0x3c
    d570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ticker->ack--;
    d574:	3a01      	subs	r2, #1
    d576:	70a2      	strb	r2, [r4, #2]
	while (ticker_id_head != TICKER_NULL) {
    d578:	2eff      	cmp	r6, #255	; 0xff
    d57a:	d1be      	bne.n	d4fa <ticker_worker+0x56>
    d57c:	f8dd 9010 	ldr.w	r9, [sp, #16]
    d580:	46d0      	mov	r8, sl
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    d582:	f899 300b 	ldrb.w	r3, [r9, #11]
    d586:	f899 200a 	ldrb.w	r2, [r9, #10]
    d58a:	429a      	cmp	r2, r3
    d58c:	d10a      	bne.n	d5a4 <ticker_worker+0x100>
	uint8_t idx = *ticks_elapsed_index + 1;
    d58e:	3201      	adds	r2, #1
    d590:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
    d592:	2a02      	cmp	r2, #2
    d594:	bf1c      	itt	ne
    d596:	4613      	movne	r3, r2
    d598:	9306      	strne	r3, [sp, #24]
	*ticks_elapsed_index = idx;
    d59a:	9a06      	ldr	r2, [sp, #24]
    d59c:	f889 200b 	strb.w	r2, [r9, #11]
    d5a0:	bf08      	it	eq
    d5a2:	2300      	moveq	r3, #0
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    d5a4:	eb09 0383 	add.w	r3, r9, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    d5a8:	f8d9 4024 	ldr.w	r4, [r9, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    d5ac:	f8c3 800c 	str.w	r8, [r3, #12]
	instance->worker_trigger = 0U;
    d5b0:	2200      	movs	r2, #0
    d5b2:	f889 201f 	strb.w	r2, [r9, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    d5b6:	464b      	mov	r3, r9
    d5b8:	2201      	movs	r2, #1
    d5ba:	2104      	movs	r1, #4
    d5bc:	2003      	movs	r0, #3
    d5be:	46a4      	mov	ip, r4
}
    d5c0:	b00f      	add	sp, #60	; 0x3c
    d5c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    d5c6:	4760      	bx	ip
    d5c8:	e9dd 7a0b 	ldrd	r7, sl, [sp, #44]	; 0x2c
    d5cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    d5ce:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    d5d0:	4644      	mov	r4, r8
		if (ticker->ext_data) {
    d5d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d5d4:	b1f3      	cbz	r3, d614 <ticker_worker+0x170>
    d5d6:	f04f 0e00 	mov.w	lr, #0
			ticker->ext_data->ticks_drift = 0U;
    d5da:	2100      	movs	r1, #0
			ticker->ext_data->reschedule_state =
    d5dc:	7219      	strb	r1, [r3, #8]
		if (ticker->timeout_func) {
    d5de:	68e5      	ldr	r5, [r4, #12]
			ticker->ext_data->ticks_drift = 0U;
    d5e0:	6059      	str	r1, [r3, #4]
		ticker->ack--;
    d5e2:	3a01      	subs	r2, #1
    d5e4:	70a2      	strb	r2, [r4, #2]
		if (ticker->timeout_func) {
    d5e6:	2d00      	cmp	r5, #0
    d5e8:	d0c6      	beq.n	d578 <ticker_worker+0xd4>
					   ticks_expired -
    d5ea:	9b04      	ldr	r3, [sp, #16]
    d5ec:	6962      	ldr	r2, [r4, #20]
    d5ee:	6958      	ldr	r0, [r3, #20]
			ticker->timeout_func(ticks_at_expire,
    d5f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
    d5f2:	f894 c003 	ldrb.w	ip, [r4, #3]
    d5f6:	6923      	ldr	r3, [r4, #16]
					   ticks_expired -
    d5f8:	ebaa 0202 	sub.w	r2, sl, r2
    d5fc:	4410      	add	r0, r2
			ticks_at_expire = (instance->ticks_current +
    d5fe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
    d602:	f1be 0f00 	cmp.w	lr, #0
    d606:	d016      	beq.n	d636 <ticker_worker+0x192>
    d608:	9300      	str	r3, [sp, #0]
    d60a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d60e:	4663      	mov	r3, ip
    d610:	47a8      	blx	r5
			if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    d612:	e7b1      	b.n	d578 <ticker_worker+0xd4>
		if (ticker->timeout_func) {
    d614:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
    d616:	3a01      	subs	r2, #1
    d618:	70a2      	strb	r2, [r4, #2]
		if (ticker->timeout_func) {
    d61a:	2d00      	cmp	r5, #0
    d61c:	d0ac      	beq.n	d578 <ticker_worker+0xd4>
					   ticks_expired -
    d61e:	9b04      	ldr	r3, [sp, #16]
    d620:	6962      	ldr	r2, [r4, #20]
    d622:	6958      	ldr	r0, [r3, #20]
			ticker->timeout_func(ticks_at_expire,
    d624:	6a61      	ldr	r1, [r4, #36]	; 0x24
    d626:	f894 c003 	ldrb.w	ip, [r4, #3]
    d62a:	6923      	ldr	r3, [r4, #16]
					   ticks_expired -
    d62c:	ebaa 0202 	sub.w	r2, sl, r2
    d630:	4410      	add	r0, r2
			ticks_at_expire = (instance->ticks_current +
    d632:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
    d636:	8be2      	ldrh	r2, [r4, #30]
    d638:	9300      	str	r3, [sp, #0]
    d63a:	4663      	mov	r3, ip
    d63c:	47a8      	blx	r5
				if (ticker->ticks_slot != 0U) {
    d63e:	69a2      	ldr	r2, [r4, #24]
				ticker->lazy_current = 0U;
    d640:	2300      	movs	r3, #0
					slot_reserved = 1U;
    d642:	429a      	cmp	r2, r3
    d644:	9a03      	ldr	r2, [sp, #12]
				ticker->lazy_current = 0U;
    d646:	83e3      	strh	r3, [r4, #30]
					slot_reserved = 1U;
    d648:	bf18      	it	ne
    d64a:	2201      	movne	r2, #1
    d64c:	9203      	str	r2, [sp, #12]
				ticker->force = 0U;
    d64e:	70e3      	strb	r3, [r4, #3]
				if (ticker->ticks_slot != 0U) {
    d650:	e792      	b.n	d578 <ticker_worker+0xd4>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
    d652:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
    d656:	9307      	str	r3, [sp, #28]
    d658:	3380      	adds	r3, #128	; 0x80
    d65a:	d0ba      	beq.n	d5d2 <ticker_worker+0x12e>
    d65c:	2eff      	cmp	r6, #255	; 0xff
    d65e:	d0b8      	beq.n	d5d2 <ticker_worker+0x12e>
		int32_t lazy_current = ticker->lazy_current;
    d660:	8be3      	ldrh	r3, [r4, #30]
		if (lazy_current >= ticker->lazy_periodic) {
    d662:	f8b4 c01c 	ldrh.w	ip, [r4, #28]
		uint32_t current_age = ticker->ticks_periodic +
    d666:	6861      	ldr	r1, [r4, #4]
				(lazy_current - ticker->priority);
    d668:	9807      	ldr	r0, [sp, #28]
		int32_t lazy_current = ticker->lazy_current;
    d66a:	9305      	str	r3, [sp, #20]
		if (lazy_current >= ticker->lazy_periodic) {
    d66c:	4563      	cmp	r3, ip
			lazy_current -= ticker->lazy_periodic;
    d66e:	bf28      	it	cs
    d670:	eba3 030c 	subcs.w	r3, r3, ip
				(lazy_current - ticker->priority);
    d674:	1a18      	subs	r0, r3, r0
		uint32_t current_age = ticker->ticks_periodic +
    d676:	fb03 1301 	mla	r3, r3, r1, r1
    d67a:	9308      	str	r3, [sp, #32]
		uint32_t acc_ticks_to_expire = 0U;
    d67c:	e9cd 7a0b 	strd	r7, sl, [sp, #44]	; 0x2c
				(lazy_current - ticker->priority);
    d680:	9009      	str	r0, [sp, #36]	; 0x24
		uint32_t current_age = ticker->ticks_periodic +
    d682:	4633      	mov	r3, r6
		uint32_t acc_ticks_to_expire = 0U;
    d684:	f04f 0c00 	mov.w	ip, #0
    d688:	920a      	str	r2, [sp, #40]	; 0x28
    d68a:	46a0      	mov	r8, r4
    d68c:	960d      	str	r6, [sp, #52]	; 0x34
    d68e:	9102      	str	r1, [sp, #8]
    d690:	e02c      	b.n	d6ec <ticker_worker+0x248>
				(ticker->ticks_periodic == 0U) ||
    d692:	9c02      	ldr	r4, [sp, #8]
					  0U :
    d694:	eba9 0e0e 	sub.w	lr, r9, lr
				(ticker->ticks_periodic == 0U) ||
    d698:	2c00      	cmp	r4, #0
    d69a:	d047      	beq.n	d72c <ticker_worker+0x288>
    d69c:	9c08      	ldr	r4, [sp, #32]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
    d69e:	fb09 ee06 	mla	lr, r9, r6, lr
				(ticker->ticks_periodic == 0U) ||
    d6a2:	4574      	cmp	r4, lr
    d6a4:	bf8c      	ite	hi
    d6a6:	f04f 0e01 	movhi.w	lr, #1
    d6aa:	f04f 0e00 	movls.w	lr, #0
					(ticker->ticks_periodic != 0U) &&
    d6ae:	bf34      	ite	cc
    d6b0:	f04f 0901 	movcc.w	r9, #1
    d6b4:	f04f 0900 	movcs.w	r9, #0
			if (!lazy_next_periodic_skip &&
    d6b8:	4281      	cmp	r1, r0
			uint8_t next_force = (ticker_next->force > ticker->force);
    d6ba:	f892 a003 	ldrb.w	sl, [r2, #3]
    d6be:	f898 2003 	ldrb.w	r2, [r8, #3]
			if (!lazy_next_periodic_skip &&
    d6c2:	d30e      	bcc.n	d6e2 <ticker_worker+0x23e>
    d6c4:	4592      	cmp	sl, r2
    d6c6:	d842      	bhi.n	d74e <ticker_worker+0x2aa>
			    (next_force ||
    d6c8:	f117 0f80 	cmn.w	r7, #128	; 0x80
    d6cc:	d03f      	beq.n	d74e <ticker_worker+0x2aa>
			     next_is_critical ||
    d6ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
				(lazy_next - ticker_next->priority) >
    d6d0:	1bf6      	subs	r6, r6, r7
			     next_is_critical ||
    d6d2:	4296      	cmp	r6, r2
    d6d4:	dd02      	ble.n	d6dc <ticker_worker+0x238>
			     (next_has_priority && !current_is_older) ||
    d6d6:	f1be 0f00 	cmp.w	lr, #0
    d6da:	d038      	beq.n	d74e <ticker_worker+0x2aa>
    d6dc:	9a07      	ldr	r2, [sp, #28]
    d6de:	42ba      	cmp	r2, r7
    d6e0:	d032      	beq.n	d748 <ticker_worker+0x2a4>
			id_head = ticker_next->next;
    d6e2:	f81b 3003 	ldrb.w	r3, [fp, r3]
		while (id_head != TICKER_NULL) {
    d6e6:	2bff      	cmp	r3, #255	; 0xff
    d6e8:	f43f af6e 	beq.w	d5c8 <ticker_worker+0x124>
			struct ticker_node *ticker_next = &nodes[id_head];
    d6ec:	b21b      	sxth	r3, r3
    d6ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    d6f2:	eb0b 1203 	add.w	r2, fp, r3, lsl #4
    d6f6:	011b      	lsls	r3, r3, #4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
    d6f8:	f8d2 e008 	ldr.w	lr, [r2, #8]
    d6fc:	44f4      	add	ip, lr
			if (acc_ticks_to_expire > ticker->ticks_slot) {
    d6fe:	4565      	cmp	r5, ip
    d700:	f4ff af62 	bcc.w	d5c8 <ticker_worker+0x124>
			if (ticker_next->ticks_slot == 0U) {
    d704:	6991      	ldr	r1, [r2, #24]
    d706:	2900      	cmp	r1, #0
    d708:	d0eb      	beq.n	d6e2 <ticker_worker+0x23e>
			int32_t lazy_next = ticker_next->lazy_current;
    d70a:	8bd1      	ldrh	r1, [r2, #30]
				ticker_next->lazy_periodic > lazy_next;
    d70c:	8b90      	ldrh	r0, [r2, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
    d70e:	f8d2 9004 	ldr.w	r9, [r2, #4]
				ticker_next->priority;
    d712:	f992 702d 	ldrsb.w	r7, [r2, #45]	; 0x2d
			if (!lazy_next_periodic_skip) {
    d716:	4281      	cmp	r1, r0
			int32_t lazy_next = ticker_next->lazy_current;
    d718:	460e      	mov	r6, r1
				lazy_next -= ticker_next->lazy_periodic;
    d71a:	bf28      	it	cs
    d71c:	1a0e      	subcs	r6, r1, r0
					  0U :
    d71e:	f1b9 0f00 	cmp.w	r9, #0
    d722:	d1b6      	bne.n	d692 <ticker_worker+0x1ee>
				(ticker->ticks_periodic == 0U) ||
    d724:	9c02      	ldr	r4, [sp, #8]
					  0U :
    d726:	46ce      	mov	lr, r9
				(ticker->ticks_periodic == 0U) ||
    d728:	2c00      	cmp	r4, #0
    d72a:	d1b7      	bne.n	d69c <ticker_worker+0x1f8>
					(ticker->ticks_periodic != 0U) &&
    d72c:	f8dd 9008 	ldr.w	r9, [sp, #8]
				(ticker->ticks_periodic == 0U) ||
    d730:	f04f 0e01 	mov.w	lr, #1
    d734:	e7c0      	b.n	d6b8 <ticker_worker+0x214>
			    TICKER_RESCHEDULE_STATE_NONE &&
    d736:	8ba1      	ldrh	r1, [r4, #28]
    d738:	9805      	ldr	r0, [sp, #20]
    d73a:	4281      	cmp	r1, r0
    d73c:	f63f af01 	bhi.w	d542 <ticker_worker+0x9e>
				ext_data->reschedule_state =
    d740:	f04f 0101 	mov.w	r1, #1
    d744:	7219      	strb	r1, [r3, #8]
    d746:	e6fe      	b.n	d546 <ticker_worker+0xa2>
			     (equal_priority && next_is_older))) {
    d748:	f1b9 0f00 	cmp.w	r9, #0
    d74c:	d0c9      	beq.n	d6e2 <ticker_worker+0x23e>
    d74e:	e9dd 7a0b 	ldrd	r7, sl, [sp, #44]	; 0x2c
    d752:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    d754:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    d756:	4644      	mov	r4, r8
    d758:	e6eb      	b.n	d532 <ticker_worker+0x8e>
	uint8_t slot_reserved = 0;
    d75a:	9b06      	ldr	r3, [sp, #24]
    d75c:	9303      	str	r3, [sp, #12]
    d75e:	e6c3      	b.n	d4e8 <ticker_worker+0x44>
		if (ticker->timeout_func) {
    d760:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
    d762:	3a01      	subs	r2, #1
    d764:	70a2      	strb	r2, [r4, #2]
		if (ticker->timeout_func) {
    d766:	2d00      	cmp	r5, #0
    d768:	f43f af06 	beq.w	d578 <ticker_worker+0xd4>
					   ticks_expired -
    d76c:	9b04      	ldr	r3, [sp, #16]
    d76e:	6960      	ldr	r0, [r4, #20]
    d770:	695a      	ldr	r2, [r3, #20]
			ticker->timeout_func(ticks_at_expire,
    d772:	6a61      	ldr	r1, [r4, #36]	; 0x24
    d774:	f894 c003 	ldrb.w	ip, [r4, #3]
    d778:	6923      	ldr	r3, [r4, #16]
					   ticks_expired -
    d77a:	ebaa 0000 	sub.w	r0, sl, r0
    d77e:	4410      	add	r0, r2
			ticks_at_expire = (instance->ticks_current +
    d780:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
    d784:	e740      	b.n	d608 <ticker_worker+0x164>
    d786:	bf00      	nop

0000d788 <ticker_job>:
	if (instance->worker_trigger) {
    d788:	7fc3      	ldrb	r3, [r0, #31]
    d78a:	2b00      	cmp	r3, #0
    d78c:	f040 86c9 	bne.w	e522 <ticker_job+0xd9a>
{
    d790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
    d794:	7f82      	ldrb	r2, [r0, #30]
{
    d796:	b08f      	sub	sp, #60	; 0x3c
    d798:	4683      	mov	fp, r0
	if (instance->job_guard) {
    d79a:	2a00      	cmp	r2, #0
    d79c:	f040 80a5 	bne.w	d8ea <ticker_job+0x162>
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    d7a0:	7a82      	ldrb	r2, [r0, #10]
    d7a2:	7ac1      	ldrb	r1, [r0, #11]
	ticks_previous = instance->ticks_current;
    d7a4:	6940      	ldr	r0, [r0, #20]
    d7a6:	9007      	str	r0, [sp, #28]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    d7a8:	4291      	cmp	r1, r2
	instance->job_guard = 1U;
    d7aa:	f04f 0001 	mov.w	r0, #1
    d7ae:	f88b 001e 	strb.w	r0, [fp, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    d7b2:	f000 86e0 	beq.w	e576 <ticker_job+0xdee>
	uint8_t idx = *ticks_elapsed_index + 1;
    d7b6:	4402      	add	r2, r0
    d7b8:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
    d7ba:	2a02      	cmp	r2, #2
    d7bc:	bf12      	itee	ne
    d7be:	4611      	movne	r1, r2
    d7c0:	4619      	moveq	r1, r3
		idx = 0U;
    d7c2:	461a      	moveq	r2, r3
		ticks_elapsed =
    d7c4:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
	*ticks_elapsed_index = idx;
    d7c8:	f88b 200a 	strb.w	r2, [fp, #10]
		ticks_elapsed =
    d7cc:	68ca      	ldr	r2, [r1, #12]
		instance->ticks_current += ticks_elapsed;
    d7ce:	9907      	ldr	r1, [sp, #28]
		ticks_elapsed =
    d7d0:	9202      	str	r2, [sp, #8]
		instance->ticks_current += ticks_elapsed;
    d7d2:	188a      	adds	r2, r1, r2
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
    d7d4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    d7d8:	f8cb 2014 	str.w	r2, [fp, #20]
		flag_elapsed = 1U;
    d7dc:	2201      	movs	r2, #1
    d7de:	920d      	str	r2, [sp, #52]	; 0x34
	count_user = instance->count_user;
    d7e0:	f89b 2009 	ldrb.w	r2, [fp, #9]
	ticker_id_old_head = instance->ticker_id_head;
    d7e4:	f89b 101d 	ldrb.w	r1, [fp, #29]
    d7e8:	910a      	str	r1, [sp, #40]	; 0x28
	node = &instance->nodes[0];
    d7ea:	f8db 1000 	ldr.w	r1, [fp]
	users = &instance->users[0];
    d7ee:	f8db 0004 	ldr.w	r0, [fp, #4]
	count_user = instance->count_user;
    d7f2:	9206      	str	r2, [sp, #24]
	node = &instance->nodes[0];
    d7f4:	9104      	str	r1, [sp, #16]
	while (count_user--) {
    d7f6:	4611      	mov	r1, r2
    d7f8:	3a01      	subs	r2, #1
	users = &instance->users[0];
    d7fa:	900b      	str	r0, [sp, #44]	; 0x2c
	while (count_user--) {
    d7fc:	b2d2      	uxtb	r2, r2
    d7fe:	2900      	cmp	r1, #0
    d800:	f000 8292 	beq.w	dd28 <ticker_job+0x5a0>
	pending = 0U;
    d804:	2300      	movs	r3, #0
    d806:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
    d80a:	9309      	str	r3, [sp, #36]	; 0x24
	insert_head = TICKER_NULL;
    d80c:	23ff      	movs	r3, #255	; 0xff
    d80e:	9301      	str	r3, [sp, #4]
    d810:	4637      	mov	r7, r6
    d812:	46d9      	mov	r9, fp
		user_ops = &user->user_op[0];
    d814:	687b      	ldr	r3, [r7, #4]
    d816:	9305      	str	r3, [sp, #20]
		while (user->middle != user->last) {
    d818:	f897 c003 	ldrb.w	ip, [r7, #3]
    d81c:	78bb      	ldrb	r3, [r7, #2]
    d81e:	46ba      	mov	sl, r7
    d820:	9905      	ldr	r1, [sp, #20]
					ticks_used = 0;
    d822:	4698      	mov	r8, r3
			user_op = &user_ops[user->middle];
    d824:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    d828:	eb03 0282 	add.w	r2, r3, r2, lsl #2
			middle = user->middle + 1;
    d82c:	1c58      	adds	r0, r3, #1
		while (user->middle != user->last) {
    d82e:	4563      	cmp	r3, ip
			user_op = &user_ops[user->middle];
    d830:	eb01 0582 	add.w	r5, r1, r2, lsl #2
			middle = user->middle + 1;
    d834:	b2c3      	uxtb	r3, r0
		while (user->middle != user->last) {
    d836:	f000 815f 	beq.w	daf8 <ticker_job+0x370>
			if (middle == user->count_user_op) {
    d83a:	f89a 0000 	ldrb.w	r0, [sl]
				middle = 0U;
    d83e:	4298      	cmp	r0, r3
    d840:	bf08      	it	eq
    d842:	2300      	moveq	r3, #0
			user->middle = middle;
    d844:	f88a 3002 	strb.w	r3, [sl, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    d848:	f811 2022 	ldrb.w	r2, [r1, r2, lsl #2]
    d84c:	2a04      	cmp	r2, #4
    d84e:	f240 8151 	bls.w	daf4 <ticker_job+0x36c>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    d852:	2a07      	cmp	r2, #7
    d854:	f200 813f 	bhi.w	dad6 <ticker_job+0x34e>
			ticker = &node[user_op->id];
    d858:	7869      	ldrb	r1, [r5, #1]
    d85a:	9c04      	ldr	r4, [sp, #16]
    d85c:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    d860:	eb04 1400 	add.w	r4, r4, r0, lsl #4
    d864:	0100      	lsls	r0, r0, #4
			state = (ticker->req - ticker->ack) & 0xff;
    d866:	78a7      	ldrb	r7, [r4, #2]
			ticker = &node[user_op->id];
    d868:	9006      	str	r0, [sp, #24]
			state = (ticker->req - ticker->ack) & 0xff;
    d86a:	7860      	ldrb	r0, [r4, #1]
    d86c:	1bc0      	subs	r0, r0, r7
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    d86e:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    d872:	f000 8130 	beq.w	dad6 <ticker_job+0x34e>
			    (state == 0U) ||
    d876:	2a05      	cmp	r2, #5
    d878:	f000 8118 	beq.w	daac <ticker_job+0x324>
			if (state == 1U) {
    d87c:	2801      	cmp	r0, #1
    d87e:	f040 814f 	bne.w	db20 <ticker_job+0x398>
	previous = instance->ticker_id_head;
    d882:	f899 c01d 	ldrb.w	ip, [r9, #29]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    d886:	f8d9 6000 	ldr.w	r6, [r9]
	while (current != TICKER_NULL) {
    d88a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    d88e:	d016      	beq.n	d8be <ticker_job+0x136>
		ticker_current = &node[current];
    d890:	eb0c 004c 	add.w	r0, ip, ip, lsl #1
		if (current == id) {
    d894:	4561      	cmp	r1, ip
		ticker_current = &node[current];
    d896:	eb06 1000 	add.w	r0, r6, r0, lsl #4
		if (current == id) {
    d89a:	d064      	beq.n	d966 <ticker_job+0x1de>
	total = 0U;
    d89c:	2300      	movs	r3, #0
    d89e:	e001      	b.n	d8a4 <ticker_job+0x11c>
		if (current == id) {
    d8a0:	4561      	cmp	r1, ip
    d8a2:	d045      	beq.n	d930 <ticker_job+0x1a8>
		total += ticker_current->ticks_to_expire;
    d8a4:	46e6      	mov	lr, ip
		current = ticker_current->next;
    d8a6:	f890 c000 	ldrb.w	ip, [r0]
		total += ticker_current->ticks_to_expire;
    d8aa:	f8d0 8008 	ldr.w	r8, [r0, #8]
	while (current != TICKER_NULL) {
    d8ae:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
		ticker_current = &node[current];
    d8b2:	eb0c 004c 	add.w	r0, ip, ip, lsl #1
		total += ticker_current->ticks_to_expire;
    d8b6:	4443      	add	r3, r8
		ticker_current = &node[current];
    d8b8:	eb06 1000 	add.w	r0, r6, r0, lsl #4
	while (current != TICKER_NULL) {
    d8bc:	d1f0      	bne.n	d8a0 <ticker_job+0x118>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    d8be:	2600      	movs	r6, #0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    d8c0:	2a05      	cmp	r2, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    d8c2:	60a6      	str	r6, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    d8c4:	f000 80e0 	beq.w	da88 <ticker_job+0x300>
		ticker->req = ticker->ack;
    d8c8:	7067      	strb	r7, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    d8ca:	f899 301c 	ldrb.w	r3, [r9, #28]
    d8ce:	428b      	cmp	r3, r1
    d8d0:	d016      	beq.n	d900 <ticker_job+0x178>
	if (user_op->fp_op_func) {
    d8d2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    d8d4:	2000      	movs	r0, #0
    d8d6:	7028      	strb	r0, [r5, #0]
	user_op->status = status;
    d8d8:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    d8da:	b10b      	cbz	r3, d8e0 <ticker_job+0x158>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    d8dc:	6b29      	ldr	r1, [r5, #48]	; 0x30
    d8de:	4798      	blx	r3
    d8e0:	f89a c003 	ldrb.w	ip, [sl, #3]
    d8e4:	f89a 3002 	ldrb.w	r3, [sl, #2]
    d8e8:	e79a      	b.n	d820 <ticker_job+0x98>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_JOB, 1,
    d8ea:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    d8ee:	2104      	movs	r1, #4
    d8f0:	4608      	mov	r0, r1
    d8f2:	465b      	mov	r3, fp
    d8f4:	2201      	movs	r2, #1
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    d8f6:	46a4      	mov	ip, r4
}
    d8f8:	b00f      	add	sp, #60	; 0x3c
    d8fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    d8fe:	4760      	bx	ip
			instance->ticker_id_slot_previous = TICKER_NULL;
    d900:	23ff      	movs	r3, #255	; 0xff
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
    d902:	2a07      	cmp	r2, #7
			instance->ticker_id_slot_previous = TICKER_NULL;
    d904:	f889 301c 	strb.w	r3, [r9, #28]
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
    d908:	f040 8107 	bne.w	db1a <ticker_job+0x392>
				ticks_at_stop =
    d90c:	6868      	ldr	r0, [r5, #4]
			ticks_current = instance->ticks_current;
    d90e:	f8d9 2014 	ldr.w	r2, [r9, #20]
			if (!((ticks_at_stop - ticks_current) &
    d912:	1a83      	subs	r3, r0, r2
    d914:	021c      	lsls	r4, r3, #8
    d916:	f100 80f7 	bmi.w	db08 <ticker_job+0x380>
				ticks_used = ticks_elapsed +
    d91a:	9a02      	ldr	r2, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    d91c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
    d920:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
    d922:	f8d9 2018 	ldr.w	r2, [r9, #24]
    d926:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
    d928:	bf88      	it	hi
    d92a:	f8c9 3018 	strhi.w	r3, [r9, #24]
    d92e:	e7d0      	b.n	d8d2 <ticker_job+0x14a>
	if (previous == current) {
    d930:	eb0e 074e 	add.w	r7, lr, lr, lsl #1
    d934:	4571      	cmp	r1, lr
    d936:	eb06 1707 	add.w	r7, r6, r7, lsl #4
    d93a:	d016      	beq.n	d96a <ticker_job+0x1e2>
	node[previous].next = ticker_current->next;
    d93c:	7801      	ldrb	r1, [r0, #0]
	timeout = ticker_current->ticks_to_expire;
    d93e:	f8d0 c008 	ldr.w	ip, [r0, #8]
	node[previous].next = ticker_current->next;
    d942:	7039      	strb	r1, [r7, #0]
	if (ticker_current->next != TICKER_NULL) {
    d944:	29ff      	cmp	r1, #255	; 0xff
    d946:	d006      	beq.n	d956 <ticker_job+0x1ce>
		node[ticker_current->next].ticks_to_expire += timeout;
    d948:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    d94c:	eb06 1101 	add.w	r1, r6, r1, lsl #4
    d950:	6888      	ldr	r0, [r1, #8]
    d952:	4460      	add	r0, ip
    d954:	6088      	str	r0, [r1, #8]
	return (total + timeout);
    d956:	eb0c 0603 	add.w	r6, ip, r3
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    d95a:	2a05      	cmp	r2, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    d95c:	60a6      	str	r6, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    d95e:	d009      	beq.n	d974 <ticker_job+0x1ec>
    d960:	78a7      	ldrb	r7, [r4, #2]
    d962:	7869      	ldrb	r1, [r5, #1]
    d964:	e7b0      	b.n	d8c8 <ticker_job+0x140>
		if (current == id) {
    d966:	4607      	mov	r7, r0
	total = 0U;
    d968:	2300      	movs	r3, #0
		instance->ticker_id_head = ticker_current->next;
    d96a:	7802      	ldrb	r2, [r0, #0]
    d96c:	f889 201d 	strb.w	r2, [r9, #29]
    d970:	782a      	ldrb	r2, [r5, #0]
    d972:	e7e3      	b.n	d93c <ticker_job+0x1b4>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    d974:	f8d9 7014 	ldr.w	r7, [r9, #20]
    d978:	9703      	str	r7, [sp, #12]
	ticks_now = cntr_cnt_get();
    d97a:	f00b ff09 	bl	19790 <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    d97e:	9b02      	ldr	r3, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    d980:	eba0 0c07 	sub.w	ip, r0, r7
    d984:	f02c 477f 	bic.w	r7, ip, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    d988:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_elapsed) {
    d98a:	429e      	cmp	r6, r3
	ticks_now = cntr_cnt_get();
    d98c:	4680      	mov	r8, r0
	if (ticks_to_expire > ticks_elapsed) {
    d98e:	f240 8087 	bls.w	daa0 <ticker_job+0x318>
		ticks_to_expire -= ticks_elapsed;
    d992:	6962      	ldr	r2, [r4, #20]
    d994:	1af3      	subs	r3, r6, r3
	if ((ticker->ticks_periodic != 0U) &&
    d996:	6866      	ldr	r6, [r4, #4]
    d998:	2e00      	cmp	r6, #0
    d99a:	d032      	beq.n	da02 <ticker_job+0x27a>
	    (user_op->params.update.lazy != 0U)) {
    d99c:	8aa8      	ldrh	r0, [r5, #20]
	if ((ticker->ticks_periodic != 0U) &&
    d99e:	b380      	cbz	r0, da02 <ticker_job+0x27a>
		user_op->params.update.lazy--;
    d9a0:	3801      	subs	r0, #1
    d9a2:	b280      	uxth	r0, r0
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    d9a4:	429e      	cmp	r6, r3
    d9a6:	f8b4 b01e 	ldrh.w	fp, [r4, #30]
		user_op->params.update.lazy--;
    d9aa:	82a8      	strh	r0, [r5, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    d9ac:	f080 8197 	bcs.w	dcde <ticker_job+0x556>
    d9b0:	1c71      	adds	r1, r6, #1
    d9b2:	9108      	str	r1, [sp, #32]
    d9b4:	920c      	str	r2, [sp, #48]	; 0x30
    d9b6:	4659      	mov	r1, fp
    d9b8:	e013      	b.n	d9e2 <ticker_job+0x25a>
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
    d9ba:	f100 70e8 	add.w	r0, r0, #30408704	; 0x1d00000
    d9be:	f500 30d4 	add.w	r0, r0, #108544	; 0x1a800
    d9c2:	f8dd e020 	ldr.w	lr, [sp, #32]
    d9c6:	f500 70a5 	add.w	r0, r0, #330	; 0x14a
			ticker->lazy_current--;
    d9ca:	3901      	subs	r1, #1
			ticks_to_expire -= ticker->ticks_periodic +
    d9cc:	eba3 030e 	sub.w	r3, r3, lr
			ticker->lazy_current--;
    d9d0:	b289      	uxth	r1, r1
	ticker->remainder_current -= ticker->remainder_periodic;
    d9d2:	eba0 000b 	sub.w	r0, r0, fp
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    d9d6:	429e      	cmp	r6, r3
			ticker->lazy_current--;
    d9d8:	83e1      	strh	r1, [r4, #30]
	ticker->remainder_current -= ticker->remainder_periodic;
    d9da:	6260      	str	r0, [r4, #36]	; 0x24
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    d9dc:	f080 817c 	bcs.w	dcd8 <ticker_job+0x550>
    d9e0:	8aa8      	ldrh	r0, [r5, #20]
    d9e2:	4288      	cmp	r0, r1
    d9e4:	f080 8329 	bcs.w	e03a <ticker_job+0x8b2>
					   ticker_remainder_dec(ticker);
    d9e8:	e9d4 b008 	ldrd	fp, r0, [r4, #32]
	if ((ticker->remainder_current >= BIT(31)) ||
    d9ec:	f8df e1dc 	ldr.w	lr, [pc, #476]	; dbcc <ticker_job+0x444>
    d9f0:	4a75      	ldr	r2, [pc, #468]	; (dbc8 <ticker_job+0x440>)
    d9f2:	4486      	add	lr, r0
    d9f4:	4596      	cmp	lr, r2
    d9f6:	d8e0      	bhi.n	d9ba <ticker_job+0x232>
    d9f8:	46b6      	mov	lr, r6
    d9fa:	e7e6      	b.n	d9ca <ticker_job+0x242>
    d9fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d9fe:	83e1      	strh	r1, [r4, #30]
		ticker->lazy_periodic = user_op->params.update.lazy;
    da00:	83a0      	strh	r0, [r4, #28]
				user_op->params.update.ticks_drift_minus;
    da02:	e9d5 0e01 	ldrd	r0, lr, [r5, #4]
	struct ticker_ext *ext_data = ticker->ext_data;
    da06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
	ticker->ticks_to_expire = ticks_to_expire +
    da08:	4403      	add	r3, r0
	ticker->ticks_to_expire_minus +=
    da0a:	4472      	add	r2, lr
	ticker->ticks_to_expire = ticks_to_expire +
    da0c:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus +=
    da0e:	6162      	str	r2, [r4, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
    da10:	b136      	cbz	r6, da20 <ticker_job+0x298>
    da12:	6831      	ldr	r1, [r6, #0]
    da14:	b121      	cbz	r1, da20 <ticker_job+0x298>
			user_op->params.update.ticks_drift_plus -
    da16:	eba0 000e 	sub.w	r0, r0, lr
		ext_data->ticks_drift =
    da1a:	6070      	str	r0, [r6, #4]
    da1c:	68a3      	ldr	r3, [r4, #8]
    da1e:	6962      	ldr	r2, [r4, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    da20:	f41c 0f00 	tst.w	ip, #8388608	; 0x800000
    da24:	d123      	bne.n	da6e <ticker_job+0x2e6>
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    da26:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_to_expire_minus) {
    da28:	4293      	cmp	r3, r2
    da2a:	d92b      	bls.n	da84 <ticker_job+0x2fc>
		ticks_to_expire -= ticks_to_expire_minus;
    da2c:	1a9b      	subs	r3, r3, r2
		ticks_to_expire_minus = 0U;
    da2e:	2200      	movs	r2, #0
	ticker->ticks_to_expire = ticks_to_expire;
    da30:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    da32:	6162      	str	r2, [r4, #20]
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    da34:	68e9      	ldr	r1, [r5, #12]
    da36:	69a3      	ldr	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    da38:	692a      	ldr	r2, [r5, #16]
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    da3a:	440b      	add	r3, r1
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    da3c:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    da3e:	bf88      	it	hi
    da40:	1a9b      	subhi	r3, r3, r2
	if (user_op->params.update.force != 0U) {
    da42:	7daa      	ldrb	r2, [r5, #22]
		ticker->ticks_slot = 0U;
    da44:	bf98      	it	ls
    da46:	2300      	movls	r3, #0
    da48:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0U) {
    da4a:	b102      	cbz	r2, da4e <ticker_job+0x2c6>
		ticker->force = user_op->params.update.force;
    da4c:	70e2      	strb	r2, [r4, #3]
	if (user_op->params.update.must_expire) {
    da4e:	7deb      	ldrb	r3, [r5, #23]
    da50:	b113      	cbz	r3, da58 <ticker_job+0x2d0>
		ticker->must_expire = (user_op->params.update.must_expire - 1);
    da52:	3b01      	subs	r3, #1
    da54:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->next = *insert_head;
    da58:	9b04      	ldr	r3, [sp, #16]
    da5a:	9a06      	ldr	r2, [sp, #24]
    da5c:	4619      	mov	r1, r3
    da5e:	9b01      	ldr	r3, [sp, #4]
    da60:	548b      	strb	r3, [r1, r2]
		ticker->req++;
    da62:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
    da64:	786a      	ldrb	r2, [r5, #1]
    da66:	9201      	str	r2, [sp, #4]
		ticker->req++;
    da68:	3301      	adds	r3, #1
    da6a:	7063      	strb	r3, [r4, #1]
    da6c:	e731      	b.n	d8d2 <ticker_job+0x14a>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    da6e:	9903      	ldr	r1, [sp, #12]
    da70:	eba1 0708 	sub.w	r7, r1, r8
    da74:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    da78:	429f      	cmp	r7, r3
    da7a:	f080 8129 	bcs.w	dcd0 <ticker_job+0x548>
			ticks_to_expire -= delta_current_start;
    da7e:	1bdb      	subs	r3, r3, r7
	if (ticks_to_expire > ticks_to_expire_minus) {
    da80:	4293      	cmp	r3, r2
    da82:	d8d3      	bhi.n	da2c <ticker_job+0x2a4>
    da84:	1ad2      	subs	r2, r2, r3
    da86:	e125      	b.n	dcd4 <ticker_job+0x54c>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    da88:	f8d9 7014 	ldr.w	r7, [r9, #20]
    da8c:	9703      	str	r7, [sp, #12]
	ticks_now = cntr_cnt_get();
    da8e:	f00b fe7f 	bl	19790 <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    da92:	9b02      	ldr	r3, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    da94:	eba0 0c07 	sub.w	ip, r0, r7
    da98:	f02c 477f 	bic.w	r7, ip, #4278190080	; 0xff000000
	ticks_now = cntr_cnt_get();
    da9c:	4680      	mov	r8, r0
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    da9e:	443b      	add	r3, r7
		ticker->ticks_to_expire_minus += ticks_elapsed -
    daa0:	6961      	ldr	r1, [r4, #20]
    daa2:	440b      	add	r3, r1
    daa4:	1b9a      	subs	r2, r3, r6
    daa6:	6162      	str	r2, [r4, #20]
		ticks_to_expire = 0U;
    daa8:	2300      	movs	r3, #0
    daaa:	e774      	b.n	d996 <ticker_job+0x20e>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
    daac:	686e      	ldr	r6, [r5, #4]
    daae:	2e00      	cmp	r6, #0
    dab0:	f47f aee4 	bne.w	d87c <ticker_job+0xf4>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
    dab4:	68ae      	ldr	r6, [r5, #8]
    dab6:	2e00      	cmp	r6, #0
    dab8:	f47f aee0 	bne.w	d87c <ticker_job+0xf4>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
    dabc:	68ee      	ldr	r6, [r5, #12]
    dabe:	2e00      	cmp	r6, #0
    dac0:	f47f aedc 	bne.w	d87c <ticker_job+0xf4>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
    dac4:	692e      	ldr	r6, [r5, #16]
    dac6:	2e00      	cmp	r6, #0
    dac8:	f47f aed8 	bne.w	d87c <ticker_job+0xf4>
			     (user_op->params.update.lazy == 0U) &&
    dacc:	696e      	ldr	r6, [r5, #20]
    dace:	f036 467f 	bics.w	r6, r6, #4278190080	; 0xff000000
    dad2:	f47f aed3 	bne.w	d87c <ticker_job+0xf4>
	if (user_op->fp_op_func) {
    dad6:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    dad8:	2100      	movs	r1, #0
	user_op->status = status;
    dada:	2001      	movs	r0, #1
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    dadc:	7029      	strb	r1, [r5, #0]
	user_op->status = status;
    dade:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    dae0:	2a00      	cmp	r2, #0
    dae2:	f43f ae9d 	beq.w	d820 <ticker_job+0x98>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    dae6:	6b29      	ldr	r1, [r5, #48]	; 0x30
    dae8:	4790      	blx	r2
    daea:	f89a c003 	ldrb.w	ip, [sl, #3]
    daee:	f89a 3002 	ldrb.w	r3, [sl, #2]
    daf2:	e695      	b.n	d820 <ticker_job+0x98>
    daf4:	4698      	mov	r8, r3
    daf6:	e695      	b.n	d824 <ticker_job+0x9c>
	while (count_user--) {
    daf8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    dafa:	4657      	mov	r7, sl
    dafc:	42ba      	cmp	r2, r7
    dafe:	f1a7 0308 	sub.w	r3, r7, #8
    db02:	d01e      	beq.n	db42 <ticker_job+0x3ba>
    db04:	461f      	mov	r7, r3
    db06:	e685      	b.n	d814 <ticker_job+0x8c>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    db08:	1a13      	subs	r3, r2, r0
				if (ticks_elapsed > ticks_used) {
    db0a:	9a02      	ldr	r2, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    db0c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
    db10:	429a      	cmp	r2, r3
					ticks_used = ticks_elapsed -
    db12:	bf8c      	ite	hi
    db14:	1ad3      	subhi	r3, r2, r3
					ticks_used = 0;
    db16:	2300      	movls	r3, #0
    db18:	e703      	b.n	d922 <ticker_job+0x19a>
				ticks_at_stop = cntr_cnt_get();
    db1a:	f00b fe39 	bl	19790 <cntr_cnt_get>
    db1e:	e6f6      	b.n	d90e <ticker_job+0x186>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    db20:	2104      	movs	r1, #4
    db22:	464b      	mov	r3, r9
    db24:	2201      	movs	r2, #1
    db26:	f8d9 4024 	ldr.w	r4, [r9, #36]	; 0x24
    db2a:	4608      	mov	r0, r1
    db2c:	47a0      	blx	r4
	while (count_user--) {
    db2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
				user->middle = prev;
    db30:	f88a 8002 	strb.w	r8, [sl, #2]
    db34:	4657      	mov	r7, sl
				pending = 1U;
    db36:	2301      	movs	r3, #1
	while (count_user--) {
    db38:	42ba      	cmp	r2, r7
				pending = 1U;
    db3a:	9309      	str	r3, [sp, #36]	; 0x24
    db3c:	f1a7 0308 	sub.w	r3, r7, #8
	while (count_user--) {
    db40:	d1e0      	bne.n	db04 <ticker_job+0x37c>
    db42:	f899 c01d 	ldrb.w	ip, [r9, #29]
    db46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    db48:	ebb3 030c 	subs.w	r3, r3, ip
    db4c:	bf18      	it	ne
    db4e:	2301      	movne	r3, #1
    db50:	9306      	str	r3, [sp, #24]
	if (flag_elapsed) {
    db52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    db54:	46cb      	mov	fp, r9
    db56:	2b00      	cmp	r3, #0
    db58:	f040 80ee 	bne.w	dd38 <ticker_job+0x5b0>
	count_user = instance->count_user;
    db5c:	f899 2009 	ldrb.w	r2, [r9, #9]
	node = &instance->nodes[0];
    db60:	f8d9 3000 	ldr.w	r3, [r9]
	users = &instance->users[0];
    db64:	f8d9 1004 	ldr.w	r1, [r9, #4]
	node = &instance->nodes[0];
    db68:	9304      	str	r3, [sp, #16]
	while (count_user--) {
    db6a:	1e53      	subs	r3, r2, #1
	users = &instance->users[0];
    db6c:	9107      	str	r1, [sp, #28]
	while (count_user--) {
    db6e:	b2db      	uxtb	r3, r3
    db70:	2a00      	cmp	r2, #0
    db72:	f000 82e9 	beq.w	e148 <ticker_job+0x9c0>
    db76:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    db7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    db7c:	9303      	str	r3, [sp, #12]
		user_ops = (void *)&user->user_op[0];
    db7e:	f8d8 3004 	ldr.w	r3, [r8, #4]
		user_ops_first = user->first;
    db82:	f898 6001 	ldrb.w	r6, [r8, #1]
		user_ops = (void *)&user->user_op[0];
    db86:	9305      	str	r3, [sp, #20]
		while ((insert_head != TICKER_NULL) ||
    db88:	9b01      	ldr	r3, [sp, #4]
    db8a:	2bff      	cmp	r3, #255	; 0xff
    db8c:	d064      	beq.n	dc58 <ticker_job+0x4d0>
				ticker = &node[id_insert];
    db8e:	f8dd a004 	ldr.w	sl, [sp, #4]
    db92:	9b04      	ldr	r3, [sp, #16]
    db94:	fa0f f48a 	sxth.w	r4, sl
    db98:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    db9c:	ea4f 1c04 	mov.w	ip, r4, lsl #4
    dba0:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				insert_head = ticker->next;
    dba4:	f813 300c 	ldrb.w	r3, [r3, ip]
    dba8:	9301      	str	r3, [sp, #4]
				user_op = NULL;
    dbaa:	2500      	movs	r5, #0
	ticker->next = TICKER_NULL;
    dbac:	22ff      	movs	r2, #255	; 0xff
    dbae:	7022      	strb	r2, [r4, #0]
	(void)ticker_enqueue(instance, id_insert);
    dbb0:	f8db 7000 	ldr.w	r7, [fp]
	current = instance->ticker_id_head;
    dbb4:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticker_new = &node[id];
    dbb8:	eb07 000c 	add.w	r0, r7, ip
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    dbbc:	4293      	cmp	r3, r2
	ticks_to_expire = ticker_new->ticks_to_expire;
    dbbe:	6881      	ldr	r1, [r0, #8]
	previous = TICKER_NULL;
    dbc0:	bf18      	it	ne
    dbc2:	9202      	strne	r2, [sp, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    dbc4:	d116      	bne.n	dbf4 <ticker_job+0x46c>
    dbc6:	e3ec      	b.n	e3a2 <ticker_job+0xc1a>
    dbc8:	7f172b59 	.word	0x7f172b59
    dbcc:	ff172b5a 	.word	0xff172b5a
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
    dbd0:	ebb1 010c 	subs.w	r1, r1, ip
    dbd4:	d106      	bne.n	dbe4 <ticker_job+0x45c>
    dbd6:	f8be e01e 	ldrh.w	lr, [lr, #30]
    dbda:	f8b0 901e 	ldrh.w	r9, [r0, #30]
    dbde:	45f1      	cmp	r9, lr
    dbe0:	f200 842d 	bhi.w	e43e <ticker_job+0xcb6>
		current = ticker_current->next;
    dbe4:	f817 c002 	ldrb.w	ip, [r7, r2]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    dbe8:	9302      	str	r3, [sp, #8]
    dbea:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    dbee:	f000 83cc 	beq.w	e38a <ticker_job+0xc02>
    dbf2:	4663      	mov	r3, ip
		(ticker_current = &node[current])->ticks_to_expire))) {
    dbf4:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
    dbf8:	eb07 1e0c 	add.w	lr, r7, ip, lsl #4
    dbfc:	ea4f 120c 	mov.w	r2, ip, lsl #4
		(ticks_to_expire_current =
    dc00:	f8de c008 	ldr.w	ip, [lr, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    dc04:	4561      	cmp	r1, ip
    dc06:	d2e3      	bcs.n	dbd0 <ticker_job+0x448>
    dc08:	9a02      	ldr	r2, [sp, #8]
	ticker_new->ticks_to_expire = ticks_to_expire;
    dc0a:	6081      	str	r1, [r0, #8]
	if (previous == TICKER_NULL) {
    dc0c:	2aff      	cmp	r2, #255	; 0xff
	ticker_new->next = current;
    dc0e:	7003      	strb	r3, [r0, #0]
	if (previous == TICKER_NULL) {
    dc10:	f040 83c0 	bne.w	e394 <ticker_job+0xc0c>
		instance->ticker_id_head = id;
    dc14:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
    dc18:	2bff      	cmp	r3, #255	; 0xff
    dc1a:	d006      	beq.n	dc2a <ticker_job+0x4a2>
		node[current].ticks_to_expire -= ticks_to_expire;
    dc1c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    dc20:	eb07 1703 	add.w	r7, r7, r3, lsl #4
    dc24:	68bb      	ldr	r3, [r7, #8]
    dc26:	1a59      	subs	r1, r3, r1
    dc28:	60b9      	str	r1, [r7, #8]
	ticker->req = ticker->ack + 1;
    dc2a:	78a3      	ldrb	r3, [r4, #2]
    dc2c:	3301      	adds	r3, #1
    dc2e:	7063      	strb	r3, [r4, #1]
			if (user_op) {
    dc30:	2d00      	cmp	r5, #0
    dc32:	d0a9      	beq.n	db88 <ticker_job+0x400>
	if (user_op->fp_op_func) {
    dc34:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    dc36:	9a03      	ldr	r2, [sp, #12]
    dc38:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
    dc3a:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    dc3c:	b113      	cbz	r3, dc44 <ticker_job+0x4bc>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    dc3e:	6b29      	ldr	r1, [r5, #48]	; 0x30
    dc40:	2000      	movs	r0, #0
    dc42:	4798      	blx	r3
				if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    dc44:	6863      	ldr	r3, [r4, #4]
    dc46:	2b00      	cmp	r3, #0
    dc48:	d19e      	bne.n	db88 <ticker_job+0x400>
					ticker->op_context =
    dc4a:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
    dc4e:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
    dc52:	9b01      	ldr	r3, [sp, #4]
    dc54:	2bff      	cmp	r3, #255	; 0xff
    dc56:	d19a      	bne.n	db8e <ticker_job+0x406>
    dc58:	f898 3002 	ldrb.w	r3, [r8, #2]
    dc5c:	42b3      	cmp	r3, r6
    dc5e:	d02f      	beq.n	dcc0 <ticker_job+0x538>
    dc60:	9f05      	ldr	r7, [sp, #20]
				if (first == user->count_user_op) {
    dc62:	f898 0000 	ldrb.w	r0, [r8]
				user_op = &user_ops[user_ops_first];
    dc66:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    dc6a:	eb06 0282 	add.w	r2, r6, r2, lsl #2
				first = user_ops_first + 1;
    dc6e:	3601      	adds	r6, #1
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    dc70:	f817 1022 	ldrb.w	r1, [r7, r2, lsl #2]
				first = user_ops_first + 1;
    dc74:	b2f6      	uxtb	r6, r6
					first = 0U;
    dc76:	42b0      	cmp	r0, r6
    dc78:	bf08      	it	eq
    dc7a:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    dc7c:	2904      	cmp	r1, #4
				user_op = &user_ops[user_ops_first];
    dc7e:	eb07 0582 	add.w	r5, r7, r2, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    dc82:	d11b      	bne.n	dcbc <ticker_job+0x534>
				id_insert = user_op->id;
    dc84:	f895 a001 	ldrb.w	sl, [r5, #1]
				ticker = &node[id_insert];
    dc88:	9b04      	ldr	r3, [sp, #16]
    dc8a:	eb0a 0c4a 	add.w	ip, sl, sl, lsl #1
    dc8e:	eb03 140c 	add.w	r4, r3, ip, lsl #4
    dc92:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
				if (((ticker->req -
    dc96:	7861      	ldrb	r1, [r4, #1]
				      ticker->ack) & 0xff) != 0U) {
    dc98:	78a3      	ldrb	r3, [r4, #2]
				if (((ticker->req -
    dc9a:	1ac9      	subs	r1, r1, r3
    dc9c:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    dca0:	f000 8384 	beq.w	e3ac <ticker_job+0xc24>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    dca4:	9b03      	ldr	r3, [sp, #12]
    dca6:	f807 3022 	strb.w	r3, [r7, r2, lsl #2]
	if (user_op->fp_op_func) {
    dcaa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->status = status;
    dcac:	2201      	movs	r2, #1
    dcae:	62aa      	str	r2, [r5, #40]	; 0x28
		user_op->fp_op_func(user_op->status, user_op->op_context);
    dcb0:	4610      	mov	r0, r2
	if (user_op->fp_op_func) {
    dcb2:	b10b      	cbz	r3, dcb8 <ticker_job+0x530>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    dcb4:	6b29      	ldr	r1, [r5, #48]	; 0x30
    dcb6:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
    dcb8:	f898 3002 	ldrb.w	r3, [r8, #2]
    dcbc:	42b3      	cmp	r3, r6
    dcbe:	d1d0      	bne.n	dc62 <ticker_job+0x4da>
	while (count_user--) {
    dcc0:	9a07      	ldr	r2, [sp, #28]
    dcc2:	4542      	cmp	r2, r8
    dcc4:	f1a8 0308 	sub.w	r3, r8, #8
    dcc8:	f000 823c 	beq.w	e144 <ticker_job+0x9bc>
    dccc:	4698      	mov	r8, r3
    dcce:	e756      	b.n	db7e <ticker_job+0x3f6>
			ticks_to_expire_minus +=
    dcd0:	443a      	add	r2, r7
    dcd2:	1ad2      	subs	r2, r2, r3
		ticks_to_expire = 0U;
    dcd4:	2300      	movs	r3, #0
    dcd6:	e6ab      	b.n	da30 <ticker_job+0x2a8>
    dcd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    dcda:	8aa8      	ldrh	r0, [r5, #20]
    dcdc:	468b      	mov	fp, r1
		while (ticker->lazy_current < user_op->params.update.lazy) {
    dcde:	4558      	cmp	r0, fp
    dce0:	f67f ae8e 	bls.w	da00 <ticker_job+0x278>
					   ticker_remainder_inc(ticker);
    dce4:	6a21      	ldr	r1, [r4, #32]
    dce6:	9108      	str	r1, [sp, #32]
    dce8:	f106 0e01 	add.w	lr, r6, #1
    dcec:	4659      	mov	r1, fp
    dcee:	920c      	str	r2, [sp, #48]	; 0x30
    dcf0:	e008      	b.n	dd04 <ticker_job+0x57c>
	ticker->remainder_current += ticker->remainder_periodic;
    dcf2:	6260      	str	r0, [r4, #36]	; 0x24
    dcf4:	46b3      	mov	fp, r6
		while (ticker->lazy_current < user_op->params.update.lazy) {
    dcf6:	8aa8      	ldrh	r0, [r5, #20]
			ticker->lazy_current++;
    dcf8:	3101      	adds	r1, #1
    dcfa:	b289      	uxth	r1, r1
		while (ticker->lazy_current < user_op->params.update.lazy) {
    dcfc:	4281      	cmp	r1, r0
			ticks_to_expire += ticker->ticks_periodic +
    dcfe:	445b      	add	r3, fp
		while (ticker->lazy_current < user_op->params.update.lazy) {
    dd00:	f4bf ae7c 	bcs.w	d9fc <ticker_job+0x274>
	ticker->remainder_current += ticker->remainder_periodic;
    dd04:	9a08      	ldr	r2, [sp, #32]
    dd06:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if ((ticker->remainder_current < BIT(31)) &&
    dd08:	f8df b2cc 	ldr.w	fp, [pc, #716]	; dfd8 <ticker_job+0x850>
	ticker->remainder_current += ticker->remainder_periodic;
    dd0c:	4410      	add	r0, r2
	if ((ticker->remainder_current < BIT(31)) &&
    dd0e:	4ab1      	ldr	r2, [pc, #708]	; (dfd4 <ticker_job+0x84c>)
    dd10:	4483      	add	fp, r0
    dd12:	4593      	cmp	fp, r2
    dd14:	d8ed      	bhi.n	dcf2 <ticker_job+0x56a>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    dd16:	f1a0 70e8 	sub.w	r0, r0, #30408704	; 0x1d00000
    dd1a:	f5a0 30d4 	sub.w	r0, r0, #108544	; 0x1a800
    dd1e:	f5a0 70a5 	sub.w	r0, r0, #330	; 0x14a
    dd22:	6260      	str	r0, [r4, #36]	; 0x24
		return 1;
    dd24:	46f3      	mov	fp, lr
    dd26:	e7e6      	b.n	dcf6 <ticker_job+0x56e>
	if (flag_elapsed) {
    dd28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    dd2a:	2a00      	cmp	r2, #0
    dd2c:	f000 8218 	beq.w	e160 <ticker_job+0x9d8>
	pending = 0U;
    dd30:	9b06      	ldr	r3, [sp, #24]
    dd32:	9309      	str	r3, [sp, #36]	; 0x24
	insert_head = TICKER_NULL;
    dd34:	23ff      	movs	r3, #255	; 0xff
    dd36:	9301      	str	r3, [sp, #4]
	ticks_now = cntr_cnt_get();
    dd38:	f00b fd2a 	bl	19790 <cntr_cnt_get>
	node = &instance->nodes[0];
    dd3c:	f8db 3000 	ldr.w	r3, [fp]
	while (instance->ticker_id_head != TICKER_NULL) {
    dd40:	f89b 501d 	ldrb.w	r5, [fp, #29]
	node = &instance->nodes[0];
    dd44:	9304      	str	r3, [sp, #16]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    dd46:	9b07      	ldr	r3, [sp, #28]
	while (instance->ticker_id_head != TICKER_NULL) {
    dd48:	2dff      	cmp	r5, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    dd4a:	eba0 0003 	sub.w	r0, r0, r3
    dd4e:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
	while (instance->ticker_id_head != TICKER_NULL) {
    dd52:	d04d      	beq.n	ddf0 <ticker_job+0x668>
    dd54:	f8dd a008 	ldr.w	sl, [sp, #8]
	ticks_expired = 0U;
    dd58:	f04f 0900 	mov.w	r9, #0
		ticker = &node[id_expired];
    dd5c:	9b04      	ldr	r3, [sp, #16]
    dd5e:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    dd62:	eb03 1404 	add.w	r4, r3, r4, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
    dd66:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    dd68:	4553      	cmp	r3, sl
    dd6a:	f200 8412 	bhi.w	e592 <ticker_job+0xe0a>
		if (instance->ticks_slot_previous > ticks_to_expire) {
    dd6e:	f8db 2018 	ldr.w	r2, [fp, #24]
		skip_collision = (ticker->lazy_current != 0U);
    dd72:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
		if (instance->ticks_slot_previous > ticks_to_expire) {
    dd76:	4293      	cmp	r3, r2
		ticks_elapsed -= ticks_to_expire;
    dd78:	ebaa 0a03 	sub.w	sl, sl, r3
		ticks_expired += ticks_to_expire;
    dd7c:	4499      	add	r9, r3
		ticks_latency -= ticks_to_expire;
    dd7e:	eba8 0803 	sub.w	r8, r8, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    dd82:	bf25      	ittet	cs
    dd84:	f04f 33ff 	movcs.w	r3, #4294967295	; 0xffffffff
    dd88:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous -= ticks_to_expire;
    dd8c:	1ad3      	subcc	r3, r2, r3
			instance->ticks_slot_previous = 0U;
    dd8e:	2300      	movcs	r3, #0
    dd90:	f8cb 3018 	str.w	r3, [fp, #24]
		state = (ticker->req - ticker->ack) & 0xff;
    dd94:	7860      	ldrb	r0, [r4, #1]
    dd96:	78a1      	ldrb	r1, [r4, #2]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    dd98:	69a7      	ldr	r7, [r4, #24]
    dd9a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    dd9c:	f894 c000 	ldrb.w	ip, [r4]
    dda0:	6866      	ldr	r6, [r4, #4]
    dda2:	9703      	str	r7, [sp, #12]
		state = (ticker->req - ticker->ack) & 0xff;
    dda4:	1a43      	subs	r3, r0, r1
    dda6:	b2db      	uxtb	r3, r3
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    dda8:	b117      	cbz	r7, ddb0 <ticker_job+0x628>
    ddaa:	2b02      	cmp	r3, #2
    ddac:	f000 8148 	beq.w	e040 <ticker_job+0x8b8>
		ticker->ticks_to_expire = 0U;
    ddb0:	2700      	movs	r7, #0
    ddb2:	60a7      	str	r7, [r4, #8]
		instance->ticker_id_head = ticker->next;
    ddb4:	f88b c01d 	strb.w	ip, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
    ddb8:	2e00      	cmp	r6, #0
    ddba:	f040 80f9 	bne.w	dfb0 <ticker_job+0x828>
    ddbe:	b11a      	cbz	r2, ddc8 <ticker_job+0x640>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
    ddc0:	7a12      	ldrb	r2, [r2, #8]
    ddc2:	2a01      	cmp	r2, #1
    ddc4:	f000 80d5 	beq.w	df72 <ticker_job+0x7ea>
			if (state && ((state == 1U) || skip_collision) &&
    ddc8:	b153      	cbz	r3, dde0 <ticker_job+0x658>
    ddca:	2b01      	cmp	r3, #1
    ddcc:	d002      	beq.n	ddd4 <ticker_job+0x64c>
    ddce:	f1be 0f00 	cmp.w	lr, #0
    ddd2:	d005      	beq.n	dde0 <ticker_job+0x658>
			    ticker->fp_op_func) {
    ddd4:	6a23      	ldr	r3, [r4, #32]
			if (state && ((state == 1U) || skip_collision) &&
    ddd6:	b11b      	cbz	r3, dde0 <ticker_job+0x658>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
    ddd8:	6a61      	ldr	r1, [r4, #36]	; 0x24
    ddda:	2001      	movs	r0, #1
    dddc:	4798      	blx	r3
    ddde:	78a1      	ldrb	r1, [r4, #2]
			ticker->req = ticker->ack;
    dde0:	7061      	strb	r1, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
    dde2:	f89b 501d 	ldrb.w	r5, [fp, #29]
    dde6:	2dff      	cmp	r5, #255	; 0xff
    dde8:	d1b8      	bne.n	dd5c <ticker_job+0x5d4>
    ddea:	f8db 3000 	ldr.w	r3, [fp]
    ddee:	9304      	str	r3, [sp, #16]
			flag_compare_update = 1U;
    ddf0:	9806      	ldr	r0, [sp, #24]
	count_user = instance->count_user;
    ddf2:	f89b 2009 	ldrb.w	r2, [fp, #9]
			flag_compare_update = 1U;
    ddf6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	users = &instance->users[0];
    ddf8:	f8db 1004 	ldr.w	r1, [fp, #4]
    ddfc:	9107      	str	r1, [sp, #28]
	while (count_user--) {
    ddfe:	1e53      	subs	r3, r2, #1
			flag_compare_update = 1U;
    de00:	42a5      	cmp	r5, r4
    de02:	bf18      	it	ne
    de04:	2001      	movne	r0, #1
    de06:	9006      	str	r0, [sp, #24]
	while (count_user--) {
    de08:	b2db      	uxtb	r3, r3
    de0a:	2a00      	cmp	r2, #0
    de0c:	f000 812f 	beq.w	e06e <ticker_job+0x8e6>
    de10:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
		user_ops = (void *)&user->user_op[0];
    de14:	f8d8 3004 	ldr.w	r3, [r8, #4]
		user_ops_first = user->first;
    de18:	f898 6001 	ldrb.w	r6, [r8, #1]
		user_ops = (void *)&user->user_op[0];
    de1c:	9305      	str	r3, [sp, #20]
		while ((insert_head != TICKER_NULL) ||
    de1e:	9b01      	ldr	r3, [sp, #4]
    de20:	2bff      	cmp	r3, #255	; 0xff
    de22:	d062      	beq.n	deea <ticker_job+0x762>
				ticker = &node[id_insert];
    de24:	f8dd a004 	ldr.w	sl, [sp, #4]
    de28:	9b04      	ldr	r3, [sp, #16]
    de2a:	fa0f f48a 	sxth.w	r4, sl
    de2e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    de32:	ea4f 1c04 	mov.w	ip, r4, lsl #4
    de36:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				insert_head = ticker->next;
    de3a:	f813 300c 	ldrb.w	r3, [r3, ip]
    de3e:	9301      	str	r3, [sp, #4]
				user_op = NULL;
    de40:	2500      	movs	r5, #0
	ticker->next = TICKER_NULL;
    de42:	22ff      	movs	r2, #255	; 0xff
    de44:	7022      	strb	r2, [r4, #0]
	(void)ticker_enqueue(instance, id_insert);
    de46:	f8db 7000 	ldr.w	r7, [fp]
	current = instance->ticker_id_head;
    de4a:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticker_new = &node[id];
    de4e:	eb07 000c 	add.w	r0, r7, ip
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    de52:	4293      	cmp	r3, r2
	ticks_to_expire = ticker_new->ticks_to_expire;
    de54:	6881      	ldr	r1, [r0, #8]
	previous = TICKER_NULL;
    de56:	bf18      	it	ne
    de58:	9203      	strne	r2, [sp, #12]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    de5a:	d112      	bne.n	de82 <ticker_job+0x6fa>
    de5c:	e2ff      	b.n	e45e <ticker_job+0xcd6>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
    de5e:	ebb1 010c 	subs.w	r1, r1, ip
    de62:	d106      	bne.n	de72 <ticker_job+0x6ea>
    de64:	f8be e01e 	ldrh.w	lr, [lr, #30]
    de68:	f8b0 901e 	ldrh.w	r9, [r0, #30]
    de6c:	45f1      	cmp	r9, lr
    de6e:	f200 8343 	bhi.w	e4f8 <ticker_job+0xd70>
		current = ticker_current->next;
    de72:	f817 c002 	ldrb.w	ip, [r7, r2]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    de76:	9303      	str	r3, [sp, #12]
    de78:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    de7c:	f000 82e3 	beq.w	e446 <ticker_job+0xcbe>
    de80:	4663      	mov	r3, ip
		(ticker_current = &node[current])->ticks_to_expire))) {
    de82:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
    de86:	eb07 1e0c 	add.w	lr, r7, ip, lsl #4
    de8a:	ea4f 120c 	mov.w	r2, ip, lsl #4
		(ticks_to_expire_current =
    de8e:	f8de c008 	ldr.w	ip, [lr, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    de92:	458c      	cmp	ip, r1
    de94:	d9e3      	bls.n	de5e <ticker_job+0x6d6>
    de96:	9a03      	ldr	r2, [sp, #12]
	ticker_new->ticks_to_expire = ticks_to_expire;
    de98:	6081      	str	r1, [r0, #8]
	if (previous == TICKER_NULL) {
    de9a:	2aff      	cmp	r2, #255	; 0xff
	ticker_new->next = current;
    de9c:	7003      	strb	r3, [r0, #0]
	if (previous == TICKER_NULL) {
    de9e:	f040 82d7 	bne.w	e450 <ticker_job+0xcc8>
		instance->ticker_id_head = id;
    dea2:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
    dea6:	2bff      	cmp	r3, #255	; 0xff
    dea8:	d006      	beq.n	deb8 <ticker_job+0x730>
		node[current].ticks_to_expire -= ticks_to_expire;
    deaa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    deae:	eb07 1703 	add.w	r7, r7, r3, lsl #4
    deb2:	68bb      	ldr	r3, [r7, #8]
    deb4:	1a59      	subs	r1, r3, r1
    deb6:	60b9      	str	r1, [r7, #8]
	ticker->req = ticker->ack + 1;
    deb8:	78a3      	ldrb	r3, [r4, #2]
    deba:	3301      	adds	r3, #1
    debc:	7063      	strb	r3, [r4, #1]
			if (user_op) {
    debe:	2d00      	cmp	r5, #0
    dec0:	d0ad      	beq.n	de1e <ticker_job+0x696>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    dec2:	f04f 0200 	mov.w	r2, #0
	if (user_op->fp_op_func) {
    dec6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    dec8:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
    deca:	2200      	movs	r2, #0
    decc:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    dece:	b113      	cbz	r3, ded6 <ticker_job+0x74e>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    ded0:	6b29      	ldr	r1, [r5, #48]	; 0x30
    ded2:	4610      	mov	r0, r2
    ded4:	4798      	blx	r3
				if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    ded6:	6863      	ldr	r3, [r4, #4]
    ded8:	2b00      	cmp	r3, #0
    deda:	d1a0      	bne.n	de1e <ticker_job+0x696>
					ticker->op_context =
    dedc:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
    dee0:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
    dee4:	9b01      	ldr	r3, [sp, #4]
    dee6:	2bff      	cmp	r3, #255	; 0xff
    dee8:	d19c      	bne.n	de24 <ticker_job+0x69c>
    deea:	f898 3002 	ldrb.w	r3, [r8, #2]
    deee:	42b3      	cmp	r3, r6
    def0:	d030      	beq.n	df54 <ticker_job+0x7cc>
    def2:	9f05      	ldr	r7, [sp, #20]
				if (first == user->count_user_op) {
    def4:	f898 0000 	ldrb.w	r0, [r8]
				user_op = &user_ops[user_ops_first];
    def8:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    defc:	eb06 0282 	add.w	r2, r6, r2, lsl #2
				first = user_ops_first + 1;
    df00:	3601      	adds	r6, #1
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    df02:	f817 1022 	ldrb.w	r1, [r7, r2, lsl #2]
				first = user_ops_first + 1;
    df06:	b2f6      	uxtb	r6, r6
					first = 0U;
    df08:	42b0      	cmp	r0, r6
    df0a:	bf08      	it	eq
    df0c:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    df0e:	2904      	cmp	r1, #4
				user_op = &user_ops[user_ops_first];
    df10:	eb07 0582 	add.w	r5, r7, r2, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    df14:	d11c      	bne.n	df50 <ticker_job+0x7c8>
				id_insert = user_op->id;
    df16:	f895 a001 	ldrb.w	sl, [r5, #1]
				ticker = &node[id_insert];
    df1a:	9b04      	ldr	r3, [sp, #16]
    df1c:	eb0a 0c4a 	add.w	ip, sl, sl, lsl #1
    df20:	eb03 140c 	add.w	r4, r3, ip, lsl #4
    df24:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
				if (((ticker->req -
    df28:	7861      	ldrb	r1, [r4, #1]
				      ticker->ack) & 0xff) != 0U) {
    df2a:	78a3      	ldrb	r3, [r4, #2]
				if (((ticker->req -
    df2c:	1ac9      	subs	r1, r1, r3
    df2e:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    df32:	f000 8299 	beq.w	e468 <ticker_job+0xce0>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    df36:	f04f 0300 	mov.w	r3, #0
    df3a:	f807 3022 	strb.w	r3, [r7, r2, lsl #2]
	if (user_op->fp_op_func) {
    df3e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->status = status;
    df40:	2201      	movs	r2, #1
    df42:	62aa      	str	r2, [r5, #40]	; 0x28
		user_op->fp_op_func(user_op->status, user_op->op_context);
    df44:	4610      	mov	r0, r2
	if (user_op->fp_op_func) {
    df46:	b10b      	cbz	r3, df4c <ticker_job+0x7c4>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    df48:	6b29      	ldr	r1, [r5, #48]	; 0x30
    df4a:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
    df4c:	f898 3002 	ldrb.w	r3, [r8, #2]
    df50:	42b3      	cmp	r3, r6
    df52:	d1cf      	bne.n	def4 <ticker_job+0x76c>
	while (count_user--) {
    df54:	9a07      	ldr	r2, [sp, #28]
    df56:	4542      	cmp	r2, r8
    df58:	f1a8 0308 	sub.w	r3, r8, #8
    df5c:	f000 8084 	beq.w	e068 <ticker_job+0x8e0>
    df60:	4698      	mov	r8, r3
    df62:	e757      	b.n	de14 <ticker_job+0x68c>
		ticker->ticks_to_expire = 0U;
    df64:	f8c4 e008 	str.w	lr, [r4, #8]
		instance->ticker_id_head = ticker->next;
    df68:	f88b c01d 	strb.w	ip, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
    df6c:	2e00      	cmp	r6, #0
    df6e:	f43f af27 	beq.w	ddc0 <ticker_job+0x638>
				ticker->req = ticker->ack;
    df72:	4653      	mov	r3, sl
			ticks_to_expire_prep(ticker, instance->ticks_current,
    df74:	9e07      	ldr	r6, [sp, #28]
    df76:	f8db 2014 	ldr.w	r2, [fp, #20]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    df7a:	6960      	ldr	r0, [r4, #20]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    df7c:	eb06 0709 	add.w	r7, r6, r9
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    df80:	1abe      	subs	r6, r7, r2
    df82:	f416 0f00 	tst.w	r6, #8388608	; 0x800000
    df86:	d14d      	bne.n	e024 <ticker_job+0x89c>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    df88:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    df8c:	4433      	add	r3, r6
	if (ticks_to_expire > ticks_to_expire_minus) {
    df8e:	4298      	cmp	r0, r3
    df90:	d250      	bcs.n	e034 <ticker_job+0x8ac>
		ticks_to_expire -= ticks_to_expire_minus;
    df92:	1a1b      	subs	r3, r3, r0
		ticks_to_expire_minus = 0U;
    df94:	2000      	movs	r0, #0
			ticker->next = *insert_head;
    df96:	9a01      	ldr	r2, [sp, #4]
    df98:	7022      	strb	r2, [r4, #0]
			ticker->req++;
    df9a:	3101      	adds	r1, #1
    df9c:	7061      	strb	r1, [r4, #1]
	ticker->ticks_to_expire = ticks_to_expire;
    df9e:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    dfa0:	6160      	str	r0, [r4, #20]
			ticker->req++;
    dfa2:	9501      	str	r5, [sp, #4]
	while (instance->ticker_id_head != TICKER_NULL) {
    dfa4:	f89b 501d 	ldrb.w	r5, [fp, #29]
    dfa8:	2dff      	cmp	r5, #255	; 0xff
    dfaa:	f47f aed7 	bne.w	dd5c <ticker_job+0x5d4>
    dfae:	e71c      	b.n	ddea <ticker_job+0x662>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
    dfb0:	b112      	cbz	r2, dfb8 <ticker_job+0x830>
    dfb2:	7a13      	ldrb	r3, [r2, #8]
    dfb4:	2b01      	cmp	r3, #1
    dfb6:	d0dc      	beq.n	df72 <ticker_job+0x7ea>
				if (!ticker->lazy_current) {
    dfb8:	f1be 0f00 	cmp.w	lr, #0
    dfbc:	d151      	bne.n	e062 <ticker_job+0x8da>
					lazy_periodic = ticker->lazy_periodic;
    dfbe:	8ba7      	ldrh	r7, [r4, #28]
    dfc0:	9705      	str	r7, [sp, #20]
    dfc2:	4601      	mov	r1, r0
						ticker_remainder_inc(ticker);
    dfc4:	6a23      	ldr	r3, [r4, #32]
    dfc6:	9303      	str	r3, [sp, #12]
    dfc8:	6a62      	ldr	r2, [r4, #36]	; 0x24
    dfca:	9108      	str	r1, [sp, #32]
				ticks_to_expire = 0U;
    dfcc:	2300      	movs	r3, #0
    dfce:	1c70      	adds	r0, r6, #1
    dfd0:	e009      	b.n	dfe6 <ticker_job+0x85e>
    dfd2:	bf00      	nop
    dfd4:	7f172b59 	.word	0x7f172b59
    dfd8:	ff172b5a 	.word	0xff172b5a
				while (count--) {
    dfdc:	3f01      	subs	r7, #1
    dfde:	46b4      	mov	ip, r6
    dfe0:	1c79      	adds	r1, r7, #1
					ticks_to_expire +=
    dfe2:	4463      	add	r3, ip
				while (count--) {
    dfe4:	d012      	beq.n	e00c <ticker_job+0x884>
	ticker->remainder_current += ticker->remainder_periodic;
    dfe6:	9903      	ldr	r1, [sp, #12]
	if ((ticker->remainder_current < BIT(31)) &&
    dfe8:	f8df c2c4 	ldr.w	ip, [pc, #708]	; e2b0 <ticker_job+0xb28>
	ticker->remainder_current += ticker->remainder_periodic;
    dfec:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
    dfee:	49ad      	ldr	r1, [pc, #692]	; (e2a4 <ticker_job+0xb1c>)
    dff0:	4494      	add	ip, r2
    dff2:	458c      	cmp	ip, r1
    dff4:	d8f2      	bhi.n	dfdc <ticker_job+0x854>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    dff6:	f1a2 72e8 	sub.w	r2, r2, #30408704	; 0x1d00000
				while (count--) {
    dffa:	3f01      	subs	r7, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    dffc:	f5a2 32d4 	sub.w	r2, r2, #108544	; 0x1a800
    e000:	4684      	mov	ip, r0
				while (count--) {
    e002:	1c79      	adds	r1, r7, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    e004:	f5a2 72a5 	sub.w	r2, r2, #330	; 0x14a
					ticks_to_expire +=
    e008:	4463      	add	r3, ip
				while (count--) {
    e00a:	d1ec      	bne.n	dfe6 <ticker_job+0x85e>
				} else if (!ticker->must_expire) {
    e00c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    e010:	9908      	ldr	r1, [sp, #32]
    e012:	6262      	str	r2, [r4, #36]	; 0x24
    e014:	2800      	cmp	r0, #0
    e016:	f000 8285 	beq.w	e524 <ticker_job+0xd9c>
				ticker->lazy_current += (lazy_periodic + lazy);
    e01a:	9a05      	ldr	r2, [sp, #20]
    e01c:	4496      	add	lr, r2
    e01e:	f8a4 e01e 	strh.w	lr, [r4, #30]
    e022:	e7a7      	b.n	df74 <ticker_job+0x7ec>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    e024:	1bd2      	subs	r2, r2, r7
    e026:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    e02a:	429a      	cmp	r2, r3
    e02c:	d216      	bcs.n	e05c <ticker_job+0x8d4>
			ticks_to_expire -= delta_current_start;
    e02e:	1a9b      	subs	r3, r3, r2
	if (ticks_to_expire > ticks_to_expire_minus) {
    e030:	4298      	cmp	r0, r3
    e032:	d3ae      	bcc.n	df92 <ticker_job+0x80a>
    e034:	1ac0      	subs	r0, r0, r3
		ticks_to_expire = 0U;
    e036:	2300      	movs	r3, #0
    e038:	e7ad      	b.n	df96 <ticker_job+0x80e>
    e03a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    e03c:	468b      	mov	fp, r1
    e03e:	e64e      	b.n	dcde <ticker_job+0x556>
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    e040:	f1be 0f00 	cmp.w	lr, #0
    e044:	f47f aeb4 	bne.w	ddb0 <ticker_job+0x628>
    e048:	b112      	cbz	r2, e050 <ticker_job+0x8c8>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
    e04a:	7a17      	ldrb	r7, [r2, #8]
    e04c:	2f01      	cmp	r7, #1
    e04e:	d089      	beq.n	df64 <ticker_job+0x7dc>
			instance->ticks_slot_previous = ticker->ticks_slot;
    e050:	9f03      	ldr	r7, [sp, #12]
			instance->ticker_id_slot_previous = id_expired;
    e052:	f88b 501c 	strb.w	r5, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    e056:	f8cb 7018 	str.w	r7, [fp, #24]
    e05a:	e6a9      	b.n	ddb0 <ticker_job+0x628>
			ticks_to_expire_minus +=
    e05c:	4410      	add	r0, r2
    e05e:	1ac0      	subs	r0, r0, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    e060:	e7e9      	b.n	e036 <ticker_job+0x8ae>
    e062:	2700      	movs	r7, #0
					lazy_periodic = 0U;
    e064:	9705      	str	r7, [sp, #20]
    e066:	e7ad      	b.n	dfc4 <ticker_job+0x83c>
    e068:	f8db 3000 	ldr.w	r3, [fp]
    e06c:	9304      	str	r3, [sp, #16]
	while (rescheduling) {
    e06e:	f89b c01d 	ldrb.w	ip, [fp, #29]
    e072:	9e04      	ldr	r6, [sp, #16]
	uint8_t  rescheduled = 0U;
    e074:	2300      	movs	r3, #0
		while (ticker_id_head != TICKER_NULL) {
    e076:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    e07a:	d010      	beq.n	e09e <ticker_job+0x916>
    e07c:	46e2      	mov	sl, ip
			ticker = &nodes[ticker_id_head];
    e07e:	fa0f f28a 	sxth.w	r2, sl
    e082:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    e086:	eb06 1202 	add.w	r2, r6, r2, lsl #4
			ext_data = ticker->ext_data;
    e08a:	6a97      	ldr	r7, [r2, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
    e08c:	b117      	cbz	r7, e094 <ticker_job+0x90c>
    e08e:	7a39      	ldrb	r1, [r7, #8]
    e090:	2901      	cmp	r1, #1
    e092:	d076      	beq.n	e182 <ticker_job+0x9fa>
			ticker_id_head = ticker->next;
    e094:	f892 a000 	ldrb.w	sl, [r2]
		while (ticker_id_head != TICKER_NULL) {
    e098:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    e09c:	d1ef      	bne.n	e07e <ticker_job+0x8f6>
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
    e09e:	2b00      	cmp	r3, #0
    e0a0:	d052      	beq.n	e148 <ticker_job+0x9c0>
	if (instance->ticker_id_head != ticker_id_old_head) {
    e0a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    e0a4:	4562      	cmp	r2, ip
    e0a6:	f000 827b 	beq.w	e5a0 <ticker_job+0xe18>
	if (!pending) {
    e0aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e0ac:	2b00      	cmp	r3, #0
    e0ae:	f000 80e4 	beq.w	e27a <ticker_job+0xaf2>
    e0b2:	f89b c01d 	ldrb.w	ip, [fp, #29]
	if (instance->ticker_id_head == TICKER_NULL) {
    e0b6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    e0ba:	f000 827f 	beq.w	e5bc <ticker_job+0xe34>
	if (ticker_id_old_head == TICKER_NULL) {
    e0be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e0c0:	2bff      	cmp	r3, #255	; 0xff
    e0c2:	f000 8293 	beq.w	e5ec <ticker_job+0xe64>
	ticks_to_expire = ticker->ticks_to_expire;
    e0c6:	f8db 3000 	ldr.w	r3, [fp]
		LL_ASSERT(i);
    e0ca:	f8df 81e8 	ldr.w	r8, [pc, #488]	; e2b4 <ticker_job+0xb2c>
    e0ce:	4f76      	ldr	r7, [pc, #472]	; (e2a8 <ticker_job+0xb20>)
    e0d0:	4e76      	ldr	r6, [pc, #472]	; (e2ac <ticker_job+0xb24>)
	ticker = &instance->nodes[instance->ticker_id_head];
    e0d2:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
    e0d6:	eb03 130c 	add.w	r3, r3, ip, lsl #4
	i = 10U;
    e0da:	250a      	movs	r5, #10
	ticks_to_expire = ticker->ticks_to_expire;
    e0dc:	f8d3 9008 	ldr.w	r9, [r3, #8]
		ctr = cntr_cnt_get();
    e0e0:	f00b fb56 	bl	19790 <cntr_cnt_get>
		cc = instance->ticks_current;
    e0e4:	f8db 3014 	ldr.w	r3, [fp, #20]
		instance->trigger_set_cb(cc);
    e0e8:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    e0ec:	1ac4      	subs	r4, r0, r3
    e0ee:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    e0f2:	3403      	adds	r4, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
    e0f4:	454c      	cmp	r4, r9
    e0f6:	bf2c      	ite	cs
    e0f8:	191b      	addcs	r3, r3, r4
    e0fa:	444b      	addcc	r3, r9
		cc &= HAL_TICKER_CNTR_MASK;
    e0fc:	f023 447f 	bic.w	r4, r3, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
    e100:	4682      	mov	sl, r0
		instance->trigger_set_cb(cc);
    e102:	4620      	mov	r0, r4
    e104:	4790      	blx	r2
		ctr_post = cntr_cnt_get();
    e106:	f00b fb43 	bl	19790 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    e10a:	eba0 000a 	sub.w	r0, r0, sl
    e10e:	eba4 040a 	sub.w	r4, r4, sl
    e112:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    e116:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    e11a:	3003      	adds	r0, #3
		  ticker_ticks_diff_get(cc, ctr));
    e11c:	42a0      	cmp	r0, r4
		i--;
    e11e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		  ticker_ticks_diff_get(cc, ctr));
    e122:	d91b      	bls.n	e15c <ticker_job+0x9d4>
		LL_ASSERT(i);
    e124:	2d00      	cmp	r5, #0
    e126:	d1db      	bne.n	e0e0 <ticker_job+0x958>
    e128:	f640 03f3 	movw	r3, #2291	; 0x8f3
    e12c:	4642      	mov	r2, r8
    e12e:	4639      	mov	r1, r7
    e130:	4630      	mov	r0, r6
    e132:	f010 fbf3 	bl	1e91c <printk>
    e136:	4040      	eors	r0, r0
    e138:	f380 8811 	msr	BASEPRI, r0
    e13c:	f04f 0003 	mov.w	r0, #3
    e140:	df02      	svc	2
    e142:	e7cd      	b.n	e0e0 <ticker_job+0x958>
    e144:	f89b c01d 	ldrb.w	ip, [fp, #29]
	if (instance->ticker_id_head != ticker_id_old_head) {
    e148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e14a:	4563      	cmp	r3, ip
    e14c:	d1ad      	bne.n	e0aa <ticker_job+0x922>
	if (!pending) {
    e14e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e150:	2b00      	cmp	r3, #0
    e152:	f000 8241 	beq.w	e5d8 <ticker_job+0xe50>
	if (flag_compare_update) {
    e156:	9b06      	ldr	r3, [sp, #24]
    e158:	2b00      	cmp	r3, #0
    e15a:	d1aa      	bne.n	e0b2 <ticker_job+0x92a>
    e15c:	f89b 301f 	ldrb.w	r3, [fp, #31]
	instance->job_guard = 0U;
    e160:	2200      	movs	r2, #0
    e162:	f88b 201e 	strb.w	r2, [fp, #30]
	if (instance->worker_trigger) {
    e166:	2b00      	cmp	r3, #0
    e168:	f000 81d8 	beq.w	e51c <ticker_job+0xd94>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    e16c:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    e170:	465b      	mov	r3, fp
    e172:	2201      	movs	r2, #1
    e174:	2103      	movs	r1, #3
    e176:	2004      	movs	r0, #4
    e178:	46a4      	mov	ip, r4
}
    e17a:	b00f      	add	sp, #60	; 0x3c
    e17c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    e180:	4760      	bx	ip
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
    e182:	f89b 301c 	ldrb.w	r3, [fp, #28]
    e186:	2bff      	cmp	r3, #255	; 0xff
    e188:	d042      	beq.n	e210 <ticker_job+0xa88>
			instance->ticks_slot_previous > ticks_elapsed) {
    e18a:	f8db 0018 	ldr.w	r0, [fp, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
    e18e:	9b02      	ldr	r3, [sp, #8]
    e190:	4283      	cmp	r3, r0
    e192:	d23d      	bcs.n	e210 <ticker_job+0xa88>
			window_start_ticks = instance->ticks_slot_previous -
    e194:	1ac3      	subs	r3, r0, r3
    e196:	9301      	str	r3, [sp, #4]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    e198:	e9d7 4300 	ldrd	r4, r3, [r7]
    e19c:	42a3      	cmp	r3, r4
		ticker_id_iter = nodes[ticker_id_head].next;
    e19e:	f892 e000 	ldrb.w	lr, [r2]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    e1a2:	d23d      	bcs.n	e220 <ticker_job+0xa98>
		while (ticker_id_iter != TICKER_NULL &&
    e1a4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
			ticks_slot_window = ext_data->ticks_slot_window -
    e1a8:	eba4 0403 	sub.w	r4, r4, r3
		while (ticker_id_iter != TICKER_NULL &&
    e1ac:	d038      	beq.n	e220 <ticker_job+0xa98>
		       ticks_start_offset + ticker->ticks_slot <=
    e1ae:	6995      	ldr	r5, [r2, #24]
		while (ticker_id_iter != TICKER_NULL &&
    e1b0:	42ac      	cmp	r4, r5
    e1b2:	f04f 0300 	mov.w	r3, #0
    e1b6:	d337      	bcc.n	e228 <ticker_job+0xaa0>
    e1b8:	4699      	mov	r9, r3
    e1ba:	4671      	mov	r1, lr
    e1bc:	9203      	str	r2, [sp, #12]
    e1be:	46a8      	mov	r8, r5
    e1c0:	e01a      	b.n	e1f8 <ticker_job+0xa70>
			if (node->ticks_to_expire >
    e1c2:	6888      	ldr	r0, [r1, #8]
					MIN(ticks_slot_window,
    e1c4:	1f03      	subs	r3, r0, #4
			if (node->ticks_to_expire >
    e1c6:	2804      	cmp	r0, #4
					MIN(ticks_slot_window,
    e1c8:	444b      	add	r3, r9
			if (node->ticks_to_expire >
    e1ca:	d909      	bls.n	e1e0 <ticker_job+0xa58>
				window_end_ticks =
    e1cc:	42a3      	cmp	r3, r4
    e1ce:	bf28      	it	cs
    e1d0:	4623      	movcs	r3, r4
			if (window_end_ticks > ticks_start_offset +
    e1d2:	4543      	cmp	r3, r8
    e1d4:	d904      	bls.n	e1e0 <ticker_job+0xa58>
			if (ticks_to_expire != 0U &&
    e1d6:	1b5b      	subs	r3, r3, r5
    e1d8:	d002      	beq.n	e1e0 <ticker_job+0xa58>
    e1da:	9a01      	ldr	r2, [sp, #4]
    e1dc:	4293      	cmp	r3, r2
    e1de:	d222      	bcs.n	e226 <ticker_job+0xa9e>
			window_start_ticks  = node->ticks_to_expire +
    e1e0:	698b      	ldr	r3, [r1, #24]
			ticker_id_iter = node->next;
    e1e2:	7809      	ldrb	r1, [r1, #0]
			window_start_ticks  = node->ticks_to_expire +
    e1e4:	18c3      	adds	r3, r0, r3
    e1e6:	9301      	str	r3, [sp, #4]
			ticks_start_offset += node->ticks_to_expire;
    e1e8:	4481      	add	r9, r0
			ticks_to_expire     = ticks_slot_window -
    e1ea:	1b63      	subs	r3, r4, r5
		while (ticker_id_iter != TICKER_NULL &&
    e1ec:	29ff      	cmp	r1, #255	; 0xff
		       ticks_start_offset + ticker->ticks_slot <=
    e1ee:	eb09 0805 	add.w	r8, r9, r5
		while (ticker_id_iter != TICKER_NULL &&
    e1f2:	d018      	beq.n	e226 <ticker_job+0xa9e>
    e1f4:	4544      	cmp	r4, r8
    e1f6:	d316      	bcc.n	e226 <ticker_job+0xa9e>
			node = &nodes[ticker_id_iter];
    e1f8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    e1fc:	eb06 1101 	add.w	r1, r6, r1, lsl #4
			if (node->ext_data &&
    e200:	6a88      	ldr	r0, [r1, #40]	; 0x28
    e202:	2800      	cmp	r0, #0
    e204:	d0dd      	beq.n	e1c2 <ticker_job+0xa3a>
    e206:	7a00      	ldrb	r0, [r0, #8]
    e208:	2801      	cmp	r0, #1
    e20a:	d1da      	bne.n	e1c2 <ticker_job+0xa3a>
				ticker_id_iter = node->next;
    e20c:	7809      	ldrb	r1, [r1, #0]
				continue;
    e20e:	e7ed      	b.n	e1ec <ticker_job+0xa64>
		window_start_ticks = 0U;
    e210:	2300      	movs	r3, #0
    e212:	9301      	str	r3, [sp, #4]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    e214:	e9d7 4300 	ldrd	r4, r3, [r7]
    e218:	42a3      	cmp	r3, r4
		ticker_id_iter = nodes[ticker_id_head].next;
    e21a:	f892 e000 	ldrb.w	lr, [r2]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    e21e:	d3c1      	bcc.n	e1a4 <ticker_job+0xa1c>
		ticker->ticks_to_expire = ticks_to_expire;
    e220:	2300      	movs	r3, #0
    e222:	6093      	str	r3, [r2, #8]
		while (ticker_id_iter != TICKER_NULL) {
    e224:	e021      	b.n	e26a <ticker_job+0xae2>
    e226:	9a03      	ldr	r2, [sp, #12]
		ticker->ticks_to_expire = ticks_to_expire;
    e228:	6093      	str	r3, [r2, #8]
    e22a:	4674      	mov	r4, lr
    e22c:	f04f 09ff 	mov.w	r9, #255	; 0xff
    e230:	e000      	b.n	e234 <ticker_job+0xaac>
    e232:	4604      	mov	r4, r0
			node = &nodes[ticker_id_iter];
    e234:	b221      	sxth	r1, r4
    e236:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    e23a:	eb06 1800 	add.w	r8, r6, r0, lsl #4
    e23e:	0100      	lsls	r0, r0, #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
    e240:	f8d8 5008 	ldr.w	r5, [r8, #8]
    e244:	429d      	cmp	r5, r3
    e246:	f080 819a 	bcs.w	e57e <ticker_job+0xdf6>
				ticker->ticks_to_expire -=
    e24a:	1b5b      	subs	r3, r3, r5
    e24c:	6093      	str	r3, [r2, #8]
			ticker_id_iter = node->next;
    e24e:	5c30      	ldrb	r0, [r6, r0]
		while (ticker_id_iter != TICKER_NULL) {
    e250:	28ff      	cmp	r0, #255	; 0xff
    e252:	46a1      	mov	r9, r4
    e254:	d1ed      	bne.n	e232 <ticker_job+0xaaa>
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
    e256:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    e25a:	0109      	lsls	r1, r1, #4
			instance->ticker_id_head = nodes[ticker_id_head].next;
    e25c:	f88b e01d 	strb.w	lr, [fp, #29]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
    e260:	5c73      	ldrb	r3, [r6, r1]
    e262:	7013      	strb	r3, [r2, #0]
			nodes[ticker_id_prev].next = ticker_id_head;
    e264:	f806 a001 	strb.w	sl, [r6, r1]
    e268:	46f4      	mov	ip, lr
		ticker->lazy_current--;
    e26a:	8bd3      	ldrh	r3, [r2, #30]
    e26c:	3b01      	subs	r3, #1
    e26e:	83d3      	strh	r3, [r2, #30]
		ext_data->reschedule_state =
    e270:	f04f 0202 	mov.w	r2, #2
		rescheduled  = 1U;
    e274:	2301      	movs	r3, #1
		ext_data->reschedule_state =
    e276:	723a      	strb	r2, [r7, #8]
		rescheduled  = 1U;
    e278:	e6fd      	b.n	e076 <ticker_job+0x8ee>
	count_user = instance->count_user;
    e27a:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
    e27e:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
    e282:	1e5c      	subs	r4, r3, #1
    e284:	b2e4      	uxtb	r4, r4
    e286:	2b00      	cmp	r3, #0
    e288:	f43f af13 	beq.w	e0b2 <ticker_job+0x92a>
		flag_compare_update = 1U;
    e28c:	2301      	movs	r3, #1
    e28e:	9306      	str	r3, [sp, #24]
    e290:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
		uop->status = TICKER_STATUS_SUCCESS;
    e294:	f04f 0900 	mov.w	r9, #0
		while (user->first != user->last) {
    e298:	7863      	ldrb	r3, [r4, #1]
    e29a:	78e1      	ldrb	r1, [r4, #3]
		user_op = &user->user_op[0];
    e29c:	6865      	ldr	r5, [r4, #4]
		while (user->first != user->last) {
    e29e:	4299      	cmp	r1, r3
    e2a0:	d116      	bne.n	e2d0 <ticker_job+0xb48>
    e2a2:	e06b      	b.n	e37c <ticker_job+0xbf4>
    e2a4:	7f172b59 	.word	0x7f172b59
    e2a8:	000249c8 	.word	0x000249c8
    e2ac:	00024904 	.word	0x00024904
    e2b0:	ff172b5a 	.word	0xff172b5a
    e2b4:	000248c4 	.word	0x000248c4
	switch (uop->op) {
    e2b8:	2b01      	cmp	r3, #1
    e2ba:	d05b      	beq.n	e374 <ticker_job+0xbec>
			first = user->first + 1;
    e2bc:	7863      	ldrb	r3, [r4, #1]
			if (first == user->count_user_op) {
    e2be:	7822      	ldrb	r2, [r4, #0]
			first = user->first + 1;
    e2c0:	3301      	adds	r3, #1
    e2c2:	b2db      	uxtb	r3, r3
				first = 0U;
    e2c4:	429a      	cmp	r2, r3
    e2c6:	bf08      	it	eq
    e2c8:	2300      	moveq	r3, #0
		while (user->first != user->last) {
    e2ca:	4299      	cmp	r1, r3
			user->first = first;
    e2cc:	7063      	strb	r3, [r4, #1]
		while (user->first != user->last) {
    e2ce:	d055      	beq.n	e37c <ticker_job+0xbf4>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    e2d0:	b21b      	sxth	r3, r3
    e2d2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    e2d6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    e2da:	eb05 0283 	add.w	r2, r5, r3, lsl #2
	switch (uop->op) {
    e2de:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
    e2e2:	2b02      	cmp	r3, #2
    e2e4:	d01b      	beq.n	e31e <ticker_job+0xb96>
    e2e6:	2b03      	cmp	r3, #3
    e2e8:	d1e6      	bne.n	e2b8 <ticker_job+0xb30>
		if (uop->id < instance->count_node) {
    e2ea:	7853      	ldrb	r3, [r2, #1]
    e2ec:	f89b 1008 	ldrb.w	r1, [fp, #8]
    e2f0:	4299      	cmp	r1, r3
    e2f2:	d911      	bls.n	e318 <ticker_job+0xb90>
			node[uop->id].priority =
    e2f4:	f8db 1000 	ldr.w	r1, [fp]
    e2f8:	7910      	ldrb	r0, [r2, #4]
    e2fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    e2fe:	eb01 1303 	add.w	r3, r1, r3, lsl #4
    e302:	f883 002d 	strb.w	r0, [r3, #45]	; 0x2d
			uop->status = TICKER_STATUS_SUCCESS;
    e306:	f8c2 9028 	str.w	r9, [r2, #40]	; 0x28
		fp_op_func = uop->fp_op_func;
    e30a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	if (fp_op_func) {
    e30c:	b113      	cbz	r3, e314 <ticker_job+0xb8c>
		fp_op_func(uop->status, uop->op_context);
    e30e:	6b11      	ldr	r1, [r2, #48]	; 0x30
    e310:	6a90      	ldr	r0, [r2, #40]	; 0x28
    e312:	4798      	blx	r3
    e314:	78e1      	ldrb	r1, [r4, #3]
    e316:	e7d1      	b.n	e2bc <ticker_job+0xb34>
			uop->status = TICKER_STATUS_FAILURE;
    e318:	2301      	movs	r3, #1
    e31a:	6293      	str	r3, [r2, #40]	; 0x28
    e31c:	e7f5      	b.n	e30a <ticker_job+0xb82>
		ticker_by_next_slot_get(instance,
    e31e:	e9d2 7001 	ldrd	r7, r0, [r2, #4]
	_ticker_id_head = *ticker_id_head;
    e322:	f897 e000 	ldrb.w	lr, [r7]
		ticker_by_next_slot_get(instance,
    e326:	f8d2 c00c 	ldr.w	ip, [r2, #12]
	node = instance->nodes;
    e32a:	f8db 1000 	ldr.w	r1, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
    e32e:	f8db 8014 	ldr.w	r8, [fp, #20]
    e332:	f1be 0fff 	cmp.w	lr, #255	; 0xff
    e336:	d003      	beq.n	e340 <ticker_job+0xbb8>
    e338:	6803      	ldr	r3, [r0, #0]
    e33a:	4543      	cmp	r3, r8
    e33c:	f000 80e7 	beq.w	e50e <ticker_job+0xd86>
		_ticker_id_head = instance->ticker_id_head;
    e340:	f89b 301d 	ldrb.w	r3, [fp, #29]
		*ticks_current = instance->ticks_current;
    e344:	f8c0 8000 	str.w	r8, [r0]
		_ticks_to_expire = 0U;
    e348:	f04f 0e00 	mov.w	lr, #0
    e34c:	e00d      	b.n	e36a <ticker_job+0xbe2>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0U)) {
    e34e:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    e352:	eb01 1800 	add.w	r8, r1, r0, lsl #4
    e356:	0100      	lsls	r0, r0, #4
    e358:	f8d8 a008 	ldr.w	sl, [r8, #8]
	while ((_ticker_id_head != TICKER_NULL) &&
    e35c:	f8d8 8018 	ldr.w	r8, [r8, #24]
    e360:	44d6      	add	lr, sl
    e362:	f1b8 0f00 	cmp.w	r8, #0
    e366:	d102      	bne.n	e36e <ticker_job+0xbe6>
		_ticker_id_head = ticker->next;
    e368:	5c0b      	ldrb	r3, [r1, r0]
	while ((_ticker_id_head != TICKER_NULL) &&
    e36a:	2bff      	cmp	r3, #255	; 0xff
    e36c:	d1ef      	bne.n	e34e <ticker_job+0xbc6>
	*ticker_id_head = _ticker_id_head;
    e36e:	703b      	strb	r3, [r7, #0]
	*ticks_to_expire = _ticks_to_expire;
    e370:	f8cc e000 	str.w	lr, [ip]
		fp_op_func = uop->fp_op_func;
    e374:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		uop->status = TICKER_STATUS_SUCCESS;
    e376:	f8c2 9028 	str.w	r9, [r2, #40]	; 0x28
		break;
    e37a:	e7c7      	b.n	e30c <ticker_job+0xb84>
	while (count_user--) {
    e37c:	42a6      	cmp	r6, r4
    e37e:	f1a4 0308 	sub.w	r3, r4, #8
    e382:	f43f aee8 	beq.w	e156 <ticker_job+0x9ce>
    e386:	461c      	mov	r4, r3
    e388:	e786      	b.n	e298 <ticker_job+0xb10>
	ticker_new->next = current;
    e38a:	461a      	mov	r2, r3
	ticker_new->ticks_to_expire = ticks_to_expire;
    e38c:	6081      	str	r1, [r0, #8]
	ticker_new->next = current;
    e38e:	f880 c000 	strb.w	ip, [r0]
    e392:	4663      	mov	r3, ip
		node[previous].next = id;
    e394:	b212      	sxth	r2, r2
    e396:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    e39a:	0112      	lsls	r2, r2, #4
    e39c:	f807 a002 	strb.w	sl, [r7, r2]
    e3a0:	e43a      	b.n	dc18 <ticker_job+0x490>
	ticker_new->next = current;
    e3a2:	f807 300c 	strb.w	r3, [r7, ip]
		instance->ticker_id_head = id;
    e3a6:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
    e3aa:	e43e      	b.n	dc2a <ticker_job+0x4a2>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
    e3ac:	8aaf      	ldrh	r7, [r5, #20]
				ticker_job_op_start(ticker, user_op,
    e3ae:	f8db e014 	ldr.w	lr, [fp, #20]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
    e3b2:	f8d5 9024 	ldr.w	r9, [r5, #36]	; 0x24
    e3b6:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    e3ba:	429f      	cmp	r7, r3
    e3bc:	e9d5 0203 	ldrd	r0, r2, [r5, #12]
    e3c0:	d037      	beq.n	e432 <ticker_job+0xcaa>
		ticker->must_expire =
    e3c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e3c6:	1afb      	subs	r3, r7, r3
    e3c8:	fab3 f383 	clz	r3, r3
    e3cc:	095b      	lsrs	r3, r3, #5
	ticker->ext_data = start->ext_data;
    e3ce:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
	ticker->lazy_periodic =
    e3d2:	f64f 79fd 	movw	r9, #65533	; 0xfffd
	ticker->ticks_periodic = start->ticks_periodic;
    e3d6:	6060      	str	r0, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    e3d8:	6222      	str	r2, [r4, #32]
		ticker->must_expire =
    e3da:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->lazy_periodic =
    e3de:	454f      	cmp	r7, r9
    e3e0:	bf88      	it	hi
    e3e2:	2700      	movhi	r7, #0
	ticker->timeout_func = start->fp_timeout_func;
    e3e4:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    e3e8:	6868      	ldr	r0, [r5, #4]
	ticker->ticks_slot = start->ticks_slot;
    e3ea:	61a2      	str	r2, [r4, #24]
	ticker->context = start->context;
    e3ec:	6a2a      	ldr	r2, [r5, #32]
	ticker->lazy_periodic =
    e3ee:	83a7      	strh	r7, [r4, #28]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    e3f0:	eba0 070e 	sub.w	r7, r0, lr
	ticker->context = start->context;
    e3f4:	e9c4 3203 	strd	r3, r2, [r4, #12]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    e3f8:	023a      	lsls	r2, r7, #8
	ticker->ticks_to_expire = start->ticks_first;
    e3fa:	68ab      	ldr	r3, [r5, #8]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    e3fc:	d40d      	bmi.n	e41a <ticker_job+0xc92>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    e3fe:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    e402:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_to_expire_minus) {
    e404:	b193      	cbz	r3, e42c <ticker_job+0xca4>
	ticker->ticks_to_expire = ticks_to_expire;
    e406:	60a3      	str	r3, [r4, #8]
	ticker->remainder_current = 0U;
    e408:	9b03      	ldr	r3, [sp, #12]
    e40a:	6263      	str	r3, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
    e40c:	83e3      	strh	r3, [r4, #30]
	ticker->force = 1U;
    e40e:	f04f 0301 	mov.w	r3, #1
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    e412:	6161      	str	r1, [r4, #20]
	ticker->force = 1U;
    e414:	70e3      	strb	r3, [r4, #3]
}
    e416:	f7ff bbc9 	b.w	dbac <ticker_job+0x424>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    e41a:	ebae 0200 	sub.w	r2, lr, r0
    e41e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    e422:	4293      	cmp	r3, r2
    e424:	d96f      	bls.n	e506 <ticker_job+0xd7e>
			ticks_to_expire -= delta_current_start;
    e426:	1a9b      	subs	r3, r3, r2
	if (ticks_to_expire > ticks_to_expire_minus) {
    e428:	2b00      	cmp	r3, #0
    e42a:	d1ec      	bne.n	e406 <ticker_job+0xc7e>
		ticks_to_expire_minus -= ticks_to_expire;
    e42c:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
    e42e:	2300      	movs	r3, #0
    e430:	e7e9      	b.n	e406 <ticker_job+0xc7e>
	ticker->ext_data = start->ext_data;
    e432:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
    e436:	6060      	str	r0, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    e438:	6222      	str	r2, [r4, #32]
	ticker->lazy_periodic =
    e43a:	460f      	mov	r7, r1
    e43c:	e7d2      	b.n	e3e4 <ticker_job+0xc5c>
    e43e:	9a02      	ldr	r2, [sp, #8]
    e440:	4661      	mov	r1, ip
    e442:	f7ff bbe2 	b.w	dc0a <ticker_job+0x482>
	ticker_new->next = current;
    e446:	461a      	mov	r2, r3
	ticker_new->ticks_to_expire = ticks_to_expire;
    e448:	6081      	str	r1, [r0, #8]
	ticker_new->next = current;
    e44a:	f880 c000 	strb.w	ip, [r0]
    e44e:	4663      	mov	r3, ip
		node[previous].next = id;
    e450:	b212      	sxth	r2, r2
    e452:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    e456:	0112      	lsls	r2, r2, #4
    e458:	f807 a002 	strb.w	sl, [r7, r2]
    e45c:	e523      	b.n	dea6 <ticker_job+0x71e>
	ticker_new->next = current;
    e45e:	f807 300c 	strb.w	r3, [r7, ip]
		instance->ticker_id_head = id;
    e462:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
    e466:	e527      	b.n	deb8 <ticker_job+0x730>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
    e468:	8aaf      	ldrh	r7, [r5, #20]
				ticker_job_op_start(ticker, user_op,
    e46a:	f8db e014 	ldr.w	lr, [fp, #20]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
    e46e:	f8d5 9024 	ldr.w	r9, [r5, #36]	; 0x24
    e472:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    e476:	429f      	cmp	r7, r3
    e478:	e9d5 0203 	ldrd	r0, r2, [r5, #12]
    e47c:	d036      	beq.n	e4ec <ticker_job+0xd64>
		ticker->must_expire =
    e47e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e482:	1afb      	subs	r3, r7, r3
    e484:	fab3 f383 	clz	r3, r3
    e488:	095b      	lsrs	r3, r3, #5
	ticker->ext_data = start->ext_data;
    e48a:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
	ticker->lazy_periodic =
    e48e:	f64f 79fd 	movw	r9, #65533	; 0xfffd
	ticker->ticks_periodic = start->ticks_periodic;
    e492:	6060      	str	r0, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    e494:	6222      	str	r2, [r4, #32]
		ticker->must_expire =
    e496:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->lazy_periodic =
    e49a:	454f      	cmp	r7, r9
    e49c:	bf88      	it	hi
    e49e:	2700      	movhi	r7, #0
	ticker->timeout_func = start->fp_timeout_func;
    e4a0:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    e4a4:	6868      	ldr	r0, [r5, #4]
	ticker->ticks_slot = start->ticks_slot;
    e4a6:	61a2      	str	r2, [r4, #24]
	ticker->context = start->context;
    e4a8:	6a2a      	ldr	r2, [r5, #32]
	ticker->lazy_periodic =
    e4aa:	83a7      	strh	r7, [r4, #28]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    e4ac:	eba0 070e 	sub.w	r7, r0, lr
	ticker->context = start->context;
    e4b0:	e9c4 3203 	strd	r3, r2, [r4, #12]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    e4b4:	023a      	lsls	r2, r7, #8
	ticker->ticks_to_expire = start->ticks_first;
    e4b6:	68ab      	ldr	r3, [r5, #8]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    e4b8:	d40c      	bmi.n	e4d4 <ticker_job+0xd4c>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    e4ba:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    e4be:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_to_expire_minus) {
    e4c0:	b18b      	cbz	r3, e4e6 <ticker_job+0xd5e>
	ticker->ticks_to_expire = ticks_to_expire;
    e4c2:	60a3      	str	r3, [r4, #8]
	ticker->remainder_current = 0U;
    e4c4:	2300      	movs	r3, #0
    e4c6:	6263      	str	r3, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
    e4c8:	83e3      	strh	r3, [r4, #30]
	ticker->force = 1U;
    e4ca:	f04f 0301 	mov.w	r3, #1
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    e4ce:	6161      	str	r1, [r4, #20]
	ticker->force = 1U;
    e4d0:	70e3      	strb	r3, [r4, #3]
}
    e4d2:	e4b6      	b.n	de42 <ticker_job+0x6ba>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    e4d4:	ebae 0200 	sub.w	r2, lr, r0
    e4d8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    e4dc:	4293      	cmp	r3, r2
    e4de:	d90e      	bls.n	e4fe <ticker_job+0xd76>
			ticks_to_expire -= delta_current_start;
    e4e0:	1a9b      	subs	r3, r3, r2
	if (ticks_to_expire > ticks_to_expire_minus) {
    e4e2:	2b00      	cmp	r3, #0
    e4e4:	d1ed      	bne.n	e4c2 <ticker_job+0xd3a>
		ticks_to_expire_minus -= ticks_to_expire;
    e4e6:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
    e4e8:	2300      	movs	r3, #0
    e4ea:	e7ea      	b.n	e4c2 <ticker_job+0xd3a>
	ticker->ext_data = start->ext_data;
    e4ec:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
    e4f0:	6060      	str	r0, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    e4f2:	6222      	str	r2, [r4, #32]
	ticker->lazy_periodic =
    e4f4:	460f      	mov	r7, r1
    e4f6:	e7d3      	b.n	e4a0 <ticker_job+0xd18>
    e4f8:	9a03      	ldr	r2, [sp, #12]
    e4fa:	4661      	mov	r1, ip
    e4fc:	e4cc      	b.n	de98 <ticker_job+0x710>
			    (delta_current_start - ticks_to_expire);
    e4fe:	1ad3      	subs	r3, r2, r3
		ticks_to_expire_minus -= ticks_to_expire;
    e500:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
    e502:	2300      	movs	r3, #0
    e504:	e7dd      	b.n	e4c2 <ticker_job+0xd3a>
			    (delta_current_start - ticks_to_expire);
    e506:	1ad3      	subs	r3, r2, r3
		ticks_to_expire_minus -= ticks_to_expire;
    e508:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
    e50a:	2300      	movs	r3, #0
    e50c:	e77b      	b.n	e406 <ticker_job+0xc7e>
		ticker = &node[_ticker_id_head];
    e50e:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
    e512:	011b      	lsls	r3, r3, #4
	_ticks_to_expire = *ticks_to_expire;
    e514:	f8dc e000 	ldr.w	lr, [ip]
		_ticker_id_head = ticker->next;
    e518:	5ccb      	ldrb	r3, [r1, r3]
	while ((_ticker_id_head != TICKER_NULL) &&
    e51a:	e726      	b.n	e36a <ticker_job+0xbe2>
}
    e51c:	b00f      	add	sp, #60	; 0x3c
    e51e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e522:	4770      	bx	lr
					while (ticks_to_expire <
    e524:	4598      	cmp	r8, r3
    e526:	f67f ad78 	bls.w	e01a <ticker_job+0x892>
    e52a:	9f03      	ldr	r7, [sp, #12]
    e52c:	9508      	str	r5, [sp, #32]
    e52e:	f106 0c01 	add.w	ip, r6, #1
    e532:	910b      	str	r1, [sp, #44]	; 0x2c
    e534:	e005      	b.n	e542 <ticker_job+0xdba>
    e536:	4635      	mov	r5, r6
						ticks_to_expire +=
    e538:	442b      	add	r3, r5
						lazy++;
    e53a:	3001      	adds	r0, #1
					while (ticks_to_expire <
    e53c:	4598      	cmp	r8, r3
						lazy++;
    e53e:	b280      	uxth	r0, r0
					while (ticks_to_expire <
    e540:	d911      	bls.n	e566 <ticker_job+0xdde>
	if ((ticker->remainder_current < BIT(31)) &&
    e542:	4d31      	ldr	r5, [pc, #196]	; (e608 <ticker_job+0xe80>)
    e544:	4931      	ldr	r1, [pc, #196]	; (e60c <ticker_job+0xe84>)
	ticker->remainder_current += ticker->remainder_periodic;
    e546:	443a      	add	r2, r7
	if ((ticker->remainder_current < BIT(31)) &&
    e548:	1955      	adds	r5, r2, r5
    e54a:	428d      	cmp	r5, r1
    e54c:	d8f3      	bhi.n	e536 <ticker_job+0xdae>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    e54e:	4665      	mov	r5, ip
    e550:	f1a2 72e8 	sub.w	r2, r2, #30408704	; 0x1d00000
						ticks_to_expire +=
    e554:	442b      	add	r3, r5
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    e556:	f5a2 32d4 	sub.w	r2, r2, #108544	; 0x1a800
						lazy++;
    e55a:	3001      	adds	r0, #1
					while (ticks_to_expire <
    e55c:	4598      	cmp	r8, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    e55e:	f5a2 72a5 	sub.w	r2, r2, #330	; 0x14a
						lazy++;
    e562:	b280      	uxth	r0, r0
					while (ticks_to_expire <
    e564:	d8ed      	bhi.n	e542 <ticker_job+0xdba>
    e566:	9e05      	ldr	r6, [sp, #20]
    e568:	9d08      	ldr	r5, [sp, #32]
    e56a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    e56c:	6262      	str	r2, [r4, #36]	; 0x24
    e56e:	4406      	add	r6, r0
    e570:	b2b0      	uxth	r0, r6
    e572:	9005      	str	r0, [sp, #20]
    e574:	e551      	b.n	e01a <ticker_job+0x892>
		flag_elapsed = 0U;
    e576:	930d      	str	r3, [sp, #52]	; 0x34
		ticks_elapsed = 0U;
    e578:	9302      	str	r3, [sp, #8]
    e57a:	f7ff b931 	b.w	d7e0 <ticker_job+0x58>
				node->ticks_to_expire -=
    e57e:	1aeb      	subs	r3, r5, r3
		if (ticker_id_prev != TICKER_NULL) {
    e580:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
				node->ticks_to_expire -=
    e584:	f8c8 3008 	str.w	r3, [r8, #8]
		if (ticker_id_prev != TICKER_NULL) {
    e588:	f43f ae6f 	beq.w	e26a <ticker_job+0xae2>
    e58c:	fa0f f189 	sxth.w	r1, r9
    e590:	e661      	b.n	e256 <ticker_job+0xace>
			ticker->ticks_to_expire -= ticks_elapsed;
    e592:	eba3 030a 	sub.w	r3, r3, sl
    e596:	60a3      	str	r3, [r4, #8]
			break;
    e598:	f8db 3000 	ldr.w	r3, [fp]
    e59c:	9304      	str	r3, [sp, #16]
    e59e:	e427      	b.n	ddf0 <ticker_job+0x668>
	if (!pending) {
    e5a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    e5a2:	2a00      	cmp	r2, #0
    e5a4:	f47f ad87 	bne.w	e0b6 <ticker_job+0x92e>
	count_user = instance->count_user;
    e5a8:	f89b 2009 	ldrb.w	r2, [fp, #9]
	users = &instance->users[0];
    e5ac:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
    e5b0:	1e54      	subs	r4, r2, #1
    e5b2:	b2e4      	uxtb	r4, r4
    e5b4:	2a00      	cmp	r2, #0
    e5b6:	f47f ae6a 	bne.w	e28e <ticker_job+0xb06>
    e5ba:	e57c      	b.n	e0b6 <ticker_job+0x92e>
		if (cntr_stop() == 0) {
    e5bc:	f00b f8c2 	bl	19744 <cntr_stop>
    e5c0:	2800      	cmp	r0, #0
    e5c2:	f47f adcb 	bne.w	e15c <ticker_job+0x9d4>
			instance->ticks_slot_previous = 0U;
    e5c6:	f8cb 0018 	str.w	r0, [fp, #24]
			instance->ticks_current = cntr_cnt_get();
    e5ca:	f00b f8e1 	bl	19790 <cntr_cnt_get>
    e5ce:	f89b 301f 	ldrb.w	r3, [fp, #31]
    e5d2:	f8cb 0014 	str.w	r0, [fp, #20]
    e5d6:	e5c3      	b.n	e160 <ticker_job+0x9d8>
	count_user = instance->count_user;
    e5d8:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
    e5dc:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
    e5e0:	1e5c      	subs	r4, r3, #1
    e5e2:	b2e4      	uxtb	r4, r4
    e5e4:	2b00      	cmp	r3, #0
    e5e6:	f47f ae53 	bne.w	e290 <ticker_job+0xb08>
    e5ea:	e5b4      	b.n	e156 <ticker_job+0x9ce>
		ticks_current = cntr_cnt_get();
    e5ec:	f00b f8d0 	bl	19790 <cntr_cnt_get>
    e5f0:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    e5f2:	f00b f897 	bl	19724 <cntr_start>
    e5f6:	f89b c01d 	ldrb.w	ip, [fp, #29]
    e5fa:	2800      	cmp	r0, #0
    e5fc:	f47f ad63 	bne.w	e0c6 <ticker_job+0x93e>
			instance->ticks_current = ticks_current;
    e600:	f8cb 4014 	str.w	r4, [fp, #20]
    e604:	e55f      	b.n	e0c6 <ticker_job+0x93e>
    e606:	bf00      	nop
    e608:	ff172b5a 	.word	0xff172b5a
    e60c:	7f172b59 	.word	0x7f172b59

0000e610 <ticker_init>:
{
    e610:	b4f0      	push	{r4, r5, r6, r7}
    e612:	9f04      	ldr	r7, [sp, #16]
    e614:	f89d 4014 	ldrb.w	r4, [sp, #20]
    e618:	9e06      	ldr	r6, [sp, #24]
	if (instance_index >= TICKER_INSTANCE_MAX) {
    e61a:	2800      	cmp	r0, #0
    e61c:	d13e      	bne.n	e69c <ticker_init+0x8c>
	instance->count_node = count_node;
    e61e:	f8df c084 	ldr.w	ip, [pc, #132]	; e6a4 <ticker_init+0x94>
	while (count_node--) {
    e622:	1e4d      	subs	r5, r1, #1
	instance->count_node = count_node;
    e624:	f88c 1008 	strb.w	r1, [ip, #8]
	instance->nodes = node;
    e628:	f8cc 2000 	str.w	r2, [ip]
	while (count_node--) {
    e62c:	b2ed      	uxtb	r5, r5
    e62e:	b149      	cbz	r1, e644 <ticker_init+0x34>
    e630:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    e634:	eb02 1105 	add.w	r1, r2, r5, lsl #4
    e638:	4291      	cmp	r1, r2
		instance->nodes[count_node].priority = 0;
    e63a:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
	while (count_node--) {
    e63e:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
    e642:	d1f9      	bne.n	e638 <ticker_init+0x28>
	while (count_user--) {
    e644:	1e5a      	subs	r2, r3, #1
	instance->count_user = count_user;
    e646:	f88c 3009 	strb.w	r3, [ip, #9]
	instance->users = user;
    e64a:	f8cc 7004 	str.w	r7, [ip, #4]
	while (count_user--) {
    e64e:	b2d2      	uxtb	r2, r2
    e650:	b17b      	cbz	r3, e672 <ticker_init+0x62>
    e652:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
		users[count_user].user_op = user_op_;
    e656:	6056      	str	r6, [r2, #4]
		user_op_ += users[count_user].count_user_op;
    e658:	4611      	mov	r1, r2
    e65a:	f812 3908 	ldrb.w	r3, [r2], #-8
    e65e:	eb03 0043 	add.w	r0, r3, r3, lsl #1
		count_op -= users[count_user].count_user_op;
    e662:	1ae4      	subs	r4, r4, r3
	while (count_user--) {
    e664:	428f      	cmp	r7, r1
		user_op_ += users[count_user].count_user_op;
    e666:	eb03 0380 	add.w	r3, r3, r0, lsl #2
		count_op -= users[count_user].count_user_op;
    e66a:	b2e4      	uxtb	r4, r4
		user_op_ += users[count_user].count_user_op;
    e66c:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	while (count_user--) {
    e670:	d1f1      	bne.n	e656 <ticker_init+0x46>
	if (count_op) {
    e672:	b99c      	cbnz	r4, e69c <ticker_init+0x8c>
	instance->caller_id_get_cb = caller_id_get_cb;
    e674:	9a07      	ldr	r2, [sp, #28]
    e676:	f8cc 2020 	str.w	r2, [ip, #32]
	instance->sched_cb = sched_cb;
    e67a:	9a08      	ldr	r2, [sp, #32]
    e67c:	f8cc 2024 	str.w	r2, [ip, #36]	; 0x24
	instance->ticker_id_slot_previous = TICKER_NULL;
    e680:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->trigger_set_cb = trigger_set_cb;
    e684:	9a09      	ldr	r2, [sp, #36]	; 0x24
	instance->ticks_elapsed_first = 0U;
    e686:	f8ac 400a 	strh.w	r4, [ip, #10]
	return TICKER_STATUS_SUCCESS;
    e68a:	4620      	mov	r0, r4
	instance->ticks_slot_previous = 0U;
    e68c:	e9cc 4405 	strd	r4, r4, [ip, #20]
}
    e690:	bcf0      	pop	{r4, r5, r6, r7}
	instance->trigger_set_cb = trigger_set_cb;
    e692:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
	instance->ticker_id_slot_previous = TICKER_NULL;
    e696:	f8ac 301c 	strh.w	r3, [ip, #28]
}
    e69a:	4770      	bx	lr
		return TICKER_STATUS_FAILURE;
    e69c:	2001      	movs	r0, #1
}
    e69e:	bcf0      	pop	{r4, r5, r6, r7}
    e6a0:	4770      	bx	lr
    e6a2:	bf00      	nop
    e6a4:	20001a84 	.word	0x20001a84

0000e6a8 <ticker_trigger>:
	if (instance->sched_cb) {
    e6a8:	4b0a      	ldr	r3, [pc, #40]	; (e6d4 <ticker_trigger+0x2c>)
    e6aa:	222c      	movs	r2, #44	; 0x2c
    e6ac:	fb02 3200 	mla	r2, r2, r0, r3
{
    e6b0:	b410      	push	{r4}
	if (instance->sched_cb) {
    e6b2:	6a54      	ldr	r4, [r2, #36]	; 0x24
    e6b4:	b15c      	cbz	r4, e6ce <ticker_trigger+0x26>
	instance = &_instance[instance_index];
    e6b6:	eb00 0280 	add.w	r2, r0, r0, lsl #2
    e6ba:	eb00 0042 	add.w	r0, r0, r2, lsl #1
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    e6be:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    e6c2:	46a4      	mov	ip, r4
    e6c4:	2201      	movs	r2, #1
}
    e6c6:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    e6c8:	2103      	movs	r1, #3
    e6ca:	2002      	movs	r0, #2
    e6cc:	4760      	bx	ip
}
    e6ce:	bc10      	pop	{r4}
    e6d0:	4770      	bx	lr
    e6d2:	bf00      	nop
    e6d4:	20001a84 	.word	0x20001a84

0000e6d8 <ticker_start_ext>:
{
    e6d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    e6dc:	f8df 80a0 	ldr.w	r8, [pc, #160]	; e780 <ticker_start_ext+0xa8>
{
    e6e0:	f8bd e02c 	ldrh.w	lr, [sp, #44]	; 0x2c
	user = &instance->users[user_id];
    e6e4:	272c      	movs	r7, #44	; 0x2c
    e6e6:	fb07 8700 	mla	r7, r7, r0, r8
{
    e6ea:	4604      	mov	r4, r0
	user = &instance->users[user_id];
    e6ec:	687d      	ldr	r5, [r7, #4]
    e6ee:	eb05 0cc1 	add.w	ip, r5, r1, lsl #3
	if (last >= user->count_user_op) {
    e6f2:	f815 9031 	ldrb.w	r9, [r5, r1, lsl #3]
	last = user->last + 1;
    e6f6:	f89c 6003 	ldrb.w	r6, [ip, #3]
	struct ticker_instance *instance = &_instance[instance_index];
    e6fa:	eb04 0584 	add.w	r5, r4, r4, lsl #2
    e6fe:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	last = user->last + 1;
    e702:	1c75      	adds	r5, r6, #1
{
    e704:	4608      	mov	r0, r1
	last = user->last + 1;
    e706:	b2ed      	uxtb	r5, r5
	if (last == user->first) {
    e708:	f89c 1001 	ldrb.w	r1, [ip, #1]
		last = 0U;
    e70c:	45a9      	cmp	r9, r5
    e70e:	bf98      	it	ls
    e710:	2500      	movls	r5, #0
	if (last == user->first) {
    e712:	42a9      	cmp	r1, r5
	struct ticker_instance *instance = &_instance[instance_index];
    e714:	eb08 0884 	add.w	r8, r8, r4, lsl #2
	if (last == user->first) {
    e718:	d02f      	beq.n	e77a <ticker_start_ext+0xa2>
	user_op = &user->user_op[user->last];
    e71a:	f8dc 1004 	ldr.w	r1, [ip, #4]
    e71e:	eb06 0446 	add.w	r4, r6, r6, lsl #1
    e722:	eb06 0684 	add.w	r6, r6, r4, lsl #2
    e726:	eb01 0486 	add.w	r4, r1, r6, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_START;
    e72a:	f04f 0904 	mov.w	r9, #4
    e72e:	f801 9026 	strb.w	r9, [r1, r6, lsl #2]
	user_op->params.start.ticks_at_start = ticks_anchor;
    e732:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    e734:	9b08      	ldr	r3, [sp, #32]
    e736:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    e738:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e73a:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    e73c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e73e:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    e740:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e742:	61a3      	str	r3, [r4, #24]
	user_op->params.start.ext_data = ext_data;
    e744:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e746:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    e748:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e74a:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    e74c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e74e:	6223      	str	r3, [r4, #32]
	user_op->fp_op_func = fp_op_func;
    e750:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    e752:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
    e754:	2102      	movs	r1, #2
	user_op->op_context = op_context;
    e756:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    e758:	7062      	strb	r2, [r4, #1]
	user_op->params.start.lazy = lazy;
    e75a:	f8a4 e014 	strh.w	lr, [r4, #20]
	user_op->op_context = op_context;
    e75e:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
    e760:	62a1      	str	r1, [r4, #40]	; 0x28
	user->last = last;
    e762:	f88c 5003 	strb.w	r5, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    e766:	e9d7 3508 	ldrd	r3, r5, [r7, #32]
    e76a:	4798      	blx	r3
    e76c:	4643      	mov	r3, r8
    e76e:	4649      	mov	r1, r9
    e770:	2200      	movs	r2, #0
    e772:	47a8      	blx	r5
	return user_op->status;
    e774:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
    e776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
    e77a:	2001      	movs	r0, #1
}
    e77c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e780:	20001a84 	.word	0x20001a84

0000e784 <ticker_start>:
{
    e784:	b530      	push	{r4, r5, lr}
    e786:	b08b      	sub	sp, #44	; 0x2c
    e788:	e9dd 540e 	ldrd	r5, r4, [sp, #56]	; 0x38
	return ticker_start_ext(instance_index, user_id, ticker_id,
    e78c:	9500      	str	r5, [sp, #0]
{
    e78e:	9d10      	ldr	r5, [sp, #64]	; 0x40
	return ticker_start_ext(instance_index, user_id, ticker_id,
    e790:	9401      	str	r4, [sp, #4]
    e792:	9502      	str	r5, [sp, #8]
{
    e794:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
    e798:	9d12      	ldr	r5, [sp, #72]	; 0x48
	return ticker_start_ext(instance_index, user_id, ticker_id,
    e79a:	9403      	str	r4, [sp, #12]
    e79c:	9504      	str	r5, [sp, #16]
{
    e79e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    e7a0:	9d14      	ldr	r5, [sp, #80]	; 0x50
	return ticker_start_ext(instance_index, user_id, ticker_id,
    e7a2:	9405      	str	r4, [sp, #20]
    e7a4:	9506      	str	r5, [sp, #24]
{
    e7a6:	9c15      	ldr	r4, [sp, #84]	; 0x54
    e7a8:	9d16      	ldr	r5, [sp, #88]	; 0x58
	return ticker_start_ext(instance_index, user_id, ticker_id,
    e7aa:	9407      	str	r4, [sp, #28]
    e7ac:	2400      	movs	r4, #0
    e7ae:	e9cd 5408 	strd	r5, r4, [sp, #32]
    e7b2:	f7ff ff91 	bl	e6d8 <ticker_start_ext>
}
    e7b6:	b00b      	add	sp, #44	; 0x2c
    e7b8:	bd30      	pop	{r4, r5, pc}
    e7ba:	bf00      	nop

0000e7bc <ticker_update_ext>:
	struct ticker_instance *instance = &_instance[instance_index];
    e7bc:	f8df c0a0 	ldr.w	ip, [pc, #160]	; e860 <ticker_update_ext+0xa4>
{
    e7c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	user = &instance->users[user_id];
    e7c4:	272c      	movs	r7, #44	; 0x2c
    e7c6:	fb07 c700 	mla	r7, r7, r0, ip
{
    e7ca:	4604      	mov	r4, r0
	user = &instance->users[user_id];
    e7cc:	687d      	ldr	r5, [r7, #4]
{
    e7ce:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
    e7d2:	f89d e038 	ldrb.w	lr, [sp, #56]	; 0x38
    e7d6:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
    e7da:	4608      	mov	r0, r1
	user = &instance->users[user_id];
    e7dc:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
	if (last >= user->count_user_op) {
    e7e0:	f815 a030 	ldrb.w	sl, [r5, r0, lsl #3]
	last = user->last + 1;
    e7e4:	78ce      	ldrb	r6, [r1, #3]
	if (last == user->first) {
    e7e6:	f891 9001 	ldrb.w	r9, [r1, #1]
	struct ticker_instance *instance = &_instance[instance_index];
    e7ea:	eb04 0584 	add.w	r5, r4, r4, lsl #2
    e7ee:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	last = user->last + 1;
    e7f2:	1c75      	adds	r5, r6, #1
    e7f4:	b2ed      	uxtb	r5, r5
		last = 0U;
    e7f6:	45aa      	cmp	sl, r5
    e7f8:	bf98      	it	ls
    e7fa:	2500      	movls	r5, #0
	if (last == user->first) {
    e7fc:	45a9      	cmp	r9, r5
	struct ticker_instance *instance = &_instance[instance_index];
    e7fe:	eb0c 0a84 	add.w	sl, ip, r4, lsl #2
	if (last == user->first) {
    e802:	d02a      	beq.n	e85a <ticker_update_ext+0x9e>
	user_op = &user->user_op[user->last];
    e804:	f8d1 c004 	ldr.w	ip, [r1, #4]
    e808:	eb06 0446 	add.w	r4, r6, r6, lsl #1
    e80c:	eb06 0684 	add.w	r6, r6, r4, lsl #2
    e810:	eb0c 0486 	add.w	r4, ip, r6, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    e814:	f04f 0905 	mov.w	r9, #5
    e818:	f80c 9026 	strb.w	r9, [ip, r6, lsl #2]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    e81c:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    e81e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e820:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    e822:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e824:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    e826:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e828:	6123      	str	r3, [r4, #16]
	user_op->fp_op_func = fp_op_func;
    e82a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    e82c:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
    e82e:	2602      	movs	r6, #2
	user_op->op_context = op_context;
    e830:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    e832:	7062      	strb	r2, [r4, #1]
	user_op->params.update.force = force;
    e834:	f884 e016 	strb.w	lr, [r4, #22]
	user_op->op_context = op_context;
    e838:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->params.update.lazy = lazy;
    e83a:	f8a4 8014 	strh.w	r8, [r4, #20]
	user_op->params.update.must_expire = must_expire;
    e83e:	f884 b017 	strb.w	fp, [r4, #23]
	user_op->status = TICKER_STATUS_BUSY;
    e842:	62a6      	str	r6, [r4, #40]	; 0x28
	user->last = last;
    e844:	70cd      	strb	r5, [r1, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    e846:	e9d7 3508 	ldrd	r3, r5, [r7, #32]
    e84a:	4798      	blx	r3
    e84c:	4653      	mov	r3, sl
    e84e:	2200      	movs	r2, #0
    e850:	2104      	movs	r1, #4
    e852:	47a8      	blx	r5
	return user_op->status;
    e854:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
    e856:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return TICKER_STATUS_FAILURE;
    e85a:	2001      	movs	r0, #1
}
    e85c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e860:	20001a84 	.word	0x20001a84

0000e864 <ticker_update>:
{
    e864:	b530      	push	{r4, r5, lr}
    e866:	b089      	sub	sp, #36	; 0x24
    e868:	e9dd 540c 	ldrd	r5, r4, [sp, #48]	; 0x30
	return ticker_update_ext(instance_index, user_id, ticker_id,
    e86c:	9500      	str	r5, [sp, #0]
{
    e86e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	return ticker_update_ext(instance_index, user_id, ticker_id,
    e870:	9401      	str	r4, [sp, #4]
    e872:	9502      	str	r5, [sp, #8]
{
    e874:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
    e878:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
	return ticker_update_ext(instance_index, user_id, ticker_id,
    e87c:	9403      	str	r4, [sp, #12]
    e87e:	9504      	str	r5, [sp, #16]
{
    e880:	9c11      	ldr	r4, [sp, #68]	; 0x44
    e882:	9d12      	ldr	r5, [sp, #72]	; 0x48
	return ticker_update_ext(instance_index, user_id, ticker_id,
    e884:	9405      	str	r4, [sp, #20]
    e886:	2400      	movs	r4, #0
    e888:	e9cd 5406 	strd	r5, r4, [sp, #24]
    e88c:	f7ff ff96 	bl	e7bc <ticker_update_ext>
}
    e890:	b009      	add	sp, #36	; 0x24
    e892:	bd30      	pop	{r4, r5, pc}

0000e894 <ticker_stop>:
	struct ticker_instance *instance = &_instance[instance_index];
    e894:	f8df c084 	ldr.w	ip, [pc, #132]	; e91c <ticker_stop+0x88>
{
    e898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	user = &instance->users[user_id];
    e89c:	272c      	movs	r7, #44	; 0x2c
    e89e:	fb07 c700 	mla	r7, r7, r0, ip
{
    e8a2:	4604      	mov	r4, r0
	user = &instance->users[user_id];
    e8a4:	687d      	ldr	r5, [r7, #4]
{
    e8a6:	4608      	mov	r0, r1
	user = &instance->users[user_id];
    e8a8:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
	if (last >= user->count_user_op) {
    e8ac:	f815 8030 	ldrb.w	r8, [r5, r0, lsl #3]
	last = user->last + 1;
    e8b0:	78ce      	ldrb	r6, [r1, #3]
	if (last == user->first) {
    e8b2:	f891 e001 	ldrb.w	lr, [r1, #1]
	struct ticker_instance *instance = &_instance[instance_index];
    e8b6:	eb04 0584 	add.w	r5, r4, r4, lsl #2
    e8ba:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	last = user->last + 1;
    e8be:	1c75      	adds	r5, r6, #1
    e8c0:	b2ed      	uxtb	r5, r5
		last = 0U;
    e8c2:	45a8      	cmp	r8, r5
    e8c4:	bf98      	it	ls
    e8c6:	2500      	movls	r5, #0
	if (last == user->first) {
    e8c8:	45ae      	cmp	lr, r5
	struct ticker_instance *instance = &_instance[instance_index];
    e8ca:	eb0c 0484 	add.w	r4, ip, r4, lsl #2
	if (last == user->first) {
    e8ce:	d021      	beq.n	e914 <ticker_stop+0x80>
	user_op = &user->user_op[user->last];
    e8d0:	f8d1 c004 	ldr.w	ip, [r1, #4]
    e8d4:	eb06 0e46 	add.w	lr, r6, r6, lsl #1
    e8d8:	eb06 068e 	add.w	r6, r6, lr, lsl #2
    e8dc:	eb0c 0886 	add.w	r8, ip, r6, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    e8e0:	f04f 0e06 	mov.w	lr, #6
    e8e4:	f80c e026 	strb.w	lr, [ip, r6, lsl #2]
	user_op->fp_op_func = fp_op_func;
    e8e8:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
    e8ec:	2602      	movs	r6, #2
	user_op->op_context = op_context;
    e8ee:	9b06      	ldr	r3, [sp, #24]
	user_op->id = ticker_id;
    e8f0:	f888 2001 	strb.w	r2, [r8, #1]
	user_op->op_context = op_context;
    e8f4:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
    e8f8:	f8c8 6028 	str.w	r6, [r8, #40]	; 0x28
	user->last = last;
    e8fc:	70cd      	strb	r5, [r1, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    e8fe:	e9d7 3508 	ldrd	r3, r5, [r7, #32]
    e902:	4798      	blx	r3
    e904:	4623      	mov	r3, r4
    e906:	2200      	movs	r2, #0
    e908:	2104      	movs	r1, #4
    e90a:	47a8      	blx	r5
	return user_op->status;
    e90c:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
}
    e910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    e914:	2001      	movs	r0, #1
}
    e916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e91a:	bf00      	nop
    e91c:	20001a84 	.word	0x20001a84

0000e920 <ticker_ticks_now_get>:
	return cntr_cnt_get();
    e920:	f00a bf36 	b.w	19790 <cntr_cnt_get>

0000e924 <ll_addr_get>:
static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t *ll_addr_get(uint8_t addr_type, uint8_t *bdaddr)
{
	if (addr_type > 1) {
    e924:	2801      	cmp	r0, #1
    e926:	d810      	bhi.n	e94a <ll_addr_get+0x26>
		return NULL;
	}

	if (addr_type) {
    e928:	b938      	cbnz	r0, e93a <ll_addr_get+0x16>
		}

		return rnd_addr;
	}

	if (bdaddr) {
    e92a:	b181      	cbz	r1, e94e <ll_addr_get+0x2a>
    e92c:	4b0a      	ldr	r3, [pc, #40]	; (e958 <ll_addr_get+0x34>)
    e92e:	6818      	ldr	r0, [r3, #0]
    e930:	6008      	str	r0, [r1, #0]
    e932:	889a      	ldrh	r2, [r3, #4]
    e934:	808a      	strh	r2, [r1, #4]
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
	}

	return pub_addr;
    e936:	4618      	mov	r0, r3
    e938:	4770      	bx	lr
		if (bdaddr) {
    e93a:	b151      	cbz	r1, e952 <ll_addr_get+0x2e>
    e93c:	4b07      	ldr	r3, [pc, #28]	; (e95c <ll_addr_get+0x38>)
    e93e:	6818      	ldr	r0, [r3, #0]
    e940:	6008      	str	r0, [r1, #0]
    e942:	889a      	ldrh	r2, [r3, #4]
    e944:	808a      	strh	r2, [r1, #4]
	return pub_addr;
    e946:	4618      	mov	r0, r3
    e948:	4770      	bx	lr
		return NULL;
    e94a:	2000      	movs	r0, #0
    e94c:	4770      	bx	lr
	return pub_addr;
    e94e:	4802      	ldr	r0, [pc, #8]	; (e958 <ll_addr_get+0x34>)
}
    e950:	4770      	bx	lr
		return rnd_addr;
    e952:	4802      	ldr	r0, [pc, #8]	; (e95c <ll_addr_get+0x38>)
    e954:	4770      	bx	lr
    e956:	bf00      	nop
    e958:	20001ab0 	.word	0x20001ab0
    e95c:	20001ab8 	.word	0x20001ab8

0000e960 <ll_addr_set>:

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
    e960:	b538      	push	{r3, r4, r5, lr}
    e962:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER)) {
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		if (ull_adv_is_enabled(0) && !ll_adv_cmds_is_ext()) {
#else /* !CONFIG_BT_CTLR_ADV_EXT */
		if (ull_adv_is_enabled(0)) {
    e964:	2000      	movs	r0, #0
{
    e966:	460d      	mov	r5, r1
		if (ull_adv_is_enabled(0)) {
    e968:	f003 f936 	bl	11bd8 <ull_adv_is_enabled>
    e96c:	b978      	cbnz	r0, e98e <ll_addr_set+0x2e>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
    e96e:	b13c      	cbz	r4, e980 <ll_addr_set+0x20>
    e970:	4a08      	ldr	r2, [pc, #32]	; (e994 <ll_addr_set+0x34>)
    e972:	4603      	mov	r3, r0
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    e974:	6828      	ldr	r0, [r5, #0]
    e976:	6010      	str	r0, [r2, #0]
    e978:	88a9      	ldrh	r1, [r5, #4]
    e97a:	8091      	strh	r1, [r2, #4]
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
    e97c:	4618      	mov	r0, r3
}
    e97e:	bd38      	pop	{r3, r4, r5, pc}
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    e980:	4b05      	ldr	r3, [pc, #20]	; (e998 <ll_addr_set+0x38>)
    e982:	6828      	ldr	r0, [r5, #0]
    e984:	6018      	str	r0, [r3, #0]
    e986:	88aa      	ldrh	r2, [r5, #4]
    e988:	809a      	strh	r2, [r3, #4]
	return 0;
    e98a:	4620      	mov	r0, r4
}
    e98c:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
    e98e:	200c      	movs	r0, #12
}
    e990:	bd38      	pop	{r3, r4, r5, pc}
    e992:	bf00      	nop
    e994:	20001ab8 	.word	0x20001ab8
    e998:	20001ab0 	.word	0x20001ab0

0000e99c <ll_tx_pwr_lvl_get>:
#include "ll.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
	switch (handle_type) {
    e99c:	2802      	cmp	r0, #2
    e99e:	d001      	beq.n	e9a4 <ll_tx_pwr_lvl_get+0x8>
			}
			break;
		}
#endif /* CONFIG_BT_CONN */
		default: {
			return BT_HCI_ERR_UNKNOWN_CMD;
    e9a0:	2001      	movs	r0, #1
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
    e9a2:	4770      	bx	lr
{
    e9a4:	b538      	push	{r3, r4, r5, lr}
    e9a6:	4604      	mov	r4, r0
			conn = ll_connected_get(handle);
    e9a8:	4608      	mov	r0, r1
    e9aa:	461d      	mov	r5, r3
    e9ac:	f003 ff32 	bl	12814 <ll_connected_get>
			if (!conn) {
    e9b0:	b110      	cbz	r0, e9b8 <ll_tx_pwr_lvl_get+0x1c>
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
    e9b2:	2000      	movs	r0, #0
    e9b4:	7028      	strb	r0, [r5, #0]
}
    e9b6:	bd38      	pop	{r3, r4, r5, pc}
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
    e9b8:	4620      	mov	r0, r4
}
    e9ba:	bd38      	pop	{r3, r4, r5, pc}

0000e9bc <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
    e9bc:	2300      	movs	r3, #0
    e9be:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
    e9c0:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
    e9c2:	4770      	bx	lr

0000e9c4 <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(const struct device *unused)
{
    e9c4:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    e9c6:	4802      	ldr	r0, [pc, #8]	; (e9d0 <hci_driver_init+0xc>)
    e9c8:	f7f9 f87e 	bl	7ac8 <bt_hci_driver_register>

	return 0;
}
    e9cc:	2000      	movs	r0, #0
    e9ce:	bd08      	pop	{r3, pc}
    e9d0:	000249f4 	.word	0x000249f4

0000e9d4 <recv_thread>:
{
    e9d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	return z_impl_k_queue_get(queue, timeout);
    e9d6:	4d38      	ldr	r5, [pc, #224]	; (eab8 <recv_thread+0xe4>)
		LL_ASSERT(0);
    e9d8:	4f38      	ldr	r7, [pc, #224]	; (eabc <recv_thread+0xe8>)
    e9da:	4e39      	ldr	r6, [pc, #228]	; (eac0 <recv_thread+0xec>)
{
    e9dc:	b083      	sub	sp, #12
    e9de:	e016      	b.n	ea0e <recv_thread+0x3a>
	switch (class) {
    e9e0:	2b00      	cmp	r3, #0
    e9e2:	d13d      	bne.n	ea60 <recv_thread+0x8c>
		LL_ASSERT(0);
    e9e4:	4837      	ldr	r0, [pc, #220]	; (eac4 <recv_thread+0xf0>)
    e9e6:	f240 1347 	movw	r3, #327	; 0x147
    e9ea:	463a      	mov	r2, r7
    e9ec:	4631      	mov	r1, r6
    e9ee:	f00f ff95 	bl	1e91c <printk>
    e9f2:	4040      	eors	r0, r0
    e9f4:	f380 8811 	msr	BASEPRI, r0
    e9f8:	f04f 0003 	mov.w	r0, #3
    e9fc:	df02      	svc	2
	node_rx->hdr.next = NULL;
    e9fe:	9b01      	ldr	r3, [sp, #4]
    ea00:	2200      	movs	r2, #0
    ea02:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    ea04:	a801      	add	r0, sp, #4
    ea06:	f002 f939 	bl	10c7c <ll_rx_mem_release>
	z_impl_k_yield();
    ea0a:	f00e ffe1 	bl	1d9d0 <z_impl_k_yield>
	return z_impl_k_queue_get(queue, timeout);
    ea0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ea12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ea16:	4628      	mov	r0, r5
    ea18:	f00e fd12 	bl	1d440 <z_impl_k_queue_get>
		if (node_rx && !buf) {
    ea1c:	2800      	cmp	r0, #0
    ea1e:	d0f4      	beq.n	ea0a <recv_thread+0x36>
	uint8_t class = node_rx->hdr.user_meta;
    ea20:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
    ea22:	9001      	str	r0, [sp, #4]
	switch (class) {
    ea24:	2b04      	cmp	r3, #4
    ea26:	d9db      	bls.n	e9e0 <recv_thread+0xc>
    ea28:	2b05      	cmp	r3, #5
    ea2a:	d1db      	bne.n	e9e4 <recv_thread+0x10>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    ea2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ea30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ea34:	2003      	movs	r0, #3
    ea36:	f7f7 fe83 	bl	6740 <bt_buf_get_rx>
    ea3a:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    ea3c:	4601      	mov	r1, r0
    ea3e:	9801      	ldr	r0, [sp, #4]
    ea40:	f000 ff12 	bl	f868 <hci_acl_encode>
	node_rx->hdr.next = NULL;
    ea44:	9b01      	ldr	r3, [sp, #4]
    ea46:	2200      	movs	r2, #0
    ea48:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    ea4a:	a801      	add	r0, sp, #4
    ea4c:	f002 f916 	bl	10c7c <ll_rx_mem_release>
		if (buf) {
    ea50:	2c00      	cmp	r4, #0
    ea52:	d0da      	beq.n	ea0a <recv_thread+0x36>
			if (buf->len) {
    ea54:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    ea56:	4620      	mov	r0, r4
			if (buf->len) {
    ea58:	b1db      	cbz	r3, ea92 <recv_thread+0xbe>
				bt_recv(buf);
    ea5a:	f7f8 ff73 	bl	7944 <bt_recv>
    ea5e:	e7d4      	b.n	ea0a <recv_thread+0x36>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    ea60:	2b02      	cmp	r3, #2
    ea62:	d019      	beq.n	ea98 <recv_thread+0xc4>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    ea64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ea68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ea6c:	2001      	movs	r0, #1
    ea6e:	f7f7 fe67 	bl	6740 <bt_buf_get_rx>
    ea72:	4604      	mov	r4, r0
		if (buf) {
    ea74:	9801      	ldr	r0, [sp, #4]
    ea76:	b1cc      	cbz	r4, eaac <recv_thread+0xd8>
			hci_evt_encode(node_rx, buf);
    ea78:	4621      	mov	r1, r4
    ea7a:	f000 ff2f 	bl	f8dc <hci_evt_encode>
	node_rx->hdr.next = NULL;
    ea7e:	9b01      	ldr	r3, [sp, #4]
    ea80:	2200      	movs	r2, #0
    ea82:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    ea84:	a801      	add	r0, sp, #4
    ea86:	f002 f8f9 	bl	10c7c <ll_rx_mem_release>
			if (buf->len) {
    ea8a:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    ea8c:	4620      	mov	r0, r4
			if (buf->len) {
    ea8e:	2b00      	cmp	r3, #0
    ea90:	d1e3      	bne.n	ea5a <recv_thread+0x86>
				net_buf_unref(buf);
    ea92:	f00b fdb3 	bl	1a5fc <net_buf_unref>
    ea96:	e7b8      	b.n	ea0a <recv_thread+0x36>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
    ea98:	2200      	movs	r2, #0
    ea9a:	2300      	movs	r3, #0
    ea9c:	2101      	movs	r1, #1
    ea9e:	2000      	movs	r0, #0
    eaa0:	f7f7 fe84 	bl	67ac <bt_buf_get_evt>
    eaa4:	4604      	mov	r4, r0
		if (buf) {
    eaa6:	9801      	ldr	r0, [sp, #4]
    eaa8:	2c00      	cmp	r4, #0
    eaaa:	d1e5      	bne.n	ea78 <recv_thread+0xa4>
	node_rx->hdr.next = NULL;
    eaac:	6004      	str	r4, [r0, #0]
	ll_rx_mem_release((void **)&node_rx);
    eaae:	a801      	add	r0, sp, #4
    eab0:	f002 f8e4 	bl	10c7c <ll_rx_mem_release>
		if (buf) {
    eab4:	e7a9      	b.n	ea0a <recv_thread+0x36>
    eab6:	bf00      	nop
    eab8:	20000978 	.word	0x20000978
    eabc:	00024934 	.word	0x00024934
    eac0:	00024974 	.word	0x00024974
    eac4:	00024904 	.word	0x00024904

0000eac8 <prio_recv_thread>:
{
    eac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
    eacc:	f8df 80b4 	ldr.w	r8, [pc, #180]	; eb84 <prio_recv_thread+0xbc>
				k_fifo_put(&recv_fifo, node_rx);
    ead0:	4f2b      	ldr	r7, [pc, #172]	; (eb80 <prio_recv_thread+0xb8>)
{
    ead2:	b082      	sub	sp, #8
    ead4:	e00c      	b.n	eaf0 <prio_recv_thread+0x28>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    ead6:	f7f7 fe69 	bl	67ac <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    eada:	4622      	mov	r2, r4
    eadc:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    eae0:	4604      	mov	r4, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    eae2:	f001 f97b 	bl	fddc <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    eae6:	4620      	mov	r0, r4
    eae8:	f7f8 ffd0 	bl	7a8c <bt_recv_prio>
	z_impl_k_yield();
    eaec:	f00e ff70 	bl	1d9d0 <z_impl_k_yield>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    eaf0:	f10d 0102 	add.w	r1, sp, #2
    eaf4:	a801      	add	r0, sp, #4
    eaf6:	f001 ff07 	bl	10908 <ll_rx_get>
    eafa:	4604      	mov	r4, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    eafc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    eb00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    eb04:	2100      	movs	r1, #0
    eb06:	2013      	movs	r0, #19
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    eb08:	2c00      	cmp	r4, #0
    eb0a:	d1e4      	bne.n	ead6 <prio_recv_thread+0xe>
		if (node_rx) {
    eb0c:	9b01      	ldr	r3, [sp, #4]
    eb0e:	b193      	cbz	r3, eb36 <prio_recv_thread+0x6e>
			ll_rx_dequeue();
    eb10:	f001 ffe4 	bl	10adc <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    eb14:	9e01      	ldr	r6, [sp, #4]
    eb16:	4630      	mov	r0, r6
    eb18:	f001 f978 	bl	fe0c <hci_get_class>
			buf = process_prio_evt(node_rx, &evt_flags);
    eb1c:	9d01      	ldr	r5, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    eb1e:	7170      	strb	r0, [r6, #5]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
    eb20:	796b      	ldrb	r3, [r5, #5]
    eb22:	2b03      	cmp	r3, #3
    eb24:	d102      	bne.n	eb2c <prio_recv_thread+0x64>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
    eb26:	792b      	ldrb	r3, [r5, #4]
    eb28:	2b15      	cmp	r3, #21
    eb2a:	d00c      	beq.n	eb46 <prio_recv_thread+0x7e>
				k_fifo_put(&recv_fifo, node_rx);
    eb2c:	4629      	mov	r1, r5
    eb2e:	4638      	mov	r0, r7
    eb30:	f014 fc2e 	bl	23390 <k_queue_append>
			continue;
    eb34:	e7dc      	b.n	eaf0 <prio_recv_thread+0x28>
	return z_impl_k_sem_take(sem, timeout);
    eb36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    eb3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    eb3e:	4640      	mov	r0, r8
    eb40:	f00f f85a 	bl	1dbf8 <z_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    eb44:	e7d4      	b.n	eaf0 <prio_recv_thread+0x28>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    eb46:	4621      	mov	r1, r4
    eb48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    eb4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    eb50:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
    eb52:	88ee      	ldrh	r6, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    eb54:	f7f7 fe2a 	bl	67ac <bt_buf_get_evt>
    eb58:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
    eb5a:	4622      	mov	r2, r4
    eb5c:	f105 001c 	add.w	r0, r5, #28
    eb60:	4631      	mov	r1, r6
    eb62:	f000 fe69 	bl	f838 <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
    eb66:	4630      	mov	r0, r6
    eb68:	f000 fe76 	bl	f858 <hci_disconn_complete_process>
				bt_recv_prio(buf);
    eb6c:	4620      	mov	r0, r4
			if (buf) {
    eb6e:	b124      	cbz	r4, eb7a <prio_recv_thread+0xb2>
				bt_recv_prio(buf);
    eb70:	f7f8 ff8c 	bl	7a8c <bt_recv_prio>
					net_buf_unref(buf);
    eb74:	4620      	mov	r0, r4
    eb76:	f00b fd41 	bl	1a5fc <net_buf_unref>
    eb7a:	9d01      	ldr	r5, [sp, #4]
    eb7c:	e7d6      	b.n	eb2c <prio_recv_thread+0x64>
    eb7e:	bf00      	nop
    eb80:	20000978 	.word	0x20000978
    eb84:	20000948 	.word	0x20000948

0000eb88 <hci_driver_send>:
{
    eb88:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
    eb8a:	8983      	ldrh	r3, [r0, #12]
{
    eb8c:	b083      	sub	sp, #12
	if (!buf->len) {
    eb8e:	2b00      	cmp	r3, #0
    eb90:	d03a      	beq.n	ec08 <hci_driver_send+0x80>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    eb92:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
    eb94:	4604      	mov	r4, r0
    eb96:	b31b      	cbz	r3, ebe0 <hci_driver_send+0x58>
    eb98:	2b02      	cmp	r3, #2
    eb9a:	d00f      	beq.n	ebbc <hci_driver_send+0x34>
    eb9c:	4921      	ldr	r1, [pc, #132]	; (ec24 <hci_driver_send+0x9c>)
    eb9e:	4a22      	ldr	r2, [pc, #136]	; (ec28 <hci_driver_send+0xa0>)
		BT_ERR("Unknown HCI type %u", type);
    eba0:	4822      	ldr	r0, [pc, #136]	; (ec2c <hci_driver_send+0xa4>)
    eba2:	1a52      	subs	r2, r2, r1
    eba4:	08d2      	lsrs	r2, r2, #3
    eba6:	0192      	lsls	r2, r2, #6
    eba8:	4619      	mov	r1, r3
    ebaa:	f042 0201 	orr.w	r2, r2, #1
    ebae:	f010 fa9c 	bl	1f0ea <log_1>
		return -EINVAL;
    ebb2:	f06f 0515 	mvn.w	r5, #21
}
    ebb6:	4628      	mov	r0, r5
    ebb8:	b003      	add	sp, #12
    ebba:	bd30      	pop	{r4, r5, pc}
	err = hci_acl_handle(buf, &evt);
    ebbc:	a901      	add	r1, sp, #4
    ebbe:	f000 fd9b 	bl	f6f8 <hci_acl_handle>
	if (evt) {
    ebc2:	9b01      	ldr	r3, [sp, #4]
	err = hci_acl_handle(buf, &evt);
    ebc4:	4605      	mov	r5, r0
	if (evt) {
    ebc6:	b113      	cbz	r3, ebce <hci_driver_send+0x46>
		bt_recv_prio(evt);
    ebc8:	4618      	mov	r0, r3
    ebca:	f7f8 ff5f 	bl	7a8c <bt_recv_prio>
	if (!err) {
    ebce:	2d00      	cmp	r5, #0
    ebd0:	d1f1      	bne.n	ebb6 <hci_driver_send+0x2e>
		net_buf_unref(buf);
    ebd2:	4620      	mov	r0, r4
    ebd4:	f00b fd12 	bl	1a5fc <net_buf_unref>
    ebd8:	2500      	movs	r5, #0
}
    ebda:	4628      	mov	r0, r5
    ebdc:	b003      	add	sp, #12
    ebde:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf, (void **) &node_rx);
    ebe0:	a901      	add	r1, sp, #4
	struct node_rx_pdu *node_rx = NULL;
    ebe2:	9301      	str	r3, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
    ebe4:	f000 f9b8 	bl	ef58 <hci_cmd_handle>
	if (evt) {
    ebe8:	2800      	cmp	r0, #0
    ebea:	d0f2      	beq.n	ebd2 <hci_driver_send+0x4a>
		bt_recv_prio(evt);
    ebec:	f7f8 ff4e 	bl	7a8c <bt_recv_prio>
		if (node_rx) {
    ebf0:	9d01      	ldr	r5, [sp, #4]
    ebf2:	2d00      	cmp	r5, #0
    ebf4:	d0ed      	beq.n	ebd2 <hci_driver_send+0x4a>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    ebf6:	4628      	mov	r0, r5
    ebf8:	f001 f908 	bl	fe0c <hci_get_class>
    ebfc:	7168      	strb	r0, [r5, #5]
			k_fifo_put(&recv_fifo, node_rx);
    ebfe:	9901      	ldr	r1, [sp, #4]
    ec00:	480b      	ldr	r0, [pc, #44]	; (ec30 <hci_driver_send+0xa8>)
    ec02:	f014 fbc5 	bl	23390 <k_queue_append>
	if (!err) {
    ec06:	e7e4      	b.n	ebd2 <hci_driver_send+0x4a>
    ec08:	4b06      	ldr	r3, [pc, #24]	; (ec24 <hci_driver_send+0x9c>)
    ec0a:	4907      	ldr	r1, [pc, #28]	; (ec28 <hci_driver_send+0xa0>)
		BT_ERR("Empty HCI packet");
    ec0c:	4809      	ldr	r0, [pc, #36]	; (ec34 <hci_driver_send+0xac>)
    ec0e:	1ac9      	subs	r1, r1, r3
    ec10:	08c9      	lsrs	r1, r1, #3
    ec12:	0189      	lsls	r1, r1, #6
    ec14:	f041 0101 	orr.w	r1, r1, #1
    ec18:	f010 fa5a 	bl	1f0d0 <log_0>
		return -EINVAL;
    ec1c:	f06f 0515 	mvn.w	r5, #21
    ec20:	e7c9      	b.n	ebb6 <hci_driver_send+0x2e>
    ec22:	bf00      	nop
    ec24:	00023ed8 	.word	0x00023ed8
    ec28:	00023f28 	.word	0x00023f28
    ec2c:	0002498c 	.word	0x0002498c
    ec30:	20000978 	.word	0x20000978
    ec34:	00024978 	.word	0x00024978

0000ec38 <hci_driver_open>:
{
    ec38:	b5d0      	push	{r4, r6, r7, lr}
	err = ll_init(&sem_prio_recv);
    ec3a:	4822      	ldr	r0, [pc, #136]	; (ecc4 <hci_driver_open+0x8c>)
{
    ec3c:	b088      	sub	sp, #32
	err = ll_init(&sem_prio_recv);
    ec3e:	f001 fb59 	bl	102f4 <ll_init>
	if (err) {
    ec42:	4604      	mov	r4, r0
    ec44:	2800      	cmp	r0, #0
    ec46:	d12e      	bne.n	eca6 <hci_driver_open+0x6e>
	hci_init(NULL);
    ec48:	f001 f8f6 	bl	fe38 <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
    ec4c:	2600      	movs	r6, #0
    ec4e:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    ec50:	f06f 0309 	mvn.w	r3, #9
    ec54:	9303      	str	r3, [sp, #12]
    ec56:	e9cd 6706 	strd	r6, r7, [sp, #24]
    ec5a:	e9cd 4401 	strd	r4, r4, [sp, #4]
    ec5e:	4b1a      	ldr	r3, [pc, #104]	; (ecc8 <hci_driver_open+0x90>)
    ec60:	491a      	ldr	r1, [pc, #104]	; (eccc <hci_driver_open+0x94>)
    ec62:	9404      	str	r4, [sp, #16]
    ec64:	9400      	str	r4, [sp, #0]
    ec66:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    ec6a:	4819      	ldr	r0, [pc, #100]	; (ecd0 <hci_driver_open+0x98>)
    ec6c:	f00f f838 	bl	1dce0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    ec70:	4918      	ldr	r1, [pc, #96]	; (ecd4 <hci_driver_open+0x9c>)
    ec72:	4817      	ldr	r0, [pc, #92]	; (ecd0 <hci_driver_open+0x98>)
    ec74:	f014 fd0f 	bl	23696 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    ec78:	f06f 0307 	mvn.w	r3, #7
    ec7c:	9303      	str	r3, [sp, #12]
    ec7e:	e9cd 6706 	strd	r6, r7, [sp, #24]
    ec82:	e9cd 4401 	strd	r4, r4, [sp, #4]
    ec86:	4b14      	ldr	r3, [pc, #80]	; (ecd8 <hci_driver_open+0xa0>)
    ec88:	4914      	ldr	r1, [pc, #80]	; (ecdc <hci_driver_open+0xa4>)
    ec8a:	9404      	str	r4, [sp, #16]
    ec8c:	9400      	str	r4, [sp, #0]
    ec8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    ec92:	4813      	ldr	r0, [pc, #76]	; (ece0 <hci_driver_open+0xa8>)
    ec94:	f00f f824 	bl	1dce0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    ec98:	4912      	ldr	r1, [pc, #72]	; (ece4 <hci_driver_open+0xac>)
    ec9a:	4811      	ldr	r0, [pc, #68]	; (ece0 <hci_driver_open+0xa8>)
    ec9c:	f014 fcfb 	bl	23696 <z_impl_k_thread_name_set>
}
    eca0:	4620      	mov	r0, r4
    eca2:	b008      	add	sp, #32
    eca4:	bdd0      	pop	{r4, r6, r7, pc}
    eca6:	4b10      	ldr	r3, [pc, #64]	; (ece8 <hci_driver_open+0xb0>)
    eca8:	4a10      	ldr	r2, [pc, #64]	; (ecec <hci_driver_open+0xb4>)
		BT_ERR("LL initialization failed: %d", err);
    ecaa:	4811      	ldr	r0, [pc, #68]	; (ecf0 <hci_driver_open+0xb8>)
    ecac:	1ad2      	subs	r2, r2, r3
    ecae:	08d2      	lsrs	r2, r2, #3
    ecb0:	0192      	lsls	r2, r2, #6
    ecb2:	f042 0201 	orr.w	r2, r2, #1
    ecb6:	4621      	mov	r1, r4
    ecb8:	f010 fa17 	bl	1f0ea <log_1>
}
    ecbc:	4620      	mov	r0, r4
    ecbe:	b008      	add	sp, #32
    ecc0:	bdd0      	pop	{r4, r6, r7, pc}
    ecc2:	bf00      	nop
    ecc4:	20000948 	.word	0x20000948
    ecc8:	0000eac9 	.word	0x0000eac9
    eccc:	2000c9d0 	.word	0x2000c9d0
    ecd0:	200011a0 	.word	0x200011a0
    ecd4:	000249c0 	.word	0x000249c0
    ecd8:	0000e9d5 	.word	0x0000e9d5
    ecdc:	2000cb90 	.word	0x2000cb90
    ece0:	20001220 	.word	0x20001220
    ece4:	000249cc 	.word	0x000249cc
    ece8:	00023ed8 	.word	0x00023ed8
    ecec:	00023f28 	.word	0x00023f28
    ecf0:	000249a0 	.word	0x000249a0

0000ecf4 <cmd_complete_status>:
{
	return bt_hci_cmd_status_create(_opcode, status);
}

static struct net_buf *cmd_complete_status(uint8_t status)
{
    ecf4:	b538      	push	{r3, r4, r5, lr}
	struct net_buf *buf;
	struct bt_hci_evt_cc_status *ccst;

	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    ecf6:	4b07      	ldr	r3, [pc, #28]	; (ed14 <cmd_complete_status+0x20>)
{
    ecf8:	4605      	mov	r5, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    ecfa:	2101      	movs	r1, #1
    ecfc:	8818      	ldrh	r0, [r3, #0]
    ecfe:	f012 f95c 	bl	20fba <bt_hci_cmd_complete_create>
    ed02:	2101      	movs	r1, #1
    ed04:	4604      	mov	r4, r0
    ed06:	3008      	adds	r0, #8
    ed08:	f013 ff5d 	bl	22bc6 <net_buf_simple_add>
    ed0c:	4603      	mov	r3, r0
	ccst = net_buf_add(buf, sizeof(*ccst));
	ccst->status = status;

	return buf;
}
    ed0e:	4620      	mov	r0, r4
	ccst->status = status;
    ed10:	701d      	strb	r5, [r3, #0]
}
    ed12:	bd38      	pop	{r3, r4, r5, pc}
    ed14:	20002e76 	.word	0x20002e76

0000ed18 <meta_evt>:

static void *meta_evt(struct net_buf *buf, uint8_t subevt, uint8_t melen)
{
    ed18:	b570      	push	{r4, r5, r6, lr}
    ed1a:	f100 0408 	add.w	r4, r0, #8
    ed1e:	460e      	mov	r6, r1
    ed20:	4620      	mov	r0, r4
    ed22:	2102      	movs	r1, #2
    ed24:	4615      	mov	r5, r2
    ed26:	f013 ff4e 	bl	22bc6 <net_buf_simple_add>
	struct bt_hci_evt_le_meta_event *me;

	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    ed2a:	1c6b      	adds	r3, r5, #1
	hdr->evt = evt;
    ed2c:	223e      	movs	r2, #62	; 0x3e
    ed2e:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
    ed30:	7043      	strb	r3, [r0, #1]
    ed32:	2101      	movs	r1, #1
    ed34:	4620      	mov	r0, r4
    ed36:	f013 ff46 	bl	22bc6 <net_buf_simple_add>
	me = net_buf_add(buf, sizeof(*me));
	me->subevent = subevt;
    ed3a:	7006      	strb	r6, [r0, #0]
    ed3c:	4629      	mov	r1, r5
    ed3e:	4620      	mov	r0, r4

	return net_buf_add(buf, melen);
}
    ed40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ed44:	f013 bf3f 	b.w	22bc6 <net_buf_simple_add>

0000ed48 <encrypt_change.part.0>:
	sep->handle = sys_cpu_to_le16(handle);
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
}

static void encrypt_change(uint8_t err, uint16_t handle,
    ed48:	b570      	push	{r4, r5, r6, lr}
    ed4a:	f102 0508 	add.w	r5, r2, #8
    ed4e:	4604      	mov	r4, r0
    ed50:	460e      	mov	r6, r1
    ed52:	4628      	mov	r0, r5
    ed54:	2102      	movs	r1, #2
    ed56:	f013 ff36 	bl	22bc6 <net_buf_simple_add>
    ed5a:	4603      	mov	r3, r0
	hdr->evt = evt;
    ed5c:	2208      	movs	r2, #8
	hdr->len = len;
    ed5e:	2104      	movs	r1, #4
	hdr->evt = evt;
    ed60:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
    ed62:	7059      	strb	r1, [r3, #1]
    ed64:	4628      	mov	r0, r5
    ed66:	f013 ff2e 	bl	22bc6 <net_buf_simple_add>
	hci_evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
	ep = net_buf_add(buf, sizeof(*ep));

	ep->status = err;
	ep->handle = sys_cpu_to_le16(handle);
	ep->encrypt = !err ? 1 : 0;
    ed6a:	fab4 f384 	clz	r3, r4
    ed6e:	095b      	lsrs	r3, r3, #5
	ep->status = err;
    ed70:	7004      	strb	r4, [r0, #0]
	ep->encrypt = !err ? 1 : 0;
    ed72:	70c3      	strb	r3, [r0, #3]
	ep->handle = sys_cpu_to_le16(handle);
    ed74:	f8a0 6001 	strh.w	r6, [r0, #1]
}
    ed78:	bd70      	pop	{r4, r5, r6, pc}
    ed7a:	bf00      	nop

0000ed7c <le_remote_feat_complete>:
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
    ed7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    ed80:	4c17      	ldr	r4, [pc, #92]	; (ede0 <le_remote_feat_complete+0x64>)
    ed82:	6866      	ldr	r6, [r4, #4]
    ed84:	f04f 0900 	mov.w	r9, #0
    ed88:	464c      	mov	r4, r9
    ed8a:	f006 5500 	and.w	r5, r6, #536870912	; 0x20000000
{
    ed8e:	4690      	mov	r8, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    ed90:	ea54 0205 	orrs.w	r2, r4, r5
    ed94:	d009      	beq.n	edaa <le_remote_feat_complete+0x2e>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    ed96:	4a13      	ldr	r2, [pc, #76]	; (ede4 <le_remote_feat_complete+0x68>)
    ed98:	6812      	ldr	r2, [r2, #0]
    ed9a:	4607      	mov	r7, r0
    ed9c:	460e      	mov	r6, r1
    ed9e:	f002 0008 	and.w	r0, r2, #8
    eda2:	4649      	mov	r1, r9
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    eda4:	ea50 0201 	orrs.w	r2, r0, r1
    eda8:	d101      	bne.n	edae <le_remote_feat_complete+0x32>
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    edaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	sep = meta_evt(buf, BT_HCI_EVT_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    edae:	4618      	mov	r0, r3
    edb0:	220b      	movs	r2, #11
    edb2:	2104      	movs	r1, #4
    edb4:	f7ff ffb0 	bl	ed18 <meta_evt>
	sep->status = status;
    edb8:	7007      	strb	r7, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    edba:	f8a0 8001 	strh.w	r8, [r0, #1]
	if (!status) {
    edbe:	b947      	cbnz	r7, edd2 <le_remote_feat_complete+0x56>
    edc0:	f856 3f04 	ldr.w	r3, [r6, #4]!
    edc4:	6872      	ldr	r2, [r6, #4]
    edc6:	f8c0 2007 	str.w	r2, [r0, #7]
    edca:	f8c0 3003 	str.w	r3, [r0, #3]
}
    edce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
__ssp_bos_icheck3(memset, void *, int)
    edd2:	f8c0 9003 	str.w	r9, [r0, #3]
    edd6:	f8c0 9007 	str.w	r9, [r0, #7]
    edda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    edde:	bf00      	nop
    ede0:	20000128 	.word	0x20000128
    ede4:	20000130 	.word	0x20000130

0000ede8 <hci_disconn_complete_encode.part.0>:
void hci_disconn_complete_encode(struct pdu_data *pdu_data, uint16_t handle,
    ede8:	b570      	push	{r4, r5, r6, lr}
    edea:	f102 0408 	add.w	r4, r2, #8
    edee:	4605      	mov	r5, r0
    edf0:	460e      	mov	r6, r1
    edf2:	4620      	mov	r0, r4
    edf4:	2102      	movs	r1, #2
    edf6:	f013 fee6 	bl	22bc6 <net_buf_simple_add>
    edfa:	4603      	mov	r3, r0
	hdr->evt = evt;
    edfc:	2205      	movs	r2, #5
	hdr->len = len;
    edfe:	2104      	movs	r1, #4
	hdr->evt = evt;
    ee00:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
    ee02:	7059      	strb	r1, [r3, #1]
    ee04:	4620      	mov	r0, r4
    ee06:	f013 fede 	bl	22bc6 <net_buf_simple_add>
	ep->status = 0x00;
    ee0a:	2300      	movs	r3, #0
	ep->handle = sys_cpu_to_le16(handle);
    ee0c:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->status = 0x00;
    ee10:	7003      	strb	r3, [r0, #0]
	ep->reason = *((uint8_t *)pdu_data);
    ee12:	782b      	ldrb	r3, [r5, #0]
    ee14:	70c3      	strb	r3, [r0, #3]
}
    ee16:	bd70      	pop	{r4, r5, r6, pc}

0000ee18 <hci_cmd_complete>:
{
    ee18:	b538      	push	{r3, r4, r5, lr}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    ee1a:	4b06      	ldr	r3, [pc, #24]	; (ee34 <hci_cmd_complete+0x1c>)
{
    ee1c:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    ee1e:	8818      	ldrh	r0, [r3, #0]
{
    ee20:	460c      	mov	r4, r1
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    ee22:	f012 f8ca 	bl	20fba <bt_hci_cmd_complete_create>
    ee26:	4621      	mov	r1, r4
    ee28:	6028      	str	r0, [r5, #0]
}
    ee2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ee2e:	3008      	adds	r0, #8
    ee30:	f013 bec9 	b.w	22bc6 <net_buf_simple_add>
    ee34:	20002e76 	.word	0x20002e76

0000ee38 <hci_vendor_cmd_handle_common>:
{
    ee38:	b5f0      	push	{r4, r5, r6, r7, lr}
    ee3a:	1e43      	subs	r3, r0, #1
    ee3c:	b087      	sub	sp, #28
    ee3e:	4614      	mov	r4, r2
    ee40:	2b09      	cmp	r3, #9
    ee42:	d806      	bhi.n	ee52 <hci_vendor_cmd_handle_common+0x1a>
    ee44:	e8df f003 	tbb	[pc, r3]
    ee48:	05342109 	.word	0x05342109
    ee4c:	4e054305 	.word	0x4e054305
    ee50:	7869      	.short	0x7869
	return 0;
    ee52:	f06f 0015 	mvn.w	r0, #21
}
    ee56:	b007      	add	sp, #28
    ee58:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ee5a:	4620      	mov	r0, r4
    ee5c:	210d      	movs	r1, #13
    ee5e:	f7ff ffdb 	bl	ee18 <hci_cmd_complete>
    ee62:	4603      	mov	r3, r0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    ee64:	2202      	movs	r2, #2
	rp->status = 0x00;
    ee66:	2000      	movs	r0, #0
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    ee68:	2405      	movs	r4, #5
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
    ee6a:	2163      	movs	r1, #99	; 0x63
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    ee6c:	71dc      	strb	r4, [r3, #7]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
    ee6e:	7259      	strb	r1, [r3, #9]
	rp->status = 0x00;
    ee70:	7018      	strb	r0, [r3, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    ee72:	7098      	strb	r0, [r3, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
    ee74:	7118      	strb	r0, [r3, #4]
	rp->fw_variant = 0U;
    ee76:	7158      	strb	r0, [r3, #5]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    ee78:	7218      	strb	r0, [r3, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
    ee7a:	7298      	strb	r0, [r3, #10]
    ee7c:	72d8      	strb	r0, [r3, #11]
    ee7e:	7318      	strb	r0, [r3, #12]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    ee80:	705a      	strb	r2, [r3, #1]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
    ee82:	70da      	strb	r2, [r3, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    ee84:	719a      	strb	r2, [r3, #6]
}
    ee86:	b007      	add	sp, #28
    ee88:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ee8a:	4620      	mov	r0, r4
    ee8c:	2141      	movs	r1, #65	; 0x41
    ee8e:	f7ff ffc3 	bl	ee18 <hci_cmd_complete>
	rp->status = 0x00;
    ee92:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ee94:	4605      	mov	r5, r0
    ee96:	4621      	mov	r1, r4
	rp->status = 0x00;
    ee98:	f800 4b01 	strb.w	r4, [r0], #1
    ee9c:	2240      	movs	r2, #64	; 0x40
    ee9e:	f014 febc 	bl	23c1a <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    eea2:	22a7      	movs	r2, #167	; 0xa7
	rp->commands[1] |= BIT(0) | BIT(1);
    eea4:	2303      	movs	r3, #3
	return 0;
    eea6:	4620      	mov	r0, r4
	rp->commands[0] |= BIT(5) | BIT(7);
    eea8:	706a      	strb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    eeaa:	70ab      	strb	r3, [r5, #2]
}
    eeac:	b007      	add	sp, #28
    eeae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
    eeb0:	4620      	mov	r0, r4
    eeb2:	2109      	movs	r1, #9
    eeb4:	f7ff ffb0 	bl	ee18 <hci_cmd_complete>
	rp->status = 0x00;
    eeb8:	4601      	mov	r1, r0
    eeba:	2300      	movs	r3, #0
    eebc:	f801 3b01 	strb.w	r3, [r1], #1
	rp = hci_cmd_complete(evt, sizeof(*rp));
    eec0:	4602      	mov	r2, r0
	return 0;
    eec2:	4618      	mov	r0, r3
    eec4:	f8c2 3001 	str.w	r3, [r2, #1]
    eec8:	604b      	str	r3, [r1, #4]
}
    eeca:	b007      	add	sp, #28
    eecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    eece:	6889      	ldr	r1, [r1, #8]
    eed0:	2000      	movs	r0, #0
    eed2:	f7ff fd45 	bl	e960 <ll_addr_set>
	*evt = cmd_complete_status(0x00);
    eed6:	2000      	movs	r0, #0
    eed8:	f7ff ff0c 	bl	ecf4 <cmd_complete_status>
    eedc:	6020      	str	r0, [r4, #0]
    eede:	2000      	movs	r0, #0
}
    eee0:	b007      	add	sp, #28
    eee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	const char build_info[] = HCI_VS_BUILD_INFO;
    eee4:	4e1b      	ldr	r6, [pc, #108]	; (ef54 <hci_vendor_cmd_handle_common+0x11c>)
    eee6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    eee8:	ad01      	add	r5, sp, #4
    eeea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    eeec:	6833      	ldr	r3, [r6, #0]
    eeee:	802b      	strh	r3, [r5, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    eef0:	4620      	mov	r0, r4
    eef2:	2113      	movs	r1, #19
    eef4:	f7ff ff90 	bl	ee18 <hci_cmd_complete>
    eef8:	ad01      	add	r5, sp, #4
    eefa:	4607      	mov	r7, r0
    eefc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
	rp->status = 0x00;
    eefe:	463e      	mov	r6, r7
    ef00:	2400      	movs	r4, #0
    ef02:	f806 4b01 	strb.w	r4, [r6], #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    ef06:	882d      	ldrh	r5, [r5, #0]
    ef08:	f8c7 0001 	str.w	r0, [r7, #1]
	return 0;
    ef0c:	4620      	mov	r0, r4
    ef0e:	6071      	str	r1, [r6, #4]
    ef10:	60b2      	str	r2, [r6, #8]
    ef12:	60f3      	str	r3, [r6, #12]
    ef14:	8235      	strh	r5, [r6, #16]
}
    ef16:	b007      	add	sp, #28
    ef18:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp) +
    ef1a:	4620      	mov	r0, r4
    ef1c:	2118      	movs	r1, #24
    ef1e:	f7ff ff7b 	bl	ee18 <hci_cmd_complete>
	rp->status = 0x00;
    ef22:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp) +
    ef24:	4605      	mov	r5, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
    ef26:	2101      	movs	r1, #1
	rp->status = 0x00;
    ef28:	f800 4b02 	strb.w	r4, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
    ef2c:	f00b f9ec 	bl	1a308 <hci_vendor_read_static_addr>
    ef30:	7068      	strb	r0, [r5, #1]
	return 0;
    ef32:	4620      	mov	r0, r4
}
    ef34:	b007      	add	sp, #28
    ef36:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
    ef38:	4620      	mov	r0, r4
    ef3a:	2121      	movs	r1, #33	; 0x21
    ef3c:	f7ff ff6c 	bl	ee18 <hci_cmd_complete>
	rp->status = 0x00;
    ef40:	4601      	mov	r1, r0
    ef42:	2400      	movs	r4, #0
    ef44:	f801 4b11 	strb.w	r4, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
    ef48:	3001      	adds	r0, #1
    ef4a:	f00b fa53 	bl	1a3f4 <hci_vendor_read_key_hierarchy_roots>
	return 0;
    ef4e:	4620      	mov	r0, r4
}
    ef50:	b007      	add	sp, #28
    ef52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ef54:	00024a08 	.word	0x00024a08

0000ef58 <hci_cmd_handle>:
{
    ef58:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    ef5a:	8983      	ldrh	r3, [r0, #12]
{
    ef5c:	b08d      	sub	sp, #52	; 0x34
	struct net_buf *evt = NULL;
    ef5e:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
    ef60:	2b02      	cmp	r3, #2
	struct net_buf *evt = NULL;
    ef62:	9507      	str	r5, [sp, #28]
	if (cmd->len < sizeof(*chdr)) {
    ef64:	f240 80b6 	bls.w	f0d4 <hci_cmd_handle+0x17c>
	return net_buf_simple_pull_mem(&buf->b, len);
    ef68:	4604      	mov	r4, r0
    ef6a:	2103      	movs	r1, #3
    ef6c:	3008      	adds	r0, #8
    ef6e:	f013 fe52 	bl	22c16 <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
    ef72:	89a2      	ldrh	r2, [r4, #12]
    ef74:	7883      	ldrb	r3, [r0, #2]
    ef76:	429a      	cmp	r2, r3
    ef78:	f0c0 80d3 	bcc.w	f122 <hci_cmd_handle+0x1ca>
	_opcode = sys_le16_to_cpu(chdr->opcode);
    ef7c:	8801      	ldrh	r1, [r0, #0]
    ef7e:	4da4      	ldr	r5, [pc, #656]	; (f210 <hci_cmd_handle+0x2b8>)
	switch (BT_OGF(_opcode)) {
    ef80:	f5b1 5f10 	cmp.w	r1, #9216	; 0x2400
	_opcode = sys_le16_to_cpu(chdr->opcode);
    ef84:	b288      	uxth	r0, r1
    ef86:	8029      	strh	r1, [r5, #0]
	ocf = BT_OCF(_opcode);
    ef88:	f3c1 0309 	ubfx	r3, r1, #0, #10
	switch (BT_OGF(_opcode)) {
    ef8c:	ea4f 2291 	mov.w	r2, r1, lsr #10
    ef90:	d267      	bcs.n	f062 <hci_cmd_handle+0x10a>
    ef92:	2a00      	cmp	r2, #0
    ef94:	d06f      	beq.n	f076 <hci_cmd_handle+0x11e>
    ef96:	3a01      	subs	r2, #1
    ef98:	2a07      	cmp	r2, #7
    ef9a:	d86c      	bhi.n	f076 <hci_cmd_handle+0x11e>
    ef9c:	e8df f002 	tbb	[pc, r2]
    efa0:	57706b8c 	.word	0x57706b8c
    efa4:	046b6b6b 	.word	0x046b6b6b
	switch (ocf) {
    efa8:	3b01      	subs	r3, #1
    efaa:	2b4d      	cmp	r3, #77	; 0x4d
    efac:	d863      	bhi.n	f076 <hci_cmd_handle+0x11e>
    efae:	e8df f013 	tbh	[pc, r3, lsl #1]
    efb2:	01df      	.short	0x01df
    efb4:	01bf01d2 	.word	0x01bf01d2
    efb8:	01b80062 	.word	0x01b80062
    efbc:	013b01a8 	.word	0x013b01a8
    efc0:	01a00126 	.word	0x01a00126
    efc4:	00620199 	.word	0x00620199
    efc8:	00620062 	.word	0x00620062
    efcc:	018d0062 	.word	0x018d0062
    efd0:	01820188 	.word	0x01820188
    efd4:	0151017c 	.word	0x0151017c
    efd8:	016c0062 	.word	0x016c0062
    efdc:	033b0163 	.word	0x033b0163
    efe0:	0062032f 	.word	0x0062032f
    efe4:	03210329 	.word	0x03210329
    efe8:	0062030b 	.word	0x0062030b
    efec:	00620062 	.word	0x00620062
    eff0:	02f002fc 	.word	0x02f002fc
    eff4:	02d202e8 	.word	0x02d202e8
    eff8:	006202c9 	.word	0x006202c9
    effc:	02c00062 	.word	0x02c00062
    f000:	02b502ba 	.word	0x02b502ba
    f004:	029402a9 	.word	0x029402a9
    f008:	0278027f 	.word	0x0278027f
    f00c:	024f0270 	.word	0x024f0270
    f010:	02160227 	.word	0x02160227
    f014:	006201e9 	.word	0x006201e9
    f018:	00620062 	.word	0x00620062
    f01c:	00620062 	.word	0x00620062
    f020:	00620062 	.word	0x00620062
    f024:	00620062 	.word	0x00620062
    f028:	00620062 	.word	0x00620062
    f02c:	00620062 	.word	0x00620062
    f030:	00620062 	.word	0x00620062
    f034:	00620062 	.word	0x00620062
    f038:	00620062 	.word	0x00620062
    f03c:	00620062 	.word	0x00620062
    f040:	00620062 	.word	0x00620062
    f044:	01440062 	.word	0x01440062
    f048:	00620062 	.word	0x00620062
    f04c:	011f      	.short	0x011f
	switch (ocf) {
    f04e:	3b01      	subs	r3, #1
    f050:	2b08      	cmp	r3, #8
    f052:	d810      	bhi.n	f076 <hci_cmd_handle+0x11e>
    f054:	e8df f003 	tbb	[pc, r3]
    f058:	0f7585b5 	.word	0x0f7585b5
    f05c:	0f0f0f0f 	.word	0x0f0f0f0f
    f060:	69          	.byte	0x69
    f061:	00          	.byte	0x00
	switch (BT_OGF(_opcode)) {
    f062:	2a3f      	cmp	r2, #63	; 0x3f
    f064:	d107      	bne.n	f076 <hci_cmd_handle+0x11e>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
    f066:	4621      	mov	r1, r4
    f068:	4618      	mov	r0, r3
    f06a:	aa07      	add	r2, sp, #28
    f06c:	f7ff fee4 	bl	ee38 <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
    f070:	3016      	adds	r0, #22
    f072:	d154      	bne.n	f11e <hci_cmd_handle+0x1c6>
    f074:	8828      	ldrh	r0, [r5, #0]
	return bt_hci_cmd_status_create(_opcode, status);
    f076:	2101      	movs	r1, #1
    f078:	f011 ffb1 	bl	20fde <bt_hci_cmd_status_create>
}
    f07c:	b00d      	add	sp, #52	; 0x34
    f07e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
    f080:	2b63      	cmp	r3, #99	; 0x63
    f082:	f000 8325 	beq.w	f6d0 <hci_cmd_handle+0x778>
    f086:	d837      	bhi.n	f0f8 <hci_cmd_handle+0x1a0>
    f088:	2b03      	cmp	r3, #3
    f08a:	f000 8307 	beq.w	f69c <hci_cmd_handle+0x744>
    f08e:	2b2d      	cmp	r3, #45	; 0x2d
    f090:	d12d      	bne.n	f0ee <hci_cmd_handle+0x196>
		read_tx_power_level(cmd, evt);
    f092:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f094:	2104      	movs	r1, #4
    f096:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    f098:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
    f09a:	789e      	ldrb	r6, [r3, #2]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f09c:	f7ff febc 	bl	ee18 <hci_cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    f0a0:	b2a9      	uxth	r1, r5
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f0a2:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
    f0a4:	1cc3      	adds	r3, r0, #3
    f0a6:	4632      	mov	r2, r6
    f0a8:	2002      	movs	r0, #2
    f0aa:	f7ff fc77 	bl	e99c <ll_tx_pwr_lvl_get>
	rp->status = status;
    f0ae:	7020      	strb	r0, [r4, #0]
	rp->handle = sys_cpu_to_le16(handle);
    f0b0:	9807      	ldr	r0, [sp, #28]
    f0b2:	f8a4 5001 	strh.w	r5, [r4, #1]
}
    f0b6:	e7e1      	b.n	f07c <hci_cmd_handle+0x124>
	switch (ocf) {
    f0b8:	2b06      	cmp	r3, #6
    f0ba:	f000 82ce 	beq.w	f65a <hci_cmd_handle+0x702>
    f0be:	2b1d      	cmp	r3, #29
    f0c0:	d1d9      	bne.n	f076 <hci_cmd_handle+0x11e>
	handle = sys_le16_to_cpu(cmd->handle);
    f0c2:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
    f0c4:	8818      	ldrh	r0, [r3, #0]
    f0c6:	f003 fd2b 	bl	12b20 <ll_version_ind_send>
    f0ca:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    f0cc:	8828      	ldrh	r0, [r5, #0]
    f0ce:	f011 ff86 	bl	20fde <bt_hci_cmd_status_create>
}
    f0d2:	e7d3      	b.n	f07c <hci_cmd_handle+0x124>
    f0d4:	494f      	ldr	r1, [pc, #316]	; (f214 <hci_cmd_handle+0x2bc>)
    f0d6:	4b50      	ldr	r3, [pc, #320]	; (f218 <hci_cmd_handle+0x2c0>)
		BT_ERR("No HCI Command header");
    f0d8:	4850      	ldr	r0, [pc, #320]	; (f21c <hci_cmd_handle+0x2c4>)
    f0da:	1ac9      	subs	r1, r1, r3
    f0dc:	08c9      	lsrs	r1, r1, #3
		BT_ERR("Invalid HCI CMD packet length");
    f0de:	0189      	lsls	r1, r1, #6
    f0e0:	f041 0101 	orr.w	r1, r1, #1
    f0e4:	f00f fff4 	bl	1f0d0 <log_0>
		return NULL;
    f0e8:	4628      	mov	r0, r5
}
    f0ea:	b00d      	add	sp, #52	; 0x34
    f0ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
    f0ee:	2b01      	cmp	r3, #1
    f0f0:	d1c1      	bne.n	f076 <hci_cmd_handle+0x11e>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    f0f2:	68a2      	ldr	r2, [r4, #8]
	event_mask = sys_get_le64(cmd->events);
    f0f4:	4b4a      	ldr	r3, [pc, #296]	; (f220 <hci_cmd_handle+0x2c8>)
    f0f6:	e13d      	b.n	f374 <hci_cmd_handle+0x41c>
	switch (ocf) {
    f0f8:	2b7b      	cmp	r3, #123	; 0x7b
    f0fa:	f000 82bb 	beq.w	f674 <hci_cmd_handle+0x71c>
    f0fe:	2b7c      	cmp	r3, #124	; 0x7c
    f100:	d1b9      	bne.n	f076 <hci_cmd_handle+0x11e>
		write_auth_payload_timeout(cmd, evt);
    f102:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    f104:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    f106:	8859      	ldrh	r1, [r3, #2]
    f108:	4628      	mov	r0, r5
    f10a:	f003 fe43 	bl	12d94 <ll_apto_set>
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    f10e:	4604      	mov	r4, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f110:	2103      	movs	r1, #3
    f112:	a807      	add	r0, sp, #28
    f114:	f7ff fe80 	bl	ee18 <hci_cmd_complete>
	rp->status = status;
    f118:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    f11a:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (err == -EINVAL) {
    f11e:	9807      	ldr	r0, [sp, #28]
    f120:	e7ac      	b.n	f07c <hci_cmd_handle+0x124>
    f122:	493c      	ldr	r1, [pc, #240]	; (f214 <hci_cmd_handle+0x2bc>)
    f124:	4b3c      	ldr	r3, [pc, #240]	; (f218 <hci_cmd_handle+0x2c0>)
		BT_ERR("Invalid HCI CMD packet length");
    f126:	483f      	ldr	r0, [pc, #252]	; (f224 <hci_cmd_handle+0x2cc>)
    f128:	e7d7      	b.n	f0da <hci_cmd_handle+0x182>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f12a:	2107      	movs	r1, #7
    f12c:	a807      	add	r0, sp, #28
    f12e:	f7ff fe73 	bl	ee18 <hci_cmd_complete>
	rp->status = 0x00;
    f132:	4601      	mov	r1, r0
    f134:	2000      	movs	r0, #0
    f136:	f801 0b01 	strb.w	r0, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    f13a:	f7ff fbf3 	bl	e924 <ll_addr_get>
	if (err == -EINVAL) {
    f13e:	9807      	ldr	r0, [sp, #28]
    f140:	e79c      	b.n	f07c <hci_cmd_handle+0x124>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f142:	2109      	movs	r1, #9
    f144:	a807      	add	r0, sp, #28
    f146:	f7ff fe67 	bl	ee18 <hci_cmd_complete>
	rp->status = 0x00;
    f14a:	4602      	mov	r2, r0
    f14c:	2100      	movs	r1, #0
    f14e:	f802 1b01 	strb.w	r1, [r2], #1
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f152:	4603      	mov	r3, r0
__ssp_bos_icheck3(memset, void *, int)
    f154:	f8c0 1001 	str.w	r1, [r0, #1]
	rp->features[4] = (1 << 5) | (1 << 6);
    f158:	2460      	movs	r4, #96	; 0x60
    f15a:	6051      	str	r1, [r2, #4]
    f15c:	9807      	ldr	r0, [sp, #28]
    f15e:	715c      	strb	r4, [r3, #5]
	if (err == -EINVAL) {
    f160:	e78c      	b.n	f07c <hci_cmd_handle+0x124>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f162:	2141      	movs	r1, #65	; 0x41
    f164:	a807      	add	r0, sp, #28
    f166:	f7ff fe57 	bl	ee18 <hci_cmd_complete>
	rp->status = 0x00;
    f16a:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f16c:	4604      	mov	r4, r0
    f16e:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    f170:	f800 1b01 	strb.w	r1, [r0], #1
    f174:	f014 fd51 	bl	23c1a <memset>
	rp->commands[0] |= BIT(5);
    f178:	2320      	movs	r3, #32
    f17a:	7063      	strb	r3, [r4, #1]
	rp->commands[14] |= BIT(3) | BIT(5);
    f17c:	2228      	movs	r2, #40	; 0x28
	rp->commands[5] |= BIT(6) | BIT(7);
    f17e:	23c0      	movs	r3, #192	; 0xc0
	rp->commands[15] |= BIT(1);
    f180:	2502      	movs	r5, #2
	rp->commands[26] |= BIT(0) | BIT(1);
    f182:	20c3      	movs	r0, #195	; 0xc3
	rp->commands[28] |= BIT(1) | BIT(2);
    f184:	210e      	movs	r1, #14
	rp->commands[5] |= BIT(6) | BIT(7);
    f186:	71a3      	strb	r3, [r4, #6]
	rp->commands[14] |= BIT(3) | BIT(5);
    f188:	73e2      	strb	r2, [r4, #15]
	rp->commands[32] |= BIT(4) | BIT(5);
    f18a:	2330      	movs	r3, #48	; 0x30
	rp->commands[33] |= BIT(6) | BIT(7);
    f18c:	22f0      	movs	r2, #240	; 0xf0
	rp->commands[15] |= BIT(1);
    f18e:	7425      	strb	r5, [r4, #16]
	rp->commands[26] |= BIT(0) | BIT(1);
    f190:	76e0      	strb	r0, [r4, #27]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    f192:	25f9      	movs	r5, #249	; 0xf9
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    f194:	207f      	movs	r0, #127	; 0x7f
	rp->commands[28] |= BIT(1) | BIT(2);
    f196:	7761      	strb	r1, [r4, #29]
	rp->commands[32] |= BIT(4) | BIT(5);
    f198:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	rp->commands[38] |= BIT(7);
    f19c:	2180      	movs	r1, #128	; 0x80
	rp->commands[10] |= BIT(2);
    f19e:	2304      	movs	r3, #4
	rp->commands[33] |= BIT(6) | BIT(7);
    f1a0:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    f1a4:	22f7      	movs	r2, #247	; 0xf7
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    f1a6:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    f1aa:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
    f1ae:	9807      	ldr	r0, [sp, #28]
	rp->commands[38] |= BIT(7);
    f1b0:	f884 1027 	strb.w	r1, [r4, #39]	; 0x27
	rp->commands[10] |= BIT(2);
    f1b4:	72e3      	strb	r3, [r4, #11]
	rp->commands[22] |= BIT(2);
    f1b6:	75e3      	strb	r3, [r4, #23]
	rp->commands[39] |= BIT(2);
    f1b8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    f1bc:	76a2      	strb	r2, [r4, #26]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    f1be:	7722      	strb	r2, [r4, #28]
	if (err == -EINVAL) {
    f1c0:	e75c      	b.n	f07c <hci_cmd_handle+0x124>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f1c2:	2109      	movs	r1, #9
    f1c4:	a807      	add	r0, sp, #28
    f1c6:	f7ff fe27 	bl	ee18 <hci_cmd_complete>
    f1ca:	4603      	mov	r3, r0
	rp->status = 0x00;
    f1cc:	2200      	movs	r2, #0
	rp->hci_version = LL_VERSION_NUMBER;
    f1ce:	200b      	movs	r0, #11
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
    f1d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    f1d4:	f06f 050e 	mvn.w	r5, #14
    f1d8:	2405      	movs	r4, #5
	rp->status = 0x00;
    f1da:	701a      	strb	r2, [r3, #0]
	rp->hci_version = LL_VERSION_NUMBER;
    f1dc:	7058      	strb	r0, [r3, #1]
	rp->lmp_version = LL_VERSION_NUMBER;
    f1de:	7118      	strb	r0, [r3, #4]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    f1e0:	715d      	strb	r5, [r3, #5]
    f1e2:	9807      	ldr	r0, [sp, #28]
    f1e4:	719c      	strb	r4, [r3, #6]
	rp->hci_revision = sys_cpu_to_le16(0);
    f1e6:	709a      	strb	r2, [r3, #2]
    f1e8:	70da      	strb	r2, [r3, #3]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
    f1ea:	71d9      	strb	r1, [r3, #7]
    f1ec:	7219      	strb	r1, [r3, #8]
	if (err == -EINVAL) {
    f1ee:	e745      	b.n	f07c <hci_cmd_handle+0x124>
		le_set_privacy_mode(cmd, evt);
    f1f0:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    f1f2:	79c1      	ldrb	r1, [r0, #7]
    f1f4:	f008 fa98 	bl	17728 <ll_priv_mode_set>
	*evt = cmd_complete_status(status);
    f1f8:	f7ff fd7c 	bl	ecf4 <cmd_complete_status>
	if (err == -EINVAL) {
    f1fc:	e73e      	b.n	f07c <hci_cmd_handle+0x124>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
    f1fe:	68a1      	ldr	r1, [r4, #8]
    f200:	f811 0b01 	ldrb.w	r0, [r1], #1
    f204:	f002 fd4a 	bl	11c9c <ll_adv_data_set>
	*evt = cmd_complete_status(status);
    f208:	f7ff fd74 	bl	ecf4 <cmd_complete_status>
	if (err == -EINVAL) {
    f20c:	e736      	b.n	f07c <hci_cmd_handle+0x124>
    f20e:	bf00      	nop
    f210:	20002e76 	.word	0x20002e76
    f214:	00023f20 	.word	0x00023f20
    f218:	00023ed8 	.word	0x00023ed8
    f21c:	00024a1c 	.word	0x00024a1c
    f220:	20000128 	.word	0x20000128
    f224:	00024a34 	.word	0x00024a34
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f228:	2102      	movs	r1, #2
    f22a:	a807      	add	r0, sp, #28
    f22c:	f7ff fdf4 	bl	ee18 <hci_cmd_complete>
	rp->status = 0x00;
    f230:	2300      	movs	r3, #0
    f232:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
    f234:	7043      	strb	r3, [r0, #1]
	if (err == -EINVAL) {
    f236:	9807      	ldr	r0, [sp, #28]
    f238:	e720      	b.n	f07c <hci_cmd_handle+0x124>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f23a:	2103      	movs	r1, #3
    f23c:	a807      	add	r0, sp, #28
    f23e:	f7ff fdeb 	bl	ee18 <hci_cmd_complete>
	rp->status = 0x00;
    f242:	4601      	mov	r1, r0
    f244:	2300      	movs	r3, #0
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    f246:	3001      	adds	r0, #1
	rp->status = 0x00;
    f248:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    f24c:	f7ff fbb6 	bl	e9bc <ll_tx_pwr_get>
	if (err == -EINVAL) {
    f250:	9807      	ldr	r0, [sp, #28]
    f252:	e713      	b.n	f07c <hci_cmd_handle+0x124>
		le_conn_update(cmd, evt);
    f254:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
    f256:	8911      	ldrh	r1, [r2, #8]
    f258:	8853      	ldrh	r3, [r2, #2]
    f25a:	8810      	ldrh	r0, [r2, #0]
    f25c:	9102      	str	r1, [sp, #8]
    f25e:	88d1      	ldrh	r1, [r2, #6]
    f260:	9101      	str	r1, [sp, #4]
    f262:	8892      	ldrh	r2, [r2, #4]
    f264:	9200      	str	r2, [sp, #0]
    f266:	2200      	movs	r2, #0
    f268:	4611      	mov	r1, r2
    f26a:	f003 fb3b 	bl	128e4 <ll_conn_update>
    f26e:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    f270:	8828      	ldrh	r0, [r5, #0]
    f272:	f011 feb4 	bl	20fde <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
    f276:	e701      	b.n	f07c <hci_cmd_handle+0x124>
	handle = sys_le16_to_cpu(cmd->handle);
    f278:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
    f27a:	8818      	ldrh	r0, [r3, #0]
    f27c:	f003 fc2a 	bl	12ad4 <ll_feature_req_send>
    f280:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    f282:	8828      	ldrh	r0, [r5, #0]
    f284:	f011 feab 	bl	20fde <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
    f288:	e6f8      	b.n	f07c <hci_cmd_handle+0x124>
	handle = sys_le16_to_cpu(cmd->handle);
    f28a:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f28c:	2108      	movs	r1, #8
    f28e:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    f290:	881d      	ldrh	r5, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f292:	f7ff fdc1 	bl	ee18 <hci_cmd_complete>
    f296:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
    f298:	1ce1      	adds	r1, r4, #3
	handle = sys_le16_to_cpu(cmd->handle);
    f29a:	b2a8      	uxth	r0, r5
	status = ll_chm_get(handle, rp->ch_map);
    f29c:	f003 fbb8 	bl	12a10 <ll_chm_get>
	rp->status = status;
    f2a0:	7020      	strb	r0, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
    f2a2:	9807      	ldr	r0, [sp, #28]
    f2a4:	f8a4 5001 	strh.w	r5, [r4, #1]
	if (err == -EINVAL) {
    f2a8:	e6e8      	b.n	f07c <hci_cmd_handle+0x124>
	status = ll_wl_remove(&cmd->addr);
    f2aa:	68a0      	ldr	r0, [r4, #8]
    f2ac:	f007 fd82 	bl	16db4 <ll_wl_remove>
	*evt = cmd_complete_status(status);
    f2b0:	f7ff fd20 	bl	ecf4 <cmd_complete_status>
	if (err == -EINVAL) {
    f2b4:	e6e2      	b.n	f07c <hci_cmd_handle+0x124>
	status = ll_wl_add(&cmd->addr);
    f2b6:	68a0      	ldr	r0, [r4, #8]
    f2b8:	f008 f82c 	bl	17314 <ll_wl_add>
	*evt = cmd_complete_status(status);
    f2bc:	f7ff fd1a 	bl	ecf4 <cmd_complete_status>
	if (err == -EINVAL) {
    f2c0:	e6dc      	b.n	f07c <hci_cmd_handle+0x124>
	status = ll_wl_clear();
    f2c2:	f007 fd4d 	bl	16d60 <ll_wl_clear>
	*evt = cmd_complete_status(status);
    f2c6:	f7ff fd15 	bl	ecf4 <cmd_complete_status>
	if (err == -EINVAL) {
    f2ca:	e6d7      	b.n	f07c <hci_cmd_handle+0x124>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f2cc:	2102      	movs	r1, #2
    f2ce:	a807      	add	r0, sp, #28
    f2d0:	f7ff fda2 	bl	ee18 <hci_cmd_complete>
	rp->status = 0x00;
    f2d4:	2300      	movs	r3, #0
    f2d6:	7003      	strb	r3, [r0, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f2d8:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
    f2da:	f007 fd3f 	bl	16d5c <ll_wl_size_get>
    f2de:	7060      	strb	r0, [r4, #1]
	if (err == -EINVAL) {
    f2e0:	9807      	ldr	r0, [sp, #28]
    f2e2:	e6cb      	b.n	f07c <hci_cmd_handle+0x124>
	status = ll_adv_enable(cmd->enable);
    f2e4:	68a3      	ldr	r3, [r4, #8]
    f2e6:	7818      	ldrb	r0, [r3, #0]
    f2e8:	f7f1 ffe6 	bl	12b8 <ll_adv_enable>
	*evt = cmd_complete_status(status);
    f2ec:	f7ff fd02 	bl	ecf4 <cmd_complete_status>
	if (err == -EINVAL) {
    f2f0:	e6c4      	b.n	f07c <hci_cmd_handle+0x124>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
    f2f2:	68a1      	ldr	r1, [r4, #8]
    f2f4:	f811 0b01 	ldrb.w	r0, [r1], #1
    f2f8:	f002 fd02 	bl	11d00 <ll_adv_scan_rsp_set>
	*evt = cmd_complete_status(status);
    f2fc:	f7ff fcfa 	bl	ecf4 <cmd_complete_status>
	if (err == -EINVAL) {
    f300:	e6bc      	b.n	f07c <hci_cmd_handle+0x124>
		le_set_adv_param(cmd, evt);
    f302:	68a4      	ldr	r4, [r4, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
    f304:	7ba5      	ldrb	r5, [r4, #14]
    f306:	79a3      	ldrb	r3, [r4, #6]
    f308:	7962      	ldrb	r2, [r4, #5]
    f30a:	7921      	ldrb	r1, [r4, #4]
    f30c:	8820      	ldrh	r0, [r4, #0]
    f30e:	9502      	str	r5, [sp, #8]
    f310:	7b65      	ldrb	r5, [r4, #13]
    f312:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
    f314:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
    f316:	9400      	str	r4, [sp, #0]
    f318:	f002 fadc 	bl	118d4 <ll_adv_params_set>
	*evt = cmd_complete_status(status);
    f31c:	f7ff fcea 	bl	ecf4 <cmd_complete_status>
	if (err == -EINVAL) {
    f320:	e6ac      	b.n	f07c <hci_cmd_handle+0x124>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    f322:	68a1      	ldr	r1, [r4, #8]
    f324:	2001      	movs	r0, #1
    f326:	f7ff fb1b 	bl	e960 <ll_addr_set>
	*evt = cmd_complete_status(status);
    f32a:	f7ff fce3 	bl	ecf4 <cmd_complete_status>
	if (err == -EINVAL) {
    f32e:	e6a5      	b.n	f07c <hci_cmd_handle+0x124>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f330:	2109      	movs	r1, #9
    f332:	a807      	add	r0, sp, #28
    f334:	f7ff fd70 	bl	ee18 <hci_cmd_complete>
	dst[0] = val;
    f338:	247f      	movs	r4, #127	; 0x7f
	rp->status = 0x00;
    f33a:	2300      	movs	r3, #0
	dst[1] = val >> 8;
    f33c:	2141      	movs	r1, #65	; 0x41
	dst[0] = val;
    f33e:	2201      	movs	r2, #1
    f340:	7044      	strb	r4, [r0, #1]
	dst[1] = val >> 8;
    f342:	7081      	strb	r1, [r0, #2]
	dst[0] = val;
    f344:	70c2      	strb	r2, [r0, #3]
    f346:	7003      	strb	r3, [r0, #0]
    f348:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
    f34a:	7203      	strb	r3, [r0, #8]
    f34c:	7103      	strb	r3, [r0, #4]
	dst[0] = val;
    f34e:	7143      	strb	r3, [r0, #5]
	dst[1] = val >> 8;
    f350:	7183      	strb	r3, [r0, #6]
	if (err == -EINVAL) {
    f352:	9807      	ldr	r0, [sp, #28]
    f354:	e692      	b.n	f07c <hci_cmd_handle+0x124>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f356:	2104      	movs	r1, #4
    f358:	a807      	add	r0, sp, #28
    f35a:	f7ff fd5d 	bl	ee18 <hci_cmd_complete>
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
    f35e:	2203      	movs	r2, #3
	rp->status = 0x00;
    f360:	2300      	movs	r3, #0
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
    f362:	70c2      	strb	r2, [r0, #3]
	rp->status = 0x00;
    f364:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
    f366:	221b      	movs	r2, #27
    f368:	7042      	strb	r2, [r0, #1]
    f36a:	7083      	strb	r3, [r0, #2]
	if (err == -EINVAL) {
    f36c:	9807      	ldr	r0, [sp, #28]
    f36e:	e685      	b.n	f07c <hci_cmd_handle+0x124>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    f370:	68a2      	ldr	r2, [r4, #8]
	le_event_mask = sys_get_le64(cmd->events);
    f372:	4bbf      	ldr	r3, [pc, #764]	; (f670 <hci_cmd_handle+0x718>)
    f374:	6811      	ldr	r1, [r2, #0]
    f376:	6852      	ldr	r2, [r2, #4]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    f378:	605a      	str	r2, [r3, #4]
    f37a:	6019      	str	r1, [r3, #0]
	*evt = cmd_complete_status(0x00);
    f37c:	2000      	movs	r0, #0
    f37e:	f7ff fcb9 	bl	ecf4 <cmd_complete_status>
}
    f382:	e67b      	b.n	f07c <hci_cmd_handle+0x124>
		le_set_phy(cmd, evt);
    f384:	68a2      	ldr	r2, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    f386:	7894      	ldrb	r4, [r2, #2]
    f388:	78d1      	ldrb	r1, [r2, #3]
	handle = sys_le16_to_cpu(cmd->handle);
    f38a:	8817      	ldrh	r7, [r2, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    f38c:	f8b2 6005 	ldrh.w	r6, [r2, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    f390:	07e3      	lsls	r3, r4, #31
		cmd->tx_phys |= mask_phys;
    f392:	bf48      	it	mi
    f394:	f041 0103 	orrmi.w	r1, r1, #3
    f398:	7913      	ldrb	r3, [r2, #4]
    f39a:	bf48      	it	mi
    f39c:	70d1      	strbmi	r1, [r2, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    f39e:	07a4      	lsls	r4, r4, #30
		cmd->rx_phys |= mask_phys;
    f3a0:	bf44      	itt	mi
    f3a2:	f043 0303 	orrmi.w	r3, r3, #3
    f3a6:	7113      	strbmi	r3, [r2, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
    f3a8:	ea43 0201 	orr.w	r2, r3, r1
    f3ac:	f032 0203 	bics.w	r2, r2, #3
    f3b0:	f040 8195 	bne.w	f6de <hci_cmd_handle+0x786>
	if (!(cmd->tx_phys & 0x07) ||
    f3b4:	074c      	lsls	r4, r1, #29
    f3b6:	f000 818e 	beq.w	f6d6 <hci_cmd_handle+0x77e>
    f3ba:	075a      	lsls	r2, r3, #29
    f3bc:	f000 818b 	beq.w	f6d6 <hci_cmd_handle+0x77e>
	if (phy_opts & 0x03) {
    f3c0:	f016 0203 	ands.w	r2, r6, #3
		phy_opts -= 1U;
    f3c4:	bf1c      	itt	ne
    f3c6:	f106 36ff 	addne.w	r6, r6, #4294967295	; 0xffffffff
		phy_opts &= 1;
    f3ca:	f006 0201 	andne.w	r2, r6, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    f3ce:	4638      	mov	r0, r7
    f3d0:	f003 fc6c 	bl	12cac <ll_phy_req_send>
    f3d4:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    f3d6:	8828      	ldrh	r0, [r5, #0]
    f3d8:	f011 fe01 	bl	20fde <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
    f3dc:	e64e      	b.n	f07c <hci_cmd_handle+0x124>
		le_set_default_phy(cmd, evt);
    f3de:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    f3e0:	781a      	ldrb	r2, [r3, #0]
    f3e2:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
    f3e4:	bf4a      	itet	mi
    f3e6:	2007      	movmi	r0, #7
    f3e8:	7858      	ldrbpl	r0, [r3, #1]
    f3ea:	7058      	strbmi	r0, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    f3ec:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
    f3ee:	bf4a      	itet	mi
    f3f0:	2107      	movmi	r1, #7
    f3f2:	7899      	ldrbpl	r1, [r3, #2]
    f3f4:	7099      	strbmi	r1, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    f3f6:	f003 fc4f 	bl	12c98 <ll_phy_default_set>
	*evt = cmd_complete_status(status);
    f3fa:	f7ff fc7b 	bl	ecf4 <cmd_complete_status>
	if (err == -EINVAL) {
    f3fe:	e63d      	b.n	f07c <hci_cmd_handle+0x124>
	handle = sys_le16_to_cpu(cmd->handle);
    f400:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f402:	2105      	movs	r1, #5
    f404:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    f406:	881d      	ldrh	r5, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f408:	f7ff fd06 	bl	ee18 <hci_cmd_complete>
    f40c:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    f40e:	1d22      	adds	r2, r4, #4
	handle = sys_le16_to_cpu(cmd->handle);
    f410:	b2a8      	uxth	r0, r5
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    f412:	1ce1      	adds	r1, r4, #3
    f414:	f003 fc22 	bl	12c5c <ll_phy_get>
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
	return __builtin_ffs(op);
    f418:	78e2      	ldrb	r2, [r4, #3]
    f41a:	7923      	ldrb	r3, [r4, #4]
	rp->status = status;
    f41c:	7020      	strb	r0, [r4, #0]
    f41e:	2a00      	cmp	r2, #0
    f420:	fa92 f2a2 	rbit	r2, r2
    f424:	fab2 f282 	clz	r2, r2
    f428:	bf08      	it	eq
    f42a:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    f42e:	2b00      	cmp	r3, #0
    f430:	fa93 f3a3 	rbit	r3, r3
    f434:	fab3 f383 	clz	r3, r3
    f438:	f102 0201 	add.w	r2, r2, #1
    f43c:	bf08      	it	eq
    f43e:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    f442:	70e2      	strb	r2, [r4, #3]
    f444:	3301      	adds	r3, #1
    f446:	9807      	ldr	r0, [sp, #28]
	rp->handle = sys_cpu_to_le16(handle);
    f448:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    f44c:	7123      	strb	r3, [r4, #4]
	if (err == -EINVAL) {
    f44e:	e615      	b.n	f07c <hci_cmd_handle+0x124>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f450:	2109      	movs	r1, #9
    f452:	a807      	add	r0, sp, #28
    f454:	f7ff fce0 	bl	ee18 <hci_cmd_complete>
	ll_length_max_get(&max_tx_octets, &max_tx_time,
    f458:	ab08      	add	r3, sp, #32
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f45a:	4604      	mov	r4, r0
	ll_length_max_get(&max_tx_octets, &max_tx_time,
    f45c:	f10d 021a 	add.w	r2, sp, #26
    f460:	f10d 0016 	add.w	r0, sp, #22
    f464:	a906      	add	r1, sp, #24
    f466:	f003 fbef 	bl	12c48 <ll_length_max_get>
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    f46a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
    f46e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    f472:	f8a4 2001 	strh.w	r2, [r4, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    f476:	f8a4 3003 	strh.w	r3, [r4, #3]
	rp->max_rx_octets = sys_cpu_to_le16(max_rx_octets);
    f47a:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    f47e:	f8a4 3005 	strh.w	r3, [r4, #5]
	rp->status = 0x00;
    f482:	2200      	movs	r2, #0
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
    f484:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->status = 0x00;
    f488:	7022      	strb	r2, [r4, #0]
    f48a:	9807      	ldr	r0, [sp, #28]
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
    f48c:	f8a4 3007 	strh.w	r3, [r4, #7]
	if (err == -EINVAL) {
    f490:	e5f4      	b.n	f07c <hci_cmd_handle+0x124>
	uint16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
    f492:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
    f494:	8818      	ldrh	r0, [r3, #0]
    f496:	f007 fd61 	bl	16f5c <ll_rl_timeout_set>
	*evt = cmd_complete_status(0x00);
    f49a:	2000      	movs	r0, #0
    f49c:	f7ff fc2a 	bl	ecf4 <cmd_complete_status>
	if (err == -EINVAL) {
    f4a0:	e5ec      	b.n	f07c <hci_cmd_handle+0x124>
	status = ll_rl_enable(cmd->enable);
    f4a2:	68a3      	ldr	r3, [r4, #8]
    f4a4:	7818      	ldrb	r0, [r3, #0]
    f4a6:	f007 fd43 	bl	16f30 <ll_rl_enable>
	*evt = cmd_complete_status(status);
    f4aa:	f7ff fc23 	bl	ecf4 <cmd_complete_status>
	if (err == -EINVAL) {
    f4ae:	e5e5      	b.n	f07c <hci_cmd_handle+0x124>
	memcpy(dst, src, sizeof(*dst));
    f4b0:	68a3      	ldr	r3, [r4, #8]
    f4b2:	6818      	ldr	r0, [r3, #0]
    f4b4:	9008      	str	r0, [sp, #32]
    f4b6:	889a      	ldrh	r2, [r3, #4]
    f4b8:	799b      	ldrb	r3, [r3, #6]
    f4ba:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f4be:	2107      	movs	r1, #7
    f4c0:	a807      	add	r0, sp, #28
    f4c2:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
    f4c6:	f7ff fca7 	bl	ee18 <hci_cmd_complete>
    f4ca:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    f4cc:	1c61      	adds	r1, r4, #1
    f4ce:	a808      	add	r0, sp, #32
    f4d0:	f008 f90e 	bl	176f0 <ll_rl_lrpa_get>
    f4d4:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
    f4d6:	9807      	ldr	r0, [sp, #28]
    f4d8:	e5d0      	b.n	f07c <hci_cmd_handle+0x124>
    f4da:	68a3      	ldr	r3, [r4, #8]
    f4dc:	6818      	ldr	r0, [r3, #0]
    f4de:	9008      	str	r0, [sp, #32]
    f4e0:	889a      	ldrh	r2, [r3, #4]
    f4e2:	799b      	ldrb	r3, [r3, #6]
    f4e4:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f4e8:	2107      	movs	r1, #7
    f4ea:	a807      	add	r0, sp, #28
    f4ec:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
    f4f0:	f7ff fc92 	bl	ee18 <hci_cmd_complete>
    f4f4:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
    f4f6:	1c61      	adds	r1, r4, #1
    f4f8:	a808      	add	r0, sp, #32
    f4fa:	f008 f8d7 	bl	176ac <ll_rl_crpa_get>
    f4fe:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
    f500:	9807      	ldr	r0, [sp, #28]
    f502:	e5bb      	b.n	f07c <hci_cmd_handle+0x124>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f504:	2102      	movs	r1, #2
    f506:	a807      	add	r0, sp, #28
    f508:	f7ff fc86 	bl	ee18 <hci_cmd_complete>
    f50c:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
    f50e:	f007 fccd 	bl	16eac <ll_rl_size_get>
	rp->status = 0x00;
    f512:	2300      	movs	r3, #0
	rp->rl_size = ll_rl_size_get();
    f514:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
    f516:	7023      	strb	r3, [r4, #0]
	if (err == -EINVAL) {
    f518:	9807      	ldr	r0, [sp, #28]
    f51a:	e5af      	b.n	f07c <hci_cmd_handle+0x124>
	status = ll_rl_clear();
    f51c:	f007 fcc8 	bl	16eb0 <ll_rl_clear>
	*evt = cmd_complete_status(status);
    f520:	f7ff fbe8 	bl	ecf4 <cmd_complete_status>
	if (err == -EINVAL) {
    f524:	e5aa      	b.n	f07c <hci_cmd_handle+0x124>
	status = ll_rl_remove(&cmd->peer_id_addr);
    f526:	68a0      	ldr	r0, [r4, #8]
    f528:	f008 f81e 	bl	17568 <ll_rl_remove>
	*evt = cmd_complete_status(status);
    f52c:	f7ff fbe2 	bl	ecf4 <cmd_complete_status>
	if (err == -EINVAL) {
    f530:	e5a4      	b.n	f07c <hci_cmd_handle+0x124>
		le_add_dev_to_rl(cmd, evt);
    f532:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    f534:	f100 0217 	add.w	r2, r0, #23
    f538:	1dc1      	adds	r1, r0, #7
    f53a:	f007 ff4f 	bl	173dc <ll_rl_add>
	*evt = cmd_complete_status(status);
    f53e:	f7ff fbd9 	bl	ecf4 <cmd_complete_status>
	if (err == -EINVAL) {
    f542:	e59b      	b.n	f07c <hci_cmd_handle+0x124>
		le_write_default_data_len(cmd, evt);
    f544:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(max_tx_octets, max_tx_time);
    f546:	8859      	ldrh	r1, [r3, #2]
    f548:	8818      	ldrh	r0, [r3, #0]
    f54a:	f003 fb73 	bl	12c34 <ll_length_default_set>
	*evt = cmd_complete_status(status);
    f54e:	b2c0      	uxtb	r0, r0
    f550:	f7ff fbd0 	bl	ecf4 <cmd_complete_status>
	if (err == -EINVAL) {
    f554:	e592      	b.n	f07c <hci_cmd_handle+0x124>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f556:	2105      	movs	r1, #5
    f558:	a807      	add	r0, sp, #28
    f55a:	f7ff fc5d 	bl	ee18 <hci_cmd_complete>
	ll_length_default_get(&max_tx_octets, &max_tx_time);
    f55e:	a908      	add	r1, sp, #32
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f560:	4604      	mov	r4, r0
	ll_length_default_get(&max_tx_octets, &max_tx_time);
    f562:	f10d 001a 	add.w	r0, sp, #26
    f566:	f003 fb59 	bl	12c1c <ll_length_default_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
    f56a:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    f56e:	f8a4 3001 	strh.w	r3, [r4, #1]
	rp->status = 0x00;
    f572:	2200      	movs	r2, #0
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    f574:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->status = 0x00;
    f578:	7022      	strb	r2, [r4, #0]
    f57a:	9807      	ldr	r0, [sp, #28]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    f57c:	f8a4 3003 	strh.w	r3, [r4, #3]
	if (err == -EINVAL) {
    f580:	e57c      	b.n	f07c <hci_cmd_handle+0x124>
		le_set_data_len(cmd, evt);
    f582:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    f584:	881d      	ldrh	r5, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    f586:	889a      	ldrh	r2, [r3, #4]
    f588:	8859      	ldrh	r1, [r3, #2]
    f58a:	4628      	mov	r0, r5
    f58c:	f003 faee 	bl	12b6c <ll_length_req_send>
    f590:	e5bd      	b.n	f10e <hci_cmd_handle+0x1b6>
		le_conn_param_req_neg_reply(cmd, evt);
    f592:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    f594:	881d      	ldrh	r5, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
    f596:	789a      	ldrb	r2, [r3, #2]
    f598:	2300      	movs	r3, #0
    f59a:	e9cd 3301 	strd	r3, r3, [sp, #4]
    f59e:	4628      	mov	r0, r5
    f5a0:	9300      	str	r3, [sp, #0]
    f5a2:	2102      	movs	r1, #2
    f5a4:	f003 f99e 	bl	128e4 <ll_conn_update>
    f5a8:	e5b1      	b.n	f10e <hci_cmd_handle+0x1b6>
		le_conn_param_req_reply(cmd, evt);
    f5aa:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
    f5ac:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    f5ae:	8815      	ldrh	r5, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
    f5b0:	8853      	ldrh	r3, [r2, #2]
    f5b2:	9102      	str	r1, [sp, #8]
    f5b4:	88d1      	ldrh	r1, [r2, #6]
    f5b6:	9101      	str	r1, [sp, #4]
    f5b8:	8892      	ldrh	r2, [r2, #4]
    f5ba:	9200      	str	r2, [sp, #0]
    f5bc:	4628      	mov	r0, r5
    f5be:	2200      	movs	r2, #0
    f5c0:	2102      	movs	r1, #2
    f5c2:	f003 f98f 	bl	128e4 <ll_conn_update>
    f5c6:	e5a2      	b.n	f10e <hci_cmd_handle+0x1b6>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f5c8:	2109      	movs	r1, #9
    f5ca:	a807      	add	r0, sp, #28
    f5cc:	f7ff fc24 	bl	ee18 <hci_cmd_complete>
	dst[0] = val;
    f5d0:	248f      	movs	r4, #143	; 0x8f
	rp->status = 0x00;
    f5d2:	2300      	movs	r3, #0
	dst[1] = val >> 8;
    f5d4:	21cc      	movs	r1, #204	; 0xcc
	dst[0] = val;
    f5d6:	2230      	movs	r2, #48	; 0x30
    f5d8:	7044      	strb	r4, [r0, #1]
	dst[1] = val >> 8;
    f5da:	7081      	strb	r1, [r0, #2]
	dst[0] = val;
    f5dc:	70c2      	strb	r2, [r0, #3]
	dst[1] = val >> 8;
    f5de:	24ec      	movs	r4, #236	; 0xec
	dst[0] = val;
    f5e0:	21c0      	movs	r1, #192	; 0xc0
	dst[1] = val >> 8;
    f5e2:	2201      	movs	r2, #1
    f5e4:	7003      	strb	r3, [r0, #0]
	dst[0] = val;
    f5e6:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
    f5e8:	7203      	strb	r3, [r0, #8]
    f5ea:	7104      	strb	r4, [r0, #4]
	dst[0] = val;
    f5ec:	7141      	strb	r1, [r0, #5]
	dst[1] = val >> 8;
    f5ee:	7182      	strb	r2, [r0, #6]
	if (err == -EINVAL) {
    f5f0:	9807      	ldr	r0, [sp, #28]
    f5f2:	e543      	b.n	f07c <hci_cmd_handle+0x124>
	handle = sys_le16_to_cpu(cmd->handle);
    f5f4:	68a3      	ldr	r3, [r4, #8]
    f5f6:	881d      	ldrh	r5, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    f5f8:	2200      	movs	r2, #0
    f5fa:	4628      	mov	r0, r5
    f5fc:	2106      	movs	r1, #6
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    f5fe:	f007 fa0b 	bl	16a18 <ll_start_enc_req_send>
    f602:	e584      	b.n	f10e <hci_cmd_handle+0x1b6>
	handle = sys_le16_to_cpu(cmd->handle);
    f604:	68a2      	ldr	r2, [r4, #8]
    f606:	f832 5b02 	ldrh.w	r5, [r2], #2
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    f60a:	2100      	movs	r1, #0
    f60c:	4628      	mov	r0, r5
    f60e:	e7f6      	b.n	f5fe <hci_cmd_handle+0x6a6>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f610:	2109      	movs	r1, #9
    f612:	a807      	add	r0, sp, #28
    f614:	f7ff fc00 	bl	ee18 <hci_cmd_complete>
	rp->status = 0x00;
    f618:	2300      	movs	r3, #0
    f61a:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
    f61e:	2108      	movs	r1, #8
    f620:	f008 fb9e 	bl	17d60 <lll_csrand_get>
	if (err == -EINVAL) {
    f624:	9807      	ldr	r0, [sp, #28]
    f626:	e529      	b.n	f07c <hci_cmd_handle+0x124>
		le_encrypt(cmd, evt);
    f628:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    f62a:	aa08      	add	r2, sp, #32
    f62c:	f100 0110 	add.w	r1, r0, #16
    f630:	2300      	movs	r3, #0
    f632:	f00a f8e5 	bl	19800 <ecb_encrypt>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f636:	2111      	movs	r1, #17
    f638:	a807      	add	r0, sp, #28
    f63a:	f7ff fbed 	bl	ee18 <hci_cmd_complete>
	rp->status = 0x00;
    f63e:	4605      	mov	r5, r0
    f640:	2300      	movs	r3, #0
    f642:	f805 3b01 	strb.w	r3, [r5], #1
    f646:	ac08      	add	r4, sp, #32
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f648:	4606      	mov	r6, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    f64a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    f64c:	f8c6 0001 	str.w	r0, [r6, #1]
    f650:	9807      	ldr	r0, [sp, #28]
    f652:	6069      	str	r1, [r5, #4]
    f654:	60aa      	str	r2, [r5, #8]
    f656:	60eb      	str	r3, [r5, #12]
	if (err == -EINVAL) {
    f658:	e510      	b.n	f07c <hci_cmd_handle+0x124>
		disconnect(cmd, evt);
    f65a:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    f65c:	7899      	ldrb	r1, [r3, #2]
    f65e:	8818      	ldrh	r0, [r3, #0]
    f660:	f003 f9f6 	bl	12a50 <ll_terminate_ind_send>
    f664:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    f666:	8828      	ldrh	r0, [r5, #0]
    f668:	f011 fcb9 	bl	20fde <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
    f66c:	e506      	b.n	f07c <hci_cmd_handle+0x124>
    f66e:	bf00      	nop
    f670:	20000130 	.word	0x20000130
	handle = sys_le16_to_cpu(cmd->handle);
    f674:	68a3      	ldr	r3, [r4, #8]
    f676:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    f678:	a908      	add	r1, sp, #32
    f67a:	4628      	mov	r0, r5
    f67c:	f003 fb66 	bl	12d4c <ll_apto_get>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f680:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
    f682:	4604      	mov	r4, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    f684:	a807      	add	r0, sp, #28
    f686:	f7ff fbc7 	bl	ee18 <hci_cmd_complete>
	rp->status = status;
    f68a:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    f68c:	f8a0 5001 	strh.w	r5, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    f690:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    f694:	f8a0 3003 	strh.w	r3, [r0, #3]
    f698:	9807      	ldr	r0, [sp, #28]
}
    f69a:	e4ef      	b.n	f07c <hci_cmd_handle+0x124>
	event_mask = DEFAULT_EVENT_MASK;
    f69c:	4912      	ldr	r1, [pc, #72]	; (f6e8 <hci_cmd_handle+0x790>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    f69e:	4a13      	ldr	r2, [pc, #76]	; (f6ec <hci_cmd_handle+0x794>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    f6a0:	4b13      	ldr	r3, [pc, #76]	; (f6f0 <hci_cmd_handle+0x798>)
	event_mask = DEFAULT_EVENT_MASK;
    f6a2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    f6a6:	f641 75ff 	movw	r5, #8191	; 0x1fff
    f6aa:	e9c1 4500 	strd	r4, r5, [r1]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    f6ae:	201f      	movs	r0, #31
    f6b0:	2100      	movs	r1, #0
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    f6b2:	2400      	movs	r4, #0
    f6b4:	2500      	movs	r5, #0
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    f6b6:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    f6ba:	e9c2 4500 	strd	r4, r5, [r2]
		ll_reset();
    f6be:	f000 ff91 	bl	105e4 <ll_reset>
		*evt = cmd_complete_status(0x00);
    f6c2:	2000      	movs	r0, #0
    f6c4:	f7ff fb16 	bl	ecf4 <cmd_complete_status>
	conn_count = 0U;
    f6c8:	4b0a      	ldr	r3, [pc, #40]	; (f6f4 <hci_cmd_handle+0x79c>)
    f6ca:	2200      	movs	r2, #0
    f6cc:	601a      	str	r2, [r3, #0]
}
    f6ce:	e4d5      	b.n	f07c <hci_cmd_handle+0x124>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    f6d0:	68a2      	ldr	r2, [r4, #8]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    f6d2:	4b06      	ldr	r3, [pc, #24]	; (f6ec <hci_cmd_handle+0x794>)
    f6d4:	e64e      	b.n	f374 <hci_cmd_handle+0x41c>
	return bt_hci_cmd_status_create(_opcode, status);
    f6d6:	2112      	movs	r1, #18
    f6d8:	f011 fc81 	bl	20fde <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
    f6dc:	e4ce      	b.n	f07c <hci_cmd_handle+0x124>
	return bt_hci_cmd_status_create(_opcode, status);
    f6de:	2111      	movs	r1, #17
    f6e0:	f011 fc7d 	bl	20fde <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
    f6e4:	e4ca      	b.n	f07c <hci_cmd_handle+0x124>
    f6e6:	bf00      	nop
    f6e8:	20000128 	.word	0x20000128
    f6ec:	200012a0 	.word	0x200012a0
    f6f0:	20000130 	.word	0x20000130
    f6f4:	20001ac0 	.word	0x20001ac0

0000f6f8 <hci_acl_handle>:
	if (buf->len < sizeof(*acl)) {
    f6f8:	8983      	ldrh	r3, [r0, #12]
	*evt = NULL;
    f6fa:	2200      	movs	r2, #0
	if (buf->len < sizeof(*acl)) {
    f6fc:	2b03      	cmp	r3, #3
{
    f6fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	*evt = NULL;
    f702:	600a      	str	r2, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    f704:	d944      	bls.n	f790 <hci_acl_handle+0x98>
    f706:	4605      	mov	r5, r0
    f708:	460e      	mov	r6, r1
    f70a:	3008      	adds	r0, #8
    f70c:	2104      	movs	r1, #4
    f70e:	f013 fa82 	bl	22c16 <net_buf_simple_pull_mem>
	if (buf->len < len) {
    f712:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
    f714:	8847      	ldrh	r7, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
    f716:	f8b0 8000 	ldrh.w	r8, [r0]
	if (buf->len < len) {
    f71a:	42bb      	cmp	r3, r7
    f71c:	d349      	bcc.n	f7b2 <hci_acl_handle+0xba>
	if (len > CONFIG_BT_CTLR_TX_BUFFER_SIZE) {
    f71e:	2f1b      	cmp	r7, #27
    f720:	d843      	bhi.n	f7aa <hci_acl_handle+0xb2>
	node_tx = ll_tx_mem_acquire();
    f722:	f003 f889 	bl	12838 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
    f726:	ea4f 3318 	mov.w	r3, r8, lsr #12
	if (!node_tx) {
    f72a:	4604      	mov	r4, r0
    f72c:	2800      	cmp	r0, #0
    f72e:	d044      	beq.n	f7ba <hci_acl_handle+0xc2>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
    f730:	089a      	lsrs	r2, r3, #2
    f732:	d102      	bne.n	f73a <hci_acl_handle+0x42>
	switch (bt_acl_flags_pb(flags)) {
    f734:	b333      	cbz	r3, f784 <hci_acl_handle+0x8c>
    f736:	2b01      	cmp	r3, #1
    f738:	d003      	beq.n	f742 <hci_acl_handle+0x4a>
		return -EINVAL;
    f73a:	f06f 0015 	mvn.w	r0, #21
}
    f73e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    f742:	7902      	ldrb	r2, [r0, #4]
    f744:	f363 0201 	bfi	r2, r3, #0, #2
    f748:	7102      	strb	r2, [r0, #4]
	pdu_data->len = len;
    f74a:	7167      	strb	r7, [r4, #5]
    f74c:	68a9      	ldr	r1, [r5, #8]
    f74e:	463a      	mov	r2, r7
    f750:	1de0      	adds	r0, r4, #7
    f752:	f014 fa54 	bl	23bfe <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
    f756:	4621      	mov	r1, r4
    f758:	f3c8 000b 	ubfx	r0, r8, #0, #12
    f75c:	f003 f878 	bl	12850 <ll_tx_mem_enqueue>
    f760:	2800      	cmp	r0, #0
    f762:	d0ec      	beq.n	f73e <hci_acl_handle+0x46>
    f764:	4b2c      	ldr	r3, [pc, #176]	; (f818 <hci_acl_handle+0x120>)
    f766:	492d      	ldr	r1, [pc, #180]	; (f81c <hci_acl_handle+0x124>)
		BT_ERR("Invalid Tx Enqueue");
    f768:	482d      	ldr	r0, [pc, #180]	; (f820 <hci_acl_handle+0x128>)
    f76a:	1ac9      	subs	r1, r1, r3
    f76c:	08c9      	lsrs	r1, r1, #3
    f76e:	0189      	lsls	r1, r1, #6
    f770:	f041 0101 	orr.w	r1, r1, #1
    f774:	f00f fcac 	bl	1f0d0 <log_0>
		ll_tx_mem_release(node_tx);
    f778:	4620      	mov	r0, r4
    f77a:	f003 f863 	bl	12844 <ll_tx_mem_release>
		return -EINVAL;
    f77e:	f06f 0015 	mvn.w	r0, #21
    f782:	e7dc      	b.n	f73e <hci_acl_handle+0x46>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    f784:	7903      	ldrb	r3, [r0, #4]
    f786:	2202      	movs	r2, #2
    f788:	f362 0301 	bfi	r3, r2, #0, #2
    f78c:	7103      	strb	r3, [r0, #4]
		break;
    f78e:	e7dc      	b.n	f74a <hci_acl_handle+0x52>
    f790:	4922      	ldr	r1, [pc, #136]	; (f81c <hci_acl_handle+0x124>)
    f792:	4b21      	ldr	r3, [pc, #132]	; (f818 <hci_acl_handle+0x120>)
		BT_ERR("No HCI ACL header");
    f794:	4823      	ldr	r0, [pc, #140]	; (f824 <hci_acl_handle+0x12c>)
    f796:	1ac9      	subs	r1, r1, r3
    f798:	08c9      	lsrs	r1, r1, #3
		BT_ERR("Invalid HCI ACL packet length");
    f79a:	0189      	lsls	r1, r1, #6
    f79c:	f041 0101 	orr.w	r1, r1, #1
    f7a0:	f00f fc96 	bl	1f0d0 <log_0>
		return -EINVAL;
    f7a4:	f06f 0015 	mvn.w	r0, #21
    f7a8:	e7c9      	b.n	f73e <hci_acl_handle+0x46>
    f7aa:	491c      	ldr	r1, [pc, #112]	; (f81c <hci_acl_handle+0x124>)
    f7ac:	4b1a      	ldr	r3, [pc, #104]	; (f818 <hci_acl_handle+0x120>)
		BT_ERR("Invalid HCI ACL Data length");
    f7ae:	481e      	ldr	r0, [pc, #120]	; (f828 <hci_acl_handle+0x130>)
    f7b0:	e7f1      	b.n	f796 <hci_acl_handle+0x9e>
    f7b2:	491a      	ldr	r1, [pc, #104]	; (f81c <hci_acl_handle+0x124>)
    f7b4:	4b18      	ldr	r3, [pc, #96]	; (f818 <hci_acl_handle+0x120>)
		BT_ERR("Invalid HCI ACL packet length");
    f7b6:	481d      	ldr	r0, [pc, #116]	; (f82c <hci_acl_handle+0x134>)
    f7b8:	e7ed      	b.n	f796 <hci_acl_handle+0x9e>
    f7ba:	4b17      	ldr	r3, [pc, #92]	; (f818 <hci_acl_handle+0x120>)
    f7bc:	4917      	ldr	r1, [pc, #92]	; (f81c <hci_acl_handle+0x124>)
		BT_ERR("Tx Buffer Overflow");
    f7be:	481c      	ldr	r0, [pc, #112]	; (f830 <hci_acl_handle+0x138>)
    f7c0:	1ac9      	subs	r1, r1, r3
    f7c2:	08c9      	lsrs	r1, r1, #3
    f7c4:	0189      	lsls	r1, r1, #6
    f7c6:	f041 0101 	orr.w	r1, r1, #1
    f7ca:	f00f fc81 	bl	1f0d0 <log_0>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    f7ce:	4b19      	ldr	r3, [pc, #100]	; (f834 <hci_acl_handle+0x13c>)
    f7d0:	6819      	ldr	r1, [r3, #0]
    f7d2:	4623      	mov	r3, r4
    f7d4:	f001 7200 	and.w	r2, r1, #33554432	; 0x2000000
    f7d8:	4313      	orrs	r3, r2
    f7da:	d102      	bne.n	f7e2 <hci_acl_handle+0xea>
		return -ENOBUFS;
    f7dc:	f06f 0068 	mvn.w	r0, #104	; 0x68
    f7e0:	e7ad      	b.n	f73e <hci_acl_handle+0x46>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    f7e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f7e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f7ea:	2001      	movs	r0, #1
    f7ec:	f7f6 ffa8 	bl	6740 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
    f7f0:	2102      	movs	r1, #2
    f7f2:	6030      	str	r0, [r6, #0]
    f7f4:	3008      	adds	r0, #8
    f7f6:	f013 f9e6 	bl	22bc6 <net_buf_simple_add>
	hdr->len = len;
    f7fa:	2401      	movs	r4, #1
	hdr->evt = evt;
    f7fc:	221a      	movs	r2, #26
    f7fe:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
    f800:	7044      	strb	r4, [r0, #1]
    f802:	6830      	ldr	r0, [r6, #0]
    f804:	4621      	mov	r1, r4
    f806:	3008      	adds	r0, #8
    f808:	f013 f9dd 	bl	22bc6 <net_buf_simple_add>
    f80c:	4603      	mov	r3, r0
		return -ENOBUFS;
    f80e:	f06f 0068 	mvn.w	r0, #104	; 0x68
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    f812:	701c      	strb	r4, [r3, #0]
    f814:	e793      	b.n	f73e <hci_acl_handle+0x46>
    f816:	bf00      	nop
    f818:	00023ed8 	.word	0x00023ed8
    f81c:	00023f20 	.word	0x00023f20
    f820:	00024ab8 	.word	0x00024ab8
    f824:	00024a54 	.word	0x00024a54
    f828:	00024a88 	.word	0x00024a88
    f82c:	00024a68 	.word	0x00024a68
    f830:	00024aa4 	.word	0x00024aa4
    f834:	20000128 	.word	0x20000128

0000f838 <hci_disconn_complete_encode>:
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    f838:	4b06      	ldr	r3, [pc, #24]	; (f854 <hci_disconn_complete_encode+0x1c>)
    f83a:	681b      	ldr	r3, [r3, #0]
{
    f83c:	b430      	push	{r4, r5}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    f83e:	f003 0410 	and.w	r4, r3, #16
    f842:	2500      	movs	r5, #0
    f844:	ea54 0305 	orrs.w	r3, r4, r5
    f848:	d101      	bne.n	f84e <hci_disconn_complete_encode+0x16>
}
    f84a:	bc30      	pop	{r4, r5}
    f84c:	4770      	bx	lr
    f84e:	bc30      	pop	{r4, r5}
    f850:	f7ff baca 	b.w	ede8 <hci_disconn_complete_encode.part.0>
    f854:	20000128 	.word	0x20000128

0000f858 <hci_disconn_complete_process>:
	conn_count--;
    f858:	4a02      	ldr	r2, [pc, #8]	; (f864 <hci_disconn_complete_process+0xc>)
    f85a:	6813      	ldr	r3, [r2, #0]
    f85c:	3b01      	subs	r3, #1
    f85e:	6013      	str	r3, [r2, #0]
}
    f860:	4770      	bx	lr
    f862:	bf00      	nop
    f864:	20001ac0 	.word	0x20001ac0

0000f868 <hci_acl_encode>:
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    f868:	7f03      	ldrb	r3, [r0, #28]
    f86a:	f003 0303 	and.w	r3, r3, #3
    f86e:	3b01      	subs	r3, #1
    f870:	2b01      	cmp	r3, #1
{
    f872:	b570      	push	{r4, r5, r6, lr}
	switch (pdu_data->ll_id) {
    f874:	d90d      	bls.n	f892 <hci_acl_encode+0x2a>
		}
#endif
		break;

	default:
		LL_ASSERT(0);
    f876:	4a16      	ldr	r2, [pc, #88]	; (f8d0 <hci_acl_encode+0x68>)
    f878:	4916      	ldr	r1, [pc, #88]	; (f8d4 <hci_acl_encode+0x6c>)
    f87a:	4817      	ldr	r0, [pc, #92]	; (f8d8 <hci_acl_encode+0x70>)
    f87c:	f241 73d4 	movw	r3, #6100	; 0x17d4
    f880:	f00f f84c 	bl	1e91c <printk>
    f884:	4040      	eors	r0, r0
    f886:	f380 8811 	msr	BASEPRI, r0
    f88a:	f04f 0003 	mov.w	r0, #3
    f88e:	df02      	svc	2
		break;
	}
}
    f890:	bd70      	pop	{r4, r5, r6, pc}
    f892:	4604      	mov	r4, r0
    f894:	f101 0508 	add.w	r5, r1, #8
    f898:	4628      	mov	r0, r5
    f89a:	2104      	movs	r1, #4
	handle = node_rx->hdr.handle;
    f89c:	88e6      	ldrh	r6, [r4, #6]
    f89e:	f013 f992 	bl	22bc6 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    f8a2:	7f23      	ldrb	r3, [r4, #28]
    f8a4:	f003 0303 	and.w	r3, r3, #3
    f8a8:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    f8aa:	bf0c      	ite	eq
    f8ac:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    f8b0:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
    f8b4:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
    f8b6:	7f61      	ldrb	r1, [r4, #29]
    f8b8:	8041      	strh	r1, [r0, #2]
    f8ba:	4628      	mov	r0, r5
    f8bc:	f013 f983 	bl	22bc6 <net_buf_simple_add>
    f8c0:	7f62      	ldrb	r2, [r4, #29]
    f8c2:	f104 011f 	add.w	r1, r4, #31
}
    f8c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f8ca:	f014 b998 	b.w	23bfe <memcpy>
    f8ce:	bf00      	nop
    f8d0:	00024acc 	.word	0x00024acc
    f8d4:	00024974 	.word	0x00024974
    f8d8:	00024904 	.word	0x00024904

0000f8dc <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
    f8dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    f8e0:	7905      	ldrb	r5, [r0, #4]
    f8e2:	88c7      	ldrh	r7, [r0, #6]
    f8e4:	2d03      	cmp	r5, #3
{
    f8e6:	4604      	mov	r4, r0
    f8e8:	b088      	sub	sp, #32
    f8ea:	460e      	mov	r6, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
    f8ec:	f100 001c 	add.w	r0, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    f8f0:	d00c      	beq.n	f90c <hci_evt_encode+0x30>
	switch (node_rx->hdr.type) {
    f8f2:	3d14      	subs	r5, #20
    f8f4:	2d06      	cmp	r5, #6
    f8f6:	f200 8263 	bhi.w	fdc0 <hci_evt_encode+0x4e4>
    f8fa:	e8df f015 	tbh	[pc, r5, lsl #1]
    f8fe:	005c      	.short	0x005c
    f900:	00b400d6 	.word	0x00b400d6
    f904:	00e30114 	.word	0x00e30114
    f908:	002100fa 	.word	0x002100fa
	switch (pdu_data->llctrl.opcode) {
    f90c:	7fe3      	ldrb	r3, [r4, #31]
    f90e:	3b03      	subs	r3, #3
    f910:	2b12      	cmp	r3, #18
    f912:	f200 8122 	bhi.w	fb5a <hci_evt_encode+0x27e>
    f916:	e8df f013 	tbh	[pc, r3, lsl #1]
    f91a:	016e      	.short	0x016e
    f91c:	01200120 	.word	0x01200120
    f920:	01b30191 	.word	0x01b30191
    f924:	01c30120 	.word	0x01c30120
    f928:	01200120 	.word	0x01200120
    f92c:	01ca0120 	.word	0x01ca0120
    f930:	01d90120 	.word	0x01d90120
    f934:	01200120 	.word	0x01200120
    f938:	01200120 	.word	0x01200120
    f93c:	012e012e 	.word	0x012e012e
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    f940:	4bc5      	ldr	r3, [pc, #788]	; (fc58 <hci_evt_encode+0x37c>)
    f942:	6858      	ldr	r0, [r3, #4]
    f944:	2100      	movs	r1, #0
    f946:	460a      	mov	r2, r1
    f948:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    f94c:	4313      	orrs	r3, r2
    f94e:	d007      	beq.n	f960 <hci_evt_encode+0x84>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    f950:	4bc2      	ldr	r3, [pc, #776]	; (fc5c <hci_evt_encode+0x380>)
    f952:	6818      	ldr	r0, [r3, #0]
    f954:	460b      	mov	r3, r1
    f956:	f400 6200 	and.w	r2, r0, #2048	; 0x800
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    f95a:	4313      	orrs	r3, r2
    f95c:	f040 812b 	bne.w	fbb6 <hci_evt_encode+0x2da>
    f960:	7f61      	ldrb	r1, [r4, #29]
    f962:	48bf      	ldr	r0, [pc, #764]	; (fc60 <hci_evt_encode+0x384>)
    f964:	4bbf      	ldr	r3, [pc, #764]	; (fc64 <hci_evt_encode+0x388>)
    f966:	7fa2      	ldrb	r2, [r4, #30]
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
    f968:	7f25      	ldrb	r5, [r4, #28]
    f96a:	9704      	str	r7, [sp, #16]
    f96c:	2900      	cmp	r1, #0
    f96e:	eba3 0300 	sub.w	r3, r3, r0
    f972:	fa91 f1a1 	rbit	r1, r1
    f976:	fab1 f181 	clz	r1, r1
    f97a:	ea4f 03d3 	mov.w	r3, r3, lsr #3
    f97e:	bf08      	it	eq
    f980:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
    f984:	2a00      	cmp	r2, #0
    f986:	fa92 f2a2 	rbit	r2, r2
    f98a:	fab2 f282 	clz	r2, r2
    f98e:	f101 0001 	add.w	r0, r1, #1
    f992:	bf08      	it	eq
    f994:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    f998:	019b      	lsls	r3, r3, #6
    f99a:	1c54      	adds	r4, r2, #1
    f99c:	9006      	str	r0, [sp, #24]
    f99e:	f043 0302 	orr.w	r3, r3, #2
    f9a2:	48b1      	ldr	r0, [pc, #708]	; (fc68 <hci_evt_encode+0x38c>)
    f9a4:	9407      	str	r4, [sp, #28]
    f9a6:	2204      	movs	r2, #4
    f9a8:	a904      	add	r1, sp, #16
    f9aa:	9505      	str	r5, [sp, #20]
    f9ac:	f00f fbe6 	bl	1f17c <log_n>
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    f9b0:	b008      	add	sp, #32
    f9b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t status = cc->status;
    f9b6:	7f25      	ldrb	r5, [r4, #28]
	if (!status) {
    f9b8:	2d00      	cmp	r5, #0
    f9ba:	f000 81a5 	beq.w	fd08 <hci_evt_encode+0x42c>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    f9be:	4ba6      	ldr	r3, [pc, #664]	; (fc58 <hci_evt_encode+0x37c>)
    f9c0:	6859      	ldr	r1, [r3, #4]
    f9c2:	f04f 0800 	mov.w	r8, #0
    f9c6:	4642      	mov	r2, r8
    f9c8:	f001 5300 	and.w	r3, r1, #536870912	; 0x20000000
    f9cc:	4313      	orrs	r3, r2
    f9ce:	d0ef      	beq.n	f9b0 <hci_evt_encode+0xd4>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    f9d0:	4ba2      	ldr	r3, [pc, #648]	; (fc5c <hci_evt_encode+0x380>)
    f9d2:	f8d3 c000 	ldr.w	ip, [r3]
    f9d6:	f240 2101 	movw	r1, #513	; 0x201
    f9da:	ea0c 0201 	and.w	r2, ip, r1
    f9de:	4643      	mov	r3, r8
    f9e0:	4313      	orrs	r3, r2
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    f9e2:	f40c 7000 	and.w	r0, ip, #512	; 0x200
    f9e6:	4641      	mov	r1, r8
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    f9e8:	d0e2      	beq.n	f9b0 <hci_evt_encode+0xd4>
	if (!status) {
    f9ea:	2d00      	cmp	r5, #0
    f9ec:	f040 819f 	bne.w	fd2e <hci_evt_encode+0x452>
		conn_count++;
    f9f0:	4a9e      	ldr	r2, [pc, #632]	; (fc6c <hci_evt_encode+0x390>)
    f9f2:	6813      	ldr	r3, [r2, #0]
    f9f4:	3301      	adds	r3, #1
    f9f6:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    f9f8:	ea50 0301 	orrs.w	r3, r0, r1
    f9fc:	f104 081f 	add.w	r8, r4, #31
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    fa00:	4630      	mov	r0, r6
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    fa02:	f000 81a3 	beq.w	fd4c <hci_evt_encode+0x470>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    fa06:	221e      	movs	r2, #30
    fa08:	210a      	movs	r1, #10
    fa0a:	f7ff f985 	bl	ed18 <meta_evt>
		leecc->status = 0x00;
    fa0e:	7005      	strb	r5, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
    fa10:	f8a0 7001 	strh.w	r7, [r0, #1]
		leecc->role = cc->role;
    fa14:	7f62      	ldrb	r2, [r4, #29]
    fa16:	70c2      	strb	r2, [r0, #3]
		leecc->peer_addr.type = cc->peer_addr_type;
    fa18:	7fa2      	ldrb	r2, [r4, #30]
    fa1a:	7102      	strb	r2, [r0, #4]
    fa1c:	f8d8 2000 	ldr.w	r2, [r8]
    fa20:	f8c0 2005 	str.w	r2, [r0, #5]
    fa24:	f8b8 2004 	ldrh.w	r2, [r8, #4]
    fa28:	f8a0 2009 	strh.w	r2, [r0, #9]
    fa2c:	4623      	mov	r3, r4
    fa2e:	f853 2f2b 	ldr.w	r2, [r3, #43]!
    fa32:	f8c0 200b 	str.w	r2, [r0, #11]
    fa36:	889b      	ldrh	r3, [r3, #4]
    fa38:	f8a0 300f 	strh.w	r3, [r0, #15]
    fa3c:	4623      	mov	r3, r4
    fa3e:	f853 2f25 	ldr.w	r2, [r3, #37]!
    fa42:	f8c0 2011 	str.w	r2, [r0, #17]
    fa46:	889b      	ldrh	r3, [r3, #4]
    fa48:	f8a0 3015 	strh.w	r3, [r0, #21]
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
    fa4c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
		leecc->interval = sys_cpu_to_le16(cc->interval);
    fa4e:	8e61      	ldrh	r1, [r4, #50]	; 0x32
		leecc->latency = sys_cpu_to_le16(cc->latency);
    fa50:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    fa52:	f8a0 2019 	strh.w	r2, [r0, #25]
		leecc->interval = sys_cpu_to_le16(cc->interval);
    fa56:	f8a0 1017 	strh.w	r1, [r0, #23]
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
    fa5a:	f8a0 301b 	strh.w	r3, [r0, #27]
		leecc->clock_accuracy = cc->sca;
    fa5e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    fa62:	7743      	strb	r3, [r0, #29]
		return;
    fa64:	e7a4      	b.n	f9b0 <hci_evt_encode+0xd4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    fa66:	4b7c      	ldr	r3, [pc, #496]	; (fc58 <hci_evt_encode+0x37c>)
    fa68:	6858      	ldr	r0, [r3, #4]
    fa6a:	2100      	movs	r1, #0
    fa6c:	460a      	mov	r2, r1
    fa6e:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    fa72:	4313      	orrs	r3, r2
    fa74:	d09c      	beq.n	f9b0 <hci_evt_encode+0xd4>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    fa76:	4b79      	ldr	r3, [pc, #484]	; (fc5c <hci_evt_encode+0x380>)
    fa78:	6818      	ldr	r0, [r3, #0]
    fa7a:	460b      	mov	r3, r1
    fa7c:	f000 0204 	and.w	r2, r0, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    fa80:	4313      	orrs	r3, r2
    fa82:	d095      	beq.n	f9b0 <hci_evt_encode+0xd4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    fa84:	2209      	movs	r2, #9
    fa86:	2103      	movs	r1, #3
    fa88:	4630      	mov	r0, r6
    fa8a:	f7ff f945 	bl	ed18 <meta_evt>
	sep->status = cu->status;
    fa8e:	7f23      	ldrb	r3, [r4, #28]
    fa90:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
    fa92:	8be1      	ldrh	r1, [r4, #30]
	sep->latency = sys_cpu_to_le16(cu->latency);
    fa94:	8c22      	ldrh	r2, [r4, #32]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
    fa96:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    fa98:	f8a0 3007 	strh.w	r3, [r0, #7]
	sep->handle = sys_cpu_to_le16(handle);
    fa9c:	f8a0 7001 	strh.w	r7, [r0, #1]
	sep->interval = sys_cpu_to_le16(cu->interval);
    faa0:	f8a0 1003 	strh.w	r1, [r0, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
    faa4:	f8a0 2005 	strh.w	r2, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
    faa8:	e782      	b.n	f9b0 <hci_evt_encode+0xd4>
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    faaa:	4b6b      	ldr	r3, [pc, #428]	; (fc58 <hci_evt_encode+0x37c>)
    faac:	6819      	ldr	r1, [r3, #0]
    faae:	2300      	movs	r3, #0
    fab0:	f001 0210 	and.w	r2, r1, #16
    fab4:	4313      	orrs	r3, r2
    fab6:	f43f af7b 	beq.w	f9b0 <hci_evt_encode+0xd4>
    faba:	4632      	mov	r2, r6
    fabc:	4639      	mov	r1, r7
    fabe:	f7ff f993 	bl	ede8 <hci_disconn_complete_encode.part.0>
    fac2:	e775      	b.n	f9b0 <hci_evt_encode+0xd4>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    fac4:	4b6a      	ldr	r3, [pc, #424]	; (fc70 <hci_evt_encode+0x394>)
    fac6:	6819      	ldr	r1, [r3, #0]
    fac8:	2300      	movs	r3, #0
    faca:	f401 0200 	and.w	r2, r1, #8388608	; 0x800000
    face:	4313      	orrs	r3, r2
    fad0:	f43f af6e 	beq.w	f9b0 <hci_evt_encode+0xd4>
    fad4:	3608      	adds	r6, #8
    fad6:	2102      	movs	r1, #2
    fad8:	4630      	mov	r0, r6
    fada:	f013 f874 	bl	22bc6 <net_buf_simple_add>
    fade:	4603      	mov	r3, r0
	hdr->evt = evt;
    fae0:	2257      	movs	r2, #87	; 0x57
	hdr->len = len;
    fae2:	2102      	movs	r1, #2
    fae4:	4630      	mov	r0, r6
	hdr->evt = evt;
    fae6:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
    fae8:	7059      	strb	r1, [r3, #1]
    faea:	f013 f86c 	bl	22bc6 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    faee:	8007      	strh	r7, [r0, #0]
    faf0:	e75e      	b.n	f9b0 <hci_evt_encode+0xd4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    faf2:	4b59      	ldr	r3, [pc, #356]	; (fc58 <hci_evt_encode+0x37c>)
    faf4:	6858      	ldr	r0, [r3, #4]
    faf6:	2100      	movs	r1, #0
    faf8:	460a      	mov	r2, r1
    fafa:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    fafe:	4313      	orrs	r3, r2
    fb00:	f43f af56 	beq.w	f9b0 <hci_evt_encode+0xd4>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    fb04:	4b55      	ldr	r3, [pc, #340]	; (fc5c <hci_evt_encode+0x380>)
    fb06:	6818      	ldr	r0, [r3, #0]
    fb08:	460b      	mov	r3, r1
    fb0a:	f400 2200 	and.w	r2, r0, #524288	; 0x80000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    fb0e:	4313      	orrs	r3, r2
    fb10:	f43f af4e 	beq.w	f9b0 <hci_evt_encode+0xd4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
    fb14:	4630      	mov	r0, r6
    fb16:	2203      	movs	r2, #3
    fb18:	2114      	movs	r1, #20
    fb1a:	f7ff f8fd 	bl	ed18 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    fb1e:	8007      	strh	r7, [r0, #0]
	sep->chan_sel_algo = cs->csa;
    fb20:	7f23      	ldrb	r3, [r4, #28]
    fb22:	7083      	strb	r3, [r0, #2]
    fb24:	e744      	b.n	f9b0 <hci_evt_encode+0xd4>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    fb26:	4b4c      	ldr	r3, [pc, #304]	; (fc58 <hci_evt_encode+0x37c>)
    fb28:	6859      	ldr	r1, [r3, #4]
    fb2a:	2400      	movs	r4, #0
    fb2c:	4622      	mov	r2, r4
    fb2e:	f401 4300 	and.w	r3, r1, #32768	; 0x8000
    fb32:	4313      	orrs	r3, r2
    fb34:	f43f af3c 	beq.w	f9b0 <hci_evt_encode+0xd4>
    fb38:	3608      	adds	r6, #8
    fb3a:	2102      	movs	r1, #2
    fb3c:	4630      	mov	r0, r6
    fb3e:	f013 f842 	bl	22bc6 <net_buf_simple_add>
    fb42:	4603      	mov	r3, r0
	hdr->evt = evt;
    fb44:	2230      	movs	r2, #48	; 0x30
	hdr->len = len;
    fb46:	2103      	movs	r1, #3
    fb48:	4630      	mov	r0, r6
	hdr->evt = evt;
    fb4a:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
    fb4c:	7059      	strb	r1, [r3, #1]
    fb4e:	f013 f83a 	bl	22bc6 <net_buf_simple_add>
	ep->status = 0x00;
    fb52:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    fb54:	f8a0 7001 	strh.w	r7, [r0, #1]
    fb58:	e72a      	b.n	f9b0 <hci_evt_encode+0xd4>
		LL_ASSERT(0);
    fb5a:	f241 73a8 	movw	r3, #6056	; 0x17a8
    fb5e:	4a45      	ldr	r2, [pc, #276]	; (fc74 <hci_evt_encode+0x398>)
    fb60:	4945      	ldr	r1, [pc, #276]	; (fc78 <hci_evt_encode+0x39c>)
    fb62:	4846      	ldr	r0, [pc, #280]	; (fc7c <hci_evt_encode+0x3a0>)
    fb64:	f00e feda 	bl	1e91c <printk>
    fb68:	4040      	eors	r0, r0
    fb6a:	f380 8811 	msr	BASEPRI, r0
    fb6e:	f04f 0003 	mov.w	r0, #3
    fb72:	df02      	svc	2
}
    fb74:	e71c      	b.n	f9b0 <hci_evt_encode+0xd4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    fb76:	4b38      	ldr	r3, [pc, #224]	; (fc58 <hci_evt_encode+0x37c>)
    fb78:	6858      	ldr	r0, [r3, #4]
    fb7a:	2100      	movs	r1, #0
    fb7c:	460a      	mov	r2, r1
    fb7e:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    fb82:	4313      	orrs	r3, r2
    fb84:	f43f af14 	beq.w	f9b0 <hci_evt_encode+0xd4>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    fb88:	4b34      	ldr	r3, [pc, #208]	; (fc5c <hci_evt_encode+0x380>)
    fb8a:	6818      	ldr	r0, [r3, #0]
    fb8c:	460b      	mov	r3, r1
    fb8e:	f000 0240 	and.w	r2, r0, #64	; 0x40
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    fb92:	4313      	orrs	r3, r2
    fb94:	f43f af0c 	beq.w	f9b0 <hci_evt_encode+0xd4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
    fb98:	4630      	mov	r0, r6
    fb9a:	220a      	movs	r2, #10
    fb9c:	2107      	movs	r1, #7
    fb9e:	f7ff f8bb 	bl	ed18 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    fba2:	8007      	strh	r7, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
    fba4:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    fba6:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
    fba8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    fbaa:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
    fbac:	8c23      	ldrh	r3, [r4, #32]
    fbae:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    fbb0:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    fbb2:	8103      	strh	r3, [r0, #8]
    fbb4:	e6fc      	b.n	f9b0 <hci_evt_encode+0xd4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    fbb6:	2205      	movs	r2, #5
    fbb8:	4630      	mov	r0, r6
    fbba:	210c      	movs	r1, #12
    fbbc:	f7ff f8ac 	bl	ed18 <meta_evt>
	sep->status = pu->status;
    fbc0:	7f23      	ldrb	r3, [r4, #28]
    fbc2:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    fbc4:	f8a0 7001 	strh.w	r7, [r0, #1]
    fbc8:	7f62      	ldrb	r2, [r4, #29]
    fbca:	2a00      	cmp	r2, #0
    fbcc:	fa92 f3a2 	rbit	r3, r2
    fbd0:	fab3 f383 	clz	r3, r3
    fbd4:	bf08      	it	eq
    fbd6:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    fbda:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
    fbdc:	70c3      	strb	r3, [r0, #3]
    fbde:	7fa2      	ldrb	r2, [r4, #30]
    fbe0:	fa92 f3a2 	rbit	r3, r2
    fbe4:	2a00      	cmp	r2, #0
    fbe6:	fab3 f383 	clz	r3, r3
    fbea:	bf08      	it	eq
    fbec:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    fbf0:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
    fbf2:	7103      	strb	r3, [r0, #4]
    fbf4:	e6dc      	b.n	f9b0 <hci_evt_encode+0xd4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    fbf6:	4b18      	ldr	r3, [pc, #96]	; (fc58 <hci_evt_encode+0x37c>)
    fbf8:	6858      	ldr	r0, [r3, #4]
    fbfa:	2100      	movs	r1, #0
    fbfc:	460a      	mov	r2, r1
    fbfe:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    fc02:	4313      	orrs	r3, r2
    fc04:	f43f aed4 	beq.w	f9b0 <hci_evt_encode+0xd4>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    fc08:	4b14      	ldr	r3, [pc, #80]	; (fc5c <hci_evt_encode+0x380>)
    fc0a:	6818      	ldr	r0, [r3, #0]
    fc0c:	460b      	mov	r3, r1
    fc0e:	f000 0210 	and.w	r2, r0, #16
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    fc12:	4313      	orrs	r3, r2
    fc14:	f43f aecc 	beq.w	f9b0 <hci_evt_encode+0xd4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    fc18:	220c      	movs	r2, #12
    fc1a:	2105      	movs	r1, #5
    fc1c:	4630      	mov	r0, r6
    fc1e:	f7ff f87b 	bl	ed18 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    fc22:	4603      	mov	r3, r0
    fc24:	4622      	mov	r2, r4
    fc26:	f823 7b02 	strh.w	r7, [r3], #2
    fc2a:	f852 1f20 	ldr.w	r1, [r2, #32]!
    fc2e:	6852      	ldr	r2, [r2, #4]
    fc30:	f8c0 1002 	str.w	r1, [r0, #2]
    fc34:	605a      	str	r2, [r3, #4]
    fc36:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    fc38:	8143      	strh	r3, [r0, #10]
    fc3a:	e6b9      	b.n	f9b0 <hci_evt_encode+0xd4>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    fc3c:	4b06      	ldr	r3, [pc, #24]	; (fc58 <hci_evt_encode+0x37c>)
    fc3e:	6819      	ldr	r1, [r3, #0]
    fc40:	2000      	movs	r0, #0
    fc42:	f001 0280 	and.w	r2, r1, #128	; 0x80
    fc46:	4603      	mov	r3, r0
    fc48:	4313      	orrs	r3, r2
    fc4a:	f43f aeb1 	beq.w	f9b0 <hci_evt_encode+0xd4>
    fc4e:	4632      	mov	r2, r6
    fc50:	4639      	mov	r1, r7
    fc52:	f7ff f879 	bl	ed48 <encrypt_change.part.0>
    fc56:	e6ab      	b.n	f9b0 <hci_evt_encode+0xd4>
    fc58:	20000128 	.word	0x20000128
    fc5c:	20000130 	.word	0x20000130
    fc60:	00023ed8 	.word	0x00023ed8
    fc64:	00023f20 	.word	0x00023f20
    fc68:	00024b08 	.word	0x00024b08
    fc6c:	20001ac0 	.word	0x20001ac0
    fc70:	200012a0 	.word	0x200012a0
    fc74:	00024acc 	.word	0x00024acc
    fc78:	00024974 	.word	0x00024974
    fc7c:	00024904 	.word	0x00024904
		le_unknown_rsp(pdu_data, handle, buf);
    fc80:	f894 1020 	ldrb.w	r1, [r4, #32]
	switch (pdu_data->llctrl.unknown_rsp.type) {
    fc84:	290e      	cmp	r1, #14
    fc86:	f000 8083 	beq.w	fd90 <hci_evt_encode+0x4b4>
    fc8a:	4b4f      	ldr	r3, [pc, #316]	; (fdc8 <hci_evt_encode+0x4ec>)
    fc8c:	4a4f      	ldr	r2, [pc, #316]	; (fdcc <hci_evt_encode+0x4f0>)
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
    fc8e:	4850      	ldr	r0, [pc, #320]	; (fdd0 <hci_evt_encode+0x4f4>)
    fc90:	1ad2      	subs	r2, r2, r3
    fc92:	08d2      	lsrs	r2, r2, #3
    fc94:	0192      	lsls	r2, r2, #6
    fc96:	f042 0202 	orr.w	r2, r2, #2
    fc9a:	f00f fa26 	bl	1f0ea <log_1>
    fc9e:	e687      	b.n	f9b0 <hci_evt_encode+0xd4>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    fca0:	460b      	mov	r3, r1
    fca2:	463a      	mov	r2, r7
    fca4:	4601      	mov	r1, r0
    fca6:	2000      	movs	r0, #0
    fca8:	f7ff f868 	bl	ed7c <le_remote_feat_complete>
		break;
    fcac:	e680      	b.n	f9b0 <hci_evt_encode+0xd4>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    fcae:	4b49      	ldr	r3, [pc, #292]	; (fdd4 <hci_evt_encode+0x4f8>)
    fcb0:	6819      	ldr	r1, [r3, #0]
    fcb2:	2300      	movs	r3, #0
    fcb4:	f001 0280 	and.w	r2, r1, #128	; 0x80
    fcb8:	4313      	orrs	r3, r2
    fcba:	f43f ae79 	beq.w	f9b0 <hci_evt_encode+0xd4>
    fcbe:	f894 0020 	ldrb.w	r0, [r4, #32]
    fcc2:	4632      	mov	r2, r6
    fcc4:	4639      	mov	r1, r7
    fcc6:	f7ff f83f 	bl	ed48 <encrypt_change.part.0>
    fcca:	e671      	b.n	f9b0 <hci_evt_encode+0xd4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    fccc:	4b41      	ldr	r3, [pc, #260]	; (fdd4 <hci_evt_encode+0x4f8>)
    fcce:	6858      	ldr	r0, [r3, #4]
    fcd0:	2100      	movs	r1, #0
    fcd2:	460a      	mov	r2, r1
    fcd4:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    fcd8:	4313      	orrs	r3, r2
    fcda:	d01e      	beq.n	fd1a <hci_evt_encode+0x43e>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    fcdc:	4b3e      	ldr	r3, [pc, #248]	; (fdd8 <hci_evt_encode+0x4fc>)
    fcde:	6818      	ldr	r0, [r3, #0]
    fce0:	460b      	mov	r3, r1
    fce2:	f000 0220 	and.w	r2, r0, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    fce6:	4313      	orrs	r3, r2
    fce8:	d017      	beq.n	fd1a <hci_evt_encode+0x43e>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    fcea:	4630      	mov	r0, r6
    fcec:	220a      	movs	r2, #10
    fcee:	2106      	movs	r1, #6
    fcf0:	f7ff f812 	bl	ed18 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    fcf4:	8007      	strh	r7, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
    fcf6:	8c23      	ldrh	r3, [r4, #32]
    fcf8:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
    fcfa:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    fcfc:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
    fcfe:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    fd00:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
    fd02:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    fd04:	8103      	strh	r3, [r0, #8]
    fd06:	e653      	b.n	f9b0 <hci_evt_encode+0xd4>
		ll_rl_crpa_set(cc->peer_addr_type,
    fd08:	7fa0      	ldrb	r0, [r4, #30]
    fd0a:	f104 0325 	add.w	r3, r4, #37	; 0x25
    fd0e:	22ff      	movs	r2, #255	; 0xff
    fd10:	f104 011f 	add.w	r1, r4, #31
    fd14:	f007 fca8 	bl	17668 <ll_rl_crpa_set>
    fd18:	e651      	b.n	f9be <hci_evt_encode+0xe2>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
    fd1a:	2300      	movs	r3, #0
    fd1c:	e9cd 3301 	strd	r3, r3, [sp, #4]
    fd20:	4638      	mov	r0, r7
    fd22:	9300      	str	r3, [sp, #0]
    fd24:	221a      	movs	r2, #26
    fd26:	2102      	movs	r1, #2
    fd28:	f002 fddc 	bl	128e4 <ll_conn_update>
		return;
    fd2c:	e640      	b.n	f9b0 <hci_evt_encode+0xd4>
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    fd2e:	ea50 0301 	orrs.w	r3, r0, r1
    fd32:	d034      	beq.n	fd9e <hci_evt_encode+0x4c2>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    fd34:	221e      	movs	r2, #30
    fd36:	210a      	movs	r1, #10
    fd38:	4630      	mov	r0, r6
    fd3a:	f7fe ffed 	bl	ed18 <meta_evt>
    fd3e:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
    fd40:	4641      	mov	r1, r8
    fd42:	221e      	movs	r2, #30
    fd44:	f013 ff69 	bl	23c1a <memset>
			leecc->status = status;
    fd48:	7025      	strb	r5, [r4, #0]
			return;
    fd4a:	e631      	b.n	f9b0 <hci_evt_encode+0xd4>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    fd4c:	2212      	movs	r2, #18
    fd4e:	2101      	movs	r1, #1
    fd50:	f7fe ffe2 	bl	ed18 <meta_evt>
	lecc->status = 0x00;
    fd54:	7005      	strb	r5, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    fd56:	f8a0 7001 	strh.w	r7, [r0, #1]
	lecc->role = cc->role;
    fd5a:	7f63      	ldrb	r3, [r4, #29]
    fd5c:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
    fd5e:	7fa3      	ldrb	r3, [r4, #30]
    fd60:	f003 0301 	and.w	r3, r3, #1
    fd64:	7103      	strb	r3, [r0, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    fd66:	f8d8 3000 	ldr.w	r3, [r8]
    fd6a:	f8c0 3005 	str.w	r3, [r0, #5]
    fd6e:	f8b8 3004 	ldrh.w	r3, [r8, #4]
    fd72:	f8a0 3009 	strh.w	r3, [r0, #9]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
    fd76:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
	lecc->interval = sys_cpu_to_le16(cc->interval);
    fd78:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	lecc->latency = sys_cpu_to_le16(cc->latency);
    fd7a:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    fd7c:	f8a0 200d 	strh.w	r2, [r0, #13]
	lecc->interval = sys_cpu_to_le16(cc->interval);
    fd80:	f8a0 100b 	strh.w	r1, [r0, #11]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
    fd84:	f8a0 300f 	strh.w	r3, [r0, #15]
	lecc->clock_accuracy = cc->sca;
    fd88:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    fd8c:	7443      	strb	r3, [r0, #17]
    fd8e:	e60f      	b.n	f9b0 <hci_evt_encode+0xd4>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    fd90:	4633      	mov	r3, r6
    fd92:	463a      	mov	r2, r7
    fd94:	2100      	movs	r1, #0
    fd96:	201a      	movs	r0, #26
    fd98:	f7fe fff0 	bl	ed7c <le_remote_feat_complete>
		break;
    fd9c:	e608      	b.n	f9b0 <hci_evt_encode+0xd4>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    fd9e:	4630      	mov	r0, r6
    fda0:	2212      	movs	r2, #18
    fda2:	2101      	movs	r1, #1
    fda4:	f7fe ffb8 	bl	ed18 <meta_evt>
__ssp_bos_icheck3(memset, void *, int)
    fda8:	f8c0 8000 	str.w	r8, [r0]
    fdac:	f8c0 8004 	str.w	r8, [r0, #4]
    fdb0:	f8c0 8008 	str.w	r8, [r0, #8]
    fdb4:	f8c0 800c 	str.w	r8, [r0, #12]
    fdb8:	f8a0 8010 	strh.w	r8, [r0, #16]
		lecc->status = status;
    fdbc:	7005      	strb	r5, [r0, #0]
		return;
    fdbe:	e5f7      	b.n	f9b0 <hci_evt_encode+0xd4>
		LL_ASSERT(0);
    fdc0:	f241 63df 	movw	r3, #5855	; 0x16df
    fdc4:	e6cb      	b.n	fb5e <hci_evt_encode+0x282>
    fdc6:	bf00      	nop
    fdc8:	00023ed8 	.word	0x00023ed8
    fdcc:	00023f20 	.word	0x00023f20
    fdd0:	00024b34 	.word	0x00024b34
    fdd4:	20000128 	.word	0x20000128
    fdd8:	20000130 	.word	0x20000130

0000fddc <hci_num_cmplt_encode>:

#if defined(CONFIG_BT_CONN)
void hci_num_cmplt_encode(struct net_buf *buf, uint16_t handle, uint8_t num)
{
    fddc:	b570      	push	{r4, r5, r6, lr}
    fdde:	f100 0408 	add.w	r4, r0, #8
    fde2:	460e      	mov	r6, r1
    fde4:	4620      	mov	r0, r4
    fde6:	2102      	movs	r1, #2
    fde8:	4615      	mov	r5, r2
    fdea:	f012 feec 	bl	22bc6 <net_buf_simple_add>
    fdee:	4603      	mov	r3, r0
	hdr->evt = evt;
    fdf0:	2213      	movs	r2, #19
	hdr->len = len;
    fdf2:	2105      	movs	r1, #5
	hdr->evt = evt;
    fdf4:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
    fdf6:	7059      	strb	r1, [r3, #1]
    fdf8:	4620      	mov	r0, r4
    fdfa:	f012 fee4 	bl	22bc6 <net_buf_simple_add>

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
	ep->num_handles = num_handles;
    fdfe:	2301      	movs	r3, #1
    fe00:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    fe02:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
    fe06:	f8a0 5003 	strh.w	r5, [r0, #3]
}
    fe0a:	bd70      	pop	{r4, r5, r6, pc}

0000fe0c <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    fe0c:	7903      	ldrb	r3, [r0, #4]
    fe0e:	2b03      	cmp	r3, #3
    fe10:	d009      	beq.n	fe26 <hci_get_class+0x1a>

		switch (node_rx->hdr.type) {
    fe12:	2b14      	cmp	r3, #20
    fe14:	d005      	beq.n	fe22 <hci_get_class+0x16>
    fe16:	3b15      	subs	r3, #21
		case NODE_RX_TYPE_USER_START ... NODE_RX_TYPE_USER_END - 1:
			return hci_user_ext_get_class(node_rx);
#endif /* CONFIG_BT_CTLR_USER_EVT_RANGE > 0 */

		default:
			return HCI_CLASS_NONE;
    fe18:	2b05      	cmp	r3, #5
    fe1a:	bf94      	ite	ls
    fe1c:	2003      	movls	r0, #3
    fe1e:	2000      	movhi	r0, #0
    fe20:	4770      	bx	lr
			return HCI_CLASS_EVT_REQUIRED;
    fe22:	2001      	movs	r0, #1
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
    fe24:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    fe26:	7f03      	ldrb	r3, [r0, #28]
    fe28:	f003 0303 	and.w	r3, r3, #3
    fe2c:	2b03      	cmp	r3, #3
		return HCI_CLASS_ACL_DATA;
    fe2e:	bf0c      	ite	eq
    fe30:	2004      	moveq	r0, #4
    fe32:	2005      	movne	r0, #5
    fe34:	4770      	bx	lr
    fe36:	bf00      	nop

0000fe38 <hci_init>:

void hci_init(struct k_poll_signal *signal_host_buf)
{
    fe38:	b430      	push	{r4, r5}
	event_mask = DEFAULT_EVENT_MASK;
    fe3a:	480b      	ldr	r0, [pc, #44]	; (fe68 <hci_init+0x30>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    fe3c:	490b      	ldr	r1, [pc, #44]	; (fe6c <hci_init+0x34>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    fe3e:	4a0c      	ldr	r2, [pc, #48]	; (fe70 <hci_init+0x38>)
	conn_count = 0U;
    fe40:	4b0c      	ldr	r3, [pc, #48]	; (fe74 <hci_init+0x3c>)
	event_mask = DEFAULT_EVENT_MASK;
    fe42:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    fe46:	f641 75ff 	movw	r5, #8191	; 0x1fff
    fe4a:	e9c0 4500 	strd	r4, r5, [r0]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    fe4e:	2400      	movs	r4, #0
    fe50:	2500      	movs	r5, #0
    fe52:	e9c1 4500 	strd	r4, r5, [r1]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    fe56:	201f      	movs	r0, #31
    fe58:	2100      	movs	r1, #0
    fe5a:	e9c2 0100 	strd	r0, r1, [r2]
	conn_count = 0U;
    fe5e:	2200      	movs	r2, #0
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
    fe60:	bc30      	pop	{r4, r5}
	conn_count = 0U;
    fe62:	601a      	str	r2, [r3, #0]
}
    fe64:	4770      	bx	lr
    fe66:	bf00      	nop
    fe68:	20000128 	.word	0x20000128
    fe6c:	200012a0 	.word	0x200012a0
    fe70:	20000130 	.word	0x20000130
    fe74:	20001ac0 	.word	0x20001ac0

0000fe78 <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
    fe78:	f007 bf72 	b.w	17d60 <lll_csrand_get>

0000fe7c <bt_encrypt_le>:
}

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
    fe7c:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
    fe7e:	2300      	movs	r3, #0
    fe80:	f009 fcbe 	bl	19800 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
    fe84:	2000      	movs	r0, #0
    fe86:	bd08      	pop	{r3, pc}

0000fe88 <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
    fe88:	b510      	push	{r4, lr}
    fe8a:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
    fe8c:	f007 ff8a 	bl	17da4 <lll_reset>
	LL_ASSERT(!err);
    fe90:	b950      	cbnz	r0, fea8 <perform_lll_reset+0x20>

#if defined(CONFIG_BT_BROADCASTER)
	/* Reset adv state */
	err = lll_adv_reset();
    fe92:	f008 fb25 	bl	184e0 <lll_adv_reset>
	LL_ASSERT(!err);
    fe96:	b9c0      	cbnz	r0, feca <perform_lll_reset+0x42>
	LL_ASSERT(!err);
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
    fe98:	f008 ffb6 	bl	18e08 <lll_conn_reset>
	LL_ASSERT(!err);
    fe9c:	bb30      	cbnz	r0, feec <perform_lll_reset+0x64>
	z_impl_k_sem_give(sem);
    fe9e:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CTLR_DF */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
    fea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fea4:	f00d be82 	b.w	1dbac <z_impl_k_sem_give>
	LL_ASSERT(!err);
    fea8:	4a19      	ldr	r2, [pc, #100]	; (ff10 <perform_lll_reset+0x88>)
    feaa:	491a      	ldr	r1, [pc, #104]	; (ff14 <perform_lll_reset+0x8c>)
    feac:	481a      	ldr	r0, [pc, #104]	; (ff18 <perform_lll_reset+0x90>)
    feae:	f240 7329 	movw	r3, #1833	; 0x729
    feb2:	f00e fd33 	bl	1e91c <printk>
    feb6:	4040      	eors	r0, r0
    feb8:	f380 8811 	msr	BASEPRI, r0
    febc:	f04f 0003 	mov.w	r0, #3
    fec0:	df02      	svc	2
	err = lll_adv_reset();
    fec2:	f008 fb0d 	bl	184e0 <lll_adv_reset>
	LL_ASSERT(!err);
    fec6:	2800      	cmp	r0, #0
    fec8:	d0e6      	beq.n	fe98 <perform_lll_reset+0x10>
    feca:	4a11      	ldr	r2, [pc, #68]	; (ff10 <perform_lll_reset+0x88>)
    fecc:	4911      	ldr	r1, [pc, #68]	; (ff14 <perform_lll_reset+0x8c>)
    fece:	4812      	ldr	r0, [pc, #72]	; (ff18 <perform_lll_reset+0x90>)
    fed0:	f240 732e 	movw	r3, #1838	; 0x72e
    fed4:	f00e fd22 	bl	1e91c <printk>
    fed8:	4040      	eors	r0, r0
    feda:	f380 8811 	msr	BASEPRI, r0
    fede:	f04f 0003 	mov.w	r0, #3
    fee2:	df02      	svc	2
	err = lll_conn_reset();
    fee4:	f008 ff90 	bl	18e08 <lll_conn_reset>
	LL_ASSERT(!err);
    fee8:	2800      	cmp	r0, #0
    feea:	d0d8      	beq.n	fe9e <perform_lll_reset+0x16>
    feec:	4a08      	ldr	r2, [pc, #32]	; (ff10 <perform_lll_reset+0x88>)
    feee:	4909      	ldr	r1, [pc, #36]	; (ff14 <perform_lll_reset+0x8c>)
    fef0:	4809      	ldr	r0, [pc, #36]	; (ff18 <perform_lll_reset+0x90>)
    fef2:	f240 733a 	movw	r3, #1850	; 0x73a
    fef6:	f00e fd11 	bl	1e91c <printk>
    fefa:	4040      	eors	r0, r0
    fefc:	f380 8811 	msr	BASEPRI, r0
    ff00:	f04f 0003 	mov.w	r0, #3
    ff04:	df02      	svc	2
    ff06:	4620      	mov	r0, r4
}
    ff08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ff0c:	f00d be4e 	b.w	1dbac <z_impl_k_sem_give>
    ff10:	00024b60 	.word	0x00024b60
    ff14:	00024b9c 	.word	0x00024b9c
    ff18:	00024904 	.word	0x00024904

0000ff1c <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
    ff1c:	6008      	str	r0, [r1, #0]
    ff1e:	4801      	ldr	r0, [pc, #4]	; (ff24 <ull_ticker_status_give+0x8>)
    ff20:	f00d be44 	b.w	1dbac <z_impl_k_sem_give>
    ff24:	20001ec0 	.word	0x20001ec0

0000ff28 <disabled_cb>:
    ff28:	f00d be40 	b.w	1dbac <z_impl_k_sem_give>

0000ff2c <tx_cmplt_get>:
}
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL */

#if defined(CONFIG_BT_CONN)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
    ff2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_tx *tx;
	uint8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    ff30:	4f2f      	ldr	r7, [pc, #188]	; (fff0 <tx_cmplt_get+0xc4>)
					   uint8_t first, uint8_t last, uint8_t *idx)
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
    ff32:	780b      	ldrb	r3, [r1, #0]
    ff34:	783c      	ldrb	r4, [r7, #0]
{
    ff36:	460d      	mov	r5, r1
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    ff38:	7879      	ldrb	r1, [r7, #1]
    ff3a:	4299      	cmp	r1, r3
    ff3c:	bf9c      	itt	ls
    ff3e:	78bb      	ldrbls	r3, [r7, #2]
		*idx = first;
    ff40:	702b      	strbls	r3, [r5, #0]
	}

	if (*idx == last) {
    ff42:	429a      	cmp	r2, r3
{
    ff44:	4683      	mov	fp, r0
    ff46:	4692      	mov	sl, r2
    ff48:	d045      	beq.n	ffd6 <tx_cmplt_get+0xaa>
		return NULL;
	}

	i = *idx + 1;
    ff4a:	1c5a      	adds	r2, r3, #1
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
    ff4c:	4e29      	ldr	r6, [pc, #164]	; (fff4 <tx_cmplt_get+0xc8>)
	i = *idx + 1;
    ff4e:	b2d2      	uxtb	r2, r2
	p = (void *)(fifo + (*idx) * size);
    ff50:	fb13 f304 	smulbb	r3, r3, r4
		i = 0U;
    ff54:	4291      	cmp	r1, r2
    ff56:	bf08      	it	eq
    ff58:	2200      	moveq	r2, #0
				    mfifo_tx_ack.n, mfifo_tx_ack.f, last,
				    first);
	if (!tx) {
    ff5a:	18f1      	adds	r1, r6, r3

	*idx = i;
    ff5c:	702a      	strb	r2, [r5, #0]
    ff5e:	d03a      	beq.n	ffd6 <tx_cmplt_get+0xaa>
		return 0;
	}

	*handle = tx->handle;
    ff60:	5af3      	ldrh	r3, [r6, r3]
    ff62:	8003      	strh	r3, [r0, #0]
	cmplt = 0U;
    ff64:	f04f 0800 	mov.w	r8, #0
    ff68:	f04f 0901 	mov.w	r9, #1
    ff6c:	e022      	b.n	ffb4 <tx_cmplt_get+0x88>
		struct node_tx *node_tx;
		struct pdu_data *p;

		node_tx = tx->node;
		p = (void *)node_tx->pdu;
		if (!node_tx || (node_tx == (void *)1) ||
    ff6e:	b37b      	cbz	r3, ffd0 <tx_cmplt_get+0xa4>
		    (((uint32_t)node_tx & ~3) &&
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
    ff70:	7903      	ldrb	r3, [r0, #4]
    ff72:	f003 0303 	and.w	r3, r3, #3
		    (((uint32_t)node_tx & ~3) &&
    ff76:	3b01      	subs	r3, #1
    ff78:	2b01      	cmp	r3, #1
    ff7a:	d931      	bls.n	ffe0 <tx_cmplt_get+0xb4>
    ff7c:	2302      	movs	r3, #2
    ff7e:	604b      	str	r3, [r1, #4]
			/* ctrl packet or flushed, hence dont count num cmplt */
			tx->node = (void *)2;
		}

		if (((uint32_t)node_tx & ~3)) {
			ll_tx_mem_release(node_tx);
    ff80:	f002 fc60 	bl	12844 <ll_tx_mem_release>
	if (*idx >= count) {
    ff84:	782b      	ldrb	r3, [r5, #0]
		}

		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    ff86:	7879      	ldrb	r1, [r7, #1]
    ff88:	7838      	ldrb	r0, [r7, #0]
    ff8a:	4299      	cmp	r1, r3
    ff8c:	bf9c      	itt	ls
    ff8e:	78bb      	ldrbls	r3, [r7, #2]
		*idx = first;
    ff90:	702b      	strbls	r3, [r5, #0]
	if (*idx == last) {
    ff92:	459a      	cmp	sl, r3
    ff94:	d021      	beq.n	ffda <tx_cmplt_get+0xae>
	i = *idx + 1;
    ff96:	1c5c      	adds	r4, r3, #1
    ff98:	b2e4      	uxtb	r4, r4
	p = (void *)(fifo + (*idx) * size);
    ff9a:	fb13 f300 	smulbb	r3, r3, r0
		i = 0U;
    ff9e:	42a1      	cmp	r1, r4
    ffa0:	bf08      	it	eq
    ffa2:	2400      	moveq	r4, #0
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, first);
	} while (tx && tx->handle == *handle);
    ffa4:	18f1      	adds	r1, r6, r3
	*idx = i;
    ffa6:	702c      	strb	r4, [r5, #0]
    ffa8:	d017      	beq.n	ffda <tx_cmplt_get+0xae>
    ffaa:	5af0      	ldrh	r0, [r6, r3]
    ffac:	f8bb 3000 	ldrh.w	r3, [fp]
    ffb0:	4298      	cmp	r0, r3
    ffb2:	d112      	bne.n	ffda <tx_cmplt_get+0xae>
		node_tx = tx->node;
    ffb4:	6848      	ldr	r0, [r1, #4]
		if (!node_tx || (node_tx == (void *)1) ||
    ffb6:	2801      	cmp	r0, #1
    ffb8:	f020 0303 	bic.w	r3, r0, #3
    ffbc:	d8d7      	bhi.n	ff6e <tx_cmplt_get+0x42>
			cmplt++;
    ffbe:	f108 0801 	add.w	r8, r8, #1
    ffc2:	fa5f f888 	uxtb.w	r8, r8
    ffc6:	f8c1 9004 	str.w	r9, [r1, #4]
		if (((uint32_t)node_tx & ~3)) {
    ffca:	2b00      	cmp	r3, #0
    ffcc:	d0da      	beq.n	ff84 <tx_cmplt_get+0x58>
    ffce:	e7d7      	b.n	ff80 <tx_cmplt_get+0x54>
    ffd0:	2302      	movs	r3, #2
    ffd2:	604b      	str	r3, [r1, #4]
    ffd4:	e7d6      	b.n	ff84 <tx_cmplt_get+0x58>
		return 0;
    ffd6:	f04f 0800 	mov.w	r8, #0

	return cmplt;
}
    ffda:	4640      	mov	r0, r8
    ffdc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cmplt++;
    ffe0:	f108 0801 	add.w	r8, r8, #1
    ffe4:	fa5f f888 	uxtb.w	r8, r8
    ffe8:	f8c1 9004 	str.w	r9, [r1, #4]
		if (((uint32_t)node_tx & ~3)) {
    ffec:	e7c8      	b.n	ff80 <tx_cmplt_get+0x54>
    ffee:	bf00      	nop
    fff0:	20000414 	.word	0x20000414
    fff4:	20000418 	.word	0x20000418

0000fff8 <ull_done>:
}
#endif /* CONFIG_BT_CONN */

#if !defined(CONFIG_BT_CTLR_LOW_LAT_ULL)
static void ull_done(void *param)
{
    fff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fffc:	4f3f      	ldr	r7, [pc, #252]	; (100fc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xfd>)
	case EVENT_DONE_EXTRA_TYPE_NONE:
		/* ignore */
		break;

	default:
		LL_ASSERT(0);
    fffe:	f8df 810c 	ldr.w	r8, [pc, #268]	; 1010c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x10d>
   10002:	f8df a10c 	ldr.w	sl, [pc, #268]	; 10110 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x111>
{
   10006:	b082      	sub	sp, #8
			memq_dequeue(memq_ull_done.tail, &memq_ull_done.head, NULL);
   10008:	46b9      	mov	r9, r7
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
   1000a:	e9d7 0100 	ldrd	r0, r1, [r7]
   1000e:	aa01      	add	r2, sp, #4
   10010:	f7fd f8ce 	bl	d1b0 <memq_peek>
		if (link) {
   10014:	4604      	mov	r4, r0
   10016:	2800      	cmp	r0, #0
   10018:	d042      	beq.n	100a0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa1>
			memq_dequeue(memq_ull_done.tail, &memq_ull_done.head, NULL);
   1001a:	6878      	ldr	r0, [r7, #4]
   1001c:	2200      	movs	r2, #0
   1001e:	4649      	mov	r1, r9
   10020:	f7fd f8ce 	bl	d1c0 <memq_dequeue>
			rx_demux_event_done(link, done);
   10024:	9e01      	ldr	r6, [sp, #4]
	switch (done->extra.type) {
   10026:	f896 3020 	ldrb.w	r3, [r6, #32]
	ull_hdr = done->param;
   1002a:	69f5      	ldr	r5, [r6, #28]
	switch (done->extra.type) {
   1002c:	b123      	cbz	r3, 10038 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x39>
   1002e:	2b01      	cmp	r3, #1
   10030:	d147      	bne.n	100c2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc3>
		ull_conn_done(done);
   10032:	4630      	mov	r0, r6
   10034:	f005 ffc0 	bl	15fb8 <ull_conn_done>
	if (!MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   10038:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 10114 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x115>
   1003c:	f89c 2003 	ldrb.w	r2, [ip, #3]
	if (last == count) {
   10040:	f89c 0001 	ldrb.w	r0, [ip, #1]
   10044:	f89c 1002 	ldrb.w	r1, [ip, #2]
	last = last + 1;
   10048:	1c53      	adds	r3, r2, #1
   1004a:	b2db      	uxtb	r3, r3
		last = 0U;
   1004c:	4298      	cmp	r0, r3
   1004e:	bf08      	it	eq
   10050:	2300      	moveq	r3, #0
	if (last == first) {
   10052:	4299      	cmp	r1, r3
		break;
	}

	/* release done */
	done->extra.type = 0U;
   10054:	f04f 0000 	mov.w	r0, #0
   10058:	f886 0020 	strb.w	r0, [r6, #32]
   1005c:	d023      	beq.n	100a6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa7>
	done->hdr.link = link;
   1005e:	6034      	str	r4, [r6, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   10060:	f89c 1000 	ldrb.w	r1, [ip]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   10064:	fb01 c202 	mla	r2, r1, r2, ip
   10068:	6056      	str	r6, [r2, #4]
	*last = idx; /* Commit: Update write index */
   1006a:	f88c 3003 	strb.w	r3, [ip, #3]
	/* LLL done synchronized */
	lll_done_sync();
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL_DONE */

	/* ull instance will resume, dont decrement ref */
	if (!ull_hdr) {
   1006e:	2d00      	cmp	r5, #0
   10070:	d0cb      	beq.n	1000a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb>
	return hdr->ref;
   10072:	782b      	ldrb	r3, [r5, #0]
		return;
	}

	/* Decrement prepare reference */
	LL_ASSERT(ull_ref_get(ull_hdr));
   10074:	2b00      	cmp	r3, #0
   10076:	d032      	beq.n	100de <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xdf>
	return hdr->ref--;
   10078:	782b      	ldrb	r3, [r5, #0]
   1007a:	3b01      	subs	r3, #1
   1007c:	b2db      	uxtb	r3, r3
   1007e:	702b      	strb	r3, [r5, #0]
	return hdr->ref;
   10080:	782b      	ldrb	r3, [r5, #0]
	ull_ref_dec(ull_hdr);

	/* If disable initiated, signal the semaphore */
	if (!ull_ref_get(ull_hdr) && ull_hdr->disabled_cb) {
   10082:	2b00      	cmp	r3, #0
   10084:	d1c1      	bne.n	1000a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb>
   10086:	686b      	ldr	r3, [r5, #4]
   10088:	2b00      	cmp	r3, #0
   1008a:	d0be      	beq.n	1000a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
   1008c:	68a8      	ldr	r0, [r5, #8]
   1008e:	4798      	blx	r3
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
   10090:	e9d7 0100 	ldrd	r0, r1, [r7]
   10094:	aa01      	add	r2, sp, #4
   10096:	f7fd f88b 	bl	d1b0 <memq_peek>
		if (link) {
   1009a:	4604      	mov	r4, r0
   1009c:	2800      	cmp	r0, #0
   1009e:	d1bc      	bne.n	1001a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1b>
}
   100a0:	b002      	add	sp, #8
   100a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	LL_ASSERT(release == done);
   100a6:	4916      	ldr	r1, [pc, #88]	; (10100 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x101>)
   100a8:	4816      	ldr	r0, [pc, #88]	; (10104 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x105>)
   100aa:	f640 137b 	movw	r3, #2427	; 0x97b
   100ae:	4642      	mov	r2, r8
   100b0:	f00e fc34 	bl	1e91c <printk>
   100b4:	4040      	eors	r0, r0
   100b6:	f380 8811 	msr	BASEPRI, r0
   100ba:	f04f 0003 	mov.w	r0, #3
   100be:	df02      	svc	2
   100c0:	e7d5      	b.n	1006e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x6f>
		LL_ASSERT(0);
   100c2:	4810      	ldr	r0, [pc, #64]	; (10104 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x105>)
   100c4:	f640 1374 	movw	r3, #2420	; 0x974
   100c8:	4642      	mov	r2, r8
   100ca:	4651      	mov	r1, sl
   100cc:	f00e fc26 	bl	1e91c <printk>
   100d0:	4040      	eors	r0, r0
   100d2:	f380 8811 	msr	BASEPRI, r0
   100d6:	f04f 0003 	mov.w	r0, #3
   100da:	df02      	svc	2
		break;
   100dc:	e7ac      	b.n	10038 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x39>
	LL_ASSERT(ull_ref_get(ull_hdr));
   100de:	490a      	ldr	r1, [pc, #40]	; (10108 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x109>)
   100e0:	4808      	ldr	r0, [pc, #32]	; (10104 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x105>)
   100e2:	f640 138b 	movw	r3, #2443	; 0x98b
   100e6:	4642      	mov	r2, r8
   100e8:	f00e fc18 	bl	1e91c <printk>
   100ec:	4040      	eors	r0, r0
   100ee:	f380 8811 	msr	BASEPRI, r0
   100f2:	f04f 0003 	mov.w	r0, #3
   100f6:	df02      	svc	2
   100f8:	e7be      	b.n	10078 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x79>
   100fa:	bf00      	nop
   100fc:	20001eac 	.word	0x20001eac
   10100:	00024bbc 	.word	0x00024bbc
   10104:	00024904 	.word	0x00024904
   10108:	00024ba4 	.word	0x00024ba4
   1010c:	00024b60 	.word	0x00024b60
   10110:	00024974 	.word	0x00024974
   10114:	200002d0 	.word	0x200002d0

00010118 <rx_demux>:
{
   10118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1011c:	4f6d      	ldr	r7, [pc, #436]	; (102d4 <rx_demux+0x1bc>)
	k_sem_give(sem_recv);
   1011e:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 102e8 <rx_demux+0x1d0>
		LL_ASSERT(0);
   10122:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 102ec <rx_demux+0x1d4>
   10126:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 102f0 <rx_demux+0x1d8>
{
   1012a:	b087      	sub	sp, #28
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   1012c:	e9d7 0100 	ldrd	r0, r1, [r7]
   10130:	aa03      	add	r2, sp, #12
   10132:	f7fd f83d 	bl	d1b0 <memq_peek>
		if (link) {
   10136:	4605      	mov	r5, r0
   10138:	2800      	cmp	r0, #0
   1013a:	d036      	beq.n	101aa <rx_demux+0x92>
			LL_ASSERT(rx);
   1013c:	9b03      	ldr	r3, [sp, #12]
   1013e:	2b00      	cmp	r3, #0
   10140:	f000 80a4 	beq.w	1028c <rx_demux+0x174>
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   10144:	7818      	ldrb	r0, [r3, #0]
   10146:	aa04      	add	r2, sp, #16
   10148:	a902      	add	r1, sp, #8
   1014a:	f006 f9bd 	bl	164c8 <ull_conn_ack_by_last_peek>
			if (link_tx) {
   1014e:	4604      	mov	r4, r0
   10150:	2800      	cmp	r0, #0
   10152:	d056      	beq.n	10202 <rx_demux+0xea>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
   10154:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
   10158:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1015c:	f891 b000 	ldrb.w	fp, [r1]
   10160:	9205      	str	r2, [sp, #20]
   10162:	f8ad 300a 	strh.w	r3, [sp, #10]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   10166:	ae05      	add	r6, sp, #20
   10168:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
   1016c:	f006 f9c2 	bl	164f4 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   10170:	4621      	mov	r1, r4
   10172:	9a05      	ldr	r2, [sp, #20]
   10174:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   10178:	f006 fa04 	bl	16584 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   1017c:	4620      	mov	r0, r4
   1017e:	f006 f97d 	bl	1647c <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   10182:	4632      	mov	r2, r6
   10184:	4629      	mov	r1, r5
   10186:	4658      	mov	r0, fp
   10188:	f006 f99e 	bl	164c8 <ull_conn_ack_by_last_peek>
	} while (link);
   1018c:	4604      	mov	r4, r0
   1018e:	2800      	cmp	r0, #0
   10190:	d1ec      	bne.n	1016c <rx_demux+0x54>
	k_sem_give(sem_recv);
   10192:	f8d8 0000 	ldr.w	r0, [r8]
   10196:	f00d fd09 	bl	1dbac <z_impl_k_sem_give>
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   1019a:	e9d7 0100 	ldrd	r0, r1, [r7]
   1019e:	aa03      	add	r2, sp, #12
   101a0:	f7fd f806 	bl	d1b0 <memq_peek>
		if (link) {
   101a4:	4605      	mov	r5, r0
   101a6:	2800      	cmp	r0, #0
   101a8:	d1c8      	bne.n	1013c <rx_demux+0x24>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
   101aa:	aa04      	add	r2, sp, #16
   101ac:	a902      	add	r1, sp, #8
   101ae:	f10d 0007 	add.w	r0, sp, #7
   101b2:	f006 f96f 	bl	16494 <ull_conn_ack_peek>
			if (link) {
   101b6:	4604      	mov	r4, r0
   101b8:	2800      	cmp	r0, #0
   101ba:	d064      	beq.n	10286 <rx_demux+0x16e>
				rx_demux_conn_tx_ack(ack_last, handle,
   101bc:	9a04      	ldr	r2, [sp, #16]
   101be:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   101c2:	f89d b007 	ldrb.w	fp, [sp, #7]
   101c6:	9205      	str	r2, [sp, #20]
   101c8:	f8ad 300a 	strh.w	r3, [sp, #10]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   101cc:	ae05      	add	r6, sp, #20
   101ce:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
   101d2:	f006 f98f 	bl	164f4 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   101d6:	4621      	mov	r1, r4
   101d8:	9a05      	ldr	r2, [sp, #20]
   101da:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   101de:	f006 f9d1 	bl	16584 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   101e2:	4620      	mov	r0, r4
   101e4:	f006 f94a 	bl	1647c <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   101e8:	4632      	mov	r2, r6
   101ea:	4629      	mov	r1, r5
   101ec:	4658      	mov	r0, fp
   101ee:	f006 f96b 	bl	164c8 <ull_conn_ack_by_last_peek>
	} while (link);
   101f2:	4604      	mov	r4, r0
   101f4:	2800      	cmp	r0, #0
   101f6:	d1ec      	bne.n	101d2 <rx_demux+0xba>
	k_sem_give(sem_recv);
   101f8:	f8d8 0000 	ldr.w	r0, [r8]
   101fc:	f00d fcd6 	bl	1dbac <z_impl_k_sem_give>
			if (nack) {
   10200:	e7cb      	b.n	1019a <rx_demux+0x82>
				nack = rx_demux_rx(link, rx);
   10202:	9b03      	ldr	r3, [sp, #12]
   10204:	9305      	str	r3, [sp, #20]
	switch (rx->type) {
   10206:	791b      	ldrb	r3, [r3, #4]
   10208:	3b01      	subs	r3, #1
   1020a:	2b14      	cmp	r3, #20
   1020c:	d80c      	bhi.n	10228 <rx_demux+0x110>
   1020e:	e8df f003 	tbb	[pc, r3]
   10212:	0b19      	.short	0x0b19
   10214:	0b0b0b35 	.word	0x0b0b0b35
   10218:	0b0b0b0b 	.word	0x0b0b0b0b
   1021c:	0b0b0b0b 	.word	0x0b0b0b0b
   10220:	0b0b0b0b 	.word	0x0b0b0b0b
   10224:	2b0b      	.short	0x2b0b
   10226:	19          	.byte	0x19
   10227:	00          	.byte	0x00
		LL_ASSERT(0);
   10228:	482b      	ldr	r0, [pc, #172]	; (102d8 <rx_demux+0x1c0>)
   1022a:	f640 132f 	movw	r3, #2351	; 0x92f
   1022e:	464a      	mov	r2, r9
   10230:	4651      	mov	r1, sl
   10232:	f00e fb73 	bl	1e91c <printk>
   10236:	4040      	eors	r0, r0
   10238:	f380 8811 	msr	BASEPRI, r0
   1023c:	f04f 0003 	mov.w	r0, #3
   10240:	df02      	svc	2
			if (nack) {
   10242:	e773      	b.n	1012c <rx_demux+0x14>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   10244:	4923      	ldr	r1, [pc, #140]	; (102d4 <rx_demux+0x1bc>)
   10246:	6878      	ldr	r0, [r7, #4]
   10248:	2200      	movs	r2, #0
   1024a:	f7fc ffb9 	bl	d1c0 <memq_dequeue>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   1024e:	4b23      	ldr	r3, [pc, #140]	; (102dc <rx_demux+0x1c4>)
		ll_rx_put(link, rx);
   10250:	9905      	ldr	r1, [sp, #20]
	rx_hdr->ack_last = mfifo_tx_ack.l;
   10252:	78db      	ldrb	r3, [r3, #3]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   10254:	4a22      	ldr	r2, [pc, #136]	; (102e0 <rx_demux+0x1c8>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   10256:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   10258:	4628      	mov	r0, r5
   1025a:	f7fc ffa1 	bl	d1a0 <memq_enqueue>
	k_sem_give(sem_recv);
   1025e:	f8d8 0000 	ldr.w	r0, [r8]
   10262:	f00d fca3 	bl	1dbac <z_impl_k_sem_give>
			if (nack) {
   10266:	e798      	b.n	1019a <rx_demux+0x82>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   10268:	491a      	ldr	r1, [pc, #104]	; (102d4 <rx_demux+0x1bc>)
   1026a:	6878      	ldr	r0, [r7, #4]
   1026c:	2200      	movs	r2, #0
   1026e:	f7fc ffa7 	bl	d1c0 <memq_dequeue>
		ull_conn_setup(link, rx);
   10272:	9905      	ldr	r1, [sp, #20]
   10274:	4628      	mov	r0, r5
   10276:	f002 fe03 	bl	12e80 <ull_conn_setup>
			if (nack) {
   1027a:	e757      	b.n	1012c <rx_demux+0x14>
		nack = ull_conn_rx(link, (void *)&rx);
   1027c:	a905      	add	r1, sp, #20
   1027e:	4628      	mov	r0, r5
   10280:	f002 fe1e 	bl	12ec0 <ull_conn_rx>
		if (nack) {
   10284:	b188      	cbz	r0, 102aa <rx_demux+0x192>
}
   10286:	b007      	add	sp, #28
   10288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LL_ASSERT(rx);
   1028c:	4915      	ldr	r1, [pc, #84]	; (102e4 <rx_demux+0x1cc>)
   1028e:	4812      	ldr	r0, [pc, #72]	; (102d8 <rx_demux+0x1c0>)
   10290:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
   10294:	464a      	mov	r2, r9
   10296:	f00e fb41 	bl	1e91c <printk>
   1029a:	4040      	eors	r0, r0
   1029c:	f380 8811 	msr	BASEPRI, r0
   102a0:	f04f 0003 	mov.w	r0, #3
   102a4:	df02      	svc	2
   102a6:	9b03      	ldr	r3, [sp, #12]
   102a8:	e74c      	b.n	10144 <rx_demux+0x2c>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   102aa:	490a      	ldr	r1, [pc, #40]	; (102d4 <rx_demux+0x1bc>)
   102ac:	4602      	mov	r2, r0
   102ae:	6878      	ldr	r0, [r7, #4]
   102b0:	f7fc ff86 	bl	d1c0 <memq_dequeue>
		if (rx) {
   102b4:	9905      	ldr	r1, [sp, #20]
   102b6:	2900      	cmp	r1, #0
   102b8:	f43f af38 	beq.w	1012c <rx_demux+0x14>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   102bc:	4b07      	ldr	r3, [pc, #28]	; (102dc <rx_demux+0x1c4>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   102be:	4a08      	ldr	r2, [pc, #32]	; (102e0 <rx_demux+0x1c8>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   102c0:	78db      	ldrb	r3, [r3, #3]
   102c2:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   102c4:	4628      	mov	r0, r5
   102c6:	f7fc ff6b 	bl	d1a0 <memq_enqueue>
	k_sem_give(sem_recv);
   102ca:	f8d8 0000 	ldr.w	r0, [r8]
   102ce:	f00d fc6d 	bl	1dbac <z_impl_k_sem_give>
			if (nack) {
   102d2:	e72b      	b.n	1012c <rx_demux+0x14>
   102d4:	20001eb4 	.word	0x20001eb4
   102d8:	00024904 	.word	0x00024904
   102dc:	20000414 	.word	0x20000414
   102e0:	20001ea8 	.word	0x20001ea8
   102e4:	00024bcc 	.word	0x00024bcc
   102e8:	20001ebc 	.word	0x20001ebc
   102ec:	00024b60 	.word	0x00024b60
   102f0:	00024974 	.word	0x00024974

000102f4 <ll_init>:
{
   102f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sem_recv = sem_rx;
   102f8:	4ba3      	ldr	r3, [pc, #652]	; (10588 <ll_init+0x294>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   102fa:	4ca4      	ldr	r4, [pc, #656]	; (1058c <ll_init+0x298>)
	sem_recv = sem_rx;
   102fc:	6018      	str	r0, [r3, #0]
{
   102fe:	b086      	sub	sp, #24
	cntr_init();
   10300:	f009 fa02 	bl	19708 <cntr_init>
	mayfly_init();
   10304:	f7fc ff6c 	bl	d1e0 <mayfly_init>
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   10308:	4aa1      	ldr	r2, [pc, #644]	; (10590 <ll_init+0x29c>)
   1030a:	48a2      	ldr	r0, [pc, #648]	; (10594 <ll_init+0x2a0>)
   1030c:	9205      	str	r2, [sp, #20]
   1030e:	9004      	str	r0, [sp, #16]
   10310:	4aa1      	ldr	r2, [pc, #644]	; (10598 <ll_init+0x2a4>)
   10312:	48a2      	ldr	r0, [pc, #648]	; (1059c <ll_init+0x2a8>)
   10314:	9203      	str	r2, [sp, #12]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   10316:	2304      	movs	r3, #4
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   10318:	220c      	movs	r2, #12
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   1031a:	2502      	movs	r5, #2
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   1031c:	e9cd 2001 	strd	r2, r0, [sp, #4]
   10320:	9400      	str	r4, [sp, #0]
   10322:	4a9f      	ldr	r2, [pc, #636]	; (105a0 <ll_init+0x2ac>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   10324:	7023      	strb	r3, [r4, #0]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   10326:	4619      	mov	r1, r3
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   10328:	7223      	strb	r3, [r4, #8]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   1032a:	2000      	movs	r0, #0
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   1032c:	7425      	strb	r5, [r4, #16]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_THREAD_OPS;
   1032e:	7625      	strb	r5, [r4, #24]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   10330:	f7fe f96e 	bl	e610 <ticker_init>
	LL_ASSERT(!err);
   10334:	2800      	cmp	r0, #0
   10336:	f040 80e9 	bne.w	1050c <ll_init+0x218>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1033a:	2201      	movs	r2, #1
   1033c:	2100      	movs	r1, #0
   1033e:	4899      	ldr	r0, [pc, #612]	; (105a4 <ll_init+0x2b0>)
   10340:	f013 f98f 	bl	23662 <z_impl_k_sem_init>
	err = lll_init();
   10344:	f007 fcd8 	bl	17cf8 <lll_init>
	if (err) {
   10348:	4604      	mov	r4, r0
   1034a:	b118      	cbz	r0, 10354 <ll_init+0x60>
}
   1034c:	4620      	mov	r0, r4
   1034e:	b006      	add	sp, #24
   10350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   10354:	4b94      	ldr	r3, [pc, #592]	; (105a8 <ll_init+0x2b4>)
		link = mem_acquire(&mem_link_done.free);
   10356:	f8df 8258 	ldr.w	r8, [pc, #600]	; 105b0 <ll_init+0x2bc>
   1035a:	4d94      	ldr	r5, [pc, #592]	; (105ac <ll_init+0x2b8>)
		rx = mem_acquire(&mem_done.free);
   1035c:	4f92      	ldr	r7, [pc, #584]	; (105a8 <ll_init+0x2b4>)
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   1035e:	1d18      	adds	r0, r3, #4
   10360:	2203      	movs	r2, #3
   10362:	2134      	movs	r1, #52	; 0x34
   10364:	f7fc fe9a 	bl	d09c <mem_init>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX +
   10368:	4643      	mov	r3, r8
   1036a:	2204      	movs	r2, #4
   1036c:	1898      	adds	r0, r3, r2
   1036e:	2108      	movs	r1, #8
   10370:	f7fc fe94 	bl	d09c <mem_init>
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   10374:	78ec      	ldrb	r4, [r5, #3]
	if (last == count) {
   10376:	786a      	ldrb	r2, [r5, #1]
   10378:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   1037a:	3401      	adds	r4, #1
   1037c:	b2e4      	uxtb	r4, r4
		last = 0U;
   1037e:	42a2      	cmp	r2, r4
   10380:	bf08      	it	eq
   10382:	2400      	moveq	r4, #0
	if (last == first) {
   10384:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_done.free);
   10386:	4640      	mov	r0, r8
   10388:	d013      	beq.n	103b2 <ll_init+0xbe>
   1038a:	f7fc fea7 	bl	d0dc <mem_acquire>
   1038e:	4606      	mov	r6, r0
		rx = mem_acquire(&mem_done.free);
   10390:	4638      	mov	r0, r7
		if (!link) {
   10392:	b176      	cbz	r6, 103b2 <ll_init+0xbe>
		rx = mem_acquire(&mem_done.free);
   10394:	f7fc fea2 	bl	d0dc <mem_acquire>
		if (!rx) {
   10398:	b138      	cbz	r0, 103aa <ll_init+0xb6>
		rx->link = link;
   1039a:	6006      	str	r6, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1039c:	78ea      	ldrb	r2, [r5, #3]
   1039e:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   103a0:	fb02 5303 	mla	r3, r2, r3, r5
   103a4:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
   103a6:	70ec      	strb	r4, [r5, #3]
}
   103a8:	e7e5      	b.n	10376 <ll_init+0x82>
			mem_release(link, &mem_link_done.free);
   103aa:	4981      	ldr	r1, [pc, #516]	; (105b0 <ll_init+0x2bc>)
   103ac:	4630      	mov	r0, r6
   103ae:	f7fc feab 	bl	d108 <mem_release>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   103b2:	4b80      	ldr	r3, [pc, #512]	; (105b4 <ll_init+0x2c0>)
   103b4:	2209      	movs	r2, #9
   103b6:	1d18      	adds	r0, r3, #4
   103b8:	2148      	movs	r1, #72	; 0x48
   103ba:	f7fc fe6f 	bl	d09c <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   103be:	4b7e      	ldr	r3, [pc, #504]	; (105b8 <ll_init+0x2c4>)
   103c0:	220b      	movs	r2, #11
   103c2:	1d18      	adds	r0, r3, #4
   103c4:	2108      	movs	r1, #8
   103c6:	f7fc fe69 	bl	d09c <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   103ca:	487b      	ldr	r0, [pc, #492]	; (105b8 <ll_init+0x2c4>)
   103cc:	f7fc fe86 	bl	d0dc <mem_acquire>
	LL_ASSERT(link);
   103d0:	4604      	mov	r4, r0
   103d2:	2800      	cmp	r0, #0
   103d4:	f000 80c4 	beq.w	10560 <ll_init+0x26c>
	MEMQ_INIT(ull_rx, link);
   103d8:	4a78      	ldr	r2, [pc, #480]	; (105bc <ll_init+0x2c8>)
   103da:	4620      	mov	r0, r4
   103dc:	1f11      	subs	r1, r2, #4
   103de:	f7fc fed1 	bl	d184 <memq_init>
	link = mem_acquire(&mem_link_done.free);
   103e2:	4873      	ldr	r0, [pc, #460]	; (105b0 <ll_init+0x2bc>)
   103e4:	f7fc fe7a 	bl	d0dc <mem_acquire>
	LL_ASSERT(link);
   103e8:	4604      	mov	r4, r0
   103ea:	2800      	cmp	r0, #0
   103ec:	f000 80aa 	beq.w	10544 <ll_init+0x250>
	MEMQ_INIT(ull_done, link);
   103f0:	4a73      	ldr	r2, [pc, #460]	; (105c0 <ll_init+0x2cc>)
   103f2:	4620      	mov	r0, r4
   103f4:	1f11      	subs	r1, r2, #4
   103f6:	f7fc fec5 	bl	d184 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   103fa:	486f      	ldr	r0, [pc, #444]	; (105b8 <ll_init+0x2c4>)
   103fc:	f7fc fe6e 	bl	d0dc <mem_acquire>
	LL_ASSERT(link);
   10400:	4604      	mov	r4, r0
   10402:	2800      	cmp	r0, #0
   10404:	f000 8090 	beq.w	10528 <ll_init+0x234>
	MEMQ_INIT(ll_rx, link);
   10408:	4a6e      	ldr	r2, [pc, #440]	; (105c4 <ll_init+0x2d0>)
	mem_link_rx.quota_pdu = RX_CNT;
   1040a:	4f6f      	ldr	r7, [pc, #444]	; (105c8 <ll_init+0x2d4>)
   1040c:	4d6f      	ldr	r5, [pc, #444]	; (105cc <ll_init+0x2d8>)
		rx = mem_acquire(&mem_pdu_rx.free);
   1040e:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 105b4 <ll_init+0x2c0>
	MEMQ_INIT(ll_rx, link);
   10412:	4620      	mov	r0, r4
   10414:	1f11      	subs	r1, r2, #4
	mem_link_rx.quota_pdu = RX_CNT;
   10416:	46b8      	mov	r8, r7
	MEMQ_INIT(ll_rx, link);
   10418:	f7fc feb4 	bl	d184 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   1041c:	2307      	movs	r3, #7
   1041e:	f808 3b04 	strb.w	r3, [r8], #4
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   10422:	78ec      	ldrb	r4, [r5, #3]
   10424:	2606      	movs	r6, #6
	if (last == count) {
   10426:	786a      	ldrb	r2, [r5, #1]
   10428:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   1042a:	3401      	adds	r4, #1
   1042c:	b2e4      	uxtb	r4, r4
		last = 0U;
   1042e:	42a2      	cmp	r2, r4
   10430:	bf08      	it	eq
   10432:	2400      	moveq	r4, #0
	if (last == first) {
   10434:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   10436:	4640      	mov	r0, r8
   10438:	d064      	beq.n	10504 <ll_init+0x210>
   1043a:	f7fc fe4f 	bl	d0dc <mem_acquire>
   1043e:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   10440:	4648      	mov	r0, r9
		if (!link) {
   10442:	f1ba 0f00 	cmp.w	sl, #0
   10446:	d041      	beq.n	104cc <ll_init+0x1d8>
		rx = mem_acquire(&mem_pdu_rx.free);
   10448:	f7fc fe48 	bl	d0dc <mem_acquire>
		if (!rx) {
   1044c:	2800      	cmp	r0, #0
   1044e:	f000 8095 	beq.w	1057c <ll_init+0x288>
		rx->link = link;
   10452:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   10456:	78ea      	ldrb	r2, [r5, #3]
   10458:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1045a:	fb02 5303 	mla	r3, r2, r3, r5
   1045e:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   10460:	783b      	ldrb	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
   10462:	70ec      	strb	r4, [r5, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   10464:	3e01      	subs	r6, #1
	mem_link_rx.quota_pdu += delta;
   10466:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   10468:	b2f6      	uxtb	r6, r6
	mem_link_rx.quota_pdu += delta;
   1046a:	b2db      	uxtb	r3, r3
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1046c:	2eff      	cmp	r6, #255	; 0xff
	mem_link_rx.quota_pdu += delta;
   1046e:	703b      	strb	r3, [r7, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   10470:	d1d9      	bne.n	10426 <ll_init+0x132>
	while (mem_link_rx.quota_pdu &&
   10472:	b35b      	cbz	r3, 104cc <ll_init+0x1d8>
   10474:	4d56      	ldr	r5, [pc, #344]	; (105d0 <ll_init+0x2dc>)
		link = mem_acquire(&mem_link_rx.free);
   10476:	4e50      	ldr	r6, [pc, #320]	; (105b8 <ll_init+0x2c4>)
   10478:	78ec      	ldrb	r4, [r5, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   1047a:	f8df 8138 	ldr.w	r8, [pc, #312]	; 105b4 <ll_init+0x2c0>
		link->mem = NULL;
   1047e:	f04f 0900 	mov.w	r9, #0
	if (last == count) {
   10482:	786a      	ldrb	r2, [r5, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   10484:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   10486:	3401      	adds	r4, #1
   10488:	b2e4      	uxtb	r4, r4
		last = 0U;
   1048a:	42a2      	cmp	r2, r4
   1048c:	bf08      	it	eq
   1048e:	2400      	moveq	r4, #0
	if (last == first) {
   10490:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   10492:	4630      	mov	r0, r6
   10494:	d01a      	beq.n	104cc <ll_init+0x1d8>
   10496:	f7fc fe21 	bl	d0dc <mem_acquire>
   1049a:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   1049c:	4640      	mov	r0, r8
		if (!link) {
   1049e:	f1ba 0f00 	cmp.w	sl, #0
   104a2:	d013      	beq.n	104cc <ll_init+0x1d8>
		rx = mem_acquire(&mem_pdu_rx.free);
   104a4:	f7fc fe1a 	bl	d0dc <mem_acquire>
		if (!rx) {
   104a8:	2800      	cmp	r0, #0
   104aa:	d067      	beq.n	1057c <ll_init+0x288>
		link->mem = NULL;
   104ac:	f8ca 9004 	str.w	r9, [sl, #4]
		rx->link = link;
   104b0:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   104b4:	78ea      	ldrb	r2, [r5, #3]
   104b6:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   104b8:	fb02 5303 	mla	r3, r2, r3, r5
   104bc:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   104be:	783b      	ldrb	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
   104c0:	70ec      	strb	r4, [r5, #3]
   104c2:	3b01      	subs	r3, #1
   104c4:	b2db      	uxtb	r3, r3
   104c6:	703b      	strb	r3, [r7, #0]
	while (mem_link_rx.quota_pdu &&
   104c8:	2b00      	cmp	r3, #0
   104ca:	d1da      	bne.n	10482 <ll_init+0x18e>
	err = lll_adv_init();
   104cc:	f007 fff0 	bl	184b0 <lll_adv_init>
	if (err) {
   104d0:	4604      	mov	r4, r0
   104d2:	2800      	cmp	r0, #0
   104d4:	f47f af3a 	bne.w	1034c <ll_init+0x58>
	err = ull_adv_init();
   104d8:	f001 fa9a 	bl	11a10 <ull_adv_init>
	if (err) {
   104dc:	4604      	mov	r4, r0
   104de:	2800      	cmp	r0, #0
   104e0:	f47f af34 	bne.w	1034c <ll_init+0x58>
	err = lll_conn_init();
   104e4:	f008 fc86 	bl	18df4 <lll_conn_init>
	if (err) {
   104e8:	4604      	mov	r4, r0
   104ea:	2800      	cmp	r0, #0
   104ec:	f47f af2e 	bne.w	1034c <ll_init+0x58>
	err = ull_conn_init();
   104f0:	f002 fc72 	bl	12dd8 <ull_conn_init>
	if (err) {
   104f4:	4604      	mov	r4, r0
   104f6:	2800      	cmp	r0, #0
   104f8:	f47f af28 	bne.w	1034c <ll_init+0x58>
		ull_filter_reset(true);
   104fc:	2001      	movs	r0, #1
   104fe:	f007 f945 	bl	1778c <ull_filter_reset>
	return  0;
   10502:	e723      	b.n	1034c <ll_init+0x58>
	if (!max) {
   10504:	2e00      	cmp	r6, #0
   10506:	d0e1      	beq.n	104cc <ll_init+0x1d8>
   10508:	783b      	ldrb	r3, [r7, #0]
   1050a:	e7b2      	b.n	10472 <ll_init+0x17e>
	LL_ASSERT(!err);
   1050c:	4a31      	ldr	r2, [pc, #196]	; (105d4 <ll_init+0x2e0>)
   1050e:	4932      	ldr	r1, [pc, #200]	; (105d8 <ll_init+0x2e4>)
   10510:	4832      	ldr	r0, [pc, #200]	; (105dc <ll_init+0x2e8>)
   10512:	f240 13a9 	movw	r3, #425	; 0x1a9
   10516:	f00e fa01 	bl	1e91c <printk>
   1051a:	4040      	eors	r0, r0
   1051c:	f380 8811 	msr	BASEPRI, r0
   10520:	f04f 0003 	mov.w	r0, #3
   10524:	df02      	svc	2
   10526:	e708      	b.n	1033a <ll_init+0x46>
	LL_ASSERT(link);
   10528:	4a2a      	ldr	r2, [pc, #168]	; (105d4 <ll_init+0x2e0>)
   1052a:	492d      	ldr	r1, [pc, #180]	; (105e0 <ll_init+0x2ec>)
   1052c:	482b      	ldr	r0, [pc, #172]	; (105dc <ll_init+0x2e8>)
   1052e:	f240 7317 	movw	r3, #1815	; 0x717
   10532:	f00e f9f3 	bl	1e91c <printk>
   10536:	4040      	eors	r0, r0
   10538:	f380 8811 	msr	BASEPRI, r0
   1053c:	f04f 0003 	mov.w	r0, #3
   10540:	df02      	svc	2
   10542:	e761      	b.n	10408 <ll_init+0x114>
	LL_ASSERT(link);
   10544:	4a23      	ldr	r2, [pc, #140]	; (105d4 <ll_init+0x2e0>)
   10546:	4926      	ldr	r1, [pc, #152]	; (105e0 <ll_init+0x2ec>)
   10548:	4824      	ldr	r0, [pc, #144]	; (105dc <ll_init+0x2e8>)
   1054a:	f240 730f 	movw	r3, #1807	; 0x70f
   1054e:	f00e f9e5 	bl	1e91c <printk>
   10552:	4040      	eors	r0, r0
   10554:	f380 8811 	msr	BASEPRI, r0
   10558:	f04f 0003 	mov.w	r0, #3
   1055c:	df02      	svc	2
   1055e:	e747      	b.n	103f0 <ll_init+0xfc>
	LL_ASSERT(link);
   10560:	4a1c      	ldr	r2, [pc, #112]	; (105d4 <ll_init+0x2e0>)
   10562:	491f      	ldr	r1, [pc, #124]	; (105e0 <ll_init+0x2ec>)
   10564:	481d      	ldr	r0, [pc, #116]	; (105dc <ll_init+0x2e8>)
   10566:	f240 7307 	movw	r3, #1799	; 0x707
   1056a:	f00e f9d7 	bl	1e91c <printk>
   1056e:	4040      	eors	r0, r0
   10570:	f380 8811 	msr	BASEPRI, r0
   10574:	f04f 0003 	mov.w	r0, #3
   10578:	df02      	svc	2
   1057a:	e72d      	b.n	103d8 <ll_init+0xe4>
			mem_release(link, &mem_link_rx.free);
   1057c:	490e      	ldr	r1, [pc, #56]	; (105b8 <ll_init+0x2c4>)
   1057e:	4650      	mov	r0, sl
   10580:	f7fc fdc2 	bl	d108 <mem_release>
			return;
   10584:	e7a2      	b.n	104cc <ll_init+0x1d8>
   10586:	bf00      	nop
   10588:	20001ebc 	.word	0x20001ebc
   1058c:	20002208 	.word	0x20002208
   10590:	0001a301 	.word	0x0001a301
   10594:	0001a221 	.word	0x0001a221
   10598:	0001a1bd 	.word	0x0001a1bd
   1059c:	20001f98 	.word	0x20001f98
   105a0:	20001ed8 	.word	0x20001ed8
   105a4:	20001ec0 	.word	0x20001ec0
   105a8:	20001af4 	.word	0x20001af4
   105ac:	200002d0 	.word	0x200002d0
   105b0:	20001b94 	.word	0x20001b94
   105b4:	20001c18 	.word	0x20001c18
   105b8:	20001bbc 	.word	0x20001bbc
   105bc:	20001eb8 	.word	0x20001eb8
   105c0:	20001eb0 	.word	0x20001eb0
   105c4:	20001ea8 	.word	0x20001ea8
   105c8:	20001bb8 	.word	0x20001bb8
   105cc:	200002f8 	.word	0x200002f8
   105d0:	200002e4 	.word	0x200002e4
   105d4:	00024b60 	.word	0x00024b60
   105d8:	00024b9c 	.word	0x00024b9c
   105dc:	00024904 	.word	0x00024904
   105e0:	00024e9c 	.word	0x00024e9c

000105e4 <ll_reset>:
{
   105e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   105e8:	b087      	sub	sp, #28
	err = ull_adv_reset();
   105ea:	f001 fa13 	bl	11a14 <ull_adv_reset>
	LL_ASSERT(!err);
   105ee:	2800      	cmp	r0, #0
   105f0:	f040 8122 	bne.w	10838 <ll_reset+0x254>
	err = ull_conn_reset();
   105f4:	f002 fbf2 	bl	12ddc <ull_conn_reset>
	LL_ASSERT(!err);
   105f8:	2800      	cmp	r0, #0
   105fa:	f040 810f 	bne.w	1081c <ll_reset+0x238>
	MFIFO_INIT(tx_ack);
   105fe:	4baf      	ldr	r3, [pc, #700]	; (108bc <ll_reset+0x2d8>)
	MFIFO_INIT(done);
   10600:	4eaf      	ldr	r6, [pc, #700]	; (108c0 <ll_reset+0x2dc>)
	MFIFO_INIT(pdu_rx_free);
   10602:	4db0      	ldr	r5, [pc, #704]	; (108c4 <ll_reset+0x2e0>)
	MFIFO_INIT(ll_pdu_rx_free);
   10604:	4fb0      	ldr	r7, [pc, #704]	; (108c8 <ll_reset+0x2e4>)
	MFIFO_INIT(tx_ack);
   10606:	2400      	movs	r4, #0
   10608:	805c      	strh	r4, [r3, #2]
		ull_filter_reset(false);
   1060a:	4620      	mov	r0, r4
   1060c:	f007 f8be 	bl	1778c <ull_filter_reset>
	MFIFO_INIT(prep);
   10610:	4bae      	ldr	r3, [pc, #696]	; (108cc <ll_reset+0x2e8>)
	MFIFO_INIT(done);
   10612:	8074      	strh	r4, [r6, #2]
	MFIFO_INIT(prep);
   10614:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(pdu_rx_free);
   10616:	806c      	strh	r4, [r5, #2]
	MFIFO_INIT(ll_pdu_rx_free);
   10618:	807c      	strh	r4, [r7, #2]
   1061a:	2201      	movs	r2, #1
   1061c:	4621      	mov	r1, r4
   1061e:	4668      	mov	r0, sp
   10620:	f013 f81f 	bl	23662 <z_impl_k_sem_init>
		mfy.param = &sem;
   10624:	4baa      	ldr	r3, [pc, #680]	; (108d0 <ll_reset+0x2ec>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   10626:	4622      	mov	r2, r4
   10628:	4621      	mov	r1, r4
   1062a:	2003      	movs	r0, #3
		mfy.param = &sem;
   1062c:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   10630:	f7fc fe2a 	bl	d288 <mayfly_enqueue>
		LL_ASSERT(!retval);
   10634:	2800      	cmp	r0, #0
   10636:	f040 80e3 	bne.w	10800 <ll_reset+0x21c>
	return z_impl_k_sem_take(sem, timeout);
   1063a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1063e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10642:	4668      	mov	r0, sp
   10644:	f00d fad8 	bl	1dbf8 <z_impl_k_sem_take>
	err = ull_adv_reset_finalize();
   10648:	f001 fa8c 	bl	11b64 <ull_adv_reset_finalize>
	LL_ASSERT(!err);
   1064c:	2800      	cmp	r0, #0
   1064e:	f040 80c9 	bne.w	107e4 <ll_reset+0x200>
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   10652:	4ba0      	ldr	r3, [pc, #640]	; (108d4 <ll_reset+0x2f0>)
		link = mem_acquire(&mem_link_done.free);
   10654:	f8df 9280 	ldr.w	r9, [pc, #640]	; 108d8 <ll_reset+0x2f4>
		rx = mem_acquire(&mem_done.free);
   10658:	f8df 8278 	ldr.w	r8, [pc, #632]	; 108d4 <ll_reset+0x2f0>
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   1065c:	1d18      	adds	r0, r3, #4
   1065e:	2203      	movs	r2, #3
   10660:	2134      	movs	r1, #52	; 0x34
   10662:	f7fc fd1b 	bl	d09c <mem_init>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX +
   10666:	464b      	mov	r3, r9
   10668:	2204      	movs	r2, #4
   1066a:	1898      	adds	r0, r3, r2
   1066c:	2108      	movs	r1, #8
   1066e:	f7fc fd15 	bl	d09c <mem_init>
static inline void done_alloc(void)
   10672:	78f4      	ldrb	r4, [r6, #3]
	if (last == count) {
   10674:	7872      	ldrb	r2, [r6, #1]
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   10676:	78b3      	ldrb	r3, [r6, #2]
	last = last + 1;
   10678:	3401      	adds	r4, #1
   1067a:	b2e4      	uxtb	r4, r4
		last = 0U;
   1067c:	42a2      	cmp	r2, r4
   1067e:	bf08      	it	eq
   10680:	2400      	moveq	r4, #0
	if (last == first) {
   10682:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_done.free);
   10684:	4648      	mov	r0, r9
   10686:	d016      	beq.n	106b6 <ll_reset+0xd2>
   10688:	f7fc fd28 	bl	d0dc <mem_acquire>
   1068c:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_done.free);
   1068e:	4640      	mov	r0, r8
		if (!link) {
   10690:	f1ba 0f00 	cmp.w	sl, #0
   10694:	d00f      	beq.n	106b6 <ll_reset+0xd2>
		rx = mem_acquire(&mem_done.free);
   10696:	f7fc fd21 	bl	d0dc <mem_acquire>
		if (!rx) {
   1069a:	b140      	cbz	r0, 106ae <ll_reset+0xca>
		rx->link = link;
   1069c:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   106a0:	78f2      	ldrb	r2, [r6, #3]
   106a2:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   106a4:	fb02 6303 	mla	r3, r2, r3, r6
   106a8:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
   106aa:	70f4      	strb	r4, [r6, #3]
}
   106ac:	e7e2      	b.n	10674 <ll_reset+0x90>
			mem_release(link, &mem_link_done.free);
   106ae:	498a      	ldr	r1, [pc, #552]	; (108d8 <ll_reset+0x2f4>)
   106b0:	4650      	mov	r0, sl
   106b2:	f7fc fd29 	bl	d108 <mem_release>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   106b6:	4b89      	ldr	r3, [pc, #548]	; (108dc <ll_reset+0x2f8>)
   106b8:	2209      	movs	r2, #9
   106ba:	1d18      	adds	r0, r3, #4
   106bc:	2148      	movs	r1, #72	; 0x48
   106be:	f7fc fced 	bl	d09c <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   106c2:	4b87      	ldr	r3, [pc, #540]	; (108e0 <ll_reset+0x2fc>)
   106c4:	220b      	movs	r2, #11
   106c6:	1d18      	adds	r0, r3, #4
   106c8:	2108      	movs	r1, #8
   106ca:	f7fc fce7 	bl	d09c <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   106ce:	4884      	ldr	r0, [pc, #528]	; (108e0 <ll_reset+0x2fc>)
   106d0:	f7fc fd04 	bl	d0dc <mem_acquire>
	LL_ASSERT(link);
   106d4:	4604      	mov	r4, r0
   106d6:	2800      	cmp	r0, #0
   106d8:	f000 80ca 	beq.w	10870 <ll_reset+0x28c>
	MEMQ_INIT(ull_rx, link);
   106dc:	4a81      	ldr	r2, [pc, #516]	; (108e4 <ll_reset+0x300>)
   106de:	4620      	mov	r0, r4
   106e0:	1f11      	subs	r1, r2, #4
   106e2:	f7fc fd4f 	bl	d184 <memq_init>
	link = mem_acquire(&mem_link_done.free);
   106e6:	487c      	ldr	r0, [pc, #496]	; (108d8 <ll_reset+0x2f4>)
   106e8:	f7fc fcf8 	bl	d0dc <mem_acquire>
	LL_ASSERT(link);
   106ec:	4604      	mov	r4, r0
   106ee:	2800      	cmp	r0, #0
   106f0:	f000 80cc 	beq.w	1088c <ll_reset+0x2a8>
	MEMQ_INIT(ull_done, link);
   106f4:	4a7c      	ldr	r2, [pc, #496]	; (108e8 <ll_reset+0x304>)
   106f6:	4620      	mov	r0, r4
   106f8:	1f11      	subs	r1, r2, #4
   106fa:	f7fc fd43 	bl	d184 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   106fe:	4878      	ldr	r0, [pc, #480]	; (108e0 <ll_reset+0x2fc>)
   10700:	f7fc fcec 	bl	d0dc <mem_acquire>
	LL_ASSERT(link);
   10704:	4604      	mov	r4, r0
   10706:	2800      	cmp	r0, #0
   10708:	f000 80a4 	beq.w	10854 <ll_reset+0x270>
	MEMQ_INIT(ll_rx, link);
   1070c:	4a77      	ldr	r2, [pc, #476]	; (108ec <ll_reset+0x308>)
	mem_link_rx.quota_pdu = RX_CNT;
   1070e:	4e78      	ldr	r6, [pc, #480]	; (108f0 <ll_reset+0x30c>)
		rx = mem_acquire(&mem_pdu_rx.free);
   10710:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 108dc <ll_reset+0x2f8>
	MEMQ_INIT(ll_rx, link);
   10714:	4620      	mov	r0, r4
   10716:	1f11      	subs	r1, r2, #4
	mem_link_rx.quota_pdu = RX_CNT;
   10718:	46b0      	mov	r8, r6
	MEMQ_INIT(ll_rx, link);
   1071a:	f7fc fd33 	bl	d184 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   1071e:	2307      	movs	r3, #7
   10720:	f808 3b04 	strb.w	r3, [r8], #4
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   10724:	78ec      	ldrb	r4, [r5, #3]
   10726:	f04f 0a06 	mov.w	sl, #6
	if (last == count) {
   1072a:	786a      	ldrb	r2, [r5, #1]
   1072c:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   1072e:	3401      	adds	r4, #1
   10730:	b2e4      	uxtb	r4, r4
		last = 0U;
   10732:	42a2      	cmp	r2, r4
   10734:	bf08      	it	eq
   10736:	2400      	moveq	r4, #0
	if (last == first) {
   10738:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   1073a:	4640      	mov	r0, r8
   1073c:	d04d      	beq.n	107da <ll_reset+0x1f6>
   1073e:	f7fc fccd 	bl	d0dc <mem_acquire>
   10742:	4683      	mov	fp, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   10744:	4648      	mov	r0, r9
		if (!link) {
   10746:	f1bb 0f00 	cmp.w	fp, #0
   1074a:	d043      	beq.n	107d4 <ll_reset+0x1f0>
		rx = mem_acquire(&mem_pdu_rx.free);
   1074c:	f7fc fcc6 	bl	d0dc <mem_acquire>
		if (!rx) {
   10750:	2800      	cmp	r0, #0
   10752:	f000 80a9 	beq.w	108a8 <ll_reset+0x2c4>
		rx->link = link;
   10756:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1075a:	78ea      	ldrb	r2, [r5, #3]
   1075c:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1075e:	fb02 5303 	mla	r3, r2, r3, r5
   10762:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   10764:	7833      	ldrb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
   10766:	70ec      	strb	r4, [r5, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   10768:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
	mem_link_rx.quota_pdu += delta;
   1076c:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1076e:	fa5f fa8a 	uxtb.w	sl, sl
	mem_link_rx.quota_pdu += delta;
   10772:	b2db      	uxtb	r3, r3
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   10774:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
	mem_link_rx.quota_pdu += delta;
   10778:	7033      	strb	r3, [r6, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1077a:	d1d6      	bne.n	1072a <ll_reset+0x146>
	while (mem_link_rx.quota_pdu &&
   1077c:	b353      	cbz	r3, 107d4 <ll_reset+0x1f0>
   1077e:	78fc      	ldrb	r4, [r7, #3]
		link = mem_acquire(&mem_link_rx.free);
   10780:	f8df 915c 	ldr.w	r9, [pc, #348]	; 108e0 <ll_reset+0x2fc>
		rx = mem_acquire(&mem_pdu_rx.free);
   10784:	f8df 8154 	ldr.w	r8, [pc, #340]	; 108dc <ll_reset+0x2f8>
		link->mem = NULL;
   10788:	2500      	movs	r5, #0
	if (last == count) {
   1078a:	787a      	ldrb	r2, [r7, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   1078c:	78bb      	ldrb	r3, [r7, #2]
	last = last + 1;
   1078e:	3401      	adds	r4, #1
   10790:	b2e4      	uxtb	r4, r4
		last = 0U;
   10792:	42a2      	cmp	r2, r4
   10794:	bf08      	it	eq
   10796:	2400      	moveq	r4, #0
	if (last == first) {
   10798:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   1079a:	4648      	mov	r0, r9
   1079c:	d01a      	beq.n	107d4 <ll_reset+0x1f0>
   1079e:	f7fc fc9d 	bl	d0dc <mem_acquire>
   107a2:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   107a4:	4640      	mov	r0, r8
		if (!link) {
   107a6:	f1ba 0f00 	cmp.w	sl, #0
   107aa:	d013      	beq.n	107d4 <ll_reset+0x1f0>
		rx = mem_acquire(&mem_pdu_rx.free);
   107ac:	f7fc fc96 	bl	d0dc <mem_acquire>
		if (!rx) {
   107b0:	2800      	cmp	r0, #0
   107b2:	d07e      	beq.n	108b2 <ll_reset+0x2ce>
		link->mem = NULL;
   107b4:	f8ca 5004 	str.w	r5, [sl, #4]
		rx->link = link;
   107b8:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   107bc:	78fa      	ldrb	r2, [r7, #3]
   107be:	783b      	ldrb	r3, [r7, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   107c0:	fb02 7303 	mla	r3, r2, r3, r7
   107c4:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   107c6:	7833      	ldrb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
   107c8:	70fc      	strb	r4, [r7, #3]
   107ca:	3b01      	subs	r3, #1
   107cc:	b2db      	uxtb	r3, r3
   107ce:	7033      	strb	r3, [r6, #0]
	while (mem_link_rx.quota_pdu &&
   107d0:	2b00      	cmp	r3, #0
   107d2:	d1da      	bne.n	1078a <ll_reset+0x1a6>
}
   107d4:	b007      	add	sp, #28
   107d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!max) {
   107da:	f1ba 0f00 	cmp.w	sl, #0
   107de:	d0f9      	beq.n	107d4 <ll_reset+0x1f0>
   107e0:	7833      	ldrb	r3, [r6, #0]
   107e2:	e7cb      	b.n	1077c <ll_reset+0x198>
	LL_ASSERT(!err);
   107e4:	4a43      	ldr	r2, [pc, #268]	; (108f4 <ll_reset+0x310>)
   107e6:	4944      	ldr	r1, [pc, #272]	; (108f8 <ll_reset+0x314>)
   107e8:	4844      	ldr	r0, [pc, #272]	; (108fc <ll_reset+0x318>)
   107ea:	f240 23da 	movw	r3, #730	; 0x2da
   107ee:	f00e f895 	bl	1e91c <printk>
   107f2:	4040      	eors	r0, r0
   107f4:	f380 8811 	msr	BASEPRI, r0
   107f8:	f04f 0003 	mov.w	r0, #3
   107fc:	df02      	svc	2
   107fe:	e728      	b.n	10652 <ll_reset+0x6e>
		LL_ASSERT(!retval);
   10800:	4a3c      	ldr	r2, [pc, #240]	; (108f4 <ll_reset+0x310>)
   10802:	493f      	ldr	r1, [pc, #252]	; (10900 <ll_reset+0x31c>)
   10804:	483d      	ldr	r0, [pc, #244]	; (108fc <ll_reset+0x318>)
   10806:	f240 23cd 	movw	r3, #717	; 0x2cd
   1080a:	f00e f887 	bl	1e91c <printk>
   1080e:	4040      	eors	r0, r0
   10810:	f380 8811 	msr	BASEPRI, r0
   10814:	f04f 0003 	mov.w	r0, #3
   10818:	df02      	svc	2
   1081a:	e70e      	b.n	1063a <ll_reset+0x56>
	LL_ASSERT(!err);
   1081c:	4a35      	ldr	r2, [pc, #212]	; (108f4 <ll_reset+0x310>)
   1081e:	4936      	ldr	r1, [pc, #216]	; (108f8 <ll_reset+0x314>)
   10820:	4836      	ldr	r0, [pc, #216]	; (108fc <ll_reset+0x318>)
   10822:	f240 239b 	movw	r3, #667	; 0x29b
   10826:	f00e f879 	bl	1e91c <printk>
   1082a:	4040      	eors	r0, r0
   1082c:	f380 8811 	msr	BASEPRI, r0
   10830:	f04f 0003 	mov.w	r0, #3
   10834:	df02      	svc	2
   10836:	e6e2      	b.n	105fe <ll_reset+0x1a>
	LL_ASSERT(!err);
   10838:	4a2e      	ldr	r2, [pc, #184]	; (108f4 <ll_reset+0x310>)
   1083a:	492f      	ldr	r1, [pc, #188]	; (108f8 <ll_reset+0x314>)
   1083c:	482f      	ldr	r0, [pc, #188]	; (108fc <ll_reset+0x318>)
   1083e:	f240 234b 	movw	r3, #587	; 0x24b
   10842:	f00e f86b 	bl	1e91c <printk>
   10846:	4040      	eors	r0, r0
   10848:	f380 8811 	msr	BASEPRI, r0
   1084c:	f04f 0003 	mov.w	r0, #3
   10850:	df02      	svc	2
   10852:	e6cf      	b.n	105f4 <ll_reset+0x10>
	LL_ASSERT(link);
   10854:	4a27      	ldr	r2, [pc, #156]	; (108f4 <ll_reset+0x310>)
   10856:	492b      	ldr	r1, [pc, #172]	; (10904 <ll_reset+0x320>)
   10858:	4828      	ldr	r0, [pc, #160]	; (108fc <ll_reset+0x318>)
   1085a:	f240 7317 	movw	r3, #1815	; 0x717
   1085e:	f00e f85d 	bl	1e91c <printk>
   10862:	4040      	eors	r0, r0
   10864:	f380 8811 	msr	BASEPRI, r0
   10868:	f04f 0003 	mov.w	r0, #3
   1086c:	df02      	svc	2
   1086e:	e74d      	b.n	1070c <ll_reset+0x128>
	LL_ASSERT(link);
   10870:	4a20      	ldr	r2, [pc, #128]	; (108f4 <ll_reset+0x310>)
   10872:	4924      	ldr	r1, [pc, #144]	; (10904 <ll_reset+0x320>)
   10874:	4821      	ldr	r0, [pc, #132]	; (108fc <ll_reset+0x318>)
   10876:	f240 7307 	movw	r3, #1799	; 0x707
   1087a:	f00e f84f 	bl	1e91c <printk>
   1087e:	4040      	eors	r0, r0
   10880:	f380 8811 	msr	BASEPRI, r0
   10884:	f04f 0003 	mov.w	r0, #3
   10888:	df02      	svc	2
   1088a:	e727      	b.n	106dc <ll_reset+0xf8>
	LL_ASSERT(link);
   1088c:	4a19      	ldr	r2, [pc, #100]	; (108f4 <ll_reset+0x310>)
   1088e:	491d      	ldr	r1, [pc, #116]	; (10904 <ll_reset+0x320>)
   10890:	481a      	ldr	r0, [pc, #104]	; (108fc <ll_reset+0x318>)
   10892:	f240 730f 	movw	r3, #1807	; 0x70f
   10896:	f00e f841 	bl	1e91c <printk>
   1089a:	4040      	eors	r0, r0
   1089c:	f380 8811 	msr	BASEPRI, r0
   108a0:	f04f 0003 	mov.w	r0, #3
   108a4:	df02      	svc	2
   108a6:	e725      	b.n	106f4 <ll_reset+0x110>
			mem_release(link, &mem_link_rx.free);
   108a8:	490d      	ldr	r1, [pc, #52]	; (108e0 <ll_reset+0x2fc>)
   108aa:	4658      	mov	r0, fp
   108ac:	f7fc fc2c 	bl	d108 <mem_release>
			return;
   108b0:	e790      	b.n	107d4 <ll_reset+0x1f0>
			mem_release(link, &mem_link_rx.free);
   108b2:	490b      	ldr	r1, [pc, #44]	; (108e0 <ll_reset+0x2fc>)
   108b4:	4650      	mov	r0, sl
   108b6:	f7fc fc27 	bl	d108 <mem_release>
			return;
   108ba:	e78b      	b.n	107d4 <ll_reset+0x1f0>
   108bc:	20000414 	.word	0x20000414
   108c0:	200002d0 	.word	0x200002d0
   108c4:	200002f8 	.word	0x200002f8
   108c8:	200002e4 	.word	0x200002e4
   108cc:	20000310 	.word	0x20000310
   108d0:	20000438 	.word	0x20000438
   108d4:	20001af4 	.word	0x20001af4
   108d8:	20001b94 	.word	0x20001b94
   108dc:	20001c18 	.word	0x20001c18
   108e0:	20001bbc 	.word	0x20001bbc
   108e4:	20001eb8 	.word	0x20001eb8
   108e8:	20001eb0 	.word	0x20001eb0
   108ec:	20001ea8 	.word	0x20001ea8
   108f0:	20001bb8 	.word	0x20001bb8
   108f4:	00024b60 	.word	0x00024b60
   108f8:	00024b9c 	.word	0x00024b9c
   108fc:	00024904 	.word	0x00024904
   10900:	00024bd0 	.word	0x00024bd0
   10904:	00024e9c 	.word	0x00024e9c

00010908 <ll_rx_get>:
{
   10908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1090c:	b085      	sub	sp, #20
   1090e:	e9cd 0100 	strd	r0, r1, [sp]
   10912:	4c67      	ldr	r4, [pc, #412]	; (10ab0 <ll_rx_get+0x1a8>)
				mem_release(link, &mem_link_rx.free);
   10914:	4d67      	ldr	r5, [pc, #412]	; (10ab4 <ll_rx_get+0x1ac>)
   10916:	4e68      	ldr	r6, [pc, #416]	; (10ab8 <ll_rx_get+0x1b0>)
	*node_rx = NULL;
   10918:	9a00      	ldr	r2, [sp, #0]
   1091a:	2300      	movs	r3, #0
   1091c:	6013      	str	r3, [r2, #0]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   1091e:	e9d6 0100 	ldrd	r0, r1, [r6]
   10922:	aa03      	add	r2, sp, #12
   10924:	f7fc fc44 	bl	d1b0 <memq_peek>
	if (link) {
   10928:	4680      	mov	r8, r0
   1092a:	2800      	cmp	r0, #0
   1092c:	f000 80b6 	beq.w	10a9c <ll_rx_get+0x194>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   10930:	9b03      	ldr	r3, [sp, #12]
   10932:	4962      	ldr	r1, [pc, #392]	; (10abc <ll_rx_get+0x1b4>)
   10934:	781a      	ldrb	r2, [r3, #0]
   10936:	9801      	ldr	r0, [sp, #4]
   10938:	f7ff faf8 	bl	ff2c <tx_cmplt_get>
		if (!cmplt) {
   1093c:	4603      	mov	r3, r0
   1093e:	2800      	cmp	r0, #0
   10940:	f040 80a3 	bne.w	10a8a <ll_rx_get+0x182>
			f = mfifo_tx_ack.f;
   10944:	78a2      	ldrb	r2, [r4, #2]
   10946:	f88d 2009 	strb.w	r2, [sp, #9]
				cmplt_curr = tx_cmplt_get(&h, &f,
   1094a:	78e2      	ldrb	r2, [r4, #3]
   1094c:	f10d 0109 	add.w	r1, sp, #9
   10950:	f10d 000a 	add.w	r0, sp, #10
   10954:	461f      	mov	r7, r3
   10956:	f7ff fae9 	bl	ff2c <tx_cmplt_get>
   1095a:	ea47 0200 	orr.w	r2, r7, r0
			} while ((cmplt_prev != 0U) ||
   1095e:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
				cmplt_curr = tx_cmplt_get(&h, &f,
   10962:	4603      	mov	r3, r0
			} while ((cmplt_prev != 0U) ||
   10964:	d1f1      	bne.n	1094a <ll_rx_get+0x42>
			if (rx->type == NODE_RX_TYPE_RELEASE) {
   10966:	9b03      	ldr	r3, [sp, #12]
   10968:	7919      	ldrb	r1, [r3, #4]
   1096a:	2901      	cmp	r1, #1
   1096c:	f040 808a 	bne.w	10a84 <ll_rx_get+0x17c>
				(void)memq_dequeue(memq_ll_rx.tail,
   10970:	4951      	ldr	r1, [pc, #324]	; (10ab8 <ll_rx_get+0x1b0>)
   10972:	6870      	ldr	r0, [r6, #4]
   10974:	f7fc fc24 	bl	d1c0 <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
   10978:	4951      	ldr	r1, [pc, #324]	; (10ac0 <ll_rx_get+0x1b8>)
   1097a:	4640      	mov	r0, r8
   1097c:	f7fc fbc4 	bl	d108 <mem_release>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   10980:	782b      	ldrb	r3, [r5, #0]
   10982:	2b06      	cmp	r3, #6
   10984:	d86f      	bhi.n	10a66 <ll_rx_get+0x15e>
	mem_link_rx.quota_pdu += delta;
   10986:	3301      	adds	r3, #1
				mem_release(rx, &mem_pdu_rx.free);
   10988:	494e      	ldr	r1, [pc, #312]	; (10ac4 <ll_rx_get+0x1bc>)
   1098a:	9803      	ldr	r0, [sp, #12]
	mem_link_rx.quota_pdu += delta;
   1098c:	702b      	strb	r3, [r5, #0]
				mem_release(rx, &mem_pdu_rx.free);
   1098e:	f7fc fbbb 	bl	d108 <mem_release>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   10992:	782b      	ldrb	r3, [r5, #0]
   10994:	2b00      	cmp	r3, #0
   10996:	d0bf      	beq.n	10918 <ll_rx_get+0x10>
   10998:	f8df 8138 	ldr.w	r8, [pc, #312]	; 10ad4 <ll_rx_get+0x1cc>
	last = last + 1;
   1099c:	f898 7003 	ldrb.w	r7, [r8, #3]
	if (last == count) {
   109a0:	f898 2001 	ldrb.w	r2, [r8, #1]
   109a4:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
   109a8:	3701      	adds	r7, #1
   109aa:	b2ff      	uxtb	r7, r7
		last = 0U;
   109ac:	42ba      	cmp	r2, r7
   109ae:	bf08      	it	eq
   109b0:	2700      	moveq	r7, #0
	if (last == first) {
   109b2:	429f      	cmp	r7, r3
   109b4:	d0b0      	beq.n	10918 <ll_rx_get+0x10>
		link = mem_acquire(&mem_link_rx.free);
   109b6:	4842      	ldr	r0, [pc, #264]	; (10ac0 <ll_rx_get+0x1b8>)
   109b8:	f7fc fb90 	bl	d0dc <mem_acquire>
		if (!link) {
   109bc:	4682      	mov	sl, r0
   109be:	2800      	cmp	r0, #0
   109c0:	d0aa      	beq.n	10918 <ll_rx_get+0x10>
		rx = mem_acquire(&mem_pdu_rx.free);
   109c2:	4840      	ldr	r0, [pc, #256]	; (10ac4 <ll_rx_get+0x1bc>)
   109c4:	f7fc fb8a 	bl	d0dc <mem_acquire>
		if (!rx) {
   109c8:	2800      	cmp	r0, #0
   109ca:	d062      	beq.n	10a92 <ll_rx_get+0x18a>
		rx->link = link;
   109cc:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   109d0:	f898 2003 	ldrb.w	r2, [r8, #3]
   109d4:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   109d8:	fb02 8303 	mla	r3, r2, r3, r8
   109dc:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   109de:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   109e0:	f888 7003 	strb.w	r7, [r8, #3]
   109e4:	3b01      	subs	r3, #1
   109e6:	b2db      	uxtb	r3, r3
   109e8:	702b      	strb	r3, [r5, #0]
	while (mem_link_rx.quota_pdu &&
   109ea:	2b00      	cmp	r3, #0
   109ec:	d094      	beq.n	10918 <ll_rx_get+0x10>
   109ee:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 10ad8 <ll_rx_get+0x1d0>
		link = mem_acquire(&mem_link_rx.free);
   109f2:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 10ac0 <ll_rx_get+0x1b8>
   109f6:	f89a 7003 	ldrb.w	r7, [sl, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   109fa:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 10ac4 <ll_rx_get+0x1bc>
   109fe:	e014      	b.n	10a2a <ll_rx_get+0x122>
		link->mem = NULL;
   10a00:	2300      	movs	r3, #0
   10a02:	f8c9 3004 	str.w	r3, [r9, #4]
		rx->link = link;
   10a06:	f8c0 9000 	str.w	r9, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   10a0a:	f89a 2003 	ldrb.w	r2, [sl, #3]
   10a0e:	f89a 3000 	ldrb.w	r3, [sl]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   10a12:	fb02 a303 	mla	r3, r2, r3, sl
   10a16:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   10a18:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   10a1a:	f88a 7003 	strb.w	r7, [sl, #3]
   10a1e:	3b01      	subs	r3, #1
   10a20:	b2db      	uxtb	r3, r3
   10a22:	702b      	strb	r3, [r5, #0]
	while (mem_link_rx.quota_pdu &&
   10a24:	2b00      	cmp	r3, #0
   10a26:	f43f af77 	beq.w	10918 <ll_rx_get+0x10>
	if (last == count) {
   10a2a:	f89a 2001 	ldrb.w	r2, [sl, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   10a2e:	f89a 3002 	ldrb.w	r3, [sl, #2]
	last = last + 1;
   10a32:	3701      	adds	r7, #1
   10a34:	b2ff      	uxtb	r7, r7
		last = 0U;
   10a36:	42ba      	cmp	r2, r7
   10a38:	bf08      	it	eq
   10a3a:	2700      	moveq	r7, #0
	if (last == first) {
   10a3c:	429f      	cmp	r7, r3
		link = mem_acquire(&mem_link_rx.free);
   10a3e:	4640      	mov	r0, r8
   10a40:	f43f af6a 	beq.w	10918 <ll_rx_get+0x10>
   10a44:	f7fc fb4a 	bl	d0dc <mem_acquire>
   10a48:	4681      	mov	r9, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   10a4a:	4658      	mov	r0, fp
		if (!link) {
   10a4c:	f1b9 0f00 	cmp.w	r9, #0
   10a50:	f43f af62 	beq.w	10918 <ll_rx_get+0x10>
		rx = mem_acquire(&mem_pdu_rx.free);
   10a54:	f7fc fb42 	bl	d0dc <mem_acquire>
		if (!rx) {
   10a58:	2800      	cmp	r0, #0
   10a5a:	d1d1      	bne.n	10a00 <ll_rx_get+0xf8>
			mem_release(link, &mem_link_rx.free);
   10a5c:	4918      	ldr	r1, [pc, #96]	; (10ac0 <ll_rx_get+0x1b8>)
   10a5e:	4648      	mov	r0, r9
   10a60:	f7fc fb52 	bl	d108 <mem_release>
			return;
   10a64:	e758      	b.n	10918 <ll_rx_get+0x10>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   10a66:	4a18      	ldr	r2, [pc, #96]	; (10ac8 <ll_rx_get+0x1c0>)
   10a68:	4918      	ldr	r1, [pc, #96]	; (10acc <ll_rx_get+0x1c4>)
   10a6a:	4819      	ldr	r0, [pc, #100]	; (10ad0 <ll_rx_get+0x1c8>)
   10a6c:	f240 531c 	movw	r3, #1308	; 0x51c
   10a70:	f00d ff54 	bl	1e91c <printk>
   10a74:	4040      	eors	r0, r0
   10a76:	f380 8811 	msr	BASEPRI, r0
   10a7a:	f04f 0003 	mov.w	r0, #3
   10a7e:	df02      	svc	2
   10a80:	782b      	ldrb	r3, [r5, #0]
   10a82:	e780      	b.n	10986 <ll_rx_get+0x7e>
			*node_rx = rx;
   10a84:	9900      	ldr	r1, [sp, #0]
   10a86:	600b      	str	r3, [r1, #0]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   10a88:	4613      	mov	r3, r2
}
   10a8a:	4618      	mov	r0, r3
   10a8c:	b005      	add	sp, #20
   10a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, &mem_link_rx.free);
   10a92:	490b      	ldr	r1, [pc, #44]	; (10ac0 <ll_rx_get+0x1b8>)
   10a94:	4650      	mov	r0, sl
   10a96:	f7fc fb37 	bl	d108 <mem_release>
			return;
   10a9a:	e73d      	b.n	10918 <ll_rx_get+0x10>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
   10a9c:	78e2      	ldrb	r2, [r4, #3]
   10a9e:	4907      	ldr	r1, [pc, #28]	; (10abc <ll_rx_get+0x1b4>)
   10aa0:	9801      	ldr	r0, [sp, #4]
   10aa2:	f7ff fa43 	bl	ff2c <tx_cmplt_get>
   10aa6:	4603      	mov	r3, r0
}
   10aa8:	4618      	mov	r0, r3
   10aaa:	b005      	add	sp, #20
   10aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10ab0:	20000414 	.word	0x20000414
   10ab4:	20001bb8 	.word	0x20001bb8
   10ab8:	20001ea4 	.word	0x20001ea4
   10abc:	20000416 	.word	0x20000416
   10ac0:	20001bbc 	.word	0x20001bbc
   10ac4:	20001c18 	.word	0x20001c18
   10ac8:	00024b60 	.word	0x00024b60
   10acc:	00024bd8 	.word	0x00024bd8
   10ad0:	00024904 	.word	0x00024904
   10ad4:	200002f8 	.word	0x200002f8
   10ad8:	200002e4 	.word	0x200002e4

00010adc <ll_rx_dequeue>:
{
   10adc:	b570      	push	{r4, r5, r6, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   10ade:	495d      	ldr	r1, [pc, #372]	; (10c54 <ll_rx_dequeue+0x178>)
{
   10ae0:	b082      	sub	sp, #8
	struct node_rx_hdr *rx = NULL;
   10ae2:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   10ae4:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
   10ae6:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   10ae8:	aa01      	add	r2, sp, #4
   10aea:	f7fc fb69 	bl	d1c0 <memq_dequeue>
	LL_ASSERT(link);
   10aee:	4604      	mov	r4, r0
   10af0:	2800      	cmp	r0, #0
   10af2:	d062      	beq.n	10bba <ll_rx_dequeue+0xde>
	mem_release(link, &mem_link_rx.free);
   10af4:	4958      	ldr	r1, [pc, #352]	; (10c58 <ll_rx_dequeue+0x17c>)
   10af6:	4620      	mov	r0, r4
   10af8:	f7fc fb06 	bl	d108 <mem_release>
	switch (rx->type) {
   10afc:	9a01      	ldr	r2, [sp, #4]
   10afe:	7913      	ldrb	r3, [r2, #4]
   10b00:	2b1a      	cmp	r3, #26
   10b02:	d80f      	bhi.n	10b24 <ll_rx_dequeue+0x48>
   10b04:	e8df f003 	tbb	[pc, r3]
   10b08:	1d0e0e1d 	.word	0x1d0e0e1d
   10b0c:	0e0e0e0e 	.word	0x0e0e0e0e
   10b10:	0e0e0e0e 	.word	0x0e0e0e0e
   10b14:	0e0e0e0e 	.word	0x0e0e0e0e
   10b18:	0e0e0e0e 	.word	0x0e0e0e0e
   10b1c:	1d1d1d2e 	.word	0x1d1d1d2e
   10b20:	1d1d      	.short	0x1d1d
   10b22:	1d          	.byte	0x1d
   10b23:	00          	.byte	0x00
		LL_ASSERT(0);
   10b24:	4a4d      	ldr	r2, [pc, #308]	; (10c5c <ll_rx_dequeue+0x180>)
   10b26:	494e      	ldr	r1, [pc, #312]	; (10c60 <ll_rx_dequeue+0x184>)
   10b28:	484e      	ldr	r0, [pc, #312]	; (10c64 <ll_rx_dequeue+0x188>)
   10b2a:	f240 4332 	movw	r3, #1074	; 0x432
   10b2e:	f00d fef5 	bl	1e91c <printk>
   10b32:	4040      	eors	r0, r0
   10b34:	f380 8811 	msr	BASEPRI, r0
   10b38:	f04f 0003 	mov.w	r0, #3
   10b3c:	df02      	svc	2
}
   10b3e:	b002      	add	sp, #8
   10b40:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   10b42:	2b00      	cmp	r3, #0
   10b44:	d1fb      	bne.n	10b3e <ll_rx_dequeue+0x62>
   10b46:	4a45      	ldr	r2, [pc, #276]	; (10c5c <ll_rx_dequeue+0x180>)
   10b48:	4947      	ldr	r1, [pc, #284]	; (10c68 <ll_rx_dequeue+0x18c>)
   10b4a:	4846      	ldr	r0, [pc, #280]	; (10c64 <ll_rx_dequeue+0x188>)
   10b4c:	f240 432e 	movw	r3, #1070	; 0x42e
   10b50:	f00d fee4 	bl	1e91c <printk>
   10b54:	4040      	eors	r0, r0
   10b56:	f380 8811 	msr	BASEPRI, r0
   10b5a:	f04f 0003 	mov.w	r0, #3
   10b5e:	df02      	svc	2
}
   10b60:	b002      	add	sp, #8
   10b62:	bd70      	pop	{r4, r5, r6, pc}
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
   10b64:	7f13      	ldrb	r3, [r2, #28]
   10b66:	2b3c      	cmp	r3, #60	; 0x3c
   10b68:	d035      	beq.n	10bd6 <ll_rx_dequeue+0xfa>
   10b6a:	7f53      	ldrb	r3, [r2, #29]
   10b6c:	b1bb      	cbz	r3, 10b9e <ll_rx_dequeue+0xc2>
			struct ll_adv_set *adv = (void *)HDR_LLL2EVT(lll);
   10b6e:	6893      	ldr	r3, [r2, #8]
   10b70:	681c      	ldr	r4, [r3, #0]
				if (adv->node_rx_cc_free) {
   10b72:	6c60      	ldr	r0, [r4, #68]	; 0x44
   10b74:	b120      	cbz	r0, 10b80 <ll_rx_dequeue+0xa4>
					adv->node_rx_cc_free = NULL;
   10b76:	2300      	movs	r3, #0
					mem_release(rx_free, &mem_pdu_rx.free);
   10b78:	493c      	ldr	r1, [pc, #240]	; (10c6c <ll_rx_dequeue+0x190>)
					adv->node_rx_cc_free = NULL;
   10b7a:	6463      	str	r3, [r4, #68]	; 0x44
					mem_release(rx_free, &mem_pdu_rx.free);
   10b7c:	f7fc fac4 	bl	d108 <mem_release>
			adv->is_enabled = 0U;
   10b80:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
   10b84:	f36f 0300 	bfc	r3, #0, #1
   10b88:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
			      ull_adv_is_enabled(0));
   10b8c:	2000      	movs	r0, #0
   10b8e:	f001 f823 	bl	11bd8 <ull_adv_is_enabled>
			if (!bm) {
   10b92:	2800      	cmp	r0, #0
   10b94:	d1d3      	bne.n	10b3e <ll_rx_dequeue+0x62>
				ull_filter_adv_scan_state_cb(0);
   10b96:	f006 f9eb 	bl	16f70 <ull_filter_adv_scan_state_cb>
}
   10b9a:	b002      	add	sp, #8
   10b9c:	bd70      	pop	{r4, r5, r6, pc}
			LL_ASSERT(0);
   10b9e:	4a2f      	ldr	r2, [pc, #188]	; (10c5c <ll_rx_dequeue+0x180>)
   10ba0:	492f      	ldr	r1, [pc, #188]	; (10c60 <ll_rx_dequeue+0x184>)
   10ba2:	4830      	ldr	r0, [pc, #192]	; (10c64 <ll_rx_dequeue+0x188>)
   10ba4:	f44f 7373 	mov.w	r3, #972	; 0x3cc
   10ba8:	f00d feb8 	bl	1e91c <printk>
   10bac:	4040      	eors	r0, r0
   10bae:	f380 8811 	msr	BASEPRI, r0
   10bb2:	f04f 0003 	mov.w	r0, #3
   10bb6:	df02      	svc	2
   10bb8:	e7e8      	b.n	10b8c <ll_rx_dequeue+0xb0>
	LL_ASSERT(link);
   10bba:	4a28      	ldr	r2, [pc, #160]	; (10c5c <ll_rx_dequeue+0x180>)
   10bbc:	492c      	ldr	r1, [pc, #176]	; (10c70 <ll_rx_dequeue+0x194>)
   10bbe:	4829      	ldr	r0, [pc, #164]	; (10c64 <ll_rx_dequeue+0x188>)
   10bc0:	f240 3331 	movw	r3, #817	; 0x331
   10bc4:	f00d feaa 	bl	1e91c <printk>
   10bc8:	4040      	eors	r0, r0
   10bca:	f380 8811 	msr	BASEPRI, r0
   10bce:	f04f 0003 	mov.w	r0, #3
   10bd2:	df02      	svc	2
   10bd4:	e78e      	b.n	10af4 <ll_rx_dequeue+0x18>
			struct lll_adv *lll = ftr->param;
   10bd6:	6896      	ldr	r6, [r2, #8]
			struct ll_adv_set *adv = (void *)HDR_LLL2EVT(lll);
   10bd8:	e9d6 4500 	ldrd	r4, r5, [r6]
				LL_ASSERT(conn_lll);
   10bdc:	b1ed      	cbz	r5, 10c1a <ll_rx_dequeue+0x13e>
				LL_ASSERT(!conn_lll->link_tx_free);
   10bde:	6dab      	ldr	r3, [r5, #88]	; 0x58
				lll->conn = NULL;
   10be0:	2200      	movs	r2, #0
   10be2:	6072      	str	r2, [r6, #4]
				LL_ASSERT(!conn_lll->link_tx_free);
   10be4:	b163      	cbz	r3, 10c00 <ll_rx_dequeue+0x124>
   10be6:	4a1d      	ldr	r2, [pc, #116]	; (10c5c <ll_rx_dequeue+0x180>)
   10be8:	4922      	ldr	r1, [pc, #136]	; (10c74 <ll_rx_dequeue+0x198>)
   10bea:	481e      	ldr	r0, [pc, #120]	; (10c64 <ll_rx_dequeue+0x188>)
   10bec:	f44f 7369 	mov.w	r3, #932	; 0x3a4
   10bf0:	f00d fe94 	bl	1e91c <printk>
   10bf4:	4040      	eors	r0, r0
   10bf6:	f380 8811 	msr	BASEPRI, r0
   10bfa:	f04f 0003 	mov.w	r0, #3
   10bfe:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
   10c00:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   10c04:	f105 0048 	add.w	r0, r5, #72	; 0x48
   10c08:	f7fc fac0 	bl	d18c <memq_deinit>
				LL_ASSERT(link);
   10c0c:	4606      	mov	r6, r0
   10c0e:	b190      	cbz	r0, 10c36 <ll_rx_dequeue+0x15a>
				ll_conn_release(conn);
   10c10:	6828      	ldr	r0, [r5, #0]
				conn_lll->link_tx_free = link;
   10c12:	65ae      	str	r6, [r5, #88]	; 0x58
				ll_conn_release(conn);
   10c14:	f001 fde8 	bl	127e8 <ll_conn_release>
   10c18:	e7b2      	b.n	10b80 <ll_rx_dequeue+0xa4>
				LL_ASSERT(conn_lll);
   10c1a:	4a10      	ldr	r2, [pc, #64]	; (10c5c <ll_rx_dequeue+0x180>)
   10c1c:	4916      	ldr	r1, [pc, #88]	; (10c78 <ll_rx_dequeue+0x19c>)
   10c1e:	4811      	ldr	r0, [pc, #68]	; (10c64 <ll_rx_dequeue+0x188>)
   10c20:	f240 33a1 	movw	r3, #929	; 0x3a1
   10c24:	f00d fe7a 	bl	1e91c <printk>
   10c28:	4040      	eors	r0, r0
   10c2a:	f380 8811 	msr	BASEPRI, r0
   10c2e:	f04f 0003 	mov.w	r0, #3
   10c32:	df02      	svc	2
   10c34:	e7d3      	b.n	10bde <ll_rx_dequeue+0x102>
				LL_ASSERT(link);
   10c36:	4a09      	ldr	r2, [pc, #36]	; (10c5c <ll_rx_dequeue+0x180>)
   10c38:	490d      	ldr	r1, [pc, #52]	; (10c70 <ll_rx_dequeue+0x194>)
   10c3a:	480a      	ldr	r0, [pc, #40]	; (10c64 <ll_rx_dequeue+0x188>)
   10c3c:	f240 33a7 	movw	r3, #935	; 0x3a7
   10c40:	f00d fe6c 	bl	1e91c <printk>
   10c44:	4040      	eors	r0, r0
   10c46:	f380 8811 	msr	BASEPRI, r0
   10c4a:	f04f 0003 	mov.w	r0, #3
   10c4e:	df02      	svc	2
   10c50:	e7de      	b.n	10c10 <ll_rx_dequeue+0x134>
   10c52:	bf00      	nop
   10c54:	20001ea4 	.word	0x20001ea4
   10c58:	20001bbc 	.word	0x20001bbc
   10c5c:	00024b60 	.word	0x00024b60
   10c60:	00024974 	.word	0x00024974
   10c64:	00024904 	.word	0x00024904
   10c68:	00024c30 	.word	0x00024c30
   10c6c:	20001c18 	.word	0x20001c18
   10c70:	00024e9c 	.word	0x00024e9c
   10c74:	00024c18 	.word	0x00024c18
   10c78:	00024c0c 	.word	0x00024c0c

00010c7c <ll_rx_mem_release>:
{
   10c7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	rx = *node_rx;
   10c80:	6804      	ldr	r4, [r0, #0]
	while (rx) {
   10c82:	4e88      	ldr	r6, [pc, #544]	; (10ea4 <ll_rx_mem_release+0x228>)
{
   10c84:	4681      	mov	r9, r0
	while (rx) {
   10c86:	b344      	cbz	r4, 10cda <ll_rx_mem_release+0x5e>
			LL_ASSERT(0);
   10c88:	f8df 8244 	ldr.w	r8, [pc, #580]	; 10ed0 <ll_rx_mem_release+0x254>
   10c8c:	f8df a244 	ldr.w	sl, [pc, #580]	; 10ed4 <ll_rx_mem_release+0x258>
   10c90:	4f85      	ldr	r7, [pc, #532]	; (10ea8 <ll_rx_mem_release+0x22c>)
		rx = rx->next;
   10c92:	4625      	mov	r5, r4
   10c94:	6824      	ldr	r4, [r4, #0]
		switch (rx_free->type) {
   10c96:	792b      	ldrb	r3, [r5, #4]
   10c98:	2b1a      	cmp	r3, #26
   10c9a:	d80f      	bhi.n	10cbc <ll_rx_mem_release+0x40>
   10c9c:	e8df f003 	tbb	[pc, r3]
   10ca0:	940e0e94 	.word	0x940e0e94
   10ca4:	0e0e0e0e 	.word	0x0e0e0e0e
   10ca8:	0e0e0e0e 	.word	0x0e0e0e0e
   10cac:	0e0e0e0e 	.word	0x0e0e0e0e
   10cb0:	0e0e0e0e 	.word	0x0e0e0e0e
   10cb4:	9494af82 	.word	0x9494af82
   10cb8:	9494      	.short	0x9494
   10cba:	94          	.byte	0x94
   10cbb:	00          	.byte	0x00
			LL_ASSERT(0);
   10cbc:	f44f 63a2 	mov.w	r3, #1296	; 0x510
   10cc0:	4642      	mov	r2, r8
   10cc2:	4651      	mov	r1, sl
   10cc4:	4638      	mov	r0, r7
   10cc6:	f00d fe29 	bl	1e91c <printk>
   10cca:	4040      	eors	r0, r0
   10ccc:	f380 8811 	msr	BASEPRI, r0
   10cd0:	f04f 0003 	mov.w	r0, #3
   10cd4:	df02      	svc	2
	while (rx) {
   10cd6:	2c00      	cmp	r4, #0
   10cd8:	d1db      	bne.n	10c92 <ll_rx_mem_release+0x16>
	*node_rx = rx;
   10cda:	2300      	movs	r3, #0
   10cdc:	f8c9 3000 	str.w	r3, [r9]
	if (max > mem_link_rx.quota_pdu) {
   10ce0:	7833      	ldrb	r3, [r6, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   10ce2:	1e5f      	subs	r7, r3, #1
   10ce4:	b2ff      	uxtb	r7, r7
   10ce6:	2b00      	cmp	r3, #0
   10ce8:	d05a      	beq.n	10da0 <ll_rx_mem_release+0x124>
   10cea:	4d70      	ldr	r5, [pc, #448]	; (10eac <ll_rx_mem_release+0x230>)
		link = mem_acquire(&mem_link_rx.free);
   10cec:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 10eb4 <ll_rx_mem_release+0x238>
   10cf0:	78ec      	ldrb	r4, [r5, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   10cf2:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 10ec0 <ll_rx_mem_release+0x244>
	if (last == count) {
   10cf6:	786a      	ldrb	r2, [r5, #1]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   10cf8:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   10cfa:	3401      	adds	r4, #1
   10cfc:	b2e4      	uxtb	r4, r4
		last = 0U;
   10cfe:	42a2      	cmp	r2, r4
   10d00:	bf08      	it	eq
   10d02:	2400      	moveq	r4, #0
	if (last == first) {
   10d04:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   10d06:	4640      	mov	r0, r8
   10d08:	f000 80ac 	beq.w	10e64 <ll_rx_mem_release+0x1e8>
   10d0c:	f7fc f9e6 	bl	d0dc <mem_acquire>
   10d10:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   10d12:	4648      	mov	r0, r9
		if (!link) {
   10d14:	f1ba 0f00 	cmp.w	sl, #0
   10d18:	d042      	beq.n	10da0 <ll_rx_mem_release+0x124>
		rx = mem_acquire(&mem_pdu_rx.free);
   10d1a:	f7fc f9df 	bl	d0dc <mem_acquire>
		if (!rx) {
   10d1e:	2800      	cmp	r0, #0
   10d20:	f000 80ba 	beq.w	10e98 <ll_rx_mem_release+0x21c>
		rx->link = link;
   10d24:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   10d28:	78ea      	ldrb	r2, [r5, #3]
   10d2a:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   10d2c:	fb02 5303 	mla	r3, r2, r3, r5
   10d30:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   10d32:	7833      	ldrb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
   10d34:	70ec      	strb	r4, [r5, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   10d36:	3f01      	subs	r7, #1
	mem_link_rx.quota_pdu += delta;
   10d38:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   10d3a:	b2ff      	uxtb	r7, r7
	mem_link_rx.quota_pdu += delta;
   10d3c:	b2db      	uxtb	r3, r3
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   10d3e:	2fff      	cmp	r7, #255	; 0xff
	mem_link_rx.quota_pdu += delta;
   10d40:	7033      	strb	r3, [r6, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   10d42:	d1d8      	bne.n	10cf6 <ll_rx_mem_release+0x7a>
	while (mem_link_rx.quota_pdu &&
   10d44:	b363      	cbz	r3, 10da0 <ll_rx_mem_release+0x124>
   10d46:	4d5a      	ldr	r5, [pc, #360]	; (10eb0 <ll_rx_mem_release+0x234>)
		link = mem_acquire(&mem_link_rx.free);
   10d48:	4f5a      	ldr	r7, [pc, #360]	; (10eb4 <ll_rx_mem_release+0x238>)
   10d4a:	78ec      	ldrb	r4, [r5, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   10d4c:	f8df 8170 	ldr.w	r8, [pc, #368]	; 10ec0 <ll_rx_mem_release+0x244>
		link->mem = NULL;
   10d50:	f04f 0900 	mov.w	r9, #0
	if (last == count) {
   10d54:	786a      	ldrb	r2, [r5, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   10d56:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   10d58:	3401      	adds	r4, #1
   10d5a:	b2e4      	uxtb	r4, r4
		last = 0U;
   10d5c:	42a2      	cmp	r2, r4
   10d5e:	bf08      	it	eq
   10d60:	2400      	moveq	r4, #0
	if (last == first) {
   10d62:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   10d64:	4638      	mov	r0, r7
   10d66:	d01b      	beq.n	10da0 <ll_rx_mem_release+0x124>
   10d68:	f7fc f9b8 	bl	d0dc <mem_acquire>
   10d6c:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   10d6e:	4640      	mov	r0, r8
		if (!link) {
   10d70:	f1ba 0f00 	cmp.w	sl, #0
   10d74:	d014      	beq.n	10da0 <ll_rx_mem_release+0x124>
		rx = mem_acquire(&mem_pdu_rx.free);
   10d76:	f7fc f9b1 	bl	d0dc <mem_acquire>
		if (!rx) {
   10d7a:	2800      	cmp	r0, #0
   10d7c:	f000 808c 	beq.w	10e98 <ll_rx_mem_release+0x21c>
		link->mem = NULL;
   10d80:	f8ca 9004 	str.w	r9, [sl, #4]
		rx->link = link;
   10d84:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   10d88:	78ea      	ldrb	r2, [r5, #3]
   10d8a:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   10d8c:	fb02 5303 	mla	r3, r2, r3, r5
   10d90:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   10d92:	7833      	ldrb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
   10d94:	70ec      	strb	r4, [r5, #3]
   10d96:	3b01      	subs	r3, #1
   10d98:	b2db      	uxtb	r3, r3
   10d9a:	7033      	strb	r3, [r6, #0]
	while (mem_link_rx.quota_pdu &&
   10d9c:	2b00      	cmp	r3, #0
   10d9e:	d1d9      	bne.n	10d54 <ll_rx_mem_release+0xd8>
}
   10da0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			} else if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   10da4:	7f2b      	ldrb	r3, [r5, #28]
   10da6:	2b3c      	cmp	r3, #60	; 0x3c
   10da8:	d060      	beq.n	10e6c <ll_rx_mem_release+0x1f0>
				LL_ASSERT(!cc->status);
   10daa:	b1db      	cbz	r3, 10de4 <ll_rx_mem_release+0x168>
   10dac:	4942      	ldr	r1, [pc, #264]	; (10eb8 <ll_rx_mem_release+0x23c>)
   10dae:	f44f 6391 	mov.w	r3, #1160	; 0x488
   10db2:	4642      	mov	r2, r8
   10db4:	4638      	mov	r0, r7
   10db6:	f00d fdb1 	bl	1e91c <printk>
   10dba:	4040      	eors	r0, r0
   10dbc:	f380 8811 	msr	BASEPRI, r0
   10dc0:	f04f 0003 	mov.w	r0, #3
   10dc4:	df02      	svc	2
   10dc6:	792b      	ldrb	r3, [r5, #4]
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
   10dc8:	b963      	cbnz	r3, 10de4 <ll_rx_mem_release+0x168>
   10dca:	493c      	ldr	r1, [pc, #240]	; (10ebc <ll_rx_mem_release+0x240>)
   10dcc:	f240 43dc 	movw	r3, #1244	; 0x4dc
   10dd0:	4642      	mov	r2, r8
   10dd2:	4638      	mov	r0, r7
   10dd4:	f00d fda2 	bl	1e91c <printk>
   10dd8:	4040      	eors	r0, r0
   10dda:	f380 8811 	msr	BASEPRI, r0
   10dde:	f04f 0003 	mov.w	r0, #3
   10de2:	df02      	svc	2
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   10de4:	7833      	ldrb	r3, [r6, #0]
   10de6:	2b06      	cmp	r3, #6
   10de8:	d82d      	bhi.n	10e46 <ll_rx_mem_release+0x1ca>
	mem_link_rx.quota_pdu += delta;
   10dea:	3301      	adds	r3, #1
			mem_release(rx_free, &mem_pdu_rx.free);
   10dec:	4934      	ldr	r1, [pc, #208]	; (10ec0 <ll_rx_mem_release+0x244>)
	mem_link_rx.quota_pdu += delta;
   10dee:	7033      	strb	r3, [r6, #0]
			mem_release(rx_free, &mem_pdu_rx.free);
   10df0:	4628      	mov	r0, r5
   10df2:	f7fc f989 	bl	d108 <mem_release>
	while (rx) {
   10df6:	2c00      	cmp	r4, #0
   10df8:	f47f af4b 	bne.w	10c92 <ll_rx_mem_release+0x16>
   10dfc:	e76d      	b.n	10cda <ll_rx_mem_release+0x5e>
			conn = ll_conn_get(rx_free->handle);
   10dfe:	88e8      	ldrh	r0, [r5, #6]
   10e00:	f001 fd00 	bl	12804 <ll_conn_get>
			LL_ASSERT(!conn->lll.link_tx_free);
   10e04:	6f43      	ldr	r3, [r0, #116]	; 0x74
			conn = ll_conn_get(rx_free->handle);
   10e06:	4605      	mov	r5, r0
			LL_ASSERT(!conn->lll.link_tx_free);
   10e08:	b163      	cbz	r3, 10e24 <ll_rx_mem_release+0x1a8>
   10e0a:	492e      	ldr	r1, [pc, #184]	; (10ec4 <ll_rx_mem_release+0x248>)
   10e0c:	f240 5303 	movw	r3, #1283	; 0x503
   10e10:	4642      	mov	r2, r8
   10e12:	4638      	mov	r0, r7
   10e14:	f00d fd82 	bl	1e91c <printk>
   10e18:	4040      	eors	r0, r0
   10e1a:	f380 8811 	msr	BASEPRI, r0
   10e1e:	f04f 0003 	mov.w	r0, #3
   10e22:	df02      	svc	2
			link = memq_deinit(&conn->lll.memq_tx.head,
   10e24:	f105 0168 	add.w	r1, r5, #104	; 0x68
   10e28:	f105 0064 	add.w	r0, r5, #100	; 0x64
   10e2c:	f7fc f9ae 	bl	d18c <memq_deinit>
			LL_ASSERT(link);
   10e30:	4683      	mov	fp, r0
   10e32:	b318      	cbz	r0, 10e7c <ll_rx_mem_release+0x200>
			conn->lll.link_tx_free = link;
   10e34:	f8c5 b074 	str.w	fp, [r5, #116]	; 0x74
			ll_conn_release(conn);
   10e38:	4628      	mov	r0, r5
   10e3a:	f001 fcd5 	bl	127e8 <ll_conn_release>
	while (rx) {
   10e3e:	2c00      	cmp	r4, #0
   10e40:	f47f af27 	bne.w	10c92 <ll_rx_mem_release+0x16>
   10e44:	e749      	b.n	10cda <ll_rx_mem_release+0x5e>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   10e46:	4920      	ldr	r1, [pc, #128]	; (10ec8 <ll_rx_mem_release+0x24c>)
   10e48:	f240 531c 	movw	r3, #1308	; 0x51c
   10e4c:	4642      	mov	r2, r8
   10e4e:	4638      	mov	r0, r7
   10e50:	f00d fd64 	bl	1e91c <printk>
   10e54:	4040      	eors	r0, r0
   10e56:	f380 8811 	msr	BASEPRI, r0
   10e5a:	f04f 0003 	mov.w	r0, #3
   10e5e:	df02      	svc	2
   10e60:	7833      	ldrb	r3, [r6, #0]
   10e62:	e7c2      	b.n	10dea <ll_rx_mem_release+0x16e>
	if (!max) {
   10e64:	2f00      	cmp	r7, #0
   10e66:	d09b      	beq.n	10da0 <ll_rx_mem_release+0x124>
   10e68:	7833      	ldrb	r3, [r6, #0]
   10e6a:	e76b      	b.n	10d44 <ll_rx_mem_release+0xc8>
				mem_release(rx_free, &mem_pdu_rx.free);
   10e6c:	4914      	ldr	r1, [pc, #80]	; (10ec0 <ll_rx_mem_release+0x244>)
   10e6e:	4628      	mov	r0, r5
   10e70:	f7fc f94a 	bl	d108 <mem_release>
	while (rx) {
   10e74:	2c00      	cmp	r4, #0
   10e76:	f47f af0c 	bne.w	10c92 <ll_rx_mem_release+0x16>
   10e7a:	e72e      	b.n	10cda <ll_rx_mem_release+0x5e>
			LL_ASSERT(link);
   10e7c:	4913      	ldr	r1, [pc, #76]	; (10ecc <ll_rx_mem_release+0x250>)
   10e7e:	f240 5306 	movw	r3, #1286	; 0x506
   10e82:	4642      	mov	r2, r8
   10e84:	4638      	mov	r0, r7
   10e86:	f00d fd49 	bl	1e91c <printk>
   10e8a:	4040      	eors	r0, r0
   10e8c:	f380 8811 	msr	BASEPRI, r0
   10e90:	f04f 0003 	mov.w	r0, #3
   10e94:	df02      	svc	2
   10e96:	e7cd      	b.n	10e34 <ll_rx_mem_release+0x1b8>
			mem_release(link, &mem_link_rx.free);
   10e98:	4650      	mov	r0, sl
   10e9a:	4906      	ldr	r1, [pc, #24]	; (10eb4 <ll_rx_mem_release+0x238>)
}
   10e9c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mem_release(link, &mem_link_rx.free);
   10ea0:	f7fc b932 	b.w	d108 <mem_release>
   10ea4:	20001bb8 	.word	0x20001bb8
   10ea8:	00024904 	.word	0x00024904
   10eac:	200002f8 	.word	0x200002f8
   10eb0:	200002e4 	.word	0x200002e4
   10eb4:	20001bbc 	.word	0x20001bbc
   10eb8:	00024c50 	.word	0x00024c50
   10ebc:	00024c5c 	.word	0x00024c5c
   10ec0:	20001c18 	.word	0x20001c18
   10ec4:	00024c80 	.word	0x00024c80
   10ec8:	00024bd8 	.word	0x00024bd8
   10ecc:	00024e9c 	.word	0x00024e9c
   10ed0:	00024b60 	.word	0x00024b60
   10ed4:	00024974 	.word	0x00024974

00010ed8 <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
   10ed8:	4801      	ldr	r0, [pc, #4]	; (10ee0 <ll_rx_link_alloc+0x8>)
   10eda:	f7fc b8ff 	b.w	d0dc <mem_acquire>
   10ede:	bf00      	nop
   10ee0:	20001bbc 	.word	0x20001bbc

00010ee4 <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
   10ee4:	4901      	ldr	r1, [pc, #4]	; (10eec <ll_rx_link_release+0x8>)
   10ee6:	f7fc b90f 	b.w	d108 <mem_release>
   10eea:	bf00      	nop
   10eec:	20001bbc 	.word	0x20001bbc

00010ef0 <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
   10ef0:	4801      	ldr	r0, [pc, #4]	; (10ef8 <ll_rx_alloc+0x8>)
   10ef2:	f7fc b8f3 	b.w	d0dc <mem_acquire>
   10ef6:	bf00      	nop
   10ef8:	20001c18 	.word	0x20001c18

00010efc <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
   10efc:	4901      	ldr	r1, [pc, #4]	; (10f04 <ll_rx_release+0x8>)
   10efe:	f7fc b903 	b.w	d108 <mem_release>
   10f02:	bf00      	nop
   10f04:	20001c18 	.word	0x20001c18

00010f08 <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
   10f08:	4b02      	ldr	r3, [pc, #8]	; (10f14 <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   10f0a:	4a03      	ldr	r2, [pc, #12]	; (10f18 <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   10f0c:	78db      	ldrb	r3, [r3, #3]
   10f0e:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   10f10:	f7fc b946 	b.w	d1a0 <memq_enqueue>
   10f14:	20000414 	.word	0x20000414
   10f18:	20001ea8 	.word	0x20001ea8

00010f1c <ll_rx_sched>:
	k_sem_give(sem_recv);
   10f1c:	4b01      	ldr	r3, [pc, #4]	; (10f24 <ll_rx_sched+0x8>)
   10f1e:	6818      	ldr	r0, [r3, #0]
	z_impl_k_sem_give(sem);
   10f20:	f00c be44 	b.w	1dbac <z_impl_k_sem_give>
   10f24:	20001ebc 	.word	0x20001ebc

00010f28 <ll_pdu_rx_alloc_peek>:
{
   10f28:	b410      	push	{r4}
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   10f2a:	4b0d      	ldr	r3, [pc, #52]	; (10f60 <ll_pdu_rx_alloc_peek+0x38>)
   10f2c:	789a      	ldrb	r2, [r3, #2]
   10f2e:	78dc      	ldrb	r4, [r3, #3]
	if (last >= first) {
   10f30:	42a2      	cmp	r2, r4
   10f32:	d809      	bhi.n	10f48 <ll_pdu_rx_alloc_peek+0x20>
		return last - first;
   10f34:	1aa1      	subs	r1, r4, r2
   10f36:	b2c9      	uxtb	r1, r1
   10f38:	4288      	cmp	r0, r1
   10f3a:	d802      	bhi.n	10f42 <ll_pdu_rx_alloc_peek+0x1a>
	if (first == last) {
   10f3c:	42a2      	cmp	r2, r4
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   10f3e:	7819      	ldrb	r1, [r3, #0]
   10f40:	d109      	bne.n	10f56 <ll_pdu_rx_alloc_peek+0x2e>
		return NULL;
   10f42:	2000      	movs	r0, #0
}
   10f44:	bc10      	pop	{r4}
   10f46:	4770      	bx	lr
		return count - first + last;
   10f48:	7859      	ldrb	r1, [r3, #1]
   10f4a:	1a89      	subs	r1, r1, r2
   10f4c:	4421      	add	r1, r4
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   10f4e:	b2c9      	uxtb	r1, r1
   10f50:	4288      	cmp	r0, r1
   10f52:	d8f6      	bhi.n	10f42 <ll_pdu_rx_alloc_peek+0x1a>
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   10f54:	7819      	ldrb	r1, [r3, #0]
}
   10f56:	bc10      	pop	{r4}
	return *((void **)(fifo + first * size));
   10f58:	fb02 3301 	mla	r3, r2, r1, r3
   10f5c:	6858      	ldr	r0, [r3, #4]
   10f5e:	4770      	bx	lr
   10f60:	200002e4 	.word	0x200002e4

00010f64 <ll_pdu_rx_alloc>:
{
   10f64:	b410      	push	{r4}
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   10f66:	4b0a      	ldr	r3, [pc, #40]	; (10f90 <ll_pdu_rx_alloc+0x2c>)
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
   10f68:	7899      	ldrb	r1, [r3, #2]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
   10f6a:	78da      	ldrb	r2, [r3, #3]
   10f6c:	7818      	ldrb	r0, [r3, #0]
   10f6e:	785c      	ldrb	r4, [r3, #1]
   10f70:	428a      	cmp	r2, r1
   10f72:	d00a      	beq.n	10f8a <ll_pdu_rx_alloc+0x26>
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
   10f74:	1c4a      	adds	r2, r1, #1
   10f76:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   10f78:	fb01 3100 	mla	r1, r1, r0, r3
	if (_first == count) {
		_first = 0U;
   10f7c:	4294      	cmp	r4, r2
   10f7e:	bf08      	it	eq
   10f80:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   10f82:	6848      	ldr	r0, [r1, #4]
	}

	*first = _first; /* Write back read-index */
   10f84:	709a      	strb	r2, [r3, #2]
}
   10f86:	bc10      	pop	{r4}
   10f88:	4770      	bx	lr
		return NULL;
   10f8a:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   10f8c:	e7fb      	b.n	10f86 <ll_pdu_rx_alloc+0x22>
   10f8e:	bf00      	nop
   10f90:	200002e4 	.word	0x200002e4

00010f94 <ll_tx_ack_put>:
{
   10f94:	b570      	push	{r4, r5, r6, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
   10f96:	4a13      	ldr	r2, [pc, #76]	; (10fe4 <ll_tx_ack_put+0x50>)
   10f98:	78d6      	ldrb	r6, [r2, #3]
	if (last == count) {
   10f9a:	7855      	ldrb	r5, [r2, #1]
   10f9c:	7894      	ldrb	r4, [r2, #2]
	last = last + 1;
   10f9e:	1c73      	adds	r3, r6, #1
   10fa0:	b2db      	uxtb	r3, r3
		last = 0U;
   10fa2:	429d      	cmp	r5, r3
   10fa4:	bf08      	it	eq
   10fa6:	2300      	moveq	r3, #0
	if (last == first) {
   10fa8:	429c      	cmp	r4, r3
   10faa:	d00a      	beq.n	10fc2 <ll_tx_ack_put+0x2e>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   10fac:	4615      	mov	r5, r2
   10fae:	f815 4b04 	ldrb.w	r4, [r5], #4
   10fb2:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(tx);
   10fb6:	192e      	adds	r6, r5, r4
   10fb8:	d003      	beq.n	10fc2 <ll_tx_ack_put+0x2e>
	tx->handle = handle;
   10fba:	5328      	strh	r0, [r5, r4]
	tx->node = node_tx;
   10fbc:	6071      	str	r1, [r6, #4]
	*last = idx; /* Commit: Update write index */
   10fbe:	70d3      	strb	r3, [r2, #3]
}
   10fc0:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(tx);
   10fc2:	4a09      	ldr	r2, [pc, #36]	; (10fe8 <ll_tx_ack_put+0x54>)
   10fc4:	4909      	ldr	r1, [pc, #36]	; (10fec <ll_tx_ack_put+0x58>)
   10fc6:	480a      	ldr	r0, [pc, #40]	; (10ff0 <ll_tx_ack_put+0x5c>)
   10fc8:	f240 5364 	movw	r3, #1380	; 0x564
   10fcc:	f00d fca6 	bl	1e91c <printk>
   10fd0:	4040      	eors	r0, r0
   10fd2:	f380 8811 	msr	BASEPRI, r0
   10fd6:	f04f 0003 	mov.w	r0, #3
   10fda:	df02      	svc	2
	tx->handle = handle;
   10fdc:	2300      	movs	r3, #0
   10fde:	801b      	strh	r3, [r3, #0]
   10fe0:	deff      	udf	#255	; 0xff
   10fe2:	bf00      	nop
   10fe4:	20000414 	.word	0x20000414
   10fe8:	00024b60 	.word	0x00024b60
   10fec:	00024e90 	.word	0x00024e90
   10ff0:	00024904 	.word	0x00024904

00010ff4 <ull_ticker_status_take>:
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   10ff4:	f030 0302 	bics.w	r3, r0, #2
{
   10ff8:	b510      	push	{r4, lr}
   10ffa:	460c      	mov	r4, r1
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   10ffc:	d002      	beq.n	11004 <ull_ticker_status_take+0x10>
   10ffe:	680b      	ldr	r3, [r1, #0]
   11000:	2b02      	cmp	r3, #2
   11002:	d008      	beq.n	11016 <ull_ticker_status_take+0x22>
	return z_impl_k_sem_take(sem, timeout);
   11004:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11008:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1100c:	4809      	ldr	r0, [pc, #36]	; (11034 <ull_ticker_status_take+0x40>)
   1100e:	f00c fdf3 	bl	1dbf8 <z_impl_k_sem_take>
	return *ret_cb;
   11012:	6820      	ldr	r0, [r4, #0]
}
   11014:	bd10      	pop	{r4, pc}
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   11016:	4a08      	ldr	r2, [pc, #32]	; (11038 <ull_ticker_status_take+0x44>)
   11018:	4908      	ldr	r1, [pc, #32]	; (1103c <ull_ticker_status_take+0x48>)
   1101a:	4809      	ldr	r0, [pc, #36]	; (11040 <ull_ticker_status_take+0x4c>)
   1101c:	f44f 63b3 	mov.w	r3, #1432	; 0x598
   11020:	f00d fc7c 	bl	1e91c <printk>
   11024:	4040      	eors	r0, r0
   11026:	f380 8811 	msr	BASEPRI, r0
   1102a:	f04f 0003 	mov.w	r0, #3
   1102e:	df02      	svc	2
   11030:	e7e8      	b.n	11004 <ull_ticker_status_take+0x10>
   11032:	bf00      	nop
   11034:	20001ec0 	.word	0x20001ec0
   11038:	00024b60 	.word	0x00024b60
   1103c:	00024ca0 	.word	0x00024ca0
   11040:	00024904 	.word	0x00024904

00011044 <ull_disable_mark>:
	if (!*m) {
   11044:	4a04      	ldr	r2, [pc, #16]	; (11058 <ull_disable_mark+0x14>)
   11046:	6813      	ldr	r3, [r2, #0]
   11048:	b10b      	cbz	r3, 1104e <ull_disable_mark+0xa>
}
   1104a:	4618      	mov	r0, r3
   1104c:	4770      	bx	lr
		*m = param;
   1104e:	4603      	mov	r3, r0
   11050:	6010      	str	r0, [r2, #0]
}
   11052:	4618      	mov	r0, r3
   11054:	4770      	bx	lr
   11056:	bf00      	nop
   11058:	20001aec 	.word	0x20001aec

0001105c <ull_disable_unmark>:
	if (*m && *m == param) {
   1105c:	4a04      	ldr	r2, [pc, #16]	; (11070 <ull_disable_unmark+0x14>)
   1105e:	6813      	ldr	r3, [r2, #0]
   11060:	b123      	cbz	r3, 1106c <ull_disable_unmark+0x10>
   11062:	4298      	cmp	r0, r3
		*m = NULL;
   11064:	bf06      	itte	eq
   11066:	2100      	moveq	r1, #0
   11068:	6011      	streq	r1, [r2, #0]
	return NULL;
   1106a:	2300      	movne	r3, #0
}
   1106c:	4618      	mov	r0, r3
   1106e:	4770      	bx	lr
   11070:	20001aec 	.word	0x20001aec

00011074 <ull_disable_mark_get>:
	return mark_get(mark_disable);
   11074:	4b01      	ldr	r3, [pc, #4]	; (1107c <ull_disable_mark_get+0x8>)
}
   11076:	6818      	ldr	r0, [r3, #0]
   11078:	4770      	bx	lr
   1107a:	bf00      	nop
   1107c:	20001aec 	.word	0x20001aec

00011080 <ull_update_mark>:
	if (!*m) {
   11080:	4a04      	ldr	r2, [pc, #16]	; (11094 <ull_update_mark+0x14>)
   11082:	6813      	ldr	r3, [r2, #0]
   11084:	b10b      	cbz	r3, 1108a <ull_update_mark+0xa>
}
   11086:	4618      	mov	r0, r3
   11088:	4770      	bx	lr
		*m = param;
   1108a:	4603      	mov	r3, r0
   1108c:	6010      	str	r0, [r2, #0]
}
   1108e:	4618      	mov	r0, r3
   11090:	4770      	bx	lr
   11092:	bf00      	nop
   11094:	20001af0 	.word	0x20001af0

00011098 <ull_update_unmark>:
	if (*m && *m == param) {
   11098:	4a04      	ldr	r2, [pc, #16]	; (110ac <ull_update_unmark+0x14>)
   1109a:	6813      	ldr	r3, [r2, #0]
   1109c:	b123      	cbz	r3, 110a8 <ull_update_unmark+0x10>
   1109e:	4298      	cmp	r0, r3
		*m = NULL;
   110a0:	bf06      	itte	eq
   110a2:	2100      	moveq	r1, #0
   110a4:	6011      	streq	r1, [r2, #0]
	return NULL;
   110a6:	2300      	movne	r3, #0
}
   110a8:	4618      	mov	r0, r3
   110aa:	4770      	bx	lr
   110ac:	20001af0 	.word	0x20001af0

000110b0 <ull_update_mark_get>:
	return mark_get(mark_update);
   110b0:	4b01      	ldr	r3, [pc, #4]	; (110b8 <ull_update_mark_get+0x8>)
}
   110b2:	6818      	ldr	r0, [r3, #0]
   110b4:	4770      	bx	lr
   110b6:	bf00      	nop
   110b8:	20001af0 	.word	0x20001af0

000110bc <ull_disable>:
{
   110bc:	b530      	push	{r4, r5, lr}
	hdr = HDR_ULL(((struct lll_hdr *)lll)->parent);
   110be:	6805      	ldr	r5, [r0, #0]
	if (!hdr) {
   110c0:	f115 0f10 	cmn.w	r5, #16
{
   110c4:	b087      	sub	sp, #28
	if (!hdr) {
   110c6:	d00b      	beq.n	110e0 <ull_disable+0x24>
	compiler_barrier();
   110c8:	4604      	mov	r4, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
   110ca:	2201      	movs	r2, #1
   110cc:	4668      	mov	r0, sp
   110ce:	2100      	movs	r1, #0
   110d0:	f012 fac7 	bl	23662 <z_impl_k_sem_init>
   110d4:	7c2b      	ldrb	r3, [r5, #16]
	hdr->disabled_cb = disabled_cb;
   110d6:	4a13      	ldr	r2, [pc, #76]	; (11124 <ull_disable+0x68>)
	hdr->disabled_param = &sem;
   110d8:	f8c5 d018 	str.w	sp, [r5, #24]
	hdr->disabled_cb = disabled_cb;
   110dc:	616a      	str	r2, [r5, #20]
	if (!ull_ref_get(hdr)) {
   110de:	b913      	cbnz	r3, 110e6 <ull_disable+0x2a>
		return ULL_STATUS_SUCCESS;
   110e0:	2000      	movs	r0, #0
}
   110e2:	b007      	add	sp, #28
   110e4:	bd30      	pop	{r4, r5, pc}
	mfy.param = lll;
   110e6:	4b10      	ldr	r3, [pc, #64]	; (11128 <ull_disable+0x6c>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   110e8:	2200      	movs	r2, #0
   110ea:	4611      	mov	r1, r2
   110ec:	2003      	movs	r0, #3
	mfy.param = lll;
   110ee:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   110f0:	f7fc f8ca 	bl	d288 <mayfly_enqueue>
	LL_ASSERT(!ret);
   110f4:	b940      	cbnz	r0, 11108 <ull_disable+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   110f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   110fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   110fe:	4668      	mov	r0, sp
   11100:	f00c fd7a 	bl	1dbf8 <z_impl_k_sem_take>
}
   11104:	b007      	add	sp, #28
   11106:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
   11108:	4a08      	ldr	r2, [pc, #32]	; (1112c <ull_disable+0x70>)
   1110a:	4909      	ldr	r1, [pc, #36]	; (11130 <ull_disable+0x74>)
   1110c:	4809      	ldr	r0, [pc, #36]	; (11134 <ull_disable+0x78>)
   1110e:	f240 630a 	movw	r3, #1546	; 0x60a
   11112:	f00d fc03 	bl	1e91c <printk>
   11116:	4040      	eors	r0, r0
   11118:	f380 8811 	msr	BASEPRI, r0
   1111c:	f04f 0003 	mov.w	r0, #3
   11120:	df02      	svc	2
   11122:	e7e8      	b.n	110f6 <ull_disable+0x3a>
   11124:	0000ff29 	.word	0x0000ff29
   11128:	20000448 	.word	0x20000448
   1112c:	00024b60 	.word	0x00024b60
   11130:	00024c98 	.word	0x00024c98
   11134:	00024904 	.word	0x00024904

00011138 <ull_ticker_stop_with_mark>:
{
   11138:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!*m) {
   1113a:	4d1d      	ldr	r5, [pc, #116]	; (111b0 <ull_ticker_stop_with_mark+0x78>)
   1113c:	682b      	ldr	r3, [r5, #0]
{
   1113e:	b085      	sub	sp, #20
   11140:	460c      	mov	r4, r1
   11142:	4616      	mov	r6, r2
	if (!*m) {
   11144:	b323      	cbz	r3, 11190 <ull_ticker_stop_with_mark+0x58>
	if (mark != param) {
   11146:	4299      	cmp	r1, r3
   11148:	d112      	bne.n	11170 <ull_ticker_stop_with_mark+0x38>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   1114a:	af03      	add	r7, sp, #12
	ret_cb = TICKER_STATUS_BUSY;
   1114c:	2102      	movs	r1, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   1114e:	4602      	mov	r2, r0
	ret_cb = TICKER_STATUS_BUSY;
   11150:	9103      	str	r1, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   11152:	4b18      	ldr	r3, [pc, #96]	; (111b4 <ull_ticker_stop_with_mark+0x7c>)
   11154:	9700      	str	r7, [sp, #0]
   11156:	2103      	movs	r1, #3
   11158:	2000      	movs	r0, #0
   1115a:	f7fd fb9b 	bl	e894 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   1115e:	4639      	mov	r1, r7
   11160:	f7ff ff48 	bl	10ff4 <ull_ticker_status_take>
	if (ret) {
   11164:	b140      	cbz	r0, 11178 <ull_ticker_stop_with_mark+0x40>
	if (*m && *m == param) {
   11166:	682b      	ldr	r3, [r5, #0]
   11168:	b10b      	cbz	r3, 1116e <ull_ticker_stop_with_mark+0x36>
   1116a:	429c      	cmp	r4, r3
   1116c:	d012      	beq.n	11194 <ull_ticker_stop_with_mark+0x5c>
		if (mark != param) {
   1116e:	b1cc      	cbz	r4, 111a4 <ull_ticker_stop_with_mark+0x6c>
			return -ENOLCK;
   11170:	f06f 002d 	mvn.w	r0, #45	; 0x2d
}
   11174:	b005      	add	sp, #20
   11176:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = ull_disable(lll_disable);
   11178:	4630      	mov	r0, r6
   1117a:	f7ff ff9f 	bl	110bc <ull_disable>
	if (ret) {
   1117e:	b9a0      	cbnz	r0, 111aa <ull_ticker_stop_with_mark+0x72>
	if (*m && *m == param) {
   11180:	682b      	ldr	r3, [r5, #0]
   11182:	b10b      	cbz	r3, 11188 <ull_ticker_stop_with_mark+0x50>
   11184:	429c      	cmp	r4, r3
   11186:	d00b      	beq.n	111a0 <ull_ticker_stop_with_mark+0x68>
	if (mark != param) {
   11188:	2c00      	cmp	r4, #0
   1118a:	d1f1      	bne.n	11170 <ull_ticker_stop_with_mark+0x38>
}
   1118c:	b005      	add	sp, #20
   1118e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = param;
   11190:	6029      	str	r1, [r5, #0]
	if (mark != param) {
   11192:	e7da      	b.n	1114a <ull_ticker_stop_with_mark+0x12>
		*m = NULL;
   11194:	2300      	movs	r3, #0
		return -EALREADY;
   11196:	f06f 0077 	mvn.w	r0, #119	; 0x77
		*m = NULL;
   1119a:	602b      	str	r3, [r5, #0]
}
   1119c:	b005      	add	sp, #20
   1119e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = NULL;
   111a0:	6028      	str	r0, [r5, #0]
	if (mark != param) {
   111a2:	e7e7      	b.n	11174 <ull_ticker_stop_with_mark+0x3c>
		return -EALREADY;
   111a4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   111a8:	e7e4      	b.n	11174 <ull_ticker_stop_with_mark+0x3c>
		return -EBUSY;
   111aa:	f06f 000f 	mvn.w	r0, #15
   111ae:	e7e1      	b.n	11174 <ull_ticker_stop_with_mark+0x3c>
   111b0:	20001aec 	.word	0x20001aec
   111b4:	0000ff1d 	.word	0x0000ff1d

000111b8 <ull_pdu_rx_alloc_peek>:
{
   111b8:	b410      	push	{r4}
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   111ba:	4b0d      	ldr	r3, [pc, #52]	; (111f0 <ull_pdu_rx_alloc_peek+0x38>)
   111bc:	789a      	ldrb	r2, [r3, #2]
   111be:	78dc      	ldrb	r4, [r3, #3]
	if (last >= first) {
   111c0:	42a2      	cmp	r2, r4
   111c2:	d809      	bhi.n	111d8 <ull_pdu_rx_alloc_peek+0x20>
		return last - first;
   111c4:	1aa1      	subs	r1, r4, r2
   111c6:	b2c9      	uxtb	r1, r1
   111c8:	4288      	cmp	r0, r1
   111ca:	d802      	bhi.n	111d2 <ull_pdu_rx_alloc_peek+0x1a>
	if (first == last) {
   111cc:	42a2      	cmp	r2, r4
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   111ce:	7819      	ldrb	r1, [r3, #0]
   111d0:	d109      	bne.n	111e6 <ull_pdu_rx_alloc_peek+0x2e>
		return NULL;
   111d2:	2000      	movs	r0, #0
}
   111d4:	bc10      	pop	{r4}
   111d6:	4770      	bx	lr
		return count - first + last;
   111d8:	7859      	ldrb	r1, [r3, #1]
   111da:	1a89      	subs	r1, r1, r2
   111dc:	4421      	add	r1, r4
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   111de:	b2c9      	uxtb	r1, r1
   111e0:	4288      	cmp	r0, r1
   111e2:	d8f6      	bhi.n	111d2 <ull_pdu_rx_alloc_peek+0x1a>
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   111e4:	7819      	ldrb	r1, [r3, #0]
}
   111e6:	bc10      	pop	{r4}
	return *((void **)(fifo + first * size));
   111e8:	fb02 3301 	mla	r3, r2, r1, r3
   111ec:	6858      	ldr	r0, [r3, #4]
   111ee:	4770      	bx	lr
   111f0:	200002f8 	.word	0x200002f8

000111f4 <ull_pdu_rx_alloc>:
{
   111f4:	b410      	push	{r4}
	return MFIFO_DEQUEUE(pdu_rx_free);
   111f6:	4b0a      	ldr	r3, [pc, #40]	; (11220 <ull_pdu_rx_alloc+0x2c>)
	uint8_t _first = *first; /* Copy read-index */
   111f8:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   111fa:	78da      	ldrb	r2, [r3, #3]
   111fc:	7818      	ldrb	r0, [r3, #0]
   111fe:	785c      	ldrb	r4, [r3, #1]
   11200:	428a      	cmp	r2, r1
   11202:	d00a      	beq.n	1121a <ull_pdu_rx_alloc+0x26>
	_first += 1U;
   11204:	1c4a      	adds	r2, r1, #1
   11206:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   11208:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   1120c:	4294      	cmp	r4, r2
   1120e:	bf08      	it	eq
   11210:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   11212:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   11214:	709a      	strb	r2, [r3, #2]
}
   11216:	bc10      	pop	{r4}
   11218:	4770      	bx	lr
		return NULL;
   1121a:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(pdu_rx_free);
   1121c:	e7fb      	b.n	11216 <ull_pdu_rx_alloc+0x22>
   1121e:	bf00      	nop
   11220:	200002f8 	.word	0x200002f8

00011224 <ull_rx_put>:
{
   11224:	b538      	push	{r3, r4, r5, lr}
   11226:	460c      	mov	r4, r1
   11228:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   1122a:	f005 f92d 	bl	16488 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   1122e:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   11230:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   11232:	4a03      	ldr	r2, [pc, #12]	; (11240 <ull_rx_put+0x1c>)
   11234:	4628      	mov	r0, r5
}
   11236:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   1123a:	f7fb bfb1 	b.w	d1a0 <memq_enqueue>
   1123e:	bf00      	nop
   11240:	20001eb8 	.word	0x20001eb8

00011244 <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   11244:	2201      	movs	r2, #1
   11246:	4b02      	ldr	r3, [pc, #8]	; (11250 <ull_rx_sched+0xc>)
   11248:	4611      	mov	r1, r2
   1124a:	2000      	movs	r0, #0
   1124c:	f7fc b81c 	b.w	d288 <mayfly_enqueue>
   11250:	20000458 	.word	0x20000458

00011254 <ull_prepare_enqueue>:
{
   11254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   11258:	4e1c      	ldr	r6, [pc, #112]	; (112cc <ull_prepare_enqueue+0x78>)
{
   1125a:	f89d e024 	ldrb.w	lr, [sp, #36]	; 0x24
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   1125e:	78f4      	ldrb	r4, [r6, #3]
	if (last == count) {
   11260:	f896 c001 	ldrb.w	ip, [r6, #1]
   11264:	78b7      	ldrb	r7, [r6, #2]
	last = last + 1;
   11266:	1c65      	adds	r5, r4, #1
   11268:	b2ed      	uxtb	r5, r5
		last = 0U;
   1126a:	45ac      	cmp	ip, r5
   1126c:	bf08      	it	eq
   1126e:	2500      	moveq	r5, #0
	if (last == first) {
   11270:	42af      	cmp	r7, r5
   11272:	d026      	beq.n	112c2 <ull_prepare_enqueue+0x6e>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   11274:	46b4      	mov	ip, r6
   11276:	f81c 7b04 	ldrb.w	r7, [ip], #4
   1127a:	fb17 f704 	smulbb	r7, r7, r4
	if (!e) {
   1127e:	eb1c 0407 	adds.w	r4, ip, r7
   11282:	d01e      	beq.n	112c2 <ull_prepare_enqueue+0x6e>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   11284:	f8d2 b000 	ldr.w	fp, [r2]
   11288:	f8d2 a004 	ldr.w	sl, [r2, #4]
   1128c:	f8d2 8008 	ldr.w	r8, [r2, #8]
   11290:	f8d2 900c 	ldr.w	r9, [r2, #12]
   11294:	f84c b007 	str.w	fp, [ip, r7]
	e->is_resume = is_resume;
   11298:	7f22      	ldrb	r2, [r4, #28]
   1129a:	f8c4 a004 	str.w	sl, [r4, #4]
   1129e:	f00e 0e01 	and.w	lr, lr, #1
   112a2:	f022 0203 	bic.w	r2, r2, #3
   112a6:	ea42 020e 	orr.w	r2, r2, lr
   112aa:	f8c4 8008 	str.w	r8, [r4, #8]
   112ae:	f8c4 900c 	str.w	r9, [r4, #12]
	e->is_abort_cb = is_abort_cb;
   112b2:	e9c4 3004 	strd	r3, r0, [r4, #16]
	e->abort_cb = abort_cb;
   112b6:	61a1      	str	r1, [r4, #24]
	e->is_resume = is_resume;
   112b8:	7722      	strb	r2, [r4, #28]
	return 0;
   112ba:	2000      	movs	r0, #0
	*last = idx; /* Commit: Update write index */
   112bc:	70f5      	strb	r5, [r6, #3]
}
   112be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOBUFS;
   112c2:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   112c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   112ca:	bf00      	nop
   112cc:	20000310 	.word	0x20000310

000112d0 <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
   112d0:	4b05      	ldr	r3, [pc, #20]	; (112e8 <ull_prepare_dequeue_get+0x18>)
   112d2:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
   112d4:	78d9      	ldrb	r1, [r3, #3]
   112d6:	7818      	ldrb	r0, [r3, #0]
   112d8:	4291      	cmp	r1, r2
	return (void *)(fifo + first * size);
   112da:	bf1a      	itte	ne
   112dc:	3304      	addne	r3, #4
   112de:	fb02 3000 	mlane	r0, r2, r0, r3
		return NULL;
   112e2:	2000      	moveq	r0, #0
}
   112e4:	4770      	bx	lr
   112e6:	bf00      	nop
   112e8:	20000310 	.word	0x20000310

000112ec <ull_prepare_dequeue_iter>:
{
   112ec:	b430      	push	{r4, r5}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   112ee:	4b0c      	ldr	r3, [pc, #48]	; (11320 <ull_prepare_dequeue_iter+0x34>)
	if (*idx >= count) {
   112f0:	7802      	ldrb	r2, [r0, #0]
   112f2:	785c      	ldrb	r4, [r3, #1]
   112f4:	78dd      	ldrb	r5, [r3, #3]
   112f6:	7819      	ldrb	r1, [r3, #0]
   112f8:	4294      	cmp	r4, r2
   112fa:	bf9c      	itt	ls
   112fc:	789a      	ldrbls	r2, [r3, #2]
		*idx = first;
   112fe:	7002      	strbls	r2, [r0, #0]
	if (*idx == last) {
   11300:	4295      	cmp	r5, r2
   11302:	d00a      	beq.n	1131a <ull_prepare_dequeue_iter+0x2e>
	i = *idx + 1;
   11304:	1c53      	adds	r3, r2, #1
	p = (void *)(fifo + (*idx) * size);
   11306:	4d07      	ldr	r5, [pc, #28]	; (11324 <ull_prepare_dequeue_iter+0x38>)
	i = *idx + 1;
   11308:	b2db      	uxtb	r3, r3
		i = 0U;
   1130a:	429c      	cmp	r4, r3
   1130c:	bf08      	it	eq
   1130e:	2300      	moveq	r3, #0
	*idx = i;
   11310:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
   11312:	fb02 5001 	mla	r0, r2, r1, r5
}
   11316:	bc30      	pop	{r4, r5}
   11318:	4770      	bx	lr
		return NULL;
   1131a:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   1131c:	e7fb      	b.n	11316 <ull_prepare_dequeue_iter+0x2a>
   1131e:	bf00      	nop
   11320:	20000310 	.word	0x20000310
   11324:	20000314 	.word	0x20000314

00011328 <ull_prepare_dequeue>:
{
   11328:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return MFIFO_DEQUEUE_GET(prep);
   1132c:	4c26      	ldr	r4, [pc, #152]	; (113c8 <ull_prepare_dequeue+0xa0>)
   1132e:	78a2      	ldrb	r2, [r4, #2]
	if (first == last) {
   11330:	78e1      	ldrb	r1, [r4, #3]
   11332:	7823      	ldrb	r3, [r4, #0]
   11334:	4291      	cmp	r1, r2
   11336:	d027      	beq.n	11388 <ull_prepare_dequeue+0x60>
	return (void *)(fifo + first * size);
   11338:	1d27      	adds	r7, r4, #4
   1133a:	fb02 7203 	mla	r2, r2, r3, r7
	while (next) {
   1133e:	b31a      	cbz	r2, 11388 <ull_prepare_dequeue+0x60>
			mfy.param = next;
   11340:	f8df 9088 	ldr.w	r9, [pc, #136]	; 113cc <ull_prepare_dequeue+0xa4>
			LL_ASSERT(!ret);
   11344:	f8df b090 	ldr.w	fp, [pc, #144]	; 113d8 <ull_prepare_dequeue+0xb0>
   11348:	f8df a090 	ldr.w	sl, [pc, #144]	; 113dc <ull_prepare_dequeue+0xb4>
   1134c:	4680      	mov	r8, r0
		uint8_t is_aborted = next->is_aborted;
   1134e:	7f13      	ldrb	r3, [r2, #28]
		if (!is_aborted) {
   11350:	0799      	lsls	r1, r3, #30
		uint8_t is_aborted = next->is_aborted;
   11352:	f3c3 0540 	ubfx	r5, r3, #1, #1
		uint8_t is_resume = next->is_resume;
   11356:	f003 0601 	and.w	r6, r3, #1
		if (!is_aborted) {
   1135a:	d517      	bpl.n	1138c <ull_prepare_dequeue+0x64>
		MFIFO_DEQUEUE(prep);
   1135c:	78e1      	ldrb	r1, [r4, #3]
	uint8_t _first = *first; /* Copy read-index */
   1135e:	78a3      	ldrb	r3, [r4, #2]
   11360:	7822      	ldrb	r2, [r4, #0]
   11362:	7860      	ldrb	r0, [r4, #1]
	if (_first == last) {
   11364:	4299      	cmp	r1, r3
   11366:	d00f      	beq.n	11388 <ull_prepare_dequeue+0x60>
	_first += 1U;
   11368:	3301      	adds	r3, #1
   1136a:	b2db      	uxtb	r3, r3
	if (_first == count) {
   1136c:	4298      	cmp	r0, r3
   1136e:	d025      	beq.n	113bc <ull_prepare_dequeue+0x94>
	if (first == last) {
   11370:	4299      	cmp	r1, r3
	*first = _first; /* Write back read-index */
   11372:	70a3      	strb	r3, [r4, #2]
	if (first == last) {
   11374:	d008      	beq.n	11388 <ull_prepare_dequeue+0x60>
	return (void *)(fifo + first * size);
   11376:	fb03 7202 	mla	r2, r3, r2, r7
		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
   1137a:	b12a      	cbz	r2, 11388 <ull_prepare_dequeue+0x60>
   1137c:	2d00      	cmp	r5, #0
   1137e:	d1e6      	bne.n	1134e <ull_prepare_dequeue+0x26>
   11380:	b116      	cbz	r6, 11388 <ull_prepare_dequeue+0x60>
   11382:	7f13      	ldrb	r3, [r2, #28]
   11384:	07db      	lsls	r3, r3, #31
   11386:	d5e2      	bpl.n	1134e <ull_prepare_dequeue+0x26>
}
   11388:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mfy.param = next;
   1138c:	f8c9 2008 	str.w	r2, [r9, #8]
			ret = mayfly_enqueue(caller_id, TICKER_USER_ID_LLL, 0,
   11390:	4b0e      	ldr	r3, [pc, #56]	; (113cc <ull_prepare_dequeue+0xa4>)
   11392:	462a      	mov	r2, r5
   11394:	4629      	mov	r1, r5
   11396:	4640      	mov	r0, r8
   11398:	f7fb ff76 	bl	d288 <mayfly_enqueue>
			LL_ASSERT(!ret);
   1139c:	2800      	cmp	r0, #0
   1139e:	d0dd      	beq.n	1135c <ull_prepare_dequeue+0x34>
   113a0:	480b      	ldr	r0, [pc, #44]	; (113d0 <ull_prepare_dequeue+0xa8>)
   113a2:	f240 6381 	movw	r3, #1665	; 0x681
   113a6:	465a      	mov	r2, fp
   113a8:	4651      	mov	r1, sl
   113aa:	f00d fab7 	bl	1e91c <printk>
   113ae:	4040      	eors	r0, r0
   113b0:	f380 8811 	msr	BASEPRI, r0
   113b4:	f04f 0003 	mov.w	r0, #3
   113b8:	df02      	svc	2
   113ba:	e7cf      	b.n	1135c <ull_prepare_dequeue+0x34>
	*first = _first; /* Write back read-index */
   113bc:	2300      	movs	r3, #0
   113be:	70a3      	strb	r3, [r4, #2]
	if (first == last) {
   113c0:	2900      	cmp	r1, #0
   113c2:	d0e1      	beq.n	11388 <ull_prepare_dequeue+0x60>
	return (void *)(fifo + first * size);
   113c4:	4a03      	ldr	r2, [pc, #12]	; (113d4 <ull_prepare_dequeue+0xac>)
   113c6:	e7d9      	b.n	1137c <ull_prepare_dequeue+0x54>
   113c8:	20000310 	.word	0x20000310
   113cc:	20000478 	.word	0x20000478
   113d0:	00024904 	.word	0x00024904
   113d4:	20000314 	.word	0x20000314
   113d8:	00024b60 	.word	0x00024b60
   113dc:	00024c98 	.word	0x00024c98

000113e0 <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
   113e0:	4b06      	ldr	r3, [pc, #24]	; (113fc <ull_event_done_extra_get+0x1c>)
   113e2:	7899      	ldrb	r1, [r3, #2]
	if (first == last) {
   113e4:	78d8      	ldrb	r0, [r3, #3]
   113e6:	781a      	ldrb	r2, [r3, #0]
   113e8:	4288      	cmp	r0, r1
   113ea:	d005      	beq.n	113f8 <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
   113ec:	fb01 3302 	mla	r3, r1, r2, r3
   113f0:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
   113f2:	b110      	cbz	r0, 113fa <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
   113f4:	3020      	adds	r0, #32
   113f6:	4770      	bx	lr
		return NULL;
   113f8:	2000      	movs	r0, #0
}
   113fa:	4770      	bx	lr
   113fc:	200002d0 	.word	0x200002d0

00011400 <ull_event_done>:
{
   11400:	b570      	push	{r4, r5, r6, lr}
	evdone = MFIFO_DEQUEUE(done);
   11402:	4a13      	ldr	r2, [pc, #76]	; (11450 <ull_event_done+0x50>)
	uint8_t _first = *first; /* Copy read-index */
   11404:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   11406:	78d5      	ldrb	r5, [r2, #3]
   11408:	7814      	ldrb	r4, [r2, #0]
   1140a:	7856      	ldrb	r6, [r2, #1]
   1140c:	429d      	cmp	r5, r3
   1140e:	d01c      	beq.n	1144a <ull_event_done+0x4a>
	mem = *((void **)(fifo + _first * size));
   11410:	fb03 2404 	mla	r4, r3, r4, r2
	_first += 1U;
   11414:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   11416:	6864      	ldr	r4, [r4, #4]
	_first += 1U;
   11418:	b2db      	uxtb	r3, r3
		_first = 0U;
   1141a:	429e      	cmp	r6, r3
   1141c:	bf08      	it	eq
   1141e:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   11420:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
   11422:	b184      	cbz	r4, 11446 <ull_event_done+0x46>
   11424:	4601      	mov	r1, r0
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   11426:	2302      	movs	r3, #2
	evdone->hdr.link = NULL;
   11428:	2500      	movs	r5, #0
	link = evdone->hdr.link;
   1142a:	6820      	ldr	r0, [r4, #0]
	memq_enqueue(link, done, &memq_ull_done.tail);
   1142c:	4a09      	ldr	r2, [pc, #36]	; (11454 <ull_event_done+0x54>)
	evdone->param = param;
   1142e:	61e1      	str	r1, [r4, #28]
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   11430:	7123      	strb	r3, [r4, #4]
	memq_enqueue(link, done, &memq_ull_done.tail);
   11432:	4621      	mov	r1, r4
	evdone->hdr.link = NULL;
   11434:	6025      	str	r5, [r4, #0]
	memq_enqueue(link, done, &memq_ull_done.tail);
   11436:	f7fb feb3 	bl	d1a0 <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   1143a:	2201      	movs	r2, #1
   1143c:	4b06      	ldr	r3, [pc, #24]	; (11458 <ull_event_done+0x58>)
   1143e:	4628      	mov	r0, r5
   11440:	4611      	mov	r1, r2
   11442:	f7fb ff21 	bl	d288 <mayfly_enqueue>
}
   11446:	4620      	mov	r0, r4
   11448:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   1144a:	2400      	movs	r4, #0
   1144c:	e7fb      	b.n	11446 <ull_event_done+0x46>
   1144e:	bf00      	nop
   11450:	200002d0 	.word	0x200002d0
   11454:	20001eb0 	.word	0x20001eb0
   11458:	20000468 	.word	0x20000468

0001145c <lll_prepare>:
 *	   -EINPROGRESS: Event already in progress and prepare was queued
 */
int lll_prepare(lll_is_abort_cb_t is_abort_cb, lll_abort_cb_t abort_cb,
		lll_prepare_cb_t prepare_cb, int8_t event_prio,
		struct lll_prepare_param *prepare_param)
{
   1145c:	b500      	push	{lr}
   1145e:	b083      	sub	sp, #12
	}

	prepare_param->prio = prio;
#endif /* CONFIG_BT_CTLR_JIT_SCHEDULING */

	return lll_prepare_resolve(is_abort_cb, abort_cb, prepare_cb,
   11460:	2300      	movs	r3, #0
   11462:	e9cd 3300 	strd	r3, r3, [sp]
   11466:	9b04      	ldr	r3, [sp, #16]
   11468:	f006 fe3e 	bl	180e8 <lll_prepare_resolve>
				   prepare_param, 0, 0);
}
   1146c:	b003      	add	sp, #12
   1146e:	f85d fb04 	ldr.w	pc, [sp], #4
   11472:	bf00      	nop

00011474 <lll_resume>:

void lll_resume(void *param)
{
   11474:	b510      	push	{r4, lr}
   11476:	4603      	mov	r3, r0
	int ret;

	next = param;
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
				  next->prepare_cb, &next->prepare_param,
				  next->is_resume, 1);
   11478:	7f00      	ldrb	r0, [r0, #28]
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   1147a:	691a      	ldr	r2, [r3, #16]
   1147c:	6999      	ldr	r1, [r3, #24]
{
   1147e:	b082      	sub	sp, #8
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   11480:	2401      	movs	r4, #1
   11482:	4020      	ands	r0, r4
   11484:	9401      	str	r4, [sp, #4]
   11486:	9000      	str	r0, [sp, #0]
   11488:	6958      	ldr	r0, [r3, #20]
   1148a:	f006 fe2d 	bl	180e8 <lll_prepare_resolve>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   1148e:	b108      	cbz	r0, 11494 <lll_resume+0x20>
   11490:	3077      	adds	r0, #119	; 0x77
   11492:	d101      	bne.n	11498 <lll_resume+0x24>
}
   11494:	b002      	add	sp, #8
   11496:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   11498:	4a06      	ldr	r2, [pc, #24]	; (114b4 <lll_resume+0x40>)
   1149a:	4907      	ldr	r1, [pc, #28]	; (114b8 <lll_resume+0x44>)
   1149c:	4807      	ldr	r0, [pc, #28]	; (114bc <lll_resume+0x48>)
   1149e:	234f      	movs	r3, #79	; 0x4f
   114a0:	f00d fa3c 	bl	1e91c <printk>
   114a4:	4040      	eors	r0, r0
   114a6:	f380 8811 	msr	BASEPRI, r0
   114aa:	f04f 0003 	mov.w	r0, #3
   114ae:	df02      	svc	2
}
   114b0:	b002      	add	sp, #8
   114b2:	bd10      	pop	{r4, pc}
   114b4:	00024ccc 	.word	0x00024ccc
   114b8:	00024d10 	.word	0x00024d10
   114bc:	00024904 	.word	0x00024904

000114c0 <ticker_cb>:
{
   114c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   114c4:	4615      	mov	r5, r2
   114c6:	b08b      	sub	sp, #44	; 0x2c
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
   114c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   114cc:	4295      	cmp	r5, r2
{
   114ce:	9c12      	ldr	r4, [sp, #72]	; 0x48
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
   114d0:	d01b      	beq.n	1150a <ticker_cb+0x4a>
	return ++hdr->ref;
   114d2:	7c22      	ldrb	r2, [r4, #16]
   114d4:	3201      	adds	r2, #1
   114d6:	b2d2      	uxtb	r2, r2
   114d8:	4681      	mov	r9, r0
   114da:	4688      	mov	r8, r1
   114dc:	461f      	mov	r7, r3
   114de:	7422      	strb	r2, [r4, #16]
		LL_ASSERT(ref);
   114e0:	2a00      	cmp	r2, #0
   114e2:	d064      	beq.n	115ae <ticker_cb+0xee>
		p.ticks_at_expire = ticks_at_expire;
   114e4:	4e39      	ldr	r6, [pc, #228]	; (115cc <ticker_cb+0x10c>)
		mfy.param = &p;
   114e6:	4b3a      	ldr	r3, [pc, #232]	; (115d0 <ticker_cb+0x110>)
		p.ticks_at_expire = ticks_at_expire;
   114e8:	f8c6 9000 	str.w	r9, [r6]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   114ec:	2200      	movs	r2, #0
	lll = &adv->lll;
   114ee:	f104 0c1c 	add.w	ip, r4, #28
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   114f2:	4611      	mov	r1, r2
   114f4:	2001      	movs	r0, #1
		mfy.param = &p;
   114f6:	609e      	str	r6, [r3, #8]
		p.remainder = remainder;
   114f8:	f8c6 8004 	str.w	r8, [r6, #4]
		p.lazy = lazy;
   114fc:	8135      	strh	r5, [r6, #8]
		p.force = force;
   114fe:	72b7      	strb	r7, [r6, #10]
		p.param = lll;
   11500:	f8c6 c00c 	str.w	ip, [r6, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   11504:	f7fb fec0 	bl	d288 <mayfly_enqueue>
		LL_ASSERT(!ret);
   11508:	b938      	cbnz	r0, 1151a <ticker_cb+0x5a>
	if (!lll->is_hdcd)
   1150a:	f894 5024 	ldrb.w	r5, [r4, #36]	; 0x24
   1150e:	f015 0501 	ands.w	r5, r5, #1
   11512:	d014      	beq.n	1153e <ticker_cb+0x7e>
}
   11514:	b00b      	add	sp, #44	; 0x2c
   11516:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LL_ASSERT(!ret);
   1151a:	4a2e      	ldr	r2, [pc, #184]	; (115d4 <ticker_cb+0x114>)
   1151c:	492e      	ldr	r1, [pc, #184]	; (115d8 <ticker_cb+0x118>)
   1151e:	482f      	ldr	r0, [pc, #188]	; (115dc <ticker_cb+0x11c>)
   11520:	f240 63ce 	movw	r3, #1742	; 0x6ce
   11524:	f00d f9fa 	bl	1e91c <printk>
   11528:	4040      	eors	r0, r0
   1152a:	f380 8811 	msr	BASEPRI, r0
   1152e:	f04f 0003 	mov.w	r0, #3
   11532:	df02      	svc	2
	if (!lll->is_hdcd)
   11534:	f894 5024 	ldrb.w	r5, [r4, #36]	; 0x24
   11538:	f015 0501 	ands.w	r5, r5, #1
   1153c:	d1ea      	bne.n	11514 <ticker_cb+0x54>
		lll_rand_isr_get(&random_delay, sizeof(random_delay));
   1153e:	2104      	movs	r1, #4
   11540:	a809      	add	r0, sp, #36	; 0x24
   11542:	f006 fc2d 	bl	17da0 <lll_rand_isr_get>
		random_delay %= ULL_ADV_RANDOM_DELAY;
   11546:	9809      	ldr	r0, [sp, #36]	; 0x24
   11548:	4925      	ldr	r1, [pc, #148]	; (115e0 <ticker_cb+0x120>)
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   1154a:	4a26      	ldr	r2, [pc, #152]	; (115e4 <ticker_cb+0x124>)
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1154c:	9406      	str	r4, [sp, #24]
		random_delay %= ULL_ADV_RANDOM_DELAY;
   1154e:	fba1 3100 	umull	r3, r1, r1, r0
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   11552:	1aa2      	subs	r2, r4, r2
   11554:	4c24      	ldr	r4, [pc, #144]	; (115e8 <ticker_cb+0x128>)
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   11556:	9504      	str	r5, [sp, #16]
		random_delay %= ULL_ADV_RANDOM_DELAY;
   11558:	1a43      	subs	r3, r0, r1
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   1155a:	0892      	lsrs	r2, r2, #2
		random_delay %= ULL_ADV_RANDOM_DELAY;
   1155c:	eb01 0353 	add.w	r3, r1, r3, lsr #1
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   11560:	fba4 4202 	umull	r4, r2, r4, r2
		random_delay %= ULL_ADV_RANDOM_DELAY;
   11564:	f240 1147 	movw	r1, #327	; 0x147
   11568:	0a1b      	lsrs	r3, r3, #8
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   1156a:	0892      	lsrs	r2, r2, #2
		random_delay %= ULL_ADV_RANDOM_DELAY;
   1156c:	fb01 0313 	mls	r3, r1, r3, r0
				    (TICKER_ID_ADV_BASE +
   11570:	3202      	adds	r2, #2
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   11572:	491e      	ldr	r1, [pc, #120]	; (115ec <ticker_cb+0x12c>)
   11574:	9105      	str	r1, [sp, #20]
		random_delay += 1;
   11576:	3301      	adds	r3, #1
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   11578:	e9cd 5502 	strd	r5, r5, [sp, #8]
   1157c:	e9cd 5500 	strd	r5, r5, [sp]
   11580:	4628      	mov	r0, r5
   11582:	b2d2      	uxtb	r2, r2
   11584:	2101      	movs	r1, #1
		random_delay += 1;
   11586:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   11588:	f7fd f96c 	bl	e864 <ticker_update>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1158c:	f030 0302 	bics.w	r3, r0, #2
   11590:	d0c0      	beq.n	11514 <ticker_cb+0x54>
   11592:	4a10      	ldr	r2, [pc, #64]	; (115d4 <ticker_cb+0x114>)
   11594:	4916      	ldr	r1, [pc, #88]	; (115f0 <ticker_cb+0x130>)
   11596:	4811      	ldr	r0, [pc, #68]	; (115dc <ticker_cb+0x11c>)
   11598:	f240 63e4 	movw	r3, #1764	; 0x6e4
   1159c:	f00d f9be 	bl	1e91c <printk>
   115a0:	4040      	eors	r0, r0
   115a2:	f380 8811 	msr	BASEPRI, r0
   115a6:	f04f 0003 	mov.w	r0, #3
   115aa:	df02      	svc	2
}
   115ac:	e7b2      	b.n	11514 <ticker_cb+0x54>
		LL_ASSERT(ref);
   115ae:	4a09      	ldr	r2, [pc, #36]	; (115d4 <ticker_cb+0x114>)
   115b0:	4910      	ldr	r1, [pc, #64]	; (115f4 <ticker_cb+0x134>)
   115b2:	480a      	ldr	r0, [pc, #40]	; (115dc <ticker_cb+0x11c>)
   115b4:	f240 63c1 	movw	r3, #1729	; 0x6c1
   115b8:	f00d f9b0 	bl	1e91c <printk>
   115bc:	4040      	eors	r0, r0
   115be:	f380 8811 	msr	BASEPRI, r0
   115c2:	f04f 0003 	mov.w	r0, #3
   115c6:	df02      	svc	2
   115c8:	e78c      	b.n	114e4 <ticker_cb+0x24>
   115ca:	bf00      	nop
   115cc:	20002298 	.word	0x20002298
   115d0:	20000488 	.word	0x20000488
   115d4:	00024d38 	.word	0x00024d38
   115d8:	00024c98 	.word	0x00024c98
   115dc:	00024904 	.word	0x00024904
   115e0:	90d4f121 	.word	0x90d4f121
   115e4:	20002238 	.word	0x20002238
   115e8:	30c30c31 	.word	0x30c30c31
   115ec:	00011731 	.word	0x00011731
   115f0:	00024d7c 	.word	0x00024d7c
   115f4:	00024d78 	.word	0x00024d78

000115f8 <ticker_op_stop_cb>:
	if (status != TICKER_STATUS_SUCCESS) {
   115f8:	2800      	cmp	r0, #0
   115fa:	d132      	bne.n	11662 <ticker_op_stop_cb+0x6a>
{
   115fc:	b538      	push	{r3, r4, r5, lr}
   115fe:	460c      	mov	r4, r1
	mfy.param = &adv->lll;
   11600:	4d1f      	ldr	r5, [pc, #124]	; (11680 <ticker_op_stop_cb+0x88>)
	return hdr->ref;
   11602:	7c09      	ldrb	r1, [r1, #16]
   11604:	f104 031c 	add.w	r3, r4, #28
   11608:	60ab      	str	r3, [r5, #8]
	if (ull_ref_get(hdr)) {
   1160a:	f001 02ff 	and.w	r2, r1, #255	; 0xff
   1160e:	b1e1      	cbz	r1, 1164a <ticker_op_stop_cb+0x52>
		LL_ASSERT(!hdr->disabled_cb);
   11610:	6962      	ldr	r2, [r4, #20]
   11612:	b16a      	cbz	r2, 11630 <ticker_op_stop_cb+0x38>
   11614:	4a1b      	ldr	r2, [pc, #108]	; (11684 <ticker_op_stop_cb+0x8c>)
   11616:	491c      	ldr	r1, [pc, #112]	; (11688 <ticker_op_stop_cb+0x90>)
   11618:	481c      	ldr	r0, [pc, #112]	; (1168c <ticker_op_stop_cb+0x94>)
   1161a:	f240 7335 	movw	r3, #1845	; 0x735
   1161e:	f00d f97d 	bl	1e91c <printk>
   11622:	4040      	eors	r0, r0
   11624:	f380 8811 	msr	BASEPRI, r0
   11628:	f04f 0003 	mov.w	r0, #3
   1162c:	df02      	svc	2
   1162e:	68ab      	ldr	r3, [r5, #8]
		hdr->disabled_cb = disabled_cb;
   11630:	4917      	ldr	r1, [pc, #92]	; (11690 <ticker_op_stop_cb+0x98>)
		mfy.fp = lll_disable;
   11632:	4818      	ldr	r0, [pc, #96]	; (11694 <ticker_op_stop_cb+0x9c>)
		hdr->disabled_param = mfy.param;
   11634:	61a3      	str	r3, [r4, #24]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   11636:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   11638:	6161      	str	r1, [r4, #20]
		mfy.fp = lll_disable;
   1163a:	60e8      	str	r0, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   1163c:	4b10      	ldr	r3, [pc, #64]	; (11680 <ticker_op_stop_cb+0x88>)
   1163e:	4611      	mov	r1, r2
   11640:	2002      	movs	r0, #2
   11642:	f7fb fe21 	bl	d288 <mayfly_enqueue>
		LL_ASSERT(!ret);
   11646:	b968      	cbnz	r0, 11664 <ticker_op_stop_cb+0x6c>
}
   11648:	bd38      	pop	{r3, r4, r5, pc}
		mfy.fp = disabled_cb;
   1164a:	4b11      	ldr	r3, [pc, #68]	; (11690 <ticker_op_stop_cb+0x98>)
   1164c:	60eb      	str	r3, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   1164e:	2101      	movs	r1, #1
   11650:	462b      	mov	r3, r5
   11652:	2002      	movs	r0, #2
   11654:	f7fb fe18 	bl	d288 <mayfly_enqueue>
		LL_ASSERT(!ret);
   11658:	2800      	cmp	r0, #0
   1165a:	d0f5      	beq.n	11648 <ticker_op_stop_cb+0x50>
   1165c:	f240 7341 	movw	r3, #1857	; 0x741
   11660:	e002      	b.n	11668 <ticker_op_stop_cb+0x70>
   11662:	4770      	bx	lr
		LL_ASSERT(!ret);
   11664:	f240 733c 	movw	r3, #1852	; 0x73c
		LL_ASSERT(!ret);
   11668:	4a06      	ldr	r2, [pc, #24]	; (11684 <ticker_op_stop_cb+0x8c>)
   1166a:	490b      	ldr	r1, [pc, #44]	; (11698 <ticker_op_stop_cb+0xa0>)
   1166c:	4807      	ldr	r0, [pc, #28]	; (1168c <ticker_op_stop_cb+0x94>)
   1166e:	f00d f955 	bl	1e91c <printk>
   11672:	4040      	eors	r0, r0
   11674:	f380 8811 	msr	BASEPRI, r0
   11678:	f04f 0003 	mov.w	r0, #3
   1167c:	df02      	svc	2
}
   1167e:	bd38      	pop	{r3, r4, r5, pc}
   11680:	20000498 	.word	0x20000498
   11684:	00024d38 	.word	0x00024d38
   11688:	00024d98 	.word	0x00024d98
   1168c:	00024904 	.word	0x00024904
   11690:	0001169d 	.word	0x0001169d
   11694:	00017da9 	.word	0x00017da9
   11698:	00024c98 	.word	0x00024c98

0001169c <disabled_cb>:
{
   1169c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	adv = ((struct lll_hdr *)param)->parent;
   1169e:	6805      	ldr	r5, [r0, #0]
	LL_ASSERT(adv->link_cc_free);
   116a0:	6c2f      	ldr	r7, [r5, #64]	; 0x40
{
   116a2:	4606      	mov	r6, r0
	LL_ASSERT(adv->link_cc_free);
   116a4:	b1d7      	cbz	r7, 116dc <disabled_cb+0x40>
	LL_ASSERT(adv->node_rx_cc_free);
   116a6:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	adv->link_cc_free = NULL;
   116a8:	2300      	movs	r3, #0
   116aa:	642b      	str	r3, [r5, #64]	; 0x40
	LL_ASSERT(adv->node_rx_cc_free);
   116ac:	b34c      	cbz	r4, 11702 <disabled_cb+0x66>
	adv->node_rx_cc_free = NULL;
   116ae:	2100      	movs	r1, #0
	rx->hdr.handle = 0xffff;
   116b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   116b4:	2214      	movs	r2, #20
	adv->node_rx_cc_free = NULL;
   116b6:	6469      	str	r1, [r5, #68]	; 0x44
__ssp_bos_icheck3(memset, void *, int)
   116b8:	f104 001c 	add.w	r0, r4, #28
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   116bc:	7122      	strb	r2, [r4, #4]
	rx->hdr.handle = 0xffff;
   116be:	80e3      	strh	r3, [r4, #6]
   116c0:	221e      	movs	r2, #30
   116c2:	f012 faaa 	bl	23c1a <memset>
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
   116c6:	233c      	movs	r3, #60	; 0x3c
	rx->hdr.rx_ftr.param = param;
   116c8:	60a6      	str	r6, [r4, #8]
	ll_rx_put(link, rx);
   116ca:	4638      	mov	r0, r7
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
   116cc:	7723      	strb	r3, [r4, #28]
	ll_rx_put(link, rx);
   116ce:	4621      	mov	r1, r4
   116d0:	f7ff fc1a 	bl	10f08 <ll_rx_put>
}
   116d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_rx_sched();
   116d8:	f7ff bc20 	b.w	10f1c <ll_rx_sched>
	LL_ASSERT(adv->link_cc_free);
   116dc:	4a10      	ldr	r2, [pc, #64]	; (11720 <disabled_cb+0x84>)
   116de:	4911      	ldr	r1, [pc, #68]	; (11724 <disabled_cb+0x88>)
   116e0:	4811      	ldr	r0, [pc, #68]	; (11728 <disabled_cb+0x8c>)
   116e2:	f240 734e 	movw	r3, #1870	; 0x74e
   116e6:	f00d f919 	bl	1e91c <printk>
   116ea:	4040      	eors	r0, r0
   116ec:	f380 8811 	msr	BASEPRI, r0
   116f0:	f04f 0003 	mov.w	r0, #3
   116f4:	df02      	svc	2
	LL_ASSERT(adv->node_rx_cc_free);
   116f6:	6c6c      	ldr	r4, [r5, #68]	; 0x44
   116f8:	6c2f      	ldr	r7, [r5, #64]	; 0x40
	adv->link_cc_free = NULL;
   116fa:	2300      	movs	r3, #0
   116fc:	642b      	str	r3, [r5, #64]	; 0x40
	LL_ASSERT(adv->node_rx_cc_free);
   116fe:	2c00      	cmp	r4, #0
   11700:	d1d5      	bne.n	116ae <disabled_cb+0x12>
   11702:	4a07      	ldr	r2, [pc, #28]	; (11720 <disabled_cb+0x84>)
   11704:	4909      	ldr	r1, [pc, #36]	; (1172c <disabled_cb+0x90>)
   11706:	4808      	ldr	r0, [pc, #32]	; (11728 <disabled_cb+0x8c>)
   11708:	f240 7352 	movw	r3, #1874	; 0x752
   1170c:	f00d f906 	bl	1e91c <printk>
   11710:	4040      	eors	r0, r0
   11712:	f380 8811 	msr	BASEPRI, r0
   11716:	f04f 0003 	mov.w	r0, #3
   1171a:	df02      	svc	2
   1171c:	6c6c      	ldr	r4, [r5, #68]	; 0x44
   1171e:	e7c6      	b.n	116ae <disabled_cb+0x12>
   11720:	00024d38 	.word	0x00024d38
   11724:	00024dac 	.word	0x00024dac
   11728:	00024904 	.word	0x00024904
   1172c:	00024dc0 	.word	0x00024dc0

00011730 <ticker_op_update_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   11730:	b900      	cbnz	r0, 11734 <ticker_op_update_cb+0x4>
   11732:	4770      	bx	lr
{
   11734:	b510      	push	{r4, lr}
   11736:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   11738:	f7ff fc9c 	bl	11074 <ull_disable_mark_get>
   1173c:	4284      	cmp	r4, r0
   1173e:	d00c      	beq.n	1175a <ticker_op_update_cb+0x2a>
   11740:	4a06      	ldr	r2, [pc, #24]	; (1175c <ticker_op_update_cb+0x2c>)
   11742:	4907      	ldr	r1, [pc, #28]	; (11760 <ticker_op_update_cb+0x30>)
   11744:	4807      	ldr	r0, [pc, #28]	; (11764 <ticker_op_update_cb+0x34>)
   11746:	f240 7305 	movw	r3, #1797	; 0x705
   1174a:	f00d f8e7 	bl	1e91c <printk>
   1174e:	4040      	eors	r0, r0
   11750:	f380 8811 	msr	BASEPRI, r0
   11754:	f04f 0003 	mov.w	r0, #3
   11758:	df02      	svc	2
}
   1175a:	bd10      	pop	{r4, pc}
   1175c:	00024d38 	.word	0x00024d38
   11760:	00024dd8 	.word	0x00024dd8
   11764:	00024904 	.word	0x00024904

00011768 <ticker_stop_cb>:
{
   11768:	b530      	push	{r4, r5, lr}
   1176a:	b083      	sub	sp, #12
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   1176c:	4b19      	ldr	r3, [pc, #100]	; (117d4 <ticker_stop_cb+0x6c>)
{
   1176e:	9d06      	ldr	r5, [sp, #24]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   11770:	4a19      	ldr	r2, [pc, #100]	; (117d8 <ticker_stop_cb+0x70>)
   11772:	1aeb      	subs	r3, r5, r3
   11774:	089b      	lsrs	r3, r3, #2
   11776:	fba2 2303 	umull	r2, r3, r2, r3
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   1177a:	f413 7f7f 	tst.w	r3, #1020	; 0x3fc
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   1177e:	ea4f 0493 	mov.w	r4, r3, lsr #2
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   11782:	d119      	bne.n	117b8 <ticker_stop_cb+0x50>
			  TICKER_ID_ADV_BASE + handle,
   11784:	1ca2      	adds	r2, r4, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   11786:	4b15      	ldr	r3, [pc, #84]	; (117dc <ticker_stop_cb+0x74>)
   11788:	9500      	str	r5, [sp, #0]
   1178a:	b2d2      	uxtb	r2, r2
   1178c:	2101      	movs	r1, #1
   1178e:	2000      	movs	r0, #0
   11790:	f7fd f880 	bl	e894 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   11794:	f030 0302 	bics.w	r3, r0, #2
   11798:	d00c      	beq.n	117b4 <ticker_stop_cb+0x4c>
   1179a:	4a11      	ldr	r2, [pc, #68]	; (117e0 <ticker_stop_cb+0x78>)
   1179c:	4911      	ldr	r1, [pc, #68]	; (117e4 <ticker_stop_cb+0x7c>)
   1179e:	4812      	ldr	r0, [pc, #72]	; (117e8 <ticker_stop_cb+0x80>)
   117a0:	f240 7317 	movw	r3, #1815	; 0x717
   117a4:	f00d f8ba 	bl	1e91c <printk>
   117a8:	4040      	eors	r0, r0
   117aa:	f380 8811 	msr	BASEPRI, r0
   117ae:	f04f 0003 	mov.w	r0, #3
   117b2:	df02      	svc	2
}
   117b4:	b003      	add	sp, #12
   117b6:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   117b8:	4a09      	ldr	r2, [pc, #36]	; (117e0 <ticker_stop_cb+0x78>)
   117ba:	490c      	ldr	r1, [pc, #48]	; (117ec <ticker_stop_cb+0x84>)
   117bc:	480a      	ldr	r0, [pc, #40]	; (117e8 <ticker_stop_cb+0x80>)
   117be:	f240 7312 	movw	r3, #1810	; 0x712
   117c2:	f00d f8ab 	bl	1e91c <printk>
   117c6:	4040      	eors	r0, r0
   117c8:	f380 8811 	msr	BASEPRI, r0
   117cc:	f04f 0003 	mov.w	r0, #3
   117d0:	df02      	svc	2
   117d2:	e7d7      	b.n	11784 <ticker_stop_cb+0x1c>
   117d4:	20002238 	.word	0x20002238
   117d8:	30c30c31 	.word	0x30c30c31
   117dc:	000115f9 	.word	0x000115f9
   117e0:	00024d38 	.word	0x00024d38
   117e4:	00024d7c 	.word	0x00024d7c
   117e8:	00024904 	.word	0x00024904
   117ec:	00024e08 	.word	0x00024e08

000117f0 <init_reset>:
{
   117f0:	b538      	push	{r3, r4, r5, lr}
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   117f2:	4c15      	ldr	r4, [pc, #84]	; (11848 <init_reset+0x58>)
   117f4:	f104 0028 	add.w	r0, r4, #40	; 0x28
   117f8:	f006 fe74 	bl	184e4 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   117fc:	f104 0034 	add.w	r0, r4, #52	; 0x34
   11800:	f006 fe70 	bl	184e4 <lll_adv_data_init>
   11804:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
{
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
#if defined(CONFIG_BT_CTLR_PRIVACY)
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
#endif /* CONFIG_BT_CTLR_PRIVACY */
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
   11808:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   1180a:	4910      	ldr	r1, [pc, #64]	; (1184c <init_reset+0x5c>)
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   1180c:	f894 504a 	ldrb.w	r5, [r4, #74]	; 0x4a
   11810:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
   11814:	400b      	ands	r3, r1
   11816:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   11818:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1181c:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   11820:	f36f 0542 	bfc	r5, #1, #2
	pdu->len = BDADDR_SIZE;
   11824:	2206      	movs	r2, #6
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
   11826:	f043 030e 	orr.w	r3, r3, #14
	pdu->type = pdu_type;
   1182a:	2000      	movs	r0, #0
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
   1182c:	84a3      	strh	r3, [r4, #36]	; 0x24
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   1182e:	f884 504a 	strb.w	r5, [r4, #74]	; 0x4a
	pdu->len = BDADDR_SIZE;
   11832:	704a      	strb	r2, [r1, #1]
	pdu->type = pdu_type;
   11834:	7008      	strb	r0, [r1, #0]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   11836:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
   1183a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   1183e:	2104      	movs	r1, #4
   11840:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	pdu->len = BDADDR_SIZE;
   11842:	705a      	strb	r2, [r3, #1]
	pdu->type = pdu_type;
   11844:	7019      	strb	r1, [r3, #0]
}
   11846:	bd38      	pop	{r3, r4, r5, pc}
   11848:	20002238 	.word	0x20002238
   1184c:	fffffcf1 	.word	0xfffffcf1

00011850 <conn_release.constprop.0>:
static void conn_release(struct ll_adv_set *adv)
   11850:	b570      	push	{r4, r5, r6, lr}
	struct lll_conn *lll = adv->lll.conn;
   11852:	4c1b      	ldr	r4, [pc, #108]	; (118c0 <conn_release.constprop.0+0x70>)
   11854:	6a25      	ldr	r5, [r4, #32]
	LL_ASSERT(!lll->link_tx_free);
   11856:	6dab      	ldr	r3, [r5, #88]	; 0x58
   11858:	b163      	cbz	r3, 11874 <conn_release.constprop.0+0x24>
   1185a:	4a1a      	ldr	r2, [pc, #104]	; (118c4 <conn_release.constprop.0+0x74>)
   1185c:	491a      	ldr	r1, [pc, #104]	; (118c8 <conn_release.constprop.0+0x78>)
   1185e:	481b      	ldr	r0, [pc, #108]	; (118cc <conn_release.constprop.0+0x7c>)
   11860:	f240 737c 	movw	r3, #1916	; 0x77c
   11864:	f00d f85a 	bl	1e91c <printk>
   11868:	4040      	eors	r0, r0
   1186a:	f380 8811 	msr	BASEPRI, r0
   1186e:	f04f 0003 	mov.w	r0, #3
   11872:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
   11874:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   11878:	f105 0048 	add.w	r0, r5, #72	; 0x48
   1187c:	f7fb fc86 	bl	d18c <memq_deinit>
	LL_ASSERT(link);
   11880:	4606      	mov	r6, r0
   11882:	b170      	cbz	r0, 118a2 <conn_release.constprop.0+0x52>
	ll_conn_release(lll->hdr.parent);
   11884:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
   11886:	65ae      	str	r6, [r5, #88]	; 0x58
	ll_conn_release(lll->hdr.parent);
   11888:	f000 ffae 	bl	127e8 <ll_conn_release>
	adv->lll.conn = NULL;
   1188c:	2500      	movs	r5, #0
	ll_rx_release(adv->node_rx_cc_free);
   1188e:	6c60      	ldr	r0, [r4, #68]	; 0x44
	adv->lll.conn = NULL;
   11890:	6225      	str	r5, [r4, #32]
	ll_rx_release(adv->node_rx_cc_free);
   11892:	f7ff fb33 	bl	10efc <ll_rx_release>
	ll_rx_link_release(adv->link_cc_free);
   11896:	6c20      	ldr	r0, [r4, #64]	; 0x40
	adv->node_rx_cc_free = NULL;
   11898:	6465      	str	r5, [r4, #68]	; 0x44
	ll_rx_link_release(adv->link_cc_free);
   1189a:	f7ff fb23 	bl	10ee4 <ll_rx_link_release>
	adv->link_cc_free = NULL;
   1189e:	6425      	str	r5, [r4, #64]	; 0x40
}
   118a0:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
   118a2:	4a08      	ldr	r2, [pc, #32]	; (118c4 <conn_release.constprop.0+0x74>)
   118a4:	490a      	ldr	r1, [pc, #40]	; (118d0 <conn_release.constprop.0+0x80>)
   118a6:	4809      	ldr	r0, [pc, #36]	; (118cc <conn_release.constprop.0+0x7c>)
   118a8:	f240 737e 	movw	r3, #1918	; 0x77e
   118ac:	f00d f836 	bl	1e91c <printk>
   118b0:	4040      	eors	r0, r0
   118b2:	f380 8811 	msr	BASEPRI, r0
   118b6:	f04f 0003 	mov.w	r0, #3
   118ba:	df02      	svc	2
   118bc:	e7e2      	b.n	11884 <conn_release.constprop.0+0x34>
   118be:	bf00      	nop
   118c0:	20002238 	.word	0x20002238
   118c4:	00024d38 	.word	0x00024d38
   118c8:	00024e14 	.word	0x00024e14
   118cc:	00024904 	.word	0x00024904
   118d0:	00024e9c 	.word	0x00024e9c

000118d4 <ll_adv_params_set>:
{
   118d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   118d8:	4d4a      	ldr	r5, [pc, #296]	; (11a04 <ll_adv_params_set+0x130>)
	if (!adv || adv->is_enabled) {
   118da:	4c4b      	ldr	r4, [pc, #300]	; (11a08 <ll_adv_params_set+0x134>)
{
   118dc:	4686      	mov	lr, r0
   118de:	460e      	mov	r6, r1
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   118e0:	e895 0003 	ldmia.w	r5, {r0, r1}
{
   118e4:	b083      	sub	sp, #12
	if (!adv || adv->is_enabled) {
   118e6:	f894 804a 	ldrb.w	r8, [r4, #74]	; 0x4a
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   118ea:	9000      	str	r0, [sp, #0]
	if (!adv || adv->is_enabled) {
   118ec:	f018 0001 	ands.w	r0, r8, #1
{
   118f0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   118f2:	f89d c02c 	ldrb.w	ip, [sp, #44]	; 0x2c
   118f6:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   118fa:	f88d 1004 	strb.w	r1, [sp, #4]
	if (!adv || adv->is_enabled) {
   118fe:	d17c      	bne.n	119fa <ll_adv_params_set+0x126>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   11900:	f894 9029 	ldrb.w	r9, [r4, #41]	; 0x29
	adv->lll.chan_map = chan_map;
   11904:	f8b4 8024 	ldrh.w	r8, [r4, #36]	; 0x24
   11908:	eb04 0989 	add.w	r9, r4, r9, lsl #2
	pdu->type = pdu_adv_type[adv_type];
   1190c:	a902      	add	r1, sp, #8
	adv->lll.chan_map = chan_map;
   1190e:	f00c 0c07 	and.w	ip, ip, #7
		adv->interval = 0;
   11912:	2e01      	cmp	r6, #1
	pdu->type = pdu_adv_type[adv_type];
   11914:	4431      	add	r1, r6
	adv->lll.chan_map = chan_map;
   11916:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   1191a:	f8d9 602c 	ldr.w	r6, [r9, #44]	; 0x2c
	pdu->type = pdu_adv_type[adv_type];
   1191e:	f811 9c08 	ldrb.w	r9, [r1, #-8]
   11922:	7831      	ldrb	r1, [r6, #0]
	adv->lll.chan_map = chan_map;
   11924:	f005 0503 	and.w	r5, r5, #3
   11928:	ea4c 2505 	orr.w	r5, ip, r5, lsl #8
   1192c:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 11a0c <ll_adv_params_set+0x138>
   11930:	ea08 080c 	and.w	r8, r8, ip
	adv->own_addr_type = own_addr_type;
   11934:	f894 c04a 	ldrb.w	ip, [r4, #74]	; 0x4a
		adv->interval = 0;
   11938:	bf08      	it	eq
   1193a:	f04f 0e00 	moveq.w	lr, #0
	pdu->type = pdu_adv_type[adv_type];
   1193e:	f021 011f 	bic.w	r1, r1, #31
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   11942:	f019 0f0e 	tst.w	r9, #14
	pdu->type = pdu_adv_type[adv_type];
   11946:	f009 090f 	and.w	r9, r9, #15
   1194a:	f8a4 e048 	strh.w	lr, [r4, #72]	; 0x48
	adv->own_addr_type = own_addr_type;
   1194e:	f362 0c42 	bfi	ip, r2, #1, #2
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   11952:	bf0c      	ite	eq
   11954:	f04f 0e01 	moveq.w	lr, #1
   11958:	f04f 0e00 	movne.w	lr, #0
   1195c:	ea49 0101 	orr.w	r1, r9, r1
	adv->lll.chan_map = chan_map;
   11960:	ea45 0508 	orr.w	r5, r5, r8
   11964:	f36e 1145 	bfi	r1, lr, #5, #1
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   11968:	f01c 0f04 	tst.w	ip, #4
	adv->lll.chan_map = chan_map;
   1196c:	84a5      	strh	r5, [r4, #36]	; 0x24
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   1196e:	7031      	strb	r1, [r6, #0]
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   11970:	fa5f f58c 	uxtb.w	r5, ip
	adv->own_addr_type = own_addr_type;
   11974:	f884 c04a 	strb.w	ip, [r4, #74]	; 0x4a
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   11978:	d00a      	beq.n	11990 <ll_adv_params_set+0xbc>
		adv->peer_addr_type = direct_addr_type;
   1197a:	4629      	mov	r1, r5
   1197c:	f363 01c3 	bfi	r1, r3, #3, #1
   11980:	f884 104a 	strb.w	r1, [r4, #74]	; 0x4a
		memcpy(&adv->peer_addr, direct_addr, BDADDR_SIZE);
   11984:	6839      	ldr	r1, [r7, #0]
   11986:	f8c4 104b 	str.w	r1, [r4, #75]	; 0x4b
   1198a:	88b9      	ldrh	r1, [r7, #4]
   1198c:	f8a4 104f 	strh.w	r1, [r4, #79]	; 0x4f
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   11990:	7831      	ldrb	r1, [r6, #0]
   11992:	f001 050f 	and.w	r5, r1, #15
   11996:	2d01      	cmp	r5, #1
   11998:	f002 0c01 	and.w	ip, r2, #1
   1199c:	d01f      	beq.n	119de <ll_adv_params_set+0x10a>
	} else if (pdu->len == 0) {
   1199e:	7873      	ldrb	r3, [r6, #1]
		pdu->tx_addr = own_addr_type & 0x1;
   119a0:	f36c 1186 	bfi	r1, ip, #6, #1
	} else if (pdu->len == 0) {
   119a4:	b1ab      	cbz	r3, 119d2 <ll_adv_params_set+0xfe>
		pdu->rx_addr = 0;
   119a6:	f36f 11c7 	bfc	r1, #7, #1
   119aa:	7031      	strb	r1, [r6, #0]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   119ac:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
   119b0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   119b4:	0192      	lsls	r2, r2, #6
   119b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   119b8:	f002 0240 	and.w	r2, r2, #64	; 0x40
		if (pdu->len == 0) {
   119bc:	7859      	ldrb	r1, [r3, #1]
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   119be:	f042 0204 	orr.w	r2, r2, #4
   119c2:	701a      	strb	r2, [r3, #0]
		if (pdu->len == 0) {
   119c4:	b911      	cbnz	r1, 119cc <ll_adv_params_set+0xf8>
			pdu->len = BDADDR_SIZE;
   119c6:	2206      	movs	r2, #6
	return 0;
   119c8:	4608      	mov	r0, r1
			pdu->len = BDADDR_SIZE;
   119ca:	705a      	strb	r2, [r3, #1]
}
   119cc:	b003      	add	sp, #12
   119ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pdu->rx_addr = 0;
   119d2:	f363 11c7 	bfi	r1, r3, #7, #1
		pdu->len = BDADDR_SIZE;
   119d6:	2306      	movs	r3, #6
		pdu->rx_addr = 0;
   119d8:	7031      	strb	r1, [r6, #0]
		pdu->len = BDADDR_SIZE;
   119da:	7073      	strb	r3, [r6, #1]
   119dc:	e7e6      	b.n	119ac <ll_adv_params_set+0xd8>
		pdu->rx_addr = direct_addr_type;
   119de:	4635      	mov	r5, r6
		pdu->tx_addr = own_addr_type & 0x1;
   119e0:	f36c 1186 	bfi	r1, ip, #6, #1
		pdu->rx_addr = direct_addr_type;
   119e4:	f363 11c7 	bfi	r1, r3, #7, #1
   119e8:	f805 1b08 	strb.w	r1, [r5], #8
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   119ec:	683b      	ldr	r3, [r7, #0]
   119ee:	60b3      	str	r3, [r6, #8]
   119f0:	88bb      	ldrh	r3, [r7, #4]
   119f2:	80ab      	strh	r3, [r5, #4]
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   119f4:	230c      	movs	r3, #12
   119f6:	7073      	strb	r3, [r6, #1]
   119f8:	e7d8      	b.n	119ac <ll_adv_params_set+0xd8>
		return BT_HCI_ERR_CMD_DISALLOWED;
   119fa:	200c      	movs	r0, #12
}
   119fc:	b003      	add	sp, #12
   119fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11a02:	bf00      	nop
   11a04:	00024128 	.word	0x00024128
   11a08:	20002238 	.word	0x20002238
   11a0c:	fffffcf1 	.word	0xfffffcf1

00011a10 <ull_adv_init>:
	err = init_reset();
   11a10:	f7ff beee 	b.w	117f0 <init_reset>

00011a14 <ull_adv_reset>:
{
   11a14:	b530      	push	{r4, r5, lr}
	if (!adv || !adv->is_enabled) {
   11a16:	4c4c      	ldr	r4, [pc, #304]	; (11b48 <ull_adv_reset+0x134>)
   11a18:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
   11a1c:	07d9      	lsls	r1, r3, #31
{
   11a1e:	b085      	sub	sp, #20
	if (!adv || !adv->is_enabled) {
   11a20:	d551      	bpl.n	11ac6 <ull_adv_reset+0xb2>
	if (adv->lll.conn) {
   11a22:	6a23      	ldr	r3, [r4, #32]
   11a24:	b153      	cbz	r3, 11a3c <ull_adv_reset+0x28>
		adv->lll.conn->slave.cancelled = 1U;
   11a26:	f893 2020 	ldrb.w	r2, [r3, #32]
   11a2a:	f042 0202 	orr.w	r2, r2, #2
   11a2e:	f883 2020 	strb.w	r2, [r3, #32]
		if (unlikely(adv->lll.conn->slave.initiated)) {
   11a32:	6a23      	ldr	r3, [r4, #32]
   11a34:	f893 3020 	ldrb.w	r3, [r3, #32]
   11a38:	07da      	lsls	r2, r3, #31
   11a3a:	d444      	bmi.n	11ac6 <ull_adv_reset+0xb2>
	mark = ull_disable_mark(adv);
   11a3c:	4842      	ldr	r0, [pc, #264]	; (11b48 <ull_adv_reset+0x134>)
   11a3e:	f7ff fb01 	bl	11044 <ull_disable_mark>
	LL_ASSERT(mark == adv);
   11a42:	4284      	cmp	r4, r0
   11a44:	d00c      	beq.n	11a60 <ull_adv_reset+0x4c>
   11a46:	4a41      	ldr	r2, [pc, #260]	; (11b4c <ull_adv_reset+0x138>)
   11a48:	4941      	ldr	r1, [pc, #260]	; (11b50 <ull_adv_reset+0x13c>)
   11a4a:	4842      	ldr	r0, [pc, #264]	; (11b54 <ull_adv_reset+0x140>)
   11a4c:	f240 73df 	movw	r3, #2015	; 0x7df
   11a50:	f00c ff64 	bl	1e91c <printk>
   11a54:	4040      	eors	r0, r0
   11a56:	f380 8811 	msr	BASEPRI, r0
   11a5a:	f04f 0003 	mov.w	r0, #3
   11a5e:	df02      	svc	2
	if (adv->lll.is_hdcd) {
   11a60:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   11a64:	07db      	lsls	r3, r3, #31
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   11a66:	ad03      	add	r5, sp, #12
	if (adv->lll.is_hdcd) {
   11a68:	d430      	bmi.n	11acc <ull_adv_reset+0xb8>
	ret_cb = TICKER_STATUS_BUSY;
   11a6a:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   11a6c:	2103      	movs	r1, #3
   11a6e:	4b3a      	ldr	r3, [pc, #232]	; (11b58 <ull_adv_reset+0x144>)
   11a70:	9500      	str	r5, [sp, #0]
   11a72:	2000      	movs	r0, #0
	ret_cb = TICKER_STATUS_BUSY;
   11a74:	9203      	str	r2, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   11a76:	f7fc ff0d 	bl	e894 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   11a7a:	4629      	mov	r1, r5
   11a7c:	f7ff faba 	bl	10ff4 <ull_ticker_status_take>
	if (ret) {
   11a80:	2800      	cmp	r0, #0
   11a82:	d14c      	bne.n	11b1e <ull_adv_reset+0x10a>
	ret = ull_disable(&adv->lll);
   11a84:	4835      	ldr	r0, [pc, #212]	; (11b5c <ull_adv_reset+0x148>)
   11a86:	f7ff fb19 	bl	110bc <ull_disable>
	LL_ASSERT(!ret);
   11a8a:	2800      	cmp	r0, #0
   11a8c:	d134      	bne.n	11af8 <ull_adv_reset+0xe4>
	mark = ull_disable_unmark(adv);
   11a8e:	482e      	ldr	r0, [pc, #184]	; (11b48 <ull_adv_reset+0x134>)
   11a90:	f7ff fae4 	bl	1105c <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   11a94:	4284      	cmp	r4, r0
   11a96:	d00c      	beq.n	11ab2 <ull_adv_reset+0x9e>
   11a98:	4a2c      	ldr	r2, [pc, #176]	; (11b4c <ull_adv_reset+0x138>)
   11a9a:	492d      	ldr	r1, [pc, #180]	; (11b50 <ull_adv_reset+0x13c>)
   11a9c:	482d      	ldr	r0, [pc, #180]	; (11b54 <ull_adv_reset+0x140>)
   11a9e:	f640 0301 	movw	r3, #2049	; 0x801
   11aa2:	f00c ff3b 	bl	1e91c <printk>
   11aa6:	4040      	eors	r0, r0
   11aa8:	f380 8811 	msr	BASEPRI, r0
   11aac:	f04f 0003 	mov.w	r0, #3
   11ab0:	df02      	svc	2
	if (adv->lll.conn) {
   11ab2:	6a23      	ldr	r3, [r4, #32]
   11ab4:	b10b      	cbz	r3, 11aba <ull_adv_reset+0xa6>
		conn_release(adv);
   11ab6:	f7ff fecb 	bl	11850 <conn_release.constprop.0>
	adv->is_enabled = 0U;
   11aba:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
   11abe:	f36f 0300 	bfc	r3, #0, #1
   11ac2:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
}
   11ac6:	2000      	movs	r0, #0
   11ac8:	b005      	add	sp, #20
   11aca:	bd30      	pop	{r4, r5, pc}
		ret_cb = TICKER_STATUS_BUSY;
   11acc:	2202      	movs	r2, #2
   11ace:	9203      	str	r2, [sp, #12]
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   11ad0:	2103      	movs	r1, #3
   11ad2:	4b21      	ldr	r3, [pc, #132]	; (11b58 <ull_adv_reset+0x144>)
   11ad4:	9500      	str	r5, [sp, #0]
   11ad6:	2201      	movs	r2, #1
   11ad8:	2000      	movs	r0, #0
   11ada:	f7fc fedb 	bl	e894 <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
   11ade:	4629      	mov	r1, r5
   11ae0:	f7ff fa88 	bl	10ff4 <ull_ticker_status_take>
		if (ret) {
   11ae4:	2800      	cmp	r0, #0
   11ae6:	d0c0      	beq.n	11a6a <ull_adv_reset+0x56>
			mark = ull_disable_unmark(adv);
   11ae8:	4817      	ldr	r0, [pc, #92]	; (11b48 <ull_adv_reset+0x134>)
   11aea:	f7ff fab7 	bl	1105c <ull_disable_unmark>
			LL_ASSERT(mark == adv);
   11aee:	4284      	cmp	r4, r0
   11af0:	d0e9      	beq.n	11ac6 <ull_adv_reset+0xb2>
   11af2:	f240 73ea 	movw	r3, #2026	; 0x7ea
   11af6:	e019      	b.n	11b2c <ull_adv_reset+0x118>
	LL_ASSERT(!ret);
   11af8:	4a14      	ldr	r2, [pc, #80]	; (11b4c <ull_adv_reset+0x138>)
   11afa:	4919      	ldr	r1, [pc, #100]	; (11b60 <ull_adv_reset+0x14c>)
   11afc:	4815      	ldr	r0, [pc, #84]	; (11b54 <ull_adv_reset+0x140>)
   11afe:	f240 73fe 	movw	r3, #2046	; 0x7fe
   11b02:	f00c ff0b 	bl	1e91c <printk>
   11b06:	4040      	eors	r0, r0
   11b08:	f380 8811 	msr	BASEPRI, r0
   11b0c:	f04f 0003 	mov.w	r0, #3
   11b10:	df02      	svc	2
	mark = ull_disable_unmark(adv);
   11b12:	480d      	ldr	r0, [pc, #52]	; (11b48 <ull_adv_reset+0x134>)
   11b14:	f7ff faa2 	bl	1105c <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   11b18:	4284      	cmp	r4, r0
   11b1a:	d1bd      	bne.n	11a98 <ull_adv_reset+0x84>
   11b1c:	e7c9      	b.n	11ab2 <ull_adv_reset+0x9e>
		mark = ull_disable_unmark(adv);
   11b1e:	480a      	ldr	r0, [pc, #40]	; (11b48 <ull_adv_reset+0x134>)
   11b20:	f7ff fa9c 	bl	1105c <ull_disable_unmark>
		LL_ASSERT(mark == adv);
   11b24:	4284      	cmp	r4, r0
   11b26:	d0ce      	beq.n	11ac6 <ull_adv_reset+0xb2>
   11b28:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
   11b2c:	4a07      	ldr	r2, [pc, #28]	; (11b4c <ull_adv_reset+0x138>)
   11b2e:	4908      	ldr	r1, [pc, #32]	; (11b50 <ull_adv_reset+0x13c>)
   11b30:	4808      	ldr	r0, [pc, #32]	; (11b54 <ull_adv_reset+0x140>)
   11b32:	f00c fef3 	bl	1e91c <printk>
   11b36:	4040      	eors	r0, r0
   11b38:	f380 8811 	msr	BASEPRI, r0
   11b3c:	f04f 0003 	mov.w	r0, #3
   11b40:	df02      	svc	2
}
   11b42:	2000      	movs	r0, #0
   11b44:	b005      	add	sp, #20
   11b46:	bd30      	pop	{r4, r5, pc}
   11b48:	20002238 	.word	0x20002238
   11b4c:	00024d38 	.word	0x00024d38
   11b50:	00024e28 	.word	0x00024e28
   11b54:	00024904 	.word	0x00024904
   11b58:	0000ff1d 	.word	0x0000ff1d
   11b5c:	20002254 	.word	0x20002254
   11b60:	00024c98 	.word	0x00024c98

00011b64 <ull_adv_reset_finalize>:
{
   11b64:	b510      	push	{r4, lr}
		lll_adv_data_reset(&lll->adv_data);
   11b66:	4c06      	ldr	r4, [pc, #24]	; (11b80 <ull_adv_reset_finalize+0x1c>)
   11b68:	f104 0028 	add.w	r0, r4, #40	; 0x28
   11b6c:	f006 fcca 	bl	18504 <lll_adv_data_reset>
		lll_adv_data_reset(&lll->scan_rsp);
   11b70:	f104 0034 	add.w	r0, r4, #52	; 0x34
   11b74:	f006 fcc6 	bl	18504 <lll_adv_data_reset>
}
   11b78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = init_reset();
   11b7c:	f7ff be38 	b.w	117f0 <init_reset>
   11b80:	20002238 	.word	0x20002238

00011b84 <ull_adv_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   11b84:	4a04      	ldr	r2, [pc, #16]	; (11b98 <ull_adv_handle_get+0x14>)
   11b86:	4b05      	ldr	r3, [pc, #20]	; (11b9c <ull_adv_handle_get+0x18>)
   11b88:	1a80      	subs	r0, r0, r2
   11b8a:	0880      	lsrs	r0, r0, #2
   11b8c:	fba3 3000 	umull	r3, r0, r3, r0
}
   11b90:	f3c0 008f 	ubfx	r0, r0, #2, #16
   11b94:	4770      	bx	lr
   11b96:	bf00      	nop
   11b98:	20002238 	.word	0x20002238
   11b9c:	30c30c31 	.word	0x30c30c31

00011ba0 <ull_adv_lll_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   11ba0:	4a04      	ldr	r2, [pc, #16]	; (11bb4 <ull_adv_lll_handle_get+0x14>)
   11ba2:	6800      	ldr	r0, [r0, #0]
   11ba4:	4b04      	ldr	r3, [pc, #16]	; (11bb8 <ull_adv_lll_handle_get+0x18>)
   11ba6:	1a80      	subs	r0, r0, r2
   11ba8:	0880      	lsrs	r0, r0, #2
   11baa:	fba3 3000 	umull	r3, r0, r3, r0
}
   11bae:	f3c0 008f 	ubfx	r0, r0, #2, #16
   11bb2:	4770      	bx	lr
   11bb4:	20002238 	.word	0x20002238
   11bb8:	30c30c31 	.word	0x30c30c31

00011bbc <ull_adv_is_enabled_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   11bbc:	b938      	cbnz	r0, 11bce <ull_adv_is_enabled_get+0x12>
	if (!adv || !adv->is_enabled) {
   11bbe:	4805      	ldr	r0, [pc, #20]	; (11bd4 <ull_adv_is_enabled_get+0x18>)
   11bc0:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
	return &ll_adv[handle];
   11bc4:	f013 0f01 	tst.w	r3, #1
   11bc8:	bf08      	it	eq
   11bca:	2000      	moveq	r0, #0
   11bcc:	4770      	bx	lr
		return NULL;
   11bce:	2000      	movs	r0, #0
}
   11bd0:	4770      	bx	lr
   11bd2:	bf00      	nop
   11bd4:	20002238 	.word	0x20002238

00011bd8 <ull_adv_is_enabled>:
	if (handle >= BT_CTLR_ADV_SET) {
   11bd8:	b928      	cbnz	r0, 11be6 <ull_adv_is_enabled+0xe>
	if (!adv || !adv->is_enabled) {
   11bda:	4b04      	ldr	r3, [pc, #16]	; (11bec <ull_adv_is_enabled+0x14>)
   11bdc:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
   11be0:	f000 0001 	and.w	r0, r0, #1
   11be4:	4770      	bx	lr
   11be6:	2000      	movs	r0, #0
}
   11be8:	4770      	bx	lr
   11bea:	bf00      	nop
   11bec:	20002238 	.word	0x20002238

00011bf0 <ull_adv_filter_pol_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   11bf0:	b950      	cbnz	r0, 11c08 <ull_adv_filter_pol_get+0x18>
	if (!adv || !adv->is_enabled) {
   11bf2:	4b06      	ldr	r3, [pc, #24]	; (11c0c <ull_adv_filter_pol_get+0x1c>)
   11bf4:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
   11bf8:	f010 0001 	ands.w	r0, r0, #1
   11bfc:	d005      	beq.n	11c0a <ull_adv_filter_pol_get+0x1a>
	return adv->lll.filter_policy;
   11bfe:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
   11c02:	f000 0003 	and.w	r0, r0, #3
   11c06:	4770      	bx	lr
		return 0;
   11c08:	2000      	movs	r0, #0
}
   11c0a:	4770      	bx	lr
   11c0c:	20002238 	.word	0x20002238

00011c10 <ull_adv_data_set>:
{
   11c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   11c14:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   11c18:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   11c1c:	b082      	sub	sp, #8
   11c1e:	6ade      	ldr	r6, [r3, #44]	; 0x2c
	if (prev->type == PDU_ADV_TYPE_DIRECT_IND) {
   11c20:	7833      	ldrb	r3, [r6, #0]
   11c22:	f003 030f 	and.w	r3, r3, #15
   11c26:	2b01      	cmp	r3, #1
   11c28:	d034      	beq.n	11c94 <ull_adv_data_set+0x84>
	if (len > PDU_AC_DATA_SIZE_MAX) {
   11c2a:	291f      	cmp	r1, #31
   11c2c:	460d      	mov	r5, r1
   11c2e:	d82d      	bhi.n	11c8c <ull_adv_data_set+0x7c>
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   11c30:	4604      	mov	r4, r0
   11c32:	f10d 0107 	add.w	r1, sp, #7
   11c36:	3028      	adds	r0, #40	; 0x28
   11c38:	4690      	mov	r8, r2
   11c3a:	f006 fc69 	bl	18510 <lll_adv_pdu_alloc>
		pdu->chan_sel = prev->chan_sel;
   11c3e:	7832      	ldrb	r2, [r6, #0]
   11c40:	f3c2 1140 	ubfx	r1, r2, #5, #1
	pdu->type = prev->type;
   11c44:	f3c2 0303 	ubfx	r3, r2, #0, #4
   11c48:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
	pdu->tx_addr = prev->tx_addr;
   11c4c:	f3c2 1180 	ubfx	r1, r2, #6, #1
	pdu->type = prev->type;
   11c50:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
   11c54:	f002 0280 	and.w	r2, r2, #128	; 0x80
   11c58:	4601      	mov	r1, r0
   11c5a:	4313      	orrs	r3, r2
   11c5c:	f801 3b02 	strb.w	r3, [r1], #2
   11c60:	f856 3f02 	ldr.w	r3, [r6, #2]!
   11c64:	f8c0 3002 	str.w	r3, [r0, #2]
   11c68:	88b3      	ldrh	r3, [r6, #4]
   11c6a:	808b      	strh	r3, [r1, #4]
   11c6c:	4607      	mov	r7, r0
   11c6e:	462a      	mov	r2, r5
   11c70:	4641      	mov	r1, r8
   11c72:	3008      	adds	r0, #8
   11c74:	f011 ffc3 	bl	23bfe <memcpy>
	pdu->last = idx;
   11c78:	f89d 3007 	ldrb.w	r3, [sp, #7]
	pdu->len = BDADDR_SIZE + len;
   11c7c:	3506      	adds	r5, #6
	return 0;
   11c7e:	2000      	movs	r0, #0
	pdu->len = BDADDR_SIZE + len;
   11c80:	707d      	strb	r5, [r7, #1]
   11c82:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
   11c86:	b002      	add	sp, #8
   11c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_INVALID_PARAM;
   11c8c:	2012      	movs	r0, #18
}
   11c8e:	b002      	add	sp, #8
   11c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 0;
   11c94:	2000      	movs	r0, #0
}
   11c96:	b002      	add	sp, #8
   11c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00011c9c <ll_adv_data_set>:
{
   11c9c:	460a      	mov	r2, r1
	return ull_adv_data_set(adv, len, data);
   11c9e:	4601      	mov	r1, r0
   11ca0:	4801      	ldr	r0, [pc, #4]	; (11ca8 <ll_adv_data_set+0xc>)
   11ca2:	f7ff bfb5 	b.w	11c10 <ull_adv_data_set>
   11ca6:	bf00      	nop
   11ca8:	20002238 	.word	0x20002238

00011cac <ull_scan_rsp_set>:
{
   11cac:	b5f0      	push	{r4, r5, r6, r7, lr}
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   11cae:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
   11cb2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   11cb6:	b083      	sub	sp, #12
   11cb8:	6b9d      	ldr	r5, [r3, #56]	; 0x38
   11cba:	460e      	mov	r6, r1
   11cbc:	4604      	mov	r4, r0
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
   11cbe:	f10d 0107 	add.w	r1, sp, #7
   11cc2:	3034      	adds	r0, #52	; 0x34
   11cc4:	4617      	mov	r7, r2
   11cc6:	f006 fc23 	bl	18510 <lll_adv_pdu_alloc>
	pdu->tx_addr = prev->tx_addr;
   11cca:	782b      	ldrb	r3, [r5, #0]
   11ccc:	f3c3 1380 	ubfx	r3, r3, #6, #1
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   11cd0:	019b      	lsls	r3, r3, #6
	pdu->len = BDADDR_SIZE + len;
   11cd2:	1db2      	adds	r2, r6, #6
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   11cd4:	f043 0304 	orr.w	r3, r3, #4
	pdu->len = BDADDR_SIZE + len;
   11cd8:	7042      	strb	r2, [r0, #1]
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   11cda:	7003      	strb	r3, [r0, #0]
   11cdc:	f855 3f02 	ldr.w	r3, [r5, #2]!
   11ce0:	f8c0 3002 	str.w	r3, [r0, #2]
   11ce4:	88ab      	ldrh	r3, [r5, #4]
   11ce6:	80c3      	strh	r3, [r0, #6]
   11ce8:	4639      	mov	r1, r7
   11cea:	4632      	mov	r2, r6
   11cec:	3008      	adds	r0, #8
   11cee:	f011 ff86 	bl	23bfe <memcpy>
	pdu->last = idx;
   11cf2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11cf6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
   11cfa:	2000      	movs	r0, #0
   11cfc:	b003      	add	sp, #12
   11cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}

00011d00 <ll_adv_scan_rsp_set>:
{
   11d00:	460a      	mov	r2, r1
	return ull_scan_rsp_set(adv, len, data);
   11d02:	4601      	mov	r1, r0
   11d04:	4801      	ldr	r0, [pc, #4]	; (11d0c <ll_adv_scan_rsp_set+0xc>)
   11d06:	f7ff bfd1 	b.w	11cac <ull_scan_rsp_set>
   11d0a:	bf00      	nop
   11d0c:	20002238 	.word	0x20002238

00011d10 <ull_adv_pdu_update_addrs>:
{
   11d10:	b570      	push	{r4, r5, r6, lr}
   11d12:	460c      	mov	r4, r1
   11d14:	4605      	mov	r5, r0
	const uint8_t *rpa = ull_filter_adva_get(adv);
   11d16:	f005 fa7b 	bl	17210 <ull_filter_adva_get>
			own_addr = ll_addr_get(pdu->tx_addr, NULL);
   11d1a:	7823      	ldrb	r3, [r4, #0]
	if (!rpa || IS_ENABLED(CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN)) {
   11d1c:	b308      	cbz	r0, 11d62 <ull_adv_pdu_update_addrs+0x52>
		pdu->tx_addr = 1;
   11d1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11d22:	7023      	strb	r3, [r4, #0]
	if ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   11d24:	7823      	ldrb	r3, [r4, #0]
   11d26:	6802      	ldr	r2, [r0, #0]
   11d28:	f8c4 2002 	str.w	r2, [r4, #2]
   11d2c:	f003 030f 	and.w	r3, r3, #15
   11d30:	8882      	ldrh	r2, [r0, #4]
   11d32:	80e2      	strh	r2, [r4, #6]
   11d34:	2b01      	cmp	r3, #1
	return pdu->adv_ind.addr;
   11d36:	f104 0602 	add.w	r6, r4, #2
	if ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   11d3a:	d001      	beq.n	11d40 <ull_adv_pdu_update_addrs+0x30>
}
   11d3c:	4630      	mov	r0, r6
   11d3e:	bd70      	pop	{r4, r5, r6, pc}
	rx_addr = ull_filter_tgta_get(adv);
   11d40:	4628      	mov	r0, r5
   11d42:	f005 fa93 	bl	1726c <ull_filter_tgta_get>
	if (rx_addr) {
   11d46:	2800      	cmp	r0, #0
   11d48:	d0f8      	beq.n	11d3c <ull_adv_pdu_update_addrs+0x2c>
		pdu->rx_addr = 1;
   11d4a:	7822      	ldrb	r2, [r4, #0]
   11d4c:	4623      	mov	r3, r4
   11d4e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   11d52:	f803 2b08 	strb.w	r2, [r3], #8
   11d56:	6802      	ldr	r2, [r0, #0]
   11d58:	60a2      	str	r2, [r4, #8]
   11d5a:	8882      	ldrh	r2, [r0, #4]
   11d5c:	809a      	strh	r2, [r3, #4]
}
   11d5e:	4630      	mov	r0, r6
   11d60:	bd70      	pop	{r4, r5, r6, pc}
			own_addr = ll_addr_get(pdu->tx_addr, NULL);
   11d62:	4601      	mov	r1, r0
   11d64:	f3c3 1080 	ubfx	r0, r3, #6, #1
   11d68:	f7fc fddc 	bl	e924 <ll_addr_get>
	if (rpa) {
   11d6c:	e7da      	b.n	11d24 <ull_adv_pdu_update_addrs+0x14>
   11d6e:	bf00      	nop

00011d70 <tx_ull_dequeue>:
{
   11d70:	b410      	push	{r4}
   11d72:	e9d0 2471 	ldrd	r2, r4, [r0, #452]	; 0x1c4
   11d76:	4603      	mov	r3, r0
   11d78:	4608      	mov	r0, r1
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   11d7a:	b164      	cbz	r4, 11d96 <tx_ull_dequeue+0x26>
	if (conn->tx_head == conn->tx_ctrl) {
   11d7c:	4294      	cmp	r4, r2
   11d7e:	d027      	beq.n	11dd0 <tx_ull_dequeue+0x60>
		if (conn->tx_head == conn->tx_data) {
   11d80:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
   11d84:	4291      	cmp	r1, r2
   11d86:	d018      	beq.n	11dba <tx_ull_dequeue+0x4a>
		conn->tx_head = conn->tx_head->next;
   11d88:	6812      	ldr	r2, [r2, #0]
   11d8a:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
		tx->next = NULL;
   11d8e:	2300      	movs	r3, #0
}
   11d90:	bc10      	pop	{r4}
		tx->next = NULL;
   11d92:	6003      	str	r3, [r0, #0]
}
   11d94:	4770      	bx	lr
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   11d96:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
   11d9a:	4291      	cmp	r1, r2
   11d9c:	d023      	beq.n	11de6 <tx_ull_dequeue+0x76>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   11d9e:	7911      	ldrb	r1, [r2, #4]
   11da0:	f001 0103 	and.w	r1, r1, #3
   11da4:	2903      	cmp	r1, #3
   11da6:	d00d      	beq.n	11dc4 <tx_ull_dequeue+0x54>
		conn->tx_head = conn->tx_head->next;
   11da8:	6812      	ldr	r2, [r2, #0]
   11daa:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
			conn->tx_ctrl = NULL;
   11dae:	2200      	movs	r2, #0
			conn->tx_ctrl_last = NULL;
   11db0:	e9c3 2272 	strd	r2, r2, [r3, #456]	; 0x1c8
}
   11db4:	bc10      	pop	{r4}
		tx->next = tx;
   11db6:	6000      	str	r0, [r0, #0]
}
   11db8:	4770      	bx	lr
   11dba:	4611      	mov	r1, r2
			conn->tx_data = conn->tx_data->next;
   11dbc:	6809      	ldr	r1, [r1, #0]
   11dbe:	f8c3 11d0 	str.w	r1, [r3, #464]	; 0x1d0
   11dc2:	e7e1      	b.n	11d88 <tx_ull_dequeue+0x18>
	    ((pdu_data_tx->llctrl.opcode !=
   11dc4:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   11dc6:	2903      	cmp	r1, #3
   11dc8:	d0de      	beq.n	11d88 <tx_ull_dequeue+0x18>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   11dca:	290a      	cmp	r1, #10
   11dcc:	d1ec      	bne.n	11da8 <tx_ull_dequeue+0x38>
   11dce:	e7db      	b.n	11d88 <tx_ull_dequeue+0x18>
   11dd0:	f8d3 11cc 	ldr.w	r1, [r3, #460]	; 0x1cc
		conn->tx_head = conn->tx_head->next;
   11dd4:	6812      	ldr	r2, [r2, #0]
   11dd6:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   11dda:	42a1      	cmp	r1, r4
			conn->tx_ctrl = conn->tx_head;
   11ddc:	bf18      	it	ne
   11dde:	f8c3 21c8 	strne.w	r2, [r3, #456]	; 0x1c8
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   11de2:	d1e7      	bne.n	11db4 <tx_ull_dequeue+0x44>
   11de4:	e7e3      	b.n	11dae <tx_ull_dequeue+0x3e>
	if (conn->tx_head == conn->tx_ctrl) {
   11de6:	2a00      	cmp	r2, #0
   11de8:	d1e8      	bne.n	11dbc <tx_ull_dequeue+0x4c>
   11dea:	f8d3 11cc 	ldr.w	r1, [r3, #460]	; 0x1cc
   11dee:	4614      	mov	r4, r2
   11df0:	e7f0      	b.n	11dd4 <tx_ull_dequeue+0x64>
   11df2:	bf00      	nop

00011df4 <init_reset>:
{
   11df4:	b538      	push	{r3, r4, r5, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
   11df6:	4813      	ldr	r0, [pc, #76]	; (11e44 <init_reset+0x50>)
   11df8:	4b13      	ldr	r3, [pc, #76]	; (11e48 <init_reset+0x54>)
   11dfa:	2201      	movs	r2, #1
   11dfc:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   11e00:	f7fb f94c 	bl	d09c <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_CTLR_TX_BUFFERS,
   11e04:	4b11      	ldr	r3, [pc, #68]	; (11e4c <init_reset+0x58>)
   11e06:	2203      	movs	r2, #3
   11e08:	1d18      	adds	r0, r3, #4
   11e0a:	2124      	movs	r1, #36	; 0x24
   11e0c:	f7fb f946 	bl	d09c <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
   11e10:	4b0f      	ldr	r3, [pc, #60]	; (11e50 <init_reset+0x5c>)
   11e12:	2204      	movs	r2, #4
   11e14:	1898      	adds	r0, r3, r2
   11e16:	212c      	movs	r1, #44	; 0x2c
   11e18:	f7fb f940 	bl	d09c <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
   11e1c:	4b0d      	ldr	r3, [pc, #52]	; (11e54 <init_reset+0x60>)
   11e1e:	2207      	movs	r2, #7
   11e20:	1d18      	adds	r0, r3, #4
   11e22:	2108      	movs	r1, #8
   11e24:	f7fb f93a 	bl	d09c <mem_init>
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   11e28:	4b0b      	ldr	r3, [pc, #44]	; (11e58 <init_reset+0x64>)
	default_phy_tx |= PHY_2M;
   11e2a:	490c      	ldr	r1, [pc, #48]	; (11e5c <init_reset+0x68>)
	default_phy_rx |= PHY_2M;
   11e2c:	4a0c      	ldr	r2, [pc, #48]	; (11e60 <init_reset+0x6c>)
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   11e2e:	480d      	ldr	r0, [pc, #52]	; (11e64 <init_reset+0x70>)
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   11e30:	251b      	movs	r5, #27
   11e32:	801d      	strh	r5, [r3, #0]
	default_phy_tx |= PHY_2M;
   11e34:	2303      	movs	r3, #3
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   11e36:	f44f 74a4 	mov.w	r4, #328	; 0x148
	default_phy_tx |= PHY_2M;
   11e3a:	700b      	strb	r3, [r1, #0]
	default_phy_rx |= PHY_2M;
   11e3c:	7013      	strb	r3, [r2, #0]
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   11e3e:	8004      	strh	r4, [r0, #0]
}
   11e40:	2000      	movs	r0, #0
   11e42:	bd38      	pop	{r3, r4, r5, pc}
   11e44:	200012a8 	.word	0x200012a8
   11e48:	200022a8 	.word	0x200022a8
   11e4c:	200022c0 	.word	0x200022c0
   11e50:	20002330 	.word	0x20002330
   11e54:	200023e4 	.word	0x200023e4
   11e58:	20002e78 	.word	0x20002e78
   11e5c:	200035d4 	.word	0x200035d4
   11e60:	200035d3 	.word	0x200035d3
   11e64:	20002e7a 	.word	0x20002e7a

00011e68 <ctrl_tx_pause_enqueue>:
{
   11e68:	b538      	push	{r3, r4, r5, lr}
   11e6a:	4604      	mov	r4, r0
   11e6c:	e9d0 3071 	ldrd	r3, r0, [r0, #452]	; 0x1c4
   11e70:	460d      	mov	r5, r1
	if (
   11e72:	b11b      	cbz	r3, 11e7c <ctrl_tx_pause_enqueue+0x14>
	    !conn->llcp_enc.pause_tx &&
   11e74:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   11e78:	0789      	lsls	r1, r1, #30
   11e7a:	d50b      	bpl.n	11e94 <ctrl_tx_pause_enqueue+0x2c>
		if (!conn->tx_ctrl) {
   11e7c:	b1e0      	cbz	r0, 11eb8 <ctrl_tx_pause_enqueue+0x50>
			LL_ASSERT(!pause);
   11e7e:	bb2a      	cbnz	r2, 11ecc <ctrl_tx_pause_enqueue+0x64>
	tx->next = conn->tx_ctrl_last->next;
   11e80:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   11e84:	681a      	ldr	r2, [r3, #0]
   11e86:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   11e88:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
   11e8a:	682b      	ldr	r3, [r5, #0]
   11e8c:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
	if (!tx->next) {
   11e90:	b17b      	cbz	r3, 11eb2 <ctrl_tx_pause_enqueue+0x4a>
}
   11e92:	bd38      	pop	{r3, r4, r5, pc}
	    !conn->llcp_phy.pause_tx &&
   11e94:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   11e98:	07c9      	lsls	r1, r1, #31
   11e9a:	d4ef      	bmi.n	11e7c <ctrl_tx_pause_enqueue+0x14>
		if (conn->tx_head == conn->tx_data) {
   11e9c:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   11ea0:	428b      	cmp	r3, r1
   11ea2:	d021      	beq.n	11ee8 <ctrl_tx_pause_enqueue+0x80>
		} else if (!conn->tx_ctrl) {
   11ea4:	2800      	cmp	r0, #0
   11ea6:	d02e      	beq.n	11f06 <ctrl_tx_pause_enqueue+0x9e>
			LL_ASSERT(!pause);
   11ea8:	2a00      	cmp	r2, #0
   11eaa:	d0e9      	beq.n	11e80 <ctrl_tx_pause_enqueue+0x18>
   11eac:	f640 0359 	movw	r3, #2137	; 0x859
   11eb0:	e00e      	b.n	11ed0 <ctrl_tx_pause_enqueue+0x68>
		conn->tx_data_last = tx;
   11eb2:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
}
   11eb6:	bd38      	pop	{r3, r4, r5, pc}
			tx->next = conn->tx_head;
   11eb8:	602b      	str	r3, [r5, #0]
			conn->tx_head = tx;
   11eba:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
			if (!pause) {
   11ebe:	2a00      	cmp	r2, #0
   11ec0:	d1e6      	bne.n	11e90 <ctrl_tx_pause_enqueue+0x28>
				conn->tx_ctrl_last = tx;
   11ec2:	e9c4 5572 	strd	r5, r5, [r4, #456]	; 0x1c8
	if (!tx->next) {
   11ec6:	2b00      	cmp	r3, #0
   11ec8:	d1e3      	bne.n	11e92 <ctrl_tx_pause_enqueue+0x2a>
   11eca:	e7f2      	b.n	11eb2 <ctrl_tx_pause_enqueue+0x4a>
			LL_ASSERT(!pause);
   11ecc:	f640 036b 	movw	r3, #2155	; 0x86b
   11ed0:	4a15      	ldr	r2, [pc, #84]	; (11f28 <ctrl_tx_pause_enqueue+0xc0>)
   11ed2:	4916      	ldr	r1, [pc, #88]	; (11f2c <ctrl_tx_pause_enqueue+0xc4>)
   11ed4:	4816      	ldr	r0, [pc, #88]	; (11f30 <ctrl_tx_pause_enqueue+0xc8>)
   11ed6:	f00c fd21 	bl	1e91c <printk>
   11eda:	4040      	eors	r0, r0
   11edc:	f380 8811 	msr	BASEPRI, r0
   11ee0:	f04f 0003 	mov.w	r0, #3
   11ee4:	df02      	svc	2
   11ee6:	e7cb      	b.n	11e80 <ctrl_tx_pause_enqueue+0x18>
			conn->tx_data = conn->tx_data->next;
   11ee8:	6819      	ldr	r1, [r3, #0]
   11eea:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   11eee:	2800      	cmp	r0, #0
   11ef0:	d1da      	bne.n	11ea8 <ctrl_tx_pause_enqueue+0x40>
			tx->next = conn->tx_head->next;
   11ef2:	6819      	ldr	r1, [r3, #0]
   11ef4:	6029      	str	r1, [r5, #0]
			conn->tx_head->next = tx;
   11ef6:	601d      	str	r5, [r3, #0]
			if (!pause) {
   11ef8:	b90a      	cbnz	r2, 11efe <ctrl_tx_pause_enqueue+0x96>
				conn->tx_ctrl_last = tx;
   11efa:	e9c4 5572 	strd	r5, r5, [r4, #456]	; 0x1c8
   11efe:	682b      	ldr	r3, [r5, #0]
	if (!tx->next) {
   11f00:	2b00      	cmp	r3, #0
   11f02:	d1c6      	bne.n	11e92 <ctrl_tx_pause_enqueue+0x2a>
   11f04:	e7d5      	b.n	11eb2 <ctrl_tx_pause_enqueue+0x4a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   11f06:	7919      	ldrb	r1, [r3, #4]
   11f08:	f001 0103 	and.w	r1, r1, #3
   11f0c:	2903      	cmp	r1, #3
   11f0e:	d004      	beq.n	11f1a <ctrl_tx_pause_enqueue+0xb2>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   11f10:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
			LL_ASSERT(!pause);
   11f14:	2a00      	cmp	r2, #0
   11f16:	d0b3      	beq.n	11e80 <ctrl_tx_pause_enqueue+0x18>
   11f18:	e7c8      	b.n	11eac <ctrl_tx_pause_enqueue+0x44>
	    ((pdu_data_tx->llctrl.opcode !=
   11f1a:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   11f1c:	2903      	cmp	r1, #3
   11f1e:	d0e8      	beq.n	11ef2 <ctrl_tx_pause_enqueue+0x8a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   11f20:	290a      	cmp	r1, #10
   11f22:	d1f5      	bne.n	11f10 <ctrl_tx_pause_enqueue+0xa8>
   11f24:	e7e5      	b.n	11ef2 <ctrl_tx_pause_enqueue+0x8a>
   11f26:	bf00      	nop
   11f28:	00024e44 	.word	0x00024e44
   11f2c:	00024e84 	.word	0x00024e84
   11f30:	00024904 	.word	0x00024904

00011f34 <tx_lll_flush>:
{
   11f34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct ll_conn *conn = (void *)HDR_LLL2EVT(param);
   11f38:	f8d0 8000 	ldr.w	r8, [r0]
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   11f3c:	4934      	ldr	r1, [pc, #208]	; (12010 <tx_lll_flush+0xdc>)
{
   11f3e:	b083      	sub	sp, #12
   11f40:	4605      	mov	r5, r0
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   11f42:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   11f46:	4640      	mov	r0, r8
   11f48:	f7fb f8fc 	bl	d144 <mem_index_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   11f4c:	f105 0648 	add.w	r6, r5, #72	; 0x48
	lll_conn_flush(handle, lll);
   11f50:	4629      	mov	r1, r5
   11f52:	f006 ff5b 	bl	18e0c <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   11f56:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
   11f58:	4631      	mov	r1, r6
   11f5a:	aa01      	add	r2, sp, #4
   11f5c:	f7fb f930 	bl	d1c0 <memq_dequeue>
	while (link) {
   11f60:	b328      	cbz	r0, 11fae <tx_lll_flush+0x7a>
   11f62:	4c2c      	ldr	r4, [pc, #176]	; (12014 <tx_lll_flush+0xe0>)
		lll_tx->handle = 0xFFFF;
   11f64:	f64f 77ff 	movw	r7, #65535	; 0xffff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   11f68:	f104 0904 	add.w	r9, r4, #4
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   11f6c:	78e1      	ldrb	r1, [r4, #3]
	if (last == count) {
   11f6e:	f894 c001 	ldrb.w	ip, [r4, #1]
   11f72:	78a2      	ldrb	r2, [r4, #2]
	last = last + 1;
   11f74:	1c4b      	adds	r3, r1, #1
   11f76:	b2db      	uxtb	r3, r3
		last = 0U;
   11f78:	459c      	cmp	ip, r3
   11f7a:	bf08      	it	eq
   11f7c:	2300      	moveq	r3, #0
	if (last == first) {
   11f7e:	429a      	cmp	r2, r3
   11f80:	d035      	beq.n	11fee <tx_lll_flush+0xba>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   11f82:	7822      	ldrb	r2, [r4, #0]
   11f84:	fb12 f201 	smulbb	r2, r2, r1
		LL_ASSERT(lll_tx);
   11f88:	eb19 0c02 	adds.w	ip, r9, r2
   11f8c:	d02f      	beq.n	11fee <tx_lll_flush+0xba>
		lll_tx->node = tx;
   11f8e:	9901      	ldr	r1, [sp, #4]
		lll_tx->handle = 0xFFFF;
   11f90:	f829 7002 	strh.w	r7, [r9, r2]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   11f94:	680a      	ldr	r2, [r1, #0]
		lll_tx->node = tx;
   11f96:	f8cc 1004 	str.w	r1, [ip, #4]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   11f9a:	6002      	str	r2, [r0, #0]
		tx->next = link;
   11f9c:	6008      	str	r0, [r1, #0]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   11f9e:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
	*last = idx; /* Commit: Update write index */
   11fa0:	70e3      	strb	r3, [r4, #3]
   11fa2:	aa01      	add	r2, sp, #4
   11fa4:	4631      	mov	r1, r6
   11fa6:	f7fb f90b 	bl	d1c0 <memq_dequeue>
	while (link) {
   11faa:	2800      	cmp	r0, #0
   11fac:	d1de      	bne.n	11f6c <tx_lll_flush+0x38>
	LL_ASSERT(rx->hdr.link);
   11fae:	f8d8 0144 	ldr.w	r0, [r8, #324]	; 0x144
	rx = (void *)&conn->llcp_terminate.node_rx;
   11fb2:	f508 74a2 	add.w	r4, r8, #324	; 0x144
	LL_ASSERT(rx->hdr.link);
   11fb6:	b150      	cbz	r0, 11fce <tx_lll_flush+0x9a>
	rx->hdr.link = NULL;
   11fb8:	2300      	movs	r3, #0
	ull_rx_put(link, rx);
   11fba:	4621      	mov	r1, r4
	rx->hdr.link = NULL;
   11fbc:	f8c8 3144 	str.w	r3, [r8, #324]	; 0x144
	ull_rx_put(link, rx);
   11fc0:	f7ff f930 	bl	11224 <ull_rx_put>
	ull_rx_sched();
   11fc4:	f7ff f93e 	bl	11244 <ull_rx_sched>
}
   11fc8:	b003      	add	sp, #12
   11fca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(rx->hdr.link);
   11fce:	4a12      	ldr	r2, [pc, #72]	; (12018 <tx_lll_flush+0xe4>)
   11fd0:	4912      	ldr	r1, [pc, #72]	; (1201c <tx_lll_flush+0xe8>)
   11fd2:	4813      	ldr	r0, [pc, #76]	; (12020 <tx_lll_flush+0xec>)
   11fd4:	f240 73c6 	movw	r3, #1990	; 0x7c6
   11fd8:	f00c fca0 	bl	1e91c <printk>
   11fdc:	4040      	eors	r0, r0
   11fde:	f380 8811 	msr	BASEPRI, r0
   11fe2:	f04f 0003 	mov.w	r0, #3
   11fe6:	df02      	svc	2
   11fe8:	f8d8 0144 	ldr.w	r0, [r8, #324]	; 0x144
   11fec:	e7e4      	b.n	11fb8 <tx_lll_flush+0x84>
		LL_ASSERT(lll_tx);
   11fee:	4a0a      	ldr	r2, [pc, #40]	; (12018 <tx_lll_flush+0xe4>)
   11ff0:	490c      	ldr	r1, [pc, #48]	; (12024 <tx_lll_flush+0xf0>)
   11ff2:	480b      	ldr	r0, [pc, #44]	; (12020 <tx_lll_flush+0xec>)
   11ff4:	f240 73b2 	movw	r3, #1970	; 0x7b2
   11ff8:	f00c fc90 	bl	1e91c <printk>
   11ffc:	4040      	eors	r0, r0
   11ffe:	f380 8811 	msr	BASEPRI, r0
   12002:	f04f 0003 	mov.w	r0, #3
   12006:	df02      	svc	2
		lll_tx->handle = 0xFFFF;
   12008:	2300      	movs	r3, #0
   1200a:	801b      	strh	r3, [r3, #0]
   1200c:	deff      	udf	#255	; 0xff
   1200e:	bf00      	nop
   12010:	200012a8 	.word	0x200012a8
   12014:	200004a8 	.word	0x200004a8
   12018:	00024e44 	.word	0x00024e44
   1201c:	00024e94 	.word	0x00024e94
   12020:	00024904 	.word	0x00024904
   12024:	00024e8c 	.word	0x00024e8c

00012028 <ticker_op_stop_cb>:
{
   12028:	b510      	push	{r4, lr}
   1202a:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1202c:	b9b0      	cbnz	r0, 1205c <ticker_op_stop_cb+0x34>
	mfy.param = param;
   1202e:	4b12      	ldr	r3, [pc, #72]	; (12078 <ticker_op_stop_cb+0x50>)
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
   12030:	2200      	movs	r2, #0
   12032:	4611      	mov	r1, r2
   12034:	2002      	movs	r0, #2
	mfy.param = param;
   12036:	609c      	str	r4, [r3, #8]
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
   12038:	f7fb f926 	bl	d288 <mayfly_enqueue>
	LL_ASSERT(!retval);
   1203c:	b900      	cbnz	r0, 12040 <ticker_op_stop_cb+0x18>
}
   1203e:	bd10      	pop	{r4, pc}
	LL_ASSERT(!retval);
   12040:	4a0e      	ldr	r2, [pc, #56]	; (1207c <ticker_op_stop_cb+0x54>)
   12042:	490f      	ldr	r1, [pc, #60]	; (12080 <ticker_op_stop_cb+0x58>)
   12044:	480f      	ldr	r0, [pc, #60]	; (12084 <ticker_op_stop_cb+0x5c>)
   12046:	f240 7321 	movw	r3, #1825	; 0x721
   1204a:	f00c fc67 	bl	1e91c <printk>
   1204e:	4040      	eors	r0, r0
   12050:	f380 8811 	msr	BASEPRI, r0
   12054:	f04f 0003 	mov.w	r0, #3
   12058:	df02      	svc	2
}
   1205a:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1205c:	4a07      	ldr	r2, [pc, #28]	; (1207c <ticker_op_stop_cb+0x54>)
   1205e:	490a      	ldr	r1, [pc, #40]	; (12088 <ticker_op_stop_cb+0x60>)
   12060:	4808      	ldr	r0, [pc, #32]	; (12084 <ticker_op_stop_cb+0x5c>)
   12062:	f240 731a 	movw	r3, #1818	; 0x71a
   12066:	f00c fc59 	bl	1e91c <printk>
   1206a:	4040      	eors	r0, r0
   1206c:	f380 8811 	msr	BASEPRI, r0
   12070:	f04f 0003 	mov.w	r0, #3
   12074:	df02      	svc	2
   12076:	e7da      	b.n	1202e <ticker_op_stop_cb+0x6>
   12078:	20000520 	.word	0x20000520
   1207c:	00024e44 	.word	0x00024e44
   12080:	00024bd0 	.word	0x00024bd0
   12084:	00024904 	.word	0x00024904
   12088:	00024ea4 	.word	0x00024ea4

0001208c <ticker_start_conn_op_cb>:
{
   1208c:	b510      	push	{r4, lr}
   1208e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   12090:	b990      	cbnz	r0, 120b8 <ticker_start_conn_op_cb+0x2c>
	p = ull_update_unmark(param);
   12092:	4620      	mov	r0, r4
   12094:	f7ff f800 	bl	11098 <ull_update_unmark>
	LL_ASSERT(p == param);
   12098:	4284      	cmp	r4, r0
   1209a:	d00c      	beq.n	120b6 <ticker_start_conn_op_cb+0x2a>
   1209c:	4a0d      	ldr	r2, [pc, #52]	; (120d4 <ticker_start_conn_op_cb+0x48>)
   1209e:	490e      	ldr	r1, [pc, #56]	; (120d8 <ticker_start_conn_op_cb+0x4c>)
   120a0:	480e      	ldr	r0, [pc, #56]	; (120dc <ticker_start_conn_op_cb+0x50>)
   120a2:	f240 7311 	movw	r3, #1809	; 0x711
   120a6:	f00c fc39 	bl	1e91c <printk>
   120aa:	4040      	eors	r0, r0
   120ac:	f380 8811 	msr	BASEPRI, r0
   120b0:	f04f 0003 	mov.w	r0, #3
   120b4:	df02      	svc	2
}
   120b6:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   120b8:	4a06      	ldr	r2, [pc, #24]	; (120d4 <ticker_start_conn_op_cb+0x48>)
   120ba:	4909      	ldr	r1, [pc, #36]	; (120e0 <ticker_start_conn_op_cb+0x54>)
   120bc:	4807      	ldr	r0, [pc, #28]	; (120dc <ticker_start_conn_op_cb+0x50>)
   120be:	f240 730e 	movw	r3, #1806	; 0x70e
   120c2:	f00c fc2b 	bl	1e91c <printk>
   120c6:	4040      	eors	r0, r0
   120c8:	f380 8811 	msr	BASEPRI, r0
   120cc:	f04f 0003 	mov.w	r0, #3
   120d0:	df02      	svc	2
   120d2:	e7de      	b.n	12092 <ticker_start_conn_op_cb+0x6>
   120d4:	00024e44 	.word	0x00024e44
   120d8:	00024eb0 	.word	0x00024eb0
   120dc:	00024904 	.word	0x00024904
   120e0:	00024ea4 	.word	0x00024ea4

000120e4 <ticker_stop_conn_op_cb>:
{
   120e4:	b510      	push	{r4, lr}
   120e6:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   120e8:	b990      	cbnz	r0, 12110 <ticker_stop_conn_op_cb+0x2c>
	p = ull_update_mark(param);
   120ea:	4620      	mov	r0, r4
   120ec:	f7fe ffc8 	bl	11080 <ull_update_mark>
	LL_ASSERT(p == param);
   120f0:	4284      	cmp	r4, r0
   120f2:	d00c      	beq.n	1210e <ticker_stop_conn_op_cb+0x2a>
   120f4:	4a0d      	ldr	r2, [pc, #52]	; (1212c <ticker_stop_conn_op_cb+0x48>)
   120f6:	490e      	ldr	r1, [pc, #56]	; (12130 <ticker_stop_conn_op_cb+0x4c>)
   120f8:	480e      	ldr	r0, [pc, #56]	; (12134 <ticker_stop_conn_op_cb+0x50>)
   120fa:	f240 7307 	movw	r3, #1799	; 0x707
   120fe:	f00c fc0d 	bl	1e91c <printk>
   12102:	4040      	eors	r0, r0
   12104:	f380 8811 	msr	BASEPRI, r0
   12108:	f04f 0003 	mov.w	r0, #3
   1210c:	df02      	svc	2
}
   1210e:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   12110:	4a06      	ldr	r2, [pc, #24]	; (1212c <ticker_stop_conn_op_cb+0x48>)
   12112:	4909      	ldr	r1, [pc, #36]	; (12138 <ticker_stop_conn_op_cb+0x54>)
   12114:	4807      	ldr	r0, [pc, #28]	; (12134 <ticker_stop_conn_op_cb+0x50>)
   12116:	f240 7304 	movw	r3, #1796	; 0x704
   1211a:	f00c fbff 	bl	1e91c <printk>
   1211e:	4040      	eors	r0, r0
   12120:	f380 8811 	msr	BASEPRI, r0
   12124:	f04f 0003 	mov.w	r0, #3
   12128:	df02      	svc	2
   1212a:	e7de      	b.n	120ea <ticker_stop_conn_op_cb+0x6>
   1212c:	00024e44 	.word	0x00024e44
   12130:	00024eb0 	.word	0x00024eb0
   12134:	00024904 	.word	0x00024904
   12138:	00024ea4 	.word	0x00024ea4

0001213c <ticker_update_conn_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   1213c:	b900      	cbnz	r0, 12140 <ticker_update_conn_op_cb+0x4>
   1213e:	4770      	bx	lr
{
   12140:	b510      	push	{r4, lr}
   12142:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   12144:	f7fe ffb4 	bl	110b0 <ull_update_mark_get>
   12148:	4284      	cmp	r4, r0
   1214a:	d010      	beq.n	1216e <ticker_update_conn_op_cb+0x32>
   1214c:	f7fe ff92 	bl	11074 <ull_disable_mark_get>
   12150:	4284      	cmp	r4, r0
   12152:	d00c      	beq.n	1216e <ticker_update_conn_op_cb+0x32>
   12154:	4a06      	ldr	r2, [pc, #24]	; (12170 <ticker_update_conn_op_cb+0x34>)
   12156:	4907      	ldr	r1, [pc, #28]	; (12174 <ticker_update_conn_op_cb+0x38>)
   12158:	4807      	ldr	r0, [pc, #28]	; (12178 <ticker_update_conn_op_cb+0x3c>)
   1215a:	f240 63fb 	movw	r3, #1787	; 0x6fb
   1215e:	f00c fbdd 	bl	1e91c <printk>
   12162:	4040      	eors	r0, r0
   12164:	f380 8811 	msr	BASEPRI, r0
   12168:	f04f 0003 	mov.w	r0, #3
   1216c:	df02      	svc	2
}
   1216e:	bd10      	pop	{r4, pc}
   12170:	00024e44 	.word	0x00024e44
   12174:	00024ebc 	.word	0x00024ebc
   12178:	00024904 	.word	0x00024904

0001217c <reject_ext_ind_send>:
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ) || defined(CONFIG_BT_CTLR_PHY)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
			       uint8_t reject_opcode, uint8_t error_code)
{
   1217c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12180:	4604      	mov	r4, r0
	if (conn->common.txn_lock) {
   12182:	f890 00d8 	ldrb.w	r0, [r0, #216]	; 0xd8
{
   12186:	460d      	mov	r5, r1
	if (conn->common.txn_lock) {
   12188:	0781      	lsls	r1, r0, #30
   1218a:	d433      	bmi.n	121f4 <reject_ext_ind_send+0x78>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1218c:	4836      	ldr	r0, [pc, #216]	; (12268 <reject_ext_ind_send+0xec>)
   1218e:	4690      	mov	r8, r2
   12190:	461f      	mov	r7, r3
   12192:	f7fa ffa3 	bl	d0dc <mem_acquire>
	if (!tx) {
   12196:	2800      	cmp	r0, #0
   12198:	d047      	beq.n	1222a <reject_ext_ind_send+0xae>
	conn->common.txn_lock = 1U;
   1219a:	f894 10d8 	ldrb.w	r1, [r4, #216]	; 0xd8
	if (!tx) {
		return err;
	}

	pdu_ctrl_tx = (void *)tx->pdu;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1219e:	7906      	ldrb	r6, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   121a0:	2303      	movs	r3, #3
	conn->common.txn_lock = 1U;
   121a2:	f041 0102 	orr.w	r1, r1, #2
   121a6:	f884 10d8 	strb.w	r1, [r4, #216]	; 0xd8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   121aa:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
   121ac:	f8d4 11c4 	ldr.w	r1, [r4, #452]	; 0x1c4
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   121b0:	f880 8008 	strb.w	r8, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   121b4:	ea46 0203 	orr.w	r2, r6, r3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   121b8:	2311      	movs	r3, #17
   121ba:	f8d4 61c8 	ldr.w	r6, [r4, #456]	; 0x1c8
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   121be:	7247      	strb	r7, [r0, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   121c0:	7102      	strb	r2, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   121c2:	71c3      	strb	r3, [r0, #7]
	if (
   121c4:	b1d9      	cbz	r1, 121fe <reject_ext_ind_send+0x82>
	    !conn->llcp_enc.pause_tx &&
   121c6:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
	    conn->tx_head &&
   121ca:	079a      	lsls	r2, r3, #30
   121cc:	d417      	bmi.n	121fe <reject_ext_ind_send+0x82>
	    !conn->llcp_phy.pause_tx &&
   121ce:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   121d2:	07db      	lsls	r3, r3, #31
   121d4:	d413      	bmi.n	121fe <reject_ext_ind_send+0x82>
		if (conn->tx_head == conn->tx_data) {
   121d6:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
   121da:	4299      	cmp	r1, r3
   121dc:	d028      	beq.n	12230 <reject_ext_ind_send+0xb4>
		} else if (!conn->tx_ctrl) {
   121de:	2e00      	cmp	r6, #0
   121e0:	d034      	beq.n	1224c <reject_ext_ind_send+0xd0>
   121e2:	f8d4 11cc 	ldr.w	r1, [r4, #460]	; 0x1cc
	tx->next = conn->tx_ctrl_last->next;
   121e6:	680b      	ldr	r3, [r1, #0]
   121e8:	6003      	str	r3, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   121ea:	6008      	str	r0, [r1, #0]
	if (!tx->next) {
   121ec:	6801      	ldr	r1, [r0, #0]
	conn->tx_ctrl_last = tx;
   121ee:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   121f2:	b179      	cbz	r1, 12214 <reject_ext_ind_send+0x98>

	ctrl_tx_enqueue(conn, tx);

	/* Mark for buffer for release */
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   121f4:	2301      	movs	r3, #1
   121f6:	712b      	strb	r3, [r5, #4]

	return 0;
   121f8:	2000      	movs	r0, #0
}
   121fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!conn->tx_ctrl) {
   121fe:	b166      	cbz	r6, 1221a <reject_ext_ind_send+0x9e>
	tx->next = conn->tx_ctrl_last->next;
   12200:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   12204:	681a      	ldr	r2, [r3, #0]
   12206:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   12208:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   1220a:	6801      	ldr	r1, [r0, #0]
   1220c:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   12210:	2900      	cmp	r1, #0
   12212:	d1ef      	bne.n	121f4 <reject_ext_ind_send+0x78>
		conn->tx_data_last = tx;
   12214:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   12218:	e7ec      	b.n	121f4 <reject_ext_ind_send+0x78>
			tx->next = conn->tx_head;
   1221a:	6001      	str	r1, [r0, #0]
				conn->tx_ctrl = tx;
   1221c:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   12220:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   12224:	2900      	cmp	r1, #0
   12226:	d1e5      	bne.n	121f4 <reject_ext_ind_send+0x78>
   12228:	e7f4      	b.n	12214 <reject_ext_ind_send+0x98>
		*err = -ENOBUFS;
   1222a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1222e:	e7e4      	b.n	121fa <reject_ext_ind_send+0x7e>
			conn->tx_data = conn->tx_data->next;
   12230:	680b      	ldr	r3, [r1, #0]
   12232:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   12236:	2e00      	cmp	r6, #0
   12238:	d1d3      	bne.n	121e2 <reject_ext_ind_send+0x66>
			tx->next = conn->tx_head->next;
   1223a:	680b      	ldr	r3, [r1, #0]
   1223c:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   1223e:	6008      	str	r0, [r1, #0]
				conn->tx_ctrl = tx;
   12240:	6801      	ldr	r1, [r0, #0]
				conn->tx_ctrl_last = tx;
   12242:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
	if (!tx->next) {
   12246:	2900      	cmp	r1, #0
   12248:	d1d4      	bne.n	121f4 <reject_ext_ind_send+0x78>
   1224a:	e7e3      	b.n	12214 <reject_ext_ind_send+0x98>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1224c:	790b      	ldrb	r3, [r1, #4]
   1224e:	f003 0303 	and.w	r3, r3, #3
   12252:	2b03      	cmp	r3, #3
   12254:	d002      	beq.n	1225c <reject_ext_ind_send+0xe0>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   12256:	f8c4 11c8 	str.w	r1, [r4, #456]	; 0x1c8
   1225a:	e7c4      	b.n	121e6 <reject_ext_ind_send+0x6a>
	    ((pdu_data_tx->llctrl.opcode !=
   1225c:	79cb      	ldrb	r3, [r1, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1225e:	2b03      	cmp	r3, #3
   12260:	d0eb      	beq.n	1223a <reject_ext_ind_send+0xbe>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   12262:	2b0a      	cmp	r3, #10
   12264:	d1f7      	bne.n	12256 <reject_ext_ind_send+0xda>
   12266:	e7e8      	b.n	1223a <reject_ext_ind_send+0xbe>
   12268:	20002330 	.word	0x20002330

0001226c <start_enc_rsp_send>:
{
   1226c:	b570      	push	{r4, r5, r6, lr}
   1226e:	4604      	mov	r4, r0
	if (!pdu_ctrl_tx) {
   12270:	b179      	cbz	r1, 12292 <start_enc_rsp_send+0x26>
	conn->lll.enc_tx = 1;
   12272:	f890 207a 	ldrb.w	r2, [r0, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12276:	780b      	ldrb	r3, [r1, #0]
	conn->lll.enc_tx = 1;
   12278:	f042 0210 	orr.w	r2, r2, #16
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   1227c:	2601      	movs	r6, #1
	conn->lll.enc_tx = 1;
   1227e:	f880 207a 	strb.w	r2, [r0, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12282:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   12286:	2506      	movs	r5, #6
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   12288:	704e      	strb	r6, [r1, #1]
	return 0;
   1228a:	2000      	movs	r0, #0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1228c:	700b      	strb	r3, [r1, #0]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   1228e:	70cd      	strb	r5, [r1, #3]
}
   12290:	bd70      	pop	{r4, r5, r6, pc}
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   12292:	482c      	ldr	r0, [pc, #176]	; (12344 <start_enc_rsp_send+0xd8>)
   12294:	f7fa ff22 	bl	d0dc <mem_acquire>
		if (!tx) {
   12298:	2800      	cmp	r0, #0
   1229a:	d04f      	beq.n	1233c <start_enc_rsp_send+0xd0>
	conn->lll.enc_tx = 1;
   1229c:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   122a0:	7902      	ldrb	r2, [r0, #4]
	conn->lll.enc_tx = 1;
   122a2:	f043 0310 	orr.w	r3, r3, #16
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   122a6:	2101      	movs	r1, #1
	conn->lll.enc_tx = 1;
   122a8:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   122ac:	7141      	strb	r1, [r0, #5]
   122ae:	e9d4 3571 	ldrd	r3, r5, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   122b2:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   122b6:	2106      	movs	r1, #6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   122b8:	7102      	strb	r2, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   122ba:	71c1      	strb	r1, [r0, #7]
	if (
   122bc:	b1bb      	cbz	r3, 122ee <start_enc_rsp_send+0x82>
	    !conn->llcp_enc.pause_tx &&
   122be:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   122c2:	0791      	lsls	r1, r2, #30
   122c4:	d413      	bmi.n	122ee <start_enc_rsp_send+0x82>
	    !conn->llcp_phy.pause_tx &&
   122c6:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   122ca:	07d2      	lsls	r2, r2, #31
   122cc:	d40f      	bmi.n	122ee <start_enc_rsp_send+0x82>
		if (conn->tx_head == conn->tx_data) {
   122ce:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   122d2:	4293      	cmp	r3, r2
   122d4:	d020      	beq.n	12318 <start_enc_rsp_send+0xac>
		} else if (!conn->tx_ctrl) {
   122d6:	b1bd      	cbz	r5, 12308 <start_enc_rsp_send+0x9c>
	tx->next = conn->tx_ctrl_last->next;
   122d8:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   122dc:	681a      	ldr	r2, [r3, #0]
   122de:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   122e0:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   122e2:	6803      	ldr	r3, [r0, #0]
   122e4:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   122e8:	b153      	cbz	r3, 12300 <start_enc_rsp_send+0x94>
	return 0;
   122ea:	2000      	movs	r0, #0
}
   122ec:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->tx_ctrl) {
   122ee:	2d00      	cmp	r5, #0
   122f0:	d1f2      	bne.n	122d8 <start_enc_rsp_send+0x6c>
			tx->next = conn->tx_head;
   122f2:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   122f4:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   122f8:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   122fc:	2b00      	cmp	r3, #0
   122fe:	d1f4      	bne.n	122ea <start_enc_rsp_send+0x7e>
		conn->tx_data_last = tx;
   12300:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
	return 0;
   12304:	4618      	mov	r0, r3
}
   12306:	bd70      	pop	{r4, r5, r6, pc}
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   12308:	791a      	ldrb	r2, [r3, #4]
   1230a:	f002 0203 	and.w	r2, r2, #3
   1230e:	2a03      	cmp	r2, #3
   12310:	d00e      	beq.n	12330 <start_enc_rsp_send+0xc4>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   12312:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
   12316:	e7e1      	b.n	122dc <start_enc_rsp_send+0x70>
			conn->tx_data = conn->tx_data->next;
   12318:	681a      	ldr	r2, [r3, #0]
   1231a:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1231e:	2d00      	cmp	r5, #0
   12320:	d1da      	bne.n	122d8 <start_enc_rsp_send+0x6c>
			tx->next = conn->tx_head->next;
   12322:	681a      	ldr	r2, [r3, #0]
   12324:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   12326:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   12328:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   1232a:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   1232e:	e7db      	b.n	122e8 <start_enc_rsp_send+0x7c>
	    ((pdu_data_tx->llctrl.opcode !=
   12330:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   12332:	2a03      	cmp	r2, #3
   12334:	d0f5      	beq.n	12322 <start_enc_rsp_send+0xb6>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   12336:	2a0a      	cmp	r2, #10
   12338:	d1eb      	bne.n	12312 <start_enc_rsp_send+0xa6>
   1233a:	e7f2      	b.n	12322 <start_enc_rsp_send+0xb6>
			return -ENOBUFS;
   1233c:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   12340:	bd70      	pop	{r4, r5, r6, pc}
   12342:	bf00      	nop
   12344:	20002330 	.word	0x20002330

00012348 <ctrl_tx_sec_enqueue>:
	if (conn->llcp_enc.pause_tx) {
   12348:	f890 3166 	ldrb.w	r3, [r0, #358]	; 0x166
   1234c:	f8d0 21c8 	ldr.w	r2, [r0, #456]	; 0x1c8
   12350:	079b      	lsls	r3, r3, #30
{
   12352:	b570      	push	{r4, r5, r6, lr}
   12354:	4604      	mov	r4, r0
   12356:	460d      	mov	r5, r1
	if (conn->llcp_enc.pause_tx) {
   12358:	d509      	bpl.n	1236e <ctrl_tx_sec_enqueue+0x26>
		if (!conn->tx_ctrl) {
   1235a:	2a00      	cmp	r2, #0
   1235c:	d044      	beq.n	123e8 <ctrl_tx_sec_enqueue+0xa0>
			tx->next = conn->tx_ctrl_last->next;
   1235e:	f8d0 31cc 	ldr.w	r3, [r0, #460]	; 0x1cc
   12362:	681a      	ldr	r2, [r3, #0]
   12364:	600a      	str	r2, [r1, #0]
			conn->tx_ctrl_last->next = tx;
   12366:	6019      	str	r1, [r3, #0]
		if (!tx->next) {
   12368:	682b      	ldr	r3, [r5, #0]
   1236a:	b36b      	cbz	r3, 123c8 <ctrl_tx_sec_enqueue+0x80>
}
   1236c:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->tx_head) {
   1236e:	f8d0 11c4 	ldr.w	r1, [r0, #452]	; 0x1c4
   12372:	b319      	cbz	r1, 123bc <ctrl_tx_sec_enqueue+0x74>
			if ((conn->llcp_req != conn->llcp_ack) &&
   12374:	f890 31bf 	ldrb.w	r3, [r0, #447]	; 0x1bf
   12378:	f890 60e4 	ldrb.w	r6, [r0, #228]	; 0xe4
   1237c:	f890 00e5 	ldrb.w	r0, [r0, #229]	; 0xe5
   12380:	4286      	cmp	r6, r0
   12382:	f003 0301 	and.w	r3, r3, #1
   12386:	d003      	beq.n	12390 <ctrl_tx_sec_enqueue+0x48>
   12388:	f894 00e6 	ldrb.w	r0, [r4, #230]	; 0xe6
   1238c:	2803      	cmp	r0, #3
   1238e:	d033      	beq.n	123f8 <ctrl_tx_sec_enqueue+0xb0>
	    !conn->llcp_phy.pause_tx &&
   12390:	b9eb      	cbnz	r3, 123ce <ctrl_tx_sec_enqueue+0x86>
		if (conn->tx_head == conn->tx_data) {
   12392:	f8d4 01d0 	ldr.w	r0, [r4, #464]	; 0x1d0
   12396:	4281      	cmp	r1, r0
   12398:	d04b      	beq.n	12432 <ctrl_tx_sec_enqueue+0xea>
		} else if (!conn->tx_ctrl) {
   1239a:	2a00      	cmp	r2, #0
   1239c:	d03b      	beq.n	12416 <ctrl_tx_sec_enqueue+0xce>
			LL_ASSERT(!pause);
   1239e:	b1c3      	cbz	r3, 123d2 <ctrl_tx_sec_enqueue+0x8a>
   123a0:	f640 0359 	movw	r3, #2137	; 0x859
			LL_ASSERT(!pause);
   123a4:	4a32      	ldr	r2, [pc, #200]	; (12470 <ctrl_tx_sec_enqueue+0x128>)
   123a6:	4933      	ldr	r1, [pc, #204]	; (12474 <ctrl_tx_sec_enqueue+0x12c>)
   123a8:	4833      	ldr	r0, [pc, #204]	; (12478 <ctrl_tx_sec_enqueue+0x130>)
   123aa:	f00c fab7 	bl	1e91c <printk>
   123ae:	4040      	eors	r0, r0
   123b0:	f380 8811 	msr	BASEPRI, r0
   123b4:	f04f 0003 	mov.w	r0, #3
   123b8:	df02      	svc	2
   123ba:	e00a      	b.n	123d2 <ctrl_tx_sec_enqueue+0x8a>
		if (!conn->tx_ctrl) {
   123bc:	b94a      	cbnz	r2, 123d2 <ctrl_tx_sec_enqueue+0x8a>
			tx->next = conn->tx_head;
   123be:	602a      	str	r2, [r5, #0]
				conn->tx_ctrl = tx;
   123c0:	e9c0 5571 	strd	r5, r5, [r0, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   123c4:	f8c0 51cc 	str.w	r5, [r0, #460]	; 0x1cc
			conn->tx_data_last = tx;
   123c8:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
}
   123cc:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->tx_ctrl) {
   123ce:	2a00      	cmp	r2, #0
   123d0:	d03f      	beq.n	12452 <ctrl_tx_sec_enqueue+0x10a>
	tx->next = conn->tx_ctrl_last->next;
   123d2:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   123d6:	681a      	ldr	r2, [r3, #0]
   123d8:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   123da:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
   123dc:	682b      	ldr	r3, [r5, #0]
   123de:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
		if (!tx->next) {
   123e2:	2b00      	cmp	r3, #0
   123e4:	d1c2      	bne.n	1236c <ctrl_tx_sec_enqueue+0x24>
   123e6:	e7ef      	b.n	123c8 <ctrl_tx_sec_enqueue+0x80>
			tx->next = conn->tx_head;
   123e8:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
   123ec:	600b      	str	r3, [r1, #0]
			conn->tx_head = tx;
   123ee:	f8c4 11c4 	str.w	r1, [r4, #452]	; 0x1c4
		if (!tx->next) {
   123f2:	2b00      	cmp	r3, #0
   123f4:	d1ba      	bne.n	1236c <ctrl_tx_sec_enqueue+0x24>
   123f6:	e7e7      	b.n	123c8 <ctrl_tx_sec_enqueue+0x80>
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   123f8:	7908      	ldrb	r0, [r1, #4]
			    (conn->llcp_type == LLCP_ENCRYPTION) &&
   123fa:	f000 0003 	and.w	r0, r0, #3
   123fe:	2803      	cmp	r0, #3
   12400:	d1c6      	bne.n	12390 <ctrl_tx_sec_enqueue+0x48>
			    ((pdu_data_tx->llctrl.opcode ==
   12402:	79c8      	ldrb	r0, [r1, #7]
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   12404:	2803      	cmp	r0, #3
   12406:	d001      	beq.n	1240c <ctrl_tx_sec_enqueue+0xc4>
			      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   12408:	280a      	cmp	r0, #10
   1240a:	d1c1      	bne.n	12390 <ctrl_tx_sec_enqueue+0x48>
	    !conn->llcp_phy.pause_tx &&
   1240c:	b33b      	cbz	r3, 1245e <ctrl_tx_sec_enqueue+0x116>
		if (!conn->tx_ctrl) {
   1240e:	b162      	cbz	r2, 1242a <ctrl_tx_sec_enqueue+0xe2>
			LL_ASSERT(!pause);
   12410:	f640 036b 	movw	r3, #2155	; 0x86b
   12414:	e7c6      	b.n	123a4 <ctrl_tx_sec_enqueue+0x5c>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   12416:	790a      	ldrb	r2, [r1, #4]
   12418:	f002 0203 	and.w	r2, r2, #3
   1241c:	2a03      	cmp	r2, #3
   1241e:	d020      	beq.n	12462 <ctrl_tx_sec_enqueue+0x11a>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   12420:	e9c4 1172 	strd	r1, r1, [r4, #456]	; 0x1c8
			LL_ASSERT(!pause);
   12424:	2b00      	cmp	r3, #0
   12426:	d0d4      	beq.n	123d2 <ctrl_tx_sec_enqueue+0x8a>
   12428:	e7ba      	b.n	123a0 <ctrl_tx_sec_enqueue+0x58>
			tx->next = conn->tx_head;
   1242a:	6029      	str	r1, [r5, #0]
			conn->tx_head = tx;
   1242c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
}
   12430:	bd70      	pop	{r4, r5, r6, pc}
			conn->tx_data = conn->tx_data->next;
   12432:	6808      	ldr	r0, [r1, #0]
   12434:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   12438:	2a00      	cmp	r2, #0
   1243a:	d1b0      	bne.n	1239e <ctrl_tx_sec_enqueue+0x56>
			tx->next = conn->tx_head->next;
   1243c:	680a      	ldr	r2, [r1, #0]
   1243e:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
   12440:	600d      	str	r5, [r1, #0]
			if (!pause) {
   12442:	2b00      	cmp	r3, #0
   12444:	d190      	bne.n	12368 <ctrl_tx_sec_enqueue+0x20>
				conn->tx_ctrl = tx;
   12446:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
   12448:	e9c4 5572 	strd	r5, r5, [r4, #456]	; 0x1c8
		if (!tx->next) {
   1244c:	2b00      	cmp	r3, #0
   1244e:	d18d      	bne.n	1236c <ctrl_tx_sec_enqueue+0x24>
   12450:	e7ba      	b.n	123c8 <ctrl_tx_sec_enqueue+0x80>
			tx->next = conn->tx_head;
   12452:	6029      	str	r1, [r5, #0]
				conn->tx_ctrl = tx;
   12454:	e9c4 5571 	strd	r5, r5, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   12458:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
}
   1245c:	bd70      	pop	{r4, r5, r6, pc}
				pause = true;
   1245e:	2301      	movs	r3, #1
   12460:	e797      	b.n	12392 <ctrl_tx_sec_enqueue+0x4a>
	    ((pdu_data_tx->llctrl.opcode !=
   12462:	79ca      	ldrb	r2, [r1, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   12464:	2a03      	cmp	r2, #3
   12466:	d0e9      	beq.n	1243c <ctrl_tx_sec_enqueue+0xf4>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   12468:	2a0a      	cmp	r2, #10
   1246a:	d1d9      	bne.n	12420 <ctrl_tx_sec_enqueue+0xd8>
   1246c:	e7e6      	b.n	1243c <ctrl_tx_sec_enqueue+0xf4>
   1246e:	bf00      	nop
   12470:	00024e44 	.word	0x00024e44
   12474:	00024e84 	.word	0x00024e84
   12478:	00024904 	.word	0x00024904

0001247c <event_phy_upd_ind_prep>:
{
   1247c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (conn->llcp.phy_upd_ind.initiate) {
   12480:	f890 30e8 	ldrb.w	r3, [r0, #232]	; 0xe8
   12484:	f013 0201 	ands.w	r2, r3, #1
{
   12488:	4604      	mov	r4, r0
   1248a:	460d      	mov	r5, r1
	if (conn->llcp.phy_upd_ind.initiate) {
   1248c:	f040 8090 	bne.w	125b0 <event_phy_upd_ind_prep+0x134>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) &
   12490:	f8b0 10ea 	ldrh.w	r1, [r0, #234]	; 0xea
   12494:	1a69      	subs	r1, r5, r1
   12496:	0409      	lsls	r1, r1, #16
   12498:	f100 80d6 	bmi.w	12648 <event_phy_upd_ind_prep+0x1cc>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   1249c:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
   124a0:	2900      	cmp	r1, #0
   124a2:	469c      	mov	ip, r3
   124a4:	f2c0 80fb 	blt.w	1269e <event_phy_upd_ind_prep+0x222>
			conn->llcp_ack = conn->llcp_req;
   124a8:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   124ac:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
		old_tx = lll->phy_tx;
   124b0:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
		old_rx = lll->phy_rx;
   124b4:	f894 8061 	ldrb.w	r8, [r4, #97]	; 0x61
		uint16_t eff_rx_time = lll->max_rx_time;
   124b8:	f8b4 705e 	ldrh.w	r7, [r4, #94]	; 0x5e
		if (conn->llcp.phy_upd_ind.tx) {
   124bc:	f013 0f1c 	tst.w	r3, #28
		old_tx = lll->phy_tx;
   124c0:	f002 0907 	and.w	r9, r2, #7
		old_rx = lll->phy_rx;
   124c4:	f008 0807 	and.w	r8, r8, #7
		if (conn->llcp.phy_upd_ind.tx) {
   124c8:	f040 80c0 	bne.w	1264c <event_phy_upd_ind_prep+0x1d0>
		uint16_t eff_tx_time = lll->max_tx_time;
   124cc:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c
		if (conn->llcp.phy_upd_ind.rx) {
   124d0:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   124d4:	d008      	beq.n	124e8 <event_phy_upd_ind_prep+0x6c>
			lll->phy_rx = conn->llcp.phy_upd_ind.rx;
   124d6:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
   124da:	095b      	lsrs	r3, r3, #5
   124dc:	f363 0202 	bfi	r2, r3, #0, #3
   124e0:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
				calc_eff_time(lll->max_rx_octets, lll->phy_rx,
   124e4:	f44f 77a4 	mov.w	r7, #328	; 0x148
		rx = conn->llcp_rx;
   124e8:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
		LL_ASSERT(rx && rx->hdr.link);
   124ec:	2d00      	cmp	r5, #0
   124ee:	f000 80b6 	beq.w	1265e <event_phy_upd_ind_prep+0x1e2>
   124f2:	6828      	ldr	r0, [r5, #0]
   124f4:	2800      	cmp	r0, #0
   124f6:	f000 80b2 	beq.w	1265e <event_phy_upd_ind_prep+0x1e2>
		conn->llcp_rx = rx->hdr.link->mem;
   124fa:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   124fe:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
   12502:	6841      	ldr	r1, [r0, #4]
   12504:	f8c4 1108 	str.w	r1, [r4, #264]	; 0x108
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   12508:	f01c 0f02 	tst.w	ip, #2
   1250c:	f3c3 0102 	ubfx	r1, r3, #0, #3
   12510:	f3c2 0e02 	ubfx	lr, r2, #0, #3
   12514:	f003 0307 	and.w	r3, r3, #7
   12518:	f002 0207 	and.w	r2, r2, #7
   1251c:	d102      	bne.n	12524 <event_phy_upd_ind_prep+0xa8>
   1251e:	4599      	cmp	r9, r3
   12520:	f000 80c5 	beq.w	126ae <event_phy_upd_ind_prep+0x232>
		rx->hdr.handle = lll->handle;
   12524:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   12526:	80eb      	strh	r3, [r5, #6]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   12528:	221a      	movs	r2, #26
		upd->status = 0U;
   1252a:	2300      	movs	r3, #0
		upd->tx = lll->phy_tx;
   1252c:	7769      	strb	r1, [r5, #29]
		upd->rx = lll->phy_rx;
   1252e:	f885 e01e 	strb.w	lr, [r5, #30]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   12532:	712a      	strb	r2, [r5, #4]
		upd->status = 0U;
   12534:	772b      	strb	r3, [r5, #28]
		ll_rx_put(rx->hdr.link, rx);
   12536:	4629      	mov	r1, r5
   12538:	f7fe fce6 	bl	10f08 <ll_rx_put>
		rx = conn->llcp_rx;
   1253c:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
		LL_ASSERT(rx && rx->hdr.link);
   12540:	2d00      	cmp	r5, #0
   12542:	f000 809d 	beq.w	12680 <event_phy_upd_ind_prep+0x204>
   12546:	6828      	ldr	r0, [r5, #0]
   12548:	2800      	cmp	r0, #0
   1254a:	f000 8099 	beq.w	12680 <event_phy_upd_ind_prep+0x204>
		if ((eff_tx_time <= lll->max_tx_time) &&
   1254e:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
		conn->llcp_rx = rx->hdr.link->mem;
   12552:	6842      	ldr	r2, [r0, #4]
   12554:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
		if ((eff_tx_time <= lll->max_tx_time) &&
   12558:	42b3      	cmp	r3, r6
   1255a:	d30a      	bcc.n	12572 <event_phy_upd_ind_prep+0xf6>
   1255c:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   12560:	d807      	bhi.n	12572 <event_phy_upd_ind_prep+0xf6>
		    (eff_rx_time <= lll->max_rx_time) &&
   12562:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
		    (lll->max_tx_time <= max_tx_time) &&
   12566:	42bb      	cmp	r3, r7
   12568:	d303      	bcc.n	12572 <event_phy_upd_ind_prep+0xf6>
		    (eff_rx_time <= lll->max_rx_time) &&
   1256a:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   1256e:	f240 80b0 	bls.w	126d2 <event_phy_upd_ind_prep+0x256>
		lll->max_tx_time = eff_tx_time;
   12572:	f8a4 605c 	strh.w	r6, [r4, #92]	; 0x5c
		lll->max_rx_time = eff_rx_time;
   12576:	f8a4 705e 	strh.w	r7, [r4, #94]	; 0x5e
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   1257a:	7f2b      	ldrb	r3, [r5, #28]
		rx->hdr.handle = lll->handle;
   1257c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   1257e:	80ea      	strh	r2, [r5, #6]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   12580:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   12584:	2103      	movs	r1, #3
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   12586:	2209      	movs	r2, #9
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   12588:	7129      	strb	r1, [r5, #4]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   1258a:	772b      	strb	r3, [r5, #28]
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   1258c:	776a      	strb	r2, [r5, #29]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   1258e:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
   12592:	f8b4 2058 	ldrh.w	r2, [r4, #88]	; 0x58
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   12596:	842b      	strh	r3, [r5, #32]
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   12598:	2315      	movs	r3, #21
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
   1259a:	84aa      	strh	r2, [r5, #36]	; 0x24
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   1259c:	846f      	strh	r7, [r5, #34]	; 0x22
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);
   1259e:	84ee      	strh	r6, [r5, #38]	; 0x26
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   125a0:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
   125a2:	4629      	mov	r1, r5
   125a4:	f7fe fcb0 	bl	10f08 <ll_rx_put>
}
   125a8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		ll_rx_sched();
   125ac:	f7fe bcb6 	b.w	10f1c <ll_rx_sched>
		rx = ll_pdu_rx_alloc_peek(2);
   125b0:	2002      	movs	r0, #2
   125b2:	f7fe fcb9 	bl	10f28 <ll_pdu_rx_alloc_peek>
		if (!rx) {
   125b6:	4607      	mov	r7, r0
   125b8:	2800      	cmp	r0, #0
   125ba:	d045      	beq.n	12648 <event_phy_upd_ind_prep+0x1cc>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   125bc:	4883      	ldr	r0, [pc, #524]	; (127cc <event_phy_upd_ind_prep+0x350>)
   125be:	f7fa fd8d 	bl	d0dc <mem_acquire>
		if (!tx) {
   125c2:	4606      	mov	r6, r0
   125c4:	2800      	cmp	r0, #0
   125c6:	d03f      	beq.n	12648 <event_phy_upd_ind_prep+0x1cc>
		conn->llcp.phy_upd_ind.initiate = 0U;
   125c8:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   125cc:	f36f 0300 	bfc	r3, #0, #1
		if (!((conn->llcp.phy_upd_ind.tx |
   125d0:	f3c3 0882 	ubfx	r8, r3, #2, #3
		       conn->llcp.phy_upd_ind.rx) & 0x07)) {
   125d4:	f3c3 1242 	ubfx	r2, r3, #5, #3
		if (!((conn->llcp.phy_upd_ind.tx |
   125d8:	ea58 0802 	orrs.w	r8, r8, r2
		conn->llcp.phy_upd_ind.initiate = 0U;
   125dc:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
		if (!((conn->llcp.phy_upd_ind.tx |
   125e0:	b2db      	uxtb	r3, r3
   125e2:	d17f      	bne.n	126e4 <event_phy_upd_ind_prep+0x268>
			conn->llcp_ack = conn->llcp_req;
   125e4:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
			conn->llcp.phy_upd_ind.instant = 0U;
   125e8:	f8a4 80ea 	strh.w	r8, [r4, #234]	; 0xea
			if (conn->llcp.phy_upd_ind.cmd) {
   125ec:	079b      	lsls	r3, r3, #30
			conn->llcp_ack = conn->llcp_req;
   125ee:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			if (conn->llcp.phy_upd_ind.cmd) {
   125f2:	f100 80a8 	bmi.w	12746 <event_phy_upd_ind_prep+0x2ca>
   125f6:	4643      	mov	r3, r8
   125f8:	4641      	mov	r1, r8
		pdu_ctrl_tx->len =
   125fa:	2205      	movs	r2, #5
   125fc:	7172      	strb	r2, [r6, #5]
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   125fe:	f886 8008 	strb.w	r8, [r6, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12602:	7932      	ldrb	r2, [r6, #4]
		ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
   12604:	7273      	strb	r3, [r6, #9]
	    conn->tx_head &&
   12606:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   1260a:	8171      	strh	r1, [r6, #10]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1260c:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode =
   12610:	2118      	movs	r1, #24
   12612:	f8d4 01c8 	ldr.w	r0, [r4, #456]	; 0x1c8
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12616:	7132      	strb	r2, [r6, #4]
		pdu_ctrl_tx->llctrl.opcode =
   12618:	71f1      	strb	r1, [r6, #7]
	if (
   1261a:	b13b      	cbz	r3, 1262c <event_phy_upd_ind_prep+0x1b0>
	    !conn->llcp_enc.pause_tx &&
   1261c:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   12620:	0797      	lsls	r7, r2, #30
   12622:	d403      	bmi.n	1262c <event_phy_upd_ind_prep+0x1b0>
	    !conn->llcp_phy.pause_tx &&
   12624:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   12628:	07d5      	lsls	r5, r2, #31
   1262a:	d578      	bpl.n	1271e <event_phy_upd_ind_prep+0x2a2>
		if (!conn->tx_ctrl) {
   1262c:	2800      	cmp	r0, #0
   1262e:	f000 8084 	beq.w	1273a <event_phy_upd_ind_prep+0x2be>
	tx->next = conn->tx_ctrl_last->next;
   12632:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   12636:	681a      	ldr	r2, [r3, #0]
   12638:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
   1263a:	601e      	str	r6, [r3, #0]
	conn->tx_ctrl_last = tx;
   1263c:	6833      	ldr	r3, [r6, #0]
   1263e:	f8c4 61cc 	str.w	r6, [r4, #460]	; 0x1cc
	if (!tx->next) {
   12642:	b90b      	cbnz	r3, 12648 <event_phy_upd_ind_prep+0x1cc>
		conn->tx_data_last = tx;
   12644:	f8c4 61d4 	str.w	r6, [r4, #468]	; 0x1d4
}
   12648:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			lll->phy_tx = conn->llcp.phy_upd_ind.tx;
   1264c:	f3c3 0182 	ubfx	r1, r3, #2, #3
   12650:	f361 0202 	bfi	r2, r1, #0, #3
   12654:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
			eff_tx_time = calc_eff_time(lll->max_tx_octets,
   12658:	f44f 76a4 	mov.w	r6, #328	; 0x148
   1265c:	e738      	b.n	124d0 <event_phy_upd_ind_prep+0x54>
		LL_ASSERT(rx && rx->hdr.link);
   1265e:	4a5c      	ldr	r2, [pc, #368]	; (127d0 <event_phy_upd_ind_prep+0x354>)
   12660:	495c      	ldr	r1, [pc, #368]	; (127d4 <event_phy_upd_ind_prep+0x358>)
   12662:	485d      	ldr	r0, [pc, #372]	; (127d8 <event_phy_upd_ind_prep+0x35c>)
   12664:	f640 7396 	movw	r3, #3990	; 0xf96
   12668:	f00c f958 	bl	1e91c <printk>
   1266c:	4040      	eors	r0, r0
   1266e:	f380 8811 	msr	BASEPRI, r0
   12672:	f04f 0003 	mov.w	r0, #3
   12676:	df02      	svc	2
   12678:	6828      	ldr	r0, [r5, #0]
   1267a:	f894 c0e8 	ldrb.w	ip, [r4, #232]	; 0xe8
   1267e:	e73c      	b.n	124fa <event_phy_upd_ind_prep+0x7e>
		LL_ASSERT(rx && rx->hdr.link);
   12680:	4a53      	ldr	r2, [pc, #332]	; (127d0 <event_phy_upd_ind_prep+0x354>)
   12682:	4954      	ldr	r1, [pc, #336]	; (127d4 <event_phy_upd_ind_prep+0x358>)
   12684:	4854      	ldr	r0, [pc, #336]	; (127d8 <event_phy_upd_ind_prep+0x35c>)
   12686:	f640 73c2 	movw	r3, #4034	; 0xfc2
   1268a:	f00c f947 	bl	1e91c <printk>
   1268e:	4040      	eors	r0, r0
   12690:	f380 8811 	msr	BASEPRI, r0
   12694:	f04f 0003 	mov.w	r0, #3
   12698:	df02      	svc	2
   1269a:	6828      	ldr	r0, [r5, #0]
   1269c:	e757      	b.n	1254e <event_phy_upd_ind_prep+0xd2>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   1269e:	f890 10d9 	ldrb.w	r1, [r0, #217]	; 0xd9
   126a2:	2900      	cmp	r1, #0
   126a4:	f43f af00 	beq.w	124a8 <event_phy_upd_ind_prep+0x2c>
			conn->slave.llcp_type = LLCP_NONE;
   126a8:	f880 20d9 	strb.w	r2, [r0, #217]	; 0xd9
   126ac:	e700      	b.n	124b0 <event_phy_upd_ind_prep+0x34>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   126ae:	4590      	cmp	r8, r2
   126b0:	f47f af38 	bne.w	12524 <event_phy_upd_ind_prep+0xa8>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   126b4:	2301      	movs	r3, #1
   126b6:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
   126b8:	4629      	mov	r1, r5
   126ba:	f7fe fc25 	bl	10f08 <ll_rx_put>
				rx = conn->llcp_rx;
   126be:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
				LL_ASSERT(rx && rx->hdr.link);
   126c2:	2d00      	cmp	r5, #0
   126c4:	d06c      	beq.n	127a0 <event_phy_upd_ind_prep+0x324>
   126c6:	6828      	ldr	r0, [r5, #0]
   126c8:	2800      	cmp	r0, #0
   126ca:	d069      	beq.n	127a0 <event_phy_upd_ind_prep+0x324>
				conn->llcp_rx = rx->hdr.link->mem;
   126cc:	6843      	ldr	r3, [r0, #4]
   126ce:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   126d2:	2301      	movs	r3, #1
   126d4:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
   126d6:	4629      	mov	r1, r5
   126d8:	f7fe fc16 	bl	10f08 <ll_rx_put>
}
   126dc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			ll_rx_sched();
   126e0:	f7fe bc1c 	b.w	10f1c <ll_rx_sched>
			conn->llcp.phy_upd_ind.instant = event_counter +
   126e4:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
   126e6:	4429      	add	r1, r5
							 lll->latency +
   126e8:	3106      	adds	r1, #6
			conn->llcp.phy_upd_ind.instant = event_counter +
   126ea:	f8a4 10ea 	strh.w	r1, [r4, #234]	; 0xea
			(void)ll_pdu_rx_alloc();
   126ee:	f7fe fc39 	bl	10f64 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
   126f2:	683b      	ldr	r3, [r7, #0]
   126f4:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   126f8:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
   126fa:	f8c4 7108 	str.w	r7, [r4, #264]	; 0x108
			rx = ll_pdu_rx_alloc();
   126fe:	f7fe fc31 	bl	10f64 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
   12702:	6803      	ldr	r3, [r0, #0]
   12704:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   12708:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
   1270a:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   1270e:	f8b4 10ea 	ldrh.w	r1, [r4, #234]	; 0xea
   12712:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
   12716:	f3c3 0882 	ubfx	r8, r3, #2, #3
   1271a:	095b      	lsrs	r3, r3, #5
   1271c:	e76d      	b.n	125fa <event_phy_upd_ind_prep+0x17e>
		if (conn->tx_head == conn->tx_data) {
   1271e:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   12722:	4293      	cmp	r3, r2
   12724:	d02f      	beq.n	12786 <event_phy_upd_ind_prep+0x30a>
		} else if (!conn->tx_ctrl) {
   12726:	2800      	cmp	r0, #0
   12728:	d183      	bne.n	12632 <event_phy_upd_ind_prep+0x1b6>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1272a:	791a      	ldrb	r2, [r3, #4]
   1272c:	f002 0203 	and.w	r2, r2, #3
   12730:	2a03      	cmp	r2, #3
   12732:	d044      	beq.n	127be <event_phy_upd_ind_prep+0x342>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   12734:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
   12738:	e77d      	b.n	12636 <event_phy_upd_ind_prep+0x1ba>
			tx->next = conn->tx_head;
   1273a:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
   1273c:	e9c4 6671 	strd	r6, r6, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   12740:	f8c4 61cc 	str.w	r6, [r4, #460]	; 0x1cc
   12744:	e77d      	b.n	12642 <event_phy_upd_ind_prep+0x1c6>
				(void)ll_pdu_rx_alloc();
   12746:	f7fe fc0d 	bl	10f64 <ll_pdu_rx_alloc>
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1274a:	231a      	movs	r3, #26
				rx->hdr.handle = lll->handle;
   1274c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
				upd->status = 0U;
   1274e:	f887 801c 	strb.w	r8, [r7, #28]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   12752:	713b      	strb	r3, [r7, #4]
				upd->tx = lll->phy_tx;
   12754:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
				ll_rx_put(rx->hdr.link, rx);
   12758:	6838      	ldr	r0, [r7, #0]
				rx->hdr.handle = lll->handle;
   1275a:	80fa      	strh	r2, [r7, #6]
				upd->tx = lll->phy_tx;
   1275c:	f3c3 0302 	ubfx	r3, r3, #0, #3
   12760:	777b      	strb	r3, [r7, #29]
				upd->rx = lll->phy_rx;
   12762:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   12766:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1276a:	77bb      	strb	r3, [r7, #30]
				ll_rx_put(rx->hdr.link, rx);
   1276c:	4639      	mov	r1, r7
   1276e:	f7fe fbcb 	bl	10f08 <ll_rx_put>
				ll_rx_sched();
   12772:	f7fe fbd3 	bl	10f1c <ll_rx_sched>
   12776:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   1277a:	f8b4 10ea 	ldrh.w	r1, [r4, #234]	; 0xea
   1277e:	f3c3 0882 	ubfx	r8, r3, #2, #3
   12782:	095b      	lsrs	r3, r3, #5
   12784:	e739      	b.n	125fa <event_phy_upd_ind_prep+0x17e>
			conn->tx_data = conn->tx_data->next;
   12786:	681a      	ldr	r2, [r3, #0]
   12788:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1278c:	2800      	cmp	r0, #0
   1278e:	f47f af50 	bne.w	12632 <event_phy_upd_ind_prep+0x1b6>
			tx->next = conn->tx_head->next;
   12792:	681a      	ldr	r2, [r3, #0]
   12794:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
   12796:	601e      	str	r6, [r3, #0]
				conn->tx_ctrl = tx;
   12798:	6833      	ldr	r3, [r6, #0]
				conn->tx_ctrl_last = tx;
   1279a:	e9c4 6672 	strd	r6, r6, [r4, #456]	; 0x1c8
   1279e:	e750      	b.n	12642 <event_phy_upd_ind_prep+0x1c6>
				LL_ASSERT(rx && rx->hdr.link);
   127a0:	4a0b      	ldr	r2, [pc, #44]	; (127d0 <event_phy_upd_ind_prep+0x354>)
   127a2:	490c      	ldr	r1, [pc, #48]	; (127d4 <event_phy_upd_ind_prep+0x358>)
   127a4:	480c      	ldr	r0, [pc, #48]	; (127d8 <event_phy_upd_ind_prep+0x35c>)
   127a6:	f640 73a5 	movw	r3, #4005	; 0xfa5
   127aa:	f00c f8b7 	bl	1e91c <printk>
   127ae:	4040      	eors	r0, r0
   127b0:	f380 8811 	msr	BASEPRI, r0
   127b4:	f04f 0003 	mov.w	r0, #3
   127b8:	df02      	svc	2
   127ba:	6828      	ldr	r0, [r5, #0]
   127bc:	e786      	b.n	126cc <event_phy_upd_ind_prep+0x250>
	    ((pdu_data_tx->llctrl.opcode !=
   127be:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   127c0:	2a03      	cmp	r2, #3
   127c2:	d0e6      	beq.n	12792 <event_phy_upd_ind_prep+0x316>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   127c4:	2a0a      	cmp	r2, #10
   127c6:	d1b5      	bne.n	12734 <event_phy_upd_ind_prep+0x2b8>
   127c8:	e7e3      	b.n	12792 <event_phy_upd_ind_prep+0x316>
   127ca:	bf00      	nop
   127cc:	20002330 	.word	0x20002330
   127d0:	00024e44 	.word	0x00024e44
   127d4:	00024f10 	.word	0x00024f10
   127d8:	00024904 	.word	0x00024904

000127dc <ll_conn_acquire>:
	return mem_acquire(&conn_free);
   127dc:	4801      	ldr	r0, [pc, #4]	; (127e4 <ll_conn_acquire+0x8>)
   127de:	f7fa bc7d 	b.w	d0dc <mem_acquire>
   127e2:	bf00      	nop
   127e4:	200022a8 	.word	0x200022a8

000127e8 <ll_conn_release>:
	mem_release(conn, &conn_free);
   127e8:	4901      	ldr	r1, [pc, #4]	; (127f0 <ll_conn_release+0x8>)
   127ea:	f7fa bc8d 	b.w	d108 <mem_release>
   127ee:	bf00      	nop
   127f0:	200022a8 	.word	0x200022a8

000127f4 <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   127f4:	4902      	ldr	r1, [pc, #8]	; (12800 <ll_conn_handle_get+0xc>)
   127f6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   127fa:	f7fa bca3 	b.w	d144 <mem_index_get>
   127fe:	bf00      	nop
   12800:	200012a8 	.word	0x200012a8

00012804 <ll_conn_get>:
{
   12804:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   12806:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1280a:	4801      	ldr	r0, [pc, #4]	; (12810 <ll_conn_get+0xc>)
   1280c:	f7fa bc96 	b.w	d13c <mem_get>
   12810:	200012a8 	.word	0x200012a8

00012814 <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   12814:	b958      	cbnz	r0, 1282e <ll_connected_get+0x1a>
{
   12816:	b508      	push	{r3, lr}
   12818:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1281a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1281e:	4805      	ldr	r0, [pc, #20]	; (12834 <ll_connected_get+0x20>)
   12820:	f7fa fc8c 	bl	d13c <mem_get>
	if (conn->lll.handle != handle) {
   12824:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   12826:	b903      	cbnz	r3, 1282a <ll_connected_get+0x16>
}
   12828:	bd08      	pop	{r3, pc}
		return NULL;
   1282a:	2000      	movs	r0, #0
}
   1282c:	bd08      	pop	{r3, pc}
		return NULL;
   1282e:	2000      	movs	r0, #0
}
   12830:	4770      	bx	lr
   12832:	bf00      	nop
   12834:	200012a8 	.word	0x200012a8

00012838 <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
   12838:	4801      	ldr	r0, [pc, #4]	; (12840 <ll_tx_mem_acquire+0x8>)
   1283a:	f7fa bc4f 	b.w	d0dc <mem_acquire>
   1283e:	bf00      	nop
   12840:	200022c0 	.word	0x200022c0

00012844 <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
   12844:	4901      	ldr	r1, [pc, #4]	; (1284c <ll_tx_mem_release+0x8>)
   12846:	f7fa bc5f 	b.w	d108 <mem_release>
   1284a:	bf00      	nop
   1284c:	200022c0 	.word	0x200022c0

00012850 <ll_tx_mem_enqueue>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   12850:	2800      	cmp	r0, #0
   12852:	d13d      	bne.n	128d0 <ll_tx_mem_enqueue+0x80>
{
   12854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12856:	4602      	mov	r2, r0
   12858:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1285a:	481f      	ldr	r0, [pc, #124]	; (128d8 <ll_tx_mem_enqueue+0x88>)
   1285c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   12860:	f7fa fc6c 	bl	d13c <mem_get>
	if (conn->lll.handle != handle) {
   12864:	8d02      	ldrh	r2, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   12866:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   12868:	b9e2      	cbnz	r2, 128a4 <ll_tx_mem_enqueue+0x54>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
   1286a:	491c      	ldr	r1, [pc, #112]	; (128dc <ll_tx_mem_enqueue+0x8c>)
   1286c:	78cf      	ldrb	r7, [r1, #3]
	if (last == count) {
   1286e:	784e      	ldrb	r6, [r1, #1]
   12870:	7888      	ldrb	r0, [r1, #2]
	last = last + 1;
   12872:	1c7b      	adds	r3, r7, #1
   12874:	b2db      	uxtb	r3, r3
		last = 0U;
   12876:	429e      	cmp	r6, r3
   12878:	bf08      	it	eq
   1287a:	2300      	moveq	r3, #0
	if (last == first) {
   1287c:	4298      	cmp	r0, r3
   1287e:	d014      	beq.n	128aa <ll_tx_mem_enqueue+0x5a>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   12880:	460e      	mov	r6, r1
   12882:	f816 0b04 	ldrb.w	r0, [r6], #4
   12886:	fb10 f007 	smulbb	r0, r0, r7
	if (!lll_tx) {
   1288a:	1837      	adds	r7, r6, r0
   1288c:	d00d      	beq.n	128aa <ll_tx_mem_enqueue+0x5a>
	lll_tx->handle = handle;
   1288e:	5232      	strh	r2, [r6, r0]
	lll_tx->node = tx;
   12890:	607d      	str	r5, [r7, #4]
   12892:	7c20      	ldrb	r0, [r4, #16]
	*last = idx; /* Commit: Update write index */
   12894:	70cb      	strb	r3, [r1, #3]
	if (ull_ref_get(&conn->ull)) {
   12896:	b958      	cbnz	r0, 128b0 <ll_tx_mem_enqueue+0x60>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   12898:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1289c:	2b00      	cmp	r3, #0
   1289e:	db11      	blt.n	128c4 <ll_tx_mem_enqueue+0x74>
	return 0;
   128a0:	2000      	movs	r0, #0
}
   128a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   128a4:	f06f 0015 	mvn.w	r0, #21
}
   128a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   128aa:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   128ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		mfy.param = conn;
   128b0:	4b0b      	ldr	r3, [pc, #44]	; (128e0 <ll_tx_mem_enqueue+0x90>)
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   128b2:	2101      	movs	r1, #1
   128b4:	2003      	movs	r0, #3
		mfy.param = conn;
   128b6:	609c      	str	r4, [r3, #8]
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   128b8:	f7fa fce6 	bl	d288 <mayfly_enqueue>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   128bc:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   128c0:	2b00      	cmp	r3, #0
   128c2:	daed      	bge.n	128a0 <ll_tx_mem_enqueue+0x50>
		ull_slave_latency_cancel(conn, handle);
   128c4:	4620      	mov	r0, r4
   128c6:	2100      	movs	r1, #0
   128c8:	f004 f86e 	bl	169a8 <ull_slave_latency_cancel>
	return 0;
   128cc:	2000      	movs	r0, #0
}
   128ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   128d0:	f06f 0015 	mvn.w	r0, #21
}
   128d4:	4770      	bx	lr
   128d6:	bf00      	nop
   128d8:	200012a8 	.word	0x200012a8
   128dc:	200004ec 	.word	0x200004ec
   128e0:	20000510 	.word	0x20000510

000128e4 <ll_conn_update>:
{
   128e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   128e8:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   128ec:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
   128f0:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	if (handle >= CONFIG_BT_MAX_CONN) {
   128f4:	2800      	cmp	r0, #0
   128f6:	d155      	bne.n	129a4 <ll_conn_update+0xc0>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   128f8:	460c      	mov	r4, r1
   128fa:	4616      	mov	r6, r2
   128fc:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   12900:	4602      	mov	r2, r0
   12902:	4842      	ldr	r0, [pc, #264]	; (12a0c <ll_conn_update+0x128>)
   12904:	461d      	mov	r5, r3
   12906:	f7fa fc19 	bl	d13c <mem_get>
	if (conn->lll.handle != handle) {
   1290a:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   1290c:	2b00      	cmp	r3, #0
   1290e:	d149      	bne.n	129a4 <ll_conn_update+0xc0>
	if (!cmd) {
   12910:	b1e4      	cbz	r4, 1294c <ll_conn_update+0x68>
		cmd--;
   12912:	3c01      	subs	r4, #1
		if (cmd) {
   12914:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   12918:	f890 2184 	ldrb.w	r2, [r0, #388]	; 0x184
   1291c:	f890 1185 	ldrb.w	r1, [r0, #389]	; 0x185
   12920:	d052      	beq.n	129c8 <ll_conn_update+0xe4>
			if ((conn->llcp_conn_param.req ==
   12922:	428a      	cmp	r2, r1
   12924:	d03b      	beq.n	1299e <ll_conn_update+0xba>
			    (conn->llcp_conn_param.state !=
   12926:	f890 2186 	ldrb.w	r2, [r0, #390]	; 0x186
			     conn->llcp_conn_param.ack) ||
   1292a:	f002 0107 	and.w	r1, r2, #7
   1292e:	2903      	cmp	r1, #3
   12930:	d135      	bne.n	1299e <ll_conn_update+0xba>
			conn->llcp_conn_param.state = cmd;
   12932:	f004 0407 	and.w	r4, r4, #7
   12936:	f044 0408 	orr.w	r4, r4, #8
   1293a:	f022 020f 	bic.w	r2, r2, #15
   1293e:	4314      	orrs	r4, r2
   12940:	f880 4186 	strb.w	r4, [r0, #390]	; 0x186
			conn->llcp_conn_param.status = status;
   12944:	f880 6187 	strb.w	r6, [r0, #391]	; 0x187
	return 0;
   12948:	4618      	mov	r0, r3
   1294a:	e029      	b.n	129a0 <ll_conn_update+0xbc>
		if (!conn->llcp_conn_param.disabled &&
   1294c:	f890 3186 	ldrb.w	r3, [r0, #390]	; 0x186
   12950:	f013 0410 	ands.w	r4, r3, #16
   12954:	d029      	beq.n	129aa <ll_conn_update+0xc6>
		} else if (conn->lll.role) {
   12956:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   1295a:	2b00      	cmp	r3, #0
   1295c:	db4f      	blt.n	129fe <ll_conn_update+0x11a>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
   1295e:	f890 210c 	ldrb.w	r2, [r0, #268]	; 0x10c
   12962:	f890 310d 	ldrb.w	r3, [r0, #269]	; 0x10d
   12966:	4293      	cmp	r3, r2
   12968:	d119      	bne.n	1299e <ll_conn_update+0xba>
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1296a:	f890 210e 	ldrb.w	r2, [r0, #270]	; 0x10e
		conn->llcp_cu.interval = interval_max;
   1296e:	f8a0 9110 	strh.w	r9, [r0, #272]	; 0x110
		conn->llcp_cu.req++;
   12972:	3301      	adds	r3, #1
		conn->llcp_cu.win_size = 1U;
   12974:	2101      	movs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   12976:	f022 020f 	bic.w	r2, r2, #15
		conn->llcp_cu.req++;
   1297a:	f880 310c 	strb.w	r3, [r0, #268]	; 0x10c
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1297e:	f042 0209 	orr.w	r2, r2, #9
		conn->llcp_cu.win_offset_us = 0U;
   12982:	2300      	movs	r3, #0
		conn->llcp_cu.win_size = 1U;
   12984:	f880 111c 	strb.w	r1, [r0, #284]	; 0x11c
		conn->llcp_cu.latency = latency;
   12988:	f8a0 8112 	strh.w	r8, [r0, #274]	; 0x112
		conn->llcp_cu.timeout = timeout;
   1298c:	f8a0 7114 	strh.w	r7, [r0, #276]	; 0x114
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   12990:	f880 210e 	strb.w	r2, [r0, #270]	; 0x10e
		conn->llcp_cu.win_offset_us = 0U;
   12994:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
	return 0;
   12998:	4618      	mov	r0, r3
}
   1299a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   1299e:	200c      	movs	r0, #12
}
   129a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   129a4:	2002      	movs	r0, #2
}
   129a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		    (!conn->common.fex_valid ||
   129aa:	f890 30d8 	ldrb.w	r3, [r0, #216]	; 0xd8
		if (!conn->llcp_conn_param.disabled &&
   129ae:	07db      	lsls	r3, r3, #31
   129b0:	d506      	bpl.n	129c0 <ll_conn_update+0xdc>
		     (conn->llcp_feature.features_conn &
   129b2:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
   129b6:	4623      	mov	r3, r4
   129b8:	f001 0202 	and.w	r2, r1, #2
		    (!conn->common.fex_valid ||
   129bc:	4313      	orrs	r3, r2
   129be:	d0ca      	beq.n	12956 <ll_conn_update+0x72>
   129c0:	f890 2184 	ldrb.w	r2, [r0, #388]	; 0x184
   129c4:	f890 1185 	ldrb.w	r1, [r0, #389]	; 0x185
			if (conn->llcp_conn_param.req !=
   129c8:	428a      	cmp	r2, r1
   129ca:	d1e8      	bne.n	1299e <ll_conn_update+0xba>
			conn->llcp_conn_param.state = cmd;
   129cc:	f8b0 3186 	ldrh.w	r3, [r0, #390]	; 0x186
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   129d0:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
			conn->llcp_conn_param.interval_min = interval_min;
   129d4:	f8a0 5188 	strh.w	r5, [r0, #392]	; 0x188
			conn->llcp_conn_param.state = cmd;
   129d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
			conn->llcp_conn_param.req++;
   129dc:	3201      	adds	r2, #1
			conn->llcp_conn_param.state = cmd;
   129de:	f043 0308 	orr.w	r3, r3, #8
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   129e2:	2900      	cmp	r1, #0
			conn->llcp_conn_param.interval_max = interval_max;
   129e4:	f8a0 918a 	strh.w	r9, [r0, #394]	; 0x18a
			conn->llcp_conn_param.req++;
   129e8:	f880 2184 	strb.w	r2, [r0, #388]	; 0x184
			conn->llcp_conn_param.latency = latency;
   129ec:	f8a0 818c 	strh.w	r8, [r0, #396]	; 0x18c
			conn->llcp_conn_param.timeout = timeout;
   129f0:	f8a0 718e 	strh.w	r7, [r0, #398]	; 0x18e
			conn->llcp_conn_param.state = cmd;
   129f4:	f8a0 3186 	strh.w	r3, [r0, #390]	; 0x186
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   129f8:	db03      	blt.n	12a02 <ll_conn_update+0x11e>
	return 0;
   129fa:	2000      	movs	r0, #0
   129fc:	e7d0      	b.n	129a0 <ll_conn_update+0xbc>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   129fe:	201a      	movs	r0, #26
   12a00:	e7ce      	b.n	129a0 <ll_conn_update+0xbc>
				ull_slave_latency_cancel(conn, handle);
   12a02:	2100      	movs	r1, #0
   12a04:	f003 ffd0 	bl	169a8 <ull_slave_latency_cancel>
	return 0;
   12a08:	2000      	movs	r0, #0
   12a0a:	e7c9      	b.n	129a0 <ll_conn_update+0xbc>
   12a0c:	200012a8 	.word	0x200012a8

00012a10 <ll_chm_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   12a10:	b9c8      	cbnz	r0, 12a46 <ll_chm_get+0x36>
{
   12a12:	b538      	push	{r3, r4, r5, lr}
   12a14:	4602      	mov	r2, r0
   12a16:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   12a18:	480c      	ldr	r0, [pc, #48]	; (12a4c <ll_chm_get+0x3c>)
   12a1a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   12a1e:	f7fa fb8d 	bl	d13c <mem_get>
	if (conn->lll.handle != handle) {
   12a22:	8d05      	ldrh	r5, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   12a24:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   12a26:	b965      	cbnz	r5, 12a42 <ll_chm_get+0x32>
   12a28:	f100 0234 	add.w	r2, r0, #52	; 0x34
		conn->chm_updated = 0U;
   12a2c:	f883 51d8 	strb.w	r5, [r3, #472]	; 0x1d8
   12a30:	6811      	ldr	r1, [r2, #0]
   12a32:	6021      	str	r1, [r4, #0]
   12a34:	7911      	ldrb	r1, [r2, #4]
   12a36:	7121      	strb	r1, [r4, #4]
	} while (conn->chm_updated);
   12a38:	f893 01d8 	ldrb.w	r0, [r3, #472]	; 0x1d8
   12a3c:	2800      	cmp	r0, #0
   12a3e:	d1f5      	bne.n	12a2c <ll_chm_get+0x1c>
}
   12a40:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12a42:	2002      	movs	r0, #2
}
   12a44:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12a46:	2002      	movs	r0, #2
}
   12a48:	4770      	bx	lr
   12a4a:	bf00      	nop
   12a4c:	200012a8 	.word	0x200012a8

00012a50 <ll_terminate_ind_send>:
	switch (reason) {
   12a50:	2929      	cmp	r1, #41	; 0x29
{
   12a52:	b538      	push	{r3, r4, r5, lr}
   12a54:	460d      	mov	r5, r1
   12a56:	4604      	mov	r4, r0
	switch (reason) {
   12a58:	d819      	bhi.n	12a8e <ll_terminate_ind_send+0x3e>
   12a5a:	2904      	cmp	r1, #4
   12a5c:	d919      	bls.n	12a92 <ll_terminate_ind_send+0x42>
   12a5e:	1f4b      	subs	r3, r1, #5
   12a60:	2b24      	cmp	r3, #36	; 0x24
   12a62:	d816      	bhi.n	12a92 <ll_terminate_ind_send+0x42>
   12a64:	e8df f003 	tbb	[pc, r3]
   12a68:	15151517 	.word	0x15151517
   12a6c:	15151515 	.word	0x15151515
   12a70:	15151515 	.word	0x15151515
   12a74:	17171515 	.word	0x17171515
   12a78:	15151517 	.word	0x15151517
   12a7c:	15151715 	.word	0x15151715
   12a80:	15151515 	.word	0x15151515
   12a84:	15151515 	.word	0x15151515
   12a88:	15151515 	.word	0x15151515
   12a8c:	17          	.byte	0x17
   12a8d:	00          	.byte	0x00
   12a8e:	293b      	cmp	r1, #59	; 0x3b
   12a90:	d001      	beq.n	12a96 <ll_terminate_ind_send+0x46>
   12a92:	2012      	movs	r0, #18
}
   12a94:	bd38      	pop	{r3, r4, r5, pc}
	if (handle >= CONFIG_BT_MAX_CONN) {
   12a96:	b9a4      	cbnz	r4, 12ac2 <ll_terminate_ind_send+0x72>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   12a98:	4622      	mov	r2, r4
   12a9a:	480d      	ldr	r0, [pc, #52]	; (12ad0 <ll_terminate_ind_send+0x80>)
   12a9c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   12aa0:	f7fa fb4c 	bl	d13c <mem_get>
	if (conn->lll.handle != handle) {
   12aa4:	8d02      	ldrh	r2, [r0, #40]	; 0x28
   12aa6:	b962      	cbnz	r2, 12ac2 <ll_terminate_ind_send+0x72>
	conn->llcp_terminate.req++;
   12aa8:	f890 2140 	ldrb.w	r2, [r0, #320]	; 0x140
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   12aac:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
	conn->llcp_terminate.reason_own = reason;
   12ab0:	f880 5142 	strb.w	r5, [r0, #322]	; 0x142
	conn->llcp_terminate.req++;
   12ab4:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   12ab6:	2900      	cmp	r1, #0
	conn->llcp_terminate.req++;
   12ab8:	f880 2140 	strb.w	r2, [r0, #320]	; 0x140
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   12abc:	db03      	blt.n	12ac6 <ll_terminate_ind_send+0x76>
	return 0;
   12abe:	4620      	mov	r0, r4
}
   12ac0:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12ac2:	2002      	movs	r0, #2
}
   12ac4:	bd38      	pop	{r3, r4, r5, pc}
		ull_slave_latency_cancel(conn, handle);
   12ac6:	4621      	mov	r1, r4
   12ac8:	f003 ff6e 	bl	169a8 <ull_slave_latency_cancel>
	return 0;
   12acc:	4620      	mov	r0, r4
}
   12ace:	bd38      	pop	{r3, r4, r5, pc}
   12ad0:	200012a8 	.word	0x200012a8

00012ad4 <ll_feature_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   12ad4:	b9d8      	cbnz	r0, 12b0e <ll_feature_req_send+0x3a>
{
   12ad6:	b510      	push	{r4, lr}
   12ad8:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   12ada:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   12ade:	480f      	ldr	r0, [pc, #60]	; (12b1c <ll_feature_req_send+0x48>)
   12ae0:	f7fa fb2c 	bl	d13c <mem_get>
	if (conn->lll.handle != handle) {
   12ae4:	8d04      	ldrh	r4, [r0, #40]	; 0x28
   12ae6:	b984      	cbnz	r4, 12b0a <ll_feature_req_send+0x36>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
   12ae8:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
   12aec:	f890 2121 	ldrb.w	r2, [r0, #289]	; 0x121
   12af0:	428a      	cmp	r2, r1
   12af2:	d108      	bne.n	12b06 <ll_feature_req_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   12af4:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
	conn->llcp_feature.req++;
   12af8:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   12afa:	2900      	cmp	r1, #0
	conn->llcp_feature.req++;
   12afc:	f880 2120 	strb.w	r2, [r0, #288]	; 0x120
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   12b00:	db07      	blt.n	12b12 <ll_feature_req_send+0x3e>
	return 0;
   12b02:	4620      	mov	r0, r4
}
   12b04:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   12b06:	200c      	movs	r0, #12
}
   12b08:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12b0a:	2002      	movs	r0, #2
}
   12b0c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12b0e:	2002      	movs	r0, #2
}
   12b10:	4770      	bx	lr
		ull_slave_latency_cancel(conn, handle);
   12b12:	4621      	mov	r1, r4
   12b14:	f003 ff48 	bl	169a8 <ull_slave_latency_cancel>
	return 0;
   12b18:	4620      	mov	r0, r4
}
   12b1a:	bd10      	pop	{r4, pc}
   12b1c:	200012a8 	.word	0x200012a8

00012b20 <ll_version_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   12b20:	b9d8      	cbnz	r0, 12b5a <ll_version_ind_send+0x3a>
{
   12b22:	b510      	push	{r4, lr}
   12b24:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   12b26:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   12b2a:	480f      	ldr	r0, [pc, #60]	; (12b68 <ll_version_ind_send+0x48>)
   12b2c:	f7fa fb06 	bl	d13c <mem_get>
	if (conn->lll.handle != handle) {
   12b30:	8d04      	ldrh	r4, [r0, #40]	; 0x28
   12b32:	b984      	cbnz	r4, 12b56 <ll_version_ind_send+0x36>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
   12b34:	f890 1138 	ldrb.w	r1, [r0, #312]	; 0x138
   12b38:	f890 2139 	ldrb.w	r2, [r0, #313]	; 0x139
   12b3c:	428a      	cmp	r2, r1
   12b3e:	d108      	bne.n	12b52 <ll_version_ind_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   12b40:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
	conn->llcp_version.req++;
   12b44:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   12b46:	2900      	cmp	r1, #0
	conn->llcp_version.req++;
   12b48:	f880 2138 	strb.w	r2, [r0, #312]	; 0x138
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   12b4c:	db07      	blt.n	12b5e <ll_version_ind_send+0x3e>
	return 0;
   12b4e:	4620      	mov	r0, r4
}
   12b50:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   12b52:	200c      	movs	r0, #12
}
   12b54:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12b56:	2002      	movs	r0, #2
}
   12b58:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12b5a:	2002      	movs	r0, #2
}
   12b5c:	4770      	bx	lr
		ull_slave_latency_cancel(conn, handle);
   12b5e:	4621      	mov	r1, r4
   12b60:	f003 ff22 	bl	169a8 <ull_slave_latency_cancel>
	return 0;
   12b64:	4620      	mov	r0, r4
}
   12b66:	bd10      	pop	{r4, pc}
   12b68:	200012a8 	.word	0x200012a8

00012b6c <ll_length_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   12b6c:	2800      	cmp	r0, #0
   12b6e:	d14c      	bne.n	12c0a <ll_length_req_send+0x9e>
{
   12b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12b72:	460d      	mov	r5, r1
   12b74:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   12b76:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   12b7a:	4602      	mov	r2, r0
   12b7c:	4826      	ldr	r0, [pc, #152]	; (12c18 <ll_length_req_send+0xac>)
   12b7e:	f7fa fadd 	bl	d13c <mem_get>
	if (conn->lll.handle != handle) {
   12b82:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   12b84:	bb43      	cbnz	r3, 12bd8 <ll_length_req_send+0x6c>
	if (conn->llcp_length.disabled ||
   12b86:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
   12b8a:	f013 0108 	ands.w	r1, r3, #8
   12b8e:	d125      	bne.n	12bdc <ll_length_req_send+0x70>
	    (conn->common.fex_valid &&
   12b90:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
	if (conn->llcp_length.disabled ||
   12b94:	07d2      	lsls	r2, r2, #31
   12b96:	d507      	bpl.n	12ba8 <ll_length_req_send+0x3c>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_DLE)))) {
   12b98:	f8d0 2128 	ldr.w	r2, [r0, #296]	; 0x128
   12b9c:	460f      	mov	r7, r1
   12b9e:	f002 0620 	and.w	r6, r2, #32
	    (conn->common.fex_valid &&
   12ba2:	ea56 0207 	orrs.w	r2, r6, r7
   12ba6:	d019      	beq.n	12bdc <ll_length_req_send+0x70>
	if (conn->llcp_length.req != conn->llcp_length.ack) {
   12ba8:	f890 11ac 	ldrb.w	r1, [r0, #428]	; 0x1ac
   12bac:	f890 21ad 	ldrb.w	r2, [r0, #429]	; 0x1ad
   12bb0:	428a      	cmp	r2, r1
   12bb2:	d017      	beq.n	12be4 <ll_length_req_send+0x78>
		switch (conn->llcp_length.state) {
   12bb4:	f003 0307 	and.w	r3, r3, #7
   12bb8:	2b03      	cmp	r3, #3
   12bba:	d004      	beq.n	12bc6 <ll_length_req_send+0x5a>
   12bbc:	3303      	adds	r3, #3
   12bbe:	f003 0307 	and.w	r3, r3, #7
   12bc2:	2b01      	cmp	r3, #1
   12bc4:	d80c      	bhi.n	12be0 <ll_length_req_send+0x74>
			if (!conn->llcp_length.cache.tx_octets) {
   12bc6:	f8b0 31b8 	ldrh.w	r3, [r0, #440]	; 0x1b8
   12bca:	b94b      	cbnz	r3, 12be0 <ll_length_req_send+0x74>
				conn->llcp_length.cache.tx_octets = tx_octets;
   12bcc:	f8a0 51b8 	strh.w	r5, [r0, #440]	; 0x1b8
				conn->llcp_length.cache.tx_time = tx_time;
   12bd0:	f8a0 41ba 	strh.w	r4, [r0, #442]	; 0x1ba
				return 0;
   12bd4:	4618      	mov	r0, r3
}
   12bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12bd8:	2002      	movs	r0, #2
}
   12bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   12bdc:	201a      	movs	r0, #26
}
   12bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   12be0:	200c      	movs	r0, #12
}
   12be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   12be4:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   12be8:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
	conn->llcp_length.tx_octets = tx_octets;
   12bec:	f8a0 51b2 	strh.w	r5, [r0, #434]	; 0x1b2
	conn->llcp_length.req++;
   12bf0:	3201      	adds	r2, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   12bf2:	f36f 0302 	bfc	r3, #0, #3
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   12bf6:	2900      	cmp	r1, #0
	conn->llcp_length.req++;
   12bf8:	f880 21ac 	strb.w	r2, [r0, #428]	; 0x1ac
	conn->llcp_length.tx_time = tx_time;
   12bfc:	f8a0 41b6 	strh.w	r4, [r0, #438]	; 0x1b6
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   12c00:	f880 31ae 	strb.w	r3, [r0, #430]	; 0x1ae
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   12c04:	db03      	blt.n	12c0e <ll_length_req_send+0xa2>
	return 0;
   12c06:	2000      	movs	r0, #0
}
   12c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12c0a:	2002      	movs	r0, #2
}
   12c0c:	4770      	bx	lr
		ull_slave_latency_cancel(conn, handle);
   12c0e:	2100      	movs	r1, #0
   12c10:	f003 feca 	bl	169a8 <ull_slave_latency_cancel>
	return 0;
   12c14:	2000      	movs	r0, #0
}
   12c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12c18:	200012a8 	.word	0x200012a8

00012c1c <ll_length_default_get>:
	*max_tx_octets = default_tx_octets;
   12c1c:	4a03      	ldr	r2, [pc, #12]	; (12c2c <ll_length_default_get+0x10>)
	*max_tx_time = default_tx_time;
   12c1e:	4b04      	ldr	r3, [pc, #16]	; (12c30 <ll_length_default_get+0x14>)
	*max_tx_octets = default_tx_octets;
   12c20:	8812      	ldrh	r2, [r2, #0]
	*max_tx_time = default_tx_time;
   12c22:	881b      	ldrh	r3, [r3, #0]
	*max_tx_octets = default_tx_octets;
   12c24:	8002      	strh	r2, [r0, #0]
	*max_tx_time = default_tx_time;
   12c26:	800b      	strh	r3, [r1, #0]
}
   12c28:	4770      	bx	lr
   12c2a:	bf00      	nop
   12c2c:	20002e78 	.word	0x20002e78
   12c30:	20002e7a 	.word	0x20002e7a

00012c34 <ll_length_default_set>:
	default_tx_octets = max_tx_octets;
   12c34:	4a02      	ldr	r2, [pc, #8]	; (12c40 <ll_length_default_set+0xc>)
	default_tx_time = max_tx_time;
   12c36:	4b03      	ldr	r3, [pc, #12]	; (12c44 <ll_length_default_set+0x10>)
	default_tx_octets = max_tx_octets;
   12c38:	8010      	strh	r0, [r2, #0]
	default_tx_time = max_tx_time;
   12c3a:	8019      	strh	r1, [r3, #0]
}
   12c3c:	2000      	movs	r0, #0
   12c3e:	4770      	bx	lr
   12c40:	20002e78 	.word	0x20002e78
   12c44:	20002e7a 	.word	0x20002e7a

00012c48 <ll_length_max_get>:
{
   12c48:	b430      	push	{r4, r5}
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   12c4a:	251b      	movs	r5, #27
	*max_tx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   12c4c:	f44f 74a0 	mov.w	r4, #320	; 0x140
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   12c50:	8005      	strh	r5, [r0, #0]
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
   12c52:	8015      	strh	r5, [r2, #0]
	*max_tx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   12c54:	800c      	strh	r4, [r1, #0]
	*max_rx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   12c56:	801c      	strh	r4, [r3, #0]
}
   12c58:	bc30      	pop	{r4, r5}
   12c5a:	4770      	bx	lr

00012c5c <ll_phy_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   12c5c:	b9c0      	cbnz	r0, 12c90 <ll_phy_get+0x34>
{
   12c5e:	b538      	push	{r3, r4, r5, lr}
   12c60:	460d      	mov	r5, r1
   12c62:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   12c64:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   12c68:	4602      	mov	r2, r0
   12c6a:	480a      	ldr	r0, [pc, #40]	; (12c94 <ll_phy_get+0x38>)
   12c6c:	f7fa fa66 	bl	d13c <mem_get>
   12c70:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   12c72:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   12c74:	b950      	cbnz	r0, 12c8c <ll_phy_get+0x30>
	*tx = conn->lll.phy_tx;
   12c76:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   12c7a:	f3c2 0202 	ubfx	r2, r2, #0, #3
   12c7e:	702a      	strb	r2, [r5, #0]
	*rx = conn->lll.phy_rx;
   12c80:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
   12c84:	f3c3 0302 	ubfx	r3, r3, #0, #3
   12c88:	7023      	strb	r3, [r4, #0]
}
   12c8a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12c8c:	2002      	movs	r0, #2
}
   12c8e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12c90:	2002      	movs	r0, #2
}
   12c92:	4770      	bx	lr
   12c94:	200012a8 	.word	0x200012a8

00012c98 <ll_phy_default_set>:
	default_phy_tx = tx;
   12c98:	4a02      	ldr	r2, [pc, #8]	; (12ca4 <ll_phy_default_set+0xc>)
	default_phy_rx = rx;
   12c9a:	4b03      	ldr	r3, [pc, #12]	; (12ca8 <ll_phy_default_set+0x10>)
	default_phy_tx = tx;
   12c9c:	7010      	strb	r0, [r2, #0]
	default_phy_rx = rx;
   12c9e:	7019      	strb	r1, [r3, #0]
}
   12ca0:	2000      	movs	r0, #0
   12ca2:	4770      	bx	lr
   12ca4:	200035d4 	.word	0x200035d4
   12ca8:	200035d3 	.word	0x200035d3

00012cac <ll_phy_req_send>:
{
   12cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
   12cae:	2800      	cmp	r0, #0
   12cb0:	d13d      	bne.n	12d2e <ll_phy_req_send+0x82>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   12cb2:	460c      	mov	r4, r1
   12cb4:	4615      	mov	r5, r2
   12cb6:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   12cba:	4602      	mov	r2, r0
   12cbc:	4822      	ldr	r0, [pc, #136]	; (12d48 <ll_phy_req_send+0x9c>)
   12cbe:	461e      	mov	r6, r3
   12cc0:	f7fa fa3c 	bl	d13c <mem_get>
	if (conn->lll.handle != handle) {
   12cc4:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   12cc6:	bb93      	cbnz	r3, 12d2e <ll_phy_req_send+0x82>
	if (conn->llcp_phy.disabled ||
   12cc8:	f890 71bf 	ldrb.w	r7, [r0, #447]	; 0x1bf
   12ccc:	f017 0708 	ands.w	r7, r7, #8
   12cd0:	d130      	bne.n	12d34 <ll_phy_req_send+0x88>
	    (conn->common.fex_valid &&
   12cd2:	f890 30d8 	ldrb.w	r3, [r0, #216]	; 0xd8
	if (conn->llcp_phy.disabled ||
   12cd6:	07db      	lsls	r3, r3, #31
   12cd8:	d506      	bpl.n	12ce8 <ll_phy_req_send+0x3c>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_PHY_2M)) &&
   12cda:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
   12cde:	463b      	mov	r3, r7
   12ce0:	f401 6210 	and.w	r2, r1, #2304	; 0x900
   12ce4:	4313      	orrs	r3, r2
   12ce6:	d025      	beq.n	12d34 <ll_phy_req_send+0x88>
	if (conn->llcp_phy.req != conn->llcp_phy.ack) {
   12ce8:	f890 31bc 	ldrb.w	r3, [r0, #444]	; 0x1bc
   12cec:	f890 21bd 	ldrb.w	r2, [r0, #445]	; 0x1bd
   12cf0:	429a      	cmp	r2, r3
   12cf2:	d122      	bne.n	12d3a <ll_phy_req_send+0x8e>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   12cf4:	f004 0407 	and.w	r4, r4, #7
   12cf8:	00a4      	lsls	r4, r4, #2
   12cfa:	f8b0 11be 	ldrh.w	r1, [r0, #446]	; 0x1be
   12cfe:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
   12d02:	f006 0307 	and.w	r3, r6, #7
   12d06:	ea44 1343 	orr.w	r3, r4, r3, lsl #5
   12d0a:	f005 0501 	and.w	r5, r5, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   12d0e:	f990 4039 	ldrsb.w	r4, [r0, #57]	; 0x39
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   12d12:	ea43 2345 	orr.w	r3, r3, r5, lsl #9
   12d16:	f401 4179 	and.w	r1, r1, #63744	; 0xf900
	conn->llcp_phy.req++;
   12d1a:	3201      	adds	r2, #1
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   12d1c:	430b      	orrs	r3, r1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   12d1e:	2c00      	cmp	r4, #0
	conn->llcp_phy.req++;
   12d20:	f880 21bc 	strb.w	r2, [r0, #444]	; 0x1bc
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   12d24:	f8a0 31be 	strh.w	r3, [r0, #446]	; 0x1be
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   12d28:	db0a      	blt.n	12d40 <ll_phy_req_send+0x94>
}
   12d2a:	4638      	mov	r0, r7
   12d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12d2e:	2702      	movs	r7, #2
}
   12d30:	4638      	mov	r0, r7
   12d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   12d34:	271a      	movs	r7, #26
}
   12d36:	4638      	mov	r0, r7
   12d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   12d3a:	270c      	movs	r7, #12
}
   12d3c:	4638      	mov	r0, r7
   12d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ull_slave_latency_cancel(conn, handle);
   12d40:	2100      	movs	r1, #0
   12d42:	f003 fe31 	bl	169a8 <ull_slave_latency_cancel>
   12d46:	e7f0      	b.n	12d2a <ll_phy_req_send+0x7e>
   12d48:	200012a8 	.word	0x200012a8

00012d4c <ll_apto_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   12d4c:	b9d8      	cbnz	r0, 12d86 <ll_apto_get+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   12d4e:	4602      	mov	r2, r0
{
   12d50:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   12d52:	480e      	ldr	r0, [pc, #56]	; (12d8c <ll_apto_get+0x40>)
   12d54:	460c      	mov	r4, r1
   12d56:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   12d5a:	f7fa f9ef 	bl	d13c <mem_get>
   12d5e:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   12d60:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   12d62:	b970      	cbnz	r0, 12d82 <ll_apto_get+0x36>
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
   12d64:	f8b2 10ce 	ldrh.w	r1, [r2, #206]	; 0xce
   12d68:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
   12d6a:	4a09      	ldr	r2, [pc, #36]	; (12d90 <ll_apto_get+0x44>)
   12d6c:	fb03 f301 	mul.w	r3, r3, r1
   12d70:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
   12d74:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   12d78:	fba2 2303 	umull	r2, r3, r2, r3
   12d7c:	099b      	lsrs	r3, r3, #6
   12d7e:	8023      	strh	r3, [r4, #0]
}
   12d80:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12d82:	2002      	movs	r0, #2
}
   12d84:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12d86:	2002      	movs	r0, #2
}
   12d88:	4770      	bx	lr
   12d8a:	bf00      	nop
   12d8c:	200012a8 	.word	0x200012a8
   12d90:	10624dd3 	.word	0x10624dd3

00012d94 <ll_apto_set>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   12d94:	b9d8      	cbnz	r0, 12dce <ll_apto_set+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   12d96:	4602      	mov	r2, r0
{
   12d98:	b538      	push	{r3, r4, r5, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   12d9a:	480e      	ldr	r0, [pc, #56]	; (12dd4 <ll_apto_set+0x40>)
   12d9c:	460d      	mov	r5, r1
   12d9e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   12da2:	f7fa f9cb 	bl	d13c <mem_get>
   12da6:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   12da8:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   12daa:	b970      	cbnz	r0, 12dca <ll_apto_set+0x36>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
   12dac:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
   12dae:	f240 44e2 	movw	r4, #1250	; 0x4e2
   12db2:	fb04 f403 	mul.w	r4, r4, r3
   12db6:	f242 7310 	movw	r3, #10000	; 0x2710
   12dba:	fb03 4305 	mla	r3, r3, r5, r4
   12dbe:	3b01      	subs	r3, #1
   12dc0:	fbb3 f3f4 	udiv	r3, r3, r4
   12dc4:	f8a2 30ce 	strh.w	r3, [r2, #206]	; 0xce
}
   12dc8:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12dca:	2002      	movs	r0, #2
}
   12dcc:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12dce:	2002      	movs	r0, #2
}
   12dd0:	4770      	bx	lr
   12dd2:	bf00      	nop
   12dd4:	200012a8 	.word	0x200012a8

00012dd8 <ull_conn_init>:
	err = init_reset();
   12dd8:	f7ff b80c 	b.w	11df4 <init_reset>

00012ddc <ull_conn_reset>:
{
   12ddc:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   12dde:	2200      	movs	r2, #0
   12de0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   12de4:	4813      	ldr	r0, [pc, #76]	; (12e34 <ull_conn_reset+0x58>)
   12de6:	f7fa f9a9 	bl	d13c <mem_get>
   12dea:	4604      	mov	r4, r0
	err = ull_ticker_stop_with_mark(TICKER_ID_CONN_BASE + handle,
   12dec:	f100 021c 	add.w	r2, r0, #28
   12df0:	4601      	mov	r1, r0
   12df2:	2003      	movs	r0, #3
   12df4:	f7fe f9a0 	bl	11138 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   12df8:	b108      	cbz	r0, 12dfe <ull_conn_reset+0x22>
   12dfa:	3078      	adds	r0, #120	; 0x78
   12dfc:	d10b      	bne.n	12e16 <ull_conn_reset+0x3a>
	MFIFO_INIT(conn_tx);
   12dfe:	480e      	ldr	r0, [pc, #56]	; (12e38 <ull_conn_reset+0x5c>)
	MFIFO_INIT(conn_ack);
   12e00:	490e      	ldr	r1, [pc, #56]	; (12e3c <ull_conn_reset+0x60>)
	conn_upd_curr = NULL;
   12e02:	4a0f      	ldr	r2, [pc, #60]	; (12e40 <ull_conn_reset+0x64>)
	conn->lll.link_tx_free = NULL;
   12e04:	2300      	movs	r3, #0
	MFIFO_INIT(conn_tx);
   12e06:	8043      	strh	r3, [r0, #2]
	MFIFO_INIT(conn_ack);
   12e08:	804b      	strh	r3, [r1, #2]
	conn->lll.link_tx_free = NULL;
   12e0a:	6763      	str	r3, [r4, #116]	; 0x74
}
   12e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	conn_upd_curr = NULL;
   12e10:	6013      	str	r3, [r2, #0]
	err = init_reset();
   12e12:	f7fe bfef 	b.w	11df4 <init_reset>
	LL_ASSERT(err == 0 || err == -EALREADY);
   12e16:	4a0b      	ldr	r2, [pc, #44]	; (12e44 <ull_conn_reset+0x68>)
   12e18:	490b      	ldr	r1, [pc, #44]	; (12e48 <ull_conn_reset+0x6c>)
   12e1a:	480c      	ldr	r0, [pc, #48]	; (12e4c <ull_conn_reset+0x70>)
   12e1c:	f240 732d 	movw	r3, #1837	; 0x72d
   12e20:	f00b fd7c 	bl	1e91c <printk>
   12e24:	4040      	eors	r0, r0
   12e26:	f380 8811 	msr	BASEPRI, r0
   12e2a:	f04f 0003 	mov.w	r0, #3
   12e2e:	df02      	svc	2
   12e30:	e7e5      	b.n	12dfe <ull_conn_reset+0x22>
   12e32:	bf00      	nop
   12e34:	200012a8 	.word	0x200012a8
   12e38:	200004ec 	.word	0x200004ec
   12e3c:	200004a8 	.word	0x200004a8
   12e40:	200022ac 	.word	0x200022ac
   12e44:	00024e44 	.word	0x00024e44
   12e48:	00024f54 	.word	0x00024f54
   12e4c:	00024904 	.word	0x00024904

00012e50 <ull_conn_default_tx_octets_get>:
	return default_tx_octets;
   12e50:	4b01      	ldr	r3, [pc, #4]	; (12e58 <ull_conn_default_tx_octets_get+0x8>)
}
   12e52:	8818      	ldrh	r0, [r3, #0]
   12e54:	4770      	bx	lr
   12e56:	bf00      	nop
   12e58:	20002e78 	.word	0x20002e78

00012e5c <ull_conn_default_tx_time_get>:
	return default_tx_time;
   12e5c:	4b01      	ldr	r3, [pc, #4]	; (12e64 <ull_conn_default_tx_time_get+0x8>)
}
   12e5e:	8818      	ldrh	r0, [r3, #0]
   12e60:	4770      	bx	lr
   12e62:	bf00      	nop
   12e64:	20002e7a 	.word	0x20002e7a

00012e68 <ull_conn_default_phy_tx_get>:
	return default_phy_tx;
   12e68:	4b01      	ldr	r3, [pc, #4]	; (12e70 <ull_conn_default_phy_tx_get+0x8>)
}
   12e6a:	7818      	ldrb	r0, [r3, #0]
   12e6c:	4770      	bx	lr
   12e6e:	bf00      	nop
   12e70:	200035d4 	.word	0x200035d4

00012e74 <ull_conn_default_phy_rx_get>:
	return default_phy_rx;
   12e74:	4b01      	ldr	r3, [pc, #4]	; (12e7c <ull_conn_default_phy_rx_get+0x8>)
}
   12e76:	7818      	ldrb	r0, [r3, #0]
   12e78:	4770      	bx	lr
   12e7a:	bf00      	nop
   12e7c:	200035d3 	.word	0x200035d3

00012e80 <ull_conn_setup>:
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
   12e80:	688b      	ldr	r3, [r1, #8]
   12e82:	685b      	ldr	r3, [r3, #4]
{
   12e84:	b510      	push	{r4, lr}
	switch (lll->role) {
   12e86:	7f5c      	ldrb	r4, [r3, #29]
   12e88:	09e4      	lsrs	r4, r4, #7
   12e8a:	d10d      	bne.n	12ea8 <ull_conn_setup+0x28>
		LL_ASSERT(0);
   12e8c:	4a09      	ldr	r2, [pc, #36]	; (12eb4 <ull_conn_setup+0x34>)
   12e8e:	490a      	ldr	r1, [pc, #40]	; (12eb8 <ull_conn_setup+0x38>)
   12e90:	480a      	ldr	r0, [pc, #40]	; (12ebc <ull_conn_setup+0x3c>)
   12e92:	f240 3341 	movw	r3, #833	; 0x341
   12e96:	f00b fd41 	bl	1e91c <printk>
   12e9a:	4040      	eors	r0, r0
   12e9c:	f380 8811 	msr	BASEPRI, r0
   12ea0:	f04f 0003 	mov.w	r0, #3
   12ea4:	df02      	svc	2
}
   12ea6:	bd10      	pop	{r4, pc}
		ull_slave_setup(link, rx, ftr, lll);
   12ea8:	460a      	mov	r2, r1
}
   12eaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ull_slave_setup(link, rx, ftr, lll);
   12eae:	3208      	adds	r2, #8
   12eb0:	f7ee bf9a 	b.w	1de8 <ull_slave_setup>
   12eb4:	00024e44 	.word	0x00024e44
   12eb8:	00024974 	.word	0x00024974
   12ebc:	00024904 	.word	0x00024904

00012ec0 <ull_conn_rx>:
	conn = ll_connected_get((*rx)->hdr.handle);
   12ec0:	680b      	ldr	r3, [r1, #0]
	if (handle >= CONFIG_BT_MAX_CONN) {
   12ec2:	88da      	ldrh	r2, [r3, #6]
   12ec4:	2a00      	cmp	r2, #0
   12ec6:	f040 80c8 	bne.w	1305a <ull_conn_rx+0x19a>
{
   12eca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ece:	460d      	mov	r5, r1
   12ed0:	b085      	sub	sp, #20
   12ed2:	4607      	mov	r7, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   12ed4:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   12ed8:	48be      	ldr	r0, [pc, #760]	; (131d4 <ull_conn_rx+0x314>)
   12eda:	f7fa f92f 	bl	d13c <mem_get>
	if (conn->lll.handle != handle) {
   12ede:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   12ee0:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   12ee2:	2b00      	cmp	r3, #0
   12ee4:	f040 80fa 	bne.w	130dc <ull_conn_rx+0x21c>
	pdu_rx = (void *)(*rx)->pdu;
   12ee8:	682e      	ldr	r6, [r5, #0]
	switch (pdu_rx->ll_id) {
   12eea:	f890 1166 	ldrb.w	r1, [r0, #358]	; 0x166
   12eee:	7f32      	ldrb	r2, [r6, #28]
   12ef0:	f002 0203 	and.w	r2, r2, #3
   12ef4:	2a03      	cmp	r2, #3
   12ef6:	f001 0001 	and.w	r0, r1, #1
   12efa:	d128      	bne.n	12f4e <ull_conn_rx+0x8e>
			  struct pdu_data *pdu_rx, struct ll_conn *conn)
{
	int nack = 0;
	uint8_t opcode;

	opcode = pdu_rx->llctrl.opcode;
   12efc:	f896 801f 	ldrb.w	r8, [r6, #31]

#if defined(CONFIG_BT_CTLR_LE_ENC)
	/* FIXME: do check in individual case to reduce CPU time */
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   12f00:	2800      	cmp	r0, #0
   12f02:	d03a      	beq.n	12f7a <ull_conn_rx+0xba>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   12f04:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   12f08:	2b00      	cmp	r3, #0
   12f0a:	f001 0004 	and.w	r0, r1, #4
   12f0e:	f2c0 85b8 	blt.w	13a82 <ull_conn_rx+0xbc2>
	return (!conn->lll.role &&
   12f12:	2800      	cmp	r0, #0
   12f14:	f040 8506 	bne.w	13924 <ull_conn_rx+0xa64>
		((!conn->llcp_enc.refresh &&
   12f18:	f1b8 0f02 	cmp.w	r8, #2
   12f1c:	f000 83fa 	beq.w	13714 <ull_conn_rx+0x854>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   12f20:	f1b8 0f05 	cmp.w	r8, #5
   12f24:	d04b      	beq.n	12fbe <ull_conn_rx+0xfe>
   12f26:	f1b8 0f06 	cmp.w	r8, #6
   12f2a:	f000 85c6 	beq.w	13aba <ull_conn_rx+0xbfa>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   12f2e:	f1b8 0f0d 	cmp.w	r8, #13
   12f32:	f000 81ab 	beq.w	1328c <ull_conn_rx+0x3cc>
   12f36:	f1b8 0f11 	cmp.w	r8, #17
   12f3a:	f000 823e 	beq.w	133ba <ull_conn_rx+0x4fa>
		conn->llcp_terminate.reason_peer =
   12f3e:	233d      	movs	r3, #61	; 0x3d
   12f40:	f884 3143 	strb.w	r3, [r4, #323]	; 0x143
			BT_HCI_ERR_TERM_DUE_TO_MIC_FAIL;

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   12f44:	682b      	ldr	r3, [r5, #0]
   12f46:	2201      	movs	r2, #1
   12f48:	711a      	strb	r2, [r3, #4]

		return 0;
   12f4a:	2000      	movs	r0, #0
   12f4c:	e008      	b.n	12f60 <ull_conn_rx+0xa0>
	switch (pdu_rx->ll_id) {
   12f4e:	b952      	cbnz	r2, 12f66 <ull_conn_rx+0xa6>
		if (conn->llcp_enc.pause_rx) {
   12f50:	b118      	cbz	r0, 12f5a <ull_conn_rx+0x9a>
			conn->llcp_terminate.reason_peer =
   12f52:	233d      	movs	r3, #61	; 0x3d
   12f54:	f884 3143 	strb.w	r3, [r4, #323]	; 0x143
   12f58:	682e      	ldr	r6, [r5, #0]
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   12f5a:	2301      	movs	r3, #1
   12f5c:	7133      	strb	r3, [r6, #4]
	return 0;
   12f5e:	2000      	movs	r0, #0
}
   12f60:	b005      	add	sp, #20
   12f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->llcp_enc.pause_rx) {
   12f66:	2800      	cmp	r0, #0
   12f68:	d0f9      	beq.n	12f5e <ull_conn_rx+0x9e>
			conn->llcp_terminate.reason_peer =
   12f6a:	223d      	movs	r2, #61	; 0x3d
   12f6c:	f884 2143 	strb.w	r2, [r4, #323]	; 0x143
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   12f70:	682a      	ldr	r2, [r5, #0]
   12f72:	2101      	movs	r1, #1
	return 0;
   12f74:	4618      	mov	r0, r3
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   12f76:	7111      	strb	r1, [r2, #4]
   12f78:	e7f2      	b.n	12f60 <ull_conn_rx+0xa0>
	}
#endif /* CONFIG_BT_CTLR_LE_ENC */

	switch (opcode) {
   12f7a:	f1b8 0f18 	cmp.w	r8, #24
   12f7e:	d81e      	bhi.n	12fbe <ull_conn_rx+0xfe>
   12f80:	e8df f018 	tbh	[pc, r8, lsl #1]
   12f84:	03d40355 	.word	0x03d40355
   12f88:	040903c8 	.word	0x040903c8
   12f8c:	001d001d 	.word	0x001d001d
   12f90:	032b04aa 	.word	0x032b04aa
   12f94:	029c02ce 	.word	0x029c02ce
   12f98:	04560250 	.word	0x04560250
   12f9c:	018401c7 	.word	0x018401c7
   12fa0:	0173001d 	.word	0x0173001d
   12fa4:	021b001d 	.word	0x021b001d
   12fa8:	016901f6 	.word	0x016901f6
   12fac:	012e012e 	.word	0x012e012e
   12fb0:	001d00f6 	.word	0x001d00f6
   12fb4:	00b3      	.short	0x00b3
		nack = pause_enc_rsp_send(conn, *rx, 1);
		break;
#endif /* CONFIG_BT_PERIPHERAL */

	case PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP:
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   12fb6:	7f73      	ldrb	r3, [r6, #29]
   12fb8:	2b01      	cmp	r3, #1
   12fba:	f000 8442 	beq.w	13842 <ull_conn_rx+0x982>
   12fbe:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
   12fc2:	f000 0502 	and.w	r5, r0, #2
	if (conn->common.txn_lock) {
   12fc6:	2d00      	cmp	r5, #0
   12fc8:	d1c7      	bne.n	12f5a <ull_conn_rx+0x9a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   12fca:	4883      	ldr	r0, [pc, #524]	; (131d8 <ull_conn_rx+0x318>)
   12fcc:	f7fa f886 	bl	d0dc <mem_acquire>
	if (!tx) {
   12fd0:	2800      	cmp	r0, #0
   12fd2:	f000 856e 	beq.w	13ab2 <ull_conn_rx+0xbf2>
	conn->common.txn_lock = 1U;
   12fd6:	f894 10d8 	ldrb.w	r1, [r4, #216]	; 0xd8
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   12fda:	7903      	ldrb	r3, [r0, #4]
	conn->common.txn_lock = 1U;
   12fdc:	f041 0102 	orr.w	r1, r1, #2
   12fe0:	f884 10d8 	strb.w	r1, [r4, #216]	; 0xd8
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   12fe4:	2102      	movs	r1, #2
   12fe6:	7141      	strb	r1, [r0, #5]
	    conn->tx_head &&
   12fe8:	f8d4 11c4 	ldr.w	r1, [r4, #452]	; 0x1c4
	pdu->llctrl.unknown_rsp.type = type;
   12fec:	f880 8008 	strb.w	r8, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   12ff0:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   12ff4:	2207      	movs	r2, #7
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   12ff6:	7103      	strb	r3, [r0, #4]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   12ff8:	71c2      	strb	r2, [r0, #7]
	if (
   12ffa:	b1e9      	cbz	r1, 13038 <ull_conn_rx+0x178>
	    !conn->llcp_enc.pause_tx &&
   12ffc:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
	    conn->tx_head &&
   13000:	079a      	lsls	r2, r3, #30
   13002:	d419      	bmi.n	13038 <ull_conn_rx+0x178>
	    !conn->llcp_phy.pause_tx &&
   13004:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   13008:	07db      	lsls	r3, r3, #31
   1300a:	d415      	bmi.n	13038 <ull_conn_rx+0x178>
		if (conn->tx_head == conn->tx_data) {
   1300c:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
   13010:	4299      	cmp	r1, r3
		if (!conn->tx_ctrl) {
   13012:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   13016:	f000 855b 	beq.w	13ad0 <ull_conn_rx+0xc10>
		} else if (!conn->tx_ctrl) {
   1301a:	2b00      	cmp	r3, #0
   1301c:	f000 8574 	beq.w	13b08 <ull_conn_rx+0xc48>
   13020:	f8d4 11cc 	ldr.w	r1, [r4, #460]	; 0x1cc
	tx->next = conn->tx_ctrl_last->next;
   13024:	680b      	ldr	r3, [r1, #0]
   13026:	6003      	str	r3, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   13028:	6008      	str	r0, [r1, #0]
	if (!tx->next) {
   1302a:	6801      	ldr	r1, [r0, #0]
	conn->tx_ctrl_last = tx;
   1302c:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   13030:	2900      	cmp	r1, #0
   13032:	d192      	bne.n	12f5a <ull_conn_rx+0x9a>
   13034:	f000 bc43 	b.w	138be <ull_conn_rx+0x9fe>
		if (!conn->tx_ctrl) {
   13038:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   1303c:	2b00      	cmp	r3, #0
   1303e:	f000 847f 	beq.w	13940 <ull_conn_rx+0xa80>
	tx->next = conn->tx_ctrl_last->next;
   13042:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   13046:	681a      	ldr	r2, [r3, #0]
   13048:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   1304a:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   1304c:	6801      	ldr	r1, [r0, #0]
   1304e:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   13052:	2900      	cmp	r1, #0
   13054:	d181      	bne.n	12f5a <ull_conn_rx+0x9a>
   13056:	f000 bc32 	b.w	138be <ull_conn_rx+0x9fe>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1305a:	2201      	movs	r2, #1
   1305c:	711a      	strb	r2, [r3, #4]
		return 0;
   1305e:	2000      	movs	r0, #0
}
   13060:	4770      	bx	lr
			} else {
				struct pdu_data_llctrl *c = &pdu_rx->llctrl;
				struct pdu_data_llctrl_phy_req *p =
					&c->phy_req;

				conn->llcp_phy.state =
   13062:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
					LLCP_PHY_STATE_UPD;

				if (conn->llcp_phy.ack ==
   13066:	4281      	cmp	r1, r0
				conn->llcp_phy.state =
   13068:	f043 0303 	orr.w	r3, r3, #3
   1306c:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
				if (conn->llcp_phy.ack ==
   13070:	d10f      	bne.n	13092 <ull_conn_rx+0x1d2>
				    conn->llcp_phy.req) {
					conn->llcp_phy.ack--;

					conn->llcp_phy.cmd = 0U;

					conn->llcp_phy.tx =
   13072:	f8b4 21be 	ldrh.w	r2, [r4, #446]	; 0x1be
   13076:	4859      	ldr	r0, [pc, #356]	; (131dc <ull_conn_rx+0x31c>)
						conn->phy_pref_tx;
					conn->llcp_phy.rx =
						conn->phy_pref_rx;
   13078:	f894 31c0 	ldrb.w	r3, [r4, #448]	; 0x1c0
					conn->llcp_phy.tx =
   1307c:	4010      	ands	r0, r2
   1307e:	f240 42fc 	movw	r2, #1276	; 0x4fc
   13082:	ea02 0283 	and.w	r2, r2, r3, lsl #2
   13086:	4302      	orrs	r2, r0
					conn->llcp_phy.ack--;
   13088:	1e4b      	subs	r3, r1, #1
   1308a:	f884 31bd 	strb.w	r3, [r4, #445]	; 0x1bd
					conn->llcp_phy.tx =
   1308e:	f8a4 21be 	strh.w	r2, [r4, #446]	; 0x1be
				}

				conn->llcp_phy.tx &= p->rx_phys;
				conn->llcp_phy.rx &= p->tx_phys;
   13092:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
				conn->llcp_phy.tx &= p->rx_phys;
   13096:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
				conn->llcp_phy.rx &= p->tx_phys;
   1309a:	f896 1020 	ldrb.w	r1, [r6, #32]
				conn->llcp_phy.tx &= p->rx_phys;
   1309e:	f3c2 0082 	ubfx	r0, r2, #2, #3
   130a2:	4003      	ands	r3, r0
				conn->llcp_phy.rx &= p->tx_phys;
   130a4:	ea01 1152 	and.w	r1, r1, r2, lsr #5
				conn->llcp_phy.tx &= p->rx_phys;
   130a8:	009b      	lsls	r3, r3, #2
   130aa:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   130ae:	f002 0203 	and.w	r2, r2, #3
   130b2:	4313      	orrs	r3, r2

				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   130b4:	f013 0f1c 	tst.w	r3, #28
				conn->llcp_phy.tx &= p->rx_phys;
   130b8:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   130bc:	d002      	beq.n	130c4 <ull_conn_rx+0x204>
   130be:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   130c2:	d105      	bne.n	130d0 <ull_conn_rx+0x210>
					conn->llcp_phy.tx = 0;
   130c4:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   130c8:	f003 0303 	and.w	r3, r3, #3
   130cc:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
					conn->llcp_phy.rx = 0;
				}

				/* pause data packet tx */
				conn->llcp_phy.pause_tx = 1U;
   130d0:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   130d4:	f043 0301 	orr.w	r3, r3, #1
   130d8:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf

				/* Mark for buffer for release */
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   130dc:	682b      	ldr	r3, [r5, #0]
   130de:	2201      	movs	r2, #1
	int nack = 0;
   130e0:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   130e2:	711a      	strb	r2, [r3, #4]
}
   130e4:	b005      	add	sp, #20
   130e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
#if defined(CONFIG_BT_PERIPHERAL)
	case PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND:
	{
		uint8_t err;

		if (!conn->lll.role ||
   130ea:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   130ee:	2b00      	cmp	r3, #0
   130f0:	f6bf af65 	bge.w	12fbe <ull_conn_rx+0xfe>
   130f4:	7f73      	ldrb	r3, [r6, #29]
   130f6:	2b05      	cmp	r3, #5
   130f8:	f47f af61 	bne.w	12fbe <ull_conn_rx+0xfe>
	if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
   130fc:	f896 1020 	ldrb.w	r1, [r6, #32]
   13100:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   13104:	ea41 0003 	orr.w	r0, r1, r3
   13108:	f010 0007 	ands.w	r0, r0, #7
   1310c:	f040 876e 	bne.w	13fec <ull_conn_rx+0x112c>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   13110:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   13114:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   13118:	428b      	cmp	r3, r1
   1311a:	f43f af1e 	beq.w	12f5a <ull_conn_rx+0x9a>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   1311e:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   13122:	f003 0303 	and.w	r3, r3, #3
   13126:	2b02      	cmp	r3, #2
   13128:	f47f af17 	bne.w	12f5a <ull_conn_rx+0x9a>
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   1312c:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
   13130:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
		conn->llcp_phy.ack = conn->llcp_phy.req;
   13134:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
		conn->llcp_phy.pause_tx = 0U;
   13138:	f360 0300 	bfi	r3, r0, #0, #1
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   1313c:	4611      	mov	r1, r2
   1313e:	f362 1106 	bfi	r1, r2, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   13142:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
		if (!conn->llcp_phy.cmd) {
   13146:	f013 0304 	ands.w	r3, r3, #4
		conn->procedure_expire = 0U;
   1314a:	f8a4 00c8 	strh.w	r0, [r4, #200]	; 0xc8
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   1314e:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
   13152:	f3c2 0202 	ubfx	r2, r2, #0, #3
		if (!conn->llcp_phy.cmd) {
   13156:	f43f af0b 	beq.w	12f70 <ull_conn_rx+0xb0>
		(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1315a:	682b      	ldr	r3, [r5, #0]
   1315c:	211a      	movs	r1, #26
   1315e:	7119      	strb	r1, [r3, #4]
		p->status = 0U;
   13160:	7730      	strb	r0, [r6, #28]
		p->tx = conn->lll.phy_tx;
   13162:	7772      	strb	r2, [r6, #29]
		p->rx = conn->lll.phy_rx;
   13164:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   13168:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1316c:	77b3      	strb	r3, [r6, #30]
		    PDU_DATA_LLCTRL_LEN(phy_upd_ind) != pdu_rx->len) {
			goto ull_conn_rx_unknown_rsp_send;
		}

		err = phy_upd_ind_recv(conn, link, rx, pdu_rx);
		if (err) {
   1316e:	e6f7      	b.n	12f60 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(phy_req) != pdu_rx->len) {
   13170:	7f73      	ldrb	r3, [r6, #29]
   13172:	2b03      	cmp	r3, #3
   13174:	f47f af23 	bne.w	12fbe <ull_conn_rx+0xfe>
		if (!conn->lll.role) {
   13178:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1317c:	2b00      	cmp	r3, #0
   1317e:	f2c0 8627 	blt.w	13dd0 <ull_conn_rx+0xf10>
			if ((conn->llcp_phy.ack !=
   13182:	f894 11bd 	ldrb.w	r1, [r4, #445]	; 0x1bd
			     conn->llcp_phy.req) &&
   13186:	f894 01bc 	ldrb.w	r0, [r4, #444]	; 0x1bc
			if ((conn->llcp_phy.ack !=
   1318a:	4281      	cmp	r1, r0
   1318c:	d007      	beq.n	1319e <ull_conn_rx+0x2de>
			      LLCP_PHY_STATE_RSP_WAIT) ||
   1318e:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   13192:	f003 0303 	and.w	r3, r3, #3
			     conn->llcp_phy.req) &&
   13196:	3b01      	subs	r3, #1
   13198:	2b02      	cmp	r3, #2
   1319a:	f240 87db 	bls.w	14154 <ull_conn_rx+0x1294>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   1319e:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   131a2:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   131a6:	1a9b      	subs	r3, r3, r2
   131a8:	f003 0303 	and.w	r3, r3, #3
   131ac:	2b02      	cmp	r3, #2
   131ae:	f000 8716 	beq.w	13fde <ull_conn_rx+0x111e>
				     LLCP_ENCRYPTION)) ||
   131b2:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   131b6:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   131ba:	429a      	cmp	r2, r3
   131bc:	f43f af51 	beq.w	13062 <ull_conn_rx+0x1a2>
				nack = reject_ext_ind_send(conn, *rx,
   131c0:	4631      	mov	r1, r6
   131c2:	4620      	mov	r0, r4
   131c4:	232a      	movs	r3, #42	; 0x2a
   131c6:	2216      	movs	r2, #22
}
   131c8:	b005      	add	sp, #20
   131ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(conn, *rx,
   131ce:	f7fe bfd5 	b.w	1217c <reject_ext_ind_send>
   131d2:	bf00      	nop
   131d4:	200012a8 	.word	0x200012a8
   131d8:	20002330 	.word	0x20002330
   131dc:	fffffb03 	.word	0xfffffb03
		if (PDU_DATA_LLCTRL_LEN(length_req) != pdu_rx->len) {
   131e0:	7f73      	ldrb	r3, [r6, #29]
   131e2:	2b09      	cmp	r3, #9
   131e4:	f47f aeeb 	bne.w	12fbe <ull_conn_rx+0xfe>
	if (pdu_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   131e8:	f1b8 0f14 	cmp.w	r8, #20
   131ec:	f000 84ce 	beq.w	13b8c <ull_conn_rx+0xccc>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   131f0:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
	if (/* Local idle, and Peer request then complete the Peer procedure
   131f4:	f894 11ad 	ldrb.w	r1, [r4, #429]	; 0x1ad
	eff_rx_octets = conn->lll.max_rx_octets;
   131f8:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
	eff_tx_octets = conn->lll.max_tx_octets;
   131fc:	f8b4 9058 	ldrh.w	r9, [r4, #88]	; 0x58
	eff_rx_time = conn->lll.max_rx_time;
   13200:	f8b4 a05e 	ldrh.w	sl, [r4, #94]	; 0x5e
	eff_tx_time = conn->lll.max_tx_time;
   13204:	f8b4 b05c 	ldrh.w	fp, [r4, #92]	; 0x5c
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   13208:	9200      	str	r2, [sp, #0]
	if (/* Local idle, and Peer request then complete the Peer procedure
   1320a:	4291      	cmp	r1, r2
	eff_rx_octets = conn->lll.max_rx_octets;
   1320c:	9301      	str	r3, [sp, #4]
	if (/* Local idle, and Peer request then complete the Peer procedure
   1320e:	f001 810e 	beq.w	1442e <ull_conn_rx+0x156e>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   13212:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
	struct node_tx *tx = NULL;
   13216:	2100      	movs	r1, #0
	       tx) ||
   13218:	f002 0207 	and.w	r2, r2, #7
   1321c:	2a02      	cmp	r2, #2
   1321e:	f000 84dd 	beq.w	13bdc <ull_conn_rx+0xd1c>
   13222:	f896 801f 	ldrb.w	r8, [r6, #31]
		if (pdu_rx->llctrl.opcode != PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) {
   13226:	f1b8 0f15 	cmp.w	r8, #21
   1322a:	f43f ae98 	beq.w	12f5e <ull_conn_rx+0x9e>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   1322e:	4608      	mov	r0, r1
   13230:	49b7      	ldr	r1, [pc, #732]	; (13510 <ull_conn_rx+0x650>)
   13232:	f7f9 ff69 	bl	d108 <mem_release>
			if (conn->llcp_length.state ==
   13236:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
			conn->common.txn_lock = 0U;
   1323a:	f894 20d8 	ldrb.w	r2, [r4, #216]	; 0xd8
			if (conn->llcp_length.state ==
   1323e:	f003 0307 	and.w	r3, r3, #7
			conn->common.txn_lock = 0U;
   13242:	f36f 0241 	bfc	r2, #1, #1
			if (conn->llcp_length.state ==
   13246:	2b04      	cmp	r3, #4
			conn->common.txn_lock = 0U;
   13248:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
			if (conn->llcp_length.state ==
   1324c:	f47f ae87 	bne.w	12f5e <ull_conn_rx+0x9e>
				return -EBUSY;
   13250:	f06f 000f 	mvn.w	r0, #15
   13254:	e684      	b.n	12f60 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(ping_rsp) != pdu_rx->len) {
   13256:	7f71      	ldrb	r1, [r6, #29]
   13258:	2901      	cmp	r1, #1
   1325a:	f47f aeb0 	bne.w	12fbe <ull_conn_rx+0xfe>
		conn->procedure_expire = 0U;
   1325e:	2300      	movs	r3, #0
   13260:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   13264:	4618      	mov	r0, r3
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   13266:	7131      	strb	r1, [r6, #4]
		break;
   13268:	e67a      	b.n	12f60 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(conn_param_req) != pdu_rx->len) {
   1326a:	7f73      	ldrb	r3, [r6, #29]
   1326c:	2b18      	cmp	r3, #24
   1326e:	f47f aea6 	bne.w	12fbe <ull_conn_rx+0xfe>
		if (conn_upd_curr && (conn_upd_curr != conn)) {
   13272:	4fa8      	ldr	r7, [pc, #672]	; (13514 <ull_conn_rx+0x654>)
   13274:	683b      	ldr	r3, [r7, #0]
   13276:	2b00      	cmp	r3, #0
   13278:	f000 8450 	beq.w	13b1c <ull_conn_rx+0xc5c>
   1327c:	429c      	cmp	r4, r3
   1327e:	f000 844d 	beq.w	13b1c <ull_conn_rx+0xc5c>
			nack = reject_ext_ind_send(conn, *rx,
   13282:	4631      	mov	r1, r6
   13284:	4620      	mov	r0, r4
   13286:	2320      	movs	r3, #32
   13288:	220f      	movs	r2, #15
   1328a:	e79d      	b.n	131c8 <ull_conn_rx+0x308>
		if (PDU_DATA_LLCTRL_LEN(reject_ind) != pdu_rx->len) {
   1328c:	7f73      	ldrb	r3, [r6, #29]
   1328e:	2b02      	cmp	r3, #2
   13290:	f47f ae95 	bne.w	12fbe <ull_conn_rx+0xfe>
	} else if ((conn->llcp_ack != conn->llcp_req) &&
   13294:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   13298:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   1329c:	429a      	cmp	r2, r3
   1329e:	d004      	beq.n	132aa <ull_conn_rx+0x3ea>
   132a0:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
   132a4:	2a03      	cmp	r2, #3
   132a6:	f000 875a 	beq.w	1415e <ull_conn_rx+0x129e>
	} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   132aa:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
   132ae:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   132b2:	4293      	cmp	r3, r2
   132b4:	f000 8708 	beq.w	140c8 <ull_conn_rx+0x1208>
		rej_ext_ind->error_code = rej_ind->error_code;
   132b8:	f896 1020 	ldrb.w	r1, [r6, #32]
   132bc:	f886 1021 	strb.w	r1, [r6, #33]	; 0x21
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   132c0:	2923      	cmp	r1, #35	; 0x23
   132c2:	d012      	beq.n	132ea <ull_conn_rx+0x42a>
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   132c4:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
   132c8:	f894 01bf 	ldrb.w	r0, [r4, #447]	; 0x1bf
		conn->llcp_phy.ack = conn->llcp_phy.req;
   132cc:	f884 21bd 	strb.w	r2, [r4, #445]	; 0x1bd
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   132d0:	f3c3 0202 	ubfx	r2, r3, #0, #3
   132d4:	f362 1306 	bfi	r3, r2, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   132d8:	f36f 0000 	bfc	r0, #0, #1
		conn->procedure_expire = 0U;
   132dc:	2200      	movs	r2, #0
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   132de:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
   132e2:	f884 01bf 	strb.w	r0, [r4, #447]	; 0x1bf
		conn->procedure_expire = 0U;
   132e6:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	if (!conn->llcp_phy.cmd) {
   132ea:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   132ee:	0758      	lsls	r0, r3, #29
   132f0:	f57f ae33 	bpl.w	12f5a <ull_conn_rx+0x9a>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   132f4:	231a      	movs	r3, #26
	p->status = rej_ext_ind->error_code;
   132f6:	7731      	strb	r1, [r6, #28]
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   132f8:	7133      	strb	r3, [r6, #4]
	p->tx = conn->lll.phy_tx;
   132fa:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   132fe:	f3c3 0302 	ubfx	r3, r3, #0, #3
   13302:	7773      	strb	r3, [r6, #29]
	p->rx = conn->lll.phy_rx;
   13304:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   13308:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1330c:	77b3      	strb	r3, [r6, #30]
	int nack = 0;
   1330e:	2000      	movs	r0, #0
   13310:	e626      	b.n	12f60 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(version_ind) != pdu_rx->len) {
   13312:	7f75      	ldrb	r5, [r6, #29]
   13314:	2d06      	cmp	r5, #6
   13316:	f47f ae52 	bne.w	12fbe <ull_conn_rx+0xfe>
	if (!conn->llcp_version.tx) {
   1331a:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   1331e:	07df      	lsls	r7, r3, #31
   13320:	f140 85e8 	bpl.w	13ef4 <ull_conn_rx+0x1034>
	} else if (!conn->llcp_version.rx) {
   13324:	f013 0302 	ands.w	r3, r3, #2
   13328:	f47f ae17 	bne.w	12f5a <ull_conn_rx+0x9a>
		conn->llcp_version.ack = conn->llcp_version.req;
   1332c:	f894 2138 	ldrb.w	r2, [r4, #312]	; 0x138
		conn->procedure_expire = 0U;
   13330:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
		conn->llcp_version.ack = conn->llcp_version.req;
   13334:	f884 2139 	strb.w	r2, [r4, #313]	; 0x139
	conn->llcp_version.version_number = v->version_number;
   13338:	f896 3020 	ldrb.w	r3, [r6, #32]
   1333c:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   13340:	f896 1022 	ldrb.w	r1, [r6, #34]	; 0x22
   13344:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
	conn->llcp_version.rx = 1U;
   13348:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   1334c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   13350:	f8a4 213c 	strh.w	r2, [r4, #316]	; 0x13c
		sys_le16_to_cpu(v->sub_version_number);
   13354:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
   13358:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
	conn->llcp_version.rx = 1U;
   1335c:	f043 0302 	orr.w	r3, r3, #2
		sys_le16_to_cpu(v->sub_version_number);
   13360:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_version.sub_version_number =
   13364:	f8a4 213e 	strh.w	r2, [r4, #318]	; 0x13e
	conn->llcp_version.rx = 1U;
   13368:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
	return 0;
   1336c:	2000      	movs	r0, #0
   1336e:	e5f7      	b.n	12f60 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(ping_req) != pdu_rx->len) {
   13370:	7f77      	ldrb	r7, [r6, #29]
   13372:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
   13376:	2f01      	cmp	r7, #1
   13378:	f000 0502 	and.w	r5, r0, #2
   1337c:	f47f ae23 	bne.w	12fc6 <ull_conn_rx+0x106>
	if (conn->common.txn_lock) {
   13380:	2d00      	cmp	r5, #0
   13382:	f040 8628 	bne.w	13fd6 <ull_conn_rx+0x1116>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   13386:	4862      	ldr	r0, [pc, #392]	; (13510 <ull_conn_rx+0x650>)
   13388:	f7f9 fea8 	bl	d0dc <mem_acquire>
	if (!tx) {
   1338c:	4601      	mov	r1, r0
   1338e:	2800      	cmp	r0, #0
   13390:	f000 838f 	beq.w	13ab2 <ull_conn_rx+0xbf2>
	conn->common.txn_lock = 1U;
   13394:	f894 20d8 	ldrb.w	r2, [r4, #216]	; 0xd8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   13398:	7903      	ldrb	r3, [r0, #4]
	conn->common.txn_lock = 1U;
   1339a:	f042 0202 	orr.w	r2, r2, #2
   1339e:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   133a2:	f043 0303 	orr.w	r3, r3, #3
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   133a6:	2213      	movs	r2, #19
	pdu_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
   133a8:	7147      	strb	r7, [r0, #5]
	ctrl_tx_sec_enqueue(conn, tx);
   133aa:	4620      	mov	r0, r4
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   133ac:	710b      	strb	r3, [r1, #4]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   133ae:	71ca      	strb	r2, [r1, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   133b0:	f7fe ffca 	bl	12348 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   133b4:	7137      	strb	r7, [r6, #4]
	return 0;
   133b6:	4628      	mov	r0, r5
   133b8:	e5d2      	b.n	12f60 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(reject_ext_ind) != pdu_rx->len) {
   133ba:	7f73      	ldrb	r3, [r6, #29]
   133bc:	2b03      	cmp	r3, #3
   133be:	f47f adfe 	bne.w	12fbe <ull_conn_rx+0xfe>
	switch (rej_ext_ind->reject_opcode) {
   133c2:	f896 3020 	ldrb.w	r3, [r6, #32]
   133c6:	3b03      	subs	r3, #3
   133c8:	2b13      	cmp	r3, #19
   133ca:	f63f adc6 	bhi.w	12f5a <ull_conn_rx+0x9a>
   133ce:	a201      	add	r2, pc, #4	; (adr r2, 133d4 <ull_conn_rx+0x514>)
   133d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   133d4:	00013a43 	.word	0x00013a43
   133d8:	00012f5b 	.word	0x00012f5b
   133dc:	00012f5b 	.word	0x00012f5b
   133e0:	00012f5b 	.word	0x00012f5b
   133e4:	00012f5b 	.word	0x00012f5b
   133e8:	00012f5b 	.word	0x00012f5b
   133ec:	00012f5b 	.word	0x00012f5b
   133f0:	00012f5b 	.word	0x00012f5b
   133f4:	00012f5b 	.word	0x00012f5b
   133f8:	00012f5b 	.word	0x00012f5b
   133fc:	00012f5b 	.word	0x00012f5b
   13400:	00012f5b 	.word	0x00012f5b
   13404:	000139dd 	.word	0x000139dd
   13408:	00012f5b 	.word	0x00012f5b
   1340c:	00012f5b 	.word	0x00012f5b
   13410:	00012f5b 	.word	0x00012f5b
   13414:	00012f5b 	.word	0x00012f5b
   13418:	00013953 	.word	0x00013953
   1341c:	00012f5b 	.word	0x00012f5b
   13420:	00013991 	.word	0x00013991
		if (!conn->lll.role ||
   13424:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   13428:	2b00      	cmp	r3, #0
   1342a:	f6bf adc8 	bge.w	12fbe <ull_conn_rx+0xfe>
   1342e:	7f75      	ldrb	r5, [r6, #29]
   13430:	2d01      	cmp	r5, #1
   13432:	f47f adc4 	bne.w	12fbe <ull_conn_rx+0xfe>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   13436:	4836      	ldr	r0, [pc, #216]	; (13510 <ull_conn_rx+0x650>)
   13438:	f7f9 fe50 	bl	d0dc <mem_acquire>
		if (!tx) {
   1343c:	4601      	mov	r1, r0
   1343e:	2800      	cmp	r0, #0
   13440:	f000 8337 	beq.w	13ab2 <ull_conn_rx+0xbf2>
	conn->llcp_enc.pause_rx = 1U;
   13444:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
	conn->lll.enc_rx = 0;
   13448:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
	conn->llcp_enc.pause_rx = 1U;
   1344c:	f023 0305 	bic.w	r3, r3, #5
   13450:	f043 0305 	orr.w	r3, r3, #5
	conn->lll.enc_rx = 0;
   13454:	f36f 02c3 	bfc	r2, #3, #1
	conn->llcp_enc.pause_rx = 1U;
   13458:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
	conn->lll.enc_rx = 0;
   1345c:	f884 207a 	strb.w	r2, [r4, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13460:	7902      	ldrb	r2, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   13462:	7145      	strb	r5, [r0, #5]
	    conn->tx_head &&
   13464:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13468:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   1346c:	200b      	movs	r0, #11
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1346e:	710a      	strb	r2, [r1, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   13470:	71c8      	strb	r0, [r1, #7]
	if (
   13472:	2b00      	cmp	r3, #0
   13474:	f000 840f 	beq.w	13c96 <ull_conn_rx+0xdd6>
	    !conn->llcp_enc.pause_tx &&
   13478:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   1347c:	0795      	lsls	r5, r2, #30
   1347e:	f100 840a 	bmi.w	13c96 <ull_conn_rx+0xdd6>
	    !conn->llcp_phy.pause_tx &&
   13482:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   13486:	07d0      	lsls	r0, r2, #31
   13488:	f100 8405 	bmi.w	13c96 <ull_conn_rx+0xdd6>
		if (conn->tx_head == conn->tx_data) {
   1348c:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   13490:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   13492:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   13496:	f000 87e1 	beq.w	1445c <ull_conn_rx+0x159c>
		} else if (!conn->tx_ctrl) {
   1349a:	2a00      	cmp	r2, #0
   1349c:	f000 87d4 	beq.w	14448 <ull_conn_rx+0x1588>
	tx->next = conn->tx_ctrl_last->next;
   134a0:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   134a4:	681a      	ldr	r2, [r3, #0]
   134a6:	600a      	str	r2, [r1, #0]
	conn->tx_ctrl_last->next = tx;
   134a8:	6019      	str	r1, [r3, #0]
	conn->tx_ctrl_last = tx;
   134aa:	f8c4 11cc 	str.w	r1, [r4, #460]	; 0x1cc
	if (!tx->next) {
   134ae:	680b      	ldr	r3, [r1, #0]
   134b0:	2b00      	cmp	r3, #0
   134b2:	f47f ad52 	bne.w	12f5a <ull_conn_rx+0x9a>
		conn->tx_data_last = tx;
   134b6:	f8c4 11d4 	str.w	r1, [r4, #468]	; 0x1d4
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   134ba:	e54e      	b.n	12f5a <ull_conn_rx+0x9a>
		if ((!IS_ENABLED(CONFIG_BT_CTLR_SLAVE_FEAT_REQ) &&
   134bc:	7f73      	ldrb	r3, [r6, #29]
   134be:	2b09      	cmp	r3, #9
   134c0:	f47f ad7d 	bne.w	12fbe <ull_conn_rx+0xfe>
   134c4:	6a35      	ldr	r5, [r6, #32]
   134c6:	6a73      	ldr	r3, [r6, #36]	; 0x24
	feat &= LL_FEAT_BIT_MASK;
   134c8:	4913      	ldr	r1, [pc, #76]	; (13518 <ull_conn_rx+0x658>)
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   134ca:	e9d4 204a 	ldrd	r2, r0, [r4, #296]	; 0x128
	feat &= LL_FEAT_BIT_MASK;
   134ce:	4329      	orrs	r1, r5
   134d0:	f003 030f 	and.w	r3, r3, #15
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   134d4:	400a      	ands	r2, r1
   134d6:	4003      	ands	r3, r0
   134d8:	e9c4 234a 	strd	r2, r3, [r4, #296]	; 0x128
   134dc:	6a33      	ldr	r3, [r6, #32]
   134de:	6a75      	ldr	r5, [r6, #36]	; 0x24
	conn->common.fex_valid = 1U;
   134e0:	f894 20d8 	ldrb.w	r2, [r4, #216]	; 0xd8
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   134e4:	490d      	ldr	r1, [pc, #52]	; (1351c <ull_conn_rx+0x65c>)
	conn->llcp_feature.ack = conn->llcp_feature.req;
   134e6:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
   134ea:	f884 0121 	strb.w	r0, [r4, #289]	; 0x121
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   134ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   134f2:	4319      	orrs	r1, r3
   134f4:	f005 050f 	and.w	r5, r5, #15
	feat &= LL_FEAT_BIT_MASK;
   134f8:	2300      	movs	r3, #0
	conn->common.fex_valid = 1U;
   134fa:	f042 0201 	orr.w	r2, r2, #1
	conn->llcp_feature.features_peer =
   134fe:	e9c4 154c 	strd	r1, r5, [r4, #304]	; 0x130
	conn->common.fex_valid = 1U;
   13502:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
	conn->procedure_expire = 0U;
   13506:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   1350a:	4618      	mov	r0, r3
}
   1350c:	e528      	b.n	12f60 <ull_conn_rx+0xa0>
   1350e:	bf00      	nop
   13510:	20002330 	.word	0x20002330
   13514:	200022ac 	.word	0x200022ac
   13518:	087830d0 	.word	0x087830d0
   1351c:	08783050 	.word	0x08783050
		if (!conn->lll.role ||
   13520:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   13524:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
   13528:	2b00      	cmp	r3, #0
   1352a:	f000 0502 	and.w	r5, r0, #2
   1352e:	f6bf ad4a 	bge.w	12fc6 <ull_conn_rx+0x106>
   13532:	7f77      	ldrb	r7, [r6, #29]
   13534:	2f09      	cmp	r7, #9
   13536:	f47f ad46 	bne.w	12fc6 <ull_conn_rx+0x106>
	if (conn->common.txn_lock) {
   1353a:	2d00      	cmp	r5, #0
   1353c:	f47f ad0d 	bne.w	12f5a <ull_conn_rx+0x9a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   13540:	48e1      	ldr	r0, [pc, #900]	; (138c8 <ull_conn_rx+0xa08>)
   13542:	f7f9 fdcb 	bl	d0dc <mem_acquire>
	if (!tx) {
   13546:	4601      	mov	r1, r0
   13548:	2800      	cmp	r0, #0
   1354a:	f000 82b2 	beq.w	13ab2 <ull_conn_rx+0xbf2>
	conn->common.txn_lock = 1U;
   1354e:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
	feat &= LL_FEAT_BIT_MASK;
   13552:	48de      	ldr	r0, [pc, #888]	; (138cc <ull_conn_rx+0xa0c>)
	conn->common.txn_lock = 1U;
   13554:	f043 0302 	orr.w	r3, r3, #2
   13558:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
   1355c:	6a32      	ldr	r2, [r6, #32]
   1355e:	6a73      	ldr	r3, [r6, #36]	; 0x24
	feat &= LL_FEAT_BIT_MASK;
   13560:	4310      	orrs	r0, r2
   13562:	f003 020f 	and.w	r2, r3, #15
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   13566:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1356a:	4018      	ands	r0, r3
   1356c:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
   13570:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
   13574:	4013      	ands	r3, r2
   13576:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
   1357a:	f8d6 c020 	ldr.w	ip, [r6, #32]
   1357e:	6a72      	ldr	r2, [r6, #36]	; 0x24
	conn->common.fex_valid = 1U;
   13580:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   13584:	48d2      	ldr	r0, [pc, #840]	; (138d0 <ull_conn_rx+0xa10>)
   13586:	f02c 0c80 	bic.w	ip, ip, #128	; 0x80
   1358a:	ea4c 0000 	orr.w	r0, ip, r0
   1358e:	f002 020f 	and.w	r2, r2, #15
	conn->common.fex_valid = 1U;
   13592:	f043 0301 	orr.w	r3, r3, #1
	conn->llcp_feature.features_peer =
   13596:	e9c4 024c 	strd	r0, r2, [r4, #304]	; 0x130
	conn->common.fex_valid = 1U;
   1359a:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
__ssp_bos_icheck3(memset, void *, int)
   1359e:	608d      	str	r5, [r1, #8]
   135a0:	60cd      	str	r5, [r1, #12]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   135a2:	714f      	strb	r7, [r1, #5]
	feat_result &= 0xFF;
   135a4:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   135a8:	790b      	ldrb	r3, [r1, #4]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   135aa:	71cf      	strb	r7, [r1, #7]
	feat_result &= 0xFF;
   135ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   135b0:	f043 0303 	orr.w	r3, r3, #3
	dst[1] = val >> 8;
   135b4:	f04f 0c41 	mov.w	ip, #65	; 0x41
	dst[0] = val;
   135b8:	2701      	movs	r7, #1
	ctrl_tx_sec_enqueue(conn, tx);
   135ba:	4620      	mov	r0, r4
   135bc:	720a      	strb	r2, [r1, #8]
	dst[1] = val >> 8;
   135be:	72cd      	strb	r5, [r1, #11]
	dst[0] = val;
   135c0:	730d      	strb	r5, [r1, #12]
	dst[1] = val >> 8;
   135c2:	734d      	strb	r5, [r1, #13]
	dst[0] = val;
   135c4:	738d      	strb	r5, [r1, #14]
	dst[1] = val >> 8;
   135c6:	73cd      	strb	r5, [r1, #15]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   135c8:	710b      	strb	r3, [r1, #4]
   135ca:	f881 c009 	strb.w	ip, [r1, #9]
	dst[0] = val;
   135ce:	728f      	strb	r7, [r1, #10]
	ctrl_tx_sec_enqueue(conn, tx);
   135d0:	f7fe feba 	bl	12348 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   135d4:	7137      	strb	r7, [r6, #4]
	return 0;
   135d6:	4628      	mov	r0, r5
   135d8:	e4c2      	b.n	12f60 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(unknown_rsp) != pdu_rx->len) {
   135da:	7f73      	ldrb	r3, [r6, #29]
   135dc:	2b02      	cmp	r3, #2
   135de:	f47f acee 	bne.w	12fbe <ull_conn_rx+0xfe>
		} else if ((conn->llcp_conn_param.ack !=
   135e2:	f894 1185 	ldrb.w	r1, [r4, #389]	; 0x185
   135e6:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   135ea:	f896 2020 	ldrb.w	r2, [r6, #32]
   135ee:	4299      	cmp	r1, r3
   135f0:	d002      	beq.n	135f8 <ull_conn_rx+0x738>
			    conn->llcp_conn_param.req) &&
   135f2:	2a0f      	cmp	r2, #15
   135f4:	f000 84a4 	beq.w	13f40 <ull_conn_rx+0x1080>
		} else if ((conn->llcp_length.req != conn->llcp_length.ack) &&
   135f8:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
   135fc:	f894 11ad 	ldrb.w	r1, [r4, #429]	; 0x1ad
   13600:	4299      	cmp	r1, r3
   13602:	d002      	beq.n	1360a <ull_conn_rx+0x74a>
   13604:	2a14      	cmp	r2, #20
   13606:	f000 8595 	beq.w	14134 <ull_conn_rx+0x1274>
		} else if ((conn->llcp_phy.req != conn->llcp_phy.ack) &&
   1360a:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   1360e:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   13612:	428b      	cmp	r3, r1
   13614:	d002      	beq.n	1361c <ull_conn_rx+0x75c>
   13616:	2a16      	cmp	r2, #22
   13618:	f000 85c2 	beq.w	141a0 <ull_conn_rx+0x12e0>
			switch (llctrl->unknown_rsp.type) {
   1361c:	2a12      	cmp	r2, #18
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1361e:	bf04      	itt	eq
   13620:	2301      	moveq	r3, #1
   13622:	7133      	strbeq	r3, [r6, #4]
		conn->procedure_expire = 0U;
   13624:	2300      	movs	r3, #0
   13626:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   1362a:	4618      	mov	r0, r3
		break;
   1362c:	e498      	b.n	12f60 <ull_conn_rx+0xa0>
		if (!conn->lll.role ||
   1362e:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   13632:	2b00      	cmp	r3, #0
   13634:	f6bf acc3 	bge.w	12fbe <ull_conn_rx+0xfe>
   13638:	7f73      	ldrb	r3, [r6, #29]
   1363a:	2b0c      	cmp	r3, #12
   1363c:	f47f acbf 	bne.w	12fbe <ull_conn_rx+0xfe>
	instant = sys_le16_to_cpu(pdu->llctrl.conn_update_ind.instant);
   13640:	f8b6 0029 	ldrh.w	r0, [r6, #41]	; 0x29
	if (((instant - conn->lll.event_counter) & 0xFFFF) > 0x7FFF) {
   13644:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   13646:	1ac3      	subs	r3, r0, r3
   13648:	041b      	lsls	r3, r3, #16
   1364a:	f100 8598 	bmi.w	1417e <ull_conn_rx+0x12be>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   1364e:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   13652:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   13656:	1a9b      	subs	r3, r3, r2
   13658:	f003 0303 	and.w	r3, r3, #3
   1365c:	2b02      	cmp	r3, #2
   1365e:	f000 862b 	beq.w	142b8 <ull_conn_rx+0x13f8>
	if (!conn_upd_curr) {
   13662:	4b9c      	ldr	r3, [pc, #624]	; (138d4 <ull_conn_rx+0xa14>)
   13664:	681a      	ldr	r2, [r3, #0]
   13666:	2a00      	cmp	r2, #0
   13668:	f000 8638 	beq.w	142dc <ull_conn_rx+0x141c>
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   1366c:	f896 3020 	ldrb.w	r3, [r6, #32]
   13670:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) *
   13674:	f8b6 1021 	ldrh.w	r1, [r6, #33]	; 0x21
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   13678:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) *
   1367c:	f240 42e2 	movw	r2, #1250	; 0x4e2
   13680:	fb02 f201 	mul.w	r2, r2, r1
	conn->llcp_cu.win_offset_us =
   13684:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.interval);
   13688:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
   1368c:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
   13690:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_cu.interval =
   13694:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.latency);
   13698:	f896 1026 	ldrb.w	r1, [r6, #38]	; 0x26
   1369c:	f896 2025 	ldrb.w	r2, [r6, #37]	; 0x25
   136a0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_cu.latency =
   136a4:	f8a4 2112 	strh.w	r2, [r4, #274]	; 0x112
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   136a8:	f896 1027 	ldrb.w	r1, [r6, #39]	; 0x27
	conn->llcp_cu.ack--;
   136ac:	f894 210d 	ldrb.w	r2, [r4, #269]	; 0x10d
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   136b0:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
	conn->llcp.conn_upd.instant = instant;
   136b4:	f8a4 00e8 	strh.w	r0, [r4, #232]	; 0xe8
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   136b8:	f023 030f 	bic.w	r3, r3, #15
	link->mem = conn->llcp_rx;
   136bc:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   136c0:	f043 0308 	orr.w	r3, r3, #8
	conn->llcp_cu.ack--;
   136c4:	3a01      	subs	r2, #1
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   136c6:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
	conn->llcp_cu.ack--;
   136ca:	f884 210d 	strb.w	r2, [r4, #269]	; 0x10d
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   136ce:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
	conn->llcp_cu.timeout =
   136d2:	f8a4 1114 	strh.w	r1, [r4, #276]	; 0x114
	link->mem = conn->llcp_rx;
   136d6:	6078      	str	r0, [r7, #4]
	(*rx)->hdr.link = link;
   136d8:	682b      	ldr	r3, [r5, #0]
   136da:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
   136dc:	682b      	ldr	r3, [r5, #0]
   136de:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
	*rx = NULL;
   136e2:	2300      	movs	r3, #0
   136e4:	602b      	str	r3, [r5, #0]
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   136e6:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   136ea:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   136ee:	4293      	cmp	r3, r2
   136f0:	d098      	beq.n	13624 <ull_conn_rx+0x764>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
   136f2:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   136f6:	f003 0307 	and.w	r3, r3, #7
   136fa:	2b04      	cmp	r3, #4
   136fc:	d192      	bne.n	13624 <ull_conn_rx+0x764>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   136fe:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
		if (err) {
   13702:	e78f      	b.n	13624 <ull_conn_rx+0x764>
		((!conn->llcp_enc.refresh &&
   13704:	f1b8 0f07 	cmp.w	r8, #7
   13708:	f43f af67 	beq.w	135da <ull_conn_rx+0x71a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
   1370c:	f1b8 0f02 	cmp.w	r8, #2
   13710:	f040 81c5 	bne.w	13a9e <ull_conn_rx+0xbde>
		if (PDU_DATA_LLCTRL_LEN(terminate_ind) != pdu_rx->len) {
   13714:	7f73      	ldrb	r3, [r6, #29]
   13716:	2b02      	cmp	r3, #2
   13718:	f47f ac51 	bne.w	12fbe <ull_conn_rx+0xfe>
	conn->llcp_terminate.reason_peer = pdu->llctrl.terminate_ind.error_code;
   1371c:	f896 3020 	ldrb.w	r3, [r6, #32]
   13720:	f884 3143 	strb.w	r3, [r4, #323]	; 0x143
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   13724:	2301      	movs	r3, #1
   13726:	7133      	strb	r3, [r6, #4]
	int nack = 0;
   13728:	2000      	movs	r0, #0
}
   1372a:	e419      	b.n	12f60 <ull_conn_rx+0xa0>
		if (!conn->lll.role ||
   1372c:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   13730:	2b00      	cmp	r3, #0
   13732:	f6bf ac44 	bge.w	12fbe <ull_conn_rx+0xfe>
   13736:	7f73      	ldrb	r3, [r6, #29]
   13738:	2b08      	cmp	r3, #8
   1373a:	f47f ac40 	bne.w	12fbe <ull_conn_rx+0xfe>
	instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
   1373e:	f8b6 0025 	ldrh.w	r0, [r6, #37]	; 0x25
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   13742:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   13744:	1ac3      	subs	r3, r0, r3
   13746:	041f      	lsls	r7, r3, #16
   13748:	f100 8519 	bmi.w	1417e <ull_conn_rx+0x12be>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   1374c:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   13750:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   13754:	1a9b      	subs	r3, r3, r2
   13756:	f003 0303 	and.w	r3, r3, #3
   1375a:	2b02      	cmp	r3, #2
   1375c:	f000 85ac 	beq.w	142b8 <ull_conn_rx+0x13f8>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   13760:	4633      	mov	r3, r6
	conn->llcp.chan_map.initiate = 0U;
   13762:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   13766:	f853 5f20 	ldr.w	r5, [r3, #32]!
   1376a:	f8c4 50e9 	str.w	r5, [r4, #233]	; 0xe9
   1376e:	791b      	ldrb	r3, [r3, #4]
   13770:	f884 30ed 	strb.w	r3, [r4, #237]	; 0xed
	conn->llcp_ack -= 2U;
   13774:	3a02      	subs	r2, #2
	conn->llcp.chan_map.initiate = 0U;
   13776:	f36f 0100 	bfc	r1, #0, #1
	conn->llcp_type = LLCP_CHAN_MAP;
   1377a:	2502      	movs	r5, #2
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1377c:	2301      	movs	r3, #1
	conn->llcp.chan_map.instant = instant;
   1377e:	f8a4 00ee 	strh.w	r0, [r4, #238]	; 0xee
	conn->llcp_ack -= 2U;
   13782:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
	conn->llcp.chan_map.initiate = 0U;
   13786:	f884 10e8 	strb.w	r1, [r4, #232]	; 0xe8
	conn->llcp_type = LLCP_CHAN_MAP;
   1378a:	f884 50e6 	strb.w	r5, [r4, #230]	; 0xe6
	int nack = 0;
   1378e:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   13790:	7133      	strb	r3, [r6, #4]
		if (err) {
   13792:	f7ff bbe5 	b.w	12f60 <ull_conn_rx+0xa0>
		if (!conn->lll.role ||
   13796:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1379a:	2b00      	cmp	r3, #0
   1379c:	f6bf ac0f 	bge.w	12fbe <ull_conn_rx+0xfe>
   137a0:	7f73      	ldrb	r3, [r6, #29]
   137a2:	2b17      	cmp	r3, #23
   137a4:	f47f ac0b 	bne.w	12fbe <ull_conn_rx+0xfe>
		if (unlikely(((conn->llcp_req - conn->llcp_ack) & 0x03) ==
   137a8:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   137ac:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   137b0:	1a9b      	subs	r3, r3, r2
   137b2:	f003 0303 	and.w	r3, r3, #3
   137b6:	2b02      	cmp	r3, #2
   137b8:	f000 862c 	beq.w	14414 <ull_conn_rx+0x1554>
   137bc:	4633      	mov	r3, r6
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   137be:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
   137c2:	f853 1f20 	ldr.w	r1, [r3, #32]!
   137c6:	685b      	ldr	r3, [r3, #4]
   137c8:	f8c4 316d 	str.w	r3, [r4, #365]	; 0x16d
   137cc:	f8c4 1169 	str.w	r1, [r4, #361]	; 0x169
		conn->llcp_enc.ediv[0] = pdu_rx->llctrl.enc_req.ediv[0];
   137d0:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
   137d4:	f884 3167 	strb.w	r3, [r4, #359]	; 0x167
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
   137d8:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
   137dc:	f884 3168 	strb.w	r3, [r4, #360]	; 0x168
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   137e0:	6829      	ldr	r1, [r5, #0]
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   137e2:	2301      	movs	r3, #1
   137e4:	f363 0201 	bfi	r2, r3, #0, #2
   137e8:	f884 20f4 	strb.w	r2, [r4, #244]	; 0xf4
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   137ec:	710b      	strb	r3, [r1, #4]
		conn->llcp_ack -= 2U;
   137ee:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
		conn->llcp_enc.pause_rx = 1U;
   137f2:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
		conn->procedure_expire = conn->procedure_reload;
   137f6:	f8b4 10c6 	ldrh.w	r1, [r4, #198]	; 0xc6
		conn->llcp_ack -= 2U;
   137fa:	3a02      	subs	r2, #2
   137fc:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
		conn->llcp_type = LLCP_ENCRYPTION;
   13800:	2003      	movs	r0, #3
   13802:	4632      	mov	r2, r6
   13804:	f884 00e6 	strb.w	r0, [r4, #230]	; 0xe6
   13808:	f852 0f2a 	ldr.w	r0, [r2, #42]!
   1380c:	6852      	ldr	r2, [r2, #4]
   1380e:	f8c4 20fa 	str.w	r2, [r4, #250]	; 0xfa
   13812:	f8c4 00f6 	str.w	r0, [r4, #246]	; 0xf6
   13816:	f8d6 2032 	ldr.w	r2, [r6, #50]	; 0x32
   1381a:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
		conn->llcp_enc.pause_rx = 1U;
   1381e:	f043 0301 	orr.w	r3, r3, #1
   13822:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
		conn->procedure_expire = conn->procedure_reload;
   13826:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
	int nack = 0;
   1382a:	2000      	movs	r0, #0
		break;
   1382c:	f7ff bb98 	b.w	12f60 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   13830:	7f73      	ldrb	r3, [r6, #29]
   13832:	2b01      	cmp	r3, #1
   13834:	f47f abc3 	bne.w	12fbe <ull_conn_rx+0xfe>
	} else if (!conn->lll.role) {
   13838:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1383c:	2b00      	cmp	r3, #0
   1383e:	f2c0 815b 	blt.w	13af8 <ull_conn_rx+0xc38>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   13842:	4821      	ldr	r0, [pc, #132]	; (138c8 <ull_conn_rx+0xa08>)
   13844:	f7f9 fc4a 	bl	d0dc <mem_acquire>
		if (!tx) {
   13848:	2800      	cmp	r0, #0
   1384a:	f000 8132 	beq.w	13ab2 <ull_conn_rx+0xbf2>
	conn->llcp_enc.pause_rx = 1U;
   1384e:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	conn->lll.enc_rx = 0;
   13852:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13856:	7902      	ldrb	r2, [r0, #4]
	conn->llcp_enc.pause_rx = 1U;
   13858:	f041 0101 	orr.w	r1, r1, #1
   1385c:	f884 1166 	strb.w	r1, [r4, #358]	; 0x166
	conn->lll.enc_rx = 0;
   13860:	f023 0318 	bic.w	r3, r3, #24
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   13864:	2101      	movs	r1, #1
	conn->lll.enc_rx = 0;
   13866:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   1386a:	7141      	strb	r1, [r0, #5]
	    conn->tx_head &&
   1386c:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13870:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   13874:	210b      	movs	r1, #11
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13876:	7102      	strb	r2, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   13878:	71c1      	strb	r1, [r0, #7]
	if (
   1387a:	2b00      	cmp	r3, #0
   1387c:	f000 817b 	beq.w	13b76 <ull_conn_rx+0xcb6>
	    !conn->llcp_enc.pause_tx &&
   13880:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   13884:	0791      	lsls	r1, r2, #30
   13886:	f100 8176 	bmi.w	13b76 <ull_conn_rx+0xcb6>
	    !conn->llcp_phy.pause_tx &&
   1388a:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   1388e:	07d2      	lsls	r2, r2, #31
   13890:	f100 8171 	bmi.w	13b76 <ull_conn_rx+0xcb6>
		if (conn->tx_head == conn->tx_data) {
   13894:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   13898:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   1389a:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   1389e:	f000 863f 	beq.w	14520 <ull_conn_rx+0x1660>
		} else if (!conn->tx_ctrl) {
   138a2:	2a00      	cmp	r2, #0
   138a4:	f000 8633 	beq.w	1450e <ull_conn_rx+0x164e>
	tx->next = conn->tx_ctrl_last->next;
   138a8:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   138ac:	681a      	ldr	r2, [r3, #0]
   138ae:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   138b0:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   138b2:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   138b6:	6803      	ldr	r3, [r0, #0]
   138b8:	2b00      	cmp	r3, #0
   138ba:	f47f ab4e 	bne.w	12f5a <ull_conn_rx+0x9a>
		conn->tx_data_last = tx;
   138be:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   138c2:	f7ff bb4a 	b.w	12f5a <ull_conn_rx+0x9a>
   138c6:	bf00      	nop
   138c8:	20002330 	.word	0x20002330
   138cc:	087830d0 	.word	0x087830d0
   138d0:	08783050 	.word	0x08783050
   138d4:	200022ac 	.word	0x200022ac
		if (PDU_DATA_LLCTRL_LEN(start_enc_rsp) != pdu_rx->len) {
   138d8:	7f73      	ldrb	r3, [r6, #29]
   138da:	2b01      	cmp	r3, #1
   138dc:	f47f ab6f 	bne.w	12fbe <ull_conn_rx+0xfe>
		if (conn->lll.role) {
   138e0:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   138e4:	2b00      	cmp	r3, #0
   138e6:	f280 80ec 	bge.w	13ac2 <ull_conn_rx+0xc02>
			if ((conn->llcp_req != conn->llcp_ack) &&
   138ea:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
   138ee:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   138f2:	4283      	cmp	r3, r0
   138f4:	f000 84e4 	beq.w	142c0 <ull_conn_rx+0x1400>
   138f8:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   138fc:	2b03      	cmp	r3, #3
   138fe:	f47f ab5e 	bne.w	12fbe <ull_conn_rx+0xfe>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   13902:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   13906:	f36f 0301 	bfc	r3, #0, #2
   1390a:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
		if (conn->llcp_enc.refresh) {
   1390e:	074e      	lsls	r6, r1, #29
   13910:	f57f ae88 	bpl.w	13624 <ull_conn_rx+0x764>
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   13914:	682b      	ldr	r3, [r5, #0]
			conn->llcp_enc.refresh = 0U;
   13916:	f36f 0182 	bfc	r1, #2, #1
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   1391a:	2217      	movs	r2, #23
			conn->llcp_enc.refresh = 0U;
   1391c:	f884 1166 	strb.w	r1, [r4, #358]	; 0x166
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   13920:	711a      	strb	r2, [r3, #4]
		conn->procedure_expire = 0U;
   13922:	e67f      	b.n	13624 <ull_conn_rx+0x764>
		 (conn->llcp_enc.refresh &&
   13924:	f1b8 0f02 	cmp.w	r8, #2
   13928:	f43f aef4 	beq.w	13714 <ull_conn_rx+0x854>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   1392c:	f1b8 0f0b 	cmp.w	r8, #11
   13930:	f43f ab41 	beq.w	12fb6 <ull_conn_rx+0xf6>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   13934:	f1b8 0f04 	cmp.w	r8, #4
   13938:	f47f aaf2 	bne.w	12f20 <ull_conn_rx+0x60>
   1393c:	f7ff bb3f 	b.w	12fbe <ull_conn_rx+0xfe>
			tx->next = conn->tx_head;
   13940:	6001      	str	r1, [r0, #0]
				conn->tx_ctrl = tx;
   13942:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   13946:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1394a:	2900      	cmp	r1, #0
   1394c:	f47f ab05 	bne.w	12f5a <ull_conn_rx+0x9a>
   13950:	e7b5      	b.n	138be <ull_conn_rx+0x9fe>
		if (conn->llcp_length.ack != conn->llcp_length.req) {
   13952:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
   13956:	f894 31ad 	ldrb.w	r3, [r4, #429]	; 0x1ad
   1395a:	4293      	cmp	r3, r2
   1395c:	f43f aafd 	beq.w	12f5a <ull_conn_rx+0x9a>
	conn->procedure_expire = 0U;
   13960:	2300      	movs	r3, #0
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   13962:	2109      	movs	r1, #9
	conn->llcp_length.ack = conn->llcp_length.req;
   13964:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
	conn->procedure_expire = 0U;
   13968:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   1396c:	7771      	strb	r1, [r6, #29]
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   1396e:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   13972:	f8b4 7058 	ldrh.w	r7, [r4, #88]	; 0x58
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   13976:	f8b4 505e 	ldrh.w	r5, [r4, #94]	; 0x5e
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   1397a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   1397e:	8432      	strh	r2, [r6, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   13980:	2215      	movs	r2, #21
	int nack = 0;
   13982:	4618      	mov	r0, r3
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   13984:	84b7      	strh	r7, [r6, #36]	; 0x24
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   13986:	8475      	strh	r5, [r6, #34]	; 0x22
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   13988:	84f1      	strh	r1, [r6, #38]	; 0x26
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   1398a:	77f2      	strb	r2, [r6, #31]
	if (err) {
   1398c:	f7ff bae8 	b.w	12f60 <ull_conn_rx+0xa0>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   13990:	f894 01bc 	ldrb.w	r0, [r4, #444]	; 0x1bc
   13994:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   13998:	4283      	cmp	r3, r0
   1399a:	f43f aade 	beq.w	12f5a <ull_conn_rx+0x9a>
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   1399e:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   139a2:	2a23      	cmp	r2, #35	; 0x23
   139a4:	d012      	beq.n	139cc <ull_conn_rx+0xb0c>
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   139a6:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
   139aa:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
		conn->llcp_phy.ack = conn->llcp_phy.req;
   139ae:	f884 01bd 	strb.w	r0, [r4, #445]	; 0x1bd
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   139b2:	f3c3 0002 	ubfx	r0, r3, #0, #3
   139b6:	f360 1306 	bfi	r3, r0, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   139ba:	f36f 0100 	bfc	r1, #0, #1
		conn->procedure_expire = 0U;
   139be:	2000      	movs	r0, #0
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   139c0:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
   139c4:	f884 11bf 	strb.w	r1, [r4, #447]	; 0x1bf
		conn->procedure_expire = 0U;
   139c8:	f8a4 00c8 	strh.w	r0, [r4, #200]	; 0xc8
	if (!conn->llcp_phy.cmd) {
   139cc:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   139d0:	075d      	lsls	r5, r3, #29
   139d2:	f57f aac2 	bpl.w	12f5a <ull_conn_rx+0x9a>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   139d6:	231a      	movs	r3, #26
	p->status = rej_ext_ind->error_code;
   139d8:	7732      	strb	r2, [r6, #28]
   139da:	e48d      	b.n	132f8 <ull_conn_rx+0x438>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   139dc:	f894 2185 	ldrb.w	r2, [r4, #389]	; 0x185
   139e0:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   139e4:	429a      	cmp	r2, r3
   139e6:	f43f aab8 	beq.w	12f5a <ull_conn_rx+0x9a>
	if (!lll->role && (rej_ext_ind->error_code ==
   139ea:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
   139ee:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   139f2:	2900      	cmp	r1, #0
   139f4:	f2c0 857a 	blt.w	144ec <ull_conn_rx+0x162c>
   139f8:	2a1a      	cmp	r2, #26
   139fa:	f000 8606 	beq.w	1460a <ull_conn_rx+0x174a>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   139fe:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   13a02:	f002 0107 	and.w	r1, r2, #7
   13a06:	2904      	cmp	r1, #4
   13a08:	f000 8535 	beq.w	14476 <ull_conn_rx+0x15b6>
	if (!conn->llcp_conn_param.cmd) {
   13a0c:	0710      	lsls	r0, r2, #28
   13a0e:	f57f aaa4 	bpl.w	12f5a <ull_conn_rx+0x9a>
	cu->status = rej_ext_ind->error_code;
   13a12:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   13a16:	7733      	strb	r3, [r6, #28]
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   13a18:	2216      	movs	r2, #22
   13a1a:	7132      	strb	r2, [r6, #4]
	cu->interval = lll->interval;
   13a1c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
	cu->timeout = conn->supervision_reload *
   13a1e:	f8b4 20c2 	ldrh.w	r2, [r4, #194]	; 0xc2
	cu->latency = lll->latency;
   13a22:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
	cu->interval = lll->interval;
   13a24:	83f3      	strh	r3, [r6, #30]
	cu->timeout = conn->supervision_reload *
   13a26:	fb03 f202 	mul.w	r2, r3, r2
		      lll->interval * 125U / 1000;
   13a2a:	237d      	movs	r3, #125	; 0x7d
   13a2c:	fb03 f302 	mul.w	r3, r3, r2
	cu->latency = lll->latency;
   13a30:	8431      	strh	r1, [r6, #32]
		      lll->interval * 125U / 1000;
   13a32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	int nack = 0;
   13a36:	2000      	movs	r0, #0
		      lll->interval * 125U / 1000;
   13a38:	fbb3 f3f2 	udiv	r3, r3, r2
	cu->timeout = conn->supervision_reload *
   13a3c:	8473      	strh	r3, [r6, #34]	; 0x22
	if (err) {
   13a3e:	f7ff ba8f 	b.w	12f60 <ull_conn_rx+0xa0>
		if ((conn->llcp_ack != conn->llcp_req) &&
   13a42:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   13a46:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   13a4a:	429a      	cmp	r2, r3
   13a4c:	f43f aa85 	beq.w	12f5a <ull_conn_rx+0x9a>
   13a50:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
   13a54:	2a03      	cmp	r2, #3
   13a56:	f47f aa80 	bne.w	12f5a <ull_conn_rx+0x9a>
	conn->llcp_enc.pause_rx = 0U;
   13a5a:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	conn->llcp_ack = conn->llcp_req;
   13a5e:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
	conn->llcp_enc.pause_rx = 0U;
   13a62:	f022 0203 	bic.w	r2, r2, #3
	conn->procedure_expire = 0U;
   13a66:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   13a68:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
	conn->procedure_expire = 0U;
   13a6c:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	pdu_rx->llctrl.reject_ind.error_code = rej_ext_ind->error_code;
   13a70:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   13a74:	f886 2020 	strb.w	r2, [r6, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   13a78:	220d      	movs	r2, #13
	int nack = 0;
   13a7a:	4618      	mov	r0, r3
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   13a7c:	77f2      	strb	r2, [r6, #31]
	if (err) {
   13a7e:	f7ff ba6f 	b.w	12f60 <ull_conn_rx+0xa0>
	       (conn->lll.role &&
   13a82:	2800      	cmp	r0, #0
   13a84:	f43f ae3e 	beq.w	13704 <ull_conn_rx+0x844>
		 (conn->llcp_enc.refresh &&
   13a88:	f1b8 0f02 	cmp.w	r8, #2
   13a8c:	f43f ae42 	beq.w	13714 <ull_conn_rx+0x854>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   13a90:	f1b8 0f0b 	cmp.w	r8, #11
   13a94:	d02c      	beq.n	13af0 <ull_conn_rx+0xc30>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   13a96:	f1b8 0f03 	cmp.w	r8, #3
   13a9a:	f43f ae81 	beq.w	137a0 <ull_conn_rx+0x8e0>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   13a9e:	f1b8 0f06 	cmp.w	r8, #6
   13aa2:	f47f aa44 	bne.w	12f2e <ull_conn_rx+0x6e>
		if (PDU_DATA_LLCTRL_LEN(start_enc_rsp) != pdu_rx->len) {
   13aa6:	7f73      	ldrb	r3, [r6, #29]
   13aa8:	2b01      	cmp	r3, #1
   13aaa:	f43f af1e 	beq.w	138ea <ull_conn_rx+0xa2a>
   13aae:	f7ff ba86 	b.w	12fbe <ull_conn_rx+0xfe>
		*err = -ENOBUFS;
   13ab2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   13ab6:	f7ff ba53 	b.w	12f60 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(start_enc_rsp) != pdu_rx->len) {
   13aba:	7f73      	ldrb	r3, [r6, #29]
   13abc:	2b01      	cmp	r3, #1
   13abe:	f47f aa7e 	bne.w	12fbe <ull_conn_rx+0xfe>
			conn->llcp_enc.pause_rx = 0U;
   13ac2:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
   13ac6:	f021 0103 	bic.w	r1, r1, #3
   13aca:	f884 1166 	strb.w	r1, [r4, #358]	; 0x166
   13ace:	e71e      	b.n	1390e <ull_conn_rx+0xa4e>
			conn->tx_data = conn->tx_data->next;
   13ad0:	680a      	ldr	r2, [r1, #0]
   13ad2:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   13ad6:	2b00      	cmp	r3, #0
   13ad8:	f47f aaa2 	bne.w	13020 <ull_conn_rx+0x160>
			tx->next = conn->tx_head->next;
   13adc:	680b      	ldr	r3, [r1, #0]
   13ade:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   13ae0:	6008      	str	r0, [r1, #0]
				conn->tx_ctrl = tx;
   13ae2:	6801      	ldr	r1, [r0, #0]
				conn->tx_ctrl_last = tx;
   13ae4:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
	if (!tx->next) {
   13ae8:	2900      	cmp	r1, #0
   13aea:	f47f aa36 	bne.w	12f5a <ull_conn_rx+0x9a>
   13aee:	e6e6      	b.n	138be <ull_conn_rx+0x9fe>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   13af0:	7f73      	ldrb	r3, [r6, #29]
   13af2:	2b01      	cmp	r3, #1
   13af4:	f47f aa63 	bne.w	12fbe <ull_conn_rx+0xfe>
		conn->lll.enc_tx = 0;
   13af8:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   13afc:	f36f 1304 	bfc	r3, #4, #1
   13b00:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
		goto pause_enc_rsp_send_exit;
   13b04:	f7ff ba29 	b.w	12f5a <ull_conn_rx+0x9a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   13b08:	790b      	ldrb	r3, [r1, #4]
   13b0a:	f003 0303 	and.w	r3, r3, #3
   13b0e:	2b03      	cmp	r3, #3
   13b10:	f000 81e6 	beq.w	13ee0 <ull_conn_rx+0x1020>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   13b14:	f8c4 11c8 	str.w	r1, [r4, #456]	; 0x1c8
   13b18:	f7ff ba84 	b.w	13024 <ull_conn_rx+0x164>
		if (!conn->lll.role) {
   13b1c:	f994 0039 	ldrsb.w	r0, [r4, #57]	; 0x39
   13b20:	f894 2185 	ldrb.w	r2, [r4, #389]	; 0x185
   13b24:	f894 c184 	ldrb.w	ip, [r4, #388]	; 0x184
   13b28:	9200      	str	r2, [sp, #0]
   13b2a:	2800      	cmp	r0, #0
   13b2c:	f2c0 80be 	blt.w	13cac <ull_conn_rx+0xdec>
			if ((conn->llcp_conn_param.req !=
   13b30:	4562      	cmp	r2, ip
   13b32:	d009      	beq.n	13b48 <ull_conn_rx+0xc88>
			    ((conn->llcp_conn_param.state ==
   13b34:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
					conn->llcp_conn_param.ack) &&
   13b38:	f012 0207 	ands.w	r2, r2, #7
   13b3c:	f000 8304 	beq.w	14148 <ull_conn_rx+0x1288>
			      LLCP_CPR_STATE_REQ) ||
   13b40:	3a04      	subs	r2, #4
   13b42:	2a01      	cmp	r2, #1
   13b44:	f240 8300 	bls.w	14148 <ull_conn_rx+0x1288>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   13b48:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   13b4c:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
   13b50:	1a12      	subs	r2, r2, r0
   13b52:	f002 0203 	and.w	r2, r2, #3
   13b56:	2a02      	cmp	r2, #2
   13b58:	f000 83c8 	beq.w	142ec <ull_conn_rx+0x142c>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
   13b5c:	f894 01bc 	ldrb.w	r0, [r4, #444]	; 0x1bc
   13b60:	f894 21bd 	ldrb.w	r2, [r4, #445]	; 0x1bd
   13b64:	4290      	cmp	r0, r2
   13b66:	f000 83c7 	beq.w	142f8 <ull_conn_rx+0x1438>
				nack = reject_ext_ind_send(conn, *rx,
   13b6a:	4631      	mov	r1, r6
   13b6c:	4620      	mov	r0, r4
   13b6e:	232a      	movs	r3, #42	; 0x2a
   13b70:	220f      	movs	r2, #15
   13b72:	f7ff bb29 	b.w	131c8 <ull_conn_rx+0x308>
		if (!conn->tx_ctrl) {
   13b76:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   13b7a:	2a00      	cmp	r2, #0
   13b7c:	f47f ae94 	bne.w	138a8 <ull_conn_rx+0x9e8>
			tx->next = conn->tx_head;
   13b80:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   13b82:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   13b86:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   13b8a:	e694      	b.n	138b6 <ull_conn_rx+0x9f6>
	if (conn->common.txn_lock) {
   13b8c:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   13b90:	079b      	lsls	r3, r3, #30
   13b92:	f53f a9e2 	bmi.w	12f5a <ull_conn_rx+0x9a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   13b96:	48d6      	ldr	r0, [pc, #856]	; (13ef0 <ull_conn_rx+0x1030>)
   13b98:	f7f9 faa0 	bl	d0dc <mem_acquire>
	if (!tx) {
   13b9c:	4601      	mov	r1, r0
   13b9e:	2800      	cmp	r0, #0
   13ba0:	d087      	beq.n	13ab2 <ull_conn_rx+0xbf2>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   13ba2:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
   13ba6:	9300      	str	r3, [sp, #0]
	eff_rx_octets = conn->lll.max_rx_octets;
   13ba8:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
	conn->common.txn_lock = 1U;
   13bac:	f894 20d8 	ldrb.w	r2, [r4, #216]	; 0xd8
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   13bb0:	f894 01ad 	ldrb.w	r0, [r4, #429]	; 0x1ad
	eff_rx_octets = conn->lll.max_rx_octets;
   13bb4:	9301      	str	r3, [sp, #4]
	if (/* Local idle, and Peer request then complete the Peer procedure
   13bb6:	9b00      	ldr	r3, [sp, #0]
	eff_tx_octets = conn->lll.max_tx_octets;
   13bb8:	f8b4 9058 	ldrh.w	r9, [r4, #88]	; 0x58
	eff_rx_time = conn->lll.max_rx_time;
   13bbc:	f8b4 a05e 	ldrh.w	sl, [r4, #94]	; 0x5e
	eff_tx_time = conn->lll.max_tx_time;
   13bc0:	f8b4 b05c 	ldrh.w	fp, [r4, #92]	; 0x5c
	conn->common.txn_lock = 1U;
   13bc4:	f042 0202 	orr.w	r2, r2, #2
	if (/* Local idle, and Peer request then complete the Peer procedure
   13bc8:	4283      	cmp	r3, r0
	conn->common.txn_lock = 1U;
   13bca:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
	if (/* Local idle, and Peer request then complete the Peer procedure
   13bce:	d005      	beq.n	13bdc <ull_conn_rx+0xd1c>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   13bd0:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
	    ((conn->llcp_length.req != conn->llcp_length.ack) &&
   13bd4:	f012 0f06 	tst.w	r2, #6
   13bd8:	f47f ab1e 	bne.w	13218 <ull_conn_rx+0x358>
		max_rx_octets = sys_le16_to_cpu(lr->max_rx_octets);
   13bdc:	8c32      	ldrh	r2, [r6, #32]
		if (max_rx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   13bde:	2a1a      	cmp	r2, #26
   13be0:	f240 82cb 	bls.w	1417a <ull_conn_rx+0x12ba>
			eff_tx_octets = MIN(max_rx_octets,
   13be4:	f8b4 00d2 	ldrh.w	r0, [r4, #210]	; 0xd2
   13be8:	4282      	cmp	r2, r0
   13bea:	bf28      	it	cs
   13bec:	4602      	movcs	r2, r0
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   13bee:	f8b6 e024 	ldrh.w	lr, [r6, #36]	; 0x24
			eff_rx_octets = MIN(max_tx_octets,
   13bf2:	9b01      	ldr	r3, [sp, #4]
		if (lr_rx_time >= PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M)) {
   13bf4:	f8b6 8022 	ldrh.w	r8, [r6, #34]	; 0x22
		lr_tx_time = sys_le16_to_cpu(lr->max_tx_time);
   13bf8:	f8b6 c026 	ldrh.w	ip, [r6, #38]	; 0x26
			eff_rx_octets = MIN(max_tx_octets,
   13bfc:	f1be 0f1b 	cmp.w	lr, #27
   13c00:	bf34      	ite	cc
   13c02:	469e      	movcc	lr, r3
   13c04:	f04f 0e1b 	movcs.w	lr, #27
			eff_tx_time = MIN(lr_rx_time, max_tx_time);
   13c08:	f5b8 7fa4 	cmp.w	r8, #328	; 0x148
			eff_rx_octets = MIN(max_tx_octets,
   13c0c:	4618      	mov	r0, r3
			eff_tx_time = MIN(lr_rx_time, max_tx_time);
   13c0e:	bf34      	ite	cc
   13c10:	4658      	movcc	r0, fp
   13c12:	f44f 70a4 	movcs.w	r0, #328	; 0x148
			eff_rx_time = MIN(lr_tx_time, max_rx_time);
   13c16:	f5bc 7fa4 	cmp.w	ip, #328	; 0x148
   13c1a:	bf34      	ite	cc
   13c1c:	46d4      	movcc	ip, sl
   13c1e:	f44f 7ca4 	movcs.w	ip, #328	; 0x148
		if (eff_rx_octets != conn->lll.max_rx_octets) {
   13c22:	459e      	cmp	lr, r3
   13c24:	f000 8320 	beq.w	14268 <ull_conn_rx+0x13a8>
			conn->llcp_length.ack = conn->llcp_length.req - 1;
   13c28:	9b00      	ldr	r3, [sp, #0]
			conn->llcp_length.rx_octets = eff_rx_octets;
   13c2a:	f8a4 e1b0 	strh.w	lr, [r4, #432]	; 0x1b0
			conn->llcp_length.ack = conn->llcp_length.req - 1;
   13c2e:	3b01      	subs	r3, #1
   13c30:	f884 31ad 	strb.w	r3, [r4, #429]	; 0x1ad
			conn->llcp_length.tx_octets = eff_tx_octets;
   13c34:	f8a4 21b2 	strh.w	r2, [r4, #434]	; 0x1b2
				conn->llcp_length.state =
   13c38:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
			conn->llcp_length.rx_time = eff_rx_time;
   13c3c:	f8a4 c1b4 	strh.w	ip, [r4, #436]	; 0x1b4
			conn->llcp_length.tx_time = eff_tx_time;
   13c40:	f8a4 01b6 	strh.w	r0, [r4, #438]	; 0x1b6
			if (tx) {
   13c44:	2900      	cmp	r1, #0
   13c46:	f000 83f5 	beq.w	14434 <ull_conn_rx+0x1574>
				conn->llcp_length.state =
   13c4a:	2605      	movs	r6, #5
   13c4c:	f366 0302 	bfi	r3, r6, #0, #3
   13c50:	f884 31ae 	strb.w	r3, [r4, #430]	; 0x1ae
			link->mem = conn->llcp_rx;
   13c54:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   13c58:	607b      	str	r3, [r7, #4]
			(*rx)->hdr.link = link;
   13c5a:	682b      	ldr	r3, [r5, #0]
   13c5c:	601f      	str	r7, [r3, #0]
			conn->llcp_rx = *rx;
   13c5e:	682b      	ldr	r3, [r5, #0]
   13c60:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
			*rx = NULL;
   13c64:	2300      	movs	r3, #0
   13c66:	602b      	str	r3, [r5, #0]
	if (tx) {
   13c68:	2900      	cmp	r1, #0
   13c6a:	f43f a978 	beq.w	12f5e <ull_conn_rx+0x9e>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   13c6e:	790b      	ldrb	r3, [r1, #4]
	pdu_tx->llctrl.length_rsp.max_tx_octets =
   13c70:	818a      	strh	r2, [r1, #12]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   13c72:	f043 0303 	orr.w	r3, r3, #3
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   13c76:	2215      	movs	r2, #21
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   13c78:	2509      	movs	r5, #9
	pdu_tx->llctrl.length_rsp.max_tx_time = sys_cpu_to_le16(eff_tx_time);
   13c7a:	81c8      	strh	r0, [r1, #14]
	pdu_tx->llctrl.length_rsp.max_rx_octets =
   13c7c:	f8a1 e008 	strh.w	lr, [r1, #8]
	ctrl_tx_sec_enqueue(conn, tx);
   13c80:	4620      	mov	r0, r4
	pdu_tx->llctrl.length_rsp.max_rx_time = sys_cpu_to_le16(eff_rx_time);
   13c82:	f8a1 c00a 	strh.w	ip, [r1, #10]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   13c86:	710b      	strb	r3, [r1, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   13c88:	714d      	strb	r5, [r1, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   13c8a:	71ca      	strb	r2, [r1, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   13c8c:	f7fe fb5c 	bl	12348 <ctrl_tx_sec_enqueue>
	return 0;
   13c90:	2000      	movs	r0, #0
}
   13c92:	f7ff b965 	b.w	12f60 <ull_conn_rx+0xa0>
		if (!conn->tx_ctrl) {
   13c96:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   13c9a:	2a00      	cmp	r2, #0
   13c9c:	f47f ac00 	bne.w	134a0 <ull_conn_rx+0x5e0>
			tx->next = conn->tx_head;
   13ca0:	600b      	str	r3, [r1, #0]
				conn->tx_ctrl = tx;
   13ca2:	e9c4 1171 	strd	r1, r1, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   13ca6:	f8c4 11cc 	str.w	r1, [r4, #460]	; 0x1cc
   13caa:	e400      	b.n	134ae <ull_conn_rx+0x5ee>
		} else if ((conn->llcp_conn_param.req ==
   13cac:	9a00      	ldr	r2, [sp, #0]
   13cae:	4562      	cmp	r2, ip
   13cb0:	d004      	beq.n	13cbc <ull_conn_rx+0xdfc>
			    conn->llcp_conn_param.ack) ||
   13cb2:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   13cb6:	0792      	lsls	r2, r2, #30
   13cb8:	f47f a94f 	bne.w	12f5a <ull_conn_rx+0x9a>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   13cbc:	f8b6 8020 	ldrh.w	r8, [r6, #32]
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   13cc0:	f1b8 0f05 	cmp.w	r8, #5
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   13cc4:	fa1f f288 	uxth.w	r2, r8
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   13cc8:	f240 8104 	bls.w	13ed4 <ull_conn_rx+0x1014>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   13ccc:	f8b6 e022 	ldrh.w	lr, [r6, #34]	; 0x22
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   13cd0:	f5be 6f48 	cmp.w	lr, #3200	; 0xc80
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   13cd4:	fa1f f18e 	uxth.w	r1, lr
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   13cd8:	f200 80fc 	bhi.w	13ed4 <ull_conn_rx+0x1014>
			    (interval_max > 3200) ||
   13cdc:	428a      	cmp	r2, r1
   13cde:	f200 80f9 	bhi.w	13ed4 <ull_conn_rx+0x1014>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   13ce2:	f8b6 c024 	ldrh.w	ip, [r6, #36]	; 0x24
			    (interval_min > interval_max) ||
   13ce6:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   13cea:	fa1f fa8c 	uxth.w	sl, ip
			    (interval_min > interval_max) ||
   13cee:	f080 80f1 	bcs.w	13ed4 <ull_conn_rx+0x1014>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   13cf2:	8cf0      	ldrh	r0, [r6, #38]	; 0x26
			    (latency > 499) ||
   13cf4:	f1a0 090a 	sub.w	r9, r0, #10
   13cf8:	fa1f f989 	uxth.w	r9, r9
   13cfc:	f640 4b76 	movw	fp, #3190	; 0xc76
   13d00:	45d9      	cmp	r9, fp
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   13d02:	b282      	uxth	r2, r0
			    (latency > 499) ||
   13d04:	f200 80e6 	bhi.w	13ed4 <ull_conn_rx+0x1014>
			     ((latency + 1) * interval_max)) ||
   13d08:	fb0a 1901 	mla	r9, sl, r1, r1
			    (timeout < 10) || (timeout > 3200) ||
   13d0c:	ebb9 0f82 	cmp.w	r9, r2, lsl #2
   13d10:	f080 80e0 	bcs.w	13ed4 <ull_conn_rx+0x1014>
			     ((latency + 1) * interval_max)) ||
   13d14:	f896 b028 	ldrb.w	fp, [r6, #40]	; 0x28
   13d18:	4559      	cmp	r1, fp
   13d1a:	f0c0 80db 	bcc.w	13ed4 <ull_conn_rx+0x1014>
			conn->llcp_conn_param.latency =	latency;
   13d1e:	f8a4 c18c 	strh.w	ip, [r4, #396]	; 0x18c
			conn->llcp_conn_param.interval_min = interval_min;
   13d22:	f8a4 8188 	strh.w	r8, [r4, #392]	; 0x188
			conn->llcp_conn_param.interval_max = interval_max;
   13d26:	f8a4 e18a 	strh.w	lr, [r4, #394]	; 0x18a
			conn->llcp_conn_param.timeout =	timeout;
   13d2a:	f8a4 018e 	strh.w	r0, [r4, #398]	; 0x18e
			conn->llcp_conn_param.preferred_periodicity =
   13d2e:	f884 b190 	strb.w	fp, [r4, #400]	; 0x190
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   13d32:	f896 e02a 	ldrb.w	lr, [r6, #42]	; 0x2a
   13d36:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
			     lll->interval) ||
   13d3a:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   13d3e:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   13d42:	f8a4 0192 	strh.w	r0, [r4, #402]	; 0x192
				sys_le16_to_cpu(cpr->offset0);
   13d46:	f896 e02c 	ldrb.w	lr, [r6, #44]	; 0x2c
   13d4a:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
   13d4e:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset0 =
   13d52:	f8a4 0194 	strh.w	r0, [r4, #404]	; 0x194
				sys_le16_to_cpu(cpr->offset1);
   13d56:	f896 e02e 	ldrb.w	lr, [r6, #46]	; 0x2e
   13d5a:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
   13d5e:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset1 =
   13d62:	f8a4 0196 	strh.w	r0, [r4, #406]	; 0x196
				sys_le16_to_cpu(cpr->offset2);
   13d66:	f896 e030 	ldrb.w	lr, [r6, #48]	; 0x30
   13d6a:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
   13d6e:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset2 =
   13d72:	f8a4 0198 	strh.w	r0, [r4, #408]	; 0x198
				sys_le16_to_cpu(cpr->offset3);
   13d76:	f896 e032 	ldrb.w	lr, [r6, #50]	; 0x32
   13d7a:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
   13d7e:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset3 =
   13d82:	f8a4 019a 	strh.w	r0, [r4, #410]	; 0x19a
				sys_le16_to_cpu(cpr->offset4);
   13d86:	f896 0033 	ldrb.w	r0, [r6, #51]	; 0x33
   13d8a:	f896 e034 	ldrb.w	lr, [r6, #52]	; 0x34
   13d8e:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset4 =
   13d92:	f8a4 019c 	strh.w	r0, [r4, #412]	; 0x19c
				sys_le16_to_cpu(cpr->offset5);
   13d96:	f896 0035 	ldrb.w	r0, [r6, #53]	; 0x35
   13d9a:	f896 6036 	ldrb.w	r6, [r6, #54]	; 0x36
			if ((conn->llcp_conn_param.interval_max !=
   13d9e:	4561      	cmp	r1, ip
				sys_le16_to_cpu(cpr->offset5);
   13da0:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
			conn->llcp_conn_param.offset5 =
   13da4:	f8a4 019e 	strh.w	r0, [r4, #414]	; 0x19e
			if ((conn->llcp_conn_param.interval_max !=
   13da8:	f000 83f7 	beq.w	1459a <ull_conn_rx+0x16da>
				conn->llcp_conn_param.state =
   13dac:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   13db0:	2103      	movs	r1, #3
   13db2:	f361 0202 	bfi	r2, r1, #0, #3
   13db6:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
			conn->llcp_conn_param.ack--;
   13dba:	9a00      	ldr	r2, [sp, #0]
   13dbc:	3a01      	subs	r2, #1
   13dbe:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
			if (!conn_upd_curr) {
   13dc2:	2b00      	cmp	r3, #0
   13dc4:	f47f a8cb 	bne.w	12f5e <ull_conn_rx+0x9e>
				conn_upd_curr = conn;
   13dc8:	603c      	str	r4, [r7, #0]
	int nack = 0;
   13dca:	4618      	mov	r0, r3
   13dcc:	f7ff b8c8 	b.w	12f60 <ull_conn_rx+0xa0>
	if (conn->common.txn_lock) {
   13dd0:	f894 80d8 	ldrb.w	r8, [r4, #216]	; 0xd8
   13dd4:	f018 0802 	ands.w	r8, r8, #2
   13dd8:	f47f a8bf 	bne.w	12f5a <ull_conn_rx+0x9a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   13ddc:	4844      	ldr	r0, [pc, #272]	; (13ef0 <ull_conn_rx+0x1030>)
   13dde:	f7f9 f97d 	bl	d0dc <mem_acquire>
	if (!tx) {
   13de2:	4602      	mov	r2, r0
   13de4:	2800      	cmp	r0, #0
   13de6:	f43f ae64 	beq.w	13ab2 <ull_conn_rx+0xbf2>
	conn->common.txn_lock = 1U;
   13dea:	f894 10d8 	ldrb.w	r1, [r4, #216]	; 0xd8
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   13dee:	f894 01be 	ldrb.w	r0, [r4, #446]	; 0x1be
	if (conn->llcp_phy.ack ==
   13df2:	f894 e1bd 	ldrb.w	lr, [r4, #445]	; 0x1bd
   13df6:	f894 71bc 	ldrb.w	r7, [r4, #444]	; 0x1bc
   13dfa:	f894 31c0 	ldrb.w	r3, [r4, #448]	; 0x1c0
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   13dfe:	2502      	movs	r5, #2
   13e00:	f365 0001 	bfi	r0, r5, #0, #2
	conn->common.txn_lock = 1U;
   13e04:	4329      	orrs	r1, r5
	if (conn->llcp_phy.ack ==
   13e06:	4577      	cmp	r7, lr
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   13e08:	f884 01be 	strb.w	r0, [r4, #446]	; 0x1be
	conn->common.txn_lock = 1U;
   13e0c:	f884 10d8 	strb.w	r1, [r4, #216]	; 0xd8
	if (conn->llcp_phy.ack ==
   13e10:	f3c3 0502 	ubfx	r5, r3, #0, #3
   13e14:	f003 0c07 	and.w	ip, r3, #7
   13e18:	f3c3 00c2 	ubfx	r0, r3, #3, #3
   13e1c:	d114      	bne.n	13e48 <ull_conn_rx+0xf88>
		conn->llcp_phy.tx =
   13e1e:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
		conn->procedure_expire =
   13e22:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   13e26:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
		conn->llcp_phy.tx =
   13e2a:	f36c 0184 	bfi	r1, ip, #2, #3
		conn->llcp_phy.cmd = 0U;
   13e2e:	f894 c1bf 	ldrb.w	ip, [r4, #447]	; 0x1bf
		conn->llcp_phy.ack--;
   13e32:	3f01      	subs	r7, #1
		conn->llcp_phy.rx =
   13e34:	f360 1147 	bfi	r1, r0, #5, #3
		conn->llcp_phy.cmd = 0U;
   13e38:	f368 0c82 	bfi	ip, r8, #2, #1
		conn->llcp_phy.ack--;
   13e3c:	f884 71bd 	strb.w	r7, [r4, #445]	; 0x1bd
		conn->llcp_phy.rx =
   13e40:	f884 11be 	strb.w	r1, [r4, #446]	; 0x1be
		conn->llcp_phy.cmd = 0U;
   13e44:	f884 c1bf 	strb.w	ip, [r4, #447]	; 0x1bf
	conn->llcp_phy.rx &= p->tx_phys;
   13e48:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
	conn->llcp_phy.tx &= p->rx_phys;
   13e4c:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
	conn->llcp_phy.rx &= p->tx_phys;
   13e50:	f896 7020 	ldrb.w	r7, [r6, #32]
	conn->llcp_phy.tx &= p->rx_phys;
   13e54:	f3c1 0c82 	ubfx	ip, r1, #2, #3
   13e58:	ea03 030c 	and.w	r3, r3, ip
	conn->llcp_phy.rx &= p->tx_phys;
   13e5c:	ea07 1751 	and.w	r7, r7, r1, lsr #5
	conn->llcp_phy.tx &= p->rx_phys;
   13e60:	009b      	lsls	r3, r3, #2
   13e62:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   13e66:	f001 0103 	and.w	r1, r1, #3
   13e6a:	430b      	orrs	r3, r1
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   13e6c:	2703      	movs	r7, #3
	conn->llcp_phy.tx &= p->rx_phys;
   13e6e:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13e72:	7911      	ldrb	r1, [r2, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   13e74:	7157      	strb	r7, [r2, #5]
	    conn->tx_head &&
   13e76:	f8d4 71c4 	ldr.w	r7, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   13e7a:	7215      	strb	r5, [r2, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13e7c:	f041 0103 	orr.w	r1, r1, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   13e80:	2517      	movs	r5, #23
   13e82:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   13e86:	7250      	strb	r0, [r2, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13e88:	7111      	strb	r1, [r2, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   13e8a:	71d5      	strb	r5, [r2, #7]
	if (
   13e8c:	2f00      	cmp	r7, #0
   13e8e:	f000 817e 	beq.w	1418e <ull_conn_rx+0x12ce>
	    !conn->llcp_enc.pause_tx &&
   13e92:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   13e96:	0788      	lsls	r0, r1, #30
   13e98:	f100 8179 	bmi.w	1418e <ull_conn_rx+0x12ce>
	    !conn->llcp_phy.pause_tx &&
   13e9c:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   13ea0:	07c9      	lsls	r1, r1, #31
   13ea2:	f100 8174 	bmi.w	1418e <ull_conn_rx+0x12ce>
		if (conn->tx_head == conn->tx_data) {
   13ea6:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   13eaa:	428f      	cmp	r7, r1
   13eac:	f000 839b 	beq.w	145e6 <ull_conn_rx+0x1726>
		} else if (!conn->tx_ctrl) {
   13eb0:	2b00      	cmp	r3, #0
   13eb2:	f000 8388 	beq.w	145c6 <ull_conn_rx+0x1706>
	tx->next = conn->tx_ctrl_last->next;
   13eb6:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   13eba:	6819      	ldr	r1, [r3, #0]
   13ebc:	6011      	str	r1, [r2, #0]
	conn->tx_ctrl_last->next = tx;
   13ebe:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
   13ec0:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
	if (!tx->next) {
   13ec4:	6813      	ldr	r3, [r2, #0]
   13ec6:	2b00      	cmp	r3, #0
   13ec8:	f47f a847 	bne.w	12f5a <ull_conn_rx+0x9a>
		conn->tx_data_last = tx;
   13ecc:	f8c4 21d4 	str.w	r2, [r4, #468]	; 0x1d4
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   13ed0:	f7ff b843 	b.w	12f5a <ull_conn_rx+0x9a>
				nack = reject_ext_ind_send(conn, *rx,
   13ed4:	4631      	mov	r1, r6
   13ed6:	4620      	mov	r0, r4
   13ed8:	231e      	movs	r3, #30
   13eda:	220f      	movs	r2, #15
   13edc:	f7ff b974 	b.w	131c8 <ull_conn_rx+0x308>
	    ((pdu_data_tx->llctrl.opcode !=
   13ee0:	79cb      	ldrb	r3, [r1, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   13ee2:	2b03      	cmp	r3, #3
   13ee4:	f43f adfa 	beq.w	13adc <ull_conn_rx+0xc1c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   13ee8:	2b0a      	cmp	r3, #10
   13eea:	f47f ae13 	bne.w	13b14 <ull_conn_rx+0xc54>
   13eee:	e5f5      	b.n	13adc <ull_conn_rx+0xc1c>
   13ef0:	20002330 	.word	0x20002330
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   13ef4:	48d6      	ldr	r0, [pc, #856]	; (14250 <ull_conn_rx+0x1390>)
   13ef6:	f7f9 f8f1 	bl	d0dc <mem_acquire>
		if (!tx) {
   13efa:	4601      	mov	r1, r0
   13efc:	2800      	cmp	r0, #0
   13efe:	f43f add8 	beq.w	13ab2 <ull_conn_rx+0xbf2>
		conn->llcp_version.tx = 1U;
   13f02:	f894 213a 	ldrb.w	r2, [r4, #314]	; 0x13a
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   13f06:	7903      	ldrb	r3, [r0, #4]
		conn->llcp_version.tx = 1U;
   13f08:	f042 0201 	orr.w	r2, r2, #1
   13f0c:	f884 213a 	strb.w	r2, [r4, #314]	; 0x13a
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   13f10:	f043 0303 	orr.w	r3, r3, #3
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   13f14:	220c      	movs	r2, #12
		pdu_tx->len =
   13f16:	7145      	strb	r5, [r0, #5]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   13f18:	7103      	strb	r3, [r0, #4]
		v->version_number = LL_VERSION_NUMBER;
   13f1a:	250b      	movs	r5, #11
		v->sub_version_number =
   13f1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   13f20:	f06f 000e 	mvn.w	r0, #14
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   13f24:	71ca      	strb	r2, [r1, #7]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   13f26:	2205      	movs	r2, #5
   13f28:	7248      	strb	r0, [r1, #9]
		v->sub_version_number =
   13f2a:	72cb      	strb	r3, [r1, #11]
   13f2c:	730b      	strb	r3, [r1, #12]
		v->version_number = LL_VERSION_NUMBER;
   13f2e:	720d      	strb	r5, [r1, #8]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   13f30:	728a      	strb	r2, [r1, #10]
		ctrl_tx_sec_enqueue(conn, tx);
   13f32:	4620      	mov	r0, r4
   13f34:	f7fe fa08 	bl	12348 <ctrl_tx_sec_enqueue>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   13f38:	2301      	movs	r3, #1
   13f3a:	7133      	strb	r3, [r6, #4]
   13f3c:	f7ff b9fc 	b.w	13338 <ull_conn_rx+0x478>
			conn->llcp_conn_param.disabled = 1U;
   13f40:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
			if (!conn->lll.role) {
   13f44:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
			conn->llcp_conn_param.disabled = 1U;
   13f48:	f042 0210 	orr.w	r2, r2, #16
			if (!conn->lll.role) {
   13f4c:	2900      	cmp	r1, #0
			conn->llcp_conn_param.disabled = 1U;
   13f4e:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
			if (!conn->lll.role) {
   13f52:	f2c0 8148 	blt.w	141e6 <ull_conn_rx+0x1326>
				LL_ASSERT(conn->llcp_cu.req ==
   13f56:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
   13f5a:	f894 210d 	ldrb.w	r2, [r4, #269]	; 0x10d
   13f5e:	4293      	cmp	r3, r2
   13f60:	d00e      	beq.n	13f80 <ull_conn_rx+0x10c0>
   13f62:	4abc      	ldr	r2, [pc, #752]	; (14254 <ull_conn_rx+0x1394>)
   13f64:	49bc      	ldr	r1, [pc, #752]	; (14258 <ull_conn_rx+0x1398>)
   13f66:	48bd      	ldr	r0, [pc, #756]	; (1425c <ull_conn_rx+0x139c>)
   13f68:	f641 1315 	movw	r3, #6421	; 0x1915
   13f6c:	f00a fcd6 	bl	1e91c <printk>
   13f70:	4040      	eors	r0, r0
   13f72:	f380 8811 	msr	BASEPRI, r0
   13f76:	f04f 0003 	mov.w	r0, #3
   13f7a:	df02      	svc	2
   13f7c:	f894 210d 	ldrb.w	r2, [r4, #269]	; 0x10d
				conn->llcp_conn_param.state =
   13f80:	f894 0186 	ldrb.w	r0, [r4, #390]	; 0x186
				conn->llcp_cu.interval =
   13f84:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
   13f88:	f8a4 3110 	strh.w	r3, [r4, #272]	; 0x110
				conn->llcp_conn_param.state =
   13f8c:	2305      	movs	r3, #5
   13f8e:	f363 0002 	bfi	r0, r3, #0, #3
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   13f92:	f894 110e 	ldrb.w	r1, [r4, #270]	; 0x10e
				conn->llcp_cu.ack--;
   13f96:	1e53      	subs	r3, r2, #1
				conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   13f98:	f3c0 02c0 	ubfx	r2, r0, #3, #1
				conn->llcp_cu.win_size = 1U;
   13f9c:	2601      	movs	r6, #1
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   13f9e:	00d2      	lsls	r2, r2, #3
				conn->llcp_cu.ack--;
   13fa0:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
				conn->llcp_cu.win_size = 1U;
   13fa4:	f884 611c 	strb.w	r6, [r4, #284]	; 0x11c
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   13fa8:	f021 030f 	bic.w	r3, r1, #15
   13fac:	4332      	orrs	r2, r6
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   13fae:	6829      	ldr	r1, [r5, #0]
				conn->llcp_cu.latency =
   13fb0:	f8b4 518c 	ldrh.w	r5, [r4, #396]	; 0x18c
				conn->llcp_conn_param.state =
   13fb4:	f884 0186 	strb.w	r0, [r4, #390]	; 0x186
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   13fb8:	431a      	orrs	r2, r3
   13fba:	f884 210e 	strb.w	r2, [r4, #270]	; 0x10e
				conn->llcp_cu.win_offset_us = 0U;
   13fbe:	2000      	movs	r0, #0
				conn->llcp_cu.timeout =
   13fc0:	f8b4 218e 	ldrh.w	r2, [r4, #398]	; 0x18e
				conn->llcp_cu.win_offset_us = 0U;
   13fc4:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
				conn->llcp_cu.latency =
   13fc8:	f8a4 5112 	strh.w	r5, [r4, #274]	; 0x112
				conn->llcp_cu.timeout =
   13fcc:	f8a4 2114 	strh.w	r2, [r4, #276]	; 0x114
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   13fd0:	710e      	strb	r6, [r1, #4]
				break;
   13fd2:	f7fe bfc5 	b.w	12f60 <ull_conn_rx+0xa0>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   13fd6:	7137      	strb	r7, [r6, #4]
		*err = 0U;
   13fd8:	2000      	movs	r0, #0
   13fda:	f7fe bfc1 	b.w	12f60 <ull_conn_rx+0xa0>
				      0x03) == 0x02) &&
   13fde:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   13fe2:	2b03      	cmp	r3, #3
   13fe4:	f47f a8ec 	bne.w	131c0 <ull_conn_rx+0x300>
   13fe8:	f7ff b8e3 	b.w	131b2 <ull_conn_rx+0x2f2>
	instant = sys_le16_to_cpu(ind->instant);
   13fec:	8c70      	ldrh	r0, [r6, #34]	; 0x22
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   13fee:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   13ff0:	1a82      	subs	r2, r0, r2
   13ff2:	0412      	lsls	r2, r2, #16
   13ff4:	f100 80c3 	bmi.w	1417e <ull_conn_rx+0x12be>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   13ff8:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   13ffc:	f894 c0e5 	ldrb.w	ip, [r4, #229]	; 0xe5
   14000:	eba2 020c 	sub.w	r2, r2, ip
   14004:	f002 0203 	and.w	r2, r2, #3
   14008:	2a02      	cmp	r2, #2
   1400a:	f000 8155 	beq.w	142b8 <ull_conn_rx+0x13f8>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   1400e:	f894 c1bc 	ldrb.w	ip, [r4, #444]	; 0x1bc
   14012:	f894 21bd 	ldrb.w	r2, [r4, #445]	; 0x1bd
   14016:	4562      	cmp	r2, ip
   14018:	d019      	beq.n	1404e <ull_conn_rx+0x118e>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   1401a:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   1401e:	f002 0203 	and.w	r2, r2, #3
   14022:	2a02      	cmp	r2, #2
   14024:	d113      	bne.n	1404e <ull_conn_rx+0x118e>
		conn->llcp_phy.pause_tx = 0U;
   14026:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   1402a:	f894 60e8 	ldrb.w	r6, [r4, #232]	; 0xe8
		conn->llcp_phy.ack = conn->llcp_phy.req;
   1402e:	f884 c1bd 	strb.w	ip, [r4, #445]	; 0x1bd
		conn->llcp_phy.pause_tx = 0U;
   14032:	f36f 0200 	bfc	r2, #0, #1
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   14036:	f3c2 0c80 	ubfx	ip, r2, #2, #1
   1403a:	f36c 0641 	bfi	r6, ip, #1, #1
		conn->procedure_expire = 0U;
   1403e:	f04f 0c00 	mov.w	ip, #0
		conn->llcp_phy.pause_tx = 0U;
   14042:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   14046:	f884 60e8 	strb.w	r6, [r4, #232]	; 0xe8
		conn->procedure_expire = 0U;
   1404a:	f8a4 c0c8 	strh.w	ip, [r4, #200]	; 0xc8
	conn->llcp.phy_upd_ind.initiate = 0U;
   1404e:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
	conn->llcp.phy_upd_ind.instant = instant;
   14052:	f8a4 00ea 	strh.w	r0, [r4, #234]	; 0xea
	conn->llcp.phy_upd_ind.initiate = 0U;
   14056:	009b      	lsls	r3, r3, #2
   14058:	f003 031c 	and.w	r3, r3, #28
   1405c:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   14060:	f002 0202 	and.w	r2, r2, #2
   14064:	4313      	orrs	r3, r2
	link->mem = conn->llcp_rx;
   14066:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
	conn->llcp.phy_upd_ind.initiate = 0U;
   1406a:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	link->mem = conn->llcp_rx;
   1406e:	607a      	str	r2, [r7, #4]
	(*rx)->hdr.link = link;
   14070:	682b      	ldr	r3, [r5, #0]
   14072:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
   14074:	682b      	ldr	r3, [r5, #0]
   14076:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
	*rx = NULL;
   1407a:	2300      	movs	r3, #0
   1407c:	602b      	str	r3, [r5, #0]
	struct node_rx_pdu *rx_dle = ll_pdu_rx_alloc();
   1407e:	f7fc ff71 	bl	10f64 <ll_pdu_rx_alloc>
	LL_ASSERT(rx_dle);
   14082:	4605      	mov	r5, r0
   14084:	2800      	cmp	r0, #0
   14086:	f000 8258 	beq.w	1453a <ull_conn_rx+0x167a>
	rx_dle->hdr.link->mem = conn->llcp_rx;
   1408a:	682b      	ldr	r3, [r5, #0]
   1408c:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   14090:	605a      	str	r2, [r3, #4]
	conn->llcp_ack -= 2U;
   14092:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
	if (conn->llcp.phy_upd_ind.tx) {
   14096:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
	conn->llcp_rx = rx_dle;
   1409a:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
	conn->llcp_ack -= 2U;
   1409e:	3a02      	subs	r2, #2
	conn->llcp_type = LLCP_PHY_UPD;
   140a0:	2106      	movs	r1, #6
	if (conn->llcp.phy_upd_ind.tx) {
   140a2:	f013 0f1c 	tst.w	r3, #28
	conn->llcp_ack -= 2U;
   140a6:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
	conn->llcp_type = LLCP_PHY_UPD;
   140aa:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
	if (conn->llcp.phy_upd_ind.tx) {
   140ae:	f43e af56 	beq.w	12f5e <ull_conn_rx+0x9e>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   140b2:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
   140b6:	f3c3 0382 	ubfx	r3, r3, #2, #3
   140ba:	f363 1206 	bfi	r2, r3, #4, #3
   140be:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
	int nack = 0;
   140c2:	2000      	movs	r0, #0
   140c4:	f7fe bf4c 	b.w	12f60 <ull_conn_rx+0xa0>
	} else if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   140c8:	f894 2185 	ldrb.w	r2, [r4, #389]	; 0x185
   140cc:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   140d0:	429a      	cmp	r2, r3
   140d2:	f43f ac3e 	beq.w	13952 <ull_conn_rx+0xa92>
		rej_ext_ind->error_code = rej_ind->error_code;
   140d6:	f896 3020 	ldrb.w	r3, [r6, #32]
   140da:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
	if (!lll->role && (rej_ext_ind->error_code ==
   140de:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   140e2:	2a00      	cmp	r2, #0
   140e4:	f2c0 820b 	blt.w	144fe <ull_conn_rx+0x163e>
   140e8:	2b1a      	cmp	r3, #26
   140ea:	f000 828e 	beq.w	1460a <ull_conn_rx+0x174a>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   140ee:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   140f2:	f002 0307 	and.w	r3, r2, #7
   140f6:	2b04      	cmp	r3, #4
   140f8:	f47f ac88 	bne.w	13a0c <ull_conn_rx+0xb4c>
		LL_ASSERT(conn_upd_curr == conn);
   140fc:	4f58      	ldr	r7, [pc, #352]	; (14260 <ull_conn_rx+0x13a0>)
   140fe:	683b      	ldr	r3, [r7, #0]
   14100:	429c      	cmp	r4, r3
   14102:	d00e      	beq.n	14122 <ull_conn_rx+0x1262>
   14104:	4a53      	ldr	r2, [pc, #332]	; (14254 <ull_conn_rx+0x1394>)
   14106:	4957      	ldr	r1, [pc, #348]	; (14264 <ull_conn_rx+0x13a4>)
   14108:	4854      	ldr	r0, [pc, #336]	; (1425c <ull_conn_rx+0x139c>)
   1410a:	f241 2329 	movw	r3, #4649	; 0x1229
   1410e:	f00a fc05 	bl	1e91c <printk>
   14112:	4040      	eors	r0, r0
   14114:	f380 8811 	msr	BASEPRI, r0
   14118:	f04f 0003 	mov.w	r0, #3
   1411c:	df02      	svc	2
   1411e:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   14122:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   14126:	f884 3185 	strb.w	r3, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   1412a:	2300      	movs	r3, #0
   1412c:	603b      	str	r3, [r7, #0]
		conn->procedure_expire = 0U;
   1412e:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   14132:	e46b      	b.n	13a0c <ull_conn_rx+0xb4c>
			conn->llcp_length.disabled = 1U;
   14134:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
			conn->llcp_length.ack = conn->llcp_length.req;
   14138:	f884 31ad 	strb.w	r3, [r4, #429]	; 0x1ad
			conn->llcp_length.disabled = 1U;
   1413c:	f042 0308 	orr.w	r3, r2, #8
   14140:	f884 31ae 	strb.w	r3, [r4, #430]	; 0x1ae
			conn->llcp_length.ack = conn->llcp_length.req;
   14144:	f7ff ba6e 	b.w	13624 <ull_conn_rx+0x764>
				nack = reject_ext_ind_send(conn, *rx,
   14148:	4631      	mov	r1, r6
   1414a:	4620      	mov	r0, r4
   1414c:	2323      	movs	r3, #35	; 0x23
   1414e:	220f      	movs	r2, #15
   14150:	f7ff b83a 	b.w	131c8 <ull_conn_rx+0x308>
				nack = reject_ext_ind_send(conn, *rx,
   14154:	4631      	mov	r1, r6
   14156:	4620      	mov	r0, r4
   14158:	2323      	movs	r3, #35	; 0x23
   1415a:	f7ff b834 	b.w	131c6 <ull_conn_rx+0x306>
	conn->llcp_enc.pause_rx = 0U;
   1415e:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	conn->llcp_ack = conn->llcp_req;
   14162:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
	conn->llcp_enc.pause_rx = 0U;
   14166:	f022 0203 	bic.w	r2, r2, #3
	conn->procedure_expire = 0U;
   1416a:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   1416c:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
	conn->procedure_expire = 0U;
   14170:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   14174:	4618      	mov	r0, r3
   14176:	f7fe bef3 	b.w	12f60 <ull_conn_rx+0xa0>
   1417a:	464a      	mov	r2, r9
   1417c:	e537      	b.n	13bee <ull_conn_rx+0xd2e>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1417e:	2301      	movs	r3, #1
   14180:	7133      	strb	r3, [r6, #4]
		return BT_HCI_ERR_INSTANT_PASSED;
   14182:	2328      	movs	r3, #40	; 0x28
			conn->llcp_terminate.reason_peer = err;
   14184:	f884 3143 	strb.w	r3, [r4, #323]	; 0x143
	int nack = 0;
   14188:	2000      	movs	r0, #0
   1418a:	f7fe bee9 	b.w	12f60 <ull_conn_rx+0xa0>
		if (!conn->tx_ctrl) {
   1418e:	2b00      	cmp	r3, #0
   14190:	f47f ae91 	bne.w	13eb6 <ull_conn_rx+0xff6>
			tx->next = conn->tx_head;
   14194:	6017      	str	r7, [r2, #0]
				conn->tx_ctrl = tx;
   14196:	e9c4 2271 	strd	r2, r2, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1419a:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
   1419e:	e691      	b.n	13ec4 <ull_conn_rx+0x1004>
			lll->phy_tx_time = lll->phy_tx;
   141a0:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
			conn->llcp_phy.pause_tx = 0U;
   141a4:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
			conn->llcp_phy.ack = conn->llcp_phy.req;
   141a8:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
			conn->llcp_phy.pause_tx = 0U;
   141ac:	f023 0309 	bic.w	r3, r3, #9
			lll->phy_tx_time = lll->phy_tx;
   141b0:	4611      	mov	r1, r2
   141b2:	f362 1106 	bfi	r1, r2, #4, #3
			conn->llcp_phy.pause_tx = 0U;
   141b6:	f043 0308 	orr.w	r3, r3, #8
			lll->phy_tx_time = lll->phy_tx;
   141ba:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
			if (conn->llcp_phy.cmd) {
   141be:	0759      	lsls	r1, r3, #29
			conn->llcp_phy.pause_tx = 0U;
   141c0:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
			lll->phy_tx_time = lll->phy_tx;
   141c4:	f3c2 0202 	ubfx	r2, r2, #0, #3
			if (conn->llcp_phy.cmd) {
   141c8:	f140 808b 	bpl.w	142e2 <ull_conn_rx+0x1422>
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   141cc:	6829      	ldr	r1, [r5, #0]
				p->status = 0U;
   141ce:	2300      	movs	r3, #0
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   141d0:	201a      	movs	r0, #26
   141d2:	7108      	strb	r0, [r1, #4]
				p->tx = lll->phy_tx;
   141d4:	7772      	strb	r2, [r6, #29]
				p->status = 0U;
   141d6:	7733      	strb	r3, [r6, #28]
				p->rx = lll->phy_rx;
   141d8:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   141dc:	f3c3 0302 	ubfx	r3, r3, #0, #3
   141e0:	77b3      	strb	r3, [r6, #30]
   141e2:	f7ff ba1f 	b.w	13624 <ull_conn_rx+0x764>
			LL_ASSERT(conn_upd_curr == conn);
   141e6:	4f1e      	ldr	r7, [pc, #120]	; (14260 <ull_conn_rx+0x13a0>)
   141e8:	683a      	ldr	r2, [r7, #0]
   141ea:	4294      	cmp	r4, r2
   141ec:	d00e      	beq.n	1420c <ull_conn_rx+0x134c>
   141ee:	4a19      	ldr	r2, [pc, #100]	; (14254 <ull_conn_rx+0x1394>)
   141f0:	491c      	ldr	r1, [pc, #112]	; (14264 <ull_conn_rx+0x13a4>)
   141f2:	481a      	ldr	r0, [pc, #104]	; (1425c <ull_conn_rx+0x139c>)
   141f4:	f641 132d 	movw	r3, #6445	; 0x192d
   141f8:	f00a fb90 	bl	1e91c <printk>
   141fc:	4040      	eors	r0, r0
   141fe:	f380 8811 	msr	BASEPRI, r0
   14202:	f04f 0003 	mov.w	r0, #3
   14206:	df02      	svc	2
   14208:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
			if (!conn->llcp_conn_param.cmd) {
   1420c:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   14210:	f884 3185 	strb.w	r3, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   14214:	2300      	movs	r3, #0
   14216:	603b      	str	r3, [r7, #0]
			if (!conn->llcp_conn_param.cmd) {
   14218:	f012 0308 	ands.w	r3, r2, #8
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1421c:	682a      	ldr	r2, [r5, #0]
			if (!conn->llcp_conn_param.cmd) {
   1421e:	f43e aea8 	beq.w	12f72 <ull_conn_rx+0xb2>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   14222:	2116      	movs	r1, #22
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   14224:	231a      	movs	r3, #26
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   14226:	7111      	strb	r1, [r2, #4]
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   14228:	7733      	strb	r3, [r6, #28]
			cu->interval = lll->interval;
   1422a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
			cu->timeout = conn->supervision_reload *
   1422c:	f8b4 20c2 	ldrh.w	r2, [r4, #194]	; 0xc2
			cu->latency = lll->latency;
   14230:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
			cu->interval = lll->interval;
   14232:	83f3      	strh	r3, [r6, #30]
			cu->timeout = conn->supervision_reload *
   14234:	fb03 f202 	mul.w	r2, r3, r2
				      lll->interval * 125U / 1000;
   14238:	237d      	movs	r3, #125	; 0x7d
   1423a:	fb03 f302 	mul.w	r3, r3, r2
			cu->latency = lll->latency;
   1423e:	8431      	strh	r1, [r6, #32]
				      lll->interval * 125U / 1000;
   14240:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14244:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
   14248:	8473      	strh	r3, [r6, #34]	; 0x22
			    PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ)) {
   1424a:	f7ff b9eb 	b.w	13624 <ull_conn_rx+0x764>
   1424e:	bf00      	nop
   14250:	20002330 	.word	0x20002330
   14254:	00024e44 	.word	0x00024e44
   14258:	00024f90 	.word	0x00024f90
   1425c:	00024904 	.word	0x00024904
   14260:	200022ac 	.word	0x200022ac
   14264:	00024fb8 	.word	0x00024fb8
			conn->llcp_length.ack = conn->llcp_length.req;
   14268:	9b00      	ldr	r3, [sp, #0]
   1426a:	f884 31ad 	strb.w	r3, [r4, #429]	; 0x1ad
			conn->procedure_expire = 0U;
   1426e:	2700      	movs	r7, #0
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   14270:	454a      	cmp	r2, r9
			conn->procedure_expire = 0U;
   14272:	f8a4 70c8 	strh.w	r7, [r4, #200]	; 0xc8
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   14276:	f000 812e 	beq.w	144d6 <ull_conn_rx+0x1616>
			conn->lll.max_rx_time = eff_rx_time;
   1427a:	f8a4 c05e 	strh.w	ip, [r4, #94]	; 0x5e
			if (tx) {
   1427e:	2900      	cmp	r1, #0
   14280:	f000 8124 	beq.w	144cc <ull_conn_rx+0x160c>
				conn->llcp_length.state =
   14284:	f894 51ae 	ldrb.w	r5, [r4, #430]	; 0x1ae
					(conn->llcp_length.req - 1);
   14288:	9b00      	ldr	r3, [sp, #0]
				conn->llcp_length.rx_octets = eff_rx_octets;
   1428a:	f8a4 e1b0 	strh.w	lr, [r4, #432]	; 0x1b0
				conn->llcp_length.state =
   1428e:	2703      	movs	r7, #3
					(conn->llcp_length.req - 1);
   14290:	3b01      	subs	r3, #1
				conn->llcp_length.state =
   14292:	f367 0502 	bfi	r5, r7, #0, #3
				conn->llcp_length.ack =
   14296:	f884 31ad 	strb.w	r3, [r4, #429]	; 0x1ad
				conn->llcp_length.tx_octets = eff_tx_octets;
   1429a:	f8a4 21b2 	strh.w	r2, [r4, #434]	; 0x1b2
				conn->llcp_length.rx_time = eff_rx_time;
   1429e:	f8a4 c1b4 	strh.w	ip, [r4, #436]	; 0x1b4
				conn->llcp_length.tx_time = eff_tx_time;
   142a2:	f8a4 01b6 	strh.w	r0, [r4, #438]	; 0x1b6
				conn->llcp_length.state =
   142a6:	f884 51ae 	strb.w	r5, [r4, #430]	; 0x1ae
			lr->max_rx_octets = sys_cpu_to_le16(eff_rx_octets);
   142aa:	f8a6 e020 	strh.w	lr, [r6, #32]
			lr->max_tx_octets = sys_cpu_to_le16(eff_tx_octets);
   142ae:	84b2      	strh	r2, [r6, #36]	; 0x24
			lr->max_rx_time = sys_cpu_to_le16(eff_rx_time);
   142b0:	f8a6 c022 	strh.w	ip, [r6, #34]	; 0x22
			lr->max_tx_time = sys_cpu_to_le16(eff_tx_time);
   142b4:	84f0      	strh	r0, [r6, #38]	; 0x26
   142b6:	e4d7      	b.n	13c68 <ull_conn_rx+0xda8>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   142b8:	2301      	movs	r3, #1
   142ba:	7133      	strb	r3, [r6, #4]
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
   142bc:	232a      	movs	r3, #42	; 0x2a
   142be:	e761      	b.n	14184 <ull_conn_rx+0x12c4>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   142c0:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
				conn->llcp_ack -= 2U;
   142c4:	3b02      	subs	r3, #2
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   142c6:	f36f 0201 	bfc	r2, #0, #2
				conn->llcp_type = LLCP_ENCRYPTION;
   142ca:	2003      	movs	r0, #3
				conn->llcp_ack -= 2U;
   142cc:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   142d0:	f884 20f4 	strb.w	r2, [r4, #244]	; 0xf4
				conn->llcp_type = LLCP_ENCRYPTION;
   142d4:	f884 00e6 	strb.w	r0, [r4, #230]	; 0xe6
				conn->llcp_ack -= 2U;
   142d8:	f7ff bb19 	b.w	1390e <ull_conn_rx+0xa4e>
		conn_upd_curr = conn;
   142dc:	601c      	str	r4, [r3, #0]
   142de:	f7ff b9c5 	b.w	1366c <ull_conn_rx+0x7ac>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   142e2:	682b      	ldr	r3, [r5, #0]
   142e4:	2201      	movs	r2, #1
   142e6:	711a      	strb	r2, [r3, #4]
   142e8:	f7ff b99c 	b.w	13624 <ull_conn_rx+0x764>
				      0x03) == 0x02) &&
   142ec:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
   142f0:	2a03      	cmp	r2, #3
   142f2:	f47f ac3a 	bne.w	13b6a <ull_conn_rx+0xcaa>
   142f6:	e431      	b.n	13b5c <ull_conn_rx+0xc9c>
				uint16_t interval_min =
   142f8:	f8b6 8020 	ldrh.w	r8, [r6, #32]
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   142fc:	f1b8 0f05 	cmp.w	r8, #5
				uint16_t interval_min =
   14300:	fa1f f088 	uxth.w	r0, r8
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   14304:	f67f ade6 	bls.w	13ed4 <ull_conn_rx+0x1014>
				uint16_t interval_max =
   14308:	f8b6 e022 	ldrh.w	lr, [r6, #34]	; 0x22
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   1430c:	f5be 6f48 	cmp.w	lr, #3200	; 0xc80
				uint16_t interval_max =
   14310:	fa1f f28e 	uxth.w	r2, lr
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   14314:	f63f adde 	bhi.w	13ed4 <ull_conn_rx+0x1014>
				    (interval_max > 3200) ||
   14318:	4290      	cmp	r0, r2
   1431a:	f63f addb 	bhi.w	13ed4 <ull_conn_rx+0x1014>
				uint16_t latency =
   1431e:	f8b6 c024 	ldrh.w	ip, [r6, #36]	; 0x24
   14322:	fa1f f08c 	uxth.w	r0, ip
				    (interval_min > interval_max) ||
   14326:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
				uint16_t latency =
   1432a:	e9cd 0001 	strd	r0, r0, [sp, #4]
				    (interval_min > interval_max) ||
   1432e:	f4bf add1 	bcs.w	13ed4 <ull_conn_rx+0x1014>
				uint16_t timeout =
   14332:	8cf0      	ldrh	r0, [r6, #38]	; 0x26
   14334:	f8ad 000e 	strh.w	r0, [sp, #14]
				    (latency > 499) ||
   14338:	f1a0 090a 	sub.w	r9, r0, #10
   1433c:	fa1f f989 	uxth.w	r9, r9
   14340:	f640 4a76 	movw	sl, #3190	; 0xc76
   14344:	45d1      	cmp	r9, sl
				uint16_t timeout =
   14346:	fa1f fb80 	uxth.w	fp, r0
				    (latency > 499) ||
   1434a:	f63f adc3 	bhi.w	13ed4 <ull_conn_rx+0x1014>
				     ((latency + 1) * interval_max)) ||
   1434e:	9801      	ldr	r0, [sp, #4]
   14350:	fb00 2902 	mla	r9, r0, r2, r2
				    (timeout > 3200) ||
   14354:	ebb9 0f8b 	cmp.w	r9, fp, lsl #2
   14358:	f4bf adbc 	bcs.w	13ed4 <ull_conn_rx+0x1014>
				     ((latency + 1) * interval_max)) ||
   1435c:	f896 a028 	ldrb.w	sl, [r6, #40]	; 0x28
   14360:	4552      	cmp	r2, sl
   14362:	f4ff adb7 	bcc.w	13ed4 <ull_conn_rx+0x1014>
				conn->llcp_conn_param.timeout =	timeout;
   14366:	f8bd 000e 	ldrh.w	r0, [sp, #14]
				conn->llcp_conn_param.latency =	latency;
   1436a:	f8a4 c18c 	strh.w	ip, [r4, #396]	; 0x18c
				conn->llcp_conn_param.interval_min =
   1436e:	f8a4 8188 	strh.w	r8, [r4, #392]	; 0x188
				conn->llcp_conn_param.interval_max =
   14372:	f8a4 e18a 	strh.w	lr, [r4, #394]	; 0x18a
				conn->llcp_conn_param.timeout =	timeout;
   14376:	f8a4 018e 	strh.w	r0, [r4, #398]	; 0x18e
				conn->llcp_conn_param.preferred_periodicity =
   1437a:	f884 a190 	strb.w	sl, [r4, #400]	; 0x190
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   1437e:	f896 e02a 	ldrb.w	lr, [r6, #42]	; 0x2a
   14382:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
				     lll->interval) ||
   14386:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   1438a:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
   1438e:	f8a4 0192 	strh.w	r0, [r4, #402]	; 0x192
					sys_le16_to_cpu(cpr->offset0);
   14392:	f896 e02c 	ldrb.w	lr, [r6, #44]	; 0x2c
   14396:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
   1439a:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset0 =
   1439e:	f8a4 0194 	strh.w	r0, [r4, #404]	; 0x194
					sys_le16_to_cpu(cpr->offset1);
   143a2:	f896 e02e 	ldrb.w	lr, [r6, #46]	; 0x2e
   143a6:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
   143aa:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset1 =
   143ae:	f8a4 0196 	strh.w	r0, [r4, #406]	; 0x196
					sys_le16_to_cpu(cpr->offset2);
   143b2:	f896 e030 	ldrb.w	lr, [r6, #48]	; 0x30
   143b6:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
   143ba:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset2 =
   143be:	f8a4 0198 	strh.w	r0, [r4, #408]	; 0x198
					sys_le16_to_cpu(cpr->offset3);
   143c2:	f896 e032 	ldrb.w	lr, [r6, #50]	; 0x32
   143c6:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
   143ca:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset3 =
   143ce:	f8a4 019a 	strh.w	r0, [r4, #410]	; 0x19a
					sys_le16_to_cpu(cpr->offset4);
   143d2:	f896 0033 	ldrb.w	r0, [r6, #51]	; 0x33
   143d6:	f896 e034 	ldrb.w	lr, [r6, #52]	; 0x34
   143da:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset4 =
   143de:	f8a4 019c 	strh.w	r0, [r4, #412]	; 0x19c
					sys_le16_to_cpu(cpr->offset5);
   143e2:	f896 0035 	ldrb.w	r0, [r6, #53]	; 0x35
   143e6:	f896 6036 	ldrb.w	r6, [r6, #54]	; 0x36
				if ((conn->llcp_conn_param.interval_max !=
   143ea:	4562      	cmp	r2, ip
					sys_le16_to_cpu(cpr->offset5);
   143ec:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
				conn->llcp_conn_param.offset5 =
   143f0:	f8a4 019e 	strh.w	r0, [r4, #414]	; 0x19e
				if ((conn->llcp_conn_param.interval_max !=
   143f4:	f000 80af 	beq.w	14556 <ull_conn_rx+0x1696>
					if (conn->llcp_enc.pause_tx) {
   143f8:	0789      	lsls	r1, r1, #30
						conn->llcp_conn_param.state =
   143fa:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
					if (conn->llcp_enc.pause_tx) {
   143fe:	f57f acd7 	bpl.w	13db0 <ull_conn_rx+0xef0>
						(*rx)->hdr.type =
   14402:	6829      	ldr	r1, [r5, #0]
						conn->llcp_conn_param.state =
   14404:	2002      	movs	r0, #2
   14406:	f360 0202 	bfi	r2, r0, #0, #3
						(*rx)->hdr.type =
   1440a:	2001      	movs	r0, #1
						conn->llcp_conn_param.state =
   1440c:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
						(*rx)->hdr.type =
   14410:	7108      	strb	r0, [r1, #4]
   14412:	e4d2      	b.n	13dba <ull_conn_rx+0xefa>
			LL_ASSERT(conn->slave.llcp_type == LLCP_NONE);
   14414:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
			conn->llcp_ack += 2U;
   14418:	3202      	adds	r2, #2
   1441a:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			LL_ASSERT(conn->slave.llcp_type == LLCP_NONE);
   1441e:	2b00      	cmp	r3, #0
   14420:	d146      	bne.n	144b0 <ull_conn_rx+0x15f0>
			conn->slave.llcp_type = conn->llcp_type;
   14422:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   14426:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
   1442a:	f7ff b9c7 	b.w	137bc <ull_conn_rx+0x8fc>
	struct node_tx *tx = NULL;
   1442e:	2100      	movs	r1, #0
   14430:	f7fe bef9 	b.w	13226 <ull_conn_rx+0x366>
				conn->llcp_length.state =
   14434:	2604      	movs	r6, #4
   14436:	f366 0302 	bfi	r3, r6, #0, #3
				conn->lll.max_tx_octets = eff_tx_octets;
   1443a:	f8a4 2058 	strh.w	r2, [r4, #88]	; 0x58
				conn->lll.max_tx_time = eff_tx_time;
   1443e:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
				conn->llcp_length.state =
   14442:	f884 31ae 	strb.w	r3, [r4, #430]	; 0x1ae
   14446:	e405      	b.n	13c54 <ull_conn_rx+0xd94>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   14448:	791a      	ldrb	r2, [r3, #4]
   1444a:	f002 0203 	and.w	r2, r2, #3
   1444e:	2a03      	cmp	r2, #3
   14450:	f000 80c1 	beq.w	145d6 <ull_conn_rx+0x1716>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   14454:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   14458:	f7ff b822 	b.w	134a0 <ull_conn_rx+0x5e0>
			conn->tx_data = conn->tx_data->next;
   1445c:	6818      	ldr	r0, [r3, #0]
   1445e:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   14462:	2a00      	cmp	r2, #0
   14464:	f47f a81c 	bne.w	134a0 <ull_conn_rx+0x5e0>
			tx->next = conn->tx_head->next;
   14468:	681a      	ldr	r2, [r3, #0]
   1446a:	600a      	str	r2, [r1, #0]
			conn->tx_head->next = tx;
   1446c:	6019      	str	r1, [r3, #0]
				conn->tx_ctrl_last = tx;
   1446e:	e9c4 1172 	strd	r1, r1, [r4, #456]	; 0x1c8
   14472:	f7ff b81c 	b.w	134ae <ull_conn_rx+0x5ee>
		LL_ASSERT(conn_upd_curr == conn);
   14476:	4f87      	ldr	r7, [pc, #540]	; (14694 <ull_conn_rx+0x17d4>)
   14478:	6839      	ldr	r1, [r7, #0]
   1447a:	428c      	cmp	r4, r1
   1447c:	d010      	beq.n	144a0 <ull_conn_rx+0x15e0>
   1447e:	4a86      	ldr	r2, [pc, #536]	; (14698 <ull_conn_rx+0x17d8>)
   14480:	4986      	ldr	r1, [pc, #536]	; (1469c <ull_conn_rx+0x17dc>)
   14482:	4887      	ldr	r0, [pc, #540]	; (146a0 <ull_conn_rx+0x17e0>)
   14484:	f241 2329 	movw	r3, #4649	; 0x1229
   14488:	f00a fa48 	bl	1e91c <printk>
   1448c:	4040      	eors	r0, r0
   1448e:	f380 8811 	msr	BASEPRI, r0
   14492:	f04f 0003 	mov.w	r0, #3
   14496:	df02      	svc	2
   14498:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   1449c:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   144a0:	f884 3185 	strb.w	r3, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   144a4:	2300      	movs	r3, #0
   144a6:	603b      	str	r3, [r7, #0]
		conn->procedure_expire = 0U;
   144a8:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   144ac:	f7ff baae 	b.w	13a0c <ull_conn_rx+0xb4c>
			LL_ASSERT(conn->slave.llcp_type == LLCP_NONE);
   144b0:	4a79      	ldr	r2, [pc, #484]	; (14698 <ull_conn_rx+0x17d8>)
   144b2:	497c      	ldr	r1, [pc, #496]	; (146a4 <ull_conn_rx+0x17e4>)
   144b4:	487a      	ldr	r0, [pc, #488]	; (146a0 <ull_conn_rx+0x17e0>)
   144b6:	f241 63c1 	movw	r3, #5825	; 0x16c1
   144ba:	f00a fa2f 	bl	1e91c <printk>
   144be:	4040      	eors	r0, r0
   144c0:	f380 8811 	msr	BASEPRI, r0
   144c4:	f04f 0003 	mov.w	r0, #3
   144c8:	df02      	svc	2
   144ca:	e7aa      	b.n	14422 <ull_conn_rx+0x1562>
				conn->lll.max_tx_octets = eff_tx_octets;
   144cc:	f8a4 2058 	strh.w	r2, [r4, #88]	; 0x58
				conn->lll.max_tx_time = eff_tx_time;
   144d0:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
   144d4:	e6e9      	b.n	142aa <ull_conn_rx+0x13ea>
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   144d6:	4558      	cmp	r0, fp
   144d8:	f47f aecf 	bne.w	1427a <ull_conn_rx+0x13ba>
			    eff_rx_time == conn->lll.max_rx_time &&
   144dc:	45d4      	cmp	ip, sl
   144de:	f47f aecc 	bne.w	1427a <ull_conn_rx+0x13ba>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   144e2:	682b      	ldr	r3, [r5, #0]
   144e4:	2501      	movs	r5, #1
   144e6:	711d      	strb	r5, [r3, #4]
				goto send_length_resp;
   144e8:	f7ff bbbe 	b.w	13c68 <ull_conn_rx+0xda8>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   144ec:	2a23      	cmp	r2, #35	; 0x23
   144ee:	f43f aa86 	beq.w	139fe <ull_conn_rx+0xb3e>
			conn->slave.ticks_to_offset =
   144f2:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
   144f6:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
   144fa:	f7ff ba80 	b.w	139fe <ull_conn_rx+0xb3e>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   144fe:	2b23      	cmp	r3, #35	; 0x23
   14500:	f43f adf5 	beq.w	140ee <ull_conn_rx+0x122e>
			conn->slave.ticks_to_offset =
   14504:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
   14508:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
   1450c:	e5ef      	b.n	140ee <ull_conn_rx+0x122e>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1450e:	791a      	ldrb	r2, [r3, #4]
   14510:	f002 0203 	and.w	r2, r2, #3
   14514:	2a03      	cmp	r2, #3
   14516:	d072      	beq.n	145fe <ull_conn_rx+0x173e>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   14518:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   1451c:	f7ff b9c4 	b.w	138a8 <ull_conn_rx+0x9e8>
			conn->tx_data = conn->tx_data->next;
   14520:	6819      	ldr	r1, [r3, #0]
   14522:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   14526:	2a00      	cmp	r2, #0
   14528:	f47f a9be 	bne.w	138a8 <ull_conn_rx+0x9e8>
			tx->next = conn->tx_head->next;
   1452c:	681a      	ldr	r2, [r3, #0]
   1452e:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   14530:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
   14532:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   14536:	f7ff b9be 	b.w	138b6 <ull_conn_rx+0x9f6>
	LL_ASSERT(rx_dle);
   1453a:	4a57      	ldr	r2, [pc, #348]	; (14698 <ull_conn_rx+0x17d8>)
   1453c:	495a      	ldr	r1, [pc, #360]	; (146a8 <ull_conn_rx+0x17e8>)
   1453e:	4858      	ldr	r0, [pc, #352]	; (146a0 <ull_conn_rx+0x17e0>)
   14540:	f241 43eb 	movw	r3, #5355	; 0x14eb
   14544:	f00a f9ea 	bl	1e91c <printk>
   14548:	4040      	eors	r0, r0
   1454a:	f380 8811 	msr	BASEPRI, r0
   1454e:	f04f 0003 	mov.w	r0, #3
   14552:	df02      	svc	2
   14554:	e599      	b.n	1408a <ull_conn_rx+0x11ca>
				     lll->interval) ||
   14556:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   14558:	9802      	ldr	r0, [sp, #8]
   1455a:	4282      	cmp	r2, r0
   1455c:	f47f af4c 	bne.w	143f8 <ull_conn_rx+0x1538>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   14560:	f240 42e2 	movw	r2, #1250	; 0x4e2
   14564:	fb02 f00c 	mul.w	r0, r2, ip
   14568:	f242 7210 	movw	r2, #10000	; 0x2710
				     lll->latency) ||
   1456c:	f8b4 60c2 	ldrh.w	r6, [r4, #194]	; 0xc2
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   14570:	fb02 020b 	mla	r2, r2, fp, r0
   14574:	3a01      	subs	r2, #1
   14576:	fbb2 f2f0 	udiv	r2, r2, r0
				     lll->latency) ||
   1457a:	b292      	uxth	r2, r2
   1457c:	4296      	cmp	r6, r2
   1457e:	f47f af3b 	bne.w	143f8 <ull_conn_rx+0x1538>
				conn->llcp_conn_param.state =
   14582:	f8b4 2186 	ldrh.w	r2, [r4, #390]	; 0x186
   14586:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
   1458a:	f042 0201 	orr.w	r2, r2, #1
   1458e:	f8a4 2186 	strh.w	r2, [r4, #390]	; 0x186
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   14592:	682a      	ldr	r2, [r5, #0]
   14594:	2101      	movs	r1, #1
   14596:	7111      	strb	r1, [r2, #4]
   14598:	e40f      	b.n	13dba <ull_conn_rx+0xefa>
			     lll->interval) ||
   1459a:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
   1459c:	4550      	cmp	r0, sl
   1459e:	f47f ac05 	bne.w	13dac <ull_conn_rx+0xeec>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   145a2:	f240 40e2 	movw	r0, #1250	; 0x4e2
   145a6:	fb00 f101 	mul.w	r1, r0, r1
   145aa:	f242 7010 	movw	r0, #10000	; 0x2710
   145ae:	fb00 1202 	mla	r2, r0, r2, r1
			    (conn->llcp_conn_param.latency != lll->latency) ||
   145b2:	f8b4 00c2 	ldrh.w	r0, [r4, #194]	; 0xc2
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   145b6:	3a01      	subs	r2, #1
   145b8:	fbb2 f2f1 	udiv	r2, r2, r1
			    (conn->llcp_conn_param.latency != lll->latency) ||
   145bc:	b292      	uxth	r2, r2
   145be:	4290      	cmp	r0, r2
   145c0:	f47f abf4 	bne.w	13dac <ull_conn_rx+0xeec>
   145c4:	e7dd      	b.n	14582 <ull_conn_rx+0x16c2>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   145c6:	793b      	ldrb	r3, [r7, #4]
   145c8:	f003 0303 	and.w	r3, r3, #3
   145cc:	2b03      	cmp	r3, #3
   145ce:	d05b      	beq.n	14688 <ull_conn_rx+0x17c8>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   145d0:	e9c4 7772 	strd	r7, r7, [r4, #456]	; 0x1c8
   145d4:	e46f      	b.n	13eb6 <ull_conn_rx+0xff6>
	    ((pdu_data_tx->llctrl.opcode !=
   145d6:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   145d8:	2a03      	cmp	r2, #3
   145da:	f43f af45 	beq.w	14468 <ull_conn_rx+0x15a8>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   145de:	2a0a      	cmp	r2, #10
   145e0:	f47f af38 	bne.w	14454 <ull_conn_rx+0x1594>
   145e4:	e740      	b.n	14468 <ull_conn_rx+0x15a8>
			conn->tx_data = conn->tx_data->next;
   145e6:	6839      	ldr	r1, [r7, #0]
   145e8:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   145ec:	2b00      	cmp	r3, #0
   145ee:	f47f ac62 	bne.w	13eb6 <ull_conn_rx+0xff6>
			tx->next = conn->tx_head->next;
   145f2:	683b      	ldr	r3, [r7, #0]
   145f4:	6013      	str	r3, [r2, #0]
			conn->tx_head->next = tx;
   145f6:	603a      	str	r2, [r7, #0]
				conn->tx_ctrl_last = tx;
   145f8:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   145fc:	e462      	b.n	13ec4 <ull_conn_rx+0x1004>
	    ((pdu_data_tx->llctrl.opcode !=
   145fe:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   14600:	2a03      	cmp	r2, #3
   14602:	d093      	beq.n	1452c <ull_conn_rx+0x166c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   14604:	2a0a      	cmp	r2, #10
   14606:	d187      	bne.n	14518 <ull_conn_rx+0x1658>
   14608:	e790      	b.n	1452c <ull_conn_rx+0x166c>
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
   1460a:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
   1460e:	f894 210d 	ldrb.w	r2, [r4, #269]	; 0x10d
   14612:	4293      	cmp	r3, r2
   14614:	d00e      	beq.n	14634 <ull_conn_rx+0x1774>
   14616:	4a20      	ldr	r2, [pc, #128]	; (14698 <ull_conn_rx+0x17d8>)
   14618:	4924      	ldr	r1, [pc, #144]	; (146ac <ull_conn_rx+0x17ec>)
   1461a:	4821      	ldr	r0, [pc, #132]	; (146a0 <ull_conn_rx+0x17e0>)
   1461c:	f241 230e 	movw	r3, #4622	; 0x120e
   14620:	f00a f97c 	bl	1e91c <printk>
   14624:	4040      	eors	r0, r0
   14626:	f380 8811 	msr	BASEPRI, r0
   1462a:	f04f 0003 	mov.w	r0, #3
   1462e:	df02      	svc	2
   14630:	f894 210d 	ldrb.w	r2, [r4, #269]	; 0x10d
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   14634:	f894 1186 	ldrb.w	r1, [r4, #390]	; 0x186
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   14638:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
   1463c:	f8a4 3110 	strh.w	r3, [r4, #272]	; 0x110
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   14640:	2305      	movs	r3, #5
   14642:	f363 0102 	bfi	r1, r3, #0, #3
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   14646:	f894 010e 	ldrb.w	r0, [r4, #270]	; 0x10e
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1464a:	f884 1186 	strb.w	r1, [r4, #390]	; 0x186
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   1464e:	f3c1 03c0 	ubfx	r3, r1, #3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   14652:	00db      	lsls	r3, r3, #3
   14654:	f020 000f 	bic.w	r0, r0, #15
   14658:	f043 0301 	orr.w	r3, r3, #1
   1465c:	4303      	orrs	r3, r0
		conn->llcp_cu.ack--;
   1465e:	3a01      	subs	r2, #1
		conn->llcp_cu.win_size = 1U;
   14660:	2501      	movs	r5, #1
		conn->llcp_cu.ack--;
   14662:	f884 210d 	strb.w	r2, [r4, #269]	; 0x10d
		conn->llcp_cu.win_offset_us = 0U;
   14666:	2000      	movs	r0, #0
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   14668:	f8b4 218c 	ldrh.w	r2, [r4, #396]	; 0x18c
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1466c:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   14670:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
		conn->llcp_cu.win_size = 1U;
   14674:	f884 511c 	strb.w	r5, [r4, #284]	; 0x11c
		conn->llcp_cu.win_offset_us = 0U;
   14678:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   1467c:	f8a4 2112 	strh.w	r2, [r4, #274]	; 0x112
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   14680:	f8a4 3114 	strh.w	r3, [r4, #276]	; 0x114
	if (err) {
   14684:	f7fe bc69 	b.w	12f5a <ull_conn_rx+0x9a>
	    ((pdu_data_tx->llctrl.opcode !=
   14688:	79fb      	ldrb	r3, [r7, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1468a:	2b03      	cmp	r3, #3
   1468c:	d0b1      	beq.n	145f2 <ull_conn_rx+0x1732>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1468e:	2b0a      	cmp	r3, #10
   14690:	d19e      	bne.n	145d0 <ull_conn_rx+0x1710>
   14692:	e7ae      	b.n	145f2 <ull_conn_rx+0x1732>
   14694:	200022ac 	.word	0x200022ac
   14698:	00024e44 	.word	0x00024e44
   1469c:	00024fb8 	.word	0x00024fb8
   146a0:	00024904 	.word	0x00024904
   146a4:	00024f6c 	.word	0x00024f6c
   146a8:	00024fd0 	.word	0x00024fd0
   146ac:	00024f90 	.word	0x00024f90

000146b0 <ull_conn_llcp>:
{
   146b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   146b4:	4604      	mov	r4, r0
	if ((conn->llcp_ack == conn->llcp_req) &&
   146b6:	f890 00e5 	ldrb.w	r0, [r0, #229]	; 0xe5
   146ba:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   146be:	4298      	cmp	r0, r3
{
   146c0:	460d      	mov	r5, r1
   146c2:	4616      	mov	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) &&
   146c4:	d042      	beq.n	1474c <ull_conn_llcp+0x9c>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   146c6:	1a1b      	subs	r3, r3, r0
   146c8:	f003 0303 	and.w	r3, r3, #3
   146cc:	2b02      	cmp	r3, #2
   146ce:	d055      	beq.n	1477c <ull_conn_llcp+0xcc>
   146d0:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
   146d4:	468c      	mov	ip, r1
	if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   146d6:	f1bc 0f00 	cmp.w	ip, #0
   146da:	f2c0 8084 	blt.w	147e6 <ull_conn_llcp+0x136>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
   146de:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
   146e2:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
   146e6:	429a      	cmp	r2, r3
   146e8:	d07a      	beq.n	147e0 <ull_conn_llcp+0x130>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   146ea:	48c0      	ldr	r0, [pc, #768]	; (149ec <ull_conn_llcp+0x33c>)
   146ec:	f7f8 fcf6 	bl	d0dc <mem_acquire>
		if (tx) {
   146f0:	2800      	cmp	r0, #0
   146f2:	d06c      	beq.n	147ce <ull_conn_llcp+0x11e>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
   146f4:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
   146f8:	f884 3141 	strb.w	r3, [r4, #321]	; 0x141
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   146fc:	7903      	ldrb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
   146fe:	2202      	movs	r2, #2
   14700:	7142      	strb	r2, [r0, #5]
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   14702:	f043 0303 	orr.w	r3, r3, #3
   14706:	7103      	strb	r3, [r0, #4]
			pdu_tx->llctrl.opcode =
   14708:	71c2      	strb	r2, [r0, #7]
	    conn->tx_head &&
   1470a:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
			pdu_tx->llctrl.terminate_ind.error_code =
   1470e:	f894 2142 	ldrb.w	r2, [r4, #322]	; 0x142
   14712:	7202      	strb	r2, [r0, #8]
	if (
   14714:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   14718:	2b00      	cmp	r3, #0
   1471a:	d04b      	beq.n	147b4 <ull_conn_llcp+0x104>
	    !conn->llcp_enc.pause_tx &&
   1471c:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   14720:	078d      	lsls	r5, r1, #30
   14722:	d447      	bmi.n	147b4 <ull_conn_llcp+0x104>
	    !conn->llcp_phy.pause_tx &&
   14724:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   14728:	07c9      	lsls	r1, r1, #31
   1472a:	d443      	bmi.n	147b4 <ull_conn_llcp+0x104>
		if (conn->tx_head == conn->tx_data) {
   1472c:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   14730:	428b      	cmp	r3, r1
   14732:	f000 846f 	beq.w	15014 <ull_conn_llcp+0x964>
		} else if (!conn->tx_ctrl) {
   14736:	2a00      	cmp	r2, #0
   14738:	d13e      	bne.n	147b8 <ull_conn_llcp+0x108>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1473a:	791a      	ldrb	r2, [r3, #4]
   1473c:	f002 0203 	and.w	r2, r2, #3
   14740:	2a03      	cmp	r2, #3
   14742:	f000 8700 	beq.w	15546 <ull_conn_llcp+0xe96>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   14746:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
   1474a:	e037      	b.n	147bc <ull_conn_llcp+0x10c>
   1474c:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
	if ((conn->llcp_ack == conn->llcp_req) &&
   14750:	2900      	cmp	r1, #0
   14752:	468c      	mov	ip, r1
   14754:	f2c0 81c5 	blt.w	14ae2 <ull_conn_llcp+0x432>
	    !conn->llcp_enc.pause_rx) {
   14758:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    (!conn->lll.role || (conn->slave.llcp_type == LLCP_NONE)) &&
   1475c:	f012 0801 	ands.w	r8, r2, #1
   14760:	d1b9      	bne.n	146d6 <ull_conn_llcp+0x26>
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
   14762:	f894 e10d 	ldrb.w	lr, [r4, #269]	; 0x10d
   14766:	f894 710c 	ldrb.w	r7, [r4, #268]	; 0x10c
   1476a:	4577      	cmp	r7, lr
   1476c:	f000 8369 	beq.w	14e42 <ull_conn_llcp+0x792>
			conn->llcp_ack -= 2U;
   14770:	1e83      	subs	r3, r0, #2
			conn->llcp_type = LLCP_CONN_UPD;
   14772:	2201      	movs	r2, #1
			conn->llcp_ack -= 2U;
   14774:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
			conn->llcp_type = LLCP_CONN_UPD;
   14778:	f884 20e6 	strb.w	r2, [r4, #230]	; 0xe6
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   1477c:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
   14780:	f894 21ad 	ldrb.w	r2, [r4, #429]	; 0x1ad
   14784:	429a      	cmp	r2, r3
   14786:	d006      	beq.n	14796 <ull_conn_llcp+0xe6>
			if ((conn->llcp_length.state ==
   14788:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
   1478c:	f002 0106 	and.w	r1, r2, #6
   14790:	2904      	cmp	r1, #4
   14792:	f000 81ac 	beq.w	14aee <ull_conn_llcp+0x43e>
		switch (conn->llcp_type) {
   14796:	f894 90e6 	ldrb.w	r9, [r4, #230]	; 0xe6
   1479a:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
   1479e:	2b05      	cmp	r3, #5
   147a0:	f200 8191 	bhi.w	14ac6 <ull_conn_llcp+0x416>
   147a4:	e8df f013 	tbh	[pc, r3, lsl #1]
   147a8:	012a015c 	.word	0x012a015c
   147ac:	018f009e 	.word	0x018f009e
   147b0:	00580063 	.word	0x00580063
		if (!conn->tx_ctrl) {
   147b4:	2a00      	cmp	r2, #0
   147b6:	d049      	beq.n	1484c <ull_conn_llcp+0x19c>
	tx->next = conn->tx_ctrl_last->next;
   147b8:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   147bc:	681a      	ldr	r2, [r3, #0]
   147be:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   147c0:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   147c2:	6803      	ldr	r3, [r0, #0]
   147c4:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   147c8:	b90b      	cbnz	r3, 147ce <ull_conn_llcp+0x11e>
		conn->tx_data_last = tx;
   147ca:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
		if (!conn->procedure_expire) {
   147ce:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
   147d2:	b928      	cbnz	r0, 147e0 <ull_conn_llcp+0x130>
			conn->procedure_expire = conn->supervision_reload;
   147d4:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
			if (conn->procedure_expire <= 1U) {
   147d8:	2b01      	cmp	r3, #1
   147da:	d91e      	bls.n	1481a <ull_conn_llcp+0x16a>
			conn->procedure_expire = conn->supervision_reload;
   147dc:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	return 0;
   147e0:	2000      	movs	r0, #0
}
   147e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   147e6:	f894 20d9 	ldrb.w	r2, [r4, #217]	; 0xd9
	if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   147ea:	2a00      	cmp	r2, #0
   147ec:	f43f af77 	beq.w	146de <ull_conn_llcp+0x2e>
		switch (conn->slave.llcp_type) {
   147f0:	2a02      	cmp	r2, #2
   147f2:	f000 8140 	beq.w	14a76 <ull_conn_llcp+0x3c6>
   147f6:	2a06      	cmp	r2, #6
   147f8:	d014      	beq.n	14824 <ull_conn_llcp+0x174>
   147fa:	2a01      	cmp	r2, #1
   147fc:	d01b      	beq.n	14836 <ull_conn_llcp+0x186>
			LL_ASSERT(0);
   147fe:	4a7c      	ldr	r2, [pc, #496]	; (149f0 <ull_conn_llcp+0x340>)
   14800:	497c      	ldr	r1, [pc, #496]	; (149f4 <ull_conn_llcp+0x344>)
   14802:	487d      	ldr	r0, [pc, #500]	; (149f8 <ull_conn_llcp+0x348>)
   14804:	f240 434f 	movw	r3, #1103	; 0x44f
   14808:	f00a f888 	bl	1e91c <printk>
   1480c:	4040      	eors	r0, r0
   1480e:	f380 8811 	msr	BASEPRI, r0
   14812:	f04f 0003 	mov.w	r0, #3
   14816:	df02      	svc	2
			break;
   14818:	e761      	b.n	146de <ull_conn_llcp+0x2e>
				conn->procedure_expire++;
   1481a:	3301      	adds	r3, #1
   1481c:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
}
   14820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			event_counter = lll->event_counter +
   14824:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
   14826:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   14828:	440a      	add	r2, r1
					lll->latency_prepare + lazy;
   1482a:	4432      	add	r2, r6
			event_phy_upd_ind_prep(conn, event_counter);
   1482c:	b291      	uxth	r1, r2
   1482e:	4620      	mov	r0, r4
   14830:	f7fd fe24 	bl	1247c <event_phy_upd_ind_prep>
		break;
   14834:	e753      	b.n	146de <ull_conn_llcp+0x2e>
			if (event_conn_upd_prep(conn, lazy,
   14836:	462a      	mov	r2, r5
   14838:	4631      	mov	r1, r6
   1483a:	4620      	mov	r0, r4
   1483c:	f7ed f814 	bl	1868 <event_conn_upd_prep>
   14840:	2800      	cmp	r0, #0
   14842:	f47f af4c 	bne.w	146de <ull_conn_llcp+0x2e>
				return -ECANCELED;
   14846:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   1484a:	e7ca      	b.n	147e2 <ull_conn_llcp+0x132>
			tx->next = conn->tx_head;
   1484c:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   1484e:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   14852:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   14856:	e7b7      	b.n	147c8 <ull_conn_llcp+0x118>
			event_counter = lll->event_counter +
   14858:	8e61      	ldrh	r1, [r4, #50]	; 0x32
   1485a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   1485c:	4419      	add	r1, r3
					lll->latency_prepare + lazy;
   1485e:	4431      	add	r1, r6
			event_phy_upd_ind_prep(conn, event_counter);
   14860:	b289      	uxth	r1, r1
   14862:	4620      	mov	r0, r4
   14864:	f7fd fe0a 	bl	1247c <event_phy_upd_ind_prep>
		break;
   14868:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   1486c:	e733      	b.n	146d6 <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1486e:	485f      	ldr	r0, [pc, #380]	; (149ec <ull_conn_llcp+0x33c>)
   14870:	f7f8 fc34 	bl	d0dc <mem_acquire>
	if (tx) {
   14874:	2800      	cmp	r0, #0
   14876:	f000 80fb 	beq.w	14a70 <ull_conn_llcp+0x3c0>
		conn->llcp_ack = conn->llcp_req;
   1487a:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   1487e:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
   14882:	2301      	movs	r3, #1
   14884:	7143      	strb	r3, [r0, #5]
   14886:	e9d4 3771 	ldrd	r3, r7, [r4, #452]	; 0x1c4
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1488a:	7902      	ldrb	r2, [r0, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
   1488c:	2112      	movs	r1, #18
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1488e:	f042 0203 	orr.w	r2, r2, #3
   14892:	7102      	strb	r2, [r0, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
   14894:	71c1      	strb	r1, [r0, #7]
	if (
   14896:	2b00      	cmp	r3, #0
   14898:	f000 8327 	beq.w	14eea <ull_conn_llcp+0x83a>
	    !conn->llcp_enc.pause_tx &&
   1489c:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   148a0:	0791      	lsls	r1, r2, #30
   148a2:	f100 8322 	bmi.w	14eea <ull_conn_llcp+0x83a>
	    !conn->llcp_phy.pause_tx &&
   148a6:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   148aa:	07d2      	lsls	r2, r2, #31
   148ac:	f100 831d 	bmi.w	14eea <ull_conn_llcp+0x83a>
		if (conn->tx_head == conn->tx_data) {
   148b0:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   148b4:	4293      	cmp	r3, r2
   148b6:	f000 87f1 	beq.w	1589c <ull_conn_llcp+0x11ec>
		} else if (!conn->tx_ctrl) {
   148ba:	2f00      	cmp	r7, #0
   148bc:	f000 87fc 	beq.w	158b8 <ull_conn_llcp+0x1208>
	tx->next = conn->tx_ctrl_last->next;
   148c0:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   148c4:	681a      	ldr	r2, [r3, #0]
   148c6:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   148c8:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   148ca:	6803      	ldr	r3, [r0, #0]
   148cc:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   148d0:	2b00      	cmp	r3, #0
   148d2:	f000 84ab 	beq.w	1522c <ull_conn_llcp+0xb7c>
		conn->procedure_expire = conn->procedure_reload;
   148d6:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   148da:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   148de:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   148e2:	e6f8      	b.n	146d6 <ull_conn_llcp+0x26>
	if (conn->llcp.encryption.state) {
   148e4:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
   148e8:	f012 0803 	ands.w	r8, r2, #3
   148ec:	f000 8161 	beq.w	14bb2 <ull_conn_llcp+0x502>
		if (lll->role &&
   148f0:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   148f4:	2b00      	cmp	r3, #0
   148f6:	f6bf aef2 	bge.w	146de <ull_conn_llcp+0x2e>
   148fa:	f1b8 0f01 	cmp.w	r8, #1
   148fe:	f47f af72 	bne.w	147e6 <ull_conn_llcp+0x136>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   14902:	483a      	ldr	r0, [pc, #232]	; (149ec <ull_conn_llcp+0x33c>)
   14904:	f7f8 fbea 	bl	d0dc <mem_acquire>
	if (!tx) {
   14908:	4680      	mov	r8, r0
   1490a:	2800      	cmp	r0, #0
   1490c:	f000 80b0 	beq.w	14a70 <ull_conn_llcp+0x3c0>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14910:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   14912:	2204      	movs	r2, #4
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14914:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   14918:	210d      	movs	r1, #13
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
   1491a:	f100 0708 	add.w	r7, r0, #8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1491e:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   14920:	7141      	strb	r1, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   14922:	71c2      	strb	r2, [r0, #7]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
   14924:	210c      	movs	r1, #12
   14926:	4638      	mov	r0, r7
   14928:	f003 fa26 	bl	17d78 <lll_csrand_isr_get>
   1492c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   14930:	f8d8 200c 	ldr.w	r2, [r8, #12]
   14934:	f8c4 2102 	str.w	r2, [r4, #258]	; 0x102
   14938:	f8c4 30fe 	str.w	r3, [r4, #254]	; 0xfe
	    conn->tx_head &&
   1493c:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   14940:	f8d8 2010 	ldr.w	r2, [r8, #16]
   14944:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	if (
   14948:	2b00      	cmp	r3, #0
   1494a:	f000 85b6 	beq.w	154ba <ull_conn_llcp+0xe0a>
	    !conn->llcp_enc.pause_tx &&
   1494e:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
   14952:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
	    conn->tx_head &&
   14956:	0789      	lsls	r1, r1, #30
   14958:	f100 85b1 	bmi.w	154be <ull_conn_llcp+0xe0e>
	    !conn->llcp_phy.pause_tx &&
   1495c:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   14960:	07cf      	lsls	r7, r1, #31
   14962:	f100 85ac 	bmi.w	154be <ull_conn_llcp+0xe0e>
		if (conn->tx_head == conn->tx_data) {
   14966:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   1496a:	428b      	cmp	r3, r1
   1496c:	f000 87e2 	beq.w	15934 <ull_conn_llcp+0x1284>
		} else if (!conn->tx_ctrl) {
   14970:	2a00      	cmp	r2, #0
   14972:	f001 8055 	beq.w	15a20 <ull_conn_llcp+0x1370>
	tx->next = conn->tx_ctrl_last->next;
   14976:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1497a:	681a      	ldr	r2, [r3, #0]
   1497c:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
   14980:	f8c3 8000 	str.w	r8, [r3]
	conn->tx_ctrl_last = tx;
   14984:	f8d8 3000 	ldr.w	r3, [r8]
   14988:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1498c:	2b00      	cmp	r3, #0
   1498e:	f000 86d1 	beq.w	15734 <ull_conn_llcp+0x1084>
			rx = ll_pdu_rx_alloc();
   14992:	f7fc fae7 	bl	10f64 <ll_pdu_rx_alloc>
			if (!rx) {
   14996:	4601      	mov	r1, r0
   14998:	2800      	cmp	r0, #0
   1499a:	d069      	beq.n	14a70 <ull_conn_llcp+0x3c0>
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   1499c:	7f0b      	ldrb	r3, [r1, #28]
			rx->hdr.handle = conn->lll.handle;
   1499e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   149a0:	80ca      	strh	r2, [r1, #6]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   149a2:	f043 0303 	orr.w	r3, r3, #3
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   149a6:	2203      	movs	r2, #3
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
   149a8:	2017      	movs	r0, #23
   149aa:	7748      	strb	r0, [r1, #29]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   149ac:	770b      	strb	r3, [r1, #28]
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   149ae:	710a      	strb	r2, [r1, #4]
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   149b0:	77ca      	strb	r2, [r1, #31]
   149b2:	f8d4 216d 	ldr.w	r2, [r4, #365]	; 0x16d
   149b6:	f8d4 3169 	ldr.w	r3, [r4, #361]	; 0x169
   149ba:	620b      	str	r3, [r1, #32]
   149bc:	624a      	str	r2, [r1, #36]	; 0x24
			pdu->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
   149be:	f894 3167 	ldrb.w	r3, [r4, #359]	; 0x167
   149c2:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
			pdu->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
   149c6:	f894 3168 	ldrb.w	r3, [r4, #360]	; 0x168
   149ca:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
			ll_rx_put(rx->hdr.link, rx);
   149ce:	6808      	ldr	r0, [r1, #0]
   149d0:	f7fc fa9a 	bl	10f08 <ll_rx_put>
			ll_rx_sched();
   149d4:	f7fc faa2 	bl	10f1c <ll_rx_sched>
			conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
   149d8:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   149dc:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   149e0:	2202      	movs	r2, #2
   149e2:	f362 0301 	bfi	r3, r2, #0, #2
   149e6:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
   149ea:	e674      	b.n	146d6 <ull_conn_llcp+0x26>
   149ec:	20002330 	.word	0x20002330
   149f0:	00024e44 	.word	0x00024e44
   149f4:	00024974 	.word	0x00024974
   149f8:	00024904 	.word	0x00024904
			event_counter = lll->event_counter +
   149fc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   149fe:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
	if (conn->llcp.chan_map.initiate) {
   14a00:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
			event_counter = lll->event_counter +
   14a04:	440b      	add	r3, r1
					lll->latency_prepare + lazy;
   14a06:	4433      	add	r3, r6
	if (conn->llcp.chan_map.initiate) {
   14a08:	f012 0201 	ands.w	r2, r2, #1
			event_counter = lll->event_counter +
   14a0c:	b29f      	uxth	r7, r3
	if (conn->llcp.chan_map.initiate) {
   14a0e:	f040 8085 	bne.w	14b1c <ull_conn_llcp+0x46c>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   14a12:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
   14a16:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   14a1a:	1afb      	subs	r3, r7, r3
   14a1c:	0418      	lsls	r0, r3, #16
   14a1e:	f53f ae5a 	bmi.w	146d6 <ull_conn_llcp+0x26>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   14a22:	f1bc 0f00 	cmp.w	ip, #0
   14a26:	f2c0 83f9 	blt.w	1521c <ull_conn_llcp+0xb6c>
			conn->llcp_ack = conn->llcp_req;
   14a2a:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   14a2e:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
   14a32:	4623      	mov	r3, r4
		memcpy(&lll->data_chan_map[0],
   14a34:	f104 0034 	add.w	r0, r4, #52	; 0x34
   14a38:	f853 2fe9 	ldr.w	r2, [r3, #233]!
   14a3c:	6362      	str	r2, [r4, #52]	; 0x34
   14a3e:	791b      	ldrb	r3, [r3, #4]
   14a40:	7103      	strb	r3, [r0, #4]
			util_ones_count_get(&lll->data_chan_map[0],
   14a42:	2105      	movs	r1, #5
   14a44:	f7f8 fd16 	bl	d474 <util_ones_count_get>
		lll->data_chan_count =
   14a48:	f894 c039 	ldrb.w	ip, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   14a4c:	2301      	movs	r3, #1
		lll->data_chan_count =
   14a4e:	f360 0c05 	bfi	ip, r0, #0, #6
   14a52:	f884 c039 	strb.w	ip, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   14a56:	f884 31d8 	strb.w	r3, [r4, #472]	; 0x1d8
   14a5a:	fa4f fc8c 	sxtb.w	ip, ip
   14a5e:	e63a      	b.n	146d6 <ull_conn_llcp+0x26>
			if (event_conn_upd_prep(conn, lazy,
   14a60:	462a      	mov	r2, r5
   14a62:	4631      	mov	r1, r6
   14a64:	4620      	mov	r0, r4
   14a66:	f7ec feff 	bl	1868 <event_conn_upd_prep>
   14a6a:	2800      	cmp	r0, #0
   14a6c:	f43f aeeb 	beq.w	14846 <ull_conn_llcp+0x196>
			break;
   14a70:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   14a74:	e62f      	b.n	146d6 <ull_conn_llcp+0x26>
			event_counter = lll->event_counter +
   14a76:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   14a78:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
	if (conn->llcp.chan_map.initiate) {
   14a7a:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
			event_counter = lll->event_counter +
   14a7e:	440a      	add	r2, r1
					lll->latency_prepare + lazy;
   14a80:	4432      	add	r2, r6
	if (conn->llcp.chan_map.initiate) {
   14a82:	f013 0301 	ands.w	r3, r3, #1
			event_counter = lll->event_counter +
   14a86:	b296      	uxth	r6, r2
	if (conn->llcp.chan_map.initiate) {
   14a88:	f040 80f4 	bne.w	14c74 <ull_conn_llcp+0x5c4>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   14a8c:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
   14a90:	1ab6      	subs	r6, r6, r2
   14a92:	0436      	lsls	r6, r6, #16
   14a94:	f53f ae23 	bmi.w	146de <ull_conn_llcp+0x2e>
   14a98:	4622      	mov	r2, r4
			conn->slave.llcp_type = LLCP_NONE;
   14a9a:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
   14a9e:	f852 3fe9 	ldr.w	r3, [r2, #233]!
   14aa2:	6363      	str	r3, [r4, #52]	; 0x34
		memcpy(&lll->data_chan_map[0],
   14aa4:	f104 0034 	add.w	r0, r4, #52	; 0x34
   14aa8:	7913      	ldrb	r3, [r2, #4]
   14aaa:	7103      	strb	r3, [r0, #4]
			util_ones_count_get(&lll->data_chan_map[0],
   14aac:	2105      	movs	r1, #5
   14aae:	f7f8 fce1 	bl	d474 <util_ones_count_get>
		lll->data_chan_count =
   14ab2:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   14ab6:	2201      	movs	r2, #1
		lll->data_chan_count =
   14ab8:	f360 0305 	bfi	r3, r0, #0, #6
   14abc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   14ac0:	f884 21d8 	strb.w	r2, [r4, #472]	; 0x1d8
   14ac4:	e60b      	b.n	146de <ull_conn_llcp+0x2e>
			LL_ASSERT(0);
   14ac6:	4ab1      	ldr	r2, [pc, #708]	; (14d8c <ull_conn_llcp+0x6dc>)
   14ac8:	49b1      	ldr	r1, [pc, #708]	; (14d90 <ull_conn_llcp+0x6e0>)
   14aca:	48b2      	ldr	r0, [pc, #712]	; (14d94 <ull_conn_llcp+0x6e4>)
   14acc:	f240 431e 	movw	r3, #1054	; 0x41e
   14ad0:	f009 ff24 	bl	1e91c <printk>
   14ad4:	4040      	eors	r0, r0
   14ad6:	f380 8811 	msr	BASEPRI, r0
   14ada:	f04f 0003 	mov.w	r0, #3
   14ade:	df02      	svc	2
   14ae0:	e7c6      	b.n	14a70 <ull_conn_llcp+0x3c0>
	    (!conn->lll.role || (conn->slave.llcp_type == LLCP_NONE)) &&
   14ae2:	f894 20d9 	ldrb.w	r2, [r4, #217]	; 0xd9
   14ae6:	2a00      	cmp	r2, #0
   14ae8:	f47f ae82 	bne.w	147f0 <ull_conn_llcp+0x140>
   14aec:	e634      	b.n	14758 <ull_conn_llcp+0xa8>
	switch (conn->llcp_length.state) {
   14aee:	f002 0107 	and.w	r1, r2, #7
   14af2:	2906      	cmp	r1, #6
   14af4:	f201 8174 	bhi.w	15de0 <ull_conn_llcp+0x1730>
   14af8:	a001      	add	r0, pc, #4	; (adr r0, 14b00 <ull_conn_llcp+0x450>)
   14afa:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   14afe:	bf00      	nop
   14b00:	00014d9d 	.word	0x00014d9d
   14b04:	00014797 	.word	0x00014797
   14b08:	00014797 	.word	0x00014797
   14b0c:	00014797 	.word	0x00014797
   14b10:	00014d09 	.word	0x00014d09
   14b14:	00014d09 	.word	0x00014d09
   14b18:	00014797 	.word	0x00014797
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   14b1c:	489e      	ldr	r0, [pc, #632]	; (14d98 <ull_conn_llcp+0x6e8>)
   14b1e:	f7f8 fadd 	bl	d0dc <mem_acquire>
		if (tx) {
   14b22:	2800      	cmp	r0, #0
   14b24:	d0a4      	beq.n	14a70 <ull_conn_llcp+0x3c0>
			conn->llcp.chan_map.instant = event_counter +
   14b26:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			conn->llcp.chan_map.initiate = 0U;
   14b28:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14b2c:	7902      	ldrb	r2, [r0, #4]
			conn->llcp.chan_map.instant = event_counter +
   14b2e:	443b      	add	r3, r7
						      conn->lll.latency + 6;
   14b30:	3306      	adds	r3, #6
			conn->llcp.chan_map.initiate = 0U;
   14b32:	f36f 0100 	bfc	r1, #0, #1
			conn->llcp.chan_map.instant = event_counter +
   14b36:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
			conn->llcp.chan_map.initiate = 0U;
   14b3a:	f884 10e8 	strb.w	r1, [r4, #232]	; 0xe8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14b3e:	f042 0203 	orr.w	r2, r2, #3
   14b42:	4623      	mov	r3, r4
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   14b44:	2708      	movs	r7, #8
			pdu_ctrl_tx->llctrl.opcode =
   14b46:	2101      	movs	r1, #1
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   14b48:	7147      	strb	r7, [r0, #5]
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14b4a:	7102      	strb	r2, [r0, #4]
			pdu_ctrl_tx->llctrl.opcode =
   14b4c:	71c1      	strb	r1, [r0, #7]
   14b4e:	f853 2fe9 	ldr.w	r2, [r3, #233]!
   14b52:	6082      	str	r2, [r0, #8]
   14b54:	791b      	ldrb	r3, [r3, #4]
   14b56:	7303      	strb	r3, [r0, #12]
	    conn->tx_head &&
   14b58:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   14b5c:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
   14b60:	f8a0 200d 	strh.w	r2, [r0, #13]
	if (
   14b64:	2b00      	cmp	r3, #0
   14b66:	f000 8343 	beq.w	151f0 <ull_conn_llcp+0xb40>
	    !conn->llcp_enc.pause_tx &&
   14b6a:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
   14b6e:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
	    conn->tx_head &&
   14b72:	0789      	lsls	r1, r1, #30
   14b74:	f100 833e 	bmi.w	151f4 <ull_conn_llcp+0xb44>
	    !conn->llcp_phy.pause_tx &&
   14b78:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   14b7c:	07cf      	lsls	r7, r1, #31
   14b7e:	f100 8339 	bmi.w	151f4 <ull_conn_llcp+0xb44>
		if (conn->tx_head == conn->tx_data) {
   14b82:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   14b86:	428b      	cmp	r3, r1
   14b88:	f000 86ae 	beq.w	158e8 <ull_conn_llcp+0x1238>
		} else if (!conn->tx_ctrl) {
   14b8c:	2a00      	cmp	r2, #0
   14b8e:	f000 86c7 	beq.w	15920 <ull_conn_llcp+0x1270>
	tx->next = conn->tx_ctrl_last->next;
   14b92:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   14b96:	681a      	ldr	r2, [r3, #0]
   14b98:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   14b9a:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   14b9c:	6803      	ldr	r3, [r0, #0]
   14b9e:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   14ba2:	2b00      	cmp	r3, #0
   14ba4:	f47f af64 	bne.w	14a70 <ull_conn_llcp+0x3c0>
		conn->tx_data_last = tx;
   14ba8:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   14bac:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   14bb0:	e591      	b.n	146d6 <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   14bb2:	4879      	ldr	r0, [pc, #484]	; (14d98 <ull_conn_llcp+0x6e8>)
   14bb4:	f7f8 fa92 	bl	d0dc <mem_acquire>
	if (!tx) {
   14bb8:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   14bbc:	4607      	mov	r7, r0
   14bbe:	2800      	cmp	r0, #0
   14bc0:	f43f ad89 	beq.w	146d6 <ull_conn_llcp+0x26>
	if (!lll->role) {
   14bc4:	f1bc 0f00 	cmp.w	ip, #0
	pdu_ctrl_tx = (void *)tx->pdu;
   14bc8:	f100 0a04 	add.w	sl, r0, #4
	if (!lll->role) {
   14bcc:	f280 8392 	bge.w	152f4 <ull_conn_llcp+0xc44>
	else if (!lll->enc_rx) {
   14bd0:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   14bd4:	f013 0208 	ands.w	r2, r3, #8
   14bd8:	f040 8511 	bne.w	155fe <ull_conn_llcp+0xf4e>
		if (conn->llcp.encryption.error_code) {
   14bdc:	f894 80f5 	ldrb.w	r8, [r4, #245]	; 0xf5
   14be0:	f1b8 0f00 	cmp.w	r8, #0
   14be4:	f000 85ad 	beq.w	15742 <ull_conn_llcp+0x1092>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   14be8:	7903      	ldrb	r3, [r0, #4]
	if (conn->common.fex_valid &&
   14bea:	f894 10d8 	ldrb.w	r1, [r4, #216]	; 0xd8
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   14bee:	f043 0303 	orr.w	r3, r3, #3
   14bf2:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
   14bf4:	07cb      	lsls	r3, r1, #31
   14bf6:	f140 8533 	bpl.w	15660 <ull_conn_llcp+0xfb0>
	    (conn->llcp_feature.features_conn &
   14bfa:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   14bfe:	4611      	mov	r1, r2
   14c00:	f003 0004 	and.w	r0, r3, #4
	if (conn->common.fex_valid &&
   14c04:	ea50 0301 	orrs.w	r3, r0, r1
   14c08:	f000 852a 	beq.w	15660 <ull_conn_llcp+0xfb0>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   14c0c:	2211      	movs	r2, #17
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   14c0e:	2303      	movs	r3, #3
		p->error_code = conn->llcp.encryption.error_code;
   14c10:	f887 8009 	strb.w	r8, [r7, #9]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   14c14:	71fa      	strb	r2, [r7, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   14c16:	723b      	strb	r3, [r7, #8]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
   14c18:	f887 9005 	strb.w	r9, [r7, #5]
	    conn->tx_head &&
   14c1c:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
	conn->llcp.encryption.error_code = 0U;
   14c20:	2300      	movs	r3, #0
   14c22:	f884 30f5 	strb.w	r3, [r4, #245]	; 0xf5
	if (
   14c26:	2a00      	cmp	r2, #0
   14c28:	f000 8495 	beq.w	15556 <ull_conn_llcp+0xea6>
	    !conn->llcp_enc.pause_tx &&
   14c2c:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
	    conn->tx_head &&
   14c30:	0798      	lsls	r0, r3, #30
   14c32:	f100 8490 	bmi.w	15556 <ull_conn_llcp+0xea6>
	    !conn->llcp_phy.pause_tx &&
   14c36:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   14c3a:	07d9      	lsls	r1, r3, #31
   14c3c:	f100 848b 	bmi.w	15556 <ull_conn_llcp+0xea6>
		if (conn->tx_head == conn->tx_data) {
   14c40:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
   14c44:	429a      	cmp	r2, r3
		if (!conn->tx_ctrl) {
   14c46:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   14c4a:	f000 8765 	beq.w	15b18 <ull_conn_llcp+0x1468>
		} else if (!conn->tx_ctrl) {
   14c4e:	2b00      	cmp	r3, #0
   14c50:	f001 8043 	beq.w	15cda <ull_conn_llcp+0x162a>
	tx->next = conn->tx_ctrl_last->next;
   14c54:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   14c58:	681a      	ldr	r2, [r3, #0]
   14c5a:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
   14c5c:	601f      	str	r7, [r3, #0]
	conn->tx_ctrl_last = tx;
   14c5e:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
	if (!tx->next) {
   14c62:	683b      	ldr	r3, [r7, #0]
   14c64:	2b00      	cmp	r3, #0
   14c66:	f000 83b7 	beq.w	153d8 <ull_conn_llcp+0xd28>
	conn->llcp_ack = conn->llcp_req;
   14c6a:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   14c6e:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
   14c72:	e530      	b.n	146d6 <ull_conn_llcp+0x26>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   14c74:	4848      	ldr	r0, [pc, #288]	; (14d98 <ull_conn_llcp+0x6e8>)
   14c76:	f7f8 fa31 	bl	d0dc <mem_acquire>
		if (tx) {
   14c7a:	2800      	cmp	r0, #0
   14c7c:	f43f ad2f 	beq.w	146de <ull_conn_llcp+0x2e>
			conn->llcp.chan_map.instant = event_counter +
   14c80:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			conn->llcp.chan_map.initiate = 0U;
   14c82:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14c86:	7902      	ldrb	r2, [r0, #4]
			conn->llcp.chan_map.instant = event_counter +
   14c88:	4433      	add	r3, r6
						      conn->lll.latency + 6;
   14c8a:	3306      	adds	r3, #6
			conn->llcp.chan_map.instant = event_counter +
   14c8c:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14c90:	f042 0203 	orr.w	r2, r2, #3
   14c94:	4623      	mov	r3, r4
			conn->llcp.chan_map.initiate = 0U;
   14c96:	f36f 0100 	bfc	r1, #0, #1
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   14c9a:	2608      	movs	r6, #8
			pdu_ctrl_tx->llctrl.opcode =
   14c9c:	2501      	movs	r5, #1
			conn->llcp.chan_map.initiate = 0U;
   14c9e:	f884 10e8 	strb.w	r1, [r4, #232]	; 0xe8
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   14ca2:	7146      	strb	r6, [r0, #5]
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14ca4:	7102      	strb	r2, [r0, #4]
			pdu_ctrl_tx->llctrl.opcode =
   14ca6:	71c5      	strb	r5, [r0, #7]
   14ca8:	f853 2fe9 	ldr.w	r2, [r3, #233]!
   14cac:	6082      	str	r2, [r0, #8]
   14cae:	791b      	ldrb	r3, [r3, #4]
   14cb0:	7303      	strb	r3, [r0, #12]
	    conn->tx_head &&
   14cb2:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   14cb6:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
   14cba:	f8a0 200d 	strh.w	r2, [r0, #13]
	if (
   14cbe:	2b00      	cmp	r3, #0
   14cc0:	f000 82a1 	beq.w	15206 <ull_conn_llcp+0xb56>
	    !conn->llcp_enc.pause_tx &&
   14cc4:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
   14cc8:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
	    conn->tx_head &&
   14ccc:	0789      	lsls	r1, r1, #30
   14cce:	f100 829c 	bmi.w	1520a <ull_conn_llcp+0xb5a>
	    !conn->llcp_phy.pause_tx &&
   14cd2:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   14cd6:	07cf      	lsls	r7, r1, #31
   14cd8:	f100 8297 	bmi.w	1520a <ull_conn_llcp+0xb5a>
		if (conn->tx_head == conn->tx_data) {
   14cdc:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   14ce0:	428b      	cmp	r3, r1
   14ce2:	f000 860f 	beq.w	15904 <ull_conn_llcp+0x1254>
		} else if (!conn->tx_ctrl) {
   14ce6:	2a00      	cmp	r2, #0
   14ce8:	f000 8653 	beq.w	15992 <ull_conn_llcp+0x12e2>
	tx->next = conn->tx_ctrl_last->next;
   14cec:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   14cf0:	681a      	ldr	r2, [r3, #0]
   14cf2:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   14cf4:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   14cf6:	6803      	ldr	r3, [r0, #0]
   14cf8:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   14cfc:	2b00      	cmp	r3, #0
   14cfe:	f47f acee 	bne.w	146de <ull_conn_llcp+0x2e>
		conn->tx_data_last = tx;
   14d02:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   14d06:	e4ea      	b.n	146de <ull_conn_llcp+0x2e>
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   14d08:	f002 0207 	and.w	r2, r2, #7
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   14d0c:	f8b4 c1b0 	ldrh.w	ip, [r4, #432]	; 0x1b0
		lll->max_rx_time = conn->llcp_length.rx_time;
   14d10:	f8b4 11b4 	ldrh.w	r1, [r4, #436]	; 0x1b4
		tx_octets = conn->llcp_length.tx_octets;
   14d14:	f8b4 91b2 	ldrh.w	r9, [r4, #434]	; 0x1b2
		uint16_t tx_time = conn->llcp_length.tx_time;
   14d18:	f8b4 81b6 	ldrh.w	r8, [r4, #438]	; 0x1b6
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   14d1c:	f8a4 c05a 	strh.w	ip, [r4, #90]	; 0x5a
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   14d20:	2a04      	cmp	r2, #4
		lll->max_rx_time = conn->llcp_length.rx_time;
   14d22:	f8a4 105e 	strh.w	r1, [r4, #94]	; 0x5e
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   14d26:	f000 8403 	beq.w	15530 <ull_conn_llcp+0xe80>
			conn->llcp_length.state =
   14d2a:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
   14d2e:	2206      	movs	r2, #6
   14d30:	f362 0302 	bfi	r3, r2, #0, #3
   14d34:	f884 31ae 	strb.w	r3, [r4, #430]	; 0x1ae
		rx = conn->llcp_rx;
   14d38:	f8d4 7108 	ldr.w	r7, [r4, #264]	; 0x108
		LL_ASSERT(rx && rx->hdr.link);
   14d3c:	2f00      	cmp	r7, #0
   14d3e:	f000 83d9 	beq.w	154f4 <ull_conn_llcp+0xe44>
   14d42:	6838      	ldr	r0, [r7, #0]
   14d44:	2800      	cmp	r0, #0
   14d46:	f000 83d5 	beq.w	154f4 <ull_conn_llcp+0xe44>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   14d4a:	7f3b      	ldrb	r3, [r7, #28]
		conn->llcp_rx = rx->hdr.link->mem;
   14d4c:	6842      	ldr	r2, [r0, #4]
		rx->hdr.handle = conn->lll.handle;
   14d4e:	f8b4 e028 	ldrh.w	lr, [r4, #40]	; 0x28
		conn->llcp_rx = rx->hdr.link->mem;
   14d52:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   14d56:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   14d5a:	2203      	movs	r2, #3
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   14d5c:	773b      	strb	r3, [r7, #28]
		pdu_ctrl_rx->len =
   14d5e:	f04f 0a09 	mov.w	sl, #9
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   14d62:	2315      	movs	r3, #21
		rx->hdr.handle = conn->lll.handle;
   14d64:	f8a7 e006 	strh.w	lr, [r7, #6]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   14d68:	f8a7 c020 	strh.w	ip, [r7, #32]
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   14d6c:	8479      	strh	r1, [r7, #34]	; 0x22
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   14d6e:	713a      	strb	r2, [r7, #4]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   14d70:	77fb      	strb	r3, [r7, #31]
		ll_rx_put(rx->hdr.link, rx);
   14d72:	4639      	mov	r1, r7
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
   14d74:	f8a7 9024 	strh.w	r9, [r7, #36]	; 0x24
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   14d78:	f8a7 8026 	strh.w	r8, [r7, #38]	; 0x26
		pdu_ctrl_rx->len =
   14d7c:	f887 a01d 	strb.w	sl, [r7, #29]
		ll_rx_put(rx->hdr.link, rx);
   14d80:	f7fc f8c2 	bl	10f08 <ll_rx_put>
		ll_rx_sched();
   14d84:	f7fc f8ca 	bl	10f1c <ll_rx_sched>
	break;
   14d88:	e505      	b.n	14796 <ull_conn_llcp+0xe6>
   14d8a:	bf00      	nop
   14d8c:	00024e44 	.word	0x00024e44
   14d90:	00024974 	.word	0x00024974
   14d94:	00024904 	.word	0x00024904
   14d98:	20002330 	.word	0x20002330
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   14d9c:	48cc      	ldr	r0, [pc, #816]	; (150d0 <ull_conn_llcp+0xa20>)
   14d9e:	f7f8 f99d 	bl	d0dc <mem_acquire>
		if (!tx) {
   14da2:	2800      	cmp	r0, #0
   14da4:	f43f acf7 	beq.w	14796 <ull_conn_llcp+0xe6>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   14da8:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   14dac:	f8b4 11b2 	ldrh.w	r1, [r4, #434]	; 0x1b2
		conn->default_tx_time = conn->llcp_length.tx_time;
   14db0:	f8b4 71b6 	ldrh.w	r7, [r4, #438]	; 0x1b6
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   14db4:	f8a4 10d2 	strh.w	r1, [r4, #210]	; 0xd2
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   14db8:	2201      	movs	r2, #1
		conn->default_tx_time = conn->llcp_length.tx_time;
   14dba:	f8a4 70d4 	strh.w	r7, [r4, #212]	; 0xd4
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   14dbe:	f362 0302 	bfi	r3, r2, #0, #3
   14dc2:	f884 31ae 	strb.w	r3, [r4, #430]	; 0x1ae
		pdu_ctrl_tx->len =
   14dc6:	2709      	movs	r7, #9
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14dc8:	7903      	ldrb	r3, [r0, #4]
		pdu_ctrl_tx->len =
   14dca:	7147      	strb	r7, [r0, #5]
	    conn->tx_head &&
   14dcc:	f8d4 c1c4 	ldr.w	ip, [r4, #452]	; 0x1c4
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
   14dd0:	8181      	strh	r1, [r0, #12]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14dd2:	f043 0303 	orr.w	r3, r3, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   14dd6:	2114      	movs	r1, #20
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   14dd8:	72c2      	strb	r2, [r0, #11]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   14dda:	73c2      	strb	r2, [r0, #15]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   14ddc:	2700      	movs	r7, #0
   14dde:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14de2:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   14de4:	71c1      	strb	r1, [r0, #7]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   14de6:	2348      	movs	r3, #72	; 0x48
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   14de8:	211b      	movs	r1, #27
   14dea:	7247      	strb	r7, [r0, #9]
   14dec:	7201      	strb	r1, [r0, #8]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   14dee:	7283      	strb	r3, [r0, #10]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   14df0:	7383      	strb	r3, [r0, #14]
	if (
   14df2:	f1bc 0f00 	cmp.w	ip, #0
   14df6:	f000 8273 	beq.w	152e0 <ull_conn_llcp+0xc30>
	    !conn->llcp_enc.pause_tx &&
   14dfa:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
	    conn->tx_head &&
   14dfe:	079b      	lsls	r3, r3, #30
   14e00:	f100 826e 	bmi.w	152e0 <ull_conn_llcp+0xc30>
	    !conn->llcp_phy.pause_tx &&
   14e04:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   14e08:	07df      	lsls	r7, r3, #31
   14e0a:	f100 8269 	bmi.w	152e0 <ull_conn_llcp+0xc30>
		if (conn->tx_head == conn->tx_data) {
   14e0e:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
   14e12:	459c      	cmp	ip, r3
   14e14:	f000 85ab 	beq.w	1596e <ull_conn_llcp+0x12be>
		} else if (!conn->tx_ctrl) {
   14e18:	2a00      	cmp	r2, #0
   14e1a:	f000 85cb 	beq.w	159b4 <ull_conn_llcp+0x1304>
	tx->next = conn->tx_ctrl_last->next;
   14e1e:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   14e22:	681a      	ldr	r2, [r3, #0]
   14e24:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   14e26:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   14e28:	f8d0 c000 	ldr.w	ip, [r0]
   14e2c:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   14e30:	f1bc 0f00 	cmp.w	ip, #0
   14e34:	f000 8470 	beq.w	15718 <ull_conn_llcp+0x1068>
		conn->procedure_expire = conn->procedure_reload;
   14e38:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   14e3c:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	break;
   14e40:	e4a9      	b.n	14796 <ull_conn_llcp+0xe6>
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
   14e42:	f894 7121 	ldrb.w	r7, [r4, #289]	; 0x121
   14e46:	f894 9120 	ldrb.w	r9, [r4, #288]	; 0x120
   14e4a:	454f      	cmp	r7, r9
   14e4c:	d056      	beq.n	14efc <ull_conn_llcp+0x84c>
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
   14e4e:	eba7 0709 	sub.w	r7, r7, r9
   14e52:	07f8      	lsls	r0, r7, #31
   14e54:	f57f ac3f 	bpl.w	146d6 <ull_conn_llcp+0x26>
	if (conn->common.fex_valid) {
   14e58:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   14e5c:	f013 0701 	ands.w	r7, r3, #1
   14e60:	f000 81e8 	beq.w	15234 <ull_conn_llcp+0xb84>
		rx = ll_pdu_rx_alloc();
   14e64:	f7fc f87e 	bl	10f64 <ll_pdu_rx_alloc>
		if (!rx) {
   14e68:	4601      	mov	r1, r0
   14e6a:	2800      	cmp	r0, #0
   14e6c:	f000 80cc 	beq.w	15008 <ull_conn_llcp+0x958>
		conn->llcp_feature.ack = conn->llcp_feature.req;
   14e70:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
   14e74:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   14e78:	2709      	movs	r7, #9
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   14e7a:	2303      	movs	r3, #3
		rx->hdr.handle = conn->lll.handle;
   14e7c:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   14e80:	7747      	strb	r7, [r0, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   14e82:	7103      	strb	r3, [r0, #4]
__ssp_bos_icheck3(memset, void *, int)
   14e84:	f8c0 8020 	str.w	r8, [r0, #32]
   14e88:	f8c0 8024 	str.w	r8, [r0, #36]	; 0x24
		sys_put_le64(conn->llcp_feature.features_peer,
   14e8c:	e9d4 024c 	ldrd	r0, r2, [r4, #304]	; 0x130
		rx->hdr.handle = conn->lll.handle;
   14e90:	f8a1 c006 	strh.w	ip, [r1, #6]
	sys_put_le16(val >> 16, &dst[2]);
   14e94:	ea4f 4c10 	mov.w	ip, r0, lsr #16
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   14e98:	7f0b      	ldrb	r3, [r1, #28]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   14e9a:	77cf      	strb	r7, [r1, #31]
	dst[1] = val >> 8;
   14e9c:	ea4f 271c 	mov.w	r7, ip, lsr #8
   14ea0:	f881 7023 	strb.w	r7, [r1, #35]	; 0x23
	sys_put_le16(val >> 16, &dst[2]);
   14ea4:	0c17      	lsrs	r7, r2, #16
	dst[1] = val >> 8;
   14ea6:	f3c0 2e07 	ubfx	lr, r0, #8, #8
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   14eaa:	f043 0303 	orr.w	r3, r3, #3
	dst[0] = val;
   14eae:	f881 c022 	strb.w	ip, [r1, #34]	; 0x22
   14eb2:	f881 0020 	strb.w	r0, [r1, #32]
	dst[1] = val >> 8;
   14eb6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
   14eba:	f3c2 2007 	ubfx	r0, r2, #8, #8
   14ebe:	f881 e021 	strb.w	lr, [r1, #33]	; 0x21
	dst[0] = val;
   14ec2:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
   14ec6:	f881 7026 	strb.w	r7, [r1, #38]	; 0x26
	dst[1] = val >> 8;
   14eca:	f881 c027 	strb.w	ip, [r1, #39]	; 0x27
   14ece:	f881 0025 	strb.w	r0, [r1, #37]	; 0x25
   14ed2:	770b      	strb	r3, [r1, #28]
	ll_rx_put(rx->hdr.link, rx);
   14ed4:	6808      	ldr	r0, [r1, #0]
   14ed6:	f7fc f817 	bl	10f08 <ll_rx_put>
	ll_rx_sched();
   14eda:	f7fc f81f 	bl	10f1c <ll_rx_sched>
   14ede:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   14ee2:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
   14ee6:	f7ff bbee 	b.w	146c6 <ull_conn_llcp+0x16>
		if (!conn->tx_ctrl) {
   14eea:	2f00      	cmp	r7, #0
   14eec:	f47f ace8 	bne.w	148c0 <ull_conn_llcp+0x210>
			tx->next = conn->tx_head;
   14ef0:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   14ef2:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   14ef6:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   14efa:	e4e9      	b.n	148d0 <ull_conn_llcp+0x220>
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
   14efc:	f894 7139 	ldrb.w	r7, [r4, #313]	; 0x139
   14f00:	f894 8138 	ldrb.w	r8, [r4, #312]	; 0x138
   14f04:	4547      	cmp	r7, r8
   14f06:	f000 8093 	beq.w	15030 <ull_conn_llcp+0x980>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
   14f0a:	eba7 0708 	sub.w	r7, r7, r8
   14f0e:	07f8      	lsls	r0, r7, #31
   14f10:	f57f abe1 	bpl.w	146d6 <ull_conn_llcp+0x26>
	if (conn->llcp_version.tx == 0U) {
   14f14:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   14f18:	07d9      	lsls	r1, r3, #31
   14f1a:	f140 83a9 	bpl.w	15670 <ull_conn_llcp+0xfc0>
	} else if (conn->llcp_version.rx) {
   14f1e:	0798      	lsls	r0, r3, #30
   14f20:	f140 83ec 	bpl.w	156fc <ull_conn_llcp+0x104c>
		rx = ll_pdu_rx_alloc();
   14f24:	f7fc f81e 	bl	10f64 <ll_pdu_rx_alloc>
		if (!rx) {
   14f28:	4601      	mov	r1, r0
   14f2a:	2800      	cmp	r0, #0
   14f2c:	d06c      	beq.n	15008 <ull_conn_llcp+0x958>
		conn->llcp_version.ack = conn->llcp_version.req;
   14f2e:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
   14f32:	f884 3139 	strb.w	r3, [r4, #313]	; 0x139
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   14f36:	7f03      	ldrb	r3, [r0, #28]
		rx->hdr.handle = conn->lll.handle;
   14f38:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   14f3a:	80c2      	strh	r2, [r0, #6]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   14f3c:	f043 0303 	orr.w	r3, r3, #3
   14f40:	770b      	strb	r3, [r1, #28]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   14f42:	2003      	movs	r0, #3
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
   14f44:	2206      	movs	r2, #6
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   14f46:	230c      	movs	r3, #12
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   14f48:	7108      	strb	r0, [r1, #4]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
   14f4a:	774a      	strb	r2, [r1, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   14f4c:	77cb      	strb	r3, [r1, #31]
		pdu->llctrl.version_ind.version_number =
   14f4e:	f894 013b 	ldrb.w	r0, [r4, #315]	; 0x13b
		pdu->llctrl.version_ind.company_id =
   14f52:	f8b4 213c 	ldrh.w	r2, [r4, #316]	; 0x13c
		pdu->llctrl.version_ind.sub_version_number =
   14f56:	f8b4 313e 	ldrh.w	r3, [r4, #318]	; 0x13e
   14f5a:	f8a1 3023 	strh.w	r3, [r1, #35]	; 0x23
		pdu->llctrl.version_ind.version_number =
   14f5e:	f881 0020 	strb.w	r0, [r1, #32]
		pdu->llctrl.version_ind.company_id =
   14f62:	f8a1 2021 	strh.w	r2, [r1, #33]	; 0x21
		ll_rx_put(rx->hdr.link, rx);
   14f66:	e7b5      	b.n	14ed4 <ull_conn_llcp+0x824>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   14f68:	4859      	ldr	r0, [pc, #356]	; (150d0 <ull_conn_llcp+0xa20>)
   14f6a:	f7f8 f8b7 	bl	d0dc <mem_acquire>
		if (!tx) {
   14f6e:	2800      	cmp	r0, #0
   14f70:	d04a      	beq.n	15008 <ull_conn_llcp+0x958>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   14f72:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   14f76:	f8b4 71b2 	ldrh.w	r7, [r4, #434]	; 0x1b2
		conn->default_tx_time = conn->llcp_length.tx_time;
   14f7a:	f8b4 11b6 	ldrh.w	r1, [r4, #438]	; 0x1b6
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   14f7e:	f8a4 70d2 	strh.w	r7, [r4, #210]	; 0xd2
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   14f82:	2201      	movs	r2, #1
		conn->default_tx_time = conn->llcp_length.tx_time;
   14f84:	f8a4 10d4 	strh.w	r1, [r4, #212]	; 0xd4
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   14f88:	f362 0302 	bfi	r3, r2, #0, #3
   14f8c:	f884 31ae 	strb.w	r3, [r4, #430]	; 0x1ae
		pdu_ctrl_tx->len =
   14f90:	2109      	movs	r1, #9
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14f92:	7903      	ldrb	r3, [r0, #4]
		pdu_ctrl_tx->len =
   14f94:	7141      	strb	r1, [r0, #5]
	    conn->tx_head &&
   14f96:	f8d4 11c4 	ldr.w	r1, [r4, #452]	; 0x1c4
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
   14f9a:	8187      	strh	r7, [r0, #12]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14f9c:	f043 0303 	orr.w	r3, r3, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   14fa0:	f04f 0c14 	mov.w	ip, #20
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   14fa4:	72c2      	strb	r2, [r0, #11]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   14fa6:	73c2      	strb	r2, [r0, #15]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   14fa8:	2700      	movs	r7, #0
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14faa:	7103      	strb	r3, [r0, #4]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   14fac:	221b      	movs	r2, #27
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   14fae:	2348      	movs	r3, #72	; 0x48
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   14fb0:	f880 c007 	strb.w	ip, [r0, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   14fb4:	7247      	strb	r7, [r0, #9]
   14fb6:	7202      	strb	r2, [r0, #8]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   14fb8:	7283      	strb	r3, [r0, #10]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   14fba:	7383      	strb	r3, [r0, #14]
	if (
   14fbc:	2900      	cmp	r1, #0
   14fbe:	f000 84ca 	beq.w	15956 <ull_conn_llcp+0x12a6>
	    !conn->llcp_enc.pause_tx &&
   14fc2:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
	    conn->tx_head &&
   14fc6:	079a      	lsls	r2, r3, #30
   14fc8:	f100 84c5 	bmi.w	15956 <ull_conn_llcp+0x12a6>
	    !conn->llcp_phy.pause_tx &&
   14fcc:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   14fd0:	07db      	lsls	r3, r3, #31
   14fd2:	f100 84c0 	bmi.w	15956 <ull_conn_llcp+0x12a6>
		if (conn->tx_head == conn->tx_data) {
   14fd6:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
   14fda:	4299      	cmp	r1, r3
		if (!conn->tx_ctrl) {
   14fdc:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   14fe0:	f000 86c3 	beq.w	15d6a <ull_conn_llcp+0x16ba>
		} else if (!conn->tx_ctrl) {
   14fe4:	2b00      	cmp	r3, #0
   14fe6:	f000 86a9 	beq.w	15d3c <ull_conn_llcp+0x168c>
	tx->next = conn->tx_ctrl_last->next;
   14fea:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   14fee:	681a      	ldr	r2, [r3, #0]
   14ff0:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   14ff2:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   14ff4:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   14ff8:	6803      	ldr	r3, [r0, #0]
   14ffa:	2b00      	cmp	r3, #0
   14ffc:	f000 839e 	beq.w	1573c <ull_conn_llcp+0x108c>
		conn->procedure_expire = conn->procedure_reload;
   15000:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   15004:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	break;
   15008:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   1500c:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
   15010:	f7ff bb59 	b.w	146c6 <ull_conn_llcp+0x16>
			conn->tx_data = conn->tx_data->next;
   15014:	6819      	ldr	r1, [r3, #0]
   15016:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1501a:	2a00      	cmp	r2, #0
   1501c:	f47f abcc 	bne.w	147b8 <ull_conn_llcp+0x108>
			tx->next = conn->tx_head->next;
   15020:	681a      	ldr	r2, [r3, #0]
   15022:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   15024:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   15026:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   15028:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   1502c:	f7ff bbcc 	b.w	147c8 <ull_conn_llcp+0x118>
		} else if (conn->llcp_conn_param.ack !=
   15030:	f894 8185 	ldrb.w	r8, [r4, #389]	; 0x185
   15034:	f894 7184 	ldrb.w	r7, [r4, #388]	; 0x184
   15038:	45b8      	cmp	r8, r7
   1503a:	f000 81d0 	beq.w	153de <ull_conn_llcp+0xd2e>
	conn_upd = conn_upd_curr;
   1503e:	4f25      	ldr	r7, [pc, #148]	; (150d4 <ull_conn_llcp+0xa24>)
   15040:	f8d7 8000 	ldr.w	r8, [r7]
	if (conn_upd && (conn_upd != conn)) {
   15044:	f1b8 0f00 	cmp.w	r8, #0
   15048:	f000 8408 	beq.w	1585c <ull_conn_llcp+0x11ac>
   1504c:	4544      	cmp	r4, r8
   1504e:	f47f ab42 	bne.w	146d6 <ull_conn_llcp+0x26>
	switch (conn->llcp_conn_param.state) {
   15052:	f894 8186 	ldrb.w	r8, [r4, #390]	; 0x186
   15056:	f008 0807 	and.w	r8, r8, #7
   1505a:	f1b8 0f05 	cmp.w	r8, #5
   1505e:	f200 86ac 	bhi.w	15dba <ull_conn_llcp+0x170a>
   15062:	f20f 0908 	addw	r9, pc, #8
   15066:	f859 f028 	ldr.w	pc, [r9, r8, lsl #2]
   1506a:	bf00      	nop
   1506c:	00015159 	.word	0x00015159
   15070:	000150d9 	.word	0x000150d9
   15074:	00015085 	.word	0x00015085
   15078:	000146c7 	.word	0x000146c7
   1507c:	000146c7 	.word	0x000146c7
   15080:	000146c7 	.word	0x000146c7
	if (conn->llcp_enc.pause_tx) {
   15084:	0791      	lsls	r1, r2, #30
   15086:	f53f ab26 	bmi.w	146d6 <ull_conn_llcp+0x26>
	rx = ll_pdu_rx_alloc();
   1508a:	f7fb ff6b 	bl	10f64 <ll_pdu_rx_alloc>
	if (!rx) {
   1508e:	4601      	mov	r1, r0
   15090:	2800      	cmp	r0, #0
   15092:	d0b9      	beq.n	15008 <ull_conn_llcp+0x958>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   15094:	f894 0186 	ldrb.w	r0, [r4, #390]	; 0x186
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   15098:	7f0b      	ldrb	r3, [r1, #28]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   1509a:	2203      	movs	r2, #3
   1509c:	f362 0002 	bfi	r0, r2, #0, #3
   150a0:	f884 0186 	strb.w	r0, [r4, #390]	; 0x186
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   150a4:	4313      	orrs	r3, r2
	rx->hdr.handle = conn->lll.handle;
   150a6:	8d20      	ldrh	r0, [r4, #40]	; 0x28
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   150a8:	710a      	strb	r2, [r1, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   150aa:	2218      	movs	r2, #24
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   150ac:	770b      	strb	r3, [r1, #28]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   150ae:	774a      	strb	r2, [r1, #29]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   150b0:	f8b4 2188 	ldrh.w	r2, [r4, #392]	; 0x188
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   150b4:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
	rx->hdr.handle = conn->lll.handle;
   150b8:	80c8      	strh	r0, [r1, #6]
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   150ba:	f8b4 018c 	ldrh.w	r0, [r4, #396]	; 0x18c
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   150be:	840a      	strh	r2, [r1, #32]
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   150c0:	f8b4 218e 	ldrh.w	r2, [r4, #398]	; 0x18e
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   150c4:	844b      	strh	r3, [r1, #34]	; 0x22
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   150c6:	230f      	movs	r3, #15
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   150c8:	8488      	strh	r0, [r1, #36]	; 0x24
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   150ca:	84ca      	strh	r2, [r1, #38]	; 0x26
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   150cc:	77cb      	strb	r3, [r1, #31]
   150ce:	e701      	b.n	14ed4 <ull_conn_llcp+0x824>
   150d0:	20002330 	.word	0x20002330
   150d4:	200022ac 	.word	0x200022ac
	if (conn->llcp_conn_param.status) {
   150d8:	f894 8187 	ldrb.w	r8, [r4, #391]	; 0x187
   150dc:	f1b8 0f00 	cmp.w	r8, #0
   150e0:	f040 8527 	bne.w	15b32 <ull_conn_llcp+0x1482>
	if (!conn->lll.role) {
   150e4:	2900      	cmp	r1, #0
   150e6:	f2c0 8548 	blt.w	15b7a <ull_conn_llcp+0x14ca>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   150ea:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
		if (conn->llcp_conn_param.preferred_periodicity) {
   150ee:	f894 2190 	ldrb.w	r2, [r4, #400]	; 0x190
		conn->llcp_cu.win_offset_us = 0U;
   150f2:	f8c4 8118 	str.w	r8, [r4, #280]	; 0x118
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   150f6:	2105      	movs	r1, #5
   150f8:	f361 0302 	bfi	r3, r1, #0, #3
		conn->llcp_cu.win_size = 1U;
   150fc:	2101      	movs	r1, #1
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   150fe:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
		conn->llcp_cu.win_size = 1U;
   15102:	f884 111c 	strb.w	r1, [r4, #284]	; 0x11c
		if (conn->llcp_conn_param.preferred_periodicity) {
   15106:	2a00      	cmp	r2, #0
   15108:	f000 85bf 	beq.w	15c8a <ull_conn_llcp+0x15da>
				((conn->llcp_conn_param.interval_min /
   1510c:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
   15110:	fbb3 f3f2 	udiv	r3, r3, r2
				  conn->llcp_conn_param.preferred_periodicity) +
   15114:	440b      	add	r3, r1
			conn->llcp_cu.interval =
   15116:	fb13 f302 	smulbb	r3, r3, r2
   1511a:	b29b      	uxth	r3, r3
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   1511c:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   15120:	f894 110e 	ldrb.w	r1, [r4, #270]	; 0x10e
   15124:	f8a4 3110 	strh.w	r3, [r4, #272]	; 0x110
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   15128:	f3c2 03c0 	ubfx	r3, r2, #3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   1512c:	00db      	lsls	r3, r3, #3
   1512e:	f021 020f 	bic.w	r2, r1, #15
   15132:	f043 0302 	orr.w	r3, r3, #2
   15136:	4313      	orrs	r3, r2
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   15138:	f8b4 118c 	ldrh.w	r1, [r4, #396]	; 0x18c
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   1513c:	f8b4 218e 	ldrh.w	r2, [r4, #398]	; 0x18e
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   15140:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
		conn->llcp_cu.ack--;
   15144:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
   15148:	f884 e10d 	strb.w	lr, [r4, #269]	; 0x10d
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   1514c:	f8a4 1112 	strh.w	r1, [r4, #274]	; 0x112
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   15150:	f8a4 2114 	strh.w	r2, [r4, #276]	; 0x114
	if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   15154:	f7ff bac3 	b.w	146de <ull_conn_llcp+0x2e>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   15158:	48e4      	ldr	r0, [pc, #912]	; (154ec <ull_conn_llcp+0xe3c>)
			event_counter = lll->event_counter +
   1515a:	f8b4 8032 	ldrh.w	r8, [r4, #50]	; 0x32
					lll->latency_prepare + lazy;
   1515e:	f8b4 902e 	ldrh.w	r9, [r4, #46]	; 0x2e
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   15162:	f7f7 ffbb 	bl	d0dc <mem_acquire>
	if (!tx) {
   15166:	4601      	mov	r1, r0
   15168:	2800      	cmp	r0, #0
   1516a:	f43f af4d 	beq.w	15008 <ull_conn_llcp+0x958>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1516e:	7903      	ldrb	r3, [r0, #4]
	conn_upd_curr = conn;
   15170:	603c      	str	r4, [r7, #0]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15172:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   15176:	2218      	movs	r2, #24
   15178:	7142      	strb	r2, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1517a:	7103      	strb	r3, [r0, #4]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   1517c:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   15180:	f8b4 718a 	ldrh.w	r7, [r4, #394]	; 0x18a
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   15184:	f8b4 c18c 	ldrh.w	ip, [r4, #396]	; 0x18c
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   15188:	810b      	strh	r3, [r1, #8]
	p->preferred_periodicity = 0U;
   1518a:	2200      	movs	r2, #0
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   1518c:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
	p->preferred_periodicity = 0U;
   15190:	740a      	strb	r2, [r1, #16]
			event_counter = lll->event_counter +
   15192:	eb08 0009 	add.w	r0, r8, r9
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   15196:	814f      	strh	r7, [r1, #10]
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
   15198:	4430      	add	r0, r6
	conn->procedure_expire = conn->procedure_reload;
   1519a:	f8b4 70c6 	ldrh.w	r7, [r4, #198]	; 0xc6
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   1519e:	f8a1 c00c 	strh.w	ip, [r1, #12]
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   151a2:	81cb      	strh	r3, [r1, #14]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   151a4:	f04f 0c0f 	mov.w	ip, #15
	p->offset1 = sys_cpu_to_le16(0xffff);
   151a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	p->offset0 = sys_cpu_to_le16(0x0000);
   151ac:	74ca      	strb	r2, [r1, #19]
   151ae:	750a      	strb	r2, [r1, #20]
	p->offset1 = sys_cpu_to_le16(0xffff);
   151b0:	754b      	strb	r3, [r1, #21]
   151b2:	758b      	strb	r3, [r1, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
   151b4:	75cb      	strb	r3, [r1, #23]
   151b6:	760b      	strb	r3, [r1, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
   151b8:	764b      	strb	r3, [r1, #25]
   151ba:	768b      	strb	r3, [r1, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
   151bc:	76cb      	strb	r3, [r1, #27]
   151be:	770b      	strb	r3, [r1, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
   151c0:	774b      	strb	r3, [r1, #29]
   151c2:	778b      	strb	r3, [r1, #30]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   151c4:	f881 c007 	strb.w	ip, [r1, #7]
	conn->procedure_expire = conn->procedure_reload;
   151c8:	f8a4 70c8 	strh.w	r7, [r4, #200]	; 0xc8
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
   151cc:	f8a1 0011 	strh.w	r0, [r1, #17]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   151d0:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   151d4:	2004      	movs	r0, #4
   151d6:	f360 0302 	bfi	r3, r0, #0, #3
   151da:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
	ctrl_tx_pause_enqueue(conn, tx, false);
   151de:	4620      	mov	r0, r4
   151e0:	f7fc fe42 	bl	11e68 <ctrl_tx_pause_enqueue>
   151e4:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   151e8:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
}
   151ec:	f7ff ba6b 	b.w	146c6 <ull_conn_llcp+0x16>
   151f0:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   151f4:	2a00      	cmp	r2, #0
   151f6:	f47f accc 	bne.w	14b92 <ull_conn_llcp+0x4e2>
			tx->next = conn->tx_head;
   151fa:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   151fc:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   15200:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   15204:	e4cd      	b.n	14ba2 <ull_conn_llcp+0x4f2>
   15206:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   1520a:	2a00      	cmp	r2, #0
   1520c:	f47f ad6e 	bne.w	14cec <ull_conn_llcp+0x63c>
			tx->next = conn->tx_head;
   15210:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   15212:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   15216:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   1521a:	e56f      	b.n	14cfc <ull_conn_llcp+0x64c>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   1521c:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
   15220:	2b00      	cmp	r3, #0
   15222:	f43f ac02 	beq.w	14a2a <ull_conn_llcp+0x37a>
			conn->slave.llcp_type = LLCP_NONE;
   15226:	f884 20d9 	strb.w	r2, [r4, #217]	; 0xd9
   1522a:	e402      	b.n	14a32 <ull_conn_llcp+0x382>
		conn->tx_data_last = tx;
   1522c:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   15230:	f7ff bb51 	b.w	148d6 <ull_conn_llcp+0x226>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   15234:	48ad      	ldr	r0, [pc, #692]	; (154ec <ull_conn_llcp+0xe3c>)
   15236:	f7f7 ff51 	bl	d0dc <mem_acquire>
	if (tx) {
   1523a:	2800      	cmp	r0, #0
   1523c:	f43f aee4 	beq.w	15008 <ull_conn_llcp+0x958>
		conn->llcp_feature.ack--;
   15240:	f894 2121 	ldrb.w	r2, [r4, #289]	; 0x121
		conn->llcp_feature.features_conn = LL_FEAT;
   15244:	f8df 82a8 	ldr.w	r8, [pc, #680]	; 154f0 <ull_conn_llcp+0xe40>
   15248:	f04f 0900 	mov.w	r9, #0
   1524c:	e9c4 894a 	strd	r8, r9, [r4, #296]	; 0x128
		conn->llcp_feature.ack--;
   15250:	3a01      	subs	r2, #1
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
   15252:	2309      	movs	r3, #9
		conn->llcp_feature.ack--;
   15254:	f884 2121 	strb.w	r2, [r4, #289]	; 0x121
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
   15258:	7143      	strb	r3, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
   1525a:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   1525e:	6087      	str	r7, [r0, #8]
   15260:	60c7      	str	r7, [r0, #12]
		sys_put_le64(conn->llcp_feature.features_conn,
   15262:	e9d4 134a 	ldrd	r1, r3, [r4, #296]	; 0x128
	sys_put_le16(val >> 16, &dst[2]);
   15266:	0c0a      	lsrs	r2, r1, #16
   15268:	0c1f      	lsrs	r7, r3, #16
	dst[0] = val;
   1526a:	7282      	strb	r2, [r0, #10]
	dst[1] = val >> 8;
   1526c:	0a12      	lsrs	r2, r2, #8
   1526e:	f3c1 2e07 	ubfx	lr, r1, #8, #8
	dst[0] = val;
   15272:	7303      	strb	r3, [r0, #12]
	dst[1] = val >> 8;
   15274:	72c2      	strb	r2, [r0, #11]
   15276:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1527a:	0a3a      	lsrs	r2, r7, #8
	dst[0] = val;
   1527c:	7201      	strb	r1, [r0, #8]
	dst[1] = val >> 8;
   1527e:	73c2      	strb	r2, [r0, #15]
   15280:	f880 e009 	strb.w	lr, [r0, #9]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   15284:	7902      	ldrb	r2, [r0, #4]
	dst[0] = val;
   15286:	7387      	strb	r7, [r0, #14]
	dst[1] = val >> 8;
   15288:	7343      	strb	r3, [r0, #13]
	    conn->tx_head &&
   1528a:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
		pdu->llctrl.opcode = !conn->lll.role ?
   1528e:	f1bc 0f00 	cmp.w	ip, #0
   15292:	bfac      	ite	ge
   15294:	2108      	movge	r1, #8
   15296:	210e      	movlt	r1, #14
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   15298:	f042 0203 	orr.w	r2, r2, #3
		pdu->llctrl.opcode = !conn->lll.role ?
   1529c:	71c1      	strb	r1, [r0, #7]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   1529e:	7102      	strb	r2, [r0, #4]
	if (
   152a0:	2b00      	cmp	r3, #0
   152a2:	f000 813a 	beq.w	1551a <ull_conn_llcp+0xe6a>
	    !conn->llcp_enc.pause_tx &&
   152a6:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
   152aa:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
	    conn->tx_head &&
   152ae:	0789      	lsls	r1, r1, #30
   152b0:	f100 8135 	bmi.w	1551e <ull_conn_llcp+0xe6e>
	    !conn->llcp_phy.pause_tx &&
   152b4:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   152b8:	07cf      	lsls	r7, r1, #31
   152ba:	f100 8130 	bmi.w	1551e <ull_conn_llcp+0xe6e>
		if (conn->tx_head == conn->tx_data) {
   152be:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   152c2:	428b      	cmp	r3, r1
   152c4:	f000 8391 	beq.w	159ea <ull_conn_llcp+0x133a>
		} else if (!conn->tx_ctrl) {
   152c8:	2a00      	cmp	r2, #0
   152ca:	f000 83c5 	beq.w	15a58 <ull_conn_llcp+0x13a8>
	tx->next = conn->tx_ctrl_last->next;
   152ce:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   152d2:	681a      	ldr	r2, [r3, #0]
   152d4:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   152d6:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   152d8:	6803      	ldr	r3, [r0, #0]
   152da:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
}
   152de:	e68c      	b.n	14ffa <ull_conn_llcp+0x94a>
		if (!conn->tx_ctrl) {
   152e0:	2a00      	cmp	r2, #0
   152e2:	f47f ad9c 	bne.w	14e1e <ull_conn_llcp+0x76e>
			tx->next = conn->tx_head;
   152e6:	f8c0 c000 	str.w	ip, [r0]
				conn->tx_ctrl = tx;
   152ea:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   152ee:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   152f2:	e59d      	b.n	14e30 <ull_conn_llcp+0x780>
		ecb_encrypt(&conn->llcp_enc.ltk[0],
   152f4:	f104 097b 	add.w	r9, r4, #123	; 0x7b
   152f8:	464b      	mov	r3, r9
   152fa:	4642      	mov	r2, r8
   152fc:	f104 01f6 	add.w	r1, r4, #246	; 0xf6
   15300:	f204 1071 	addw	r0, r4, #369	; 0x171
   15304:	f004 fa7c 	bl	19800 <ecb_encrypt>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   15308:	f8d4 2087 	ldr.w	r2, [r4, #135]	; 0x87
   1530c:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8
   15310:	f8d4 007b 	ldr.w	r0, [r4, #123]	; 0x7b
   15314:	f8d4 107f 	ldr.w	r1, [r4, #127]	; 0x7f
   15318:	f8d4 3083 	ldr.w	r3, [r4, #131]	; 0x83
   1531c:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
   15320:	4622      	mov	r2, r4
   15322:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
   15326:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
   1532a:	f852 1f94 	ldr.w	r1, [r2, #148]!
		lll->ccm_rx.direction = 0;
   1532e:	f894 0093 	ldrb.w	r0, [r4, #147]	; 0x93
   15332:	6852      	ldr	r2, [r2, #4]
		lll->enc_rx = 1;
   15334:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   15338:	f8c4 20b9 	str.w	r2, [r4, #185]	; 0xb9
		lll->ccm_tx.direction = 1;
   1533c:	f894 20b4 	ldrb.w	r2, [r4, #180]	; 0xb4
   15340:	f8c4 10b5 	str.w	r1, [r4, #181]	; 0xb5
		lll->enc_rx = 1;
   15344:	f043 0308 	orr.w	r3, r3, #8
		lll->ccm_rx.direction = 0;
   15348:	f368 0000 	bfi	r0, r8, #0, #1
		lll->ccm_tx.direction = 1;
   1534c:	f042 0201 	orr.w	r2, r2, #1
		lll->ccm_rx.direction = 0;
   15350:	f884 0093 	strb.w	r0, [r4, #147]	; 0x93
		lll->enc_rx = 1;
   15354:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
		lll->ccm_rx.counter = 0;
   15358:	f884 808b 	strb.w	r8, [r4, #139]	; 0x8b
   1535c:	f884 808c 	strb.w	r8, [r4, #140]	; 0x8c
   15360:	f884 808d 	strb.w	r8, [r4, #141]	; 0x8d
   15364:	f884 808e 	strb.w	r8, [r4, #142]	; 0x8e
   15368:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
   1536c:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
   15370:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
   15374:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
		lll->ccm_tx.counter = 0;
   15378:	f8c4 80ac 	str.w	r8, [r4, #172]	; 0xac
		start_enc_rsp_send(conn, pdu_ctrl_tx);
   1537c:	4651      	mov	r1, sl
		lll->ccm_tx.counter = 0;
   1537e:	f8c4 80b0 	str.w	r8, [r4, #176]	; 0xb0
		lll->ccm_tx.direction = 1;
   15382:	f884 20b4 	strb.w	r2, [r4, #180]	; 0xb4
		start_enc_rsp_send(conn, pdu_ctrl_tx);
   15386:	4620      	mov	r0, r4
   15388:	f7fc ff70 	bl	1226c <start_enc_rsp_send>
	    conn->tx_head &&
   1538c:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   15390:	2b00      	cmp	r3, #0
   15392:	f000 809f 	beq.w	154d4 <ull_conn_llcp+0xe24>
	    !conn->llcp_enc.pause_tx &&
   15396:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
   1539a:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
	    conn->tx_head &&
   1539e:	0788      	lsls	r0, r1, #30
   153a0:	f100 809a 	bmi.w	154d8 <ull_conn_llcp+0xe28>
	    !conn->llcp_phy.pause_tx &&
   153a4:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   153a8:	07c9      	lsls	r1, r1, #31
   153aa:	f100 8095 	bmi.w	154d8 <ull_conn_llcp+0xe28>
		if (conn->tx_head == conn->tx_data) {
   153ae:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   153b2:	428b      	cmp	r3, r1
   153b4:	f000 8327 	beq.w	15a06 <ull_conn_llcp+0x1356>
		} else if (!conn->tx_ctrl) {
   153b8:	2a00      	cmp	r2, #0
   153ba:	f000 83a4 	beq.w	15b06 <ull_conn_llcp+0x1456>
	tx->next = conn->tx_ctrl_last->next;
   153be:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   153c2:	681a      	ldr	r2, [r3, #0]
   153c4:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
   153c6:	601f      	str	r7, [r3, #0]
	conn->tx_ctrl_last = tx;
   153c8:	683b      	ldr	r3, [r7, #0]
   153ca:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
   153ce:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
	if (!tx->next) {
   153d2:	2b00      	cmp	r3, #0
   153d4:	f47f ac49 	bne.w	14c6a <ull_conn_llcp+0x5ba>
		conn->tx_data_last = tx;
   153d8:	f8c4 71d4 	str.w	r7, [r4, #468]	; 0x1d4
   153dc:	e445      	b.n	14c6a <ull_conn_llcp+0x5ba>
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   153de:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
   153e2:	f894 71ad 	ldrb.w	r7, [r4, #429]	; 0x1ad
   153e6:	4297      	cmp	r7, r2
   153e8:	f000 80c1 	beq.w	1556e <ull_conn_llcp+0xebe>
	switch (conn->llcp_length.state) {
   153ec:	f894 c1ae 	ldrb.w	ip, [r4, #430]	; 0x1ae
   153f0:	f00c 0107 	and.w	r1, ip, #7
   153f4:	2906      	cmp	r1, #6
   153f6:	f200 84dd 	bhi.w	15db4 <ull_conn_llcp+0x1704>
   153fa:	a701      	add	r7, pc, #4	; (adr r7, 15400 <ull_conn_llcp+0xd50>)
   153fc:	f857 f021 	ldr.w	pc, [r7, r1, lsl #2]
   15400:	00014f69 	.word	0x00014f69
   15404:	000146c7 	.word	0x000146c7
   15408:	000146c7 	.word	0x000146c7
   1540c:	000146c7 	.word	0x000146c7
   15410:	0001541d 	.word	0x0001541d
   15414:	0001541d 	.word	0x0001541d
   15418:	000146c7 	.word	0x000146c7
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   1541c:	f8b4 11b0 	ldrh.w	r1, [r4, #432]	; 0x1b0
   15420:	f8a4 105a 	strh.w	r1, [r4, #90]	; 0x5a
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   15424:	f00c 0107 	and.w	r1, ip, #7
		lll->max_rx_time = conn->llcp_length.rx_time;
   15428:	f8b4 31b4 	ldrh.w	r3, [r4, #436]	; 0x1b4
		tx_octets = conn->llcp_length.tx_octets;
   1542c:	f8b4 81b2 	ldrh.w	r8, [r4, #434]	; 0x1b2
		uint16_t tx_time = conn->llcp_length.tx_time;
   15430:	f8b4 71b6 	ldrh.w	r7, [r4, #438]	; 0x1b6
		lll->max_rx_time = conn->llcp_length.rx_time;
   15434:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   15438:	2904      	cmp	r1, #4
   1543a:	f000 82fb 	beq.w	15a34 <ull_conn_llcp+0x1384>
			conn->llcp_length.state =
   1543e:	4663      	mov	r3, ip
   15440:	2206      	movs	r2, #6
   15442:	f362 0302 	bfi	r3, r2, #0, #3
   15446:	f884 31ae 	strb.w	r3, [r4, #430]	; 0x1ae
		rx = conn->llcp_rx;
   1544a:	f8d4 9108 	ldr.w	r9, [r4, #264]	; 0x108
		LL_ASSERT(rx && rx->hdr.link);
   1544e:	f1b9 0f00 	cmp.w	r9, #0
   15452:	f000 82ba 	beq.w	159ca <ull_conn_llcp+0x131a>
   15456:	f8d9 0000 	ldr.w	r0, [r9]
   1545a:	2800      	cmp	r0, #0
   1545c:	f000 82b5 	beq.w	159ca <ull_conn_llcp+0x131a>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   15460:	f899 301c 	ldrb.w	r3, [r9, #28]
		conn->llcp_rx = rx->hdr.link->mem;
   15464:	6842      	ldr	r2, [r0, #4]
		rx->hdr.handle = conn->lll.handle;
   15466:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
		conn->llcp_rx = rx->hdr.link->mem;
   1546a:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   1546e:	f043 0303 	orr.w	r3, r3, #3
   15472:	f889 301c 	strb.w	r3, [r9, #28]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   15476:	2203      	movs	r2, #3
		pdu_ctrl_rx->len =
   15478:	2309      	movs	r3, #9
   1547a:	f889 301d 	strb.w	r3, [r9, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1547e:	f889 2004 	strb.w	r2, [r9, #4]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   15482:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   15486:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
   1548a:	f8a9 2022 	strh.w	r2, [r9, #34]	; 0x22
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   1548e:	2315      	movs	r3, #21
   15490:	f889 301f 	strb.w	r3, [r9, #31]
		rx->hdr.handle = conn->lll.handle;
   15494:	f8a9 c006 	strh.w	ip, [r9, #6]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   15498:	f8a9 1020 	strh.w	r1, [r9, #32]
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
   1549c:	f8a9 8024 	strh.w	r8, [r9, #36]	; 0x24
		ll_rx_put(rx->hdr.link, rx);
   154a0:	4649      	mov	r1, r9
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   154a2:	f8a9 7026 	strh.w	r7, [r9, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
   154a6:	f7fb fd2f 	bl	10f08 <ll_rx_put>
		ll_rx_sched();
   154aa:	f7fb fd37 	bl	10f1c <ll_rx_sched>
	break;
   154ae:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   154b2:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
   154b6:	f7ff b906 	b.w	146c6 <ull_conn_llcp+0x16>
   154ba:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   154be:	2a00      	cmp	r2, #0
   154c0:	f47f aa59 	bne.w	14976 <ull_conn_llcp+0x2c6>
			tx->next = conn->tx_head;
   154c4:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   154c8:	e9c4 8871 	strd	r8, r8, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   154cc:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
   154d0:	f7ff ba5c 	b.w	1498c <ull_conn_llcp+0x2dc>
   154d4:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   154d8:	2a00      	cmp	r2, #0
   154da:	f47f af70 	bne.w	153be <ull_conn_llcp+0xd0e>
			tx->next = conn->tx_head;
   154de:	603b      	str	r3, [r7, #0]
				conn->tx_ctrl = tx;
   154e0:	e9c4 7771 	strd	r7, r7, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   154e4:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
   154e8:	e771      	b.n	153ce <ull_conn_llcp+0xd1e>
   154ea:	bf00      	nop
   154ec:	20002330 	.word	0x20002330
   154f0:	0001417f 	.word	0x0001417f
		LL_ASSERT(rx && rx->hdr.link);
   154f4:	4ad4      	ldr	r2, [pc, #848]	; (15848 <ull_conn_llcp+0x1198>)
   154f6:	49d5      	ldr	r1, [pc, #852]	; (1584c <ull_conn_llcp+0x119c>)
   154f8:	48d5      	ldr	r0, [pc, #852]	; (15850 <ull_conn_llcp+0x11a0>)
   154fa:	f640 635d 	movw	r3, #3677	; 0xe5d
   154fe:	f009 fa0d 	bl	1e91c <printk>
   15502:	4040      	eors	r0, r0
   15504:	f380 8811 	msr	BASEPRI, r0
   15508:	f04f 0003 	mov.w	r0, #3
   1550c:	df02      	svc	2
   1550e:	6838      	ldr	r0, [r7, #0]
   15510:	f8b4 c05a 	ldrh.w	ip, [r4, #90]	; 0x5a
   15514:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
   15518:	e417      	b.n	14d4a <ull_conn_llcp+0x69a>
   1551a:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   1551e:	2a00      	cmp	r2, #0
   15520:	f47f aed5 	bne.w	152ce <ull_conn_llcp+0xc1e>
			tx->next = conn->tx_head;
   15524:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   15526:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1552a:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   1552e:	e564      	b.n	14ffa <ull_conn_llcp+0x94a>
			if (!conn->llcp_length.cache.tx_octets) {
   15530:	f8b4 21b8 	ldrh.w	r2, [r4, #440]	; 0x1b8
   15534:	2a00      	cmp	r2, #0
   15536:	f040 8175 	bne.w	15824 <ull_conn_llcp+0x1174>
				conn->llcp_length.ack = conn->llcp_length.req;
   1553a:	f884 31ad 	strb.w	r3, [r4, #429]	; 0x1ad
				conn->procedure_expire = 0U;
   1553e:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
   15542:	f7ff bbf9 	b.w	14d38 <ull_conn_llcp+0x688>
	    ((pdu_data_tx->llctrl.opcode !=
   15546:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   15548:	2a03      	cmp	r2, #3
   1554a:	f43f ad69 	beq.w	15020 <ull_conn_llcp+0x970>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1554e:	2a0a      	cmp	r2, #10
   15550:	f47f a8f9 	bne.w	14746 <ull_conn_llcp+0x96>
   15554:	e564      	b.n	15020 <ull_conn_llcp+0x970>
		if (!conn->tx_ctrl) {
   15556:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   1555a:	2b00      	cmp	r3, #0
   1555c:	f47f ab7a 	bne.w	14c54 <ull_conn_llcp+0x5a4>
			tx->next = conn->tx_head;
   15560:	603a      	str	r2, [r7, #0]
				conn->tx_ctrl = tx;
   15562:	e9c4 7771 	strd	r7, r7, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   15566:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
   1556a:	f7ff bb7a 	b.w	14c62 <ull_conn_llcp+0x5b2>
		} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   1556e:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
   15572:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   15576:	4293      	cmp	r3, r2
   15578:	f43f a8ad 	beq.w	146d6 <ull_conn_llcp+0x26>
	switch (conn->llcp_phy.state) {
   1557c:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   15580:	f003 0703 	and.w	r7, r3, #3
   15584:	2f03      	cmp	r7, #3
   15586:	f000 8270 	beq.w	15a6a <ull_conn_llcp+0x13ba>
   1558a:	2f00      	cmp	r7, #0
   1558c:	f47f a8a2 	bne.w	146d4 <ull_conn_llcp+0x24>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   15590:	48b0      	ldr	r0, [pc, #704]	; (15854 <ull_conn_llcp+0x11a4>)
   15592:	f7f7 fda3 	bl	d0dc <mem_acquire>
		if (!tx) {
   15596:	4601      	mov	r1, r0
   15598:	2800      	cmp	r0, #0
   1559a:	f43f ad35 	beq.w	15008 <ull_conn_llcp+0x958>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   1559e:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
		conn->phy_pref_tx = conn->llcp_phy.tx;
   155a2:	f894 21c0 	ldrb.w	r2, [r4, #448]	; 0x1c0
		conn->lll.phy_flags = conn->llcp_phy.flags;
   155a6:	f894 71bf 	ldrb.w	r7, [r4, #447]	; 0x1bf
   155aa:	f894 c060 	ldrb.w	ip, [r4, #96]	; 0x60
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   155ae:	2001      	movs	r0, #1
   155b0:	f360 0301 	bfi	r3, r0, #0, #2
		conn->phy_pref_tx = conn->llcp_phy.tx;
   155b4:	f3c3 0082 	ubfx	r0, r3, #2, #3
   155b8:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
   155bc:	f3c3 1042 	ubfx	r0, r3, #5, #3
   155c0:	f360 02c5 	bfi	r2, r0, #3, #3
		conn->lll.phy_flags = conn->llcp_phy.flags;
   155c4:	f3c7 0740 	ubfx	r7, r7, #1, #1
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   155c8:	7908      	ldrb	r0, [r1, #4]
		conn->phy_pref_rx = conn->llcp_phy.rx;
   155ca:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
		conn->lll.phy_flags = conn->llcp_phy.flags;
   155ce:	f367 0cc3 	bfi	ip, r7, #3, #1
		conn->phy_pref_tx = conn->llcp_phy.tx;
   155d2:	f3c3 0282 	ubfx	r2, r3, #2, #3
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   155d6:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
		conn->lll.phy_flags = conn->llcp_phy.flags;
   155da:	f884 c060 	strb.w	ip, [r4, #96]	; 0x60
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   155de:	f040 0003 	orr.w	r0, r0, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
   155e2:	f3c3 1342 	ubfx	r3, r3, #5, #3
		pdu_ctrl_tx->len =
   155e6:	2703      	movs	r7, #3
		pr->tx_phys = conn->llcp_phy.tx;
   155e8:	720a      	strb	r2, [r1, #8]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   155ea:	2216      	movs	r2, #22
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   155ec:	7108      	strb	r0, [r1, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   155ee:	71ca      	strb	r2, [r1, #7]
		pr->rx_phys = conn->llcp_phy.rx;
   155f0:	724b      	strb	r3, [r1, #9]
		pdu_ctrl_tx->len =
   155f2:	714f      	strb	r7, [r1, #5]
	ctrl_tx_pause_enqueue(conn, tx, false);
   155f4:	2200      	movs	r2, #0
   155f6:	4620      	mov	r0, r4
   155f8:	f7fc fc36 	bl	11e68 <ctrl_tx_pause_enqueue>
   155fc:	e500      	b.n	15000 <ull_conn_llcp+0x950>
		start_enc_rsp_send(conn, pdu_ctrl_tx);
   155fe:	4651      	mov	r1, sl
   15600:	4620      	mov	r0, r4
   15602:	f7fc fe33 	bl	1226c <start_enc_rsp_send>
	    conn->tx_head &&
   15606:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   1560a:	2b00      	cmp	r3, #0
   1560c:	f000 8088 	beq.w	15720 <ull_conn_llcp+0x1070>
	    !conn->llcp_enc.pause_tx &&
   15610:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
   15614:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
	    conn->tx_head &&
   15618:	0789      	lsls	r1, r1, #30
   1561a:	f100 8083 	bmi.w	15724 <ull_conn_llcp+0x1074>
	    !conn->llcp_phy.pause_tx &&
   1561e:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   15622:	07c8      	lsls	r0, r1, #31
   15624:	d47e      	bmi.n	15724 <ull_conn_llcp+0x1074>
		if (conn->tx_head == conn->tx_data) {
   15626:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   1562a:	428b      	cmp	r3, r1
   1562c:	f000 825f 	beq.w	15aee <ull_conn_llcp+0x143e>
		} else if (!conn->tx_ctrl) {
   15630:	2a00      	cmp	r2, #0
   15632:	f000 832e 	beq.w	15c92 <ull_conn_llcp+0x15e2>
	tx->next = conn->tx_ctrl_last->next;
   15636:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1563a:	681a      	ldr	r2, [r3, #0]
   1563c:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
   1563e:	601f      	str	r7, [r3, #0]
	conn->tx_ctrl_last = tx;
   15640:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
	if (!tx->next) {
   15644:	683b      	ldr	r3, [r7, #0]
   15646:	2b00      	cmp	r3, #0
   15648:	f000 814b 	beq.w	158e2 <ull_conn_llcp+0x1232>
		conn->llcp_enc.pause_rx = 0U;
   1564c:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   15650:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   15654:	f023 0303 	bic.w	r3, r3, #3
   15658:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
   1565c:	f7ff bb05 	b.w	14c6a <ull_conn_llcp+0x5ba>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   15660:	230d      	movs	r3, #13
		p->error_code =	conn->llcp.encryption.error_code;
   15662:	f887 8008 	strb.w	r8, [r7, #8]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   15666:	71fb      	strb	r3, [r7, #7]
		p->error_code =	conn->llcp.encryption.error_code;
   15668:	f04f 0902 	mov.w	r9, #2
   1566c:	f7ff bad4 	b.w	14c18 <ull_conn_llcp+0x568>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   15670:	4878      	ldr	r0, [pc, #480]	; (15854 <ull_conn_llcp+0x11a4>)
   15672:	f7f7 fd33 	bl	d0dc <mem_acquire>
		if (tx) {
   15676:	2800      	cmp	r0, #0
   15678:	f43f acc6 	beq.w	15008 <ull_conn_llcp+0x958>
			conn->llcp_version.ack--;
   1567c:	f894 2139 	ldrb.w	r2, [r4, #313]	; 0x139
			conn->llcp_version.tx = 1U;
   15680:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
			conn->llcp_version.ack--;
   15684:	3a01      	subs	r2, #1
   15686:	f884 2139 	strb.w	r2, [r4, #313]	; 0x139
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   1568a:	7902      	ldrb	r2, [r0, #4]
			conn->llcp_version.tx = 1U;
   1568c:	f043 0301 	orr.w	r3, r3, #1
			pdu->len =
   15690:	2106      	movs	r1, #6
			conn->llcp_version.tx = 1U;
   15692:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   15696:	f042 0203 	orr.w	r2, r2, #3
			pdu->len =
   1569a:	7141      	strb	r1, [r0, #5]
	    conn->tx_head &&
   1569c:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   156a0:	7102      	strb	r2, [r0, #4]
			pdu->llctrl.version_ind.version_number =
   156a2:	210b      	movs	r1, #11
			pdu->llctrl.version_ind.company_id = cid;
   156a4:	f06f 020e 	mvn.w	r2, #14
			pdu->llctrl.opcode =
   156a8:	270c      	movs	r7, #12
			pdu->llctrl.version_ind.version_number =
   156aa:	7201      	strb	r1, [r0, #8]
			pdu->llctrl.version_ind.company_id = cid;
   156ac:	7242      	strb	r2, [r0, #9]
   156ae:	2105      	movs	r1, #5
			pdu->llctrl.version_ind.sub_version_number = svn;
   156b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
			pdu->llctrl.opcode =
   156b4:	71c7      	strb	r7, [r0, #7]
			pdu->llctrl.version_ind.company_id = cid;
   156b6:	7281      	strb	r1, [r0, #10]
			pdu->llctrl.version_ind.sub_version_number = svn;
   156b8:	72c2      	strb	r2, [r0, #11]
   156ba:	7302      	strb	r2, [r0, #12]
	if (
   156bc:	2b00      	cmp	r3, #0
   156be:	f000 8104 	beq.w	158ca <ull_conn_llcp+0x121a>
	    !conn->llcp_enc.pause_tx &&
   156c2:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   156c6:	0792      	lsls	r2, r2, #30
   156c8:	f100 80ff 	bmi.w	158ca <ull_conn_llcp+0x121a>
	    !conn->llcp_phy.pause_tx &&
   156cc:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   156d0:	07d7      	lsls	r7, r2, #31
   156d2:	f100 80fa 	bmi.w	158ca <ull_conn_llcp+0x121a>
		if (conn->tx_head == conn->tx_data) {
   156d6:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   156da:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   156dc:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   156e0:	f000 8295 	beq.w	15c0e <ull_conn_llcp+0x155e>
		} else if (!conn->tx_ctrl) {
   156e4:	2a00      	cmp	r2, #0
   156e6:	f47f ac80 	bne.w	14fea <ull_conn_llcp+0x93a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   156ea:	791a      	ldrb	r2, [r3, #4]
   156ec:	f002 0203 	and.w	r2, r2, #3
   156f0:	2a03      	cmp	r2, #3
   156f2:	f000 8332 	beq.w	15d5a <ull_conn_llcp+0x16aa>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   156f6:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   156fa:	e476      	b.n	14fea <ull_conn_llcp+0x93a>
		LL_ASSERT(0);
   156fc:	f640 435e 	movw	r3, #3166	; 0xc5e
		LL_ASSERT(0);
   15700:	4a51      	ldr	r2, [pc, #324]	; (15848 <ull_conn_llcp+0x1198>)
   15702:	4955      	ldr	r1, [pc, #340]	; (15858 <ull_conn_llcp+0x11a8>)
   15704:	4852      	ldr	r0, [pc, #328]	; (15850 <ull_conn_llcp+0x11a0>)
   15706:	f009 f909 	bl	1e91c <printk>
   1570a:	4040      	eors	r0, r0
   1570c:	f380 8811 	msr	BASEPRI, r0
   15710:	f04f 0003 	mov.w	r0, #3
   15714:	df02      	svc	2
		break;
   15716:	e477      	b.n	15008 <ull_conn_llcp+0x958>
		conn->tx_data_last = tx;
   15718:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   1571c:	f7ff bb8c 	b.w	14e38 <ull_conn_llcp+0x788>
   15720:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   15724:	2a00      	cmp	r2, #0
   15726:	d186      	bne.n	15636 <ull_conn_llcp+0xf86>
			tx->next = conn->tx_head;
   15728:	603b      	str	r3, [r7, #0]
				conn->tx_ctrl = tx;
   1572a:	e9c4 7771 	strd	r7, r7, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1572e:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
   15732:	e787      	b.n	15644 <ull_conn_llcp+0xf94>
		conn->tx_data_last = tx;
   15734:	f8c4 81d4 	str.w	r8, [r4, #468]	; 0x1d4
   15738:	f7ff b92b 	b.w	14992 <ull_conn_llcp+0x2e2>
   1573c:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
		conn->procedure_expire = conn->procedure_reload;
   15740:	e45e      	b.n	15000 <ull_conn_llcp+0x950>
			ecb_encrypt(&conn->llcp_enc.ltk[0],
   15742:	f104 097b 	add.w	r9, r4, #123	; 0x7b
   15746:	464b      	mov	r3, r9
   15748:	4642      	mov	r2, r8
   1574a:	f104 01f6 	add.w	r1, r4, #246	; 0xf6
   1574e:	f204 1071 	addw	r0, r4, #369	; 0x171
   15752:	f004 f855 	bl	19800 <ecb_encrypt>
   15756:	f8d4 2087 	ldr.w	r2, [r4, #135]	; 0x87
   1575a:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8
   1575e:	f8d4 007b 	ldr.w	r0, [r4, #123]	; 0x7b
   15762:	f8d4 107f 	ldr.w	r1, [r4, #127]	; 0x7f
   15766:	f8d4 3083 	ldr.w	r3, [r4, #131]	; 0x83
   1576a:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
   1576e:	4622      	mov	r2, r4
   15770:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
   15774:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
   15778:	f852 1f94 	ldr.w	r1, [r2, #148]!
			lll->ccm_tx.direction = 0U;
   1577c:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
   15780:	6852      	ldr	r2, [r2, #4]
   15782:	f8c4 20b9 	str.w	r2, [r4, #185]	; 0xb9
   15786:	f8c4 10b5 	str.w	r1, [r4, #181]	; 0xb5
			lll->enc_rx = 1U;
   1578a:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
			lll->ccm_rx.direction = 1U;
   1578e:	f894 1093 	ldrb.w	r1, [r4, #147]	; 0x93
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15792:	793b      	ldrb	r3, [r7, #4]
			lll->ccm_rx.counter = 0U;
   15794:	f884 808b 	strb.w	r8, [r4, #139]	; 0x8b
			lll->enc_rx = 1U;
   15798:	f042 0208 	orr.w	r2, r2, #8
			lll->ccm_rx.direction = 1U;
   1579c:	f041 0101 	orr.w	r1, r1, #1
			lll->ccm_tx.direction = 0U;
   157a0:	f368 0000 	bfi	r0, r8, #0, #1
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   157a4:	f04f 0c01 	mov.w	ip, #1
			lll->enc_rx = 1U;
   157a8:	f884 207a 	strb.w	r2, [r4, #122]	; 0x7a
			lll->ccm_rx.counter = 0U;
   157ac:	f884 808c 	strb.w	r8, [r4, #140]	; 0x8c
   157b0:	f884 808d 	strb.w	r8, [r4, #141]	; 0x8d
   157b4:	f884 808e 	strb.w	r8, [r4, #142]	; 0x8e
   157b8:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
   157bc:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
   157c0:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
   157c4:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
			lll->ccm_tx.counter = 0U;
   157c8:	f8c4 80ac 	str.w	r8, [r4, #172]	; 0xac
   157cc:	f8c4 80b0 	str.w	r8, [r4, #176]	; 0xb0
			lll->ccm_rx.direction = 1U;
   157d0:	f884 1093 	strb.w	r1, [r4, #147]	; 0x93
			lll->ccm_tx.direction = 0U;
   157d4:	f884 00b4 	strb.w	r0, [r4, #180]	; 0xb4
			pdu_ctrl_tx->llctrl.opcode =
   157d8:	2205      	movs	r2, #5
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   157da:	f043 0303 	orr.w	r3, r3, #3
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   157de:	f887 c005 	strb.w	ip, [r7, #5]
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   157e2:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->llctrl.opcode =
   157e4:	71fa      	strb	r2, [r7, #7]
	    conn->tx_head &&
   157e6:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
	if (
   157ea:	2a00      	cmp	r2, #0
   157ec:	d04c      	beq.n	15888 <ull_conn_llcp+0x11d8>
	    !conn->llcp_enc.pause_tx &&
   157ee:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
	    conn->tx_head &&
   157f2:	079b      	lsls	r3, r3, #30
   157f4:	d448      	bmi.n	15888 <ull_conn_llcp+0x11d8>
	    !conn->llcp_phy.pause_tx &&
   157f6:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   157fa:	07d8      	lsls	r0, r3, #31
   157fc:	d444      	bmi.n	15888 <ull_conn_llcp+0x11d8>
		if (conn->tx_head == conn->tx_data) {
   157fe:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   15802:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   15806:	428a      	cmp	r2, r1
   15808:	f000 824b 	beq.w	15ca2 <ull_conn_llcp+0x15f2>
		} else if (!conn->tx_ctrl) {
   1580c:	2b00      	cmp	r3, #0
   1580e:	f000 825c 	beq.w	15cca <ull_conn_llcp+0x161a>
	tx->next = conn->tx_ctrl_last->next;
   15812:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   15816:	681a      	ldr	r2, [r3, #0]
   15818:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
   1581a:	601f      	str	r7, [r3, #0]
	conn->tx_ctrl_last = tx;
   1581c:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
	if (!tx->next) {
   15820:	683b      	ldr	r3, [r7, #0]
   15822:	e5d4      	b.n	153ce <ull_conn_llcp+0xd1e>
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   15824:	f894 01ae 	ldrb.w	r0, [r4, #430]	; 0x1ae
				conn->llcp_length.tx_time =
   15828:	f8b4 71ba 	ldrh.w	r7, [r4, #442]	; 0x1ba
				conn->llcp_length.tx_octets =
   1582c:	f8a4 21b2 	strh.w	r2, [r4, #434]	; 0x1b2
				conn->llcp_length.cache.tx_octets = 0;
   15830:	2300      	movs	r3, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   15832:	f363 0002 	bfi	r0, r3, #0, #3
   15836:	f884 01ae 	strb.w	r0, [r4, #430]	; 0x1ae
				conn->llcp_length.cache.tx_octets = 0;
   1583a:	f8a4 31b8 	strh.w	r3, [r4, #440]	; 0x1b8
				conn->llcp_length.tx_time =
   1583e:	f8a4 71b6 	strh.w	r7, [r4, #438]	; 0x1b6
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   15842:	f7ff ba79 	b.w	14d38 <ull_conn_llcp+0x688>
   15846:	bf00      	nop
   15848:	00024e44 	.word	0x00024e44
   1584c:	00024f10 	.word	0x00024f10
   15850:	00024904 	.word	0x00024904
   15854:	20002330 	.word	0x20002330
   15858:	00024974 	.word	0x00024974
	switch (conn->llcp_conn_param.state) {
   1585c:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   15860:	f003 0307 	and.w	r3, r3, #7
   15864:	2b05      	cmp	r3, #5
   15866:	f200 82a8 	bhi.w	15dba <ull_conn_llcp+0x170a>
   1586a:	a001      	add	r0, pc, #4	; (adr r0, 15870 <ull_conn_llcp+0x11c0>)
   1586c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   15870:	00015159 	.word	0x00015159
   15874:	000150d9 	.word	0x000150d9
   15878:	00015085 	.word	0x00015085
   1587c:	000146d7 	.word	0x000146d7
   15880:	000146d7 	.word	0x000146d7
   15884:	000146d7 	.word	0x000146d7
		if (!conn->tx_ctrl) {
   15888:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   1588c:	2b00      	cmp	r3, #0
   1588e:	d1c0      	bne.n	15812 <ull_conn_llcp+0x1162>
			tx->next = conn->tx_head;
   15890:	603a      	str	r2, [r7, #0]
				conn->tx_ctrl = tx;
   15892:	e9c4 7771 	strd	r7, r7, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   15896:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
   1589a:	e7c1      	b.n	15820 <ull_conn_llcp+0x1170>
			conn->tx_data = conn->tx_data->next;
   1589c:	681a      	ldr	r2, [r3, #0]
   1589e:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   158a2:	2f00      	cmp	r7, #0
   158a4:	f47f a80c 	bne.w	148c0 <ull_conn_llcp+0x210>
			tx->next = conn->tx_head->next;
   158a8:	681a      	ldr	r2, [r3, #0]
   158aa:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   158ac:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   158ae:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   158b0:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   158b4:	f7ff b80c 	b.w	148d0 <ull_conn_llcp+0x220>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   158b8:	791a      	ldrb	r2, [r3, #4]
   158ba:	f002 0203 	and.w	r2, r2, #3
   158be:	2a03      	cmp	r2, #3
   158c0:	d071      	beq.n	159a6 <ull_conn_llcp+0x12f6>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   158c2:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   158c6:	f7fe bffb 	b.w	148c0 <ull_conn_llcp+0x210>
		if (!conn->tx_ctrl) {
   158ca:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   158ce:	2a00      	cmp	r2, #0
   158d0:	f47f ab8b 	bne.w	14fea <ull_conn_llcp+0x93a>
			tx->next = conn->tx_head;
   158d4:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   158d6:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   158da:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   158de:	f7ff bb8b 	b.w	14ff8 <ull_conn_llcp+0x948>
		conn->tx_data_last = tx;
   158e2:	f8c4 71d4 	str.w	r7, [r4, #468]	; 0x1d4
   158e6:	e6b1      	b.n	1564c <ull_conn_llcp+0xf9c>
			conn->tx_data = conn->tx_data->next;
   158e8:	6819      	ldr	r1, [r3, #0]
   158ea:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   158ee:	2a00      	cmp	r2, #0
   158f0:	f47f a94f 	bne.w	14b92 <ull_conn_llcp+0x4e2>
			tx->next = conn->tx_head->next;
   158f4:	681a      	ldr	r2, [r3, #0]
   158f6:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   158f8:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   158fa:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   158fc:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   15900:	f7ff b94f 	b.w	14ba2 <ull_conn_llcp+0x4f2>
			conn->tx_data = conn->tx_data->next;
   15904:	6819      	ldr	r1, [r3, #0]
   15906:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1590a:	2a00      	cmp	r2, #0
   1590c:	f47f a9ee 	bne.w	14cec <ull_conn_llcp+0x63c>
			tx->next = conn->tx_head->next;
   15910:	681a      	ldr	r2, [r3, #0]
   15912:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   15914:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   15916:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   15918:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   1591c:	f7ff b9ee 	b.w	14cfc <ull_conn_llcp+0x64c>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   15920:	791a      	ldrb	r2, [r3, #4]
   15922:	f002 0203 	and.w	r2, r2, #3
   15926:	2a03      	cmp	r2, #3
   15928:	f000 808e 	beq.w	15a48 <ull_conn_llcp+0x1398>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1592c:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   15930:	f7ff b92f 	b.w	14b92 <ull_conn_llcp+0x4e2>
			conn->tx_data = conn->tx_data->next;
   15934:	6819      	ldr	r1, [r3, #0]
   15936:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1593a:	2a00      	cmp	r2, #0
   1593c:	f47f a81b 	bne.w	14976 <ull_conn_llcp+0x2c6>
			tx->next = conn->tx_head->next;
   15940:	681a      	ldr	r2, [r3, #0]
   15942:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
   15946:	f8c3 8000 	str.w	r8, [r3]
				conn->tx_ctrl = tx;
   1594a:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
   1594e:	e9c4 8872 	strd	r8, r8, [r4, #456]	; 0x1c8
   15952:	f7ff b81b 	b.w	1498c <ull_conn_llcp+0x2dc>
		if (!conn->tx_ctrl) {
   15956:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   1595a:	2b00      	cmp	r3, #0
   1595c:	f47f ab45 	bne.w	14fea <ull_conn_llcp+0x93a>
			tx->next = conn->tx_head;
   15960:	6001      	str	r1, [r0, #0]
				conn->tx_ctrl = tx;
   15962:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   15966:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   1596a:	f7ff bb45 	b.w	14ff8 <ull_conn_llcp+0x948>
			conn->tx_data = conn->tx_data->next;
   1596e:	f8dc 3000 	ldr.w	r3, [ip]
   15972:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   15976:	2a00      	cmp	r2, #0
   15978:	f47f aa51 	bne.w	14e1e <ull_conn_llcp+0x76e>
			tx->next = conn->tx_head->next;
   1597c:	f8dc 3000 	ldr.w	r3, [ip]
   15980:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   15982:	f8cc 0000 	str.w	r0, [ip]
				conn->tx_ctrl = tx;
   15986:	f8d0 c000 	ldr.w	ip, [r0]
				conn->tx_ctrl_last = tx;
   1598a:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   1598e:	f7ff ba4f 	b.w	14e30 <ull_conn_llcp+0x780>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   15992:	791a      	ldrb	r2, [r3, #4]
   15994:	f002 0203 	and.w	r2, r2, #3
   15998:	2a03      	cmp	r2, #3
   1599a:	f000 8145 	beq.w	15c28 <ull_conn_llcp+0x1578>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1599e:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   159a2:	f7ff b9a3 	b.w	14cec <ull_conn_llcp+0x63c>
	    ((pdu_data_tx->llctrl.opcode !=
   159a6:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   159a8:	2a03      	cmp	r2, #3
   159aa:	f43f af7d 	beq.w	158a8 <ull_conn_llcp+0x11f8>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   159ae:	2a0a      	cmp	r2, #10
   159b0:	d187      	bne.n	158c2 <ull_conn_llcp+0x1212>
   159b2:	e779      	b.n	158a8 <ull_conn_llcp+0x11f8>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   159b4:	f89c 3004 	ldrb.w	r3, [ip, #4]
   159b8:	f003 0303 	and.w	r3, r3, #3
   159bc:	2b03      	cmp	r3, #3
   159be:	f000 8153 	beq.w	15c68 <ull_conn_llcp+0x15b8>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   159c2:	e9c4 cc72 	strd	ip, ip, [r4, #456]	; 0x1c8
   159c6:	f7ff ba2a 	b.w	14e1e <ull_conn_llcp+0x76e>
		LL_ASSERT(rx && rx->hdr.link);
   159ca:	4ad1      	ldr	r2, [pc, #836]	; (15d10 <ull_conn_llcp+0x1660>)
   159cc:	49d1      	ldr	r1, [pc, #836]	; (15d14 <ull_conn_llcp+0x1664>)
   159ce:	48d2      	ldr	r0, [pc, #840]	; (15d18 <ull_conn_llcp+0x1668>)
   159d0:	f640 635d 	movw	r3, #3677	; 0xe5d
   159d4:	f008 ffa2 	bl	1e91c <printk>
   159d8:	4040      	eors	r0, r0
   159da:	f380 8811 	msr	BASEPRI, r0
   159de:	f04f 0003 	mov.w	r0, #3
   159e2:	df02      	svc	2
   159e4:	f8d9 0000 	ldr.w	r0, [r9]
   159e8:	e53a      	b.n	15460 <ull_conn_llcp+0xdb0>
			conn->tx_data = conn->tx_data->next;
   159ea:	6819      	ldr	r1, [r3, #0]
   159ec:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   159f0:	2a00      	cmp	r2, #0
   159f2:	f47f ac6c 	bne.w	152ce <ull_conn_llcp+0xc1e>
			tx->next = conn->tx_head->next;
   159f6:	681a      	ldr	r2, [r3, #0]
   159f8:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   159fa:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   159fc:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   159fe:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   15a02:	f7ff bafa 	b.w	14ffa <ull_conn_llcp+0x94a>
			conn->tx_data = conn->tx_data->next;
   15a06:	6819      	ldr	r1, [r3, #0]
   15a08:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   15a0c:	2a00      	cmp	r2, #0
   15a0e:	f47f acd6 	bne.w	153be <ull_conn_llcp+0xd0e>
			tx->next = conn->tx_head->next;
   15a12:	681a      	ldr	r2, [r3, #0]
   15a14:	603a      	str	r2, [r7, #0]
			conn->tx_head->next = tx;
   15a16:	601f      	str	r7, [r3, #0]
				conn->tx_ctrl = tx;
   15a18:	683b      	ldr	r3, [r7, #0]
				conn->tx_ctrl_last = tx;
   15a1a:	e9c4 7772 	strd	r7, r7, [r4, #456]	; 0x1c8
   15a1e:	e4d6      	b.n	153ce <ull_conn_llcp+0xd1e>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   15a20:	791a      	ldrb	r2, [r3, #4]
   15a22:	f002 0203 	and.w	r2, r2, #3
   15a26:	2a03      	cmp	r2, #3
   15a28:	f000 8127 	beq.w	15c7a <ull_conn_llcp+0x15ca>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   15a2c:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   15a30:	f7fe bfa1 	b.w	14976 <ull_conn_llcp+0x2c6>
			if (!conn->llcp_length.cache.tx_octets) {
   15a34:	f8b4 11b8 	ldrh.w	r1, [r4, #440]	; 0x1b8
   15a38:	2900      	cmp	r1, #0
   15a3a:	f040 80fd 	bne.w	15c38 <ull_conn_llcp+0x1588>
				conn->llcp_length.ack = conn->llcp_length.req;
   15a3e:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
				conn->procedure_expire = 0U;
   15a42:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
   15a46:	e500      	b.n	1544a <ull_conn_llcp+0xd9a>
	    ((pdu_data_tx->llctrl.opcode !=
   15a48:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   15a4a:	2a03      	cmp	r2, #3
   15a4c:	f43f af52 	beq.w	158f4 <ull_conn_llcp+0x1244>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   15a50:	2a0a      	cmp	r2, #10
   15a52:	f47f af6b 	bne.w	1592c <ull_conn_llcp+0x127c>
   15a56:	e74d      	b.n	158f4 <ull_conn_llcp+0x1244>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   15a58:	791a      	ldrb	r2, [r3, #4]
   15a5a:	f002 0203 	and.w	r2, r2, #3
   15a5e:	2a03      	cmp	r2, #3
   15a60:	f000 80fa 	beq.w	15c58 <ull_conn_llcp+0x15a8>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   15a64:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   15a68:	e431      	b.n	152ce <ull_conn_llcp+0xc1e>
		if (conn->llcp_phy.tx & PHY_2M) {
   15a6a:	071f      	lsls	r7, r3, #28
		conn->llcp_phy.ack = conn->llcp_phy.req;
   15a6c:	f884 21bd 	strb.w	r2, [r4, #445]	; 0x1bd
		if (conn->llcp_phy.tx & PHY_2M) {
   15a70:	f3c3 0282 	ubfx	r2, r3, #2, #3
   15a74:	f140 8142 	bpl.w	15cfc <ull_conn_llcp+0x164c>
			conn->llcp_phy.tx = PHY_2M;
   15a78:	2202      	movs	r2, #2
   15a7a:	f362 0384 	bfi	r3, r2, #2, #3
   15a7e:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
		if (conn->llcp_phy.rx & PHY_2M) {
   15a82:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   15a86:	065f      	lsls	r7, r3, #25
   15a88:	ea4f 1253 	mov.w	r2, r3, lsr #5
   15a8c:	f140 812e 	bpl.w	15cec <ull_conn_llcp+0x163c>
			conn->llcp_phy.rx = PHY_2M;
   15a90:	2202      	movs	r2, #2
   15a92:	f362 1347 	bfi	r3, r2, #5, #3
   15a96:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
   15a9a:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   15a9e:	f894 c060 	ldrb.w	ip, [r4, #96]	; 0x60
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   15aa2:	f894 7061 	ldrb.w	r7, [r4, #97]	; 0x61
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   15aa6:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
   15aaa:	f3c3 0182 	ubfx	r1, r3, #2, #3
   15aae:	f00c 0c07 	and.w	ip, ip, #7
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   15ab2:	f007 0707 	and.w	r7, r7, #7
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   15ab6:	f3c2 0280 	ubfx	r2, r2, #2, #1
			conn->llcp.phy_upd_ind.tx = 0U;
   15aba:	458c      	cmp	ip, r1
   15abc:	bf08      	it	eq
   15abe:	2100      	moveq	r1, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
   15ac0:	0052      	lsls	r2, r2, #1
			conn->llcp.phy_upd_ind.rx = 0U;
   15ac2:	ebb7 1f53 	cmp.w	r7, r3, lsr #5
		conn->llcp.phy_upd_ind.initiate = 1U;
   15ac6:	f042 0201 	orr.w	r2, r2, #1
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   15aca:	ea4f 1353 	mov.w	r3, r3, lsr #5
			conn->llcp.phy_upd_ind.rx = 0U;
   15ace:	bf08      	it	eq
   15ad0:	2300      	moveq	r3, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
   15ad2:	ea42 1243 	orr.w	r2, r2, r3, lsl #5
   15ad6:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
		conn->llcp_ack -= 2U;
   15ada:	1e83      	subs	r3, r0, #2
		conn->llcp_type = LLCP_PHY_UPD;
   15adc:	2106      	movs	r1, #6
		conn->llcp_ack -= 2U;
   15ade:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		conn->llcp.phy_upd_ind.initiate = 1U;
   15ae2:	f884 20e8 	strb.w	r2, [r4, #232]	; 0xe8
		conn->llcp_type = LLCP_PHY_UPD;
   15ae6:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   15aea:	f7fe be54 	b.w	14796 <ull_conn_llcp+0xe6>
			conn->tx_data = conn->tx_data->next;
   15aee:	6819      	ldr	r1, [r3, #0]
   15af0:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   15af4:	2a00      	cmp	r2, #0
   15af6:	f47f ad9e 	bne.w	15636 <ull_conn_llcp+0xf86>
			tx->next = conn->tx_head->next;
   15afa:	681a      	ldr	r2, [r3, #0]
   15afc:	603a      	str	r2, [r7, #0]
			conn->tx_head->next = tx;
   15afe:	601f      	str	r7, [r3, #0]
				conn->tx_ctrl_last = tx;
   15b00:	e9c4 7772 	strd	r7, r7, [r4, #456]	; 0x1c8
   15b04:	e59e      	b.n	15644 <ull_conn_llcp+0xf94>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   15b06:	791a      	ldrb	r2, [r3, #4]
   15b08:	f002 0203 	and.w	r2, r2, #3
   15b0c:	2a03      	cmp	r2, #3
   15b0e:	f000 80d4 	beq.w	15cba <ull_conn_llcp+0x160a>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   15b12:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   15b16:	e452      	b.n	153be <ull_conn_llcp+0xd0e>
			conn->tx_data = conn->tx_data->next;
   15b18:	6811      	ldr	r1, [r2, #0]
   15b1a:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   15b1e:	2b00      	cmp	r3, #0
   15b20:	f47f a898 	bne.w	14c54 <ull_conn_llcp+0x5a4>
			tx->next = conn->tx_head->next;
   15b24:	6813      	ldr	r3, [r2, #0]
   15b26:	603b      	str	r3, [r7, #0]
			conn->tx_head->next = tx;
   15b28:	6017      	str	r7, [r2, #0]
				conn->tx_ctrl_last = tx;
   15b2a:	e9c4 7772 	strd	r7, r7, [r4, #456]	; 0x1c8
   15b2e:	f7ff b898 	b.w	14c62 <ull_conn_llcp+0x5b2>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   15b32:	487a      	ldr	r0, [pc, #488]	; (15d1c <ull_conn_llcp+0x166c>)
   15b34:	f7f7 fad2 	bl	d0dc <mem_acquire>
		if (!tx) {
   15b38:	4601      	mov	r1, r0
   15b3a:	2800      	cmp	r0, #0
   15b3c:	f43f aa64 	beq.w	15008 <ull_conn_llcp+0x958>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   15b40:	7903      	ldrb	r3, [r0, #4]
   15b42:	f043 0303 	orr.w	r3, r3, #3
   15b46:	710b      	strb	r3, [r1, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   15b48:	2011      	movs	r0, #17
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   15b4a:	2203      	movs	r2, #3
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   15b4c:	230f      	movs	r3, #15
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   15b4e:	71c8      	strb	r0, [r1, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   15b50:	714a      	strb	r2, [r1, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   15b52:	720b      	strb	r3, [r1, #8]
		rej->error_code = conn->llcp_conn_param.status;
   15b54:	f894 3187 	ldrb.w	r3, [r4, #391]	; 0x187
   15b58:	724b      	strb	r3, [r1, #9]
	ctrl_tx_pause_enqueue(conn, tx, false);
   15b5a:	4620      	mov	r0, r4
   15b5c:	2200      	movs	r2, #0
   15b5e:	f7fc f983 	bl	11e68 <ctrl_tx_pause_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   15b62:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   15b66:	f884 3185 	strb.w	r3, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   15b6a:	2300      	movs	r3, #0
   15b6c:	603b      	str	r3, [r7, #0]
		return;
   15b6e:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
   15b72:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   15b76:	f7fe bda6 	b.w	146c6 <ull_conn_llcp+0x16>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   15b7a:	4868      	ldr	r0, [pc, #416]	; (15d1c <ull_conn_llcp+0x166c>)
   15b7c:	f7f7 faae 	bl	d0dc <mem_acquire>
	if (!tx) {
   15b80:	4601      	mov	r1, r0
   15b82:	2800      	cmp	r0, #0
   15b84:	f43f aa40 	beq.w	15008 <ull_conn_llcp+0x958>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   15b88:	7903      	ldrb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
   15b8a:	2218      	movs	r2, #24
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   15b8c:	f043 0303 	orr.w	r3, r3, #3
   15b90:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
   15b92:	7142      	strb	r2, [r0, #5]
	rsp->interval_min =
   15b94:	f8b4 2188 	ldrh.w	r2, [r4, #392]	; 0x188
	rsp->interval_max =
   15b98:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
	rsp->latency =
   15b9c:	f8b4 018c 	ldrh.w	r0, [r4, #396]	; 0x18c
	rsp->interval_min =
   15ba0:	810a      	strh	r2, [r1, #8]
	rsp->timeout =
   15ba2:	f8b4 218e 	ldrh.w	r2, [r4, #398]	; 0x18e
	rsp->interval_max =
   15ba6:	814b      	strh	r3, [r1, #10]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
   15ba8:	2310      	movs	r3, #16
	rsp->latency =
   15baa:	8188      	strh	r0, [r1, #12]
	rsp->timeout =
   15bac:	81ca      	strh	r2, [r1, #14]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
   15bae:	71cb      	strb	r3, [r1, #7]
	rsp->preferred_periodicity =
   15bb0:	f894 3190 	ldrb.w	r3, [r4, #400]	; 0x190
   15bb4:	740b      	strb	r3, [r1, #16]
	rsp->reference_conn_event_count =
   15bb6:	f8b4 3192 	ldrh.w	r3, [r4, #402]	; 0x192
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
   15bba:	f8b4 0194 	ldrh.w	r0, [r4, #404]	; 0x194
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
   15bbe:	f8b4 2196 	ldrh.w	r2, [r4, #406]	; 0x196
	rsp->reference_conn_event_count =
   15bc2:	f8a1 3011 	strh.w	r3, [r1, #17]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
   15bc6:	f8b4 3198 	ldrh.w	r3, [r4, #408]	; 0x198
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
   15bca:	f8a1 0013 	strh.w	r0, [r1, #19]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
   15bce:	f8b4 019a 	ldrh.w	r0, [r4, #410]	; 0x19a
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
   15bd2:	f8a1 2015 	strh.w	r2, [r1, #21]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
   15bd6:	f8b4 219c 	ldrh.w	r2, [r4, #412]	; 0x19c
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
   15bda:	f8a1 3017 	strh.w	r3, [r1, #23]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
   15bde:	f8b4 319e 	ldrh.w	r3, [r4, #414]	; 0x19e
   15be2:	f8a1 301d 	strh.w	r3, [r1, #29]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
   15be6:	f8a1 0019 	strh.w	r0, [r1, #25]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
   15bea:	f8a1 201b 	strh.w	r2, [r1, #27]
	ctrl_tx_pause_enqueue(conn, tx, false);
   15bee:	4620      	mov	r0, r4
   15bf0:	4642      	mov	r2, r8
   15bf2:	f7fc f939 	bl	11e68 <ctrl_tx_pause_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   15bf6:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   15bfa:	f884 3185 	strb.w	r3, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   15bfe:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
   15c02:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   15c06:	f8c7 8000 	str.w	r8, [r7]
}
   15c0a:	f7fe bd5c 	b.w	146c6 <ull_conn_llcp+0x16>
			conn->tx_data = conn->tx_data->next;
   15c0e:	6819      	ldr	r1, [r3, #0]
   15c10:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   15c14:	2a00      	cmp	r2, #0
   15c16:	f47f a9e8 	bne.w	14fea <ull_conn_llcp+0x93a>
			tx->next = conn->tx_head->next;
   15c1a:	681a      	ldr	r2, [r3, #0]
   15c1c:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   15c1e:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
   15c20:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   15c24:	f7ff b9e8 	b.w	14ff8 <ull_conn_llcp+0x948>
	    ((pdu_data_tx->llctrl.opcode !=
   15c28:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   15c2a:	2a03      	cmp	r2, #3
   15c2c:	f43f ae70 	beq.w	15910 <ull_conn_llcp+0x1260>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   15c30:	2a0a      	cmp	r2, #10
   15c32:	f47f aeb4 	bne.w	1599e <ull_conn_llcp+0x12ee>
   15c36:	e66b      	b.n	15910 <ull_conn_llcp+0x1260>
				conn->llcp_length.cache.tx_octets = 0;
   15c38:	2200      	movs	r2, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   15c3a:	4663      	mov	r3, ip
   15c3c:	f362 0302 	bfi	r3, r2, #0, #3
				conn->llcp_length.tx_octets =
   15c40:	f8a4 11b2 	strh.w	r1, [r4, #434]	; 0x1b2
				conn->llcp_length.tx_time =
   15c44:	f8b4 11ba 	ldrh.w	r1, [r4, #442]	; 0x1ba
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   15c48:	f884 31ae 	strb.w	r3, [r4, #430]	; 0x1ae
				conn->llcp_length.cache.tx_octets = 0;
   15c4c:	f8a4 21b8 	strh.w	r2, [r4, #440]	; 0x1b8
				conn->llcp_length.tx_time =
   15c50:	f8a4 11b6 	strh.w	r1, [r4, #438]	; 0x1b6
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   15c54:	f7ff bbf9 	b.w	1544a <ull_conn_llcp+0xd9a>
	    ((pdu_data_tx->llctrl.opcode !=
   15c58:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   15c5a:	2a03      	cmp	r2, #3
   15c5c:	f43f aecb 	beq.w	159f6 <ull_conn_llcp+0x1346>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   15c60:	2a0a      	cmp	r2, #10
   15c62:	f47f aeff 	bne.w	15a64 <ull_conn_llcp+0x13b4>
   15c66:	e6c6      	b.n	159f6 <ull_conn_llcp+0x1346>
	    ((pdu_data_tx->llctrl.opcode !=
   15c68:	f89c 3007 	ldrb.w	r3, [ip, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   15c6c:	2b03      	cmp	r3, #3
   15c6e:	f43f ae85 	beq.w	1597c <ull_conn_llcp+0x12cc>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   15c72:	2b0a      	cmp	r3, #10
   15c74:	f47f aea5 	bne.w	159c2 <ull_conn_llcp+0x1312>
   15c78:	e680      	b.n	1597c <ull_conn_llcp+0x12cc>
	    ((pdu_data_tx->llctrl.opcode !=
   15c7a:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   15c7c:	2a03      	cmp	r2, #3
   15c7e:	f43f ae5f 	beq.w	15940 <ull_conn_llcp+0x1290>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   15c82:	2a0a      	cmp	r2, #10
   15c84:	f47f aed2 	bne.w	15a2c <ull_conn_llcp+0x137c>
   15c88:	e65a      	b.n	15940 <ull_conn_llcp+0x1290>
				conn->llcp_conn_param.interval_max;
   15c8a:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
   15c8e:	f7ff ba45 	b.w	1511c <ull_conn_llcp+0xa6c>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   15c92:	791a      	ldrb	r2, [r3, #4]
   15c94:	f002 0203 	and.w	r2, r2, #3
   15c98:	2a03      	cmp	r2, #3
   15c9a:	d048      	beq.n	15d2e <ull_conn_llcp+0x167e>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   15c9c:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   15ca0:	e4c9      	b.n	15636 <ull_conn_llcp+0xf86>
			conn->tx_data = conn->tx_data->next;
   15ca2:	6811      	ldr	r1, [r2, #0]
   15ca4:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   15ca8:	2b00      	cmp	r3, #0
   15caa:	f47f adb2 	bne.w	15812 <ull_conn_llcp+0x1162>
			tx->next = conn->tx_head->next;
   15cae:	6813      	ldr	r3, [r2, #0]
   15cb0:	603b      	str	r3, [r7, #0]
			conn->tx_head->next = tx;
   15cb2:	6017      	str	r7, [r2, #0]
				conn->tx_ctrl_last = tx;
   15cb4:	e9c4 7772 	strd	r7, r7, [r4, #456]	; 0x1c8
   15cb8:	e5b2      	b.n	15820 <ull_conn_llcp+0x1170>
	    ((pdu_data_tx->llctrl.opcode !=
   15cba:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   15cbc:	2a03      	cmp	r2, #3
   15cbe:	f43f aea8 	beq.w	15a12 <ull_conn_llcp+0x1362>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   15cc2:	2a0a      	cmp	r2, #10
   15cc4:	f47f af25 	bne.w	15b12 <ull_conn_llcp+0x1462>
   15cc8:	e6a3      	b.n	15a12 <ull_conn_llcp+0x1362>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   15cca:	7913      	ldrb	r3, [r2, #4]
   15ccc:	f003 0303 	and.w	r3, r3, #3
   15cd0:	2b03      	cmp	r3, #3
   15cd2:	d03c      	beq.n	15d4e <ull_conn_llcp+0x169e>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   15cd4:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   15cd8:	e59b      	b.n	15812 <ull_conn_llcp+0x1162>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   15cda:	7913      	ldrb	r3, [r2, #4]
   15cdc:	f003 0303 	and.w	r3, r3, #3
   15ce0:	2b03      	cmp	r3, #3
   15ce2:	d01d      	beq.n	15d20 <ull_conn_llcp+0x1670>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   15ce4:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   15ce8:	f7fe bfb4 	b.w	14c54 <ull_conn_llcp+0x5a4>
		} else if (conn->llcp_phy.rx & PHY_1M) {
   15cec:	07d1      	lsls	r1, r2, #31
   15cee:	d549      	bpl.n	15d84 <ull_conn_llcp+0x16d4>
			conn->llcp_phy.rx = PHY_1M;
   15cf0:	2201      	movs	r2, #1
   15cf2:	f362 1347 	bfi	r3, r2, #5, #3
   15cf6:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
   15cfa:	e6ce      	b.n	15a9a <ull_conn_llcp+0x13ea>
		} else if (conn->llcp_phy.tx & PHY_1M) {
   15cfc:	07d1      	lsls	r1, r2, #31
			conn->llcp_phy.tx = PHY_1M;
   15cfe:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
		} else if (conn->llcp_phy.tx & PHY_1M) {
   15d02:	d548      	bpl.n	15d96 <ull_conn_llcp+0x16e6>
			conn->llcp_phy.tx = PHY_1M;
   15d04:	2201      	movs	r2, #1
   15d06:	f362 0384 	bfi	r3, r2, #2, #3
   15d0a:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
   15d0e:	e6b8      	b.n	15a82 <ull_conn_llcp+0x13d2>
   15d10:	00024e44 	.word	0x00024e44
   15d14:	00024f10 	.word	0x00024f10
   15d18:	00024904 	.word	0x00024904
   15d1c:	20002330 	.word	0x20002330
	    ((pdu_data_tx->llctrl.opcode !=
   15d20:	79d3      	ldrb	r3, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   15d22:	2b03      	cmp	r3, #3
   15d24:	f43f aefe 	beq.w	15b24 <ull_conn_llcp+0x1474>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   15d28:	2b0a      	cmp	r3, #10
   15d2a:	d1db      	bne.n	15ce4 <ull_conn_llcp+0x1634>
   15d2c:	e6fa      	b.n	15b24 <ull_conn_llcp+0x1474>
	    ((pdu_data_tx->llctrl.opcode !=
   15d2e:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   15d30:	2a03      	cmp	r2, #3
   15d32:	f43f aee2 	beq.w	15afa <ull_conn_llcp+0x144a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   15d36:	2a0a      	cmp	r2, #10
   15d38:	d1b0      	bne.n	15c9c <ull_conn_llcp+0x15ec>
   15d3a:	e6de      	b.n	15afa <ull_conn_llcp+0x144a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   15d3c:	790b      	ldrb	r3, [r1, #4]
   15d3e:	f003 0303 	and.w	r3, r3, #3
   15d42:	2b03      	cmp	r3, #3
   15d44:	d030      	beq.n	15da8 <ull_conn_llcp+0x16f8>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   15d46:	e9c4 1172 	strd	r1, r1, [r4, #456]	; 0x1c8
   15d4a:	f7ff b94e 	b.w	14fea <ull_conn_llcp+0x93a>
	    ((pdu_data_tx->llctrl.opcode !=
   15d4e:	79d3      	ldrb	r3, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   15d50:	2b03      	cmp	r3, #3
   15d52:	d0ac      	beq.n	15cae <ull_conn_llcp+0x15fe>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   15d54:	2b0a      	cmp	r3, #10
   15d56:	d1bd      	bne.n	15cd4 <ull_conn_llcp+0x1624>
   15d58:	e7a9      	b.n	15cae <ull_conn_llcp+0x15fe>
	    ((pdu_data_tx->llctrl.opcode !=
   15d5a:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   15d5c:	2a03      	cmp	r2, #3
   15d5e:	f43f af5c 	beq.w	15c1a <ull_conn_llcp+0x156a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   15d62:	2a0a      	cmp	r2, #10
   15d64:	f47f acc7 	bne.w	156f6 <ull_conn_llcp+0x1046>
   15d68:	e757      	b.n	15c1a <ull_conn_llcp+0x156a>
			conn->tx_data = conn->tx_data->next;
   15d6a:	680a      	ldr	r2, [r1, #0]
   15d6c:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   15d70:	2b00      	cmp	r3, #0
   15d72:	f47f a93a 	bne.w	14fea <ull_conn_llcp+0x93a>
			tx->next = conn->tx_head->next;
   15d76:	680b      	ldr	r3, [r1, #0]
   15d78:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   15d7a:	6008      	str	r0, [r1, #0]
				conn->tx_ctrl_last = tx;
   15d7c:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   15d80:	f7ff b93a 	b.w	14ff8 <ull_conn_llcp+0x948>
		} else if (conn->llcp_phy.rx & PHY_CODED) {
   15d84:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = PHY_CODED;
   15d88:	bf18      	it	ne
   15d8a:	2204      	movne	r2, #4
			conn->llcp_phy.rx = 0U;
   15d8c:	f362 1347 	bfi	r3, r2, #5, #3
   15d90:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
   15d94:	e681      	b.n	15a9a <ull_conn_llcp+0x13ea>
		} else if (conn->llcp_phy.tx & PHY_CODED) {
   15d96:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.tx = PHY_CODED;
   15d9a:	bf18      	it	ne
   15d9c:	2204      	movne	r2, #4
			conn->llcp_phy.tx = 0U;
   15d9e:	f362 0384 	bfi	r3, r2, #2, #3
   15da2:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
   15da6:	e66c      	b.n	15a82 <ull_conn_llcp+0x13d2>
	    ((pdu_data_tx->llctrl.opcode !=
   15da8:	79cb      	ldrb	r3, [r1, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   15daa:	2b03      	cmp	r3, #3
   15dac:	d0e3      	beq.n	15d76 <ull_conn_llcp+0x16c6>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   15dae:	2b0a      	cmp	r3, #10
   15db0:	d1c9      	bne.n	15d46 <ull_conn_llcp+0x1696>
   15db2:	e7e0      	b.n	15d76 <ull_conn_llcp+0x16c6>
		LL_ASSERT(0);
   15db4:	f640 6385 	movw	r3, #3717	; 0xe85
   15db8:	e4a2      	b.n	15700 <ull_conn_llcp+0x1050>
		LL_ASSERT(0);
   15dba:	4a11      	ldr	r2, [pc, #68]	; (15e00 <ull_conn_llcp+0x1750>)
   15dbc:	4911      	ldr	r1, [pc, #68]	; (15e04 <ull_conn_llcp+0x1754>)
   15dbe:	4812      	ldr	r0, [pc, #72]	; (15e08 <ull_conn_llcp+0x1758>)
   15dc0:	f640 5389 	movw	r3, #3465	; 0xd89
   15dc4:	f008 fdaa 	bl	1e91c <printk>
   15dc8:	4040      	eors	r0, r0
   15dca:	f380 8811 	msr	BASEPRI, r0
   15dce:	f04f 0003 	mov.w	r0, #3
   15dd2:	df02      	svc	2
		break;
   15dd4:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   15dd8:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
   15ddc:	f7fe bc73 	b.w	146c6 <ull_conn_llcp+0x16>
		LL_ASSERT(0);
   15de0:	4a07      	ldr	r2, [pc, #28]	; (15e00 <ull_conn_llcp+0x1750>)
   15de2:	4908      	ldr	r1, [pc, #32]	; (15e04 <ull_conn_llcp+0x1754>)
   15de4:	4808      	ldr	r0, [pc, #32]	; (15e08 <ull_conn_llcp+0x1758>)
   15de6:	f640 6385 	movw	r3, #3717	; 0xe85
   15dea:	f008 fd97 	bl	1e91c <printk>
   15dee:	4040      	eors	r0, r0
   15df0:	f380 8811 	msr	BASEPRI, r0
   15df4:	f04f 0003 	mov.w	r0, #3
   15df8:	df02      	svc	2
		break;
   15dfa:	f7fe bccc 	b.w	14796 <ull_conn_llcp+0xe6>
   15dfe:	bf00      	nop
   15e00:	00024e44 	.word	0x00024e44
   15e04:	00024974 	.word	0x00024974
   15e08:	00024904 	.word	0x00024904

00015e0c <ull_conn_tx_demux>:
{
   15e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15e10:	4f24      	ldr	r7, [pc, #144]	; (15ea4 <ull_conn_tx_demux+0x98>)
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15e12:	4e25      	ldr	r6, [pc, #148]	; (15ea8 <ull_conn_tx_demux+0x9c>)
   15e14:	78fa      	ldrb	r2, [r7, #3]
{
   15e16:	4604      	mov	r4, r0
	return (void *)(fifo + first * size);
   15e18:	1d3d      	adds	r5, r7, #4
   15e1a:	e021      	b.n	15e60 <ull_conn_tx_demux+0x54>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15e1c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   15e20:	4630      	mov	r0, r6
   15e22:	f7f7 f98b 	bl	d13c <mem_get>
	if (conn->lll.handle != handle) {
   15e26:	8d02      	ldrh	r2, [r0, #40]	; 0x28
   15e28:	bb32      	cbnz	r2, 15e78 <ull_conn_tx_demux+0x6c>
			struct node_tx *tx = lll_tx->node;
   15e2a:	f8d8 3004 	ldr.w	r3, [r8, #4]
			if (!conn->tx_data) {
   15e2e:	f8d0 11d0 	ldr.w	r1, [r0, #464]	; 0x1d0
			tx->next = NULL;
   15e32:	601a      	str	r2, [r3, #0]
			if (!conn->tx_data) {
   15e34:	b369      	cbz	r1, 15e92 <ull_conn_tx_demux+0x86>
			if (conn->tx_data_last) {
   15e36:	f8d0 21d4 	ldr.w	r2, [r0, #468]	; 0x1d4
   15e3a:	b102      	cbz	r2, 15e3e <ull_conn_tx_demux+0x32>
				conn->tx_data_last->next = tx;
   15e3c:	6013      	str	r3, [r2, #0]
			conn->tx_data_last = tx;
   15e3e:	f8c0 31d4 	str.w	r3, [r0, #468]	; 0x1d4
		MFIFO_DEQUEUE(conn_tx);
   15e42:	78fa      	ldrb	r2, [r7, #3]
	uint8_t _first = *first; /* Copy read-index */
   15e44:	78bb      	ldrb	r3, [r7, #2]
   15e46:	7879      	ldrb	r1, [r7, #1]
	if (_first == last) {
   15e48:	429a      	cmp	r2, r3
   15e4a:	d005      	beq.n	15e58 <ull_conn_tx_demux+0x4c>
	_first += 1U;
   15e4c:	3301      	adds	r3, #1
   15e4e:	b2db      	uxtb	r3, r3
		_first = 0U;
   15e50:	4299      	cmp	r1, r3
   15e52:	bf08      	it	eq
   15e54:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   15e56:	70bb      	strb	r3, [r7, #2]
	} while (--count);
   15e58:	3c01      	subs	r4, #1
   15e5a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   15e5e:	d016      	beq.n	15e8e <ull_conn_tx_demux+0x82>
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   15e60:	78bb      	ldrb	r3, [r7, #2]
   15e62:	7839      	ldrb	r1, [r7, #0]
	if (first == last) {
   15e64:	4293      	cmp	r3, r2
   15e66:	d012      	beq.n	15e8e <ull_conn_tx_demux+0x82>
	return (void *)(fifo + first * size);
   15e68:	fb13 f301 	smulbb	r3, r3, r1
		if (!lll_tx) {
   15e6c:	eb15 0803 	adds.w	r8, r5, r3
   15e70:	d00d      	beq.n	15e8e <ull_conn_tx_demux+0x82>
	if (handle >= CONFIG_BT_MAX_CONN) {
   15e72:	5aea      	ldrh	r2, [r5, r3]
   15e74:	2a00      	cmp	r2, #0
   15e76:	d0d1      	beq.n	15e1c <ull_conn_tx_demux+0x10>
			struct node_tx *tx = lll_tx->node;
   15e78:	f8d8 1004 	ldr.w	r1, [r8, #4]
			p->ll_id = PDU_DATA_LLID_RESV;
   15e7c:	790b      	ldrb	r3, [r1, #4]
   15e7e:	f36f 0301 	bfc	r3, #0, #2
   15e82:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(0xFFFF, tx);
   15e84:	f64f 70ff 	movw	r0, #65535	; 0xffff
   15e88:	f7fb f884 	bl	10f94 <ll_tx_ack_put>
   15e8c:	e7d9      	b.n	15e42 <ull_conn_tx_demux+0x36>
}
   15e8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (!conn->tx_head) {
   15e92:	f8d0 21c4 	ldr.w	r2, [r0, #452]	; 0x1c4
				conn->tx_data = tx;
   15e96:	f8c0 31d0 	str.w	r3, [r0, #464]	; 0x1d0
				if (!conn->tx_head) {
   15e9a:	2a00      	cmp	r2, #0
   15e9c:	d1cb      	bne.n	15e36 <ull_conn_tx_demux+0x2a>
					conn->tx_head = tx;
   15e9e:	f8c0 31c4 	str.w	r3, [r0, #452]	; 0x1c4
			if (conn->tx_data_last) {
   15ea2:	e7cc      	b.n	15e3e <ull_conn_tx_demux+0x32>
   15ea4:	200004ec 	.word	0x200004ec
   15ea8:	200012a8 	.word	0x200012a8

00015eac <conn_cleanup>:
	if (conn == conn_upd_curr) {
   15eac:	4b3b      	ldr	r3, [pc, #236]	; (15f9c <conn_cleanup+0xf0>)
{
   15eae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (conn == conn_upd_curr) {
   15eb2:	681a      	ldr	r2, [r3, #0]
	rx = conn->llcp_rx;
   15eb4:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
	*((uint8_t *)rx->pdu) = reason;
   15eb8:	f880 1160 	strb.w	r1, [r0, #352]	; 0x160
	if (conn == conn_upd_curr) {
   15ebc:	4282      	cmp	r2, r0
	conn_upd_curr = NULL;
   15ebe:	bf04      	itt	eq
   15ec0:	2200      	moveq	r2, #0
   15ec2:	601a      	streq	r2, [r3, #0]
	rx->hdr.handle = conn->lll.handle;
   15ec4:	8d02      	ldrh	r2, [r0, #40]	; 0x28
   15ec6:	f8a0 214a 	strh.w	r2, [r0, #330]	; 0x14a
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   15eca:	2315      	movs	r3, #21
{
   15ecc:	b083      	sub	sp, #12
   15ece:	4606      	mov	r6, r0
	struct lll_conn *lll = &conn->lll;
   15ed0:	f100 0b1c 	add.w	fp, r0, #28
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   15ed4:	f880 3148 	strb.w	r3, [r0, #328]	; 0x148
	while (rx) {
   15ed8:	b144      	cbz	r4, 15eec <conn_cleanup+0x40>
		hdr->type = NODE_RX_TYPE_RELEASE;
   15eda:	2501      	movs	r5, #1
		rx = hdr->link->mem;
   15edc:	6820      	ldr	r0, [r4, #0]
		hdr = &rx->hdr;
   15ede:	4621      	mov	r1, r4
		rx = hdr->link->mem;
   15ee0:	6844      	ldr	r4, [r0, #4]
		hdr->type = NODE_RX_TYPE_RELEASE;
   15ee2:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
   15ee4:	f7fb f810 	bl	10f08 <ll_rx_put>
	while (rx) {
   15ee8:	2c00      	cmp	r4, #0
   15eea:	d1f7      	bne.n	15edc <conn_cleanup+0x30>
	while (conn->tx_head) {
   15eec:	f8d6 11c4 	ldr.w	r1, [r6, #452]	; 0x1c4
   15ef0:	b381      	cbz	r1, 15f54 <conn_cleanup+0xa8>
		link = mem_acquire(&mem_link_tx.free);
   15ef2:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 15fb0 <conn_cleanup+0x104>
		LL_ASSERT(link);
   15ef6:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 15fa8 <conn_cleanup+0xfc>
   15efa:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 15fb4 <conn_cleanup+0x108>
   15efe:	f106 0768 	add.w	r7, r6, #104	; 0x68
   15f02:	e007      	b.n	15f14 <conn_cleanup+0x68>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   15f04:	4629      	mov	r1, r5
   15f06:	4620      	mov	r0, r4
   15f08:	463a      	mov	r2, r7
   15f0a:	f7f7 f949 	bl	d1a0 <memq_enqueue>
	while (conn->tx_head) {
   15f0e:	f8d6 11c4 	ldr.w	r1, [r6, #452]	; 0x1c4
   15f12:	b1f9      	cbz	r1, 15f54 <conn_cleanup+0xa8>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   15f14:	4630      	mov	r0, r6
   15f16:	f7fb ff2b 	bl	11d70 <tx_ull_dequeue>
   15f1a:	4605      	mov	r5, r0
		link = mem_acquire(&mem_link_tx.free);
   15f1c:	4640      	mov	r0, r8
   15f1e:	f7f7 f8dd 	bl	d0dc <mem_acquire>
		LL_ASSERT(link);
   15f22:	4604      	mov	r4, r0
   15f24:	2800      	cmp	r0, #0
   15f26:	d1ed      	bne.n	15f04 <conn_cleanup+0x58>
   15f28:	481d      	ldr	r0, [pc, #116]	; (15fa0 <conn_cleanup+0xf4>)
   15f2a:	f240 739a 	movw	r3, #1946	; 0x79a
   15f2e:	4652      	mov	r2, sl
   15f30:	4649      	mov	r1, r9
   15f32:	f008 fcf3 	bl	1e91c <printk>
   15f36:	4040      	eors	r0, r0
   15f38:	f380 8811 	msr	BASEPRI, r0
   15f3c:	f04f 0003 	mov.w	r0, #3
   15f40:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   15f42:	4629      	mov	r1, r5
   15f44:	4620      	mov	r0, r4
   15f46:	463a      	mov	r2, r7
   15f48:	f7f7 f92a 	bl	d1a0 <memq_enqueue>
	while (conn->tx_head) {
   15f4c:	f8d6 11c4 	ldr.w	r1, [r6, #452]	; 0x1c4
   15f50:	2900      	cmp	r1, #0
   15f52:	d1df      	bne.n	15f14 <conn_cleanup+0x68>
				    TICKER_ID_CONN_BASE + lll->handle,
   15f54:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   15f58:	4b12      	ldr	r3, [pc, #72]	; (15fa4 <conn_cleanup+0xf8>)
   15f5a:	f8cd b000 	str.w	fp, [sp]
				    TICKER_ID_CONN_BASE + lll->handle,
   15f5e:	3203      	adds	r2, #3
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   15f60:	b2d2      	uxtb	r2, r2
   15f62:	2101      	movs	r1, #1
   15f64:	2000      	movs	r0, #0
   15f66:	f7f8 fc95 	bl	e894 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   15f6a:	f030 0302 	bics.w	r3, r0, #2
   15f6e:	d00c      	beq.n	15f8a <conn_cleanup+0xde>
   15f70:	4a0d      	ldr	r2, [pc, #52]	; (15fa8 <conn_cleanup+0xfc>)
   15f72:	490e      	ldr	r1, [pc, #56]	; (15fac <conn_cleanup+0x100>)
   15f74:	480a      	ldr	r0, [pc, #40]	; (15fa0 <conn_cleanup+0xf4>)
   15f76:	f44f 63ec 	mov.w	r3, #1888	; 0x760
   15f7a:	f008 fccf 	bl	1e91c <printk>
   15f7e:	4040      	eors	r0, r0
   15f80:	f380 8811 	msr	BASEPRI, r0
   15f84:	f04f 0003 	mov.w	r0, #3
   15f88:	df02      	svc	2
	lll->handle = 0xFFFF;
   15f8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
   15f8e:	20ff      	movs	r0, #255	; 0xff
	lll->handle = 0xFFFF;
   15f90:	8533      	strh	r3, [r6, #40]	; 0x28
}
   15f92:	b003      	add	sp, #12
   15f94:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ull_conn_tx_demux(UINT8_MAX);
   15f98:	f7ff bf38 	b.w	15e0c <ull_conn_tx_demux>
   15f9c:	200022ac 	.word	0x200022ac
   15fa0:	00024904 	.word	0x00024904
   15fa4:	00012029 	.word	0x00012029
   15fa8:	00024e44 	.word	0x00024e44
   15fac:	00024f24 	.word	0x00024f24
   15fb0:	200023e4 	.word	0x200023e4
   15fb4:	00024e9c 	.word	0x00024e9c

00015fb8 <ull_conn_done>:
{
   15fb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct lll_conn *lll = (void *)HDR_ULL2LLL(done->param);
   15fbc:	69c5      	ldr	r5, [r0, #28]
	if (unlikely(lll->handle == 0xFFFF)) {
   15fbe:	8b2a      	ldrh	r2, [r5, #24]
	struct ll_conn *conn = (void *)HDR_LLL2EVT(lll);
   15fc0:	68ec      	ldr	r4, [r5, #12]
	if (unlikely(lll->handle == 0xFFFF)) {
   15fc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   15fc6:	429a      	cmp	r2, r3
{
   15fc8:	b08b      	sub	sp, #44	; 0x2c
	if (unlikely(lll->handle == 0xFFFF)) {
   15fca:	f000 8092 	beq.w	160f2 <ull_conn_done+0x13a>
	switch (done->extra.mic_state) {
   15fce:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   15fd2:	2b01      	cmp	r3, #1
   15fd4:	4606      	mov	r6, r0
   15fd6:	f000 80dd 	beq.w	16194 <ull_conn_done+0x1dc>
   15fda:	2b02      	cmp	r3, #2
   15fdc:	f000 80d0 	beq.w	16180 <ull_conn_done+0x1c8>
   15fe0:	2b00      	cmp	r3, #0
   15fe2:	f000 80b3 	beq.w	1614c <ull_conn_done+0x194>
	reason_peer = conn->llcp_terminate.reason_peer;
   15fe6:	f894 7143 	ldrb.w	r7, [r4, #323]	; 0x143
	if (reason_peer && (
   15fea:	2f00      	cmp	r7, #0
   15fec:	f040 80cb 	bne.w	16186 <ull_conn_done+0x1ce>
	latency_event = lll->latency_event;
   15ff0:	f8b5 9020 	ldrh.w	r9, [r5, #32]
	if (done->extra.trx_cnt) {
   15ff4:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
	ticks_drift_plus = 0U;
   15ff6:	9709      	str	r7, [sp, #36]	; 0x24
	elapsed_event = latency_event + 1;
   15ff8:	f109 0801 	add.w	r8, r9, #1
	ticks_drift_minus = 0U;
   15ffc:	9708      	str	r7, [sp, #32]
	elapsed_event = latency_event + 1;
   15ffe:	fa1f f888 	uxth.w	r8, r8
	if (done->extra.trx_cnt) {
   16002:	2b00      	cmp	r3, #0
   16004:	d078      	beq.n	160f8 <ull_conn_done+0x140>
		} else if (lll->role) {
   16006:	f995 3029 	ldrsb.w	r3, [r5, #41]	; 0x29
   1600a:	2b00      	cmp	r3, #0
   1600c:	f2c0 8108 	blt.w	16220 <ull_conn_done+0x268>
	if (done->extra.crc_valid) {
   16010:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
		conn->connect_expire = 0U;
   16014:	2200      	movs	r2, #0
   16016:	f8a4 20c0 	strh.w	r2, [r4, #192]	; 0xc0
	if (done->extra.crc_valid) {
   1601a:	2b00      	cmp	r3, #0
   1601c:	f000 80c0 	beq.w	161a0 <ull_conn_done+0x1e8>
		conn->supervision_expire = 0U;
   16020:	2300      	movs	r3, #0
   16022:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
	if (conn->procedure_expire != 0U) {
   16026:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   1602a:	b133      	cbz	r3, 1603a <ull_conn_done+0x82>
		if (conn->procedure_expire > elapsed_event) {
   1602c:	4543      	cmp	r3, r8
   1602e:	f240 810d 	bls.w	1624c <ull_conn_done+0x294>
			conn->procedure_expire -= elapsed_event;
   16032:	eba3 0308 	sub.w	r3, r3, r8
   16036:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (conn->apto_expire != 0U) {
   1603a:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
   1603e:	b133      	cbz	r3, 1604e <ull_conn_done+0x96>
		if (conn->apto_expire > elapsed_event) {
   16040:	4543      	cmp	r3, r8
   16042:	f240 80d5 	bls.w	161f0 <ull_conn_done+0x238>
			conn->apto_expire -= elapsed_event;
   16046:	eba3 0308 	sub.w	r3, r3, r8
   1604a:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
	if (conn->appto_expire != 0U) {
   1604e:	f8b4 20cc 	ldrh.w	r2, [r4, #204]	; 0xcc
   16052:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   16056:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
   1605a:	b15a      	cbz	r2, 16074 <ull_conn_done+0xbc>
		if (conn->appto_expire > elapsed_event) {
   1605c:	4542      	cmp	r2, r8
   1605e:	f200 80ab 	bhi.w	161b8 <ull_conn_done+0x200>
			if ((conn->procedure_expire == 0U) &&
   16062:	f8b4 20c8 	ldrh.w	r2, [r4, #200]	; 0xc8
			conn->appto_expire = 0U;
   16066:	2000      	movs	r0, #0
   16068:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
			if ((conn->procedure_expire == 0U) &&
   1606c:	b912      	cbnz	r2, 16074 <ull_conn_done+0xbc>
   1606e:	4299      	cmp	r1, r3
   16070:	f000 8103 	beq.w	1627a <ull_conn_done+0x2c2>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   16074:	1a5b      	subs	r3, r3, r1
   16076:	f003 0303 	and.w	r3, r3, #3
   1607a:	2b02      	cmp	r3, #2
   1607c:	f000 80a6 	beq.w	161cc <ull_conn_done+0x214>
	      (conn->llcp_type == LLCP_CHAN_MAP))) ||
   16080:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
   16084:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
   16088:	429a      	cmp	r2, r3
   1608a:	f000 80c7 	beq.w	1621c <ull_conn_done+0x264>
		lll->latency_event = 0U;
   1608e:	2200      	movs	r2, #0
   16090:	842a      	strh	r2, [r5, #32]
	if ((force) || (latency_event != lll->latency_event)) {
   16092:	e9dd 4308 	ldrd	r4, r3, [sp, #32]
   16096:	b917      	cbnz	r7, 1609e <ull_conn_done+0xe6>
   16098:	454a      	cmp	r2, r9
   1609a:	f000 80a4 	beq.w	161e6 <ull_conn_done+0x22e>
		lazy = lll->latency_event + 1U;
   1609e:	3201      	adds	r2, #1
   160a0:	b291      	uxth	r1, r2
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   160a2:	b913      	cbnz	r3, 160aa <ull_conn_done+0xf2>
   160a4:	2c00      	cmp	r4, #0
   160a6:	f000 8084 	beq.w	161b2 <ull_conn_done+0x1fa>
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   160aa:	7e2a      	ldrb	r2, [r5, #24]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   160ac:	4e83      	ldr	r6, [pc, #524]	; (162bc <ull_conn_done+0x304>)
		struct ll_conn *conn = lll->hdr.parent;
   160ae:	68ed      	ldr	r5, [r5, #12]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   160b0:	9506      	str	r5, [sp, #24]
   160b2:	2000      	movs	r0, #0
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   160b4:	3203      	adds	r2, #3
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   160b6:	9103      	str	r1, [sp, #12]
   160b8:	e9cd 0001 	strd	r0, r0, [sp, #4]
   160bc:	b2d2      	uxtb	r2, r2
   160be:	9704      	str	r7, [sp, #16]
   160c0:	9400      	str	r4, [sp, #0]
   160c2:	9605      	str	r6, [sp, #20]
   160c4:	2101      	movs	r1, #1
   160c6:	f7f8 fbcd 	bl	e864 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   160ca:	f030 0302 	bics.w	r3, r0, #2
   160ce:	d010      	beq.n	160f2 <ull_conn_done+0x13a>
   160d0:	f7fa ffd0 	bl	11074 <ull_disable_mark_get>
   160d4:	4285      	cmp	r5, r0
   160d6:	d00c      	beq.n	160f2 <ull_conn_done+0x13a>
   160d8:	4a79      	ldr	r2, [pc, #484]	; (162c0 <ull_conn_done+0x308>)
   160da:	497a      	ldr	r1, [pc, #488]	; (162c4 <ull_conn_done+0x30c>)
   160dc:	487a      	ldr	r0, [pc, #488]	; (162c8 <ull_conn_done+0x310>)
   160de:	f240 53af 	movw	r3, #1455	; 0x5af
   160e2:	f008 fc1b 	bl	1e91c <printk>
   160e6:	4040      	eors	r0, r0
   160e8:	f380 8811 	msr	BASEPRI, r0
   160ec:	f04f 0003 	mov.w	r0, #3
   160f0:	df02      	svc	2
}
   160f2:	b00b      	add	sp, #44	; 0x2c
   160f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (done->extra.crc_valid) {
   160f8:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
   160fc:	2b00      	cmp	r3, #0
   160fe:	d18f      	bne.n	16020 <ull_conn_done+0x68>
	else if (conn->connect_expire) {
   16100:	f8b4 30c0 	ldrh.w	r3, [r4, #192]	; 0xc0
   16104:	2b00      	cmp	r3, #0
   16106:	d04b      	beq.n	161a0 <ull_conn_done+0x1e8>
		if (conn->connect_expire > elapsed_event) {
   16108:	4543      	cmp	r3, r8
   1610a:	f240 80bd 	bls.w	16288 <ull_conn_done+0x2d0>
			conn->connect_expire -= elapsed_event;
   1610e:	eba3 0308 	sub.w	r3, r3, r8
   16112:	f8a4 30c0 	strh.w	r3, [r4, #192]	; 0xc0
   16116:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
	if (conn->supervision_expire) {
   1611a:	2b00      	cmp	r3, #0
   1611c:	d083      	beq.n	16026 <ull_conn_done+0x6e>
		if (conn->supervision_expire > elapsed_event) {
   1611e:	4598      	cmp	r8, r3
   16120:	f080 808f 	bcs.w	16242 <ull_conn_done+0x28a>
			conn->supervision_expire -= elapsed_event;
   16124:	eba3 0308 	sub.w	r3, r3, r8
   16128:	b29b      	uxth	r3, r3
			lll->latency_event = 0U;
   1612a:	2200      	movs	r2, #0
			if (conn->supervision_expire <= 6U) {
   1612c:	2b06      	cmp	r3, #6
			conn->supervision_expire -= elapsed_event;
   1612e:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
			lll->latency_event = 0U;
   16132:	842a      	strh	r2, [r5, #32]
			if (conn->supervision_expire <= 6U) {
   16134:	d908      	bls.n	16148 <ull_conn_done+0x190>
			else if (lll->role) {
   16136:	f995 3029 	ldrsb.w	r3, [r5, #41]	; 0x29
   1613a:	4293      	cmp	r3, r2
   1613c:	f6bf af73 	bge.w	16026 <ull_conn_done+0x6e>
				if (latency_event) {
   16140:	f1b9 0f00 	cmp.w	r9, #0
   16144:	f000 808b 	beq.w	1625e <ull_conn_done+0x2a6>
				force = 1U;
   16148:	2701      	movs	r7, #1
   1614a:	e76c      	b.n	16026 <ull_conn_done+0x6e>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   1614c:	f895 306a 	ldrb.w	r3, [r5, #106]	; 0x6a
   16150:	0719      	lsls	r1, r3, #28
   16152:	d542      	bpl.n	161da <ull_conn_done+0x222>
					    (lll->latency + 6)) ?
   16154:	8bab      	ldrh	r3, [r5, #28]
			appto_reload_new = (conn->apto_reload >
   16156:	f8b4 20ce 	ldrh.w	r2, [r4, #206]	; 0xce
					    (lll->latency + 6)) ?
   1615a:	1d99      	adds	r1, r3, #6
			appto_reload_new = (conn->apto_reload >
   1615c:	428a      	cmp	r2, r1
					   (conn->apto_reload -
   1615e:	bfc4      	itt	gt
   16160:	1ad3      	subgt	r3, r2, r3
   16162:	3b06      	subgt	r3, #6
			if (conn->appto_reload != appto_reload_new) {
   16164:	f8b4 10ca 	ldrh.w	r1, [r4, #202]	; 0xca
			appto_reload_new = (conn->apto_reload >
   16168:	bfcc      	ite	gt
   1616a:	b29b      	uxthgt	r3, r3
   1616c:	4613      	movle	r3, r2
			if (conn->appto_reload != appto_reload_new) {
   1616e:	4299      	cmp	r1, r3
   16170:	d061      	beq.n	16236 <ull_conn_done+0x27e>
				conn->appto_reload = appto_reload_new;
   16172:	f8a4 30ca 	strh.w	r3, [r4, #202]	; 0xca
				conn->appto_expire = conn->appto_reload;
   16176:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
				conn->apto_expire = conn->apto_reload;
   1617a:	f8a4 20d0 	strh.w	r2, [r4, #208]	; 0xd0
   1617e:	e732      	b.n	15fe6 <ull_conn_done+0x2e>
		conn->llcp_terminate.reason_peer =
   16180:	273d      	movs	r7, #61	; 0x3d
   16182:	f884 7143 	strb.w	r7, [r4, #323]	; 0x143
		conn_cleanup(conn, reason_peer);
   16186:	4639      	mov	r1, r7
   16188:	4620      	mov	r0, r4
   1618a:	f7ff fe8f 	bl	15eac <conn_cleanup>
}
   1618e:	b00b      	add	sp, #44	; 0x2c
   16190:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		conn->appto_expire = conn->apto_expire = 0U;
   16194:	2300      	movs	r3, #0
   16196:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
   1619a:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
		break;
   1619e:	e722      	b.n	15fe6 <ull_conn_done+0x2e>
		if (!conn->supervision_expire) {
   161a0:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   161a4:	2b00      	cmp	r3, #0
   161a6:	d1ba      	bne.n	1611e <ull_conn_done+0x166>
			conn->supervision_expire = conn->supervision_reload;
   161a8:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
   161ac:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
   161b0:	e7b3      	b.n	1611a <ull_conn_done+0x162>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   161b2:	b371      	cbz	r1, 16212 <ull_conn_done+0x25a>
   161b4:	4623      	mov	r3, r4
   161b6:	e778      	b.n	160aa <ull_conn_done+0xf2>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   161b8:	1a5b      	subs	r3, r3, r1
   161ba:	f003 0303 	and.w	r3, r3, #3
			conn->appto_expire -= elapsed_event;
   161be:	eba2 0808 	sub.w	r8, r2, r8
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   161c2:	2b02      	cmp	r3, #2
			conn->appto_expire -= elapsed_event;
   161c4:	f8a4 80cc 	strh.w	r8, [r4, #204]	; 0xcc
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   161c8:	f47f af5a 	bne.w	16080 <ull_conn_done+0xc8>
   161cc:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   161d0:	3b01      	subs	r3, #1
   161d2:	2b01      	cmp	r3, #1
   161d4:	f63f af54 	bhi.w	16080 <ull_conn_done+0xc8>
   161d8:	e759      	b.n	1608e <ull_conn_done+0xd6>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   161da:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   161de:	07da      	lsls	r2, r3, #31
   161e0:	f57f af01 	bpl.w	15fe6 <ull_conn_done+0x2e>
   161e4:	e7b6      	b.n	16154 <ull_conn_done+0x19c>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   161e6:	b90b      	cbnz	r3, 161ec <ull_conn_done+0x234>
   161e8:	2c00      	cmp	r4, #0
   161ea:	d082      	beq.n	160f2 <ull_conn_done+0x13a>
	lazy = 0U;
   161ec:	4639      	mov	r1, r7
   161ee:	e75c      	b.n	160aa <ull_conn_done+0xf2>
			rx = ll_pdu_rx_alloc();
   161f0:	f7fa feb8 	bl	10f64 <ll_pdu_rx_alloc>
			if (rx) {
   161f4:	4601      	mov	r1, r0
   161f6:	b370      	cbz	r0, 16256 <ull_conn_done+0x29e>
				conn->apto_expire = 0U;
   161f8:	2300      	movs	r3, #0
				rx->handle = lll->handle;
   161fa:	8b2a      	ldrh	r2, [r5, #24]
				conn->apto_expire = 0U;
   161fc:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
				rx->type = NODE_RX_TYPE_APTO;
   16200:	2318      	movs	r3, #24
				rx->handle = lll->handle;
   16202:	80c2      	strh	r2, [r0, #6]
				rx->type = NODE_RX_TYPE_APTO;
   16204:	7103      	strb	r3, [r0, #4]
				ll_rx_put(rx->link, rx);
   16206:	6800      	ldr	r0, [r0, #0]
   16208:	f7fa fe7e 	bl	10f08 <ll_rx_put>
				ll_rx_sched();
   1620c:	f7fa fe86 	bl	10f1c <ll_rx_sched>
   16210:	e71d      	b.n	1604e <ull_conn_done+0x96>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   16212:	2f00      	cmp	r7, #0
   16214:	f43f af6d 	beq.w	160f2 <ull_conn_done+0x13a>
   16218:	4623      	mov	r3, r4
   1621a:	e746      	b.n	160aa <ull_conn_done+0xf2>
   1621c:	8c2a      	ldrh	r2, [r5, #32]
   1621e:	e738      	b.n	16092 <ull_conn_done+0xda>
			ull_drift_ticks_get(done, &ticks_drift_plus,
   16220:	aa08      	add	r2, sp, #32
   16222:	a909      	add	r1, sp, #36	; 0x24
   16224:	4630      	mov	r0, r6
   16226:	f7ea ffff 	bl	1228 <ull_drift_ticks_get>
			if (!conn->tx_head) {
   1622a:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   1622e:	b383      	cbz	r3, 16292 <ull_conn_done+0x2da>
				lll->latency_event = 0;
   16230:	2300      	movs	r3, #0
   16232:	842b      	strh	r3, [r5, #32]
   16234:	e6ec      	b.n	16010 <ull_conn_done+0x58>
			if (conn->apto_expire == 0U) {
   16236:	f8b4 10d0 	ldrh.w	r1, [r4, #208]	; 0xd0
   1623a:	2900      	cmp	r1, #0
   1623c:	f47f aed3 	bne.w	15fe6 <ull_conn_done+0x2e>
   16240:	e799      	b.n	16176 <ull_conn_done+0x1be>
			conn_cleanup(conn, BT_HCI_ERR_CONN_TIMEOUT);
   16242:	4620      	mov	r0, r4
   16244:	2108      	movs	r1, #8
   16246:	f7ff fe31 	bl	15eac <conn_cleanup>
			return;
   1624a:	e752      	b.n	160f2 <ull_conn_done+0x13a>
			conn_cleanup(conn, BT_HCI_ERR_LL_RESP_TIMEOUT);
   1624c:	4620      	mov	r0, r4
   1624e:	2122      	movs	r1, #34	; 0x22
   16250:	f7ff fe2c 	bl	15eac <conn_cleanup>
			return;
   16254:	e74d      	b.n	160f2 <ull_conn_done+0x13a>
				conn->apto_expire = 1U;
   16256:	2301      	movs	r3, #1
   16258:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
   1625c:	e6f7      	b.n	1604e <ull_conn_done+0x96>
					force = conn->slave.force & 0x01;
   1625e:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
					conn->slave.force >>= 1U;
   16262:	085a      	lsrs	r2, r3, #1
					if (force) {
   16264:	f013 0301 	ands.w	r3, r3, #1
						conn->slave.force |= BIT(31);
   16268:	bf17      	itett	ne
   1626a:	f042 4200 	orrne.w	r2, r2, #2147483648	; 0x80000000
					conn->slave.force >>= 1U;
   1626e:	f8c4 20dc 	streq.w	r2, [r4, #220]	; 0xdc
						conn->slave.force |= BIT(31);
   16272:	f8c4 20dc 	strne.w	r2, [r4, #220]	; 0xdc
					force = conn->slave.force & 0x01;
   16276:	461f      	movne	r7, r3
   16278:	e6d5      	b.n	16026 <ull_conn_done+0x6e>
				conn->llcp_ack -= 2U;
   1627a:	1e8b      	subs	r3, r1, #2
				conn->llcp_type = LLCP_PING;
   1627c:	2205      	movs	r2, #5
				conn->llcp_ack -= 2U;
   1627e:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
				conn->llcp_type = LLCP_PING;
   16282:	f884 20e6 	strb.w	r2, [r4, #230]	; 0xe6
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   16286:	e6fb      	b.n	16080 <ull_conn_done+0xc8>
			conn_cleanup(conn, BT_HCI_ERR_CONN_FAIL_TO_ESTAB);
   16288:	4620      	mov	r0, r4
   1628a:	213e      	movs	r1, #62	; 0x3e
   1628c:	f7ff fe0e 	bl	15eac <conn_cleanup>
			return;
   16290:	e72f      	b.n	160f2 <ull_conn_done+0x13a>
				ull_conn_tx_demux(UINT8_MAX);
   16292:	20ff      	movs	r0, #255	; 0xff
   16294:	f7ff fdba 	bl	15e0c <ull_conn_tx_demux>
			if (conn->tx_head || memq_peek(lll->memq_tx.head,
   16298:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   1629c:	2b00      	cmp	r3, #0
   1629e:	d1c7      	bne.n	16230 <ull_conn_done+0x278>
   162a0:	e9d5 0115 	ldrd	r0, r1, [r5, #84]	; 0x54
   162a4:	463a      	mov	r2, r7
   162a6:	f7f6 ff83 	bl	d1b0 <memq_peek>
   162aa:	2800      	cmp	r0, #0
   162ac:	d1c0      	bne.n	16230 <ull_conn_done+0x278>
			} else if (lll->slave.latency_enabled) {
   162ae:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   162b2:	075b      	lsls	r3, r3, #29
				lll->latency_event = lll->latency;
   162b4:	bf44      	itt	mi
   162b6:	8bab      	ldrhmi	r3, [r5, #28]
   162b8:	842b      	strhmi	r3, [r5, #32]
   162ba:	e6a9      	b.n	16010 <ull_conn_done+0x58>
   162bc:	0001213d 	.word	0x0001213d
   162c0:	00024e44 	.word	0x00024e44
   162c4:	00024fd8 	.word	0x00024fd8
   162c8:	00024904 	.word	0x00024904

000162cc <ull_conn_tx_lll_enqueue>:
	while (conn->tx_head &&
   162cc:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
   162d0:	2b00      	cmp	r3, #0
   162d2:	f000 80be 	beq.w	16452 <ull_conn_tx_lll_enqueue+0x186>
   162d6:	3901      	subs	r1, #1
{
   162d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
   162dc:	f8df 8178 	ldr.w	r8, [pc, #376]	; 16458 <ull_conn_tx_lll_enqueue+0x18c>
		LL_ASSERT(link);
   162e0:	f8df a178 	ldr.w	sl, [pc, #376]	; 1645c <ull_conn_tx_lll_enqueue+0x190>
   162e4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 16460 <ull_conn_tx_lll_enqueue+0x194>
   162e8:	4604      	mov	r4, r0
   162ea:	b2cd      	uxtb	r5, r1
   162ec:	e010      	b.n	16310 <ull_conn_tx_lll_enqueue+0x44>
		link = mem_acquire(&mem_link_tx.free);
   162ee:	4640      	mov	r0, r8
   162f0:	f7f6 fef4 	bl	d0dc <mem_acquire>
		LL_ASSERT(link);
   162f4:	4607      	mov	r7, r0
   162f6:	b3b0      	cbz	r0, 16366 <ull_conn_tx_lll_enqueue+0x9a>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   162f8:	4631      	mov	r1, r6
   162fa:	4638      	mov	r0, r7
   162fc:	f104 0268 	add.w	r2, r4, #104	; 0x68
   16300:	f7f6 ff4e 	bl	d1a0 <memq_enqueue>
	while (conn->tx_head &&
   16304:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   16308:	3d01      	subs	r5, #1
   1630a:	b2ed      	uxtb	r5, r5
   1630c:	2b00      	cmp	r3, #0
   1630e:	d05c      	beq.n	163ca <ull_conn_tx_lll_enqueue+0xfe>
		 !conn->llcp_phy.pause_tx &&
   16310:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
	while (conn->tx_head &&
   16314:	07d1      	lsls	r1, r2, #31
   16316:	d403      	bmi.n	16320 <ull_conn_tx_lll_enqueue+0x54>
		 !conn->llcp_enc.pause_tx &&
   16318:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
		 !conn->llcp_phy.pause_tx &&
   1631c:	0792      	lsls	r2, r2, #30
   1631e:	d53a      	bpl.n	16396 <ull_conn_tx_lll_enqueue+0xca>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   16320:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   16324:	4293      	cmp	r3, r2
   16326:	d150      	bne.n	163ca <ull_conn_tx_lll_enqueue+0xfe>
   16328:	2dff      	cmp	r5, #255	; 0xff
   1632a:	d04e      	beq.n	163ca <ull_conn_tx_lll_enqueue+0xfe>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   1632c:	f8d4 11c4 	ldr.w	r1, [r4, #452]	; 0x1c4
   16330:	4620      	mov	r0, r4
   16332:	f7fb fd1d 	bl	11d70 <tx_ull_dequeue>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   16336:	7903      	ldrb	r3, [r0, #4]
   16338:	f003 0303 	and.w	r3, r3, #3
   1633c:	2b03      	cmp	r3, #3
		tx = tx_ull_dequeue(conn, conn->tx_head);
   1633e:	4606      	mov	r6, r0
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   16340:	d1d5      	bne.n	162ee <ull_conn_tx_lll_enqueue+0x22>
			ctrl_tx_pre_ack(conn, pdu_tx);
   16342:	79c3      	ldrb	r3, [r0, #7]
	switch (pdu_tx->llctrl.opcode) {
   16344:	2b0b      	cmp	r3, #11
   16346:	d042      	beq.n	163ce <ull_conn_tx_lll_enqueue+0x102>
   16348:	d81b      	bhi.n	16382 <ull_conn_tx_lll_enqueue+0xb6>
   1634a:	2b04      	cmp	r3, #4
   1634c:	d1cf      	bne.n	162ee <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_enc.pause_tx = 1U;
   1634e:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   16352:	f043 0302 	orr.w	r3, r3, #2
   16356:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
		link = mem_acquire(&mem_link_tx.free);
   1635a:	4640      	mov	r0, r8
   1635c:	f7f6 febe 	bl	d0dc <mem_acquire>
		LL_ASSERT(link);
   16360:	4607      	mov	r7, r0
   16362:	2800      	cmp	r0, #0
   16364:	d1c8      	bne.n	162f8 <ull_conn_tx_lll_enqueue+0x2c>
   16366:	483b      	ldr	r0, [pc, #236]	; (16454 <ull_conn_tx_lll_enqueue+0x188>)
   16368:	f240 6303 	movw	r3, #1539	; 0x603
   1636c:	4652      	mov	r2, sl
   1636e:	4649      	mov	r1, r9
   16370:	f008 fad4 	bl	1e91c <printk>
   16374:	4040      	eors	r0, r0
   16376:	f380 8811 	msr	BASEPRI, r0
   1637a:	f04f 0003 	mov.w	r0, #3
   1637e:	df02      	svc	2
   16380:	e7ba      	b.n	162f8 <ull_conn_tx_lll_enqueue+0x2c>
	switch (pdu_tx->llctrl.opcode) {
   16382:	3b16      	subs	r3, #22
   16384:	2b01      	cmp	r3, #1
   16386:	d8b2      	bhi.n	162ee <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_phy.pause_tx = 1U;
   16388:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   1638c:	f043 0301 	orr.w	r3, r3, #1
   16390:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
		break;
   16394:	e7ab      	b.n	162ee <ull_conn_tx_lll_enqueue+0x22>
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   16396:	791a      	ldrb	r2, [r3, #4]
   16398:	f002 0203 	and.w	r2, r2, #3
   1639c:	2a03      	cmp	r2, #3
   1639e:	d1c3      	bne.n	16328 <ull_conn_tx_lll_enqueue+0x5c>
	    ((pdu_data_tx->llctrl.opcode ==
   163a0:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   163a2:	2a03      	cmp	r2, #3
   163a4:	d001      	beq.n	163aa <ull_conn_tx_lll_enqueue+0xde>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   163a6:	2a0a      	cmp	r2, #10
   163a8:	d1be      	bne.n	16328 <ull_conn_tx_lll_enqueue+0x5c>
		if (((conn->llcp_req != conn->llcp_ack) &&
   163aa:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
   163ae:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   163b2:	428a      	cmp	r2, r1
   163b4:	d010      	beq.n	163d8 <ull_conn_tx_lll_enqueue+0x10c>
   163b6:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
   163ba:	2a03      	cmp	r2, #3
   163bc:	d0b4      	beq.n	16328 <ull_conn_tx_lll_enqueue+0x5c>
			if ((tx->next != NULL) &&
   163be:	681a      	ldr	r2, [r3, #0]
   163c0:	b11a      	cbz	r2, 163ca <ull_conn_tx_lll_enqueue+0xfe>
   163c2:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   163c6:	428a      	cmp	r2, r1
   163c8:	d032      	beq.n	16430 <ull_conn_tx_lll_enqueue+0x164>
}
   163ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!conn->lll.role) {
   163ce:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   163d2:	2b00      	cmp	r3, #0
   163d4:	da8b      	bge.n	162ee <ull_conn_tx_lll_enqueue+0x22>
   163d6:	e7ba      	b.n	1634e <ull_conn_tx_lll_enqueue+0x82>
		    ((conn->llcp_req == conn->llcp_ack) &&
   163d8:	f894 0121 	ldrb.w	r0, [r4, #289]	; 0x121
   163dc:	f894 1120 	ldrb.w	r1, [r4, #288]	; 0x120
   163e0:	4288      	cmp	r0, r1
   163e2:	d1ec      	bne.n	163be <ull_conn_tx_lll_enqueue+0xf2>
		     ((conn->llcp_feature.ack != conn->llcp_feature.req) ||
   163e4:	f894 0139 	ldrb.w	r0, [r4, #313]	; 0x139
   163e8:	f894 1138 	ldrb.w	r1, [r4, #312]	; 0x138
   163ec:	4288      	cmp	r0, r1
   163ee:	d1e6      	bne.n	163be <ull_conn_tx_lll_enqueue+0xf2>
		      (conn->llcp_version.ack != conn->llcp_version.req) ||
   163f0:	f894 0185 	ldrb.w	r0, [r4, #389]	; 0x185
   163f4:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
   163f8:	4288      	cmp	r0, r1
   163fa:	d1e0      	bne.n	163be <ull_conn_tx_lll_enqueue+0xf2>
		       conn->llcp_conn_param.req) ||
   163fc:	f894 01ad 	ldrb.w	r0, [r4, #429]	; 0x1ad
   16400:	f894 11ac 	ldrb.w	r1, [r4, #428]	; 0x1ac
   16404:	4288      	cmp	r0, r1
   16406:	d1da      	bne.n	163be <ull_conn_tx_lll_enqueue+0xf2>
		      (conn->llcp_phy.ack != conn->llcp_phy.req) ||
   16408:	f894 01bd 	ldrb.w	r0, [r4, #445]	; 0x1bd
   1640c:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   16410:	4288      	cmp	r0, r1
   16412:	d1d4      	bne.n	163be <ull_conn_tx_lll_enqueue+0xf2>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   16414:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   16418:	2101      	movs	r1, #1
   1641a:	f361 0301 	bfi	r3, r1, #0, #2
			conn->llcp_ack -= 2U;
   1641e:	3a02      	subs	r2, #2
			conn->llcp_type = LLCP_ENCRYPTION;
   16420:	2103      	movs	r1, #3
			conn->llcp_ack -= 2U;
   16422:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   16426:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
			conn->llcp_type = LLCP_ENCRYPTION;
   1642a:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
			conn->llcp_ack -= 2U;
   1642e:	e77b      	b.n	16328 <ull_conn_tx_lll_enqueue+0x5c>
				tx->next = conn->tx_ctrl_last->next;
   16430:	f8d4 11cc 	ldr.w	r1, [r4, #460]	; 0x1cc
				if (!conn->tx_data_last) {
   16434:	f8d4 01d4 	ldr.w	r0, [r4, #468]	; 0x1d4
				conn->tx_head = tx->next;
   16438:	f8c4 21c4 	str.w	r2, [r4, #452]	; 0x1c4
				tx->next = conn->tx_ctrl_last->next;
   1643c:	680a      	ldr	r2, [r1, #0]
   1643e:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last->next = tx;
   16440:	600b      	str	r3, [r1, #0]
				conn->tx_data = tx;
   16442:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
				if (!conn->tx_data_last) {
   16446:	2800      	cmp	r0, #0
   16448:	f47f af6e 	bne.w	16328 <ull_conn_tx_lll_enqueue+0x5c>
					conn->tx_data_last = tx;
   1644c:	f8c4 31d4 	str.w	r3, [r4, #468]	; 0x1d4
   16450:	e76a      	b.n	16328 <ull_conn_tx_lll_enqueue+0x5c>
   16452:	4770      	bx	lr
   16454:	00024904 	.word	0x00024904
   16458:	200023e4 	.word	0x200023e4
   1645c:	00024e44 	.word	0x00024e44
   16460:	00024e9c 	.word	0x00024e9c

00016464 <tx_demux>:
{
   16464:	b510      	push	{r4, lr}
   16466:	4604      	mov	r4, r0
	ull_conn_tx_demux(1);
   16468:	2001      	movs	r0, #1
   1646a:	f7ff fccf 	bl	15e0c <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(param, 1);
   1646e:	4620      	mov	r0, r4
   16470:	2101      	movs	r1, #1
}
   16472:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ull_conn_tx_lll_enqueue(param, 1);
   16476:	f7ff bf29 	b.w	162cc <ull_conn_tx_lll_enqueue>
   1647a:	bf00      	nop

0001647c <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   1647c:	4901      	ldr	r1, [pc, #4]	; (16484 <ull_conn_link_tx_release+0x8>)
   1647e:	f7f6 be43 	b.w	d108 <mem_release>
   16482:	bf00      	nop
   16484:	200023e4 	.word	0x200023e4

00016488 <ull_conn_ack_last_idx_get>:
	return mfifo_conn_ack.l;
   16488:	4b01      	ldr	r3, [pc, #4]	; (16490 <ull_conn_ack_last_idx_get+0x8>)
}
   1648a:	78d8      	ldrb	r0, [r3, #3]
   1648c:	4770      	bx	lr
   1648e:	bf00      	nop
   16490:	200004a8 	.word	0x200004a8

00016494 <ull_conn_ack_peek>:
{
   16494:	b4f0      	push	{r4, r5, r6, r7}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   16496:	4b0b      	ldr	r3, [pc, #44]	; (164c4 <ull_conn_ack_peek+0x30>)
   16498:	789c      	ldrb	r4, [r3, #2]
   1649a:	78de      	ldrb	r6, [r3, #3]
   1649c:	781f      	ldrb	r7, [r3, #0]
	if (first == last) {
   1649e:	42b4      	cmp	r4, r6
   164a0:	d00d      	beq.n	164be <ull_conn_ack_peek+0x2a>
	return (void *)(fifo + first * size);
   164a2:	3304      	adds	r3, #4
   164a4:	fb14 f407 	smulbb	r4, r4, r7
	if (!lll_tx) {
   164a8:	4605      	mov	r5, r0
   164aa:	1918      	adds	r0, r3, r4
   164ac:	d005      	beq.n	164ba <ull_conn_ack_peek+0x26>
	*ack_last = mfifo_conn_ack.l;
   164ae:	702e      	strb	r6, [r5, #0]
	*handle = lll_tx->handle;
   164b0:	5b1c      	ldrh	r4, [r3, r4]
	*tx = lll_tx->node;
   164b2:	6843      	ldr	r3, [r0, #4]
	*handle = lll_tx->handle;
   164b4:	800c      	strh	r4, [r1, #0]
	*tx = lll_tx->node;
   164b6:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   164b8:	6818      	ldr	r0, [r3, #0]
}
   164ba:	bcf0      	pop	{r4, r5, r6, r7}
   164bc:	4770      	bx	lr
		return NULL;
   164be:	2000      	movs	r0, #0
   164c0:	e7fb      	b.n	164ba <ull_conn_ack_peek+0x26>
   164c2:	bf00      	nop
   164c4:	200004a8 	.word	0x200004a8

000164c8 <ull_conn_ack_by_last_peek>:
{
   164c8:	b430      	push	{r4, r5}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   164ca:	4b09      	ldr	r3, [pc, #36]	; (164f0 <ull_conn_ack_by_last_peek+0x28>)
   164cc:	789c      	ldrb	r4, [r3, #2]
   164ce:	781d      	ldrb	r5, [r3, #0]
	if (first == last) {
   164d0:	4284      	cmp	r4, r0
   164d2:	d00b      	beq.n	164ec <ull_conn_ack_by_last_peek+0x24>
	return (void *)(fifo + first * size);
   164d4:	3304      	adds	r3, #4
   164d6:	fb14 f405 	smulbb	r4, r4, r5
	if (!lll_tx) {
   164da:	1918      	adds	r0, r3, r4
   164dc:	d004      	beq.n	164e8 <ull_conn_ack_by_last_peek+0x20>
	*handle = lll_tx->handle;
   164de:	5b1c      	ldrh	r4, [r3, r4]
	*tx = lll_tx->node;
   164e0:	6843      	ldr	r3, [r0, #4]
	*handle = lll_tx->handle;
   164e2:	800c      	strh	r4, [r1, #0]
	*tx = lll_tx->node;
   164e4:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   164e6:	6818      	ldr	r0, [r3, #0]
}
   164e8:	bc30      	pop	{r4, r5}
   164ea:	4770      	bx	lr
		return NULL;
   164ec:	2000      	movs	r0, #0
   164ee:	e7fb      	b.n	164e8 <ull_conn_ack_by_last_peek+0x20>
   164f0:	200004a8 	.word	0x200004a8

000164f4 <ull_conn_ack_dequeue>:
{
   164f4:	b410      	push	{r4}
	return MFIFO_DEQUEUE(conn_ack);
   164f6:	4b0a      	ldr	r3, [pc, #40]	; (16520 <ull_conn_ack_dequeue+0x2c>)
	uint8_t _first = *first; /* Copy read-index */
   164f8:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   164fa:	78da      	ldrb	r2, [r3, #3]
   164fc:	7818      	ldrb	r0, [r3, #0]
   164fe:	785c      	ldrb	r4, [r3, #1]
   16500:	428a      	cmp	r2, r1
   16502:	d00a      	beq.n	1651a <ull_conn_ack_dequeue+0x26>
	_first += 1U;
   16504:	1c4a      	adds	r2, r1, #1
   16506:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   16508:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   1650c:	4294      	cmp	r4, r2
   1650e:	bf08      	it	eq
   16510:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   16512:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   16514:	709a      	strb	r2, [r3, #2]
}
   16516:	bc10      	pop	{r4}
   16518:	4770      	bx	lr
		return NULL;
   1651a:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(conn_ack);
   1651c:	e7fb      	b.n	16516 <ull_conn_ack_dequeue+0x22>
   1651e:	bf00      	nop
   16520:	200004a8 	.word	0x200004a8

00016524 <ull_conn_lll_ack_enqueue>:
{
   16524:	b570      	push	{r4, r5, r6, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   16526:	4a13      	ldr	r2, [pc, #76]	; (16574 <ull_conn_lll_ack_enqueue+0x50>)
   16528:	78d6      	ldrb	r6, [r2, #3]
	if (last == count) {
   1652a:	7855      	ldrb	r5, [r2, #1]
   1652c:	7894      	ldrb	r4, [r2, #2]
	last = last + 1;
   1652e:	1c73      	adds	r3, r6, #1
   16530:	b2db      	uxtb	r3, r3
		last = 0U;
   16532:	429d      	cmp	r5, r3
   16534:	bf08      	it	eq
   16536:	2300      	moveq	r3, #0
	if (last == first) {
   16538:	429c      	cmp	r4, r3
   1653a:	d00a      	beq.n	16552 <ull_conn_lll_ack_enqueue+0x2e>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1653c:	4615      	mov	r5, r2
   1653e:	f815 4b04 	ldrb.w	r4, [r5], #4
   16542:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(lll_tx);
   16546:	192e      	adds	r6, r5, r4
   16548:	d003      	beq.n	16552 <ull_conn_lll_ack_enqueue+0x2e>
	lll_tx->handle = handle;
   1654a:	5328      	strh	r0, [r5, r4]
	lll_tx->node = tx;
   1654c:	6071      	str	r1, [r6, #4]
	*last = idx; /* Commit: Update write index */
   1654e:	70d3      	strb	r3, [r2, #3]
}
   16550:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(lll_tx);
   16552:	4a09      	ldr	r2, [pc, #36]	; (16578 <ull_conn_lll_ack_enqueue+0x54>)
   16554:	4909      	ldr	r1, [pc, #36]	; (1657c <ull_conn_lll_ack_enqueue+0x58>)
   16556:	480a      	ldr	r0, [pc, #40]	; (16580 <ull_conn_lll_ack_enqueue+0x5c>)
   16558:	f240 6341 	movw	r3, #1601	; 0x641
   1655c:	f008 f9de 	bl	1e91c <printk>
   16560:	4040      	eors	r0, r0
   16562:	f380 8811 	msr	BASEPRI, r0
   16566:	f04f 0003 	mov.w	r0, #3
   1656a:	df02      	svc	2
	lll_tx->handle = handle;
   1656c:	2300      	movs	r3, #0
   1656e:	801b      	strh	r3, [r3, #0]
   16570:	deff      	udf	#255	; 0xff
   16572:	bf00      	nop
   16574:	200004a8 	.word	0x200004a8
   16578:	00024e44 	.word	0x00024e44
   1657c:	00024e8c 	.word	0x00024e8c
   16580:	00024904 	.word	0x00024904

00016584 <ull_conn_tx_ack>:
{
   16584:	b5f0      	push	{r4, r5, r6, r7, lr}
	LL_ASSERT(pdu_tx->len);
   16586:	7953      	ldrb	r3, [r2, #5]
{
   16588:	b083      	sub	sp, #12
   1658a:	4614      	mov	r4, r2
   1658c:	4605      	mov	r5, r0
   1658e:	460e      	mov	r6, r1
	LL_ASSERT(pdu_tx->len);
   16590:	b383      	cbz	r3, 165f4 <ull_conn_tx_ack+0x70>
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   16592:	7923      	ldrb	r3, [r4, #4]
   16594:	f003 0203 	and.w	r2, r3, #3
   16598:	2a03      	cmp	r2, #3
   1659a:	d00d      	beq.n	165b8 <ull_conn_tx_ack+0x34>
	} else if (handle == 0xFFFF) {
   1659c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   165a0:	4295      	cmp	r5, r2
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   165a2:	bf04      	itt	eq
   165a4:	f36f 0301 	bfceq	r3, #0, #2
   165a8:	7123      	strbeq	r3, [r4, #4]
	ll_tx_ack_put(handle, tx);
   165aa:	4621      	mov	r1, r4
   165ac:	4628      	mov	r0, r5
}
   165ae:	b003      	add	sp, #12
   165b0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	ll_tx_ack_put(handle, tx);
   165b4:	f7fa bcee 	b.w	10f94 <ll_tx_ack_put>
		if (handle != 0xFFFF) {
   165b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   165bc:	429d      	cmp	r5, r3
   165be:	d127      	bne.n	16610 <ull_conn_tx_ack+0x8c>
		if (link->next == (void *)tx) {
   165c0:	6833      	ldr	r3, [r6, #0]
   165c2:	42a3      	cmp	r3, r4
   165c4:	f000 80e3 	beq.w	1678e <ull_conn_tx_ack+0x20a>
			LL_ASSERT(!link->next);
   165c8:	2b00      	cmp	r3, #0
   165ca:	d0ee      	beq.n	165aa <ull_conn_tx_ack+0x26>
   165cc:	4a83      	ldr	r2, [pc, #524]	; (167dc <ull_conn_tx_ack+0x258>)
   165ce:	4984      	ldr	r1, [pc, #528]	; (167e0 <ull_conn_tx_ack+0x25c>)
   165d0:	4884      	ldr	r0, [pc, #528]	; (167e4 <ull_conn_tx_ack+0x260>)
   165d2:	f240 6361 	movw	r3, #1633	; 0x661
   165d6:	f008 f9a1 	bl	1e91c <printk>
   165da:	4040      	eors	r0, r0
   165dc:	f380 8811 	msr	BASEPRI, r0
   165e0:	f04f 0003 	mov.w	r0, #3
   165e4:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
   165e6:	4621      	mov	r1, r4
   165e8:	4628      	mov	r0, r5
}
   165ea:	b003      	add	sp, #12
   165ec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	ll_tx_ack_put(handle, tx);
   165f0:	f7fa bcd0 	b.w	10f94 <ll_tx_ack_put>
	LL_ASSERT(pdu_tx->len);
   165f4:	4a79      	ldr	r2, [pc, #484]	; (167dc <ull_conn_tx_ack+0x258>)
   165f6:	497c      	ldr	r1, [pc, #496]	; (167e8 <ull_conn_tx_ack+0x264>)
   165f8:	487a      	ldr	r0, [pc, #488]	; (167e4 <ull_conn_tx_ack+0x260>)
   165fa:	f240 634e 	movw	r3, #1614	; 0x64e
   165fe:	f008 f98d 	bl	1e91c <printk>
   16602:	4040      	eors	r0, r0
   16604:	f380 8811 	msr	BASEPRI, r0
   16608:	f04f 0003 	mov.w	r0, #3
   1660c:	df02      	svc	2
   1660e:	e7c0      	b.n	16592 <ull_conn_tx_ack+0xe>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   16610:	462a      	mov	r2, r5
   16612:	4876      	ldr	r0, [pc, #472]	; (167ec <ull_conn_tx_ack+0x268>)
   16614:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   16618:	f7f6 fd90 	bl	d13c <mem_get>
   1661c:	79e2      	ldrb	r2, [r4, #7]
   1661e:	3a02      	subs	r2, #2
   16620:	4603      	mov	r3, r0
	switch (pdu_tx->llctrl.opcode) {
   16622:	2a15      	cmp	r2, #21
   16624:	d8cc      	bhi.n	165c0 <ull_conn_tx_ack+0x3c>
   16626:	a101      	add	r1, pc, #4	; (adr r1, 1662c <ull_conn_tx_ack+0xa8>)
   16628:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   1662c:	00016727 	.word	0x00016727
   16630:	000165c1 	.word	0x000165c1
   16634:	00016699 	.word	0x00016699
   16638:	000165c1 	.word	0x000165c1
   1663c:	000165c1 	.word	0x000165c1
   16640:	0001668b 	.word	0x0001668b
   16644:	000165c1 	.word	0x000165c1
   16648:	0001668b 	.word	0x0001668b
   1664c:	000165c1 	.word	0x000165c1
   16650:	00016699 	.word	0x00016699
   16654:	000165c1 	.word	0x000165c1
   16658:	000166a7 	.word	0x000166a7
   1665c:	000165c1 	.word	0x000165c1
   16660:	000165c1 	.word	0x000165c1
   16664:	000165c1 	.word	0x000165c1
   16668:	00016685 	.word	0x00016685
   1666c:	000165c1 	.word	0x000165c1
   16670:	0001668b 	.word	0x0001668b
   16674:	00016717 	.word	0x00016717
   16678:	000166bb 	.word	0x000166bb
   1667c:	0001674b 	.word	0x0001674b
   16680:	00016735 	.word	0x00016735
		if (pdu_tx->llctrl.reject_ext_ind.reject_opcode !=
   16684:	7a22      	ldrb	r2, [r4, #8]
   16686:	2a03      	cmp	r2, #3
   16688:	d00d      	beq.n	166a6 <ull_conn_tx_ack+0x122>
			conn->common.txn_lock = 0U;
   1668a:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
   1668e:	f36f 0241 	bfc	r2, #1, #1
   16692:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
			break;
   16696:	e793      	b.n	165c0 <ull_conn_tx_ack+0x3c>
			conn->llcp_enc.pause_tx = 1U;
   16698:	f890 2166 	ldrb.w	r2, [r0, #358]	; 0x166
   1669c:	f042 0202 	orr.w	r2, r2, #2
   166a0:	f880 2166 	strb.w	r2, [r0, #358]	; 0x166
		break;
   166a4:	e78c      	b.n	165c0 <ull_conn_tx_ack+0x3c>
		conn->llcp_enc.pause_rx = 0U;
   166a6:	f893 2166 	ldrb.w	r2, [r3, #358]	; 0x166
		conn->procedure_expire = 0U;
   166aa:	2100      	movs	r1, #0
		conn->llcp_enc.pause_rx = 0U;
   166ac:	f022 0203 	bic.w	r2, r2, #3
   166b0:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
		conn->procedure_expire = 0U;
   166b4:	f8a3 10c8 	strh.w	r1, [r3, #200]	; 0xc8
		break;
   166b8:	e782      	b.n	165c0 <ull_conn_tx_ack+0x3c>
		conn->common.txn_lock = 0U;
   166ba:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   166be:	f893 11ad 	ldrb.w	r1, [r3, #429]	; 0x1ad
   166c2:	f890 01ac 	ldrb.w	r0, [r0, #428]	; 0x1ac
		conn->common.txn_lock = 0U;
   166c6:	f36f 0241 	bfc	r2, #1, #1
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   166ca:	4281      	cmp	r1, r0
		conn->common.txn_lock = 0U;
   166cc:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   166d0:	f43f af76 	beq.w	165c0 <ull_conn_tx_ack+0x3c>
			switch (conn->llcp_length.state) {
   166d4:	f893 11ae 	ldrb.w	r1, [r3, #430]	; 0x1ae
   166d8:	f001 0207 	and.w	r2, r1, #7
   166dc:	2a03      	cmp	r2, #3
   166de:	d005      	beq.n	166ec <ull_conn_tx_ack+0x168>
   166e0:	3203      	adds	r2, #3
   166e2:	f002 0207 	and.w	r2, r2, #7
   166e6:	2a01      	cmp	r2, #1
   166e8:	f63f af6a 	bhi.w	165c0 <ull_conn_tx_ack+0x3c>
				conn->lll.max_tx_octets =
   166ec:	f8b3 21b2 	ldrh.w	r2, [r3, #434]	; 0x1b2
   166f0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
				if (conn->llcp_length.state ==
   166f4:	f001 0207 	and.w	r2, r1, #7
				conn->lll.max_tx_time =
   166f8:	f8b3 71b6 	ldrh.w	r7, [r3, #438]	; 0x1b6
   166fc:	f8a3 705c 	strh.w	r7, [r3, #92]	; 0x5c
				if (conn->llcp_length.state ==
   16700:	2a05      	cmp	r2, #5
   16702:	d057      	beq.n	167b4 <ull_conn_tx_ack+0x230>
				if (!conn->llcp_length.cache.tx_octets) {
   16704:	f8b3 21b8 	ldrh.w	r2, [r3, #440]	; 0x1b8
   16708:	2a00      	cmp	r2, #0
   1670a:	d159      	bne.n	167c0 <ull_conn_tx_ack+0x23c>
					conn->llcp_length.ack =
   1670c:	f883 01ad 	strb.w	r0, [r3, #429]	; 0x1ad
					conn->procedure_expire = 0U;
   16710:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
					break;
   16714:	e754      	b.n	165c0 <ull_conn_tx_ack+0x3c>
		conn->llcp_length.state = LLCP_LENGTH_STATE_RSP_WAIT;
   16716:	f890 21ae 	ldrb.w	r2, [r0, #430]	; 0x1ae
   1671a:	2102      	movs	r1, #2
   1671c:	f361 0202 	bfi	r2, r1, #0, #3
   16720:	f880 21ae 	strb.w	r2, [r0, #430]	; 0x1ae
		break;
   16724:	e74c      	b.n	165c0 <ull_conn_tx_ack+0x3c>
		uint8_t reason = (pdu_tx->llctrl.terminate_ind.error_code ==
   16726:	7a21      	ldrb	r1, [r4, #8]
   16728:	2913      	cmp	r1, #19
		conn_cleanup(conn, reason);
   1672a:	bf08      	it	eq
   1672c:	2116      	moveq	r1, #22
   1672e:	f7ff fbbd 	bl	15eac <conn_cleanup>
	break;
   16732:	e745      	b.n	165c0 <ull_conn_tx_ack+0x3c>
		if (conn->lll.role) {
   16734:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
   16738:	2a00      	cmp	r2, #0
   1673a:	db2f      	blt.n	1679c <ull_conn_tx_ack+0x218>
		conn->llcp_phy.pause_tx = 0U;
   1673c:	f893 21bf 	ldrb.w	r2, [r3, #447]	; 0x1bf
   16740:	f36f 0200 	bfc	r2, #0, #1
   16744:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
		break;
   16748:	e73a      	b.n	165c0 <ull_conn_tx_ack+0x3c>
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   1674a:	f890 21be 	ldrb.w	r2, [r0, #446]	; 0x1be
		if (conn->lll.role) {
   1674e:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   16752:	2002      	movs	r0, #2
   16754:	f360 0201 	bfi	r2, r0, #0, #2
		if (conn->lll.role) {
   16758:	2900      	cmp	r1, #0
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   1675a:	f883 21be 	strb.w	r2, [r3, #446]	; 0x1be
		if (conn->lll.role) {
   1675e:	daed      	bge.n	1673c <ull_conn_tx_ack+0x1b8>
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   16760:	4a23      	ldr	r2, [pc, #140]	; (167f0 <ull_conn_tx_ack+0x26c>)
   16762:	e892 0003 	ldmia.w	r2, {r0, r1}
   16766:	aa02      	add	r2, sp, #8
   16768:	e902 0003 	stmdb	r2, {r0, r1}
			phys = conn->llcp_phy.tx | lll->phy_tx;
   1676c:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
   16770:	f893 21be 	ldrb.w	r2, [r3, #446]	; 0x1be
   16774:	ea41 0292 	orr.w	r2, r1, r2, lsr #2
			lll->phy_tx_time = phy_tx_time[phys];
   16778:	f002 0207 	and.w	r2, r2, #7
   1677c:	a802      	add	r0, sp, #8
   1677e:	4402      	add	r2, r0
   16780:	f812 2c08 	ldrb.w	r2, [r2, #-8]
   16784:	f362 1106 	bfi	r1, r2, #4, #3
   16788:	f883 1060 	strb.w	r1, [r3, #96]	; 0x60
   1678c:	e7d6      	b.n	1673c <ull_conn_tx_ack+0x1b8>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   1678e:	4919      	ldr	r1, [pc, #100]	; (167f4 <ull_conn_tx_ack+0x270>)
   16790:	4620      	mov	r0, r4
}
   16792:	b003      	add	sp, #12
   16794:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			mem_release(tx, &mem_conn_tx_ctrl.free);
   16798:	f7f6 bcb6 	b.w	d108 <mem_release>
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   1679c:	4914      	ldr	r1, [pc, #80]	; (167f0 <ull_conn_tx_ack+0x26c>)
				conn->common.txn_lock = 0U;
   1679e:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   167a2:	c903      	ldmia	r1, {r0, r1}
   167a4:	af02      	add	r7, sp, #8
				conn->common.txn_lock = 0U;
   167a6:	f36f 0241 	bfc	r2, #1, #1
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   167aa:	e907 0003 	stmdb	r7, {r0, r1}
				conn->common.txn_lock = 0U;
   167ae:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
   167b2:	e7db      	b.n	1676c <ull_conn_tx_ack+0x1e8>
					conn->llcp_length.state =
   167b4:	2204      	movs	r2, #4
   167b6:	f362 0102 	bfi	r1, r2, #0, #3
   167ba:	f883 11ae 	strb.w	r1, [r3, #430]	; 0x1ae
					break;
   167be:	e6ff      	b.n	165c0 <ull_conn_tx_ack+0x3c>
				conn->llcp_length.cache.tx_octets = 0;
   167c0:	2000      	movs	r0, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   167c2:	f360 0102 	bfi	r1, r0, #0, #3
				conn->llcp_length.tx_octets =
   167c6:	f8a3 21b2 	strh.w	r2, [r3, #434]	; 0x1b2
				conn->llcp_length.tx_time =
   167ca:	f8b3 21ba 	ldrh.w	r2, [r3, #442]	; 0x1ba
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   167ce:	f883 11ae 	strb.w	r1, [r3, #430]	; 0x1ae
				conn->llcp_length.cache.tx_octets = 0;
   167d2:	f8a3 01b8 	strh.w	r0, [r3, #440]	; 0x1b8
				conn->llcp_length.tx_time =
   167d6:	f8a3 21b6 	strh.w	r2, [r3, #438]	; 0x1b6
				break;
   167da:	e6f1      	b.n	165c0 <ull_conn_tx_ack+0x3c>
   167dc:	00024e44 	.word	0x00024e44
   167e0:	00025040 	.word	0x00025040
   167e4:	00024904 	.word	0x00024904
   167e8:	00025034 	.word	0x00025034
   167ec:	200012a8 	.word	0x200012a8
   167f0:	0002504c 	.word	0x0002504c
   167f4:	20002330 	.word	0x20002330

000167f8 <ull_conn_lll_max_tx_octets_get>:
	switch (lll->phy_tx_time) {
   167f8:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
   167fc:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
   16800:	f3c2 1202 	ubfx	r2, r2, #4, #3
   16804:	2a02      	cmp	r2, #2
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   16806:	bf14      	ite	ne
   16808:	08db      	lsrne	r3, r3, #3
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   1680a:	089b      	lsreq	r3, r3, #2
	if (lll->enc_tx) {
   1680c:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
	return max_tx_octets;
   16810:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   16812:	bf14      	ite	ne
   16814:	3b0a      	subne	r3, #10
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   16816:	3b0b      	subeq	r3, #11
   16818:	b29b      	uxth	r3, r3
	if (lll->enc_tx) {
   1681a:	06d2      	lsls	r2, r2, #27
		max_tx_octets -= 4U;
   1681c:	bf44      	itt	mi
   1681e:	3b04      	submi	r3, #4
   16820:	b29b      	uxthmi	r3, r3
}
   16822:	4298      	cmp	r0, r3
   16824:	bf28      	it	cs
   16826:	4618      	movcs	r0, r3
   16828:	4770      	bx	lr
   1682a:	bf00      	nop

0001682c <ticker_update_latency_cancel_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *params)
{
   1682c:	b510      	push	{r4, lr}
   1682e:	460c      	mov	r4, r1
	struct ll_conn *conn = params;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   16830:	b930      	cbnz	r0, 16840 <ticker_update_latency_cancel_op_cb+0x14>

	conn->slave.latency_cancel = 0U;
   16832:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   16836:	f36f 0382 	bfc	r3, #2, #1
   1683a:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
}
   1683e:	bd10      	pop	{r4, pc}
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   16840:	4a09      	ldr	r2, [pc, #36]	; (16868 <ticker_update_latency_cancel_op_cb+0x3c>)
   16842:	490a      	ldr	r1, [pc, #40]	; (1686c <ticker_update_latency_cancel_op_cb+0x40>)
   16844:	480a      	ldr	r0, [pc, #40]	; (16870 <ticker_update_latency_cancel_op_cb+0x44>)
   16846:	f240 2343 	movw	r3, #579	; 0x243
   1684a:	f008 f867 	bl	1e91c <printk>
   1684e:	4040      	eors	r0, r0
   16850:	f380 8811 	msr	BASEPRI, r0
   16854:	f04f 0003 	mov.w	r0, #3
   16858:	df02      	svc	2
	conn->slave.latency_cancel = 0U;
   1685a:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   1685e:	f36f 0382 	bfc	r3, #2, #1
   16862:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
}
   16866:	bd10      	pop	{r4, pc}
   16868:	0002506c 	.word	0x0002506c
   1686c:	000250b0 	.word	0x000250b0
   16870:	00024904 	.word	0x00024904

00016874 <ticker_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   16874:	b900      	cbnz	r0, 16878 <ticker_op_cb+0x4>
   16876:	4770      	bx	lr
{
   16878:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1687a:	4a07      	ldr	r2, [pc, #28]	; (16898 <ticker_op_cb+0x24>)
   1687c:	4907      	ldr	r1, [pc, #28]	; (1689c <ticker_op_cb+0x28>)
   1687e:	4808      	ldr	r0, [pc, #32]	; (168a0 <ticker_op_cb+0x2c>)
   16880:	f240 233b 	movw	r3, #571	; 0x23b
   16884:	f008 f84a 	bl	1e91c <printk>
   16888:	4040      	eors	r0, r0
   1688a:	f380 8811 	msr	BASEPRI, r0
   1688e:	f04f 0003 	mov.w	r0, #3
   16892:	df02      	svc	2
}
   16894:	bd08      	pop	{r3, pc}
   16896:	bf00      	nop
   16898:	0002506c 	.word	0x0002506c
   1689c:	00024ea4 	.word	0x00024ea4
   168a0:	00024904 	.word	0x00024904

000168a4 <ticker_op_stop_adv_cb.part.0>:
static void ticker_op_stop_adv_cb(uint32_t status, void *param)
   168a4:	b508      	push	{r3, lr}
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   168a6:	4a07      	ldr	r2, [pc, #28]	; (168c4 <ticker_op_stop_adv_cb.part.0+0x20>)
   168a8:	4907      	ldr	r1, [pc, #28]	; (168c8 <ticker_op_stop_adv_cb.part.0+0x24>)
   168aa:	4808      	ldr	r0, [pc, #32]	; (168cc <ticker_op_stop_adv_cb.part.0+0x28>)
   168ac:	f240 2333 	movw	r3, #563	; 0x233
   168b0:	f008 f834 	bl	1e91c <printk>
   168b4:	4040      	eors	r0, r0
   168b6:	f380 8811 	msr	BASEPRI, r0
   168ba:	f04f 0003 	mov.w	r0, #3
   168be:	df02      	svc	2
}
   168c0:	bd08      	pop	{r3, pc}
   168c2:	bf00      	nop
   168c4:	0002506c 	.word	0x0002506c
   168c8:	000250c4 	.word	0x000250c4
   168cc:	00024904 	.word	0x00024904

000168d0 <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   168d0:	2801      	cmp	r0, #1
   168d2:	d000      	beq.n	168d6 <ticker_op_stop_adv_cb+0x6>
   168d4:	4770      	bx	lr
{
   168d6:	b510      	push	{r4, lr}
   168d8:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   168da:	f7fa fbcb 	bl	11074 <ull_disable_mark_get>
   168de:	4284      	cmp	r4, r0
   168e0:	d003      	beq.n	168ea <ticker_op_stop_adv_cb+0x1a>
}
   168e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   168e6:	f7ff bfdd 	b.w	168a4 <ticker_op_stop_adv_cb.part.0>
   168ea:	bd10      	pop	{r4, pc}

000168ec <ull_slave_ticker_cb>:
{
   168ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   168f0:	9c08      	ldr	r4, [sp, #32]
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   168f2:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
   168f6:	f64f 76ff 	movw	r6, #65535	; 0xffff
   168fa:	45b4      	cmp	ip, r6
   168fc:	d029      	beq.n	16952 <ull_slave_ticker_cb+0x66>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   168fe:	4605      	mov	r5, r0
   16900:	4689      	mov	r9, r1
   16902:	4601      	mov	r1, r0
   16904:	4620      	mov	r0, r4
   16906:	461f      	mov	r7, r3
   16908:	4690      	mov	r8, r2
   1690a:	f7fd fed1 	bl	146b0 <ull_conn_llcp>
		if (ret) {
   1690e:	bb00      	cbnz	r0, 16952 <ull_slave_ticker_cb+0x66>
	return ++hdr->ref;
   16910:	7c20      	ldrb	r0, [r4, #16]
   16912:	3001      	adds	r0, #1
   16914:	b2c0      	uxtb	r0, r0
   16916:	7420      	strb	r0, [r4, #16]
	LL_ASSERT(ref);
   16918:	b358      	cbz	r0, 16972 <ull_slave_ticker_cb+0x86>
	p.ticks_at_expire = ticks_at_expire;
   1691a:	4e1d      	ldr	r6, [pc, #116]	; (16990 <ull_slave_ticker_cb+0xa4>)
	mfy.param = &p;
   1691c:	4b1d      	ldr	r3, [pc, #116]	; (16994 <ull_slave_ticker_cb+0xa8>)
	p.ticks_at_expire = ticks_at_expire;
   1691e:	6035      	str	r5, [r6, #0]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   16920:	2200      	movs	r2, #0
	p.param = &conn->lll;
   16922:	f104 0c1c 	add.w	ip, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   16926:	4611      	mov	r1, r2
   16928:	2001      	movs	r0, #1
	mfy.param = &p;
   1692a:	609e      	str	r6, [r3, #8]
	p.remainder = remainder;
   1692c:	f8c6 9004 	str.w	r9, [r6, #4]
	p.lazy = lazy;
   16930:	f8a6 8008 	strh.w	r8, [r6, #8]
	p.force = force;
   16934:	72b7      	strb	r7, [r6, #10]
	p.param = &conn->lll;
   16936:	f8c6 c00c 	str.w	ip, [r6, #12]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1693a:	f7f6 fca5 	bl	d288 <mayfly_enqueue>
	LL_ASSERT(!err);
   1693e:	b950      	cbnz	r0, 16956 <ull_slave_ticker_cb+0x6a>
	ull_conn_tx_demux(UINT8_MAX);
   16940:	20ff      	movs	r0, #255	; 0xff
   16942:	f7ff fa63 	bl	15e0c <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   16946:	4620      	mov	r0, r4
   16948:	21ff      	movs	r1, #255	; 0xff
}
   1694a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   1694e:	f7ff bcbd 	b.w	162cc <ull_conn_tx_lll_enqueue>
}
   16952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(!err);
   16956:	4a10      	ldr	r2, [pc, #64]	; (16998 <ull_slave_ticker_cb+0xac>)
   16958:	4910      	ldr	r1, [pc, #64]	; (1699c <ull_slave_ticker_cb+0xb0>)
   1695a:	4811      	ldr	r0, [pc, #68]	; (169a0 <ull_slave_ticker_cb+0xb4>)
   1695c:	f240 13f7 	movw	r3, #503	; 0x1f7
   16960:	f007 ffdc 	bl	1e91c <printk>
   16964:	4040      	eors	r0, r0
   16966:	f380 8811 	msr	BASEPRI, r0
   1696a:	f04f 0003 	mov.w	r0, #3
   1696e:	df02      	svc	2
   16970:	e7e6      	b.n	16940 <ull_slave_ticker_cb+0x54>
	LL_ASSERT(ref);
   16972:	4a09      	ldr	r2, [pc, #36]	; (16998 <ull_slave_ticker_cb+0xac>)
   16974:	490b      	ldr	r1, [pc, #44]	; (169a4 <ull_slave_ticker_cb+0xb8>)
   16976:	480a      	ldr	r0, [pc, #40]	; (169a0 <ull_slave_ticker_cb+0xb4>)
   16978:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
   1697c:	f007 ffce 	bl	1e91c <printk>
   16980:	4040      	eors	r0, r0
   16982:	f380 8811 	msr	BASEPRI, r0
   16986:	f04f 0003 	mov.w	r0, #3
   1698a:	df02      	svc	2
   1698c:	e7c5      	b.n	1691a <ull_slave_ticker_cb+0x2e>
   1698e:	bf00      	nop
   16990:	20002428 	.word	0x20002428
   16994:	20000530 	.word	0x20000530
   16998:	0002506c 	.word	0x0002506c
   1699c:	00024b9c 	.word	0x00024b9c
   169a0:	00024904 	.word	0x00024904
   169a4:	00024d78 	.word	0x00024d78

000169a8 <ull_slave_latency_cancel>:
	if (conn->lll.latency_event && !conn->slave.latency_cancel) {
   169a8:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   169aa:	b123      	cbz	r3, 169b6 <ull_slave_latency_cancel+0xe>
   169ac:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
   169b0:	f012 0304 	ands.w	r3, r2, #4
   169b4:	d000      	beq.n	169b8 <ull_slave_latency_cancel+0x10>
   169b6:	4770      	bx	lr
{
   169b8:	b530      	push	{r4, r5, lr}
   169ba:	b089      	sub	sp, #36	; 0x24
		conn->slave.latency_cancel = 1U;
   169bc:	f042 0204 	orr.w	r2, r2, #4
				      (TICKER_ID_CONN_BASE + handle),
   169c0:	3103      	adds	r1, #3
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   169c2:	4d11      	ldr	r5, [pc, #68]	; (16a08 <ull_slave_latency_cancel+0x60>)
		conn->slave.latency_cancel = 1U;
   169c4:	f880 20d8 	strb.w	r2, [r0, #216]	; 0xd8
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   169c8:	2401      	movs	r4, #1
   169ca:	e9cd 3301 	strd	r3, r3, [sp, #4]
   169ce:	b2ca      	uxtb	r2, r1
   169d0:	9006      	str	r0, [sp, #24]
   169d2:	9304      	str	r3, [sp, #16]
   169d4:	9300      	str	r3, [sp, #0]
   169d6:	4618      	mov	r0, r3
   169d8:	9505      	str	r5, [sp, #20]
   169da:	9403      	str	r4, [sp, #12]
   169dc:	2103      	movs	r1, #3
   169de:	f7f7 ff41 	bl	e864 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   169e2:	f030 0302 	bics.w	r3, r0, #2
   169e6:	d00c      	beq.n	16a02 <ull_slave_latency_cancel+0x5a>
   169e8:	4a08      	ldr	r2, [pc, #32]	; (16a0c <ull_slave_latency_cancel+0x64>)
   169ea:	4909      	ldr	r1, [pc, #36]	; (16a10 <ull_slave_latency_cancel+0x68>)
   169ec:	4809      	ldr	r0, [pc, #36]	; (16a14 <ull_slave_latency_cancel+0x6c>)
   169ee:	f44f 73de 	mov.w	r3, #444	; 0x1bc
   169f2:	f007 ff93 	bl	1e91c <printk>
   169f6:	4040      	eors	r0, r0
   169f8:	f380 8811 	msr	BASEPRI, r0
   169fc:	f04f 0003 	mov.w	r0, #3
   16a00:	df02      	svc	2
}
   16a02:	b009      	add	sp, #36	; 0x24
   16a04:	bd30      	pop	{r4, r5, pc}
   16a06:	bf00      	nop
   16a08:	0001682d 	.word	0x0001682d
   16a0c:	0002506c 	.word	0x0002506c
   16a10:	00024f24 	.word	0x00024f24
   16a14:	00024904 	.word	0x00024904

00016a18 <ll_start_enc_req_send>:
{
   16a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16a1a:	460d      	mov	r5, r1
   16a1c:	4614      	mov	r4, r2
	conn = ll_connected_get(handle);
   16a1e:	f7fb fef9 	bl	12814 <ll_connected_get>
	if (!conn) {
   16a22:	2800      	cmp	r0, #0
   16a24:	d046      	beq.n	16ab4 <ll_start_enc_req_send+0x9c>
	if (error_code) {
   16a26:	4603      	mov	r3, r0
   16a28:	b9ed      	cbnz	r5, 16a66 <ll_start_enc_req_send+0x4e>
		if ((conn->llcp_req == conn->llcp_ack) ||
   16a2a:	f890 10e4 	ldrb.w	r1, [r0, #228]	; 0xe4
   16a2e:	f890 20e5 	ldrb.w	r2, [r0, #229]	; 0xe5
   16a32:	4291      	cmp	r1, r2
   16a34:	d035      	beq.n	16aa2 <ll_start_enc_req_send+0x8a>
   16a36:	f890 20e6 	ldrb.w	r2, [r0, #230]	; 0xe6
   16a3a:	2a03      	cmp	r2, #3
   16a3c:	d131      	bne.n	16aa2 <ll_start_enc_req_send+0x8a>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   16a3e:	f8b0 20f4 	ldrh.w	r2, [r0, #244]	; 0xf4
   16a42:	6827      	ldr	r7, [r4, #0]
   16a44:	68e0      	ldr	r0, [r4, #12]
   16a46:	6866      	ldr	r6, [r4, #4]
   16a48:	68a1      	ldr	r1, [r4, #8]
   16a4a:	f8c3 1179 	str.w	r1, [r3, #377]	; 0x179
   16a4e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
   16a52:	f8c3 017d 	str.w	r0, [r3, #381]	; 0x17d
   16a56:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
   16a5a:	f8c3 7171 	str.w	r7, [r3, #369]	; 0x171
   16a5e:	f8c3 6175 	str.w	r6, [r3, #373]	; 0x175
	return 0;
   16a62:	4628      	mov	r0, r5
}
   16a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->llcp_enc.refresh == 0U) {
   16a66:	f890 0166 	ldrb.w	r0, [r0, #358]	; 0x166
   16a6a:	f010 0004 	ands.w	r0, r0, #4
   16a6e:	d112      	bne.n	16a96 <ll_start_enc_req_send+0x7e>
			if ((conn->llcp_req == conn->llcp_ack) ||
   16a70:	f893 10e4 	ldrb.w	r1, [r3, #228]	; 0xe4
   16a74:	f893 20e5 	ldrb.w	r2, [r3, #229]	; 0xe5
   16a78:	4291      	cmp	r1, r2
   16a7a:	d012      	beq.n	16aa2 <ll_start_enc_req_send+0x8a>
   16a7c:	f893 20e6 	ldrb.w	r2, [r3, #230]	; 0xe6
   16a80:	2a03      	cmp	r2, #3
   16a82:	d10e      	bne.n	16aa2 <ll_start_enc_req_send+0x8a>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   16a84:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
			conn->llcp.encryption.error_code = error_code;
   16a88:	f883 50f5 	strb.w	r5, [r3, #245]	; 0xf5
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   16a8c:	f360 0201 	bfi	r2, r0, #0, #2
   16a90:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
}
   16a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			    conn->llcp_terminate.req) {
   16a96:	f893 1140 	ldrb.w	r1, [r3, #320]	; 0x140
			if (conn->llcp_terminate.ack !=
   16a9a:	f893 2141 	ldrb.w	r2, [r3, #321]	; 0x141
   16a9e:	428a      	cmp	r2, r1
   16aa0:	d001      	beq.n	16aa6 <ll_start_enc_req_send+0x8e>
				return BT_HCI_ERR_CMD_DISALLOWED;
   16aa2:	200c      	movs	r0, #12
}
   16aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			conn->llcp_terminate.req++;
   16aa6:	3201      	adds	r2, #1
   16aa8:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
			conn->llcp_terminate.reason_own = error_code;
   16aac:	f883 5142 	strb.w	r5, [r3, #322]	; 0x142
	return 0;
   16ab0:	2000      	movs	r0, #0
}
   16ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   16ab4:	2002      	movs	r0, #2
}
   16ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00016ab8 <lll_chan_sel_1>:
#endif /* CONFIG_BT_CTLR_CHAN_SEL_2 */

#if defined(CONFIG_BT_CONN)
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   16ab8:	b470      	push	{r4, r5, r6}
   16aba:	4605      	mov	r5, r0
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   16abc:	7800      	ldrb	r0, [r0, #0]
   16abe:	4c1b      	ldr	r4, [pc, #108]	; (16b2c <lll_chan_sel_1+0x74>)
   16ac0:	fb02 1101 	mla	r1, r2, r1, r1
   16ac4:	180a      	adds	r2, r1, r0
   16ac6:	fb84 0102 	smull	r0, r1, r4, r2
   16aca:	4411      	add	r1, r2
   16acc:	1149      	asrs	r1, r1, #5
   16ace:	eb01 04c1 	add.w	r4, r1, r1, lsl #3
   16ad2:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   16ad6:	1a51      	subs	r1, r2, r1
   16ad8:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   16ada:	08c2      	lsrs	r2, r0, #3
	*chan_use = chan_next;
   16adc:	7028      	strb	r0, [r5, #0]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   16ade:	5c9c      	ldrb	r4, [r3, r2]
{
   16ae0:	f89d 500c 	ldrb.w	r5, [sp, #12]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   16ae4:	f001 0107 	and.w	r1, r1, #7
   16ae8:	410c      	asrs	r4, r1
   16aea:	f014 0401 	ands.w	r4, r4, #1
   16aee:	d11b      	bne.n	16b28 <lll_chan_sel_1+0x70>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   16af0:	fbb0 f2f5 	udiv	r2, r0, r5
   16af4:	fb05 0212 	mls	r2, r5, r2, r0
   16af8:	b2d2      	uxtb	r2, r2
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   16afa:	1e5d      	subs	r5, r3, #1
   16afc:	1d1e      	adds	r6, r3, #4
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   16afe:	f104 0108 	add.w	r1, r4, #8
   16b02:	f815 3f01 	ldrb.w	r3, [r5, #1]!
		bit_count = 8U;
		while (bit_count--) {
   16b06:	4620      	mov	r0, r4
   16b08:	b2cc      	uxtb	r4, r1
			if (bite & 0x01) {
   16b0a:	f013 0f01 	tst.w	r3, #1
				if (chan_index == 0U) {
					break;
				}
				chan_index--;
			}
			chan_next++;
   16b0e:	f100 0101 	add.w	r1, r0, #1
			bite >>= 1;
   16b12:	ea4f 0353 	mov.w	r3, r3, lsr #1
			if (bite & 0x01) {
   16b16:	d002      	beq.n	16b1e <lll_chan_sel_1+0x66>
				if (chan_index == 0U) {
   16b18:	b132      	cbz	r2, 16b28 <lll_chan_sel_1+0x70>
				chan_index--;
   16b1a:	3a01      	subs	r2, #1
   16b1c:	b2d2      	uxtb	r2, r2
			chan_next++;
   16b1e:	b2c8      	uxtb	r0, r1
		while (bit_count--) {
   16b20:	4284      	cmp	r4, r0
   16b22:	d1f2      	bne.n	16b0a <lll_chan_sel_1+0x52>
	while (byte_count--) {
   16b24:	42b5      	cmp	r5, r6
   16b26:	d1ea      	bne.n	16afe <lll_chan_sel_1+0x46>
}
   16b28:	bc70      	pop	{r4, r5, r6}
   16b2a:	4770      	bx	lr
   16b2c:	dd67c8a7 	.word	0xdd67c8a7

00016b30 <lll_chan_id>:
{
   16b30:	b410      	push	{r4}
	uint16_t aa_ls = ((uint16_t)access_addr[1] << 8) | access_addr[0];
   16b32:	7844      	ldrb	r4, [r0, #1]
	uint16_t aa_ms = ((uint16_t)access_addr[3] << 8) | access_addr[2];
   16b34:	78c1      	ldrb	r1, [r0, #3]
   16b36:	7883      	ldrb	r3, [r0, #2]
	uint16_t aa_ls = ((uint16_t)access_addr[1] << 8) | access_addr[0];
   16b38:	7802      	ldrb	r2, [r0, #0]
	uint16_t aa_ms = ((uint16_t)access_addr[3] << 8) | access_addr[2];
   16b3a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	uint16_t aa_ls = ((uint16_t)access_addr[1] << 8) | access_addr[0];
   16b3e:	ea42 2004 	orr.w	r0, r2, r4, lsl #8
}
   16b42:	4058      	eors	r0, r3
   16b44:	bc10      	pop	{r4}
   16b46:	4770      	bx	lr

00016b48 <lll_chan_sel_2>:
{
   16b48:	b5f0      	push	{r4, r5, r6, r7, lr}
/* Attribution:
 * http://graphics.stanford.edu/%7Eseander/bithacks.html#ReverseByteWith32Bits
 */
static uint8_t chan_rev_8(uint8_t b)
{
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   16b4a:	4f2f      	ldr	r7, [pc, #188]	; (16c08 <lll_chan_sel_2+0xc0>)
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   16b4c:	4e2f      	ldr	r6, [pc, #188]	; (16c0c <lll_chan_sel_2+0xc4>)
static uint16_t chan_prn(uint16_t counter, uint16_t chan_id)
{
	uint8_t iterate;
	uint16_t prn_e;

	prn_e = counter ^ chan_id;
   16b4e:	ea80 0501 	eor.w	r5, r0, r1
   16b52:	2403      	movs	r4, #3
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   16b54:	0a28      	lsrs	r0, r5, #8
   16b56:	b2ed      	uxtb	r5, r5
   16b58:	eb00 2080 	add.w	r0, r0, r0, lsl #10
   16b5c:	eb05 2585 	add.w	r5, r5, r5, lsl #10
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   16b60:	ea06 1e40 	and.w	lr, r6, r0, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   16b64:	ea07 0c40 	and.w	ip, r7, r0, lsl #1
   16b68:	ea07 0045 	and.w	r0, r7, r5, lsl #1
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   16b6c:	ea06 1545 	and.w	r5, r6, r5, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   16b70:	ea4c 0c0e 	orr.w	ip, ip, lr
   16b74:	4328      	orrs	r0, r5
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   16b76:	eb00 2500 	add.w	r5, r0, r0, lsl #8
   16b7a:	eb0c 2e0c 	add.w	lr, ip, ip, lsl #8
   16b7e:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   16b82:	eb0c 2c0e 	add.w	ip, ip, lr, lsl #8
   16b86:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   16b8a:	f3c0 4007 	ubfx	r0, r0, #16, #8
   16b8e:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   16b92:	eb00 1000 	add.w	r0, r0, r0, lsl #4
   16b96:	3c01      	subs	r4, #1
   16b98:	4408      	add	r0, r1

	for (iterate = 0U; iterate < 3; iterate++) {
   16b9a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   16b9e:	b285      	uxth	r5, r0
	for (iterate = 0U; iterate < 3; iterate++) {
   16ba0:	d1d8      	bne.n	16b54 <lll_chan_sel_2+0xc>
	chan_next = prn_e % 37;
   16ba2:	481b      	ldr	r0, [pc, #108]	; (16c10 <lll_chan_sel_2+0xc8>)
		prn_e = chan_perm(prn_e);
		prn_e = chan_mam(prn_e, chan_id);
	}

	prn_e ^= chan_id;
   16ba4:	4069      	eors	r1, r5
	chan_next = prn_e % 37;
   16ba6:	fba0 5001 	umull	r5, r0, r0, r1
   16baa:	1a0d      	subs	r5, r1, r0
   16bac:	eb00 0055 	add.w	r0, r0, r5, lsr #1
   16bb0:	0940      	lsrs	r0, r0, #5
   16bb2:	eb00 05c0 	add.w	r5, r0, r0, lsl #3
   16bb6:	eb00 0085 	add.w	r0, r0, r5, lsl #2
   16bba:	1a08      	subs	r0, r1, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   16bbc:	f3c0 05c4 	ubfx	r5, r0, #3, #5
   16bc0:	f000 0607 	and.w	r6, r0, #7
   16bc4:	5d55      	ldrb	r5, [r2, r5]
   16bc6:	4135      	asrs	r5, r6
   16bc8:	07ed      	lsls	r5, r5, #31
	chan_next = prn_e % 37;
   16bca:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   16bcc:	d41a      	bmi.n	16c04 <lll_chan_sel_2+0xbc>
		chan_index = ((uint32_t)chan_count * prn_e) >> 16;
   16bce:	fb01 f303 	mul.w	r3, r1, r3
   16bd2:	1e56      	subs	r6, r2, #1
   16bd4:	f3c3 4307 	ubfx	r3, r3, #16, #8
	while (byte_count--) {
   16bd8:	3204      	adds	r2, #4
		bite = *chan_map;
   16bda:	f104 0508 	add.w	r5, r4, #8
   16bde:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		while (bit_count--) {
   16be2:	4620      	mov	r0, r4
   16be4:	b2ec      	uxtb	r4, r5
			if (bite & 0x01) {
   16be6:	f011 0f01 	tst.w	r1, #1
			chan_next++;
   16bea:	f100 0501 	add.w	r5, r0, #1
			bite >>= 1;
   16bee:	ea4f 0151 	mov.w	r1, r1, lsr #1
			if (bite & 0x01) {
   16bf2:	d002      	beq.n	16bfa <lll_chan_sel_2+0xb2>
				if (chan_index == 0U) {
   16bf4:	b133      	cbz	r3, 16c04 <lll_chan_sel_2+0xbc>
				chan_index--;
   16bf6:	3b01      	subs	r3, #1
   16bf8:	b2db      	uxtb	r3, r3
			chan_next++;
   16bfa:	b2e8      	uxtb	r0, r5
		while (bit_count--) {
   16bfc:	42a0      	cmp	r0, r4
   16bfe:	d1f2      	bne.n	16be6 <lll_chan_sel_2+0x9e>
	while (byte_count--) {
   16c00:	42b2      	cmp	r2, r6
   16c02:	d1ea      	bne.n	16bda <lll_chan_sel_2+0x92>
}
   16c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16c06:	bf00      	nop
   16c08:	00022110 	.word	0x00022110
   16c0c:	00088440 	.word	0x00088440
   16c10:	bacf914d 	.word	0xbacf914d

00016c14 <wl_find>:
		wl[i].taken = 0U;
	}
}

static uint8_t wl_find(uint8_t addr_type, uint8_t *addr, uint8_t *free)
{
   16c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16c18:	4688      	mov	r8, r1
	int i;

	if (free) {
   16c1a:	4615      	mov	r5, r2
   16c1c:	b10a      	cbz	r2, 16c22 <wl_find+0xe>
		*free = FILTER_IDX_NONE;
   16c1e:	23ff      	movs	r3, #255	; 0xff
   16c20:	7013      	strb	r3, [r2, #0]
   16c22:	4e17      	ldr	r6, [pc, #92]	; (16c80 <wl_find+0x6c>)
	}

	for (i = 0; i < WL_SIZE; i++) {
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   16c24:	f000 0701 	and.w	r7, r0, #1
   16c28:	f106 0902 	add.w	r9, r6, #2
{
   16c2c:	2400      	movs	r4, #0
   16c2e:	e004      	b.n	16c3a <wl_find+0x26>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   16c30:	42ba      	cmp	r2, r7
   16c32:	d014      	beq.n	16c5e <wl_find+0x4a>
	for (i = 0; i < WL_SIZE; i++) {
   16c34:	3401      	adds	r4, #1
   16c36:	2c08      	cmp	r4, #8
   16c38:	d00e      	beq.n	16c58 <wl_find+0x44>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   16c3a:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   16c3e:	07d9      	lsls	r1, r3, #31
   16c40:	f3c3 0240 	ubfx	r2, r3, #1, #1
   16c44:	d4f4      	bmi.n	16c30 <wl_find+0x1c>
			return i;
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   16c46:	2d00      	cmp	r5, #0
   16c48:	d0f4      	beq.n	16c34 <wl_find+0x20>
   16c4a:	782b      	ldrb	r3, [r5, #0]
   16c4c:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   16c4e:	bf08      	it	eq
   16c50:	702c      	strbeq	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
   16c52:	3401      	adds	r4, #1
   16c54:	2c08      	cmp	r4, #8
   16c56:	d1f0      	bne.n	16c3a <wl_find+0x26>
		}
	}

	return FILTER_IDX_NONE;
   16c58:	20ff      	movs	r0, #255	; 0xff
}
   16c5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   16c5e:	2206      	movs	r2, #6
   16c60:	4641      	mov	r1, r8
   16c62:	eb09 00c4 	add.w	r0, r9, r4, lsl #3
   16c66:	f00c ffbc 	bl	23be2 <memcmp>
   16c6a:	b130      	cbz	r0, 16c7a <wl_find+0x66>
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   16c6c:	2d00      	cmp	r5, #0
   16c6e:	d0e1      	beq.n	16c34 <wl_find+0x20>
   16c70:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   16c74:	07db      	lsls	r3, r3, #31
   16c76:	d4dd      	bmi.n	16c34 <wl_find+0x20>
   16c78:	e7e7      	b.n	16c4a <wl_find+0x36>
			return i;
   16c7a:	b2e0      	uxtb	r0, r4
   16c7c:	e7ed      	b.n	16c5a <wl_find+0x46>
   16c7e:	bf00      	nop
   16c80:	20002668 	.word	0x20002668

00016c84 <filter_insert>:
}
#endif /* !CONFIG_BT_CTLR_PRIVACY */

static void filter_insert(struct lll_filter *filter, int index, uint8_t addr_type,
			   uint8_t *bdaddr)
{
   16c84:	b430      	push	{r4, r5}
	filter->enable_bitmask |= BIT(index);
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   16c86:	7845      	ldrb	r5, [r0, #1]
	filter->enable_bitmask |= BIT(index);
   16c88:	7804      	ldrb	r4, [r0, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   16c8a:	408a      	lsls	r2, r1
   16c8c:	4315      	orrs	r5, r2
	filter->enable_bitmask |= BIT(index);
   16c8e:	2201      	movs	r2, #1
   16c90:	408a      	lsls	r2, r1
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   16c92:	eb01 0141 	add.w	r1, r1, r1, lsl #1
	filter->enable_bitmask |= BIT(index);
   16c96:	4314      	orrs	r4, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   16c98:	0049      	lsls	r1, r1, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   16c9a:	7045      	strb	r5, [r0, #1]
	filter->enable_bitmask |= BIT(index);
   16c9c:	7004      	strb	r4, [r0, #0]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   16c9e:	3102      	adds	r1, #2
   16ca0:	681a      	ldr	r2, [r3, #0]
   16ca2:	5042      	str	r2, [r0, r1]
   16ca4:	4401      	add	r1, r0
   16ca6:	889b      	ldrh	r3, [r3, #4]
   16ca8:	808b      	strh	r3, [r1, #4]
}
   16caa:	bc30      	pop	{r4, r5}
   16cac:	4770      	bx	lr
   16cae:	bf00      	nop

00016cb0 <wl_update>:
{
   16cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16cb4:	4d16      	ldr	r5, [pc, #88]	; (16d10 <wl_update+0x60>)
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   16cb6:	f8df 8060 	ldr.w	r8, [pc, #96]	; 16d18 <wl_update+0x68>
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   16cba:	4f16      	ldr	r7, [pc, #88]	; (16d14 <wl_update+0x64>)
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   16cbc:	f8df 905c 	ldr.w	r9, [pc, #92]	; 16d1c <wl_update+0x6c>
   16cc0:	1eae      	subs	r6, r5, #2
{
   16cc2:	2400      	movs	r4, #0
		if (!wl[i].taken) {
   16cc4:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   16cc8:	f013 0f01 	tst.w	r3, #1
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   16ccc:	4621      	mov	r1, r4
   16cce:	462b      	mov	r3, r5
   16cd0:	4638      	mov	r0, r7
		if (!wl[i].taken) {
   16cd2:	d015      	beq.n	16d00 <wl_update+0x50>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   16cd4:	f898 2000 	ldrb.w	r2, [r8]
   16cd8:	b162      	cbz	r2, 16cf4 <wl_update+0x44>
		j = wl[i].rl_idx;
   16cda:	f815 2c01 	ldrb.w	r2, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   16cde:	2a07      	cmp	r2, #7
   16ce0:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
   16ce4:	d806      	bhi.n	16cf4 <wl_update+0x44>
   16ce6:	f819 203c 	ldrb.w	r2, [r9, ip, lsl #3]
   16cea:	f012 0f04 	tst.w	r2, #4
   16cee:	d001      	beq.n	16cf4 <wl_update+0x44>
   16cf0:	06d2      	lsls	r2, r2, #27
   16cf2:	d505      	bpl.n	16d00 <wl_update+0x50>
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   16cf4:	f816 2034 	ldrb.w	r2, [r6, r4, lsl #3]
   16cf8:	f3c2 0240 	ubfx	r2, r2, #1, #1
   16cfc:	f7ff ffc2 	bl	16c84 <filter_insert>
	for (i = 0U; i < WL_SIZE; i++) {
   16d00:	3401      	adds	r4, #1
   16d02:	2c08      	cmp	r4, #8
   16d04:	f105 0508 	add.w	r5, r5, #8
   16d08:	d1dc      	bne.n	16cc4 <wl_update+0x14>
}
   16d0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   16d0e:	bf00      	nop
   16d10:	2000266a 	.word	0x2000266a
   16d14:	200026a8 	.word	0x200026a8
   16d18:	200035d6 	.word	0x200035d6
   16d1c:	200024f0 	.word	0x200024f0

00016d20 <rl_update>:
{
   16d20:	b570      	push	{r4, r5, r6, lr}
   16d22:	4d0c      	ldr	r5, [pc, #48]	; (16d54 <rl_update+0x34>)
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   16d24:	480c      	ldr	r0, [pc, #48]	; (16d58 <rl_update+0x38>)
   16d26:	1c6e      	adds	r6, r5, #1
{
   16d28:	2400      	movs	r4, #0
   16d2a:	e002      	b.n	16d32 <rl_update+0x12>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   16d2c:	3401      	adds	r4, #1
   16d2e:	2c08      	cmp	r4, #8
   16d30:	d00f      	beq.n	16d52 <rl_update+0x32>
		if (rl[i].taken) {
   16d32:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   16d36:	00d3      	lsls	r3, r2, #3
   16d38:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
   16d3c:	07d1      	lsls	r1, r2, #31
   16d3e:	d5f5      	bpl.n	16d2c <rl_update+0xc>
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   16d40:	4621      	mov	r1, r4
   16d42:	4433      	add	r3, r6
   16d44:	f3c2 1280 	ubfx	r2, r2, #6, #1
   16d48:	3401      	adds	r4, #1
   16d4a:	f7ff ff9b 	bl	16c84 <filter_insert>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   16d4e:	2c08      	cmp	r4, #8
   16d50:	d1ef      	bne.n	16d32 <rl_update+0x12>
}
   16d52:	bd70      	pop	{r4, r5, r6, pc}
   16d54:	200024f0 	.word	0x200024f0
   16d58:	20002630 	.word	0x20002630

00016d5c <ll_wl_size_get>:
}
   16d5c:	2008      	movs	r0, #8
   16d5e:	4770      	bx	lr

00016d60 <ll_wl_clear>:
{
   16d60:	b510      	push	{r4, lr}
	if (ull_adv_filter_pol_get(0)) {
   16d62:	2000      	movs	r0, #0
   16d64:	f7fa ff44 	bl	11bf0 <ull_adv_filter_pol_get>
   16d68:	b9d8      	cbnz	r0, 16da2 <ll_wl_clear+0x42>
   16d6a:	4a0f      	ldr	r2, [pc, #60]	; (16da8 <ll_wl_clear+0x48>)
			rl[j].wl = 0U;
   16d6c:	4c0f      	ldr	r4, [pc, #60]	; (16dac <ll_wl_clear+0x4c>)
		uint8_t j = wl[i].rl_idx;
   16d6e:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   16d72:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   16d74:	2b07      	cmp	r3, #7
			rl[j].wl = 0U;
   16d76:	eb03 0183 	add.w	r1, r3, r3, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   16d7a:	d805      	bhi.n	16d88 <ll_wl_clear+0x28>
			rl[j].wl = 0U;
   16d7c:	f814 3031 	ldrb.w	r3, [r4, r1, lsl #3]
   16d80:	f36f 1345 	bfc	r3, #5, #1
   16d84:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
		wl[i].taken = 0U;
   16d88:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   16d8c:	f36f 0300 	bfc	r3, #0, #1
   16d90:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   16d94:	3001      	adds	r0, #1
   16d96:	2808      	cmp	r0, #8
   16d98:	d1e9      	bne.n	16d6e <ll_wl_clear+0xe>
	wl_anon = 0U;
   16d9a:	4b05      	ldr	r3, [pc, #20]	; (16db0 <ll_wl_clear+0x50>)
   16d9c:	2000      	movs	r0, #0
   16d9e:	7018      	strb	r0, [r3, #0]
}
   16da0:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   16da2:	200c      	movs	r0, #12
}
   16da4:	bd10      	pop	{r4, pc}
   16da6:	bf00      	nop
   16da8:	20002668 	.word	0x20002668
   16dac:	200024f0 	.word	0x200024f0
   16db0:	200035d7 	.word	0x200035d7

00016db4 <ll_wl_remove>:
{
   16db4:	b538      	push	{r3, r4, r5, lr}
   16db6:	4605      	mov	r5, r0
	if (ull_adv_filter_pol_get(0)) {
   16db8:	2000      	movs	r0, #0
   16dba:	f7fa ff19 	bl	11bf0 <ull_adv_filter_pol_get>
   16dbe:	bb30      	cbnz	r0, 16e0e <ll_wl_remove+0x5a>
   16dc0:	4604      	mov	r4, r0
	if (addr->type == ADDR_TYPE_ANON) {
   16dc2:	7828      	ldrb	r0, [r5, #0]
   16dc4:	28ff      	cmp	r0, #255	; 0xff
   16dc6:	d01e      	beq.n	16e06 <ll_wl_remove+0x52>
	uint8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   16dc8:	1c69      	adds	r1, r5, #1
   16dca:	4622      	mov	r2, r4
   16dcc:	f7ff ff22 	bl	16c14 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   16dd0:	2807      	cmp	r0, #7
   16dd2:	d901      	bls.n	16dd8 <ll_wl_remove+0x24>
   16dd4:	2002      	movs	r0, #2
}
   16dd6:	bd38      	pop	{r3, r4, r5, pc}
		uint8_t j = wl[i].rl_idx;
   16dd8:	4a0e      	ldr	r2, [pc, #56]	; (16e14 <ll_wl_remove+0x60>)
   16dda:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   16dde:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   16de0:	2b07      	cmp	r3, #7
   16de2:	d808      	bhi.n	16df6 <ll_wl_remove+0x42>
			rl[j].wl = 0U;
   16de4:	490c      	ldr	r1, [pc, #48]	; (16e18 <ll_wl_remove+0x64>)
   16de6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   16dea:	f811 5033 	ldrb.w	r5, [r1, r3, lsl #3]
   16dee:	f364 1545 	bfi	r5, r4, #5, #1
   16df2:	f801 5033 	strb.w	r5, [r1, r3, lsl #3]
		wl[i].taken = 0U;
   16df6:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   16dfa:	f36f 0300 	bfc	r3, #0, #1
   16dfe:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
		return 0;
   16e02:	2000      	movs	r0, #0
}
   16e04:	bd38      	pop	{r3, r4, r5, pc}
		wl_anon = 0U;
   16e06:	4b05      	ldr	r3, [pc, #20]	; (16e1c <ll_wl_remove+0x68>)
   16e08:	701c      	strb	r4, [r3, #0]
		return 0;
   16e0a:	4620      	mov	r0, r4
}
   16e0c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   16e0e:	200c      	movs	r0, #12
}
   16e10:	bd38      	pop	{r3, r4, r5, pc}
   16e12:	bf00      	nop
   16e14:	20002668 	.word	0x20002668
   16e18:	200024f0 	.word	0x200024f0
   16e1c:	200035d7 	.word	0x200035d7

00016e20 <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   16e20:	2807      	cmp	r0, #7
{
   16e22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16e26:	4604      	mov	r4, r0
   16e28:	460e      	mov	r6, r1
   16e2a:	4615      	mov	r5, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   16e2c:	d819      	bhi.n	16e62 <ll_rl_id_addr_get+0x42>
	LL_ASSERT(rl[rl_idx].taken);
   16e2e:	4f1a      	ldr	r7, [pc, #104]	; (16e98 <ll_rl_id_addr_get+0x78>)
   16e30:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   16e34:	ea4f 0884 	mov.w	r8, r4, lsl #2
   16e38:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   16e3c:	07db      	lsls	r3, r3, #31
   16e3e:	d51d      	bpl.n	16e7c <ll_rl_id_addr_get+0x5c>
	*id_addr_type = rl[rl_idx].id_addr_type;
   16e40:	44a0      	add	r8, r4
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   16e42:	2028      	movs	r0, #40	; 0x28
	*id_addr_type = rl[rl_idx].id_addr_type;
   16e44:	f817 3038 	ldrb.w	r3, [r7, r8, lsl #3]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   16e48:	fb00 7404 	mla	r4, r0, r4, r7
	*id_addr_type = rl[rl_idx].id_addr_type;
   16e4c:	f3c3 1380 	ubfx	r3, r3, #6, #1
   16e50:	7033      	strb	r3, [r6, #0]
   16e52:	f8d4 3001 	ldr.w	r3, [r4, #1]
   16e56:	602b      	str	r3, [r5, #0]
   16e58:	f8b4 3005 	ldrh.w	r3, [r4, #5]
   16e5c:	80ab      	strh	r3, [r5, #4]
}
   16e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   16e62:	4a0e      	ldr	r2, [pc, #56]	; (16e9c <ll_rl_id_addr_get+0x7c>)
   16e64:	490e      	ldr	r1, [pc, #56]	; (16ea0 <ll_rl_id_addr_get+0x80>)
   16e66:	480f      	ldr	r0, [pc, #60]	; (16ea4 <ll_rl_id_addr_get+0x84>)
   16e68:	23f3      	movs	r3, #243	; 0xf3
   16e6a:	f007 fd57 	bl	1e91c <printk>
   16e6e:	4040      	eors	r0, r0
   16e70:	f380 8811 	msr	BASEPRI, r0
   16e74:	f04f 0003 	mov.w	r0, #3
   16e78:	df02      	svc	2
   16e7a:	e7d8      	b.n	16e2e <ll_rl_id_addr_get+0xe>
	LL_ASSERT(rl[rl_idx].taken);
   16e7c:	4a07      	ldr	r2, [pc, #28]	; (16e9c <ll_rl_id_addr_get+0x7c>)
   16e7e:	490a      	ldr	r1, [pc, #40]	; (16ea8 <ll_rl_id_addr_get+0x88>)
   16e80:	4808      	ldr	r0, [pc, #32]	; (16ea4 <ll_rl_id_addr_get+0x84>)
   16e82:	23f4      	movs	r3, #244	; 0xf4
   16e84:	f007 fd4a 	bl	1e91c <printk>
   16e88:	4040      	eors	r0, r0
   16e8a:	f380 8811 	msr	BASEPRI, r0
   16e8e:	f04f 0003 	mov.w	r0, #3
   16e92:	df02      	svc	2
   16e94:	e7d4      	b.n	16e40 <ll_rl_id_addr_get+0x20>
   16e96:	bf00      	nop
   16e98:	200024f0 	.word	0x200024f0
   16e9c:	0002511c 	.word	0x0002511c
   16ea0:	00025160 	.word	0x00025160
   16ea4:	00024904 	.word	0x00024904
   16ea8:	0002516c 	.word	0x0002516c

00016eac <ll_rl_size_get>:
   16eac:	2008      	movs	r0, #8
   16eae:	4770      	bx	lr

00016eb0 <ll_rl_clear>:
{
   16eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   16eb2:	2000      	movs	r0, #0
   16eb4:	f7fa fe90 	bl	11bd8 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   16eb8:	bb98      	cbnz	r0, 16f22 <ll_rl_clear+0x72>
		rl[i].taken = 0U;
   16eba:	4b1b      	ldr	r3, [pc, #108]	; (16f28 <ll_rl_clear+0x78>)
	peer_irk_count = 0U;
   16ebc:	491b      	ldr	r1, [pc, #108]	; (16f2c <ll_rl_clear+0x7c>)
		rl[i].taken = 0U;
   16ebe:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   16ec2:	f893 c000 	ldrb.w	ip, [r3]
   16ec6:	f893 7028 	ldrb.w	r7, [r3, #40]	; 0x28
   16eca:	f893 6078 	ldrb.w	r6, [r3, #120]	; 0x78
   16ece:	f893 50a0 	ldrb.w	r5, [r3, #160]	; 0xa0
   16ed2:	f893 40c8 	ldrb.w	r4, [r3, #200]	; 0xc8
	peer_irk_count = 0U;
   16ed6:	7008      	strb	r0, [r1, #0]
		rl[i].taken = 0U;
   16ed8:	f360 0200 	bfi	r2, r0, #0, #1
   16edc:	f893 10f0 	ldrb.w	r1, [r3, #240]	; 0xf0
   16ee0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
   16ee4:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
   16ee8:	f360 0c00 	bfi	ip, r0, #0, #1
   16eec:	f360 0700 	bfi	r7, r0, #0, #1
   16ef0:	f360 0600 	bfi	r6, r0, #0, #1
   16ef4:	f360 0500 	bfi	r5, r0, #0, #1
   16ef8:	f360 0400 	bfi	r4, r0, #0, #1
   16efc:	f360 0100 	bfi	r1, r0, #0, #1
   16f00:	f360 0200 	bfi	r2, r0, #0, #1
   16f04:	f883 c000 	strb.w	ip, [r3]
   16f08:	f883 7028 	strb.w	r7, [r3, #40]	; 0x28
   16f0c:	f883 6078 	strb.w	r6, [r3, #120]	; 0x78
   16f10:	f883 50a0 	strb.w	r5, [r3, #160]	; 0xa0
   16f14:	f883 40c8 	strb.w	r4, [r3, #200]	; 0xc8
   16f18:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
   16f1c:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
}
   16f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   16f22:	200c      	movs	r0, #12
}
   16f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16f26:	bf00      	nop
   16f28:	200024f0 	.word	0x200024f0
   16f2c:	200035d5 	.word	0x200035d5

00016f30 <ll_rl_enable>:
{
   16f30:	b510      	push	{r4, lr}
   16f32:	4604      	mov	r4, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   16f34:	2000      	movs	r0, #0
   16f36:	f7fa fe4f 	bl	11bd8 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   16f3a:	b958      	cbnz	r0, 16f54 <ll_rl_enable+0x24>
	switch (enable) {
   16f3c:	b134      	cbz	r4, 16f4c <ll_rl_enable+0x1c>
   16f3e:	2c01      	cmp	r4, #1
   16f40:	d001      	beq.n	16f46 <ll_rl_enable+0x16>
   16f42:	2012      	movs	r0, #18
}
   16f44:	bd10      	pop	{r4, pc}
		rl_enable = 1U;
   16f46:	4b04      	ldr	r3, [pc, #16]	; (16f58 <ll_rl_enable+0x28>)
   16f48:	701c      	strb	r4, [r3, #0]
}
   16f4a:	bd10      	pop	{r4, pc}
		rl_enable = 0U;
   16f4c:	4b02      	ldr	r3, [pc, #8]	; (16f58 <ll_rl_enable+0x28>)
   16f4e:	701c      	strb	r4, [r3, #0]
	return 0;
   16f50:	4620      	mov	r0, r4
}
   16f52:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   16f54:	200c      	movs	r0, #12
}
   16f56:	bd10      	pop	{r4, pc}
   16f58:	200035d6 	.word	0x200035d6

00016f5c <ll_rl_timeout_set>:
	rpa_timeout_ms = timeout * 1000U;
   16f5c:	4a03      	ldr	r2, [pc, #12]	; (16f6c <ll_rl_timeout_set+0x10>)
   16f5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   16f62:	fb03 f300 	mul.w	r3, r3, r0
   16f66:	6013      	str	r3, [r2, #0]
}
   16f68:	4770      	bx	lr
   16f6a:	bf00      	nop
   16f6c:	20002664 	.word	0x20002664

00016f70 <ull_filter_adv_scan_state_cb>:
{
   16f70:	b510      	push	{r4, lr}
	if (bm) {
   16f72:	b1a8      	cbz	r0, 16fa0 <ull_filter_adv_scan_state_cb+0x30>
	k_delayed_work_submit(&rpa_work, K_MSEC(rpa_timeout_ms));
   16f74:	4b0e      	ldr	r3, [pc, #56]	; (16fb0 <ull_filter_adv_scan_state_cb+0x40>)
   16f76:	681a      	ldr	r2, [r3, #0]
   16f78:	f240 30e7 	movw	r0, #999	; 0x3e7
   16f7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   16f80:	2100      	movs	r1, #0
   16f82:	fbe3 0102 	umlal	r0, r1, r3, r2
   16f86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16f8a:	2300      	movs	r3, #0
   16f8c:	f7e9 fd56 	bl	a3c <__aeabi_uldivmod>
}
   16f90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16f94:	4602      	mov	r2, r0
   16f96:	460b      	mov	r3, r1
	return k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   16f98:	4806      	ldr	r0, [pc, #24]	; (16fb4 <ull_filter_adv_scan_state_cb+0x44>)
   16f9a:	4907      	ldr	r1, [pc, #28]	; (16fb8 <ull_filter_adv_scan_state_cb+0x48>)
   16f9c:	f007 b87c 	b.w	1e098 <k_work_reschedule_for_queue>
	return k_work_delayable_busy_get(dwork) != 0;
   16fa0:	4805      	ldr	r0, [pc, #20]	; (16fb8 <ull_filter_adv_scan_state_cb+0x48>)
   16fa2:	f00c fc18 	bl	237d6 <k_work_delayable_busy_get>
   16fa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	int rc = k_work_cancel_delayable(&work->work);
   16faa:	4803      	ldr	r0, [pc, #12]	; (16fb8 <ull_filter_adv_scan_state_cb+0x48>)
   16fac:	f00c bc27 	b.w	237fe <k_work_cancel_delayable>
   16fb0:	20002664 	.word	0x20002664
   16fb4:	200015c0 	.word	0x200015c0
   16fb8:	20001490 	.word	0x20001490

00016fbc <ull_filter_adv_update>:
{
   16fbc:	b508      	push	{r3, lr}

static void filter_clear(struct lll_filter *filter)
{
	filter->enable_bitmask = 0;
   16fbe:	4b09      	ldr	r3, [pc, #36]	; (16fe4 <ull_filter_adv_update+0x28>)
   16fc0:	2200      	movs	r2, #0
   16fc2:	801a      	strh	r2, [r3, #0]
	if (adv_fp &&
   16fc4:	b930      	cbnz	r0, 16fd4 <ull_filter_adv_update+0x18>
	if (rl_enable &&
   16fc6:	4b08      	ldr	r3, [pc, #32]	; (16fe8 <ull_filter_adv_update+0x2c>)
	filter->enable_bitmask = 0;
   16fc8:	4a08      	ldr	r2, [pc, #32]	; (16fec <ull_filter_adv_update+0x30>)
	if (rl_enable &&
   16fca:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   16fcc:	2100      	movs	r1, #0
   16fce:	8011      	strh	r1, [r2, #0]
	if (rl_enable &&
   16fd0:	b91b      	cbnz	r3, 16fda <ull_filter_adv_update+0x1e>
}
   16fd2:	bd08      	pop	{r3, pc}
		wl_update();
   16fd4:	f7ff fe6c 	bl	16cb0 <wl_update>
   16fd8:	e7f5      	b.n	16fc6 <ull_filter_adv_update+0xa>
}
   16fda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   16fde:	f7ff be9f 	b.w	16d20 <rl_update>
   16fe2:	bf00      	nop
   16fe4:	200026a8 	.word	0x200026a8
   16fe8:	200035d6 	.word	0x200035d6
   16fec:	20002630 	.word	0x20002630

00016ff0 <ull_filter_rpa_update>:
{
   16ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ff4:	4682      	mov	sl, r0
   16ff6:	b087      	sub	sp, #28
	return z_impl_k_uptime_ticks();
   16ff8:	f00c fc59 	bl	238ae <z_impl_k_uptime_ticks>
   16ffc:	0142      	lsls	r2, r0, #5
   16ffe:	014b      	lsls	r3, r1, #5
   17000:	ebb2 0800 	subs.w	r8, r2, r0
   17004:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
   17008:	eb63 0301 	sbc.w	r3, r3, r1
   1700c:	009b      	lsls	r3, r3, #2
   1700e:	ea4f 0288 	mov.w	r2, r8, lsl #2
   17012:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
   17016:	eb12 0800 	adds.w	r8, r2, r0
   1701a:	eb43 0101 	adc.w	r1, r3, r1
   1701e:	00c9      	lsls	r1, r1, #3
   17020:	ea41 7158 	orr.w	r1, r1, r8, lsr #29
   17024:	ea4f 03c8 	mov.w	r3, r8, lsl #3
   17028:	ea4f 38d3 	mov.w	r8, r3, lsr #15
   1702c:	0bc8      	lsrs	r0, r1, #15
   1702e:	ea48 4841 	orr.w	r8, r8, r1, lsl #17
   17032:	9001      	str	r0, [sp, #4]
	bool all = timeout || (rpa_last_ms == -1) ||
   17034:	f1ba 0f00 	cmp.w	sl, #0
   17038:	d117      	bne.n	1706a <ull_filter_rpa_update+0x7a>
   1703a:	4b5d      	ldr	r3, [pc, #372]	; (171b0 <ull_filter_rpa_update+0x1c0>)
   1703c:	e9d3 2300 	ldrd	r2, r3, [r3]
   17040:	1c59      	adds	r1, r3, #1
   17042:	bf08      	it	eq
   17044:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   17048:	d00f      	beq.n	1706a <ull_filter_rpa_update+0x7a>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   1704a:	495a      	ldr	r1, [pc, #360]	; (171b4 <ull_filter_rpa_update+0x1c4>)
   1704c:	6809      	ldr	r1, [r1, #0]
   1704e:	ebb8 0402 	subs.w	r4, r8, r2
   17052:	eb60 0503 	sbc.w	r5, r0, r3
   17056:	2300      	movs	r3, #0
	bool all = timeout || (rpa_last_ms == -1) ||
   17058:	428c      	cmp	r4, r1
   1705a:	eb75 0303 	sbcs.w	r3, r5, r3
   1705e:	bfac      	ite	ge
   17060:	f04f 0901 	movge.w	r9, #1
   17064:	f04f 0900 	movlt.w	r9, #0
   17068:	e001      	b.n	1706e <ull_filter_rpa_update+0x7e>
   1706a:	f04f 0901 	mov.w	r9, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1706e:	4e52      	ldr	r6, [pc, #328]	; (171b8 <ull_filter_rpa_update+0x1c8>)
   17070:	f8df b158 	ldr.w	fp, [pc, #344]	; 171cc <ull_filter_rpa_update+0x1dc>
   17074:	f1a6 0717 	sub.w	r7, r6, #23
	bool all = timeout || (rpa_last_ms == -1) ||
   17078:	2400      	movs	r4, #0
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   1707a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1707e:	00a5      	lsls	r5, r4, #2
   17080:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   17084:	07da      	lsls	r2, r3, #31
   17086:	d515      	bpl.n	170b4 <ull_filter_rpa_update+0xc4>
   17088:	f1b9 0f00 	cmp.w	r9, #0
   1708c:	d101      	bne.n	17092 <ull_filter_rpa_update+0xa2>
   1708e:	0798      	lsls	r0, r3, #30
   17090:	d410      	bmi.n	170b4 <ull_filter_rpa_update+0xc4>
			if (rl[i].pirk) {
   17092:	192b      	adds	r3, r5, r4
   17094:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   17098:	0759      	lsls	r1, r3, #29
   1709a:	d432      	bmi.n	17102 <ull_filter_rpa_update+0x112>
			if (rl[i].lirk) {
   1709c:	192b      	adds	r3, r5, r4
   1709e:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   170a2:	071a      	lsls	r2, r3, #28
   170a4:	d419      	bmi.n	170da <ull_filter_rpa_update+0xea>
			rl[i].rpas_ready = 1U;
   170a6:	4425      	add	r5, r4
   170a8:	f817 3035 	ldrb.w	r3, [r7, r5, lsl #3]
   170ac:	f043 0302 	orr.w	r3, r3, #2
   170b0:	f807 3035 	strb.w	r3, [r7, r5, lsl #3]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   170b4:	3401      	adds	r4, #1
   170b6:	2c08      	cmp	r4, #8
   170b8:	f106 0628 	add.w	r6, r6, #40	; 0x28
   170bc:	d1dd      	bne.n	1707a <ull_filter_rpa_update+0x8a>
	if (all) {
   170be:	f1b9 0f00 	cmp.w	r9, #0
   170c2:	d004      	beq.n	170ce <ull_filter_rpa_update+0xde>
		rpa_last_ms = now;
   170c4:	4b3a      	ldr	r3, [pc, #232]	; (171b0 <ull_filter_rpa_update+0x1c0>)
   170c6:	9a01      	ldr	r2, [sp, #4]
   170c8:	f8c3 8000 	str.w	r8, [r3]
   170cc:	605a      	str	r2, [r3, #4]
	if (timeout) {
   170ce:	f1ba 0f00 	cmp.w	sl, #0
   170d2:	d139      	bne.n	17148 <ull_filter_rpa_update+0x158>
}
   170d4:	b007      	add	sp, #28
   170d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   170da:	a902      	add	r1, sp, #8
   170dc:	f1a6 0010 	sub.w	r0, r6, #16
   170e0:	f009 fd91 	bl	20c06 <bt_rpa_create>
				LL_ASSERT(!err);
   170e4:	2800      	cmp	r0, #0
   170e6:	d155      	bne.n	17194 <ull_filter_rpa_update+0x1a4>
				bt_addr_copy(&local_rpas[i], &rpa);
   170e8:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   170ec:	eb0b 0342 	add.w	r3, fp, r2, lsl #1
   170f0:	9802      	ldr	r0, [sp, #8]
   170f2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   170f6:	f84b 0012 	str.w	r0, [fp, r2, lsl #1]
				rl[i].local_rpa = &local_rpas[i];
   170fa:	f8c6 300d 	str.w	r3, [r6, #13]
   170fe:	8099      	strh	r1, [r3, #4]
   17100:	e7d1      	b.n	170a6 <ull_filter_rpa_update+0xb6>
	psrc += length - 1;
   17102:	7833      	ldrb	r3, [r6, #0]
   17104:	4a2d      	ldr	r2, [pc, #180]	; (171bc <ull_filter_rpa_update+0x1cc>)
   17106:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   1710a:	320f      	adds	r2, #15
	for (; length > 0; length--) {
   1710c:	f10d 0307 	add.w	r3, sp, #7
   17110:	f10d 0017 	add.w	r0, sp, #23
		*pdst++ = *psrc--;
   17114:	f812 1901 	ldrb.w	r1, [r2], #-1
   17118:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   1711c:	4283      	cmp	r3, r0
   1711e:	d1f9      	bne.n	17114 <ull_filter_rpa_update+0x124>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   17120:	1df1      	adds	r1, r6, #7
   17122:	a802      	add	r0, sp, #8
   17124:	f009 fd6f 	bl	20c06 <bt_rpa_create>
				LL_ASSERT(!err);
   17128:	2800      	cmp	r0, #0
   1712a:	d0b7      	beq.n	1709c <ull_filter_rpa_update+0xac>
   1712c:	4a24      	ldr	r2, [pc, #144]	; (171c0 <ull_filter_rpa_update+0x1d0>)
   1712e:	4925      	ldr	r1, [pc, #148]	; (171c4 <ull_filter_rpa_update+0x1d4>)
   17130:	4825      	ldr	r0, [pc, #148]	; (171c8 <ull_filter_rpa_update+0x1d8>)
   17132:	f240 2323 	movw	r3, #547	; 0x223
   17136:	f007 fbf1 	bl	1e91c <printk>
   1713a:	4040      	eors	r0, r0
   1713c:	f380 8811 	msr	BASEPRI, r0
   17140:	f04f 0003 	mov.w	r0, #3
   17144:	df02      	svc	2
   17146:	e7a9      	b.n	1709c <ull_filter_rpa_update+0xac>
		adv = ull_adv_is_enabled_get(0);
   17148:	2000      	movs	r0, #0
   1714a:	f7fa fd37 	bl	11bbc <ull_adv_is_enabled_get>
		if (adv) {
   1714e:	4604      	mov	r4, r0
   17150:	2800      	cmp	r0, #0
   17152:	d0bf      	beq.n	170d4 <ull_filter_rpa_update+0xe4>
	if (adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   17154:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
   17158:	075b      	lsls	r3, r3, #29
   1715a:	d5bb      	bpl.n	170d4 <ull_filter_rpa_update+0xe4>
	if (adv->lll.rl_idx >= ARRAY_SIZE(rl)) {
   1715c:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
   17160:	2b07      	cmp	r3, #7
   17162:	d8b7      	bhi.n	170d4 <ull_filter_rpa_update+0xe4>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   17164:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   17168:	eb00 0383 	add.w	r3, r0, r3, lsl #2
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   1716c:	a902      	add	r1, sp, #8
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   1716e:	6add      	ldr	r5, [r3, #44]	; 0x2c
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   17170:	3028      	adds	r0, #40	; 0x28
   17172:	f001 f9cd 	bl	18510 <lll_adv_pdu_alloc>
	memcpy(pdu, prev, PDU_AC_LL_HEADER_SIZE + prev->len);
   17176:	786a      	ldrb	r2, [r5, #1]
   17178:	4629      	mov	r1, r5
   1717a:	3202      	adds	r2, #2
   1717c:	4605      	mov	r5, r0
   1717e:	f00c fd3e 	bl	23bfe <memcpy>
	ull_adv_pdu_update_addrs(adv, pdu);
   17182:	4629      	mov	r1, r5
   17184:	4620      	mov	r0, r4
   17186:	f7fa fdc3 	bl	11d10 <ull_adv_pdu_update_addrs>
	pdu->last = idx;
   1718a:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1718e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
   17192:	e79f      	b.n	170d4 <ull_filter_rpa_update+0xe4>
				LL_ASSERT(!err);
   17194:	4a0a      	ldr	r2, [pc, #40]	; (171c0 <ull_filter_rpa_update+0x1d0>)
   17196:	490b      	ldr	r1, [pc, #44]	; (171c4 <ull_filter_rpa_update+0x1d4>)
   17198:	480b      	ldr	r0, [pc, #44]	; (171c8 <ull_filter_rpa_update+0x1d8>)
   1719a:	f44f 730c 	mov.w	r3, #560	; 0x230
   1719e:	f007 fbbd 	bl	1e91c <printk>
   171a2:	4040      	eors	r0, r0
   171a4:	f380 8811 	msr	BASEPRI, r0
   171a8:	f04f 0003 	mov.w	r0, #3
   171ac:	df02      	svc	2
   171ae:	e79b      	b.n	170e8 <ull_filter_rpa_update+0xf8>
   171b0:	20001488 	.word	0x20001488
   171b4:	20002664 	.word	0x20002664
   171b8:	20002507 	.word	0x20002507
   171bc:	20002470 	.word	0x20002470
   171c0:	0002511c 	.word	0x0002511c
   171c4:	00024b9c 	.word	0x00024b9c
   171c8:	00024904 	.word	0x00024904
   171cc:	20002438 	.word	0x20002438

000171d0 <rpa_timeout>:
{
   171d0:	b510      	push	{r4, lr}
	ull_filter_rpa_update(true);
   171d2:	2001      	movs	r0, #1
   171d4:	f7ff ff0c 	bl	16ff0 <ull_filter_rpa_update>
	k_delayed_work_submit(&rpa_work, K_MSEC(rpa_timeout_ms));
   171d8:	4b0a      	ldr	r3, [pc, #40]	; (17204 <rpa_timeout+0x34>)
   171da:	681a      	ldr	r2, [r3, #0]
   171dc:	f240 30e7 	movw	r0, #999	; 0x3e7
   171e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   171e4:	2100      	movs	r1, #0
   171e6:	fbe3 0102 	umlal	r0, r1, r3, r2
   171ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   171ee:	2300      	movs	r3, #0
   171f0:	f7e9 fc24 	bl	a3c <__aeabi_uldivmod>
}
   171f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   171f8:	4602      	mov	r2, r0
   171fa:	460b      	mov	r3, r1
	return k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   171fc:	4802      	ldr	r0, [pc, #8]	; (17208 <rpa_timeout+0x38>)
   171fe:	4903      	ldr	r1, [pc, #12]	; (1720c <rpa_timeout+0x3c>)
   17200:	f006 bf4a 	b.w	1e098 <k_work_reschedule_for_queue>
   17204:	20002664 	.word	0x20002664
   17208:	200015c0 	.word	0x200015c0
   1720c:	20001490 	.word	0x20001490

00017210 <ull_filter_adva_get>:
{
   17210:	b570      	push	{r4, r5, r6, lr}
	uint8_t idx = adv->lll.rl_idx;
   17212:	f890 4026 	ldrb.w	r4, [r0, #38]	; 0x26
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   17216:	2c07      	cmp	r4, #7
   17218:	d810      	bhi.n	1723c <ull_filter_adva_get+0x2c>
   1721a:	4d10      	ldr	r5, [pc, #64]	; (1725c <ull_filter_adva_get+0x4c>)
   1721c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   17220:	00a6      	lsls	r6, r4, #2
   17222:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   17226:	071a      	lsls	r2, r3, #28
   17228:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   1722c:	d505      	bpl.n	1723a <ull_filter_adva_get+0x2a>
		LL_ASSERT(rl[idx].rpas_ready);
   1722e:	079b      	lsls	r3, r3, #30
   17230:	d506      	bpl.n	17240 <ull_filter_adva_get+0x30>
		return rl[idx].local_rpa->val;
   17232:	4434      	add	r4, r6
   17234:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   17238:	6a68      	ldr	r0, [r5, #36]	; 0x24
}
   1723a:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   1723c:	2000      	movs	r0, #0
}
   1723e:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(rl[idx].rpas_ready);
   17240:	4a07      	ldr	r2, [pc, #28]	; (17260 <ull_filter_adva_get+0x50>)
   17242:	4908      	ldr	r1, [pc, #32]	; (17264 <ull_filter_adva_get+0x54>)
   17244:	4808      	ldr	r0, [pc, #32]	; (17268 <ull_filter_adva_get+0x58>)
   17246:	f240 2356 	movw	r3, #598	; 0x256
   1724a:	f007 fb67 	bl	1e91c <printk>
   1724e:	4040      	eors	r0, r0
   17250:	f380 8811 	msr	BASEPRI, r0
   17254:	f04f 0003 	mov.w	r0, #3
   17258:	df02      	svc	2
   1725a:	e7ea      	b.n	17232 <ull_filter_adva_get+0x22>
   1725c:	200024f0 	.word	0x200024f0
   17260:	0002511c 	.word	0x0002511c
   17264:	00025180 	.word	0x00025180
   17268:	00024904 	.word	0x00024904

0001726c <ull_filter_tgta_get>:
	uint8_t idx = adv->lll.rl_idx;
   1726c:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
	if (idx < ARRAY_SIZE(rl) && rl[idx].pirk) {
   17270:	2b07      	cmp	r3, #7
   17272:	d80e      	bhi.n	17292 <ull_filter_tgta_get+0x26>
   17274:	4908      	ldr	r1, [pc, #32]	; (17298 <ull_filter_tgta_get+0x2c>)
   17276:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1727a:	f811 2032 	ldrb.w	r2, [r1, r2, lsl #3]
   1727e:	f3c2 0080 	ubfx	r0, r2, #2, #1
   17282:	0752      	lsls	r2, r2, #29
   17284:	d506      	bpl.n	17294 <ull_filter_tgta_get+0x28>
		return rl[idx].peer_rpa.val;
   17286:	2028      	movs	r0, #40	; 0x28
   17288:	fb00 1303 	mla	r3, r0, r3, r1
   1728c:	f103 001e 	add.w	r0, r3, #30
   17290:	4770      	bx	lr
	return NULL;
   17292:	2000      	movs	r0, #0
}
   17294:	4770      	bx	lr
   17296:	bf00      	nop
   17298:	200024f0 	.word	0x200024f0

0001729c <ull_filter_rl_find>:
{
   1729c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   172a0:	468b      	mov	fp, r1
	if (free) {
   172a2:	4616      	mov	r6, r2
   172a4:	b10a      	cbz	r2, 172aa <ull_filter_rl_find+0xe>
		*free = FILTER_IDX_NONE;
   172a6:	23ff      	movs	r3, #255	; 0xff
   172a8:	7013      	strb	r3, [r2, #0]
   172aa:	f8df 8064 	ldr.w	r8, [pc, #100]	; 17310 <ull_filter_rl_find+0x74>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   172ae:	f000 0901 	and.w	r9, r0, #1
   172b2:	f108 0a01 	add.w	sl, r8, #1
{
   172b6:	2400      	movs	r4, #0
   172b8:	e004      	b.n	172c4 <ull_filter_rl_find+0x28>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   172ba:	454a      	cmp	r2, r9
   172bc:	d019      	beq.n	172f2 <ull_filter_rl_find+0x56>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   172be:	3401      	adds	r4, #1
   172c0:	2c08      	cmp	r4, #8
   172c2:	d012      	beq.n	172ea <ull_filter_rl_find+0x4e>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   172c4:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   172c8:	00e8      	lsls	r0, r5, #3
   172ca:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   172ce:	07d9      	lsls	r1, r3, #31
   172d0:	f3c3 1280 	ubfx	r2, r3, #6, #1
   172d4:	b2e7      	uxtb	r7, r4
   172d6:	d4f0      	bmi.n	172ba <ull_filter_rl_find+0x1e>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   172d8:	2e00      	cmp	r6, #0
   172da:	d0f0      	beq.n	172be <ull_filter_rl_find+0x22>
   172dc:	7833      	ldrb	r3, [r6, #0]
   172de:	3401      	adds	r4, #1
   172e0:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   172e2:	bf08      	it	eq
   172e4:	7037      	strbeq	r7, [r6, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   172e6:	2c08      	cmp	r4, #8
   172e8:	d1ec      	bne.n	172c4 <ull_filter_rl_find+0x28>
	return FILTER_IDX_NONE;
   172ea:	27ff      	movs	r7, #255	; 0xff
}
   172ec:	4638      	mov	r0, r7
   172ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   172f2:	4450      	add	r0, sl
   172f4:	2206      	movs	r2, #6
   172f6:	4659      	mov	r1, fp
   172f8:	f00c fc73 	bl	23be2 <memcmp>
   172fc:	2800      	cmp	r0, #0
   172fe:	d0f5      	beq.n	172ec <ull_filter_rl_find+0x50>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   17300:	2e00      	cmp	r6, #0
   17302:	d0dc      	beq.n	172be <ull_filter_rl_find+0x22>
   17304:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   17308:	07db      	lsls	r3, r3, #31
   1730a:	d4d8      	bmi.n	172be <ull_filter_rl_find+0x22>
   1730c:	e7e6      	b.n	172dc <ull_filter_rl_find+0x40>
   1730e:	bf00      	nop
   17310:	200024f0 	.word	0x200024f0

00017314 <ll_wl_add>:
{
   17314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17318:	4605      	mov	r5, r0
   1731a:	b082      	sub	sp, #8
	if (ull_adv_filter_pol_get(0)) {
   1731c:	2000      	movs	r0, #0
   1731e:	f7fa fc67 	bl	11bf0 <ull_adv_filter_pol_get>
   17322:	2800      	cmp	r0, #0
   17324:	d13e      	bne.n	173a4 <ll_wl_add+0x90>
   17326:	4604      	mov	r4, r0
	if (addr->type == ADDR_TYPE_ANON) {
   17328:	7828      	ldrb	r0, [r5, #0]
   1732a:	28ff      	cmp	r0, #255	; 0xff
   1732c:	d033      	beq.n	17396 <ll_wl_add+0x82>
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   1732e:	f105 0801 	add.w	r8, r5, #1
   17332:	4641      	mov	r1, r8
   17334:	f10d 0207 	add.w	r2, sp, #7
   17338:	f7ff fc6c 	bl	16c14 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   1733c:	2807      	cmp	r0, #7
   1733e:	d926      	bls.n	1738e <ll_wl_add+0x7a>
	} else if (j >= ARRAY_SIZE(wl)) {
   17340:	f89d 6007 	ldrb.w	r6, [sp, #7]
   17344:	2e07      	cmp	r6, #7
   17346:	d83e      	bhi.n	173c6 <ll_wl_add+0xb2>
	wl[i].id_addr_type = id_addr->type & 0x1;
   17348:	4f21      	ldr	r7, [pc, #132]	; (173d0 <ll_wl_add+0xbc>)
   1734a:	782a      	ldrb	r2, [r5, #0]
   1734c:	f817 3036 	ldrb.w	r3, [r7, r6, lsl #3]
   17350:	f362 0341 	bfi	r3, r2, #1, #1
   17354:	f807 3036 	strb.w	r3, [r7, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   17358:	2302      	movs	r3, #2
   1735a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   1735e:	f8d5 2001 	ldr.w	r2, [r5, #1]
   17362:	50fa      	str	r2, [r7, r3]
   17364:	443b      	add	r3, r7
   17366:	f8b5 2005 	ldrh.w	r2, [r5, #5]
   1736a:	809a      	strh	r2, [r3, #4]
	j = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1736c:	7828      	ldrb	r0, [r5, #0]
   1736e:	4622      	mov	r2, r4
   17370:	4641      	mov	r1, r8
   17372:	f7ff ff93 	bl	1729c <ull_filter_rl_find>
	if (j < ARRAY_SIZE(rl)) {
   17376:	2807      	cmp	r0, #7
   17378:	d918      	bls.n	173ac <ll_wl_add+0x98>
		wl[i].rl_idx = FILTER_IDX_NONE;
   1737a:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
   1737e:	22ff      	movs	r2, #255	; 0xff
   17380:	705a      	strb	r2, [r3, #1]
	wl[i].taken = 1U;
   17382:	f817 3036 	ldrb.w	r3, [r7, r6, lsl #3]
   17386:	f043 0301 	orr.w	r3, r3, #1
   1738a:	f807 3036 	strb.w	r3, [r7, r6, lsl #3]
	return 0;
   1738e:	2000      	movs	r0, #0
}
   17390:	b002      	add	sp, #8
   17392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		wl_anon = 1U;
   17396:	4b0f      	ldr	r3, [pc, #60]	; (173d4 <ll_wl_add+0xc0>)
   17398:	2201      	movs	r2, #1
		return 0;
   1739a:	4620      	mov	r0, r4
		wl_anon = 1U;
   1739c:	701a      	strb	r2, [r3, #0]
}
   1739e:	b002      	add	sp, #8
   173a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   173a4:	200c      	movs	r0, #12
}
   173a6:	b002      	add	sp, #8
   173a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rl[j].wl = 1U;
   173ac:	490a      	ldr	r1, [pc, #40]	; (173d8 <ll_wl_add+0xc4>)
   173ae:	eb00 0480 	add.w	r4, r0, r0, lsl #2
		wl[i].rl_idx = j;
   173b2:	eb07 02c6 	add.w	r2, r7, r6, lsl #3
		rl[j].wl = 1U;
   173b6:	f811 3034 	ldrb.w	r3, [r1, r4, lsl #3]
		wl[i].rl_idx = j;
   173ba:	7050      	strb	r0, [r2, #1]
		rl[j].wl = 1U;
   173bc:	f043 0320 	orr.w	r3, r3, #32
   173c0:	f801 3034 	strb.w	r3, [r1, r4, lsl #3]
   173c4:	e7dd      	b.n	17382 <ll_wl_add+0x6e>
   173c6:	2007      	movs	r0, #7
}
   173c8:	b002      	add	sp, #8
   173ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   173ce:	bf00      	nop
   173d0:	20002668 	.word	0x20002668
   173d4:	200035d7 	.word	0x200035d7
   173d8:	200024f0 	.word	0x200024f0

000173dc <ll_rl_add>:
{
   173dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   173e0:	4606      	mov	r6, r0
   173e2:	b085      	sub	sp, #20
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   173e4:	2000      	movs	r0, #0
{
   173e6:	460d      	mov	r5, r1
   173e8:	4617      	mov	r7, r2
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   173ea:	f7fa fbf5 	bl	11bd8 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   173ee:	2800      	cmp	r0, #0
   173f0:	f040 8099 	bne.w	17526 <ll_rl_add+0x14a>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, &j);
   173f4:	46b1      	mov	r9, r6
   173f6:	f10d 020f 	add.w	r2, sp, #15
   173fa:	f819 0b01 	ldrb.w	r0, [r9], #1
   173fe:	4649      	mov	r1, r9
   17400:	f7ff ff4c 	bl	1729c <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   17404:	2807      	cmp	r0, #7
   17406:	f240 80a0 	bls.w	1754a <ll_rl_add+0x16e>
	} else if (j >= ARRAY_SIZE(rl)) {
   1740a:	f89d 800f 	ldrb.w	r8, [sp, #15]
   1740e:	f1b8 0f07 	cmp.w	r8, #7
   17412:	f200 808c 	bhi.w	1752e <ll_rl_add+0x152>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   17416:	eb08 0288 	add.w	r2, r8, r8, lsl #2
   1741a:	00d2      	lsls	r2, r2, #3
   1741c:	4c4d      	ldr	r4, [pc, #308]	; (17554 <ll_rl_add+0x178>)
   1741e:	f8d9 1000 	ldr.w	r1, [r9]
   17422:	9201      	str	r2, [sp, #4]
   17424:	1c53      	adds	r3, r2, #1
	rl[i].id_addr_type = id_addr->type & 0x1;
   17426:	eb08 0a88 	add.w	sl, r8, r8, lsl #2
   1742a:	50e1      	str	r1, [r4, r3]
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   1742c:	4423      	add	r3, r4
   1742e:	f8b9 1004 	ldrh.w	r1, [r9, #4]
   17432:	8099      	strh	r1, [r3, #4]
	rl[i].id_addr_type = id_addr->type & 0x1;
   17434:	7831      	ldrb	r1, [r6, #0]
   17436:	f814 303a 	ldrb.w	r3, [r4, sl, lsl #3]
   1743a:	4693      	mov	fp, r2
   1743c:	f361 1386 	bfi	r3, r1, #6, #1
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   17440:	4628      	mov	r0, r5
   17442:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
   17444:	54a3      	strb	r3, [r4, r2]
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   17446:	f7f5 fe91 	bl	d16c <mem_nz>
   1744a:	f814 300b 	ldrb.w	r3, [r4, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   1744e:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   17450:	f360 0382 	bfi	r3, r0, #2, #1
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   17454:	4638      	mov	r0, r7
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   17456:	f804 300b 	strb.w	r3, [r4, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   1745a:	f7f5 fe87 	bl	d16c <mem_nz>
   1745e:	f814 300b 	ldrb.w	r3, [r4, fp]
	if (rl[i].pirk) {
   17462:	9a01      	ldr	r2, [sp, #4]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   17464:	f000 0001 	and.w	r0, r0, #1
   17468:	f360 03c3 	bfi	r3, r0, #3, #1
	if (rl[i].pirk) {
   1746c:	f013 0f04 	tst.w	r3, #4
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   17470:	f804 300b 	strb.w	r3, [r4, fp]
	rl[i].id_addr_type = id_addr->type & 0x1;
   17474:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
   17478:	ea4f 0b88 	mov.w	fp, r8, lsl #2
	if (rl[i].pirk) {
   1747c:	d01a      	beq.n	174b4 <ll_rl_add+0xd8>
		rl[i].pirk_idx = peer_irk_count;
   1747e:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 17560 <ll_rl_add+0x184>
		peer_irk_rl_ids[peer_irk_count] = i;
   17482:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 17564 <ll_rl_add+0x188>
		rl[i].pirk_idx = peer_irk_count;
   17486:	f89e 1000 	ldrb.w	r1, [lr]
   1748a:	4b33      	ldr	r3, [pc, #204]	; (17558 <ll_rl_add+0x17c>)
		peer_irk_rl_ids[peer_irk_count] = i;
   1748c:	f80c 8001 	strb.w	r8, [ip, r1]
		rl[i].pirk_idx = peer_irk_count;
   17490:	f88a 1017 	strb.w	r1, [sl, #23]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, IRK_SIZE);
   17494:	eb03 1c01 	add.w	ip, r3, r1, lsl #4
   17498:	3101      	adds	r1, #1
	psrc += length - 1;
   1749a:	f105 030f 	add.w	r3, r5, #15
   1749e:	f88e 1000 	strb.w	r1, [lr]
	for (; length > 0; length--) {
   174a2:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   174a6:	3d01      	subs	r5, #1
		*pdst++ = *psrc--;
   174a8:	f813 1901 	ldrb.w	r1, [r3], #-1
   174ac:	f80c 1f01 	strb.w	r1, [ip, #1]!
	for (; length > 0; length--) {
   174b0:	429d      	cmp	r5, r3
   174b2:	d1f9      	bne.n	174a8 <ll_rl_add+0xcc>
	if (rl[i].lirk) {
   174b4:	b198      	cbz	r0, 174de <ll_rl_add+0x102>
		memcpy(rl[i].local_irk, lirk, IRK_SIZE);
   174b6:	1dd3      	adds	r3, r2, #7
   174b8:	6838      	ldr	r0, [r7, #0]
   174ba:	f8d7 e004 	ldr.w	lr, [r7, #4]
   174be:	f8d7 c008 	ldr.w	ip, [r7, #8]
   174c2:	68fd      	ldr	r5, [r7, #12]
   174c4:	50e0      	str	r0, [r4, r3]
		rl[i].local_rpa = NULL;
   174c6:	eb0b 0108 	add.w	r1, fp, r8
		memcpy(rl[i].local_irk, lirk, IRK_SIZE);
   174ca:	4423      	add	r3, r4
		rl[i].local_rpa = NULL;
   174cc:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
   174d0:	2000      	movs	r0, #0
   174d2:	f8c3 e004 	str.w	lr, [r3, #4]
   174d6:	f8c3 c008 	str.w	ip, [r3, #8]
   174da:	60dd      	str	r5, [r3, #12]
   174dc:	6248      	str	r0, [r1, #36]	; 0x24
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   174de:	f102 0318 	add.w	r3, r2, #24
   174e2:	18e2      	adds	r2, r4, r3
__ssp_bos_icheck3(memset, void *, int)
   174e4:	2700      	movs	r7, #0
   174e6:	50e7      	str	r7, [r4, r3]
   174e8:	eb0b 0508 	add.w	r5, fp, r8
   174ec:	8097      	strh	r7, [r2, #4]
	rl[i].rpas_ready = 0U;
   174ee:	f814 3035 	ldrb.w	r3, [r4, r5, lsl #3]
   174f2:	00ed      	lsls	r5, r5, #3
   174f4:	f023 0312 	bic.w	r3, r3, #18
   174f8:	5563      	strb	r3, [r4, r5]
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   174fa:	4649      	mov	r1, r9
   174fc:	7830      	ldrb	r0, [r6, #0]
   174fe:	463a      	mov	r2, r7
   17500:	f7ff fb88 	bl	16c14 <wl_find>
	if (j < ARRAY_SIZE(wl)) {
   17504:	2807      	cmp	r0, #7
   17506:	d916      	bls.n	17536 <ll_rl_add+0x15a>
		rl[i].wl = 0U;
   17508:	5d63      	ldrb	r3, [r4, r5]
   1750a:	f367 1345 	bfi	r3, r7, #5, #1
   1750e:	5563      	strb	r3, [r4, r5]
	rl[i].taken = 1U;
   17510:	44d8      	add	r8, fp
	return 0;
   17512:	2000      	movs	r0, #0
	rl[i].taken = 1U;
   17514:	f814 3038 	ldrb.w	r3, [r4, r8, lsl #3]
   17518:	f043 0301 	orr.w	r3, r3, #1
   1751c:	f804 3038 	strb.w	r3, [r4, r8, lsl #3]
}
   17520:	b005      	add	sp, #20
   17522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   17526:	200c      	movs	r0, #12
}
   17528:	b005      	add	sp, #20
   1752a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1752e:	2007      	movs	r0, #7
}
   17530:	b005      	add	sp, #20
   17532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		wl[j].rl_idx = i;
   17536:	4a09      	ldr	r2, [pc, #36]	; (1755c <ll_rl_add+0x180>)
		rl[i].wl = 1U;
   17538:	5d63      	ldrb	r3, [r4, r5]
		wl[j].rl_idx = i;
   1753a:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
		rl[i].wl = 1U;
   1753e:	f043 0320 	orr.w	r3, r3, #32
   17542:	5563      	strb	r3, [r4, r5]
		wl[j].rl_idx = i;
   17544:	f880 8001 	strb.w	r8, [r0, #1]
		rl[i].wl = 1U;
   17548:	e7e2      	b.n	17510 <ll_rl_add+0x134>
		return BT_HCI_ERR_INVALID_PARAM;
   1754a:	2012      	movs	r0, #18
}
   1754c:	b005      	add	sp, #20
   1754e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17552:	bf00      	nop
   17554:	200024f0 	.word	0x200024f0
   17558:	20002470 	.word	0x20002470
   1755c:	20002668 	.word	0x20002668
   17560:	200035d5 	.word	0x200035d5
   17564:	20002468 	.word	0x20002468

00017568 <ll_rl_remove>:
{
   17568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1756c:	b083      	sub	sp, #12
   1756e:	4605      	mov	r5, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   17570:	2000      	movs	r0, #0
{
   17572:	9500      	str	r5, [sp, #0]
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   17574:	f7fa fb30 	bl	11bd8 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   17578:	2800      	cmp	r0, #0
   1757a:	d160      	bne.n	1763e <ll_rl_remove+0xd6>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1757c:	462f      	mov	r7, r5
   1757e:	4602      	mov	r2, r0
   17580:	4604      	mov	r4, r0
   17582:	f817 0b01 	ldrb.w	r0, [r7], #1
   17586:	9500      	str	r5, [sp, #0]
   17588:	4639      	mov	r1, r7
   1758a:	f7ff fe87 	bl	1729c <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1758e:	2807      	cmp	r0, #7
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   17590:	4606      	mov	r6, r0
	if (i < ARRAY_SIZE(rl)) {
   17592:	d903      	bls.n	1759c <ll_rl_remove+0x34>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   17594:	2002      	movs	r0, #2
}
   17596:	b003      	add	sp, #12
   17598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (rl[i].pirk) {
   1759c:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 1765c <ll_rl_remove+0xf4>
   175a0:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   175a4:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   175a8:	f818 3033 	ldrb.w	r3, [r8, r3, lsl #3]
   175ac:	075d      	lsls	r5, r3, #29
   175ae:	ea4f 0980 	mov.w	r9, r0, lsl #2
   175b2:	d52c      	bpl.n	1760e <ll_rl_remove+0xa6>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   175b4:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 17660 <ll_rl_remove+0xf8>
   175b8:	f89e c000 	ldrb.w	ip, [lr]
   175bc:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
			if (pj && pi != pj) {
   175c0:	f01c 0bff 	ands.w	fp, ip, #255	; 0xff
   175c4:	d021      	beq.n	1760a <ll_rl_remove+0xa2>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   175c6:	7dd3      	ldrb	r3, [r2, #23]
   175c8:	9301      	str	r3, [sp, #4]
			if (pj && pi != pj) {
   175ca:	455b      	cmp	r3, fp
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   175cc:	461d      	mov	r5, r3
			if (pj && pi != pj) {
   175ce:	d01c      	beq.n	1760a <ll_rl_remove+0xa2>
				memcpy(peer_irks[pi], peer_irks[pj], IRK_SIZE);
   175d0:	f8df a090 	ldr.w	sl, [pc, #144]	; 17664 <ll_rl_remove+0xfc>
   175d4:	eb0a 130b 	add.w	r3, sl, fp, lsl #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   175d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   175da:	eb0a 1a05 	add.w	sl, sl, r5, lsl #4
   175de:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
   175e2:	9d00      	ldr	r5, [sp, #0]
					if (rl[k].taken && rl[k].pirk &&
   175e4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   175e8:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   175ec:	f818 3033 	ldrb.w	r3, [r8, r3, lsl #3]
   175f0:	07d8      	lsls	r0, r3, #31
   175f2:	b2e1      	uxtb	r1, r4
   175f4:	f104 0401 	add.w	r4, r4, #1
   175f8:	d504      	bpl.n	17604 <ll_rl_remove+0x9c>
   175fa:	075b      	lsls	r3, r3, #29
   175fc:	d502      	bpl.n	17604 <ll_rl_remove+0x9c>
   175fe:	7dd3      	ldrb	r3, [r2, #23]
   17600:	455b      	cmp	r3, fp
   17602:	d020      	beq.n	17646 <ll_rl_remove+0xde>
				for (k = 0U;
   17604:	2c08      	cmp	r4, #8
   17606:	d1ed      	bne.n	175e4 <ll_rl_remove+0x7c>
   17608:	9500      	str	r5, [sp, #0]
			peer_irk_count--;
   1760a:	f88e c000 	strb.w	ip, [lr]
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   1760e:	9b00      	ldr	r3, [sp, #0]
   17610:	4639      	mov	r1, r7
   17612:	7818      	ldrb	r0, [r3, #0]
   17614:	2200      	movs	r2, #0
   17616:	f7ff fafd 	bl	16c14 <wl_find>
		if (j < ARRAY_SIZE(wl)) {
   1761a:	2807      	cmp	r0, #7
   1761c:	d804      	bhi.n	17628 <ll_rl_remove+0xc0>
			wl[j].rl_idx = FILTER_IDX_NONE;
   1761e:	4b0d      	ldr	r3, [pc, #52]	; (17654 <ll_rl_remove+0xec>)
   17620:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   17624:	23ff      	movs	r3, #255	; 0xff
   17626:	7043      	strb	r3, [r0, #1]
		rl[i].taken = 0U;
   17628:	444e      	add	r6, r9
		return 0;
   1762a:	2000      	movs	r0, #0
		rl[i].taken = 0U;
   1762c:	f818 3036 	ldrb.w	r3, [r8, r6, lsl #3]
   17630:	f36f 0300 	bfc	r3, #0, #1
   17634:	f808 3036 	strb.w	r3, [r8, r6, lsl #3]
}
   17638:	b003      	add	sp, #12
   1763a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1763e:	200c      	movs	r0, #12
}
   17640:	b003      	add	sp, #12
   17642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						rl[k].pirk_idx = pi;
   17646:	9801      	ldr	r0, [sp, #4]
						peer_irk_rl_ids[pi] = k;
   17648:	4b03      	ldr	r3, [pc, #12]	; (17658 <ll_rl_remove+0xf0>)
   1764a:	9500      	str	r5, [sp, #0]
   1764c:	5419      	strb	r1, [r3, r0]
						rl[k].pirk_idx = pi;
   1764e:	75d0      	strb	r0, [r2, #23]
						break;
   17650:	e7db      	b.n	1760a <ll_rl_remove+0xa2>
   17652:	bf00      	nop
   17654:	20002668 	.word	0x20002668
   17658:	20002468 	.word	0x20002468
   1765c:	200024f0 	.word	0x200024f0
   17660:	200035d5 	.word	0x200035d5
   17664:	20002470 	.word	0x20002470

00017668 <ll_rl_crpa_set>:
{
   17668:	b538      	push	{r3, r4, r5, lr}
   1766a:	461c      	mov	r4, r3
	if ((crpa[5] & 0xc0) == 0x40) {
   1766c:	795b      	ldrb	r3, [r3, #5]
   1766e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   17672:	2b40      	cmp	r3, #64	; 0x40
   17674:	d000      	beq.n	17678 <ll_rl_crpa_set+0x10>
}
   17676:	bd38      	pop	{r3, r4, r5, pc}
		if (id_addr) {
   17678:	b119      	cbz	r1, 17682 <ll_rl_crpa_set+0x1a>
			rl_idx = ull_filter_rl_find(id_addr_type, id_addr, NULL);
   1767a:	2200      	movs	r2, #0
   1767c:	f7ff fe0e 	bl	1729c <ull_filter_rl_find>
   17680:	4602      	mov	r2, r0
		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   17682:	2a07      	cmp	r2, #7
   17684:	d8f7      	bhi.n	17676 <ll_rl_crpa_set+0xe>
   17686:	4b08      	ldr	r3, [pc, #32]	; (176a8 <ll_rl_crpa_set+0x40>)
   17688:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   1768c:	f813 1031 	ldrb.w	r1, [r3, r1, lsl #3]
   17690:	07c9      	lsls	r1, r1, #31
   17692:	d5f0      	bpl.n	17676 <ll_rl_crpa_set+0xe>
			memcpy(rl[rl_idx].curr_rpa.val, crpa,
   17694:	2028      	movs	r0, #40	; 0x28
   17696:	2118      	movs	r1, #24
   17698:	fb10 1202 	smlabb	r2, r0, r2, r1
   1769c:	6820      	ldr	r0, [r4, #0]
   1769e:	5098      	str	r0, [r3, r2]
   176a0:	4413      	add	r3, r2
   176a2:	88a2      	ldrh	r2, [r4, #4]
   176a4:	809a      	strh	r2, [r3, #4]
}
   176a6:	bd38      	pop	{r3, r4, r5, pc}
   176a8:	200024f0 	.word	0x200024f0

000176ac <ll_rl_crpa_get>:
{
   176ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   176ae:	4603      	mov	r3, r0
{
   176b0:	460d      	mov	r5, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   176b2:	f813 0b01 	ldrb.w	r0, [r3], #1
   176b6:	2200      	movs	r2, #0
   176b8:	4619      	mov	r1, r3
   176ba:	f7ff fdef 	bl	1729c <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl) &&
   176be:	2807      	cmp	r0, #7
   176c0:	d901      	bls.n	176c6 <ll_rl_crpa_get+0x1a>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   176c2:	2002      	movs	r0, #2
}
   176c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   176c6:	4f09      	ldr	r7, [pc, #36]	; (176ec <ll_rl_crpa_get+0x40>)
   176c8:	2428      	movs	r4, #40	; 0x28
   176ca:	2318      	movs	r3, #24
   176cc:	fb14 3400 	smlabb	r4, r4, r0, r3
   176d0:	193e      	adds	r6, r7, r4
   176d2:	4630      	mov	r0, r6
   176d4:	2106      	movs	r1, #6
   176d6:	f7f5 fd49 	bl	d16c <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   176da:	2800      	cmp	r0, #0
   176dc:	d0f1      	beq.n	176c2 <ll_rl_crpa_get+0x16>
   176de:	5938      	ldr	r0, [r7, r4]
   176e0:	6028      	str	r0, [r5, #0]
   176e2:	88b3      	ldrh	r3, [r6, #4]
   176e4:	80ab      	strh	r3, [r5, #4]
		return 0;
   176e6:	2000      	movs	r0, #0
}
   176e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   176ea:	bf00      	nop
   176ec:	200024f0 	.word	0x200024f0

000176f0 <ll_rl_lrpa_get>:
{
   176f0:	b510      	push	{r4, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   176f2:	4603      	mov	r3, r0
{
   176f4:	460c      	mov	r4, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   176f6:	f813 0b01 	ldrb.w	r0, [r3], #1
   176fa:	2200      	movs	r2, #0
   176fc:	4619      	mov	r1, r3
   176fe:	f7ff fdcd 	bl	1729c <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   17702:	2807      	cmp	r0, #7
   17704:	d901      	bls.n	1770a <ll_rl_lrpa_get+0x1a>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   17706:	2002      	movs	r0, #2
}
   17708:	bd10      	pop	{r4, pc}
		bt_addr_copy(lrpa, rl[i].local_rpa);
   1770a:	4b06      	ldr	r3, [pc, #24]	; (17724 <ll_rl_lrpa_get+0x34>)
   1770c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   17710:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
		return 0;
   17714:	2000      	movs	r0, #0
   17716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   17718:	681a      	ldr	r2, [r3, #0]
   1771a:	6022      	str	r2, [r4, #0]
   1771c:	889b      	ldrh	r3, [r3, #4]
   1771e:	80a3      	strh	r3, [r4, #4]
}
   17720:	bd10      	pop	{r4, pc}
   17722:	bf00      	nop
   17724:	200024f0 	.word	0x200024f0

00017728 <ll_priv_mode_set>:
{
   17728:	b570      	push	{r4, r5, r6, lr}
   1772a:	4605      	mov	r5, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1772c:	2000      	movs	r0, #0
{
   1772e:	460e      	mov	r6, r1
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   17730:	f7fa fa52 	bl	11bd8 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   17734:	b968      	cbnz	r0, 17752 <ll_priv_mode_set+0x2a>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   17736:	4629      	mov	r1, r5
   17738:	4602      	mov	r2, r0
   1773a:	4604      	mov	r4, r0
   1773c:	f811 0b01 	ldrb.w	r0, [r1], #1
   17740:	f7ff fdac 	bl	1729c <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   17744:	2807      	cmp	r0, #7
   17746:	d81c      	bhi.n	17782 <ll_priv_mode_set+0x5a>
		switch (mode) {
   17748:	b186      	cbz	r6, 1776c <ll_priv_mode_set+0x44>
   1774a:	2e01      	cmp	r6, #1
   1774c:	d003      	beq.n	17756 <ll_priv_mode_set+0x2e>
   1774e:	2012      	movs	r0, #18
}
   17750:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   17752:	200c      	movs	r0, #12
}
   17754:	bd70      	pop	{r4, r5, r6, pc}
			rl[i].dev = 1U;
   17756:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1775a:	490b      	ldr	r1, [pc, #44]	; (17788 <ll_priv_mode_set+0x60>)
   1775c:	f811 2033 	ldrb.w	r2, [r1, r3, lsl #3]
   17760:	f042 0210 	orr.w	r2, r2, #16
   17764:	f801 2033 	strb.w	r2, [r1, r3, lsl #3]
	return 0;
   17768:	4620      	mov	r0, r4
}
   1776a:	bd70      	pop	{r4, r5, r6, pc}
			rl[i].dev = 0U;
   1776c:	4b06      	ldr	r3, [pc, #24]	; (17788 <ll_priv_mode_set+0x60>)
   1776e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   17772:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
   17776:	f366 1204 	bfi	r2, r6, #4, #1
   1777a:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
	return 0;
   1777e:	4630      	mov	r0, r6
}
   17780:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   17782:	2002      	movs	r0, #2
}
   17784:	bd70      	pop	{r4, r5, r6, pc}
   17786:	bf00      	nop
   17788:	200024f0 	.word	0x200024f0

0001778c <ull_filter_reset>:
	wl_anon = 0U;
   1778c:	4a33      	ldr	r2, [pc, #204]	; (1785c <ull_filter_reset+0xd0>)
   1778e:	4934      	ldr	r1, [pc, #208]	; (17860 <ull_filter_reset+0xd4>)
{
   17790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	wl_anon = 0U;
   17792:	2300      	movs	r3, #0
   17794:	4c33      	ldr	r4, [pc, #204]	; (17864 <ull_filter_reset+0xd8>)
   17796:	7013      	strb	r3, [r2, #0]
		uint8_t j = wl[i].rl_idx;
   17798:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   1779c:	7852      	ldrb	r2, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   1779e:	2a07      	cmp	r2, #7
			rl[j].wl = 0U;
   177a0:	eb02 0582 	add.w	r5, r2, r2, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   177a4:	d805      	bhi.n	177b2 <ull_filter_reset+0x26>
			rl[j].wl = 0U;
   177a6:	f811 2035 	ldrb.w	r2, [r1, r5, lsl #3]
   177aa:	f36f 1245 	bfc	r2, #5, #1
   177ae:	f801 2035 	strb.w	r2, [r1, r5, lsl #3]
		wl[i].taken = 0U;
   177b2:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   177b6:	f36f 0200 	bfc	r2, #0, #1
   177ba:	f804 2033 	strb.w	r2, [r4, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   177be:	3301      	adds	r3, #1
   177c0:	2b08      	cmp	r3, #8
   177c2:	d1e9      	bne.n	17798 <ull_filter_reset+0xc>
		rl[i].taken = 0U;
   177c4:	780f      	ldrb	r7, [r1, #0]
   177c6:	f891 5028 	ldrb.w	r5, [r1, #40]	; 0x28
   177ca:	f891 4050 	ldrb.w	r4, [r1, #80]	; 0x50
   177ce:	f891 2078 	ldrb.w	r2, [r1, #120]	; 0x78
   177d2:	f891 60a0 	ldrb.w	r6, [r1, #160]	; 0xa0
	rl_enable = 0U;
   177d6:	2300      	movs	r3, #0
		rl[i].taken = 0U;
   177d8:	f363 0700 	bfi	r7, r3, #0, #1
   177dc:	700f      	strb	r7, [r1, #0]
	rl_enable = 0U;
   177de:	4f22      	ldr	r7, [pc, #136]	; (17868 <ull_filter_reset+0xdc>)
		rl[i].taken = 0U;
   177e0:	f363 0500 	bfi	r5, r3, #0, #1
   177e4:	f363 0400 	bfi	r4, r3, #0, #1
   177e8:	f363 0200 	bfi	r2, r3, #0, #1
	rl_enable = 0U;
   177ec:	703b      	strb	r3, [r7, #0]
		rl[i].taken = 0U;
   177ee:	f881 5028 	strb.w	r5, [r1, #40]	; 0x28
	peer_irk_count = 0U;
   177f2:	4f1e      	ldr	r7, [pc, #120]	; (1786c <ull_filter_reset+0xe0>)
		rl[i].taken = 0U;
   177f4:	f891 50c8 	ldrb.w	r5, [r1, #200]	; 0xc8
   177f8:	f881 4050 	strb.w	r4, [r1, #80]	; 0x50
   177fc:	f881 2078 	strb.w	r2, [r1, #120]	; 0x78
   17800:	f891 40f0 	ldrb.w	r4, [r1, #240]	; 0xf0
   17804:	f891 2118 	ldrb.w	r2, [r1, #280]	; 0x118
	peer_irk_count = 0U;
   17808:	703b      	strb	r3, [r7, #0]
		rl[i].taken = 0U;
   1780a:	f363 0600 	bfi	r6, r3, #0, #1
   1780e:	f363 0500 	bfi	r5, r3, #0, #1
   17812:	f363 0400 	bfi	r4, r3, #0, #1
   17816:	f363 0200 	bfi	r2, r3, #0, #1
   1781a:	f881 60a0 	strb.w	r6, [r1, #160]	; 0xa0
	rpa_last_ms = -1;
   1781e:	4b14      	ldr	r3, [pc, #80]	; (17870 <ull_filter_reset+0xe4>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   17820:	4e14      	ldr	r6, [pc, #80]	; (17874 <ull_filter_reset+0xe8>)
   17822:	4f15      	ldr	r7, [pc, #84]	; (17878 <ull_filter_reset+0xec>)
		rl[i].taken = 0U;
   17824:	f881 50c8 	strb.w	r5, [r1, #200]	; 0xc8
   17828:	f881 40f0 	strb.w	r4, [r1, #240]	; 0xf0
	rpa_last_ms = -1;
   1782c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   17830:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   17834:	e9c3 4500 	strd	r4, r5, [r3]
		rl[i].taken = 0U;
   17838:	f881 2118 	strb.w	r2, [r1, #280]	; 0x118
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   1783c:	6037      	str	r7, [r6, #0]
	if (init) {
   1783e:	b128      	cbz	r0, 1784c <ull_filter_reset+0xc0>
}
   17840:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_work_init_delayable(&work->work, handler);
   17844:	490d      	ldr	r1, [pc, #52]	; (1787c <ull_filter_reset+0xf0>)
   17846:	480e      	ldr	r0, [pc, #56]	; (17880 <ull_filter_reset+0xf4>)
   17848:	f00b bfb9 	b.w	237be <k_work_init_delayable>
	return k_work_delayable_busy_get(dwork) != 0;
   1784c:	480c      	ldr	r0, [pc, #48]	; (17880 <ull_filter_reset+0xf4>)
   1784e:	f00b ffc2 	bl	237d6 <k_work_delayable_busy_get>
   17852:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	int rc = k_work_cancel_delayable(&work->work);
   17856:	480a      	ldr	r0, [pc, #40]	; (17880 <ull_filter_reset+0xf4>)
   17858:	f00b bfd1 	b.w	237fe <k_work_cancel_delayable>
   1785c:	200035d7 	.word	0x200035d7
   17860:	200024f0 	.word	0x200024f0
   17864:	20002668 	.word	0x20002668
   17868:	200035d6 	.word	0x200035d6
   1786c:	200035d5 	.word	0x200035d5
   17870:	20001488 	.word	0x20001488
   17874:	20002664 	.word	0x20002664
   17878:	000dbba0 	.word	0x000dbba0
   1787c:	000171d1 	.word	0x000171d1
   17880:	20001490 	.word	0x20001490

00017884 <ull_filter_lll_lrpa_used>:
	return rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk;
   17884:	2807      	cmp	r0, #7
   17886:	d807      	bhi.n	17898 <ull_filter_lll_lrpa_used+0x14>
   17888:	4b04      	ldr	r3, [pc, #16]	; (1789c <ull_filter_lll_lrpa_used+0x18>)
   1788a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1788e:	f813 0030 	ldrb.w	r0, [r3, r0, lsl #3]
   17892:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   17896:	4770      	bx	lr
   17898:	2000      	movs	r0, #0
}
   1789a:	4770      	bx	lr
   1789c:	200024f0 	.word	0x200024f0

000178a0 <ull_filter_lll_irks_get>:
	*count = peer_irk_count;
   178a0:	4b02      	ldr	r3, [pc, #8]	; (178ac <ull_filter_lll_irks_get+0xc>)
   178a2:	781b      	ldrb	r3, [r3, #0]
   178a4:	7003      	strb	r3, [r0, #0]
}
   178a6:	4802      	ldr	r0, [pc, #8]	; (178b0 <ull_filter_lll_irks_get+0x10>)
   178a8:	4770      	bx	lr
   178aa:	bf00      	nop
   178ac:	200035d5 	.word	0x200035d5
   178b0:	20002470 	.word	0x20002470

000178b4 <ull_filter_lll_rl_irk_idx>:
{
   178b4:	b510      	push	{r4, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   178b6:	4b20      	ldr	r3, [pc, #128]	; (17938 <ull_filter_lll_rl_irk_idx+0x84>)
   178b8:	781b      	ldrb	r3, [r3, #0]
   178ba:	4283      	cmp	r3, r0
{
   178bc:	4604      	mov	r4, r0
	LL_ASSERT(irkmatch_id < peer_irk_count);
   178be:	d90c      	bls.n	178da <ull_filter_lll_rl_irk_idx+0x26>
	i = peer_irk_rl_ids[irkmatch_id];
   178c0:	4b1e      	ldr	r3, [pc, #120]	; (1793c <ull_filter_lll_rl_irk_idx+0x88>)
   178c2:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   178c4:	2c07      	cmp	r4, #7
   178c6:	d819      	bhi.n	178fc <ull_filter_lll_rl_irk_idx+0x48>
	LL_ASSERT(rl[i].taken);
   178c8:	4b1d      	ldr	r3, [pc, #116]	; (17940 <ull_filter_lll_rl_irk_idx+0x8c>)
   178ca:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   178ce:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   178d2:	07db      	lsls	r3, r3, #31
   178d4:	d520      	bpl.n	17918 <ull_filter_lll_rl_irk_idx+0x64>
}
   178d6:	4620      	mov	r0, r4
   178d8:	bd10      	pop	{r4, pc}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   178da:	4a1a      	ldr	r2, [pc, #104]	; (17944 <ull_filter_lll_rl_irk_idx+0x90>)
   178dc:	491a      	ldr	r1, [pc, #104]	; (17948 <ull_filter_lll_rl_irk_idx+0x94>)
   178de:	481b      	ldr	r0, [pc, #108]	; (1794c <ull_filter_lll_rl_irk_idx+0x98>)
   178e0:	f240 23c6 	movw	r3, #710	; 0x2c6
   178e4:	f007 f81a 	bl	1e91c <printk>
   178e8:	4040      	eors	r0, r0
   178ea:	f380 8811 	msr	BASEPRI, r0
   178ee:	f04f 0003 	mov.w	r0, #3
   178f2:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   178f4:	4b11      	ldr	r3, [pc, #68]	; (1793c <ull_filter_lll_rl_irk_idx+0x88>)
   178f6:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   178f8:	2c07      	cmp	r4, #7
   178fa:	d9e5      	bls.n	178c8 <ull_filter_lll_rl_irk_idx+0x14>
   178fc:	4a11      	ldr	r2, [pc, #68]	; (17944 <ull_filter_lll_rl_irk_idx+0x90>)
   178fe:	4914      	ldr	r1, [pc, #80]	; (17950 <ull_filter_lll_rl_irk_idx+0x9c>)
   17900:	4812      	ldr	r0, [pc, #72]	; (1794c <ull_filter_lll_rl_irk_idx+0x98>)
   17902:	f44f 7332 	mov.w	r3, #712	; 0x2c8
   17906:	f007 f809 	bl	1e91c <printk>
   1790a:	4040      	eors	r0, r0
   1790c:	f380 8811 	msr	BASEPRI, r0
   17910:	f04f 0003 	mov.w	r0, #3
   17914:	df02      	svc	2
   17916:	e7d7      	b.n	178c8 <ull_filter_lll_rl_irk_idx+0x14>
	LL_ASSERT(rl[i].taken);
   17918:	4a0a      	ldr	r2, [pc, #40]	; (17944 <ull_filter_lll_rl_irk_idx+0x90>)
   1791a:	490e      	ldr	r1, [pc, #56]	; (17954 <ull_filter_lll_rl_irk_idx+0xa0>)
   1791c:	480b      	ldr	r0, [pc, #44]	; (1794c <ull_filter_lll_rl_irk_idx+0x98>)
   1791e:	f240 23c9 	movw	r3, #713	; 0x2c9
   17922:	f006 fffb 	bl	1e91c <printk>
   17926:	4040      	eors	r0, r0
   17928:	f380 8811 	msr	BASEPRI, r0
   1792c:	f04f 0003 	mov.w	r0, #3
   17930:	df02      	svc	2
}
   17932:	4620      	mov	r0, r4
   17934:	bd10      	pop	{r4, pc}
   17936:	bf00      	nop
   17938:	200035d5 	.word	0x200035d5
   1793c:	20002468 	.word	0x20002468
   17940:	200024f0 	.word	0x200024f0
   17944:	0002511c 	.word	0x0002511c
   17948:	00025300 	.word	0x00025300
   1794c:	00024904 	.word	0x00024904
   17950:	00025320 	.word	0x00025320
   17954:	000252f4 	.word	0x000252f4

00017958 <ull_filter_lll_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   17958:	2807      	cmp	r0, #7
   1795a:	d823      	bhi.n	179a4 <ull_filter_lll_irk_whitelisted+0x4c>
{
   1795c:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(rl[rl_idx].taken);
   1795e:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   17962:	4e11      	ldr	r6, [pc, #68]	; (179a8 <ull_filter_lll_irk_whitelisted+0x50>)
   17964:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   17968:	07db      	lsls	r3, r3, #31
   1796a:	4604      	mov	r4, r0
   1796c:	ea4f 0580 	mov.w	r5, r0, lsl #2
   17970:	d505      	bpl.n	1797e <ull_filter_lll_irk_whitelisted+0x26>
	return rl[rl_idx].wl;
   17972:	442c      	add	r4, r5
   17974:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   17978:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   1797c:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   1797e:	4a0b      	ldr	r2, [pc, #44]	; (179ac <ull_filter_lll_irk_whitelisted+0x54>)
   17980:	490b      	ldr	r1, [pc, #44]	; (179b0 <ull_filter_lll_irk_whitelisted+0x58>)
   17982:	480c      	ldr	r0, [pc, #48]	; (179b4 <ull_filter_lll_irk_whitelisted+0x5c>)
   17984:	f44f 7335 	mov.w	r3, #724	; 0x2d4
   17988:	f006 ffc8 	bl	1e91c <printk>
   1798c:	4040      	eors	r0, r0
   1798e:	f380 8811 	msr	BASEPRI, r0
   17992:	f04f 0003 	mov.w	r0, #3
   17996:	df02      	svc	2
	return rl[rl_idx].wl;
   17998:	442c      	add	r4, r5
   1799a:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   1799e:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   179a2:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   179a4:	2000      	movs	r0, #0
}
   179a6:	4770      	bx	lr
   179a8:	200024f0 	.word	0x200024f0
   179ac:	0002511c 	.word	0x0002511c
   179b0:	0002516c 	.word	0x0002516c
   179b4:	00024904 	.word	0x00024904

000179b8 <ull_filter_lll_get>:
		return &wl_filter;
   179b8:	4a03      	ldr	r2, [pc, #12]	; (179c8 <ull_filter_lll_get+0x10>)
   179ba:	4b04      	ldr	r3, [pc, #16]	; (179cc <ull_filter_lll_get+0x14>)
}
   179bc:	2800      	cmp	r0, #0
   179be:	bf0c      	ite	eq
   179c0:	4610      	moveq	r0, r2
   179c2:	4618      	movne	r0, r3
   179c4:	4770      	bx	lr
   179c6:	bf00      	nop
   179c8:	20002630 	.word	0x20002630
   179cc:	200026a8 	.word	0x200026a8

000179d0 <ull_filter_lll_rl_addr_allowed>:
	if (*rl_idx != FILTER_IDX_NONE) {
   179d0:	7813      	ldrb	r3, [r2, #0]
   179d2:	2bff      	cmp	r3, #255	; 0xff
   179d4:	d11c      	bne.n	17a10 <ull_filter_lll_rl_addr_allowed+0x40>
{
   179d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   179da:	4d19      	ldr	r5, [pc, #100]	; (17a40 <ull_filter_lll_rl_addr_allowed+0x70>)
   179dc:	4606      	mov	r6, r0
	if (*rl_idx != FILTER_IDX_NONE) {
   179de:	2300      	movs	r3, #0
   179e0:	1faf      	subs	r7, r5, #6
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   179e2:	eb03 0483 	add.w	r4, r3, r3, lsl #2
   179e6:	fa5f fe83 	uxtb.w	lr, r3
   179ea:	f817 4034 	ldrb.w	r4, [r7, r4, lsl #3]
   179ee:	f014 0001 	ands.w	r0, r4, #1
   179f2:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   179f6:	d003      	beq.n	17a00 <ull_filter_lll_rl_addr_allowed+0x30>
   179f8:	f3c4 1480 	ubfx	r4, r4, #6, #1
   179fc:	42b4      	cmp	r4, r6
   179fe:	d009      	beq.n	17a14 <ull_filter_lll_rl_addr_allowed+0x44>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   17a00:	3301      	adds	r3, #1
   17a02:	2b08      	cmp	r3, #8
   17a04:	f105 0528 	add.w	r5, r5, #40	; 0x28
   17a08:	d1eb      	bne.n	179e2 <ull_filter_lll_rl_addr_allowed+0x12>
		return true;
   17a0a:	2001      	movs	r0, #1
}
   17a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return true;
   17a10:	2001      	movs	r0, #1
}
   17a12:	4770      	bx	lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   17a14:	1fac      	subs	r4, r5, #6
   17a16:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
				if (addr[j] != id_addr[j]) {
   17a1a:	f814 af01 	ldrb.w	sl, [r4, #1]!
   17a1e:	f818 9f01 	ldrb.w	r9, [r8, #1]!
   17a22:	45ca      	cmp	sl, r9
   17a24:	d1ec      	bne.n	17a00 <ull_filter_lll_rl_addr_allowed+0x30>
			for (j = 0U; j < BDADDR_SIZE; j++) {
   17a26:	42ac      	cmp	r4, r5
   17a28:	d1f7      	bne.n	17a1a <ull_filter_lll_rl_addr_allowed+0x4a>
				return !rl[i].pirk || rl[i].dev;
   17a2a:	4463      	add	r3, ip
				*rl_idx = i;
   17a2c:	f882 e000 	strb.w	lr, [r2]
				return !rl[i].pirk || rl[i].dev;
   17a30:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   17a34:	075a      	lsls	r2, r3, #29
   17a36:	d5e9      	bpl.n	17a0c <ull_filter_lll_rl_addr_allowed+0x3c>
   17a38:	f3c3 1000 	ubfx	r0, r3, #4, #1
   17a3c:	e7e6      	b.n	17a0c <ull_filter_lll_rl_addr_allowed+0x3c>
   17a3e:	bf00      	nop
   17a40:	200024f6 	.word	0x200024f6

00017a44 <ull_filter_lll_rl_enabled>:
	return rl_enable;
   17a44:	4b02      	ldr	r3, [pc, #8]	; (17a50 <ull_filter_lll_rl_enabled+0xc>)
   17a46:	7818      	ldrb	r0, [r3, #0]
}
   17a48:	3800      	subs	r0, #0
   17a4a:	bf18      	it	ne
   17a4c:	2001      	movne	r0, #1
   17a4e:	4770      	bx	lr
   17a50:	200035d6 	.word	0x200035d6

00017a54 <radio_nrf5_isr>:
static void mfy_ticker_job_idle_get(void *param);
static void ticker_op_job_disable(uint32_t status, void *op_context);
#endif
#endif /* CONFIG_BT_CTLR_LOW_LAT */

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   17a54:	4668      	mov	r0, sp
   17a56:	f020 0107 	bic.w	r1, r0, #7
   17a5a:	468d      	mov	sp, r1
   17a5c:	b501      	push	{r0, lr}
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_radio();

	isr_radio();
   17a5e:	f001 ff55 	bl	1990c <isr_radio>

	ISR_DIRECT_PM();
   17a62:	f7ed ffe9 	bl	5a38 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   17a66:	f7ee faf5 	bl	6054 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   17a6a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   17a6e:	4685      	mov	sp, r0
   17a70:	4770      	bx	lr
   17a72:	bf00      	nop

00017a74 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(const void *arg)
{
   17a74:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	lll_prof_enter_ull_high();

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   17a76:	4b09      	ldr	r3, [pc, #36]	; (17a9c <rtc0_nrf5_isr+0x28>)
   17a78:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   17a7c:	b93a      	cbnz	r2, 17a8e <rtc0_nrf5_isr+0x1a>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;

		ticker_trigger(0);
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   17a7e:	2001      	movs	r0, #1
   17a80:	f7f5 fc56 	bl	d330 <mayfly_run>

	lll_prof_exit_ull_low();
#endif

	DEBUG_TICKER_ISR(0);
}
   17a84:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   17a88:	2002      	movs	r0, #2
   17a8a:	f7f5 bc51 	b.w	d330 <mayfly_run>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   17a8e:	2000      	movs	r0, #0
   17a90:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   17a94:	f7f6 fe08 	bl	e6a8 <ticker_trigger>
   17a98:	e7f1      	b.n	17a7e <rtc0_nrf5_isr+0xa>
   17a9a:	bf00      	nop
   17a9c:	4000b000 	.word	0x4000b000

00017aa0 <swi_lll_nrf5_isr>:
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_lll();

	mayfly_run(TICKER_USER_ID_LLL);
   17aa0:	2000      	movs	r0, #0
   17aa2:	f7f5 bc45 	b.w	d330 <mayfly_run>
   17aa6:	bf00      	nop

00017aa8 <isr_race>:
}

static void isr_race(void *param)
{
	/* NOTE: lll_disable could have a race with ... */
	radio_status_reset();
   17aa8:	f002 b850 	b.w	19b4c <radio_status_reset>

00017aac <ticker_stop_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   17aac:	2801      	cmp	r0, #1
   17aae:	d800      	bhi.n	17ab2 <ticker_stop_op_cb+0x6>
   17ab0:	4770      	bx	lr
{
   17ab2:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   17ab4:	4a06      	ldr	r2, [pc, #24]	; (17ad0 <ticker_stop_op_cb+0x24>)
   17ab6:	4907      	ldr	r1, [pc, #28]	; (17ad4 <ticker_stop_op_cb+0x28>)
   17ab8:	4807      	ldr	r0, [pc, #28]	; (17ad8 <ticker_stop_op_cb+0x2c>)
   17aba:	f240 23d5 	movw	r3, #725	; 0x2d5
   17abe:	f006 ff2d 	bl	1e91c <printk>
   17ac2:	4040      	eors	r0, r0
   17ac4:	f380 8811 	msr	BASEPRI, r0
   17ac8:	f04f 0003 	mov.w	r0, #3
   17acc:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   17ace:	bd08      	pop	{r3, pc}
   17ad0:	0002533c 	.word	0x0002533c
   17ad4:	00025384 	.word	0x00025384
   17ad8:	00024904 	.word	0x00024904

00017adc <ticker_start_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   17adc:	2801      	cmp	r0, #1
   17ade:	d800      	bhi.n	17ae2 <ticker_start_op_cb+0x6>
   17ae0:	4770      	bx	lr
{
   17ae2:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   17ae4:	4a06      	ldr	r2, [pc, #24]	; (17b00 <ticker_start_op_cb+0x24>)
   17ae6:	4907      	ldr	r1, [pc, #28]	; (17b04 <ticker_start_op_cb+0x28>)
   17ae8:	4807      	ldr	r0, [pc, #28]	; (17b08 <ticker_start_op_cb+0x2c>)
   17aea:	f44f 7338 	mov.w	r3, #736	; 0x2e0
   17aee:	f006 ff15 	bl	1e91c <printk>
   17af2:	4040      	eors	r0, r0
   17af4:	f380 8811 	msr	BASEPRI, r0
   17af8:	f04f 0003 	mov.w	r0, #3
   17afc:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   17afe:	bd08      	pop	{r3, pc}
   17b00:	0002533c 	.word	0x0002533c
   17b04:	00025384 	.word	0x00025384
   17b08:	00024904 	.word	0x00024904

00017b0c <preempt_ticker_start.isra.0>:

static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   17b0c:	b530      	push	{r4, r5, lr}
	preempt_to = MAX(evt->ticks_active_to_start,
			 evt->ticks_xtal_to_start) -
			 evt->ticks_preempt_to_start;

	/* Setup pre empt timeout */
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   17b0e:	2200      	movs	r2, #0
static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   17b10:	b08b      	sub	sp, #44	; 0x2c
	evt = HDR_LLL2EVT(prepare_param->param);
   17b12:	680b      	ldr	r3, [r1, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   17b14:	4c15      	ldr	r4, [pc, #84]	; (17b6c <preempt_ticker_start.isra.0+0x60>)
   17b16:	4916      	ldr	r1, [pc, #88]	; (17b70 <preempt_ticker_start.isra.0+0x64>)
   17b18:	9208      	str	r2, [sp, #32]
   17b1a:	e9cd 2203 	strd	r2, r2, [sp, #12]
   17b1e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   17b22:	9206      	str	r2, [sp, #24]
   17b24:	9407      	str	r4, [sp, #28]
   17b26:	9105      	str	r1, [sp, #20]
	preempt_to = MAX(evt->ticks_active_to_start,
   17b28:	e9d3 5400 	ldrd	r5, r4, [r3]
   17b2c:	6899      	ldr	r1, [r3, #8]
   17b2e:	42a5      	cmp	r5, r4
   17b30:	bf2c      	ite	cs
   17b32:	ebc1 0105 	rsbcs	r1, r1, r5
   17b36:	ebc1 0104 	rsbcc	r1, r1, r4
static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   17b3a:	4603      	mov	r3, r0
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   17b3c:	9100      	str	r1, [sp, #0]
   17b3e:	4610      	mov	r0, r2
   17b40:	4611      	mov	r1, r2
   17b42:	f7f6 fe1f 	bl	e784 <ticker_start>
			   TICKER_NULL_REMAINDER,
			   TICKER_NULL_LAZY,
			   TICKER_NULL_SLOT,
			   preempt_ticker_cb, NULL,
			   ticker_start_op_cb, NULL);
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   17b46:	2802      	cmp	r0, #2
   17b48:	d801      	bhi.n	17b4e <preempt_ticker_start.isra.0+0x42>
		  (ret == TICKER_STATUS_FAILURE) ||
		  (ret == TICKER_STATUS_BUSY));
}
   17b4a:	b00b      	add	sp, #44	; 0x2c
   17b4c:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   17b4e:	4a09      	ldr	r2, [pc, #36]	; (17b74 <preempt_ticker_start.isra.0+0x68>)
   17b50:	4909      	ldr	r1, [pc, #36]	; (17b78 <preempt_ticker_start.isra.0+0x6c>)
   17b52:	480a      	ldr	r0, [pc, #40]	; (17b7c <preempt_ticker_start.isra.0+0x70>)
   17b54:	f240 23fe 	movw	r3, #766	; 0x2fe
   17b58:	f006 fee0 	bl	1e91c <printk>
   17b5c:	4040      	eors	r0, r0
   17b5e:	f380 8811 	msr	BASEPRI, r0
   17b62:	f04f 0003 	mov.w	r0, #3
   17b66:	df02      	svc	2
}
   17b68:	b00b      	add	sp, #44	; 0x2c
   17b6a:	bd30      	pop	{r4, r5, pc}
   17b6c:	00017add 	.word	0x00017add
   17b70:	00017cb9 	.word	0x00017cb9
   17b74:	0002533c 	.word	0x0002533c
   17b78:	000253a4 	.word	0x000253a4
   17b7c:	00024904 	.word	0x00024904

00017b80 <preempt>:
			     0, &mfy);
	LL_ASSERT(!ret);
}

static void preempt(void *param)
{
   17b80:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll_prepare_cb_t resume_cb;
	struct lll_event *next;
	uint8_t idx;
	int ret;

	if (!event.curr.abort_cb || !event.curr.param) {
   17b82:	4e48      	ldr	r6, [pc, #288]	; (17ca4 <preempt+0x124>)
   17b84:	68b3      	ldr	r3, [r6, #8]
{
   17b86:	b089      	sub	sp, #36	; 0x24
	if (!event.curr.abort_cb || !event.curr.param) {
   17b88:	b1ab      	cbz	r3, 17bb6 <preempt+0x36>
   17b8a:	6833      	ldr	r3, [r6, #0]
   17b8c:	b19b      	cbz	r3, 17bb6 <preempt+0x36>
		return;
	}

	idx = UINT8_MAX;
   17b8e:	23ff      	movs	r3, #255	; 0xff
	next = ull_prepare_dequeue_iter(&idx);
   17b90:	f10d 000a 	add.w	r0, sp, #10
	idx = UINT8_MAX;
   17b94:	f88d 300a 	strb.w	r3, [sp, #10]
	next = ull_prepare_dequeue_iter(&idx);
   17b98:	f7f9 fba8 	bl	112ec <ull_prepare_dequeue_iter>
	if (!next) {
   17b9c:	4604      	mov	r4, r0
   17b9e:	b150      	cbz	r0, 17bb6 <preempt+0x36>
		return;
	}

	while (next && (next->is_aborted || next->is_resume)) {
   17ba0:	7f23      	ldrb	r3, [r4, #28]
   17ba2:	f013 0503 	ands.w	r5, r3, #3
		next = ull_prepare_dequeue_iter(&idx);
   17ba6:	f10d 000a 	add.w	r0, sp, #10
	while (next && (next->is_aborted || next->is_resume)) {
   17baa:	d006      	beq.n	17bba <preempt+0x3a>
		next = ull_prepare_dequeue_iter(&idx);
   17bac:	f7f9 fb9e 	bl	112ec <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   17bb0:	4604      	mov	r4, r0
   17bb2:	2800      	cmp	r0, #0
   17bb4:	d1f4      	bne.n	17ba0 <preempt+0x20>
			return;
		}
	} while (next->is_aborted || next->is_resume);

	preempt_ticker_start(&next->prepare_param);
}
   17bb6:	b009      	add	sp, #36	; 0x24
   17bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = event.curr.is_abort_cb(next->prepare_param.param,
   17bba:	e9d6 1300 	ldrd	r1, r3, [r6]
   17bbe:	68e0      	ldr	r0, [r4, #12]
   17bc0:	aa03      	add	r2, sp, #12
   17bc2:	4798      	blx	r3
	if (!ret) {
   17bc4:	4607      	mov	r7, r0
   17bc6:	2800      	cmp	r0, #0
   17bc8:	d062      	beq.n	17c90 <preempt+0x110>
	event.curr.abort_cb(NULL, event.curr.param);
   17bca:	68b3      	ldr	r3, [r6, #8]
   17bcc:	6831      	ldr	r1, [r6, #0]
   17bce:	4628      	mov	r0, r5
   17bd0:	4798      	blx	r3
	if (ret == -EAGAIN) {
   17bd2:	f117 0f0b 	cmn.w	r7, #11
   17bd6:	d019      	beq.n	17c0c <preempt+0x8c>
		LL_ASSERT(ret == -ECANCELED);
   17bd8:	378c      	adds	r7, #140	; 0x8c
   17bda:	d010      	beq.n	17bfe <preempt+0x7e>
   17bdc:	4a32      	ldr	r2, [pc, #200]	; (17ca8 <preempt+0x128>)
   17bde:	4933      	ldr	r1, [pc, #204]	; (17cac <preempt+0x12c>)
   17be0:	4833      	ldr	r0, [pc, #204]	; (17cb0 <preempt+0x130>)
   17be2:	f240 3351 	movw	r3, #849	; 0x351
   17be6:	f006 fe99 	bl	1e91c <printk>
   17bea:	4040      	eors	r0, r0
   17bec:	f380 8811 	msr	BASEPRI, r0
   17bf0:	f04f 0003 	mov.w	r0, #3
   17bf4:	df02      	svc	2
   17bf6:	e002      	b.n	17bfe <preempt+0x7e>
	} while (next->is_aborted || next->is_resume);
   17bf8:	7f03      	ldrb	r3, [r0, #28]
   17bfa:	079b      	lsls	r3, r3, #30
   17bfc:	d042      	beq.n	17c84 <preempt+0x104>
		next = ull_prepare_dequeue_iter(&idx);
   17bfe:	f10d 000a 	add.w	r0, sp, #10
   17c02:	f7f9 fb73 	bl	112ec <ull_prepare_dequeue_iter>
		if (!next) {
   17c06:	2800      	cmp	r0, #0
   17c08:	d1f6      	bne.n	17bf8 <preempt+0x78>
   17c0a:	e7d4      	b.n	17bb6 <preempt+0x36>
		iter_idx = UINT8_MAX;
   17c0c:	24ff      	movs	r4, #255	; 0xff
		iter = ull_prepare_dequeue_iter(&iter_idx);
   17c0e:	f10d 000b 	add.w	r0, sp, #11
		iter_idx = UINT8_MAX;
   17c12:	f88d 400b 	strb.w	r4, [sp, #11]
		iter = ull_prepare_dequeue_iter(&iter_idx);
   17c16:	f7f9 fb69 	bl	112ec <ull_prepare_dequeue_iter>
		while (iter) {
   17c1a:	bb58      	cbnz	r0, 17c74 <preempt+0xf4>
	struct lll_prepare_param prepare_param = {0};
   17c1c:	2100      	movs	r1, #0
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   17c1e:	2301      	movs	r3, #1
	prepare_param.param = event.curr.param;
   17c20:	6834      	ldr	r4, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   17c22:	9300      	str	r3, [sp, #0]
	struct lll_prepare_param prepare_param = {0};
   17c24:	e9cd 1104 	strd	r1, r1, [sp, #16]
   17c28:	9106      	str	r1, [sp, #24]
	event.curr.param = NULL;
   17c2a:	6031      	str	r1, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   17c2c:	9b03      	ldr	r3, [sp, #12]
	prepare_param.param = event.curr.param;
   17c2e:	9407      	str	r4, [sp, #28]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   17c30:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
   17c34:	aa04      	add	r2, sp, #16
   17c36:	f7f9 fb0d 	bl	11254 <ull_prepare_enqueue>
		LL_ASSERT(!ret);
   17c3a:	2800      	cmp	r0, #0
   17c3c:	d0df      	beq.n	17bfe <preempt+0x7e>
   17c3e:	4a1a      	ldr	r2, [pc, #104]	; (17ca8 <preempt+0x128>)
   17c40:	491c      	ldr	r1, [pc, #112]	; (17cb4 <preempt+0x134>)
   17c42:	481b      	ldr	r0, [pc, #108]	; (17cb0 <preempt+0x130>)
   17c44:	f240 334f 	movw	r3, #847	; 0x34f
   17c48:	f006 fe68 	bl	1e91c <printk>
   17c4c:	4040      	eors	r0, r0
   17c4e:	f380 8811 	msr	BASEPRI, r0
   17c52:	f04f 0003 	mov.w	r0, #3
   17c56:	df02      	svc	2
   17c58:	e7d1      	b.n	17bfe <preempt+0x7e>
				iter->is_aborted = 1;
   17c5a:	f043 0302 	orr.w	r3, r3, #2
   17c5e:	7703      	strb	r3, [r0, #28]
				iter->abort_cb(&iter->prepare_param,
   17c60:	6983      	ldr	r3, [r0, #24]
   17c62:	4798      	blx	r3
				idx = UINT8_MAX;
   17c64:	f88d 400a 	strb.w	r4, [sp, #10]
			iter = ull_prepare_dequeue_iter(&iter_idx);
   17c68:	f10d 000b 	add.w	r0, sp, #11
   17c6c:	f7f9 fb3e 	bl	112ec <ull_prepare_dequeue_iter>
		while (iter) {
   17c70:	2800      	cmp	r0, #0
   17c72:	d0d3      	beq.n	17c1c <preempt+0x9c>
			if (!iter->is_aborted &&
   17c74:	7f03      	ldrb	r3, [r0, #28]
   17c76:	079a      	lsls	r2, r3, #30
   17c78:	d4f6      	bmi.n	17c68 <preempt+0xe8>
			    event.curr.param == iter->prepare_param.param) {
   17c7a:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   17c7c:	6831      	ldr	r1, [r6, #0]
   17c7e:	4291      	cmp	r1, r2
   17c80:	d1f2      	bne.n	17c68 <preempt+0xe8>
   17c82:	e7ea      	b.n	17c5a <preempt+0xda>
	preempt_ticker_start(&next->prepare_param);
   17c84:	68c1      	ldr	r1, [r0, #12]
   17c86:	6800      	ldr	r0, [r0, #0]
   17c88:	f7ff ff40 	bl	17b0c <preempt_ticker_start.isra.0>
}
   17c8c:	b009      	add	sp, #36	; 0x24
   17c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next->is_aborted = 1;
   17c90:	7f23      	ldrb	r3, [r4, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   17c92:	69a2      	ldr	r2, [r4, #24]
   17c94:	68e1      	ldr	r1, [r4, #12]
		next->is_aborted = 1;
   17c96:	f043 0302 	orr.w	r3, r3, #2
   17c9a:	7723      	strb	r3, [r4, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   17c9c:	4620      	mov	r0, r4
   17c9e:	4790      	blx	r2
		goto preempt_next;
   17ca0:	e7ad      	b.n	17bfe <preempt+0x7e>
   17ca2:	bf00      	nop
   17ca4:	200026e0 	.word	0x200026e0
   17ca8:	0002533c 	.word	0x0002533c
   17cac:	000253cc 	.word	0x000253cc
   17cb0:	00024904 	.word	0x00024904
   17cb4:	00024c98 	.word	0x00024c98

00017cb8 <preempt_ticker_cb>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   17cb8:	2200      	movs	r2, #0
{
   17cba:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   17cbc:	4611      	mov	r1, r2
   17cbe:	4b0a      	ldr	r3, [pc, #40]	; (17ce8 <preempt_ticker_cb+0x30>)
   17cc0:	2001      	movs	r0, #1
   17cc2:	f7f5 fae1 	bl	d288 <mayfly_enqueue>
	LL_ASSERT(!ret);
   17cc6:	b900      	cbnz	r0, 17cca <preempt_ticker_cb+0x12>
}
   17cc8:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   17cca:	4a08      	ldr	r2, [pc, #32]	; (17cec <preempt_ticker_cb+0x34>)
   17ccc:	4908      	ldr	r1, [pc, #32]	; (17cf0 <preempt_ticker_cb+0x38>)
   17cce:	4809      	ldr	r0, [pc, #36]	; (17cf4 <preempt_ticker_cb+0x3c>)
   17cd0:	f44f 7343 	mov.w	r3, #780	; 0x30c
   17cd4:	f006 fe22 	bl	1e91c <printk>
   17cd8:	4040      	eors	r0, r0
   17cda:	f380 8811 	msr	BASEPRI, r0
   17cde:	f04f 0003 	mov.w	r0, #3
   17ce2:	df02      	svc	2
}
   17ce4:	bd08      	pop	{r3, pc}
   17ce6:	bf00      	nop
   17ce8:	20000540 	.word	0x20000540
   17cec:	0002533c 	.word	0x0002533c
   17cf0:	00024c98 	.word	0x00024c98
   17cf4:	00024904 	.word	0x00024904

00017cf8 <lll_init>:
{
   17cf8:	b510      	push	{r4, lr}
   17cfa:	4816      	ldr	r0, [pc, #88]	; (17d54 <lll_init+0x5c>)
   17cfc:	f005 f8f0 	bl	1cee0 <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   17d00:	4b15      	ldr	r3, [pc, #84]	; (17d58 <lll_init+0x60>)
   17d02:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   17d04:	b310      	cbz	r0, 17d4c <lll_init+0x54>
	event.curr.abort_cb = NULL;
   17d06:	4b15      	ldr	r3, [pc, #84]	; (17d5c <lll_init+0x64>)
   17d08:	2400      	movs	r4, #0
   17d0a:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
   17d0c:	f000 fa9a 	bl	18244 <lll_clock_init>
	if (err < 0) {
   17d10:	2800      	cmp	r0, #0
   17d12:	db1a      	blt.n	17d4a <lll_init+0x52>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   17d14:	4622      	mov	r2, r4
   17d16:	4621      	mov	r1, r4
   17d18:	2001      	movs	r0, #1
   17d1a:	f7ed fe75 	bl	5a08 <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   17d1e:	4622      	mov	r2, r4
   17d20:	2101      	movs	r1, #1
   17d22:	200b      	movs	r0, #11
   17d24:	f7ed fe70 	bl	5a08 <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   17d28:	4622      	mov	r2, r4
   17d2a:	4621      	mov	r1, r4
   17d2c:	2018      	movs	r0, #24
   17d2e:	f7ed fe6b 	bl	5a08 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   17d32:	2001      	movs	r0, #1
   17d34:	f7ed fe36 	bl	59a4 <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   17d38:	200b      	movs	r0, #11
   17d3a:	f7ed fe33 	bl	59a4 <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   17d3e:	2018      	movs	r0, #24
   17d40:	f7ed fe30 	bl	59a4 <arch_irq_enable>
	radio_setup();
   17d44:	f001 fe12 	bl	1996c <radio_setup>
	return 0;
   17d48:	4620      	mov	r0, r4
}
   17d4a:	bd10      	pop	{r4, pc}
		return -ENODEV;
   17d4c:	f06f 0012 	mvn.w	r0, #18
}
   17d50:	bd10      	pop	{r4, pc}
   17d52:	bf00      	nop
   17d54:	000253d8 	.word	0x000253d8
   17d58:	200026dc 	.word	0x200026dc
   17d5c:	200026e0 	.word	0x200026e0

00017d60 <lll_csrand_get>:
	return entropy_get_entropy(dev_entropy, buf, len);
   17d60:	4a04      	ldr	r2, [pc, #16]	; (17d74 <lll_csrand_get+0x14>)
{
   17d62:	b410      	push	{r4}
   17d64:	4603      	mov	r3, r0
	return entropy_get_entropy(dev_entropy, buf, len);
   17d66:	6810      	ldr	r0, [r2, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   17d68:	6884      	ldr	r4, [r0, #8]
   17d6a:	b28a      	uxth	r2, r1
   17d6c:	4619      	mov	r1, r3
   17d6e:	6823      	ldr	r3, [r4, #0]
}
   17d70:	bc10      	pop	{r4}
   17d72:	4718      	bx	r3
   17d74:	200026dc 	.word	0x200026dc

00017d78 <lll_csrand_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   17d78:	4b08      	ldr	r3, [pc, #32]	; (17d9c <lll_csrand_isr_get+0x24>)
   17d7a:	681b      	ldr	r3, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   17d7c:	689a      	ldr	r2, [r3, #8]
{
   17d7e:	b410      	push	{r4}
   17d80:	6854      	ldr	r4, [r2, #4]
   17d82:	b134      	cbz	r4, 17d92 <lll_csrand_isr_get+0x1a>
   17d84:	b28a      	uxth	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   17d86:	46a4      	mov	ip, r4
   17d88:	4601      	mov	r1, r0
}
   17d8a:	bc10      	pop	{r4}
   17d8c:	4618      	mov	r0, r3
   17d8e:	2300      	movs	r3, #0
   17d90:	4760      	bx	ip
   17d92:	f06f 0085 	mvn.w	r0, #133	; 0x85
   17d96:	bc10      	pop	{r4}
   17d98:	4770      	bx	lr
   17d9a:	bf00      	nop
   17d9c:	200026dc 	.word	0x200026dc

00017da0 <lll_rand_isr_get>:
   17da0:	f7ff bfea 	b.w	17d78 <lll_csrand_isr_get>

00017da4 <lll_reset>:
}
   17da4:	2000      	movs	r0, #0
   17da6:	4770      	bx	lr

00017da8 <lll_disable>:
{
   17da8:	b530      	push	{r4, r5, lr}
	if (!param || (param == event.curr.param)) {
   17daa:	4604      	mov	r4, r0
{
   17dac:	b083      	sub	sp, #12
	if (!param || (param == event.curr.param)) {
   17dae:	b378      	cbz	r0, 17e10 <lll_disable+0x68>
   17db0:	4b23      	ldr	r3, [pc, #140]	; (17e40 <lll_disable+0x98>)
   17db2:	681a      	ldr	r2, [r3, #0]
   17db4:	4282      	cmp	r2, r0
   17db6:	d025      	beq.n	17e04 <lll_disable+0x5c>
		idx = UINT8_MAX;
   17db8:	25ff      	movs	r5, #255	; 0xff
		next = ull_prepare_dequeue_iter(&idx);
   17dba:	f10d 0007 	add.w	r0, sp, #7
		idx = UINT8_MAX;
   17dbe:	f88d 5007 	strb.w	r5, [sp, #7]
		next = ull_prepare_dequeue_iter(&idx);
   17dc2:	f7f9 fa93 	bl	112ec <ull_prepare_dequeue_iter>
		while (next) {
   17dc6:	b938      	cbnz	r0, 17dd8 <lll_disable+0x30>
   17dc8:	e01a      	b.n	17e00 <lll_disable+0x58>
			    (!param || (param == next->prepare_param.param))) {
   17dca:	428c      	cmp	r4, r1
   17dcc:	d00a      	beq.n	17de4 <lll_disable+0x3c>
			next = ull_prepare_dequeue_iter(&idx);
   17dce:	f10d 0007 	add.w	r0, sp, #7
   17dd2:	f7f9 fa8b 	bl	112ec <ull_prepare_dequeue_iter>
		while (next) {
   17dd6:	b198      	cbz	r0, 17e00 <lll_disable+0x58>
			if (!next->is_aborted &&
   17dd8:	7f03      	ldrb	r3, [r0, #28]
   17dda:	079b      	lsls	r3, r3, #30
   17ddc:	d4f7      	bmi.n	17dce <lll_disable+0x26>
				next->is_aborted = 1;
   17dde:	68c1      	ldr	r1, [r0, #12]
			if (!next->is_aborted &&
   17de0:	2c00      	cmp	r4, #0
   17de2:	d1f2      	bne.n	17dca <lll_disable+0x22>
				next->is_aborted = 1;
   17de4:	7f03      	ldrb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   17de6:	6982      	ldr	r2, [r0, #24]
				next->is_aborted = 1;
   17de8:	f043 0302 	orr.w	r3, r3, #2
   17dec:	7703      	strb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   17dee:	4790      	blx	r2
			next = ull_prepare_dequeue_iter(&idx);
   17df0:	f10d 0007 	add.w	r0, sp, #7
				idx = UINT8_MAX;
   17df4:	f88d 5007 	strb.w	r5, [sp, #7]
			next = ull_prepare_dequeue_iter(&idx);
   17df8:	f7f9 fa78 	bl	112ec <ull_prepare_dequeue_iter>
		while (next) {
   17dfc:	2800      	cmp	r0, #0
   17dfe:	d1eb      	bne.n	17dd8 <lll_disable+0x30>
}
   17e00:	b003      	add	sp, #12
   17e02:	bd30      	pop	{r4, r5, pc}
		if (event.curr.abort_cb && event.curr.param) {
   17e04:	689b      	ldr	r3, [r3, #8]
   17e06:	b16b      	cbz	r3, 17e24 <lll_disable+0x7c>
   17e08:	4621      	mov	r1, r4
			event.curr.abort_cb(NULL, event.curr.param);
   17e0a:	2000      	movs	r0, #0
   17e0c:	4798      	blx	r3
   17e0e:	e7d3      	b.n	17db8 <lll_disable+0x10>
		if (event.curr.abort_cb && event.curr.param) {
   17e10:	4a0b      	ldr	r2, [pc, #44]	; (17e40 <lll_disable+0x98>)
   17e12:	6893      	ldr	r3, [r2, #8]
   17e14:	2b00      	cmp	r3, #0
   17e16:	d0cf      	beq.n	17db8 <lll_disable+0x10>
   17e18:	6811      	ldr	r1, [r2, #0]
   17e1a:	2900      	cmp	r1, #0
   17e1c:	d0cc      	beq.n	17db8 <lll_disable+0x10>
			event.curr.abort_cb(NULL, event.curr.param);
   17e1e:	2000      	movs	r0, #0
   17e20:	4798      	blx	r3
   17e22:	e7c9      	b.n	17db8 <lll_disable+0x10>
			LL_ASSERT(!param);
   17e24:	4a07      	ldr	r2, [pc, #28]	; (17e44 <lll_disable+0x9c>)
   17e26:	4908      	ldr	r1, [pc, #32]	; (17e48 <lll_disable+0xa0>)
   17e28:	4808      	ldr	r0, [pc, #32]	; (17e4c <lll_disable+0xa4>)
   17e2a:	23fc      	movs	r3, #252	; 0xfc
   17e2c:	f006 fd76 	bl	1e91c <printk>
   17e30:	4040      	eors	r0, r0
   17e32:	f380 8811 	msr	BASEPRI, r0
   17e36:	f04f 0003 	mov.w	r0, #3
   17e3a:	df02      	svc	2
   17e3c:	e7bc      	b.n	17db8 <lll_disable+0x10>
   17e3e:	bf00      	nop
   17e40:	200026e0 	.word	0x200026e0
   17e44:	0002533c 	.word	0x0002533c
   17e48:	000253dc 	.word	0x000253dc
   17e4c:	00024904 	.word	0x00024904

00017e50 <lll_prepare_done>:
}
   17e50:	2000      	movs	r0, #0
   17e52:	4770      	bx	lr

00017e54 <lll_done>:
{
   17e54:	b538      	push	{r3, r4, r5, lr}
   17e56:	4604      	mov	r4, r0
	next = ull_prepare_dequeue_get();
   17e58:	f7f9 fa3a 	bl	112d0 <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   17e5c:	b15c      	cbz	r4, 17e76 <lll_done+0x22>
   17e5e:	b318      	cbz	r0, 17ea8 <lll_done+0x54>
			ull = HDR_ULL(((struct lll_hdr *)param)->parent);
   17e60:	6824      	ldr	r4, [r4, #0]
   17e62:	3410      	adds	r4, #16
	ull_prepare_dequeue(TICKER_USER_ID_LLL);
   17e64:	2000      	movs	r0, #0
   17e66:	f7f9 fa5f 	bl	11328 <ull_prepare_dequeue>
	evdone = ull_event_done(ull);
   17e6a:	4620      	mov	r0, r4
   17e6c:	f7f9 fac8 	bl	11400 <ull_event_done>
	LL_ASSERT(evdone);
   17e70:	b158      	cbz	r0, 17e8a <lll_done+0x36>
}
   17e72:	2000      	movs	r0, #0
   17e74:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(event.curr.abort_cb);
   17e76:	4d1a      	ldr	r5, [pc, #104]	; (17ee0 <lll_done+0x8c>)
   17e78:	68ab      	ldr	r3, [r5, #8]
   17e7a:	b31b      	cbz	r3, 17ec4 <lll_done+0x70>
		param = event.curr.param;
   17e7c:	682c      	ldr	r4, [r5, #0]
		event.curr.abort_cb = NULL;
   17e7e:	2300      	movs	r3, #0
   17e80:	60ab      	str	r3, [r5, #8]
		event.curr.param = NULL;
   17e82:	602b      	str	r3, [r5, #0]
		if (param) {
   17e84:	2c00      	cmp	r4, #0
   17e86:	d1eb      	bne.n	17e60 <lll_done+0xc>
   17e88:	e7ec      	b.n	17e64 <lll_done+0x10>
	LL_ASSERT(evdone);
   17e8a:	4a16      	ldr	r2, [pc, #88]	; (17ee4 <lll_done+0x90>)
   17e8c:	4916      	ldr	r1, [pc, #88]	; (17ee8 <lll_done+0x94>)
   17e8e:	4817      	ldr	r0, [pc, #92]	; (17eec <lll_done+0x98>)
   17e90:	f240 1361 	movw	r3, #353	; 0x161
   17e94:	f006 fd42 	bl	1e91c <printk>
   17e98:	4040      	eors	r0, r0
   17e9a:	f380 8811 	msr	BASEPRI, r0
   17e9e:	f04f 0003 	mov.w	r0, #3
   17ea2:	df02      	svc	2
}
   17ea4:	2000      	movs	r0, #0
   17ea6:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(!param || next);
   17ea8:	4a0e      	ldr	r2, [pc, #56]	; (17ee4 <lll_done+0x90>)
   17eaa:	4911      	ldr	r1, [pc, #68]	; (17ef0 <lll_done+0x9c>)
   17eac:	480f      	ldr	r0, [pc, #60]	; (17eec <lll_done+0x98>)
   17eae:	f240 1337 	movw	r3, #311	; 0x137
   17eb2:	f006 fd33 	bl	1e91c <printk>
   17eb6:	4040      	eors	r0, r0
   17eb8:	f380 8811 	msr	BASEPRI, r0
   17ebc:	f04f 0003 	mov.w	r0, #3
   17ec0:	df02      	svc	2
   17ec2:	e7cd      	b.n	17e60 <lll_done+0xc>
		LL_ASSERT(event.curr.abort_cb);
   17ec4:	4a07      	ldr	r2, [pc, #28]	; (17ee4 <lll_done+0x90>)
   17ec6:	490b      	ldr	r1, [pc, #44]	; (17ef4 <lll_done+0xa0>)
   17ec8:	4808      	ldr	r0, [pc, #32]	; (17eec <lll_done+0x98>)
   17eca:	f240 133d 	movw	r3, #317	; 0x13d
   17ece:	f006 fd25 	bl	1e91c <printk>
   17ed2:	4040      	eors	r0, r0
   17ed4:	f380 8811 	msr	BASEPRI, r0
   17ed8:	f04f 0003 	mov.w	r0, #3
   17edc:	df02      	svc	2
   17ede:	e7cd      	b.n	17e7c <lll_done+0x28>
   17ee0:	200026e0 	.word	0x200026e0
   17ee4:	0002533c 	.word	0x0002533c
   17ee8:	00025408 	.word	0x00025408
   17eec:	00024904 	.word	0x00024904
   17ef0:	000253e4 	.word	0x000253e4
   17ef4:	000253f4 	.word	0x000253f4

00017ef8 <lll_is_abort_cb>:
}
   17ef8:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   17efc:	4770      	bx	lr
   17efe:	bf00      	nop

00017f00 <lll_evt_offset_get>:
	} else if (evt->ticks_xtal_to_start & XON_BITMASK) {
   17f00:	e9d0 2300 	ldrd	r2, r3, [r0]
   17f04:	2a00      	cmp	r2, #0
   17f06:	db04      	blt.n	17f12 <lll_evt_offset_get+0x12>
		return MAX(evt->ticks_active_to_start,
   17f08:	429a      	cmp	r2, r3
   17f0a:	bf38      	it	cc
   17f0c:	461a      	movcc	r2, r3
   17f0e:	4610      	mov	r0, r2
}
   17f10:	4770      	bx	lr
		return MAX(evt->ticks_active_to_start,
   17f12:	6880      	ldr	r0, [r0, #8]
   17f14:	4298      	cmp	r0, r3
   17f16:	bf38      	it	cc
   17f18:	4618      	movcc	r0, r3
   17f1a:	4770      	bx	lr

00017f1c <lll_preempt_calc>:
{
   17f1c:	b510      	push	{r4, lr}
   17f1e:	4614      	mov	r4, r2
	ticks_now = ticker_ticks_now_get();
   17f20:	f7f6 fcfe 	bl	e920 <ticker_ticks_now_get>
	diff = ticks_now - ticks_at_event;
   17f24:	1b02      	subs	r2, r0, r4
	if (diff & BIT(HAL_TICKER_CNTR_MSBIT)) {
   17f26:	0213      	lsls	r3, r2, #8
   17f28:	d405      	bmi.n	17f36 <lll_preempt_calc+0x1a>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   17f2a:	1cd0      	adds	r0, r2, #3
	if (diff > HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US)) {
   17f2c:	2809      	cmp	r0, #9
   17f2e:	bf94      	ite	ls
   17f30:	2000      	movls	r0, #0
   17f32:	2001      	movhi	r0, #1
}
   17f34:	bd10      	pop	{r4, pc}
		return 0;
   17f36:	2000      	movs	r0, #0
}
   17f38:	bd10      	pop	{r4, pc}
   17f3a:	bf00      	nop

00017f3c <lll_chan_set>:
	switch (chan) {
   17f3c:	2826      	cmp	r0, #38	; 0x26
{
   17f3e:	b510      	push	{r4, lr}
   17f40:	4604      	mov	r4, r0
	switch (chan) {
   17f42:	d01c      	beq.n	17f7e <lll_chan_set+0x42>
   17f44:	2827      	cmp	r0, #39	; 0x27
   17f46:	d012      	beq.n	17f6e <lll_chan_set+0x32>
   17f48:	2825      	cmp	r0, #37	; 0x25
   17f4a:	d008      	beq.n	17f5e <lll_chan_set+0x22>
		if (chan < 11) {
   17f4c:	280a      	cmp	r0, #10
   17f4e:	d91e      	bls.n	17f8e <lll_chan_set+0x52>
		} else if (chan < 40) {
   17f50:	2827      	cmp	r0, #39	; 0x27
   17f52:	d821      	bhi.n	17f98 <lll_chan_set+0x5c>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   17f54:	3003      	adds	r0, #3
   17f56:	0040      	lsls	r0, r0, #1
   17f58:	f001 fd64 	bl	19a24 <radio_freq_chan_set>
   17f5c:	e002      	b.n	17f64 <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   17f5e:	2002      	movs	r0, #2
   17f60:	f001 fd60 	bl	19a24 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   17f64:	4620      	mov	r0, r4
}
   17f66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   17f6a:	f001 bd61 	b.w	19a30 <radio_whiten_iv_set>
		radio_freq_chan_set(80);
   17f6e:	2050      	movs	r0, #80	; 0x50
   17f70:	f001 fd58 	bl	19a24 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   17f74:	4620      	mov	r0, r4
}
   17f76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   17f7a:	f001 bd59 	b.w	19a30 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   17f7e:	201a      	movs	r0, #26
   17f80:	f001 fd50 	bl	19a24 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   17f84:	4620      	mov	r0, r4
}
   17f86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   17f8a:	f001 bd51 	b.w	19a30 <radio_whiten_iv_set>
			radio_freq_chan_set(4 + (chan * 2U));
   17f8e:	3002      	adds	r0, #2
   17f90:	0040      	lsls	r0, r0, #1
   17f92:	f001 fd47 	bl	19a24 <radio_freq_chan_set>
   17f96:	e7e5      	b.n	17f64 <lll_chan_set+0x28>
			LL_ASSERT(0);
   17f98:	4a06      	ldr	r2, [pc, #24]	; (17fb4 <lll_chan_set+0x78>)
   17f9a:	4907      	ldr	r1, [pc, #28]	; (17fb8 <lll_chan_set+0x7c>)
   17f9c:	4807      	ldr	r0, [pc, #28]	; (17fbc <lll_chan_set+0x80>)
   17f9e:	f240 13cd 	movw	r3, #461	; 0x1cd
   17fa2:	f006 fcbb 	bl	1e91c <printk>
   17fa6:	4040      	eors	r0, r0
   17fa8:	f380 8811 	msr	BASEPRI, r0
   17fac:	f04f 0003 	mov.w	r0, #3
   17fb0:	df02      	svc	2
   17fb2:	e7d7      	b.n	17f64 <lll_chan_set+0x28>
   17fb4:	0002533c 	.word	0x0002533c
   17fb8:	00024974 	.word	0x00024974
   17fbc:	00024904 	.word	0x00024904

00017fc0 <lll_radio_rx_ready_delay_get>:
	return radio_rx_ready_delay_get(phy, flags);
   17fc0:	f001 bd9e 	b.w	19b00 <radio_rx_ready_delay_get>

00017fc4 <lll_isr_tx_status_reset>:
{
   17fc4:	b508      	push	{r3, lr}
	radio_status_reset();
   17fc6:	f001 fdc1 	bl	19b4c <radio_status_reset>
}
   17fca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   17fce:	f001 be7d 	b.w	19ccc <radio_tmr_status_reset>
   17fd2:	bf00      	nop

00017fd4 <lll_isr_rx_status_reset>:
{
   17fd4:	b508      	push	{r3, lr}
	radio_status_reset();
   17fd6:	f001 fdb9 	bl	19b4c <radio_status_reset>
	radio_tmr_status_reset();
   17fda:	f001 fe77 	bl	19ccc <radio_tmr_status_reset>
}
   17fde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   17fe2:	f001 be23 	b.w	19c2c <radio_rssi_status_reset>
   17fe6:	bf00      	nop

00017fe8 <lll_isr_status_reset>:
{
   17fe8:	b508      	push	{r3, lr}
	radio_status_reset();
   17fea:	f001 fdaf 	bl	19b4c <radio_status_reset>
	radio_tmr_status_reset();
   17fee:	f001 fe6d 	bl	19ccc <radio_tmr_status_reset>
	radio_filter_status_reset();
   17ff2:	f001 fe53 	bl	19c9c <radio_filter_status_reset>
	radio_ar_status_reset();
   17ff6:	f002 f839 	bl	1a06c <radio_ar_status_reset>
}
   17ffa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   17ffe:	f001 be15 	b.w	19c2c <radio_rssi_status_reset>
   18002:	bf00      	nop

00018004 <lll_isr_cleanup>:
{
   18004:	b508      	push	{r3, lr}
   18006:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   18008:	4815      	ldr	r0, [pc, #84]	; (18060 <lll_isr_cleanup+0x5c>)
   1800a:	f001 fc8f 	bl	1992c <radio_isr_set>
	if (!radio_is_idle()) {
   1800e:	f001 fdbd 	bl	19b8c <radio_is_idle>
   18012:	b150      	cbz	r0, 1802a <lll_isr_cleanup+0x26>
	radio_tmr_stop();
   18014:	f001 fefc 	bl	19e10 <radio_tmr_stop>
	err = lll_hfclock_off();
   18018:	f000 f958 	bl	182cc <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1801c:	2800      	cmp	r0, #0
   1801e:	db0c      	blt.n	1803a <lll_isr_cleanup+0x36>
}
   18020:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   18024:	2000      	movs	r0, #0
   18026:	f7ff bf15 	b.w	17e54 <lll_done>
		radio_disable();
   1802a:	f001 fd77 	bl	19b1c <radio_disable>
	radio_tmr_stop();
   1802e:	f001 feef 	bl	19e10 <radio_tmr_stop>
	err = lll_hfclock_off();
   18032:	f000 f94b 	bl	182cc <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   18036:	2800      	cmp	r0, #0
   18038:	daf2      	bge.n	18020 <lll_isr_cleanup+0x1c>
   1803a:	4a0a      	ldr	r2, [pc, #40]	; (18064 <lll_isr_cleanup+0x60>)
   1803c:	490a      	ldr	r1, [pc, #40]	; (18068 <lll_isr_cleanup+0x64>)
   1803e:	480b      	ldr	r0, [pc, #44]	; (1806c <lll_isr_cleanup+0x68>)
   18040:	f44f 730c 	mov.w	r3, #560	; 0x230
   18044:	f006 fc6a 	bl	1e91c <printk>
   18048:	4040      	eors	r0, r0
   1804a:	f380 8811 	msr	BASEPRI, r0
   1804e:	f04f 0003 	mov.w	r0, #3
   18052:	df02      	svc	2
	lll_done(NULL);
   18054:	2000      	movs	r0, #0
}
   18056:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1805a:	f7ff befb 	b.w	17e54 <lll_done>
   1805e:	bf00      	nop
   18060:	00017aa9 	.word	0x00017aa9
   18064:	0002533c 	.word	0x0002533c
   18068:	00025410 	.word	0x00025410
   1806c:	00024904 	.word	0x00024904

00018070 <lll_isr_abort>:
{
   18070:	b510      	push	{r4, lr}
   18072:	4604      	mov	r4, r0
	lll_isr_status_reset();
   18074:	f7ff ffb8 	bl	17fe8 <lll_isr_status_reset>
	lll_isr_cleanup(param);
   18078:	4620      	mov	r0, r4
}
   1807a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1807e:	f7ff bfc1 	b.w	18004 <lll_isr_cleanup>
   18082:	bf00      	nop

00018084 <lll_isr_early_abort>:
{
   18084:	b508      	push	{r3, lr}
   18086:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   18088:	4813      	ldr	r0, [pc, #76]	; (180d8 <lll_isr_early_abort+0x54>)
   1808a:	f001 fc4f 	bl	1992c <radio_isr_set>
	if (!radio_is_idle()) {
   1808e:	f001 fd7d 	bl	19b8c <radio_is_idle>
   18092:	b140      	cbz	r0, 180a6 <lll_isr_early_abort+0x22>
	err = lll_hfclock_off();
   18094:	f000 f91a 	bl	182cc <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   18098:	2800      	cmp	r0, #0
   1809a:	db0a      	blt.n	180b2 <lll_isr_early_abort+0x2e>
}
   1809c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   180a0:	2000      	movs	r0, #0
   180a2:	f7ff bed7 	b.w	17e54 <lll_done>
		radio_disable();
   180a6:	f001 fd39 	bl	19b1c <radio_disable>
	err = lll_hfclock_off();
   180aa:	f000 f90f 	bl	182cc <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   180ae:	2800      	cmp	r0, #0
   180b0:	daf4      	bge.n	1809c <lll_isr_early_abort+0x18>
   180b2:	4a0a      	ldr	r2, [pc, #40]	; (180dc <lll_isr_early_abort+0x58>)
   180b4:	490a      	ldr	r1, [pc, #40]	; (180e0 <lll_isr_early_abort+0x5c>)
   180b6:	480b      	ldr	r0, [pc, #44]	; (180e4 <lll_isr_early_abort+0x60>)
   180b8:	f240 233f 	movw	r3, #575	; 0x23f
   180bc:	f006 fc2e 	bl	1e91c <printk>
   180c0:	4040      	eors	r0, r0
   180c2:	f380 8811 	msr	BASEPRI, r0
   180c6:	f04f 0003 	mov.w	r0, #3
   180ca:	df02      	svc	2
	lll_done(NULL);
   180cc:	2000      	movs	r0, #0
}
   180ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   180d2:	f7ff bebf 	b.w	17e54 <lll_done>
   180d6:	bf00      	nop
   180d8:	00017aa9 	.word	0x00017aa9
   180dc:	0002533c 	.word	0x0002533c
   180e0:	00025410 	.word	0x00025410
   180e4:	00024904 	.word	0x00024904

000180e8 <lll_prepare_resolve>:
{
   180e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   180ec:	b084      	sub	sp, #16
   180ee:	4605      	mov	r5, r0
	idx = UINT8_MAX;
   180f0:	f04f 0cff 	mov.w	ip, #255	; 0xff
	p = ull_prepare_dequeue_iter(&idx);
   180f4:	f10d 000f 	add.w	r0, sp, #15
{
   180f8:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
	idx = UINT8_MAX;
   180fc:	f88d c00f 	strb.w	ip, [sp, #15]
{
   18100:	460e      	mov	r6, r1
   18102:	4617      	mov	r7, r2
   18104:	461c      	mov	r4, r3
	p = ull_prepare_dequeue_iter(&idx);
   18106:	f7f9 f8f1 	bl	112ec <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   1810a:	b918      	cbnz	r0, 18114 <lll_prepare_resolve+0x2c>
   1810c:	e01c      	b.n	18148 <lll_prepare_resolve+0x60>
		p = ull_prepare_dequeue_iter(&idx);
   1810e:	f7f9 f8ed 	bl	112ec <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   18112:	b1c8      	cbz	r0, 18148 <lll_prepare_resolve+0x60>
   18114:	7f03      	ldrb	r3, [r0, #28]
   18116:	079b      	lsls	r3, r3, #30
		p = ull_prepare_dequeue_iter(&idx);
   18118:	f10d 000f 	add.w	r0, sp, #15
	while (p && (p->is_aborted || p->is_resume)) {
   1811c:	d1f7      	bne.n	1810e <lll_prepare_resolve+0x26>
	    event.curr.abort_cb ||
   1811e:	4b2c      	ldr	r3, [pc, #176]	; (181d0 <lll_prepare_resolve+0xe8>)
	if ((!is_dequeue && !is_done_sync()) ||
   18120:	689a      	ldr	r2, [r3, #8]
   18122:	b9a2      	cbnz	r2, 1814e <lll_prepare_resolve+0x66>
	    (p && is_resume)) {
   18124:	f1b8 0f00 	cmp.w	r8, #0
   18128:	d033      	beq.n	18192 <lll_prepare_resolve+0xaa>
		err = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   1812a:	f8cd 8000 	str.w	r8, [sp]
   1812e:	463b      	mov	r3, r7
   18130:	4631      	mov	r1, r6
   18132:	4628      	mov	r0, r5
   18134:	4622      	mov	r2, r4
   18136:	f7f9 f88d 	bl	11254 <ull_prepare_enqueue>
		LL_ASSERT(!err);
   1813a:	b9c8      	cbnz	r0, 18170 <lll_prepare_resolve+0x88>
		return -EINPROGRESS;
   1813c:	f06f 0476 	mvn.w	r4, #118	; 0x76
}
   18140:	4620      	mov	r0, r4
   18142:	b004      	add	sp, #16
   18144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    event.curr.abort_cb ||
   18148:	4b21      	ldr	r3, [pc, #132]	; (181d0 <lll_prepare_resolve+0xe8>)
	if ((!is_dequeue && !is_done_sync()) ||
   1814a:	689a      	ldr	r2, [r3, #8]
   1814c:	b30a      	cbz	r2, 18192 <lll_prepare_resolve+0xaa>
		err = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   1814e:	f8cd 8000 	str.w	r8, [sp]
   18152:	463b      	mov	r3, r7
   18154:	4631      	mov	r1, r6
   18156:	4628      	mov	r0, r5
   18158:	4622      	mov	r2, r4
   1815a:	f7f9 f87b 	bl	11254 <ull_prepare_enqueue>
		LL_ASSERT(!err);
   1815e:	b938      	cbnz	r0, 18170 <lll_prepare_resolve+0x88>
		if (is_resume) {
   18160:	f1b8 0f00 	cmp.w	r8, #0
   18164:	d1ea      	bne.n	1813c <lll_prepare_resolve+0x54>
		preempt_ticker_start(prepare_param);
   18166:	68e1      	ldr	r1, [r4, #12]
   18168:	6820      	ldr	r0, [r4, #0]
   1816a:	f7ff fccf 	bl	17b0c <preempt_ticker_start.isra.0>
   1816e:	e7e5      	b.n	1813c <lll_prepare_resolve+0x54>
		LL_ASSERT(!err);
   18170:	4a18      	ldr	r2, [pc, #96]	; (181d4 <lll_prepare_resolve+0xec>)
   18172:	4919      	ldr	r1, [pc, #100]	; (181d8 <lll_prepare_resolve+0xf0>)
   18174:	4819      	ldr	r0, [pc, #100]	; (181dc <lll_prepare_resolve+0xf4>)
   18176:	f240 237a 	movw	r3, #634	; 0x27a
   1817a:	f006 fbcf 	bl	1e91c <printk>
   1817e:	4040      	eors	r0, r0
   18180:	f380 8811 	msr	BASEPRI, r0
   18184:	f04f 0003 	mov.w	r0, #3
   18188:	df02      	svc	2
		if (is_resume) {
   1818a:	f1b8 0f00 	cmp.w	r8, #0
   1818e:	d1d5      	bne.n	1813c <lll_prepare_resolve+0x54>
   18190:	e7e9      	b.n	18166 <lll_prepare_resolve+0x7e>
	event.curr.param = prepare_param->param;
   18192:	68e2      	ldr	r2, [r4, #12]
   18194:	601a      	str	r2, [r3, #0]
	event.curr.abort_cb = abort_cb;
   18196:	e9c3 5601 	strd	r5, r6, [r3, #4]
	err = prepare_cb(prepare_param);
   1819a:	4620      	mov	r0, r4
   1819c:	47b8      	blx	r7
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1819e:	2200      	movs	r2, #0
   181a0:	4b0f      	ldr	r3, [pc, #60]	; (181e0 <lll_prepare_resolve+0xf8>)
   181a2:	9200      	str	r2, [sp, #0]
	err = prepare_cb(prepare_param);
   181a4:	4604      	mov	r4, r0
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   181a6:	4611      	mov	r1, r2
   181a8:	4610      	mov	r0, r2
   181aa:	f7f6 fb73 	bl	e894 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   181ae:	2802      	cmp	r0, #2
   181b0:	d9c6      	bls.n	18140 <lll_prepare_resolve+0x58>
   181b2:	4a08      	ldr	r2, [pc, #32]	; (181d4 <lll_prepare_resolve+0xec>)
   181b4:	490b      	ldr	r1, [pc, #44]	; (181e4 <lll_prepare_resolve+0xfc>)
   181b6:	4809      	ldr	r0, [pc, #36]	; (181dc <lll_prepare_resolve+0xf4>)
   181b8:	f44f 732d 	mov.w	r3, #692	; 0x2b4
   181bc:	f006 fbae 	bl	1e91c <printk>
   181c0:	4040      	eors	r0, r0
   181c2:	f380 8811 	msr	BASEPRI, r0
   181c6:	f04f 0003 	mov.w	r0, #3
   181ca:	df02      	svc	2
   181cc:	e7b8      	b.n	18140 <lll_prepare_resolve+0x58>
   181ce:	bf00      	nop
   181d0:	200026e0 	.word	0x200026e0
   181d4:	0002533c 	.word	0x0002533c
   181d8:	00024b9c 	.word	0x00024b9c
   181dc:	00024904 	.word	0x00024904
   181e0:	00017aad 	.word	0x00017aad
   181e4:	000253a4 	.word	0x000253a4

000181e8 <clock_ready>:
	z_impl_k_sem_give(sem);
   181e8:	f101 0010 	add.w	r0, r1, #16
   181ec:	f005 bcde 	b.w	1dbac <z_impl_k_sem_give>

000181f0 <blocking_on>:

	k_sem_give(&clk_state->sem);
}

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   181f0:	b530      	push	{r4, r5, lr}
   181f2:	4604      	mov	r4, r0
   181f4:	b08b      	sub	sp, #44	; 0x2c
   181f6:	460d      	mov	r5, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
   181f8:	2201      	movs	r2, #1
   181fa:	2100      	movs	r1, #0
   181fc:	a804      	add	r0, sp, #16
   181fe:	f00b fa30 	bl	23662 <z_impl_k_sem_init>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   18202:	2300      	movs	r3, #0
   18204:	4a0e      	ldr	r2, [pc, #56]	; (18240 <blocking_on+0x50>)
   18206:	9303      	str	r3, [sp, #12]
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   18208:	4620      	mov	r0, r4
   1820a:	2303      	movs	r3, #3
   1820c:	4669      	mov	r1, sp
   1820e:	9201      	str	r2, [sp, #4]
   18210:	9302      	str	r3, [sp, #8]
   18212:	f006 fbff 	bl	1ea14 <onoff_request>
	if (err < 0) {
   18216:	2800      	cmp	r0, #0
   18218:	db10      	blt.n	1823c <blocking_on+0x4c>
   1821a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1821e:	f240 30e7 	movw	r0, #999	; 0x3e7
   18222:	2100      	movs	r1, #0
   18224:	fbe3 0105 	umlal	r0, r1, r3, r5
   18228:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1822c:	2300      	movs	r3, #0
   1822e:	f7e8 fc05 	bl	a3c <__aeabi_uldivmod>
   18232:	4602      	mov	r2, r0
   18234:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   18236:	a804      	add	r0, sp, #16
   18238:	f005 fcde 	bl	1dbf8 <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   1823c:	b00b      	add	sp, #44	; 0x2c
   1823e:	bd30      	pop	{r4, r5, pc}
   18240:	000181e9 	.word	0x000181e9

00018244 <lll_clock_init>:

int lll_clock_init(void)
{
   18244:	b510      	push	{r4, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   18246:	2001      	movs	r0, #1
   18248:	f7ec ff48 	bl	50dc <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   1824c:	4904      	ldr	r1, [pc, #16]	; (18260 <lll_clock_init+0x1c>)
   1824e:	2401      	movs	r4, #1
   18250:	2300      	movs	r3, #0
   18252:	608c      	str	r4, [r1, #8]
   18254:	60cb      	str	r3, [r1, #12]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
}
   18256:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1825a:	604b      	str	r3, [r1, #4]
	return onoff_request(mgr, &lf_cli);
   1825c:	f006 bbda 	b.w	1ea14 <onoff_request>
   18260:	200026f8 	.word	0x200026f8

00018264 <lll_clock_wait>:
{
	struct onoff_manager *mgr;
	static bool done;
	int err;

	if (done) {
   18264:	4b0c      	ldr	r3, [pc, #48]	; (18298 <lll_clock_wait+0x34>)
   18266:	781a      	ldrb	r2, [r3, #0]
   18268:	b10a      	cbz	r2, 1826e <lll_clock_wait+0xa>
		return 0;
   1826a:	2000      	movs	r0, #0
	if (err != ONOFF_STATE_ON) {
		return -EIO;
	}

	return 0;
}
   1826c:	4770      	bx	lr
{
   1826e:	b510      	push	{r4, lr}
	done = true;
   18270:	2001      	movs	r0, #1
   18272:	7018      	strb	r0, [r3, #0]
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   18274:	f7ec ff32 	bl	50dc <z_nrf_clock_control_get_onoff>
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   18278:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1827c:	4604      	mov	r4, r0
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   1827e:	f7ff ffb7 	bl	181f0 <blocking_on>
	if (err) {
   18282:	b938      	cbnz	r0, 18294 <lll_clock_wait+0x30>
	err = onoff_release(mgr);
   18284:	4620      	mov	r0, r4
   18286:	f006 fc0e 	bl	1eaa6 <onoff_release>
	if (err != ONOFF_STATE_ON) {
   1828a:	2802      	cmp	r0, #2
		return 0;
   1828c:	bf0c      	ite	eq
   1828e:	2000      	moveq	r0, #0
		return -EIO;
   18290:	f06f 0004 	mvnne.w	r0, #4
}
   18294:	bd10      	pop	{r4, pc}
   18296:	bf00      	nop
   18298:	200035d8 	.word	0x200035d8

0001829c <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   1829c:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1829e:	4b0a      	ldr	r3, [pc, #40]	; (182c8 <lll_hfclock_on+0x2c>)
   182a0:	f3bf 8f5b 	dmb	ish
   182a4:	e853 2f00 	ldrex	r2, [r3]
   182a8:	1c51      	adds	r1, r2, #1
   182aa:	e843 1000 	strex	r0, r1, [r3]
   182ae:	2800      	cmp	r0, #0
   182b0:	d1f8      	bne.n	182a4 <lll_hfclock_on+0x8>
   182b2:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   182b6:	2a00      	cmp	r2, #0
   182b8:	dd01      	ble.n	182be <lll_hfclock_on+0x22>

	z_nrf_clock_bt_ctlr_hf_request();
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   182ba:	2000      	movs	r0, #0
   182bc:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_request();
   182be:	f7ec ff15 	bl	50ec <z_nrf_clock_bt_ctlr_hf_request>
}
   182c2:	2000      	movs	r0, #0
   182c4:	bd08      	pop	{r3, pc}
   182c6:	bf00      	nop
   182c8:	200026f4 	.word	0x200026f4

000182cc <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   182cc:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   182ce:	4b0d      	ldr	r3, [pc, #52]	; (18304 <lll_hfclock_off+0x38>)
   182d0:	681a      	ldr	r2, [r3, #0]
   182d2:	2a00      	cmp	r2, #0
   182d4:	dd12      	ble.n	182fc <lll_hfclock_off+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   182d6:	f3bf 8f5b 	dmb	ish
   182da:	e853 2f00 	ldrex	r2, [r3]
   182de:	1e51      	subs	r1, r2, #1
   182e0:	e843 1000 	strex	r0, r1, [r3]
   182e4:	2800      	cmp	r0, #0
   182e6:	d1f8      	bne.n	182da <lll_hfclock_off+0xe>
   182e8:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   182ec:	2a01      	cmp	r2, #1
   182ee:	dd01      	ble.n	182f4 <lll_hfclock_off+0x28>
		return 0;
   182f0:	2000      	movs	r0, #0

	z_nrf_clock_bt_ctlr_hf_release();
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   182f2:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_release();
   182f4:	f7ec ff10 	bl	5118 <z_nrf_clock_bt_ctlr_hf_release>
	return 0;
   182f8:	2000      	movs	r0, #0
}
   182fa:	bd08      	pop	{r3, pc}
		return -EALREADY;
   182fc:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   18300:	bd08      	pop	{r3, pc}
   18302:	bf00      	nop
   18304:	200026f4 	.word	0x200026f4

00018308 <lll_clock_ppm_local_get>:
}

uint32_t lll_clock_ppm_local_get(void)
{
	return sca_ppm_lut[CLOCK_CONTROL_NRF_K32SRC_ACCURACY];
}
   18308:	2014      	movs	r0, #20
   1830a:	4770      	bx	lr

0001830c <lll_clock_ppm_get>:

uint32_t lll_clock_ppm_get(uint8_t sca)
{
	return sca_ppm_lut[sca];
   1830c:	4b01      	ldr	r3, [pc, #4]	; (18314 <lll_clock_ppm_get+0x8>)
}
   1830e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   18312:	4770      	bx	lr
   18314:	0002543c 	.word	0x0002543c

00018318 <isr_abort>:

	lll_isr_cleanup(param);
}

static void isr_abort(void *param)
{
   18318:	b510      	push	{r4, lr}
   1831a:	4604      	mov	r4, r0
	/* Clear radio status and events */
	lll_isr_status_reset();
   1831c:	f7ff fe64 	bl	17fe8 <lll_isr_status_reset>

	radio_filter_disable();
   18320:	f001 fcb2 	bl	19c88 <radio_filter_disable>

	lll_isr_cleanup(param);
   18324:	4620      	mov	r0, r4
}
   18326:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1832a:	f7ff be6b 	b.w	18004 <lll_isr_cleanup>
   1832e:	bf00      	nop

00018330 <isr_tx>:
{
   18330:	b530      	push	{r4, r5, lr}
   18332:	b083      	sub	sp, #12
   18334:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   18336:	f7ff fe45 	bl	17fc4 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1833a:	2096      	movs	r0, #150	; 0x96
   1833c:	f001 fcd6 	bl	19cec <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(phy_p, 0, phy_p, 0);
   18340:	2300      	movs	r3, #0
   18342:	461a      	mov	r2, r3
   18344:	4619      	mov	r1, r3
   18346:	4618      	mov	r0, r3
   18348:	f001 fc56 	bl	19bf8 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(radio_pkt_scratch_get());
   1834c:	f001 fc42 	bl	19bd4 <radio_pkt_scratch_get>
   18350:	f001 fbc8 	bl	19ae4 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   18354:	f001 fc06 	bl	19b64 <radio_is_ready>
   18358:	b9d8      	cbnz	r0, 18392 <isr_tx+0x62>
	radio_isr_set(isr_rx, param);
   1835a:	481e      	ldr	r0, [pc, #120]	; (183d4 <isr_tx+0xa4>)
   1835c:	4621      	mov	r1, r4
   1835e:	f001 fae5 	bl	1992c <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   18362:	f7ff fb6f 	bl	17a44 <ull_filter_lll_rl_enabled>
   18366:	bb48      	cbnz	r0, 183bc <isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   18368:	f001 fdae 	bl	19ec8 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   1836c:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1836e:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   18370:	4608      	mov	r0, r1
   18372:	f001 fbc7 	bl	19b04 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   18376:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   18378:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   1837a:	4608      	mov	r0, r1
   1837c:	f001 fbbe 	bl	19afc <radio_tx_chain_delay_get>
   18380:	442c      	add	r4, r5
   18382:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   18384:	1a20      	subs	r0, r4, r0
   18386:	f001 fd57 	bl	19e38 <radio_tmr_hcto_configure>
	radio_tmr_end_capture();
   1838a:	f001 fd8f 	bl	19eac <radio_tmr_end_capture>
}
   1838e:	b003      	add	sp, #12
   18390:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!radio_is_ready());
   18392:	4a11      	ldr	r2, [pc, #68]	; (183d8 <isr_tx+0xa8>)
   18394:	4911      	ldr	r1, [pc, #68]	; (183dc <isr_tx+0xac>)
   18396:	4812      	ldr	r0, [pc, #72]	; (183e0 <isr_tx+0xb0>)
   18398:	f240 33b9 	movw	r3, #953	; 0x3b9
   1839c:	f006 fabe 	bl	1e91c <printk>
   183a0:	4040      	eors	r0, r0
   183a2:	f380 8811 	msr	BASEPRI, r0
   183a6:	f04f 0003 	mov.w	r0, #3
   183aa:	df02      	svc	2
	radio_isr_set(isr_rx, param);
   183ac:	4809      	ldr	r0, [pc, #36]	; (183d4 <isr_tx+0xa4>)
   183ae:	4621      	mov	r1, r4
   183b0:	f001 fabc 	bl	1992c <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   183b4:	f7ff fb46 	bl	17a44 <ull_filter_lll_rl_enabled>
   183b8:	2800      	cmp	r0, #0
   183ba:	d0d5      	beq.n	18368 <isr_tx+0x38>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   183bc:	f10d 0007 	add.w	r0, sp, #7
   183c0:	f7ff fa6e 	bl	178a0 <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   183c4:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   183c6:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   183c8:	f89d 0007 	ldrb.w	r0, [sp, #7]
   183cc:	f001 fe16 	bl	19ffc <radio_ar_configure>
   183d0:	e7ca      	b.n	18368 <isr_tx+0x38>
   183d2:	bf00      	nop
   183d4:	00018b25 	.word	0x00018b25
   183d8:	0002544c 	.word	0x0002544c
   183dc:	00025498 	.word	0x00025498
   183e0:	00024904 	.word	0x00024904

000183e4 <is_abort_cb>:
	if (next != curr) {
   183e4:	4281      	cmp	r1, r0
{
   183e6:	b508      	push	{r3, lr}
	if (next != curr) {
   183e8:	d00e      	beq.n	18408 <is_abort_cb+0x24>
		} else if (lll->is_hdcd) {
   183ea:	7a0b      	ldrb	r3, [r1, #8]
   183ec:	07db      	lsls	r3, r3, #31
   183ee:	d402      	bmi.n	183f6 <is_abort_cb+0x12>
			return -ECANCELED;
   183f0:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   183f4:	bd08      	pop	{r3, pc}
			*resume_cb = resume_prepare_cb;
   183f6:	4b13      	ldr	r3, [pc, #76]	; (18444 <is_abort_cb+0x60>)
   183f8:	6013      	str	r3, [r2, #0]
			err = lll_hfclock_on();
   183fa:	f7ff ff4f 	bl	1829c <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   183fe:	2800      	cmp	r0, #0
   18400:	db0f      	blt.n	18422 <is_abort_cb+0x3e>
   18402:	f06f 000a 	mvn.w	r0, #10
}
   18406:	bd08      	pop	{r3, pc}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
}

static inline struct pdu_adv *lll_adv_data_curr_get(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   18408:	7b0b      	ldrb	r3, [r1, #12]
   1840a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1840e:	690b      	ldr	r3, [r1, #16]
   18410:	781b      	ldrb	r3, [r3, #0]
   18412:	f003 030f 	and.w	r3, r3, #15
   18416:	2b01      	cmp	r3, #1
		return 0;
   18418:	bf14      	ite	ne
   1841a:	f06f 008b 	mvnne.w	r0, #139	; 0x8b
   1841e:	2000      	moveq	r0, #0
}
   18420:	bd08      	pop	{r3, pc}
			LL_ASSERT(err >= 0);
   18422:	4a09      	ldr	r2, [pc, #36]	; (18448 <is_abort_cb+0x64>)
   18424:	4909      	ldr	r1, [pc, #36]	; (1844c <is_abort_cb+0x68>)
   18426:	480a      	ldr	r0, [pc, #40]	; (18450 <is_abort_cb+0x6c>)
   18428:	f240 3377 	movw	r3, #887	; 0x377
   1842c:	f006 fa76 	bl	1e91c <printk>
   18430:	4040      	eors	r0, r0
   18432:	f380 8811 	msr	BASEPRI, r0
   18436:	f04f 0003 	mov.w	r0, #3
   1843a:	df02      	svc	2
   1843c:	f06f 000a 	mvn.w	r0, #10
}
   18440:	bd08      	pop	{r3, pc}
   18442:	bf00      	nop
   18444:	000188f1 	.word	0x000188f1
   18448:	0002544c 	.word	0x0002544c
   1844c:	00025410 	.word	0x00025410
   18450:	00024904 	.word	0x00024904

00018454 <abort_cb>:
{
   18454:	b510      	push	{r4, lr}
	if (!prepare_param) {
   18456:	b1d8      	cbz	r0, 18490 <abort_cb+0x3c>
	err = lll_hfclock_off();
   18458:	460c      	mov	r4, r1
   1845a:	f7ff ff37 	bl	182cc <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1845e:	2800      	cmp	r0, #0
   18460:	db04      	blt.n	1846c <abort_cb+0x18>
	lll_done(param);
   18462:	4620      	mov	r0, r4
}
   18464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   18468:	f7ff bcf4 	b.w	17e54 <lll_done>
	LL_ASSERT(err >= 0);
   1846c:	4a0c      	ldr	r2, [pc, #48]	; (184a0 <abort_cb+0x4c>)
   1846e:	490d      	ldr	r1, [pc, #52]	; (184a4 <abort_cb+0x50>)
   18470:	480d      	ldr	r0, [pc, #52]	; (184a8 <abort_cb+0x54>)
   18472:	f240 339d 	movw	r3, #925	; 0x39d
   18476:	f006 fa51 	bl	1e91c <printk>
   1847a:	4040      	eors	r0, r0
   1847c:	f380 8811 	msr	BASEPRI, r0
   18480:	f04f 0003 	mov.w	r0, #3
   18484:	df02      	svc	2
	lll_done(param);
   18486:	4620      	mov	r0, r4
}
   18488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1848c:	f7ff bce2 	b.w	17e54 <lll_done>
		radio_isr_set(isr_abort, param);
   18490:	4806      	ldr	r0, [pc, #24]	; (184ac <abort_cb+0x58>)
   18492:	f001 fa4b 	bl	1992c <radio_isr_set>
}
   18496:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   1849a:	f001 bb3f 	b.w	19b1c <radio_disable>
   1849e:	bf00      	nop
   184a0:	0002544c 	.word	0x0002544c
   184a4:	00025410 	.word	0x00025410
   184a8:	00024904 	.word	0x00024904
   184ac:	00018319 	.word	0x00018319

000184b0 <lll_adv_init>:
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   184b0:	4b08      	ldr	r3, [pc, #32]	; (184d4 <lll_adv_init+0x24>)
{
   184b2:	b510      	push	{r4, lr}
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   184b4:	1d18      	adds	r0, r3, #4
   184b6:	2205      	movs	r2, #5
   184b8:	2128      	movs	r1, #40	; 0x28
   184ba:	f7f4 fdef 	bl	d09c <mem_init>
	MFIFO_INIT(pdu_free);
   184be:	4b06      	ldr	r3, [pc, #24]	; (184d8 <lll_adv_init+0x28>)
   184c0:	2400      	movs	r4, #0
   184c2:	805c      	strh	r4, [r3, #2]
	return z_impl_k_sem_init(sem, initial_count, limit);
   184c4:	2203      	movs	r2, #3
   184c6:	4621      	mov	r1, r4
   184c8:	4804      	ldr	r0, [pc, #16]	; (184dc <lll_adv_init+0x2c>)
   184ca:	f00b f8ca 	bl	23662 <z_impl_k_sem_init>
}
   184ce:	4620      	mov	r0, r4
   184d0:	bd10      	pop	{r4, pc}
   184d2:	bf00      	nop
   184d4:	20002708 	.word	0x20002708
   184d8:	20000550 	.word	0x20000550
   184dc:	200027d4 	.word	0x200027d4

000184e0 <lll_adv_reset>:
   184e0:	f7ff bfe6 	b.w	184b0 <lll_adv_init>

000184e4 <lll_adv_data_init>:
{
   184e4:	b510      	push	{r4, lr}
   184e6:	4604      	mov	r4, r0
	p = mem_acquire(&mem_pdu.free);
   184e8:	4805      	ldr	r0, [pc, #20]	; (18500 <lll_adv_data_init+0x1c>)
   184ea:	f7f4 fdf7 	bl	d0dc <mem_acquire>
	if (!p) {
   184ee:	b120      	cbz	r0, 184fa <lll_adv_data_init+0x16>
   184f0:	4603      	mov	r3, r0
	p->len = 0U;
   184f2:	2000      	movs	r0, #0
   184f4:	7058      	strb	r0, [r3, #1]
	pdu->pdu[0] = (void *)p;
   184f6:	6063      	str	r3, [r4, #4]
}
   184f8:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   184fa:	f06f 000b 	mvn.w	r0, #11
}
   184fe:	bd10      	pop	{r4, pc}
   18500:	20002708 	.word	0x20002708

00018504 <lll_adv_data_reset>:
{
   18504:	4603      	mov	r3, r0
	pdu->first = 0U;
   18506:	2000      	movs	r0, #0
   18508:	7018      	strb	r0, [r3, #0]
	pdu->last = 0U;
   1850a:	7058      	strb	r0, [r3, #1]
	pdu->pdu[1] = NULL;
   1850c:	6098      	str	r0, [r3, #8]
}
   1850e:	4770      	bx	lr

00018510 <lll_adv_pdu_alloc>:
{
   18510:	b570      	push	{r4, r5, r6, lr}
	first = pdu->first;
   18512:	7802      	ldrb	r2, [r0, #0]
	last = pdu->last;
   18514:	7843      	ldrb	r3, [r0, #1]
	if (first == last) {
   18516:	429a      	cmp	r2, r3
   18518:	d004      	beq.n	18524 <lll_adv_pdu_alloc+0x14>
		pdu->last = first;
   1851a:	b2d4      	uxtb	r4, r2
   1851c:	7044      	strb	r4, [r0, #1]
		first_latest = pdu->first;
   1851e:	7802      	ldrb	r2, [r0, #0]
		if (first_latest != first) {
   18520:	4294      	cmp	r4, r2
   18522:	d003      	beq.n	1852c <lll_adv_pdu_alloc+0x1c>
		last++;
   18524:	3301      	adds	r3, #1
   18526:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   18528:	2b02      	cmp	r3, #2
   1852a:	d007      	beq.n	1853c <lll_adv_pdu_alloc+0x2c>
	*idx = last;
   1852c:	461c      	mov	r4, r3
   1852e:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   18532:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   18534:	6865      	ldr	r5, [r4, #4]
	if (p) {
   18536:	b14d      	cbz	r5, 1854c <lll_adv_pdu_alloc+0x3c>
}
   18538:	4628      	mov	r0, r5
   1853a:	bd70      	pop	{r4, r5, r6, pc}
{
   1853c:	2400      	movs	r4, #0
			last = 0U;
   1853e:	4623      	mov	r3, r4
	*idx = last;
   18540:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   18544:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   18546:	6865      	ldr	r5, [r4, #4]
	if (p) {
   18548:	2d00      	cmp	r5, #0
   1854a:	d1f5      	bne.n	18538 <lll_adv_pdu_alloc+0x28>
	p = MFIFO_DEQUEUE_PEEK(pdu_free);
   1854c:	4e34      	ldr	r6, [pc, #208]	; (18620 <lll_adv_pdu_alloc+0x110>)
   1854e:	78b2      	ldrb	r2, [r6, #2]
	if (first == last) {
   18550:	78f1      	ldrb	r1, [r6, #3]
   18552:	7833      	ldrb	r3, [r6, #0]
   18554:	4291      	cmp	r1, r2
   18556:	d003      	beq.n	18560 <lll_adv_pdu_alloc+0x50>
	return *((void **)(fifo + first * size));
   18558:	fb02 6303 	mla	r3, r2, r3, r6
   1855c:	685d      	ldr	r5, [r3, #4]
	if (p) {
   1855e:	b93d      	cbnz	r5, 18570 <lll_adv_pdu_alloc+0x60>
	p = mem_acquire(&mem_pdu.free);
   18560:	4830      	ldr	r0, [pc, #192]	; (18624 <lll_adv_pdu_alloc+0x114>)
   18562:	f7f4 fdbb 	bl	d0dc <mem_acquire>
	if (p) {
   18566:	4605      	mov	r5, r0
   18568:	b1a8      	cbz	r0, 18596 <lll_adv_pdu_alloc+0x86>
	pdu->pdu[last] = (void *)p;
   1856a:	6065      	str	r5, [r4, #4]
}
   1856c:	4628      	mov	r0, r5
   1856e:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_sem_take(sem, timeout);
   18570:	482d      	ldr	r0, [pc, #180]	; (18628 <lll_adv_pdu_alloc+0x118>)
   18572:	2200      	movs	r2, #0
   18574:	2300      	movs	r3, #0
   18576:	f005 fb3f 	bl	1dbf8 <z_impl_k_sem_take>
		LL_ASSERT(!err);
   1857a:	2800      	cmp	r0, #0
   1857c:	d134      	bne.n	185e8 <lll_adv_pdu_alloc+0xd8>
	uint8_t _first = *first; /* Copy read-index */
   1857e:	78b3      	ldrb	r3, [r6, #2]
	if (_first == last) {
   18580:	78f2      	ldrb	r2, [r6, #3]
		MFIFO_DEQUEUE(pdu_free);
   18582:	7871      	ldrb	r1, [r6, #1]
   18584:	429a      	cmp	r2, r3
   18586:	d0f0      	beq.n	1856a <lll_adv_pdu_alloc+0x5a>
	_first += 1U;
   18588:	3301      	adds	r3, #1
   1858a:	b2db      	uxtb	r3, r3
		_first = 0U;
   1858c:	4299      	cmp	r1, r3
   1858e:	bf08      	it	eq
   18590:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   18592:	70b3      	strb	r3, [r6, #2]

	return mem;
   18594:	e7e9      	b.n	1856a <lll_adv_pdu_alloc+0x5a>
   18596:	4824      	ldr	r0, [pc, #144]	; (18628 <lll_adv_pdu_alloc+0x118>)
   18598:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1859c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   185a0:	f005 fb2a 	bl	1dbf8 <z_impl_k_sem_take>
	LL_ASSERT(!err);
   185a4:	2800      	cmp	r0, #0
   185a6:	d12d      	bne.n	18604 <lll_adv_pdu_alloc+0xf4>
	uint8_t _first = *first; /* Copy read-index */
   185a8:	78b3      	ldrb	r3, [r6, #2]
	if (_first == last) {
   185aa:	78f1      	ldrb	r1, [r6, #3]
	p = MFIFO_DEQUEUE(pdu_free);
   185ac:	7832      	ldrb	r2, [r6, #0]
   185ae:	7870      	ldrb	r0, [r6, #1]
   185b0:	4299      	cmp	r1, r3
   185b2:	d00a      	beq.n	185ca <lll_adv_pdu_alloc+0xba>
	mem = *((void **)(fifo + _first * size));
   185b4:	fb03 6202 	mla	r2, r3, r2, r6
	_first += 1U;
   185b8:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   185ba:	6855      	ldr	r5, [r2, #4]
	_first += 1U;
   185bc:	b2db      	uxtb	r3, r3
		_first = 0U;
   185be:	4298      	cmp	r0, r3
   185c0:	bf08      	it	eq
   185c2:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   185c4:	70b3      	strb	r3, [r6, #2]
	LL_ASSERT(p);
   185c6:	2d00      	cmp	r5, #0
   185c8:	d1cf      	bne.n	1856a <lll_adv_pdu_alloc+0x5a>
   185ca:	4a18      	ldr	r2, [pc, #96]	; (1862c <lll_adv_pdu_alloc+0x11c>)
   185cc:	4918      	ldr	r1, [pc, #96]	; (18630 <lll_adv_pdu_alloc+0x120>)
   185ce:	4819      	ldr	r0, [pc, #100]	; (18634 <lll_adv_pdu_alloc+0x124>)
   185d0:	f240 2382 	movw	r3, #642	; 0x282
   185d4:	f006 f9a2 	bl	1e91c <printk>
   185d8:	4040      	eors	r0, r0
   185da:	f380 8811 	msr	BASEPRI, r0
   185de:	f04f 0003 	mov.w	r0, #3
   185e2:	df02      	svc	2
   185e4:	2500      	movs	r5, #0
   185e6:	e7c0      	b.n	1856a <lll_adv_pdu_alloc+0x5a>
		LL_ASSERT(!err);
   185e8:	4a10      	ldr	r2, [pc, #64]	; (1862c <lll_adv_pdu_alloc+0x11c>)
   185ea:	4913      	ldr	r1, [pc, #76]	; (18638 <lll_adv_pdu_alloc+0x128>)
   185ec:	4811      	ldr	r0, [pc, #68]	; (18634 <lll_adv_pdu_alloc+0x124>)
   185ee:	f240 236f 	movw	r3, #623	; 0x26f
   185f2:	f006 f993 	bl	1e91c <printk>
   185f6:	4040      	eors	r0, r0
   185f8:	f380 8811 	msr	BASEPRI, r0
   185fc:	f04f 0003 	mov.w	r0, #3
   18600:	df02      	svc	2
   18602:	e7bc      	b.n	1857e <lll_adv_pdu_alloc+0x6e>
	LL_ASSERT(!err);
   18604:	4a09      	ldr	r2, [pc, #36]	; (1862c <lll_adv_pdu_alloc+0x11c>)
   18606:	490c      	ldr	r1, [pc, #48]	; (18638 <lll_adv_pdu_alloc+0x128>)
   18608:	480a      	ldr	r0, [pc, #40]	; (18634 <lll_adv_pdu_alloc+0x124>)
   1860a:	f240 237f 	movw	r3, #639	; 0x27f
   1860e:	f006 f985 	bl	1e91c <printk>
   18612:	4040      	eors	r0, r0
   18614:	f380 8811 	msr	BASEPRI, r0
   18618:	f04f 0003 	mov.w	r0, #3
   1861c:	df02      	svc	2
   1861e:	e7c3      	b.n	185a8 <lll_adv_pdu_alloc+0x98>
   18620:	20000550 	.word	0x20000550
   18624:	20002708 	.word	0x20002708
   18628:	200027d4 	.word	0x200027d4
   1862c:	0002544c 	.word	0x0002544c
   18630:	000254ac 	.word	0x000254ac
   18634:	00024904 	.word	0x00024904
   18638:	00024b9c 	.word	0x00024b9c

0001863c <lll_adv_pdu_latest_get>:
{
   1863c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1863e:	4604      	mov	r4, r0
	first = pdu->first;
   18640:	7803      	ldrb	r3, [r0, #0]
	if (first != pdu->last) {
   18642:	7840      	ldrb	r0, [r0, #1]
   18644:	4298      	cmp	r0, r3
   18646:	d029      	beq.n	1869c <lll_adv_pdu_latest_get+0x60>
		if (!MFIFO_ENQUEUE_IDX_GET(pdu_free, &free_idx)) {
   18648:	4d16      	ldr	r5, [pc, #88]	; (186a4 <lll_adv_pdu_latest_get+0x68>)
   1864a:	b2da      	uxtb	r2, r3
	last = last + 1;
   1864c:	78eb      	ldrb	r3, [r5, #3]
	if (last == count) {
   1864e:	786e      	ldrb	r6, [r5, #1]
   18650:	78a8      	ldrb	r0, [r5, #2]
	last = last + 1;
   18652:	3301      	adds	r3, #1
   18654:	b2db      	uxtb	r3, r3
		last = 0U;
   18656:	429e      	cmp	r6, r3
   18658:	bf08      	it	eq
   1865a:	2300      	moveq	r3, #0
	if (last == first) {
   1865c:	4298      	cmp	r0, r3
   1865e:	d01f      	beq.n	186a0 <lll_adv_pdu_latest_get+0x64>
		first += 1U;
   18660:	1c50      	adds	r0, r2, #1
   18662:	b2c0      	uxtb	r0, r0
		if (first == DOUBLE_BUFFER_SIZE) {
   18664:	2802      	cmp	r0, #2
   18666:	bf04      	itt	eq
   18668:	2600      	moveq	r6, #0
			first = 0U;
   1866a:	4630      	moveq	r0, r6
		*is_modified = 1U;
   1866c:	f04f 0701 	mov.w	r7, #1
		pdu->first = first;
   18670:	7020      	strb	r0, [r4, #0]
		*is_modified = 1U;
   18672:	700f      	strb	r7, [r1, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   18674:	7829      	ldrb	r1, [r5, #0]
   18676:	bf18      	it	ne
   18678:	4606      	movne	r6, r0
   1867a:	78e8      	ldrb	r0, [r5, #3]
   1867c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   18680:	fb00 5101 	mla	r1, r0, r1, r5
		pdu->pdu[pdu_idx] = NULL;
   18684:	2700      	movs	r7, #0
		p = pdu->pdu[pdu_idx];
   18686:	6850      	ldr	r0, [r2, #4]
		pdu->pdu[pdu_idx] = NULL;
   18688:	6057      	str	r7, [r2, #4]
   1868a:	6048      	str	r0, [r1, #4]
	*last = idx; /* Commit: Update write index */
   1868c:	70eb      	strb	r3, [r5, #3]
	z_impl_k_sem_give(sem);
   1868e:	4806      	ldr	r0, [pc, #24]	; (186a8 <lll_adv_pdu_latest_get+0x6c>)
   18690:	f005 fa8c 	bl	1dbac <z_impl_k_sem_give>
	return (void *)pdu->pdu[first];
   18694:	eb04 0486 	add.w	r4, r4, r6, lsl #2
   18698:	6860      	ldr	r0, [r4, #4]
}
   1869a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1869c:	4606      	mov	r6, r0
   1869e:	e7f9      	b.n	18694 <lll_adv_pdu_latest_get+0x58>
			return NULL;
   186a0:	2000      	movs	r0, #0
}
   186a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   186a4:	20000550 	.word	0x20000550
   186a8:	200027d4 	.word	0x200027d4

000186ac <chan_prepare>:
{
	struct pdu_adv *pdu;
	uint8_t chan;
	uint8_t upd;

	chan = find_lsb_set(lll->chan_map_curr);
   186ac:	7a03      	ldrb	r3, [r0, #8]
{
   186ae:	b570      	push	{r4, r5, r6, lr}
	chan = find_lsb_set(lll->chan_map_curr);
   186b0:	f3c3 1302 	ubfx	r3, r3, #4, #3
   186b4:	2b00      	cmp	r3, #0
{
   186b6:	4604      	mov	r4, r0
   186b8:	fa93 f0a3 	rbit	r0, r3
   186bc:	fab0 f080 	clz	r0, r0
   186c0:	bf08      	it	eq
   186c2:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
	LL_ASSERT(chan);
   186c6:	1c45      	adds	r5, r0, #1
{
   186c8:	b082      	sub	sp, #8
	LL_ASSERT(chan);
   186ca:	d047      	beq.n	1875c <chan_prepare+0xb0>

	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   186cc:	7a22      	ldrb	r2, [r4, #8]
   186ce:	1e59      	subs	r1, r3, #1
   186d0:	400b      	ands	r3, r1
   186d2:	f363 1206 	bfi	r2, r3, #4, #3

	lll_chan_set(36 + chan);
   186d6:	f105 0024 	add.w	r0, r5, #36	; 0x24
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   186da:	7222      	strb	r2, [r4, #8]
	lll_chan_set(36 + chan);
   186dc:	f7ff fc2e 	bl	17f3c <lll_chan_set>

	/* FIXME: get latest only when primary PDU without Aux PDUs */
	upd = 0U;
   186e0:	2300      	movs	r3, #0
#endif /* CONFIG_BT_CTLR_ADV_EXT_PDU_EXTRA_DATA_MEMORY */

static inline struct pdu_adv *lll_adv_data_latest_get(struct lll_adv *lll,
						      uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->adv_data, is_modified);
   186e2:	f10d 0107 	add.w	r1, sp, #7
   186e6:	f104 000c 	add.w	r0, r4, #12
   186ea:	f88d 3007 	strb.w	r3, [sp, #7]
   186ee:	f7ff ffa5 	bl	1863c <lll_adv_pdu_latest_get>
	pdu = lll_adv_data_latest_get(lll, &upd);
	LL_ASSERT(pdu);
   186f2:	4605      	mov	r5, r0
   186f4:	2800      	cmp	r0, #0
   186f6:	d042      	beq.n	1877e <chan_prepare+0xd2>

	radio_pkt_tx_set(pdu);
   186f8:	4628      	mov	r0, r5
   186fa:	f001 f9f9 	bl	19af0 <radio_pkt_tx_set>

	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   186fe:	782b      	ldrb	r3, [r5, #0]
   18700:	f003 030f 	and.w	r3, r3, #15
   18704:	2b02      	cmp	r3, #2
   18706:	d020      	beq.n	1874a <chan_prepare+0x9e>
}

static inline struct pdu_adv *lll_adv_scan_rsp_latest_get(struct lll_adv *lll,
							  uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
   18708:	f10d 0107 	add.w	r1, sp, #7
   1870c:	f104 0018 	add.w	r0, r4, #24
   18710:	f7ff ff94 	bl	1863c <lll_adv_pdu_latest_get>
	    (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) ||
	     (pdu->type != PDU_ADV_TYPE_EXT_IND))) {
		struct pdu_adv *scan_pdu;

		scan_pdu = lll_adv_scan_rsp_latest_get(lll, &upd);
		LL_ASSERT(scan_pdu);
   18714:	4606      	mov	r6, r0
   18716:	2800      	cmp	r0, #0
   18718:	d03f      	beq.n	1879a <chan_prepare+0xee>

#if defined(CONFIG_BT_CTLR_PRIVACY)
		if (upd) {
   1871a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1871e:	b963      	cbnz	r3, 1873a <chan_prepare+0x8e>
#else
		ARG_UNUSED(scan_pdu);
		ARG_UNUSED(upd);
#endif /* !CONFIG_BT_CTLR_PRIVACY */

		radio_isr_set(isr_tx, lll);
   18720:	4621      	mov	r1, r4
   18722:	4825      	ldr	r0, [pc, #148]	; (187b8 <chan_prepare+0x10c>)
   18724:	f001 f902 	bl	1992c <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   18728:	2096      	movs	r0, #150	; 0x96
   1872a:	f001 fadf 	bl	19cec <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   1872e:	2000      	movs	r0, #0
   18730:	f001 fa54 	bl	19bdc <radio_switch_complete_and_rx>
		radio_isr_set(isr_done, lll);
		radio_switch_complete_and_disable();
	}

	return pdu;
}
   18734:	4628      	mov	r0, r5
   18736:	b002      	add	sp, #8
   18738:	bd70      	pop	{r4, r5, r6, pc}
   1873a:	462b      	mov	r3, r5
   1873c:	f853 2f02 	ldr.w	r2, [r3, #2]!
   18740:	f8c6 2002 	str.w	r2, [r6, #2]
   18744:	889b      	ldrh	r3, [r3, #4]
   18746:	80f3      	strh	r3, [r6, #6]
   18748:	e7ea      	b.n	18720 <chan_prepare+0x74>
		radio_isr_set(isr_done, lll);
   1874a:	481c      	ldr	r0, [pc, #112]	; (187bc <chan_prepare+0x110>)
   1874c:	4621      	mov	r1, r4
   1874e:	f001 f8ed 	bl	1992c <radio_isr_set>
		radio_switch_complete_and_disable();
   18752:	f001 fa5d 	bl	19c10 <radio_switch_complete_and_disable>
}
   18756:	4628      	mov	r0, r5
   18758:	b002      	add	sp, #8
   1875a:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(chan);
   1875c:	4a18      	ldr	r2, [pc, #96]	; (187c0 <chan_prepare+0x114>)
   1875e:	4919      	ldr	r1, [pc, #100]	; (187c4 <chan_prepare+0x118>)
   18760:	4819      	ldr	r0, [pc, #100]	; (187c8 <chan_prepare+0x11c>)
   18762:	f240 43a6 	movw	r3, #1190	; 0x4a6
   18766:	f006 f8d9 	bl	1e91c <printk>
   1876a:	4040      	eors	r0, r0
   1876c:	f380 8811 	msr	BASEPRI, r0
   18770:	f04f 0003 	mov.w	r0, #3
   18774:	df02      	svc	2
   18776:	7a23      	ldrb	r3, [r4, #8]
   18778:	f3c3 1302 	ubfx	r3, r3, #4, #3
   1877c:	e7a6      	b.n	186cc <chan_prepare+0x20>
	LL_ASSERT(pdu);
   1877e:	4a10      	ldr	r2, [pc, #64]	; (187c0 <chan_prepare+0x114>)
   18780:	4912      	ldr	r1, [pc, #72]	; (187cc <chan_prepare+0x120>)
   18782:	4811      	ldr	r0, [pc, #68]	; (187c8 <chan_prepare+0x11c>)
   18784:	f240 43af 	movw	r3, #1199	; 0x4af
   18788:	f006 f8c8 	bl	1e91c <printk>
   1878c:	4040      	eors	r0, r0
   1878e:	f380 8811 	msr	BASEPRI, r0
   18792:	f04f 0003 	mov.w	r0, #3
   18796:	df02      	svc	2
   18798:	e7ae      	b.n	186f8 <chan_prepare+0x4c>
		LL_ASSERT(scan_pdu);
   1879a:	4a09      	ldr	r2, [pc, #36]	; (187c0 <chan_prepare+0x114>)
   1879c:	490c      	ldr	r1, [pc, #48]	; (187d0 <chan_prepare+0x124>)
   1879e:	480a      	ldr	r0, [pc, #40]	; (187c8 <chan_prepare+0x11c>)
   187a0:	f240 43b9 	movw	r3, #1209	; 0x4b9
   187a4:	f006 f8ba 	bl	1e91c <printk>
   187a8:	4040      	eors	r0, r0
   187aa:	f380 8811 	msr	BASEPRI, r0
   187ae:	f04f 0003 	mov.w	r0, #3
   187b2:	df02      	svc	2
   187b4:	e7b1      	b.n	1871a <chan_prepare+0x6e>
   187b6:	bf00      	nop
   187b8:	00018331 	.word	0x00018331
   187bc:	00018919 	.word	0x00018919
   187c0:	0002544c 	.word	0x0002544c
   187c4:	00025114 	.word	0x00025114
   187c8:	00024904 	.word	0x00024904
   187cc:	000254b0 	.word	0x000254b0
   187d0:	000254b4 	.word	0x000254b4

000187d4 <prepare_cb>:
{
   187d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll = p->param;
   187d6:	68c4      	ldr	r4, [r0, #12]
	if (unlikely(lll->conn &&
   187d8:	6863      	ldr	r3, [r4, #4]
{
   187da:	b083      	sub	sp, #12
   187dc:	4605      	mov	r5, r0
	if (unlikely(lll->conn &&
   187de:	2b00      	cmp	r3, #0
   187e0:	d16d      	bne.n	188be <prepare_cb+0xea>
	radio_reset();
   187e2:	f001 f8e5 	bl	199b0 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   187e6:	2000      	movs	r0, #0
   187e8:	f001 f916 	bl	19a18 <radio_tx_power_set>
	radio_phy_set(0, 0);
   187ec:	2100      	movs	r1, #0
   187ee:	4608      	mov	r0, r1
   187f0:	f001 f902 	bl	199f8 <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_LEG_PAYLOAD_SIZE_MAX, 0);
   187f4:	2200      	movs	r2, #0
   187f6:	2125      	movs	r1, #37	; 0x25
   187f8:	2008      	movs	r0, #8
   187fa:	f001 f945 	bl	19a88 <radio_pkt_configure>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   187fe:	4b35      	ldr	r3, [pc, #212]	; (188d4 <prepare_cb+0x100>)
   18800:	9301      	str	r3, [sp, #4]
	radio_aa_set((uint8_t *)&aa);
   18802:	a801      	add	r0, sp, #4
   18804:	f001 f926 	bl	19a54 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   18808:	4933      	ldr	r1, [pc, #204]	; (188d8 <prepare_cb+0x104>)
   1880a:	f240 605b 	movw	r0, #1627	; 0x65b
   1880e:	f001 f9c7 	bl	19ba0 <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
   18812:	7a23      	ldrb	r3, [r4, #8]
   18814:	f3c3 0242 	ubfx	r2, r3, #1, #3
   18818:	f362 1306 	bfi	r3, r2, #4, #3
   1881c:	7223      	strb	r3, [r4, #8]
	pdu = chan_prepare(lll);
   1881e:	4620      	mov	r0, r4
   18820:	f7ff ff44 	bl	186ac <chan_prepare>
	if (ull_filter_lll_rl_enabled()) {
   18824:	f7ff f90e 	bl	17a44 <ull_filter_lll_rl_enabled>
   18828:	bb98      	cbnz	r0, 18892 <prepare_cb+0xbe>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER) && lll->filter_policy) {
   1882a:	7a63      	ldrb	r3, [r4, #9]
   1882c:	079b      	lsls	r3, r3, #30
   1882e:	d127      	bne.n	18880 <prepare_cb+0xac>
	evt = HDR_LLL2EVT(lll);
   18830:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   18832:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   18834:	4638      	mov	r0, r7
   18836:	f7ff fb63 	bl	17f00 <lll_evt_offset_get>
   1883a:	4406      	add	r6, r0
	start_us = radio_tmr_start(1, ticks_at_start, remainder);
   1883c:	686a      	ldr	r2, [r5, #4]
   1883e:	f106 0109 	add.w	r1, r6, #9
   18842:	2001      	movs	r0, #1
   18844:	f001 fa5e 	bl	19d04 <radio_tmr_start>
	radio_tmr_end_capture();
   18848:	f001 fb30 	bl	19eac <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
   1884c:	4620      	mov	r0, r4
   1884e:	f7f9 f9a7 	bl	11ba0 <ull_adv_lll_handle_get>
	if (lll_preempt_calc(evt, (TICKER_ID_ADV_BASE +
   18852:	1c81      	adds	r1, r0, #2
   18854:	4632      	mov	r2, r6
   18856:	b2c9      	uxtb	r1, r1
   18858:	4638      	mov	r0, r7
   1885a:	f7ff fb5f 	bl	17f1c <lll_preempt_calc>
   1885e:	b930      	cbnz	r0, 1886e <prepare_cb+0x9a>
		ret = lll_prepare_done(lll);
   18860:	4620      	mov	r0, r4
   18862:	f7ff faf5 	bl	17e50 <lll_prepare_done>
		LL_ASSERT(!ret);
   18866:	b9d0      	cbnz	r0, 1889e <prepare_cb+0xca>
}
   18868:	2000      	movs	r0, #0
   1886a:	b003      	add	sp, #12
   1886c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(isr_abort, lll);
   1886e:	481b      	ldr	r0, [pc, #108]	; (188dc <prepare_cb+0x108>)
   18870:	4621      	mov	r1, r4
   18872:	f001 f85b 	bl	1992c <radio_isr_set>
		radio_disable();
   18876:	f001 f951 	bl	19b1c <radio_disable>
}
   1887a:	2000      	movs	r0, #0
   1887c:	b003      	add	sp, #12
   1887e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct lll_filter *wl = ull_filter_lll_get(true);
   18880:	2001      	movs	r0, #1
   18882:	f7ff f899 	bl	179b8 <ull_filter_lll_get>
		radio_filter_configure(wl->enable_bitmask,
   18886:	7841      	ldrb	r1, [r0, #1]
   18888:	1c82      	adds	r2, r0, #2
   1888a:	7800      	ldrb	r0, [r0, #0]
   1888c:	f001 f9e0 	bl	19c50 <radio_filter_configure>
   18890:	e7ce      	b.n	18830 <prepare_cb+0x5c>
			ull_filter_lll_get(!!(lll->filter_policy));
   18892:	7a60      	ldrb	r0, [r4, #9]
   18894:	f010 0003 	ands.w	r0, r0, #3
   18898:	bf18      	it	ne
   1889a:	2001      	movne	r0, #1
   1889c:	e7f1      	b.n	18882 <prepare_cb+0xae>
		LL_ASSERT(!ret);
   1889e:	4a10      	ldr	r2, [pc, #64]	; (188e0 <prepare_cb+0x10c>)
   188a0:	4910      	ldr	r1, [pc, #64]	; (188e4 <prepare_cb+0x110>)
   188a2:	4811      	ldr	r0, [pc, #68]	; (188e8 <prepare_cb+0x114>)
   188a4:	f240 334e 	movw	r3, #846	; 0x34e
   188a8:	f006 f838 	bl	1e91c <printk>
   188ac:	4040      	eors	r0, r0
   188ae:	f380 8811 	msr	BASEPRI, r0
   188b2:	f04f 0003 	mov.w	r0, #3
   188b6:	df02      	svc	2
}
   188b8:	2000      	movs	r0, #0
   188ba:	b003      	add	sp, #12
   188bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (unlikely(lll->conn &&
   188be:	f893 3020 	ldrb.w	r3, [r3, #32]
   188c2:	079a      	lsls	r2, r3, #30
   188c4:	d08d      	beq.n	187e2 <prepare_cb+0xe>
		radio_isr_set(lll_isr_early_abort, lll);
   188c6:	4809      	ldr	r0, [pc, #36]	; (188ec <prepare_cb+0x118>)
   188c8:	4621      	mov	r1, r4
   188ca:	f001 f82f 	bl	1992c <radio_isr_set>
		radio_disable();
   188ce:	f001 f925 	bl	19b1c <radio_disable>
		return 0;
   188d2:	e7c9      	b.n	18868 <prepare_cb+0x94>
   188d4:	8e89bed6 	.word	0x8e89bed6
   188d8:	00555555 	.word	0x00555555
   188dc:	00018319 	.word	0x00018319
   188e0:	0002544c 	.word	0x0002544c
   188e4:	00024c98 	.word	0x00024c98
   188e8:	00024904 	.word	0x00024904
   188ec:	00018085 	.word	0x00018085

000188f0 <resume_prepare_cb>:
	evt = HDR_LLL2EVT(p->param);
   188f0:	68c3      	ldr	r3, [r0, #12]
{
   188f2:	b570      	push	{r4, r5, r6, lr}
	evt = HDR_LLL2EVT(p->param);
   188f4:	681e      	ldr	r6, [r3, #0]
{
   188f6:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   188f8:	f7f6 f812 	bl	e920 <ticker_ticks_now_get>
   188fc:	4605      	mov	r5, r0
   188fe:	4630      	mov	r0, r6
   18900:	f7ff fafe 	bl	17f00 <lll_evt_offset_get>
	p->remainder = 0;
   18904:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   18906:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   18908:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   1890c:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   1890e:	4620      	mov	r0, r4
}
   18910:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   18914:	f7ff bf5e 	b.w	187d4 <prepare_cb>

00018918 <isr_done>:
{
   18918:	b510      	push	{r4, lr}
   1891a:	4604      	mov	r4, r0
	lll_isr_status_reset();
   1891c:	f7ff fb64 	bl	17fe8 <lll_isr_status_reset>
	if (!IS_ENABLED(CONFIG_BT_CTLR_LOW_LAT) && lll->is_hdcd &&
   18920:	7a23      	ldrb	r3, [r4, #8]
   18922:	f003 0271 	and.w	r2, r3, #113	; 0x71
   18926:	2a01      	cmp	r2, #1
   18928:	d105      	bne.n	18936 <isr_done+0x1e>
		lll->chan_map_curr = lll->chan_map;
   1892a:	f3c3 0242 	ubfx	r2, r3, #1, #3
   1892e:	f362 1306 	bfi	r3, r2, #4, #3
   18932:	7223      	strb	r3, [r4, #8]
   18934:	b2db      	uxtb	r3, r3
	if (lll->chan_map_curr &&
   18936:	f013 0f70 	tst.w	r3, #112	; 0x70
   1893a:	d005      	beq.n	18948 <isr_done+0x30>
	    (!lll->conn || !lll->conn->slave.cancelled) &&
   1893c:	6863      	ldr	r3, [r4, #4]
   1893e:	b153      	cbz	r3, 18956 <isr_done+0x3e>
   18940:	f893 3020 	ldrb.w	r3, [r3, #32]
   18944:	079b      	lsls	r3, r3, #30
   18946:	d506      	bpl.n	18956 <isr_done+0x3e>
	radio_filter_disable();
   18948:	f001 f99e 	bl	19c88 <radio_filter_disable>
	lll_isr_cleanup(param);
   1894c:	4620      	mov	r0, r4
}
   1894e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   18952:	f7ff bb57 	b.w	18004 <lll_isr_cleanup>
		pdu = chan_prepare(lll);
   18956:	4620      	mov	r0, r4
   18958:	f7ff fea8 	bl	186ac <chan_prepare>
		radio_tx_enable();
   1895c:	f001 f8d8 	bl	19b10 <radio_tx_enable>
}
   18960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   18964:	f001 baa2 	b.w	19eac <radio_tmr_end_capture>

00018968 <lll_adv_prepare>:
{
   18968:	b510      	push	{r4, lr}
   1896a:	b082      	sub	sp, #8
   1896c:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1896e:	f7ff fc95 	bl	1829c <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   18972:	2800      	cmp	r0, #0
   18974:	db1a      	blt.n	189ac <lll_adv_prepare+0x44>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   18976:	4a14      	ldr	r2, [pc, #80]	; (189c8 <lll_adv_prepare+0x60>)
   18978:	4914      	ldr	r1, [pc, #80]	; (189cc <lll_adv_prepare+0x64>)
   1897a:	4815      	ldr	r0, [pc, #84]	; (189d0 <lll_adv_prepare+0x68>)
   1897c:	9400      	str	r4, [sp, #0]
   1897e:	2300      	movs	r3, #0
   18980:	f7f8 fd6c 	bl	1145c <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   18984:	b108      	cbz	r0, 1898a <lll_adv_prepare+0x22>
   18986:	3077      	adds	r0, #119	; 0x77
   18988:	d101      	bne.n	1898e <lll_adv_prepare+0x26>
}
   1898a:	b002      	add	sp, #8
   1898c:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1898e:	4a11      	ldr	r2, [pc, #68]	; (189d4 <lll_adv_prepare+0x6c>)
   18990:	4911      	ldr	r1, [pc, #68]	; (189d8 <lll_adv_prepare+0x70>)
   18992:	4812      	ldr	r0, [pc, #72]	; (189dc <lll_adv_prepare+0x74>)
   18994:	f44f 73f4 	mov.w	r3, #488	; 0x1e8
   18998:	f005 ffc0 	bl	1e91c <printk>
   1899c:	4040      	eors	r0, r0
   1899e:	f380 8811 	msr	BASEPRI, r0
   189a2:	f04f 0003 	mov.w	r0, #3
   189a6:	df02      	svc	2
}
   189a8:	b002      	add	sp, #8
   189aa:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   189ac:	4a09      	ldr	r2, [pc, #36]	; (189d4 <lll_adv_prepare+0x6c>)
   189ae:	490c      	ldr	r1, [pc, #48]	; (189e0 <lll_adv_prepare+0x78>)
   189b0:	480a      	ldr	r0, [pc, #40]	; (189dc <lll_adv_prepare+0x74>)
   189b2:	f240 13e5 	movw	r3, #485	; 0x1e5
   189b6:	f005 ffb1 	bl	1e91c <printk>
   189ba:	4040      	eors	r0, r0
   189bc:	f380 8811 	msr	BASEPRI, r0
   189c0:	f04f 0003 	mov.w	r0, #3
   189c4:	df02      	svc	2
   189c6:	e7d6      	b.n	18976 <lll_adv_prepare+0xe>
   189c8:	000187d5 	.word	0x000187d5
   189cc:	00018455 	.word	0x00018455
   189d0:	000183e5 	.word	0x000183e5
   189d4:	0002544c 	.word	0x0002544c
   189d8:	000254c0 	.word	0x000254c0
   189dc:	00024904 	.word	0x00024904
   189e0:	00025410 	.word	0x00025410

000189e4 <lll_adv_scan_req_check>:
{
   189e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return ((((lll->filter_policy & 0x01) == 0) &&
   189e8:	7a45      	ldrb	r5, [r0, #9]
{
   189ea:	f89d 8020 	ldrb.w	r8, [sp, #32]
   189ee:	4617      	mov	r7, r2
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   189f0:	07ea      	lsls	r2, r5, #31
{
   189f2:	4689      	mov	r9, r1
   189f4:	461e      	mov	r6, r3
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   189f6:	d50a      	bpl.n	18a0e <lll_adv_scan_req_check+0x2a>
		(((lll->filter_policy & 0x01) != 0) &&
   189f8:	f1b8 0f00 	cmp.w	r8, #0
   189fc:	d017      	beq.n	18a2e <lll_adv_scan_req_check+0x4a>
}

static bool isr_rx_sr_adva_check(uint8_t tx_addr, uint8_t *addr,
				 struct pdu_adv *sr)
{
	return (tx_addr == sr->rx_addr) &&
   189fe:	f899 3000 	ldrb.w	r3, [r9]
   18a02:	ebb7 1fd3 	cmp.w	r7, r3, lsr #7
   18a06:	d019      	beq.n	18a3c <lll_adv_scan_req_check+0x58>
{
   18a08:	2000      	movs	r0, #0
}
   18a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   18a0e:	4604      	mov	r4, r0
		 ull_filter_lll_rl_addr_allowed(sr->tx_addr,
   18a10:	f811 0b02 	ldrb.w	r0, [r1], #2
   18a14:	9a09      	ldr	r2, [sp, #36]	; 0x24
   18a16:	f3c0 1080 	ubfx	r0, r0, #6, #1
   18a1a:	f7fe ffd9 	bl	179d0 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & 0x01) == 0) &&
   18a1e:	2800      	cmp	r0, #0
   18a20:	d1ed      	bne.n	189fe <lll_adv_scan_req_check+0x1a>
		(((lll->filter_policy & 0x01) != 0) &&
   18a22:	7a63      	ldrb	r3, [r4, #9]
						rl_idx)) ||
   18a24:	07db      	lsls	r3, r3, #31
   18a26:	d5ef      	bpl.n	18a08 <lll_adv_scan_req_check+0x24>
		(((lll->filter_policy & 0x01) != 0) &&
   18a28:	f1b8 0f00 	cmp.w	r8, #0
   18a2c:	d1e7      	bne.n	189fe <lll_adv_scan_req_check+0x1a>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   18a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18a30:	7818      	ldrb	r0, [r3, #0]
   18a32:	f7fe ff91 	bl	17958 <ull_filter_lll_irk_whitelisted>
   18a36:	2800      	cmp	r0, #0
   18a38:	d1e1      	bne.n	189fe <lll_adv_scan_req_check+0x1a>
   18a3a:	e7e5      	b.n	18a08 <lll_adv_scan_req_check+0x24>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   18a3c:	f109 0108 	add.w	r1, r9, #8
   18a40:	4630      	mov	r0, r6
   18a42:	2206      	movs	r2, #6
   18a44:	f00b f8cd 	bl	23be2 <memcmp>
	return (tx_addr == sr->rx_addr) &&
   18a48:	fab0 f080 	clz	r0, r0
   18a4c:	0940      	lsrs	r0, r0, #5
}
   18a4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   18a52:	bf00      	nop

00018a54 <lll_adv_connect_ind_check>:
{
   18a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18a58:	461f      	mov	r7, r3
	if (tgt_addr) {
   18a5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
{
   18a5c:	f89d 8020 	ldrb.w	r8, [sp, #32]
   18a60:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
   18a64:	4605      	mov	r5, r0
   18a66:	460c      	mov	r4, r1
   18a68:	4692      	mov	sl, r2
	if (tgt_addr) {
   18a6a:	b9fb      	cbnz	r3, 18aac <lll_adv_connect_ind_check+0x58>
	return ((((lll->filter_policy & 0x02) == 0) &&
   18a6c:	7a43      	ldrb	r3, [r0, #9]
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   18a6e:	079a      	lsls	r2, r3, #30
   18a70:	d507      	bpl.n	18a82 <lll_adv_connect_ind_check+0x2e>
		(((lll->filter_policy & 0x02) != 0) &&
   18a72:	b1a6      	cbz	r6, 18a9e <lll_adv_connect_ind_check+0x4a>
}

static inline bool isr_rx_ci_adva_check(uint8_t tx_addr, uint8_t *addr,
					struct pdu_adv *ci)
{
	return (tx_addr == ci->rx_addr) &&
   18a74:	7823      	ldrb	r3, [r4, #0]
   18a76:	ebba 1fd3 	cmp.w	sl, r3, lsr #7
   18a7a:	d03a      	beq.n	18af2 <lll_adv_connect_ind_check+0x9e>
   18a7c:	2000      	movs	r0, #0
}
   18a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		 ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   18a82:	f811 0b02 	ldrb.w	r0, [r1], #2
   18a86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   18a88:	f3c0 1080 	ubfx	r0, r0, #6, #1
   18a8c:	f7fe ffa0 	bl	179d0 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & 0x02) == 0) &&
   18a90:	2800      	cmp	r0, #0
   18a92:	d1ef      	bne.n	18a74 <lll_adv_connect_ind_check+0x20>
		(((lll->filter_policy & 0x02) != 0) &&
   18a94:	7a6b      	ldrb	r3, [r5, #9]
						rl_idx)) ||
   18a96:	079b      	lsls	r3, r3, #30
   18a98:	d5f0      	bpl.n	18a7c <lll_adv_connect_ind_check+0x28>
		(((lll->filter_policy & 0x02) != 0) &&
   18a9a:	2e00      	cmp	r6, #0
   18a9c:	d1ea      	bne.n	18a74 <lll_adv_connect_ind_check+0x20>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   18a9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   18aa0:	7818      	ldrb	r0, [r3, #0]
   18aa2:	f7fe ff59 	bl	17958 <ull_filter_lll_irk_whitelisted>
   18aa6:	2800      	cmp	r0, #0
   18aa8:	d1e4      	bne.n	18a74 <lll_adv_connect_ind_check+0x20>
   18aaa:	e7e7      	b.n	18a7c <lll_adv_connect_ind_check+0x28>
						      ci->connect_ind.init_addr,
   18aac:	4689      	mov	r9, r1
		return ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   18aae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   18ab0:	f819 0b02 	ldrb.w	r0, [r9], #2
   18ab4:	f3c0 1080 	ubfx	r0, r0, #6, #1
   18ab8:	4649      	mov	r1, r9
   18aba:	f7fe ff89 	bl	179d0 <ull_filter_lll_rl_addr_allowed>
		       isr_rx_ci_adva_check(tx_addr, addr, ci) &&
   18abe:	2800      	cmp	r0, #0
   18ac0:	d0dc      	beq.n	18a7c <lll_adv_connect_ind_check+0x28>
	return (tx_addr == ci->rx_addr) &&
   18ac2:	7823      	ldrb	r3, [r4, #0]
   18ac4:	ebba 1fd3 	cmp.w	sl, r3, lsr #7
   18ac8:	d1d8      	bne.n	18a7c <lll_adv_connect_ind_check+0x28>
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   18aca:	4638      	mov	r0, r7
   18acc:	2206      	movs	r2, #6
   18ace:	f104 0108 	add.w	r1, r4, #8
   18ad2:	f00b f886 	bl	23be2 <memcmp>
	return (tx_addr == ci->rx_addr) &&
   18ad6:	2800      	cmp	r0, #0
   18ad8:	d1d0      	bne.n	18a7c <lll_adv_connect_ind_check+0x28>
		       isr_rx_ci_tgta_check(lll, rx_addr, tgt_addr, ci,
   18ada:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   18adc:	7818      	ldrb	r0, [r3, #0]
	if (rl_idx != FILTER_IDX_NONE && lll->rl_idx != FILTER_IDX_NONE) {
   18ade:	28ff      	cmp	r0, #255	; 0xff
   18ae0:	d011      	beq.n	18b06 <lll_adv_connect_ind_check+0xb2>
   18ae2:	7aab      	ldrb	r3, [r5, #10]
   18ae4:	2bff      	cmp	r3, #255	; 0xff
   18ae6:	d00e      	beq.n	18b06 <lll_adv_connect_ind_check+0xb2>
		return rl_idx == lll->rl_idx;
   18ae8:	1ac0      	subs	r0, r0, r3
   18aea:	fab0 f080 	clz	r0, r0
   18aee:	0940      	lsrs	r0, r0, #5
   18af0:	e7c5      	b.n	18a7e <lll_adv_connect_ind_check+0x2a>
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   18af2:	f104 0108 	add.w	r1, r4, #8
   18af6:	4638      	mov	r0, r7
   18af8:	2206      	movs	r2, #6
   18afa:	f00b f872 	bl	23be2 <memcmp>
	return (tx_addr == ci->rx_addr) &&
   18afe:	fab0 f080 	clz	r0, r0
   18b02:	0940      	lsrs	r0, r0, #5
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   18b04:	e7bb      	b.n	18a7e <lll_adv_connect_ind_check+0x2a>
	return (rx_addr == ci->tx_addr) &&
   18b06:	7823      	ldrb	r3, [r4, #0]
   18b08:	f3c3 1380 	ubfx	r3, r3, #6, #1
   18b0c:	4543      	cmp	r3, r8
   18b0e:	d1b5      	bne.n	18a7c <lll_adv_connect_ind_check+0x28>
	       !memcmp(tgt_addr, ci->connect_ind.init_addr, BDADDR_SIZE);
   18b10:	9809      	ldr	r0, [sp, #36]	; 0x24
   18b12:	4649      	mov	r1, r9
   18b14:	2206      	movs	r2, #6
   18b16:	f00b f864 	bl	23be2 <memcmp>
	return (rx_addr == ci->tx_addr) &&
   18b1a:	fab0 f080 	clz	r0, r0
   18b1e:	0940      	lsrs	r0, r0, #5
   18b20:	e7ad      	b.n	18a7e <lll_adv_connect_ind_check+0x2a>
   18b22:	bf00      	nop

00018b24 <isr_rx>:
{
   18b24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18b28:	b089      	sub	sp, #36	; 0x24
   18b2a:	4605      	mov	r5, r0
	trx_done = radio_is_done();
   18b2c:	f001 f824 	bl	19b78 <radio_is_done>
	if (trx_done) {
   18b30:	f010 0fff 	tst.w	r0, #255	; 0xff
   18b34:	d10a      	bne.n	18b4c <isr_rx+0x28>
	lll_isr_status_reset();
   18b36:	f7ff fa57 	bl	17fe8 <lll_isr_status_reset>
	radio_isr_set(isr_done, param);
   18b3a:	487d      	ldr	r0, [pc, #500]	; (18d30 <isr_rx+0x20c>)
   18b3c:	4629      	mov	r1, r5
   18b3e:	f000 fef5 	bl	1992c <radio_isr_set>
	radio_disable();
   18b42:	f000 ffeb 	bl	19b1c <radio_disable>
}
   18b46:	b009      	add	sp, #36	; 0x24
   18b48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		crc_ok = radio_crc_is_valid();
   18b4c:	f001 f834 	bl	19bb8 <radio_crc_is_valid>
   18b50:	4607      	mov	r7, r0
		devmatch_ok = radio_filter_has_match();
   18b52:	f001 f8ab 	bl	19cac <radio_filter_has_match>
   18b56:	4681      	mov	r9, r0
		devmatch_id = radio_filter_match_get();
   18b58:	f001 f8b2 	bl	19cc0 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   18b5c:	f001 fa9c 	bl	1a098 <radio_ar_has_match>
   18b60:	4604      	mov	r4, r0
		irkmatch_id = radio_ar_match_get();
   18b62:	f001 fa7d 	bl	1a060 <radio_ar_match_get>
   18b66:	4680      	mov	r8, r0
		rssi_ready = radio_rssi_is_ready();
   18b68:	f001 f868 	bl	19c3c <radio_rssi_is_ready>
	lll_isr_status_reset();
   18b6c:	f7ff fa3c 	bl	17fe8 <lll_isr_status_reset>
	if (crc_ok) {
   18b70:	f017 0fff 	tst.w	r7, #255	; 0xff
   18b74:	d0e1      	beq.n	18b3a <isr_rx+0x16>
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   18b76:	f014 07ff 	ands.w	r7, r4, #255	; 0xff
   18b7a:	f040 808b 	bne.w	18c94 <isr_rx+0x170>
   18b7e:	20ff      	movs	r0, #255	; 0xff
   18b80:	f88d 001f 	strb.w	r0, [sp, #31]
	pdu_rx = (void *)radio_pkt_scratch_get();
   18b84:	f001 f826 	bl	19bd4 <radio_pkt_scratch_get>
   18b88:	7b2b      	ldrb	r3, [r5, #12]
   18b8a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   18b8e:	4604      	mov	r4, r0
   18b90:	6919      	ldr	r1, [r3, #16]
	addr = pdu_adv->adv_ind.addr;
   18b92:	460b      	mov	r3, r1
		devmatch_ok = radio_filter_has_match();
   18b94:	fa5f f989 	uxtb.w	r9, r9
	tx_addr = pdu_adv->tx_addr;
   18b98:	f813 0b02 	ldrb.w	r0, [r3], #2
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   18b9c:	f000 0c0f 	and.w	ip, r0, #15
   18ba0:	f1bc 0f01 	cmp.w	ip, #1
		tgt_addr = pdu_adv->direct_ind.tgt_addr;
   18ba4:	bf08      	it	eq
   18ba6:	f101 0808 	addeq.w	r8, r1, #8
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   18baa:	7821      	ldrb	r1, [r4, #0]
   18bac:	f001 010f 	and.w	r1, r1, #15
		tgt_addr = NULL;
   18bb0:	bf18      	it	ne
   18bb2:	f04f 0800 	movne.w	r8, #0
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   18bb6:	2903      	cmp	r1, #3
	tx_addr = pdu_adv->tx_addr;
   18bb8:	f3c0 1280 	ubfx	r2, r0, #6, #1
	rx_addr = pdu_adv->rx_addr;
   18bbc:	ea4f 16d0 	mov.w	r6, r0, lsr #7
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   18bc0:	d06f      	beq.n	18ca2 <isr_rx+0x17e>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   18bc2:	2905      	cmp	r1, #5
   18bc4:	d1b9      	bne.n	18b3a <isr_rx+0x16>
   18bc6:	7861      	ldrb	r1, [r4, #1]
   18bc8:	2922      	cmp	r1, #34	; 0x22
   18bca:	d1b6      	bne.n	18b3a <isr_rx+0x16>
		   lll->conn && !lll->conn->slave.cancelled &&
   18bcc:	6869      	ldr	r1, [r5, #4]
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   18bce:	2900      	cmp	r1, #0
   18bd0:	d0b3      	beq.n	18b3a <isr_rx+0x16>
		   lll->conn && !lll->conn->slave.cancelled &&
   18bd2:	f891 1020 	ldrb.w	r1, [r1, #32]
   18bd6:	0789      	lsls	r1, r1, #30
   18bd8:	d4af      	bmi.n	18b3a <isr_rx+0x16>
		   lll_adv_connect_ind_check(lll, pdu_rx, tx_addr, addr,
   18bda:	f10d 011f 	add.w	r1, sp, #31
   18bde:	9103      	str	r1, [sp, #12]
   18be0:	e9cd 8901 	strd	r8, r9, [sp, #4]
   18be4:	9600      	str	r6, [sp, #0]
   18be6:	4621      	mov	r1, r4
   18be8:	4628      	mov	r0, r5
   18bea:	f7ff ff33 	bl	18a54 <lll_adv_connect_ind_check>
		   lll->conn && !lll->conn->slave.cancelled &&
   18bee:	2800      	cmp	r0, #0
   18bf0:	d0a3      	beq.n	18b3a <isr_rx+0x16>
			rx = ull_pdu_rx_alloc_peek(4);
   18bf2:	2004      	movs	r0, #4
   18bf4:	f7f8 fae0 	bl	111b8 <ull_pdu_rx_alloc_peek>
		if (!rx) {
   18bf8:	2800      	cmp	r0, #0
   18bfa:	d09e      	beq.n	18b3a <isr_rx+0x16>
		radio_isr_set(isr_abort, lll);
   18bfc:	484d      	ldr	r0, [pc, #308]	; (18d34 <isr_rx+0x210>)
   18bfe:	4629      	mov	r1, r5
   18c00:	f000 fe94 	bl	1992c <radio_isr_set>
		radio_disable();
   18c04:	f000 ff8a 	bl	19b1c <radio_disable>
		LL_ASSERT(!radio_is_ready());
   18c08:	f000 ffac 	bl	19b64 <radio_is_ready>
   18c0c:	2800      	cmp	r0, #0
   18c0e:	d161      	bne.n	18cd4 <isr_rx+0x1b0>
		lll->conn->slave.initiated = 1;
   18c10:	686a      	ldr	r2, [r5, #4]
   18c12:	f892 3020 	ldrb.w	r3, [r2, #32]
   18c16:	f043 0301 	orr.w	r3, r3, #1
   18c1a:	f882 3020 	strb.w	r3, [r2, #32]
		rx = ull_pdu_rx_alloc();
   18c1e:	f7f8 fae9 	bl	111f4 <ull_pdu_rx_alloc>
		rx->hdr.handle = 0xffff;
   18c22:	f64f 73ff 	movw	r3, #65535	; 0xffff
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   18c26:	2214      	movs	r2, #20
		rx->hdr.handle = 0xffff;
   18c28:	80c3      	strh	r3, [r0, #6]
		rx = ull_pdu_rx_alloc();
   18c2a:	4606      	mov	r6, r0
   18c2c:	4621      	mov	r1, r4
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   18c2e:	7102      	strb	r2, [r0, #4]
   18c30:	f100 031c 	add.w	r3, r0, #28
   18c34:	f104 0e20 	add.w	lr, r4, #32
   18c38:	680c      	ldr	r4, [r1, #0]
   18c3a:	6848      	ldr	r0, [r1, #4]
   18c3c:	688a      	ldr	r2, [r1, #8]
   18c3e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   18c42:	f8c3 c00c 	str.w	ip, [r3, #12]
   18c46:	3110      	adds	r1, #16
   18c48:	4571      	cmp	r1, lr
   18c4a:	601c      	str	r4, [r3, #0]
   18c4c:	6058      	str	r0, [r3, #4]
   18c4e:	609a      	str	r2, [r3, #8]
   18c50:	f103 0310 	add.w	r3, r3, #16
   18c54:	d1f0      	bne.n	18c38 <isr_rx+0x114>
   18c56:	680a      	ldr	r2, [r1, #0]
   18c58:	601a      	str	r2, [r3, #0]
		ftr->param = lll;
   18c5a:	60b5      	str	r5, [r6, #8]
		ftr->ticks_anchor = radio_tmr_start_get();
   18c5c:	f001 f8d2 	bl	19e04 <radio_tmr_start_get>
   18c60:	6130      	str	r0, [r6, #16]
		ftr->radio_end_us = radio_tmr_end_get() -
   18c62:	f001 f92b 	bl	19ebc <radio_tmr_end_get>
				    radio_tx_chain_delay_get(0, 0);
   18c66:	2100      	movs	r1, #0
		ftr->radio_end_us = radio_tmr_end_get() -
   18c68:	4604      	mov	r4, r0
				    radio_tx_chain_delay_get(0, 0);
   18c6a:	4608      	mov	r0, r1
   18c6c:	f000 ff46 	bl	19afc <radio_tx_chain_delay_get>
		ftr->radio_end_us = radio_tmr_end_get() -
   18c70:	1a24      	subs	r4, r4, r0
   18c72:	6174      	str	r4, [r6, #20]
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   18c74:	b19f      	cbz	r7, 18c9e <isr_rx+0x17a>
   18c76:	f89d 301f 	ldrb.w	r3, [sp, #31]
   18c7a:	76b3      	strb	r3, [r6, #26]
			ftr->extra = ull_pdu_rx_alloc();
   18c7c:	f7f8 faba 	bl	111f4 <ull_pdu_rx_alloc>
		ull_rx_put(rx->hdr.link, rx);
   18c80:	4631      	mov	r1, r6
			ftr->extra = ull_pdu_rx_alloc();
   18c82:	60f0      	str	r0, [r6, #12]
		ull_rx_put(rx->hdr.link, rx);
   18c84:	6830      	ldr	r0, [r6, #0]
   18c86:	f7f8 facd 	bl	11224 <ull_rx_put>
		ull_rx_sched();
   18c8a:	f7f8 fadb 	bl	11244 <ull_rx_sched>
}
   18c8e:	b009      	add	sp, #36	; 0x24
   18c90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   18c94:	fa5f f088 	uxtb.w	r0, r8
   18c98:	f7fe fe0c 	bl	178b4 <ull_filter_lll_rl_irk_idx>
   18c9c:	e770      	b.n	18b80 <isr_rx+0x5c>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   18c9e:	23ff      	movs	r3, #255	; 0xff
   18ca0:	e7eb      	b.n	18c7a <isr_rx+0x156>
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   18ca2:	7861      	ldrb	r1, [r4, #1]
   18ca4:	290c      	cmp	r1, #12
   18ca6:	f47f af48 	bne.w	18b3a <isr_rx+0x16>
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
   18caa:	f1b8 0f00 	cmp.w	r8, #0
   18cae:	f47f af44 	bne.w	18b3a <isr_rx+0x16>
	    lll_adv_scan_req_check(lll, pdu_rx, tx_addr, addr, devmatch_ok,
   18cb2:	f10d 011f 	add.w	r1, sp, #31
   18cb6:	e9cd 9100 	strd	r9, r1, [sp]
   18cba:	4628      	mov	r0, r5
   18cbc:	4621      	mov	r1, r4
   18cbe:	e9cd 2304 	strd	r2, r3, [sp, #16]
   18cc2:	f7ff fe8f 	bl	189e4 <lll_adv_scan_req_check>
	    (tgt_addr == NULL) &&
   18cc6:	b998      	cbnz	r0, 18cf0 <isr_rx+0x1cc>
   18cc8:	7821      	ldrb	r1, [r4, #0]
   18cca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   18cce:	f001 010f 	and.w	r1, r1, #15
   18cd2:	e776      	b.n	18bc2 <isr_rx+0x9e>
		LL_ASSERT(!radio_is_ready());
   18cd4:	4a18      	ldr	r2, [pc, #96]	; (18d38 <isr_rx+0x214>)
   18cd6:	4919      	ldr	r1, [pc, #100]	; (18d3c <isr_rx+0x218>)
   18cd8:	4819      	ldr	r0, [pc, #100]	; (18d40 <isr_rx+0x21c>)
   18cda:	f240 5345 	movw	r3, #1349	; 0x545
   18cde:	f005 fe1d 	bl	1e91c <printk>
   18ce2:	4040      	eors	r0, r0
   18ce4:	f380 8811 	msr	BASEPRI, r0
   18ce8:	f04f 0003 	mov.w	r0, #3
   18cec:	df02      	svc	2
   18cee:	e78f      	b.n	18c10 <isr_rx+0xec>
		radio_isr_set(isr_done, lll);
   18cf0:	4629      	mov	r1, r5
   18cf2:	480f      	ldr	r0, [pc, #60]	; (18d30 <isr_rx+0x20c>)
   18cf4:	f000 fe1a 	bl	1992c <radio_isr_set>
		radio_switch_complete_and_disable();
   18cf8:	f000 ff8a 	bl	19c10 <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   18cfc:	7e2b      	ldrb	r3, [r5, #24]
   18cfe:	eb05 0583 	add.w	r5, r5, r3, lsl #2
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   18d02:	69e8      	ldr	r0, [r5, #28]
   18d04:	f000 fef4 	bl	19af0 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   18d08:	f000 ff2c 	bl	19b64 <radio_is_ready>
   18d0c:	2800      	cmp	r0, #0
   18d0e:	f43f af1a 	beq.w	18b46 <isr_rx+0x22>
   18d12:	4a09      	ldr	r2, [pc, #36]	; (18d38 <isr_rx+0x214>)
   18d14:	4909      	ldr	r1, [pc, #36]	; (18d3c <isr_rx+0x218>)
   18d16:	480a      	ldr	r0, [pc, #40]	; (18d40 <isr_rx+0x21c>)
   18d18:	f240 43fe 	movw	r3, #1278	; 0x4fe
   18d1c:	f005 fdfe 	bl	1e91c <printk>
   18d20:	4040      	eors	r0, r0
   18d22:	f380 8811 	msr	BASEPRI, r0
   18d26:	f04f 0003 	mov.w	r0, #3
   18d2a:	df02      	svc	2
		if (!err) {
   18d2c:	e70b      	b.n	18b46 <isr_rx+0x22>
   18d2e:	bf00      	nop
   18d30:	00018919 	.word	0x00018919
   18d34:	00018319 	.word	0x00018319
   18d38:	0002544c 	.word	0x0002544c
   18d3c:	00025498 	.word	0x00025498
   18d40:	00024904 	.word	0x00024904

00018d44 <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   18d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18d46:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   18d48:	f7ff f94e 	bl	17fe8 <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   18d4c:	f7f8 fb48 	bl	113e0 <ull_event_done_extra_get>
	LL_ASSERT(e);
   18d50:	4604      	mov	r4, r0
   18d52:	2800      	cmp	r0, #0
   18d54:	d033      	beq.n	18dbe <isr_done+0x7a>

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
	e->trx_cnt = trx_cnt;
   18d56:	4b21      	ldr	r3, [pc, #132]	; (18ddc <isr_done+0x98>)
	e->crc_valid = crc_valid;
   18d58:	4921      	ldr	r1, [pc, #132]	; (18de0 <isr_done+0x9c>)

#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
   18d5a:	4a22      	ldr	r2, [pc, #136]	; (18de4 <isr_done+0xa0>)
	e->trx_cnt = trx_cnt;
   18d5c:	881b      	ldrh	r3, [r3, #0]
	e->crc_valid = crc_valid;
   18d5e:	7808      	ldrb	r0, [r1, #0]
	e->mic_state = mic_state;
   18d60:	7811      	ldrb	r1, [r2, #0]
	e->trx_cnt = trx_cnt;
   18d62:	80a3      	strh	r3, [r4, #4]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   18d64:	2201      	movs	r2, #1
	e->crc_valid = crc_valid;
   18d66:	71a0      	strb	r0, [r4, #6]
	e->mic_state = mic_state;
   18d68:	71e1      	strb	r1, [r4, #7]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   18d6a:	7022      	strb	r2, [r4, #0]
#endif /* CONFIG_BT_CTLR_LE_ENC */

#if defined(CONFIG_BT_PERIPHERAL)
	if (trx_cnt) {
   18d6c:	b11b      	cbz	r3, 18d76 <isr_done+0x32>
		struct lll_conn *lll = param;

		if (lll->role) {
   18d6e:	f995 301d 	ldrsb.w	r3, [r5, #29]
   18d72:	2b00      	cmp	r3, #0
   18d74:	db04      	blt.n	18d80 <isr_done+0x3c>
			lll->slave.window_size_event_us = 0;
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   18d76:	4628      	mov	r0, r5
}
   18d78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   18d7c:	f7ff b942 	b.w	18004 <lll_isr_cleanup>
				addr_us_get(lll->phy_rx);
   18d80:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
   18d84:	f003 0307 	and.w	r3, r3, #7
#define RANGE_DISTANCE 1000 /* meters */
#define RANGE_DELAY_US (2 * RANGE_DISTANCE * 4 / 1000)

static inline uint32_t addr_us_get(uint8_t phy)
{
	switch (phy) {
   18d88:	2b02      	cmp	r3, #2
   18d8a:	d016      	beq.n	18dba <isr_done+0x76>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
   18d8c:	2b04      	cmp	r3, #4
   18d8e:	bf14      	ite	ne
   18d90:	2728      	movne	r7, #40	; 0x28
   18d92:	f44f 77bc 	moveq.w	r7, #376	; 0x178
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   18d96:	f001 f87d 	bl	19e94 <radio_tmr_aa_restore>
   18d9a:	4606      	mov	r6, r0
   18d9c:	f001 f880 	bl	19ea0 <radio_tmr_ready_get>
			e->drift.window_widening_event_us =
   18da0:	6b2a      	ldr	r2, [r5, #48]	; 0x30
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   18da2:	1a36      	subs	r6, r6, r0
			lll->slave.window_widening_event_us = 0;
   18da4:	2300      	movs	r3, #0
			e->drift.preamble_to_addr_us = preamble_to_addr_us;
   18da6:	e9c4 2703 	strd	r2, r7, [r4, #12]
			e->drift.start_to_address_actual_us =
   18daa:	60a6      	str	r6, [r4, #8]
	lll_isr_cleanup(param);
   18dac:	4628      	mov	r0, r5
			lll->slave.window_widening_event_us = 0;
   18dae:	632b      	str	r3, [r5, #48]	; 0x30
			lll->slave.window_size_event_us = 0;
   18db0:	63ab      	str	r3, [r5, #56]	; 0x38
}
   18db2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   18db6:	f7ff b925 	b.w	18004 <lll_isr_cleanup>
	switch (phy) {
   18dba:	2718      	movs	r7, #24
   18dbc:	e7eb      	b.n	18d96 <isr_done+0x52>
	LL_ASSERT(e);
   18dbe:	4a0a      	ldr	r2, [pc, #40]	; (18de8 <isr_done+0xa4>)
   18dc0:	490a      	ldr	r1, [pc, #40]	; (18dec <isr_done+0xa8>)
   18dc2:	480b      	ldr	r0, [pc, #44]	; (18df0 <isr_done+0xac>)
   18dc4:	f44f 731d 	mov.w	r3, #628	; 0x274
   18dc8:	f005 fda8 	bl	1e91c <printk>
   18dcc:	4040      	eors	r0, r0
   18dce:	f380 8811 	msr	BASEPRI, r0
   18dd2:	f04f 0003 	mov.w	r0, #3
   18dd6:	df02      	svc	2
   18dd8:	e7bd      	b.n	18d56 <isr_done+0x12>
   18dda:	bf00      	nop
   18ddc:	20002e7c 	.word	0x20002e7c
   18de0:	200035da 	.word	0x200035da
   18de4:	200035db 	.word	0x200035db
   18de8:	000254e4 	.word	0x000254e4
   18dec:	00024dbc 	.word	0x00024dbc
   18df0:	00024904 	.word	0x00024904

00018df4 <lll_conn_init>:
{
   18df4:	b508      	push	{r3, lr}

static void empty_tx_init(void)
{
	struct pdu_data *p;

	p = (void *)radio_pkt_empty_get();
   18df6:	f000 fee9 	bl	19bcc <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   18dfa:	7803      	ldrb	r3, [r0, #0]
   18dfc:	2201      	movs	r2, #1
   18dfe:	f362 0301 	bfi	r3, r2, #0, #2
   18e02:	7003      	strb	r3, [r0, #0]
}
   18e04:	2000      	movs	r0, #0
   18e06:	bd08      	pop	{r3, pc}

00018e08 <lll_conn_reset>:
}
   18e08:	2000      	movs	r0, #0
   18e0a:	4770      	bx	lr

00018e0c <lll_conn_flush>:
}
   18e0c:	4770      	bx	lr
   18e0e:	bf00      	nop

00018e10 <lll_conn_prepare_reset>:
	crc_valid = 0U;
   18e10:	4805      	ldr	r0, [pc, #20]	; (18e28 <lll_conn_prepare_reset+0x18>)
	crc_expire = 0U;
   18e12:	4906      	ldr	r1, [pc, #24]	; (18e2c <lll_conn_prepare_reset+0x1c>)
	mic_state = LLL_CONN_MIC_NONE;
   18e14:	4a06      	ldr	r2, [pc, #24]	; (18e30 <lll_conn_prepare_reset+0x20>)
{
   18e16:	b410      	push	{r4}
	trx_cnt = 0U;
   18e18:	2300      	movs	r3, #0
   18e1a:	4c06      	ldr	r4, [pc, #24]	; (18e34 <lll_conn_prepare_reset+0x24>)
	crc_valid = 0U;
   18e1c:	7003      	strb	r3, [r0, #0]
	crc_expire = 0U;
   18e1e:	700b      	strb	r3, [r1, #0]
	mic_state = LLL_CONN_MIC_NONE;
   18e20:	7013      	strb	r3, [r2, #0]
	trx_cnt = 0U;
   18e22:	8023      	strh	r3, [r4, #0]
}
   18e24:	bc10      	pop	{r4}
   18e26:	4770      	bx	lr
   18e28:	200035da 	.word	0x200035da
   18e2c:	200035d9 	.word	0x200035d9
   18e30:	200035db 	.word	0x200035db
   18e34:	20002e7c 	.word	0x20002e7c

00018e38 <lll_conn_abort_cb>:
{
   18e38:	b510      	push	{r4, lr}
	if (!prepare_param) {
   18e3a:	b1d0      	cbz	r0, 18e72 <lll_conn_abort_cb+0x3a>
	err = lll_hfclock_off();
   18e3c:	460c      	mov	r4, r1
   18e3e:	f7ff fa45 	bl	182cc <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   18e42:	2800      	cmp	r0, #0
   18e44:	db04      	blt.n	18e50 <lll_conn_abort_cb+0x18>
	lll_done(param);
   18e46:	4620      	mov	r0, r4
}
   18e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   18e4c:	f7ff b802 	b.w	17e54 <lll_done>
	LL_ASSERT(err >= 0);
   18e50:	4a0b      	ldr	r2, [pc, #44]	; (18e80 <lll_conn_abort_cb+0x48>)
   18e52:	490c      	ldr	r1, [pc, #48]	; (18e84 <lll_conn_abort_cb+0x4c>)
   18e54:	480c      	ldr	r0, [pc, #48]	; (18e88 <lll_conn_abort_cb+0x50>)
   18e56:	239c      	movs	r3, #156	; 0x9c
   18e58:	f005 fd60 	bl	1e91c <printk>
   18e5c:	4040      	eors	r0, r0
   18e5e:	f380 8811 	msr	BASEPRI, r0
   18e62:	f04f 0003 	mov.w	r0, #3
   18e66:	df02      	svc	2
	lll_done(param);
   18e68:	4620      	mov	r0, r4
}
   18e6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   18e6e:	f7fe bff1 	b.w	17e54 <lll_done>
		radio_isr_set(isr_done, param);
   18e72:	4806      	ldr	r0, [pc, #24]	; (18e8c <lll_conn_abort_cb+0x54>)
   18e74:	f000 fd5a 	bl	1992c <radio_isr_set>
}
   18e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   18e7c:	f000 be4e 	b.w	19b1c <radio_disable>
   18e80:	000254e4 	.word	0x000254e4
   18e84:	00025410 	.word	0x00025410
   18e88:	00024904 	.word	0x00024904
   18e8c:	00018d45 	.word	0x00018d45

00018e90 <lll_conn_rx_pkt_set>:
{
   18e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18e92:	4605      	mov	r5, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
   18e94:	2001      	movs	r0, #1
   18e96:	f7f8 f98f 	bl	111b8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   18e9a:	4604      	mov	r4, r0
   18e9c:	b348      	cbz	r0, 18ef2 <lll_conn_rx_pkt_set+0x62>
	phy = lll->phy_rx;
   18e9e:	f895 6045 	ldrb.w	r6, [r5, #69]	; 0x45
	max_rx_octets = lll->max_rx_octets;
   18ea2:	8fef      	ldrh	r7, [r5, #62]	; 0x3e
	phy = lll->phy_rx;
   18ea4:	f006 0607 	and.w	r6, r6, #7
	radio_phy_set(phy, 0);
   18ea8:	4630      	mov	r0, r6
   18eaa:	2100      	movs	r1, #0
   18eac:	f000 fda4 	bl	199f8 <radio_phy_set>
	} else if (lll->enc_rx) {
   18eb0:	f895 305e 	ldrb.w	r3, [r5, #94]	; 0x5e
   18eb4:	0072      	lsls	r2, r6, #1
   18eb6:	071b      	lsls	r3, r3, #28
   18eb8:	f104 041c 	add.w	r4, r4, #28
   18ebc:	f042 0201 	orr.w	r2, r2, #1
   18ec0:	d50e      	bpl.n	18ee0 <lll_conn_rx_pkt_set+0x50>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   18ec2:	1d39      	adds	r1, r7, #4
   18ec4:	b2c9      	uxtb	r1, r1
   18ec6:	2008      	movs	r0, #8
   18ec8:	f000 fdde 	bl	19a88 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   18ecc:	4622      	mov	r2, r4
   18ece:	4631      	mov	r1, r6
   18ed0:	f105 005f 	add.w	r0, r5, #95	; 0x5f
   18ed4:	f000 fffe 	bl	19ed4 <radio_ccm_rx_pkt_set>
}
   18ed8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   18edc:	f000 be02 	b.w	19ae4 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
   18ee0:	b2f9      	uxtb	r1, r7
   18ee2:	2008      	movs	r0, #8
   18ee4:	f000 fdd0 	bl	19a88 <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   18ee8:	4620      	mov	r0, r4
}
   18eea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(node_rx->pdu);
   18eee:	f000 bdf9 	b.w	19ae4 <radio_pkt_rx_set>
	LL_ASSERT(node_rx);
   18ef2:	4a07      	ldr	r2, [pc, #28]	; (18f10 <lll_conn_rx_pkt_set+0x80>)
   18ef4:	4907      	ldr	r1, [pc, #28]	; (18f14 <lll_conn_rx_pkt_set+0x84>)
   18ef6:	4808      	ldr	r0, [pc, #32]	; (18f18 <lll_conn_rx_pkt_set+0x88>)
   18ef8:	f240 13d9 	movw	r3, #473	; 0x1d9
   18efc:	f005 fd0e 	bl	1e91c <printk>
   18f00:	4040      	eors	r0, r0
   18f02:	f380 8811 	msr	BASEPRI, r0
   18f06:	f04f 0003 	mov.w	r0, #3
   18f0a:	df02      	svc	2
   18f0c:	e7c7      	b.n	18e9e <lll_conn_rx_pkt_set+0xe>
   18f0e:	bf00      	nop
   18f10:	000254e4 	.word	0x000254e4
   18f14:	00025530 	.word	0x00025530
   18f18:	00024904 	.word	0x00024904

00018f1c <lll_conn_isr_tx>:
{
   18f1c:	b538      	push	{r3, r4, r5, lr}
   18f1e:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   18f20:	f7ff f850 	bl	17fc4 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   18f24:	2096      	movs	r0, #150	; 0x96
   18f26:	f000 fee1 	bl	19cec <radio_tmr_tifs_set>
				     lll->phy_flags);
   18f2a:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
	radio_switch_complete_and_tx(lll->phy_rx, 0,
   18f2e:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   18f32:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   18f36:	f000 0007 	and.w	r0, r0, #7
   18f3a:	f002 0207 	and.w	r2, r2, #7
   18f3e:	2100      	movs	r1, #0
   18f40:	f000 fe5a 	bl	19bf8 <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   18f44:	4620      	mov	r0, r4
   18f46:	f7ff ffa3 	bl	18e90 <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   18f4a:	f000 fe0b 	bl	19b64 <radio_is_ready>
   18f4e:	bb58      	cbnz	r0, 18fa8 <lll_conn_isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 +
   18f50:	f000 ffba 	bl	19ec8 <radio_tmr_tifs_base_get>
   18f54:	4605      	mov	r5, r0
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   18f56:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   18f5a:	2101      	movs	r1, #1
   18f5c:	f000 0007 	and.w	r0, r0, #7
   18f60:	f000 fdd0 	bl	19b04 <radio_rx_chain_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   18f64:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   18f68:	f003 0307 	and.w	r3, r3, #7
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   18f6c:	4405      	add	r5, r0
   18f6e:	2b02      	cmp	r3, #2
   18f70:	f105 05a3 	add.w	r5, r5, #163	; 0xa3
   18f74:	d016      	beq.n	18fa4 <lll_conn_isr_tx+0x88>
		return 376;
   18f76:	2b04      	cmp	r3, #4
   18f78:	bf14      	ite	ne
   18f7a:	2328      	movne	r3, #40	; 0x28
   18f7c:	f44f 73bc 	moveq.w	r3, #376	; 0x178
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   18f80:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
   18f84:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   18f88:	f000 0007 	and.w	r0, r0, #7
	hcto += addr_us_get(lll->phy_rx);
   18f8c:	441d      	add	r5, r3
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   18f8e:	f000 fdb5 	bl	19afc <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   18f92:	1a28      	subs	r0, r5, r0
   18f94:	f000 ff50 	bl	19e38 <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   18f98:	4621      	mov	r1, r4
   18f9a:	480a      	ldr	r0, [pc, #40]	; (18fc4 <lll_conn_isr_tx+0xa8>)
}
   18f9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   18fa0:	f000 bcc4 	b.w	1992c <radio_isr_set>
	switch (phy) {
   18fa4:	2318      	movs	r3, #24
   18fa6:	e7eb      	b.n	18f80 <lll_conn_isr_tx+0x64>
	LL_ASSERT(!radio_is_ready());
   18fa8:	4a07      	ldr	r2, [pc, #28]	; (18fc8 <lll_conn_isr_tx+0xac>)
   18faa:	4908      	ldr	r1, [pc, #32]	; (18fcc <lll_conn_isr_tx+0xb0>)
   18fac:	4808      	ldr	r0, [pc, #32]	; (18fd0 <lll_conn_isr_tx+0xb4>)
   18fae:	f240 13a5 	movw	r3, #421	; 0x1a5
   18fb2:	f005 fcb3 	bl	1e91c <printk>
   18fb6:	4040      	eors	r0, r0
   18fb8:	f380 8811 	msr	BASEPRI, r0
   18fbc:	f04f 0003 	mov.w	r0, #3
   18fc0:	df02      	svc	2
   18fc2:	e7c5      	b.n	18f50 <lll_conn_isr_tx+0x34>
   18fc4:	0001910d 	.word	0x0001910d
   18fc8:	000254e4 	.word	0x000254e4
   18fcc:	00025498 	.word	0x00025498
   18fd0:	00024904 	.word	0x00024904

00018fd4 <lll_conn_tx_pkt_set>:
{
   18fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18fd6:	460f      	mov	r7, r1
	phy = lll->phy_tx;
   18fd8:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
	max_tx_octets = lll->max_tx_octets;
   18fdc:	8f86      	ldrh	r6, [r0, #60]	; 0x3c
	phy = lll->phy_tx;
   18fde:	f001 0407 	and.w	r4, r1, #7
{
   18fe2:	4605      	mov	r5, r0
	radio_phy_set(phy, flags);
   18fe4:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   18fe8:	4620      	mov	r0, r4
   18fea:	f000 fd05 	bl	199f8 <radio_phy_set>
	} else if (lll->enc_tx) {
   18fee:	f895 305e 	ldrb.w	r3, [r5, #94]	; 0x5e
   18ff2:	0062      	lsls	r2, r4, #1
   18ff4:	06db      	lsls	r3, r3, #27
   18ff6:	f042 0201 	orr.w	r2, r2, #1
   18ffa:	b2f1      	uxtb	r1, r6
   18ffc:	d50d      	bpl.n	1901a <lll_conn_tx_pkt_set+0x46>
		radio_pkt_configure(8, (max_tx_octets + 4U),
   18ffe:	3104      	adds	r1, #4
   19000:	b2c9      	uxtb	r1, r1
   19002:	2008      	movs	r0, #8
   19004:	f000 fd40 	bl	19a88 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx,
   19008:	4639      	mov	r1, r7
   1900a:	f105 0080 	add.w	r0, r5, #128	; 0x80
   1900e:	f000 ff9f 	bl	19f50 <radio_ccm_tx_pkt_set>
}
   19012:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx,
   19016:	f000 bd6b 	b.w	19af0 <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
   1901a:	2008      	movs	r0, #8
   1901c:	f000 fd34 	bl	19a88 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   19020:	4638      	mov	r0, r7
}
   19022:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   19026:	f000 bd63 	b.w	19af0 <radio_pkt_tx_set>
   1902a:	bf00      	nop

0001902c <lll_conn_pdu_tx_prep>:
{
   1902c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19030:	4604      	mov	r4, r0
   19032:	b083      	sub	sp, #12
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   19034:	aa01      	add	r2, sp, #4
   19036:	6c80      	ldr	r0, [r0, #72]	; 0x48
{
   19038:	4689      	mov	r9, r1
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1903a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   1903c:	f7f4 f8b8 	bl	d1b0 <memq_peek>
	if (lll->empty || !link) {
   19040:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   19044:	075a      	lsls	r2, r3, #29
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   19046:	4606      	mov	r6, r0
	if (lll->empty || !link) {
   19048:	d432      	bmi.n	190b0 <lll_conn_pdu_tx_prep+0x84>
   1904a:	2800      	cmp	r0, #0
   1904c:	d04e      	beq.n	190ec <lll_conn_pdu_tx_prep+0xc0>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   1904e:	9a01      	ldr	r2, [sp, #4]
   19050:	f894 705d 	ldrb.w	r7, [r4, #93]	; 0x5d
		if (!lll->packet_tx_head_len) {
   19054:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   19058:	f102 0804 	add.w	r8, r2, #4
   1905c:	eb08 0507 	add.w	r5, r8, r7
		if (!lll->packet_tx_head_len) {
   19060:	b913      	cbnz	r3, 19068 <lll_conn_pdu_tx_prep+0x3c>
			lll->packet_tx_head_len = p->len;
   19062:	786b      	ldrb	r3, [r5, #1]
   19064:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
		if (lll->packet_tx_head_offset) {
   19068:	b137      	cbz	r7, 19078 <lll_conn_pdu_tx_prep+0x4c>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1906a:	f818 2007 	ldrb.w	r2, [r8, r7]
   1906e:	2101      	movs	r1, #1
   19070:	f361 0201 	bfi	r2, r1, #0, #2
   19074:	f808 2007 	strb.w	r2, [r8, r7]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   19078:	1bdb      	subs	r3, r3, r7
   1907a:	706b      	strb	r3, [r5, #1]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   1907c:	4620      	mov	r0, r4
   1907e:	f7fd fbbb 	bl	167f8 <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   19082:	786b      	ldrb	r3, [r5, #1]
   19084:	4283      	cmp	r3, r0
   19086:	d924      	bls.n	190d2 <lll_conn_pdu_tx_prep+0xa6>
			p->len = max_tx_octets;
   19088:	7068      	strb	r0, [r5, #1]
			p->md = 1U;
   1908a:	f818 3007 	ldrb.w	r3, [r8, r7]
   1908e:	f043 0310 	orr.w	r3, r3, #16
   19092:	f808 3007 	strb.w	r3, [r8, r7]
		p->rfu = 0U;
   19096:	f818 3007 	ldrb.w	r3, [r8, r7]
		p->resv = 0U;
   1909a:	2200      	movs	r2, #0
		p->rfu = 0U;
   1909c:	f36f 1347 	bfc	r3, #5, #3
   190a0:	f808 3007 	strb.w	r3, [r8, r7]
		p->resv = 0U;
   190a4:	70aa      	strb	r2, [r5, #2]
	*pdu_data_tx = p;
   190a6:	f8c9 5000 	str.w	r5, [r9]
}
   190aa:	b003      	add	sp, #12
   190ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		lll->empty = 1U;
   190b0:	f043 0304 	orr.w	r3, r3, #4
   190b4:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		p = (void *)radio_pkt_empty_get();
   190b8:	f000 fd88 	bl	19bcc <radio_pkt_empty_get>
   190bc:	4605      	mov	r5, r0
		if (link || FORCE_MD_CNT_GET()) {
   190be:	b1e6      	cbz	r6, 190fa <lll_conn_pdu_tx_prep+0xce>
			p->md = 1U;
   190c0:	7803      	ldrb	r3, [r0, #0]
   190c2:	f043 0310 	orr.w	r3, r3, #16
   190c6:	7003      	strb	r3, [r0, #0]
	*pdu_data_tx = p;
   190c8:	f8c9 5000 	str.w	r5, [r9]
}
   190cc:	b003      	add	sp, #12
   190ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((link->next != lll->memq_tx.tail) ||
   190d2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   190d4:	6832      	ldr	r2, [r6, #0]
   190d6:	429a      	cmp	r2, r3
			p->md = 1U;
   190d8:	f818 3007 	ldrb.w	r3, [r8, r7]
   190dc:	bf14      	ite	ne
   190de:	f043 0310 	orrne.w	r3, r3, #16
			p->md = 0U;
   190e2:	f36f 1304 	bfceq	r3, #4, #1
   190e6:	f808 3007 	strb.w	r3, [r8, r7]
   190ea:	e7d4      	b.n	19096 <lll_conn_pdu_tx_prep+0x6a>
		lll->empty = 1U;
   190ec:	f043 0304 	orr.w	r3, r3, #4
   190f0:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		p = (void *)radio_pkt_empty_get();
   190f4:	f000 fd6a 	bl	19bcc <radio_pkt_empty_get>
   190f8:	4605      	mov	r5, r0
			p->md = 0U;
   190fa:	782b      	ldrb	r3, [r5, #0]
   190fc:	f36f 1304 	bfc	r3, #4, #1
   19100:	702b      	strb	r3, [r5, #0]
	*pdu_data_tx = p;
   19102:	f8c9 5000 	str.w	r5, [r9]
}
   19106:	b003      	add	sp, #12
   19108:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001910c <lll_conn_isr_rx>:
{
   1910c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1910e:	b083      	sub	sp, #12
   19110:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   19112:	f000 fd31 	bl	19b78 <radio_is_done>
	if (trx_done) {
   19116:	f010 0fff 	tst.w	r0, #255	; 0xff
   1911a:	d109      	bne.n	19130 <lll_conn_isr_rx+0x24>
	lll_isr_rx_status_reset();
   1911c:	f7fe ff5a 	bl	17fd4 <lll_isr_rx_status_reset>
		radio_isr_set(isr_done, param);
   19120:	48b7      	ldr	r0, [pc, #732]	; (19400 <lll_conn_isr_rx+0x2f4>)
   19122:	4621      	mov	r1, r4
   19124:	f000 fc02 	bl	1992c <radio_isr_set>
		radio_disable();
   19128:	f000 fcf8 	bl	19b1c <radio_disable>
}
   1912c:	b003      	add	sp, #12
   1912e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		crc_ok = radio_crc_is_valid();
   19130:	f000 fd42 	bl	19bb8 <radio_crc_is_valid>
   19134:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
   19136:	f000 fd81 	bl	19c3c <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   1913a:	f7fe ff4b 	bl	17fd4 <lll_isr_rx_status_reset>
	trx_cnt++;
   1913e:	4ab1      	ldr	r2, [pc, #708]	; (19404 <lll_conn_isr_rx+0x2f8>)
   19140:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   19142:	2001      	movs	r0, #1
	trx_cnt++;
   19144:	4403      	add	r3, r0
   19146:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   19148:	f7f8 f836 	bl	111b8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1914c:	4606      	mov	r6, r0
   1914e:	2800      	cmp	r0, #0
   19150:	f000 80bb 	beq.w	192ca <lll_conn_isr_rx+0x1be>
	if (crc_ok) {
   19154:	2d00      	cmp	r5, #0
   19156:	d155      	bne.n	19204 <lll_conn_isr_rx+0xf8>
		if (crc_expire == 0U) {
   19158:	4bab      	ldr	r3, [pc, #684]	; (19408 <lll_conn_isr_rx+0x2fc>)
   1915a:	781f      	ldrb	r7, [r3, #0]
   1915c:	2f00      	cmp	r7, #0
   1915e:	f040 80a3 	bne.w	192a8 <lll_conn_isr_rx+0x19c>
		crc_expire--;
   19162:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   19164:	a901      	add	r1, sp, #4
   19166:	4620      	mov	r0, r4
		crc_expire--;
   19168:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1916a:	f7ff ff5f 	bl	1902c <lll_conn_pdu_tx_prep>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1916e:	2096      	movs	r0, #150	; 0x96
   19170:	f000 fdbc 	bl	19cec <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(lll->phy_rx);
   19174:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   19178:	f000 0007 	and.w	r0, r0, #7
   1917c:	f000 fd2e 	bl	19bdc <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   19180:	48a2      	ldr	r0, [pc, #648]	; (1940c <lll_conn_isr_rx+0x300>)
   19182:	4621      	mov	r1, r4
   19184:	f000 fbd2 	bl	1992c <radio_isr_set>
		radio_tmr_end_capture();
   19188:	f000 fe90 	bl	19eac <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   1918c:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
   19190:	9901      	ldr	r1, [sp, #4]
	pdu_data_tx->nesn = lll->nesn;
   19192:	f3c2 0340 	ubfx	r3, r2, #1, #1
   19196:	7808      	ldrb	r0, [r1, #0]
	pdu_data_tx->sn = lll->sn;
   19198:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   1919c:	009b      	lsls	r3, r3, #2
   1919e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   191a2:	f020 020c 	bic.w	r2, r0, #12
   191a6:	4313      	orrs	r3, r2
   191a8:	700b      	strb	r3, [r1, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   191aa:	4620      	mov	r0, r4
   191ac:	f7ff ff12 	bl	18fd4 <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   191b0:	f000 fcd8 	bl	19b64 <radio_is_ready>
   191b4:	2800      	cmp	r0, #0
   191b6:	f040 80b7 	bne.w	19328 <lll_conn_isr_rx+0x21c>
	if (!radio_tmr_aa_restore()) {
   191ba:	f000 fe6b 	bl	19e94 <radio_tmr_aa_restore>
   191be:	b170      	cbz	r0, 191de <lll_conn_isr_rx+0xd2>
	if (tx_release) {
   191c0:	b19d      	cbz	r5, 191ea <lll_conn_isr_rx+0xde>
		LL_ASSERT(lll->handle != 0xFFFF);
   191c2:	89a0      	ldrh	r0, [r4, #12]
   191c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   191c8:	4298      	cmp	r0, r3
   191ca:	f000 80bb 	beq.w	19344 <lll_conn_isr_rx+0x238>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   191ce:	4629      	mov	r1, r5
   191d0:	f7fd f9a8 	bl	16524 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   191d4:	b95f      	cbnz	r7, 191ee <lll_conn_isr_rx+0xe2>
		ull_rx_sched();
   191d6:	f7f8 f835 	bl	11244 <ull_rx_sched>
}
   191da:	b003      	add	sp, #12
   191dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_tmr_aa_save(radio_tmr_aa_get());
   191de:	f000 fe4d 	bl	19e7c <radio_tmr_aa_get>
   191e2:	f000 fe51 	bl	19e88 <radio_tmr_aa_save>
	if (tx_release) {
   191e6:	2d00      	cmp	r5, #0
   191e8:	d1eb      	bne.n	191c2 <lll_conn_isr_rx+0xb6>
	if (is_rx_enqueue) {
   191ea:	2f00      	cmp	r7, #0
   191ec:	d09e      	beq.n	1912c <lll_conn_isr_rx+0x20>
		ull_pdu_rx_alloc();
   191ee:	f7f8 f801 	bl	111f4 <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   191f2:	2303      	movs	r3, #3
   191f4:	7133      	strb	r3, [r6, #4]
		node_rx->hdr.handle = lll->handle;
   191f6:	89a3      	ldrh	r3, [r4, #12]
		ull_rx_put(node_rx->hdr.link, node_rx);
   191f8:	6830      	ldr	r0, [r6, #0]
		node_rx->hdr.handle = lll->handle;
   191fa:	80f3      	strh	r3, [r6, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   191fc:	4631      	mov	r1, r6
   191fe:	f7f8 f811 	bl	11224 <ull_rx_put>
	if (is_ull_rx) {
   19202:	e7e8      	b.n	191d6 <lll_conn_isr_rx+0xca>
	if (pdu_data_rx->nesn != lll->sn) {
   19204:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   19208:	7f32      	ldrb	r2, [r6, #28]
   1920a:	f003 0101 	and.w	r1, r3, #1
   1920e:	f3c2 0080 	ubfx	r0, r2, #2, #1
   19212:	4288      	cmp	r0, r1
   19214:	d069      	beq.n	192ea <lll_conn_isr_rx+0x1de>
		if (lll->role) {
   19216:	f994 201d 	ldrsb.w	r2, [r4, #29]
		lll->sn++;
   1921a:	f081 0101 	eor.w	r1, r1, #1
   1921e:	f361 0300 	bfi	r3, r1, #0, #1
		if (lll->role) {
   19222:	2a00      	cmp	r2, #0
		lll->sn++;
   19224:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		if (lll->role) {
   19228:	da05      	bge.n	19236 <lll_conn_isr_rx+0x12a>
			lll->slave.latency_enabled = 1;
   1922a:	f894 3020 	ldrb.w	r3, [r4, #32]
   1922e:	f043 0304 	orr.w	r3, r3, #4
   19232:	f884 3020 	strb.w	r3, [r4, #32]
		if (!lll->empty) {
   19236:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   1923a:	075a      	lsls	r2, r3, #29
   1923c:	f100 8091 	bmi.w	19362 <lll_conn_isr_rx+0x256>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   19240:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   19244:	aa01      	add	r2, sp, #4
   19246:	f7f3 ffb3 	bl	d1b0 <memq_peek>
		if (link) {
   1924a:	4605      	mov	r5, r0
   1924c:	2800      	cmp	r0, #0
   1924e:	f000 808f 	beq.w	19370 <lll_conn_isr_rx+0x264>
					       lll->packet_tx_head_offset);
   19252:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
			pdu_data_tx_len = pdu_data_tx->len;
   19256:	9b01      	ldr	r3, [sp, #4]
   19258:	4413      	add	r3, r2
   1925a:	7959      	ldrb	r1, [r3, #5]
			if (pdu_data_tx_len != 0U) {
   1925c:	b151      	cbz	r1, 19274 <lll_conn_isr_rx+0x168>
				if (lll->enc_tx) {
   1925e:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   19262:	06df      	lsls	r7, r3, #27
   19264:	d506      	bpl.n	19274 <lll_conn_isr_rx+0x168>
					lll->ccm_tx.counter++;
   19266:	e9d4 3024 	ldrd	r3, r0, [r4, #144]	; 0x90
   1926a:	3301      	adds	r3, #1
   1926c:	f140 0000 	adc.w	r0, r0, #0
   19270:	e9c4 3024 	strd	r3, r0, [r4, #144]	; 0x90
			if (offset < lll->packet_tx_head_len) {
   19274:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   19278:	440a      	add	r2, r1
   1927a:	b2d2      	uxtb	r2, r2
			if (offset < lll->packet_tx_head_len) {
   1927c:	429a      	cmp	r2, r3
   1927e:	d37b      	bcc.n	19378 <lll_conn_isr_rx+0x26c>
			} else if (offset == lll->packet_tx_head_len) {
   19280:	f000 8095 	beq.w	193ae <lll_conn_isr_rx+0x2a2>
				LL_ASSERT(0);
   19284:	4a62      	ldr	r2, [pc, #392]	; (19410 <lll_conn_isr_rx+0x304>)
   19286:	4963      	ldr	r1, [pc, #396]	; (19414 <lll_conn_isr_rx+0x308>)
   19288:	4863      	ldr	r0, [pc, #396]	; (19418 <lll_conn_isr_rx+0x30c>)
   1928a:	f44f 7340 	mov.w	r3, #768	; 0x300
   1928e:	f005 fb45 	bl	1e91c <printk>
   19292:	4040      	eors	r0, r0
   19294:	f380 8811 	msr	BASEPRI, r0
   19298:	f04f 0003 	mov.w	r0, #3
   1929c:	df02      	svc	2
	tx_release = NULL;
   1929e:	2500      	movs	r5, #0
   192a0:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   192a4:	7f32      	ldrb	r2, [r6, #28]
   192a6:	e021      	b.n	192ec <lll_conn_isr_rx+0x1e0>
		crc_expire--;
   192a8:	3f01      	subs	r7, #1
   192aa:	b2ff      	uxtb	r7, r7
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   192ac:	a901      	add	r1, sp, #4
   192ae:	4620      	mov	r0, r4
		crc_expire--;
   192b0:	701f      	strb	r7, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   192b2:	f7ff febb 	bl	1902c <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   192b6:	2f00      	cmp	r7, #0
   192b8:	f040 80ef 	bne.w	1949a <lll_conn_isr_rx+0x38e>
		radio_isr_set(isr_done, param);
   192bc:	4850      	ldr	r0, [pc, #320]	; (19400 <lll_conn_isr_rx+0x2f4>)
   192be:	4621      	mov	r1, r4
   192c0:	f000 fb34 	bl	1992c <radio_isr_set>
			radio_switch_complete_and_disable();
   192c4:	f000 fca4 	bl	19c10 <radio_switch_complete_and_disable>
   192c8:	e760      	b.n	1918c <lll_conn_isr_rx+0x80>
	LL_ASSERT(node_rx);
   192ca:	4a51      	ldr	r2, [pc, #324]	; (19410 <lll_conn_isr_rx+0x304>)
   192cc:	4953      	ldr	r1, [pc, #332]	; (1941c <lll_conn_isr_rx+0x310>)
   192ce:	4852      	ldr	r0, [pc, #328]	; (19418 <lll_conn_isr_rx+0x30c>)
   192d0:	23d1      	movs	r3, #209	; 0xd1
   192d2:	f005 fb23 	bl	1e91c <printk>
   192d6:	4040      	eors	r0, r0
   192d8:	f380 8811 	msr	BASEPRI, r0
   192dc:	f04f 0003 	mov.w	r0, #3
   192e0:	df02      	svc	2
	if (crc_ok) {
   192e2:	2d00      	cmp	r5, #0
   192e4:	f43f af38 	beq.w	19158 <lll_conn_isr_rx+0x4c>
   192e8:	e78c      	b.n	19204 <lll_conn_isr_rx+0xf8>
	tx_release = NULL;
   192ea:	2500      	movs	r5, #0
	if ((pdu_data_rx->sn == lll->nesn) &&
   192ec:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   192f0:	f3c3 0340 	ubfx	r3, r3, #1, #1
   192f4:	429a      	cmp	r2, r3
   192f6:	d046      	beq.n	19386 <lll_conn_isr_rx+0x27a>
	is_rx_enqueue = 0U;
   192f8:	2700      	movs	r7, #0
		crc_expire = 0U;
   192fa:	4a43      	ldr	r2, [pc, #268]	; (19408 <lll_conn_isr_rx+0x2fc>)
		crc_valid = 1U;
   192fc:	4b48      	ldr	r3, [pc, #288]	; (19420 <lll_conn_isr_rx+0x314>)
		crc_expire = 0U;
   192fe:	2100      	movs	r1, #0
   19300:	7011      	strb	r1, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   19302:	4620      	mov	r0, r4
		crc_valid = 1U;
   19304:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   19306:	a901      	add	r1, sp, #4
		crc_valid = 1U;
   19308:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1930a:	f7ff fe8f 	bl	1902c <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1930e:	7f33      	ldrb	r3, [r6, #28]
   19310:	06d9      	lsls	r1, r3, #27
   19312:	f53f af2c 	bmi.w	1916e <lll_conn_isr_rx+0x62>
			      (pdu_data_tx->md == 0) &&
   19316:	9b01      	ldr	r3, [sp, #4]
   19318:	781a      	ldrb	r2, [r3, #0]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1931a:	06d2      	lsls	r2, r2, #27
   1931c:	f53f af27 	bmi.w	1916e <lll_conn_isr_rx+0x62>
			      (pdu_data_tx->md == 0) &&
   19320:	785b      	ldrb	r3, [r3, #1]
   19322:	2b00      	cmp	r3, #0
   19324:	d0ca      	beq.n	192bc <lll_conn_isr_rx+0x1b0>
   19326:	e722      	b.n	1916e <lll_conn_isr_rx+0x62>
	LL_ASSERT(!radio_is_ready());
   19328:	4a39      	ldr	r2, [pc, #228]	; (19410 <lll_conn_isr_rx+0x304>)
   1932a:	493e      	ldr	r1, [pc, #248]	; (19424 <lll_conn_isr_rx+0x318>)
   1932c:	483a      	ldr	r0, [pc, #232]	; (19418 <lll_conn_isr_rx+0x30c>)
   1932e:	f240 133d 	movw	r3, #317	; 0x13d
   19332:	f005 faf3 	bl	1e91c <printk>
   19336:	4040      	eors	r0, r0
   19338:	f380 8811 	msr	BASEPRI, r0
   1933c:	f04f 0003 	mov.w	r0, #3
   19340:	df02      	svc	2
   19342:	e73a      	b.n	191ba <lll_conn_isr_rx+0xae>
		LL_ASSERT(lll->handle != 0xFFFF);
   19344:	4a32      	ldr	r2, [pc, #200]	; (19410 <lll_conn_isr_rx+0x304>)
   19346:	4938      	ldr	r1, [pc, #224]	; (19428 <lll_conn_isr_rx+0x31c>)
   19348:	4833      	ldr	r0, [pc, #204]	; (19418 <lll_conn_isr_rx+0x30c>)
   1934a:	f44f 73a6 	mov.w	r3, #332	; 0x14c
   1934e:	f005 fae5 	bl	1e91c <printk>
   19352:	4040      	eors	r0, r0
   19354:	f380 8811 	msr	BASEPRI, r0
   19358:	f04f 0003 	mov.w	r0, #3
   1935c:	df02      	svc	2
   1935e:	89a0      	ldrh	r0, [r4, #12]
   19360:	e735      	b.n	191ce <lll_conn_isr_rx+0xc2>
			lll->empty = 0;
   19362:	f36f 0382 	bfc	r3, #2, #1
   19366:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
			pdu_data_tx = (void *)radio_pkt_empty_get();
   1936a:	f000 fc2f 	bl	19bcc <radio_pkt_empty_get>
	tx_release = NULL;
   1936e:	2500      	movs	r5, #0
   19370:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   19374:	7f32      	ldrb	r2, [r6, #28]
   19376:	e7b9      	b.n	192ec <lll_conn_isr_rx+0x1e0>
				lll->packet_tx_head_offset = offset;
   19378:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
   1937c:	7f32      	ldrb	r2, [r6, #28]
   1937e:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
	tx_release = NULL;
   19382:	2500      	movs	r5, #0
   19384:	e7b2      	b.n	192ec <lll_conn_isr_rx+0x1e0>
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   19386:	2003      	movs	r0, #3
   19388:	f7f7 ff16 	bl	111b8 <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   1938c:	2800      	cmp	r0, #0
   1938e:	d0b3      	beq.n	192f8 <lll_conn_isr_rx+0x1ec>
		lll->nesn++;
   19390:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   19394:	f083 0302 	eor.w	r3, r3, #2
   19398:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		if (pdu_data_rx->len != 0) {
   1939c:	7f73      	ldrb	r3, [r6, #29]
   1939e:	2b00      	cmp	r3, #0
   193a0:	d0aa      	beq.n	192f8 <lll_conn_isr_rx+0x1ec>
			if (lll->enc_rx) {
   193a2:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   193a6:	0718      	lsls	r0, r3, #28
   193a8:	d412      	bmi.n	193d0 <lll_conn_isr_rx+0x2c4>
			*is_rx_enqueue = 1U;
   193aa:	2701      	movs	r7, #1
   193ac:	e7a5      	b.n	192fa <lll_conn_isr_rx+0x1ee>
				lll->packet_tx_head_len = 0;
   193ae:	2200      	movs	r2, #0
   193b0:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
				memq_dequeue(lll->memq_tx.tail,
   193b4:	f104 0148 	add.w	r1, r4, #72	; 0x48
   193b8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   193ba:	f7f3 ff01 	bl	d1c0 <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   193be:	9901      	ldr	r1, [sp, #4]
   193c0:	7f32      	ldrb	r2, [r6, #28]
   193c2:	680b      	ldr	r3, [r1, #0]
   193c4:	602b      	str	r3, [r5, #0]
				tx->next = link;
   193c6:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   193ca:	600d      	str	r5, [r1, #0]
				FORCE_MD_CNT_SET();
   193cc:	460d      	mov	r5, r1
   193ce:	e78d      	b.n	192ec <lll_conn_isr_rx+0x1e0>
				done = radio_ccm_is_done();
   193d0:	f000 fde8 	bl	19fa4 <radio_ccm_is_done>
				LL_ASSERT(done);
   193d4:	2800      	cmp	r0, #0
   193d6:	d052      	beq.n	1947e <lll_conn_isr_rx+0x372>
				bool mic_failure = !radio_ccm_mic_is_valid();
   193d8:	f000 fe06 	bl	19fe8 <radio_ccm_mic_is_valid>
				if (mic_failure &&
   193dc:	2800      	cmp	r0, #0
   193de:	d13e      	bne.n	1945e <lll_conn_isr_rx+0x352>
				    lll->ccm_rx.counter == 0 &&
   193e0:	f8d4 206f 	ldr.w	r2, [r4, #111]	; 0x6f
   193e4:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
				if (mic_failure &&
   193e8:	4313      	orrs	r3, r2
   193ea:	d104      	bne.n	193f6 <lll_conn_isr_rx+0x2ea>
				    (pdu_data_rx->ll_id ==
   193ec:	7f33      	ldrb	r3, [r6, #28]
				    lll->ccm_rx.counter == 0 &&
   193ee:	f003 0303 	and.w	r3, r3, #3
   193f2:	2b03      	cmp	r3, #3
   193f4:	d01c      	beq.n	19430 <lll_conn_isr_rx+0x324>
					mic_state = LLL_CONN_MIC_FAIL;
   193f6:	4b0d      	ldr	r3, [pc, #52]	; (1942c <lll_conn_isr_rx+0x320>)
   193f8:	2202      	movs	r2, #2
   193fa:	701a      	strb	r2, [r3, #0]
	is_rx_enqueue = 0U;
   193fc:	2700      	movs	r7, #0
   193fe:	e6dc      	b.n	191ba <lll_conn_isr_rx+0xae>
   19400:	00018d45 	.word	0x00018d45
   19404:	20002e7c 	.word	0x20002e7c
   19408:	200035d9 	.word	0x200035d9
   1940c:	00018f1d 	.word	0x00018f1d
   19410:	000254e4 	.word	0x000254e4
   19414:	00024974 	.word	0x00024974
   19418:	00024904 	.word	0x00024904
   1941c:	00025530 	.word	0x00025530
   19420:	200035da 	.word	0x200035da
   19424:	00025498 	.word	0x00025498
   19428:	00025540 	.word	0x00025540
   1942c:	200035db 	.word	0x200035db
						radio_pkt_scratch_get();
   19430:	f000 fbd0 	bl	19bd4 <radio_pkt_scratch_get>
					if (ctrl_pdu_len_check(
   19434:	7842      	ldrb	r2, [r0, #1]
   19436:	2a27      	cmp	r2, #39	; 0x27
						radio_pkt_scratch_get();
   19438:	4601      	mov	r1, r0
					if (ctrl_pdu_len_check(
   1943a:	d8dc      	bhi.n	193f6 <lll_conn_isr_rx+0x2ea>
   1943c:	3203      	adds	r2, #3
   1943e:	f106 001c 	add.w	r0, r6, #28
   19442:	f00a fbdc 	bl	23bfe <memcpy>
						lll->ccm_rx.counter--;
   19446:	f8d4 306f 	ldr.w	r3, [r4, #111]	; 0x6f
   1944a:	f8d4 2073 	ldr.w	r2, [r4, #115]	; 0x73
   1944e:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
   19452:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   19456:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
   1945a:	f8c4 2073 	str.w	r2, [r4, #115]	; 0x73
				lll->ccm_rx.counter++;
   1945e:	f8d4 306f 	ldr.w	r3, [r4, #111]	; 0x6f
   19462:	f8d4 2073 	ldr.w	r2, [r4, #115]	; 0x73
				mic_state = LLL_CONN_MIC_PASS;
   19466:	490e      	ldr	r1, [pc, #56]	; (194a0 <lll_conn_isr_rx+0x394>)
				lll->ccm_rx.counter++;
   19468:	3301      	adds	r3, #1
						lll->ccm_rx.counter--;
   1946a:	f104 006f 	add.w	r0, r4, #111	; 0x6f
				lll->ccm_rx.counter++;
   1946e:	f142 0200 	adc.w	r2, r2, #0
				mic_state = LLL_CONN_MIC_PASS;
   19472:	2701      	movs	r7, #1
				lll->ccm_rx.counter++;
   19474:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
				mic_state = LLL_CONN_MIC_PASS;
   19478:	700f      	strb	r7, [r1, #0]
				lll->ccm_rx.counter++;
   1947a:	6042      	str	r2, [r0, #4]
		if (err) {
   1947c:	e73d      	b.n	192fa <lll_conn_isr_rx+0x1ee>
				LL_ASSERT(done);
   1947e:	4a09      	ldr	r2, [pc, #36]	; (194a4 <lll_conn_isr_rx+0x398>)
   19480:	4909      	ldr	r1, [pc, #36]	; (194a8 <lll_conn_isr_rx+0x39c>)
   19482:	480a      	ldr	r0, [pc, #40]	; (194ac <lll_conn_isr_rx+0x3a0>)
   19484:	f240 331b 	movw	r3, #795	; 0x31b
   19488:	f005 fa48 	bl	1e91c <printk>
   1948c:	4040      	eors	r0, r0
   1948e:	f380 8811 	msr	BASEPRI, r0
   19492:	f04f 0003 	mov.w	r0, #3
   19496:	df02      	svc	2
   19498:	e79e      	b.n	193d8 <lll_conn_isr_rx+0x2cc>
	is_rx_enqueue = 0U;
   1949a:	462f      	mov	r7, r5
   1949c:	e667      	b.n	1916e <lll_conn_isr_rx+0x62>
   1949e:	bf00      	nop
   194a0:	200035db 	.word	0x200035db
   194a4:	000254e4 	.word	0x000254e4
   194a8:	00025538 	.word	0x00025538
   194ac:	00024904 	.word	0x00024904

000194b0 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   194b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t remainder;
	uint32_t hcto;

	DEBUG_RADIO_START_S(1);

	lll = p->param;
   194b4:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   194b6:	89a2      	ldrh	r2, [r4, #12]
   194b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   194bc:	429a      	cmp	r2, r3
{
   194be:	b082      	sub	sp, #8
	if (unlikely(lll->handle == 0xFFFF)) {
   194c0:	f000 80c0 	beq.w	19644 <prepare_cb+0x194>

		return 0;
	}

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   194c4:	4605      	mov	r5, r0
   194c6:	f7ff fca3 	bl	18e10 <lll_conn_prepare_reset>

	/* Deduce the latency */
	lll->latency_event = lll->latency_prepare - 1;
   194ca:	8a61      	ldrh	r1, [r4, #18]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   194cc:	8ae6      	ldrh	r6, [r4, #22]
	lll->event_counter = lll->event_counter + lll->latency_prepare;

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   194ce:	7f63      	ldrb	r3, [r4, #29]
	lll->latency_event = lll->latency_prepare - 1;
   194d0:	1e48      	subs	r0, r1, #1
	lll->event_counter = lll->event_counter + lll->latency_prepare;
   194d2:	4431      	add	r1, r6
	lll->latency_prepare = 0;
   194d4:	2200      	movs	r2, #0
	lll->latency_event = lll->latency_prepare - 1;
   194d6:	b280      	uxth	r0, r0
	lll->event_counter = lll->event_counter + lll->latency_prepare;
   194d8:	82e1      	strh	r1, [r4, #22]
	if (lll->data_chan_sel) {
   194da:	0659      	lsls	r1, r3, #25
	lll->latency_prepare = 0;
   194dc:	8262      	strh	r2, [r4, #18]
	lll->latency_event = lll->latency_prepare - 1;
   194de:	82a0      	strh	r0, [r4, #20]
	if (lll->data_chan_sel) {
   194e0:	f104 0218 	add.w	r2, r4, #24
   194e4:	f100 808d 	bmi.w	19602 <prepare_cb+0x152>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   194e8:	f003 063f 	and.w	r6, r3, #63	; 0x3f
   194ec:	7fa1      	ldrb	r1, [r4, #30]
   194ee:	9600      	str	r6, [sp, #0]
   194f0:	4613      	mov	r3, r2
   194f2:	4602      	mov	r2, r0
   194f4:	f104 001f 	add.w	r0, r4, #31
   194f8:	f7fd fade 	bl	16ab8 <lll_chan_sel_1>
   194fc:	4607      	mov	r7, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* current window widening */
	lll->slave.window_widening_event_us +=
   194fe:	e9d4 610b 	ldrd	r6, r1, [r4, #44]	; 0x2c
		lll->slave.window_widening_prepare_us;
	lll->slave.window_widening_prepare_us = 0;
	if (lll->slave.window_widening_event_us >
	    lll->slave.window_widening_max_us) {
   19502:	6aa2      	ldr	r2, [r4, #40]	; 0x28
		lll->slave.window_widening_event_us =
			lll->slave.window_widening_max_us;
	}

	/* current window size */
	lll->slave.window_size_event_us +=
   19504:	e9d4 030d 	ldrd	r0, r3, [r4, #52]	; 0x34
	lll->slave.window_widening_event_us +=
   19508:	4431      	add	r1, r6
		lll->slave.window_widening_event_us =
   1950a:	428a      	cmp	r2, r1
   1950c:	bf28      	it	cs
   1950e:	460a      	movcs	r2, r1
	lll->slave.window_size_event_us +=
   19510:	4403      	add	r3, r0
	lll->slave.window_widening_prepare_us = 0;
   19512:	2600      	movs	r6, #0
		lll->slave.window_widening_event_us =
   19514:	6322      	str	r2, [r4, #48]	; 0x30
	lll->slave.window_size_event_us +=
   19516:	63a3      	str	r3, [r4, #56]	; 0x38
	lll->slave.window_widening_prepare_us = 0;
   19518:	62e6      	str	r6, [r4, #44]	; 0x2c
		lll->slave.window_size_prepare_us;
	lll->slave.window_size_prepare_us = 0;
   1951a:	6366      	str	r6, [r4, #52]	; 0x34

	/* Start setting up Radio h/w */
	radio_reset();
   1951c:	f000 fa48 	bl	199b0 <radio_reset>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   19520:	4630      	mov	r0, r6
   19522:	f000 fa79 	bl	19a18 <radio_tx_power_set>
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */

	lll_conn_rx_pkt_set(lll);
   19526:	4620      	mov	r0, r4
   19528:	f7ff fcb2 	bl	18e90 <lll_conn_rx_pkt_set>

	radio_aa_set(lll->access_addr);
   1952c:	1d20      	adds	r0, r4, #4
   1952e:	f000 fa91 	bl	19a54 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
			    (((uint32_t)lll->crc_init[2] << 16) |
			     ((uint32_t)lll->crc_init[1] << 8) |
   19532:	7a63      	ldrb	r3, [r4, #9]
			    (((uint32_t)lll->crc_init[2] << 16) |
   19534:	7aa2      	ldrb	r2, [r4, #10]
			     ((uint32_t)lll->crc_init[0])));
   19536:	7a21      	ldrb	r1, [r4, #8]
			     ((uint32_t)lll->crc_init[1] << 8) |
   19538:	021b      	lsls	r3, r3, #8
			    (((uint32_t)lll->crc_init[2] << 16) |
   1953a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1953e:	4319      	orrs	r1, r3
   19540:	f240 605b 	movw	r0, #1627	; 0x65b
   19544:	f000 fb2c 	bl	19ba0 <radio_crc_configure>

	lll_chan_set(data_chan_use);
   19548:	4638      	mov	r0, r7
   1954a:	f7fe fcf7 	bl	17f3c <lll_chan_set>

	radio_isr_set(lll_conn_isr_rx, lll);
   1954e:	4621      	mov	r1, r4
   19550:	4841      	ldr	r0, [pc, #260]	; (19658 <prepare_cb+0x1a8>)
   19552:	f000 f9eb 	bl	1992c <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   19556:	2096      	movs	r0, #150	; 0x96
   19558:	f000 fbc8 	bl	19cec <radio_tmr_tifs_set>

#if defined(CONFIG_BT_CTLR_PHY)
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx,
				     lll->phy_flags);
   1955c:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx,
   19560:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   19564:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   19568:	4631      	mov	r1, r6
   1956a:	f002 0207 	and.w	r2, r2, #7
   1956e:	f000 0007 	and.w	r0, r0, #7
   19572:	f000 fb41 	bl	19bf8 <radio_switch_complete_and_tx>
#else /* !CONFIG_BT_CTLR_PHY */
	radio_switch_complete_and_tx(0, 0, 0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	ticks_at_event = p->ticks_at_expire;
	evt = HDR_LLL2EVT(lll);
   19576:	f8d4 8000 	ldr.w	r8, [r4]
	ticks_at_event = p->ticks_at_expire;
   1957a:	682f      	ldr	r7, [r5, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   1957c:	4640      	mov	r0, r8
   1957e:	f7fe fcbf 	bl	17f00 <lll_evt_offset_get>
   19582:	4407      	add	r7, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   19584:	686a      	ldr	r2, [r5, #4]
   19586:	f107 0109 	add.w	r1, r7, #9
   1958a:	4630      	mov	r0, r6
   1958c:	f000 fbba 	bl	19d04 <radio_tmr_start>
   19590:	4605      	mov	r5, r0

	radio_tmr_aa_capture();
   19592:	f000 fc5f 	bl	19e54 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   19596:	4630      	mov	r0, r6
   19598:	f000 fc76 	bl	19e88 <radio_tmr_aa_save>

	hcto = remainder_us +
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   1959c:	6b22      	ldr	r2, [r4, #48]	; 0x30
	hcto = remainder_us +
   1959e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		 lll->slave.window_widening_event_us) << 1) +
	       lll->slave.window_size_event_us;

#if defined(CONFIG_BT_CTLR_PHY)
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   195a0:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   195a4:	3230      	adds	r2, #48	; 0x30
	hcto = remainder_us +
   195a6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   195aa:	f000 0007 	and.w	r0, r0, #7
   195ae:	2101      	movs	r1, #1
	hcto = remainder_us +
   195b0:	441d      	add	r5, r3
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   195b2:	f000 faa5 	bl	19b00 <radio_rx_ready_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   195b6:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
   195ba:	f002 0207 	and.w	r2, r2, #7
   195be:	2a02      	cmp	r2, #2
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   195c0:	4405      	add	r5, r0
   195c2:	d03d      	beq.n	19640 <prepare_cb+0x190>
		return 40;
   195c4:	2a04      	cmp	r2, #4
   195c6:	bf0c      	ite	eq
   195c8:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   195cc:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   195ce:	4610      	mov	r0, r2
   195d0:	2101      	movs	r1, #1
	hcto += addr_us_get(lll->phy_rx);
   195d2:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   195d4:	f000 fa96 	bl	19b04 <radio_rx_chain_delay_get>
	hcto += radio_rx_ready_delay_get(0, 0);
	hcto += addr_us_get(0);
	hcto += radio_rx_chain_delay_get(0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	radio_tmr_hcto_configure(hcto);
   195d8:	4428      	add	r0, r5
   195da:	f000 fc2d 	bl	19e38 <radio_tmr_hcto_configure>
#endif /* CONFIG_BT_CTLR_CONN_RSSI */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(evt, (TICKER_ID_CONN_BASE + lll->handle),
   195de:	7b21      	ldrb	r1, [r4, #12]
   195e0:	3103      	adds	r1, #3
   195e2:	463a      	mov	r2, r7
   195e4:	4640      	mov	r0, r8
   195e6:	b2c9      	uxtb	r1, r1
   195e8:	f7fe fc98 	bl	17f1c <lll_preempt_calc>
   195ec:	b190      	cbz	r0, 19614 <prepare_cb+0x164>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   195ee:	481b      	ldr	r0, [pc, #108]	; (1965c <prepare_cb+0x1ac>)
   195f0:	4621      	mov	r1, r4
   195f2:	f000 f99b 	bl	1992c <radio_isr_set>
		radio_disable();
   195f6:	f000 fa91 	bl	19b1c <radio_disable>
	}

	DEBUG_RADIO_START_S(1);

	return 0;
}
   195fa:	2000      	movs	r0, #0
   195fc:	b002      	add	sp, #8
   195fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	event_counter = lll->event_counter + lll->latency_event;
   19602:	4430      	add	r0, r6
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   19604:	8be1      	ldrh	r1, [r4, #30]
   19606:	b280      	uxth	r0, r0
   19608:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1960c:	f7fd fa9c 	bl	16b48 <lll_chan_sel_2>
   19610:	4607      	mov	r7, r0
   19612:	e774      	b.n	194fe <prepare_cb+0x4e>
		ret = lll_prepare_done(lll);
   19614:	4620      	mov	r0, r4
   19616:	f7fe fc1b 	bl	17e50 <lll_prepare_done>
		LL_ASSERT(!ret);
   1961a:	2800      	cmp	r0, #0
   1961c:	d0ed      	beq.n	195fa <prepare_cb+0x14a>
   1961e:	4a10      	ldr	r2, [pc, #64]	; (19660 <prepare_cb+0x1b0>)
   19620:	4910      	ldr	r1, [pc, #64]	; (19664 <prepare_cb+0x1b4>)
   19622:	4811      	ldr	r0, [pc, #68]	; (19668 <prepare_cb+0x1b8>)
   19624:	f44f 7387 	mov.w	r3, #270	; 0x10e
   19628:	f005 f978 	bl	1e91c <printk>
   1962c:	4040      	eors	r0, r0
   1962e:	f380 8811 	msr	BASEPRI, r0
   19632:	f04f 0003 	mov.w	r0, #3
   19636:	df02      	svc	2
}
   19638:	2000      	movs	r0, #0
   1963a:	b002      	add	sp, #8
   1963c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (phy) {
   19640:	2318      	movs	r3, #24
   19642:	e7c4      	b.n	195ce <prepare_cb+0x11e>
		radio_isr_set(lll_isr_early_abort, lll);
   19644:	4809      	ldr	r0, [pc, #36]	; (1966c <prepare_cb+0x1bc>)
   19646:	4621      	mov	r1, r4
   19648:	f000 f970 	bl	1992c <radio_isr_set>
		radio_disable();
   1964c:	f000 fa66 	bl	19b1c <radio_disable>
}
   19650:	2000      	movs	r0, #0
   19652:	b002      	add	sp, #8
   19654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19658:	0001910d 	.word	0x0001910d
   1965c:	00018071 	.word	0x00018071
   19660:	0002556c 	.word	0x0002556c
   19664:	00024c98 	.word	0x00024c98
   19668:	00024904 	.word	0x00024904
   1966c:	00018085 	.word	0x00018085

00019670 <lll_slave_prepare>:
{
   19670:	b570      	push	{r4, r5, r6, lr}
   19672:	b082      	sub	sp, #8
   19674:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   19676:	f7fe fe11 	bl	1829c <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1967a:	2800      	cmp	r0, #0
   1967c:	db29      	blt.n	196d2 <lll_slave_prepare+0x62>
	lll = p->param;
   1967e:	68e1      	ldr	r1, [r4, #12]
	elapsed = p->lazy + 1;
   19680:	8923      	ldrh	r3, [r4, #8]
	    lll->slave.window_widening_periodic_us * elapsed;
   19682:	6a48      	ldr	r0, [r1, #36]	; 0x24
	lll->slave.window_widening_prepare_us +=
   19684:	6acd      	ldr	r5, [r1, #44]	; 0x2c
	lll->latency_prepare += elapsed;
   19686:	8a4e      	ldrh	r6, [r1, #18]
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   19688:	4a18      	ldr	r2, [pc, #96]	; (196ec <lll_slave_prepare+0x7c>)
	elapsed = p->lazy + 1;
   1968a:	3301      	adds	r3, #1
   1968c:	b29b      	uxth	r3, r3
	lll->slave.window_widening_prepare_us +=
   1968e:	fb00 5503 	mla	r5, r0, r3, r5
	    lll->slave.window_widening_max_us) {
   19692:	6a88      	ldr	r0, [r1, #40]	; 0x28
		lll->slave.window_widening_prepare_us =
   19694:	42a8      	cmp	r0, r5
   19696:	bf28      	it	cs
   19698:	4628      	movcs	r0, r5
	lll->latency_prepare += elapsed;
   1969a:	4433      	add	r3, r6
		lll->slave.window_widening_prepare_us =
   1969c:	62c8      	str	r0, [r1, #44]	; 0x2c
	lll->latency_prepare += elapsed;
   1969e:	824b      	strh	r3, [r1, #18]
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   196a0:	4813      	ldr	r0, [pc, #76]	; (196f0 <lll_slave_prepare+0x80>)
   196a2:	4914      	ldr	r1, [pc, #80]	; (196f4 <lll_slave_prepare+0x84>)
   196a4:	9400      	str	r4, [sp, #0]
   196a6:	2300      	movs	r3, #0
   196a8:	f7f7 fed8 	bl	1145c <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   196ac:	b108      	cbz	r0, 196b2 <lll_slave_prepare+0x42>
   196ae:	3077      	adds	r0, #119	; 0x77
   196b0:	d101      	bne.n	196b6 <lll_slave_prepare+0x46>
}
   196b2:	b002      	add	sp, #8
   196b4:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   196b6:	4a10      	ldr	r2, [pc, #64]	; (196f8 <lll_slave_prepare+0x88>)
   196b8:	4910      	ldr	r1, [pc, #64]	; (196fc <lll_slave_prepare+0x8c>)
   196ba:	4811      	ldr	r0, [pc, #68]	; (19700 <lll_slave_prepare+0x90>)
   196bc:	235f      	movs	r3, #95	; 0x5f
   196be:	f005 f92d 	bl	1e91c <printk>
   196c2:	4040      	eors	r0, r0
   196c4:	f380 8811 	msr	BASEPRI, r0
   196c8:	f04f 0003 	mov.w	r0, #3
   196cc:	df02      	svc	2
}
   196ce:	b002      	add	sp, #8
   196d0:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(err >= 0);
   196d2:	4a09      	ldr	r2, [pc, #36]	; (196f8 <lll_slave_prepare+0x88>)
   196d4:	490b      	ldr	r1, [pc, #44]	; (19704 <lll_slave_prepare+0x94>)
   196d6:	480a      	ldr	r0, [pc, #40]	; (19700 <lll_slave_prepare+0x90>)
   196d8:	2348      	movs	r3, #72	; 0x48
   196da:	f005 f91f 	bl	1e91c <printk>
   196de:	4040      	eors	r0, r0
   196e0:	f380 8811 	msr	BASEPRI, r0
   196e4:	f04f 0003 	mov.w	r0, #3
   196e8:	df02      	svc	2
   196ea:	e7c8      	b.n	1967e <lll_slave_prepare+0xe>
   196ec:	000194b1 	.word	0x000194b1
   196f0:	00017ef9 	.word	0x00017ef9
   196f4:	00018e39 	.word	0x00018e39
   196f8:	0002556c 	.word	0x0002556c
   196fc:	000254c0 	.word	0x000254c0
   19700:	00024904 	.word	0x00024904
   19704:	00025410 	.word	0x00025410

00019708 <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   19708:	4b05      	ldr	r3, [pc, #20]	; (19720 <cntr_init+0x18>)
    p_reg->EVTENSET = mask;
   1970a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1970e:	2100      	movs	r1, #0
   19710:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   19714:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   19718:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   1971c:	4770      	bx	lr
   1971e:	bf00      	nop
   19720:	4000b000 	.word	0x4000b000

00019724 <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   19724:	4b05      	ldr	r3, [pc, #20]	; (1973c <cntr_start+0x18>)
   19726:	7818      	ldrb	r0, [r3, #0]
   19728:	1c42      	adds	r2, r0, #1
   1972a:	701a      	strb	r2, [r3, #0]
   1972c:	b918      	cbnz	r0, 19736 <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1972e:	4b04      	ldr	r3, [pc, #16]	; (19740 <cntr_start+0x1c>)
   19730:	2201      	movs	r2, #1
   19732:	601a      	str	r2, [r3, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   19734:	4770      	bx	lr
		return 1;
   19736:	2001      	movs	r0, #1
}
   19738:	4770      	bx	lr
   1973a:	bf00      	nop
   1973c:	200035dc 	.word	0x200035dc
   19740:	4000b000 	.word	0x4000b000

00019744 <cntr_stop>:

uint32_t cntr_stop(void)
{
   19744:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   19746:	4c0d      	ldr	r4, [pc, #52]	; (1977c <cntr_stop+0x38>)
   19748:	7820      	ldrb	r0, [r4, #0]
   1974a:	b148      	cbz	r0, 19760 <cntr_stop+0x1c>

	if (--_refcount) {
   1974c:	3801      	subs	r0, #1
   1974e:	b2c0      	uxtb	r0, r0
   19750:	7020      	strb	r0, [r4, #0]
   19752:	b918      	cbnz	r0, 1975c <cntr_stop+0x18>
   19754:	4b0a      	ldr	r3, [pc, #40]	; (19780 <cntr_stop+0x3c>)
   19756:	2201      	movs	r2, #1
   19758:	601a      	str	r2, [r3, #0]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   1975a:	bd10      	pop	{r4, pc}
		return 1;
   1975c:	2001      	movs	r0, #1
}
   1975e:	bd10      	pop	{r4, pc}
	LL_ASSERT(_refcount);
   19760:	4a08      	ldr	r2, [pc, #32]	; (19784 <cntr_stop+0x40>)
   19762:	4909      	ldr	r1, [pc, #36]	; (19788 <cntr_stop+0x44>)
   19764:	4809      	ldr	r0, [pc, #36]	; (1978c <cntr_stop+0x48>)
   19766:	232d      	movs	r3, #45	; 0x2d
   19768:	f005 f8d8 	bl	1e91c <printk>
   1976c:	4040      	eors	r0, r0
   1976e:	f380 8811 	msr	BASEPRI, r0
   19772:	f04f 0003 	mov.w	r0, #3
   19776:	df02      	svc	2
   19778:	7820      	ldrb	r0, [r4, #0]
   1977a:	e7e7      	b.n	1974c <cntr_stop+0x8>
   1977c:	200035dc 	.word	0x200035dc
   19780:	4000b004 	.word	0x4000b004
   19784:	000255cc 	.word	0x000255cc
   19788:	00025618 	.word	0x00025618
   1978c:	00024904 	.word	0x00024904

00019790 <cntr_cnt_get>:
     return p_reg->COUNTER;
   19790:	4b01      	ldr	r3, [pc, #4]	; (19798 <cntr_cnt_get+0x8>)
   19792:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   19796:	4770      	bx	lr
   19798:	4000b000 	.word	0x4000b000

0001979c <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   1979c:	4b02      	ldr	r3, [pc, #8]	; (197a8 <cntr_cmp_set+0xc>)
   1979e:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   197a2:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   197a6:	4770      	bx	lr
   197a8:	4000b000 	.word	0x4000b000

000197ac <do_ecb>:
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   197ac:	b4f0      	push	{r4, r5, r6, r7}
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   197ae:	4b12      	ldr	r3, [pc, #72]	; (197f8 <do_ecb+0x4c>)

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   197b0:	4d12      	ldr	r5, [pc, #72]	; (197fc <do_ecb+0x50>)
   197b2:	2601      	movs	r6, #1
   197b4:	4634      	mov	r4, r6
		NRF_ECB->EVENTS_ENDECB = 0;
   197b6:	2100      	movs	r1, #0
   197b8:	602c      	str	r4, [r5, #0]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   197ba:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   197be:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   197c2:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   197c6:	601c      	str	r4, [r3, #0]
}
   197c8:	e005      	b.n	197d6 <do_ecb+0x2a>
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   197ca:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   197ce:	b932      	cbnz	r2, 197de <do_ecb+0x32>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   197d0:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   197d4:	b11a      	cbz	r2, 197de <do_ecb+0x32>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   197d6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   197da:	2a00      	cmp	r2, #0
   197dc:	d0f5      	beq.n	197ca <do_ecb+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   197de:	602e      	str	r6, [r5, #0]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   197e0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   197e4:	2a00      	cmp	r2, #0
   197e6:	d1e7      	bne.n	197b8 <do_ecb+0xc>
   197e8:	f8d3 7504 	ldr.w	r7, [r3, #1284]	; 0x504
   197ec:	2f00      	cmp	r7, #0
   197ee:	d0e3      	beq.n	197b8 <do_ecb+0xc>

	NRF_ECB->ECBDATAPTR = 0;
}
   197f0:	bcf0      	pop	{r4, r5, r6, r7}
	NRF_ECB->ECBDATAPTR = 0;
   197f2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   197f6:	4770      	bx	lr
   197f8:	4000e000 	.word	0x4000e000
   197fc:	4000e004 	.word	0x4000e004

00019800 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   19800:	b570      	push	{r4, r5, r6, lr}
   19802:	b08c      	sub	sp, #48	; 0x30
   19804:	460e      	mov	r6, r1
   19806:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   19808:	4601      	mov	r1, r0
   1980a:	2210      	movs	r2, #16
   1980c:	4668      	mov	r0, sp
{
   1980e:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   19810:	f7f3 fc9e 	bl	d150 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   19814:	2210      	movs	r2, #16
   19816:	eb0d 0002 	add.w	r0, sp, r2
   1981a:	4631      	mov	r1, r6
   1981c:	f7f3 fc98 	bl	d150 <mem_rcopy>

	do_ecb(&ecb);
   19820:	4668      	mov	r0, sp
   19822:	f7ff ffc3 	bl	197ac <do_ecb>

	if (cipher_text_le) {
   19826:	b125      	cbz	r5, 19832 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   19828:	4628      	mov	r0, r5
   1982a:	2210      	movs	r2, #16
   1982c:	a908      	add	r1, sp, #32
   1982e:	f7f3 fc8f 	bl	d150 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   19832:	b12c      	cbz	r4, 19840 <ecb_encrypt+0x40>
   19834:	ad08      	add	r5, sp, #32
   19836:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   19838:	6020      	str	r0, [r4, #0]
   1983a:	6061      	str	r1, [r4, #4]
   1983c:	60a2      	str	r2, [r4, #8]
   1983e:	60e3      	str	r3, [r4, #12]
		memcpy(cipher_text_be, &ecb.cipher_text[0],
			 sizeof(ecb.cipher_text));
	}
}
   19840:	b00c      	add	sp, #48	; 0x30
   19842:	bd70      	pop	{r4, r5, r6, pc}

00019844 <sw_switch.isra.0>:
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static uint8_t sw_tifs_toggle;

static void sw_switch(uint8_t dir, uint8_t phy_curr, uint8_t flags_curr, uint8_t phy_next,
   19844:	b4f0      	push	{r4, r5, r6, r7}
		      uint8_t flags_next)
{
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   19846:	4e2a      	ldr	r6, [pc, #168]	; (198f0 <sw_switch.isra.0+0xac>)
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   19848:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 19904 <sw_switch.isra.0+0xc0>
   1984c:	7834      	ldrb	r4, [r6, #0]
   1984e:	4b29      	ldr	r3, [pc, #164]	; (198f4 <sw_switch.isra.0+0xb0>)
   19850:	f8cc 3568 	str.w	r3, [ip, #1384]	; 0x568
   19854:	f104 030c 	add.w	r3, r4, #12
   19858:	b2db      	uxtb	r3, r3
   1985a:	00db      	lsls	r3, r3, #3
	 * (TX/RX).
	 */
	nrf_ppi_event_endpoint_setup(
		NRF_PPI,
		radio_enable_ppi,
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1985c:	4f26      	ldr	r7, [pc, #152]	; (198f8 <sw_switch.isra.0+0xb4>)
   1985e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   19862:	00e5      	lsls	r5, r4, #3
   19864:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   19868:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   1986c:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   19870:	eb07 0784 	add.w	r7, r7, r4, lsl #2
    p_reg->CH[(uint32_t) channel].TEP = tep;
   19874:	f8cc 556c 	str.w	r5, [ip, #1388]	; 0x56c
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   19878:	b225      	sxth	r5, r4

NRF_STATIC_INLINE void nrf_ppi_event_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                    nrf_ppi_channel_t channel,
                                                    uint32_t          eep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1987a:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	uint8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	uint32_t delay;

	hal_radio_sw_switch_setup(cc, ppi, sw_tifs_toggle);

	if (dir) {
   1987e:	b388      	cbz	r0, 198e4 <sw_switch.isra.0+0xa0>
	}
}

static inline uint32_t hal_radio_tx_ready_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   19880:	f24a 17b8 	movw	r7, #41400	; 0xa1b8
   19884:	f649 6c34 	movw	ip, #40500	; 0x9e34
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_NS;
   19888:	f242 40b8 	movw	r0, #9400	; 0x24b8
	switch (phy) {
   1988c:	2a02      	cmp	r2, #2
   1988e:	bf14      	ite	ne
   19890:	463a      	movne	r2, r7
   19892:	4662      	moveq	r2, ip
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_NS;
   19894:	f241 3788 	movw	r7, #5000	; 0x1388
   19898:	2902      	cmp	r1, #2
   1989a:	bf14      	ite	ne
   1989c:	4601      	movne	r1, r0
   1989e:	4639      	moveq	r1, r7
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
   198a0:	4816      	ldr	r0, [pc, #88]	; (198fc <sw_switch.isra.0+0xb8>)

NRF_STATIC_INLINE void nrf_ppi_task_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                   nrf_ppi_channel_t channel,
                                                   uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].TEP = tep;
   198a2:	4f17      	ldr	r7, [pc, #92]	; (19900 <sw_switch.isra.0+0xbc>)
   198a4:	f8c3 7514 	str.w	r7, [r3, #1300]	; 0x514
   198a8:	440a      	add	r2, r1
   198aa:	fba0 3202 	umull	r3, r2, r0, r2
   198ae:	0992      	lsrs	r2, r2, #6
		}
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
   198b0:	00ab      	lsls	r3, r5, #2
   198b2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   198b6:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1U;
   198ba:	3401      	adds	r4, #1
		SW_SWITCH_TIMER->CC[cc]) {
   198bc:	f8d3 1540 	ldr.w	r1, [r3, #1344]	; 0x540
	if (delay <
   198c0:	4291      	cmp	r1, r2
				 SW_SWITCH_TIMER->CC[cc] - delay);
   198c2:	bf8a      	itet	hi
   198c4:	f8d3 1540 	ldrhi.w	r1, [r3, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   198c8:	2201      	movls	r2, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   198ca:	1a8a      	subhi	r2, r1, r2
   198cc:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    p_reg->CHENSET = mask;
   198d0:	4b0c      	ldr	r3, [pc, #48]	; (19904 <sw_switch.isra.0+0xc0>)
	sw_tifs_toggle &= 1;
   198d2:	f004 0401 	and.w	r4, r4, #1
   198d6:	f44f 6210 	mov.w	r2, #2304	; 0x900
   198da:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   198de:	7034      	strb	r4, [r6, #0]
}
   198e0:	bcf0      	pop	{r4, r5, r6, r7}
   198e2:	4770      	bx	lr
    p_reg->CH[(uint32_t) channel].TEP = tep;
   198e4:	4a08      	ldr	r2, [pc, #32]	; (19908 <sw_switch.isra.0+0xc4>)
   198e6:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
   198ea:	2228      	movs	r2, #40	; 0x28
{
	nrf_ppi_task_endpoint_setup(
		NRF_PPI,
		ppi,
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_RX);
}
   198ec:	e7e0      	b.n	198b0 <sw_switch.isra.0+0x6c>
   198ee:	bf00      	nop
   198f0:	200035dd 	.word	0x200035dd
   198f4:	4000110c 	.word	0x4000110c
   198f8:	40009140 	.word	0x40009140
   198fc:	10624dd3 	.word	0x10624dd3
   19900:	40001000 	.word	0x40001000
   19904:	4001f000 	.word	0x4001f000
   19908:	40001004 	.word	0x40001004

0001990c <isr_radio>:
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   1990c:	4b04      	ldr	r3, [pc, #16]	; (19920 <isr_radio+0x14>)
   1990e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   19912:	b123      	cbz	r3, 1991e <isr_radio+0x12>
		isr_cb(isr_cb_param);
   19914:	4a03      	ldr	r2, [pc, #12]	; (19924 <isr_radio+0x18>)
   19916:	4b04      	ldr	r3, [pc, #16]	; (19928 <isr_radio+0x1c>)
   19918:	6810      	ldr	r0, [r2, #0]
   1991a:	681b      	ldr	r3, [r3, #0]
   1991c:	4718      	bx	r3
}
   1991e:	4770      	bx	lr
   19920:	40001000 	.word	0x40001000
   19924:	20002a08 	.word	0x20002a08
   19928:	20002a04 	.word	0x20002a04

0001992c <radio_isr_set>:
{
   1992c:	b538      	push	{r3, r4, r5, lr}
   1992e:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   19930:	2001      	movs	r0, #1
{
   19932:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   19934:	f7ec f846 	bl	59c4 <arch_irq_disable>
	isr_cb_param = param;
   19938:	4a08      	ldr	r2, [pc, #32]	; (1995c <radio_isr_set+0x30>)
	isr_cb = cb;
   1993a:	4809      	ldr	r0, [pc, #36]	; (19960 <radio_isr_set+0x34>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1993c:	4b09      	ldr	r3, [pc, #36]	; (19964 <radio_isr_set+0x38>)
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1993e:	490a      	ldr	r1, [pc, #40]	; (19968 <radio_isr_set+0x3c>)
	isr_cb_param = param;
   19940:	6015      	str	r5, [r2, #0]
   19942:	2510      	movs	r5, #16
   19944:	2202      	movs	r2, #2
	isr_cb = cb;
   19946:	6004      	str	r4, [r0, #0]
   19948:	f8c1 5304 	str.w	r5, [r1, #772]	; 0x304
	irq_enable(RADIO_IRQn);
   1994c:	2001      	movs	r0, #1
   1994e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   19952:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   19956:	f7ec b825 	b.w	59a4 <arch_irq_enable>
   1995a:	bf00      	nop
   1995c:	20002a08 	.word	0x20002a08
   19960:	20002a04 	.word	0x20002a04
   19964:	e000e100 	.word	0xe000e100
   19968:	40001000 	.word	0x40001000

0001996c <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   1996c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19970:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   19974:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   19976:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   1997a:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   1997e:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   19982:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   19986:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   1998a:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   1998e:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   19992:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   19996:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   1999a:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   1999e:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   199a2:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   199a6:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   199aa:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   199ae:	4770      	bx	lr

000199b0 <radio_reset>:
{
   199b0:	b510      	push	{r4, lr}
	irq_disable(RADIO_IRQn);
   199b2:	2001      	movs	r0, #1
   199b4:	f7ec f806 	bl	59c4 <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (uint32_t) radio_power;
   199b8:	4b0c      	ldr	r3, [pc, #48]	; (199ec <radio_reset+0x3c>)
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   199ba:	490d      	ldr	r1, [pc, #52]	; (199f0 <radio_reset+0x40>)
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   199bc:	4a0d      	ldr	r2, [pc, #52]	; (199f4 <radio_reset+0x44>)
   199be:	2400      	movs	r4, #0
   199c0:	2001      	movs	r0, #1
   199c2:	f8c3 4ffc 	str.w	r4, [r3, #4092]	; 0xffc
   199c6:	f8c3 0ffc 	str.w	r0, [r3, #4092]	; 0xffc
   199ca:	680b      	ldr	r3, [r1, #0]
					 0xfffffffe) | 0x01000000;
   199cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   199d0:	f023 0301 	bic.w	r3, r3, #1
   199d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   199d8:	f44f 5490 	mov.w	r4, #4608	; 0x1200
		BIT(HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) |
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(0));
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   199dc:	f44f 5010 	mov.w	r0, #9216	; 0x2400
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   199e0:	600b      	str	r3, [r1, #0]
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   199e2:	f8c2 4800 	str.w	r4, [r2, #2048]	; 0x800
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   199e6:	f8c2 0804 	str.w	r0, [r2, #2052]	; 0x804
}
   199ea:	bd10      	pop	{r4, pc}
   199ec:	40001000 	.word	0x40001000
   199f0:	40001774 	.word	0x40001774
   199f4:	4001f000 	.word	0x4001f000

000199f8 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   199f8:	4b06      	ldr	r3, [pc, #24]	; (19a14 <radio_phy_set+0x1c>)
	switch (phy) {
   199fa:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   199fc:	bf14      	ite	ne
   199fe:	2203      	movne	r2, #3
   19a00:	2204      	moveq	r2, #4
   19a02:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   19a06:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   19a0a:	f042 0201 	orr.w	r2, r2, #1
   19a0e:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   19a12:	4770      	bx	lr
   19a14:	40001000 	.word	0x40001000

00019a18 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   19a18:	4b01      	ldr	r3, [pc, #4]	; (19a20 <radio_tx_power_set+0x8>)
   19a1a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   19a1e:	4770      	bx	lr
   19a20:	40001000 	.word	0x40001000

00019a24 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   19a24:	4b01      	ldr	r3, [pc, #4]	; (19a2c <radio_freq_chan_set+0x8>)
   19a26:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   19a2a:	4770      	bx	lr
   19a2c:	40001000 	.word	0x40001000

00019a30 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   19a30:	4b07      	ldr	r3, [pc, #28]	; (19a50 <radio_whiten_iv_set+0x20>)
   19a32:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   19a36:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   19a3a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   19a3e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   19a42:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   19a46:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   19a4a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   19a4e:	4770      	bx	lr
   19a50:	40001000 	.word	0x40001000

00019a54 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   19a54:	4a0b      	ldr	r2, [pc, #44]	; (19a84 <radio_aa_set+0x30>)
   19a56:	2100      	movs	r1, #0
	NRF_RADIO->RXADDRESSES =
   19a58:	2301      	movs	r3, #1
{
   19a5a:	b410      	push	{r4}
	NRF_RADIO->TXADDRESS =
   19a5c:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   19a60:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   19a64:	78c3      	ldrb	r3, [r0, #3]
   19a66:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   19a6a:	7843      	ldrb	r3, [r0, #1]
   19a6c:	7884      	ldrb	r4, [r0, #2]
   19a6e:	7801      	ldrb	r1, [r0, #0]
   19a70:	041b      	lsls	r3, r3, #16
   19a72:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
   19a76:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
}
   19a7a:	bc10      	pop	{r4}
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   19a7c:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   19a80:	4770      	bx	lr
   19a82:	bf00      	nop
   19a84:	40001000 	.word	0x40001000

00019a88 <radio_pkt_configure>:
	switch (phy) {
   19a88:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   19a8c:	2b02      	cmp	r3, #2
{
   19a8e:	b410      	push	{r4}
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   19a90:	bf14      	ite	ne
   19a92:	2400      	movne	r4, #0
   19a94:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
	if (dc) {
   19a98:	07d3      	lsls	r3, r2, #31
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   19a9a:	f1c0 0308 	rsb	r3, r0, #8
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   19a9e:	bf48      	it	mi
   19aa0:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   19aa4:	041b      	lsls	r3, r3, #16
			   ((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   19aa6:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   19aaa:	4320      	orrs	r0, r4
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   19aac:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   19ab0:	4a0a      	ldr	r2, [pc, #40]	; (19adc <radio_pkt_configure+0x54>)
}
   19ab2:	bc10      	pop	{r4}
			    RADIO_PCNF0_S1LEN_Msk) |
   19ab4:	4303      	orrs	r3, r0
   19ab6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   19aba:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   19abe:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   19ac2:	4807      	ldr	r0, [pc, #28]	; (19ae0 <radio_pkt_configure+0x58>)
   19ac4:	4018      	ands	r0, r3
   19ac6:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((uint32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   19aca:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   19ace:	4319      	orrs	r1, r3
   19ad0:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   19ad4:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
   19ad8:	4770      	bx	lr
   19ada:	bf00      	nop
   19adc:	40001000 	.word	0x40001000
   19ae0:	fef80000 	.word	0xfef80000

00019ae4 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   19ae4:	4b01      	ldr	r3, [pc, #4]	; (19aec <radio_pkt_rx_set+0x8>)
   19ae6:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   19aea:	4770      	bx	lr
   19aec:	40001000 	.word	0x40001000

00019af0 <radio_pkt_tx_set>:
   19af0:	4b01      	ldr	r3, [pc, #4]	; (19af8 <radio_pkt_tx_set+0x8>)
   19af2:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   19af6:	4770      	bx	lr
   19af8:	40001000 	.word	0x40001000

00019afc <radio_tx_chain_delay_get>:
}
   19afc:	2001      	movs	r0, #1
   19afe:	4770      	bx	lr

00019b00 <radio_rx_ready_delay_get>:
}
   19b00:	2029      	movs	r0, #41	; 0x29
   19b02:	4770      	bx	lr

00019b04 <radio_rx_chain_delay_get>:
	switch (phy) {
   19b04:	2802      	cmp	r0, #2
}
   19b06:	bf14      	ite	ne
   19b08:	200a      	movne	r0, #10
   19b0a:	2005      	moveq	r0, #5
   19b0c:	4770      	bx	lr
   19b0e:	bf00      	nop

00019b10 <radio_tx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19b10:	4b01      	ldr	r3, [pc, #4]	; (19b18 <radio_tx_enable+0x8>)
   19b12:	2201      	movs	r2, #1
   19b14:	601a      	str	r2, [r3, #0]
}
   19b16:	4770      	bx	lr
   19b18:	40001000 	.word	0x40001000

00019b1c <radio_disable>:
{
   19b1c:	b430      	push	{r4, r5}
    p_reg->CHENCLR = mask;
   19b1e:	4a08      	ldr	r2, [pc, #32]	; (19b40 <radio_disable+0x24>)
	NRF_RADIO->SHORTS = 0;
   19b20:	4808      	ldr	r0, [pc, #32]	; (19b44 <radio_disable+0x28>)
   19b22:	4909      	ldr	r1, [pc, #36]	; (19b48 <radio_disable+0x2c>)
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   19b24:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   19b26:	f44f 6510 	mov.w	r5, #2304	; 0x900
   19b2a:	2400      	movs	r4, #0
   19b2c:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   19b30:	6053      	str	r3, [r2, #4]
   19b32:	60d3      	str	r3, [r2, #12]
   19b34:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
   19b38:	bc30      	pop	{r4, r5}
   19b3a:	600b      	str	r3, [r1, #0]
   19b3c:	4770      	bx	lr
   19b3e:	bf00      	nop
   19b40:	4001f000 	.word	0x4001f000
   19b44:	40001000 	.word	0x40001000
   19b48:	40001010 	.word	0x40001010

00019b4c <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   19b4c:	4b04      	ldr	r3, [pc, #16]	; (19b60 <radio_status_reset+0x14>)
   19b4e:	2200      	movs	r2, #0
   19b50:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   19b54:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   19b58:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   19b5c:	4770      	bx	lr
   19b5e:	bf00      	nop
   19b60:	40001000 	.word	0x40001000

00019b64 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   19b64:	4b03      	ldr	r3, [pc, #12]	; (19b74 <radio_is_ready+0x10>)
   19b66:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   19b6a:	3800      	subs	r0, #0
   19b6c:	bf18      	it	ne
   19b6e:	2001      	movne	r0, #1
   19b70:	4770      	bx	lr
   19b72:	bf00      	nop
   19b74:	40001000 	.word	0x40001000

00019b78 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   19b78:	4b03      	ldr	r3, [pc, #12]	; (19b88 <radio_is_done+0x10>)
   19b7a:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   19b7e:	3800      	subs	r0, #0
   19b80:	bf18      	it	ne
   19b82:	2001      	movne	r0, #1
   19b84:	4770      	bx	lr
   19b86:	bf00      	nop
   19b88:	40001000 	.word	0x40001000

00019b8c <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
   19b8c:	4b03      	ldr	r3, [pc, #12]	; (19b9c <radio_is_idle+0x10>)
   19b8e:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   19b92:	fab0 f080 	clz	r0, r0
   19b96:	0940      	lsrs	r0, r0, #5
   19b98:	4770      	bx	lr
   19b9a:	bf00      	nop
   19b9c:	40001000 	.word	0x40001000

00019ba0 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
   19ba0:	4b04      	ldr	r3, [pc, #16]	; (19bb4 <radio_crc_configure+0x14>)
   19ba2:	f240 1203 	movw	r2, #259	; 0x103
   19ba6:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
   19baa:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   19bae:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   19bb2:	4770      	bx	lr
   19bb4:	40001000 	.word	0x40001000

00019bb8 <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
   19bb8:	4b03      	ldr	r3, [pc, #12]	; (19bc8 <radio_crc_is_valid+0x10>)
   19bba:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   19bbe:	3800      	subs	r0, #0
   19bc0:	bf18      	it	ne
   19bc2:	2001      	movne	r0, #1
   19bc4:	4770      	bx	lr
   19bc6:	bf00      	nop
   19bc8:	40001000 	.word	0x40001000

00019bcc <radio_pkt_empty_get>:
}
   19bcc:	4800      	ldr	r0, [pc, #0]	; (19bd0 <radio_pkt_empty_get+0x4>)
   19bce:	4770      	bx	lr
   19bd0:	200028fc 	.word	0x200028fc

00019bd4 <radio_pkt_scratch_get>:
}
   19bd4:	4800      	ldr	r0, [pc, #0]	; (19bd8 <radio_pkt_scratch_get+0x4>)
   19bd6:	4770      	bx	lr
   19bd8:	20002900 	.word	0x20002900

00019bdc <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   19bdc:	4b05      	ldr	r3, [pc, #20]	; (19bf4 <radio_switch_complete_and_rx+0x18>)
{
   19bde:	b410      	push	{r4}
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
   19be0:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   19be2:	2403      	movs	r4, #3
{
   19be4:	4602      	mov	r2, r0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   19be6:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
   19bea:	4608      	mov	r0, r1
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   19bec:	bc10      	pop	{r4}
	sw_switch(0, 0, 0, phy_rx, 0);
   19bee:	f7ff be29 	b.w	19844 <sw_switch.isra.0>
   19bf2:	bf00      	nop
   19bf4:	40001000 	.word	0x40001000

00019bf8 <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   19bf8:	4b04      	ldr	r3, [pc, #16]	; (19c0c <radio_switch_complete_and_tx+0x14>)
{
   19bfa:	b410      	push	{r4}
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   19bfc:	2403      	movs	r4, #3
{
   19bfe:	4601      	mov	r1, r0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   19c00:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   19c04:	2001      	movs	r0, #1
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   19c06:	bc10      	pop	{r4}
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   19c08:	f7ff be1c 	b.w	19844 <sw_switch.isra.0>
   19c0c:	40001000 	.word	0x40001000

00019c10 <radio_switch_complete_and_disable>:

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   19c10:	4904      	ldr	r1, [pc, #16]	; (19c24 <radio_switch_complete_and_disable+0x14>)
    p_reg->CHENCLR = mask;
   19c12:	4b05      	ldr	r3, [pc, #20]	; (19c28 <radio_switch_complete_and_disable+0x18>)
   19c14:	2003      	movs	r0, #3
   19c16:	f44f 6210 	mov.w	r2, #2304	; 0x900
   19c1a:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   19c1e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   19c22:	4770      	bx	lr
   19c24:	40001000 	.word	0x40001000
   19c28:	4001f000 	.word	0x4001f000

00019c2c <radio_rssi_status_reset>:
	return NRF_RADIO->RSSISAMPLE;
}

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   19c2c:	4b02      	ldr	r3, [pc, #8]	; (19c38 <radio_rssi_status_reset+0xc>)
   19c2e:	2200      	movs	r2, #0
   19c30:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   19c34:	4770      	bx	lr
   19c36:	bf00      	nop
   19c38:	40001000 	.word	0x40001000

00019c3c <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   19c3c:	4b03      	ldr	r3, [pc, #12]	; (19c4c <radio_rssi_is_ready+0x10>)
   19c3e:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   19c42:	3800      	subs	r0, #0
   19c44:	bf18      	it	ne
   19c46:	2001      	movne	r0, #1
   19c48:	4770      	bx	lr
   19c4a:	bf00      	nop
   19c4c:	40001000 	.word	0x40001000

00019c50 <radio_filter_configure>:

void radio_filter_configure(uint8_t bitmask_enable, uint8_t bitmask_addr_type,
			    uint8_t *bdaddr)
{
   19c50:	b430      	push	{r4, r5}
   19c52:	2400      	movs	r4, #0
	uint8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   19c54:	00a3      	lsls	r3, r4, #2
   19c56:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   19c5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
   19c5e:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   19c60:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
   19c64:	3401      	adds	r4, #1
   19c66:	8895      	ldrh	r5, [r2, #4]
   19c68:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   19c6c:	2c08      	cmp	r4, #8
		bdaddr += 6;
   19c6e:	f102 0206 	add.w	r2, r2, #6
	for (index = 0U; index < 8; index++) {
   19c72:	d1ef      	bne.n	19c54 <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   19c74:	4b03      	ldr	r3, [pc, #12]	; (19c84 <radio_filter_configure+0x34>)
   19c76:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
}
   19c7a:	bc30      	pop	{r4, r5}
	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   19c7c:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   19c80:	4770      	bx	lr
   19c82:	bf00      	nop
   19c84:	40001000 	.word	0x40001000

00019c88 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   19c88:	4a03      	ldr	r2, [pc, #12]	; (19c98 <radio_filter_disable+0x10>)
   19c8a:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   19c8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   19c92:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   19c96:	4770      	bx	lr
   19c98:	40001000 	.word	0x40001000

00019c9c <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   19c9c:	4b02      	ldr	r3, [pc, #8]	; (19ca8 <radio_filter_status_reset+0xc>)
   19c9e:	2200      	movs	r2, #0
   19ca0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   19ca4:	4770      	bx	lr
   19ca6:	bf00      	nop
   19ca8:	40001000 	.word	0x40001000

00019cac <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   19cac:	4b03      	ldr	r3, [pc, #12]	; (19cbc <radio_filter_has_match+0x10>)
   19cae:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   19cb2:	3800      	subs	r0, #0
   19cb4:	bf18      	it	ne
   19cb6:	2001      	movne	r0, #1
   19cb8:	4770      	bx	lr
   19cba:	bf00      	nop
   19cbc:	40001000 	.word	0x40001000

00019cc0 <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   19cc0:	4b01      	ldr	r3, [pc, #4]	; (19cc8 <radio_filter_match_get+0x8>)
   19cc2:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   19cc6:	4770      	bx	lr
   19cc8:	40001000 	.word	0x40001000

00019ccc <radio_tmr_status_reset>:
    p_reg->EVTENCLR = mask;
   19ccc:	4904      	ldr	r1, [pc, #16]	; (19ce0 <radio_tmr_status_reset+0x14>)
   19cce:	4b05      	ldr	r3, [pc, #20]	; (19ce4 <radio_tmr_status_reset+0x18>)
   19cd0:	4a05      	ldr	r2, [pc, #20]	; (19ce8 <radio_tmr_status_reset+0x1c>)
   19cd2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   19cd6:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   19cda:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			BIT(HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI) |
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   19cde:	4770      	bx	lr
   19ce0:	4000b000 	.word	0x4000b000
   19ce4:	4001f000 	.word	0x4001f000
   19ce8:	0e7000c0 	.word	0x0e7000c0

00019cec <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   19cec:	4b03      	ldr	r3, [pc, #12]	; (19cfc <radio_tmr_tifs_set+0x10>)
   19cee:	4a04      	ldr	r2, [pc, #16]	; (19d00 <radio_tmr_tifs_set+0x14>)
   19cf0:	781b      	ldrb	r3, [r3, #0]
   19cf2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   19cf6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   19cfa:	4770      	bx	lr
   19cfc:	200035dd 	.word	0x200035dd
   19d00:	40009000 	.word	0x40009000

00019d04 <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   19d04:	b4f0      	push	{r4, r5, r6, r7}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   19d06:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   19d0a:	4d31      	ldr	r5, [pc, #196]	; (19dd0 <radio_tmr_start+0xcc>)
   19d0c:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   19d10:	42ab      	cmp	r3, r5
{
   19d12:	4604      	mov	r4, r0
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   19d14:	d906      	bls.n	19d24 <radio_tmr_start+0x20>
		ticks_start--;
		remainder += 30517578UL;
   19d16:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
   19d1a:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
   19d1e:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
		ticks_start--;
   19d22:	3901      	subs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19d24:	4d2b      	ldr	r5, [pc, #172]	; (19dd4 <radio_tmr_start+0xd0>)
	}
	remainder /= 1000000UL;

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   19d26:	4b2c      	ldr	r3, [pc, #176]	; (19dd8 <radio_tmr_start+0xd4>)
	remainder /= 1000000UL;
   19d28:	482c      	ldr	r0, [pc, #176]	; (19ddc <radio_tmr_start+0xd8>)
   19d2a:	2601      	movs	r6, #1
   19d2c:	602e      	str	r6, [r5, #0]
	EVENT_TIMER->MODE = 0;
   19d2e:	2600      	movs	r6, #0
   19d30:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
    p_reg->CC[ch] = cc_val;
   19d34:	4d2a      	ldr	r5, [pc, #168]	; (19de0 <radio_tmr_start+0xdc>)
	remainder /= 1000000UL;
   19d36:	fba0 0202 	umull	r0, r2, r0, r2
	EVENT_TIMER->PRESCALER = 4;
   19d3a:	2604      	movs	r6, #4
   19d3c:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
	remainder /= 1000000UL;
   19d40:	0c90      	lsrs	r0, r2, #18
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   19d42:	2602      	movs	r6, #2
   19d44:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
    p_reg->CH[(uint32_t) channel].EEP = eep;
   19d48:	4a26      	ldr	r2, [pc, #152]	; (19de4 <radio_tmr_start+0xe0>)
    p_reg->CC[cc_channel] = cc_value;
   19d4a:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   19d4e:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   19d52:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   19d56:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344
   19d5a:	4923      	ldr	r1, [pc, #140]	; (19de8 <radio_tmr_start+0xe4>)
   19d5c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    p_reg->CHENSET = mask;
   19d60:	2140      	movs	r1, #64	; 0x40
    p_reg->CH[(uint32_t) channel].TEP = tep;
   19d62:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    p_reg->CHENSET = mask;
   19d66:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
	nrf_ppi_channels_disable(
   19d6a:	b354      	cbz	r4, 19dc2 <radio_tmr_start+0xbe>
    p_reg->CHENCLR = mask;
   19d6c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   19d70:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_ppi_channels_enable(
   19d74:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
    p_reg->CHENSET = mask;
   19d78:	4b1a      	ldr	r3, [pc, #104]	; (19de4 <radio_tmr_start+0xe0>)
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   19d7a:	4a1c      	ldr	r2, [pc, #112]	; (19dec <radio_tmr_start+0xe8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19d7c:	491c      	ldr	r1, [pc, #112]	; (19df0 <radio_tmr_start+0xec>)
   19d7e:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
   19d82:	2500      	movs	r5, #0
   19d84:	2401      	movs	r4, #1
	SW_SWITCH_TIMER->PRESCALER = 4;
   19d86:	2604      	movs	r6, #4
   19d88:	600c      	str	r4, [r1, #0]
	SW_SWITCH_TIMER->MODE = 0;
   19d8a:	f8c2 5504 	str.w	r5, [r2, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   19d8e:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   19d92:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508
   19d96:	6014      	str	r4, [r2, #0]
    p_reg->CH[(uint32_t) channel].TEP = tep;
   19d98:	f502 32b0 	add.w	r2, r2, #90112	; 0x16000
    p_reg->CH[(uint32_t) channel].EEP = eep;
   19d9c:	4f15      	ldr	r7, [pc, #84]	; (19df4 <radio_tmr_start+0xf0>)
   19d9e:	4e16      	ldr	r6, [pc, #88]	; (19df8 <radio_tmr_start+0xf4>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   19da0:	4d16      	ldr	r5, [pc, #88]	; (19dfc <radio_tmr_start+0xf8>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   19da2:	4c17      	ldr	r4, [pc, #92]	; (19e00 <radio_tmr_start+0xfc>)
   19da4:	f8c3 7550 	str.w	r7, [r3, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
   19da8:	320c      	adds	r2, #12
   19daa:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
   19dae:	f8c3 6558 	str.w	r6, [r3, #1368]	; 0x558
    p_reg->CH[(uint32_t) channel].TEP = tep;
   19db2:	f8c3 555c 	str.w	r5, [r3, #1372]	; 0x55c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   19db6:	f8c3 4560 	str.w	r4, [r3, #1376]	; 0x560
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   19dba:	bcf0      	pop	{r4, r5, r6, r7}
    p_reg->CH[(uint32_t) channel].TEP = tep;
   19dbc:	f8c3 2564 	str.w	r2, [r3, #1380]	; 0x564
   19dc0:	4770      	bx	lr
    p_reg->CHENCLR = mask;
   19dc2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   19dc6:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   19dca:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
   19dce:	e7d3      	b.n	19d78 <radio_tmr_start+0x74>
   19dd0:	7ff0bdbf 	.word	0x7ff0bdbf
   19dd4:	4000800c 	.word	0x4000800c
   19dd8:	40008000 	.word	0x40008000
   19ddc:	431bde83 	.word	0x431bde83
   19de0:	4000b000 	.word	0x4000b000
   19de4:	4001f000 	.word	0x4001f000
   19de8:	4000b148 	.word	0x4000b148
   19dec:	40009000 	.word	0x40009000
   19df0:	4000900c 	.word	0x4000900c
   19df4:	4000110c 	.word	0x4000110c
   19df8:	40009140 	.word	0x40009140
   19dfc:	4001f004 	.word	0x4001f004
   19e00:	40009144 	.word	0x40009144

00019e04 <radio_tmr_start_get>:
    return p_reg->CC[ch];
   19e04:	4b01      	ldr	r3, [pc, #4]	; (19e0c <radio_tmr_start_get+0x8>)
   19e06:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   19e0a:	4770      	bx	lr
   19e0c:	4000b000 	.word	0x4000b000

00019e10 <radio_tmr_stop>:

void radio_tmr_stop(void)
{
   19e10:	b410      	push	{r4}
   19e12:	4805      	ldr	r0, [pc, #20]	; (19e28 <radio_tmr_stop+0x18>)
   19e14:	4c05      	ldr	r4, [pc, #20]	; (19e2c <radio_tmr_stop+0x1c>)
   19e16:	4906      	ldr	r1, [pc, #24]	; (19e30 <radio_tmr_stop+0x20>)
   19e18:	4a06      	ldr	r2, [pc, #24]	; (19e34 <radio_tmr_stop+0x24>)
   19e1a:	2301      	movs	r3, #1
   19e1c:	6023      	str	r3, [r4, #0]
   19e1e:	6003      	str	r3, [r0, #0]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   19e20:	bc10      	pop	{r4}
   19e22:	600b      	str	r3, [r1, #0]
   19e24:	6013      	str	r3, [r2, #0]
   19e26:	4770      	bx	lr
   19e28:	40008010 	.word	0x40008010
   19e2c:	40008004 	.word	0x40008004
   19e30:	40009004 	.word	0x40009004
   19e34:	40009010 	.word	0x40009010

00019e38 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   19e38:	4904      	ldr	r1, [pc, #16]	; (19e4c <radio_tmr_hcto_configure+0x14>)
    p_reg->CHENSET = mask;
   19e3a:	4b05      	ldr	r3, [pc, #20]	; (19e50 <radio_tmr_hcto_configure+0x18>)
   19e3c:	f8c1 0544 	str.w	r0, [r1, #1348]	; 0x544
   19e40:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   19e44:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   19e48:	4770      	bx	lr
   19e4a:	bf00      	nop
   19e4c:	40008000 	.word	0x40008000
   19e50:	4001f000 	.word	0x4001f000

00019e54 <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   19e54:	4b05      	ldr	r3, [pc, #20]	; (19e6c <radio_tmr_aa_capture+0x18>)
   19e56:	4806      	ldr	r0, [pc, #24]	; (19e70 <radio_tmr_aa_capture+0x1c>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   19e58:	4906      	ldr	r1, [pc, #24]	; (19e74 <radio_tmr_aa_capture+0x20>)
    p_reg->CHENSET = mask;
   19e5a:	4a07      	ldr	r2, [pc, #28]	; (19e78 <radio_tmr_aa_capture+0x24>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   19e5c:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    p_reg->CH[(uint32_t) channel].TEP = tep;
   19e60:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
    p_reg->CHENSET = mask;
   19e64:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   19e68:	4770      	bx	lr
   19e6a:	bf00      	nop
   19e6c:	4001f000 	.word	0x4001f000
   19e70:	40001100 	.word	0x40001100
   19e74:	40008040 	.word	0x40008040
   19e78:	04000080 	.word	0x04000080

00019e7c <radio_tmr_aa_get>:

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   19e7c:	4b01      	ldr	r3, [pc, #4]	; (19e84 <radio_tmr_aa_get+0x8>)
   19e7e:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   19e82:	4770      	bx	lr
   19e84:	40008000 	.word	0x40008000

00019e88 <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   19e88:	4b01      	ldr	r3, [pc, #4]	; (19e90 <radio_tmr_aa_save+0x8>)
   19e8a:	6018      	str	r0, [r3, #0]
}
   19e8c:	4770      	bx	lr
   19e8e:	bf00      	nop
   19e90:	20002a0c 	.word	0x20002a0c

00019e94 <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
   19e94:	4b01      	ldr	r3, [pc, #4]	; (19e9c <radio_tmr_aa_restore+0x8>)
}
   19e96:	6818      	ldr	r0, [r3, #0]
   19e98:	4770      	bx	lr
   19e9a:	bf00      	nop
   19e9c:	20002a0c 	.word	0x20002a0c

00019ea0 <radio_tmr_ready_get>:

uint32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   19ea0:	4b01      	ldr	r3, [pc, #4]	; (19ea8 <radio_tmr_ready_get+0x8>)
   19ea2:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   19ea6:	4770      	bx	lr
   19ea8:	40008000 	.word	0x40008000

00019eac <radio_tmr_end_capture>:
   19eac:	4b02      	ldr	r3, [pc, #8]	; (19eb8 <radio_tmr_end_capture+0xc>)
   19eae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   19eb2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

void radio_tmr_end_capture(void)
{
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
}
   19eb6:	4770      	bx	lr
   19eb8:	4001f000 	.word	0x4001f000

00019ebc <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   19ebc:	4b01      	ldr	r3, [pc, #4]	; (19ec4 <radio_tmr_end_get+0x8>)
   19ebe:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   19ec2:	4770      	bx	lr
   19ec4:	40008000 	.word	0x40008000

00019ec8 <radio_tmr_tifs_base_get>:
   19ec8:	4b01      	ldr	r3, [pc, #4]	; (19ed0 <radio_tmr_tifs_base_get+0x8>)
   19eca:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   19ece:	4770      	bx	lr
   19ed0:	40008000 	.word	0x40008000

00019ed4 <radio_ccm_rx_pkt_set>:
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN || CONFIG_BT_CTLR_GPIO_LNA_PIN */

static uint8_t MALIGN(4) _ccm_scratch[(HAL_RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, uint8_t phy, void *pkt)
{
   19ed4:	b4f0      	push	{r4, r5, r6, r7}
			 CCM_MODE_DATARATE_Pos) &
			CCM_MODE_DATARATE_Msk;
		break;

	case PHY_2M:
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   19ed6:	f8df c074 	ldr.w	ip, [pc, #116]	; 19f4c <radio_ccm_rx_pkt_set+0x78>
   19eda:	4d17      	ldr	r5, [pc, #92]	; (19f38 <radio_ccm_rx_pkt_set+0x64>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   19edc:	4b17      	ldr	r3, [pc, #92]	; (19f3c <radio_ccm_rx_pkt_set+0x68>)
	}

#if !defined(CONFIG_SOC_COMPATIBLE_NRF52832) && \
	(!defined(CONFIG_BT_CTLR_DATA_LENGTH_MAX) || \
	 (CONFIG_BT_CTLR_DATA_LENGTH_MAX < ((HAL_RADIO_PDU_LEN_MAX) - 4)))
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   19ede:	4f18      	ldr	r7, [pc, #96]	; (19f40 <radio_ccm_rx_pkt_set+0x6c>)
#endif
#endif /* !CONFIG_SOC_SERIES_NRF51X */

	NRF_CCM->MODE = mode;
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   19ee0:	4e18      	ldr	r6, [pc, #96]	; (19f44 <radio_ccm_rx_pkt_set+0x70>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   19ee2:	2400      	movs	r4, #0
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   19ee4:	2902      	cmp	r1, #2
   19ee6:	bf08      	it	eq
   19ee8:	4665      	moveq	r5, ip
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   19eea:	2102      	movs	r1, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   19eec:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   19ef0:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   19ef4:	f8d7 1518 	ldr.w	r1, [r7, #1304]	; 0x518
   19ef8:	f507 37f0 	add.w	r7, r7, #122880	; 0x1e000
   19efc:	b2c9      	uxtb	r1, r1
	NRF_CCM->MAXPACKETSIZE = max_len;
   19efe:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
	NRF_CCM->MODE = mode;
   19f02:	f8c3 5504 	str.w	r5, [r3, #1284]	; 0x504
   19f06:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   19f0a:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->OUTPTR = (uint32_t)pkt;
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   19f0e:	4d0e      	ldr	r5, [pc, #56]	; (19f48 <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   19f10:	f8c3 650c 	str.w	r6, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (uint32_t)pkt;
   19f14:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                            nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19f18:	2201      	movs	r2, #1
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   19f1a:	f8c3 5514 	str.w	r5, [r3, #1300]	; 0x514
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_CRYPT_PPI));

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   19f1e:	4630      	mov	r0, r6
	NRF_CCM->SHORTS = 0;
   19f20:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   19f24:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   19f28:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   19f2c:	f8c7 1504 	str.w	r1, [r7, #1284]	; 0x504
}
   19f30:	bcf0      	pop	{r4, r5, r6, r7}
   19f32:	601a      	str	r2, [r3, #0]
   19f34:	4770      	bx	lr
   19f36:	bf00      	nop
   19f38:	01000001 	.word	0x01000001
   19f3c:	4000f000 	.word	0x4000f000
   19f40:	40001000 	.word	0x40001000
   19f44:	20002900 	.word	0x20002900
   19f48:	200027f0 	.word	0x200027f0
   19f4c:	01010001 	.word	0x01010001

00019f50 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
   19f50:	b470      	push	{r4, r5, r6}
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   19f52:	4b10      	ldr	r3, [pc, #64]	; (19f94 <radio_ccm_tx_pkt_set+0x44>)
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)pkt;
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   19f54:	4d10      	ldr	r5, [pc, #64]	; (19f98 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->MODE = mode;
   19f56:	4e11      	ldr	r6, [pc, #68]	; (19f9c <radio_ccm_tx_pkt_set+0x4c>)
{
   19f58:	4604      	mov	r4, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   19f5a:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   19f5c:	2002      	movs	r0, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   19f5e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   19f62:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
	NRF_CCM->MODE = mode;
   19f66:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   19f6a:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   19f6e:	4e0c      	ldr	r6, [pc, #48]	; (19fa0 <radio_ccm_tx_pkt_set+0x50>)
	NRF_CCM->INPTR = (uint32_t)pkt;
   19f70:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   19f74:	2401      	movs	r4, #1
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   19f76:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
	NRF_CCM->EVENTS_ERROR = 0;

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   19f7a:	4628      	mov	r0, r5
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   19f7c:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   19f80:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   19f84:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   19f88:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   19f8c:	601c      	str	r4, [r3, #0]
}
   19f8e:	bc70      	pop	{r4, r5, r6}
   19f90:	4770      	bx	lr
   19f92:	bf00      	nop
   19f94:	4000f000 	.word	0x4000f000
   19f98:	20002900 	.word	0x20002900
   19f9c:	01010000 	.word	0x01010000
   19fa0:	200027f0 	.word	0x200027f0

00019fa4 <radio_ccm_is_done>:
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   19fa4:	4a0e      	ldr	r2, [pc, #56]	; (19fe0 <radio_ccm_is_done+0x3c>)
   19fa6:	2302      	movs	r3, #2
   19fa8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

uint32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   19fac:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   19fb0:	b933      	cbnz	r3, 19fc0 <radio_ccm_is_done+0x1c>
		__WFE();
   19fb2:	bf20      	wfe
		__SEV();
   19fb4:	bf40      	sev
		__WFE();
   19fb6:	bf20      	wfe
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   19fb8:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   19fbc:	2b00      	cmp	r3, #0
   19fbe:	d0f8      	beq.n	19fb2 <radio_ccm_is_done+0xe>
}

NRF_STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   19fc0:	4b07      	ldr	r3, [pc, #28]	; (19fe0 <radio_ccm_is_done+0x3c>)
   19fc2:	4a08      	ldr	r2, [pc, #32]	; (19fe4 <radio_ccm_is_done+0x40>)
   19fc4:	2002      	movs	r0, #2
   19fc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   19fca:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   19fce:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_CCM));

	return (NRF_CCM->EVENTS_ERROR == 0);
   19fd2:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   19fd6:	fab0 f080 	clz	r0, r0
   19fda:	0940      	lsrs	r0, r0, #5
   19fdc:	4770      	bx	lr
   19fde:	bf00      	nop
   19fe0:	4000f000 	.word	0x4000f000
   19fe4:	e000e100 	.word	0xe000e100

00019fe8 <radio_ccm_mic_is_valid>:

uint32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   19fe8:	4b03      	ldr	r3, [pc, #12]	; (19ff8 <radio_ccm_mic_is_valid+0x10>)
   19fea:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   19fee:	3800      	subs	r0, #0
   19ff0:	bf18      	it	ne
   19ff2:	2001      	movne	r0, #1
   19ff4:	4770      	bx	lr
   19ff6:	bf00      	nop
   19ff8:	4000f000 	.word	0x4000f000

00019ffc <radio_ar_configure>:
	if (IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) &&
	    ((flags & BIT(1)) || (!(flags & BIT(0)) && (phy > PHY_1M)))) {
		addrptr = NRF_RADIO->PACKETPTR + 1;
		bcc = 80;
	} else {
		addrptr = NRF_RADIO->PACKETPTR - 1;
   19ffc:	4a14      	ldr	r2, [pc, #80]	; (1a050 <radio_ar_configure+0x54>)
	/* For Coded PHY adjust for CI and TERM1 */
	if (IS_ENABLED(CONFIG_BT_CTLR_PHY_CODED) && (phy == PHY_CODED)) {
		bcc += 5;
	}

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   19ffe:	4b15      	ldr	r3, [pc, #84]	; (1a054 <radio_ar_configure+0x58>)
{
   1a000:	b470      	push	{r4, r5, r6}
		addrptr = NRF_RADIO->PACKETPTR - 1;
   1a002:	f8d2 5504 	ldr.w	r5, [r2, #1284]	; 0x504
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (uint32_t)irk;
	NRF_AAR->ADDRPTR = addrptr;
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   1a006:	4e14      	ldr	r6, [pc, #80]	; (1a058 <radio_ar_configure+0x5c>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   1a008:	2403      	movs	r4, #3
   1a00a:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
		addrptr = NRF_RADIO->PACKETPTR - 1;
   1a00e:	3d01      	subs	r5, #1
	NRF_AAR->NIRK = nirk;
   1a010:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504

	NRF_AAR->EVENTS_END = 0;
   1a014:	2400      	movs	r4, #0
    p_reg->BCC = radio_bcc;
   1a016:	2040      	movs	r0, #64	; 0x40
	NRF_AAR->IRKPTR = (uint32_t)irk;
   1a018:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	NRF_AAR->ADDRPTR = addrptr;
   1a01c:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   1a020:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRF_AAR->EVENTS_END = 0;
   1a024:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   1a028:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   1a02c:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   1a030:	f8c2 0560 	str.w	r0, [r2, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   1a034:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1a038:	4908      	ldr	r1, [pc, #32]	; (1a05c <radio_ar_configure+0x60>)
   1a03a:	4303      	orrs	r3, r0
   1a03c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   1a040:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1a044:	f8c2 4128 	str.w	r4, [r2, #296]	; 0x128
	radio_bc_configure(bcc);
	radio_bc_status_reset();

	hal_trigger_aar_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}
   1a048:	bc70      	pop	{r4, r5, r6}
   1a04a:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
   1a04e:	4770      	bx	lr
   1a050:	40001000 	.word	0x40001000
   1a054:	4000f000 	.word	0x4000f000
   1a058:	200027ec 	.word	0x200027ec
   1a05c:	4001f000 	.word	0x4001f000

0001a060 <radio_ar_match_get>:

uint32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   1a060:	4b01      	ldr	r3, [pc, #4]	; (1a068 <radio_ar_match_get+0x8>)
   1a062:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1a066:	4770      	bx	lr
   1a068:	4000f000 	.word	0x4000f000

0001a06c <radio_ar_status_reset>:

void radio_ar_status_reset(void)
{
   1a06c:	b410      	push	{r4}
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   1a06e:	4807      	ldr	r0, [pc, #28]	; (1a08c <radio_ar_status_reset+0x20>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1a070:	4c07      	ldr	r4, [pc, #28]	; (1a090 <radio_ar_status_reset+0x24>)
    p_reg->CHENCLR = mask;
   1a072:	4a08      	ldr	r2, [pc, #32]	; (1a094 <radio_ar_status_reset+0x28>)
   1a074:	2300      	movs	r3, #0
   1a076:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   1a07a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   1a07e:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;

	hal_radio_nrf_ppi_channels_disable(BIT(HAL_TRIGGER_AAR_PPI));
}
   1a082:	bc10      	pop	{r4}
   1a084:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
   1a088:	4770      	bx	lr
   1a08a:	bf00      	nop
   1a08c:	4000f000 	.word	0x4000f000
   1a090:	40001000 	.word	0x40001000
   1a094:	4001f000 	.word	0x4001f000

0001a098 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   1a098:	4b08      	ldr	r3, [pc, #32]	; (1a0bc <radio_ar_has_match+0x24>)
   1a09a:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

uint32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   1a09e:	b160      	cbz	r0, 1a0ba <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   1a0a0:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   1a0a4:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   1a0a8:	b138      	cbz	r0, 1a0ba <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   1a0aa:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   1a0ae:	b120      	cbz	r0, 1a0ba <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   1a0b0:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   1a0b4:	fab0 f080 	clz	r0, r0
   1a0b8:	0940      	lsrs	r0, r0, #5
}
   1a0ba:	4770      	bx	lr
   1a0bc:	40001000 	.word	0x40001000

0001a0c0 <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1a0c0:	2902      	cmp	r1, #2
{
   1a0c2:	b510      	push	{r4, lr}
   1a0c4:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1a0c6:	d00b      	beq.n	1a0e0 <mayfly_enable_cb+0x20>
   1a0c8:	4a0a      	ldr	r2, [pc, #40]	; (1a0f4 <mayfly_enable_cb+0x34>)
   1a0ca:	490b      	ldr	r1, [pc, #44]	; (1a0f8 <mayfly_enable_cb+0x38>)
   1a0cc:	480b      	ldr	r0, [pc, #44]	; (1a0fc <mayfly_enable_cb+0x3c>)
   1a0ce:	231e      	movs	r3, #30
   1a0d0:	f004 fc24 	bl	1e91c <printk>
   1a0d4:	4040      	eors	r0, r0
   1a0d6:	f380 8811 	msr	BASEPRI, r0
   1a0da:	f04f 0003 	mov.w	r0, #3
   1a0de:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   1a0e0:	200b      	movs	r0, #11
	if (enable) {
   1a0e2:	b11c      	cbz	r4, 1a0ec <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   1a0e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   1a0e8:	f7eb bc5c 	b.w	59a4 <arch_irq_enable>
}
   1a0ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   1a0f0:	f7eb bc68 	b.w	59c4 <arch_irq_disable>
   1a0f4:	00025648 	.word	0x00025648
   1a0f8:	00025698 	.word	0x00025698
   1a0fc:	00024904 	.word	0x00024904

0001a100 <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   1a100:	b129      	cbz	r1, 1a10e <mayfly_is_enabled+0xe>
   1a102:	3901      	subs	r1, #1
   1a104:	2901      	cmp	r1, #1
   1a106:	d805      	bhi.n	1a114 <mayfly_is_enabled+0x14>
	case MAYFLY_CALL_ID_LLL:
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);

	case MAYFLY_CALL_ID_WORKER:
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   1a108:	200b      	movs	r0, #11
   1a10a:	f7eb bc6f 	b.w	59ec <arch_irq_is_enabled>
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   1a10e:	2018      	movs	r0, #24
   1a110:	f7eb bc6c 	b.w	59ec <arch_irq_is_enabled>
{
   1a114:	b508      	push	{r3, lr}

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   1a116:	4a07      	ldr	r2, [pc, #28]	; (1a134 <mayfly_is_enabled+0x34>)
   1a118:	4907      	ldr	r1, [pc, #28]	; (1a138 <mayfly_is_enabled+0x38>)
   1a11a:	4808      	ldr	r0, [pc, #32]	; (1a13c <mayfly_is_enabled+0x3c>)
   1a11c:	2336      	movs	r3, #54	; 0x36
   1a11e:	f004 fbfd 	bl	1e91c <printk>
   1a122:	4040      	eors	r0, r0
   1a124:	f380 8811 	msr	BASEPRI, r0
   1a128:	f04f 0003 	mov.w	r0, #3
   1a12c:	df02      	svc	2
		break;
	}

	return 0;
}
   1a12e:	2000      	movs	r0, #0
   1a130:	bd08      	pop	{r3, pc}
   1a132:	bf00      	nop
   1a134:	00025648 	.word	0x00025648
   1a138:	00024974 	.word	0x00024974
   1a13c:	00024904 	.word	0x00024904

0001a140 <mayfly_prio_is_equal>:
#endif
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1a140:	4288      	cmp	r0, r1
   1a142:	d00b      	beq.n	1a15c <mayfly_prio_is_equal+0x1c>
	return (caller_id == callee_id) ||
   1a144:	2801      	cmp	r0, #1
   1a146:	d003      	beq.n	1a150 <mayfly_prio_is_equal+0x10>
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1a148:	2802      	cmp	r0, #2
   1a14a:	d009      	beq.n	1a160 <mayfly_prio_is_equal+0x20>
   1a14c:	2000      	movs	r0, #0
#endif
	       0;
}
   1a14e:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   1a150:	f1a1 0002 	sub.w	r0, r1, #2
   1a154:	fab0 f080 	clz	r0, r0
   1a158:	0940      	lsrs	r0, r0, #5
   1a15a:	4770      	bx	lr
   1a15c:	2001      	movs	r0, #1
   1a15e:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   1a160:	f1a1 0001 	sub.w	r0, r1, #1
   1a164:	fab0 f080 	clz	r0, r0
   1a168:	0940      	lsrs	r0, r0, #5
   1a16a:	4770      	bx	lr

0001a16c <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   1a16c:	2901      	cmp	r1, #1
{
   1a16e:	b508      	push	{r3, lr}
	switch (callee_id) {
   1a170:	d00f      	beq.n	1a192 <mayfly_pend+0x26>
   1a172:	2902      	cmp	r1, #2
   1a174:	d00d      	beq.n	1a192 <mayfly_pend+0x26>
   1a176:	b191      	cbz	r1, 1a19e <mayfly_pend+0x32>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   1a178:	4a0c      	ldr	r2, [pc, #48]	; (1a1ac <mayfly_pend+0x40>)
   1a17a:	490d      	ldr	r1, [pc, #52]	; (1a1b0 <mayfly_pend+0x44>)
   1a17c:	480d      	ldr	r0, [pc, #52]	; (1a1b4 <mayfly_pend+0x48>)
   1a17e:	2367      	movs	r3, #103	; 0x67
   1a180:	f004 fbcc 	bl	1e91c <printk>
   1a184:	4040      	eors	r0, r0
   1a186:	f380 8811 	msr	BASEPRI, r0
   1a18a:	f04f 0003 	mov.w	r0, #3
   1a18e:	df02      	svc	2
		break;
	}
}
   1a190:	bd08      	pop	{r3, pc}
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a192:	4b09      	ldr	r3, [pc, #36]	; (1a1b8 <mayfly_pend+0x4c>)
   1a194:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1a198:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1a19c:	bd08      	pop	{r3, pc}
   1a19e:	4b06      	ldr	r3, [pc, #24]	; (1a1b8 <mayfly_pend+0x4c>)
   1a1a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1a1a4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1a1a8:	bd08      	pop	{r3, pc}
   1a1aa:	bf00      	nop
   1a1ac:	00025648 	.word	0x00025648
   1a1b0:	00024974 	.word	0x00024974
   1a1b4:	00024904 	.word	0x00024904
   1a1b8:	e000e100 	.word	0xe000e100

0001a1bc <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1a1bc:	2803      	cmp	r0, #3
{
   1a1be:	b510      	push	{r4, lr}
   1a1c0:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1a1c2:	d804      	bhi.n	1a1ce <hal_ticker_instance0_caller_id_get+0x12>

	caller_id = caller_id_lut[user_id];
   1a1c4:	4b11      	ldr	r3, [pc, #68]	; (1a20c <hal_ticker_instance0_caller_id_get+0x50>)
   1a1c6:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1a1c8:	b18c      	cbz	r4, 1a1ee <hal_ticker_instance0_caller_id_get+0x32>

	return caller_id;
}
   1a1ca:	4620      	mov	r0, r4
   1a1cc:	bd10      	pop	{r4, pc}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1a1ce:	4a10      	ldr	r2, [pc, #64]	; (1a210 <hal_ticker_instance0_caller_id_get+0x54>)
   1a1d0:	4910      	ldr	r1, [pc, #64]	; (1a214 <hal_ticker_instance0_caller_id_get+0x58>)
   1a1d2:	4811      	ldr	r0, [pc, #68]	; (1a218 <hal_ticker_instance0_caller_id_get+0x5c>)
   1a1d4:	232b      	movs	r3, #43	; 0x2b
   1a1d6:	f004 fba1 	bl	1e91c <printk>
   1a1da:	4040      	eors	r0, r0
   1a1dc:	f380 8811 	msr	BASEPRI, r0
   1a1e0:	f04f 0003 	mov.w	r0, #3
   1a1e4:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   1a1e6:	4b09      	ldr	r3, [pc, #36]	; (1a20c <hal_ticker_instance0_caller_id_get+0x50>)
   1a1e8:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1a1ea:	2c00      	cmp	r4, #0
   1a1ec:	d1ed      	bne.n	1a1ca <hal_ticker_instance0_caller_id_get+0xe>
   1a1ee:	4a08      	ldr	r2, [pc, #32]	; (1a210 <hal_ticker_instance0_caller_id_get+0x54>)
   1a1f0:	490a      	ldr	r1, [pc, #40]	; (1a21c <hal_ticker_instance0_caller_id_get+0x60>)
   1a1f2:	4809      	ldr	r0, [pc, #36]	; (1a218 <hal_ticker_instance0_caller_id_get+0x5c>)
   1a1f4:	232e      	movs	r3, #46	; 0x2e
   1a1f6:	f004 fb91 	bl	1e91c <printk>
   1a1fa:	4040      	eors	r0, r0
   1a1fc:	f380 8811 	msr	BASEPRI, r0
   1a200:	f04f 0003 	mov.w	r0, #3
   1a204:	df02      	svc	2
}
   1a206:	4620      	mov	r0, r4
   1a208:	bd10      	pop	{r4, pc}
   1a20a:	bf00      	nop
   1a20c:	00025750 	.word	0x00025750
   1a210:	000256bc 	.word	0x000256bc
   1a214:	0002570c 	.word	0x0002570c
   1a218:	00024904 	.word	0x00024904
   1a21c:	0002572c 	.word	0x0002572c

0001a220 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   1a220:	3801      	subs	r0, #1
{
   1a222:	b510      	push	{r4, lr}
   1a224:	461c      	mov	r4, r3
   1a226:	2804      	cmp	r0, #4
   1a228:	d855      	bhi.n	1a2d6 <hal_ticker_instance0_sched+0xb6>
   1a22a:	e8df f000 	tbb	[pc, r0]
   1a22e:	1a12      	.short	0x1a12
   1a230:	1e16      	.short	0x1e16
   1a232:	03          	.byte	0x03
   1a233:	00          	.byte	0x00
			break;
		}
		break;

	case TICKER_CALL_ID_PROGRAM:
		switch (callee_id) {
   1a234:	2904      	cmp	r1, #4
   1a236:	d01e      	beq.n	1a276 <hal_ticker_instance0_sched+0x56>
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
   1a238:	23ba      	movs	r3, #186	; 0xba
			break;
		}
		break;

	default:
		LL_ASSERT(0);
   1a23a:	4a28      	ldr	r2, [pc, #160]	; (1a2dc <hal_ticker_instance0_sched+0xbc>)
   1a23c:	4928      	ldr	r1, [pc, #160]	; (1a2e0 <hal_ticker_instance0_sched+0xc0>)
   1a23e:	4829      	ldr	r0, [pc, #164]	; (1a2e4 <hal_ticker_instance0_sched+0xc4>)
   1a240:	f004 fb6c 	bl	1e91c <printk>
   1a244:	4040      	eors	r0, r0
   1a246:	f380 8811 	msr	BASEPRI, r0
   1a24a:	f04f 0003 	mov.w	r0, #3
   1a24e:	df02      	svc	2
		break;
	}
}
   1a250:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1a252:	2904      	cmp	r1, #4
   1a254:	d01f      	beq.n	1a296 <hal_ticker_instance0_sched+0x76>
			LL_ASSERT(0);
   1a256:	234e      	movs	r3, #78	; 0x4e
   1a258:	e7ef      	b.n	1a23a <hal_ticker_instance0_sched+0x1a>
		switch (callee_id) {
   1a25a:	2904      	cmp	r1, #4
   1a25c:	d013      	beq.n	1a286 <hal_ticker_instance0_sched+0x66>
			LL_ASSERT(0);
   1a25e:	237c      	movs	r3, #124	; 0x7c
   1a260:	e7eb      	b.n	1a23a <hal_ticker_instance0_sched+0x1a>
		switch (callee_id) {
   1a262:	2903      	cmp	r1, #3
   1a264:	d01f      	beq.n	1a2a6 <hal_ticker_instance0_sched+0x86>
			LL_ASSERT(0);
   1a266:	2365      	movs	r3, #101	; 0x65
   1a268:	e7e7      	b.n	1a23a <hal_ticker_instance0_sched+0x1a>
		switch (callee_id) {
   1a26a:	2903      	cmp	r1, #3
   1a26c:	d02b      	beq.n	1a2c6 <hal_ticker_instance0_sched+0xa6>
   1a26e:	2904      	cmp	r1, #4
   1a270:	d021      	beq.n	1a2b6 <hal_ticker_instance0_sched+0x96>
			LL_ASSERT(0);
   1a272:	23a2      	movs	r3, #162	; 0xa2
   1a274:	e7e1      	b.n	1a23a <hal_ticker_instance0_sched+0x1a>
			m.param = instance;
   1a276:	4b1c      	ldr	r3, [pc, #112]	; (1a2e8 <hal_ticker_instance0_sched+0xc8>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1a278:	2102      	movs	r1, #2
			m.param = instance;
   1a27a:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1a27c:	2003      	movs	r0, #3
}
   1a27e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1a282:	f7f3 b801 	b.w	d288 <mayfly_enqueue>
			m.param = instance;
   1a286:	4b19      	ldr	r3, [pc, #100]	; (1a2ec <hal_ticker_instance0_sched+0xcc>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1a288:	2102      	movs	r1, #2
			m.param = instance;
   1a28a:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1a28c:	2001      	movs	r0, #1
}
   1a28e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1a292:	f7f2 bff9 	b.w	d288 <mayfly_enqueue>
			m.param = instance;
   1a296:	4b16      	ldr	r3, [pc, #88]	; (1a2f0 <hal_ticker_instance0_sched+0xd0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1a298:	2102      	movs	r1, #2
			m.param = instance;
   1a29a:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1a29c:	2000      	movs	r0, #0
}
   1a29e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1a2a2:	f7f2 bff1 	b.w	d288 <mayfly_enqueue>
			m.param = instance;
   1a2a6:	4b13      	ldr	r3, [pc, #76]	; (1a2f4 <hal_ticker_instance0_sched+0xd4>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1a2a8:	2101      	movs	r1, #1
			m.param = instance;
   1a2aa:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1a2ac:	4608      	mov	r0, r1
}
   1a2ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1a2b2:	f7f2 bfe9 	b.w	d288 <mayfly_enqueue>
			m.param = instance;
   1a2b6:	4b10      	ldr	r3, [pc, #64]	; (1a2f8 <hal_ticker_instance0_sched+0xd8>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1a2b8:	2102      	movs	r1, #2
			m.param = instance;
   1a2ba:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1a2bc:	4608      	mov	r0, r1
}
   1a2be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1a2c2:	f7f2 bfe1 	b.w	d288 <mayfly_enqueue>
			m.param = instance;
   1a2c6:	4b0d      	ldr	r3, [pc, #52]	; (1a2fc <hal_ticker_instance0_sched+0xdc>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1a2c8:	2101      	movs	r1, #1
			m.param = instance;
   1a2ca:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1a2cc:	2002      	movs	r0, #2
}
   1a2ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1a2d2:	f7f2 bfd9 	b.w	d288 <mayfly_enqueue>
		LL_ASSERT(0);
   1a2d6:	23c0      	movs	r3, #192	; 0xc0
   1a2d8:	e7af      	b.n	1a23a <hal_ticker_instance0_sched+0x1a>
   1a2da:	bf00      	nop
   1a2dc:	000256bc 	.word	0x000256bc
   1a2e0:	00024974 	.word	0x00024974
   1a2e4:	00024904 	.word	0x00024904
   1a2e8:	200005b4 	.word	0x200005b4
   1a2ec:	20000584 	.word	0x20000584
   1a2f0:	20000564 	.word	0x20000564
   1a2f4:	20000574 	.word	0x20000574
   1a2f8:	200005a4 	.word	0x200005a4
   1a2fc:	20000594 	.word	0x20000594

0001a300 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
   1a300:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   1a302:	2000      	movs	r0, #0
   1a304:	f7ff ba4a 	b.w	1979c <cntr_cmp_set>

0001a308 <hci_vendor_read_static_addr>:
				 uint8_t size)
{
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1a308:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1a30c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   1a310:	3201      	adds	r2, #1
   1a312:	d008      	beq.n	1a326 <hci_vendor_read_static_addr+0x1e>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   1a314:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1a318:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1a31c:	f013 0301 	ands.w	r3, r3, #1
   1a320:	d10f      	bne.n	1a342 <hci_vendor_read_static_addr+0x3a>
		}

		return 1;
	}

	return 0;
   1a322:	2000      	movs	r0, #0
   1a324:	4770      	bx	lr
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1a326:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   1a32a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1a32e:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1a330:	4293      	cmp	r3, r2
   1a332:	d0f6      	beq.n	1a322 <hci_vendor_read_static_addr+0x1a>
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   1a334:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1a338:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1a33c:	f013 0301 	ands.w	r3, r3, #1
   1a340:	d0ef      	beq.n	1a322 <hci_vendor_read_static_addr+0x1a>
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   1a342:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	sys_put_le16(val >> 16, &dst[2]);
   1a346:	0c19      	lsrs	r1, r3, #16
{
   1a348:	b410      	push	{r4}
	dst[0] = val;
   1a34a:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   1a34c:	0a0c      	lsrs	r4, r1, #8
   1a34e:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1a352:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   1a354:	70c4      	strb	r4, [r0, #3]
   1a356:	7043      	strb	r3, [r0, #1]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   1a358:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	dst[0] = val;
   1a35c:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   1a35e:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   1a362:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1a366:	7143      	strb	r3, [r0, #5]
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   1a368:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   1a36c:	3301      	adds	r3, #1
   1a36e:	d035      	beq.n	1a3dc <hci_vendor_read_static_addr+0xd4>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   1a370:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   1a374:	3301      	adds	r3, #1
   1a376:	d031      	beq.n	1a3dc <hci_vendor_read_static_addr+0xd4>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   1a378:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   1a37c:	3301      	adds	r3, #1
   1a37e:	d02d      	beq.n	1a3dc <hci_vendor_read_static_addr+0xd4>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   1a380:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   1a384:	3301      	adds	r3, #1
   1a386:	d029      	beq.n	1a3dc <hci_vendor_read_static_addr+0xd4>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   1a388:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
   1a38c:	7183      	strb	r3, [r0, #6]
	sys_put_le16(val >> 16, &dst[2]);
   1a38e:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1a390:	0a0c      	lsrs	r4, r1, #8
   1a392:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1a396:	7201      	strb	r1, [r0, #8]
	dst[1] = val >> 8;
   1a398:	7244      	strb	r4, [r0, #9]
   1a39a:	71c3      	strb	r3, [r0, #7]
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   1a39c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
	dst[0] = val;
   1a3a0:	7283      	strb	r3, [r0, #10]
	sys_put_le16(val >> 16, &dst[2]);
   1a3a2:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1a3a4:	0a0c      	lsrs	r4, r1, #8
   1a3a6:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1a3aa:	7301      	strb	r1, [r0, #12]
	dst[1] = val >> 8;
   1a3ac:	7344      	strb	r4, [r0, #13]
   1a3ae:	72c3      	strb	r3, [r0, #11]
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   1a3b0:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
	dst[0] = val;
   1a3b4:	7383      	strb	r3, [r0, #14]
	sys_put_le16(val >> 16, &dst[2]);
   1a3b6:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1a3b8:	0a0c      	lsrs	r4, r1, #8
   1a3ba:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1a3be:	7401      	strb	r1, [r0, #16]
	dst[1] = val >> 8;
   1a3c0:	7444      	strb	r4, [r0, #17]
   1a3c2:	73c3      	strb	r3, [r0, #15]
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   1a3c4:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	dst[0] = val;
   1a3c8:	7483      	strb	r3, [r0, #18]
	sys_put_le16(val >> 16, &dst[2]);
   1a3ca:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   1a3cc:	0a11      	lsrs	r1, r2, #8
   1a3ce:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1a3d2:	7502      	strb	r2, [r0, #20]
	dst[1] = val >> 8;
   1a3d4:	7541      	strb	r1, [r0, #21]
   1a3d6:	74c3      	strb	r3, [r0, #19]
		return 1;
   1a3d8:	2001      	movs	r0, #1
}
   1a3da:	e009      	b.n	1a3f0 <hci_vendor_read_static_addr+0xe8>
__ssp_bos_icheck3(memset, void *, int)
   1a3dc:	2300      	movs	r3, #0
   1a3de:	f8c0 3006 	str.w	r3, [r0, #6]
   1a3e2:	f8c0 300a 	str.w	r3, [r0, #10]
   1a3e6:	f8c0 300e 	str.w	r3, [r0, #14]
   1a3ea:	f8c0 3012 	str.w	r3, [r0, #18]
   1a3ee:	2001      	movs	r0, #1
}
   1a3f0:	bc10      	pop	{r4}
   1a3f2:	4770      	bx	lr

0001a3f4 <hci_vendor_read_key_hierarchy_roots>:
   1a3f4:	2300      	movs	r3, #0
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   1a3f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1a3fa:	6003      	str	r3, [r0, #0]
   1a3fc:	6043      	str	r3, [r0, #4]
   1a3fe:	6083      	str	r3, [r0, #8]
   1a400:	60c3      	str	r3, [r0, #12]
   1a402:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   1a406:	3301      	adds	r3, #1
   1a408:	d036      	beq.n	1a478 <hci_vendor_read_key_hierarchy_roots+0x84>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   1a40a:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   1a40e:	3301      	adds	r3, #1
   1a410:	d032      	beq.n	1a478 <hci_vendor_read_key_hierarchy_roots+0x84>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   1a412:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   1a416:	3301      	adds	r3, #1
   1a418:	d02e      	beq.n	1a478 <hci_vendor_read_key_hierarchy_roots+0x84>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   1a41a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   1a41e:	3301      	adds	r3, #1
   1a420:	d02a      	beq.n	1a478 <hci_vendor_read_key_hierarchy_roots+0x84>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   1a422:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	dst[0] = val;
   1a426:	700b      	strb	r3, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
   1a428:	0c18      	lsrs	r0, r3, #16
{
   1a42a:	b410      	push	{r4}
	dst[1] = val >> 8;
   1a42c:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1a430:	0a04      	lsrs	r4, r0, #8
	dst[0] = val;
   1a432:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
   1a434:	70cc      	strb	r4, [r1, #3]
   1a436:	704b      	strb	r3, [r1, #1]
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   1a438:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
	dst[0] = val;
   1a43c:	710b      	strb	r3, [r1, #4]
	sys_put_le16(val >> 16, &dst[2]);
   1a43e:	0c18      	lsrs	r0, r3, #16
	dst[1] = val >> 8;
   1a440:	0a04      	lsrs	r4, r0, #8
   1a442:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1a446:	7188      	strb	r0, [r1, #6]
	dst[1] = val >> 8;
   1a448:	71cc      	strb	r4, [r1, #7]
   1a44a:	714b      	strb	r3, [r1, #5]
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   1a44c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
	dst[0] = val;
   1a450:	720b      	strb	r3, [r1, #8]
	sys_put_le16(val >> 16, &dst[2]);
   1a452:	0c18      	lsrs	r0, r3, #16
	dst[1] = val >> 8;
   1a454:	0a04      	lsrs	r4, r0, #8
   1a456:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1a45a:	7288      	strb	r0, [r1, #10]
	dst[1] = val >> 8;
   1a45c:	72cc      	strb	r4, [r1, #11]
   1a45e:	724b      	strb	r3, [r1, #9]
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   1a460:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
	dst[0] = val;
   1a464:	730b      	strb	r3, [r1, #12]
	sys_put_le16(val >> 16, &dst[2]);
   1a466:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   1a468:	0a10      	lsrs	r0, r2, #8
   1a46a:	f3c3 2307 	ubfx	r3, r3, #8, #8
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   1a46e:	bc10      	pop	{r4}
	dst[0] = val;
   1a470:	738a      	strb	r2, [r1, #14]
	dst[1] = val >> 8;
   1a472:	73c8      	strb	r0, [r1, #15]
   1a474:	734b      	strb	r3, [r1, #13]
   1a476:	4770      	bx	lr
   1a478:	2300      	movs	r3, #0
   1a47a:	600b      	str	r3, [r1, #0]
   1a47c:	604b      	str	r3, [r1, #4]
   1a47e:	608b      	str	r3, [r1, #8]
   1a480:	60cb      	str	r3, [r1, #12]
   1a482:	4770      	bx	lr

0001a484 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1a484:	4b02      	ldr	r3, [pc, #8]	; (1a490 <net_buf_pool_get+0xc>)
   1a486:	2228      	movs	r2, #40	; 0x28
   1a488:	fb02 3000 	mla	r0, r2, r0, r3
   1a48c:	4770      	bx	lr
   1a48e:	bf00      	nop
   1a490:	20000990 	.word	0x20000990

0001a494 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1a494:	7983      	ldrb	r3, [r0, #6]

	return buf - pool->__bufs;
   1a496:	4a05      	ldr	r2, [pc, #20]	; (1a4ac <net_buf_id+0x18>)
   1a498:	2128      	movs	r1, #40	; 0x28
   1a49a:	fb01 2303 	mla	r3, r1, r3, r2
   1a49e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a4a0:	1ac0      	subs	r0, r0, r3
}
   1a4a2:	4b03      	ldr	r3, [pc, #12]	; (1a4b0 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   1a4a4:	10c0      	asrs	r0, r0, #3
}
   1a4a6:	4358      	muls	r0, r3
   1a4a8:	4770      	bx	lr
   1a4aa:	bf00      	nop
   1a4ac:	20000990 	.word	0x20000990
   1a4b0:	aaaaaaab 	.word	0xaaaaaaab

0001a4b4 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1a4b4:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1a4b6:	4a0a      	ldr	r2, [pc, #40]	; (1a4e0 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1a4b8:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1a4ba:	2428      	movs	r4, #40	; 0x28
   1a4bc:	fb04 2303 	mla	r3, r4, r3, r2

	*size = MIN(fixed->data_size, *size);
   1a4c0:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1a4c2:	6a1b      	ldr	r3, [r3, #32]
   1a4c4:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1a4c6:	6823      	ldr	r3, [r4, #0]
   1a4c8:	429a      	cmp	r2, r3
   1a4ca:	bf94      	ite	ls
   1a4cc:	600a      	strls	r2, [r1, #0]
   1a4ce:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1a4d0:	f7ff ffe0 	bl	1a494 <net_buf_id>
   1a4d4:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1a4d8:	fb02 3000 	mla	r0, r2, r0, r3
   1a4dc:	bd10      	pop	{r4, pc}
   1a4de:	bf00      	nop
   1a4e0:	20000990 	.word	0x20000990

0001a4e4 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1a4e4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1a4e8:	4605      	mov	r5, r0
   1a4ea:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1a4ec:	4610      	mov	r0, r2
   1a4ee:	4619      	mov	r1, r3
{
   1a4f0:	4616      	mov	r6, r2
   1a4f2:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1a4f4:	f009 f9dd 	bl	238b2 <sys_clock_timeout_end_calc>
   1a4f8:	4680      	mov	r8, r0
   1a4fa:	4689      	mov	r9, r1
	__asm__ volatile(
   1a4fc:	f04f 0320 	mov.w	r3, #32
   1a500:	f3ef 8a11 	mrs	sl, BASEPRI
   1a504:	f383 8811 	msr	BASEPRI, r3
   1a508:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1a50c:	8b6b      	ldrh	r3, [r5, #26]
   1a50e:	2b00      	cmp	r3, #0
   1a510:	d054      	beq.n	1a5bc <net_buf_alloc_len+0xd8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1a512:	8b2a      	ldrh	r2, [r5, #24]
   1a514:	429a      	cmp	r2, r3
   1a516:	d93d      	bls.n	1a594 <net_buf_alloc_len+0xb0>
	return z_impl_k_queue_get(queue, timeout);
   1a518:	2200      	movs	r2, #0
   1a51a:	2300      	movs	r3, #0
   1a51c:	4628      	mov	r0, r5
   1a51e:	f002 ff8f 	bl	1d440 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1a522:	4604      	mov	r4, r0
   1a524:	2800      	cmp	r0, #0
   1a526:	d035      	beq.n	1a594 <net_buf_alloc_len+0xb0>
	__asm__ volatile(
   1a528:	f38a 8811 	msr	BASEPRI, sl
   1a52c:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1a530:	9b01      	ldr	r3, [sp, #4]
   1a532:	2b00      	cmp	r3, #0
   1a534:	d052      	beq.n	1a5dc <net_buf_alloc_len+0xf8>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1a536:	ea56 0307 	orrs.w	r3, r6, r7
   1a53a:	d010      	beq.n	1a55e <net_buf_alloc_len+0x7a>
   1a53c:	1c7b      	adds	r3, r7, #1
   1a53e:	bf08      	it	eq
   1a540:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   1a544:	d00b      	beq.n	1a55e <net_buf_alloc_len+0x7a>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   1a546:	f003 ff47 	bl	1e3d8 <sys_clock_tick_get>
   1a54a:	ebb8 0600 	subs.w	r6, r8, r0
   1a54e:	eb69 0701 	sbc.w	r7, r9, r1
   1a552:	2e00      	cmp	r6, #0
   1a554:	f177 0300 	sbcs.w	r3, r7, #0
   1a558:	bfbc      	itt	lt
   1a55a:	2600      	movlt	r6, #0
   1a55c:	2700      	movlt	r7, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1a55e:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1a560:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1a5f4 <net_buf_alloc_len+0x110>
   1a564:	2228      	movs	r2, #40	; 0x28
   1a566:	fb02 8303 	mla	r3, r2, r3, r8
   1a56a:	a901      	add	r1, sp, #4
   1a56c:	6a1b      	ldr	r3, [r3, #32]
   1a56e:	681b      	ldr	r3, [r3, #0]
   1a570:	4632      	mov	r2, r6
   1a572:	681d      	ldr	r5, [r3, #0]
   1a574:	4620      	mov	r0, r4
   1a576:	463b      	mov	r3, r7
   1a578:	47a8      	blx	r5
   1a57a:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1a57c:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1a57e:	bb70      	cbnz	r0, 1a5de <net_buf_alloc_len+0xfa>
	k_lifo_put(&pool->free, buf);
   1a580:	79a0      	ldrb	r0, [r4, #6]
   1a582:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1a586:	4621      	mov	r1, r4
   1a588:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
   1a58c:	f008 ff0b 	bl	233a6 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1a590:	462c      	mov	r4, r5
}
   1a592:	e01f      	b.n	1a5d4 <net_buf_alloc_len+0xf0>
		uninit_count = pool->uninit_count--;
   1a594:	8b68      	ldrh	r0, [r5, #26]
   1a596:	1e43      	subs	r3, r0, #1
   1a598:	836b      	strh	r3, [r5, #26]
   1a59a:	f38a 8811 	msr	BASEPRI, sl
   1a59e:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   1a5a2:	8b2c      	ldrh	r4, [r5, #24]
   1a5a4:	1a24      	subs	r4, r4, r0
   1a5a6:	6a68      	ldr	r0, [r5, #36]	; 0x24
   1a5a8:	2318      	movs	r3, #24
   1a5aa:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   1a5ae:	4811      	ldr	r0, [pc, #68]	; (1a5f4 <net_buf_alloc_len+0x110>)
   1a5b0:	4b11      	ldr	r3, [pc, #68]	; (1a5f8 <net_buf_alloc_len+0x114>)
   1a5b2:	1a2d      	subs	r5, r5, r0
   1a5b4:	10ed      	asrs	r5, r5, #3
   1a5b6:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   1a5b8:	71a5      	strb	r5, [r4, #6]
		goto success;
   1a5ba:	e7b9      	b.n	1a530 <net_buf_alloc_len+0x4c>
   1a5bc:	f38a 8811 	msr	BASEPRI, sl
   1a5c0:	f3bf 8f6f 	isb	sy
   1a5c4:	4632      	mov	r2, r6
   1a5c6:	463b      	mov	r3, r7
   1a5c8:	4628      	mov	r0, r5
   1a5ca:	f002 ff39 	bl	1d440 <z_impl_k_queue_get>
	if (!buf) {
   1a5ce:	4604      	mov	r4, r0
   1a5d0:	2800      	cmp	r0, #0
   1a5d2:	d1ad      	bne.n	1a530 <net_buf_alloc_len+0x4c>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1a5d4:	4620      	mov	r0, r4
   1a5d6:	b002      	add	sp, #8
   1a5d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf->__buf = NULL;
   1a5dc:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   1a5de:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1a5e0:	2201      	movs	r2, #1
	buf->frags = NULL;
   1a5e2:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1a5e4:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   1a5e6:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   1a5e8:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   1a5ea:	6923      	ldr	r3, [r4, #16]
   1a5ec:	81e2      	strh	r2, [r4, #14]
   1a5ee:	60a3      	str	r3, [r4, #8]
	return buf;
   1a5f0:	e7f0      	b.n	1a5d4 <net_buf_alloc_len+0xf0>
   1a5f2:	bf00      	nop
   1a5f4:	20000990 	.word	0x20000990
   1a5f8:	cccccccd 	.word	0xcccccccd

0001a5fc <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1a5fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a600:	4d17      	ldr	r5, [pc, #92]	; (1a660 <net_buf_unref+0x64>)
   1a602:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1a604:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   1a606:	2728      	movs	r7, #40	; 0x28
	while (buf) {
   1a608:	b90c      	cbnz	r4, 1a60e <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1a60a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   1a60e:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   1a610:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   1a614:	3b01      	subs	r3, #1
   1a616:	b2db      	uxtb	r3, r3
   1a618:	7123      	strb	r3, [r4, #4]
   1a61a:	2b00      	cmp	r3, #0
   1a61c:	d1f5      	bne.n	1a60a <net_buf_unref+0xe>
		if (buf->__buf) {
   1a61e:	6921      	ldr	r1, [r4, #16]
   1a620:	b159      	cbz	r1, 1a63a <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1a622:	7963      	ldrb	r3, [r4, #5]
   1a624:	079b      	lsls	r3, r3, #30
   1a626:	d407      	bmi.n	1a638 <net_buf_unref+0x3c>
	pool->alloc->cb->unref(buf, data);
   1a628:	79a3      	ldrb	r3, [r4, #6]
   1a62a:	fb07 5303 	mla	r3, r7, r3, r5
   1a62e:	4620      	mov	r0, r4
   1a630:	6a1b      	ldr	r3, [r3, #32]
   1a632:	681b      	ldr	r3, [r3, #0]
   1a634:	689b      	ldr	r3, [r3, #8]
   1a636:	4798      	blx	r3
			buf->__buf = NULL;
   1a638:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   1a63a:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1a63c:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   1a63e:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   1a642:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   1a644:	69db      	ldr	r3, [r3, #28]
   1a646:	b11b      	cbz	r3, 1a650 <net_buf_unref+0x54>
			pool->destroy(buf);
   1a648:	4620      	mov	r0, r4
   1a64a:	4798      	blx	r3
{
   1a64c:	4644      	mov	r4, r8
   1a64e:	e7db      	b.n	1a608 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   1a650:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1a654:	4621      	mov	r1, r4
   1a656:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
   1a65a:	f008 fea4 	bl	233a6 <k_queue_prepend>
}
   1a65e:	e7f5      	b.n	1a64c <net_buf_unref+0x50>
   1a660:	20000990 	.word	0x20000990

0001a664 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1a664:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   1a666:	4b09      	ldr	r3, [pc, #36]	; (1a68c <gpio_nrfx_init+0x28>)
   1a668:	781a      	ldrb	r2, [r3, #0]
   1a66a:	b96a      	cbnz	r2, 1a688 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   1a66c:	2101      	movs	r1, #1
   1a66e:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1a670:	2006      	movs	r0, #6
   1a672:	2105      	movs	r1, #5
   1a674:	f7eb f9c8 	bl	5a08 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   1a678:	2006      	movs	r0, #6
   1a67a:	f7eb f993 	bl	59a4 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1a67e:	4b04      	ldr	r3, [pc, #16]	; (1a690 <gpio_nrfx_init+0x2c>)
   1a680:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1a684:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   1a688:	2000      	movs	r0, #0
   1a68a:	bd08      	pop	{r3, pc}
   1a68c:	200035de 	.word	0x200035de
   1a690:	40006000 	.word	0x40006000

0001a694 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1a694:	4b2b      	ldr	r3, [pc, #172]	; (1a744 <gpio_nrfx_config+0xb0>)
{
   1a696:	b5f0      	push	{r4, r5, r6, r7, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1a698:	6844      	ldr	r4, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1a69a:	482b      	ldr	r0, [pc, #172]	; (1a748 <gpio_nrfx_config+0xb4>)
   1a69c:	4013      	ands	r3, r2
   1a69e:	4283      	cmp	r3, r0
   1a6a0:	d041      	beq.n	1a726 <gpio_nrfx_config+0x92>
   1a6a2:	d80d      	bhi.n	1a6c0 <gpio_nrfx_config+0x2c>
   1a6a4:	2b06      	cmp	r3, #6
   1a6a6:	d015      	beq.n	1a6d4 <gpio_nrfx_config+0x40>
   1a6a8:	d805      	bhi.n	1a6b6 <gpio_nrfx_config+0x22>
   1a6aa:	b19b      	cbz	r3, 1a6d4 <gpio_nrfx_config+0x40>
   1a6ac:	2b02      	cmp	r3, #2
   1a6ae:	d03c      	beq.n	1a72a <gpio_nrfx_config+0x96>
   1a6b0:	f06f 0015 	mvn.w	r0, #21
   1a6b4:	e036      	b.n	1a724 <gpio_nrfx_config+0x90>
   1a6b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1a6ba:	d1f9      	bne.n	1a6b0 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   1a6bc:	2301      	movs	r3, #1
   1a6be:	e009      	b.n	1a6d4 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1a6c0:	4822      	ldr	r0, [pc, #136]	; (1a74c <gpio_nrfx_config+0xb8>)
   1a6c2:	4283      	cmp	r3, r0
   1a6c4:	d033      	beq.n	1a72e <gpio_nrfx_config+0x9a>
   1a6c6:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   1a6ca:	d032      	beq.n	1a732 <gpio_nrfx_config+0x9e>
   1a6cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1a6d0:	d1ee      	bne.n	1a6b0 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   1a6d2:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   1a6d4:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
   1a6d6:	bf54      	ite	pl
   1a6d8:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   1a6dc:	2603      	movmi	r6, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1a6de:	f482 7580 	eor.w	r5, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   1a6e2:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   1a6e4:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1a6e8:	f3c5 2500 	ubfx	r5, r5, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   1a6ec:	d507      	bpl.n	1a6fe <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1a6ee:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1a6f2:	6867      	ldr	r7, [r4, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1a6f4:	d01f      	beq.n	1a736 <gpio_nrfx_config+0xa2>
			nrf_gpio_port_out_set(reg, BIT(pin));
   1a6f6:	2201      	movs	r2, #1
   1a6f8:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   1a6fa:	f8c7 2508 	str.w	r2, [r7, #1288]	; 0x508
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   1a6fe:	7a22      	ldrb	r2, [r4, #8]
        case 1: return NRF_P1;
   1a700:	4c13      	ldr	r4, [pc, #76]	; (1a750 <gpio_nrfx_config+0xbc>)
   1a702:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   1a704:	f001 011f 	and.w	r1, r1, #31
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1a708:	ea40 0245 	orr.w	r2, r0, r5, lsl #1
        case 1: return NRF_P1;
   1a70c:	bf18      	it	ne
   1a70e:	f04f 44a0 	movne.w	r4, #1342177280	; 0x50000000
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1a712:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1a716:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1a71a:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1a71e:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
	return 0;
   1a722:	2000      	movs	r0, #0
}
   1a724:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   1a726:	2307      	movs	r3, #7
   1a728:	e7d4      	b.n	1a6d4 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   1a72a:	2304      	movs	r3, #4
   1a72c:	e7d2      	b.n	1a6d4 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   1a72e:	2305      	movs	r3, #5
   1a730:	e7d0      	b.n	1a6d4 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   1a732:	2303      	movs	r3, #3
   1a734:	e7ce      	b.n	1a6d4 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   1a736:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   1a738:	bf42      	ittt	mi
   1a73a:	2201      	movmi	r2, #1
   1a73c:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
   1a73e:	f8c7 250c 	strmi.w	r2, [r7, #1292]	; 0x50c
}
   1a742:	e7dc      	b.n	1a6fe <gpio_nrfx_config+0x6a>
   1a744:	00f00006 	.word	0x00f00006
   1a748:	00100006 	.word	0x00100006
   1a74c:	00400002 	.word	0x00400002
   1a750:	50000300 	.word	0x50000300

0001a754 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
   1a754:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
   1a758:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
   1a75a:	4b08      	ldr	r3, [pc, #32]	; (1a77c <nrf_gpio_cfg_sense_set+0x28>)
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1a75c:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
   1a75e:	bf18      	it	ne
   1a760:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1a764:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   1a768:	f8d3 2700 	ldr.w	r2, [r3, #1792]	; 0x700
   1a76c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1a770:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   1a774:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
}
   1a778:	4770      	bx	lr
   1a77a:	bf00      	nop
   1a77c:	50000300 	.word	0x50000300

0001a780 <check_level_trigger_pins>:
{
   1a780:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct gpio_nrfx_data *data = get_port_data(port);
   1a784:	6903      	ldr	r3, [r0, #16]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   1a786:	f8d0 a004 	ldr.w	sl, [r0, #4]
	uint32_t out = data->pin_int_en;
   1a78a:	68de      	ldr	r6, [r3, #12]
        case 1: return NRF_P1;
   1a78c:	f8df b07c 	ldr.w	fp, [pc, #124]	; 1a80c <check_level_trigger_pins+0x8c>
{
   1a790:	4688      	mov	r8, r1
	out &= ~data->trig_edge & ~data->double_edge;
   1a792:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   1a796:	430a      	orrs	r2, r1
   1a798:	ea26 0602 	bic.w	r6, r6, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   1a79c:	f8da 2004 	ldr.w	r2, [sl, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   1a7a0:	691b      	ldr	r3, [r3, #16]
    return p_reg->IN;
   1a7a2:	f8d2 5510 	ldr.w	r5, [r2, #1296]	; 0x510
   1a7a6:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
   1a7a8:	ea26 0505 	bic.w	r5, r6, r5
	uint32_t check_pins = level_pins;
   1a7ac:	4637      	mov	r7, r6
	uint32_t bit = 1U << pin;
   1a7ae:	2401      	movs	r4, #1
	uint32_t pin = 0U;
   1a7b0:	f04f 0900 	mov.w	r9, #0
	while (check_pins) {
   1a7b4:	b917      	cbnz	r7, 1a7bc <check_level_trigger_pins+0x3c>
}
   1a7b6:	4628      	mov	r0, r5
   1a7b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (check_pins & bit) {
   1a7bc:	423c      	tst	r4, r7
   1a7be:	d021      	beq.n	1a804 <check_level_trigger_pins+0x84>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1a7c0:	f89a 3008 	ldrb.w	r3, [sl, #8]
   1a7c4:	f009 001f 	and.w	r0, r9, #31
			if (!(level_pins & bit)) {
   1a7c8:	4234      	tst	r4, r6
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1a7ca:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
			if (!(level_pins & bit)) {
   1a7ce:	d114      	bne.n	1a7fa <check_level_trigger_pins+0x7a>
    return pin_number >> 5;
   1a7d0:	0942      	lsrs	r2, r0, #5
        case 1: return NRF_P1;
   1a7d2:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   1a7d4:	f000 031f 	and.w	r3, r0, #31
        case 1: return NRF_P1;
   1a7d8:	bf14      	ite	ne
   1a7da:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
   1a7de:	465a      	moveq	r2, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1a7e0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1a7e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   1a7e8:	f3c3 4301 	ubfx	r3, r3, #16, #2
				if (high) {
   1a7ec:	2b02      	cmp	r3, #2
					*sense_levels |= bit;
   1a7ee:	bf02      	ittt	eq
   1a7f0:	f8d8 3000 	ldreq.w	r3, [r8]
   1a7f4:	4323      	orreq	r3, r4
   1a7f6:	f8c8 3000 	streq.w	r3, [r8]
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1a7fa:	2100      	movs	r1, #0
   1a7fc:	f7ff ffaa 	bl	1a754 <nrf_gpio_cfg_sense_set>
			check_pins &= ~bit;
   1a800:	ea27 0704 	bic.w	r7, r7, r4
		++pin;
   1a804:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
   1a808:	0064      	lsls	r4, r4, #1
   1a80a:	e7d3      	b.n	1a7b4 <check_level_trigger_pins+0x34>
   1a80c:	50000300 	.word	0x50000300

0001a810 <gpio_nrfx_pin_interrupt_configure>:
{
   1a810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a812:	460e      	mov	r6, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1a814:	6841      	ldr	r1, [r0, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
   1a816:	6907      	ldr	r7, [r0, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1a818:	7a09      	ldrb	r1, [r1, #8]
   1a81a:	f006 051f 	and.w	r5, r6, #31
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
   1a81e:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   1a822:	ea45 1541 	orr.w	r5, r5, r1, lsl #5
   1a826:	d110      	bne.n	1a84a <gpio_nrfx_pin_interrupt_configure+0x3a>
    return pin_number >> 5;
   1a828:	0968      	lsrs	r0, r5, #5
        case 1: return NRF_P1;
   1a82a:	2801      	cmp	r0, #1
    *p_pin = pin_number & 0x1F;
   1a82c:	f005 011f 	and.w	r1, r5, #31
        case 1: return NRF_P1;
   1a830:	485d      	ldr	r0, [pc, #372]	; (1a9a8 <gpio_nrfx_pin_interrupt_configure+0x198>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1a832:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
        case 1: return NRF_P1;
   1a836:	bf18      	it	ne
   1a838:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1a83c:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1a840:	07c8      	lsls	r0, r1, #31
   1a842:	d507      	bpl.n	1a854 <gpio_nrfx_pin_interrupt_configure+0x44>
		return -ENOTSUP;
   1a844:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1a848:	e093      	b.n	1a972 <gpio_nrfx_pin_interrupt_configure+0x162>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1a84a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1a84e:	68f9      	ldr	r1, [r7, #12]
   1a850:	f000 8091 	beq.w	1a976 <gpio_nrfx_pin_interrupt_configure+0x166>
   1a854:	68f8      	ldr	r0, [r7, #12]
   1a856:	2101      	movs	r1, #1
   1a858:	40b1      	lsls	r1, r6
   1a85a:	4301      	orrs	r1, r0
   1a85c:	6978      	ldr	r0, [r7, #20]
   1a85e:	60f9      	str	r1, [r7, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1a860:	2101      	movs	r1, #1
   1a862:	40b1      	lsls	r1, r6
   1a864:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   1a868:	69ba      	ldr	r2, [r7, #24]
   1a86a:	bf0c      	ite	eq
   1a86c:	4308      	orreq	r0, r1
   1a86e:	4388      	bicne	r0, r1
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   1a870:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   1a874:	bf0c      	ite	eq
   1a876:	430a      	orreq	r2, r1
   1a878:	438a      	bicne	r2, r1
   1a87a:	61ba      	str	r2, [r7, #24]
   1a87c:	693a      	ldr	r2, [r7, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1a87e:	6178      	str	r0, [r7, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   1a880:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   1a884:	bf0c      	ite	eq
   1a886:	4311      	orreq	r1, r2
   1a888:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   1a88c:	4a47      	ldr	r2, [pc, #284]	; (1a9ac <gpio_nrfx_pin_interrupt_configure+0x19c>)
   1a88e:	6139      	str	r1, [r7, #16]
   1a890:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1a894:	2000      	movs	r0, #0
   1a896:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1a898:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   1a89c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   1a8a0:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   1a8a4:	428d      	cmp	r5, r1
   1a8a6:	d16b      	bne.n	1a980 <gpio_nrfx_pin_interrupt_configure+0x170>
		    && (intenset & BIT(i))) {
   1a8a8:	fa23 f100 	lsr.w	r1, r3, r0
   1a8ac:	07c9      	lsls	r1, r1, #31
   1a8ae:	d567      	bpl.n	1a980 <gpio_nrfx_pin_interrupt_configure+0x170>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   1a8b0:	0083      	lsls	r3, r0, #2
   1a8b2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1a8b6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1a8ba:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   1a8be:	f021 0101 	bic.w	r1, r1, #1
   1a8c2:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   1a8c6:	2301      	movs	r3, #1
   1a8c8:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   1a8ca:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   1a8ce:	b2c0      	uxtb	r0, r0
   1a8d0:	f002 f93e 	bl	1cb50 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1a8d4:	4628      	mov	r0, r5
   1a8d6:	2100      	movs	r1, #0
   1a8d8:	f7ff ff3c 	bl	1a754 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   1a8dc:	68f8      	ldr	r0, [r7, #12]
   1a8de:	40f0      	lsrs	r0, r6
   1a8e0:	f010 0001 	ands.w	r0, r0, #1
   1a8e4:	d045      	beq.n	1a972 <gpio_nrfx_pin_interrupt_configure+0x162>
		if (data->trig_edge & BIT(pin)) {
   1a8e6:	6978      	ldr	r0, [r7, #20]
   1a8e8:	40f0      	lsrs	r0, r6
   1a8ea:	f010 0401 	ands.w	r4, r0, #1
   1a8ee:	d04e      	beq.n	1a98e <gpio_nrfx_pin_interrupt_configure+0x17e>
				if (data->double_edge & BIT(pin)) {
   1a8f0:	69bb      	ldr	r3, [r7, #24]
   1a8f2:	40f3      	lsrs	r3, r6
   1a8f4:	07db      	lsls	r3, r3, #31
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1a8f6:	bf5f      	itttt	pl
   1a8f8:	6939      	ldrpl	r1, [r7, #16]
   1a8fa:	fa21 f606 	lsrpl.w	r6, r1, r6
   1a8fe:	f006 0601 	andpl.w	r6, r6, #1
   1a902:	f1c6 0602 	rsbpl	r6, r6, #2
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   1a906:	f10d 0007 	add.w	r0, sp, #7
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1a90a:	bf54      	ite	pl
   1a90c:	b2f6      	uxtbpl	r6, r6
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
   1a90e:	2603      	movmi	r6, #3
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   1a910:	f002 f940 	bl	1cb94 <nrfx_gpiote_channel_alloc>
   1a914:	4b26      	ldr	r3, [pc, #152]	; (1a9b0 <gpio_nrfx_pin_interrupt_configure+0x1a0>)
   1a916:	4298      	cmp	r0, r3
   1a918:	d136      	bne.n	1a988 <gpio_nrfx_pin_interrupt_configure+0x178>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   1a91a:	f89d 1007 	ldrb.w	r1, [sp, #7]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1a91e:	008b      	lsls	r3, r1, #2
   1a920:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1a924:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1a928:	022d      	lsls	r5, r5, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1a92a:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1a92e:	f422 324f 	bic.w	r2, r2, #211968	; 0x33c00
   1a932:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   1a936:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1a93a:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1a93e:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
   1a942:	4315      	orrs	r5, r2
    return ((uint32_t)p_reg + event);
   1a944:	008a      	lsls	r2, r1, #2
   1a946:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1a94a:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1a94e:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1a952:	2000      	movs	r0, #0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1a954:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1a958:	6010      	str	r0, [r2, #0]
   1a95a:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1a95c:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1a960:	f042 0201 	orr.w	r2, r2, #1
   1a964:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->INTENSET = mask;
   1a968:	4a10      	ldr	r2, [pc, #64]	; (1a9ac <gpio_nrfx_pin_interrupt_configure+0x19c>)
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   1a96a:	2301      	movs	r3, #1
   1a96c:	408b      	lsls	r3, r1
   1a96e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1a972:	b003      	add	sp, #12
   1a974:	bdf0      	pop	{r4, r5, r6, r7, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1a976:	2001      	movs	r0, #1
   1a978:	40b0      	lsls	r0, r6
   1a97a:	ea21 0100 	bic.w	r1, r1, r0
   1a97e:	e76d      	b.n	1a85c <gpio_nrfx_pin_interrupt_configure+0x4c>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1a980:	3001      	adds	r0, #1
   1a982:	2808      	cmp	r0, #8
   1a984:	d188      	bne.n	1a898 <gpio_nrfx_pin_interrupt_configure+0x88>
   1a986:	e7a5      	b.n	1a8d4 <gpio_nrfx_pin_interrupt_configure+0xc4>
		return -ENODEV;
   1a988:	f06f 0012 	mvn.w	r0, #18
   1a98c:	e7f1      	b.n	1a972 <gpio_nrfx_pin_interrupt_configure+0x162>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1a98e:	6939      	ldr	r1, [r7, #16]
   1a990:	40f1      	lsrs	r1, r6
   1a992:	f001 0101 	and.w	r1, r1, #1
   1a996:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1a99a:	4628      	mov	r0, r5
   1a99c:	b2c9      	uxtb	r1, r1
   1a99e:	f7ff fed9 	bl	1a754 <nrf_gpio_cfg_sense_set>
	int res = 0;
   1a9a2:	4620      	mov	r0, r4
   1a9a4:	e7e5      	b.n	1a972 <gpio_nrfx_pin_interrupt_configure+0x162>
   1a9a6:	bf00      	nop
   1a9a8:	50000300 	.word	0x50000300
   1a9ac:	40006000 	.word	0x40006000
   1a9b0:	0bad0000 	.word	0x0bad0000

0001a9b4 <gpiote_event_handler>:
{
   1a9b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   1a9b6:	2400      	movs	r4, #0
{
   1a9b8:	b085      	sub	sp, #20
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   1a9ba:	e9cd 4400 	strd	r4, r4, [sp]
	uint32_t sense_levels[GPIO_COUNT] = {0};
   1a9be:	e9cd 4402 	strd	r4, r4, [sp, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a9c2:	4e26      	ldr	r6, [pc, #152]	; (1aa5c <gpiote_event_handler+0xa8>)
   1a9c4:	6835      	ldr	r5, [r6, #0]
	if (port_event) {
   1a9c6:	b15d      	cbz	r5, 1a9e0 <gpiote_event_handler+0x2c>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)),
   1a9c8:	a902      	add	r1, sp, #8
   1a9ca:	4825      	ldr	r0, [pc, #148]	; (1aa60 <gpiote_event_handler+0xac>)
   1a9cc:	f7ff fed8 	bl	1a780 <check_level_trigger_pins>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
   1a9d0:	a903      	add	r1, sp, #12
		fired_triggers[0] =
   1a9d2:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
   1a9d4:	4823      	ldr	r0, [pc, #140]	; (1aa64 <gpiote_event_handler+0xb0>)
   1a9d6:	f7ff fed3 	bl	1a780 <check_level_trigger_pins>
		fired_triggers[1] =
   1a9da:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1a9dc:	6034      	str	r4, [r6, #0]
   1a9de:	6833      	ldr	r3, [r6, #0]
    return p_reg->INTENSET & mask;
   1a9e0:	4c21      	ldr	r4, [pc, #132]	; (1aa68 <gpiote_event_handler+0xb4>)
{
   1a9e2:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   1a9e4:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1a9e6:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
   1a9e8:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
   1a9ec:	fa06 f102 	lsl.w	r1, r6, r2
   1a9f0:	4219      	tst	r1, r3
   1a9f2:	d01b      	beq.n	1aa2c <gpiote_event_handler+0x78>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a9f4:	0091      	lsls	r1, r2, #2
   1a9f6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1a9fa:	f501 41c2 	add.w	r1, r1, #24832	; 0x6100
   1a9fe:	680b      	ldr	r3, [r1, #0]
   1aa00:	b1a3      	cbz	r3, 1aa2c <gpiote_event_handler+0x78>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1aa02:	f502 73a2 	add.w	r3, r2, #324	; 0x144
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   1aa06:	af04      	add	r7, sp, #16
   1aa08:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1aa0c:	f8c1 c000 	str.w	ip, [r1]
   1aa10:	f3c3 3040 	ubfx	r0, r3, #13, #1
   1aa14:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   1aa18:	f3c3 2304 	ubfx	r3, r3, #8, #5
   1aa1c:	f850 7c10 	ldr.w	r7, [r0, #-16]
   1aa20:	fa06 f303 	lsl.w	r3, r6, r3
   1aa24:	433b      	orrs	r3, r7
   1aa26:	f840 3c10 	str.w	r3, [r0, #-16]
   1aa2a:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1aa2c:	3201      	adds	r2, #1
   1aa2e:	2a08      	cmp	r2, #8
   1aa30:	d1da      	bne.n	1a9e8 <gpiote_event_handler+0x34>
	if (fired_triggers[0]) {
   1aa32:	9a00      	ldr	r2, [sp, #0]
   1aa34:	b11a      	cbz	r2, 1aa3e <gpiote_event_handler+0x8a>
	gpio_fire_callbacks(list, port, pins);
   1aa36:	490a      	ldr	r1, [pc, #40]	; (1aa60 <gpiote_event_handler+0xac>)
   1aa38:	480c      	ldr	r0, [pc, #48]	; (1aa6c <gpiote_event_handler+0xb8>)
   1aa3a:	f008 f908 	bl	22c4e <gpio_fire_callbacks>
	if (fired_triggers[1]) {
   1aa3e:	9a01      	ldr	r2, [sp, #4]
   1aa40:	b11a      	cbz	r2, 1aa4a <gpiote_event_handler+0x96>
	gpio_fire_callbacks(list, port, pins);
   1aa42:	4908      	ldr	r1, [pc, #32]	; (1aa64 <gpiote_event_handler+0xb0>)
   1aa44:	480a      	ldr	r0, [pc, #40]	; (1aa70 <gpiote_event_handler+0xbc>)
   1aa46:	f008 f902 	bl	22c4e <gpio_fire_callbacks>
	if (port_event) {
   1aa4a:	b12d      	cbz	r5, 1aa58 <gpiote_event_handler+0xa4>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
   1aa4c:	4804      	ldr	r0, [pc, #16]	; (1aa60 <gpiote_event_handler+0xac>)
   1aa4e:	f008 f968 	bl	22d22 <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   1aa52:	4804      	ldr	r0, [pc, #16]	; (1aa64 <gpiote_event_handler+0xb0>)
   1aa54:	f008 f965 	bl	22d22 <cfg_level_pins>
}
   1aa58:	b005      	add	sp, #20
   1aa5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1aa5c:	4000617c 	.word	0x4000617c
   1aa60:	200007fc 	.word	0x200007fc
   1aa64:	20000814 	.word	0x20000814
   1aa68:	40006000 	.word	0x40006000
   1aa6c:	20002a4c 	.word	0x20002a4c
   1aa70:	20002a68 	.word	0x20002a68

0001aa74 <spi_1_init>:
#ifdef CONFIG_SPI_0_NRF_SPI
SPI_NRFX_SPI_DEVICE(0);
#endif

#ifdef CONFIG_SPI_1_NRF_SPI
SPI_NRFX_SPI_DEVICE(1);
   1aa74:	b538      	push	{r3, r4, r5, lr}
   1aa76:	4604      	mov	r4, r0
   1aa78:	2200      	movs	r2, #0
   1aa7a:	2101      	movs	r1, #1
   1aa7c:	2004      	movs	r0, #4
   1aa7e:	f7ea ffc3 	bl	5a08 <z_arm_irq_priority_set>
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   1aa82:	6923      	ldr	r3, [r4, #16]
	result = nrfx_spi_init(&get_dev_config(dev)->spi,
   1aa84:	4a0e      	ldr	r2, [pc, #56]	; (1aac0 <spi_1_init+0x4c>)
	dev_data->dev = dev;
   1aa86:	65dc      	str	r4, [r3, #92]	; 0x5c
	result = nrfx_spi_init(&get_dev_config(dev)->spi,
   1aa88:	6860      	ldr	r0, [r4, #4]
   1aa8a:	f100 0108 	add.w	r1, r0, #8
   1aa8e:	f002 f8c7 	bl	1cc20 <nrfx_spi_init>
	if (result != NRFX_SUCCESS) {
   1aa92:	4b0c      	ldr	r3, [pc, #48]	; (1aac4 <spi_1_init+0x50>)
   1aa94:	4298      	cmp	r0, r3
   1aa96:	d011      	beq.n	1aabc <spi_1_init+0x48>
   1aa98:	4b0b      	ldr	r3, [pc, #44]	; (1aac8 <spi_1_init+0x54>)
   1aa9a:	4a0c      	ldr	r2, [pc, #48]	; (1aacc <spi_1_init+0x58>)
		LOG_ERR("Failed to initialize device: %s", dev->name);
   1aa9c:	6821      	ldr	r1, [r4, #0]
   1aa9e:	480c      	ldr	r0, [pc, #48]	; (1aad0 <spi_1_init+0x5c>)
   1aaa0:	1ad2      	subs	r2, r2, r3
   1aaa2:	08d2      	lsrs	r2, r2, #3
   1aaa4:	0192      	lsls	r2, r2, #6
   1aaa6:	f042 0201 	orr.w	r2, r2, #1
   1aaaa:	f004 fb1e 	bl	1f0ea <log_1>
		return -EBUSY;
   1aaae:	f06f 050f 	mvn.w	r5, #15
SPI_NRFX_SPI_DEVICE(1);
   1aab2:	6920      	ldr	r0, [r4, #16]
   1aab4:	f008 f990 	bl	22dd8 <spi_context_unlock_unconditionally>
   1aab8:	4628      	mov	r0, r5
   1aaba:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
   1aabc:	2500      	movs	r5, #0
   1aabe:	e7f8      	b.n	1aab2 <spi_1_init+0x3e>
   1aac0:	0001add5 	.word	0x0001add5
   1aac4:	0bad0000 	.word	0x0bad0000
   1aac8:	00023ed8 	.word	0x00023ed8
   1aacc:	00024030 	.word	0x00024030
   1aad0:	00027824 	.word	0x00027824

0001aad4 <transfer_next_chunk>:
{
   1aad4:	b530      	push	{r4, r5, lr}
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   1aad6:	6905      	ldr	r5, [r0, #16]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   1aad8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   1aada:	6dab      	ldr	r3, [r5, #88]	; 0x58
{
   1aadc:	b085      	sub	sp, #20
   1aade:	b982      	cbnz	r2, 1ab02 <transfer_next_chunk+0x2e>
	if (chunk_len > 0) {
   1aae0:	bb73      	cbnz	r3, 1ab40 <transfer_next_chunk+0x6c>
	int error = 0;
   1aae2:	461c      	mov	r4, r3
	_spi_context_cs_control(ctx, on, false);
   1aae4:	2200      	movs	r2, #0
   1aae6:	4611      	mov	r1, r2
   1aae8:	4628      	mov	r0, r5
   1aaea:	f008 f950 	bl	22d8e <_spi_context_cs_control.isra.0>
	ctx->sync_status = status;
   1aaee:	63ac      	str	r4, [r5, #56]	; 0x38
	z_impl_k_sem_give(sem);
   1aaf0:	f105 0020 	add.w	r0, r5, #32
   1aaf4:	f003 f85a 	bl	1dbac <z_impl_k_sem_give>
	dev_data->busy = false;
   1aaf8:	2300      	movs	r3, #0
   1aafa:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
}
   1aafe:	b005      	add	sp, #20
   1ab00:	bd30      	pop	{r4, r5, pc}
		return ctx->rx_len;
	} else if (!ctx->rx_len) {
   1ab02:	4611      	mov	r1, r2
   1ab04:	b113      	cbz	r3, 1ab0c <transfer_next_chunk+0x38>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   1ab06:	429a      	cmp	r2, r3
   1ab08:	bf28      	it	cs
   1ab0a:	4619      	movcs	r1, r3
		xfer.p_tx_buffer = ctx->tx_buf;
   1ab0c:	6cec      	ldr	r4, [r5, #76]	; 0x4c
		dev_data->chunk_len = chunk_len;
   1ab0e:	6629      	str	r1, [r5, #96]	; 0x60
		xfer.p_tx_buffer = ctx->tx_buf;
   1ab10:	9400      	str	r4, [sp, #0]
	return !!(ctx->tx_buf && ctx->tx_len);
   1ab12:	b1bc      	cbz	r4, 1ab44 <transfer_next_chunk+0x70>
   1ab14:	2a00      	cmp	r2, #0
   1ab16:	bf18      	it	ne
   1ab18:	460a      	movne	r2, r1
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1ab1a:	9201      	str	r2, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   1ab1c:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   1ab1e:	9202      	str	r2, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   1ab20:	b192      	cbz	r2, 1ab48 <transfer_next_chunk+0x74>
   1ab22:	2b00      	cmp	r3, #0
   1ab24:	bf18      	it	ne
   1ab26:	460b      	movne	r3, r1
		result = nrfx_spi_xfer(&get_dev_config(dev)->spi, &xfer, 0);
   1ab28:	6840      	ldr	r0, [r0, #4]
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1ab2a:	9303      	str	r3, [sp, #12]
		result = nrfx_spi_xfer(&get_dev_config(dev)->spi, &xfer, 0);
   1ab2c:	2200      	movs	r2, #0
   1ab2e:	4669      	mov	r1, sp
   1ab30:	f002 f918 	bl	1cd64 <nrfx_spi_xfer>
		if (result == NRFX_SUCCESS) {
   1ab34:	4b05      	ldr	r3, [pc, #20]	; (1ab4c <transfer_next_chunk+0x78>)
   1ab36:	4298      	cmp	r0, r3
   1ab38:	d0e1      	beq.n	1aafe <transfer_next_chunk+0x2a>
		error = -EIO;
   1ab3a:	f06f 0404 	mvn.w	r4, #4
   1ab3e:	e7d1      	b.n	1aae4 <transfer_next_chunk+0x10>
   1ab40:	4619      	mov	r1, r3
   1ab42:	e7e3      	b.n	1ab0c <transfer_next_chunk+0x38>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1ab44:	4622      	mov	r2, r4
   1ab46:	e7e8      	b.n	1ab1a <transfer_next_chunk+0x46>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1ab48:	4613      	mov	r3, r2
   1ab4a:	e7ed      	b.n	1ab28 <transfer_next_chunk+0x54>
   1ab4c:	0bad0000 	.word	0x0bad0000

0001ab50 <spi_nrfx_transceive>:
{
   1ab50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ab54:	461e      	mov	r6, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1ab56:	888b      	ldrh	r3, [r1, #4]
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   1ab58:	6904      	ldr	r4, [r0, #16]
   1ab5a:	045b      	lsls	r3, r3, #17
{
   1ab5c:	4680      	mov	r8, r0
   1ab5e:	460d      	mov	r5, r1
   1ab60:	4617      	mov	r7, r2
   1ab62:	d42d      	bmi.n	1abc0 <spi_nrfx_transceive+0x70>
	return z_impl_k_sem_take(sem, timeout);
   1ab64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ab68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ab6c:	f104 0008 	add.w	r0, r4, #8
   1ab70:	f003 f842 	bl	1dbf8 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   1ab74:	6065      	str	r5, [r4, #4]
	struct spi_context *ctx = &get_dev_data(dev)->ctx;
   1ab76:	f8d8 2010 	ldr.w	r2, [r8, #16]
	if (spi_context_configured(ctx, spi_cfg)) {
   1ab7a:	6813      	ldr	r3, [r2, #0]
   1ab7c:	429d      	cmp	r5, r3
   1ab7e:	f000 80b3 	beq.w	1ace8 <spi_nrfx_transceive+0x198>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   1ab82:	88ab      	ldrh	r3, [r5, #4]
   1ab84:	07d8      	lsls	r0, r3, #31
   1ab86:	d522      	bpl.n	1abce <spi_nrfx_transceive+0x7e>
   1ab88:	4a83      	ldr	r2, [pc, #524]	; (1ad98 <spi_nrfx_transceive+0x248>)
   1ab8a:	4b84      	ldr	r3, [pc, #528]	; (1ad9c <spi_nrfx_transceive+0x24c>)
		LOG_ERR("Slave mode is not supported on %s",
   1ab8c:	f8d8 1000 	ldr.w	r1, [r8]
   1ab90:	4883      	ldr	r0, [pc, #524]	; (1ada0 <spi_nrfx_transceive+0x250>)
   1ab92:	1ad2      	subs	r2, r2, r3
   1ab94:	08d2      	lsrs	r2, r2, #3
   1ab96:	0192      	lsls	r2, r2, #6
   1ab98:	f042 0201 	orr.w	r2, r2, #1
   1ab9c:	f004 faa5 	bl	1f0ea <log_1>
		return -EINVAL;
   1aba0:	f06f 0515 	mvn.w	r5, #21
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   1aba4:	6823      	ldr	r3, [r4, #0]
   1aba6:	889b      	ldrh	r3, [r3, #4]
   1aba8:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
   1abac:	d104      	bne.n	1abb8 <spi_nrfx_transceive+0x68>
		ctx->owner = NULL;
   1abae:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   1abb0:	f104 0008 	add.w	r0, r4, #8
   1abb4:	f002 fffa 	bl	1dbac <z_impl_k_sem_give>
}
   1abb8:	4628      	mov	r0, r5
   1abba:	b003      	add	sp, #12
   1abbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1abc0:	6923      	ldr	r3, [r4, #16]
   1abc2:	2b00      	cmp	r3, #0
   1abc4:	d1ce      	bne.n	1ab64 <spi_nrfx_transceive+0x14>
		(k_sem_count_get(&ctx->lock) == 0) &&
   1abc6:	6863      	ldr	r3, [r4, #4]
   1abc8:	4299      	cmp	r1, r3
   1abca:	d1cb      	bne.n	1ab64 <spi_nrfx_transceive+0x14>
   1abcc:	e7d3      	b.n	1ab76 <spi_nrfx_transceive+0x26>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
   1abce:	0719      	lsls	r1, r3, #28
   1abd0:	d50a      	bpl.n	1abe8 <spi_nrfx_transceive+0x98>
   1abd2:	4971      	ldr	r1, [pc, #452]	; (1ad98 <spi_nrfx_transceive+0x248>)
   1abd4:	4b71      	ldr	r3, [pc, #452]	; (1ad9c <spi_nrfx_transceive+0x24c>)
		LOG_ERR("Loopback mode is not supported");
   1abd6:	4873      	ldr	r0, [pc, #460]	; (1ada4 <spi_nrfx_transceive+0x254>)
   1abd8:	1ac9      	subs	r1, r1, r3
   1abda:	08c9      	lsrs	r1, r1, #3
   1abdc:	0189      	lsls	r1, r1, #6
   1abde:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Word sizes other than 8 bits"
   1abe2:	f004 fa75 	bl	1f0d0 <log_0>
   1abe6:	e7db      	b.n	1aba0 <spi_nrfx_transceive+0x50>
	if ((spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
   1abe8:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
   1abec:	d008      	beq.n	1ac00 <spi_nrfx_transceive+0xb0>
   1abee:	496a      	ldr	r1, [pc, #424]	; (1ad98 <spi_nrfx_transceive+0x248>)
   1abf0:	4b6a      	ldr	r3, [pc, #424]	; (1ad9c <spi_nrfx_transceive+0x24c>)
		LOG_ERR("Only single line mode is supported");
   1abf2:	486d      	ldr	r0, [pc, #436]	; (1ada8 <spi_nrfx_transceive+0x258>)
   1abf4:	1ac9      	subs	r1, r1, r3
   1abf6:	08c9      	lsrs	r1, r1, #3
   1abf8:	0189      	lsls	r1, r1, #6
   1abfa:	f041 0101 	orr.w	r1, r1, #1
   1abfe:	e7f0      	b.n	1abe2 <spi_nrfx_transceive+0x92>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   1ac00:	f3c3 1345 	ubfx	r3, r3, #5, #6
   1ac04:	2b08      	cmp	r3, #8
   1ac06:	d008      	beq.n	1ac1a <spi_nrfx_transceive+0xca>
   1ac08:	4963      	ldr	r1, [pc, #396]	; (1ad98 <spi_nrfx_transceive+0x248>)
   1ac0a:	4b64      	ldr	r3, [pc, #400]	; (1ad9c <spi_nrfx_transceive+0x24c>)
		LOG_ERR("Word sizes other than 8 bits"
   1ac0c:	4867      	ldr	r0, [pc, #412]	; (1adac <spi_nrfx_transceive+0x25c>)
   1ac0e:	1ac9      	subs	r1, r1, r3
   1ac10:	08c9      	lsrs	r1, r1, #3
   1ac12:	0189      	lsls	r1, r1, #6
   1ac14:	f041 0101 	orr.w	r1, r1, #1
   1ac18:	e7e3      	b.n	1abe2 <spi_nrfx_transceive+0x92>
	if (spi_cfg->frequency < 125000) {
   1ac1a:	6829      	ldr	r1, [r5, #0]
   1ac1c:	4b64      	ldr	r3, [pc, #400]	; (1adb0 <spi_nrfx_transceive+0x260>)
   1ac1e:	4299      	cmp	r1, r3
   1ac20:	d808      	bhi.n	1ac34 <spi_nrfx_transceive+0xe4>
   1ac22:	495d      	ldr	r1, [pc, #372]	; (1ad98 <spi_nrfx_transceive+0x248>)
   1ac24:	4b5d      	ldr	r3, [pc, #372]	; (1ad9c <spi_nrfx_transceive+0x24c>)
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   1ac26:	4863      	ldr	r0, [pc, #396]	; (1adb4 <spi_nrfx_transceive+0x264>)
   1ac28:	1ac9      	subs	r1, r1, r3
   1ac2a:	08c9      	lsrs	r1, r1, #3
   1ac2c:	0189      	lsls	r1, r1, #6
   1ac2e:	f041 0101 	orr.w	r1, r1, #1
   1ac32:	e7d6      	b.n	1abe2 <spi_nrfx_transceive+0x92>
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
   1ac34:	68ab      	ldr	r3, [r5, #8]
	const nrfx_spi_t *spi = &get_dev_config(dev)->spi;
   1ac36:	f8d8 9004 	ldr.w	r9, [r8, #4]
	ctx->config = spi_cfg;
   1ac3a:	6015      	str	r5, [r2, #0]
   1ac3c:	2b00      	cmp	r3, #0
   1ac3e:	d07d      	beq.n	1ad3c <spi_nrfx_transceive+0x1ec>
   1ac40:	6818      	ldr	r0, [r3, #0]
   1ac42:	2800      	cmp	r0, #0
   1ac44:	d07a      	beq.n	1ad3c <spi_nrfx_transceive+0x1ec>
				   ctx->config->cs->gpio_dt_flags |
   1ac46:	f893 a009 	ldrb.w	sl, [r3, #9]
		gpio_pin_configure(ctx->config->cs->gpio_dev,
   1ac4a:	7a19      	ldrb	r1, [r3, #8]
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
   1ac4c:	f8d0 b010 	ldr.w	fp, [r0, #16]
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1ac50:	f01a 0f01 	tst.w	sl, #1
   1ac54:	bf0c      	ite	eq
   1ac56:	f44a 5ab0 	orreq.w	sl, sl, #5632	; 0x1600
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1ac5a:	f48a 5ad0 	eorne.w	sl, sl, #6656	; 0x1a00
	return api->pin_configure(port, pin, flags);
   1ac5e:	6883      	ldr	r3, [r0, #8]
   1ac60:	9101      	str	r1, [sp, #4]
   1ac62:	681b      	ldr	r3, [r3, #0]
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1ac64:	f42a 5280 	bic.w	r2, sl, #4096	; 0x1000
	return api->pin_configure(port, pin, flags);
   1ac68:	4798      	blx	r3
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_config(port, pin, flags);
	if (ret != 0) {
   1ac6a:	b968      	cbnz	r0, 1ac88 <spi_nrfx_transceive+0x138>
		return ret;
	}

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1ac6c:	9901      	ldr	r1, [sp, #4]
   1ac6e:	f8db 2000 	ldr.w	r2, [fp]
   1ac72:	2301      	movs	r3, #1
   1ac74:	fa03 f101 	lsl.w	r1, r3, r1
   1ac78:	f01a 0f01 	tst.w	sl, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1ac7c:	bf14      	ite	ne
   1ac7e:	4311      	orrne	r1, r2
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1ac80:	ea22 0101 	biceq.w	r1, r2, r1
   1ac84:	f8cb 1000 	str.w	r1, [fp]
	nrf_spi_configure(spi->p_reg,
   1ac88:	88a9      	ldrh	r1, [r5, #4]
   1ac8a:	f8d9 2000 	ldr.w	r2, [r9]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1ac8e:	0788      	lsls	r0, r1, #30
   1ac90:	f001 0304 	and.w	r3, r1, #4
   1ac94:	d55d      	bpl.n	1ad52 <spi_nrfx_transceive+0x202>
			return NRF_SPI_MODE_2;
   1ac96:	2b00      	cmp	r3, #0
   1ac98:	bf14      	ite	ne
   1ac9a:	2303      	movne	r3, #3
   1ac9c:	2302      	moveq	r3, #2
                                         nrf_spi_mode_t      spi_mode,
                                         nrf_spi_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPI_BIT_ORDER_MSB_FIRST ?
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
    switch (spi_mode)
   1ac9e:	2b02      	cmp	r3, #2
	if (operation & SPI_TRANSFER_LSB) {
   1aca0:	f3c1 1100 	ubfx	r1, r1, #4, #1
   1aca4:	d059      	beq.n	1ad5a <spi_nrfx_transceive+0x20a>
   1aca6:	2b03      	cmp	r3, #3
   1aca8:	d05a      	beq.n	1ad60 <spi_nrfx_transceive+0x210>
   1acaa:	2b01      	cmp	r3, #1
   1acac:	d101      	bne.n	1acb2 <spi_nrfx_transceive+0x162>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Leading    << SPI_CONFIG_CPHA_Pos);
        break;

    case NRF_SPI_MODE_1:
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
   1acae:	f041 0102 	orr.w	r1, r1, #2
	if (frequency < 250000) {
   1acb2:	4b41      	ldr	r3, [pc, #260]	; (1adb8 <spi_nrfx_transceive+0x268>)
    case NRF_SPI_MODE_3:
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Trailing   << SPI_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   1acb4:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
	nrf_spi_frequency_set(spi->p_reg,
   1acb8:	6829      	ldr	r1, [r5, #0]
	if (frequency < 250000) {
   1acba:	4299      	cmp	r1, r3
   1acbc:	d953      	bls.n	1ad66 <spi_nrfx_transceive+0x216>
	} else if (frequency < 500000) {
   1acbe:	4b3f      	ldr	r3, [pc, #252]	; (1adbc <spi_nrfx_transceive+0x26c>)
   1acc0:	4299      	cmp	r1, r3
   1acc2:	d953      	bls.n	1ad6c <spi_nrfx_transceive+0x21c>
	} else if (frequency < 1000000) {
   1acc4:	4b3e      	ldr	r3, [pc, #248]	; (1adc0 <spi_nrfx_transceive+0x270>)
   1acc6:	4299      	cmp	r1, r3
   1acc8:	d953      	bls.n	1ad72 <spi_nrfx_transceive+0x222>
	} else if (frequency < 2000000) {
   1acca:	4b3e      	ldr	r3, [pc, #248]	; (1adc4 <spi_nrfx_transceive+0x274>)
   1accc:	4299      	cmp	r1, r3
   1acce:	d953      	bls.n	1ad78 <spi_nrfx_transceive+0x228>
	} else if (frequency < 4000000) {
   1acd0:	4b3d      	ldr	r3, [pc, #244]	; (1adc8 <spi_nrfx_transceive+0x278>)
   1acd2:	4299      	cmp	r1, r3
   1acd4:	d953      	bls.n	1ad7e <spi_nrfx_transceive+0x22e>
		return NRF_SPI_FREQ_8M;
   1acd6:	4b3d      	ldr	r3, [pc, #244]	; (1adcc <spi_nrfx_transceive+0x27c>)
   1acd8:	4299      	cmp	r1, r3
   1acda:	bf34      	ite	cc
   1acdc:	f04f 4180 	movcc.w	r1, #1073741824	; 0x40000000
   1ace0:	f04f 4100 	movcs.w	r1, #2147483648	; 0x80000000
    p_reg->FREQUENCY = (uint32_t)frequency;
   1ace4:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
		dev_data->busy = true;
   1ace8:	2301      	movs	r3, #1
   1acea:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	if (tx_bufs) {
   1acee:	2f00      	cmp	r7, #0
   1acf0:	d048      	beq.n	1ad84 <spi_nrfx_transceive+0x234>
		ctx->current_tx = tx_bufs->buffers;
   1acf2:	683b      	ldr	r3, [r7, #0]
		ctx->tx_count = tx_bufs->count;
   1acf4:	687a      	ldr	r2, [r7, #4]
		ctx->current_tx = tx_bufs->buffers;
   1acf6:	63e3      	str	r3, [r4, #60]	; 0x3c
		ctx->tx_count = tx_bufs->count;
   1acf8:	6422      	str	r2, [r4, #64]	; 0x40
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   1acfa:	681a      	ldr	r2, [r3, #0]
		ctx->tx_len = ctx->current_tx->len / dfs;
   1acfc:	685b      	ldr	r3, [r3, #4]
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   1acfe:	64e2      	str	r2, [r4, #76]	; 0x4c
		ctx->tx_len = ctx->current_tx->len / dfs;
   1ad00:	6523      	str	r3, [r4, #80]	; 0x50
	if (rx_bufs) {
   1ad02:	2e00      	cmp	r6, #0
   1ad04:	d043      	beq.n	1ad8e <spi_nrfx_transceive+0x23e>
		ctx->current_rx = rx_bufs->buffers;
   1ad06:	6833      	ldr	r3, [r6, #0]
		ctx->rx_count = rx_bufs->count;
   1ad08:	6872      	ldr	r2, [r6, #4]
		ctx->current_rx = rx_bufs->buffers;
   1ad0a:	6463      	str	r3, [r4, #68]	; 0x44
		ctx->rx_count = rx_bufs->count;
   1ad0c:	64a2      	str	r2, [r4, #72]	; 0x48
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   1ad0e:	681a      	ldr	r2, [r3, #0]
		ctx->rx_len = ctx->current_rx->len / dfs;
   1ad10:	685b      	ldr	r3, [r3, #4]
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   1ad12:	6562      	str	r2, [r4, #84]	; 0x54
		ctx->rx_len = ctx->current_rx->len / dfs;
   1ad14:	65a3      	str	r3, [r4, #88]	; 0x58
	ctx->sync_status = 0;
   1ad16:	2200      	movs	r2, #0
   1ad18:	63a2      	str	r2, [r4, #56]	; 0x38
	_spi_context_cs_control(ctx, on, false);
   1ad1a:	2101      	movs	r1, #1
   1ad1c:	4620      	mov	r0, r4
   1ad1e:	f008 f836 	bl	22d8e <_spi_context_cs_control.isra.0>
		transfer_next_chunk(dev);
   1ad22:	4640      	mov	r0, r8
   1ad24:	f7ff fed6 	bl	1aad4 <transfer_next_chunk>
	return z_impl_k_sem_take(sem, timeout);
   1ad28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ad2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ad30:	f104 0020 	add.w	r0, r4, #32
   1ad34:	f002 ff60 	bl	1dbf8 <z_impl_k_sem_take>
	status = ctx->sync_status;
   1ad38:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	return status;
   1ad3a:	e733      	b.n	1aba4 <spi_nrfx_transceive+0x54>
   1ad3c:	4b17      	ldr	r3, [pc, #92]	; (1ad9c <spi_nrfx_transceive+0x24c>)
   1ad3e:	4916      	ldr	r1, [pc, #88]	; (1ad98 <spi_nrfx_transceive+0x248>)
		LOG_INF("CS control inhibited (no GPIO device)");
   1ad40:	4823      	ldr	r0, [pc, #140]	; (1add0 <spi_nrfx_transceive+0x280>)
   1ad42:	1ac9      	subs	r1, r1, r3
   1ad44:	08c9      	lsrs	r1, r1, #3
   1ad46:	0189      	lsls	r1, r1, #6
   1ad48:	f041 0103 	orr.w	r1, r1, #3
   1ad4c:	f004 f9c0 	bl	1f0d0 <log_0>
   1ad50:	e79a      	b.n	1ac88 <spi_nrfx_transceive+0x138>
			return NRF_SPI_MODE_0;
   1ad52:	3b00      	subs	r3, #0
   1ad54:	bf18      	it	ne
   1ad56:	2301      	movne	r3, #1
   1ad58:	e7a1      	b.n	1ac9e <spi_nrfx_transceive+0x14e>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   1ad5a:	f041 0104 	orr.w	r1, r1, #4
        break;
   1ad5e:	e7a8      	b.n	1acb2 <spi_nrfx_transceive+0x162>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   1ad60:	f041 0106 	orr.w	r1, r1, #6
        break;
   1ad64:	e7a5      	b.n	1acb2 <spi_nrfx_transceive+0x162>
		return NRF_SPI_FREQ_125K;
   1ad66:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   1ad6a:	e7bb      	b.n	1ace4 <spi_nrfx_transceive+0x194>
		return NRF_SPI_FREQ_250K;
   1ad6c:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   1ad70:	e7b8      	b.n	1ace4 <spi_nrfx_transceive+0x194>
		return NRF_SPI_FREQ_500K;
   1ad72:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   1ad76:	e7b5      	b.n	1ace4 <spi_nrfx_transceive+0x194>
		return NRF_SPI_FREQ_1M;
   1ad78:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   1ad7c:	e7b2      	b.n	1ace4 <spi_nrfx_transceive+0x194>
		return NRF_SPI_FREQ_2M;
   1ad7e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   1ad82:	e7af      	b.n	1ace4 <spi_nrfx_transceive+0x194>
		ctx->tx_count = 0;
   1ad84:	e9c4 770f 	strd	r7, r7, [r4, #60]	; 0x3c
		ctx->tx_len = 0;
   1ad88:	e9c4 7713 	strd	r7, r7, [r4, #76]	; 0x4c
   1ad8c:	e7b9      	b.n	1ad02 <spi_nrfx_transceive+0x1b2>
		ctx->rx_count = 0;
   1ad8e:	e9c4 6611 	strd	r6, r6, [r4, #68]	; 0x44
		ctx->rx_len = 0;
   1ad92:	e9c4 6615 	strd	r6, r6, [r4, #84]	; 0x54
   1ad96:	e7be      	b.n	1ad16 <spi_nrfx_transceive+0x1c6>
   1ad98:	00024030 	.word	0x00024030
   1ad9c:	00023ed8 	.word	0x00023ed8
   1ada0:	00027844 	.word	0x00027844
   1ada4:	00027866 	.word	0x00027866
   1ada8:	00027885 	.word	0x00027885
   1adac:	000278a8 	.word	0x000278a8
   1adb0:	0001e847 	.word	0x0001e847
   1adb4:	000278d7 	.word	0x000278d7
   1adb8:	0003d08f 	.word	0x0003d08f
   1adbc:	0007a11f 	.word	0x0007a11f
   1adc0:	000f423f 	.word	0x000f423f
   1adc4:	001e847f 	.word	0x001e847f
   1adc8:	003d08ff 	.word	0x003d08ff
   1adcc:	007a1200 	.word	0x007a1200
   1add0:	00027908 	.word	0x00027908

0001add4 <event_handler>:
{
   1add4:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
   1add6:	7803      	ldrb	r3, [r0, #0]
{
   1add8:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
   1adda:	2b00      	cmp	r3, #0
   1addc:	d14e      	bne.n	1ae7c <event_handler+0xa8>
	if (!ctx->tx_len) {
   1adde:	6d0b      	ldr	r3, [r1, #80]	; 0x50
   1ade0:	b163      	cbz	r3, 1adfc <event_handler+0x28>
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   1ade2:	6e0a      	ldr	r2, [r1, #96]	; 0x60
	if (len > ctx->tx_len) {
   1ade4:	429a      	cmp	r2, r3
   1ade6:	d91d      	bls.n	1ae24 <event_handler+0x50>
   1ade8:	4925      	ldr	r1, [pc, #148]	; (1ae80 <event_handler+0xac>)
   1adea:	4b26      	ldr	r3, [pc, #152]	; (1ae84 <event_handler+0xb0>)
		LOG_ERR("Update exceeds current buffer");
   1adec:	4826      	ldr	r0, [pc, #152]	; (1ae88 <event_handler+0xb4>)
   1adee:	1ac9      	subs	r1, r1, r3
   1adf0:	08c9      	lsrs	r1, r1, #3
   1adf2:	0189      	lsls	r1, r1, #6
   1adf4:	f041 0101 	orr.w	r1, r1, #1
   1adf8:	f004 f96a 	bl	1f0d0 <log_0>
	if (!ctx->rx_len) {
   1adfc:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1adfe:	b163      	cbz	r3, 1ae1a <event_handler+0x46>
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   1ae00:	6e22      	ldr	r2, [r4, #96]	; 0x60
	if (len > ctx->rx_len) {
   1ae02:	429a      	cmp	r2, r3
   1ae04:	d924      	bls.n	1ae50 <event_handler+0x7c>
   1ae06:	491e      	ldr	r1, [pc, #120]	; (1ae80 <event_handler+0xac>)
   1ae08:	4b1e      	ldr	r3, [pc, #120]	; (1ae84 <event_handler+0xb0>)
		LOG_ERR("Update exceeds current buffer");
   1ae0a:	481f      	ldr	r0, [pc, #124]	; (1ae88 <event_handler+0xb4>)
   1ae0c:	1ac9      	subs	r1, r1, r3
   1ae0e:	08c9      	lsrs	r1, r1, #3
   1ae10:	0189      	lsls	r1, r1, #6
   1ae12:	f041 0101 	orr.w	r1, r1, #1
   1ae16:	f004 f95b 	bl	1f0d0 <log_0>
		transfer_next_chunk(dev_data->dev);
   1ae1a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
}
   1ae1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
   1ae20:	f7ff be58 	b.w	1aad4 <transfer_next_chunk>
	ctx->tx_len -= len;
   1ae24:	1a9b      	subs	r3, r3, r2
   1ae26:	650b      	str	r3, [r1, #80]	; 0x50
	if (!ctx->tx_len) {
   1ae28:	b963      	cbnz	r3, 1ae44 <event_handler+0x70>
		ctx->tx_count--;
   1ae2a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   1ae2c:	3b01      	subs	r3, #1
   1ae2e:	640b      	str	r3, [r1, #64]	; 0x40
		if (ctx->tx_count) {
   1ae30:	b163      	cbz	r3, 1ae4c <event_handler+0x78>
			ctx->current_tx++;
   1ae32:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   1ae34:	f103 0208 	add.w	r2, r3, #8
   1ae38:	63ca      	str	r2, [r1, #60]	; 0x3c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   1ae3a:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
   1ae3c:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   1ae3e:	64ca      	str	r2, [r1, #76]	; 0x4c
			ctx->tx_len = ctx->current_tx->len / dfs;
   1ae40:	650b      	str	r3, [r1, #80]	; 0x50
   1ae42:	e7db      	b.n	1adfc <event_handler+0x28>
	} else if (ctx->tx_buf) {
   1ae44:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
   1ae46:	2b00      	cmp	r3, #0
   1ae48:	d0d8      	beq.n	1adfc <event_handler+0x28>
		ctx->tx_buf += dfs * len;
   1ae4a:	4413      	add	r3, r2
   1ae4c:	64e3      	str	r3, [r4, #76]	; 0x4c
   1ae4e:	e7d5      	b.n	1adfc <event_handler+0x28>
	ctx->rx_len -= len;
   1ae50:	1a9b      	subs	r3, r3, r2
   1ae52:	65a3      	str	r3, [r4, #88]	; 0x58
	if (!ctx->rx_len) {
   1ae54:	b963      	cbnz	r3, 1ae70 <event_handler+0x9c>
		ctx->rx_count--;
   1ae56:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1ae58:	3b01      	subs	r3, #1
   1ae5a:	64a3      	str	r3, [r4, #72]	; 0x48
		if (ctx->rx_count) {
   1ae5c:	b163      	cbz	r3, 1ae78 <event_handler+0xa4>
			ctx->current_rx++;
   1ae5e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1ae60:	f103 0208 	add.w	r2, r3, #8
   1ae64:	6462      	str	r2, [r4, #68]	; 0x44
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   1ae66:	689a      	ldr	r2, [r3, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
   1ae68:	68db      	ldr	r3, [r3, #12]
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   1ae6a:	6562      	str	r2, [r4, #84]	; 0x54
			ctx->rx_len = ctx->current_rx->len / dfs;
   1ae6c:	65a3      	str	r3, [r4, #88]	; 0x58
   1ae6e:	e7d4      	b.n	1ae1a <event_handler+0x46>
	} else if (ctx->rx_buf) {
   1ae70:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1ae72:	2b00      	cmp	r3, #0
   1ae74:	d0d1      	beq.n	1ae1a <event_handler+0x46>
		ctx->rx_buf += dfs * len;
   1ae76:	4413      	add	r3, r2
   1ae78:	6563      	str	r3, [r4, #84]	; 0x54
   1ae7a:	e7ce      	b.n	1ae1a <event_handler+0x46>
}
   1ae7c:	bd10      	pop	{r4, pc}
   1ae7e:	bf00      	nop
   1ae80:	00024030 	.word	0x00024030
   1ae84:	00023ed8 	.word	0x00023ed8
   1ae88:	0002792e 	.word	0x0002792e

0001ae8c <timer_callback>:
	return k_work_submit_to_queue(&k_sys_work_q, work);
   1ae8c:	4901      	ldr	r1, [pc, #4]	; (1ae94 <timer_callback+0x8>)
   1ae8e:	4802      	ldr	r0, [pc, #8]	; (1ae98 <timer_callback+0xc>)
   1ae90:	f008 bc78 	b.w	23784 <k_work_submit_to_queue>
   1ae94:	2000062c 	.word	0x2000062c
   1ae98:	200015c0 	.word	0x200015c0

0001ae9c <RtcGetTimerElapsedTime>:
{
	return k_uptime_get_32();
}

uint32_t RtcGetTimerElapsedTime(void)
{
   1ae9c:	b508      	push	{r3, lr}
	return (uint32_t)k_uptime_get();
   1ae9e:	f007 ffbf 	bl	22e20 <k_uptime_get>
	return (k_uptime_get_32() - saved_time);
   1aea2:	4b02      	ldr	r3, [pc, #8]	; (1aeac <RtcGetTimerElapsedTime+0x10>)
   1aea4:	681b      	ldr	r3, [r3, #0]
}
   1aea6:	1ac0      	subs	r0, r0, r3
   1aea8:	bd08      	pop	{r3, pc}
   1aeaa:	bf00      	nop
   1aeac:	20002a84 	.word	0x20002a84

0001aeb0 <RtcStopAlarm>:
	z_impl_k_timer_stop(timer);
   1aeb0:	4801      	ldr	r0, [pc, #4]	; (1aeb8 <RtcStopAlarm+0x8>)
   1aeb2:	f008 bd33 	b.w	2391c <z_impl_k_timer_stop>
   1aeb6:	bf00      	nop
   1aeb8:	20000860 	.word	0x20000860

0001aebc <RtcSetAlarm>:
{
	k_timer_stop(&lora_timer);
}

void RtcSetAlarm(uint32_t timeout)
{
   1aebc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1aebe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1aec2:	f240 34e7 	movw	r4, #999	; 0x3e7
   1aec6:	2500      	movs	r5, #0
   1aec8:	fbe1 4500 	umlal	r4, r5, r1, r0
   1aecc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1aed0:	2300      	movs	r3, #0
   1aed2:	4620      	mov	r0, r4
   1aed4:	4629      	mov	r1, r5
   1aed6:	f7e5 fdb1 	bl	a3c <__aeabi_uldivmod>
   1aeda:	4602      	mov	r2, r0
   1aedc:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   1aede:	2100      	movs	r1, #0
   1aee0:	2000      	movs	r0, #0
   1aee2:	e9cd 0100 	strd	r0, r1, [sp]
   1aee6:	4802      	ldr	r0, [pc, #8]	; (1aef0 <RtcSetAlarm+0x34>)
   1aee8:	f003 fab8 	bl	1e45c <z_impl_k_timer_start>
	k_timer_start(&lora_timer, K_MSEC(timeout), K_NO_WAIT);
}
   1aeec:	b003      	add	sp, #12
   1aeee:	bd30      	pop	{r4, r5, pc}
   1aef0:	20000860 	.word	0x20000860

0001aef4 <RtcSetTimerContext>:

uint32_t RtcSetTimerContext(void)
{
   1aef4:	b508      	push	{r3, lr}
   1aef6:	f007 ff93 	bl	22e20 <k_uptime_get>
	saved_time = k_uptime_get_32();
   1aefa:	4b01      	ldr	r3, [pc, #4]	; (1af00 <RtcSetTimerContext+0xc>)
   1aefc:	6018      	str	r0, [r3, #0]

	return saved_time;
}
   1aefe:	bd08      	pop	{r3, pc}
   1af00:	20002a84 	.word	0x20002a84

0001af04 <RtcGetTimerContext>:

/* For us, 1 tick = 1 milli second. So no need to do any conversion here */
uint32_t RtcGetTimerContext(void)
{
	return saved_time;
}
   1af04:	4b01      	ldr	r3, [pc, #4]	; (1af0c <RtcGetTimerContext+0x8>)
   1af06:	6818      	ldr	r0, [r3, #0]
   1af08:	4770      	bx	lr
   1af0a:	bf00      	nop
   1af0c:	20002a84 	.word	0x20002a84

0001af10 <sx12xx_ev_tx_done>:
	k_sem_give(&dev_data.data_sem);
}

static void sx12xx_ev_tx_done(void)
{
	Radio.Sleep();
   1af10:	4b01      	ldr	r3, [pc, #4]	; (1af18 <sx12xx_ev_tx_done+0x8>)
   1af12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1af14:	4718      	bx	r3
   1af16:	bf00      	nop
   1af18:	000257bc 	.word	0x000257bc

0001af1c <sx12xx_ev_rx_done>:
{
   1af1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1af1e:	461c      	mov	r4, r3
	Radio.Sleep();
   1af20:	4b08      	ldr	r3, [pc, #32]	; (1af44 <sx12xx_ev_rx_done+0x28>)
   1af22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
   1af24:	4607      	mov	r7, r0
   1af26:	460e      	mov	r6, r1
   1af28:	4615      	mov	r5, r2
	Radio.Sleep();
   1af2a:	4798      	blx	r3
	dev_data.rx_buf = payload;
   1af2c:	4806      	ldr	r0, [pc, #24]	; (1af48 <sx12xx_ev_rx_done+0x2c>)
   1af2e:	6347      	str	r7, [r0, #52]	; 0x34
	dev_data.rx_len = size;
   1af30:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38
	dev_data.rssi = rssi;
   1af34:	8745      	strh	r5, [r0, #58]	; 0x3a
	dev_data.snr = snr;
   1af36:	f880 4039 	strb.w	r4, [r0, #57]	; 0x39
}
   1af3a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_impl_k_sem_give(sem);
   1af3e:	f002 be35 	b.w	1dbac <z_impl_k_sem_give>
   1af42:	bf00      	nop
   1af44:	000257bc 	.word	0x000257bc
   1af48:	20002a88 	.word	0x20002a88

0001af4c <__sx12xx_configure_pin>:
{
   1af4c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1af50:	4606      	mov	r6, r0
   1af52:	460f      	mov	r7, r1
   1af54:	4690      	mov	r8, r2
   1af56:	461c      	mov	r4, r3
   1af58:	4608      	mov	r0, r1
   1af5a:	f001 ffc1 	bl	1cee0 <z_impl_device_get_binding>
   1af5e:	4605      	mov	r5, r0
	*dev = device_get_binding(controller);
   1af60:	6030      	str	r0, [r6, #0]
	if (!(*dev)) {
   1af62:	b980      	cbnz	r0, 1af86 <__sx12xx_configure_pin+0x3a>
   1af64:	4b2f      	ldr	r3, [pc, #188]	; (1b024 <__sx12xx_configure_pin+0xd8>)
   1af66:	4a30      	ldr	r2, [pc, #192]	; (1b028 <__sx12xx_configure_pin+0xdc>)
		LOG_ERR("Cannot get pointer to %s device", controller);
   1af68:	4830      	ldr	r0, [pc, #192]	; (1b02c <__sx12xx_configure_pin+0xe0>)
   1af6a:	1ad2      	subs	r2, r2, r3
   1af6c:	08d2      	lsrs	r2, r2, #3
   1af6e:	0192      	lsls	r2, r2, #6
   1af70:	f042 0201 	orr.w	r2, r2, #1
   1af74:	4639      	mov	r1, r7
   1af76:	f004 f8b8 	bl	1f0ea <log_1>
		return -EIO;
   1af7a:	f06f 0604 	mvn.w	r6, #4
}
   1af7e:	4630      	mov	r0, r6
   1af80:	b002      	add	sp, #8
   1af82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   1af86:	04e6      	lsls	r6, r4, #19
	const struct gpio_driver_api *api =
   1af88:	f8d0 a008 	ldr.w	sl, [r0, #8]
	struct gpio_driver_data *data =
   1af8c:	f8d0 9010 	ldr.w	r9, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   1af90:	d506      	bpl.n	1afa0 <__sx12xx_configure_pin+0x54>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   1af92:	f414 6f40 	tst.w	r4, #3072	; 0xc00
   1af96:	d003      	beq.n	1afa0 <__sx12xx_configure_pin+0x54>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1af98:	07e0      	lsls	r0, r4, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1af9a:	bf48      	it	mi
   1af9c:	f484 6440 	eormi.w	r4, r4, #3072	; 0xc00
	return api->pin_configure(port, pin, flags);
   1afa0:	68ab      	ldr	r3, [r5, #8]
   1afa2:	f424 5280 	bic.w	r2, r4, #4096	; 0x1000
   1afa6:	681b      	ldr	r3, [r3, #0]
   1afa8:	4641      	mov	r1, r8
   1afaa:	4628      	mov	r0, r5
   1afac:	4798      	blx	r3
	if (ret != 0) {
   1afae:	4606      	mov	r6, r0
   1afb0:	bb38      	cbnz	r0, 1b002 <__sx12xx_configure_pin+0xb6>
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1afb2:	f8d9 2000 	ldr.w	r2, [r9]
   1afb6:	2301      	movs	r3, #1
   1afb8:	07e1      	lsls	r1, r4, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1afba:	fa03 f308 	lsl.w	r3, r3, r8
   1afbe:	bf4c      	ite	mi
   1afc0:	431a      	orrmi	r2, r3
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1afc2:	439a      	bicpl	r2, r3
	}
	if (((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U)
   1afc4:	f414 4fc0 	tst.w	r4, #24576	; 0x6000
   1afc8:	f8c9 2000 	str.w	r2, [r9]
   1afcc:	d0d7      	beq.n	1af7e <__sx12xx_configure_pin+0x32>
	    && (api->pin_interrupt_configure != NULL)) {
   1afce:	f8da 2018 	ldr.w	r2, [sl, #24]
   1afd2:	2a00      	cmp	r2, #0
   1afd4:	d0d3      	beq.n	1af7e <__sx12xx_configure_pin+0x32>
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   1afd6:	0420      	lsls	r0, r4, #16
	const struct gpio_driver_api *api =
   1afd8:	68a9      	ldr	r1, [r5, #8]
		flags &= ~GPIO_INT_DEBOUNCE;
   1afda:	f424 2201 	bic.w	r2, r4, #528384	; 0x81000
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   1afde:	d505      	bpl.n	1afec <__sx12xx_configure_pin+0xa0>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   1afe0:	6928      	ldr	r0, [r5, #16]
   1afe2:	6800      	ldr	r0, [r0, #0]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   1afe4:	4203      	tst	r3, r0
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   1afe6:	bf18      	it	ne
   1afe8:	f482 22c0 	eorne.w	r2, r2, #393216	; 0x60000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   1afec:	698c      	ldr	r4, [r1, #24]
   1afee:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
   1aff2:	4641      	mov	r1, r8
   1aff4:	f402 32b0 	and.w	r2, r2, #90112	; 0x16000
   1aff8:	4628      	mov	r0, r5
   1affa:	47a0      	blx	r4
	if (err) {
   1affc:	2800      	cmp	r0, #0
   1affe:	d0be      	beq.n	1af7e <__sx12xx_configure_pin+0x32>
   1b000:	4606      	mov	r6, r0
   1b002:	4a08      	ldr	r2, [pc, #32]	; (1b024 <__sx12xx_configure_pin+0xd8>)
   1b004:	4b08      	ldr	r3, [pc, #32]	; (1b028 <__sx12xx_configure_pin+0xdc>)
		LOG_ERR("Cannot configure gpio %s %d: %d", controller, pin,
   1b006:	480a      	ldr	r0, [pc, #40]	; (1b030 <__sx12xx_configure_pin+0xe4>)
   1b008:	1a9b      	subs	r3, r3, r2
   1b00a:	08db      	lsrs	r3, r3, #3
   1b00c:	019b      	lsls	r3, r3, #6
   1b00e:	f043 0301 	orr.w	r3, r3, #1
   1b012:	f8ad 3000 	strh.w	r3, [sp]
   1b016:	4642      	mov	r2, r8
   1b018:	4633      	mov	r3, r6
   1b01a:	4639      	mov	r1, r7
   1b01c:	f004 f892 	bl	1f144 <log_3>
		return err;
   1b020:	e7ad      	b.n	1af7e <__sx12xx_configure_pin+0x32>
   1b022:	bf00      	nop
   1b024:	00023ed8 	.word	0x00023ed8
   1b028:	00024040 	.word	0x00024040
   1b02c:	0002795f 	.word	0x0002795f
   1b030:	0002797f 	.word	0x0002797f

0001b034 <sx12xx_lora_send>:
}

int sx12xx_lora_send(const struct device *dev, uint8_t *data,
		     uint32_t data_len)
{
   1b034:	b570      	push	{r4, r5, r6, lr}
	Radio.SetMaxPayloadLength(MODEM_LORA, data_len);
   1b036:	4e06      	ldr	r6, [pc, #24]	; (1b050 <sx12xx_lora_send+0x1c>)
   1b038:	b2d4      	uxtb	r4, r2
   1b03a:	6d73      	ldr	r3, [r6, #84]	; 0x54
{
   1b03c:	460d      	mov	r5, r1
	Radio.SetMaxPayloadLength(MODEM_LORA, data_len);
   1b03e:	2001      	movs	r0, #1
   1b040:	4621      	mov	r1, r4
   1b042:	4798      	blx	r3

	Radio.Send(data, data_len);
   1b044:	4628      	mov	r0, r5
   1b046:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1b048:	4621      	mov	r1, r4
   1b04a:	4798      	blx	r3

	return 0;
}
   1b04c:	2000      	movs	r0, #0
   1b04e:	bd70      	pop	{r4, r5, r6, pc}
   1b050:	000257bc 	.word	0x000257bc

0001b054 <sx12xx_lora_recv>:

int sx12xx_lora_recv(const struct device *dev, uint8_t *data, uint8_t size,
		     k_timeout_t timeout, int16_t *rssi, int8_t *snr)
{
   1b054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int ret;

	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
   1b058:	4c1e      	ldr	r4, [pc, #120]	; (1b0d4 <sx12xx_lora_recv+0x80>)
{
   1b05a:	460f      	mov	r7, r1
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
   1b05c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1b05e:	21ff      	movs	r1, #255	; 0xff
   1b060:	2001      	movs	r0, #1
{
   1b062:	4616      	mov	r6, r2
   1b064:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	; 0x28
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
   1b068:	4798      	blx	r3
	Radio.Rx(0);
   1b06a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1b06c:	2000      	movs	r0, #0
   1b06e:	4798      	blx	r3
	return z_impl_k_sem_take(sem, timeout);
   1b070:	4c19      	ldr	r4, [pc, #100]	; (1b0d8 <sx12xx_lora_recv+0x84>)
   1b072:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   1b076:	4620      	mov	r0, r4
   1b078:	f002 fdbe 	bl	1dbf8 <z_impl_k_sem_take>

	ret = k_sem_take(&dev_data.data_sem, timeout);
	if (ret < 0) {
   1b07c:	1e05      	subs	r5, r0, #0
   1b07e:	da0c      	bge.n	1b09a <sx12xx_lora_recv+0x46>
   1b080:	4916      	ldr	r1, [pc, #88]	; (1b0dc <sx12xx_lora_recv+0x88>)
   1b082:	4b17      	ldr	r3, [pc, #92]	; (1b0e0 <sx12xx_lora_recv+0x8c>)
		LOG_ERR("Receive timeout!");
   1b084:	4817      	ldr	r0, [pc, #92]	; (1b0e4 <sx12xx_lora_recv+0x90>)
   1b086:	1ac9      	subs	r1, r1, r3
   1b088:	08c9      	lsrs	r1, r1, #3
   1b08a:	0189      	lsls	r1, r1, #6
   1b08c:	f041 0101 	orr.w	r1, r1, #1
   1b090:	f004 f81e 	bl	1f0d0 <log_0>
	if (snr != NULL) {
		*snr = dev_data.snr;
	}

	return dev_data.rx_len;
}
   1b094:	4628      	mov	r0, r5
   1b096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (dev_data.rx_len > size)
   1b09a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1b09e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1b0a0:	42b3      	cmp	r3, r6
		dev_data.rx_len = size;
   1b0a2:	bf88      	it	hi
   1b0a4:	f884 6038 	strbhi.w	r6, [r4, #56]	; 0x38
   1b0a8:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   1b0ac:	4638      	mov	r0, r7
   1b0ae:	f008 fda6 	bl	23bfe <memcpy>
	if (rssi != NULL) {
   1b0b2:	f1b9 0f00 	cmp.w	r9, #0
   1b0b6:	d003      	beq.n	1b0c0 <sx12xx_lora_recv+0x6c>
		*rssi = dev_data.rssi;
   1b0b8:	f9b4 303a 	ldrsh.w	r3, [r4, #58]	; 0x3a
   1b0bc:	f8a9 3000 	strh.w	r3, [r9]
	if (snr != NULL) {
   1b0c0:	f1b8 0f00 	cmp.w	r8, #0
   1b0c4:	d003      	beq.n	1b0ce <sx12xx_lora_recv+0x7a>
		*snr = dev_data.snr;
   1b0c6:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1b0ca:	f888 3000 	strb.w	r3, [r8]
	return dev_data.rx_len;
   1b0ce:	f894 5038 	ldrb.w	r5, [r4, #56]	; 0x38
   1b0d2:	e7df      	b.n	1b094 <sx12xx_lora_recv+0x40>
   1b0d4:	000257bc 	.word	0x000257bc
   1b0d8:	20002a88 	.word	0x20002a88
   1b0dc:	00024040 	.word	0x00024040
   1b0e0:	00023ed8 	.word	0x00023ed8
   1b0e4:	0002799f 	.word	0x0002799f

0001b0e8 <sx12xx_lora_config>:

int sx12xx_lora_config(const struct device *dev,
		       struct lora_modem_config *config)
{
   1b0e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	Radio.SetChannel(config->frequency);
   1b0ea:	4e19      	ldr	r6, [pc, #100]	; (1b150 <sx12xx_lora_config+0x68>)
   1b0ec:	6808      	ldr	r0, [r1, #0]
   1b0ee:	68f3      	ldr	r3, [r6, #12]
{
   1b0f0:	460c      	mov	r4, r1
   1b0f2:	b08b      	sub	sp, #44	; 0x2c
	Radio.SetChannel(config->frequency);
   1b0f4:	4798      	blx	r3

	if (config->tx) {
   1b0f6:	7ae5      	ldrb	r5, [r4, #11]
   1b0f8:	7921      	ldrb	r1, [r4, #4]
   1b0fa:	f8b4 c008 	ldrh.w	ip, [r4, #8]
   1b0fe:	79a3      	ldrb	r3, [r4, #6]
   1b100:	7967      	ldrb	r7, [r4, #5]
   1b102:	b1a5      	cbz	r5, 1b12e <sx12xx_lora_config+0x46>
		Radio.SetTxConfig(MODEM_LORA, config->tx_power, 0,
   1b104:	2200      	movs	r2, #0
   1b106:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
   1b10a:	e9cd 2007 	strd	r2, r0, [sp, #28]
   1b10e:	2001      	movs	r0, #1
   1b110:	e9cd 3c01 	strd	r3, ip, [sp, #4]
   1b114:	e9cd 2205 	strd	r2, r2, [sp, #20]
   1b118:	e9cd 2003 	strd	r2, r0, [sp, #12]
   1b11c:	9700      	str	r7, [sp, #0]
   1b11e:	460b      	mov	r3, r1
   1b120:	69f5      	ldr	r5, [r6, #28]
   1b122:	f994 100a 	ldrsb.w	r1, [r4, #10]
   1b126:	47a8      	blx	r5
				  0, config->preamble_len, 10, false, 0,
				  false, 0, 0, false, true);
	}

	return 0;
}
   1b128:	2000      	movs	r0, #0
   1b12a:	b00b      	add	sp, #44	; 0x2c
   1b12c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Radio.SetRxConfig(MODEM_LORA, config->bandwidth,
   1b12e:	2001      	movs	r0, #1
   1b130:	220a      	movs	r2, #10
   1b132:	e9cd c201 	strd	ip, r2, [sp, #4]
   1b136:	e9cd 5008 	strd	r5, r0, [sp, #32]
   1b13a:	e9cd 5506 	strd	r5, r5, [sp, #24]
   1b13e:	e9cd 5504 	strd	r5, r5, [sp, #16]
   1b142:	69b4      	ldr	r4, [r6, #24]
   1b144:	9503      	str	r5, [sp, #12]
   1b146:	9500      	str	r5, [sp, #0]
   1b148:	463a      	mov	r2, r7
   1b14a:	47a0      	blx	r4
   1b14c:	e7ec      	b.n	1b128 <sx12xx_lora_config+0x40>
   1b14e:	bf00      	nop
   1b150:	000257bc 	.word	0x000257bc

0001b154 <sx12xx_lora_test_cw>:

int sx12xx_lora_test_cw(const struct device *dev, uint32_t frequency,
			int8_t tx_power,
			uint16_t duration)
{
   1b154:	b510      	push	{r4, lr}
   1b156:	4608      	mov	r0, r1
   1b158:	4611      	mov	r1, r2
	Radio.SetTxContinuousWave(frequency, tx_power, duration);
   1b15a:	4a03      	ldr	r2, [pc, #12]	; (1b168 <sx12xx_lora_test_cw+0x14>)
   1b15c:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   1b15e:	461a      	mov	r2, r3
   1b160:	47a0      	blx	r4
	return 0;
}
   1b162:	2000      	movs	r0, #0
   1b164:	bd10      	pop	{r4, pc}
   1b166:	bf00      	nop
   1b168:	000257bc 	.word	0x000257bc

0001b16c <sx12xx_init>:

int sx12xx_init(const struct device *dev)
{
   1b16c:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1b16e:	4c0a      	ldr	r4, [pc, #40]	; (1b198 <sx12xx_init+0x2c>)
	k_sem_init(&dev_data.data_sem, 0, K_SEM_MAX_LIMIT);

	dev_data.events.TxDone = sx12xx_ev_tx_done;
	dev_data.events.RxDone = sx12xx_ev_rx_done;
	Radio.Init(&dev_data.events);
   1b170:	4d0a      	ldr	r5, [pc, #40]	; (1b19c <sx12xx_init+0x30>)
   1b172:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1b176:	2100      	movs	r1, #0
   1b178:	4620      	mov	r0, r4
   1b17a:	f008 fa72 	bl	23662 <z_impl_k_sem_init>
	dev_data.events.TxDone = sx12xx_ev_tx_done;
   1b17e:	4b08      	ldr	r3, [pc, #32]	; (1b1a0 <sx12xx_init+0x34>)
   1b180:	61a3      	str	r3, [r4, #24]
	dev_data.events.RxDone = sx12xx_ev_rx_done;
   1b182:	4b08      	ldr	r3, [pc, #32]	; (1b1a4 <sx12xx_init+0x38>)
   1b184:	6223      	str	r3, [r4, #32]
	Radio.Init(&dev_data.events);
   1b186:	f104 0018 	add.w	r0, r4, #24
   1b18a:	682b      	ldr	r3, [r5, #0]
   1b18c:	4798      	blx	r3
	 * The required `lora_config` call before transmission or reception
	 * will bring the radio out of sleep mode before it is used. The radio
	 * is automatically placed back into sleep mode upon TX or RX
	 * completion.
	 */
	Radio.Sleep();
   1b18e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1b190:	4798      	blx	r3

	return 0;
}
   1b192:	2000      	movs	r0, #0
   1b194:	bd38      	pop	{r3, r4, r5, pc}
   1b196:	bf00      	nop
   1b198:	20002a88 	.word	0x20002a88
   1b19c:	000257bc 	.word	0x000257bc
   1b1a0:	0001af11 	.word	0x0001af11
   1b1a4:	0001af1d 	.word	0x0001af1d

0001b1a8 <sx127x_dio_work_handle>:
	k_sleep(K_MSEC(6));
}

static void sx127x_dio_work_handle(struct k_work *work)
{
	int dio = work - dev_data.dio_work;
   1b1a8:	4b03      	ldr	r3, [pc, #12]	; (1b1b8 <sx127x_dio_work_handle+0x10>)
   1b1aa:	1ac0      	subs	r0, r0, r3
   1b1ac:	1100      	asrs	r0, r0, #4

	(*DioIrq[dio])(NULL);
   1b1ae:	4b03      	ldr	r3, [pc, #12]	; (1b1bc <sx127x_dio_work_handle+0x14>)
   1b1b0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1b1b4:	2000      	movs	r0, #0
   1b1b6:	4718      	bx	r3
   1b1b8:	20002b2c 	.word	0x20002b2c
   1b1bc:	2000063c 	.word	0x2000063c

0001b1c0 <sx127x_irq_callback>:
}

static void sx127x_irq_callback(const struct device *dev,
				struct gpio_callback *cb, uint32_t pins)
{
   1b1c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b1c4:	4d11      	ldr	r5, [pc, #68]	; (1b20c <sx127x_irq_callback+0x4c>)

	pin = find_lsb_set(pins) - 1;

	for (i = 0; i < SX127X_MAX_DIO; i++) {
		if (dev == dev_data.dio_dev[i] &&
		    pin == sx127x_dios[i].pin) {
   1b1c6:	f8df 8048 	ldr.w	r8, [pc, #72]	; 1b210 <sx127x_irq_callback+0x50>
	return k_work_submit_to_queue(&k_sys_work_q, work);
   1b1ca:	f8df a048 	ldr.w	sl, [pc, #72]	; 1b214 <sx127x_irq_callback+0x54>
   1b1ce:	fa92 f7a2 	rbit	r7, r2
   1b1d2:	2a00      	cmp	r2, #0
   1b1d4:	fab7 f787 	clz	r7, r7
{
   1b1d8:	4606      	mov	r6, r0
   1b1da:	bf08      	it	eq
   1b1dc:	f04f 37ff 	moveq.w	r7, #4294967295	; 0xffffffff
	for (i = 0; i < SX127X_MAX_DIO; i++) {
   1b1e0:	2400      	movs	r4, #0
   1b1e2:	f105 0914 	add.w	r9, r5, #20
		if (dev == dev_data.dio_dev[i] &&
   1b1e6:	f855 3b04 	ldr.w	r3, [r5], #4
   1b1ea:	42b3      	cmp	r3, r6
   1b1ec:	d109      	bne.n	1b202 <sx127x_irq_callback+0x42>
		    pin == sx127x_dios[i].pin) {
   1b1ee:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   1b1f2:	791b      	ldrb	r3, [r3, #4]
		if (dev == dev_data.dio_dev[i] &&
   1b1f4:	42bb      	cmp	r3, r7
   1b1f6:	d104      	bne.n	1b202 <sx127x_irq_callback+0x42>
   1b1f8:	eb09 1104 	add.w	r1, r9, r4, lsl #4
   1b1fc:	4650      	mov	r0, sl
   1b1fe:	f008 fac1 	bl	23784 <k_work_submit_to_queue>
	for (i = 0; i < SX127X_MAX_DIO; i++) {
   1b202:	3401      	adds	r4, #1
   1b204:	2c05      	cmp	r4, #5
   1b206:	d1ee      	bne.n	1b1e6 <sx127x_irq_callback+0x26>
			k_work_submit(&dev_data.dio_work[i]);
		}
	}
}
   1b208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b20c:	20002b18 	.word	0x20002b18
   1b210:	00025828 	.word	0x00025828
   1b214:	200015c0 	.word	0x200015c0

0001b218 <SX1276Reset>:
{
   1b218:	b510      	push	{r4, lr}
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 1);
   1b21a:	4c09      	ldr	r4, [pc, #36]	; (1b240 <SX1276Reset+0x28>)
   1b21c:	2101      	movs	r1, #1
   1b21e:	6820      	ldr	r0, [r4, #0]
   1b220:	f007 fe4d 	bl	22ebe <gpio_pin_set.constprop.0>
	return z_impl_k_sleep(timeout);
   1b224:	2100      	movs	r1, #0
   1b226:	2021      	movs	r0, #33	; 0x21
   1b228:	f002 fc24 	bl	1da74 <z_impl_k_sleep>
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 0);
   1b22c:	6820      	ldr	r0, [r4, #0]
   1b22e:	2100      	movs	r1, #0
   1b230:	f007 fe45 	bl	22ebe <gpio_pin_set.constprop.0>
   1b234:	20c5      	movs	r0, #197	; 0xc5
}
   1b236:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b23a:	2100      	movs	r1, #0
   1b23c:	f002 bc1a 	b.w	1da74 <z_impl_k_sleep>
   1b240:	20002b04 	.word	0x20002b04

0001b244 <SX1276IoIrqInit>:

void SX127xIoIrqInit(DioIrqHandler **irqHandlers)
{
   1b244:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b248:	4c37      	ldr	r4, [pc, #220]	; (1b328 <SX1276IoIrqInit+0xe4>)
   1b24a:	4e38      	ldr	r6, [pc, #224]	; (1b32c <SX1276IoIrqInit+0xe8>)
   1b24c:	4d38      	ldr	r5, [pc, #224]	; (1b330 <SX1276IoIrqInit+0xec>)
   1b24e:	f100 0310 	add.w	r3, r0, #16
   1b252:	f1a0 0804 	sub.w	r8, r0, #4
   1b256:	f1a4 0914 	sub.w	r9, r4, #20
   1b25a:	9301      	str	r3, [sp, #4]
	unsigned int i;
	static struct gpio_callback callbacks[SX127X_MAX_DIO];

	/* Setup DIO gpios */
	for (i = 0; i < SX127X_MAX_DIO; i++) {
		if (!irqHandlers[i]) {
   1b25c:	f858 3f04 	ldr.w	r3, [r8, #4]!
   1b260:	2b00      	cmp	r3, #0
   1b262:	d053      	beq.n	1b30c <SX1276IoIrqInit+0xc8>
			continue;
		}

		dev_data.dio_dev[i] = device_get_binding(sx127x_dios[i].port);
   1b264:	682f      	ldr	r7, [r5, #0]
   1b266:	4638      	mov	r0, r7
   1b268:	f001 fe3a 	bl	1cee0 <z_impl_device_get_binding>
   1b26c:	6020      	str	r0, [r4, #0]
		if (dev_data.dio_dev[i] == NULL) {
   1b26e:	b968      	cbnz	r0, 1b28c <SX1276IoIrqInit+0x48>
   1b270:	4b30      	ldr	r3, [pc, #192]	; (1b334 <SX1276IoIrqInit+0xf0>)
   1b272:	4a31      	ldr	r2, [pc, #196]	; (1b338 <SX1276IoIrqInit+0xf4>)
			LOG_ERR("Cannot get pointer to %s device",
   1b274:	4831      	ldr	r0, [pc, #196]	; (1b33c <SX1276IoIrqInit+0xf8>)
   1b276:	1ad2      	subs	r2, r2, r3
   1b278:	08d2      	lsrs	r2, r2, #3
   1b27a:	0192      	lsls	r2, r2, #6
   1b27c:	f042 0201 	orr.w	r2, r2, #1
   1b280:	4639      	mov	r1, r7
		gpio_pin_interrupt_configure(dev_data.dio_dev[i],
					     sx127x_dios[i].pin,
					     GPIO_INT_EDGE_TO_ACTIVE);
	}

}
   1b282:	b003      	add	sp, #12
   1b284:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			LOG_ERR("Cannot get pointer to %s device",
   1b288:	f003 bf2f 	b.w	1f0ea <log_1>
		k_work_init(&dev_data.dio_work[i], sx127x_dio_work_handle);
   1b28c:	f109 0028 	add.w	r0, r9, #40	; 0x28
   1b290:	492b      	ldr	r1, [pc, #172]	; (1b340 <SX1276IoIrqInit+0xfc>)
   1b292:	f008 fa6e 	bl	23772 <k_work_init>
		gpio_pin_configure(dev_data.dio_dev[i], sx127x_dios[i].pin,
   1b296:	6820      	ldr	r0, [r4, #0]
   1b298:	792f      	ldrb	r7, [r5, #4]
				   | sx127x_dios[i].flags);
   1b29a:	f895 b005 	ldrb.w	fp, [r5, #5]
	struct gpio_driver_data *data =
   1b29e:	f8d0 a010 	ldr.w	sl, [r0, #16]
	return api->pin_configure(port, pin, flags);
   1b2a2:	6883      	ldr	r3, [r0, #8]
   1b2a4:	f44b 2200 	orr.w	r2, fp, #524288	; 0x80000
   1b2a8:	681b      	ldr	r3, [r3, #0]
   1b2aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   1b2ae:	4639      	mov	r1, r7
   1b2b0:	4798      	blx	r3
	if (ret != 0) {
   1b2b2:	b950      	cbnz	r0, 1b2ca <SX1276IoIrqInit+0x86>
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1b2b4:	f8da 3000 	ldr.w	r3, [sl]
   1b2b8:	2201      	movs	r2, #1
   1b2ba:	40ba      	lsls	r2, r7
   1b2bc:	f01b 0f01 	tst.w	fp, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1b2c0:	bf14      	ite	ne
   1b2c2:	4313      	orrne	r3, r2
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1b2c4:	4393      	biceq	r3, r2
   1b2c6:	f8ca 3000 	str.w	r3, [sl]
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   1b2ca:	4b1e      	ldr	r3, [pc, #120]	; (1b344 <SX1276IoIrqInit+0x100>)
		if (gpio_add_callback(dev_data.dio_dev[i], &callbacks[i]) < 0) {
   1b2cc:	6820      	ldr	r0, [r4, #0]
   1b2ce:	6073      	str	r3, [r6, #4]
				   BIT(sx127x_dios[i].pin));
   1b2d0:	2201      	movs	r2, #1
   1b2d2:	fa02 f307 	lsl.w	r3, r2, r7
	callback->pin_mask = pin_mask;
   1b2d6:	60b3      	str	r3, [r6, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   1b2d8:	6883      	ldr	r3, [r0, #8]
   1b2da:	69db      	ldr	r3, [r3, #28]
   1b2dc:	b963      	cbnz	r3, 1b2f8 <SX1276IoIrqInit+0xb4>
   1b2de:	4b15      	ldr	r3, [pc, #84]	; (1b334 <SX1276IoIrqInit+0xf0>)
   1b2e0:	4915      	ldr	r1, [pc, #84]	; (1b338 <SX1276IoIrqInit+0xf4>)
			LOG_ERR("Could not set gpio callback.");
   1b2e2:	4819      	ldr	r0, [pc, #100]	; (1b348 <SX1276IoIrqInit+0x104>)
   1b2e4:	1ac9      	subs	r1, r1, r3
   1b2e6:	08c9      	lsrs	r1, r1, #3
   1b2e8:	0189      	lsls	r1, r1, #6
   1b2ea:	f041 0101 	orr.w	r1, r1, #1
}
   1b2ee:	b003      	add	sp, #12
   1b2f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			LOG_ERR("Could not set gpio callback.");
   1b2f4:	f003 beec 	b.w	1f0d0 <log_0>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   1b2f8:	4631      	mov	r1, r6
   1b2fa:	4798      	blx	r3
		if (gpio_add_callback(dev_data.dio_dev[i], &callbacks[i]) < 0) {
   1b2fc:	2800      	cmp	r0, #0
   1b2fe:	dbee      	blt.n	1b2de <SX1276IoIrqInit+0x9a>
		gpio_pin_interrupt_configure(dev_data.dio_dev[i],
   1b300:	6820      	ldr	r0, [r4, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   1b302:	f44f 22b8 	mov.w	r2, #376832	; 0x5c000
   1b306:	4639      	mov	r1, r7
   1b308:	f007 fdc3 	bl	22e92 <z_impl_gpio_pin_interrupt_configure>
	for (i = 0; i < SX127X_MAX_DIO; i++) {
   1b30c:	9b01      	ldr	r3, [sp, #4]
   1b30e:	4598      	cmp	r8, r3
   1b310:	f104 0404 	add.w	r4, r4, #4
   1b314:	f106 060c 	add.w	r6, r6, #12
   1b318:	f109 0910 	add.w	r9, r9, #16
   1b31c:	f105 0508 	add.w	r5, r5, #8
   1b320:	d19c      	bne.n	1b25c <SX1276IoIrqInit+0x18>
}
   1b322:	b003      	add	sp, #12
   1b324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b328:	20002b18 	.word	0x20002b18
   1b32c:	20002ac8 	.word	0x20002ac8
   1b330:	00025828 	.word	0x00025828
   1b334:	00023ed8 	.word	0x00023ed8
   1b338:	00024038 	.word	0x00024038
   1b33c:	0002795f 	.word	0x0002795f
   1b340:	0001b1a9 	.word	0x0001b1a9
   1b344:	0001b1c1 	.word	0x0001b1c1
   1b348:	000279be 	.word	0x000279be

0001b34c <sx127x_read>:

	return spi_write(dev_data.spi, &dev_data.spi_cfg, &tx);
}

int sx127x_read(uint8_t reg_addr, uint8_t *data, uint8_t len)
{
   1b34c:	b510      	push	{r4, lr}
   1b34e:	b08a      	sub	sp, #40	; 0x28
	const struct spi_buf buf[2] = {
   1b350:	f10d 0307 	add.w	r3, sp, #7
   1b354:	9306      	str	r3, [sp, #24]
   1b356:	2301      	movs	r3, #1
   1b358:	e9cd 3107 	strd	r3, r1, [sp, #28]
		return spi_transceive(dev_data.spi, &dev_data.spi_cfg, &tx, &rx);
   1b35c:	4909      	ldr	r1, [pc, #36]	; (1b384 <sx127x_read+0x38>)
	return sx127x_transceive(reg_addr, false, data, len);
   1b35e:	9209      	str	r2, [sp, #36]	; 0x24
	struct spi_buf_set tx = {
   1b360:	2302      	movs	r3, #2
   1b362:	aa06      	add	r2, sp, #24
   1b364:	f88d 0007 	strb.w	r0, [sp, #7]
		const struct spi_buf_set rx = {
   1b368:	e9cd 3203 	strd	r3, r2, [sp, #12]
		return spi_transceive(dev_data.spi, &dev_data.spi_cfg, &tx, &rx);
   1b36c:	6848      	ldr	r0, [r1, #4]
	struct spi_buf_set tx = {
   1b36e:	9202      	str	r2, [sp, #8]
		const struct spi_buf_set rx = {
   1b370:	9305      	str	r3, [sp, #20]
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
   1b372:	6883      	ldr	r3, [r0, #8]
   1b374:	aa02      	add	r2, sp, #8
   1b376:	681c      	ldr	r4, [r3, #0]
   1b378:	3108      	adds	r1, #8
   1b37a:	ab04      	add	r3, sp, #16
   1b37c:	47a0      	blx	r4
}
   1b37e:	b00a      	add	sp, #40	; 0x28
   1b380:	bd10      	pop	{r4, pc}
   1b382:	bf00      	nop
   1b384:	20002b04 	.word	0x20002b04

0001b388 <SX1276ReadBuffer>:
		LOG_ERR("Unable to write address: 0x%x", addr);
	}
}

void SX127xReadBuffer(uint16_t addr, uint8_t *buffer, uint8_t size)
{
   1b388:	b510      	push	{r4, lr}
   1b38a:	4604      	mov	r4, r0
	int ret;

	ret = sx127x_read(addr, buffer, size);
   1b38c:	b2c0      	uxtb	r0, r0
   1b38e:	f7ff ffdd 	bl	1b34c <sx127x_read>
	if (ret < 0) {
   1b392:	2800      	cmp	r0, #0
   1b394:	da0c      	bge.n	1b3b0 <SX1276ReadBuffer+0x28>
   1b396:	4a07      	ldr	r2, [pc, #28]	; (1b3b4 <SX1276ReadBuffer+0x2c>)
   1b398:	4b07      	ldr	r3, [pc, #28]	; (1b3b8 <SX1276ReadBuffer+0x30>)
		LOG_ERR("Unable to read address: 0x%x", addr);
   1b39a:	4808      	ldr	r0, [pc, #32]	; (1b3bc <SX1276ReadBuffer+0x34>)
   1b39c:	1ad2      	subs	r2, r2, r3
   1b39e:	08d2      	lsrs	r2, r2, #3
   1b3a0:	0192      	lsls	r2, r2, #6
   1b3a2:	4621      	mov	r1, r4
   1b3a4:	f042 0201 	orr.w	r2, r2, #1
	}
}
   1b3a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("Unable to read address: 0x%x", addr);
   1b3ac:	f003 be9d 	b.w	1f0ea <log_1>
}
   1b3b0:	bd10      	pop	{r4, pc}
   1b3b2:	bf00      	nop
   1b3b4:	00024038 	.word	0x00024038
   1b3b8:	00023ed8 	.word	0x00023ed8
   1b3bc:	000279db 	.word	0x000279db

0001b3c0 <sx127x_lora_init>:

	return 0;
}

static int sx127x_lora_init(const struct device *dev)
{
   1b3c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1b3c2:	4606      	mov	r6, r0
   1b3c4:	4839      	ldr	r0, [pc, #228]	; (1b4ac <sx127x_lora_init+0xec>)
	static struct spi_cs_control spi_cs;
#endif
	int ret;
	uint8_t regval;

	dev_data.spi = device_get_binding(DT_INST_BUS_LABEL(0));
   1b3c6:	4d3a      	ldr	r5, [pc, #232]	; (1b4b0 <sx127x_lora_init+0xf0>)
   1b3c8:	f001 fd8a 	bl	1cee0 <z_impl_device_get_binding>
   1b3cc:	6068      	str	r0, [r5, #4]
	if (!dev_data.spi) {
   1b3ce:	b978      	cbnz	r0, 1b3f0 <sx127x_lora_init+0x30>
   1b3d0:	4b38      	ldr	r3, [pc, #224]	; (1b4b4 <sx127x_lora_init+0xf4>)
   1b3d2:	4a39      	ldr	r2, [pc, #228]	; (1b4b8 <sx127x_lora_init+0xf8>)
		LOG_ERR("Cannot get pointer to %s device",
   1b3d4:	4935      	ldr	r1, [pc, #212]	; (1b4ac <sx127x_lora_init+0xec>)
   1b3d6:	4839      	ldr	r0, [pc, #228]	; (1b4bc <sx127x_lora_init+0xfc>)
   1b3d8:	1ad2      	subs	r2, r2, r3
   1b3da:	08d2      	lsrs	r2, r2, #3
   1b3dc:	0192      	lsls	r2, r2, #6
   1b3de:	f042 0201 	orr.w	r2, r2, #1
   1b3e2:	f003 fe82 	bl	1f0ea <log_1>
			DT_INST_BUS_LABEL(0));
		return -EINVAL;
   1b3e6:	f06f 0415 	mvn.w	r4, #21
		LOG_ERR("Failed to initialize SX12xx common");
		return ret;
	}

	return 0;
}
   1b3ea:	4620      	mov	r0, r4
   1b3ec:	b002      	add	sp, #8
   1b3ee:	bd70      	pop	{r4, r5, r6, pc}
	dev_data.spi_cfg.operation = SPI_WORD_SET(8) | SPI_TRANSFER_MSB;
   1b3f0:	4a33      	ldr	r2, [pc, #204]	; (1b4c0 <sx127x_lora_init+0x100>)
   1b3f2:	f44f 7380 	mov.w	r3, #256	; 0x100
   1b3f6:	e9c5 2302 	strd	r2, r3, [r5, #8]
   1b3fa:	4832      	ldr	r0, [pc, #200]	; (1b4c4 <sx127x_lora_init+0x104>)
   1b3fc:	f001 fd70 	bl	1cee0 <z_impl_device_get_binding>
	spi_cs.gpio_dev = device_get_binding(DT_INST_SPI_DEV_CS_GPIOS_LABEL(0));
   1b400:	4b31      	ldr	r3, [pc, #196]	; (1b4c8 <sx127x_lora_init+0x108>)
   1b402:	6018      	str	r0, [r3, #0]
	if (!spi_cs.gpio_dev) {
   1b404:	b968      	cbnz	r0, 1b422 <sx127x_lora_init+0x62>
   1b406:	4a2c      	ldr	r2, [pc, #176]	; (1b4b8 <sx127x_lora_init+0xf8>)
   1b408:	4b2a      	ldr	r3, [pc, #168]	; (1b4b4 <sx127x_lora_init+0xf4>)
		LOG_ERR("Cannot get pointer to %s device",
   1b40a:	492e      	ldr	r1, [pc, #184]	; (1b4c4 <sx127x_lora_init+0x104>)
   1b40c:	482b      	ldr	r0, [pc, #172]	; (1b4bc <sx127x_lora_init+0xfc>)
   1b40e:	1ad2      	subs	r2, r2, r3
   1b410:	08d2      	lsrs	r2, r2, #3
   1b412:	0192      	lsls	r2, r2, #6
   1b414:	f042 0201 	orr.w	r2, r2, #1
   1b418:	f003 fe67 	bl	1f0ea <log_1>
		return -EIO;
   1b41c:	f06f 0404 	mvn.w	r4, #4
   1b420:	e7e3      	b.n	1b3ea <sx127x_lora_init+0x2a>
	spi_cs.delay = 0U;
   1b422:	2200      	movs	r2, #0
   1b424:	605a      	str	r2, [r3, #4]
	spi_cs.gpio_pin = GPIO_CS_PIN;
   1b426:	f240 1209 	movw	r2, #265	; 0x109
   1b42a:	811a      	strh	r2, [r3, #8]
	dev_data.spi_cfg.cs = &spi_cs;
   1b42c:	612b      	str	r3, [r5, #16]
	ret = sx12xx_configure_pin(reset, GPIO_OUTPUT_ACTIVE);
   1b42e:	4925      	ldr	r1, [pc, #148]	; (1b4c4 <sx127x_lora_init+0x104>)
   1b430:	f641 2311 	movw	r3, #6673	; 0x1a11
   1b434:	2208      	movs	r2, #8
   1b436:	4628      	mov	r0, r5
   1b438:	f7ff fd88 	bl	1af4c <__sx12xx_configure_pin>
	if (ret) {
   1b43c:	4604      	mov	r4, r0
   1b43e:	2800      	cmp	r0, #0
   1b440:	d1d3      	bne.n	1b3ea <sx127x_lora_init+0x2a>
   1b442:	2100      	movs	r1, #0
   1b444:	f640 40cd 	movw	r0, #3277	; 0xccd
   1b448:	f002 fb14 	bl	1da74 <z_impl_k_sleep>
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 0);
   1b44c:	6828      	ldr	r0, [r5, #0]
   1b44e:	4621      	mov	r1, r4
   1b450:	f007 fd35 	bl	22ebe <gpio_pin_set.constprop.0>
   1b454:	2100      	movs	r1, #0
   1b456:	f640 40cd 	movw	r0, #3277	; 0xccd
   1b45a:	f002 fb0b 	bl	1da74 <z_impl_k_sleep>
	ret = sx127x_read(REG_VERSION, &regval, 1);
   1b45e:	2201      	movs	r2, #1
   1b460:	f10d 0107 	add.w	r1, sp, #7
   1b464:	2042      	movs	r0, #66	; 0x42
   1b466:	f7ff ff71 	bl	1b34c <sx127x_read>
	if (ret < 0) {
   1b46a:	4d13      	ldr	r5, [pc, #76]	; (1b4b8 <sx127x_lora_init+0xf8>)
   1b46c:	4b11      	ldr	r3, [pc, #68]	; (1b4b4 <sx127x_lora_init+0xf4>)
   1b46e:	1aed      	subs	r5, r5, r3
   1b470:	08ed      	lsrs	r5, r5, #3
   1b472:	2800      	cmp	r0, #0
   1b474:	ea4f 1585 	mov.w	r5, r5, lsl #6
   1b478:	da05      	bge.n	1b486 <sx127x_lora_init+0xc6>
		LOG_ERR("Unable to read version info");
   1b47a:	4814      	ldr	r0, [pc, #80]	; (1b4cc <sx127x_lora_init+0x10c>)
   1b47c:	f045 0101 	orr.w	r1, r5, #1
   1b480:	f003 fe26 	bl	1f0d0 <log_0>
   1b484:	e7ca      	b.n	1b41c <sx127x_lora_init+0x5c>
	LOG_INF("SX127x version 0x%02x found", regval);
   1b486:	f89d 1007 	ldrb.w	r1, [sp, #7]
   1b48a:	4811      	ldr	r0, [pc, #68]	; (1b4d0 <sx127x_lora_init+0x110>)
   1b48c:	f045 0203 	orr.w	r2, r5, #3
   1b490:	f003 fe2b 	bl	1f0ea <log_1>
	ret = sx12xx_init(dev);
   1b494:	4630      	mov	r0, r6
   1b496:	f7ff fe69 	bl	1b16c <sx12xx_init>
	if (ret < 0) {
   1b49a:	1e06      	subs	r6, r0, #0
   1b49c:	daa5      	bge.n	1b3ea <sx127x_lora_init+0x2a>
		LOG_ERR("Failed to initialize SX12xx common");
   1b49e:	480d      	ldr	r0, [pc, #52]	; (1b4d4 <sx127x_lora_init+0x114>)
   1b4a0:	f045 0101 	orr.w	r1, r5, #1
   1b4a4:	f003 fe14 	bl	1f0d0 <log_0>
		return ret;
   1b4a8:	4634      	mov	r4, r6
   1b4aa:	e79e      	b.n	1b3ea <sx127x_lora_init+0x2a>
   1b4ac:	0002794c 	.word	0x0002794c
   1b4b0:	20002b04 	.word	0x20002b04
   1b4b4:	00023ed8 	.word	0x00023ed8
   1b4b8:	00024038 	.word	0x00024038
   1b4bc:	0002795f 	.word	0x0002795f
   1b4c0:	000f4240 	.word	0x000f4240
   1b4c4:	00027816 	.word	0x00027816
   1b4c8:	20002b7c 	.word	0x20002b7c
   1b4cc:	000279f8 	.word	0x000279f8
   1b4d0:	00027a14 	.word	0x00027a14
   1b4d4:	00027a30 	.word	0x00027a30

0001b4d8 <sx127x_write>:
{
   1b4d8:	b510      	push	{r4, lr}
   1b4da:	b088      	sub	sp, #32
	const struct spi_buf buf[2] = {
   1b4dc:	f10d 0307 	add.w	r3, sp, #7
   1b4e0:	9304      	str	r3, [sp, #16]
   1b4e2:	2301      	movs	r3, #1
   1b4e4:	e9cd 3105 	strd	r3, r1, [sp, #20]
	struct spi_buf_set tx = {
   1b4e8:	ab04      	add	r3, sp, #16
	return spi_write(dev_data.spi, &dev_data.spi_cfg, &tx);
   1b4ea:	4909      	ldr	r1, [pc, #36]	; (1b510 <sx127x_write+0x38>)
	struct spi_buf_set tx = {
   1b4ec:	9302      	str	r3, [sp, #8]
	return sx127x_transceive(reg_addr | BIT(7), true, data, len);
   1b4ee:	f060 007f 	orn	r0, r0, #127	; 0x7f
	struct spi_buf_set tx = {
   1b4f2:	2302      	movs	r3, #2
   1b4f4:	f88d 0007 	strb.w	r0, [sp, #7]
	return sx127x_transceive(reg_addr | BIT(7), true, data, len);
   1b4f8:	9207      	str	r2, [sp, #28]
	return spi_write(dev_data.spi, &dev_data.spi_cfg, &tx);
   1b4fa:	6848      	ldr	r0, [r1, #4]
	struct spi_buf_set tx = {
   1b4fc:	9303      	str	r3, [sp, #12]
   1b4fe:	6883      	ldr	r3, [r0, #8]
   1b500:	aa02      	add	r2, sp, #8
   1b502:	681c      	ldr	r4, [r3, #0]
   1b504:	3108      	adds	r1, #8
   1b506:	2300      	movs	r3, #0
   1b508:	47a0      	blx	r4
}
   1b50a:	b008      	add	sp, #32
   1b50c:	bd10      	pop	{r4, pc}
   1b50e:	bf00      	nop
   1b510:	20002b04 	.word	0x20002b04

0001b514 <SX1276WriteBuffer>:
{
   1b514:	b510      	push	{r4, lr}
   1b516:	4604      	mov	r4, r0
	ret = sx127x_write(addr, buffer, size);
   1b518:	b2c0      	uxtb	r0, r0
   1b51a:	f7ff ffdd 	bl	1b4d8 <sx127x_write>
	if (ret < 0) {
   1b51e:	2800      	cmp	r0, #0
   1b520:	da0c      	bge.n	1b53c <SX1276WriteBuffer+0x28>
   1b522:	4a07      	ldr	r2, [pc, #28]	; (1b540 <SX1276WriteBuffer+0x2c>)
   1b524:	4b07      	ldr	r3, [pc, #28]	; (1b544 <SX1276WriteBuffer+0x30>)
		LOG_ERR("Unable to write address: 0x%x", addr);
   1b526:	4808      	ldr	r0, [pc, #32]	; (1b548 <SX1276WriteBuffer+0x34>)
   1b528:	1ad2      	subs	r2, r2, r3
   1b52a:	08d2      	lsrs	r2, r2, #3
   1b52c:	0192      	lsls	r2, r2, #6
   1b52e:	4621      	mov	r1, r4
   1b530:	f042 0201 	orr.w	r2, r2, #1
}
   1b534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("Unable to write address: 0x%x", addr);
   1b538:	f003 bdd7 	b.w	1f0ea <log_1>
}
   1b53c:	bd10      	pop	{r4, pc}
   1b53e:	bf00      	nop
   1b540:	00024038 	.word	0x00024038
   1b544:	00023ed8 	.word	0x00023ed8
   1b548:	00027a53 	.word	0x00027a53

0001b54c <SX1276SetRfTxPower>:
{
   1b54c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t pa_config = 0;
   1b54e:	2300      	movs	r3, #0
{
   1b550:	4605      	mov	r5, r0
	ret = sx127x_read(REG_PADAC, &pa_dac, 1);
   1b552:	2201      	movs	r2, #1
   1b554:	f10d 0107 	add.w	r1, sp, #7
   1b558:	204d      	movs	r0, #77	; 0x4d
	uint8_t pa_config = 0;
   1b55a:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t pa_dac = 0;
   1b55e:	f88d 3007 	strb.w	r3, [sp, #7]
	ret = sx127x_read(REG_PADAC, &pa_dac, 1);
   1b562:	f7ff fef3 	bl	1b34c <sx127x_read>
	if (ret < 0) {
   1b566:	2800      	cmp	r0, #0
   1b568:	da0b      	bge.n	1b582 <SX1276SetRfTxPower+0x36>
   1b56a:	4928      	ldr	r1, [pc, #160]	; (1b60c <SX1276SetRfTxPower+0xc0>)
   1b56c:	4b28      	ldr	r3, [pc, #160]	; (1b610 <SX1276SetRfTxPower+0xc4>)
		LOG_ERR("Unable to read PA dac");
   1b56e:	4829      	ldr	r0, [pc, #164]	; (1b614 <SX1276SetRfTxPower+0xc8>)
   1b570:	1ac9      	subs	r1, r1, r3
   1b572:	08c9      	lsrs	r1, r1, #3
   1b574:	0189      	lsls	r1, r1, #6
   1b576:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Unable to write PA dac");
   1b57a:	f003 fda9 	bl	1f0d0 <log_0>
}
   1b57e:	b003      	add	sp, #12
   1b580:	bd30      	pop	{r4, r5, pc}
	pa_dac &= ~SX127X_PADAC_20DBM_MASK;
   1b582:	2d14      	cmp	r5, #20
   1b584:	4629      	mov	r1, r5
   1b586:	bfa8      	it	ge
   1b588:	2114      	movge	r1, #20
   1b58a:	2902      	cmp	r1, #2
   1b58c:	f89d 4007 	ldrb.w	r4, [sp, #7]
		pa_config |= SX127X_PACONFIG_PASELECT_PABOOST;
   1b590:	f99d 2006 	ldrsb.w	r2, [sp, #6]
   1b594:	bfb8      	it	lt
   1b596:	2102      	movlt	r1, #2
		if (power > 17) {
   1b598:	2d11      	cmp	r5, #17
	pa_dac &= ~SX127X_PADAC_20DBM_MASK;
   1b59a:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
			pa_config |= (power - 5) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
   1b59e:	bfcc      	ite	gt
   1b5a0:	3905      	subgt	r1, #5
			pa_config |= (power - 2) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
   1b5a2:	3902      	suble	r1, #2
   1b5a4:	f062 037f 	orn	r3, r2, #127	; 0x7f
			pa_dac |= SX127X_PADAC_20DBM_ON;
   1b5a8:	bfcc      	ite	gt
   1b5aa:	f044 0407 	orrgt.w	r4, r4, #7
			pa_dac |= SX127X_PADAC_20DBM_OFF;
   1b5ae:	f044 0404 	orrle.w	r4, r4, #4
			pa_config |= (power - 2) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
   1b5b2:	ea43 0301 	orr.w	r3, r3, r1
	ret = sx127x_write(REG_PACONFIG, &pa_config, 1);
   1b5b6:	f04f 0201 	mov.w	r2, #1
   1b5ba:	f10d 0106 	add.w	r1, sp, #6
   1b5be:	f04f 0009 	mov.w	r0, #9
			pa_dac |= SX127X_PADAC_20DBM_ON;
   1b5c2:	bfcc      	ite	gt
   1b5c4:	f88d 4007 	strbgt.w	r4, [sp, #7]
			pa_dac |= SX127X_PADAC_20DBM_OFF;
   1b5c8:	f88d 4007 	strble.w	r4, [sp, #7]
			pa_config |= (power - 2) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
   1b5cc:	f88d 3006 	strb.w	r3, [sp, #6]
	ret = sx127x_write(REG_PACONFIG, &pa_config, 1);
   1b5d0:	f7ff ff82 	bl	1b4d8 <sx127x_write>
	if (ret < 0) {
   1b5d4:	2800      	cmp	r0, #0
   1b5d6:	da08      	bge.n	1b5ea <SX1276SetRfTxPower+0x9e>
   1b5d8:	490c      	ldr	r1, [pc, #48]	; (1b60c <SX1276SetRfTxPower+0xc0>)
   1b5da:	4b0d      	ldr	r3, [pc, #52]	; (1b610 <SX1276SetRfTxPower+0xc4>)
		LOG_ERR("Unable to write PA config");
   1b5dc:	480e      	ldr	r0, [pc, #56]	; (1b618 <SX1276SetRfTxPower+0xcc>)
   1b5de:	1ac9      	subs	r1, r1, r3
   1b5e0:	08c9      	lsrs	r1, r1, #3
   1b5e2:	0189      	lsls	r1, r1, #6
   1b5e4:	f041 0101 	orr.w	r1, r1, #1
   1b5e8:	e7c7      	b.n	1b57a <SX1276SetRfTxPower+0x2e>
	ret = sx127x_write(REG_PADAC, &pa_dac, 1);
   1b5ea:	2201      	movs	r2, #1
   1b5ec:	f10d 0107 	add.w	r1, sp, #7
   1b5f0:	204d      	movs	r0, #77	; 0x4d
   1b5f2:	f7ff ff71 	bl	1b4d8 <sx127x_write>
	if (ret < 0) {
   1b5f6:	2800      	cmp	r0, #0
   1b5f8:	dac1      	bge.n	1b57e <SX1276SetRfTxPower+0x32>
   1b5fa:	4904      	ldr	r1, [pc, #16]	; (1b60c <SX1276SetRfTxPower+0xc0>)
   1b5fc:	4b04      	ldr	r3, [pc, #16]	; (1b610 <SX1276SetRfTxPower+0xc4>)
		LOG_ERR("Unable to write PA dac");
   1b5fe:	4807      	ldr	r0, [pc, #28]	; (1b61c <SX1276SetRfTxPower+0xd0>)
   1b600:	1ac9      	subs	r1, r1, r3
   1b602:	08c9      	lsrs	r1, r1, #3
   1b604:	0189      	lsls	r1, r1, #6
   1b606:	f041 0101 	orr.w	r1, r1, #1
   1b60a:	e7b6      	b.n	1b57a <SX1276SetRfTxPower+0x2e>
   1b60c:	00024038 	.word	0x00024038
   1b610:	00023ed8 	.word	0x00023ed8
   1b614:	00027a71 	.word	0x00027a71
   1b618:	00027a87 	.word	0x00027a87
   1b61c:	00027aa1 	.word	0x00027aa1

0001b620 <GetFskBandwidthRegValue>:
{
   1b620:	b510      	push	{r4, lr}
   1b622:	4b09      	ldr	r3, [pc, #36]	; (1b648 <GetFskBandwidthRegValue+0x28>)
   1b624:	2200      	movs	r2, #0
   1b626:	4619      	mov	r1, r3
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
   1b628:	681c      	ldr	r4, [r3, #0]
   1b62a:	4284      	cmp	r4, r0
   1b62c:	d806      	bhi.n	1b63c <GetFskBandwidthRegValue+0x1c>
   1b62e:	689c      	ldr	r4, [r3, #8]
   1b630:	4284      	cmp	r4, r0
   1b632:	d903      	bls.n	1b63c <GetFskBandwidthRegValue+0x1c>
            return FskBandwidths[i].RegValue;
   1b634:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   1b638:	7910      	ldrb	r0, [r2, #4]
}
   1b63a:	bd10      	pop	{r4, pc}
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
   1b63c:	3201      	adds	r2, #1
   1b63e:	2a15      	cmp	r2, #21
   1b640:	f103 0308 	add.w	r3, r3, #8
   1b644:	d1f0      	bne.n	1b628 <GetFskBandwidthRegValue+0x8>
    while( 1 );
   1b646:	e7fe      	b.n	1b646 <GetFskBandwidthRegValue+0x26>
   1b648:	00025864 	.word	0x00025864

0001b64c <SX1276OnDio4Irq>:
    }
}

void SX1276OnDio4Irq( void* context )
{
    switch( SX1276.Settings.Modem )
   1b64c:	4b05      	ldr	r3, [pc, #20]	; (1b664 <SX1276OnDio4Irq+0x18>)
   1b64e:	f893 20e1 	ldrb.w	r2, [r3, #225]	; 0xe1
   1b652:	b92a      	cbnz	r2, 1b660 <SX1276OnDio4Irq+0x14>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
   1b654:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
   1b658:	b912      	cbnz	r2, 1b660 <SX1276OnDio4Irq+0x14>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
   1b65a:	2201      	movs	r2, #1
   1b65c:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
   1b660:	4770      	bx	lr
   1b662:	bf00      	nop
   1b664:	20002bbc 	.word	0x20002bbc

0001b668 <SX1276GetStatus>:
}
   1b668:	4b01      	ldr	r3, [pc, #4]	; (1b670 <SX1276GetStatus+0x8>)
   1b66a:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
   1b66e:	4770      	bx	lr
   1b670:	20002bbc 	.word	0x20002bbc

0001b674 <SX1276ReadRssi>:
{
   1b674:	b508      	push	{r3, lr}
    switch( modem )
   1b676:	b120      	cbz	r0, 1b682 <SX1276ReadRssi+0xe>
   1b678:	2801      	cmp	r0, #1
   1b67a:	d00a      	beq.n	1b692 <SX1276ReadRssi+0x1e>
   1b67c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1b680:	bd08      	pop	{r3, pc}
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
   1b682:	2011      	movs	r0, #17
   1b684:	f007 fc3a 	bl	22efc <SX1276Read>
   1b688:	f3c0 0047 	ubfx	r0, r0, #1, #8
   1b68c:	4240      	negs	r0, r0
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
   1b68e:	b200      	sxth	r0, r0
   1b690:	e7f6      	b.n	1b680 <SX1276ReadRssi+0xc>
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
   1b692:	4b08      	ldr	r3, [pc, #32]	; (1b6b4 <SX1276ReadRssi+0x40>)
   1b694:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
   1b698:	4b07      	ldr	r3, [pc, #28]	; (1b6b8 <SX1276ReadRssi+0x44>)
   1b69a:	429a      	cmp	r2, r3
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
   1b69c:	f04f 001b 	mov.w	r0, #27
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
   1b6a0:	d903      	bls.n	1b6aa <SX1276ReadRssi+0x36>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
   1b6a2:	f007 fc2b 	bl	22efc <SX1276Read>
   1b6a6:	389d      	subs	r0, #157	; 0x9d
   1b6a8:	e7f1      	b.n	1b68e <SX1276ReadRssi+0x1a>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
   1b6aa:	f007 fc27 	bl	22efc <SX1276Read>
   1b6ae:	38a4      	subs	r0, #164	; 0xa4
   1b6b0:	e7ed      	b.n	1b68e <SX1276ReadRssi+0x1a>
   1b6b2:	bf00      	nop
   1b6b4:	20002bbc 	.word	0x20002bbc
   1b6b8:	1f4add40 	.word	0x1f4add40

0001b6bc <SX1276SetSleep>:
{
   1b6bc:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
   1b6be:	480a      	ldr	r0, [pc, #40]	; (1b6e8 <SX1276SetSleep+0x2c>)
   1b6c0:	f000 fdc8 	bl	1c254 <TimerStop>
    TimerStop( &TxTimeoutTimer );
   1b6c4:	4809      	ldr	r0, [pc, #36]	; (1b6ec <SX1276SetSleep+0x30>)
   1b6c6:	f000 fdc5 	bl	1c254 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
   1b6ca:	4809      	ldr	r0, [pc, #36]	; (1b6f0 <SX1276SetSleep+0x34>)
   1b6cc:	f000 fdc2 	bl	1c254 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
   1b6d0:	2000      	movs	r0, #0
   1b6d2:	f007 fc1e 	bl	22f12 <SX1276SetOpMode>
    SX1276SetBoardTcxo( false );
   1b6d6:	2000      	movs	r0, #0
   1b6d8:	f007 fc03 	bl	22ee2 <SX1276SetBoardTcxo>
    SX1276.Settings.State = RF_IDLE;
   1b6dc:	4b05      	ldr	r3, [pc, #20]	; (1b6f4 <SX1276SetSleep+0x38>)
   1b6de:	2200      	movs	r2, #0
   1b6e0:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
   1b6e4:	bd08      	pop	{r3, pc}
   1b6e6:	bf00      	nop
   1b6e8:	20002ba4 	.word	0x20002ba4
   1b6ec:	20002d00 	.word	0x20002d00
   1b6f0:	20002b8c 	.word	0x20002b8c
   1b6f4:	20002bbc 	.word	0x20002bbc

0001b6f8 <SX1276SetStby>:
{
   1b6f8:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
   1b6fa:	4808      	ldr	r0, [pc, #32]	; (1b71c <SX1276SetStby+0x24>)
   1b6fc:	f000 fdaa 	bl	1c254 <TimerStop>
    TimerStop( &TxTimeoutTimer );
   1b700:	4807      	ldr	r0, [pc, #28]	; (1b720 <SX1276SetStby+0x28>)
   1b702:	f000 fda7 	bl	1c254 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
   1b706:	4807      	ldr	r0, [pc, #28]	; (1b724 <SX1276SetStby+0x2c>)
   1b708:	f000 fda4 	bl	1c254 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_STANDBY );
   1b70c:	2001      	movs	r0, #1
   1b70e:	f007 fc00 	bl	22f12 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
   1b712:	4b05      	ldr	r3, [pc, #20]	; (1b728 <SX1276SetStby+0x30>)
   1b714:	2200      	movs	r2, #0
   1b716:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
   1b71a:	bd08      	pop	{r3, pc}
   1b71c:	20002ba4 	.word	0x20002ba4
   1b720:	20002d00 	.word	0x20002d00
   1b724:	20002b8c 	.word	0x20002b8c
   1b728:	20002bbc 	.word	0x20002bbc

0001b72c <SX1276SetRx>:
{
   1b72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch( SX1276.Settings.Modem )
   1b72e:	4c81      	ldr	r4, [pc, #516]	; (1b934 <SX1276SetRx+0x208>)
{
   1b730:	4606      	mov	r6, r0
    TimerStop( &TxTimeoutTimer );
   1b732:	4881      	ldr	r0, [pc, #516]	; (1b938 <SX1276SetRx+0x20c>)
   1b734:	f000 fd8e 	bl	1c254 <TimerStop>
    switch( SX1276.Settings.Modem )
   1b738:	f894 50e1 	ldrb.w	r5, [r4, #225]	; 0xe1
   1b73c:	b32d      	cbz	r5, 1b78a <SX1276SetRx+0x5e>
   1b73e:	2d01      	cmp	r5, #1
   1b740:	d04a      	beq.n	1b7d8 <SX1276SetRx+0xac>
   1b742:	2700      	movs	r7, #0
    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
   1b744:	487d      	ldr	r0, [pc, #500]	; (1b93c <SX1276SetRx+0x210>)
   1b746:	f44f 7280 	mov.w	r2, #256	; 0x100
   1b74a:	2100      	movs	r1, #0
   1b74c:	f008 fa65 	bl	23c1a <memset>
    SX1276.Settings.State = RF_RX_RUNNING;
   1b750:	2301      	movs	r3, #1
   1b752:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    if( timeout != 0 )
   1b756:	b136      	cbz	r6, 1b766 <SX1276SetRx+0x3a>
        TimerSetValue( &RxTimeoutTimer, timeout );
   1b758:	4879      	ldr	r0, [pc, #484]	; (1b940 <SX1276SetRx+0x214>)
   1b75a:	4631      	mov	r1, r6
   1b75c:	f007 fc66 	bl	2302c <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
   1b760:	4877      	ldr	r0, [pc, #476]	; (1b940 <SX1276SetRx+0x214>)
   1b762:	f000 fd01 	bl	1c168 <TimerStart>
    if( SX1276.Settings.Modem == MODEM_FSK )
   1b766:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   1b76a:	2b00      	cmp	r3, #0
   1b76c:	f040 80d9 	bne.w	1b922 <SX1276SetRx+0x1f6>
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
   1b770:	2005      	movs	r0, #5
   1b772:	f007 fbce 	bl	22f12 <SX1276SetOpMode>
        TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
   1b776:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
   1b77a:	4872      	ldr	r0, [pc, #456]	; (1b944 <SX1276SetRx+0x218>)
   1b77c:	f007 fc56 	bl	2302c <TimerSetValue>
}
   1b780:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        TimerStart( &RxTimeoutSyncWord );
   1b784:	486f      	ldr	r0, [pc, #444]	; (1b944 <SX1276SetRx+0x218>)
   1b786:	f000 bcef 	b.w	1c168 <TimerStart>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
   1b78a:	2040      	movs	r0, #64	; 0x40
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
   1b78c:	f894 7102 	ldrb.w	r7, [r4, #258]	; 0x102
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
   1b790:	f007 fbb4 	bl	22efc <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO0_00 |
   1b794:	f000 0103 	and.w	r1, r0, #3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
   1b798:	f041 010c 	orr.w	r1, r1, #12
   1b79c:	2040      	movs	r0, #64	; 0x40
   1b79e:	f007 fba2 	bl	22ee6 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
   1b7a2:	2041      	movs	r0, #65	; 0x41
   1b7a4:	f007 fbaa 	bl	22efc <SX1276Read>
   1b7a8:	f060 013e 	orn	r1, r0, #62	; 0x3e
   1b7ac:	b2c9      	uxtb	r1, r1
   1b7ae:	2041      	movs	r0, #65	; 0x41
   1b7b0:	f007 fb99 	bl	22ee6 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
   1b7b4:	2035      	movs	r0, #53	; 0x35
   1b7b6:	f007 fba1 	bl	22efc <SX1276Read>
   1b7ba:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   1b7be:	f884 011a 	strb.w	r0, [r4, #282]	; 0x11a
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
   1b7c2:	211e      	movs	r1, #30
   1b7c4:	200d      	movs	r0, #13
   1b7c6:	f007 fb8e 	bl	22ee6 <SX1276Write>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
   1b7ca:	f8a4 510c 	strh.w	r5, [r4, #268]	; 0x10c
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
   1b7ce:	f8a4 5118 	strh.w	r5, [r4, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = 0;
   1b7d2:	f8a4 5116 	strh.w	r5, [r4, #278]	; 0x116
        break;
   1b7d6:	e7b5      	b.n	1b744 <SX1276SetRx+0x18>
            if( SX1276.Settings.LoRa.IqInverted == true )
   1b7d8:	f894 3131 	ldrb.w	r3, [r4, #305]	; 0x131
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
   1b7dc:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
   1b7de:	b33b      	cbz	r3, 1b830 <SX1276SetRx+0x104>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
   1b7e0:	f007 fb8c 	bl	22efc <SX1276Read>
   1b7e4:	f040 0141 	orr.w	r1, r0, #65	; 0x41
   1b7e8:	b2c9      	uxtb	r1, r1
   1b7ea:	2033      	movs	r0, #51	; 0x33
   1b7ec:	f007 fb7b 	bl	22ee6 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
   1b7f0:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
   1b7f2:	203b      	movs	r0, #59	; 0x3b
   1b7f4:	f007 fb77 	bl	22ee6 <SX1276Write>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
   1b7f8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1b7fc:	2b08      	cmp	r3, #8
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
   1b7fe:	f04f 0031 	mov.w	r0, #49	; 0x31
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
   1b802:	d87d      	bhi.n	1b900 <SX1276SetRx+0x1d4>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
   1b804:	f007 fb7a 	bl	22efc <SX1276Read>
   1b808:	f000 017f 	and.w	r1, r0, #127	; 0x7f
   1b80c:	2031      	movs	r0, #49	; 0x31
   1b80e:	f007 fb6a 	bl	22ee6 <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
   1b812:	2100      	movs	r1, #0
   1b814:	2030      	movs	r0, #48	; 0x30
   1b816:	f007 fb66 	bl	22ee6 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
   1b81a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1b81e:	2b08      	cmp	r3, #8
   1b820:	d81c      	bhi.n	1b85c <SX1276SetRx+0x130>
   1b822:	e8df f003 	tbb	[pc, r3]
   1b826:	3610      	.short	0x3610
   1b828:	5e544a40 	.word	0x5e544a40
   1b82c:	6868      	.short	0x6868
   1b82e:	68          	.byte	0x68
   1b82f:	00          	.byte	0x00
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
   1b830:	f007 fb64 	bl	22efc <SX1276Read>
   1b834:	f000 01be 	and.w	r1, r0, #190	; 0xbe
   1b838:	f041 0101 	orr.w	r1, r1, #1
   1b83c:	2033      	movs	r0, #51	; 0x33
   1b83e:	f007 fb52 	bl	22ee6 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
   1b842:	211d      	movs	r1, #29
   1b844:	e7d5      	b.n	1b7f2 <SX1276SetRx+0xc6>
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
   1b846:	202f      	movs	r0, #47	; 0x2f
   1b848:	2148      	movs	r1, #72	; 0x48
   1b84a:	f007 fb4c 	bl	22ee6 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
   1b84e:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
   1b852:	f500 50f4 	add.w	r0, r0, #7808	; 0x1e80
   1b856:	3002      	adds	r0, #2
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
   1b858:	f7e6 fcce 	bl	21f8 <SX1276SetChannel>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
   1b85c:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
   1b860:	f894 7132 	ldrb.w	r7, [r4, #306]	; 0x132
            if( SX1276.Settings.LoRa.FreqHopOn == true )
   1b864:	2b00      	cmp	r3, #0
   1b866:	d052      	beq.n	1b90e <SX1276SetRx+0x1e2>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
   1b868:	211d      	movs	r1, #29
   1b86a:	2011      	movs	r0, #17
   1b86c:	f007 fb3b 	bl	22ee6 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
   1b870:	2040      	movs	r0, #64	; 0x40
   1b872:	f007 fb43 	bl	22efc <SX1276Read>
   1b876:	f000 0133 	and.w	r1, r0, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
   1b87a:	2040      	movs	r0, #64	; 0x40
   1b87c:	f007 fb33 	bl	22ee6 <SX1276Write>
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
   1b880:	2100      	movs	r1, #0
   1b882:	200f      	movs	r0, #15
   1b884:	f007 fb2f 	bl	22ee6 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
   1b888:	2100      	movs	r1, #0
   1b88a:	200d      	movs	r0, #13
   1b88c:	f007 fb2b 	bl	22ee6 <SX1276Write>
        break;
   1b890:	e758      	b.n	1b744 <SX1276SetRx+0x18>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
   1b892:	202f      	movs	r0, #47	; 0x2f
   1b894:	2144      	movs	r1, #68	; 0x44
   1b896:	f007 fb26 	bl	22ee6 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
   1b89a:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
   1b89e:	f500 5022 	add.w	r0, r0, #10368	; 0x2880
   1b8a2:	3034      	adds	r0, #52	; 0x34
   1b8a4:	e7d8      	b.n	1b858 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
   1b8a6:	202f      	movs	r0, #47	; 0x2f
   1b8a8:	2144      	movs	r1, #68	; 0x44
   1b8aa:	f007 fb1c 	bl	22ee6 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
   1b8ae:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
   1b8b2:	f500 5074 	add.w	r0, r0, #15616	; 0x3d00
   1b8b6:	3004      	adds	r0, #4
   1b8b8:	e7ce      	b.n	1b858 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
   1b8ba:	202f      	movs	r0, #47	; 0x2f
   1b8bc:	2144      	movs	r1, #68	; 0x44
   1b8be:	f007 fb12 	bl	22ee6 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
   1b8c2:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
   1b8c6:	f500 40a2 	add.w	r0, r0, #20736	; 0x5100
   1b8ca:	305e      	adds	r0, #94	; 0x5e
   1b8cc:	e7c4      	b.n	1b858 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
   1b8ce:	202f      	movs	r0, #47	; 0x2f
   1b8d0:	2144      	movs	r1, #68	; 0x44
   1b8d2:	f007 fb08 	bl	22ee6 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
   1b8d6:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
   1b8da:	f500 40f4 	add.w	r0, r0, #31232	; 0x7a00
   1b8de:	3012      	adds	r0, #18
   1b8e0:	e7ba      	b.n	1b858 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
   1b8e2:	202f      	movs	r0, #47	; 0x2f
   1b8e4:	2144      	movs	r1, #68	; 0x44
   1b8e6:	f007 fafe 	bl	22ee6 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
   1b8ea:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
   1b8ee:	f500 4022 	add.w	r0, r0, #41472	; 0xa200
   1b8f2:	30c6      	adds	r0, #198	; 0xc6
   1b8f4:	e7b0      	b.n	1b858 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
   1b8f6:	2140      	movs	r1, #64	; 0x40
   1b8f8:	202f      	movs	r0, #47	; 0x2f
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
   1b8fa:	f007 faf4 	bl	22ee6 <SX1276Write>
   1b8fe:	e7ad      	b.n	1b85c <SX1276SetRx+0x130>
   1b900:	f007 fafc 	bl	22efc <SX1276Read>
   1b904:	f060 017f 	orn	r1, r0, #127	; 0x7f
   1b908:	b2c9      	uxtb	r1, r1
   1b90a:	2031      	movs	r0, #49	; 0x31
   1b90c:	e7f5      	b.n	1b8fa <SX1276SetRx+0x1ce>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
   1b90e:	211f      	movs	r1, #31
   1b910:	2011      	movs	r0, #17
   1b912:	f007 fae8 	bl	22ee6 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
   1b916:	2040      	movs	r0, #64	; 0x40
   1b918:	f007 faf0 	bl	22efc <SX1276Read>
   1b91c:	f000 013f 	and.w	r1, r0, #63	; 0x3f
   1b920:	e7ab      	b.n	1b87a <SX1276SetRx+0x14e>
        if( rxContinuous == true )
   1b922:	b127      	cbz	r7, 1b92e <SX1276SetRx+0x202>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
   1b924:	2005      	movs	r0, #5
}
   1b926:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
   1b92a:	f007 baf2 	b.w	22f12 <SX1276SetOpMode>
   1b92e:	2006      	movs	r0, #6
   1b930:	e7f9      	b.n	1b926 <SX1276SetRx+0x1fa>
   1b932:	bf00      	nop
   1b934:	20002bbc 	.word	0x20002bbc
   1b938:	20002d00 	.word	0x20002d00
   1b93c:	200035df 	.word	0x200035df
   1b940:	20002ba4 	.word	0x20002ba4
   1b944:	20002b8c 	.word	0x20002b8c

0001b948 <SX1276SetTx>:
{
   1b948:	b510      	push	{r4, lr}
   1b94a:	4604      	mov	r4, r0
    TimerStop( &RxTimeoutTimer );
   1b94c:	4826      	ldr	r0, [pc, #152]	; (1b9e8 <SX1276SetTx+0xa0>)
   1b94e:	f000 fc81 	bl	1c254 <TimerStop>
    TimerSetValue( &TxTimeoutTimer, timeout );
   1b952:	4621      	mov	r1, r4
    switch( SX1276.Settings.Modem )
   1b954:	4c25      	ldr	r4, [pc, #148]	; (1b9ec <SX1276SetTx+0xa4>)
    TimerSetValue( &TxTimeoutTimer, timeout );
   1b956:	4826      	ldr	r0, [pc, #152]	; (1b9f0 <SX1276SetTx+0xa8>)
   1b958:	f007 fb68 	bl	2302c <TimerSetValue>
    switch( SX1276.Settings.Modem )
   1b95c:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   1b960:	b163      	cbz	r3, 1b97c <SX1276SetTx+0x34>
   1b962:	2b01      	cmp	r3, #1
   1b964:	d024      	beq.n	1b9b0 <SX1276SetTx+0x68>
    TimerStart( &TxTimeoutTimer );
   1b966:	4822      	ldr	r0, [pc, #136]	; (1b9f0 <SX1276SetTx+0xa8>)
    SX1276.Settings.State = RF_TX_RUNNING;
   1b968:	2302      	movs	r3, #2
   1b96a:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    TimerStart( &TxTimeoutTimer );
   1b96e:	f000 fbfb 	bl	1c168 <TimerStart>
}
   1b972:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
   1b976:	2003      	movs	r0, #3
   1b978:	f007 bacb 	b.w	22f12 <SX1276SetOpMode>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
   1b97c:	2040      	movs	r0, #64	; 0x40
   1b97e:	f007 fabd 	bl	22efc <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO1_MASK &
   1b982:	f000 0103 	and.w	r1, r0, #3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
   1b986:	f041 0110 	orr.w	r1, r1, #16
   1b98a:	2040      	movs	r0, #64	; 0x40
   1b98c:	f007 faab 	bl	22ee6 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
   1b990:	2041      	movs	r0, #65	; 0x41
   1b992:	f007 fab3 	bl	22efc <SX1276Read>
   1b996:	f000 013e 	and.w	r1, r0, #62	; 0x3e
   1b99a:	2041      	movs	r0, #65	; 0x41
   1b99c:	f007 faa3 	bl	22ee6 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
   1b9a0:	2035      	movs	r0, #53	; 0x35
   1b9a2:	f007 faab 	bl	22efc <SX1276Read>
   1b9a6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   1b9aa:	f884 011a 	strb.w	r0, [r4, #282]	; 0x11a
        break;
   1b9ae:	e7da      	b.n	1b966 <SX1276SetTx+0x1e>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
   1b9b0:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
   1b9b4:	b173      	cbz	r3, 1b9d4 <SX1276SetTx+0x8c>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
   1b9b6:	21f5      	movs	r1, #245	; 0xf5
   1b9b8:	2011      	movs	r0, #17
   1b9ba:	f007 fa94 	bl	22ee6 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
   1b9be:	2040      	movs	r0, #64	; 0x40
   1b9c0:	f007 fa9c 	bl	22efc <SX1276Read>
   1b9c4:	f000 0133 	and.w	r1, r0, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
   1b9c8:	f041 0140 	orr.w	r1, r1, #64	; 0x40
   1b9cc:	2040      	movs	r0, #64	; 0x40
   1b9ce:	f007 fa8a 	bl	22ee6 <SX1276Write>
   1b9d2:	e7c8      	b.n	1b966 <SX1276SetTx+0x1e>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
   1b9d4:	21f7      	movs	r1, #247	; 0xf7
   1b9d6:	2011      	movs	r0, #17
   1b9d8:	f007 fa85 	bl	22ee6 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
   1b9dc:	2040      	movs	r0, #64	; 0x40
   1b9de:	f007 fa8d 	bl	22efc <SX1276Read>
   1b9e2:	f000 013f 	and.w	r1, r0, #63	; 0x3f
   1b9e6:	e7ef      	b.n	1b9c8 <SX1276SetTx+0x80>
   1b9e8:	20002ba4 	.word	0x20002ba4
   1b9ec:	20002bbc 	.word	0x20002bbc
   1b9f0:	20002d00 	.word	0x20002d00

0001b9f4 <SX1276SetModem>:
{
   1b9f4:	b510      	push	{r4, lr}
   1b9f6:	4604      	mov	r4, r0
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
   1b9f8:	2001      	movs	r0, #1
   1b9fa:	f007 fa7f 	bl	22efc <SX1276Read>
        SX1276.Settings.Modem = MODEM_LORA;
   1b9fe:	f3c0 10c0 	ubfx	r0, r0, #7, #1
    if( SX1276.Settings.Modem == modem )
   1ba02:	42a0      	cmp	r0, r4
   1ba04:	4b17      	ldr	r3, [pc, #92]	; (1ba64 <SX1276SetModem+0x70>)
   1ba06:	d102      	bne.n	1ba0e <SX1276SetModem+0x1a>
   1ba08:	f883 00e1 	strb.w	r0, [r3, #225]	; 0xe1
}
   1ba0c:	bd10      	pop	{r4, pc}
    switch( SX1276.Settings.Modem )
   1ba0e:	2c01      	cmp	r4, #1
    SX1276.Settings.Modem = modem;
   1ba10:	f883 40e1 	strb.w	r4, [r3, #225]	; 0xe1
        SX1276SetOpMode( RF_OPMODE_SLEEP );
   1ba14:	f04f 0000 	mov.w	r0, #0
    switch( SX1276.Settings.Modem )
   1ba18:	d013      	beq.n	1ba42 <SX1276SetModem+0x4e>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
   1ba1a:	f007 fa7a 	bl	22f12 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
   1ba1e:	2001      	movs	r0, #1
   1ba20:	f007 fa6c 	bl	22efc <SX1276Read>
   1ba24:	f000 017f 	and.w	r1, r0, #127	; 0x7f
   1ba28:	2001      	movs	r0, #1
   1ba2a:	f007 fa5c 	bl	22ee6 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
   1ba2e:	2100      	movs	r1, #0
   1ba30:	2040      	movs	r0, #64	; 0x40
   1ba32:	f007 fa58 	bl	22ee6 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
   1ba36:	2130      	movs	r1, #48	; 0x30
}
   1ba38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SX1276Write( REG_DIOMAPPING2, 0x00 );
   1ba3c:	2041      	movs	r0, #65	; 0x41
   1ba3e:	f007 ba52 	b.w	22ee6 <SX1276Write>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
   1ba42:	f007 fa66 	bl	22f12 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
   1ba46:	4620      	mov	r0, r4
   1ba48:	f007 fa58 	bl	22efc <SX1276Read>
   1ba4c:	f060 017f 	orn	r1, r0, #127	; 0x7f
   1ba50:	b2c9      	uxtb	r1, r1
   1ba52:	4620      	mov	r0, r4
   1ba54:	f007 fa47 	bl	22ee6 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
   1ba58:	2100      	movs	r1, #0
   1ba5a:	2040      	movs	r0, #64	; 0x40
   1ba5c:	f007 fa43 	bl	22ee6 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
   1ba60:	2100      	movs	r1, #0
   1ba62:	e7e9      	b.n	1ba38 <SX1276SetModem+0x44>
   1ba64:	20002bbc 	.word	0x20002bbc

0001ba68 <SX1276Init>:
{
   1ba68:	b538      	push	{r3, r4, r5, lr}
    RadioEvents = events;
   1ba6a:	4b17      	ldr	r3, [pc, #92]	; (1bac8 <SX1276Init+0x60>)
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
   1ba6c:	4917      	ldr	r1, [pc, #92]	; (1bacc <SX1276Init+0x64>)
    RadioEvents = events;
   1ba6e:	6018      	str	r0, [r3, #0]
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
   1ba70:	4817      	ldr	r0, [pc, #92]	; (1bad0 <SX1276Init+0x68>)
   1ba72:	4c18      	ldr	r4, [pc, #96]	; (1bad4 <SX1276Init+0x6c>)
   1ba74:	f007 fad2 	bl	2301c <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
   1ba78:	4914      	ldr	r1, [pc, #80]	; (1bacc <SX1276Init+0x64>)
   1ba7a:	4817      	ldr	r0, [pc, #92]	; (1bad8 <SX1276Init+0x70>)
   1ba7c:	f007 face 	bl	2301c <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
   1ba80:	4912      	ldr	r1, [pc, #72]	; (1bacc <SX1276Init+0x64>)
   1ba82:	4816      	ldr	r0, [pc, #88]	; (1badc <SX1276Init+0x74>)
   1ba84:	f007 faca 	bl	2301c <TimerInit>
    SX1276Reset( );
   1ba88:	f7ff fbc6 	bl	1b218 <SX1276Reset>
    RxChainCalibration( );
   1ba8c:	f7e6 fbdc 	bl	2248 <RxChainCalibration>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
   1ba90:	2000      	movs	r0, #0
   1ba92:	f007 fa3e 	bl	22f12 <SX1276SetOpMode>
    SX1276IoIrqInit( DioIrq );
   1ba96:	4812      	ldr	r0, [pc, #72]	; (1bae0 <SX1276Init+0x78>)
   1ba98:	f7ff fbd4 	bl	1b244 <SX1276IoIrqInit>
   1ba9c:	2500      	movs	r5, #0
        SX1276SetModem( RadioRegsInit[i].Modem );
   1ba9e:	7820      	ldrb	r0, [r4, #0]
   1baa0:	f7ff ffa8 	bl	1b9f4 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
   1baa4:	3501      	adds	r5, #1
   1baa6:	78a1      	ldrb	r1, [r4, #2]
   1baa8:	7860      	ldrb	r0, [r4, #1]
   1baaa:	f007 fa1c 	bl	22ee6 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
   1baae:	2d10      	cmp	r5, #16
   1bab0:	f104 0403 	add.w	r4, r4, #3
   1bab4:	d1f3      	bne.n	1ba9e <SX1276Init+0x36>
    SX1276SetModem( MODEM_FSK );
   1bab6:	2000      	movs	r0, #0
   1bab8:	f7ff ff9c 	bl	1b9f4 <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
   1babc:	4b09      	ldr	r3, [pc, #36]	; (1bae4 <SX1276Init+0x7c>)
   1babe:	2200      	movs	r2, #0
   1bac0:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
   1bac4:	bd38      	pop	{r3, r4, r5, pc}
   1bac6:	bf00      	nop
   1bac8:	20002b88 	.word	0x20002b88
   1bacc:	0001c081 	.word	0x0001c081
   1bad0:	20002d00 	.word	0x20002d00
   1bad4:	00027abf 	.word	0x00027abf
   1bad8:	20002ba4 	.word	0x20002ba4
   1badc:	20002b8c 	.word	0x20002b8c
   1bae0:	2000063c 	.word	0x2000063c
   1bae4:	20002bbc 	.word	0x20002bbc

0001bae8 <SX1276SetTxContinuousWave>:
{
   1bae8:	b530      	push	{r4, r5, lr}
    uint32_t timeout = ( uint32_t )( time * 1000 );
   1baea:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
   1baee:	b08b      	sub	sp, #44	; 0x2c
    uint32_t timeout = ( uint32_t )( time * 1000 );
   1baf0:	4354      	muls	r4, r2
{
   1baf2:	460d      	mov	r5, r1
    SX1276SetChannel( freq );
   1baf4:	f7e6 fb80 	bl	21f8 <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
   1baf8:	2300      	movs	r3, #0
   1bafa:	2205      	movs	r2, #5
   1bafc:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1bb00:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
   1bb04:	e9cd 3306 	strd	r3, r3, [sp, #24]
   1bb08:	e9cd 3304 	strd	r3, r3, [sp, #16]
   1bb0c:	9303      	str	r3, [sp, #12]
   1bb0e:	4618      	mov	r0, r3
   1bb10:	4629      	mov	r1, r5
   1bb12:	9200      	str	r2, [sp, #0]
   1bb14:	9408      	str	r4, [sp, #32]
   1bb16:	461a      	mov	r2, r3
   1bb18:	f7e6 fe66 	bl	27e8 <SX1276SetTxConfig>
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
   1bb1c:	2031      	movs	r0, #49	; 0x31
   1bb1e:	f007 f9ed 	bl	22efc <SX1276Read>
   1bb22:	f000 01bf 	and.w	r1, r0, #191	; 0xbf
   1bb26:	2031      	movs	r0, #49	; 0x31
   1bb28:	f007 f9dd 	bl	22ee6 <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
   1bb2c:	4d0c      	ldr	r5, [pc, #48]	; (1bb60 <SX1276SetTxContinuousWave+0x78>)
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
   1bb2e:	21f0      	movs	r1, #240	; 0xf0
   1bb30:	2040      	movs	r0, #64	; 0x40
   1bb32:	f007 f9d8 	bl	22ee6 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
   1bb36:	21a0      	movs	r1, #160	; 0xa0
   1bb38:	2041      	movs	r0, #65	; 0x41
   1bb3a:	f007 f9d4 	bl	22ee6 <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
   1bb3e:	4621      	mov	r1, r4
   1bb40:	4628      	mov	r0, r5
   1bb42:	f007 fa73 	bl	2302c <TimerSetValue>
    SX1276.Settings.State = RF_TX_RUNNING;
   1bb46:	4b07      	ldr	r3, [pc, #28]	; (1bb64 <SX1276SetTxContinuousWave+0x7c>)
   1bb48:	2202      	movs	r2, #2
    TimerStart( &TxTimeoutTimer );
   1bb4a:	4628      	mov	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
   1bb4c:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    TimerStart( &TxTimeoutTimer );
   1bb50:	f000 fb0a 	bl	1c168 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
   1bb54:	2003      	movs	r0, #3
}
   1bb56:	b00b      	add	sp, #44	; 0x2c
   1bb58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
   1bb5c:	f007 b9d9 	b.w	22f12 <SX1276SetOpMode>
   1bb60:	20002d00 	.word	0x20002d00
   1bb64:	20002bbc 	.word	0x20002bbc

0001bb68 <SX1276OnDio3Irq>:
{
   1bb68:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
   1bb6a:	4b11      	ldr	r3, [pc, #68]	; (1bbb0 <SX1276OnDio3Irq+0x48>)
   1bb6c:	f893 60e1 	ldrb.w	r6, [r3, #225]	; 0xe1
   1bb70:	2e01      	cmp	r6, #1
   1bb72:	d11c      	bne.n	1bbae <SX1276OnDio3Irq+0x46>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
   1bb74:	2012      	movs	r0, #18
   1bb76:	f007 f9c1 	bl	22efc <SX1276Read>
   1bb7a:	f010 0401 	ands.w	r4, r0, #1
   1bb7e:	4d0d      	ldr	r5, [pc, #52]	; (1bbb4 <SX1276OnDio3Irq+0x4c>)
   1bb80:	d00b      	beq.n	1bb9a <SX1276OnDio3Irq+0x32>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
   1bb82:	2105      	movs	r1, #5
   1bb84:	2012      	movs	r0, #18
   1bb86:	f007 f9ae 	bl	22ee6 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
   1bb8a:	682b      	ldr	r3, [r5, #0]
   1bb8c:	b17b      	cbz	r3, 1bbae <SX1276OnDio3Irq+0x46>
   1bb8e:	699b      	ldr	r3, [r3, #24]
   1bb90:	b16b      	cbz	r3, 1bbae <SX1276OnDio3Irq+0x46>
                RadioEvents->CadDone( true );
   1bb92:	4630      	mov	r0, r6
}
   1bb94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                RadioEvents->CadDone( false );
   1bb98:	4718      	bx	r3
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
   1bb9a:	2104      	movs	r1, #4
   1bb9c:	2012      	movs	r0, #18
   1bb9e:	f007 f9a2 	bl	22ee6 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
   1bba2:	682b      	ldr	r3, [r5, #0]
   1bba4:	b11b      	cbz	r3, 1bbae <SX1276OnDio3Irq+0x46>
   1bba6:	699b      	ldr	r3, [r3, #24]
   1bba8:	b10b      	cbz	r3, 1bbae <SX1276OnDio3Irq+0x46>
                RadioEvents->CadDone( false );
   1bbaa:	4620      	mov	r0, r4
   1bbac:	e7f2      	b.n	1bb94 <SX1276OnDio3Irq+0x2c>
}
   1bbae:	bd70      	pop	{r4, r5, r6, pc}
   1bbb0:	20002bbc 	.word	0x20002bbc
   1bbb4:	20002b88 	.word	0x20002b88

0001bbb8 <SX1276Send>:
{
   1bbb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    switch( SX1276.Settings.Modem )
   1bbba:	4c3d      	ldr	r4, [pc, #244]	; (1bcb0 <SX1276Send+0xf8>)
{
   1bbbc:	f88d 1007 	strb.w	r1, [sp, #7]
    switch( SX1276.Settings.Modem )
   1bbc0:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
{
   1bbc4:	4605      	mov	r5, r0
    switch( SX1276.Settings.Modem )
   1bbc6:	b133      	cbz	r3, 1bbd6 <SX1276Send+0x1e>
   1bbc8:	2b01      	cmp	r3, #1
   1bbca:	d034      	beq.n	1bc36 <SX1276Send+0x7e>
   1bbcc:	2000      	movs	r0, #0
    SX1276SetTx( txTimeout );
   1bbce:	f7ff febb 	bl	1b948 <SX1276SetTx>
}
   1bbd2:	b003      	add	sp, #12
   1bbd4:	bd30      	pop	{r4, r5, pc}
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
   1bbd6:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
            if( SX1276.Settings.Fsk.FixLen == false )
   1bbda:	f894 30fe 	ldrb.w	r3, [r4, #254]	; 0xfe
            SX1276.Settings.FskPacketHandler.Size = size;
   1bbde:	f89d 1007 	ldrb.w	r1, [sp, #7]
   1bbe2:	f8a4 1116 	strh.w	r1, [r4, #278]	; 0x116
            if( SX1276.Settings.Fsk.FixLen == false )
   1bbe6:	b9d3      	cbnz	r3, 1bc1e <SX1276Send+0x66>
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
   1bbe8:	2101      	movs	r1, #1
   1bbea:	f10d 0007 	add.w	r0, sp, #7
   1bbee:	f007 f9f0 	bl	22fd2 <SX1276WriteFifo>
            if( ( size > 0 ) && ( size <= 64 ) )
   1bbf2:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1bbf6:	1e53      	subs	r3, r2, #1
   1bbf8:	2b3f      	cmp	r3, #63	; 0x3f
   1bbfa:	d814      	bhi.n	1bc26 <SX1276Send+0x6e>
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
   1bbfc:	f884 211b 	strb.w	r2, [r4, #283]	; 0x11b
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
   1bc00:	4628      	mov	r0, r5
   1bc02:	f894 111b 	ldrb.w	r1, [r4, #283]	; 0x11b
   1bc06:	f007 f9e4 	bl	22fd2 <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
   1bc0a:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
   1bc0e:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
   1bc12:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
   1bc16:	4413      	add	r3, r2
   1bc18:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
        break;
   1bc1c:	e7d7      	b.n	1bbce <SX1276Send+0x16>
                SX1276Write( REG_PAYLOADLENGTH, size );
   1bc1e:	2032      	movs	r0, #50	; 0x32
   1bc20:	f007 f961 	bl	22ee6 <SX1276Write>
   1bc24:	e7e5      	b.n	1bbf2 <SX1276Send+0x3a>
                memcpy1( RxTxBuffer, buffer, size );
   1bc26:	4823      	ldr	r0, [pc, #140]	; (1bcb4 <SX1276Send+0xfc>)
   1bc28:	4629      	mov	r1, r5
   1bc2a:	f007 fa28 	bl	2307e <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
   1bc2e:	2320      	movs	r3, #32
   1bc30:	f884 311b 	strb.w	r3, [r4, #283]	; 0x11b
   1bc34:	e7e4      	b.n	1bc00 <SX1276Send+0x48>
            if( SX1276.Settings.LoRa.IqInverted == true )
   1bc36:	f894 3131 	ldrb.w	r3, [r4, #305]	; 0x131
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
   1bc3a:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
   1bc3c:	b363      	cbz	r3, 1bc98 <SX1276Send+0xe0>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
   1bc3e:	f007 f95d 	bl	22efc <SX1276Read>
   1bc42:	f000 01be 	and.w	r1, r0, #190	; 0xbe
   1bc46:	2033      	movs	r0, #51	; 0x33
   1bc48:	f007 f94d 	bl	22ee6 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
   1bc4c:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
   1bc4e:	203b      	movs	r0, #59	; 0x3b
   1bc50:	f007 f949 	bl	22ee6 <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
   1bc54:	f89d 1007 	ldrb.w	r1, [sp, #7]
   1bc58:	f884 1140 	strb.w	r1, [r4, #320]	; 0x140
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
   1bc5c:	2022      	movs	r0, #34	; 0x22
   1bc5e:	f007 f942 	bl	22ee6 <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
   1bc62:	2100      	movs	r1, #0
   1bc64:	200e      	movs	r0, #14
   1bc66:	f007 f93e 	bl	22ee6 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
   1bc6a:	2100      	movs	r1, #0
   1bc6c:	200d      	movs	r0, #13
   1bc6e:	f007 f93a 	bl	22ee6 <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
   1bc72:	2001      	movs	r0, #1
   1bc74:	f007 f942 	bl	22efc <SX1276Read>
   1bc78:	f030 03f8 	bics.w	r3, r0, #248	; 0xf8
   1bc7c:	d104      	bne.n	1bc88 <SX1276Send+0xd0>
                SX1276SetStby( );
   1bc7e:	f7ff fd3b 	bl	1b6f8 <SX1276SetStby>
                DelayMs( 1 );
   1bc82:	2001      	movs	r0, #1
   1bc84:	f007 f9f9 	bl	2307a <DelayMs>
            SX1276WriteFifo( buffer, size );
   1bc88:	4628      	mov	r0, r5
   1bc8a:	f89d 1007 	ldrb.w	r1, [sp, #7]
   1bc8e:	f007 f9a0 	bl	22fd2 <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
   1bc92:	f8d4 0134 	ldr.w	r0, [r4, #308]	; 0x134
        break;
   1bc96:	e79a      	b.n	1bbce <SX1276Send+0x16>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
   1bc98:	f007 f930 	bl	22efc <SX1276Read>
   1bc9c:	f000 01be 	and.w	r1, r0, #190	; 0xbe
   1bca0:	f041 0101 	orr.w	r1, r1, #1
   1bca4:	2033      	movs	r0, #51	; 0x33
   1bca6:	f007 f91e 	bl	22ee6 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
   1bcaa:	211d      	movs	r1, #29
   1bcac:	e7cf      	b.n	1bc4e <SX1276Send+0x96>
   1bcae:	bf00      	nop
   1bcb0:	20002bbc 	.word	0x20002bbc
   1bcb4:	200035df 	.word	0x200035df

0001bcb8 <SX1276OnDio0Irq>:
{
   1bcb8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    switch( SX1276.Settings.State )
   1bcba:	4e91      	ldr	r6, [pc, #580]	; (1bf00 <SX1276OnDio0Irq+0x248>)
    volatile uint8_t irqFlags = 0;
   1bcbc:	2300      	movs	r3, #0
   1bcbe:	f88d 3007 	strb.w	r3, [sp, #7]
    switch( SX1276.Settings.State )
   1bcc2:	f896 30e0 	ldrb.w	r3, [r6, #224]	; 0xe0
   1bcc6:	2b01      	cmp	r3, #1
   1bcc8:	4634      	mov	r4, r6
   1bcca:	d004      	beq.n	1bcd6 <SX1276OnDio0Irq+0x1e>
   1bccc:	2b02      	cmp	r3, #2
   1bcce:	f000 8101 	beq.w	1bed4 <SX1276OnDio0Irq+0x21c>
}
   1bcd2:	b002      	add	sp, #8
   1bcd4:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
   1bcd6:	f896 30e1 	ldrb.w	r3, [r6, #225]	; 0xe1
   1bcda:	b33b      	cbz	r3, 1bd2c <SX1276OnDio0Irq+0x74>
   1bcdc:	2b01      	cmp	r3, #1
   1bcde:	d1f8      	bne.n	1bcd2 <SX1276OnDio0Irq+0x1a>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
   1bce0:	2140      	movs	r1, #64	; 0x40
   1bce2:	2012      	movs	r0, #18
   1bce4:	f007 f8ff 	bl	22ee6 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
   1bce8:	2012      	movs	r0, #18
   1bcea:	f007 f907 	bl	22efc <SX1276Read>
   1bcee:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
   1bcf2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1bcf6:	4d83      	ldr	r5, [pc, #524]	; (1bf04 <SX1276OnDio0Irq+0x24c>)
   1bcf8:	f013 0f20 	tst.w	r3, #32
   1bcfc:	f000 8098 	beq.w	1be30 <SX1276OnDio0Irq+0x178>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
   1bd00:	2120      	movs	r1, #32
   1bd02:	2012      	movs	r0, #18
   1bd04:	f007 f8ef 	bl	22ee6 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
   1bd08:	f896 3132 	ldrb.w	r3, [r6, #306]	; 0x132
   1bd0c:	b90b      	cbnz	r3, 1bd12 <SX1276OnDio0Irq+0x5a>
                            SX1276.Settings.State = RF_IDLE;
   1bd0e:	f886 30e0 	strb.w	r3, [r6, #224]	; 0xe0
                        TimerStop( &RxTimeoutTimer );
   1bd12:	487d      	ldr	r0, [pc, #500]	; (1bf08 <SX1276OnDio0Irq+0x250>)
   1bd14:	f000 fa9e 	bl	1c254 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
   1bd18:	682b      	ldr	r3, [r5, #0]
   1bd1a:	2b00      	cmp	r3, #0
   1bd1c:	d0d9      	beq.n	1bcd2 <SX1276OnDio0Irq+0x1a>
   1bd1e:	691b      	ldr	r3, [r3, #16]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
   1bd20:	2b00      	cmp	r3, #0
   1bd22:	d0d6      	beq.n	1bcd2 <SX1276OnDio0Irq+0x1a>
}
   1bd24:	b002      	add	sp, #8
   1bd26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    RadioEvents->TxDone( );
   1bd2a:	4718      	bx	r3
                if( SX1276.Settings.Fsk.CrcOn == true )
   1bd2c:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
   1bd30:	4d74      	ldr	r5, [pc, #464]	; (1bf04 <SX1276OnDio0Irq+0x24c>)
   1bd32:	b3ab      	cbz	r3, 1bda0 <SX1276OnDio0Irq+0xe8>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
   1bd34:	203f      	movs	r0, #63	; 0x3f
   1bd36:	f007 f8e1 	bl	22efc <SX1276Read>
   1bd3a:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
   1bd3e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1bd42:	079b      	lsls	r3, r3, #30
   1bd44:	d42c      	bmi.n	1bda0 <SX1276OnDio0Irq+0xe8>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
   1bd46:	210b      	movs	r1, #11
   1bd48:	203e      	movs	r0, #62	; 0x3e
   1bd4a:	f007 f8cc 	bl	22ee6 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
   1bd4e:	2110      	movs	r1, #16
   1bd50:	203f      	movs	r0, #63	; 0x3f
   1bd52:	f007 f8c8 	bl	22ee6 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
   1bd56:	486c      	ldr	r0, [pc, #432]	; (1bf08 <SX1276OnDio0Irq+0x250>)
   1bd58:	f000 fa7c 	bl	1c254 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
   1bd5c:	f896 6102 	ldrb.w	r6, [r6, #258]	; 0x102
   1bd60:	b98e      	cbnz	r6, 1bd86 <SX1276OnDio0Irq+0xce>
                            TimerStop( &RxTimeoutSyncWord );
   1bd62:	486a      	ldr	r0, [pc, #424]	; (1bf0c <SX1276OnDio0Irq+0x254>)
   1bd64:	f000 fa76 	bl	1c254 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
   1bd68:	f884 60e0 	strb.w	r6, [r4, #224]	; 0xe0
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
   1bd6c:	682b      	ldr	r3, [r5, #0]
   1bd6e:	b113      	cbz	r3, 1bd76 <SX1276OnDio0Irq+0xbe>
   1bd70:	691b      	ldr	r3, [r3, #16]
   1bd72:	b103      	cbz	r3, 1bd76 <SX1276OnDio0Irq+0xbe>
                            RadioEvents->RxError( );
   1bd74:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
   1bd76:	2300      	movs	r3, #0
   1bd78:	f8a4 310c 	strh.w	r3, [r4, #268]	; 0x10c
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
   1bd7c:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
                        SX1276.Settings.FskPacketHandler.Size = 0;
   1bd80:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
                        break;
   1bd84:	e7a5      	b.n	1bcd2 <SX1276OnDio0Irq+0x1a>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
   1bd86:	200d      	movs	r0, #13
   1bd88:	f007 f8b8 	bl	22efc <SX1276Read>
   1bd8c:	f040 0140 	orr.w	r1, r0, #64	; 0x40
   1bd90:	b2c9      	uxtb	r1, r1
   1bd92:	200d      	movs	r0, #13
   1bd94:	f007 f8a7 	bl	22ee6 <SX1276Write>
                            TimerStart( &RxTimeoutSyncWord );
   1bd98:	485c      	ldr	r0, [pc, #368]	; (1bf0c <SX1276OnDio0Irq+0x254>)
   1bd9a:	f000 f9e5 	bl	1c168 <TimerStart>
   1bd9e:	e7e5      	b.n	1bd6c <SX1276OnDio0Irq+0xb4>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
   1bda0:	f8b4 1116 	ldrh.w	r1, [r4, #278]	; 0x116
   1bda4:	f8b4 0118 	ldrh.w	r0, [r4, #280]	; 0x118
   1bda8:	4e59      	ldr	r6, [pc, #356]	; (1bf10 <SX1276OnDio0Irq+0x258>)
   1bdaa:	ea51 0300 	orrs.w	r3, r1, r0
   1bdae:	d10a      	bne.n	1bdc6 <SX1276OnDio0Irq+0x10e>
                    if( SX1276.Settings.Fsk.FixLen == false )
   1bdb0:	f894 30fe 	ldrb.w	r3, [r4, #254]	; 0xfe
   1bdb4:	bb4b      	cbnz	r3, 1be0a <SX1276OnDio0Irq+0x152>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
   1bdb6:	4857      	ldr	r0, [pc, #348]	; (1bf14 <SX1276OnDio0Irq+0x25c>)
   1bdb8:	2101      	movs	r1, #1
   1bdba:	f007 f90f 	bl	22fdc <SX1276ReadFifo>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
   1bdbe:	f8b4 0118 	ldrh.w	r0, [r4, #280]	; 0x118
   1bdc2:	f894 1116 	ldrb.w	r1, [r4, #278]	; 0x116
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
   1bdc6:	1a09      	subs	r1, r1, r0
   1bdc8:	b2c9      	uxtb	r1, r1
   1bdca:	4430      	add	r0, r6
   1bdcc:	f007 f906 	bl	22fdc <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
   1bdd0:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
                TimerStop( &RxTimeoutTimer );
   1bdd4:	484c      	ldr	r0, [pc, #304]	; (1bf08 <SX1276OnDio0Irq+0x250>)
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
   1bdd6:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
                TimerStop( &RxTimeoutTimer );
   1bdda:	f000 fa3b 	bl	1c254 <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
   1bdde:	f894 3102 	ldrb.w	r3, [r4, #258]	; 0x102
   1bde2:	b9c3      	cbnz	r3, 1be16 <SX1276OnDio0Irq+0x15e>
                    TimerStop( &RxTimeoutSyncWord );
   1bde4:	4849      	ldr	r0, [pc, #292]	; (1bf0c <SX1276OnDio0Irq+0x254>)
                    SX1276.Settings.State = RF_IDLE;
   1bde6:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                    TimerStop( &RxTimeoutSyncWord );
   1bdea:	f000 fa33 	bl	1c254 <TimerStop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
   1bdee:	682b      	ldr	r3, [r5, #0]
   1bdf0:	2b00      	cmp	r3, #0
   1bdf2:	d0c0      	beq.n	1bd76 <SX1276OnDio0Irq+0xbe>
   1bdf4:	689d      	ldr	r5, [r3, #8]
   1bdf6:	2d00      	cmp	r5, #0
   1bdf8:	d0bd      	beq.n	1bd76 <SX1276OnDio0Irq+0xbe>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
   1bdfa:	f994 210e 	ldrsb.w	r2, [r4, #270]	; 0x10e
   1bdfe:	f8b4 1116 	ldrh.w	r1, [r4, #278]	; 0x116
   1be02:	4843      	ldr	r0, [pc, #268]	; (1bf10 <SX1276OnDio0Irq+0x258>)
   1be04:	2300      	movs	r3, #0
   1be06:	47a8      	blx	r5
   1be08:	e7b5      	b.n	1bd76 <SX1276OnDio0Irq+0xbe>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
   1be0a:	2032      	movs	r0, #50	; 0x32
   1be0c:	f007 f876 	bl	22efc <SX1276Read>
   1be10:	f8a4 0116 	strh.w	r0, [r4, #278]	; 0x116
   1be14:	e7d3      	b.n	1bdbe <SX1276OnDio0Irq+0x106>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
   1be16:	200d      	movs	r0, #13
   1be18:	f007 f870 	bl	22efc <SX1276Read>
   1be1c:	f040 0140 	orr.w	r1, r0, #64	; 0x40
   1be20:	b2c9      	uxtb	r1, r1
   1be22:	200d      	movs	r0, #13
   1be24:	f007 f85f 	bl	22ee6 <SX1276Write>
                    TimerStart( &RxTimeoutSyncWord );
   1be28:	4838      	ldr	r0, [pc, #224]	; (1bf0c <SX1276OnDio0Irq+0x254>)
   1be2a:	f000 f99d 	bl	1c168 <TimerStart>
   1be2e:	e7de      	b.n	1bdee <SX1276OnDio0Irq+0x136>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
   1be30:	2019      	movs	r0, #25
   1be32:	f007 f863 	bl	22efc <SX1276Read>
   1be36:	b240      	sxtb	r0, r0
   1be38:	3002      	adds	r0, #2
   1be3a:	1080      	asrs	r0, r0, #2
   1be3c:	f886 013c 	strb.w	r0, [r6, #316]	; 0x13c
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
   1be40:	201a      	movs	r0, #26
   1be42:	f007 f85b 	bl	22efc <SX1276Read>
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
   1be46:	f996 213c 	ldrsb.w	r2, [r6, #316]	; 0x13c
   1be4a:	4933      	ldr	r1, [pc, #204]	; (1bf18 <SX1276OnDio0Irq+0x260>)
   1be4c:	2a00      	cmp	r2, #0
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
   1be4e:	b203      	sxth	r3, r0
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
   1be50:	f340 100b 	sbfx	r0, r0, #4, #12
   1be54:	da37      	bge.n	1bec6 <SX1276OnDio0Irq+0x20e>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
   1be56:	f8d6 60e4 	ldr.w	r6, [r6, #228]	; 0xe4
   1be5a:	b212      	sxth	r2, r2
   1be5c:	428e      	cmp	r6, r1
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
   1be5e:	bf8c      	ite	hi
   1be60:	3a9d      	subhi	r2, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
   1be62:	3aa4      	subls	r2, #164	; 0xa4
   1be64:	4413      	add	r3, r2
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
   1be66:	4403      	add	r3, r0
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
   1be68:	2013      	movs	r0, #19
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
   1be6a:	f8a4 313e 	strh.w	r3, [r4, #318]	; 0x13e
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
   1be6e:	f007 f845 	bl	22efc <SX1276Read>
   1be72:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
   1be76:	2010      	movs	r0, #16
   1be78:	f007 f840 	bl	22efc <SX1276Read>
   1be7c:	4601      	mov	r1, r0
   1be7e:	200d      	movs	r0, #13
   1be80:	f007 f831 	bl	22ee6 <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
   1be84:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
   1be88:	4821      	ldr	r0, [pc, #132]	; (1bf10 <SX1276OnDio0Irq+0x258>)
   1be8a:	f007 f8a7 	bl	22fdc <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
   1be8e:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
   1be92:	b90b      	cbnz	r3, 1be98 <SX1276OnDio0Irq+0x1e0>
                        SX1276.Settings.State = RF_IDLE;
   1be94:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                    TimerStop( &RxTimeoutTimer );
   1be98:	481b      	ldr	r0, [pc, #108]	; (1bf08 <SX1276OnDio0Irq+0x250>)
   1be9a:	f000 f9db 	bl	1c254 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
   1be9e:	682b      	ldr	r3, [r5, #0]
   1bea0:	2b00      	cmp	r3, #0
   1bea2:	f43f af16 	beq.w	1bcd2 <SX1276OnDio0Irq+0x1a>
   1bea6:	689d      	ldr	r5, [r3, #8]
   1bea8:	2d00      	cmp	r5, #0
   1beaa:	f43f af12 	beq.w	1bcd2 <SX1276OnDio0Irq+0x1a>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
   1beae:	f994 313c 	ldrsb.w	r3, [r4, #316]	; 0x13c
   1beb2:	f9b4 213e 	ldrsh.w	r2, [r4, #318]	; 0x13e
   1beb6:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
   1beba:	4815      	ldr	r0, [pc, #84]	; (1bf10 <SX1276OnDio0Irq+0x258>)
   1bebc:	46ac      	mov	ip, r5
}
   1bebe:	b002      	add	sp, #8
   1bec0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
   1bec4:	4760      	bx	ip
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
   1bec6:	f8d6 20e4 	ldr.w	r2, [r6, #228]	; 0xe4
   1beca:	428a      	cmp	r2, r1
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
   1becc:	bf8c      	ite	hi
   1bece:	3b9d      	subhi	r3, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
   1bed0:	3ba4      	subls	r3, #164	; 0xa4
   1bed2:	e7c8      	b.n	1be66 <SX1276OnDio0Irq+0x1ae>
            TimerStop( &TxTimeoutTimer );
   1bed4:	4811      	ldr	r0, [pc, #68]	; (1bf1c <SX1276OnDio0Irq+0x264>)
   1bed6:	f000 f9bd 	bl	1c254 <TimerStop>
            switch( SX1276.Settings.Modem )
   1beda:	f896 30e1 	ldrb.w	r3, [r6, #225]	; 0xe1
   1bede:	2b01      	cmp	r3, #1
   1bee0:	d103      	bne.n	1beea <SX1276OnDio0Irq+0x232>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
   1bee2:	2108      	movs	r1, #8
   1bee4:	2012      	movs	r0, #18
   1bee6:	f006 fffe 	bl	22ee6 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
   1beea:	2300      	movs	r3, #0
   1beec:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
   1bef0:	4b04      	ldr	r3, [pc, #16]	; (1bf04 <SX1276OnDio0Irq+0x24c>)
   1bef2:	681b      	ldr	r3, [r3, #0]
   1bef4:	2b00      	cmp	r3, #0
   1bef6:	f43f aeec 	beq.w	1bcd2 <SX1276OnDio0Irq+0x1a>
   1befa:	681b      	ldr	r3, [r3, #0]
   1befc:	e710      	b.n	1bd20 <SX1276OnDio0Irq+0x68>
   1befe:	bf00      	nop
   1bf00:	20002bbc 	.word	0x20002bbc
   1bf04:	20002b88 	.word	0x20002b88
   1bf08:	20002ba4 	.word	0x20002ba4
   1bf0c:	20002b8c 	.word	0x20002b8c
   1bf10:	200035df 	.word	0x200035df
   1bf14:	20002cd2 	.word	0x20002cd2
   1bf18:	1f4add40 	.word	0x1f4add40
   1bf1c:	20002d00 	.word	0x20002d00

0001bf20 <SX1276OnDio1Irq>:
{
   1bf20:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
   1bf22:	4c3b      	ldr	r4, [pc, #236]	; (1c010 <SX1276OnDio1Irq+0xf0>)
   1bf24:	f894 60e0 	ldrb.w	r6, [r4, #224]	; 0xe0
   1bf28:	2e01      	cmp	r6, #1
   1bf2a:	4625      	mov	r5, r4
   1bf2c:	d002      	beq.n	1bf34 <SX1276OnDio1Irq+0x14>
   1bf2e:	2e02      	cmp	r6, #2
   1bf30:	d04e      	beq.n	1bfd0 <SX1276OnDio1Irq+0xb0>
}
   1bf32:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
   1bf34:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   1bf38:	b1ab      	cbz	r3, 1bf66 <SX1276OnDio1Irq+0x46>
   1bf3a:	2b01      	cmp	r3, #1
   1bf3c:	d1f9      	bne.n	1bf32 <SX1276OnDio1Irq+0x12>
                TimerStop( &RxTimeoutTimer );
   1bf3e:	4835      	ldr	r0, [pc, #212]	; (1c014 <SX1276OnDio1Irq+0xf4>)
   1bf40:	f000 f988 	bl	1c254 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
   1bf44:	2180      	movs	r1, #128	; 0x80
   1bf46:	2012      	movs	r0, #18
   1bf48:	f006 ffcd 	bl	22ee6 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
   1bf4c:	2300      	movs	r3, #0
   1bf4e:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
   1bf52:	4b31      	ldr	r3, [pc, #196]	; (1c018 <SX1276OnDio1Irq+0xf8>)
   1bf54:	681b      	ldr	r3, [r3, #0]
   1bf56:	2b00      	cmp	r3, #0
   1bf58:	d0eb      	beq.n	1bf32 <SX1276OnDio1Irq+0x12>
   1bf5a:	68db      	ldr	r3, [r3, #12]
   1bf5c:	2b00      	cmp	r3, #0
   1bf5e:	d0e8      	beq.n	1bf32 <SX1276OnDio1Irq+0x12>
}
   1bf60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    RadioEvents->RxTimeout( );
   1bf64:	4718      	bx	r3
                TimerStop( &RxTimeoutSyncWord );
   1bf66:	482d      	ldr	r0, [pc, #180]	; (1c01c <SX1276OnDio1Irq+0xfc>)
   1bf68:	f000 f974 	bl	1c254 <TimerStop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
   1bf6c:	f8b4 2116 	ldrh.w	r2, [r4, #278]	; 0x116
   1bf70:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118
   1bf74:	4313      	orrs	r3, r2
   1bf76:	d107      	bne.n	1bf88 <SX1276OnDio1Irq+0x68>
                    if( SX1276.Settings.Fsk.FixLen == false )
   1bf78:	f894 30fe 	ldrb.w	r3, [r4, #254]	; 0xfe
   1bf7c:	b9e3      	cbnz	r3, 1bfb8 <SX1276OnDio1Irq+0x98>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
   1bf7e:	4631      	mov	r1, r6
   1bf80:	f504 708b 	add.w	r0, r4, #278	; 0x116
   1bf84:	f007 f82a 	bl	22fdc <SX1276ReadFifo>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
   1bf88:	f8b5 2118 	ldrh.w	r2, [r5, #280]	; 0x118
   1bf8c:	f8b5 1116 	ldrh.w	r1, [r5, #278]	; 0x116
   1bf90:	f895 311a 	ldrb.w	r3, [r5, #282]	; 0x11a
   1bf94:	4822      	ldr	r0, [pc, #136]	; (1c020 <SX1276OnDio1Irq+0x100>)
   1bf96:	1a89      	subs	r1, r1, r2
   1bf98:	4299      	cmp	r1, r3
   1bf9a:	4410      	add	r0, r2
   1bf9c:	db12      	blt.n	1bfc4 <SX1276OnDio1Irq+0xa4>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
   1bf9e:	1e59      	subs	r1, r3, #1
   1bfa0:	b2c9      	uxtb	r1, r1
   1bfa2:	f007 f81b 	bl	22fdc <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
   1bfa6:	f895 311a 	ldrb.w	r3, [r5, #282]	; 0x11a
   1bfaa:	f8b5 2118 	ldrh.w	r2, [r5, #280]	; 0x118
   1bfae:	4413      	add	r3, r2
   1bfb0:	3b01      	subs	r3, #1
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
   1bfb2:	f8a5 3118 	strh.w	r3, [r5, #280]	; 0x118
   1bfb6:	e7bc      	b.n	1bf32 <SX1276OnDio1Irq+0x12>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
   1bfb8:	2032      	movs	r0, #50	; 0x32
   1bfba:	f006 ff9f 	bl	22efc <SX1276Read>
   1bfbe:	f8a4 0116 	strh.w	r0, [r4, #278]	; 0x116
   1bfc2:	e7e1      	b.n	1bf88 <SX1276OnDio1Irq+0x68>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
   1bfc4:	b2c9      	uxtb	r1, r1
   1bfc6:	f007 f809 	bl	22fdc <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
   1bfca:	f8b5 3116 	ldrh.w	r3, [r5, #278]	; 0x116
   1bfce:	e7f0      	b.n	1bfb2 <SX1276OnDio1Irq+0x92>
            switch( SX1276.Settings.Modem )
   1bfd0:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   1bfd4:	2b00      	cmp	r3, #0
   1bfd6:	d1ac      	bne.n	1bf32 <SX1276OnDio1Irq+0x12>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
   1bfd8:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
   1bfdc:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
   1bfe0:	f894 111b 	ldrb.w	r1, [r4, #283]	; 0x11b
   1bfe4:	480e      	ldr	r0, [pc, #56]	; (1c020 <SX1276OnDio1Irq+0x100>)
   1bfe6:	1a9b      	subs	r3, r3, r2
   1bfe8:	428b      	cmp	r3, r1
   1bfea:	4410      	add	r0, r2
   1bfec:	dd09      	ble.n	1c002 <SX1276OnDio1Irq+0xe2>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
   1bfee:	f006 fff0 	bl	22fd2 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
   1bff2:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
   1bff6:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
   1bffa:	4413      	add	r3, r2
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
   1bffc:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
}
   1c000:	e797      	b.n	1bf32 <SX1276OnDio1Irq+0x12>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
   1c002:	b2d9      	uxtb	r1, r3
   1c004:	f006 ffe5 	bl	22fd2 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
   1c008:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
   1c00c:	e7f6      	b.n	1bffc <SX1276OnDio1Irq+0xdc>
   1c00e:	bf00      	nop
   1c010:	20002bbc 	.word	0x20002bbc
   1c014:	20002ba4 	.word	0x20002ba4
   1c018:	20002b88 	.word	0x20002b88
   1c01c:	20002b8c 	.word	0x20002b8c
   1c020:	200035df 	.word	0x200035df

0001c024 <SX1276SetMaxPayloadLength>:
{
   1c024:	b538      	push	{r3, r4, r5, lr}
   1c026:	4605      	mov	r5, r0
   1c028:	460c      	mov	r4, r1
    SX1276SetModem( modem );
   1c02a:	f7ff fce3 	bl	1b9f4 <SX1276SetModem>
    switch( modem )
   1c02e:	b115      	cbz	r5, 1c036 <SX1276SetMaxPayloadLength+0x12>
   1c030:	2d01      	cmp	r5, #1
   1c032:	d00b      	beq.n	1c04c <SX1276SetMaxPayloadLength+0x28>
}
   1c034:	bd38      	pop	{r3, r4, r5, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
   1c036:	4b07      	ldr	r3, [pc, #28]	; (1c054 <SX1276SetMaxPayloadLength+0x30>)
   1c038:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
   1c03c:	2b00      	cmp	r3, #0
   1c03e:	d1f9      	bne.n	1c034 <SX1276SetMaxPayloadLength+0x10>
            SX1276Write( REG_PAYLOADLENGTH, max );
   1c040:	4621      	mov	r1, r4
   1c042:	2032      	movs	r0, #50	; 0x32
}
   1c044:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
   1c048:	f006 bf4d 	b.w	22ee6 <SX1276Write>
   1c04c:	4621      	mov	r1, r4
   1c04e:	2023      	movs	r0, #35	; 0x23
   1c050:	e7f8      	b.n	1c044 <SX1276SetMaxPayloadLength+0x20>
   1c052:	bf00      	nop
   1c054:	20002bbc 	.word	0x20002bbc

0001c058 <SX1276SetPublicNetwork>:
{
   1c058:	b510      	push	{r4, lr}
   1c05a:	4604      	mov	r4, r0
    SX1276SetModem( MODEM_LORA );
   1c05c:	2001      	movs	r0, #1
   1c05e:	f7ff fcc9 	bl	1b9f4 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
   1c062:	4b06      	ldr	r3, [pc, #24]	; (1c07c <SX1276SetPublicNetwork+0x24>)
   1c064:	f883 4138 	strb.w	r4, [r3, #312]	; 0x138
    if( enable == true )
   1c068:	b12c      	cbz	r4, 1c076 <SX1276SetPublicNetwork+0x1e>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
   1c06a:	2134      	movs	r1, #52	; 0x34
}
   1c06c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
   1c070:	2039      	movs	r0, #57	; 0x39
   1c072:	f006 bf38 	b.w	22ee6 <SX1276Write>
   1c076:	2112      	movs	r1, #18
   1c078:	e7f8      	b.n	1c06c <SX1276SetPublicNetwork+0x14>
   1c07a:	bf00      	nop
   1c07c:	20002bbc 	.word	0x20002bbc

0001c080 <SX1276OnTimeoutIrq>:
{
   1c080:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
   1c082:	4c2f      	ldr	r4, [pc, #188]	; (1c140 <SX1276OnTimeoutIrq+0xc0>)
   1c084:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   1c088:	2b01      	cmp	r3, #1
   1c08a:	4626      	mov	r6, r4
   1c08c:	d002      	beq.n	1c094 <SX1276OnTimeoutIrq+0x14>
   1c08e:	2b02      	cmp	r3, #2
   1c090:	d030      	beq.n	1c0f4 <SX1276OnTimeoutIrq+0x74>
}
   1c092:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
   1c094:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   1c098:	b9e3      	cbnz	r3, 1c0d4 <SX1276OnTimeoutIrq+0x54>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
   1c09a:	f8a4 310c 	strh.w	r3, [r4, #268]	; 0x10c
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
   1c09e:	210b      	movs	r1, #11
   1c0a0:	203e      	movs	r0, #62	; 0x3e
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
   1c0a2:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = 0;
   1c0a6:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
   1c0aa:	f006 ff1c 	bl	22ee6 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
   1c0ae:	2110      	movs	r1, #16
   1c0b0:	203f      	movs	r0, #63	; 0x3f
   1c0b2:	f006 ff18 	bl	22ee6 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
   1c0b6:	f894 3102 	ldrb.w	r3, [r4, #258]	; 0x102
   1c0ba:	b1ab      	cbz	r3, 1c0e8 <SX1276OnTimeoutIrq+0x68>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
   1c0bc:	200d      	movs	r0, #13
   1c0be:	f006 ff1d 	bl	22efc <SX1276Read>
   1c0c2:	f040 0140 	orr.w	r1, r0, #64	; 0x40
   1c0c6:	b2c9      	uxtb	r1, r1
   1c0c8:	200d      	movs	r0, #13
   1c0ca:	f006 ff0c 	bl	22ee6 <SX1276Write>
                TimerStart( &RxTimeoutSyncWord );
   1c0ce:	481d      	ldr	r0, [pc, #116]	; (1c144 <SX1276OnTimeoutIrq+0xc4>)
   1c0d0:	f000 f84a 	bl	1c168 <TimerStart>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
   1c0d4:	4b1c      	ldr	r3, [pc, #112]	; (1c148 <SX1276OnTimeoutIrq+0xc8>)
   1c0d6:	681b      	ldr	r3, [r3, #0]
   1c0d8:	2b00      	cmp	r3, #0
   1c0da:	d0da      	beq.n	1c092 <SX1276OnTimeoutIrq+0x12>
   1c0dc:	68db      	ldr	r3, [r3, #12]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
   1c0de:	2b00      	cmp	r3, #0
   1c0e0:	d0d7      	beq.n	1c092 <SX1276OnTimeoutIrq+0x12>
}
   1c0e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            RadioEvents->TxTimeout( );
   1c0e6:	4718      	bx	r3
                TimerStop( &RxTimeoutSyncWord );
   1c0e8:	4816      	ldr	r0, [pc, #88]	; (1c144 <SX1276OnTimeoutIrq+0xc4>)
                SX1276.Settings.State = RF_IDLE;
   1c0ea:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                TimerStop( &RxTimeoutSyncWord );
   1c0ee:	f000 f8b1 	bl	1c254 <TimerStop>
   1c0f2:	e7ef      	b.n	1c0d4 <SX1276OnTimeoutIrq+0x54>
        SX1276Reset( );
   1c0f4:	f7ff f890 	bl	1b218 <SX1276Reset>
        RxChainCalibration( );
   1c0f8:	f7e6 f8a6 	bl	2248 <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
   1c0fc:	2000      	movs	r0, #0
   1c0fe:	f006 ff08 	bl	22f12 <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
   1c102:	4c12      	ldr	r4, [pc, #72]	; (1c14c <SX1276OnTimeoutIrq+0xcc>)
        SX1276SetOpMode( RF_OPMODE_SLEEP );
   1c104:	2500      	movs	r5, #0
            SX1276SetModem( RadioRegsInit[i].Modem );
   1c106:	7820      	ldrb	r0, [r4, #0]
   1c108:	f7ff fc74 	bl	1b9f4 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
   1c10c:	3501      	adds	r5, #1
   1c10e:	78a1      	ldrb	r1, [r4, #2]
   1c110:	7860      	ldrb	r0, [r4, #1]
   1c112:	f006 fee8 	bl	22ee6 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
   1c116:	2d10      	cmp	r5, #16
   1c118:	f104 0403 	add.w	r4, r4, #3
   1c11c:	d1f3      	bne.n	1c106 <SX1276OnTimeoutIrq+0x86>
        SX1276SetModem( MODEM_FSK );
   1c11e:	2000      	movs	r0, #0
   1c120:	f7ff fc68 	bl	1b9f4 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
   1c124:	f896 0138 	ldrb.w	r0, [r6, #312]	; 0x138
   1c128:	f7ff ff96 	bl	1c058 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
   1c12c:	2300      	movs	r3, #0
   1c12e:	f886 30e0 	strb.w	r3, [r6, #224]	; 0xe0
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
   1c132:	4b05      	ldr	r3, [pc, #20]	; (1c148 <SX1276OnTimeoutIrq+0xc8>)
   1c134:	681b      	ldr	r3, [r3, #0]
   1c136:	2b00      	cmp	r3, #0
   1c138:	d0ab      	beq.n	1c092 <SX1276OnTimeoutIrq+0x12>
   1c13a:	685b      	ldr	r3, [r3, #4]
   1c13c:	e7cf      	b.n	1c0de <SX1276OnTimeoutIrq+0x5e>
   1c13e:	bf00      	nop
   1c140:	20002bbc 	.word	0x20002bbc
   1c144:	20002b8c 	.word	0x20002b8c
   1c148:	20002b88 	.word	0x20002b88
   1c14c:	00027abf 	.word	0x00027abf

0001c150 <TimerInsertNewHeadTimer>:
    obj->Next = NULL;
}

static void TimerInsertNewHeadTimer( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
   1c150:	4b04      	ldr	r3, [pc, #16]	; (1c164 <TimerInsertNewHeadTimer+0x14>)
   1c152:	681a      	ldr	r2, [r3, #0]

    if( cur != NULL )
   1c154:	b10a      	cbz	r2, 1c15a <TimerInsertNewHeadTimer+0xa>
    {
        cur->IsNext2Expire = false;
   1c156:	2100      	movs	r1, #0
   1c158:	7251      	strb	r1, [r2, #9]
    }

    obj->Next = cur;
   1c15a:	6142      	str	r2, [r0, #20]
    TimerListHead = obj;
   1c15c:	6018      	str	r0, [r3, #0]
    TimerSetTimeout( TimerListHead );
   1c15e:	f006 bf47 	b.w	22ff0 <TimerSetTimeout>
   1c162:	bf00      	nop
   1c164:	20002d18 	.word	0x20002d18

0001c168 <TimerStart>:
{
   1c168:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1c16a:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
   1c16c:	a801      	add	r0, sp, #4
   1c16e:	f006 fe80 	bl	22e72 <BoardCriticalSectionBegin>
    if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
   1c172:	b16c      	cbz	r4, 1c190 <TimerStart+0x28>
    CRITICAL_SECTION_END( );
}

static bool TimerExists( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
   1c174:	4d17      	ldr	r5, [pc, #92]	; (1c1d4 <TimerStart+0x6c>)
   1c176:	6829      	ldr	r1, [r5, #0]
   1c178:	460a      	mov	r2, r1

    while( cur != NULL )
   1c17a:	b972      	cbnz	r2, 1c19a <TimerStart+0x32>
    obj->Timestamp = obj->ReloadValue;
   1c17c:	6863      	ldr	r3, [r4, #4]
   1c17e:	6023      	str	r3, [r4, #0]
    obj->IsStarted = true;
   1c180:	2301      	movs	r3, #1
   1c182:	8123      	strh	r3, [r4, #8]
    if( TimerListHead == NULL )
   1c184:	b969      	cbnz	r1, 1c1a2 <TimerStart+0x3a>
        RtcSetTimerContext( );
   1c186:	f7fe feb5 	bl	1aef4 <RtcSetTimerContext>
            TimerInsertNewHeadTimer( obj );
   1c18a:	4620      	mov	r0, r4
   1c18c:	f7ff ffe0 	bl	1c150 <TimerInsertNewHeadTimer>
        CRITICAL_SECTION_END( );
   1c190:	a801      	add	r0, sp, #4
   1c192:	f006 fe78 	bl	22e86 <BoardCriticalSectionEnd>
}
   1c196:	b003      	add	sp, #12
   1c198:	bd30      	pop	{r4, r5, pc}
    {
        if( cur == obj )
   1c19a:	4294      	cmp	r4, r2
   1c19c:	d0f8      	beq.n	1c190 <TimerStart+0x28>
        {
            return true;
        }
        cur = cur->Next;
   1c19e:	6952      	ldr	r2, [r2, #20]
   1c1a0:	e7eb      	b.n	1c17a <TimerStart+0x12>
        elapsedTime = RtcGetTimerElapsedTime( );
   1c1a2:	f7fe fe7b 	bl	1ae9c <RtcGetTimerElapsedTime>
        obj->Timestamp += elapsedTime;
   1c1a6:	6823      	ldr	r3, [r4, #0]
   1c1a8:	4418      	add	r0, r3
        if( obj->Timestamp < TimerListHead->Timestamp )
   1c1aa:	682b      	ldr	r3, [r5, #0]
        obj->Timestamp += elapsedTime;
   1c1ac:	6020      	str	r0, [r4, #0]
        if( obj->Timestamp < TimerListHead->Timestamp )
   1c1ae:	681a      	ldr	r2, [r3, #0]
   1c1b0:	4290      	cmp	r0, r2
   1c1b2:	d3ea      	bcc.n	1c18a <TimerStart+0x22>
    TimerEvent_t* next = TimerListHead->Next;
   1c1b4:	695a      	ldr	r2, [r3, #20]
    while( cur->Next != NULL )
   1c1b6:	6959      	ldr	r1, [r3, #20]
   1c1b8:	b911      	cbnz	r1, 1c1c0 <TimerStart+0x58>
    cur->Next = obj;
   1c1ba:	615c      	str	r4, [r3, #20]
    obj->Next = NULL;
   1c1bc:	6161      	str	r1, [r4, #20]
   1c1be:	e7e7      	b.n	1c190 <TimerStart+0x28>
        if( obj->Timestamp > next->Timestamp )
   1c1c0:	6811      	ldr	r1, [r2, #0]
   1c1c2:	4288      	cmp	r0, r1
   1c1c4:	d902      	bls.n	1c1cc <TimerStart+0x64>
            next = next->Next;
   1c1c6:	4613      	mov	r3, r2
   1c1c8:	6952      	ldr	r2, [r2, #20]
   1c1ca:	e7f4      	b.n	1c1b6 <TimerStart+0x4e>
            cur->Next = obj;
   1c1cc:	615c      	str	r4, [r3, #20]
            obj->Next = next;
   1c1ce:	6162      	str	r2, [r4, #20]
            return;
   1c1d0:	e7de      	b.n	1c190 <TimerStart+0x28>
   1c1d2:	bf00      	nop
   1c1d4:	20002d18 	.word	0x20002d18

0001c1d8 <TimerIrqHandler>:
{
   1c1d8:	b570      	push	{r4, r5, r6, lr}
    uint32_t old =  RtcGetTimerContext( );
   1c1da:	f7fe fe93 	bl	1af04 <RtcGetTimerContext>
    if( TimerListHead != NULL )
   1c1de:	4c1c      	ldr	r4, [pc, #112]	; (1c250 <TimerIrqHandler+0x78>)
    uint32_t old =  RtcGetTimerContext( );
   1c1e0:	4605      	mov	r5, r0
    uint32_t now =  RtcSetTimerContext( );
   1c1e2:	f7fe fe87 	bl	1aef4 <RtcSetTimerContext>
    if( TimerListHead != NULL )
   1c1e6:	6822      	ldr	r2, [r4, #0]
   1c1e8:	b9aa      	cbnz	r2, 1c216 <TimerIrqHandler+0x3e>
        cur->IsStarted = false;
   1c1ea:	2600      	movs	r6, #0
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
   1c1ec:	6823      	ldr	r3, [r4, #0]
   1c1ee:	b9db      	cbnz	r3, 1c228 <TimerIrqHandler+0x50>
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
   1c1f0:	6820      	ldr	r0, [r4, #0]
   1c1f2:	bb30      	cbnz	r0, 1c242 <TimerIrqHandler+0x6a>
}
   1c1f4:	bd70      	pop	{r4, r5, r6, pc}
            if( next->Timestamp > deltaContext )
   1c1f6:	680b      	ldr	r3, [r1, #0]
   1c1f8:	42b3      	cmp	r3, r6
                next->Timestamp -= deltaContext;
   1c1fa:	bf86      	itte	hi
   1c1fc:	195b      	addhi	r3, r3, r5
   1c1fe:	1a1b      	subhi	r3, r3, r0
                next->Timestamp = 0;
   1c200:	2300      	movls	r3, #0
   1c202:	600b      	str	r3, [r1, #0]
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
   1c204:	6949      	ldr	r1, [r1, #20]
   1c206:	2900      	cmp	r1, #0
   1c208:	d1f5      	bne.n	1c1f6 <TimerIrqHandler+0x1e>
        TimerListHead = TimerListHead->Next;
   1c20a:	6953      	ldr	r3, [r2, #20]
   1c20c:	6023      	str	r3, [r4, #0]
        ExecuteCallBack( cur->Callback, cur->Context );
   1c20e:	68d3      	ldr	r3, [r2, #12]
        cur->IsStarted = false;
   1c210:	7211      	strb	r1, [r2, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
   1c212:	b91b      	cbnz	r3, 1c21c <TimerIrqHandler+0x44>
   1c214:	e7fe      	b.n	1c214 <TimerIrqHandler+0x3c>
   1c216:	4611      	mov	r1, r2
    uint32_t deltaContext = now - old; // intentional wrap around
   1c218:	1b46      	subs	r6, r0, r5
   1c21a:	e7f3      	b.n	1c204 <TimerIrqHandler+0x2c>
        ExecuteCallBack( cur->Callback, cur->Context );
   1c21c:	6910      	ldr	r0, [r2, #16]
   1c21e:	4798      	blx	r3
   1c220:	e7e3      	b.n	1c1ea <TimerIrqHandler+0x12>
        ExecuteCallBack( cur->Callback, cur->Context );
   1c222:	6918      	ldr	r0, [r3, #16]
   1c224:	4790      	blx	r2
   1c226:	e7e1      	b.n	1c1ec <TimerIrqHandler+0x14>
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
   1c228:	681d      	ldr	r5, [r3, #0]
   1c22a:	f7fe fe37 	bl	1ae9c <RtcGetTimerElapsedTime>
   1c22e:	4285      	cmp	r5, r0
   1c230:	d2de      	bcs.n	1c1f0 <TimerIrqHandler+0x18>
        cur = TimerListHead;
   1c232:	6823      	ldr	r3, [r4, #0]
        TimerListHead = TimerListHead->Next;
   1c234:	695a      	ldr	r2, [r3, #20]
   1c236:	6022      	str	r2, [r4, #0]
        ExecuteCallBack( cur->Callback, cur->Context );
   1c238:	68da      	ldr	r2, [r3, #12]
        cur->IsStarted = false;
   1c23a:	721e      	strb	r6, [r3, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
   1c23c:	2a00      	cmp	r2, #0
   1c23e:	d1f0      	bne.n	1c222 <TimerIrqHandler+0x4a>
   1c240:	e7fe      	b.n	1c240 <TimerIrqHandler+0x68>
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
   1c242:	7a43      	ldrb	r3, [r0, #9]
   1c244:	2b00      	cmp	r3, #0
   1c246:	d1d5      	bne.n	1c1f4 <TimerIrqHandler+0x1c>
}
   1c248:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        TimerSetTimeout( TimerListHead );
   1c24c:	f006 bed0 	b.w	22ff0 <TimerSetTimeout>
   1c250:	20002d18 	.word	0x20002d18

0001c254 <TimerStop>:
{
   1c254:	b537      	push	{r0, r1, r2, r4, r5, lr}
    TimerEvent_t* prev = TimerListHead;
   1c256:	4d14      	ldr	r5, [pc, #80]	; (1c2a8 <TimerStop+0x54>)
{
   1c258:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
   1c25a:	a801      	add	r0, sp, #4
   1c25c:	f006 fe09 	bl	22e72 <BoardCriticalSectionBegin>
    TimerEvent_t* prev = TimerListHead;
   1c260:	682b      	ldr	r3, [r5, #0]
    if( ( TimerListHead == NULL ) || ( obj == NULL ) )
   1c262:	b103      	cbz	r3, 1c266 <TimerStop+0x12>
   1c264:	b924      	cbnz	r4, 1c270 <TimerStop+0x1c>
        CRITICAL_SECTION_END( );
   1c266:	a801      	add	r0, sp, #4
   1c268:	f006 fe0d 	bl	22e86 <BoardCriticalSectionEnd>
}
   1c26c:	b003      	add	sp, #12
   1c26e:	bd30      	pop	{r4, r5, pc}
    obj->IsStarted = false;
   1c270:	2200      	movs	r2, #0
    if( TimerListHead == obj ) // Stop the Head
   1c272:	42a3      	cmp	r3, r4
    obj->IsStarted = false;
   1c274:	7222      	strb	r2, [r4, #8]
    if( TimerListHead == obj ) // Stop the Head
   1c276:	d10d      	bne.n	1c294 <TimerStop+0x40>
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
   1c278:	7a59      	ldrb	r1, [r3, #9]
   1c27a:	695c      	ldr	r4, [r3, #20]
   1c27c:	b141      	cbz	r1, 1c290 <TimerStop+0x3c>
            TimerListHead->IsNext2Expire = false;
   1c27e:	725a      	strb	r2, [r3, #9]
            if( TimerListHead->Next != NULL )
   1c280:	b124      	cbz	r4, 1c28c <TimerStop+0x38>
                TimerSetTimeout( TimerListHead );
   1c282:	4620      	mov	r0, r4
                TimerListHead = TimerListHead->Next;
   1c284:	602c      	str	r4, [r5, #0]
                TimerSetTimeout( TimerListHead );
   1c286:	f006 feb3 	bl	22ff0 <TimerSetTimeout>
   1c28a:	e7ec      	b.n	1c266 <TimerStop+0x12>
                RtcStopAlarm( );
   1c28c:	f7fe fe10 	bl	1aeb0 <RtcStopAlarm>
                TimerListHead = NULL;
   1c290:	602c      	str	r4, [r5, #0]
   1c292:	e7e8      	b.n	1c266 <TimerStop+0x12>
                cur = cur->Next;
   1c294:	461a      	mov	r2, r3
   1c296:	695b      	ldr	r3, [r3, #20]
        while( cur != NULL )
   1c298:	2b00      	cmp	r3, #0
   1c29a:	d0e4      	beq.n	1c266 <TimerStop+0x12>
            if( cur == obj )
   1c29c:	429c      	cmp	r4, r3
   1c29e:	d1f9      	bne.n	1c294 <TimerStop+0x40>
                if( cur->Next != NULL )
   1c2a0:	6963      	ldr	r3, [r4, #20]
                    prev->Next = cur;
   1c2a2:	6153      	str	r3, [r2, #20]
   1c2a4:	e7df      	b.n	1c266 <TimerStop+0x12>
   1c2a6:	bf00      	nop
   1c2a8:	20002d18 	.word	0x20002d18

0001c2ac <uart_nrfx_poll_in>:
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type const * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c2ac:	4b06      	ldr	r3, [pc, #24]	; (1c2c8 <uart_nrfx_poll_in+0x1c>)
   1c2ae:	681a      	ldr	r2, [r3, #0]
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrfx_poll_in(const struct device *dev, unsigned char *c)
{
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
   1c2b0:	b13a      	cbz	r2, 1c2c2 <uart_nrfx_poll_in+0x16>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c2b2:	2000      	movs	r0, #0
   1c2b4:	6018      	str	r0, [r3, #0]
   1c2b6:	681b      	ldr	r3, [r3, #0]
    nrf_uart_hwfc_pins_set(p_reg, NRF_UART_PSEL_DISCONNECTED, NRF_UART_PSEL_DISCONNECTED);
}

NRF_STATIC_INLINE uint8_t nrf_uart_rxd_get(NRF_UART_Type const * p_reg)
{
    return p_reg->RXD;
   1c2b8:	4b04      	ldr	r3, [pc, #16]	; (1c2cc <uart_nrfx_poll_in+0x20>)
   1c2ba:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   1c2be:	700b      	strb	r3, [r1, #0]
	nrf_uart_event_clear(uart0_addr, NRF_UART_EVENT_RXDRDY);

	/* got a character */
	*c = nrf_uart_rxd_get(uart0_addr);

	return 0;
   1c2c0:	4770      	bx	lr
		return -1;
   1c2c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1c2c6:	4770      	bx	lr
   1c2c8:	40002108 	.word	0x40002108
   1c2cc:	40002000 	.word	0x40002000

0001c2d0 <uart_nrfx_err_check>:
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1c2d0:	4b02      	ldr	r3, [pc, #8]	; (1c2dc <uart_nrfx_err_check+0xc>)
   1c2d2:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1c2d6:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
/** Console I/O function */
static int uart_nrfx_err_check(const struct device *dev)
{
	/* register bitfields maps to the defines in uart.h */
	return nrf_uart_errorsrc_get_and_clear(uart0_addr);
}
   1c2da:	4770      	bx	lr
   1c2dc:	40002000 	.word	0x40002000

0001c2e0 <uart_nrfx_configure>:

static int uart_nrfx_configure(const struct device *dev,
			       const struct uart_config *cfg)
{
   1c2e0:	b530      	push	{r4, r5, lr}
	nrf_uart_config_t uart_cfg;

#if defined(UART_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   1c2e2:	794b      	ldrb	r3, [r1, #5]
   1c2e4:	2b01      	cmp	r3, #1
   1c2e6:	d022      	beq.n	1c32e <uart_nrfx_configure+0x4e>
   1c2e8:	2b03      	cmp	r3, #3
   1c2ea:	d11d      	bne.n	1c328 <uart_nrfx_configure+0x48>
	case UART_CFG_STOP_BITS_1:
		uart_cfg.stop = NRF_UART_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uart_cfg.stop = NRF_UART_STOP_TWO;
   1c2ec:	2210      	movs	r2, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1c2ee:	798b      	ldrb	r3, [r1, #6]
   1c2f0:	2b03      	cmp	r3, #3
   1c2f2:	d119      	bne.n	1c328 <uart_nrfx_configure+0x48>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1c2f4:	79cb      	ldrb	r3, [r1, #7]
   1c2f6:	b9bb      	cbnz	r3, 1c328 <uart_nrfx_configure+0x48>
	}

#if defined(UART_CONFIG_PARITYTYPE_Msk)
	uart_cfg.paritytype = NRF_UART_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1c2f8:	790c      	ldrb	r4, [r1, #4]
   1c2fa:	b114      	cbz	r4, 1c302 <uart_nrfx_configure+0x22>
   1c2fc:	2c02      	cmp	r4, #2
   1c2fe:	d113      	bne.n	1c328 <uart_nrfx_configure+0x48>
	case UART_CFG_PARITY_NONE:
		uart_cfg.parity = NRF_UART_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uart_cfg.parity = NRF_UART_PARITY_INCLUDED;
   1c300:	240e      	movs	r4, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1c302:	680b      	ldr	r3, [r1, #0]
	switch (baudrate) {
   1c304:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   1c308:	d061      	beq.n	1c3ce <uart_nrfx_configure+0xee>
   1c30a:	d82d      	bhi.n	1c368 <uart_nrfx_configure+0x88>
   1c30c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1c310:	d05f      	beq.n	1c3d2 <uart_nrfx_configure+0xf2>
   1c312:	d816      	bhi.n	1c342 <uart_nrfx_configure+0x62>
   1c314:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1c318:	d05d      	beq.n	1c3d6 <uart_nrfx_configure+0xf6>
   1c31a:	d80a      	bhi.n	1c332 <uart_nrfx_configure+0x52>
   1c31c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1c320:	d05c      	beq.n	1c3dc <uart_nrfx_configure+0xfc>
   1c322:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1c326:	d05c      	beq.n	1c3e2 <uart_nrfx_configure+0x102>
   1c328:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1c32c:	e04e      	b.n	1c3cc <uart_nrfx_configure+0xec>
	switch (cfg->stop_bits) {
   1c32e:	2200      	movs	r2, #0
   1c330:	e7dd      	b.n	1c2ee <uart_nrfx_configure+0xe>
	switch (baudrate) {
   1c332:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1c336:	d057      	beq.n	1c3e8 <uart_nrfx_configure+0x108>
   1c338:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1c33c:	d1f4      	bne.n	1c328 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
   1c33e:	4b34      	ldr	r3, [pc, #208]	; (1c410 <uart_nrfx_configure+0x130>)
   1c340:	e039      	b.n	1c3b6 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   1c342:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1c346:	d052      	beq.n	1c3ee <uart_nrfx_configure+0x10e>
   1c348:	d807      	bhi.n	1c35a <uart_nrfx_configure+0x7a>
   1c34a:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1c34e:	d050      	beq.n	1c3f2 <uart_nrfx_configure+0x112>
   1c350:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1c354:	d1e8      	bne.n	1c328 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
   1c356:	4b2f      	ldr	r3, [pc, #188]	; (1c414 <uart_nrfx_configure+0x134>)
   1c358:	e02d      	b.n	1c3b6 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   1c35a:	f647 2512 	movw	r5, #31250	; 0x7a12
   1c35e:	42ab      	cmp	r3, r5
   1c360:	d1e2      	bne.n	1c328 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
   1c362:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1c366:	e026      	b.n	1c3b6 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   1c368:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1c36c:	d044      	beq.n	1c3f8 <uart_nrfx_configure+0x118>
   1c36e:	d811      	bhi.n	1c394 <uart_nrfx_configure+0xb4>
   1c370:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1c374:	d042      	beq.n	1c3fc <uart_nrfx_configure+0x11c>
   1c376:	d808      	bhi.n	1c38a <uart_nrfx_configure+0xaa>
   1c378:	f64d 25c0 	movw	r5, #56000	; 0xdac0
   1c37c:	42ab      	cmp	r3, r5
   1c37e:	d03f      	beq.n	1c400 <uart_nrfx_configure+0x120>
   1c380:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1c384:	d1d0      	bne.n	1c328 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
   1c386:	4b24      	ldr	r3, [pc, #144]	; (1c418 <uart_nrfx_configure+0x138>)
   1c388:	e015      	b.n	1c3b6 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   1c38a:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1c38e:	d1cb      	bne.n	1c328 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
   1c390:	4b22      	ldr	r3, [pc, #136]	; (1c41c <uart_nrfx_configure+0x13c>)
   1c392:	e010      	b.n	1c3b6 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   1c394:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1c398:	d035      	beq.n	1c406 <uart_nrfx_configure+0x126>
   1c39a:	d807      	bhi.n	1c3ac <uart_nrfx_configure+0xcc>
   1c39c:	4d20      	ldr	r5, [pc, #128]	; (1c420 <uart_nrfx_configure+0x140>)
   1c39e:	42ab      	cmp	r3, r5
   1c3a0:	d033      	beq.n	1c40a <uart_nrfx_configure+0x12a>
   1c3a2:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1c3a6:	d1bf      	bne.n	1c328 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
   1c3a8:	4b1e      	ldr	r3, [pc, #120]	; (1c424 <uart_nrfx_configure+0x144>)
   1c3aa:	e004      	b.n	1c3b6 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   1c3ac:	4d1e      	ldr	r5, [pc, #120]	; (1c428 <uart_nrfx_configure+0x148>)
   1c3ae:	42ab      	cmp	r3, r5
   1c3b0:	d1ba      	bne.n	1c328 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
   1c3b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1c3b6:	4d1d      	ldr	r5, [pc, #116]	; (1c42c <uart_nrfx_configure+0x14c>)
                    | (uint32_t)p_cfg->hwfc;
   1c3b8:	4322      	orrs	r2, r4
    p_reg->BAUDRATE = baudrate;
   1c3ba:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1c3be:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uart_configure(uart0_addr, &uart_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   1c3c2:	6903      	ldr	r3, [r0, #16]
   1c3c4:	c903      	ldmia	r1, {r0, r1}
   1c3c6:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1c3ca:	2000      	movs	r0, #0
}
   1c3cc:	bd30      	pop	{r4, r5, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
   1c3ce:	4b18      	ldr	r3, [pc, #96]	; (1c430 <uart_nrfx_configure+0x150>)
   1c3d0:	e7f1      	b.n	1c3b6 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
   1c3d2:	4b18      	ldr	r3, [pc, #96]	; (1c434 <uart_nrfx_configure+0x154>)
   1c3d4:	e7ef      	b.n	1c3b6 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
   1c3d6:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1c3da:	e7ec      	b.n	1c3b6 <uart_nrfx_configure+0xd6>
		nrf_baudrate = 0x00014000;
   1c3dc:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1c3e0:	e7e9      	b.n	1c3b6 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   1c3e2:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1c3e6:	e7e6      	b.n	1c3b6 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
   1c3e8:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1c3ec:	e7e3      	b.n	1c3b6 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
   1c3ee:	4b12      	ldr	r3, [pc, #72]	; (1c438 <uart_nrfx_configure+0x158>)
   1c3f0:	e7e1      	b.n	1c3b6 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
   1c3f2:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
   1c3f6:	e7de      	b.n	1c3b6 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
   1c3f8:	4b10      	ldr	r3, [pc, #64]	; (1c43c <uart_nrfx_configure+0x15c>)
   1c3fa:	e7dc      	b.n	1c3b6 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
   1c3fc:	4b10      	ldr	r3, [pc, #64]	; (1c440 <uart_nrfx_configure+0x160>)
   1c3fe:	e7da      	b.n	1c3b6 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
   1c400:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1c404:	e7d7      	b.n	1c3b6 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
   1c406:	4b0f      	ldr	r3, [pc, #60]	; (1c444 <uart_nrfx_configure+0x164>)
   1c408:	e7d5      	b.n	1c3b6 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
   1c40a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1c40e:	e7d2      	b.n	1c3b6 <uart_nrfx_configure+0xd6>
   1c410:	0013b000 	.word	0x0013b000
   1c414:	004ea000 	.word	0x004ea000
   1c418:	00ebf000 	.word	0x00ebf000
   1c41c:	01d7e000 	.word	0x01d7e000
   1c420:	0003d090 	.word	0x0003d090
   1c424:	075f7000 	.word	0x075f7000
   1c428:	000f4240 	.word	0x000f4240
   1c42c:	40002000 	.word	0x40002000
   1c430:	009d5000 	.word	0x009d5000
   1c434:	00275000 	.word	0x00275000
   1c438:	0075f000 	.word	0x0075f000
   1c43c:	03afb000 	.word	0x03afb000
   1c440:	013a9000 	.word	0x013a9000
   1c444:	0ebed000 	.word	0x0ebed000

0001c448 <uart_nrfx_poll_out>:
{
   1c448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c44a:	460e      	mov	r6, r1
	if (!k_is_in_isr()) {
   1c44c:	f007 f919 	bl	23682 <k_is_in_isr>
   1c450:	4d19      	ldr	r5, [pc, #100]	; (1c4b8 <uart_nrfx_poll_out+0x70>)
   1c452:	bb70      	cbnz	r0, 1c4b2 <uart_nrfx_poll_out+0x6a>
   1c454:	2464      	movs	r4, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1c456:	2701      	movs	r7, #1
   1c458:	f3bf 8f5b 	dmb	ish
   1c45c:	e855 3f00 	ldrex	r3, [r5]
   1c460:	2b00      	cmp	r3, #0
   1c462:	d103      	bne.n	1c46c <uart_nrfx_poll_out+0x24>
   1c464:	e845 7200 	strex	r2, r7, [r5]
   1c468:	2a00      	cmp	r2, #0
   1c46a:	d1f7      	bne.n	1c45c <uart_nrfx_poll_out+0x14>
   1c46c:	f3bf 8f5b 	dmb	ish
		while (atomic_cas((atomic_t *) lock,
   1c470:	d007      	beq.n	1c482 <uart_nrfx_poll_out+0x3a>
   1c472:	2021      	movs	r0, #33	; 0x21
   1c474:	2100      	movs	r1, #0
   1c476:	3c01      	subs	r4, #1
   1c478:	f001 fafc 	bl	1da74 <z_impl_k_sleep>
			if (--safety_cnt == 0) {
   1c47c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   1c480:	d1ea      	bne.n	1c458 <uart_nrfx_poll_out+0x10>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c482:	4c0e      	ldr	r4, [pc, #56]	; (1c4bc <uart_nrfx_poll_out+0x74>)
   1c484:	2200      	movs	r2, #0
   1c486:	6022      	str	r2, [r4, #0]
   1c488:	6822      	ldr	r2, [r4, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c48a:	4a0d      	ldr	r2, [pc, #52]	; (1c4c0 <uart_nrfx_poll_out+0x78>)
   1c48c:	2101      	movs	r1, #1
   1c48e:	6011      	str	r1, [r2, #0]
    p_reg->TXD = txd;
   1c490:	f8c2 6514 	str.w	r6, [r2, #1300]	; 0x514
   1c494:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c498:	6823      	ldr	r3, [r4, #0]
	NRFX_WAIT_FOR(event_txdrdy_check(), 1000, 1, res);
   1c49a:	b923      	cbnz	r3, 1c4a6 <uart_nrfx_poll_out+0x5e>
   1c49c:	2001      	movs	r0, #1
   1c49e:	f006 fe01 	bl	230a4 <nrfx_busy_wait>
   1c4a2:	3e01      	subs	r6, #1
   1c4a4:	d1f8      	bne.n	1c498 <uart_nrfx_poll_out+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c4a6:	4b07      	ldr	r3, [pc, #28]	; (1c4c4 <uart_nrfx_poll_out+0x7c>)
   1c4a8:	2201      	movs	r2, #1
   1c4aa:	601a      	str	r2, [r3, #0]
	*lock = 0;
   1c4ac:	2300      	movs	r3, #0
   1c4ae:	602b      	str	r3, [r5, #0]
}
   1c4b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*lock = 1;
   1c4b2:	2301      	movs	r3, #1
   1c4b4:	602b      	str	r3, [r5, #0]
   1c4b6:	e7e4      	b.n	1c482 <uart_nrfx_poll_out+0x3a>
   1c4b8:	20002d20 	.word	0x20002d20
   1c4bc:	4000211c 	.word	0x4000211c
   1c4c0:	40002008 	.word	0x40002008
   1c4c4:	4000200c 	.word	0x4000200c

0001c4c8 <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(const struct device *dev)
{
   1c4c8:	b510      	push	{r4, lr}
    p_reg->OUTSET = set_mask;
   1c4ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    p_reg->ENABLE = UART_ENABLE_ENABLE_Disabled;
   1c4ce:	4c13      	ldr	r4, [pc, #76]	; (1c51c <uart_nrfx_init+0x54>)
   1c4d0:	2200      	movs	r2, #0
   1c4d2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   1c4d6:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
   1c4da:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1c4de:	2103      	movs	r1, #3
   1c4e0:	f8c3 1764 	str.w	r1, [r3, #1892]	; 0x764
   1c4e4:	f8c3 2760 	str.w	r2, [r3, #1888]	; 0x760
    p_reg->PSEL.RXD = pselrxd;
   1c4e8:	2318      	movs	r3, #24
   1c4ea:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
    p_reg->PSEL.TXD = pseltxd;
   1c4ee:	2319      	movs	r3, #25
   1c4f0:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
    p_reg->PSEL.RTS = pselrts;
   1c4f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c4f8:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
	}

	nrf_uart_hwfc_pins_set(uart0_addr, RTS_PIN, CTS_PIN);

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   1c4fc:	6901      	ldr	r1, [r0, #16]
    p_reg->PSEL.CTS = pselcts;
   1c4fe:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   1c502:	f7ff feed 	bl	1c2e0 <uart_nrfx_configure>
	if (err) {
   1c506:	b938      	cbnz	r0, 1c518 <uart_nrfx_init+0x50>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
   1c508:	2304      	movs	r3, #4
   1c50a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c50e:	4b04      	ldr	r3, [pc, #16]	; (1c520 <uart_nrfx_init+0x58>)
   1c510:	6018      	str	r0, [r3, #0]
   1c512:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c514:	2301      	movs	r3, #1
   1c516:	6023      	str	r3, [r4, #0]
#if HW_FLOW_CONTROL_AVAILABLE
	k_timer_init(&uart0_cb.tx_timeout_timer, tx_timeout, NULL);
#endif
#endif
	return 0;
}
   1c518:	bd10      	pop	{r4, pc}
   1c51a:	bf00      	nop
   1c51c:	40002000 	.word	0x40002000
   1c520:	40002108 	.word	0x40002108

0001c524 <random_byte_get>:
	__asm__ volatile(
   1c524:	f04f 0320 	mov.w	r3, #32
   1c528:	f3ef 8211 	mrs	r2, BASEPRI
   1c52c:	f383 8811 	msr	BASEPRI, r3
   1c530:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1c534:	4b08      	ldr	r3, [pc, #32]	; (1c558 <random_byte_get+0x34>)
   1c536:	6819      	ldr	r1, [r3, #0]
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1c538:	b159      	cbz	r1, 1c552 <random_byte_get+0x2e>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1c53a:	4908      	ldr	r1, [pc, #32]	; (1c55c <random_byte_get+0x38>)
   1c53c:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1c540:	2100      	movs	r1, #0
   1c542:	6019      	str	r1, [r3, #0]
   1c544:	681b      	ldr	r3, [r3, #0]
		retval = nrf_rng_random_value_get(NRF_RNG);
   1c546:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1c548:	f382 8811 	msr	BASEPRI, r2
   1c54c:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1c550:	4770      	bx	lr
	int retval = -EAGAIN;
   1c552:	f06f 000a 	mvn.w	r0, #10
   1c556:	e7f7      	b.n	1c548 <random_byte_get+0x24>
   1c558:	4000d100 	.word	0x4000d100
   1c55c:	4000d000 	.word	0x4000d000

0001c560 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1c560:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c562:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   1c564:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   1c566:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   1c568:	f04f 0520 	mov.w	r5, #32
   1c56c:	f3ef 8011 	mrs	r0, BASEPRI
   1c570:	f385 8811 	msr	BASEPRI, r5
   1c574:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1c578:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1c57a:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   1c57e:	1ba4      	subs	r4, r4, r6
   1c580:	403c      	ands	r4, r7
	if (available < len) {
   1c582:	42a2      	cmp	r2, r4
		len = available;
   1c584:	bf88      	it	hi
   1c586:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1c588:	eb06 0c02 	add.w	ip, r6, r2
   1c58c:	ea07 0c0c 	and.w	ip, r7, ip
	first = rngp->first_alloc;
   1c590:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   1c592:	f883 c000 	strb.w	ip, [r3]
	__asm__ volatile(
   1c596:	f380 8811 	msr	BASEPRI, r0
   1c59a:	f3bf 8f6f 	isb	sy
   1c59e:	440a      	add	r2, r1
	uint8_t *dst   = buf;
   1c5a0:	4608      	mov	r0, r1
	irq_unlock(key);

	while (likely(len--)) {
   1c5a2:	4282      	cmp	r2, r0
   1c5a4:	d119      	bne.n	1c5da <rng_pool_get+0x7a>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1c5a6:	4576      	cmp	r6, lr
   1c5a8:	d10d      	bne.n	1c5c6 <rng_pool_get+0x66>
	__asm__ volatile(
   1c5aa:	f04f 0520 	mov.w	r5, #32
   1c5ae:	f3ef 8211 	mrs	r2, BASEPRI
   1c5b2:	f385 8811 	msr	BASEPRI, r5
   1c5b6:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1c5ba:	781d      	ldrb	r5, [r3, #0]
   1c5bc:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   1c5be:	f382 8811 	msr	BASEPRI, r2
   1c5c2:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1c5c6:	1a41      	subs	r1, r0, r1
	available = available - len;
	if (available <= rngp->threshold) {
   1c5c8:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   1c5ca:	b288      	uxth	r0, r1
	available = available - len;
   1c5cc:	1a21      	subs	r1, r4, r0
	if (available <= rngp->threshold) {
   1c5ce:	428b      	cmp	r3, r1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1c5d0:	bf22      	ittt	cs
   1c5d2:	4b06      	ldrcs	r3, [pc, #24]	; (1c5ec <rng_pool_get+0x8c>)
   1c5d4:	2201      	movcs	r2, #1
   1c5d6:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1c5d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1c5da:	eb03 0c05 	add.w	ip, r3, r5
		first = (first + 1) & mask;
   1c5de:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1c5e0:	f89c c005 	ldrb.w	ip, [ip, #5]
   1c5e4:	f800 cb01 	strb.w	ip, [r0], #1
		first = (first + 1) & mask;
   1c5e8:	403d      	ands	r5, r7
   1c5ea:	e7da      	b.n	1c5a2 <rng_pool_get+0x42>
   1c5ec:	4000d000 	.word	0x4000d000

0001c5f0 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1c5f0:	43db      	mvns	r3, r3
{
   1c5f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1c5f6:	f013 0501 	ands.w	r5, r3, #1
{
   1c5fa:	460e      	mov	r6, r1
   1c5fc:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1c5fe:	d004      	beq.n	1c60a <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1c600:	4821      	ldr	r0, [pc, #132]	; (1c688 <entropy_nrf5_get_entropy_isr+0x98>)
   1c602:	f7ff ffad 	bl	1c560 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1c606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1c60a:	2a00      	cmp	r2, #0
   1c60c:	d033      	beq.n	1c676 <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   1c60e:	f04f 0320 	mov.w	r3, #32
   1c612:	f3ef 8811 	mrs	r8, BASEPRI
   1c616:	f383 8811 	msr	BASEPRI, r3
   1c61a:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1c61e:	200d      	movs	r0, #13
   1c620:	f7e9 f9e4 	bl	59ec <arch_irq_is_enabled>
   1c624:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1c626:	200d      	movs	r0, #13
   1c628:	f7e9 f9cc 	bl	59c4 <arch_irq_disable>
	__asm__ volatile(
   1c62c:	f388 8811 	msr	BASEPRI, r8
   1c630:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1c634:	4a15      	ldr	r2, [pc, #84]	; (1c68c <entropy_nrf5_get_entropy_isr+0x9c>)
   1c636:	6015      	str	r5, [r2, #0]
   1c638:	6813      	ldr	r3, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1c63a:	4b15      	ldr	r3, [pc, #84]	; (1c690 <entropy_nrf5_get_entropy_isr+0xa0>)
   1c63c:	2101      	movs	r1, #1
   1c63e:	6019      	str	r1, [r3, #0]
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1c640:	4914      	ldr	r1, [pc, #80]	; (1c694 <entropy_nrf5_get_entropy_isr+0xa4>)
   1c642:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   1c646:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
   1c64a:	4625      	mov	r5, r4
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1c64c:	4691      	mov	r9, r2
   1c64e:	468a      	mov	sl, r1
   1c650:	4698      	mov	r8, r3
   1c652:	f8d9 3000 	ldr.w	r3, [r9]
			while (!nrf_rng_event_check(NRF_RNG,
   1c656:	b183      	cbz	r3, 1c67a <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   1c658:	f7ff ff64 	bl	1c524 <random_byte_get>
			if (byte < 0) {
   1c65c:	1e03      	subs	r3, r0, #0
   1c65e:	f8ca 8180 	str.w	r8, [sl, #384]	; 0x180
   1c662:	dbf6      	blt.n	1c652 <entropy_nrf5_get_entropy_isr+0x62>
   1c664:	3d01      	subs	r5, #1
   1c666:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
   1c668:	5573      	strb	r3, [r6, r5]
		} while (len);
   1c66a:	2d00      	cmp	r5, #0
   1c66c:	d1f1      	bne.n	1c652 <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   1c66e:	b117      	cbz	r7, 1c676 <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   1c670:	200d      	movs	r0, #13
   1c672:	f7e9 f997 	bl	59a4 <arch_irq_enable>
	return cnt;
   1c676:	4620      	mov	r0, r4
   1c678:	e7c5      	b.n	1c606 <entropy_nrf5_get_entropy_isr+0x16>
  __ASM volatile ("dsb 0xF":::"memory");
   1c67a:	f3bf 8f4f 	dsb	sy
				__WFE();
   1c67e:	bf20      	wfe
				__SEV();
   1c680:	bf40      	sev
				__WFE();
   1c682:	bf20      	wfe
   1c684:	e7e5      	b.n	1c652 <entropy_nrf5_get_entropy_isr+0x62>
   1c686:	bf00      	nop
   1c688:	20002d58 	.word	0x20002d58
   1c68c:	4000d100 	.word	0x4000d100
   1c690:	4000d000 	.word	0x4000d000
   1c694:	e000e100 	.word	0xe000e100

0001c698 <entropy_nrf5_get_entropy>:
{
   1c698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   1c69c:	4f13      	ldr	r7, [pc, #76]	; (1c6ec <entropy_nrf5_get_entropy+0x54>)
   1c69e:	460d      	mov	r5, r1
   1c6a0:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1c6a2:	f107 0845 	add.w	r8, r7, #69	; 0x45
   1c6a6:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   1c6aa:	b914      	cbnz	r4, 1c6b2 <entropy_nrf5_get_entropy+0x1a>
}
   1c6ac:	4620      	mov	r0, r4
   1c6ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1c6b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c6b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c6ba:	4638      	mov	r0, r7
   1c6bc:	f001 fa9c 	bl	1dbf8 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1c6c0:	4622      	mov	r2, r4
   1c6c2:	4629      	mov	r1, r5
   1c6c4:	4640      	mov	r0, r8
   1c6c6:	f7ff ff4b 	bl	1c560 <rng_pool_get>
   1c6ca:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   1c6cc:	4638      	mov	r0, r7
   1c6ce:	f001 fa6d 	bl	1dbac <z_impl_k_sem_give>
		if (bytes == 0U) {
   1c6d2:	b93e      	cbnz	r6, 1c6e4 <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   1c6d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c6d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c6dc:	4648      	mov	r0, r9
   1c6de:	f001 fa8b 	bl	1dbf8 <z_impl_k_sem_take>
			continue;
   1c6e2:	e7e2      	b.n	1c6aa <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   1c6e4:	1ba4      	subs	r4, r4, r6
   1c6e6:	b2a4      	uxth	r4, r4
		buf += bytes;
   1c6e8:	4435      	add	r5, r6
   1c6ea:	e7de      	b.n	1c6aa <entropy_nrf5_get_entropy+0x12>
   1c6ec:	20002d28 	.word	0x20002d28

0001c6f0 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   1c6f0:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1c6f2:	4c19      	ldr	r4, [pc, #100]	; (1c758 <entropy_nrf5_init+0x68>)
   1c6f4:	2201      	movs	r2, #1
   1c6f6:	4611      	mov	r1, r2
   1c6f8:	4620      	mov	r0, r4
   1c6fa:	f006 ffb2 	bl	23662 <z_impl_k_sem_init>
   1c6fe:	2201      	movs	r2, #1
   1c700:	2100      	movs	r1, #0
   1c702:	f104 0018 	add.w	r0, r4, #24
   1c706:	f006 ffac 	bl	23662 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1c70a:	f240 4307 	movw	r3, #1031	; 0x407
   1c70e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1c712:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1c716:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1c718:	230c      	movs	r3, #12
   1c71a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1c71e:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   1c720:	4b0e      	ldr	r3, [pc, #56]	; (1c75c <entropy_nrf5_init+0x6c>)
   1c722:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1c726:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1c72a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1c72e:	f042 0201 	orr.w	r2, r2, #1
   1c732:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1c736:	4a0a      	ldr	r2, [pc, #40]	; (1c760 <entropy_nrf5_init+0x70>)
    p_reg->INTENSET = mask;
   1c738:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1c73a:	6015      	str	r5, [r2, #0]
   1c73c:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENSET = mask;
   1c73e:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1c742:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1c744:	6019      	str	r1, [r3, #0]
   1c746:	200d      	movs	r0, #13
   1c748:	f7e9 f95e 	bl	5a08 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1c74c:	200d      	movs	r0, #13
   1c74e:	f7e9 f929 	bl	59a4 <arch_irq_enable>

	return 0;
}
   1c752:	4628      	mov	r0, r5
   1c754:	bd38      	pop	{r3, r4, r5, pc}
   1c756:	bf00      	nop
   1c758:	20002d28 	.word	0x20002d28
   1c75c:	4000d000 	.word	0x4000d000
   1c760:	4000d100 	.word	0x4000d100

0001c764 <isr>:
{
   1c764:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1c766:	f7ff fedd 	bl	1c524 <random_byte_get>
	if (byte < 0) {
   1c76a:	2800      	cmp	r0, #0
   1c76c:	db20      	blt.n	1c7b0 <isr+0x4c>
	uint8_t last  = rngp->last;
   1c76e:	4b17      	ldr	r3, [pc, #92]	; (1c7cc <isr+0x68>)
   1c770:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1c774:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   1c778:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1c77c:	1a51      	subs	r1, r2, r1
   1c77e:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1c782:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1c784:	d10d      	bne.n	1c7a2 <isr+0x3e>
	uint8_t last  = rngp->last;
   1c786:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1c78a:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1c78e:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1c792:	1a51      	subs	r1, r2, r1
   1c794:	ea34 0101 	bics.w	r1, r4, r1
   1c798:	d10b      	bne.n	1c7b2 <isr+0x4e>
   1c79a:	4b0d      	ldr	r3, [pc, #52]	; (1c7d0 <isr+0x6c>)
   1c79c:	2201      	movs	r2, #1
   1c79e:	601a      	str	r2, [r3, #0]
}
   1c7a0:	e00e      	b.n	1c7c0 <isr+0x5c>
	rngp->buffer[last] = byte;
   1c7a2:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1c7a4:	3201      	adds	r2, #1
   1c7a6:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1c7a8:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1c7ac:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   1c7b0:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1c7b2:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1c7b4:	3201      	adds	r2, #1
   1c7b6:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1c7b8:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1c7bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   1c7c0:	4804      	ldr	r0, [pc, #16]	; (1c7d4 <isr+0x70>)
}
   1c7c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1c7c6:	f001 b9f1 	b.w	1dbac <z_impl_k_sem_give>
   1c7ca:	bf00      	nop
   1c7cc:	20002d28 	.word	0x20002d28
   1c7d0:	4000d004 	.word	0x4000d004
   1c7d4:	20002d40 	.word	0x20002d40

0001c7d8 <nrf52_errata_136>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1c7d8:	4b06      	ldr	r3, [pc, #24]	; (1c7f4 <nrf52_errata_136+0x1c>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1c7da:	681b      	ldr	r3, [r3, #0]
   1c7dc:	2b08      	cmp	r3, #8
   1c7de:	d106      	bne.n	1c7ee <nrf52_errata_136+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1c7e0:	4b05      	ldr	r3, [pc, #20]	; (1c7f8 <nrf52_errata_136+0x20>)
   1c7e2:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
   1c7e4:	2b05      	cmp	r3, #5
   1c7e6:	d802      	bhi.n	1c7ee <nrf52_errata_136+0x16>
   1c7e8:	4a04      	ldr	r2, [pc, #16]	; (1c7fc <nrf52_errata_136+0x24>)
   1c7ea:	5cd0      	ldrb	r0, [r2, r3]
   1c7ec:	4770      	bx	lr
                    default:
                        return true;
                }
            }
        #endif
        return false;
   1c7ee:	2000      	movs	r0, #0
    #endif
}
   1c7f0:	4770      	bx	lr
   1c7f2:	bf00      	nop
   1c7f4:	10000130 	.word	0x10000130
   1c7f8:	10000134 	.word	0x10000134
   1c7fc:	00027afa 	.word	0x00027afa

0001c800 <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1c800:	4b06      	ldr	r3, [pc, #24]	; (1c81c <nrf52_errata_103+0x1c>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1c802:	681b      	ldr	r3, [r3, #0]
   1c804:	2b08      	cmp	r3, #8
   1c806:	d106      	bne.n	1c816 <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1c808:	4b05      	ldr	r3, [pc, #20]	; (1c820 <nrf52_errata_103+0x20>)
   1c80a:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
   1c80c:	2b05      	cmp	r3, #5
   1c80e:	d802      	bhi.n	1c816 <nrf52_errata_103+0x16>
   1c810:	4a04      	ldr	r2, [pc, #16]	; (1c824 <nrf52_errata_103+0x24>)
   1c812:	5cd0      	ldrb	r0, [r2, r3]
   1c814:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   1c816:	2000      	movs	r0, #0
    #endif
}
   1c818:	4770      	bx	lr
   1c81a:	bf00      	nop
   1c81c:	10000130 	.word	0x10000130
   1c820:	10000134 	.word	0x10000134
   1c824:	00027b00 	.word	0x00027b00

0001c828 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1c828:	4a02      	ldr	r2, [pc, #8]	; (1c834 <nvmc_wait+0xc>)
   1c82a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1c82e:	2b00      	cmp	r3, #0
   1c830:	d0fb      	beq.n	1c82a <nvmc_wait+0x2>
}
   1c832:	4770      	bx	lr
   1c834:	4001e000 	.word	0x4001e000

0001c838 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   1c838:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   1c83a:	f7ff ffcd 	bl	1c7d8 <nrf52_errata_136>
   1c83e:	b140      	cbz	r0, 1c852 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   1c840:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c844:	2200      	movs	r2, #0
   1c846:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1c84a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1c84e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   1c852:	f7ff ffc1 	bl	1c7d8 <nrf52_errata_136>
   1c856:	2800      	cmp	r0, #0
   1c858:	d046      	beq.n	1c8e8 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1c85a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1c85e:	4b52      	ldr	r3, [pc, #328]	; (1c9a8 <SystemInit+0x170>)
   1c860:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1c864:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1c868:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   1c86c:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1c870:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   1c874:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1c878:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   1c87c:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1c880:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   1c884:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1c888:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   1c88c:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1c890:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   1c894:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1c898:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   1c89c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1c8a0:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   1c8a4:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1c8a8:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   1c8ac:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1c8b0:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   1c8b4:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1c8b8:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   1c8bc:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1c8c0:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   1c8c4:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1c8c8:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   1c8cc:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1c8d0:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   1c8d4:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1c8d8:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   1c8dc:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1c8e0:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   1c8e4:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   1c8e8:	f7ff ff8a 	bl	1c800 <nrf52_errata_103>
   1c8ec:	b110      	cbz	r0, 1c8f4 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   1c8ee:	4b2f      	ldr	r3, [pc, #188]	; (1c9ac <SystemInit+0x174>)
   1c8f0:	4a2f      	ldr	r2, [pc, #188]	; (1c9b0 <SystemInit+0x178>)
   1c8f2:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   1c8f4:	f7ff ff84 	bl	1c800 <nrf52_errata_103>
   1c8f8:	b118      	cbz	r0, 1c902 <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   1c8fa:	4b2e      	ldr	r3, [pc, #184]	; (1c9b4 <SystemInit+0x17c>)
   1c8fc:	22fb      	movs	r2, #251	; 0xfb
   1c8fe:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   1c902:	f7ff ff7d 	bl	1c800 <nrf52_errata_103>
   1c906:	b148      	cbz	r0, 1c91c <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   1c908:	492b      	ldr	r1, [pc, #172]	; (1c9b8 <SystemInit+0x180>)
   1c90a:	4b2c      	ldr	r3, [pc, #176]	; (1c9bc <SystemInit+0x184>)
   1c90c:	680a      	ldr	r2, [r1, #0]
   1c90e:	681b      	ldr	r3, [r3, #0]
   1c910:	f022 020f 	bic.w	r2, r2, #15
   1c914:	f003 030f 	and.w	r3, r3, #15
   1c918:	4313      	orrs	r3, r2
   1c91a:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   1c91c:	f7ff ff70 	bl	1c800 <nrf52_errata_103>
   1c920:	b118      	cbz	r0, 1c92a <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   1c922:	4b27      	ldr	r3, [pc, #156]	; (1c9c0 <SystemInit+0x188>)
   1c924:	f44f 7200 	mov.w	r2, #512	; 0x200
   1c928:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   1c92a:	f7ff ff55 	bl	1c7d8 <nrf52_errata_136>
   1c92e:	b148      	cbz	r0, 1c944 <SystemInit+0x10c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1c930:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c934:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1c938:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1c93a:	bf44      	itt	mi
   1c93c:	f06f 0201 	mvnmi.w	r2, #1
   1c940:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1c944:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1c948:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1c94c:	2a00      	cmp	r2, #0
   1c94e:	db03      	blt.n	1c958 <SystemInit+0x120>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1c950:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1c954:	2b00      	cmp	r3, #0
   1c956:	da22      	bge.n	1c99e <SystemInit+0x166>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1c958:	491a      	ldr	r1, [pc, #104]	; (1c9c4 <SystemInit+0x18c>)
   1c95a:	2301      	movs	r3, #1
   1c95c:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1c960:	f7ff ff62 	bl	1c828 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1c964:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
   1c968:	2412      	movs	r4, #18
   1c96a:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   1c96e:	f7ff ff5b 	bl	1c828 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1c972:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   1c976:	f7ff ff57 	bl	1c828 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1c97a:	2300      	movs	r3, #0
   1c97c:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1c980:	f7ff ff52 	bl	1c828 <nvmc_wait>
   1c984:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1c988:	490f      	ldr	r1, [pc, #60]	; (1c9c8 <SystemInit+0x190>)
   1c98a:	4b10      	ldr	r3, [pc, #64]	; (1c9cc <SystemInit+0x194>)
   1c98c:	68ca      	ldr	r2, [r1, #12]
   1c98e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1c992:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1c994:	60cb      	str	r3, [r1, #12]
   1c996:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   1c99a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1c99c:	e7fd      	b.n	1c99a <SystemInit+0x162>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1c99e:	4b0c      	ldr	r3, [pc, #48]	; (1c9d0 <SystemInit+0x198>)
   1c9a0:	4a0c      	ldr	r2, [pc, #48]	; (1c9d4 <SystemInit+0x19c>)
   1c9a2:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   1c9a4:	bd10      	pop	{r4, pc}
   1c9a6:	bf00      	nop
   1c9a8:	4000c000 	.word	0x4000c000
   1c9ac:	4000568c 	.word	0x4000568c
   1c9b0:	00038148 	.word	0x00038148
   1c9b4:	4000f000 	.word	0x4000f000
   1c9b8:	40000ee4 	.word	0x40000ee4
   1c9bc:	10000258 	.word	0x10000258
   1c9c0:	40029640 	.word	0x40029640
   1c9c4:	4001e000 	.word	0x4001e000
   1c9c8:	e000ed00 	.word	0xe000ed00
   1c9cc:	05fa0004 	.word	0x05fa0004
   1c9d0:	2000065c 	.word	0x2000065c
   1c9d4:	03d09000 	.word	0x03d09000

0001c9d8 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   1c9d8:	4b04      	ldr	r3, [pc, #16]	; (1c9ec <nrfx_clock_init+0x14>)
   1c9da:	791a      	ldrb	r2, [r3, #4]
   1c9dc:	b922      	cbnz	r2, 1c9e8 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   1c9de:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   1c9e0:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   1c9e2:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   1c9e4:	4802      	ldr	r0, [pc, #8]	; (1c9f0 <nrfx_clock_init+0x18>)
   1c9e6:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   1c9e8:	4802      	ldr	r0, [pc, #8]	; (1c9f4 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1c9ea:	4770      	bx	lr
   1c9ec:	20002d7c 	.word	0x20002d7c
   1c9f0:	0bad0000 	.word	0x0bad0000
   1c9f4:	0bad000c 	.word	0x0bad000c

0001c9f8 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   1c9f8:	b110      	cbz	r0, 1ca00 <nrfx_clock_start+0x8>
   1c9fa:	2801      	cmp	r0, #1
   1c9fc:	d020      	beq.n	1ca40 <nrfx_clock_start+0x48>
   1c9fe:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1ca00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ca04:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1ca08:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   1ca0c:	f411 3f80 	tst.w	r1, #65536	; 0x10000
   1ca10:	4619      	mov	r1, r3
   1ca12:	d011      	beq.n	1ca38 <nrfx_clock_start+0x40>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1ca14:	f002 0203 	and.w	r2, r2, #3
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   1ca18:	2a01      	cmp	r2, #1
   1ca1a:	d10d      	bne.n	1ca38 <nrfx_clock_start+0x40>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1ca1c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ca20:	4b0c      	ldr	r3, [pc, #48]	; (1ca54 <nrfx_clock_start+0x5c>)
   1ca22:	2200      	movs	r2, #0
   1ca24:	601a      	str	r2, [r3, #0]
   1ca26:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1ca28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ca2c:	2202      	movs	r2, #2
   1ca2e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ca32:	2201      	movs	r2, #1
   1ca34:	609a      	str	r2, [r3, #8]
}
   1ca36:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
   1ca38:	2300      	movs	r3, #0
   1ca3a:	f8c1 3518 	str.w	r3, [r1, #1304]	; 0x518
}
   1ca3e:	e7ef      	b.n	1ca20 <nrfx_clock_start+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ca40:	4b05      	ldr	r3, [pc, #20]	; (1ca58 <nrfx_clock_start+0x60>)
   1ca42:	2200      	movs	r2, #0
   1ca44:	601a      	str	r2, [r3, #0]
   1ca46:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1ca48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ca4c:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ca50:	6018      	str	r0, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   1ca52:	4770      	bx	lr
   1ca54:	40000104 	.word	0x40000104
   1ca58:	40000100 	.word	0x40000100

0001ca5c <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   1ca5c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   1ca5e:	b110      	cbz	r0, 1ca66 <nrfx_clock_stop+0xa>
   1ca60:	2801      	cmp	r0, #1
   1ca62:	d018      	beq.n	1ca96 <nrfx_clock_stop+0x3a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   1ca64:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   1ca66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ca6a:	2202      	movs	r2, #2
   1ca6c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ca70:	4a18      	ldr	r2, [pc, #96]	; (1cad4 <nrfx_clock_stop+0x78>)
   1ca72:	6010      	str	r0, [r2, #0]
   1ca74:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ca76:	4a18      	ldr	r2, [pc, #96]	; (1cad8 <nrfx_clock_stop+0x7c>)
   1ca78:	2101      	movs	r1, #1
   1ca7a:	6011      	str	r1, [r2, #0]
   1ca7c:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1ca80:	461c      	mov	r4, r3
   1ca82:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   1ca86:	03db      	lsls	r3, r3, #15
   1ca88:	d5ec      	bpl.n	1ca64 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   1ca8a:	2001      	movs	r0, #1
   1ca8c:	f006 fb0a 	bl	230a4 <nrfx_busy_wait>
   1ca90:	3d01      	subs	r5, #1
   1ca92:	d1f6      	bne.n	1ca82 <nrfx_clock_stop+0x26>
   1ca94:	e7e6      	b.n	1ca64 <nrfx_clock_stop+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ca96:	4b11      	ldr	r3, [pc, #68]	; (1cadc <nrfx_clock_stop+0x80>)
    p_reg->INTENCLR = mask;
   1ca98:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ca9c:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   1ca9e:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1caa2:	601a      	str	r2, [r3, #0]
   1caa4:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1caa6:	4b0e      	ldr	r3, [pc, #56]	; (1cae0 <nrfx_clock_stop+0x84>)
   1caa8:	f242 7510 	movw	r5, #10000	; 0x2710
   1caac:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1caae:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1cab2:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
   1cab6:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1cab8:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1cabc:	d505      	bpl.n	1caca <nrfx_clock_stop+0x6e>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   1cabe:	b123      	cbz	r3, 1caca <nrfx_clock_stop+0x6e>
   1cac0:	2001      	movs	r0, #1
   1cac2:	f006 faef 	bl	230a4 <nrfx_busy_wait>
   1cac6:	3d01      	subs	r5, #1
   1cac8:	d1f1      	bne.n	1caae <nrfx_clock_stop+0x52>
            m_clock_cb.hfclk_started = false;
   1caca:	4b06      	ldr	r3, [pc, #24]	; (1cae4 <nrfx_clock_stop+0x88>)
   1cacc:	2200      	movs	r2, #0
   1cace:	715a      	strb	r2, [r3, #5]
   1cad0:	e7c8      	b.n	1ca64 <nrfx_clock_stop+0x8>
   1cad2:	bf00      	nop
   1cad4:	40000104 	.word	0x40000104
   1cad8:	4000000c 	.word	0x4000000c
   1cadc:	40000100 	.word	0x40000100
   1cae0:	40000004 	.word	0x40000004
   1cae4:	20002d7c 	.word	0x20002d7c

0001cae8 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1cae8:	4b16      	ldr	r3, [pc, #88]	; (1cb44 <nrfx_power_clock_irq_handler+0x5c>)
   1caea:	681a      	ldr	r2, [r3, #0]
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   1caec:	b510      	push	{r4, lr}
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   1caee:	b16a      	cbz	r2, 1cb0c <nrfx_power_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1caf0:	2200      	movs	r2, #0
   1caf2:	601a      	str	r2, [r3, #0]
   1caf4:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   1caf6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1cafa:	2201      	movs	r2, #1
   1cafc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   1cb00:	4b11      	ldr	r3, [pc, #68]	; (1cb48 <nrfx_power_clock_irq_handler+0x60>)
   1cb02:	7958      	ldrb	r0, [r3, #5]
   1cb04:	b910      	cbnz	r0, 1cb0c <nrfx_power_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
   1cb06:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1cb08:	681b      	ldr	r3, [r3, #0]
   1cb0a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1cb0c:	4b0f      	ldr	r3, [pc, #60]	; (1cb4c <nrfx_power_clock_irq_handler+0x64>)
   1cb0e:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   1cb10:	b172      	cbz	r2, 1cb30 <nrfx_power_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1cb12:	2200      	movs	r2, #0
   1cb14:	601a      	str	r2, [r3, #0]
   1cb16:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1cb18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1cb1c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1cb20:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   1cb24:	0792      	lsls	r2, r2, #30
   1cb26:	d104      	bne.n	1cb32 <nrfx_power_clock_irq_handler+0x4a>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1cb28:	2201      	movs	r2, #1
   1cb2a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cb2e:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   1cb30:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   1cb32:	2202      	movs	r2, #2
   1cb34:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1cb38:	4b03      	ldr	r3, [pc, #12]	; (1cb48 <nrfx_power_clock_irq_handler+0x60>)
}
   1cb3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1cb3e:	681b      	ldr	r3, [r3, #0]
   1cb40:	2001      	movs	r0, #1
   1cb42:	4718      	bx	r3
   1cb44:	40000100 	.word	0x40000100
   1cb48:	20002d7c 	.word	0x20002d7c
   1cb4c:	40000104 	.word	0x40000104

0001cb50 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   1cb50:	2301      	movs	r3, #1
   1cb52:	fa03 f000 	lsl.w	r0, r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   1cb56:	f010 0fff 	tst.w	r0, #255	; 0xff
   1cb5a:	d012      	beq.n	1cb82 <nrfx_gpiote_channel_free+0x32>
	__asm__ volatile(
   1cb5c:	f04f 0320 	mov.w	r3, #32
   1cb60:	f3ef 8111 	mrs	r1, BASEPRI
   1cb64:	f383 8811 	msr	BASEPRI, r3
   1cb68:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   1cb6c:	4a06      	ldr	r2, [pc, #24]	; (1cb88 <nrfx_gpiote_channel_free+0x38>)
   1cb6e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   1cb70:	ea23 0000 	bic.w	r0, r3, r0
   1cb74:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
   1cb76:	f381 8811 	msr	BASEPRI, r1
   1cb7a:	f3bf 8f6f 	isb	sy
   1cb7e:	4803      	ldr	r0, [pc, #12]	; (1cb8c <nrfx_gpiote_channel_free+0x3c>)
   1cb80:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   1cb82:	4803      	ldr	r0, [pc, #12]	; (1cb90 <nrfx_gpiote_channel_free+0x40>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1cb84:	4770      	bx	lr
   1cb86:	bf00      	nop
   1cb88:	20002d84 	.word	0x20002d84
   1cb8c:	0bad0000 	.word	0x0bad0000
   1cb90:	0bad0004 	.word	0x0bad0004

0001cb94 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   1cb94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cb98:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   1cb9a:	f8df e060 	ldr.w	lr, [pc, #96]	; 1cbfc <nrfx_gpiote_channel_alloc+0x68>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   1cb9e:	4816      	ldr	r0, [pc, #88]	; (1cbf8 <nrfx_gpiote_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   1cba0:	f8df 805c 	ldr.w	r8, [pc, #92]	; 1cc00 <nrfx_gpiote_channel_alloc+0x6c>
{
   1cba4:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   1cba6:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
   1cba8:	2601      	movs	r6, #1
   1cbaa:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   1cbac:	f04f 0120 	mov.w	r1, #32
   1cbb0:	f3ef 8c11 	mrs	ip, BASEPRI
   1cbb4:	f381 8811 	msr	BASEPRI, r1
   1cbb8:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   1cbbc:	fa22 f103 	lsr.w	r1, r2, r3
   1cbc0:	07c9      	lsls	r1, r1, #31
   1cbc2:	d50a      	bpl.n	1cbda <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
   1cbc4:	f8de 105c 	ldr.w	r1, [lr, #92]	; 0x5c
   1cbc8:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   1cbcc:	4239      	tst	r1, r7
    m_cb.allocated_channels_mask |= (1UL << index);
   1cbce:	bf01      	itttt	eq
   1cbd0:	4339      	orreq	r1, r7
   1cbd2:	f8ce 105c 	streq.w	r1, [lr, #92]	; 0x5c
            err_code = NRFX_SUCCESS;
   1cbd6:	4640      	moveq	r0, r8
            *p_channel = ch_idx;
   1cbd8:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
   1cbda:	f38c 8811 	msr	BASEPRI, ip
   1cbde:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   1cbe2:	4540      	cmp	r0, r8
   1cbe4:	d005      	beq.n	1cbf2 <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   1cbe6:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   1cbea:	439a      	bics	r2, r3
   1cbec:	f104 0401 	add.w	r4, r4, #1
   1cbf0:	d1db      	bne.n	1cbaa <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1cbf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cbf6:	bf00      	nop
   1cbf8:	0bad0002 	.word	0x0bad0002
   1cbfc:	20002d84 	.word	0x20002d84
   1cc00:	0bad0000 	.word	0x0bad0000

0001cc04 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   1cc04:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   1cc06:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1cc0a:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1cc0c:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   1cc0e:	6002      	str	r2, [r0, #0]
}
   1cc10:	4802      	ldr	r0, [pc, #8]	; (1cc1c <nrf_gpio_pin_port_decode+0x18>)
   1cc12:	bf18      	it	ne
   1cc14:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   1cc18:	4770      	bx	lr
   1cc1a:	bf00      	nop
   1cc1c:	50000300 	.word	0x50000300

0001cc20 <nrfx_spi_init>:

nrfx_err_t nrfx_spi_init(nrfx_spi_t const *        p_instance,
                         nrfx_spi_config_t const * p_config,
                         nrfx_spi_evt_handler_t    handler,
                         void *                    p_context)
{
   1cc20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    NRFX_ASSERT(p_config);
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1cc24:	7906      	ldrb	r6, [r0, #4]
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1cc26:	4c4c      	ldr	r4, [pc, #304]	; (1cd58 <nrfx_spi_init+0x138>)
{
   1cc28:	4680      	mov	r8, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1cc2a:	2028      	movs	r0, #40	; 0x28
   1cc2c:	4370      	muls	r0, r6
   1cc2e:	1825      	adds	r5, r4, r0
   1cc30:	7f2f      	ldrb	r7, [r5, #28]
   1cc32:	2f00      	cmp	r7, #0
   1cc34:	f040 808e 	bne.w	1cd54 <nrfx_spi_init+0x134>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
   1cc38:	5022      	str	r2, [r4, r0]
    p_cb->p_context = p_context;
   1cc3a:	606b      	str	r3, [r5, #4]
    // Configure pins used by the peripheral:
    // - SCK - output with initial value corresponding with the SPI mode used:
    //   0 - for modes 0 and 1 (CPOL = 0), 1 - for modes 2 and 3 (CPOL = 1);
    //   according to the reference manual guidelines this pin and its input
    //   buffer must always be connected for the SPI to work.
    if (p_config->mode <= NRF_SPI_MODE_1)
   1cc3c:	7b0b      	ldrb	r3, [r1, #12]
   1cc3e:	7808      	ldrb	r0, [r1, #0]
   1cc40:	2b01      	cmp	r3, #1
   1cc42:	d878      	bhi.n	1cd36 <nrfx_spi_init+0x116>
    {
        nrf_gpio_pin_clear(p_config->sck_pin);
   1cc44:	f006 fa47 	bl	230d6 <nrf_gpio_pin_clear>
    }
    else
    {
        nrf_gpio_pin_set(p_config->sck_pin);
    }
    nrf_gpio_cfg(p_config->sck_pin,
   1cc48:	780b      	ldrb	r3, [r1, #0]
   1cc4a:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1cc4c:	a801      	add	r0, sp, #4
   1cc4e:	f7ff ffd9 	bl	1cc04 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1cc52:	9b01      	ldr	r3, [sp, #4]
   1cc54:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1cc58:	2201      	movs	r2, #1
   1cc5a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                 NRF_GPIO_PIN_INPUT_CONNECT,
                 NRF_GPIO_PIN_NOPULL,
                 NRF_GPIO_PIN_S0S1,
                 NRF_GPIO_PIN_NOSENSE);
    // - MOSI (optional) - output with initial value 0,
    if (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
   1cc5e:	784d      	ldrb	r5, [r1, #1]
   1cc60:	2dff      	cmp	r5, #255	; 0xff
   1cc62:	d06b      	beq.n	1cd3c <nrfx_spi_init+0x11c>
    {
        mosi_pin = p_config->mosi_pin;
        nrf_gpio_pin_clear(mosi_pin);
   1cc64:	4628      	mov	r0, r5
   1cc66:	f006 fa36 	bl	230d6 <nrf_gpio_pin_clear>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1cc6a:	a801      	add	r0, sp, #4
   1cc6c:	9501      	str	r5, [sp, #4]
   1cc6e:	f7ff ffc9 	bl	1cc04 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1cc72:	9b01      	ldr	r3, [sp, #4]
   1cc74:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1cc78:	2203      	movs	r2, #3
   1cc7a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    else
    {
        mosi_pin = NRF_SPI_PIN_NOT_CONNECTED;
    }
    // - MISO (optional) - input,
    if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
   1cc7e:	788f      	ldrb	r7, [r1, #2]
   1cc80:	2fff      	cmp	r7, #255	; 0xff
   1cc82:	d05e      	beq.n	1cd42 <nrfx_spi_init+0x122>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1cc84:	a801      	add	r0, sp, #4
    {
        miso_pin = p_config->miso_pin;
        nrf_gpio_cfg_input(miso_pin, p_config->miso_pull);
   1cc86:	f891 900e 	ldrb.w	r9, [r1, #14]
    nrf_gpio_cfg(
   1cc8a:	9701      	str	r7, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1cc8c:	f7ff ffba 	bl	1cc04 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1cc90:	9b01      	ldr	r3, [sp, #4]
   1cc92:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
                               | ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)
   1cc96:	ea4f 0289 	mov.w	r2, r9, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1cc9a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    else
    {
        miso_pin = NRF_SPI_PIN_NOT_CONNECTED;
    }
    // - Slave Select (optional) - output with initial value 1 (inactive).
    if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1cc9e:	78c8      	ldrb	r0, [r1, #3]
   1cca0:	28ff      	cmp	r0, #255	; 0xff
   1cca2:	d00c      	beq.n	1ccbe <nrfx_spi_init+0x9e>
    {
        nrf_gpio_pin_set(p_config->ss_pin);
   1cca4:	f006 fa0a 	bl	230bc <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1cca8:	a801      	add	r0, sp, #4
        nrf_gpio_cfg_output(p_config->ss_pin);
   1ccaa:	78cb      	ldrb	r3, [r1, #3]
   1ccac:	9301      	str	r3, [sp, #4]
   1ccae:	f7ff ffa9 	bl	1cc04 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1ccb2:	9b01      	ldr	r3, [sp, #4]
   1ccb4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1ccb8:	2203      	movs	r2, #3
   1ccba:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    }
    m_cb[p_instance->drv_inst_idx].ss_pin = p_config->ss_pin;
   1ccbe:	f898 2004 	ldrb.w	r2, [r8, #4]
   1ccc2:	78c8      	ldrb	r0, [r1, #3]
   1ccc4:	2328      	movs	r3, #40	; 0x28
   1ccc6:	fb03 4302 	mla	r3, r3, r2, r4
   1ccca:	7798      	strb	r0, [r3, #30]

    NRF_SPI_Type * p_spi = p_instance->p_reg;
   1cccc:	f8d8 0000 	ldr.w	r0, [r8]
    nrf_spi_pins_set(p_spi, p_config->sck_pin, mosi_pin, miso_pin);
   1ccd0:	780b      	ldrb	r3, [r1, #0]
    p_reg->PSEL.SCK = sck_pin;
   1ccd2:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    p_reg->FREQUENCY = (uint32_t)frequency;
   1ccd6:	688b      	ldr	r3, [r1, #8]
    p_reg->PSEL.MOSI = mosi_pin;
   1ccd8:	f8c0 550c 	str.w	r5, [r0, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   1ccdc:	f8c0 7510 	str.w	r7, [r0, #1296]	; 0x510
    p_reg->FREQUENCY = (uint32_t)frequency;
   1cce0:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
   1cce4:	7b4b      	ldrb	r3, [r1, #13]
    nrf_spi_frequency_set(p_spi, p_config->frequency);
    nrf_spi_configure(p_spi, p_config->mode, p_config->bit_order);
   1cce6:	7b0d      	ldrb	r5, [r1, #12]
   1cce8:	3b00      	subs	r3, #0
   1ccea:	bf18      	it	ne
   1ccec:	2301      	movne	r3, #1
    switch (spi_mode)
   1ccee:	2d02      	cmp	r5, #2
   1ccf0:	d02a      	beq.n	1cd48 <nrfx_spi_init+0x128>
   1ccf2:	2d03      	cmp	r5, #3
   1ccf4:	d02b      	beq.n	1cd4e <nrfx_spi_init+0x12e>
   1ccf6:	2d01      	cmp	r5, #1
   1ccf8:	d101      	bne.n	1ccfe <nrfx_spi_init+0xde>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
   1ccfa:	f043 0302 	orr.w	r3, r3, #2
    p_reg->CONFIG = config;
   1ccfe:	f8c0 3554 	str.w	r3, [r0, #1364]	; 0x554

    m_cb[p_instance->drv_inst_idx].orc = p_config->orc;
   1cd02:	2328      	movs	r3, #40	; 0x28
   1cd04:	fb03 4202 	mla	r2, r3, r2, r4

    nrf_spi_enable(p_spi);

    if (p_cb->handler)
   1cd08:	4373      	muls	r3, r6
    m_cb[p_instance->drv_inst_idx].orc = p_config->orc;
   1cd0a:	7949      	ldrb	r1, [r1, #5]
    if (p_cb->handler)
   1cd0c:	58e3      	ldr	r3, [r4, r3]
    m_cb[p_instance->drv_inst_idx].orc = p_config->orc;
   1cd0e:	77d1      	strb	r1, [r2, #31]
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   1cd10:	2201      	movs	r2, #1
   1cd12:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
    if (p_cb->handler)
   1cd16:	b11b      	cbz	r3, 1cd20 <nrfx_spi_init+0x100>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   1cd18:	f340 3007 	sbfx	r0, r0, #12, #8
   1cd1c:	f7e8 fe42 	bl	59a4 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
   1cd20:	2328      	movs	r3, #40	; 0x28
   1cd22:	fb03 4406 	mla	r4, r3, r6, r4
   1cd26:	2300      	movs	r3, #0
   1cd28:	7763      	strb	r3, [r4, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   1cd2a:	480c      	ldr	r0, [pc, #48]	; (1cd5c <nrfx_spi_init+0x13c>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1cd2c:	2301      	movs	r3, #1
   1cd2e:	7723      	strb	r3, [r4, #28]
}
   1cd30:	b003      	add	sp, #12
   1cd32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        nrf_gpio_pin_set(p_config->sck_pin);
   1cd36:	f006 f9c1 	bl	230bc <nrf_gpio_pin_set>
   1cd3a:	e785      	b.n	1cc48 <nrfx_spi_init+0x28>
        mosi_pin = NRF_SPI_PIN_NOT_CONNECTED;
   1cd3c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1cd40:	e79d      	b.n	1cc7e <nrfx_spi_init+0x5e>
        miso_pin = NRF_SPI_PIN_NOT_CONNECTED;
   1cd42:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1cd46:	e7aa      	b.n	1cc9e <nrfx_spi_init+0x7e>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   1cd48:	f043 0304 	orr.w	r3, r3, #4
        break;
   1cd4c:	e7d7      	b.n	1ccfe <nrfx_spi_init+0xde>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   1cd4e:	f043 0306 	orr.w	r3, r3, #6
        break;
   1cd52:	e7d4      	b.n	1ccfe <nrfx_spi_init+0xde>
        return err_code;
   1cd54:	4802      	ldr	r0, [pc, #8]	; (1cd60 <nrfx_spi_init+0x140>)
   1cd56:	e7eb      	b.n	1cd30 <nrfx_spi_init+0x110>
   1cd58:	20002de4 	.word	0x20002de4
   1cd5c:	0bad0000 	.word	0x0bad0000
   1cd60:	0bad0005 	.word	0x0bad0005

0001cd64 <nrfx_spi_xfer>:
}

nrfx_err_t nrfx_spi_xfer(nrfx_spi_t const *           p_instance,
                         nrfx_spi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
   1cd64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1cd68:	7904      	ldrb	r4, [r0, #4]
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   1cd6a:	4d39      	ldr	r5, [pc, #228]	; (1ce50 <nrfx_spi_xfer+0xec>)
   1cd6c:	2328      	movs	r3, #40	; 0x28
   1cd6e:	4363      	muls	r3, r4
{
   1cd70:	4690      	mov	r8, r2
    if (p_cb->transfer_in_progress)
   1cd72:	18ea      	adds	r2, r5, r3
{
   1cd74:	460f      	mov	r7, r1
    if (p_cb->transfer_in_progress)
   1cd76:	7f51      	ldrb	r1, [r2, #29]
{
   1cd78:	4681      	mov	r9, r0
    if (p_cb->transfer_in_progress)
   1cd7a:	2900      	cmp	r1, #0
   1cd7c:	d165      	bne.n	1ce4a <nrfx_spi_xfer+0xe6>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler)
   1cd7e:	58eb      	ldr	r3, [r5, r3]
   1cd80:	b10b      	cbz	r3, 1cd86 <nrfx_spi_xfer+0x22>
        {
            p_cb->transfer_in_progress = true;
   1cd82:	2301      	movs	r3, #1
   1cd84:	7753      	strb	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   1cd86:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   1cd8a:	2628      	movs	r6, #40	; 0x28
   1cd8c:	fb06 5604 	mla	r6, r6, r4, r5
   1cd90:	f106 0c0c 	add.w	ip, r6, #12
   1cd94:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    p_cb->abort = false;

    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1cd98:	7fb0      	ldrb	r0, [r6, #30]
    p_cb->abort = false;
   1cd9a:	2300      	movs	r3, #0
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1cd9c:	28ff      	cmp	r0, #255	; 0xff
    p_cb->abort = false;
   1cd9e:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1cda2:	d001      	beq.n	1cda8 <nrfx_spi_xfer+0x44>
    {
        nrf_gpio_pin_clear(p_cb->ss_pin);
   1cda4:	f006 f997 	bl	230d6 <nrf_gpio_pin_clear>
    }
    if (flags)
   1cda8:	2328      	movs	r3, #40	; 0x28
   1cdaa:	f1b8 0f00 	cmp.w	r8, #0
   1cdae:	d006      	beq.n	1cdbe <nrfx_spi_xfer+0x5a>
    {
        p_cb->transfer_in_progress = false;
   1cdb0:	fb03 5404 	mla	r4, r3, r4, r5
        err_code = NRFX_ERROR_NOT_SUPPORTED;
   1cdb4:	4827      	ldr	r0, [pc, #156]	; (1ce54 <nrfx_spi_xfer+0xf0>)
        p_cb->transfer_in_progress = false;
   1cdb6:	2300      	movs	r3, #0
   1cdb8:	7763      	strb	r3, [r4, #29]
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1cdba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        spi_xfer(p_instance->p_reg, p_cb, p_xfer_desc);
   1cdbe:	f8d9 6000 	ldr.w	r6, [r9]
    p_cb->bytes_transferred = 0;
   1cdc2:	fb03 5304 	mla	r3, r3, r4, r5
    p_reg->INTENCLR = mask;
   1cdc6:	2204      	movs	r2, #4
   1cdc8:	f8c6 2308 	str.w	r2, [r6, #776]	; 0x308
   1cdcc:	f8c3 8020 	str.w	r8, [r3, #32]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1cdd0:	f8c6 8108 	str.w	r8, [r6, #264]	; 0x108
   1cdd4:	f8d6 2108 	ldr.w	r2, [r6, #264]	; 0x108
        (p_xfer_desc->tx_length > 0 ? p_xfer_desc->p_tx_buffer[0] : p_cb->orc));
   1cdd8:	687a      	ldr	r2, [r7, #4]
    nrf_spi_txd_set(p_spi,
   1cdda:	b192      	cbz	r2, 1ce02 <nrfx_spi_xfer+0x9e>
   1cddc:	683b      	ldr	r3, [r7, #0]
   1cdde:	781b      	ldrb	r3, [r3, #0]
    p_reg->TXD = data;
   1cde0:	f8c6 351c 	str.w	r3, [r6, #1308]	; 0x51c
    if (p_xfer_desc->tx_length > 1)
   1cde4:	2a01      	cmp	r2, #1
   1cde6:	d90e      	bls.n	1ce06 <nrfx_spi_xfer+0xa2>
        nrf_spi_txd_set(p_spi, p_xfer_desc->p_tx_buffer[1]);
   1cde8:	683b      	ldr	r3, [r7, #0]
   1cdea:	785b      	ldrb	r3, [r3, #1]
   1cdec:	f8c6 351c 	str.w	r3, [r6, #1308]	; 0x51c
    if (p_cb->handler)
   1cdf0:	2328      	movs	r3, #40	; 0x28
   1cdf2:	4363      	muls	r3, r4
   1cdf4:	58ef      	ldr	r7, [r5, r3]
   1cdf6:	b177      	cbz	r7, 1ce16 <nrfx_spi_xfer+0xb2>
    p_reg->INTENSET = mask;
   1cdf8:	2304      	movs	r3, #4
   1cdfa:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
    nrfx_err_t err_code = NRFX_SUCCESS;
   1cdfe:	4816      	ldr	r0, [pc, #88]	; (1ce58 <nrfx_spi_xfer+0xf4>)
   1ce00:	e7db      	b.n	1cdba <nrfx_spi_xfer+0x56>
    nrf_spi_txd_set(p_spi,
   1ce02:	7fdb      	ldrb	r3, [r3, #31]
   1ce04:	e7ec      	b.n	1cde0 <nrfx_spi_xfer+0x7c>
    else if (p_xfer_desc->rx_length > 1)
   1ce06:	68fb      	ldr	r3, [r7, #12]
   1ce08:	2b01      	cmp	r3, #1
   1ce0a:	d9f1      	bls.n	1cdf0 <nrfx_spi_xfer+0x8c>
        nrf_spi_txd_set(p_spi, p_cb->orc);
   1ce0c:	2328      	movs	r3, #40	; 0x28
   1ce0e:	fb03 5304 	mla	r3, r3, r4, r5
    p_reg->TXD = data;
   1ce12:	7fdb      	ldrb	r3, [r3, #31]
   1ce14:	e7ea      	b.n	1cdec <nrfx_spi_xfer+0x88>
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1ce16:	eb04 0184 	add.w	r1, r4, r4, lsl #2
   1ce1a:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ce1e:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
            while (!nrf_spi_event_check(p_spi, NRF_SPI_EVENT_READY)) {}
   1ce22:	2b00      	cmp	r3, #0
   1ce24:	d0fb      	beq.n	1ce1e <nrfx_spi_xfer+0xba>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ce26:	f8c6 7108 	str.w	r7, [r6, #264]	; 0x108
        } while (transfer_byte(p_spi, p_cb));
   1ce2a:	4630      	mov	r0, r6
   1ce2c:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
   1ce30:	f006 f95e 	bl	230f0 <transfer_byte>
   1ce34:	2800      	cmp	r0, #0
   1ce36:	d1f2      	bne.n	1ce1e <nrfx_spi_xfer+0xba>
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1ce38:	2328      	movs	r3, #40	; 0x28
   1ce3a:	fb03 5404 	mla	r4, r3, r4, r5
   1ce3e:	7fa0      	ldrb	r0, [r4, #30]
   1ce40:	28ff      	cmp	r0, #255	; 0xff
   1ce42:	d0dc      	beq.n	1cdfe <nrfx_spi_xfer+0x9a>
            nrf_gpio_pin_set(p_cb->ss_pin);
   1ce44:	f006 f93a 	bl	230bc <nrf_gpio_pin_set>
   1ce48:	e7d9      	b.n	1cdfe <nrfx_spi_xfer+0x9a>
        return err_code;
   1ce4a:	4804      	ldr	r0, [pc, #16]	; (1ce5c <nrfx_spi_xfer+0xf8>)
   1ce4c:	e7b5      	b.n	1cdba <nrfx_spi_xfer+0x56>
   1ce4e:	bf00      	nop
   1ce50:	20002de4 	.word	0x20002de4
   1ce54:	0bad0003 	.word	0x0bad0003
   1ce58:	0bad0000 	.word	0x0bad0000
   1ce5c:	0bad000b 	.word	0x0bad000b

0001ce60 <nrfx_spi_1_irq_handler>:
   1ce60:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
   1ce64:	2300      	movs	r3, #0
}
#endif

#if NRFX_CHECK(NRFX_SPI1_ENABLED)
void nrfx_spi_1_irq_handler(void)
{
   1ce66:	b510      	push	{r4, lr}
    if (!transfer_byte(p_spi, p_cb))
   1ce68:	490b      	ldr	r1, [pc, #44]	; (1ce98 <nrfx_spi_1_irq_handler+0x38>)
   1ce6a:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   1ce6e:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1ce72:	f006 f93d 	bl	230f0 <transfer_byte>
   1ce76:	b968      	cbnz	r0, 1ce94 <nrfx_spi_1_irq_handler+0x34>
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1ce78:	7f88      	ldrb	r0, [r1, #30]
   1ce7a:	28ff      	cmp	r0, #255	; 0xff
   1ce7c:	d001      	beq.n	1ce82 <nrfx_spi_1_irq_handler+0x22>
        nrf_gpio_pin_set(p_cb->ss_pin);
   1ce7e:	f006 f91d 	bl	230bc <nrf_gpio_pin_set>
    p_cb->transfer_in_progress = false;
   1ce82:	2300      	movs	r3, #0
    p_cb->evt.type = NRFX_SPI_EVENT_DONE;
   1ce84:	720b      	strb	r3, [r1, #8]
    p_cb->transfer_in_progress = false;
   1ce86:	774b      	strb	r3, [r1, #29]
    irq_handler(NRF_SPI1, &m_cb[NRFX_SPI1_INST_IDX]);
}
   1ce88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   1ce8c:	e9d1 3100 	ldrd	r3, r1, [r1]
   1ce90:	4802      	ldr	r0, [pc, #8]	; (1ce9c <nrfx_spi_1_irq_handler+0x3c>)
   1ce92:	4718      	bx	r3
}
   1ce94:	bd10      	pop	{r4, pc}
   1ce96:	bf00      	nop
   1ce98:	20002de4 	.word	0x20002de4
   1ce9c:	20002dec 	.word	0x20002dec

0001cea0 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1cea0:	4b0e      	ldr	r3, [pc, #56]	; (1cedc <z_sys_init_run_level+0x3c>)
{
   1cea2:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1cea4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1cea8:	3001      	adds	r0, #1
   1ceaa:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1ceae:	42a6      	cmp	r6, r4
   1ceb0:	d800      	bhi.n	1ceb4 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   1ceb2:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   1ceb4:	e9d4 3500 	ldrd	r3, r5, [r4]
   1ceb8:	4628      	mov	r0, r5
   1ceba:	4798      	blx	r3
		if (dev != NULL) {
   1cebc:	b165      	cbz	r5, 1ced8 <z_sys_init_run_level+0x38>
			if (rc != 0) {
   1cebe:	68eb      	ldr	r3, [r5, #12]
   1cec0:	b130      	cbz	r0, 1ced0 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   1cec2:	2800      	cmp	r0, #0
   1cec4:	bfb8      	it	lt
   1cec6:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   1cec8:	28ff      	cmp	r0, #255	; 0xff
   1ceca:	bfa8      	it	ge
   1cecc:	20ff      	movge	r0, #255	; 0xff
   1cece:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   1ced0:	785a      	ldrb	r2, [r3, #1]
   1ced2:	f042 0201 	orr.w	r2, r2, #1
   1ced6:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1ced8:	3408      	adds	r4, #8
   1ceda:	e7e8      	b.n	1ceae <z_sys_init_run_level+0xe>
   1cedc:	00025930 	.word	0x00025930

0001cee0 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   1cee0:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   1cee2:	4605      	mov	r5, r0
   1cee4:	b910      	cbnz	r0, 1ceec <z_impl_device_get_binding+0xc>
		return NULL;
   1cee6:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   1cee8:	4620      	mov	r0, r4
   1ceea:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   1ceec:	7803      	ldrb	r3, [r0, #0]
   1ceee:	2b00      	cmp	r3, #0
   1cef0:	d0f9      	beq.n	1cee6 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   1cef2:	4a0f      	ldr	r2, [pc, #60]	; (1cf30 <z_impl_device_get_binding+0x50>)
   1cef4:	4c0f      	ldr	r4, [pc, #60]	; (1cf34 <z_impl_device_get_binding+0x54>)
   1cef6:	4616      	mov	r6, r2
   1cef8:	4294      	cmp	r4, r2
   1cefa:	d108      	bne.n	1cf0e <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
   1cefc:	4c0d      	ldr	r4, [pc, #52]	; (1cf34 <z_impl_device_get_binding+0x54>)
   1cefe:	42b4      	cmp	r4, r6
   1cf00:	d0f1      	beq.n	1cee6 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1cf02:	4620      	mov	r0, r4
   1cf04:	f006 f928 	bl	23158 <z_device_ready>
   1cf08:	b950      	cbnz	r0, 1cf20 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   1cf0a:	3418      	adds	r4, #24
   1cf0c:	e7f7      	b.n	1cefe <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
   1cf0e:	4620      	mov	r0, r4
   1cf10:	f006 f922 	bl	23158 <z_device_ready>
   1cf14:	b110      	cbz	r0, 1cf1c <z_impl_device_get_binding+0x3c>
   1cf16:	6823      	ldr	r3, [r4, #0]
   1cf18:	42ab      	cmp	r3, r5
   1cf1a:	d0e5      	beq.n	1cee8 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   1cf1c:	3418      	adds	r4, #24
   1cf1e:	e7eb      	b.n	1cef8 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1cf20:	6821      	ldr	r1, [r4, #0]
   1cf22:	4628      	mov	r0, r5
   1cf24:	f7e3 ff06 	bl	d34 <strcmp>
   1cf28:	2800      	cmp	r0, #0
   1cf2a:	d1ee      	bne.n	1cf0a <z_impl_device_get_binding+0x2a>
   1cf2c:	e7dc      	b.n	1cee8 <z_impl_device_get_binding+0x8>
   1cf2e:	bf00      	nop
   1cf30:	2000085c 	.word	0x2000085c
   1cf34:	2000079c 	.word	0x2000079c

0001cf38 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   1cf38:	b510      	push	{r4, lr}
   1cf3a:	4604      	mov	r4, r0
	z_impl_log_panic();
   1cf3c:	f7e6 ffd2 	bl	3ee4 <z_impl_log_panic>
   1cf40:	4b06      	ldr	r3, [pc, #24]	; (1cf5c <k_sys_fatal_error_handler+0x24>)
   1cf42:	4907      	ldr	r1, [pc, #28]	; (1cf60 <k_sys_fatal_error_handler+0x28>)
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
   1cf44:	4807      	ldr	r0, [pc, #28]	; (1cf64 <k_sys_fatal_error_handler+0x2c>)
   1cf46:	1ac9      	subs	r1, r1, r3
   1cf48:	08c9      	lsrs	r1, r1, #3
   1cf4a:	0189      	lsls	r1, r1, #6
   1cf4c:	f041 0101 	orr.w	r1, r1, #1
   1cf50:	f002 f8be 	bl	1f0d0 <log_0>
	arch_system_halt(reason);
   1cf54:	4620      	mov	r0, r4
   1cf56:	f006 f908 	bl	2316a <arch_system_halt>
   1cf5a:	bf00      	nop
   1cf5c:	00023ed8 	.word	0x00023ed8
   1cf60:	00024018 	.word	0x00024018
   1cf64:	00027b06 	.word	0x00027b06

0001cf68 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1cf68:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1cf6c:	4606      	mov	r6, r0
   1cf6e:	460f      	mov	r7, r1
	__asm__ volatile(
   1cf70:	f04f 0320 	mov.w	r3, #32
   1cf74:	f3ef 8811 	mrs	r8, BASEPRI
   1cf78:	f383 8811 	msr	BASEPRI, r3
   1cf7c:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   1cf80:	f000 fd9a 	bl	1dab8 <z_impl_k_current_get>
   1cf84:	4c1f      	ldr	r4, [pc, #124]	; (1d004 <z_fatal_error+0x9c>)
   1cf86:	4b20      	ldr	r3, [pc, #128]	; (1d008 <z_fatal_error+0xa0>)
   1cf88:	1ae4      	subs	r4, r4, r3
   1cf8a:	2e04      	cmp	r6, #4
   1cf8c:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   1cf90:	bf96      	itet	ls
   1cf92:	4a1e      	ldrls	r2, [pc, #120]	; (1d00c <z_fatal_error+0xa4>)
	struct k_thread *thread = k_current_get();

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1cf94:	4a1e      	ldrhi	r2, [pc, #120]	; (1d010 <z_fatal_error+0xa8>)
   1cf96:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
   1cf9a:	01a4      	lsls	r4, r4, #6
   1cf9c:	f044 0301 	orr.w	r3, r4, #1
   1cfa0:	4605      	mov	r5, r0
   1cfa2:	f8ad 3000 	strh.w	r3, [sp]
   1cfa6:	481b      	ldr	r0, [pc, #108]	; (1d014 <z_fatal_error+0xac>)
   1cfa8:	2300      	movs	r3, #0
   1cfaa:	4631      	mov	r1, r6
   1cfac:	f002 f8ca 	bl	1f144 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1cfb0:	b147      	cbz	r7, 1cfc4 <z_fatal_error+0x5c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1cfb2:	69fb      	ldr	r3, [r7, #28]
   1cfb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1cfb8:	b123      	cbz	r3, 1cfc4 <z_fatal_error+0x5c>
		LOG_ERR("Fault during interrupt handling\n");
   1cfba:	4817      	ldr	r0, [pc, #92]	; (1d018 <z_fatal_error+0xb0>)
   1cfbc:	f044 0101 	orr.w	r1, r4, #1
   1cfc0:	f002 f886 	bl	1f0d0 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1cfc4:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1cfc8:	b12d      	cbz	r5, 1cfd6 <z_fatal_error+0x6e>
   1cfca:	4628      	mov	r0, r5
   1cfcc:	f006 fb66 	bl	2369c <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   1cfd0:	b108      	cbz	r0, 1cfd6 <z_fatal_error+0x6e>
   1cfd2:	7803      	ldrb	r3, [r0, #0]
   1cfd4:	b903      	cbnz	r3, 1cfd8 <z_fatal_error+0x70>
		thread_name = "unknown";
   1cfd6:	4811      	ldr	r0, [pc, #68]	; (1d01c <z_fatal_error+0xb4>)
	LOG_ERR("Current thread: %p (%s)", thread,
   1cfd8:	f7e6 fdfe 	bl	3bd8 <log_strdup>
   1cfdc:	4623      	mov	r3, r4
   1cfde:	4602      	mov	r2, r0
   1cfe0:	4629      	mov	r1, r5
   1cfe2:	480f      	ldr	r0, [pc, #60]	; (1d020 <z_fatal_error+0xb8>)
   1cfe4:	f002 f895 	bl	1f112 <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1cfe8:	4639      	mov	r1, r7
   1cfea:	4630      	mov	r0, r6
   1cfec:	f7ff ffa4 	bl	1cf38 <k_sys_fatal_error_handler>
	__asm__ volatile(
   1cff0:	f388 8811 	msr	BASEPRI, r8
   1cff4:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1cff8:	4628      	mov	r0, r5
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   1cffa:	b002      	add	sp, #8
   1cffc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1d000:	f7e9 b842 	b.w	6088 <z_impl_k_thread_abort>
   1d004:	00024018 	.word	0x00024018
   1d008:	00023ed8 	.word	0x00023ed8
   1d00c:	00025948 	.word	0x00025948
   1d010:	00027b15 	.word	0x00027b15
   1d014:	00027b23 	.word	0x00027b23
   1d018:	00027b4b 	.word	0x00027b4b
   1d01c:	000264a7 	.word	0x000264a7
   1d020:	00027b6c 	.word	0x00027b6c

0001d024 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   1d024:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   1d026:	4c09      	ldr	r4, [pc, #36]	; (1d04c <idle+0x28>)
	__asm__ volatile(
   1d028:	f04f 0220 	mov.w	r2, #32
   1d02c:	f3ef 8311 	mrs	r3, BASEPRI
   1d030:	f382 8811 	msr	BASEPRI, r2
   1d034:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   1d038:	f006 fc0b 	bl	23852 <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
   1d03c:	6220      	str	r0, [r4, #32]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
   1d03e:	f7e7 fedb 	bl	4df8 <pm_system_suspend>
   1d042:	2800      	cmp	r0, #0
   1d044:	d1f0      	bne.n	1d028 <idle+0x4>
	arch_cpu_idle();
   1d046:	f7e8 fd3f 	bl	5ac8 <arch_cpu_idle>
}
   1d04a:	e7ed      	b.n	1d028 <idle+0x4>
   1d04c:	20002e0c 	.word	0x20002e0c

0001d050 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1d050:	4802      	ldr	r0, [pc, #8]	; (1d05c <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
   1d052:	4a03      	ldr	r2, [pc, #12]	; (1d060 <z_bss_zero+0x10>)
   1d054:	2100      	movs	r1, #0
   1d056:	1a12      	subs	r2, r2, r0
   1d058:	f006 bddf 	b.w	23c1a <memset>
   1d05c:	20000a80 	.word	0x20000a80
   1d060:	200036e0 	.word	0x200036e0

0001d064 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1d064:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   1d066:	4b0a      	ldr	r3, [pc, #40]	; (1d090 <bg_thread_main+0x2c>)
   1d068:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1d06a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1d06c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1d06e:	f7ff ff17 	bl	1cea0 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1d072:	f001 f83f 	bl	1e0f4 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1d076:	2003      	movs	r0, #3
   1d078:	f7ff ff12 	bl	1cea0 <z_sys_init_run_level>

	z_init_static_threads();
   1d07c:	f000 fe5c 	bl	1dd38 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   1d080:	f7e5 ff6e 	bl	2f60 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1d084:	4a03      	ldr	r2, [pc, #12]	; (1d094 <bg_thread_main+0x30>)
   1d086:	7b13      	ldrb	r3, [r2, #12]
   1d088:	f023 0301 	bic.w	r3, r3, #1
   1d08c:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1d08e:	bd08      	pop	{r3, pc}
   1d090:	200036df 	.word	0x200036df
   1d094:	20001540 	.word	0x20001540

0001d098 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   1d098:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   1d09c:	b0a7      	sub	sp, #156	; 0x9c
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   1d09e:	f7e6 fcf3 	bl	3a88 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1d0a2:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 1d19c <z_cstart+0x104>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1d0a6:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1d0aa:	4d34      	ldr	r5, [pc, #208]	; (1d17c <z_cstart+0xe4>)
	_kernel.ready_q.cache = &z_main_thread;
   1d0ac:	4e34      	ldr	r6, [pc, #208]	; (1d180 <z_cstart+0xe8>)
   1d0ae:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1d0b0:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 1d1a0 <z_cstart+0x108>
	z_setup_new_thread(thread, stack,
   1d0b4:	4f33      	ldr	r7, [pc, #204]	; (1d184 <z_cstart+0xec>)
   1d0b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1d0ba:	2400      	movs	r4, #0
   1d0bc:	616b      	str	r3, [r5, #20]
   1d0be:	23e0      	movs	r3, #224	; 0xe0
   1d0c0:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1d0c4:	77ec      	strb	r4, [r5, #31]
   1d0c6:	762c      	strb	r4, [r5, #24]
   1d0c8:	766c      	strb	r4, [r5, #25]
   1d0ca:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1d0cc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1d0ce:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1d0d2:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1d0d4:	f7e8 ffb6 	bl	6044 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1d0d8:	f7e8 fcf0 	bl	5abc <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1d0dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d0e0:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1d0e2:	62eb      	str	r3, [r5, #44]	; 0x2c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   1d0e4:	4d28      	ldr	r5, [pc, #160]	; (1d188 <z_cstart+0xf0>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   1d0e6:	f240 1301 	movw	r3, #257	; 0x101
   1d0ea:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1d0ee:	ab06      	add	r3, sp, #24
   1d0f0:	60ab      	str	r3, [r5, #8]
	dummy_thread->stack_info.size = 0U;
   1d0f2:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
#endif
#if defined(CONFIG_MMU) && defined(CONFIG_USERSPACE)
	z_kernel_map_fixup();
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1d0f6:	f006 f82e 	bl	23156 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1d0fa:	4620      	mov	r0, r4
   1d0fc:	f7ff fed0 	bl	1cea0 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1d100:	2001      	movs	r0, #1
   1d102:	f7ff fecd 	bl	1cea0 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1d106:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
   1d10a:	f000 fc55 	bl	1d9b8 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1d10e:	4b1f      	ldr	r3, [pc, #124]	; (1d18c <z_cstart+0xf4>)
	_kernel.ready_q.cache = &z_main_thread;
   1d110:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1d112:	491f      	ldr	r1, [pc, #124]	; (1d190 <z_cstart+0xf8>)
   1d114:	9305      	str	r3, [sp, #20]
   1d116:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1d11a:	4653      	mov	r3, sl
   1d11c:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   1d120:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1d124:	9400      	str	r4, [sp, #0]
   1d126:	4630      	mov	r0, r6
   1d128:	f000 fdaa 	bl	1dc80 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1d12c:	7b73      	ldrb	r3, [r6, #13]
   1d12e:	4680      	mov	r8, r0
   1d130:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   1d134:	4630      	mov	r0, r6
   1d136:	7373      	strb	r3, [r6, #13]
   1d138:	f006 fa07 	bl	2354a <z_ready_thread>
	z_setup_new_thread(thread, stack,
   1d13c:	230f      	movs	r3, #15
   1d13e:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1d142:	4914      	ldr	r1, [pc, #80]	; (1d194 <z_cstart+0xfc>)
   1d144:	4b14      	ldr	r3, [pc, #80]	; (1d198 <z_cstart+0x100>)
   1d146:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1d14a:	e9cd b404 	strd	fp, r4, [sp, #16]
   1d14e:	e9cd 5400 	strd	r5, r4, [sp]
   1d152:	4638      	mov	r0, r7
   1d154:	f000 fd94 	bl	1dc80 <z_setup_new_thread>
   1d158:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   1d15a:	60ef      	str	r7, [r5, #12]
   1d15c:	f023 0304 	bic.w	r3, r3, #4
   1d160:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1d162:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
   1d166:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].id = i;
   1d16a:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   1d16c:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1d170:	4652      	mov	r2, sl
   1d172:	4641      	mov	r1, r8
   1d174:	4630      	mov	r0, r6
   1d176:	f7e8 fc89 	bl	5a8c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1d17a:	bf00      	nop
   1d17c:	e000ed00 	.word	0xe000ed00
   1d180:	20001540 	.word	0x20001540
   1d184:	200014c0 	.word	0x200014c0
   1d188:	20002e0c 	.word	0x20002e0c
   1d18c:	00027bce 	.word	0x00027bce
   1d190:	2000cf90 	.word	0x2000cf90
   1d194:	2000d390 	.word	0x2000d390
   1d198:	0001d025 	.word	0x0001d025
   1d19c:	2000dcd0 	.word	0x2000dcd0
   1d1a0:	0001d065 	.word	0x0001d065

0001d1a4 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   1d1a4:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1d1a6:	4c06      	ldr	r4, [pc, #24]	; (1d1c0 <statics_init+0x1c>)
   1d1a8:	4d06      	ldr	r5, [pc, #24]	; (1d1c4 <statics_init+0x20>)
   1d1aa:	42ac      	cmp	r4, r5
   1d1ac:	d301      	bcc.n	1d1b2 <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   1d1ae:	2000      	movs	r0, #0
   1d1b0:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1d1b2:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1d1b6:	4620      	mov	r0, r4
   1d1b8:	f005 ffe7 	bl	2318a <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1d1bc:	3414      	adds	r4, #20
   1d1be:	e7f4      	b.n	1d1aa <statics_init+0x6>
   1d1c0:	200008ec 	.word	0x200008ec
   1d1c4:	200008ec 	.word	0x200008ec

0001d1c8 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   1d1c8:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1d1ca:	4b0e      	ldr	r3, [pc, #56]	; (1d204 <init_mem_slab_module+0x3c>)
   1d1cc:	4c0e      	ldr	r4, [pc, #56]	; (1d208 <init_mem_slab_module+0x40>)
   1d1ce:	42a3      	cmp	r3, r4
   1d1d0:	d301      	bcc.n	1d1d6 <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   1d1d2:	2000      	movs	r0, #0
	return rc;
}
   1d1d4:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1d1d6:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   1d1da:	ea41 0200 	orr.w	r2, r1, r0
   1d1de:	f012 0203 	ands.w	r2, r2, #3
   1d1e2:	d10b      	bne.n	1d1fc <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   1d1e4:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1d1e6:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1d1e8:	42aa      	cmp	r2, r5
   1d1ea:	d101      	bne.n	1d1f0 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1d1ec:	331c      	adds	r3, #28
   1d1ee:	e7ee      	b.n	1d1ce <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   1d1f0:	695e      	ldr	r6, [r3, #20]
   1d1f2:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   1d1f4:	3201      	adds	r2, #1
		slab->free_list = p;
   1d1f6:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   1d1f8:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   1d1fa:	e7f5      	b.n	1d1e8 <init_mem_slab_module+0x20>
		return -EINVAL;
   1d1fc:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1d200:	e7e8      	b.n	1d1d4 <init_mem_slab_module+0xc>
   1d202:	bf00      	nop
   1d204:	20000898 	.word	0x20000898
   1d208:	200008ec 	.word	0x200008ec

0001d20c <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1d20c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   1d20e:	460c      	mov	r4, r1
   1d210:	4616      	mov	r6, r2
   1d212:	461f      	mov	r7, r3
   1d214:	f04f 0320 	mov.w	r3, #32
   1d218:	f3ef 8111 	mrs	r1, BASEPRI
   1d21c:	f383 8811 	msr	BASEPRI, r3
   1d220:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   1d224:	6943      	ldr	r3, [r0, #20]
   1d226:	b15b      	cbz	r3, 1d240 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   1d228:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1d22a:	681b      	ldr	r3, [r3, #0]
   1d22c:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1d22e:	6983      	ldr	r3, [r0, #24]
   1d230:	3301      	adds	r3, #1
   1d232:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1d234:	2000      	movs	r0, #0
	__asm__ volatile(
   1d236:	f381 8811 	msr	BASEPRI, r1
   1d23a:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   1d23e:	e011      	b.n	1d264 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1d240:	ea56 0207 	orrs.w	r2, r6, r7
   1d244:	d103      	bne.n	1d24e <k_mem_slab_alloc+0x42>
		*mem = NULL;
   1d246:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   1d248:	f06f 000b 	mvn.w	r0, #11
   1d24c:	e7f3      	b.n	1d236 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   1d24e:	4602      	mov	r2, r0
   1d250:	e9cd 6700 	strd	r6, r7, [sp]
   1d254:	4804      	ldr	r0, [pc, #16]	; (1d268 <k_mem_slab_alloc+0x5c>)
   1d256:	f000 f9f1 	bl	1d63c <z_pend_curr>
		if (result == 0) {
   1d25a:	b918      	cbnz	r0, 1d264 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   1d25c:	4b03      	ldr	r3, [pc, #12]	; (1d26c <k_mem_slab_alloc+0x60>)
   1d25e:	689b      	ldr	r3, [r3, #8]
   1d260:	695b      	ldr	r3, [r3, #20]
   1d262:	6023      	str	r3, [r4, #0]
}
   1d264:	b002      	add	sp, #8
   1d266:	bdd0      	pop	{r4, r6, r7, pc}
   1d268:	200036e0 	.word	0x200036e0
   1d26c:	20002e0c 	.word	0x20002e0c

0001d270 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1d270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d272:	4604      	mov	r4, r0
   1d274:	460d      	mov	r5, r1
	__asm__ volatile(
   1d276:	f04f 0320 	mov.w	r3, #32
   1d27a:	f3ef 8611 	mrs	r6, BASEPRI
   1d27e:	f383 8811 	msr	BASEPRI, r3
   1d282:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (slab->free_list == NULL) {
   1d286:	6947      	ldr	r7, [r0, #20]
   1d288:	b96f      	cbnz	r7, 1d2a6 <k_mem_slab_free+0x36>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1d28a:	f006 f9a5 	bl	235d8 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   1d28e:	b150      	cbz	r0, 1d2a6 <k_mem_slab_free+0x36>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1d290:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1d292:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1d294:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   1d296:	f006 f958 	bl	2354a <z_ready_thread>
			z_reschedule(&lock, key);
   1d29a:	4631      	mov	r1, r6
   1d29c:	4808      	ldr	r0, [pc, #32]	; (1d2c0 <k_mem_slab_free+0x50>)
	}
	**(char ***) mem = slab->free_list;
	slab->free_list = *(char **) mem;
	slab->num_used--;
	k_spin_unlock(&lock, key);
}
   1d29e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&lock, key);
   1d2a2:	f000 b949 	b.w	1d538 <z_reschedule>
	**(char ***) mem = slab->free_list;
   1d2a6:	682b      	ldr	r3, [r5, #0]
   1d2a8:	6962      	ldr	r2, [r4, #20]
   1d2aa:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1d2ac:	682b      	ldr	r3, [r5, #0]
   1d2ae:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   1d2b0:	69a3      	ldr	r3, [r4, #24]
   1d2b2:	3b01      	subs	r3, #1
   1d2b4:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1d2b6:	f386 8811 	msr	BASEPRI, r6
   1d2ba:	f3bf 8f6f 	isb	sy
}
   1d2be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d2c0:	200036e0 	.word	0x200036e0

0001d2c4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1d2c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1d2c8:	4604      	mov	r4, r0
   1d2ca:	4616      	mov	r6, r2
   1d2cc:	461f      	mov	r7, r3
	__asm__ volatile(
   1d2ce:	f04f 0320 	mov.w	r3, #32
   1d2d2:	f3ef 8811 	mrs	r8, BASEPRI
   1d2d6:	f383 8811 	msr	BASEPRI, r3
   1d2da:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1d2de:	68c3      	ldr	r3, [r0, #12]
   1d2e0:	4a32      	ldr	r2, [pc, #200]	; (1d3ac <z_impl_k_mutex_lock+0xe8>)
   1d2e2:	b16b      	cbz	r3, 1d300 <z_impl_k_mutex_lock+0x3c>
   1d2e4:	6880      	ldr	r0, [r0, #8]
   1d2e6:	6891      	ldr	r1, [r2, #8]
   1d2e8:	4288      	cmp	r0, r1
   1d2ea:	d019      	beq.n	1d320 <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1d2ec:	ea56 0307 	orrs.w	r3, r6, r7
   1d2f0:	d118      	bne.n	1d324 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1d2f2:	f388 8811 	msr	BASEPRI, r8
   1d2f6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   1d2fa:	f06f 000f 	mvn.w	r0, #15
   1d2fe:	e00c      	b.n	1d31a <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   1d300:	6891      	ldr	r1, [r2, #8]
   1d302:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1d306:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   1d308:	3301      	adds	r3, #1
   1d30a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1d30c:	6893      	ldr	r3, [r2, #8]
   1d30e:	60a3      	str	r3, [r4, #8]
   1d310:	f388 8811 	msr	BASEPRI, r8
   1d314:	f3bf 8f6f 	isb	sy
		return 0;
   1d318:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   1d31a:	b002      	add	sp, #8
   1d31c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1d320:	6921      	ldr	r1, [r4, #16]
   1d322:	e7f0      	b.n	1d306 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1d324:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1d328:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1d32c:	4299      	cmp	r1, r3
   1d32e:	bfa8      	it	ge
   1d330:	4619      	movge	r1, r3
   1d332:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1d336:	428b      	cmp	r3, r1
   1d338:	dd2c      	ble.n	1d394 <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
   1d33a:	f000 faf1 	bl	1d920 <z_set_prio>
   1d33e:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1d340:	e9cd 6700 	strd	r6, r7, [sp]
   1d344:	481a      	ldr	r0, [pc, #104]	; (1d3b0 <z_impl_k_mutex_lock+0xec>)
   1d346:	4622      	mov	r2, r4
   1d348:	4641      	mov	r1, r8
   1d34a:	f000 f977 	bl	1d63c <z_pend_curr>
	if (got_mutex == 0) {
   1d34e:	2800      	cmp	r0, #0
   1d350:	d0e3      	beq.n	1d31a <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   1d352:	f04f 0320 	mov.w	r3, #32
   1d356:	f3ef 8611 	mrs	r6, BASEPRI
   1d35a:	f383 8811 	msr	BASEPRI, r3
   1d35e:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1d362:	6823      	ldr	r3, [r4, #0]
   1d364:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d366:	42a3      	cmp	r3, r4
   1d368:	d007      	beq.n	1d37a <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1d36a:	b133      	cbz	r3, 1d37a <z_impl_k_mutex_lock+0xb6>
   1d36c:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1d370:	4299      	cmp	r1, r3
   1d372:	bfa8      	it	ge
   1d374:	4619      	movge	r1, r3
   1d376:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1d37a:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   1d37c:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1d380:	4299      	cmp	r1, r3
   1d382:	d109      	bne.n	1d398 <z_impl_k_mutex_lock+0xd4>
	if (resched) {
   1d384:	b16d      	cbz	r5, 1d3a2 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   1d386:	480a      	ldr	r0, [pc, #40]	; (1d3b0 <z_impl_k_mutex_lock+0xec>)
   1d388:	4631      	mov	r1, r6
   1d38a:	f000 f8d5 	bl	1d538 <z_reschedule>
	return -EAGAIN;
   1d38e:	f06f 000a 	mvn.w	r0, #10
   1d392:	e7c2      	b.n	1d31a <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   1d394:	2500      	movs	r5, #0
   1d396:	e7d3      	b.n	1d340 <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
   1d398:	f000 fac2 	bl	1d920 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1d39c:	2800      	cmp	r0, #0
   1d39e:	d1f2      	bne.n	1d386 <z_impl_k_mutex_lock+0xc2>
   1d3a0:	e7f0      	b.n	1d384 <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
   1d3a2:	f386 8811 	msr	BASEPRI, r6
   1d3a6:	f3bf 8f6f 	isb	sy
   1d3aa:	e7f0      	b.n	1d38e <z_impl_k_mutex_lock+0xca>
   1d3ac:	20002e0c 	.word	0x20002e0c
   1d3b0:	200036e0 	.word	0x200036e0

0001d3b4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1d3b4:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
   1d3b6:	6883      	ldr	r3, [r0, #8]
{
   1d3b8:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1d3ba:	2b00      	cmp	r3, #0
   1d3bc:	d036      	beq.n	1d42c <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1d3be:	4a1e      	ldr	r2, [pc, #120]	; (1d438 <z_impl_k_mutex_unlock+0x84>)
   1d3c0:	6892      	ldr	r2, [r2, #8]
   1d3c2:	4293      	cmp	r3, r2
   1d3c4:	d135      	bne.n	1d432 <z_impl_k_mutex_unlock+0x7e>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   1d3c6:	7bda      	ldrb	r2, [r3, #15]
   1d3c8:	3a01      	subs	r2, #1
   1d3ca:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   1d3cc:	68c3      	ldr	r3, [r0, #12]
   1d3ce:	2b01      	cmp	r3, #1
   1d3d0:	d005      	beq.n	1d3de <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1d3d2:	3b01      	subs	r3, #1
   1d3d4:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   1d3d6:	f000 f9b1 	bl	1d73c <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   1d3da:	2000      	movs	r0, #0
}
   1d3dc:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1d3de:	f04f 0320 	mov.w	r3, #32
   1d3e2:	f3ef 8511 	mrs	r5, BASEPRI
   1d3e6:	f383 8811 	msr	BASEPRI, r3
   1d3ea:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1d3ee:	6901      	ldr	r1, [r0, #16]
   1d3f0:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   1d3f2:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1d3f6:	4299      	cmp	r1, r3
   1d3f8:	d001      	beq.n	1d3fe <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   1d3fa:	f000 fa91 	bl	1d920 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1d3fe:	4620      	mov	r0, r4
   1d400:	f006 f8ea 	bl	235d8 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1d404:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1d406:	b158      	cbz	r0, 1d420 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
   1d408:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1d40c:	6122      	str	r2, [r4, #16]
   1d40e:	2200      	movs	r2, #0
   1d410:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   1d412:	f006 f89a 	bl	2354a <z_ready_thread>
		z_reschedule(&lock, key);
   1d416:	4809      	ldr	r0, [pc, #36]	; (1d43c <z_impl_k_mutex_unlock+0x88>)
   1d418:	4629      	mov	r1, r5
   1d41a:	f000 f88d 	bl	1d538 <z_reschedule>
   1d41e:	e7da      	b.n	1d3d6 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1d420:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1d422:	f385 8811 	msr	BASEPRI, r5
   1d426:	f3bf 8f6f 	isb	sy
   1d42a:	e7d4      	b.n	1d3d6 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1d42c:	f06f 0015 	mvn.w	r0, #21
   1d430:	e7d4      	b.n	1d3dc <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   1d432:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d436:	e7d1      	b.n	1d3dc <z_impl_k_mutex_unlock+0x28>
   1d438:	20002e0c 	.word	0x20002e0c
   1d43c:	200036e0 	.word	0x200036e0

0001d440 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1d440:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d442:	4616      	mov	r6, r2
   1d444:	461f      	mov	r7, r3
	__asm__ volatile(
   1d446:	f04f 0320 	mov.w	r3, #32
   1d44a:	f3ef 8511 	mrs	r5, BASEPRI
   1d44e:	f383 8811 	msr	BASEPRI, r3
   1d452:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
   1d456:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1d458:	b19c      	cbz	r4, 1d482 <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1d45a:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1d45c:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1d45e:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1d462:	4294      	cmp	r4, r2
	list->head = node;
   1d464:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1d466:	bf08      	it	eq
   1d468:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1d46a:	2101      	movs	r1, #1
   1d46c:	4620      	mov	r0, r4
   1d46e:	f005 ff77 	bl	23360 <z_queue_node_peek>
   1d472:	4604      	mov	r4, r0
	__asm__ volatile(
   1d474:	f385 8811 	msr	BASEPRI, r5
   1d478:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1d47c:	4620      	mov	r0, r4
   1d47e:	b003      	add	sp, #12
   1d480:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1d482:	ea56 0307 	orrs.w	r3, r6, r7
   1d486:	d0f5      	beq.n	1d474 <z_impl_k_queue_get+0x34>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1d488:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1d48c:	e9cd 6700 	strd	r6, r7, [sp]
   1d490:	4629      	mov	r1, r5
   1d492:	4610      	mov	r0, r2
   1d494:	f000 f8d2 	bl	1d63c <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1d498:	2800      	cmp	r0, #0
   1d49a:	d1ef      	bne.n	1d47c <z_impl_k_queue_get+0x3c>
   1d49c:	4b01      	ldr	r3, [pc, #4]	; (1d4a4 <z_impl_k_queue_get+0x64>)
   1d49e:	689b      	ldr	r3, [r3, #8]
   1d4a0:	695c      	ldr	r4, [r3, #20]
   1d4a2:	e7eb      	b.n	1d47c <z_impl_k_queue_get+0x3c>
   1d4a4:	20002e0c 	.word	0x20002e0c

0001d4a8 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   1d4a8:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1d4aa:	4c08      	ldr	r4, [pc, #32]	; (1d4cc <z_reset_time_slice+0x24>)
   1d4ac:	6823      	ldr	r3, [r4, #0]
   1d4ae:	b15b      	cbz	r3, 1d4c8 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   1d4b0:	f7e7 ffaa 	bl	5408 <sys_clock_elapsed>
   1d4b4:	4603      	mov	r3, r0
   1d4b6:	6820      	ldr	r0, [r4, #0]
   1d4b8:	4a05      	ldr	r2, [pc, #20]	; (1d4d0 <z_reset_time_slice+0x28>)
   1d4ba:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   1d4bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   1d4c0:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   1d4c2:	2100      	movs	r1, #0
   1d4c4:	f006 b9d5 	b.w	23872 <z_set_timeout_expiry>
}
   1d4c8:	bd10      	pop	{r4, pc}
   1d4ca:	bf00      	nop
   1d4cc:	20002e44 	.word	0x20002e44
   1d4d0:	20002e0c 	.word	0x20002e0c

0001d4d4 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   1d4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d4d6:	4604      	mov	r4, r0
   1d4d8:	460d      	mov	r5, r1
	__asm__ volatile(
   1d4da:	f04f 0320 	mov.w	r3, #32
   1d4de:	f3ef 8611 	mrs	r6, BASEPRI
   1d4e2:	f383 8811 	msr	BASEPRI, r3
   1d4e6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1d4ea:	4b10      	ldr	r3, [pc, #64]	; (1d52c <k_sched_time_slice_set+0x58>)
   1d4ec:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   1d4ee:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1d4f2:	f240 30e7 	movw	r0, #999	; 0x3e7
   1d4f6:	2100      	movs	r1, #0
   1d4f8:	611a      	str	r2, [r3, #16]
   1d4fa:	fbe7 0104 	umlal	r0, r1, r7, r4
   1d4fe:	2300      	movs	r3, #0
   1d500:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1d504:	f7e3 fa9a 	bl	a3c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   1d508:	2c00      	cmp	r4, #0
   1d50a:	4b09      	ldr	r3, [pc, #36]	; (1d530 <k_sched_time_slice_set+0x5c>)
   1d50c:	dc09      	bgt.n	1d522 <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   1d50e:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   1d510:	4b08      	ldr	r3, [pc, #32]	; (1d534 <k_sched_time_slice_set+0x60>)
   1d512:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   1d514:	f7ff ffc8 	bl	1d4a8 <z_reset_time_slice>
	__asm__ volatile(
   1d518:	f386 8811 	msr	BASEPRI, r6
   1d51c:	f3bf 8f6f 	isb	sy
	}
}
   1d520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   1d522:	2802      	cmp	r0, #2
   1d524:	bfb8      	it	lt
   1d526:	2002      	movlt	r0, #2
   1d528:	e7f1      	b.n	1d50e <k_sched_time_slice_set+0x3a>
   1d52a:	bf00      	nop
   1d52c:	20002e0c 	.word	0x20002e0c
   1d530:	20002e44 	.word	0x20002e44
   1d534:	20002e40 	.word	0x20002e40

0001d538 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1d538:	b949      	cbnz	r1, 1d54e <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1d53a:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   1d53e:	b930      	cbnz	r0, 1d54e <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   1d540:	4b05      	ldr	r3, [pc, #20]	; (1d558 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   1d542:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1d544:	689b      	ldr	r3, [r3, #8]
   1d546:	429a      	cmp	r2, r3
   1d548:	d001      	beq.n	1d54e <z_reschedule+0x16>
	ret = arch_swap(key);
   1d54a:	f7e8 b9dd 	b.w	5908 <arch_swap>
   1d54e:	f381 8811 	msr	BASEPRI, r1
   1d552:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   1d556:	4770      	bx	lr
   1d558:	20002e0c 	.word	0x20002e0c

0001d55c <k_sched_lock>:
	__asm__ volatile(
   1d55c:	f04f 0320 	mov.w	r3, #32
   1d560:	f3ef 8111 	mrs	r1, BASEPRI
   1d564:	f383 8811 	msr	BASEPRI, r3
   1d568:	f3bf 8f6f 	isb	sy
   1d56c:	4b04      	ldr	r3, [pc, #16]	; (1d580 <k_sched_lock+0x24>)
   1d56e:	689a      	ldr	r2, [r3, #8]
   1d570:	7bd3      	ldrb	r3, [r2, #15]
   1d572:	3b01      	subs	r3, #1
   1d574:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1d576:	f381 8811 	msr	BASEPRI, r1
   1d57a:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   1d57e:	4770      	bx	lr
   1d580:	20002e0c 	.word	0x20002e0c

0001d584 <update_cache>:
{
   1d584:	b538      	push	{r3, r4, r5, lr}
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1d586:	4c0d      	ldr	r4, [pc, #52]	; (1d5bc <update_cache+0x38>)
{
   1d588:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1d58a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1d58e:	f005 ffa5 	bl	234dc <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1d592:	4605      	mov	r5, r0
   1d594:	b900      	cbnz	r0, 1d598 <update_cache+0x14>
   1d596:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   1d598:	68a3      	ldr	r3, [r4, #8]
   1d59a:	b94a      	cbnz	r2, 1d5b0 <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
   1d59c:	7b5a      	ldrb	r2, [r3, #13]
   1d59e:	06d2      	lsls	r2, r2, #27
   1d5a0:	d106      	bne.n	1d5b0 <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1d5a2:	69aa      	ldr	r2, [r5, #24]
   1d5a4:	b922      	cbnz	r2, 1d5b0 <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(thread)) {
   1d5a6:	89da      	ldrh	r2, [r3, #14]
   1d5a8:	2a7f      	cmp	r2, #127	; 0x7f
   1d5aa:	d901      	bls.n	1d5b0 <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
   1d5ac:	6263      	str	r3, [r4, #36]	; 0x24
}
   1d5ae:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   1d5b0:	429d      	cmp	r5, r3
   1d5b2:	d001      	beq.n	1d5b8 <update_cache+0x34>
			z_reset_time_slice();
   1d5b4:	f7ff ff78 	bl	1d4a8 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1d5b8:	6265      	str	r5, [r4, #36]	; 0x24
}
   1d5ba:	e7f8      	b.n	1d5ae <update_cache+0x2a>
   1d5bc:	20002e0c 	.word	0x20002e0c

0001d5c0 <unready_thread>:
{
   1d5c0:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1d5c2:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1d5c6:	7b43      	ldrb	r3, [r0, #13]
   1d5c8:	2a00      	cmp	r2, #0
{
   1d5ca:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1d5cc:	da04      	bge.n	1d5d8 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1d5ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1d5d2:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   1d5d4:	f005 ff2d 	bl	23432 <sys_dlist_remove>
	update_cache(thread == _current);
   1d5d8:	4b04      	ldr	r3, [pc, #16]	; (1d5ec <unready_thread+0x2c>)
   1d5da:	6898      	ldr	r0, [r3, #8]
   1d5dc:	1a43      	subs	r3, r0, r1
   1d5de:	4258      	negs	r0, r3
   1d5e0:	4158      	adcs	r0, r3
}
   1d5e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1d5e6:	f7ff bfcd 	b.w	1d584 <update_cache>
   1d5ea:	bf00      	nop
   1d5ec:	20002e0c 	.word	0x20002e0c

0001d5f0 <pend>:
{
   1d5f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d5f4:	4606      	mov	r6, r0
   1d5f6:	4614      	mov	r4, r2
   1d5f8:	461d      	mov	r5, r3
	__asm__ volatile(
   1d5fa:	f04f 0320 	mov.w	r3, #32
   1d5fe:	f3ef 8711 	mrs	r7, BASEPRI
   1d602:	f383 8811 	msr	BASEPRI, r3
   1d606:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   1d60a:	f005 ff71 	bl	234f0 <add_to_waitq_locked>
	__asm__ volatile(
   1d60e:	f387 8811 	msr	BASEPRI, r7
   1d612:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1d616:	1c6b      	adds	r3, r5, #1
   1d618:	bf08      	it	eq
   1d61a:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
   1d61e:	d008      	beq.n	1d632 <pend+0x42>

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1d620:	4622      	mov	r2, r4
   1d622:	462b      	mov	r3, r5
   1d624:	f106 0018 	add.w	r0, r6, #24
   1d628:	4903      	ldr	r1, [pc, #12]	; (1d638 <pend+0x48>)
}
   1d62a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1d62e:	f000 bdd7 	b.w	1e1e0 <z_add_timeout>
   1d632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d636:	bf00      	nop
   1d638:	0002356b 	.word	0x0002356b

0001d63c <z_pend_curr>:
{
   1d63c:	b510      	push	{r4, lr}
	pending_current = _current;
   1d63e:	4b07      	ldr	r3, [pc, #28]	; (1d65c <z_pend_curr+0x20>)
   1d640:	6898      	ldr	r0, [r3, #8]
   1d642:	4b07      	ldr	r3, [pc, #28]	; (1d660 <z_pend_curr+0x24>)
{
   1d644:	460c      	mov	r4, r1
	pending_current = _current;
   1d646:	6018      	str	r0, [r3, #0]
{
   1d648:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   1d64a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1d64e:	f7ff ffcf 	bl	1d5f0 <pend>
   1d652:	4620      	mov	r0, r4
}
   1d654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d658:	f7e8 b956 	b.w	5908 <arch_swap>
   1d65c:	20002e0c 	.word	0x20002e0c
   1d660:	20002e3c 	.word	0x20002e3c

0001d664 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
   1d664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d668:	4605      	mov	r5, r0
   1d66a:	460f      	mov	r7, r1
		return 0;
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);

	expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1d66c:	f006 f91b 	bl	238a6 <sys_clock_tick_get_32>
   1d670:	4604      	mov	r4, r0
	__asm__ volatile(
   1d672:	f04f 0320 	mov.w	r3, #32
   1d676:	f3ef 8811 	mrs	r8, BASEPRI
   1d67a:	f383 8811 	msr	BASEPRI, r3
   1d67e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   1d682:	4e12      	ldr	r6, [pc, #72]	; (1d6cc <z_tick_sleep.part.0+0x68>)
   1d684:	4b12      	ldr	r3, [pc, #72]	; (1d6d0 <z_tick_sleep.part.0+0x6c>)
   1d686:	68b0      	ldr	r0, [r6, #8]
   1d688:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   1d68a:	f7ff ff99 	bl	1d5c0 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1d68e:	68b0      	ldr	r0, [r6, #8]
   1d690:	4910      	ldr	r1, [pc, #64]	; (1d6d4 <z_tick_sleep.part.0+0x70>)
   1d692:	462a      	mov	r2, r5
   1d694:	463b      	mov	r3, r7
   1d696:	3018      	adds	r0, #24
   1d698:	f000 fda2 	bl	1e1e0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1d69c:	68b2      	ldr	r2, [r6, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1d69e:	7b53      	ldrb	r3, [r2, #13]
   1d6a0:	f043 0310 	orr.w	r3, r3, #16
   1d6a4:	7353      	strb	r3, [r2, #13]
   1d6a6:	4640      	mov	r0, r8
   1d6a8:	f7e8 f92e 	bl	5908 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1d6ac:	f006 f8fb 	bl	238a6 <sys_clock_tick_get_32>
	expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1d6b0:	442c      	add	r4, r5
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1d6b2:	1a24      	subs	r4, r4, r0
   1d6b4:	f04f 0500 	mov.w	r5, #0
   1d6b8:	f165 0500 	sbc.w	r5, r5, #0
   1d6bc:	2c00      	cmp	r4, #0
   1d6be:	f175 0300 	sbcs.w	r3, r5, #0
   1d6c2:	bfb8      	it	lt
   1d6c4:	2400      	movlt	r4, #0
		return ticks;
	}
#endif

	return 0;
}
   1d6c6:	4620      	mov	r0, r4
   1d6c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d6cc:	20002e0c 	.word	0x20002e0c
   1d6d0:	20002e3c 	.word	0x20002e3c
   1d6d4:	0002356b 	.word	0x0002356b

0001d6d8 <z_impl_k_thread_suspend>:
{
   1d6d8:	b570      	push	{r4, r5, r6, lr}
   1d6da:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1d6dc:	3018      	adds	r0, #24
   1d6de:	f006 f8a2 	bl	23826 <z_abort_timeout>
   1d6e2:	f04f 0320 	mov.w	r3, #32
   1d6e6:	f3ef 8611 	mrs	r6, BASEPRI
   1d6ea:	f383 8811 	msr	BASEPRI, r3
   1d6ee:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1d6f2:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1d6f6:	7b63      	ldrb	r3, [r4, #13]
   1d6f8:	2a00      	cmp	r2, #0
   1d6fa:	da05      	bge.n	1d708 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1d6fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1d700:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1d702:	4620      	mov	r0, r4
   1d704:	f005 fe95 	bl	23432 <sys_dlist_remove>
		update_cache(thread == _current);
   1d708:	4d0b      	ldr	r5, [pc, #44]	; (1d738 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1d70a:	7b63      	ldrb	r3, [r4, #13]
   1d70c:	68a8      	ldr	r0, [r5, #8]
   1d70e:	f043 0310 	orr.w	r3, r3, #16
   1d712:	7363      	strb	r3, [r4, #13]
   1d714:	1b03      	subs	r3, r0, r4
   1d716:	4258      	negs	r0, r3
   1d718:	4158      	adcs	r0, r3
   1d71a:	f7ff ff33 	bl	1d584 <update_cache>
	__asm__ volatile(
   1d71e:	f386 8811 	msr	BASEPRI, r6
   1d722:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1d726:	68ab      	ldr	r3, [r5, #8]
   1d728:	42a3      	cmp	r3, r4
   1d72a:	d103      	bne.n	1d734 <z_impl_k_thread_suspend+0x5c>
}
   1d72c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1d730:	f005 beca 	b.w	234c8 <z_reschedule_unlocked>
}
   1d734:	bd70      	pop	{r4, r5, r6, pc}
   1d736:	bf00      	nop
   1d738:	20002e0c 	.word	0x20002e0c

0001d73c <k_sched_unlock>:
{
   1d73c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1d73e:	f04f 0320 	mov.w	r3, #32
   1d742:	f3ef 8411 	mrs	r4, BASEPRI
   1d746:	f383 8811 	msr	BASEPRI, r3
   1d74a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1d74e:	4b08      	ldr	r3, [pc, #32]	; (1d770 <k_sched_unlock+0x34>)
   1d750:	689a      	ldr	r2, [r3, #8]
   1d752:	7bd3      	ldrb	r3, [r2, #15]
   1d754:	3301      	adds	r3, #1
   1d756:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1d758:	2000      	movs	r0, #0
   1d75a:	f7ff ff13 	bl	1d584 <update_cache>
	__asm__ volatile(
   1d75e:	f384 8811 	msr	BASEPRI, r4
   1d762:	f3bf 8f6f 	isb	sy
}
   1d766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1d76a:	f005 bead 	b.w	234c8 <z_reschedule_unlocked>
   1d76e:	bf00      	nop
   1d770:	20002e0c 	.word	0x20002e0c

0001d774 <move_thread_to_end_of_prio_q>:
{
   1d774:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1d776:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1d77a:	7b43      	ldrb	r3, [r0, #13]
   1d77c:	2a00      	cmp	r2, #0
{
   1d77e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1d780:	da04      	bge.n	1d78c <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1d782:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1d786:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1d788:	f005 fe53 	bl	23432 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1d78c:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   1d78e:	4a17      	ldr	r2, [pc, #92]	; (1d7ec <move_thread_to_end_of_prio_q+0x78>)
   1d790:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1d794:	4610      	mov	r0, r2
   1d796:	734b      	strb	r3, [r1, #13]
   1d798:	f850 3f28 	ldr.w	r3, [r0, #40]!
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1d79c:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d79e:	4283      	cmp	r3, r0
   1d7a0:	bf08      	it	eq
   1d7a2:	2300      	moveq	r3, #0
   1d7a4:	2b00      	cmp	r3, #0
   1d7a6:	bf38      	it	cc
   1d7a8:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1d7aa:	b1cb      	cbz	r3, 1d7e0 <move_thread_to_end_of_prio_q+0x6c>
	int32_t b1 = thread_1->base.prio;
   1d7ac:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   1d7b0:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
   1d7b4:	42a6      	cmp	r6, r4
   1d7b6:	d00f      	beq.n	1d7d8 <move_thread_to_end_of_prio_q+0x64>
		return b2 - b1;
   1d7b8:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1d7ba:	2c00      	cmp	r4, #0
   1d7bc:	dd0c      	ble.n	1d7d8 <move_thread_to_end_of_prio_q+0x64>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   1d7be:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   1d7c0:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   1d7c4:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1d7c6:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   1d7c8:	6890      	ldr	r0, [r2, #8]
   1d7ca:	1a43      	subs	r3, r0, r1
   1d7cc:	4258      	negs	r0, r3
}
   1d7ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1d7d2:	4158      	adcs	r0, r3
   1d7d4:	f7ff bed6 	b.w	1d584 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1d7d8:	42ab      	cmp	r3, r5
   1d7da:	d001      	beq.n	1d7e0 <move_thread_to_end_of_prio_q+0x6c>
   1d7dc:	681b      	ldr	r3, [r3, #0]
   1d7de:	e7e4      	b.n	1d7aa <move_thread_to_end_of_prio_q+0x36>
	node->prev = tail;
   1d7e0:	e9c1 0500 	strd	r0, r5, [r1]
	tail->next = node;
   1d7e4:	6029      	str	r1, [r5, #0]
	list->tail = node;
   1d7e6:	62d1      	str	r1, [r2, #44]	; 0x2c
}
   1d7e8:	e7ee      	b.n	1d7c8 <move_thread_to_end_of_prio_q+0x54>
   1d7ea:	bf00      	nop
   1d7ec:	20002e0c 	.word	0x20002e0c

0001d7f0 <z_time_slice>:
{
   1d7f0:	b570      	push	{r4, r5, r6, lr}
   1d7f2:	4601      	mov	r1, r0
	__asm__ volatile(
   1d7f4:	f04f 0320 	mov.w	r3, #32
   1d7f8:	f3ef 8411 	mrs	r4, BASEPRI
   1d7fc:	f383 8811 	msr	BASEPRI, r3
   1d800:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1d804:	4b16      	ldr	r3, [pc, #88]	; (1d860 <z_time_slice+0x70>)
   1d806:	4a17      	ldr	r2, [pc, #92]	; (1d864 <z_time_slice+0x74>)
   1d808:	6898      	ldr	r0, [r3, #8]
   1d80a:	6815      	ldr	r5, [r2, #0]
   1d80c:	42a8      	cmp	r0, r5
   1d80e:	461d      	mov	r5, r3
   1d810:	d106      	bne.n	1d820 <z_time_slice+0x30>
			z_reset_time_slice();
   1d812:	f7ff fe49 	bl	1d4a8 <z_reset_time_slice>
	__asm__ volatile(
   1d816:	f384 8811 	msr	BASEPRI, r4
   1d81a:	f3bf 8f6f 	isb	sy
}
   1d81e:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   1d820:	2600      	movs	r6, #0
   1d822:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1d824:	4a10      	ldr	r2, [pc, #64]	; (1d868 <z_time_slice+0x78>)
   1d826:	6812      	ldr	r2, [r2, #0]
   1d828:	b1ba      	cbz	r2, 1d85a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1d82a:	89c2      	ldrh	r2, [r0, #14]
   1d82c:	2a7f      	cmp	r2, #127	; 0x7f
   1d82e:	d814      	bhi.n	1d85a <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   1d830:	7b42      	ldrb	r2, [r0, #13]
   1d832:	06d2      	lsls	r2, r2, #27
   1d834:	d111      	bne.n	1d85a <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1d836:	4a0d      	ldr	r2, [pc, #52]	; (1d86c <z_time_slice+0x7c>)
   1d838:	f990 600e 	ldrsb.w	r6, [r0, #14]
   1d83c:	6812      	ldr	r2, [r2, #0]
   1d83e:	4296      	cmp	r6, r2
   1d840:	db0b      	blt.n	1d85a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1d842:	4a0b      	ldr	r2, [pc, #44]	; (1d870 <z_time_slice+0x80>)
   1d844:	4290      	cmp	r0, r2
   1d846:	d008      	beq.n	1d85a <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   1d848:	691a      	ldr	r2, [r3, #16]
   1d84a:	428a      	cmp	r2, r1
   1d84c:	dc02      	bgt.n	1d854 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
   1d84e:	f7ff ff91 	bl	1d774 <move_thread_to_end_of_prio_q>
   1d852:	e7de      	b.n	1d812 <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
   1d854:	1a52      	subs	r2, r2, r1
   1d856:	611a      	str	r2, [r3, #16]
   1d858:	e7dd      	b.n	1d816 <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
   1d85a:	2300      	movs	r3, #0
   1d85c:	612b      	str	r3, [r5, #16]
   1d85e:	e7da      	b.n	1d816 <z_time_slice+0x26>
   1d860:	20002e0c 	.word	0x20002e0c
   1d864:	20002e3c 	.word	0x20002e3c
   1d868:	20002e44 	.word	0x20002e44
   1d86c:	20002e40 	.word	0x20002e40
   1d870:	200014c0 	.word	0x200014c0

0001d874 <ready_thread>:
{
   1d874:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1d876:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1d87a:	7b42      	ldrb	r2, [r0, #13]
   1d87c:	2b00      	cmp	r3, #0
   1d87e:	db2d      	blt.n	1d8dc <ready_thread+0x68>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1d880:	06d3      	lsls	r3, r2, #27
   1d882:	d12b      	bne.n	1d8dc <ready_thread+0x68>
	return !sys_dnode_is_linked(&to->node);
   1d884:	6983      	ldr	r3, [r0, #24]
   1d886:	bb4b      	cbnz	r3, 1d8dc <ready_thread+0x68>
	return list->head == list;
   1d888:	4915      	ldr	r1, [pc, #84]	; (1d8e0 <ready_thread+0x6c>)
	thread->base.thread_state |= _THREAD_QUEUED;
   1d88a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1d88e:	7342      	strb	r2, [r0, #13]
   1d890:	460a      	mov	r2, r1
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1d892:	6acd      	ldr	r5, [r1, #44]	; 0x2c
	return list->head == list;
   1d894:	f852 4f28 	ldr.w	r4, [r2, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d898:	4294      	cmp	r4, r2
   1d89a:	bf18      	it	ne
   1d89c:	4623      	movne	r3, r4
   1d89e:	2b00      	cmp	r3, #0
   1d8a0:	bf38      	it	cc
   1d8a2:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1d8a4:	b1ab      	cbz	r3, 1d8d2 <ready_thread+0x5e>
	int32_t b1 = thread_1->base.prio;
   1d8a6:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1d8aa:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
   1d8ae:	42a6      	cmp	r6, r4
   1d8b0:	d00b      	beq.n	1d8ca <ready_thread+0x56>
		return b2 - b1;
   1d8b2:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1d8b4:	2c00      	cmp	r4, #0
   1d8b6:	dd08      	ble.n	1d8ca <ready_thread+0x56>
	sys_dnode_t *const prev = successor->prev;
   1d8b8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1d8ba:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   1d8be:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1d8c0:	6058      	str	r0, [r3, #4]
}
   1d8c2:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   1d8c4:	2000      	movs	r0, #0
   1d8c6:	f7ff be5d 	b.w	1d584 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1d8ca:	42ab      	cmp	r3, r5
   1d8cc:	d001      	beq.n	1d8d2 <ready_thread+0x5e>
   1d8ce:	681b      	ldr	r3, [r3, #0]
   1d8d0:	e7e8      	b.n	1d8a4 <ready_thread+0x30>
	node->prev = tail;
   1d8d2:	e9c0 2500 	strd	r2, r5, [r0]
	tail->next = node;
   1d8d6:	6028      	str	r0, [r5, #0]
	list->tail = node;
   1d8d8:	62c8      	str	r0, [r1, #44]	; 0x2c
}
   1d8da:	e7f2      	b.n	1d8c2 <ready_thread+0x4e>
}
   1d8dc:	bc70      	pop	{r4, r5, r6}
   1d8de:	4770      	bx	lr
   1d8e0:	20002e0c 	.word	0x20002e0c

0001d8e4 <z_sched_start>:
{
   1d8e4:	b510      	push	{r4, lr}
	__asm__ volatile(
   1d8e6:	f04f 0220 	mov.w	r2, #32
   1d8ea:	f3ef 8411 	mrs	r4, BASEPRI
   1d8ee:	f382 8811 	msr	BASEPRI, r2
   1d8f2:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   1d8f6:	7b42      	ldrb	r2, [r0, #13]
   1d8f8:	0751      	lsls	r1, r2, #29
   1d8fa:	d404      	bmi.n	1d906 <z_sched_start+0x22>
	__asm__ volatile(
   1d8fc:	f384 8811 	msr	BASEPRI, r4
   1d900:	f3bf 8f6f 	isb	sy
}
   1d904:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1d906:	f022 0204 	bic.w	r2, r2, #4
   1d90a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1d90c:	f7ff ffb2 	bl	1d874 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1d910:	4621      	mov	r1, r4
   1d912:	4802      	ldr	r0, [pc, #8]	; (1d91c <z_sched_start+0x38>)
}
   1d914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1d918:	f7ff be0e 	b.w	1d538 <z_reschedule>
   1d91c:	200036e0 	.word	0x200036e0

0001d920 <z_set_prio>:
{
   1d920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d922:	4604      	mov	r4, r0
	__asm__ volatile(
   1d924:	f04f 0320 	mov.w	r3, #32
   1d928:	f3ef 8611 	mrs	r6, BASEPRI
   1d92c:	f383 8811 	msr	BASEPRI, r3
   1d930:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1d934:	7b43      	ldrb	r3, [r0, #13]
   1d936:	06da      	lsls	r2, r3, #27
   1d938:	b249      	sxtb	r1, r1
   1d93a:	d138      	bne.n	1d9ae <z_set_prio+0x8e>
   1d93c:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
   1d93e:	2d00      	cmp	r5, #0
   1d940:	d135      	bne.n	1d9ae <z_set_prio+0x8e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1d942:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1d946:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1d948:	f005 fd73 	bl	23432 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1d94c:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
   1d94e:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   1d950:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1d954:	7343      	strb	r3, [r0, #13]
	return list->head == list;
   1d956:	4817      	ldr	r0, [pc, #92]	; (1d9b4 <z_set_prio+0x94>)
   1d958:	4603      	mov	r3, r0
   1d95a:	f853 7f28 	ldr.w	r7, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d95e:	429f      	cmp	r7, r3
   1d960:	bf18      	it	ne
   1d962:	463d      	movne	r5, r7
   1d964:	2d00      	cmp	r5, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1d966:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   1d968:	461a      	mov	r2, r3
   1d96a:	462b      	mov	r3, r5
   1d96c:	bf38      	it	cc
   1d96e:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1d970:	b1c3      	cbz	r3, 1d9a4 <z_set_prio+0x84>
	int32_t b2 = thread_2->base.prio;
   1d972:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   1d976:	42a9      	cmp	r1, r5
   1d978:	d010      	beq.n	1d99c <z_set_prio+0x7c>
		return b2 - b1;
   1d97a:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   1d97c:	2d00      	cmp	r5, #0
   1d97e:	dd0d      	ble.n	1d99c <z_set_prio+0x7c>
	sys_dnode_t *const prev = successor->prev;
   1d980:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1d982:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1d986:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1d988:	605c      	str	r4, [r3, #4]
			update_cache(1);
   1d98a:	2001      	movs	r0, #1
   1d98c:	f7ff fdfa 	bl	1d584 <update_cache>
   1d990:	2001      	movs	r0, #1
	__asm__ volatile(
   1d992:	f386 8811 	msr	BASEPRI, r6
   1d996:	f3bf 8f6f 	isb	sy
}
   1d99a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1d99c:	42bb      	cmp	r3, r7
   1d99e:	d001      	beq.n	1d9a4 <z_set_prio+0x84>
   1d9a0:	681b      	ldr	r3, [r3, #0]
   1d9a2:	e7e5      	b.n	1d970 <z_set_prio+0x50>
	node->prev = tail;
   1d9a4:	e9c4 2700 	strd	r2, r7, [r4]
	tail->next = node;
   1d9a8:	603c      	str	r4, [r7, #0]
	list->tail = node;
   1d9aa:	62c4      	str	r4, [r0, #44]	; 0x2c
}
   1d9ac:	e7ed      	b.n	1d98a <z_set_prio+0x6a>
			thread->base.prio = prio;
   1d9ae:	73a1      	strb	r1, [r4, #14]
   1d9b0:	2000      	movs	r0, #0
   1d9b2:	e7ee      	b.n	1d992 <z_set_prio+0x72>
   1d9b4:	20002e0c 	.word	0x20002e0c

0001d9b8 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   1d9b8:	4b04      	ldr	r3, [pc, #16]	; (1d9cc <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1d9ba:	2100      	movs	r1, #0
   1d9bc:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   1d9c0:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   1d9c4:	4608      	mov	r0, r1
   1d9c6:	f7ff bd85 	b.w	1d4d4 <k_sched_time_slice_set>
   1d9ca:	bf00      	nop
   1d9cc:	20002e0c 	.word	0x20002e0c

0001d9d0 <z_impl_k_yield>:
	if (!z_is_idle_thread_object(_current)) {
   1d9d0:	4926      	ldr	r1, [pc, #152]	; (1da6c <z_impl_k_yield+0x9c>)
{
   1d9d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   1d9d4:	688a      	ldr	r2, [r1, #8]
   1d9d6:	4b26      	ldr	r3, [pc, #152]	; (1da70 <z_impl_k_yield+0xa0>)
   1d9d8:	429a      	cmp	r2, r3
   1d9da:	d03d      	beq.n	1da58 <z_impl_k_yield+0x88>
	__asm__ volatile(
   1d9dc:	f04f 0320 	mov.w	r3, #32
   1d9e0:	f3ef 8511 	mrs	r5, BASEPRI
   1d9e4:	f383 8811 	msr	BASEPRI, r3
   1d9e8:	f3bf 8f6f 	isb	sy
			dequeue_thread(&_kernel.ready_q.runq,
   1d9ec:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1d9ee:	7b43      	ldrb	r3, [r0, #13]
   1d9f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1d9f4:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1d9f6:	f005 fd1c 	bl	23432 <sys_dlist_remove>
		queue_thread(&_kernel.ready_q.runq, _current);
   1d9fa:	688a      	ldr	r2, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1d9fc:	7b53      	ldrb	r3, [r2, #13]
	return list->head == list;
   1d9fe:	4608      	mov	r0, r1
   1da00:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1da04:	7353      	strb	r3, [r2, #13]
   1da06:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1da0a:	6ace      	ldr	r6, [r1, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1da0c:	4283      	cmp	r3, r0
   1da0e:	bf08      	it	eq
   1da10:	2300      	moveq	r3, #0
   1da12:	2b00      	cmp	r3, #0
   1da14:	bf38      	it	cc
   1da16:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1da18:	b1cb      	cbz	r3, 1da4e <z_impl_k_yield+0x7e>
	int32_t b1 = thread_1->base.prio;
   1da1a:	f992 700e 	ldrsb.w	r7, [r2, #14]
	int32_t b2 = thread_2->base.prio;
   1da1e:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
   1da22:	42a7      	cmp	r7, r4
   1da24:	d00f      	beq.n	1da46 <z_impl_k_yield+0x76>
		return b2 - b1;
   1da26:	1be4      	subs	r4, r4, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   1da28:	2c00      	cmp	r4, #0
   1da2a:	dd0c      	ble.n	1da46 <z_impl_k_yield+0x76>
	sys_dnode_t *const prev = successor->prev;
   1da2c:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1da2e:	e9c2 3100 	strd	r3, r1, [r2]
	prev->next = node;
   1da32:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   1da34:	605a      	str	r2, [r3, #4]
		update_cache(1);
   1da36:	2001      	movs	r0, #1
   1da38:	f7ff fda4 	bl	1d584 <update_cache>
   1da3c:	4628      	mov	r0, r5
}
   1da3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1da42:	f7e7 bf61 	b.w	5908 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1da46:	42b3      	cmp	r3, r6
   1da48:	d001      	beq.n	1da4e <z_impl_k_yield+0x7e>
   1da4a:	681b      	ldr	r3, [r3, #0]
   1da4c:	e7e4      	b.n	1da18 <z_impl_k_yield+0x48>
	node->prev = tail;
   1da4e:	e9c2 0600 	strd	r0, r6, [r2]
	tail->next = node;
   1da52:	6032      	str	r2, [r6, #0]
	list->tail = node;
   1da54:	62ca      	str	r2, [r1, #44]	; 0x2c
}
   1da56:	e7ee      	b.n	1da36 <z_impl_k_yield+0x66>
   1da58:	f04f 0320 	mov.w	r3, #32
   1da5c:	f3ef 8011 	mrs	r0, BASEPRI
   1da60:	f383 8811 	msr	BASEPRI, r3
   1da64:	f3bf 8f6f 	isb	sy
   1da68:	e7e9      	b.n	1da3e <z_impl_k_yield+0x6e>
   1da6a:	bf00      	nop
   1da6c:	20002e0c 	.word	0x20002e0c
   1da70:	200014c0 	.word	0x200014c0

0001da74 <z_impl_k_sleep>:

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1da74:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1da78:	bf08      	it	eq
   1da7a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   1da7e:	b508      	push	{r3, lr}
   1da80:	4602      	mov	r2, r0
   1da82:	460b      	mov	r3, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1da84:	d106      	bne.n	1da94 <z_impl_k_sleep+0x20>
		k_thread_suspend(_current);
   1da86:	4b0b      	ldr	r3, [pc, #44]	; (1dab4 <z_impl_k_sleep+0x40>)
   1da88:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1da8a:	f7ff fe25 	bl	1d6d8 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   1da8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   1da92:	bd08      	pop	{r3, pc}
	if (ticks == 0) {
   1da94:	4313      	orrs	r3, r2
   1da96:	d10a      	bne.n	1daae <z_impl_k_sleep+0x3a>
	z_impl_k_yield();
   1da98:	f7ff ff9a 	bl	1d9d0 <z_impl_k_yield>
		return 0;
   1da9c:	2000      	movs	r0, #0
			return (t * to_hz + off) / from_hz;
   1da9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1daa2:	fb80 2303 	smull	r2, r3, r0, r3
   1daa6:	0bd0      	lsrs	r0, r2, #15
   1daa8:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   1daac:	e7f1      	b.n	1da92 <z_impl_k_sleep+0x1e>
   1daae:	f7ff fdd9 	bl	1d664 <z_tick_sleep.part.0>
   1dab2:	e7f4      	b.n	1da9e <z_impl_k_sleep+0x2a>
   1dab4:	20002e0c 	.word	0x20002e0c

0001dab8 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1dab8:	4b01      	ldr	r3, [pc, #4]	; (1dac0 <z_impl_k_current_get+0x8>)
   1daba:	6898      	ldr	r0, [r3, #8]
   1dabc:	4770      	bx	lr
   1dabe:	bf00      	nop
   1dac0:	20002e0c 	.word	0x20002e0c

0001dac4 <z_impl_k_is_preempt_thread>:
   1dac4:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/k_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   1dac8:	b93b      	cbnz	r3, 1dada <z_impl_k_is_preempt_thread+0x16>
   1daca:	4b05      	ldr	r3, [pc, #20]	; (1dae0 <z_impl_k_is_preempt_thread+0x1c>)
   1dacc:	689b      	ldr	r3, [r3, #8]
   1dace:	89d8      	ldrh	r0, [r3, #14]
   1dad0:	287f      	cmp	r0, #127	; 0x7f
   1dad2:	bf8c      	ite	hi
   1dad4:	2000      	movhi	r0, #0
   1dad6:	2001      	movls	r0, #1
   1dad8:	4770      	bx	lr
   1dada:	2000      	movs	r0, #0
}
   1dadc:	4770      	bx	lr
   1dade:	bf00      	nop
   1dae0:	20002e0c 	.word	0x20002e0c

0001dae4 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   1dae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dae8:	4604      	mov	r4, r0
   1daea:	f04f 0320 	mov.w	r3, #32
   1daee:	f3ef 8611 	mrs	r6, BASEPRI
   1daf2:	f383 8811 	msr	BASEPRI, r3
   1daf6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   1dafa:	7b43      	ldrb	r3, [r0, #13]
   1dafc:	071a      	lsls	r2, r3, #28
   1dafe:	d505      	bpl.n	1db0c <z_thread_abort+0x28>
	__asm__ volatile(
   1db00:	f386 8811 	msr	BASEPRI, r6
   1db04:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   1db08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1db0c:	f023 0220 	bic.w	r2, r3, #32
   1db10:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   1db14:	09d2      	lsrs	r2, r2, #7
   1db16:	d120      	bne.n	1db5a <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1db18:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   1db1a:	68a3      	ldr	r3, [r4, #8]
   1db1c:	b113      	cbz	r3, 1db24 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   1db1e:	4620      	mov	r0, r4
   1db20:	f005 fc8f 	bl	23442 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   1db24:	f104 0018 	add.w	r0, r4, #24
   1db28:	f005 fe7d 	bl	23826 <z_abort_timeout>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1db2c:	f104 0758 	add.w	r7, r4, #88	; 0x58
   1db30:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   1db34:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1db36:	42bd      	cmp	r5, r7
   1db38:	d000      	beq.n	1db3c <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1db3a:	b9b5      	cbnz	r5, 1db6a <z_thread_abort+0x86>
		update_cache(1);
   1db3c:	2001      	movs	r0, #1
   1db3e:	f7ff fd21 	bl	1d584 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   1db42:	4b10      	ldr	r3, [pc, #64]	; (1db84 <z_thread_abort+0xa0>)
   1db44:	689b      	ldr	r3, [r3, #8]
   1db46:	42a3      	cmp	r3, r4
   1db48:	d1da      	bne.n	1db00 <z_thread_abort+0x1c>
   1db4a:	f3ef 8305 	mrs	r3, IPSR
   1db4e:	2b00      	cmp	r3, #0
   1db50:	d1d6      	bne.n	1db00 <z_thread_abort+0x1c>
   1db52:	4630      	mov	r0, r6
   1db54:	f7e7 fed8 	bl	5908 <arch_swap>
	return ret;
   1db58:	e7d2      	b.n	1db00 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1db5a:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   1db5e:	f043 0308 	orr.w	r3, r3, #8
   1db62:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1db64:	f005 fc65 	bl	23432 <sys_dlist_remove>
}
   1db68:	e7d7      	b.n	1db1a <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   1db6a:	4628      	mov	r0, r5
   1db6c:	f005 fc69 	bl	23442 <unpend_thread_no_timeout>
   1db70:	f105 0018 	add.w	r0, r5, #24
   1db74:	f005 fe57 	bl	23826 <z_abort_timeout>
   1db78:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   1db7c:	4628      	mov	r0, r5
   1db7e:	f7ff fe79 	bl	1d874 <ready_thread>
   1db82:	e7d7      	b.n	1db34 <z_thread_abort+0x50>
   1db84:	20002e0c 	.word	0x20002e0c

0001db88 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   1db88:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1db8a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   1db8e:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1db90:	e9cd 6700 	strd	r6, r7, [sp]
   1db94:	f7ff fd52 	bl	1d63c <z_pend_curr>

	if (data != NULL) {
   1db98:	b11c      	cbz	r4, 1dba2 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   1db9a:	4b03      	ldr	r3, [pc, #12]	; (1dba8 <z_sched_wait+0x20>)
   1db9c:	689b      	ldr	r3, [r3, #8]
   1db9e:	695b      	ldr	r3, [r3, #20]
   1dba0:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1dba2:	b002      	add	sp, #8
   1dba4:	bdd0      	pop	{r4, r6, r7, pc}
   1dba6:	bf00      	nop
   1dba8:	20002e0c 	.word	0x20002e0c

0001dbac <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1dbac:	b538      	push	{r3, r4, r5, lr}
   1dbae:	4604      	mov	r4, r0
	__asm__ volatile(
   1dbb0:	f04f 0320 	mov.w	r3, #32
   1dbb4:	f3ef 8511 	mrs	r5, BASEPRI
   1dbb8:	f383 8811 	msr	BASEPRI, r3
   1dbbc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   1dbc0:	f005 fd0a 	bl	235d8 <z_unpend_first_thread>

	if (thread != NULL) {
   1dbc4:	b148      	cbz	r0, 1dbda <z_impl_k_sem_give+0x2e>
   1dbc6:	2200      	movs	r2, #0
   1dbc8:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1dbca:	f005 fcbe 	bl	2354a <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1dbce:	4629      	mov	r1, r5
   1dbd0:	4808      	ldr	r0, [pc, #32]	; (1dbf4 <z_impl_k_sem_give+0x48>)
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   1dbd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1dbd6:	f7ff bcaf 	b.w	1d538 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1dbda:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1dbde:	429a      	cmp	r2, r3
   1dbe0:	bf18      	it	ne
   1dbe2:	3301      	addne	r3, #1
   1dbe4:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1dbe6:	2102      	movs	r1, #2
   1dbe8:	f104 0010 	add.w	r0, r4, #16
   1dbec:	f005 ffdf 	bl	23bae <z_handle_obj_poll_events>
}
   1dbf0:	e7ed      	b.n	1dbce <z_impl_k_sem_give+0x22>
   1dbf2:	bf00      	nop
   1dbf4:	200036e0 	.word	0x200036e0

0001dbf8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1dbf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1dbfa:	4614      	mov	r4, r2
   1dbfc:	461d      	mov	r5, r3
   1dbfe:	f04f 0320 	mov.w	r3, #32
   1dc02:	f3ef 8111 	mrs	r1, BASEPRI
   1dc06:	f383 8811 	msr	BASEPRI, r3
   1dc0a:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   1dc0e:	6883      	ldr	r3, [r0, #8]
   1dc10:	b143      	cbz	r3, 1dc24 <z_impl_k_sem_take+0x2c>
		sem->count--;
   1dc12:	3b01      	subs	r3, #1
   1dc14:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   1dc16:	f381 8811 	msr	BASEPRI, r1
   1dc1a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1dc1e:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   1dc20:	b003      	add	sp, #12
   1dc22:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1dc24:	ea54 0305 	orrs.w	r3, r4, r5
   1dc28:	d106      	bne.n	1dc38 <z_impl_k_sem_take+0x40>
   1dc2a:	f381 8811 	msr	BASEPRI, r1
   1dc2e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1dc32:	f06f 000f 	mvn.w	r0, #15
   1dc36:	e7f3      	b.n	1dc20 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1dc38:	4602      	mov	r2, r0
   1dc3a:	e9cd 4500 	strd	r4, r5, [sp]
   1dc3e:	4802      	ldr	r0, [pc, #8]	; (1dc48 <z_impl_k_sem_take+0x50>)
   1dc40:	f7ff fcfc 	bl	1d63c <z_pend_curr>
	return ret;
   1dc44:	e7ec      	b.n	1dc20 <z_impl_k_sem_take+0x28>
   1dc46:	bf00      	nop
   1dc48:	200036e0 	.word	0x200036e0

0001dc4c <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1dc4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   1dc4e:	4b09      	ldr	r3, [pc, #36]	; (1dc74 <k_sys_work_q_init+0x28>)
   1dc50:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1dc52:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   1dc54:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   1dc56:	9300      	str	r3, [sp, #0]
   1dc58:	4907      	ldr	r1, [pc, #28]	; (1dc78 <k_sys_work_q_init+0x2c>)
   1dc5a:	4808      	ldr	r0, [pc, #32]	; (1dc7c <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   1dc5c:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   1dc60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1dc64:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1dc68:	f000 f9de 	bl	1e028 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1dc6c:	4620      	mov	r0, r4
   1dc6e:	b004      	add	sp, #16
   1dc70:	bd10      	pop	{r4, pc}
   1dc72:	bf00      	nop
   1dc74:	00027bd6 	.word	0x00027bd6
   1dc78:	2000dcd0 	.word	0x2000dcd0
   1dc7c:	200015c0 	.word	0x200015c0

0001dc80 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1dc80:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   1dc84:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1dc86:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1dc88:	2604      	movs	r6, #4
   1dc8a:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   1dc8c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   1dc8e:	7386      	strb	r6, [r0, #14]
	sys_dlist_init(&w->waitq);
   1dc90:	f100 0558 	add.w	r5, r0, #88	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1dc94:	1dd6      	adds	r6, r2, #7
	list->tail = (sys_dnode_t *)list;
   1dc96:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1dc9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   1dc9c:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1dc9e:	f026 0607 	bic.w	r6, r6, #7
	node->prev = NULL;
   1dca2:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   1dca6:	e9c0 161a 	strd	r1, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   1dcaa:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   1dcac:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   1dcae:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1dcb0:	9202      	str	r2, [sp, #8]
   1dcb2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1dcb4:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   1dcb6:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1dcba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1dcbc:	9200      	str	r2, [sp, #0]
   1dcbe:	4642      	mov	r2, r8
{
   1dcc0:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1dcc2:	f7e7 fec7 	bl	5a54 <arch_new_thread>
	if (!_current) {
   1dcc6:	4b05      	ldr	r3, [pc, #20]	; (1dcdc <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
   1dcc8:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   1dcca:	689b      	ldr	r3, [r3, #8]
   1dccc:	b103      	cbz	r3, 1dcd0 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
   1dcce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   1dcd0:	6763      	str	r3, [r4, #116]	; 0x74
}
   1dcd2:	4640      	mov	r0, r8
   1dcd4:	b004      	add	sp, #16
   1dcd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1dcda:	bf00      	nop
   1dcdc:	20002e0c 	.word	0x20002e0c

0001dce0 <z_impl_k_thread_create>:
{
   1dce0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dce2:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1dce4:	2500      	movs	r5, #0
   1dce6:	9505      	str	r5, [sp, #20]
   1dce8:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1dcea:	9504      	str	r5, [sp, #16]
   1dcec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1dcee:	9503      	str	r5, [sp, #12]
   1dcf0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1dcf2:	9502      	str	r5, [sp, #8]
{
   1dcf4:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1dcf8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1dcfa:	9501      	str	r5, [sp, #4]
   1dcfc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1dcfe:	9500      	str	r5, [sp, #0]
{
   1dd00:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1dd02:	f7ff ffbd 	bl	1dc80 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1dd06:	1c7b      	adds	r3, r7, #1
   1dd08:	bf08      	it	eq
   1dd0a:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   1dd0e:	d005      	beq.n	1dd1c <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1dd10:	ea56 0307 	orrs.w	r3, r6, r7
   1dd14:	d105      	bne.n	1dd22 <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   1dd16:	4620      	mov	r0, r4
   1dd18:	f7ff fde4 	bl	1d8e4 <z_sched_start>
}
   1dd1c:	4620      	mov	r0, r4
   1dd1e:	b007      	add	sp, #28
   1dd20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1dd22:	4904      	ldr	r1, [pc, #16]	; (1dd34 <z_impl_k_thread_create+0x54>)
   1dd24:	4632      	mov	r2, r6
   1dd26:	463b      	mov	r3, r7
   1dd28:	f104 0018 	add.w	r0, r4, #24
   1dd2c:	f000 fa58 	bl	1e1e0 <z_add_timeout>
   1dd30:	e7f4      	b.n	1dd1c <z_impl_k_thread_create+0x3c>
   1dd32:	bf00      	nop
   1dd34:	0002356b 	.word	0x0002356b

0001dd38 <z_init_static_threads>:
{
   1dd38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   1dd3c:	4e2a      	ldr	r6, [pc, #168]	; (1dde8 <z_init_static_threads+0xb0>)
   1dd3e:	4d2b      	ldr	r5, [pc, #172]	; (1ddec <z_init_static_threads+0xb4>)
{
   1dd40:	b086      	sub	sp, #24
   1dd42:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
   1dd44:	42b5      	cmp	r5, r6
   1dd46:	f105 0430 	add.w	r4, r5, #48	; 0x30
   1dd4a:	d310      	bcc.n	1dd6e <z_init_static_threads+0x36>
	k_sched_lock();
   1dd4c:	f7ff fc06 	bl	1d55c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1dd50:	4c26      	ldr	r4, [pc, #152]	; (1ddec <z_init_static_threads+0xb4>)
   1dd52:	f8df a09c 	ldr.w	sl, [pc, #156]	; 1ddf0 <z_init_static_threads+0xb8>
   1dd56:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   1dd5a:	f240 36e7 	movw	r6, #999	; 0x3e7
   1dd5e:	2700      	movs	r7, #0
   1dd60:	4544      	cmp	r4, r8
   1dd62:	d321      	bcc.n	1dda8 <z_init_static_threads+0x70>
}
   1dd64:	b006      	add	sp, #24
   1dd66:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   1dd6a:	f7ff bce7 	b.w	1d73c <k_sched_unlock>
		z_setup_new_thread(
   1dd6e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1dd72:	9305      	str	r3, [sp, #20]
   1dd74:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1dd78:	9304      	str	r3, [sp, #16]
   1dd7a:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1dd7e:	9303      	str	r3, [sp, #12]
   1dd80:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1dd84:	9302      	str	r3, [sp, #8]
   1dd86:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1dd8a:	9301      	str	r3, [sp, #4]
   1dd8c:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1dd90:	9300      	str	r3, [sp, #0]
   1dd92:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1dd96:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1dd9a:	f7ff ff71 	bl	1dc80 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1dd9e:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1dda2:	655d      	str	r5, [r3, #84]	; 0x54
   1dda4:	4625      	mov	r5, r4
   1dda6:	e7cd      	b.n	1dd44 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1dda8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ddaa:	1c5a      	adds	r2, r3, #1
   1ddac:	d00d      	beq.n	1ddca <z_init_static_threads+0x92>
					    K_MSEC(thread_data->init_delay));
   1ddae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1ddb2:	4630      	mov	r0, r6
   1ddb4:	4639      	mov	r1, r7
   1ddb6:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1ddba:	42b9      	cmp	r1, r7
   1ddbc:	bf08      	it	eq
   1ddbe:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
   1ddc0:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1ddc2:	d104      	bne.n	1ddce <z_init_static_threads+0x96>
	z_sched_start(thread);
   1ddc4:	4628      	mov	r0, r5
   1ddc6:	f7ff fd8d 	bl	1d8e4 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1ddca:	3430      	adds	r4, #48	; 0x30
   1ddcc:	e7c8      	b.n	1dd60 <z_init_static_threads+0x28>
   1ddce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ddd2:	2300      	movs	r3, #0
   1ddd4:	f7e2 fe32 	bl	a3c <__aeabi_uldivmod>
   1ddd8:	4602      	mov	r2, r0
   1ddda:	460b      	mov	r3, r1
   1dddc:	f105 0018 	add.w	r0, r5, #24
   1dde0:	4651      	mov	r1, sl
   1dde2:	f000 f9fd 	bl	1e1e0 <z_add_timeout>
   1dde6:	e7f0      	b.n	1ddca <z_init_static_threads+0x92>
   1dde8:	2000085c 	.word	0x2000085c
   1ddec:	2000085c 	.word	0x2000085c
   1ddf0:	0002356b 	.word	0x0002356b

0001ddf4 <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
   1ddf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1ddf6:	68c3      	ldr	r3, [r0, #12]
   1ddf8:	079a      	lsls	r2, r3, #30
{
   1ddfa:	4604      	mov	r4, r0
   1ddfc:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1ddfe:	f3c3 0540 	ubfx	r5, r3, #1, #1
   1de02:	d41f      	bmi.n	1de44 <submit_to_queue_locked+0x50>
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   1de04:	075f      	lsls	r7, r3, #29
   1de06:	d41f      	bmi.n	1de48 <submit_to_queue_locked+0x54>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
   1de08:	680a      	ldr	r2, [r1, #0]
   1de0a:	b90a      	cbnz	r2, 1de10 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   1de0c:	6882      	ldr	r2, [r0, #8]
   1de0e:	600a      	str	r2, [r1, #0]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   1de10:	07d8      	lsls	r0, r3, #31
			__ASSERT_NO_MSG(work->queue != NULL);
			*queuep = work->queue;
   1de12:	bf44      	itt	mi
   1de14:	68a3      	ldrmi	r3, [r4, #8]
   1de16:	6033      	strmi	r3, [r6, #0]
			ret = 2;
		}

		int rc = queue_submit_locked(*queuep, work);
   1de18:	6837      	ldr	r7, [r6, #0]
			ret = 2;
   1de1a:	bf4c      	ite	mi
   1de1c:	2502      	movmi	r5, #2
		ret = 1;
   1de1e:	2501      	movpl	r5, #1
	if (queue == NULL) {
   1de20:	b37f      	cbz	r7, 1de82 <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1de22:	4b1b      	ldr	r3, [pc, #108]	; (1de90 <submit_to_queue_locked+0x9c>)
   1de24:	689b      	ldr	r3, [r3, #8]
   1de26:	42bb      	cmp	r3, r7
   1de28:	d111      	bne.n	1de4e <submit_to_queue_locked+0x5a>
   1de2a:	f005 fc2a 	bl	23682 <k_is_in_isr>
   1de2e:	f080 0001 	eor.w	r0, r0, #1
   1de32:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
   1de34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1de38:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1de3a:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1de3e:	d523      	bpl.n	1de88 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   1de40:	b13a      	cbz	r2, 1de52 <submit_to_queue_locked+0x5e>
   1de42:	b940      	cbnz	r0, 1de56 <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   1de44:	f06f 050f 	mvn.w	r5, #15
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
		*queuep = NULL;
   1de48:	2300      	movs	r3, #0
   1de4a:	6033      	str	r3, [r6, #0]
	}

	return ret;
   1de4c:	e013      	b.n	1de76 <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1de4e:	2000      	movs	r0, #0
   1de50:	e7f0      	b.n	1de34 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   1de52:	071b      	lsls	r3, r3, #28
   1de54:	d4f6      	bmi.n	1de44 <submit_to_queue_locked+0x50>
	parent->next = child;
   1de56:	2300      	movs	r3, #0
   1de58:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   1de5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   1de5e:	b963      	cbnz	r3, 1de7a <submit_to_queue_locked+0x86>
	list->head = node;
   1de60:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   1de64:	4638      	mov	r0, r7
   1de66:	f005 fc1d 	bl	236a4 <notify_queue_locked>
	*flagp |= BIT(bit);
   1de6a:	68e3      	ldr	r3, [r4, #12]
   1de6c:	f043 0304 	orr.w	r3, r3, #4
   1de70:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   1de72:	6833      	ldr	r3, [r6, #0]
   1de74:	60a3      	str	r3, [r4, #8]
}
   1de76:	4628      	mov	r0, r5
   1de78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   1de7a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1de7c:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   1de80:	e7f0      	b.n	1de64 <submit_to_queue_locked+0x70>
		return -EINVAL;
   1de82:	f06f 0515 	mvn.w	r5, #21
   1de86:	e7df      	b.n	1de48 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   1de88:	f06f 0512 	mvn.w	r5, #18
   1de8c:	e7dc      	b.n	1de48 <submit_to_queue_locked+0x54>
   1de8e:	bf00      	nop
   1de90:	20002e0c 	.word	0x20002e0c

0001de94 <finalize_cancel_locked>:
	*flagp &= ~BIT(bit);
   1de94:	68c3      	ldr	r3, [r0, #12]
{
   1de96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1de9a:	4c17      	ldr	r4, [pc, #92]	; (1def8 <finalize_cancel_locked+0x64>)
	*flagp &= ~BIT(bit);
   1de9c:	f023 0302 	bic.w	r3, r3, #2
{
   1dea0:	4607      	mov	r7, r0
	*flagp &= ~BIT(bit);
   1dea2:	60c3      	str	r3, [r0, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1dea4:	6820      	ldr	r0, [r4, #0]
   1dea6:	b320      	cbz	r0, 1def2 <finalize_cancel_locked+0x5e>
	return node->next;
   1dea8:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1deaa:	2600      	movs	r6, #0
   1deac:	2d00      	cmp	r5, #0
   1deae:	bf38      	it	cc
   1deb0:	2500      	movcc	r5, #0
	parent->next = child;
   1deb2:	46b0      	mov	r8, r6
		if (wc->work == work) {
   1deb4:	6842      	ldr	r2, [r0, #4]
   1deb6:	42ba      	cmp	r2, r7
   1deb8:	4603      	mov	r3, r0
   1deba:	d10b      	bne.n	1ded4 <finalize_cancel_locked+0x40>
Z_GENLIST_REMOVE(slist, snode)
   1debc:	6803      	ldr	r3, [r0, #0]
   1debe:	b996      	cbnz	r6, 1dee6 <finalize_cancel_locked+0x52>
   1dec0:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   1dec2:	6023      	str	r3, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1dec4:	4290      	cmp	r0, r2
   1dec6:	d100      	bne.n	1deca <finalize_cancel_locked+0x36>
	list->tail = node;
   1dec8:	6063      	str	r3, [r4, #4]
	parent->next = child;
   1deca:	f840 8b08 	str.w	r8, [r0], #8
	z_impl_k_sem_give(sem);
   1dece:	f7ff fe6d 	bl	1dbac <z_impl_k_sem_give>
}
   1ded2:	4633      	mov	r3, r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1ded4:	b16d      	cbz	r5, 1def2 <finalize_cancel_locked+0x5e>
	return node->next;
   1ded6:	682a      	ldr	r2, [r5, #0]
   1ded8:	2a00      	cmp	r2, #0
   1deda:	bf38      	it	cc
   1dedc:	2200      	movcc	r2, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1dede:	4628      	mov	r0, r5
   1dee0:	461e      	mov	r6, r3
   1dee2:	4615      	mov	r5, r2
   1dee4:	e7e6      	b.n	1deb4 <finalize_cancel_locked+0x20>
	parent->next = child;
   1dee6:	6033      	str	r3, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   1dee8:	6863      	ldr	r3, [r4, #4]
   1deea:	4298      	cmp	r0, r3
	list->tail = node;
   1deec:	bf08      	it	eq
   1deee:	6066      	streq	r6, [r4, #4]
}
   1def0:	e7eb      	b.n	1deca <finalize_cancel_locked+0x36>
}
   1def2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1def6:	bf00      	nop
   1def8:	20002e48 	.word	0x20002e48

0001defc <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   1defc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   1df00:	f8df 9120 	ldr.w	r9, [pc, #288]	; 1e024 <work_queue_main+0x128>
{
   1df04:	b087      	sub	sp, #28
   1df06:	4604      	mov	r4, r0
					   K_FOREVER, NULL);
   1df08:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1df0c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   1df10:	f100 0888 	add.w	r8, r0, #136	; 0x88
	__asm__ volatile(
   1df14:	f04f 0320 	mov.w	r3, #32
   1df18:	f3ef 8a11 	mrs	sl, BASEPRI
   1df1c:	f383 8811 	msr	BASEPRI, r3
   1df20:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   1df24:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
	return list->head;
   1df28:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
Z_GENLIST_GET(slist, snode)
   1df2c:	b9c5      	cbnz	r5, 1df60 <work_queue_main+0x64>
	*flagp &= ~BIT(bit);
   1df2e:	f023 0204 	bic.w	r2, r3, #4
		} else if (flag_test_and_clear(&queue->flags,
   1df32:	0759      	lsls	r1, r3, #29
	*flagp &= ~BIT(bit);
   1df34:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
		} else if (flag_test_and_clear(&queue->flags,
   1df38:	d508      	bpl.n	1df4c <work_queue_main+0x50>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   1df3a:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   1df3e:	2200      	movs	r2, #0
   1df40:	2101      	movs	r1, #1
   1df42:	4628      	mov	r0, r5
   1df44:	f005 fb70 	bl	23628 <z_sched_wake>
   1df48:	2800      	cmp	r0, #0
   1df4a:	d1f8      	bne.n	1df3e <work_queue_main+0x42>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   1df4c:	2300      	movs	r3, #0
   1df4e:	e9cd 6700 	strd	r6, r7, [sp]
   1df52:	9302      	str	r3, [sp, #8]
   1df54:	4642      	mov	r2, r8
   1df56:	4651      	mov	r1, sl
   1df58:	4648      	mov	r0, r9
   1df5a:	f7ff fe15 	bl	1db88 <z_sched_wait>
			continue;
   1df5e:	e7d9      	b.n	1df14 <work_queue_main+0x18>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1df60:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   1df64:	6829      	ldr	r1, [r5, #0]
	list->head = node;
   1df66:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1df6a:	4295      	cmp	r5, r2
   1df6c:	d101      	bne.n	1df72 <work_queue_main+0x76>
	list->tail = node;
   1df6e:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   1df72:	f043 0302 	orr.w	r3, r3, #2
   1df76:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   1df7a:	f38a 8811 	msr	BASEPRI, sl
   1df7e:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		if (work != NULL) {
			bool yield;
			k_work_handler_t handler = work->handler;
   1df82:	f8d5 a004 	ldr.w	sl, [r5, #4]
	__asm__ volatile(
   1df86:	f04f 0320 	mov.w	r3, #32
   1df8a:	f3ef 8b11 	mrs	fp, BASEPRI
   1df8e:	f383 8811 	msr	BASEPRI, r3
   1df92:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   1df96:	68eb      	ldr	r3, [r5, #12]
   1df98:	f023 0304 	bic.w	r3, r3, #4
	return (*flagp & BIT(bit)) != 0U;
   1df9c:	f3c3 0140 	ubfx	r1, r3, #1, #1
	*flagp &= ~BIT(bit);
   1dfa0:	60eb      	str	r3, [r5, #12]
	if (ret) {
   1dfa2:	f081 0201 	eor.w	r2, r1, #1
   1dfa6:	b129      	cbz	r1, 1dfb4 <work_queue_main+0xb8>
		finalize_cancel_locked(work);
   1dfa8:	4628      	mov	r0, r5
   1dfaa:	9205      	str	r2, [sp, #20]
   1dfac:	f7ff ff72 	bl	1de94 <finalize_cancel_locked>
   1dfb0:	9a05      	ldr	r2, [sp, #20]
   1dfb2:	e002      	b.n	1dfba <work_queue_main+0xbe>
	*flagp |= BIT(bit);
   1dfb4:	f043 0301 	orr.w	r3, r3, #1
   1dfb8:	60eb      	str	r3, [r5, #12]
	__asm__ volatile(
   1dfba:	f38b 8811 	msr	BASEPRI, fp
   1dfbe:	f3bf 8f6f 	isb	sy

			__ASSERT_NO_MSG(handler != 0);

			if (work_set_running(work, queue)) {
   1dfc2:	b9b2      	cbnz	r2, 1dff2 <work_queue_main+0xf6>
	__asm__ volatile(
   1dfc4:	f04f 0320 	mov.w	r3, #32
   1dfc8:	f3ef 8211 	mrs	r2, BASEPRI
   1dfcc:	f383 8811 	msr	BASEPRI, r3
   1dfd0:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   1dfd4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1dfd8:	f023 0302 	bic.w	r3, r3, #2
   1dfdc:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   1dfe0:	f382 8811 	msr	BASEPRI, r2
   1dfe4:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
   1dfe8:	05db      	lsls	r3, r3, #23
   1dfea:	d493      	bmi.n	1df14 <work_queue_main+0x18>
	z_impl_k_yield();
   1dfec:	f7ff fcf0 	bl	1d9d0 <z_impl_k_yield>
}
   1dff0:	e790      	b.n	1df14 <work_queue_main+0x18>
				handler(work);
   1dff2:	4628      	mov	r0, r5
   1dff4:	47d0      	blx	sl
	__asm__ volatile(
   1dff6:	f04f 0320 	mov.w	r3, #32
   1dffa:	f3ef 8a11 	mrs	sl, BASEPRI
   1dffe:	f383 8811 	msr	BASEPRI, r3
   1e002:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   1e006:	68eb      	ldr	r3, [r5, #12]
   1e008:	f023 0301 	bic.w	r3, r3, #1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1e00c:	079a      	lsls	r2, r3, #30
	*flagp &= ~BIT(bit);
   1e00e:	60eb      	str	r3, [r5, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1e010:	d502      	bpl.n	1e018 <work_queue_main+0x11c>
		finalize_cancel_locked(work);
   1e012:	4628      	mov	r0, r5
   1e014:	f7ff ff3e 	bl	1de94 <finalize_cancel_locked>
	__asm__ volatile(
   1e018:	f38a 8811 	msr	BASEPRI, sl
   1e01c:	f3bf 8f6f 	isb	sy
}
   1e020:	e7d0      	b.n	1dfc4 <work_queue_main+0xc8>
   1e022:	bf00      	nop
   1e024:	200036e0 	.word	0x200036e0

0001e028 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   1e028:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e02a:	b089      	sub	sp, #36	; 0x24
   1e02c:	4604      	mov	r4, r0
	list->head = NULL;
   1e02e:	2000      	movs	r0, #0
	list->tail = NULL;
   1e030:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   1e034:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1e036:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   1e03a:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   1e03e:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1e042:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   1e046:	b31d      	cbz	r5, 1e090 <k_work_queue_start+0x68>
   1e048:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   1e04a:	2800      	cmp	r0, #0
   1e04c:	f240 1001 	movw	r0, #257	; 0x101
   1e050:	bf08      	it	eq
   1e052:	2001      	moveq	r0, #1
	*flagp = flags;
   1e054:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1e058:	2000      	movs	r0, #0
   1e05a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1e05e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1e062:	e9cd 3003 	strd	r3, r0, [sp, #12]
   1e066:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1e06a:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1e06e:	4b09      	ldr	r3, [pc, #36]	; (1e094 <k_work_queue_start+0x6c>)
   1e070:	9400      	str	r4, [sp, #0]
   1e072:	4620      	mov	r0, r4
   1e074:	f7ff fe34 	bl	1dce0 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   1e078:	b125      	cbz	r5, 1e084 <k_work_queue_start+0x5c>
   1e07a:	6829      	ldr	r1, [r5, #0]
   1e07c:	b111      	cbz	r1, 1e084 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   1e07e:	4620      	mov	r0, r4
   1e080:	f005 fb09 	bl	23696 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   1e084:	4620      	mov	r0, r4
		k_thread_name_set(&queue->thread, cfg->name);
	}

	k_thread_start(&queue->thread);
}
   1e086:	b009      	add	sp, #36	; 0x24
   1e088:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1e08c:	f005 bb08 	b.w	236a0 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1e090:	2001      	movs	r0, #1
   1e092:	e7df      	b.n	1e054 <k_work_queue_start+0x2c>
   1e094:	0001defd 	.word	0x0001defd

0001e098 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   1e098:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1e09a:	460c      	mov	r4, r1
   1e09c:	9001      	str	r0, [sp, #4]
   1e09e:	4616      	mov	r6, r2
   1e0a0:	461f      	mov	r7, r3
	__asm__ volatile(
   1e0a2:	f04f 0320 	mov.w	r3, #32
   1e0a6:	f3ef 8511 	mrs	r5, BASEPRI
   1e0aa:	f383 8811 	msr	BASEPRI, r3
   1e0ae:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   1e0b2:	4608      	mov	r0, r1
   1e0b4:	f005 fafd 	bl	236b2 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1e0b8:	ea56 0307 	orrs.w	r3, r6, r7
   1e0bc:	d109      	bne.n	1e0d2 <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   1e0be:	a901      	add	r1, sp, #4
   1e0c0:	4620      	mov	r0, r4
   1e0c2:	f7ff fe97 	bl	1ddf4 <submit_to_queue_locked>
	__asm__ volatile(
   1e0c6:	f385 8811 	msr	BASEPRI, r5
   1e0ca:	f3bf 8f6f 	isb	sy
	ret = schedule_for_queue_locked(&queue, dwork, delay);

	k_spin_unlock(&lock, key);

	return ret;
}
   1e0ce:	b003      	add	sp, #12
   1e0d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   1e0d2:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1e0d4:	4906      	ldr	r1, [pc, #24]	; (1e0f0 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   1e0d6:	f043 0308 	orr.w	r3, r3, #8
   1e0da:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   1e0dc:	9b01      	ldr	r3, [sp, #4]
   1e0de:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1e0e0:	f104 0010 	add.w	r0, r4, #16
   1e0e4:	4632      	mov	r2, r6
   1e0e6:	463b      	mov	r3, r7
   1e0e8:	f000 f87a 	bl	1e1e0 <z_add_timeout>
	return ret;
   1e0ec:	2001      	movs	r0, #1
   1e0ee:	e7ea      	b.n	1e0c6 <k_work_reschedule_for_queue+0x2e>
   1e0f0:	00023735 	.word	0x00023735

0001e0f4 <boot_banner>:
#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
	       STRINGIFY(BUILD_VERSION), BOOT_DELAY_BANNER);
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
   1e0f4:	4a02      	ldr	r2, [pc, #8]	; (1e100 <boot_banner+0xc>)
   1e0f6:	4903      	ldr	r1, [pc, #12]	; (1e104 <boot_banner+0x10>)
   1e0f8:	4803      	ldr	r0, [pc, #12]	; (1e108 <boot_banner+0x14>)
   1e0fa:	f000 bc0f 	b.w	1e91c <printk>
   1e0fe:	bf00      	nop
   1e100:	00025b33 	.word	0x00025b33
   1e104:	00027bdf 	.word	0x00027bdf
   1e108:	00027be6 	.word	0x00027be6

0001e10c <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1e10c:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1e10e:	4806      	ldr	r0, [pc, #24]	; (1e128 <z_data_copy+0x1c>)
   1e110:	4a06      	ldr	r2, [pc, #24]	; (1e12c <z_data_copy+0x20>)
   1e112:	4907      	ldr	r1, [pc, #28]	; (1e130 <z_data_copy+0x24>)
   1e114:	1a12      	subs	r2, r2, r0
   1e116:	f005 fd72 	bl	23bfe <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1e11a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1e11e:	4a05      	ldr	r2, [pc, #20]	; (1e134 <z_data_copy+0x28>)
   1e120:	4905      	ldr	r1, [pc, #20]	; (1e138 <z_data_copy+0x2c>)
   1e122:	4806      	ldr	r0, [pc, #24]	; (1e13c <z_data_copy+0x30>)
   1e124:	f005 bd6b 	b.w	23bfe <memcpy>
   1e128:	20000000 	.word	0x20000000
   1e12c:	20000a80 	.word	0x20000a80
   1e130:	00027d10 	.word	0x00027d10
   1e134:	00000000 	.word	0x00000000
   1e138:	00027d10 	.word	0x00027d10
   1e13c:	20000000 	.word	0x20000000

0001e140 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1e140:	4b03      	ldr	r3, [pc, #12]	; (1e150 <elapsed+0x10>)
   1e142:	681b      	ldr	r3, [r3, #0]
   1e144:	b90b      	cbnz	r3, 1e14a <elapsed+0xa>
   1e146:	f7e7 b95f 	b.w	5408 <sys_clock_elapsed>
}
   1e14a:	2000      	movs	r0, #0
   1e14c:	4770      	bx	lr
   1e14e:	bf00      	nop
   1e150:	20002e50 	.word	0x20002e50

0001e154 <remove_timeout>:
{
   1e154:	b530      	push	{r4, r5, lr}
   1e156:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1e158:	b168      	cbz	r0, 1e176 <remove_timeout+0x22>
   1e15a:	4a0a      	ldr	r2, [pc, #40]	; (1e184 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   1e15c:	6852      	ldr	r2, [r2, #4]
   1e15e:	4290      	cmp	r0, r2
   1e160:	d009      	beq.n	1e176 <remove_timeout+0x22>
	if (next(t) != NULL) {
   1e162:	b143      	cbz	r3, 1e176 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1e164:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1e168:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1e16c:	1912      	adds	r2, r2, r4
   1e16e:	eb45 0101 	adc.w	r1, r5, r1
   1e172:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   1e176:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   1e178:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1e17a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1e17c:	2300      	movs	r3, #0
	node->prev = NULL;
   1e17e:	e9c0 3300 	strd	r3, r3, [r0]
}
   1e182:	bd30      	pop	{r4, r5, pc}
   1e184:	20000660 	.word	0x20000660

0001e188 <next_timeout>:

static int32_t next_timeout(void)
{
   1e188:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   1e18a:	4b13      	ldr	r3, [pc, #76]	; (1e1d8 <next_timeout+0x50>)
   1e18c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e18e:	429c      	cmp	r4, r3
   1e190:	bf08      	it	eq
   1e192:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1e194:	f7ff ffd4 	bl	1e140 <elapsed>
   1e198:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   1e19a:	b1bc      	cbz	r4, 1e1cc <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1e19c:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   1e1a0:	1b40      	subs	r0, r0, r5
   1e1a2:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   1e1a6:	2801      	cmp	r0, #1
   1e1a8:	f171 0300 	sbcs.w	r3, r1, #0
   1e1ac:	db11      	blt.n	1e1d2 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1e1ae:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1e1b2:	2300      	movs	r3, #0
   1e1b4:	4282      	cmp	r2, r0
   1e1b6:	eb73 0401 	sbcs.w	r4, r3, r1
   1e1ba:	da00      	bge.n	1e1be <next_timeout+0x36>
   1e1bc:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1e1be:	4b07      	ldr	r3, [pc, #28]	; (1e1dc <next_timeout+0x54>)
   1e1c0:	691b      	ldr	r3, [r3, #16]
   1e1c2:	b113      	cbz	r3, 1e1ca <next_timeout+0x42>
   1e1c4:	4298      	cmp	r0, r3
   1e1c6:	bfa8      	it	ge
   1e1c8:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1e1ca:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   1e1cc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1e1d0:	e7f5      	b.n	1e1be <next_timeout+0x36>
   1e1d2:	2000      	movs	r0, #0
   1e1d4:	e7f3      	b.n	1e1be <next_timeout+0x36>
   1e1d6:	bf00      	nop
   1e1d8:	20000660 	.word	0x20000660
   1e1dc:	20002e0c 	.word	0x20002e0c

0001e1e0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   1e1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1e1e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1e1e8:	bf08      	it	eq
   1e1ea:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   1e1ee:	b085      	sub	sp, #20
   1e1f0:	4604      	mov	r4, r0
   1e1f2:	4692      	mov	sl, r2
   1e1f4:	469b      	mov	fp, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1e1f6:	d070      	beq.n	1e2da <z_add_timeout+0xfa>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	k_ticks_t ticks = timeout.ticks + 1;
   1e1f8:	1c56      	adds	r6, r2, #1

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   1e1fa:	f06f 0501 	mvn.w	r5, #1
	k_ticks_t ticks = timeout.ticks + 1;
   1e1fe:	f143 0700 	adc.w	r7, r3, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   1e202:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e206:	ebb5 0806 	subs.w	r8, r5, r6
   1e20a:	eb63 0907 	sbc.w	r9, r3, r7
   1e20e:	f1b8 0f00 	cmp.w	r8, #0
   1e212:	f179 0300 	sbcs.w	r3, r9, #0
   1e216:	db16      	blt.n	1e246 <z_add_timeout+0x66>
		ticks = Z_TICK_ABS(timeout.ticks) - (curr_tick + elapsed());
   1e218:	4e36      	ldr	r6, [pc, #216]	; (1e2f4 <z_add_timeout+0x114>)
   1e21a:	9103      	str	r1, [sp, #12]
   1e21c:	f7ff ff90 	bl	1e140 <elapsed>
   1e220:	e9d6 2600 	ldrd	r2, r6, [r6]
   1e224:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e228:	1aad      	subs	r5, r5, r2
   1e22a:	eb63 0306 	sbc.w	r3, r3, r6
   1e22e:	ebb5 020a 	subs.w	r2, r5, sl
   1e232:	eb63 030b 	sbc.w	r3, r3, fp
   1e236:	9200      	str	r2, [sp, #0]
   1e238:	9301      	str	r3, [sp, #4]
   1e23a:	e9dd 6700 	ldrd	r6, r7, [sp]
   1e23e:	9903      	ldr	r1, [sp, #12]
   1e240:	1a36      	subs	r6, r6, r0
   1e242:	eb67 77e0 	sbc.w	r7, r7, r0, asr #31
	}

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1e246:	60a1      	str	r1, [r4, #8]
	__asm__ volatile(
   1e248:	f04f 0320 	mov.w	r3, #32
   1e24c:	f3ef 8511 	mrs	r5, BASEPRI
   1e250:	f383 8811 	msr	BASEPRI, r3
   1e254:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   1e258:	f7ff ff72 	bl	1e140 <elapsed>
	ticks = MAX(1, ticks);
   1e25c:	2e01      	cmp	r6, #1
	return list->head == list;
   1e25e:	4a26      	ldr	r2, [pc, #152]	; (1e2f8 <z_add_timeout+0x118>)
   1e260:	f177 0300 	sbcs.w	r3, r7, #0
   1e264:	bfb8      	it	lt
   1e266:	2601      	movlt	r6, #1
   1e268:	6813      	ldr	r3, [r2, #0]
   1e26a:	bfb8      	it	lt
   1e26c:	2700      	movlt	r7, #0
		to->dticks = ticks + elapsed();
   1e26e:	1836      	adds	r6, r6, r0
   1e270:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e274:	4293      	cmp	r3, r2
   1e276:	e9c4 6704 	strd	r6, r7, [r4, #16]
   1e27a:	d002      	beq.n	1e282 <z_add_timeout+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1e27c:	f8d2 c004 	ldr.w	ip, [r2, #4]
		for (t = first(); t != NULL; t = next(t)) {
   1e280:	b92b      	cbnz	r3, 1e28e <z_add_timeout+0xae>
	sys_dnode_t *const tail = list->tail;
   1e282:	6853      	ldr	r3, [r2, #4]
	node->prev = tail;
   1e284:	e9c4 2300 	strd	r2, r3, [r4]
	tail->next = node;
   1e288:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1e28a:	6054      	str	r4, [r2, #4]
}
   1e28c:	e012      	b.n	1e2b4 <z_add_timeout+0xd4>
			if (t->dticks > to->dticks) {
   1e28e:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
   1e292:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
   1e296:	4546      	cmp	r6, r8
   1e298:	eb77 0109 	sbcs.w	r1, r7, r9
   1e29c:	da20      	bge.n	1e2e0 <z_add_timeout+0x100>
				t->dticks -= to->dticks;
   1e29e:	ebb8 0006 	subs.w	r0, r8, r6
   1e2a2:	eb69 0107 	sbc.w	r1, r9, r7
   1e2a6:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   1e2aa:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1e2ac:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   1e2b0:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   1e2b2:	605c      	str	r4, [r3, #4]
	return list->head == list;
   1e2b4:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e2b6:	4293      	cmp	r3, r2
   1e2b8:	d00b      	beq.n	1e2d2 <z_add_timeout+0xf2>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1e2ba:	429c      	cmp	r4, r3
   1e2bc:	d109      	bne.n	1e2d2 <z_add_timeout+0xf2>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   1e2be:	f7ff ff63 	bl	1e188 <next_timeout>

			if (next_time == 0 ||
   1e2c2:	b118      	cbz	r0, 1e2cc <z_add_timeout+0xec>
			    _current_cpu->slice_ticks != next_time) {
   1e2c4:	4b0d      	ldr	r3, [pc, #52]	; (1e2fc <z_add_timeout+0x11c>)
			if (next_time == 0 ||
   1e2c6:	691b      	ldr	r3, [r3, #16]
   1e2c8:	4283      	cmp	r3, r0
   1e2ca:	d002      	beq.n	1e2d2 <z_add_timeout+0xf2>
				sys_clock_set_timeout(next_time, false);
   1e2cc:	2100      	movs	r1, #0
   1e2ce:	f7e7 f869 	bl	53a4 <sys_clock_set_timeout>
	__asm__ volatile(
   1e2d2:	f385 8811 	msr	BASEPRI, r5
   1e2d6:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   1e2da:	b005      	add	sp, #20
   1e2dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   1e2e0:	ebb6 0008 	subs.w	r0, r6, r8
   1e2e4:	eb67 0109 	sbc.w	r1, r7, r9
	return (node == list->tail) ? NULL : node->next;
   1e2e8:	4563      	cmp	r3, ip
   1e2ea:	e9c4 0104 	strd	r0, r1, [r4, #16]
   1e2ee:	d0c8      	beq.n	1e282 <z_add_timeout+0xa2>
   1e2f0:	681b      	ldr	r3, [r3, #0]
   1e2f2:	e7c5      	b.n	1e280 <z_add_timeout+0xa0>
   1e2f4:	20001660 	.word	0x20001660
   1e2f8:	20000660 	.word	0x20000660
   1e2fc:	20002e0c 	.word	0x20002e0c

0001e300 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   1e300:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e304:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1e306:	f7ff fa73 	bl	1d7f0 <z_time_slice>
	__asm__ volatile(
   1e30a:	f04f 0320 	mov.w	r3, #32
   1e30e:	f3ef 8411 	mrs	r4, BASEPRI
   1e312:	f383 8811 	msr	BASEPRI, r3
   1e316:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1e31a:	4d2c      	ldr	r5, [pc, #176]	; (1e3cc <sys_clock_announce+0xcc>)
   1e31c:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 1e3d0 <sys_clock_announce+0xd0>
	return list->head == list;
   1e320:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 1e3d4 <sys_clock_announce+0xd4>
   1e324:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1e326:	4651      	mov	r1, sl
   1e328:	f8d5 c000 	ldr.w	ip, [r5]
   1e32c:	f8db 0000 	ldr.w	r0, [fp]
   1e330:	4662      	mov	r2, ip
   1e332:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e334:	4558      	cmp	r0, fp
   1e336:	e9da 8900 	ldrd	r8, r9, [sl]
   1e33a:	e9cd 2300 	strd	r2, r3, [sp]
   1e33e:	d00d      	beq.n	1e35c <sys_clock_announce+0x5c>
   1e340:	b160      	cbz	r0, 1e35c <sys_clock_announce+0x5c>
   1e342:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   1e346:	45b4      	cmp	ip, r6
   1e348:	41bb      	sbcs	r3, r7
   1e34a:	da1e      	bge.n	1e38a <sys_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1e34c:	9b00      	ldr	r3, [sp, #0]
   1e34e:	ebb6 0c03 	subs.w	ip, r6, r3
   1e352:	9b01      	ldr	r3, [sp, #4]
   1e354:	eb67 0603 	sbc.w	r6, r7, r3
   1e358:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
   1e35c:	9b00      	ldr	r3, [sp, #0]
   1e35e:	eb13 0208 	adds.w	r2, r3, r8
   1e362:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
   1e364:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
   1e368:	eb43 0309 	adc.w	r3, r3, r9
   1e36c:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
   1e370:	602e      	str	r6, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
   1e372:	f7ff ff09 	bl	1e188 <next_timeout>
   1e376:	4631      	mov	r1, r6
   1e378:	f7e7 f814 	bl	53a4 <sys_clock_set_timeout>
	__asm__ volatile(
   1e37c:	f384 8811 	msr	BASEPRI, r4
   1e380:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1e384:	b003      	add	sp, #12
   1e386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
   1e38a:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
   1e38e:	f04f 0200 	mov.w	r2, #0
   1e392:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
   1e396:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
   1e39a:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
   1e39e:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
   1e3a2:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
   1e3a6:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
   1e3a8:	f7ff fed4 	bl	1e154 <remove_timeout>
   1e3ac:	f384 8811 	msr	BASEPRI, r4
   1e3b0:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1e3b4:	6883      	ldr	r3, [r0, #8]
   1e3b6:	4798      	blx	r3
	__asm__ volatile(
   1e3b8:	f04f 0320 	mov.w	r3, #32
   1e3bc:	f3ef 8411 	mrs	r4, BASEPRI
   1e3c0:	f383 8811 	msr	BASEPRI, r3
   1e3c4:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
   1e3c8:	4901      	ldr	r1, [pc, #4]	; (1e3d0 <sys_clock_announce+0xd0>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1e3ca:	e7ad      	b.n	1e328 <sys_clock_announce+0x28>
   1e3cc:	20002e50 	.word	0x20002e50
   1e3d0:	20001660 	.word	0x20001660
   1e3d4:	20000660 	.word	0x20000660

0001e3d8 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   1e3d8:	b510      	push	{r4, lr}
   1e3da:	f04f 0320 	mov.w	r3, #32
   1e3de:	f3ef 8411 	mrs	r4, BASEPRI
   1e3e2:	f383 8811 	msr	BASEPRI, r3
   1e3e6:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   1e3ea:	f7e7 f80d 	bl	5408 <sys_clock_elapsed>
   1e3ee:	4b06      	ldr	r3, [pc, #24]	; (1e408 <sys_clock_tick_get+0x30>)
   1e3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e3f4:	1812      	adds	r2, r2, r0
   1e3f6:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   1e3fa:	f384 8811 	msr	BASEPRI, r4
   1e3fe:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1e402:	4610      	mov	r0, r2
   1e404:	4619      	mov	r1, r3
   1e406:	bd10      	pop	{r4, pc}
   1e408:	20001660 	.word	0x20001660

0001e40c <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   1e40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1e40e:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   1e412:	1c56      	adds	r6, r2, #1
   1e414:	f143 0700 	adc.w	r7, r3, #0
   1e418:	2f00      	cmp	r7, #0
   1e41a:	bf08      	it	eq
   1e41c:	2e02      	cmpeq	r6, #2
{
   1e41e:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1e420:	d302      	bcc.n	1e428 <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1e422:	490d      	ldr	r1, [pc, #52]	; (1e458 <z_timer_expiration_handler+0x4c>)
   1e424:	f7ff fedc 	bl	1e1e0 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   1e428:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1e42a:	3301      	adds	r3, #1
   1e42c:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1e42e:	6a23      	ldr	r3, [r4, #32]
   1e430:	b10b      	cbz	r3, 1e436 <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
   1e432:	4620      	mov	r0, r4
   1e434:	4798      	blx	r3
	return list->head == list;
   1e436:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e43a:	42a5      	cmp	r5, r4
   1e43c:	d00a      	beq.n	1e454 <z_timer_expiration_handler+0x48>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1e43e:	b14d      	cbz	r5, 1e454 <z_timer_expiration_handler+0x48>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   1e440:	4628      	mov	r0, r5
   1e442:	f005 f811 	bl	23468 <z_unpend_thread_no_timeout>
   1e446:	2300      	movs	r3, #0
   1e448:	67eb      	str	r3, [r5, #124]	; 0x7c

	arch_thread_return_value_set(thread, 0);

	z_ready_thread(thread);
   1e44a:	4628      	mov	r0, r5
}
   1e44c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
   1e450:	f005 b87b 	b.w	2354a <z_ready_thread>
}
   1e454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e456:	bf00      	nop
   1e458:	0001e40d 	.word	0x0001e40d

0001e45c <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   1e45c:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   1e460:	4619      	mov	r1, r3
   1e462:	4606      	mov	r6, r0
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1e464:	1c4c      	adds	r4, r1, #1
{
   1e466:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1e468:	bf08      	it	eq
   1e46a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   1e46e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1e472:	4680      	mov	r8, r0
   1e474:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1e476:	d04c      	beq.n	1e512 <z_impl_k_timer_start+0xb6>
   1e478:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1e47a:	1c6b      	adds	r3, r5, #1
   1e47c:	bf08      	it	eq
   1e47e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   1e482:	4614      	mov	r4, r2
   1e484:	d019      	beq.n	1e4ba <z_impl_k_timer_start+0x5e>
   1e486:	ea54 0305 	orrs.w	r3, r4, r5
   1e48a:	d016      	beq.n	1e4ba <z_impl_k_timer_start+0x5e>
	    Z_TICK_ABS(period.ticks) < 0) {
   1e48c:	f06f 0301 	mvn.w	r3, #1
   1e490:	ebb3 0a02 	subs.w	sl, r3, r2
   1e494:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e498:	eb63 0b05 	sbc.w	fp, r3, r5
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1e49c:	f1ba 0f00 	cmp.w	sl, #0
   1e4a0:	f17b 0300 	sbcs.w	r3, fp, #0
   1e4a4:	da09      	bge.n	1e4ba <z_impl_k_timer_start+0x5e>
		period.ticks = MAX(period.ticks - 1, 1);
   1e4a6:	f112 34ff 	adds.w	r4, r2, #4294967295	; 0xffffffff
   1e4aa:	f145 35ff 	adc.w	r5, r5, #4294967295	; 0xffffffff
   1e4ae:	2c01      	cmp	r4, #1
   1e4b0:	f175 0300 	sbcs.w	r3, r5, #0
   1e4b4:	bfbc      	itt	lt
   1e4b6:	2401      	movlt	r4, #1
   1e4b8:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   1e4ba:	f06f 0301 	mvn.w	r3, #1
   1e4be:	1a1b      	subs	r3, r3, r0
   1e4c0:	9300      	str	r3, [sp, #0]
   1e4c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e4c6:	eb63 0301 	sbc.w	r3, r3, r1
   1e4ca:	9301      	str	r3, [sp, #4]
   1e4cc:	e9dd 2300 	ldrd	r2, r3, [sp]
   1e4d0:	2a00      	cmp	r2, #0
   1e4d2:	f173 0300 	sbcs.w	r3, r3, #0
   1e4d6:	da0c      	bge.n	1e4f2 <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
   1e4d8:	f110 38ff 	adds.w	r8, r0, #4294967295	; 0xffffffff
   1e4dc:	f141 39ff 	adc.w	r9, r1, #4294967295	; 0xffffffff
   1e4e0:	f1b8 0f00 	cmp.w	r8, #0
   1e4e4:	f179 0300 	sbcs.w	r3, r9, #0
   1e4e8:	bfbc      	itt	lt
   1e4ea:	f04f 0800 	movlt.w	r8, #0
   1e4ee:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
   1e4f2:	4630      	mov	r0, r6
   1e4f4:	f005 f997 	bl	23826 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   1e4f8:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1e4fa:	4907      	ldr	r1, [pc, #28]	; (1e518 <z_impl_k_timer_start+0xbc>)
	timer->status = 0U;
   1e4fc:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1e4fe:	4642      	mov	r2, r8
   1e500:	464b      	mov	r3, r9
   1e502:	4630      	mov	r0, r6
	timer->period = period;
   1e504:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   1e508:	b002      	add	sp, #8
   1e50a:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1e50e:	f7ff be67 	b.w	1e1e0 <z_add_timeout>
}
   1e512:	b002      	add	sp, #8
   1e514:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   1e518:	0001e40d 	.word	0x0001e40d

0001e51c <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1e51c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1e520:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   1e522:	4b29      	ldr	r3, [pc, #164]	; (1e5c8 <z_impl_k_poll+0xac>)
   1e524:	689d      	ldr	r5, [r3, #8]

	poller->is_polling = true;
   1e526:	2301      	movs	r3, #1
   1e528:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	poller->mode = MODE_POLL;
   1e52c:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	events_registered = register_events(events, num_events, poller,
   1e530:	ea52 0307 	orrs.w	r3, r2, r7
{
   1e534:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   1e536:	bf0c      	ite	eq
   1e538:	2301      	moveq	r3, #1
   1e53a:	2300      	movne	r3, #0
   1e53c:	f105 0260 	add.w	r2, r5, #96	; 0x60
{
   1e540:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   1e542:	f005 fa68 	bl	23a16 <register_events>
   1e546:	4681      	mov	r9, r0
	__asm__ volatile(
   1e548:	f04f 0320 	mov.w	r3, #32
   1e54c:	f3ef 8a11 	mrs	sl, BASEPRI
   1e550:	f383 8811 	msr	BASEPRI, r3
   1e554:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   1e558:	f895 4060 	ldrb.w	r4, [r5, #96]	; 0x60
   1e55c:	b964      	cbnz	r4, 1e578 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   1e55e:	4601      	mov	r1, r0
   1e560:	4652      	mov	r2, sl
   1e562:	4640      	mov	r0, r8
   1e564:	f005 f9f7 	bl	23956 <clear_event_registrations>
	__asm__ volatile(
   1e568:	f38a 8811 	msr	BASEPRI, sl
   1e56c:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   1e570:	4620      	mov	r0, r4
   1e572:	b002      	add	sp, #8
   1e574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   1e578:	2300      	movs	r3, #0
   1e57a:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1e57e:	ea56 0307 	orrs.w	r3, r6, r7
   1e582:	d106      	bne.n	1e592 <z_impl_k_poll+0x76>
   1e584:	f38a 8811 	msr	BASEPRI, sl
   1e588:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1e58c:	f06f 040a 	mvn.w	r4, #10
   1e590:	e7ee      	b.n	1e570 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1e592:	e9cd 6700 	strd	r6, r7, [sp]
   1e596:	4a0d      	ldr	r2, [pc, #52]	; (1e5cc <z_impl_k_poll+0xb0>)
   1e598:	480d      	ldr	r0, [pc, #52]	; (1e5d0 <z_impl_k_poll+0xb4>)
   1e59a:	4651      	mov	r1, sl
   1e59c:	f7ff f84e 	bl	1d63c <z_pend_curr>
   1e5a0:	4604      	mov	r4, r0
	__asm__ volatile(
   1e5a2:	f04f 0320 	mov.w	r3, #32
   1e5a6:	f3ef 8511 	mrs	r5, BASEPRI
   1e5aa:	f383 8811 	msr	BASEPRI, r3
   1e5ae:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   1e5b2:	462a      	mov	r2, r5
   1e5b4:	4649      	mov	r1, r9
   1e5b6:	4640      	mov	r0, r8
   1e5b8:	f005 f9cd 	bl	23956 <clear_event_registrations>
	__asm__ volatile(
   1e5bc:	f385 8811 	msr	BASEPRI, r5
   1e5c0:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1e5c4:	e7d4      	b.n	1e570 <z_impl_k_poll+0x54>
   1e5c6:	bf00      	nop
   1e5c8:	20002e0c 	.word	0x20002e0c
   1e5cc:	20000668 	.word	0x20000668
   1e5d0:	200036e0 	.word	0x200036e0

0001e5d4 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   1e5d4:	b538      	push	{r3, r4, r5, lr}
   1e5d6:	4603      	mov	r3, r0
	__asm__ volatile(
   1e5d8:	f04f 0220 	mov.w	r2, #32
   1e5dc:	f3ef 8511 	mrs	r5, BASEPRI
   1e5e0:	f382 8811 	msr	BASEPRI, r2
   1e5e4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   1e5e8:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   1e5ea:	2101      	movs	r1, #1
   1e5ec:	6081      	str	r1, [r0, #8]
	return list->head == list;
   1e5ee:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1e5f0:	4283      	cmp	r3, r0
   1e5f2:	d106      	bne.n	1e602 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   1e5f4:	f385 8811 	msr	BASEPRI, r5
   1e5f8:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&sig->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   1e5fc:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
   1e5fe:	4620      	mov	r0, r4
   1e600:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   1e602:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1e606:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1e608:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1e60a:	2300      	movs	r3, #0
	node->prev = NULL;
   1e60c:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1e610:	f005 fa62 	bl	23ad8 <signal_poll_event>
	z_reschedule(&lock, key);
   1e614:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1e616:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1e618:	4801      	ldr	r0, [pc, #4]	; (1e620 <z_impl_k_poll_signal_raise+0x4c>)
   1e61a:	f7fe ff8d 	bl	1d538 <z_reschedule>
	return rc;
   1e61e:	e7ee      	b.n	1e5fe <z_impl_k_poll_signal_raise+0x2a>
   1e620:	200036e0 	.word	0x200036e0

0001e624 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1e624:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1e626:	4606      	mov	r6, r0
   1e628:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1e62a:	f005 f82a 	bl	23682 <k_is_in_isr>
   1e62e:	b980      	cbnz	r0, 1e652 <z_thread_aligned_alloc+0x2e>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1e630:	4b0b      	ldr	r3, [pc, #44]	; (1e660 <z_thread_aligned_alloc+0x3c>)
   1e632:	689b      	ldr	r3, [r3, #8]
   1e634:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   1e636:	b184      	cbz	r4, 1e65a <z_thread_aligned_alloc+0x36>
	return c < a;
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a + b;
   1e638:	2204      	movs	r2, #4
   1e63a:	18aa      	adds	r2, r5, r2
   1e63c:	d209      	bcs.n	1e652 <z_thread_aligned_alloc+0x2e>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   1e63e:	2000      	movs	r0, #0
   1e640:	2100      	movs	r1, #0
   1e642:	e9cd 0100 	strd	r0, r1, [sp]
   1e646:	f046 0104 	orr.w	r1, r6, #4
   1e64a:	4620      	mov	r0, r4
   1e64c:	f004 fda5 	bl	2319a <k_heap_aligned_alloc>
	if (mem == NULL) {
   1e650:	b908      	cbnz	r0, 1e656 <z_thread_aligned_alloc+0x32>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   1e652:	2400      	movs	r4, #0
	}

	return ret;
   1e654:	e001      	b.n	1e65a <z_thread_aligned_alloc+0x36>
	*heap_ref = heap;
   1e656:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   1e658:	1d04      	adds	r4, r0, #4
}
   1e65a:	4620      	mov	r0, r4
   1e65c:	b002      	add	sp, #8
   1e65e:	bd70      	pop	{r4, r5, r6, pc}
   1e660:	20002e0c 	.word	0x20002e0c

0001e664 <round>:
   1e664:	b580      	push	{r7, lr}
   1e666:	b08c      	sub	sp, #48	; 0x30
   1e668:	af00      	add	r7, sp, #0
   1e66a:	e9c7 0100 	strd	r0, r1, [r7]
   1e66e:	e9d7 2300 	ldrd	r2, r3, [r7]
   1e672:	e9c7 2304 	strd	r2, r3, [r7, #16]
   1e676:	697b      	ldr	r3, [r7, #20]
   1e678:	62fb      	str	r3, [r7, #44]	; 0x2c
   1e67a:	693b      	ldr	r3, [r7, #16]
   1e67c:	62bb      	str	r3, [r7, #40]	; 0x28
   1e67e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e680:	151b      	asrs	r3, r3, #20
   1e682:	f3c3 030a 	ubfx	r3, r3, #0, #11
   1e686:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   1e68a:	627b      	str	r3, [r7, #36]	; 0x24
   1e68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e68e:	2b13      	cmp	r3, #19
   1e690:	dc33      	bgt.n	1e6fa <round+0x96>
   1e692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e694:	2b00      	cmp	r3, #0
   1e696:	da10      	bge.n	1e6ba <round+0x56>
   1e698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e69a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
   1e69e:	62fb      	str	r3, [r7, #44]	; 0x2c
   1e6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e6a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1e6a6:	d105      	bne.n	1e6b4 <round+0x50>
   1e6a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e6aa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
   1e6ae:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   1e6b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   1e6b4:	2300      	movs	r3, #0
   1e6b6:	62bb      	str	r3, [r7, #40]	; 0x28
   1e6b8:	e059      	b.n	1e76e <round+0x10a>
   1e6ba:	4a34      	ldr	r2, [pc, #208]	; (1e78c <round+0x128>)
   1e6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e6be:	fa42 f303 	asr.w	r3, r2, r3
   1e6c2:	61bb      	str	r3, [r7, #24]
   1e6c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1e6c6:	69bb      	ldr	r3, [r7, #24]
   1e6c8:	4013      	ands	r3, r2
   1e6ca:	2b00      	cmp	r3, #0
   1e6cc:	d105      	bne.n	1e6da <round+0x76>
   1e6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e6d0:	2b00      	cmp	r3, #0
   1e6d2:	d102      	bne.n	1e6da <round+0x76>
   1e6d4:	e9d7 2300 	ldrd	r2, r3, [r7]
   1e6d8:	e053      	b.n	1e782 <round+0x11e>
   1e6da:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   1e6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e6e0:	fa42 f303 	asr.w	r3, r2, r3
   1e6e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1e6e6:	4413      	add	r3, r2
   1e6e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   1e6ea:	69bb      	ldr	r3, [r7, #24]
   1e6ec:	43da      	mvns	r2, r3
   1e6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e6f0:	4013      	ands	r3, r2
   1e6f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   1e6f4:	2300      	movs	r3, #0
   1e6f6:	62bb      	str	r3, [r7, #40]	; 0x28
   1e6f8:	e039      	b.n	1e76e <round+0x10a>
   1e6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e6fc:	2b33      	cmp	r3, #51	; 0x33
   1e6fe:	dd0f      	ble.n	1e720 <round+0xbc>
   1e700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1e706:	d108      	bne.n	1e71a <round+0xb6>
   1e708:	e9d7 0100 	ldrd	r0, r1, [r7]
   1e70c:	4602      	mov	r2, r0
   1e70e:	460b      	mov	r3, r1
   1e710:	f7e1 fcfc 	bl	10c <__adddf3>
   1e714:	4602      	mov	r2, r0
   1e716:	460b      	mov	r3, r1
   1e718:	e033      	b.n	1e782 <round+0x11e>
   1e71a:	e9d7 2300 	ldrd	r2, r3, [r7]
   1e71e:	e030      	b.n	1e782 <round+0x11e>
   1e720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e722:	3b14      	subs	r3, #20
   1e724:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1e728:	fa22 f303 	lsr.w	r3, r2, r3
   1e72c:	623b      	str	r3, [r7, #32]
   1e72e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1e730:	6a3b      	ldr	r3, [r7, #32]
   1e732:	4013      	ands	r3, r2
   1e734:	2b00      	cmp	r3, #0
   1e736:	d102      	bne.n	1e73e <round+0xda>
   1e738:	e9d7 2300 	ldrd	r2, r3, [r7]
   1e73c:	e021      	b.n	1e782 <round+0x11e>
   1e73e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e740:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
   1e744:	2201      	movs	r2, #1
   1e746:	fa02 f303 	lsl.w	r3, r2, r3
   1e74a:	461a      	mov	r2, r3
   1e74c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e74e:	4413      	add	r3, r2
   1e750:	61fb      	str	r3, [r7, #28]
   1e752:	69fa      	ldr	r2, [r7, #28]
   1e754:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e756:	429a      	cmp	r2, r3
   1e758:	d202      	bcs.n	1e760 <round+0xfc>
   1e75a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e75c:	3301      	adds	r3, #1
   1e75e:	62fb      	str	r3, [r7, #44]	; 0x2c
   1e760:	69fb      	ldr	r3, [r7, #28]
   1e762:	62bb      	str	r3, [r7, #40]	; 0x28
   1e764:	6a3b      	ldr	r3, [r7, #32]
   1e766:	43db      	mvns	r3, r3
   1e768:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1e76a:	4013      	ands	r3, r2
   1e76c:	62bb      	str	r3, [r7, #40]	; 0x28
   1e76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e770:	60fb      	str	r3, [r7, #12]
   1e772:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e774:	60bb      	str	r3, [r7, #8]
   1e776:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1e77a:	e9c7 2300 	strd	r2, r3, [r7]
   1e77e:	e9d7 2300 	ldrd	r2, r3, [r7]
   1e782:	4610      	mov	r0, r2
   1e784:	4619      	mov	r1, r3
   1e786:	3730      	adds	r7, #48	; 0x30
   1e788:	46bd      	mov	sp, r7
   1e78a:	bd80      	pop	{r7, pc}
   1e78c:	000fffff 	.word	0x000fffff

0001e790 <_strtol_l.isra.0>:
   1e790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e794:	4e3a      	ldr	r6, [pc, #232]	; (1e880 <_strtol_l.isra.0+0xf0>)
   1e796:	4686      	mov	lr, r0
   1e798:	468c      	mov	ip, r1
   1e79a:	4660      	mov	r0, ip
   1e79c:	f81c 4b01 	ldrb.w	r4, [ip], #1
   1e7a0:	5da5      	ldrb	r5, [r4, r6]
   1e7a2:	f015 0508 	ands.w	r5, r5, #8
   1e7a6:	d1f8      	bne.n	1e79a <_strtol_l.isra.0+0xa>
   1e7a8:	2c2d      	cmp	r4, #45	; 0x2d
   1e7aa:	d133      	bne.n	1e814 <_strtol_l.isra.0+0x84>
   1e7ac:	f89c 4000 	ldrb.w	r4, [ip]
   1e7b0:	f04f 0801 	mov.w	r8, #1
   1e7b4:	f100 0c02 	add.w	ip, r0, #2
   1e7b8:	2b00      	cmp	r3, #0
   1e7ba:	d05c      	beq.n	1e876 <_strtol_l.isra.0+0xe6>
   1e7bc:	2b10      	cmp	r3, #16
   1e7be:	d10c      	bne.n	1e7da <_strtol_l.isra.0+0x4a>
   1e7c0:	2c30      	cmp	r4, #48	; 0x30
   1e7c2:	d10a      	bne.n	1e7da <_strtol_l.isra.0+0x4a>
   1e7c4:	f89c 0000 	ldrb.w	r0, [ip]
   1e7c8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   1e7cc:	2858      	cmp	r0, #88	; 0x58
   1e7ce:	d14d      	bne.n	1e86c <_strtol_l.isra.0+0xdc>
   1e7d0:	f89c 4001 	ldrb.w	r4, [ip, #1]
   1e7d4:	2310      	movs	r3, #16
   1e7d6:	f10c 0c02 	add.w	ip, ip, #2
   1e7da:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   1e7de:	3f01      	subs	r7, #1
   1e7e0:	2600      	movs	r6, #0
   1e7e2:	fbb7 f9f3 	udiv	r9, r7, r3
   1e7e6:	4630      	mov	r0, r6
   1e7e8:	fb03 7a19 	mls	sl, r3, r9, r7
   1e7ec:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   1e7f0:	2d09      	cmp	r5, #9
   1e7f2:	d818      	bhi.n	1e826 <_strtol_l.isra.0+0x96>
   1e7f4:	462c      	mov	r4, r5
   1e7f6:	42a3      	cmp	r3, r4
   1e7f8:	dd24      	ble.n	1e844 <_strtol_l.isra.0+0xb4>
   1e7fa:	1c75      	adds	r5, r6, #1
   1e7fc:	d007      	beq.n	1e80e <_strtol_l.isra.0+0x7e>
   1e7fe:	4581      	cmp	r9, r0
   1e800:	d31d      	bcc.n	1e83e <_strtol_l.isra.0+0xae>
   1e802:	d101      	bne.n	1e808 <_strtol_l.isra.0+0x78>
   1e804:	45a2      	cmp	sl, r4
   1e806:	db1a      	blt.n	1e83e <_strtol_l.isra.0+0xae>
   1e808:	fb00 4003 	mla	r0, r0, r3, r4
   1e80c:	2601      	movs	r6, #1
   1e80e:	f81c 4b01 	ldrb.w	r4, [ip], #1
   1e812:	e7eb      	b.n	1e7ec <_strtol_l.isra.0+0x5c>
   1e814:	2c2b      	cmp	r4, #43	; 0x2b
   1e816:	bf08      	it	eq
   1e818:	f89c 4000 	ldrbeq.w	r4, [ip]
   1e81c:	46a8      	mov	r8, r5
   1e81e:	bf08      	it	eq
   1e820:	f100 0c02 	addeq.w	ip, r0, #2
   1e824:	e7c8      	b.n	1e7b8 <_strtol_l.isra.0+0x28>
   1e826:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   1e82a:	2d19      	cmp	r5, #25
   1e82c:	d801      	bhi.n	1e832 <_strtol_l.isra.0+0xa2>
   1e82e:	3c37      	subs	r4, #55	; 0x37
   1e830:	e7e1      	b.n	1e7f6 <_strtol_l.isra.0+0x66>
   1e832:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   1e836:	2d19      	cmp	r5, #25
   1e838:	d804      	bhi.n	1e844 <_strtol_l.isra.0+0xb4>
   1e83a:	3c57      	subs	r4, #87	; 0x57
   1e83c:	e7db      	b.n	1e7f6 <_strtol_l.isra.0+0x66>
   1e83e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1e842:	e7e4      	b.n	1e80e <_strtol_l.isra.0+0x7e>
   1e844:	1c73      	adds	r3, r6, #1
   1e846:	d106      	bne.n	1e856 <_strtol_l.isra.0+0xc6>
   1e848:	2322      	movs	r3, #34	; 0x22
   1e84a:	f8ce 3000 	str.w	r3, [lr]
   1e84e:	4638      	mov	r0, r7
   1e850:	b942      	cbnz	r2, 1e864 <_strtol_l.isra.0+0xd4>
   1e852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1e856:	f1b8 0f00 	cmp.w	r8, #0
   1e85a:	d000      	beq.n	1e85e <_strtol_l.isra.0+0xce>
   1e85c:	4240      	negs	r0, r0
   1e85e:	2a00      	cmp	r2, #0
   1e860:	d0f7      	beq.n	1e852 <_strtol_l.isra.0+0xc2>
   1e862:	b10e      	cbz	r6, 1e868 <_strtol_l.isra.0+0xd8>
   1e864:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   1e868:	6011      	str	r1, [r2, #0]
   1e86a:	e7f2      	b.n	1e852 <_strtol_l.isra.0+0xc2>
   1e86c:	2430      	movs	r4, #48	; 0x30
   1e86e:	2b00      	cmp	r3, #0
   1e870:	d1b3      	bne.n	1e7da <_strtol_l.isra.0+0x4a>
   1e872:	2308      	movs	r3, #8
   1e874:	e7b1      	b.n	1e7da <_strtol_l.isra.0+0x4a>
   1e876:	2c30      	cmp	r4, #48	; 0x30
   1e878:	d0a4      	beq.n	1e7c4 <_strtol_l.isra.0+0x34>
   1e87a:	230a      	movs	r3, #10
   1e87c:	e7ad      	b.n	1e7da <_strtol_l.isra.0+0x4a>
   1e87e:	bf00      	nop
   1e880:	00027c10 	.word	0x00027c10

0001e884 <strtol>:
   1e884:	4613      	mov	r3, r2
   1e886:	460a      	mov	r2, r1
   1e888:	4601      	mov	r1, r0
   1e88a:	4802      	ldr	r0, [pc, #8]	; (1e894 <strtol+0x10>)
   1e88c:	6800      	ldr	r0, [r0, #0]
   1e88e:	f7ff bf7f 	b.w	1e790 <_strtol_l.isra.0>
   1e892:	bf00      	nop
   1e894:	20000670 	.word	0x20000670

0001e898 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1e898:	4603      	mov	r3, r0
   1e89a:	b140      	cbz	r0, 1e8ae <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1e89c:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1e89e:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1e8a2:	2a02      	cmp	r2, #2
   1e8a4:	d006      	beq.n	1e8b4 <sys_notify_validate+0x1c>
   1e8a6:	2a03      	cmp	r2, #3
   1e8a8:	d004      	beq.n	1e8b4 <sys_notify_validate+0x1c>
   1e8aa:	2a01      	cmp	r2, #1
   1e8ac:	d005      	beq.n	1e8ba <sys_notify_validate+0x22>
		return -EINVAL;
   1e8ae:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   1e8b2:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1e8b4:	681a      	ldr	r2, [r3, #0]
   1e8b6:	2a00      	cmp	r2, #0
   1e8b8:	d0f9      	beq.n	1e8ae <sys_notify_validate+0x16>
		notify->result = 0;
   1e8ba:	2000      	movs	r0, #0
   1e8bc:	6098      	str	r0, [r3, #8]
   1e8be:	4770      	bx	lr

0001e8c0 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1e8c0:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1e8c2:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   1e8c6:	2a02      	cmp	r2, #2
{
   1e8c8:	b510      	push	{r4, lr}
   1e8ca:	4603      	mov	r3, r0
	notify->result = res;
   1e8cc:	6081      	str	r1, [r0, #8]
	switch (method) {
   1e8ce:	d00a      	beq.n	1e8e6 <sys_notify_finalize+0x26>
   1e8d0:	2a03      	cmp	r2, #3
   1e8d2:	d10b      	bne.n	1e8ec <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1e8d4:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   1e8d6:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1e8d8:	2200      	movs	r2, #0
   1e8da:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1e8dc:	b108      	cbz	r0, 1e8e2 <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
   1e8de:	f7ff fe79 	bl	1e5d4 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1e8e2:	4620      	mov	r0, r4
   1e8e4:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   1e8e6:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = 0;
   1e8e8:	2400      	movs	r4, #0
		break;
   1e8ea:	e7f5      	b.n	1e8d8 <sys_notify_finalize+0x18>
	switch (method) {
   1e8ec:	2400      	movs	r4, #0
   1e8ee:	4620      	mov	r0, r4
   1e8f0:	e7f2      	b.n	1e8d8 <sys_notify_finalize+0x18>

0001e8f2 <arch_printk_char_out>:
}
   1e8f2:	2000      	movs	r0, #0
   1e8f4:	4770      	bx	lr

0001e8f6 <str_out>:
{
   1e8f6:	b530      	push	{r4, r5, lr}
   1e8f8:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1e8fa:	680c      	ldr	r4, [r1, #0]
   1e8fc:	1c55      	adds	r5, r2, #1
   1e8fe:	b114      	cbz	r4, 1e906 <str_out+0x10>
   1e900:	684b      	ldr	r3, [r1, #4]
   1e902:	4293      	cmp	r3, r2
   1e904:	dc01      	bgt.n	1e90a <str_out+0x14>
		ctx->count++;
   1e906:	608d      	str	r5, [r1, #8]
}
   1e908:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1e90a:	3b01      	subs	r3, #1
   1e90c:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1e90e:	bf08      	it	eq
   1e910:	2200      	moveq	r2, #0
   1e912:	608d      	str	r5, [r1, #8]
   1e914:	bf0c      	ite	eq
   1e916:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1e918:	54a0      	strbne	r0, [r4, r2]
   1e91a:	e7f5      	b.n	1e908 <str_out+0x12>

0001e91c <printk>:
{
   1e91c:	b40f      	push	{r0, r1, r2, r3}
   1e91e:	b507      	push	{r0, r1, r2, lr}
   1e920:	a904      	add	r1, sp, #16
   1e922:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1e926:	9101      	str	r1, [sp, #4]
		log_printk(fmt, ap);
   1e928:	f000 fc33 	bl	1f192 <log_printk>
}
   1e92c:	b003      	add	sp, #12
   1e92e:	f85d eb04 	ldr.w	lr, [sp], #4
   1e932:	b004      	add	sp, #16
   1e934:	4770      	bx	lr

0001e936 <snprintk>:
{
   1e936:	b40c      	push	{r2, r3}
   1e938:	b507      	push	{r0, r1, r2, lr}
   1e93a:	ab04      	add	r3, sp, #16
   1e93c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1e940:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1e942:	f7e4 fb51 	bl	2fe8 <vsnprintk>
}
   1e946:	b003      	add	sp, #12
   1e948:	f85d eb04 	ldr.w	lr, [sp], #4
   1e94c:	b002      	add	sp, #8
   1e94e:	4770      	bx	lr

0001e950 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1e950:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1e952:	f013 0307 	ands.w	r3, r3, #7
   1e956:	d105      	bne.n	1e964 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1e958:	6803      	ldr	r3, [r0, #0]
   1e95a:	2b00      	cmp	r3, #0
		evt = EVT_START;
   1e95c:	bf0c      	ite	eq
   1e95e:	2000      	moveq	r0, #0
   1e960:	2003      	movne	r0, #3
   1e962:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1e964:	2b02      	cmp	r3, #2
   1e966:	d105      	bne.n	1e974 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1e968:	8b43      	ldrh	r3, [r0, #26]
   1e96a:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   1e96c:	bf14      	ite	ne
   1e96e:	2000      	movne	r0, #0
   1e970:	2004      	moveq	r0, #4
   1e972:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1e974:	2b01      	cmp	r3, #1
   1e976:	d105      	bne.n	1e984 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1e978:	6803      	ldr	r3, [r0, #0]
   1e97a:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   1e97c:	bf0c      	ite	eq
   1e97e:	2000      	moveq	r0, #0
   1e980:	2005      	movne	r0, #5
   1e982:	4770      	bx	lr
	int evt = EVT_NOP;
   1e984:	2000      	movs	r0, #0
}
   1e986:	4770      	bx	lr

0001e988 <notify_one>:
{
   1e988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e98c:	460d      	mov	r5, r1
   1e98e:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1e990:	4619      	mov	r1, r3
   1e992:	1d28      	adds	r0, r5, #4
{
   1e994:	4690      	mov	r8, r2
   1e996:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1e998:	f7ff ff92 	bl	1e8c0 <sys_notify_finalize>
	if (cb) {
   1e99c:	4604      	mov	r4, r0
   1e99e:	b138      	cbz	r0, 1e9b0 <notify_one+0x28>
		cb(mgr, cli, state, res);
   1e9a0:	4633      	mov	r3, r6
   1e9a2:	4642      	mov	r2, r8
   1e9a4:	4629      	mov	r1, r5
   1e9a6:	4638      	mov	r0, r7
   1e9a8:	46a4      	mov	ip, r4
}
   1e9aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1e9ae:	4760      	bx	ip
}
   1e9b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001e9b4 <transition_complete>:
{
   1e9b4:	b410      	push	{r4}
	__asm__ volatile(
   1e9b6:	f04f 0420 	mov.w	r4, #32
   1e9ba:	f3ef 8211 	mrs	r2, BASEPRI
   1e9be:	f384 8811 	msr	BASEPRI, r4
   1e9c2:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   1e9c6:	6141      	str	r1, [r0, #20]
}
   1e9c8:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   1e9ca:	2101      	movs	r1, #1
   1e9cc:	f7e4 bb20 	b.w	3010 <process_event>

0001e9d0 <validate_args>:
{
   1e9d0:	b510      	push	{r4, lr}
   1e9d2:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1e9d4:	b140      	cbz	r0, 1e9e8 <validate_args+0x18>
   1e9d6:	b139      	cbz	r1, 1e9e8 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1e9d8:	1d08      	adds	r0, r1, #4
   1e9da:	f7ff ff5d 	bl	1e898 <sys_notify_validate>
	if ((rv == 0)
   1e9de:	b928      	cbnz	r0, 1e9ec <validate_args+0x1c>
	    && ((cli->notify.flags
   1e9e0:	68a3      	ldr	r3, [r4, #8]
   1e9e2:	f033 0303 	bics.w	r3, r3, #3
   1e9e6:	d001      	beq.n	1e9ec <validate_args+0x1c>
		rv = -EINVAL;
   1e9e8:	f06f 0015 	mvn.w	r0, #21
}
   1e9ec:	bd10      	pop	{r4, pc}

0001e9ee <onoff_manager_init>:
{
   1e9ee:	b538      	push	{r3, r4, r5, lr}
   1e9f0:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1e9f2:	4605      	mov	r5, r0
   1e9f4:	b158      	cbz	r0, 1ea0e <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1e9f6:	b151      	cbz	r1, 1ea0e <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1e9f8:	680b      	ldr	r3, [r1, #0]
   1e9fa:	b143      	cbz	r3, 1ea0e <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1e9fc:	684b      	ldr	r3, [r1, #4]
   1e9fe:	b133      	cbz	r3, 1ea0e <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1ea00:	221c      	movs	r2, #28
   1ea02:	2100      	movs	r1, #0
   1ea04:	f005 f909 	bl	23c1a <memset>
   1ea08:	612c      	str	r4, [r5, #16]
	return 0;
   1ea0a:	2000      	movs	r0, #0
}
   1ea0c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1ea0e:	f06f 0015 	mvn.w	r0, #21
   1ea12:	e7fb      	b.n	1ea0c <onoff_manager_init+0x1e>

0001ea14 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1ea14:	b570      	push	{r4, r5, r6, lr}
   1ea16:	4604      	mov	r4, r0
   1ea18:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1ea1a:	f7ff ffd9 	bl	1e9d0 <validate_args>

	if (rv < 0) {
   1ea1e:	1e05      	subs	r5, r0, #0
   1ea20:	db31      	blt.n	1ea86 <onoff_request+0x72>
   1ea22:	f04f 0320 	mov.w	r3, #32
   1ea26:	f3ef 8111 	mrs	r1, BASEPRI
   1ea2a:	f383 8811 	msr	BASEPRI, r3
   1ea2e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1ea32:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1ea34:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   1ea36:	f64f 75ff 	movw	r5, #65535	; 0xffff
   1ea3a:	42ab      	cmp	r3, r5
   1ea3c:	f000 0207 	and.w	r2, r0, #7
   1ea40:	d02e      	beq.n	1eaa0 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   1ea42:	2a02      	cmp	r2, #2
   1ea44:	d10e      	bne.n	1ea64 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   1ea46:	3301      	adds	r3, #1
   1ea48:	8363      	strh	r3, [r4, #26]
	rv = state;
   1ea4a:	4615      	mov	r5, r2
		notify = true;
   1ea4c:	2301      	movs	r3, #1
	__asm__ volatile(
   1ea4e:	f381 8811 	msr	BASEPRI, r1
   1ea52:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1ea56:	b1b3      	cbz	r3, 1ea86 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   1ea58:	2300      	movs	r3, #0
   1ea5a:	4631      	mov	r1, r6
   1ea5c:	4620      	mov	r0, r4
   1ea5e:	f7ff ff93 	bl	1e988 <notify_one>
   1ea62:	e010      	b.n	1ea86 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   1ea64:	0783      	lsls	r3, r0, #30
   1ea66:	d001      	beq.n	1ea6c <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   1ea68:	2a06      	cmp	r2, #6
   1ea6a:	d10e      	bne.n	1ea8a <onoff_request+0x76>
	parent->next = child;
   1ea6c:	2300      	movs	r3, #0
   1ea6e:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   1ea70:	6863      	ldr	r3, [r4, #4]
   1ea72:	b993      	cbnz	r3, 1ea9a <onoff_request+0x86>
	list->head = node;
   1ea74:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   1ea78:	4615      	mov	r5, r2
   1ea7a:	b962      	cbnz	r2, 1ea96 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   1ea7c:	460a      	mov	r2, r1
   1ea7e:	4620      	mov	r0, r4
   1ea80:	2102      	movs	r1, #2
   1ea82:	f7e4 fac5 	bl	3010 <process_event>
		}
	}

	return rv;
}
   1ea86:	4628      	mov	r0, r5
   1ea88:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   1ea8a:	2a05      	cmp	r2, #5
   1ea8c:	bf0c      	ite	eq
   1ea8e:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   1ea92:	f06f 0504 	mvnne.w	r5, #4
   1ea96:	2300      	movs	r3, #0
   1ea98:	e7d9      	b.n	1ea4e <onoff_request+0x3a>
	parent->next = child;
   1ea9a:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1ea9c:	6066      	str	r6, [r4, #4]
}
   1ea9e:	e7eb      	b.n	1ea78 <onoff_request+0x64>
		rv = -EAGAIN;
   1eaa0:	f06f 050a 	mvn.w	r5, #10
   1eaa4:	e7f7      	b.n	1ea96 <onoff_request+0x82>

0001eaa6 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   1eaa6:	b510      	push	{r4, lr}
	__asm__ volatile(
   1eaa8:	f04f 0320 	mov.w	r3, #32
   1eaac:	f3ef 8211 	mrs	r2, BASEPRI
   1eab0:	f383 8811 	msr	BASEPRI, r3
   1eab4:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1eab8:	8b04      	ldrh	r4, [r0, #24]
   1eaba:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   1eabe:	2c02      	cmp	r4, #2
   1eac0:	d00a      	beq.n	1ead8 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
   1eac2:	2c01      	cmp	r4, #1
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   1eac4:	bf0c      	ite	eq
   1eac6:	f06f 0004 	mvneq.w	r0, #4
   1eaca:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
   1eace:	f382 8811 	msr	BASEPRI, r2
   1ead2:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   1ead6:	e008      	b.n	1eaea <onoff_release+0x44>
	mgr->refs -= 1U;
   1ead8:	8b43      	ldrh	r3, [r0, #26]
   1eada:	3b01      	subs	r3, #1
   1eadc:	b29b      	uxth	r3, r3
   1eade:	8343      	strh	r3, [r0, #26]
	if (stop) {
   1eae0:	b923      	cbnz	r3, 1eaec <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   1eae2:	4621      	mov	r1, r4
   1eae4:	f7e4 fa94 	bl	3010 <process_event>
	int rv = state;
   1eae8:	4620      	mov	r0, r4
}
   1eaea:	bd10      	pop	{r4, pc}
	int rv = state;
   1eaec:	4620      	mov	r0, r4
   1eaee:	e7ee      	b.n	1eace <onoff_release+0x28>

0001eaf0 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1eaf0:	4604      	mov	r4, r0
   1eaf2:	b508      	push	{r3, lr}
   1eaf4:	4608      	mov	r0, r1
   1eaf6:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   1eaf8:	461a      	mov	r2, r3
   1eafa:	47a0      	blx	r4
	return z_impl_k_current_get();
   1eafc:	f7fe ffdc 	bl	1dab8 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1eb00:	f7e7 fac2 	bl	6088 <z_impl_k_thread_abort>

0001eb04 <chunk_field>:
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1eb04:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1eb06:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1eb0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   1eb0e:	bf2c      	ite	cs
   1eb10:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   1eb14:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   1eb18:	4770      	bx	lr

0001eb1a <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   1eb1a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   1eb1e:	6880      	ldr	r0, [r0, #8]
   1eb20:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   1eb24:	bf2c      	ite	cs
   1eb26:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   1eb2a:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   1eb2e:	4770      	bx	lr

0001eb30 <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
   1eb30:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1eb32:	2201      	movs	r2, #1
   1eb34:	f7ff ffe6 	bl	1eb04 <chunk_field>
}
   1eb38:	0840      	lsrs	r0, r0, #1
   1eb3a:	bd08      	pop	{r3, pc}

0001eb3c <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1eb3c:	6883      	ldr	r3, [r0, #8]
   1eb3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
   1eb42:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1eb46:	d308      	bcc.n	1eb5a <set_chunk_used+0x1e>
		if (used) {
   1eb48:	684b      	ldr	r3, [r1, #4]
   1eb4a:	b11a      	cbz	r2, 1eb54 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1eb4c:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1eb50:	604b      	str	r3, [r1, #4]
   1eb52:	4770      	bx	lr
   1eb54:	f023 0301 	bic.w	r3, r3, #1
   1eb58:	e7fa      	b.n	1eb50 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
   1eb5a:	884b      	ldrh	r3, [r1, #2]
   1eb5c:	b11a      	cbz	r2, 1eb66 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1eb5e:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1eb62:	804b      	strh	r3, [r1, #2]
		}
	}
}
   1eb64:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1eb66:	f023 0301 	bic.w	r3, r3, #1
   1eb6a:	e7fa      	b.n	1eb62 <set_chunk_used+0x26>

0001eb6c <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1eb6c:	0053      	lsls	r3, r2, #1
   1eb6e:	2201      	movs	r2, #1
   1eb70:	f7ff bfd3 	b.w	1eb1a <chunk_set>

0001eb74 <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   1eb74:	6880      	ldr	r0, [r0, #8]
	return chunksz * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   1eb76:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1eb78:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   1eb7c:	bf2c      	ite	cs
   1eb7e:	2002      	movcs	r0, #2
   1eb80:	2001      	movcc	r0, #1
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   1eb82:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
   1eb84:	fab0 f080 	clz	r0, r0
}
   1eb88:	f1c0 001f 	rsb	r0, r0, #31
   1eb8c:	4770      	bx	lr

0001eb8e <merge_chunks>:
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   1eb8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1eb92:	4616      	mov	r6, r2
   1eb94:	4604      	mov	r4, r0
   1eb96:	460f      	mov	r7, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1eb98:	f7ff ffca 	bl	1eb30 <chunk_size>
   1eb9c:	4631      	mov	r1, r6
   1eb9e:	4605      	mov	r5, r0
   1eba0:	4620      	mov	r0, r4
   1eba2:	f7ff ffc5 	bl	1eb30 <chunk_size>
   1eba6:	4405      	add	r5, r0

	set_chunk_size(h, lc, newsz);
   1eba8:	462a      	mov	r2, r5
   1ebaa:	4639      	mov	r1, r7
   1ebac:	4620      	mov	r0, r4
   1ebae:	f7ff ffdd 	bl	1eb6c <set_chunk_size>
	return c + chunk_size(h, c);
   1ebb2:	4631      	mov	r1, r6
   1ebb4:	4620      	mov	r0, r4
   1ebb6:	f7ff ffbb 	bl	1eb30 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1ebba:	462b      	mov	r3, r5
   1ebbc:	1831      	adds	r1, r6, r0
   1ebbe:	2200      	movs	r2, #0
   1ebc0:	4620      	mov	r0, r4
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   1ebc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ebc6:	f7ff bfa8 	b.w	1eb1a <chunk_set>

0001ebca <split_chunks>:
{
   1ebca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ebce:	4614      	mov	r4, r2
   1ebd0:	4605      	mov	r5, r0
   1ebd2:	460e      	mov	r6, r1
	chunksz_t sz0 = chunk_size(h, lc);
   1ebd4:	f7ff ffac 	bl	1eb30 <chunk_size>
	chunksz_t lsz = rc - lc;
   1ebd8:	eba4 0806 	sub.w	r8, r4, r6
	chunksz_t rsz = sz0 - lsz;
   1ebdc:	1b37      	subs	r7, r6, r4
   1ebde:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   1ebe0:	4642      	mov	r2, r8
   1ebe2:	4631      	mov	r1, r6
   1ebe4:	4628      	mov	r0, r5
   1ebe6:	f7ff ffc1 	bl	1eb6c <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   1ebea:	463a      	mov	r2, r7
   1ebec:	4621      	mov	r1, r4
   1ebee:	4628      	mov	r0, r5
   1ebf0:	f7ff ffbc 	bl	1eb6c <set_chunk_size>
   1ebf4:	4643      	mov	r3, r8
   1ebf6:	2200      	movs	r2, #0
   1ebf8:	4621      	mov	r1, r4
   1ebfa:	4628      	mov	r0, r5
   1ebfc:	f7ff ff8d 	bl	1eb1a <chunk_set>
	return c + chunk_size(h, c);
   1ec00:	4621      	mov	r1, r4
   1ec02:	4628      	mov	r0, r5
   1ec04:	f7ff ff94 	bl	1eb30 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1ec08:	463b      	mov	r3, r7
   1ec0a:	1821      	adds	r1, r4, r0
   1ec0c:	2200      	movs	r2, #0
   1ec0e:	4628      	mov	r0, r5
}
   1ec10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ec14:	f7ff bf81 	b.w	1eb1a <chunk_set>

0001ec18 <free_list_remove_bidx>:
{
   1ec18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ec1c:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   1ec1e:	2203      	movs	r2, #3
   1ec20:	460e      	mov	r6, r1
   1ec22:	4604      	mov	r4, r0
   1ec24:	f7ff ff6e 	bl	1eb04 <chunk_field>
	if (next_free_chunk(h, c) == c) {
   1ec28:	4286      	cmp	r6, r0
   1ec2a:	4605      	mov	r5, r0
   1ec2c:	f107 0804 	add.w	r8, r7, #4
   1ec30:	d10b      	bne.n	1ec4a <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   1ec32:	2301      	movs	r3, #1
   1ec34:	fa03 f707 	lsl.w	r7, r3, r7
   1ec38:	68e3      	ldr	r3, [r4, #12]
   1ec3a:	ea23 0307 	bic.w	r3, r3, r7
   1ec3e:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   1ec40:	2300      	movs	r3, #0
   1ec42:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   1ec46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   1ec4a:	4631      	mov	r1, r6
   1ec4c:	2202      	movs	r2, #2
   1ec4e:	4620      	mov	r0, r4
   1ec50:	f7ff ff58 	bl	1eb04 <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
   1ec54:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
   1ec56:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   1ec58:	4601      	mov	r1, r0
		b->next = second;
   1ec5a:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   1ec5e:	4620      	mov	r0, r4
   1ec60:	2203      	movs	r2, #3
   1ec62:	f7ff ff5a 	bl	1eb1a <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1ec66:	4633      	mov	r3, r6
   1ec68:	4629      	mov	r1, r5
   1ec6a:	4620      	mov	r0, r4
   1ec6c:	2202      	movs	r2, #2
}
   1ec6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ec72:	f7ff bf52 	b.w	1eb1a <chunk_set>

0001ec76 <free_list_remove>:
{
   1ec76:	b538      	push	{r3, r4, r5, lr}
   1ec78:	4604      	mov	r4, r0
   1ec7a:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   1ec7c:	f7ff ff58 	bl	1eb30 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   1ec80:	68a3      	ldr	r3, [r4, #8]
   1ec82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1ec86:	4601      	mov	r1, r0
   1ec88:	d301      	bcc.n	1ec8e <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   1ec8a:	2801      	cmp	r0, #1
   1ec8c:	d009      	beq.n	1eca2 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1ec8e:	4620      	mov	r0, r4
   1ec90:	f7ff ff70 	bl	1eb74 <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   1ec94:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   1ec96:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1ec98:	4620      	mov	r0, r4
}
   1ec9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   1ec9e:	f7ff bfbb 	b.w	1ec18 <free_list_remove_bidx>
}
   1eca2:	bd38      	pop	{r3, r4, r5, pc}

0001eca4 <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   1eca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1eca8:	4605      	mov	r5, r0
   1ecaa:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   1ecac:	f7ff ff62 	bl	1eb74 <bucket_idx>
   1ecb0:	eb05 0a80 	add.w	sl, r5, r0, lsl #2
   1ecb4:	4606      	mov	r6, r0
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   1ecb6:	f8da 9010 	ldr.w	r9, [sl, #16]
   1ecba:	f1b9 0f00 	cmp.w	r9, #0
   1ecbe:	d01b      	beq.n	1ecf8 <alloc_chunk+0x54>
   1ecc0:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   1ecc2:	f8da 4010 	ldr.w	r4, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   1ecc6:	4628      	mov	r0, r5
   1ecc8:	4621      	mov	r1, r4
   1ecca:	f7ff ff31 	bl	1eb30 <chunk_size>
   1ecce:	4540      	cmp	r0, r8
   1ecd0:	d307      	bcc.n	1ece2 <alloc_chunk+0x3e>
				free_list_remove_bidx(h, c, bi);
   1ecd2:	4632      	mov	r2, r6

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   1ecd4:	4621      	mov	r1, r4
   1ecd6:	4628      	mov	r0, r5
   1ecd8:	f7ff ff9e 	bl	1ec18 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   1ecdc:	4620      	mov	r0, r4
   1ecde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return chunk_field(h, c, FREE_NEXT);
   1ece2:	2203      	movs	r2, #3
   1ece4:	4621      	mov	r1, r4
   1ece6:	4628      	mov	r0, r5
   1ece8:	f7ff ff0c 	bl	1eb04 <chunk_field>
		} while (--i && b->next != first);
   1ecec:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   1ecee:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   1ecf2:	d001      	beq.n	1ecf8 <alloc_chunk+0x54>
   1ecf4:	4581      	cmp	r9, r0
   1ecf6:	d1e4      	bne.n	1ecc2 <alloc_chunk+0x1e>
	uint32_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   1ecf8:	68e9      	ldr	r1, [r5, #12]
   1ecfa:	3601      	adds	r6, #1
   1ecfc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1ed00:	40b4      	lsls	r4, r6
	if (bmask != 0U) {
   1ed02:	400c      	ands	r4, r1
   1ed04:	d0ea      	beq.n	1ecdc <alloc_chunk+0x38>
		int minbucket = __builtin_ctz(bmask);
   1ed06:	fa94 f2a4 	rbit	r2, r4
   1ed0a:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1ed0e:	1d13      	adds	r3, r2, #4
   1ed10:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
   1ed14:	e7de      	b.n	1ecd4 <alloc_chunk+0x30>

0001ed16 <free_list_add>:
{
   1ed16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ed1a:	4604      	mov	r4, r0
   1ed1c:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   1ed1e:	f7ff ff07 	bl	1eb30 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   1ed22:	68a3      	ldr	r3, [r4, #8]
   1ed24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1ed28:	4601      	mov	r1, r0
   1ed2a:	d301      	bcc.n	1ed30 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   1ed2c:	2801      	cmp	r0, #1
   1ed2e:	d035      	beq.n	1ed9c <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1ed30:	4620      	mov	r0, r4
   1ed32:	f7ff ff1f 	bl	1eb74 <bucket_idx>
	if (b->next == 0U) {
   1ed36:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   1ed3a:	6916      	ldr	r6, [r2, #16]
   1ed3c:	b99e      	cbnz	r6, 1ed66 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   1ed3e:	2301      	movs	r3, #1
   1ed40:	fa03 f000 	lsl.w	r0, r3, r0
   1ed44:	68e3      	ldr	r3, [r4, #12]
   1ed46:	4303      	orrs	r3, r0
   1ed48:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   1ed4a:	4629      	mov	r1, r5
		b->next = c;
   1ed4c:	6115      	str	r5, [r2, #16]
   1ed4e:	462b      	mov	r3, r5
   1ed50:	2202      	movs	r2, #2
   1ed52:	4620      	mov	r0, r4
   1ed54:	f7ff fee1 	bl	1eb1a <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1ed58:	2203      	movs	r2, #3
   1ed5a:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   1ed5c:	4620      	mov	r0, r4
}
   1ed5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ed62:	f7ff beda 	b.w	1eb1a <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   1ed66:	2202      	movs	r2, #2
   1ed68:	4631      	mov	r1, r6
   1ed6a:	4620      	mov	r0, r4
   1ed6c:	f7ff feca 	bl	1eb04 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
   1ed70:	2202      	movs	r2, #2
   1ed72:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
   1ed74:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   1ed76:	4629      	mov	r1, r5
   1ed78:	4620      	mov	r0, r4
   1ed7a:	f7ff fece 	bl	1eb1a <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1ed7e:	4633      	mov	r3, r6
   1ed80:	2203      	movs	r2, #3
   1ed82:	4629      	mov	r1, r5
   1ed84:	4620      	mov	r0, r4
   1ed86:	f7ff fec8 	bl	1eb1a <chunk_set>
   1ed8a:	2203      	movs	r2, #3
   1ed8c:	4639      	mov	r1, r7
   1ed8e:	462b      	mov	r3, r5
   1ed90:	4620      	mov	r0, r4
   1ed92:	f7ff fec2 	bl	1eb1a <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1ed96:	2202      	movs	r2, #2
   1ed98:	4631      	mov	r1, r6
   1ed9a:	e7df      	b.n	1ed5c <free_list_add+0x46>
   1ed9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001eda0 <free_chunk>:
{
   1eda0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1eda2:	460c      	mov	r4, r1
   1eda4:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   1eda6:	f7ff fec3 	bl	1eb30 <chunk_size>
   1edaa:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1edac:	2201      	movs	r2, #1
   1edae:	4631      	mov	r1, r6
   1edb0:	4628      	mov	r0, r5
   1edb2:	f7ff fea7 	bl	1eb04 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   1edb6:	07c3      	lsls	r3, r0, #31
   1edb8:	d40c      	bmi.n	1edd4 <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
   1edba:	4631      	mov	r1, r6
   1edbc:	4628      	mov	r0, r5
   1edbe:	f7ff ff5a 	bl	1ec76 <free_list_remove>
	return c + chunk_size(h, c);
   1edc2:	4621      	mov	r1, r4
   1edc4:	4628      	mov	r0, r5
   1edc6:	f7ff feb3 	bl	1eb30 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1edca:	4621      	mov	r1, r4
   1edcc:	1822      	adds	r2, r4, r0
   1edce:	4628      	mov	r0, r5
   1edd0:	f7ff fedd 	bl	1eb8e <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   1edd4:	2200      	movs	r2, #0
   1edd6:	4621      	mov	r1, r4
   1edd8:	4628      	mov	r0, r5
   1edda:	f7ff fe93 	bl	1eb04 <chunk_field>
   1edde:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1ede0:	2201      	movs	r2, #1
   1ede2:	4639      	mov	r1, r7
   1ede4:	4628      	mov	r0, r5
   1ede6:	f7ff fe8d 	bl	1eb04 <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   1edea:	f010 0601 	ands.w	r6, r0, #1
   1edee:	d113      	bne.n	1ee18 <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
   1edf0:	4639      	mov	r1, r7
   1edf2:	4628      	mov	r0, r5
   1edf4:	f7ff ff3f 	bl	1ec76 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   1edf8:	4621      	mov	r1, r4
   1edfa:	4632      	mov	r2, r6
   1edfc:	4628      	mov	r0, r5
   1edfe:	f7ff fe81 	bl	1eb04 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   1ee02:	4622      	mov	r2, r4
   1ee04:	1a21      	subs	r1, r4, r0
   1ee06:	4628      	mov	r0, r5
   1ee08:	f7ff fec1 	bl	1eb8e <merge_chunks>
   1ee0c:	4621      	mov	r1, r4
   1ee0e:	4632      	mov	r2, r6
   1ee10:	4628      	mov	r0, r5
   1ee12:	f7ff fe77 	bl	1eb04 <chunk_field>
   1ee16:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   1ee18:	4621      	mov	r1, r4
   1ee1a:	4628      	mov	r0, r5
}
   1ee1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   1ee20:	f7ff bf79 	b.w	1ed16 <free_list_add>

0001ee24 <sys_heap_free>:
{
   1ee24:	b510      	push	{r4, lr}
	if (mem == NULL) {
   1ee26:	b191      	cbz	r1, 1ee4e <sys_heap_free+0x2a>
	struct z_heap *h = heap->heap;
   1ee28:	6800      	ldr	r0, [r0, #0]
	return big_heap(h) ? 8 : 4;
   1ee2a:	6883      	ldr	r3, [r0, #8]
   1ee2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1ee30:	bf2c      	ite	cs
   1ee32:	2408      	movcs	r4, #8
   1ee34:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1ee36:	1b0c      	subs	r4, r1, r4
   1ee38:	1a24      	subs	r4, r4, r0
   1ee3a:	08e4      	lsrs	r4, r4, #3
	set_chunk_used(h, c, false);
   1ee3c:	4621      	mov	r1, r4
   1ee3e:	2200      	movs	r2, #0
   1ee40:	f7ff fe7c 	bl	1eb3c <set_chunk_used>
	free_chunk(h, c);
   1ee44:	4621      	mov	r1, r4
}
   1ee46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	free_chunk(h, c);
   1ee4a:	f7ff bfa9 	b.w	1eda0 <free_chunk>
}
   1ee4e:	bd10      	pop	{r4, pc}

0001ee50 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1ee50:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1ee52:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   1ee54:	b909      	cbnz	r1, 1ee5a <sys_heap_alloc+0xa>
		return NULL;
   1ee56:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
   1ee58:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   1ee5a:	68ab      	ldr	r3, [r5, #8]
   1ee5c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1ee60:	d9f9      	bls.n	1ee56 <sys_heap_alloc+0x6>
   1ee62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1ee66:	bf2c      	ite	cs
   1ee68:	2208      	movcs	r2, #8
   1ee6a:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1ee6c:	1dcc      	adds	r4, r1, #7
   1ee6e:	4414      	add	r4, r2
   1ee70:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1ee72:	4621      	mov	r1, r4
   1ee74:	4628      	mov	r0, r5
   1ee76:	f7ff ff15 	bl	1eca4 <alloc_chunk>
	if (c == 0U) {
   1ee7a:	4606      	mov	r6, r0
   1ee7c:	2800      	cmp	r0, #0
   1ee7e:	d0ea      	beq.n	1ee56 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   1ee80:	4601      	mov	r1, r0
   1ee82:	4628      	mov	r0, r5
   1ee84:	f7ff fe54 	bl	1eb30 <chunk_size>
   1ee88:	42a0      	cmp	r0, r4
   1ee8a:	d909      	bls.n	1eea0 <sys_heap_alloc+0x50>
		split_chunks(h, c, c + chunk_sz);
   1ee8c:	4434      	add	r4, r6
   1ee8e:	4631      	mov	r1, r6
   1ee90:	4628      	mov	r0, r5
   1ee92:	4622      	mov	r2, r4
   1ee94:	f7ff fe99 	bl	1ebca <split_chunks>
		free_list_add(h, c + chunk_sz);
   1ee98:	4621      	mov	r1, r4
   1ee9a:	4628      	mov	r0, r5
   1ee9c:	f7ff ff3b 	bl	1ed16 <free_list_add>
	set_chunk_used(h, c, true);
   1eea0:	4628      	mov	r0, r5
   1eea2:	2201      	movs	r2, #1
   1eea4:	4631      	mov	r1, r6
   1eea6:	f7ff fe49 	bl	1eb3c <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   1eeaa:	68ab      	ldr	r3, [r5, #8]
   1eeac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1eeb0:	bf2c      	ite	cs
   1eeb2:	2008      	movcs	r0, #8
   1eeb4:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1eeb6:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   1eeba:	4428      	add	r0, r5
	return chunk_mem(h, c);
   1eebc:	e7cc      	b.n	1ee58 <sys_heap_alloc+0x8>

0001eebe <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   1eebe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_heap *h = heap->heap;
   1eec2:	6806      	ldr	r6, [r0, #0]
{
   1eec4:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   1eec6:	424a      	negs	r2, r1
   1eec8:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   1eecc:	ea31 0202 	bics.w	r2, r1, r2
   1eed0:	68b5      	ldr	r5, [r6, #8]
{
   1eed2:	460b      	mov	r3, r1
	if (align != rew) {
   1eed4:	d00f      	beq.n	1eef6 <sys_heap_aligned_alloc+0x38>
   1eed6:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1eeda:	bf34      	ite	cc
   1eedc:	2104      	movcc	r1, #4
   1eede:	2108      	movcs	r1, #8
   1eee0:	42b9      	cmp	r1, r7
   1eee2:	460a      	mov	r2, r1
   1eee4:	46b9      	mov	r9, r7
   1eee6:	bf28      	it	cs
   1eee8:	463a      	movcs	r2, r7
		align -= rew;
   1eeea:	1bdf      	subs	r7, r3, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   1eeec:	b994      	cbnz	r4, 1ef14 <sys_heap_aligned_alloc+0x56>
		return NULL;
   1eeee:	2500      	movs	r5, #0
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
   1eef0:	4628      	mov	r0, r5
   1eef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1eef6:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1eefa:	bf34      	ite	cc
   1eefc:	2204      	movcc	r2, #4
   1eefe:	2208      	movcs	r2, #8
		if (align <= chunk_header_bytes(h)) {
   1ef00:	4291      	cmp	r1, r2
   1ef02:	d804      	bhi.n	1ef0e <sys_heap_aligned_alloc+0x50>
			return sys_heap_alloc(heap, bytes);
   1ef04:	4621      	mov	r1, r4
}
   1ef06:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   1ef0a:	f7ff bfa1 	b.w	1ee50 <sys_heap_alloc>
		rew = 0;
   1ef0e:	f04f 0900 	mov.w	r9, #0
   1ef12:	e7eb      	b.n	1eeec <sys_heap_aligned_alloc+0x2e>
	if (bytes == 0 || size_too_big(h, bytes)) {
   1ef14:	ebb5 0fd4 	cmp.w	r5, r4, lsr #3
   1ef18:	d9e9      	bls.n	1eeee <sys_heap_aligned_alloc+0x30>
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   1ef1a:	1de1      	adds	r1, r4, #7
   1ef1c:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1ef20:	4439      	add	r1, r7
   1ef22:	bf2c      	ite	cs
   1ef24:	2308      	movcs	r3, #8
   1ef26:	2304      	movcc	r3, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1ef28:	1a89      	subs	r1, r1, r2
   1ef2a:	4419      	add	r1, r3
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1ef2c:	08c9      	lsrs	r1, r1, #3
   1ef2e:	4630      	mov	r0, r6
   1ef30:	f7ff feb8 	bl	1eca4 <alloc_chunk>
	if (c0 == 0) {
   1ef34:	4680      	mov	r8, r0
   1ef36:	2800      	cmp	r0, #0
   1ef38:	d0d9      	beq.n	1eeee <sys_heap_aligned_alloc+0x30>
	return big_heap(h) ? 8 : 4;
   1ef3a:	68b3      	ldr	r3, [r6, #8]
   1ef3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1ef40:	bf2c      	ite	cs
   1ef42:	2308      	movcs	r3, #8
   1ef44:	2304      	movcc	r3, #4
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   1ef46:	eb09 05c0 	add.w	r5, r9, r0, lsl #3
   1ef4a:	441d      	add	r5, r3
   1ef4c:	1e7a      	subs	r2, r7, #1
   1ef4e:	4435      	add	r5, r6
   1ef50:	427f      	negs	r7, r7
   1ef52:	4415      	add	r5, r2
   1ef54:	403d      	ands	r5, r7
   1ef56:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1ef5a:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1ef5c:	1aeb      	subs	r3, r5, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1ef5e:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1ef60:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1ef62:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   1ef66:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   1ef68:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1ef6c:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   1ef70:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   1ef74:	d208      	bcs.n	1ef88 <sys_heap_aligned_alloc+0xca>
		split_chunks(h, c0, c);
   1ef76:	4601      	mov	r1, r0
   1ef78:	463a      	mov	r2, r7
   1ef7a:	4630      	mov	r0, r6
   1ef7c:	f7ff fe25 	bl	1ebca <split_chunks>
		free_list_add(h, c0);
   1ef80:	4641      	mov	r1, r8
   1ef82:	4630      	mov	r0, r6
   1ef84:	f7ff fec7 	bl	1ed16 <free_list_add>
	return c + chunk_size(h, c);
   1ef88:	4639      	mov	r1, r7
   1ef8a:	4630      	mov	r0, r6
   1ef8c:	f7ff fdd0 	bl	1eb30 <chunk_size>
   1ef90:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   1ef92:	4284      	cmp	r4, r0
   1ef94:	d208      	bcs.n	1efa8 <sys_heap_aligned_alloc+0xea>
		split_chunks(h, c, c_end);
   1ef96:	4639      	mov	r1, r7
   1ef98:	4630      	mov	r0, r6
   1ef9a:	4622      	mov	r2, r4
   1ef9c:	f7ff fe15 	bl	1ebca <split_chunks>
		free_list_add(h, c_end);
   1efa0:	4621      	mov	r1, r4
   1efa2:	4630      	mov	r0, r6
   1efa4:	f7ff feb7 	bl	1ed16 <free_list_add>
	set_chunk_used(h, c, true);
   1efa8:	2201      	movs	r2, #1
   1efaa:	4639      	mov	r1, r7
   1efac:	4630      	mov	r0, r6
   1efae:	f7ff fdc5 	bl	1eb3c <set_chunk_used>
	return mem;
   1efb2:	e79d      	b.n	1eef0 <sys_heap_aligned_alloc+0x32>

0001efb4 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   1efb4:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   1efb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1efba:	bf2c      	ite	cs
   1efbc:	2508      	movcs	r5, #8
   1efbe:	2504      	movcc	r5, #4
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   1efc0:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1efc2:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1efc4:	440d      	add	r5, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1efc6:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1efca:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1efce:	1b2d      	subs	r5, r5, r4
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   1efd0:	2300      	movs	r3, #0
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1efd2:	08ed      	lsrs	r5, r5, #3
	heap->heap = h;
   1efd4:	6004      	str	r4, [r0, #0]

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1efd6:	4629      	mov	r1, r5
	h->end_chunk = heap_sz;
   1efd8:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
   1efda:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1efdc:	4620      	mov	r0, r4
   1efde:	f7ff fdc9 	bl	1eb74 <bucket_idx>
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1efe2:	0086      	lsls	r6, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1efe4:	361b      	adds	r6, #27
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1efe6:	1c41      	adds	r1, r0, #1
   1efe8:	08f6      	lsrs	r6, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1efea:	f104 0210 	add.w	r2, r4, #16
		h->buckets[i].next = 0;
   1efee:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
   1eff0:	428b      	cmp	r3, r1
   1eff2:	db2f      	blt.n	1f054 <sys_heap_init+0xa0>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   1eff4:	4632      	mov	r2, r6
   1eff6:	4620      	mov	r0, r4
   1eff8:	2100      	movs	r1, #0
   1effa:	f7ff fdb7 	bl	1eb6c <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1effe:	2300      	movs	r3, #0
   1f000:	461a      	mov	r2, r3
   1f002:	4619      	mov	r1, r3
   1f004:	4620      	mov	r0, r4
   1f006:	f7ff fd88 	bl	1eb1a <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1f00a:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
   1f00c:	4620      	mov	r0, r4
   1f00e:	2201      	movs	r2, #1
   1f010:	2100      	movs	r1, #0
   1f012:	f7ff fd93 	bl	1eb3c <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1f016:	463a      	mov	r2, r7
   1f018:	4631      	mov	r1, r6
   1f01a:	f7ff fda7 	bl	1eb6c <set_chunk_size>
   1f01e:	4633      	mov	r3, r6
   1f020:	4631      	mov	r1, r6
   1f022:	4620      	mov	r0, r4
   1f024:	2200      	movs	r2, #0
   1f026:	f7ff fd78 	bl	1eb1a <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
   1f02a:	4629      	mov	r1, r5
   1f02c:	4620      	mov	r0, r4
   1f02e:	2200      	movs	r2, #0
   1f030:	f7ff fd9c 	bl	1eb6c <set_chunk_size>
   1f034:	463b      	mov	r3, r7
   1f036:	4629      	mov	r1, r5
   1f038:	4620      	mov	r0, r4
   1f03a:	2200      	movs	r2, #0
   1f03c:	f7ff fd6d 	bl	1eb1a <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
   1f040:	4629      	mov	r1, r5
   1f042:	4620      	mov	r0, r4
   1f044:	2201      	movs	r2, #1
   1f046:	f7ff fd79 	bl	1eb3c <set_chunk_used>

	free_list_add(h, chunk0_size);
   1f04a:	4631      	mov	r1, r6
}
   1f04c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   1f050:	f7ff be61 	b.w	1ed16 <free_list_add>
		h->buckets[i].next = 0;
   1f054:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   1f058:	3301      	adds	r3, #1
   1f05a:	e7c9      	b.n	1eff0 <sys_heap_init+0x3c>

0001f05c <outs>:
{
   1f05c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f060:	4607      	mov	r7, r0
   1f062:	4688      	mov	r8, r1
   1f064:	4615      	mov	r5, r2
   1f066:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1f068:	4614      	mov	r4, r2
   1f06a:	42b4      	cmp	r4, r6
   1f06c:	eba4 0005 	sub.w	r0, r4, r5
   1f070:	d302      	bcc.n	1f078 <outs+0x1c>
   1f072:	b93e      	cbnz	r6, 1f084 <outs+0x28>
   1f074:	7823      	ldrb	r3, [r4, #0]
   1f076:	b12b      	cbz	r3, 1f084 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   1f078:	f814 0b01 	ldrb.w	r0, [r4], #1
   1f07c:	4641      	mov	r1, r8
   1f07e:	47b8      	blx	r7
		if (rc < 0) {
   1f080:	2800      	cmp	r0, #0
   1f082:	daf2      	bge.n	1f06a <outs+0xe>
}
   1f084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f088 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1f088:	4770      	bx	lr

0001f08a <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   1f08a:	2300      	movs	r3, #0
	list->head = NULL;
   1f08c:	e9c0 3300 	strd	r3, r3, [r0]
}
   1f090:	4770      	bx	lr

0001f092 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   1f092:	6803      	ldr	r3, [r0, #0]
   1f094:	b923      	cbnz	r3, 1f0a0 <log_list_add_tail+0xe>
		list->head = msg;
   1f096:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   1f098:	2300      	movs	r3, #0
	list->tail = msg;
   1f09a:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   1f09c:	600b      	str	r3, [r1, #0]
}
   1f09e:	4770      	bx	lr
		list->tail->next = msg;
   1f0a0:	6843      	ldr	r3, [r0, #4]
   1f0a2:	6019      	str	r1, [r3, #0]
   1f0a4:	e7f8      	b.n	1f098 <log_list_add_tail+0x6>

0001f0a6 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   1f0a6:	6800      	ldr	r0, [r0, #0]
   1f0a8:	4770      	bx	lr

0001f0aa <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   1f0aa:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   1f0ac:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   1f0ae:	b108      	cbz	r0, 1f0b4 <log_list_head_get+0xa>
		list->head = list->head->next;
   1f0b0:	6802      	ldr	r2, [r0, #0]
   1f0b2:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   1f0b4:	4770      	bx	lr

0001f0b6 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   1f0b6:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1f0b8:	f7e4 ff74 	bl	3fa4 <log_msg_chunk_alloc>

	if (msg != NULL) {
   1f0bc:	b118      	cbz	r0, 1f0c6 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   1f0be:	2301      	movs	r3, #1
   1f0c0:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1f0c2:	2300      	movs	r3, #0
   1f0c4:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   1f0c6:	bd08      	pop	{r3, pc}

0001f0c8 <k_cycle_get_32_wrapper>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   1f0c8:	f7e6 b9b8 	b.w	543c <sys_clock_cycle_get_32>

0001f0cc <dummy_timestamp>:
   1f0cc:	2000      	movs	r0, #0
   1f0ce:	4770      	bx	lr

0001f0d0 <log_0>:
{
   1f0d0:	b538      	push	{r3, r4, r5, lr}
   1f0d2:	4605      	mov	r5, r0
   1f0d4:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   1f0d6:	f7ff ffee 	bl	1f0b6 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1f0da:	b128      	cbz	r0, 1f0e8 <log_0+0x18>
		msg->str = str;
   1f0dc:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   1f0de:	4621      	mov	r1, r4
}
   1f0e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   1f0e4:	f7e4 be78 	b.w	3dd8 <msg_finalize>
}
   1f0e8:	bd38      	pop	{r3, r4, r5, pc}

0001f0ea <log_1>:
{
   1f0ea:	b570      	push	{r4, r5, r6, lr}
   1f0ec:	4606      	mov	r6, r0
   1f0ee:	460d      	mov	r5, r1
   1f0f0:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1f0f2:	f7ff ffe0 	bl	1f0b6 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1f0f6:	b158      	cbz	r0, 1f110 <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   1f0f8:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   1f0fa:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   1f0fc:	2101      	movs	r1, #1
   1f0fe:	f361 1207 	bfi	r2, r1, #4, #4
   1f102:	7242      	strb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   1f104:	6145      	str	r5, [r0, #20]
		msg_finalize(msg, src_level);
   1f106:	4621      	mov	r1, r4
}
   1f108:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   1f10c:	f7e4 be64 	b.w	3dd8 <msg_finalize>
}
   1f110:	bd70      	pop	{r4, r5, r6, pc}

0001f112 <log_2>:
{
   1f112:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f116:	4680      	mov	r8, r0
   1f118:	460f      	mov	r7, r1
   1f11a:	4616      	mov	r6, r2
   1f11c:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1f11e:	f7ff ffca 	bl	1f0b6 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1f122:	b168      	cbz	r0, 1f140 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   1f124:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   1f126:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   1f12a:	2202      	movs	r2, #2
   1f12c:	f362 1307 	bfi	r3, r2, #4, #4
   1f130:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1f132:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg_finalize(msg, src_level);
   1f136:	4629      	mov	r1, r5
}
   1f138:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   1f13c:	f7e4 be4c 	b.w	3dd8 <msg_finalize>
}
   1f140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f144 <log_3>:
{
   1f144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f148:	4680      	mov	r8, r0
   1f14a:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   1f14e:	460f      	mov	r7, r1
   1f150:	4616      	mov	r6, r2
   1f152:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1f154:	f7ff ffaf 	bl	1f0b6 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1f158:	b170      	cbz	r0, 1f178 <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   1f15a:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   1f15c:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   1f160:	2203      	movs	r2, #3
   1f162:	f362 1307 	bfi	r3, r2, #4, #4
   1f166:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1f168:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->payload.single.args[2] = arg3;
   1f16c:	61c5      	str	r5, [r0, #28]
		msg_finalize(msg, src_level);
   1f16e:	4649      	mov	r1, r9
}
   1f170:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   1f174:	f7e4 be30 	b.w	3dd8 <msg_finalize>
}
   1f178:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001f17c <log_n>:
{
   1f17c:	b510      	push	{r4, lr}
   1f17e:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   1f180:	f000 f8b9 	bl	1f2f6 <log_msg_create_n>
		if (msg == NULL) {
   1f184:	b120      	cbz	r0, 1f190 <log_n+0x14>
		msg_finalize(msg, src_level);
   1f186:	4621      	mov	r1, r4
}
   1f188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   1f18c:	f7e4 be24 	b.w	3dd8 <msg_finalize>
}
   1f190:	bd10      	pop	{r4, pc}

0001f192 <log_printk>:
{
   1f192:	b500      	push	{lr}
   1f194:	b0a3      	sub	sp, #140	; 0x8c
   1f196:	4602      	mov	r2, r0
   1f198:	460b      	mov	r3, r1
			length = vsnprintk(str, sizeof(str), fmt, ap);
   1f19a:	a801      	add	r0, sp, #4
   1f19c:	2181      	movs	r1, #129	; 0x81
   1f19e:	f7e3 ff23 	bl	2fe8 <vsnprintk>
			msg = log_msg_hexdump_create(NULL, str, length);
   1f1a2:	2881      	cmp	r0, #129	; 0x81
   1f1a4:	4602      	mov	r2, r0
   1f1a6:	a901      	add	r1, sp, #4
   1f1a8:	bf28      	it	cs
   1f1aa:	2281      	movcs	r2, #129	; 0x81
   1f1ac:	2000      	movs	r0, #0
   1f1ae:	f000 f8f6 	bl	1f39e <log_msg_hexdump_create>
			if (msg == NULL) {
   1f1b2:	b118      	cbz	r0, 1f1bc <log_printk+0x2a>
			msg_finalize(msg, src_level_union.structure);
   1f1b4:	f04f 0100 	mov.w	r1, #0
   1f1b8:	f7e4 fe0e 	bl	3dd8 <msg_finalize>
}
   1f1bc:	b023      	add	sp, #140	; 0x8c
   1f1be:	f85d fb04 	ldr.w	pc, [sp], #4

0001f1c2 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   1f1c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f1c6:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   1f1c8:	8903      	ldrh	r3, [r0, #8]
{
   1f1ca:	f89d 8020 	ldrb.w	r8, [sp, #32]
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   1f1ce:	ebb4 0f93 	cmp.w	r4, r3, lsr #2
{
   1f1d2:	460e      	mov	r6, r1
   1f1d4:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
   1f1d6:	ea4f 0293 	mov.w	r2, r3, lsr #2
	if (offset >= available_len) {
   1f1da:	d303      	bcc.n	1f1e4 <log_msg_hexdump_data_op+0x22>
		*length = 0;
   1f1dc:	2300      	movs	r3, #0
   1f1de:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   1f1e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   1f1e4:	680b      	ldr	r3, [r1, #0]
   1f1e6:	4423      	add	r3, r4
   1f1e8:	4293      	cmp	r3, r2
		*length = available_len - offset;
   1f1ea:	bf84      	itt	hi
   1f1ec:	1b13      	subhi	r3, r2, r4
   1f1ee:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1f1f0:	2a0c      	cmp	r2, #12
	req_len = *length;
   1f1f2:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1f1f6:	d92b      	bls.n	1f250 <log_msg_hexdump_data_op+0x8e>
	if (offset < chunk_len) {
   1f1f8:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   1f1fa:	6947      	ldr	r7, [r0, #20]
	if (offset < chunk_len) {
   1f1fc:	d82e      	bhi.n	1f25c <log_msg_hexdump_data_op+0x9a>
		head_data = msg->payload.ext.data.bytes;
   1f1fe:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1f200:	2208      	movs	r2, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1f202:	454a      	cmp	r2, r9
   1f204:	bf28      	it	cs
   1f206:	464a      	movcs	r2, r9
   1f208:	4615      	mov	r5, r2
		if (put_op) {
   1f20a:	4420      	add	r0, r4
   1f20c:	f1b8 0f00 	cmp.w	r8, #0
   1f210:	d021      	beq.n	1f256 <log_msg_hexdump_data_op+0x94>
   1f212:	4631      	mov	r1, r6
   1f214:	f004 fcf3 	bl	23bfe <memcpy>
		req_len -= cpy_len;
   1f218:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   1f21c:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   1f21e:	f1b9 0f00 	cmp.w	r9, #0
   1f222:	d0dd      	beq.n	1f1e0 <log_msg_hexdump_data_op+0x1e>
   1f224:	2f00      	cmp	r7, #0
   1f226:	d0db      	beq.n	1f1e0 <log_msg_hexdump_data_op+0x1e>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   1f228:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1f22c:	454d      	cmp	r5, r9
   1f22e:	bf28      	it	cs
   1f230:	464d      	movcs	r5, r9
		if (put_op) {
   1f232:	1d20      	adds	r0, r4, #4
   1f234:	4438      	add	r0, r7
   1f236:	462a      	mov	r2, r5
   1f238:	f1b8 0f00 	cmp.w	r8, #0
   1f23c:	d014      	beq.n	1f268 <log_msg_hexdump_data_op+0xa6>
   1f23e:	4631      	mov	r1, r6
   1f240:	f004 fcdd 	bl	23bfe <memcpy>
		req_len -= cpy_len;
   1f244:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   1f248:	683f      	ldr	r7, [r7, #0]
		data += cpy_len;
   1f24a:	442e      	add	r6, r5
		offset = 0;
   1f24c:	2400      	movs	r4, #0
   1f24e:	e7e6      	b.n	1f21e <log_msg_hexdump_data_op+0x5c>
		head_data = msg->payload.single.bytes;
   1f250:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   1f252:	2700      	movs	r7, #0
   1f254:	e7d5      	b.n	1f202 <log_msg_hexdump_data_op+0x40>
   1f256:	4601      	mov	r1, r0
   1f258:	4630      	mov	r0, r6
   1f25a:	e7db      	b.n	1f214 <log_msg_hexdump_data_op+0x52>
		offset -= chunk_len;
   1f25c:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   1f25e:	2c1b      	cmp	r4, #27
   1f260:	d9dd      	bls.n	1f21e <log_msg_hexdump_data_op+0x5c>
			cont = cont->next;
   1f262:	683f      	ldr	r7, [r7, #0]
			offset -= chunk_len;
   1f264:	3c1c      	subs	r4, #28
   1f266:	e7fa      	b.n	1f25e <log_msg_hexdump_data_op+0x9c>
   1f268:	4601      	mov	r1, r0
   1f26a:	4630      	mov	r0, r6
   1f26c:	e7e8      	b.n	1f240 <log_msg_hexdump_data_op+0x7e>

0001f26e <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1f26e:	3004      	adds	r0, #4
   1f270:	f3bf 8f5b 	dmb	ish
   1f274:	e850 3f00 	ldrex	r3, [r0]
   1f278:	3301      	adds	r3, #1
   1f27a:	e840 3200 	strex	r2, r3, [r0]
   1f27e:	2a00      	cmp	r2, #0
   1f280:	d1f8      	bne.n	1f274 <log_msg_get+0x6>
   1f282:	f3bf 8f5b 	dmb	ish
}
   1f286:	4770      	bx	lr

0001f288 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   1f288:	7a40      	ldrb	r0, [r0, #9]
}
   1f28a:	0900      	lsrs	r0, r0, #4
   1f28c:	4770      	bx	lr

0001f28e <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   1f28e:	7a43      	ldrb	r3, [r0, #9]
   1f290:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   1f294:	ea4f 1213 	mov.w	r2, r3, lsr #4
   1f298:	d216      	bcs.n	1f2c8 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1f29a:	2a03      	cmp	r2, #3
   1f29c:	d803      	bhi.n	1f2a6 <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   1f29e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1f2a2:	6948      	ldr	r0, [r1, #20]
   1f2a4:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   1f2a6:	2901      	cmp	r1, #1
   1f2a8:	d803      	bhi.n	1f2b2 <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   1f2aa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1f2ae:	6988      	ldr	r0, [r1, #24]
   1f2b0:	4770      	bx	lr
	cont = msg->payload.ext.next;
   1f2b2:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   1f2b4:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   1f2b6:	2906      	cmp	r1, #6
   1f2b8:	d803      	bhi.n	1f2c2 <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   1f2ba:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1f2be:	6848      	ldr	r0, [r1, #4]
   1f2c0:	4770      	bx	lr
		cont = cont->next;
   1f2c2:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   1f2c4:	3907      	subs	r1, #7
		cont = cont->next;
   1f2c6:	e7f6      	b.n	1f2b6 <log_msg_arg_get+0x28>
		return 0;
   1f2c8:	2000      	movs	r0, #0
}
   1f2ca:	4770      	bx	lr

0001f2cc <log_msg_put>:
{
   1f2cc:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1f2ce:	1d02      	adds	r2, r0, #4
   1f2d0:	f3bf 8f5b 	dmb	ish
   1f2d4:	e852 1f00 	ldrex	r1, [r2]
   1f2d8:	3901      	subs	r1, #1
   1f2da:	e842 1c00 	strex	ip, r1, [r2]
   1f2de:	f1bc 0f00 	cmp.w	ip, #0
   1f2e2:	d1f7      	bne.n	1f2d4 <log_msg_put+0x8>
   1f2e4:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   1f2e8:	685b      	ldr	r3, [r3, #4]
   1f2ea:	b90b      	cbnz	r3, 1f2f0 <log_msg_put+0x24>
		msg_free(msg);
   1f2ec:	f7e4 be6e 	b.w	3fcc <msg_free>
}
   1f2f0:	4770      	bx	lr

0001f2f2 <log_msg_str_get>:
}
   1f2f2:	6900      	ldr	r0, [r0, #16]
   1f2f4:	4770      	bx	lr

0001f2f6 <log_msg_create_n>:
{
   1f2f6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f2fa:	4681      	mov	r9, r0
   1f2fc:	4688      	mov	r8, r1
   1f2fe:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1f300:	f7e4 fe50 	bl	3fa4 <log_msg_chunk_alloc>
	if (msg != NULL) {
   1f304:	4604      	mov	r4, r0
   1f306:	b330      	cbz	r0, 1f356 <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
   1f308:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   1f30a:	2700      	movs	r7, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1f30c:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   1f30e:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1f310:	8107      	strh	r7, [r0, #8]
   1f312:	d909      	bls.n	1f328 <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
   1f314:	2202      	movs	r2, #2
   1f316:	8102      	strh	r2, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   1f318:	f1a5 0a02 	sub.w	sl, r5, #2
	next = &msg->payload.ext.next;
   1f31c:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   1f320:	6147      	str	r7, [r0, #20]
	while (n > 0) {
   1f322:	f1ba 0f00 	cmp.w	sl, #0
   1f326:	dc0e      	bgt.n	1f346 <log_msg_create_n+0x50>
		msg->hdr.params.std.nargs = nargs;
   1f328:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
   1f32a:	f8c4 9010 	str.w	r9, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   1f32e:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1f332:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   1f334:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1f336:	d818      	bhi.n	1f36a <log_msg_create_n+0x74>
   1f338:	00aa      	lsls	r2, r5, #2
   1f33a:	4641      	mov	r1, r8
   1f33c:	f104 0014 	add.w	r0, r4, #20
   1f340:	f004 fc5d 	bl	23bfe <memcpy>
	while (nargs != 0U) {
   1f344:	e007      	b.n	1f356 <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   1f346:	f7e4 fe2d 	bl	3fa4 <log_msg_chunk_alloc>
		if (cont == NULL) {
   1f34a:	4606      	mov	r6, r0
   1f34c:	b930      	cbnz	r0, 1f35c <log_msg_create_n+0x66>
			msg_free(msg);
   1f34e:	4620      	mov	r0, r4
   1f350:	f7e4 fe3c 	bl	3fcc <msg_free>
			return NULL;
   1f354:	4634      	mov	r4, r6
}
   1f356:	4620      	mov	r0, r4
   1f358:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   1f35c:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   1f360:	f1aa 0a07 	sub.w	sl, sl, #7
   1f364:	6007      	str	r7, [r0, #0]
		next = &cont->next;
   1f366:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
   1f368:	e7db      	b.n	1f322 <log_msg_create_n+0x2c>
   1f36a:	f8d8 3000 	ldr.w	r3, [r8]
   1f36e:	61a3      	str	r3, [r4, #24]
   1f370:	f8d8 3004 	ldr.w	r3, [r8, #4]
	struct log_msg_cont *cont = msg->payload.ext.next;
   1f374:	6967      	ldr	r7, [r4, #20]
   1f376:	61e3      	str	r3, [r4, #28]
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   1f378:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   1f37a:	f108 0808 	add.w	r8, r8, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   1f37e:	2d07      	cmp	r5, #7
   1f380:	462e      	mov	r6, r5
   1f382:	bf28      	it	cs
   1f384:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   1f386:	ea4f 0986 	mov.w	r9, r6, lsl #2
   1f38a:	4641      	mov	r1, r8
   1f38c:	1d38      	adds	r0, r7, #4
   1f38e:	464a      	mov	r2, r9
   1f390:	f004 fc35 	bl	23bfe <memcpy>
	while (nargs != 0U) {
   1f394:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   1f396:	683f      	ldr	r7, [r7, #0]
		args += cpy_args;
   1f398:	44c8      	add	r8, r9
	while (nargs != 0U) {
   1f39a:	d1f0      	bne.n	1f37e <log_msg_create_n+0x88>
   1f39c:	e7db      	b.n	1f356 <log_msg_create_n+0x60>

0001f39e <log_msg_hexdump_create>:
{
   1f39e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   1f3a2:	f643 75ff 	movw	r5, #16383	; 0x3fff
   1f3a6:	4295      	cmp	r5, r2
{
   1f3a8:	4680      	mov	r8, r0
   1f3aa:	460e      	mov	r6, r1
   1f3ac:	4617      	mov	r7, r2
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   1f3ae:	bf28      	it	cs
   1f3b0:	4615      	movcs	r5, r2
	msg = (struct log_msg *)log_msg_chunk_alloc();
   1f3b2:	f7e4 fdf7 	bl	3fa4 <log_msg_chunk_alloc>
	if (msg == NULL) {
   1f3b6:	4604      	mov	r4, r0
   1f3b8:	b378      	cbz	r0, 1f41a <log_msg_hexdump_create+0x7c>
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   1f3ba:	8902      	ldrh	r2, [r0, #8]
	msg->str = str;
   1f3bc:	f8c0 8010 	str.w	r8, [r0, #16]
	msg->hdr.ref_cnt = 1;
   1f3c0:	2301      	movs	r3, #1
   1f3c2:	6043      	str	r3, [r0, #4]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   1f3c4:	00ab      	lsls	r3, r5, #2
   1f3c6:	f043 0301 	orr.w	r3, r3, #1
   1f3ca:	f002 0202 	and.w	r2, r2, #2
   1f3ce:	4313      	orrs	r3, r2
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1f3d0:	2f0c      	cmp	r7, #12
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   1f3d2:	8103      	strh	r3, [r0, #8]
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1f3d4:	f100 0814 	add.w	r8, r0, #20
   1f3d8:	d916      	bls.n	1f408 <log_msg_hexdump_create+0x6a>
   1f3da:	6833      	ldr	r3, [r6, #0]
		msg->hdr.params.generic.ext = 1;
   1f3dc:	7a02      	ldrb	r2, [r0, #8]
   1f3de:	6183      	str	r3, [r0, #24]
   1f3e0:	6873      	ldr	r3, [r6, #4]
   1f3e2:	61c3      	str	r3, [r0, #28]
   1f3e4:	f042 0202 	orr.w	r2, r2, #2
		msg->payload.ext.next = NULL;
   1f3e8:	2300      	movs	r3, #0
   1f3ea:	6143      	str	r3, [r0, #20]
		msg->hdr.params.generic.ext = 1;
   1f3ec:	7202      	strb	r2, [r0, #8]
		data += LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1f3ee:	3608      	adds	r6, #8
		length -= LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1f3f0:	3d08      	subs	r5, #8
	while (length > 0) {
   1f3f2:	4699      	mov	r9, r3
   1f3f4:	b18d      	cbz	r5, 1f41a <log_msg_hexdump_create+0x7c>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   1f3f6:	f7e4 fdd5 	bl	3fa4 <log_msg_chunk_alloc>
		if (cont == NULL) {
   1f3fa:	4607      	mov	r7, r0
   1f3fc:	b980      	cbnz	r0, 1f420 <log_msg_hexdump_create+0x82>
			msg_free(msg);
   1f3fe:	4620      	mov	r0, r4
   1f400:	f7e4 fde4 	bl	3fcc <msg_free>
			return NULL;
   1f404:	463c      	mov	r4, r7
   1f406:	e008      	b.n	1f41a <log_msg_hexdump_create+0x7c>
   1f408:	462a      	mov	r2, r5
   1f40a:	4631      	mov	r1, r6
   1f40c:	4640      	mov	r0, r8
   1f40e:	f004 fbf6 	bl	23bfe <memcpy>
		msg->hdr.params.generic.ext = 0;
   1f412:	7a23      	ldrb	r3, [r4, #8]
   1f414:	f36f 0341 	bfc	r3, #1, #1
   1f418:	7223      	strb	r3, [r4, #8]
}
   1f41a:	4620      	mov	r0, r4
   1f41c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		chunk_length = (length > HEXDUMP_BYTES_CONT_MSG) ?
   1f420:	2d1c      	cmp	r5, #28
   1f422:	462f      	mov	r7, r5
   1f424:	bf28      	it	cs
   1f426:	271c      	movcs	r7, #28
		*prev_cont = cont;
   1f428:	f8c8 0000 	str.w	r0, [r8]
   1f42c:	4631      	mov	r1, r6
		cont->next = NULL;
   1f42e:	f8c0 9000 	str.w	r9, [r0]
		prev_cont = &cont->next;
   1f432:	4680      	mov	r8, r0
   1f434:	463a      	mov	r2, r7
   1f436:	3004      	adds	r0, #4
   1f438:	f004 fbe1 	bl	23bfe <memcpy>
		data += chunk_length;
   1f43c:	443e      	add	r6, r7
		length -= chunk_length;
   1f43e:	1bed      	subs	r5, r5, r7
   1f440:	e7d8      	b.n	1f3f4 <log_msg_hexdump_create+0x56>

0001f442 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   1f442:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   1f444:	2400      	movs	r4, #0
   1f446:	9400      	str	r4, [sp, #0]
   1f448:	f7ff febb 	bl	1f1c2 <log_msg_hexdump_data_op>
}
   1f44c:	b002      	add	sp, #8
   1f44e:	bd10      	pop	{r4, pc}

0001f450 <buffer_write>:
{
   1f450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f452:	4606      	mov	r6, r0
   1f454:	460d      	mov	r5, r1
   1f456:	4614      	mov	r4, r2
   1f458:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   1f45a:	4621      	mov	r1, r4
   1f45c:	4628      	mov	r0, r5
   1f45e:	463a      	mov	r2, r7
   1f460:	47b0      	blx	r6
	} while (len != 0);
   1f462:	1a24      	subs	r4, r4, r0
		buf += processed;
   1f464:	4405      	add	r5, r0
	} while (len != 0);
   1f466:	d1f8      	bne.n	1f45a <buffer_write+0xa>
}
   1f468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001f46a <std_print>:
{
   1f46a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f46e:	b08e      	sub	sp, #56	; 0x38
   1f470:	af0e      	add	r7, sp, #56	; 0x38
   1f472:	4680      	mov	r8, r0
   1f474:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   1f476:	f7ff ff3c 	bl	1f2f2 <log_msg_str_get>
   1f47a:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   1f47c:	4640      	mov	r0, r8
   1f47e:	f7ff ff03 	bl	1f288 <log_msg_nargs_get>
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   1f482:	0083      	lsls	r3, r0, #2
   1f484:	3307      	adds	r3, #7
   1f486:	f023 0307 	bic.w	r3, r3, #7
   1f48a:	ebad 0d03 	sub.w	sp, sp, r3
	uint32_t nargs = log_msg_nargs_get(msg);
   1f48e:	4682      	mov	sl, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   1f490:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   1f492:	f04f 0900 	mov.w	r9, #0
   1f496:	45d1      	cmp	r9, sl
   1f498:	d116      	bne.n	1f4c8 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   1f49a:	4640      	mov	r0, r8
   1f49c:	f7ff fef4 	bl	1f288 <log_msg_nargs_get>
   1f4a0:	280f      	cmp	r0, #15
   1f4a2:	d81e      	bhi.n	1f4e2 <std_print+0x78>
   1f4a4:	e8df f010 	tbh	[pc, r0, lsl #1]
   1f4a8:	00200019 	.word	0x00200019
   1f4ac:	002d0026 	.word	0x002d0026
   1f4b0:	00410036 	.word	0x00410036
   1f4b4:	005d004e 	.word	0x005d004e
   1f4b8:	0081006e 	.word	0x0081006e
   1f4bc:	00ad0096 	.word	0x00ad0096
   1f4c0:	00e100c6 	.word	0x00e100c6
   1f4c4:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
   1f4c8:	4649      	mov	r1, r9
   1f4ca:	4640      	mov	r0, r8
   1f4cc:	f7ff fedf 	bl	1f28e <log_msg_arg_get>
   1f4d0:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   1f4d4:	f109 0901 	add.w	r9, r9, #1
   1f4d8:	e7dd      	b.n	1f496 <std_print+0x2c>
		print_formatted(output, str);
   1f4da:	4631      	mov	r1, r6
   1f4dc:	4628      	mov	r0, r5
   1f4de:	f7e4 fdb3 	bl	4048 <print_formatted>
}
   1f4e2:	46bd      	mov	sp, r7
   1f4e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
   1f4e8:	6822      	ldr	r2, [r4, #0]
   1f4ea:	4631      	mov	r1, r6
   1f4ec:	4628      	mov	r0, r5
   1f4ee:	f7e4 fdab 	bl	4048 <print_formatted>
		break;
   1f4f2:	e7f6      	b.n	1f4e2 <std_print+0x78>
		print_formatted(output, str, args[0], args[1]);
   1f4f4:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f4f8:	4631      	mov	r1, r6
   1f4fa:	4628      	mov	r0, r5
   1f4fc:	f7e4 fda4 	bl	4048 <print_formatted>
		break;
   1f500:	e7ef      	b.n	1f4e2 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2]);
   1f502:	68a3      	ldr	r3, [r4, #8]
   1f504:	9300      	str	r3, [sp, #0]
   1f506:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f50a:	4631      	mov	r1, r6
   1f50c:	4628      	mov	r0, r5
   1f50e:	f7e4 fd9b 	bl	4048 <print_formatted>
		break;
   1f512:	e7e6      	b.n	1f4e2 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1f514:	68e3      	ldr	r3, [r4, #12]
   1f516:	9301      	str	r3, [sp, #4]
   1f518:	68a3      	ldr	r3, [r4, #8]
   1f51a:	9300      	str	r3, [sp, #0]
   1f51c:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f520:	4631      	mov	r1, r6
   1f522:	4628      	mov	r0, r5
   1f524:	f7e4 fd90 	bl	4048 <print_formatted>
		break;
   1f528:	e7db      	b.n	1f4e2 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1f52a:	6923      	ldr	r3, [r4, #16]
   1f52c:	9302      	str	r3, [sp, #8]
   1f52e:	68e3      	ldr	r3, [r4, #12]
   1f530:	9301      	str	r3, [sp, #4]
   1f532:	68a3      	ldr	r3, [r4, #8]
   1f534:	9300      	str	r3, [sp, #0]
   1f536:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f53a:	4631      	mov	r1, r6
   1f53c:	4628      	mov	r0, r5
   1f53e:	f7e4 fd83 	bl	4048 <print_formatted>
		break;
   1f542:	e7ce      	b.n	1f4e2 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1f544:	6963      	ldr	r3, [r4, #20]
   1f546:	9303      	str	r3, [sp, #12]
   1f548:	6923      	ldr	r3, [r4, #16]
   1f54a:	9302      	str	r3, [sp, #8]
   1f54c:	68e3      	ldr	r3, [r4, #12]
   1f54e:	9301      	str	r3, [sp, #4]
   1f550:	68a3      	ldr	r3, [r4, #8]
   1f552:	9300      	str	r3, [sp, #0]
   1f554:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f558:	4631      	mov	r1, r6
   1f55a:	4628      	mov	r0, r5
   1f55c:	f7e4 fd74 	bl	4048 <print_formatted>
		break;
   1f560:	e7bf      	b.n	1f4e2 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1f562:	69a3      	ldr	r3, [r4, #24]
   1f564:	9304      	str	r3, [sp, #16]
   1f566:	6963      	ldr	r3, [r4, #20]
   1f568:	9303      	str	r3, [sp, #12]
   1f56a:	6923      	ldr	r3, [r4, #16]
   1f56c:	9302      	str	r3, [sp, #8]
   1f56e:	68e3      	ldr	r3, [r4, #12]
   1f570:	9301      	str	r3, [sp, #4]
   1f572:	68a3      	ldr	r3, [r4, #8]
   1f574:	9300      	str	r3, [sp, #0]
   1f576:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f57a:	4631      	mov	r1, r6
   1f57c:	4628      	mov	r0, r5
   1f57e:	f7e4 fd63 	bl	4048 <print_formatted>
		break;
   1f582:	e7ae      	b.n	1f4e2 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1f584:	69e3      	ldr	r3, [r4, #28]
   1f586:	9305      	str	r3, [sp, #20]
   1f588:	69a3      	ldr	r3, [r4, #24]
   1f58a:	9304      	str	r3, [sp, #16]
   1f58c:	6963      	ldr	r3, [r4, #20]
   1f58e:	9303      	str	r3, [sp, #12]
   1f590:	6923      	ldr	r3, [r4, #16]
   1f592:	9302      	str	r3, [sp, #8]
   1f594:	68e3      	ldr	r3, [r4, #12]
   1f596:	9301      	str	r3, [sp, #4]
   1f598:	68a3      	ldr	r3, [r4, #8]
   1f59a:	9300      	str	r3, [sp, #0]
   1f59c:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f5a0:	4631      	mov	r1, r6
   1f5a2:	4628      	mov	r0, r5
   1f5a4:	f7e4 fd50 	bl	4048 <print_formatted>
		break;
   1f5a8:	e79b      	b.n	1f4e2 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1f5aa:	6a23      	ldr	r3, [r4, #32]
   1f5ac:	9306      	str	r3, [sp, #24]
   1f5ae:	69e3      	ldr	r3, [r4, #28]
   1f5b0:	9305      	str	r3, [sp, #20]
   1f5b2:	69a3      	ldr	r3, [r4, #24]
   1f5b4:	9304      	str	r3, [sp, #16]
   1f5b6:	6963      	ldr	r3, [r4, #20]
   1f5b8:	9303      	str	r3, [sp, #12]
   1f5ba:	6923      	ldr	r3, [r4, #16]
   1f5bc:	9302      	str	r3, [sp, #8]
   1f5be:	68e3      	ldr	r3, [r4, #12]
   1f5c0:	9301      	str	r3, [sp, #4]
   1f5c2:	68a3      	ldr	r3, [r4, #8]
   1f5c4:	9300      	str	r3, [sp, #0]
   1f5c6:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f5ca:	4631      	mov	r1, r6
   1f5cc:	4628      	mov	r0, r5
   1f5ce:	f7e4 fd3b 	bl	4048 <print_formatted>
		break;
   1f5d2:	e786      	b.n	1f4e2 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1f5d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f5d6:	9307      	str	r3, [sp, #28]
   1f5d8:	6a23      	ldr	r3, [r4, #32]
   1f5da:	9306      	str	r3, [sp, #24]
   1f5dc:	69e3      	ldr	r3, [r4, #28]
   1f5de:	9305      	str	r3, [sp, #20]
   1f5e0:	69a3      	ldr	r3, [r4, #24]
   1f5e2:	9304      	str	r3, [sp, #16]
   1f5e4:	6963      	ldr	r3, [r4, #20]
   1f5e6:	9303      	str	r3, [sp, #12]
   1f5e8:	6923      	ldr	r3, [r4, #16]
   1f5ea:	9302      	str	r3, [sp, #8]
   1f5ec:	68e3      	ldr	r3, [r4, #12]
   1f5ee:	9301      	str	r3, [sp, #4]
   1f5f0:	68a3      	ldr	r3, [r4, #8]
   1f5f2:	9300      	str	r3, [sp, #0]
   1f5f4:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f5f8:	4631      	mov	r1, r6
   1f5fa:	4628      	mov	r0, r5
   1f5fc:	f7e4 fd24 	bl	4048 <print_formatted>
		break;
   1f600:	e76f      	b.n	1f4e2 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1f602:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1f604:	9308      	str	r3, [sp, #32]
   1f606:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f608:	9307      	str	r3, [sp, #28]
   1f60a:	6a23      	ldr	r3, [r4, #32]
   1f60c:	9306      	str	r3, [sp, #24]
   1f60e:	69e3      	ldr	r3, [r4, #28]
   1f610:	9305      	str	r3, [sp, #20]
   1f612:	69a3      	ldr	r3, [r4, #24]
   1f614:	9304      	str	r3, [sp, #16]
   1f616:	6963      	ldr	r3, [r4, #20]
   1f618:	9303      	str	r3, [sp, #12]
   1f61a:	6923      	ldr	r3, [r4, #16]
   1f61c:	9302      	str	r3, [sp, #8]
   1f61e:	68e3      	ldr	r3, [r4, #12]
   1f620:	9301      	str	r3, [sp, #4]
   1f622:	68a3      	ldr	r3, [r4, #8]
   1f624:	9300      	str	r3, [sp, #0]
   1f626:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f62a:	4631      	mov	r1, r6
   1f62c:	4628      	mov	r0, r5
   1f62e:	f7e4 fd0b 	bl	4048 <print_formatted>
		break;
   1f632:	e756      	b.n	1f4e2 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1f634:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1f636:	9309      	str	r3, [sp, #36]	; 0x24
   1f638:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1f63a:	9308      	str	r3, [sp, #32]
   1f63c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f63e:	9307      	str	r3, [sp, #28]
   1f640:	6a23      	ldr	r3, [r4, #32]
   1f642:	9306      	str	r3, [sp, #24]
   1f644:	69e3      	ldr	r3, [r4, #28]
   1f646:	9305      	str	r3, [sp, #20]
   1f648:	69a3      	ldr	r3, [r4, #24]
   1f64a:	9304      	str	r3, [sp, #16]
   1f64c:	6963      	ldr	r3, [r4, #20]
   1f64e:	9303      	str	r3, [sp, #12]
   1f650:	6923      	ldr	r3, [r4, #16]
   1f652:	9302      	str	r3, [sp, #8]
   1f654:	68e3      	ldr	r3, [r4, #12]
   1f656:	9301      	str	r3, [sp, #4]
   1f658:	68a3      	ldr	r3, [r4, #8]
   1f65a:	9300      	str	r3, [sp, #0]
   1f65c:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f660:	4631      	mov	r1, r6
   1f662:	4628      	mov	r0, r5
   1f664:	f7e4 fcf0 	bl	4048 <print_formatted>
		break;
   1f668:	e73b      	b.n	1f4e2 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1f66a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1f66c:	930a      	str	r3, [sp, #40]	; 0x28
   1f66e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1f670:	9309      	str	r3, [sp, #36]	; 0x24
   1f672:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1f674:	9308      	str	r3, [sp, #32]
   1f676:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f678:	9307      	str	r3, [sp, #28]
   1f67a:	6a23      	ldr	r3, [r4, #32]
   1f67c:	9306      	str	r3, [sp, #24]
   1f67e:	69e3      	ldr	r3, [r4, #28]
   1f680:	9305      	str	r3, [sp, #20]
   1f682:	69a3      	ldr	r3, [r4, #24]
   1f684:	9304      	str	r3, [sp, #16]
   1f686:	6963      	ldr	r3, [r4, #20]
   1f688:	9303      	str	r3, [sp, #12]
   1f68a:	6923      	ldr	r3, [r4, #16]
   1f68c:	9302      	str	r3, [sp, #8]
   1f68e:	68e3      	ldr	r3, [r4, #12]
   1f690:	9301      	str	r3, [sp, #4]
   1f692:	68a3      	ldr	r3, [r4, #8]
   1f694:	9300      	str	r3, [sp, #0]
   1f696:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f69a:	4631      	mov	r1, r6
   1f69c:	4628      	mov	r0, r5
   1f69e:	f7e4 fcd3 	bl	4048 <print_formatted>
		break;
   1f6a2:	e71e      	b.n	1f4e2 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1f6a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1f6a6:	930b      	str	r3, [sp, #44]	; 0x2c
   1f6a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1f6aa:	930a      	str	r3, [sp, #40]	; 0x28
   1f6ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1f6ae:	9309      	str	r3, [sp, #36]	; 0x24
   1f6b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1f6b2:	9308      	str	r3, [sp, #32]
   1f6b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f6b6:	9307      	str	r3, [sp, #28]
   1f6b8:	6a23      	ldr	r3, [r4, #32]
   1f6ba:	9306      	str	r3, [sp, #24]
   1f6bc:	69e3      	ldr	r3, [r4, #28]
   1f6be:	9305      	str	r3, [sp, #20]
   1f6c0:	69a3      	ldr	r3, [r4, #24]
   1f6c2:	9304      	str	r3, [sp, #16]
   1f6c4:	6963      	ldr	r3, [r4, #20]
   1f6c6:	9303      	str	r3, [sp, #12]
   1f6c8:	6923      	ldr	r3, [r4, #16]
   1f6ca:	9302      	str	r3, [sp, #8]
   1f6cc:	68e3      	ldr	r3, [r4, #12]
   1f6ce:	9301      	str	r3, [sp, #4]
   1f6d0:	68a3      	ldr	r3, [r4, #8]
   1f6d2:	9300      	str	r3, [sp, #0]
   1f6d4:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f6d8:	4631      	mov	r1, r6
   1f6da:	4628      	mov	r0, r5
   1f6dc:	f7e4 fcb4 	bl	4048 <print_formatted>
		break;
   1f6e0:	e6ff      	b.n	1f4e2 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1f6e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1f6e4:	930c      	str	r3, [sp, #48]	; 0x30
   1f6e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1f6e8:	930b      	str	r3, [sp, #44]	; 0x2c
   1f6ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1f6ec:	930a      	str	r3, [sp, #40]	; 0x28
   1f6ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1f6f0:	9309      	str	r3, [sp, #36]	; 0x24
   1f6f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1f6f4:	9308      	str	r3, [sp, #32]
   1f6f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f6f8:	9307      	str	r3, [sp, #28]
   1f6fa:	6a23      	ldr	r3, [r4, #32]
   1f6fc:	9306      	str	r3, [sp, #24]
   1f6fe:	69e3      	ldr	r3, [r4, #28]
   1f700:	9305      	str	r3, [sp, #20]
   1f702:	69a3      	ldr	r3, [r4, #24]
   1f704:	9304      	str	r3, [sp, #16]
   1f706:	6963      	ldr	r3, [r4, #20]
   1f708:	9303      	str	r3, [sp, #12]
   1f70a:	6923      	ldr	r3, [r4, #16]
   1f70c:	9302      	str	r3, [sp, #8]
   1f70e:	68e3      	ldr	r3, [r4, #12]
   1f710:	9301      	str	r3, [sp, #4]
   1f712:	68a3      	ldr	r3, [r4, #8]
   1f714:	9300      	str	r3, [sp, #0]
   1f716:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f71a:	4631      	mov	r1, r6
   1f71c:	4628      	mov	r0, r5
   1f71e:	f7e4 fc93 	bl	4048 <print_formatted>
}
   1f722:	e6de      	b.n	1f4e2 <std_print+0x78>

0001f724 <log_output_flush>:
		     output->control_block->offset,
   1f724:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   1f726:	6881      	ldr	r1, [r0, #8]
{
   1f728:	b510      	push	{r4, lr}
   1f72a:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   1f72c:	e9d2 2300 	ldrd	r2, r3, [r2]
   1f730:	6800      	ldr	r0, [r0, #0]
   1f732:	f7ff fe8d 	bl	1f450 <buffer_write>
	output->control_block->offset = 0;
   1f736:	6863      	ldr	r3, [r4, #4]
   1f738:	2200      	movs	r2, #0
   1f73a:	601a      	str	r2, [r3, #0]
}
   1f73c:	bd10      	pop	{r4, pc}

0001f73e <out_func>:
{
   1f73e:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   1f740:	684b      	ldr	r3, [r1, #4]
   1f742:	681a      	ldr	r2, [r3, #0]
   1f744:	68cb      	ldr	r3, [r1, #12]
   1f746:	429a      	cmp	r2, r3
{
   1f748:	4605      	mov	r5, r0
   1f74a:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   1f74c:	d102      	bne.n	1f754 <out_func+0x16>
		log_output_flush(out_ctx);
   1f74e:	4608      	mov	r0, r1
   1f750:	f7ff ffe8 	bl	1f724 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1f754:	6863      	ldr	r3, [r4, #4]
   1f756:	f3bf 8f5b 	dmb	ish
   1f75a:	e853 2f00 	ldrex	r2, [r3]
   1f75e:	1c51      	adds	r1, r2, #1
   1f760:	e843 1000 	strex	r0, r1, [r3]
   1f764:	2800      	cmp	r0, #0
   1f766:	d1f8      	bne.n	1f75a <out_func+0x1c>
   1f768:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   1f76c:	68a3      	ldr	r3, [r4, #8]
   1f76e:	549d      	strb	r5, [r3, r2]
}
   1f770:	2000      	movs	r0, #0
   1f772:	bd38      	pop	{r3, r4, r5, pc}

0001f774 <read_str>:
#endif /* CONFIG_BT_DIS_SETTINGS */

static ssize_t read_str(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  uint16_t len, uint16_t offset)
{
   1f774:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1f778:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   1f77c:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   1f77e:	4640      	mov	r0, r8
{
   1f780:	461f      	mov	r7, r3
   1f782:	460c      	mov	r4, r1
   1f784:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   1f786:	f7e1 fadf 	bl	d48 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1f78a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1f78e:	9300      	str	r3, [sp, #0]
   1f790:	b280      	uxth	r0, r0
   1f792:	e9cd 8001 	strd	r8, r0, [sp, #4]
   1f796:	463b      	mov	r3, r7
   1f798:	4632      	mov	r2, r6
   1f79a:	4621      	mov	r1, r4
   1f79c:	4628      	mov	r0, r5
   1f79e:	f002 fce9 	bl	22174 <bt_gatt_attr_read>
}
   1f7a2:	b004      	add	sp, #16
   1f7a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f7a8 <lora_send>:
	return api->send(dev, data, data_len);
   1f7a8:	6883      	ldr	r3, [r0, #8]
   1f7aa:	685b      	ldr	r3, [r3, #4]
   1f7ac:	4718      	bx	r3

0001f7ae <lses_init>:
}
   1f7ae:	2000      	movs	r0, #0
   1f7b0:	4770      	bx	lr

0001f7b2 <change_config_cb>:
{
   1f7b2:	b508      	push	{r3, lr}
	change_config(pu, true);
   1f7b4:	4610      	mov	r0, r2
   1f7b6:	2101      	movs	r1, #1
   1f7b8:	f7e5 f97a 	bl	4ab0 <change_config>
	bt_lses_notify(-2);
   1f7bc:	f06f 0001 	mvn.w	r0, #1
   1f7c0:	f7e5 f9ca 	bl	4b58 <bt_lses_notify>
}
   1f7c4:	2000      	movs	r0, #0
   1f7c6:	bd08      	pop	{r3, pc}

0001f7c8 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   1f7c8:	2200      	movs	r2, #0
   1f7ca:	8002      	strh	r2, [r0, #0]
   1f7cc:	6042      	str	r2, [r0, #4]
}
   1f7ce:	4770      	bx	lr

0001f7d0 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1f7d0:	6902      	ldr	r2, [r0, #16]
   1f7d2:	b2cb      	uxtb	r3, r1
   1f7d4:	210c      	movs	r1, #12
   1f7d6:	fb03 2101 	mla	r1, r3, r1, r2
   1f7da:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
   1f7dc:	f000 0007 	and.w	r0, r0, #7
   1f7e0:	4770      	bx	lr

0001f7e2 <set_off_state>:
	__asm__ volatile(
   1f7e2:	f04f 0320 	mov.w	r3, #32
   1f7e6:	f3ef 8211 	mrs	r2, BASEPRI
   1f7ea:	f383 8811 	msr	BASEPRI, r3
   1f7ee:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1f7f2:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1f7f4:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   1f7f8:	d001      	beq.n	1f7fe <set_off_state+0x1c>
   1f7fa:	428b      	cmp	r3, r1
   1f7fc:	d107      	bne.n	1f80e <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1f7fe:	2301      	movs	r3, #1
   1f800:	6003      	str	r3, [r0, #0]
	int err = 0;
   1f802:	2000      	movs	r0, #0
	__asm__ volatile(
   1f804:	f382 8811 	msr	BASEPRI, r2
   1f808:	f3bf 8f6f 	isb	sy
}
   1f80c:	4770      	bx	lr
		err = -EPERM;
   1f80e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f812:	e7f7      	b.n	1f804 <set_off_state+0x22>

0001f814 <set_starting_state>:
{
   1f814:	b510      	push	{r4, lr}
	__asm__ volatile(
   1f816:	f04f 0320 	mov.w	r3, #32
   1f81a:	f3ef 8211 	mrs	r2, BASEPRI
   1f81e:	f383 8811 	msr	BASEPRI, r3
   1f822:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1f826:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1f828:	f003 0407 	and.w	r4, r3, #7
   1f82c:	2c01      	cmp	r4, #1
   1f82e:	d106      	bne.n	1f83e <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1f830:	6001      	str	r1, [r0, #0]
	int err = 0;
   1f832:	2000      	movs	r0, #0
	__asm__ volatile(
   1f834:	f382 8811 	msr	BASEPRI, r2
   1f838:	f3bf 8f6f 	isb	sy
}
   1f83c:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1f83e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   1f842:	428b      	cmp	r3, r1
		err = -EALREADY;
   1f844:	bf14      	ite	ne
   1f846:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1f84a:	f06f 0077 	mvneq.w	r0, #119	; 0x77
   1f84e:	e7f1      	b.n	1f834 <set_starting_state+0x20>

0001f850 <set_on_state>:
	__asm__ volatile(
   1f850:	f04f 0320 	mov.w	r3, #32
   1f854:	f3ef 8211 	mrs	r2, BASEPRI
   1f858:	f383 8811 	msr	BASEPRI, r3
   1f85c:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1f860:	6803      	ldr	r3, [r0, #0]
   1f862:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1f866:	f043 0302 	orr.w	r3, r3, #2
   1f86a:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1f86c:	f382 8811 	msr	BASEPRI, r2
   1f870:	f3bf 8f6f 	isb	sy
}
   1f874:	4770      	bx	lr

0001f876 <onoff_started_callback>:
	return &data->mgr[type];
   1f876:	6900      	ldr	r0, [r0, #16]
{
   1f878:	b410      	push	{r4}
	return &data->mgr[type];
   1f87a:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1f87c:	241c      	movs	r4, #28
   1f87e:	fb03 0004 	mla	r0, r3, r4, r0
   1f882:	2100      	movs	r1, #0
}
   1f884:	bc10      	pop	{r4}
	notify(mgr, 0);
   1f886:	4710      	bx	r2

0001f888 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1f888:	2000      	movs	r0, #0
   1f88a:	f7fd b8b5 	b.w	1c9f8 <nrfx_clock_start>

0001f88e <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1f88e:	2000      	movs	r0, #0
   1f890:	f7fd b8e4 	b.w	1ca5c <nrfx_clock_stop>

0001f894 <blocking_start_callback>:
{
   1f894:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1f896:	f7fe b989 	b.w	1dbac <z_impl_k_sem_give>

0001f89a <api_stop>:
{
   1f89a:	b538      	push	{r3, r4, r5, lr}
   1f89c:	b2c9      	uxtb	r1, r1
	err = set_off_state(&subdata->flags, ctx);
   1f89e:	240c      	movs	r4, #12
   1f8a0:	434c      	muls	r4, r1
{
   1f8a2:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   1f8a4:	6900      	ldr	r0, [r0, #16]
   1f8a6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1f8aa:	2180      	movs	r1, #128	; 0x80
   1f8ac:	4418      	add	r0, r3
   1f8ae:	f7ff ff98 	bl	1f7e2 <set_off_state>
	if (err < 0) {
   1f8b2:	2800      	cmp	r0, #0
   1f8b4:	db04      	blt.n	1f8c0 <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   1f8b6:	6869      	ldr	r1, [r5, #4]
   1f8b8:	440c      	add	r4, r1
   1f8ba:	6863      	ldr	r3, [r4, #4]
   1f8bc:	4798      	blx	r3
	return 0;
   1f8be:	2000      	movs	r0, #0
}
   1f8c0:	bd38      	pop	{r3, r4, r5, pc}

0001f8c2 <api_start>:
{
   1f8c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f8c6:	b2c9      	uxtb	r1, r1
	err = set_starting_state(&subdata->flags, ctx);
   1f8c8:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1f8ca:	6905      	ldr	r5, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
   1f8cc:	434c      	muls	r4, r1
{
   1f8ce:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   1f8d0:	f104 0040 	add.w	r0, r4, #64	; 0x40
   1f8d4:	2180      	movs	r1, #128	; 0x80
   1f8d6:	4428      	add	r0, r5
{
   1f8d8:	4690      	mov	r8, r2
   1f8da:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
   1f8dc:	f7ff ff9a 	bl	1f814 <set_starting_state>
	if (err < 0) {
   1f8e0:	2800      	cmp	r0, #0
   1f8e2:	db06      	blt.n	1f8f2 <api_start+0x30>
	subdata->cb = cb;
   1f8e4:	4425      	add	r5, r4
	subdata->user_data = user_data;
   1f8e6:	e9c5 870e 	strd	r8, r7, [r5, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   1f8ea:	6873      	ldr	r3, [r6, #4]
   1f8ec:	591b      	ldr	r3, [r3, r4]
   1f8ee:	4798      	blx	r3
	return 0;
   1f8f0:	2000      	movs	r0, #0
}
   1f8f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f8f6 <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   1f8f6:	4770      	bx	lr

0001f8f8 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1f8f8:	4770      	bx	lr

0001f8fa <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   1f8fa:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   1f8fc:	68c1      	ldr	r1, [r0, #12]
  if (RdOff <= WrOff) {
   1f8fe:	428b      	cmp	r3, r1
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   1f900:	bf9d      	ittte	ls
   1f902:	6882      	ldrls	r2, [r0, #8]
   1f904:	18d2      	addls	r2, r2, r3
   1f906:	f102 32ff 	addls.w	r2, r2, #4294967295	; 0xffffffff
    r = RdOff - WrOff - 1u;
   1f90a:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   1f90e:	bf94      	ite	ls
   1f910:	1a50      	subls	r0, r2, r1
    r = RdOff - WrOff - 1u;
   1f912:	1a58      	subhi	r0, r3, r1
}
   1f914:	4770      	bx	lr

0001f916 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1f916:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
   1f91a:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1f91e:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   1f920:	eba9 0804 	sub.w	r8, r9, r4
   1f924:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
   1f926:	4590      	cmp	r8, r2
   1f928:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1f92a:	460f      	mov	r7, r1
  if (Rem > NumBytes) {
   1f92c:	4414      	add	r4, r2
   1f92e:	d904      	bls.n	1f93a <_WriteNoCheck+0x24>
   1f930:	f004 f965 	bl	23bfe <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   1f934:	60ec      	str	r4, [r5, #12]
}
   1f936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1f93a:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
   1f93c:	eba4 0409 	sub.w	r4, r4, r9
   1f940:	f004 f95d 	bl	23bfe <memcpy>
   1f944:	6868      	ldr	r0, [r5, #4]
   1f946:	4622      	mov	r2, r4
   1f948:	eb07 0108 	add.w	r1, r7, r8
   1f94c:	e7f0      	b.n	1f930 <_WriteNoCheck+0x1a>

0001f94e <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   1f94e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
   1f952:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   1f954:	4606      	mov	r6, r0
   1f956:	4689      	mov	r9, r1
   1f958:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   1f95a:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   1f95e:	6934      	ldr	r4, [r6, #16]
    if (RdOff > WrOff) {
   1f960:	68b3      	ldr	r3, [r6, #8]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   1f962:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
   1f964:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1f966:	bf28      	it	cs
   1f968:	18e4      	addcs	r4, r4, r3
   1f96a:	3c01      	subs	r4, #1
   1f96c:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   1f96e:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   1f970:	42bc      	cmp	r4, r7
   1f972:	bf28      	it	cs
   1f974:	463c      	movcs	r4, r7
   1f976:	4294      	cmp	r4, r2
   1f978:	bf28      	it	cs
   1f97a:	4614      	movcs	r4, r2
   1f97c:	4649      	mov	r1, r9
   1f97e:	4428      	add	r0, r5
   1f980:	4622      	mov	r2, r4
   1f982:	f004 f93c 	bl	23bfe <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   1f986:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   1f988:	4425      	add	r5, r4
      WrOff = 0u;
   1f98a:	42ab      	cmp	r3, r5
   1f98c:	bf08      	it	eq
   1f98e:	2500      	moveq	r5, #0
  } while (NumBytes);
   1f990:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
   1f992:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   1f994:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
   1f996:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   1f998:	d1e1      	bne.n	1f95e <_WriteBlocking+0x10>
}
   1f99a:	4640      	mov	r0, r8
   1f99c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001f9a0 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   1f9a0:	f7e5 bd66 	b.w	5470 <_DoInit>

0001f9a4 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   1f9a4:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   1f9a6:	f7ff fffb 	bl	1f9a0 <SEGGER_RTT_Init>

	return 0;
}
   1f9aa:	2000      	movs	r0, #0
   1f9ac:	bd08      	pop	{r3, pc}

0001f9ae <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   1f9ae:	b538      	push	{r3, r4, r5, lr}
   1f9b0:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   1f9b2:	42ab      	cmp	r3, r5
{
   1f9b4:	4611      	mov	r1, r2
   1f9b6:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   1f9b8:	d804      	bhi.n	1f9c4 <_copy+0x16>
   1f9ba:	461a      	mov	r2, r3
   1f9bc:	f004 f91f 	bl	23bfe <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   1f9c0:	4620      	mov	r0, r4
   1f9c2:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1f9c4:	2400      	movs	r4, #0
   1f9c6:	e7fb      	b.n	1f9c0 <_copy+0x12>

0001f9c8 <_set>:
__ssp_bos_icheck3(memset, void *, int)
   1f9c8:	f004 b927 	b.w	23c1a <memset>

0001f9cc <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1f9cc:	09c3      	lsrs	r3, r0, #7
   1f9ce:	005a      	lsls	r2, r3, #1
   1f9d0:	4413      	add	r3, r2
   1f9d2:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1f9d6:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1f9da:	b2c0      	uxtb	r0, r0
   1f9dc:	4770      	bx	lr

0001f9de <_set_secure.constprop.0>:
 * @param len IN -- number of times the value will be copied
 */
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
   1f9de:	b510      	push	{r4, lr}
   1f9e0:	460a      	mov	r2, r1
   1f9e2:	2100      	movs	r1, #0
   1f9e4:	4604      	mov	r4, r0
   1f9e6:	f004 f918 	bl	23c1a <memset>
{
  (void) memset(to, val, len);
#ifdef __GNUC__
  __asm__ __volatile__("" :: "g"(to) : "memory");
#endif /* __GNUC__ */
}
   1f9ea:	bd10      	pop	{r4, pc}

0001f9ec <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   1f9ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f9f0:	4605      	mov	r5, r0
   1f9f2:	b0a8      	sub	sp, #160	; 0xa0
   1f9f4:	460f      	mov	r7, r1
   1f9f6:	4614      	mov	r4, r2
   1f9f8:	2640      	movs	r6, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   1f9fa:	f102 0824 	add.w	r8, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   1f9fe:	f7e5 fdf1 	bl	55e4 <uECC_get_rng>
		if (!rng_function ||
   1fa02:	4603      	mov	r3, r0
   1fa04:	2800      	cmp	r0, #0
   1fa06:	d03c      	beq.n	1fa82 <uECC_make_key+0x96>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   1fa08:	2140      	movs	r1, #64	; 0x40
   1fa0a:	a808      	add	r0, sp, #32
   1fa0c:	4798      	blx	r3
		if (!rng_function ||
   1fa0e:	b3c0      	cbz	r0, 1fa82 <uECC_make_key+0x96>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   1fa10:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   1fa14:	f112 031f 	adds.w	r3, r2, #31
   1fa18:	bf48      	it	mi
   1fa1a:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   1fa1e:	a908      	add	r1, sp, #32
   1fa20:	4642      	mov	r2, r8
   1fa22:	4668      	mov	r0, sp
   1fa24:	f343 1347 	sbfx	r3, r3, #5, #8
   1fa28:	f000 f9ff 	bl	1fe2a <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   1fa2c:	4622      	mov	r2, r4
   1fa2e:	4669      	mov	r1, sp
   1fa30:	a818      	add	r0, sp, #96	; 0x60
   1fa32:	f000 fe15 	bl	20660 <EccPoint_compute_public_key>
   1fa36:	b310      	cbz	r0, 1fa7e <uECC_make_key+0x92>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   1fa38:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   1fa3c:	1dd9      	adds	r1, r3, #7
   1fa3e:	bf48      	it	mi
   1fa40:	f103 010e 	addmi.w	r1, r3, #14
   1fa44:	466a      	mov	r2, sp
   1fa46:	10c9      	asrs	r1, r1, #3
   1fa48:	4638      	mov	r0, r7
   1fa4a:	f000 fe31 	bl	206b0 <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   1fa4e:	f994 1001 	ldrsb.w	r1, [r4, #1]
   1fa52:	aa18      	add	r2, sp, #96	; 0x60
   1fa54:	4628      	mov	r0, r5
   1fa56:	f000 fe2b 	bl	206b0 <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   1fa5a:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   1fa5e:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   1fa62:	ab18      	add	r3, sp, #96	; 0x60
   1fa64:	1868      	adds	r0, r5, r1
   1fa66:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   1fa6a:	f000 fe21 	bl	206b0 <uECC_vli_nativeToBytes>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);
   1fa6e:	4668      	mov	r0, sp
   1fa70:	2120      	movs	r1, #32
   1fa72:	f7ff ffb4 	bl	1f9de <_set_secure.constprop.0>

      			return 1;
   1fa76:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   1fa78:	b028      	add	sp, #160	; 0xa0
   1fa7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   1fa7e:	3e01      	subs	r6, #1
   1fa80:	d1bd      	bne.n	1f9fe <uECC_make_key+0x12>
        		return 0;
   1fa82:	2000      	movs	r0, #0
   1fa84:	e7f8      	b.n	1fa78 <uECC_make_key+0x8c>

0001fa86 <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   1fa86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1fa8a:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   1fa8c:	f993 6001 	ldrsb.w	r6, [r3, #1]
	wordcount_t num_words = curve->num_words;
   1fa90:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   1fa94:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   1fa98:	b0a4      	sub	sp, #144	; 0x90
   1fa9a:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   1fa9c:	1dda      	adds	r2, r3, #7
   1fa9e:	bf48      	it	mi
   1faa0:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   1faa4:	ad04      	add	r5, sp, #16
{
   1faa6:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   1faa8:	af0c      	add	r7, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   1faaa:	4628      	mov	r0, r5
   1faac:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   1faae:	9502      	str	r5, [sp, #8]
   1fab0:	9703      	str	r7, [sp, #12]
	uECC_vli_bytesToNative(_private,
   1fab2:	f000 fe11 	bl	206d8 <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   1fab6:	4632      	mov	r2, r6
   1fab8:	4649      	mov	r1, r9
   1faba:	a814      	add	r0, sp, #80	; 0x50
   1fabc:	f000 fe0c 	bl	206d8 <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   1fac0:	ab14      	add	r3, sp, #80	; 0x50
   1fac2:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   1fac6:	4632      	mov	r2, r6
   1fac8:	eb09 0106 	add.w	r1, r9, r6
   1facc:	f000 fe04 	bl	206d8 <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   1fad0:	4623      	mov	r3, r4
   1fad2:	463a      	mov	r2, r7
   1fad4:	4629      	mov	r1, r5
   1fad6:	4628      	mov	r0, r5
   1fad8:	f000 fd96 	bl	20608 <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   1fadc:	fab0 f080 	clz	r0, r0
   1fae0:	9401      	str	r4, [sp, #4]
   1fae2:	ab24      	add	r3, sp, #144	; 0x90
   1fae4:	0940      	lsrs	r0, r0, #5
   1fae6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1faea:	8863      	ldrh	r3, [r4, #2]
   1faec:	3301      	adds	r3, #1
   1faee:	b21b      	sxth	r3, r3
   1faf0:	9300      	str	r3, [sp, #0]
   1faf2:	a914      	add	r1, sp, #80	; 0x50
   1faf4:	2300      	movs	r3, #0
   1faf6:	f850 2c88 	ldr.w	r2, [r0, #-136]
   1fafa:	4608      	mov	r0, r1
   1fafc:	f000 fcb5 	bl	2046a <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   1fb00:	aa14      	add	r2, sp, #80	; 0x50
   1fb02:	4631      	mov	r1, r6
   1fb04:	4640      	mov	r0, r8
   1fb06:	f000 fdd3 	bl	206b0 <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   1fb0a:	4621      	mov	r1, r4
   1fb0c:	a814      	add	r0, sp, #80	; 0x50
   1fb0e:	f000 fc21 	bl	20354 <EccPoint_isZero>

clear_and_out:
	/* erasing temporary buffer used to store secret: */
	_set_secure(p2, 0, sizeof(p2));
   1fb12:	2108      	movs	r1, #8
	r = !EccPoint_isZero(_public, curve);
   1fb14:	4604      	mov	r4, r0
	_set_secure(p2, 0, sizeof(p2));
   1fb16:	eb0d 0001 	add.w	r0, sp, r1
   1fb1a:	f7ff ff60 	bl	1f9de <_set_secure.constprop.0>
	_set_secure(tmp, 0, sizeof(tmp));
   1fb1e:	4638      	mov	r0, r7
   1fb20:	2120      	movs	r1, #32
   1fb22:	f7ff ff5c 	bl	1f9de <_set_secure.constprop.0>
	_set_secure(_private, 0, sizeof(_private));
   1fb26:	4628      	mov	r0, r5
   1fb28:	2120      	movs	r1, #32
   1fb2a:	f7ff ff58 	bl	1f9de <_set_secure.constprop.0>

	return r;
}
   1fb2e:	fab4 f084 	clz	r0, r4
   1fb32:	0940      	lsrs	r0, r0, #5
   1fb34:	b024      	add	sp, #144	; 0x90
   1fb36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001fb3a <uECC_vli_add>:
{
   1fb3a:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   1fb3c:	2400      	movs	r4, #0
{
   1fb3e:	4606      	mov	r6, r0
	uECC_word_t carry = 0;
   1fb40:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   1fb42:	b265      	sxtb	r5, r4
   1fb44:	42ab      	cmp	r3, r5
   1fb46:	dc00      	bgt.n	1fb4a <uECC_vli_add+0x10>
}
   1fb48:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   1fb4a:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   1fb4e:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   1fb52:	443d      	add	r5, r7
   1fb54:	4405      	add	r5, r0
		carry = cond_set(val, carry, (sum != left[i]));
   1fb56:	42af      	cmp	r7, r5
		uECC_word_t val = (sum < left[i]);
   1fb58:	bf8c      	ite	hi
   1fb5a:	2701      	movhi	r7, #1
   1fb5c:	2700      	movls	r7, #0
		result[i] = sum;
   1fb5e:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   1fb62:	bf18      	it	ne
   1fb64:	4638      	movne	r0, r7
	for (i = 0; i < num_words; ++i) {
   1fb66:	3401      	adds	r4, #1
   1fb68:	e7eb      	b.n	1fb42 <uECC_vli_add+0x8>

0001fb6a <uECC_vli_rshift1>:
	vli += num_words;
   1fb6a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   1fb6e:	2300      	movs	r3, #0
	while (vli-- > end) {
   1fb70:	4288      	cmp	r0, r1
   1fb72:	d300      	bcc.n	1fb76 <uECC_vli_rshift1+0xc>
}
   1fb74:	4770      	bx	lr
		uECC_word_t temp = *vli;
   1fb76:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   1fb7a:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   1fb7e:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   1fb80:	07d3      	lsls	r3, r2, #31
   1fb82:	e7f5      	b.n	1fb70 <uECC_vli_rshift1+0x6>

0001fb84 <vli_modInv_update>:
	if (!EVEN(uv)) {
   1fb84:	6803      	ldr	r3, [r0, #0]
{
   1fb86:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   1fb88:	f013 0601 	ands.w	r6, r3, #1
{
   1fb8c:	4605      	mov	r5, r0
   1fb8e:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   1fb90:	d005      	beq.n	1fb9e <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   1fb92:	4613      	mov	r3, r2
   1fb94:	460a      	mov	r2, r1
   1fb96:	4601      	mov	r1, r0
   1fb98:	f7ff ffcf 	bl	1fb3a <uECC_vli_add>
   1fb9c:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   1fb9e:	4621      	mov	r1, r4
   1fba0:	4628      	mov	r0, r5
   1fba2:	f7ff ffe2 	bl	1fb6a <uECC_vli_rshift1>
	if (carry) {
   1fba6:	b146      	cbz	r6, 1fbba <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   1fba8:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   1fbac:	3a01      	subs	r2, #1
   1fbae:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   1fbb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1fbb6:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   1fbba:	bd70      	pop	{r4, r5, r6, pc}

0001fbbc <uECC_vli_mult>:
{
   1fbbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (k = 0; k < num_words; ++k) {
   1fbc0:	2500      	movs	r5, #0
{
   1fbc2:	b087      	sub	sp, #28
   1fbc4:	e9cd 1200 	strd	r1, r2, [sp]
	uECC_word_t r1 = 0;
   1fbc8:	462c      	mov	r4, r5
	uECC_word_t r0 = 0;
   1fbca:	462a      	mov	r2, r5
	for (k = 0; k < num_words; ++k) {
   1fbcc:	fa4f f885 	sxtb.w	r8, r5
   1fbd0:	4543      	cmp	r3, r8
   1fbd2:	dc16      	bgt.n	1fc02 <uECC_vli_mult+0x46>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   1fbd4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1fbd8:	eb05 0543 	add.w	r5, r5, r3, lsl #1
   1fbdc:	9502      	str	r5, [sp, #8]
   1fbde:	f04f 0a00 	mov.w	sl, #0
   1fbe2:	9e02      	ldr	r6, [sp, #8]
   1fbe4:	fa53 fe8a 	uxtab	lr, r3, sl
   1fbe8:	fa4f fe8e 	sxtb.w	lr, lr
   1fbec:	45b6      	cmp	lr, r6
   1fbee:	fa5f f58a 	uxtb.w	r5, sl
   1fbf2:	db2d      	blt.n	1fc50 <uECC_vli_mult+0x94>
	result[num_words * 2 - 1] = r0;
   1fbf4:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   1fbf8:	f840 2c04 	str.w	r2, [r0, #-4]
}
   1fbfc:	b007      	add	sp, #28
   1fbfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fc02:	9e01      	ldr	r6, [sp, #4]
	for (k = 0; k < num_words; ++k) {
   1fc04:	f04f 0c00 	mov.w	ip, #0
   1fc08:	eb06 0985 	add.w	r9, r6, r5, lsl #2
   1fc0c:	46e6      	mov	lr, ip
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   1fc0e:	e9cd 2402 	strd	r2, r4, [sp, #8]
	uECC_dword_t p = (uECC_dword_t)a * b;
   1fc12:	9900      	ldr	r1, [sp, #0]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   1fc14:	f859 7904 	ldr.w	r7, [r9], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   1fc18:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
   1fc1c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   1fc20:	fba7 ab06 	umull	sl, fp, r7, r6
   1fc24:	eb1a 0601 	adds.w	r6, sl, r1
   1fc28:	f10c 0c01 	add.w	ip, ip, #1
   1fc2c:	eb5b 0702 	adcs.w	r7, fp, r2
		for (i = 0; i <= k; ++i) {
   1fc30:	fa4f fa8c 	sxtb.w	sl, ip
   1fc34:	bf2c      	ite	cs
   1fc36:	2201      	movcs	r2, #1
   1fc38:	2200      	movcc	r2, #0
   1fc3a:	45c2      	cmp	sl, r8
	*r2 += (r01 < p);
   1fc3c:	4496      	add	lr, r2
	*r1 = r01 >> uECC_WORD_BITS;
   1fc3e:	463c      	mov	r4, r7
	*r0 = (uECC_word_t)r01;
   1fc40:	4632      	mov	r2, r6
		for (i = 0; i <= k; ++i) {
   1fc42:	dde4      	ble.n	1fc0e <uECC_vli_mult+0x52>
		result[k] = r0;
   1fc44:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   1fc48:	463a      	mov	r2, r7
   1fc4a:	3501      	adds	r5, #1
	*r2 += (r01 < p);
   1fc4c:	4674      	mov	r4, lr
   1fc4e:	e7bd      	b.n	1fbcc <uECC_vli_mult+0x10>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1fc50:	3501      	adds	r5, #1
   1fc52:	9900      	ldr	r1, [sp, #0]
   1fc54:	9e01      	ldr	r6, [sp, #4]
   1fc56:	fa4f fc85 	sxtb.w	ip, r5
   1fc5a:	ebae 0b0c 	sub.w	fp, lr, ip
   1fc5e:	eb01 058c 	add.w	r5, r1, ip, lsl #2
   1fc62:	eb06 0b8b 	add.w	fp, r6, fp, lsl #2
   1fc66:	4621      	mov	r1, r4
   1fc68:	2400      	movs	r4, #0
   1fc6a:	459c      	cmp	ip, r3
   1fc6c:	db05      	blt.n	1fc7a <uECC_vli_mult+0xbe>
		result[k] = r0;
   1fc6e:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   1fc72:	f10a 0a01 	add.w	sl, sl, #1
		result[k] = r0;
   1fc76:	460a      	mov	r2, r1
   1fc78:	e7b3      	b.n	1fbe2 <uECC_vli_mult+0x26>
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   1fc7a:	e9cd 2104 	strd	r2, r1, [sp, #16]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   1fc7e:	f855 7b04 	ldr.w	r7, [r5], #4
   1fc82:	f85b 6904 	ldr.w	r6, [fp], #-4
	r01 += p;
   1fc86:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
	uECC_dword_t p = (uECC_dword_t)a * b;
   1fc8a:	fba7 6706 	umull	r6, r7, r7, r6
   1fc8e:	eb16 0801 	adds.w	r8, r6, r1
   1fc92:	eb57 0902 	adcs.w	r9, r7, r2
   1fc96:	bf2c      	ite	cs
   1fc98:	2201      	movcs	r2, #1
   1fc9a:	2200      	movcc	r2, #0
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1fc9c:	f10c 0c01 	add.w	ip, ip, #1
	*r2 += (r01 < p);
   1fca0:	4414      	add	r4, r2
	*r1 = r01 >> uECC_WORD_BITS;
   1fca2:	4649      	mov	r1, r9
	*r0 = (uECC_word_t)r01;
   1fca4:	4642      	mov	r2, r8
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1fca6:	fa4f fc8c 	sxtb.w	ip, ip
   1fcaa:	e7de      	b.n	1fc6a <uECC_vli_mult+0xae>

0001fcac <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   1fcac:	2300      	movs	r3, #0
{
   1fcae:	b510      	push	{r4, lr}
		 vli[i] = 0;
   1fcb0:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   1fcb2:	b25a      	sxtb	r2, r3
   1fcb4:	4291      	cmp	r1, r2
   1fcb6:	dc00      	bgt.n	1fcba <uECC_vli_clear+0xe>
}
   1fcb8:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   1fcba:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   1fcbe:	3301      	adds	r3, #1
   1fcc0:	e7f7      	b.n	1fcb2 <uECC_vli_clear+0x6>

0001fcc2 <uECC_vli_isZero>:
{
   1fcc2:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   1fcc4:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   1fcc6:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   1fcc8:	b25c      	sxtb	r4, r3
   1fcca:	42a1      	cmp	r1, r4
   1fccc:	dc03      	bgt.n	1fcd6 <uECC_vli_isZero+0x14>
}
   1fcce:	fab2 f082 	clz	r0, r2
   1fcd2:	0940      	lsrs	r0, r0, #5
   1fcd4:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   1fcd6:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   1fcda:	3301      	adds	r3, #1
   1fcdc:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   1fcde:	e7f3      	b.n	1fcc8 <uECC_vli_isZero+0x6>

0001fce0 <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1fce0:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   1fce2:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1fce4:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   1fce8:	f001 011f 	and.w	r1, r1, #31
   1fcec:	fa03 f101 	lsl.w	r1, r3, r1
}
   1fcf0:	4008      	ands	r0, r1
   1fcf2:	4770      	bx	lr

0001fcf4 <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   1fcf4:	3901      	subs	r1, #1
   1fcf6:	b24b      	sxtb	r3, r1
{
   1fcf8:	4602      	mov	r2, r0
   1fcfa:	eb00 0183 	add.w	r1, r0, r3, lsl #2
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   1fcfe:	2b00      	cmp	r3, #0
   1fd00:	da03      	bge.n	1fd0a <uECC_vli_numBits+0x16>
	return (i + 1);
   1fd02:	3301      	adds	r3, #1
   1fd04:	b258      	sxtb	r0, r3
	if (num_digits == 0) {
   1fd06:	b938      	cbnz	r0, 1fd18 <uECC_vli_numBits+0x24>
   1fd08:	4770      	bx	lr
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   1fd0a:	f851 0904 	ldr.w	r0, [r1], #-4
   1fd0e:	2800      	cmp	r0, #0
   1fd10:	d1f7      	bne.n	1fd02 <uECC_vli_numBits+0xe>
   1fd12:	3b01      	subs	r3, #1
   1fd14:	b25b      	sxtb	r3, r3
   1fd16:	e7f2      	b.n	1fcfe <uECC_vli_numBits+0xa>
	digit = vli[num_digits - 1];
   1fd18:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   1fd1c:	3b01      	subs	r3, #1
   1fd1e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	for (i = 0; digit; ++i) {
   1fd22:	2300      	movs	r3, #0
   1fd24:	b922      	cbnz	r2, 1fd30 <uECC_vli_numBits+0x3c>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   1fd26:	3801      	subs	r0, #1
   1fd28:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1fd2c:	b200      	sxth	r0, r0
}
   1fd2e:	4770      	bx	lr
		digit >>= 1;
   1fd30:	0852      	lsrs	r2, r2, #1
	for (i = 0; digit; ++i) {
   1fd32:	3301      	adds	r3, #1
   1fd34:	e7f6      	b.n	1fd24 <uECC_vli_numBits+0x30>

0001fd36 <uECC_vli_set>:
{
   1fd36:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   1fd38:	2300      	movs	r3, #0
   1fd3a:	b25c      	sxtb	r4, r3
   1fd3c:	42a2      	cmp	r2, r4
   1fd3e:	dc00      	bgt.n	1fd42 <uECC_vli_set+0xc>
}
   1fd40:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   1fd42:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   1fd46:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   1fd4a:	3301      	adds	r3, #1
   1fd4c:	e7f5      	b.n	1fd3a <uECC_vli_set+0x4>

0001fd4e <uECC_vli_cmp_unsafe>:
{
   1fd4e:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   1fd50:	3a01      	subs	r2, #1
   1fd52:	b253      	sxtb	r3, r2
   1fd54:	009a      	lsls	r2, r3, #2
   1fd56:	2b00      	cmp	r3, #0
   1fd58:	da01      	bge.n	1fd5e <uECC_vli_cmp_unsafe+0x10>
	return 0;
   1fd5a:	2000      	movs	r0, #0
}
   1fd5c:	bd30      	pop	{r4, r5, pc}
		if (left[i] > right[i]) {
   1fd5e:	5885      	ldr	r5, [r0, r2]
   1fd60:	588c      	ldr	r4, [r1, r2]
   1fd62:	42a5      	cmp	r5, r4
   1fd64:	d805      	bhi.n	1fd72 <uECC_vli_cmp_unsafe+0x24>
		} else if (left[i] < right[i]) {
   1fd66:	f1a2 0204 	sub.w	r2, r2, #4
   1fd6a:	d304      	bcc.n	1fd76 <uECC_vli_cmp_unsafe+0x28>
	for (i = num_words - 1; i >= 0; --i) {
   1fd6c:	3b01      	subs	r3, #1
   1fd6e:	b25b      	sxtb	r3, r3
   1fd70:	e7f1      	b.n	1fd56 <uECC_vli_cmp_unsafe+0x8>
			return 1;
   1fd72:	2001      	movs	r0, #1
   1fd74:	e7f2      	b.n	1fd5c <uECC_vli_cmp_unsafe+0xe>
			return -1;
   1fd76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1fd7a:	e7ef      	b.n	1fd5c <uECC_vli_cmp_unsafe+0xe>

0001fd7c <uECC_vli_equal>:
	for (i = num_words - 1; i >= 0; --i) {
   1fd7c:	3a01      	subs	r2, #1
   1fd7e:	b253      	sxtb	r3, r2
{
   1fd80:	b570      	push	{r4, r5, r6, lr}
   1fd82:	009a      	lsls	r2, r3, #2
	uECC_word_t diff = 0;
   1fd84:	2400      	movs	r4, #0
	for (i = num_words - 1; i >= 0; --i) {
   1fd86:	2b00      	cmp	r3, #0
   1fd88:	da03      	bge.n	1fd92 <uECC_vli_equal+0x16>
}
   1fd8a:	1e20      	subs	r0, r4, #0
   1fd8c:	bf18      	it	ne
   1fd8e:	2001      	movne	r0, #1
   1fd90:	bd70      	pop	{r4, r5, r6, pc}
		diff |= (left[i] ^ right[i]);
   1fd92:	5885      	ldr	r5, [r0, r2]
   1fd94:	588e      	ldr	r6, [r1, r2]
	for (i = num_words - 1; i >= 0; --i) {
   1fd96:	3b01      	subs	r3, #1
		diff |= (left[i] ^ right[i]);
   1fd98:	4075      	eors	r5, r6
   1fd9a:	432c      	orrs	r4, r5
	for (i = num_words - 1; i >= 0; --i) {
   1fd9c:	b25b      	sxtb	r3, r3
   1fd9e:	3a04      	subs	r2, #4
   1fda0:	e7f1      	b.n	1fd86 <uECC_vli_equal+0xa>

0001fda2 <uECC_vli_sub>:
{
   1fda2:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   1fda4:	2400      	movs	r4, #0
{
   1fda6:	4606      	mov	r6, r0
   1fda8:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   1fdaa:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   1fdac:	b265      	sxtb	r5, r4
   1fdae:	45ac      	cmp	ip, r5
   1fdb0:	dc00      	bgt.n	1fdb4 <uECC_vli_sub+0x12>
}
   1fdb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   1fdb4:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   1fdb8:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   1fdbc:	1a3d      	subs	r5, r7, r0
   1fdbe:	1aed      	subs	r5, r5, r3
		borrow = cond_set(val, borrow, (diff != left[i]));
   1fdc0:	42af      	cmp	r7, r5
		uECC_word_t val = (diff > left[i]);
   1fdc2:	bf34      	ite	cc
   1fdc4:	2701      	movcc	r7, #1
   1fdc6:	2700      	movcs	r7, #0
		result[i] = diff;
   1fdc8:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   1fdcc:	bf18      	it	ne
   1fdce:	4638      	movne	r0, r7
	for (i = 0; i < num_words; ++i) {
   1fdd0:	3401      	adds	r4, #1
   1fdd2:	e7eb      	b.n	1fdac <uECC_vli_sub+0xa>

0001fdd4 <uECC_vli_modAdd>:
{
   1fdd4:	b570      	push	{r4, r5, r6, lr}
   1fdd6:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   1fdda:	461d      	mov	r5, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   1fddc:	4633      	mov	r3, r6
{
   1fdde:	4604      	mov	r4, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   1fde0:	f7ff feab 	bl	1fb3a <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   1fde4:	b930      	cbnz	r0, 1fdf4 <uECC_vli_modAdd+0x20>
   1fde6:	4632      	mov	r2, r6
   1fde8:	4621      	mov	r1, r4
   1fdea:	4628      	mov	r0, r5
   1fdec:	f7ff ffaf 	bl	1fd4e <uECC_vli_cmp_unsafe>
   1fdf0:	2801      	cmp	r0, #1
   1fdf2:	d007      	beq.n	1fe04 <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   1fdf4:	4633      	mov	r3, r6
   1fdf6:	462a      	mov	r2, r5
   1fdf8:	4621      	mov	r1, r4
   1fdfa:	4620      	mov	r0, r4
}
   1fdfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   1fe00:	f7ff bfcf 	b.w	1fda2 <uECC_vli_sub>
}
   1fe04:	bd70      	pop	{r4, r5, r6, pc}

0001fe06 <uECC_vli_modSub>:
{
   1fe06:	b570      	push	{r4, r5, r6, lr}
   1fe08:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   1fe0c:	461d      	mov	r5, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   1fe0e:	4633      	mov	r3, r6
{
   1fe10:	4604      	mov	r4, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   1fe12:	f7ff ffc6 	bl	1fda2 <uECC_vli_sub>
	if (l_borrow) {
   1fe16:	b138      	cbz	r0, 1fe28 <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   1fe18:	4633      	mov	r3, r6
   1fe1a:	462a      	mov	r2, r5
   1fe1c:	4621      	mov	r1, r4
   1fe1e:	4620      	mov	r0, r4
}
   1fe20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   1fe24:	f7ff be89 	b.w	1fb3a <uECC_vli_add>
}
   1fe28:	bd70      	pop	{r4, r5, r6, pc}

0001fe2a <uECC_vli_mmod>:
{
   1fe2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fe2e:	b0a5      	sub	sp, #148	; 0x94
   1fe30:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   1fe32:	ab14      	add	r3, sp, #80	; 0x50
   1fe34:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   1fe38:	4680      	mov	r8, r0
			   uECC_vli_numBits(mod, num_words);
   1fe3a:	4629      	mov	r1, r5
   1fe3c:	4610      	mov	r0, r2
{
   1fe3e:	4616      	mov	r6, r2
			   uECC_vli_numBits(mod, num_words);
   1fe40:	f7ff ff58 	bl	1fcf4 <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   1fe44:	ebc0 1485 	rsb	r4, r0, r5, lsl #6
   1fe48:	b224      	sxth	r4, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   1fe4a:	2c00      	cmp	r4, #0
   1fe4c:	4621      	mov	r1, r4
   1fe4e:	bfb8      	it	lt
   1fe50:	f104 011f 	addlt.w	r1, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1fe54:	4263      	negs	r3, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   1fe56:	f341 1147 	sbfx	r1, r1, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1fe5a:	f003 031f 	and.w	r3, r3, #31
	uECC_vli_clear(mod_multiple, word_shift);
   1fe5e:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1fe60:	f004 071f 	and.w	r7, r4, #31
   1fe64:	bf58      	it	pl
   1fe66:	425f      	negpl	r7, r3
	uECC_vli_clear(mod_multiple, word_shift);
   1fe68:	f7ff ff20 	bl	1fcac <uECC_vli_clear>
	if (bit_shift > 0) {
   1fe6c:	2f00      	cmp	r7, #0
   1fe6e:	b208      	sxth	r0, r1
   1fe70:	dd2b      	ble.n	1feca <uECC_vli_mmod+0xa0>
   1fe72:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   1fe74:	2200      	movs	r2, #0
   1fe76:	eb03 0180 	add.w	r1, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   1fe7a:	f1c7 0e20 	rsb	lr, r7, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   1fe7e:	4613      	mov	r3, r2
   1fe80:	429d      	cmp	r5, r3
   1fe82:	d817      	bhi.n	1feb4 <uECC_vli_mmod+0x8a>
		for (i = 0; i < num_words * 2; ++i) {
   1fe84:	006b      	lsls	r3, r5, #1
   1fe86:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1fe88:	ab04      	add	r3, sp, #16
   1fe8a:	eb03 0985 	add.w	r9, r3, r5, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1fe8e:	1e6f      	subs	r7, r5, #1
   1fe90:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1fe92:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1fe94:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	for (index = 1; shift >= 0; --shift) {
   1fe98:	2c00      	cmp	r4, #0
   1fe9a:	da54      	bge.n	1ff46 <uECC_vli_mmod+0x11c>
	uECC_vli_set(result, v[index], num_words);
   1fe9c:	ab24      	add	r3, sp, #144	; 0x90
   1fe9e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   1fea2:	462a      	mov	r2, r5
   1fea4:	f856 1c88 	ldr.w	r1, [r6, #-136]
   1fea8:	4640      	mov	r0, r8
   1feaa:	f7ff ff44 	bl	1fd36 <uECC_vli_set>
}
   1feae:	b025      	add	sp, #148	; 0x94
   1feb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   1feb4:	f856 c023 	ldr.w	ip, [r6, r3, lsl #2]
   1feb8:	fa0c f007 	lsl.w	r0, ip, r7
   1febc:	4302      	orrs	r2, r0
   1febe:	f841 2b04 	str.w	r2, [r1], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   1fec2:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   1fec4:	fa2c f20e 	lsr.w	r2, ip, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   1fec8:	e7da      	b.n	1fe80 <uECC_vli_mmod+0x56>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   1feca:	ab04      	add	r3, sp, #16
   1fecc:	462a      	mov	r2, r5
   1fece:	4631      	mov	r1, r6
   1fed0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1fed4:	f7ff ff2f 	bl	1fd36 <uECC_vli_set>
   1fed8:	e7d4      	b.n	1fe84 <uECC_vli_mmod+0x5a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1feda:	fa0f fe82 	sxth.w	lr, r2
   1fede:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   1fee2:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   1fee6:	ab24      	add	r3, sp, #144	; 0x90
   1fee8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   1feec:	3001      	adds	r0, #1
   1feee:	f852 3c80 	ldr.w	r3, [r2, #-128]
   1fef2:	440b      	add	r3, r1
   1fef4:	ebbb 0303 	subs.w	r3, fp, r3
   1fef8:	bf34      	ite	cc
   1fefa:	2201      	movcc	r2, #1
   1fefc:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   1fefe:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   1ff00:	bf18      	it	ne
   1ff02:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   1ff04:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   1ff08:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   1ff0c:	9b01      	ldr	r3, [sp, #4]
   1ff0e:	b242      	sxtb	r2, r0
   1ff10:	429a      	cmp	r2, r3
   1ff12:	dbe2      	blt.n	1feda <uECC_vli_mmod+0xb0>
		index = !(index ^ borrow);
   1ff14:	1a73      	subs	r3, r6, r1
   1ff16:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   1ff18:	4629      	mov	r1, r5
   1ff1a:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   1ff1c:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   1ff1e:	f7ff fe24 	bl	1fb6a <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1ff22:	ab24      	add	r3, sp, #144	; 0x90
   1ff24:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1ff28:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1ff2a:	f853 2c80 	ldr.w	r2, [r3, #-128]
   1ff2e:	f857 3c80 	ldr.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1ff32:	4648      	mov	r0, r9
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1ff34:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
	for (index = 1; shift >= 0; --shift) {
   1ff38:	3c01      	subs	r4, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1ff3a:	f847 3c80 	str.w	r3, [r7, #-128]
	for (index = 1; shift >= 0; --shift) {
   1ff3e:	b224      	sxth	r4, r4
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1ff40:	f7ff fe13 	bl	1fb6a <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   1ff44:	e7a8      	b.n	1fe98 <uECC_vli_mmod+0x6e>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1ff46:	ab24      	add	r3, sp, #144	; 0x90
   1ff48:	2000      	movs	r0, #0
			v[1 - index][i] = diff;
   1ff4a:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   1ff4e:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1ff50:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   1ff54:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   1ff58:	e7d8      	b.n	1ff0c <uECC_vli_mmod+0xe2>

0001ff5a <uECC_vli_modMult_fast>:
{
   1ff5a:	b530      	push	{r4, r5, lr}
   1ff5c:	461c      	mov	r4, r3
   1ff5e:	b091      	sub	sp, #68	; 0x44
   1ff60:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   1ff62:	f993 3000 	ldrsb.w	r3, [r3]
   1ff66:	4668      	mov	r0, sp
   1ff68:	f7ff fe28 	bl	1fbbc <uECC_vli_mult>
	curve->mmod_fast(result, product);
   1ff6c:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   1ff70:	4669      	mov	r1, sp
   1ff72:	4628      	mov	r0, r5
   1ff74:	4798      	blx	r3
}
   1ff76:	b011      	add	sp, #68	; 0x44
   1ff78:	bd30      	pop	{r4, r5, pc}

0001ff7a <uECC_vli_modSquare_fast>:
{
   1ff7a:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   1ff7c:	460a      	mov	r2, r1
   1ff7e:	f7ff bfec 	b.w	1ff5a <uECC_vli_modMult_fast>

0001ff82 <double_jacobian_default>:
{
   1ff82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   1ff86:	f993 6000 	ldrsb.w	r6, [r3]
{
   1ff8a:	b092      	sub	sp, #72	; 0x48
   1ff8c:	4604      	mov	r4, r0
   1ff8e:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   1ff90:	4610      	mov	r0, r2
   1ff92:	4631      	mov	r1, r6
{
   1ff94:	4615      	mov	r5, r2
   1ff96:	461f      	mov	r7, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   1ff98:	f7ff fe93 	bl	1fcc2 <uECC_vli_isZero>
   1ff9c:	2800      	cmp	r0, #0
   1ff9e:	f040 8091 	bne.w	200c4 <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   1ffa2:	463a      	mov	r2, r7
   1ffa4:	4649      	mov	r1, r9
   1ffa6:	a802      	add	r0, sp, #8
   1ffa8:	f7ff ffe7 	bl	1ff7a <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   1ffac:	463b      	mov	r3, r7
   1ffae:	aa02      	add	r2, sp, #8
   1ffb0:	4621      	mov	r1, r4
   1ffb2:	a80a      	add	r0, sp, #40	; 0x28
   1ffb4:	f7ff ffd1 	bl	1ff5a <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   1ffb8:	a902      	add	r1, sp, #8
   1ffba:	4608      	mov	r0, r1
   1ffbc:	463a      	mov	r2, r7
   1ffbe:	f7ff ffdc 	bl	1ff7a <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   1ffc2:	463b      	mov	r3, r7
   1ffc4:	462a      	mov	r2, r5
   1ffc6:	4649      	mov	r1, r9
   1ffc8:	4648      	mov	r0, r9
   1ffca:	f7ff ffc6 	bl	1ff5a <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   1ffce:	f107 0804 	add.w	r8, r7, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   1ffd2:	463a      	mov	r2, r7
   1ffd4:	4629      	mov	r1, r5
   1ffd6:	4628      	mov	r0, r5
   1ffd8:	f7ff ffcf 	bl	1ff7a <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   1ffdc:	4643      	mov	r3, r8
   1ffde:	462a      	mov	r2, r5
   1ffe0:	4621      	mov	r1, r4
   1ffe2:	4620      	mov	r0, r4
   1ffe4:	9600      	str	r6, [sp, #0]
   1ffe6:	f7ff fef5 	bl	1fdd4 <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   1ffea:	4643      	mov	r3, r8
   1ffec:	462a      	mov	r2, r5
   1ffee:	4629      	mov	r1, r5
   1fff0:	4628      	mov	r0, r5
   1fff2:	9600      	str	r6, [sp, #0]
   1fff4:	f7ff feee 	bl	1fdd4 <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   1fff8:	4643      	mov	r3, r8
   1fffa:	462a      	mov	r2, r5
   1fffc:	4621      	mov	r1, r4
   1fffe:	4628      	mov	r0, r5
   20000:	9600      	str	r6, [sp, #0]
   20002:	f7ff ff00 	bl	1fe06 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   20006:	463b      	mov	r3, r7
   20008:	462a      	mov	r2, r5
   2000a:	4621      	mov	r1, r4
   2000c:	4620      	mov	r0, r4
   2000e:	f7ff ffa4 	bl	1ff5a <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   20012:	4643      	mov	r3, r8
   20014:	4622      	mov	r2, r4
   20016:	4621      	mov	r1, r4
   20018:	4628      	mov	r0, r5
   2001a:	9600      	str	r6, [sp, #0]
   2001c:	f7ff feda 	bl	1fdd4 <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   20020:	4643      	mov	r3, r8
   20022:	9600      	str	r6, [sp, #0]
   20024:	462a      	mov	r2, r5
   20026:	4621      	mov	r1, r4
   20028:	4620      	mov	r0, r4
   2002a:	f7ff fed3 	bl	1fdd4 <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   2002e:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   20030:	07db      	lsls	r3, r3, #31
   20032:	d54a      	bpl.n	200ca <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   20034:	4633      	mov	r3, r6
   20036:	4642      	mov	r2, r8
   20038:	4621      	mov	r1, r4
   2003a:	4620      	mov	r0, r4
   2003c:	f7ff fd7d 	bl	1fb3a <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   20040:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   20042:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   20044:	4620      	mov	r0, r4
   20046:	f7ff fd90 	bl	1fb6a <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   2004a:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   2004e:	3b01      	subs	r3, #1
   20050:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   20054:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   20058:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   2005c:	463a      	mov	r2, r7
   2005e:	4621      	mov	r1, r4
   20060:	4628      	mov	r0, r5
   20062:	f7ff ff8a 	bl	1ff7a <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   20066:	4643      	mov	r3, r8
   20068:	aa0a      	add	r2, sp, #40	; 0x28
   2006a:	4629      	mov	r1, r5
   2006c:	4628      	mov	r0, r5
   2006e:	9600      	str	r6, [sp, #0]
   20070:	f7ff fec9 	bl	1fe06 <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   20074:	4643      	mov	r3, r8
   20076:	aa0a      	add	r2, sp, #40	; 0x28
   20078:	4629      	mov	r1, r5
   2007a:	4628      	mov	r0, r5
   2007c:	9600      	str	r6, [sp, #0]
   2007e:	f7ff fec2 	bl	1fe06 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   20082:	a90a      	add	r1, sp, #40	; 0x28
   20084:	4608      	mov	r0, r1
   20086:	4643      	mov	r3, r8
   20088:	462a      	mov	r2, r5
   2008a:	9600      	str	r6, [sp, #0]
   2008c:	f7ff febb 	bl	1fe06 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   20090:	463b      	mov	r3, r7
   20092:	aa0a      	add	r2, sp, #40	; 0x28
   20094:	4621      	mov	r1, r4
   20096:	4620      	mov	r0, r4
   20098:	f7ff ff5f 	bl	1ff5a <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   2009c:	aa02      	add	r2, sp, #8
   2009e:	4643      	mov	r3, r8
   200a0:	4610      	mov	r0, r2
   200a2:	4621      	mov	r1, r4
   200a4:	9600      	str	r6, [sp, #0]
   200a6:	f7ff feae 	bl	1fe06 <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   200aa:	4632      	mov	r2, r6
   200ac:	4629      	mov	r1, r5
   200ae:	4620      	mov	r0, r4
   200b0:	f7ff fe41 	bl	1fd36 <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   200b4:	4649      	mov	r1, r9
   200b6:	4628      	mov	r0, r5
   200b8:	f7ff fe3d 	bl	1fd36 <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   200bc:	a902      	add	r1, sp, #8
   200be:	4648      	mov	r0, r9
   200c0:	f7ff fe39 	bl	1fd36 <uECC_vli_set>
}
   200c4:	b012      	add	sp, #72	; 0x48
   200c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   200ca:	4631      	mov	r1, r6
   200cc:	4620      	mov	r0, r4
   200ce:	f7ff fd4c 	bl	1fb6a <uECC_vli_rshift1>
   200d2:	e7c3      	b.n	2005c <double_jacobian_default+0xda>

000200d4 <x_side_default>:
{
   200d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   200d8:	4615      	mov	r5, r2
   200da:	b08a      	sub	sp, #40	; 0x28
   200dc:	4604      	mov	r4, r0
   200de:	460e      	mov	r6, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   200e0:	221c      	movs	r2, #28
   200e2:	2100      	movs	r1, #0
   200e4:	a803      	add	r0, sp, #12
   200e6:	f003 fd98 	bl	23c1a <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   200ea:	1d2f      	adds	r7, r5, #4
	wordcount_t num_words = curve->num_words;
   200ec:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   200f0:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   200f2:	462a      	mov	r2, r5
   200f4:	4631      	mov	r1, r6
   200f6:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   200f8:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   200fa:	f7ff ff3e 	bl	1ff7a <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   200fe:	463b      	mov	r3, r7
   20100:	aa02      	add	r2, sp, #8
   20102:	4621      	mov	r1, r4
   20104:	4620      	mov	r0, r4
   20106:	f8cd 8000 	str.w	r8, [sp]
   2010a:	f7ff fe7c 	bl	1fe06 <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   2010e:	462b      	mov	r3, r5
   20110:	4632      	mov	r2, r6
   20112:	4621      	mov	r1, r4
   20114:	4620      	mov	r0, r4
   20116:	f7ff ff20 	bl	1ff5a <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   2011a:	f8cd 8000 	str.w	r8, [sp]
   2011e:	463b      	mov	r3, r7
   20120:	f105 0284 	add.w	r2, r5, #132	; 0x84
   20124:	4621      	mov	r1, r4
   20126:	4620      	mov	r0, r4
   20128:	f7ff fe54 	bl	1fdd4 <uECC_vli_modAdd>
}
   2012c:	b00a      	add	sp, #40	; 0x28
   2012e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00020132 <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   20132:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20136:	b09a      	sub	sp, #104	; 0x68
   20138:	4616      	mov	r6, r2
   2013a:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   2013e:	4644      	mov	r4, r8
{
   20140:	4699      	mov	r9, r3
	wordcount_t num_words = curve->num_words;
   20142:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   20146:	9500      	str	r5, [sp, #0]
{
   20148:	4607      	mov	r7, r0
   2014a:	468a      	mov	sl, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   2014c:	4623      	mov	r3, r4
   2014e:	4602      	mov	r2, r0
   20150:	4631      	mov	r1, r6
   20152:	a802      	add	r0, sp, #8
   20154:	f7ff fe57 	bl	1fe06 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   20158:	a902      	add	r1, sp, #8
   2015a:	4642      	mov	r2, r8
   2015c:	4608      	mov	r0, r1
   2015e:	f7ff ff0c 	bl	1ff7a <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   20162:	4643      	mov	r3, r8
   20164:	aa02      	add	r2, sp, #8
   20166:	4639      	mov	r1, r7
   20168:	4638      	mov	r0, r7
   2016a:	f7ff fef6 	bl	1ff5a <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   2016e:	4643      	mov	r3, r8
   20170:	aa02      	add	r2, sp, #8
   20172:	4631      	mov	r1, r6
   20174:	4630      	mov	r0, r6
   20176:	f7ff fef0 	bl	1ff5a <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   2017a:	4623      	mov	r3, r4
   2017c:	4652      	mov	r2, sl
   2017e:	4649      	mov	r1, r9
   20180:	a802      	add	r0, sp, #8
   20182:	9500      	str	r5, [sp, #0]
   20184:	f7ff fe26 	bl	1fdd4 <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   20188:	4623      	mov	r3, r4
   2018a:	4652      	mov	r2, sl
   2018c:	4649      	mov	r1, r9
   2018e:	4648      	mov	r0, r9
   20190:	9500      	str	r5, [sp, #0]
   20192:	f7ff fe38 	bl	1fe06 <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   20196:	4623      	mov	r3, r4
   20198:	463a      	mov	r2, r7
   2019a:	4631      	mov	r1, r6
   2019c:	a80a      	add	r0, sp, #40	; 0x28
   2019e:	9500      	str	r5, [sp, #0]
   201a0:	f7ff fe31 	bl	1fe06 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   201a4:	4643      	mov	r3, r8
   201a6:	aa0a      	add	r2, sp, #40	; 0x28
   201a8:	4651      	mov	r1, sl
   201aa:	4650      	mov	r0, sl
   201ac:	f7ff fed5 	bl	1ff5a <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   201b0:	4623      	mov	r3, r4
   201b2:	4632      	mov	r2, r6
   201b4:	4639      	mov	r1, r7
   201b6:	a80a      	add	r0, sp, #40	; 0x28
   201b8:	9500      	str	r5, [sp, #0]
   201ba:	f7ff fe0b 	bl	1fdd4 <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   201be:	4642      	mov	r2, r8
   201c0:	4649      	mov	r1, r9
   201c2:	4630      	mov	r0, r6
   201c4:	f7ff fed9 	bl	1ff7a <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   201c8:	4623      	mov	r3, r4
   201ca:	aa0a      	add	r2, sp, #40	; 0x28
   201cc:	4631      	mov	r1, r6
   201ce:	4630      	mov	r0, r6
   201d0:	9500      	str	r5, [sp, #0]
   201d2:	f7ff fe18 	bl	1fe06 <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   201d6:	4623      	mov	r3, r4
   201d8:	4632      	mov	r2, r6
   201da:	4639      	mov	r1, r7
   201dc:	a812      	add	r0, sp, #72	; 0x48
   201de:	9500      	str	r5, [sp, #0]
   201e0:	f7ff fe11 	bl	1fe06 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   201e4:	4643      	mov	r3, r8
   201e6:	aa12      	add	r2, sp, #72	; 0x48
   201e8:	4649      	mov	r1, r9
   201ea:	4648      	mov	r0, r9
   201ec:	f7ff feb5 	bl	1ff5a <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   201f0:	4623      	mov	r3, r4
   201f2:	4652      	mov	r2, sl
   201f4:	4649      	mov	r1, r9
   201f6:	4648      	mov	r0, r9
   201f8:	9500      	str	r5, [sp, #0]
   201fa:	f7ff fe04 	bl	1fe06 <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   201fe:	4642      	mov	r2, r8
   20200:	a902      	add	r1, sp, #8
   20202:	a812      	add	r0, sp, #72	; 0x48
   20204:	f7ff feb9 	bl	1ff7a <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   20208:	a912      	add	r1, sp, #72	; 0x48
   2020a:	4623      	mov	r3, r4
   2020c:	aa0a      	add	r2, sp, #40	; 0x28
   2020e:	4608      	mov	r0, r1
   20210:	9500      	str	r5, [sp, #0]
   20212:	f7ff fdf8 	bl	1fe06 <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   20216:	4623      	mov	r3, r4
   20218:	463a      	mov	r2, r7
   2021a:	a912      	add	r1, sp, #72	; 0x48
   2021c:	a80a      	add	r0, sp, #40	; 0x28
   2021e:	9500      	str	r5, [sp, #0]
   20220:	f7ff fdf1 	bl	1fe06 <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   20224:	a90a      	add	r1, sp, #40	; 0x28
   20226:	4643      	mov	r3, r8
   20228:	aa02      	add	r2, sp, #8
   2022a:	4608      	mov	r0, r1
   2022c:	f7ff fe95 	bl	1ff5a <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   20230:	4623      	mov	r3, r4
   20232:	4652      	mov	r2, sl
   20234:	a90a      	add	r1, sp, #40	; 0x28
   20236:	4650      	mov	r0, sl
   20238:	9500      	str	r5, [sp, #0]
   2023a:	f7ff fde4 	bl	1fe06 <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   2023e:	462a      	mov	r2, r5
   20240:	a912      	add	r1, sp, #72	; 0x48
   20242:	4638      	mov	r0, r7
   20244:	f7ff fd77 	bl	1fd36 <uECC_vli_set>
}
   20248:	b01a      	add	sp, #104	; 0x68
   2024a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002024e <uECC_vli_modInv>:
{
   2024e:	b5f0      	push	{r4, r5, r6, r7, lr}
   20250:	460f      	mov	r7, r1
   20252:	b0a1      	sub	sp, #132	; 0x84
   20254:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   20256:	4619      	mov	r1, r3
   20258:	4638      	mov	r0, r7
{
   2025a:	4615      	mov	r5, r2
   2025c:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   2025e:	f7ff fd30 	bl	1fcc2 <uECC_vli_isZero>
   20262:	b120      	cbz	r0, 2026e <uECC_vli_modInv+0x20>
		uECC_vli_clear(result, num_words);
   20264:	4630      	mov	r0, r6
   20266:	f7ff fd21 	bl	1fcac <uECC_vli_clear>
}
   2026a:	b021      	add	sp, #132	; 0x84
   2026c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uECC_vli_set(a, input, num_words);
   2026e:	4622      	mov	r2, r4
   20270:	4639      	mov	r1, r7
   20272:	4668      	mov	r0, sp
   20274:	f7ff fd5f 	bl	1fd36 <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   20278:	4629      	mov	r1, r5
   2027a:	a808      	add	r0, sp, #32
   2027c:	f7ff fd5b 	bl	1fd36 <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   20280:	a810      	add	r0, sp, #64	; 0x40
   20282:	4621      	mov	r1, r4
   20284:	f7ff fd12 	bl	1fcac <uECC_vli_clear>
	u[0] = 1;
   20288:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   2028a:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   2028c:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   2028e:	f7ff fd0d 	bl	1fcac <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   20292:	4622      	mov	r2, r4
   20294:	a908      	add	r1, sp, #32
   20296:	4668      	mov	r0, sp
   20298:	f7ff fd59 	bl	1fd4e <uECC_vli_cmp_unsafe>
   2029c:	b928      	cbnz	r0, 202aa <uECC_vli_modInv+0x5c>
  	uECC_vli_set(result, u, num_words);
   2029e:	4622      	mov	r2, r4
   202a0:	a910      	add	r1, sp, #64	; 0x40
   202a2:	4630      	mov	r0, r6
   202a4:	f7ff fd47 	bl	1fd36 <uECC_vli_set>
   202a8:	e7df      	b.n	2026a <uECC_vli_modInv+0x1c>
		if (EVEN(a)) {
   202aa:	9b00      	ldr	r3, [sp, #0]
   202ac:	07da      	lsls	r2, r3, #31
   202ae:	d409      	bmi.n	202c4 <uECC_vli_modInv+0x76>
			uECC_vli_rshift1(a, num_words);
   202b0:	4621      	mov	r1, r4
   202b2:	4668      	mov	r0, sp
   202b4:	f7ff fc59 	bl	1fb6a <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   202b8:	4622      	mov	r2, r4
   202ba:	4629      	mov	r1, r5
   202bc:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   202be:	f7ff fc61 	bl	1fb84 <vli_modInv_update>
   202c2:	e7e6      	b.n	20292 <uECC_vli_modInv+0x44>
    		} else if (EVEN(b)) {
   202c4:	9b08      	ldr	r3, [sp, #32]
   202c6:	07db      	lsls	r3, r3, #31
   202c8:	d407      	bmi.n	202da <uECC_vli_modInv+0x8c>
			uECC_vli_rshift1(b, num_words);
   202ca:	4621      	mov	r1, r4
   202cc:	a808      	add	r0, sp, #32
   202ce:	f7ff fc4c 	bl	1fb6a <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   202d2:	4622      	mov	r2, r4
   202d4:	4629      	mov	r1, r5
   202d6:	a818      	add	r0, sp, #96	; 0x60
   202d8:	e7f1      	b.n	202be <uECC_vli_modInv+0x70>
		} else if (cmpResult > 0) {
   202da:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   202dc:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   202de:	dd1c      	ble.n	2031a <uECC_vli_modInv+0xcc>
			uECC_vli_sub(a, a, b, num_words);
   202e0:	aa08      	add	r2, sp, #32
   202e2:	4669      	mov	r1, sp
   202e4:	4668      	mov	r0, sp
   202e6:	f7ff fd5c 	bl	1fda2 <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   202ea:	4621      	mov	r1, r4
   202ec:	4668      	mov	r0, sp
   202ee:	f7ff fc3c 	bl	1fb6a <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   202f2:	4622      	mov	r2, r4
   202f4:	a918      	add	r1, sp, #96	; 0x60
   202f6:	a810      	add	r0, sp, #64	; 0x40
   202f8:	f7ff fd29 	bl	1fd4e <uECC_vli_cmp_unsafe>
   202fc:	2800      	cmp	r0, #0
   202fe:	da05      	bge.n	2030c <uECC_vli_modInv+0xbe>
        			uECC_vli_add(u, u, mod, num_words);
   20300:	a910      	add	r1, sp, #64	; 0x40
   20302:	4623      	mov	r3, r4
   20304:	462a      	mov	r2, r5
   20306:	4608      	mov	r0, r1
   20308:	f7ff fc17 	bl	1fb3a <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   2030c:	a910      	add	r1, sp, #64	; 0x40
   2030e:	4623      	mov	r3, r4
   20310:	aa18      	add	r2, sp, #96	; 0x60
   20312:	4608      	mov	r0, r1
   20314:	f7ff fd45 	bl	1fda2 <uECC_vli_sub>
   20318:	e7ce      	b.n	202b8 <uECC_vli_modInv+0x6a>
      			uECC_vli_sub(b, b, a, num_words);
   2031a:	a908      	add	r1, sp, #32
   2031c:	466a      	mov	r2, sp
   2031e:	4608      	mov	r0, r1
   20320:	f7ff fd3f 	bl	1fda2 <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   20324:	4621      	mov	r1, r4
   20326:	a808      	add	r0, sp, #32
   20328:	f7ff fc1f 	bl	1fb6a <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   2032c:	4622      	mov	r2, r4
   2032e:	a910      	add	r1, sp, #64	; 0x40
   20330:	a818      	add	r0, sp, #96	; 0x60
   20332:	f7ff fd0c 	bl	1fd4e <uECC_vli_cmp_unsafe>
   20336:	2800      	cmp	r0, #0
   20338:	da05      	bge.n	20346 <uECC_vli_modInv+0xf8>
        			uECC_vli_add(v, v, mod, num_words);
   2033a:	a918      	add	r1, sp, #96	; 0x60
   2033c:	4623      	mov	r3, r4
   2033e:	462a      	mov	r2, r5
   20340:	4608      	mov	r0, r1
   20342:	f7ff fbfa 	bl	1fb3a <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   20346:	a918      	add	r1, sp, #96	; 0x60
   20348:	4623      	mov	r3, r4
   2034a:	aa10      	add	r2, sp, #64	; 0x40
   2034c:	4608      	mov	r0, r1
   2034e:	f7ff fd28 	bl	1fda2 <uECC_vli_sub>
   20352:	e7be      	b.n	202d2 <uECC_vli_modInv+0x84>

00020354 <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   20354:	7809      	ldrb	r1, [r1, #0]
   20356:	0049      	lsls	r1, r1, #1
   20358:	b249      	sxtb	r1, r1
   2035a:	f7ff bcb2 	b.w	1fcc2 <uECC_vli_isZero>

0002035e <apply_z>:
{
   2035e:	b5f0      	push	{r4, r5, r6, r7, lr}
   20360:	4615      	mov	r5, r2
   20362:	b089      	sub	sp, #36	; 0x24
   20364:	461c      	mov	r4, r3
   20366:	4607      	mov	r7, r0
   20368:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   2036a:	461a      	mov	r2, r3
   2036c:	4629      	mov	r1, r5
   2036e:	4668      	mov	r0, sp
   20370:	f7ff fe03 	bl	1ff7a <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   20374:	4623      	mov	r3, r4
   20376:	466a      	mov	r2, sp
   20378:	4639      	mov	r1, r7
   2037a:	4638      	mov	r0, r7
   2037c:	f7ff fded 	bl	1ff5a <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   20380:	4623      	mov	r3, r4
   20382:	462a      	mov	r2, r5
   20384:	4669      	mov	r1, sp
   20386:	4668      	mov	r0, sp
   20388:	f7ff fde7 	bl	1ff5a <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   2038c:	4623      	mov	r3, r4
   2038e:	466a      	mov	r2, sp
   20390:	4631      	mov	r1, r6
   20392:	4630      	mov	r0, r6
   20394:	f7ff fde1 	bl	1ff5a <uECC_vli_modMult_fast>
}
   20398:	b009      	add	sp, #36	; 0x24
   2039a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002039c <XYcZ_add>:
{
   2039c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   203a0:	b08a      	sub	sp, #40	; 0x28
   203a2:	4614      	mov	r4, r2
   203a4:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	wordcount_t num_words = curve->num_words;
   203a8:	4655      	mov	r5, sl
{
   203aa:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   203ac:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   203b0:	9600      	str	r6, [sp, #0]
{
   203b2:	4680      	mov	r8, r0
   203b4:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   203b6:	462b      	mov	r3, r5
   203b8:	4602      	mov	r2, r0
   203ba:	4621      	mov	r1, r4
   203bc:	a802      	add	r0, sp, #8
   203be:	f7ff fd22 	bl	1fe06 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   203c2:	a902      	add	r1, sp, #8
   203c4:	4652      	mov	r2, sl
   203c6:	4608      	mov	r0, r1
   203c8:	f7ff fdd7 	bl	1ff7a <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   203cc:	4653      	mov	r3, sl
   203ce:	aa02      	add	r2, sp, #8
   203d0:	4641      	mov	r1, r8
   203d2:	4640      	mov	r0, r8
   203d4:	f7ff fdc1 	bl	1ff5a <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   203d8:	4653      	mov	r3, sl
   203da:	aa02      	add	r2, sp, #8
   203dc:	4621      	mov	r1, r4
   203de:	4620      	mov	r0, r4
   203e0:	f7ff fdbb 	bl	1ff5a <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   203e4:	462b      	mov	r3, r5
   203e6:	464a      	mov	r2, r9
   203e8:	4639      	mov	r1, r7
   203ea:	4638      	mov	r0, r7
   203ec:	9600      	str	r6, [sp, #0]
   203ee:	f7ff fd0a 	bl	1fe06 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   203f2:	4652      	mov	r2, sl
   203f4:	4639      	mov	r1, r7
   203f6:	a802      	add	r0, sp, #8
   203f8:	f7ff fdbf 	bl	1ff7a <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   203fc:	a902      	add	r1, sp, #8
   203fe:	462b      	mov	r3, r5
   20400:	4642      	mov	r2, r8
   20402:	4608      	mov	r0, r1
   20404:	9600      	str	r6, [sp, #0]
   20406:	f7ff fcfe 	bl	1fe06 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   2040a:	a902      	add	r1, sp, #8
   2040c:	462b      	mov	r3, r5
   2040e:	4622      	mov	r2, r4
   20410:	4608      	mov	r0, r1
   20412:	9600      	str	r6, [sp, #0]
   20414:	f7ff fcf7 	bl	1fe06 <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   20418:	462b      	mov	r3, r5
   2041a:	4642      	mov	r2, r8
   2041c:	4621      	mov	r1, r4
   2041e:	4620      	mov	r0, r4
   20420:	9600      	str	r6, [sp, #0]
   20422:	f7ff fcf0 	bl	1fe06 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   20426:	4653      	mov	r3, sl
   20428:	4622      	mov	r2, r4
   2042a:	4649      	mov	r1, r9
   2042c:	4648      	mov	r0, r9
   2042e:	f7ff fd94 	bl	1ff5a <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   20432:	462b      	mov	r3, r5
   20434:	aa02      	add	r2, sp, #8
   20436:	4641      	mov	r1, r8
   20438:	4620      	mov	r0, r4
   2043a:	9600      	str	r6, [sp, #0]
   2043c:	f7ff fce3 	bl	1fe06 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   20440:	4653      	mov	r3, sl
   20442:	4622      	mov	r2, r4
   20444:	4639      	mov	r1, r7
   20446:	4638      	mov	r0, r7
   20448:	f7ff fd87 	bl	1ff5a <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   2044c:	462b      	mov	r3, r5
   2044e:	464a      	mov	r2, r9
   20450:	4639      	mov	r1, r7
   20452:	4638      	mov	r0, r7
   20454:	9600      	str	r6, [sp, #0]
   20456:	f7ff fcd6 	bl	1fe06 <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   2045a:	4632      	mov	r2, r6
   2045c:	a902      	add	r1, sp, #8
   2045e:	4620      	mov	r0, r4
   20460:	f7ff fc69 	bl	1fd36 <uECC_vli_set>
}
   20464:	b00a      	add	sp, #40	; 0x28
   20466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002046a <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   2046a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2046e:	b0b1      	sub	sp, #196	; 0xc4
   20470:	e9cd 0103 	strd	r0, r1, [sp, #12]
   20474:	9c3b      	ldr	r4, [sp, #236]	; 0xec
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   20476:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   2047a:	a818      	add	r0, sp, #96	; 0x60
{
   2047c:	4692      	mov	sl, r2
	uECC_vli_set(Rx[1], point, num_words);
   2047e:	463a      	mov	r2, r7
{
   20480:	461e      	mov	r6, r3
	uECC_vli_set(Rx[1], point, num_words);
   20482:	f7ff fc58 	bl	1fd36 <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   20486:	00bb      	lsls	r3, r7, #2
   20488:	9305      	str	r3, [sp, #20]
   2048a:	9b04      	ldr	r3, [sp, #16]
   2048c:	eb03 0387 	add.w	r3, r3, r7, lsl #2
   20490:	4619      	mov	r1, r3
   20492:	a828      	add	r0, sp, #160	; 0xa0
   20494:	9302      	str	r3, [sp, #8]
   20496:	f7ff fc4e 	bl	1fd36 <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   2049a:	f994 5000 	ldrsb.w	r5, [r4]
	if (initial_Z) {
   2049e:	2e00      	cmp	r6, #0
   204a0:	f000 8088 	beq.w	205b4 <EccPoint_mult+0x14a>
		uECC_vli_set(z, initial_Z, num_words);
   204a4:	462a      	mov	r2, r5
   204a6:	4631      	mov	r1, r6
   204a8:	a808      	add	r0, sp, #32
   204aa:	f7ff fc44 	bl	1fd36 <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   204ae:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   204b2:	462a      	mov	r2, r5
   204b4:	a918      	add	r1, sp, #96	; 0x60
   204b6:	4640      	mov	r0, r8
	uECC_vli_set(Y2, Y1, num_words);
   204b8:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   204bc:	f7ff fc3b 	bl	1fd36 <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   204c0:	a928      	add	r1, sp, #160	; 0xa0
   204c2:	4648      	mov	r0, r9
   204c4:	f7ff fc37 	bl	1fd36 <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   204c8:	4623      	mov	r3, r4
   204ca:	aa08      	add	r2, sp, #32
   204cc:	a928      	add	r1, sp, #160	; 0xa0
   204ce:	a818      	add	r0, sp, #96	; 0x60
   204d0:	f7ff ff45 	bl	2035e <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   204d4:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   204d8:	4623      	mov	r3, r4
   204da:	aa08      	add	r2, sp, #32
   204dc:	a928      	add	r1, sp, #160	; 0xa0
   204de:	a818      	add	r0, sp, #96	; 0x60
   204e0:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   204e2:	4623      	mov	r3, r4
   204e4:	aa08      	add	r2, sp, #32
   204e6:	4649      	mov	r1, r9
   204e8:	4640      	mov	r0, r8
   204ea:	f7ff ff38 	bl	2035e <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   204ee:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   204f2:	3d02      	subs	r5, #2
   204f4:	b22d      	sxth	r5, r5
   204f6:	2d00      	cmp	r5, #0
   204f8:	dc63      	bgt.n	205c2 <EccPoint_mult+0x158>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   204fa:	f8da 5000 	ldr.w	r5, [sl]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   204fe:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   20500:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   20504:	ab10      	add	r3, sp, #64	; 0x40
   20506:	eb03 1846 	add.w	r8, r3, r6, lsl #5
   2050a:	43ed      	mvns	r5, r5
   2050c:	ab20      	add	r3, sp, #128	; 0x80
   2050e:	eb03 1646 	add.w	r6, r3, r6, lsl #5
   20512:	f005 0501 	and.w	r5, r5, #1
   20516:	ab10      	add	r3, sp, #64	; 0x40
   20518:	eb03 1945 	add.w	r9, r3, r5, lsl #5
   2051c:	ab20      	add	r3, sp, #128	; 0x80
   2051e:	eb03 1545 	add.w	r5, r3, r5, lsl #5

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   20522:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   20526:	462b      	mov	r3, r5
   20528:	464a      	mov	r2, r9
   2052a:	4631      	mov	r1, r6
   2052c:	4640      	mov	r0, r8
   2052e:	f7ff fe00 	bl	20132 <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   20532:	4653      	mov	r3, sl
   20534:	aa10      	add	r2, sp, #64	; 0x40
   20536:	a918      	add	r1, sp, #96	; 0x60
   20538:	a808      	add	r0, sp, #32
   2053a:	9700      	str	r7, [sp, #0]
   2053c:	f7ff fc63 	bl	1fe06 <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   20540:	a908      	add	r1, sp, #32
   20542:	4623      	mov	r3, r4
   20544:	4632      	mov	r2, r6
   20546:	4608      	mov	r0, r1
   20548:	f7ff fd07 	bl	1ff5a <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   2054c:	a908      	add	r1, sp, #32
   2054e:	9a04      	ldr	r2, [sp, #16]
   20550:	4623      	mov	r3, r4
   20552:	4608      	mov	r0, r1
   20554:	f7ff fd01 	bl	1ff5a <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   20558:	a908      	add	r1, sp, #32
   2055a:	463b      	mov	r3, r7
   2055c:	4652      	mov	r2, sl
   2055e:	4608      	mov	r0, r1
   20560:	f7ff fe75 	bl	2024e <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   20564:	a908      	add	r1, sp, #32
   20566:	9a02      	ldr	r2, [sp, #8]
   20568:	4623      	mov	r3, r4
   2056a:	4608      	mov	r0, r1
   2056c:	f7ff fcf5 	bl	1ff5a <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   20570:	a908      	add	r1, sp, #32
   20572:	4623      	mov	r3, r4
   20574:	4642      	mov	r2, r8
   20576:	4608      	mov	r0, r1
   20578:	f7ff fcef 	bl	1ff5a <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   2057c:	9400      	str	r4, [sp, #0]
   2057e:	4633      	mov	r3, r6
   20580:	4642      	mov	r2, r8
   20582:	4629      	mov	r1, r5
   20584:	4648      	mov	r0, r9
   20586:	f7ff ff09 	bl	2039c <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   2058a:	4623      	mov	r3, r4
   2058c:	aa08      	add	r2, sp, #32
   2058e:	a920      	add	r1, sp, #128	; 0x80
   20590:	a810      	add	r0, sp, #64	; 0x40
   20592:	f7ff fee4 	bl	2035e <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   20596:	9803      	ldr	r0, [sp, #12]
   20598:	463a      	mov	r2, r7
   2059a:	a910      	add	r1, sp, #64	; 0x40
   2059c:	f7ff fbcb 	bl	1fd36 <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   205a0:	9b03      	ldr	r3, [sp, #12]
   205a2:	9c05      	ldr	r4, [sp, #20]
   205a4:	4423      	add	r3, r4
   205a6:	a920      	add	r1, sp, #128	; 0x80
   205a8:	4618      	mov	r0, r3
   205aa:	f7ff fbc4 	bl	1fd36 <uECC_vli_set>
}
   205ae:	b031      	add	sp, #196	; 0xc4
   205b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   205b4:	4629      	mov	r1, r5
   205b6:	a808      	add	r0, sp, #32
   205b8:	f7ff fb78 	bl	1fcac <uECC_vli_clear>
		z[0] = 1;
   205bc:	2301      	movs	r3, #1
   205be:	9308      	str	r3, [sp, #32]
   205c0:	e775      	b.n	204ae <EccPoint_mult+0x44>
		nb = !uECC_vli_testBit(scalar, i);
   205c2:	4629      	mov	r1, r5
   205c4:	4650      	mov	r0, sl
   205c6:	f7ff fb8b 	bl	1fce0 <uECC_vli_testBit>
   205ca:	fab0 f680 	clz	r6, r0
   205ce:	0976      	lsrs	r6, r6, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   205d0:	f1c6 0101 	rsb	r1, r6, #1
   205d4:	eb08 1b46 	add.w	fp, r8, r6, lsl #5
   205d8:	eb09 1646 	add.w	r6, r9, r6, lsl #5
   205dc:	eb08 1041 	add.w	r0, r8, r1, lsl #5
   205e0:	4633      	mov	r3, r6
   205e2:	eb09 1141 	add.w	r1, r9, r1, lsl #5
   205e6:	465a      	mov	r2, fp
   205e8:	9400      	str	r4, [sp, #0]
   205ea:	e9cd 0106 	strd	r0, r1, [sp, #24]
   205ee:	f7ff fda0 	bl	20132 <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   205f2:	9907      	ldr	r1, [sp, #28]
   205f4:	9806      	ldr	r0, [sp, #24]
   205f6:	9400      	str	r4, [sp, #0]
   205f8:	460b      	mov	r3, r1
   205fa:	4602      	mov	r2, r0
   205fc:	4631      	mov	r1, r6
   205fe:	4658      	mov	r0, fp
   20600:	f7ff fecc 	bl	2039c <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   20604:	3d01      	subs	r5, #1
   20606:	e775      	b.n	204f4 <EccPoint_mult+0x8a>

00020608 <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   20608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   2060c:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
   20610:	f119 081f 	adds.w	r8, r9, #31
{
   20614:	461d      	mov	r5, r3
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   20616:	bf48      	it	mi
   20618:	f109 083e 	addmi.w	r8, r9, #62	; 0x3e
{
   2061c:	460e      	mov	r6, r1
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   2061e:	f348 1847 	sbfx	r8, r8, #5, #8

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   20622:	3524      	adds	r5, #36	; 0x24
   20624:	4601      	mov	r1, r0
{
   20626:	4617      	mov	r7, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   20628:	4643      	mov	r3, r8
   2062a:	462a      	mov	r2, r5
   2062c:	4630      	mov	r0, r6
   2062e:	f7ff fa84 	bl	1fb3a <uECC_vli_add>
   20632:	4604      	mov	r4, r0
   20634:	b990      	cbnz	r0, 2065c <regularize_k+0x54>
   20636:	ebb9 1f48 	cmp.w	r9, r8, lsl #5
   2063a:	da06      	bge.n	2064a <regularize_k+0x42>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   2063c:	4649      	mov	r1, r9
   2063e:	4630      	mov	r0, r6
   20640:	f7ff fb4e 	bl	1fce0 <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   20644:	1e04      	subs	r4, r0, #0
   20646:	bf18      	it	ne
   20648:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   2064a:	4643      	mov	r3, r8
   2064c:	462a      	mov	r2, r5
   2064e:	4631      	mov	r1, r6
   20650:	4638      	mov	r0, r7
   20652:	f7ff fa72 	bl	1fb3a <uECC_vli_add>

	return carry;
}
   20656:	4620      	mov	r0, r4
   20658:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   2065c:	2401      	movs	r4, #1
   2065e:	e7f4      	b.n	2064a <regularize_k+0x42>

00020660 <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   20660:	b530      	push	{r4, r5, lr}
   20662:	4614      	mov	r4, r2
   20664:	b095      	sub	sp, #84	; 0x54
   20666:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   20668:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   2066a:	4623      	mov	r3, r4
{
   2066c:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   2066e:	a904      	add	r1, sp, #16
   20670:	9102      	str	r1, [sp, #8]
   20672:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   20674:	f7ff ffc8 	bl	20608 <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   20678:	fab0 f380 	clz	r3, r0
   2067c:	095b      	lsrs	r3, r3, #5
   2067e:	aa14      	add	r2, sp, #80	; 0x50
   20680:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   20684:	8863      	ldrh	r3, [r4, #2]
   20686:	9401      	str	r4, [sp, #4]
   20688:	3301      	adds	r3, #1
   2068a:	b21b      	sxth	r3, r3
   2068c:	9300      	str	r3, [sp, #0]
   2068e:	f852 2c48 	ldr.w	r2, [r2, #-72]
   20692:	2300      	movs	r3, #0
   20694:	f104 0144 	add.w	r1, r4, #68	; 0x44
   20698:	4628      	mov	r0, r5
   2069a:	f7ff fee6 	bl	2046a <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   2069e:	4621      	mov	r1, r4
   206a0:	4628      	mov	r0, r5
   206a2:	f7ff fe57 	bl	20354 <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   206a6:	fab0 f080 	clz	r0, r0
   206aa:	0940      	lsrs	r0, r0, #5
   206ac:	b015      	add	sp, #84	; 0x54
   206ae:	bd30      	pop	{r4, r5, pc}

000206b0 <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   206b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   206b2:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   206b4:	1e4f      	subs	r7, r1, #1
   206b6:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   206b8:	428c      	cmp	r4, r1
   206ba:	f105 0501 	add.w	r5, r5, #1
   206be:	db00      	blt.n	206c2 <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   206c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   206c2:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   206c4:	f023 0603 	bic.w	r6, r3, #3
   206c8:	f003 0303 	and.w	r3, r3, #3
   206cc:	5996      	ldr	r6, [r2, r6]
   206ce:	00db      	lsls	r3, r3, #3
   206d0:	fa26 f303 	lsr.w	r3, r6, r3
   206d4:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   206d6:	e7ee      	b.n	206b6 <uECC_vli_nativeToBytes+0x6>

000206d8 <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   206d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   206da:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   206dc:	1cd1      	adds	r1, r2, #3
   206de:	bf48      	it	mi
   206e0:	1d91      	addmi	r1, r2, #6
   206e2:	f341 0187 	sbfx	r1, r1, #2, #8
{
   206e6:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   206e8:	f7ff fae0 	bl	1fcac <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   206ec:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   206ee:	1e67      	subs	r7, r4, #1
   206f0:	b26a      	sxtb	r2, r5
	for (i = 0; i < num_bytes; ++i) {
   206f2:	42a2      	cmp	r2, r4
   206f4:	f105 0501 	add.w	r5, r5, #1
   206f8:	db00      	blt.n	206fc <uECC_vli_bytesToNative+0x24>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   206fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   206fc:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   206fe:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   20702:	5cb2      	ldrb	r2, [r6, r2]
   20704:	f003 0303 	and.w	r3, r3, #3
   20708:	00db      	lsls	r3, r3, #3
   2070a:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   2070e:	5842      	ldr	r2, [r0, r1]
   20710:	431a      	orrs	r2, r3
   20712:	5042      	str	r2, [r0, r1]
	for (i = 0; i < num_bytes; ++i) {
   20714:	e7ec      	b.n	206f0 <uECC_vli_bytesToNative+0x18>

00020716 <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   20716:	b5f0      	push	{r4, r5, r6, r7, lr}
   20718:	b091      	sub	sp, #68	; 0x44
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   2071a:	f991 6000 	ldrsb.w	r6, [r1]
{
   2071e:	4605      	mov	r5, r0
   20720:	460c      	mov	r4, r1

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   20722:	f7ff fe17 	bl	20354 <EccPoint_isZero>
   20726:	bb28      	cbnz	r0, 20774 <uECC_valid_point+0x5e>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   20728:	1d27      	adds	r7, r4, #4
   2072a:	4632      	mov	r2, r6
   2072c:	4629      	mov	r1, r5
   2072e:	4638      	mov	r0, r7
   20730:	f7ff fb0d 	bl	1fd4e <uECC_vli_cmp_unsafe>
   20734:	2801      	cmp	r0, #1
   20736:	d120      	bne.n	2077a <uECC_valid_point+0x64>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   20738:	eb05 0186 	add.w	r1, r5, r6, lsl #2
   2073c:	4632      	mov	r2, r6
   2073e:	4638      	mov	r0, r7
   20740:	f7ff fb05 	bl	1fd4e <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   20744:	2801      	cmp	r0, #1
   20746:	d118      	bne.n	2077a <uECC_valid_point+0x64>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   20748:	4622      	mov	r2, r4
   2074a:	4668      	mov	r0, sp
   2074c:	f7ff fc15 	bl	1ff7a <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   20750:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   20754:	4622      	mov	r2, r4
   20756:	4629      	mov	r1, r5
   20758:	a808      	add	r0, sp, #32
   2075a:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   2075c:	4632      	mov	r2, r6
   2075e:	a908      	add	r1, sp, #32
   20760:	4668      	mov	r0, sp
   20762:	f7ff fb0b 	bl	1fd7c <uECC_vli_equal>
   20766:	2800      	cmp	r0, #0
		return -3;
   20768:	bf0c      	ite	eq
   2076a:	2000      	moveq	r0, #0
   2076c:	f06f 0002 	mvnne.w	r0, #2

	return 0;
}
   20770:	b011      	add	sp, #68	; 0x44
   20772:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   20774:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20778:	e7fa      	b.n	20770 <uECC_valid_point+0x5a>
		return -2;
   2077a:	f06f 0001 	mvn.w	r0, #1
   2077e:	e7f7      	b.n	20770 <uECC_valid_point+0x5a>

00020780 <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   20780:	b570      	push	{r4, r5, r6, lr}
   20782:	460c      	mov	r4, r1
   20784:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   20786:	4626      	mov	r6, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   20788:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   2078c:	4605      	mov	r5, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   2078e:	4601      	mov	r1, r0
   20790:	4668      	mov	r0, sp
   20792:	f7ff ffa1 	bl	206d8 <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   20796:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   2079a:	f916 0b44 	ldrsb.w	r0, [r6], #68
	uECC_vli_bytesToNative(
   2079e:	18a9      	adds	r1, r5, r2
   207a0:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   207a4:	f7ff ff98 	bl	206d8 <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   207a8:	2210      	movs	r2, #16
   207aa:	4631      	mov	r1, r6
   207ac:	4668      	mov	r0, sp
   207ae:	f7ff face 	bl	1fd4e <uECC_vli_cmp_unsafe>
   207b2:	b128      	cbz	r0, 207c0 <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   207b4:	4621      	mov	r1, r4
   207b6:	4668      	mov	r0, sp
   207b8:	f7ff ffad 	bl	20716 <uECC_valid_point>
}
   207bc:	b010      	add	sp, #64	; 0x40
   207be:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   207c0:	f06f 0003 	mvn.w	r0, #3
   207c4:	e7fa      	b.n	207bc <uECC_valid_public_key+0x3c>

000207c6 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   207c6:	78cb      	ldrb	r3, [r1, #3]
   207c8:	7802      	ldrb	r2, [r0, #0]
   207ca:	4053      	eors	r3, r2
   207cc:	7003      	strb	r3, [r0, #0]
   207ce:	884b      	ldrh	r3, [r1, #2]
   207d0:	7842      	ldrb	r2, [r0, #1]
   207d2:	4053      	eors	r3, r2
   207d4:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   207d6:	680a      	ldr	r2, [r1, #0]
   207d8:	7883      	ldrb	r3, [r0, #2]
   207da:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   207de:	7083      	strb	r3, [r0, #2]
   207e0:	680a      	ldr	r2, [r1, #0]
   207e2:	78c3      	ldrb	r3, [r0, #3]
   207e4:	4053      	eors	r3, r2
   207e6:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   207e8:	79cb      	ldrb	r3, [r1, #7]
   207ea:	7902      	ldrb	r2, [r0, #4]
   207ec:	4053      	eors	r3, r2
   207ee:	7103      	strb	r3, [r0, #4]
   207f0:	88cb      	ldrh	r3, [r1, #6]
   207f2:	7942      	ldrb	r2, [r0, #5]
   207f4:	4053      	eors	r3, r2
   207f6:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   207f8:	684a      	ldr	r2, [r1, #4]
   207fa:	7983      	ldrb	r3, [r0, #6]
   207fc:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   20800:	7183      	strb	r3, [r0, #6]
   20802:	684a      	ldr	r2, [r1, #4]
   20804:	79c3      	ldrb	r3, [r0, #7]
   20806:	4053      	eors	r3, r2
   20808:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   2080a:	7acb      	ldrb	r3, [r1, #11]
   2080c:	7a02      	ldrb	r2, [r0, #8]
   2080e:	4053      	eors	r3, r2
   20810:	7203      	strb	r3, [r0, #8]
   20812:	7a42      	ldrb	r2, [r0, #9]
   20814:	894b      	ldrh	r3, [r1, #10]
   20816:	4053      	eors	r3, r2
   20818:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   2081a:	688a      	ldr	r2, [r1, #8]
   2081c:	7a83      	ldrb	r3, [r0, #10]
   2081e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   20822:	7283      	strb	r3, [r0, #10]
   20824:	688a      	ldr	r2, [r1, #8]
   20826:	7ac3      	ldrb	r3, [r0, #11]
   20828:	4053      	eors	r3, r2
   2082a:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   2082c:	7bcb      	ldrb	r3, [r1, #15]
   2082e:	7b02      	ldrb	r2, [r0, #12]
   20830:	4053      	eors	r3, r2
   20832:	7303      	strb	r3, [r0, #12]
   20834:	89cb      	ldrh	r3, [r1, #14]
   20836:	7b42      	ldrb	r2, [r0, #13]
   20838:	4053      	eors	r3, r2
   2083a:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   2083c:	68ca      	ldr	r2, [r1, #12]
   2083e:	7b83      	ldrb	r3, [r0, #14]
   20840:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   20844:	7383      	strb	r3, [r0, #14]
   20846:	68ca      	ldr	r2, [r1, #12]
   20848:	7bc3      	ldrb	r3, [r0, #15]
   2084a:	4053      	eors	r3, r2
   2084c:	73c3      	strb	r3, [r0, #15]
}
   2084e:	4770      	bx	lr

00020850 <shift_rows>:
{
   20850:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   20852:	7802      	ldrb	r2, [r0, #0]
   20854:	f88d 2000 	strb.w	r2, [sp]
   20858:	7942      	ldrb	r2, [r0, #5]
   2085a:	f88d 2001 	strb.w	r2, [sp, #1]
   2085e:	7a82      	ldrb	r2, [r0, #10]
   20860:	f88d 2002 	strb.w	r2, [sp, #2]
   20864:	7bc2      	ldrb	r2, [r0, #15]
   20866:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   2086a:	7902      	ldrb	r2, [r0, #4]
   2086c:	f88d 2004 	strb.w	r2, [sp, #4]
   20870:	7a42      	ldrb	r2, [r0, #9]
   20872:	f88d 2005 	strb.w	r2, [sp, #5]
   20876:	7b82      	ldrb	r2, [r0, #14]
   20878:	f88d 2006 	strb.w	r2, [sp, #6]
   2087c:	78c2      	ldrb	r2, [r0, #3]
   2087e:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   20882:	7a02      	ldrb	r2, [r0, #8]
   20884:	f88d 2008 	strb.w	r2, [sp, #8]
   20888:	7b42      	ldrb	r2, [r0, #13]
   2088a:	f88d 2009 	strb.w	r2, [sp, #9]
   2088e:	7882      	ldrb	r2, [r0, #2]
   20890:	f88d 200a 	strb.w	r2, [sp, #10]
   20894:	79c2      	ldrb	r2, [r0, #7]
   20896:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   2089a:	7b02      	ldrb	r2, [r0, #12]
   2089c:	f88d 200c 	strb.w	r2, [sp, #12]
   208a0:	7842      	ldrb	r2, [r0, #1]
   208a2:	7ac3      	ldrb	r3, [r0, #11]
   208a4:	f88d 200d 	strb.w	r2, [sp, #13]
   208a8:	7982      	ldrb	r2, [r0, #6]
   208aa:	f88d 200e 	strb.w	r2, [sp, #14]
   208ae:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   208b2:	2310      	movs	r3, #16
   208b4:	466a      	mov	r2, sp
   208b6:	4619      	mov	r1, r3
   208b8:	f7ff f879 	bl	1f9ae <_copy>
}
   208bc:	b005      	add	sp, #20
   208be:	f85d fb04 	ldr.w	pc, [sp], #4

000208c2 <mult_row_column>:
{
   208c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   208c4:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   208c6:	7808      	ldrb	r0, [r1, #0]
{
   208c8:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   208ca:	f7ff f87f 	bl	1f9cc <_double_byte>
   208ce:	4605      	mov	r5, r0
   208d0:	7860      	ldrb	r0, [r4, #1]
   208d2:	f7ff f87b 	bl	1f9cc <_double_byte>
   208d6:	78a2      	ldrb	r2, [r4, #2]
   208d8:	7863      	ldrb	r3, [r4, #1]
   208da:	4053      	eors	r3, r2
   208dc:	78e2      	ldrb	r2, [r4, #3]
   208de:	4053      	eors	r3, r2
   208e0:	405d      	eors	r5, r3
   208e2:	4045      	eors	r5, r0
   208e4:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   208e6:	7860      	ldrb	r0, [r4, #1]
   208e8:	7827      	ldrb	r7, [r4, #0]
   208ea:	f7ff f86f 	bl	1f9cc <_double_byte>
   208ee:	4605      	mov	r5, r0
   208f0:	78a0      	ldrb	r0, [r4, #2]
   208f2:	f7ff f86b 	bl	1f9cc <_double_byte>
   208f6:	78a3      	ldrb	r3, [r4, #2]
   208f8:	405f      	eors	r7, r3
   208fa:	78e3      	ldrb	r3, [r4, #3]
   208fc:	405f      	eors	r7, r3
   208fe:	407d      	eors	r5, r7
   20900:	4045      	eors	r5, r0
   20902:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   20904:	78a0      	ldrb	r0, [r4, #2]
   20906:	7865      	ldrb	r5, [r4, #1]
   20908:	7827      	ldrb	r7, [r4, #0]
   2090a:	f7ff f85f 	bl	1f9cc <_double_byte>
   2090e:	406f      	eors	r7, r5
   20910:	4605      	mov	r5, r0
   20912:	78e0      	ldrb	r0, [r4, #3]
   20914:	f7ff f85a 	bl	1f9cc <_double_byte>
   20918:	78e3      	ldrb	r3, [r4, #3]
   2091a:	405f      	eors	r7, r3
   2091c:	407d      	eors	r5, r7
   2091e:	4045      	eors	r5, r0
   20920:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   20922:	7820      	ldrb	r0, [r4, #0]
   20924:	f7ff f852 	bl	1f9cc <_double_byte>
   20928:	7863      	ldrb	r3, [r4, #1]
   2092a:	7825      	ldrb	r5, [r4, #0]
   2092c:	405d      	eors	r5, r3
   2092e:	78a3      	ldrb	r3, [r4, #2]
   20930:	405d      	eors	r5, r3
   20932:	4045      	eors	r5, r0
   20934:	78e0      	ldrb	r0, [r4, #3]
   20936:	f7ff f849 	bl	1f9cc <_double_byte>
   2093a:	b2ed      	uxtb	r5, r5
   2093c:	4045      	eors	r5, r0
   2093e:	70f5      	strb	r5, [r6, #3]
}
   20940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00020942 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   20942:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   20944:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   20946:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   20948:	f912 3b10 	ldrsb.w	r3, [r2], #16
   2094c:	2b00      	cmp	r3, #0
   2094e:	bfb4      	ite	lt
   20950:	2387      	movlt	r3, #135	; 0x87
   20952:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   20954:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   20958:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   2095c:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   2095e:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   20962:	d002      	beq.n	2096a <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   20964:	7813      	ldrb	r3, [r2, #0]
   20966:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   20968:	e7f4      	b.n	20954 <gf_double+0x12>
	}
}
   2096a:	bd10      	pop	{r4, pc}

0002096c <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   2096c:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   2096e:	b120      	cbz	r0, 2097a <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   20970:	2258      	movs	r2, #88	; 0x58
   20972:	2100      	movs	r1, #0
   20974:	f7ff f828 	bl	1f9c8 <_set>
   20978:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   2097a:	bd08      	pop	{r3, pc}

0002097c <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   2097c:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2097e:	4604      	mov	r4, r0
   20980:	b188      	cbz	r0, 209a6 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   20982:	2210      	movs	r2, #16
   20984:	2100      	movs	r1, #0
   20986:	f7ff f81f 	bl	1f9c8 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   2098a:	2210      	movs	r2, #16
   2098c:	f104 0030 	add.w	r0, r4, #48	; 0x30
   20990:	2100      	movs	r1, #0
   20992:	f7ff f819 	bl	1f9c8 <_set>
	s->leftover_offset = 0;
   20996:	2300      	movs	r3, #0
   20998:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   2099a:	2200      	movs	r2, #0
   2099c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   209a0:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   209a4:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   209a6:	bd10      	pop	{r4, pc}

000209a8 <tc_cmac_setup>:
{
   209a8:	b570      	push	{r4, r5, r6, lr}
   209aa:	460d      	mov	r5, r1
   209ac:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   209ae:	4604      	mov	r4, r0
   209b0:	b310      	cbz	r0, 209f8 <tc_cmac_setup+0x50>
   209b2:	b311      	cbz	r1, 209fa <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   209b4:	2258      	movs	r2, #88	; 0x58
   209b6:	2100      	movs	r1, #0
   209b8:	f7ff f806 	bl	1f9c8 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   209bc:	4629      	mov	r1, r5
	s->sched = sched;
   209be:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   209c0:	4630      	mov	r0, r6
   209c2:	f7e4 fee5 	bl	5790 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   209c6:	2210      	movs	r2, #16
   209c8:	2100      	movs	r1, #0
   209ca:	4620      	mov	r0, r4
   209cc:	f7fe fffc 	bl	1f9c8 <_set>
	gf_double (s->K1, s->iv);
   209d0:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   209d4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   209d6:	4621      	mov	r1, r4
   209d8:	4620      	mov	r0, r4
   209da:	f7e4 ff2b 	bl	5834 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   209de:	4621      	mov	r1, r4
   209e0:	4628      	mov	r0, r5
   209e2:	f7ff ffae 	bl	20942 <gf_double>
	gf_double (s->K2, s->K1);
   209e6:	4629      	mov	r1, r5
   209e8:	f104 0020 	add.w	r0, r4, #32
   209ec:	f7ff ffa9 	bl	20942 <gf_double>
	tc_cmac_init(s);
   209f0:	4620      	mov	r0, r4
   209f2:	f7ff ffc3 	bl	2097c <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   209f6:	2001      	movs	r0, #1
}
   209f8:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   209fa:	4608      	mov	r0, r1
   209fc:	e7fc      	b.n	209f8 <tc_cmac_setup+0x50>

000209fe <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   209fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20a02:	460d      	mov	r5, r1
   20a04:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   20a06:	4604      	mov	r4, r0
   20a08:	2800      	cmp	r0, #0
   20a0a:	d062      	beq.n	20ad2 <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   20a0c:	b912      	cbnz	r2, 20a14 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   20a0e:	2001      	movs	r0, #1
}
   20a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   20a14:	2900      	cmp	r1, #0
   20a16:	d05c      	beq.n	20ad2 <tc_cmac_update+0xd4>
	if (s->countdown == 0) {
   20a18:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   20a1c:	ea50 0301 	orrs.w	r3, r0, r1
   20a20:	d057      	beq.n	20ad2 <tc_cmac_update+0xd4>
	s->countdown--;
   20a22:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
	if (s->leftover_offset > 0) {
   20a26:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   20a2a:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
   20a2e:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   20a32:	f1b8 0f00 	cmp.w	r8, #0
   20a36:	d02a      	beq.n	20a8e <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   20a38:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   20a3c:	f108 0030 	add.w	r0, r8, #48	; 0x30
   20a40:	42be      	cmp	r6, r7
   20a42:	4420      	add	r0, r4
   20a44:	d208      	bcs.n	20a58 <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   20a46:	462a      	mov	r2, r5
   20a48:	4633      	mov	r3, r6
   20a4a:	4631      	mov	r1, r6
   20a4c:	f7fe ffaf 	bl	1f9ae <_copy>
			s->leftover_offset += data_length;
   20a50:	6c62      	ldr	r2, [r4, #68]	; 0x44
   20a52:	4432      	add	r2, r6
   20a54:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   20a56:	e7da      	b.n	20a0e <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   20a58:	463b      	mov	r3, r7
   20a5a:	462a      	mov	r2, r5
   20a5c:	4639      	mov	r1, r7
   20a5e:	f7fe ffa6 	bl	1f9ae <_copy>
		data_length -= remaining_space;
   20a62:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   20a64:	2300      	movs	r3, #0
   20a66:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   20a68:	4446      	add	r6, r8
		data += remaining_space;
   20a6a:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   20a6c:	1e63      	subs	r3, r4, #1
   20a6e:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   20a72:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   20a76:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   20a7a:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   20a7c:	ea82 0200 	eor.w	r2, r2, r0
   20a80:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   20a82:	d1f6      	bne.n	20a72 <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   20a84:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   20a86:	4621      	mov	r1, r4
   20a88:	4620      	mov	r0, r4
   20a8a:	f7e4 fed3 	bl	5834 <tc_aes_encrypt>
   20a8e:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   20a92:	2e10      	cmp	r6, #16
   20a94:	d80a      	bhi.n	20aac <tc_cmac_update+0xae>
	if (data_length > 0) {
   20a96:	2e00      	cmp	r6, #0
   20a98:	d0b9      	beq.n	20a0e <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   20a9a:	4633      	mov	r3, r6
   20a9c:	462a      	mov	r2, r5
   20a9e:	4631      	mov	r1, r6
   20aa0:	f104 0030 	add.w	r0, r4, #48	; 0x30
   20aa4:	f7fe ff83 	bl	1f9ae <_copy>
		s->leftover_offset = data_length;
   20aa8:	6466      	str	r6, [r4, #68]	; 0x44
   20aaa:	e7b0      	b.n	20a0e <tc_cmac_update+0x10>
   20aac:	1e63      	subs	r3, r4, #1
   20aae:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   20ab0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   20ab4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   20ab8:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   20aba:	ea82 0200 	eor.w	r2, r2, r0
   20abe:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   20ac0:	d1f6      	bne.n	20ab0 <tc_cmac_update+0xb2>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   20ac2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   20ac4:	4621      	mov	r1, r4
   20ac6:	4620      	mov	r0, r4
   20ac8:	f7e4 feb4 	bl	5834 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   20acc:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   20ace:	3e10      	subs	r6, #16
   20ad0:	e7df      	b.n	20a92 <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   20ad2:	2000      	movs	r0, #0
   20ad4:	e79c      	b.n	20a10 <tc_cmac_update+0x12>

00020ad6 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   20ad6:	b570      	push	{r4, r5, r6, lr}
   20ad8:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   20ada:	4605      	mov	r5, r0
   20adc:	b1e8      	cbz	r0, 20b1a <tc_cmac_final+0x44>
   20ade:	b369      	cbz	r1, 20b3c <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   20ae0:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   20ae2:	2a10      	cmp	r2, #16
   20ae4:	d11a      	bne.n	20b1c <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   20ae6:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   20ae8:	1e63      	subs	r3, r4, #1
   20aea:	3901      	subs	r1, #1
   20aec:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   20af0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   20af4:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   20af8:	4072      	eors	r2, r6
   20afa:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   20afe:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   20b00:	ea82 0206 	eor.w	r2, r2, r6
   20b04:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   20b06:	d1f3      	bne.n	20af0 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   20b08:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   20b0a:	4621      	mov	r1, r4
   20b0c:	4628      	mov	r0, r5
   20b0e:	f7e4 fe91 	bl	5834 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   20b12:	4620      	mov	r0, r4
   20b14:	f7ff ff2a 	bl	2096c <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   20b18:	2001      	movs	r0, #1
}
   20b1a:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   20b1c:	f102 0030 	add.w	r0, r2, #48	; 0x30
   20b20:	2100      	movs	r1, #0
   20b22:	f1c2 0210 	rsb	r2, r2, #16
   20b26:	4420      	add	r0, r4
   20b28:	f7fe ff4e 	bl	1f9c8 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   20b2c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   20b2e:	4423      	add	r3, r4
   20b30:	2280      	movs	r2, #128	; 0x80
   20b32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   20b36:	f104 0120 	add.w	r1, r4, #32
   20b3a:	e7d5      	b.n	20ae8 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   20b3c:	4608      	mov	r0, r1
   20b3e:	e7ec      	b.n	20b1a <tc_cmac_final+0x44>

00020b40 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   20b40:	2100      	movs	r1, #0
   20b42:	2001      	movs	r0, #1
   20b44:	f7e4 bfd8 	b.w	5af8 <z_arm_fatal_error>

00020b48 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   20b48:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   20b4a:	6800      	ldr	r0, [r0, #0]
   20b4c:	f7e4 bfd4 	b.w	5af8 <z_arm_fatal_error>

00020b50 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   20b50:	b508      	push	{r3, lr}
	handler();
   20b52:	f7e5 f809 	bl	5b68 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   20b56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   20b5a:	f7e5 ba7b 	b.w	6054 <z_arm_exc_exit>

00020b5e <_stdout_hook_default>:
}
   20b5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20b62:	4770      	bx	lr

00020b64 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   20b64:	f7fb be68 	b.w	1c838 <SystemInit>

00020b68 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
void pm_power_state_set(struct pm_state_info info)
{
   20b68:	b082      	sub	sp, #8
   20b6a:	ab02      	add	r3, sp, #8
   20b6c:	e903 0003 	stmdb	r3, {r0, r1}
	switch (info.state) {
   20b70:	f89d 3000 	ldrb.w	r3, [sp]
   20b74:	2b06      	cmp	r3, #6
   20b76:	d108      	bne.n	20b8a <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   20b78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20b7c:	2201      	movs	r2, #1
   20b7e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   20b82:	f3bf 8f4f 	dsb	sy
        __WFE();
   20b86:	bf20      	wfe
    while (true)
   20b88:	e7fd      	b.n	20b86 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   20b8a:	b002      	add	sp, #8
   20b8c:	4770      	bx	lr

00020b8e <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   20b8e:	b082      	sub	sp, #8
   20b90:	ab02      	add	r3, sp, #8
   20b92:	e903 0003 	stmdb	r3, {r0, r1}
   20b96:	2300      	movs	r3, #0
   20b98:	f383 8811 	msr	BASEPRI, r3
   20b9c:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   20ba0:	b002      	add	sp, #8
   20ba2:	4770      	bx	lr

00020ba4 <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   20ba4:	b530      	push	{r4, r5, lr}
   20ba6:	b085      	sub	sp, #20
   20ba8:	4614      	mov	r4, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   20baa:	880a      	ldrh	r2, [r1, #0]
   20bac:	788b      	ldrb	r3, [r1, #2]
   20bae:	f8ad 2000 	strh.w	r2, [sp]
{
   20bb2:	4605      	mov	r5, r0
	(void)memset(res + 3, 0, 13);
   20bb4:	220d      	movs	r2, #13
   20bb6:	2100      	movs	r1, #0
   20bb8:	f10d 0003 	add.w	r0, sp, #3
	memcpy(res, r, 3);
   20bbc:	f88d 3002 	strb.w	r3, [sp, #2]
	(void)memset(res + 3, 0, 13);
   20bc0:	f003 f82b 	bl	23c1a <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   20bc4:	466a      	mov	r2, sp
   20bc6:	4669      	mov	r1, sp
   20bc8:	4628      	mov	r0, r5
   20bca:	f7ef f957 	bl	fe7c <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   20bce:	b928      	cbnz	r0, 20bdc <ah+0x38>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   20bd0:	f8bd 2000 	ldrh.w	r2, [sp]
   20bd4:	f89d 3002 	ldrb.w	r3, [sp, #2]
   20bd8:	8022      	strh	r2, [r4, #0]
   20bda:	70a3      	strb	r3, [r4, #2]
	 * result of ah.
	 */
	memcpy(out, res, 3);

	return 0;
}
   20bdc:	b005      	add	sp, #20
   20bde:	bd30      	pop	{r4, r5, pc}

00020be0 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   20be0:	b513      	push	{r0, r1, r4, lr}
   20be2:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   20be4:	aa01      	add	r2, sp, #4
   20be6:	3103      	adds	r1, #3
   20be8:	f7ff ffdc 	bl	20ba4 <ah>
	if (err) {
   20bec:	b948      	cbnz	r0, 20c02 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   20bee:	2203      	movs	r2, #3
   20bf0:	a901      	add	r1, sp, #4
   20bf2:	4620      	mov	r0, r4
   20bf4:	f002 fff5 	bl	23be2 <memcmp>
   20bf8:	fab0 f080 	clz	r0, r0
   20bfc:	0940      	lsrs	r0, r0, #5
}
   20bfe:	b002      	add	sp, #8
   20c00:	bd10      	pop	{r4, pc}
		return false;
   20c02:	2000      	movs	r0, #0
   20c04:	e7fb      	b.n	20bfe <bt_rpa_irk_matches+0x1e>

00020c06 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   20c06:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   20c08:	1cce      	adds	r6, r1, #3
{
   20c0a:	4605      	mov	r5, r0
   20c0c:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   20c0e:	4630      	mov	r0, r6
   20c10:	2103      	movs	r1, #3
   20c12:	f7ef f931 	bl	fe78 <bt_rand>
	if (err) {
   20c16:	b960      	cbnz	r0, 20c32 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   20c18:	7963      	ldrb	r3, [r4, #5]
   20c1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   20c1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   20c22:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   20c24:	4622      	mov	r2, r4
   20c26:	4631      	mov	r1, r6
   20c28:	4628      	mov	r0, r5
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   20c2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   20c2e:	f7ff bfb9 	b.w	20ba4 <ah>
}
   20c32:	bd70      	pop	{r4, r5, r6, pc}

00020c34 <send_cmd_status>:
{
   20c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   20c38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   20c3c:	4606      	mov	r6, r0
   20c3e:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   20c40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20c44:	2100      	movs	r1, #0
   20c46:	200f      	movs	r0, #15
   20c48:	f7e5 fdb0 	bl	67ac <bt_buf_get_evt>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   20c4c:	2701      	movs	r7, #1
	return net_buf_simple_add(&buf->b, len);
   20c4e:	f100 0808 	add.w	r8, r0, #8
   20c52:	4604      	mov	r4, r0
   20c54:	7507      	strb	r7, [r0, #20]
   20c56:	2102      	movs	r1, #2
   20c58:	4640      	mov	r0, r8
   20c5a:	f001 ffb4 	bl	22bc6 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   20c5e:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   20c60:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   20c62:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   20c64:	7041      	strb	r1, [r0, #1]
   20c66:	4640      	mov	r0, r8
   20c68:	f001 ffad 	bl	22bc6 <net_buf_simple_add>
	evt->ncmd = 1U;
   20c6c:	7047      	strb	r7, [r0, #1]
	evt->status = status;
   20c6e:	7005      	strb	r5, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   20c70:	8046      	strh	r6, [r0, #2]
		bt_recv_prio(buf);
   20c72:	4620      	mov	r0, r4
}
   20c74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv_prio(buf);
   20c78:	f7e6 bf08 	b.w	7a8c <bt_recv_prio>

00020c7c <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   20c7c:	f101 0320 	add.w	r3, r1, #32
   20c80:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   20c82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   20c86:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   20c8a:	428b      	cmp	r3, r1
   20c8c:	d1f9      	bne.n	20c82 <sys_memcpy_swap.constprop.0+0x6>
}
   20c8e:	4770      	bx	lr

00020c90 <bt_hci_ecc_supported_commands>:
	supported_commands[34] |= BIT(2);
   20c90:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   20c94:	f043 0306 	orr.w	r3, r3, #6
   20c98:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
	supported_commands[41] |= BIT(2);
   20c9c:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   20ca0:	f043 0304 	orr.w	r3, r3, #4
   20ca4:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
}
   20ca8:	4770      	bx	lr

00020caa <default_CSPRNG>:
{
   20caa:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   20cac:	f7ef f8e4 	bl	fe78 <bt_rand>
}
   20cb0:	fab0 f080 	clz	r0, r0
   20cb4:	0940      	lsrs	r0, r0, #5
   20cb6:	bd08      	pop	{r3, pc}

00020cb8 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   20cb8:	b510      	push	{r4, lr}
   20cba:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   20cbc:	7801      	ldrb	r1, [r0, #0]
   20cbe:	7822      	ldrb	r2, [r4, #0]
   20cc0:	428a      	cmp	r2, r1
{
   20cc2:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   20cc4:	d00e      	beq.n	20ce4 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   20cc6:	4669      	mov	r1, sp
   20cc8:	f7e5 fcf6 	bl	66b8 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   20ccc:	a905      	add	r1, sp, #20
   20cce:	4620      	mov	r0, r4
   20cd0:	f7e5 fcf2 	bl	66b8 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   20cd4:	2210      	movs	r2, #16
   20cd6:	f10d 0115 	add.w	r1, sp, #21
   20cda:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   20cde:	f002 ff80 	bl	23be2 <memcmp>
   20ce2:	e007      	b.n	20cf4 <bt_uuid_cmp+0x3c>
	switch (u1->type) {
   20ce4:	2a01      	cmp	r2, #1
   20ce6:	d007      	beq.n	20cf8 <bt_uuid_cmp+0x40>
   20ce8:	2a02      	cmp	r2, #2
   20cea:	d008      	beq.n	20cfe <bt_uuid_cmp+0x46>
   20cec:	b95a      	cbnz	r2, 20d06 <bt_uuid_cmp+0x4e>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   20cee:	8840      	ldrh	r0, [r0, #2]
   20cf0:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   20cf2:	1ac0      	subs	r0, r0, r3
	}

	return -EINVAL;
}
   20cf4:	b00a      	add	sp, #40	; 0x28
   20cf6:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   20cf8:	6840      	ldr	r0, [r0, #4]
   20cfa:	6863      	ldr	r3, [r4, #4]
   20cfc:	e7f9      	b.n	20cf2 <bt_uuid_cmp+0x3a>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   20cfe:	2210      	movs	r2, #16
   20d00:	1c61      	adds	r1, r4, #1
   20d02:	3001      	adds	r0, #1
   20d04:	e7eb      	b.n	20cde <bt_uuid_cmp+0x26>
	switch (u1->type) {
   20d06:	f06f 0015 	mvn.w	r0, #21
   20d0a:	e7f3      	b.n	20cf4 <bt_uuid_cmp+0x3c>

00020d0c <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   20d0c:	2a04      	cmp	r2, #4
{
   20d0e:	b530      	push	{r4, r5, lr}
	switch (data_len) {
   20d10:	d00d      	beq.n	20d2e <bt_uuid_create+0x22>
   20d12:	2a10      	cmp	r2, #16
   20d14:	d019      	beq.n	20d4a <bt_uuid_create+0x3e>
   20d16:	2a02      	cmp	r2, #2
   20d18:	f04f 0300 	mov.w	r3, #0
   20d1c:	d121      	bne.n	20d62 <bt_uuid_create+0x56>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   20d1e:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   20d20:	784a      	ldrb	r2, [r1, #1]
   20d22:	780b      	ldrb	r3, [r1, #0]
   20d24:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   20d28:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   20d2a:	2001      	movs	r0, #1
}
   20d2c:	bd30      	pop	{r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   20d2e:	2301      	movs	r3, #1
   20d30:	7003      	strb	r3, [r0, #0]
   20d32:	788a      	ldrb	r2, [r1, #2]
   20d34:	78cc      	ldrb	r4, [r1, #3]
   20d36:	784d      	ldrb	r5, [r1, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   20d38:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   20d3c:	780a      	ldrb	r2, [r1, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   20d3e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   20d42:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   20d46:	6042      	str	r2, [r0, #4]
		break;
   20d48:	e7ef      	b.n	20d2a <bt_uuid_create+0x1e>
		uuid->type = BT_UUID_TYPE_128;
   20d4a:	2302      	movs	r3, #2
   20d4c:	f800 3b01 	strb.w	r3, [r0], #1
   20d50:	f101 0310 	add.w	r3, r1, #16
   20d54:	f851 2b04 	ldr.w	r2, [r1], #4
   20d58:	f840 2b04 	str.w	r2, [r0], #4
   20d5c:	4299      	cmp	r1, r3
   20d5e:	d1f9      	bne.n	20d54 <bt_uuid_create+0x48>
   20d60:	e7e3      	b.n	20d2a <bt_uuid_create+0x1e>
	switch (data_len) {
   20d62:	4618      	mov	r0, r3
   20d64:	e7e2      	b.n	20d2c <bt_uuid_create+0x20>

00020d66 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   20d66:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   20d68:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   20d6a:	2106      	movs	r1, #6
{
   20d6c:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   20d6e:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   20d72:	f7ef f881 	bl	fe78 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   20d76:	b918      	cbnz	r0, 20d80 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   20d78:	79a3      	ldrb	r3, [r4, #6]
   20d7a:	f063 033f 	orn	r3, r3, #63	; 0x3f
   20d7e:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   20d80:	bd10      	pop	{r4, pc}

00020d82 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   20d82:	280f      	cmp	r0, #15
   20d84:	d806      	bhi.n	20d94 <bt_hci_evt_get_flags+0x12>
   20d86:	280d      	cmp	r0, #13
   20d88:	d80b      	bhi.n	20da2 <bt_hci_evt_get_flags+0x20>
   20d8a:	2805      	cmp	r0, #5
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   20d8c:	bf14      	ite	ne
   20d8e:	2002      	movne	r0, #2
   20d90:	2003      	moveq	r0, #3
   20d92:	4770      	bx	lr
	switch (evt) {
   20d94:	2813      	cmp	r0, #19
   20d96:	d004      	beq.n	20da2 <bt_hci_evt_get_flags+0x20>
   20d98:	281a      	cmp	r0, #26
   20d9a:	bf14      	ite	ne
   20d9c:	2002      	movne	r0, #2
   20d9e:	2001      	moveq	r0, #1
   20da0:	4770      	bx	lr
   20da2:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   20da4:	4770      	bx	lr

00020da6 <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   20da6:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   20daa:	b193      	cbz	r3, 20dd2 <update_sec_level+0x2c>
   20dac:	7b5a      	ldrb	r2, [r3, #13]
   20dae:	07d1      	lsls	r1, r2, #31
   20db0:	d50f      	bpl.n	20dd2 <update_sec_level+0x2c>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   20db2:	06d2      	lsls	r2, r2, #27
   20db4:	d50b      	bpl.n	20dce <update_sec_level+0x28>
   20db6:	7b1b      	ldrb	r3, [r3, #12]
   20db8:	2b10      	cmp	r3, #16
   20dba:	d108      	bne.n	20dce <update_sec_level+0x28>
			conn->sec_level = BT_SECURITY_L4;
   20dbc:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
   20dbe:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   20dc0:	7a82      	ldrb	r2, [r0, #10]
   20dc2:	7a40      	ldrb	r0, [r0, #9]
}
   20dc4:	4282      	cmp	r2, r0
   20dc6:	bf8c      	ite	hi
   20dc8:	2000      	movhi	r0, #0
   20dca:	2001      	movls	r0, #1
   20dcc:	4770      	bx	lr
			conn->sec_level = BT_SECURITY_L3;
   20dce:	2303      	movs	r3, #3
   20dd0:	e7f5      	b.n	20dbe <update_sec_level+0x18>
		conn->sec_level = BT_SECURITY_L2;
   20dd2:	2302      	movs	r3, #2
   20dd4:	e7f3      	b.n	20dbe <update_sec_level+0x18>

00020dd6 <bt_addr_copy>:
   20dd6:	680b      	ldr	r3, [r1, #0]
   20dd8:	6003      	str	r3, [r0, #0]
   20dda:	888b      	ldrh	r3, [r1, #4]
   20ddc:	8083      	strh	r3, [r0, #4]
}
   20dde:	4770      	bx	lr

00020de0 <bt_addr_le_copy>:
   20de0:	680b      	ldr	r3, [r1, #0]
   20de2:	6003      	str	r3, [r0, #0]
   20de4:	888b      	ldrh	r3, [r1, #4]
   20de6:	8083      	strh	r3, [r0, #4]
   20de8:	798b      	ldrb	r3, [r1, #6]
   20dea:	7183      	strb	r3, [r0, #6]
}
   20dec:	4770      	bx	lr

00020dee <sys_put_le64>:
	dst[1] = val >> 8;
   20dee:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   20df2:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   20df4:	0e00      	lsrs	r0, r0, #24
   20df6:	7053      	strb	r3, [r2, #1]
   20df8:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   20dfa:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   20dfc:	f3c1 2007 	ubfx	r0, r1, #8, #8
   20e00:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   20e02:	7093      	strb	r3, [r2, #2]
   20e04:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   20e06:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   20e08:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   20e0a:	71d1      	strb	r1, [r2, #7]
}
   20e0c:	4770      	bx	lr

00020e0e <bt_hci_disconnect>:
{
   20e0e:	b570      	push	{r4, r5, r6, lr}
   20e10:	4606      	mov	r6, r0
   20e12:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   20e14:	f240 4006 	movw	r0, #1030	; 0x406
   20e18:	2103      	movs	r1, #3
   20e1a:	f7e6 f94b 	bl	70b4 <bt_hci_cmd_create>
	if (!buf) {
   20e1e:	4604      	mov	r4, r0
   20e20:	b168      	cbz	r0, 20e3e <bt_hci_disconnect+0x30>
   20e22:	2103      	movs	r1, #3
   20e24:	3008      	adds	r0, #8
   20e26:	f001 fece 	bl	22bc6 <net_buf_simple_add>
	disconn->reason = reason;
   20e2a:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   20e2c:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   20e2e:	4621      	mov	r1, r4
   20e30:	2200      	movs	r2, #0
}
   20e32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   20e36:	f240 4006 	movw	r0, #1030	; 0x406
   20e3a:	f7e6 ba9f 	b.w	737c <bt_hci_cmd_send_sync>
}
   20e3e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   20e42:	bd70      	pop	{r4, r5, r6, pc}

00020e44 <bt_le_set_data_len>:
{
   20e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20e46:	4607      	mov	r7, r0
   20e48:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   20e4a:	f242 0022 	movw	r0, #8226	; 0x2022
   20e4e:	2106      	movs	r1, #6
{
   20e50:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   20e52:	f7e6 f92f 	bl	70b4 <bt_hci_cmd_create>
	if (!buf) {
   20e56:	4604      	mov	r4, r0
   20e58:	b170      	cbz	r0, 20e78 <bt_le_set_data_len+0x34>
   20e5a:	2106      	movs	r1, #6
   20e5c:	3008      	adds	r0, #8
   20e5e:	f001 feb2 	bl	22bc6 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   20e62:	883b      	ldrh	r3, [r7, #0]
   20e64:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   20e66:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   20e68:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   20e6a:	4621      	mov	r1, r4
   20e6c:	f242 0022 	movw	r0, #8226	; 0x2022
}
   20e70:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   20e74:	f7e6 b956 	b.w	7124 <bt_hci_cmd_send>
}
   20e78:	f06f 0068 	mvn.w	r0, #104	; 0x68
   20e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00020e7e <bt_le_set_phy>:
{
   20e7e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20e82:	4680      	mov	r8, r0
   20e84:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   20e86:	f242 0032 	movw	r0, #8242	; 0x2032
   20e8a:	2107      	movs	r1, #7
{
   20e8c:	f89d 9020 	ldrb.w	r9, [sp, #32]
   20e90:	4616      	mov	r6, r2
   20e92:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   20e94:	f7e6 f90e 	bl	70b4 <bt_hci_cmd_create>
	if (!buf) {
   20e98:	4604      	mov	r4, r0
   20e9a:	b190      	cbz	r0, 20ec2 <bt_le_set_phy+0x44>
   20e9c:	2107      	movs	r1, #7
   20e9e:	3008      	adds	r0, #8
   20ea0:	f001 fe91 	bl	22bc6 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   20ea4:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   20ea8:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   20eaa:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   20eac:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   20eae:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   20eb0:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   20eb4:	4621      	mov	r1, r4
   20eb6:	f242 0032 	movw	r0, #8242	; 0x2032
}
   20eba:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   20ebe:	f7e6 b931 	b.w	7124 <bt_hci_cmd_send>
}
   20ec2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   20ec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00020eca <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   20eca:	6880      	ldr	r0, [r0, #8]
   20ecc:	f7e6 bbf6 	b.w	76bc <enh_conn_complete>

00020ed0 <le_legacy_conn_complete>:
{
   20ed0:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   20ed2:	6881      	ldr	r1, [r0, #8]
{
   20ed4:	b08b      	sub	sp, #44	; 0x2c
	enh.status         = evt->status;
   20ed6:	780b      	ldrb	r3, [r1, #0]
   20ed8:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   20edc:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   20ee0:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   20ee4:	78cb      	ldrb	r3, [r1, #3]
   20ee6:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   20eea:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   20eee:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   20ef2:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   20ef6:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   20efa:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   20efe:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   20f02:	7c4b      	ldrb	r3, [r1, #17]
   20f04:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   20f08:	a803      	add	r0, sp, #12
   20f0a:	3104      	adds	r1, #4
   20f0c:	f7ff ff68 	bl	20de0 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   20f10:	2200      	movs	r2, #0
   20f12:	4669      	mov	r1, sp
   20f14:	f10d 0013 	add.w	r0, sp, #19
   20f18:	9200      	str	r2, [sp, #0]
   20f1a:	f8ad 2004 	strh.w	r2, [sp, #4]
   20f1e:	f7ff ff5a 	bl	20dd6 <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   20f22:	4669      	mov	r1, sp
   20f24:	f10d 0019 	add.w	r0, sp, #25
   20f28:	9200      	str	r2, [sp, #0]
   20f2a:	f8ad 2004 	strh.w	r2, [sp, #4]
   20f2e:	f7ff ff52 	bl	20dd6 <bt_addr_copy>
	enh_conn_complete(&enh);
   20f32:	a802      	add	r0, sp, #8
   20f34:	f7e6 fbc2 	bl	76bc <enh_conn_complete>
}
   20f38:	b00b      	add	sp, #44	; 0x2c
   20f3a:	f85d fb04 	ldr.w	pc, [sp], #4

00020f3e <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   20f3e:	8802      	ldrh	r2, [r0, #0]
   20f40:	8843      	ldrh	r3, [r0, #2]
   20f42:	429a      	cmp	r2, r3
{
   20f44:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   20f46:	d818      	bhi.n	20f7a <bt_le_conn_params_valid+0x3c>
   20f48:	2a05      	cmp	r2, #5
   20f4a:	d916      	bls.n	20f7a <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   20f4c:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   20f50:	d813      	bhi.n	20f7a <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   20f52:	8884      	ldrh	r4, [r0, #4]
   20f54:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   20f58:	d20f      	bcs.n	20f7a <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   20f5a:	88c1      	ldrh	r1, [r0, #6]
   20f5c:	f1a1 020a 	sub.w	r2, r1, #10
   20f60:	b292      	uxth	r2, r2
   20f62:	f640 4076 	movw	r0, #3190	; 0xc76
   20f66:	4282      	cmp	r2, r0
   20f68:	d807      	bhi.n	20f7a <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
   20f6a:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   20f6e:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   20f72:	bf34      	ite	cc
   20f74:	2001      	movcc	r0, #1
   20f76:	2000      	movcs	r0, #0
}
   20f78:	bd10      	pop	{r4, pc}
		return false;
   20f7a:	2000      	movs	r0, #0
   20f7c:	e7fc      	b.n	20f78 <bt_le_conn_params_valid+0x3a>

00020f7e <bt_send>:
		return bt_hci_ecc_send(buf);
   20f7e:	f7e5 bb09 	b.w	6594 <bt_hci_ecc_send>

00020f82 <bt_addr_le_is_bonded>:

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   20f82:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   20f84:	f7ec f87a 	bl	d07c <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   20f88:	b118      	cbz	r0, 20f92 <bt_addr_le_is_bonded+0x10>
   20f8a:	89c0      	ldrh	r0, [r0, #14]
   20f8c:	3800      	subs	r0, #0
   20f8e:	bf18      	it	ne
   20f90:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   20f92:	bd08      	pop	{r3, pc}

00020f94 <bt_hci_evt_create>:
#include <stdint.h>
#include <sys/byteorder.h>
#include <drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   20f94:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   20f96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   20f9a:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   20f9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20fa0:	2100      	movs	r1, #0
{
   20fa2:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   20fa4:	f7e5 fc02 	bl	67ac <bt_buf_get_evt>
   20fa8:	2102      	movs	r1, #2
   20faa:	4604      	mov	r4, r0
   20fac:	3008      	adds	r0, #8
   20fae:	f001 fe0a 	bl	22bc6 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = evt;
   20fb2:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   20fb4:	7045      	strb	r5, [r0, #1]

	return buf;
}
   20fb6:	4620      	mov	r0, r4
   20fb8:	bd70      	pop	{r4, r5, r6, pc}

00020fba <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   20fba:	3103      	adds	r1, #3
{
   20fbc:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   20fbe:	b2c9      	uxtb	r1, r1
{
   20fc0:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   20fc2:	200e      	movs	r0, #14
   20fc4:	f7ff ffe6 	bl	20f94 <bt_hci_evt_create>
   20fc8:	2103      	movs	r1, #3
   20fca:	4604      	mov	r4, r0
   20fcc:	3008      	adds	r0, #8
   20fce:	f001 fdfa 	bl	22bc6 <net_buf_simple_add>

	cc = net_buf_add(buf, sizeof(*cc));
	cc->ncmd = 1U;
   20fd2:	2301      	movs	r3, #1
   20fd4:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   20fd6:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   20fda:	4620      	mov	r0, r4
   20fdc:	bd38      	pop	{r3, r4, r5, pc}

00020fde <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   20fde:	b570      	push	{r4, r5, r6, lr}
   20fe0:	4605      	mov	r5, r0
   20fe2:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   20fe4:	200f      	movs	r0, #15
   20fe6:	2104      	movs	r1, #4
   20fe8:	f7ff ffd4 	bl	20f94 <bt_hci_evt_create>
   20fec:	2104      	movs	r1, #4
   20fee:	4604      	mov	r4, r0
   20ff0:	3008      	adds	r0, #8
   20ff2:	f001 fde8 	bl	22bc6 <net_buf_simple_add>

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
	cs->ncmd = 1U;
   20ff6:	2201      	movs	r2, #1
	cs->status = status;
   20ff8:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   20ffa:	7042      	strb	r2, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   20ffc:	8045      	strh	r5, [r0, #2]

	return buf;
}
   20ffe:	4620      	mov	r0, r4
   21000:	bd70      	pop	{r4, r5, r6, pc}

00021002 <adv_unpause_enabled>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21002:	f100 0310 	add.w	r3, r0, #16
   21006:	f3bf 8f5b 	dmb	ish
   2100a:	e853 2f00 	ldrex	r2, [r3]
   2100e:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   21012:	e843 1c00 	strex	ip, r1, [r3]
   21016:	f1bc 0f00 	cmp.w	ip, #0
   2101a:	d1f6      	bne.n	2100a <adv_unpause_enabled+0x8>
   2101c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   21020:	0493      	lsls	r3, r2, #18
   21022:	d502      	bpl.n	2102a <adv_unpause_enabled+0x28>
		bt_le_adv_set_enable(adv, true);
   21024:	2101      	movs	r1, #1
   21026:	f000 b983 	b.w	21330 <bt_le_adv_set_enable>
}
   2102a:	4770      	bx	lr

0002102c <addr_res_enable>:
{
   2102c:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   2102e:	2101      	movs	r1, #1
{
   21030:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   21032:	f242 002d 	movw	r0, #8237	; 0x202d
   21036:	f7e6 f83d 	bl	70b4 <bt_hci_cmd_create>
	if (!buf) {
   2103a:	4604      	mov	r4, r0
   2103c:	b158      	cbz	r0, 21056 <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   2103e:	4629      	mov	r1, r5
   21040:	3008      	adds	r0, #8
   21042:	f001 fdd0 	bl	22be6 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   21046:	4621      	mov	r1, r4
   21048:	2200      	movs	r2, #0
}
   2104a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   2104e:	f242 002d 	movw	r0, #8237	; 0x202d
   21052:	f7e6 b993 	b.w	737c <bt_hci_cmd_send_sync>
}
   21056:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2105a:	bd38      	pop	{r3, r4, r5, pc}

0002105c <bt_addr_copy>:
   2105c:	680b      	ldr	r3, [r1, #0]
   2105e:	6003      	str	r3, [r0, #0]
   21060:	888b      	ldrh	r3, [r1, #4]
   21062:	8083      	strh	r3, [r0, #4]
}
   21064:	4770      	bx	lr

00021066 <bt_addr_le_copy>:
   21066:	680b      	ldr	r3, [r1, #0]
   21068:	6003      	str	r3, [r0, #0]
   2106a:	888b      	ldrh	r3, [r1, #4]
   2106c:	8083      	strh	r3, [r0, #4]
   2106e:	798b      	ldrb	r3, [r1, #6]
   21070:	7183      	strb	r3, [r0, #6]
}
   21072:	4770      	bx	lr

00021074 <hci_id_add.isra.0>:
static int hci_id_add(uint8_t id, const bt_addr_le_t *addr, uint8_t peer_irk[16])
   21074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21076:	4607      	mov	r7, r0
   21078:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   2107a:	f242 0027 	movw	r0, #8231	; 0x2027
   2107e:	2127      	movs	r1, #39	; 0x27
   21080:	f7e6 f818 	bl	70b4 <bt_hci_cmd_create>
	if (!buf) {
   21084:	4605      	mov	r5, r0
   21086:	b1f8      	cbz	r0, 210c8 <hci_id_add.isra.0+0x54>
	return net_buf_simple_add(&buf->b, len);
   21088:	2127      	movs	r1, #39	; 0x27
   2108a:	3008      	adds	r0, #8
   2108c:	f001 fd9b 	bl	22bc6 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   21090:	4639      	mov	r1, r7
   21092:	4606      	mov	r6, r0
   21094:	f7ff ffe7 	bl	21066 <bt_addr_le_copy>
   21098:	4621      	mov	r1, r4
   2109a:	1dc3      	adds	r3, r0, #7
   2109c:	f104 0210 	add.w	r2, r4, #16
   210a0:	f851 0b04 	ldr.w	r0, [r1], #4
   210a4:	f843 0b04 	str.w	r0, [r3], #4
   210a8:	4291      	cmp	r1, r2
   210aa:	d1f9      	bne.n	210a0 <hci_id_add.isra.0+0x2c>
__ssp_bos_icheck3(memset, void *, int)
   210ac:	2210      	movs	r2, #16
   210ae:	2100      	movs	r1, #0
   210b0:	f106 0017 	add.w	r0, r6, #23
   210b4:	f002 fdb1 	bl	23c1a <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   210b8:	4629      	mov	r1, r5
   210ba:	2200      	movs	r2, #0
}
   210bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   210c0:	f242 0027 	movw	r0, #8231	; 0x2027
   210c4:	f7e6 b95a 	b.w	737c <bt_hci_cmd_send_sync>
}
   210c8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   210cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000210ce <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   210ce:	7a03      	ldrb	r3, [r0, #8]
   210d0:	075b      	lsls	r3, r3, #29
   210d2:	d504      	bpl.n	210de <keys_add_id+0x10>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   210d4:	f100 012a 	add.w	r1, r0, #42	; 0x2a
   210d8:	3001      	adds	r0, #1
   210da:	f7ff bfcb 	b.w	21074 <hci_id_add.isra.0>
}
   210de:	4770      	bx	lr

000210e0 <adv_pause_enabled>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   210e0:	f3bf 8f5b 	dmb	ish
   210e4:	6903      	ldr	r3, [r0, #16]
   210e6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   210ea:	065b      	lsls	r3, r3, #25
   210ec:	f100 0210 	add.w	r2, r0, #16
   210f0:	d50e      	bpl.n	21110 <adv_pause_enabled+0x30>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   210f2:	f3bf 8f5b 	dmb	ish
   210f6:	e852 3f00 	ldrex	r3, [r2]
   210fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   210fe:	e842 3100 	strex	r1, r3, [r2]
   21102:	2900      	cmp	r1, #0
   21104:	d1f7      	bne.n	210f6 <adv_pause_enabled+0x16>
   21106:	f3bf 8f5b 	dmb	ish
		bt_le_adv_set_enable(adv, false);
   2110a:	2100      	movs	r1, #0
   2110c:	f000 b910 	b.w	21330 <bt_le_adv_set_enable>
}
   21110:	4770      	bx	lr

00021112 <bt_lookup_id_addr>:
{
   21112:	b510      	push	{r4, lr}
   21114:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   21116:	f7eb ff77 	bl	d008 <bt_keys_find_irk>
		if (keys) {
   2111a:	b100      	cbz	r0, 2111e <bt_lookup_id_addr+0xc>
			return &keys->addr;
   2111c:	1c44      	adds	r4, r0, #1
}
   2111e:	4620      	mov	r0, r4
   21120:	bd10      	pop	{r4, pc}

00021122 <bt_id_set_adv_private_addr>:
{
   21122:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   21124:	2106      	movs	r1, #6
   21126:	4668      	mov	r0, sp
   21128:	f7ee fea6 	bl	fe78 <bt_rand>
	if (err) {
   2112c:	b940      	cbnz	r0, 21140 <bt_id_set_adv_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   2112e:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   21132:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   21134:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   21138:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   2113c:	f7e6 fe02 	bl	7d44 <set_random_address>
}
   21140:	b003      	add	sp, #12
   21142:	f85d fb04 	ldr.w	pc, [sp], #4

00021146 <bt_id_adv_random_addr_check>:
}
   21146:	2001      	movs	r0, #1
   21148:	4770      	bx	lr

0002114a <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   2114a:	7a03      	ldrb	r3, [r0, #8]
   2114c:	07d9      	lsls	r1, r3, #31
   2114e:	d504      	bpl.n	2115a <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   21150:	f023 0301 	bic.w	r3, r3, #1
   21154:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   21156:	f7e6 be69 	b.w	7e2c <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   2115a:	0799      	lsls	r1, r3, #30
   2115c:	d504      	bpl.n	21168 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   2115e:	f023 0302 	bic.w	r3, r3, #2
   21162:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   21164:	f7e6 bf36 	b.w	7fd4 <bt_id_del>
}
   21168:	4770      	bx	lr

0002116a <get_adv_channel_map>:
{
   2116a:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   2116c:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   21170:	bf0c      	ite	eq
   21172:	2007      	moveq	r0, #7
   21174:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   21176:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   21178:	bf48      	it	mi
   2117a:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   2117e:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   21180:	bf48      	it	mi
   21182:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   21186:	4770      	bx	lr

00021188 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21188:	f3bf 8f5b 	dmb	ish
   2118c:	6800      	ldr	r0, [r0, #0]
   2118e:	f3bf 8f5b 	dmb	ish
}
   21192:	4770      	bx	lr

00021194 <atomic_and>:
{
   21194:	4603      	mov	r3, r0
}
   21196:	f3bf 8f5b 	dmb	ish
   2119a:	e853 0f00 	ldrex	r0, [r3]
   2119e:	ea00 0201 	and.w	r2, r0, r1
   211a2:	e843 2c00 	strex	ip, r2, [r3]
   211a6:	f1bc 0f00 	cmp.w	ip, #0
   211aa:	d1f6      	bne.n	2119a <atomic_and+0x6>
   211ac:	f3bf 8f5b 	dmb	ish
   211b0:	4770      	bx	lr

000211b2 <bt_addr_le_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   211b2:	680b      	ldr	r3, [r1, #0]
   211b4:	6003      	str	r3, [r0, #0]
   211b6:	888b      	ldrh	r3, [r1, #4]
   211b8:	8083      	strh	r3, [r0, #4]
   211ba:	798b      	ldrb	r3, [r1, #6]
   211bc:	7183      	strb	r3, [r0, #6]
   211be:	4770      	bx	lr

000211c0 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   211c0:	2301      	movs	r3, #1
{
   211c2:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   211c4:	fa03 f101 	lsl.w	r1, r3, r1
{
   211c8:	4604      	mov	r4, r0
	if (val) {
   211ca:	b162      	cbz	r2, 211e6 <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   211cc:	f3bf 8f5b 	dmb	ish
   211d0:	e854 3f00 	ldrex	r3, [r4]
   211d4:	430b      	orrs	r3, r1
   211d6:	e844 3200 	strex	r2, r3, [r4]
   211da:	2a00      	cmp	r2, #0
   211dc:	d1f8      	bne.n	211d0 <atomic_set_bit_to+0x10>
   211de:	f3bf 8f5b 	dmb	ish
	}
}
   211e2:	bc10      	pop	{r4}
   211e4:	4770      	bx	lr
   211e6:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   211e8:	43c9      	mvns	r1, r1
   211ea:	f7ff bfd3 	b.w	21194 <atomic_and>

000211ee <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   211ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   211f2:	b087      	sub	sp, #28
   211f4:	4605      	mov	r5, r0
   211f6:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
   211fa:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   211fe:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   21202:	460c      	mov	r4, r1
   21204:	4617      	mov	r7, r2
	struct bt_ad d[2] = {};
   21206:	2100      	movs	r1, #0
   21208:	2210      	movs	r2, #16
   2120a:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   2120c:	461e      	mov	r6, r3
	struct bt_ad d[2] = {};
   2120e:	f002 fd04 	bl	23c1a <memset>
	if (use_name) {
   21212:	f1b8 0f00 	cmp.w	r8, #0
   21216:	d010      	beq.n	2123a <le_adv_update.constprop.0+0x4c>
		const char *name = bt_get_name();
   21218:	f7e6 fd76 	bl	7d08 <bt_get_name>
   2121c:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   2121e:	2c00      	cmp	r4, #0
   21220:	d13c      	bne.n	2129c <le_adv_update.constprop.0+0xae>
   21222:	2e00      	cmp	r6, #0
   21224:	d145      	bne.n	212b2 <le_adv_update.constprop.0+0xc4>
		data = (struct bt_data)BT_DATA(
   21226:	4658      	mov	r0, fp
   21228:	f7df fd8e 	bl	d48 <strlen>
   2122c:	2309      	movs	r3, #9
   2122e:	f88d 3000 	strb.w	r3, [sp]
   21232:	f88d 0001 	strb.w	r0, [sp, #1]
   21236:	f8cd b004 	str.w	fp, [sp, #4]
		d[0].len = ad_len;
   2123a:	e9cd 4702 	strd	r4, r7, [sp, #8]
		if (use_name && !scannable) {
   2123e:	f1b8 0f00 	cmp.w	r8, #0
   21242:	d038      	beq.n	212b6 <le_adv_update.constprop.0+0xc8>
   21244:	f1ba 0f00 	cmp.w	sl, #0
   21248:	d135      	bne.n	212b6 <le_adv_update.constprop.0+0xc8>
			d[1].len = 1;
   2124a:	2301      	movs	r3, #1
			d[1].data = &data;
   2124c:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   21250:	9305      	str	r3, [sp, #20]
			d_len = 2;
   21252:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   21254:	a902      	add	r1, sp, #8
   21256:	f242 0008 	movw	r0, #8200	; 0x2008
   2125a:	f7e7 f959 	bl	8510 <hci_set_ad>
		if (err) {
   2125e:	4604      	mov	r4, r0
   21260:	b978      	cbnz	r0, 21282 <le_adv_update.constprop.0+0x94>
	if (scannable) {
   21262:	f1ba 0f00 	cmp.w	sl, #0
   21266:	d128      	bne.n	212ba <le_adv_update.constprop.0+0xcc>
   21268:	3510      	adds	r5, #16
   2126a:	f3bf 8f5b 	dmb	ish
   2126e:	e855 3f00 	ldrex	r3, [r5]
   21272:	f043 0304 	orr.w	r3, r3, #4
   21276:	e845 3200 	strex	r2, r3, [r5]
   2127a:	2a00      	cmp	r2, #0
   2127c:	d1f7      	bne.n	2126e <le_adv_update.constprop.0+0x80>
   2127e:	f3bf 8f5b 	dmb	ish
}
   21282:	4620      	mov	r0, r4
   21284:	b007      	add	sp, #28
   21286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2128a:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   2128e:	3a08      	subs	r2, #8
   21290:	2a01      	cmp	r2, #1
   21292:	d925      	bls.n	212e0 <le_adv_update.constprop.0+0xf2>
	for (i = 0; i < ad_len; i++) {
   21294:	3301      	adds	r3, #1
   21296:	429f      	cmp	r7, r3
   21298:	d1f7      	bne.n	2128a <le_adv_update.constprop.0+0x9c>
   2129a:	e7c2      	b.n	21222 <le_adv_update.constprop.0+0x34>
   2129c:	2300      	movs	r3, #0
   2129e:	e7fa      	b.n	21296 <le_adv_update.constprop.0+0xa8>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   212a0:	f816 2033 	ldrb.w	r2, [r6, r3, lsl #3]
   212a4:	3a08      	subs	r2, #8
   212a6:	2a01      	cmp	r2, #1
   212a8:	d91a      	bls.n	212e0 <le_adv_update.constprop.0+0xf2>
	for (i = 0; i < ad_len; i++) {
   212aa:	3301      	adds	r3, #1
   212ac:	4599      	cmp	r9, r3
   212ae:	d1f7      	bne.n	212a0 <le_adv_update.constprop.0+0xb2>
   212b0:	e7b9      	b.n	21226 <le_adv_update.constprop.0+0x38>
   212b2:	2300      	movs	r3, #0
   212b4:	e7fa      	b.n	212ac <le_adv_update.constprop.0+0xbe>
		d_len = 1;
   212b6:	2201      	movs	r2, #1
   212b8:	e7cc      	b.n	21254 <le_adv_update.constprop.0+0x66>
		d[0].len = sd_len;
   212ba:	e9cd 6902 	strd	r6, r9, [sp, #8]
		if (use_name) {
   212be:	2201      	movs	r2, #1
   212c0:	f1b8 0f00 	cmp.w	r8, #0
   212c4:	d003      	beq.n	212ce <le_adv_update.constprop.0+0xe0>
			d[1].len = 1;
   212c6:	9205      	str	r2, [sp, #20]
			d[1].data = &data;
   212c8:	f8cd d010 	str.w	sp, [sp, #16]
			d_len = 2;
   212cc:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   212ce:	a902      	add	r1, sp, #8
   212d0:	f242 0009 	movw	r0, #8201	; 0x2009
   212d4:	f7e7 f91c 	bl	8510 <hci_set_ad>
		if (err) {
   212d8:	2800      	cmp	r0, #0
   212da:	d0c5      	beq.n	21268 <le_adv_update.constprop.0+0x7a>
   212dc:	4604      	mov	r4, r0
   212de:	e7d0      	b.n	21282 <le_adv_update.constprop.0+0x94>
			return -EINVAL;
   212e0:	f06f 0415 	mvn.w	r4, #21
   212e4:	e7cd      	b.n	21282 <le_adv_update.constprop.0+0x94>

000212e6 <bt_le_adv_set_enable_legacy>:
{
   212e6:	b570      	push	{r4, r5, r6, lr}
   212e8:	4606      	mov	r6, r0
   212ea:	b086      	sub	sp, #24
   212ec:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   212ee:	f242 000a 	movw	r0, #8202	; 0x200a
   212f2:	2101      	movs	r1, #1
   212f4:	f7e5 fede 	bl	70b4 <bt_hci_cmd_create>
	if (!buf) {
   212f8:	4604      	mov	r4, r0
   212fa:	b1b0      	cbz	r0, 2132a <bt_le_adv_set_enable_legacy+0x44>
	if (enable) {
   212fc:	3008      	adds	r0, #8
   212fe:	b195      	cbz	r5, 21326 <bt_le_adv_set_enable_legacy+0x40>
	return net_buf_simple_add_u8(&buf->b, val);
   21300:	2101      	movs	r1, #1
   21302:	f001 fc70 	bl	22be6 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   21306:	f106 0210 	add.w	r2, r6, #16
   2130a:	a903      	add	r1, sp, #12
   2130c:	4620      	mov	r0, r4
   2130e:	9500      	str	r5, [sp, #0]
   21310:	2306      	movs	r3, #6
   21312:	f7e5 febd 	bl	7090 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   21316:	2200      	movs	r2, #0
   21318:	4621      	mov	r1, r4
   2131a:	f242 000a 	movw	r0, #8202	; 0x200a
   2131e:	f7e6 f82d 	bl	737c <bt_hci_cmd_send_sync>
}
   21322:	b006      	add	sp, #24
   21324:	bd70      	pop	{r4, r5, r6, pc}
   21326:	4629      	mov	r1, r5
   21328:	e7eb      	b.n	21302 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   2132a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2132e:	e7f8      	b.n	21322 <bt_le_adv_set_enable_legacy+0x3c>

00021330 <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   21330:	f7ff bfd9 	b.w	212e6 <bt_le_adv_set_enable_legacy>

00021334 <tx_notify>:
{
   21334:	b570      	push	{r4, r5, r6, lr}
   21336:	4604      	mov	r4, r0
	__asm__ volatile(
   21338:	f04f 0220 	mov.w	r2, #32
   2133c:	f3ef 8311 	mrs	r3, BASEPRI
   21340:	f382 8811 	msr	BASEPRI, r2
   21344:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   21348:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   2134a:	b920      	cbnz	r0, 21356 <tx_notify+0x22>
	__asm__ volatile(
   2134c:	f383 8811 	msr	BASEPRI, r3
   21350:	f3bf 8f6f 	isb	sy
}
   21354:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   21356:	6a61      	ldr	r1, [r4, #36]	; 0x24
   21358:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2135a:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2135c:	4288      	cmp	r0, r1
	list->tail = node;
   2135e:	bf08      	it	eq
   21360:	6262      	streq	r2, [r4, #36]	; 0x24
   21362:	f383 8811 	msr	BASEPRI, r3
   21366:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   2136a:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   2136e:	f7e7 fc75 	bl	8c5c <tx_free>
		cb(conn, user_data);
   21372:	4631      	mov	r1, r6
   21374:	4620      	mov	r0, r4
   21376:	47a8      	blx	r5
	while (1) {
   21378:	e7de      	b.n	21338 <tx_notify+0x4>

0002137a <tx_complete_work>:
	tx_notify(conn);
   2137a:	3828      	subs	r0, #40	; 0x28
   2137c:	f7ff bfda 	b.w	21334 <tx_notify>

00021380 <bt_conn_new>:
{
   21380:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   21382:	2200      	movs	r2, #0
   21384:	4603      	mov	r3, r0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   21386:	2401      	movs	r4, #1
   21388:	428a      	cmp	r2, r1
   2138a:	d102      	bne.n	21392 <bt_conn_new+0x12>
		return NULL;
   2138c:	2300      	movs	r3, #0
}
   2138e:	4618      	mov	r0, r3
   21390:	bd38      	pop	{r3, r4, r5, pc}
   21392:	f103 00b8 	add.w	r0, r3, #184	; 0xb8
   21396:	f3bf 8f5b 	dmb	ish
   2139a:	e850 5f00 	ldrex	r5, [r0]
   2139e:	2d00      	cmp	r5, #0
   213a0:	d104      	bne.n	213ac <bt_conn_new+0x2c>
   213a2:	e840 4c00 	strex	ip, r4, [r0]
   213a6:	f1bc 0f00 	cmp.w	ip, #0
   213aa:	d1f6      	bne.n	2139a <bt_conn_new+0x1a>
   213ac:	f3bf 8f5b 	dmb	ish
   213b0:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   213b4:	d002      	beq.n	213bc <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
   213b6:	3201      	adds	r2, #1
   213b8:	4603      	mov	r3, r0
   213ba:	e7e5      	b.n	21388 <bt_conn_new+0x8>
	if (!conn) {
   213bc:	2b00      	cmp	r3, #0
   213be:	d0e6      	beq.n	2138e <bt_conn_new+0xe>
__ssp_bos_icheck3(memset, void *, int)
   213c0:	4618      	mov	r0, r3
   213c2:	22b8      	movs	r2, #184	; 0xb8
   213c4:	2100      	movs	r1, #0
   213c6:	f002 fc28 	bl	23c1a <memset>
   213ca:	4603      	mov	r3, r0
   213cc:	e7df      	b.n	2138e <bt_conn_new+0xe>

000213ce <bt_conn_set_security>:
{
   213ce:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   213d0:	7b43      	ldrb	r3, [r0, #13]
   213d2:	2b07      	cmp	r3, #7
{
   213d4:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   213d6:	d128      	bne.n	2142a <bt_conn_set_security+0x5c>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   213d8:	7a43      	ldrb	r3, [r0, #9]
   213da:	428b      	cmp	r3, r1
   213dc:	d228      	bcs.n	21430 <bt_conn_set_security+0x62>
   213de:	7a83      	ldrb	r3, [r0, #10]
   213e0:	428b      	cmp	r3, r1
   213e2:	d225      	bcs.n	21430 <bt_conn_set_security+0x62>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   213e4:	f3bf 8f5b 	dmb	ish
	if (val) {
   213e8:	060a      	lsls	r2, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   213ea:	f100 0304 	add.w	r3, r0, #4
   213ee:	d513      	bpl.n	21418 <bt_conn_set_security+0x4a>
   213f0:	e853 2f00 	ldrex	r2, [r3]
   213f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   213f8:	e843 2000 	strex	r0, r2, [r3]
   213fc:	2800      	cmp	r0, #0
   213fe:	d1f7      	bne.n	213f0 <bt_conn_set_security+0x22>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21400:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   21404:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   21408:	72a1      	strb	r1, [r4, #10]
		return bt_smp_start_security(conn);
   2140a:	4620      	mov	r0, r4
   2140c:	f7eb f8d0 	bl	c5b0 <bt_smp_start_security>
	if (err) {
   21410:	b108      	cbz	r0, 21416 <bt_conn_set_security+0x48>
		conn->required_sec_level = conn->sec_level;
   21412:	7a63      	ldrb	r3, [r4, #9]
   21414:	72a3      	strb	r3, [r4, #10]
}
   21416:	bd10      	pop	{r4, pc}
   21418:	e853 2f00 	ldrex	r2, [r3]
   2141c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   21420:	e843 2000 	strex	r0, r2, [r3]
   21424:	2800      	cmp	r0, #0
   21426:	d0eb      	beq.n	21400 <bt_conn_set_security+0x32>
   21428:	e7f6      	b.n	21418 <bt_conn_set_security+0x4a>
		return -ENOTCONN;
   2142a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2142e:	e7f2      	b.n	21416 <bt_conn_set_security+0x48>
		return 0;
   21430:	2000      	movs	r0, #0
   21432:	e7f0      	b.n	21416 <bt_conn_set_security+0x48>

00021434 <bt_conn_get_security>:
}
   21434:	7a40      	ldrb	r0, [r0, #9]
   21436:	4770      	bx	lr

00021438 <bt_conn_reset_rx_state>:
{
   21438:	b510      	push	{r4, lr}
   2143a:	4604      	mov	r4, r0
	if (!conn->rx) {
   2143c:	6900      	ldr	r0, [r0, #16]
   2143e:	b118      	cbz	r0, 21448 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   21440:	f7f9 f8dc 	bl	1a5fc <net_buf_unref>
	conn->rx = NULL;
   21444:	2300      	movs	r3, #0
   21446:	6123      	str	r3, [r4, #16]
}
   21448:	bd10      	pop	{r4, pc}

0002144a <bt_conn_is_peer_addr_le>:
{
   2144a:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   2144c:	7a03      	ldrb	r3, [r0, #8]
   2144e:	428b      	cmp	r3, r1
{
   21450:	4604      	mov	r4, r0
   21452:	4615      	mov	r5, r2
	if (id != conn->id) {
   21454:	d115      	bne.n	21482 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   21456:	f100 0188 	add.w	r1, r0, #136	; 0x88
   2145a:	2207      	movs	r2, #7
   2145c:	4628      	mov	r0, r5
   2145e:	f002 fbc0 	bl	23be2 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   21462:	b180      	cbz	r0, 21486 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   21464:	78e3      	ldrb	r3, [r4, #3]
   21466:	2207      	movs	r2, #7
   21468:	b943      	cbnz	r3, 2147c <bt_conn_is_peer_addr_le+0x32>
   2146a:	f104 0196 	add.w	r1, r4, #150	; 0x96
   2146e:	4628      	mov	r0, r5
   21470:	f002 fbb7 	bl	23be2 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   21474:	fab0 f080 	clz	r0, r0
   21478:	0940      	lsrs	r0, r0, #5
}
   2147a:	bd38      	pop	{r3, r4, r5, pc}
   2147c:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   21480:	e7f5      	b.n	2146e <bt_conn_is_peer_addr_le+0x24>
		return false;
   21482:	2000      	movs	r0, #0
   21484:	e7f9      	b.n	2147a <bt_conn_is_peer_addr_le+0x30>
		return true;
   21486:	2001      	movs	r0, #1
   21488:	e7f7      	b.n	2147a <bt_conn_is_peer_addr_le+0x30>

0002148a <bt_conn_ref>:
{
   2148a:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   2148c:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21490:	f3bf 8f5b 	dmb	ish
   21494:	6813      	ldr	r3, [r2, #0]
   21496:	f3bf 8f5b 	dmb	ish
		if (!old) {
   2149a:	b17b      	cbz	r3, 214bc <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2149c:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   214a0:	1c59      	adds	r1, r3, #1
   214a2:	e852 4f00 	ldrex	r4, [r2]
   214a6:	429c      	cmp	r4, r3
   214a8:	d104      	bne.n	214b4 <bt_conn_ref+0x2a>
   214aa:	e842 1c00 	strex	ip, r1, [r2]
   214ae:	f1bc 0f00 	cmp.w	ip, #0
   214b2:	d1f6      	bne.n	214a2 <bt_conn_ref+0x18>
   214b4:	f3bf 8f5b 	dmb	ish
   214b8:	d1ea      	bne.n	21490 <bt_conn_ref+0x6>
}
   214ba:	bd10      	pop	{r4, pc}
			return NULL;
   214bc:	4618      	mov	r0, r3
   214be:	e7fc      	b.n	214ba <bt_conn_ref+0x30>

000214c0 <bt_conn_unref>:
	atomic_val_t old = atomic_dec(&conn->ref);
   214c0:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   214c4:	f3bf 8f5b 	dmb	ish
   214c8:	e853 2f00 	ldrex	r2, [r3]
   214cc:	3a01      	subs	r2, #1
   214ce:	e843 2100 	strex	r1, r2, [r3]
   214d2:	2900      	cmp	r1, #0
   214d4:	d1f8      	bne.n	214c8 <bt_conn_unref+0x8>
   214d6:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   214da:	f3bf 8f5b 	dmb	ish
   214de:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   214e2:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   214e6:	b90b      	cbnz	r3, 214ec <bt_conn_unref+0x2c>
		bt_le_adv_resume();
   214e8:	f7e7 ba12 	b.w	8910 <bt_le_adv_resume>
}
   214ec:	4770      	bx	lr

000214ee <conn_lookup_handle>:
{
   214ee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   214f2:	4607      	mov	r7, r0
   214f4:	460e      	mov	r6, r1
   214f6:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   214f8:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   214fa:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   214fe:	42b4      	cmp	r4, r6
   21500:	d103      	bne.n	2150a <conn_lookup_handle+0x1c>
	return NULL;
   21502:	2300      	movs	r3, #0
}
   21504:	4618      	mov	r0, r3
   21506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2150a:	fb09 7004 	mla	r0, r9, r4, r7
   2150e:	f7ff ffbc 	bl	2148a <bt_conn_ref>
   21512:	4603      	mov	r3, r0
		if (!conn) {
   21514:	b158      	cbz	r0, 2152e <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   21516:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   21518:	2d01      	cmp	r5, #1
   2151a:	d002      	beq.n	21522 <conn_lookup_handle+0x34>
   2151c:	3d07      	subs	r5, #7
   2151e:	2d01      	cmp	r5, #1
   21520:	d803      	bhi.n	2152a <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   21522:	881a      	ldrh	r2, [r3, #0]
   21524:	4542      	cmp	r2, r8
   21526:	d0ed      	beq.n	21504 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   21528:	4618      	mov	r0, r3
   2152a:	f7ff ffc9 	bl	214c0 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   2152e:	3401      	adds	r4, #1
   21530:	e7e5      	b.n	214fe <conn_lookup_handle+0x10>

00021532 <bt_conn_get_dst>:
}
   21532:	3088      	adds	r0, #136	; 0x88
   21534:	4770      	bx	lr

00021536 <bt_conn_disconnect>:
{
   21536:	b538      	push	{r3, r4, r5, lr}
   21538:	7b43      	ldrb	r3, [r0, #13]
   2153a:	3b02      	subs	r3, #2
   2153c:	4604      	mov	r4, r0
   2153e:	2b06      	cmp	r3, #6
   21540:	d805      	bhi.n	2154e <bt_conn_disconnect+0x18>
   21542:	e8df f003 	tbb	[pc, r3]
   21546:	0408      	.short	0x0408
   21548:	0e0c0404 	.word	0x0e0c0404
   2154c:	0c          	.byte	0x0c
   2154d:	00          	.byte	0x00
	switch (conn->state) {
   2154e:	f06f 057f 	mvn.w	r5, #127	; 0x7f
}
   21552:	4628      	mov	r0, r5
   21554:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
   21556:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   21558:	2100      	movs	r1, #0
   2155a:	f7e7 fe5f 	bl	921c <bt_conn_set_state>
		return 0;
   2155e:	2500      	movs	r5, #0
   21560:	e7f7      	b.n	21552 <bt_conn_disconnect+0x1c>
	err = bt_hci_disconnect(conn->handle, reason);
   21562:	8800      	ldrh	r0, [r0, #0]
   21564:	f7ff fc53 	bl	20e0e <bt_hci_disconnect>
	if (err) {
   21568:	4605      	mov	r5, r0
   2156a:	2800      	cmp	r0, #0
   2156c:	d1f1      	bne.n	21552 <bt_conn_disconnect+0x1c>
	if (conn->state == BT_CONN_CONNECTED) {
   2156e:	7b63      	ldrb	r3, [r4, #13]
   21570:	2b07      	cmp	r3, #7
   21572:	d1ee      	bne.n	21552 <bt_conn_disconnect+0x1c>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   21574:	2108      	movs	r1, #8
   21576:	4620      	mov	r0, r4
   21578:	f7e7 fe50 	bl	921c <bt_conn_set_state>
   2157c:	e7e9      	b.n	21552 <bt_conn_disconnect+0x1c>

0002157e <bt_conn_le_conn_update>:
{
   2157e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21580:	4607      	mov	r7, r0
   21582:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   21584:	f242 0013 	movw	r0, #8211	; 0x2013
   21588:	210e      	movs	r1, #14
   2158a:	f7e5 fd93 	bl	70b4 <bt_hci_cmd_create>
	if (!buf) {
   2158e:	4606      	mov	r6, r0
   21590:	b1d0      	cbz	r0, 215c8 <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   21592:	210e      	movs	r1, #14
   21594:	3008      	adds	r0, #8
   21596:	f001 fb16 	bl	22bc6 <net_buf_simple_add>
   2159a:	220e      	movs	r2, #14
   2159c:	4604      	mov	r4, r0
   2159e:	2100      	movs	r1, #0
   215a0:	f002 fb3b 	bl	23c1a <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   215a4:	883b      	ldrh	r3, [r7, #0]
   215a6:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   215a8:	882b      	ldrh	r3, [r5, #0]
   215aa:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   215ac:	886b      	ldrh	r3, [r5, #2]
   215ae:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   215b0:	88ab      	ldrh	r3, [r5, #4]
   215b2:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   215b4:	88eb      	ldrh	r3, [r5, #6]
   215b6:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   215b8:	4631      	mov	r1, r6
   215ba:	2200      	movs	r2, #0
}
   215bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   215c0:	f242 0013 	movw	r0, #8211	; 0x2013
   215c4:	f7e5 beda 	b.w	737c <bt_hci_cmd_send_sync>
}
   215c8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   215cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000215ce <l2cap_connected>:
}
   215ce:	4770      	bx	lr

000215d0 <l2cap_disconnected>:
   215d0:	4770      	bx	lr

000215d2 <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   215d2:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   215d4:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   215d6:	b17b      	cbz	r3, 215f8 <bt_l2cap_chan_remove+0x26>
   215d8:	3b08      	subs	r3, #8
   215da:	2200      	movs	r2, #0
   215dc:	b163      	cbz	r3, 215f8 <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   215de:	428b      	cmp	r3, r1
   215e0:	f103 0408 	add.w	r4, r3, #8
   215e4:	d10f      	bne.n	21606 <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   215e6:	688b      	ldr	r3, [r1, #8]
   215e8:	b93a      	cbnz	r2, 215fa <bt_l2cap_chan_remove+0x28>
   215ea:	6d42      	ldr	r2, [r0, #84]	; 0x54
	list->head = node;
   215ec:	6503      	str	r3, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   215ee:	4294      	cmp	r4, r2
   215f0:	d100      	bne.n	215f4 <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   215f2:	6543      	str	r3, [r0, #84]	; 0x54
	parent->next = child;
   215f4:	2300      	movs	r3, #0
   215f6:	608b      	str	r3, [r1, #8]
}
   215f8:	bd10      	pop	{r4, pc}
   215fa:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   215fc:	6d43      	ldr	r3, [r0, #84]	; 0x54
   215fe:	429c      	cmp	r4, r3
	list->tail = node;
   21600:	bf08      	it	eq
   21602:	6542      	streq	r2, [r0, #84]	; 0x54
}
   21604:	e7f6      	b.n	215f4 <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   21606:	2c00      	cmp	r4, #0
   21608:	d0f6      	beq.n	215f8 <bt_l2cap_chan_remove+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2160a:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2160c:	2b00      	cmp	r3, #0
   2160e:	d0f3      	beq.n	215f8 <bt_l2cap_chan_remove+0x26>
   21610:	3b08      	subs	r3, #8
   21612:	4622      	mov	r2, r4
   21614:	e7e2      	b.n	215dc <bt_l2cap_chan_remove+0xa>

00021616 <bt_l2cap_chan_del>:
{
   21616:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   21618:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   2161c:	4604      	mov	r4, r0
	if (!chan->conn) {
   2161e:	b123      	cbz	r3, 2162a <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   21620:	686b      	ldr	r3, [r5, #4]
   21622:	b103      	cbz	r3, 21626 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   21624:	4798      	blx	r3
	chan->conn = NULL;
   21626:	2300      	movs	r3, #0
   21628:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   2162a:	68e3      	ldr	r3, [r4, #12]
   2162c:	b10b      	cbz	r3, 21632 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   2162e:	4620      	mov	r0, r4
   21630:	4798      	blx	r3
	if (ops->released) {
   21632:	69eb      	ldr	r3, [r5, #28]
   21634:	b11b      	cbz	r3, 2163e <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   21636:	4620      	mov	r0, r4
}
   21638:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   2163c:	4718      	bx	r3
}
   2163e:	bd70      	pop	{r4, r5, r6, pc}

00021640 <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   21640:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   21642:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   21644:	b18b      	cbz	r3, 2166a <bt_l2cap_disconnected+0x2a>
   21646:	f1b3 0008 	subs.w	r0, r3, #8
   2164a:	d00e      	beq.n	2166a <bt_l2cap_disconnected+0x2a>
   2164c:	681c      	ldr	r4, [r3, #0]
   2164e:	b104      	cbz	r4, 21652 <bt_l2cap_disconnected+0x12>
   21650:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   21652:	f7ff ffe0 	bl	21616 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   21656:	b144      	cbz	r4, 2166a <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   21658:	f114 0308 	adds.w	r3, r4, #8
   2165c:	d002      	beq.n	21664 <bt_l2cap_disconnected+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2165e:	68a3      	ldr	r3, [r4, #8]
   21660:	b103      	cbz	r3, 21664 <bt_l2cap_disconnected+0x24>
   21662:	3b08      	subs	r3, #8
{
   21664:	4620      	mov	r0, r4
   21666:	461c      	mov	r4, r3
   21668:	e7f3      	b.n	21652 <bt_l2cap_disconnected+0x12>
}
   2166a:	bd10      	pop	{r4, pc}

0002166c <bt_l2cap_security_changed>:
{
   2166c:	b538      	push	{r3, r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2166e:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   21670:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   21672:	b1a3      	cbz	r3, 2169e <bt_l2cap_security_changed+0x32>
   21674:	f1b3 0008 	subs.w	r0, r3, #8
   21678:	d011      	beq.n	2169e <bt_l2cap_security_changed+0x32>
   2167a:	681c      	ldr	r4, [r3, #0]
   2167c:	b104      	cbz	r4, 21680 <bt_l2cap_security_changed+0x14>
   2167e:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   21680:	6843      	ldr	r3, [r0, #4]
   21682:	689b      	ldr	r3, [r3, #8]
   21684:	b10b      	cbz	r3, 2168a <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   21686:	4629      	mov	r1, r5
   21688:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2168a:	b144      	cbz	r4, 2169e <bt_l2cap_security_changed+0x32>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2168c:	f114 0308 	adds.w	r3, r4, #8
   21690:	d002      	beq.n	21698 <bt_l2cap_security_changed+0x2c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21692:	68a3      	ldr	r3, [r4, #8]
   21694:	b103      	cbz	r3, 21698 <bt_l2cap_security_changed+0x2c>
   21696:	3b08      	subs	r3, #8
{
   21698:	4620      	mov	r0, r4
   2169a:	461c      	mov	r4, r3
   2169c:	e7f0      	b.n	21680 <bt_l2cap_security_changed+0x14>
}
   2169e:	bd38      	pop	{r3, r4, r5, pc}

000216a0 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   216a0:	3104      	adds	r1, #4
   216a2:	f7e7 bf93 	b.w	95cc <bt_conn_create_pdu_timeout>

000216a6 <bt_l2cap_send_cb>:
{
   216a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   216aa:	4614      	mov	r4, r2
   216ac:	4605      	mov	r5, r0
   216ae:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   216b0:	f102 0008 	add.w	r0, r2, #8
   216b4:	2104      	movs	r1, #4
   216b6:	461e      	mov	r6, r3
   216b8:	f8dd 8018 	ldr.w	r8, [sp, #24]
   216bc:	f001 fa9b 	bl	22bf6 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   216c0:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   216c2:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   216c4:	3a04      	subs	r2, #4
   216c6:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   216c8:	4643      	mov	r3, r8
   216ca:	4632      	mov	r2, r6
   216cc:	4621      	mov	r1, r4
   216ce:	4628      	mov	r0, r5
}
   216d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   216d4:	f7e7 bcbe 	b.w	9054 <bt_conn_send_cb>

000216d8 <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   216d8:	6d00      	ldr	r0, [r0, #80]	; 0x50
   216da:	b160      	cbz	r0, 216f6 <bt_l2cap_le_lookup_tx_cid+0x1e>
   216dc:	3808      	subs	r0, #8
   216de:	b900      	cbnz	r0, 216e2 <bt_l2cap_le_lookup_tx_cid+0xa>
   216e0:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   216e2:	f8b0 3054 	ldrh.w	r3, [r0, #84]	; 0x54
   216e6:	428b      	cmp	r3, r1
   216e8:	d005      	beq.n	216f6 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   216ea:	f110 0308 	adds.w	r3, r0, #8
   216ee:	d001      	beq.n	216f4 <bt_l2cap_le_lookup_tx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   216f0:	6880      	ldr	r0, [r0, #8]
   216f2:	e7f2      	b.n	216da <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   216f4:	4618      	mov	r0, r3
}
   216f6:	4770      	bx	lr

000216f8 <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   216f8:	6d00      	ldr	r0, [r0, #80]	; 0x50
   216fa:	b160      	cbz	r0, 21716 <bt_l2cap_le_lookup_rx_cid+0x1e>
   216fc:	3808      	subs	r0, #8
   216fe:	b900      	cbnz	r0, 21702 <bt_l2cap_le_lookup_rx_cid+0xa>
   21700:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   21702:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   21706:	428b      	cmp	r3, r1
   21708:	d005      	beq.n	21716 <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2170a:	f110 0308 	adds.w	r3, r0, #8
   2170e:	d001      	beq.n	21714 <bt_l2cap_le_lookup_rx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21710:	6880      	ldr	r0, [r0, #8]
   21712:	e7f2      	b.n	216fa <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   21714:	4618      	mov	r0, r3
}
   21716:	4770      	bx	lr

00021718 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   21718:	4770      	bx	lr

0002171a <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   2171a:	4603      	mov	r3, r0
Z_GENLIST_IS_EMPTY(slist)
   2171c:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2171e:	b128      	cbz	r0, 2172c <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   21720:	6859      	ldr	r1, [r3, #4]
   21722:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   21724:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   21726:	4288      	cmp	r0, r1
	list->tail = node;
   21728:	bf08      	it	eq
   2172a:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   2172c:	4770      	bx	lr

0002172e <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2172e:	4603      	mov	r3, r0
   21730:	6800      	ldr	r0, [r0, #0]
   21732:	2200      	movs	r2, #0
   21734:	b900      	cbnz	r0, 21738 <sys_slist_find_and_remove+0xa>
   21736:	4770      	bx	lr
   21738:	4288      	cmp	r0, r1
   2173a:	d110      	bne.n	2175e <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   2173c:	6808      	ldr	r0, [r1, #0]
   2173e:	b942      	cbnz	r2, 21752 <sys_slist_find_and_remove+0x24>
   21740:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   21742:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   21744:	4291      	cmp	r1, r2
   21746:	d100      	bne.n	2174a <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   21748:	6058      	str	r0, [r3, #4]
	parent->next = child;
   2174a:	2300      	movs	r3, #0
   2174c:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2174e:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   21750:	4770      	bx	lr
	parent->next = child;
   21752:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   21754:	6858      	ldr	r0, [r3, #4]
   21756:	4281      	cmp	r1, r0
	list->tail = node;
   21758:	bf08      	it	eq
   2175a:	605a      	streq	r2, [r3, #4]
}
   2175c:	e7f5      	b.n	2174a <sys_slist_find_and_remove+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2175e:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   21760:	6800      	ldr	r0, [r0, #0]
   21762:	e7e7      	b.n	21734 <sys_slist_find_and_remove+0x6>

00021764 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   21764:	4603      	mov	r3, r0
	size_t bytes = 0;
   21766:	2000      	movs	r0, #0

	while (buf) {
   21768:	b903      	cbnz	r3, 2176c <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   2176a:	4770      	bx	lr
		bytes += buf->len;
   2176c:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   2176e:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   21770:	4410      	add	r0, r2
		buf = buf->frags;
   21772:	e7f9      	b.n	21768 <net_buf_frags_len+0x4>

00021774 <att_sent>:
	if (chan->ops->sent) {
   21774:	684b      	ldr	r3, [r1, #4]
   21776:	695b      	ldr	r3, [r3, #20]
{
   21778:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   2177a:	b103      	cbz	r3, 2177e <att_sent+0xa>
		chan->ops->sent(chan);
   2177c:	4718      	bx	r3
}
   2177e:	4770      	bx	lr

00021780 <attr_read_type_cb>:
{
   21780:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   21782:	68d4      	ldr	r4, [r2, #12]
   21784:	7823      	ldrb	r3, [r4, #0]
   21786:	3102      	adds	r1, #2
   21788:	b913      	cbnz	r3, 21790 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   2178a:	7021      	strb	r1, [r4, #0]
	return true;
   2178c:	2001      	movs	r0, #1
   2178e:	e006      	b.n	2179e <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   21790:	428b      	cmp	r3, r1
   21792:	d0fb      	beq.n	2178c <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   21794:	8983      	ldrh	r3, [r0, #12]
   21796:	3b02      	subs	r3, #2
   21798:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   2179a:	2000      	movs	r0, #0
   2179c:	6110      	str	r0, [r2, #16]
}
   2179e:	bd10      	pop	{r4, pc}

000217a0 <att_prepare_write_req>:
}
   217a0:	2006      	movs	r0, #6
   217a2:	4770      	bx	lr

000217a4 <att_op_get_type>:
	switch (op) {
   217a4:	281e      	cmp	r0, #30
   217a6:	d816      	bhi.n	217d6 <att_op_get_type+0x32>
   217a8:	b308      	cbz	r0, 217ee <att_op_get_type+0x4a>
   217aa:	1e43      	subs	r3, r0, #1
   217ac:	2b1d      	cmp	r3, #29
   217ae:	d81e      	bhi.n	217ee <att_op_get_type+0x4a>
   217b0:	e8df f003 	tbb	[pc, r3]
   217b4:	23172317 	.word	0x23172317
   217b8:	23172317 	.word	0x23172317
   217bc:	23172317 	.word	0x23172317
   217c0:	23172317 	.word	0x23172317
   217c4:	1d172317 	.word	0x1d172317
   217c8:	2317231d 	.word	0x2317231d
   217cc:	1d191d17 	.word	0x1d191d17
   217d0:	0f1b      	.short	0x0f1b
   217d2:	2004      	movs	r0, #4
   217d4:	4770      	bx	lr
   217d6:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   217da:	2b52      	cmp	r3, #82	; 0x52
   217dc:	d107      	bne.n	217ee <att_op_get_type+0x4a>
		return ATT_COMMAND;
   217de:	2000      	movs	r0, #0
}
   217e0:	4770      	bx	lr
		return ATT_RESPONSE;
   217e2:	2002      	movs	r0, #2
   217e4:	4770      	bx	lr
		return ATT_NOTIFICATION;
   217e6:	2003      	movs	r0, #3
   217e8:	4770      	bx	lr
		return ATT_INDICATION;
   217ea:	2005      	movs	r0, #5
   217ec:	4770      	bx	lr
		return ATT_COMMAND;
   217ee:	f010 0f40 	tst.w	r0, #64	; 0x40
   217f2:	bf0c      	ite	eq
   217f4:	2006      	moveq	r0, #6
   217f6:	2000      	movne	r0, #0
   217f8:	4770      	bx	lr
		return ATT_REQUEST;
   217fa:	2001      	movs	r0, #1
   217fc:	4770      	bx	lr

000217fe <bt_gatt_foreach_attr>:
{
   217fe:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   21800:	e9cd 2301 	strd	r2, r3, [sp, #4]
   21804:	2300      	movs	r3, #0
   21806:	9300      	str	r3, [sp, #0]
   21808:	461a      	mov	r2, r3
   2180a:	f7e9 fc9b 	bl	b144 <bt_gatt_foreach_attr_type>
}
   2180e:	b005      	add	sp, #20
   21810:	f85d fb04 	ldr.w	pc, [sp], #4

00021814 <att_chan_read>:
{
   21814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21818:	4680      	mov	r8, r0
   2181a:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2181c:	4610      	mov	r0, r2
{
   2181e:	4699      	mov	r9, r3
   21820:	468b      	mov	fp, r1
   21822:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   21824:	f7ff ff9e 	bl	21764 <net_buf_frags_len>
   21828:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
   2182c:	4283      	cmp	r3, r0
   2182e:	d97a      	bls.n	21926 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   21830:	f8d8 3008 	ldr.w	r3, [r8, #8]
   21834:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   21836:	4630      	mov	r0, r6
   21838:	f001 f9a3 	bl	22b82 <net_buf_frag_last>
	size_t len, total = 0;
   2183c:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   21840:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   21842:	4630      	mov	r0, r6
   21844:	f7ff ff8e 	bl	21764 <net_buf_frags_len>
   21848:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
   2184c:	f105 0708 	add.w	r7, r5, #8
   21850:	1a24      	subs	r4, r4, r0
   21852:	4638      	mov	r0, r7
   21854:	f001 f9f3 	bl	22c3e <net_buf_simple_tailroom>
   21858:	4284      	cmp	r4, r0
   2185a:	d211      	bcs.n	21880 <att_chan_read+0x6c>
   2185c:	4630      	mov	r0, r6
   2185e:	f7ff ff81 	bl	21764 <net_buf_frags_len>
   21862:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   21866:	1a24      	subs	r4, r4, r0
		if (!len) {
   21868:	bb34      	cbnz	r4, 218b8 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   2186a:	79b0      	ldrb	r0, [r6, #6]
   2186c:	f7f8 fe0a 	bl	1a484 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   21870:	2200      	movs	r2, #0
   21872:	2300      	movs	r3, #0
   21874:	f001 f951 	bl	22b1a <net_buf_alloc_fixed>
			if (!frag) {
   21878:	4605      	mov	r5, r0
   2187a:	b930      	cbnz	r0, 2188a <att_chan_read+0x76>
	return total;
   2187c:	4657      	mov	r7, sl
   2187e:	e02c      	b.n	218da <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   21880:	4638      	mov	r0, r7
   21882:	f001 f9dc 	bl	22c3e <net_buf_simple_tailroom>
   21886:	4604      	mov	r4, r0
   21888:	e7ee      	b.n	21868 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   2188a:	4601      	mov	r1, r0
   2188c:	4630      	mov	r0, r6
   2188e:	f001 f989 	bl	22ba4 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   21892:	4630      	mov	r0, r6
   21894:	f7ff ff66 	bl	21764 <net_buf_frags_len>
   21898:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   2189c:	f105 0708 	add.w	r7, r5, #8
   218a0:	1a24      	subs	r4, r4, r0
   218a2:	4638      	mov	r0, r7
   218a4:	f001 f9cb 	bl	22c3e <net_buf_simple_tailroom>
   218a8:	4284      	cmp	r4, r0
   218aa:	d21a      	bcs.n	218e2 <att_chan_read+0xce>
   218ac:	4630      	mov	r0, r6
   218ae:	f7ff ff59 	bl	21764 <net_buf_frags_len>
   218b2:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   218b6:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   218b8:	68a9      	ldr	r1, [r5, #8]
   218ba:	89aa      	ldrh	r2, [r5, #12]
   218bc:	f8db 7004 	ldr.w	r7, [fp, #4]
   218c0:	9803      	ldr	r0, [sp, #12]
   218c2:	f8cd 9000 	str.w	r9, [sp]
   218c6:	440a      	add	r2, r1
   218c8:	b2a3      	uxth	r3, r4
   218ca:	4659      	mov	r1, fp
   218cc:	47b8      	blx	r7
		if (read < 0) {
   218ce:	1e07      	subs	r7, r0, #0
   218d0:	da0c      	bge.n	218ec <att_chan_read+0xd8>
				return total;
   218d2:	f1ba 0f00 	cmp.w	sl, #0
   218d6:	bf18      	it	ne
   218d8:	4657      	movne	r7, sl
}
   218da:	4638      	mov	r0, r7
   218dc:	b005      	add	sp, #20
   218de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   218e2:	4638      	mov	r0, r7
   218e4:	f001 f9ab 	bl	22c3e <net_buf_simple_tailroom>
   218e8:	4604      	mov	r4, r0
   218ea:	e7e5      	b.n	218b8 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   218ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   218ee:	b993      	cbnz	r3, 21916 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   218f0:	4639      	mov	r1, r7
   218f2:	f105 0008 	add.w	r0, r5, #8
   218f6:	f001 f966 	bl	22bc6 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   218fa:	4630      	mov	r0, r6
   218fc:	f7ff ff32 	bl	21764 <net_buf_frags_len>
   21900:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
		offset += read;
   21904:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   21906:	4283      	cmp	r3, r0
		total += read;
   21908:	44ba      	add	sl, r7
		offset += read;
   2190a:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2190e:	d9b5      	bls.n	2187c <att_chan_read+0x68>
   21910:	42a7      	cmp	r7, r4
   21912:	d096      	beq.n	21842 <att_chan_read+0x2e>
   21914:	e7b2      	b.n	2187c <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   21916:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   21918:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2191a:	4639      	mov	r1, r7
   2191c:	4628      	mov	r0, r5
   2191e:	4798      	blx	r3
   21920:	2800      	cmp	r0, #0
   21922:	d1e5      	bne.n	218f0 <att_chan_read+0xdc>
   21924:	e7aa      	b.n	2187c <att_chan_read+0x68>
		return 0;
   21926:	2700      	movs	r7, #0
   21928:	e7d7      	b.n	218da <att_chan_read+0xc6>

0002192a <attr_read_group_cb>:
	if (!data->rsp->len) {
   2192a:	68d0      	ldr	r0, [r2, #12]
   2192c:	7803      	ldrb	r3, [r0, #0]
   2192e:	3104      	adds	r1, #4
   21930:	b913      	cbnz	r3, 21938 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   21932:	7001      	strb	r1, [r0, #0]
	return true;
   21934:	2001      	movs	r0, #1
}
   21936:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   21938:	428b      	cmp	r3, r1
   2193a:	d0fb      	beq.n	21934 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   2193c:	6891      	ldr	r1, [r2, #8]
   2193e:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   21940:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   21942:	3b04      	subs	r3, #4
   21944:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   21946:	6110      	str	r0, [r2, #16]
		return false;
   21948:	4770      	bx	lr

0002194a <chan_req_send>:
{
   2194a:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2194c:	688e      	ldr	r6, [r1, #8]
{
   2194e:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   21950:	4630      	mov	r0, r6
{
   21952:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   21954:	f7ff ff06 	bl	21764 <net_buf_frags_len>
   21958:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
   2195c:	4283      	cmp	r3, r0
   2195e:	d30a      	bcc.n	21976 <chan_req_send+0x2c>
	req->buf = NULL;
   21960:	2200      	movs	r2, #0
	chan->req = req;
   21962:	f8c5 10cc 	str.w	r1, [r5, #204]	; 0xcc
	err = chan_send(chan, buf, NULL);
   21966:	4628      	mov	r0, r5
	req->buf = NULL;
   21968:	608a      	str	r2, [r1, #8]
	err = chan_send(chan, buf, NULL);
   2196a:	4631      	mov	r1, r6
   2196c:	f7e8 fa5a 	bl	9e24 <chan_send>
	if (err) {
   21970:	b100      	cbz	r0, 21974 <chan_req_send+0x2a>
		req->buf = buf;
   21972:	60a6      	str	r6, [r4, #8]
}
   21974:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   21976:	f06f 0079 	mvn.w	r0, #121	; 0x79
   2197a:	e7fb      	b.n	21974 <chan_req_send+0x2a>

0002197c <process_queue>:
{
   2197c:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   2197e:	2200      	movs	r2, #0
{
   21980:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   21982:	2300      	movs	r3, #0
   21984:	4608      	mov	r0, r1
{
   21986:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   21988:	f001 f8cc 	bl	22b24 <net_buf_get>
	if (buf) {
   2198c:	4605      	mov	r5, r0
   2198e:	b160      	cbz	r0, 219aa <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   21990:	4601      	mov	r1, r0
   21992:	2200      	movs	r2, #0
   21994:	4620      	mov	r0, r4
   21996:	f7e8 fa45 	bl	9e24 <chan_send>
		if (err) {
   2199a:	4604      	mov	r4, r0
   2199c:	b118      	cbz	r0, 219a6 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   2199e:	4629      	mov	r1, r5
   219a0:	4630      	mov	r0, r6
   219a2:	f001 fd00 	bl	233a6 <k_queue_prepend>
}
   219a6:	4620      	mov	r0, r4
   219a8:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   219aa:	f06f 0401 	mvn.w	r4, #1
   219ae:	e7fa      	b.n	219a6 <process_queue+0x2a>

000219b0 <find_info_cb>:
{
   219b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   219b2:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   219b4:	6816      	ldr	r6, [r2, #0]
{
   219b6:	4605      	mov	r5, r0
   219b8:	460f      	mov	r7, r1
   219ba:	4614      	mov	r4, r2
	if (!data->rsp) {
   219bc:	b963      	cbnz	r3, 219d8 <find_info_cb+0x28>
   219be:	6850      	ldr	r0, [r2, #4]
   219c0:	2101      	movs	r1, #1
   219c2:	3008      	adds	r0, #8
   219c4:	f001 f8ff 	bl	22bc6 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   219c8:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   219ca:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   219cc:	781b      	ldrb	r3, [r3, #0]
   219ce:	2b00      	cmp	r3, #0
   219d0:	bf0c      	ite	eq
   219d2:	2301      	moveq	r3, #1
   219d4:	2302      	movne	r3, #2
   219d6:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   219d8:	68a3      	ldr	r3, [r4, #8]
   219da:	781b      	ldrb	r3, [r3, #0]
   219dc:	2b01      	cmp	r3, #1
   219de:	d003      	beq.n	219e8 <find_info_cb+0x38>
   219e0:	2b02      	cmp	r3, #2
   219e2:	d019      	beq.n	21a18 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   219e4:	2000      	movs	r0, #0
   219e6:	e016      	b.n	21a16 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   219e8:	682b      	ldr	r3, [r5, #0]
   219ea:	781b      	ldrb	r3, [r3, #0]
   219ec:	2b00      	cmp	r3, #0
   219ee:	d1f9      	bne.n	219e4 <find_info_cb+0x34>
   219f0:	6860      	ldr	r0, [r4, #4]
   219f2:	2104      	movs	r1, #4
   219f4:	3008      	adds	r0, #8
   219f6:	f001 f8e6 	bl	22bc6 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   219fa:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   219fc:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   219fe:	885b      	ldrh	r3, [r3, #2]
   21a00:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   21a02:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   21a04:	8007      	strh	r7, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   21a06:	899b      	ldrh	r3, [r3, #12]
   21a08:	f8b6 005e 	ldrh.w	r0, [r6, #94]	; 0x5e
   21a0c:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   21a0e:	2804      	cmp	r0, #4
   21a10:	bf94      	ite	ls
   21a12:	2000      	movls	r0, #0
   21a14:	2001      	movhi	r0, #1
}
   21a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   21a18:	682b      	ldr	r3, [r5, #0]
   21a1a:	781b      	ldrb	r3, [r3, #0]
   21a1c:	2b02      	cmp	r3, #2
   21a1e:	d1e1      	bne.n	219e4 <find_info_cb+0x34>
   21a20:	6860      	ldr	r0, [r4, #4]
   21a22:	2112      	movs	r1, #18
   21a24:	3008      	adds	r0, #8
   21a26:	f001 f8ce 	bl	22bc6 <net_buf_simple_add>
   21a2a:	4603      	mov	r3, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   21a2c:	682a      	ldr	r2, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   21a2e:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   21a30:	f823 7b02 	strh.w	r7, [r3], #2
   21a34:	1c51      	adds	r1, r2, #1
   21a36:	3211      	adds	r2, #17
   21a38:	f851 0b04 	ldr.w	r0, [r1], #4
   21a3c:	f843 0b04 	str.w	r0, [r3], #4
   21a40:	4291      	cmp	r1, r2
   21a42:	d1f9      	bne.n	21a38 <find_info_cb+0x88>
		if (chan->chan.tx.mtu - data->buf->len >
   21a44:	6863      	ldr	r3, [r4, #4]
   21a46:	f8b6 005e 	ldrh.w	r0, [r6, #94]	; 0x5e
   21a4a:	899b      	ldrh	r3, [r3, #12]
   21a4c:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   21a4e:	2812      	cmp	r0, #18
   21a50:	e7de      	b.n	21a10 <find_info_cb+0x60>

00021a52 <att_exec_write_req>:
   21a52:	2006      	movs	r0, #6
   21a54:	4770      	bx	lr

00021a56 <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21a56:	30c8      	adds	r0, #200	; 0xc8
   21a58:	f3bf 8f5b 	dmb	ish
   21a5c:	e850 3f00 	ldrex	r3, [r0]
   21a60:	f023 0301 	bic.w	r3, r3, #1
   21a64:	e840 3200 	strex	r2, r3, [r0]
   21a68:	2a00      	cmp	r2, #0
   21a6a:	d1f7      	bne.n	21a5c <chan_rsp_sent+0x6>
   21a6c:	f3bf 8f5b 	dmb	ish
}
   21a70:	4770      	bx	lr

00021a72 <chan_cfm_sent>:
   21a72:	30c8      	adds	r0, #200	; 0xc8
   21a74:	f3bf 8f5b 	dmb	ish
   21a78:	e850 3f00 	ldrex	r3, [r0]
   21a7c:	f023 0302 	bic.w	r3, r3, #2
   21a80:	e840 3200 	strex	r2, r3, [r0]
   21a84:	2a00      	cmp	r2, #0
   21a86:	d1f7      	bne.n	21a78 <chan_cfm_sent+0x6>
   21a88:	f3bf 8f5b 	dmb	ish
}
   21a8c:	4770      	bx	lr

00021a8e <bt_att_status>:
{
   21a8e:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21a90:	f3bf 8f5b 	dmb	ish
   21a94:	680b      	ldr	r3, [r1, #0]
   21a96:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   21a9a:	07db      	lsls	r3, r3, #31
{
   21a9c:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   21a9e:	d519      	bpl.n	21ad4 <bt_att_status+0x46>
	if (!chan->att) {
   21aa0:	f850 0c08 	ldr.w	r0, [r0, #-8]
   21aa4:	b1b0      	cbz	r0, 21ad4 <bt_att_status+0x46>
	if (chan->req) {
   21aa6:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
   21aaa:	b99b      	cbnz	r3, 21ad4 <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   21aac:	3004      	adds	r0, #4
   21aae:	f7ff fe34 	bl	2171a <sys_slist_get>
	if (!node) {
   21ab2:	4604      	mov	r4, r0
   21ab4:	b170      	cbz	r0, 21ad4 <bt_att_status+0x46>
	return chan_req_send(chan, req);
   21ab6:	4601      	mov	r1, r0
   21ab8:	f1a5 0008 	sub.w	r0, r5, #8
   21abc:	f7ff ff45 	bl	2194a <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   21ac0:	2800      	cmp	r0, #0
   21ac2:	da07      	bge.n	21ad4 <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   21ac4:	f855 3c08 	ldr.w	r3, [r5, #-8]
Z_GENLIST_PREPEND(slist, snode)
   21ac8:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   21aca:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   21acc:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   21ace:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   21ad0:	b902      	cbnz	r2, 21ad4 <bt_att_status+0x46>
	list->tail = node;
   21ad2:	609c      	str	r4, [r3, #8]
}
   21ad4:	bd38      	pop	{r3, r4, r5, pc}

00021ad6 <att_req_send_process>:
{
   21ad6:	b570      	push	{r4, r5, r6, lr}
   21ad8:	4605      	mov	r5, r0
	node = sys_slist_get(&att->reqs);
   21ada:	3004      	adds	r0, #4
   21adc:	f7ff fe1d 	bl	2171a <sys_slist_get>
	if (!node) {
   21ae0:	4606      	mov	r6, r0
   21ae2:	b1c0      	cbz	r0, 21b16 <att_req_send_process+0x40>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21ae4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   21ae6:	b153      	cbz	r3, 21afe <att_req_send_process+0x28>
   21ae8:	f5b3 708e 	subs.w	r0, r3, #284	; 0x11c
   21aec:	d007      	beq.n	21afe <att_req_send_process+0x28>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21aee:	681c      	ldr	r4, [r3, #0]
   21af0:	b10c      	cbz	r4, 21af6 <att_req_send_process+0x20>
   21af2:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
		if (!chan->req) {
   21af6:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   21afa:	b13b      	cbz	r3, 21b0c <att_req_send_process+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21afc:	b964      	cbnz	r4, 21b18 <att_req_send_process+0x42>
Z_GENLIST_PREPEND(slist, snode)
   21afe:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   21b00:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   21b02:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   21b04:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   21b06:	b933      	cbnz	r3, 21b16 <att_req_send_process+0x40>
	list->tail = node;
   21b08:	60ae      	str	r6, [r5, #8]
}
   21b0a:	e004      	b.n	21b16 <att_req_send_process+0x40>
	return chan_req_send(chan, req);
   21b0c:	4631      	mov	r1, r6
   21b0e:	f7ff ff1c 	bl	2194a <chan_req_send>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   21b12:	2800      	cmp	r0, #0
   21b14:	dbf2      	blt.n	21afc <att_req_send_process+0x26>
}
   21b16:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   21b18:	f514 738e 	adds.w	r3, r4, #284	; 0x11c
   21b1c:	d004      	beq.n	21b28 <att_req_send_process+0x52>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21b1e:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21b22:	b10b      	cbz	r3, 21b28 <att_req_send_process+0x52>
   21b24:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
{
   21b28:	4620      	mov	r0, r4
   21b2a:	461c      	mov	r4, r3
   21b2c:	e7e3      	b.n	21af6 <att_req_send_process+0x20>

00021b2e <write_cb>:
{
   21b2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21b30:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   21b32:	4601      	mov	r1, r0
{
   21b34:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   21b36:	222a      	movs	r2, #42	; 0x2a
   21b38:	6820      	ldr	r0, [r4, #0]
   21b3a:	f000 fb86 	bl	2224a <bt_gatt_check_perm>
   21b3e:	4605      	mov	r5, r0
   21b40:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   21b42:	bb00      	cbnz	r0, 21b86 <write_cb+0x58>
	if (!data->req) {
   21b44:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   21b46:	68b7      	ldr	r7, [r6, #8]
   21b48:	68e2      	ldr	r2, [r4, #12]
   21b4a:	6820      	ldr	r0, [r4, #0]
	if (!data->req) {
   21b4c:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
   21b4e:	bf14      	ite	ne
   21b50:	2300      	movne	r3, #0
   21b52:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   21b54:	9301      	str	r3, [sp, #4]
   21b56:	8a63      	ldrh	r3, [r4, #18]
   21b58:	9300      	str	r3, [sp, #0]
   21b5a:	4631      	mov	r1, r6
   21b5c:	8a23      	ldrh	r3, [r4, #16]
   21b5e:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   21b60:	1e03      	subs	r3, r0, #0
   21b62:	db05      	blt.n	21b70 <write_cb+0x42>
   21b64:	8a22      	ldrh	r2, [r4, #16]
   21b66:	4293      	cmp	r3, r2
   21b68:	d10b      	bne.n	21b82 <write_cb+0x54>
	data->err = 0U;
   21b6a:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   21b6c:	2501      	movs	r5, #1
   21b6e:	e005      	b.n	21b7c <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   21b70:	f113 0fff 	cmn.w	r3, #255	; 0xff
   21b74:	d305      	bcc.n	21b82 <write_cb+0x54>
		return -err;
   21b76:	425b      	negs	r3, r3
   21b78:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   21b7a:	7523      	strb	r3, [r4, #20]
}
   21b7c:	4628      	mov	r0, r5
   21b7e:	b003      	add	sp, #12
   21b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   21b82:	230e      	movs	r3, #14
   21b84:	e7f9      	b.n	21b7a <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   21b86:	2500      	movs	r5, #0
   21b88:	e7f8      	b.n	21b7c <write_cb+0x4e>

00021b8a <bt_att_sent>:
{
   21b8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   21b8c:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
	struct bt_att *att = chan->att;
   21b90:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   21b94:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   21b96:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   21b9a:	b10b      	cbz	r3, 21ba0 <bt_att_sent+0x16>
		chan->sent(chan);
   21b9c:	4638      	mov	r0, r7
   21b9e:	4798      	blx	r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21ba0:	f3bf 8f5b 	dmb	ish
   21ba4:	f105 03c0 	add.w	r3, r5, #192	; 0xc0
   21ba8:	e853 2f00 	ldrex	r2, [r3]
   21bac:	f022 0210 	bic.w	r2, r2, #16
   21bb0:	e843 2100 	strex	r1, r2, [r3]
   21bb4:	2900      	cmp	r1, #0
   21bb6:	d1f7      	bne.n	21ba8 <bt_att_sent+0x1e>
   21bb8:	f3bf 8f5b 	dmb	ish
	if (!att) {
   21bbc:	b30c      	cbz	r4, 21c02 <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   21bbe:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
   21bc2:	b98b      	cbnz	r3, 21be8 <bt_att_sent+0x5e>
   21bc4:	6863      	ldr	r3, [r4, #4]
   21bc6:	b17b      	cbz	r3, 21be8 <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   21bc8:	1d20      	adds	r0, r4, #4
   21bca:	f7ff fda6 	bl	2171a <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   21bce:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   21bd0:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   21bd2:	4638      	mov	r0, r7
   21bd4:	f7ff feb9 	bl	2194a <chan_req_send>
   21bd8:	2800      	cmp	r0, #0
   21bda:	da12      	bge.n	21c02 <bt_att_sent+0x78>
Z_GENLIST_PREPEND(slist, snode)
   21bdc:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   21bde:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   21be0:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   21be2:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   21be4:	b903      	cbnz	r3, 21be8 <bt_att_sent+0x5e>
	list->tail = node;
   21be6:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   21be8:	f105 01c8 	add.w	r1, r5, #200	; 0xc8
   21bec:	4638      	mov	r0, r7
   21bee:	f7ff fec5 	bl	2197c <process_queue>
	if (!err) {
   21bf2:	b130      	cbz	r0, 21c02 <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   21bf4:	f104 010c 	add.w	r1, r4, #12
   21bf8:	4638      	mov	r0, r7
}
   21bfa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   21bfe:	f7ff bebd 	b.w	2197c <process_queue>
}
   21c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00021c04 <read_cb>:
{
   21c04:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   21c08:	f8d2 8000 	ldr.w	r8, [r2]
{
   21c0c:	4606      	mov	r6, r0
	data->err = 0x00;
   21c0e:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   21c10:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   21c14:	7317      	strb	r7, [r2, #12]
{
   21c16:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   21c18:	4631      	mov	r1, r6
   21c1a:	2215      	movs	r2, #21
   21c1c:	f000 fb15 	bl	2224a <bt_gatt_check_perm>
   21c20:	4604      	mov	r4, r0
   21c22:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   21c24:	b9a0      	cbnz	r0, 21c50 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   21c26:	e9cd 0000 	strd	r0, r0, [sp]
   21c2a:	88ab      	ldrh	r3, [r5, #4]
   21c2c:	68aa      	ldr	r2, [r5, #8]
   21c2e:	4631      	mov	r1, r6
   21c30:	4640      	mov	r0, r8
   21c32:	f7ff fdef 	bl	21814 <att_chan_read>
	if (ret < 0) {
   21c36:	1e03      	subs	r3, r0, #0
   21c38:	da0c      	bge.n	21c54 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   21c3a:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   21c3e:	bf26      	itte	cs
   21c40:	425b      	negcs	r3, r3
   21c42:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   21c44:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   21c46:	732b      	strb	r3, [r5, #12]
}
   21c48:	4620      	mov	r0, r4
   21c4a:	b002      	add	sp, #8
   21c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   21c50:	463c      	mov	r4, r7
   21c52:	e7f9      	b.n	21c48 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   21c54:	2401      	movs	r4, #1
   21c56:	e7f7      	b.n	21c48 <read_cb+0x44>

00021c58 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   21c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21c5c:	4688      	mov	r8, r1
   21c5e:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   21c60:	2101      	movs	r1, #1
   21c62:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   21c64:	4605      	mov	r5, r0
   21c66:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   21c68:	f7e8 fa7a 	bl	a160 <bt_att_chan_create_pdu>
	if (!buf) {
   21c6c:	4604      	mov	r4, r0
   21c6e:	b170      	cbz	r0, 21c8e <send_err_rsp.part.0+0x36>
   21c70:	2104      	movs	r1, #4
   21c72:	3008      	adds	r0, #8
   21c74:	f000 ffa7 	bl	22bc6 <net_buf_simple_add>
	rsp->request = req;
   21c78:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   21c7c:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   21c7e:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   21c82:	4621      	mov	r1, r4
   21c84:	4628      	mov	r0, r5
}
   21c86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   21c8a:	f7e8 b97f 	b.w	9f8c <bt_att_chan_send_rsp.constprop.0>
}
   21c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00021c92 <att_read_blob_req>:
{
   21c92:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   21c94:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   21c96:	8813      	ldrh	r3, [r2, #0]
   21c98:	8852      	ldrh	r2, [r2, #2]
   21c9a:	9200      	str	r2, [sp, #0]
   21c9c:	210c      	movs	r1, #12
   21c9e:	220d      	movs	r2, #13
   21ca0:	f7e8 fca8 	bl	a5f4 <att_read_rsp>
}
   21ca4:	b003      	add	sp, #12
   21ca6:	f85d fb04 	ldr.w	pc, [sp], #4

00021caa <att_read_req>:
{
   21caa:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   21cac:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   21cae:	2200      	movs	r2, #0
   21cb0:	881b      	ldrh	r3, [r3, #0]
   21cb2:	9200      	str	r2, [sp, #0]
   21cb4:	210a      	movs	r1, #10
   21cb6:	220b      	movs	r2, #11
   21cb8:	f7e8 fc9c 	bl	a5f4 <att_read_rsp>
}
   21cbc:	b003      	add	sp, #12
   21cbe:	f85d fb04 	ldr.w	pc, [sp], #4

00021cc2 <att_mtu_req>:
{
   21cc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   21cc4:	6803      	ldr	r3, [r0, #0]
{
   21cc6:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   21cc8:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21cca:	f3bf 8f5b 	dmb	ish
   21cce:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
   21cd2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   21cd6:	f3c3 04c0 	ubfx	r4, r3, #3, #1
   21cda:	071b      	lsls	r3, r3, #28
   21cdc:	d41d      	bmi.n	21d1a <att_mtu_req+0x58>
	mtu_client = sys_le16_to_cpu(req->mtu);
   21cde:	688b      	ldr	r3, [r1, #8]
   21ce0:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   21ce2:	2e16      	cmp	r6, #22
   21ce4:	d91b      	bls.n	21d1e <att_mtu_req+0x5c>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   21ce6:	2202      	movs	r2, #2
   21ce8:	2103      	movs	r1, #3
   21cea:	f7e8 fb87 	bl	a3fc <bt_att_create_pdu>
	if (!pdu) {
   21cee:	4607      	mov	r7, r0
   21cf0:	b1b8      	cbz	r0, 21d22 <att_mtu_req+0x60>
   21cf2:	2102      	movs	r1, #2
   21cf4:	3008      	adds	r0, #8
   21cf6:	f000 ff66 	bl	22bc6 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   21cfa:	2341      	movs	r3, #65	; 0x41
   21cfc:	7003      	strb	r3, [r0, #0]
   21cfe:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   21d00:	4639      	mov	r1, r7
   21d02:	4628      	mov	r0, r5
   21d04:	f7e8 f942 	bl	9f8c <bt_att_chan_send_rsp.constprop.0>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   21d08:	2e41      	cmp	r6, #65	; 0x41
   21d0a:	bf28      	it	cs
   21d0c:	2641      	movcs	r6, #65	; 0x41
   21d0e:	f8a5 6052 	strh.w	r6, [r5, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   21d12:	f8a5 605e 	strh.w	r6, [r5, #94]	; 0x5e
	return 0;
   21d16:	4620      	mov	r0, r4
}
   21d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   21d1a:	2006      	movs	r0, #6
   21d1c:	e7fc      	b.n	21d18 <att_mtu_req+0x56>
		return BT_ATT_ERR_INVALID_PDU;
   21d1e:	2004      	movs	r0, #4
   21d20:	e7fa      	b.n	21d18 <att_mtu_req+0x56>
		return BT_ATT_ERR_UNLIKELY;
   21d22:	200e      	movs	r0, #14
   21d24:	e7f8      	b.n	21d18 <att_mtu_req+0x56>

00021d26 <bt_att_init>:
	bt_gatt_init();
   21d26:	f7e9 b989 	b.w	b03c <bt_gatt_init>

00021d2a <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   21d2a:	898a      	ldrh	r2, [r1, #12]
   21d2c:	6889      	ldr	r1, [r1, #8]
   21d2e:	2300      	movs	r3, #0
   21d30:	f7e8 bdd2 	b.w	a8d8 <att_handle_rsp>

00021d34 <bt_att_encrypt_change>:
	if (!att_chan->att) {
   21d34:	f850 3c08 	ldr.w	r3, [r0, #-8]
{
   21d38:	b570      	push	{r4, r5, r6, lr}
   21d3a:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   21d3c:	f1a0 0608 	sub.w	r6, r0, #8
	if (!att_chan->att) {
   21d40:	2b00      	cmp	r3, #0
   21d42:	d037      	beq.n	21db4 <bt_att_encrypt_change+0x80>
	if (hci_status) {
   21d44:	b171      	cbz	r1, 21d64 <bt_att_encrypt_change+0x30>
		if (att_chan->req && att_chan->req->retrying) {
   21d46:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
   21d4a:	2b00      	cmp	r3, #0
   21d4c:	d032      	beq.n	21db4 <bt_att_encrypt_change+0x80>
   21d4e:	7c1b      	ldrb	r3, [r3, #16]
   21d50:	07da      	lsls	r2, r3, #31
   21d52:	d52f      	bpl.n	21db4 <bt_att_encrypt_change+0x80>
		return BT_ATT_ERR_AUTHENTICATION;
   21d54:	2305      	movs	r3, #5
		att_handle_rsp(att_chan, NULL, 0, err);
   21d56:	2200      	movs	r2, #0
   21d58:	4630      	mov	r0, r6
   21d5a:	4611      	mov	r1, r2
}
   21d5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   21d60:	f7e8 bdba 	b.w	a8d8 <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
   21d64:	6805      	ldr	r5, [r0, #0]
	bt_gatt_encrypt_change(conn);
   21d66:	4628      	mov	r0, r5
   21d68:	f7e9 fc60 	bl	b62c <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   21d6c:	7a6b      	ldrb	r3, [r5, #9]
   21d6e:	2b01      	cmp	r3, #1
   21d70:	d020      	beq.n	21db4 <bt_att_encrypt_change+0x80>
	if (!(att_chan->req && att_chan->req->retrying)) {
   21d72:	f8d4 40c4 	ldr.w	r4, [r4, #196]	; 0xc4
   21d76:	b1ec      	cbz	r4, 21db4 <bt_att_encrypt_change+0x80>
   21d78:	7c23      	ldrb	r3, [r4, #16]
   21d7a:	07db      	lsls	r3, r3, #31
   21d7c:	d51a      	bpl.n	21db4 <bt_att_encrypt_change+0x80>
	if (!req->encode) {
   21d7e:	68e3      	ldr	r3, [r4, #12]
   21d80:	2b00      	cmp	r3, #0
   21d82:	d0e7      	beq.n	21d54 <bt_att_encrypt_change+0x20>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   21d84:	6962      	ldr	r2, [r4, #20]
   21d86:	7c61      	ldrb	r1, [r4, #17]
   21d88:	4630      	mov	r0, r6
   21d8a:	f7e8 f9e9 	bl	a160 <bt_att_chan_create_pdu>
	if (!buf) {
   21d8e:	4605      	mov	r5, r0
   21d90:	b140      	cbz	r0, 21da4 <bt_att_encrypt_change+0x70>
	if (req->encode(buf, req->len, req->user_data)) {
   21d92:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
   21d96:	68e3      	ldr	r3, [r4, #12]
   21d98:	4798      	blx	r3
   21d9a:	4602      	mov	r2, r0
   21d9c:	b120      	cbz	r0, 21da8 <bt_att_encrypt_change+0x74>
		net_buf_unref(buf);
   21d9e:	4628      	mov	r0, r5
   21da0:	f7f8 fc2c 	bl	1a5fc <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   21da4:	230e      	movs	r3, #14
   21da6:	e7d6      	b.n	21d56 <bt_att_encrypt_change+0x22>
	if (chan_send(att_chan, buf, NULL)) {
   21da8:	4629      	mov	r1, r5
   21daa:	4630      	mov	r0, r6
   21dac:	f7e8 f83a 	bl	9e24 <chan_send>
   21db0:	2800      	cmp	r0, #0
   21db2:	d1f4      	bne.n	21d9e <bt_att_encrypt_change+0x6a>
}
   21db4:	bd70      	pop	{r4, r5, r6, pc}

00021db6 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   21db6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   21dba:	4607      	mov	r7, r0
   21dbc:	460d      	mov	r5, r1
   21dbe:	4616      	mov	r6, r2
   21dc0:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   21dc2:	f7e8 f8a3 	bl	9f0c <att_get>
	if (!att) {
   21dc6:	4604      	mov	r4, r0
   21dc8:	b938      	cbnz	r0, 21dda <bt_att_send+0x24>
		net_buf_unref(buf);
   21dca:	4628      	mov	r0, r5
   21dcc:	f7f8 fc16 	bl	1a5fc <net_buf_unref>
		return -ENOTCONN;
   21dd0:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   21dd4:	b002      	add	sp, #8
   21dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   21dda:	b146      	cbz	r6, 21dee <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   21ddc:	f8cd 8000 	str.w	r8, [sp]
   21de0:	4633      	mov	r3, r6
   21de2:	462a      	mov	r2, r5
   21de4:	2104      	movs	r1, #4
   21de6:	4638      	mov	r0, r7
   21de8:	f7ff fc5d 	bl	216a6 <bt_l2cap_send_cb>
   21dec:	e7f2      	b.n	21dd4 <bt_att_send+0x1e>
	net_buf_put(&att->tx_queue, buf);
   21dee:	f100 060c 	add.w	r6, r0, #12
   21df2:	4629      	mov	r1, r5
   21df4:	4630      	mov	r0, r6
   21df6:	f000 feb3 	bl	22b60 <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   21dfa:	2200      	movs	r2, #0
   21dfc:	2300      	movs	r3, #0
   21dfe:	4630      	mov	r0, r6
   21e00:	f000 fe90 	bl	22b24 <net_buf_get>
	if (!buf) {
   21e04:	4605      	mov	r5, r0
   21e06:	b908      	cbnz	r0, 21e0c <bt_att_send+0x56>
	return 0;
   21e08:	2000      	movs	r0, #0
   21e0a:	e7e3      	b.n	21dd4 <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21e0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   21e0e:	b1c3      	cbz	r3, 21e42 <bt_att_send+0x8c>
   21e10:	f5b3 708e 	subs.w	r0, r3, #284	; 0x11c
   21e14:	d015      	beq.n	21e42 <bt_att_send+0x8c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21e16:	681c      	ldr	r4, [r3, #0]
   21e18:	b10c      	cbz	r4, 21e1e <bt_att_send+0x68>
   21e1a:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
	return chan_send(chan, buf, cb);
   21e1e:	2200      	movs	r2, #0
   21e20:	4629      	mov	r1, r5
   21e22:	f7e7 ffff 	bl	9e24 <chan_send>
		if (err >= 0) {
   21e26:	2800      	cmp	r0, #0
   21e28:	daee      	bge.n	21e08 <bt_att_send+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21e2a:	b154      	cbz	r4, 21e42 <bt_att_send+0x8c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   21e2c:	f514 738e 	adds.w	r3, r4, #284	; 0x11c
   21e30:	d004      	beq.n	21e3c <bt_att_send+0x86>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21e32:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   21e36:	b10b      	cbz	r3, 21e3c <bt_att_send+0x86>
   21e38:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
{
   21e3c:	4620      	mov	r0, r4
   21e3e:	461c      	mov	r4, r3
   21e40:	e7ed      	b.n	21e1e <bt_att_send+0x68>
		k_queue_prepend(&att->tx_queue._queue, buf);
   21e42:	4629      	mov	r1, r5
   21e44:	4630      	mov	r0, r6
   21e46:	f001 faae 	bl	233a6 <k_queue_prepend>
   21e4a:	e7dd      	b.n	21e08 <bt_att_send+0x52>

00021e4c <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   21e4c:	b510      	push	{r4, lr}
   21e4e:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   21e50:	f7e8 f85c 	bl	9f0c <att_get>
	if (!att) {
   21e54:	b160      	cbz	r0, 21e70 <bt_att_req_send+0x24>
	parent->next = child;
   21e56:	2300      	movs	r3, #0
   21e58:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   21e5a:	6883      	ldr	r3, [r0, #8]
   21e5c:	b92b      	cbnz	r3, 21e6a <bt_att_req_send+0x1e>
	list->head = node;
   21e5e:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   21e62:	f7ff fe38 	bl	21ad6 <att_req_send_process>

	return 0;
   21e66:	2000      	movs	r0, #0
}
   21e68:	bd10      	pop	{r4, pc}
	parent->next = child;
   21e6a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   21e6c:	6084      	str	r4, [r0, #8]
}
   21e6e:	e7f8      	b.n	21e62 <bt_att_req_send+0x16>
		return -ENOTCONN;
   21e70:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   21e74:	e7f8      	b.n	21e68 <bt_att_req_send+0x1c>

00021e76 <gatt_ccc_changed>:
{
   21e76:	460b      	mov	r3, r1
   21e78:	8909      	ldrh	r1, [r1, #8]
   21e7a:	8a5a      	ldrh	r2, [r3, #18]
   21e7c:	4291      	cmp	r1, r2
   21e7e:	bf38      	it	cc
   21e80:	4611      	movcc	r1, r2
	if (value != ccc->value) {
   21e82:	8a9a      	ldrh	r2, [r3, #20]
   21e84:	428a      	cmp	r2, r1
   21e86:	d003      	beq.n	21e90 <gatt_ccc_changed+0x1a>
		ccc->value = value;
   21e88:	8299      	strh	r1, [r3, #20]
		if (ccc->cfg_changed) {
   21e8a:	699b      	ldr	r3, [r3, #24]
   21e8c:	b103      	cbz	r3, 21e90 <gatt_ccc_changed+0x1a>
			ccc->cfg_changed(attr, value);
   21e8e:	4718      	bx	r3
}
   21e90:	4770      	bx	lr

00021e92 <gatt_indicate_rsp>:
{
   21e92:	b510      	push	{r4, lr}
   21e94:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   21e96:	68a3      	ldr	r3, [r4, #8]
{
   21e98:	460a      	mov	r2, r1
	if (params->func) {
   21e9a:	b10b      	cbz	r3, 21ea0 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   21e9c:	4621      	mov	r1, r4
   21e9e:	4798      	blx	r3
	params->_ref--;
   21ea0:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   21ea2:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   21ea4:	3b01      	subs	r3, #1
   21ea6:	b2db      	uxtb	r3, r3
   21ea8:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   21eaa:	b122      	cbz	r2, 21eb6 <gatt_indicate_rsp+0x24>
   21eac:	b91b      	cbnz	r3, 21eb6 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   21eae:	4620      	mov	r0, r4
}
   21eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   21eb4:	4710      	bx	r2
}
   21eb6:	bd10      	pop	{r4, pc}

00021eb8 <match_uuid>:
	data->attr = attr;
   21eb8:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   21eba:	8091      	strh	r1, [r2, #4]
}
   21ebc:	2000      	movs	r0, #0
   21ebe:	4770      	bx	lr

00021ec0 <gen_hash_m>:
{
   21ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   21ec2:	6807      	ldr	r7, [r0, #0]
   21ec4:	783d      	ldrb	r5, [r7, #0]
{
   21ec6:	b089      	sub	sp, #36	; 0x24
   21ec8:	4606      	mov	r6, r0
   21eca:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   21ecc:	b10d      	cbz	r5, 21ed2 <gen_hash_m+0x12>
	switch (u16->val) {
   21ece:	2501      	movs	r5, #1
   21ed0:	e014      	b.n	21efc <gen_hash_m+0x3c>
   21ed2:	887b      	ldrh	r3, [r7, #2]
   21ed4:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   21ed8:	d004      	beq.n	21ee4 <gen_hash_m+0x24>
   21eda:	d812      	bhi.n	21f02 <gen_hash_m+0x42>
   21edc:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   21ee0:	2b03      	cmp	r3, #3
   21ee2:	d8f4      	bhi.n	21ece <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   21ee4:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   21ee8:	2202      	movs	r2, #2
   21eea:	f10d 010e 	add.w	r1, sp, #14
   21eee:	4620      	mov	r0, r4
   21ef0:	f7fe fd85 	bl	209fe <tc_cmac_update>
   21ef4:	b9e0      	cbnz	r0, 21f30 <gen_hash_m+0x70>
			state->err = -EINVAL;
   21ef6:	f06f 0315 	mvn.w	r3, #21
   21efa:	65a3      	str	r3, [r4, #88]	; 0x58
}
   21efc:	4628      	mov	r0, r5
   21efe:	b009      	add	sp, #36	; 0x24
   21f00:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   21f02:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   21f06:	33ff      	adds	r3, #255	; 0xff
   21f08:	b29b      	uxth	r3, r3
   21f0a:	2b04      	cmp	r3, #4
   21f0c:	d8df      	bhi.n	21ece <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   21f0e:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   21f12:	2202      	movs	r2, #2
   21f14:	f10d 010e 	add.w	r1, sp, #14
   21f18:	4620      	mov	r0, r4
   21f1a:	f7fe fd70 	bl	209fe <tc_cmac_update>
   21f1e:	2800      	cmp	r0, #0
   21f20:	d0e9      	beq.n	21ef6 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   21f22:	887b      	ldrh	r3, [r7, #2]
   21f24:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   21f28:	2202      	movs	r2, #2
   21f2a:	f10d 010e 	add.w	r1, sp, #14
   21f2e:	e017      	b.n	21f60 <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   21f30:	887b      	ldrh	r3, [r7, #2]
   21f32:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   21f36:	2202      	movs	r2, #2
   21f38:	f10d 010e 	add.w	r1, sp, #14
   21f3c:	4620      	mov	r0, r4
   21f3e:	f7fe fd5e 	bl	209fe <tc_cmac_update>
   21f42:	2800      	cmp	r0, #0
   21f44:	d0d7      	beq.n	21ef6 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   21f46:	2000      	movs	r0, #0
   21f48:	2310      	movs	r3, #16
   21f4a:	eb0d 0203 	add.w	r2, sp, r3
   21f4e:	6877      	ldr	r7, [r6, #4]
   21f50:	9000      	str	r0, [sp, #0]
   21f52:	4631      	mov	r1, r6
   21f54:	47b8      	blx	r7
		if (len < 0) {
   21f56:	1e02      	subs	r2, r0, #0
   21f58:	da01      	bge.n	21f5e <gen_hash_m+0x9e>
			state->err = len;
   21f5a:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   21f5c:	e7ce      	b.n	21efc <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   21f5e:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   21f60:	4620      	mov	r0, r4
   21f62:	f7fe fd4c 	bl	209fe <tc_cmac_update>
   21f66:	2800      	cmp	r0, #0
   21f68:	d1b1      	bne.n	21ece <gen_hash_m+0xe>
   21f6a:	e7c4      	b.n	21ef6 <gen_hash_m+0x36>

00021f6c <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   21f6c:	2301      	movs	r3, #1
   21f6e:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   21f70:	f3bf 8f5b 	dmb	ish
   21f74:	e850 2f00 	ldrex	r2, [r0]
   21f78:	431a      	orrs	r2, r3
   21f7a:	e840 2100 	strex	r1, r2, [r0]
   21f7e:	2900      	cmp	r1, #0
   21f80:	d1f8      	bne.n	21f74 <atomic_set_bit+0x8>
   21f82:	f3bf 8f5b 	dmb	ish
}
   21f86:	4770      	bx	lr

00021f88 <bt_addr_le_copy>:
   21f88:	680b      	ldr	r3, [r1, #0]
   21f8a:	6003      	str	r3, [r0, #0]
   21f8c:	888b      	ldrh	r3, [r1, #4]
   21f8e:	8083      	strh	r3, [r0, #4]
   21f90:	798b      	ldrb	r3, [r1, #6]
   21f92:	7183      	strb	r3, [r0, #6]
}
   21f94:	4770      	bx	lr

00021f96 <clear_sc_cfg>:
__ssp_bos_icheck3(memset, void *, int)
   21f96:	2300      	movs	r3, #0
   21f98:	6003      	str	r3, [r0, #0]
   21f9a:	6043      	str	r3, [r0, #4]
   21f9c:	6083      	str	r3, [r0, #8]
}
   21f9e:	4770      	bx	lr

00021fa0 <bt_gatt_attr_read.constprop.0>:
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   21fa0:	b538      	push	{r3, r4, r5, lr}
   21fa2:	f8bd 5010 	ldrh.w	r5, [sp, #16]
	if (offset > value_len) {
   21fa6:	4295      	cmp	r5, r2
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   21fa8:	460c      	mov	r4, r1
   21faa:	4611      	mov	r1, r2
	if (offset > value_len) {
   21fac:	d30a      	bcc.n	21fc4 <bt_gatt_attr_read.constprop.0+0x24>
	len = MIN(buf_len, value_len - offset);
   21fae:	1aad      	subs	r5, r5, r2
   21fb0:	42a5      	cmp	r5, r4
   21fb2:	bfa8      	it	ge
   21fb4:	4625      	movge	r5, r4
   21fb6:	b2ad      	uxth	r5, r5
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   21fb8:	462a      	mov	r2, r5
   21fba:	4419      	add	r1, r3
   21fbc:	f001 fe1f 	bl	23bfe <memcpy>
}
   21fc0:	4628      	mov	r0, r5
   21fc2:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   21fc4:	f06f 0506 	mvn.w	r5, #6
   21fc8:	e7fa      	b.n	21fc0 <bt_gatt_attr_read.constprop.0+0x20>

00021fca <bt_gatt_attr_read_service>:
{
   21fca:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   21fcc:	460c      	mov	r4, r1
   21fce:	4619      	mov	r1, r3
	struct bt_uuid *uuid = attr->user_data;
   21fd0:	68e3      	ldr	r3, [r4, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
   21fd2:	781c      	ldrb	r4, [r3, #0]
{
   21fd4:	4610      	mov	r0, r2
   21fd6:	f8bd 2018 	ldrh.w	r2, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   21fda:	b954      	cbnz	r4, 21ff2 <bt_gatt_attr_read_service+0x28>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   21fdc:	885b      	ldrh	r3, [r3, #2]
   21fde:	f8ad 300e 	strh.w	r3, [sp, #14]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   21fe2:	2302      	movs	r3, #2
   21fe4:	9300      	str	r3, [sp, #0]
   21fe6:	f10d 030e 	add.w	r3, sp, #14
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   21fea:	f7ff ffd9 	bl	21fa0 <bt_gatt_attr_read.constprop.0>
}
   21fee:	b004      	add	sp, #16
   21ff0:	bd10      	pop	{r4, pc}
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   21ff2:	2410      	movs	r4, #16
   21ff4:	9400      	str	r4, [sp, #0]
   21ff6:	3301      	adds	r3, #1
   21ff8:	e7f7      	b.n	21fea <bt_gatt_attr_read_service+0x20>

00021ffa <read_name>:
{
   21ffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21ffe:	4614      	mov	r4, r2
   22000:	461d      	mov	r5, r3
   22002:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	const char *name = bt_get_name();
   22006:	f7e5 fe7f 	bl	7d08 <bt_get_name>
   2200a:	4606      	mov	r6, r0
				 strlen(name));
   2200c:	f7de fe9c 	bl	d48 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   22010:	b280      	uxth	r0, r0
   22012:	9006      	str	r0, [sp, #24]
   22014:	4633      	mov	r3, r6
   22016:	463a      	mov	r2, r7
   22018:	4629      	mov	r1, r5
   2201a:	4620      	mov	r0, r4
}
   2201c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   22020:	f7ff bfbe 	b.w	21fa0 <bt_gatt_attr_read.constprop.0>

00022024 <read_appearance>:
{
   22024:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   22026:	4619      	mov	r1, r3
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   22028:	f240 3341 	movw	r3, #833	; 0x341
   2202c:	f8ad 300e 	strh.w	r3, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   22030:	2302      	movs	r3, #2
   22032:	9300      	str	r3, [sp, #0]
{
   22034:	4610      	mov	r0, r2
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   22036:	f10d 030e 	add.w	r3, sp, #14
   2203a:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   2203e:	f7ff ffaf 	bl	21fa0 <bt_gatt_attr_read.constprop.0>
}
   22042:	b005      	add	sp, #20
   22044:	f85d fb04 	ldr.w	pc, [sp], #4

00022048 <clear_cf_cfg>:
{
   22048:	b513      	push	{r0, r1, r4, lr}
   2204a:	4602      	mov	r2, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2204c:	2400      	movs	r4, #0
   2204e:	4669      	mov	r1, sp
   22050:	3001      	adds	r0, #1
   22052:	9400      	str	r4, [sp, #0]
   22054:	f8cd 4003 	str.w	r4, [sp, #3]
   22058:	f7ff ff96 	bl	21f88 <bt_addr_le_copy>
__ssp_bos_icheck3(memset, void *, int)
   2205c:	7214      	strb	r4, [r2, #8]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2205e:	320c      	adds	r2, #12
   22060:	f3bf 8f5b 	dmb	ish
   22064:	e852 3f00 	ldrex	r3, [r2]
   22068:	e842 4100 	strex	r1, r4, [r2]
   2206c:	2900      	cmp	r1, #0
   2206e:	d1f9      	bne.n	22064 <clear_cf_cfg+0x1c>
   22070:	f3bf 8f5b 	dmb	ish
}
   22074:	b002      	add	sp, #8
   22076:	bd10      	pop	{r4, pc}

00022078 <sc_clear>:
{
   22078:	b538      	push	{r3, r4, r5, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2207a:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
   2207e:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   22080:	4629      	mov	r1, r5
   22082:	7a00      	ldrb	r0, [r0, #8]
   22084:	f7fe ff7d 	bl	20f82 <bt_addr_le_is_bonded>
   22088:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   2208a:	4629      	mov	r1, r5
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2208c:	f7e8 fd4c 	bl	ab28 <find_sc_cfg>
		if (cfg) {
   22090:	b118      	cbz	r0, 2209a <sc_clear+0x22>
}
   22092:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			clear_sc_cfg(cfg);
   22096:	f7ff bf7e 	b.w	21f96 <clear_sc_cfg>
}
   2209a:	bd38      	pop	{r3, r4, r5, pc}

0002209c <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   2209c:	2a02      	cmp	r2, #2
{
   2209e:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   220a0:	d108      	bne.n	220b4 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   220a2:	2300      	movs	r3, #0
   220a4:	f100 0188 	add.w	r1, r0, #136	; 0x88
   220a8:	461a      	mov	r2, r3
   220aa:	7a00      	ldrb	r0, [r0, #8]
   220ac:	f7e8 fd5e 	bl	ab6c <sc_save>
}
   220b0:	2002      	movs	r0, #2
   220b2:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   220b4:	f7ff ffe0 	bl	22078 <sc_clear>
   220b8:	e7fa      	b.n	220b0 <sc_ccc_cfg_write+0x14>

000220ba <sc_restore_rsp>:
{
   220ba:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   220bc:	f7e8 fd8e 	bl	abdc <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   220c0:	b140      	cbz	r0, 220d4 <sc_restore_rsp+0x1a>
   220c2:	7a03      	ldrb	r3, [r0, #8]
   220c4:	07db      	lsls	r3, r3, #31
   220c6:	d505      	bpl.n	220d4 <sc_restore_rsp+0x1a>
}
   220c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   220cc:	2100      	movs	r1, #0
   220ce:	300c      	adds	r0, #12
   220d0:	f7ff bf4c 	b.w	21f6c <atomic_set_bit>
}
   220d4:	bd08      	pop	{r3, pc}

000220d6 <cf_read>:
{
   220d6:	b530      	push	{r4, r5, lr}
   220d8:	b085      	sub	sp, #20
   220da:	461d      	mov	r5, r3
	uint8_t data[1] = {};
   220dc:	2300      	movs	r3, #0
{
   220de:	4614      	mov	r4, r2
	uint8_t data[1] = {};
   220e0:	f88d 300c 	strb.w	r3, [sp, #12]
	cfg = find_cf_cfg(conn);
   220e4:	f7e8 fd7a 	bl	abdc <find_cf_cfg>
	if (cfg) {
   220e8:	b110      	cbz	r0, 220f0 <cf_read+0x1a>
		memcpy(data, cfg->data, sizeof(data));
   220ea:	7a03      	ldrb	r3, [r0, #8]
   220ec:	f88d 300c 	strb.w	r3, [sp, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   220f0:	2301      	movs	r3, #1
   220f2:	9300      	str	r3, [sp, #0]
   220f4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   220f8:	ab03      	add	r3, sp, #12
   220fa:	4629      	mov	r1, r5
   220fc:	4620      	mov	r0, r4
   220fe:	f7ff ff4f 	bl	21fa0 <bt_gatt_attr_read.constprop.0>
}
   22102:	b005      	add	sp, #20
   22104:	bd30      	pop	{r4, r5, pc}

00022106 <find_ccc_cfg>:
{
   22106:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   22108:	4606      	mov	r6, r0
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   2210a:	1c4c      	adds	r4, r1, #1
   2210c:	f101 0515 	add.w	r5, r1, #21
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   22110:	1e67      	subs	r7, r4, #1
		if (conn) {
   22112:	b14e      	cbz	r6, 22128 <find_ccc_cfg+0x22>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   22114:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   22118:	4622      	mov	r2, r4
   2211a:	4630      	mov	r0, r6
   2211c:	f7ff f995 	bl	2144a <bt_conn_is_peer_addr_le>
   22120:	b160      	cbz	r0, 2213c <find_ccc_cfg+0x36>
}
   22122:	4638      	mov	r0, r7
   22124:	b003      	add	sp, #12
   22126:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return memcmp(a, b, sizeof(*a));
   22128:	2207      	movs	r2, #7
   2212a:	4669      	mov	r1, sp
   2212c:	4620      	mov	r0, r4
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   2212e:	9600      	str	r6, [sp, #0]
   22130:	f8cd 6003 	str.w	r6, [sp, #3]
   22134:	f001 fd55 	bl	23be2 <memcmp>
   22138:	2800      	cmp	r0, #0
   2213a:	d0f2      	beq.n	22122 <find_ccc_cfg+0x1c>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   2213c:	340a      	adds	r4, #10
   2213e:	42ac      	cmp	r4, r5
   22140:	d1e6      	bne.n	22110 <find_ccc_cfg+0xa>
	return NULL;
   22142:	2700      	movs	r7, #0
   22144:	e7ed      	b.n	22122 <find_ccc_cfg+0x1c>

00022146 <bt_gatt_attr_read_ccc>:
{
   22146:	b530      	push	{r4, r5, lr}
	cfg = find_ccc_cfg(conn, ccc);
   22148:	68c9      	ldr	r1, [r1, #12]
{
   2214a:	b085      	sub	sp, #20
   2214c:	4614      	mov	r4, r2
   2214e:	461d      	mov	r5, r3
	cfg = find_ccc_cfg(conn, ccc);
   22150:	f7ff ffd9 	bl	22106 <find_ccc_cfg>
	if (cfg) {
   22154:	b100      	cbz	r0, 22158 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(cfg->value);
   22156:	8900      	ldrh	r0, [r0, #8]
   22158:	f8ad 000e 	strh.w	r0, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   2215c:	2302      	movs	r3, #2
   2215e:	9300      	str	r3, [sp, #0]
   22160:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   22164:	f10d 030e 	add.w	r3, sp, #14
   22168:	4629      	mov	r1, r5
   2216a:	4620      	mov	r0, r4
   2216c:	f7ff ff18 	bl	21fa0 <bt_gatt_attr_read.constprop.0>
}
   22170:	b005      	add	sp, #20
   22172:	bd30      	pop	{r4, r5, pc}

00022174 <bt_gatt_attr_read>:
{
   22174:	b538      	push	{r3, r4, r5, lr}
   22176:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   2217a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (offset > value_len) {
   2217e:	428d      	cmp	r5, r1
{
   22180:	4610      	mov	r0, r2
	if (offset > value_len) {
   22182:	d30b      	bcc.n	2219c <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   22184:	1a6d      	subs	r5, r5, r1
   22186:	429d      	cmp	r5, r3
   22188:	bfa8      	it	ge
   2218a:	461d      	movge	r5, r3
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2218c:	9b05      	ldr	r3, [sp, #20]
   2218e:	b2ad      	uxth	r5, r5
   22190:	462a      	mov	r2, r5
   22192:	4419      	add	r1, r3
   22194:	f001 fd33 	bl	23bfe <memcpy>
}
   22198:	4628      	mov	r0, r5
   2219a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2219c:	f06f 0506 	mvn.w	r5, #6
   221a0:	e7fa      	b.n	22198 <bt_gatt_attr_read+0x24>

000221a2 <bt_gatt_attr_value_handle>:
{
   221a2:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   221a4:	4604      	mov	r4, r0
   221a6:	b910      	cbnz	r0, 221ae <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   221a8:	2000      	movs	r0, #0
}
   221aa:	b002      	add	sp, #8
   221ac:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   221ae:	2300      	movs	r3, #0
   221b0:	f88d 3004 	strb.w	r3, [sp, #4]
   221b4:	6800      	ldr	r0, [r0, #0]
   221b6:	f642 0303 	movw	r3, #10243	; 0x2803
   221ba:	a901      	add	r1, sp, #4
   221bc:	f8ad 3006 	strh.w	r3, [sp, #6]
   221c0:	f7fe fd7a 	bl	20cb8 <bt_uuid_cmp>
   221c4:	2800      	cmp	r0, #0
   221c6:	d1ef      	bne.n	221a8 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   221c8:	68e3      	ldr	r3, [r4, #12]
   221ca:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   221cc:	2800      	cmp	r0, #0
   221ce:	d1ec      	bne.n	221aa <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   221d0:	4620      	mov	r0, r4
   221d2:	f7e8 ff87 	bl	b0e4 <bt_gatt_attr_get_handle>
   221d6:	3001      	adds	r0, #1
   221d8:	b280      	uxth	r0, r0
	return handle;
   221da:	e7e6      	b.n	221aa <bt_gatt_attr_value_handle+0x8>

000221dc <bt_gatt_attr_read_chrc>:
{
   221dc:	b570      	push	{r4, r5, r6, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   221de:	68ce      	ldr	r6, [r1, #12]
{
   221e0:	b088      	sub	sp, #32
   221e2:	4608      	mov	r0, r1
   221e4:	461d      	mov	r5, r3
	pdu.properties = chrc->properties;
   221e6:	79b3      	ldrb	r3, [r6, #6]
   221e8:	f88d 300c 	strb.w	r3, [sp, #12]
{
   221ec:	4614      	mov	r4, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   221ee:	f7ff ffd8 	bl	221a2 <bt_gatt_attr_value_handle>
   221f2:	f8ad 000d 	strh.w	r0, [sp, #13]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   221f6:	6830      	ldr	r0, [r6, #0]
   221f8:	7803      	ldrb	r3, [r0, #0]
   221fa:	b96b      	cbnz	r3, 22218 <bt_gatt_attr_read_chrc+0x3c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   221fc:	8843      	ldrh	r3, [r0, #2]
   221fe:	f8ad 300f 	strh.w	r3, [sp, #15]
		value_len += 2U;
   22202:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   22204:	9300      	str	r3, [sp, #0]
   22206:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   2220a:	ab03      	add	r3, sp, #12
   2220c:	4629      	mov	r1, r5
   2220e:	4620      	mov	r0, r4
   22210:	f7ff fec6 	bl	21fa0 <bt_gatt_attr_read.constprop.0>
}
   22214:	b008      	add	sp, #32
   22216:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   22218:	1c43      	adds	r3, r0, #1
   2221a:	f10d 020f 	add.w	r2, sp, #15
   2221e:	3011      	adds	r0, #17
   22220:	f853 1b04 	ldr.w	r1, [r3], #4
   22224:	f842 1b04 	str.w	r1, [r2], #4
   22228:	4283      	cmp	r3, r0
   2222a:	d1f9      	bne.n	22220 <bt_gatt_attr_read_chrc+0x44>
		value_len += 16U;
   2222c:	2313      	movs	r3, #19
   2222e:	e7e9      	b.n	22204 <bt_gatt_attr_read_chrc+0x28>

00022230 <bt_gatt_foreach_attr>:
{
   22230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   22232:	e9cd 2301 	strd	r2, r3, [sp, #4]
   22236:	2300      	movs	r3, #0
   22238:	9300      	str	r3, [sp, #0]
   2223a:	461a      	mov	r2, r3
   2223c:	f7e8 ff82 	bl	b144 <bt_gatt_foreach_attr_type>
}
   22240:	b005      	add	sp, #20
   22242:	f85d fb04 	ldr.w	pc, [sp], #4

00022246 <db_hash_process>:
	db_hash_gen(true);
   22246:	f7e8 bfd7 	b.w	b1f8 <db_hash_gen.isra.0>

0002224a <bt_gatt_check_perm>:
{
   2224a:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   2224c:	07d4      	lsls	r4, r2, #31
{
   2224e:	4605      	mov	r5, r0
   22250:	7c88      	ldrb	r0, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   22252:	d504      	bpl.n	2225e <bt_gatt_check_perm+0x14>
   22254:	f010 0f15 	tst.w	r0, #21
   22258:	d01e      	beq.n	22298 <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2225a:	684b      	ldr	r3, [r1, #4]
   2225c:	b1e3      	cbz	r3, 22298 <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   2225e:	0793      	lsls	r3, r2, #30
   22260:	d504      	bpl.n	2226c <bt_gatt_check_perm+0x22>
   22262:	f010 0f2a 	tst.w	r0, #42	; 0x2a
   22266:	d019      	beq.n	2229c <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   22268:	688b      	ldr	r3, [r1, #8]
   2226a:	b1bb      	cbz	r3, 2229c <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   2226c:	ea02 0400 	and.w	r4, r2, r0
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   22270:	f014 0f30 	tst.w	r4, #48	; 0x30
   22274:	d103      	bne.n	2227e <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   22276:	f014 000c 	ands.w	r0, r4, #12
   2227a:	d107      	bne.n	2228c <bt_gatt_check_perm+0x42>
}
   2227c:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   2227e:	4628      	mov	r0, r5
   22280:	f7ff f8d8 	bl	21434 <bt_conn_get_security>
   22284:	2802      	cmp	r0, #2
   22286:	d8f6      	bhi.n	22276 <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   22288:	2005      	movs	r0, #5
   2228a:	e7f7      	b.n	2227c <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   2228c:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   2228e:	2b00      	cmp	r3, #0
   22290:	bf14      	ite	ne
   22292:	2000      	movne	r0, #0
   22294:	200f      	moveq	r0, #15
   22296:	e7f1      	b.n	2227c <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   22298:	2002      	movs	r0, #2
   2229a:	e7ef      	b.n	2227c <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   2229c:	2003      	movs	r0, #3
   2229e:	e7ed      	b.n	2227c <bt_gatt_check_perm+0x32>

000222a0 <bt_gatt_change_aware>:
{
   222a0:	b510      	push	{r4, lr}
   222a2:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   222a4:	f7e8 fc9a 	bl	abdc <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   222a8:	4603      	mov	r3, r0
   222aa:	b910      	cbnz	r0, 222b2 <bt_gatt_change_aware+0x12>
		return true;
   222ac:	2401      	movs	r4, #1
}
   222ae:	4620      	mov	r0, r4
   222b0:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   222b2:	7a02      	ldrb	r2, [r0, #8]
   222b4:	07d2      	lsls	r2, r2, #31
   222b6:	d5f9      	bpl.n	222ac <bt_gatt_change_aware+0xc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   222b8:	f3bf 8f5b 	dmb	ish
   222bc:	68d9      	ldr	r1, [r3, #12]
   222be:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   222c2:	f011 0101 	ands.w	r1, r1, #1
   222c6:	f100 000c 	add.w	r0, r0, #12
   222ca:	d1ef      	bne.n	222ac <bt_gatt_change_aware+0xc>
	if (!req) {
   222cc:	2c00      	cmp	r4, #0
   222ce:	d0ee      	beq.n	222ae <bt_gatt_change_aware+0xe>
   222d0:	f3bf 8f5b 	dmb	ish
   222d4:	68db      	ldr	r3, [r3, #12]
   222d6:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   222da:	f3c3 0440 	ubfx	r4, r3, #1, #1
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   222de:	079b      	lsls	r3, r3, #30
   222e0:	d50e      	bpl.n	22300 <bt_gatt_change_aware+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   222e2:	f3bf 8f5b 	dmb	ish
   222e6:	e850 3f00 	ldrex	r3, [r0]
   222ea:	f023 0302 	bic.w	r3, r3, #2
   222ee:	e840 3200 	strex	r2, r3, [r0]
   222f2:	2a00      	cmp	r2, #0
   222f4:	d1f7      	bne.n	222e6 <bt_gatt_change_aware+0x46>
   222f6:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   222fa:	f7ff fe37 	bl	21f6c <atomic_set_bit>
	return false;
   222fe:	e7d6      	b.n	222ae <bt_gatt_change_aware+0xe>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   22300:	2101      	movs	r1, #1
   22302:	e7fa      	b.n	222fa <bt_gatt_change_aware+0x5a>

00022304 <sys_memcpy_swap>:
	psrc += length - 1;
   22304:	1e53      	subs	r3, r2, #1
   22306:	4419      	add	r1, r3
	for (; length > 0; length--) {
   22308:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   2230a:	f811 3901 	ldrb.w	r3, [r1], #-1
   2230e:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   22312:	4290      	cmp	r0, r2
   22314:	d1f9      	bne.n	2230a <sys_memcpy_swap+0x6>
}
   22316:	4770      	bx	lr

00022318 <smp_pairing_rsp>:
}
   22318:	2007      	movs	r0, #7
   2231a:	4770      	bx	lr

0002231c <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2231c:	2301      	movs	r3, #1
   2231e:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   22320:	f3bf 8f5b 	dmb	ish
   22324:	e850 2f00 	ldrex	r2, [r0]
   22328:	431a      	orrs	r2, r3
   2232a:	e840 2100 	strex	r1, r2, [r0]
   2232e:	2900      	cmp	r1, #0
   22330:	d1f8      	bne.n	22324 <atomic_set_bit+0x8>
   22332:	f3bf 8f5b 	dmb	ish
}
   22336:	4770      	bx	lr

00022338 <smp_keypress_notif>:
{
   22338:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   2233a:	210e      	movs	r1, #14
   2233c:	30c0      	adds	r0, #192	; 0xc0
   2233e:	f7ff ffed 	bl	2231c <atomic_set_bit>
}
   22342:	2000      	movs	r0, #0
   22344:	bd08      	pop	{r3, pc}

00022346 <k_delayed_work_cancel>:
{
   22346:	b538      	push	{r3, r4, r5, lr}
   22348:	4605      	mov	r5, r0
	return k_work_delayable_busy_get(dwork) != 0;
   2234a:	f001 fa44 	bl	237d6 <k_work_delayable_busy_get>
   2234e:	4604      	mov	r4, r0
	int rc = k_work_cancel_delayable(&work->work);
   22350:	4628      	mov	r0, r5
   22352:	f001 fa54 	bl	237fe <k_work_cancel_delayable>
	if (pending) {
   22356:	b124      	cbz	r4, 22362 <k_delayed_work_cancel+0x1c>
		return (rc == 0) ? 0 : -EINVAL;
   22358:	2800      	cmp	r0, #0
   2235a:	bf18      	it	ne
   2235c:	f06f 0015 	mvnne.w	r0, #21
}
   22360:	bd38      	pop	{r3, r4, r5, pc}
	return -EALREADY;
   22362:	f06f 0077 	mvn.w	r0, #119	; 0x77
   22366:	e7fb      	b.n	22360 <k_delayed_work_cancel+0x1a>

00022368 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   22368:	2301      	movs	r3, #1
   2236a:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2236c:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2236e:	f3bf 8f5b 	dmb	ish
   22372:	e850 2f00 	ldrex	r2, [r0]
   22376:	401a      	ands	r2, r3
   22378:	e840 2100 	strex	r1, r2, [r0]
   2237c:	2900      	cmp	r1, #0
   2237e:	d1f8      	bne.n	22372 <atomic_clear_bit+0xa>
   22380:	f3bf 8f5b 	dmb	ish
}
   22384:	4770      	bx	lr

00022386 <bt_addr_le_copy>:
   22386:	680b      	ldr	r3, [r1, #0]
   22388:	6003      	str	r3, [r0, #0]
   2238a:	888b      	ldrh	r3, [r1, #4]
   2238c:	8083      	strh	r3, [r0, #4]
   2238e:	798b      	ldrb	r3, [r1, #6]
   22390:	7183      	strb	r3, [r0, #6]
}
   22392:	4770      	bx	lr

00022394 <bt_smp_aes_cmac>:
{
   22394:	b570      	push	{r4, r5, r6, lr}
   22396:	b0c2      	sub	sp, #264	; 0x108
   22398:	460d      	mov	r5, r1
   2239a:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2239c:	4601      	mov	r1, r0
   2239e:	aa16      	add	r2, sp, #88	; 0x58
   223a0:	4668      	mov	r0, sp
{
   223a2:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   223a4:	f7fe fb00 	bl	209a8 <tc_cmac_setup>
   223a8:	b150      	cbz	r0, 223c0 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   223aa:	4632      	mov	r2, r6
   223ac:	4629      	mov	r1, r5
   223ae:	4668      	mov	r0, sp
   223b0:	f7fe fb25 	bl	209fe <tc_cmac_update>
   223b4:	b120      	cbz	r0, 223c0 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   223b6:	4669      	mov	r1, sp
   223b8:	4620      	mov	r0, r4
   223ba:	f7fe fb8c 	bl	20ad6 <tc_cmac_final>
   223be:	b918      	cbnz	r0, 223c8 <bt_smp_aes_cmac+0x34>
		return -EIO;
   223c0:	f06f 0004 	mvn.w	r0, #4
}
   223c4:	b042      	add	sp, #264	; 0x108
   223c6:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   223c8:	2000      	movs	r0, #0
   223ca:	e7fb      	b.n	223c4 <bt_smp_aes_cmac+0x30>

000223cc <smp_security_request>:
   223cc:	2007      	movs	r0, #7
   223ce:	4770      	bx	lr

000223d0 <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   223d0:	b510      	push	{r4, lr}
   223d2:	1e43      	subs	r3, r0, #1
   223d4:	f100 0210 	add.w	r2, r0, #16
   223d8:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   223da:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   223de:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   223e2:	701c      	strb	r4, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   223e4:	4283      	cmp	r3, r0
		((uint8_t *)buf)[length - 1 - i] = tmp;
   223e6:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   223e8:	d1f7      	bne.n	223da <sys_mem_swap.constprop.0+0xa>
	}
}
   223ea:	bd10      	pop	{r4, pc}

000223ec <smp_f6>:
{
   223ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   223f0:	b097      	sub	sp, #92	; 0x5c
   223f2:	4606      	mov	r6, r0
   223f4:	4691      	mov	r9, r2
	sys_memcpy_swap(m, n1, 16);
   223f6:	a805      	add	r0, sp, #20
   223f8:	2210      	movs	r2, #16
{
   223fa:	e9dd 541f 	ldrd	r5, r4, [sp, #124]	; 0x7c
   223fe:	4698      	mov	r8, r3
   22400:	9f21      	ldr	r7, [sp, #132]	; 0x84
	sys_memcpy_swap(m, n1, 16);
   22402:	f7ff ff7f 	bl	22304 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   22406:	2210      	movs	r2, #16
   22408:	4649      	mov	r1, r9
   2240a:	a809      	add	r0, sp, #36	; 0x24
   2240c:	f7ff ff7a 	bl	22304 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   22410:	2210      	movs	r2, #16
   22412:	4641      	mov	r1, r8
   22414:	a80d      	add	r0, sp, #52	; 0x34
   22416:	f7ff ff75 	bl	22304 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   2241a:	991e      	ldr	r1, [sp, #120]	; 0x78
   2241c:	2203      	movs	r2, #3
   2241e:	a811      	add	r0, sp, #68	; 0x44
   22420:	f7ff ff70 	bl	22304 <sys_memcpy_swap>
	memcpy(m + 52, a1->a.val, 6);
   22424:	4629      	mov	r1, r5
	m[51] = a1->type;
   22426:	782b      	ldrb	r3, [r5, #0]
	memcpy(m + 52, a1->a.val, 6);
   22428:	f851 0f01 	ldr.w	r0, [r1, #1]!
	m[51] = a1->type;
   2242c:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   22430:	9012      	str	r0, [sp, #72]	; 0x48
   22432:	888b      	ldrh	r3, [r1, #4]
   22434:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   22438:	2206      	movs	r2, #6
   2243a:	a812      	add	r0, sp, #72	; 0x48
   2243c:	f7ff ff62 	bl	22304 <sys_memcpy_swap>
	memcpy(m + 59, a2->a.val, 6);
   22440:	4621      	mov	r1, r4
	m[58] = a2->type;
   22442:	7823      	ldrb	r3, [r4, #0]
   22444:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   22448:	f851 3f01 	ldr.w	r3, [r1, #1]!
   2244c:	f8cd 304f 	str.w	r3, [sp, #79]	; 0x4f
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   22450:	2206      	movs	r2, #6
	memcpy(m + 59, a2->a.val, 6);
   22452:	888b      	ldrh	r3, [r1, #4]
   22454:	f8ad 3053 	strh.w	r3, [sp, #83]	; 0x53
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   22458:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   2245c:	f7ff ff52 	bl	22304 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   22460:	2210      	movs	r2, #16
   22462:	4631      	mov	r1, r6
   22464:	a801      	add	r0, sp, #4
   22466:	f7ff ff4d 	bl	22304 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   2246a:	463b      	mov	r3, r7
   2246c:	2241      	movs	r2, #65	; 0x41
   2246e:	a905      	add	r1, sp, #20
   22470:	a801      	add	r0, sp, #4
   22472:	f7ff ff8f 	bl	22394 <bt_smp_aes_cmac>
	if (err) {
   22476:	4604      	mov	r4, r0
   22478:	b910      	cbnz	r0, 22480 <smp_f6+0x94>
	sys_mem_swap(check, 16);
   2247a:	4638      	mov	r0, r7
   2247c:	f7ff ffa8 	bl	223d0 <sys_mem_swap.constprop.0>
}
   22480:	4620      	mov	r0, r4
   22482:	b017      	add	sp, #92	; 0x5c
   22484:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00022488 <smp_f4>:
{
   22488:	b5f0      	push	{r4, r5, r6, r7, lr}
   2248a:	b097      	sub	sp, #92	; 0x5c
   2248c:	4614      	mov	r4, r2
   2248e:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   22490:	2220      	movs	r2, #32
   22492:	4601      	mov	r1, r0
   22494:	a805      	add	r0, sp, #20
{
   22496:	461d      	mov	r5, r3
   22498:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   2249a:	f7ff ff33 	bl	22304 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   2249e:	2220      	movs	r2, #32
   224a0:	4631      	mov	r1, r6
   224a2:	a80d      	add	r0, sp, #52	; 0x34
   224a4:	f7ff ff2e 	bl	22304 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   224a8:	4621      	mov	r1, r4
   224aa:	2210      	movs	r2, #16
   224ac:	a801      	add	r0, sp, #4
	m[64] = z;
   224ae:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   224b2:	f7ff ff27 	bl	22304 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   224b6:	463b      	mov	r3, r7
   224b8:	2241      	movs	r2, #65	; 0x41
   224ba:	a905      	add	r1, sp, #20
   224bc:	a801      	add	r0, sp, #4
   224be:	f7ff ff69 	bl	22394 <bt_smp_aes_cmac>
	if (err) {
   224c2:	4604      	mov	r4, r0
   224c4:	b910      	cbnz	r0, 224cc <smp_f4+0x44>
	sys_mem_swap(res, 16);
   224c6:	4638      	mov	r0, r7
   224c8:	f7ff ff82 	bl	223d0 <sys_mem_swap.constprop.0>
}
   224cc:	4620      	mov	r0, r4
   224ce:	b017      	add	sp, #92	; 0x5c
   224d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000224d2 <smp_signing_info>:
   224d2:	2007      	movs	r0, #7
   224d4:	4770      	bx	lr

000224d6 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   224d6:	f3bf 8f5b 	dmb	ish
   224da:	6800      	ldr	r0, [r0, #0]
   224dc:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   224e0:	4108      	asrs	r0, r1
}
   224e2:	f000 0001 	and.w	r0, r0, #1
   224e6:	4770      	bx	lr

000224e8 <update_keys_check>:
{
   224e8:	b510      	push	{r4, lr}
   224ea:	4603      	mov	r3, r0
	if (!keys ||
   224ec:	b1f9      	cbz	r1, 2252e <update_keys_check+0x46>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   224ee:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   224f0:	f010 0f24 	tst.w	r0, #36	; 0x24
   224f4:	d01b      	beq.n	2252e <update_keys_check+0x46>
	return MIN(req->max_key_size, rsp->max_key_size);
   224f6:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
   224fa:	f893 40cd 	ldrb.w	r4, [r3, #205]	; 0xcd
	if (keys->enc_size > get_encryption_key_size(smp)) {
   224fe:	7b09      	ldrb	r1, [r1, #12]
   22500:	42a2      	cmp	r2, r4
   22502:	bf28      	it	cs
   22504:	4622      	movcs	r2, r4
   22506:	4291      	cmp	r1, r2
   22508:	d901      	bls.n	2250e <update_keys_check+0x26>
		return false;
   2250a:	2000      	movs	r0, #0
}
   2250c:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2250e:	0682      	lsls	r2, r0, #26
   22510:	d405      	bmi.n	2251e <update_keys_check+0x36>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   22512:	f893 00c8 	ldrb.w	r0, [r3, #200]	; 0xc8
   22516:	3800      	subs	r0, #0
   22518:	bf18      	it	ne
   2251a:	2001      	movne	r0, #1
   2251c:	e7f6      	b.n	2250c <update_keys_check+0x24>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2251e:	2105      	movs	r1, #5
   22520:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
   22524:	f7ff ffd7 	bl	224d6 <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   22528:	2800      	cmp	r0, #0
   2252a:	d1f2      	bne.n	22512 <update_keys_check+0x2a>
   2252c:	e7ed      	b.n	2250a <update_keys_check+0x22>
		return true;
   2252e:	2001      	movs	r0, #1
   22530:	e7ec      	b.n	2250c <update_keys_check+0x24>

00022532 <smp_create_pdu.isra.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   22532:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   22534:	f100 05c4 	add.w	r5, r0, #196	; 0xc4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   22538:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2253a:	4628      	mov	r0, r5
   2253c:	2104      	movs	r1, #4
   2253e:	f7ff ffca 	bl	224d6 <atomic_test_bit>
   22542:	b168      	cbz	r0, 22560 <smp_create_pdu.isra.0+0x2e>
		timeout = K_NO_WAIT;
   22544:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   22546:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   22548:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2254a:	4608      	mov	r0, r1
   2254c:	f7ff f8a8 	bl	216a0 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   22550:	4604      	mov	r4, r0
   22552:	b940      	cbnz	r0, 22566 <smp_create_pdu.isra.0+0x34>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   22554:	2104      	movs	r1, #4
   22556:	4628      	mov	r0, r5
   22558:	f7ff fee0 	bl	2231c <atomic_set_bit>
}
   2255c:	4620      	mov	r0, r4
   2255e:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   22560:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   22564:	e7ef      	b.n	22546 <smp_create_pdu.isra.0+0x14>
   22566:	2101      	movs	r1, #1
   22568:	3008      	adds	r0, #8
   2256a:	f000 fb2c 	bl	22bc6 <net_buf_simple_add>
	hdr->code = op;
   2256e:	7006      	strb	r6, [r0, #0]
	return buf;
   22570:	e7f4      	b.n	2255c <smp_create_pdu.isra.0+0x2a>

00022572 <smp_send_pairing_random>:
{
   22572:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   22574:	2104      	movs	r1, #4
{
   22576:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   22578:	f7ff ffdb 	bl	22532 <smp_create_pdu.isra.0>
	if (!rsp_buf) {
   2257c:	4605      	mov	r5, r0
   2257e:	b1a0      	cbz	r0, 225aa <smp_send_pairing_random+0x38>
   22580:	2110      	movs	r1, #16
   22582:	3008      	adds	r0, #8
   22584:	f000 fb1f 	bl	22bc6 <net_buf_simple_add>
   22588:	f104 03e7 	add.w	r3, r4, #231	; 0xe7
   2258c:	f104 02f7 	add.w	r2, r4, #247	; 0xf7
   22590:	f853 1b04 	ldr.w	r1, [r3], #4
   22594:	f840 1b04 	str.w	r1, [r0], #4
   22598:	4293      	cmp	r3, r2
   2259a:	d1f9      	bne.n	22590 <smp_send_pairing_random+0x1e>
	smp_send(smp, rsp_buf, NULL, NULL);
   2259c:	4620      	mov	r0, r4
   2259e:	2200      	movs	r2, #0
   225a0:	4629      	mov	r1, r5
   225a2:	f7e9 f967 	bl	b874 <smp_send.isra.0>
	return 0;
   225a6:	2000      	movs	r0, #0
}
   225a8:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   225aa:	2008      	movs	r0, #8
   225ac:	e7fc      	b.n	225a8 <smp_send_pairing_random+0x36>

000225ae <send_pairing_rsp>:
{
   225ae:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   225b0:	2102      	movs	r1, #2
{
   225b2:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   225b4:	f7ff ffbd 	bl	22532 <smp_create_pdu.isra.0>
	if (!rsp_buf) {
   225b8:	4604      	mov	r4, r0
   225ba:	b180      	cbz	r0, 225de <send_pairing_rsp+0x30>
   225bc:	2106      	movs	r1, #6
   225be:	3008      	adds	r0, #8
   225c0:	f000 fb01 	bl	22bc6 <net_buf_simple_add>
   225c4:	462b      	mov	r3, r5
	smp_send(smp, rsp_buf, NULL, NULL);
   225c6:	4621      	mov	r1, r4
   225c8:	f853 2fd1 	ldr.w	r2, [r3, #209]!
   225cc:	6002      	str	r2, [r0, #0]
   225ce:	889b      	ldrh	r3, [r3, #4]
   225d0:	8083      	strh	r3, [r0, #4]
   225d2:	2200      	movs	r2, #0
   225d4:	4628      	mov	r0, r5
   225d6:	f7e9 f94d 	bl	b874 <smp_send.isra.0>
	return 0;
   225da:	2000      	movs	r0, #0
}
   225dc:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   225de:	2008      	movs	r0, #8
   225e0:	e7fc      	b.n	225dc <send_pairing_rsp+0x2e>

000225e2 <smp_dhkey_check>:
{
   225e2:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   225e4:	6803      	ldr	r3, [r0, #0]
   225e6:	78db      	ldrb	r3, [r3, #3]
   225e8:	2b01      	cmp	r3, #1
{
   225ea:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   225ec:	d11a      	bne.n	22624 <smp_dhkey_check+0x42>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   225ee:	688d      	ldr	r5, [r1, #8]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   225f0:	f100 06c4 	add.w	r6, r0, #196	; 0xc4
   225f4:	2110      	movs	r1, #16
   225f6:	4630      	mov	r0, r6
   225f8:	f7ff feb6 	bl	22368 <atomic_clear_bit>
   225fc:	462b      	mov	r3, r5
   225fe:	f204 1277 	addw	r2, r4, #375	; 0x177
   22602:	f105 0110 	add.w	r1, r5, #16
   22606:	f853 0b04 	ldr.w	r0, [r3], #4
   2260a:	f842 0b04 	str.w	r0, [r2], #4
   2260e:	428b      	cmp	r3, r1
   22610:	d1f9      	bne.n	22606 <smp_dhkey_check+0x24>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   22612:	2107      	movs	r1, #7
   22614:	4630      	mov	r0, r6
   22616:	f7ff ff5e 	bl	224d6 <atomic_test_bit>
   2261a:	b128      	cbz	r0, 22628 <smp_dhkey_check+0x46>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2261c:	2109      	movs	r1, #9
   2261e:	4630      	mov	r0, r6
   22620:	f7ff fe7c 	bl	2231c <atomic_set_bit>
}
   22624:	2000      	movs	r0, #0
   22626:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   22628:	210a      	movs	r1, #10
   2262a:	4630      	mov	r0, r6
   2262c:	f7ff ff53 	bl	224d6 <atomic_test_bit>
   22630:	2800      	cmp	r0, #0
   22632:	d1f3      	bne.n	2261c <smp_dhkey_check+0x3a>
		return compute_and_check_and_send_slave_dhcheck(smp);
   22634:	4620      	mov	r0, r4
}
   22636:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_slave_dhcheck(smp);
   2263a:	f7e9 b941 	b.w	b8c0 <compute_and_check_and_send_slave_dhcheck>

0002263e <atomic_test_and_clear_bit>:
{
   2263e:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   22640:	2301      	movs	r3, #1
   22642:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   22646:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   22648:	f3bf 8f5b 	dmb	ish
   2264c:	e850 3f00 	ldrex	r3, [r0]
   22650:	ea03 0c02 	and.w	ip, r3, r2
   22654:	e840 ce00 	strex	lr, ip, [r0]
   22658:	f1be 0f00 	cmp.w	lr, #0
   2265c:	d1f6      	bne.n	2264c <atomic_test_and_clear_bit+0xe>
   2265e:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   22662:	420b      	tst	r3, r1
}
   22664:	bf14      	ite	ne
   22666:	2001      	movne	r0, #1
   22668:	2000      	moveq	r0, #0
   2266a:	f85d fb04 	ldr.w	pc, [sp], #4

0002266e <smp_reset>:
{
   2266e:	b510      	push	{r4, lr}
   22670:	4604      	mov	r4, r0
	k_delayed_work_cancel(&smp->work);
   22672:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
   22676:	f7ff fe66 	bl	22346 <k_delayed_work_cancel>
	smp->method = JUST_WORKS;
   2267a:	2300      	movs	r3, #0
   2267c:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
	atomic_set(smp->allowed_cmds, 0);
   22680:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   22684:	f3bf 8f5b 	dmb	ish
   22688:	e850 2f00 	ldrex	r2, [r0]
   2268c:	e840 3100 	strex	r1, r3, [r0]
   22690:	2900      	cmp	r1, #0
   22692:	d1f9      	bne.n	22688 <smp_reset+0x1a>
   22694:	f3bf 8f5b 	dmb	ish
   22698:	f3bf 8f5b 	dmb	ish
   2269c:	34c4      	adds	r4, #196	; 0xc4
   2269e:	e854 2f00 	ldrex	r2, [r4]
   226a2:	e844 3100 	strex	r1, r3, [r4]
   226a6:	2900      	cmp	r1, #0
   226a8:	d1f9      	bne.n	2269e <smp_reset+0x30>
   226aa:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   226ae:	2101      	movs	r1, #1
}
   226b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   226b4:	f7ff be32 	b.w	2231c <atomic_set_bit>

000226b8 <smp_c1>:
{
   226b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   226ba:	b089      	sub	sp, #36	; 0x24
   226bc:	e9dd 560e 	ldrd	r5, r6, [sp, #56]	; 0x38
   226c0:	4607      	mov	r7, r0
	p1[0] = ia->type;
   226c2:	7828      	ldrb	r0, [r5, #0]
   226c4:	f88d 0000 	strb.w	r0, [sp]
	p1[1] = ra->type;
   226c8:	7830      	ldrb	r0, [r6, #0]
   226ca:	f88d 0001 	strb.w	r0, [sp, #1]
	memcpy(p1 + 2, preq, 7);
   226ce:	6810      	ldr	r0, [r2, #0]
   226d0:	f8cd 0002 	str.w	r0, [sp, #2]
   226d4:	8890      	ldrh	r0, [r2, #4]
   226d6:	7992      	ldrb	r2, [r2, #6]
{
   226d8:	9c10      	ldr	r4, [sp, #64]	; 0x40
	memcpy(p1 + 2, preq, 7);
   226da:	f88d 2008 	strb.w	r2, [sp, #8]
	memcpy(p1 + 9, pres, 7);
   226de:	681a      	ldr	r2, [r3, #0]
   226e0:	f8cd 2009 	str.w	r2, [sp, #9]
   226e4:	889a      	ldrh	r2, [r3, #4]
   226e6:	799b      	ldrb	r3, [r3, #6]
	memcpy(p1 + 2, preq, 7);
   226e8:	f8ad 0006 	strh.w	r0, [sp, #6]
	memcpy(p1 + 9, pres, 7);
   226ec:	f8ad 200d 	strh.w	r2, [sp, #13]
   226f0:	f88d 300f 	strb.w	r3, [sp, #15]
	while (len--) {
   226f4:	f101 0c10 	add.w	ip, r1, #16
   226f8:	4620      	mov	r0, r4
   226fa:	466a      	mov	r2, sp
   226fc:	4561      	cmp	r1, ip
   226fe:	d124      	bne.n	2274a <smp_c1+0x92>
	err = bt_encrypt_le(k, enc_data, enc_data);
   22700:	4622      	mov	r2, r4
   22702:	4621      	mov	r1, r4
   22704:	4638      	mov	r0, r7
   22706:	f7ed fbb9 	bl	fe7c <bt_encrypt_le>
	if (err) {
   2270a:	4602      	mov	r2, r0
   2270c:	bb70      	cbnz	r0, 2276c <smp_c1+0xb4>
	memcpy(p2, ra->a.val, 6);
   2270e:	4633      	mov	r3, r6
	(void)memset(p2 + 12, 0, 4);
   22710:	9207      	str	r2, [sp, #28]
	memcpy(p2, ra->a.val, 6);
   22712:	f853 0f01 	ldr.w	r0, [r3, #1]!
   22716:	9004      	str	r0, [sp, #16]
   22718:	889b      	ldrh	r3, [r3, #4]
   2271a:	f8ad 3014 	strh.w	r3, [sp, #20]
	memcpy(p2 + 6, ia->a.val, 6);
   2271e:	462b      	mov	r3, r5
   22720:	f104 0010 	add.w	r0, r4, #16
   22724:	f853 1f01 	ldr.w	r1, [r3, #1]!
   22728:	f8cd 1016 	str.w	r1, [sp, #22]
   2272c:	889b      	ldrh	r3, [r3, #4]
   2272e:	f8ad 301a 	strh.w	r3, [sp, #26]
	while (len--) {
   22732:	a904      	add	r1, sp, #16
   22734:	4623      	mov	r3, r4
   22736:	4283      	cmp	r3, r0
   22738:	d110      	bne.n	2275c <smp_c1+0xa4>
	return bt_encrypt_le(k, enc_data, enc_data);
   2273a:	4622      	mov	r2, r4
   2273c:	4621      	mov	r1, r4
   2273e:	4638      	mov	r0, r7
}
   22740:	b009      	add	sp, #36	; 0x24
   22742:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_encrypt_le(k, enc_data, enc_data);
   22746:	f7ed bb99 	b.w	fe7c <bt_encrypt_le>
		*r++ = *p++ ^ *q++;
   2274a:	f811 3b01 	ldrb.w	r3, [r1], #1
   2274e:	f812 eb01 	ldrb.w	lr, [r2], #1
   22752:	ea83 030e 	eor.w	r3, r3, lr
   22756:	f800 3b01 	strb.w	r3, [r0], #1
   2275a:	e7cf      	b.n	226fc <smp_c1+0x44>
   2275c:	f813 2b01 	ldrb.w	r2, [r3], #1
   22760:	f811 5b01 	ldrb.w	r5, [r1], #1
   22764:	406a      	eors	r2, r5
   22766:	f803 2c01 	strb.w	r2, [r3, #-1]
   2276a:	e7e4      	b.n	22736 <smp_c1+0x7e>
}
   2276c:	b009      	add	sp, #36	; 0x24
   2276e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00022770 <legacy_pairing_confirm>:
{
   22770:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   22772:	f100 07c4 	add.w	r7, r0, #196	; 0xc4
{
   22776:	b085      	sub	sp, #20
   22778:	4605      	mov	r5, r0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2277a:	210a      	movs	r1, #10
   2277c:	4638      	mov	r0, r7
   2277e:	f7ff feaa 	bl	224d6 <atomic_test_bit>
   22782:	bb90      	cbnz	r0, 227ea <legacy_pairing_confirm+0x7a>
			atomic_set_bit(smp->allowed_cmds,
   22784:	2104      	movs	r1, #4
   22786:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
   2278a:	f7ff fdc7 	bl	2231c <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2278e:	2103      	movs	r1, #3
   22790:	4628      	mov	r0, r5
	struct bt_conn *conn = smp->chan.chan.conn;
   22792:	682c      	ldr	r4, [r5, #0]
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   22794:	f7ff fecd 	bl	22532 <smp_create_pdu.isra.0>
	if (!buf) {
   22798:	4606      	mov	r6, r0
   2279a:	b1c0      	cbz	r0, 227ce <legacy_pairing_confirm+0x5e>
   2279c:	2110      	movs	r1, #16
   2279e:	3008      	adds	r0, #8
   227a0:	f000 fa11 	bl	22bc6 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   227a4:	f104 0396 	add.w	r3, r4, #150	; 0x96
   227a8:	348f      	adds	r4, #143	; 0x8f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   227aa:	9002      	str	r0, [sp, #8]
   227ac:	9301      	str	r3, [sp, #4]
   227ae:	9400      	str	r4, [sp, #0]
   227b0:	f105 03d0 	add.w	r3, r5, #208	; 0xd0
   227b4:	f105 02c9 	add.w	r2, r5, #201	; 0xc9
   227b8:	f105 01e7 	add.w	r1, r5, #231	; 0xe7
   227bc:	f205 1007 	addw	r0, r5, #263	; 0x107
   227c0:	f7ff ff7a 	bl	226b8 <smp_c1>
   227c4:	4604      	mov	r4, r0
   227c6:	b120      	cbz	r0, 227d2 <legacy_pairing_confirm+0x62>
		net_buf_unref(buf);
   227c8:	4630      	mov	r0, r6
   227ca:	f7f7 ff17 	bl	1a5fc <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   227ce:	2008      	movs	r0, #8
   227d0:	e009      	b.n	227e6 <legacy_pairing_confirm+0x76>
	smp_send(smp, buf, NULL, NULL);
   227d2:	4602      	mov	r2, r0
   227d4:	4631      	mov	r1, r6
   227d6:	4628      	mov	r0, r5
   227d8:	f7e9 f84c 	bl	b874 <smp_send.isra.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   227dc:	4621      	mov	r1, r4
   227de:	4638      	mov	r0, r7
   227e0:	f7ff fdc2 	bl	22368 <atomic_clear_bit>
	return 0;
   227e4:	2000      	movs	r0, #0
}
   227e6:	b005      	add	sp, #20
   227e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   227ea:	2100      	movs	r1, #0
   227ec:	4638      	mov	r0, r7
   227ee:	f7ff fd95 	bl	2231c <atomic_set_bit>
   227f2:	e7f7      	b.n	227e4 <legacy_pairing_confirm+0x74>

000227f4 <bt_smp_request_ltk>:
{
   227f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   227f8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   227fc:	e9cd 2300 	strd	r2, r3, [sp]
   22800:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   22802:	f7e8 ffdf 	bl	b7c4 <smp_chan_get>
	if (!smp) {
   22806:	4605      	mov	r5, r0
   22808:	2800      	cmp	r0, #0
   2280a:	f000 8093 	beq.w	22934 <bt_smp_request_ltk+0x140>
	if (ediv == 0U && rand == 0U &&
   2280e:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   22812:	f100 07c4 	add.w	r7, r0, #196	; 0xc4
   22816:	f1b9 0f00 	cmp.w	r9, #0
   2281a:	d12c      	bne.n	22876 <bt_smp_request_ltk+0x82>
   2281c:	e9dd 2300 	ldrd	r2, r3, [sp]
   22820:	4313      	orrs	r3, r2
   22822:	d128      	bne.n	22876 <bt_smp_request_ltk+0x82>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   22824:	2103      	movs	r1, #3
   22826:	4638      	mov	r0, r7
   22828:	f7ff fe55 	bl	224d6 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   2282c:	b318      	cbz	r0, 22876 <bt_smp_request_ltk+0x82>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2282e:	2101      	movs	r1, #1
   22830:	4638      	mov	r0, r7
   22832:	f7ff fe50 	bl	224d6 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   22836:	4606      	mov	r6, r0
   22838:	b1e8      	cbz	r0, 22876 <bt_smp_request_ltk+0x82>
	return MIN(req->max_key_size, rsp->max_key_size);
   2283a:	f895 40d4 	ldrb.w	r4, [r5, #212]	; 0xd4
   2283e:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
   22842:	429c      	cmp	r4, r3
   22844:	bf28      	it	cs
   22846:	461c      	movcs	r4, r3
   22848:	4622      	mov	r2, r4
   2284a:	f205 1107 	addw	r1, r5, #263	; 0x107
   2284e:	4640      	mov	r0, r8
   22850:	f001 f9d5 	bl	23bfe <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   22854:	2c0f      	cmp	r4, #15
   22856:	d806      	bhi.n	22866 <bt_smp_request_ltk+0x72>
__ssp_bos_icheck3(memset, void *, int)
   22858:	f1c4 0210 	rsb	r2, r4, #16
   2285c:	4649      	mov	r1, r9
   2285e:	eb08 0004 	add.w	r0, r8, r4
   22862:	f001 f9da 	bl	23c1a <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   22866:	2101      	movs	r1, #1
   22868:	4638      	mov	r0, r7
   2286a:	f7ff fd57 	bl	2231c <atomic_set_bit>
}
   2286e:	4630      	mov	r0, r6
   22870:	b003      	add	sp, #12
   22872:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   22876:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   2287a:	b983      	cbnz	r3, 2289e <bt_smp_request_ltk+0xaa>
					     &conn->le.dst);
   2287c:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   22880:	7a21      	ldrb	r1, [r4, #8]
   22882:	4632      	mov	r2, r6
   22884:	2020      	movs	r0, #32
   22886:	f7ea fba9 	bl	cfdc <bt_keys_find>
   2288a:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   2288e:	b930      	cbnz	r0, 2289e <bt_smp_request_ltk+0xaa>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
   22890:	7a21      	ldrb	r1, [r4, #8]
   22892:	4632      	mov	r2, r6
   22894:	2001      	movs	r0, #1
   22896:	f7ea fba1 	bl	cfdc <bt_keys_find>
   2289a:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   2289e:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
   228a2:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   228a6:	b9ee      	cbnz	r6, 228e4 <bt_smp_request_ltk+0xf0>
   228a8:	e9dd 2300 	ldrd	r2, r3, [sp]
   228ac:	4313      	orrs	r3, r2
   228ae:	d119      	bne.n	228e4 <bt_smp_request_ltk+0xf0>
   228b0:	b388      	cbz	r0, 22916 <bt_smp_request_ltk+0x122>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   228b2:	89c3      	ldrh	r3, [r0, #14]
   228b4:	069a      	lsls	r2, r3, #26
   228b6:	d516      	bpl.n	228e6 <bt_smp_request_ltk+0xf2>
		enc_size = conn->le.keys->enc_size;
   228b8:	7b04      	ldrb	r4, [r0, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   228ba:	f100 011a 	add.w	r1, r0, #26
   228be:	4622      	mov	r2, r4
   228c0:	4640      	mov	r0, r8
   228c2:	f001 f99c 	bl	23bfe <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   228c6:	2c0f      	cmp	r4, #15
   228c8:	d806      	bhi.n	228d8 <bt_smp_request_ltk+0xe4>
__ssp_bos_icheck3(memset, void *, int)
   228ca:	f1c4 0210 	rsb	r2, r4, #16
   228ce:	4631      	mov	r1, r6
   228d0:	eb08 0004 	add.w	r0, r8, r4
   228d4:	f001 f9a1 	bl	23c1a <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   228d8:	2101      	movs	r1, #1
   228da:	4638      	mov	r0, r7
   228dc:	f7ff fd1e 	bl	2231c <atomic_set_bit>
		return true;
   228e0:	2601      	movs	r6, #1
   228e2:	e7c4      	b.n	2286e <bt_smp_request_ltk+0x7a>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   228e4:	b1b8      	cbz	r0, 22916 <bt_smp_request_ltk+0x122>
   228e6:	89c3      	ldrh	r3, [r0, #14]
   228e8:	07db      	lsls	r3, r3, #31
   228ea:	d514      	bpl.n	22916 <bt_smp_request_ltk+0x122>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   228ec:	2208      	movs	r2, #8
   228ee:	4669      	mov	r1, sp
   228f0:	3040      	adds	r0, #64	; 0x40
   228f2:	f001 f976 	bl	23be2 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   228f6:	b970      	cbnz	r0, 22916 <bt_smp_request_ltk+0x122>
	    !memcmp(conn->le.keys->slave_ltk.ediv, &ediv, 2)) {
   228f8:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   228fc:	2202      	movs	r2, #2
   228fe:	a90a      	add	r1, sp, #40	; 0x28
   22900:	3048      	adds	r0, #72	; 0x48
   22902:	f001 f96e 	bl	23be2 <memcmp>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   22906:	4606      	mov	r6, r0
   22908:	b928      	cbnz	r0, 22916 <bt_smp_request_ltk+0x122>
		enc_size = conn->le.keys->enc_size;
   2290a:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   2290e:	7b0c      	ldrb	r4, [r1, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   22910:	314a      	adds	r1, #74	; 0x4a
   22912:	4622      	mov	r2, r4
   22914:	e7d4      	b.n	228c0 <bt_smp_request_ltk+0xcc>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   22916:	210f      	movs	r1, #15
   22918:	4638      	mov	r0, r7
   2291a:	f7ff fddc 	bl	224d6 <atomic_test_bit>
   2291e:	b120      	cbz	r0, 2292a <bt_smp_request_ltk+0x136>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   22920:	2202      	movs	r2, #2
   22922:	2106      	movs	r1, #6
   22924:	4620      	mov	r0, r4
   22926:	f7e6 facb 	bl	8ec0 <bt_conn_security_changed>
	smp_reset(smp);
   2292a:	4628      	mov	r0, r5
   2292c:	f7ff fe9f 	bl	2266e <smp_reset>
	return false;
   22930:	2600      	movs	r6, #0
   22932:	e79c      	b.n	2286e <bt_smp_request_ltk+0x7a>
		return false;
   22934:	4606      	mov	r6, r0
   22936:	e79a      	b.n	2286e <bt_smp_request_ltk+0x7a>

00022938 <bt_smp_sign>:
   22938:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2293c:	4770      	bx	lr

0002293e <smp_error>:
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2293e:	f100 03c4 	add.w	r3, r0, #196	; 0xc4
{
   22942:	b573      	push	{r0, r1, r4, r5, r6, lr}
   22944:	4605      	mov	r5, r0
   22946:	460c      	mov	r4, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   22948:	4618      	mov	r0, r3
   2294a:	2103      	movs	r1, #3
   2294c:	f7ff fdc3 	bl	224d6 <atomic_test_bit>
   22950:	b1c8      	cbz	r0, 22986 <smp_error+0x48>
		smp_pairing_complete(smp, reason);
   22952:	4621      	mov	r1, r4
   22954:	4628      	mov	r0, r5
   22956:	f7e9 fee9 	bl	c72c <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   2295a:	2105      	movs	r1, #5
   2295c:	4628      	mov	r0, r5
   2295e:	f7ff fde8 	bl	22532 <smp_create_pdu.isra.0>
	if (!buf) {
   22962:	4606      	mov	r6, r0
   22964:	b1e0      	cbz	r0, 229a0 <smp_error+0x62>
   22966:	2101      	movs	r1, #1
   22968:	3008      	adds	r0, #8
   2296a:	f000 f92c 	bl	22bc6 <net_buf_simple_add>
	rsp->reason = reason;
   2296e:	7004      	strb	r4, [r0, #0]
   22970:	2400      	movs	r4, #0
   22972:	6828      	ldr	r0, [r5, #0]
   22974:	9400      	str	r4, [sp, #0]
   22976:	4623      	mov	r3, r4
   22978:	4632      	mov	r2, r6
   2297a:	2106      	movs	r1, #6
   2297c:	f7fe fe93 	bl	216a6 <bt_l2cap_send_cb>
	return 0;
   22980:	4620      	mov	r0, r4
}
   22982:	b002      	add	sp, #8
   22984:	bd70      	pop	{r4, r5, r6, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   22986:	2101      	movs	r1, #1
   22988:	4618      	mov	r0, r3
   2298a:	f7ff fda4 	bl	224d6 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2298e:	2800      	cmp	r0, #0
   22990:	d1df      	bne.n	22952 <smp_error+0x14>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   22992:	210f      	movs	r1, #15
   22994:	4618      	mov	r0, r3
   22996:	f7ff fd9e 	bl	224d6 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2299a:	2800      	cmp	r0, #0
   2299c:	d1d9      	bne.n	22952 <smp_error+0x14>
   2299e:	e7dc      	b.n	2295a <smp_error+0x1c>
		return -ENOBUFS;
   229a0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   229a4:	e7ed      	b.n	22982 <smp_error+0x44>

000229a6 <bt_smp_dhkey_ready>:
{
   229a6:	b570      	push	{r4, r5, r6, lr}
   229a8:	4604      	mov	r4, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   229aa:	2008      	movs	r0, #8
   229ac:	f7e8 ff7a 	bl	b8a4 <smp_find>
	if (smp) {
   229b0:	4605      	mov	r5, r0
   229b2:	b1e8      	cbz	r0, 229f0 <bt_smp_dhkey_ready+0x4a>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   229b4:	f100 06c4 	add.w	r6, r0, #196	; 0xc4
   229b8:	2108      	movs	r1, #8
   229ba:	4630      	mov	r0, r6
   229bc:	f7ff fcd4 	bl	22368 <atomic_clear_bit>
	if (!dhkey) {
   229c0:	b3bc      	cbz	r4, 22a32 <bt_smp_dhkey_ready+0x8c>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   229c2:	2107      	movs	r1, #7
   229c4:	f7ff fcd0 	bl	22368 <atomic_clear_bit>
   229c8:	4623      	mov	r3, r4
   229ca:	f205 1257 	addw	r2, r5, #343	; 0x157
   229ce:	f104 0120 	add.w	r1, r4, #32
   229d2:	f853 0b04 	ldr.w	r0, [r3], #4
   229d6:	f842 0b04 	str.w	r0, [r2], #4
   229da:	428b      	cmp	r3, r1
   229dc:	d1f9      	bne.n	229d2 <bt_smp_dhkey_ready+0x2c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   229de:	210a      	movs	r1, #10
   229e0:	4630      	mov	r0, r6
   229e2:	f7ff fd78 	bl	224d6 <atomic_test_bit>
   229e6:	b170      	cbz	r0, 22a06 <bt_smp_dhkey_ready+0x60>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   229e8:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   229ea:	4630      	mov	r0, r6
   229ec:	f7ff fc96 	bl	2231c <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   229f0:	2007      	movs	r0, #7
   229f2:	f7e8 ff57 	bl	b8a4 <smp_find>
		if (smp) {
   229f6:	4604      	mov	r4, r0
   229f8:	b1e8      	cbz	r0, 22a36 <bt_smp_dhkey_ready+0x90>
			err = smp_dhkey_generate(smp);
   229fa:	f7e8 fe9f 	bl	b73c <smp_dhkey_generate>
			if (err) {
   229fe:	4601      	mov	r1, r0
   22a00:	b1c8      	cbz	r0, 22a36 <bt_smp_dhkey_ready+0x90>
				smp_error(smp, err);
   22a02:	4620      	mov	r0, r4
   22a04:	e012      	b.n	22a2c <bt_smp_dhkey_ready+0x86>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   22a06:	2110      	movs	r1, #16
   22a08:	4630      	mov	r0, r6
   22a0a:	f7ff fd64 	bl	224d6 <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   22a0e:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   22a10:	2800      	cmp	r0, #0
   22a12:	d1ea      	bne.n	229ea <bt_smp_dhkey_ready+0x44>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   22a14:	4630      	mov	r0, r6
   22a16:	f7ff fd5e 	bl	224d6 <atomic_test_bit>
   22a1a:	2800      	cmp	r0, #0
   22a1c:	d0e8      	beq.n	229f0 <bt_smp_dhkey_ready+0x4a>
		return  compute_and_check_and_send_slave_dhcheck(smp);
   22a1e:	4628      	mov	r0, r5
   22a20:	f7e8 ff4e 	bl	b8c0 <compute_and_check_and_send_slave_dhcheck>
		if (err) {
   22a24:	4601      	mov	r1, r0
   22a26:	2800      	cmp	r0, #0
   22a28:	d0e2      	beq.n	229f0 <bt_smp_dhkey_ready+0x4a>
			smp_error(smp, err);
   22a2a:	4628      	mov	r0, r5
   22a2c:	f7ff ff87 	bl	2293e <smp_error>
   22a30:	e7de      	b.n	229f0 <bt_smp_dhkey_ready+0x4a>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   22a32:	210b      	movs	r1, #11
   22a34:	e7f9      	b.n	22a2a <bt_smp_dhkey_ready+0x84>
}
   22a36:	bd70      	pop	{r4, r5, r6, pc}

00022a38 <bt_smp_disconnected>:
{
   22a38:	b538      	push	{r3, r4, r5, lr}
	struct bt_keys *keys = chan->conn->le.keys;
   22a3a:	6803      	ldr	r3, [r0, #0]
{
   22a3c:	4604      	mov	r4, r0
	k_delayed_work_cancel(&smp->work);
   22a3e:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
	struct bt_keys *keys = chan->conn->le.keys;
   22a42:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
	k_delayed_work_cancel(&smp->work);
   22a46:	f7ff fc7e 	bl	22346 <k_delayed_work_cancel>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   22a4a:	f104 03c4 	add.w	r3, r4, #196	; 0xc4
   22a4e:	2103      	movs	r1, #3
   22a50:	4618      	mov	r0, r3
   22a52:	f7ff fd40 	bl	224d6 <atomic_test_bit>
   22a56:	b1a0      	cbz	r0, 22a82 <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   22a58:	2108      	movs	r1, #8
   22a5a:	4620      	mov	r0, r4
   22a5c:	f7e9 fe66 	bl	c72c <smp_pairing_complete>
	if (keys) {
   22a60:	b13d      	cbz	r5, 22a72 <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   22a62:	89eb      	ldrh	r3, [r5, #14]
   22a64:	b113      	cbz	r3, 22a6c <bt_smp_disconnected+0x34>
   22a66:	7b6b      	ldrb	r3, [r5, #13]
   22a68:	079b      	lsls	r3, r3, #30
   22a6a:	d502      	bpl.n	22a72 <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   22a6c:	4628      	mov	r0, r5
   22a6e:	f000 f845 	bl	22afc <bt_keys_clear>
__ssp_bos_icheck3(memset, void *, int)
   22a72:	4620      	mov	r0, r4
   22a74:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
}
   22a78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   22a7c:	2100      	movs	r1, #0
   22a7e:	f001 b8cc 	b.w	23c1a <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   22a82:	2101      	movs	r1, #1
   22a84:	4618      	mov	r0, r3
   22a86:	f7ff fd26 	bl	224d6 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   22a8a:	2800      	cmp	r0, #0
   22a8c:	d1e4      	bne.n	22a58 <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   22a8e:	210f      	movs	r1, #15
   22a90:	4618      	mov	r0, r3
   22a92:	f7ff fd20 	bl	224d6 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   22a96:	2800      	cmp	r0, #0
   22a98:	d1de      	bne.n	22a58 <bt_smp_disconnected+0x20>
   22a9a:	e7e1      	b.n	22a60 <bt_smp_disconnected+0x28>

00022a9c <smp_ident_sent>:
{
   22a9c:	b508      	push	{r3, lr}
	if (conn->type == BT_CONN_TYPE_LE) {
   22a9e:	7883      	ldrb	r3, [r0, #2]
   22aa0:	2b01      	cmp	r3, #1
   22aa2:	d10f      	bne.n	22ac4 <smp_ident_sent+0x28>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   22aa4:	2106      	movs	r1, #6
   22aa6:	f7fe fe17 	bl	216d8 <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   22aaa:	f890 21a8 	ldrb.w	r2, [r0, #424]	; 0x1a8
   22aae:	f022 0201 	bic.w	r2, r2, #1
   22ab2:	f880 21a8 	strb.w	r2, [r0, #424]	; 0x1a8
		if (!smp->local_dist && !smp->remote_dist) {
   22ab6:	f8b0 11a8 	ldrh.w	r1, [r0, #424]	; 0x1a8
   22aba:	b919      	cbnz	r1, 22ac4 <smp_ident_sent+0x28>
}
   22abc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			smp_pairing_complete(smp, 0);
   22ac0:	f7e9 be34 	b.w	c72c <smp_pairing_complete>
}
   22ac4:	bd08      	pop	{r3, pc}

00022ac6 <bt_addr_le_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   22ac6:	680b      	ldr	r3, [r1, #0]
   22ac8:	6003      	str	r3, [r0, #0]
   22aca:	888b      	ldrh	r3, [r1, #4]
   22acc:	8083      	strh	r3, [r0, #4]
   22ace:	798b      	ldrb	r3, [r1, #6]
   22ad0:	7183      	strb	r3, [r0, #6]
   22ad2:	4770      	bx	lr

00022ad4 <bt_keys_get_type>:
{
   22ad4:	b570      	push	{r4, r5, r6, lr}
   22ad6:	4604      	mov	r4, r0
   22ad8:	460d      	mov	r5, r1
   22ada:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   22adc:	f7ea fa7e 	bl	cfdc <bt_keys_find>
	if (keys) {
   22ae0:	b938      	cbnz	r0, 22af2 <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   22ae2:	4631      	mov	r1, r6
   22ae4:	4628      	mov	r0, r5
   22ae6:	f7ea fa43 	bl	cf70 <bt_keys_get_addr>
	if (!keys) {
   22aea:	b110      	cbz	r0, 22af2 <bt_keys_get_type+0x1e>

void bt_keys_add_type(struct bt_keys *keys, int type)
{
	keys->keys |= type;
   22aec:	89c3      	ldrh	r3, [r0, #14]
   22aee:	431c      	orrs	r4, r3
   22af0:	81c4      	strh	r4, [r0, #14]
}
   22af2:	bd70      	pop	{r4, r5, r6, pc}

00022af4 <bt_keys_add_type>:
	keys->keys |= type;
   22af4:	89c3      	ldrh	r3, [r0, #14]
   22af6:	4319      	orrs	r1, r3
   22af8:	81c1      	strh	r1, [r0, #14]
}
   22afa:	4770      	bx	lr

00022afc <bt_keys_clear>:

void bt_keys_clear(struct bt_keys *keys)
{
   22afc:	b510      	push	{r4, lr}
	BT_DBG("%s (keys 0x%04x)", bt_addr_le_str(&keys->addr), keys->keys);

	if (keys->state & BT_KEYS_ID_ADDED) {
   22afe:	7a03      	ldrb	r3, [r0, #8]
   22b00:	075b      	lsls	r3, r3, #29
{
   22b02:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   22b04:	d501      	bpl.n	22b0a <bt_keys_clear+0xe>
		bt_id_del(keys);
   22b06:	f7e5 fa65 	bl	7fd4 <bt_id_del>
__ssp_bos_icheck3(memset, void *, int)
   22b0a:	4620      	mov	r0, r4
   22b0c:	225c      	movs	r2, #92	; 0x5c
		BT_DBG("Deleting key %s", log_strdup(key));
		settings_delete(key);
	}

	(void)memset(keys, 0, sizeof(*keys));
}
   22b0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   22b12:	2100      	movs	r1, #0
   22b14:	f001 b881 	b.w	23c1a <memset>

00022b18 <fixed_data_unref>:
}
   22b18:	4770      	bx	lr

00022b1a <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   22b1a:	6a01      	ldr	r1, [r0, #32]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   22b1c:	6849      	ldr	r1, [r1, #4]
   22b1e:	6809      	ldr	r1, [r1, #0]
   22b20:	f7f7 bce0 	b.w	1a4e4 <net_buf_alloc_len>

00022b24 <net_buf_get>:
{
   22b24:	b570      	push	{r4, r5, r6, lr}
   22b26:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   22b28:	f7fa fc8a 	bl	1d440 <z_impl_k_queue_get>
	if (!buf) {
   22b2c:	4605      	mov	r5, r0
   22b2e:	b128      	cbz	r0, 22b3c <net_buf_get+0x18>
   22b30:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   22b32:	7963      	ldrb	r3, [r4, #5]
   22b34:	f013 0301 	ands.w	r3, r3, #1
   22b38:	d102      	bne.n	22b40 <net_buf_get+0x1c>
	frag->frags = NULL;
   22b3a:	6023      	str	r3, [r4, #0]
}
   22b3c:	4628      	mov	r0, r5
   22b3e:	bd70      	pop	{r4, r5, r6, pc}
   22b40:	2300      	movs	r3, #0
   22b42:	2200      	movs	r2, #0
   22b44:	4630      	mov	r0, r6
   22b46:	f7fa fc7b 	bl	1d440 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   22b4a:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   22b4c:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   22b4e:	f023 0301 	bic.w	r3, r3, #1
   22b52:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   22b54:	4604      	mov	r4, r0
   22b56:	e7ec      	b.n	22b32 <net_buf_get+0xe>

00022b58 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   22b58:	6883      	ldr	r3, [r0, #8]
   22b5a:	440b      	add	r3, r1
   22b5c:	6003      	str	r3, [r0, #0]
}
   22b5e:	4770      	bx	lr

00022b60 <net_buf_put>:
{
   22b60:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   22b62:	460a      	mov	r2, r1
   22b64:	6814      	ldr	r4, [r2, #0]
   22b66:	b914      	cbnz	r4, 22b6e <net_buf_put+0xe>
}
   22b68:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   22b6a:	f000 bc26 	b.w	233ba <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   22b6e:	7953      	ldrb	r3, [r2, #5]
   22b70:	f043 0301 	orr.w	r3, r3, #1
   22b74:	7153      	strb	r3, [r2, #5]
   22b76:	4622      	mov	r2, r4
   22b78:	e7f4      	b.n	22b64 <net_buf_put+0x4>

00022b7a <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   22b7a:	7902      	ldrb	r2, [r0, #4]
   22b7c:	3201      	adds	r2, #1
   22b7e:	7102      	strb	r2, [r0, #4]
	return buf;
}
   22b80:	4770      	bx	lr

00022b82 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   22b82:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   22b84:	4618      	mov	r0, r3
   22b86:	681b      	ldr	r3, [r3, #0]
   22b88:	2b00      	cmp	r3, #0
   22b8a:	d1fb      	bne.n	22b84 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   22b8c:	4770      	bx	lr

00022b8e <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   22b8e:	6802      	ldr	r2, [r0, #0]
{
   22b90:	b510      	push	{r4, lr}
	if (parent->frags) {
   22b92:	b12a      	cbz	r2, 22ba0 <net_buf_frag_insert+0x12>
   22b94:	460b      	mov	r3, r1
	while (buf->frags) {
   22b96:	461c      	mov	r4, r3
   22b98:	681b      	ldr	r3, [r3, #0]
   22b9a:	2b00      	cmp	r3, #0
   22b9c:	d1fb      	bne.n	22b96 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   22b9e:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   22ba0:	6001      	str	r1, [r0, #0]
}
   22ba2:	bd10      	pop	{r4, pc}

00022ba4 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   22ba4:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   22ba6:	4604      	mov	r4, r0
   22ba8:	b920      	cbnz	r0, 22bb4 <net_buf_frag_add+0x10>
	buf->ref++;
   22baa:	790b      	ldrb	r3, [r1, #4]
   22bac:	3301      	adds	r3, #1
   22bae:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   22bb0:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   22bb2:	bd10      	pop	{r4, pc}
   22bb4:	4603      	mov	r3, r0
	while (buf->frags) {
   22bb6:	4618      	mov	r0, r3
   22bb8:	681b      	ldr	r3, [r3, #0]
   22bba:	2b00      	cmp	r3, #0
   22bbc:	d1fb      	bne.n	22bb6 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   22bbe:	f7ff ffe6 	bl	22b8e <net_buf_frag_insert>
   22bc2:	4620      	mov	r0, r4
   22bc4:	e7f5      	b.n	22bb2 <net_buf_frag_add+0xe>

00022bc6 <net_buf_simple_add>:
	return buf->data + buf->len;
   22bc6:	8883      	ldrh	r3, [r0, #4]
   22bc8:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   22bca:	4419      	add	r1, r3
   22bcc:	8081      	strh	r1, [r0, #4]
	return tail;
}
   22bce:	18d0      	adds	r0, r2, r3
   22bd0:	4770      	bx	lr

00022bd2 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   22bd2:	b510      	push	{r4, lr}
   22bd4:	6803      	ldr	r3, [r0, #0]
   22bd6:	8884      	ldrh	r4, [r0, #4]
   22bd8:	4423      	add	r3, r4
	buf->len += len;
   22bda:	4414      	add	r4, r2
   22bdc:	8084      	strh	r4, [r0, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   22bde:	4618      	mov	r0, r3
   22be0:	f001 f80d 	bl	23bfe <memcpy>
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
}
   22be4:	bd10      	pop	{r4, pc}

00022be6 <net_buf_simple_add_u8>:
   22be6:	8883      	ldrh	r3, [r0, #4]
   22be8:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   22bea:	b510      	push	{r4, lr}
	buf->len += len;
   22bec:	1c5c      	adds	r4, r3, #1
   22bee:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   22bf0:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   22bf2:	18d0      	adds	r0, r2, r3
   22bf4:	bd10      	pop	{r4, pc}

00022bf6 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   22bf6:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   22bf8:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   22bfa:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   22bfc:	1a40      	subs	r0, r0, r1
	buf->len += len;
   22bfe:	4411      	add	r1, r2
	buf->data -= len;
   22c00:	6018      	str	r0, [r3, #0]
	buf->len += len;
   22c02:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   22c04:	4770      	bx	lr

00022c06 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   22c06:	8882      	ldrh	r2, [r0, #4]
   22c08:	1a52      	subs	r2, r2, r1
{
   22c0a:	4603      	mov	r3, r0
	buf->len -= len;
   22c0c:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   22c0e:	6800      	ldr	r0, [r0, #0]
   22c10:	4408      	add	r0, r1
   22c12:	6018      	str	r0, [r3, #0]
}
   22c14:	4770      	bx	lr

00022c16 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   22c16:	4603      	mov	r3, r0
	void *data = buf->data;
   22c18:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   22c1a:	889a      	ldrh	r2, [r3, #4]
   22c1c:	1a52      	subs	r2, r2, r1
	buf->data += len;
   22c1e:	4401      	add	r1, r0
	buf->len -= len;
   22c20:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   22c22:	6019      	str	r1, [r3, #0]

	return data;
}
   22c24:	4770      	bx	lr

00022c26 <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   22c26:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   22c28:	6803      	ldr	r3, [r0, #0]
   22c2a:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   22c2c:	2102      	movs	r1, #2
   22c2e:	f7ff ffea 	bl	22c06 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   22c32:	4620      	mov	r0, r4
   22c34:	bd10      	pop	{r4, pc}

00022c36 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   22c36:	6802      	ldr	r2, [r0, #0]
   22c38:	6880      	ldr	r0, [r0, #8]
}
   22c3a:	1a10      	subs	r0, r2, r0
   22c3c:	4770      	bx	lr

00022c3e <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   22c3e:	8883      	ldrh	r3, [r0, #4]
   22c40:	88c2      	ldrh	r2, [r0, #6]
   22c42:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   22c44:	6803      	ldr	r3, [r0, #0]
   22c46:	6880      	ldr	r0, [r0, #8]
   22c48:	1a18      	subs	r0, r3, r0
}
   22c4a:	1a10      	subs	r0, r2, r0
   22c4c:	4770      	bx	lr

00022c4e <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
   22c4e:	b570      	push	{r4, r5, r6, lr}
   22c50:	460e      	mov	r6, r1
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   22c52:	6801      	ldr	r1, [r0, #0]
{
   22c54:	4615      	mov	r5, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   22c56:	b189      	cbz	r1, 22c7c <gpio_fire_callbacks+0x2e>
	return node->next;
   22c58:	680c      	ldr	r4, [r1, #0]
   22c5a:	2c00      	cmp	r4, #0
   22c5c:	bf38      	it	cc
   22c5e:	2400      	movcc	r4, #0
		if (cb->pin_mask & pins) {
   22c60:	688a      	ldr	r2, [r1, #8]
   22c62:	402a      	ands	r2, r5
   22c64:	d002      	beq.n	22c6c <gpio_fire_callbacks+0x1e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   22c66:	684b      	ldr	r3, [r1, #4]
   22c68:	4630      	mov	r0, r6
   22c6a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   22c6c:	b134      	cbz	r4, 22c7c <gpio_fire_callbacks+0x2e>
   22c6e:	6823      	ldr	r3, [r4, #0]
   22c70:	2b00      	cmp	r3, #0
   22c72:	bf38      	it	cc
   22c74:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   22c76:	4621      	mov	r1, r4
   22c78:	461c      	mov	r4, r3
   22c7a:	e7f1      	b.n	22c60 <gpio_fire_callbacks+0x12>
		}
	}
}
   22c7c:	bd70      	pop	{r4, r5, r6, pc}

00022c7e <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   22c7e:	6843      	ldr	r3, [r0, #4]
   22c80:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   22c82:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   22c86:	600b      	str	r3, [r1, #0]
}
   22c88:	2000      	movs	r0, #0
   22c8a:	4770      	bx	lr

00022c8c <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   22c8c:	6843      	ldr	r3, [r0, #4]
   22c8e:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   22c90:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   22c94:	4042      	eors	r2, r0
   22c96:	400a      	ands	r2, r1
   22c98:	4042      	eors	r2, r0
    p_reg->OUT = value;
   22c9a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   22c9e:	2000      	movs	r0, #0
   22ca0:	4770      	bx	lr

00022ca2 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   22ca2:	6843      	ldr	r3, [r0, #4]
   22ca4:	685b      	ldr	r3, [r3, #4]
}
   22ca6:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   22ca8:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   22cac:	4770      	bx	lr

00022cae <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   22cae:	6843      	ldr	r3, [r0, #4]
   22cb0:	685b      	ldr	r3, [r3, #4]
}
   22cb2:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   22cb4:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   22cb8:	4770      	bx	lr

00022cba <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   22cba:	6843      	ldr	r3, [r0, #4]
   22cbc:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   22cbe:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   22cc2:	404b      	eors	r3, r1
    p_reg->OUT = value;
   22cc4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   22cc8:	2000      	movs	r0, #0
   22cca:	4770      	bx	lr

00022ccc <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   22ccc:	6903      	ldr	r3, [r0, #16]
Z_GENLIST_IS_EMPTY(slist)
   22cce:	6858      	ldr	r0, [r3, #4]
{
   22cd0:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   22cd2:	b158      	cbz	r0, 22cec <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   22cd4:	2400      	movs	r4, #0
   22cd6:	4281      	cmp	r1, r0
   22cd8:	d113      	bne.n	22d02 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   22cda:	6808      	ldr	r0, [r1, #0]
   22cdc:	b95c      	cbnz	r4, 22cf6 <gpio_nrfx_manage_callback+0x2a>
   22cde:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   22ce0:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   22ce2:	42a1      	cmp	r1, r4
   22ce4:	d100      	bne.n	22ce8 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   22ce6:	6098      	str	r0, [r3, #8]
	parent->next = child;
   22ce8:	2000      	movs	r0, #0
   22cea:	6008      	str	r0, [r1, #0]
	if (set) {
   22cec:	b972      	cbnz	r2, 22d0c <gpio_nrfx_manage_callback+0x40>
	return 0;
   22cee:	2000      	movs	r0, #0
}
   22cf0:	bd30      	pop	{r4, r5, pc}
   22cf2:	4628      	mov	r0, r5
   22cf4:	e7ef      	b.n	22cd6 <gpio_nrfx_manage_callback+0xa>
   22cf6:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   22cf8:	6898      	ldr	r0, [r3, #8]
   22cfa:	4281      	cmp	r1, r0
	list->tail = node;
   22cfc:	bf08      	it	eq
   22cfe:	609c      	streq	r4, [r3, #8]
}
   22d00:	e7f2      	b.n	22ce8 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   22d02:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   22d04:	4604      	mov	r4, r0
   22d06:	2d00      	cmp	r5, #0
   22d08:	d1f3      	bne.n	22cf2 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   22d0a:	b13a      	cbz	r2, 22d1c <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   22d0c:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   22d0e:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   22d10:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   22d12:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   22d14:	2800      	cmp	r0, #0
   22d16:	d1ea      	bne.n	22cee <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   22d18:	6099      	str	r1, [r3, #8]
}
   22d1a:	e7e9      	b.n	22cf0 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   22d1c:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   22d20:	e7e6      	b.n	22cf0 <gpio_nrfx_manage_callback+0x24>

00022d22 <cfg_level_pins>:
{
   22d22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct gpio_nrfx_data *data = get_port_data(port);
   22d26:	6907      	ldr	r7, [r0, #16]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   22d28:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   22d2c:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   22d2e:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
   22d32:	4313      	orrs	r3, r2
   22d34:	ea24 0403 	bic.w	r4, r4, r3
	uint32_t bit = 1U << pin;
   22d38:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   22d3a:	2500      	movs	r5, #0
	while (level_pins) {
   22d3c:	b90c      	cbnz	r4, 22d42 <cfg_level_pins+0x20>
}
   22d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   22d42:	4226      	tst	r6, r4
   22d44:	d010      	beq.n	22d68 <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   22d46:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   22d48:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   22d4c:	40e9      	lsrs	r1, r5
   22d4e:	f001 0101 	and.w	r1, r1, #1
   22d52:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   22d56:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   22d5a:	b2c9      	uxtb	r1, r1
   22d5c:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   22d60:	f7f7 fcf8 	bl	1a754 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   22d64:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   22d68:	3501      	adds	r5, #1
		bit <<= 1;
   22d6a:	0076      	lsls	r6, r6, #1
   22d6c:	e7e6      	b.n	22d3c <cfg_level_pins+0x1a>

00022d6e <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   22d6e:	2301      	movs	r3, #1
   22d70:	fa03 f101 	lsl.w	r1, r3, r1
   22d74:	6903      	ldr	r3, [r0, #16]
   22d76:	681b      	ldr	r3, [r3, #0]
   22d78:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   22d7a:	bf18      	it	ne
   22d7c:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   22d80:	b112      	cbz	r2, 22d88 <gpio_pin_set+0x1a>
	return api->port_set_bits_raw(port, pins);
   22d82:	6883      	ldr	r3, [r0, #8]
   22d84:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   22d86:	4718      	bx	r3
   22d88:	6883      	ldr	r3, [r0, #8]
   22d8a:	691b      	ldr	r3, [r3, #16]
   22d8c:	e7fb      	b.n	22d86 <gpio_pin_set+0x18>

00022d8e <_spi_context_cs_control.isra.0>:
static inline void _spi_context_cs_control(struct spi_context *ctx,
   22d8e:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   22d90:	6805      	ldr	r5, [r0, #0]
static inline void _spi_context_cs_control(struct spi_context *ctx,
   22d92:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   22d94:	b1fd      	cbz	r5, 22dd6 <_spi_context_cs_control.isra.0+0x48>
   22d96:	68ab      	ldr	r3, [r5, #8]
   22d98:	b1eb      	cbz	r3, 22dd6 <_spi_context_cs_control.isra.0+0x48>
   22d9a:	6818      	ldr	r0, [r3, #0]
   22d9c:	b1d8      	cbz	r0, 22dd6 <_spi_context_cs_control.isra.0+0x48>
		if (on) {
   22d9e:	b151      	cbz	r1, 22db6 <_spi_context_cs_control.isra.0+0x28>
			gpio_pin_set(ctx->config->cs->gpio_dev,
   22da0:	7a19      	ldrb	r1, [r3, #8]
   22da2:	2201      	movs	r2, #1
   22da4:	f7ff ffe3 	bl	22d6e <gpio_pin_set>
			k_busy_wait(ctx->config->cs->delay);
   22da8:	6823      	ldr	r3, [r4, #0]
   22daa:	689b      	ldr	r3, [r3, #8]
   22dac:	6858      	ldr	r0, [r3, #4]
}
   22dae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   22db2:	f000 bc6c 	b.w	2368e <z_impl_k_busy_wait>
			if (!force_off &&
   22db6:	b912      	cbnz	r2, 22dbe <_spi_context_cs_control.isra.0+0x30>
   22db8:	88aa      	ldrh	r2, [r5, #4]
   22dba:	0492      	lsls	r2, r2, #18
   22dbc:	d40b      	bmi.n	22dd6 <_spi_context_cs_control.isra.0+0x48>
			k_busy_wait(ctx->config->cs->delay);
   22dbe:	6858      	ldr	r0, [r3, #4]
   22dc0:	f000 fc65 	bl	2368e <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
   22dc4:	6823      	ldr	r3, [r4, #0]
   22dc6:	689b      	ldr	r3, [r3, #8]
   22dc8:	2200      	movs	r2, #0
   22dca:	7a19      	ldrb	r1, [r3, #8]
   22dcc:	6818      	ldr	r0, [r3, #0]
}
   22dce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set(ctx->config->cs->gpio_dev,
   22dd2:	f7ff bfcc 	b.w	22d6e <gpio_pin_set>
}
   22dd6:	bd38      	pop	{r3, r4, r5, pc}

00022dd8 <spi_context_unlock_unconditionally>:
{
   22dd8:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   22dda:	2201      	movs	r2, #1
   22ddc:	2100      	movs	r1, #0
{
   22dde:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   22de0:	f7ff ffd5 	bl	22d8e <_spi_context_cs_control.isra.0>
	if (!k_sem_count_get(&ctx->lock)) {
   22de4:	6923      	ldr	r3, [r4, #16]
   22de6:	b933      	cbnz	r3, 22df6 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   22de8:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   22dea:	f104 0008 	add.w	r0, r4, #8
}
   22dee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   22df2:	f7fa bedb 	b.w	1dbac <z_impl_k_sem_give>
   22df6:	bd10      	pop	{r4, pc}

00022df8 <spi_nrfx_release>:
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   22df8:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   22dfa:	6803      	ldr	r3, [r0, #0]
   22dfc:	428b      	cmp	r3, r1
{
   22dfe:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   22e00:	d106      	bne.n	22e10 <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   22e02:	f890 4064 	ldrb.w	r4, [r0, #100]	; 0x64
   22e06:	b934      	cbnz	r4, 22e16 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   22e08:	f7ff ffe6 	bl	22dd8 <spi_context_unlock_unconditionally>
	return 0;
   22e0c:	4620      	mov	r0, r4
}
   22e0e:	bd10      	pop	{r4, pc}
		return -EINVAL;
   22e10:	f06f 0015 	mvn.w	r0, #21
   22e14:	e7fb      	b.n	22e0e <spi_nrfx_release+0x16>
		return -EBUSY;
   22e16:	f06f 000f 	mvn.w	r0, #15
   22e1a:	e7f8      	b.n	22e0e <spi_nrfx_release+0x16>

00022e1c <timer_work_handler>:
	TimerIrqHandler();
   22e1c:	f7f9 b9dc 	b.w	1c1d8 <TimerIrqHandler>

00022e20 <k_uptime_get>:
{
   22e20:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   22e22:	f000 fd44 	bl	238ae <z_impl_k_uptime_ticks>
   22e26:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   22e2a:	fba0 2304 	umull	r2, r3, r0, r4
   22e2e:	fb04 3301 	mla	r3, r4, r1, r3
   22e32:	0bd0      	lsrs	r0, r2, #15
}
   22e34:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   22e38:	0bd9      	lsrs	r1, r3, #15
   22e3a:	bd10      	pop	{r4, pc}

00022e3c <RtcGetTimerValue>:
{
   22e3c:	b508      	push	{r3, lr}
	return (uint32_t)k_uptime_get();
   22e3e:	f7ff ffef 	bl	22e20 <k_uptime_get>
}
   22e42:	bd08      	pop	{r3, pc}

00022e44 <RtcGetMinimumTimeout>:
}
   22e44:	2001      	movs	r0, #1
   22e46:	4770      	bx	lr

00022e48 <DelayMsMcu>:

void DelayMsMcu(uint32_t ms)
{
   22e48:	b538      	push	{r3, r4, r5, lr}
   22e4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   22e4e:	f240 34e7 	movw	r4, #999	; 0x3e7
   22e52:	2500      	movs	r5, #0
   22e54:	fbe1 4500 	umlal	r4, r5, r1, r0
   22e58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   22e5c:	2300      	movs	r3, #0
   22e5e:	4620      	mov	r0, r4
   22e60:	4629      	mov	r1, r5
   22e62:	f7dd fdeb 	bl	a3c <__aeabi_uldivmod>
	k_sleep(K_MSEC(ms));
}
   22e66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return z_impl_k_sleep(timeout);
   22e6a:	f7fa be03 	b.w	1da74 <z_impl_k_sleep>

00022e6e <RtcMs2Tick>:

uint32_t RtcMs2Tick(uint32_t milliseconds)
{
	return milliseconds;
}
   22e6e:	4770      	bx	lr

00022e70 <RtcTick2Ms>:
   22e70:	4770      	bx	lr

00022e72 <BoardCriticalSectionBegin>:
	__asm__ volatile(
   22e72:	f04f 0220 	mov.w	r2, #32
   22e76:	f3ef 8311 	mrs	r3, BASEPRI
   22e7a:	f382 8811 	msr	BASEPRI, r2
   22e7e:	f3bf 8f6f 	isb	sy
	return tick;
}

void BoardCriticalSectionBegin(uint32_t *mask)
{
	*mask = irq_lock();
   22e82:	6003      	str	r3, [r0, #0]
}
   22e84:	4770      	bx	lr

00022e86 <BoardCriticalSectionEnd>:
	__asm__ volatile(
   22e86:	6803      	ldr	r3, [r0, #0]
   22e88:	f383 8811 	msr	BASEPRI, r3
   22e8c:	f3bf 8f6f 	isb	sy

void BoardCriticalSectionEnd(uint32_t *mask)
{
	irq_unlock(*mask);
}
   22e90:	4770      	bx	lr

00022e92 <z_impl_gpio_pin_interrupt_configure>:
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   22e92:	0413      	lsls	r3, r2, #16
{
   22e94:	b430      	push	{r4, r5}
	const struct gpio_driver_api *api =
   22e96:	6884      	ldr	r4, [r0, #8]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   22e98:	d507      	bpl.n	22eaa <z_impl_gpio_pin_interrupt_configure+0x18>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   22e9a:	6905      	ldr	r5, [r0, #16]
   22e9c:	2301      	movs	r3, #1
   22e9e:	682d      	ldr	r5, [r5, #0]
   22ea0:	408b      	lsls	r3, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   22ea2:	422b      	tst	r3, r5
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   22ea4:	bf18      	it	ne
   22ea6:	f482 22c0 	eorne.w	r2, r2, #393216	; 0x60000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   22eaa:	69a4      	ldr	r4, [r4, #24]
   22eac:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
   22eb0:	46a4      	mov	ip, r4
   22eb2:	f402 32b0 	and.w	r2, r2, #90112	; 0x16000
}
   22eb6:	bc30      	pop	{r4, r5}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   22eb8:	4760      	bx	ip

00022eba <SX1276CheckRfFrequency>:
}
   22eba:	2001      	movs	r0, #1
   22ebc:	4770      	bx	lr

00022ebe <gpio_pin_set.constprop.0>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   22ebe:	6903      	ldr	r3, [r0, #16]
   22ec0:	681b      	ldr	r3, [r3, #0]
   22ec2:	05db      	lsls	r3, r3, #23
		value = (value != 0) ? 0 : 1;
   22ec4:	bf48      	it	mi
   22ec6:	f081 0101 	eormi.w	r1, r1, #1
	if (value != 0)	{
   22eca:	b121      	cbz	r1, 22ed6 <gpio_pin_set.constprop.0+0x18>
	return api->port_set_bits_raw(port, pins);
   22ecc:	6883      	ldr	r3, [r0, #8]
   22ece:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   22ed0:	f44f 7180 	mov.w	r1, #256	; 0x100
   22ed4:	4718      	bx	r3
   22ed6:	6883      	ldr	r3, [r0, #8]
   22ed8:	691b      	ldr	r3, [r3, #16]
   22eda:	e7f9      	b.n	22ed0 <gpio_pin_set.constprop.0+0x12>

00022edc <SX1276GetBoardTcxoWakeupTime>:
}
   22edc:	2000      	movs	r0, #0
   22ede:	4770      	bx	lr

00022ee0 <SX1276SetAntSwLowPower>:
}
   22ee0:	4770      	bx	lr

00022ee2 <SX1276SetBoardTcxo>:
}
   22ee2:	4770      	bx	lr

00022ee4 <SX1276SetAntSw>:
   22ee4:	4770      	bx	lr

00022ee6 <SX1276Write>:
{
   22ee6:	b507      	push	{r0, r1, r2, lr}
    SX1276WriteBuffer( addr, &data, 1 );
   22ee8:	2201      	movs	r2, #1
{
   22eea:	f88d 1007 	strb.w	r1, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
   22eee:	f10d 0107 	add.w	r1, sp, #7
   22ef2:	f7f8 fb0f 	bl	1b514 <SX1276WriteBuffer>
}
   22ef6:	b003      	add	sp, #12
   22ef8:	f85d fb04 	ldr.w	pc, [sp], #4

00022efc <SX1276Read>:
{
   22efc:	b507      	push	{r0, r1, r2, lr}
    SX1276ReadBuffer( addr, &data, 1 );
   22efe:	2201      	movs	r2, #1
   22f00:	f10d 0107 	add.w	r1, sp, #7
   22f04:	f7f8 fa40 	bl	1b388 <SX1276ReadBuffer>
}
   22f08:	f89d 0007 	ldrb.w	r0, [sp, #7]
   22f0c:	b003      	add	sp, #12
   22f0e:	f85d fb04 	ldr.w	pc, [sp], #4

00022f12 <SX1276SetOpMode>:
{
   22f12:	b510      	push	{r4, lr}
    if( opMode == RF_OPMODE_SLEEP )
   22f14:	4604      	mov	r4, r0
        SX1276SetAntSwLowPower( true );
   22f16:	2001      	movs	r0, #1
    if( opMode == RF_OPMODE_SLEEP )
   22f18:	b964      	cbnz	r4, 22f34 <SX1276SetOpMode+0x22>
        SX1276SetAntSwLowPower( true );
   22f1a:	f7ff ffe1 	bl	22ee0 <SX1276SetAntSwLowPower>
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
   22f1e:	2001      	movs	r0, #1
   22f20:	f7ff ffec 	bl	22efc <SX1276Read>
   22f24:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
   22f28:	4321      	orrs	r1, r4
   22f2a:	2001      	movs	r0, #1
}
   22f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
   22f30:	f7ff bfd9 	b.w	22ee6 <SX1276Write>
        SX1276SetBoardTcxo( true );
   22f34:	f7ff ffd5 	bl	22ee2 <SX1276SetBoardTcxo>
        SX1276SetAntSwLowPower( false );
   22f38:	2000      	movs	r0, #0
   22f3a:	f7ff ffd1 	bl	22ee0 <SX1276SetAntSwLowPower>
        SX1276SetAntSw( opMode );
   22f3e:	4620      	mov	r0, r4
   22f40:	f7ff ffd0 	bl	22ee4 <SX1276SetAntSw>
   22f44:	e7eb      	b.n	22f1e <SX1276SetOpMode+0xc>

00022f46 <SX1276IsChannelFree>:
{
   22f46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22f48:	4604      	mov	r4, r0
   22f4a:	460e      	mov	r6, r1
   22f4c:	4617      	mov	r7, r2
   22f4e:	461d      	mov	r5, r3
    SX1276SetSleep( );
   22f50:	f7f8 fbb4 	bl	1b6bc <SX1276SetSleep>
    SX1276SetModem( modem );
   22f54:	4620      	mov	r0, r4
   22f56:	f7f8 fd4d 	bl	1b9f4 <SX1276SetModem>
    SX1276SetChannel( freq );
   22f5a:	4630      	mov	r0, r6
   22f5c:	f7df f94c 	bl	21f8 <SX1276SetChannel>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
   22f60:	2005      	movs	r0, #5
   22f62:	f7ff ffd6 	bl	22f12 <SX1276SetOpMode>
    DelayMs( 1 );
   22f66:	2001      	movs	r0, #1
   22f68:	f000 f887 	bl	2307a <DelayMs>
    carrierSenseTime = TimerGetCurrentTime( );
   22f6c:	f000 f86f 	bl	2304e <TimerGetCurrentTime>
   22f70:	4606      	mov	r6, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
   22f72:	4630      	mov	r0, r6
   22f74:	f000 f872 	bl	2305c <TimerGetElapsedTime>
   22f78:	42a8      	cmp	r0, r5
   22f7a:	d304      	bcc.n	22f86 <SX1276IsChannelFree+0x40>
    bool status = true;
   22f7c:	2401      	movs	r4, #1
    SX1276SetSleep( );
   22f7e:	f7f8 fb9d 	bl	1b6bc <SX1276SetSleep>
}
   22f82:	4620      	mov	r0, r4
   22f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rssi = SX1276ReadRssi( modem );
   22f86:	4620      	mov	r0, r4
   22f88:	f7f8 fb74 	bl	1b674 <SX1276ReadRssi>
        if( rssi > rssiThresh )
   22f8c:	42b8      	cmp	r0, r7
   22f8e:	ddf0      	ble.n	22f72 <SX1276IsChannelFree+0x2c>
            status = false;
   22f90:	2400      	movs	r4, #0
   22f92:	e7f4      	b.n	22f7e <SX1276IsChannelFree+0x38>

00022f94 <SX1276Random>:
{
   22f94:	b538      	push	{r3, r4, r5, lr}
    SX1276SetModem( MODEM_LORA );
   22f96:	2001      	movs	r0, #1
   22f98:	f7f8 fd2c 	bl	1b9f4 <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
   22f9c:	21ff      	movs	r1, #255	; 0xff
   22f9e:	2011      	movs	r0, #17
   22fa0:	f7ff ffa1 	bl	22ee6 <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
   22fa4:	2005      	movs	r0, #5
   22fa6:	f7ff ffb4 	bl	22f12 <SX1276SetOpMode>
   22faa:	2400      	movs	r4, #0
    uint32_t rnd = 0;
   22fac:	4625      	mov	r5, r4
        DelayMs( 1 );
   22fae:	2001      	movs	r0, #1
   22fb0:	f000 f863 	bl	2307a <DelayMs>
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
   22fb4:	202c      	movs	r0, #44	; 0x2c
   22fb6:	f7ff ffa1 	bl	22efc <SX1276Read>
   22fba:	f000 0001 	and.w	r0, r0, #1
   22fbe:	40a0      	lsls	r0, r4
   22fc0:	3401      	adds	r4, #1
    for( i = 0; i < 32; i++ )
   22fc2:	2c20      	cmp	r4, #32
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
   22fc4:	ea45 0500 	orr.w	r5, r5, r0
    for( i = 0; i < 32; i++ )
   22fc8:	d1f1      	bne.n	22fae <SX1276Random+0x1a>
    SX1276SetSleep( );
   22fca:	f7f8 fb77 	bl	1b6bc <SX1276SetSleep>
}
   22fce:	4628      	mov	r0, r5
   22fd0:	bd38      	pop	{r3, r4, r5, pc}

00022fd2 <SX1276WriteFifo>:
{
   22fd2:	460a      	mov	r2, r1
    SX1276WriteBuffer( 0, buffer, size );
   22fd4:	4601      	mov	r1, r0
   22fd6:	2000      	movs	r0, #0
   22fd8:	f7f8 ba9c 	b.w	1b514 <SX1276WriteBuffer>

00022fdc <SX1276ReadFifo>:
{
   22fdc:	460a      	mov	r2, r1
    SX1276ReadBuffer( 0, buffer, size );
   22fde:	4601      	mov	r1, r0
   22fe0:	2000      	movs	r0, #0
   22fe2:	f7f8 b9d1 	b.w	1b388 <SX1276ReadBuffer>

00022fe6 <SX1276GetWakeupTime>:
{
   22fe6:	b508      	push	{r3, lr}
    return SX1276GetBoardTcxoWakeupTime( ) + RADIO_WAKEUP_TIME;
   22fe8:	f7ff ff78 	bl	22edc <SX1276GetBoardTcxoWakeupTime>
}
   22fec:	3001      	adds	r0, #1
   22fee:	bd08      	pop	{r3, pc}

00022ff0 <TimerSetTimeout>:
    // Intentional wrap around. Works Ok if tick duration below 1ms
    return RtcTick2Ms( nowInTicks - pastInTicks );
}

static void TimerSetTimeout( TimerEvent_t *obj )
{
   22ff0:	b570      	push	{r4, r5, r6, lr}
   22ff2:	4604      	mov	r4, r0
    int32_t minTicks= RtcGetMinimumTimeout( );
   22ff4:	f7ff ff26 	bl	22e44 <RtcGetMinimumTimeout>
    obj->IsNext2Expire = true;
   22ff8:	2301      	movs	r3, #1
   22ffa:	7263      	strb	r3, [r4, #9]

    // In case deadline too soon
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
   22ffc:	6826      	ldr	r6, [r4, #0]
    int32_t minTicks= RtcGetMinimumTimeout( );
   22ffe:	4605      	mov	r5, r0
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
   23000:	f7f7 ff4c 	bl	1ae9c <RtcGetTimerElapsedTime>
   23004:	4428      	add	r0, r5
   23006:	4286      	cmp	r6, r0
   23008:	d203      	bcs.n	23012 <TimerSetTimeout+0x22>
    {
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
   2300a:	f7f7 ff47 	bl	1ae9c <RtcGetTimerElapsedTime>
   2300e:	4405      	add	r5, r0
   23010:	6025      	str	r5, [r4, #0]
    }
    RtcSetAlarm( obj->Timestamp );
   23012:	6820      	ldr	r0, [r4, #0]
}
   23014:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    RtcSetAlarm( obj->Timestamp );
   23018:	f7f7 bf50 	b.w	1aebc <RtcSetAlarm>

0002301c <TimerInit>:
    obj->Timestamp = 0;
   2301c:	2300      	movs	r3, #0
    obj->ReloadValue = 0;
   2301e:	e9c0 3300 	strd	r3, r3, [r0]
    obj->Context = NULL;
   23022:	e9c0 1303 	strd	r1, r3, [r0, #12]
    obj->IsStarted = false;
   23026:	8103      	strh	r3, [r0, #8]
    obj->Next = NULL;
   23028:	6143      	str	r3, [r0, #20]
}
   2302a:	4770      	bx	lr

0002302c <TimerSetValue>:
{
   2302c:	b538      	push	{r3, r4, r5, lr}
   2302e:	4605      	mov	r5, r0
    uint32_t ticks = RtcMs2Tick( value );
   23030:	4608      	mov	r0, r1
   23032:	f7ff ff1c 	bl	22e6e <RtcMs2Tick>
   23036:	4604      	mov	r4, r0
    TimerStop( obj );
   23038:	4628      	mov	r0, r5
   2303a:	f7f9 f90b 	bl	1c254 <TimerStop>
    minValue = RtcGetMinimumTimeout( );
   2303e:	f7ff ff01 	bl	22e44 <RtcGetMinimumTimeout>
    if( ticks < minValue )
   23042:	42a0      	cmp	r0, r4
   23044:	bf38      	it	cc
   23046:	4620      	movcc	r0, r4
    obj->ReloadValue = ticks;
   23048:	e9c5 0000 	strd	r0, r0, [r5]
}
   2304c:	bd38      	pop	{r3, r4, r5, pc}

0002304e <TimerGetCurrentTime>:
{
   2304e:	b508      	push	{r3, lr}
    uint32_t now = RtcGetTimerValue( );
   23050:	f7ff fef4 	bl	22e3c <RtcGetTimerValue>
}
   23054:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return  RtcTick2Ms( now );
   23058:	f7ff bf0a 	b.w	22e70 <RtcTick2Ms>

0002305c <TimerGetElapsedTime>:
{
   2305c:	b538      	push	{r3, r4, r5, lr}
    if ( past == 0 )
   2305e:	4604      	mov	r4, r0
   23060:	b150      	cbz	r0, 23078 <TimerGetElapsedTime+0x1c>
    uint32_t nowInTicks = RtcGetTimerValue( );
   23062:	f7ff feeb 	bl	22e3c <RtcGetTimerValue>
   23066:	4605      	mov	r5, r0
    uint32_t pastInTicks = RtcMs2Tick( past );
   23068:	4620      	mov	r0, r4
   2306a:	f7ff ff00 	bl	22e6e <RtcMs2Tick>
    return RtcTick2Ms( nowInTicks - pastInTicks );
   2306e:	1a28      	subs	r0, r5, r0
}
   23070:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return RtcTick2Ms( nowInTicks - pastInTicks );
   23074:	f7ff befc 	b.w	22e70 <RtcTick2Ms>
}
   23078:	bd38      	pop	{r3, r4, r5, pc}

0002307a <DelayMs>:
    DelayMs( s * 1000.0f );
}

void DelayMs( uint32_t ms )
{
    DelayMsMcu( ms );
   2307a:	f7ff bee5 	b.w	22e48 <DelayMsMcu>

0002307e <memcpy1>:
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
}

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
   2307e:	3801      	subs	r0, #1
   23080:	440a      	add	r2, r1
   23082:	4291      	cmp	r1, r2
   23084:	d100      	bne.n	23088 <memcpy1+0xa>
    {
        *dst++ = *src++;
    }
}
   23086:	4770      	bx	lr
        *dst++ = *src++;
   23088:	f811 3b01 	ldrb.w	r3, [r1], #1
   2308c:	f800 3f01 	strb.w	r3, [r0, #1]!
   23090:	e7f7      	b.n	23082 <memcpy1+0x4>

00023092 <uart_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   23092:	6902      	ldr	r2, [r0, #16]
{
   23094:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   23096:	e892 0003 	ldmia.w	r2, {r0, r1}
   2309a:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2309e:	2000      	movs	r0, #0
   230a0:	4770      	bx	lr

000230a2 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   230a2:	4700      	bx	r0

000230a4 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   230a4:	f000 baf3 	b.w	2368e <z_impl_k_busy_wait>

000230a8 <nrfx_clock_enable>:
{
   230a8:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   230aa:	2000      	movs	r0, #0
   230ac:	f7e2 fc9e 	bl	59ec <arch_irq_is_enabled>
   230b0:	b918      	cbnz	r0, 230ba <nrfx_clock_enable+0x12>
}
   230b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   230b6:	f7e2 bc75 	b.w	59a4 <arch_irq_enable>
   230ba:	bd08      	pop	{r3, pc}

000230bc <nrf_gpio_pin_set>:
{
   230bc:	b507      	push	{r0, r1, r2, lr}
   230be:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   230c0:	a801      	add	r0, sp, #4
   230c2:	f7f9 fd9f 	bl	1cc04 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   230c6:	9a01      	ldr	r2, [sp, #4]
   230c8:	2301      	movs	r3, #1
   230ca:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   230cc:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   230d0:	b003      	add	sp, #12
   230d2:	f85d fb04 	ldr.w	pc, [sp], #4

000230d6 <nrf_gpio_pin_clear>:
{
   230d6:	b507      	push	{r0, r1, r2, lr}
   230d8:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   230da:	a801      	add	r0, sp, #4
   230dc:	f7f9 fd92 	bl	1cc04 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   230e0:	9a01      	ldr	r2, [sp, #4]
   230e2:	2301      	movs	r3, #1
   230e4:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   230e6:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
   230ea:	b003      	add	sp, #12
   230ec:	f85d fb04 	ldr.w	pc, [sp], #4

000230f0 <transfer_byte>:
{
   230f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return p_reg->RXD;
   230f2:	f8d0 3518 	ldr.w	r3, [r0, #1304]	; 0x518
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   230f6:	698a      	ldr	r2, [r1, #24]
   230f8:	b2db      	uxtb	r3, r3
    volatile uint8_t rx_data = nrf_spi_rxd_get(p_spi);
   230fa:	f88d 3007 	strb.w	r3, [sp, #7]
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   230fe:	6a0b      	ldr	r3, [r1, #32]
   23100:	4293      	cmp	r3, r2
        p_cb->evt.xfer_desc.p_rx_buffer[p_cb->bytes_transferred] = rx_data;
   23102:	bf3e      	ittt	cc
   23104:	694a      	ldrcc	r2, [r1, #20]
   23106:	f89d 4007 	ldrbcc.w	r4, [sp, #7]
   2310a:	54d4      	strbcc	r4, [r2, r3]
    ++p_cb->bytes_transferred;
   2310c:	6a0a      	ldr	r2, [r1, #32]
    if (p_cb->abort)
   2310e:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
    ++p_cb->bytes_transferred;
   23112:	1c53      	adds	r3, r2, #1
   23114:	620b      	str	r3, [r1, #32]
    size_t bytes_used = p_cb->bytes_transferred + 1;
   23116:	3202      	adds	r2, #2
    if (p_cb->abort)
   23118:	b13c      	cbz	r4, 2312a <transfer_byte+0x3a>
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   2311a:	690c      	ldr	r4, [r1, #16]
   2311c:	42a2      	cmp	r2, r4
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   2311e:	698c      	ldr	r4, [r1, #24]
            p_cb->evt.xfer_desc.tx_length = bytes_used;
   23120:	bf38      	it	cc
   23122:	610a      	strcc	r2, [r1, #16]
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   23124:	4294      	cmp	r4, r2
            p_cb->evt.xfer_desc.rx_length = bytes_used;
   23126:	bf88      	it	hi
   23128:	618a      	strhi	r2, [r1, #24]
    if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   2312a:	690d      	ldr	r5, [r1, #16]
   2312c:	4295      	cmp	r5, r2
   2312e:	d905      	bls.n	2313c <transfer_byte+0x4c>
        nrf_spi_txd_set(p_spi, p_cb->evt.xfer_desc.p_tx_buffer[bytes_used]);
   23130:	68cb      	ldr	r3, [r1, #12]
    p_reg->TXD = data;
   23132:	5c9b      	ldrb	r3, [r3, r2]
   23134:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   23138:	2001      	movs	r0, #1
   2313a:	e00a      	b.n	23152 <transfer_byte+0x62>
    else if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   2313c:	698c      	ldr	r4, [r1, #24]
   2313e:	4294      	cmp	r4, r2
   23140:	d901      	bls.n	23146 <transfer_byte+0x56>
   23142:	7fcb      	ldrb	r3, [r1, #31]
   23144:	e7f6      	b.n	23134 <transfer_byte+0x44>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   23146:	42ab      	cmp	r3, r5
   23148:	d3f6      	bcc.n	23138 <transfer_byte+0x48>
   2314a:	42a3      	cmp	r3, r4
   2314c:	bf2c      	ite	cs
   2314e:	2000      	movcs	r0, #0
   23150:	2001      	movcc	r0, #1
}
   23152:	b003      	add	sp, #12
   23154:	bd30      	pop	{r4, r5, pc}

00023156 <z_device_state_init>:
}
   23156:	4770      	bx	lr

00023158 <z_device_ready>:
	return __device_end - __device_start;
}

bool z_device_ready(const struct device *dev)
{
	return dev->state->initialized && (dev->state->init_res == 0U);
   23158:	68c3      	ldr	r3, [r0, #12]
   2315a:	8818      	ldrh	r0, [r3, #0]
   2315c:	f3c0 0008 	ubfx	r0, r0, #0, #9
}
   23160:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   23164:	4258      	negs	r0, r3
   23166:	4158      	adcs	r0, r3
   23168:	4770      	bx	lr

0002316a <arch_system_halt>:
	__asm__ volatile(
   2316a:	f04f 0220 	mov.w	r2, #32
   2316e:	f3ef 8311 	mrs	r3, BASEPRI
   23172:	f382 8811 	msr	BASEPRI, r2
   23176:	f3bf 8f6f 	isb	sy
	for (;;) {
   2317a:	e7fe      	b.n	2317a <arch_system_halt+0x10>

0002317c <z_pm_save_idle_exit>:
{
   2317c:	b508      	push	{r3, lr}
	pm_system_resume();
   2317e:	f7e1 fe25 	bl	4dcc <pm_system_resume>
}
   23182:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   23186:	f7fc bbb7 	b.w	1f8f8 <sys_clock_idle_exit>

0002318a <k_heap_init>:
{
   2318a:	b410      	push	{r4}
   2318c:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   23190:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   23194:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   23196:	f7fb bf0d 	b.w	1efb4 <sys_heap_init>

0002319a <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   2319a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2319e:	b087      	sub	sp, #28
   231a0:	4604      	mov	r4, r0
   231a2:	460e      	mov	r6, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   231a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
{
   231a8:	4617      	mov	r7, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   231aa:	f000 fb82 	bl	238b2 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   231ae:	f104 0914 	add.w	r9, r4, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   231b2:	4605      	mov	r5, r0
   231b4:	4688      	mov	r8, r1
   231b6:	f04f 0320 	mov.w	r3, #32
   231ba:	f3ef 8b11 	mrs	fp, BASEPRI
   231be:	f383 8811 	msr	BASEPRI, r3
   231c2:	f3bf 8f6f 	isb	sy
		now = sys_clock_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   231c6:	f104 0a0c 	add.w	sl, r4, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   231ca:	463a      	mov	r2, r7
   231cc:	4631      	mov	r1, r6
   231ce:	4620      	mov	r0, r4
   231d0:	f7fb fe75 	bl	1eebe <sys_heap_aligned_alloc>
   231d4:	9005      	str	r0, [sp, #20]
		now = sys_clock_tick_get();
   231d6:	f7fb f8ff 	bl	1e3d8 <sys_clock_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   231da:	9b05      	ldr	r3, [sp, #20]
   231dc:	b13b      	cbz	r3, 231ee <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   231de:	f38b 8811 	msr	BASEPRI, fp
   231e2:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   231e6:	4618      	mov	r0, r3
   231e8:	b007      	add	sp, #28
   231ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   231ee:	1a2a      	subs	r2, r5, r0
   231f0:	9202      	str	r2, [sp, #8]
   231f2:	eb68 0201 	sbc.w	r2, r8, r1
   231f6:	9203      	str	r2, [sp, #12]
   231f8:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   231fc:	2901      	cmp	r1, #1
   231fe:	f172 0200 	sbcs.w	r2, r2, #0
   23202:	dbec      	blt.n	231de <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   23204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   23208:	4659      	mov	r1, fp
   2320a:	e9cd 2300 	strd	r2, r3, [sp]
   2320e:	4648      	mov	r0, r9
   23210:	4652      	mov	r2, sl
   23212:	f7fa fa13 	bl	1d63c <z_pend_curr>
	__asm__ volatile(
   23216:	f04f 0320 	mov.w	r3, #32
   2321a:	f3ef 8b11 	mrs	fp, BASEPRI
   2321e:	f383 8811 	msr	BASEPRI, r3
   23222:	f3bf 8f6f 	isb	sy
   23226:	e7d0      	b.n	231ca <k_heap_aligned_alloc+0x30>

00023228 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   23228:	b538      	push	{r3, r4, r5, lr}
   2322a:	4604      	mov	r4, r0
   2322c:	f04f 0320 	mov.w	r3, #32
   23230:	f3ef 8511 	mrs	r5, BASEPRI
   23234:	f383 8811 	msr	BASEPRI, r3
   23238:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   2323c:	f7fb fdf2 	bl	1ee24 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   23240:	f104 000c 	add.w	r0, r4, #12
   23244:	f000 f9e0 	bl	23608 <z_unpend_all>
   23248:	b130      	cbz	r0, 23258 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   2324a:	4629      	mov	r1, r5
   2324c:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   23250:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   23254:	f7fa b970 	b.w	1d538 <z_reschedule>
	__asm__ volatile(
   23258:	f385 8811 	msr	BASEPRI, r5
   2325c:	f3bf 8f6f 	isb	sy
}
   23260:	bd38      	pop	{r3, r4, r5, pc}

00023262 <k_mem_slab_init>:
{
   23262:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   23264:	2400      	movs	r4, #0
   23266:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   23268:	ea41 0402 	orr.w	r4, r1, r2
   2326c:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   23270:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   23274:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   23276:	d10c      	bne.n	23292 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   23278:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2327a:	42a3      	cmp	r3, r4
   2327c:	d103      	bne.n	23286 <k_mem_slab_init+0x24>
   2327e:	e9c0 0000 	strd	r0, r0, [r0]
}
   23282:	2000      	movs	r0, #0
}
   23284:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   23286:	6945      	ldr	r5, [r0, #20]
   23288:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   2328a:	3401      	adds	r4, #1
		slab->free_list = p;
   2328c:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   2328e:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   23290:	e7f3      	b.n	2327a <k_mem_slab_init+0x18>
		return -EINVAL;
   23292:	f06f 0015 	mvn.w	r0, #21
	return rc;
   23296:	e7f5      	b.n	23284 <k_mem_slab_init+0x22>

00023298 <queue_insert>:
{
   23298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2329c:	4699      	mov	r9, r3
   2329e:	4604      	mov	r4, r0
   232a0:	f89d 3020 	ldrb.w	r3, [sp, #32]
   232a4:	460d      	mov	r5, r1
   232a6:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   232a8:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   232ac:	f04f 0220 	mov.w	r2, #32
   232b0:	f3ef 8711 	mrs	r7, BASEPRI
   232b4:	f382 8811 	msr	BASEPRI, r2
   232b8:	f3bf 8f6f 	isb	sy
	if (is_append) {
   232bc:	b103      	cbz	r3, 232c0 <queue_insert+0x28>
		prev = sys_sflist_peek_tail(&queue->data_q);
   232be:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   232c0:	4630      	mov	r0, r6
   232c2:	f000 f989 	bl	235d8 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   232c6:	b158      	cbz	r0, 232e0 <queue_insert+0x48>
   232c8:	2400      	movs	r4, #0
   232ca:	67c4      	str	r4, [r0, #124]	; 0x7c
   232cc:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   232d0:	f000 f93b 	bl	2354a <z_ready_thread>
	z_reschedule(&queue->lock, key);
   232d4:	4630      	mov	r0, r6
   232d6:	4639      	mov	r1, r7
   232d8:	f7fa f92e 	bl	1d538 <z_reschedule>
	return 0;
   232dc:	2000      	movs	r0, #0
   232de:	e00c      	b.n	232fa <queue_insert+0x62>
	if (alloc) {
   232e0:	f1b9 0f00 	cmp.w	r9, #0
   232e4:	d01b      	beq.n	2331e <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   232e6:	2108      	movs	r1, #8
   232e8:	f7fb f99c 	bl	1e624 <z_thread_aligned_alloc>
		if (anode == NULL) {
   232ec:	b938      	cbnz	r0, 232fe <queue_insert+0x66>
	__asm__ volatile(
   232ee:	f387 8811 	msr	BASEPRI, r7
   232f2:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   232f6:	f06f 000b 	mvn.w	r0, #11
}
   232fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   232fe:	2301      	movs	r3, #1
		anode->data = data;
   23300:	f8c0 8004 	str.w	r8, [r0, #4]
   23304:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   23306:	6803      	ldr	r3, [r0, #0]
   23308:	f003 0203 	and.w	r2, r3, #3
   2330c:	b95d      	cbnz	r5, 23326 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2330e:	6823      	ldr	r3, [r4, #0]
   23310:	4313      	orrs	r3, r2
   23312:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   23314:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   23316:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   23318:	b973      	cbnz	r3, 23338 <queue_insert+0xa0>
	list->tail = node;
   2331a:	6060      	str	r0, [r4, #4]
}
   2331c:	e00c      	b.n	23338 <queue_insert+0xa0>
	node->next_and_flags = flags;
   2331e:	f8c8 9000 	str.w	r9, [r8]
}
   23322:	4640      	mov	r0, r8
   23324:	e7ef      	b.n	23306 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   23326:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   23328:	f033 0303 	bics.w	r3, r3, #3
   2332c:	d110      	bne.n	23350 <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2332e:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   23330:	6862      	ldr	r2, [r4, #4]
   23332:	b93a      	cbnz	r2, 23344 <queue_insert+0xac>
	list->head = node;
   23334:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   23338:	2104      	movs	r1, #4
   2333a:	f104 0010 	add.w	r0, r4, #16
   2333e:	f000 fc36 	bl	23bae <z_handle_obj_poll_events>
   23342:	e7c7      	b.n	232d4 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   23344:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   23346:	f003 0303 	and.w	r3, r3, #3
   2334a:	4303      	orrs	r3, r0
   2334c:	6013      	str	r3, [r2, #0]
   2334e:	e7e4      	b.n	2331a <queue_insert+0x82>
   23350:	4313      	orrs	r3, r2
   23352:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   23354:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   23356:	f003 0303 	and.w	r3, r3, #3
   2335a:	4303      	orrs	r3, r0
   2335c:	602b      	str	r3, [r5, #0]
}
   2335e:	e7eb      	b.n	23338 <queue_insert+0xa0>

00023360 <z_queue_node_peek>:
{
   23360:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   23362:	4604      	mov	r4, r0
   23364:	b130      	cbz	r0, 23374 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   23366:	6802      	ldr	r2, [r0, #0]
   23368:	0793      	lsls	r3, r2, #30
   2336a:	d003      	beq.n	23374 <z_queue_node_peek+0x14>
		ret = anode->data;
   2336c:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2336e:	b109      	cbz	r1, 23374 <z_queue_node_peek+0x14>
			k_free(anode);
   23370:	f000 fc2b 	bl	23bca <k_free>
}
   23374:	4620      	mov	r0, r4
   23376:	bd10      	pop	{r4, pc}

00023378 <z_impl_k_queue_init>:
	list->head = NULL;
   23378:	2300      	movs	r3, #0
	list->tail = NULL;
   2337a:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
   2337e:	f100 0308 	add.w	r3, r0, #8
   23382:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   23386:	f100 0310 	add.w	r3, r0, #16
   2338a:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   2338e:	4770      	bx	lr

00023390 <k_queue_append>:
{
   23390:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   23392:	2301      	movs	r3, #1
   23394:	9300      	str	r3, [sp, #0]
   23396:	2300      	movs	r3, #0
{
   23398:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   2339a:	4619      	mov	r1, r3
   2339c:	f7ff ff7c 	bl	23298 <queue_insert>
}
   233a0:	b003      	add	sp, #12
   233a2:	f85d fb04 	ldr.w	pc, [sp], #4

000233a6 <k_queue_prepend>:
{
   233a6:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   233a8:	2300      	movs	r3, #0
{
   233aa:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   233ac:	9300      	str	r3, [sp, #0]
   233ae:	4619      	mov	r1, r3
   233b0:	f7ff ff72 	bl	23298 <queue_insert>
}
   233b4:	b003      	add	sp, #12
   233b6:	f85d fb04 	ldr.w	pc, [sp], #4

000233ba <k_queue_append_list>:
{
   233ba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   233be:	4605      	mov	r5, r0
   233c0:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   233c2:	460c      	mov	r4, r1
   233c4:	b391      	cbz	r1, 2342c <k_queue_append_list+0x72>
   233c6:	b38a      	cbz	r2, 2342c <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   233c8:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   233cc:	f04f 0320 	mov.w	r3, #32
   233d0:	f3ef 8811 	mrs	r8, BASEPRI
   233d4:	f383 8811 	msr	BASEPRI, r3
   233d8:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   233dc:	4638      	mov	r0, r7
   233de:	f000 f8fb 	bl	235d8 <z_unpend_first_thread>
   233e2:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   233e6:	b920      	cbnz	r0, 233f2 <k_queue_append_list+0x38>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   233e8:	686b      	ldr	r3, [r5, #4]
   233ea:	b9cb      	cbnz	r3, 23420 <k_queue_append_list+0x66>
	list->head = node;
   233ec:	602c      	str	r4, [r5, #0]
	list->tail = node;
   233ee:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   233f0:	e00a      	b.n	23408 <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   233f2:	6144      	str	r4, [r0, #20]
   233f4:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   233f8:	f000 f8a7 	bl	2354a <z_ready_thread>
		head = *(void **)head;
   233fc:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   233fe:	4638      	mov	r0, r7
   23400:	f000 f8ea 	bl	235d8 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   23404:	2c00      	cmp	r4, #0
   23406:	d1ee      	bne.n	233e6 <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   23408:	2104      	movs	r1, #4
   2340a:	f105 0010 	add.w	r0, r5, #16
   2340e:	f000 fbce 	bl	23bae <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   23412:	4638      	mov	r0, r7
   23414:	4641      	mov	r1, r8
   23416:	f7fa f88f 	bl	1d538 <z_reschedule>
	return 0;
   2341a:	2000      	movs	r0, #0
}
   2341c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   23420:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   23422:	f001 0103 	and.w	r1, r1, #3
   23426:	430c      	orrs	r4, r1
   23428:	601c      	str	r4, [r3, #0]
}
   2342a:	e7e0      	b.n	233ee <k_queue_append_list+0x34>
		return -EINVAL;
   2342c:	f06f 0015 	mvn.w	r0, #21
   23430:	e7f4      	b.n	2341c <k_queue_append_list+0x62>

00023432 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   23432:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   23436:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   23438:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2343a:	2300      	movs	r3, #0
	node->prev = NULL;
   2343c:	e9c0 3300 	strd	r3, r3, [r0]
}
   23440:	4770      	bx	lr

00023442 <unpend_thread_no_timeout>:
{
   23442:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   23444:	f7ff fff5 	bl	23432 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   23448:	7b43      	ldrb	r3, [r0, #13]
   2344a:	f023 0302 	bic.w	r3, r3, #2
   2344e:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   23450:	2300      	movs	r3, #0
   23452:	6083      	str	r3, [r0, #8]
}
   23454:	bd08      	pop	{r3, pc}

00023456 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   23456:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2345a:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   2345e:	4283      	cmp	r3, r0
		return b2 - b1;
   23460:	bf14      	ite	ne
   23462:	1ac0      	subne	r0, r0, r3
	return 0;
   23464:	2000      	moveq	r0, #0
}
   23466:	4770      	bx	lr

00023468 <z_unpend_thread_no_timeout>:
{
   23468:	b508      	push	{r3, lr}
   2346a:	f04f 0320 	mov.w	r3, #32
   2346e:	f3ef 8111 	mrs	r1, BASEPRI
   23472:	f383 8811 	msr	BASEPRI, r3
   23476:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   2347a:	f7ff ffe2 	bl	23442 <unpend_thread_no_timeout>
	__asm__ volatile(
   2347e:	f381 8811 	msr	BASEPRI, r1
   23482:	f3bf 8f6f 	isb	sy
}
   23486:	bd08      	pop	{r3, pc}

00023488 <z_unpend_thread>:
{
   23488:	b510      	push	{r4, lr}
	__asm__ volatile(
   2348a:	f04f 0320 	mov.w	r3, #32
   2348e:	f3ef 8411 	mrs	r4, BASEPRI
   23492:	f383 8811 	msr	BASEPRI, r3
   23496:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   2349a:	f7ff ffd2 	bl	23442 <unpend_thread_no_timeout>
	__asm__ volatile(
   2349e:	f384 8811 	msr	BASEPRI, r4
   234a2:	f3bf 8f6f 	isb	sy
}
   234a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_abort_timeout(&thread->base.timeout);
   234aa:	3018      	adds	r0, #24
   234ac:	f000 b9bb 	b.w	23826 <z_abort_timeout>

000234b0 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   234b0:	4603      	mov	r3, r0
   234b2:	b920      	cbnz	r0, 234be <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   234b4:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   234b8:	b90a      	cbnz	r2, 234be <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   234ba:	f7e2 ba25 	b.w	5908 <arch_swap>
   234be:	f383 8811 	msr	BASEPRI, r3
   234c2:	f3bf 8f6f 	isb	sy
}
   234c6:	4770      	bx	lr

000234c8 <z_reschedule_unlocked>:
	__asm__ volatile(
   234c8:	f04f 0320 	mov.w	r3, #32
   234cc:	f3ef 8011 	mrs	r0, BASEPRI
   234d0:	f383 8811 	msr	BASEPRI, r3
   234d4:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   234d8:	f7ff bfea 	b.w	234b0 <z_reschedule_irqlock>

000234dc <z_priq_dumb_best>:
{
   234dc:	4603      	mov	r3, r0
	return list->head == list;
   234de:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   234e0:	4283      	cmp	r3, r0
   234e2:	d003      	beq.n	234ec <z_priq_dumb_best+0x10>
	if (n != NULL) {
   234e4:	2800      	cmp	r0, #0
   234e6:	bf38      	it	cc
   234e8:	2000      	movcc	r0, #0
   234ea:	4770      	bx	lr
	struct k_thread *thread = NULL;
   234ec:	2000      	movs	r0, #0
}
   234ee:	4770      	bx	lr

000234f0 <add_to_waitq_locked>:
{
   234f0:	b538      	push	{r3, r4, r5, lr}
   234f2:	4604      	mov	r4, r0
   234f4:	460d      	mov	r5, r1
	unready_thread(thread);
   234f6:	f7fa f863 	bl	1d5c0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   234fa:	7b63      	ldrb	r3, [r4, #13]
   234fc:	f043 0302 	orr.w	r3, r3, #2
   23500:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   23502:	b1b5      	cbz	r5, 23532 <add_to_waitq_locked+0x42>
	return list->head == list;
   23504:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   23506:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23508:	429d      	cmp	r5, r3
   2350a:	bf08      	it	eq
   2350c:	2300      	moveq	r3, #0
   2350e:	2b00      	cmp	r3, #0
   23510:	bf38      	it	cc
   23512:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23514:	b19b      	cbz	r3, 2353e <add_to_waitq_locked+0x4e>
	int32_t b1 = thread_1->base.prio;
   23516:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   2351a:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   2351e:	4291      	cmp	r1, r2
   23520:	d008      	beq.n	23534 <add_to_waitq_locked+0x44>
		return b2 - b1;
   23522:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   23524:	2a00      	cmp	r2, #0
   23526:	dd05      	ble.n	23534 <add_to_waitq_locked+0x44>
	sys_dnode_t *const prev = successor->prev;
   23528:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2352a:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   2352e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   23530:	605c      	str	r4, [r3, #4]
}
   23532:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   23534:	686a      	ldr	r2, [r5, #4]
   23536:	4293      	cmp	r3, r2
   23538:	d001      	beq.n	2353e <add_to_waitq_locked+0x4e>
   2353a:	681b      	ldr	r3, [r3, #0]
   2353c:	e7ea      	b.n	23514 <add_to_waitq_locked+0x24>
	sys_dnode_t *const tail = list->tail;
   2353e:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   23540:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   23544:	601c      	str	r4, [r3, #0]
	list->tail = node;
   23546:	606c      	str	r4, [r5, #4]
   23548:	e7f3      	b.n	23532 <add_to_waitq_locked+0x42>

0002354a <z_ready_thread>:
{
   2354a:	b510      	push	{r4, lr}
   2354c:	f04f 0320 	mov.w	r3, #32
   23550:	f3ef 8411 	mrs	r4, BASEPRI
   23554:	f383 8811 	msr	BASEPRI, r3
   23558:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   2355c:	f7fa f98a 	bl	1d874 <ready_thread>
	__asm__ volatile(
   23560:	f384 8811 	msr	BASEPRI, r4
   23564:	f3bf 8f6f 	isb	sy
}
   23568:	bd10      	pop	{r4, pc}

0002356a <z_thread_timeout>:
{
   2356a:	b510      	push	{r4, lr}
   2356c:	4601      	mov	r1, r0
	__asm__ volatile(
   2356e:	f04f 0320 	mov.w	r3, #32
   23572:	f3ef 8411 	mrs	r4, BASEPRI
   23576:	f383 8811 	msr	BASEPRI, r3
   2357a:	f3bf 8f6f 	isb	sy
		if (!killed) {
   2357e:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   23582:	f013 0f28 	tst.w	r3, #40	; 0x28
   23586:	d10d      	bne.n	235a4 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   23588:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   2358c:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   2358e:	b10b      	cbz	r3, 23594 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   23590:	f7ff ff57 	bl	23442 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   23594:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   23598:	f023 0314 	bic.w	r3, r3, #20
   2359c:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   235a0:	f7fa f968 	bl	1d874 <ready_thread>
	__asm__ volatile(
   235a4:	f384 8811 	msr	BASEPRI, r4
   235a8:	f3bf 8f6f 	isb	sy
}
   235ac:	bd10      	pop	{r4, pc}

000235ae <z_unpend1_no_timeout>:
{
   235ae:	b510      	push	{r4, lr}
	__asm__ volatile(
   235b0:	f04f 0320 	mov.w	r3, #32
   235b4:	f3ef 8411 	mrs	r4, BASEPRI
   235b8:	f383 8811 	msr	BASEPRI, r3
   235bc:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   235c0:	f7ff ff8c 	bl	234dc <z_priq_dumb_best>
		if (thread != NULL) {
   235c4:	4601      	mov	r1, r0
   235c6:	b108      	cbz	r0, 235cc <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
   235c8:	f7ff ff3b 	bl	23442 <unpend_thread_no_timeout>
	__asm__ volatile(
   235cc:	f384 8811 	msr	BASEPRI, r4
   235d0:	f3bf 8f6f 	isb	sy
}
   235d4:	4608      	mov	r0, r1
   235d6:	bd10      	pop	{r4, pc}

000235d8 <z_unpend_first_thread>:
{
   235d8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   235da:	f04f 0320 	mov.w	r3, #32
   235de:	f3ef 8511 	mrs	r5, BASEPRI
   235e2:	f383 8811 	msr	BASEPRI, r3
   235e6:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   235ea:	f7ff ff77 	bl	234dc <z_priq_dumb_best>
		if (thread != NULL) {
   235ee:	4604      	mov	r4, r0
   235f0:	b120      	cbz	r0, 235fc <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   235f2:	f7ff ff26 	bl	23442 <unpend_thread_no_timeout>
   235f6:	3018      	adds	r0, #24
   235f8:	f000 f915 	bl	23826 <z_abort_timeout>
	__asm__ volatile(
   235fc:	f385 8811 	msr	BASEPRI, r5
   23600:	f3bf 8f6f 	isb	sy
}
   23604:	4620      	mov	r0, r4
   23606:	bd38      	pop	{r3, r4, r5, pc}

00023608 <z_unpend_all>:
{
   23608:	b538      	push	{r3, r4, r5, lr}
   2360a:	4605      	mov	r5, r0
	int need_sched = 0;
   2360c:	2000      	movs	r0, #0
	return list->head == list;
   2360e:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23610:	42a5      	cmp	r5, r4
   23612:	d000      	beq.n	23616 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   23614:	b904      	cbnz	r4, 23618 <z_unpend_all+0x10>
}
   23616:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   23618:	4620      	mov	r0, r4
   2361a:	f7ff ff35 	bl	23488 <z_unpend_thread>
		z_ready_thread(thread);
   2361e:	4620      	mov	r0, r4
   23620:	f7ff ff93 	bl	2354a <z_ready_thread>
		need_sched = 1;
   23624:	2001      	movs	r0, #1
   23626:	e7f2      	b.n	2360e <z_unpend_all+0x6>

00023628 <z_sched_wake>:
{
   23628:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2362a:	f04f 0320 	mov.w	r3, #32
   2362e:	f3ef 8511 	mrs	r5, BASEPRI
   23632:	f383 8811 	msr	BASEPRI, r3
   23636:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   2363a:	f7ff ff4f 	bl	234dc <z_priq_dumb_best>
		if (thread != NULL) {
   2363e:	4604      	mov	r4, r0
   23640:	b150      	cbz	r0, 23658 <z_sched_wake+0x30>
   23642:	67c1      	str	r1, [r0, #124]	; 0x7c
   23644:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   23646:	f7ff fefc 	bl	23442 <unpend_thread_no_timeout>
   2364a:	3018      	adds	r0, #24
   2364c:	f000 f8eb 	bl	23826 <z_abort_timeout>
			ready_thread(thread);
   23650:	4620      	mov	r0, r4
   23652:	f7fa f90f 	bl	1d874 <ready_thread>
			ret = true;
   23656:	2001      	movs	r0, #1
	__asm__ volatile(
   23658:	f385 8811 	msr	BASEPRI, r5
   2365c:	f3bf 8f6f 	isb	sy
}
   23660:	bd38      	pop	{r3, r4, r5, pc}

00023662 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   23662:	b15a      	cbz	r2, 2367c <z_impl_k_sem_init+0x1a>
   23664:	428a      	cmp	r2, r1
   23666:	d309      	bcc.n	2367c <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   23668:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2366c:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   23670:	e9c0 0000 	strd	r0, r0, [r0]
   23674:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   23678:	2000      	movs	r0, #0
   2367a:	4770      	bx	lr
		return -EINVAL;
   2367c:	f06f 0015 	mvn.w	r0, #21
}
   23680:	4770      	bx	lr

00023682 <k_is_in_isr>:
   23682:	f3ef 8005 	mrs	r0, IPSR
}
   23686:	3800      	subs	r0, #0
   23688:	bf18      	it	ne
   2368a:	2001      	movne	r0, #1
   2368c:	4770      	bx	lr

0002368e <z_impl_k_busy_wait>:
	if (usec_to_wait == 0U) {
   2368e:	b108      	cbz	r0, 23694 <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
   23690:	f7e2 bddc 	b.w	624c <arch_busy_wait>
}
   23694:	4770      	bx	lr

00023696 <z_impl_k_thread_name_set>:
}
   23696:	f06f 0057 	mvn.w	r0, #87	; 0x57
   2369a:	4770      	bx	lr

0002369c <k_thread_name_get>:
}
   2369c:	2000      	movs	r0, #0
   2369e:	4770      	bx	lr

000236a0 <z_impl_k_thread_start>:
	z_sched_start(thread);
   236a0:	f7fa b920 	b.w	1d8e4 <z_sched_start>

000236a4 <notify_queue_locked>:
	if (queue != NULL) {
   236a4:	b120      	cbz	r0, 236b0 <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   236a6:	2200      	movs	r2, #0
   236a8:	4611      	mov	r1, r2
   236aa:	3088      	adds	r0, #136	; 0x88
   236ac:	f7ff bfbc 	b.w	23628 <z_sched_wake>
}
   236b0:	4770      	bx	lr

000236b2 <unschedule_locked>:
	bool ret = flag_test(flagp, bit);
   236b2:	68c3      	ldr	r3, [r0, #12]
{
   236b4:	b510      	push	{r4, lr}
	*flagp &= ~BIT(bit);
   236b6:	f023 0208 	bic.w	r2, r3, #8
	return (*flagp & BIT(bit)) != 0U;
   236ba:	f3c3 04c0 	ubfx	r4, r3, #3, #1
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   236be:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   236c0:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   236c2:	d502      	bpl.n	236ca <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   236c4:	3010      	adds	r0, #16
   236c6:	f000 f8ae 	bl	23826 <z_abort_timeout>
}
   236ca:	4620      	mov	r0, r4
   236cc:	bd10      	pop	{r4, pc}

000236ce <cancel_async_locked>:
{
   236ce:	4603      	mov	r3, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   236d0:	68c0      	ldr	r0, [r0, #12]
{
   236d2:	b510      	push	{r4, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   236d4:	0784      	lsls	r4, r0, #30
   236d6:	f3c0 0140 	ubfx	r1, r0, #1, #1
   236da:	d416      	bmi.n	2370a <cancel_async_locked+0x3c>
	*flagp &= ~BIT(bit);
   236dc:	f020 0404 	bic.w	r4, r0, #4
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   236e0:	0740      	lsls	r0, r0, #29
		queue_remove_locked(work->queue, work);
   236e2:	689a      	ldr	r2, [r3, #8]
	*flagp &= ~BIT(bit);
   236e4:	60dc      	str	r4, [r3, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   236e6:	d510      	bpl.n	2370a <cancel_async_locked+0x3c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   236e8:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
   236ec:	b168      	cbz	r0, 2370a <cancel_async_locked+0x3c>
   236ee:	4283      	cmp	r3, r0
   236f0:	d11d      	bne.n	2372e <cancel_async_locked+0x60>
Z_GENLIST_REMOVE(slist, snode)
   236f2:	6818      	ldr	r0, [r3, #0]
   236f4:	b999      	cbnz	r1, 2371e <cancel_async_locked+0x50>
   236f6:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	list->head = node;
   236fa:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   236fe:	428b      	cmp	r3, r1
   23700:	d101      	bne.n	23706 <cancel_async_locked+0x38>
	list->tail = node;
   23702:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
	parent->next = child;
   23706:	2200      	movs	r2, #0
   23708:	601a      	str	r2, [r3, #0]
	return flags_get(&work->flags) & K_WORK_MASK;
   2370a:	68da      	ldr	r2, [r3, #12]
	if (ret != 0) {
   2370c:	f012 000f 	ands.w	r0, r2, #15
	*flagp |= BIT(bit);
   23710:	bf1e      	ittt	ne
   23712:	f042 0202 	orrne.w	r2, r2, #2
   23716:	60da      	strne	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   23718:	f002 000f 	andne.w	r0, r2, #15
}
   2371c:	bd10      	pop	{r4, pc}
   2371e:	6008      	str	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   23720:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
   23724:	4283      	cmp	r3, r0
	list->tail = node;
   23726:	bf08      	it	eq
   23728:	f8c2 1084 	streq.w	r1, [r2, #132]	; 0x84
}
   2372c:	e7eb      	b.n	23706 <cancel_async_locked+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2372e:	4601      	mov	r1, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   23730:	6800      	ldr	r0, [r0, #0]
   23732:	e7db      	b.n	236ec <cancel_async_locked+0x1e>

00023734 <work_timeout>:
{
   23734:	b513      	push	{r0, r1, r4, lr}
	__asm__ volatile(
   23736:	f04f 0320 	mov.w	r3, #32
   2373a:	f3ef 8411 	mrs	r4, BASEPRI
   2373e:	f383 8811 	msr	BASEPRI, r3
   23742:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   23746:	2300      	movs	r3, #0
   23748:	9301      	str	r3, [sp, #4]
	bool ret = flag_test(flagp, bit);
   2374a:	f850 3c04 	ldr.w	r3, [r0, #-4]
	*flagp &= ~BIT(bit);
   2374e:	f023 0208 	bic.w	r2, r3, #8
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   23752:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   23754:	f840 2c04 	str.w	r2, [r0, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   23758:	d505      	bpl.n	23766 <work_timeout+0x32>
		queue = dw->queue;
   2375a:	6983      	ldr	r3, [r0, #24]
   2375c:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   2375e:	a901      	add	r1, sp, #4
   23760:	3810      	subs	r0, #16
   23762:	f7fa fb47 	bl	1ddf4 <submit_to_queue_locked>
	__asm__ volatile(
   23766:	f384 8811 	msr	BASEPRI, r4
   2376a:	f3bf 8f6f 	isb	sy
}
   2376e:	b002      	add	sp, #8
   23770:	bd10      	pop	{r4, pc}

00023772 <k_work_init>:
{
   23772:	b538      	push	{r3, r4, r5, lr}
   23774:	4604      	mov	r4, r0
   23776:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   23778:	2210      	movs	r2, #16
   2377a:	2100      	movs	r1, #0
   2377c:	f000 fa4d 	bl	23c1a <memset>
   23780:	6065      	str	r5, [r4, #4]
}
   23782:	bd38      	pop	{r3, r4, r5, pc}

00023784 <k_work_submit_to_queue>:
{
   23784:	b537      	push	{r0, r1, r2, r4, r5, lr}
   23786:	9001      	str	r0, [sp, #4]
   23788:	4608      	mov	r0, r1
	__asm__ volatile(
   2378a:	f04f 0320 	mov.w	r3, #32
   2378e:	f3ef 8511 	mrs	r5, BASEPRI
   23792:	f383 8811 	msr	BASEPRI, r3
   23796:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   2379a:	a901      	add	r1, sp, #4
   2379c:	f7fa fb2a 	bl	1ddf4 <submit_to_queue_locked>
   237a0:	4604      	mov	r4, r0
	__asm__ volatile(
   237a2:	f385 8811 	msr	BASEPRI, r5
   237a6:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   237aa:	2800      	cmp	r0, #0
   237ac:	dd04      	ble.n	237b8 <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
   237ae:	f7fa f989 	bl	1dac4 <z_impl_k_is_preempt_thread>
   237b2:	b108      	cbz	r0, 237b8 <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
   237b4:	f7fa f90c 	bl	1d9d0 <z_impl_k_yield>
}
   237b8:	4620      	mov	r0, r4
   237ba:	b003      	add	sp, #12
   237bc:	bd30      	pop	{r4, r5, pc}

000237be <k_work_init_delayable>:
{
   237be:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   237c0:	2230      	movs	r2, #48	; 0x30
{
   237c2:	4604      	mov	r4, r0
   237c4:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   237c6:	2100      	movs	r1, #0
   237c8:	f000 fa27 	bl	23c1a <memset>
   237cc:	f44f 7380 	mov.w	r3, #256	; 0x100
   237d0:	6065      	str	r5, [r4, #4]
   237d2:	60e3      	str	r3, [r4, #12]
}
   237d4:	bd38      	pop	{r3, r4, r5, pc}

000237d6 <k_work_delayable_busy_get>:
	__asm__ volatile(
   237d6:	f04f 0220 	mov.w	r2, #32
   237da:	f3ef 8311 	mrs	r3, BASEPRI
   237de:	f382 8811 	msr	BASEPRI, r2
   237e2:	f3bf 8f6f 	isb	sy
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   237e6:	f3bf 8f5b 	dmb	ish
   237ea:	68c0      	ldr	r0, [r0, #12]
   237ec:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
   237f0:	f383 8811 	msr	BASEPRI, r3
   237f4:	f3bf 8f6f 	isb	sy
}
   237f8:	f000 000f 	and.w	r0, r0, #15
   237fc:	4770      	bx	lr

000237fe <k_work_cancel_delayable>:

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   237fe:	b538      	push	{r3, r4, r5, lr}
   23800:	4604      	mov	r4, r0
	__asm__ volatile(
   23802:	f04f 0320 	mov.w	r3, #32
   23806:	f3ef 8511 	mrs	r5, BASEPRI
   2380a:	f383 8811 	msr	BASEPRI, r3
   2380e:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   23812:	f7ff ff4e 	bl	236b2 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   23816:	4620      	mov	r0, r4
   23818:	f7ff ff59 	bl	236ce <cancel_async_locked>
	__asm__ volatile(
   2381c:	f385 8811 	msr	BASEPRI, r5
   23820:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = cancel_delayable_async_locked(dwork);

	k_spin_unlock(&lock, key);
	return ret;
}
   23824:	bd38      	pop	{r3, r4, r5, pc}

00023826 <z_abort_timeout>:
{
   23826:	b510      	push	{r4, lr}
	__asm__ volatile(
   23828:	f04f 0220 	mov.w	r2, #32
   2382c:	f3ef 8411 	mrs	r4, BASEPRI
   23830:	f382 8811 	msr	BASEPRI, r2
   23834:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   23838:	6803      	ldr	r3, [r0, #0]
   2383a:	b13b      	cbz	r3, 2384c <z_abort_timeout+0x26>
			remove_timeout(to);
   2383c:	f7fa fc8a 	bl	1e154 <remove_timeout>
			ret = 0;
   23840:	2000      	movs	r0, #0
	__asm__ volatile(
   23842:	f384 8811 	msr	BASEPRI, r4
   23846:	f3bf 8f6f 	isb	sy
}
   2384a:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   2384c:	f06f 0015 	mvn.w	r0, #21
   23850:	e7f7      	b.n	23842 <z_abort_timeout+0x1c>

00023852 <z_get_next_timeout_expiry>:
{
   23852:	b510      	push	{r4, lr}
	__asm__ volatile(
   23854:	f04f 0320 	mov.w	r3, #32
   23858:	f3ef 8411 	mrs	r4, BASEPRI
   2385c:	f383 8811 	msr	BASEPRI, r3
   23860:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   23864:	f7fa fc90 	bl	1e188 <next_timeout>
	__asm__ volatile(
   23868:	f384 8811 	msr	BASEPRI, r4
   2386c:	f3bf 8f6f 	isb	sy
}
   23870:	bd10      	pop	{r4, pc}

00023872 <z_set_timeout_expiry>:
{
   23872:	b570      	push	{r4, r5, r6, lr}
   23874:	4604      	mov	r4, r0
   23876:	460d      	mov	r5, r1
	__asm__ volatile(
   23878:	f04f 0320 	mov.w	r3, #32
   2387c:	f3ef 8611 	mrs	r6, BASEPRI
   23880:	f383 8811 	msr	BASEPRI, r3
   23884:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   23888:	f7fa fc7e 	bl	1e188 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   2388c:	2801      	cmp	r0, #1
   2388e:	dd05      	ble.n	2389c <z_set_timeout_expiry+0x2a>
   23890:	42a0      	cmp	r0, r4
   23892:	db03      	blt.n	2389c <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   23894:	4629      	mov	r1, r5
   23896:	4620      	mov	r0, r4
   23898:	f7e1 fd84 	bl	53a4 <sys_clock_set_timeout>
	__asm__ volatile(
   2389c:	f386 8811 	msr	BASEPRI, r6
   238a0:	f3bf 8f6f 	isb	sy
}
   238a4:	bd70      	pop	{r4, r5, r6, pc}

000238a6 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   238a6:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   238a8:	f7fa fd96 	bl	1e3d8 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   238ac:	bd08      	pop	{r3, pc}

000238ae <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   238ae:	f7fa bd93 	b.w	1e3d8 <sys_clock_tick_get>

000238b2 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   238b2:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   238b4:	1c4b      	adds	r3, r1, #1
   238b6:	bf08      	it	eq
   238b8:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   238bc:	4604      	mov	r4, r0
   238be:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   238c0:	d013      	beq.n	238ea <sys_clock_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   238c2:	ea54 0105 	orrs.w	r1, r4, r5
   238c6:	d103      	bne.n	238d0 <sys_clock_timeout_end_calc+0x1e>

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
	return sys_clock_tick_get() + MAX(1, dt);
}
   238c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   238cc:	f7fa bd84 	b.w	1e3d8 <sys_clock_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   238d0:	f06f 0101 	mvn.w	r1, #1
   238d4:	1a0a      	subs	r2, r1, r0
   238d6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   238da:	eb61 0305 	sbc.w	r3, r1, r5
   238de:	2a00      	cmp	r2, #0
   238e0:	f173 0100 	sbcs.w	r1, r3, #0
   238e4:	db02      	blt.n	238ec <sys_clock_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
   238e6:	4610      	mov	r0, r2
   238e8:	4619      	mov	r1, r3
}
   238ea:	bd38      	pop	{r3, r4, r5, pc}
	return sys_clock_tick_get() + MAX(1, dt);
   238ec:	f7fa fd74 	bl	1e3d8 <sys_clock_tick_get>
   238f0:	2c01      	cmp	r4, #1
   238f2:	f175 0300 	sbcs.w	r3, r5, #0
   238f6:	bfbc      	itt	lt
   238f8:	2401      	movlt	r4, #1
   238fa:	2500      	movlt	r5, #0
   238fc:	1820      	adds	r0, r4, r0
   238fe:	eb45 0101 	adc.w	r1, r5, r1
   23902:	e7f2      	b.n	238ea <sys_clock_timeout_end_calc+0x38>

00023904 <k_timer_init>:
	timer->status = 0U;
   23904:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   23906:	e9c0 1208 	strd	r1, r2, [r0, #32]
   2390a:	f100 0218 	add.w	r2, r0, #24
   2390e:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   23912:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   23916:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   23918:	6343      	str	r3, [r0, #52]	; 0x34
}
   2391a:	4770      	bx	lr

0002391c <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2391c:	b510      	push	{r4, lr}
   2391e:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   23920:	f7ff ff81 	bl	23826 <z_abort_timeout>

	if (inactive) {
   23924:	b9b0      	cbnz	r0, 23954 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   23926:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23928:	b10b      	cbz	r3, 2392e <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2392a:	4620      	mov	r0, r4
   2392c:	4798      	blx	r3
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   2392e:	f104 0018 	add.w	r0, r4, #24
   23932:	f7ff fe3c 	bl	235ae <z_unpend1_no_timeout>

	if (pending_thread != NULL) {
   23936:	b168      	cbz	r0, 23954 <z_impl_k_timer_stop+0x38>
		z_ready_thread(pending_thread);
   23938:	f7ff fe07 	bl	2354a <z_ready_thread>
	__asm__ volatile(
   2393c:	f04f 0320 	mov.w	r3, #32
   23940:	f3ef 8011 	mrs	r0, BASEPRI
   23944:	f383 8811 	msr	BASEPRI, r3
   23948:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
   2394c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   23950:	f7ff bdae 	b.w	234b0 <z_reschedule_irqlock>
   23954:	bd10      	pop	{r4, pc}

00023956 <clear_event_registrations>:
	while (num_events--) {
   23956:	2314      	movs	r3, #20
{
   23958:	b530      	push	{r4, r5, lr}
   2395a:	fb03 0101 	mla	r1, r3, r1, r0
	event->poller = NULL;
   2395e:	2400      	movs	r4, #0
	while (num_events--) {
   23960:	4281      	cmp	r1, r0
   23962:	d100      	bne.n	23966 <clear_event_registrations+0x10>
}
   23964:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   23966:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   2396a:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   2396e:	f003 030f 	and.w	r3, r3, #15
   23972:	2b02      	cmp	r3, #2
   23974:	d80a      	bhi.n	2398c <clear_event_registrations+0x36>
   23976:	b15b      	cbz	r3, 23990 <clear_event_registrations+0x3a>
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   23978:	f851 3c14 	ldr.w	r3, [r1, #-20]
   2397c:	b143      	cbz	r3, 23990 <clear_event_registrations+0x3a>
	sys_dnode_t *const prev = node->prev;
   2397e:	f851 5c10 	ldr.w	r5, [r1, #-16]
	prev->next = next;
   23982:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   23984:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   23986:	e941 4405 	strd	r4, r4, [r1, #-20]
}
   2398a:	e001      	b.n	23990 <clear_event_registrations+0x3a>
	switch (event->type) {
   2398c:	2b04      	cmp	r3, #4
   2398e:	d0f3      	beq.n	23978 <clear_event_registrations+0x22>
	__asm__ volatile(
   23990:	f382 8811 	msr	BASEPRI, r2
   23994:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   23998:	f04f 0320 	mov.w	r3, #32
   2399c:	f3ef 8211 	mrs	r2, BASEPRI
   239a0:	f383 8811 	msr	BASEPRI, r3
   239a4:	f3bf 8f6f 	isb	sy
   239a8:	3914      	subs	r1, #20
   239aa:	e7d9      	b.n	23960 <clear_event_registrations+0xa>

000239ac <add_event>:
{
   239ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   239ae:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   239b0:	e9d0 2300 	ldrd	r2, r3, [r0]
   239b4:	4290      	cmp	r0, r2
   239b6:	4604      	mov	r4, r0
   239b8:	460d      	mov	r5, r1
   239ba:	d105      	bne.n	239c8 <add_event+0x1c>
	sys_dnode_t *const tail = list->tail;
   239bc:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   239be:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   239c2:	601d      	str	r5, [r3, #0]
	list->tail = node;
   239c4:	6065      	str	r5, [r4, #4]
}
   239c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   239c8:	2b00      	cmp	r3, #0
   239ca:	d0f7      	beq.n	239bc <add_event+0x10>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   239cc:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   239ce:	b100      	cbz	r0, 239d2 <add_event+0x26>
   239d0:	3860      	subs	r0, #96	; 0x60
   239d2:	b107      	cbz	r7, 239d6 <add_event+0x2a>
   239d4:	3f60      	subs	r7, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   239d6:	4639      	mov	r1, r7
   239d8:	f7ff fd3d 	bl	23456 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   239dc:	2800      	cmp	r0, #0
   239de:	dced      	bgt.n	239bc <add_event+0x10>
	return list->head == list;
   239e0:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   239e2:	42b4      	cmp	r4, r6
   239e4:	d0ea      	beq.n	239bc <add_event+0x10>
   239e6:	2e00      	cmp	r6, #0
   239e8:	bf38      	it	cc
   239ea:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   239ec:	2e00      	cmp	r6, #0
   239ee:	d0e5      	beq.n	239bc <add_event+0x10>
		if (z_sched_prio_cmp(poller_thread(poller),
   239f0:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   239f2:	b101      	cbz	r1, 239f6 <add_event+0x4a>
   239f4:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   239f6:	4638      	mov	r0, r7
   239f8:	f7ff fd2d 	bl	23456 <z_sched_prio_cmp>
   239fc:	2800      	cmp	r0, #0
   239fe:	dd05      	ble.n	23a0c <add_event+0x60>
	sys_dnode_t *const prev = successor->prev;
   23a00:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   23a02:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   23a06:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   23a08:	6075      	str	r5, [r6, #4]
			return;
   23a0a:	e7dc      	b.n	239c6 <add_event+0x1a>
	return (node == list->tail) ? NULL : node->next;
   23a0c:	6863      	ldr	r3, [r4, #4]
   23a0e:	42b3      	cmp	r3, r6
   23a10:	d0d4      	beq.n	239bc <add_event+0x10>
   23a12:	6836      	ldr	r6, [r6, #0]
   23a14:	e7ea      	b.n	239ec <add_event+0x40>

00023a16 <register_events>:
{
   23a16:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   23a1a:	f04f 0a00 	mov.w	sl, #0
{
   23a1e:	460e      	mov	r6, r1
   23a20:	4614      	mov	r4, r2
   23a22:	461f      	mov	r7, r3
   23a24:	4683      	mov	fp, r0
	int events_registered = 0;
   23a26:	4655      	mov	r5, sl
	event->poller = NULL;
   23a28:	46d0      	mov	r8, sl
	for (int ii = 0; ii < num_events; ii++) {
   23a2a:	45b2      	cmp	sl, r6
   23a2c:	db02      	blt.n	23a34 <register_events+0x1e>
}
   23a2e:	4628      	mov	r0, r5
   23a30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23a34:	f04f 0320 	mov.w	r3, #32
   23a38:	f3ef 8911 	mrs	r9, BASEPRI
   23a3c:	f383 8811 	msr	BASEPRI, r3
   23a40:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   23a44:	f89b 200d 	ldrb.w	r2, [fp, #13]
   23a48:	f002 020f 	and.w	r2, r2, #15
   23a4c:	2a02      	cmp	r2, #2
   23a4e:	d006      	beq.n	23a5e <register_events+0x48>
   23a50:	2a04      	cmp	r2, #4
   23a52:	d008      	beq.n	23a66 <register_events+0x50>
   23a54:	2a01      	cmp	r2, #1
   23a56:	d120      	bne.n	23a9a <register_events+0x84>
		if (event->signal->signaled != 0U) {
   23a58:	f8db 3010 	ldr.w	r3, [fp, #16]
   23a5c:	e001      	b.n	23a62 <register_events+0x4c>
		if (k_sem_count_get(event->sem) > 0U) {
   23a5e:	f8db 3010 	ldr.w	r3, [fp, #16]
		if (event->signal->signaled != 0U) {
   23a62:	689b      	ldr	r3, [r3, #8]
   23a64:	e002      	b.n	23a6c <register_events+0x56>
		if (!k_queue_is_empty(event->queue)) {
   23a66:	f8db 3010 	ldr.w	r3, [fp, #16]
   23a6a:	681b      	ldr	r3, [r3, #0]
		if (event->signal->signaled != 0U) {
   23a6c:	b1ab      	cbz	r3, 23a9a <register_events+0x84>
	event->state |= state;
   23a6e:	f8db 300c 	ldr.w	r3, [fp, #12]
	event->poller = NULL;
   23a72:	f8cb 8008 	str.w	r8, [fp, #8]
	event->state |= state;
   23a76:	f3c3 3104 	ubfx	r1, r3, #12, #5
   23a7a:	430a      	orrs	r2, r1
   23a7c:	f362 3310 	bfi	r3, r2, #12, #5
   23a80:	f8cb 300c 	str.w	r3, [fp, #12]
			poller->is_polling = false;
   23a84:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   23a88:	f389 8811 	msr	BASEPRI, r9
   23a8c:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   23a90:	f10a 0a01 	add.w	sl, sl, #1
   23a94:	f10b 0b14 	add.w	fp, fp, #20
   23a98:	e7c7      	b.n	23a2a <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   23a9a:	2f00      	cmp	r7, #0
   23a9c:	d1f4      	bne.n	23a88 <register_events+0x72>
   23a9e:	7823      	ldrb	r3, [r4, #0]
   23aa0:	2b00      	cmp	r3, #0
   23aa2:	d0f1      	beq.n	23a88 <register_events+0x72>
	switch (event->type) {
   23aa4:	f89b 300d 	ldrb.w	r3, [fp, #13]
   23aa8:	f003 030f 	and.w	r3, r3, #15
   23aac:	2b02      	cmp	r3, #2
   23aae:	d008      	beq.n	23ac2 <register_events+0xac>
   23ab0:	2b04      	cmp	r3, #4
   23ab2:	d006      	beq.n	23ac2 <register_events+0xac>
   23ab4:	2b01      	cmp	r3, #1
   23ab6:	d10b      	bne.n	23ad0 <register_events+0xba>
		add_event(&event->signal->poll_events, event, poller);
   23ab8:	f8db 0010 	ldr.w	r0, [fp, #16]
   23abc:	4622      	mov	r2, r4
   23abe:	4659      	mov	r1, fp
   23ac0:	e004      	b.n	23acc <register_events+0xb6>
		add_event(&event->queue->poll_events, event, poller);
   23ac2:	f8db 0010 	ldr.w	r0, [fp, #16]
   23ac6:	4622      	mov	r2, r4
   23ac8:	4659      	mov	r1, fp
   23aca:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   23acc:	f7ff ff6e 	bl	239ac <add_event>
	event->poller = poller;
   23ad0:	f8cb 4008 	str.w	r4, [fp, #8]
			events_registered += 1;
   23ad4:	3501      	adds	r5, #1
   23ad6:	e7d7      	b.n	23a88 <register_events+0x72>

00023ad8 <signal_poll_event>:
{
   23ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   23adc:	6884      	ldr	r4, [r0, #8]
{
   23ade:	4605      	mov	r5, r0
   23ae0:	460e      	mov	r6, r1
	if (poller != NULL) {
   23ae2:	b144      	cbz	r4, 23af6 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   23ae4:	7863      	ldrb	r3, [r4, #1]
   23ae6:	2b01      	cmp	r3, #1
   23ae8:	d138      	bne.n	23b5c <signal_poll_event+0x84>
	if (!z_is_thread_pending(thread)) {
   23aea:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   23aee:	f013 0302 	ands.w	r3, r3, #2
   23af2:	d10a      	bne.n	23b0a <signal_poll_event+0x32>
		poller->is_polling = false;
   23af4:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   23af6:	68eb      	ldr	r3, [r5, #12]
   23af8:	f3c3 3104 	ubfx	r1, r3, #12, #5
   23afc:	430e      	orrs	r6, r1
	event->poller = NULL;
   23afe:	2000      	movs	r0, #0
	event->state |= state;
   23b00:	f366 3310 	bfi	r3, r6, #12, #5
	event->poller = NULL;
   23b04:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   23b06:	60eb      	str	r3, [r5, #12]
	return retcode;
   23b08:	e00d      	b.n	23b26 <signal_poll_event+0x4e>
	if (z_is_thread_timeout_expired(thread)) {
   23b0a:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   23b0e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   23b12:	f06f 0001 	mvn.w	r0, #1
   23b16:	428b      	cmp	r3, r1
   23b18:	bf08      	it	eq
   23b1a:	4282      	cmpeq	r2, r0
   23b1c:	d105      	bne.n	23b2a <signal_poll_event+0x52>
		poller->is_polling = false;
   23b1e:	2300      	movs	r3, #0
   23b20:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   23b22:	f06f 000a 	mvn.w	r0, #10
}
   23b26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   23b2a:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   23b2e:	4640      	mov	r0, r8
   23b30:	f7ff fcaa 	bl	23488 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   23b34:	2e08      	cmp	r6, #8
   23b36:	bf0c      	ite	eq
   23b38:	f06f 0303 	mvneq.w	r3, #3
   23b3c:	2300      	movne	r3, #0
   23b3e:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   23b40:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   23b44:	06db      	lsls	r3, r3, #27
   23b46:	d102      	bne.n	23b4e <signal_poll_event+0x76>
	if (!z_is_thread_ready(thread)) {
   23b48:	f854 7c48 	ldr.w	r7, [r4, #-72]
   23b4c:	b10f      	cbz	r7, 23b52 <signal_poll_event+0x7a>
		poller->is_polling = false;
   23b4e:	2300      	movs	r3, #0
   23b50:	e7d0      	b.n	23af4 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   23b52:	4640      	mov	r0, r8
   23b54:	f7ff fcf9 	bl	2354a <z_ready_thread>
		poller->is_polling = false;
   23b58:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   23b5a:	e7cc      	b.n	23af6 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   23b5c:	2b02      	cmp	r3, #2
   23b5e:	d1f6      	bne.n	23b4e <signal_poll_event+0x76>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   23b60:	7823      	ldrb	r3, [r4, #0]
   23b62:	2b00      	cmp	r3, #0
   23b64:	d0c7      	beq.n	23af6 <signal_poll_event+0x1e>
   23b66:	f854 7c04 	ldr.w	r7, [r4, #-4]
   23b6a:	2f00      	cmp	r7, #0
   23b6c:	d0f4      	beq.n	23b58 <signal_poll_event+0x80>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   23b6e:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   23b72:	f1a4 0914 	sub.w	r9, r4, #20
   23b76:	f104 0014 	add.w	r0, r4, #20
   23b7a:	f7ff fe54 	bl	23826 <z_abort_timeout>
		twork->poll_result = 0;
   23b7e:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   23b82:	4649      	mov	r1, r9
   23b84:	4638      	mov	r0, r7
   23b86:	f7ff fdfd 	bl	23784 <k_work_submit_to_queue>
		poller->is_polling = false;
   23b8a:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   23b8e:	e7b2      	b.n	23af6 <signal_poll_event+0x1e>

00023b90 <k_poll_event_init>:
{
   23b90:	b510      	push	{r4, lr}
	event->type = type;
   23b92:	0452      	lsls	r2, r2, #17
   23b94:	0209      	lsls	r1, r1, #8
   23b96:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
   23b9a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
   23b9e:	430a      	orrs	r2, r1
   23ba0:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   23ba2:	2400      	movs	r4, #0
	event->type = type;
   23ba4:	430a      	orrs	r2, r1
	event->obj = obj;
   23ba6:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   23baa:	6084      	str	r4, [r0, #8]
}
   23bac:	bd10      	pop	{r4, pc}

00023bae <z_handle_obj_poll_events>:
{
   23bae:	4603      	mov	r3, r0
	return list->head == list;
   23bb0:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   23bb2:	4283      	cmp	r3, r0
   23bb4:	d008      	beq.n	23bc8 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   23bb6:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   23bba:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   23bbc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   23bbe:	2300      	movs	r3, #0
	node->prev = NULL;
   23bc0:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   23bc4:	f7ff bf88 	b.w	23ad8 <signal_poll_event>
}
   23bc8:	4770      	bx	lr

00023bca <k_free>:
	if (ptr != NULL) {
   23bca:	b120      	cbz	r0, 23bd6 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   23bcc:	1f01      	subs	r1, r0, #4
   23bce:	f850 0c04 	ldr.w	r0, [r0, #-4]
   23bd2:	f7ff bb29 	b.w	23228 <k_heap_free>
}
   23bd6:	4770      	bx	lr

00023bd8 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   23bd8:	4770      	bx	lr

00023bda <atoi>:
   23bda:	220a      	movs	r2, #10
   23bdc:	2100      	movs	r1, #0
   23bde:	f7fa be51 	b.w	1e884 <strtol>

00023be2 <memcmp>:
   23be2:	b530      	push	{r4, r5, lr}
   23be4:	3901      	subs	r1, #1
   23be6:	2400      	movs	r4, #0
   23be8:	42a2      	cmp	r2, r4
   23bea:	d101      	bne.n	23bf0 <memcmp+0xe>
   23bec:	2000      	movs	r0, #0
   23bee:	e005      	b.n	23bfc <memcmp+0x1a>
   23bf0:	5d03      	ldrb	r3, [r0, r4]
   23bf2:	3401      	adds	r4, #1
   23bf4:	5d0d      	ldrb	r5, [r1, r4]
   23bf6:	42ab      	cmp	r3, r5
   23bf8:	d0f6      	beq.n	23be8 <memcmp+0x6>
   23bfa:	1b58      	subs	r0, r3, r5
   23bfc:	bd30      	pop	{r4, r5, pc}

00023bfe <memcpy>:
   23bfe:	440a      	add	r2, r1
   23c00:	4291      	cmp	r1, r2
   23c02:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   23c06:	d100      	bne.n	23c0a <memcpy+0xc>
   23c08:	4770      	bx	lr
   23c0a:	b510      	push	{r4, lr}
   23c0c:	f811 4b01 	ldrb.w	r4, [r1], #1
   23c10:	f803 4f01 	strb.w	r4, [r3, #1]!
   23c14:	4291      	cmp	r1, r2
   23c16:	d1f9      	bne.n	23c0c <memcpy+0xe>
   23c18:	bd10      	pop	{r4, pc}

00023c1a <memset>:
   23c1a:	4402      	add	r2, r0
   23c1c:	4603      	mov	r3, r0
   23c1e:	4293      	cmp	r3, r2
   23c20:	d100      	bne.n	23c24 <memset+0xa>
   23c22:	4770      	bx	lr
   23c24:	f803 1b01 	strb.w	r1, [r3], #1
   23c28:	e7f9      	b.n	23c1e <memset+0x4>

00023c2a <strcpy>:
   23c2a:	4603      	mov	r3, r0
   23c2c:	f811 2b01 	ldrb.w	r2, [r1], #1
   23c30:	f803 2b01 	strb.w	r2, [r3], #1
   23c34:	2a00      	cmp	r2, #0
   23c36:	d1f9      	bne.n	23c2c <strcpy+0x2>
   23c38:	4770      	bx	lr

00023c3a <strncpy>:
   23c3a:	b510      	push	{r4, lr}
   23c3c:	3901      	subs	r1, #1
   23c3e:	4603      	mov	r3, r0
   23c40:	b132      	cbz	r2, 23c50 <strncpy+0x16>
   23c42:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   23c46:	f803 4b01 	strb.w	r4, [r3], #1
   23c4a:	3a01      	subs	r2, #1
   23c4c:	2c00      	cmp	r4, #0
   23c4e:	d1f7      	bne.n	23c40 <strncpy+0x6>
   23c50:	441a      	add	r2, r3
   23c52:	2100      	movs	r1, #0
   23c54:	4293      	cmp	r3, r2
   23c56:	d100      	bne.n	23c5a <strncpy+0x20>
   23c58:	bd10      	pop	{r4, pc}
   23c5a:	f803 1b01 	strb.w	r1, [r3], #1
   23c5e:	e7f9      	b.n	23c54 <strncpy+0x1a>

00023c60 <strnlen>:
   23c60:	b510      	push	{r4, lr}
   23c62:	4602      	mov	r2, r0
   23c64:	4401      	add	r1, r0
   23c66:	428a      	cmp	r2, r1
   23c68:	4613      	mov	r3, r2
   23c6a:	d101      	bne.n	23c70 <strnlen+0x10>
   23c6c:	1a18      	subs	r0, r3, r0
   23c6e:	bd10      	pop	{r4, pc}
   23c70:	781c      	ldrb	r4, [r3, #0]
   23c72:	3201      	adds	r2, #1
   23c74:	2c00      	cmp	r4, #0
   23c76:	d1f6      	bne.n	23c66 <strnlen+0x6>
   23c78:	e7f8      	b.n	23c6c <strnlen+0xc>
