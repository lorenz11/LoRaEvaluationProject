
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
   0:	20007000 	.word	0x20007000
   4:	00006475 	.word	0x00006475
   8:	00026a79 	.word	0x00026a79
   c:	000064a5 	.word	0x000064a5
  10:	000064a5 	.word	0x000064a5
  14:	000064a5 	.word	0x000064a5
  18:	000064a5 	.word	0x000064a5
	...
  2c:	00005f79 	.word	0x00005f79
  30:	000064a5 	.word	0x000064a5
  34:	00000000 	.word	0x00000000
  38:	00005f09 	.word	0x00005f09
  3c:	000257df 	.word	0x000257df

00000040 <_irq_vector_table>:
  40:	000062f5 00019b41 000062f5 000062f5     .b..A....b...b..
  50:	000062f5 000062f5 000062f5 000062f5     .b...b...b...b..
  60:	000062f5 000062f5 000062f5 000062f5     .b...b...b...b..
  70:	000062f5 000062f5 000062f5 000062f5     .b...b...b...b..
  80:	000062f5 000062f5 000062f5 000062f5     .b...b...b...b..
  90:	000062f5 000062f5 000062f5 000062f5     .b...b...b...b..
  a0:	000062f5 000062f5 000062f5 000062f5     .b...b...b...b..
  b0:	000062f5 000062f5 000062f5 000062f5     .b...b...b...b..
  c0:	000062f5 000062f5 000062f5 000062f5     .b...b...b...b..
  d0:	000062f5 000062f5 000062f5 000062f5     .b...b...b...b..
  e0:	000062f5 000062f5 000062f5 000062f5     .b...b...b...b..
  f0:	000062f5 000062f5 000062f5 000062f5     .b...b...b...b..

Disassembly of section text:

00000100 <z_object_find>:
     100:	4b0a      	ldr	r3, [pc, #40]	; (12c <CONFIG_KOBJECT_TEXT_AREA+0x2c>)
     102:	f3c0 2207 	ubfx	r2, r0, #8, #8
     106:	b2c1      	uxtb	r1, r0
     108:	5c9a      	ldrb	r2, [r3, r2]
     10a:	5c5b      	ldrb	r3, [r3, r1]
     10c:	4413      	add	r3, r2
     10e:	2b78      	cmp	r3, #120	; 0x78
     110:	dc09      	bgt.n	126 <z_object_find+0x26>
     112:	220c      	movs	r2, #12
     114:	4906      	ldr	r1, [pc, #24]	; (130 <CONFIG_KOBJECT_TEXT_AREA+0x30>)
     116:	435a      	muls	r2, r3
     118:	188b      	adds	r3, r1, r2
     11a:	588a      	ldr	r2, [r1, r2]
     11c:	4290      	cmp	r0, r2
     11e:	bf0c      	ite	eq
     120:	4618      	moveq	r0, r3
     122:	2000      	movne	r0, #0
     124:	4770      	bx	lr
     126:	2000      	movs	r0, #0
     128:	4770      	bx	lr
     12a:	bf00      	nop
     12c:	0002f9fc 	.word	0x0002f9fc
     130:	20007fe0 	.word	0x20007fe0

00000134 <z_object_gperf_wordlist_foreach>:
     134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     136:	4c07      	ldr	r4, [pc, #28]	; (154 <CONFIG_IDLE_STACK_SIZE+0x14>)
     138:	4606      	mov	r6, r0
     13a:	460f      	mov	r7, r1
     13c:	2500      	movs	r5, #0
     13e:	6823      	ldr	r3, [r4, #0]
     140:	b113      	cbz	r3, 148 <CONFIG_IDLE_STACK_SIZE+0x8>
     142:	4639      	mov	r1, r7
     144:	4620      	mov	r0, r4
     146:	47b0      	blx	r6
     148:	3501      	adds	r5, #1
     14a:	2d79      	cmp	r5, #121	; 0x79
     14c:	f104 040c 	add.w	r4, r4, #12
     150:	d1f5      	bne.n	13e <z_object_gperf_wordlist_foreach+0xa>
     152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     154:	20007fe0 	.word	0x20007fe0

00000158 <_kobject_text_area_end>:
	...

00000200 <__aeabi_drsub>:
     200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     204:	e002      	b.n	20c <__adddf3>
     206:	bf00      	nop

00000208 <__aeabi_dsub>:
     208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000020c <__adddf3>:
     20c:	b530      	push	{r4, r5, lr}
     20e:	ea4f 0441 	mov.w	r4, r1, lsl #1
     212:	ea4f 0543 	mov.w	r5, r3, lsl #1
     216:	ea94 0f05 	teq	r4, r5
     21a:	bf08      	it	eq
     21c:	ea90 0f02 	teqeq	r0, r2
     220:	bf1f      	itttt	ne
     222:	ea54 0c00 	orrsne.w	ip, r4, r0
     226:	ea55 0c02 	orrsne.w	ip, r5, r2
     22a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     22e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     232:	f000 80e2 	beq.w	3fa <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x12>
     236:	ea4f 5454 	mov.w	r4, r4, lsr #21
     23a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     23e:	bfb8      	it	lt
     240:	426d      	neglt	r5, r5
     242:	dd0c      	ble.n	25e <__adddf3+0x52>
     244:	442c      	add	r4, r5
     246:	ea80 0202 	eor.w	r2, r0, r2
     24a:	ea81 0303 	eor.w	r3, r1, r3
     24e:	ea82 0000 	eor.w	r0, r2, r0
     252:	ea83 0101 	eor.w	r1, r3, r1
     256:	ea80 0202 	eor.w	r2, r0, r2
     25a:	ea81 0303 	eor.w	r3, r1, r3
     25e:	2d36      	cmp	r5, #54	; 0x36
     260:	bf88      	it	hi
     262:	bd30      	pophi	{r4, r5, pc}
     264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     268:	ea4f 3101 	mov.w	r1, r1, lsl #12
     26c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     274:	d002      	beq.n	27c <__adddf3+0x70>
     276:	4240      	negs	r0, r0
     278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     27c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     280:	ea4f 3303 	mov.w	r3, r3, lsl #12
     284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     288:	d002      	beq.n	290 <CONFIG_BT_HCI_TX_STACK_SIZE+0x10>
     28a:	4252      	negs	r2, r2
     28c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     290:	ea94 0f05 	teq	r4, r5
     294:	f000 80a7 	beq.w	3e6 <CONFIG_BT_DEVICE_APPEARANCE+0xa5>
     298:	f1a4 0401 	sub.w	r4, r4, #1
     29c:	f1d5 0e20 	rsbs	lr, r5, #32
     2a0:	db0d      	blt.n	2be <CONFIG_BT_HCI_TX_STACK_SIZE+0x3e>
     2a2:	fa02 fc0e 	lsl.w	ip, r2, lr
     2a6:	fa22 f205 	lsr.w	r2, r2, r5
     2aa:	1880      	adds	r0, r0, r2
     2ac:	f141 0100 	adc.w	r1, r1, #0
     2b0:	fa03 f20e 	lsl.w	r2, r3, lr
     2b4:	1880      	adds	r0, r0, r2
     2b6:	fa43 f305 	asr.w	r3, r3, r5
     2ba:	4159      	adcs	r1, r3
     2bc:	e00e      	b.n	2dc <CONFIG_BT_HCI_TX_STACK_SIZE+0x5c>
     2be:	f1a5 0520 	sub.w	r5, r5, #32
     2c2:	f10e 0e20 	add.w	lr, lr, #32
     2c6:	2a01      	cmp	r2, #1
     2c8:	fa03 fc0e 	lsl.w	ip, r3, lr
     2cc:	bf28      	it	cs
     2ce:	f04c 0c02 	orrcs.w	ip, ip, #2
     2d2:	fa43 f305 	asr.w	r3, r3, r5
     2d6:	18c0      	adds	r0, r0, r3
     2d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     2dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     2e0:	d507      	bpl.n	2f2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x72>
     2e2:	f04f 0e00 	mov.w	lr, #0
     2e6:	f1dc 0c00 	rsbs	ip, ip, #0
     2ea:	eb7e 0000 	sbcs.w	r0, lr, r0
     2ee:	eb6e 0101 	sbc.w	r1, lr, r1
     2f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     2f6:	d31b      	bcc.n	330 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x30>
     2f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     2fc:	d30c      	bcc.n	318 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x18>
     2fe:	0849      	lsrs	r1, r1, #1
     300:	ea5f 0030 	movs.w	r0, r0, rrx
     304:	ea4f 0c3c 	mov.w	ip, ip, rrx
     308:	f104 0401 	add.w	r4, r4, #1
     30c:	ea4f 5244 	mov.w	r2, r4, lsl #21
     310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     314:	f080 809a 	bcs.w	44c <CONFIG_BT_HCI_ECC_STACK_SIZE>
     318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     31c:	bf08      	it	eq
     31e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     322:	f150 0000 	adcs.w	r0, r0, #0
     326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     32a:	ea41 0105 	orr.w	r1, r1, r5
     32e:	bd30      	pop	{r4, r5, pc}
     330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     334:	4140      	adcs	r0, r0
     336:	eb41 0101 	adc.w	r1, r1, r1
     33a:	3c01      	subs	r4, #1
     33c:	bf28      	it	cs
     33e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     342:	d2e9      	bcs.n	318 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x18>
     344:	f091 0f00 	teq	r1, #0
     348:	bf04      	itt	eq
     34a:	4601      	moveq	r1, r0
     34c:	2000      	moveq	r0, #0
     34e:	fab1 f381 	clz	r3, r1
     352:	bf08      	it	eq
     354:	3320      	addeq	r3, #32
     356:	f1a3 030b 	sub.w	r3, r3, #11
     35a:	f1b3 0220 	subs.w	r2, r3, #32
     35e:	da0c      	bge.n	37a <CONFIG_BT_DEVICE_APPEARANCE+0x39>
     360:	320c      	adds	r2, #12
     362:	dd08      	ble.n	376 <CONFIG_BT_DEVICE_APPEARANCE+0x35>
     364:	f102 0c14 	add.w	ip, r2, #20
     368:	f1c2 020c 	rsb	r2, r2, #12
     36c:	fa01 f00c 	lsl.w	r0, r1, ip
     370:	fa21 f102 	lsr.w	r1, r1, r2
     374:	e00c      	b.n	390 <CONFIG_BT_DEVICE_APPEARANCE+0x4f>
     376:	f102 0214 	add.w	r2, r2, #20
     37a:	bfd8      	it	le
     37c:	f1c2 0c20 	rsble	ip, r2, #32
     380:	fa01 f102 	lsl.w	r1, r1, r2
     384:	fa20 fc0c 	lsr.w	ip, r0, ip
     388:	bfdc      	itt	le
     38a:	ea41 010c 	orrle.w	r1, r1, ip
     38e:	4090      	lslle	r0, r2
     390:	1ae4      	subs	r4, r4, r3
     392:	bfa2      	ittt	ge
     394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     398:	4329      	orrge	r1, r5
     39a:	bd30      	popge	{r4, r5, pc}
     39c:	ea6f 0404 	mvn.w	r4, r4
     3a0:	3c1f      	subs	r4, #31
     3a2:	da1c      	bge.n	3de <CONFIG_BT_DEVICE_APPEARANCE+0x9d>
     3a4:	340c      	adds	r4, #12
     3a6:	dc0e      	bgt.n	3c6 <CONFIG_BT_DEVICE_APPEARANCE+0x85>
     3a8:	f104 0414 	add.w	r4, r4, #20
     3ac:	f1c4 0220 	rsb	r2, r4, #32
     3b0:	fa20 f004 	lsr.w	r0, r0, r4
     3b4:	fa01 f302 	lsl.w	r3, r1, r2
     3b8:	ea40 0003 	orr.w	r0, r0, r3
     3bc:	fa21 f304 	lsr.w	r3, r1, r4
     3c0:	ea45 0103 	orr.w	r1, r5, r3
     3c4:	bd30      	pop	{r4, r5, pc}
     3c6:	f1c4 040c 	rsb	r4, r4, #12
     3ca:	f1c4 0220 	rsb	r2, r4, #32
     3ce:	fa20 f002 	lsr.w	r0, r0, r2
     3d2:	fa01 f304 	lsl.w	r3, r1, r4
     3d6:	ea40 0003 	orr.w	r0, r0, r3
     3da:	4629      	mov	r1, r5
     3dc:	bd30      	pop	{r4, r5, pc}
     3de:	fa21 f004 	lsr.w	r0, r1, r4
     3e2:	4629      	mov	r1, r5
     3e4:	bd30      	pop	{r4, r5, pc}
     3e6:	f094 0f00 	teq	r4, #0
     3ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     3ee:	bf06      	itte	eq
     3f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     3f4:	3401      	addeq	r4, #1
     3f6:	3d01      	subne	r5, #1
     3f8:	e74e      	b.n	298 <CONFIG_BT_HCI_TX_STACK_SIZE+0x18>
     3fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     3fe:	bf18      	it	ne
     400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     404:	d029      	beq.n	45a <CONFIG_BT_HCI_ECC_STACK_SIZE+0xe>
     406:	ea94 0f05 	teq	r4, r5
     40a:	bf08      	it	eq
     40c:	ea90 0f02 	teqeq	r0, r2
     410:	d005      	beq.n	41e <CONFIG_BT_RX_STACK_SIZE+0x1e>
     412:	ea54 0c00 	orrs.w	ip, r4, r0
     416:	bf04      	itt	eq
     418:	4619      	moveq	r1, r3
     41a:	4610      	moveq	r0, r2
     41c:	bd30      	pop	{r4, r5, pc}
     41e:	ea91 0f03 	teq	r1, r3
     422:	bf1e      	ittt	ne
     424:	2100      	movne	r1, #0
     426:	2000      	movne	r0, #0
     428:	bd30      	popne	{r4, r5, pc}
     42a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     42e:	d105      	bne.n	43c <CONFIG_BT_RX_STACK_SIZE+0x3c>
     430:	0040      	lsls	r0, r0, #1
     432:	4149      	adcs	r1, r1
     434:	bf28      	it	cs
     436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     43a:	bd30      	pop	{r4, r5, pc}
     43c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     440:	bf3c      	itt	cc
     442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     446:	bd30      	popcc	{r4, r5, pc}
     448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     44c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     454:	f04f 0000 	mov.w	r0, #0
     458:	bd30      	pop	{r4, r5, pc}
     45a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     45e:	bf1a      	itte	ne
     460:	4619      	movne	r1, r3
     462:	4610      	movne	r0, r2
     464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     468:	bf1c      	itt	ne
     46a:	460b      	movne	r3, r1
     46c:	4602      	movne	r2, r0
     46e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     472:	bf06      	itte	eq
     474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     478:	ea91 0f03 	teqeq	r1, r3
     47c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     480:	bd30      	pop	{r4, r5, pc}
     482:	bf00      	nop

00000484 <__aeabi_ui2d>:
     484:	f090 0f00 	teq	r0, #0
     488:	bf04      	itt	eq
     48a:	2100      	moveq	r1, #0
     48c:	4770      	bxeq	lr
     48e:	b530      	push	{r4, r5, lr}
     490:	f44f 6480 	mov.w	r4, #1024	; 0x400
     494:	f104 0432 	add.w	r4, r4, #50	; 0x32
     498:	f04f 0500 	mov.w	r5, #0
     49c:	f04f 0100 	mov.w	r1, #0
     4a0:	e750      	b.n	344 <CONFIG_BT_DEVICE_APPEARANCE+0x3>
     4a2:	bf00      	nop

000004a4 <__aeabi_i2d>:
     4a4:	f090 0f00 	teq	r0, #0
     4a8:	bf04      	itt	eq
     4aa:	2100      	moveq	r1, #0
     4ac:	4770      	bxeq	lr
     4ae:	b530      	push	{r4, r5, lr}
     4b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
     4b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
     4b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     4bc:	bf48      	it	mi
     4be:	4240      	negmi	r0, r0
     4c0:	f04f 0100 	mov.w	r1, #0
     4c4:	e73e      	b.n	344 <CONFIG_BT_DEVICE_APPEARANCE+0x3>
     4c6:	bf00      	nop

000004c8 <__aeabi_f2d>:
     4c8:	0042      	lsls	r2, r0, #1
     4ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
     4ce:	ea4f 0131 	mov.w	r1, r1, rrx
     4d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     4d6:	bf1f      	itttt	ne
     4d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     4dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     4e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     4e4:	4770      	bxne	lr
     4e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     4ea:	bf08      	it	eq
     4ec:	4770      	bxeq	lr
     4ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     4f2:	bf04      	itt	eq
     4f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     4f8:	4770      	bxeq	lr
     4fa:	b530      	push	{r4, r5, lr}
     4fc:	f44f 7460 	mov.w	r4, #896	; 0x380
     500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     508:	e71c      	b.n	344 <CONFIG_BT_DEVICE_APPEARANCE+0x3>
     50a:	bf00      	nop

0000050c <__aeabi_ul2d>:
     50c:	ea50 0201 	orrs.w	r2, r0, r1
     510:	bf08      	it	eq
     512:	4770      	bxeq	lr
     514:	b530      	push	{r4, r5, lr}
     516:	f04f 0500 	mov.w	r5, #0
     51a:	e00a      	b.n	532 <__aeabi_l2d+0x16>

0000051c <__aeabi_l2d>:
     51c:	ea50 0201 	orrs.w	r2, r0, r1
     520:	bf08      	it	eq
     522:	4770      	bxeq	lr
     524:	b530      	push	{r4, r5, lr}
     526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     52a:	d502      	bpl.n	532 <__aeabi_l2d+0x16>
     52c:	4240      	negs	r0, r0
     52e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     532:	f44f 6480 	mov.w	r4, #1024	; 0x400
     536:	f104 0432 	add.w	r4, r4, #50	; 0x32
     53a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     53e:	f43f aed8 	beq.w	2f2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x72>
     542:	f04f 0203 	mov.w	r2, #3
     546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     54a:	bf18      	it	ne
     54c:	3203      	addne	r2, #3
     54e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     552:	bf18      	it	ne
     554:	3203      	addne	r2, #3
     556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     55a:	f1c2 0320 	rsb	r3, r2, #32
     55e:	fa00 fc03 	lsl.w	ip, r0, r3
     562:	fa20 f002 	lsr.w	r0, r0, r2
     566:	fa01 fe03 	lsl.w	lr, r1, r3
     56a:	ea40 000e 	orr.w	r0, r0, lr
     56e:	fa21 f102 	lsr.w	r1, r1, r2
     572:	4414      	add	r4, r2
     574:	e6bd      	b.n	2f2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x72>
     576:	bf00      	nop

00000578 <__aeabi_dmul>:
     578:	b570      	push	{r4, r5, r6, lr}
     57a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     57e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     586:	bf1d      	ittte	ne
     588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     58c:	ea94 0f0c 	teqne	r4, ip
     590:	ea95 0f0c 	teqne	r5, ip
     594:	f000 f8de 	bleq	754 <CONFIG_BT_COMPANY_ID+0x163>
     598:	442c      	add	r4, r5
     59a:	ea81 0603 	eor.w	r6, r1, r3
     59e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     5a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     5a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     5aa:	bf18      	it	ne
     5ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     5b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     5b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     5b8:	d038      	beq.n	62c <CONFIG_BT_COMPANY_ID+0x3b>
     5ba:	fba0 ce02 	umull	ip, lr, r0, r2
     5be:	f04f 0500 	mov.w	r5, #0
     5c2:	fbe1 e502 	umlal	lr, r5, r1, r2
     5c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     5ca:	fbe0 e503 	umlal	lr, r5, r0, r3
     5ce:	f04f 0600 	mov.w	r6, #0
     5d2:	fbe1 5603 	umlal	r5, r6, r1, r3
     5d6:	f09c 0f00 	teq	ip, #0
     5da:	bf18      	it	ne
     5dc:	f04e 0e01 	orrne.w	lr, lr, #1
     5e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     5e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     5e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     5ec:	d204      	bcs.n	5f8 <CONFIG_BT_COMPANY_ID+0x7>
     5ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     5f2:	416d      	adcs	r5, r5
     5f4:	eb46 0606 	adc.w	r6, r6, r6
     5f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     5fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     60c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     610:	bf88      	it	hi
     612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     616:	d81e      	bhi.n	656 <CONFIG_BT_COMPANY_ID+0x65>
     618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     61c:	bf08      	it	eq
     61e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     622:	f150 0000 	adcs.w	r0, r0, #0
     626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     62a:	bd70      	pop	{r4, r5, r6, pc}
     62c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     630:	ea46 0101 	orr.w	r1, r6, r1
     634:	ea40 0002 	orr.w	r0, r0, r2
     638:	ea81 0103 	eor.w	r1, r1, r3
     63c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     640:	bfc2      	ittt	gt
     642:	ebd4 050c 	rsbsgt	r5, r4, ip
     646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     64a:	bd70      	popgt	{r4, r5, r6, pc}
     64c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     650:	f04f 0e00 	mov.w	lr, #0
     654:	3c01      	subs	r4, #1
     656:	f300 80ab 	bgt.w	7b0 <CONFIG_BT_COMPANY_ID+0x1bf>
     65a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     65e:	bfde      	ittt	le
     660:	2000      	movle	r0, #0
     662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     666:	bd70      	pople	{r4, r5, r6, pc}
     668:	f1c4 0400 	rsb	r4, r4, #0
     66c:	3c20      	subs	r4, #32
     66e:	da35      	bge.n	6dc <CONFIG_BT_COMPANY_ID+0xeb>
     670:	340c      	adds	r4, #12
     672:	dc1b      	bgt.n	6ac <CONFIG_BT_COMPANY_ID+0xbb>
     674:	f104 0414 	add.w	r4, r4, #20
     678:	f1c4 0520 	rsb	r5, r4, #32
     67c:	fa00 f305 	lsl.w	r3, r0, r5
     680:	fa20 f004 	lsr.w	r0, r0, r4
     684:	fa01 f205 	lsl.w	r2, r1, r5
     688:	ea40 0002 	orr.w	r0, r0, r2
     68c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     698:	fa21 f604 	lsr.w	r6, r1, r4
     69c:	eb42 0106 	adc.w	r1, r2, r6
     6a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     6a4:	bf08      	it	eq
     6a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     6aa:	bd70      	pop	{r4, r5, r6, pc}
     6ac:	f1c4 040c 	rsb	r4, r4, #12
     6b0:	f1c4 0520 	rsb	r5, r4, #32
     6b4:	fa00 f304 	lsl.w	r3, r0, r4
     6b8:	fa20 f005 	lsr.w	r0, r0, r5
     6bc:	fa01 f204 	lsl.w	r2, r1, r4
     6c0:	ea40 0002 	orr.w	r0, r0, r2
     6c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     6cc:	f141 0100 	adc.w	r1, r1, #0
     6d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     6d4:	bf08      	it	eq
     6d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     6da:	bd70      	pop	{r4, r5, r6, pc}
     6dc:	f1c4 0520 	rsb	r5, r4, #32
     6e0:	fa00 f205 	lsl.w	r2, r0, r5
     6e4:	ea4e 0e02 	orr.w	lr, lr, r2
     6e8:	fa20 f304 	lsr.w	r3, r0, r4
     6ec:	fa01 f205 	lsl.w	r2, r1, r5
     6f0:	ea43 0302 	orr.w	r3, r3, r2
     6f4:	fa21 f004 	lsr.w	r0, r1, r4
     6f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6fc:	fa21 f204 	lsr.w	r2, r1, r4
     700:	ea20 0002 	bic.w	r0, r0, r2
     704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     70c:	bf08      	it	eq
     70e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     712:	bd70      	pop	{r4, r5, r6, pc}
     714:	f094 0f00 	teq	r4, #0
     718:	d10f      	bne.n	73a <CONFIG_BT_COMPANY_ID+0x149>
     71a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     71e:	0040      	lsls	r0, r0, #1
     720:	eb41 0101 	adc.w	r1, r1, r1
     724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     728:	bf08      	it	eq
     72a:	3c01      	subeq	r4, #1
     72c:	d0f7      	beq.n	71e <CONFIG_BT_COMPANY_ID+0x12d>
     72e:	ea41 0106 	orr.w	r1, r1, r6
     732:	f095 0f00 	teq	r5, #0
     736:	bf18      	it	ne
     738:	4770      	bxne	lr
     73a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     73e:	0052      	lsls	r2, r2, #1
     740:	eb43 0303 	adc.w	r3, r3, r3
     744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     748:	bf08      	it	eq
     74a:	3d01      	subeq	r5, #1
     74c:	d0f7      	beq.n	73e <CONFIG_BT_COMPANY_ID+0x14d>
     74e:	ea43 0306 	orr.w	r3, r3, r6
     752:	4770      	bx	lr
     754:	ea94 0f0c 	teq	r4, ip
     758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     75c:	bf18      	it	ne
     75e:	ea95 0f0c 	teqne	r5, ip
     762:	d00c      	beq.n	77e <CONFIG_BT_COMPANY_ID+0x18d>
     764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     768:	bf18      	it	ne
     76a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     76e:	d1d1      	bne.n	714 <CONFIG_BT_COMPANY_ID+0x123>
     770:	ea81 0103 	eor.w	r1, r1, r3
     774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     778:	f04f 0000 	mov.w	r0, #0
     77c:	bd70      	pop	{r4, r5, r6, pc}
     77e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     782:	bf06      	itte	eq
     784:	4610      	moveq	r0, r2
     786:	4619      	moveq	r1, r3
     788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     78c:	d019      	beq.n	7c2 <CONFIG_BT_COMPANY_ID+0x1d1>
     78e:	ea94 0f0c 	teq	r4, ip
     792:	d102      	bne.n	79a <CONFIG_BT_COMPANY_ID+0x1a9>
     794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     798:	d113      	bne.n	7c2 <CONFIG_BT_COMPANY_ID+0x1d1>
     79a:	ea95 0f0c 	teq	r5, ip
     79e:	d105      	bne.n	7ac <CONFIG_BT_COMPANY_ID+0x1bb>
     7a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     7a4:	bf1c      	itt	ne
     7a6:	4610      	movne	r0, r2
     7a8:	4619      	movne	r1, r3
     7aa:	d10a      	bne.n	7c2 <CONFIG_BT_COMPANY_ID+0x1d1>
     7ac:	ea81 0103 	eor.w	r1, r1, r3
     7b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     7b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     7b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     7bc:	f04f 0000 	mov.w	r0, #0
     7c0:	bd70      	pop	{r4, r5, r6, pc}
     7c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     7c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     7ca:	bd70      	pop	{r4, r5, r6, pc}

000007cc <__aeabi_ddiv>:
     7cc:	b570      	push	{r4, r5, r6, lr}
     7ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
     7d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     7d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     7da:	bf1d      	ittte	ne
     7dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     7e0:	ea94 0f0c 	teqne	r4, ip
     7e4:	ea95 0f0c 	teqne	r5, ip
     7e8:	f000 f8a7 	bleq	93a <CONFIG_ISR_STACK_SIZE+0x13a>
     7ec:	eba4 0405 	sub.w	r4, r4, r5
     7f0:	ea81 0e03 	eor.w	lr, r1, r3
     7f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     7f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     7fc:	f000 8088 	beq.w	910 <CONFIG_ISR_STACK_SIZE+0x110>
     800:	ea4f 3303 	mov.w	r3, r3, lsl #12
     804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     80c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     810:	ea4f 2202 	mov.w	r2, r2, lsl #8
     814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     81c:	ea4f 2600 	mov.w	r6, r0, lsl #8
     820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     824:	429d      	cmp	r5, r3
     826:	bf08      	it	eq
     828:	4296      	cmpeq	r6, r2
     82a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     82e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     832:	d202      	bcs.n	83a <CONFIG_ISR_STACK_SIZE+0x3a>
     834:	085b      	lsrs	r3, r3, #1
     836:	ea4f 0232 	mov.w	r2, r2, rrx
     83a:	1ab6      	subs	r6, r6, r2
     83c:	eb65 0503 	sbc.w	r5, r5, r3
     840:	085b      	lsrs	r3, r3, #1
     842:	ea4f 0232 	mov.w	r2, r2, rrx
     846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     84a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     84e:	ebb6 0e02 	subs.w	lr, r6, r2
     852:	eb75 0e03 	sbcs.w	lr, r5, r3
     856:	bf22      	ittt	cs
     858:	1ab6      	subcs	r6, r6, r2
     85a:	4675      	movcs	r5, lr
     85c:	ea40 000c 	orrcs.w	r0, r0, ip
     860:	085b      	lsrs	r3, r3, #1
     862:	ea4f 0232 	mov.w	r2, r2, rrx
     866:	ebb6 0e02 	subs.w	lr, r6, r2
     86a:	eb75 0e03 	sbcs.w	lr, r5, r3
     86e:	bf22      	ittt	cs
     870:	1ab6      	subcs	r6, r6, r2
     872:	4675      	movcs	r5, lr
     874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     878:	085b      	lsrs	r3, r3, #1
     87a:	ea4f 0232 	mov.w	r2, r2, rrx
     87e:	ebb6 0e02 	subs.w	lr, r6, r2
     882:	eb75 0e03 	sbcs.w	lr, r5, r3
     886:	bf22      	ittt	cs
     888:	1ab6      	subcs	r6, r6, r2
     88a:	4675      	movcs	r5, lr
     88c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     890:	085b      	lsrs	r3, r3, #1
     892:	ea4f 0232 	mov.w	r2, r2, rrx
     896:	ebb6 0e02 	subs.w	lr, r6, r2
     89a:	eb75 0e03 	sbcs.w	lr, r5, r3
     89e:	bf22      	ittt	cs
     8a0:	1ab6      	subcs	r6, r6, r2
     8a2:	4675      	movcs	r5, lr
     8a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     8a8:	ea55 0e06 	orrs.w	lr, r5, r6
     8ac:	d018      	beq.n	8e0 <CONFIG_ISR_STACK_SIZE+0xe0>
     8ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
     8b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     8b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
     8ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     8be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     8c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     8c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     8ca:	d1c0      	bne.n	84e <CONFIG_ISR_STACK_SIZE+0x4e>
     8cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     8d0:	d10b      	bne.n	8ea <CONFIG_ISR_STACK_SIZE+0xea>
     8d2:	ea41 0100 	orr.w	r1, r1, r0
     8d6:	f04f 0000 	mov.w	r0, #0
     8da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     8de:	e7b6      	b.n	84e <CONFIG_ISR_STACK_SIZE+0x4e>
     8e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     8e4:	bf04      	itt	eq
     8e6:	4301      	orreq	r1, r0
     8e8:	2000      	moveq	r0, #0
     8ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     8ee:	bf88      	it	hi
     8f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     8f4:	f63f aeaf 	bhi.w	656 <CONFIG_BT_COMPANY_ID+0x65>
     8f8:	ebb5 0c03 	subs.w	ip, r5, r3
     8fc:	bf04      	itt	eq
     8fe:	ebb6 0c02 	subseq.w	ip, r6, r2
     902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     906:	f150 0000 	adcs.w	r0, r0, #0
     90a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     90e:	bd70      	pop	{r4, r5, r6, pc}
     910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     91c:	bfc2      	ittt	gt
     91e:	ebd4 050c 	rsbsgt	r5, r4, ip
     922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     926:	bd70      	popgt	{r4, r5, r6, pc}
     928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     92c:	f04f 0e00 	mov.w	lr, #0
     930:	3c01      	subs	r4, #1
     932:	e690      	b.n	656 <CONFIG_BT_COMPANY_ID+0x65>
     934:	ea45 0e06 	orr.w	lr, r5, r6
     938:	e68d      	b.n	656 <CONFIG_BT_COMPANY_ID+0x65>
     93a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     93e:	ea94 0f0c 	teq	r4, ip
     942:	bf08      	it	eq
     944:	ea95 0f0c 	teqeq	r5, ip
     948:	f43f af3b 	beq.w	7c2 <CONFIG_BT_COMPANY_ID+0x1d1>
     94c:	ea94 0f0c 	teq	r4, ip
     950:	d10a      	bne.n	968 <CONFIG_ISR_STACK_SIZE+0x168>
     952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     956:	f47f af34 	bne.w	7c2 <CONFIG_BT_COMPANY_ID+0x1d1>
     95a:	ea95 0f0c 	teq	r5, ip
     95e:	f47f af25 	bne.w	7ac <CONFIG_BT_COMPANY_ID+0x1bb>
     962:	4610      	mov	r0, r2
     964:	4619      	mov	r1, r3
     966:	e72c      	b.n	7c2 <CONFIG_BT_COMPANY_ID+0x1d1>
     968:	ea95 0f0c 	teq	r5, ip
     96c:	d106      	bne.n	97c <CONFIG_ISR_STACK_SIZE+0x17c>
     96e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     972:	f43f aefd 	beq.w	770 <CONFIG_BT_COMPANY_ID+0x17f>
     976:	4610      	mov	r0, r2
     978:	4619      	mov	r1, r3
     97a:	e722      	b.n	7c2 <CONFIG_BT_COMPANY_ID+0x1d1>
     97c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     980:	bf18      	it	ne
     982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     986:	f47f aec5 	bne.w	714 <CONFIG_BT_COMPANY_ID+0x123>
     98a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     98e:	f47f af0d 	bne.w	7ac <CONFIG_BT_COMPANY_ID+0x1bb>
     992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     996:	f47f aeeb 	bne.w	770 <CONFIG_BT_COMPANY_ID+0x17f>
     99a:	e712      	b.n	7c2 <CONFIG_BT_COMPANY_ID+0x1d1>

0000099c <__gedf2>:
     99c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
     9a0:	e006      	b.n	9b0 <__cmpdf2+0x4>
     9a2:	bf00      	nop

000009a4 <__ledf2>:
     9a4:	f04f 0c01 	mov.w	ip, #1
     9a8:	e002      	b.n	9b0 <__cmpdf2+0x4>
     9aa:	bf00      	nop

000009ac <__cmpdf2>:
     9ac:	f04f 0c01 	mov.w	ip, #1
     9b0:	f84d cd04 	str.w	ip, [sp, #-4]!
     9b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     9b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     9bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     9c0:	bf18      	it	ne
     9c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     9c6:	d01b      	beq.n	a00 <__cmpdf2+0x54>
     9c8:	b001      	add	sp, #4
     9ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     9ce:	bf0c      	ite	eq
     9d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     9d4:	ea91 0f03 	teqne	r1, r3
     9d8:	bf02      	ittt	eq
     9da:	ea90 0f02 	teqeq	r0, r2
     9de:	2000      	moveq	r0, #0
     9e0:	4770      	bxeq	lr
     9e2:	f110 0f00 	cmn.w	r0, #0
     9e6:	ea91 0f03 	teq	r1, r3
     9ea:	bf58      	it	pl
     9ec:	4299      	cmppl	r1, r3
     9ee:	bf08      	it	eq
     9f0:	4290      	cmpeq	r0, r2
     9f2:	bf2c      	ite	cs
     9f4:	17d8      	asrcs	r0, r3, #31
     9f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     9fa:	f040 0001 	orr.w	r0, r0, #1
     9fe:	4770      	bx	lr
     a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     a08:	d102      	bne.n	a10 <__cmpdf2+0x64>
     a0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     a0e:	d107      	bne.n	a20 <__cmpdf2+0x74>
     a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     a18:	d1d6      	bne.n	9c8 <__cmpdf2+0x1c>
     a1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     a1e:	d0d3      	beq.n	9c8 <__cmpdf2+0x1c>
     a20:	f85d 0b04 	ldr.w	r0, [sp], #4
     a24:	4770      	bx	lr
     a26:	bf00      	nop

00000a28 <__aeabi_cdrcmple>:
     a28:	4684      	mov	ip, r0
     a2a:	4610      	mov	r0, r2
     a2c:	4662      	mov	r2, ip
     a2e:	468c      	mov	ip, r1
     a30:	4619      	mov	r1, r3
     a32:	4663      	mov	r3, ip
     a34:	e000      	b.n	a38 <__aeabi_cdcmpeq>
     a36:	bf00      	nop

00000a38 <__aeabi_cdcmpeq>:
     a38:	b501      	push	{r0, lr}
     a3a:	f7ff ffb7 	bl	9ac <__cmpdf2>
     a3e:	2800      	cmp	r0, #0
     a40:	bf48      	it	mi
     a42:	f110 0f00 	cmnmi.w	r0, #0
     a46:	bd01      	pop	{r0, pc}

00000a48 <__aeabi_dcmpeq>:
     a48:	f84d ed08 	str.w	lr, [sp, #-8]!
     a4c:	f7ff fff4 	bl	a38 <__aeabi_cdcmpeq>
     a50:	bf0c      	ite	eq
     a52:	2001      	moveq	r0, #1
     a54:	2000      	movne	r0, #0
     a56:	f85d fb08 	ldr.w	pc, [sp], #8
     a5a:	bf00      	nop

00000a5c <__aeabi_dcmplt>:
     a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
     a60:	f7ff ffea 	bl	a38 <__aeabi_cdcmpeq>
     a64:	bf34      	ite	cc
     a66:	2001      	movcc	r0, #1
     a68:	2000      	movcs	r0, #0
     a6a:	f85d fb08 	ldr.w	pc, [sp], #8
     a6e:	bf00      	nop

00000a70 <__aeabi_dcmple>:
     a70:	f84d ed08 	str.w	lr, [sp, #-8]!
     a74:	f7ff ffe0 	bl	a38 <__aeabi_cdcmpeq>
     a78:	bf94      	ite	ls
     a7a:	2001      	movls	r0, #1
     a7c:	2000      	movhi	r0, #0
     a7e:	f85d fb08 	ldr.w	pc, [sp], #8
     a82:	bf00      	nop

00000a84 <__aeabi_dcmpge>:
     a84:	f84d ed08 	str.w	lr, [sp, #-8]!
     a88:	f7ff ffce 	bl	a28 <__aeabi_cdrcmple>
     a8c:	bf94      	ite	ls
     a8e:	2001      	movls	r0, #1
     a90:	2000      	movhi	r0, #0
     a92:	f85d fb08 	ldr.w	pc, [sp], #8
     a96:	bf00      	nop

00000a98 <__aeabi_dcmpgt>:
     a98:	f84d ed08 	str.w	lr, [sp, #-8]!
     a9c:	f7ff ffc4 	bl	a28 <__aeabi_cdrcmple>
     aa0:	bf34      	ite	cc
     aa2:	2001      	movcc	r0, #1
     aa4:	2000      	movcs	r0, #0
     aa6:	f85d fb08 	ldr.w	pc, [sp], #8
     aaa:	bf00      	nop

00000aac <__aeabi_d2iz>:
     aac:	ea4f 0241 	mov.w	r2, r1, lsl #1
     ab0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     ab4:	d215      	bcs.n	ae2 <__aeabi_d2iz+0x36>
     ab6:	d511      	bpl.n	adc <__aeabi_d2iz+0x30>
     ab8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     abc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     ac0:	d912      	bls.n	ae8 <__aeabi_d2iz+0x3c>
     ac2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     ac6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     aca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     ace:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     ad2:	fa23 f002 	lsr.w	r0, r3, r2
     ad6:	bf18      	it	ne
     ad8:	4240      	negne	r0, r0
     ada:	4770      	bx	lr
     adc:	f04f 0000 	mov.w	r0, #0
     ae0:	4770      	bx	lr
     ae2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     ae6:	d105      	bne.n	af4 <__aeabi_d2iz+0x48>
     ae8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     aec:	bf08      	it	eq
     aee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     af2:	4770      	bx	lr
     af4:	f04f 0000 	mov.w	r0, #0
     af8:	4770      	bx	lr
     afa:	bf00      	nop

00000afc <__aeabi_d2uiz>:
     afc:	004a      	lsls	r2, r1, #1
     afe:	d211      	bcs.n	b24 <__aeabi_d2uiz+0x28>
     b00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     b04:	d211      	bcs.n	b2a <__aeabi_d2uiz+0x2e>
     b06:	d50d      	bpl.n	b24 <__aeabi_d2uiz+0x28>
     b08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     b0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     b10:	d40e      	bmi.n	b30 <__aeabi_d2uiz+0x34>
     b12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     b16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     b1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     b1e:	fa23 f002 	lsr.w	r0, r3, r2
     b22:	4770      	bx	lr
     b24:	f04f 0000 	mov.w	r0, #0
     b28:	4770      	bx	lr
     b2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     b2e:	d102      	bne.n	b36 <__aeabi_d2uiz+0x3a>
     b30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     b34:	4770      	bx	lr
     b36:	f04f 0000 	mov.w	r0, #0
     b3a:	4770      	bx	lr

00000b3c <__aeabi_uldivmod>:
     b3c:	b953      	cbnz	r3, b54 <__aeabi_uldivmod+0x18>
     b3e:	b94a      	cbnz	r2, b54 <__aeabi_uldivmod+0x18>
     b40:	2900      	cmp	r1, #0
     b42:	bf08      	it	eq
     b44:	2800      	cmpeq	r0, #0
     b46:	bf1c      	itt	ne
     b48:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     b4c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     b50:	f000 b96e 	b.w	e30 <__aeabi_idiv0>
     b54:	f1ad 0c08 	sub.w	ip, sp, #8
     b58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     b5c:	f000 f806 	bl	b6c <__udivmoddi4>
     b60:	f8dd e004 	ldr.w	lr, [sp, #4]
     b64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     b68:	b004      	add	sp, #16
     b6a:	4770      	bx	lr

00000b6c <__udivmoddi4>:
     b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     b70:	9d08      	ldr	r5, [sp, #32]
     b72:	460e      	mov	r6, r1
     b74:	4604      	mov	r4, r0
     b76:	468c      	mov	ip, r1
     b78:	2b00      	cmp	r3, #0
     b7a:	f040 8081 	bne.w	c80 <__udivmoddi4+0x114>
     b7e:	428a      	cmp	r2, r1
     b80:	4617      	mov	r7, r2
     b82:	d945      	bls.n	c10 <__udivmoddi4+0xa4>
     b84:	fab2 f282 	clz	r2, r2
     b88:	b14a      	cbz	r2, b9e <__udivmoddi4+0x32>
     b8a:	f1c2 0120 	rsb	r1, r2, #32
     b8e:	fa06 f302 	lsl.w	r3, r6, r2
     b92:	fa20 f101 	lsr.w	r1, r0, r1
     b96:	4097      	lsls	r7, r2
     b98:	ea41 0c03 	orr.w	ip, r1, r3
     b9c:	4094      	lsls	r4, r2
     b9e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     ba2:	0c23      	lsrs	r3, r4, #16
     ba4:	fbbc f6fe 	udiv	r6, ip, lr
     ba8:	b2b9      	uxth	r1, r7
     baa:	fb0e cc16 	mls	ip, lr, r6, ip
     bae:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     bb2:	fb06 f001 	mul.w	r0, r6, r1
     bb6:	4298      	cmp	r0, r3
     bb8:	d909      	bls.n	bce <__udivmoddi4+0x62>
     bba:	18fb      	adds	r3, r7, r3
     bbc:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
     bc0:	f080 8115 	bcs.w	dee <__udivmoddi4+0x282>
     bc4:	4298      	cmp	r0, r3
     bc6:	f240 8112 	bls.w	dee <__udivmoddi4+0x282>
     bca:	3e02      	subs	r6, #2
     bcc:	443b      	add	r3, r7
     bce:	1a1b      	subs	r3, r3, r0
     bd0:	b2a4      	uxth	r4, r4
     bd2:	fbb3 f0fe 	udiv	r0, r3, lr
     bd6:	fb0e 3310 	mls	r3, lr, r0, r3
     bda:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     bde:	fb00 f101 	mul.w	r1, r0, r1
     be2:	42a1      	cmp	r1, r4
     be4:	d909      	bls.n	bfa <__udivmoddi4+0x8e>
     be6:	193c      	adds	r4, r7, r4
     be8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     bec:	f080 8101 	bcs.w	df2 <__udivmoddi4+0x286>
     bf0:	42a1      	cmp	r1, r4
     bf2:	f240 80fe 	bls.w	df2 <__udivmoddi4+0x286>
     bf6:	3802      	subs	r0, #2
     bf8:	443c      	add	r4, r7
     bfa:	1a64      	subs	r4, r4, r1
     bfc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     c00:	2100      	movs	r1, #0
     c02:	b11d      	cbz	r5, c0c <__udivmoddi4+0xa0>
     c04:	40d4      	lsrs	r4, r2
     c06:	2300      	movs	r3, #0
     c08:	e9c5 4300 	strd	r4, r3, [r5]
     c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     c10:	b902      	cbnz	r2, c14 <__udivmoddi4+0xa8>
     c12:	deff      	udf	#255	; 0xff
     c14:	fab2 f282 	clz	r2, r2
     c18:	2a00      	cmp	r2, #0
     c1a:	d14f      	bne.n	cbc <__udivmoddi4+0x150>
     c1c:	1bcb      	subs	r3, r1, r7
     c1e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     c22:	fa1f f887 	uxth.w	r8, r7
     c26:	2101      	movs	r1, #1
     c28:	fbb3 fcfe 	udiv	ip, r3, lr
     c2c:	0c26      	lsrs	r6, r4, #16
     c2e:	fb0e 331c 	mls	r3, lr, ip, r3
     c32:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
     c36:	fb08 f30c 	mul.w	r3, r8, ip
     c3a:	42b3      	cmp	r3, r6
     c3c:	d907      	bls.n	c4e <__udivmoddi4+0xe2>
     c3e:	19be      	adds	r6, r7, r6
     c40:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     c44:	d202      	bcs.n	c4c <__udivmoddi4+0xe0>
     c46:	42b3      	cmp	r3, r6
     c48:	f200 80eb 	bhi.w	e22 <__udivmoddi4+0x2b6>
     c4c:	4684      	mov	ip, r0
     c4e:	1af6      	subs	r6, r6, r3
     c50:	b2a3      	uxth	r3, r4
     c52:	fbb6 f0fe 	udiv	r0, r6, lr
     c56:	fb0e 6610 	mls	r6, lr, r0, r6
     c5a:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
     c5e:	fb08 f800 	mul.w	r8, r8, r0
     c62:	45a0      	cmp	r8, r4
     c64:	d907      	bls.n	c76 <__udivmoddi4+0x10a>
     c66:	193c      	adds	r4, r7, r4
     c68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     c6c:	d202      	bcs.n	c74 <__udivmoddi4+0x108>
     c6e:	45a0      	cmp	r8, r4
     c70:	f200 80d2 	bhi.w	e18 <__udivmoddi4+0x2ac>
     c74:	4618      	mov	r0, r3
     c76:	eba4 0408 	sub.w	r4, r4, r8
     c7a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     c7e:	e7c0      	b.n	c02 <__udivmoddi4+0x96>
     c80:	428b      	cmp	r3, r1
     c82:	d908      	bls.n	c96 <__udivmoddi4+0x12a>
     c84:	2d00      	cmp	r5, #0
     c86:	f000 80af 	beq.w	de8 <__udivmoddi4+0x27c>
     c8a:	2100      	movs	r1, #0
     c8c:	e9c5 0600 	strd	r0, r6, [r5]
     c90:	4608      	mov	r0, r1
     c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     c96:	fab3 f183 	clz	r1, r3
     c9a:	2900      	cmp	r1, #0
     c9c:	d149      	bne.n	d32 <__udivmoddi4+0x1c6>
     c9e:	42b3      	cmp	r3, r6
     ca0:	d302      	bcc.n	ca8 <__udivmoddi4+0x13c>
     ca2:	4282      	cmp	r2, r0
     ca4:	f200 80bb 	bhi.w	e1e <__udivmoddi4+0x2b2>
     ca8:	1a84      	subs	r4, r0, r2
     caa:	eb66 0303 	sbc.w	r3, r6, r3
     cae:	2001      	movs	r0, #1
     cb0:	469c      	mov	ip, r3
     cb2:	2d00      	cmp	r5, #0
     cb4:	d0aa      	beq.n	c0c <__udivmoddi4+0xa0>
     cb6:	e9c5 4c00 	strd	r4, ip, [r5]
     cba:	e7a7      	b.n	c0c <__udivmoddi4+0xa0>
     cbc:	f1c2 0320 	rsb	r3, r2, #32
     cc0:	4097      	lsls	r7, r2
     cc2:	40d8      	lsrs	r0, r3
     cc4:	4091      	lsls	r1, r2
     cc6:	40de      	lsrs	r6, r3
     cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     ccc:	4308      	orrs	r0, r1
     cce:	ea4f 4c10 	mov.w	ip, r0, lsr #16
     cd2:	fbb6 f1fe 	udiv	r1, r6, lr
     cd6:	fa1f f887 	uxth.w	r8, r7
     cda:	fb0e 6611 	mls	r6, lr, r1, r6
     cde:	ea4c 4606 	orr.w	r6, ip, r6, lsl #16
     ce2:	fb01 f308 	mul.w	r3, r1, r8
     ce6:	42b3      	cmp	r3, r6
     ce8:	fa04 f402 	lsl.w	r4, r4, r2
     cec:	d909      	bls.n	d02 <__udivmoddi4+0x196>
     cee:	19be      	adds	r6, r7, r6
     cf0:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
     cf4:	f080 808e 	bcs.w	e14 <__udivmoddi4+0x2a8>
     cf8:	42b3      	cmp	r3, r6
     cfa:	f240 808b 	bls.w	e14 <__udivmoddi4+0x2a8>
     cfe:	3902      	subs	r1, #2
     d00:	443e      	add	r6, r7
     d02:	1af3      	subs	r3, r6, r3
     d04:	b286      	uxth	r6, r0
     d06:	fbb3 f0fe 	udiv	r0, r3, lr
     d0a:	fb0e 3310 	mls	r3, lr, r0, r3
     d0e:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
     d12:	fb00 f308 	mul.w	r3, r0, r8
     d16:	42b3      	cmp	r3, r6
     d18:	d907      	bls.n	d2a <__udivmoddi4+0x1be>
     d1a:	19be      	adds	r6, r7, r6
     d1c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     d20:	d274      	bcs.n	e0c <__udivmoddi4+0x2a0>
     d22:	42b3      	cmp	r3, r6
     d24:	d972      	bls.n	e0c <__udivmoddi4+0x2a0>
     d26:	3802      	subs	r0, #2
     d28:	443e      	add	r6, r7
     d2a:	1af3      	subs	r3, r6, r3
     d2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     d30:	e77a      	b.n	c28 <__udivmoddi4+0xbc>
     d32:	f1c1 0720 	rsb	r7, r1, #32
     d36:	fa03 f401 	lsl.w	r4, r3, r1
     d3a:	fa22 f307 	lsr.w	r3, r2, r7
     d3e:	431c      	orrs	r4, r3
     d40:	fa20 f907 	lsr.w	r9, r0, r7
     d44:	fa06 f301 	lsl.w	r3, r6, r1
     d48:	ea4f 4c14 	mov.w	ip, r4, lsr #16
     d4c:	40fe      	lsrs	r6, r7
     d4e:	ea49 0903 	orr.w	r9, r9, r3
     d52:	ea4f 4319 	mov.w	r3, r9, lsr #16
     d56:	fbb6 fefc 	udiv	lr, r6, ip
     d5a:	fa1f f884 	uxth.w	r8, r4
     d5e:	fb0c 661e 	mls	r6, ip, lr, r6
     d62:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
     d66:	fb0e fa08 	mul.w	sl, lr, r8
     d6a:	45b2      	cmp	sl, r6
     d6c:	fa02 f201 	lsl.w	r2, r2, r1
     d70:	fa00 f301 	lsl.w	r3, r0, r1
     d74:	d908      	bls.n	d88 <__udivmoddi4+0x21c>
     d76:	19a6      	adds	r6, r4, r6
     d78:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
     d7c:	d248      	bcs.n	e10 <__udivmoddi4+0x2a4>
     d7e:	45b2      	cmp	sl, r6
     d80:	d946      	bls.n	e10 <__udivmoddi4+0x2a4>
     d82:	f1ae 0e02 	sub.w	lr, lr, #2
     d86:	4426      	add	r6, r4
     d88:	eba6 060a 	sub.w	r6, r6, sl
     d8c:	fa1f f989 	uxth.w	r9, r9
     d90:	fbb6 f0fc 	udiv	r0, r6, ip
     d94:	fb0c 6610 	mls	r6, ip, r0, r6
     d98:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
     d9c:	fb00 f808 	mul.w	r8, r0, r8
     da0:	45b0      	cmp	r8, r6
     da2:	d907      	bls.n	db4 <__udivmoddi4+0x248>
     da4:	19a6      	adds	r6, r4, r6
     da6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     daa:	d22d      	bcs.n	e08 <__udivmoddi4+0x29c>
     dac:	45b0      	cmp	r8, r6
     dae:	d92b      	bls.n	e08 <__udivmoddi4+0x29c>
     db0:	3802      	subs	r0, #2
     db2:	4426      	add	r6, r4
     db4:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     db8:	eba6 0608 	sub.w	r6, r6, r8
     dbc:	fba0 8902 	umull	r8, r9, r0, r2
     dc0:	454e      	cmp	r6, r9
     dc2:	46c4      	mov	ip, r8
     dc4:	46ce      	mov	lr, r9
     dc6:	d318      	bcc.n	dfa <__udivmoddi4+0x28e>
     dc8:	d015      	beq.n	df6 <__udivmoddi4+0x28a>
     dca:	b375      	cbz	r5, e2a <__udivmoddi4+0x2be>
     dcc:	ebb3 020c 	subs.w	r2, r3, ip
     dd0:	eb66 060e 	sbc.w	r6, r6, lr
     dd4:	fa06 f707 	lsl.w	r7, r6, r7
     dd8:	fa22 f301 	lsr.w	r3, r2, r1
     ddc:	40ce      	lsrs	r6, r1
     dde:	431f      	orrs	r7, r3
     de0:	e9c5 7600 	strd	r7, r6, [r5]
     de4:	2100      	movs	r1, #0
     de6:	e711      	b.n	c0c <__udivmoddi4+0xa0>
     de8:	4629      	mov	r1, r5
     dea:	4628      	mov	r0, r5
     dec:	e70e      	b.n	c0c <__udivmoddi4+0xa0>
     dee:	4666      	mov	r6, ip
     df0:	e6ed      	b.n	bce <__udivmoddi4+0x62>
     df2:	4618      	mov	r0, r3
     df4:	e701      	b.n	bfa <__udivmoddi4+0x8e>
     df6:	4543      	cmp	r3, r8
     df8:	d2e7      	bcs.n	dca <__udivmoddi4+0x25e>
     dfa:	ebb8 0c02 	subs.w	ip, r8, r2
     dfe:	eb69 0404 	sbc.w	r4, r9, r4
     e02:	3801      	subs	r0, #1
     e04:	46a6      	mov	lr, r4
     e06:	e7e0      	b.n	dca <__udivmoddi4+0x25e>
     e08:	4660      	mov	r0, ip
     e0a:	e7d3      	b.n	db4 <__udivmoddi4+0x248>
     e0c:	4660      	mov	r0, ip
     e0e:	e78c      	b.n	d2a <__udivmoddi4+0x1be>
     e10:	4686      	mov	lr, r0
     e12:	e7b9      	b.n	d88 <__udivmoddi4+0x21c>
     e14:	4661      	mov	r1, ip
     e16:	e774      	b.n	d02 <__udivmoddi4+0x196>
     e18:	3802      	subs	r0, #2
     e1a:	443c      	add	r4, r7
     e1c:	e72b      	b.n	c76 <__udivmoddi4+0x10a>
     e1e:	4608      	mov	r0, r1
     e20:	e747      	b.n	cb2 <__udivmoddi4+0x146>
     e22:	f1ac 0c02 	sub.w	ip, ip, #2
     e26:	443e      	add	r6, r7
     e28:	e711      	b.n	c4e <__udivmoddi4+0xe2>
     e2a:	4629      	mov	r1, r5
     e2c:	e6ee      	b.n	c0c <__udivmoddi4+0xa0>
     e2e:	bf00      	nop

00000e30 <__aeabi_idiv0>:
     e30:	4770      	bx	lr
     e32:	bf00      	nop

00000e34 <strcmp>:
     e34:	f810 2b01 	ldrb.w	r2, [r0], #1
     e38:	f811 3b01 	ldrb.w	r3, [r1], #1
     e3c:	2a01      	cmp	r2, #1
     e3e:	bf28      	it	cs
     e40:	429a      	cmpcs	r2, r3
     e42:	d0f7      	beq.n	e34 <strcmp>
     e44:	1ad0      	subs	r0, r2, r3
     e46:	4770      	bx	lr

00000e48 <strlen>:
     e48:	4603      	mov	r3, r0
     e4a:	f813 2b01 	ldrb.w	r2, [r3], #1
     e4e:	2a00      	cmp	r2, #0
     e50:	d1fb      	bne.n	e4a <strlen+0x2>
     e52:	1a18      	subs	r0, r3, r0
     e54:	3801      	subs	r0, #1
     e56:	4770      	bx	lr

00000e58 <hci_init>:
	}
}
#endif /* CONFIG_BT_HCI_VS_EXT */

static int hci_init(void)
{
     e58:	b570      	push	{r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
     e5a:	4d4a      	ldr	r5, [pc, #296]	; (f84 <hci_init+0x12c>)
     e5c:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
     e60:	6899      	ldr	r1, [r3, #8]
     e62:	f011 0101 	ands.w	r1, r1, #1
{
     e66:	b08c      	sub	sp, #48	; 0x30
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
     e68:	d121      	bne.n	eae <hci_init+0x56>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
     e6a:	aa07      	add	r2, sp, #28
     e6c:	f640 4003 	movw	r0, #3075	; 0xc03
     e70:	f007 fb68 	bl	8544 <bt_hci_cmd_send_sync>
		if (err) {
     e74:	4604      	mov	r4, r0
     e76:	2800      	cmp	r0, #0
     e78:	d17c      	bne.n	f74 <hci_init+0x11c>
		hci_reset_complete(rsp);
     e7a:	9b07      	ldr	r3, [sp, #28]
	uint8_t status = buf->data[0];
     e7c:	689b      	ldr	r3, [r3, #8]
	if (status) {
     e7e:	781b      	ldrb	r3, [r3, #0]
     e80:	b993      	cbnz	r3, ea8 <hci_init+0x50>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
     e82:	f3bf 8f5b 	dmb	ish
     e86:	462b      	mov	r3, r5
     e88:	f853 2f98 	ldr.w	r2, [r3, #152]!
     e8c:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
     e90:	f002 0205 	and.w	r2, r2, #5
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     e94:	f3bf 8f5b 	dmb	ish
     e98:	e853 1f00 	ldrex	r1, [r3]
     e9c:	e843 2000 	strex	r0, r2, [r3]
     ea0:	2800      	cmp	r0, #0
     ea2:	d1f9      	bne.n	e98 <hci_init+0x40>
     ea4:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
     ea8:	9807      	ldr	r0, [sp, #28]
     eaa:	f01b fca5 	bl	1c7f8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
     eae:	aa07      	add	r2, sp, #28
     eb0:	2100      	movs	r1, #0
     eb2:	f241 0003 	movw	r0, #4099	; 0x1003
     eb6:	f007 fb45 	bl	8544 <bt_hci_cmd_send_sync>
	if (err) {
     eba:	4604      	mov	r4, r0
     ebc:	2800      	cmp	r0, #0
     ebe:	d159      	bne.n	f74 <hci_init+0x11c>
	read_local_features_complete(rsp);
     ec0:	9a07      	ldr	r2, [sp, #28]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
     ec2:	4e31      	ldr	r6, [pc, #196]	; (f88 <hci_init+0x130>)
     ec4:	6893      	ldr	r3, [r2, #8]
     ec6:	f853 0f01 	ldr.w	r0, [r3, #1]!
     eca:	6859      	ldr	r1, [r3, #4]
     ecc:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
     ece:	4610      	mov	r0, r2
     ed0:	f01b fc92 	bl	1c7f8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
     ed4:	4621      	mov	r1, r4
     ed6:	aa07      	add	r2, sp, #28
     ed8:	f241 0001 	movw	r0, #4097	; 0x1001
     edc:	f007 fb32 	bl	8544 <bt_hci_cmd_send_sync>
	if (err) {
     ee0:	4604      	mov	r4, r0
     ee2:	2800      	cmp	r0, #0
     ee4:	d146      	bne.n	f74 <hci_init+0x11c>
	read_local_ver_complete(rsp);
     ee6:	9807      	ldr	r0, [sp, #28]
     ee8:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
     eea:	785a      	ldrb	r2, [r3, #1]
     eec:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
     ef0:	78d9      	ldrb	r1, [r3, #3]
     ef2:	789a      	ldrb	r2, [r3, #2]
     ef4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     ef8:	86ea      	strh	r2, [r5, #54]	; 0x36
	bt_dev.lmp_version = rp->lmp_version;
     efa:	791a      	ldrb	r2, [r3, #4]
     efc:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
     f00:	7a19      	ldrb	r1, [r3, #8]
     f02:	79da      	ldrb	r2, [r3, #7]
     f04:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     f08:	872a      	strh	r2, [r5, #56]	; 0x38
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
     f0a:	795a      	ldrb	r2, [r3, #5]
     f0c:	799b      	ldrb	r3, [r3, #6]
     f0e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
     f12:	876b      	strh	r3, [r5, #58]	; 0x3a
	net_buf_unref(rsp);
     f14:	f01b fc70 	bl	1c7f8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
     f18:	4621      	mov	r1, r4
     f1a:	aa07      	add	r2, sp, #28
     f1c:	f241 0002 	movw	r0, #4098	; 0x1002
     f20:	f007 fb10 	bl	8544 <bt_hci_cmd_send_sync>
	if (err) {
     f24:	4604      	mov	r4, r0
     f26:	bb28      	cbnz	r0, f74 <hci_init+0x11c>
	read_supported_commands_complete(rsp);
     f28:	9b07      	ldr	r3, [sp, #28]
     f2a:	689a      	ldr	r2, [r3, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
     f2c:	1c53      	adds	r3, r2, #1
     f2e:	3241      	adds	r2, #65	; 0x41
     f30:	6818      	ldr	r0, [r3, #0]
     f32:	6859      	ldr	r1, [r3, #4]
     f34:	4634      	mov	r4, r6
     f36:	c403      	stmia	r4!, {r0, r1}
     f38:	3308      	adds	r3, #8
     f3a:	4293      	cmp	r3, r2
     f3c:	4626      	mov	r6, r4
     f3e:	d1f7      	bne.n	f30 <hci_init+0xd8>
		bt_hci_ecc_supported_commands(bt_dev.supported_commands);
     f40:	4812      	ldr	r0, [pc, #72]	; (f8c <hci_init+0x134>)
     f42:	f025 fe60 	bl	26c06 <bt_hci_ecc_supported_commands>
	net_buf_unref(rsp);
     f46:	9807      	ldr	r0, [sp, #28]
     f48:	f01b fc56 	bl	1c7f8 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
     f4c:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
     f50:	065a      	lsls	r2, r3, #25
     f52:	d423      	bmi.n	f9c <hci_init+0x144>
 * @return true if the CPU is currently running with user permissions
 */
static inline bool k_is_user_context(void)
{
#ifdef CONFIG_USERSPACE
	return arch_is_user_context();
     f54:	f025 fed0 	bl	26cf8 <arch_is_user_context>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
     f58:	4b0d      	ldr	r3, [pc, #52]	; (f90 <hci_init+0x138>)
     f5a:	4a0e      	ldr	r2, [pc, #56]	; (f94 <hci_init+0x13c>)
     f5c:	1a9b      	subs	r3, r3, r2
     f5e:	08db      	lsrs	r3, r3, #3
		BT_ERR("Non-LE capable controller detected!");
     f60:	019b      	lsls	r3, r3, #6
     f62:	f043 0301 	orr.w	r3, r3, #1
     f66:	b140      	cbz	r0, f7a <hci_init+0x122>
     f68:	490b      	ldr	r1, [pc, #44]	; (f98 <hci_init+0x140>)
     f6a:	4618      	mov	r0, r3
     f6c:	f023 ff93 	bl	24e96 <log_from_user>
		return -ENODEV;
     f70:	f06f 0412 	mvn.w	r4, #18
	if (err) {
		return err;
	}

	return 0;
}
     f74:	4620      	mov	r0, r4
     f76:	b00c      	add	sp, #48	; 0x30
     f78:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Non-LE capable controller detected!");
     f7a:	4807      	ldr	r0, [pc, #28]	; (f98 <hci_init+0x140>)
     f7c:	4619      	mov	r1, r3
     f7e:	f023 ffb0 	bl	24ee2 <log_0>
     f82:	e7f5      	b.n	f70 <hci_init+0x118>
     f84:	20007600 	.word	0x20007600
     f88:	2000763c 	.word	0x2000763c
     f8c:	20007644 	.word	0x20007644
     f90:	0002a7a8 	.word	0x0002a7a8
     f94:	0002a6d0 	.word	0x0002a6d0
     f98:	0002d6a2 	.word	0x0002d6a2
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
     f9c:	aa07      	add	r2, sp, #28
     f9e:	2100      	movs	r1, #0
     fa0:	f242 0003 	movw	r0, #8195	; 0x2003
     fa4:	f007 face 	bl	8544 <bt_hci_cmd_send_sync>
	if (err) {
     fa8:	4604      	mov	r4, r0
     faa:	2800      	cmp	r0, #0
     fac:	d1e2      	bne.n	f74 <hci_init+0x11c>
	read_le_features_complete(rsp);
     fae:	9a07      	ldr	r2, [sp, #28]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
     fb0:	4ea1      	ldr	r6, [pc, #644]	; (1238 <CONFIG_MAIN_STACK_SIZE+0x238>)
     fb2:	6893      	ldr	r3, [r2, #8]
     fb4:	f853 0f01 	ldr.w	r0, [r3, #1]!
     fb8:	6859      	ldr	r1, [r3, #4]
     fba:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
     fbc:	4610      	mov	r0, r2
     fbe:	f01b fc1b 	bl	1c7f8 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
     fc2:	4621      	mov	r1, r4
     fc4:	aa07      	add	r2, sp, #28
     fc6:	f242 0002 	movw	r0, #8194	; 0x2002
     fca:	f007 fabb 	bl	8544 <bt_hci_cmd_send_sync>
		if (err) {
     fce:	4604      	mov	r4, r0
     fd0:	2800      	cmp	r0, #0
     fd2:	d1cf      	bne.n	f74 <hci_init+0x11c>
		le_read_buffer_size_complete(rsp);
     fd4:	9b07      	ldr	r3, [sp, #28]
     fd6:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
     fd8:	f8b3 2001 	ldrh.w	r2, [r3, #1]
     fdc:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
     fe0:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
     fe2:	b129      	cbz	r1, ff0 <hci_init+0x198>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
     fe4:	78da      	ldrb	r2, [r3, #3]
     fe6:	f106 0028 	add.w	r0, r6, #40	; 0x28
     fea:	4611      	mov	r1, r2
     fec:	f025 fee8 	bl	26dc0 <k_sem_init>
		net_buf_unref(rsp);
     ff0:	9807      	ldr	r0, [sp, #28]
     ff2:	f01b fc01 	bl	1c7f8 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
     ff6:	f895 6040 	ldrb.w	r6, [r5, #64]	; 0x40
     ffa:	f016 0620 	ands.w	r6, r6, #32
     ffe:	f000 80f1 	beq.w	11e4 <CONFIG_MAIN_STACK_SIZE+0x1e4>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    1002:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    1006:	071b      	lsls	r3, r3, #28
    1008:	d511      	bpl.n	102e <CONFIG_MAIN_STACK_SIZE+0x2e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    100a:	aa07      	add	r2, sp, #28
    100c:	2100      	movs	r1, #0
    100e:	f242 001c 	movw	r0, #8220	; 0x201c
    1012:	f007 fa97 	bl	8544 <bt_hci_cmd_send_sync>
		if (err) {
    1016:	4604      	mov	r4, r0
    1018:	2800      	cmp	r0, #0
    101a:	d1ab      	bne.n	f74 <hci_init+0x11c>
		le_read_supp_states_complete(rsp);
    101c:	9807      	ldr	r0, [sp, #28]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    101e:	6883      	ldr	r3, [r0, #8]
    1020:	f853 2f01 	ldr.w	r2, [r3, #1]!
    1024:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    1026:	e9c5 232a 	strd	r2, r3, [r5, #168]	; 0xa8
		net_buf_unref(rsp);
    102a:	f01b fbe5 	bl	1c7f8 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    102e:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
    1032:	069e      	lsls	r6, r3, #26
    1034:	d524      	bpl.n	1080 <CONFIG_MAIN_STACK_SIZE+0x80>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    1036:	a906      	add	r1, sp, #24
    1038:	f10d 0016 	add.w	r0, sp, #22
    103c:	f007 fb04 	bl	8648 <hci_le_read_max_data_len>
		if (err) {
    1040:	4604      	mov	r4, r0
    1042:	2800      	cmp	r0, #0
    1044:	d196      	bne.n	f74 <hci_init+0x11c>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    1046:	2104      	movs	r1, #4
    1048:	f242 0024 	movw	r0, #8228	; 0x2024
    104c:	f007 f8e4 	bl	8218 <bt_hci_cmd_create>
		if (!buf) {
    1050:	4606      	mov	r6, r0
    1052:	2800      	cmp	r0, #0
    1054:	f000 80cd 	beq.w	11f2 <CONFIG_MAIN_STACK_SIZE+0x1f2>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
    1058:	2104      	movs	r1, #4
    105a:	3008      	adds	r0, #8
    105c:	f027 fe22 	bl	28ca4 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    1060:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    1064:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    1066:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    106a:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    106c:	4622      	mov	r2, r4
    106e:	4631      	mov	r1, r6
    1070:	f242 0024 	movw	r0, #8228	; 0x2024
    1074:	f007 fa66 	bl	8544 <bt_hci_cmd_send_sync>
		if (err) {
    1078:	4604      	mov	r4, r0
    107a:	2800      	cmp	r0, #0
    107c:	f47f af7a 	bne.w	f74 <hci_init+0x11c>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
    1080:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
    1084:	065c      	lsls	r4, r3, #25
    1086:	d510      	bpl.n	10aa <CONFIG_MAIN_STACK_SIZE+0xaa>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
    1088:	aa07      	add	r2, sp, #28
    108a:	2100      	movs	r1, #0
    108c:	f242 002a 	movw	r0, #8234	; 0x202a
    1090:	f007 fa58 	bl	8544 <bt_hci_cmd_send_sync>
		if (err) {
    1094:	4604      	mov	r4, r0
    1096:	2800      	cmp	r0, #0
    1098:	f47f af6c 	bne.w	f74 <hci_init+0x11c>
		le_read_resolving_list_size_complete(rsp);
    109c:	9807      	ldr	r0, [sp, #28]
	bt_dev.le.rl_size = rp->rl_size;
    109e:	6883      	ldr	r3, [r0, #8]
    10a0:	785b      	ldrb	r3, [r3, #1]
    10a2:	f885 30e8 	strb.w	r3, [r5, #232]	; 0xe8
		net_buf_unref(rsp);
    10a6:	f01b fba7 	bl	1c7f8 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    10aa:	2108      	movs	r1, #8
    10ac:	f242 0001 	movw	r0, #8193	; 0x2001
    10b0:	f007 f8b2 	bl	8218 <bt_hci_cmd_create>
	if (!buf) {
    10b4:	4604      	mov	r4, r0
    10b6:	2800      	cmp	r0, #0
    10b8:	f000 809b 	beq.w	11f2 <CONFIG_MAIN_STACK_SIZE+0x1f2>
    10bc:	2108      	movs	r1, #8
    10be:	4408      	add	r0, r1
    10c0:	f027 fdf0 	bl	28ca4 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
    10c4:	f895 10a0 	ldrb.w	r1, [r5, #160]	; 0xa0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
    10c8:	f011 0f40 	tst.w	r1, #64	; 0x40
    10cc:	4602      	mov	r2, r0
    10ce:	f240 2302 	movw	r3, #514	; 0x202
    10d2:	bf08      	it	eq
    10d4:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    10d6:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    10d8:	bf4c      	ite	mi
    10da:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    10de:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    10e2:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    10e4:	f895 30a1 	ldrb.w	r3, [r5, #161]	; 0xa1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    10e8:	bf48      	it	mi
    10ea:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    10ee:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    10f2:	f895 3066 	ldrb.w	r3, [r5, #102]	; 0x66
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    10f6:	bf18      	it	ne
    10f8:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    10fc:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    1100:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    1102:	bf48      	it	mi
    1104:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    1108:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    110a:	bf08      	it	eq
    110c:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
    1110:	2100      	movs	r1, #0
    1112:	f025 fe65 	bl	26de0 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    1116:	4621      	mov	r1, r4
    1118:	2200      	movs	r2, #0
    111a:	f242 0001 	movw	r0, #8193	; 0x2001
    111e:	f007 fa11 	bl	8544 <bt_hci_cmd_send_sync>
	if (err) {
    1122:	4604      	mov	r4, r0
    1124:	2800      	cmp	r0, #0
    1126:	f47f af25 	bne.w	f74 <hci_init+0x11c>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    112a:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    112e:	0698      	lsls	r0, r3, #26
    1130:	d41e      	bmi.n	1170 <CONFIG_MAIN_STACK_SIZE+0x170>
	if (bt_dev.le.acl_mtu) {
    1132:	f8b5 10cc 	ldrh.w	r1, [r5, #204]	; 0xcc
    1136:	b9d9      	cbnz	r1, 1170 <CONFIG_MAIN_STACK_SIZE+0x170>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    1138:	aa07      	add	r2, sp, #28
    113a:	f241 0005 	movw	r0, #4101	; 0x1005
    113e:	f007 fa01 	bl	8544 <bt_hci_cmd_send_sync>
	if (err) {
    1142:	4604      	mov	r4, r0
    1144:	2800      	cmp	r0, #0
    1146:	f47f af15 	bne.w	f74 <hci_init+0x11c>
	if (bt_dev.le.acl_mtu) {
    114a:	f8b5 30cc 	ldrh.w	r3, [r5, #204]	; 0xcc
    114e:	b963      	cbnz	r3, 116a <CONFIG_MAIN_STACK_SIZE+0x16a>
	read_buffer_size_complete(rsp);
    1150:	9b07      	ldr	r3, [sp, #28]
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    1152:	483a      	ldr	r0, [pc, #232]	; (123c <CONFIG_MAIN_STACK_SIZE+0x23c>)
	read_buffer_size_complete(rsp);
    1154:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    1156:	7899      	ldrb	r1, [r3, #2]
    1158:	785a      	ldrb	r2, [r3, #1]
    115a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    115e:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    1162:	889a      	ldrh	r2, [r3, #4]
    1164:	4611      	mov	r1, r2
    1166:	f025 fe2b 	bl	26dc0 <k_sem_init>
	net_buf_unref(rsp);
    116a:	9807      	ldr	r0, [sp, #28]
    116c:	f01b fb44 	bl	1c7f8 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    1170:	2108      	movs	r1, #8
    1172:	f640 4001 	movw	r0, #3073	; 0xc01
    1176:	f007 f84f 	bl	8218 <bt_hci_cmd_create>
	if (!buf) {
    117a:	4604      	mov	r4, r0
    117c:	2800      	cmp	r0, #0
    117e:	d038      	beq.n	11f2 <CONFIG_MAIN_STACK_SIZE+0x1f2>
    1180:	2108      	movs	r1, #8
    1182:	4408      	add	r0, r1
    1184:	f027 fd8e 	bl	28ca4 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    1188:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
    118c:	07d9      	lsls	r1, r3, #31
    118e:	4602      	mov	r2, r0
    1190:	d544      	bpl.n	121c <CONFIG_MAIN_STACK_SIZE+0x21c>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    1192:	a127      	add	r1, pc, #156	; (adr r1, 1230 <CONFIG_MAIN_STACK_SIZE+0x230>)
    1194:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
    1198:	f025 fe22 	bl	26de0 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    119c:	4621      	mov	r1, r4
    119e:	2200      	movs	r2, #0
    11a0:	f640 4001 	movw	r0, #3073	; 0xc01
    11a4:	f007 f9ce 	bl	8544 <bt_hci_cmd_send_sync>
	if (err) {
    11a8:	4604      	mov	r4, r0
    11aa:	2800      	cmp	r0, #0
    11ac:	f47f aee2 	bne.w	f74 <hci_init+0x11c>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    11b0:	4601      	mov	r1, r0
    11b2:	aa06      	add	r2, sp, #24
    11b4:	f64f 4001 	movw	r0, #64513	; 0xfc01
    11b8:	f007 f9c4 	bl	8544 <bt_hci_cmd_send_sync>
	if (err) {
    11bc:	4c20      	ldr	r4, [pc, #128]	; (1240 <CONFIG_MAIN_STACK_SIZE+0x240>)
    11be:	4b21      	ldr	r3, [pc, #132]	; (1244 <CONFIG_MAIN_STACK_SIZE+0x244>)
    11c0:	1ae4      	subs	r4, r4, r3
    11c2:	08e4      	lsrs	r4, r4, #3
    11c4:	01a4      	lsls	r4, r4, #6
    11c6:	2800      	cmp	r0, #0
    11c8:	d042      	beq.n	1250 <CONFIG_MAIN_STACK_SIZE+0x250>
    11ca:	f025 fd95 	bl	26cf8 <arch_is_user_context>
		BT_WARN("Vendor HCI extensions not available");
    11ce:	f044 0402 	orr.w	r4, r4, #2
    11d2:	b338      	cbz	r0, 1224 <CONFIG_MAIN_STACK_SIZE+0x224>
    11d4:	491c      	ldr	r1, [pc, #112]	; (1248 <CONFIG_MAIN_STACK_SIZE+0x248>)
			BT_WARN("Failed to read supported vendor features");
    11d6:	4620      	mov	r0, r4
    11d8:	f023 fe5d 	bl	24e96 <log_from_user>
	err = bt_id_init();
    11dc:	f008 fb68 	bl	98b0 <bt_id_init>
    11e0:	4604      	mov	r4, r0
	if (err) {
    11e2:	e6c7      	b.n	f74 <hci_init+0x11c>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    11e4:	2102      	movs	r1, #2
    11e6:	f640 406d 	movw	r0, #3181	; 0xc6d
    11ea:	f007 f815 	bl	8218 <bt_hci_cmd_create>
		if (!buf) {
    11ee:	4604      	mov	r4, r0
    11f0:	b910      	cbnz	r0, 11f8 <CONFIG_MAIN_STACK_SIZE+0x1f8>
		return -ENOBUFS;
    11f2:	f06f 0468 	mvn.w	r4, #104	; 0x68
    11f6:	e6bd      	b.n	f74 <hci_init+0x11c>
    11f8:	2102      	movs	r1, #2
    11fa:	3008      	adds	r0, #8
    11fc:	f027 fd52 	bl	28ca4 <net_buf_simple_add>
		cp_le->le = 0x01;
    1200:	2301      	movs	r3, #1
    1202:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    1204:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    1206:	4621      	mov	r1, r4
    1208:	4632      	mov	r2, r6
    120a:	f640 406d 	movw	r0, #3181	; 0xc6d
    120e:	f007 f999 	bl	8544 <bt_hci_cmd_send_sync>
		if (err) {
    1212:	4604      	mov	r4, r0
    1214:	2800      	cmp	r0, #0
    1216:	f43f aef4 	beq.w	1002 <CONFIG_MAIN_STACK_SIZE+0x2>
    121a:	e6ab      	b.n	f74 <hci_init+0x11c>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    121c:	480b      	ldr	r0, [pc, #44]	; (124c <CONFIG_MAIN_STACK_SIZE+0x24c>)
    121e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    1222:	e7b9      	b.n	1198 <CONFIG_MAIN_STACK_SIZE+0x198>
		BT_WARN("Vendor HCI extensions not available");
    1224:	4808      	ldr	r0, [pc, #32]	; (1248 <CONFIG_MAIN_STACK_SIZE+0x248>)
    1226:	4621      	mov	r1, r4
			BT_WARN("Failed to read supported vendor features");
    1228:	f023 fe5b 	bl	24ee2 <log_0>
			return;
    122c:	e7d6      	b.n	11dc <CONFIG_MAIN_STACK_SIZE+0x1dc>
    122e:	bf00      	nop
    1230:	02008890 	.word	0x02008890
    1234:	20008000 	.word	0x20008000
    1238:	200076a0 	.word	0x200076a0
    123c:	200076d0 	.word	0x200076d0
    1240:	0002a7a8 	.word	0x0002a7a8
    1244:	0002a6d0 	.word	0x0002a6d0
    1248:	0002d6c6 	.word	0x0002d6c6
    124c:	02008810 	.word	0x02008810
	rp.info = (void *)rsp->data;
    1250:	9b06      	ldr	r3, [sp, #24]
    1252:	689d      	ldr	r5, [r3, #8]
    1254:	f025 fd50 	bl	26cf8 <arch_is_user_context>
	BT_INFO("HW Platform: %s (0x%04x)",
    1258:	f044 0603 	orr.w	r6, r4, #3
    125c:	f8b5 2001 	ldrh.w	r2, [r5, #1]
    1260:	2800      	cmp	r0, #0
    1262:	d04e      	beq.n	1302 <CONFIG_MAIN_STACK_SIZE+0x302>
	if (platform < ARRAY_SIZE(plat_str)) {
    1264:	2a03      	cmp	r2, #3
	BT_INFO("HW Platform: %s (0x%04x)",
    1266:	4613      	mov	r3, r2
		return plat_str[platform];
    1268:	bf96      	itet	ls
    126a:	4a54      	ldrls	r2, [pc, #336]	; (13bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x34>)
	return "unknown";
    126c:	4a54      	ldrhi	r2, [pc, #336]	; (13c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x38>)
		return plat_str[platform];
    126e:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    1272:	4954      	ldr	r1, [pc, #336]	; (13c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3c>)
    1274:	4630      	mov	r0, r6
    1276:	f023 fe0e 	bl	24e96 <log_from_user>
    127a:	f025 fd3d 	bl	26cf8 <arch_is_user_context>
	BT_INFO("HW Variant: %s (0x%04x)",
    127e:	f044 0603 	orr.w	r6, r4, #3
    1282:	f8b5 1001 	ldrh.w	r1, [r5, #1]
    1286:	f8b5 2003 	ldrh.w	r2, [r5, #3]
    128a:	2800      	cmp	r0, #0
    128c:	d046      	beq.n	131c <CONFIG_MAIN_STACK_SIZE+0x31c>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    128e:	2902      	cmp	r1, #2
	BT_INFO("HW Variant: %s (0x%04x)",
    1290:	4613      	mov	r3, r2
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    1292:	d141      	bne.n	1318 <CONFIG_MAIN_STACK_SIZE+0x318>
	if (variant < ARRAY_SIZE(nordic_str)) {
    1294:	2a03      	cmp	r2, #3
    1296:	d83f      	bhi.n	1318 <CONFIG_MAIN_STACK_SIZE+0x318>
		return nordic_str[variant];
    1298:	4a4b      	ldr	r2, [pc, #300]	; (13c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x40>)
    129a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    129e:	494b      	ldr	r1, [pc, #300]	; (13cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x44>)
    12a0:	4630      	mov	r0, r6
    12a2:	f023 fdf8 	bl	24e96 <log_from_user>
    12a6:	f025 fd27 	bl	26cf8 <arch_is_user_context>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    12aa:	f044 0603 	orr.w	r6, r4, #3
    12ae:	796b      	ldrb	r3, [r5, #5]
    12b0:	2800      	cmp	r0, #0
    12b2:	d041      	beq.n	1338 <CONFIG_MAIN_STACK_SIZE+0x338>
    12b4:	f8d5 1009 	ldr.w	r1, [r5, #9]
    12b8:	9102      	str	r1, [sp, #8]
    12ba:	f8b5 1007 	ldrh.w	r1, [r5, #7]
    12be:	9101      	str	r1, [sp, #4]
	if (variant < ARRAY_SIZE(var_str)) {
    12c0:	2b03      	cmp	r3, #3
		return var_str[variant];
    12c2:	bf98      	it	ls
    12c4:	4a42      	ldrls	r2, [pc, #264]	; (13d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x48>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    12c6:	79a9      	ldrb	r1, [r5, #6]
    12c8:	9100      	str	r1, [sp, #0]
		return var_str[variant];
    12ca:	bf94      	ite	ls
    12cc:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	return "unknown";
    12d0:	4a3b      	ldrhi	r2, [pc, #236]	; (13c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x38>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    12d2:	4940      	ldr	r1, [pc, #256]	; (13d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4c>)
    12d4:	4630      	mov	r0, r6
    12d6:	f023 fdde 	bl	24e96 <log_from_user>
	net_buf_unref(rsp);
    12da:	9806      	ldr	r0, [sp, #24]
    12dc:	f01b fa8c 	bl	1c7f8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    12e0:	aa06      	add	r2, sp, #24
    12e2:	2100      	movs	r1, #0
    12e4:	f64f 4002 	movw	r0, #64514	; 0xfc02
    12e8:	f007 f92c 	bl	8544 <bt_hci_cmd_send_sync>
	if (err) {
    12ec:	4605      	mov	r5, r0
    12ee:	2800      	cmp	r0, #0
    12f0:	d03c      	beq.n	136c <CONFIG_MAIN_STACK_SIZE+0x36c>
    12f2:	f025 fd01 	bl	26cf8 <arch_is_user_context>
		BT_WARN("Failed to read supported vendor commands");
    12f6:	f044 0402 	orr.w	r4, r4, #2
    12fa:	2800      	cmp	r0, #0
    12fc:	d033      	beq.n	1366 <CONFIG_MAIN_STACK_SIZE+0x366>
    12fe:	4936      	ldr	r1, [pc, #216]	; (13d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x50>)
    1300:	e769      	b.n	11d6 <CONFIG_MAIN_STACK_SIZE+0x1d6>
	if (platform < ARRAY_SIZE(plat_str)) {
    1302:	2a03      	cmp	r2, #3
		return plat_str[platform];
    1304:	bf96      	itet	ls
    1306:	4b2d      	ldrls	r3, [pc, #180]	; (13bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x34>)
	return "unknown";
    1308:	492d      	ldrhi	r1, [pc, #180]	; (13c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x38>)
		return plat_str[platform];
    130a:	f853 1022 	ldrls.w	r1, [r3, r2, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    130e:	482d      	ldr	r0, [pc, #180]	; (13c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3c>)
    1310:	4633      	mov	r3, r6
    1312:	f023 fe07 	bl	24f24 <log_2>
    1316:	e7b0      	b.n	127a <CONFIG_MAIN_STACK_SIZE+0x27a>
		return "unknown";
    1318:	4a29      	ldr	r2, [pc, #164]	; (13c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x38>)
    131a:	e7c0      	b.n	129e <CONFIG_MAIN_STACK_SIZE+0x29e>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    131c:	2902      	cmp	r1, #2
    131e:	d109      	bne.n	1334 <CONFIG_MAIN_STACK_SIZE+0x334>
	if (variant < ARRAY_SIZE(nordic_str)) {
    1320:	2a03      	cmp	r2, #3
    1322:	d807      	bhi.n	1334 <CONFIG_MAIN_STACK_SIZE+0x334>
		return nordic_str[variant];
    1324:	4b28      	ldr	r3, [pc, #160]	; (13c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x40>)
    1326:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    132a:	4828      	ldr	r0, [pc, #160]	; (13cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x44>)
    132c:	4633      	mov	r3, r6
    132e:	f023 fdf9 	bl	24f24 <log_2>
    1332:	e7b8      	b.n	12a6 <CONFIG_MAIN_STACK_SIZE+0x2a6>
		return "unknown";
    1334:	4922      	ldr	r1, [pc, #136]	; (13c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x38>)
    1336:	e7f8      	b.n	132a <CONFIG_MAIN_STACK_SIZE+0x32a>
	if (variant < ARRAY_SIZE(var_str)) {
    1338:	2b03      	cmp	r3, #3
		return var_str[variant];
    133a:	bf96      	itet	ls
    133c:	4a24      	ldrls	r2, [pc, #144]	; (13d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x48>)
	return "unknown";
    133e:	4a20      	ldrhi	r2, [pc, #128]	; (13c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x38>)
		return var_str[variant];
    1340:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    1344:	4823      	ldr	r0, [pc, #140]	; (13d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4c>)
    1346:	e9cd 2307 	strd	r2, r3, [sp, #28]
    134a:	79ab      	ldrb	r3, [r5, #6]
    134c:	9309      	str	r3, [sp, #36]	; 0x24
    134e:	f8b5 3007 	ldrh.w	r3, [r5, #7]
    1352:	930a      	str	r3, [sp, #40]	; 0x28
    1354:	f8d5 3009 	ldr.w	r3, [r5, #9]
    1358:	930b      	str	r3, [sp, #44]	; 0x2c
    135a:	2205      	movs	r2, #5
    135c:	4633      	mov	r3, r6
    135e:	a907      	add	r1, sp, #28
    1360:	f023 fe15 	bl	24f8e <log_n>
    1364:	e7b9      	b.n	12da <CONFIG_MAIN_STACK_SIZE+0x2da>
		BT_WARN("Failed to read supported vendor commands");
    1366:	481c      	ldr	r0, [pc, #112]	; (13d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x50>)
    1368:	4621      	mov	r1, r4
    136a:	e75d      	b.n	1228 <CONFIG_MAIN_STACK_SIZE+0x228>
	rp.cmds = (void *)rsp->data;
    136c:	9806      	ldr	r0, [sp, #24]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    136e:	4e1b      	ldr	r6, [pc, #108]	; (13dc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x54>)
    1370:	6883      	ldr	r3, [r0, #8]
    1372:	f8b3 3001 	ldrh.w	r3, [r3, #1]
    1376:	f8a6 3085 	strh.w	r3, [r6, #133]	; 0x85
	net_buf_unref(rsp);
    137a:	f01b fa3d 	bl	1c7f8 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    137e:	f896 3085 	ldrb.w	r3, [r6, #133]	; 0x85
    1382:	075b      	lsls	r3, r3, #29
    1384:	f57f af2a 	bpl.w	11dc <CONFIG_MAIN_STACK_SIZE+0x1dc>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    1388:	aa06      	add	r2, sp, #24
    138a:	4629      	mov	r1, r5
    138c:	f64f 4003 	movw	r0, #64515	; 0xfc03
    1390:	f007 f8d8 	bl	8544 <bt_hci_cmd_send_sync>
		if (err) {
    1394:	b148      	cbz	r0, 13aa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x22>
    1396:	f025 fcaf 	bl	26cf8 <arch_is_user_context>
			BT_WARN("Failed to read supported vendor features");
    139a:	f044 0402 	orr.w	r4, r4, #2
    139e:	b108      	cbz	r0, 13a4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1c>
    13a0:	490f      	ldr	r1, [pc, #60]	; (13e0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x58>)
    13a2:	e718      	b.n	11d6 <CONFIG_MAIN_STACK_SIZE+0x1d6>
    13a4:	480e      	ldr	r0, [pc, #56]	; (13e0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x58>)
    13a6:	4621      	mov	r1, r4
    13a8:	e73e      	b.n	1228 <CONFIG_MAIN_STACK_SIZE+0x228>
		rp.feat = (void *)rsp->data;
    13aa:	9806      	ldr	r0, [sp, #24]
		memcpy(bt_dev.vs_features, rp.feat->features,
    13ac:	6883      	ldr	r3, [r0, #8]
    13ae:	785b      	ldrb	r3, [r3, #1]
    13b0:	f886 3084 	strb.w	r3, [r6, #132]	; 0x84
		net_buf_unref(rsp);
    13b4:	f01b fa20 	bl	1c7f8 <net_buf_unref>
    13b8:	e710      	b.n	11dc <CONFIG_MAIN_STACK_SIZE+0x1dc>
    13ba:	bf00      	nop
    13bc:	0002ad98 	.word	0x0002ad98
    13c0:	0002d398 	.word	0x0002d398
    13c4:	0002d6ea 	.word	0x0002d6ea
    13c8:	0002ad58 	.word	0x0002ad58
    13cc:	0002d703 	.word	0x0002d703
    13d0:	0002add0 	.word	0x0002add0
    13d4:	0002d71b 	.word	0x0002d71b
    13d8:	0002d748 	.word	0x0002d748
    13dc:	20007600 	.word	0x20007600
    13e0:	0002d771 	.word	0x0002d771
    13e4:	00000000 	.word	0x00000000

000013e8 <ull_drift_ticks_get>:
 * @param ticks_drift_minus[out] Negative part of drift uncertainty window
 */
void ull_drift_ticks_get(struct node_rx_event_done *done,
			 uint32_t *ticks_drift_plus,
			 uint32_t *ticks_drift_minus)
{
    13e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	start_to_address_actual_us =
		done->extra.drift.start_to_address_actual_us;
	window_widening_event_us =
		done->extra.drift.window_widening_event_us;
	preamble_to_addr_us =
    13ec:	e9d0 c70b 	ldrd	ip, r7, [r0, #44]	; 0x2c
	start_to_address_actual_us =
    13f0:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
		done->extra.drift.preamble_to_addr_us;

	start_to_address_expected_us = EVENT_JITTER_US +
				       EVENT_TICKER_RES_MARGIN_US +
				       window_widening_event_us +
    13f4:	eb0c 0407 	add.w	r4, ip, r7
	start_to_address_expected_us = EVENT_JITTER_US +
    13f8:	3430      	adds	r4, #48	; 0x30
				       preamble_to_addr_us;

	if (start_to_address_actual_us <= start_to_address_expected_us) {
    13fa:	45a0      	cmp	r8, r4
{
    13fc:	460e      	mov	r6, r1
    13fe:	4615      	mov	r5, r2
	if (start_to_address_actual_us <= start_to_address_expected_us) {
    1400:	d818      	bhi.n	1434 <ull_drift_ticks_get+0x4c>
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
    1402:	4f1b      	ldr	r7, [pc, #108]	; (1470 <ull_drift_ticks_get+0x88>)
    1404:	a318      	add	r3, pc, #96	; (adr r3, 1468 <ull_drift_ticks_get+0x80>)
    1406:	e9d3 2300 	ldrd	r2, r3, [r3]
    140a:	fbac 0107 	umull	r0, r1, ip, r7
    140e:	f7ff fb95 	bl	b3c <__aeabi_uldivmod>
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
    1412:	eba4 0408 	sub.w	r4, r4, r8
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
    1416:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
    141a:	6030      	str	r0, [r6, #0]
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
    141c:	a312      	add	r3, pc, #72	; (adr r3, 1468 <ull_drift_ticks_get+0x80>)
    141e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1422:	fba4 0107 	umull	r0, r1, r4, r7
    1426:	f7ff fb89 	bl	b3c <__aeabi_uldivmod>
    142a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
    142e:	6028      	str	r0, [r5, #0]
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
					       EVENT_TICKER_RES_MARGIN_US +
					       preamble_to_addr_us);
	}
}
    1430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
    1434:	4c0e      	ldr	r4, [pc, #56]	; (1470 <ull_drift_ticks_get+0x88>)
    1436:	a30c      	add	r3, pc, #48	; (adr r3, 1468 <ull_drift_ticks_get+0x80>)
    1438:	e9d3 2300 	ldrd	r2, r3, [r3]
    143c:	fba8 0104 	umull	r0, r1, r8, r4
    1440:	f7ff fb7c 	bl	b3c <__aeabi_uldivmod>
    1444:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
    1448:	f107 0030 	add.w	r0, r7, #48	; 0x30
		*ticks_drift_plus =
    144c:	6033      	str	r3, [r6, #0]
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
    144e:	fba0 0104 	umull	r0, r1, r0, r4
    1452:	a305      	add	r3, pc, #20	; (adr r3, 1468 <ull_drift_ticks_get+0x80>)
    1454:	e9d3 2300 	ldrd	r2, r3, [r3]
    1458:	f7ff fb70 	bl	b3c <__aeabi_uldivmod>
    145c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
    1460:	6028      	str	r0, [r5, #0]
}
    1462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1466:	bf00      	nop
    1468:	1afd498d 	.word	0x1afd498d
    146c:	00000007 	.word	0x00000007
    1470:	3b9aca00 	.word	0x3b9aca00
    1474:	00000000 	.word	0x00000000

00001478 <ll_adv_enable>:
	uint8_t aux_is_started = 0U;
	uint32_t ticks_anchor;
#endif /* !CONFIG_BT_HCI_MESH_EXT */
#else /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
uint8_t ll_adv_enable(uint8_t enable)
{
    1478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    147c:	4ca8      	ldr	r4, [pc, #672]	; (1720 <ll_adv_enable+0x2a8>)
    147e:	f894 604a 	ldrb.w	r6, [r4, #74]	; 0x4a
    1482:	b08f      	sub	sp, #60	; 0x3c
    1484:	f006 0601 	and.w	r6, r6, #1
	struct pdu_adv *pdu_adv;
	struct ll_adv_set *adv;
	struct lll_adv *lll;
	uint32_t ret;

	if (!enable) {
    1488:	2800      	cmp	r0, #0
    148a:	f000 8153 	beq.w	1734 <ll_adv_enable+0x2bc>
static inline struct ll_adv_set *is_disabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
    148e:	bbb6      	cbnz	r6, 14fe <ll_adv_enable+0x86>
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    1490:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    1494:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
	ull_filter_adv_update(lll->filter_policy);
    1498:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    149c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    14a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    14a4:	f000 0003 	and.w	r0, r0, #3
	lll->rl_idx = FILTER_IDX_NONE;
    14a8:	21ff      	movs	r1, #255	; 0xff
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    14aa:	f8d2 8038 	ldr.w	r8, [r2, #56]	; 0x38
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    14ae:	f8d3 902c 	ldr.w	r9, [r3, #44]	; 0x2c
    14b2:	f884 1026 	strb.w	r1, [r4, #38]	; 0x26
	ull_filter_adv_update(lll->filter_policy);
    14b6:	f017 fde9 	bl	1908c <ull_filter_adv_update>
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    14ba:	f894 004a 	ldrb.w	r0, [r4, #74]	; 0x4a
    14be:	0742      	lsls	r2, r0, #29
    14c0:	f100 8113 	bmi.w	16ea <ll_adv_enable+0x272>
	if (pdu_adv_to_update) {
    14c4:	f1b9 0f00 	cmp.w	r9, #0
    14c8:	d011      	beq.n	14ee <ll_adv_enable+0x76>
		adv_addr = ull_adv_pdu_update_addrs(adv, pdu_adv_to_update);
    14ca:	4895      	ldr	r0, [pc, #596]	; (1720 <ll_adv_enable+0x2a8>)
    14cc:	4649      	mov	r1, r9
    14ce:	f012 fc87 	bl	13de0 <ull_adv_pdu_update_addrs>
		if (pdu_adv_to_update->tx_addr &&
    14d2:	f899 3000 	ldrb.w	r3, [r9]
    14d6:	065b      	lsls	r3, r3, #25
    14d8:	d505      	bpl.n	14e6 <ll_adv_enable+0x6e>
		    !mem_nz((void *)adv_addr, BDADDR_SIZE)) {
    14da:	2106      	movs	r1, #6
    14dc:	f00d fc9e 	bl	ee1c <mem_nz>
		if (pdu_adv_to_update->tx_addr &&
    14e0:	2800      	cmp	r0, #0
    14e2:	f000 8240 	beq.w	1966 <ll_adv_enable+0x4ee>
			ull_adv_pdu_update_addrs(adv, pdu_scan);
    14e6:	488e      	ldr	r0, [pc, #568]	; (1720 <ll_adv_enable+0x2a8>)
    14e8:	4641      	mov	r1, r8
    14ea:	f012 fc79 	bl	13de0 <ull_adv_pdu_update_addrs>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    14ee:	f899 3000 	ldrb.w	r3, [r9]
    14f2:	f013 0f0e 	tst.w	r3, #14
    14f6:	f040 80ce 	bne.w	1696 <ll_adv_enable+0x21e>
		if (lll->conn) {
    14fa:	6a23      	ldr	r3, [r4, #32]
    14fc:	b123      	cbz	r3, 1508 <ll_adv_enable+0x90>
	ret = ull_ticker_status_take(ret, &ret_cb);
	if (ret) {
		mark = ull_disable_unmark(adv);
		LL_ASSERT(mark == adv);

		return BT_HCI_ERR_CMD_DISALLOWED;
    14fe:	260c      	movs	r6, #12
}
    1500:	4630      	mov	r0, r6
    1502:	b00f      	add	sp, #60	; 0x3c
    1504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		link = ll_rx_link_alloc();
    1508:	f011 fd10 	bl	12f2c <ll_rx_link_alloc>
		if (!link) {
    150c:	4682      	mov	sl, r0
    150e:	2800      	cmp	r0, #0
    1510:	f000 8246 	beq.w	19a0 <ll_adv_enable+0x528>
		node_rx = ll_rx_alloc();
    1514:	f011 fd16 	bl	12f44 <ll_rx_alloc>
		if (!node_rx) {
    1518:	4683      	mov	fp, r0
    151a:	2800      	cmp	r0, #0
    151c:	f000 8259 	beq.w	19d2 <ll_adv_enable+0x55a>
		conn = ll_conn_acquire();
    1520:	f013 f9c4 	bl	148ac <ll_conn_acquire>
		if (!conn) {
    1524:	4605      	mov	r5, r0
    1526:	2800      	cmp	r0, #0
    1528:	f000 8250 	beq.w	19cc <ll_adv_enable+0x554>
		conn_lll->handle = 0xFFFF;
    152c:	f64f 73ff 	movw	r3, #65535	; 0xffff
		if (!conn_lll->link_tx_free) {
    1530:	6f40      	ldr	r0, [r0, #116]	; 0x74
		conn_lll->handle = 0xFFFF;
    1532:	852b      	strh	r3, [r5, #40]	; 0x28
		conn_lll = &conn->lll;
    1534:	f105 031c 	add.w	r3, r5, #28
    1538:	930b      	str	r3, [sp, #44]	; 0x2c
		if (!conn_lll->link_tx_free) {
    153a:	2800      	cmp	r0, #0
    153c:	f000 822c 	beq.w	1998 <ll_adv_enable+0x520>
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
    1540:	f105 0268 	add.w	r2, r5, #104	; 0x68
    1544:	f105 0164 	add.w	r1, r5, #100	; 0x64
    1548:	f00d fc74 	bl	ee34 <memq_init>
			conn_lll->phy_tx = PHY_1M;
    154c:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
    1550:	4874      	ldr	r0, [pc, #464]	; (1724 <ll_adv_enable+0x2ac>)
		conn_lll->data_chan_sel = 0;
    1552:	f895 1039 	ldrb.w	r1, [r5, #57]	; 0x39
		conn_lll->max_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    1556:	4b74      	ldr	r3, [pc, #464]	; (1728 <ll_adv_enable+0x2b0>)
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
    1558:	f895 713a 	ldrb.w	r7, [r5, #314]	; 0x13a
		conn_lll->slave.initiated = 0;
    155c:	f895 c03c 	ldrb.w	ip, [r5, #60]	; 0x3c
		conn->llcp_terminate.node_rx.hdr.link = link;
    1560:	f8c5 a144 	str.w	sl, [r5, #324]	; 0x144
			conn_lll->phy_tx = PHY_1M;
    1564:	4002      	ands	r2, r0
		conn_lll->sn = 0;
    1566:	f895 007a 	ldrb.w	r0, [r5, #122]	; 0x7a
		conn_lll->data_chan_sel = 0;
    156a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    156e:	f061 017f 	orn	r1, r1, #127	; 0x7f
		conn_lll->sn = 0;
    1572:	f020 001f 	bic.w	r0, r0, #31
		conn_lll->data_chan_sel = 0;
    1576:	f885 1039 	strb.w	r1, [r5, #57]	; 0x39
		conn_lll->sn = 0;
    157a:	f885 007a 	strb.w	r0, [r5, #122]	; 0x7a
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    157e:	f04f 111b 	mov.w	r1, #1769499	; 0x1b001b
		conn->llcp_feature.features_conn = LL_FEAT;
    1582:	486a      	ldr	r0, [pc, #424]	; (172c <ll_adv_enable+0x2b4>)
			conn_lll->phy_tx = PHY_1M;
    1584:	f442 7288 	orr.w	r2, r2, #272	; 0x110
		conn_lll->max_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    1588:	e9c5 1316 	strd	r1, r3, [r5, #88]	; 0x58
			conn_lll->phy_tx = PHY_1M;
    158c:	f042 0201 	orr.w	r2, r2, #1
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
    1590:	f027 0703 	bic.w	r7, r7, #3
		conn->llcp_feature.features_conn = LL_FEAT;
    1594:	2100      	movs	r1, #0
    1596:	e9c5 014a 	strd	r0, r1, [r5, #296]	; 0x128
		conn_lll->slave.initiated = 0;
    159a:	f02c 0c07 	bic.w	ip, ip, #7
			conn_lll->phy_tx = PHY_1M;
    159e:	f8a5 2060 	strh.w	r2, [r5, #96]	; 0x60
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
    15a2:	f885 713a 	strb.w	r7, [r5, #314]	; 0x13a
		conn->connect_expire = 6;
    15a6:	2206      	movs	r2, #6
		conn_lll->latency_prepare = 0;
    15a8:	2700      	movs	r7, #0
		conn->llcp_feature.features_peer = 0;
    15aa:	2000      	movs	r0, #0
    15ac:	2100      	movs	r1, #0
    15ae:	e9c5 014c 	strd	r0, r1, [r5, #304]	; 0x130
		conn_lll->slave.initiated = 0;
    15b2:	f885 c03c 	strb.w	ip, [r5, #60]	; 0x3c
		conn->connect_expire = 6;
    15b6:	f8a5 20c0 	strh.w	r2, [r5, #192]	; 0xc0
		conn_lll->slave.window_widening_event_us = 0;
    15ba:	e9c5 7712 	strd	r7, r7, [r5, #72]	; 0x48
		conn_lll->latency_prepare = 0;
    15be:	85ef      	strh	r7, [r5, #46]	; 0x2e
		conn_lll->latency_event = 0;
    15c0:	632f      	str	r7, [r5, #48]	; 0x30
		conn_lll->data_chan_use = 0;
    15c2:	f885 703b 	strb.w	r7, [r5, #59]	; 0x3b
		conn_lll->slave.window_size_prepare_us = 0;
    15c6:	652f      	str	r7, [r5, #80]	; 0x50
		conn->supervision_expire = 0;
    15c8:	f8a5 70c4 	strh.w	r7, [r5, #196]	; 0xc4
		conn->procedure_expire = 0;
    15cc:	f8a5 70c8 	strh.w	r7, [r5, #200]	; 0xc8
		conn->llcp_rx = NULL;
    15d0:	f8c5 7108 	str.w	r7, [r5, #264]	; 0x108
		conn->llcp_cu.req = conn->llcp_cu.ack = 0;
    15d4:	f8a5 710c 	strh.w	r7, [r5, #268]	; 0x10c
		conn->llcp_feature.req = conn->llcp_feature.ack = 0;
    15d8:	f8a5 7120 	strh.w	r7, [r5, #288]	; 0x120
		conn->llcp_version.req = conn->llcp_version.ack = 0;
    15dc:	f8a5 7138 	strh.w	r7, [r5, #312]	; 0x138
		conn->llcp_terminate.reason_peer = 0;
    15e0:	f885 7143 	strb.w	r7, [r5, #323]	; 0x143
		conn_lll->link_tx_free = NULL;
    15e4:	676f      	str	r7, [r5, #116]	; 0x74
		conn_lll->packet_tx_head_len = 0;
    15e6:	f8a5 7078 	strh.w	r7, [r5, #120]	; 0x78
		conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
    15ea:	f8a5 7164 	strh.w	r7, [r5, #356]	; 0x164
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    15ee:	f895 1166 	ldrb.w	r1, [r5, #358]	; 0x166
		conn->llcp_conn_param.disabled = 0;
    15f2:	f895 c186 	ldrb.w	ip, [r5, #390]	; 0x186
		conn->llcp_length.disabled = 0U;
    15f6:	f895 01ae 	ldrb.w	r0, [r5, #430]	; 0x1ae
		conn->common.fex_valid = 0;
    15fa:	f8b5 20d8 	ldrh.w	r2, [r5, #216]	; 0xd8
		conn->llcp_conn_param.req = 0;
    15fe:	f8a5 7184 	strh.w	r7, [r5, #388]	; 0x184
		conn->llcp_conn_param.disabled = 0;
    1602:	f367 1c04 	bfi	ip, r7, #4, #1
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    1606:	f021 0107 	bic.w	r1, r1, #7
		conn->common.fex_valid = 0;
    160a:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
		conn->llcp_length.disabled = 0U;
    160e:	f367 00c3 	bfi	r0, r7, #3, #1
		conn->llcp_conn_param.disabled = 0;
    1612:	f885 c186 	strb.w	ip, [r5, #390]	; 0x186
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    1616:	f885 1166 	strb.w	r1, [r5, #358]	; 0x166
		conn->common.fex_valid = 0;
    161a:	f8a5 20d8 	strh.w	r2, [r5, #216]	; 0xd8
		conn->slave.ticks_to_offset = 0;
    161e:	f8c5 70e0 	str.w	r7, [r5, #224]	; 0xe0
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
    1622:	f8a5 70e4 	strh.w	r7, [r5, #228]	; 0xe4
    1626:	f885 70e6 	strb.w	r7, [r5, #230]	; 0xe6
		conn->llcp_length.req = conn->llcp_length.ack = 0U;
    162a:	f8a5 71ac 	strh.w	r7, [r5, #428]	; 0x1ac
		conn->llcp_length.cache.tx_octets = 0U;
    162e:	f8a5 71b8 	strh.w	r7, [r5, #440]	; 0x1b8
		conn->llcp_length.disabled = 0U;
    1632:	f885 01ae 	strb.w	r0, [r5, #430]	; 0x1ae
		conn->default_tx_octets = ull_conn_default_tx_octets_get();
    1636:	f013 fc73 	bl	14f20 <ull_conn_default_tx_octets_get>
    163a:	f8a5 00d2 	strh.w	r0, [r5, #210]	; 0xd2
		conn->default_tx_time = ull_conn_default_tx_time_get();
    163e:	f013 fc75 	bl	14f2c <ull_conn_default_tx_time_get>
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
    1642:	f8d5 11bc 	ldr.w	r1, [r5, #444]	; 0x1bc
    1646:	4a3a      	ldr	r2, [pc, #232]	; (1730 <ll_adv_enable+0x2b8>)
		conn->default_tx_time = ull_conn_default_tx_time_get();
    1648:	f8a5 00d4 	strh.w	r0, [r5, #212]	; 0xd4
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
    164c:	400a      	ands	r2, r1
    164e:	f8c5 21bc 	str.w	r2, [r5, #444]	; 0x1bc
		conn->phy_pref_tx = ull_conn_default_phy_tx_get();
    1652:	f013 fc71 	bl	14f38 <ull_conn_default_phy_tx_get>
    1656:	f895 21c0 	ldrb.w	r2, [r5, #448]	; 0x1c0
    165a:	f360 0202 	bfi	r2, r0, #0, #3
    165e:	f885 21c0 	strb.w	r2, [r5, #448]	; 0x1c0
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    1662:	f013 fc6f 	bl	14f44 <ull_conn_default_phy_rx_get>
    1666:	f895 21c0 	ldrb.w	r2, [r5, #448]	; 0x1c0
		lll->conn = conn_lll;
    166a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    166c:	6223      	str	r3, [r4, #32]
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    166e:	f360 02c5 	bfi	r2, r0, #3, #3
		adv->node_rx_cc_free = node_rx;
    1672:	e9c4 ab10 	strd	sl, fp, [r4, #64]	; 0x40
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    1676:	e9c5 7773 	strd	r7, r7, [r5, #460]	; 0x1cc
    167a:	e9c5 7771 	strd	r7, r7, [r5, #452]	; 0x1c4
	return hdr->ref--;
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->disabled_cb = hdr->disabled_param = NULL;
    167e:	e9c5 7705 	strd	r7, r7, [r5, #20]
		conn->tx_data = conn->tx_data_last = 0;
    1682:	f8c5 71d4 	str.w	r7, [r5, #468]	; 0x1d4
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    1686:	f885 21c0 	strb.w	r2, [r5, #448]	; 0x1c0

static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
    168a:	61ed      	str	r5, [r5, #28]
		err = lll_clock_wait();
    168c:	f018 feae 	bl	1a3ec <lll_clock_wait>
		if (err) {
    1690:	2800      	cmp	r0, #0
    1692:	f040 816a 	bne.w	196a <ll_adv_enable+0x4f2>
	uint8_t ch_map = lll->chan_map;
    1696:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    169a:	2101      	movs	r1, #1
	uint8_t ch_map = lll->chan_map;
    169c:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    16a0:	a80d      	add	r0, sp, #52	; 0x34
	uint8_t ch_map = lll->chan_map;
    16a2:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    16a6:	f00d fd3d 	bl	f124 <util_ones_count_get>
	if (adv_chn_cnt == 0) {
    16aa:	b390      	cbz	r0, 1712 <ll_adv_enable+0x29a>
		if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
    16ac:	f899 3000 	ldrb.w	r3, [r9]
    16b0:	f003 030f 	and.w	r3, r3, #15
    16b4:	2b02      	cmp	r3, #2
    16b6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
    16ba:	f000 80a7 	beq.w	180c <ll_adv_enable+0x394>
			if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    16be:	2b01      	cmp	r3, #1
    16c0:	f000 8157 	beq.w	1972 <ll_adv_enable+0x4fa>
					BYTES2US((PDU_OVERHEAD_SIZE(PHY_1M) +
    16c4:	f898 0001 	ldrb.w	r0, [r8, #1]
    16c8:	3010      	adds	r0, #16
		const uint16_t scan_rsp_us =
    16ca:	00c0      	lsls	r0, r0, #3
			} else if (pdu_adv->type == PDU_ADV_TYPE_ADV_IND) {
    16cc:	2b00      	cmp	r3, #0
    16ce:	f040 8142 	bne.w	1956 <ll_adv_enable+0x4de>
				adv_size += pdu_adv->len;
    16d2:	f899 3001 	ldrb.w	r3, [r9, #1]
    16d6:	3310      	adds	r3, #16
    16d8:	00db      	lsls	r3, r3, #3
    16da:	f503 714d 	add.w	r1, r3, #820	; 0x334
    16de:	4408      	add	r0, r1
    16e0:	f503 739a 	add.w	r3, r3, #308	; 0x134
			slot_us += (BYTES2US(adv_size, phy) + EVENT_IFS_MAX_US
    16e4:	fb03 0002 	mla	r0, r3, r2, r0
    16e8:	e09b      	b.n	1822 <ll_adv_enable+0x3aa>
		lll->rl_idx = ull_filter_rl_find(adv->peer_addr_type,
    16ea:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    16ee:	4632      	mov	r2, r6
    16f0:	f104 014b 	add.w	r1, r4, #75	; 0x4b
    16f4:	f017 fe48 	bl	19388 <ull_filter_rl_find>
		if (lll->rl_idx != FILTER_IDX_NONE) {
    16f8:	28ff      	cmp	r0, #255	; 0xff
		lll->rl_idx = ull_filter_rl_find(adv->peer_addr_type,
    16fa:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
		if (lll->rl_idx != FILTER_IDX_NONE) {
    16fe:	f43f aee1 	beq.w	14c4 <ll_adv_enable+0x4c>
			ull_filter_rpa_update(false);
    1702:	4630      	mov	r0, r6
    1704:	f017 fcdc 	bl	190c0 <ull_filter_rpa_update>
	if (pdu_adv_to_update) {
    1708:	f1b9 0f00 	cmp.w	r9, #0
    170c:	f47f aedd 	bne.w	14ca <ll_adv_enable+0x52>
    1710:	e6ed      	b.n	14ee <ll_adv_enable+0x76>
	if (adv->lll.conn) {
    1712:	6a23      	ldr	r3, [r4, #32]
    1714:	2b00      	cmp	r3, #0
    1716:	f43f aef2 	beq.w	14fe <ll_adv_enable+0x86>
		conn_release(adv);
    171a:	f012 f901 	bl	13920 <conn_release.constprop.0>
    171e:	e6ee      	b.n	14fe <ll_adv_enable+0x86>
    1720:	2000181c 	.word	0x2000181c
    1724:	fffff880 	.word	0xfffff880
    1728:	01480148 	.word	0x01480148
    172c:	0001417f 	.word	0x0001417f
    1730:	f6ff0000 	.word	0xf6ff0000
	if (!adv || !adv->is_enabled) {
    1734:	2e00      	cmp	r6, #0
    1736:	f43f aee2 	beq.w	14fe <ll_adv_enable+0x86>
	if (adv->lll.conn) {
    173a:	6a23      	ldr	r3, [r4, #32]
    173c:	b15b      	cbz	r3, 1756 <ll_adv_enable+0x2de>
		adv->lll.conn->slave.cancelled = 1U;
    173e:	f893 2020 	ldrb.w	r2, [r3, #32]
    1742:	f042 0202 	orr.w	r2, r2, #2
    1746:	f883 2020 	strb.w	r2, [r3, #32]
		if (unlikely(adv->lll.conn->slave.initiated)) {
    174a:	6a23      	ldr	r3, [r4, #32]
    174c:	f893 3020 	ldrb.w	r3, [r3, #32]
    1750:	07d8      	lsls	r0, r3, #31
    1752:	f53f aed4 	bmi.w	14fe <ll_adv_enable+0x86>
	mark = ull_disable_mark(adv);
    1756:	48a8      	ldr	r0, [pc, #672]	; (19f8 <ll_adv_enable+0x580>)
    1758:	f011 fcbe 	bl	130d8 <ull_disable_mark>
	LL_ASSERT(mark == adv);
    175c:	4284      	cmp	r4, r0
    175e:	d00c      	beq.n	177a <ll_adv_enable+0x302>
    1760:	4aa6      	ldr	r2, [pc, #664]	; (19fc <ll_adv_enable+0x584>)
    1762:	49a7      	ldr	r1, [pc, #668]	; (1a00 <ll_adv_enable+0x588>)
    1764:	48a7      	ldr	r0, [pc, #668]	; (1a04 <ll_adv_enable+0x58c>)
    1766:	f240 73df 	movw	r3, #2015	; 0x7df
    176a:	f022 ff3b 	bl	245e4 <printk>
    176e:	4040      	eors	r0, r0
    1770:	f380 8811 	msr	BASEPRI, r0
    1774:	f04f 0003 	mov.w	r0, #3
    1778:	df02      	svc	2
	if (adv->lll.is_hdcd) {
    177a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    177e:	07d9      	lsls	r1, r3, #31
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    1780:	ad0d      	add	r5, sp, #52	; 0x34
	if (adv->lll.is_hdcd) {
    1782:	d50e      	bpl.n	17a2 <ll_adv_enable+0x32a>
		ret_cb = TICKER_STATUS_BUSY;
    1784:	2202      	movs	r2, #2
    1786:	920d      	str	r2, [sp, #52]	; 0x34
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    1788:	2103      	movs	r1, #3
    178a:	4b9f      	ldr	r3, [pc, #636]	; (1a08 <ll_adv_enable+0x590>)
    178c:	9500      	str	r5, [sp, #0]
    178e:	2201      	movs	r2, #1
    1790:	2000      	movs	r0, #0
    1792:	f00e fed7 	bl	10544 <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
    1796:	4629      	mov	r1, r5
    1798:	f011 fc64 	bl	13064 <ull_ticker_status_take>
		if (ret) {
    179c:	2800      	cmp	r0, #0
    179e:	f040 811d 	bne.w	19dc <ll_adv_enable+0x564>
	ret_cb = TICKER_STATUS_BUSY;
    17a2:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    17a4:	2103      	movs	r1, #3
    17a6:	4b98      	ldr	r3, [pc, #608]	; (1a08 <ll_adv_enable+0x590>)
    17a8:	9500      	str	r5, [sp, #0]
    17aa:	2000      	movs	r0, #0
	ret_cb = TICKER_STATUS_BUSY;
    17ac:	920d      	str	r2, [sp, #52]	; 0x34
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    17ae:	f00e fec9 	bl	10544 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
    17b2:	4629      	mov	r1, r5
    17b4:	f011 fc56 	bl	13064 <ull_ticker_status_take>
	if (ret) {
    17b8:	2800      	cmp	r0, #0
    17ba:	f040 80f3 	bne.w	19a4 <ll_adv_enable+0x52c>
	}

	ret = ull_disable(&adv->lll);
    17be:	4893      	ldr	r0, [pc, #588]	; (1a0c <ll_adv_enable+0x594>)
    17c0:	f011 fcc6 	bl	13150 <ull_disable>
	LL_ASSERT(!ret);
    17c4:	2800      	cmp	r0, #0
    17c6:	f040 80d9 	bne.w	197c <ll_adv_enable+0x504>

	mark = ull_disable_unmark(adv);
    17ca:	488b      	ldr	r0, [pc, #556]	; (19f8 <ll_adv_enable+0x580>)
    17cc:	f011 fc90 	bl	130f0 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
    17d0:	4284      	cmp	r4, r0
    17d2:	d00c      	beq.n	17ee <ll_adv_enable+0x376>
    17d4:	4a89      	ldr	r2, [pc, #548]	; (19fc <ll_adv_enable+0x584>)
    17d6:	498a      	ldr	r1, [pc, #552]	; (1a00 <ll_adv_enable+0x588>)
    17d8:	488a      	ldr	r0, [pc, #552]	; (1a04 <ll_adv_enable+0x58c>)
    17da:	f640 0301 	movw	r3, #2049	; 0x801
    17de:	f022 ff01 	bl	245e4 <printk>
    17e2:	4040      	eors	r0, r0
    17e4:	f380 8811 	msr	BASEPRI, r0
    17e8:	f04f 0003 	mov.w	r0, #3
    17ec:	df02      	svc	2
		}
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT && (CONFIG_BT_CTLR_ADV_AUX_SET > 0) */

#if defined(CONFIG_BT_PERIPHERAL)
	if (adv->lll.conn) {
    17ee:	6a23      	ldr	r3, [r4, #32]
    17f0:	b10b      	cbz	r3, 17f6 <ll_adv_enable+0x37e>
		conn_release(adv);
    17f2:	f012 f895 	bl	13920 <conn_release.constprop.0>
		ll_rx_link_release(node_rx_adv_term->hdr.link);
		ll_rx_release(node_rx_adv_term);
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	adv->is_enabled = 0U;
    17f6:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
		ull_filter_adv_scan_state_cb(0);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	return 0;
    17fa:	2600      	movs	r6, #0
	adv->is_enabled = 0U;
    17fc:	f36f 0300 	bfc	r3, #0, #1
}
    1800:	4630      	mov	r0, r6
	adv->is_enabled = 0U;
    1802:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
}
    1806:	b00f      	add	sp, #60	; 0x3c
    1808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			adv_size += pdu_adv->len;
    180c:	f899 3001 	ldrb.w	r3, [r9, #1]
    1810:	3310      	adds	r3, #16
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
    1812:	00db      	lsls	r3, r3, #3
    1814:	fb00 f003 	mul.w	r0, r0, r3
    1818:	f500 70aa 	add.w	r0, r0, #340	; 0x154
				   rxtx_turn_us * (adv_chn_cnt - 1);
    181c:	2364      	movs	r3, #100	; 0x64
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
    181e:	fb03 0002 	mla	r0, r3, r2, r0
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    1822:	4a7b      	ldr	r2, [pc, #492]	; (1a10 <ll_adv_enable+0x598>)
    1824:	61e4      	str	r4, [r4, #28]
	adv->evt.ticks_xtal_to_start =
    1826:	2331      	movs	r3, #49	; 0x31
    1828:	2500      	movs	r5, #0
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    182a:	fba0 0102 	umull	r0, r1, r0, r2
	adv->evt.ticks_xtal_to_start =
    182e:	6023      	str	r3, [r4, #0]
    1830:	e9c4 5505 	strd	r5, r5, [r4, #20]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    1834:	a36e      	add	r3, pc, #440	; (adr r3, 19f0 <ll_adv_enable+0x578>)
    1836:	e9d3 2300 	ldrd	r2, r3, [r3]
	adv->evt.ticks_preempt_to_start =
    183a:	e9c4 5501 	strd	r5, r5, [r4, #4]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    183e:	f7ff f97d 	bl	b3c <__aeabi_uldivmod>
	uint16_t interval = adv->interval;
    1842:	f8b4 8048 	ldrh.w	r8, [r4, #72]	; 0x48
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    1846:	60e0      	str	r0, [r4, #12]
	ticks_anchor = ticker_ticks_now_get();
    1848:	f00e fec2 	bl	105d0 <ticker_ticks_now_get>
    184c:	4607      	mov	r7, r0
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
    184e:	f1b8 0f00 	cmp.w	r8, #0
    1852:	d108      	bne.n	1866 <ll_adv_enable+0x3ee>
    1854:	f899 5000 	ldrb.w	r5, [r9]
    1858:	f005 050f 	and.w	r5, r5, #15
    185c:	f1a5 0501 	sub.w	r5, r5, #1
    1860:	fab5 f585 	clz	r5, r5
    1864:	096d      	lsrs	r5, r5, #5
    1866:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    186a:	68e3      	ldr	r3, [r4, #12]
    186c:	f365 0200 	bfi	r2, r5, #0, #1
	if (lll->is_hdcd) {
    1870:	f012 0501 	ands.w	r5, r2, #1
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
    1874:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
	if (lll->is_hdcd) {
    1878:	d03d      	beq.n	18f6 <ll_adv_enable+0x47e>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    187a:	f8df 918c 	ldr.w	r9, [pc, #396]	; 1a08 <ll_adv_enable+0x590>
    187e:	4965      	ldr	r1, [pc, #404]	; (1a14 <ll_adv_enable+0x59c>)
    1880:	9304      	str	r3, [sp, #16]
    1882:	2000      	movs	r0, #0
		ret_cb = TICKER_STATUS_BUSY;
    1884:	2502      	movs	r5, #2
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1886:	f10d 0830 	add.w	r8, sp, #48	; 0x30
    188a:	9301      	str	r3, [sp, #4]
    188c:	9105      	str	r1, [sp, #20]
    188e:	e9cd 9807 	strd	r9, r8, [sp, #28]
    1892:	2103      	movs	r1, #3
    1894:	e9cd 0002 	strd	r0, r0, [sp, #8]
    1898:	9406      	str	r4, [sp, #24]
    189a:	462a      	mov	r2, r5
    189c:	9000      	str	r0, [sp, #0]
    189e:	463b      	mov	r3, r7
		ret_cb = TICKER_STATUS_BUSY;
    18a0:	950c      	str	r5, [sp, #48]	; 0x30
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    18a2:	f00e fdc7 	bl	10434 <ticker_start>
		ret = ull_ticker_status_take(ret, &ret_cb);
    18a6:	4641      	mov	r1, r8
    18a8:	f011 fbdc 	bl	13064 <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
    18ac:	2800      	cmp	r0, #0
    18ae:	f47f af30 	bne.w	1712 <ll_adv_enable+0x29a>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    18b2:	4959      	ldr	r1, [pc, #356]	; (1a18 <ll_adv_enable+0x5a0>)
    18b4:	9105      	str	r1, [sp, #20]
    18b6:	f24a 32d8 	movw	r2, #41944	; 0xa3d8
    18ba:	9200      	str	r2, [sp, #0]
    18bc:	e9cd 9807 	strd	r9, r8, [sp, #28]
    18c0:	e9cd 0003 	strd	r0, r0, [sp, #12]
    18c4:	e9cd 0001 	strd	r0, r0, [sp, #4]
    18c8:	9406      	str	r4, [sp, #24]
    18ca:	463b      	mov	r3, r7
    18cc:	2201      	movs	r2, #1
    18ce:	2103      	movs	r1, #3
		ret_cb = TICKER_STATUS_BUSY;
    18d0:	950c      	str	r5, [sp, #48]	; 0x30
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    18d2:	f00e fdaf 	bl	10434 <ticker_start>
	ret = ull_ticker_status_take(ret, &ret_cb);
    18d6:	4641      	mov	r1, r8
    18d8:	f011 fbc4 	bl	13064 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    18dc:	2800      	cmp	r0, #0
    18de:	f47f af18 	bne.w	1712 <ll_adv_enable+0x29a>
	adv->is_enabled = 1;
    18e2:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
}
    18e6:	4630      	mov	r0, r6
	adv->is_enabled = 1;
    18e8:	f043 0301 	orr.w	r3, r3, #1
    18ec:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
}
    18f0:	b00f      	add	sp, #60	; 0x3c
    18f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    18f6:	4849      	ldr	r0, [pc, #292]	; (1a1c <ll_adv_enable+0x5a4>)
		ll_adv_ticker_ext[handle].ticks_slot_window =
    18f8:	4a49      	ldr	r2, [pc, #292]	; (1a20 <ll_adv_enable+0x5a8>)
		ret = ticker_start_ext(
    18fa:	f8df e10c 	ldr.w	lr, [pc, #268]	; 1a08 <ll_adv_enable+0x590>
    18fe:	f8df c114 	ldr.w	ip, [pc, #276]	; 1a14 <ll_adv_enable+0x59c>
    1902:	9406      	str	r4, [sp, #24]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    1904:	fba8 0100 	umull	r0, r1, r8, r0
    1908:	f04f 0991 	mov.w	r9, #145	; 0x91
    190c:	fb09 1108 	mla	r1, r9, r8, r1
			ULL_ADV_RANDOM_DELAY + ticks_slot;
    1910:	f203 1847 	addw	r8, r3, #327	; 0x147
		ll_adv_ticker_ext[handle].ticks_slot_window =
    1914:	f8c2 8000 	str.w	r8, [r2]
		ret_cb = TICKER_STATUS_BUSY;
    1918:	f04f 0902 	mov.w	r9, #2
		ret = ticker_start_ext(
    191c:	9304      	str	r3, [sp, #16]
    191e:	9209      	str	r2, [sp, #36]	; 0x24
    1920:	f10d 0830 	add.w	r8, sp, #48	; 0x30
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    1924:	a332      	add	r3, pc, #200	; (adr r3, 19f0 <ll_adv_enable+0x578>)
    1926:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret = ticker_start_ext(
    192a:	f64f 7aff 	movw	sl, #65535	; 0xffff
    192e:	e9cd e807 	strd	lr, r8, [sp, #28]
    1932:	9502      	str	r5, [sp, #8]
		ret_cb = TICKER_STATUS_BUSY;
    1934:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
		ret = ticker_start_ext(
    1938:	f8cd c014 	str.w	ip, [sp, #20]
    193c:	f8cd a00c 	str.w	sl, [sp, #12]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    1940:	f7ff f8fc 	bl	b3c <__aeabi_uldivmod>
		ret = ticker_start_ext(
    1944:	464a      	mov	r2, r9
    1946:	e9cd 5000 	strd	r5, r0, [sp]
    194a:	463b      	mov	r3, r7
    194c:	4628      	mov	r0, r5
    194e:	2103      	movs	r1, #3
    1950:	f00e fd1a 	bl	10388 <ticker_start_ext>
    1954:	e7bf      	b.n	18d6 <ll_adv_enable+0x45e>
			} else if (pdu_adv->type == PDU_ADV_TYPE_SCAN_IND) {
    1956:	2b06      	cmp	r3, #6
    1958:	f43f aebb 	beq.w	16d2 <ll_adv_enable+0x25a>
    195c:	f44f 73da 	mov.w	r3, #436	; 0x1b4
    1960:	f44f 701b 	mov.w	r0, #620	; 0x26c
    1964:	e6be      	b.n	16e4 <ll_adv_enable+0x26c>
			return BT_HCI_ERR_INVALID_PARAM;
    1966:	2612      	movs	r6, #18
    1968:	e5ca      	b.n	1500 <ll_adv_enable+0x88>
			conn_release(adv);
    196a:	f011 ffd9 	bl	13920 <conn_release.constprop.0>
			return BT_HCI_ERR_HW_FAILURE;
    196e:	2603      	movs	r6, #3
    1970:	e5c6      	b.n	1500 <ll_adv_enable+0x88>
    1972:	f44f 73f2 	mov.w	r3, #484	; 0x1e4
    1976:	f44f 707f 	mov.w	r0, #1020	; 0x3fc
    197a:	e6b3      	b.n	16e4 <ll_adv_enable+0x26c>
	LL_ASSERT(!ret);
    197c:	4a1f      	ldr	r2, [pc, #124]	; (19fc <ll_adv_enable+0x584>)
    197e:	4929      	ldr	r1, [pc, #164]	; (1a24 <ll_adv_enable+0x5ac>)
    1980:	4820      	ldr	r0, [pc, #128]	; (1a04 <ll_adv_enable+0x58c>)
    1982:	f240 73fe 	movw	r3, #2046	; 0x7fe
    1986:	f022 fe2d 	bl	245e4 <printk>
    198a:	4040      	eors	r0, r0
    198c:	f380 8811 	msr	BASEPRI, r0
    1990:	f04f 0003 	mov.w	r0, #3
    1994:	df02      	svc	2
    1996:	e718      	b.n	17ca <ll_adv_enable+0x352>
			conn_lll->link_tx_free = &conn_lll->link_tx;
    1998:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    199c:	6768      	str	r0, [r5, #116]	; 0x74
    199e:	e5cf      	b.n	1540 <ll_adv_enable+0xc8>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    19a0:	2607      	movs	r6, #7
    19a2:	e5ad      	b.n	1500 <ll_adv_enable+0x88>
		mark = ull_disable_unmark(adv);
    19a4:	4814      	ldr	r0, [pc, #80]	; (19f8 <ll_adv_enable+0x580>)
    19a6:	f011 fba3 	bl	130f0 <ull_disable_unmark>
		LL_ASSERT(mark == adv);
    19aa:	4284      	cmp	r4, r0
    19ac:	f43f ada7 	beq.w	14fe <ll_adv_enable+0x86>
    19b0:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
    19b4:	4a11      	ldr	r2, [pc, #68]	; (19fc <ll_adv_enable+0x584>)
    19b6:	4912      	ldr	r1, [pc, #72]	; (1a00 <ll_adv_enable+0x588>)
    19b8:	4812      	ldr	r0, [pc, #72]	; (1a04 <ll_adv_enable+0x58c>)
    19ba:	f022 fe13 	bl	245e4 <printk>
    19be:	4040      	eors	r0, r0
    19c0:	f380 8811 	msr	BASEPRI, r0
    19c4:	f04f 0003 	mov.w	r0, #3
    19c8:	df02      	svc	2
    19ca:	e598      	b.n	14fe <ll_adv_enable+0x86>
			ll_rx_release(node_rx);
    19cc:	4658      	mov	r0, fp
    19ce:	f011 fabf 	bl	12f50 <ll_rx_release>
			ll_rx_link_release(link);
    19d2:	4650      	mov	r0, sl
    19d4:	f011 fab0 	bl	12f38 <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    19d8:	2607      	movs	r6, #7
    19da:	e591      	b.n	1500 <ll_adv_enable+0x88>
			mark = ull_disable_unmark(adv);
    19dc:	4806      	ldr	r0, [pc, #24]	; (19f8 <ll_adv_enable+0x580>)
    19de:	f011 fb87 	bl	130f0 <ull_disable_unmark>
			LL_ASSERT(mark == adv);
    19e2:	4284      	cmp	r4, r0
    19e4:	f43f ad8b 	beq.w	14fe <ll_adv_enable+0x86>
    19e8:	f240 73ea 	movw	r3, #2026	; 0x7ea
    19ec:	e7e2      	b.n	19b4 <ll_adv_enable+0x53c>
    19ee:	bf00      	nop
    19f0:	1afd498d 	.word	0x1afd498d
    19f4:	00000007 	.word	0x00000007
    19f8:	2000181c 	.word	0x2000181c
    19fc:	0002b4f8 	.word	0x0002b4f8
    1a00:	0002b5e8 	.word	0x0002b5e8
    1a04:	0002b0c4 	.word	0x0002b0c4
    1a08:	0001200d 	.word	0x0001200d
    1a0c:	20001838 	.word	0x20001838
    1a10:	3b9aca00 	.word	0x3b9aca00
    1a14:	00013591 	.word	0x00013591
    1a18:	00013839 	.word	0x00013839
    1a1c:	84e72a00 	.word	0x84e72a00
    1a20:	20001870 	.word	0x20001870
    1a24:	0002b458 	.word	0x0002b458

00001a28 <event_conn_upd_prep>:
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
}

static inline int event_conn_upd_prep(struct ll_conn *conn, uint16_t lazy,
				      uint32_t ticks_at_expire)
{
    1a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_conn *lll = &conn->lll;
	struct ll_conn *conn_upd;
	uint16_t instant_latency;
	uint16_t event_counter;

	conn_upd = conn_upd_curr;
    1a2c:	4dc8      	ldr	r5, [pc, #800]	; (1d50 <event_conn_upd_prep+0x328>)

	/* set mutex */
	if (!conn_upd) {
    1a2e:	682b      	ldr	r3, [r5, #0]
{
    1a30:	b08b      	sub	sp, #44	; 0x2c
    1a32:	4604      	mov	r4, r0
    1a34:	460f      	mov	r7, r1
    1a36:	4691      	mov	r9, r2
	if (!conn_upd) {
    1a38:	2b00      	cmp	r3, #0
    1a3a:	f000 8214 	beq.w	1e66 <event_conn_upd_prep+0x43e>
		conn_upd_curr = conn;
	}

	/* Calculate current event counter */
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    1a3e:	8e66      	ldrh	r6, [r4, #50]	; 0x32
    1a40:	8de2      	ldrh	r2, [r4, #46]	; 0x2e

	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
			  0xffff;
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    1a42:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    1a46:	4416      	add	r6, r2
    1a48:	443e      	add	r6, r7
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    1a4a:	f013 0307 	ands.w	r3, r3, #7
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    1a4e:	b2b6      	uxth	r6, r6
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    1a50:	f040 81a7 	bne.w	1da2 <event_conn_upd_prep+0x37a>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    1a54:	f8b4 80e8 	ldrh.w	r8, [r4, #232]	; 0xe8
    1a58:	eba6 0208 	sub.w	r2, r6, r8
    1a5c:	fa1f fa82 	uxth.w	sl, r2
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
			sys_cpu_to_le16(conn->llcp.conn_upd.instant);
		/* enqueue control PDU */
		ctrl_tx_enqueue(conn, tx);
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
	} else if (instant_latency <= 0x7FFF) {
    1a60:	0412      	lsls	r2, r2, #16
    1a62:	f100 825e 	bmi.w	1f22 <event_conn_upd_prep+0x4fa>
		uint32_t ticker_status;
		uint32_t periodic_us;
		uint16_t latency;

#if defined(CONFIG_BT_PERIPHERAL) && defined(CONFIG_BT_CTLR_LE_ENC)
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
    1a66:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
    1a6a:	2a00      	cmp	r2, #0
    1a6c:	f2c0 813d 	blt.w	1cea <event_conn_upd_prep+0x2c2>
			conn->slave.llcp_type = LLCP_NONE;
		} else
#endif /* CONFIG_BT_PERIPHERAL && CONFIG_BT_CTLR_LE_ENC */
		{
			/* procedure request acked */
			conn->llcp_ack = conn->llcp_req;
    1a70:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    1a74:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5

		/* procedure request acked */
		conn->llcp_cu.ack = conn->llcp_cu.req;

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    1a78:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
    1a7c:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
		conn->llcp_cu.ack = conn->llcp_cu.req;
    1a80:	f894 110c 	ldrb.w	r1, [r4, #268]	; 0x10c
    1a84:	f884 110d 	strb.w	r1, [r4, #269]	; 0x10d
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    1a88:	4293      	cmp	r3, r2
    1a8a:	d006      	beq.n	1a9a <event_conn_upd_prep+0x72>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    1a8c:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    1a90:	f003 0307 	and.w	r3, r3, #7
    1a94:	2b05      	cmp	r3, #5
    1a96:	f000 824f 	beq.w	1f38 <event_conn_upd_prep+0x510>
			conn->procedure_expire = 0U;
		}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

		/* reset mutex */
		if (conn_upd_curr == conn) {
    1a9a:	682b      	ldr	r3, [r5, #0]
    1a9c:	42a3      	cmp	r3, r4
	conn_upd_curr = NULL;
    1a9e:	bf04      	itt	eq
    1aa0:	2300      	moveq	r3, #0
    1aa2:	602b      	streq	r3, [r5, #0]
		}

		lll = &conn->lll;

		/* Acquire Rx node */
		rx = conn->llcp_rx;
    1aa4:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
		LL_ASSERT(rx && rx->hdr.link);
    1aa8:	2d00      	cmp	r5, #0
    1aaa:	f000 816b 	beq.w	1d84 <event_conn_upd_prep+0x35c>
    1aae:	6828      	ldr	r0, [r5, #0]
    1ab0:	2800      	cmp	r0, #0
    1ab2:	f000 8167 	beq.w	1d84 <event_conn_upd_prep+0x35c>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Prepare the rx packet structure */
		if ((conn->llcp_cu.interval != lll->interval) ||
    1ab6:	f8b4 3110 	ldrh.w	r3, [r4, #272]	; 0x110
    1aba:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
		conn->llcp_rx = rx->hdr.link->mem;
    1abe:	6842      	ldr	r2, [r0, #4]
    1ac0:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
		if ((conn->llcp_cu.interval != lll->interval) ||
    1ac4:	4563      	cmp	r3, ip
    1ac6:	f8b4 2112 	ldrh.w	r2, [r4, #274]	; 0x112
    1aca:	f8b4 1114 	ldrh.w	r1, [r4, #276]	; 0x114
    1ace:	f000 8120 	beq.w	1d12 <event_conn_upd_prep+0x2ea>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
				       lll->interval * CONN_INT_UNIT_US) !=
		     conn->supervision_reload)) {
			struct node_rx_cu *cu;

			rx->hdr.handle = lll->handle;
    1ad2:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
    1ad6:	f8a5 c006 	strh.w	ip, [r5, #6]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    1ada:	f04f 0e16 	mov.w	lr, #22

			/* prepare connection update complete structure */
			cu = (void *)rx->pdu;
			cu->status = 0x00;
    1ade:	f04f 0c00 	mov.w	ip, #0
			cu->interval = conn->llcp_cu.interval;
    1ae2:	83eb      	strh	r3, [r5, #30]
			cu->latency = conn->llcp_cu.latency;
    1ae4:	842a      	strh	r2, [r5, #32]
			cu->timeout = conn->llcp_cu.timeout;
    1ae6:	8469      	strh	r1, [r5, #34]	; 0x22
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    1ae8:	f885 e004 	strb.w	lr, [r5, #4]
			cu->status = 0x00;
    1aec:	f885 c01c 	strb.w	ip, [r5, #28]
			/* Mark for buffer for release */
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
		}

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
    1af0:	4629      	mov	r1, r5
    1af2:	f011 fa33 	bl	12f5c <ll_rx_put>
		ll_rx_sched();
    1af6:	f011 fa3b 	bl	12f70 <ll_rx_sched>

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED)
		/* restore to normal prepare */
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    1afa:	6823      	ldr	r3, [r4, #0]
    1afc:	2b00      	cmp	r3, #0
    1afe:	f2c0 80fc 	blt.w	1cfa <event_conn_upd_prep+0x2d2>
					    ticks_prepare_to_start);
		}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * lll->interval;
    1b02:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
		latency = conn_interval_old / conn->llcp_cu.interval;
    1b04:	f8b4 5110 	ldrh.w	r5, [r4, #272]	; 0x110
		conn_interval_old = instant_latency * lll->interval;
    1b08:	fb10 f00a 	smulbb	r0, r0, sl
    1b0c:	b280      	uxth	r0, r0
		latency = conn_interval_old / conn->llcp_cu.interval;
    1b0e:	fbb0 f3f5 	udiv	r3, r0, r5
		conn_interval_new = latency * conn->llcp_cu.interval;
    1b12:	fb15 f203 	smulbb	r2, r5, r3
    1b16:	b292      	uxth	r2, r2
		if (conn_interval_new > conn_interval_old) {
    1b18:	4290      	cmp	r0, r2
		latency = conn_interval_old / conn->llcp_cu.interval;
    1b1a:	fa1f fb83 	uxth.w	fp, r3
		if (conn_interval_new > conn_interval_old) {
    1b1e:	f0c0 80d3 	bcc.w	1cc8 <event_conn_upd_prep+0x2a0>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
				(conn_interval_new - conn_interval_old) *
				CONN_INT_UNIT_US);
		} else {
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1b22:	fb05 0313 	mls	r3, r5, r3, r0
    1b26:	f240 42e2 	movw	r2, #1250	; 0x4e2
    1b2a:	488a      	ldr	r0, [pc, #552]	; (1d54 <event_conn_upd_prep+0x32c>)
    1b2c:	b29b      	uxth	r3, r3
    1b2e:	fb02 f303 	mul.w	r3, r2, r3
    1b32:	fba3 0100 	umull	r0, r1, r3, r0
    1b36:	a384      	add	r3, pc, #528	; (adr r3, 1d48 <event_conn_upd_prep+0x320>)
    1b38:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b3c:	f7fe fffe 	bl	b3c <__aeabi_uldivmod>
    1b40:	eba9 0900 	sub.w	r9, r9, r0
				(conn_interval_old - conn_interval_new) *
				CONN_INT_UNIT_US);
		}
		lll->latency_prepare += lazy;
    1b44:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
			CONN_INT_UNIT_US;
		periodic_us = conn_interval_us;

		if (0) {
#if defined(CONFIG_BT_PERIPHERAL)
		} else if (lll->role) {
    1b46:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		lll->latency_prepare -= (instant_latency - latency);
    1b4a:	eba8 0606 	sub.w	r6, r8, r6
    1b4e:	445e      	add	r6, fp
		lll->latency_prepare += lazy;
    1b50:	440f      	add	r7, r1
		lll->latency_prepare -= (instant_latency - latency);
    1b52:	4437      	add	r7, r6
		conn_interval_us = conn->llcp_cu.interval *
    1b54:	f240 48e2 	movw	r8, #1250	; 0x4e2
		} else if (lll->role) {
    1b58:	2b00      	cmp	r3, #0
		lll->latency_prepare -= (instant_latency - latency);
    1b5a:	85e7      	strh	r7, [r4, #46]	; 0x2e
		conn_interval_us = conn->llcp_cu.interval *
    1b5c:	fb08 f505 	mul.w	r5, r8, r5
		} else if (lll->role) {
    1b60:	f2c0 8183 	blt.w	1e6a <event_conn_upd_prep+0x442>
			 */
			ticks_win_offset += 1U;
#endif /* CONFIG_BT_CENTRAL */

		} else {
			LL_ASSERT(0);
    1b64:	4a7c      	ldr	r2, [pc, #496]	; (1d58 <event_conn_upd_prep+0x330>)
    1b66:	497d      	ldr	r1, [pc, #500]	; (1d5c <event_conn_upd_prep+0x334>)
    1b68:	487d      	ldr	r0, [pc, #500]	; (1d60 <event_conn_upd_prep+0x338>)
    1b6a:	f44f 6326 	mov.w	r3, #2656	; 0xa60
    1b6e:	f022 fd39 	bl	245e4 <printk>
    1b72:	4040      	eors	r0, r0
    1b74:	f380 8811 	msr	BASEPRI, r0
    1b78:	f04f 0003 	mov.w	r0, #3
    1b7c:	df02      	svc	2
		uint32_t ticks_win_offset = 0;
    1b7e:	2700      	movs	r7, #0
		periodic_us = conn_interval_us;
    1b80:	46aa      	mov	sl, r5

		lll->interval = conn->llcp_cu.interval;
		lll->latency = conn->llcp_cu.latency;

		conn->supervision_reload =
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1b82:	f8b4 2114 	ldrh.w	r2, [r4, #276]	; 0x114
		lll->latency = conn->llcp_cu.latency;
    1b86:	f8b4 0112 	ldrh.w	r0, [r4, #274]	; 0x112
		conn->procedure_reload =
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);

#if defined(CONFIG_BT_CTLR_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1b8a:	4b76      	ldr	r3, [pc, #472]	; (1d64 <event_conn_upd_prep+0x33c>)
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1b8c:	4976      	ldr	r1, [pc, #472]	; (1d68 <event_conn_upd_prep+0x340>)
		lll->latency = conn->llcp_cu.latency;
    1b8e:	85a0      	strh	r0, [r4, #44]	; 0x2c
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1b90:	f242 7c10 	movw	ip, #10000	; 0x2710
    1b94:	fb0c 5202 	mla	r2, ip, r2, r5
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1b98:	442b      	add	r3, r5
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1b9a:	4429      	add	r1, r5
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1b9c:	fbb3 f3f5 	udiv	r3, r3, r5
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1ba0:	f100 0c06 	add.w	ip, r0, #6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1ba4:	3a01      	subs	r2, #1
    1ba6:	fbb2 f2f5 	udiv	r2, r2, r5
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1baa:	fbb1 f5f5 	udiv	r5, r1, r5
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1bae:	b299      	uxth	r1, r3
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1bb0:	f8a4 20c2 	strh.w	r2, [r4, #194]	; 0xc2
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1bb4:	4561      	cmp	r1, ip
		lll->interval = conn->llcp_cu.interval;
    1bb6:	f8b4 2110 	ldrh.w	r2, [r4, #272]	; 0x110
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1bba:	f8a4 10ce 	strh.w	r1, [r4, #206]	; 0xce
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1bbe:	f8a4 50c6 	strh.w	r5, [r4, #198]	; 0xc6
		lll->interval = conn->llcp_cu.interval;
    1bc2:	8562      	strh	r2, [r4, #42]	; 0x2a
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1bc4:	dd02      	ble.n	1bcc <event_conn_upd_prep+0x1a4>
				     (conn->apto_reload - (lll->latency + 6)) :
    1bc6:	1a09      	subs	r1, r1, r0
    1bc8:	3906      	subs	r1, #6
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1bca:	b289      	uxth	r1, r1
				     conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

		if (conn->llcp_cu.cmd) {
    1bcc:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1bd0:	f8a4 10ca 	strh.w	r1, [r4, #202]	; 0xca
		if (conn->llcp_cu.cmd) {
    1bd4:	071b      	lsls	r3, r3, #28
			conn->supervision_expire = 0U;
    1bd6:	bf44      	itt	mi
    1bd8:	2300      	movmi	r3, #0
    1bda:	f8a4 30c4 	strhmi.w	r3, [r4, #196]	; 0xc4
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		uint32_t mayfly_was_enabled =
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    1bde:	2102      	movs	r1, #2
    1be0:	2001      	movs	r0, #1
    1be2:	f01a fb8b 	bl	1c2fc <mayfly_is_enabled>
					  TICKER_USER_ID_ULL_LOW);
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    1be6:	2200      	movs	r2, #0
    1be8:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    1bea:	4605      	mov	r5, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    1bec:	2001      	movs	r0, #1
    1bee:	f00d f96f 	bl	eed0 <mayfly_enable>
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    1bf2:	495e      	ldr	r1, [pc, #376]	; (1d6c <event_conn_upd_prep+0x344>)
    1bf4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    1bf8:	4620      	mov	r0, r4
    1bfa:	f00d f8fb 	bl	edf4 <mem_index_get>
			      0);
#endif

		/* start slave/master with new timings */
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    1bfe:	f100 0803 	add.w	r8, r0, #3
    1c02:	fa5f f888 	uxtb.w	r8, r8
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
    1c06:	4b5a      	ldr	r3, [pc, #360]	; (1d70 <event_conn_upd_prep+0x348>)
    1c08:	9400      	str	r4, [sp, #0]
    1c0a:	4642      	mov	r2, r8
    1c0c:	2101      	movs	r1, #1
    1c0e:	2000      	movs	r0, #0
    1c10:	f00e fc98 	bl	10544 <ticker_stop>
					    TICKER_USER_ID_ULL_HIGH,
					    ticker_id_conn,
					    ticker_stop_conn_op_cb,
					    (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    1c14:	f030 0302 	bics.w	r3, r0, #2
    1c18:	d00c      	beq.n	1c34 <event_conn_upd_prep+0x20c>
    1c1a:	4a4f      	ldr	r2, [pc, #316]	; (1d58 <event_conn_upd_prep+0x330>)
    1c1c:	4955      	ldr	r1, [pc, #340]	; (1d74 <event_conn_upd_prep+0x34c>)
    1c1e:	4850      	ldr	r0, [pc, #320]	; (1d60 <event_conn_upd_prep+0x338>)
    1c20:	f640 238f 	movw	r3, #2703	; 0xa8f
    1c24:	f022 fcde 	bl	245e4 <printk>
    1c28:	4040      	eors	r0, r0
    1c2a:	f380 8811 	msr	BASEPRI, r0
    1c2e:	f04f 0003 	mov.w	r0, #3
    1c32:	df02      	svc	2
		ticker_status =
			ticker_start(TICKER_INSTANCE_ID_CTLR,
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ticks_at_expire, ticks_win_offset,
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    1c34:	4b47      	ldr	r3, [pc, #284]	; (1d54 <event_conn_upd_prep+0x32c>)
    1c36:	fbaa ab03 	umull	sl, fp, sl, r3
    1c3a:	4650      	mov	r0, sl
    1c3c:	a342      	add	r3, pc, #264	; (adr r3, 1d48 <event_conn_upd_prep+0x320>)
    1c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1c42:	4659      	mov	r1, fp
    1c44:	f7fe ff7a 	bl	b3c <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
    1c48:	4a4b      	ldr	r2, [pc, #300]	; (1d78 <event_conn_upd_prep+0x350>)
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1c4a:	68e3      	ldr	r3, [r4, #12]
    1c4c:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(periodic_us),
    1c4e:	f020 467f 	bic.w	r6, r0, #4278190080	; 0xff000000
    1c52:	fba6 2302 	umull	r2, r3, r6, r2
    1c56:	2007      	movs	r0, #7
    1c58:	fb00 3306 	mla	r3, r0, r6, r3
    1c5c:	ebba 0002 	subs.w	r0, sl, r2
    1c60:	eb6b 0103 	sbc.w	r1, fp, r3
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1c64:	f8df e114 	ldr.w	lr, [pc, #276]	; 1d7c <event_conn_upd_prep+0x354>
    1c68:	f8df c114 	ldr.w	ip, [pc, #276]	; 1d80 <event_conn_upd_prep+0x358>
    1c6c:	9408      	str	r4, [sp, #32]
    1c6e:	9406      	str	r4, [sp, #24]
				     HAL_TICKER_REMAINDER(periodic_us),
    1c70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1c74:	2300      	movs	r3, #0
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1c76:	f64f 74fe 	movw	r4, #65534	; 0xfffe
    1c7a:	f8cd e01c 	str.w	lr, [sp, #28]
    1c7e:	f8cd c014 	str.w	ip, [sp, #20]
    1c82:	9403      	str	r4, [sp, #12]
				     HAL_TICKER_REMAINDER(periodic_us),
    1c84:	f7fe ff5a 	bl	b3c <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1c88:	464b      	mov	r3, r9
    1c8a:	e9cd 6001 	strd	r6, r0, [sp, #4]
    1c8e:	9700      	str	r7, [sp, #0]
    1c90:	4642      	mov	r2, r8
    1c92:	2101      	movs	r1, #1
    1c94:	2000      	movs	r0, #0
    1c96:	f00e fbcd 	bl	10434 <ticker_start>
#else
				     ull_master_ticker_cb,
#endif
				     conn, ticker_start_conn_op_cb,
				     (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    1c9a:	f030 0302 	bics.w	r3, r0, #2
    1c9e:	d00c      	beq.n	1cba <event_conn_upd_prep+0x292>
    1ca0:	4a2d      	ldr	r2, [pc, #180]	; (1d58 <event_conn_upd_prep+0x330>)
    1ca2:	4934      	ldr	r1, [pc, #208]	; (1d74 <event_conn_upd_prep+0x34c>)
    1ca4:	482e      	ldr	r0, [pc, #184]	; (1d60 <event_conn_upd_prep+0x338>)
    1ca6:	f640 23a9 	movw	r3, #2729	; 0xaa9
    1caa:	f022 fc9b 	bl	245e4 <printk>
    1cae:	4040      	eors	r0, r0
    1cb0:	f380 8811 	msr	BASEPRI, r0
    1cb4:	f04f 0003 	mov.w	r0, #3
    1cb8:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* enable ticker job, if disabled in this function */
		if (mayfly_was_enabled) {
    1cba:	2d00      	cmp	r5, #0
    1cbc:	f040 8136 	bne.w	1f2c <event_conn_upd_prep+0x504>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
				      TICKER_USER_ID_ULL_LOW, 1);
		}
#endif

		return 0;
    1cc0:	2000      	movs	r0, #0
	}

	return -EINPROGRESS;
}
    1cc2:	b00b      	add	sp, #44	; 0x2c
    1cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    1cc8:	1a12      	subs	r2, r2, r0
    1cca:	f240 43e2 	movw	r3, #1250	; 0x4e2
    1cce:	4821      	ldr	r0, [pc, #132]	; (1d54 <event_conn_upd_prep+0x32c>)
    1cd0:	fb03 f202 	mul.w	r2, r3, r2
    1cd4:	fba2 0100 	umull	r0, r1, r2, r0
    1cd8:	a31b      	add	r3, pc, #108	; (adr r3, 1d48 <event_conn_upd_prep+0x320>)
    1cda:	e9d3 2300 	ldrd	r2, r3, [r3]
    1cde:	f7fe ff2d 	bl	b3c <__aeabi_uldivmod>
    1ce2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1ce6:	4481      	add	r9, r0
    1ce8:	e72c      	b.n	1b44 <event_conn_upd_prep+0x11c>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
    1cea:	f894 20d9 	ldrb.w	r2, [r4, #217]	; 0xd9
    1cee:	2a00      	cmp	r2, #0
    1cf0:	f43f aebe 	beq.w	1a70 <event_conn_upd_prep+0x48>
			conn->slave.llcp_type = LLCP_NONE;
    1cf4:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
    1cf8:	e6be      	b.n	1a78 <event_conn_upd_prep+0x50>
			uint32_t ticks_prepare_to_start =
    1cfa:	e9d4 0201 	ldrd	r0, r2, [r4, #4]
			conn->evt.ticks_xtal_to_start &= ~XON_BITMASK;
    1cfe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    1d02:	4282      	cmp	r2, r0
    1d04:	bf2c      	ite	cs
    1d06:	4491      	addcs	r9, r2
    1d08:	4481      	addcc	r9, r0
    1d0a:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->evt.ticks_xtal_to_start -
    1d0c:	eba9 0903 	sub.w	r9, r9, r3
    1d10:	e6f7      	b.n	1b02 <event_conn_upd_prep+0xda>
		if ((conn->llcp_cu.interval != lll->interval) ||
    1d12:	f8b4 c02c 	ldrh.w	ip, [r4, #44]	; 0x2c
    1d16:	4594      	cmp	ip, r2
    1d18:	f47f aedb 	bne.w	1ad2 <event_conn_upd_prep+0xaa>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    1d1c:	f240 4ce2 	movw	ip, #1250	; 0x4e2
    1d20:	fb0c fb03 	mul.w	fp, ip, r3
    1d24:	f242 7c10 	movw	ip, #10000	; 0x2710
		    (conn->llcp_cu.latency != lll->latency) ||
    1d28:	f8b4 e0c2 	ldrh.w	lr, [r4, #194]	; 0xc2
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    1d2c:	fb0c bc01 	mla	ip, ip, r1, fp
    1d30:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    1d34:	fbbc fcfb 	udiv	ip, ip, fp
		    (conn->llcp_cu.latency != lll->latency) ||
    1d38:	fa1f fc8c 	uxth.w	ip, ip
    1d3c:	45e6      	cmp	lr, ip
    1d3e:	f47f aec8 	bne.w	1ad2 <event_conn_upd_prep+0xaa>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    1d42:	2301      	movs	r3, #1
    1d44:	712b      	strb	r3, [r5, #4]
    1d46:	e6d3      	b.n	1af0 <event_conn_upd_prep+0xc8>
    1d48:	1afd498d 	.word	0x1afd498d
    1d4c:	00000007 	.word	0x00000007
    1d50:	20001890 	.word	0x20001890
    1d54:	3b9aca00 	.word	0x3b9aca00
    1d58:	0002b604 	.word	0x0002b604
    1d5c:	0002b15c 	.word	0x0002b15c
    1d60:	0002b0c4 	.word	0x0002b0c4
    1d64:	01c9c37f 	.word	0x01c9c37f
    1d68:	026259ff 	.word	0x026259ff
    1d6c:	20000768 	.word	0x20000768
    1d70:	000141b5 	.word	0x000141b5
    1d74:	0002b6e4 	.word	0x0002b6e4
    1d78:	1afd498d 	.word	0x1afd498d
    1d7c:	0001415d 	.word	0x0001415d
    1d80:	000189bd 	.word	0x000189bd
		LL_ASSERT(rx && rx->hdr.link);
    1d84:	4a80      	ldr	r2, [pc, #512]	; (1f88 <event_conn_upd_prep+0x560>)
    1d86:	4981      	ldr	r1, [pc, #516]	; (1f8c <event_conn_upd_prep+0x564>)
    1d88:	4881      	ldr	r0, [pc, #516]	; (1f90 <event_conn_upd_prep+0x568>)
    1d8a:	f640 13e4 	movw	r3, #2532	; 0x9e4
    1d8e:	f022 fc29 	bl	245e4 <printk>
    1d92:	4040      	eors	r0, r0
    1d94:	f380 8811 	msr	BASEPRI, r0
    1d98:	f04f 0003 	mov.w	r0, #3
    1d9c:	df02      	svc	2
    1d9e:	6828      	ldr	r0, [r5, #0]
    1da0:	e689      	b.n	1ab6 <event_conn_upd_prep+0x8e>
		rx = ll_pdu_rx_alloc_peek(1);
    1da2:	2001      	movs	r0, #1
    1da4:	f011 f8f8 	bl	12f98 <ll_pdu_rx_alloc_peek>
		if (!rx) {
    1da8:	4607      	mov	r7, r0
    1daa:	2800      	cmp	r0, #0
    1dac:	f000 80ca 	beq.w	1f44 <event_conn_upd_prep+0x51c>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1db0:	4878      	ldr	r0, [pc, #480]	; (1f94 <event_conn_upd_prep+0x56c>)
    1db2:	f00c ffeb 	bl	ed8c <mem_acquire>
		if (!tx) {
    1db6:	4605      	mov	r5, r0
    1db8:	2800      	cmp	r0, #0
    1dba:	f000 80c3 	beq.w	1f44 <event_conn_upd_prep+0x51c>
		(void)ll_pdu_rx_alloc();
    1dbe:	f011 f909 	bl	12fd4 <ll_pdu_rx_alloc>
		rx->hdr.link->mem = conn->llcp_rx;
    1dc2:	683a      	ldr	r2, [r7, #0]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1dc4:	792b      	ldrb	r3, [r5, #4]
		rx->hdr.link->mem = conn->llcp_rx;
    1dc6:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
    1dca:	6051      	str	r1, [r2, #4]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1dcc:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    1dd0:	220c      	movs	r2, #12
		conn->llcp_rx = rx;
    1dd2:	f8c4 7108 	str.w	r7, [r4, #264]	; 0x108
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    1dd6:	716a      	strb	r2, [r5, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1dd8:	712b      	strb	r3, [r5, #4]
		conn->llcp.conn_upd.instant = event_counter +
    1dda:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
    1ddc:	f8d4 2118 	ldr.w	r2, [r4, #280]	; 0x118
    1de0:	4f6d      	ldr	r7, [pc, #436]	; (1f98 <event_conn_upd_prep+0x570>)
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    1de2:	f894 110e 	ldrb.w	r1, [r4, #270]	; 0x10e
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    1de6:	2000      	movs	r0, #0
		conn->llcp.conn_upd.instant = event_counter +
    1de8:	441e      	add	r6, r3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    1dea:	71e8      	strb	r0, [r5, #7]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
    1dec:	fba7 3202 	umull	r3, r2, r7, r2
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    1df0:	f3c2 228f 	ubfx	r2, r2, #10, #16
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
    1df4:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
    1df8:	722b      	strb	r3, [r5, #8]
	    conn->tx_head &&
    1dfa:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    1dfe:	f8a5 2009 	strh.w	r2, [r5, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    1e02:	f8b4 2110 	ldrh.w	r2, [r4, #272]	; 0x110
    1e06:	f8a5 200b 	strh.w	r2, [r5, #11]
					      conn->lll.latency + 6;
    1e0a:	3606      	adds	r6, #6
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    1e0c:	f8b4 2112 	ldrh.w	r2, [r4, #274]	; 0x112
    1e10:	f8a5 200d 	strh.w	r2, [r5, #13]
					      conn->lll.latency + 6;
    1e14:	b2b6      	uxth	r6, r6
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    1e16:	f8b4 2114 	ldrh.w	r2, [r4, #276]	; 0x114
    1e1a:	f8a5 200f 	strh.w	r2, [r5, #15]
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    1e1e:	f360 0102 	bfi	r1, r0, #0, #3
		conn->llcp.conn_upd.instant = event_counter +
    1e22:	f8a4 60e8 	strh.w	r6, [r4, #232]	; 0xe8
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    1e26:	f884 110e 	strb.w	r1, [r4, #270]	; 0x10e
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    1e2a:	f8a5 6011 	strh.w	r6, [r5, #17]
	if (
    1e2e:	2b00      	cmp	r3, #0
    1e30:	d069      	beq.n	1f06 <event_conn_upd_prep+0x4de>
	    !conn->llcp_enc.pause_tx &&
    1e32:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
    1e36:	0790      	lsls	r0, r2, #30
    1e38:	d465      	bmi.n	1f06 <event_conn_upd_prep+0x4de>
	    !conn->llcp_phy.pause_tx &&
    1e3a:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
    1e3e:	07d1      	lsls	r1, r2, #31
    1e40:	d461      	bmi.n	1f06 <event_conn_upd_prep+0x4de>
		if (conn->tx_head == conn->tx_data) {
    1e42:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
    1e46:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
    1e48:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
    1e4c:	f000 8085 	beq.w	1f5a <event_conn_upd_prep+0x532>
		} else if (!conn->tx_ctrl) {
    1e50:	2a00      	cmp	r2, #0
    1e52:	d15b      	bne.n	1f0c <event_conn_upd_prep+0x4e4>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    1e54:	791a      	ldrb	r2, [r3, #4]
    1e56:	f002 0203 	and.w	r2, r2, #3
    1e5a:	2a03      	cmp	r2, #3
    1e5c:	f000 8089 	beq.w	1f72 <event_conn_upd_prep+0x54a>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    1e60:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
    1e64:	e054      	b.n	1f10 <event_conn_upd_prep+0x4e8>
		conn_upd_curr = conn;
    1e66:	6028      	str	r0, [r5, #0]
    1e68:	e5e9      	b.n	1a3e <event_conn_upd_prep+0x16>
			lll->slave.window_widening_prepare_us -=
    1e6a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
				lll->slave.window_widening_periodic_us *
    1e6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1e6e:	4f4b      	ldr	r7, [pc, #300]	; (1f9c <event_conn_upd_prep+0x574>)
			lll->slave.window_widening_prepare_us -=
    1e70:	fb03 231a 	mls	r3, r3, sl, r2
    1e74:	64a3      	str	r3, [r4, #72]	; 0x48
				(((lll_clock_ppm_local_get() +
    1e76:	f018 fb0b 	bl	1a490 <lll_clock_ppm_local_get>
    1e7a:	4606      	mov	r6, r0
				   lll_clock_ppm_get(conn->slave.sca)) *
    1e7c:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
    1e80:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    1e84:	f018 fb06 	bl	1a494 <lll_clock_ppm_get>
				(((lll_clock_ppm_local_get() +
    1e88:	4406      	add	r6, r0
				   lll_clock_ppm_get(conn->slave.sca)) *
    1e8a:	fb05 f606 	mul.w	r6, r5, r6
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    1e8e:	4b44      	ldr	r3, [pc, #272]	; (1fa0 <event_conn_upd_prep+0x578>)
			lll->slave.window_widening_prepare_us +=
    1e90:	6ca2      	ldr	r2, [r4, #72]	; 0x48
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
    1e92:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    1e96:	f506 2674 	add.w	r6, r6, #999424	; 0xf4000
    1e9a:	f206 263f 	addw	r6, r6, #575	; 0x23f
    1e9e:	fba3 3606 	umull	r3, r6, r3, r6
    1ea2:	0cb6      	lsrs	r6, r6, #18
				lll->slave.window_widening_periodic_us *
    1ea4:	fb06 f00b 	mul.w	r0, r6, fp
				(conn_interval_us >> 1) - EVENT_IFS_US;
    1ea8:	086b      	lsrs	r3, r5, #1
			lll->slave.window_widening_prepare_us +=
    1eaa:	4402      	add	r2, r0
				(conn_interval_us >> 1) - EVENT_IFS_US;
    1eac:	3b96      	subs	r3, #150	; 0x96
			lll->slave.window_widening_prepare_us +=
    1eae:	429a      	cmp	r2, r3
    1eb0:	bf28      	it	cs
    1eb2:	461a      	movcs	r2, r3
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
    1eb4:	fb08 fc01 	mul.w	ip, r8, r1
			conn->slave.ticks_to_offset = 0U;
    1eb8:	f04f 0e00 	mov.w	lr, #0
			lll->slave.window_widening_max_us =
    1ebc:	e9c4 3211 	strd	r3, r2, [r4, #68]	; 0x44
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1ec0:	fba0 0107 	umull	r0, r1, r0, r7
    1ec4:	a32e      	add	r3, pc, #184	; (adr r3, 1f80 <event_conn_upd_prep+0x558>)
    1ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
			lll->slave.window_size_prepare_us =
    1eca:	f8c4 c050 	str.w	ip, [r4, #80]	; 0x50
			conn->slave.ticks_to_offset = 0U;
    1ece:	f8c4 e0e0 	str.w	lr, [r4, #224]	; 0xe0
			lll->slave.window_widening_periodic_us =
    1ed2:	6426      	str	r6, [r4, #64]	; 0x40
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1ed4:	f7fe fe32 	bl	b3c <__aeabi_uldivmod>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1ed8:	4b2f      	ldr	r3, [pc, #188]	; (1f98 <event_conn_upd_prep+0x570>)
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1eda:	4684      	mov	ip, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1edc:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
    1ee0:	fba3 3000 	umull	r3, r0, r3, r0
    1ee4:	0a80      	lsrs	r0, r0, #10
    1ee6:	fb08 f000 	mul.w	r0, r8, r0
    1eea:	fba0 0107 	umull	r0, r1, r0, r7
    1eee:	a324      	add	r3, pc, #144	; (adr r3, 1f80 <event_conn_upd_prep+0x558>)
    1ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1ef4:	eba9 090c 	sub.w	r9, r9, ip
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1ef8:	f7fe fe20 	bl	b3c <__aeabi_uldivmod>
			periodic_us -= lll->slave.window_widening_periodic_us;
    1efc:	eba5 0a06 	sub.w	sl, r5, r6
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1f00:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
			periodic_us -= lll->slave.window_widening_periodic_us;
    1f04:	e63d      	b.n	1b82 <event_conn_upd_prep+0x15a>
		if (!conn->tx_ctrl) {
    1f06:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
    1f0a:	b302      	cbz	r2, 1f4e <event_conn_upd_prep+0x526>
	tx->next = conn->tx_ctrl_last->next;
    1f0c:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    1f10:	681a      	ldr	r2, [r3, #0]
    1f12:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
    1f14:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
    1f16:	682b      	ldr	r3, [r5, #0]
    1f18:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
	if (!tx->next) {
    1f1c:	b90b      	cbnz	r3, 1f22 <event_conn_upd_prep+0x4fa>
		conn->tx_data_last = tx;
    1f1e:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
	return -EINPROGRESS;
    1f22:	f06f 0076 	mvn.w	r0, #118	; 0x76
}
    1f26:	b00b      	add	sp, #44	; 0x2c
    1f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
    1f2c:	2201      	movs	r2, #1
    1f2e:	4610      	mov	r0, r2
    1f30:	2102      	movs	r1, #2
    1f32:	f00c ffcd 	bl	eed0 <mayfly_enable>
    1f36:	e6c3      	b.n	1cc0 <event_conn_upd_prep+0x298>
			conn->procedure_expire = 0U;
    1f38:	2300      	movs	r3, #0
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    1f3a:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
			conn->procedure_expire = 0U;
    1f3e:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
    1f42:	e5aa      	b.n	1a9a <event_conn_upd_prep+0x72>
			return -ENOBUFS;
    1f44:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    1f48:	b00b      	add	sp, #44	; 0x2c
    1f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tx->next = conn->tx_head;
    1f4e:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
    1f50:	e9c4 5571 	strd	r5, r5, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    1f54:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
    1f58:	e7e0      	b.n	1f1c <event_conn_upd_prep+0x4f4>
			conn->tx_data = conn->tx_data->next;
    1f5a:	6819      	ldr	r1, [r3, #0]
    1f5c:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    1f60:	2a00      	cmp	r2, #0
    1f62:	d1d3      	bne.n	1f0c <event_conn_upd_prep+0x4e4>
			tx->next = conn->tx_head->next;
    1f64:	681a      	ldr	r2, [r3, #0]
    1f66:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
    1f68:	601d      	str	r5, [r3, #0]
				conn->tx_ctrl = tx;
    1f6a:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
    1f6c:	e9c4 5572 	strd	r5, r5, [r4, #456]	; 0x1c8
    1f70:	e7d4      	b.n	1f1c <event_conn_upd_prep+0x4f4>
	    ((pdu_data_tx->llctrl.opcode !=
    1f72:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    1f74:	2a03      	cmp	r2, #3
    1f76:	d0f5      	beq.n	1f64 <event_conn_upd_prep+0x53c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    1f78:	2a0a      	cmp	r2, #10
    1f7a:	f47f af71 	bne.w	1e60 <event_conn_upd_prep+0x438>
    1f7e:	e7f1      	b.n	1f64 <event_conn_upd_prep+0x53c>
    1f80:	1afd498d 	.word	0x1afd498d
    1f84:	00000007 	.word	0x00000007
    1f88:	0002b604 	.word	0x0002b604
    1f8c:	0002b6d0 	.word	0x0002b6d0
    1f90:	0002b0c4 	.word	0x0002b0c4
    1f94:	20001914 	.word	0x20001914
    1f98:	d1b71759 	.word	0xd1b71759
    1f9c:	3b9aca00 	.word	0x3b9aca00
    1fa0:	431bde83 	.word	0x431bde83
    1fa4:	00000000 	.word	0x00000000

00001fa8 <ull_slave_setup>:
static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *params);

void ull_slave_setup(memq_link_t *link, struct node_rx_hdr *rx,
		     struct node_rx_ftr *ftr, struct lll_conn *lll)
{
    1fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1fac:	460f      	mov	r7, r1
    1fae:	4616      	mov	r6, r2
    1fb0:	4681      	mov	r9, r0
	conn = lll->hdr.parent;

	/* Populate the slave context */
	pdu_adv = (void *)((struct node_rx_pdu *)rx)->pdu;

	peer_addr_type = pdu_adv->tx_addr;
    1fb2:	7f0a      	ldrb	r2, [r1, #28]
    1fb4:	f857 0f1e 	ldr.w	r0, [r7, #30]!
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);

#if defined(CONFIG_BT_CTLR_PRIVACY)
	uint8_t rl_idx = ftr->rl_idx;
    1fb8:	f896 a012 	ldrb.w	sl, [r6, #18]
    1fbc:	88bc      	ldrh	r4, [r7, #4]
	conn = lll->hdr.parent;
    1fbe:	f8d3 8000 	ldr.w	r8, [r3]
{
    1fc2:	b095      	sub	sp, #84	; 0x54
    1fc4:	460d      	mov	r5, r1
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    1fc6:	6831      	ldr	r1, [r6, #0]
    1fc8:	f8ad 404c 	strh.w	r4, [sp, #76]	; 0x4c
	peer_addr_type = pdu_adv->tx_addr;
    1fcc:	f3c2 1280 	ubfx	r2, r2, #6, #1

	if (rl_idx != FILTER_IDX_NONE) {
    1fd0:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    1fd4:	f8d1 b000 	ldr.w	fp, [r1]
	peer_addr_type = pdu_adv->tx_addr;
    1fd8:	9012      	str	r0, [sp, #72]	; 0x48
{
    1fda:	461c      	mov	r4, r3
	peer_addr_type = pdu_adv->tx_addr;
    1fdc:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
	if (rl_idx != FILTER_IDX_NONE) {
    1fe0:	d148      	bne.n	2074 <ull_slave_setup+0xcc>
		peer_addr_type += 2;
	} else {
#else /* CONFIG_BT_CTLR_PRIVACY */
	if (1) {
#endif /* CONFIG_BT_CTLR_PRIVACY */
		memcpy(peer_id_addr, peer_addr, BDADDR_SIZE);
    1fe2:	ab12      	add	r3, sp, #72	; 0x48
    1fe4:	e893 0003 	ldmia.w	r3, {r0, r1}
    1fe8:	9010      	str	r0, [sp, #64]	; 0x40
    1fea:	f8ad 1044 	strh.w	r1, [sp, #68]	; 0x44
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    1fee:	462a      	mov	r2, r5
    1ff0:	462b      	mov	r3, r5
    1ff2:	f832 1f2e 	ldrh.w	r1, [r2, #46]!
    1ff6:	7892      	ldrb	r2, [r2, #2]
    1ff8:	72a2      	strb	r2, [r4, #10]
    1ffa:	8121      	strh	r1, [r4, #8]
    1ffc:	f8d5 202a 	ldr.w	r2, [r5, #42]	; 0x2a
    2000:	6062      	str	r2, [r4, #4]
    2002:	f853 2f3a 	ldr.w	r2, [r3, #58]!
    2006:	61a2      	str	r2, [r4, #24]
	memcpy(conn->own_addr, own_addr, sizeof(conn->own_addr));
#endif /* CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN */

	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    2008:	f104 0018 	add.w	r0, r4, #24
    200c:	791b      	ldrb	r3, [r3, #4]
    200e:	7103      	strb	r3, [r0, #4]
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    2010:	2105      	movs	r1, #5
    2012:	f00d f887 	bl	f124 <util_ones_count_get>
			       sizeof(lll->data_chan_map));
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    2016:	f895 203f 	ldrb.w	r2, [r5, #63]	; 0x3f
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    201a:	7f63      	ldrb	r3, [r4, #29]
    201c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    2020:	f360 0305 	bfi	r3, r0, #0, #6
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    2024:	f3c2 0104 	ubfx	r1, r2, #0, #5
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    2028:	7763      	strb	r3, [r4, #29]
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    202a:	77a1      	strb	r1, [r4, #30]
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    202c:	8eaf      	ldrh	r7, [r5, #52]	; 0x34
    202e:	81e7      	strh	r7, [r4, #14]
	if ((lll->data_chan_count < 2) || (lll->data_chan_hop < 5) ||
    2030:	2801      	cmp	r0, #1
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    2032:	b2bf      	uxth	r7, r7
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    2034:	f002 031f 	and.w	r3, r2, #31
	if ((lll->data_chan_count < 2) || (lll->data_chan_hop < 5) ||
    2038:	d905      	bls.n	2046 <ull_slave_setup+0x9e>
    203a:	331b      	adds	r3, #27
    203c:	f003 031f 	and.w	r3, r3, #31
    2040:	2b0b      	cmp	r3, #11
    2042:	d800      	bhi.n	2046 <ull_slave_setup+0x9e>
	    (lll->data_chan_hop > 16) || !lll->interval) {
    2044:	bb17      	cbnz	r7, 208c <ull_slave_setup+0xe4>
		lll->slave.initiated = 0U;
    2046:	f894 3020 	ldrb.w	r3, [r4, #32]

		/* Mark for buffer for release */
		rx->type = NODE_RX_TYPE_RELEASE;
    204a:	2701      	movs	r7, #1
		lll->slave.initiated = 0U;
    204c:	f36f 0300 	bfc	r3, #0, #1
    2050:	f884 3020 	strb.w	r3, [r4, #32]
		rx->type = NODE_RX_TYPE_RELEASE;
    2054:	712f      	strb	r7, [r5, #4]
			struct node_rx_pdu *rx_csa;

			/* pick the rx node instance stored within the
			 * connection rx node.
			 */
			rx_csa = (void *)ftr->extra;
    2056:	6874      	ldr	r4, [r6, #4]

			/* Enqueue the connection event to be release */
			ll_rx_put(link, rx);
    2058:	4648      	mov	r0, r9
    205a:	4629      	mov	r1, r5
    205c:	f010 ff7e 	bl	12f5c <ll_rx_put>
			/* Mark for buffer for release */
			rx->type = NODE_RX_TYPE_RELEASE;
		}

		/* Enqueue connection or CSA event to be release */
		ll_rx_put(link, rx);
    2060:	6820      	ldr	r0, [r4, #0]
			rx->type = NODE_RX_TYPE_RELEASE;
    2062:	7127      	strb	r7, [r4, #4]
		ll_rx_put(link, rx);
    2064:	4621      	mov	r1, r4
    2066:	f010 ff79 	bl	12f5c <ll_rx_put>
		ll_rx_sched();
    206a:	f010 ff81 	bl	12f70 <ll_rx_sched>
	/* enable ticker job, irrespective of disabled in this function so
	 * first connection event can be scheduled as soon as possible.
	 */
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
#endif
}
    206e:	b015      	add	sp, #84	; 0x54
    2070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ll_rl_id_addr_get(rl_idx, &peer_addr_type, peer_id_addr);
    2074:	aa10      	add	r2, sp, #64	; 0x40
    2076:	f10d 013f 	add.w	r1, sp, #63	; 0x3f
    207a:	4650      	mov	r0, sl
    207c:	f016 ff38 	bl	18ef0 <ll_rl_id_addr_get>
		peer_addr_type += 2;
    2080:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
    2084:	3302      	adds	r3, #2
    2086:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
    208a:	e7b0      	b.n	1fee <ull_slave_setup+0x46>
	((struct lll_adv *)ftr->param)->conn = NULL;
    208c:	6833      	ldr	r3, [r6, #0]
	conn->slave.sca = pdu_adv->connect_ind.sca;
    208e:	f898 10d8 	ldrb.w	r1, [r8, #216]	; 0xd8
	((struct lll_adv *)ftr->param)->conn = NULL;
    2092:	2000      	movs	r0, #0
    2094:	6058      	str	r0, [r3, #4]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    2096:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
    209a:	f895 0037 	ldrb.w	r0, [r5, #55]	; 0x37
	conn->slave.sca = pdu_adv->connect_ind.sca;
    209e:	0952      	lsrs	r2, r2, #5
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    20a0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	conn->slave.sca = pdu_adv->connect_ind.sca;
    20a4:	f362 01c5 	bfi	r1, r2, #3, #3
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    20a8:	8223      	strh	r3, [r4, #16]
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    20aa:	f240 42e2 	movw	r2, #1250	; 0x4e2
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    20ae:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
	conn->slave.sca = pdu_adv->connect_ind.sca;
    20b0:	f888 10d8 	strb.w	r1, [r8, #216]	; 0xd8
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    20b4:	fb02 f707 	mul.w	r7, r2, r7
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    20b8:	930b      	str	r3, [sp, #44]	; 0x2c
		(((lll_clock_ppm_local_get() +
    20ba:	f018 f9e9 	bl	1a490 <lll_clock_ppm_local_get>
    20be:	4603      	mov	r3, r0
		   lll_clock_ppm_get(conn->slave.sca)) *
    20c0:	f898 00d8 	ldrb.w	r0, [r8, #216]	; 0xd8
		(((lll_clock_ppm_local_get() +
    20c4:	930a      	str	r3, [sp, #40]	; 0x28
		   lll_clock_ppm_get(conn->slave.sca)) *
    20c6:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    20ca:	f018 f9e3 	bl	1a494 <lll_clock_ppm_get>
		(((lll_clock_ppm_local_get() +
    20ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    20d0:	f8df e2d8 	ldr.w	lr, [pc, #728]	; 23ac <ull_slave_setup+0x404>
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size *
    20d4:	f895 c031 	ldrb.w	ip, [r5, #49]	; 0x31
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    20d8:	49ab      	ldr	r1, [pc, #684]	; (2388 <ull_slave_setup+0x3e0>)
		(((lll_clock_ppm_local_get() +
    20da:	4403      	add	r3, r0
		   lll_clock_ppm_get(conn->slave.sca)) *
    20dc:	fb07 f303 	mul.w	r3, r7, r3
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    20e0:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    20e4:	f203 233f 	addw	r3, r3, #575	; 0x23f
    20e8:	fbae 2303 	umull	r2, r3, lr, r3
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    20ec:	ea4f 0e57 	mov.w	lr, r7, lsr #1
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size *
    20f0:	f240 42e2 	movw	r2, #1250	; 0x4e2
    20f4:	fb02 f20c 	mul.w	r2, r2, ip
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    20f8:	0c9b      	lsrs	r3, r3, #18
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    20fa:	f1ae 0e96 	sub.w	lr, lr, #150	; 0x96
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size *
    20fe:	63a2      	str	r2, [r4, #56]	; 0x38
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    2100:	f8c4 e028 	str.w	lr, [r4, #40]	; 0x28
	lll->slave.window_widening_periodic_us =
    2104:	6263      	str	r3, [r4, #36]	; 0x24
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    2106:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2108:	8a20      	ldrh	r0, [r4, #16]
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    210a:	f8df c2a4 	ldr.w	ip, [pc, #676]	; 23b0 <ull_slave_setup+0x408>
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    210e:	f242 7210 	movw	r2, #10000	; 0x2710
    2112:	fb02 7203 	mla	r2, r2, r3, r7
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2116:	4439      	add	r1, r7
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2118:	f100 0e06 	add.w	lr, r0, #6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    211c:	3a01      	subs	r2, #1
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    211e:	fbb1 f1f7 	udiv	r1, r1, r7
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    2122:	fbb2 f2f7 	udiv	r2, r2, r7
    2126:	f8a8 20c2 	strh.w	r2, [r8, #194]	; 0xc2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    212a:	b28a      	uxth	r2, r1
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    212c:	4572      	cmp	r2, lr
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    212e:	44bc      	add	ip, r7
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2130:	f8a8 20ce 	strh.w	r2, [r8, #206]	; 0xce
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    2134:	fbbc fcf7 	udiv	ip, ip, r7
    2138:	f8a8 c0c6 	strh.w	ip, [r8, #198]	; 0xc6
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    213c:	dd02      	ble.n	2144 <ull_slave_setup+0x19c>
			     (conn->apto_reload - (lll->latency + 6)) :
    213e:	1a12      	subs	r2, r2, r0
    2140:	3a06      	subs	r2, #6
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2142:	b292      	uxth	r2, r2
    2144:	f8a8 20ca 	strh.w	r2, [r8, #202]	; 0xca
    2148:	6862      	ldr	r2, [r4, #4]
    214a:	f8c8 20dc 	str.w	r2, [r8, #220]	; 0xdc
		chan_sel = pdu_adv->chan_sel;
    214e:	7f2a      	ldrb	r2, [r5, #28]
    2150:	930c      	str	r3, [sp, #48]	; 0x30
	cc->status = 0U;
    2152:	f44f 7180 	mov.w	r1, #256	; 0x100
    2156:	83a9      	strh	r1, [r5, #28]
		chan_sel = pdu_adv->chan_sel;
    2158:	f3c2 1340 	ubfx	r3, r2, #5, #1
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    215c:	f89b 0026 	ldrb.w	r0, [fp, #38]	; 0x26
		chan_sel = pdu_adv->chan_sel;
    2160:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    2164:	930a      	str	r3, [sp, #40]	; 0x28
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    2166:	f017 fc03 	bl	19970 <ull_filter_lll_lrpa_used>
    216a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    216c:	f105 022b 	add.w	r2, r5, #43	; 0x2b
    2170:	2800      	cmp	r0, #0
    2172:	f000 80e0 	beq.w	2336 <ull_slave_setup+0x38e>
    2176:	4629      	mov	r1, r5
    2178:	f851 0f24 	ldr.w	r0, [r1, #36]!
    217c:	f8c5 002b 	str.w	r0, [r5, #43]	; 0x2b
    2180:	8889      	ldrh	r1, [r1, #4]
    2182:	8091      	strh	r1, [r2, #4]
	if (rl_idx != FILTER_IDX_NONE) {
    2184:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    2188:	f000 80d9 	beq.w	233e <ull_slave_setup+0x396>
    218c:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
    2190:	9812      	ldr	r0, [sp, #72]	; 0x48
    2192:	f8a5 2029 	strh.w	r2, [r5, #41]	; 0x29
    2196:	f8c5 0025 	str.w	r0, [r5, #37]	; 0x25
	cc->peer_addr_type = peer_addr_type;
    219a:	f89d 103f 	ldrb.w	r1, [sp, #63]	; 0x3f
    219e:	9810      	ldr	r0, [sp, #64]	; 0x40
    21a0:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
    21a4:	77a9      	strb	r1, [r5, #30]
    21a6:	f8c5 001f 	str.w	r0, [r5, #31]
    21aa:	f8a5 2023 	strh.w	r2, [r5, #35]	; 0x23
	cc->sca = conn->slave.sca;
    21ae:	f898 20d8 	ldrb.w	r2, [r8, #216]	; 0xd8
	cc->interval = lll->interval;
    21b2:	89e0      	ldrh	r0, [r4, #14]
	cc->latency = lll->latency;
    21b4:	8a21      	ldrh	r1, [r4, #16]
    21b6:	86a9      	strh	r1, [r5, #52]	; 0x34
	cc->sca = conn->slave.sca;
    21b8:	f3c2 02c2 	ubfx	r2, r2, #3, #3
	cc->timeout = timeout;
    21bc:	86eb      	strh	r3, [r5, #54]	; 0x36
	cc->interval = lll->interval;
    21be:	8668      	strh	r0, [r5, #50]	; 0x32
	cc->sca = conn->slave.sca;
    21c0:	f885 2038 	strb.w	r2, [r5, #56]	; 0x38
	lll->handle = ll_conn_handle_get(conn);
    21c4:	4640      	mov	r0, r8
    21c6:	f012 fb7d 	bl	148c4 <ll_conn_handle_get>
		ll_rx_put(link, rx);
    21ca:	4629      	mov	r1, r5
	lll->handle = ll_conn_handle_get(conn);
    21cc:	81a0      	strh	r0, [r4, #12]
	rx->handle = lll->handle;
    21ce:	80e8      	strh	r0, [r5, #6]
		rx_csa = (void *)ftr->extra;
    21d0:	6875      	ldr	r5, [r6, #4]
		ll_rx_put(link, rx);
    21d2:	4648      	mov	r0, r9
    21d4:	f010 fec2 	bl	12f5c <ll_rx_put>
		rx->handle = lll->handle;
    21d8:	89a3      	ldrh	r3, [r4, #12]
    21da:	80eb      	strh	r3, [r5, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    21dc:	2319      	movs	r3, #25
    21de:	712b      	strb	r3, [r5, #4]
		if (chan_sel) {
    21e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		link = rx->link;
    21e2:	f8d5 9000 	ldr.w	r9, [r5]
		if (chan_sel) {
    21e6:	2b00      	cmp	r3, #0
    21e8:	f040 80b7 	bne.w	235a <ull_slave_setup+0x3b2>
			cs->csa = 0x00;
    21ec:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    21f0:	772b      	strb	r3, [r5, #28]
	ll_rx_put(link, rx);
    21f2:	4629      	mov	r1, r5
    21f4:	4648      	mov	r0, r9
    21f6:	f010 feb1 	bl	12f5c <ll_rx_put>
	ll_rx_sched();
    21fa:	f010 feb9 	bl	12f70 <ll_rx_sched>
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    21fe:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
    2202:	2101      	movs	r1, #1
    2204:	f000 0007 	and.w	r0, r0, #7
    2208:	f017 ff72 	bl	1a0f0 <lll_radio_rx_ready_delay_get>
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    220c:	4a5f      	ldr	r2, [pc, #380]	; (238c <ull_slave_setup+0x3e4>)
	conn->evt.ticks_active_to_start = 0U;
    220e:	2500      	movs	r5, #0
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    2210:	4681      	mov	r9, r0
	conn->evt.ticks_xtal_to_start =
    2212:	2331      	movs	r3, #49	; 0x31
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2214:	f200 4052 	addw	r0, r0, #1106	; 0x452
    2218:	fba0 0102 	umull	r0, r1, r0, r2
	conn->evt.ticks_xtal_to_start =
    221c:	f8c8 3000 	str.w	r3, [r8]
	conn->evt.ticks_preempt_to_start =
    2220:	e9c8 5501 	strd	r5, r5, [r8, #4]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2224:	a356      	add	r3, pc, #344	; (adr r3, 2380 <ull_slave_setup+0x3d8>)
    2226:	e9d3 2300 	ldrd	r2, r3, [r3]
    222a:	f7fe fc87 	bl	b3c <__aeabi_uldivmod>
	conn_offset_us = ftr->radio_end_us;
    222e:	68f3      	ldr	r3, [r6, #12]
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    2230:	990b      	ldr	r1, [sp, #44]	; 0x2c
	conn_interval_us -= lll->slave.window_widening_periodic_us;
    2232:	6a64      	ldr	r4, [r4, #36]	; 0x24
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    2234:	f240 42e2 	movw	r2, #1250	; 0x4e2
    2238:	fb02 3301 	mla	r3, r2, r1, r3
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    223c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn_offset_us -= EVENT_JITTER_US;
    2240:	f203 3386 	addw	r3, r3, #902	; 0x386
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    2244:	462a      	mov	r2, r5
    2246:	2102      	movs	r1, #2
	conn->evt.ticks_slot =
    2248:	f8c8 000c 	str.w	r0, [r8, #12]
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    224c:	2001      	movs	r0, #1
	conn_offset_us -= ready_delay_us;
    224e:	eba3 0909 	sub.w	r9, r3, r9
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    2252:	f00c fe3d 	bl	eed0 <mayfly_enable>
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
    2256:	4658      	mov	r0, fp
    2258:	f011 fcfc 	bl	13c54 <ull_adv_handle_get>
    225c:	1c82      	adds	r2, r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    225e:	4b4c      	ldr	r3, [pc, #304]	; (2390 <ull_slave_setup+0x3e8>)
    2260:	f8cd b000 	str.w	fp, [sp]
    2264:	b2d2      	uxtb	r2, r2
    2266:	4628      	mov	r0, r5
    2268:	2101      	movs	r1, #1
    226a:	f00e f96b 	bl	10544 <ticker_stop>
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void ticker_op_stop_adv_cb(uint32_t status, void *param)
{
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    226e:	2801      	cmp	r0, #1
	conn_interval_us -= lll->slave.window_widening_periodic_us;
    2270:	eba7 0404 	sub.w	r4, r7, r4
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    2274:	d07c      	beq.n	2370 <ull_slave_setup+0x3c8>
	if (adv->lll.is_hdcd) {
    2276:	f89b 3024 	ldrb.w	r3, [fp, #36]	; 0x24
    227a:	07db      	lsls	r3, r3, #31
    227c:	d465      	bmi.n	234a <ull_slave_setup+0x3a2>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    227e:	4640      	mov	r0, r8
    2280:	f012 fb20 	bl	148c4 <ll_conn_handle_get>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    2284:	f8df b104 	ldr.w	fp, [pc, #260]	; 238c <ull_slave_setup+0x3e4>
    2288:	fba4 450b 	umull	r4, r5, r4, fp
    228c:	a33c      	add	r3, pc, #240	; (adr r3, 2380 <ull_slave_setup+0x3d8>)
    228e:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    2292:	4607      	mov	r7, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    2294:	4629      	mov	r1, r5
    2296:	4620      	mov	r0, r4
    2298:	f7fe fc50 	bl	b3c <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(conn_interval_us),
    229c:	4a3d      	ldr	r2, [pc, #244]	; (2394 <ull_slave_setup+0x3ec>)
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    229e:	f8cd 8018 	str.w	r8, [sp, #24]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    22a2:	f020 4a7f 	bic.w	sl, r0, #4278190080	; 0xff000000
    22a6:	fbaa 2302 	umull	r2, r3, sl, r2
    22aa:	2107      	movs	r1, #7
    22ac:	fb01 330a 	mla	r3, r1, sl, r3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    22b0:	f240 11a1 	movw	r1, #417	; 0x1a1
    22b4:	68b6      	ldr	r6, [r6, #8]
    22b6:	9108      	str	r1, [sp, #32]
    22b8:	4937      	ldr	r1, [pc, #220]	; (2398 <ull_slave_setup+0x3f0>)
    22ba:	9107      	str	r1, [sp, #28]
    22bc:	4937      	ldr	r1, [pc, #220]	; (239c <ull_slave_setup+0x3f4>)
    22be:	9105      	str	r1, [sp, #20]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    22c0:	1aa0      	subs	r0, r4, r2
    22c2:	eb65 0103 	sbc.w	r1, r5, r3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    22c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
    22ca:	9304      	str	r3, [sp, #16]
    22cc:	2400      	movs	r4, #0
				     HAL_TICKER_REMAINDER(conn_interval_us),
    22ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    22d2:	2300      	movs	r3, #0
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    22d4:	9403      	str	r4, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    22d6:	f7fe fc31 	bl	b3c <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    22da:	a329      	add	r3, pc, #164	; (adr r3, 2380 <ull_slave_setup+0x3d8>)
    22dc:	e9d3 2300 	ldrd	r2, r3, [r3]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    22e0:	4605      	mov	r5, r0
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    22e2:	fba9 010b 	umull	r0, r1, r9, fp
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    22e6:	e9cd a501 	strd	sl, r5, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    22ea:	f7fe fc27 	bl	b3c <__aeabi_uldivmod>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    22ee:	3703      	adds	r7, #3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    22f0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    22f4:	b2ff      	uxtb	r7, r7
    22f6:	3e31      	subs	r6, #49	; 0x31
    22f8:	4633      	mov	r3, r6
    22fa:	9000      	str	r0, [sp, #0]
    22fc:	463a      	mov	r2, r7
    22fe:	4620      	mov	r0, r4
    2300:	2101      	movs	r1, #1
    2302:	f00e f897 	bl	10434 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    2306:	f030 0302 	bics.w	r3, r0, #2
    230a:	d00c      	beq.n	2326 <ull_slave_setup+0x37e>
    230c:	4a24      	ldr	r2, [pc, #144]	; (23a0 <ull_slave_setup+0x3f8>)
    230e:	4925      	ldr	r1, [pc, #148]	; (23a4 <ull_slave_setup+0x3fc>)
    2310:	4825      	ldr	r0, [pc, #148]	; (23a8 <ull_slave_setup+0x400>)
    2312:	f44f 73d1 	mov.w	r3, #418	; 0x1a2
    2316:	f022 f965 	bl	245e4 <printk>
    231a:	4040      	eors	r0, r0
    231c:	f380 8811 	msr	BASEPRI, r0
    2320:	f04f 0003 	mov.w	r0, #3
    2324:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    2326:	2201      	movs	r2, #1
    2328:	4610      	mov	r0, r2
    232a:	2102      	movs	r1, #2
    232c:	f00c fdd0 	bl	eed0 <mayfly_enable>
}
    2330:	b015      	add	sp, #84	; 0x54
    2332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    2336:	f8c5 002b 	str.w	r0, [r5, #43]	; 0x2b
    233a:	8090      	strh	r0, [r2, #4]
    233c:	e722      	b.n	2184 <ull_slave_setup+0x1dc>
    233e:	2100      	movs	r1, #0
    2340:	f8c5 1025 	str.w	r1, [r5, #37]	; 0x25
    2344:	f8a5 1029 	strh.w	r1, [r5, #41]	; 0x29
    2348:	e727      	b.n	219a <ull_slave_setup+0x1f2>
		ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    234a:	2300      	movs	r3, #0
    234c:	2201      	movs	r2, #1
    234e:	9300      	str	r3, [sp, #0]
    2350:	4618      	mov	r0, r3
    2352:	4611      	mov	r1, r2
    2354:	f00e f8f6 	bl	10544 <ticker_stop>
    2358:	e791      	b.n	227e <ull_slave_setup+0x2d6>
			lll->data_chan_sel = 1;
    235a:	7f63      	ldrb	r3, [r4, #29]
    235c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2360:	7763      	strb	r3, [r4, #29]
			lll->data_chan_id = lll_chan_id(lll->access_addr);
    2362:	1d20      	adds	r0, r4, #4
    2364:	f016 fc4c 	bl	18c00 <lll_chan_id>
			cs->csa = 0x01;
    2368:	2301      	movs	r3, #1
			lll->data_chan_id = lll_chan_id(lll->access_addr);
    236a:	83e0      	strh	r0, [r4, #30]
			cs->csa = 0x01;
    236c:	772b      	strb	r3, [r5, #28]
    236e:	e740      	b.n	21f2 <ull_slave_setup+0x24a>
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    2370:	f010 feca 	bl	13108 <ull_disable_mark_get>
    2374:	4583      	cmp	fp, r0
    2376:	f43f af7e 	beq.w	2276 <ull_slave_setup+0x2ce>
    237a:	f016 fafb 	bl	18974 <ticker_op_stop_adv_cb.part.0>
    237e:	e77a      	b.n	2276 <ull_slave_setup+0x2ce>
    2380:	1afd498d 	.word	0x1afd498d
    2384:	00000007 	.word	0x00000007
    2388:	01c9c37f 	.word	0x01c9c37f
    238c:	3b9aca00 	.word	0x3b9aca00
    2390:	000189a1 	.word	0x000189a1
    2394:	1afd498d 	.word	0x1afd498d
    2398:	00018945 	.word	0x00018945
    239c:	000189bd 	.word	0x000189bd
    23a0:	0002b82c 	.word	0x0002b82c
    23a4:	0002b6e4 	.word	0x0002b6e4
    23a8:	0002b0c4 	.word	0x0002b0c4
    23ac:	431bde83 	.word	0x431bde83
    23b0:	026259ff 	.word	0x026259ff
    23b4:	00000000 	.word	0x00000000

000023b8 <SX1276SetChannel>:
    return SX1276.Settings.State;
}

void SX1276SetChannel( uint32_t freq )
{
    SX1276.Settings.Channel = freq;
    23b8:	4b11      	ldr	r3, [pc, #68]	; (2400 <SX1276SetChannel+0x48>)
{
    23ba:	b510      	push	{r4, lr}
    SX1276.Settings.Channel = freq;
    23bc:	f8c3 00e4 	str.w	r0, [r3, #228]	; 0xe4
    freq = ( uint32_t )( ( double )freq / ( double )FREQ_STEP );
    23c0:	f7fe f860 	bl	484 <__aeabi_ui2d>
    23c4:	a30c      	add	r3, pc, #48	; (adr r3, 23f8 <SX1276SetChannel+0x40>)
    23c6:	e9d3 2300 	ldrd	r2, r3, [r3]
    23ca:	f7fe f9ff 	bl	7cc <__aeabi_ddiv>
    23ce:	f7fe fb95 	bl	afc <__aeabi_d2uiz>
    23d2:	4604      	mov	r4, r0
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freq >> 16 ) & 0xFF ) );
    23d4:	f3c0 4107 	ubfx	r1, r0, #16, #8
    23d8:	2006      	movs	r0, #6
    23da:	f026 fe62 	bl	290a2 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freq >> 8 ) & 0xFF ) );
    23de:	f3c4 2107 	ubfx	r1, r4, #8, #8
    23e2:	2007      	movs	r0, #7
    23e4:	f026 fe5d 	bl	290a2 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( freq & 0xFF ) );
    23e8:	b2e1      	uxtb	r1, r4
    23ea:	2008      	movs	r0, #8
}
    23ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SX1276Write( REG_FRFLSB, ( uint8_t )( freq & 0xFF ) );
    23f0:	f026 be57 	b.w	290a2 <SX1276Write>
    23f4:	f3af 8000 	nop.w
    23f8:	00000000 	.word	0x00000000
    23fc:	404e8480 	.word	0x404e8480
    2400:	200021a4 	.word	0x200021a4
    2404:	00000000 	.word	0x00000000

00002408 <RxChainCalibration>:
 * Performs the Rx chain calibration for LF and HF bands
 * \remark Must be called just after the reset so all registers are at their
 *         default values
 */
static void RxChainCalibration( void )
{
    2408:	b570      	push	{r4, r5, r6, lr}
    uint8_t regPaConfigInitVal;
    uint32_t initialFreq;

    // Save context
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
    240a:	2009      	movs	r0, #9
    240c:	f026 fe54 	bl	290b8 <SX1276Read>
    2410:	4605      	mov	r5, r0
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
    2412:	2006      	movs	r0, #6
    2414:	f026 fe50 	bl	290b8 <SX1276Read>
    2418:	4606      	mov	r6, r0
                              ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
    241a:	2007      	movs	r0, #7
    241c:	f026 fe4c 	bl	290b8 <SX1276Read>
    2420:	0204      	lsls	r4, r0, #8
                              ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) * ( double )FREQ_STEP;
    2422:	2008      	movs	r0, #8
    2424:	f026 fe48 	bl	290b8 <SX1276Read>
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
    2428:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
    242c:	4320      	orrs	r0, r4
    242e:	f7fe f829 	bl	484 <__aeabi_ui2d>
                              ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) * ( double )FREQ_STEP;
    2432:	a31b      	add	r3, pc, #108	; (adr r3, 24a0 <RxChainCalibration+0x98>)
    2434:	e9d3 2300 	ldrd	r2, r3, [r3]
    2438:	f7fe f89e 	bl	578 <__aeabi_dmul>
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
    243c:	f7fe fb5e 	bl	afc <__aeabi_d2uiz>

    // Cut the PA just in case, RFO output, power = -1 dBm
    SX1276Write( REG_PACONFIG, 0x00 );
    2440:	2100      	movs	r1, #0
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
    2442:	4604      	mov	r4, r0
    SX1276Write( REG_PACONFIG, 0x00 );
    2444:	2009      	movs	r0, #9
    2446:	f026 fe2c 	bl	290a2 <SX1276Write>

    // Launch Rx chain calibration for LF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
    244a:	203b      	movs	r0, #59	; 0x3b
    244c:	f026 fe34 	bl	290b8 <SX1276Read>
    2450:	f040 0140 	orr.w	r1, r0, #64	; 0x40
    2454:	b2c9      	uxtb	r1, r1
    2456:	203b      	movs	r0, #59	; 0x3b
    2458:	f026 fe23 	bl	290a2 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
    245c:	203b      	movs	r0, #59	; 0x3b
    245e:	f026 fe2b 	bl	290b8 <SX1276Read>
    2462:	0682      	lsls	r2, r0, #26
    2464:	d4fa      	bmi.n	245c <RxChainCalibration+0x54>
    {
    }

    // Sets a Frequency in HF band
    SX1276SetChannel( 868000000 );
    2466:	4810      	ldr	r0, [pc, #64]	; (24a8 <RxChainCalibration+0xa0>)
    2468:	f7ff ffa6 	bl	23b8 <SX1276SetChannel>

    // Launch Rx chain calibration for HF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
    246c:	203b      	movs	r0, #59	; 0x3b
    246e:	f026 fe23 	bl	290b8 <SX1276Read>
    2472:	f040 0140 	orr.w	r1, r0, #64	; 0x40
    2476:	b2c9      	uxtb	r1, r1
    2478:	203b      	movs	r0, #59	; 0x3b
    247a:	f026 fe12 	bl	290a2 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
    247e:	203b      	movs	r0, #59	; 0x3b
    2480:	f026 fe1a 	bl	290b8 <SX1276Read>
    2484:	0683      	lsls	r3, r0, #26
    2486:	d4fa      	bmi.n	247e <RxChainCalibration+0x76>
    {
    }

    // Restore context
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
    2488:	4629      	mov	r1, r5
    248a:	2009      	movs	r0, #9
    248c:	f026 fe09 	bl	290a2 <SX1276Write>
    SX1276SetChannel( initialFreq );
    2490:	4620      	mov	r0, r4
}
    2492:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    SX1276SetChannel( initialFreq );
    2496:	f7ff bf8f 	b.w	23b8 <SX1276SetChannel>
    249a:	bf00      	nop
    249c:	f3af 8000 	nop.w
    24a0:	00000000 	.word	0x00000000
    24a4:	404e8480 	.word	0x404e8480
    24a8:	33bca100 	.word	0x33bca100
    24ac:	00000000 	.word	0x00000000

000024b0 <SX1276GetTimeOnAir>:
        break;
    }
}

uint32_t SX1276GetTimeOnAir( RadioModems_t modem, uint8_t pktLen )
{
    24b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    24b4:	4688      	mov	r8, r1
    uint32_t airTime = 0;

    switch( modem )
    24b6:	b120      	cbz	r0, 24c2 <SX1276GetTimeOnAir+0x12>
    24b8:	2801      	cmp	r0, #1
    24ba:	d055      	beq.n	2568 <SX1276GetTimeOnAir+0xb8>
    24bc:	2000      	movs	r0, #0
            airTime = floor( tOnAir * 1000 + 0.999 );
        }
        break;
    }
    return airTime;
}
    24be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
    24c2:	4c71      	ldr	r4, [pc, #452]	; (2688 <SX1276GetTimeOnAir+0x1d8>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
    24c4:	2027      	movs	r0, #39	; 0x27
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
    24c6:	f8b4 50fc 	ldrh.w	r5, [r4, #252]	; 0xfc
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
    24ca:	f026 fdf5 	bl	290b8 <SX1276Read>
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
    24ce:	3501      	adds	r5, #1
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
    24d0:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
    24d4:	4428      	add	r0, r5
    24d6:	f7fd ffe5 	bl	4a4 <__aeabi_i2d>
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
    24da:	f894 30fe 	ldrb.w	r3, [r4, #254]	; 0xfe
    24de:	2200      	movs	r2, #0
    24e0:	2b00      	cmp	r3, #0
    24e2:	d13c      	bne.n	255e <SX1276GetTimeOnAir+0xae>
    24e4:	4b69      	ldr	r3, [pc, #420]	; (268c <SX1276GetTimeOnAir+0x1dc>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
    24e6:	f7fd fe91 	bl	20c <__adddf3>
    24ea:	4606      	mov	r6, r0
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
    24ec:	2030      	movs	r0, #48	; 0x30
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
    24ee:	460f      	mov	r7, r1
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
    24f0:	f026 fde2 	bl	290b8 <SX1276Read>
    24f4:	f030 03f9 	bics.w	r3, r0, #249	; 0xf9
    24f8:	bf14      	ite	ne
    24fa:	4b64      	ldrne	r3, [pc, #400]	; (268c <SX1276GetTimeOnAir+0x1dc>)
    24fc:	2300      	moveq	r3, #0
    24fe:	2200      	movs	r2, #0
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
    2500:	4630      	mov	r0, r6
    2502:	4639      	mov	r1, r7
    2504:	f7fd fe82 	bl	20c <__adddf3>
    2508:	4606      	mov	r6, r0
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
    250a:	4640      	mov	r0, r8
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
    250c:	460f      	mov	r7, r1
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
    250e:	f7fd ffc9 	bl	4a4 <__aeabi_i2d>
    2512:	4602      	mov	r2, r0
    2514:	460b      	mov	r3, r1
    2516:	4630      	mov	r0, r6
    2518:	4639      	mov	r1, r7
    251a:	f7fd fe77 	bl	20c <__adddf3>
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
    251e:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
    2522:	2200      	movs	r2, #0
    2524:	b9eb      	cbnz	r3, 2562 <SX1276GetTimeOnAir+0xb2>
    2526:	2300      	movs	r3, #0
                                     pktLen +
    2528:	f7fd fe70 	bl	20c <__adddf3>
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
    252c:	4b58      	ldr	r3, [pc, #352]	; (2690 <SX1276GetTimeOnAir+0x1e0>)
    252e:	2200      	movs	r2, #0
    2530:	f7fe f822 	bl	578 <__aeabi_dmul>
    2534:	4606      	mov	r6, r0
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
    2536:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
    253a:	460f      	mov	r7, r1
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
    253c:	f7fd ffa2 	bl	484 <__aeabi_ui2d>
    2540:	4602      	mov	r2, r0
    2542:	460b      	mov	r3, r1
    2544:	4630      	mov	r0, r6
    2546:	4639      	mov	r1, r7
    2548:	f7fe f940 	bl	7cc <__aeabi_ddiv>
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
    254c:	4b51      	ldr	r3, [pc, #324]	; (2694 <SX1276GetTimeOnAir+0x1e4>)
    254e:	2200      	movs	r2, #0
    2550:	f7fe f812 	bl	578 <__aeabi_dmul>
    2554:	f021 ff4e 	bl	243f4 <round>
            airTime = floor( tOnAir * 1000 + 0.999 );
    2558:	f7fe fad0 	bl	afc <__aeabi_d2uiz>
    return airTime;
    255c:	e7af      	b.n	24be <SX1276GetTimeOnAir+0xe>
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
    255e:	2300      	movs	r3, #0
    2560:	e7c1      	b.n	24e6 <SX1276GetTimeOnAir+0x36>
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
    2562:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2566:	e7df      	b.n	2528 <SX1276GetTimeOnAir+0x78>
            switch( SX1276.Settings.LoRa.Bandwidth )
    2568:	4a47      	ldr	r2, [pc, #284]	; (2688 <SX1276GetTimeOnAir+0x1d8>)
    256a:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    256e:	3b07      	subs	r3, #7
    2570:	2b02      	cmp	r3, #2
    2572:	4692      	mov	sl, r2
    2574:	d87f      	bhi.n	2676 <SX1276GetTimeOnAir+0x1c6>
    2576:	4a48      	ldr	r2, [pc, #288]	; (2698 <SX1276GetTimeOnAir+0x1e8>)
    2578:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    257c:	e9d3 4500 	ldrd	r4, r5, [r3]
            double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
    2580:	f8da b124 	ldr.w	fp, [sl, #292]	; 0x124
    2584:	2001      	movs	r0, #1
    2586:	fa00 f00b 	lsl.w	r0, r0, fp
    258a:	f7fd ff8b 	bl	4a4 <__aeabi_i2d>
    258e:	4602      	mov	r2, r0
    2590:	460b      	mov	r3, r1
    2592:	4620      	mov	r0, r4
    2594:	4629      	mov	r1, r5
    2596:	f7fe f919 	bl	7cc <__aeabi_ddiv>
    259a:	4602      	mov	r2, r0
    259c:	460b      	mov	r3, r1
            double ts = 1 / rs;
    259e:	2000      	movs	r0, #0
    25a0:	493a      	ldr	r1, [pc, #232]	; (268c <SX1276GetTimeOnAir+0x1dc>)
    25a2:	f7fe f913 	bl	7cc <__aeabi_ddiv>
    25a6:	4604      	mov	r4, r0
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
    25a8:	f8ba 012a 	ldrh.w	r0, [sl, #298]	; 0x12a
            double ts = 1 / rs;
    25ac:	460d      	mov	r5, r1
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
    25ae:	f7fd ff79 	bl	4a4 <__aeabi_i2d>
    25b2:	4b3a      	ldr	r3, [pc, #232]	; (269c <SX1276GetTimeOnAir+0x1ec>)
    25b4:	2200      	movs	r2, #0
    25b6:	f7fd fe29 	bl	20c <__adddf3>
    25ba:	4622      	mov	r2, r4
    25bc:	462b      	mov	r3, r5
    25be:	f7fd ffdb 	bl	578 <__aeabi_dmul>
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
    25c2:	f89a 212c 	ldrb.w	r2, [sl, #300]	; 0x12c
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
    25c6:	f89a 312e 	ldrb.w	r3, [sl, #302]	; 0x12e
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
    25ca:	460f      	mov	r7, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
    25cc:	ea4f 018b 	mov.w	r1, fp, lsl #2
    25d0:	f1c1 011c 	rsb	r1, r1, #28
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
    25d4:	2a00      	cmp	r2, #0
    25d6:	eb01 1303 	add.w	r3, r1, r3, lsl #4
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
    25da:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
    25de:	4606      	mov	r6, r0
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
    25e0:	bf14      	ite	ne
    25e2:	2014      	movne	r0, #20
    25e4:	2000      	moveq	r0, #0
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
    25e6:	1a18      	subs	r0, r3, r0
    25e8:	f7fd ff4c 	bl	484 <__aeabi_ui2d>
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
    25ec:	f89a 3128 	ldrb.w	r3, [sl, #296]	; 0x128
    25f0:	2b00      	cmp	r3, #0
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
    25f2:	4680      	mov	r8, r0
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
    25f4:	bf14      	ite	ne
    25f6:	2002      	movne	r0, #2
    25f8:	2000      	moveq	r0, #0
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
    25fa:	ebab 0000 	sub.w	r0, fp, r0
    25fe:	0080      	lsls	r0, r0, #2
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
    2600:	4689      	mov	r9, r1
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
    2602:	f7fd ff3f 	bl	484 <__aeabi_ui2d>
    2606:	4602      	mov	r2, r0
    2608:	460b      	mov	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
    260a:	4640      	mov	r0, r8
    260c:	4649      	mov	r1, r9
    260e:	f7fe f8dd 	bl	7cc <__aeabi_ddiv>
    2612:	f000 fb61 	bl	2cd8 <ceil>
    2616:	4680      	mov	r8, r0
                                 ( SX1276.Settings.LoRa.Coderate + 4 );
    2618:	f89a 0129 	ldrb.w	r0, [sl, #297]	; 0x129
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
    261c:	4689      	mov	r9, r1
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
    261e:	3004      	adds	r0, #4
    2620:	f7fd ff40 	bl	4a4 <__aeabi_i2d>
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
    2624:	4642      	mov	r2, r8
    2626:	464b      	mov	r3, r9
    2628:	f7fd ffa6 	bl	578 <__aeabi_dmul>
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
    262c:	2200      	movs	r2, #0
    262e:	2300      	movs	r3, #0
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
    2630:	4680      	mov	r8, r0
    2632:	4689      	mov	r9, r1
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
    2634:	f7fe fa30 	bl	a98 <__aeabi_dcmpgt>
    2638:	b918      	cbnz	r0, 2642 <SX1276GetTimeOnAir+0x192>
    263a:	f04f 0800 	mov.w	r8, #0
    263e:	f04f 0900 	mov.w	r9, #0
    2642:	4b13      	ldr	r3, [pc, #76]	; (2690 <SX1276GetTimeOnAir+0x1e0>)
    2644:	2200      	movs	r2, #0
    2646:	4640      	mov	r0, r8
    2648:	4649      	mov	r1, r9
    264a:	f7fd fddf 	bl	20c <__adddf3>
            double tPayload = nPayload * ts;
    264e:	4622      	mov	r2, r4
    2650:	462b      	mov	r3, r5
    2652:	f7fd ff91 	bl	578 <__aeabi_dmul>
            double tOnAir = tPreamble + tPayload;
    2656:	4632      	mov	r2, r6
    2658:	463b      	mov	r3, r7
    265a:	f7fd fdd7 	bl	20c <__adddf3>
            airTime = floor( tOnAir * 1000 + 0.999 );
    265e:	4b0d      	ldr	r3, [pc, #52]	; (2694 <SX1276GetTimeOnAir+0x1e4>)
    2660:	2200      	movs	r2, #0
    2662:	f7fd ff89 	bl	578 <__aeabi_dmul>
    2666:	a306      	add	r3, pc, #24	; (adr r3, 2680 <SX1276GetTimeOnAir+0x1d0>)
    2668:	e9d3 2300 	ldrd	r2, r3, [r3]
    266c:	f7fd fdce 	bl	20c <__adddf3>
    2670:	f000 fc1a 	bl	2ea8 <floor>
    2674:	e770      	b.n	2558 <SX1276GetTimeOnAir+0xa8>
            switch( SX1276.Settings.LoRa.Bandwidth )
    2676:	2400      	movs	r4, #0
    2678:	2500      	movs	r5, #0
    267a:	e781      	b.n	2580 <SX1276GetTimeOnAir+0xd0>
    267c:	f3af 8000 	nop.w
    2680:	d916872b 	.word	0xd916872b
    2684:	3feff7ce 	.word	0x3feff7ce
    2688:	200021a4 	.word	0x200021a4
    268c:	3ff00000 	.word	0x3ff00000
    2690:	40200000 	.word	0x40200000
    2694:	408f4000 	.word	0x408f4000
    2698:	0002a988 	.word	0x0002a988
    269c:	40110000 	.word	0x40110000

000026a0 <SX1276SetRxConfig>:
{
    26a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    26a4:	b089      	sub	sp, #36	; 0x24
    26a6:	4699      	mov	r9, r3
    26a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    26aa:	9304      	str	r3, [sp, #16]
    26ac:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
    26b0:	9301      	str	r3, [sp, #4]
    26b2:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
    26b6:	9302      	str	r3, [sp, #8]
    26b8:	4683      	mov	fp, r0
    26ba:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
    26be:	9305      	str	r3, [sp, #20]
    26c0:	460c      	mov	r4, r1
    26c2:	4690      	mov	r8, r2
    26c4:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
    26c8:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
    26cc:	9206      	str	r2, [sp, #24]
    26ce:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
    26d2:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
    26d6:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
    26da:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
    26de:	9107      	str	r1, [sp, #28]
    SX1276SetModem( modem );
    26e0:	f01c fa26 	bl	1eb30 <SX1276SetModem>
    switch( modem )
    26e4:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    26e8:	f1bb 0f00 	cmp.w	fp, #0
    26ec:	d007      	beq.n	26fe <SX1276SetRxConfig+0x5e>
    26ee:	f1bb 0f01 	cmp.w	fp, #1
    26f2:	9907      	ldr	r1, [sp, #28]
    26f4:	f000 8089 	beq.w	280a <SX1276SetRxConfig+0x16a>
}
    26f8:	b009      	add	sp, #36	; 0x24
    26fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
    26fe:	f8df b29c 	ldr.w	fp, [pc, #668]	; 299c <SX1276SetRxConfig+0x2fc>
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
    2702:	9904      	ldr	r1, [sp, #16]
            SX1276.Settings.Fsk.Datarate = datarate;
    2704:	f8cb 80f8 	str.w	r8, [fp, #248]	; 0xf8
            SX1276.Settings.Fsk.IqInverted = iqInverted;
    2708:	f88b 2101 	strb.w	r2, [fp, #257]	; 0x101
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
    270c:	f88b 3102 	strb.w	r3, [fp, #258]	; 0x102
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
    2710:	4640      	mov	r0, r8
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
    2712:	f8cb 40f0 	str.w	r4, [fp, #240]	; 0xf0
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
    2716:	f8cb 10f4 	str.w	r1, [fp, #244]	; 0xf4
            SX1276.Settings.Fsk.FixLen = fixLen;
    271a:	f88b 50fe 	strb.w	r5, [fp, #254]	; 0xfe
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
    271e:	f88b 70ff 	strb.w	r7, [fp, #255]	; 0xff
            SX1276.Settings.Fsk.CrcOn = crcOn;
    2722:	f88b a100 	strb.w	sl, [fp, #256]	; 0x100
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
    2726:	f8ab 60fc 	strh.w	r6, [fp, #252]	; 0xfc
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
    272a:	f7fd feab 	bl	484 <__aeabi_ui2d>
    272e:	4680      	mov	r8, r0
    2730:	4602      	mov	r2, r0
    2732:	460b      	mov	r3, r1
    2734:	4689      	mov	r9, r1
    2736:	2000      	movs	r0, #0
    2738:	4995      	ldr	r1, [pc, #596]	; (2990 <SX1276SetRxConfig+0x2f0>)
    273a:	f7fe f847 	bl	7cc <__aeabi_ddiv>
    273e:	4b95      	ldr	r3, [pc, #596]	; (2994 <SX1276SetRxConfig+0x2f4>)
    2740:	2200      	movs	r2, #0
    2742:	f7fd ff19 	bl	578 <__aeabi_dmul>
    2746:	e9cd 0102 	strd	r0, r1, [sp, #8]
    274a:	9801      	ldr	r0, [sp, #4]
    274c:	f7fd feaa 	bl	4a4 <__aeabi_i2d>
    2750:	4602      	mov	r2, r0
    2752:	460b      	mov	r3, r1
    2754:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    2758:	f7fd ff0e 	bl	578 <__aeabi_dmul>
    275c:	4b8e      	ldr	r3, [pc, #568]	; (2998 <SX1276SetRxConfig+0x2f8>)
    275e:	2200      	movs	r2, #0
    2760:	f7fd ff0a 	bl	578 <__aeabi_dmul>
    2764:	f7fe f9ca 	bl	afc <__aeabi_d2uiz>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
    2768:	4642      	mov	r2, r8
    276a:	464b      	mov	r3, r9
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
    276c:	f8cb 0108 	str.w	r0, [fp, #264]	; 0x108
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
    2770:	a185      	add	r1, pc, #532	; (adr r1, 2988 <SX1276SetRxConfig+0x2e8>)
    2772:	e9d1 0100 	ldrd	r0, r1, [r1]
    2776:	f7fe f829 	bl	7cc <__aeabi_ddiv>
    277a:	f7fe f9bf 	bl	afc <__aeabi_d2uiz>
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
    277e:	f3c0 2107 	ubfx	r1, r0, #8, #8
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
    2782:	fa1f f880 	uxth.w	r8, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
    2786:	2002      	movs	r0, #2
    2788:	f026 fc8b 	bl	290a2 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
    278c:	fa5f f188 	uxtb.w	r1, r8
    2790:	2003      	movs	r0, #3
    2792:	f026 fc86 	bl	290a2 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
    2796:	4620      	mov	r0, r4
    2798:	f01b ffe0 	bl	1e75c <GetFskBandwidthRegValue>
    279c:	4601      	mov	r1, r0
    279e:	2012      	movs	r0, #18
    27a0:	f026 fc7f 	bl	290a2 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
    27a4:	9804      	ldr	r0, [sp, #16]
    27a6:	f01b ffd9 	bl	1e75c <GetFskBandwidthRegValue>
    27aa:	4601      	mov	r1, r0
    27ac:	2013      	movs	r0, #19
    27ae:	f026 fc78 	bl	290a2 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
    27b2:	0a31      	lsrs	r1, r6, #8
    27b4:	2025      	movs	r0, #37	; 0x25
    27b6:	f026 fc74 	bl	290a2 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
    27ba:	b2f1      	uxtb	r1, r6
    27bc:	2026      	movs	r0, #38	; 0x26
    27be:	f026 fc70 	bl	290a2 <SX1276Write>
            if( fixLen == 1 )
    27c2:	b305      	cbz	r5, 2806 <SX1276SetRxConfig+0x166>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
    27c4:	4639      	mov	r1, r7
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
    27c6:	2032      	movs	r0, #50	; 0x32
    27c8:	f026 fc6b 	bl	290a2 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
    27cc:	2030      	movs	r0, #48	; 0x30
    27ce:	f026 fc73 	bl	290b8 <SX1276Read>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
    27d2:	2d00      	cmp	r5, #0
                           RF_PACKETCONFIG1_CRC_MASK &
    27d4:	f000 016f 	and.w	r1, r0, #111	; 0x6f
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
    27d8:	ea41 110a 	orr.w	r1, r1, sl, lsl #4
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
    27dc:	bf14      	ite	ne
    27de:	2000      	movne	r0, #0
    27e0:	f06f 007f 	mvneq.w	r0, #127	; 0x7f
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
    27e4:	4301      	orrs	r1, r0
            SX1276Write( REG_PACKETCONFIG1,
    27e6:	b2c9      	uxtb	r1, r1
    27e8:	2030      	movs	r0, #48	; 0x30
    27ea:	f026 fc5a 	bl	290a2 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
    27ee:	2031      	movs	r0, #49	; 0x31
    27f0:	f026 fc62 	bl	290b8 <SX1276Read>
    27f4:	f040 0140 	orr.w	r1, r0, #64	; 0x40
    27f8:	b2c9      	uxtb	r1, r1
    27fa:	2031      	movs	r0, #49	; 0x31
}
    27fc:	b009      	add	sp, #36	; 0x24
    27fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    2802:	f026 bc4e 	b.w	290a2 <SX1276Write>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
    2806:	21ff      	movs	r1, #255	; 0xff
    2808:	e7dd      	b.n	27c6 <SX1276SetRxConfig+0x126>
            if( bandwidth > 2 )
    280a:	2c02      	cmp	r4, #2
    280c:	d900      	bls.n	2810 <SX1276SetRxConfig+0x170>
                while( 1 );
    280e:	e7fe      	b.n	280e <SX1276SetRxConfig+0x16e>
            bandwidth += 7;
    2810:	f104 0b07 	add.w	fp, r4, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
    2814:	4c61      	ldr	r4, [pc, #388]	; (299c <SX1276SetRxConfig+0x2fc>)
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
    2816:	f884 112f 	strb.w	r1, [r4, #303]	; 0x12f
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
    281a:	9902      	ldr	r1, [sp, #8]
    281c:	f884 1130 	strb.w	r1, [r4, #304]	; 0x130
    2820:	4641      	mov	r1, r8
    2822:	2906      	cmp	r1, #6
    2824:	bf38      	it	cc
    2826:	2106      	movcc	r1, #6
    2828:	290c      	cmp	r1, #12
            SX1276.Settings.LoRa.IqInverted = iqInverted;
    282a:	f884 2131 	strb.w	r2, [r4, #305]	; 0x131
    282e:	460a      	mov	r2, r1
    2830:	bf28      	it	cs
    2832:	220c      	movcs	r2, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    2834:	f1bb 0f07 	cmp.w	fp, #7
            SX1276.Settings.LoRa.Datarate = datarate;
    2838:	e9c4 b848 	strd	fp, r8, [r4, #288]	; 0x120
            SX1276.Settings.LoRa.Coderate = coderate;
    283c:	f884 9129 	strb.w	r9, [r4, #297]	; 0x129
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
    2840:	f8a4 612a 	strh.w	r6, [r4, #298]	; 0x12a
            SX1276.Settings.LoRa.FixLen = fixLen;
    2844:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
    2848:	f884 712d 	strb.w	r7, [r4, #301]	; 0x12d
            SX1276.Settings.LoRa.CrcOn = crcOn;
    284c:	f884 a12e 	strb.w	sl, [r4, #302]	; 0x12e
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
    2850:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    2854:	d178      	bne.n	2948 <SX1276SetRxConfig+0x2a8>
    2856:	f1a2 030b 	sub.w	r3, r2, #11
    285a:	2b01      	cmp	r3, #1
    285c:	bf8c      	ite	hi
    285e:	2300      	movhi	r3, #0
    2860:	2301      	movls	r3, #1
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
    2862:	201d      	movs	r0, #29
    2864:	9204      	str	r2, [sp, #16]
    2866:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    286a:	f026 fc25 	bl	290b8 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
    286e:	ea45 0149 	orr.w	r1, r5, r9, lsl #1
    2872:	ea41 110b 	orr.w	r1, r1, fp, lsl #4
            SX1276Write( REG_LR_MODEMCONFIG1,
    2876:	b2c9      	uxtb	r1, r1
    2878:	201d      	movs	r0, #29
    287a:	f026 fc12 	bl	290a2 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
    287e:	201e      	movs	r0, #30
    2880:	f026 fc1a 	bl	290b8 <SX1276Read>
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
    2884:	9b01      	ldr	r3, [sp, #4]
            SX1276Write( REG_LR_MODEMCONFIG2,
    2886:	9a04      	ldr	r2, [sp, #16]
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
    2888:	f3c3 2101 	ubfx	r1, r3, #8, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
    288c:	ea41 018a 	orr.w	r1, r1, sl, lsl #2
    2890:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
    2894:	f000 0008 	and.w	r0, r0, #8
            SX1276Write( REG_LR_MODEMCONFIG2,
    2898:	4301      	orrs	r1, r0
    289a:	b2c9      	uxtb	r1, r1
    289c:	201e      	movs	r0, #30
    289e:	f026 fc00 	bl	290a2 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
    28a2:	2026      	movs	r0, #38	; 0x26
    28a4:	f026 fc08 	bl	290b8 <SX1276Read>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
    28a8:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
    28ac:	f020 0108 	bic.w	r1, r0, #8
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
    28b0:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
            SX1276Write( REG_LR_MODEMCONFIG3,
    28b4:	b2c9      	uxtb	r1, r1
    28b6:	2026      	movs	r0, #38	; 0x26
    28b8:	f026 fbf3 	bl	290a2 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
    28bc:	f89d 1004 	ldrb.w	r1, [sp, #4]
    28c0:	201f      	movs	r0, #31
    28c2:	f026 fbee 	bl	290a2 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
    28c6:	0a31      	lsrs	r1, r6, #8
    28c8:	2020      	movs	r0, #32
    28ca:	f026 fbea 	bl	290a2 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
    28ce:	b2f1      	uxtb	r1, r6
    28d0:	2021      	movs	r0, #33	; 0x21
    28d2:	f026 fbe6 	bl	290a2 <SX1276Write>
            if( fixLen == 1 )
    28d6:	b11d      	cbz	r5, 28e0 <SX1276SetRxConfig+0x240>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
    28d8:	4639      	mov	r1, r7
    28da:	2022      	movs	r0, #34	; 0x22
    28dc:	f026 fbe1 	bl	290a2 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
    28e0:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
    28e4:	b16b      	cbz	r3, 2902 <SX1276SetRxConfig+0x262>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
    28e6:	2044      	movs	r0, #68	; 0x44
    28e8:	f026 fbe6 	bl	290b8 <SX1276Read>
    28ec:	f060 017f 	orn	r1, r0, #127	; 0x7f
    28f0:	b2c9      	uxtb	r1, r1
    28f2:	2044      	movs	r0, #68	; 0x44
    28f4:	f026 fbd5 	bl	290a2 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
    28f8:	f894 1130 	ldrb.w	r1, [r4, #304]	; 0x130
    28fc:	2024      	movs	r0, #36	; 0x24
    28fe:	f026 fbd0 	bl	290a2 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
    2902:	f1bb 0f09 	cmp.w	fp, #9
    2906:	d12e      	bne.n	2966 <SX1276SetRxConfig+0x2c6>
    2908:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
    290c:	4b24      	ldr	r3, [pc, #144]	; (29a0 <SX1276SetRxConfig+0x300>)
    290e:	429a      	cmp	r2, r3
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
    2910:	f04f 0102 	mov.w	r1, #2
    2914:	f04f 0036 	mov.w	r0, #54	; 0x36
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
    2918:	d921      	bls.n	295e <SX1276SetRxConfig+0x2be>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
    291a:	f026 fbc2 	bl	290a2 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
    291e:	2164      	movs	r1, #100	; 0x64
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
    2920:	203a      	movs	r0, #58	; 0x3a
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
    2922:	f026 fbbe 	bl	290a2 <SX1276Write>
            if( datarate == 6 )
    2926:	f1b8 0f06 	cmp.w	r8, #6
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    292a:	f04f 0031 	mov.w	r0, #49	; 0x31
            if( datarate == 6 )
    292e:	d81d      	bhi.n	296c <SX1276SetRxConfig+0x2cc>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    2930:	f026 fbc2 	bl	290b8 <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
    2934:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
                SX1276Write( REG_LR_DETECTOPTIMIZE,
    2938:	f041 0105 	orr.w	r1, r1, #5
    293c:	2031      	movs	r0, #49	; 0x31
    293e:	f026 fbb0 	bl	290a2 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    2942:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    2944:	2037      	movs	r0, #55	; 0x37
    2946:	e759      	b.n	27fc <SX1276SetRxConfig+0x15c>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    2948:	f1bb 0f08 	cmp.w	fp, #8
    294c:	d105      	bne.n	295a <SX1276SetRxConfig+0x2ba>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
    294e:	f1b8 0f0b 	cmp.w	r8, #11
    2952:	bf94      	ite	ls
    2954:	2300      	movls	r3, #0
    2956:	2301      	movhi	r3, #1
    2958:	e783      	b.n	2862 <SX1276SetRxConfig+0x1c2>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
    295a:	2300      	movs	r3, #0
    295c:	e781      	b.n	2862 <SX1276SetRxConfig+0x1c2>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
    295e:	f026 fba0 	bl	290a2 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
    2962:	217f      	movs	r1, #127	; 0x7f
    2964:	e7dc      	b.n	2920 <SX1276SetRxConfig+0x280>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
    2966:	2103      	movs	r1, #3
    2968:	2036      	movs	r0, #54	; 0x36
    296a:	e7da      	b.n	2922 <SX1276SetRxConfig+0x282>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    296c:	f026 fba4 	bl	290b8 <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
    2970:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
                SX1276Write( REG_LR_DETECTOPTIMIZE,
    2974:	f041 0103 	orr.w	r1, r1, #3
    2978:	2031      	movs	r0, #49	; 0x31
    297a:	f026 fb92 	bl	290a2 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    297e:	210a      	movs	r1, #10
    2980:	e7e0      	b.n	2944 <SX1276SetRxConfig+0x2a4>
    2982:	bf00      	nop
    2984:	f3af 8000 	nop.w
    2988:	00000000 	.word	0x00000000
    298c:	417e8480 	.word	0x417e8480
    2990:	3ff00000 	.word	0x3ff00000
    2994:	40200000 	.word	0x40200000
    2998:	408f4000 	.word	0x408f4000
    299c:	200021a4 	.word	0x200021a4
    29a0:	1f4add40 	.word	0x1f4add40
    29a4:	00000000 	.word	0x00000000

000029a8 <SX1276SetTxConfig>:
{
    29a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    29ac:	b087      	sub	sp, #28
    29ae:	461d      	mov	r5, r3
    29b0:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    29b4:	9302      	str	r3, [sp, #8]
    29b6:	4689      	mov	r9, r1
    29b8:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    29bc:	9918      	ldr	r1, [sp, #96]	; 0x60
    29be:	9304      	str	r3, [sp, #16]
    29c0:	4692      	mov	sl, r2
    29c2:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
    29c6:	9205      	str	r2, [sp, #20]
    29c8:	9103      	str	r1, [sp, #12]
    29ca:	9001      	str	r0, [sp, #4]
    29cc:	9f10      	ldr	r7, [sp, #64]	; 0x40
    29ce:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
    29d2:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
    29d6:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
    29da:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
    SX1276SetModem( modem );
    29de:	f01c f8a7 	bl	1eb30 <SX1276SetModem>
    SX1276SetRfTxPower( power );
    29e2:	4648      	mov	r0, r9
    29e4:	f01b fe3a 	bl	1e65c <SX1276SetRfTxPower>
    switch( modem )
    29e8:	9a01      	ldr	r2, [sp, #4]
    29ea:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
    29ee:	b12a      	cbz	r2, 29fc <SX1276SetTxConfig+0x54>
    29f0:	2a01      	cmp	r2, #1
    29f2:	9a05      	ldr	r2, [sp, #20]
    29f4:	d064      	beq.n	2ac0 <SX1276SetTxConfig+0x118>
}
    29f6:	b007      	add	sp, #28
    29f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Power = power;
    29fc:	4a7e      	ldr	r2, [pc, #504]	; (2bf8 <SX1276SetTxConfig+0x250>)
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
    29fe:	4650      	mov	r0, sl
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
    2a00:	e9c2 a53b 	strd	sl, r5, [r2, #236]	; 0xec
            SX1276.Settings.Fsk.CrcOn = crcOn;
    2a04:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
            SX1276.Settings.Fsk.Power = power;
    2a08:	f882 90e8 	strb.w	r9, [r2, #232]	; 0xe8
            SX1276.Settings.Fsk.Datarate = datarate;
    2a0c:	f8c2 70f8 	str.w	r7, [r2, #248]	; 0xf8
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
    2a10:	f8a2 80fc 	strh.w	r8, [r2, #252]	; 0xfc
            SX1276.Settings.Fsk.FixLen = fixLen;
    2a14:	f882 60fe 	strb.w	r6, [r2, #254]	; 0xfe
            SX1276.Settings.Fsk.IqInverted = iqInverted;
    2a18:	f882 3101 	strb.w	r3, [r2, #257]	; 0x101
            SX1276.Settings.Fsk.TxTimeout = timeout;
    2a1c:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
    2a20:	f7fd fd30 	bl	484 <__aeabi_ui2d>
    2a24:	a370      	add	r3, pc, #448	; (adr r3, 2be8 <SX1276SetTxConfig+0x240>)
    2a26:	e9d3 2300 	ldrd	r2, r3, [r3]
    2a2a:	f7fd fecf 	bl	7cc <__aeabi_ddiv>
    2a2e:	f7fe f865 	bl	afc <__aeabi_d2uiz>
    2a32:	b285      	uxth	r5, r0
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
    2a34:	f3c0 2107 	ubfx	r1, r0, #8, #8
    2a38:	2004      	movs	r0, #4
    2a3a:	f026 fb32 	bl	290a2 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
    2a3e:	b2e9      	uxtb	r1, r5
    2a40:	2005      	movs	r0, #5
    2a42:	f026 fb2e 	bl	290a2 <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
    2a46:	4638      	mov	r0, r7
    2a48:	f7fd fd1c 	bl	484 <__aeabi_ui2d>
    2a4c:	4602      	mov	r2, r0
    2a4e:	460b      	mov	r3, r1
    2a50:	a167      	add	r1, pc, #412	; (adr r1, 2bf0 <SX1276SetTxConfig+0x248>)
    2a52:	e9d1 0100 	ldrd	r0, r1, [r1]
    2a56:	f7fd feb9 	bl	7cc <__aeabi_ddiv>
    2a5a:	f7fe f84f 	bl	afc <__aeabi_d2uiz>
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
    2a5e:	f3c0 2107 	ubfx	r1, r0, #8, #8
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
    2a62:	b285      	uxth	r5, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
    2a64:	2002      	movs	r0, #2
    2a66:	f026 fb1c 	bl	290a2 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
    2a6a:	b2e9      	uxtb	r1, r5
    2a6c:	2003      	movs	r0, #3
    2a6e:	f026 fb18 	bl	290a2 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
    2a72:	ea4f 2118 	mov.w	r1, r8, lsr #8
    2a76:	2025      	movs	r0, #37	; 0x25
    2a78:	f026 fb13 	bl	290a2 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
    2a7c:	fa5f f188 	uxtb.w	r1, r8
    2a80:	2026      	movs	r0, #38	; 0x26
    2a82:	f026 fb0e 	bl	290a2 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
    2a86:	2030      	movs	r0, #48	; 0x30
    2a88:	f026 fb16 	bl	290b8 <SX1276Read>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
    2a8c:	2e00      	cmp	r6, #0
                           RF_PACKETCONFIG1_CRC_MASK &
    2a8e:	f000 006f 	and.w	r0, r0, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
    2a92:	bf14      	ite	ne
    2a94:	2100      	movne	r1, #0
    2a96:	f06f 017f 	mvneq.w	r1, #127	; 0x7f
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
    2a9a:	ea40 1404 	orr.w	r4, r0, r4, lsl #4
    2a9e:	4321      	orrs	r1, r4
            SX1276Write( REG_PACKETCONFIG1,
    2aa0:	b2c9      	uxtb	r1, r1
    2aa2:	2030      	movs	r0, #48	; 0x30
    2aa4:	f026 fafd 	bl	290a2 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
    2aa8:	2031      	movs	r0, #49	; 0x31
    2aaa:	f026 fb05 	bl	290b8 <SX1276Read>
    2aae:	f040 0140 	orr.w	r1, r0, #64	; 0x40
    2ab2:	b2c9      	uxtb	r1, r1
    2ab4:	2031      	movs	r0, #49	; 0x31
}
    2ab6:	b007      	add	sp, #28
    2ab8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    2abc:	f026 baf1 	b.w	290a2 <SX1276Write>
            SX1276.Settings.LoRa.Power = power;
    2ac0:	484d      	ldr	r0, [pc, #308]	; (2bf8 <SX1276SetTxConfig+0x250>)
            if( bandwidth > 2 )
    2ac2:	2d02      	cmp	r5, #2
            SX1276.Settings.LoRa.Power = power;
    2ac4:	f880 911c 	strb.w	r9, [r0, #284]	; 0x11c
            if( bandwidth > 2 )
    2ac8:	4681      	mov	r9, r0
    2aca:	d900      	bls.n	2ace <SX1276SetTxConfig+0x126>
                while( 1 );
    2acc:	e7fe      	b.n	2acc <SX1276SetTxConfig+0x124>
            bandwidth += 7;
    2ace:	2f06      	cmp	r7, #6
    2ad0:	46ba      	mov	sl, r7
    2ad2:	bf38      	it	cc
    2ad4:	f04f 0a06 	movcc.w	sl, #6
    2ad8:	3507      	adds	r5, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
    2ada:	f1ba 0f0c 	cmp.w	sl, #12
            SX1276.Settings.LoRa.Datarate = datarate;
    2ade:	e9c0 5748 	strd	r5, r7, [r0, #288]	; 0x120
            SX1276.Settings.LoRa.Coderate = coderate;
    2ae2:	f880 b129 	strb.w	fp, [r0, #297]	; 0x129
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
    2ae6:	f8a0 812a 	strh.w	r8, [r0, #298]	; 0x12a
            SX1276.Settings.LoRa.FixLen = fixLen;
    2aea:	f880 612c 	strb.w	r6, [r0, #300]	; 0x12c
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
    2aee:	f880 212f 	strb.w	r2, [r0, #303]	; 0x12f
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
    2af2:	bf28      	it	cs
    2af4:	f04f 0a0c 	movcs.w	sl, #12
    2af8:	9802      	ldr	r0, [sp, #8]
    2afa:	f889 0130 	strb.w	r0, [r9, #304]	; 0x130
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    2afe:	2d07      	cmp	r5, #7
            SX1276.Settings.LoRa.CrcOn = crcOn;
    2b00:	f889 412e 	strb.w	r4, [r9, #302]	; 0x12e
            SX1276.Settings.LoRa.IqInverted = iqInverted;
    2b04:	f889 3131 	strb.w	r3, [r9, #305]	; 0x131
            SX1276.Settings.LoRa.TxTimeout = timeout;
    2b08:	f8c9 1134 	str.w	r1, [r9, #308]	; 0x134
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    2b0c:	d157      	bne.n	2bbe <SX1276SetTxConfig+0x216>
    2b0e:	f1aa 030b 	sub.w	r3, sl, #11
    2b12:	2b01      	cmp	r3, #1
    2b14:	bf8c      	ite	hi
    2b16:	2300      	movhi	r3, #0
    2b18:	2301      	movls	r3, #1
    2b1a:	f889 3128 	strb.w	r3, [r9, #296]	; 0x128
            if( SX1276.Settings.LoRa.FreqHopOn == true )
    2b1e:	b16a      	cbz	r2, 2b3c <SX1276SetTxConfig+0x194>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
    2b20:	2044      	movs	r0, #68	; 0x44
    2b22:	f026 fac9 	bl	290b8 <SX1276Read>
    2b26:	f060 017f 	orn	r1, r0, #127	; 0x7f
    2b2a:	b2c9      	uxtb	r1, r1
    2b2c:	2044      	movs	r0, #68	; 0x44
    2b2e:	f026 fab8 	bl	290a2 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
    2b32:	f899 1130 	ldrb.w	r1, [r9, #304]	; 0x130
    2b36:	2024      	movs	r0, #36	; 0x24
    2b38:	f026 fab3 	bl	290a2 <SX1276Write>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
    2b3c:	ea46 064b 	orr.w	r6, r6, fp, lsl #1
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
    2b40:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
    2b42:	ea46 1505 	orr.w	r5, r6, r5, lsl #4
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
    2b46:	f026 fab7 	bl	290b8 <SX1276Read>
            SX1276Write( REG_LR_MODEMCONFIG1,
    2b4a:	b2e9      	uxtb	r1, r5
    2b4c:	201d      	movs	r0, #29
    2b4e:	f026 faa8 	bl	290a2 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
    2b52:	201e      	movs	r0, #30
    2b54:	f026 fab0 	bl	290b8 <SX1276Read>
                           ( datarate << 4 ) | ( crcOn << 2 ) );
    2b58:	00a4      	lsls	r4, r4, #2
                           RFLR_MODEMCONFIG2_SF_MASK &
    2b5a:	f000 000b 	and.w	r0, r0, #11
            SX1276Write( REG_LR_MODEMCONFIG2,
    2b5e:	ea44 1a0a 	orr.w	sl, r4, sl, lsl #4
    2b62:	ea4a 0a00 	orr.w	sl, sl, r0
    2b66:	fa5f f18a 	uxtb.w	r1, sl
    2b6a:	201e      	movs	r0, #30
    2b6c:	f026 fa99 	bl	290a2 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
    2b70:	2026      	movs	r0, #38	; 0x26
    2b72:	f026 faa1 	bl	290b8 <SX1276Read>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
    2b76:	f899 3128 	ldrb.w	r3, [r9, #296]	; 0x128
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
    2b7a:	f020 0108 	bic.w	r1, r0, #8
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
    2b7e:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
            SX1276Write( REG_LR_MODEMCONFIG3,
    2b82:	b2c9      	uxtb	r1, r1
    2b84:	2026      	movs	r0, #38	; 0x26
    2b86:	f026 fa8c 	bl	290a2 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
    2b8a:	ea4f 2118 	mov.w	r1, r8, lsr #8
    2b8e:	2020      	movs	r0, #32
    2b90:	f026 fa87 	bl	290a2 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
    2b94:	2021      	movs	r0, #33	; 0x21
    2b96:	fa5f f188 	uxtb.w	r1, r8
    2b9a:	f026 fa82 	bl	290a2 <SX1276Write>
            if( datarate == 6 )
    2b9e:	2f06      	cmp	r7, #6
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    2ba0:	f04f 0031 	mov.w	r0, #49	; 0x31
            if( datarate == 6 )
    2ba4:	d814      	bhi.n	2bd0 <SX1276SetTxConfig+0x228>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    2ba6:	f026 fa87 	bl	290b8 <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
    2baa:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
                SX1276Write( REG_LR_DETECTOPTIMIZE,
    2bae:	f041 0105 	orr.w	r1, r1, #5
    2bb2:	2031      	movs	r0, #49	; 0x31
    2bb4:	f026 fa75 	bl	290a2 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    2bb8:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    2bba:	2037      	movs	r0, #55	; 0x37
    2bbc:	e77b      	b.n	2ab6 <SX1276SetTxConfig+0x10e>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    2bbe:	2d08      	cmp	r5, #8
    2bc0:	d104      	bne.n	2bcc <SX1276SetTxConfig+0x224>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
    2bc2:	2f0b      	cmp	r7, #11
    2bc4:	bf94      	ite	ls
    2bc6:	2300      	movls	r3, #0
    2bc8:	2301      	movhi	r3, #1
    2bca:	e7a6      	b.n	2b1a <SX1276SetTxConfig+0x172>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
    2bcc:	2300      	movs	r3, #0
    2bce:	e7a4      	b.n	2b1a <SX1276SetTxConfig+0x172>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    2bd0:	f026 fa72 	bl	290b8 <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
    2bd4:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
                SX1276Write( REG_LR_DETECTOPTIMIZE,
    2bd8:	f041 0103 	orr.w	r1, r1, #3
    2bdc:	2031      	movs	r0, #49	; 0x31
    2bde:	f026 fa60 	bl	290a2 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    2be2:	210a      	movs	r1, #10
    2be4:	e7e9      	b.n	2bba <SX1276SetTxConfig+0x212>
    2be6:	bf00      	nop
    2be8:	00000000 	.word	0x00000000
    2bec:	404e8480 	.word	0x404e8480
    2bf0:	00000000 	.word	0x00000000
    2bf4:	417e8480 	.word	0x417e8480
    2bf8:	200021a4 	.word	0x200021a4
    2bfc:	00000000 	.word	0x00000000

00002c00 <SX1276OnDio2Irq>:
            break;
    }
}

void SX1276OnDio2Irq( void* context )
{
    2c00:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
    2c02:	4b31      	ldr	r3, [pc, #196]	; (2cc8 <SX1276OnDio2Irq+0xc8>)
    2c04:	f893 10e0 	ldrb.w	r1, [r3, #224]	; 0xe0
    2c08:	2901      	cmp	r1, #1
    2c0a:	461c      	mov	r4, r3
    2c0c:	d002      	beq.n	2c14 <SX1276OnDio2Irq+0x14>
    2c0e:	2902      	cmp	r1, #2
    2c10:	d04c      	beq.n	2cac <SX1276OnDio2Irq+0xac>
            }
            break;
        default:
            break;
    }
}
    2c12:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
    2c14:	f893 20e1 	ldrb.w	r2, [r3, #225]	; 0xe1
    2c18:	b1ca      	cbz	r2, 2c4e <SX1276OnDio2Irq+0x4e>
    2c1a:	2a01      	cmp	r2, #1
    2c1c:	d1f9      	bne.n	2c12 <SX1276OnDio2Irq+0x12>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
    2c1e:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
    2c22:	2b00      	cmp	r3, #0
    2c24:	d0f5      	beq.n	2c12 <SX1276OnDio2Irq+0x12>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
    2c26:	2102      	movs	r1, #2
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
    2c28:	2012      	movs	r0, #18
    2c2a:	f026 fa3a 	bl	290a2 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
    2c2e:	4b27      	ldr	r3, [pc, #156]	; (2ccc <SX1276OnDio2Irq+0xcc>)
    2c30:	681b      	ldr	r3, [r3, #0]
    2c32:	2b00      	cmp	r3, #0
    2c34:	d0ed      	beq.n	2c12 <SX1276OnDio2Irq+0x12>
    2c36:	695c      	ldr	r4, [r3, #20]
    2c38:	2c00      	cmp	r4, #0
    2c3a:	d0ea      	beq.n	2c12 <SX1276OnDio2Irq+0x12>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
    2c3c:	201c      	movs	r0, #28
    2c3e:	f026 fa3b 	bl	290b8 <SX1276Read>
    2c42:	4623      	mov	r3, r4
    2c44:	f000 003f 	and.w	r0, r0, #63	; 0x3f
}
    2c48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
    2c4c:	4718      	bx	r3
                if( SX1276.DIO4.port == NULL )
    2c4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2c50:	b90b      	cbnz	r3, 2c56 <SX1276OnDio2Irq+0x56>
                    SX1276.Settings.FskPacketHandler.PreambleDetected = true;
    2c52:	f884 110c 	strb.w	r1, [r4, #268]	; 0x10c
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == false ) )
    2c56:	f8b4 510c 	ldrh.w	r5, [r4, #268]	; 0x10c
    2c5a:	2d01      	cmp	r5, #1
    2c5c:	d1d9      	bne.n	2c12 <SX1276OnDio2Irq+0x12>
                    TimerStop( &RxTimeoutSyncWord );
    2c5e:	481c      	ldr	r0, [pc, #112]	; (2cd0 <SX1276OnDio2Irq+0xd0>)
    2c60:	f01c fb96 	bl	1f390 <TimerStop>
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
    2c64:	2011      	movs	r0, #17
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
    2c66:	f884 510d 	strb.w	r5, [r4, #269]	; 0x10d
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
    2c6a:	f026 fa25 	bl	290b8 <SX1276Read>
    2c6e:	0840      	lsrs	r0, r0, #1
    2c70:	4240      	negs	r0, r0
    2c72:	f884 010e 	strb.w	r0, [r4, #270]	; 0x10e
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )( double )( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
    2c76:	201b      	movs	r0, #27
    2c78:	f026 fa1e 	bl	290b8 <SX1276Read>
    2c7c:	4605      	mov	r5, r0
                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) ) *
    2c7e:	201c      	movs	r0, #28
    2c80:	f026 fa1a 	bl	290b8 <SX1276Read>
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )( double )( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
    2c84:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
    2c88:	f7fd fc0c 	bl	4a4 <__aeabi_i2d>
                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) ) *
    2c8c:	a30c      	add	r3, pc, #48	; (adr r3, 2cc0 <SX1276OnDio2Irq+0xc0>)
    2c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
    2c92:	f7fd fc71 	bl	578 <__aeabi_dmul>
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )( double )( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
    2c96:	f7fd ff09 	bl	aac <__aeabi_d2iz>
    2c9a:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
    2c9e:	200c      	movs	r0, #12
    2ca0:	f026 fa0a 	bl	290b8 <SX1276Read>
    2ca4:	0940      	lsrs	r0, r0, #5
    2ca6:	f884 0114 	strb.w	r0, [r4, #276]	; 0x114
    2caa:	e7b2      	b.n	2c12 <SX1276OnDio2Irq+0x12>
            switch( SX1276.Settings.Modem )
    2cac:	f893 20e1 	ldrb.w	r2, [r3, #225]	; 0xe1
    2cb0:	2a01      	cmp	r2, #1
    2cb2:	d1ae      	bne.n	2c12 <SX1276OnDio2Irq+0x12>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
    2cb4:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
    2cb8:	2b00      	cmp	r3, #0
    2cba:	d0aa      	beq.n	2c12 <SX1276OnDio2Irq+0x12>
    2cbc:	e7b4      	b.n	2c28 <SX1276OnDio2Irq+0x28>
    2cbe:	bf00      	nop
    2cc0:	00000000 	.word	0x00000000
    2cc4:	404e8480 	.word	0x404e8480
    2cc8:	200021a4 	.word	0x200021a4
    2ccc:	20002170 	.word	0x20002170
    2cd0:	20002174 	.word	0x20002174
    2cd4:	00000000 	.word	0x00000000

00002cd8 <ceil>:
    2cd8:	b580      	push	{r7, lr}
    2cda:	b08c      	sub	sp, #48	; 0x30
    2cdc:	af00      	add	r7, sp, #0
    2cde:	e9c7 0100 	strd	r0, r1, [r7]
    2ce2:	e9d7 2300 	ldrd	r2, r3, [r7]
    2ce6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    2cea:	697b      	ldr	r3, [r7, #20]
    2cec:	62fb      	str	r3, [r7, #44]	; 0x2c
    2cee:	693b      	ldr	r3, [r7, #16]
    2cf0:	62bb      	str	r3, [r7, #40]	; 0x28
    2cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2cf4:	151b      	asrs	r3, r3, #20
    2cf6:	f3c3 030a 	ubfx	r3, r3, #0, #11
    2cfa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
    2cfe:	627b      	str	r3, [r7, #36]	; 0x24
    2d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2d02:	2b13      	cmp	r3, #19
    2d04:	dc61      	bgt.n	2dca <ceil+0xf2>
    2d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2d08:	2b00      	cmp	r3, #0
    2d0a:	da28      	bge.n	2d5e <ceil+0x86>
    2d0c:	a162      	add	r1, pc, #392	; (adr r1, 2e98 <ceil+0x1c0>)
    2d0e:	e9d1 0100 	ldrd	r0, r1, [r1]
    2d12:	e9d7 2300 	ldrd	r2, r3, [r7]
    2d16:	f7fd fa79 	bl	20c <__adddf3>
    2d1a:	4602      	mov	r2, r0
    2d1c:	460b      	mov	r3, r1
    2d1e:	4610      	mov	r0, r2
    2d20:	4619      	mov	r1, r3
    2d22:	f04f 0200 	mov.w	r2, #0
    2d26:	f04f 0300 	mov.w	r3, #0
    2d2a:	f7fd feb5 	bl	a98 <__aeabi_dcmpgt>
    2d2e:	4603      	mov	r3, r0
    2d30:	2b00      	cmp	r3, #0
    2d32:	f000 80a0 	beq.w	2e76 <ceil+0x19e>
    2d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2d38:	2b00      	cmp	r3, #0
    2d3a:	da05      	bge.n	2d48 <ceil+0x70>
    2d3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    2d40:	62fb      	str	r3, [r7, #44]	; 0x2c
    2d42:	2300      	movs	r3, #0
    2d44:	62bb      	str	r3, [r7, #40]	; 0x28
    2d46:	e096      	b.n	2e76 <ceil+0x19e>
    2d48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2d4c:	4313      	orrs	r3, r2
    2d4e:	2b00      	cmp	r3, #0
    2d50:	f000 8091 	beq.w	2e76 <ceil+0x19e>
    2d54:	4b52      	ldr	r3, [pc, #328]	; (2ea0 <ceil+0x1c8>)
    2d56:	62fb      	str	r3, [r7, #44]	; 0x2c
    2d58:	2300      	movs	r3, #0
    2d5a:	62bb      	str	r3, [r7, #40]	; 0x28
    2d5c:	e08b      	b.n	2e76 <ceil+0x19e>
    2d5e:	4a51      	ldr	r2, [pc, #324]	; (2ea4 <ceil+0x1cc>)
    2d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2d62:	fa42 f303 	asr.w	r3, r2, r3
    2d66:	623b      	str	r3, [r7, #32]
    2d68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2d6a:	6a3b      	ldr	r3, [r7, #32]
    2d6c:	401a      	ands	r2, r3
    2d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2d70:	4313      	orrs	r3, r2
    2d72:	2b00      	cmp	r3, #0
    2d74:	d102      	bne.n	2d7c <ceil+0xa4>
    2d76:	e9d7 2300 	ldrd	r2, r3, [r7]
    2d7a:	e086      	b.n	2e8a <ceil+0x1b2>
    2d7c:	a146      	add	r1, pc, #280	; (adr r1, 2e98 <ceil+0x1c0>)
    2d7e:	e9d1 0100 	ldrd	r0, r1, [r1]
    2d82:	e9d7 2300 	ldrd	r2, r3, [r7]
    2d86:	f7fd fa41 	bl	20c <__adddf3>
    2d8a:	4602      	mov	r2, r0
    2d8c:	460b      	mov	r3, r1
    2d8e:	4610      	mov	r0, r2
    2d90:	4619      	mov	r1, r3
    2d92:	f04f 0200 	mov.w	r2, #0
    2d96:	f04f 0300 	mov.w	r3, #0
    2d9a:	f7fd fe7d 	bl	a98 <__aeabi_dcmpgt>
    2d9e:	4603      	mov	r3, r0
    2da0:	2b00      	cmp	r3, #0
    2da2:	d068      	beq.n	2e76 <ceil+0x19e>
    2da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2da6:	2b00      	cmp	r3, #0
    2da8:	dd07      	ble.n	2dba <ceil+0xe2>
    2daa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    2dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2db0:	fa42 f303 	asr.w	r3, r2, r3
    2db4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2db6:	4413      	add	r3, r2
    2db8:	62fb      	str	r3, [r7, #44]	; 0x2c
    2dba:	6a3b      	ldr	r3, [r7, #32]
    2dbc:	43da      	mvns	r2, r3
    2dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2dc0:	4013      	ands	r3, r2
    2dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    2dc4:	2300      	movs	r3, #0
    2dc6:	62bb      	str	r3, [r7, #40]	; 0x28
    2dc8:	e055      	b.n	2e76 <ceil+0x19e>
    2dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2dcc:	2b33      	cmp	r3, #51	; 0x33
    2dce:	dd0f      	ble.n	2df0 <ceil+0x118>
    2dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2dd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    2dd6:	d108      	bne.n	2dea <ceil+0x112>
    2dd8:	e9d7 0100 	ldrd	r0, r1, [r7]
    2ddc:	4602      	mov	r2, r0
    2dde:	460b      	mov	r3, r1
    2de0:	f7fd fa14 	bl	20c <__adddf3>
    2de4:	4602      	mov	r2, r0
    2de6:	460b      	mov	r3, r1
    2de8:	e04f      	b.n	2e8a <ceil+0x1b2>
    2dea:	e9d7 2300 	ldrd	r2, r3, [r7]
    2dee:	e04c      	b.n	2e8a <ceil+0x1b2>
    2df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2df2:	3b14      	subs	r3, #20
    2df4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2df8:	fa22 f303 	lsr.w	r3, r2, r3
    2dfc:	623b      	str	r3, [r7, #32]
    2dfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2e00:	6a3b      	ldr	r3, [r7, #32]
    2e02:	4013      	ands	r3, r2
    2e04:	2b00      	cmp	r3, #0
    2e06:	d102      	bne.n	2e0e <ceil+0x136>
    2e08:	e9d7 2300 	ldrd	r2, r3, [r7]
    2e0c:	e03d      	b.n	2e8a <ceil+0x1b2>
    2e0e:	a122      	add	r1, pc, #136	; (adr r1, 2e98 <ceil+0x1c0>)
    2e10:	e9d1 0100 	ldrd	r0, r1, [r1]
    2e14:	e9d7 2300 	ldrd	r2, r3, [r7]
    2e18:	f7fd f9f8 	bl	20c <__adddf3>
    2e1c:	4602      	mov	r2, r0
    2e1e:	460b      	mov	r3, r1
    2e20:	4610      	mov	r0, r2
    2e22:	4619      	mov	r1, r3
    2e24:	f04f 0200 	mov.w	r2, #0
    2e28:	f04f 0300 	mov.w	r3, #0
    2e2c:	f7fd fe34 	bl	a98 <__aeabi_dcmpgt>
    2e30:	4603      	mov	r3, r0
    2e32:	2b00      	cmp	r3, #0
    2e34:	d01f      	beq.n	2e76 <ceil+0x19e>
    2e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2e38:	2b00      	cmp	r3, #0
    2e3a:	dd17      	ble.n	2e6c <ceil+0x194>
    2e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2e3e:	2b14      	cmp	r3, #20
    2e40:	d103      	bne.n	2e4a <ceil+0x172>
    2e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2e44:	3301      	adds	r3, #1
    2e46:	62fb      	str	r3, [r7, #44]	; 0x2c
    2e48:	e010      	b.n	2e6c <ceil+0x194>
    2e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2e4c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
    2e50:	2201      	movs	r2, #1
    2e52:	409a      	lsls	r2, r3
    2e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2e56:	4413      	add	r3, r2
    2e58:	61fb      	str	r3, [r7, #28]
    2e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2e5c:	69fa      	ldr	r2, [r7, #28]
    2e5e:	429a      	cmp	r2, r3
    2e60:	d202      	bcs.n	2e68 <ceil+0x190>
    2e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2e64:	3301      	adds	r3, #1
    2e66:	62fb      	str	r3, [r7, #44]	; 0x2c
    2e68:	69fb      	ldr	r3, [r7, #28]
    2e6a:	62bb      	str	r3, [r7, #40]	; 0x28
    2e6c:	6a3b      	ldr	r3, [r7, #32]
    2e6e:	43da      	mvns	r2, r3
    2e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2e72:	4013      	ands	r3, r2
    2e74:	62bb      	str	r3, [r7, #40]	; 0x28
    2e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2e78:	60fb      	str	r3, [r7, #12]
    2e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2e7c:	60bb      	str	r3, [r7, #8]
    2e7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    2e82:	e9c7 2300 	strd	r2, r3, [r7]
    2e86:	e9d7 2300 	ldrd	r2, r3, [r7]
    2e8a:	4610      	mov	r0, r2
    2e8c:	4619      	mov	r1, r3
    2e8e:	3730      	adds	r7, #48	; 0x30
    2e90:	46bd      	mov	sp, r7
    2e92:	bd80      	pop	{r7, pc}
    2e94:	f3af 8000 	nop.w
    2e98:	8800759c 	.word	0x8800759c
    2e9c:	7e37e43c 	.word	0x7e37e43c
    2ea0:	3ff00000 	.word	0x3ff00000
    2ea4:	000fffff 	.word	0x000fffff

00002ea8 <floor>:
    2ea8:	b580      	push	{r7, lr}
    2eaa:	b08c      	sub	sp, #48	; 0x30
    2eac:	af00      	add	r7, sp, #0
    2eae:	e9c7 0100 	strd	r0, r1, [r7]
    2eb2:	e9d7 2300 	ldrd	r2, r3, [r7]
    2eb6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    2eba:	697b      	ldr	r3, [r7, #20]
    2ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
    2ebe:	693b      	ldr	r3, [r7, #16]
    2ec0:	62bb      	str	r3, [r7, #40]	; 0x28
    2ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2ec4:	151b      	asrs	r3, r3, #20
    2ec6:	f3c3 030a 	ubfx	r3, r3, #0, #11
    2eca:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
    2ece:	627b      	str	r3, [r7, #36]	; 0x24
    2ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2ed2:	2b13      	cmp	r3, #19
    2ed4:	dc62      	bgt.n	2f9c <floor+0xf4>
    2ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2ed8:	2b00      	cmp	r3, #0
    2eda:	da29      	bge.n	2f30 <floor+0x88>
    2edc:	a162      	add	r1, pc, #392	; (adr r1, 3068 <floor+0x1c0>)
    2ede:	e9d1 0100 	ldrd	r0, r1, [r1]
    2ee2:	e9d7 2300 	ldrd	r2, r3, [r7]
    2ee6:	f7fd f991 	bl	20c <__adddf3>
    2eea:	4602      	mov	r2, r0
    2eec:	460b      	mov	r3, r1
    2eee:	4610      	mov	r0, r2
    2ef0:	4619      	mov	r1, r3
    2ef2:	f04f 0200 	mov.w	r2, #0
    2ef6:	f04f 0300 	mov.w	r3, #0
    2efa:	f7fd fdcd 	bl	a98 <__aeabi_dcmpgt>
    2efe:	4603      	mov	r3, r0
    2f00:	2b00      	cmp	r3, #0
    2f02:	f000 80a1 	beq.w	3048 <floor+0x1a0>
    2f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2f08:	2b00      	cmp	r3, #0
    2f0a:	db04      	blt.n	2f16 <floor+0x6e>
    2f0c:	2300      	movs	r3, #0
    2f0e:	62bb      	str	r3, [r7, #40]	; 0x28
    2f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2f12:	62fb      	str	r3, [r7, #44]	; 0x2c
    2f14:	e098      	b.n	3048 <floor+0x1a0>
    2f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2f18:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    2f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2f1e:	4313      	orrs	r3, r2
    2f20:	2b00      	cmp	r3, #0
    2f22:	f000 8091 	beq.w	3048 <floor+0x1a0>
    2f26:	4b52      	ldr	r3, [pc, #328]	; (3070 <floor+0x1c8>)
    2f28:	62fb      	str	r3, [r7, #44]	; 0x2c
    2f2a:	2300      	movs	r3, #0
    2f2c:	62bb      	str	r3, [r7, #40]	; 0x28
    2f2e:	e08b      	b.n	3048 <floor+0x1a0>
    2f30:	4a50      	ldr	r2, [pc, #320]	; (3074 <floor+0x1cc>)
    2f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2f34:	fa42 f303 	asr.w	r3, r2, r3
    2f38:	623b      	str	r3, [r7, #32]
    2f3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2f3c:	6a3b      	ldr	r3, [r7, #32]
    2f3e:	401a      	ands	r2, r3
    2f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2f42:	4313      	orrs	r3, r2
    2f44:	2b00      	cmp	r3, #0
    2f46:	d102      	bne.n	2f4e <floor+0xa6>
    2f48:	e9d7 2300 	ldrd	r2, r3, [r7]
    2f4c:	e086      	b.n	305c <floor+0x1b4>
    2f4e:	a146      	add	r1, pc, #280	; (adr r1, 3068 <floor+0x1c0>)
    2f50:	e9d1 0100 	ldrd	r0, r1, [r1]
    2f54:	e9d7 2300 	ldrd	r2, r3, [r7]
    2f58:	f7fd f958 	bl	20c <__adddf3>
    2f5c:	4602      	mov	r2, r0
    2f5e:	460b      	mov	r3, r1
    2f60:	4610      	mov	r0, r2
    2f62:	4619      	mov	r1, r3
    2f64:	f04f 0200 	mov.w	r2, #0
    2f68:	f04f 0300 	mov.w	r3, #0
    2f6c:	f7fd fd94 	bl	a98 <__aeabi_dcmpgt>
    2f70:	4603      	mov	r3, r0
    2f72:	2b00      	cmp	r3, #0
    2f74:	d068      	beq.n	3048 <floor+0x1a0>
    2f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2f78:	2b00      	cmp	r3, #0
    2f7a:	da07      	bge.n	2f8c <floor+0xe4>
    2f7c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    2f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2f82:	fa42 f303 	asr.w	r3, r2, r3
    2f86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2f88:	4413      	add	r3, r2
    2f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    2f8c:	6a3b      	ldr	r3, [r7, #32]
    2f8e:	43da      	mvns	r2, r3
    2f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2f92:	4013      	ands	r3, r2
    2f94:	62fb      	str	r3, [r7, #44]	; 0x2c
    2f96:	2300      	movs	r3, #0
    2f98:	62bb      	str	r3, [r7, #40]	; 0x28
    2f9a:	e055      	b.n	3048 <floor+0x1a0>
    2f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2f9e:	2b33      	cmp	r3, #51	; 0x33
    2fa0:	dd0f      	ble.n	2fc2 <floor+0x11a>
    2fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2fa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    2fa8:	d108      	bne.n	2fbc <floor+0x114>
    2faa:	e9d7 0100 	ldrd	r0, r1, [r7]
    2fae:	4602      	mov	r2, r0
    2fb0:	460b      	mov	r3, r1
    2fb2:	f7fd f92b 	bl	20c <__adddf3>
    2fb6:	4602      	mov	r2, r0
    2fb8:	460b      	mov	r3, r1
    2fba:	e04f      	b.n	305c <floor+0x1b4>
    2fbc:	e9d7 2300 	ldrd	r2, r3, [r7]
    2fc0:	e04c      	b.n	305c <floor+0x1b4>
    2fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2fc4:	3b14      	subs	r3, #20
    2fc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2fca:	fa22 f303 	lsr.w	r3, r2, r3
    2fce:	623b      	str	r3, [r7, #32]
    2fd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2fd2:	6a3b      	ldr	r3, [r7, #32]
    2fd4:	4013      	ands	r3, r2
    2fd6:	2b00      	cmp	r3, #0
    2fd8:	d102      	bne.n	2fe0 <floor+0x138>
    2fda:	e9d7 2300 	ldrd	r2, r3, [r7]
    2fde:	e03d      	b.n	305c <floor+0x1b4>
    2fe0:	a121      	add	r1, pc, #132	; (adr r1, 3068 <floor+0x1c0>)
    2fe2:	e9d1 0100 	ldrd	r0, r1, [r1]
    2fe6:	e9d7 2300 	ldrd	r2, r3, [r7]
    2fea:	f7fd f90f 	bl	20c <__adddf3>
    2fee:	4602      	mov	r2, r0
    2ff0:	460b      	mov	r3, r1
    2ff2:	4610      	mov	r0, r2
    2ff4:	4619      	mov	r1, r3
    2ff6:	f04f 0200 	mov.w	r2, #0
    2ffa:	f04f 0300 	mov.w	r3, #0
    2ffe:	f7fd fd4b 	bl	a98 <__aeabi_dcmpgt>
    3002:	4603      	mov	r3, r0
    3004:	2b00      	cmp	r3, #0
    3006:	d01f      	beq.n	3048 <floor+0x1a0>
    3008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    300a:	2b00      	cmp	r3, #0
    300c:	da17      	bge.n	303e <floor+0x196>
    300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3010:	2b14      	cmp	r3, #20
    3012:	d103      	bne.n	301c <floor+0x174>
    3014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3016:	3301      	adds	r3, #1
    3018:	62fb      	str	r3, [r7, #44]	; 0x2c
    301a:	e010      	b.n	303e <floor+0x196>
    301c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    301e:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
    3022:	2201      	movs	r2, #1
    3024:	409a      	lsls	r2, r3
    3026:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3028:	4413      	add	r3, r2
    302a:	61fb      	str	r3, [r7, #28]
    302c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    302e:	69fa      	ldr	r2, [r7, #28]
    3030:	429a      	cmp	r2, r3
    3032:	d202      	bcs.n	303a <floor+0x192>
    3034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3036:	3301      	adds	r3, #1
    3038:	62fb      	str	r3, [r7, #44]	; 0x2c
    303a:	69fb      	ldr	r3, [r7, #28]
    303c:	62bb      	str	r3, [r7, #40]	; 0x28
    303e:	6a3b      	ldr	r3, [r7, #32]
    3040:	43da      	mvns	r2, r3
    3042:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3044:	4013      	ands	r3, r2
    3046:	62bb      	str	r3, [r7, #40]	; 0x28
    3048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    304a:	60fb      	str	r3, [r7, #12]
    304c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    304e:	60bb      	str	r3, [r7, #8]
    3050:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    3054:	e9c7 2300 	strd	r2, r3, [r7]
    3058:	e9d7 2300 	ldrd	r2, r3, [r7]
    305c:	4610      	mov	r0, r2
    305e:	4619      	mov	r1, r3
    3060:	3730      	adds	r7, #48	; 0x30
    3062:	46bd      	mov	sp, r7
    3064:	bd80      	pop	{r7, pc}
    3066:	bf00      	nop
    3068:	8800759c 	.word	0x8800759c
    306c:	7e37e43c 	.word	0x7e37e43c
    3070:	bff00000 	.word	0xbff00000
    3074:	000fffff 	.word	0x000fffff

00003078 <testThread>:
#define MY_PRIORITY 5
K_THREAD_STACK_DEFINE(my_stack_area, MY_STACK_SIZE);


void testThread(void *a, uint16_t b, void *c) {
	printk("Thread executed: %d\n", b);
    3078:	4801      	ldr	r0, [pc, #4]	; (3080 <testThread+0x8>)
    307a:	f021 bab3 	b.w	245e4 <printk>
    307e:	bf00      	nop
    3080:	0002c6a4 	.word	0x0002c6a4

00003084 <disconnected>:
}

// triggered when disconnected from phone
static void disconnected(struct bt_conn *conn, uint8_t reason)
{
	printk("Disconnected (reason 0x%02x)\n", reason);
    3084:	4801      	ldr	r0, [pc, #4]	; (308c <disconnected+0x8>)
    3086:	f021 baad 	b.w	245e4 <printk>
    308a:	bf00      	nop
    308c:	0002c6b9 	.word	0x0002c6b9

00003090 <connected>:
	if (err) {
    3090:	b111      	cbz	r1, 3098 <connected+0x8>
		printk("Connection failed (err 0x%02x)\n", err);
    3092:	4803      	ldr	r0, [pc, #12]	; (30a0 <connected+0x10>)
    3094:	f021 baa6 	b.w	245e4 <printk>
		printk("Connected\n");
    3098:	4802      	ldr	r0, [pc, #8]	; (30a4 <connected+0x14>)
    309a:	f021 baa3 	b.w	245e4 <printk>
    309e:	bf00      	nop
    30a0:	0002c6d7 	.word	0x0002c6d7
    30a4:	0002c6f7 	.word	0x0002c6f7

000030a8 <auth_cancel>:

	printk("Advertising successfully started\n");
}

static void auth_cancel(struct bt_conn *conn)
{
    30a8:	b530      	push	{r4, r5, lr}
    30aa:	b093      	sub	sp, #76	; 0x4c
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    30ac:	f024 fa62 	bl	27574 <bt_conn_get_dst>
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    30b0:	7803      	ldrb	r3, [r0, #0]
    30b2:	4604      	mov	r4, r0
    30b4:	ad07      	add	r5, sp, #28
    30b6:	2b03      	cmp	r3, #3
    30b8:	d824      	bhi.n	3104 <auth_cancel+0x5c>
    30ba:	e8df f003 	tbb	[pc, r3]
    30be:	1d02      	.short	0x1d02
    30c0:	211f      	.short	0x211f
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    30c2:	4913      	ldr	r1, [pc, #76]	; (3110 <auth_cancel+0x68>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    30c4:	4628      	mov	r0, r5
    30c6:	f027 f9a1 	bl	2a40c <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    30ca:	79a3      	ldrb	r3, [r4, #6]
    30cc:	9505      	str	r5, [sp, #20]
    30ce:	7862      	ldrb	r2, [r4, #1]
    30d0:	9204      	str	r2, [sp, #16]
    30d2:	78a2      	ldrb	r2, [r4, #2]
    30d4:	9203      	str	r2, [sp, #12]
    30d6:	78e2      	ldrb	r2, [r4, #3]
    30d8:	9202      	str	r2, [sp, #8]
    30da:	7922      	ldrb	r2, [r4, #4]
    30dc:	9201      	str	r2, [sp, #4]
    30de:	7962      	ldrb	r2, [r4, #5]
    30e0:	9200      	str	r2, [sp, #0]
    30e2:	211e      	movs	r1, #30
    30e4:	4a0b      	ldr	r2, [pc, #44]	; (3114 <auth_cancel+0x6c>)
    30e6:	a80a      	add	r0, sp, #40	; 0x28
    30e8:	f021 fa89 	bl	245fe <snprintk>

	printk("Pairing cancelled: %s\n", addr);
    30ec:	480a      	ldr	r0, [pc, #40]	; (3118 <auth_cancel+0x70>)
    30ee:	a90a      	add	r1, sp, #40	; 0x28
    30f0:	f021 fa78 	bl	245e4 <printk>
}
    30f4:	b013      	add	sp, #76	; 0x4c
    30f6:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    30f8:	4908      	ldr	r1, [pc, #32]	; (311c <auth_cancel+0x74>)
    30fa:	e7e3      	b.n	30c4 <auth_cancel+0x1c>
		strcpy(type, "public-id");
    30fc:	4908      	ldr	r1, [pc, #32]	; (3120 <auth_cancel+0x78>)
    30fe:	e7e1      	b.n	30c4 <auth_cancel+0x1c>
		strcpy(type, "random-id");
    3100:	4908      	ldr	r1, [pc, #32]	; (3124 <auth_cancel+0x7c>)
    3102:	e7df      	b.n	30c4 <auth_cancel+0x1c>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    3104:	4a08      	ldr	r2, [pc, #32]	; (3128 <auth_cancel+0x80>)
    3106:	210a      	movs	r1, #10
    3108:	4628      	mov	r0, r5
    310a:	f021 fa78 	bl	245fe <snprintk>
		break;
    310e:	e7dc      	b.n	30ca <auth_cancel+0x22>
    3110:	0002c702 	.word	0x0002c702
    3114:	0002c724 	.word	0x0002c724
    3118:	0002c747 	.word	0x0002c747
    311c:	0002c709 	.word	0x0002c709
    3120:	0002c710 	.word	0x0002c710
    3124:	0002c71a 	.word	0x0002c71a
    3128:	0002e5ab 	.word	0x0002e5ab

0000312c <main>:




void main(void)
{
    312c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	// for ble connection
    int err;

	err = bt_enable(NULL);
    3130:	2000      	movs	r0, #0
{
    3132:	b0c0      	sub	sp, #256	; 0x100
	err = bt_enable(NULL);
    3134:	f005 ff16 	bl	8f64 <bt_enable>
	if (err) {
    3138:	4606      	mov	r6, r0
    313a:	b130      	cbz	r0, 314a <main+0x1e>
		printk("Bluetooth init failed (err %d)\n", err);
    313c:	4601      	mov	r1, r0
    313e:	4881      	ldr	r0, [pc, #516]	; (3344 <main+0x218>)
    3140:	f021 fa50 	bl	245e4 <printk>
		lres_notify(data, 1);
		
		LOG_INF("Received data: %s (RSSI:%ddBm, SNR:%ddBm)",
			log_strdup(data), rssi, snr);
	}
}
    3144:	b040      	add	sp, #256	; 0x100
    3146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    314a:	4d7f      	ldr	r5, [pc, #508]	; (3348 <main+0x21c>)
	printk("Bluetooth initialized\n");
    314c:	487f      	ldr	r0, [pc, #508]	; (334c <main+0x220>)
    314e:	f021 fa49 	bl	245e4 <printk>
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    3152:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    3154:	ac18      	add	r4, sp, #96	; 0x60
    3156:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3158:	682b      	ldr	r3, [r5, #0]
    315a:	6023      	str	r3, [r4, #0]
    315c:	497c      	ldr	r1, [pc, #496]	; (3350 <main+0x224>)
    315e:	9600      	str	r6, [sp, #0]
    3160:	4633      	mov	r3, r6
    3162:	2202      	movs	r2, #2
    3164:	a818      	add	r0, sp, #96	; 0x60
    3166:	f006 fe2f 	bl	9dc8 <bt_le_adv_start>
	if (err) {
    316a:	4601      	mov	r1, r0
    316c:	b340      	cbz	r0, 31c0 <main+0x94>
		printk("Advertising failed to start (err %d)\n", err);
    316e:	4879      	ldr	r0, [pc, #484]	; (3354 <main+0x228>)
    3170:	f021 fa38 	bl	245e4 <printk>
	bt_conn_cb_register(&conn_callbacks);
    3174:	4878      	ldr	r0, [pc, #480]	; (3358 <main+0x22c>)
    3176:	f007 f99d 	bl	a4b4 <bt_conn_cb_register>
	bt_conn_auth_cb_register(&auth_cb_display);
    317a:	4878      	ldr	r0, [pc, #480]	; (335c <main+0x230>)
    317c:	f007 fe56 	bl	ae2c <bt_conn_auth_cb_register>
	uint8_t data[MAX_DATA_LEN] = {0};
    3180:	2100      	movs	r1, #0
    3182:	2210      	movs	r2, #16
    3184:	a80e      	add	r0, sp, #56	; 0x38
    3186:	910d      	str	r1, [sp, #52]	; 0x34
    3188:	f027 f938 	bl	2a3fc <memset>
#if defined(__ZEPHYR_SUPERVISOR__)
	ret = false;
#elif defined(__ZEPHYR_USER__)
	ret = true;
#else
	ret = arch_is_user_context();
    318c:	f021 f9c8 	bl	24520 <arch_is_user_context>

extern const struct device * z_impl_device_get_binding(const char * name);
static inline const struct device * device_get_binding(const char * name)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
    3190:	b1d0      	cbz	r0, 31c8 <main+0x9c>
}

static inline uintptr_t arch_syscall_invoke1(uintptr_t arg1,
					     uintptr_t call_id)
{
	register uint32_t ret __asm__("r0") = arg1;
    3192:	4873      	ldr	r0, [pc, #460]	; (3360 <main+0x234>)
	register uint32_t r6 __asm__("r6") = call_id;
    3194:	2628      	movs	r6, #40	; 0x28

	__asm__ volatile("svc %[svid]\n"
    3196:	df03      	svc	3
			 : "=r"(ret)
			 : [svid] "i" (_SVC_CALL_SYSTEM_CALL),
			   "r" (ret), "r" (r6)
			 : "r8", "memory", "r1", "r2", "r3", "ip");
	return ret;
    3198:	4f72      	ldr	r7, [pc, #456]	; (3364 <main+0x238>)
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    319a:	4681      	mov	r9, r0
	if (!lora_dev) {
    319c:	4872      	ldr	r0, [pc, #456]	; (3368 <main+0x23c>)
    319e:	1a3f      	subs	r7, r7, r0
    31a0:	08ff      	lsrs	r7, r7, #3
    31a2:	01bf      	lsls	r7, r7, #6
    31a4:	f1b9 0f00 	cmp.w	r9, #0
    31a8:	d118      	bne.n	31dc <main+0xb0>
 * @return true if the CPU is currently running with user permissions
 */
static inline bool k_is_user_context(void)
{
#ifdef CONFIG_USERSPACE
	return arch_is_user_context();
    31aa:	f021 f9b9 	bl	24520 <arch_is_user_context>
		LOG_ERR("%s Device not found", DEFAULT_RADIO);
    31ae:	f047 0701 	orr.w	r7, r7, #1
    31b2:	b168      	cbz	r0, 31d0 <main+0xa4>
    31b4:	4a6a      	ldr	r2, [pc, #424]	; (3360 <main+0x234>)
    31b6:	496d      	ldr	r1, [pc, #436]	; (336c <main+0x240>)
    31b8:	4638      	mov	r0, r7
    31ba:	f021 fe6c 	bl	24e96 <log_from_user>
    31be:	e7c1      	b.n	3144 <main+0x18>
	printk("Advertising successfully started\n");
    31c0:	486b      	ldr	r0, [pc, #428]	; (3370 <main+0x244>)
    31c2:	f021 fa0f 	bl	245e4 <printk>
    31c6:	e7d5      	b.n	3174 <main+0x48>
    31c8:	4865      	ldr	r0, [pc, #404]	; (3360 <main+0x234>)
    31ca:	f01d fa5f 	bl	2068c <z_impl_device_get_binding>
    31ce:	e7e3      	b.n	3198 <main+0x6c>
		LOG_ERR("%s Device not found", DEFAULT_RADIO);
    31d0:	4963      	ldr	r1, [pc, #396]	; (3360 <main+0x234>)
    31d2:	4866      	ldr	r0, [pc, #408]	; (336c <main+0x240>)
    31d4:	463a      	mov	r2, r7
    31d6:	f021 fe91 	bl	24efc <log_1>
		return;
    31da:	e7b3      	b.n	3144 <main+0x18>
	config.frequency = 868100000;
    31dc:	4b65      	ldr	r3, [pc, #404]	; (3374 <main+0x248>)
    31de:	930a      	str	r3, [sp, #40]	; 0x28
	config.bandwidth = 0;
    31e0:	f44f 6320 	mov.w	r3, #2560	; 0xa00
    31e4:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
	config.coding_rate = 1;
    31e8:	2301      	movs	r3, #1
    31ea:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	config.preamble_len = 8;
    31ee:	4b62      	ldr	r3, [pc, #392]	; (3378 <main+0x24c>)
    31f0:	930c      	str	r3, [sp, #48]	; 0x30
			      struct lora_modem_config *config)
{
	const struct lora_driver_api *api =
		(const struct lora_driver_api *)dev->api;

	return api->config(dev, config);
    31f2:	f8d9 3008 	ldr.w	r3, [r9, #8]
    31f6:	a90a      	add	r1, sp, #40	; 0x28
    31f8:	681b      	ldr	r3, [r3, #0]
    31fa:	4648      	mov	r0, r9
    31fc:	4798      	blx	r3
	if (ret < 0) {
    31fe:	2800      	cmp	r0, #0
    3200:	da0e      	bge.n	3220 <main+0xf4>
    3202:	f021 f98d 	bl	24520 <arch_is_user_context>
		LOG_ERR("Lora config failed");
    3206:	f047 0701 	orr.w	r7, r7, #1
    320a:	b120      	cbz	r0, 3216 <main+0xea>
    320c:	495b      	ldr	r1, [pc, #364]	; (337c <main+0x250>)
			LOG_ERR("LoRa receive failed");
    320e:	4638      	mov	r0, r7
    3210:	f021 fe41 	bl	24e96 <log_from_user>
    3214:	e796      	b.n	3144 <main+0x18>
		LOG_ERR("Lora config failed");
    3216:	4859      	ldr	r0, [pc, #356]	; (337c <main+0x250>)
    3218:	4639      	mov	r1, r7
			LOG_ERR("LoRa receive failed");
    321a:	f021 fe62 	bl	24ee2 <log_0>
			return;
    321e:	e791      	b.n	3144 <main+0x18>
	ret = arch_is_user_context();
    3220:	f021 f97e 	bl	24520 <arch_is_user_context>
	return ret;
    3224:	ad12      	add	r5, sp, #72	; 0x48

extern k_tid_t z_impl_k_thread_create(struct k_thread * new_thread, k_thread_stack_t * stack, size_t stack_size, k_thread_entry_t entry, void * p1, void * p2, void * p3, int prio, uint32_t options, k_timeout_t delay);
static inline k_tid_t k_thread_create(struct k_thread * new_thread, k_thread_stack_t * stack, size_t stack_size, k_thread_entry_t entry, void * p1, void * p2, void * p3, int prio, uint32_t options, k_timeout_t delay)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
    3226:	2800      	cmp	r0, #0
    3228:	d037      	beq.n	329a <main+0x16e>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0;
		parm0.val = delay;
		uintptr_t more[] = {
    322a:	2400      	movs	r4, #0
    322c:	2305      	movs	r3, #5
    322e:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
    3232:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
    3236:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
			*(uintptr_t *)&prio,
			*(uintptr_t *)&options,
			parm0.split.lo,
			parm0.split.hi
		};
		return (k_tid_t) arch_syscall_invoke6(*(uintptr_t *)&new_thread, *(uintptr_t *)&stack, *(uintptr_t *)&stack_size, *(uintptr_t *)&entry, *(uintptr_t *)&p1, (uintptr_t) &more, K_SYSCALL_K_THREAD_CREATE);
    323a:	a818      	add	r0, sp, #96	; 0x60
	register uint32_t r1 __asm__("r1") = arg2;
    323c:	4950      	ldr	r1, [pc, #320]	; (3380 <main+0x254>)
	register uint32_t r3 __asm__("r3") = arg4;
    323e:	4b51      	ldr	r3, [pc, #324]	; (3384 <main+0x258>)
	register uint32_t r2 __asm__("r2") = arg3;
    3240:	f44f 7200 	mov.w	r2, #512	; 0x200
	register uint32_t r6 __asm__("r6") = call_id;
    3244:	26aa      	movs	r6, #170	; 0xaa
	__asm__ volatile("svc %[svid]\n"
    3246:	df03      	svc	3
		printk("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n");
    3248:	4c4f      	ldr	r4, [pc, #316]	; (3388 <main+0x25c>)
		printk("bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb");
    324a:	f8df a148 	ldr.w	sl, [pc, #328]	; 3394 <main+0x268>
	ret = arch_is_user_context();
    324e:	f021 f967 	bl	24520 <arch_is_user_context>

extern int32_t z_impl_k_sleep(k_timeout_t timeout);
static inline int32_t k_sleep(k_timeout_t timeout)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
    3252:	2800      	cmp	r0, #0
    3254:	d033      	beq.n	32be <main+0x192>
	register uint32_t ret __asm__("r0") = arg1;
    3256:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	register uint32_t r1 __asm__("r1") = arg2;
    325a:	4601      	mov	r1, r0
	register uint32_t r6 __asm__("r6") = call_id;
    325c:	26a4      	movs	r6, #164	; 0xa4
	__asm__ volatile("svc %[svid]\n"
    325e:	df03      	svc	3
		printk("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n");
    3260:	4620      	mov	r0, r4
    3262:	f021 f9bf 	bl	245e4 <printk>
			    k_timeout_t timeout, int16_t *rssi, int8_t *snr)
{
	const struct lora_driver_api *api =
		(const struct lora_driver_api *)dev->api;

	return api->recv(dev, data, size, timeout, rssi, snr);
    3266:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    326a:	f8d9 3008 	ldr.w	r3, [r9, #8]
    326e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3272:	e9cd 5202 	strd	r5, r2, [sp, #8]
    3276:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    327a:	e9cd 1200 	strd	r1, r2, [sp]
    327e:	4648      	mov	r0, r9
    3280:	689b      	ldr	r3, [r3, #8]
    3282:	2214      	movs	r2, #20
    3284:	a90d      	add	r1, sp, #52	; 0x34
    3286:	4798      	blx	r3
		if (len < 0) {
    3288:	2800      	cmp	r0, #0
    328a:	da22      	bge.n	32d2 <main+0x1a6>
	return arch_is_user_context();
    328c:	f021 f948 	bl	24520 <arch_is_user_context>
			LOG_ERR("LoRa receive failed");
    3290:	f047 0701 	orr.w	r7, r7, #1
    3294:	b1d0      	cbz	r0, 32cc <main+0x1a0>
    3296:	493d      	ldr	r1, [pc, #244]	; (338c <main+0x260>)
    3298:	e7b9      	b.n	320e <main+0xe2>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    329a:	2200      	movs	r2, #0
    329c:	2300      	movs	r3, #0
    329e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    32a2:	2305      	movs	r3, #5
    32a4:	e9cd 0302 	strd	r0, r3, [sp, #8]
    32a8:	e9cd 0300 	strd	r0, r3, [sp]
    32ac:	9004      	str	r0, [sp, #16]
    32ae:	4b35      	ldr	r3, [pc, #212]	; (3384 <main+0x258>)
    32b0:	4933      	ldr	r1, [pc, #204]	; (3380 <main+0x254>)
    32b2:	f44f 7200 	mov.w	r2, #512	; 0x200
    32b6:	a818      	add	r0, sp, #96	; 0x60
    32b8:	f026 fc0f 	bl	29ada <z_impl_k_thread_create>
    32bc:	e7c4      	b.n	3248 <main+0x11c>
		parm0.val = timeout;
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    32be:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    32c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    32c6:	f01e fc7f 	bl	21bc8 <z_impl_k_sleep>
    32ca:	e7c9      	b.n	3260 <main+0x134>
    32cc:	482f      	ldr	r0, [pc, #188]	; (338c <main+0x260>)
    32ce:	4639      	mov	r1, r7
    32d0:	e7a3      	b.n	321a <main+0xee>
		printk("bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb");
    32d2:	4650      	mov	r0, sl
    32d4:	f021 f986 	bl	245e4 <printk>
		rssi = (uint8_t) -rssi; // negated to fit into an unsigned int (original value is negative)
    32d8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    32dc:	425b      	negs	r3, r3
    32de:	b2db      	uxtb	r3, r3
    32e0:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
		ndata[0] = rssi;
    32e4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	bt_lres_notify(data, type_of_notification);
    32e8:	2100      	movs	r1, #0
		ndata[1] = snr;
    32ea:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    32ee:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_lres_notify(data, type_of_notification);
    32f2:	a809      	add	r0, sp, #36	; 0x24
    32f4:	f001 ffae 	bl	5254 <bt_lres_notify>
    32f8:	2101      	movs	r1, #1
    32fa:	a80d      	add	r0, sp, #52	; 0x34
    32fc:	f001 ffaa 	bl	5254 <bt_lres_notify>
    3300:	f021 f90e 	bl	24520 <arch_is_user_context>
		LOG_INF("Received data: %s (RSSI:%ddBm, SNR:%ddBm)",
    3304:	f047 0603 	orr.w	r6, r7, #3
    3308:	b168      	cbz	r0, 3326 <main+0x1fa>
    330a:	a80d      	add	r0, sp, #52	; 0x34
    330c:	f000 ff3a 	bl	4184 <log_strdup>
    3310:	f99d 3023 	ldrsb.w	r3, [sp, #35]	; 0x23
    3314:	9300      	str	r3, [sp, #0]
    3316:	4602      	mov	r2, r0
    3318:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
    331c:	491c      	ldr	r1, [pc, #112]	; (3390 <main+0x264>)
    331e:	4630      	mov	r0, r6
    3320:	f021 fdb9 	bl	24e96 <log_from_user>
    3324:	e793      	b.n	324e <main+0x122>
    3326:	a80d      	add	r0, sp, #52	; 0x34
    3328:	f000 ff2c 	bl	4184 <log_strdup>
    332c:	f99d 3023 	ldrsb.w	r3, [sp, #35]	; 0x23
    3330:	f9bd 2048 	ldrsh.w	r2, [sp, #72]	; 0x48
    3334:	f8ad 6000 	strh.w	r6, [sp]
    3338:	4601      	mov	r1, r0
    333a:	4815      	ldr	r0, [pc, #84]	; (3390 <main+0x264>)
    333c:	f021 fe0b 	bl	24f56 <log_3>
    3340:	e785      	b.n	324e <main+0x122>
    3342:	bf00      	nop
    3344:	0002c75e 	.word	0x0002c75e
    3348:	0002a8a0 	.word	0x0002a8a0
    334c:	0002c77e 	.word	0x0002c77e
    3350:	0002a9a0 	.word	0x0002a9a0
    3354:	0002c795 	.word	0x0002c795
    3358:	2000775c 	.word	0x2000775c
    335c:	20007738 	.word	0x20007738
    3360:	0002c7dd 	.word	0x0002c7dd
    3364:	0002a7f0 	.word	0x0002a7f0
    3368:	0002a6d0 	.word	0x0002a6d0
    336c:	0002c7e4 	.word	0x0002c7e4
    3370:	0002c7bb 	.word	0x0002c7bb
    3374:	33be27a0 	.word	0x33be27a0
    3378:	00050008 	.word	0x00050008
    337c:	0002c7f8 	.word	0x0002c7f8
    3380:	20007400 	.word	0x20007400
    3384:	00003079 	.word	0x00003079
    3388:	0002c80b 	.word	0x0002c80b
    338c:	0002c833 	.word	0x0002c833
    3390:	0002c86f 	.word	0x0002c86f
    3394:	0002c847 	.word	0x0002c847

00003398 <__printk_hook_install>:
 *
 * @return N/A
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
    3398:	4b01      	ldr	r3, [pc, #4]	; (33a0 <__printk_hook_install+0x8>)
    339a:	6018      	str	r0, [r3, #0]
}
    339c:	4770      	bx	lr
    339e:	bf00      	nop
    33a0:	20007778 	.word	0x20007778

000033a4 <z_impl_k_str_out>:
#endif
}
#endif /* CONFIG_USERSPACE */

void z_impl_k_str_out(char *c, size_t n)
{
    33a4:	b570      	push	{r4, r5, r6, lr}
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	for (i = 0; i < n; i++) {
		_char_out(c[i]);
    33a6:	4e05      	ldr	r6, [pc, #20]	; (33bc <z_impl_k_str_out+0x18>)
    33a8:	4604      	mov	r4, r0
    33aa:	1845      	adds	r5, r0, r1
	for (i = 0; i < n; i++) {
    33ac:	42ac      	cmp	r4, r5
    33ae:	d100      	bne.n	33b2 <z_impl_k_str_out+0xe>
	}

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    33b0:	bd70      	pop	{r4, r5, r6, pc}
		_char_out(c[i]);
    33b2:	6833      	ldr	r3, [r6, #0]
    33b4:	f814 0b01 	ldrb.w	r0, [r4], #1
    33b8:	4798      	blx	r3
	for (i = 0; i < n; i++) {
    33ba:	e7f7      	b.n	33ac <z_impl_k_str_out+0x8>
    33bc:	20007778 	.word	0x20007778

000033c0 <z_mrsh_k_str_out>:
#include <syscalls/kernel.h>

extern void z_vrfy_k_str_out(char * c, size_t n);
uintptr_t z_mrsh_k_str_out(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
    33c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_current->syscall_frame = ssf;
    33c4:	f8df 8090 	ldr.w	r8, [pc, #144]	; 3458 <z_mrsh_k_str_out+0x98>
{
    33c8:	b086      	sub	sp, #24
	_current->syscall_frame = ssf;
    33ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
    33ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    33d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

#ifdef CONFIG_USERSPACE
static inline void z_vrfy_k_str_out(char *c, size_t n)
{
	Z_OOPS(Z_SYSCALL_MEMORY_READ(c, n));
    33d4:	2200      	movs	r2, #0
{
    33d6:	4605      	mov	r5, r0
    33d8:	460f      	mov	r7, r1
    33da:	f023 fb63 	bl	26aa4 <arch_buffer_validate>
    33de:	4646      	mov	r6, r8
    33e0:	4604      	mov	r4, r0
    33e2:	b318      	cbz	r0, 342c <z_mrsh_k_str_out+0x6c>
    33e4:	f021 f8df 	bl	245a6 <arch_is_user_context>
    33e8:	4c16      	ldr	r4, [pc, #88]	; (3444 <z_mrsh_k_str_out+0x84>)
    33ea:	4b17      	ldr	r3, [pc, #92]	; (3448 <z_mrsh_k_str_out+0x88>)
    33ec:	1ae4      	subs	r4, r4, r3
    33ee:	08e4      	lsrs	r4, r4, #3
    33f0:	01a4      	lsls	r4, r4, #6
    33f2:	4b16      	ldr	r3, [pc, #88]	; (344c <z_mrsh_k_str_out+0x8c>)
    33f4:	f044 0401 	orr.w	r4, r4, #1
    33f8:	b160      	cbz	r0, 3414 <z_mrsh_k_str_out+0x54>
    33fa:	e9cd 7300 	strd	r7, r3, [sp]
    33fe:	4a14      	ldr	r2, [pc, #80]	; (3450 <z_mrsh_k_str_out+0x90>)
    3400:	4914      	ldr	r1, [pc, #80]	; (3454 <z_mrsh_k_str_out+0x94>)
    3402:	462b      	mov	r3, r5
    3404:	4620      	mov	r0, r4
    3406:	f021 fd46 	bl	24e96 <log_from_user>
    340a:	68b3      	ldr	r3, [r6, #8]
    340c:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    3410:	f023 fb24 	bl	26a5c <arch_syscall_oops>
    3414:	4a0e      	ldr	r2, [pc, #56]	; (3450 <z_mrsh_k_str_out+0x90>)
    3416:	480f      	ldr	r0, [pc, #60]	; (3454 <z_mrsh_k_str_out+0x94>)
    3418:	e9cd 2502 	strd	r2, r5, [sp, #8]
    341c:	e9cd 7304 	strd	r7, r3, [sp, #16]
    3420:	2204      	movs	r2, #4
    3422:	4623      	mov	r3, r4
    3424:	a902      	add	r1, sp, #8
    3426:	f021 fdb2 	bl	24f8e <log_n>
    342a:	e7ee      	b.n	340a <z_mrsh_k_str_out+0x4a>
	z_impl_k_str_out((char *)c, n);
    342c:	4628      	mov	r0, r5
    342e:	4639      	mov	r1, r7
    3430:	f7ff ffb8 	bl	33a4 <z_impl_k_str_out>
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	z_vrfy_k_str_out(*(char **)&arg0, *(size_t*)&arg1)
;
	_current->syscall_frame = NULL;
    3434:	f8d8 3008 	ldr.w	r3, [r8, #8]
	return 0;
}
    3438:	4620      	mov	r0, r4
	_current->syscall_frame = NULL;
    343a:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
}
    343e:	b006      	add	sp, #24
    3440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3444:	0002a810 	.word	0x0002a810
    3448:	0002a6d0 	.word	0x0002a6d0
    344c:	0002d10e 	.word	0x0002d10e
    3450:	0002c8ec 	.word	0x0002c8ec
    3454:	0002c8a6 	.word	0x0002c8a6
    3458:	200023f4 	.word	0x200023f4

0000345c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    345c:	b530      	push	{r4, r5, lr}
    345e:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    3460:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    3464:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    3466:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
    3468:	a901      	add	r1, sp, #4
    346a:	4805      	ldr	r0, [pc, #20]	; (3480 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    346c:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    346e:	f000 f955 	bl	371c <cbvprintf>

	if (ctx.count < ctx.max) {
    3472:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    3476:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    3478:	bfb8      	it	lt
    347a:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    347c:	b005      	add	sp, #20
    347e:	bd30      	pop	{r4, r5, pc}
    3480:	000245bf 	.word	0x000245bf

00003484 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    3484:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3488:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    348c:	f019 0808 	ands.w	r8, r9, #8
{
    3490:	4604      	mov	r4, r0
    3492:	4693      	mov	fp, r2
	if (processing) {
    3494:	d00d      	beq.n	34b2 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    3496:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    3498:	bf0c      	ite	eq
    349a:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    349e:	f049 0920 	orrne.w	r9, r9, #32
    34a2:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    34a6:	f38b 8811 	msr	BASEPRI, fp
    34aa:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    34ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    34b2:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    34b6:	2902      	cmp	r1, #2
    34b8:	d107      	bne.n	34ca <process_event+0x46>
			evt = process_recheck(mgr);
    34ba:	4620      	mov	r0, r4
    34bc:	f021 f8ac 	bl	24618 <process_recheck>
		if (evt == EVT_NOP) {
    34c0:	2800      	cmp	r0, #0
    34c2:	d0f0      	beq.n	34a6 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    34c4:	2801      	cmp	r0, #1
    34c6:	8b23      	ldrh	r3, [r4, #24]
    34c8:	d150      	bne.n	356c <process_event+0xe8>
			res = mgr->last_res;
    34ca:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    34cc:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    34ce:	2f00      	cmp	r7, #0
    34d0:	da15      	bge.n	34fe <process_event+0x7a>
		*clients = mgr->clients;
    34d2:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    34d4:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    34d8:	e9c4 8800 	strd	r8, r8, [r4]
    34dc:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    34e0:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    34e2:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    34e4:	8b21      	ldrh	r1, [r4, #24]
    34e6:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    34ea:	45ca      	cmp	sl, r9
    34ec:	d002      	beq.n	34f4 <process_event+0x70>
		if (do_monitors
    34ee:	68a3      	ldr	r3, [r4, #8]
    34f0:	2b00      	cmp	r3, #0
    34f2:	d15c      	bne.n	35ae <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
    34f4:	b90d      	cbnz	r5, 34fa <process_event+0x76>
		    || (transit != NULL)) {
    34f6:	2e00      	cmp	r6, #0
    34f8:	d074      	beq.n	35e4 <process_event+0x160>
    34fa:	2300      	movs	r3, #0
    34fc:	e058      	b.n	35b0 <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    34fe:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    3502:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    3504:	2a01      	cmp	r2, #1
    3506:	d820      	bhi.n	354a <process_event+0xc6>
		*clients = mgr->clients;
    3508:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    350c:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    350e:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
    3510:	b289      	uxth	r1, r1
	list->tail = NULL;
    3512:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    3516:	d10c      	bne.n	3532 <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    3518:	2d00      	cmp	r5, #0
    351a:	462b      	mov	r3, r5
    351c:	bf38      	it	cc
    351e:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    3520:	b12b      	cbz	r3, 352e <process_event+0xaa>
				mgr->refs += 1U;
    3522:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    3524:	681b      	ldr	r3, [r3, #0]
    3526:	3201      	adds	r2, #1
    3528:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    352a:	2b00      	cmp	r3, #0
    352c:	d1f8      	bne.n	3520 <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    352e:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    3532:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    3534:	4620      	mov	r0, r4
    3536:	f021 f86f 	bl	24618 <process_recheck>
    353a:	4606      	mov	r6, r0
    353c:	2800      	cmp	r0, #0
    353e:	d0d1      	beq.n	34e4 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    3540:	8b23      	ldrh	r3, [r4, #24]
    3542:	f043 0320 	orr.w	r3, r3, #32
    3546:	8323      	strh	r3, [r4, #24]
    3548:	e7cb      	b.n	34e2 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    354a:	2b04      	cmp	r3, #4
    354c:	d10c      	bne.n	3568 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    354e:	f021 0107 	bic.w	r1, r1, #7
    3552:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    3554:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    3556:	4620      	mov	r0, r4
    3558:	f021 f85e 	bl	24618 <process_recheck>
    355c:	4605      	mov	r5, r0
    355e:	2800      	cmp	r0, #0
    3560:	d0bf      	beq.n	34e2 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    3562:	f041 0120 	orr.w	r1, r1, #32
    3566:	8321      	strh	r1, [r4, #24]
    3568:	2500      	movs	r5, #0
    356a:	e7ba      	b.n	34e2 <process_event+0x5e>
		} else if (evt == EVT_START) {
    356c:	2803      	cmp	r0, #3
    356e:	d109      	bne.n	3584 <process_event+0x100>
			transit = mgr->transitions->start;
    3570:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3572:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    3576:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3578:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    357c:	8323      	strh	r3, [r4, #24]
}
    357e:	2500      	movs	r5, #0
		res = 0;
    3580:	462f      	mov	r7, r5
    3582:	e7af      	b.n	34e4 <process_event+0x60>
		} else if (evt == EVT_STOP) {
    3584:	2804      	cmp	r0, #4
    3586:	d106      	bne.n	3596 <process_event+0x112>
			transit = mgr->transitions->stop;
    3588:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    358a:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    358e:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3590:	f043 0304 	orr.w	r3, r3, #4
    3594:	e7f2      	b.n	357c <process_event+0xf8>
		} else if (evt == EVT_RESET) {
    3596:	2805      	cmp	r0, #5
    3598:	d106      	bne.n	35a8 <process_event+0x124>
			transit = mgr->transitions->reset;
    359a:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    359c:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    35a0:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    35a2:	f043 0305 	orr.w	r3, r3, #5
    35a6:	e7e9      	b.n	357c <process_event+0xf8>
    35a8:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    35aa:	462e      	mov	r6, r5
    35ac:	e7e8      	b.n	3580 <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
    35ae:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    35b0:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    35b4:	8321      	strh	r1, [r4, #24]
    35b6:	f38b 8811 	msr	BASEPRI, fp
    35ba:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    35be:	bb03      	cbnz	r3, 3602 <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
    35c0:	2d00      	cmp	r5, #0
    35c2:	d133      	bne.n	362c <process_event+0x1a8>
			if (transit != NULL) {
    35c4:	b116      	cbz	r6, 35cc <process_event+0x148>
				transit(mgr, transition_complete);
    35c6:	4921      	ldr	r1, [pc, #132]	; (364c <process_event+0x1c8>)
    35c8:	4620      	mov	r0, r4
    35ca:	47b0      	blx	r6
	__asm__ volatile(
    35cc:	f04f 0320 	mov.w	r3, #32
    35d0:	f3ef 8b11 	mrs	fp, BASEPRI
    35d4:	f383 8811 	msr	BASEPRI, r3
    35d8:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    35dc:	8b23      	ldrh	r3, [r4, #24]
    35de:	f023 0308 	bic.w	r3, r3, #8
    35e2:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    35e4:	8b23      	ldrh	r3, [r4, #24]
    35e6:	06da      	lsls	r2, r3, #27
    35e8:	d528      	bpl.n	363c <process_event+0x1b8>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    35ea:	f023 0310 	bic.w	r3, r3, #16
    35ee:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    35f0:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    35f2:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    35f6:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    35fa:	2900      	cmp	r1, #0
    35fc:	f47f af5b 	bne.w	34b6 <process_event+0x32>
out:
    3600:	e751      	b.n	34a6 <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    3602:	68a1      	ldr	r1, [r4, #8]
    3604:	2900      	cmp	r1, #0
    3606:	d0db      	beq.n	35c0 <process_event+0x13c>
	return node->next;
    3608:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
    360a:	f8d1 b004 	ldr.w	fp, [r1, #4]
    360e:	2b00      	cmp	r3, #0
    3610:	bf38      	it	cc
    3612:	2300      	movcc	r3, #0
    3614:	4699      	mov	r9, r3
    3616:	4652      	mov	r2, sl
    3618:	463b      	mov	r3, r7
    361a:	4620      	mov	r0, r4
    361c:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    361e:	f1b9 0f00 	cmp.w	r9, #0
    3622:	d0cd      	beq.n	35c0 <process_event+0x13c>
    3624:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    3628:	4649      	mov	r1, r9
    362a:	e7ee      	b.n	360a <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    362c:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    362e:	463b      	mov	r3, r7
    3630:	4652      	mov	r2, sl
    3632:	4620      	mov	r0, r4
    3634:	682d      	ldr	r5, [r5, #0]
    3636:	f021 f80b 	bl	24650 <notify_one>
    363a:	e7c1      	b.n	35c0 <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    363c:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    3640:	bf1e      	ittt	ne
    3642:	f023 0320 	bicne.w	r3, r3, #32
    3646:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    3648:	2102      	movne	r1, #2
    364a:	e7d2      	b.n	35f2 <process_event+0x16e>
    364c:	0002467d 	.word	0x0002467d

00003650 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    3650:	b5f0      	push	{r4, r5, r6, r7, lr}
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
    3652:	4e09      	ldr	r6, [pc, #36]	; (3678 <extract_decimal+0x28>)
    3654:	6801      	ldr	r1, [r0, #0]
{
    3656:	4602      	mov	r2, r0
		val = 10U * val + *sp++ - '0';
    3658:	270a      	movs	r7, #10
	size_t val = 0;
    365a:	2000      	movs	r0, #0
    365c:	460c      	mov	r4, r1
	while (isdigit((int)(unsigned char)*sp)) {
    365e:	3101      	adds	r1, #1
    3660:	7823      	ldrb	r3, [r4, #0]
    3662:	5d9d      	ldrb	r5, [r3, r6]
    3664:	076d      	lsls	r5, r5, #29
    3666:	d401      	bmi.n	366c <extract_decimal+0x1c>
	}
	*str = sp;
    3668:	6014      	str	r4, [r2, #0]
	return val;
}
    366a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    366c:	fb07 3300 	mla	r3, r7, r0, r3
    3670:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    3674:	e7f2      	b.n	365c <extract_decimal+0xc>
    3676:	bf00      	nop
    3678:	0002f8fc 	.word	0x0002f8fc

0000367c <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    367c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3680:	4614      	mov	r4, r2
    3682:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    3684:	78d3      	ldrb	r3, [r2, #3]
    3686:	4a24      	ldr	r2, [pc, #144]	; (3718 <encode_uint+0x9c>)
    3688:	f813 a002 	ldrb.w	sl, [r3, r2]
	switch (specifier) {
    368c:	2b6f      	cmp	r3, #111	; 0x6f
    368e:	f00a 0203 	and.w	r2, sl, #3
{
    3692:	4606      	mov	r6, r0
    3694:	460f      	mov	r7, r1
    3696:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    3698:	d02d      	beq.n	36f6 <encode_uint+0x7a>
    369a:	d828      	bhi.n	36ee <encode_uint+0x72>
		return 16;
    369c:	2b58      	cmp	r3, #88	; 0x58
    369e:	bf14      	ite	ne
    36a0:	250a      	movne	r5, #10
    36a2:	2510      	moveq	r5, #16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    36a4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    36a8:	46aa      	mov	sl, r5
    36aa:	f04f 0b00 	mov.w	fp, #0
    36ae:	4652      	mov	r2, sl
    36b0:	465b      	mov	r3, fp
    36b2:	4630      	mov	r0, r6
    36b4:	4639      	mov	r1, r7
    36b6:	f7fd fa41 	bl	b3c <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    36ba:	2a09      	cmp	r2, #9
    36bc:	b2d3      	uxtb	r3, r2
    36be:	d81f      	bhi.n	3700 <encode_uint+0x84>
    36c0:	3330      	adds	r3, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    36c2:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    36c4:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    36c6:	bf08      	it	eq
    36c8:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    36ca:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    36ce:	d301      	bcc.n	36d4 <encode_uint+0x58>
    36d0:	45c8      	cmp	r8, r9
    36d2:	d812      	bhi.n	36fa <encode_uint+0x7e>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    36d4:	7823      	ldrb	r3, [r4, #0]
    36d6:	069b      	lsls	r3, r3, #26
    36d8:	d505      	bpl.n	36e6 <encode_uint+0x6a>
		if (radix == 8) {
    36da:	2d08      	cmp	r5, #8
    36dc:	d116      	bne.n	370c <encode_uint+0x90>
			conv->altform_0 = true;
    36de:	78a3      	ldrb	r3, [r4, #2]
    36e0:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    36e4:	70a3      	strb	r3, [r4, #2]
		}
	}

	return bp;
}
    36e6:	4640      	mov	r0, r8
    36e8:	b003      	add	sp, #12
    36ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    36ee:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    36f2:	2b70      	cmp	r3, #112	; 0x70
    36f4:	e7d3      	b.n	369e <encode_uint+0x22>
	switch (specifier) {
    36f6:	2508      	movs	r5, #8
    36f8:	e7d4      	b.n	36a4 <encode_uint+0x28>
		value /= radix;
    36fa:	4606      	mov	r6, r0
    36fc:	460f      	mov	r7, r1
    36fe:	e7d6      	b.n	36ae <encode_uint+0x32>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    3700:	9a01      	ldr	r2, [sp, #4]
    3702:	2a01      	cmp	r2, #1
    3704:	bf0c      	ite	eq
    3706:	3337      	addeq	r3, #55	; 0x37
    3708:	3357      	addne	r3, #87	; 0x57
    370a:	e7da      	b.n	36c2 <encode_uint+0x46>
		} else if (radix == 16) {
    370c:	2d10      	cmp	r5, #16
    370e:	d1ea      	bne.n	36e6 <encode_uint+0x6a>
			conv->altform_0c = true;
    3710:	78a3      	ldrb	r3, [r4, #2]
    3712:	f043 0310 	orr.w	r3, r3, #16
    3716:	e7e5      	b.n	36e4 <encode_uint+0x68>
    3718:	0002f8fc 	.word	0x0002f8fc

0000371c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    371c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3720:	4682      	mov	sl, r0
    3722:	b093      	sub	sp, #76	; 0x4c
    3724:	468b      	mov	fp, r1
    3726:	4691      	mov	r9, r2
    3728:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    372a:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    372c:	f899 0000 	ldrb.w	r0, [r9]
    3730:	b908      	cbnz	r0, 3736 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    3732:	4628      	mov	r0, r5
    3734:	e33a      	b.n	3dac <cbvprintf+0x690>
		if (*fp != '%') {
    3736:	f109 0301 	add.w	r3, r9, #1
    373a:	2825      	cmp	r0, #37	; 0x25
    373c:	9302      	str	r3, [sp, #8]
    373e:	d006      	beq.n	374e <cbvprintf+0x32>
			OUTC('%');
    3740:	4659      	mov	r1, fp
    3742:	47d0      	blx	sl
    3744:	2800      	cmp	r0, #0
    3746:	f2c0 8331 	blt.w	3dac <cbvprintf+0x690>
    374a:	3501      	adds	r5, #1
			break;
    374c:	e1f1      	b.n	3b32 <cbvprintf+0x416>
		} state = {
    374e:	2218      	movs	r2, #24
    3750:	2100      	movs	r1, #0
    3752:	a80c      	add	r0, sp, #48	; 0x30
    3754:	f026 fe52 	bl	2a3fc <memset>
	if (*sp == '%') {
    3758:	f899 3001 	ldrb.w	r3, [r9, #1]
    375c:	2b25      	cmp	r3, #37	; 0x25
    375e:	d059      	beq.n	3814 <cbvprintf+0xf8>
    3760:	9a02      	ldr	r2, [sp, #8]
    3762:	4616      	mov	r6, r2
		switch (*sp) {
    3764:	f812 3b01 	ldrb.w	r3, [r2], #1
    3768:	2b2b      	cmp	r3, #43	; 0x2b
    376a:	f000 808b 	beq.w	3884 <cbvprintf+0x168>
    376e:	d879      	bhi.n	3864 <cbvprintf+0x148>
    3770:	2b20      	cmp	r3, #32
    3772:	f000 808c 	beq.w	388e <cbvprintf+0x172>
    3776:	2b23      	cmp	r3, #35	; 0x23
    3778:	f000 808e 	beq.w	3898 <cbvprintf+0x17c>
	if (conv->flag_zero && conv->flag_dash) {
    377c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    3780:	f003 0244 	and.w	r2, r3, #68	; 0x44
    3784:	2a44      	cmp	r2, #68	; 0x44
    3786:	d103      	bne.n	3790 <cbvprintf+0x74>
		conv->flag_zero = false;
    3788:	f36f 1386 	bfc	r3, #6, #1
    378c:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
    3790:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    3794:	9605      	str	r6, [sp, #20]
    3796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    379a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
    379e:	7833      	ldrb	r3, [r6, #0]
    37a0:	2b2a      	cmp	r3, #42	; 0x2a
    37a2:	d17e      	bne.n	38a2 <cbvprintf+0x186>
		conv->width_star = true;
    37a4:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    37a8:	f043 0301 	orr.w	r3, r3, #1
    37ac:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
    37b0:	1c73      	adds	r3, r6, #1
	sp = extract_prec(conv, sp);
    37b2:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
    37b4:	781a      	ldrb	r2, [r3, #0]
    37b6:	2a2e      	cmp	r2, #46	; 0x2e
    37b8:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    37bc:	bf0c      	ite	eq
    37be:	2101      	moveq	r1, #1
    37c0:	2100      	movne	r1, #0
    37c2:	f361 0241 	bfi	r2, r1, #1, #1
    37c6:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
    37ca:	d10b      	bne.n	37e4 <cbvprintf+0xc8>
	++sp;
    37cc:	1c5a      	adds	r2, r3, #1
    37ce:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
    37d0:	785a      	ldrb	r2, [r3, #1]
    37d2:	2a2a      	cmp	r2, #42	; 0x2a
    37d4:	d17b      	bne.n	38ce <cbvprintf+0x1b2>
		conv->prec_star = true;
    37d6:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    37da:	f042 0204 	orr.w	r2, r2, #4
    37de:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
    37e2:	3302      	adds	r3, #2
	switch (*sp) {
    37e4:	4619      	mov	r1, r3
    37e6:	f811 0b01 	ldrb.w	r0, [r1], #1
    37ea:	286c      	cmp	r0, #108	; 0x6c
    37ec:	f000 80b6 	beq.w	395c <cbvprintf+0x240>
    37f0:	d87d      	bhi.n	38ee <cbvprintf+0x1d2>
    37f2:	2868      	cmp	r0, #104	; 0x68
    37f4:	f000 8084 	beq.w	3900 <cbvprintf+0x1e4>
    37f8:	286a      	cmp	r0, #106	; 0x6a
    37fa:	f000 80b9 	beq.w	3970 <cbvprintf+0x254>
    37fe:	284c      	cmp	r0, #76	; 0x4c
    3800:	f000 80bd 	beq.w	397e <cbvprintf+0x262>
		conv->length_mod = LENGTH_NONE;
    3804:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    3808:	f36f 02c6 	bfc	r2, #3, #4
    380c:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		break;
    3810:	4619      	mov	r1, r3
    3812:	e080      	b.n	3916 <cbvprintf+0x1fa>
		conv->specifier = *sp++;
    3814:	f109 0202 	add.w	r2, r9, #2
    3818:	9202      	str	r2, [sp, #8]
    381a:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
    381e:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    3822:	07d9      	lsls	r1, r3, #31
    3824:	f140 8149 	bpl.w	3aba <cbvprintf+0x39e>
			width = va_arg(ap, int);
    3828:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    382c:	f1b8 0f00 	cmp.w	r8, #0
    3830:	da07      	bge.n	3842 <cbvprintf+0x126>
				conv->flag_dash = true;
    3832:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    3836:	f042 0204 	orr.w	r2, r2, #4
    383a:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
    383e:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
    3842:	075a      	lsls	r2, r3, #29
    3844:	f140 8142 	bpl.w	3acc <cbvprintf+0x3b0>
			int arg = va_arg(ap, int);
    3848:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
    384c:	2f00      	cmp	r7, #0
    384e:	f280 8141 	bge.w	3ad4 <cbvprintf+0x3b8>
				conv->prec_present = false;
    3852:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    3856:	f36f 0341 	bfc	r3, #1, #1
    385a:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
    385e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    3862:	e137      	b.n	3ad4 <cbvprintf+0x3b8>
		switch (*sp) {
    3864:	2b2d      	cmp	r3, #45	; 0x2d
    3866:	d006      	beq.n	3876 <cbvprintf+0x15a>
    3868:	2b30      	cmp	r3, #48	; 0x30
    386a:	d187      	bne.n	377c <cbvprintf+0x60>
			conv->flag_zero = true;
    386c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    3870:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3874:	e003      	b.n	387e <cbvprintf+0x162>
			conv->flag_dash = true;
    3876:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    387a:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
    387e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			break;
    3882:	e76e      	b.n	3762 <cbvprintf+0x46>
			conv->flag_plus = true;
    3884:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    3888:	f043 0308 	orr.w	r3, r3, #8
    388c:	e7f7      	b.n	387e <cbvprintf+0x162>
			conv->flag_space = true;
    388e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    3892:	f043 0310 	orr.w	r3, r3, #16
    3896:	e7f2      	b.n	387e <cbvprintf+0x162>
			conv->flag_hash = true;
    3898:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    389c:	f043 0320 	orr.w	r3, r3, #32
    38a0:	e7ed      	b.n	387e <cbvprintf+0x162>
	size_t width = extract_decimal(&sp);
    38a2:	a805      	add	r0, sp, #20
    38a4:	f7ff fed4 	bl	3650 <extract_decimal>
	if (sp != wp) {
    38a8:	9b05      	ldr	r3, [sp, #20]
    38aa:	42b3      	cmp	r3, r6
    38ac:	d081      	beq.n	37b2 <cbvprintf+0x96>
		conv->unsupported |= ((conv->width_value < 0)
    38ae:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
    38b2:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
    38b4:	f3c1 0240 	ubfx	r2, r1, #1, #1
    38b8:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    38bc:	0052      	lsls	r2, r2, #1
    38be:	f062 027f 	orn	r2, r2, #127	; 0x7f
    38c2:	f001 017d 	and.w	r1, r1, #125	; 0x7d
    38c6:	430a      	orrs	r2, r1
    38c8:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
    38cc:	e771      	b.n	37b2 <cbvprintf+0x96>
	size_t prec = extract_decimal(&sp);
    38ce:	a805      	add	r0, sp, #20
    38d0:	f7ff febe 	bl	3650 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    38d4:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
    38d8:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
    38da:	f3c3 0240 	ubfx	r2, r3, #1, #1
    38de:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
    38e2:	f360 0341 	bfi	r3, r0, #1, #1
    38e6:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
    38ea:	9b05      	ldr	r3, [sp, #20]
    38ec:	e77a      	b.n	37e4 <cbvprintf+0xc8>
	switch (*sp) {
    38ee:	2874      	cmp	r0, #116	; 0x74
    38f0:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    38f4:	d040      	beq.n	3978 <cbvprintf+0x25c>
    38f6:	287a      	cmp	r0, #122	; 0x7a
    38f8:	d184      	bne.n	3804 <cbvprintf+0xe8>
		conv->length_mod = LENGTH_Z;
    38fa:	4613      	mov	r3, r2
    38fc:	2206      	movs	r2, #6
    38fe:	e028      	b.n	3952 <cbvprintf+0x236>
		if (*++sp == 'h') {
    3900:	785a      	ldrb	r2, [r3, #1]
    3902:	2a68      	cmp	r2, #104	; 0x68
    3904:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    3908:	d121      	bne.n	394e <cbvprintf+0x232>
			conv->length_mod = LENGTH_HH;
    390a:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    390c:	f361 02c6 	bfi	r2, r1, #3, #4
    3910:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
    3914:	1c99      	adds	r1, r3, #2
	conv->specifier = *sp++;
    3916:	460b      	mov	r3, r1
    3918:	f813 2b01 	ldrb.w	r2, [r3], #1
    391c:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
    391e:	2a78      	cmp	r2, #120	; 0x78
    3920:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
	conv->specifier = *sp++;
    3924:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
    3928:	f200 80bf 	bhi.w	3aaa <cbvprintf+0x38e>
    392c:	2a57      	cmp	r2, #87	; 0x57
    392e:	d833      	bhi.n	3998 <cbvprintf+0x27c>
    3930:	2a41      	cmp	r2, #65	; 0x41
    3932:	d003      	beq.n	393c <cbvprintf+0x220>
    3934:	3a45      	subs	r2, #69	; 0x45
    3936:	2a02      	cmp	r2, #2
    3938:	f200 80b7 	bhi.w	3aaa <cbvprintf+0x38e>
		conv->specifier_cat = SPECIFIER_FP;
    393c:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    3940:	2204      	movs	r2, #4
    3942:	f362 0302 	bfi	r3, r2, #0, #3
    3946:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			unsupported = true;
    394a:	2301      	movs	r3, #1
			break;
    394c:	e084      	b.n	3a58 <cbvprintf+0x33c>
			conv->length_mod = LENGTH_H;
    394e:	4613      	mov	r3, r2
    3950:	2202      	movs	r2, #2
			conv->length_mod = LENGTH_L;
    3952:	f362 03c6 	bfi	r3, r2, #3, #4
    3956:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    395a:	e7dc      	b.n	3916 <cbvprintf+0x1fa>
		if (*++sp == 'l') {
    395c:	785a      	ldrb	r2, [r3, #1]
    395e:	2a6c      	cmp	r2, #108	; 0x6c
    3960:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    3964:	d101      	bne.n	396a <cbvprintf+0x24e>
			conv->length_mod = LENGTH_LL;
    3966:	2104      	movs	r1, #4
    3968:	e7d0      	b.n	390c <cbvprintf+0x1f0>
			conv->length_mod = LENGTH_L;
    396a:	4613      	mov	r3, r2
    396c:	2203      	movs	r2, #3
    396e:	e7f0      	b.n	3952 <cbvprintf+0x236>
		conv->length_mod = LENGTH_J;
    3970:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    3974:	2205      	movs	r2, #5
    3976:	e7ec      	b.n	3952 <cbvprintf+0x236>
		conv->length_mod = LENGTH_T;
    3978:	4613      	mov	r3, r2
    397a:	2207      	movs	r2, #7
    397c:	e7e9      	b.n	3952 <cbvprintf+0x236>
		conv->unsupported = true;
    397e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    3982:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    3986:	f023 0302 	bic.w	r3, r3, #2
    398a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    398e:	f043 0302 	orr.w	r3, r3, #2
    3992:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
    3996:	e7be      	b.n	3916 <cbvprintf+0x1fa>
    3998:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    399c:	2920      	cmp	r1, #32
    399e:	f200 8084 	bhi.w	3aaa <cbvprintf+0x38e>
    39a2:	a001      	add	r0, pc, #4	; (adr r0, 39a8 <cbvprintf+0x28c>)
    39a4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    39a8:	00003a6d 	.word	0x00003a6d
    39ac:	00003aab 	.word	0x00003aab
    39b0:	00003aab 	.word	0x00003aab
    39b4:	00003aab 	.word	0x00003aab
    39b8:	00003aab 	.word	0x00003aab
    39bc:	00003aab 	.word	0x00003aab
    39c0:	00003aab 	.word	0x00003aab
    39c4:	00003aab 	.word	0x00003aab
    39c8:	00003aab 	.word	0x00003aab
    39cc:	0000393d 	.word	0x0000393d
    39d0:	00003aab 	.word	0x00003aab
    39d4:	00003a6d 	.word	0x00003a6d
    39d8:	00003a2d 	.word	0x00003a2d
    39dc:	0000393d 	.word	0x0000393d
    39e0:	0000393d 	.word	0x0000393d
    39e4:	0000393d 	.word	0x0000393d
    39e8:	00003aab 	.word	0x00003aab
    39ec:	00003a2d 	.word	0x00003a2d
    39f0:	00003aab 	.word	0x00003aab
    39f4:	00003aab 	.word	0x00003aab
    39f8:	00003aab 	.word	0x00003aab
    39fc:	00003aab 	.word	0x00003aab
    3a00:	00003a75 	.word	0x00003a75
    3a04:	00003a6d 	.word	0x00003a6d
    3a08:	00003a91 	.word	0x00003a91
    3a0c:	00003aab 	.word	0x00003aab
    3a10:	00003aab 	.word	0x00003aab
    3a14:	00003a91 	.word	0x00003a91
    3a18:	00003aab 	.word	0x00003aab
    3a1c:	00003a6d 	.word	0x00003a6d
    3a20:	00003aab 	.word	0x00003aab
    3a24:	00003aab 	.word	0x00003aab
    3a28:	00003a6d 	.word	0x00003a6d
		conv->specifier_cat = SPECIFIER_SINT;
    3a2c:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
    3a30:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    3a32:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    3a36:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    3a3a:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    3a3c:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
			conv->invalid = true;
    3a40:	bf02      	ittt	eq
    3a42:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
    3a46:	f041 0101 	orreq.w	r1, r1, #1
    3a4a:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
    3a4e:	2a63      	cmp	r2, #99	; 0x63
    3a50:	d131      	bne.n	3ab6 <cbvprintf+0x39a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    3a52:	3b00      	subs	r3, #0
    3a54:	bf18      	it	ne
    3a56:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    3a58:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    3a5c:	f3c2 0140 	ubfx	r1, r2, #1, #1
    3a60:	430b      	orrs	r3, r1
    3a62:	f363 0241 	bfi	r2, r3, #1, #1
    3a66:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    3a6a:	e6d8      	b.n	381e <cbvprintf+0x102>
		conv->specifier_cat = SPECIFIER_UINT;
    3a6c:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
    3a70:	2002      	movs	r0, #2
    3a72:	e7de      	b.n	3a32 <cbvprintf+0x316>
		conv->specifier_cat = SPECIFIER_PTR;
    3a74:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    3a78:	f003 0378 	and.w	r3, r3, #120	; 0x78
    3a7c:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    3a80:	2103      	movs	r1, #3
    3a82:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    3a86:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    3a88:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    3a8c:	4143      	adcs	r3, r0
    3a8e:	e7e3      	b.n	3a58 <cbvprintf+0x33c>
		conv->specifier_cat = SPECIFIER_PTR;
    3a90:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    3a94:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    3a96:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    3a9a:	f361 0202 	bfi	r2, r1, #0, #3
    3a9e:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
    3aa2:	bf14      	ite	ne
    3aa4:	2301      	movne	r3, #1
    3aa6:	2300      	moveq	r3, #0
    3aa8:	e7d6      	b.n	3a58 <cbvprintf+0x33c>
		conv->invalid = true;
    3aaa:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    3aae:	f043 0301 	orr.w	r3, r3, #1
    3ab2:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	bool unsupported = false;
    3ab6:	2300      	movs	r3, #0
    3ab8:	e7ce      	b.n	3a58 <cbvprintf+0x33c>
		} else if (conv->width_present) {
    3aba:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
    3abe:	2a00      	cmp	r2, #0
			width = conv->width_value;
    3ac0:	bfb4      	ite	lt
    3ac2:	f8dd 803c 	ldrlt.w	r8, [sp, #60]	; 0x3c
		int width = -1;
    3ac6:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
    3aca:	e6ba      	b.n	3842 <cbvprintf+0x126>
		} else if (conv->prec_present) {
    3acc:	079f      	lsls	r7, r3, #30
    3ace:	f57f aec6 	bpl.w	385e <cbvprintf+0x142>
			precision = conv->prec_value;
    3ad2:	9f10      	ldr	r7, [sp, #64]	; 0x40
			= (enum length_mod_enum)conv->length_mod;
    3ad4:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		conv->pad0_value = 0;
    3ad8:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    3ada:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
			= (enum specifier_cat_enum)conv->specifier_cat;
    3ade:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		enum specifier_cat_enum specifier_cat
    3ae2:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    3ae6:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    3ae8:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    3aec:	d137      	bne.n	3b5e <cbvprintf+0x442>
			switch (length_mod) {
    3aee:	1ecb      	subs	r3, r1, #3
    3af0:	2b04      	cmp	r3, #4
    3af2:	d821      	bhi.n	3b38 <cbvprintf+0x41c>
    3af4:	e8df f003 	tbb	[pc, r3]
    3af8:	20070703 	.word	0x20070703
    3afc:	20          	.byte	0x20
    3afd:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    3afe:	f854 2b04 	ldr.w	r2, [r4], #4
				value->sint = (short)value->sint;
    3b02:	17d3      	asrs	r3, r2, #31
    3b04:	e004      	b.n	3b10 <cbvprintf+0x3f4>
					(sint_value_type)va_arg(ap, intmax_t);
    3b06:	3407      	adds	r4, #7
    3b08:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    3b0c:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->sint = (short)value->sint;
    3b10:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
    3b14:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    3b18:	f013 0603 	ands.w	r6, r3, #3
    3b1c:	d055      	beq.n	3bca <cbvprintf+0x4ae>
			OUTS(sp, fp);
    3b1e:	9b02      	ldr	r3, [sp, #8]
    3b20:	464a      	mov	r2, r9
    3b22:	4659      	mov	r1, fp
    3b24:	4650      	mov	r0, sl
    3b26:	f021 f911 	bl	24d4c <outs>
    3b2a:	2800      	cmp	r0, #0
    3b2c:	f2c0 813e 	blt.w	3dac <cbvprintf+0x690>
    3b30:	4405      	add	r5, r0
			OUTS(bps, bpe);
    3b32:	f8dd 9008 	ldr.w	r9, [sp, #8]
    3b36:	e5f9      	b.n	372c <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    3b38:	f854 2b04 	ldr.w	r2, [r4], #4
			if (length_mod == LENGTH_HH) {
    3b3c:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    3b3e:	ea4f 73e2 	mov.w	r3, r2, asr #31
    3b42:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    3b46:	d105      	bne.n	3b54 <cbvprintf+0x438>
				value->uint = (unsigned char)value->uint;
    3b48:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
    3b4c:	930c      	str	r3, [sp, #48]	; 0x30
    3b4e:	2300      	movs	r3, #0
    3b50:	930d      	str	r3, [sp, #52]	; 0x34
    3b52:	e7df      	b.n	3b14 <cbvprintf+0x3f8>
			} else if (length_mod == LENGTH_H) {
    3b54:	2902      	cmp	r1, #2
    3b56:	d1dd      	bne.n	3b14 <cbvprintf+0x3f8>
				value->sint = (short)value->sint;
    3b58:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
    3b5c:	e7d1      	b.n	3b02 <cbvprintf+0x3e6>
		} else if (specifier_cat == SPECIFIER_UINT) {
    3b5e:	2b02      	cmp	r3, #2
    3b60:	d123      	bne.n	3baa <cbvprintf+0x48e>
			switch (length_mod) {
    3b62:	1ecb      	subs	r3, r1, #3
    3b64:	2b04      	cmp	r3, #4
    3b66:	d813      	bhi.n	3b90 <cbvprintf+0x474>
    3b68:	e8df f003 	tbb	[pc, r3]
    3b6c:	120a0a03 	.word	0x120a0a03
    3b70:	12          	.byte	0x12
    3b71:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    3b72:	6822      	ldr	r2, [r4, #0]
    3b74:	920c      	str	r2, [sp, #48]	; 0x30
    3b76:	2300      	movs	r3, #0
    3b78:	1d20      	adds	r0, r4, #4
    3b7a:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
    3b7c:	4604      	mov	r4, r0
    3b7e:	e7c9      	b.n	3b14 <cbvprintf+0x3f8>
					(uint_value_type)va_arg(ap,
    3b80:	3407      	adds	r4, #7
    3b82:	f024 0007 	bic.w	r0, r4, #7
				value->uint =
    3b86:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    3b8a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
    3b8e:	e7f5      	b.n	3b7c <cbvprintf+0x460>
					(uint_value_type)va_arg(ap, size_t);
    3b90:	f854 3b04 	ldr.w	r3, [r4], #4
    3b94:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    3b96:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    3b98:	f04f 0300 	mov.w	r3, #0
    3b9c:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
    3b9e:	d0d3      	beq.n	3b48 <cbvprintf+0x42c>
			} else if (length_mod == LENGTH_H) {
    3ba0:	2902      	cmp	r1, #2
    3ba2:	d1b7      	bne.n	3b14 <cbvprintf+0x3f8>
				value->uint = (unsigned short)value->uint;
    3ba4:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    3ba8:	e7d0      	b.n	3b4c <cbvprintf+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
    3baa:	2b04      	cmp	r3, #4
    3bac:	d107      	bne.n	3bbe <cbvprintf+0x4a2>
			if (length_mod == LENGTH_UPPER_L) {
    3bae:	3407      	adds	r4, #7
    3bb0:	f024 0407 	bic.w	r4, r4, #7
    3bb4:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->ldbl = va_arg(ap, long double);
    3bb8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    3bbc:	e7aa      	b.n	3b14 <cbvprintf+0x3f8>
		} else if (specifier_cat == SPECIFIER_PTR) {
    3bbe:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    3bc0:	bf04      	itt	eq
    3bc2:	f854 3b04 	ldreq.w	r3, [r4], #4
    3bc6:	930c      	streq	r3, [sp, #48]	; 0x30
    3bc8:	e7a4      	b.n	3b14 <cbvprintf+0x3f8>
		switch (conv->specifier) {
    3bca:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    3bce:	2878      	cmp	r0, #120	; 0x78
    3bd0:	d8af      	bhi.n	3b32 <cbvprintf+0x416>
    3bd2:	2862      	cmp	r0, #98	; 0x62
    3bd4:	d820      	bhi.n	3c18 <cbvprintf+0x4fc>
    3bd6:	2825      	cmp	r0, #37	; 0x25
    3bd8:	f43f adb2 	beq.w	3740 <cbvprintf+0x24>
    3bdc:	2858      	cmp	r0, #88	; 0x58
    3bde:	d1a8      	bne.n	3b32 <cbvprintf+0x416>
			bps = encode_uint(value->uint, conv, buf, bpe);
    3be0:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
    3be4:	9300      	str	r3, [sp, #0]
    3be6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    3bea:	ab06      	add	r3, sp, #24
    3bec:	aa0e      	add	r2, sp, #56	; 0x38
    3bee:	f7ff fd45 	bl	367c <encode_uint>
    3bf2:	4681      	mov	r9, r0
			if (precision >= 0) {
    3bf4:	2f00      	cmp	r7, #0
    3bf6:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
    3bfa:	db0b      	blt.n	3c14 <cbvprintf+0x4f8>
				conv->flag_zero = false;
    3bfc:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
				size_t len = bpe - bps;
    3c00:	eba0 0309 	sub.w	r3, r0, r9
				conv->flag_zero = false;
    3c04:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    3c08:	429f      	cmp	r7, r3
				conv->flag_zero = false;
    3c0a:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
    3c0e:	d901      	bls.n	3c14 <cbvprintf+0x4f8>
					conv->pad0_value = precision - (int)len;
    3c10:	1aff      	subs	r7, r7, r3
    3c12:	970f      	str	r7, [sp, #60]	; 0x3c
		const char *bpe = buf + sizeof(buf);
    3c14:	4607      	mov	r7, r0
    3c16:	e03c      	b.n	3c92 <cbvprintf+0x576>
    3c18:	3863      	subs	r0, #99	; 0x63
    3c1a:	2815      	cmp	r0, #21
    3c1c:	d889      	bhi.n	3b32 <cbvprintf+0x416>
    3c1e:	a201      	add	r2, pc, #4	; (adr r2, 3c24 <cbvprintf+0x508>)
    3c20:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    3c24:	00003ca3 	.word	0x00003ca3
    3c28:	00003d05 	.word	0x00003d05
    3c2c:	00003b33 	.word	0x00003b33
    3c30:	00003b33 	.word	0x00003b33
    3c34:	00003b33 	.word	0x00003b33
    3c38:	00003b33 	.word	0x00003b33
    3c3c:	00003d05 	.word	0x00003d05
    3c40:	00003b33 	.word	0x00003b33
    3c44:	00003b33 	.word	0x00003b33
    3c48:	00003b33 	.word	0x00003b33
    3c4c:	00003b33 	.word	0x00003b33
    3c50:	00003d63 	.word	0x00003d63
    3c54:	00003d31 	.word	0x00003d31
    3c58:	00003d35 	.word	0x00003d35
    3c5c:	00003b33 	.word	0x00003b33
    3c60:	00003b33 	.word	0x00003b33
    3c64:	00003c7d 	.word	0x00003c7d
    3c68:	00003b33 	.word	0x00003b33
    3c6c:	00003d31 	.word	0x00003d31
    3c70:	00003b33 	.word	0x00003b33
    3c74:	00003b33 	.word	0x00003b33
    3c78:	00003d31 	.word	0x00003d31
			if (precision >= 0) {
    3c7c:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
    3c7e:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			if (precision >= 0) {
    3c82:	db0a      	blt.n	3c9a <cbvprintf+0x57e>
				len = strnlen(bps, precision);
    3c84:	4639      	mov	r1, r7
    3c86:	4648      	mov	r0, r9
    3c88:	f026 fbdb 	bl	2a442 <strnlen>
			bpe = bps + len;
    3c8c:	eb09 0700 	add.w	r7, r9, r0
		char sign = 0;
    3c90:	2600      	movs	r6, #0
		if (bps == NULL) {
    3c92:	f1b9 0f00 	cmp.w	r9, #0
    3c96:	d10c      	bne.n	3cb2 <cbvprintf+0x596>
    3c98:	e74b      	b.n	3b32 <cbvprintf+0x416>
				len = strlen(bps);
    3c9a:	4648      	mov	r0, r9
    3c9c:	f7fd f8d4 	bl	e48 <strlen>
    3ca0:	e7f4      	b.n	3c8c <cbvprintf+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    3ca2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3ca4:	f88d 3018 	strb.w	r3, [sp, #24]
			break;
    3ca8:	2600      	movs	r6, #0
			bpe = buf + 1;
    3caa:	f10d 0719 	add.w	r7, sp, #25
			bps = buf;
    3cae:	f10d 0918 	add.w	r9, sp, #24
		size_t nj_len = (bpe - bps);
    3cb2:	eba7 0309 	sub.w	r3, r7, r9
		if (sign != 0) {
    3cb6:	b106      	cbz	r6, 3cba <cbvprintf+0x59e>
			nj_len += 1U;
    3cb8:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    3cba:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    3cbe:	06d0      	lsls	r0, r2, #27
    3cc0:	d569      	bpl.n	3d96 <cbvprintf+0x67a>
			nj_len += 2U;
    3cc2:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    3cc4:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    3cc6:	990f      	ldr	r1, [sp, #60]	; 0x3c
			nj_len += conv->pad0_pre_exp;
    3cc8:	bf48      	it	mi
    3cca:	9a10      	ldrmi	r2, [sp, #64]	; 0x40
		nj_len += conv->pad0_value;
    3ccc:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    3cce:	bf48      	it	mi
    3cd0:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    3cd2:	f1b8 0f00 	cmp.w	r8, #0
    3cd6:	dd76      	ble.n	3dc6 <cbvprintf+0x6aa>
			if (!conv->flag_dash) {
    3cd8:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
			width -= (int)nj_len;
    3cdc:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
    3ce0:	f3c2 0380 	ubfx	r3, r2, #2, #1
    3ce4:	9303      	str	r3, [sp, #12]
    3ce6:	0753      	lsls	r3, r2, #29
    3ce8:	d46d      	bmi.n	3dc6 <cbvprintf+0x6aa>
				if (conv->flag_zero) {
    3cea:	0650      	lsls	r0, r2, #25
    3cec:	d561      	bpl.n	3db2 <cbvprintf+0x696>
					if (sign != 0) {
    3cee:	b13e      	cbz	r6, 3d00 <cbvprintf+0x5e4>
						OUTC(sign);
    3cf0:	4659      	mov	r1, fp
    3cf2:	4630      	mov	r0, r6
    3cf4:	47d0      	blx	sl
    3cf6:	2800      	cmp	r0, #0
    3cf8:	db58      	blt.n	3dac <cbvprintf+0x690>
						sign = 0;
    3cfa:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    3cfc:	3501      	adds	r5, #1
						sign = 0;
    3cfe:	461e      	mov	r6, r3
					pad = '0';
    3d00:	2330      	movs	r3, #48	; 0x30
    3d02:	e057      	b.n	3db4 <cbvprintf+0x698>
			if (conv->flag_plus) {
    3d04:	071e      	lsls	r6, r3, #28
    3d06:	d411      	bmi.n	3d2c <cbvprintf+0x610>
				sign = ' ';
    3d08:	f013 0610 	ands.w	r6, r3, #16
    3d0c:	bf18      	it	ne
    3d0e:	2620      	movne	r6, #32
			sint = value->sint;
    3d10:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
    3d14:	2a00      	cmp	r2, #0
    3d16:	f173 0100 	sbcs.w	r1, r3, #0
    3d1a:	f6bf af61 	bge.w	3be0 <cbvprintf+0x4c4>
				value->uint = (uint_value_type)-sint;
    3d1e:	4252      	negs	r2, r2
    3d20:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    3d24:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
    3d28:	262d      	movs	r6, #45	; 0x2d
    3d2a:	e759      	b.n	3be0 <cbvprintf+0x4c4>
				sign = '+';
    3d2c:	262b      	movs	r6, #43	; 0x2b
    3d2e:	e7ef      	b.n	3d10 <cbvprintf+0x5f4>
		switch (conv->specifier) {
    3d30:	2600      	movs	r6, #0
    3d32:	e755      	b.n	3be0 <cbvprintf+0x4c4>
			if (value->ptr != NULL) {
    3d34:	980c      	ldr	r0, [sp, #48]	; 0x30
    3d36:	b348      	cbz	r0, 3d8c <cbvprintf+0x670>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    3d38:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
    3d3c:	9300      	str	r3, [sp, #0]
    3d3e:	aa0e      	add	r2, sp, #56	; 0x38
    3d40:	ab06      	add	r3, sp, #24
    3d42:	2100      	movs	r1, #0
    3d44:	f7ff fc9a 	bl	367c <encode_uint>
				conv->altform_0c = true;
    3d48:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    3d4c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    3d50:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    3d54:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    3d58:	4681      	mov	r9, r0
				conv->altform_0c = true;
    3d5a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
    3d5e:	2600      	movs	r6, #0
				goto prec_int_pad0;
    3d60:	e748      	b.n	3bf4 <cbvprintf+0x4d8>
				store_count(conv, value->ptr, count);
    3d62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
    3d64:	2907      	cmp	r1, #7
    3d66:	f63f aee4 	bhi.w	3b32 <cbvprintf+0x416>
    3d6a:	e8df f001 	tbb	[pc, r1]
    3d6e:	040d      	.short	0x040d
    3d70:	08080d06 	.word	0x08080d06
    3d74:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
    3d76:	701d      	strb	r5, [r3, #0]
		break;
    3d78:	e6db      	b.n	3b32 <cbvprintf+0x416>
		*(short *)dp = (short)count;
    3d7a:	801d      	strh	r5, [r3, #0]
		break;
    3d7c:	e6d9      	b.n	3b32 <cbvprintf+0x416>
		*(intmax_t *)dp = (intmax_t)count;
    3d7e:	4628      	mov	r0, r5
    3d80:	17e9      	asrs	r1, r5, #31
    3d82:	e9c3 0100 	strd	r0, r1, [r3]
		break;
    3d86:	e6d4      	b.n	3b32 <cbvprintf+0x416>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    3d88:	601d      	str	r5, [r3, #0]
		break;
    3d8a:	e6d2      	b.n	3b32 <cbvprintf+0x416>
			bpe = bps + 5;
    3d8c:	4f2e      	ldr	r7, [pc, #184]	; (3e48 <cbvprintf+0x72c>)
    3d8e:	4606      	mov	r6, r0
			bps = "(nil)";
    3d90:	f1a7 0905 	sub.w	r9, r7, #5
    3d94:	e78d      	b.n	3cb2 <cbvprintf+0x596>
		} else if (conv->altform_0) {
    3d96:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    3d98:	bf48      	it	mi
    3d9a:	3301      	addmi	r3, #1
    3d9c:	e792      	b.n	3cc4 <cbvprintf+0x5a8>
					OUTC(pad);
    3d9e:	4618      	mov	r0, r3
    3da0:	4659      	mov	r1, fp
    3da2:	9303      	str	r3, [sp, #12]
    3da4:	47d0      	blx	sl
    3da6:	2800      	cmp	r0, #0
    3da8:	9b03      	ldr	r3, [sp, #12]
    3daa:	da04      	bge.n	3db6 <cbvprintf+0x69a>
#undef OUTS
#undef OUTC
}
    3dac:	b013      	add	sp, #76	; 0x4c
    3dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    3db2:	2320      	movs	r3, #32
    3db4:	4445      	add	r5, r8
    3db6:	4642      	mov	r2, r8
				while (width-- > 0) {
    3db8:	2a00      	cmp	r2, #0
    3dba:	eba5 0108 	sub.w	r1, r5, r8
    3dbe:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    3dc2:	dcec      	bgt.n	3d9e <cbvprintf+0x682>
    3dc4:	460d      	mov	r5, r1
		if (sign != 0) {
    3dc6:	b12e      	cbz	r6, 3dd4 <cbvprintf+0x6b8>
			OUTC(sign);
    3dc8:	4659      	mov	r1, fp
    3dca:	4630      	mov	r0, r6
    3dcc:	47d0      	blx	sl
    3dce:	2800      	cmp	r0, #0
    3dd0:	dbec      	blt.n	3dac <cbvprintf+0x690>
    3dd2:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    3dd4:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    3dd8:	06d9      	lsls	r1, r3, #27
    3dda:	d401      	bmi.n	3de0 <cbvprintf+0x6c4>
    3ddc:	071a      	lsls	r2, r3, #28
    3dde:	d505      	bpl.n	3dec <cbvprintf+0x6d0>
				OUTC('0');
    3de0:	4659      	mov	r1, fp
    3de2:	2030      	movs	r0, #48	; 0x30
    3de4:	47d0      	blx	sl
    3de6:	2800      	cmp	r0, #0
    3de8:	dbe0      	blt.n	3dac <cbvprintf+0x690>
    3dea:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    3dec:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    3df0:	06db      	lsls	r3, r3, #27
    3df2:	d506      	bpl.n	3e02 <cbvprintf+0x6e6>
				OUTC(conv->specifier);
    3df4:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    3df8:	4659      	mov	r1, fp
    3dfa:	47d0      	blx	sl
    3dfc:	2800      	cmp	r0, #0
    3dfe:	dbd5      	blt.n	3dac <cbvprintf+0x690>
    3e00:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    3e02:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    3e04:	442e      	add	r6, r5
    3e06:	1b73      	subs	r3, r6, r5
    3e08:	2b00      	cmp	r3, #0
    3e0a:	dc15      	bgt.n	3e38 <cbvprintf+0x71c>
			OUTS(bps, bpe);
    3e0c:	463b      	mov	r3, r7
    3e0e:	464a      	mov	r2, r9
    3e10:	4659      	mov	r1, fp
    3e12:	4650      	mov	r0, sl
    3e14:	f020 ff9a 	bl	24d4c <outs>
    3e18:	2800      	cmp	r0, #0
    3e1a:	dbc7      	blt.n	3dac <cbvprintf+0x690>
    3e1c:	4405      	add	r5, r0
		while (width > 0) {
    3e1e:	44a8      	add	r8, r5
    3e20:	eba8 0305 	sub.w	r3, r8, r5
    3e24:	2b00      	cmp	r3, #0
    3e26:	f77f ae84 	ble.w	3b32 <cbvprintf+0x416>
			OUTC(' ');
    3e2a:	4659      	mov	r1, fp
    3e2c:	2020      	movs	r0, #32
    3e2e:	47d0      	blx	sl
    3e30:	2800      	cmp	r0, #0
    3e32:	dbbb      	blt.n	3dac <cbvprintf+0x690>
    3e34:	3501      	adds	r5, #1
			--width;
    3e36:	e7f3      	b.n	3e20 <cbvprintf+0x704>
				OUTC('0');
    3e38:	4659      	mov	r1, fp
    3e3a:	2030      	movs	r0, #48	; 0x30
    3e3c:	47d0      	blx	sl
    3e3e:	2800      	cmp	r0, #0
    3e40:	dbb4      	blt.n	3dac <cbvprintf+0x690>
    3e42:	3501      	adds	r5, #1
    3e44:	e7df      	b.n	3e06 <cbvprintf+0x6ea>
    3e46:	bf00      	nop
    3e48:	0002c902 	.word	0x0002c902

00003e4c <check_sys_mutex_addr>:

	return obj->data.mutex;
}

static bool check_sys_mutex_addr(struct sys_mutex *addr)
{
    3e4c:	b570      	push	{r4, r5, r6, lr}
	/* sys_mutex memory is never touched, just used to lookup the
	 * underlying k_mutex, but we don't want threads using mutexes
	 * that are outside their memory domain
	 */
	return Z_SYSCALL_MEMORY_WRITE(addr, sizeof(struct sys_mutex));
    3e4e:	2201      	movs	r2, #1
{
    3e50:	b086      	sub	sp, #24
	return Z_SYSCALL_MEMORY_WRITE(addr, sizeof(struct sys_mutex));
    3e52:	2104      	movs	r1, #4
{
    3e54:	4605      	mov	r5, r0
	return Z_SYSCALL_MEMORY_WRITE(addr, sizeof(struct sys_mutex));
    3e56:	f022 fe25 	bl	26aa4 <arch_buffer_validate>
    3e5a:	2800      	cmp	r0, #0
    3e5c:	bf14      	ite	ne
    3e5e:	2601      	movne	r6, #1
    3e60:	2600      	moveq	r6, #0
    3e62:	d013      	beq.n	3e8c <check_sys_mutex_addr+0x40>
    3e64:	f020 ff88 	bl	24d78 <arch_is_user_context>
    3e68:	4c0f      	ldr	r4, [pc, #60]	; (3ea8 <check_sys_mutex_addr+0x5c>)
    3e6a:	4b10      	ldr	r3, [pc, #64]	; (3eac <check_sys_mutex_addr+0x60>)
    3e6c:	1ae4      	subs	r4, r4, r3
    3e6e:	08e4      	lsrs	r4, r4, #3
    3e70:	01a4      	lsls	r4, r4, #6
    3e72:	4b0f      	ldr	r3, [pc, #60]	; (3eb0 <check_sys_mutex_addr+0x64>)
    3e74:	f044 0401 	orr.w	r4, r4, #1
    3e78:	2204      	movs	r2, #4
    3e7a:	b150      	cbz	r0, 3e92 <check_sys_mutex_addr+0x46>
    3e7c:	e9cd 2300 	strd	r2, r3, [sp]
    3e80:	490c      	ldr	r1, [pc, #48]	; (3eb4 <check_sys_mutex_addr+0x68>)
    3e82:	4a0d      	ldr	r2, [pc, #52]	; (3eb8 <check_sys_mutex_addr+0x6c>)
    3e84:	462b      	mov	r3, r5
    3e86:	4620      	mov	r0, r4
    3e88:	f021 f805 	bl	24e96 <log_from_user>
}
    3e8c:	4630      	mov	r0, r6
    3e8e:	b006      	add	sp, #24
    3e90:	bd70      	pop	{r4, r5, r6, pc}
	return Z_SYSCALL_MEMORY_WRITE(addr, sizeof(struct sys_mutex));
    3e92:	4909      	ldr	r1, [pc, #36]	; (3eb8 <check_sys_mutex_addr+0x6c>)
    3e94:	4807      	ldr	r0, [pc, #28]	; (3eb4 <check_sys_mutex_addr+0x68>)
    3e96:	e9cd 1502 	strd	r1, r5, [sp, #8]
    3e9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    3e9e:	a902      	add	r1, sp, #8
    3ea0:	4623      	mov	r3, r4
    3ea2:	f021 f874 	bl	24f8e <log_n>
    3ea6:	e7f1      	b.n	3e8c <check_sys_mutex_addr+0x40>
    3ea8:	0002a810 	.word	0x0002a810
    3eac:	0002a6d0 	.word	0x0002a6d0
    3eb0:	0002c903 	.word	0x0002c903
    3eb4:	0002c8a6 	.word	0x0002c8a6
    3eb8:	0002c909 	.word	0x0002c909

00003ebc <z_mrsh_z_sys_mutex_kernel_lock>:
#include <syscalls/mutex.h>

extern int z_vrfy_z_sys_mutex_kernel_lock(struct sys_mutex * mutex, k_timeout_t timeout);
uintptr_t z_mrsh_z_sys_mutex_kernel_lock(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
    3ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	_current->syscall_frame = ssf;
    3ebe:	4c0c      	ldr	r4, [pc, #48]	; (3ef0 <z_mrsh_z_sys_mutex_kernel_lock+0x34>)
    3ec0:	68a3      	ldr	r3, [r4, #8]
{
    3ec2:	4616      	mov	r6, r2
	_current->syscall_frame = ssf;
    3ec4:	9a08      	ldr	r2, [sp, #32]
    3ec6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
{
    3eca:	4605      	mov	r5, r0
    3ecc:	460f      	mov	r7, r1
}

static inline int z_vrfy_z_sys_mutex_kernel_lock(struct sys_mutex *mutex,
						 k_timeout_t timeout)
{
	if (check_sys_mutex_addr(mutex)) {
    3ece:	f7ff ffbd 	bl	3e4c <check_sys_mutex_addr>
    3ed2:	b948      	cbnz	r0, 3ee8 <z_mrsh_z_sys_mutex_kernel_lock+0x2c>
		return -EACCES;
	}

	return z_impl_z_sys_mutex_kernel_lock(mutex, timeout);
    3ed4:	463a      	mov	r2, r7
    3ed6:	4633      	mov	r3, r6
    3ed8:	4628      	mov	r0, r5
    3eda:	f020 ff57 	bl	24d8c <z_impl_z_sys_mutex_kernel_lock>
	union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0;
	parm0.split.lo = arg1;
	parm0.split.hi = arg2;
	int ret = z_vrfy_z_sys_mutex_kernel_lock(*(struct sys_mutex **)&arg0, parm0.val)
;
	_current->syscall_frame = NULL;
    3ede:	68a3      	ldr	r3, [r4, #8]
    3ee0:	2200      	movs	r2, #0
    3ee2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	return (uintptr_t) ret;
}
    3ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EACCES;
    3ee8:	f06f 000c 	mvn.w	r0, #12
    3eec:	e7f7      	b.n	3ede <z_mrsh_z_sys_mutex_kernel_lock+0x22>
    3eee:	bf00      	nop
    3ef0:	200023f4 	.word	0x200023f4

00003ef4 <z_mrsh_z_sys_mutex_kernel_unlock>:
#include <syscalls/mutex.h>

extern int z_vrfy_z_sys_mutex_kernel_unlock(struct sys_mutex * mutex);
uintptr_t z_mrsh_z_sys_mutex_kernel_unlock(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
    3ef4:	b538      	push	{r3, r4, r5, lr}
	_current->syscall_frame = ssf;
    3ef6:	4c0a      	ldr	r4, [pc, #40]	; (3f20 <z_mrsh_z_sys_mutex_kernel_unlock+0x2c>)
    3ef8:	9a06      	ldr	r2, [sp, #24]
    3efa:	68a3      	ldr	r3, [r4, #8]
    3efc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
{
    3f00:	4605      	mov	r5, r0
	return k_mutex_unlock(kernel_mutex);
}

static inline int z_vrfy_z_sys_mutex_kernel_unlock(struct sys_mutex *mutex)
{
	if (check_sys_mutex_addr(mutex)) {
    3f02:	f7ff ffa3 	bl	3e4c <check_sys_mutex_addr>
    3f06:	b938      	cbnz	r0, 3f18 <z_mrsh_z_sys_mutex_kernel_unlock+0x24>
		return -EACCES;
	}

	return z_impl_z_sys_mutex_kernel_unlock(mutex);
    3f08:	4628      	mov	r0, r5
    3f0a:	f020 ff5f 	bl	24dcc <z_impl_z_sys_mutex_kernel_unlock>
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	int ret = z_vrfy_z_sys_mutex_kernel_unlock(*(struct sys_mutex **)&arg0)
;
	_current->syscall_frame = NULL;
    3f0e:	68a3      	ldr	r3, [r4, #8]
    3f10:	2200      	movs	r2, #0
    3f12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	return (uintptr_t) ret;
}
    3f16:	bd38      	pop	{r3, r4, r5, pc}
		return -EACCES;
    3f18:	f06f 000c 	mvn.w	r0, #12
    3f1c:	e7f7      	b.n	3f0e <z_mrsh_z_sys_mutex_kernel_unlock+0x1a>
    3f1e:	bf00      	nop
    3f20:	200023f4 	.word	0x200023f4

00003f24 <k_sem_give.constprop.0>:
	return z_impl_k_sem_take(sem, timeout);
}


extern void z_impl_k_sem_give(struct k_sem * sem);
static inline void k_sem_give(struct k_sem * sem)
    3f24:	e92d 4148 	stmdb	sp!, {r3, r6, r8, lr}
	ret = arch_is_user_context();
    3f28:	f020 ff83 	bl	24e32 <arch_is_user_context>
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
    3f2c:	b120      	cbz	r0, 3f38 <k_sem_give.constprop.0+0x14>
}

static inline uintptr_t arch_syscall_invoke1(uintptr_t arg1,
					     uintptr_t call_id)
{
	register uint32_t ret __asm__("r0") = arg1;
    3f2e:	4805      	ldr	r0, [pc, #20]	; (3f44 <k_sem_give.constprop.0+0x20>)
	register uint32_t r6 __asm__("r6") = call_id;
    3f30:	26a0      	movs	r6, #160	; 0xa0

	__asm__ volatile("svc %[svid]\n"
    3f32:	df03      	svc	3
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
}
    3f34:	e8bd 8148 	ldmia.w	sp!, {r3, r6, r8, pc}
	z_impl_k_sem_give(sem);
    3f38:	4802      	ldr	r0, [pc, #8]	; (3f44 <k_sem_give.constprop.0+0x20>)
}
    3f3a:	e8bd 4148 	ldmia.w	sp!, {r3, r6, r8, lr}
	z_impl_k_sem_give(sem);
    3f3e:	f01e b861 	b.w	22004 <z_impl_k_sem_give>
    3f42:	bf00      	nop
    3f44:	20007e78 	.word	0x20007e78

00003f48 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    3f48:	e92d 4170 	stmdb	sp!, {r4, r5, r6, r8, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    3f4c:	491c      	ldr	r1, [pc, #112]	; (3fc0 <enable_logger+0x78>)
    3f4e:	481d      	ldr	r0, [pc, #116]	; (3fc4 <enable_logger+0x7c>)
{
    3f50:	b08f      	sub	sp, #60	; 0x3c
		k_timer_init(&log_process_thread_timer,
    3f52:	2200      	movs	r2, #0
    3f54:	f025 ff3b 	bl	29dce <k_timer_init>
    3f58:	f020 ff6b 	bl	24e32 <arch_is_user_context>
	return ret;
    3f5c:	230e      	movs	r3, #14
	if (z_syscall_trap()) {
    3f5e:	b1c8      	cbz	r0, 3f94 <enable_logger+0x4c>
		uintptr_t more[] = {
    3f60:	2400      	movs	r4, #0
    3f62:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
    3f66:	e9cd 4408 	strd	r4, r4, [sp, #32]
    3f6a:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
	register uint32_t ret __asm__("r0") = arg1;
    3f6e:	4816      	ldr	r0, [pc, #88]	; (3fc8 <enable_logger+0x80>)
	register uint32_t r1 __asm__("r1") = arg2;
    3f70:	4916      	ldr	r1, [pc, #88]	; (3fcc <enable_logger+0x84>)
	register uint32_t r3 __asm__("r3") = arg4;
    3f72:	4b17      	ldr	r3, [pc, #92]	; (3fd0 <enable_logger+0x88>)
	register uint32_t r2 __asm__("r2") = arg3;
    3f74:	f44f 7240 	mov.w	r2, #768	; 0x300
	register uint32_t r5 __asm__("r5") = arg6;
    3f78:	ad08      	add	r5, sp, #32
	register uint32_t r6 __asm__("r6") = call_id;
    3f7a:	26aa      	movs	r6, #170	; 0xaa
	__asm__ volatile("svc %[svid]\n"
    3f7c:	df03      	svc	3
	ret = arch_is_user_context();
    3f7e:	f020 ff58 	bl	24e32 <arch_is_user_context>
	if (z_syscall_trap()) {
    3f82:	b1c0      	cbz	r0, 3fb6 <enable_logger+0x6e>
	register uint32_t ret __asm__("r0") = arg1;
    3f84:	4810      	ldr	r0, [pc, #64]	; (3fc8 <enable_logger+0x80>)
	register uint32_t r1 __asm__("r1") = arg2;
    3f86:	4913      	ldr	r1, [pc, #76]	; (3fd4 <enable_logger+0x8c>)
	register uint32_t r6 __asm__("r6") = call_id;
    3f88:	26b0      	movs	r6, #176	; 0xb0
	__asm__ volatile("svc %[svid]\n"
    3f8a:	df03      	svc	3
	} else {
		log_init();
	}

	return 0;
}
    3f8c:	2000      	movs	r0, #0
    3f8e:	b00f      	add	sp, #60	; 0x3c
    3f90:	e8bd 8170 	ldmia.w	sp!, {r4, r5, r6, r8, pc}
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    3f94:	2400      	movs	r4, #0
    3f96:	2500      	movs	r5, #0
    3f98:	e9cd 3003 	strd	r3, r0, [sp, #12]
    3f9c:	e9cd 0001 	strd	r0, r0, [sp, #4]
    3fa0:	9000      	str	r0, [sp, #0]
    3fa2:	e9cd 4506 	strd	r4, r5, [sp, #24]
    3fa6:	4b0a      	ldr	r3, [pc, #40]	; (3fd0 <enable_logger+0x88>)
    3fa8:	4908      	ldr	r1, [pc, #32]	; (3fcc <enable_logger+0x84>)
    3faa:	4807      	ldr	r0, [pc, #28]	; (3fc8 <enable_logger+0x80>)
    3fac:	f44f 7240 	mov.w	r2, #768	; 0x300
    3fb0:	f025 fd93 	bl	29ada <z_impl_k_thread_create>
    3fb4:	e7e3      	b.n	3f7e <enable_logger+0x36>
	return z_impl_k_thread_name_set(thread, str);
    3fb6:	4907      	ldr	r1, [pc, #28]	; (3fd4 <enable_logger+0x8c>)
    3fb8:	4803      	ldr	r0, [pc, #12]	; (3fc8 <enable_logger+0x80>)
    3fba:	f025 fd80 	bl	29abe <z_impl_k_thread_name_set>
    3fbe:	e7e5      	b.n	3f8c <enable_logger+0x44>
    3fc0:	00024e5d 	.word	0x00024e5d
    3fc4:	20000020 	.word	0x20000020
    3fc8:	20000058 	.word	0x20000058
    3fcc:	20003000 	.word	0x20003000
    3fd0:	00004401 	.word	0x00004401
    3fd4:	0002c91e 	.word	0x0002c91e

00003fd8 <z_log_get_s_mask>:
{
    3fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3fda:	4605      	mov	r5, r0
		} else if (arm && isalpha((int)curr)) {
    3fdc:	4e0f      	ldr	r6, [pc, #60]	; (401c <z_log_get_s_mask+0x44>)
	uint32_t mask = 0U;
    3fde:	2000      	movs	r0, #0
	uint32_t arg = 0U;
    3fe0:	4603      	mov	r3, r0
	bool arm = false;
    3fe2:	4602      	mov	r2, r0
				mask |= BIT(arg);
    3fe4:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
    3fe6:	f815 4b01 	ldrb.w	r4, [r5], #1
    3fea:	b10c      	cbz	r4, 3ff0 <z_log_get_s_mask+0x18>
    3fec:	428b      	cmp	r3, r1
    3fee:	d300      	bcc.n	3ff2 <z_log_get_s_mask+0x1a>
}
    3ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
    3ff2:	2c25      	cmp	r4, #37	; 0x25
    3ff4:	d102      	bne.n	3ffc <z_log_get_s_mask+0x24>
			arm = !arm;
    3ff6:	f082 0201 	eor.w	r2, r2, #1
    3ffa:	e7f4      	b.n	3fe6 <z_log_get_s_mask+0xe>
		} else if (arm && isalpha((int)curr)) {
    3ffc:	2a00      	cmp	r2, #0
    3ffe:	d0f2      	beq.n	3fe6 <z_log_get_s_mask+0xe>
    4000:	f814 c006 	ldrb.w	ip, [r4, r6]
    4004:	f01c 0f03 	tst.w	ip, #3
    4008:	d0ed      	beq.n	3fe6 <z_log_get_s_mask+0xe>
			if (curr == 's') {
    400a:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
    400c:	bf04      	itt	eq
    400e:	fa07 f203 	lsleq.w	r2, r7, r3
    4012:	4310      	orreq	r0, r2
			arg++;
    4014:	3301      	adds	r3, #1
			arm = false;
    4016:	2200      	movs	r2, #0
    4018:	e7e5      	b.n	3fe6 <z_log_get_s_mask+0xe>
    401a:	bf00      	nop
    401c:	0002f8fc 	.word	0x0002f8fc

00004020 <log_core_init>:
{
    4020:	b508      	push	{r3, lr}
		log_msg_pool_init();
    4022:	f000 fcdb 	bl	49dc <log_msg_pool_init>
		log_list_init(&list);
    4026:	4809      	ldr	r0, [pc, #36]	; (404c <log_core_init+0x2c>)
    4028:	f020 feed 	bl	24e06 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    402c:	2308      	movs	r3, #8
    402e:	2248      	movs	r2, #72	; 0x48
    4030:	4907      	ldr	r1, [pc, #28]	; (4050 <log_core_init+0x30>)
    4032:	4808      	ldr	r0, [pc, #32]	; (4054 <log_core_init+0x34>)
    4034:	f025 fa32 	bl	2949c <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
    4038:	4b07      	ldr	r3, [pc, #28]	; (4058 <log_core_init+0x38>)
    403a:	4a08      	ldr	r2, [pc, #32]	; (405c <log_core_init+0x3c>)
    403c:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    403e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
}
    4042:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
    4046:	f000 bf37 	b.w	4eb8 <log_output_timestamp_freq_set>
    404a:	bf00      	nop
    404c:	20000b94 	.word	0x20000b94
    4050:	20004df0 	.word	0x20004df0
    4054:	20000b9c 	.word	0x20000b9c
    4058:	2000777c 	.word	0x2000777c
    405c:	00024e59 	.word	0x00024e59

00004060 <dropped_notify>:
{
    4060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4062:	4b0f      	ldr	r3, [pc, #60]	; (40a0 <dropped_notify+0x40>)
    4064:	f3bf 8f5b 	dmb	ish
    4068:	2500      	movs	r5, #0
    406a:	e853 7f00 	ldrex	r7, [r3]
    406e:	e843 5200 	strex	r2, r5, [r3]
    4072:	2a00      	cmp	r2, #0
    4074:	d1f9      	bne.n	406a <dropped_notify+0xa>
    4076:	f3bf 8f5b 	dmb	ish
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    407a:	4c0a      	ldr	r4, [pc, #40]	; (40a4 <dropped_notify+0x44>)
    407c:	4e0a      	ldr	r6, [pc, #40]	; (40a8 <dropped_notify+0x48>)
    407e:	1b36      	subs	r6, r6, r4
    4080:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    4082:	42b5      	cmp	r5, r6
    4084:	db00      	blt.n	4088 <dropped_notify+0x28>
}
    4086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    4088:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    408a:	795b      	ldrb	r3, [r3, #5]
    408c:	b12b      	cbz	r3, 409a <dropped_notify+0x3a>
	if (backend->api->dropped != NULL) {
    408e:	6823      	ldr	r3, [r4, #0]
    4090:	68db      	ldr	r3, [r3, #12]
    4092:	b113      	cbz	r3, 409a <dropped_notify+0x3a>
		backend->api->dropped(backend, cnt);
    4094:	4639      	mov	r1, r7
    4096:	4620      	mov	r0, r4
    4098:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    409a:	3501      	adds	r5, #1
    409c:	3410      	adds	r4, #16
    409e:	e7f0      	b.n	4082 <dropped_notify+0x22>
    40a0:	20000b8c 	.word	0x20000b8c
    40a4:	0002a840 	.word	0x0002a840
    40a8:	0002a850 	.word	0x0002a850

000040ac <z_mrsh_log_buffered_cnt>:

extern uint32_t z_vrfy_log_buffered_cnt();
uintptr_t z_mrsh_log_buffered_cnt(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
	_current->syscall_frame = ssf;
    40ac:	4b03      	ldr	r3, [pc, #12]	; (40bc <z_mrsh_log_buffered_cnt+0x10>)
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	uint32_t ret = z_vrfy_log_buffered_cnt()
;
	_current->syscall_frame = NULL;
    40ae:	689b      	ldr	r3, [r3, #8]
    40b0:	2200      	movs	r2, #0
    40b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	return (uintptr_t) ret;
}
    40b6:	4b02      	ldr	r3, [pc, #8]	; (40c0 <z_mrsh_log_buffered_cnt+0x14>)
    40b8:	6818      	ldr	r0, [r3, #0]
    40ba:	4770      	bx	lr
    40bc:	200023f4 	.word	0x200023f4
    40c0:	20000b88 	.word	0x20000b88

000040c4 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    40c4:	4b06      	ldr	r3, [pc, #24]	; (40e0 <log_dropped+0x1c>)
    40c6:	f3bf 8f5b 	dmb	ish
    40ca:	e853 2f00 	ldrex	r2, [r3]
    40ce:	3201      	adds	r2, #1
    40d0:	e843 2100 	strex	r1, r2, [r3]
    40d4:	2900      	cmp	r1, #0
    40d6:	d1f8      	bne.n	40ca <log_dropped+0x6>
    40d8:	f3bf 8f5b 	dmb	ish
}
    40dc:	4770      	bx	lr
    40de:	bf00      	nop
    40e0:	20000b8c 	.word	0x20000b8c

000040e4 <log_source_name_get>:
    40e4:	4a04      	ldr	r2, [pc, #16]	; (40f8 <log_source_name_get+0x14>)
    40e6:	4b05      	ldr	r3, [pc, #20]	; (40fc <log_source_name_get+0x18>)
    40e8:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    40ea:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    40ee:	bf34      	ite	cc
    40f0:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    40f4:	2000      	movcs	r0, #0
}
    40f6:	4770      	bx	lr
    40f8:	0002a6d0 	.word	0x0002a6d0
    40fc:	0002a840 	.word	0x0002a840

00004100 <log_backend_enable>:
{
    4100:	b538      	push	{r3, r4, r5, lr}
	id += backend - log_backend_get(0);
    4102:	4b09      	ldr	r3, [pc, #36]	; (4128 <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
    4104:	6842      	ldr	r2, [r0, #4]
	if (!backend_attached) {
    4106:	4c09      	ldr	r4, [pc, #36]	; (412c <log_backend_enable+0x2c>)
	id += backend - log_backend_get(0);
    4108:	1ac3      	subs	r3, r0, r3
    410a:	111b      	asrs	r3, r3, #4
    410c:	3301      	adds	r3, #1
	log_backend_id_set(backend, id);
    410e:	7113      	strb	r3, [r2, #4]
	log_backend_activate(backend, ctx);
    4110:	6843      	ldr	r3, [r0, #4]
	backend->cb->ctx = ctx;
    4112:	6019      	str	r1, [r3, #0]
	if (!backend_attached) {
    4114:	7821      	ldrb	r1, [r4, #0]
	backend->cb->active = true;
    4116:	2201      	movs	r2, #1
    4118:	715a      	strb	r2, [r3, #5]
    411a:	4615      	mov	r5, r2
    411c:	b909      	cbnz	r1, 4122 <log_backend_enable+0x22>
		k_sem_give(&log_process_thread_sem);
    411e:	f7ff ff01 	bl	3f24 <k_sem_give.constprop.0>
	backend_attached = true;
    4122:	7025      	strb	r5, [r4, #0]
}
    4124:	bd38      	pop	{r3, r4, r5, pc}
    4126:	bf00      	nop
    4128:	0002a840 	.word	0x0002a840
    412c:	2000252a 	.word	0x2000252a

00004130 <log_init>:
{
    4130:	b570      	push	{r4, r5, r6, lr}
    4132:	4b11      	ldr	r3, [pc, #68]	; (4178 <log_init+0x48>)
    4134:	f3bf 8f5b 	dmb	ish
    4138:	e853 5f00 	ldrex	r5, [r3]
    413c:	1c6a      	adds	r2, r5, #1
    413e:	e843 2100 	strex	r1, r2, [r3]
    4142:	2900      	cmp	r1, #0
    4144:	d1f8      	bne.n	4138 <log_init+0x8>
    4146:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    414a:	b92d      	cbnz	r5, 4158 <log_init+0x28>
	return __log_backends_end - __log_backends_start;
    414c:	4c0b      	ldr	r4, [pc, #44]	; (417c <log_init+0x4c>)
    414e:	4e0c      	ldr	r6, [pc, #48]	; (4180 <log_init+0x50>)
    4150:	1b36      	subs	r6, r6, r4
    4152:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    4154:	42b5      	cmp	r5, r6
    4156:	db00      	blt.n	415a <log_init+0x2a>
}
    4158:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    415a:	7b23      	ldrb	r3, [r4, #12]
    415c:	b14b      	cbz	r3, 4172 <log_init+0x42>
			if (backend->api->init != NULL) {
    415e:	6823      	ldr	r3, [r4, #0]
    4160:	695b      	ldr	r3, [r3, #20]
    4162:	b10b      	cbz	r3, 4168 <log_init+0x38>
				backend->api->init(backend);
    4164:	4620      	mov	r0, r4
    4166:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    4168:	2204      	movs	r2, #4
    416a:	2100      	movs	r1, #0
    416c:	4620      	mov	r0, r4
    416e:	f7ff ffc7 	bl	4100 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    4172:	3501      	adds	r5, #1
    4174:	3410      	adds	r4, #16
    4176:	e7ed      	b.n	4154 <log_init+0x24>
    4178:	20000b90 	.word	0x20000b90
    417c:	0002a840 	.word	0x0002a840
    4180:	0002a850 	.word	0x0002a850

00004184 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    4184:	4b19      	ldr	r3, [pc, #100]	; (41ec <log_strdup+0x68>)
    4186:	4298      	cmp	r0, r3
{
    4188:	b573      	push	{r0, r1, r4, r5, r6, lr}
    418a:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    418c:	d306      	bcc.n	419c <log_strdup+0x18>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    418e:	4b18      	ldr	r3, [pc, #96]	; (41f0 <log_strdup+0x6c>)
    4190:	4298      	cmp	r0, r3
    4192:	d203      	bcs.n	419c <log_strdup+0x18>
		return (char *)log_strdup_fail_msg;
    4194:	4623      	mov	r3, r4
}
    4196:	4618      	mov	r0, r3
    4198:	b002      	add	sp, #8
    419a:	bd70      	pop	{r4, r5, r6, pc}
	return arch_is_user_context();
    419c:	f020 fe49 	bl	24e32 <arch_is_user_context>
	    is_rodata(str) || k_is_user_context()) {
    41a0:	2800      	cmp	r0, #0
    41a2:	d1f7      	bne.n	4194 <log_strdup+0x10>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    41a4:	4813      	ldr	r0, [pc, #76]	; (41f4 <log_strdup+0x70>)
    41a6:	2200      	movs	r2, #0
    41a8:	2300      	movs	r3, #0
    41aa:	a901      	add	r1, sp, #4
    41ac:	f01c fcb2 	bl	20b14 <k_mem_slab_alloc>
	if (err != 0) {
    41b0:	4605      	mov	r5, r0
    41b2:	b9c8      	cbnz	r0, 41e8 <log_strdup+0x64>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    41b4:	2201      	movs	r2, #1
    41b6:	9b01      	ldr	r3, [sp, #4]
    41b8:	f3bf 8f5b 	dmb	ish
    41bc:	e853 1f00 	ldrex	r1, [r3]
    41c0:	e843 2000 	strex	r0, r2, [r3]
    41c4:	2800      	cmp	r0, #0
    41c6:	d1f9      	bne.n	41bc <log_strdup+0x38>
    41c8:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    41cc:	9e01      	ldr	r6, [sp, #4]
    41ce:	1d33      	adds	r3, r6, #4
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    41d0:	2241      	movs	r2, #65	; 0x41
    41d2:	4618      	mov	r0, r3
    41d4:	4621      	mov	r1, r4
    41d6:	f026 f921 	bl	2a41c <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    41da:	227e      	movs	r2, #126	; 0x7e
    41dc:	4603      	mov	r3, r0
    41de:	f886 2045 	strb.w	r2, [r6, #69]	; 0x45
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    41e2:	f886 5046 	strb.w	r5, [r6, #70]	; 0x46
	return dup->buf;
    41e6:	e7d6      	b.n	4196 <log_strdup+0x12>
		return (char *)log_strdup_fail_msg;
    41e8:	4b03      	ldr	r3, [pc, #12]	; (41f8 <log_strdup+0x74>)
    41ea:	e7d4      	b.n	4196 <log_strdup+0x12>
    41ec:	0002a464 	.word	0x0002a464
    41f0:	0002fafc 	.word	0x0002fafc
    41f4:	20000b9c 	.word	0x20000b9c
    41f8:	0002c926 	.word	0x0002c926

000041fc <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
    41fc:	b150      	cbz	r0, 4214 <log_is_strdup+0x18>
    41fe:	4b06      	ldr	r3, [pc, #24]	; (4218 <log_is_strdup+0x1c>)
    4200:	4298      	cmp	r0, r3
    4202:	d306      	bcc.n	4212 <log_is_strdup+0x16>
    4204:	f503 7310 	add.w	r3, r3, #576	; 0x240
    4208:	4298      	cmp	r0, r3
    420a:	bf2c      	ite	cs
    420c:	2000      	movcs	r0, #0
    420e:	2001      	movcc	r0, #1
    4210:	4770      	bx	lr
    4212:	2000      	movs	r0, #0
}
    4214:	4770      	bx	lr
    4216:	bf00      	nop
    4218:	20004df0 	.word	0x20004df0

0000421c <log_free>:
{
    421c:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    421e:	3804      	subs	r0, #4
    4220:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    4222:	f3bf 8f5b 	dmb	ish
    4226:	e850 3f00 	ldrex	r3, [r0]
    422a:	1e5a      	subs	r2, r3, #1
    422c:	e840 2100 	strex	r1, r2, [r0]
    4230:	2900      	cmp	r1, #0
    4232:	d1f8      	bne.n	4226 <log_free+0xa>
    4234:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    4238:	2b01      	cmp	r3, #1
    423a:	d103      	bne.n	4244 <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    423c:	4803      	ldr	r0, [pc, #12]	; (424c <log_free+0x30>)
    423e:	a901      	add	r1, sp, #4
    4240:	f01c fc9a 	bl	20b78 <k_mem_slab_free>
}
    4244:	b003      	add	sp, #12
    4246:	f85d fb04 	ldr.w	pc, [sp], #4
    424a:	bf00      	nop
    424c:	20000b9c 	.word	0x20000b9c

00004250 <z_impl_log_process>:
{
    4250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
    4254:	4b53      	ldr	r3, [pc, #332]	; (43a4 <z_impl_log_process+0x154>)
    4256:	781b      	ldrb	r3, [r3, #0]
{
    4258:	b085      	sub	sp, #20
    425a:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    425c:	b903      	cbnz	r3, 4260 <z_impl_log_process+0x10>
    425e:	b360      	cbz	r0, 42ba <z_impl_log_process+0x6a>
    4260:	f04f 0320 	mov.w	r3, #32
    4264:	f3ef 8611 	mrs	r6, BASEPRI
    4268:	f383 8811 	msr	BASEPRI, r3
    426c:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
    4270:	484d      	ldr	r0, [pc, #308]	; (43a8 <z_impl_log_process+0x158>)
    4272:	f020 fdd8 	bl	24e26 <log_list_head_get>
    4276:	4605      	mov	r5, r0
	__asm__ volatile(
    4278:	f386 8811 	msr	BASEPRI, r6
    427c:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    4280:	b178      	cbz	r0, 42a2 <z_impl_log_process+0x52>
    4282:	f3bf 8f5b 	dmb	ish
    4286:	4b49      	ldr	r3, [pc, #292]	; (43ac <z_impl_log_process+0x15c>)
    4288:	e853 2f00 	ldrex	r2, [r3]
    428c:	3a01      	subs	r2, #1
    428e:	e843 2100 	strex	r1, r2, [r3]
    4292:	2900      	cmp	r1, #0
    4294:	d1f8      	bne.n	4288 <z_impl_log_process+0x38>
    4296:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
    429a:	b194      	cbz	r4, 42c2 <z_impl_log_process+0x72>
	log_msg_put(msg);
    429c:	4628      	mov	r0, r5
    429e:	f020 ff4b 	bl	25138 <log_msg_put>
	if (!bypass && dropped_cnt) {
    42a2:	b924      	cbnz	r4, 42ae <z_impl_log_process+0x5e>
    42a4:	4b42      	ldr	r3, [pc, #264]	; (43b0 <z_impl_log_process+0x160>)
    42a6:	681b      	ldr	r3, [r3, #0]
    42a8:	b10b      	cbz	r3, 42ae <z_impl_log_process+0x5e>
		dropped_notify();
    42aa:	f7ff fed9 	bl	4060 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    42ae:	483e      	ldr	r0, [pc, #248]	; (43a8 <z_impl_log_process+0x158>)
    42b0:	f020 fdb7 	bl	24e22 <log_list_head_peek>
    42b4:	1e04      	subs	r4, r0, #0
    42b6:	bf18      	it	ne
    42b8:	2401      	movne	r4, #1
}
    42ba:	4620      	mov	r0, r4
    42bc:	b005      	add	sp, #20
    42be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    42c2:	4b3c      	ldr	r3, [pc, #240]	; (43b4 <z_impl_log_process+0x164>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
    42c4:	781b      	ldrb	r3, [r3, #0]
    42c6:	b9d3      	cbnz	r3, 42fe <z_impl_log_process+0xae>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    42c8:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
    42ca:	07db      	lsls	r3, r3, #31
    42cc:	d417      	bmi.n	42fe <z_impl_log_process+0xae>
	msg_str = log_msg_str_get(msg);
    42ce:	f020 ff46 	bl	2515e <log_msg_str_get>
    42d2:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    42d4:	4628      	mov	r0, r5
    42d6:	f020 ff0d 	bl	250f4 <log_msg_nargs_get>
    42da:	4601      	mov	r1, r0
    42dc:	4640      	mov	r0, r8
    42de:	f7ff fe7b 	bl	3fd8 <z_log_get_s_mask>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    42e2:	4b35      	ldr	r3, [pc, #212]	; (43b8 <z_impl_log_process+0x168>)
    42e4:	4a35      	ldr	r2, [pc, #212]	; (43bc <z_impl_log_process+0x16c>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    42e6:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 43d8 <z_impl_log_process+0x188>
    42ea:	9303      	str	r3, [sp, #12]
    42ec:	1ad2      	subs	r2, r2, r3
    42ee:	ea4f 0ad2 	mov.w	sl, r2, lsr #3
    42f2:	4a33      	ldr	r2, [pc, #204]	; (43c0 <z_impl_log_process+0x170>)
    42f4:	1ad2      	subs	r2, r2, r3
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    42f6:	4606      	mov	r6, r0
    42f8:	ea4f 0bd2 	mov.w	fp, r2, lsr #3
	while (mask) {
    42fc:	b936      	cbnz	r6, 430c <z_impl_log_process+0xbc>
    42fe:	4e31      	ldr	r6, [pc, #196]	; (43c4 <z_impl_log_process+0x174>)
    4300:	4f31      	ldr	r7, [pc, #196]	; (43c8 <z_impl_log_process+0x178>)
    4302:	1bbf      	subs	r7, r7, r6
    4304:	113f      	asrs	r7, r7, #4
    4306:	f04f 0800 	mov.w	r8, #0
    430a:	e047      	b.n	439c <z_impl_log_process+0x14c>
		idx = 31 - __builtin_clz(mask);
    430c:	fab6 f786 	clz	r7, r6
    4310:	f1c7 071f 	rsb	r7, r7, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    4314:	4639      	mov	r1, r7
    4316:	4628      	mov	r0, r5
    4318:	f020 feef 	bl	250fa <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    431c:	4b2b      	ldr	r3, [pc, #172]	; (43cc <z_impl_log_process+0x17c>)
    431e:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
    4320:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    4322:	d302      	bcc.n	432a <z_impl_log_process+0xda>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    4324:	4b2a      	ldr	r3, [pc, #168]	; (43d0 <z_impl_log_process+0x180>)
    4326:	4298      	cmp	r0, r3
    4328:	d31f      	bcc.n	436a <z_impl_log_process+0x11a>
    432a:	4608      	mov	r0, r1
    432c:	f7ff ff66 	bl	41fc <log_is_strdup>
    4330:	4602      	mov	r2, r0
    4332:	b9d0      	cbnz	r0, 436a <z_impl_log_process+0x11a>
    4334:	4b27      	ldr	r3, [pc, #156]	; (43d4 <z_impl_log_process+0x184>)
    4336:	4299      	cmp	r1, r3
    4338:	d017      	beq.n	436a <z_impl_log_process+0x11a>
	return msg->hdr.ids.source_id;
    433a:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    433c:	ebba 1f93 	cmp.w	sl, r3, lsr #6
    4340:	ea4f 1193 	mov.w	r1, r3, lsr #6
	return __log_const_start[source_id].name;
    4344:	bf84      	itt	hi
    4346:	9b03      	ldrhi	r3, [sp, #12]
    4348:	f853 2031 	ldrhi.w	r2, [r3, r1, lsl #3]
    434c:	f020 fd71 	bl	24e32 <arch_is_user_context>
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    4350:	ea4f 1c8b 	mov.w	ip, fp, lsl #6
    4354:	f04c 0c01 	orr.w	ip, ip, #1
    4358:	b168      	cbz	r0, 4376 <z_impl_log_process+0x126>
    435a:	4613      	mov	r3, r2
    435c:	f8cd 8000 	str.w	r8, [sp]
    4360:	463a      	mov	r2, r7
    4362:	4649      	mov	r1, r9
    4364:	4660      	mov	r0, ip
    4366:	f020 fd96 	bl	24e96 <log_from_user>
		mask &= ~BIT(idx);
    436a:	2301      	movs	r3, #1
    436c:	fa03 f707 	lsl.w	r7, r3, r7
    4370:	ea26 0607 	bic.w	r6, r6, r7
    4374:	e7c2      	b.n	42fc <z_impl_log_process+0xac>
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    4376:	f8ad c000 	strh.w	ip, [sp]
    437a:	4643      	mov	r3, r8
    437c:	4639      	mov	r1, r7
    437e:	4648      	mov	r0, r9
    4380:	f020 fde9 	bl	24f56 <log_3>
    4384:	e7f1      	b.n	436a <z_impl_log_process+0x11a>
	return backend->cb->active;
    4386:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
    4388:	795b      	ldrb	r3, [r3, #5]
    438a:	b123      	cbz	r3, 4396 <z_impl_log_process+0x146>
	backend->api->put(backend, msg);
    438c:	6833      	ldr	r3, [r6, #0]
    438e:	4629      	mov	r1, r5
    4390:	681b      	ldr	r3, [r3, #0]
    4392:	4630      	mov	r0, r6
    4394:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    4396:	f108 0801 	add.w	r8, r8, #1
    439a:	3610      	adds	r6, #16
    439c:	45b8      	cmp	r8, r7
    439e:	dbf2      	blt.n	4386 <z_impl_log_process+0x136>
    43a0:	e77c      	b.n	429c <z_impl_log_process+0x4c>
    43a2:	bf00      	nop
    43a4:	2000252a 	.word	0x2000252a
    43a8:	20000b94 	.word	0x20000b94
    43ac:	20000b88 	.word	0x20000b88
    43b0:	20000b8c 	.word	0x20000b8c
    43b4:	2000252b 	.word	0x2000252b
    43b8:	0002a6d0 	.word	0x0002a6d0
    43bc:	0002a840 	.word	0x0002a840
    43c0:	0002a7e8 	.word	0x0002a7e8
    43c4:	0002a840 	.word	0x0002a840
    43c8:	0002a850 	.word	0x0002a850
    43cc:	0002a464 	.word	0x0002a464
    43d0:	0002fafc 	.word	0x0002fafc
    43d4:	0002c926 	.word	0x0002c926
    43d8:	0002c940 	.word	0x0002c940

000043dc <z_mrsh_log_process>:
#include <syscalls/log_ctrl.h>

extern bool z_vrfy_log_process(bool bypass);
uintptr_t z_mrsh_log_process(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
    43dc:	b513      	push	{r0, r1, r4, lr}
	_current->syscall_frame = ssf;
    43de:	4c07      	ldr	r4, [pc, #28]	; (43fc <z_mrsh_log_process+0x20>)
    43e0:	9a06      	ldr	r2, [sp, #24]
    43e2:	68a3      	ldr	r3, [r4, #8]
{
    43e4:	9001      	str	r0, [sp, #4]
	_current->syscall_frame = ssf;
    43e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	return z_impl_log_process(bypass);
    43ea:	b2c0      	uxtb	r0, r0
    43ec:	f7ff ff30 	bl	4250 <z_impl_log_process>
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	bool ret = z_vrfy_log_process(*(bool*)&arg0)
;
	_current->syscall_frame = NULL;
    43f0:	68a3      	ldr	r3, [r4, #8]
    43f2:	2200      	movs	r2, #0
    43f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	return (uintptr_t) ret;
}
    43f8:	b002      	add	sp, #8
    43fa:	bd10      	pop	{r4, pc}
    43fc:	200023f4 	.word	0x200023f4

00004400 <log_process_thread_func>:
{
    4400:	e92d 4150 	stmdb	sp!, {r4, r6, r8, lr}
	log_init();
    4404:	f7ff fe94 	bl	4130 <log_init>
	ret = arch_is_user_context();
    4408:	f020 fd13 	bl	24e32 <arch_is_user_context>
	if (z_syscall_trap()) {
    440c:	b1c8      	cbz	r0, 4442 <log_process_thread_func+0x42>
}

static inline uintptr_t arch_syscall_invoke0(uintptr_t call_id)
{
	register uint32_t ret __asm__("r0");
	register uint32_t r6 __asm__("r6") = call_id;
    440e:	2674      	movs	r6, #116	; 0x74

	__asm__ volatile("svc %[svid]\n"
    4410:	df03      	svc	3
	proc_tid = process_tid;
    4412:	4b11      	ldr	r3, [pc, #68]	; (4458 <log_process_thread_func+0x58>)
    4414:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    4416:	b128      	cbz	r0, 4424 <log_process_thread_func+0x24>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    4418:	4b10      	ldr	r3, [pc, #64]	; (445c <log_process_thread_func+0x5c>)
	    process_tid &&
    441a:	681b      	ldr	r3, [r3, #0]
    441c:	2b09      	cmp	r3, #9
    441e:	dd01      	ble.n	4424 <log_process_thread_func+0x24>
		k_sem_give(&log_process_thread_sem);
    4420:	f7ff fd80 	bl	3f24 <k_sem_give.constprop.0>
	return z_impl_k_sem_take(sem, timeout);
    4424:	4c0e      	ldr	r4, [pc, #56]	; (4460 <log_process_thread_func+0x60>)
		if (log_process(false) == false) {
    4426:	f020 fd43 	bl	24eb0 <log_process.constprop.0>
    442a:	2800      	cmp	r0, #0
    442c:	d1fb      	bne.n	4426 <log_process_thread_func+0x26>
    442e:	f020 fd00 	bl	24e32 <arch_is_user_context>
	if (z_syscall_trap()) {
    4432:	b148      	cbz	r0, 4448 <log_process_thread_func+0x48>
	register uint32_t r1 __asm__("r1") = arg2;
    4434:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	register uint32_t ret __asm__("r0") = arg1;
    4438:	4620      	mov	r0, r4
	register uint32_t r2 __asm__("r2") = arg3;
    443a:	460a      	mov	r2, r1
	register uint32_t r6 __asm__("r6") = call_id;
    443c:	26a3      	movs	r6, #163	; 0xa3
	__asm__ volatile("svc %[svid]\n"
    443e:	df03      	svc	3
	return ret;
    4440:	e7f1      	b.n	4426 <log_process_thread_func+0x26>
	return z_impl_k_current_get();
    4442:	f01d fc61 	bl	21d08 <z_impl_k_current_get>
    4446:	e7e4      	b.n	4412 <log_process_thread_func+0x12>
	return z_impl_k_sem_take(sem, timeout);
    4448:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    444c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4450:	4620      	mov	r0, r4
    4452:	f01d fe39 	bl	220c8 <z_impl_k_sem_take>
    4456:	e7e6      	b.n	4426 <log_process_thread_func+0x26>
    4458:	20000bb8 	.word	0x20000bb8
    445c:	20000b88 	.word	0x20000b88
    4460:	20007e78 	.word	0x20007e78

00004464 <z_impl_log_panic>:
{
    4464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    4466:	4f0e      	ldr	r7, [pc, #56]	; (44a0 <z_impl_log_panic+0x3c>)
    4468:	783d      	ldrb	r5, [r7, #0]
    446a:	b96d      	cbnz	r5, 4488 <z_impl_log_panic+0x24>
	return __log_backends_end - __log_backends_start;
    446c:	4c0d      	ldr	r4, [pc, #52]	; (44a4 <z_impl_log_panic+0x40>)
    446e:	4e0e      	ldr	r6, [pc, #56]	; (44a8 <z_impl_log_panic+0x44>)
	log_init();
    4470:	f7ff fe5e 	bl	4130 <log_init>
    4474:	1b36      	subs	r6, r6, r4
    4476:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    4478:	42b5      	cmp	r5, r6
    447a:	db06      	blt.n	448a <z_impl_log_panic+0x26>
		while (log_process(false) == true) {
    447c:	f020 fd18 	bl	24eb0 <log_process.constprop.0>
    4480:	2800      	cmp	r0, #0
    4482:	d1fb      	bne.n	447c <z_impl_log_panic+0x18>
	panic_mode = true;
    4484:	2301      	movs	r3, #1
    4486:	703b      	strb	r3, [r7, #0]
}
    4488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    448a:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    448c:	795b      	ldrb	r3, [r3, #5]
    448e:	b11b      	cbz	r3, 4498 <z_impl_log_panic+0x34>
	backend->api->panic(backend);
    4490:	6823      	ldr	r3, [r4, #0]
    4492:	4620      	mov	r0, r4
    4494:	691b      	ldr	r3, [r3, #16]
    4496:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    4498:	3501      	adds	r5, #1
    449a:	3410      	adds	r4, #16
    449c:	e7ec      	b.n	4478 <z_impl_log_panic+0x14>
    449e:	bf00      	nop
    44a0:	2000252b 	.word	0x2000252b
    44a4:	0002a840 	.word	0x0002a840
    44a8:	0002a850 	.word	0x0002a850

000044ac <z_mrsh_log_panic>:
#include <syscalls/log_ctrl.h>

extern void z_vrfy_log_panic();
uintptr_t z_mrsh_log_panic(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
    44ac:	b510      	push	{r4, lr}
	_current->syscall_frame = ssf;
    44ae:	4c06      	ldr	r4, [pc, #24]	; (44c8 <z_mrsh_log_panic+0x1c>)
    44b0:	9a04      	ldr	r2, [sp, #16]
    44b2:	68a3      	ldr	r3, [r4, #8]
    44b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	z_impl_log_panic();
    44b8:	f7ff ffd4 	bl	4464 <z_impl_log_panic>
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	z_vrfy_log_panic()
;
	_current->syscall_frame = NULL;
    44bc:	68a3      	ldr	r3, [r4, #8]
    44be:	2000      	movs	r0, #0
    44c0:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	return 0;
}
    44c4:	bd10      	pop	{r4, pc}
    44c6:	bf00      	nop
    44c8:	200023f4 	.word	0x200023f4

000044cc <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    44cc:	4b33      	ldr	r3, [pc, #204]	; (459c <msg_finalize+0xd0>)
{
    44ce:	e92d 4177 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r8, lr}
	msg->hdr.timestamp = timestamp_func();
    44d2:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    44d4:	8141      	strh	r1, [r0, #10]
{
    44d6:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    44d8:	4798      	blx	r3
    44da:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    44dc:	f04f 0320 	mov.w	r3, #32
    44e0:	f3ef 8511 	mrs	r5, BASEPRI
    44e4:	f383 8811 	msr	BASEPRI, r3
    44e8:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    44ec:	482c      	ldr	r0, [pc, #176]	; (45a0 <msg_finalize+0xd4>)
    44ee:	4621      	mov	r1, r4
    44f0:	f020 fc8d 	bl	24e0e <log_list_add_tail>
	__asm__ volatile(
    44f4:	f385 8811 	msr	BASEPRI, r5
    44f8:	f3bf 8f6f 	isb	sy
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    44fc:	f3bf 8f5b 	dmb	ish
    4500:	4b28      	ldr	r3, [pc, #160]	; (45a4 <msg_finalize+0xd8>)
    4502:	e853 2f00 	ldrex	r2, [r3]
    4506:	3201      	adds	r2, #1
    4508:	e843 2100 	strex	r1, r2, [r3]
    450c:	2900      	cmp	r1, #0
    450e:	d1f8      	bne.n	4502 <msg_finalize+0x36>
    4510:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    4514:	4a24      	ldr	r2, [pc, #144]	; (45a8 <msg_finalize+0xdc>)
    4516:	7812      	ldrb	r2, [r2, #0]
    4518:	b182      	cbz	r2, 453c <msg_finalize+0x70>
	__asm__ volatile(
    451a:	f04f 0320 	mov.w	r3, #32
    451e:	f3ef 8411 	mrs	r4, BASEPRI
    4522:	f383 8811 	msr	BASEPRI, r3
    4526:	f3bf 8f6f 	isb	sy
		(void)log_process(false);
    452a:	f020 fcc1 	bl	24eb0 <log_process.constprop.0>
	__asm__ volatile(
    452e:	f384 8811 	msr	BASEPRI, r4
    4532:	f3bf 8f6f 	isb	sy
}
    4536:	b003      	add	sp, #12
    4538:	e8bd 8170 	ldmia.w	sp!, {r4, r5, r6, r8, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    453c:	491b      	ldr	r1, [pc, #108]	; (45ac <msg_finalize+0xe0>)
    453e:	681b      	ldr	r3, [r3, #0]
    4540:	6809      	ldr	r1, [r1, #0]
    4542:	2900      	cmp	r1, #0
    4544:	d0f7      	beq.n	4536 <msg_finalize+0x6a>
    4546:	2b01      	cmp	r3, #1
    4548:	d119      	bne.n	457e <msg_finalize+0xb2>
    454a:	f020 fc72 	bl	24e32 <arch_is_user_context>
	if (z_syscall_trap()) {
    454e:	b138      	cbz	r0, 4560 <msg_finalize+0x94>
	register uint32_t ret __asm__("r0") = arg1;
    4550:	4817      	ldr	r0, [pc, #92]	; (45b0 <msg_finalize+0xe4>)
	register uint32_t r1 __asm__("r1") = arg2;
    4552:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	register uint32_t r3 __asm__("r3") = arg4;
    4556:	4613      	mov	r3, r2
	register uint32_t r4 __asm__("r4") = arg5;
    4558:	4614      	mov	r4, r2
	register uint32_t r6 __asm__("r6") = call_id;
    455a:	26bb      	movs	r6, #187	; 0xbb
	__asm__ volatile("svc %[svid]\n"
    455c:	df03      	svc	3
	return ret;
    455e:	e7ea      	b.n	4536 <msg_finalize+0x6a>
	z_impl_k_timer_start(timer, duration, period);
    4560:	2200      	movs	r2, #0
    4562:	2300      	movs	r3, #0
    4564:	e9cd 2300 	strd	r2, r3, [sp]
    4568:	4811      	ldr	r0, [pc, #68]	; (45b0 <msg_finalize+0xe4>)
    456a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    456e:	2300      	movs	r3, #0
    4570:	f01e fdf2 	bl	23158 <z_impl_k_timer_start>
    4574:	e7df      	b.n	4536 <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
    4576:	480e      	ldr	r0, [pc, #56]	; (45b0 <msg_finalize+0xe4>)
    4578:	f025 fc36 	bl	29de8 <z_impl_k_timer_stop>
    457c:	e008      	b.n	4590 <msg_finalize+0xc4>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    457e:	2b0a      	cmp	r3, #10
    4580:	d1d9      	bne.n	4536 <msg_finalize+0x6a>
    4582:	f020 fc56 	bl	24e32 <arch_is_user_context>
	if (z_syscall_trap()) {
    4586:	2800      	cmp	r0, #0
    4588:	d0f5      	beq.n	4576 <msg_finalize+0xaa>
	register uint32_t ret __asm__("r0") = arg1;
    458a:	4809      	ldr	r0, [pc, #36]	; (45b0 <msg_finalize+0xe4>)
	register uint32_t r6 __asm__("r6") = call_id;
    458c:	26be      	movs	r6, #190	; 0xbe
	__asm__ volatile("svc %[svid]\n"
    458e:	df03      	svc	3
}
    4590:	b003      	add	sp, #12
    4592:	e8bd 4170 	ldmia.w	sp!, {r4, r5, r6, r8, lr}
			k_sem_give(&log_process_thread_sem);
    4596:	f7ff bcc5 	b.w	3f24 <k_sem_give.constprop.0>
    459a:	bf00      	nop
    459c:	2000777c 	.word	0x2000777c
    45a0:	20000b94 	.word	0x20000b94
    45a4:	20000b88 	.word	0x20000b88
    45a8:	2000252b 	.word	0x2000252b
    45ac:	20000bb8 	.word	0x20000bb8
    45b0:	20000020 	.word	0x20000020

000045b4 <z_vrfy_log_filter_set>:
{
    45b4:	b510      	push	{r4, lr}
    45b6:	4c2d      	ldr	r4, [pc, #180]	; (466c <z_vrfy_log_filter_set+0xb8>)
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(backend == 0,
    45b8:	2800      	cmp	r0, #0
    45ba:	d046      	beq.n	464a <z_vrfy_log_filter_set+0x96>
	return arch_is_user_context();
    45bc:	f020 fc39 	bl	24e32 <arch_is_user_context>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    45c0:	4b2b      	ldr	r3, [pc, #172]	; (4670 <z_vrfy_log_filter_set+0xbc>)
    45c2:	1b1b      	subs	r3, r3, r4
    45c4:	08db      	lsrs	r3, r3, #3
    45c6:	019b      	lsls	r3, r3, #6
    45c8:	f043 0301 	orr.w	r3, r3, #1
    45cc:	b150      	cbz	r0, 45e4 <z_vrfy_log_filter_set+0x30>
    45ce:	4a29      	ldr	r2, [pc, #164]	; (4674 <z_vrfy_log_filter_set+0xc0>)
    45d0:	4929      	ldr	r1, [pc, #164]	; (4678 <z_vrfy_log_filter_set+0xc4>)
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(
    45d2:	4618      	mov	r0, r3
    45d4:	f020 fc5f 	bl	24e96 <log_from_user>
    45d8:	4b28      	ldr	r3, [pc, #160]	; (467c <z_vrfy_log_filter_set+0xc8>)
    45da:	689b      	ldr	r3, [r3, #8]
    45dc:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    45e0:	f022 fa3c 	bl	26a5c <arch_syscall_oops>
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(backend == 0,
    45e4:	4923      	ldr	r1, [pc, #140]	; (4674 <z_vrfy_log_filter_set+0xc0>)
    45e6:	4824      	ldr	r0, [pc, #144]	; (4678 <z_vrfy_log_filter_set+0xc4>)
    45e8:	461a      	mov	r2, r3
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(
    45ea:	f020 fc87 	bl	24efc <log_1>
    45ee:	e7f3      	b.n	45d8 <z_vrfy_log_filter_set+0x24>
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(domain_id == CONFIG_LOG_DOMAIN_ID,
    45f0:	4920      	ldr	r1, [pc, #128]	; (4674 <z_vrfy_log_filter_set+0xc0>)
    45f2:	4823      	ldr	r0, [pc, #140]	; (4680 <z_vrfy_log_filter_set+0xcc>)
    45f4:	461a      	mov	r2, r3
    45f6:	e7f8      	b.n	45ea <z_vrfy_log_filter_set+0x36>
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(src_id < log_sources_count(),
    45f8:	491e      	ldr	r1, [pc, #120]	; (4674 <z_vrfy_log_filter_set+0xc0>)
    45fa:	4822      	ldr	r0, [pc, #136]	; (4684 <z_vrfy_log_filter_set+0xd0>)
    45fc:	461a      	mov	r2, r3
    45fe:	e7f4      	b.n	45ea <z_vrfy_log_filter_set+0x36>
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(
    4600:	491c      	ldr	r1, [pc, #112]	; (4674 <z_vrfy_log_filter_set+0xc0>)
    4602:	4821      	ldr	r0, [pc, #132]	; (4688 <z_vrfy_log_filter_set+0xd4>)
    4604:	461a      	mov	r2, r3
    4606:	e7f0      	b.n	45ea <z_vrfy_log_filter_set+0x36>
    4608:	2b04      	cmp	r3, #4
    460a:	d92d      	bls.n	4668 <z_vrfy_log_filter_set+0xb4>
    460c:	f020 fc11 	bl	24e32 <arch_is_user_context>
    4610:	4b17      	ldr	r3, [pc, #92]	; (4670 <z_vrfy_log_filter_set+0xbc>)
    4612:	1b1b      	subs	r3, r3, r4
    4614:	08db      	lsrs	r3, r3, #3
    4616:	019b      	lsls	r3, r3, #6
    4618:	f043 0301 	orr.w	r3, r3, #1
    461c:	2800      	cmp	r0, #0
    461e:	d0ef      	beq.n	4600 <z_vrfy_log_filter_set+0x4c>
    4620:	4a14      	ldr	r2, [pc, #80]	; (4674 <z_vrfy_log_filter_set+0xc0>)
    4622:	4919      	ldr	r1, [pc, #100]	; (4688 <z_vrfy_log_filter_set+0xd4>)
    4624:	e7d5      	b.n	45d2 <z_vrfy_log_filter_set+0x1e>
    4626:	4919      	ldr	r1, [pc, #100]	; (468c <z_vrfy_log_filter_set+0xd8>)
    4628:	1b09      	subs	r1, r1, r4
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(src_id < log_sources_count(),
    462a:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
    462e:	d3eb      	bcc.n	4608 <z_vrfy_log_filter_set+0x54>
    4630:	f020 fbff 	bl	24e32 <arch_is_user_context>
    4634:	4b0e      	ldr	r3, [pc, #56]	; (4670 <z_vrfy_log_filter_set+0xbc>)
    4636:	1b1b      	subs	r3, r3, r4
    4638:	08db      	lsrs	r3, r3, #3
    463a:	019b      	lsls	r3, r3, #6
    463c:	f043 0301 	orr.w	r3, r3, #1
    4640:	2800      	cmp	r0, #0
    4642:	d0d9      	beq.n	45f8 <z_vrfy_log_filter_set+0x44>
    4644:	4a0b      	ldr	r2, [pc, #44]	; (4674 <z_vrfy_log_filter_set+0xc0>)
    4646:	490f      	ldr	r1, [pc, #60]	; (4684 <z_vrfy_log_filter_set+0xd0>)
    4648:	e7c3      	b.n	45d2 <z_vrfy_log_filter_set+0x1e>
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(domain_id == CONFIG_LOG_DOMAIN_ID,
    464a:	2900      	cmp	r1, #0
    464c:	d0eb      	beq.n	4626 <z_vrfy_log_filter_set+0x72>
    464e:	f020 fbf0 	bl	24e32 <arch_is_user_context>
    4652:	4b07      	ldr	r3, [pc, #28]	; (4670 <z_vrfy_log_filter_set+0xbc>)
    4654:	1b1b      	subs	r3, r3, r4
    4656:	08db      	lsrs	r3, r3, #3
    4658:	019b      	lsls	r3, r3, #6
    465a:	f043 0301 	orr.w	r3, r3, #1
    465e:	2800      	cmp	r0, #0
    4660:	d0c6      	beq.n	45f0 <z_vrfy_log_filter_set+0x3c>
    4662:	4a04      	ldr	r2, [pc, #16]	; (4674 <z_vrfy_log_filter_set+0xc0>)
    4664:	4906      	ldr	r1, [pc, #24]	; (4680 <z_vrfy_log_filter_set+0xcc>)
    4666:	e7b4      	b.n	45d2 <z_vrfy_log_filter_set+0x1e>
}
    4668:	4618      	mov	r0, r3
    466a:	bd10      	pop	{r4, pc}
    466c:	0002a6d0 	.word	0x0002a6d0
    4670:	0002a810 	.word	0x0002a810
    4674:	0002cac3 	.word	0x0002cac3
    4678:	0002c97f 	.word	0x0002c97f
    467c:	200023f4 	.word	0x200023f4
    4680:	0002c9d4 	.word	0x0002c9d4
    4684:	0002ca03 	.word	0x0002ca03
    4688:	0002ca32 	.word	0x0002ca32
    468c:	0002a840 	.word	0x0002a840

00004690 <z_mrsh_log_filter_set>:
#include <syscalls/log_ctrl.h>

extern uint32_t z_vrfy_log_filter_set(struct log_backend const *const backend, uint32_t domain_id, uint32_t src_id, uint32_t level);
uintptr_t z_mrsh_log_filter_set(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
    4690:	b570      	push	{r4, r5, r6, lr}
	_current->syscall_frame = ssf;
    4692:	4c06      	ldr	r4, [pc, #24]	; (46ac <z_mrsh_log_filter_set+0x1c>)
    4694:	9e06      	ldr	r6, [sp, #24]
    4696:	68a5      	ldr	r5, [r4, #8]
    4698:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	uint32_t ret = z_vrfy_log_filter_set(*(struct log_backend const *const*)&arg0, *(uint32_t*)&arg1, *(uint32_t*)&arg2, *(uint32_t*)&arg3)
    469c:	f7ff ff8a 	bl	45b4 <z_vrfy_log_filter_set>
;
	_current->syscall_frame = NULL;
    46a0:	68a3      	ldr	r3, [r4, #8]
    46a2:	2200      	movs	r2, #0
    46a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	return (uintptr_t) ret;
}
    46a8:	bd70      	pop	{r4, r5, r6, pc}
    46aa:	bf00      	nop
    46ac:	200023f4 	.word	0x200023f4

000046b0 <z_vrfy_z_log_string_from_user>:
{
    46b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	level = src_level_union.structure.level;
    46b4:	f000 0407 	and.w	r4, r0, #7
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(
    46b8:	2c04      	cmp	r4, #4
    46ba:	4f53      	ldr	r7, [pc, #332]	; (4808 <z_vrfy_z_log_string_from_user+0x158>)
{
    46bc:	b088      	sub	sp, #32
    46be:	4606      	mov	r6, r0
    46c0:	460d      	mov	r5, r1
	domain_id = src_level_union.structure.domain_id;
    46c2:	f3c0 03c2 	ubfx	r3, r0, #3, #3
	source_id = src_level_union.structure.source_id;
    46c6:	f3c0 1287 	ubfx	r2, r0, #6, #8
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(
    46ca:	f240 808d 	bls.w	47e8 <z_vrfy_z_log_string_from_user+0x138>
    46ce:	f020 fbb0 	bl	24e32 <arch_is_user_context>
    46d2:	4b4e      	ldr	r3, [pc, #312]	; (480c <z_vrfy_z_log_string_from_user+0x15c>)
    46d4:	1bdb      	subs	r3, r3, r7
    46d6:	08db      	lsrs	r3, r3, #3
    46d8:	019b      	lsls	r3, r3, #6
    46da:	f043 0301 	orr.w	r3, r3, #1
    46de:	b150      	cbz	r0, 46f6 <z_vrfy_z_log_string_from_user+0x46>
    46e0:	4a4b      	ldr	r2, [pc, #300]	; (4810 <z_vrfy_z_log_string_from_user+0x160>)
    46e2:	494c      	ldr	r1, [pc, #304]	; (4814 <z_vrfy_z_log_string_from_user+0x164>)
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(err == 0, "invalid string passed in"));
    46e4:	4618      	mov	r0, r3
    46e6:	f020 fbd6 	bl	24e96 <log_from_user>
	Z_OOPS(Z_SYSCALL_MEMORY_READ(str, len));
    46ea:	4b4b      	ldr	r3, [pc, #300]	; (4818 <z_vrfy_z_log_string_from_user+0x168>)
    46ec:	689b      	ldr	r3, [r3, #8]
    46ee:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    46f2:	f022 f9b3 	bl	26a5c <arch_syscall_oops>
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(
    46f6:	4946      	ldr	r1, [pc, #280]	; (4810 <z_vrfy_z_log_string_from_user+0x160>)
    46f8:	4846      	ldr	r0, [pc, #280]	; (4814 <z_vrfy_z_log_string_from_user+0x164>)
    46fa:	461a      	mov	r2, r3
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(err == 0, "invalid string passed in"));
    46fc:	f020 fbfe 	bl	24efc <log_1>
    4700:	e7f3      	b.n	46ea <z_vrfy_z_log_string_from_user+0x3a>
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(domain_id == CONFIG_LOG_DOMAIN_ID,
    4702:	4943      	ldr	r1, [pc, #268]	; (4810 <z_vrfy_z_log_string_from_user+0x160>)
    4704:	4845      	ldr	r0, [pc, #276]	; (481c <z_vrfy_z_log_string_from_user+0x16c>)
    4706:	461a      	mov	r2, r3
    4708:	e7f8      	b.n	46fc <z_vrfy_z_log_string_from_user+0x4c>
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(source_id < log_sources_count(),
    470a:	4941      	ldr	r1, [pc, #260]	; (4810 <z_vrfy_z_log_string_from_user+0x160>)
    470c:	4844      	ldr	r0, [pc, #272]	; (4820 <z_vrfy_z_log_string_from_user+0x170>)
    470e:	461a      	mov	r2, r3
    4710:	e7f4      	b.n	46fc <z_vrfy_z_log_string_from_user+0x4c>
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(err == 0, "invalid string passed in"));
    4712:	493f      	ldr	r1, [pc, #252]	; (4810 <z_vrfy_z_log_string_from_user+0x160>)
    4714:	4843      	ldr	r0, [pc, #268]	; (4824 <z_vrfy_z_log_string_from_user+0x174>)
    4716:	461a      	mov	r2, r3
    4718:	e7f0      	b.n	46fc <z_vrfy_z_log_string_from_user+0x4c>
	Z_OOPS(Z_SYSCALL_MEMORY_READ(str, len));
    471a:	4a3d      	ldr	r2, [pc, #244]	; (4810 <z_vrfy_z_log_string_from_user+0x160>)
    471c:	4842      	ldr	r0, [pc, #264]	; (4828 <z_vrfy_z_log_string_from_user+0x178>)
    471e:	e9cd 2504 	strd	r2, r5, [sp, #16]
    4722:	e9cd 8306 	strd	r8, r3, [sp, #24]
    4726:	2204      	movs	r2, #4
    4728:	4623      	mov	r3, r4
    472a:	a904      	add	r1, sp, #16
    472c:	f020 fc2f 	bl	24f8e <log_n>
    4730:	e7db      	b.n	46ea <z_vrfy_z_log_string_from_user+0x3a>
		msg = log_msg_hexdump_create(NULL, str, len);
    4732:	4642      	mov	r2, r8
    4734:	4629      	mov	r1, r5
    4736:	f020 fd70 	bl	2521a <log_msg_hexdump_create>
		if (msg != NULL) {
    473a:	b110      	cbz	r0, 4742 <z_vrfy_z_log_string_from_user+0x92>
			msg_finalize(msg, src_level_union.structure);
    473c:	4631      	mov	r1, r6
    473e:	f7ff fec5 	bl	44cc <msg_finalize>
}
    4742:	b008      	add	sp, #32
    4744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (IS_ENABLED(CONFIG_LOG_PRINTK) &&
    4748:	2c00      	cmp	r4, #0
    474a:	d0f2      	beq.n	4732 <z_vrfy_z_log_string_from_user+0x82>
		str = log_strdup(str);
    474c:	4628      	mov	r0, r5
    474e:	f7ff fd19 	bl	4184 <log_strdup>
		log_1("%s", (log_arg_t)str, src_level_union.structure);
    4752:	4632      	mov	r2, r6
		str = log_strdup(str);
    4754:	4601      	mov	r1, r0
		log_1("%s", (log_arg_t)str, src_level_union.structure);
    4756:	4835      	ldr	r0, [pc, #212]	; (482c <z_vrfy_z_log_string_from_user+0x17c>)
    4758:	f020 fbd0 	bl	24efc <log_1>
    475c:	e7f1      	b.n	4742 <z_vrfy_z_log_string_from_user+0x92>
	Z_OOPS(Z_SYSCALL_MEMORY_READ(str, len));
    475e:	4641      	mov	r1, r8
    4760:	4628      	mov	r0, r5
    4762:	f022 f99f 	bl	26aa4 <arch_buffer_validate>
    4766:	2800      	cmp	r0, #0
    4768:	d0ee      	beq.n	4748 <z_vrfy_z_log_string_from_user+0x98>
    476a:	4c28      	ldr	r4, [pc, #160]	; (480c <z_vrfy_z_log_string_from_user+0x15c>)
    476c:	f020 fb61 	bl	24e32 <arch_is_user_context>
    4770:	1be4      	subs	r4, r4, r7
    4772:	08e4      	lsrs	r4, r4, #3
    4774:	01a4      	lsls	r4, r4, #6
    4776:	4b2e      	ldr	r3, [pc, #184]	; (4830 <z_vrfy_z_log_string_from_user+0x180>)
    4778:	f044 0401 	orr.w	r4, r4, #1
    477c:	2800      	cmp	r0, #0
    477e:	d0cc      	beq.n	471a <z_vrfy_z_log_string_from_user+0x6a>
    4780:	e9cd 8300 	strd	r8, r3, [sp]
    4784:	4a22      	ldr	r2, [pc, #136]	; (4810 <z_vrfy_z_log_string_from_user+0x160>)
    4786:	4928      	ldr	r1, [pc, #160]	; (4828 <z_vrfy_z_log_string_from_user+0x178>)
    4788:	462b      	mov	r3, r5
    478a:	4620      	mov	r0, r4
    478c:	f020 fb83 	bl	24e96 <log_from_user>
    4790:	e7ab      	b.n	46ea <z_vrfy_z_log_string_from_user+0x3a>
	len = z_user_string_nlen(str, (level == LOG_LEVEL_INTERNAL_RAW_STRING) ?
    4792:	2c00      	cmp	r4, #0
 *	first maxlen bytes.
 */
static inline size_t z_user_string_nlen(const char *src, size_t maxlen,
					int *err)
{
	return arch_user_string_nlen(src, maxlen, err);
    4794:	aa03      	add	r2, sp, #12
    4796:	bf0c      	ite	eq
    4798:	2180      	moveq	r1, #128	; 0x80
    479a:	2142      	movne	r1, #66	; 0x42
    479c:	4628      	mov	r0, r5
    479e:	f001 fe57 	bl	6450 <arch_user_string_nlen>
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(err == 0, "invalid string passed in"));
    47a2:	9a03      	ldr	r2, [sp, #12]
    47a4:	4680      	mov	r8, r0
    47a6:	2a00      	cmp	r2, #0
    47a8:	d0d9      	beq.n	475e <z_vrfy_z_log_string_from_user+0xae>
    47aa:	f020 fb42 	bl	24e32 <arch_is_user_context>
    47ae:	4b17      	ldr	r3, [pc, #92]	; (480c <z_vrfy_z_log_string_from_user+0x15c>)
    47b0:	1bdb      	subs	r3, r3, r7
    47b2:	08db      	lsrs	r3, r3, #3
    47b4:	019b      	lsls	r3, r3, #6
    47b6:	f043 0301 	orr.w	r3, r3, #1
    47ba:	2800      	cmp	r0, #0
    47bc:	d0a9      	beq.n	4712 <z_vrfy_z_log_string_from_user+0x62>
    47be:	4a14      	ldr	r2, [pc, #80]	; (4810 <z_vrfy_z_log_string_from_user+0x160>)
    47c0:	4918      	ldr	r1, [pc, #96]	; (4824 <z_vrfy_z_log_string_from_user+0x174>)
    47c2:	e78f      	b.n	46e4 <z_vrfy_z_log_string_from_user+0x34>
    47c4:	4b1b      	ldr	r3, [pc, #108]	; (4834 <z_vrfy_z_log_string_from_user+0x184>)
    47c6:	1bdb      	subs	r3, r3, r7
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(source_id < log_sources_count(),
    47c8:	ebb2 0fd3 	cmp.w	r2, r3, lsr #3
    47cc:	d3e1      	bcc.n	4792 <z_vrfy_z_log_string_from_user+0xe2>
    47ce:	f020 fb30 	bl	24e32 <arch_is_user_context>
    47d2:	4b0e      	ldr	r3, [pc, #56]	; (480c <z_vrfy_z_log_string_from_user+0x15c>)
    47d4:	1bdb      	subs	r3, r3, r7
    47d6:	08db      	lsrs	r3, r3, #3
    47d8:	019b      	lsls	r3, r3, #6
    47da:	f043 0301 	orr.w	r3, r3, #1
    47de:	2800      	cmp	r0, #0
    47e0:	d093      	beq.n	470a <z_vrfy_z_log_string_from_user+0x5a>
    47e2:	4a0b      	ldr	r2, [pc, #44]	; (4810 <z_vrfy_z_log_string_from_user+0x160>)
    47e4:	490e      	ldr	r1, [pc, #56]	; (4820 <z_vrfy_z_log_string_from_user+0x170>)
    47e6:	e77d      	b.n	46e4 <z_vrfy_z_log_string_from_user+0x34>
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(domain_id == CONFIG_LOG_DOMAIN_ID,
    47e8:	2b00      	cmp	r3, #0
    47ea:	d0eb      	beq.n	47c4 <z_vrfy_z_log_string_from_user+0x114>
    47ec:	f020 fb21 	bl	24e32 <arch_is_user_context>
    47f0:	4b06      	ldr	r3, [pc, #24]	; (480c <z_vrfy_z_log_string_from_user+0x15c>)
    47f2:	1bdb      	subs	r3, r3, r7
    47f4:	08db      	lsrs	r3, r3, #3
    47f6:	019b      	lsls	r3, r3, #6
    47f8:	f043 0301 	orr.w	r3, r3, #1
    47fc:	2800      	cmp	r0, #0
    47fe:	d080      	beq.n	4702 <z_vrfy_z_log_string_from_user+0x52>
    4800:	4a03      	ldr	r2, [pc, #12]	; (4810 <z_vrfy_z_log_string_from_user+0x160>)
    4802:	4906      	ldr	r1, [pc, #24]	; (481c <z_vrfy_z_log_string_from_user+0x16c>)
    4804:	e76e      	b.n	46e4 <z_vrfy_z_log_string_from_user+0x34>
    4806:	bf00      	nop
    4808:	0002a6d0 	.word	0x0002a6d0
    480c:	0002a810 	.word	0x0002a810
    4810:	0002cad9 	.word	0x0002cad9
    4814:	0002ca32 	.word	0x0002ca32
    4818:	200023f4 	.word	0x200023f4
    481c:	0002c9d4 	.word	0x0002c9d4
    4820:	0002ca03 	.word	0x0002ca03
    4824:	0002ca5d 	.word	0x0002ca5d
    4828:	0002c8a6 	.word	0x0002c8a6
    482c:	0002d91f 	.word	0x0002d91f
    4830:	0002d10e 	.word	0x0002d10e
    4834:	0002a840 	.word	0x0002a840

00004838 <z_mrsh_z_log_string_from_user>:
#include <syscalls/log_core.h>

extern void z_vrfy_z_log_string_from_user(uint32_t src_level_val, const char * str);
uintptr_t z_mrsh_z_log_string_from_user(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
    4838:	b510      	push	{r4, lr}
	_current->syscall_frame = ssf;
    483a:	4c06      	ldr	r4, [pc, #24]	; (4854 <z_mrsh_z_log_string_from_user+0x1c>)
    483c:	9a04      	ldr	r2, [sp, #16]
    483e:	68a3      	ldr	r3, [r4, #8]
    4840:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	(void) arg2;	/* unused */
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	z_vrfy_z_log_string_from_user(*(uint32_t*)&arg0, *(const char **)&arg1)
    4844:	f7ff ff34 	bl	46b0 <z_vrfy_z_log_string_from_user>
;
	_current->syscall_frame = NULL;
    4848:	68a3      	ldr	r3, [r4, #8]
    484a:	2000      	movs	r0, #0
    484c:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	return 0;
}
    4850:	bd10      	pop	{r4, pc}
    4852:	bf00      	nop
    4854:	200023f4 	.word	0x200023f4

00004858 <z_vrfy_z_log_hexdump_from_user>:
{
    4858:	b5f0      	push	{r4, r5, r6, r7, lr}
    485a:	461f      	mov	r7, r3
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(
    485c:	f000 0307 	and.w	r3, r0, #7
    4860:	2b04      	cmp	r3, #4
    4862:	4d4b      	ldr	r5, [pc, #300]	; (4990 <z_vrfy_z_log_hexdump_from_user+0x138>)
{
    4864:	b099      	sub	sp, #100	; 0x64
    4866:	4604      	mov	r4, r0
    4868:	4616      	mov	r6, r2
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(
    486a:	d802      	bhi.n	4872 <z_vrfy_z_log_hexdump_from_user+0x1a>
    486c:	0742      	lsls	r2, r0, #29
    486e:	b2c3      	uxtb	r3, r0
    4870:	d17d      	bne.n	496e <z_vrfy_z_log_hexdump_from_user+0x116>
    4872:	f020 fade 	bl	24e32 <arch_is_user_context>
    4876:	4b47      	ldr	r3, [pc, #284]	; (4994 <z_vrfy_z_log_hexdump_from_user+0x13c>)
    4878:	1b5b      	subs	r3, r3, r5
    487a:	08db      	lsrs	r3, r3, #3
    487c:	019b      	lsls	r3, r3, #6
    487e:	f043 0301 	orr.w	r3, r3, #1
    4882:	b150      	cbz	r0, 489a <z_vrfy_z_log_hexdump_from_user+0x42>
    4884:	4a44      	ldr	r2, [pc, #272]	; (4998 <z_vrfy_z_log_hexdump_from_user+0x140>)
    4886:	4945      	ldr	r1, [pc, #276]	; (499c <z_vrfy_z_log_hexdump_from_user+0x144>)
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(err == 0, "invalid meta passed in"));
    4888:	4618      	mov	r0, r3
    488a:	f020 fb04 	bl	24e96 <log_from_user>
	Z_OOPS(Z_SYSCALL_MEMORY_READ(data, len));
    488e:	4b44      	ldr	r3, [pc, #272]	; (49a0 <z_vrfy_z_log_hexdump_from_user+0x148>)
    4890:	689b      	ldr	r3, [r3, #8]
    4892:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    4896:	f022 f8e1 	bl	26a5c <arch_syscall_oops>
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(
    489a:	493f      	ldr	r1, [pc, #252]	; (4998 <z_vrfy_z_log_hexdump_from_user+0x140>)
    489c:	483f      	ldr	r0, [pc, #252]	; (499c <z_vrfy_z_log_hexdump_from_user+0x144>)
    489e:	461a      	mov	r2, r3
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(err == 0, "invalid meta passed in"));
    48a0:	f020 fb2c 	bl	24efc <log_1>
    48a4:	e7f3      	b.n	488e <z_vrfy_z_log_hexdump_from_user+0x36>
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(
    48a6:	493c      	ldr	r1, [pc, #240]	; (4998 <z_vrfy_z_log_hexdump_from_user+0x140>)
    48a8:	483e      	ldr	r0, [pc, #248]	; (49a4 <z_vrfy_z_log_hexdump_from_user+0x14c>)
    48aa:	461a      	mov	r2, r3
    48ac:	e7f8      	b.n	48a0 <z_vrfy_z_log_hexdump_from_user+0x48>
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(
    48ae:	493a      	ldr	r1, [pc, #232]	; (4998 <z_vrfy_z_log_hexdump_from_user+0x140>)
    48b0:	483d      	ldr	r0, [pc, #244]	; (49a8 <z_vrfy_z_log_hexdump_from_user+0x150>)
    48b2:	461a      	mov	r2, r3
    48b4:	e7f4      	b.n	48a0 <z_vrfy_z_log_hexdump_from_user+0x48>
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(err == 0, "invalid meta passed in"));
    48b6:	4938      	ldr	r1, [pc, #224]	; (4998 <z_vrfy_z_log_hexdump_from_user+0x140>)
    48b8:	483c      	ldr	r0, [pc, #240]	; (49ac <z_vrfy_z_log_hexdump_from_user+0x154>)
    48ba:	461a      	mov	r2, r3
    48bc:	e7f0      	b.n	48a0 <z_vrfy_z_log_hexdump_from_user+0x48>
	Z_OOPS(Z_SYSCALL_MEMORY_READ(data, len));
    48be:	4a36      	ldr	r2, [pc, #216]	; (4998 <z_vrfy_z_log_hexdump_from_user+0x140>)
    48c0:	483b      	ldr	r0, [pc, #236]	; (49b0 <z_vrfy_z_log_hexdump_from_user+0x158>)
    48c2:	e9cd 2603 	strd	r2, r6, [sp, #12]
    48c6:	e9cd 7305 	strd	r7, r3, [sp, #20]
    48ca:	2204      	movs	r2, #4
    48cc:	4623      	mov	r3, r4
    48ce:	a903      	add	r1, sp, #12
    48d0:	f020 fb5d 	bl	24f8e <log_n>
    48d4:	e7db      	b.n	488e <z_vrfy_z_log_hexdump_from_user+0x36>
		metadata = log_strdup(kmeta);
    48d6:	a807      	add	r0, sp, #28
    48d8:	f7ff fc54 	bl	4184 <log_strdup>
		log_hexdump(metadata, data, len, src_level_union.structure);
    48dc:	4623      	mov	r3, r4
    48de:	463a      	mov	r2, r7
    48e0:	4631      	mov	r1, r6
    48e2:	f020 fb5f 	bl	24fa4 <log_hexdump>
}
    48e6:	b019      	add	sp, #100	; 0x64
    48e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Z_OOPS(Z_SYSCALL_MEMORY_READ(data, len));
    48ea:	4639      	mov	r1, r7
    48ec:	4630      	mov	r0, r6
    48ee:	f022 f8d9 	bl	26aa4 <arch_buffer_validate>
    48f2:	2800      	cmp	r0, #0
    48f4:	d0ef      	beq.n	48d6 <z_vrfy_z_log_hexdump_from_user+0x7e>
    48f6:	4c27      	ldr	r4, [pc, #156]	; (4994 <z_vrfy_z_log_hexdump_from_user+0x13c>)
    48f8:	f020 fa9b 	bl	24e32 <arch_is_user_context>
    48fc:	1b64      	subs	r4, r4, r5
    48fe:	08e4      	lsrs	r4, r4, #3
    4900:	01a4      	lsls	r4, r4, #6
    4902:	4b2c      	ldr	r3, [pc, #176]	; (49b4 <z_vrfy_z_log_hexdump_from_user+0x15c>)
    4904:	f044 0401 	orr.w	r4, r4, #1
    4908:	2800      	cmp	r0, #0
    490a:	d0d8      	beq.n	48be <z_vrfy_z_log_hexdump_from_user+0x66>
    490c:	e9cd 7300 	strd	r7, r3, [sp]
    4910:	4a21      	ldr	r2, [pc, #132]	; (4998 <z_vrfy_z_log_hexdump_from_user+0x140>)
    4912:	4927      	ldr	r1, [pc, #156]	; (49b0 <z_vrfy_z_log_hexdump_from_user+0x158>)
    4914:	4633      	mov	r3, r6
    4916:	4620      	mov	r0, r4
    4918:	f020 fabd 	bl	24e96 <log_from_user>
    491c:	e7b7      	b.n	488e <z_vrfy_z_log_hexdump_from_user+0x36>
	err = z_user_string_copy(kmeta, metadata, sizeof(kmeta));
    491e:	2242      	movs	r2, #66	; 0x42
    4920:	a807      	add	r0, sp, #28
    4922:	f01f fc65 	bl	241f0 <z_user_string_copy>
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(err == 0, "invalid meta passed in"));
    4926:	4602      	mov	r2, r0
    4928:	2800      	cmp	r0, #0
    492a:	d0de      	beq.n	48ea <z_vrfy_z_log_hexdump_from_user+0x92>
    492c:	f020 fa81 	bl	24e32 <arch_is_user_context>
    4930:	4b18      	ldr	r3, [pc, #96]	; (4994 <z_vrfy_z_log_hexdump_from_user+0x13c>)
    4932:	1b5b      	subs	r3, r3, r5
    4934:	08db      	lsrs	r3, r3, #3
    4936:	019b      	lsls	r3, r3, #6
    4938:	f043 0301 	orr.w	r3, r3, #1
    493c:	2800      	cmp	r0, #0
    493e:	d0ba      	beq.n	48b6 <z_vrfy_z_log_hexdump_from_user+0x5e>
    4940:	4a15      	ldr	r2, [pc, #84]	; (4998 <z_vrfy_z_log_hexdump_from_user+0x140>)
    4942:	491a      	ldr	r1, [pc, #104]	; (49ac <z_vrfy_z_log_hexdump_from_user+0x154>)
    4944:	e7a0      	b.n	4888 <z_vrfy_z_log_hexdump_from_user+0x30>
    4946:	4a1c      	ldr	r2, [pc, #112]	; (49b8 <z_vrfy_z_log_hexdump_from_user+0x160>)
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(
    4948:	f3c4 1389 	ubfx	r3, r4, #6, #10
    494c:	1b52      	subs	r2, r2, r5
    494e:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
    4952:	d3e4      	bcc.n	491e <z_vrfy_z_log_hexdump_from_user+0xc6>
    4954:	f020 fa6d 	bl	24e32 <arch_is_user_context>
    4958:	4b0e      	ldr	r3, [pc, #56]	; (4994 <z_vrfy_z_log_hexdump_from_user+0x13c>)
    495a:	1b5b      	subs	r3, r3, r5
    495c:	08db      	lsrs	r3, r3, #3
    495e:	019b      	lsls	r3, r3, #6
    4960:	f043 0301 	orr.w	r3, r3, #1
    4964:	2800      	cmp	r0, #0
    4966:	d0a2      	beq.n	48ae <z_vrfy_z_log_hexdump_from_user+0x56>
    4968:	4a0b      	ldr	r2, [pc, #44]	; (4998 <z_vrfy_z_log_hexdump_from_user+0x140>)
    496a:	490f      	ldr	r1, [pc, #60]	; (49a8 <z_vrfy_z_log_hexdump_from_user+0x150>)
    496c:	e78c      	b.n	4888 <z_vrfy_z_log_hexdump_from_user+0x30>
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(
    496e:	f013 0f38 	tst.w	r3, #56	; 0x38
    4972:	d0e8      	beq.n	4946 <z_vrfy_z_log_hexdump_from_user+0xee>
    4974:	f020 fa5d 	bl	24e32 <arch_is_user_context>
    4978:	4b06      	ldr	r3, [pc, #24]	; (4994 <z_vrfy_z_log_hexdump_from_user+0x13c>)
    497a:	1b5b      	subs	r3, r3, r5
    497c:	08db      	lsrs	r3, r3, #3
    497e:	019b      	lsls	r3, r3, #6
    4980:	f043 0301 	orr.w	r3, r3, #1
    4984:	2800      	cmp	r0, #0
    4986:	d08e      	beq.n	48a6 <z_vrfy_z_log_hexdump_from_user+0x4e>
    4988:	4a03      	ldr	r2, [pc, #12]	; (4998 <z_vrfy_z_log_hexdump_from_user+0x140>)
    498a:	4906      	ldr	r1, [pc, #24]	; (49a4 <z_vrfy_z_log_hexdump_from_user+0x14c>)
    498c:	e77c      	b.n	4888 <z_vrfy_z_log_hexdump_from_user+0x30>
    498e:	bf00      	nop
    4990:	0002a6d0 	.word	0x0002a6d0
    4994:	0002a810 	.word	0x0002a810
    4998:	0002caf7 	.word	0x0002caf7
    499c:	0002ca32 	.word	0x0002ca32
    49a0:	200023f4 	.word	0x200023f4
    49a4:	0002c9d4 	.word	0x0002c9d4
    49a8:	0002ca03 	.word	0x0002ca03
    49ac:	0002ca8f 	.word	0x0002ca8f
    49b0:	0002c8a6 	.word	0x0002c8a6
    49b4:	0002d10e 	.word	0x0002d10e
    49b8:	0002a840 	.word	0x0002a840

000049bc <z_mrsh_z_log_hexdump_from_user>:
#include <syscalls/log_core.h>

extern void z_vrfy_z_log_hexdump_from_user(uint32_t src_level_val, const char * metadata, const uint8_t * data, uint32_t len);
uintptr_t z_mrsh_z_log_hexdump_from_user(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
    49bc:	b570      	push	{r4, r5, r6, lr}
	_current->syscall_frame = ssf;
    49be:	4c06      	ldr	r4, [pc, #24]	; (49d8 <z_mrsh_z_log_hexdump_from_user+0x1c>)
    49c0:	9e06      	ldr	r6, [sp, #24]
    49c2:	68a5      	ldr	r5, [r4, #8]
    49c4:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	z_vrfy_z_log_hexdump_from_user(*(uint32_t*)&arg0, *(const char **)&arg1, *(const uint8_t **)&arg2, *(uint32_t*)&arg3)
    49c8:	f7ff ff46 	bl	4858 <z_vrfy_z_log_hexdump_from_user>
;
	_current->syscall_frame = NULL;
    49cc:	68a3      	ldr	r3, [r4, #8]
    49ce:	2000      	movs	r0, #0
    49d0:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	return 0;
}
    49d4:	bd70      	pop	{r4, r5, r6, pc}
    49d6:	bf00      	nop
    49d8:	200023f4 	.word	0x200023f4

000049dc <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    49dc:	2320      	movs	r3, #32
    49de:	4902      	ldr	r1, [pc, #8]	; (49e8 <log_msg_pool_init+0xc>)
    49e0:	4802      	ldr	r0, [pc, #8]	; (49ec <log_msg_pool_init+0x10>)
    49e2:	461a      	mov	r2, r3
    49e4:	f024 bd5a 	b.w	2949c <k_mem_slab_init>
    49e8:	20005030 	.word	0x20005030
    49ec:	20000bbc 	.word	0x20000bbc

000049f0 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    49f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	union log_msg_chunk *msg = NULL;
    49f4:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    49f6:	4f14      	ldr	r7, [pc, #80]	; (4a48 <log_msg_no_space_handle+0x58>)
	union log_msg_chunk *msg = NULL;
    49f8:	9301      	str	r3, [sp, #4]
	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
    49fa:	2501      	movs	r5, #1
	z_impl_log_panic();
}


extern bool z_impl_log_process(bool bypass);
static inline bool log_process(bool bypass)
    49fc:	f88d 5003 	strb.w	r5, [sp, #3]
static inline bool arch_is_user_context(void)
{
	uint32_t value;

	/* check for handler mode */
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
    4a00:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
    4a04:	b9cb      	cbnz	r3, 4a3a <log_msg_no_space_handle+0x4a>
		return false;
	}

	/* if not handler mode, return mode information */
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
    4a06:	f3ef 8314 	mrs	r3, CONTROL
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
    4a0a:	07db      	lsls	r3, r3, #31
    4a0c:	d515      	bpl.n	4a3a <log_msg_no_space_handle+0x4a>
	register uint32_t ret __asm__("r0") = arg1;
    4a0e:	f8dd 0003 	ldr.w	r0, [sp, #3]
	register uint32_t r6 __asm__("r6") = call_id;
    4a12:	26d0      	movs	r6, #208	; 0xd0
	__asm__ volatile("svc %[svid]\n"
    4a14:	df03      	svc	3
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
    4a16:	1e04      	subs	r4, r0, #0
    4a18:	bf18      	it	ne
    4a1a:	2401      	movne	r4, #1
			log_dropped();
    4a1c:	f7ff fb52 	bl	40c4 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    4a20:	2200      	movs	r2, #0
    4a22:	2300      	movs	r3, #0
    4a24:	a901      	add	r1, sp, #4
    4a26:	4638      	mov	r0, r7
    4a28:	f01c f874 	bl	20b14 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    4a2c:	b108      	cbz	r0, 4a32 <log_msg_no_space_handle+0x42>
    4a2e:	2c00      	cmp	r4, #0
    4a30:	d1e4      	bne.n	49fc <log_msg_no_space_handle+0xc>
	} else {
		log_dropped();
	}
	return msg;

}
    4a32:	9801      	ldr	r0, [sp, #4]
    4a34:	b002      	add	sp, #8
    4a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    4a3a:	f89d 0003 	ldrb.w	r0, [sp, #3]
    4a3e:	f7ff fc07 	bl	4250 <z_impl_log_process>
    4a42:	4604      	mov	r4, r0
    4a44:	e7ea      	b.n	4a1c <log_msg_no_space_handle+0x2c>
    4a46:	bf00      	nop
    4a48:	20000bbc 	.word	0x20000bbc

00004a4c <log_msg_chunk_alloc>:
{
    4a4c:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    4a4e:	2300      	movs	r3, #0
    4a50:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    4a52:	4807      	ldr	r0, [pc, #28]	; (4a70 <log_msg_chunk_alloc+0x24>)
    4a54:	2200      	movs	r2, #0
    4a56:	2300      	movs	r3, #0
    4a58:	a901      	add	r1, sp, #4
    4a5a:	f01c f85b 	bl	20b14 <k_mem_slab_alloc>
	if (err != 0) {
    4a5e:	b110      	cbz	r0, 4a66 <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
    4a60:	f7ff ffc6 	bl	49f0 <log_msg_no_space_handle>
    4a64:	9001      	str	r0, [sp, #4]
}
    4a66:	9801      	ldr	r0, [sp, #4]
    4a68:	b003      	add	sp, #12
    4a6a:	f85d fb04 	ldr.w	pc, [sp], #4
    4a6e:	bf00      	nop
    4a70:	20000bbc 	.word	0x20000bbc

00004a74 <msg_free>:
{
    4a74:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    4a76:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
    4a78:	7a46      	ldrb	r6, [r0, #9]
{
    4a7a:	b085      	sub	sp, #20
	if (log_msg_is_std(msg) && nargs) {
    4a7c:	07dc      	lsls	r4, r3, #31
{
    4a7e:	9001      	str	r0, [sp, #4]
	return msg->hdr.params.std.nargs;
    4a80:	ea4f 1616 	mov.w	r6, r6, lsr #4
	if (log_msg_is_std(msg) && nargs) {
    4a84:	d42b      	bmi.n	4ade <msg_free+0x6a>
    4a86:	b356      	cbz	r6, 4ade <msg_free+0x6a>
		uint32_t smask = 0U;
    4a88:	2400      	movs	r4, #0
		for (i = 0U; i < nargs; i++) {
    4a8a:	4625      	mov	r5, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
    4a8c:	9801      	ldr	r0, [sp, #4]
    4a8e:	4629      	mov	r1, r5
    4a90:	f020 fb33 	bl	250fa <log_msg_arg_get>
    4a94:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    4a96:	f7ff fbb1 	bl	41fc <log_is_strdup>
    4a9a:	b170      	cbz	r0, 4aba <msg_free+0x46>
				if (smask == 0U) {
    4a9c:	b934      	cbnz	r4, 4aac <msg_free+0x38>
					smask = z_log_get_s_mask(
    4a9e:	9b01      	ldr	r3, [sp, #4]
    4aa0:	4631      	mov	r1, r6
    4aa2:	6918      	ldr	r0, [r3, #16]
    4aa4:	f7ff fa98 	bl	3fd8 <z_log_get_s_mask>
					if (smask == 0U) {
    4aa8:	4604      	mov	r4, r0
    4aaa:	b148      	cbz	r0, 4ac0 <msg_free+0x4c>
				if (smask & BIT(i)) {
    4aac:	fa24 f305 	lsr.w	r3, r4, r5
    4ab0:	07d8      	lsls	r0, r3, #31
    4ab2:	d502      	bpl.n	4aba <msg_free+0x46>
					log_free(buf);
    4ab4:	4638      	mov	r0, r7
    4ab6:	f7ff fbb1 	bl	421c <log_free>
		for (i = 0U; i < nargs; i++) {
    4aba:	3501      	adds	r5, #1
    4abc:	42ae      	cmp	r6, r5
    4abe:	d8e5      	bhi.n	4a8c <msg_free+0x18>
	if (msg->hdr.params.generic.ext == 1) {
    4ac0:	9b01      	ldr	r3, [sp, #4]
    4ac2:	7a1a      	ldrb	r2, [r3, #8]
    4ac4:	0792      	lsls	r2, r2, #30
    4ac6:	d504      	bpl.n	4ad2 <msg_free+0x5e>
		cont_free(msg->payload.ext.next);
    4ac8:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    4aca:	4c0f      	ldr	r4, [pc, #60]	; (4b08 <msg_free+0x94>)
    4acc:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    4ace:	9b03      	ldr	r3, [sp, #12]
    4ad0:	b993      	cbnz	r3, 4af8 <msg_free+0x84>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    4ad2:	480d      	ldr	r0, [pc, #52]	; (4b08 <msg_free+0x94>)
    4ad4:	a901      	add	r1, sp, #4
    4ad6:	f01c f84f 	bl	20b78 <k_mem_slab_free>
}
    4ada:	b005      	add	sp, #20
    4adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return msg->hdr.ids.level;
    4ade:	7a83      	ldrb	r3, [r0, #10]
	} else if (IS_ENABLED(CONFIG_USERSPACE) &&
    4ae0:	0759      	lsls	r1, r3, #29
    4ae2:	d0ed      	beq.n	4ac0 <msg_free+0x4c>
	return arg;
}

const char *log_msg_str_get(struct log_msg *msg)
{
	return msg->str;
    4ae4:	6904      	ldr	r4, [r0, #16]
		if (log_is_strdup(str)) {
    4ae6:	4620      	mov	r0, r4
    4ae8:	f7ff fb88 	bl	41fc <log_is_strdup>
    4aec:	2800      	cmp	r0, #0
    4aee:	d0e7      	beq.n	4ac0 <msg_free+0x4c>
			log_free((void *)(str));
    4af0:	4620      	mov	r0, r4
    4af2:	f7ff fb93 	bl	421c <log_free>
    4af6:	e7e3      	b.n	4ac0 <msg_free+0x4c>
		next = cont->next;
    4af8:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    4afa:	a903      	add	r1, sp, #12
    4afc:	4620      	mov	r0, r4
    4afe:	f01c f83b 	bl	20b78 <k_mem_slab_free>
		cont = next;
    4b02:	9503      	str	r5, [sp, #12]
    4b04:	e7e3      	b.n	4ace <msg_free+0x5a>
    4b06:	bf00      	nop
    4b08:	20000bbc 	.word	0x20000bbc

00004b0c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    4b0c:	b40e      	push	{r1, r2, r3}
    4b0e:	b503      	push	{r0, r1, lr}
    4b10:	ab03      	add	r3, sp, #12
    4b12:	4601      	mov	r1, r0
    4b14:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    4b18:	4804      	ldr	r0, [pc, #16]	; (4b2c <print_formatted+0x20>)
	va_start(args, fmt);
    4b1a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    4b1c:	f7fe fdfe 	bl	371c <cbvprintf>
	va_end(args);

	return length;
}
    4b20:	b002      	add	sp, #8
    4b22:	f85d eb04 	ldr.w	lr, [sp], #4
    4b26:	b003      	add	sp, #12
    4b28:	4770      	bx	lr
    4b2a:	bf00      	nop
    4b2c:	000255bb 	.word	0x000255bb

00004b30 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, uint16_t source_id)
{
    4b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4b34:	b085      	sub	sp, #20
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    4b36:	f011 0402 	ands.w	r4, r1, #2
{
    4b3a:	4690      	mov	r8, r2
    4b3c:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    4b40:	4606      	mov	r6, r0
    4b42:	461a      	mov	r2, r3
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    4b44:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    4b48:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    4b4c:	d007      	beq.n	4b5e <prefix_print+0x2e>
	if (!format) {
    4b4e:	f011 0f44 	tst.w	r1, #68	; 0x44
    4b52:	d137      	bne.n	4bc4 <prefix_print+0x94>
		length = print_formatted(output, "[%08lu] ", timestamp);
    4b54:	4932      	ldr	r1, [pc, #200]	; (4c20 <prefix_print+0xf0>)
    4b56:	f7ff ffd9 	bl	4b0c <print_formatted>
			length = print_formatted(output,
    4b5a:	4601      	mov	r1, r0
		length += timestamp_print(output, flags, timestamp);
    4b5c:	460c      	mov	r4, r1
	if (color) {
    4b5e:	f1b9 0f00 	cmp.w	r9, #0
    4b62:	d00a      	beq.n	4b7a <prefix_print+0x4a>
		const char *log_color = start && (colors[level] != NULL) ?
    4b64:	4b2f      	ldr	r3, [pc, #188]	; (4c24 <prefix_print+0xf4>)
		print_formatted(output, "%s", log_color);
    4b66:	4930      	ldr	r1, [pc, #192]	; (4c28 <prefix_print+0xf8>)
		const char *log_color = start && (colors[level] != NULL) ?
    4b68:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(output, "%s", log_color);
    4b6c:	4b2f      	ldr	r3, [pc, #188]	; (4c2c <prefix_print+0xfc>)
    4b6e:	4630      	mov	r0, r6
    4b70:	2a00      	cmp	r2, #0
    4b72:	bf08      	it	eq
    4b74:	461a      	moveq	r2, r3
    4b76:	f7ff ffc9 	bl	4b0c <print_formatted>
	if (level_on) {
    4b7a:	b13d      	cbz	r5, 4b8c <prefix_print+0x5c>
		total += print_formatted(output, "<%s> ", severity[level]);
    4b7c:	4b2c      	ldr	r3, [pc, #176]	; (4c30 <prefix_print+0x100>)
    4b7e:	492d      	ldr	r1, [pc, #180]	; (4c34 <prefix_print+0x104>)
    4b80:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    4b84:	4630      	mov	r0, r6
    4b86:	f7ff ffc1 	bl	4b0c <print_formatted>
    4b8a:	4605      	mov	r5, r0
	total += print_formatted(output,
    4b8c:	f1b8 0f00 	cmp.w	r8, #0
    4b90:	d043      	beq.n	4c1a <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    4b92:	2301      	movs	r3, #1
    4b94:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(output,
    4b98:	4b27      	ldr	r3, [pc, #156]	; (4c38 <prefix_print+0x108>)
    4b9a:	f017 0f10 	tst.w	r7, #16
    4b9e:	4f27      	ldr	r7, [pc, #156]	; (4c3c <prefix_print+0x10c>)
    4ba0:	bf18      	it	ne
    4ba2:	461f      	movne	r7, r3
    4ba4:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    4ba8:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    4bac:	f7ff fa9a 	bl	40e4 <log_source_name_get>
    4bb0:	4639      	mov	r1, r7
    4bb2:	4602      	mov	r2, r0
    4bb4:	4630      	mov	r0, r6
    4bb6:	f7ff ffa9 	bl	4b0c <print_formatted>
    4bba:	4428      	add	r0, r5

	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);

	return length;
}
    4bbc:	4420      	add	r0, r4
    4bbe:	b005      	add	sp, #20
    4bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    4bc4:	4b1e      	ldr	r3, [pc, #120]	; (4c40 <prefix_print+0x110>)
    4bc6:	6819      	ldr	r1, [r3, #0]
    4bc8:	2900      	cmp	r1, #0
    4bca:	d0c7      	beq.n	4b5c <prefix_print+0x2c>
		timestamp /= timestamp_div;
    4bcc:	4b1d      	ldr	r3, [pc, #116]	; (4c44 <prefix_print+0x114>)
    4bce:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    4bd2:	681b      	ldr	r3, [r3, #0]
    4bd4:	fbb2 f3f3 	udiv	r3, r2, r3
		ms = (remainder * 1000U) / freq;
    4bd8:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		total_seconds = timestamp / freq;
    4bdc:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    4be0:	fbb4 f2fe 	udiv	r2, r4, lr
    4be4:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
    4be8:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    4bec:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    4bf0:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    4bf4:	fbb4 fbf1 	udiv	fp, r4, r1
    4bf8:	fb01 441b 	mls	r4, r1, fp, r4
    4bfc:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    4c00:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    4c04:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(output,
    4c08:	e9cd b101 	strd	fp, r1, [sp, #4]
    4c0c:	fb0a e113 	mls	r1, sl, r3, lr
    4c10:	9100      	str	r1, [sp, #0]
    4c12:	490d      	ldr	r1, [pc, #52]	; (4c48 <prefix_print+0x118>)
    4c14:	f7ff ff7a 	bl	4b0c <print_formatted>
    4c18:	e79f      	b.n	4b5a <prefix_print+0x2a>
	total += print_formatted(output,
    4c1a:	4f08      	ldr	r7, [pc, #32]	; (4c3c <prefix_print+0x10c>)
    4c1c:	e7c2      	b.n	4ba4 <prefix_print+0x74>
    4c1e:	bf00      	nop
    4c20:	0002cb24 	.word	0x0002cb24
    4c24:	0002a9b0 	.word	0x0002a9b0
    4c28:	0002d91f 	.word	0x0002d91f
    4c2c:	0002cb16 	.word	0x0002cb16
    4c30:	0002a9c4 	.word	0x0002a9c4
    4c34:	0002cb49 	.word	0x0002cb49
    4c38:	0002cb20 	.word	0x0002cb20
    4c3c:	0002cb1b 	.word	0x0002cb1b
    4c40:	20000bd8 	.word	0x20000bd8
    4c44:	20000bdc 	.word	0x20000bdc
    4c48:	0002cb2d 	.word	0x0002cb2d

00004c4c <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
    4c4c:	b538      	push	{r3, r4, r5, lr}
    4c4e:	460c      	mov	r4, r1
	if (color) {
    4c50:	07e1      	lsls	r1, r4, #31
{
    4c52:	4605      	mov	r5, r0
	if (color) {
    4c54:	d503      	bpl.n	4c5e <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
    4c56:	4a08      	ldr	r2, [pc, #32]	; (4c78 <postfix_print+0x2c>)
    4c58:	4908      	ldr	r1, [pc, #32]	; (4c7c <postfix_print+0x30>)
    4c5a:	f7ff ff57 	bl	4b0c <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    4c5e:	06e2      	lsls	r2, r4, #27
    4c60:	d408      	bmi.n	4c74 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    4c62:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    4c64:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    4c66:	bf4c      	ite	mi
    4c68:	4905      	ldrmi	r1, [pc, #20]	; (4c80 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    4c6a:	4906      	ldrpl	r1, [pc, #24]	; (4c84 <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
    4c6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    4c70:	f7ff bf4c 	b.w	4b0c <print_formatted>
}
    4c74:	bd38      	pop	{r3, r4, r5, pc}
    4c76:	bf00      	nop
    4c78:	0002cb16 	.word	0x0002cb16
    4c7c:	0002d91f 	.word	0x0002d91f
    4c80:	0002cb50 	.word	0x0002cb50
    4c84:	0002cb4f 	.word	0x0002cb4f

00004c88 <hexdump_line_print>:
{
    4c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4c8c:	461d      	mov	r5, r3
    4c8e:	9b08      	ldr	r3, [sp, #32]
    4c90:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    4c92:	06da      	lsls	r2, r3, #27
{
    4c94:	4604      	mov	r4, r0
    4c96:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    4c98:	d405      	bmi.n	4ca6 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    4c9a:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    4c9c:	bf4c      	ite	mi
    4c9e:	492b      	ldrmi	r1, [pc, #172]	; (4d4c <hexdump_line_print+0xc4>)
		print_formatted(ctx, "\r\n");
    4ca0:	492b      	ldrpl	r1, [pc, #172]	; (4d50 <hexdump_line_print+0xc8>)
    4ca2:	f7ff ff33 	bl	4b0c <print_formatted>
		print_formatted(output, " ");
    4ca6:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 4d58 <hexdump_line_print+0xd0>
{
    4caa:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    4cae:	45a8      	cmp	r8, r5
    4cb0:	db2d      	blt.n	4d0e <hexdump_line_print+0x86>
			print_formatted(output, "   ");
    4cb2:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 4d5c <hexdump_line_print+0xd4>
			print_formatted(output, "%02x ", data[i]);
    4cb6:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 4d60 <hexdump_line_print+0xd8>
			print_formatted(output, " ");
    4cba:	f8df a09c 	ldr.w	sl, [pc, #156]	; 4d58 <hexdump_line_print+0xd0>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    4cbe:	2500      	movs	r5, #0
		if (i < length) {
    4cc0:	42bd      	cmp	r5, r7
    4cc2:	d232      	bcs.n	4d2a <hexdump_line_print+0xa2>
			print_formatted(output, "%02x ", data[i]);
    4cc4:	5d72      	ldrb	r2, [r6, r5]
    4cc6:	4649      	mov	r1, r9
    4cc8:	4620      	mov	r0, r4
    4cca:	f7ff ff1f 	bl	4b0c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    4cce:	3501      	adds	r5, #1
    4cd0:	2d10      	cmp	r5, #16
    4cd2:	d123      	bne.n	4d1c <hexdump_line_print+0x94>
	print_formatted(output, "|");
    4cd4:	491f      	ldr	r1, [pc, #124]	; (4d54 <hexdump_line_print+0xcc>)
			print_formatted(output, " ");
    4cd6:	f8df 8080 	ldr.w	r8, [pc, #128]	; 4d58 <hexdump_line_print+0xd0>
			      isprint((int)c) ? c : '.');
    4cda:	f8df 9088 	ldr.w	r9, [pc, #136]	; 4d64 <hexdump_line_print+0xdc>
			print_formatted(output, "%c",
    4cde:	f8df a088 	ldr.w	sl, [pc, #136]	; 4d68 <hexdump_line_print+0xe0>
	print_formatted(output, "|");
    4ce2:	4620      	mov	r0, r4
    4ce4:	f7ff ff12 	bl	4b0c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    4ce8:	2500      	movs	r5, #0
		if (i < length) {
    4cea:	42af      	cmp	r7, r5
    4cec:	d929      	bls.n	4d42 <hexdump_line_print+0xba>
			char c = (char)data[i];
    4cee:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(output, "%c",
    4cf0:	f812 3009 	ldrb.w	r3, [r2, r9]
    4cf4:	f013 0f97 	tst.w	r3, #151	; 0x97
    4cf8:	bf08      	it	eq
    4cfa:	222e      	moveq	r2, #46	; 0x2e
    4cfc:	4651      	mov	r1, sl
    4cfe:	4620      	mov	r0, r4
    4d00:	f7ff ff04 	bl	4b0c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    4d04:	3501      	adds	r5, #1
    4d06:	2d10      	cmp	r5, #16
    4d08:	d114      	bne.n	4d34 <hexdump_line_print+0xac>
}
    4d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
    4d0e:	4649      	mov	r1, r9
    4d10:	4620      	mov	r0, r4
    4d12:	f7ff fefb 	bl	4b0c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    4d16:	f108 0801 	add.w	r8, r8, #1
    4d1a:	e7c8      	b.n	4cae <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    4d1c:	076a      	lsls	r2, r5, #29
    4d1e:	d1cf      	bne.n	4cc0 <hexdump_line_print+0x38>
			print_formatted(output, " ");
    4d20:	4651      	mov	r1, sl
    4d22:	4620      	mov	r0, r4
    4d24:	f7ff fef2 	bl	4b0c <print_formatted>
    4d28:	e7ca      	b.n	4cc0 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
    4d2a:	4641      	mov	r1, r8
    4d2c:	4620      	mov	r0, r4
    4d2e:	f7ff feed 	bl	4b0c <print_formatted>
    4d32:	e7cc      	b.n	4cce <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    4d34:	076b      	lsls	r3, r5, #29
    4d36:	d1d8      	bne.n	4cea <hexdump_line_print+0x62>
			print_formatted(output, " ");
    4d38:	4641      	mov	r1, r8
    4d3a:	4620      	mov	r0, r4
    4d3c:	f7ff fee6 	bl	4b0c <print_formatted>
    4d40:	e7d3      	b.n	4cea <hexdump_line_print+0x62>
			print_formatted(output, " ");
    4d42:	4641      	mov	r1, r8
    4d44:	4620      	mov	r0, r4
    4d46:	f7ff fee1 	bl	4b0c <print_formatted>
    4d4a:	e7db      	b.n	4d04 <hexdump_line_print+0x7c>
    4d4c:	0002cb50 	.word	0x0002cb50
    4d50:	0002cb4f 	.word	0x0002cb4f
    4d54:	0002cb5c 	.word	0x0002cb5c
    4d58:	0002cb5a 	.word	0x0002cb5a
    4d5c:	0002cb58 	.word	0x0002cb58
    4d60:	0002cb52 	.word	0x0002cb52
    4d64:	0002f8fc 	.word	0x0002f8fc
    4d68:	0002cb5e 	.word	0x0002cb5e

00004d6c <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg,
			    uint32_t flags)
{
    4d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4d70:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(output, flags, std_msg, timestamp,
    4d72:	f013 0807 	ands.w	r8, r3, #7
{
    4d76:	4617      	mov	r7, r2
    4d78:	b08a      	sub	sp, #40	; 0x28
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    4d7a:	7a0a      	ldrb	r2, [r1, #8]
    4d7c:	4605      	mov	r5, r0
    4d7e:	460e      	mov	r6, r1
			0 : prefix_print(output, flags, std_msg, timestamp,
    4d80:	d020      	beq.n	4dc4 <log_output_msg_process+0x58>
	return msg->hdr.ids.source_id;
    4d82:	8949      	ldrh	r1, [r1, #10]
    4d84:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    4d88:	0989      	lsrs	r1, r1, #6
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    4d8a:	43d2      	mvns	r2, r2
    4d8c:	e9cd 8300 	strd	r8, r3, [sp]
    4d90:	9102      	str	r1, [sp, #8]
    4d92:	68f3      	ldr	r3, [r6, #12]
    4d94:	f002 0201 	and.w	r2, r2, #1
    4d98:	4639      	mov	r1, r7
    4d9a:	f7ff fec9 	bl	4b30 <prefix_print>
    4d9e:	4681      	mov	r9, r0
    4da0:	7a34      	ldrb	r4, [r6, #8]
    4da2:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    4da4:	f014 0401 	ands.w	r4, r4, #1
    4da8:	d00e      	beq.n	4dc8 <log_output_msg_process+0x5c>
		std_print(msg, output);
    4daa:	4629      	mov	r1, r5
    4dac:	4630      	mov	r0, r6
    4dae:	f020 fa9a 	bl	252e6 <std_print>
		raw_string_print(msg, output);
	} else {
		hexdump_print(msg, output, prefix_offset, flags);
	}

	if (!raw_string) {
    4db2:	f1b8 0f00 	cmp.w	r8, #0
    4db6:	d02b      	beq.n	4e10 <log_output_msg_process+0xa4>
		postfix_print(output, flags, level);
    4db8:	4642      	mov	r2, r8
    4dba:	4639      	mov	r1, r7
    4dbc:	4628      	mov	r0, r5
    4dbe:	f7ff ff45 	bl	4c4c <postfix_print>
    4dc2:	e025      	b.n	4e10 <log_output_msg_process+0xa4>
			0 : prefix_print(output, flags, std_msg, timestamp,
    4dc4:	46c1      	mov	r9, r8
    4dc6:	e7eb      	b.n	4da0 <log_output_msg_process+0x34>
	} else if (raw_string) {
    4dc8:	f1b8 0f00 	cmp.w	r8, #0
    4dcc:	d126      	bne.n	4e1c <log_output_msg_process+0xb0>
	size_t offset = 0;
    4dce:	4627      	mov	r7, r4
		length = output->size;
    4dd0:	68eb      	ldr	r3, [r5, #12]
    4dd2:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
    4dd4:	aa06      	add	r2, sp, #24
    4dd6:	463b      	mov	r3, r7
    4dd8:	68a9      	ldr	r1, [r5, #8]
    4dda:	4630      	mov	r0, r6
    4ddc:	f020 fa6f 	bl	252be <log_msg_hexdump_data_get>
		output->control_block->offset = length;
    4de0:	9a06      	ldr	r2, [sp, #24]
    4de2:	686b      	ldr	r3, [r5, #4]
    4de4:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    4de6:	b13a      	cbz	r2, 4df8 <log_output_msg_process+0x8c>
			eol = (output->buf[length - 1] == '\n');
    4de8:	68ab      	ldr	r3, [r5, #8]
    4dea:	4413      	add	r3, r2
    4dec:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    4df0:	f1a4 030a 	sub.w	r3, r4, #10
    4df4:	425c      	negs	r4, r3
    4df6:	415c      	adcs	r4, r3
		log_output_flush(output);
    4df8:	4628      	mov	r0, r5
    4dfa:	f020 fbd1 	bl	255a0 <log_output_flush>
		offset += length;
    4dfe:	9b06      	ldr	r3, [sp, #24]
    4e00:	441f      	add	r7, r3
	} while (length > 0);
    4e02:	2b00      	cmp	r3, #0
    4e04:	d1e4      	bne.n	4dd0 <log_output_msg_process+0x64>
	if (eol) {
    4e06:	b11c      	cbz	r4, 4e10 <log_output_msg_process+0xa4>
		print_formatted(output, "\r");
    4e08:	4913      	ldr	r1, [pc, #76]	; (4e58 <log_output_msg_process+0xec>)
    4e0a:	4628      	mov	r0, r5
    4e0c:	f7ff fe7e 	bl	4b0c <print_formatted>
	}

	log_output_flush(output);
    4e10:	4628      	mov	r0, r5
    4e12:	f020 fbc5 	bl	255a0 <log_output_flush>
}
    4e16:	b00a      	add	sp, #40	; 0x28
    4e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(output, "%s", log_msg_str_get(msg));
    4e1c:	4630      	mov	r0, r6
    4e1e:	f020 f99e 	bl	2515e <log_msg_str_get>
    4e22:	490e      	ldr	r1, [pc, #56]	; (4e5c <log_output_msg_process+0xf0>)
    4e24:	4602      	mov	r2, r0
    4e26:	4628      	mov	r0, r5
    4e28:	f7ff fe70 	bl	4b0c <print_formatted>
		length = sizeof(buf);
    4e2c:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    4e30:	aa05      	add	r2, sp, #20
    4e32:	4623      	mov	r3, r4
    4e34:	a906      	add	r1, sp, #24
    4e36:	4630      	mov	r0, r6
		length = sizeof(buf);
    4e38:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    4e3c:	f020 fa3f 	bl	252be <log_msg_hexdump_data_get>
		if (length) {
    4e40:	9a05      	ldr	r2, [sp, #20]
    4e42:	2a00      	cmp	r2, #0
    4e44:	d0b8      	beq.n	4db8 <log_output_msg_process+0x4c>
			hexdump_line_print(output, buf, length,
    4e46:	464b      	mov	r3, r9
    4e48:	9700      	str	r7, [sp, #0]
    4e4a:	a906      	add	r1, sp, #24
    4e4c:	4628      	mov	r0, r5
    4e4e:	f7ff ff1b 	bl	4c88 <hexdump_line_print>
			offset += length;
    4e52:	9b05      	ldr	r3, [sp, #20]
    4e54:	441c      	add	r4, r3
		length = sizeof(buf);
    4e56:	e7eb      	b.n	4e30 <log_output_msg_process+0xc4>
    4e58:	0002cb61 	.word	0x0002cb61
    4e5c:	0002d91f 	.word	0x0002d91f

00004e60 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    4e60:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    4e62:	f242 730f 	movw	r3, #9999	; 0x270f
    4e66:	428b      	cmp	r3, r1
    4e68:	bf28      	it	cs
    4e6a:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    4e6c:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    4e6e:	4a0f      	ldr	r2, [pc, #60]	; (4eac <log_output_dropped_process+0x4c>)
{
    4e70:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    4e72:	2105      	movs	r1, #5
    4e74:	4668      	mov	r0, sp
    4e76:	f01f fbc2 	bl	245fe <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    4e7a:	6863      	ldr	r3, [r4, #4]
    4e7c:	490c      	ldr	r1, [pc, #48]	; (4eb0 <log_output_dropped_process+0x50>)
    4e7e:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    4e80:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    4e82:	220b      	movs	r2, #11
    4e84:	4628      	mov	r0, r5
    4e86:	f020 fa21 	bl	252cc <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    4e8a:	6863      	ldr	r3, [r4, #4]
    4e8c:	4632      	mov	r2, r6
    4e8e:	4669      	mov	r1, sp
    4e90:	4628      	mov	r0, r5
    4e92:	685b      	ldr	r3, [r3, #4]
    4e94:	f020 fa1a 	bl	252cc <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    4e98:	6863      	ldr	r3, [r4, #4]
    4e9a:	4906      	ldr	r1, [pc, #24]	; (4eb4 <log_output_dropped_process+0x54>)
    4e9c:	685b      	ldr	r3, [r3, #4]
    4e9e:	221b      	movs	r2, #27
    4ea0:	4628      	mov	r0, r5
    4ea2:	f020 fa13 	bl	252cc <buffer_write>
		     output->control_block->ctx);
}
    4ea6:	b002      	add	sp, #8
    4ea8:	bd70      	pop	{r4, r5, r6, pc}
    4eaa:	bf00      	nop
    4eac:	0002eb6b 	.word	0x0002eb6b
    4eb0:	0002cb9f 	.word	0x0002cb9f
    4eb4:	0002cb83 	.word	0x0002cb83

00004eb8 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    4eb8:	4a08      	ldr	r2, [pc, #32]	; (4edc <log_output_timestamp_freq_set+0x24>)
{
    4eba:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    4ebc:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    4ebe:	4c08      	ldr	r4, [pc, #32]	; (4ee0 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    4ec0:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    4ec2:	2100      	movs	r1, #0
    4ec4:	42a0      	cmp	r0, r4
    4ec6:	d804      	bhi.n	4ed2 <log_output_timestamp_freq_set+0x1a>
    4ec8:	b101      	cbz	r1, 4ecc <log_output_timestamp_freq_set+0x14>
    4eca:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    4ecc:	4b05      	ldr	r3, [pc, #20]	; (4ee4 <log_output_timestamp_freq_set+0x2c>)
    4ece:	6018      	str	r0, [r3, #0]
}
    4ed0:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    4ed2:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    4ed4:	005b      	lsls	r3, r3, #1
    4ed6:	2101      	movs	r1, #1
    4ed8:	e7f4      	b.n	4ec4 <log_output_timestamp_freq_set+0xc>
    4eda:	bf00      	nop
    4edc:	20000bdc 	.word	0x20000bdc
    4ee0:	000f4240 	.word	0x000f4240
    4ee4:	20000bd8 	.word	0x20000bd8

00004ee8 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    4ee8:	4b01      	ldr	r3, [pc, #4]	; (4ef0 <log_backend_rtt_init+0x8>)
    4eea:	2201      	movs	r2, #1
    4eec:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    4eee:	4770      	bx	lr
    4ef0:	2000253c 	.word	0x2000253c

00004ef4 <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = true;
    4ef4:	4b02      	ldr	r3, [pc, #8]	; (4f00 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    4ef6:	4803      	ldr	r0, [pc, #12]	; (4f04 <panic+0x10>)
    4ef8:	2201      	movs	r2, #1
    4efa:	701a      	strb	r2, [r3, #0]
    4efc:	f020 bb50 	b.w	255a0 <log_output_flush>
    4f00:	2000253d 	.word	0x2000253d
    4f04:	0002a9f0 	.word	0x0002a9f0

00004f08 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    4f08:	4801      	ldr	r0, [pc, #4]	; (4f10 <dropped+0x8>)
    4f0a:	f7ff bfa9 	b.w	4e60 <log_output_dropped_process>
    4f0e:	bf00      	nop
    4f10:	0002a9f0 	.word	0x0002a9f0

00004f14 <put>:
{
    4f14:	b510      	push	{r4, lr}
	log_msg_get(msg);
    4f16:	4608      	mov	r0, r1
    4f18:	460c      	mov	r4, r1
    4f1a:	f020 f8de 	bl	250da <log_msg_get>
	log_output_msg_process(output, msg, flags);
    4f1e:	4805      	ldr	r0, [pc, #20]	; (4f34 <put+0x20>)
    4f20:	4621      	mov	r1, r4
    4f22:	220f      	movs	r2, #15
    4f24:	f7ff ff22 	bl	4d6c <log_output_msg_process>
	log_msg_put(msg);
    4f28:	4620      	mov	r0, r4
}
    4f2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4f2e:	f020 b903 	b.w	25138 <log_msg_put>
    4f32:	bf00      	nop
    4f34:	0002a9f0 	.word	0x0002a9f0

00004f38 <on_failed_write.part.0>:
static void on_failed_write(int retry_cnt)
    4f38:	e92d 4148 	stmdb	sp!, {r3, r6, r8, lr}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    4f3c:	4b0f      	ldr	r3, [pc, #60]	; (4f7c <on_failed_write.part.0+0x44>)
	} else if (is_sync_mode()) {
    4f3e:	7819      	ldrb	r1, [r3, #0]
    4f40:	b171      	cbz	r1, 4f60 <on_failed_write.part.0+0x28>
	ret = arch_is_user_context();
    4f42:	f020 fb55 	bl	255f0 <arch_is_user_context>
	if (z_syscall_trap()) {
    4f46:	b128      	cbz	r0, 4f54 <on_failed_write.part.0+0x1c>
	register uint32_t ret __asm__("r0") = arg1;
    4f48:	f241 3088 	movw	r0, #5000	; 0x1388
	register uint32_t r6 __asm__("r6") = call_id;
    4f4c:	266f      	movs	r6, #111	; 0x6f
	__asm__ volatile("svc %[svid]\n"
    4f4e:	df03      	svc	3
}
    4f50:	e8bd 8148 	ldmia.w	sp!, {r3, r6, r8, pc}
	z_impl_k_busy_wait(usec_to_wait);
    4f54:	f241 3088 	movw	r0, #5000	; 0x1388
    4f58:	e8bd 4148 	ldmia.w	sp!, {r3, r6, r8, lr}
    4f5c:	f024 bdab 	b.w	29ab6 <z_impl_k_busy_wait>
    4f60:	f020 fb46 	bl	255f0 <arch_is_user_context>
	if (z_syscall_trap()) {
    4f64:	b118      	cbz	r0, 4f6e <on_failed_write.part.0+0x36>
	register uint32_t ret __asm__("r0") = arg1;
    4f66:	20a4      	movs	r0, #164	; 0xa4
	register uint32_t r6 __asm__("r6") = call_id;
    4f68:	4606      	mov	r6, r0
	__asm__ volatile("svc %[svid]\n"
    4f6a:	df03      	svc	3
    4f6c:	e7f0      	b.n	4f50 <on_failed_write.part.0+0x18>
	return z_impl_k_sleep(timeout);
    4f6e:	20a4      	movs	r0, #164	; 0xa4
    4f70:	e8bd 4148 	ldmia.w	sp!, {r3, r6, r8, lr}
    4f74:	2100      	movs	r1, #0
    4f76:	f01c be27 	b.w	21bc8 <z_impl_k_sleep>
    4f7a:	bf00      	nop
    4f7c:	2000253d 	.word	0x2000253d

00004f80 <data_out_block_mode>:
{
    4f80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    4f84:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 503c <data_out_block_mode+0xbc>
	return z_impl_k_mutex_lock(mutex, timeout);
    4f88:	4f2a      	ldr	r7, [pc, #168]	; (5034 <data_out_block_mode+0xb4>)
{
    4f8a:	4681      	mov	r9, r0
    4f8c:	460d      	mov	r5, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    4f8e:	2404      	movs	r4, #4
    4f90:	46d3      	mov	fp, sl
		if (!is_sync_mode()) {
    4f92:	f89a 3000 	ldrb.w	r3, [sl]
    4f96:	b943      	cbnz	r3, 4faa <data_out_block_mode+0x2a>
    4f98:	f020 fb2a 	bl	255f0 <arch_is_user_context>
	if (z_syscall_trap()) {
    4f9c:	b300      	cbz	r0, 4fe0 <data_out_block_mode+0x60>
	register uint32_t r1 __asm__("r1") = arg2;
    4f9e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	register uint32_t ret __asm__("r0") = arg1;
    4fa2:	4638      	mov	r0, r7
	register uint32_t r2 __asm__("r2") = arg3;
    4fa4:	460a      	mov	r2, r1
	register uint32_t r6 __asm__("r6") = call_id;
    4fa6:	2688      	movs	r6, #136	; 0x88
	__asm__ volatile("svc %[svid]\n"
    4fa8:	df03      	svc	3
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    4faa:	462a      	mov	r2, r5
    4fac:	4649      	mov	r1, r9
    4fae:	2000      	movs	r0, #0
    4fb0:	f000 fd72 	bl	5a98 <SEGGER_RTT_WriteSkipNoLock>
		if (!is_sync_mode()) {
    4fb4:	f89b 3000 	ldrb.w	r3, [fp]
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    4fb8:	9001      	str	r0, [sp, #4]
		if (!is_sync_mode()) {
    4fba:	b92b      	cbnz	r3, 4fc8 <data_out_block_mode+0x48>
    4fbc:	f020 fb18 	bl	255f0 <arch_is_user_context>
	if (z_syscall_trap()) {
    4fc0:	b1b0      	cbz	r0, 4ff0 <data_out_block_mode+0x70>
	register uint32_t ret __asm__("r0") = arg1;
    4fc2:	4638      	mov	r0, r7
	register uint32_t r6 __asm__("r6") = call_id;
    4fc4:	2689      	movs	r6, #137	; 0x89
	__asm__ volatile("svc %[svid]\n"
    4fc6:	df03      	svc	3
		if (ret) {
    4fc8:	9b01      	ldr	r3, [sp, #4]
    4fca:	4e1b      	ldr	r6, [pc, #108]	; (5038 <data_out_block_mode+0xb8>)
    4fcc:	b32b      	cbz	r3, 501a <data_out_block_mode+0x9a>
	host_present = true;
    4fce:	2301      	movs	r3, #1
    4fd0:	7033      	strb	r3, [r6, #0]
	if (is_panic_mode()) {
    4fd2:	f89b 3000 	ldrb.w	r3, [fp]
    4fd6:	b99b      	cbnz	r3, 5000 <data_out_block_mode+0x80>
}
    4fd8:	4628      	mov	r0, r5
    4fda:	b003      	add	sp, #12
    4fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
    4fe0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4fe4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4fe8:	4638      	mov	r0, r7
    4fea:	f01b fe2d 	bl	20c48 <z_impl_k_mutex_lock>
    4fee:	e7dc      	b.n	4faa <data_out_block_mode+0x2a>
	return z_impl_k_mutex_unlock(mutex);
    4ff0:	4638      	mov	r0, r7
    4ff2:	f01b fee3 	bl	20dbc <z_impl_k_mutex_unlock>
    4ff6:	e7e7      	b.n	4fc8 <data_out_block_mode+0x48>
	if (retry_cnt == 0) {
    4ff8:	b95c      	cbnz	r4, 5012 <data_out_block_mode+0x92>
		host_present = false;
    4ffa:	7034      	strb	r4, [r6, #0]
    4ffc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    5000:	2000      	movs	r0, #0
    5002:	f000 fdc9 	bl	5b98 <SEGGER_RTT_HasDataUp>
    5006:	2800      	cmp	r0, #0
    5008:	d0e6      	beq.n	4fd8 <data_out_block_mode+0x58>
    500a:	7833      	ldrb	r3, [r6, #0]
    500c:	2b00      	cmp	r3, #0
    500e:	d1f3      	bne.n	4ff8 <data_out_block_mode+0x78>
    5010:	e7e2      	b.n	4fd8 <data_out_block_mode+0x58>
			on_failed_write(retry_cnt--);
    5012:	3c01      	subs	r4, #1
    5014:	f7ff ff90 	bl	4f38 <on_failed_write.part.0>
    5018:	e7f2      	b.n	5000 <data_out_block_mode+0x80>
		} else if (host_present) {
    501a:	7833      	ldrb	r3, [r6, #0]
    501c:	b113      	cbz	r3, 5024 <data_out_block_mode+0xa4>
	if (retry_cnt == 0) {
    501e:	3c01      	subs	r4, #1
    5020:	d104      	bne.n	502c <data_out_block_mode+0xac>
		host_present = false;
    5022:	7034      	strb	r4, [r6, #0]
	} while ((ret == 0) && host_present);
    5024:	7833      	ldrb	r3, [r6, #0]
    5026:	2b00      	cmp	r3, #0
    5028:	d1b3      	bne.n	4f92 <data_out_block_mode+0x12>
    502a:	e7d5      	b.n	4fd8 <data_out_block_mode+0x58>
    502c:	f7ff ff84 	bl	4f38 <on_failed_write.part.0>
    5030:	e7f8      	b.n	5024 <data_out_block_mode+0xa4>
    5032:	bf00      	nop
    5034:	20007e4c 	.word	0x20007e4c
    5038:	2000253c 	.word	0x2000253c
    503c:	2000253d 	.word	0x2000253d

00005040 <testThread1>:
K_THREAD_STACK_DEFINE(stack_area, STACK_SIZE);



void testThread1(void *a, void *b, void *c) {
	printk("sth\n");
    5040:	4801      	ldr	r0, [pc, #4]	; (5048 <testThread1+0x8>)
    5042:	f01f bacf 	b.w	245e4 <printk>
    5046:	bf00      	nop
    5048:	0002cbdd 	.word	0x0002cbdd

0000504c <lec_ccc_cfg_changed>:
{
    504c:	b508      	push	{r3, lr}
	return arch_is_user_context();
    504e:	f020 faf3 	bl	25638 <arch_is_user_context>
    5052:	4b0f      	ldr	r3, [pc, #60]	; (5090 <lec_ccc_cfg_changed+0x44>)
    5054:	4a0f      	ldr	r2, [pc, #60]	; (5094 <lec_ccc_cfg_changed+0x48>)
    5056:	1a9b      	subs	r3, r3, r2
    5058:	08db      	lsrs	r3, r3, #3
	LOG_INF("LRES notifications %s", notif_enabled ? "enabled" : "disabled");
    505a:	019b      	lsls	r3, r3, #6
    505c:	f043 0303 	orr.w	r3, r3, #3
    5060:	b150      	cbz	r0, 5078 <lec_ccc_cfg_changed+0x2c>
    5062:	480d      	ldr	r0, [pc, #52]	; (5098 <lec_ccc_cfg_changed+0x4c>)
    5064:	4a0d      	ldr	r2, [pc, #52]	; (509c <lec_ccc_cfg_changed+0x50>)
    5066:	2901      	cmp	r1, #1
    5068:	bf08      	it	eq
    506a:	4602      	moveq	r2, r0
    506c:	4618      	mov	r0, r3
    506e:	490c      	ldr	r1, [pc, #48]	; (50a0 <lec_ccc_cfg_changed+0x54>)
}
    5070:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	LOG_INF("LRES notifications %s", notif_enabled ? "enabled" : "disabled");
    5074:	f01f bf0f 	b.w	24e96 <log_from_user>
    5078:	4808      	ldr	r0, [pc, #32]	; (509c <lec_ccc_cfg_changed+0x50>)
    507a:	461a      	mov	r2, r3
    507c:	4b06      	ldr	r3, [pc, #24]	; (5098 <lec_ccc_cfg_changed+0x4c>)
    507e:	2901      	cmp	r1, #1
    5080:	bf14      	ite	ne
    5082:	4601      	movne	r1, r0
    5084:	4619      	moveq	r1, r3
}
    5086:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	LOG_INF("LRES notifications %s", notif_enabled ? "enabled" : "disabled");
    508a:	4805      	ldr	r0, [pc, #20]	; (50a0 <lec_ccc_cfg_changed+0x54>)
    508c:	f01f bf36 	b.w	24efc <log_1>
    5090:	0002a7f8 	.word	0x0002a7f8
    5094:	0002a6d0 	.word	0x0002a6d0
    5098:	0002cbe2 	.word	0x0002cbe2
    509c:	0002cbea 	.word	0x0002cbea
    50a0:	0002cbf3 	.word	0x0002cbf3

000050a4 <bt_gatt_notify.constprop.0>:
 *  @param data Pointer to Attribute data.
 *  @param len Attribute value length.
 *
 *  @return 0 in case of success or negative value in case of error.
 */
static inline int bt_gatt_notify(struct bt_conn *conn,
    50a4:	b530      	push	{r4, r5, lr}
    50a6:	b087      	sub	sp, #28
    50a8:	4605      	mov	r5, r0
    50aa:	460c      	mov	r4, r1
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
    50ac:	2218      	movs	r2, #24
    50ae:	2100      	movs	r1, #0
    50b0:	4668      	mov	r0, sp
    50b2:	f025 f9a3 	bl	2a3fc <memset>

	params.attr = attr;
    50b6:	4b05      	ldr	r3, [pc, #20]	; (50cc <bt_gatt_notify.constprop.0+0x28>)
	params.data = data;
	params.len = len;
    50b8:	f8ad 400c 	strh.w	r4, [sp, #12]

	return bt_gatt_notify_cb(conn, &params);
    50bc:	4669      	mov	r1, sp
    50be:	2000      	movs	r0, #0
	params.data = data;
    50c0:	e9cd 3501 	strd	r3, r5, [sp, #4]
	return bt_gatt_notify_cb(conn, &params);
    50c4:	f007 fd88 	bl	cbd8 <bt_gatt_notify_cb>
}
    50c8:	b007      	add	sp, #28
    50ca:	bd30      	pop	{r4, r5, pc}
    50cc:	0002aa78 	.word	0x0002aa78

000050d0 <exp_settings_cb>:
}


static ssize_t exp_settings_cb(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			 const void *buf, uint16_t len, uint16_t offset, uint8_t sth)
{
    50d0:	e92d 4170 	stmdb	sp!, {r4, r5, r6, r8, lr}
    50d4:	b0b7      	sub	sp, #220	; 0xdc
	ret = arch_is_user_context();
    50d6:	f020 faaf 	bl	25638 <arch_is_user_context>
	if (z_syscall_trap()) {
    50da:	b1a0      	cbz	r0, 5106 <exp_settings_cb+0x36>
		uintptr_t more[] = {
    50dc:	2400      	movs	r4, #0
    50de:	2105      	movs	r1, #5
    50e0:	2304      	movs	r3, #4
    50e2:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28
    50e6:	e9cd 4408 	strd	r4, r4, [sp, #32]
    50ea:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
		return (k_tid_t) arch_syscall_invoke6(*(uintptr_t *)&new_thread, *(uintptr_t *)&stack, *(uintptr_t *)&stack_size, *(uintptr_t *)&entry, *(uintptr_t *)&p1, (uintptr_t) &more, K_SYSCALL_K_THREAD_CREATE);
    50ee:	a80e      	add	r0, sp, #56	; 0x38
	register uint32_t r1 __asm__("r1") = arg2;
    50f0:	490e      	ldr	r1, [pc, #56]	; (512c <exp_settings_cb+0x5c>)
	register uint32_t r3 __asm__("r3") = arg4;
    50f2:	4b0f      	ldr	r3, [pc, #60]	; (5130 <exp_settings_cb+0x60>)
	register uint32_t r2 __asm__("r2") = arg3;
    50f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
	register uint32_t r5 __asm__("r5") = arg6;
    50f8:	ad08      	add	r5, sp, #32
	register uint32_t r6 __asm__("r6") = call_id;
    50fa:	26aa      	movs	r6, #170	; 0xaa
	__asm__ volatile("svc %[svid]\n"
    50fc:	df03      	svc	3
                                 testThread1,
                                 NULL, NULL, NULL,
                                 TTT_PRIORITY, K_USER, K_NO_WAIT);

	return 0;
}
    50fe:	2000      	movs	r0, #0
    5100:	b037      	add	sp, #220	; 0xdc
    5102:	e8bd 8170 	ldmia.w	sp!, {r4, r5, r6, r8, pc}
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    5106:	2200      	movs	r2, #0
    5108:	2300      	movs	r3, #0
    510a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    510e:	2305      	movs	r3, #5
    5110:	2204      	movs	r2, #4
    5112:	e9cd 3203 	strd	r3, r2, [sp, #12]
    5116:	e9cd 0001 	strd	r0, r0, [sp, #4]
    511a:	9000      	str	r0, [sp, #0]
    511c:	4b04      	ldr	r3, [pc, #16]	; (5130 <exp_settings_cb+0x60>)
    511e:	4903      	ldr	r1, [pc, #12]	; (512c <exp_settings_cb+0x5c>)
    5120:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5124:	a80e      	add	r0, sp, #56	; 0x38
    5126:	f024 fcd8 	bl	29ada <z_impl_k_thread_create>
    512a:	e7e8      	b.n	50fe <exp_settings_cb+0x2e>
    512c:	20007000 	.word	0x20007000
    5130:	00005041 	.word	0x00005041

00005134 <change_config>:
void change_config(uint8_t* pu, bool tx) {
    5134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int frequencies[8] =  {868100000, 868300000, 868500000, 867100000, 867300000, 867500000, 867700000, 869500000};
    5138:	4e3d      	ldr	r6, [pc, #244]	; (5230 <change_config+0xfc>)
void change_config(uint8_t* pu, bool tx) {
    513a:	4604      	mov	r4, r0
    513c:	460f      	mov	r7, r1
	int frequencies[8] =  {868100000, 868300000, 868500000, 867100000, 867300000, 867500000, 867700000, 869500000};
    513e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
void change_config(uint8_t* pu, bool tx) {
    5140:	b088      	sub	sp, #32
	int frequencies[8] =  {868100000, 868300000, 868500000, 867100000, 867300000, 867500000, 867700000, 869500000};
    5142:	466d      	mov	r5, sp
    5144:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    5146:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    514a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	config.frequency = frequencies[*pu];
    514e:	7823      	ldrb	r3, [r4, #0]
    5150:	4d38      	ldr	r5, [pc, #224]	; (5234 <change_config+0x100>)
	printk("[NOTIFICATION] data %d length %u\n", *pu, len);
    5152:	4839      	ldr	r0, [pc, #228]	; (5238 <change_config+0x104>)
	config.frequency = frequencies[*pu];
    5154:	aa08      	add	r2, sp, #32
    5156:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	printk("[NOTIFICATION] data %d length %u\n", *pu, len);
    515a:	2205      	movs	r2, #5
	config.frequency = frequencies[*pu];
    515c:	f853 3c20 	ldr.w	r3, [r3, #-32]
    5160:	602b      	str	r3, [r5, #0]
	printk("[NOTIFICATION] data %d length %u\n", *pu, len);
    5162:	7821      	ldrb	r1, [r4, #0]
    5164:	f01f fa3e 	bl	245e4 <printk>
	config.bandwidth = *pu;
    5168:	7861      	ldrb	r1, [r4, #1]
	printk("[NOTIFICATION] data %d length %u\n", *pu, len);
    516a:	4833      	ldr	r0, [pc, #204]	; (5238 <change_config+0x104>)
	config.bandwidth = *pu;
    516c:	7129      	strb	r1, [r5, #4]
	printk("[NOTIFICATION] data %d length %u\n", *pu, len);
    516e:	2205      	movs	r2, #5
    5170:	f01f fa38 	bl	245e4 <printk>
	config.datarate = *pu + 7;
    5174:	78a3      	ldrb	r3, [r4, #2]
	printk("[NOTIFICATION] dat %d length %u\n", *pu, len);
    5176:	4831      	ldr	r0, [pc, #196]	; (523c <change_config+0x108>)
	config.datarate = *pu + 7;
    5178:	3307      	adds	r3, #7
    517a:	716b      	strb	r3, [r5, #5]
	printk("[NOTIFICATION] dat %d length %u\n", *pu, len);
    517c:	78a1      	ldrb	r1, [r4, #2]
    517e:	2205      	movs	r2, #5
    5180:	f01f fa30 	bl	245e4 <printk>
	config.preamble_len = 8;
    5184:	2308      	movs	r3, #8
    5186:	812b      	strh	r3, [r5, #8]
	config.coding_rate = *pu + 1;
    5188:	78e3      	ldrb	r3, [r4, #3]
	printk("[NOTIFICATION] data %d length %u\n", *pu, len);
    518a:	482b      	ldr	r0, [pc, #172]	; (5238 <change_config+0x104>)
	config.coding_rate = *pu + 1;
    518c:	3301      	adds	r3, #1
    518e:	71ab      	strb	r3, [r5, #6]
	printk("[NOTIFICATION] data %d length %u\n", *pu, len);
    5190:	78e1      	ldrb	r1, [r4, #3]
    5192:	2205      	movs	r2, #5
    5194:	f01f fa26 	bl	245e4 <printk>
	config.tx_power = *pu + 5;
    5198:	7923      	ldrb	r3, [r4, #4]
	printk("[NOTIFICATION] data %d length %u\n", *pu, len);
    519a:	4827      	ldr	r0, [pc, #156]	; (5238 <change_config+0x104>)
	config.tx_power = *pu + 5;
    519c:	3305      	adds	r3, #5
    519e:	72ab      	strb	r3, [r5, #10]
	printk("[NOTIFICATION] data %d length %u\n", *pu, len);
    51a0:	7921      	ldrb	r1, [r4, #4]
    51a2:	2205      	movs	r2, #5
    51a4:	f01f fa1e 	bl	245e4 <printk>
	config.tx = tx;
    51a8:	72ef      	strb	r7, [r5, #11]
    51aa:	f020 fa45 	bl	25638 <arch_is_user_context>
	if (z_syscall_trap()) {
    51ae:	b358      	cbz	r0, 5208 <change_config+0xd4>
	register uint32_t ret __asm__("r0") = arg1;
    51b0:	4823      	ldr	r0, [pc, #140]	; (5240 <change_config+0x10c>)
	register uint32_t r6 __asm__("r6") = call_id;
    51b2:	2628      	movs	r6, #40	; 0x28
	__asm__ volatile("svc %[svid]\n"
    51b4:	df03      	svc	3
	return z_impl_device_get_binding(name);
    51b6:	4604      	mov	r4, r0
	if (!lora_dev) {
    51b8:	b970      	cbnz	r0, 51d8 <change_config+0xa4>
	return arch_is_user_context();
    51ba:	f020 fa3d 	bl	25638 <arch_is_user_context>
    51be:	4b21      	ldr	r3, [pc, #132]	; (5244 <change_config+0x110>)
    51c0:	4a21      	ldr	r2, [pc, #132]	; (5248 <change_config+0x114>)
    51c2:	1a9b      	subs	r3, r3, r2
    51c4:	08db      	lsrs	r3, r3, #3
		LOG_ERR("%s Device not found", DEFAULT_RADIO);
    51c6:	019b      	lsls	r3, r3, #6
    51c8:	f043 0301 	orr.w	r3, r3, #1
    51cc:	b300      	cbz	r0, 5210 <change_config+0xdc>
    51ce:	4a1c      	ldr	r2, [pc, #112]	; (5240 <change_config+0x10c>)
    51d0:	491e      	ldr	r1, [pc, #120]	; (524c <change_config+0x118>)
    51d2:	4618      	mov	r0, r3
    51d4:	f01f fe5f 	bl	24e96 <log_from_user>
			      struct lora_modem_config *config)
{
	const struct lora_driver_api *api =
		(const struct lora_driver_api *)dev->api;

	return api->config(dev, config);
    51d8:	68a3      	ldr	r3, [r4, #8]
    51da:	4916      	ldr	r1, [pc, #88]	; (5234 <change_config+0x100>)
    51dc:	681b      	ldr	r3, [r3, #0]
    51de:	4620      	mov	r0, r4
    51e0:	4798      	blx	r3
	if (ret < 0) {
    51e2:	2800      	cmp	r0, #0
    51e4:	da21      	bge.n	522a <change_config+0xf6>
    51e6:	f020 fa27 	bl	25638 <arch_is_user_context>
    51ea:	4b16      	ldr	r3, [pc, #88]	; (5244 <change_config+0x110>)
    51ec:	4a16      	ldr	r2, [pc, #88]	; (5248 <change_config+0x114>)
    51ee:	1a9b      	subs	r3, r3, r2
    51f0:	08db      	lsrs	r3, r3, #3
		LOG_ERR("LoRa config failed");
    51f2:	019b      	lsls	r3, r3, #6
    51f4:	f043 0301 	orr.w	r3, r3, #1
    51f8:	b180      	cbz	r0, 521c <change_config+0xe8>
    51fa:	4915      	ldr	r1, [pc, #84]	; (5250 <change_config+0x11c>)
    51fc:	4618      	mov	r0, r3
}
    51fe:	b008      	add	sp, #32
    5200:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		LOG_ERR("LoRa config failed");
    5204:	f01f be47 	b.w	24e96 <log_from_user>
    5208:	480d      	ldr	r0, [pc, #52]	; (5240 <change_config+0x10c>)
    520a:	f01b fa3f 	bl	2068c <z_impl_device_get_binding>
    520e:	e7d2      	b.n	51b6 <change_config+0x82>
		LOG_ERR("%s Device not found", DEFAULT_RADIO);
    5210:	490b      	ldr	r1, [pc, #44]	; (5240 <change_config+0x10c>)
    5212:	480e      	ldr	r0, [pc, #56]	; (524c <change_config+0x118>)
    5214:	461a      	mov	r2, r3
    5216:	f01f fe71 	bl	24efc <log_1>
    521a:	e7dd      	b.n	51d8 <change_config+0xa4>
		LOG_ERR("LoRa config failed");
    521c:	480c      	ldr	r0, [pc, #48]	; (5250 <change_config+0x11c>)
    521e:	4619      	mov	r1, r3
}
    5220:	b008      	add	sp, #32
    5222:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		LOG_ERR("LoRa config failed");
    5226:	f01f be5c 	b.w	24ee2 <log_0>
}
    522a:	b008      	add	sp, #32
    522c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5230:	0002a8b4 	.word	0x0002a8b4
    5234:	20000bf4 	.word	0x20000bf4
    5238:	0002cc09 	.word	0x0002cc09
    523c:	0002cc2b 	.word	0x0002cc2b
    5240:	0002c7dd 	.word	0x0002c7dd
    5244:	0002a7f8 	.word	0x0002a7f8
    5248:	0002a6d0 	.word	0x0002a6d0
    524c:	0002c7e4 	.word	0x0002c7e4
    5250:	0002cc4c 	.word	0x0002cc4c

00005254 <bt_lres_notify>:
	return 0;
}

// notify phone about anything
int bt_lres_notify(const void *data, uint8_t type_of_notification)
{
    5254:	b510      	push	{r4, lr}
    5256:	4604      	mov	r4, r0
    5258:	b086      	sub	sp, #24
	int rc;

	if(type_of_notification == 0) {		// RSSI/SNR notification
    525a:	b991      	cbnz	r1, 5282 <bt_lres_notify+0x2e>
		printk("at stats\n");
    525c:	4814      	ldr	r0, [pc, #80]	; (52b0 <bt_lres_notify+0x5c>)
    525e:	f01f f9c1 	bl	245e4 <printk>
		uint8_t *pu = (uint8_t *) data;

		static uint8_t stats[3];

		// put -1 at index 0 to distinguish from msg notification
		stats[0] = -1;
    5262:	4814      	ldr	r0, [pc, #80]	; (52b4 <bt_lres_notify+0x60>)
    5264:	23ff      	movs	r3, #255	; 0xff
    5266:	7003      	strb	r3, [r0, #0]
		stats[1] = *pu;
    5268:	7823      	ldrb	r3, [r4, #0]
    526a:	7043      	strb	r3, [r0, #1]
		pu++;
		stats[2] = *pu;
    526c:	7863      	ldrb	r3, [r4, #1]
    526e:	7083      	strb	r3, [r0, #2]

		rc = bt_gatt_notify(NULL, &lres_svc.attrs[1], &stats, sizeof(stats));
    5270:	2103      	movs	r1, #3
		rc = bt_gatt_notify(NULL, &lres_svc.attrs[1], &data, sizeof(data));
	} else {		// notify about config changed
		static int8_t notifier[1];
		notifier[0] = -2;

		rc = bt_gatt_notify(NULL, &lres_svc.attrs[1], &notifier, sizeof(notifier));
    5272:	f7ff ff17 	bl	50a4 <bt_gatt_notify.constprop.0>
	}
	

	return rc == -ENOTCONN ? 0 : rc;
    5276:	f110 0f80 	cmn.w	r0, #128	; 0x80
}
    527a:	bf08      	it	eq
    527c:	2000      	moveq	r0, #0
    527e:	b006      	add	sp, #24
    5280:	bd10      	pop	{r4, pc}
	} else if(type_of_notification == 1){							// msg notification
    5282:	2901      	cmp	r1, #1
    5284:	d10e      	bne.n	52a4 <bt_lres_notify+0x50>
		printk("at msg\n");
    5286:	480c      	ldr	r0, [pc, #48]	; (52b8 <bt_lres_notify+0x64>)
    5288:	f01f f9ac 	bl	245e4 <printk>
		for(uint16_t i = 0; i < MAX_DATA_LEN; i++) {
    528c:	aa01      	add	r2, sp, #4
    528e:	1e63      	subs	r3, r4, #1
    5290:	4610      	mov	r0, r2
    5292:	3413      	adds	r4, #19
			data[i] = *pc;
    5294:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    5298:	f802 1b01 	strb.w	r1, [r2], #1
		for(uint16_t i = 0; i < MAX_DATA_LEN; i++) {
    529c:	42a3      	cmp	r3, r4
    529e:	d1f9      	bne.n	5294 <bt_lres_notify+0x40>
		rc = bt_gatt_notify(NULL, &lres_svc.attrs[1], &data, sizeof(data));
    52a0:	2114      	movs	r1, #20
    52a2:	e7e6      	b.n	5272 <bt_lres_notify+0x1e>
		notifier[0] = -2;
    52a4:	4805      	ldr	r0, [pc, #20]	; (52bc <bt_lres_notify+0x68>)
    52a6:	23fe      	movs	r3, #254	; 0xfe
    52a8:	7003      	strb	r3, [r0, #0]
		rc = bt_gatt_notify(NULL, &lres_svc.attrs[1], &notifier, sizeof(notifier));
    52aa:	2101      	movs	r1, #1
    52ac:	e7e1      	b.n	5272 <bt_lres_notify+0x1e>
    52ae:	bf00      	nop
    52b0:	0002cc5f 	.word	0x0002cc5f
    52b4:	2000253f 	.word	0x2000253f
    52b8:	0002cc69 	.word	0x0002cc69
    52bc:	2000253e 	.word	0x2000253e

000052c0 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    52c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    52c2:	4605      	mov	r5, r0
	__asm__ volatile(
    52c4:	f04f 0320 	mov.w	r3, #32
    52c8:	f3ef 8611 	mrs	r6, BASEPRI
    52cc:	f383 8811 	msr	BASEPRI, r3
    52d0:	f3bf 8f6f 	isb	sy
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    52d4:	4b0b      	ldr	r3, [pc, #44]	; (5304 <pm_state_notify+0x44>)
    52d6:	681c      	ldr	r4, [r3, #0]
    52d8:	2c00      	cmp	r4, #0
    52da:	bf38      	it	cc
    52dc:	2400      	movcc	r4, #0
    52de:	b15c      	cbz	r4, 52f8 <pm_state_notify+0x38>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
    52e0:	4f09      	ldr	r7, [pc, #36]	; (5308 <pm_state_notify+0x48>)
			callback = notifier->state_exit;
    52e2:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    52e6:	2d00      	cmp	r5, #0
    52e8:	bf08      	it	eq
    52ea:	4613      	moveq	r3, r2
		if (callback) {
    52ec:	b10b      	cbz	r3, 52f2 <pm_state_notify+0x32>
			callback(z_power_state.state);
    52ee:	7838      	ldrb	r0, [r7, #0]
    52f0:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    52f2:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    52f4:	2c00      	cmp	r4, #0
    52f6:	d1f4      	bne.n	52e2 <pm_state_notify+0x22>
	__asm__ volatile(
    52f8:	f386 8811 	msr	BASEPRI, r6
    52fc:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    5300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5302:	bf00      	nop
    5304:	20000c00 	.word	0x20000c00
    5308:	20000c08 	.word	0x20000c08

0000530c <pm_system_resume>:
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
    530c:	4b08      	ldr	r3, [pc, #32]	; (5330 <pm_system_resume+0x24>)
{
    530e:	b510      	push	{r4, lr}
	if (!post_ops_done) {
    5310:	681c      	ldr	r4, [r3, #0]
    5312:	b95c      	cbnz	r4, 532c <pm_system_resume+0x20>
		post_ops_done = 1;
    5314:	2201      	movs	r2, #1
    5316:	601a      	str	r2, [r3, #0]
		pm_power_state_exit_post_ops(z_power_state);
    5318:	4b06      	ldr	r3, [pc, #24]	; (5334 <pm_system_resume+0x28>)
    531a:	e893 0003 	ldmia.w	r3, {r0, r1}
    531e:	f021 fbe7 	bl	26af0 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    5322:	4620      	mov	r0, r4
	}
}
    5324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pm_state_notify(false);
    5328:	f7ff bfca 	b.w	52c0 <pm_state_notify>
}
    532c:	bd10      	pop	{r4, pc}
    532e:	bf00      	nop
    5330:	200077cc 	.word	0x200077cc
    5334:	20000c08 	.word	0x20000c08

00005338 <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
    5338:	b537      	push	{r0, r1, r2, r4, r5, lr}
	z_power_state = pm_policy_next_state(ticks);
    533a:	466d      	mov	r5, sp
{
    533c:	4601      	mov	r1, r0
	z_power_state = pm_policy_next_state(ticks);
    533e:	4628      	mov	r0, r5
    5340:	f020 f996 	bl	25670 <pm_policy_next_state>
    5344:	e895 0003 	ldmia.w	r5, {r0, r1}
    5348:	4c0b      	ldr	r4, [pc, #44]	; (5378 <pm_system_suspend+0x40>)
    534a:	e884 0003 	stmia.w	r4, {r0, r1}
	if (z_power_state.state == PM_STATE_ACTIVE) {
    534e:	7820      	ldrb	r0, [r4, #0]
    5350:	b180      	cbz	r0, 5374 <pm_system_suspend+0x3c>
		LOG_DBG("No PM operations done.");
		return z_power_state.state;
	}
	post_ops_done = 0;
    5352:	4b0a      	ldr	r3, [pc, #40]	; (537c <pm_system_suspend+0x44>)
    5354:	2200      	movs	r2, #0
    5356:	601a      	str	r2, [r3, #0]
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    5358:	f01c f832 	bl	213c0 <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
    535c:	2001      	movs	r0, #1
    535e:	f7ff ffaf 	bl	52c0 <pm_state_notify>
	pm_power_state_set(z_power_state);
    5362:	e894 0003 	ldmia.w	r4, {r0, r1}
    5366:	f021 fbb0 	bl	26aca <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
    536a:	f7ff ffcf 	bl	530c <pm_system_resume>
	k_sched_unlock();
    536e:	f01c f953 	bl	21618 <k_sched_unlock>

	return z_power_state.state;
    5372:	7820      	ldrb	r0, [r4, #0]
}
    5374:	b003      	add	sp, #12
    5376:	bd30      	pop	{r4, r5, pc}
    5378:	20000c08 	.word	0x20000c08
    537c:	200077cc 	.word	0x200077cc

00005380 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
    5380:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    5382:	4c04      	ldr	r4, [pc, #16]	; (5394 <rtt_console_init+0x14>)
    5384:	4620      	mov	r0, r4
    5386:	f7fe f807 	bl	3398 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    538a:	4620      	mov	r0, r4
    538c:	f001 fdde 	bl	6f4c <__stdout_hook_install>

	return 0;
}
    5390:	2000      	movs	r0, #0
    5392:	bd10      	pop	{r4, pc}
    5394:	00005399 	.word	0x00005399

00005398 <rtt_console_out>:
{
    5398:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
    539c:	4f26      	ldr	r7, [pc, #152]	; (5438 <rtt_console_out+0xa0>)
    539e:	f8df a09c 	ldr.w	sl, [pc, #156]	; 543c <rtt_console_out+0xa4>
	char c = (char)character;
    53a2:	f88d 0007 	strb.w	r0, [sp, #7]
{
    53a6:	4604      	mov	r4, r0
	char c = (char)character;
    53a8:	2503      	movs	r5, #3
	ret = arch_is_user_context();
    53aa:	f020 f965 	bl	25678 <arch_is_user_context>
	if (z_syscall_trap()) {
    53ae:	b1e0      	cbz	r0, 53ea <rtt_console_out+0x52>
	register uint32_t r1 __asm__("r1") = arg2;
    53b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	register uint32_t ret __asm__("r0") = arg1;
    53b4:	4638      	mov	r0, r7
	register uint32_t r2 __asm__("r2") = arg3;
    53b6:	460a      	mov	r2, r1
	register uint32_t r6 __asm__("r6") = call_id;
    53b8:	2688      	movs	r6, #136	; 0x88
	__asm__ volatile("svc %[svid]\n"
    53ba:	df03      	svc	3
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    53bc:	2201      	movs	r2, #1
    53be:	f10d 0107 	add.w	r1, sp, #7
    53c2:	2000      	movs	r0, #0
    53c4:	f000 fbb4 	bl	5b30 <SEGGER_RTT_WriteNoLock>
    53c8:	4681      	mov	r9, r0
    53ca:	f020 f955 	bl	25678 <arch_is_user_context>
	if (z_syscall_trap()) {
    53ce:	b1a0      	cbz	r0, 53fa <rtt_console_out+0x62>
	register uint32_t ret __asm__("r0") = arg1;
    53d0:	4638      	mov	r0, r7
	register uint32_t r6 __asm__("r6") = call_id;
    53d2:	2689      	movs	r6, #137	; 0x89
	__asm__ volatile("svc %[svid]\n"
    53d4:	df03      	svc	3
		if (cnt) {
    53d6:	f1b9 0f00 	cmp.w	r9, #0
    53da:	d012      	beq.n	5402 <rtt_console_out+0x6a>
			host_present = true;
    53dc:	2301      	movs	r3, #1
    53de:	f88a 3000 	strb.w	r3, [sl]
}
    53e2:	4620      	mov	r0, r4
    53e4:	b002      	add	sp, #8
    53e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
    53ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    53ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    53f2:	4638      	mov	r0, r7
    53f4:	f01b fc28 	bl	20c48 <z_impl_k_mutex_lock>
    53f8:	e7e0      	b.n	53bc <rtt_console_out+0x24>
	return z_impl_k_mutex_unlock(mutex);
    53fa:	4638      	mov	r0, r7
    53fc:	f01b fcde 	bl	20dbc <z_impl_k_mutex_unlock>
    5400:	e7e9      	b.n	53d6 <rtt_console_out+0x3e>
		} else if (host_present) {
    5402:	f89a 3000 	ldrb.w	r3, [sl]
    5406:	2b00      	cmp	r3, #0
    5408:	d0eb      	beq.n	53e2 <rtt_console_out+0x4a>
			if (max_cnt) {
    540a:	3d01      	subs	r5, #1
    540c:	d010      	beq.n	5430 <rtt_console_out+0x98>
	if (k_is_in_isr()) {
    540e:	f024 fb4c 	bl	29aaa <k_is_in_isr>
    5412:	2800      	cmp	r0, #0
    5414:	d1c9      	bne.n	53aa <rtt_console_out+0x12>
    5416:	f020 f92f 	bl	25678 <arch_is_user_context>
	if (z_syscall_trap()) {
    541a:	b120      	cbz	r0, 5426 <rtt_console_out+0x8e>
	register uint32_t ret __asm__("r0") = arg1;
    541c:	2042      	movs	r0, #66	; 0x42
	register uint32_t r1 __asm__("r1") = arg2;
    541e:	4649      	mov	r1, r9
	register uint32_t r6 __asm__("r6") = call_id;
    5420:	26a4      	movs	r6, #164	; 0xa4
	__asm__ volatile("svc %[svid]\n"
    5422:	df03      	svc	3
	return ret;
    5424:	e7c1      	b.n	53aa <rtt_console_out+0x12>
	return z_impl_k_sleep(timeout);
    5426:	2100      	movs	r1, #0
    5428:	2042      	movs	r0, #66	; 0x42
    542a:	f01c fbcd 	bl	21bc8 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
    542e:	e7bc      	b.n	53aa <rtt_console_out+0x12>
				host_present = false;
    5430:	f88a 5000 	strb.w	r5, [sl]
    5434:	e7d5      	b.n	53e2 <rtt_console_out+0x4a>
    5436:	bf00      	nop
    5438:	20007e4c 	.word	0x20007e4c
    543c:	20002542 	.word	0x20002542

00005440 <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    5440:	b570      	push	{r4, r5, r6, lr}
    5442:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
    5444:	480d      	ldr	r0, [pc, #52]	; (547c <onoff_stop+0x3c>)
    5446:	1a23      	subs	r3, r4, r0
    5448:	109a      	asrs	r2, r3, #2
    544a:	4b0d      	ldr	r3, [pc, #52]	; (5480 <onoff_stop+0x40>)
    544c:	4353      	muls	r3, r2
    544e:	b2db      	uxtb	r3, r3
	err = set_off_state(&subdata->flags, ctx);
    5450:	250c      	movs	r5, #12
    5452:	435d      	muls	r5, r3
    5454:	f105 0340 	add.w	r3, r5, #64	; 0x40
{
    5458:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
    545a:	4418      	add	r0, r3
    545c:	2140      	movs	r1, #64	; 0x40
    545e:	f020 f928 	bl	256b2 <set_off_state>
	if (err < 0) {
    5462:	1e01      	subs	r1, r0, #0
    5464:	db04      	blt.n	5470 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
    5466:	4b07      	ldr	r3, [pc, #28]	; (5484 <onoff_stop+0x44>)
    5468:	442b      	add	r3, r5
    546a:	685b      	ldr	r3, [r3, #4]
    546c:	4798      	blx	r3
	return 0;
    546e:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
    5470:	4620      	mov	r0, r4
    5472:	4633      	mov	r3, r6
}
    5474:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    5478:	4718      	bx	r3
    547a:	bf00      	nop
    547c:	20000c24 	.word	0x20000c24
    5480:	b6db6db7 	.word	0xb6db6db7
    5484:	0002ab18 	.word	0x0002ab18

00005488 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    5488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    548c:	4c0f      	ldr	r4, [pc, #60]	; (54cc <onoff_start+0x44>)
    548e:	4d10      	ldr	r5, [pc, #64]	; (54d0 <onoff_start+0x48>)
    5490:	1b03      	subs	r3, r0, r4
    5492:	109b      	asrs	r3, r3, #2
    5494:	435d      	muls	r5, r3
    5496:	b2eb      	uxtb	r3, r5
	err = set_starting_state(&subdata->flags, ctx);
    5498:	250c      	movs	r5, #12
    549a:	435d      	muls	r5, r3
{
    549c:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
    549e:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
    54a2:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
    54a4:	4420      	add	r0, r4
    54a6:	2140      	movs	r1, #64	; 0x40
    54a8:	f020 f91c 	bl	256e4 <set_starting_state>
	if (err < 0) {
    54ac:	1e01      	subs	r1, r0, #0
    54ae:	db08      	blt.n	54c2 <onoff_start+0x3a>
	subdata->cb = cb;
    54b0:	4b08      	ldr	r3, [pc, #32]	; (54d4 <onoff_start+0x4c>)
    54b2:	442c      	add	r4, r5
	subdata->user_data = user_data;
    54b4:	e9c4 360e 	strd	r3, r6, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    54b8:	4b07      	ldr	r3, [pc, #28]	; (54d8 <onoff_start+0x50>)
    54ba:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    54bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    54c0:	4718      	bx	r3
		notify(mgr, err);
    54c2:	4638      	mov	r0, r7
    54c4:	4633      	mov	r3, r6
}
    54c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    54ca:	4718      	bx	r3
    54cc:	20000c24 	.word	0x20000c24
    54d0:	b6db6db7 	.word	0xb6db6db7
    54d4:	00025747 	.word	0x00025747
    54d8:	0002ab18 	.word	0x0002ab18

000054dc <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    54dc:	2200      	movs	r2, #0
{
    54de:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    54e0:	2101      	movs	r1, #1
{
    54e2:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    54e4:	4610      	mov	r0, r2
    54e6:	f000 fdb1 	bl	604c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    54ea:	2000      	movs	r0, #0
    54ec:	f000 fd7c 	bl	5fe8 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    54f0:	480f      	ldr	r0, [pc, #60]	; (5530 <clk_init+0x54>)
    54f2:	f01a fe37 	bl	20164 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    54f6:	4b0f      	ldr	r3, [pc, #60]	; (5534 <clk_init+0x58>)
    54f8:	4298      	cmp	r0, r3
    54fa:	d115      	bne.n	5528 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    54fc:	f023 fee8 	bl	292d0 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    5500:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    5502:	490d      	ldr	r1, [pc, #52]	; (5538 <clk_init+0x5c>)
    5504:	4630      	mov	r0, r6
    5506:	f01f f8d6 	bl	246b6 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    550a:	2800      	cmp	r0, #0
    550c:	db0b      	blt.n	5526 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    550e:	2501      	movs	r5, #1
    5510:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
    5512:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    5514:	4908      	ldr	r1, [pc, #32]	; (5538 <clk_init+0x5c>)
    5516:	f104 001c 	add.w	r0, r4, #28
    551a:	f01f f8cc 	bl	246b6 <onoff_manager_init>
		if (err < 0) {
    551e:	2800      	cmp	r0, #0
    5520:	db01      	blt.n	5526 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    5522:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    5524:	2000      	movs	r0, #0
}
    5526:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    5528:	f06f 0004 	mvn.w	r0, #4
    552c:	e7fb      	b.n	5526 <clk_init+0x4a>
    552e:	bf00      	nop
    5530:	00005571 	.word	0x00005571
    5534:	0bad0000 	.word	0x0bad0000
    5538:	0002ab30 	.word	0x0002ab30

0000553c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    553c:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    553e:	230c      	movs	r3, #12
    5540:	4809      	ldr	r0, [pc, #36]	; (5568 <clkstarted_handle.constprop.0+0x2c>)
    5542:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    5544:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    5546:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    5548:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    554c:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    554e:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    5550:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    5552:	4418      	add	r0, r3
    5554:	f020 f8e4 	bl	25720 <set_on_state>
	if (callback) {
    5558:	b12d      	cbz	r5, 5566 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    555a:	4632      	mov	r2, r6
    555c:	462b      	mov	r3, r5
    555e:	4803      	ldr	r0, [pc, #12]	; (556c <clkstarted_handle.constprop.0+0x30>)
}
    5560:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    5564:	4718      	bx	r3
}
    5566:	bd70      	pop	{r4, r5, r6, pc}
    5568:	20000c24 	.word	0x20000c24
    556c:	20007d00 	.word	0x20007d00

00005570 <clock_event_handler>:
	switch (event) {
    5570:	b110      	cbz	r0, 5578 <clock_event_handler+0x8>
    5572:	2801      	cmp	r0, #1
    5574:	d004      	beq.n	5580 <clock_event_handler+0x10>
    5576:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    5578:	4b03      	ldr	r3, [pc, #12]	; (5588 <clock_event_handler+0x18>)
    557a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    557c:	075b      	lsls	r3, r3, #29
    557e:	d101      	bne.n	5584 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    5580:	f7ff bfdc 	b.w	553c <clkstarted_handle.constprop.0>
}
    5584:	4770      	bx	lr
    5586:	bf00      	nop
    5588:	20000c24 	.word	0x20000c24

0000558c <generic_hfclk_start>:
{
    558c:	b508      	push	{r3, lr}
	__asm__ volatile(
    558e:	f04f 0320 	mov.w	r3, #32
    5592:	f3ef 8111 	mrs	r1, BASEPRI
    5596:	f383 8811 	msr	BASEPRI, r3
    559a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    559e:	4a12      	ldr	r2, [pc, #72]	; (55e8 <generic_hfclk_start+0x5c>)
    55a0:	6813      	ldr	r3, [r2, #0]
    55a2:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    55a6:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    55aa:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    55ac:	d00c      	beq.n	55c8 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    55ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    55b2:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    55b6:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    55ba:	f013 0301 	ands.w	r3, r3, #1
    55be:	d003      	beq.n	55c8 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    55c0:	480a      	ldr	r0, [pc, #40]	; (55ec <generic_hfclk_start+0x60>)
    55c2:	f020 f8ad 	bl	25720 <set_on_state>
			already_started = true;
    55c6:	2301      	movs	r3, #1
	__asm__ volatile(
    55c8:	f381 8811 	msr	BASEPRI, r1
    55cc:	f3bf 8f6f 	isb	sy
	if (already_started) {
    55d0:	b123      	cbz	r3, 55dc <generic_hfclk_start+0x50>
}
    55d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    55d6:	2000      	movs	r0, #0
    55d8:	f7ff bfb0 	b.w	553c <clkstarted_handle.constprop.0>
}
    55dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    55e0:	2001      	movs	r0, #1
    55e2:	f01a bdcf 	b.w	20184 <nrfx_clock_start>
    55e6:	bf00      	nop
    55e8:	20000c74 	.word	0x20000c74
    55ec:	20000c64 	.word	0x20000c64

000055f0 <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    55f0:	4b09      	ldr	r3, [pc, #36]	; (5618 <generic_hfclk_stop+0x28>)
    55f2:	f3bf 8f5b 	dmb	ish
    55f6:	e853 2f00 	ldrex	r2, [r3]
    55fa:	f022 0102 	bic.w	r1, r2, #2
    55fe:	e843 1000 	strex	r0, r1, [r3]
    5602:	2800      	cmp	r0, #0
    5604:	d1f7      	bne.n	55f6 <generic_hfclk_stop+0x6>
    5606:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    560a:	07d3      	lsls	r3, r2, #31
    560c:	d402      	bmi.n	5614 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    560e:	2001      	movs	r0, #1
    5610:	f01a bdea 	b.w	201e8 <nrfx_clock_stop>
}
    5614:	4770      	bx	lr
    5616:	bf00      	nop
    5618:	20000c74 	.word	0x20000c74

0000561c <api_blocking_start>:
{
    561c:	e92d 4150 	stmdb	sp!, {r4, r6, r8, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    5620:	2301      	movs	r3, #1
{
    5622:	b086      	sub	sp, #24
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    5624:	2400      	movs	r4, #0
    5626:	e9cd 4302 	strd	r4, r3, [sp, #8]
    562a:	ab04      	add	r3, sp, #16
    562c:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    5630:	4a0e      	ldr	r2, [pc, #56]	; (566c <api_blocking_start+0x50>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    5632:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    5636:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    5638:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    563c:	f020 f8b5 	bl	257aa <api_start>
	if (err < 0) {
    5640:	2800      	cmp	r0, #0
    5642:	db08      	blt.n	5656 <api_blocking_start+0x3a>
    5644:	f020 f822 	bl	2568c <arch_is_user_context>
	if (z_syscall_trap()) {
    5648:	b140      	cbz	r0, 565c <api_blocking_start+0x40>
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
    564a:	4668      	mov	r0, sp
	register uint32_t r1 __asm__("r1") = arg2;
    564c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
	register uint32_t r2 __asm__("r2") = arg3;
    5650:	4622      	mov	r2, r4
	register uint32_t r6 __asm__("r6") = call_id;
    5652:	26a3      	movs	r6, #163	; 0xa3
	__asm__ volatile("svc %[svid]\n"
    5654:	df03      	svc	3
}
    5656:	b006      	add	sp, #24
    5658:	e8bd 8150 	ldmia.w	sp!, {r4, r6, r8, pc}
	return z_impl_k_sem_take(sem, timeout);
    565c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    5660:	2300      	movs	r3, #0
    5662:	4668      	mov	r0, sp
    5664:	f01c fd30 	bl	220c8 <z_impl_k_sem_take>
	return k_sem_take(&sem, K_MSEC(500));
    5668:	e7f5      	b.n	5656 <api_blocking_start+0x3a>
    566a:	bf00      	nop
    566c:	00025765 	.word	0x00025765

00005670 <z_nrf_clock_control_get_onoff>:
}
    5670:	4a02      	ldr	r2, [pc, #8]	; (567c <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    5672:	b2c3      	uxtb	r3, r0
}
    5674:	201c      	movs	r0, #28
    5676:	fb03 2000 	mla	r0, r3, r0, r2
    567a:	4770      	bx	lr
    567c:	20000c24 	.word	0x20000c24

00005680 <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5680:	4b09      	ldr	r3, [pc, #36]	; (56a8 <z_nrf_clock_bt_ctlr_hf_request+0x28>)
    5682:	f3bf 8f5b 	dmb	ish
    5686:	e853 2f00 	ldrex	r2, [r3]
    568a:	f042 0101 	orr.w	r1, r2, #1
    568e:	e843 1000 	strex	r0, r1, [r3]
    5692:	2800      	cmp	r0, #0
    5694:	d1f7      	bne.n	5686 <z_nrf_clock_bt_ctlr_hf_request+0x6>
    5696:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
    569a:	0793      	lsls	r3, r2, #30
    569c:	d402      	bmi.n	56a4 <z_nrf_clock_bt_ctlr_hf_request+0x24>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    569e:	2001      	movs	r0, #1
    56a0:	f01a bd70 	b.w	20184 <nrfx_clock_start>
}
    56a4:	4770      	bx	lr
    56a6:	bf00      	nop
    56a8:	20000c74 	.word	0x20000c74

000056ac <z_nrf_clock_bt_ctlr_hf_release>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    56ac:	4b09      	ldr	r3, [pc, #36]	; (56d4 <z_nrf_clock_bt_ctlr_hf_release+0x28>)
    56ae:	f3bf 8f5b 	dmb	ish
    56b2:	e853 2f00 	ldrex	r2, [r3]
    56b6:	f022 0101 	bic.w	r1, r2, #1
    56ba:	e843 1000 	strex	r0, r1, [r3]
    56be:	2800      	cmp	r0, #0
    56c0:	d1f7      	bne.n	56b2 <z_nrf_clock_bt_ctlr_hf_release+0x6>
    56c2:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_BT) & HF_USER_GENERIC) {
    56c6:	0793      	lsls	r3, r2, #30
    56c8:	d402      	bmi.n	56d0 <z_nrf_clock_bt_ctlr_hf_release+0x24>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    56ca:	2001      	movs	r0, #1
    56cc:	f01a bd8c 	b.w	201e8 <nrfx_clock_stop>
}
    56d0:	4770      	bx	lr
    56d2:	bf00      	nop
    56d4:	20000c74 	.word	0x20000c74

000056d8 <z_nrf_clock_control_lf_on>:
{
    56d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    56dc:	4940      	ldr	r1, [pc, #256]	; (57e0 <z_nrf_clock_control_lf_on+0x108>)
    56de:	f3bf 8f5b 	dmb	ish
    56e2:	4607      	mov	r7, r0
    56e4:	2201      	movs	r2, #1
    56e6:	e851 3f00 	ldrex	r3, [r1]
    56ea:	e841 2000 	strex	r0, r2, [r1]
    56ee:	2800      	cmp	r0, #0
    56f0:	d1f9      	bne.n	56e6 <z_nrf_clock_control_lf_on+0xe>
    56f2:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    56f6:	b933      	cbnz	r3, 5706 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    56f8:	493a      	ldr	r1, [pc, #232]	; (57e4 <z_nrf_clock_control_lf_on+0x10c>)
		err = onoff_request(mgr, &cli);
    56fa:	483b      	ldr	r0, [pc, #236]	; (57e8 <z_nrf_clock_control_lf_on+0x110>)
    56fc:	604b      	str	r3, [r1, #4]
    56fe:	60cb      	str	r3, [r1, #12]
    5700:	608a      	str	r2, [r1, #8]
    5702:	f01e ffeb 	bl	246dc <onoff_request>
	switch (start_mode) {
    5706:	1e7b      	subs	r3, r7, #1
    5708:	2b01      	cmp	r3, #1
    570a:	d833      	bhi.n	5774 <z_nrf_clock_control_lf_on+0x9c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    570c:	2f01      	cmp	r7, #1
    570e:	d107      	bne.n	5720 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    5710:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5714:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    5718:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    571c:	2b01      	cmp	r3, #1
    571e:	d029      	beq.n	5774 <z_nrf_clock_control_lf_on+0x9c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    5720:	f024 f9c3 	bl	29aaa <k_is_in_isr>
    5724:	4604      	mov	r4, r0
    5726:	b918      	cbnz	r0, 5730 <z_nrf_clock_control_lf_on+0x58>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    5728:	4b30      	ldr	r3, [pc, #192]	; (57ec <z_nrf_clock_control_lf_on+0x114>)
	int key = isr_mode ? irq_lock() : 0;
    572a:	781b      	ldrb	r3, [r3, #0]
    572c:	2b00      	cmp	r3, #0
    572e:	d150      	bne.n	57d2 <z_nrf_clock_control_lf_on+0xfa>
	__asm__ volatile(
    5730:	f04f 0320 	mov.w	r3, #32
    5734:	f3ef 8511 	mrs	r5, BASEPRI
    5738:	f383 8811 	msr	BASEPRI, r3
    573c:	f3bf 8f6f 	isb	sy
    5740:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5742:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 57f0 <z_nrf_clock_control_lf_on+0x118>
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5746:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 57f4 <z_nrf_clock_control_lf_on+0x11c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    574a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 57f8 <z_nrf_clock_control_lf_on+0x120>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    574e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5752:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5756:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    575a:	03d2      	lsls	r2, r2, #15
    575c:	d50c      	bpl.n	5778 <z_nrf_clock_control_lf_on+0xa0>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    575e:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    5762:	2b01      	cmp	r3, #1
    5764:	d001      	beq.n	576a <z_nrf_clock_control_lf_on+0x92>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    5766:	2f01      	cmp	r7, #1
    5768:	d106      	bne.n	5778 <z_nrf_clock_control_lf_on+0xa0>
	if (isr_mode) {
    576a:	b364      	cbz	r4, 57c6 <z_nrf_clock_control_lf_on+0xee>
	__asm__ volatile(
    576c:	f385 8811 	msr	BASEPRI, r5
    5770:	f3bf 8f6f 	isb	sy
}
    5774:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (isr_mode) {
    5778:	b1c4      	cbz	r4, 57ac <z_nrf_clock_control_lf_on+0xd4>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    577a:	4628      	mov	r0, r5
    577c:	f000 fd22 	bl	61c4 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    5780:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5784:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    5788:	2b00      	cmp	r3, #0
    578a:	d1e0      	bne.n	574e <z_nrf_clock_control_lf_on+0x76>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    578c:	f8d9 1000 	ldr.w	r1, [r9]
		    && nrf_clock_event_check(NRF_CLOCK,
    5790:	2900      	cmp	r1, #0
    5792:	d0dc      	beq.n	574e <z_nrf_clock_control_lf_on+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5794:	f8c9 3000 	str.w	r3, [r9]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    5798:	f8d9 3000 	ldr.w	r3, [r9]
    p_reg->LFCLKSRC = (uint32_t)(source);
    579c:	2301      	movs	r3, #1
    579e:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    57a2:	f8ca 3180 	str.w	r3, [sl, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    57a6:	f8cb 3000 	str.w	r3, [fp]
}
    57aa:	e7d0      	b.n	574e <z_nrf_clock_control_lf_on+0x76>
    57ac:	f01f ff6e 	bl	2568c <arch_is_user_context>
	if (z_syscall_trap()) {
    57b0:	b120      	cbz	r0, 57bc <z_nrf_clock_control_lf_on+0xe4>
	register uint32_t ret __asm__("r0") = arg1;
    57b2:	2021      	movs	r0, #33	; 0x21
	register uint32_t r1 __asm__("r1") = arg2;
    57b4:	4621      	mov	r1, r4
	register uint32_t r6 __asm__("r6") = call_id;
    57b6:	26a4      	movs	r6, #164	; 0xa4
	__asm__ volatile("svc %[svid]\n"
    57b8:	df03      	svc	3
	return ret;
    57ba:	e7e1      	b.n	5780 <z_nrf_clock_control_lf_on+0xa8>
	return z_impl_k_sleep(timeout);
    57bc:	2100      	movs	r1, #0
    57be:	2021      	movs	r0, #33	; 0x21
    57c0:	f01c fa02 	bl	21bc8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    57c4:	e7dc      	b.n	5780 <z_nrf_clock_control_lf_on+0xa8>
    p_reg->INTENSET = mask;
    57c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    57ca:	2202      	movs	r2, #2
    57cc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    57d0:	e7d0      	b.n	5774 <z_nrf_clock_control_lf_on+0x9c>
    p_reg->INTENCLR = mask;
    57d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    57d6:	2202      	movs	r2, #2
    57d8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    57dc:	4605      	mov	r5, r0
}
    57de:	e7b0      	b.n	5742 <z_nrf_clock_control_lf_on+0x6a>
    57e0:	20000c78 	.word	0x20000c78
    57e4:	20000c14 	.word	0x20000c14
    57e8:	20000c40 	.word	0x20000c40
    57ec:	20002bb2 	.word	0x20002bb2
    57f0:	40000104 	.word	0x40000104
    57f4:	e000e100 	.word	0xe000e100
    57f8:	40000008 	.word	0x40000008

000057fc <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(int32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    57fc:	4a04      	ldr	r2, [pc, #16]	; (5810 <sys_clock_timeout_handler+0x14>)
    57fe:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    5800:	1ac8      	subs	r0, r1, r3
    5802:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    5806:	4403      	add	r3, r0
    5808:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    580a:	f01d bba3 	b.w	22f54 <sys_clock_announce>
    580e:	bf00      	nop
    5810:	20000c8c 	.word	0x20000c8c

00005814 <set_absolute_alarm>:
{
    5814:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5818:	0087      	lsls	r7, r0, #2
    581a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    581e:	f100 0450 	add.w	r4, r0, #80	; 0x50
    5822:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
    5826:	00a4      	lsls	r4, r4, #2
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    5828:	f8df a098 	ldr.w	sl, [pc, #152]	; 58c4 <set_absolute_alarm+0xb0>
    return p_reg->CC[ch];
    582c:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5830:	b2a4      	uxth	r4, r4
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5832:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    5836:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    583a:	4082      	lsls	r2, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
    583c:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    5840:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5844:	9201      	str	r2, [sp, #4]
    5846:	46d3      	mov	fp, sl
     return p_reg->COUNTER;
    5848:	f8da 9504 	ldr.w	r9, [sl, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    584c:	eba3 0309 	sub.w	r3, r3, r9
    5850:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    5854:	f029 427f 	bic.w	r2, r9, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    5858:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    585a:	f8c7 2540 	str.w	r2, [r7, #1344]	; 0x540
    585e:	d109      	bne.n	5874 <set_absolute_alarm+0x60>
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
    5860:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
    5864:	bb4b      	cbnz	r3, 58ba <set_absolute_alarm+0xa6>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
    5866:	f3ef 8314 	mrs	r3, CONTROL
	if (z_syscall_trap()) {
    586a:	07db      	lsls	r3, r3, #31
    586c:	d525      	bpl.n	58ba <set_absolute_alarm+0xa6>
	register uint32_t ret __asm__("r0") = arg1;
    586e:	2013      	movs	r0, #19
	register uint32_t r6 __asm__("r6") = call_id;
    5870:	266f      	movs	r6, #111	; 0x6f
	__asm__ volatile("svc %[svid]\n"
    5872:	df03      	svc	3
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    5874:	f109 0202 	add.w	r2, r9, #2
	return (a - b) & COUNTER_MAX;
    5878:	1aab      	subs	r3, r5, r2
    587a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    587e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    5882:	bf88      	it	hi
    5884:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5886:	2300      	movs	r3, #0
    5888:	6023      	str	r3, [r4, #0]
    588a:	6823      	ldr	r3, [r4, #0]
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    588c:	9b01      	ldr	r3, [sp, #4]
    588e:	f8cb 3344 	str.w	r3, [fp, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    5892:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    5896:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
     return p_reg->COUNTER;
    589a:	f8db 3504 	ldr.w	r3, [fp, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    589e:	4599      	cmp	r9, r3
    58a0:	d006      	beq.n	58b0 <set_absolute_alarm+0x9c>
	return (a - b) & COUNTER_MAX;
    58a2:	1aeb      	subs	r3, r5, r3
    58a4:	3b02      	subs	r3, #2
    58a6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    58aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    58ae:	d802      	bhi.n	58b6 <set_absolute_alarm+0xa2>
}
    58b0:	b003      	add	sp, #12
    58b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		prev_cc = cc_val;
    58b6:	462b      	mov	r3, r5
    58b8:	e7c6      	b.n	5848 <set_absolute_alarm+0x34>
	z_impl_k_busy_wait(usec_to_wait);
    58ba:	2013      	movs	r0, #19
    58bc:	f024 f8fb 	bl	29ab6 <z_impl_k_busy_wait>
    58c0:	e7d8      	b.n	5874 <set_absolute_alarm+0x60>
    58c2:	bf00      	nop
    58c4:	40011000 	.word	0x40011000

000058c8 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    58c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return p_reg->INTENSET & mask;
    58ca:	4e10      	ldr	r6, [pc, #64]	; (590c <rtc_nrf_isr+0x44>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    58cc:	4f10      	ldr	r7, [pc, #64]	; (5910 <rtc_nrf_isr+0x48>)
	ARG_UNUSED(arg);

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    58ce:	2500      	movs	r5, #0
    58d0:	4b10      	ldr	r3, [pc, #64]	; (5914 <rtc_nrf_isr+0x4c>)
    58d2:	2000      	movs	r0, #0
    58d4:	681c      	ldr	r4, [r3, #0]
    58d6:	461a      	mov	r2, r3
    58d8:	b105      	cbz	r5, 58dc <rtc_nrf_isr+0x14>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    58da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return p_reg->INTENSET & mask;
    58dc:	f8d6 1304 	ldr.w	r1, [r6, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    58e0:	03c9      	lsls	r1, r1, #15
    58e2:	d5fa      	bpl.n	58da <rtc_nrf_isr+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    58e4:	6839      	ldr	r1, [r7, #0]
    58e6:	2900      	cmp	r1, #0
    58e8:	d0f7      	beq.n	58da <rtc_nrf_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    58ea:	603d      	str	r5, [r7, #0]
    58ec:	6839      	ldr	r1, [r7, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    58ee:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    58f2:	f8c6 1348 	str.w	r1, [r6, #840]	; 0x348
    return p_reg->CC[ch];
    58f6:	f8d6 1540 	ldr.w	r1, [r6, #1344]	; 0x540
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    58fa:	2501      	movs	r5, #1
			if (handler) {
    58fc:	b11c      	cbz	r4, 5906 <rtc_nrf_isr+0x3e>
				handler(chan, cc_val,
    58fe:	685a      	ldr	r2, [r3, #4]
    5900:	6018      	str	r0, [r3, #0]
    5902:	47a0      	blx	r4
    5904:	e7e4      	b.n	58d0 <rtc_nrf_isr+0x8>
    5906:	6014      	str	r4, [r2, #0]
}
    5908:	e7e7      	b.n	58da <rtc_nrf_isr+0x12>
    590a:	bf00      	nop
    590c:	40011000 	.word	0x40011000
    5910:	40011140 	.word	0x40011140
    5914:	20000c80 	.word	0x20000c80

00005918 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
    5918:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    591a:	4d10      	ldr	r5, [pc, #64]	; (595c <sys_clock_driver_init+0x44>)
    591c:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    591e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
    5922:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->INTENSET = mask;
    5926:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    592a:	4b0d      	ldr	r3, [pc, #52]	; (5960 <sys_clock_driver_init+0x48>)
    592c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    5930:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    5934:	2101      	movs	r1, #1
    5936:	4622      	mov	r2, r4
    5938:	2011      	movs	r0, #17
    593a:	f000 fb87 	bl	604c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    593e:	2011      	movs	r0, #17
    5940:	f000 fb52 	bl	5fe8 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    5944:	4a07      	ldr	r2, [pc, #28]	; (5964 <sys_clock_driver_init+0x4c>)
    5946:	2301      	movs	r3, #1
    5948:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    594a:	4a07      	ldr	r2, [pc, #28]	; (5968 <sys_clock_driver_init+0x50>)
    594c:	602b      	str	r3, [r5, #0]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    594e:	2002      	movs	r0, #2
	int_mask = BIT_MASK(CHAN_COUNT);
    5950:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    5952:	f7ff fec1 	bl	56d8 <z_nrf_clock_control_lf_on>

	return 0;
}
    5956:	4620      	mov	r0, r4
    5958:	bd38      	pop	{r3, r4, r5, pc}
    595a:	bf00      	nop
    595c:	40011000 	.word	0x40011000
    5960:	e000e100 	.word	0xe000e100
    5964:	40011008 	.word	0x40011008
    5968:	20000c88 	.word	0x20000c88

0000596c <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    596c:	4b13      	ldr	r3, [pc, #76]	; (59bc <sys_clock_set_timeout+0x50>)
    596e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    5972:	bf08      	it	eq
    5974:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    5976:	3801      	subs	r0, #1
    5978:	2800      	cmp	r0, #0
    597a:	dd1c      	ble.n	59b6 <sys_clock_set_timeout+0x4a>
    597c:	4298      	cmp	r0, r3
    597e:	bfa8      	it	ge
    5980:	4618      	movge	r0, r3
     return p_reg->COUNTER;
    5982:	4b0f      	ldr	r3, [pc, #60]	; (59c0 <sys_clock_set_timeout+0x54>)
    5984:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    5988:	4b0e      	ldr	r3, [pc, #56]	; (59c4 <sys_clock_set_timeout+0x58>)
    598a:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
    598c:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    598e:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
    5992:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
		ticks = 0;
    5996:	bf18      	it	ne
    5998:	2000      	movne	r0, #0
	cc_data[chan].callback = handler;
    599a:	4a0b      	ldr	r2, [pc, #44]	; (59c8 <sys_clock_set_timeout+0x5c>)
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    599c:	3301      	adds	r3, #1
    599e:	4403      	add	r3, r0
	cc_data[chan].callback = handler;
    59a0:	480a      	ldr	r0, [pc, #40]	; (59cc <sys_clock_set_timeout+0x60>)
    59a2:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    59a4:	2000      	movs	r0, #0
    59a6:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    59a8:	4a04      	ldr	r2, [pc, #16]	; (59bc <sys_clock_set_timeout+0x50>)
    59aa:	4293      	cmp	r3, r2
    59ac:	bf94      	ite	ls
    59ae:	18c9      	addls	r1, r1, r3
    59b0:	1889      	addhi	r1, r1, r2
    59b2:	f7ff bf2f 	b.w	5814 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    59b6:	2000      	movs	r0, #0
    59b8:	e7e3      	b.n	5982 <sys_clock_set_timeout+0x16>
    59ba:	bf00      	nop
    59bc:	007fffff 	.word	0x007fffff
    59c0:	40011000 	.word	0x40011000
    59c4:	20000c8c 	.word	0x20000c8c
    59c8:	20000c80 	.word	0x20000c80
    59cc:	000057fd 	.word	0x000057fd

000059d0 <sys_clock_elapsed>:
	__asm__ volatile(
    59d0:	f04f 0220 	mov.w	r2, #32
    59d4:	f3ef 8311 	mrs	r3, BASEPRI
    59d8:	f382 8811 	msr	BASEPRI, r2
    59dc:	f3bf 8f6f 	isb	sy
    59e0:	4a06      	ldr	r2, [pc, #24]	; (59fc <sys_clock_elapsed+0x2c>)
    59e2:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    59e6:	4a06      	ldr	r2, [pc, #24]	; (5a00 <sys_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    59e8:	6812      	ldr	r2, [r2, #0]
    59ea:	1a80      	subs	r0, r0, r2
    59ec:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    59f0:	f383 8811 	msr	BASEPRI, r3
    59f4:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    59f8:	4770      	bx	lr
    59fa:	bf00      	nop
    59fc:	40011000 	.word	0x40011000
    5a00:	20000c8c 	.word	0x20000c8c

00005a04 <sys_clock_cycle_get_32>:
	__asm__ volatile(
    5a04:	f04f 0320 	mov.w	r3, #32
    5a08:	f3ef 8211 	mrs	r2, BASEPRI
    5a0c:	f383 8811 	msr	BASEPRI, r3
    5a10:	f3bf 8f6f 	isb	sy

uint32_t sys_clock_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
    5a14:	4906      	ldr	r1, [pc, #24]	; (5a30 <sys_clock_cycle_get_32+0x2c>)
    5a16:	4b07      	ldr	r3, [pc, #28]	; (5a34 <sys_clock_cycle_get_32+0x30>)
    5a18:	6808      	ldr	r0, [r1, #0]
    5a1a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    5a1e:	f382 8811 	msr	BASEPRI, r2
    5a22:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    5a26:	1a1b      	subs	r3, r3, r0
    5a28:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    5a2c:	4418      	add	r0, r3
    5a2e:	4770      	bx	lr
    5a30:	20000c8c 	.word	0x20000c8c
    5a34:	40011000 	.word	0x40011000

00005a38 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
    5a38:	b510      	push	{r4, lr}
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    5a3a:	4c11      	ldr	r4, [pc, #68]	; (5a80 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    5a3c:	4a11      	ldr	r2, [pc, #68]	; (5a84 <_DoInit+0x4c>)
    5a3e:	61a2      	str	r2, [r4, #24]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    5a40:	2303      	movs	r3, #3
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    5a42:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
    5a46:	4b10      	ldr	r3, [pc, #64]	; (5a88 <_DoInit+0x50>)
    5a48:	61e3      	str	r3, [r4, #28]
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    5a4a:	6622      	str	r2, [r4, #96]	; 0x60
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    5a4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aDown[0].pBuffer       = _acDownBuffer;
    5a50:	4a0e      	ldr	r2, [pc, #56]	; (5a8c <_DoInit+0x54>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
    5a52:	490f      	ldr	r1, [pc, #60]	; (5a90 <_DoInit+0x58>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    5a54:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    5a56:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    5a58:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    5a5a:	2210      	movs	r2, #16
  strcpy(&p->acID[7], "RTT");
    5a5c:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
    5a5e:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    5a60:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    5a62:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    5a64:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    5a66:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    5a68:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    5a6a:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    5a6c:	f024 fcce 	bl	2a40c <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    5a70:	4908      	ldr	r1, [pc, #32]	; (5a94 <_DoInit+0x5c>)
    5a72:	4620      	mov	r0, r4
    5a74:	f024 fcca 	bl	2a40c <strcpy>
  p->acID[6] = ' ';
    5a78:	2320      	movs	r3, #32
    5a7a:	71a3      	strb	r3, [r4, #6]
}
    5a7c:	bd10      	pop	{r4, pc}
    5a7e:	bf00      	nop
    5a80:	20000c90 	.word	0x20000c90
    5a84:	0002cca6 	.word	0x0002cca6
    5a88:	20002553 	.word	0x20002553
    5a8c:	20002543 	.word	0x20002543
    5a90:	0002ccaf 	.word	0x0002ccaf
    5a94:	0002ccb3 	.word	0x0002ccb3

00005a98 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    5a98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  RdOff = pRing->RdOff;
    5a9c:	4f23      	ldr	r7, [pc, #140]	; (5b2c <SEGGER_RTT_WriteSkipNoLock+0x94>)
    5a9e:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    5aa2:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    5aa4:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    5aa8:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    5aaa:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    5aac:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    5aae:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    5ab0:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    5ab2:	d834      	bhi.n	5b1e <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    5ab4:	f8d2 a020 	ldr.w	sl, [r2, #32]
    5ab8:	ebaa 0905 	sub.w	r9, sl, r5
    5abc:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    5ac0:	4294      	cmp	r4, r2
    5ac2:	d811      	bhi.n	5ae8 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
    5ac4:	f04f 0918 	mov.w	r9, #24
    5ac8:	fb06 9309 	mla	r3, r6, r9, r9
    5acc:	443b      	add	r3, r7
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    5ace:	4622      	mov	r2, r4
    5ad0:	6858      	ldr	r0, [r3, #4]
    5ad2:	4641      	mov	r1, r8
    5ad4:	4428      	add	r0, r5
    5ad6:	f024 fc83 	bl	2a3e0 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    5ada:	fb09 7606 	mla	r6, r9, r6, r7
    5ade:	442c      	add	r4, r5
      // Therefore, check if 2nd memcpy is necessary at all
      //
      if (NumBytes) {
        memcpy(pRing->pBuffer, pData + Rem, NumBytes);
      }
      pRing->WrOff = NumBytes;
    5ae0:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
    5ae2:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    5ae4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    5ae8:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    5aea:	429c      	cmp	r4, r3
    5aec:	d81b      	bhi.n	5b26 <SEGGER_RTT_WriteSkipNoLock+0x8e>
      memcpy(pRing->pBuffer + WrOff, pData, Rem);       // Copy 1st chunk
    5aee:	fb00 bb0b 	mla	fp, r0, fp, fp
    5af2:	44bb      	add	fp, r7
    5af4:	464a      	mov	r2, r9
    5af6:	f8db 0004 	ldr.w	r0, [fp, #4]
    5afa:	442c      	add	r4, r5
    5afc:	4428      	add	r0, r5
    5afe:	f024 fc6f 	bl	2a3e0 <memcpy>
      if (NumBytes) {
    5b02:	ebb4 040a 	subs.w	r4, r4, sl
    5b06:	d006      	beq.n	5b16 <SEGGER_RTT_WriteSkipNoLock+0x7e>
    5b08:	f8db 0004 	ldr.w	r0, [fp, #4]
    5b0c:	4622      	mov	r2, r4
    5b0e:	eb08 0109 	add.w	r1, r8, r9
    5b12:	f024 fc65 	bl	2a3e0 <memcpy>
      pRing->WrOff = NumBytes;
    5b16:	2018      	movs	r0, #24
    5b18:	fb00 7606 	mla	r6, r0, r6, r7
    5b1c:	e7e0      	b.n	5ae0 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
    5b1e:	3b01      	subs	r3, #1
    5b20:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    5b22:	42a3      	cmp	r3, r4
    5b24:	d2ce      	bcs.n	5ac4 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    5b26:	2000      	movs	r0, #0
    5b28:	e7dc      	b.n	5ae4 <SEGGER_RTT_WriteSkipNoLock+0x4c>
    5b2a:	bf00      	nop
    5b2c:	20000c90 	.word	0x20000c90

00005b30 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    5b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    5b32:	4c18      	ldr	r4, [pc, #96]	; (5b94 <SEGGER_RTT_WriteNoLock+0x64>)
    5b34:	2318      	movs	r3, #24
    5b36:	fb00 3503 	mla	r5, r0, r3, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    5b3a:	fb03 4000 	mla	r0, r3, r0, r4
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    5b3e:	4425      	add	r5, r4
  switch (pRing->Flags) {
    5b40:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    5b42:	2c01      	cmp	r4, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    5b44:	460f      	mov	r7, r1
    5b46:	4616      	mov	r6, r2
  switch (pRing->Flags) {
    5b48:	d00f      	beq.n	5b6a <SEGGER_RTT_WriteNoLock+0x3a>
    5b4a:	2c02      	cmp	r4, #2
    5b4c:	d01a      	beq.n	5b84 <SEGGER_RTT_WriteNoLock+0x54>
    5b4e:	b9f4      	cbnz	r4, 5b8e <SEGGER_RTT_WriteNoLock+0x5e>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    5b50:	4628      	mov	r0, r5
    5b52:	f01f fe46 	bl	257e2 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    5b56:	4286      	cmp	r6, r0
    5b58:	d805      	bhi.n	5b66 <SEGGER_RTT_WriteNoLock+0x36>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    5b5a:	4632      	mov	r2, r6
    5b5c:	4639      	mov	r1, r7
    5b5e:	4628      	mov	r0, r5
    5b60:	f01f fe4d 	bl	257fe <_WriteNoCheck>
    5b64:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
    5b66:	4620      	mov	r0, r4
    5b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
    5b6a:	4628      	mov	r0, r5
    5b6c:	f01f fe39 	bl	257e2 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    5b70:	4286      	cmp	r6, r0
    5b72:	4634      	mov	r4, r6
    5b74:	bf28      	it	cs
    5b76:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    5b78:	4622      	mov	r2, r4
    5b7a:	4639      	mov	r1, r7
    5b7c:	4628      	mov	r0, r5
    5b7e:	f01f fe3e 	bl	257fe <_WriteNoCheck>
    break;
    5b82:	e7f0      	b.n	5b66 <SEGGER_RTT_WriteNoLock+0x36>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    5b84:	4628      	mov	r0, r5
}
    5b86:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    5b8a:	f01f be54 	b.w	25836 <_WriteBlocking>
  switch (pRing->Flags) {
    5b8e:	2400      	movs	r4, #0
  return Status;
    5b90:	e7e9      	b.n	5b66 <SEGGER_RTT_WriteNoLock+0x36>
    5b92:	bf00      	nop
    5b94:	20000c90 	.word	0x20000c90

00005b98 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  v = pRing->RdOff;
    5b98:	4b03      	ldr	r3, [pc, #12]	; (5ba8 <SEGGER_RTT_HasDataUp+0x10>)
    5b9a:	2218      	movs	r2, #24
    5b9c:	fb02 3300 	mla	r3, r2, r0, r3
    5ba0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    5ba2:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    5ba4:	1a80      	subs	r0, r0, r2
    5ba6:	4770      	bx	lr
    5ba8:	20000c90 	.word	0x20000c90

00005bac <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
    5bac:	4b01      	ldr	r3, [pc, #4]	; (5bb4 <uECC_get_rng+0x8>)
    5bae:	6818      	ldr	r0, [r3, #0]
    5bb0:	4770      	bx	lr
    5bb2:	bf00      	nop
    5bb4:	200077d0 	.word	0x200077d0

00005bb8 <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
    5bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    5bba:	2208      	movs	r2, #8
{
    5bbc:	b089      	sub	sp, #36	; 0x24
    5bbe:	460c      	mov	r4, r1
    5bc0:	4606      	mov	r6, r0
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    5bc2:	f020 f82c 	bl	25c1e <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
    5bc6:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    5bc8:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
    5bca:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    5bcc:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
    5bce:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    5bd0:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
    5bd2:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    5bd4:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    5bd6:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    5bd8:	9307      	str	r3, [sp, #28]
	tmp[0] = tmp[1] = tmp[2] = 0;
    5bda:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    5bdc:	2308      	movs	r3, #8
    5bde:	466a      	mov	r2, sp
    5be0:	4669      	mov	r1, sp
    5be2:	4668      	mov	r0, sp
	tmp[0] = tmp[1] = tmp[2] = 0;
    5be4:	e9cd 7701 	strd	r7, r7, [sp, #4]
    5be8:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    5bea:	f01f ff1a 	bl	25a22 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    5bee:	2308      	movs	r3, #8
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    5bf0:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    5bf2:	466a      	mov	r2, sp
    5bf4:	4631      	mov	r1, r6
    5bf6:	4630      	mov	r0, r6
    5bf8:	f01f ff13 	bl	25a22 <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
    5bfc:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5bfe:	9303      	str	r3, [sp, #12]
	tmp[4] = product[13];
    5c00:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5c02:	9304      	str	r3, [sp, #16]
	tmp[5] = product[14];
    5c04:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    5c06:	9305      	str	r3, [sp, #20]
	tmp[6] = product[15];
    5c08:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    5c0a:	4405      	add	r5, r0
	tmp[7] = 0;
    5c0c:	e9cd 3706 	strd	r3, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    5c10:	466a      	mov	r2, sp
    5c12:	2308      	movs	r3, #8
    5c14:	4669      	mov	r1, sp
    5c16:	4668      	mov	r0, sp
    5c18:	f01f ff03 	bl	25a22 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    5c1c:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    5c1e:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    5c20:	2308      	movs	r3, #8
    5c22:	466a      	mov	r2, sp
    5c24:	4630      	mov	r0, r6
    5c26:	f01f fefc 	bl	25a22 <uECC_vli_add>

	/* s3 */
	tmp[0] = product[8];
    5c2a:	6a23      	ldr	r3, [r4, #32]
    5c2c:	9300      	str	r3, [sp, #0]
	tmp[1] = product[9];
    5c2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5c30:	9301      	str	r3, [sp, #4]
	tmp[2] = product[10];
    5c32:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5c34:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
    5c36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    5c38:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    5c3a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    5c3c:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    5c3e:	4405      	add	r5, r0
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    5c40:	2308      	movs	r3, #8
    5c42:	466a      	mov	r2, sp
    5c44:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    5c46:	e9cd 7704 	strd	r7, r7, [sp, #16]
    5c4a:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    5c4c:	f01f fee9 	bl	25a22 <uECC_vli_add>

	/* s4 */
	tmp[0] = product[9];
    5c50:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5c52:	9300      	str	r3, [sp, #0]
	tmp[1] = product[10];
    5c54:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
    5c56:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	tmp[1] = product[10];
    5c58:	9301      	str	r3, [sp, #4]
	tmp[2] = product[11];
    5c5a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5c5c:	9302      	str	r3, [sp, #8]
	tmp[4] = product[14];
    5c5e:	9204      	str	r2, [sp, #16]
	tmp[3] = product[13];
    5c60:	6b63      	ldr	r3, [r4, #52]	; 0x34
	tmp[5] = product[15];
    5c62:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	tmp[3] = product[13];
    5c64:	9303      	str	r3, [sp, #12]
	tmp[6] = product[13];
    5c66:	e9cd 2305 	strd	r2, r3, [sp, #20]
	tmp[7] = product[8];
    5c6a:	6a23      	ldr	r3, [r4, #32]
    5c6c:	9307      	str	r3, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    5c6e:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    5c70:	2308      	movs	r3, #8
    5c72:	466a      	mov	r2, sp
    5c74:	4630      	mov	r0, r6
    5c76:	f01f fed4 	bl	25a22 <uECC_vli_add>

	/* d1 */
	tmp[0] = product[11];
    5c7a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5c7c:	9300      	str	r3, [sp, #0]
	tmp[1] = product[12];
    5c7e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5c80:	9301      	str	r3, [sp, #4]
	tmp[2] = product[13];
    5c82:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5c84:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
    5c86:	6a23      	ldr	r3, [r4, #32]
    5c88:	9306      	str	r3, [sp, #24]
	tmp[7] = product[10];
    5c8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5c8c:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    5c8e:	4405      	add	r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    5c90:	2308      	movs	r3, #8
    5c92:	466a      	mov	r2, sp
    5c94:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    5c96:	e9cd 7704 	strd	r7, r7, [sp, #16]
    5c9a:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    5c9c:	f01f fff5 	bl	25c8a <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
    5ca0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5ca2:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
    5ca4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5ca6:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
    5ca8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    5caa:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
    5cac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    5cae:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
    5cb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5cb2:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
    5cb4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5cb6:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    5cb8:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    5cba:	2308      	movs	r3, #8
    5cbc:	466a      	mov	r2, sp
    5cbe:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
    5cc0:	e9cd 7704 	strd	r7, r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    5cc4:	f01f ffe1 	bl	25c8a <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
    5cc8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5cca:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
    5ccc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    5cce:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
    5cd0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    5cd2:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
    5cd4:	6a23      	ldr	r3, [r4, #32]
    5cd6:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
    5cd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5cda:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
    5cdc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
    5cde:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
    5ce2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5ce4:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    5ce6:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    5ce8:	2308      	movs	r3, #8
    5cea:	466a      	mov	r2, sp
    5cec:	4630      	mov	r0, r6
    5cee:	f01f ffcc 	bl	25c8a <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
    5cf2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    5cf4:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
    5cf6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
    5cf8:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
    5cfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5cfe:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
    5d00:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5d02:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
    5d04:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
    5d06:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
    5d0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5d0c:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    5d0e:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    5d10:	2308      	movs	r3, #8
    5d12:	466a      	mov	r2, sp
    5d14:	4630      	mov	r0, r6
    5d16:	f01f ffb8 	bl	25c8a <uECC_vli_sub>

	if (carry < 0) {
    5d1a:	1a2d      	subs	r5, r5, r0
    5d1c:	d410      	bmi.n	5d40 <vli_mmod_fast_secp256r1+0x188>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
		while (carry < 0);
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    5d1e:	4c0d      	ldr	r4, [pc, #52]	; (5d54 <vli_mmod_fast_secp256r1+0x19c>)
		while (carry || 
    5d20:	b935      	cbnz	r5, 5d30 <vli_mmod_fast_secp256r1+0x178>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    5d22:	2208      	movs	r2, #8
    5d24:	4631      	mov	r1, r6
    5d26:	4620      	mov	r0, r4
    5d28:	f01f ff85 	bl	25c36 <uECC_vli_cmp_unsafe>
		while (carry || 
    5d2c:	2801      	cmp	r0, #1
    5d2e:	d00f      	beq.n	5d50 <vli_mmod_fast_secp256r1+0x198>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    5d30:	2308      	movs	r3, #8
    5d32:	4622      	mov	r2, r4
    5d34:	4631      	mov	r1, r6
    5d36:	4630      	mov	r0, r6
    5d38:	f01f ffa7 	bl	25c8a <uECC_vli_sub>
    5d3c:	1a2d      	subs	r5, r5, r0
    5d3e:	e7ef      	b.n	5d20 <vli_mmod_fast_secp256r1+0x168>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    5d40:	4a04      	ldr	r2, [pc, #16]	; (5d54 <vli_mmod_fast_secp256r1+0x19c>)
    5d42:	2308      	movs	r3, #8
    5d44:	4631      	mov	r1, r6
    5d46:	4630      	mov	r0, r6
    5d48:	f01f fe6b 	bl	25a22 <uECC_vli_add>
		while (carry < 0);
    5d4c:	182d      	adds	r5, r5, r0
    5d4e:	d4f8      	bmi.n	5d42 <vli_mmod_fast_secp256r1+0x18a>
		}
	}
}
    5d50:	b009      	add	sp, #36	; 0x24
    5d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5d54:	0002ab40 	.word	0x0002ab40

00005d58 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
    5d58:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    5d5a:	4e26      	ldr	r6, [pc, #152]	; (5df4 <tc_aes128_set_encrypt_key+0x9c>)
{
    5d5c:	4607      	mov	r7, r0
    5d5e:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    5d60:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    5d62:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    5d64:	ad01      	add	r5, sp, #4
    5d66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    5d68:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    5d6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    5d6c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    5d70:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
    5d74:	4638      	mov	r0, r7
    5d76:	2f00      	cmp	r7, #0
    5d78:	d038      	beq.n	5dec <tc_aes128_set_encrypt_key+0x94>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
    5d7a:	2c00      	cmp	r4, #0
    5d7c:	d038      	beq.n	5df0 <tc_aes128_set_encrypt_key+0x98>
    5d7e:	1f38      	subs	r0, r7, #4
    5d80:	4621      	mov	r1, r4
    5d82:	4602      	mov	r2, r0
    5d84:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    5d86:	784b      	ldrb	r3, [r1, #1]
    5d88:	780d      	ldrb	r5, [r1, #0]
    5d8a:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    5d8c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    5d90:	78cd      	ldrb	r5, [r1, #3]
    5d92:	432b      	orrs	r3, r5
    5d94:	788d      	ldrb	r5, [r1, #2]
    5d96:	3104      	adds	r1, #4
    5d98:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    5d9c:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    5d9e:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    5da2:	d1f0      	bne.n	5d86 <tc_aes128_set_encrypt_key+0x2e>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
    5da4:	4c14      	ldr	r4, [pc, #80]	; (5df8 <tc_aes128_set_encrypt_key+0xa0>)
    5da6:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    5da8:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    5daa:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    5dac:	d116      	bne.n	5ddc <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    5dae:	f3c3 4207 	ubfx	r2, r3, #16, #8
    5db2:	5ca5      	ldrb	r5, [r4, r2]
    5db4:	0e1a      	lsrs	r2, r3, #24
    5db6:	5ca2      	ldrb	r2, [r4, r2]
    5db8:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    5dbc:	f3c3 2507 	ubfx	r5, r3, #8, #8
    5dc0:	b2db      	uxtb	r3, r3
    5dc2:	5d65      	ldrb	r5, [r4, r5]
    5dc4:	5ce3      	ldrb	r3, [r4, r3]
    5dc6:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    5dca:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    5dce:	ad0c      	add	r5, sp, #48	; 0x30
    5dd0:	f021 0303 	bic.w	r3, r1, #3
    5dd4:	442b      	add	r3, r5
    5dd6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    5dda:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
    5ddc:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    5de0:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    5de2:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    5de4:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    5de6:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    5de8:	d1de      	bne.n	5da8 <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
    5dea:	2001      	movs	r0, #1
}
    5dec:	b00d      	add	sp, #52	; 0x34
    5dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    5df0:	4620      	mov	r0, r4
    5df2:	e7fb      	b.n	5dec <tc_aes128_set_encrypt_key+0x94>
    5df4:	0002a8d4 	.word	0x0002a8d4
    5df8:	0002ccba 	.word	0x0002ccba

00005dfc <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
    5dfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5e00:	4615      	mov	r5, r2
    5e02:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
    5e04:	4606      	mov	r6, r0
    5e06:	2800      	cmp	r0, #0
    5e08:	d058      	beq.n	5ebc <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    5e0a:	2900      	cmp	r1, #0
    5e0c:	d059      	beq.n	5ec2 <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    5e0e:	2a00      	cmp	r2, #0
    5e10:	d059      	beq.n	5ec6 <tc_aes_encrypt+0xca>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    5e12:	2310      	movs	r3, #16
    5e14:	460a      	mov	r2, r1
    5e16:	4668      	mov	r0, sp
    5e18:	4619      	mov	r1, r3
    5e1a:	f01f fd3c 	bl	25896 <_copy>
	add_round_key(state, s->words);
    5e1e:	4629      	mov	r1, r5
    5e20:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
    5e22:	4c2a      	ldr	r4, [pc, #168]	; (5ecc <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
    5e24:	f020 fc43 	bl	266ae <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
    5e28:	f105 0710 	add.w	r7, r5, #16
    5e2c:	46a1      	mov	r9, r4
    5e2e:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
    5e30:	46e8      	mov	r8, sp
{
    5e32:	466a      	mov	r2, sp
    5e34:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
    5e36:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    5e38:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
    5e3a:	5c61      	ldrb	r1, [r4, r1]
    5e3c:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    5e40:	d1f9      	bne.n	5e36 <tc_aes_encrypt+0x3a>
		sub_bytes(state);
		shift_rows(state);
    5e42:	4668      	mov	r0, sp
    5e44:	f020 fc78 	bl	26738 <shift_rows>
	mult_row_column(t, s);
    5e48:	4669      	mov	r1, sp
    5e4a:	a804      	add	r0, sp, #16
    5e4c:	f020 fcad 	bl	267aa <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
    5e50:	a901      	add	r1, sp, #4
    5e52:	a805      	add	r0, sp, #20
    5e54:	f020 fca9 	bl	267aa <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
    5e58:	a902      	add	r1, sp, #8
    5e5a:	a806      	add	r0, sp, #24
    5e5c:	f020 fca5 	bl	267aa <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
    5e60:	a903      	add	r1, sp, #12
    5e62:	a807      	add	r0, sp, #28
    5e64:	f020 fca1 	bl	267aa <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
    5e68:	2310      	movs	r3, #16
    5e6a:	4619      	mov	r1, r3
    5e6c:	eb0d 0203 	add.w	r2, sp, r3
    5e70:	4668      	mov	r0, sp
    5e72:	f01f fd10 	bl	25896 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    5e76:	4639      	mov	r1, r7
    5e78:	4668      	mov	r0, sp
    5e7a:	3710      	adds	r7, #16
    5e7c:	f020 fc17 	bl	266ae <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
    5e80:	42af      	cmp	r7, r5
    5e82:	d1d5      	bne.n	5e30 <tc_aes_encrypt+0x34>
    5e84:	2410      	movs	r4, #16
		s[i] = sbox[s[i]];
    5e86:	f898 3000 	ldrb.w	r3, [r8]
	for (i = 0; i < (Nb * Nk); ++i) {
    5e8a:	3c01      	subs	r4, #1
		s[i] = sbox[s[i]];
    5e8c:	f819 3003 	ldrb.w	r3, [r9, r3]
    5e90:	f808 3b01 	strb.w	r3, [r8], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    5e94:	d1f7      	bne.n	5e86 <tc_aes_encrypt+0x8a>
	}

	sub_bytes(state);
	shift_rows(state);
    5e96:	4668      	mov	r0, sp
    5e98:	f020 fc4e 	bl	26738 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
    5e9c:	4629      	mov	r1, r5
    5e9e:	4668      	mov	r0, sp
    5ea0:	f020 fc05 	bl	266ae <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
    5ea4:	2310      	movs	r3, #16
    5ea6:	4619      	mov	r1, r3
    5ea8:	466a      	mov	r2, sp
    5eaa:	4630      	mov	r0, r6
    5eac:	f01f fcf3 	bl	25896 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    5eb0:	4668      	mov	r0, sp
    5eb2:	2210      	movs	r2, #16
    5eb4:	4621      	mov	r1, r4
    5eb6:	f01f fcfb 	bl	258b0 <_set>

	return TC_CRYPTO_SUCCESS;
    5eba:	2001      	movs	r0, #1
}
    5ebc:	b009      	add	sp, #36	; 0x24
    5ebe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
    5ec2:	4608      	mov	r0, r1
    5ec4:	e7fa      	b.n	5ebc <tc_aes_encrypt+0xc0>
    5ec6:	4610      	mov	r0, r2
    5ec8:	e7f8      	b.n	5ebc <tc_aes_encrypt+0xc0>
    5eca:	bf00      	nop
    5ecc:	0002ccba 	.word	0x0002ccba

00005ed0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    5ed0:	4a0a      	ldr	r2, [pc, #40]	; (5efc <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
    5ed2:	490b      	ldr	r1, [pc, #44]	; (5f00 <arch_swap+0x30>)
	_current->arch.basepri = key;
    5ed4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    5ed6:	6809      	ldr	r1, [r1, #0]
    5ed8:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    5edc:	4909      	ldr	r1, [pc, #36]	; (5f04 <arch_swap+0x34>)
	_current->arch.basepri = key;
    5ede:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    5ee2:	684b      	ldr	r3, [r1, #4]
    5ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    5ee8:	604b      	str	r3, [r1, #4]
    5eea:	2300      	movs	r3, #0
    5eec:	f383 8811 	msr	BASEPRI, r3
    5ef0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    5ef4:	6893      	ldr	r3, [r2, #8]
}
    5ef6:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
    5efa:	4770      	bx	lr
    5efc:	200023f4 	.word	0x200023f4
    5f00:	0002c100 	.word	0x0002c100
    5f04:	e000ed00 	.word	0xe000ed00

00005f08 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    5f08:	4919      	ldr	r1, [pc, #100]	; (5f70 <z_arm_pendsv+0x68>)
    ldr r2, [r1, #_kernel_offset_to_current]
    5f0a:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    5f0c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    5f10:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    5f12:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    5f16:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    5f1a:	2020      	movs	r0, #32
    msr BASEPRI, r0
    5f1c:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    5f20:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    5f24:	4f13      	ldr	r7, [pc, #76]	; (5f74 <z_arm_pendsv+0x6c>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    5f26:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    5f2a:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    5f2c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    5f2e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    5f30:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
    movs r3, #0
    5f34:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    5f36:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    5f3a:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    5f3e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    5f40:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    5f42:	f000 fe5f 	bl	6c04 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    5f46:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
#endif

#ifdef CONFIG_USERSPACE
    /* restore mode */
    ldr r0, [r2, #_thread_offset_to_mode]
    5f4a:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
    mrs r3, CONTROL
    5f4e:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #1
    5f52:	f023 0301 	bic.w	r3, r3, #1
    orr r3, r0
    5f56:	ea43 0300 	orr.w	r3, r3, r0
    msr CONTROL, r3
    5f5a:	f383 8814 	msr	CONTROL, r3

    /* ISB is not strictly necessary here (stack pointer is not being
     * touched), but it's recommended to avoid executing pre-fetched
     * instructions with the previous privilege.
     */
    isb
    5f5e:	f3bf 8f6f 	isb	sy

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    5f62:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    5f66:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    5f6a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    5f6e:	4770      	bx	lr
    ldr r1, =_kernel
    5f70:	200023f4 	.word	0x200023f4
    ldr v4, =_SCS_ICSR
    5f74:	e000ed04 	.word	0xe000ed04

00005f78 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    5f78:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    5f7c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    5f7e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    5f82:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    5f86:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    5f88:	f811 1c02 	ldrb.w	r1, [r1, #-2]
    * 1: irq_offload (if configured)
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call (if user mode supported)
    */
#if defined(CONFIG_USERSPACE)
    mrs r2, CONTROL
    5f8c:	f3ef 8214 	mrs	r2, CONTROL

    cmp r1, #3
    5f90:	2903      	cmp	r1, #3
    beq _do_syscall
    5f92:	d008      	beq.n	5fa6 <_do_syscall>
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    movs r3, #0x1
    tst r2, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst r2, #0x1
    5f94:	f012 0f01 	tst.w	r2, #1
#endif
    bne _oops
    5f98:	d101      	bne.n	5f9e <_oops>

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    5f9a:	2902      	cmp	r1, #2
    beq _oops
    5f9c:	d0ff      	beq.n	5f9e <_oops>

00005f9e <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    5f9e:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    5fa0:	f020 fd50 	bl	26a44 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    5fa4:	bd01      	pop	{r0, pc}

00005fa6 <_do_syscall>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    movs r3, #24
    ldr r1, [r0, r3]   /* grab address of PC from stack frame */
    mov r8, r1
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldr r8, [r0, #24]   /* grab address of PC from stack frame */
    5fa6:	f8d0 8018 	ldr.w	r8, [r0, #24]
#endif
    ldr r1, =z_arm_do_syscall
    5faa:	490d      	ldr	r1, [pc, #52]	; (5fe0 <valid_syscall_id+0x24>)
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    str r1, [r0, r3]   /* overwrite the PC to point to z_arm_do_syscall */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    str r1, [r0, #24]   /* overwrite the PC to point to z_arm_do_syscall */
    5fac:	6181      	str	r1, [r0, #24]
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    ldr r3, =K_SYSCALL_LIMIT
    cmp r6, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* validate syscall limit */
    ldr ip, =K_SYSCALL_LIMIT
    5fae:	f44f 7c9a 	mov.w	ip, #308	; 0x134
    cmp r6, ip
    5fb2:	4566      	cmp	r6, ip
#endif
    /* The supplied syscall_id must be lower than the limit
     * (Requires unsigned integer comparison)
     */
    blo valid_syscall_id
    5fb4:	d302      	bcc.n	5fbc <valid_syscall_id>

    /* bad syscall id.  Set arg1 to bad id and set call_id to SYSCALL_BAD */
    str r6, [r0]
    5fb6:	6006      	str	r6, [r0, #0]
    ldr r6, =K_SYSCALL_BAD
    5fb8:	f240 1633 	movw	r6, #307	; 0x133

00005fbc <valid_syscall_id>:

    /* Bad syscalls treated as valid syscalls with ID K_SYSCALL_BAD. */

valid_syscall_id:
    ldr r0, =_kernel
    5fbc:	4809      	ldr	r0, [pc, #36]	; (5fe4 <valid_syscall_id+0x28>)
    ldr r0, [r0, #_kernel_offset_to_current]
    5fbe:	6880      	ldr	r0, [r0, #8]
    dsb
    /* set mode to privileged, r2 still contains value from CONTROL */
    movs r3, #1
    bics r2, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldr r1, [r0, #_thread_offset_to_mode]
    5fc0:	f8d0 1094 	ldr.w	r1, [r0, #148]	; 0x94
    bic r1, #1
    5fc4:	f021 0101 	bic.w	r1, r1, #1
    /* Store (privileged) mode in thread's mode state variable */
    str r1, [r0, #_thread_offset_to_mode]
    5fc8:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
    dsb
    5fcc:	f3bf 8f4f 	dsb	sy
    /* set mode to privileged, r2 still contains value from CONTROL */
    bic r2, #1
    5fd0:	f022 0201 	bic.w	r2, r2, #1
#endif
    msr CONTROL, r2
    5fd4:	f382 8814 	msr	CONTROL, r2

    /* ISB is not strictly necessary here (stack pointer is not being
     * touched), but it's recommended to avoid executing pre-fetched
     * instructions with the previous privilege.
     */
    isb
    5fd8:	f3bf 8f6f 	isb	sy
    ldr r1, [r0, #_thread_offset_to_stack_info_start]    /* stack_info.start */
    msr PSPLIM, r1
#endif /* CONFIG_BUILTIN_STACK_GUARD */

    /* return from SVC to the modified LR - z_arm_do_syscall */
    bx lr
    5fdc:	4770      	bx	lr
    5fde:	0000      	.short	0x0000
    ldr r1, =z_arm_do_syscall
    5fe0:	000063b9 	.word	0x000063b9
    ldr r0, =_kernel
    5fe4:	200023f4 	.word	0x200023f4

00005fe8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    5fe8:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    5fea:	2b00      	cmp	r3, #0
    5fec:	db08      	blt.n	6000 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5fee:	2201      	movs	r2, #1
    5ff0:	f000 001f 	and.w	r0, r0, #31
    5ff4:	fa02 f000 	lsl.w	r0, r2, r0
    5ff8:	095b      	lsrs	r3, r3, #5
    5ffa:	4a02      	ldr	r2, [pc, #8]	; (6004 <arch_irq_enable+0x1c>)
    5ffc:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    6000:	4770      	bx	lr
    6002:	bf00      	nop
    6004:	e000e100 	.word	0xe000e100

00006008 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    6008:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    600a:	2b00      	cmp	r3, #0
    600c:	db0d      	blt.n	602a <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    600e:	2201      	movs	r2, #1
    6010:	095b      	lsrs	r3, r3, #5
    6012:	f000 001f 	and.w	r0, r0, #31
    6016:	fa02 f000 	lsl.w	r0, r2, r0
    601a:	3320      	adds	r3, #32
    601c:	4a03      	ldr	r2, [pc, #12]	; (602c <arch_irq_disable+0x24>)
    601e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    6022:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6026:	f3bf 8f6f 	isb	sy
}
    602a:	4770      	bx	lr
    602c:	e000e100 	.word	0xe000e100

00006030 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    6030:	4b05      	ldr	r3, [pc, #20]	; (6048 <arch_irq_is_enabled+0x18>)
    6032:	0942      	lsrs	r2, r0, #5
    6034:	f000 001f 	and.w	r0, r0, #31
    6038:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    603c:	2301      	movs	r3, #1
    603e:	fa03 f000 	lsl.w	r0, r3, r0
}
    6042:	4010      	ands	r0, r2
    6044:	4770      	bx	lr
    6046:	bf00      	nop
    6048:	e000e100 	.word	0xe000e100

0000604c <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    604c:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    604e:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6050:	bfa8      	it	ge
    6052:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    6056:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    605a:	bfb8      	it	lt
    605c:	4b06      	ldrlt	r3, [pc, #24]	; (6078 <z_arm_irq_priority_set+0x2c>)
    605e:	ea4f 1141 	mov.w	r1, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6062:	bfac      	ite	ge
    6064:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6068:	f000 000f 	andlt.w	r0, r0, #15
    606c:	b2c9      	uxtb	r1, r1
    606e:	bfb4      	ite	lt
    6070:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6072:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    6076:	4770      	bx	lr
    6078:	e000ed14 	.word	0xe000ed14

0000607c <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    607c:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    607e:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    6080:	4b04      	ldr	r3, [pc, #16]	; (6094 <_arch_isr_direct_pm+0x18>)
    6082:	6a18      	ldr	r0, [r3, #32]
    6084:	b118      	cbz	r0, 608e <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    6086:	2200      	movs	r2, #0
    6088:	621a      	str	r2, [r3, #32]
		z_pm_save_idle_exit(idle_val);
    608a:	f023 f994 	bl	293b6 <z_pm_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    608e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    6090:	bd08      	pop	{r3, pc}
    6092:	bf00      	nop
    6094:	200023f4 	.word	0x200023f4

00006098 <arch_user_mode_enter>:
					void *p1, void *p2, void *p3)
{

	/* Set up privileged stack before entering user mode */
	_current->arch.priv_stack_start =
		(uint32_t)z_priv_stack_find(_current->stack_obj);
    6098:	4c0c      	ldr	r4, [pc, #48]	; (60cc <arch_user_mode_enter+0x34>)
{
    609a:	4698      	mov	r8, r3
		(uint32_t)z_priv_stack_find(_current->stack_obj);
    609c:	68a3      	ldr	r3, [r4, #8]
{
    609e:	b583      	push	{r0, r1, r7, lr}
    60a0:	4605      	mov	r5, r0
		(uint32_t)z_priv_stack_find(_current->stack_obj);
    60a2:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
{
    60a6:	4617      	mov	r7, r2
    60a8:	460e      	mov	r6, r1
		(uint32_t)z_priv_stack_find(_current->stack_obj);
    60aa:	f024 f91d 	bl	2a2e8 <z_priv_stack_find>
	_current->arch.priv_stack_start =
    60ae:	68a4      	ldr	r4, [r4, #8]
#else
	_current->arch.priv_stack_start += MPU_GUARD_ALIGN_AND_SIZE;
#endif /* CONFIG_FPU && CONFIG_FPU_SHARING */
#endif /* CONFIG_MPU_STACK_GUARD */

	z_arm_userspace_enter(user_entry, p1, p2, p3,
    60b0:	e9d4 321b 	ldrd	r3, r2, [r4, #108]	; 0x6c
    60b4:	1a9b      	subs	r3, r3, r2
	_current->arch.priv_stack_start =
    60b6:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	z_arm_userspace_enter(user_entry, p1, p2, p3,
    60ba:	9301      	str	r3, [sp, #4]
    60bc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    60be:	9300      	str	r3, [sp, #0]
    60c0:	463a      	mov	r2, r7
    60c2:	4643      	mov	r3, r8
    60c4:	4631      	mov	r1, r6
    60c6:	4628      	mov	r0, r5
    60c8:	f000 f934 	bl	6334 <z_arm_userspace_enter>
    60cc:	200023f4 	.word	0x200023f4

000060d0 <arch_new_thread>:
{
    60d0:	b530      	push	{r4, r5, lr}
	if ((thread->base.user_options & K_USER) != 0) {
    60d2:	7b01      	ldrb	r1, [r0, #12]
	iframe->a1 = (uint32_t)entry;
    60d4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    60d8:	9b03      	ldr	r3, [sp, #12]
    60da:	f842 3c1c 	str.w	r3, [r2, #-28]
		iframe->pc = (uint32_t)arch_user_mode_enter;
    60de:	4d0e      	ldr	r5, [pc, #56]	; (6118 <arch_new_thread+0x48>)
	iframe->a3 = (uint32_t)p2;
    60e0:	9b04      	ldr	r3, [sp, #16]
    60e2:	f842 3c18 	str.w	r3, [r2, #-24]
	if ((thread->base.user_options & K_USER) != 0) {
    60e6:	f011 0f04 	tst.w	r1, #4
	iframe->a4 = (uint32_t)p3;
    60ea:	9b05      	ldr	r3, [sp, #20]
		iframe->pc = (uint32_t)arch_user_mode_enter;
    60ec:	490b      	ldr	r1, [pc, #44]	; (611c <arch_new_thread+0x4c>)
	iframe->a4 = (uint32_t)p3;
    60ee:	f842 3c14 	str.w	r3, [r2, #-20]
		iframe->pc = (uint32_t)arch_user_mode_enter;
    60f2:	bf18      	it	ne
    60f4:	4629      	movne	r1, r5
	iframe->xpsr =
    60f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    60fa:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    60fe:	f1a2 0420 	sub.w	r4, r2, #32
	thread->arch.basepri = 0;
    6102:	2300      	movs	r3, #0
	iframe->pc &= 0xfffffffe;
    6104:	f021 0101 	bic.w	r1, r1, #1
    6108:	f842 1c08 	str.w	r1, [r2, #-8]
	thread->arch.priv_stack_start = 0;
    610c:	e9c0 3325 	strd	r3, r3, [r0, #148]	; 0x94
	thread->callee_saved.psp = (uint32_t)iframe;
    6110:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    6112:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
}
    6116:	bd30      	pop	{r4, r5, pc}
    6118:	00006099 	.word	0x00006099
    611c:	000247b9 	.word	0x000247b9

00006120 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    6120:	4b10      	ldr	r3, [pc, #64]	; (6164 <z_check_thread_stack_fail+0x44>)
    6122:	689b      	ldr	r3, [r3, #8]
{
    6124:	b510      	push	{r4, lr}
    6126:	4604      	mov	r4, r0

	if (thread == NULL) {
    6128:	b1bb      	cbz	r3, 615a <z_check_thread_stack_fail+0x3a>
	 */
	uint32_t guard_len = MPU_GUARD_ALIGN_AND_SIZE;
#endif /* CONFIG_FPU && CONFIG_FPU_SHARING */

#if defined(CONFIG_USERSPACE)
	if (thread->arch.priv_stack_start) {
    612a:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
    612e:	b168      	cbz	r0, 614c <z_check_thread_stack_fail+0x2c>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    6130:	f3ef 8214 	mrs	r2, CONTROL
		/* User thread */
		if ((__get_CONTROL() & CONTROL_nPRIV_Msk) == 0U) {
    6134:	f012 0201 	ands.w	r2, r2, #1
    6138:	d105      	bne.n	6146 <z_check_thread_stack_fail+0x26>
			/* User thread in privilege mode */
			if (IS_MPU_GUARD_VIOLATION(
    613a:	3416      	adds	r4, #22
    613c:	d10f      	bne.n	615e <z_check_thread_stack_fail+0x3e>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    613e:	4288      	cmp	r0, r1
    6140:	bf98      	it	ls
    6142:	2000      	movls	r0, #0
}
    6144:	bd10      	pop	{r4, pc}
			if (psp < (uint32_t)thread->stack_obj) {
    6146:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
    614a:	e7f8      	b.n	613e <z_check_thread_stack_fail+0x1e>
		if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start -
    614c:	3416      	adds	r4, #22
    614e:	d1f9      	bne.n	6144 <z_check_thread_stack_fail+0x24>
    6150:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    6152:	428b      	cmp	r3, r1
    6154:	bf88      	it	hi
    6156:	4618      	movhi	r0, r3
    6158:	e7f4      	b.n	6144 <z_check_thread_stack_fail+0x24>
	return 0;
    615a:	4618      	mov	r0, r3
    615c:	e7f2      	b.n	6144 <z_check_thread_stack_fail+0x24>
    615e:	4610      	mov	r0, r2
    6160:	e7f0      	b.n	6144 <z_check_thread_stack_fail+0x24>
    6162:	bf00      	nop
    6164:	200023f4 	.word	0x200023f4

00006168 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    6168:	b508      	push	{r3, lr}
    616a:	4604      	mov	r4, r0
    616c:	460e      	mov	r6, r1
    616e:	4615      	mov	r5, r2
	z_arm_configure_static_mpu_regions();
    6170:	f000 fd3c 	bl	6bec <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    6174:	4b08      	ldr	r3, [pc, #32]	; (6198 <arch_switch_to_main_thread+0x30>)
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    6176:	4620      	mov	r0, r4
	_current = main_thread;
    6178:	609c      	str	r4, [r3, #8]
	z_arm_configure_dynamic_mpu_regions(main_thread);
    617a:	f000 fd43 	bl	6c04 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    617e:	4628      	mov	r0, r5
    6180:	f386 8809 	msr	PSP, r6
    6184:	2100      	movs	r1, #0
    6186:	b663      	cpsie	if
    6188:	f381 8811 	msr	BASEPRI, r1
    618c:	f3bf 8f6f 	isb	sy
    6190:	2200      	movs	r2, #0
    6192:	2300      	movs	r3, #0
    6194:	f01e fb10 	bl	247b8 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    6198:	200023f4 	.word	0x200023f4

0000619c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    619c:	4901      	ldr	r1, [pc, #4]	; (61a4 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    619e:	2210      	movs	r2, #16
	str	r2, [r1]
    61a0:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    61a2:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    61a4:	e000ed10 	.word	0xe000ed10

000061a8 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    61a8:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    61aa:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    61ac:	f380 8811 	msr	BASEPRI, r0
	isb
    61b0:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    61b4:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    61b8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    61ba:	b662      	cpsie	i
	isb
    61bc:	f3bf 8f6f 	isb	sy

	bx	lr
    61c0:	4770      	bx	lr
    61c2:	bf00      	nop

000061c4 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    61c4:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    61c6:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    61c8:	f381 8811 	msr	BASEPRI, r1

	wfe
    61cc:	bf20      	wfe

	msr	BASEPRI, r0
    61ce:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    61d2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    61d4:	4770      	bx	lr
    61d6:	bf00      	nop

000061d8 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    61d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    61da:	4606      	mov	r6, r0

	if (esf != NULL) {
    61dc:	460c      	mov	r4, r1
    61de:	b391      	cbz	r1, 6246 <z_arm_fatal_error+0x6e>
	return arch_is_user_context();
    61e0:	f020 fc26 	bl	26a30 <arch_is_user_context>
    61e4:	4d2a      	ldr	r5, [pc, #168]	; (6290 <z_arm_fatal_error+0xb8>)
    61e6:	4b2b      	ldr	r3, [pc, #172]	; (6294 <z_arm_fatal_error+0xbc>)
    61e8:	1aed      	subs	r5, r5, r3
    61ea:	08ed      	lsrs	r5, r5, #3
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    61ec:	01ad      	lsls	r5, r5, #6
    61ee:	f045 0701 	orr.w	r7, r5, #1
    61f2:	b378      	cbz	r0, 6254 <z_arm_fatal_error+0x7c>
    61f4:	688b      	ldr	r3, [r1, #8]
    61f6:	9300      	str	r3, [sp, #0]
    61f8:	e9d1 2300 	ldrd	r2, r3, [r1]
    61fc:	4638      	mov	r0, r7
    61fe:	4926      	ldr	r1, [pc, #152]	; (6298 <z_arm_fatal_error+0xc0>)
    6200:	f01e fe49 	bl	24e96 <log_from_user>
    6204:	f020 fc14 	bl	26a30 <arch_is_user_context>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    6208:	f045 0701 	orr.w	r7, r5, #1
    620c:	b358      	cbz	r0, 6266 <z_arm_fatal_error+0x8e>
    620e:	6963      	ldr	r3, [r4, #20]
    6210:	9300      	str	r3, [sp, #0]
    6212:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    6216:	4921      	ldr	r1, [pc, #132]	; (629c <z_arm_fatal_error+0xc4>)
    6218:	4638      	mov	r0, r7
    621a:	f01e fe3c 	bl	24e96 <log_from_user>
    621e:	f020 fc07 	bl	26a30 <arch_is_user_context>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    6222:	f045 0301 	orr.w	r3, r5, #1
    6226:	b338      	cbz	r0, 6278 <z_arm_fatal_error+0xa0>
    6228:	69e2      	ldr	r2, [r4, #28]
    622a:	491d      	ldr	r1, [pc, #116]	; (62a0 <z_arm_fatal_error+0xc8>)
    622c:	4618      	mov	r0, r3
    622e:	f01e fe32 	bl	24e96 <log_from_user>
    6232:	f020 fbfd 	bl	26a30 <arch_is_user_context>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    6236:	f045 0501 	orr.w	r5, r5, #1
    623a:	b318      	cbz	r0, 6284 <z_arm_fatal_error+0xac>
    623c:	69a2      	ldr	r2, [r4, #24]
    623e:	4919      	ldr	r1, [pc, #100]	; (62a4 <z_arm_fatal_error+0xcc>)
    6240:	4628      	mov	r0, r5
    6242:	f01e fe28 	bl	24e96 <log_from_user>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    6246:	4621      	mov	r1, r4
    6248:	4630      	mov	r0, r6
}
    624a:	b003      	add	sp, #12
    624c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	z_fatal_error(reason, esf);
    6250:	f01a bae6 	b.w	20820 <z_fatal_error>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    6254:	f8ad 7000 	strh.w	r7, [sp]
    6258:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    625c:	480e      	ldr	r0, [pc, #56]	; (6298 <z_arm_fatal_error+0xc0>)
    625e:	6809      	ldr	r1, [r1, #0]
    6260:	f01e fe79 	bl	24f56 <log_3>
    6264:	e7ce      	b.n	6204 <z_arm_fatal_error+0x2c>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    6266:	f8ad 7000 	strh.w	r7, [sp]
    626a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    626e:	68e1      	ldr	r1, [r4, #12]
    6270:	480a      	ldr	r0, [pc, #40]	; (629c <z_arm_fatal_error+0xc4>)
    6272:	f01e fe70 	bl	24f56 <log_3>
    6276:	e7d2      	b.n	621e <z_arm_fatal_error+0x46>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    6278:	69e1      	ldr	r1, [r4, #28]
    627a:	4809      	ldr	r0, [pc, #36]	; (62a0 <z_arm_fatal_error+0xc8>)
    627c:	461a      	mov	r2, r3
    627e:	f01e fe3d 	bl	24efc <log_1>
    6282:	e7d6      	b.n	6232 <z_arm_fatal_error+0x5a>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    6284:	69a1      	ldr	r1, [r4, #24]
    6286:	4807      	ldr	r0, [pc, #28]	; (62a4 <z_arm_fatal_error+0xcc>)
    6288:	462a      	mov	r2, r5
    628a:	f01e fe37 	bl	24efc <log_1>
}
    628e:	e7da      	b.n	6246 <z_arm_fatal_error+0x6e>
    6290:	0002a810 	.word	0x0002a810
    6294:	0002a6d0 	.word	0x0002a6d0
    6298:	0002cdba 	.word	0x0002cdba
    629c:	0002cde9 	.word	0x0002cde9
    62a0:	0002ce18 	.word	0x0002ce18
    62a4:	0002ce27 	.word	0x0002ce27

000062a8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    62a8:	bf30      	wfi
    b z_SysNmiOnReset
    62aa:	f7ff bffd 	b.w	62a8 <z_SysNmiOnReset>
    62ae:	bf00      	nop

000062b0 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    62b0:	4a0e      	ldr	r2, [pc, #56]	; (62ec <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    62b2:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    62b4:	4b0e      	ldr	r3, [pc, #56]	; (62f0 <z_arm_prep_c+0x40>)
    62b6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    62ba:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    62bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    62c0:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    62c4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    62c8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    62cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    62d0:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    62d4:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    62d8:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    62dc:	f01a fb36 	bl	2094c <z_bss_zero>
	z_data_copy();
    62e0:	f01c fcf4 	bl	22ccc <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    62e4:	f000 fc64 	bl	6bb0 <z_arm_interrupt_init>
	z_cstart();
    62e8:	f01a fb54 	bl	20994 <z_cstart>
    62ec:	00000000 	.word	0x00000000
    62f0:	e000ed00 	.word	0xe000ed00

000062f4 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    62f4:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    62f6:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    62f8:	4a0b      	ldr	r2, [pc, #44]	; (6328 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    62fa:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    62fc:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    62fe:	bf1e      	ittt	ne
	movne	r1, #0
    6300:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    6302:	6211      	strne	r1, [r2, #32]
		blne	z_pm_save_idle_exit
    6304:	f023 f857 	blne	293b6 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    6308:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    630a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    630e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    6312:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    6316:	4905      	ldr	r1, [pc, #20]	; (632c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    6318:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    631a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    631c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    631e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    6322:	4903      	ldr	r1, [pc, #12]	; (6330 <_isr_wrapper+0x3c>)
	bx r1
    6324:	4708      	bx	r1
    6326:	0000      	.short	0x0000
	ldr r2, =_kernel
    6328:	200023f4 	.word	0x200023f4
	ldr r1, =_sw_isr_table
    632c:	0002a504 	.word	0x0002a504
	ldr r1, =z_arm_int_exit
    6330:	00006b95 	.word	0x00006b95

00006334 <z_arm_userspace_enter>:
 * z_arm_userspace_enter(user_entry, p1, p2, p3,
 *                        stack_info.start, stack_info.size);
 */
SECTION_FUNC(TEXT,z_arm_userspace_enter)
    /* move user_entry to lr */
    mov lr, r0
    6334:	4686      	mov	lr, r0

    /* prepare to set stack to privileged stack */
    ldr r0, =_kernel
    6336:	481e      	ldr	r0, [pc, #120]	; (63b0 <z_arm_userspace_enter+0x7c>)
    ldr r0, [r0, #_kernel_offset_to_current]
    6338:	6880      	ldr	r0, [r0, #8]
    ldr r1, =CONFIG_PRIVILEGED_STACK_SIZE
    add r0, r0, r1
    /* Restore p1 from ip */
    mov r1, ip
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldr r0, [r0, #_thread_offset_to_priv_stack_start]    /* priv stack ptr */
    633a:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
    ldr ip, =CONFIG_PRIVILEGED_STACK_SIZE
    633e:	f44f 6c80 	mov.w	ip, #1024	; 0x400
    add r0, r0, ip
    6342:	4460      	add	r0, ip

    /* store current stack pointer to ip
     * the current stack pointer is needed to retrieve
     * stack_info.start and stack_info.size
     */
    mov ip, sp
    6344:	46ec      	mov	ip, sp
     * modifying PSP via MSR instruction is not subject to stack limit
     * checking, so we do not need to clear PSPLIM before setting PSP.
     * The operation is safe since, by design, the privileged stack is
     * located in memory higher than the default (user) thread stack.
     */
    msr PSP, r0
    6346:	f380 8809 	msr	PSP, r0
    ldr r0, [r0, #_thread_offset_to_priv_stack_start]    /* priv stack ptr */
    msr PSPLIM, r0
#endif

    /* push args to stack */
    push {r1,r2,r3,lr}
    634a:	b50e      	push	{r1, r2, r3, lr}
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    mov r1, ip
    push {r0,r1}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    push {r0,ip}
    634c:	e92d 1001 	stmdb	sp!, {r0, ip}
     *
     * Note that the risk for overflow is higher if using the normal thread
     * stack, since we do not control how much stack is actually left, when
     * user invokes z_arm_userspace_enter().
     */
    ldr r0, =_kernel
    6350:	4817      	ldr	r0, [pc, #92]	; (63b0 <z_arm_userspace_enter+0x7c>)
    ldr r0, [r0, #_kernel_offset_to_current]
    6352:	6880      	ldr	r0, [r0, #8]
    bl z_arm_configure_dynamic_mpu_regions
    6354:	f000 fc56 	bl	6c04 <z_arm_configure_dynamic_mpu_regions>
    ldr r3, [r3, #4]
    mov ip, r3

    push {r0,r3}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    pop {r0,ip}
    6358:	e8bd 1001 	ldmia.w	sp!, {r0, ip}

    /* load up stack info from user stack */
    ldr r0, [ip]
    635c:	f8dc 0000 	ldr.w	r0, [ip]
    ldr ip, [ip, #4]
    6360:	f8dc c004 	ldr.w	ip, [ip, #4]

    push {r0,ip}
    6364:	e92d 1001 	stmdb	sp!, {r0, ip}
#endif

    /* clear the user stack area to clean out privileged data */
    /* from right past the guard right up to the end */
    mov r2, ip
    6368:	4662      	mov	r2, ip
#ifdef CONFIG_INIT_STACKS
    ldr r1,=0xaaaaaaaa
#else
    eors.n r1, r1
    636a:	4049      	eors	r1, r1
#endif
    bl memset
    636c:	f024 f846 	bl	2a3fc <memset>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0, r1}
    mov ip, r1
#elif (defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE))
    pop {r0,ip}
    6370:	e8bd 1001 	ldmia.w	sp!, {r0, ip}
#endif

    /* r0 contains user stack start, ip contains user stack size */
    add r0, r0, ip   /* calculate top of stack */
    6374:	4460      	add	r0, ip
    mov ip, r4
    pop {r1,r2,r3,r4}
    mov lr, r4
    mov r4, ip
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    pop {r1,r2,r3,lr}
    6376:	e8bd 400e 	ldmia.w	sp!, {r1, r2, r3, lr}

    pop {r0, ip}
#endif

    /* set stack to user stack */
    msr PSP, r0
    637a:	f380 8809 	msr	PSP, r0
    msr BASEPRI, ip
    isb
#endif

    /* restore r0 */
    mov r0, lr
    637e:	4670      	mov	r0, lr
    mov ip, r3
    /* Store (unprivileged) mode in thread's mode state variable */
    ldr r2, =_thread_offset_to_mode
    str r1, [r0, r2]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    push {r0, r1}
    6380:	b403      	push	{r0, r1}
    ldr r0, =_kernel
    6382:	480b      	ldr	r0, [pc, #44]	; (63b0 <z_arm_userspace_enter+0x7c>)
    ldr r0, [r0, #_kernel_offset_to_current]
    6384:	6880      	ldr	r0, [r0, #8]
    ldr r1, [r0, #_thread_offset_to_mode]
    6386:	f8d0 1094 	ldr.w	r1, [r0, #148]	; 0x94
    orrs r1, r1, #1
    638a:	f051 0101 	orrs.w	r1, r1, #1
    mrs ip, CONTROL
    638e:	f3ef 8c14 	mrs	ip, CONTROL
    orrs ip, ip, #1
    6392:	f05c 0c01 	orrs.w	ip, ip, #1
    /* Store (unprivileged) mode in thread's mode state variable */
    str r1, [r0, #_thread_offset_to_mode]
    6396:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
#endif
    dsb
    639a:	f3bf 8f4f 	dsb	sy
    msr CONTROL, ip
    639e:	f38c 8814 	msr	CONTROL, ip

    /* ISB is not strictly necessary here (stack pointer is not being
     * touched), but it's recommended to avoid executing pre-fetched
     * instructions with the previous privilege.
     */
    isb
    63a2:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0, r1, r2, r3}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    pop {r0, r1}
    63a6:	bc03      	pop	{r0, r1}
    push {r0, r1}
    ldr r0, =z_thread_entry
    mov ip, r0
    pop {r0, r1}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldr ip, =z_thread_entry
    63a8:	f8df c008 	ldr.w	ip, [pc, #8]	; 63b4 <z_arm_userspace_enter+0x80>
#endif
    bx ip
    63ac:	4760      	bx	ip
    63ae:	0000      	.short	0x0000
    ldr r0, =_kernel
    63b0:	200023f4 	.word	0x200023f4
    ldr ip, =z_thread_entry
    63b4:	000247b9 	.word	0x000247b9

000063b8 <z_arm_do_syscall>:
    pop {r0, r1}

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)

    /* setup privileged stack */
    ldr ip, =_kernel
    63b8:	f8df c08c 	ldr.w	ip, [pc, #140]	; 6448 <dispatch_syscall+0x5a>
    ldr ip, [ip, #_kernel_offset_to_current]
    63bc:	f8dc c008 	ldr.w	ip, [ip, #8]
    ldr ip, [ip, #_thread_offset_to_priv_stack_start]    /* priv stack ptr */
    63c0:	f8dc c098 	ldr.w	ip, [ip, #152]	; 0x98
    add ip, #CONFIG_PRIVILEGED_STACK_SIZE
    63c4:	f50c 6c80 	add.w	ip, ip, #1024	; 0x400

    /* Store current SP and LR at the beginning of the priv stack */
    subs ip, #8
    63c8:	f1bc 0c08 	subs.w	ip, ip, #8
    str sp, [ip, #0]
    63cc:	f8cc d000 	str.w	sp, [ip]
    str lr, [ip, #4]
    63d0:	f8cc e004 	str.w	lr, [ip, #4]
#endif

    /* switch to privileged stack */
    msr PSP, ip
    63d4:	f38c 8809 	msr	PSP, ip
    mov lr, r0
    /* Restore r0 */
    mov r0, ip

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldr ip, =K_SYSCALL_BAD
    63d8:	f240 1c33 	movw	ip, #307	; 0x133
    cmp r6, ip
    63dc:	4566      	cmp	r6, ip
    bne valid_syscall
    63de:	d103      	bne.n	63e8 <valid_syscall>

    /* BAD SYSCALL path */
    /* fixup stack frame on the privileged stack, adding ssf */
    mov ip, sp
    63e0:	46ec      	mov	ip, sp
    push {r4,r5,ip,lr}
    63e2:	e92d 5030 	stmdb	sp!, {r4, r5, ip, lr}
    b dispatch_syscall
    63e6:	e002      	b.n	63ee <dispatch_syscall>

000063e8 <valid_syscall>:

valid_syscall:
    /* push args to complete stack frame */
    mov ip, sp
    63e8:	46ec      	mov	ip, sp
    push {r4,r5,ip}
    63ea:	e92d 1030 	stmdb	sp!, {r4, r5, ip}

000063ee <dispatch_syscall>:

dispatch_syscall:
    ldr ip, =_k_syscall_table
    63ee:	f8df c05c 	ldr.w	ip, [pc, #92]	; 644c <dispatch_syscall+0x5e>
    lsl r6, #2
    63f2:	ea4f 0686 	mov.w	r6, r6, lsl #2
    add ip, r6
    63f6:	44b4      	add	ip, r6
    ldr ip, [ip]	/* load table address */
    63f8:	f8dc c000 	ldr.w	ip, [ip]
    /* execute function from dispatch table */
    blx ip
    63fc:	47e0      	blx	ip

    /* restore LR */
    ldr lr, [sp,#16]
    63fe:	f8dd e010 	ldr.w	lr, [sp, #16]
    /* Restore r0 */
    mov r0, ip

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* set stack back to unprivileged stack */
    ldr ip, [sp,#12]
    6402:	f8dd c00c 	ldr.w	ip, [sp, #12]
    msr PSP, ip
    6406:	f38c 8809 	msr	PSP, ip
    /* Restore interrupt lock status */
    msr BASEPRI, r2
    isb
#endif

    push {r0, r1}
    640a:	b403      	push	{r0, r1}
    mrs r2, CONTROL
    orrs r2, r2, r3
    msr CONTROL, r2
    pop {r2, r3}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldr r0, =_kernel
    640c:	480e      	ldr	r0, [pc, #56]	; (6448 <dispatch_syscall+0x5a>)
    ldr r0, [r0, #_kernel_offset_to_current]
    640e:	6880      	ldr	r0, [r0, #8]
    ldr r1, [r0, #_thread_offset_to_mode]
    6410:	f8d0 1094 	ldr.w	r1, [r0, #148]	; 0x94
    orrs r1, r1, #1
    6414:	f051 0101 	orrs.w	r1, r1, #1
    /* Store (unprivileged) mode in thread's mode state variable */
    str r1, [r0, #_thread_offset_to_mode]
    6418:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
    dsb
    641c:	f3bf 8f4f 	dsb	sy
    /* drop privileges by setting bit 0 in CONTROL */
    mrs ip, CONTROL
    6420:	f3ef 8c14 	mrs	ip, CONTROL
    orrs ip, ip, #1
    6424:	f05c 0c01 	orrs.w	ip, ip, #1
    msr CONTROL, ip
    6428:	f38c 8814 	msr	CONTROL, ip

    /* ISB is not strictly necessary here (stack pointer is not being
     * touched), but it's recommended to avoid executing pre-fetched
     * instructions with the previous privilege.
     */
    isb
    642c:	f3bf 8f6f 	isb	sy
    pop {r0, r1}
    6430:	bc03      	pop	{r0, r1}

    /* Zero out volatile (caller-saved) registers so as to not leak state from
     * kernel mode. The C calling convention for the syscall handler will
     * restore the others to original values.
     */
    mov r1, #0
    6432:	f04f 0100 	mov.w	r1, #0
    mov r2, #0
    6436:	f04f 0200 	mov.w	r2, #0
    mov r3, #0
    643a:	f04f 0300 	mov.w	r3, #0

    /*
     * return back to original function that called SVC, add 1 to force thumb
     * mode
     */
    mov ip, r8
    643e:	46c4      	mov	ip, r8
    orrs ip, ip, #1
    6440:	f05c 0c01 	orrs.w	ip, ip, #1

#endif
    bx ip
    6444:	4760      	bx	ip
    6446:	0000      	.short	0x0000
    ldr ip, =_kernel
    6448:	200023f4 	.word	0x200023f4
    ldr ip, =_k_syscall_table
    644c:	0002c1d4 	.word	0x0002c1d4

00006450 <arch_user_string_nlen>:

/*
 * size_t arch_user_string_nlen(const char *s, size_t maxsize, int *err_arg)
 */
SECTION_FUNC(TEXT, arch_user_string_nlen)
    push {r0, r1, r2, r4, r5, lr}
    6450:	b537      	push	{r0, r1, r2, r4, r5, lr}

    /* sp+4 is error value, init to -1 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    ldr r3, =-1
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    mov.w r3, #-1
    6452:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif
    str	r3, [sp, #4]
    6456:	9301      	str	r3, [sp, #4]

    /* Perform string length calculation */
    movs r3, #0		/* r3 is the counter */
    6458:	2300      	movs	r3, #0

0000645a <z_arm_user_string_nlen_fault_start>:

strlen_loop:
z_arm_user_string_nlen_fault_start:
    /* r0 contains the string. r5 = *(r0 + r3]). This could fault. */
    ldrb r5, [r0, r3]
    645a:	5cc5      	ldrb	r5, [r0, r3]

0000645c <z_arm_user_string_nlen_fault_end>:
z_arm_user_string_nlen_fault_end:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cmp r5, #0
    beq strlen_done
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    cbz	r5, strlen_done
    645c:	b11d      	cbz	r5, 6466 <strlen_done>
#endif
    cmp	r3, r1
    645e:	428b      	cmp	r3, r1
    beq.n strlen_done
    6460:	d001      	beq.n	6466 <strlen_done>

    adds r3, #1
    6462:	3301      	adds	r3, #1
    b.n	strlen_loop
    6464:	e7f9      	b.n	645a <z_arm_user_string_nlen_fault_start>

00006466 <strlen_done>:

strlen_done:
    /* Move length calculation from r3 to r0 (return value register) */
    mov	r0, r3
    6466:	4618      	mov	r0, r3

    /* Clear error value since we succeeded */
    movs r1, #0
    6468:	2100      	movs	r1, #0
    str	r1, [sp, #4]
    646a:	9101      	str	r1, [sp, #4]

0000646c <z_arm_user_string_nlen_fixup>:

z_arm_user_string_nlen_fixup:
    /* Write error value to err pointer parameter */
    ldr	r1, [sp, #4]
    646c:	9901      	ldr	r1, [sp, #4]
    str	r1, [r2, #0]
    646e:	6011      	str	r1, [r2, #0]

    add	sp, #12
    6470:	b003      	add	sp, #12
    pop	{r4, r5, pc}
    6472:	bd30      	pop	{r4, r5, pc}

00006474 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    6474:	f020 fb27 	bl	26ac6 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    6478:	2020      	movs	r0, #32
    msr BASEPRI, r0
    647a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    647e:	4808      	ldr	r0, [pc, #32]	; (64a0 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    6480:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    6484:	1840      	adds	r0, r0, r1
    msr PSP, r0
    6486:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    648a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    648e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    6490:	4308      	orrs	r0, r1
    msr CONTROL, r0
    6492:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    6496:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    649a:	f7ff ff09 	bl	62b0 <z_arm_prep_c>
    649e:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    64a0:	200041f0 	.word	0x200041f0

000064a4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    64a4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    64a8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    64ac:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    64ae:	4672      	mov	r2, lr
	bl z_arm_fault
    64b0:	f000 fa56 	bl	6960 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    64b4:	bd01      	pop	{r0, pc}
    64b6:	bf00      	nop

000064b8 <bus_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    64b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    64ba:	4c5b      	ldr	r4, [pc, #364]	; (6628 <bus_fault+0x170>)
    64bc:	4605      	mov	r5, r0
    64be:	460f      	mov	r7, r1
    64c0:	4616      	mov	r6, r2
    64c2:	f020 fae0 	bl	26a86 <arch_is_user_context>
    64c6:	4b59      	ldr	r3, [pc, #356]	; (662c <bus_fault+0x174>)
    64c8:	1ae4      	subs	r4, r4, r3
    64ca:	08e4      	lsrs	r4, r4, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    64cc:	01a4      	lsls	r4, r4, #6
    64ce:	f044 0301 	orr.w	r3, r4, #1
    64d2:	2800      	cmp	r0, #0
    64d4:	d075      	beq.n	65c2 <bus_fault+0x10a>
    64d6:	4956      	ldr	r1, [pc, #344]	; (6630 <bus_fault+0x178>)
    64d8:	4618      	mov	r0, r3
    64da:	f01e fcdc 	bl	24e96 <log_from_user>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    64de:	4b55      	ldr	r3, [pc, #340]	; (6634 <bus_fault+0x17c>)
    64e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    64e2:	04d9      	lsls	r1, r3, #19
    64e4:	d509      	bpl.n	64fa <bus_fault+0x42>
    64e6:	f020 face 	bl	26a86 <arch_is_user_context>
		PR_FAULT_INFO("  Stacking error");
    64ea:	f044 0301 	orr.w	r3, r4, #1
    64ee:	2800      	cmp	r0, #0
    64f0:	d06c      	beq.n	65cc <bus_fault+0x114>
    64f2:	4951      	ldr	r1, [pc, #324]	; (6638 <bus_fault+0x180>)
    64f4:	4618      	mov	r0, r3
    64f6:	f01e fcce 	bl	24e96 <log_from_user>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    64fa:	4b4e      	ldr	r3, [pc, #312]	; (6634 <bus_fault+0x17c>)
    64fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    64fe:	051a      	lsls	r2, r3, #20
    6500:	d509      	bpl.n	6516 <bus_fault+0x5e>
    6502:	f020 fac0 	bl	26a86 <arch_is_user_context>
		PR_FAULT_INFO("  Unstacking error");
    6506:	f044 0301 	orr.w	r3, r4, #1
    650a:	2800      	cmp	r0, #0
    650c:	d063      	beq.n	65d6 <bus_fault+0x11e>
    650e:	494b      	ldr	r1, [pc, #300]	; (663c <bus_fault+0x184>)
    6510:	4618      	mov	r0, r3
    6512:	f01e fcc0 	bl	24e96 <log_from_user>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    6516:	4b47      	ldr	r3, [pc, #284]	; (6634 <bus_fault+0x17c>)
    6518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    651a:	059b      	lsls	r3, r3, #22
    651c:	d51f      	bpl.n	655e <bus_fault+0xa6>
    651e:	f020 fab2 	bl	26a86 <arch_is_user_context>
		PR_FAULT_INFO("  Precise data bus error");
    6522:	f044 0301 	orr.w	r3, r4, #1
    6526:	2800      	cmp	r0, #0
    6528:	d05a      	beq.n	65e0 <bus_fault+0x128>
    652a:	4945      	ldr	r1, [pc, #276]	; (6640 <bus_fault+0x188>)
    652c:	4618      	mov	r0, r3
    652e:	f01e fcb2 	bl	24e96 <log_from_user>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    6532:	4b40      	ldr	r3, [pc, #256]	; (6634 <bus_fault+0x17c>)
    6534:	6b99      	ldr	r1, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    6536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6538:	0418      	lsls	r0, r3, #16
    653a:	d510      	bpl.n	655e <bus_fault+0xa6>
    653c:	f020 faa3 	bl	26a86 <arch_is_user_context>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    6540:	f044 0301 	orr.w	r3, r4, #1
    6544:	2800      	cmp	r0, #0
    6546:	d050      	beq.n	65ea <bus_fault+0x132>
    6548:	460a      	mov	r2, r1
    654a:	4618      	mov	r0, r3
    654c:	493d      	ldr	r1, [pc, #244]	; (6644 <bus_fault+0x18c>)
    654e:	f01e fca2 	bl	24e96 <log_from_user>
			if (from_hard_fault != 0) {
    6552:	b127      	cbz	r7, 655e <bus_fault+0xa6>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    6554:	4a37      	ldr	r2, [pc, #220]	; (6634 <bus_fault+0x17c>)
    6556:	6a93      	ldr	r3, [r2, #40]	; 0x28
    6558:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    655c:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    655e:	4b35      	ldr	r3, [pc, #212]	; (6634 <bus_fault+0x17c>)
    6560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6562:	0559      	lsls	r1, r3, #21
    6564:	d509      	bpl.n	657a <bus_fault+0xc2>
    6566:	f020 fa8e 	bl	26a86 <arch_is_user_context>
		PR_FAULT_INFO("  Imprecise data bus error");
    656a:	f044 0301 	orr.w	r3, r4, #1
    656e:	2800      	cmp	r0, #0
    6570:	d040      	beq.n	65f4 <bus_fault+0x13c>
    6572:	4935      	ldr	r1, [pc, #212]	; (6648 <bus_fault+0x190>)
    6574:	4618      	mov	r0, r3
    6576:	f01e fc8e 	bl	24e96 <log_from_user>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    657a:	4b2e      	ldr	r3, [pc, #184]	; (6634 <bus_fault+0x17c>)
    657c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    657e:	05d2      	lsls	r2, r2, #23
    6580:	d542      	bpl.n	6608 <bus_fault+0x150>
    6582:	f020 fa80 	bl	26a86 <arch_is_user_context>
		PR_FAULT_INFO("  Instruction bus error");
    6586:	f044 0401 	orr.w	r4, r4, #1
    658a:	2800      	cmp	r0, #0
    658c:	d037      	beq.n	65fe <bus_fault+0x146>
    658e:	492f      	ldr	r1, [pc, #188]	; (664c <bus_fault+0x194>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    6590:	4620      	mov	r0, r4
    6592:	f01e fc80 	bl	24e96 <log_from_user>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    6596:	4a27      	ldr	r2, [pc, #156]	; (6634 <bus_fault+0x17c>)
    6598:	6a93      	ldr	r3, [r2, #40]	; 0x28
    659a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    659e:	6293      	str	r3, [r2, #40]	; 0x28
		uint32_t start = (uint32_t)exceptions[i].start & ~0x1U;
    65a0:	4b2b      	ldr	r3, [pc, #172]	; (6650 <bus_fault+0x198>)
		if (esf->basic.pc >= start && esf->basic.pc < end) {
    65a2:	69aa      	ldr	r2, [r5, #24]
		uint32_t start = (uint32_t)exceptions[i].start & ~0x1U;
    65a4:	f023 0301 	bic.w	r3, r3, #1
		if (esf->basic.pc >= start && esf->basic.pc < end) {
    65a8:	4293      	cmp	r3, r2
    65aa:	d83a      	bhi.n	6622 <bus_fault+0x16a>
    65ac:	4b29      	ldr	r3, [pc, #164]	; (6654 <bus_fault+0x19c>)
    65ae:	f023 0301 	bic.w	r3, r3, #1
    65b2:	4293      	cmp	r3, r2
    65b4:	d935      	bls.n	6622 <bus_fault+0x16a>
			esf->basic.pc = (uint32_t)(exceptions[i].fixup);
    65b6:	4b28      	ldr	r3, [pc, #160]	; (6658 <bus_fault+0x1a0>)
    65b8:	61ab      	str	r3, [r5, #24]
			return true;
    65ba:	2301      	movs	r3, #1

	*recoverable = memory_fault_recoverable(esf, true);
    65bc:	7033      	strb	r3, [r6, #0]

	return reason;
}
    65be:	2000      	movs	r0, #0
    65c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	PR_FAULT_INFO("***** BUS FAULT *****");
    65c2:	481b      	ldr	r0, [pc, #108]	; (6630 <bus_fault+0x178>)
    65c4:	4619      	mov	r1, r3
    65c6:	f01e fc8c 	bl	24ee2 <log_0>
    65ca:	e788      	b.n	64de <bus_fault+0x26>
		PR_FAULT_INFO("  Stacking error");
    65cc:	481a      	ldr	r0, [pc, #104]	; (6638 <bus_fault+0x180>)
    65ce:	4619      	mov	r1, r3
    65d0:	f01e fc87 	bl	24ee2 <log_0>
    65d4:	e791      	b.n	64fa <bus_fault+0x42>
		PR_FAULT_INFO("  Unstacking error");
    65d6:	4819      	ldr	r0, [pc, #100]	; (663c <bus_fault+0x184>)
    65d8:	4619      	mov	r1, r3
    65da:	f01e fc82 	bl	24ee2 <log_0>
    65de:	e79a      	b.n	6516 <bus_fault+0x5e>
		PR_FAULT_INFO("  Precise data bus error");
    65e0:	4817      	ldr	r0, [pc, #92]	; (6640 <bus_fault+0x188>)
    65e2:	4619      	mov	r1, r3
    65e4:	f01e fc7d 	bl	24ee2 <log_0>
    65e8:	e7a3      	b.n	6532 <bus_fault+0x7a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    65ea:	4816      	ldr	r0, [pc, #88]	; (6644 <bus_fault+0x18c>)
    65ec:	461a      	mov	r2, r3
    65ee:	f01e fc85 	bl	24efc <log_1>
    65f2:	e7ae      	b.n	6552 <bus_fault+0x9a>
		PR_FAULT_INFO("  Imprecise data bus error");
    65f4:	4814      	ldr	r0, [pc, #80]	; (6648 <bus_fault+0x190>)
    65f6:	4619      	mov	r1, r3
    65f8:	f01e fc73 	bl	24ee2 <log_0>
    65fc:	e7bd      	b.n	657a <bus_fault+0xc2>
		PR_FAULT_INFO("  Instruction bus error");
    65fe:	4813      	ldr	r0, [pc, #76]	; (664c <bus_fault+0x194>)
    6600:	4621      	mov	r1, r4
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    6602:	f01e fc6e 	bl	24ee2 <log_0>
    6606:	e7c6      	b.n	6596 <bus_fault+0xde>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    6608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    660a:	049b      	lsls	r3, r3, #18
    660c:	d5c3      	bpl.n	6596 <bus_fault+0xde>
    660e:	f020 fa3a 	bl	26a86 <arch_is_user_context>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    6612:	f044 0401 	orr.w	r4, r4, #1
    6616:	b108      	cbz	r0, 661c <bus_fault+0x164>
    6618:	4910      	ldr	r1, [pc, #64]	; (665c <bus_fault+0x1a4>)
    661a:	e7b9      	b.n	6590 <bus_fault+0xd8>
    661c:	480f      	ldr	r0, [pc, #60]	; (665c <bus_fault+0x1a4>)
    661e:	4621      	mov	r1, r4
    6620:	e7ef      	b.n	6602 <bus_fault+0x14a>
	return false;
    6622:	2300      	movs	r3, #0
    6624:	e7ca      	b.n	65bc <bus_fault+0x104>
    6626:	bf00      	nop
    6628:	0002a810 	.word	0x0002a810
    662c:	0002a6d0 	.word	0x0002a6d0
    6630:	0002ce55 	.word	0x0002ce55
    6634:	e000ed00 	.word	0xe000ed00
    6638:	0002ce6b 	.word	0x0002ce6b
    663c:	0002ce7c 	.word	0x0002ce7c
    6640:	0002ce8f 	.word	0x0002ce8f
    6644:	0002cea8 	.word	0x0002cea8
    6648:	0002cebd 	.word	0x0002cebd
    664c:	0002ced8 	.word	0x0002ced8
    6650:	0000645b 	.word	0x0000645b
    6654:	0000645d 	.word	0x0000645d
    6658:	0000646d 	.word	0x0000646d
    665c:	0002cef0 	.word	0x0002cef0

00006660 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    6660:	b510      	push	{r4, lr}
    6662:	f020 fa10 	bl	26a86 <arch_is_user_context>
    6666:	4c45      	ldr	r4, [pc, #276]	; (677c <usage_fault.isra.0+0x11c>)
    6668:	4b45      	ldr	r3, [pc, #276]	; (6780 <usage_fault.isra.0+0x120>)
    666a:	1ae4      	subs	r4, r4, r3
    666c:	08e4      	lsrs	r4, r4, #3
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    666e:	01a4      	lsls	r4, r4, #6
    6670:	f044 0301 	orr.w	r3, r4, #1
    6674:	2800      	cmp	r0, #0
    6676:	d05e      	beq.n	6736 <usage_fault.isra.0+0xd6>
    6678:	4942      	ldr	r1, [pc, #264]	; (6784 <usage_fault.isra.0+0x124>)
    667a:	4618      	mov	r0, r3
    667c:	f01e fc0b 	bl	24e96 <log_from_user>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    6680:	4b41      	ldr	r3, [pc, #260]	; (6788 <usage_fault.isra.0+0x128>)
    6682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6684:	019a      	lsls	r2, r3, #6
    6686:	d509      	bpl.n	669c <usage_fault.isra.0+0x3c>
    6688:	f020 f9fd 	bl	26a86 <arch_is_user_context>
		PR_FAULT_INFO("  Division by zero");
    668c:	f044 0301 	orr.w	r3, r4, #1
    6690:	2800      	cmp	r0, #0
    6692:	d055      	beq.n	6740 <usage_fault.isra.0+0xe0>
    6694:	493d      	ldr	r1, [pc, #244]	; (678c <usage_fault.isra.0+0x12c>)
    6696:	4618      	mov	r0, r3
    6698:	f01e fbfd 	bl	24e96 <log_from_user>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    669c:	4b3a      	ldr	r3, [pc, #232]	; (6788 <usage_fault.isra.0+0x128>)
    669e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    66a0:	01db      	lsls	r3, r3, #7
    66a2:	d509      	bpl.n	66b8 <usage_fault.isra.0+0x58>
    66a4:	f020 f9ef 	bl	26a86 <arch_is_user_context>
		PR_FAULT_INFO("  Unaligned memory access");
    66a8:	f044 0301 	orr.w	r3, r4, #1
    66ac:	2800      	cmp	r0, #0
    66ae:	d04c      	beq.n	674a <usage_fault.isra.0+0xea>
    66b0:	4937      	ldr	r1, [pc, #220]	; (6790 <usage_fault.isra.0+0x130>)
    66b2:	4618      	mov	r0, r3
    66b4:	f01e fbef 	bl	24e96 <log_from_user>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    66b8:	4b33      	ldr	r3, [pc, #204]	; (6788 <usage_fault.isra.0+0x128>)
    66ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    66bc:	0318      	lsls	r0, r3, #12
    66be:	d509      	bpl.n	66d4 <usage_fault.isra.0+0x74>
    66c0:	f020 f9e1 	bl	26a86 <arch_is_user_context>
		PR_FAULT_INFO("  No coprocessor instructions");
    66c4:	f044 0301 	orr.w	r3, r4, #1
    66c8:	2800      	cmp	r0, #0
    66ca:	d043      	beq.n	6754 <usage_fault.isra.0+0xf4>
    66cc:	4931      	ldr	r1, [pc, #196]	; (6794 <usage_fault.isra.0+0x134>)
    66ce:	4618      	mov	r0, r3
    66d0:	f01e fbe1 	bl	24e96 <log_from_user>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    66d4:	4b2c      	ldr	r3, [pc, #176]	; (6788 <usage_fault.isra.0+0x128>)
    66d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    66d8:	0359      	lsls	r1, r3, #13
    66da:	d509      	bpl.n	66f0 <usage_fault.isra.0+0x90>
    66dc:	f020 f9d3 	bl	26a86 <arch_is_user_context>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    66e0:	f044 0301 	orr.w	r3, r4, #1
    66e4:	2800      	cmp	r0, #0
    66e6:	d03a      	beq.n	675e <usage_fault.isra.0+0xfe>
    66e8:	492b      	ldr	r1, [pc, #172]	; (6798 <usage_fault.isra.0+0x138>)
    66ea:	4618      	mov	r0, r3
    66ec:	f01e fbd3 	bl	24e96 <log_from_user>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    66f0:	4b25      	ldr	r3, [pc, #148]	; (6788 <usage_fault.isra.0+0x128>)
    66f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    66f4:	039a      	lsls	r2, r3, #14
    66f6:	d508      	bpl.n	670a <usage_fault.isra.0+0xaa>
    66f8:	f020 f9c5 	bl	26a86 <arch_is_user_context>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    66fc:	f044 0301 	orr.w	r3, r4, #1
    6700:	b390      	cbz	r0, 6768 <usage_fault.isra.0+0x108>
    6702:	4926      	ldr	r1, [pc, #152]	; (679c <usage_fault.isra.0+0x13c>)
    6704:	4618      	mov	r0, r3
    6706:	f01e fbc6 	bl	24e96 <log_from_user>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    670a:	4b1f      	ldr	r3, [pc, #124]	; (6788 <usage_fault.isra.0+0x128>)
    670c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    670e:	03db      	lsls	r3, r3, #15
    6710:	d508      	bpl.n	6724 <usage_fault.isra.0+0xc4>
    6712:	f020 f9b8 	bl	26a86 <arch_is_user_context>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    6716:	f044 0401 	orr.w	r4, r4, #1
    671a:	b350      	cbz	r0, 6772 <usage_fault.isra.0+0x112>
    671c:	4920      	ldr	r1, [pc, #128]	; (67a0 <usage_fault.isra.0+0x140>)
    671e:	4620      	mov	r0, r4
    6720:	f01e fbb9 	bl	24e96 <log_from_user>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    6724:	4a18      	ldr	r2, [pc, #96]	; (6788 <usage_fault.isra.0+0x128>)
    6726:	6a93      	ldr	r3, [r2, #40]	; 0x28
    6728:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    672c:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    6730:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    6732:	2000      	movs	r0, #0
    6734:	bd10      	pop	{r4, pc}
	PR_FAULT_INFO("***** USAGE FAULT *****");
    6736:	4813      	ldr	r0, [pc, #76]	; (6784 <usage_fault.isra.0+0x124>)
    6738:	4619      	mov	r1, r3
    673a:	f01e fbd2 	bl	24ee2 <log_0>
    673e:	e79f      	b.n	6680 <usage_fault.isra.0+0x20>
		PR_FAULT_INFO("  Division by zero");
    6740:	4812      	ldr	r0, [pc, #72]	; (678c <usage_fault.isra.0+0x12c>)
    6742:	4619      	mov	r1, r3
    6744:	f01e fbcd 	bl	24ee2 <log_0>
    6748:	e7a8      	b.n	669c <usage_fault.isra.0+0x3c>
		PR_FAULT_INFO("  Unaligned memory access");
    674a:	4811      	ldr	r0, [pc, #68]	; (6790 <usage_fault.isra.0+0x130>)
    674c:	4619      	mov	r1, r3
    674e:	f01e fbc8 	bl	24ee2 <log_0>
    6752:	e7b1      	b.n	66b8 <usage_fault.isra.0+0x58>
		PR_FAULT_INFO("  No coprocessor instructions");
    6754:	480f      	ldr	r0, [pc, #60]	; (6794 <usage_fault.isra.0+0x134>)
    6756:	4619      	mov	r1, r3
    6758:	f01e fbc3 	bl	24ee2 <log_0>
    675c:	e7ba      	b.n	66d4 <usage_fault.isra.0+0x74>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    675e:	480e      	ldr	r0, [pc, #56]	; (6798 <usage_fault.isra.0+0x138>)
    6760:	4619      	mov	r1, r3
    6762:	f01e fbbe 	bl	24ee2 <log_0>
    6766:	e7c3      	b.n	66f0 <usage_fault.isra.0+0x90>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    6768:	480c      	ldr	r0, [pc, #48]	; (679c <usage_fault.isra.0+0x13c>)
    676a:	4619      	mov	r1, r3
    676c:	f01e fbb9 	bl	24ee2 <log_0>
    6770:	e7cb      	b.n	670a <usage_fault.isra.0+0xaa>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    6772:	480b      	ldr	r0, [pc, #44]	; (67a0 <usage_fault.isra.0+0x140>)
    6774:	4621      	mov	r1, r4
    6776:	f01e fbb4 	bl	24ee2 <log_0>
    677a:	e7d3      	b.n	6724 <usage_fault.isra.0+0xc4>
    677c:	0002a810 	.word	0x0002a810
    6780:	0002a6d0 	.word	0x0002a6d0
    6784:	0002cf1f 	.word	0x0002cf1f
    6788:	e000ed00 	.word	0xe000ed00
    678c:	0002cf37 	.word	0x0002cf37
    6790:	0002cf4a 	.word	0x0002cf4a
    6794:	0002cf64 	.word	0x0002cf64
    6798:	0002cf82 	.word	0x0002cf82
    679c:	0002cfa7 	.word	0x0002cfa7
    67a0:	0002cfc1 	.word	0x0002cfc1

000067a4 <mem_manage_fault>:
{
    67a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    67a8:	4c60      	ldr	r4, [pc, #384]	; (692c <mem_manage_fault+0x188>)
    67aa:	4605      	mov	r5, r0
    67ac:	4688      	mov	r8, r1
    67ae:	4616      	mov	r6, r2
    67b0:	f020 f969 	bl	26a86 <arch_is_user_context>
    67b4:	4b5e      	ldr	r3, [pc, #376]	; (6930 <mem_manage_fault+0x18c>)
    67b6:	1ae4      	subs	r4, r4, r3
    67b8:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    67ba:	01a4      	lsls	r4, r4, #6
    67bc:	f044 0301 	orr.w	r3, r4, #1
    67c0:	2800      	cmp	r0, #0
    67c2:	d05f      	beq.n	6884 <mem_manage_fault+0xe0>
    67c4:	495b      	ldr	r1, [pc, #364]	; (6934 <mem_manage_fault+0x190>)
    67c6:	4618      	mov	r0, r3
    67c8:	f01e fb65 	bl	24e96 <log_from_user>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    67cc:	4b5a      	ldr	r3, [pc, #360]	; (6938 <mem_manage_fault+0x194>)
    67ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    67d0:	06df      	lsls	r7, r3, #27
    67d2:	d509      	bpl.n	67e8 <mem_manage_fault+0x44>
    67d4:	f020 f957 	bl	26a86 <arch_is_user_context>
		PR_FAULT_INFO("  Stacking error (context area might be"
    67d8:	f044 0301 	orr.w	r3, r4, #1
    67dc:	2800      	cmp	r0, #0
    67de:	d056      	beq.n	688e <mem_manage_fault+0xea>
    67e0:	4956      	ldr	r1, [pc, #344]	; (693c <mem_manage_fault+0x198>)
    67e2:	4618      	mov	r0, r3
    67e4:	f01e fb57 	bl	24e96 <log_from_user>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    67e8:	4b53      	ldr	r3, [pc, #332]	; (6938 <mem_manage_fault+0x194>)
    67ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    67ec:	0718      	lsls	r0, r3, #28
    67ee:	d509      	bpl.n	6804 <mem_manage_fault+0x60>
    67f0:	f020 f949 	bl	26a86 <arch_is_user_context>
		PR_FAULT_INFO("  Unstacking error");
    67f4:	f044 0301 	orr.w	r3, r4, #1
    67f8:	2800      	cmp	r0, #0
    67fa:	d04d      	beq.n	6898 <mem_manage_fault+0xf4>
    67fc:	4950      	ldr	r1, [pc, #320]	; (6940 <mem_manage_fault+0x19c>)
    67fe:	4618      	mov	r0, r3
    6800:	f01e fb49 	bl	24e96 <log_from_user>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    6804:	4b4c      	ldr	r3, [pc, #304]	; (6938 <mem_manage_fault+0x194>)
    6806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6808:	0799      	lsls	r1, r3, #30
    680a:	d44a      	bmi.n	68a2 <mem_manage_fault+0xfe>
	uint32_t mmfar = -EINVAL;
    680c:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    6810:	4b49      	ldr	r3, [pc, #292]	; (6938 <mem_manage_fault+0x194>)
    6812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6814:	07db      	lsls	r3, r3, #31
    6816:	d509      	bpl.n	682c <mem_manage_fault+0x88>
    6818:	f020 f935 	bl	26a86 <arch_is_user_context>
		PR_FAULT_INFO("  Instruction Access Violation");
    681c:	f044 0301 	orr.w	r3, r4, #1
    6820:	2800      	cmp	r0, #0
    6822:	d06a      	beq.n	68fa <mem_manage_fault+0x156>
    6824:	4947      	ldr	r1, [pc, #284]	; (6944 <mem_manage_fault+0x1a0>)
    6826:	4618      	mov	r0, r3
    6828:	f01e fb35 	bl	24e96 <log_from_user>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    682c:	4b42      	ldr	r3, [pc, #264]	; (6938 <mem_manage_fault+0x194>)
    682e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6830:	0698      	lsls	r0, r3, #26
    6832:	d509      	bpl.n	6848 <mem_manage_fault+0xa4>
    6834:	f020 f927 	bl	26a86 <arch_is_user_context>
		PR_FAULT_INFO(
    6838:	f044 0401 	orr.w	r4, r4, #1
    683c:	2800      	cmp	r0, #0
    683e:	d061      	beq.n	6904 <mem_manage_fault+0x160>
    6840:	4941      	ldr	r1, [pc, #260]	; (6948 <mem_manage_fault+0x1a4>)
    6842:	4620      	mov	r0, r4
    6844:	f01e fb27 	bl	24e96 <log_from_user>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    6848:	4b3b      	ldr	r3, [pc, #236]	; (6938 <mem_manage_fault+0x194>)
    684a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    684c:	06d1      	lsls	r1, r2, #27
    684e:	d45e      	bmi.n	690e <mem_manage_fault+0x16a>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    6850:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    6852:	0792      	lsls	r2, r2, #30
    6854:	d45b      	bmi.n	690e <mem_manage_fault+0x16a>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    6856:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    6858:	4a37      	ldr	r2, [pc, #220]	; (6938 <mem_manage_fault+0x194>)
    685a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    685c:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    6860:	6293      	str	r3, [r2, #40]	; 0x28
		uint32_t start = (uint32_t)exceptions[i].start & ~0x1U;
    6862:	4b3a      	ldr	r3, [pc, #232]	; (694c <mem_manage_fault+0x1a8>)
		if (esf->basic.pc >= start && esf->basic.pc < end) {
    6864:	69aa      	ldr	r2, [r5, #24]
		uint32_t start = (uint32_t)exceptions[i].start & ~0x1U;
    6866:	f023 0301 	bic.w	r3, r3, #1
		if (esf->basic.pc >= start && esf->basic.pc < end) {
    686a:	4293      	cmp	r3, r2
    686c:	d85c      	bhi.n	6928 <mem_manage_fault+0x184>
    686e:	4b38      	ldr	r3, [pc, #224]	; (6950 <mem_manage_fault+0x1ac>)
    6870:	f023 0301 	bic.w	r3, r3, #1
    6874:	4293      	cmp	r3, r2
    6876:	d957      	bls.n	6928 <mem_manage_fault+0x184>
			esf->basic.pc = (uint32_t)(exceptions[i].fixup);
    6878:	4b36      	ldr	r3, [pc, #216]	; (6954 <mem_manage_fault+0x1b0>)
    687a:	61ab      	str	r3, [r5, #24]
			return true;
    687c:	2301      	movs	r3, #1
	*recoverable = memory_fault_recoverable(esf, true);
    687e:	7033      	strb	r3, [r6, #0]
}
    6880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	PR_FAULT_INFO("***** MPU FAULT *****");
    6884:	482b      	ldr	r0, [pc, #172]	; (6934 <mem_manage_fault+0x190>)
    6886:	4619      	mov	r1, r3
    6888:	f01e fb2b 	bl	24ee2 <log_0>
    688c:	e79e      	b.n	67cc <mem_manage_fault+0x28>
		PR_FAULT_INFO("  Stacking error (context area might be"
    688e:	482b      	ldr	r0, [pc, #172]	; (693c <mem_manage_fault+0x198>)
    6890:	4619      	mov	r1, r3
    6892:	f01e fb26 	bl	24ee2 <log_0>
    6896:	e7a7      	b.n	67e8 <mem_manage_fault+0x44>
		PR_FAULT_INFO("  Unstacking error");
    6898:	4829      	ldr	r0, [pc, #164]	; (6940 <mem_manage_fault+0x19c>)
    689a:	4619      	mov	r1, r3
    689c:	f01e fb21 	bl	24ee2 <log_0>
    68a0:	e7b0      	b.n	6804 <mem_manage_fault+0x60>
    68a2:	f020 f8f0 	bl	26a86 <arch_is_user_context>
		PR_FAULT_INFO("  Data Access Violation");
    68a6:	f044 0301 	orr.w	r3, r4, #1
    68aa:	b1d8      	cbz	r0, 68e4 <mem_manage_fault+0x140>
    68ac:	492a      	ldr	r1, [pc, #168]	; (6958 <mem_manage_fault+0x1b4>)
    68ae:	4618      	mov	r0, r3
    68b0:	f01e faf1 	bl	24e96 <log_from_user>
		uint32_t temp = SCB->MMFAR;
    68b4:	4b20      	ldr	r3, [pc, #128]	; (6938 <mem_manage_fault+0x194>)
    68b6:	6b5f      	ldr	r7, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    68b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    68ba:	061a      	lsls	r2, r3, #24
    68bc:	d5a6      	bpl.n	680c <mem_manage_fault+0x68>
    68be:	f020 f8e2 	bl	26a86 <arch_is_user_context>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    68c2:	f044 0301 	orr.w	r3, r4, #1
    68c6:	b190      	cbz	r0, 68ee <mem_manage_fault+0x14a>
    68c8:	4924      	ldr	r1, [pc, #144]	; (695c <mem_manage_fault+0x1b8>)
    68ca:	463a      	mov	r2, r7
    68cc:	4618      	mov	r0, r3
    68ce:	f01e fae2 	bl	24e96 <log_from_user>
			if (from_hard_fault != 0) {
    68d2:	f1b8 0f00 	cmp.w	r8, #0
    68d6:	d09b      	beq.n	6810 <mem_manage_fault+0x6c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    68d8:	4a17      	ldr	r2, [pc, #92]	; (6938 <mem_manage_fault+0x194>)
    68da:	6a93      	ldr	r3, [r2, #40]	; 0x28
    68dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    68e0:	6293      	str	r3, [r2, #40]	; 0x28
    68e2:	e795      	b.n	6810 <mem_manage_fault+0x6c>
		PR_FAULT_INFO("  Data Access Violation");
    68e4:	481c      	ldr	r0, [pc, #112]	; (6958 <mem_manage_fault+0x1b4>)
    68e6:	4619      	mov	r1, r3
    68e8:	f01e fafb 	bl	24ee2 <log_0>
    68ec:	e7e2      	b.n	68b4 <mem_manage_fault+0x110>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    68ee:	481b      	ldr	r0, [pc, #108]	; (695c <mem_manage_fault+0x1b8>)
    68f0:	461a      	mov	r2, r3
    68f2:	4639      	mov	r1, r7
    68f4:	f01e fb02 	bl	24efc <log_1>
    68f8:	e7eb      	b.n	68d2 <mem_manage_fault+0x12e>
		PR_FAULT_INFO("  Instruction Access Violation");
    68fa:	4812      	ldr	r0, [pc, #72]	; (6944 <mem_manage_fault+0x1a0>)
    68fc:	4619      	mov	r1, r3
    68fe:	f01e faf0 	bl	24ee2 <log_0>
    6902:	e793      	b.n	682c <mem_manage_fault+0x88>
		PR_FAULT_INFO(
    6904:	4810      	ldr	r0, [pc, #64]	; (6948 <mem_manage_fault+0x1a4>)
    6906:	4621      	mov	r1, r4
    6908:	f01e faeb 	bl	24ee2 <log_0>
    690c:	e79c      	b.n	6848 <mem_manage_fault+0xa4>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    690e:	685b      	ldr	r3, [r3, #4]
    6910:	051b      	lsls	r3, r3, #20
    6912:	d5a0      	bpl.n	6856 <mem_manage_fault+0xb2>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    6914:	4629      	mov	r1, r5
    6916:	4638      	mov	r0, r7
    6918:	f7ff fc02 	bl	6120 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    691c:	2800      	cmp	r0, #0
    691e:	d09a      	beq.n	6856 <mem_manage_fault+0xb2>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    6920:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    6924:	2002      	movs	r0, #2
    6926:	e797      	b.n	6858 <mem_manage_fault+0xb4>
	return false;
    6928:	2300      	movs	r3, #0
    692a:	e7a8      	b.n	687e <mem_manage_fault+0xda>
    692c:	0002a810 	.word	0x0002a810
    6930:	0002a6d0 	.word	0x0002a6d0
    6934:	0002cfec 	.word	0x0002cfec
    6938:	e000ed00 	.word	0xe000ed00
    693c:	0002d002 	.word	0x0002d002
    6940:	0002ce7c 	.word	0x0002ce7c
    6944:	0002d063 	.word	0x0002d063
    6948:	0002cef0 	.word	0x0002cef0
    694c:	0000645b 	.word	0x0000645b
    6950:	0000645d 	.word	0x0000645d
    6954:	0000646d 	.word	0x0000646d
    6958:	0002d035 	.word	0x0002d035
    695c:	0002d04d 	.word	0x0002d04d

00006960 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    6960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    6964:	4b79      	ldr	r3, [pc, #484]	; (6b4c <z_arm_fault+0x1ec>)
    6966:	685e      	ldr	r6, [r3, #4]
{
    6968:	b08a      	sub	sp, #40	; 0x28
    696a:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    696c:	f3c6 0808 	ubfx	r8, r6, #0, #9
    6970:	2700      	movs	r7, #0
    6972:	f387 8811 	msr	BASEPRI, r7
    6976:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    697a:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    697e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    6982:	d112      	bne.n	69aa <z_arm_fault+0x4a>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    6984:	f002 030c 	and.w	r3, r2, #12
    6988:	2b08      	cmp	r3, #8
    698a:	d115      	bne.n	69b8 <z_arm_fault+0x58>
    698c:	f020 f87b 	bl	26a86 <arch_is_user_context>
    6990:	4b6f      	ldr	r3, [pc, #444]	; (6b50 <z_arm_fault+0x1f0>)
    6992:	4a70      	ldr	r2, [pc, #448]	; (6b54 <z_arm_fault+0x1f4>)
    6994:	1a9b      	subs	r3, r3, r2
    6996:	08db      	lsrs	r3, r3, #3
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    6998:	019b      	lsls	r3, r3, #6
    699a:	f043 0301 	orr.w	r3, r3, #1
    699e:	b130      	cbz	r0, 69ae <z_arm_fault+0x4e>
    69a0:	496d      	ldr	r1, [pc, #436]	; (6b58 <z_arm_fault+0x1f8>)
    69a2:	4618      	mov	r0, r3
    69a4:	f01e fa77 	bl	24e96 <log_from_user>
	*nested_exc = false;
    69a8:	2700      	movs	r7, #0
		return NULL;
    69aa:	463d      	mov	r5, r7
    69ac:	e008      	b.n	69c0 <z_arm_fault+0x60>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    69ae:	486a      	ldr	r0, [pc, #424]	; (6b58 <z_arm_fault+0x1f8>)
    69b0:	4619      	mov	r1, r3
    69b2:	f01e fa96 	bl	24ee2 <log_0>
    69b6:	e7f7      	b.n	69a8 <z_arm_fault+0x48>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    69b8:	0712      	lsls	r2, r2, #28
    69ba:	d401      	bmi.n	69c0 <z_arm_fault+0x60>
			ptr_esf = (z_arch_esf_t *)msp;
    69bc:	4605      	mov	r5, r0
			*nested_exc = true;
    69be:	2701      	movs	r7, #1
	*recoverable = false;
    69c0:	2300      	movs	r3, #0
    69c2:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    69c6:	f1a8 0303 	sub.w	r3, r8, #3
    69ca:	2b09      	cmp	r3, #9
    69cc:	f200 8096 	bhi.w	6afc <z_arm_fault+0x19c>
    69d0:	e8df f003 	tbb	[pc, r3]
    69d4:	59807c05 	.word	0x59807c05
    69d8:	94949494 	.word	0x94949494
    69dc:	8494      	.short	0x8494
    69de:	f020 f852 	bl	26a86 <arch_is_user_context>
    69e2:	4e5b      	ldr	r6, [pc, #364]	; (6b50 <z_arm_fault+0x1f0>)
    69e4:	4b5b      	ldr	r3, [pc, #364]	; (6b54 <z_arm_fault+0x1f4>)
    69e6:	1af6      	subs	r6, r6, r3
    69e8:	08f6      	lsrs	r6, r6, #3
	PR_FAULT_INFO("***** HARD FAULT *****");
    69ea:	01b6      	lsls	r6, r6, #6
    69ec:	f046 0301 	orr.w	r3, r6, #1
    69f0:	b1b0      	cbz	r0, 6a20 <z_arm_fault+0xc0>
    69f2:	495a      	ldr	r1, [pc, #360]	; (6b5c <z_arm_fault+0x1fc>)
    69f4:	4618      	mov	r0, r3
    69f6:	f01e fa4e 	bl	24e96 <log_from_user>
	*recoverable = false;
    69fa:	2300      	movs	r3, #0
    69fc:	f88d 3007 	strb.w	r3, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    6a00:	4b52      	ldr	r3, [pc, #328]	; (6b4c <z_arm_fault+0x1ec>)
    6a02:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    6a04:	f014 0402 	ands.w	r4, r4, #2
    6a08:	d014      	beq.n	6a34 <z_arm_fault+0xd4>
    6a0a:	f020 f83c 	bl	26a86 <arch_is_user_context>
		PR_EXC("  Bus fault on vector table read");
    6a0e:	f046 0601 	orr.w	r6, r6, #1
    6a12:	b150      	cbz	r0, 6a2a <z_arm_fault+0xca>
    6a14:	4952      	ldr	r1, [pc, #328]	; (6b60 <z_arm_fault+0x200>)
    6a16:	4630      	mov	r0, r6
	PR_FAULT_INFO(
    6a18:	f01e fa3d 	bl	24e96 <log_from_user>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    6a1c:	2400      	movs	r4, #0
}
    6a1e:	e035      	b.n	6a8c <z_arm_fault+0x12c>
	PR_FAULT_INFO("***** HARD FAULT *****");
    6a20:	484e      	ldr	r0, [pc, #312]	; (6b5c <z_arm_fault+0x1fc>)
    6a22:	4619      	mov	r1, r3
    6a24:	f01e fa5d 	bl	24ee2 <log_0>
    6a28:	e7e7      	b.n	69fa <z_arm_fault+0x9a>
		PR_EXC("  Bus fault on vector table read");
    6a2a:	484d      	ldr	r0, [pc, #308]	; (6b60 <z_arm_fault+0x200>)
    6a2c:	4631      	mov	r1, r6
	PR_FAULT_INFO(
    6a2e:	f01e fa58 	bl	24ee2 <log_0>
    6a32:	e7f3      	b.n	6a1c <z_arm_fault+0xbc>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    6a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6a36:	005b      	lsls	r3, r3, #1
    6a38:	d528      	bpl.n	6a8c <z_arm_fault+0x12c>
    6a3a:	f020 f824 	bl	26a86 <arch_is_user_context>
		PR_EXC("  Fault escalation (see below)");
    6a3e:	f046 0601 	orr.w	r6, r6, #1
    6a42:	b168      	cbz	r0, 6a60 <z_arm_fault+0x100>
    6a44:	4947      	ldr	r1, [pc, #284]	; (6b64 <z_arm_fault+0x204>)
    6a46:	4630      	mov	r0, r6
    6a48:	f01e fa25 	bl	24e96 <log_from_user>
		if (SCB_MMFSR != 0) {
    6a4c:	4b46      	ldr	r3, [pc, #280]	; (6b68 <z_arm_fault+0x208>)
    6a4e:	781b      	ldrb	r3, [r3, #0]
    6a50:	b15b      	cbz	r3, 6a6a <z_arm_fault+0x10a>
			reason = mem_manage_fault(esf, 1, recoverable);
    6a52:	f10d 0207 	add.w	r2, sp, #7
    6a56:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    6a58:	4628      	mov	r0, r5
    6a5a:	f7ff fea3 	bl	67a4 <mem_manage_fault>
    6a5e:	e014      	b.n	6a8a <z_arm_fault+0x12a>
		PR_EXC("  Fault escalation (see below)");
    6a60:	4840      	ldr	r0, [pc, #256]	; (6b64 <z_arm_fault+0x204>)
    6a62:	4631      	mov	r1, r6
    6a64:	f01e fa3d 	bl	24ee2 <log_0>
    6a68:	e7f0      	b.n	6a4c <z_arm_fault+0xec>
		} else if (SCB_BFSR != 0) {
    6a6a:	4b40      	ldr	r3, [pc, #256]	; (6b6c <z_arm_fault+0x20c>)
    6a6c:	781b      	ldrb	r3, [r3, #0]
    6a6e:	b133      	cbz	r3, 6a7e <z_arm_fault+0x11e>
			reason = bus_fault(esf, 1, recoverable);
    6a70:	f10d 0207 	add.w	r2, sp, #7
    6a74:	2101      	movs	r1, #1
		reason = bus_fault(esf, 0, recoverable);
    6a76:	4628      	mov	r0, r5
    6a78:	f7ff fd1e 	bl	64b8 <bus_fault>
    6a7c:	e005      	b.n	6a8a <z_arm_fault+0x12a>
		} else if (SCB_UFSR != 0) {
    6a7e:	4b3c      	ldr	r3, [pc, #240]	; (6b70 <z_arm_fault+0x210>)
    6a80:	881b      	ldrh	r3, [r3, #0]
    6a82:	b29b      	uxth	r3, r3
    6a84:	b113      	cbz	r3, 6a8c <z_arm_fault+0x12c>
			reason = usage_fault(esf);
    6a86:	f7ff fdeb 	bl	6660 <usage_fault.isra.0>
    6a8a:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    6a8c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6a90:	b9cb      	cbnz	r3, 6ac6 <z_arm_fault+0x166>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    6a92:	aa02      	add	r2, sp, #8
    6a94:	f105 0620 	add.w	r6, r5, #32
    6a98:	6828      	ldr	r0, [r5, #0]
    6a9a:	6869      	ldr	r1, [r5, #4]
    6a9c:	4613      	mov	r3, r2
    6a9e:	c303      	stmia	r3!, {r0, r1}
    6aa0:	3508      	adds	r5, #8
    6aa2:	42b5      	cmp	r5, r6
    6aa4:	461a      	mov	r2, r3
    6aa6:	d1f7      	bne.n	6a98 <z_arm_fault+0x138>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    6aa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6aaa:	2f00      	cmp	r7, #0
    6aac:	d049      	beq.n	6b42 <z_arm_fault+0x1e2>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    6aae:	f3c3 0208 	ubfx	r2, r3, #0, #9
    6ab2:	b922      	cbnz	r2, 6abe <z_arm_fault+0x15e>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    6ab4:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    6ab8:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    6abc:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    6abe:	a902      	add	r1, sp, #8
    6ac0:	4620      	mov	r0, r4
    6ac2:	f7ff fb89 	bl	61d8 <z_arm_fatal_error>
}
    6ac6:	b00a      	add	sp, #40	; 0x28
    6ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    6acc:	f10d 0207 	add.w	r2, sp, #7
    6ad0:	2100      	movs	r1, #0
    6ad2:	e7c1      	b.n	6a58 <z_arm_fault+0xf8>
		reason = bus_fault(esf, 0, recoverable);
    6ad4:	f10d 0207 	add.w	r2, sp, #7
    6ad8:	2100      	movs	r1, #0
    6ada:	e7cc      	b.n	6a76 <z_arm_fault+0x116>
    6adc:	f01f ffd3 	bl	26a86 <arch_is_user_context>
    6ae0:	4b1b      	ldr	r3, [pc, #108]	; (6b50 <z_arm_fault+0x1f0>)
    6ae2:	4a1c      	ldr	r2, [pc, #112]	; (6b54 <z_arm_fault+0x1f4>)
    6ae4:	1a9b      	subs	r3, r3, r2
    6ae6:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO(
    6ae8:	019b      	lsls	r3, r3, #6
    6aea:	f043 0301 	orr.w	r3, r3, #1
    6aee:	b110      	cbz	r0, 6af6 <z_arm_fault+0x196>
    6af0:	4920      	ldr	r1, [pc, #128]	; (6b74 <z_arm_fault+0x214>)
    6af2:	4618      	mov	r0, r3
    6af4:	e790      	b.n	6a18 <z_arm_fault+0xb8>
    6af6:	481f      	ldr	r0, [pc, #124]	; (6b74 <z_arm_fault+0x214>)
    6af8:	4619      	mov	r1, r3
    6afa:	e798      	b.n	6a2e <z_arm_fault+0xce>
    6afc:	f01f ffc3 	bl	26a86 <arch_is_user_context>
    6b00:	4c13      	ldr	r4, [pc, #76]	; (6b50 <z_arm_fault+0x1f0>)
    6b02:	4b14      	ldr	r3, [pc, #80]	; (6b54 <z_arm_fault+0x1f4>)
    6b04:	1ae4      	subs	r4, r4, r3
    6b06:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** %s %d) *****",
    6b08:	01a4      	lsls	r4, r4, #6
    6b0a:	f044 0401 	orr.w	r4, r4, #1
    6b0e:	f406 76f8 	and.w	r6, r6, #496	; 0x1f0
    6b12:	f1a8 0210 	sub.w	r2, r8, #16
    6b16:	b150      	cbz	r0, 6b2e <z_arm_fault+0x1ce>
    6b18:	4917      	ldr	r1, [pc, #92]	; (6b78 <z_arm_fault+0x218>)
    6b1a:	4613      	mov	r3, r2
    6b1c:	4a17      	ldr	r2, [pc, #92]	; (6b7c <z_arm_fault+0x21c>)
    6b1e:	4620      	mov	r0, r4
    6b20:	2e00      	cmp	r6, #0
    6b22:	bf08      	it	eq
    6b24:	460a      	moveq	r2, r1
    6b26:	4916      	ldr	r1, [pc, #88]	; (6b80 <z_arm_fault+0x220>)
    6b28:	f01e f9b5 	bl	24e96 <log_from_user>
    6b2c:	e776      	b.n	6a1c <z_arm_fault+0xbc>
    6b2e:	4813      	ldr	r0, [pc, #76]	; (6b7c <z_arm_fault+0x21c>)
    6b30:	4911      	ldr	r1, [pc, #68]	; (6b78 <z_arm_fault+0x218>)
    6b32:	4623      	mov	r3, r4
    6b34:	2e00      	cmp	r6, #0
    6b36:	bf18      	it	ne
    6b38:	4601      	movne	r1, r0
    6b3a:	4811      	ldr	r0, [pc, #68]	; (6b80 <z_arm_fault+0x220>)
    6b3c:	f01e f9f2 	bl	24f24 <log_2>
    6b40:	e76c      	b.n	6a1c <z_arm_fault+0xbc>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    6b42:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    6b46:	f023 0301 	bic.w	r3, r3, #1
    6b4a:	e7b7      	b.n	6abc <z_arm_fault+0x15c>
    6b4c:	e000ed00 	.word	0xe000ed00
    6b50:	0002a810 	.word	0x0002a810
    6b54:	0002a6d0 	.word	0x0002a6d0
    6b58:	0002d0b0 	.word	0x0002d0b0
    6b5c:	0002d0db 	.word	0x0002d0db
    6b60:	0002d0f2 	.word	0x0002d0f2
    6b64:	0002d113 	.word	0x0002d113
    6b68:	e000ed28 	.word	0xe000ed28
    6b6c:	e000ed29 	.word	0xe000ed29
    6b70:	e000ed2a 	.word	0xe000ed2a
    6b74:	0002d132 	.word	0x0002d132
    6b78:	0002d082 	.word	0x0002d082
    6b7c:	0002d097 	.word	0x0002d097
    6b80:	0002d156 	.word	0x0002d156

00006b84 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    6b84:	4a02      	ldr	r2, [pc, #8]	; (6b90 <z_arm_fault_init+0xc>)
    6b86:	6953      	ldr	r3, [r2, #20]
    6b88:	f043 0310 	orr.w	r3, r3, #16
    6b8c:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    6b8e:	4770      	bx	lr
    6b90:	e000ed00 	.word	0xe000ed00

00006b94 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    6b94:	4b04      	ldr	r3, [pc, #16]	; (6ba8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    6b96:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    6b98:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    6b9a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    6b9c:	d003      	beq.n	6ba6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    6b9e:	4903      	ldr	r1, [pc, #12]	; (6bac <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    6ba0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    6ba4:	600a      	str	r2, [r1, #0]

00006ba6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    6ba6:	4770      	bx	lr
	ldr r3, =_kernel
    6ba8:	200023f4 	.word	0x200023f4
	ldr r1, =_SCS_ICSR
    6bac:	e000ed04 	.word	0xe000ed04

00006bb0 <z_arm_interrupt_init>:
    6bb0:	4804      	ldr	r0, [pc, #16]	; (6bc4 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    6bb2:	2300      	movs	r3, #0
    6bb4:	2120      	movs	r1, #32
    6bb6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    6bb8:	3301      	adds	r3, #1
    6bba:	2b30      	cmp	r3, #48	; 0x30
    6bbc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    6bc0:	d1f9      	bne.n	6bb6 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    6bc2:	4770      	bx	lr
    6bc4:	e000e100 	.word	0xe000e100

00006bc8 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    6bc8:	4b06      	ldr	r3, [pc, #24]	; (6be4 <z_impl_k_thread_abort+0x1c>)
    6bca:	689b      	ldr	r3, [r3, #8]
    6bcc:	4283      	cmp	r3, r0
    6bce:	d107      	bne.n	6be0 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    6bd0:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    6bd4:	b123      	cbz	r3, 6be0 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    6bd6:	4a04      	ldr	r2, [pc, #16]	; (6be8 <z_impl_k_thread_abort+0x20>)
    6bd8:	6853      	ldr	r3, [r2, #4]
    6bda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    6bde:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    6be0:	f01b b8c0 	b.w	21d64 <z_thread_abort>
    6be4:	200023f4 	.word	0x200023f4
    6be8:	e000ed00 	.word	0xe000ed00

00006bec <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    6bec:	4b02      	ldr	r3, [pc, #8]	; (6bf8 <z_arm_configure_static_mpu_regions+0xc>)
    6bee:	4a03      	ldr	r2, [pc, #12]	; (6bfc <z_arm_configure_static_mpu_regions+0x10>)
    6bf0:	4803      	ldr	r0, [pc, #12]	; (6c00 <z_arm_configure_static_mpu_regions+0x14>)
    6bf2:	2101      	movs	r1, #1
    6bf4:	f000 b93e 	b.w	6e74 <arm_core_mpu_configure_static_mpu_regions>
    6bf8:	20040000 	.word	0x20040000
    6bfc:	20000000 	.word	0x20000000
    6c00:	0002abec 	.word	0x0002abec

00006c04 <z_arm_configure_dynamic_mpu_regions>:
	uint8_t region_num = 0U;

#if defined(CONFIG_USERSPACE)
	/* Memory domain */
	LOG_DBG("configure thread %p's domain", thread);
	struct k_mem_domain *mem_domain = thread->mem_domain_info.mem_domain;
    6c04:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
{
    6c06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	if (mem_domain) {
    6c0a:	b1d9      	cbz	r1, 6c44 <z_arm_configure_dynamic_mpu_regions+0x40>
			LOG_DBG("set region 0x%lx 0x%x",
				partition->start, partition->size);
			__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
				"Out-of-bounds error for dynamic region map.");

			dynamic_regions[region_num].start = partition->start;
    6c0c:	4c19      	ldr	r4, [pc, #100]	; (6c74 <z_arm_configure_dynamic_mpu_regions+0x70>)
		uint32_t num_partitions = mem_domain->num_partitions;
    6c0e:	f891 20c8 	ldrb.w	r2, [r1, #200]	; 0xc8
		for (i = 0; i < CONFIG_MAX_DOMAIN_PARTITIONS; i++) {
    6c12:	460b      	mov	r3, r1
    6c14:	f101 0ec0 	add.w	lr, r1, #192	; 0xc0
			dynamic_regions[region_num].start = partition->start;
    6c18:	f04f 080c 	mov.w	r8, #12
	uint8_t region_num = 0U;
    6c1c:	2100      	movs	r1, #0
			if (partition->size == 0) {
    6c1e:	685e      	ldr	r6, [r3, #4]
    6c20:	b16e      	cbz	r6, 6c3e <z_arm_configure_dynamic_mpu_regions+0x3a>
			dynamic_regions[region_num].start = partition->start;
    6c22:	fb08 fc01 	mul.w	ip, r8, r1
    6c26:	eb04 050c 	add.w	r5, r4, ip
    6c2a:	681f      	ldr	r7, [r3, #0]
			dynamic_regions[region_num].size = partition->size;
    6c2c:	606e      	str	r6, [r5, #4]
			dynamic_regions[region_num].attr = partition->attr;

			region_num++;
    6c2e:	3101      	adds	r1, #1
			dynamic_regions[region_num].attr = partition->attr;
    6c30:	689e      	ldr	r6, [r3, #8]
			dynamic_regions[region_num].start = partition->start;
    6c32:	f844 700c 	str.w	r7, [r4, ip]
			num_partitions--;
			if (num_partitions == 0U) {
    6c36:	3a01      	subs	r2, #1
			dynamic_regions[region_num].attr = partition->attr;
    6c38:	60ae      	str	r6, [r5, #8]
			region_num++;
    6c3a:	b2c9      	uxtb	r1, r1
			if (num_partitions == 0U) {
    6c3c:	d002      	beq.n	6c44 <z_arm_configure_dynamic_mpu_regions+0x40>
		for (i = 0; i < CONFIG_MAX_DOMAIN_PARTITIONS; i++) {
    6c3e:	330c      	adds	r3, #12
    6c40:	459e      	cmp	lr, r3
    6c42:	d1ec      	bne.n	6c1e <z_arm_configure_dynamic_mpu_regions+0x1a>
			}
		}
	}
	/* Thread user stack */
	LOG_DBG("configure user thread %p's context", thread);
	if (thread->arch.priv_stack_start) {
    6c44:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    6c48:	b17b      	cbz	r3, 6c6a <z_arm_configure_dynamic_mpu_regions+0x66>
		/* K_USER thread stack needs a region */
		uintptr_t base = (uintptr_t)thread->stack_obj;
		size_t size = thread->stack_info.size +
    6c4a:	e9d0 231a 	ldrd	r2, r3, [r0, #104]	; 0x68
			(thread->stack_info.start - base);

		__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
			"Out-of-bounds error for dynamic region map.");

		dynamic_regions[region_num].start = base;
    6c4e:	4c09      	ldr	r4, [pc, #36]	; (6c74 <z_arm_configure_dynamic_mpu_regions+0x70>)
		uintptr_t base = (uintptr_t)thread->stack_obj;
    6c50:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
		size_t size = thread->stack_info.size +
    6c54:	4413      	add	r3, r2
		dynamic_regions[region_num].start = base;
    6c56:	220c      	movs	r2, #12
    6c58:	434a      	muls	r2, r1
    6c5a:	18a0      	adds	r0, r4, r2
		size_t size = thread->stack_info.size +
    6c5c:	1b5b      	subs	r3, r3, r5
		dynamic_regions[region_num].size = size;
    6c5e:	6043      	str	r3, [r0, #4]
		dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RW_U_RW;

		region_num++;
    6c60:	3101      	adds	r1, #1
		dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RW_U_RW;
    6c62:	4b05      	ldr	r3, [pc, #20]	; (6c78 <z_arm_configure_dynamic_mpu_regions+0x74>)
		dynamic_regions[region_num].start = base;
    6c64:	50a5      	str	r5, [r4, r2]
		dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RW_U_RW;
    6c66:	6083      	str	r3, [r0, #8]
		region_num++;
    6c68:	b2c9      	uxtb	r1, r1
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
						   region_num);
}
    6c6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    6c6e:	4801      	ldr	r0, [pc, #4]	; (6c74 <z_arm_configure_dynamic_mpu_regions+0x70>)
    6c70:	f000 b946 	b.w	6f00 <arm_core_mpu_configure_dynamic_mpu_regions>
    6c74:	20000d38 	.word	0x20000d38
    6c78:	130b0000 	.word	0x130b0000

00006c7c <is_enabled_region>:
	__asm__ volatile(
    6c7c:	f04f 0320 	mov.w	r3, #32
    6c80:	f3ef 8211 	mrs	r2, BASEPRI
    6c84:	f383 8811 	msr	BASEPRI, r3
    6c88:	f3bf 8f6f 	isb	sy
	/* Lock IRQs to ensure RNR value is correct when reading RASR. */
	unsigned int key;
	uint32_t rasr;

	key = irq_lock();
	MPU->RNR = index;
    6c8c:	4b04      	ldr	r3, [pc, #16]	; (6ca0 <is_enabled_region+0x24>)
    6c8e:	6098      	str	r0, [r3, #8]
	rasr = MPU->RASR;
    6c90:	6918      	ldr	r0, [r3, #16]
	__asm__ volatile(
    6c92:	f382 8811 	msr	BASEPRI, r2
    6c96:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	return (rasr & MPU_RASR_ENABLE_Msk) ? 1 : 0;
}
    6c9a:	f000 0001 	and.w	r0, r0, #1
    6c9e:	4770      	bx	lr
    6ca0:	e000ed90 	.word	0xe000ed90

00006ca4 <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const uint8_t index,
	const struct z_arm_mpu_partition *new_region)
{
    6ca4:	b510      	push	{r4, lr}
    6ca6:	4604      	mov	r4, r0

	LOG_DBG("Configure MPU region at index 0x%x", index);

	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    6ca8:	e9d1 0300 	ldrd	r0, r3, [r1]
	if (size <= 32U) {
    6cac:	2b20      	cmp	r3, #32
    6cae:	6889      	ldr	r1, [r1, #8]
    6cb0:	d922      	bls.n	6cf8 <mpu_configure_region+0x54>
	if (size > (1UL << 31)) {
    6cb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    6cb6:	d821      	bhi.n	6cfc <mpu_configure_region+0x58>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    6cb8:	3b01      	subs	r3, #1
    6cba:	fab3 f383 	clz	r3, r3
    6cbe:	f1c3 031f 	rsb	r3, r3, #31
    6cc2:	005b      	lsls	r3, r3, #1
	if (index > (get_num_regions() - 1U)) {
    6cc4:	2c07      	cmp	r4, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    6cc6:	ea43 0301 	orr.w	r3, r3, r1
    6cca:	d921      	bls.n	6d10 <mpu_configure_region+0x6c>
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
    6ccc:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
    6cd0:	b9b3      	cbnz	r3, 6d00 <mpu_configure_region+0x5c>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
    6cd2:	f3ef 8314 	mrs	r3, CONTROL
	return (value & CONTROL_nPRIV_Msk) ? true : false;
    6cd6:	f003 0301 	and.w	r3, r3, #1
    6cda:	4814      	ldr	r0, [pc, #80]	; (6d2c <mpu_configure_region+0x88>)
    6cdc:	4a14      	ldr	r2, [pc, #80]	; (6d30 <mpu_configure_region+0x8c>)
    6cde:	1a80      	subs	r0, r0, r2
    6ce0:	08c0      	lsrs	r0, r0, #3
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    6ce2:	0180      	lsls	r0, r0, #6
    6ce4:	f040 0001 	orr.w	r0, r0, #1
    6ce8:	b163      	cbz	r3, 6d04 <mpu_configure_region+0x60>
    6cea:	4912      	ldr	r1, [pc, #72]	; (6d34 <mpu_configure_region+0x90>)
    6cec:	4622      	mov	r2, r4
    6cee:	f01e f8d2 	bl	24e96 <log_from_user>
		return -EINVAL;
    6cf2:	f06f 0015 	mvn.w	r0, #21
		&new_region->attr, new_region->start, new_region->size);

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
    6cf6:	bd10      	pop	{r4, pc}
		return REGION_32B;
    6cf8:	2308      	movs	r3, #8
    6cfa:	e7e3      	b.n	6cc4 <mpu_configure_region+0x20>
		return REGION_4G;
    6cfc:	233e      	movs	r3, #62	; 0x3e
    6cfe:	e7e1      	b.n	6cc4 <mpu_configure_region+0x20>
		return false;
    6d00:	2300      	movs	r3, #0
    6d02:	e7ea      	b.n	6cda <mpu_configure_region+0x36>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    6d04:	4602      	mov	r2, r0
    6d06:	4621      	mov	r1, r4
    6d08:	480a      	ldr	r0, [pc, #40]	; (6d34 <mpu_configure_region+0x90>)
    6d0a:	f01e f8f7 	bl	24efc <log_1>
    6d0e:	e7f0      	b.n	6cf2 <mpu_configure_region+0x4e>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    6d10:	f020 021f 	bic.w	r2, r0, #31
	MPU->RNR = index;
    6d14:	4908      	ldr	r1, [pc, #32]	; (6d38 <mpu_configure_region+0x94>)
				| MPU_RBAR_VALID_Msk | index;
    6d16:	4322      	orrs	r2, r4
    6d18:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    6d1c:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = index;
    6d20:	608c      	str	r4, [r1, #8]
	return index;
    6d22:	4620      	mov	r0, r4
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    6d24:	60ca      	str	r2, [r1, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    6d26:	610b      	str	r3, [r1, #16]
	return region_allocate_and_init(index,
    6d28:	e7e5      	b.n	6cf6 <mpu_configure_region+0x52>
    6d2a:	bf00      	nop
    6d2c:	0002a800 	.word	0x0002a800
    6d30:	0002a6d0 	.word	0x0002a6d0
    6d34:	0002d16d 	.word	0x0002d16d
    6d38:	e000ed90 	.word	0xe000ed90

00006d3c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    6d3c:	4b03      	ldr	r3, [pc, #12]	; (6d4c <arm_core_mpu_enable+0x10>)
    6d3e:	2205      	movs	r2, #5
    6d40:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    6d42:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6d46:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    6d4a:	4770      	bx	lr
    6d4c:	e000ed90 	.word	0xe000ed90

00006d50 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    6d50:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    6d54:	4b01      	ldr	r3, [pc, #4]	; (6d5c <arm_core_mpu_disable+0xc>)
    6d56:	2200      	movs	r2, #0
    6d58:	605a      	str	r2, [r3, #4]
}
    6d5a:	4770      	bx	lr
    6d5c:	e000ed90 	.word	0xe000ed90

00006d60 <arm_mpu_init>:
 */
static int arm_mpu_init(const struct device *arg)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    6d60:	4913      	ldr	r1, [pc, #76]	; (6db0 <arm_mpu_init+0x50>)
    6d62:	6808      	ldr	r0, [r1, #0]
    6d64:	2808      	cmp	r0, #8
{
    6d66:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    6d68:	d81e      	bhi.n	6da8 <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    6d6a:	f7ff fff1 	bl	6d50 <arm_core_mpu_disable>
	MPU->RNR = index;
    6d6e:	4c11      	ldr	r4, [pc, #68]	; (6db4 <arm_mpu_init+0x54>)
    6d70:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    6d72:	2200      	movs	r2, #0
    6d74:	4290      	cmp	r0, r2
    6d76:	f101 010c 	add.w	r1, r1, #12
    6d7a:	d105      	bne.n	6d88 <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    6d7c:	4b0e      	ldr	r3, [pc, #56]	; (6db8 <arm_mpu_init+0x58>)
    6d7e:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    6d80:	f7ff ffdc 	bl	6d3c <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    6d84:	2000      	movs	r0, #0
}
    6d86:	bd10      	pop	{r4, pc}
    6d88:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    6d8a:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    6d8e:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    6d92:	4313      	orrs	r3, r2
    6d94:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    6d98:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    6d9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
    6d9e:	f043 0301 	orr.w	r3, r3, #1
    6da2:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    6da4:	3201      	adds	r2, #1
    6da6:	e7e5      	b.n	6d74 <arm_mpu_init+0x14>
		return -1;
    6da8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6dac:	e7eb      	b.n	6d86 <arm_mpu_init+0x26>
    6dae:	bf00      	nop
    6db0:	0002abf8 	.word	0x0002abf8
    6db4:	e000ed90 	.word	0xe000ed90
    6db8:	20002953 	.word	0x20002953

00006dbc <arm_core_mpu_get_max_available_dyn_regions>:
	return get_num_regions() - static_regions_num;
    6dbc:	4b02      	ldr	r3, [pc, #8]	; (6dc8 <arm_core_mpu_get_max_available_dyn_regions+0xc>)
    6dbe:	7818      	ldrb	r0, [r3, #0]
}
    6dc0:	f1c0 0008 	rsb	r0, r0, #8
    6dc4:	4770      	bx	lr
    6dc6:	bf00      	nop
    6dc8:	20002953 	.word	0x20002953

00006dcc <arm_core_mpu_buffer_validate>:
{
    6dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6dd0:	2900      	cmp	r1, #0
	/* Lock IRQs to ensure RNR value is correct when reading RBAR, RASR. */
	unsigned int key;
	uint32_t rbar, rasr;

	key = irq_lock();
	MPU->RNR = r_index;
    6dd2:	4e27      	ldr	r6, [pc, #156]	; (6e70 <arm_core_mpu_buffer_validate+0xa4>)
	r_addr_start = rbar & MPU_RBAR_ADDR_Msk;
	r_size_lshift = ((rasr & MPU_RASR_SIZE_Msk) >>
			MPU_RASR_SIZE_Pos) + 1U;
	r_addr_end = r_addr_start + (1UL << r_size_lshift) - 1UL;

	size = size == 0U ? 0U : size - 1U;
    6dd4:	f101 35ff 	add.w	r5, r1, #4294967295	; 0xffffffff
    6dd8:	4604      	mov	r4, r0
    6dda:	4617      	mov	r7, r2
static inline int mpu_buffer_validate(void *addr, size_t size, int write)
{
	int32_t r_index;

	/* Iterate all mpu regions in reversed order */
	for (r_index = get_num_regions() - 1U; r_index >= 0;  r_index--) {
    6ddc:	bf08      	it	eq
    6dde:	2500      	moveq	r5, #0
    6de0:	2107      	movs	r1, #7
	r_addr_end = r_addr_start + (1UL << r_size_lshift) - 1UL;
    6de2:	f04f 0801 	mov.w	r8, #1
		if (!is_enabled_region(r_index) ||
    6de6:	4608      	mov	r0, r1
    6de8:	f7ff ff48 	bl	6c7c <is_enabled_region>
    6dec:	2800      	cmp	r0, #0
    6dee:	d037      	beq.n	6e60 <arm_core_mpu_buffer_validate+0x94>
	__asm__ volatile(
    6df0:	f04f 0320 	mov.w	r3, #32
    6df4:	f3ef 8011 	mrs	r0, BASEPRI
    6df8:	f383 8811 	msr	BASEPRI, r3
    6dfc:	f3bf 8f6f 	isb	sy
	MPU->RNR = r_index;
    6e00:	60b1      	str	r1, [r6, #8]
	rbar = MPU->RBAR;
    6e02:	68f2      	ldr	r2, [r6, #12]
	rasr = MPU->RASR;
    6e04:	6933      	ldr	r3, [r6, #16]
	__asm__ volatile(
    6e06:	f380 8811 	msr	BASEPRI, r0
    6e0a:	f3bf 8f6f 	isb	sy
	return __builtin_add_overflow(a, b, result);
}

static inline bool u32_add_overflow(uint32_t a, uint32_t b, uint32_t *result)
{
	return __builtin_add_overflow(a, b, result);
    6e0e:	1960      	adds	r0, r4, r5
    6e10:	d226      	bcs.n	6e60 <arm_core_mpu_buffer_validate+0x94>
	r_addr_start = rbar & MPU_RBAR_ADDR_Msk;
    6e12:	f022 021f 	bic.w	r2, r2, #31
	if ((start >= r_addr_start) && (end <= r_addr_end)) {
    6e16:	4294      	cmp	r4, r2
    6e18:	d322      	bcc.n	6e60 <arm_core_mpu_buffer_validate+0x94>
	r_size_lshift = ((rasr & MPU_RASR_SIZE_Msk) >>
    6e1a:	f3c3 0344 	ubfx	r3, r3, #1, #5
    6e1e:	3301      	adds	r3, #1
	r_addr_end = r_addr_start + (1UL << r_size_lshift) - 1UL;
    6e20:	fa08 f303 	lsl.w	r3, r8, r3
    6e24:	3a01      	subs	r2, #1
    6e26:	4413      	add	r3, r2
	if ((start >= r_addr_start) && (end <= r_addr_end)) {
    6e28:	4283      	cmp	r3, r0
    6e2a:	d319      	bcc.n	6e60 <arm_core_mpu_buffer_validate+0x94>
	__asm__ volatile(
    6e2c:	f04f 0320 	mov.w	r3, #32
    6e30:	f3ef 8211 	mrs	r2, BASEPRI
    6e34:	f383 8811 	msr	BASEPRI, r3
    6e38:	f3bf 8f6f 	isb	sy
	MPU->RNR = r_index;
    6e3c:	60b1      	str	r1, [r6, #8]
	rasr = MPU->RASR;
    6e3e:	6933      	ldr	r3, [r6, #16]
	__asm__ volatile(
    6e40:	f382 8811 	msr	BASEPRI, r2
    6e44:	f3bf 8f6f 	isb	sy
	return (rasr & MPU_RASR_AP_Msk) >> MPU_RASR_AP_Pos;
    6e48:	0e19      	lsrs	r1, r3, #24
    6e4a:	f3c3 6302 	ubfx	r3, r3, #24, #3
	if (write != 0) {
    6e4e:	b167      	cbz	r7, 6e6a <arm_core_mpu_buffer_validate+0x9e>
		return r_ap == P_RW_U_RW;
    6e50:	3b03      	subs	r3, #3
    6e52:	4259      	negs	r1, r3
    6e54:	4159      	adcs	r1, r3
		/* For ARM MPU, higher region number takes priority.
		 * Since we iterate all mpu regions in reversed order, so
		 * we can stop the iteration immediately once we find the
		 * matched region that grants permission or denies access.
		 */
		if (is_user_accessible_region(r_index, write)) {
    6e56:	fab1 f181 	clz	r1, r1
    6e5a:	0949      	lsrs	r1, r1, #5
    6e5c:	4249      	negs	r1, r1
	return mpu_buffer_validate(addr, size, write);
    6e5e:	e001      	b.n	6e64 <arm_core_mpu_buffer_validate+0x98>
	for (r_index = get_num_regions() - 1U; r_index >= 0;  r_index--) {
    6e60:	3901      	subs	r1, #1
    6e62:	d2c0      	bcs.n	6de6 <arm_core_mpu_buffer_validate+0x1a>
}
    6e64:	4608      	mov	r0, r1
    6e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return r_ap & MPU_USER_READ_ACCESSIBLE_Msk;
    6e6a:	f001 0102 	and.w	r1, r1, #2
    6e6e:	e7f2      	b.n	6e56 <arm_core_mpu_buffer_validate+0x8a>
    6e70:	e000ed90 	.word	0xe000ed90

00006e74 <arm_core_mpu_configure_static_mpu_regions>:
{
    6e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    6e76:	4c1e      	ldr	r4, [pc, #120]	; (6ef0 <arm_core_mpu_configure_static_mpu_regions+0x7c>)
	int reg_index = start_reg_index;
    6e78:	7823      	ldrb	r3, [r4, #0]
{
    6e7a:	460f      	mov	r7, r1
	for (i = 0; i < regions_num; i++) {
    6e7c:	4606      	mov	r6, r0
    6e7e:	2500      	movs	r5, #0
    6e80:	42bd      	cmp	r5, r7
    6e82:	da11      	bge.n	6ea8 <arm_core_mpu_configure_static_mpu_regions+0x34>
		if (regions[i].size == 0U) {
    6e84:	6872      	ldr	r2, [r6, #4]
    6e86:	b382      	cbz	r2, 6eea <arm_core_mpu_configure_static_mpu_regions+0x76>
		((part->size & (part->size - 1U)) == 0U)
    6e88:	1e51      	subs	r1, r2, #1
		&&
    6e8a:	420a      	tst	r2, r1
    6e8c:	d10e      	bne.n	6eac <arm_core_mpu_configure_static_mpu_regions+0x38>
		&&
    6e8e:	2a1f      	cmp	r2, #31
    6e90:	d90c      	bls.n	6eac <arm_core_mpu_configure_static_mpu_regions+0x38>
		((part->start & (part->size - 1U)) == 0U);
    6e92:	6832      	ldr	r2, [r6, #0]
		&&
    6e94:	4211      	tst	r1, r2
    6e96:	d109      	bne.n	6eac <arm_core_mpu_configure_static_mpu_regions+0x38>
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    6e98:	b2d8      	uxtb	r0, r3
    6e9a:	4631      	mov	r1, r6
    6e9c:	f7ff ff02 	bl	6ca4 <mpu_configure_region>
		if (reg_index == -EINVAL) {
    6ea0:	f110 0f16 	cmn.w	r0, #22
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    6ea4:	4603      	mov	r3, r0
		if (reg_index == -EINVAL) {
    6ea6:	d11f      	bne.n	6ee8 <arm_core_mpu_configure_static_mpu_regions+0x74>
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    6ea8:	7023      	strb	r3, [r4, #0]
}
    6eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
    6eac:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
    6eb0:	b993      	cbnz	r3, 6ed8 <arm_core_mpu_configure_static_mpu_regions+0x64>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
    6eb2:	f3ef 8314 	mrs	r3, CONTROL
	return (value & CONTROL_nPRIV_Msk) ? true : false;
    6eb6:	f003 0301 	and.w	r3, r3, #1
    6eba:	480e      	ldr	r0, [pc, #56]	; (6ef4 <arm_core_mpu_configure_static_mpu_regions+0x80>)
    6ebc:	4a0e      	ldr	r2, [pc, #56]	; (6ef8 <arm_core_mpu_configure_static_mpu_regions+0x84>)
    6ebe:	1a80      	subs	r0, r0, r2
    6ec0:	08c0      	lsrs	r0, r0, #3
			LOG_ERR("Partition %u: sanity check failed.", i);
    6ec2:	0180      	lsls	r0, r0, #6
    6ec4:	f040 0001 	orr.w	r0, r0, #1
    6ec8:	b143      	cbz	r3, 6edc <arm_core_mpu_configure_static_mpu_regions+0x68>
    6eca:	490c      	ldr	r1, [pc, #48]	; (6efc <arm_core_mpu_configure_static_mpu_regions+0x88>)
    6ecc:	462a      	mov	r2, r5
    6ece:	f01d ffe2 	bl	24e96 <log_from_user>
			return -EINVAL;
    6ed2:	f06f 0315 	mvn.w	r3, #21
    6ed6:	e7e7      	b.n	6ea8 <arm_core_mpu_configure_static_mpu_regions+0x34>
		return false;
    6ed8:	2300      	movs	r3, #0
    6eda:	e7ee      	b.n	6eba <arm_core_mpu_configure_static_mpu_regions+0x46>
			LOG_ERR("Partition %u: sanity check failed.", i);
    6edc:	4602      	mov	r2, r0
    6ede:	4629      	mov	r1, r5
    6ee0:	4806      	ldr	r0, [pc, #24]	; (6efc <arm_core_mpu_configure_static_mpu_regions+0x88>)
    6ee2:	f01e f80b 	bl	24efc <log_1>
    6ee6:	e7f4      	b.n	6ed2 <arm_core_mpu_configure_static_mpu_regions+0x5e>
		reg_index++;
    6ee8:	3301      	adds	r3, #1
	for (i = 0; i < regions_num; i++) {
    6eea:	3501      	adds	r5, #1
    6eec:	360c      	adds	r6, #12
    6eee:	e7c7      	b.n	6e80 <arm_core_mpu_configure_static_mpu_regions+0xc>
    6ef0:	20002953 	.word	0x20002953
    6ef4:	0002a800 	.word	0x0002a800
    6ef8:	0002a6d0 	.word	0x0002a6d0
    6efc:	0002d193 	.word	0x0002d193

00006f00 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    6f00:	b570      	push	{r4, r5, r6, lr}
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
	int mpu_reg_index = static_regions_num;
    6f02:	4b10      	ldr	r3, [pc, #64]	; (6f44 <arm_core_mpu_configure_dynamic_mpu_regions+0x44>)
	int reg_index = start_reg_index;
    6f04:	781b      	ldrb	r3, [r3, #0]
{
    6f06:	460d      	mov	r5, r1
	for (i = 0; i < regions_num; i++) {
    6f08:	4604      	mov	r4, r0
    6f0a:	2600      	movs	r6, #0
    6f0c:	42ae      	cmp	r6, r5
    6f0e:	db07      	blt.n	6f20 <arm_core_mpu_configure_dynamic_mpu_regions+0x20>
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    6f10:	f113 0f16 	cmn.w	r3, #22
    6f14:	d003      	beq.n	6f1e <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    6f16:	4a0c      	ldr	r2, [pc, #48]	; (6f48 <arm_core_mpu_configure_dynamic_mpu_regions+0x48>)
  MPU->RASR = 0U;
    6f18:	2100      	movs	r1, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    6f1a:	2b07      	cmp	r3, #7
    6f1c:	dd0d      	ble.n	6f3a <arm_core_mpu_configure_dynamic_mpu_regions+0x3a>
}
    6f1e:	bd70      	pop	{r4, r5, r6, pc}
		if (regions[i].size == 0U) {
    6f20:	6862      	ldr	r2, [r4, #4]
    6f22:	b13a      	cbz	r2, 6f34 <arm_core_mpu_configure_dynamic_mpu_regions+0x34>
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    6f24:	4621      	mov	r1, r4
    6f26:	b2d8      	uxtb	r0, r3
    6f28:	f7ff febc 	bl	6ca4 <mpu_configure_region>
		if (reg_index == -EINVAL) {
    6f2c:	f110 0f16 	cmn.w	r0, #22
    6f30:	d0f5      	beq.n	6f1e <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
		reg_index++;
    6f32:	1c43      	adds	r3, r0, #1
	for (i = 0; i < regions_num; i++) {
    6f34:	3601      	adds	r6, #1
    6f36:	340c      	adds	r4, #12
    6f38:	e7e8      	b.n	6f0c <arm_core_mpu_configure_dynamic_mpu_regions+0xc>
  MPU->RNR = rnr;
    6f3a:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    6f3c:	6111      	str	r1, [r2, #16]
    6f3e:	3301      	adds	r3, #1
    6f40:	e7eb      	b.n	6f1a <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
    6f42:	bf00      	nop
    6f44:	20002953 	.word	0x20002953
    6f48:	e000ed90 	.word	0xe000ed90

00006f4c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    6f4c:	4b01      	ldr	r3, [pc, #4]	; (6f54 <__stdout_hook_install+0x8>)
    6f4e:	6018      	str	r0, [r3, #0]
}
    6f50:	4770      	bx	lr
    6f52:	bf00      	nop
    6f54:	200077d8 	.word	0x200077d8

00006f58 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
    6f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i = 0;

	for (i = 0; i < nbytes; i++) {
		*(buf + i) = _stdin_hook();
    6f5a:	4f08      	ldr	r7, [pc, #32]	; (6f7c <z_impl_zephyr_read_stdin+0x24>)
{
    6f5c:	4606      	mov	r6, r0
    6f5e:	460d      	mov	r5, r1
	for (i = 0; i < nbytes; i++) {
    6f60:	2400      	movs	r4, #0
    6f62:	42ac      	cmp	r4, r5
    6f64:	da08      	bge.n	6f78 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
    6f66:	683b      	ldr	r3, [r7, #0]
    6f68:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    6f6a:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
    6f6c:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    6f6e:	f104 0401 	add.w	r4, r4, #1
    6f72:	d001      	beq.n	6f78 <z_impl_zephyr_read_stdin+0x20>
    6f74:	280d      	cmp	r0, #13
    6f76:	d1f4      	bne.n	6f62 <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
    6f78:	4620      	mov	r0, r4
    6f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6f7c:	200077d4 	.word	0x200077d4

00006f80 <z_mrsh_z_zephyr_read_stdin>:
#include <syscalls/libc-hooks.h>

extern int z_vrfy_z_zephyr_read_stdin(char * buf, int nbytes);
uintptr_t z_mrsh_z_zephyr_read_stdin(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
    6f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_current->syscall_frame = ssf;
    6f84:	f8df 8090 	ldr.w	r8, [pc, #144]	; 7018 <z_mrsh_z_zephyr_read_stdin+0x98>
{
    6f88:	b086      	sub	sp, #24
	_current->syscall_frame = ssf;
    6f8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
    6f8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    6f90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

#ifdef CONFIG_USERSPACE
static inline int z_vrfy_z_zephyr_read_stdin(char *buf, int nbytes)
{
	Z_OOPS(Z_SYSCALL_MEMORY_WRITE(buf, nbytes));
    6f94:	2201      	movs	r2, #1
{
    6f96:	4605      	mov	r5, r0
    6f98:	460e      	mov	r6, r1
    6f9a:	f01f fd83 	bl	26aa4 <arch_buffer_validate>
    6f9e:	4647      	mov	r7, r8
    6fa0:	4604      	mov	r4, r0
    6fa2:	b318      	cbz	r0, 6fec <z_mrsh_z_zephyr_read_stdin+0x6c>
    6fa4:	f01f fd80 	bl	26aa8 <arch_is_user_context>
    6fa8:	4c16      	ldr	r4, [pc, #88]	; (7004 <z_mrsh_z_zephyr_read_stdin+0x84>)
    6faa:	4b17      	ldr	r3, [pc, #92]	; (7008 <z_mrsh_z_zephyr_read_stdin+0x88>)
    6fac:	1ae4      	subs	r4, r4, r3
    6fae:	08e4      	lsrs	r4, r4, #3
    6fb0:	01a4      	lsls	r4, r4, #6
    6fb2:	4b16      	ldr	r3, [pc, #88]	; (700c <z_mrsh_z_zephyr_read_stdin+0x8c>)
    6fb4:	f044 0401 	orr.w	r4, r4, #1
    6fb8:	b160      	cbz	r0, 6fd4 <z_mrsh_z_zephyr_read_stdin+0x54>
    6fba:	e9cd 6300 	strd	r6, r3, [sp]
    6fbe:	4a14      	ldr	r2, [pc, #80]	; (7010 <z_mrsh_z_zephyr_read_stdin+0x90>)
    6fc0:	4914      	ldr	r1, [pc, #80]	; (7014 <z_mrsh_z_zephyr_read_stdin+0x94>)
    6fc2:	462b      	mov	r3, r5
    6fc4:	4620      	mov	r0, r4
    6fc6:	f01d ff66 	bl	24e96 <log_from_user>
    6fca:	68bb      	ldr	r3, [r7, #8]
    6fcc:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    6fd0:	f01f fd44 	bl	26a5c <arch_syscall_oops>
    6fd4:	4a0e      	ldr	r2, [pc, #56]	; (7010 <z_mrsh_z_zephyr_read_stdin+0x90>)
    6fd6:	480f      	ldr	r0, [pc, #60]	; (7014 <z_mrsh_z_zephyr_read_stdin+0x94>)
    6fd8:	e9cd 2502 	strd	r2, r5, [sp, #8]
    6fdc:	e9cd 6304 	strd	r6, r3, [sp, #16]
    6fe0:	2204      	movs	r2, #4
    6fe2:	4623      	mov	r3, r4
    6fe4:	a902      	add	r1, sp, #8
    6fe6:	f01d ffd2 	bl	24f8e <log_n>
    6fea:	e7ee      	b.n	6fca <z_mrsh_z_zephyr_read_stdin+0x4a>
	return z_impl_zephyr_read_stdin((char *)buf, nbytes);
    6fec:	4631      	mov	r1, r6
    6fee:	4628      	mov	r0, r5
    6ff0:	f7ff ffb2 	bl	6f58 <z_impl_zephyr_read_stdin>
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	int ret = z_vrfy_z_zephyr_read_stdin(*(char **)&arg0, *(int*)&arg1)
;
	_current->syscall_frame = NULL;
    6ff4:	f8d8 3008 	ldr.w	r3, [r8, #8]
    6ff8:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
	return (uintptr_t) ret;
}
    6ffc:	b006      	add	sp, #24
    6ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7002:	bf00      	nop
    7004:	0002a810 	.word	0x0002a810
    7008:	0002a6d0 	.word	0x0002a6d0
    700c:	0002c903 	.word	0x0002c903
    7010:	0002d1b6 	.word	0x0002d1b6
    7014:	0002c8a6 	.word	0x0002c8a6
    7018:	200023f4 	.word	0x200023f4

0000701c <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    701c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    701e:	4f0a      	ldr	r7, [pc, #40]	; (7048 <z_impl_zephyr_write_stdout+0x2c>)
    7020:	460d      	mov	r5, r1
    7022:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    7024:	f1c0 0401 	rsb	r4, r0, #1
    7028:	19a3      	adds	r3, r4, r6
    702a:	429d      	cmp	r5, r3
    702c:	dc01      	bgt.n	7032 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
    702e:	4628      	mov	r0, r5
    7030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
    7032:	7873      	ldrb	r3, [r6, #1]
    7034:	2b0a      	cmp	r3, #10
    7036:	d102      	bne.n	703e <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
    7038:	683b      	ldr	r3, [r7, #0]
    703a:	200d      	movs	r0, #13
    703c:	4798      	blx	r3
		_stdout_hook(*(buf + i));
    703e:	683b      	ldr	r3, [r7, #0]
    7040:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    7044:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
    7046:	e7ef      	b.n	7028 <z_impl_zephyr_write_stdout+0xc>
    7048:	200077d8 	.word	0x200077d8

0000704c <z_mrsh_z_zephyr_write_stdout>:
#include <syscalls/libc-hooks.h>

extern int z_vrfy_z_zephyr_write_stdout(const void * buf, int nbytes);
uintptr_t z_mrsh_z_zephyr_write_stdout(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
    704c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_current->syscall_frame = ssf;
    7050:	f8df 8090 	ldr.w	r8, [pc, #144]	; 70e4 <z_mrsh_z_zephyr_write_stdout+0x98>
{
    7054:	b086      	sub	sp, #24
	_current->syscall_frame = ssf;
    7056:	f8d8 3008 	ldr.w	r3, [r8, #8]
    705a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    705c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

#ifdef CONFIG_USERSPACE
static inline int z_vrfy_z_zephyr_write_stdout(const void *buf, int nbytes)
{
	Z_OOPS(Z_SYSCALL_MEMORY_READ(buf, nbytes));
    7060:	2200      	movs	r2, #0
{
    7062:	4605      	mov	r5, r0
    7064:	460e      	mov	r6, r1
    7066:	f01f fd1d 	bl	26aa4 <arch_buffer_validate>
    706a:	4647      	mov	r7, r8
    706c:	4604      	mov	r4, r0
    706e:	b318      	cbz	r0, 70b8 <z_mrsh_z_zephyr_write_stdout+0x6c>
    7070:	f01f fd1a 	bl	26aa8 <arch_is_user_context>
    7074:	4c16      	ldr	r4, [pc, #88]	; (70d0 <z_mrsh_z_zephyr_write_stdout+0x84>)
    7076:	4b17      	ldr	r3, [pc, #92]	; (70d4 <z_mrsh_z_zephyr_write_stdout+0x88>)
    7078:	1ae4      	subs	r4, r4, r3
    707a:	08e4      	lsrs	r4, r4, #3
    707c:	01a4      	lsls	r4, r4, #6
    707e:	4b16      	ldr	r3, [pc, #88]	; (70d8 <z_mrsh_z_zephyr_write_stdout+0x8c>)
    7080:	f044 0401 	orr.w	r4, r4, #1
    7084:	b160      	cbz	r0, 70a0 <z_mrsh_z_zephyr_write_stdout+0x54>
    7086:	e9cd 6300 	strd	r6, r3, [sp]
    708a:	4a14      	ldr	r2, [pc, #80]	; (70dc <z_mrsh_z_zephyr_write_stdout+0x90>)
    708c:	4914      	ldr	r1, [pc, #80]	; (70e0 <z_mrsh_z_zephyr_write_stdout+0x94>)
    708e:	462b      	mov	r3, r5
    7090:	4620      	mov	r0, r4
    7092:	f01d ff00 	bl	24e96 <log_from_user>
    7096:	68bb      	ldr	r3, [r7, #8]
    7098:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    709c:	f01f fcde 	bl	26a5c <arch_syscall_oops>
    70a0:	4a0e      	ldr	r2, [pc, #56]	; (70dc <z_mrsh_z_zephyr_write_stdout+0x90>)
    70a2:	480f      	ldr	r0, [pc, #60]	; (70e0 <z_mrsh_z_zephyr_write_stdout+0x94>)
    70a4:	e9cd 2502 	strd	r2, r5, [sp, #8]
    70a8:	e9cd 6304 	strd	r6, r3, [sp, #16]
    70ac:	2204      	movs	r2, #4
    70ae:	4623      	mov	r3, r4
    70b0:	a902      	add	r1, sp, #8
    70b2:	f01d ff6c 	bl	24f8e <log_n>
    70b6:	e7ee      	b.n	7096 <z_mrsh_z_zephyr_write_stdout+0x4a>
	return z_impl_zephyr_write_stdout((const void *)buf, nbytes);
    70b8:	4631      	mov	r1, r6
    70ba:	4628      	mov	r0, r5
    70bc:	f7ff ffae 	bl	701c <z_impl_zephyr_write_stdout>
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	int ret = z_vrfy_z_zephyr_write_stdout(*(const void **)&arg0, *(int*)&arg1)
;
	_current->syscall_frame = NULL;
    70c0:	f8d8 3008 	ldr.w	r3, [r8, #8]
    70c4:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
	return (uintptr_t) ret;
}
    70c8:	b006      	add	sp, #24
    70ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    70ce:	bf00      	nop
    70d0:	0002a810 	.word	0x0002a810
    70d4:	0002a6d0 	.word	0x0002a6d0
    70d8:	0002d10e 	.word	0x0002d10e
    70dc:	0002d1d1 	.word	0x0002d1d1
    70e0:	0002c8a6 	.word	0x0002c8a6
    70e4:	200023f4 	.word	0x200023f4

000070e8 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    70e8:	f04f 0320 	mov.w	r3, #32
    70ec:	f3ef 8211 	mrs	r2, BASEPRI
    70f0:	f383 8811 	msr	BASEPRI, r3
    70f4:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    70f8:	4906      	ldr	r1, [pc, #24]	; (7114 <nordicsemi_nrf52_init+0x2c>)
    70fa:	2301      	movs	r3, #1
    70fc:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    7100:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    7104:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    7108:	f382 8811 	msr	BASEPRI, r2
    710c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    7110:	2000      	movs	r0, #0
    7112:	4770      	bx	lr
    7114:	4001e000 	.word	0x4001e000

00007118 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    7118:	b120      	cbz	r0, 7124 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    711a:	4b03      	ldr	r3, [pc, #12]	; (7128 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    711c:	0180      	lsls	r0, r0, #6
    711e:	f043 0301 	orr.w	r3, r3, #1
    7122:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    7124:	4770      	bx	lr
    7126:	bf00      	nop
    7128:	0002a980 	.word	0x0002a980

0000712c <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    712c:	4b0e      	ldr	r3, [pc, #56]	; (7168 <bt_hex_real+0x3c>)
    712e:	2940      	cmp	r1, #64	; 0x40
{
    7130:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
    7132:	bf28      	it	cs
    7134:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    7136:	4c0d      	ldr	r4, [pc, #52]	; (716c <bt_hex_real+0x40>)
    7138:	1846      	adds	r6, r0, r1
    713a:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
    713c:	42b0      	cmp	r0, r6
    713e:	f103 0302 	add.w	r3, r3, #2
    7142:	d104      	bne.n	714e <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    7144:	2300      	movs	r3, #0
    7146:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    714a:	4807      	ldr	r0, [pc, #28]	; (7168 <bt_hex_real+0x3c>)
    714c:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    714e:	7802      	ldrb	r2, [r0, #0]
    7150:	0912      	lsrs	r2, r2, #4
    7152:	5ca2      	ldrb	r2, [r4, r2]
    7154:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    7158:	f810 2b01 	ldrb.w	r2, [r0], #1
    715c:	f002 020f 	and.w	r2, r2, #15
    7160:	5ca2      	ldrb	r2, [r4, r2]
    7162:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    7166:	e7e9      	b.n	713c <bt_hex_real+0x10>
    7168:	20002954 	.word	0x20002954
    716c:	0002d201 	.word	0x0002d201

00007170 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    7170:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    7172:	7803      	ldrb	r3, [r0, #0]
    7174:	b08b      	sub	sp, #44	; 0x2c
    7176:	4604      	mov	r4, r0
    7178:	ad07      	add	r5, sp, #28
    717a:	2b03      	cmp	r3, #3
    717c:	d821      	bhi.n	71c2 <bt_addr_le_str_real+0x52>
    717e:	e8df f003 	tbb	[pc, r3]
    7182:	1a02      	.short	0x1a02
    7184:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    7186:	4912      	ldr	r1, [pc, #72]	; (71d0 <bt_addr_le_str_real+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    7188:	4628      	mov	r0, r5
    718a:	f023 f93f 	bl	2a40c <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    718e:	7863      	ldrb	r3, [r4, #1]
    7190:	9304      	str	r3, [sp, #16]
    7192:	78a3      	ldrb	r3, [r4, #2]
    7194:	9303      	str	r3, [sp, #12]
    7196:	78e3      	ldrb	r3, [r4, #3]
    7198:	9302      	str	r3, [sp, #8]
    719a:	7923      	ldrb	r3, [r4, #4]
    719c:	9301      	str	r3, [sp, #4]
    719e:	7963      	ldrb	r3, [r4, #5]
    71a0:	9300      	str	r3, [sp, #0]
    71a2:	4a0c      	ldr	r2, [pc, #48]	; (71d4 <bt_addr_le_str_real+0x64>)
    71a4:	79a3      	ldrb	r3, [r4, #6]
    71a6:	9505      	str	r5, [sp, #20]
    71a8:	211e      	movs	r1, #30
    71aa:	480b      	ldr	r0, [pc, #44]	; (71d8 <bt_addr_le_str_real+0x68>)
    71ac:	f01d fa27 	bl	245fe <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    71b0:	4809      	ldr	r0, [pc, #36]	; (71d8 <bt_addr_le_str_real+0x68>)
    71b2:	b00b      	add	sp, #44	; 0x2c
    71b4:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    71b6:	4909      	ldr	r1, [pc, #36]	; (71dc <bt_addr_le_str_real+0x6c>)
    71b8:	e7e6      	b.n	7188 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    71ba:	4909      	ldr	r1, [pc, #36]	; (71e0 <bt_addr_le_str_real+0x70>)
    71bc:	e7e4      	b.n	7188 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    71be:	4909      	ldr	r1, [pc, #36]	; (71e4 <bt_addr_le_str_real+0x74>)
    71c0:	e7e2      	b.n	7188 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    71c2:	4a09      	ldr	r2, [pc, #36]	; (71e8 <bt_addr_le_str_real+0x78>)
    71c4:	210a      	movs	r1, #10
    71c6:	4628      	mov	r0, r5
    71c8:	f01d fa19 	bl	245fe <snprintk>
		break;
    71cc:	e7df      	b.n	718e <bt_addr_le_str_real+0x1e>
    71ce:	bf00      	nop
    71d0:	0002c702 	.word	0x0002c702
    71d4:	0002c724 	.word	0x0002c724
    71d8:	200029d5 	.word	0x200029d5
    71dc:	0002c709 	.word	0x0002c709
    71e0:	0002c710 	.word	0x0002c710
    71e4:	0002c71a 	.word	0x0002c71a
    71e8:	0002e5ab 	.word	0x0002e5ab

000071ec <k_sem_give.constprop.0>:
static inline void k_sem_give(struct k_sem * sem)
    71ec:	e92d 4148 	stmdb	sp!, {r3, r6, r8, lr}
	ret = arch_is_user_context();
    71f0:	f01f fcd1 	bl	26b96 <arch_is_user_context>
	if (z_syscall_trap()) {
    71f4:	b120      	cbz	r0, 7200 <k_sem_give.constprop.0+0x14>
	register uint32_t ret __asm__("r0") = arg1;
    71f6:	4805      	ldr	r0, [pc, #20]	; (720c <k_sem_give.constprop.0+0x20>)
	register uint32_t r6 __asm__("r6") = call_id;
    71f8:	26a0      	movs	r6, #160	; 0xa0
	__asm__ volatile("svc %[svid]\n"
    71fa:	df03      	svc	3
}
    71fc:	e8bd 8148 	ldmia.w	sp!, {r3, r6, r8, pc}
	z_impl_k_sem_give(sem);
    7200:	4802      	ldr	r0, [pc, #8]	; (720c <k_sem_give.constprop.0+0x20>)
}
    7202:	e8bd 4148 	ldmia.w	sp!, {r3, r6, r8, lr}
	z_impl_k_sem_give(sem);
    7206:	f01a befd 	b.w	22004 <z_impl_k_sem_give>
    720a:	bf00      	nop
    720c:	20007e60 	.word	0x20007e60

00007210 <ecc_thread>:

	bt_recv(buf);
}

static void ecc_thread(void *p1, void *p2, void *p3)
{
    7210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7214:	4b79      	ldr	r3, [pc, #484]	; (73fc <ecc_thread+0x1ec>)
    7216:	4c7a      	ldr	r4, [pc, #488]	; (7400 <ecc_thread+0x1f0>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7218:	4f7a      	ldr	r7, [pc, #488]	; (7404 <ecc_thread+0x1f4>)
	return z_impl_k_sem_take(sem, timeout);
    721a:	f8df 9208 	ldr.w	r9, [pc, #520]	; 7424 <ecc_thread+0x214>
    721e:	1ae4      	subs	r4, r4, r3
    7220:	08e4      	lsrs	r4, r4, #3
    7222:	463d      	mov	r5, r7
    7224:	f01f fcb7 	bl	26b96 <arch_is_user_context>
	if (z_syscall_trap()) {
    7228:	2800      	cmp	r0, #0
    722a:	d05b      	beq.n	72e4 <ecc_thread+0xd4>
	register uint32_t r1 __asm__("r1") = arg2;
    722c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	register uint32_t ret __asm__("r0") = arg1;
    7230:	4648      	mov	r0, r9
	register uint32_t r2 __asm__("r2") = arg3;
    7232:	460a      	mov	r2, r1
	register uint32_t r6 __asm__("r6") = call_id;
    7234:	26a3      	movs	r6, #163	; 0xa3
	__asm__ volatile("svc %[svid]\n"
    7236:	df03      	svc	3
    7238:	f3bf 8f5b 	dmb	ish
    723c:	683b      	ldr	r3, [r7, #0]
    723e:	f3bf 8f5b 	dmb	ish
	while (true) {
		k_sem_take(&cmd_sem, K_FOREVER);

		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    7242:	07da      	lsls	r2, r3, #31
    7244:	d56e      	bpl.n	7324 <ecc_thread+0x114>
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
    7246:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 7418 <ecc_thread+0x208>
    724a:	4e6f      	ldr	r6, [pc, #444]	; (7408 <ecc_thread+0x1f8>)
	} while (memcmp(ecc.private_key_be, debug_private_key_be, 32) == 0);
    724c:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 7420 <ecc_thread+0x210>
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
    7250:	486e      	ldr	r0, [pc, #440]	; (740c <ecc_thread+0x1fc>)
    7252:	4652      	mov	r2, sl
    7254:	4631      	mov	r1, r6
    7256:	f01e fb3d 	bl	258d4 <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
    725a:	2800      	cmp	r0, #0
    725c:	d14f      	bne.n	72fe <ecc_thread+0xee>
	return arch_is_user_context();
    725e:	f01f fc9a 	bl	26b96 <arch_is_user_context>
			BT_ERR("Failed to create ECC public/private pair");
    7262:	01a3      	lsls	r3, r4, #6
    7264:	f043 0301 	orr.w	r3, r3, #1
    7268:	2800      	cmp	r0, #0
    726a:	d043      	beq.n	72f4 <ecc_thread+0xe4>
    726c:	4968      	ldr	r1, [pc, #416]	; (7410 <ecc_thread+0x200>)
    726e:	4618      	mov	r0, r3
    7270:	f01d fe11 	bl	24e96 <log_from_user>
			return BT_HCI_ERR_UNSPECIFIED;
    7274:	f04f 0a1f 	mov.w	sl, #31
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    7278:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    727c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7280:	2001      	movs	r0, #1
    7282:	f000 fa07 	bl	7694 <bt_buf_get_rx>
    7286:	f100 0808 	add.w	r8, r0, #8
    728a:	2102      	movs	r1, #2
    728c:	4606      	mov	r6, r0
    728e:	4640      	mov	r0, r8
    7290:	f021 fd08 	bl	28ca4 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    7294:	233e      	movs	r3, #62	; 0x3e
    7296:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    7298:	2342      	movs	r3, #66	; 0x42
    729a:	7043      	strb	r3, [r0, #1]
    729c:	2101      	movs	r1, #1
    729e:	4640      	mov	r0, r8
    72a0:	f021 fd00 	bl	28ca4 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
    72a4:	2308      	movs	r3, #8
    72a6:	7003      	strb	r3, [r0, #0]
    72a8:	2141      	movs	r1, #65	; 0x41
    72aa:	4640      	mov	r0, r8
    72ac:	f021 fcfa 	bl	28ca4 <net_buf_simple_add>
    72b0:	4680      	mov	r8, r0
	evt->status = status;
    72b2:	f800 ab01 	strb.w	sl, [r0], #1
	if (status) {
    72b6:	f1ba 0f00 	cmp.w	sl, #0
    72ba:	d02a      	beq.n	7312 <ecc_thread+0x102>
__ssp_bos_icheck3(memset, void *, int)
    72bc:	2240      	movs	r2, #64	; 0x40
    72be:	2100      	movs	r1, #0
    72c0:	f023 f89c 	bl	2a3fc <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    72c4:	f3bf 8f5b 	dmb	ish
    72c8:	e855 3f00 	ldrex	r3, [r5]
    72cc:	f023 0301 	bic.w	r3, r3, #1
    72d0:	e845 3200 	strex	r2, r3, [r5]
    72d4:	2a00      	cmp	r2, #0
    72d6:	d1f7      	bne.n	72c8 <ecc_thread+0xb8>
    72d8:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    72dc:	4630      	mov	r0, r6
    72de:	f001 fc75 	bl	8bcc <bt_recv>
	while (true) {
    72e2:	e79f      	b.n	7224 <ecc_thread+0x14>
	return z_impl_k_sem_take(sem, timeout);
    72e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    72e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    72ec:	4648      	mov	r0, r9
    72ee:	f01a feeb 	bl	220c8 <z_impl_k_sem_take>
    72f2:	e7a1      	b.n	7238 <ecc_thread+0x28>
			BT_ERR("Failed to create ECC public/private pair");
    72f4:	4846      	ldr	r0, [pc, #280]	; (7410 <ecc_thread+0x200>)
    72f6:	4619      	mov	r1, r3
    72f8:	f01d fdf3 	bl	24ee2 <log_0>
    72fc:	e7ba      	b.n	7274 <ecc_thread+0x64>
	} while (memcmp(ecc.private_key_be, debug_private_key_be, 32) == 0);
    72fe:	2220      	movs	r2, #32
    7300:	4641      	mov	r1, r8
    7302:	4630      	mov	r0, r6
    7304:	f023 f85e 	bl	2a3c4 <memcmp>
    7308:	2800      	cmp	r0, #0
    730a:	d0a1      	beq.n	7250 <ecc_thread+0x40>
	return 0;
    730c:	f04f 0a00 	mov.w	sl, #0
    7310:	e7b2      	b.n	7278 <ecc_thread+0x68>
		sys_memcpy_swap(evt->key, ecc.public_key_be, 32);
    7312:	493e      	ldr	r1, [pc, #248]	; (740c <ecc_thread+0x1fc>)
    7314:	f01f fc6d 	bl	26bf2 <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecc.public_key_be[32], 32);
    7318:	493e      	ldr	r1, [pc, #248]	; (7414 <ecc_thread+0x204>)
    731a:	f108 0021 	add.w	r0, r8, #33	; 0x21
    731e:	f01f fc68 	bl	26bf2 <sys_memcpy_swap.constprop.0>
    7322:	e7cf      	b.n	72c4 <ecc_thread+0xb4>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7324:	f3bf 8f5b 	dmb	ish
    7328:	683b      	ldr	r3, [r7, #0]
    732a:	f3bf 8f5b 	dmb	ish
			emulate_le_p256_public_key_cmd();
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
    732e:	079b      	lsls	r3, r3, #30
    7330:	f57f af78 	bpl.w	7224 <ecc_thread+0x14>
	ret = uECC_valid_public_key(ecc.public_key_be, &curve_secp256r1);
    7334:	4938      	ldr	r1, [pc, #224]	; (7418 <ecc_thread+0x208>)
    7336:	4835      	ldr	r0, [pc, #212]	; (740c <ecc_thread+0x1fc>)
    7338:	f01f f996 	bl	26668 <uECC_valid_public_key>
	if (ret < 0) {
    733c:	1e01      	subs	r1, r0, #0
    733e:	da43      	bge.n	73c8 <ecc_thread+0x1b8>
    7340:	f01f fc29 	bl	26b96 <arch_is_user_context>
		BT_ERR("public key is not valid (ret %d)", ret);
    7344:	01a3      	lsls	r3, r4, #6
    7346:	f043 0301 	orr.w	r3, r3, #1
    734a:	b3c0      	cbz	r0, 73be <ecc_thread+0x1ae>
    734c:	460a      	mov	r2, r1
    734e:	4618      	mov	r0, r3
    7350:	4932      	ldr	r1, [pc, #200]	; (741c <ecc_thread+0x20c>)
    7352:	f01d fda0 	bl	24e96 <log_from_user>
		ret = TC_CRYPTO_FAIL;
    7356:	f04f 0800 	mov.w	r8, #0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    735a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    735e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7362:	2001      	movs	r0, #1
    7364:	f000 f996 	bl	7694 <bt_buf_get_rx>
    7368:	f100 0a08 	add.w	sl, r0, #8
    736c:	2102      	movs	r1, #2
    736e:	4606      	mov	r6, r0
    7370:	4650      	mov	r0, sl
    7372:	f021 fc97 	bl	28ca4 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    7376:	233e      	movs	r3, #62	; 0x3e
    7378:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    737a:	2322      	movs	r3, #34	; 0x22
    737c:	7043      	strb	r3, [r0, #1]
    737e:	2101      	movs	r1, #1
    7380:	4650      	mov	r0, sl
    7382:	f021 fc8f 	bl	28ca4 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
    7386:	2309      	movs	r3, #9
    7388:	7003      	strb	r3, [r0, #0]
    738a:	2121      	movs	r1, #33	; 0x21
    738c:	4650      	mov	r0, sl
    738e:	f021 fc89 	bl	28ca4 <net_buf_simple_add>
    7392:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
    7394:	3001      	adds	r0, #1
    7396:	f1b8 0f00 	cmp.w	r8, #0
    739a:	d128      	bne.n	73ee <ecc_thread+0x1de>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
    739c:	221f      	movs	r2, #31
    739e:	701a      	strb	r2, [r3, #0]
    73a0:	21ff      	movs	r1, #255	; 0xff
    73a2:	2220      	movs	r2, #32
    73a4:	f023 f82a 	bl	2a3fc <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    73a8:	f3bf 8f5b 	dmb	ish
    73ac:	e855 3f00 	ldrex	r3, [r5]
    73b0:	f023 0302 	bic.w	r3, r3, #2
    73b4:	e845 3200 	strex	r2, r3, [r5]
    73b8:	2a00      	cmp	r2, #0
    73ba:	d08d      	beq.n	72d8 <ecc_thread+0xc8>
    73bc:	e7f6      	b.n	73ac <ecc_thread+0x19c>
		BT_ERR("public key is not valid (ret %d)", ret);
    73be:	4817      	ldr	r0, [pc, #92]	; (741c <ecc_thread+0x20c>)
    73c0:	461a      	mov	r2, r3
    73c2:	f01d fd9b 	bl	24efc <log_1>
    73c6:	e7c6      	b.n	7356 <ecc_thread+0x146>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    73c8:	f3bf 8f5b 	dmb	ish
    73cc:	683b      	ldr	r3, [r7, #0]
		ret = uECC_shared_secret(ecc.public_key_be,
    73ce:	490e      	ldr	r1, [pc, #56]	; (7408 <ecc_thread+0x1f8>)
    73d0:	4813      	ldr	r0, [pc, #76]	; (7420 <ecc_thread+0x210>)
    73d2:	f3bf 8f5b 	dmb	ish
    73d6:	f013 0f04 	tst.w	r3, #4
    73da:	f101 0220 	add.w	r2, r1, #32
    73de:	4b0e      	ldr	r3, [pc, #56]	; (7418 <ecc_thread+0x208>)
    73e0:	bf18      	it	ne
    73e2:	4601      	movne	r1, r0
    73e4:	4610      	mov	r0, r2
    73e6:	f01e fac2 	bl	2596e <uECC_shared_secret>
    73ea:	4680      	mov	r8, r0
    73ec:	e7b5      	b.n	735a <ecc_thread+0x14a>
		evt->status = 0U;
    73ee:	2200      	movs	r2, #0
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
    73f0:	4906      	ldr	r1, [pc, #24]	; (740c <ecc_thread+0x1fc>)
		evt->status = 0U;
    73f2:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
    73f4:	f01f fbfd 	bl	26bf2 <sys_memcpy_swap.constprop.0>
    73f8:	e7d6      	b.n	73a8 <ecc_thread+0x198>
    73fa:	bf00      	nop
    73fc:	0002a6d0 	.word	0x0002a6d0
    7400:	0002a7b0 	.word	0x0002a7b0
    7404:	20000e04 	.word	0x20000e04
    7408:	200029f3 	.word	0x200029f3
    740c:	20002a13 	.word	0x20002a13
    7410:	0002d219 	.word	0x0002d219
    7414:	20002a33 	.word	0x20002a33
    7418:	0002ac18 	.word	0x0002ac18
    741c:	0002d242 	.word	0x0002d242
    7420:	0002d275 	.word	0x0002d275
    7424:	20007e60 	.word	0x20007e60

00007428 <le_gen_dhkey>:
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
}

static uint8_t le_gen_dhkey(uint8_t *key, uint8_t key_type)
{
    7428:	b570      	push	{r4, r5, r6, lr}
    742a:	4c20      	ldr	r4, [pc, #128]	; (74ac <le_gen_dhkey+0x84>)
    742c:	f3bf 8f5b 	dmb	ish
    7430:	6823      	ldr	r3, [r4, #0]
    7432:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    7436:	07da      	lsls	r2, r3, #31
{
    7438:	4606      	mov	r6, r0
    743a:	460d      	mov	r5, r1
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    743c:	d501      	bpl.n	7442 <le_gen_dhkey+0x1a>
		return BT_HCI_ERR_CMD_DISALLOWED;
    743e:	200c      	movs	r0, #12
			  key_type == BT_HCI_LE_KEY_TYPE_DEBUG);

	k_sem_give(&cmd_sem);

	return BT_HCI_ERR_SUCCESS;
}
    7440:	bd70      	pop	{r4, r5, r6, pc}
	if (key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
    7442:	2901      	cmp	r1, #1
    7444:	d830      	bhi.n	74a8 <le_gen_dhkey+0x80>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7446:	f3bf 8f5b 	dmb	ish
    744a:	e854 3f00 	ldrex	r3, [r4]
    744e:	f043 0202 	orr.w	r2, r3, #2
    7452:	e844 2100 	strex	r1, r2, [r4]
    7456:	2900      	cmp	r1, #0
    7458:	d1f7      	bne.n	744a <le_gen_dhkey+0x22>
    745a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
    745e:	079b      	lsls	r3, r3, #30
    7460:	d4ed      	bmi.n	743e <le_gen_dhkey+0x16>
	sys_memcpy_swap(ecc.public_key_be, key, 32);
    7462:	4813      	ldr	r0, [pc, #76]	; (74b0 <le_gen_dhkey+0x88>)
    7464:	4631      	mov	r1, r6
    7466:	f01f fbc4 	bl	26bf2 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecc.public_key_be[32], &key[32], 32);
    746a:	4812      	ldr	r0, [pc, #72]	; (74b4 <le_gen_dhkey+0x8c>)
    746c:	f106 0120 	add.w	r1, r6, #32
    7470:	f01f fbbf 	bl	26bf2 <sys_memcpy_swap.constprop.0>
    7474:	f3bf 8f5b 	dmb	ish
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	if (val) {
    7478:	b16d      	cbz	r5, 7496 <le_gen_dhkey+0x6e>
    747a:	e854 3f00 	ldrex	r3, [r4]
    747e:	f043 0304 	orr.w	r3, r3, #4
    7482:	e844 3200 	strex	r2, r3, [r4]
    7486:	2a00      	cmp	r2, #0
    7488:	d1f7      	bne.n	747a <le_gen_dhkey+0x52>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    748a:	f3bf 8f5b 	dmb	ish
	k_sem_give(&cmd_sem);
    748e:	f7ff fead 	bl	71ec <k_sem_give.constprop.0>
    7492:	2000      	movs	r0, #0
    7494:	e7d4      	b.n	7440 <le_gen_dhkey+0x18>
    7496:	e854 3f00 	ldrex	r3, [r4]
    749a:	f023 0304 	bic.w	r3, r3, #4
    749e:	e844 3200 	strex	r2, r3, [r4]
    74a2:	2a00      	cmp	r2, #0
    74a4:	d0f1      	beq.n	748a <le_gen_dhkey+0x62>
    74a6:	e7f6      	b.n	7496 <le_gen_dhkey+0x6e>
		return BT_HCI_ERR_INVALID_PARAM;
    74a8:	2012      	movs	r0, #18
    74aa:	e7c9      	b.n	7440 <le_gen_dhkey+0x18>
    74ac:	20000e04 	.word	0x20000e04
    74b0:	20002a13 	.word	0x20002a13
    74b4:	20002a33 	.word	0x20002a33

000074b8 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
    74b8:	b570      	push	{r4, r5, r6, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    74ba:	7d06      	ldrb	r6, [r0, #20]
    74bc:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
    74be:	b976      	cbnz	r6, 74de <bt_hci_ecc_send+0x26>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
    74c0:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
    74c2:	881d      	ldrh	r5, [r3, #0]
    74c4:	f242 0226 	movw	r2, #8230	; 0x2026
    74c8:	4295      	cmp	r5, r2
    74ca:	d044      	beq.n	7556 <bt_hci_ecc_send+0x9e>
    74cc:	d80f      	bhi.n	74ee <bt_hci_ecc_send+0x36>
    74ce:	f242 0201 	movw	r2, #8193	; 0x2001
    74d2:	4295      	cmp	r5, r2
    74d4:	d04e      	beq.n	7574 <bt_hci_ecc_send+0xbc>
    74d6:	f242 0325 	movw	r3, #8229	; 0x2025
    74da:	429d      	cmp	r5, r3
    74dc:	d013      	beq.n	7506 <bt_hci_ecc_send+0x4e>
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
    74de:	4b2a      	ldr	r3, [pc, #168]	; (7588 <bt_hci_ecc_send+0xd0>)
    74e0:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    74e4:	4620      	mov	r0, r4
    74e6:	691b      	ldr	r3, [r3, #16]
}
    74e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
    74ec:	4718      	bx	r3
		switch (sys_le16_to_cpu(chdr->opcode)) {
    74ee:	f242 035e 	movw	r3, #8286	; 0x205e
    74f2:	429d      	cmp	r5, r3
    74f4:	d1f3      	bne.n	74de <bt_hci_ecc_send+0x26>
 *
 * @return New beginning of the buffer data.
 */
static inline void *net_buf_pull(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull(&buf->b, len);
    74f6:	2103      	movs	r1, #3
    74f8:	3008      	adds	r0, #8
    74fa:	f021 fbf3 	bl	28ce4 <net_buf_simple_pull>
	cmd = (void *)buf->data;
    74fe:	68a0      	ldr	r0, [r4, #8]
	status = le_gen_dhkey(cmd->key, cmd->key_type);
    7500:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    7504:	e02d      	b.n	7562 <bt_hci_ecc_send+0xaa>
    7506:	2103      	movs	r1, #3
    7508:	3008      	adds	r0, #8
    750a:	f021 fbeb 	bl	28ce4 <net_buf_simple_pull>
	net_buf_unref(buf);
    750e:	4620      	mov	r0, r4
    7510:	f015 f972 	bl	1c7f8 <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7514:	f3bf 8f5b 	dmb	ish
    7518:	4b1c      	ldr	r3, [pc, #112]	; (758c <bt_hci_ecc_send+0xd4>)
    751a:	681a      	ldr	r2, [r3, #0]
    751c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
    7520:	0792      	lsls	r2, r2, #30
    7522:	d507      	bpl.n	7534 <bt_hci_ecc_send+0x7c>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    7524:	260c      	movs	r6, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
    7526:	4631      	mov	r1, r6
    7528:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
    752c:	f01f fb3d 	bl	26baa <send_cmd_status>
}
    7530:	2000      	movs	r0, #0
    7532:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7534:	f3bf 8f5b 	dmb	ish
    7538:	e853 2f00 	ldrex	r2, [r3]
    753c:	f042 0101 	orr.w	r1, r2, #1
    7540:	e843 1000 	strex	r0, r1, [r3]
    7544:	2800      	cmp	r0, #0
    7546:	d1f7      	bne.n	7538 <bt_hci_ecc_send+0x80>
    7548:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
    754c:	07d3      	lsls	r3, r2, #31
    754e:	d4e9      	bmi.n	7524 <bt_hci_ecc_send+0x6c>
		k_sem_give(&cmd_sem);
    7550:	f7ff fe4c 	bl	71ec <k_sem_give.constprop.0>
		status = BT_HCI_ERR_SUCCESS;
    7554:	e7e7      	b.n	7526 <bt_hci_ecc_send+0x6e>
    7556:	2103      	movs	r1, #3
    7558:	3008      	adds	r0, #8
    755a:	f021 fbc3 	bl	28ce4 <net_buf_simple_pull>
	status = le_gen_dhkey(cmd->key, BT_HCI_LE_KEY_TYPE_GENERATED);
    755e:	68a0      	ldr	r0, [r4, #8]
    7560:	4631      	mov	r1, r6
	status = le_gen_dhkey(cmd->key, cmd->key_type);
    7562:	f7ff ff61 	bl	7428 <le_gen_dhkey>
    7566:	4606      	mov	r6, r0
	net_buf_unref(buf);
    7568:	4620      	mov	r0, r4
    756a:	f015 f945 	bl	1c7f8 <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
    756e:	4631      	mov	r1, r6
    7570:	4628      	mov	r0, r5
    7572:	e7db      	b.n	752c <bt_hci_ecc_send+0x74>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
    7574:	78da      	ldrb	r2, [r3, #3]
    7576:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    757a:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
    757c:	791a      	ldrb	r2, [r3, #4]
    757e:	f022 0201 	bic.w	r2, r2, #1
    7582:	711a      	strb	r2, [r3, #4]
}
    7584:	e7ab      	b.n	74de <bt_hci_ecc_send+0x26>
    7586:	bf00      	nop
    7588:	20007600 	.word	0x20007600
    758c:	20000e04 	.word	0x20000e04

00007590 <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
    7590:	e92d 4170 	stmdb	sp!, {r4, r5, r6, r8, lr}
    7594:	b08f      	sub	sp, #60	; 0x3c
	ret = arch_is_user_context();
    7596:	f01f fafe 	bl	26b96 <arch_is_user_context>
	return ret;
    759a:	230a      	movs	r3, #10
	if (z_syscall_trap()) {
    759c:	b1c0      	cbz	r0, 75d0 <bt_hci_ecc_init+0x40>
		uintptr_t more[] = {
    759e:	2400      	movs	r4, #0
    75a0:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
    75a4:	e9cd 4408 	strd	r4, r4, [sp, #32]
    75a8:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
	register uint32_t ret __asm__("r0") = arg1;
    75ac:	4813      	ldr	r0, [pc, #76]	; (75fc <bt_hci_ecc_init+0x6c>)
	register uint32_t r1 __asm__("r1") = arg2;
    75ae:	4914      	ldr	r1, [pc, #80]	; (7600 <bt_hci_ecc_init+0x70>)
	register uint32_t r3 __asm__("r3") = arg4;
    75b0:	4b14      	ldr	r3, [pc, #80]	; (7604 <bt_hci_ecc_init+0x74>)
	register uint32_t r2 __asm__("r2") = arg3;
    75b2:	f44f 628a 	mov.w	r2, #1104	; 0x450
	register uint32_t r5 __asm__("r5") = arg6;
    75b6:	ad08      	add	r5, sp, #32
	register uint32_t r6 __asm__("r6") = call_id;
    75b8:	26aa      	movs	r6, #170	; 0xaa
	__asm__ volatile("svc %[svid]\n"
    75ba:	df03      	svc	3
	ret = arch_is_user_context();
    75bc:	f01f faeb 	bl	26b96 <arch_is_user_context>
	if (z_syscall_trap()) {
    75c0:	b1b8      	cbz	r0, 75f2 <bt_hci_ecc_init+0x62>
	register uint32_t ret __asm__("r0") = arg1;
    75c2:	480e      	ldr	r0, [pc, #56]	; (75fc <bt_hci_ecc_init+0x6c>)
	register uint32_t r1 __asm__("r1") = arg2;
    75c4:	4910      	ldr	r1, [pc, #64]	; (7608 <bt_hci_ecc_init+0x78>)
	register uint32_t r6 __asm__("r6") = call_id;
    75c6:	26b0      	movs	r6, #176	; 0xb0
	__asm__ volatile("svc %[svid]\n"
    75c8:	df03      	svc	3
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_KERNEL_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
    75ca:	b00f      	add	sp, #60	; 0x3c
    75cc:	e8bd 8170 	ldmia.w	sp!, {r4, r5, r6, r8, pc}
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    75d0:	2400      	movs	r4, #0
    75d2:	2500      	movs	r5, #0
    75d4:	e9cd 3003 	strd	r3, r0, [sp, #12]
    75d8:	e9cd 0001 	strd	r0, r0, [sp, #4]
    75dc:	9000      	str	r0, [sp, #0]
    75de:	e9cd 4506 	strd	r4, r5, [sp, #24]
    75e2:	4b08      	ldr	r3, [pc, #32]	; (7604 <bt_hci_ecc_init+0x74>)
    75e4:	4906      	ldr	r1, [pc, #24]	; (7600 <bt_hci_ecc_init+0x70>)
    75e6:	4805      	ldr	r0, [pc, #20]	; (75fc <bt_hci_ecc_init+0x6c>)
    75e8:	f44f 628a 	mov.w	r2, #1104	; 0x450
    75ec:	f022 fa75 	bl	29ada <z_impl_k_thread_create>
    75f0:	e7e4      	b.n	75bc <bt_hci_ecc_init+0x2c>
	return z_impl_k_thread_name_set(thread, str);
    75f2:	4905      	ldr	r1, [pc, #20]	; (7608 <bt_hci_ecc_init+0x78>)
    75f4:	4801      	ldr	r0, [pc, #4]	; (75fc <bt_hci_ecc_init+0x6c>)
    75f6:	f022 fa62 	bl	29abe <z_impl_k_thread_name_set>
    75fa:	e7e6      	b.n	75ca <bt_hci_ecc_init+0x3a>
    75fc:	200000f8 	.word	0x200000f8
    7600:	20003300 	.word	0x20003300
    7604:	00007211 	.word	0x00007211
    7608:	0002d263 	.word	0x0002d263

0000760c <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    760c:	b5f0      	push	{r4, r5, r6, r7, lr}
    760e:	460b      	mov	r3, r1
	switch (src->type) {
    7610:	7801      	ldrb	r1, [r0, #0]
    7612:	2901      	cmp	r1, #1
{
    7614:	4602      	mov	r2, r0
	switch (src->type) {
    7616:	d015      	beq.n	7644 <uuid_to_uuid128+0x38>
    7618:	2902      	cmp	r1, #2
    761a:	d02b      	beq.n	7674 <uuid_to_uuid128+0x68>
    761c:	b989      	cbnz	r1, 7642 <uuid_to_uuid128+0x36>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    761e:	4c1c      	ldr	r4, [pc, #112]	; (7690 <uuid_to_uuid128+0x84>)
    7620:	461d      	mov	r5, r3
    7622:	f104 0710 	add.w	r7, r4, #16
    7626:	6820      	ldr	r0, [r4, #0]
    7628:	6861      	ldr	r1, [r4, #4]
    762a:	462e      	mov	r6, r5
    762c:	c603      	stmia	r6!, {r0, r1}
    762e:	3408      	adds	r4, #8
    7630:	42bc      	cmp	r4, r7
    7632:	4635      	mov	r5, r6
    7634:	d1f7      	bne.n	7626 <uuid_to_uuid128+0x1a>
		sys_put_le16(BT_UUID_16(src)->val,
    7636:	8852      	ldrh	r2, [r2, #2]
		*dst = uuid128_base;
    7638:	7821      	ldrb	r1, [r4, #0]
    763a:	7031      	strb	r1, [r6, #0]
	dst[0] = val;
    763c:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    763e:	0a12      	lsrs	r2, r2, #8
    7640:	739a      	strb	r2, [r3, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    7642:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst = uuid128_base;
    7644:	4c12      	ldr	r4, [pc, #72]	; (7690 <uuid_to_uuid128+0x84>)
    7646:	461d      	mov	r5, r3
    7648:	f104 0710 	add.w	r7, r4, #16
    764c:	6820      	ldr	r0, [r4, #0]
    764e:	6861      	ldr	r1, [r4, #4]
    7650:	462e      	mov	r6, r5
    7652:	c603      	stmia	r6!, {r0, r1}
    7654:	3408      	adds	r4, #8
    7656:	42bc      	cmp	r4, r7
    7658:	4635      	mov	r5, r6
    765a:	d1f7      	bne.n	764c <uuid_to_uuid128+0x40>
		sys_put_le32(BT_UUID_32(src)->val,
    765c:	6852      	ldr	r2, [r2, #4]
		*dst = uuid128_base;
    765e:	7821      	ldrb	r1, [r4, #0]
    7660:	7031      	strb	r1, [r6, #0]
    7662:	f3c2 2107 	ubfx	r1, r2, #8, #8
	dst[0] = val;
    7666:	735a      	strb	r2, [r3, #13]
	sys_put_le16(val >> 16, &dst[2]);
    7668:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    766a:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    766c:	0a12      	lsrs	r2, r2, #8
    766e:	7399      	strb	r1, [r3, #14]
    7670:	741a      	strb	r2, [r3, #16]
}
    7672:	e7e6      	b.n	7642 <uuid_to_uuid128+0x36>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    7674:	f100 0510 	add.w	r5, r0, #16
    7678:	6810      	ldr	r0, [r2, #0]
    767a:	6851      	ldr	r1, [r2, #4]
    767c:	461c      	mov	r4, r3
    767e:	c403      	stmia	r4!, {r0, r1}
    7680:	3208      	adds	r2, #8
    7682:	42aa      	cmp	r2, r5
    7684:	4623      	mov	r3, r4
    7686:	d1f7      	bne.n	7678 <uuid_to_uuid128+0x6c>
    7688:	7812      	ldrb	r2, [r2, #0]
    768a:	7022      	strb	r2, [r4, #0]
    768c:	e7d9      	b.n	7642 <uuid_to_uuid128+0x36>
    768e:	bf00      	nop
    7690:	0002d295 	.word	0x0002d295

00007694 <bt_buf_get_rx>:
NET_BUF_POOL_DEFINE(acl_in_pool, CONFIG_BT_ACL_RX_COUNT, ACL_IN_SIZE,
		    sizeof(struct acl_data), bt_hci_host_num_completed_packets);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    7694:	b538      	push	{r3, r4, r5, lr}
    7696:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
    7698:	4805      	ldr	r0, [pc, #20]	; (76b0 <bt_buf_get_rx+0x1c>)
    769a:	f021 faad 	bl	28bf8 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    769e:	4604      	mov	r4, r0
    76a0:	b120      	cbz	r0, 76ac <bt_buf_get_rx+0x18>
	net_buf_simple_reserve(&buf->b, reserve);
    76a2:	2100      	movs	r1, #0
    76a4:	3008      	adds	r0, #8
    76a6:	f021 fac6 	bl	28c36 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    76aa:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    76ac:	4620      	mov	r0, r4
    76ae:	bd38      	pop	{r3, r4, r5, pc}
    76b0:	20007f90 	.word	0x20007f90

000076b4 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    76b4:	b570      	push	{r4, r5, r6, lr}
    76b6:	4602      	mov	r2, r0
    76b8:	460b      	mov	r3, r1
	__asm__ volatile(
    76ba:	f04f 0120 	mov.w	r1, #32
    76be:	f3ef 8511 	mrs	r5, BASEPRI
    76c2:	f381 8811 	msr	BASEPRI, r1
    76c6:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    76ca:	480c      	ldr	r0, [pc, #48]	; (76fc <bt_buf_get_cmd_complete+0x48>)
	bt_dev.sent_cmd = NULL;
    76cc:	2100      	movs	r1, #0
	buf = bt_dev.sent_cmd;
    76ce:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
	bt_dev.sent_cmd = NULL;
    76d2:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
	__asm__ volatile(
    76d6:	f385 8811 	msr	BASEPRI, r5
    76da:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    76de:	b924      	cbnz	r4, 76ea <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    76e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    76e4:	2001      	movs	r0, #1
    76e6:	f7ff bfd5 	b.w	7694 <bt_buf_get_rx>
    76ea:	2301      	movs	r3, #1
    76ec:	f104 0008 	add.w	r0, r4, #8
    76f0:	7523      	strb	r3, [r4, #20]
		buf->len = 0U;
    76f2:	81a1      	strh	r1, [r4, #12]
    76f4:	f021 fa9f 	bl	28c36 <net_buf_simple_reserve>
}
    76f8:	4620      	mov	r0, r4
    76fa:	bd70      	pop	{r4, r5, r6, pc}
    76fc:	20007600 	.word	0x20007600

00007700 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    7700:	b570      	push	{r4, r5, r6, lr}
    7702:	4604      	mov	r4, r0
	switch (evt) {
    7704:	2c0f      	cmp	r4, #15
{
    7706:	460d      	mov	r5, r1
    7708:	4610      	mov	r0, r2
    770a:	4619      	mov	r1, r3
	switch (evt) {
    770c:	d805      	bhi.n	771a <bt_buf_get_evt+0x1a>
    770e:	2c0d      	cmp	r4, #13
    7710:	d912      	bls.n	7738 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    7712:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    7716:	f7ff bfcd 	b.w	76b4 <bt_buf_get_cmd_complete>
	switch (evt) {
    771a:	2c13      	cmp	r4, #19
    771c:	d10c      	bne.n	7738 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
    771e:	480b      	ldr	r0, [pc, #44]	; (774c <bt_buf_get_evt+0x4c>)
    7720:	f021 fa6a 	bl	28bf8 <net_buf_alloc_fixed>
			if (buf) {
    7724:	4604      	mov	r4, r0
    7726:	b128      	cbz	r0, 7734 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
    7728:	2100      	movs	r1, #0
    772a:	3008      	adds	r0, #8
    772c:	f021 fa83 	bl	28c36 <net_buf_simple_reserve>
    7730:	2301      	movs	r3, #1
    7732:	7523      	strb	r3, [r4, #20]
}
    7734:	4620      	mov	r0, r4
    7736:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
    7738:	4602      	mov	r2, r0
    773a:	460b      	mov	r3, r1
		if (discardable) {
    773c:	b10d      	cbz	r5, 7742 <bt_buf_get_evt+0x42>
    773e:	4804      	ldr	r0, [pc, #16]	; (7750 <bt_buf_get_evt+0x50>)
    7740:	e7ee      	b.n	7720 <bt_buf_get_evt+0x20>
}
    7742:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    7746:	2001      	movs	r0, #1
    7748:	f7ff bfa4 	b.w	7694 <bt_buf_get_rx>
    774c:	20007fb8 	.word	0x20007fb8
    7750:	20007f18 	.word	0x20007f18

00007754 <ver_str>:
{
    7754:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    7756:	4d0b      	ldr	r5, [pc, #44]	; (7784 <ver_str+0x30>)
{
    7758:	4606      	mov	r6, r0
	const char * const str[] = {
    775a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    775c:	b08c      	sub	sp, #48	; 0x30
	const char * const str[] = {
    775e:	466c      	mov	r4, sp
    7760:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    7762:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7764:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    7766:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    776a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (ver < ARRAY_SIZE(str)) {
    776e:	2e0b      	cmp	r6, #11
		return str[ver];
    7770:	bf9b      	ittet	ls
    7772:	ab0c      	addls	r3, sp, #48	; 0x30
    7774:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	return "unknown";
    7778:	4803      	ldrhi	r0, [pc, #12]	; (7788 <ver_str+0x34>)
		return str[ver];
    777a:	f856 0c30 	ldrls.w	r0, [r6, #-48]
}
    777e:	b00c      	add	sp, #48	; 0x30
    7780:	bd70      	pop	{r4, r5, r6, pc}
    7782:	bf00      	nop
    7784:	0002a900 	.word	0x0002a900
    7788:	0002d398 	.word	0x0002d398

0000778c <hci_data_buf_overflow>:
{
    778c:	b508      	push	{r3, lr}
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
    778e:	6882      	ldr	r2, [r0, #8]
	return arch_is_user_context();
    7790:	f01f fab2 	bl	26cf8 <arch_is_user_context>
    7794:	490a      	ldr	r1, [pc, #40]	; (77c0 <hci_data_buf_overflow+0x34>)
    7796:	4b0b      	ldr	r3, [pc, #44]	; (77c4 <hci_data_buf_overflow+0x38>)
    7798:	1a5b      	subs	r3, r3, r1
    779a:	08db      	lsrs	r3, r3, #3
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    779c:	019b      	lsls	r3, r3, #6
    779e:	7811      	ldrb	r1, [r2, #0]
    77a0:	f043 0302 	orr.w	r3, r3, #2
    77a4:	b130      	cbz	r0, 77b4 <hci_data_buf_overflow+0x28>
    77a6:	460a      	mov	r2, r1
    77a8:	4618      	mov	r0, r3
    77aa:	4907      	ldr	r1, [pc, #28]	; (77c8 <hci_data_buf_overflow+0x3c>)
}
    77ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    77b0:	f01d bb71 	b.w	24e96 <log_from_user>
    77b4:	461a      	mov	r2, r3
    77b6:	4804      	ldr	r0, [pc, #16]	; (77c8 <hci_data_buf_overflow+0x3c>)
}
    77b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    77bc:	f01d bb9e 	b.w	24efc <log_1>
    77c0:	0002a6d0 	.word	0x0002a6d0
    77c4:	0002a7a8 	.word	0x0002a7a8
    77c8:	0002d3a0 	.word	0x0002d3a0

000077cc <le_data_len_change>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    77cc:	6883      	ldr	r3, [r0, #8]
{
    77ce:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    77d0:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    77d2:	4620      	mov	r0, r4
    77d4:	f003 f848 	bl	a868 <bt_conn_lookup_handle>
	if (!conn) {
    77d8:	b9b8      	cbnz	r0, 780a <le_data_len_change+0x3e>
    77da:	f01f fa8d 	bl	26cf8 <arch_is_user_context>
    77de:	4b0d      	ldr	r3, [pc, #52]	; (7814 <le_data_len_change+0x48>)
    77e0:	4a0d      	ldr	r2, [pc, #52]	; (7818 <le_data_len_change+0x4c>)
    77e2:	1a9b      	subs	r3, r3, r2
    77e4:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
    77e6:	019b      	lsls	r3, r3, #6
    77e8:	f043 0301 	orr.w	r3, r3, #1
    77ec:	b130      	cbz	r0, 77fc <le_data_len_change+0x30>
    77ee:	4622      	mov	r2, r4
    77f0:	490a      	ldr	r1, [pc, #40]	; (781c <le_data_len_change+0x50>)
}
    77f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    77f6:	4618      	mov	r0, r3
    77f8:	f01d bb4d 	b.w	24e96 <log_from_user>
    77fc:	4621      	mov	r1, r4
    77fe:	4807      	ldr	r0, [pc, #28]	; (781c <le_data_len_change+0x50>)
}
    7800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    7804:	461a      	mov	r2, r3
    7806:	f01d bb79 	b.w	24efc <log_1>
}
    780a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
    780e:	f01f be78 	b.w	27502 <bt_conn_unref>
    7812:	bf00      	nop
    7814:	0002a7a8 	.word	0x0002a7a8
    7818:	0002a6d0 	.word	0x0002a6d0
    781c:	0002d3c8 	.word	0x0002d3c8

00007820 <hci_disconn_complete_prio>:
{
    7820:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    7822:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
    7824:	781a      	ldrb	r2, [r3, #0]
    7826:	bb32      	cbnz	r2, 7876 <hci_disconn_complete_prio+0x56>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    7828:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    782c:	4628      	mov	r0, r5
    782e:	f003 f81b 	bl	a868 <bt_conn_lookup_handle>
	if (!conn) {
    7832:	4604      	mov	r4, r0
    7834:	b9b8      	cbnz	r0, 7866 <hci_disconn_complete_prio+0x46>
    7836:	f01f fa5f 	bl	26cf8 <arch_is_user_context>
    783a:	4b0f      	ldr	r3, [pc, #60]	; (7878 <hci_disconn_complete_prio+0x58>)
    783c:	4a0f      	ldr	r2, [pc, #60]	; (787c <hci_disconn_complete_prio+0x5c>)
    783e:	1a9b      	subs	r3, r3, r2
    7840:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to look up conn with handle %u", handle);
    7842:	019b      	lsls	r3, r3, #6
    7844:	f043 0301 	orr.w	r3, r3, #1
    7848:	b130      	cbz	r0, 7858 <hci_disconn_complete_prio+0x38>
    784a:	462a      	mov	r2, r5
    784c:	4618      	mov	r0, r3
    784e:	490c      	ldr	r1, [pc, #48]	; (7880 <hci_disconn_complete_prio+0x60>)
}
    7850:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    7854:	f01d bb1f 	b.w	24e96 <log_from_user>
    7858:	461a      	mov	r2, r3
    785a:	4629      	mov	r1, r5
    785c:	4808      	ldr	r0, [pc, #32]	; (7880 <hci_disconn_complete_prio+0x60>)
}
    785e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    7862:	f01d bb4b 	b.w	24efc <log_1>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    7866:	2101      	movs	r1, #1
    7868:	f003 f80a 	bl	a880 <bt_conn_set_state>
	bt_conn_unref(conn);
    786c:	4620      	mov	r0, r4
}
    786e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    7872:	f01f be46 	b.w	27502 <bt_conn_unref>
}
    7876:	bd38      	pop	{r3, r4, r5, pc}
    7878:	0002a7a8 	.word	0x0002a7a8
    787c:	0002a6d0 	.word	0x0002a6d0
    7880:	0002d3ec 	.word	0x0002d3ec

00007884 <hci_disconn_complete>:
{
    7884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    7886:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    7888:	7835      	ldrb	r5, [r6, #0]
    788a:	bb4d      	cbnz	r5, 78e0 <hci_disconn_complete+0x5c>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    788c:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    7890:	4638      	mov	r0, r7
    7892:	f002 ffe9 	bl	a868 <bt_conn_lookup_handle>
	if (!conn) {
    7896:	4604      	mov	r4, r0
    7898:	b9b8      	cbnz	r0, 78ca <hci_disconn_complete+0x46>
    789a:	f01f fa2d 	bl	26cf8 <arch_is_user_context>
    789e:	4b11      	ldr	r3, [pc, #68]	; (78e4 <hci_disconn_complete+0x60>)
    78a0:	4a11      	ldr	r2, [pc, #68]	; (78e8 <hci_disconn_complete+0x64>)
    78a2:	1a9b      	subs	r3, r3, r2
    78a4:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to look up conn with handle %u", handle);
    78a6:	019b      	lsls	r3, r3, #6
    78a8:	f043 0301 	orr.w	r3, r3, #1
    78ac:	b130      	cbz	r0, 78bc <hci_disconn_complete+0x38>
    78ae:	463a      	mov	r2, r7
    78b0:	4618      	mov	r0, r3
    78b2:	490e      	ldr	r1, [pc, #56]	; (78ec <hci_disconn_complete+0x68>)
}
    78b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    78b8:	f01d baed 	b.w	24e96 <log_from_user>
    78bc:	461a      	mov	r2, r3
    78be:	4639      	mov	r1, r7
    78c0:	480a      	ldr	r0, [pc, #40]	; (78ec <hci_disconn_complete+0x68>)
}
    78c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    78c6:	f01d bb19 	b.w	24efc <log_1>
	conn->err = evt->reason;
    78ca:	78f3      	ldrb	r3, [r6, #3]
    78cc:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    78ce:	4629      	mov	r1, r5
    78d0:	f002 ffd6 	bl	a880 <bt_conn_set_state>
	conn->handle = 0U;
    78d4:	8025      	strh	r5, [r4, #0]
		bt_conn_unref(conn);
    78d6:	4620      	mov	r0, r4
}
    78d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    78dc:	f01f be11 	b.w	27502 <bt_conn_unref>
}
    78e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    78e2:	bf00      	nop
    78e4:	0002a7a8 	.word	0x0002a7a8
    78e8:	0002a6d0 	.word	0x0002a6d0
    78ec:	0002d3ec 	.word	0x0002d3ec

000078f0 <hci_hardware_error>:
{
    78f0:	b508      	push	{r3, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    78f2:	2101      	movs	r1, #1
    78f4:	3008      	adds	r0, #8
    78f6:	f021 f9fd 	bl	28cf4 <net_buf_simple_pull_mem>
    78fa:	4602      	mov	r2, r0
    78fc:	f01f f9fc 	bl	26cf8 <arch_is_user_context>
    7900:	490a      	ldr	r1, [pc, #40]	; (792c <hci_hardware_error+0x3c>)
    7902:	4b0b      	ldr	r3, [pc, #44]	; (7930 <hci_hardware_error+0x40>)
    7904:	1a5b      	subs	r3, r3, r1
    7906:	08db      	lsrs	r3, r3, #3
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    7908:	019b      	lsls	r3, r3, #6
    790a:	7811      	ldrb	r1, [r2, #0]
    790c:	f043 0301 	orr.w	r3, r3, #1
    7910:	b130      	cbz	r0, 7920 <hci_hardware_error+0x30>
    7912:	460a      	mov	r2, r1
    7914:	4618      	mov	r0, r3
    7916:	4907      	ldr	r1, [pc, #28]	; (7934 <hci_hardware_error+0x44>)
}
    7918:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    791c:	f01d babb 	b.w	24e96 <log_from_user>
    7920:	461a      	mov	r2, r3
    7922:	4804      	ldr	r0, [pc, #16]	; (7934 <hci_hardware_error+0x44>)
}
    7924:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    7928:	f01d bae8 	b.w	24efc <log_1>
    792c:	0002a6d0 	.word	0x0002a6d0
    7930:	0002a7a8 	.word	0x0002a7a8
    7934:	0002d412 	.word	0x0002d412

00007938 <hci_vendor_event>:
{
    7938:	b510      	push	{r4, lr}
    793a:	4602      	mov	r2, r0
    793c:	4c11      	ldr	r4, [pc, #68]	; (7984 <hci_vendor_event+0x4c>)
    793e:	f01f f9db 	bl	26cf8 <arch_is_user_context>
    7942:	4b11      	ldr	r3, [pc, #68]	; (7988 <hci_vendor_event+0x50>)
    7944:	8991      	ldrh	r1, [r2, #12]
    7946:	1ae4      	subs	r4, r4, r3
    7948:	08e4      	lsrs	r4, r4, #3
		BT_WARN("Unhandled vendor-specific event: %s",
    794a:	01a4      	lsls	r4, r4, #6
    794c:	f044 0402 	orr.w	r4, r4, #2
    7950:	b158      	cbz	r0, 796a <hci_vendor_event+0x32>
    7952:	6890      	ldr	r0, [r2, #8]
    7954:	f7ff fbea 	bl	712c <bt_hex_real>
    7958:	f7fc fc14 	bl	4184 <log_strdup>
    795c:	490b      	ldr	r1, [pc, #44]	; (798c <hci_vendor_event+0x54>)
    795e:	4602      	mov	r2, r0
    7960:	4620      	mov	r0, r4
}
    7962:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    7966:	f01d ba96 	b.w	24e96 <log_from_user>
    796a:	6890      	ldr	r0, [r2, #8]
    796c:	f7ff fbde 	bl	712c <bt_hex_real>
    7970:	f7fc fc08 	bl	4184 <log_strdup>
    7974:	4622      	mov	r2, r4
    7976:	4601      	mov	r1, r0
}
    7978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    797c:	4803      	ldr	r0, [pc, #12]	; (798c <hci_vendor_event+0x54>)
    797e:	f01d babd 	b.w	24efc <log_1>
    7982:	bf00      	nop
    7984:	0002a7a8 	.word	0x0002a7a8
    7988:	0002a6d0 	.word	0x0002a6d0
    798c:	0002d434 	.word	0x0002d434

00007990 <hci_encrypt_key_refresh_complete>:
{
    7990:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
    7992:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    7994:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
    7998:	781d      	ldrb	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    799a:	4630      	mov	r0, r6
    799c:	f002 ff64 	bl	a868 <bt_conn_lookup_handle>
	if (!conn) {
    79a0:	4604      	mov	r4, r0
    79a2:	b9b8      	cbnz	r0, 79d4 <hci_encrypt_key_refresh_complete+0x44>
    79a4:	f01f f9a8 	bl	26cf8 <arch_is_user_context>
    79a8:	4b27      	ldr	r3, [pc, #156]	; (7a48 <hci_encrypt_key_refresh_complete+0xb8>)
    79aa:	4a28      	ldr	r2, [pc, #160]	; (7a4c <hci_encrypt_key_refresh_complete+0xbc>)
    79ac:	1a9b      	subs	r3, r3, r2
    79ae:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to look up conn with handle %u", handle);
    79b0:	019b      	lsls	r3, r3, #6
    79b2:	f043 0301 	orr.w	r3, r3, #1
    79b6:	b130      	cbz	r0, 79c6 <hci_encrypt_key_refresh_complete+0x36>
    79b8:	4632      	mov	r2, r6
    79ba:	4925      	ldr	r1, [pc, #148]	; (7a50 <hci_encrypt_key_refresh_complete+0xc0>)
}
    79bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    79c0:	4618      	mov	r0, r3
    79c2:	f01d ba68 	b.w	24e96 <log_from_user>
    79c6:	4631      	mov	r1, r6
    79c8:	4821      	ldr	r0, [pc, #132]	; (7a50 <hci_encrypt_key_refresh_complete+0xc0>)
}
    79ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    79ce:	461a      	mov	r2, r3
    79d0:	f01d ba94 	b.w	24efc <log_1>
	if (status) {
    79d4:	b165      	cbz	r5, 79f0 <hci_encrypt_key_refresh_complete+0x60>
	switch (hci_err) {
    79d6:	2d29      	cmp	r5, #41	; 0x29
    79d8:	bf96      	itet	ls
    79da:	4b1e      	ldrls	r3, [pc, #120]	; (7a54 <hci_encrypt_key_refresh_complete+0xc4>)
	if (status) {
    79dc:	2208      	movhi	r2, #8
    79de:	5d5a      	ldrbls	r2, [r3, r5]
		bt_conn_security_changed(conn, status,
    79e0:	4629      	mov	r1, r5
    79e2:	f002 fd51 	bl	a488 <bt_conn_security_changed>
	bt_conn_unref(conn);
    79e6:	4620      	mov	r0, r4
}
    79e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    79ec:	f01f bd89 	b.w	27502 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    79f0:	7883      	ldrb	r3, [r0, #2]
    79f2:	2b01      	cmp	r3, #1
    79f4:	d107      	bne.n	7a06 <hci_encrypt_key_refresh_complete+0x76>
		bt_smp_update_keys(conn);
    79f6:	f007 f861 	bl	eabc <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
    79fa:	4620      	mov	r0, r4
    79fc:	f01f f998 	bl	26d30 <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
    7a00:	2800      	cmp	r0, #0
    7a02:	bf08      	it	eq
    7a04:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
    7a06:	4b13      	ldr	r3, [pc, #76]	; (7a54 <hci_encrypt_key_refresh_complete+0xc4>)
    7a08:	4629      	mov	r1, r5
    7a0a:	5d5a      	ldrb	r2, [r3, r5]
    7a0c:	4620      	mov	r0, r4
    7a0e:	f002 fd3b 	bl	a488 <bt_conn_security_changed>
	if (status) {
    7a12:	2d00      	cmp	r5, #0
    7a14:	d0e7      	beq.n	79e6 <hci_encrypt_key_refresh_complete+0x56>
    7a16:	f01f f96f 	bl	26cf8 <arch_is_user_context>
    7a1a:	4b0b      	ldr	r3, [pc, #44]	; (7a48 <hci_encrypt_key_refresh_complete+0xb8>)
    7a1c:	4a0b      	ldr	r2, [pc, #44]	; (7a4c <hci_encrypt_key_refresh_complete+0xbc>)
    7a1e:	1a9b      	subs	r3, r3, r2
    7a20:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to set required security level");
    7a22:	019b      	lsls	r3, r3, #6
    7a24:	f043 0301 	orr.w	r3, r3, #1
    7a28:	b140      	cbz	r0, 7a3c <hci_encrypt_key_refresh_complete+0xac>
    7a2a:	490b      	ldr	r1, [pc, #44]	; (7a58 <hci_encrypt_key_refresh_complete+0xc8>)
    7a2c:	4618      	mov	r0, r3
    7a2e:	f01d fa32 	bl	24e96 <log_from_user>
		bt_conn_disconnect(conn, status);
    7a32:	4629      	mov	r1, r5
    7a34:	4620      	mov	r0, r4
    7a36:	f01f fd9f 	bl	27578 <bt_conn_disconnect>
    7a3a:	e7d4      	b.n	79e6 <hci_encrypt_key_refresh_complete+0x56>
		BT_ERR("Failed to set required security level");
    7a3c:	4806      	ldr	r0, [pc, #24]	; (7a58 <hci_encrypt_key_refresh_complete+0xc8>)
    7a3e:	4619      	mov	r1, r3
    7a40:	f01d fa4f 	bl	24ee2 <log_0>
    7a44:	e7f5      	b.n	7a32 <hci_encrypt_key_refresh_complete+0xa2>
    7a46:	bf00      	nop
    7a48:	0002a7a8 	.word	0x0002a7a8
    7a4c:	0002a6d0 	.word	0x0002a6d0
    7a50:	0002d3ec 	.word	0x0002d3ec
    7a54:	0002d9d3 	.word	0x0002d9d3
    7a58:	0002d458 	.word	0x0002d458

00007a5c <hci_encrypt_change>:
{
    7a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
    7a5e:	6886      	ldr	r6, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    7a60:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	uint8_t status = evt->status;
    7a64:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
    7a66:	4638      	mov	r0, r7
    7a68:	f002 fefe 	bl	a868 <bt_conn_lookup_handle>
	if (!conn) {
    7a6c:	4604      	mov	r4, r0
    7a6e:	b9b8      	cbnz	r0, 7aa0 <hci_encrypt_change+0x44>
    7a70:	f01f f942 	bl	26cf8 <arch_is_user_context>
    7a74:	4b28      	ldr	r3, [pc, #160]	; (7b18 <hci_encrypt_change+0xbc>)
    7a76:	4a29      	ldr	r2, [pc, #164]	; (7b1c <hci_encrypt_change+0xc0>)
    7a78:	1a9b      	subs	r3, r3, r2
    7a7a:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to look up conn with handle %u", handle);
    7a7c:	019b      	lsls	r3, r3, #6
    7a7e:	f043 0301 	orr.w	r3, r3, #1
    7a82:	b130      	cbz	r0, 7a92 <hci_encrypt_change+0x36>
    7a84:	463a      	mov	r2, r7
    7a86:	4618      	mov	r0, r3
    7a88:	4925      	ldr	r1, [pc, #148]	; (7b20 <hci_encrypt_change+0xc4>)
}
    7a8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    7a8e:	f01d ba02 	b.w	24e96 <log_from_user>
    7a92:	461a      	mov	r2, r3
    7a94:	4639      	mov	r1, r7
    7a96:	4822      	ldr	r0, [pc, #136]	; (7b20 <hci_encrypt_change+0xc4>)
}
    7a98:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    7a9c:	f01d ba2e 	b.w	24efc <log_1>
	if (status) {
    7aa0:	b165      	cbz	r5, 7abc <hci_encrypt_change+0x60>
	switch (hci_err) {
    7aa2:	2d29      	cmp	r5, #41	; 0x29
    7aa4:	bf96      	itet	ls
    7aa6:	4b1f      	ldrls	r3, [pc, #124]	; (7b24 <hci_encrypt_change+0xc8>)
	if (status) {
    7aa8:	2208      	movhi	r2, #8
    7aaa:	5d5a      	ldrbls	r2, [r3, r5]
		bt_conn_security_changed(conn, status,
    7aac:	4629      	mov	r1, r5
    7aae:	f002 fceb 	bl	a488 <bt_conn_security_changed>
	bt_conn_unref(conn);
    7ab2:	4620      	mov	r0, r4
}
    7ab4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    7ab8:	f01f bd23 	b.w	27502 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    7abc:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
    7abe:	78f3      	ldrb	r3, [r6, #3]
    7ac0:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
    7ac2:	2a01      	cmp	r2, #1
    7ac4:	d108      	bne.n	7ad8 <hci_encrypt_change+0x7c>
		if (conn->encrypt) {
    7ac6:	b10b      	cbz	r3, 7acc <hci_encrypt_change+0x70>
			bt_smp_update_keys(conn);
    7ac8:	f006 fff8 	bl	eabc <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
    7acc:	4620      	mov	r0, r4
    7ace:	f01f f92f 	bl	26d30 <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
    7ad2:	2800      	cmp	r0, #0
    7ad4:	bf08      	it	eq
    7ad6:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
    7ad8:	4b12      	ldr	r3, [pc, #72]	; (7b24 <hci_encrypt_change+0xc8>)
    7ada:	4629      	mov	r1, r5
    7adc:	5d5a      	ldrb	r2, [r3, r5]
    7ade:	4620      	mov	r0, r4
    7ae0:	f002 fcd2 	bl	a488 <bt_conn_security_changed>
	if (status) {
    7ae4:	2d00      	cmp	r5, #0
    7ae6:	d0e4      	beq.n	7ab2 <hci_encrypt_change+0x56>
    7ae8:	f01f f906 	bl	26cf8 <arch_is_user_context>
    7aec:	4b0a      	ldr	r3, [pc, #40]	; (7b18 <hci_encrypt_change+0xbc>)
    7aee:	4a0b      	ldr	r2, [pc, #44]	; (7b1c <hci_encrypt_change+0xc0>)
    7af0:	1a9b      	subs	r3, r3, r2
    7af2:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to set required security level");
    7af4:	019b      	lsls	r3, r3, #6
    7af6:	f043 0301 	orr.w	r3, r3, #1
    7afa:	b140      	cbz	r0, 7b0e <hci_encrypt_change+0xb2>
    7afc:	490a      	ldr	r1, [pc, #40]	; (7b28 <hci_encrypt_change+0xcc>)
    7afe:	4618      	mov	r0, r3
    7b00:	f01d f9c9 	bl	24e96 <log_from_user>
		bt_conn_disconnect(conn, status);
    7b04:	4629      	mov	r1, r5
    7b06:	4620      	mov	r0, r4
    7b08:	f01f fd36 	bl	27578 <bt_conn_disconnect>
    7b0c:	e7d1      	b.n	7ab2 <hci_encrypt_change+0x56>
		BT_ERR("Failed to set required security level");
    7b0e:	4806      	ldr	r0, [pc, #24]	; (7b28 <hci_encrypt_change+0xcc>)
    7b10:	4619      	mov	r1, r3
    7b12:	f01d f9e6 	bl	24ee2 <log_0>
    7b16:	e7f5      	b.n	7b04 <hci_encrypt_change+0xa8>
    7b18:	0002a7a8 	.word	0x0002a7a8
    7b1c:	0002a6d0 	.word	0x0002a6d0
    7b20:	0002d3ec 	.word	0x0002d3ec
    7b24:	0002d9d3 	.word	0x0002d9d3
    7b28:	0002d458 	.word	0x0002d458

00007b2c <handle_event>:
{
    7b2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7b2e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    7b32:	4606      	mov	r6, r0
    7b34:	460d      	mov	r5, r1
		if (handler->event != event) {
    7b36:	7811      	ldrb	r1, [r2, #0]
    7b38:	42b1      	cmp	r1, r6
    7b3a:	d01d      	beq.n	7b78 <handle_event+0x4c>
	for (i = 0; i < num_handlers; i++) {
    7b3c:	3208      	adds	r2, #8
    7b3e:	4293      	cmp	r3, r2
    7b40:	d1f9      	bne.n	7b36 <handle_event+0xa>
    7b42:	f01f f8d9 	bl	26cf8 <arch_is_user_context>
    7b46:	4c26      	ldr	r4, [pc, #152]	; (7be0 <handle_event+0xb4>)
    7b48:	4b26      	ldr	r3, [pc, #152]	; (7be4 <handle_event+0xb8>)
    7b4a:	89af      	ldrh	r7, [r5, #12]
    7b4c:	1ae4      	subs	r4, r4, r3
    7b4e:	08e4      	lsrs	r4, r4, #3
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    7b50:	01a4      	lsls	r4, r4, #6
    7b52:	f044 0402 	orr.w	r4, r4, #2
    7b56:	4639      	mov	r1, r7
    7b58:	2800      	cmp	r0, #0
    7b5a:	d033      	beq.n	7bc4 <handle_event+0x98>
    7b5c:	68a8      	ldr	r0, [r5, #8]
    7b5e:	f7ff fae5 	bl	712c <bt_hex_real>
    7b62:	f7fc fb0f 	bl	4184 <log_strdup>
    7b66:	4920      	ldr	r1, [pc, #128]	; (7be8 <handle_event+0xbc>)
    7b68:	9000      	str	r0, [sp, #0]
    7b6a:	463b      	mov	r3, r7
    7b6c:	4632      	mov	r2, r6
    7b6e:	4620      	mov	r0, r4
    7b70:	f01d f991 	bl	24e96 <log_from_user>
}
    7b74:	b003      	add	sp, #12
    7b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (buf->len < handler->min_len) {
    7b78:	89a9      	ldrh	r1, [r5, #12]
    7b7a:	7853      	ldrb	r3, [r2, #1]
    7b7c:	4299      	cmp	r1, r3
    7b7e:	d21b      	bcs.n	7bb8 <handle_event+0x8c>
    7b80:	f01f f8ba 	bl	26cf8 <arch_is_user_context>
    7b84:	4c16      	ldr	r4, [pc, #88]	; (7be0 <handle_event+0xb4>)
    7b86:	4b17      	ldr	r3, [pc, #92]	; (7be4 <handle_event+0xb8>)
    7b88:	89a9      	ldrh	r1, [r5, #12]
    7b8a:	1ae4      	subs	r4, r4, r3
    7b8c:	08e4      	lsrs	r4, r4, #3
			BT_ERR("Too small (%u bytes) event 0x%02x",
    7b8e:	01a4      	lsls	r4, r4, #6
    7b90:	f044 0401 	orr.w	r4, r4, #1
    7b94:	b140      	cbz	r0, 7ba8 <handle_event+0x7c>
    7b96:	460a      	mov	r2, r1
    7b98:	4914      	ldr	r1, [pc, #80]	; (7bec <handle_event+0xc0>)
    7b9a:	4633      	mov	r3, r6
    7b9c:	4620      	mov	r0, r4
}
    7b9e:	b003      	add	sp, #12
    7ba0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
    7ba4:	f01d b977 	b.w	24e96 <log_from_user>
    7ba8:	4810      	ldr	r0, [pc, #64]	; (7bec <handle_event+0xc0>)
    7baa:	4623      	mov	r3, r4
    7bac:	4632      	mov	r2, r6
}
    7bae:	b003      	add	sp, #12
    7bb0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
    7bb4:	f01d b9b6 	b.w	24f24 <log_2>
		handler->handler(buf);
    7bb8:	6853      	ldr	r3, [r2, #4]
    7bba:	4628      	mov	r0, r5
}
    7bbc:	b003      	add	sp, #12
    7bbe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		handler->handler(buf);
    7bc2:	4718      	bx	r3
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    7bc4:	68a8      	ldr	r0, [r5, #8]
    7bc6:	f7ff fab1 	bl	712c <bt_hex_real>
    7bca:	f7fc fadb 	bl	4184 <log_strdup>
    7bce:	f8ad 4000 	strh.w	r4, [sp]
    7bd2:	4603      	mov	r3, r0
    7bd4:	463a      	mov	r2, r7
    7bd6:	4804      	ldr	r0, [pc, #16]	; (7be8 <handle_event+0xbc>)
    7bd8:	4631      	mov	r1, r6
    7bda:	f01d f9bc 	bl	24f56 <log_3>
    7bde:	e7c9      	b.n	7b74 <handle_event+0x48>
    7be0:	0002a7a8 	.word	0x0002a7a8
    7be4:	0002a6d0 	.word	0x0002a6d0
    7be8:	0002d4a0 	.word	0x0002d4a0
    7bec:	0002d47e 	.word	0x0002d47e

00007bf0 <hci_le_meta_event>:
{
    7bf0:	b510      	push	{r4, lr}
    7bf2:	2101      	movs	r1, #1
    7bf4:	4604      	mov	r4, r0
    7bf6:	3008      	adds	r0, #8
    7bf8:	f021 f87c 	bl	28cf4 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    7bfc:	4621      	mov	r1, r4
    7bfe:	4a03      	ldr	r2, [pc, #12]	; (7c0c <hci_le_meta_event+0x1c>)
    7c00:	7800      	ldrb	r0, [r0, #0]
}
    7c02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    7c06:	230a      	movs	r3, #10
    7c08:	f7ff bf90 	b.w	7b2c <handle_event>
    7c0c:	0002acf8 	.word	0x0002acf8

00007c10 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    7c10:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    7c12:	4c0c      	ldr	r4, [pc, #48]	; (7c44 <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    7c14:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    7c16:	2205      	movs	r2, #5
    7c18:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    7c1c:	f002 ff94 	bl	ab48 <bt_conn_lookup_state_le>
		if (!conn) {
    7c20:	b970      	cbnz	r0, 7c40 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
    7c22:	4b09      	ldr	r3, [pc, #36]	; (7c48 <find_pending_connect.part.0+0x38>)
    7c24:	6818      	ldr	r0, [r3, #0]
    7c26:	889a      	ldrh	r2, [r3, #4]
    7c28:	9000      	str	r0, [sp, #0]
    7c2a:	799b      	ldrb	r3, [r3, #6]
    7c2c:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    7c30:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
						       BT_ADDR_LE_NONE,
    7c34:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    7c38:	2204      	movs	r2, #4
    7c3a:	4669      	mov	r1, sp
    7c3c:	f002 ff84 	bl	ab48 <bt_conn_lookup_state_le>
}
    7c40:	b002      	add	sp, #8
    7c42:	bd10      	pop	{r4, pc}
    7c44:	20007600 	.word	0x20007600
    7c48:	0002a930 	.word	0x0002a930

00007c4c <hci_cmd_done>:
{
    7c4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7c50:	4607      	mov	r7, r0
    7c52:	b087      	sub	sp, #28
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    7c54:	7990      	ldrb	r0, [r2, #6]
    7c56:	4e54      	ldr	r6, [pc, #336]	; (7da8 <hci_cmd_done+0x15c>)
{
    7c58:	4688      	mov	r8, r1
    7c5a:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    7c5c:	f014 fd10 	bl	1c680 <net_buf_pool_get>
    7c60:	4286      	cmp	r6, r0
    7c62:	d026      	beq.n	7cb2 <hci_cmd_done+0x66>
    7c64:	f01f f848 	bl	26cf8 <arch_is_user_context>
    7c68:	4d50      	ldr	r5, [pc, #320]	; (7dac <hci_cmd_done+0x160>)
    7c6a:	4b51      	ldr	r3, [pc, #324]	; (7db0 <hci_cmd_done+0x164>)
    7c6c:	79a4      	ldrb	r4, [r4, #6]
    7c6e:	1aed      	subs	r5, r5, r3
    7c70:	08ed      	lsrs	r5, r5, #3
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    7c72:	01ad      	lsls	r5, r5, #6
    7c74:	f045 0502 	orr.w	r5, r5, #2
    7c78:	b168      	cbz	r0, 7c96 <hci_cmd_done+0x4a>
    7c7a:	4620      	mov	r0, r4
    7c7c:	f014 fd00 	bl	1c680 <net_buf_pool_get>
    7c80:	494c      	ldr	r1, [pc, #304]	; (7db4 <hci_cmd_done+0x168>)
    7c82:	e9cd 0600 	strd	r0, r6, [sp]
    7c86:	4623      	mov	r3, r4
    7c88:	463a      	mov	r2, r7
    7c8a:	4628      	mov	r0, r5
    7c8c:	f01d f903 	bl	24e96 <log_from_user>
}
    7c90:	b007      	add	sp, #28
    7c92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    7c96:	4620      	mov	r0, r4
    7c98:	e9cd 7402 	strd	r7, r4, [sp, #8]
    7c9c:	f014 fcf0 	bl	1c680 <net_buf_pool_get>
    7ca0:	462b      	mov	r3, r5
    7ca2:	e9cd 0604 	strd	r0, r6, [sp, #16]
    7ca6:	2204      	movs	r2, #4
    7ca8:	4842      	ldr	r0, [pc, #264]	; (7db4 <hci_cmd_done+0x168>)
    7caa:	a902      	add	r1, sp, #8
    7cac:	f01d f96f 	bl	24f8e <log_n>
		return;
    7cb0:	e7ee      	b.n	7c90 <hci_cmd_done+0x44>
	if (cmd(buf)->opcode != opcode) {
    7cb2:	4620      	mov	r0, r4
    7cb4:	f014 fcec 	bl	1c690 <net_buf_id>
    7cb8:	4d3f      	ldr	r5, [pc, #252]	; (7db8 <hci_cmd_done+0x16c>)
    7cba:	f04f 090c 	mov.w	r9, #12
    7cbe:	fb09 5300 	mla	r3, r9, r0, r5
    7cc2:	885b      	ldrh	r3, [r3, #2]
    7cc4:	42bb      	cmp	r3, r7
    7cc6:	d016      	beq.n	7cf6 <hci_cmd_done+0xaa>
    7cc8:	f01f f816 	bl	26cf8 <arch_is_user_context>
    7ccc:	4e37      	ldr	r6, [pc, #220]	; (7dac <hci_cmd_done+0x160>)
    7cce:	4b38      	ldr	r3, [pc, #224]	; (7db0 <hci_cmd_done+0x164>)
    7cd0:	1af6      	subs	r6, r6, r3
    7cd2:	08f6      	lsrs	r6, r6, #3
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    7cd4:	01b6      	lsls	r6, r6, #6
    7cd6:	f046 0602 	orr.w	r6, r6, #2
    7cda:	2800      	cmp	r0, #0
    7cdc:	d04a      	beq.n	7d74 <hci_cmd_done+0x128>
    7cde:	4620      	mov	r0, r4
    7ce0:	f014 fcd6 	bl	1c690 <net_buf_id>
    7ce4:	fb09 5900 	mla	r9, r9, r0, r5
    7ce8:	4934      	ldr	r1, [pc, #208]	; (7dbc <hci_cmd_done+0x170>)
    7cea:	f8b9 3002 	ldrh.w	r3, [r9, #2]
    7cee:	463a      	mov	r2, r7
    7cf0:	4630      	mov	r0, r6
    7cf2:	f01d f8d0 	bl	24e96 <log_from_user>
	if (cmd(buf)->state && !status) {
    7cf6:	4620      	mov	r0, r4
    7cf8:	f014 fcca 	bl	1c690 <net_buf_id>
    7cfc:	260c      	movs	r6, #12
    7cfe:	fb06 5000 	mla	r0, r6, r0, r5
    7d02:	6843      	ldr	r3, [r0, #4]
    7d04:	b1f3      	cbz	r3, 7d44 <hci_cmd_done+0xf8>
    7d06:	f1b8 0f00 	cmp.w	r8, #0
    7d0a:	d11b      	bne.n	7d44 <hci_cmd_done+0xf8>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    7d0c:	4620      	mov	r0, r4
    7d0e:	f014 fcbf 	bl	1c690 <net_buf_id>
    7d12:	fb06 5000 	mla	r0, r6, r0, r5
	atomic_val_t mask = ATOMIC_MASK(bit);
    7d16:	2201      	movs	r2, #1
    7d18:	6840      	ldr	r0, [r0, #4]
    7d1a:	e9d0 3100 	ldrd	r3, r1, [r0]
	if (val) {
    7d1e:	7a00      	ldrb	r0, [r0, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
    7d20:	f001 061f 	and.w	r6, r1, #31
    7d24:	40b2      	lsls	r2, r6
	if (val) {
    7d26:	0949      	lsrs	r1, r1, #5
    7d28:	b388      	cbz	r0, 7d8e <hci_cmd_done+0x142>
    7d2a:	f3bf 8f5b 	dmb	ish
    7d2e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    7d32:	e853 1f00 	ldrex	r1, [r3]
    7d36:	4311      	orrs	r1, r2
    7d38:	e843 1000 	strex	r0, r1, [r3]
    7d3c:	2800      	cmp	r0, #0
    7d3e:	d1f8      	bne.n	7d32 <hci_cmd_done+0xe6>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7d40:	f3bf 8f5b 	dmb	ish
	if (cmd(buf)->sync) {
    7d44:	4620      	mov	r0, r4
    7d46:	f014 fca3 	bl	1c690 <net_buf_id>
    7d4a:	260c      	movs	r6, #12
    7d4c:	fb06 5000 	mla	r0, r6, r0, r5
    7d50:	6883      	ldr	r3, [r0, #8]
    7d52:	2b00      	cmp	r3, #0
    7d54:	d09c      	beq.n	7c90 <hci_cmd_done+0x44>
		cmd(buf)->status = status;
    7d56:	4620      	mov	r0, r4
    7d58:	f014 fc9a 	bl	1c690 <net_buf_id>
    7d5c:	4370      	muls	r0, r6
    7d5e:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    7d62:	4620      	mov	r0, r4
    7d64:	f014 fc94 	bl	1c690 <net_buf_id>
    7d68:	fb06 5500 	mla	r5, r6, r0, r5
    7d6c:	68a8      	ldr	r0, [r5, #8]
    7d6e:	f01f f817 	bl	26da0 <k_sem_give>
    7d72:	e78d      	b.n	7c90 <hci_cmd_done+0x44>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    7d74:	4620      	mov	r0, r4
    7d76:	f014 fc8b 	bl	1c690 <net_buf_id>
    7d7a:	fb09 5900 	mla	r9, r9, r0, r5
    7d7e:	4633      	mov	r3, r6
    7d80:	f8b9 2002 	ldrh.w	r2, [r9, #2]
    7d84:	480d      	ldr	r0, [pc, #52]	; (7dbc <hci_cmd_done+0x170>)
    7d86:	4639      	mov	r1, r7
    7d88:	f01d f8cc 	bl	24f24 <log_2>
    7d8c:	e7b3      	b.n	7cf6 <hci_cmd_done+0xaa>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    7d8e:	43d2      	mvns	r2, r2
    7d90:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    7d94:	f3bf 8f5b 	dmb	ish
    7d98:	e853 1f00 	ldrex	r1, [r3]
    7d9c:	4011      	ands	r1, r2
    7d9e:	e843 1000 	strex	r0, r1, [r3]
    7da2:	2800      	cmp	r0, #0
    7da4:	d0cc      	beq.n	7d40 <hci_cmd_done+0xf4>
    7da6:	e7f7      	b.n	7d98 <hci_cmd_done+0x14c>
    7da8:	20007f68 	.word	0x20007f68
    7dac:	0002a7a8 	.word	0x0002a7a8
    7db0:	0002a6d0 	.word	0x0002a6d0
    7db4:	0002d4c2 	.word	0x0002d4c2
    7db8:	20000e08 	.word	0x20000e08
    7dbc:	0002d4f7 	.word	0x0002d4f7

00007dc0 <hci_cmd_status>:
{
    7dc0:	b538      	push	{r3, r4, r5, lr}
    7dc2:	2104      	movs	r1, #4
    7dc4:	4604      	mov	r4, r0
    7dc6:	3008      	adds	r0, #8
    7dc8:	f020 ff94 	bl	28cf4 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    7dcc:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    7dce:	7801      	ldrb	r1, [r0, #0]
    7dd0:	8840      	ldrh	r0, [r0, #2]
    7dd2:	4622      	mov	r2, r4
    7dd4:	f7ff ff3a 	bl	7c4c <hci_cmd_done>
	if (ncmd) {
    7dd8:	b125      	cbz	r5, 7de4 <hci_cmd_status+0x24>
}
    7dda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		k_sem_give(&bt_dev.ncmd_sem);
    7dde:	4802      	ldr	r0, [pc, #8]	; (7de8 <hci_cmd_status+0x28>)
    7de0:	f01e bfde 	b.w	26da0 <k_sem_give>
}
    7de4:	bd38      	pop	{r3, r4, r5, pc}
    7de6:	bf00      	nop
    7de8:	200076f0 	.word	0x200076f0

00007dec <hci_cmd_complete>:
{
    7dec:	b538      	push	{r3, r4, r5, lr}
    7dee:	2103      	movs	r1, #3
    7df0:	4604      	mov	r4, r0
    7df2:	3008      	adds	r0, #8
    7df4:	f020 ff7e 	bl	28cf4 <net_buf_simple_pull_mem>
	status = buf->data[0];
    7df8:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    7dfa:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    7dfc:	7819      	ldrb	r1, [r3, #0]
    7dfe:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    7e02:	4622      	mov	r2, r4
    7e04:	f7ff ff22 	bl	7c4c <hci_cmd_done>
	if (ncmd) {
    7e08:	b125      	cbz	r5, 7e14 <hci_cmd_complete+0x28>
}
    7e0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		k_sem_give(&bt_dev.ncmd_sem);
    7e0e:	4802      	ldr	r0, [pc, #8]	; (7e18 <hci_cmd_complete+0x2c>)
    7e10:	f01e bfc6 	b.w	26da0 <k_sem_give>
}
    7e14:	bd38      	pop	{r3, r4, r5, pc}
    7e16:	bf00      	nop
    7e18:	200076f0 	.word	0x200076f0

00007e1c <hci_tx_thread>:
{
    7e1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7e20:	4d6c      	ldr	r5, [pc, #432]	; (7fd4 <hci_tx_thread+0x1b8>)
    7e22:	4b6d      	ldr	r3, [pc, #436]	; (7fd8 <hci_tx_thread+0x1bc>)
		events[0].state = K_POLL_STATE_NOT_READY;
    7e24:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 8004 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4>
		BT_ASSERT(err == 0);
    7e28:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 8008 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8>
    7e2c:	1aed      	subs	r5, r5, r3
    7e2e:	08ed      	lsrs	r5, r5, #3
		events[0].state = K_POLL_STATE_NOT_READY;
    7e30:	f8d9 300c 	ldr.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    7e34:	4869      	ldr	r0, [pc, #420]	; (7fdc <hci_tx_thread+0x1c0>)
		events[0].state = K_POLL_STATE_NOT_READY;
    7e36:	f36f 3310 	bfc	r3, #12, #5
    7e3a:	f8c9 300c 	str.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    7e3e:	f002 fca7 	bl	a790 <bt_conn_prepare_events>
    7e42:	1c47      	adds	r7, r0, #1
	ret = arch_is_user_context();
    7e44:	f01e ff58 	bl	26cf8 <arch_is_user_context>

extern int z_impl_k_poll(struct k_poll_event * events, int num_events, k_timeout_t timeout);
static inline int k_poll(struct k_poll_event * events, int num_events, k_timeout_t timeout)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
    7e48:	b310      	cbz	r0, 7e90 <hci_tx_thread+0x74>
	register uint32_t r2 __asm__("r2") = arg3;
    7e4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	register uint32_t ret __asm__("r0") = arg1;
    7e4e:	4648      	mov	r0, r9
	register uint32_t r1 __asm__("r1") = arg2;
    7e50:	4639      	mov	r1, r7
	register uint32_t r3 __asm__("r3") = arg4;
    7e52:	4613      	mov	r3, r2
	register uint32_t r6 __asm__("r6") = call_id;
    7e54:	2692      	movs	r6, #146	; 0x92
	__asm__ volatile("svc %[svid]\n"
    7e56:	df03      	svc	3
		BT_ASSERT(err == 0);
    7e58:	b160      	cbz	r0, 7e74 <hci_tx_thread+0x58>
    7e5a:	4961      	ldr	r1, [pc, #388]	; (7fe0 <hci_tx_thread+0x1c4>)
    7e5c:	4861      	ldr	r0, [pc, #388]	; (7fe4 <hci_tx_thread+0x1c8>)
    7e5e:	f640 1328 	movw	r3, #2344	; 0x928
    7e62:	4652      	mov	r2, sl
    7e64:	f01c fbbe 	bl	245e4 <printk>
    7e68:	4040      	eors	r0, r0
    7e6a:	f380 8811 	msr	BASEPRI, r0
    7e6e:	f04f 0003 	mov.w	r0, #3
    7e72:	df02      	svc	2
{
    7e74:	f8df 818c 	ldr.w	r8, [pc, #396]	; 8004 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    7e78:	f8df b190 	ldr.w	fp, [pc, #400]	; 800c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc>
	k_sem_take(&bt_dev.ncmd_sem, K_FOREVER);
    7e7c:	4e5a      	ldr	r6, [pc, #360]	; (7fe8 <hci_tx_thread+0x1cc>)
	for (; count; ev++, count--) {
    7e7e:	b987      	cbnz	r7, 7ea2 <hci_tx_thread+0x86>
    7e80:	f01e ff3a 	bl	26cf8 <arch_is_user_context>
	if (z_syscall_trap()) {
    7e84:	2800      	cmp	r0, #0
    7e86:	f000 80a2 	beq.w	7fce <hci_tx_thread+0x1b2>
	register uint32_t r6 __asm__("r6") = call_id;
    7e8a:	26c4      	movs	r6, #196	; 0xc4
	__asm__ volatile("svc %[svid]\n"
    7e8c:	df03      	svc	3
	return ret;
    7e8e:	e7cf      	b.n	7e30 <hci_tx_thread+0x14>
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    7e90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7e94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7e98:	4639      	mov	r1, r7
    7e9a:	4648      	mov	r0, r9
    7e9c:	f01b fbc4 	bl	23628 <z_impl_k_poll>
    7ea0:	e7da      	b.n	7e58 <hci_tx_thread+0x3c>
		switch (ev->state) {
    7ea2:	f8d8 300c 	ldr.w	r3, [r8, #12]
    7ea6:	f3c3 3304 	ubfx	r3, r3, #12, #5
    7eaa:	2b01      	cmp	r3, #1
    7eac:	d963      	bls.n	7f76 <hci_tx_thread+0x15a>
    7eae:	2b04      	cmp	r3, #4
    7eb0:	d177      	bne.n	7fa2 <hci_tx_thread+0x186>
			if (ev->tag == BT_EVENT_CMD_TX) {
    7eb2:	f898 300c 	ldrb.w	r3, [r8, #12]
    7eb6:	2b00      	cmp	r3, #0
    7eb8:	d16b      	bne.n	7f92 <hci_tx_thread+0x176>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    7eba:	484c      	ldr	r0, [pc, #304]	; (7fec <hci_tx_thread+0x1d0>)
    7ebc:	2200      	movs	r2, #0
    7ebe:	2300      	movs	r3, #0
    7ec0:	f020 fe9f 	bl	28c02 <net_buf_get>
	BT_ASSERT(buf);
    7ec4:	4604      	mov	r4, r0
    7ec6:	b960      	cbnz	r0, 7ee2 <hci_tx_thread+0xc6>
    7ec8:	4949      	ldr	r1, [pc, #292]	; (7ff0 <hci_tx_thread+0x1d4>)
    7eca:	4846      	ldr	r0, [pc, #280]	; (7fe4 <hci_tx_thread+0x1c8>)
    7ecc:	f640 03c5 	movw	r3, #2245	; 0x8c5
    7ed0:	4652      	mov	r2, sl
    7ed2:	f01c fb87 	bl	245e4 <printk>
    7ed6:	4040      	eors	r0, r0
    7ed8:	f380 8811 	msr	BASEPRI, r0
    7edc:	f04f 0003 	mov.w	r0, #3
    7ee0:	df02      	svc	2
	k_sem_take(&bt_dev.ncmd_sem, K_FOREVER);
    7ee2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7ee6:	4843      	ldr	r0, [pc, #268]	; (7ff4 <hci_tx_thread+0x1d8>)
    7ee8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7eec:	f01e ff38 	bl	26d60 <k_sem_take>
	if (bt_dev.sent_cmd) {
    7ef0:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
    7ef4:	b18b      	cbz	r3, 7f1a <hci_tx_thread+0xfe>
	return arch_is_user_context();
    7ef6:	f01e feff 	bl	26cf8 <arch_is_user_context>
		BT_ERR("Uncleared pending sent_cmd");
    7efa:	01ab      	lsls	r3, r5, #6
    7efc:	f043 0301 	orr.w	r3, r3, #1
    7f00:	2800      	cmp	r0, #0
    7f02:	d03c      	beq.n	7f7e <hci_tx_thread+0x162>
    7f04:	493c      	ldr	r1, [pc, #240]	; (7ff8 <hci_tx_thread+0x1dc>)
    7f06:	4618      	mov	r0, r3
    7f08:	f01c ffc5 	bl	24e96 <log_from_user>
		net_buf_unref(bt_dev.sent_cmd);
    7f0c:	f8d6 0108 	ldr.w	r0, [r6, #264]	; 0x108
    7f10:	f014 fc72 	bl	1c7f8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    7f14:	2300      	movs	r3, #0
    7f16:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
	bt_dev.sent_cmd = net_buf_ref(buf);
    7f1a:	4620      	mov	r0, r4
    7f1c:	f020 fe9c 	bl	28c58 <net_buf_ref>
    7f20:	f8c6 0108 	str.w	r0, [r6, #264]	; 0x108
	BT_DBG("buf %p len %u type %u", buf, buf->len, bt_buf_get_type(buf));

	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
    7f24:	4620      	mov	r0, r4
    7f26:	f7ff fac7 	bl	74b8 <bt_hci_ecc_send>
	if (err) {
    7f2a:	4601      	mov	r1, r0
    7f2c:	b318      	cbz	r0, 7f76 <hci_tx_thread+0x15a>
    7f2e:	f01e fee3 	bl	26cf8 <arch_is_user_context>
		BT_ERR("Unable to send to driver (err %d)", err);
    7f32:	01ab      	lsls	r3, r5, #6
    7f34:	f043 0301 	orr.w	r3, r3, #1
    7f38:	b330      	cbz	r0, 7f88 <hci_tx_thread+0x16c>
    7f3a:	460a      	mov	r2, r1
    7f3c:	4618      	mov	r0, r3
    7f3e:	492f      	ldr	r1, [pc, #188]	; (7ffc <hci_tx_thread+0x1e0>)
    7f40:	f01c ffa9 	bl	24e96 <log_from_user>
		k_sem_give(&bt_dev.ncmd_sem);
    7f44:	482b      	ldr	r0, [pc, #172]	; (7ff4 <hci_tx_thread+0x1d8>)
    7f46:	f01e ff2b 	bl	26da0 <k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    7f4a:	4620      	mov	r0, r4
    7f4c:	f014 fba0 	bl	1c690 <net_buf_id>
    7f50:	4b2b      	ldr	r3, [pc, #172]	; (8000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC>)
    7f52:	220c      	movs	r2, #12
    7f54:	fb02 3000 	mla	r0, r2, r0, r3
    7f58:	211f      	movs	r1, #31
    7f5a:	8840      	ldrh	r0, [r0, #2]
    7f5c:	4622      	mov	r2, r4
    7f5e:	f7ff fe75 	bl	7c4c <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    7f62:	f8d6 0108 	ldr.w	r0, [r6, #264]	; 0x108
    7f66:	f014 fc47 	bl	1c7f8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    7f6a:	2300      	movs	r3, #0
		net_buf_unref(buf);
    7f6c:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
    7f6e:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
		net_buf_unref(buf);
    7f72:	f014 fc41 	bl	1c7f8 <net_buf_unref>
	for (; count; ev++, count--) {
    7f76:	f108 0814 	add.w	r8, r8, #20
    7f7a:	3f01      	subs	r7, #1
    7f7c:	e77f      	b.n	7e7e <hci_tx_thread+0x62>
		BT_ERR("Uncleared pending sent_cmd");
    7f7e:	481e      	ldr	r0, [pc, #120]	; (7ff8 <hci_tx_thread+0x1dc>)
    7f80:	4619      	mov	r1, r3
    7f82:	f01c ffae 	bl	24ee2 <log_0>
    7f86:	e7c1      	b.n	7f0c <hci_tx_thread+0xf0>
		BT_ERR("Unable to send to driver (err %d)", err);
    7f88:	481c      	ldr	r0, [pc, #112]	; (7ffc <hci_tx_thread+0x1e0>)
    7f8a:	461a      	mov	r2, r3
    7f8c:	f01c ffb6 	bl	24efc <log_1>
    7f90:	e7d8      	b.n	7f44 <hci_tx_thread+0x128>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    7f92:	2b01      	cmp	r3, #1
    7f94:	d1ef      	bne.n	7f76 <hci_tx_thread+0x15a>
					conn = CONTAINER_OF(ev->fifo,
    7f96:	f8d8 0010 	ldr.w	r0, [r8, #16]
					bt_conn_process_tx(conn);
    7f9a:	3838      	subs	r0, #56	; 0x38
    7f9c:	f002 fede 	bl	ad5c <bt_conn_process_tx>
    7fa0:	e7e9      	b.n	7f76 <hci_tx_thread+0x15a>
    7fa2:	f01e fea9 	bl	26cf8 <arch_is_user_context>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    7fa6:	01ab      	lsls	r3, r5, #6
    7fa8:	f8d8 100c 	ldr.w	r1, [r8, #12]
    7fac:	f043 0302 	orr.w	r3, r3, #2
    7fb0:	b130      	cbz	r0, 7fc0 <hci_tx_thread+0x1a4>
    7fb2:	f3c1 3204 	ubfx	r2, r1, #12, #5
    7fb6:	4618      	mov	r0, r3
    7fb8:	4659      	mov	r1, fp
    7fba:	f01c ff6c 	bl	24e96 <log_from_user>
    7fbe:	e7da      	b.n	7f76 <hci_tx_thread+0x15a>
    7fc0:	461a      	mov	r2, r3
    7fc2:	f3c1 3104 	ubfx	r1, r1, #12, #5
    7fc6:	4658      	mov	r0, fp
    7fc8:	f01c ff98 	bl	24efc <log_1>
    7fcc:	e7d3      	b.n	7f76 <hci_tx_thread+0x15a>
	z_impl_k_yield();
    7fce:	f019 fd99 	bl	21b04 <z_impl_k_yield>
	while (1) {
    7fd2:	e72d      	b.n	7e30 <hci_tx_thread+0x14>
    7fd4:	0002a7a8 	.word	0x0002a7a8
    7fd8:	0002a6d0 	.word	0x0002a6d0
    7fdc:	200077f0 	.word	0x200077f0
    7fe0:	0002d55e 	.word	0x0002d55e
    7fe4:	0002d567 	.word	0x0002d567
    7fe8:	20007600 	.word	0x20007600
    7fec:	2000770c 	.word	0x2000770c
    7ff0:	0002d2a9 	.word	0x0002d2a9
    7ff4:	200076f0 	.word	0x200076f0
    7ff8:	0002d584 	.word	0x0002d584
    7ffc:	0002d59f 	.word	0x0002d59f
    8000:	20000e08 	.word	0x20000e08
    8004:	200077dc 	.word	0x200077dc
    8008:	0002d52a 	.word	0x0002d52a
    800c:	0002d5c1 	.word	0x0002d5c1

00008010 <hci_num_completed_packets>:
{
    8010:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8014:	4d43      	ldr	r5, [pc, #268]	; (8124 <hci_num_completed_packets+0x114>)
    8016:	4b44      	ldr	r3, [pc, #272]	; (8128 <hci_num_completed_packets+0x118>)
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    8018:	f8d0 8008 	ldr.w	r8, [r0, #8]
	return k_work_submit_to_queue(&k_sys_work_q, work);
    801c:	f8df a114 	ldr.w	sl, [pc, #276]	; 8134 <hci_num_completed_packets+0x124>
    8020:	1aed      	subs	r5, r5, r3
	for (i = 0; i < evt->num_handles; i++) {
    8022:	2600      	movs	r6, #0
    8024:	08ed      	lsrs	r5, r5, #3
			tx->pending_no_cb = 0U;
    8026:	46b1      	mov	r9, r6
	for (i = 0; i < evt->num_handles; i++) {
    8028:	f898 3000 	ldrb.w	r3, [r8]
    802c:	429e      	cmp	r6, r3
    802e:	db01      	blt.n	8034 <hci_num_completed_packets+0x24>
}
    8030:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    8034:	eb08 0386 	add.w	r3, r8, r6, lsl #2
    8038:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    803c:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
    8040:	4658      	mov	r0, fp
    8042:	f002 fc11 	bl	a868 <bt_conn_lookup_handle>
		if (!conn) {
    8046:	4604      	mov	r4, r0
    8048:	b1d8      	cbz	r0, 8082 <hci_num_completed_packets+0x72>
			k_work_submit(&conn->tx_complete_work);
    804a:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
    804e:	2f00      	cmp	r7, #0
    8050:	d041      	beq.n	80d6 <hci_num_completed_packets+0xc6>
	__asm__ volatile(
    8052:	f04f 0320 	mov.w	r3, #32
    8056:	f3ef 8211 	mrs	r2, BASEPRI
    805a:	f383 8811 	msr	BASEPRI, r3
    805e:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    8062:	69e3      	ldr	r3, [r4, #28]
    8064:	b303      	cbz	r3, 80a8 <hci_num_completed_packets+0x98>
				conn->pending_no_cb--;
    8066:	3b01      	subs	r3, #1
    8068:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    806a:	f382 8811 	msr	BASEPRI, r2
    806e:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    8072:	4620      	mov	r0, r4
    8074:	f002 f992 	bl	a39c <bt_conn_get_pkts>
    8078:	3f01      	subs	r7, #1
    807a:	f01e fe91 	bl	26da0 <k_sem_give>
    807e:	b2bf      	uxth	r7, r7
    8080:	e7e5      	b.n	804e <hci_num_completed_packets+0x3e>
    8082:	f01e fe39 	bl	26cf8 <arch_is_user_context>
			BT_ERR("No connection for handle %u", handle);
    8086:	01ab      	lsls	r3, r5, #6
    8088:	f043 0301 	orr.w	r3, r3, #1
    808c:	b130      	cbz	r0, 809c <hci_num_completed_packets+0x8c>
    808e:	4927      	ldr	r1, [pc, #156]	; (812c <hci_num_completed_packets+0x11c>)
    8090:	465a      	mov	r2, fp
    8092:	4618      	mov	r0, r3
    8094:	f01c feff 	bl	24e96 <log_from_user>
	for (i = 0; i < evt->num_handles; i++) {
    8098:	3601      	adds	r6, #1
    809a:	e7c5      	b.n	8028 <hci_num_completed_packets+0x18>
			BT_ERR("No connection for handle %u", handle);
    809c:	4823      	ldr	r0, [pc, #140]	; (812c <hci_num_completed_packets+0x11c>)
    809e:	461a      	mov	r2, r3
    80a0:	4659      	mov	r1, fp
    80a2:	f01c ff2b 	bl	24efc <log_1>
			continue;
    80a6:	e7f7      	b.n	8098 <hci_num_completed_packets+0x88>
Z_GENLIST_IS_EMPTY(slist)
    80a8:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    80aa:	b12b      	cbz	r3, 80b8 <hci_num_completed_packets+0xa8>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    80ac:	69a1      	ldr	r1, [r4, #24]
    80ae:	6818      	ldr	r0, [r3, #0]
	list->head = node;
    80b0:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    80b2:	428b      	cmp	r3, r1
	list->tail = node;
    80b4:	bf08      	it	eq
    80b6:	61a0      	streq	r0, [r4, #24]
    80b8:	f382 8811 	msr	BASEPRI, r2
    80bc:	f3bf 8f6f 	isb	sy
			if (!node) {
    80c0:	b993      	cbnz	r3, 80e8 <hci_num_completed_packets+0xd8>
    80c2:	f01e fe19 	bl	26cf8 <arch_is_user_context>
				BT_ERR("packets count mismatch");
    80c6:	01ab      	lsls	r3, r5, #6
    80c8:	f043 0301 	orr.w	r3, r3, #1
    80cc:	b138      	cbz	r0, 80de <hci_num_completed_packets+0xce>
    80ce:	4918      	ldr	r1, [pc, #96]	; (8130 <hci_num_completed_packets+0x120>)
    80d0:	4618      	mov	r0, r3
    80d2:	f01c fee0 	bl	24e96 <log_from_user>
		bt_conn_unref(conn);
    80d6:	4620      	mov	r0, r4
    80d8:	f01f fa13 	bl	27502 <bt_conn_unref>
    80dc:	e7dc      	b.n	8098 <hci_num_completed_packets+0x88>
				BT_ERR("packets count mismatch");
    80de:	4814      	ldr	r0, [pc, #80]	; (8130 <hci_num_completed_packets+0x120>)
    80e0:	4619      	mov	r1, r3
    80e2:	f01c fefe 	bl	24ee2 <log_0>
    80e6:	e7f6      	b.n	80d6 <hci_num_completed_packets+0xc6>
	__asm__ volatile(
    80e8:	f04f 0220 	mov.w	r2, #32
    80ec:	f3ef 8111 	mrs	r1, BASEPRI
    80f0:	f382 8811 	msr	BASEPRI, r2
    80f4:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    80f8:	68da      	ldr	r2, [r3, #12]
    80fa:	61e2      	str	r2, [r4, #28]
	parent->next = child;
    80fc:	f8c3 9000 	str.w	r9, [r3]
Z_GENLIST_APPEND(slist, snode)
    8100:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    8102:	f8c3 900c 	str.w	r9, [r3, #12]
    8106:	b952      	cbnz	r2, 811e <hci_num_completed_packets+0x10e>
	list->head = node;
    8108:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    810c:	f381 8811 	msr	BASEPRI, r1
    8110:	f3bf 8f6f 	isb	sy
    8114:	4659      	mov	r1, fp
    8116:	4650      	mov	r0, sl
    8118:	f021 fd6f 	bl	29bfa <k_work_submit_to_queue>
    811c:	e7a9      	b.n	8072 <hci_num_completed_packets+0x62>
	parent->next = child;
    811e:	6013      	str	r3, [r2, #0]
	list->tail = node;
    8120:	6263      	str	r3, [r4, #36]	; 0x24
}
    8122:	e7f3      	b.n	810c <hci_num_completed_packets+0xfc>
    8124:	0002a7a8 	.word	0x0002a7a8
    8128:	0002a6d0 	.word	0x0002a6d0
    812c:	0002d5e2 	.word	0x0002d5e2
    8130:	0002d5fe 	.word	0x0002d5fe
    8134:	20000ac0 	.word	0x20000ac0

00008138 <le_conn_update_complete>:
{
    8138:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    813a:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    813c:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    8140:	4630      	mov	r0, r6
    8142:	f002 fb91 	bl	a868 <bt_conn_lookup_handle>
	if (!conn) {
    8146:	4604      	mov	r4, r0
    8148:	b9b0      	cbnz	r0, 8178 <le_conn_update_complete+0x40>
    814a:	f01e fdd5 	bl	26cf8 <arch_is_user_context>
    814e:	4b26      	ldr	r3, [pc, #152]	; (81e8 <le_conn_update_complete+0xb0>)
    8150:	4a26      	ldr	r2, [pc, #152]	; (81ec <le_conn_update_complete+0xb4>)
    8152:	1a9b      	subs	r3, r3, r2
    8154:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8156:	019b      	lsls	r3, r3, #6
    8158:	f043 0301 	orr.w	r3, r3, #1
    815c:	b130      	cbz	r0, 816c <le_conn_update_complete+0x34>
    815e:	4924      	ldr	r1, [pc, #144]	; (81f0 <le_conn_update_complete+0xb8>)
    8160:	4632      	mov	r2, r6
    8162:	4618      	mov	r0, r3
    8164:	f01c fe97 	bl	24e96 <log_from_user>
}
    8168:	b002      	add	sp, #8
    816a:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    816c:	4820      	ldr	r0, [pc, #128]	; (81f0 <le_conn_update_complete+0xb8>)
    816e:	461a      	mov	r2, r3
    8170:	4631      	mov	r1, r6
    8172:	f01c fec3 	bl	24efc <log_1>
		return;
    8176:	e7f7      	b.n	8168 <le_conn_update_complete+0x30>
	if (!evt->status) {
    8178:	782b      	ldrb	r3, [r5, #0]
    817a:	b9bb      	cbnz	r3, 81ac <le_conn_update_complete+0x74>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    817c:	792a      	ldrb	r2, [r5, #4]
    817e:	78eb      	ldrb	r3, [r5, #3]
    8180:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    8184:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    8188:	79aa      	ldrb	r2, [r5, #6]
    818a:	796b      	ldrb	r3, [r5, #5]
    818c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    8190:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    8194:	79eb      	ldrb	r3, [r5, #7]
    8196:	7a2a      	ldrb	r2, [r5, #8]
    8198:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    819c:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
    81a0:	f002 f900 	bl	a3a4 <notify_le_param_updated>
	bt_conn_unref(conn);
    81a4:	4620      	mov	r0, r4
    81a6:	f01f f9ac 	bl	27502 <bt_conn_unref>
    81aa:	e7dd      	b.n	8168 <le_conn_update_complete+0x30>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    81ac:	2b1a      	cmp	r3, #26
    81ae:	d1f9      	bne.n	81a4 <le_conn_update_complete+0x6c>
    81b0:	78c3      	ldrb	r3, [r0, #3]
    81b2:	2b01      	cmp	r3, #1
    81b4:	d1f6      	bne.n	81a4 <le_conn_update_complete+0x6c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    81b6:	f3bf 8f5b 	dmb	ish
    81ba:	1d03      	adds	r3, r0, #4
    81bc:	e853 2f00 	ldrex	r2, [r3]
    81c0:	f442 6180 	orr.w	r1, r2, #1024	; 0x400
    81c4:	e843 1500 	strex	r5, r1, [r3]
    81c8:	2d00      	cmp	r5, #0
    81ca:	d1f7      	bne.n	81bc <le_conn_update_complete+0x84>
    81cc:	f3bf 8f5b 	dmb	ish
		   conn->role == BT_HCI_ROLE_SLAVE &&
    81d0:	0553      	lsls	r3, r2, #21
    81d2:	d4e7      	bmi.n	81a4 <le_conn_update_complete+0x6c>
		param.interval_min = conn->le.interval_min;
    81d4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    81d8:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
    81da:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
    81dc:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
    81e0:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
    81e2:	f003 f837 	bl	b254 <bt_l2cap_update_conn_param>
    81e6:	e7dd      	b.n	81a4 <le_conn_update_complete+0x6c>
    81e8:	0002a7a8 	.word	0x0002a7a8
    81ec:	0002a6d0 	.word	0x0002a6d0
    81f0:	0002d3c8 	.word	0x0002d3c8

000081f4 <bt_hci_cmd_state_set_init>:
{
    81f4:	b510      	push	{r4, lr}
	state->bit = bit;
    81f6:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
    81fa:	f89d 3008 	ldrb.w	r3, [sp, #8]
    81fe:	720b      	strb	r3, [r1, #8]
{
    8200:	460c      	mov	r4, r1
	cmd(buf)->state = state;
    8202:	f014 fa45 	bl	1c690 <net_buf_id>
    8206:	4b03      	ldr	r3, [pc, #12]	; (8214 <bt_hci_cmd_state_set_init+0x20>)
    8208:	220c      	movs	r2, #12
    820a:	fb02 3000 	mla	r0, r2, r0, r3
    820e:	6044      	str	r4, [r0, #4]
}
    8210:	bd10      	pop	{r4, pc}
    8212:	bf00      	nop
    8214:	20000e08 	.word	0x20000e08

00008218 <bt_hci_cmd_create>:
{
    8218:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return net_buf_alloc_fixed(pool, timeout);
    821c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8220:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8224:	4605      	mov	r5, r0
    8226:	4816      	ldr	r0, [pc, #88]	; (8280 <bt_hci_cmd_create+0x68>)
	cmd(buf)->opcode = opcode;
    8228:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8284 <bt_hci_cmd_create+0x6c>
{
    822c:	460e      	mov	r6, r1
    822e:	f020 fce3 	bl	28bf8 <net_buf_alloc_fixed>
    8232:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
    8234:	f100 0b08 	add.w	fp, r0, #8
    8238:	2100      	movs	r1, #0
    823a:	2700      	movs	r7, #0
    823c:	4658      	mov	r0, fp
    823e:	f020 fcfa 	bl	28c36 <net_buf_simple_reserve>
    8242:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
    8244:	4620      	mov	r0, r4
    8246:	f014 fa23 	bl	1c690 <net_buf_id>
    824a:	f04f 0a0c 	mov.w	sl, #12
    824e:	fb0a 8000 	mla	r0, sl, r0, r8
    8252:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
    8254:	4620      	mov	r0, r4
    8256:	f014 fa1b 	bl	1c690 <net_buf_id>
    825a:	fb0a 8000 	mla	r0, sl, r0, r8
    825e:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
    8260:	4620      	mov	r0, r4
    8262:	f014 fa15 	bl	1c690 <net_buf_id>
    8266:	fb0a 8000 	mla	r0, sl, r0, r8
	return net_buf_simple_add(&buf->b, len);
    826a:	2103      	movs	r1, #3
    826c:	6047      	str	r7, [r0, #4]
    826e:	4658      	mov	r0, fp
    8270:	f020 fd18 	bl	28ca4 <net_buf_simple_add>
	hdr->param_len = param_len;
    8274:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    8276:	8005      	strh	r5, [r0, #0]
}
    8278:	4620      	mov	r0, r4
    827a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    827e:	bf00      	nop
    8280:	20007f68 	.word	0x20007f68
    8284:	20000e08 	.word	0x20000e08

00008288 <bt_hci_cmd_send>:
{
    8288:	b538      	push	{r3, r4, r5, lr}
    828a:	4605      	mov	r5, r0
	if (!buf) {
    828c:	460c      	mov	r4, r1
    828e:	b919      	cbnz	r1, 8298 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    8290:	f7ff ffc2 	bl	8218 <bt_hci_cmd_create>
		if (!buf) {
    8294:	4604      	mov	r4, r0
    8296:	b340      	cbz	r0, 82ea <bt_hci_cmd_send+0x62>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    8298:	f640 4335 	movw	r3, #3125	; 0xc35
    829c:	429d      	cmp	r5, r3
    829e:	d11e      	bne.n	82de <bt_hci_cmd_send+0x56>
		return bt_hci_ecc_send(buf);
    82a0:	4620      	mov	r0, r4
    82a2:	f7ff f909 	bl	74b8 <bt_hci_ecc_send>
		if (err) {
    82a6:	4605      	mov	r5, r0
    82a8:	b188      	cbz	r0, 82ce <bt_hci_cmd_send+0x46>
    82aa:	f01e fd25 	bl	26cf8 <arch_is_user_context>
    82ae:	4b10      	ldr	r3, [pc, #64]	; (82f0 <bt_hci_cmd_send+0x68>)
    82b0:	4a10      	ldr	r2, [pc, #64]	; (82f4 <bt_hci_cmd_send+0x6c>)
    82b2:	1a9b      	subs	r3, r3, r2
    82b4:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to send to driver (err %d)", err);
    82b6:	019b      	lsls	r3, r3, #6
    82b8:	f043 0301 	orr.w	r3, r3, #1
    82bc:	b148      	cbz	r0, 82d2 <bt_hci_cmd_send+0x4a>
    82be:	490e      	ldr	r1, [pc, #56]	; (82f8 <bt_hci_cmd_send+0x70>)
    82c0:	462a      	mov	r2, r5
    82c2:	4618      	mov	r0, r3
    82c4:	f01c fde7 	bl	24e96 <log_from_user>
			net_buf_unref(buf);
    82c8:	4620      	mov	r0, r4
    82ca:	f014 fa95 	bl	1c7f8 <net_buf_unref>
}
    82ce:	4628      	mov	r0, r5
    82d0:	bd38      	pop	{r3, r4, r5, pc}
			BT_ERR("Unable to send to driver (err %d)", err);
    82d2:	4809      	ldr	r0, [pc, #36]	; (82f8 <bt_hci_cmd_send+0x70>)
    82d4:	461a      	mov	r2, r3
    82d6:	4629      	mov	r1, r5
    82d8:	f01c fe10 	bl	24efc <log_1>
    82dc:	e7f4      	b.n	82c8 <bt_hci_cmd_send+0x40>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    82de:	4807      	ldr	r0, [pc, #28]	; (82fc <bt_hci_cmd_send+0x74>)
    82e0:	4621      	mov	r1, r4
    82e2:	f020 fcac 	bl	28c3e <net_buf_put>
	return 0;
    82e6:	2500      	movs	r5, #0
    82e8:	e7f1      	b.n	82ce <bt_hci_cmd_send+0x46>
			return -ENOBUFS;
    82ea:	f06f 0568 	mvn.w	r5, #104	; 0x68
    82ee:	e7ee      	b.n	82ce <bt_hci_cmd_send+0x46>
    82f0:	0002a7a8 	.word	0x0002a7a8
    82f4:	0002a6d0 	.word	0x0002a6d0
    82f8:	0002d59f 	.word	0x0002d59f
    82fc:	2000770c 	.word	0x2000770c

00008300 <le_ltk_request>:
{
    8300:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
    8302:	6886      	ldr	r6, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    8304:	8837      	ldrh	r7, [r6, #0]
    8306:	b2bd      	uxth	r5, r7
{
    8308:	b087      	sub	sp, #28
	conn = bt_conn_lookup_handle(handle);
    830a:	4628      	mov	r0, r5
    830c:	f002 faac 	bl	a868 <bt_conn_lookup_handle>
	if (!conn) {
    8310:	4604      	mov	r4, r0
    8312:	b9b0      	cbnz	r0, 8342 <le_ltk_request+0x42>
    8314:	f01e fcf0 	bl	26cf8 <arch_is_user_context>
    8318:	4b33      	ldr	r3, [pc, #204]	; (83e8 <le_ltk_request+0xe8>)
    831a:	4a34      	ldr	r2, [pc, #208]	; (83ec <le_ltk_request+0xec>)
    831c:	1a9b      	subs	r3, r3, r2
    831e:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8320:	019b      	lsls	r3, r3, #6
    8322:	f043 0301 	orr.w	r3, r3, #1
    8326:	b130      	cbz	r0, 8336 <le_ltk_request+0x36>
    8328:	4931      	ldr	r1, [pc, #196]	; (83f0 <le_ltk_request+0xf0>)
    832a:	462a      	mov	r2, r5
    832c:	4618      	mov	r0, r3
    832e:	f01c fdb2 	bl	24e96 <log_from_user>
}
    8332:	b007      	add	sp, #28
    8334:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8336:	482e      	ldr	r0, [pc, #184]	; (83f0 <le_ltk_request+0xf0>)
    8338:	461a      	mov	r2, r3
    833a:	4629      	mov	r1, r5
    833c:	f01c fdde 	bl	24efc <log_1>
		return;
    8340:	e7f7      	b.n	8332 <le_ltk_request+0x32>
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
    8342:	ad02      	add	r5, sp, #8
    8344:	f8d6 2002 	ldr.w	r2, [r6, #2]
    8348:	f8d6 3006 	ldr.w	r3, [r6, #6]
    834c:	9501      	str	r5, [sp, #4]
    834e:	8971      	ldrh	r1, [r6, #10]
    8350:	9100      	str	r1, [sp, #0]
    8352:	f020 faa8 	bl	288a6 <bt_smp_request_ltk>
    8356:	b380      	cbz	r0, 83ba <le_ltk_request+0xba>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    8358:	2112      	movs	r1, #18
    835a:	f242 001a 	movw	r0, #8218	; 0x201a
    835e:	f7ff ff5b 	bl	8218 <bt_hci_cmd_create>
	if (!buf) {
    8362:	4606      	mov	r6, r0
    8364:	b988      	cbnz	r0, 838a <le_ltk_request+0x8a>
    8366:	f01e fcc7 	bl	26cf8 <arch_is_user_context>
    836a:	4b1f      	ldr	r3, [pc, #124]	; (83e8 <le_ltk_request+0xe8>)
    836c:	4a1f      	ldr	r2, [pc, #124]	; (83ec <le_ltk_request+0xec>)
    836e:	1a9b      	subs	r3, r3, r2
    8370:	08db      	lsrs	r3, r3, #3
		BT_ERR("Out of command buffers");
    8372:	019b      	lsls	r3, r3, #6
    8374:	f043 0301 	orr.w	r3, r3, #1
    8378:	b380      	cbz	r0, 83dc <le_ltk_request+0xdc>
    837a:	491e      	ldr	r1, [pc, #120]	; (83f4 <le_ltk_request+0xf4>)
    837c:	4618      	mov	r0, r3
    837e:	f01c fd8a 	bl	24e96 <log_from_user>
	bt_conn_unref(conn);
    8382:	4620      	mov	r0, r4
    8384:	f01f f8bd 	bl	27502 <bt_conn_unref>
    8388:	e7d3      	b.n	8332 <le_ltk_request+0x32>
    838a:	2112      	movs	r1, #18
    838c:	3008      	adds	r0, #8
    838e:	f020 fc89 	bl	28ca4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
    8392:	4603      	mov	r3, r0
    8394:	462a      	mov	r2, r5
    8396:	f823 7b02 	strh.w	r7, [r3], #2
    839a:	af06      	add	r7, sp, #24
    839c:	4615      	mov	r5, r2
    839e:	cd03      	ldmia	r5!, {r0, r1}
    83a0:	42bd      	cmp	r5, r7
    83a2:	6018      	str	r0, [r3, #0]
    83a4:	6059      	str	r1, [r3, #4]
    83a6:	462a      	mov	r2, r5
    83a8:	f103 0308 	add.w	r3, r3, #8
    83ac:	d1f6      	bne.n	839c <le_ltk_request+0x9c>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    83ae:	4631      	mov	r1, r6
    83b0:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    83b4:	f7ff ff68 	bl	8288 <bt_hci_cmd_send>
    83b8:	e7e3      	b.n	8382 <le_ltk_request+0x82>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    83ba:	2102      	movs	r1, #2
    83bc:	f242 001b 	movw	r0, #8219	; 0x201b
    83c0:	f7ff ff2a 	bl	8218 <bt_hci_cmd_create>
	if (!buf) {
    83c4:	4605      	mov	r5, r0
    83c6:	2800      	cmp	r0, #0
    83c8:	d0cd      	beq.n	8366 <le_ltk_request+0x66>
    83ca:	2102      	movs	r1, #2
    83cc:	3008      	adds	r0, #8
    83ce:	f020 fc69 	bl	28ca4 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    83d2:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(handle);
    83d4:	8007      	strh	r7, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    83d6:	f242 001b 	movw	r0, #8219	; 0x201b
    83da:	e7eb      	b.n	83b4 <le_ltk_request+0xb4>
		BT_ERR("Out of command buffers");
    83dc:	4805      	ldr	r0, [pc, #20]	; (83f4 <le_ltk_request+0xf4>)
    83de:	4619      	mov	r1, r3
    83e0:	f01c fd7f 	bl	24ee2 <log_0>
		return;
    83e4:	e7cd      	b.n	8382 <le_ltk_request+0x82>
    83e6:	bf00      	nop
    83e8:	0002a7a8 	.word	0x0002a7a8
    83ec:	0002a6d0 	.word	0x0002a6d0
    83f0:	0002d3c8 	.word	0x0002d3c8
    83f4:	0002d615 	.word	0x0002d615

000083f8 <le_conn_param_neg_reply>:
{
    83f8:	b570      	push	{r4, r5, r6, lr}
    83fa:	4606      	mov	r6, r0
    83fc:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    83fe:	f242 0021 	movw	r0, #8225	; 0x2021
    8402:	2103      	movs	r1, #3
    8404:	f7ff ff08 	bl	8218 <bt_hci_cmd_create>
	if (!buf) {
    8408:	4604      	mov	r4, r0
    840a:	b9a8      	cbnz	r0, 8438 <le_conn_param_neg_reply+0x40>
    840c:	f01e fc74 	bl	26cf8 <arch_is_user_context>
    8410:	4b10      	ldr	r3, [pc, #64]	; (8454 <le_conn_param_neg_reply+0x5c>)
    8412:	4a11      	ldr	r2, [pc, #68]	; (8458 <le_conn_param_neg_reply+0x60>)
    8414:	1a9b      	subs	r3, r3, r2
    8416:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to allocate buffer");
    8418:	019b      	lsls	r3, r3, #6
    841a:	f043 0301 	orr.w	r3, r3, #1
    841e:	b128      	cbz	r0, 842c <le_conn_param_neg_reply+0x34>
}
    8420:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
    8424:	490d      	ldr	r1, [pc, #52]	; (845c <le_conn_param_neg_reply+0x64>)
    8426:	4618      	mov	r0, r3
    8428:	f01c bd35 	b.w	24e96 <log_from_user>
}
    842c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
    8430:	480a      	ldr	r0, [pc, #40]	; (845c <le_conn_param_neg_reply+0x64>)
    8432:	4619      	mov	r1, r3
    8434:	f01c bd55 	b.w	24ee2 <log_0>
    8438:	2103      	movs	r1, #3
    843a:	3008      	adds	r0, #8
    843c:	f020 fc32 	bl	28ca4 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    8440:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    8442:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    8444:	4621      	mov	r1, r4
    8446:	f242 0021 	movw	r0, #8225	; 0x2021
}
    844a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    844e:	f7ff bf1b 	b.w	8288 <bt_hci_cmd_send>
    8452:	bf00      	nop
    8454:	0002a7a8 	.word	0x0002a7a8
    8458:	0002a6d0 	.word	0x0002a6d0
    845c:	0002d62c 	.word	0x0002d62c

00008460 <le_conn_param_req>:
{
    8460:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    8462:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    8464:	78d9      	ldrb	r1, [r3, #3]
    8466:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    8468:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    846a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    846e:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    8472:	7959      	ldrb	r1, [r3, #5]
    8474:	791a      	ldrb	r2, [r3, #4]
    8476:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    847a:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    847e:	799a      	ldrb	r2, [r3, #6]
    8480:	79d9      	ldrb	r1, [r3, #7]
    8482:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    8486:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    848a:	7a1a      	ldrb	r2, [r3, #8]
    848c:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    848e:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    8490:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    8494:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
    8496:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    849a:	f002 f9e5 	bl	a868 <bt_conn_lookup_handle>
	if (!conn) {
    849e:	4606      	mov	r6, r0
    84a0:	b9d0      	cbnz	r0, 84d8 <le_conn_param_req+0x78>
    84a2:	f01e fc29 	bl	26cf8 <arch_is_user_context>
    84a6:	4b24      	ldr	r3, [pc, #144]	; (8538 <le_conn_param_req+0xd8>)
    84a8:	4a24      	ldr	r2, [pc, #144]	; (853c <le_conn_param_req+0xdc>)
    84aa:	1a9b      	subs	r3, r3, r2
    84ac:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
    84ae:	019b      	lsls	r3, r3, #6
    84b0:	f043 0301 	orr.w	r3, r3, #1
    84b4:	b150      	cbz	r0, 84cc <le_conn_param_req+0x6c>
    84b6:	4922      	ldr	r1, [pc, #136]	; (8540 <le_conn_param_req+0xe0>)
    84b8:	4622      	mov	r2, r4
    84ba:	4618      	mov	r0, r3
    84bc:	f01c fceb 	bl	24e96 <log_from_user>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    84c0:	2102      	movs	r1, #2
    84c2:	4620      	mov	r0, r4
    84c4:	f7ff ff98 	bl	83f8 <le_conn_param_neg_reply>
}
    84c8:	b003      	add	sp, #12
    84ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    84cc:	481c      	ldr	r0, [pc, #112]	; (8540 <le_conn_param_req+0xe0>)
    84ce:	461a      	mov	r2, r3
    84d0:	4621      	mov	r1, r4
    84d2:	f01c fd13 	bl	24efc <log_1>
    84d6:	e7f3      	b.n	84c0 <le_conn_param_req+0x60>
	if (!le_param_req(conn, &param)) {
    84d8:	4669      	mov	r1, sp
    84da:	f001 ff9b 	bl	a414 <le_param_req>
    84de:	b938      	cbnz	r0, 84f0 <le_conn_param_req+0x90>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    84e0:	211e      	movs	r1, #30
    84e2:	4620      	mov	r0, r4
    84e4:	f7ff ff88 	bl	83f8 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    84e8:	4630      	mov	r0, r6
    84ea:	f01f f80a 	bl	27502 <bt_conn_unref>
    84ee:	e7eb      	b.n	84c8 <le_conn_param_req+0x68>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    84f0:	210e      	movs	r1, #14
    84f2:	f242 0020 	movw	r0, #8224	; 0x2020
    84f6:	f7ff fe8f 	bl	8218 <bt_hci_cmd_create>
	if (!buf) {
    84fa:	4605      	mov	r5, r0
    84fc:	2800      	cmp	r0, #0
    84fe:	d0f3      	beq.n	84e8 <le_conn_param_req+0x88>
    8500:	210e      	movs	r1, #14
    8502:	3008      	adds	r0, #8
    8504:	f020 fbce 	bl	28ca4 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
    8508:	220e      	movs	r2, #14
    850a:	4604      	mov	r4, r0
    850c:	2100      	movs	r1, #0
    850e:	f021 ff75 	bl	2a3fc <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    8512:	f8bd 3000 	ldrh.w	r3, [sp]
    8516:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    8518:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    851c:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    851e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    8522:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    8524:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
    8528:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    852a:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    852c:	4629      	mov	r1, r5
    852e:	f242 0020 	movw	r0, #8224	; 0x2020
    8532:	f7ff fea9 	bl	8288 <bt_hci_cmd_send>
    8536:	e7d7      	b.n	84e8 <le_conn_param_req+0x88>
    8538:	0002a7a8 	.word	0x0002a7a8
    853c:	0002a6d0 	.word	0x0002a6d0
    8540:	0002d3c8 	.word	0x0002d3c8

00008544 <bt_hci_cmd_send_sync>:
{
    8544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8548:	4607      	mov	r7, r0
    854a:	b086      	sub	sp, #24
    854c:	4615      	mov	r5, r2
	if (!buf) {
    854e:	460c      	mov	r4, r1
    8550:	b921      	cbnz	r1, 855c <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
    8552:	f7ff fe61 	bl	8218 <bt_hci_cmd_create>
		if (!buf) {
    8556:	4604      	mov	r4, r0
    8558:	2800      	cmp	r0, #0
    855a:	d060      	beq.n	861e <bt_hci_cmd_send_sync+0xda>
	k_sem_init(&sync_sem, 0, 1);
    855c:	2201      	movs	r2, #1
    855e:	2100      	movs	r1, #0
    8560:	4668      	mov	r0, sp
    8562:	f01e fc2d 	bl	26dc0 <k_sem_init>
	cmd(buf)->sync = &sync_sem;
    8566:	4620      	mov	r0, r4
    8568:	f014 f892 	bl	1c690 <net_buf_id>
    856c:	4e2d      	ldr	r6, [pc, #180]	; (8624 <bt_hci_cmd_send_sync+0xe0>)
    856e:	230c      	movs	r3, #12
    8570:	fb03 6000 	mla	r0, r3, r0, r6
    8574:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
    8578:	4620      	mov	r0, r4
    857a:	f020 fb6d 	bl	28c58 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    857e:	482a      	ldr	r0, [pc, #168]	; (8628 <bt_hci_cmd_send_sync+0xe4>)
    8580:	4621      	mov	r1, r4
    8582:	f020 fb5c 	bl	28c3e <net_buf_put>
	err = k_sem_take(&sync_sem, HCI_CMD_TIMEOUT);
    8586:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    858a:	2300      	movs	r3, #0
    858c:	4668      	mov	r0, sp
    858e:	f01e fbe7 	bl	26d60 <k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    8592:	4680      	mov	r8, r0
    8594:	b180      	cbz	r0, 85b8 <bt_hci_cmd_send_sync+0x74>
    8596:	4a25      	ldr	r2, [pc, #148]	; (862c <bt_hci_cmd_send_sync+0xe8>)
    8598:	4925      	ldr	r1, [pc, #148]	; (8630 <bt_hci_cmd_send_sync+0xec>)
    859a:	4826      	ldr	r0, [pc, #152]	; (8634 <bt_hci_cmd_send_sync+0xf0>)
    859c:	f240 1337 	movw	r3, #311	; 0x137
    85a0:	f01c f820 	bl	245e4 <printk>
    85a4:	4824      	ldr	r0, [pc, #144]	; (8638 <bt_hci_cmd_send_sync+0xf4>)
    85a6:	4641      	mov	r1, r8
    85a8:	f01c f81c 	bl	245e4 <printk>
    85ac:	4040      	eors	r0, r0
    85ae:	f380 8811 	msr	BASEPRI, r0
    85b2:	f04f 0003 	mov.w	r0, #3
    85b6:	df02      	svc	2
	status = cmd(buf)->status;
    85b8:	4620      	mov	r0, r4
    85ba:	f014 f869 	bl	1c690 <net_buf_id>
    85be:	230c      	movs	r3, #12
    85c0:	4343      	muls	r3, r0
    85c2:	5cf6      	ldrb	r6, [r6, r3]
	if (status) {
    85c4:	b316      	cbz	r6, 860c <bt_hci_cmd_send_sync+0xc8>
    85c6:	f01e fb97 	bl	26cf8 <arch_is_user_context>
    85ca:	4d1c      	ldr	r5, [pc, #112]	; (863c <bt_hci_cmd_send_sync+0xf8>)
    85cc:	4b1c      	ldr	r3, [pc, #112]	; (8640 <bt_hci_cmd_send_sync+0xfc>)
    85ce:	1aed      	subs	r5, r5, r3
    85d0:	08ed      	lsrs	r5, r5, #3
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    85d2:	01ad      	lsls	r5, r5, #6
    85d4:	f045 0502 	orr.w	r5, r5, #2
    85d8:	b188      	cbz	r0, 85fe <bt_hci_cmd_send_sync+0xba>
    85da:	491a      	ldr	r1, [pc, #104]	; (8644 <bt_hci_cmd_send_sync+0x100>)
    85dc:	4633      	mov	r3, r6
    85de:	463a      	mov	r2, r7
    85e0:	4628      	mov	r0, r5
    85e2:	f01c fc58 	bl	24e96 <log_from_user>
		net_buf_unref(buf);
    85e6:	4620      	mov	r0, r4
    85e8:	f014 f906 	bl	1c7f8 <net_buf_unref>
			return -EIO;
    85ec:	2e09      	cmp	r6, #9
    85ee:	bf0c      	ite	eq
    85f0:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
    85f4:	f06f 0004 	mvnne.w	r0, #4
}
    85f8:	b006      	add	sp, #24
    85fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    85fe:	4811      	ldr	r0, [pc, #68]	; (8644 <bt_hci_cmd_send_sync+0x100>)
    8600:	462b      	mov	r3, r5
    8602:	4632      	mov	r2, r6
    8604:	4639      	mov	r1, r7
    8606:	f01c fc8d 	bl	24f24 <log_2>
    860a:	e7ec      	b.n	85e6 <bt_hci_cmd_send_sync+0xa2>
	if (rsp) {
    860c:	b115      	cbz	r5, 8614 <bt_hci_cmd_send_sync+0xd0>
		*rsp = buf;
    860e:	602c      	str	r4, [r5, #0]
	return 0;
    8610:	4630      	mov	r0, r6
    8612:	e7f1      	b.n	85f8 <bt_hci_cmd_send_sync+0xb4>
		net_buf_unref(buf);
    8614:	4620      	mov	r0, r4
    8616:	f014 f8ef 	bl	1c7f8 <net_buf_unref>
	return 0;
    861a:	4628      	mov	r0, r5
    861c:	e7ec      	b.n	85f8 <bt_hci_cmd_send_sync+0xb4>
			return -ENOBUFS;
    861e:	f06f 0068 	mvn.w	r0, #104	; 0x68
    8622:	e7e9      	b.n	85f8 <bt_hci_cmd_send_sync+0xb4>
    8624:	20000e08 	.word	0x20000e08
    8628:	2000770c 	.word	0x2000770c
    862c:	0002d52a 	.word	0x0002d52a
    8630:	0002d55e 	.word	0x0002d55e
    8634:	0002d567 	.word	0x0002d567
    8638:	0002d646 	.word	0x0002d646
    863c:	0002a7a8 	.word	0x0002a7a8
    8640:	0002a6d0 	.word	0x0002a6d0
    8644:	0002d666 	.word	0x0002d666

00008648 <hci_le_read_max_data_len>:
{
    8648:	b573      	push	{r0, r1, r4, r5, r6, lr}
    864a:	4606      	mov	r6, r0
    864c:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    864e:	aa01      	add	r2, sp, #4
    8650:	2100      	movs	r1, #0
    8652:	f242 002f 	movw	r0, #8239	; 0x202f
    8656:	f7ff ff75 	bl	8544 <bt_hci_cmd_send_sync>
	if (err) {
    865a:	4604      	mov	r4, r0
    865c:	b1a8      	cbz	r0, 868a <hci_le_read_max_data_len+0x42>
    865e:	f01e fb4b 	bl	26cf8 <arch_is_user_context>
    8662:	4b0f      	ldr	r3, [pc, #60]	; (86a0 <hci_le_read_max_data_len+0x58>)
    8664:	4a0f      	ldr	r2, [pc, #60]	; (86a4 <hci_le_read_max_data_len+0x5c>)
    8666:	1a9b      	subs	r3, r3, r2
    8668:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to read DLE max data len");
    866a:	019b      	lsls	r3, r3, #6
    866c:	f043 0301 	orr.w	r3, r3, #1
    8670:	b130      	cbz	r0, 8680 <hci_le_read_max_data_len+0x38>
    8672:	490d      	ldr	r1, [pc, #52]	; (86a8 <hci_le_read_max_data_len+0x60>)
    8674:	4618      	mov	r0, r3
    8676:	f01c fc0e 	bl	24e96 <log_from_user>
}
    867a:	4620      	mov	r0, r4
    867c:	b002      	add	sp, #8
    867e:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Failed to read DLE max data len");
    8680:	4809      	ldr	r0, [pc, #36]	; (86a8 <hci_le_read_max_data_len+0x60>)
    8682:	4619      	mov	r1, r3
    8684:	f01c fc2d 	bl	24ee2 <log_0>
		return err;
    8688:	e7f7      	b.n	867a <hci_le_read_max_data_len+0x32>
	rp = (void *)rsp->data;
    868a:	9801      	ldr	r0, [sp, #4]
    868c:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    868e:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    8692:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
    8694:	f8b3 3003 	ldrh.w	r3, [r3, #3]
    8698:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
    869a:	f014 f8ad 	bl	1c7f8 <net_buf_unref>
	return 0;
    869e:	e7ec      	b.n	867a <hci_le_read_max_data_len+0x32>
    86a0:	0002a7a8 	.word	0x0002a7a8
    86a4:	0002a6d0 	.word	0x0002a6d0
    86a8:	0002d682 	.word	0x0002d682

000086ac <conn_auto_initiate>:
{
    86ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    86ae:	7b43      	ldrb	r3, [r0, #13]
    86b0:	2b07      	cmp	r3, #7
{
    86b2:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    86b4:	d121      	bne.n	86fa <conn_auto_initiate+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    86b6:	f3bf 8f5b 	dmb	ish
    86ba:	6843      	ldr	r3, [r0, #4]
    86bc:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    86c0:	049b      	lsls	r3, r3, #18
    86c2:	f100 0604 	add.w	r6, r0, #4
    86c6:	d41a      	bmi.n	86fe <conn_auto_initiate+0x52>
    86c8:	78c3      	ldrb	r3, [r0, #3]
    86ca:	b123      	cbz	r3, 86d6 <conn_auto_initiate+0x2a>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
    86cc:	4b3f      	ldr	r3, [pc, #252]	; (87cc <conn_auto_initiate+0x120>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
    86ce:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
    86d2:	071d      	lsls	r5, r3, #28
    86d4:	d513      	bpl.n	86fe <conn_auto_initiate+0x52>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    86d6:	2102      	movs	r1, #2
    86d8:	f242 0016 	movw	r0, #8214	; 0x2016
    86dc:	f7ff fd9c 	bl	8218 <bt_hci_cmd_create>
	if (!buf) {
    86e0:	4605      	mov	r5, r0
    86e2:	b160      	cbz	r0, 86fe <conn_auto_initiate+0x52>
    86e4:	2102      	movs	r1, #2
    86e6:	3008      	adds	r0, #8
    86e8:	f020 fadc 	bl	28ca4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    86ec:	8823      	ldrh	r3, [r4, #0]
    86ee:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    86f0:	4629      	mov	r1, r5
    86f2:	f242 0016 	movw	r0, #8214	; 0x2016
    86f6:	f7ff fdc7 	bl	8288 <bt_hci_cmd_send>
}
    86fa:	b004      	add	sp, #16
    86fc:	bd70      	pop	{r4, r5, r6, pc}
    86fe:	f3bf 8f5b 	dmb	ish
    8702:	6863      	ldr	r3, [r4, #4]
    8704:	4d31      	ldr	r5, [pc, #196]	; (87cc <conn_auto_initiate+0x120>)
    8706:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    870a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    870e:	f3c3 3100 	ubfx	r1, r3, #12, #1
    8712:	d127      	bne.n	8764 <conn_auto_initiate+0xb8>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    8714:	f895 30a1 	ldrb.w	r3, [r5, #161]	; 0xa1
    8718:	07d8      	lsls	r0, r3, #31
    871a:	d523      	bpl.n	8764 <conn_auto_initiate+0xb8>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    871c:	2302      	movs	r3, #2
    871e:	9100      	str	r1, [sp, #0]
    8720:	461a      	mov	r2, r3
    8722:	4620      	mov	r0, r4
    8724:	f01e fba4 	bl	26e70 <bt_le_set_phy>
		if (!err) {
    8728:	4601      	mov	r1, r0
    872a:	b960      	cbnz	r0, 8746 <conn_auto_initiate+0x9a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    872c:	f3bf 8f5b 	dmb	ish
    8730:	e856 3f00 	ldrex	r3, [r6]
    8734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    8738:	e846 3200 	strex	r2, r3, [r6]
    873c:	2a00      	cmp	r2, #0
    873e:	d1f7      	bne.n	8730 <conn_auto_initiate+0x84>
    8740:	f3bf 8f5b 	dmb	ish
			return;
    8744:	e7d9      	b.n	86fa <conn_auto_initiate+0x4e>
    8746:	f01e fad7 	bl	26cf8 <arch_is_user_context>
    874a:	4b21      	ldr	r3, [pc, #132]	; (87d0 <conn_auto_initiate+0x124>)
    874c:	4a21      	ldr	r2, [pc, #132]	; (87d4 <conn_auto_initiate+0x128>)
    874e:	1a9b      	subs	r3, r3, r2
    8750:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to set LE PHY (%d)", err);
    8752:	019b      	lsls	r3, r3, #6
    8754:	f043 0301 	orr.w	r3, r3, #1
    8758:	b370      	cbz	r0, 87b8 <conn_auto_initiate+0x10c>
    875a:	460a      	mov	r2, r1
    875c:	4618      	mov	r0, r3
    875e:	491e      	ldr	r1, [pc, #120]	; (87d8 <conn_auto_initiate+0x12c>)
    8760:	f01c fb99 	bl	24e96 <log_from_user>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    8764:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
    8768:	069a      	lsls	r2, r3, #26
    876a:	d5c6      	bpl.n	86fa <conn_auto_initiate+0x4e>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    876c:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    8770:	689b      	ldr	r3, [r3, #8]
    8772:	079b      	lsls	r3, r3, #30
    8774:	d5c1      	bpl.n	86fa <conn_auto_initiate+0x4e>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    8776:	f10d 010e 	add.w	r1, sp, #14
    877a:	a803      	add	r0, sp, #12
    877c:	f7ff ff64 	bl	8648 <hci_le_read_max_data_len>
			if (!err) {
    8780:	2800      	cmp	r0, #0
    8782:	d1ba      	bne.n	86fa <conn_auto_initiate+0x4e>
				err = bt_le_set_data_len(conn,
    8784:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    8788:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    878c:	4620      	mov	r0, r4
    878e:	f01e fb52 	bl	26e36 <bt_le_set_data_len>
				if (err) {
    8792:	4601      	mov	r1, r0
    8794:	2800      	cmp	r0, #0
    8796:	d0b0      	beq.n	86fa <conn_auto_initiate+0x4e>
    8798:	f01e faae 	bl	26cf8 <arch_is_user_context>
    879c:	4b0c      	ldr	r3, [pc, #48]	; (87d0 <conn_auto_initiate+0x124>)
    879e:	4a0d      	ldr	r2, [pc, #52]	; (87d4 <conn_auto_initiate+0x128>)
    87a0:	1a9b      	subs	r3, r3, r2
    87a2:	08db      	lsrs	r3, r3, #3
					BT_ERR("Failed to set data len (%d)", err);
    87a4:	019b      	lsls	r3, r3, #6
    87a6:	f043 0301 	orr.w	r3, r3, #1
    87aa:	b150      	cbz	r0, 87c2 <conn_auto_initiate+0x116>
    87ac:	460a      	mov	r2, r1
    87ae:	4618      	mov	r0, r3
    87b0:	490a      	ldr	r1, [pc, #40]	; (87dc <conn_auto_initiate+0x130>)
    87b2:	f01c fb70 	bl	24e96 <log_from_user>
    87b6:	e7a0      	b.n	86fa <conn_auto_initiate+0x4e>
		BT_ERR("Failed to set LE PHY (%d)", err);
    87b8:	4807      	ldr	r0, [pc, #28]	; (87d8 <conn_auto_initiate+0x12c>)
    87ba:	461a      	mov	r2, r3
    87bc:	f01c fb9e 	bl	24efc <log_1>
    87c0:	e7d0      	b.n	8764 <conn_auto_initiate+0xb8>
					BT_ERR("Failed to set data len (%d)", err);
    87c2:	4806      	ldr	r0, [pc, #24]	; (87dc <conn_auto_initiate+0x130>)
    87c4:	461a      	mov	r2, r3
    87c6:	f01c fb99 	bl	24efc <log_1>
		}
    87ca:	e796      	b.n	86fa <conn_auto_initiate+0x4e>
    87cc:	20007600 	.word	0x20007600
    87d0:	0002a7a8 	.word	0x0002a7a8
    87d4:	0002a6d0 	.word	0x0002a6d0
    87d8:	0002d79a 	.word	0x0002d79a
    87dc:	0002d7b4 	.word	0x0002d7b4

000087e0 <le_phy_update_complete>:
{
    87e0:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    87e2:	6883      	ldr	r3, [r0, #8]
    87e4:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    87e8:	4628      	mov	r0, r5
    87ea:	f002 f83d 	bl	a868 <bt_conn_lookup_handle>
	if (!conn) {
    87ee:	4604      	mov	r4, r0
    87f0:	b9b8      	cbnz	r0, 8822 <le_phy_update_complete+0x42>
    87f2:	f01e fa81 	bl	26cf8 <arch_is_user_context>
    87f6:	4b1c      	ldr	r3, [pc, #112]	; (8868 <le_phy_update_complete+0x88>)
    87f8:	4a1c      	ldr	r2, [pc, #112]	; (886c <le_phy_update_complete+0x8c>)
    87fa:	1a9b      	subs	r3, r3, r2
    87fc:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
    87fe:	019b      	lsls	r3, r3, #6
    8800:	f043 0301 	orr.w	r3, r3, #1
    8804:	b130      	cbz	r0, 8814 <le_phy_update_complete+0x34>
    8806:	462a      	mov	r2, r5
    8808:	4618      	mov	r0, r3
    880a:	4919      	ldr	r1, [pc, #100]	; (8870 <le_phy_update_complete+0x90>)
}
    880c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8810:	f01c bb41 	b.w	24e96 <log_from_user>
    8814:	461a      	mov	r2, r3
    8816:	4629      	mov	r1, r5
    8818:	4815      	ldr	r0, [pc, #84]	; (8870 <le_phy_update_complete+0x90>)
}
    881a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    881e:	f01c bb6d 	b.w	24efc <log_1>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    8822:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8824:	f3bf 8f5b 	dmb	ish
    8828:	e853 2f00 	ldrex	r2, [r3]
    882c:	f022 0180 	bic.w	r1, r2, #128	; 0x80
    8830:	e843 1500 	strex	r5, r1, [r3]
    8834:	2d00      	cmp	r5, #0
    8836:	d1f7      	bne.n	8828 <le_phy_update_complete+0x48>
    8838:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    883c:	0612      	lsls	r2, r2, #24
    883e:	d50d      	bpl.n	885c <le_phy_update_complete+0x7c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8840:	f3bf 8f5b 	dmb	ish
    8844:	e853 2f00 	ldrex	r2, [r3]
    8848:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    884c:	e843 2100 	strex	r1, r2, [r3]
    8850:	2900      	cmp	r1, #0
    8852:	d1f7      	bne.n	8844 <le_phy_update_complete+0x64>
    8854:	f3bf 8f5b 	dmb	ish
		conn_auto_initiate(conn);
    8858:	f7ff ff28 	bl	86ac <conn_auto_initiate>
	bt_conn_unref(conn);
    885c:	4620      	mov	r0, r4
}
    885e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    8862:	f01e be4e 	b.w	27502 <bt_conn_unref>
    8866:	bf00      	nop
    8868:	0002a7a8 	.word	0x0002a7a8
    886c:	0002a6d0 	.word	0x0002a6d0
    8870:	0002d3c8 	.word	0x0002d3c8

00008874 <le_remote_feat_complete>:
{
    8874:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    8876:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    8878:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    887c:	4630      	mov	r0, r6
    887e:	f001 fff3 	bl	a868 <bt_conn_lookup_handle>
	if (!conn) {
    8882:	4604      	mov	r4, r0
    8884:	b9b8      	cbnz	r0, 88b6 <le_remote_feat_complete+0x42>
    8886:	f01e fa37 	bl	26cf8 <arch_is_user_context>
    888a:	4b1a      	ldr	r3, [pc, #104]	; (88f4 <le_remote_feat_complete+0x80>)
    888c:	4a1a      	ldr	r2, [pc, #104]	; (88f8 <le_remote_feat_complete+0x84>)
    888e:	1a9b      	subs	r3, r3, r2
    8890:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8892:	019b      	lsls	r3, r3, #6
    8894:	f043 0301 	orr.w	r3, r3, #1
    8898:	b130      	cbz	r0, 88a8 <le_remote_feat_complete+0x34>
    889a:	4632      	mov	r2, r6
    889c:	4917      	ldr	r1, [pc, #92]	; (88fc <le_remote_feat_complete+0x88>)
}
    889e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    88a2:	4618      	mov	r0, r3
    88a4:	f01c baf7 	b.w	24e96 <log_from_user>
    88a8:	4631      	mov	r1, r6
    88aa:	4814      	ldr	r0, [pc, #80]	; (88fc <le_remote_feat_complete+0x88>)
}
    88ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    88b0:	461a      	mov	r2, r3
    88b2:	f01c bb23 	b.w	24efc <log_1>
	if (!evt->status) {
    88b6:	782b      	ldrb	r3, [r5, #0]
    88b8:	b933      	cbnz	r3, 88c8 <le_remote_feat_complete+0x54>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    88ba:	f855 3f03 	ldr.w	r3, [r5, #3]!
    88be:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
    88c2:	686b      	ldr	r3, [r5, #4]
    88c4:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
    88c8:	1d23      	adds	r3, r4, #4
    88ca:	f3bf 8f5b 	dmb	ish
    88ce:	e853 2f00 	ldrex	r2, [r3]
    88d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    88d6:	e843 2100 	strex	r1, r2, [r3]
    88da:	2900      	cmp	r1, #0
    88dc:	d1f7      	bne.n	88ce <le_remote_feat_complete+0x5a>
    88de:	f3bf 8f5b 	dmb	ish
	conn_auto_initiate(conn);
    88e2:	4620      	mov	r0, r4
    88e4:	f7ff fee2 	bl	86ac <conn_auto_initiate>
	bt_conn_unref(conn);
    88e8:	4620      	mov	r0, r4
}
    88ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    88ee:	f01e be08 	b.w	27502 <bt_conn_unref>
    88f2:	bf00      	nop
    88f4:	0002a7a8 	.word	0x0002a7a8
    88f8:	0002a6d0 	.word	0x0002a6d0
    88fc:	0002d3c8 	.word	0x0002d3c8

00008900 <enh_conn_complete>:
{
    8900:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    8904:	4604      	mov	r4, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    8906:	f8b0 8001 	ldrh.w	r8, [r0, #1]
	bt_id_pending_keys_update();
    890a:	f000 fc53 	bl	91b4 <bt_id_pending_keys_update>
	if (evt->status) {
    890e:	7825      	ldrb	r5, [r4, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    8910:	fa1f f788 	uxth.w	r7, r8
	if (evt->status) {
    8914:	2d00      	cmp	r5, #0
    8916:	d049      	beq.n	89ac <enh_conn_complete+0xac>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    8918:	2d3c      	cmp	r5, #60	; 0x3c
    891a:	d131      	bne.n	8980 <enh_conn_complete+0x80>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    891c:	f001 f926 	bl	9b6c <bt_le_adv_lookup_legacy>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8920:	f3bf 8f5b 	dmb	ish
    8924:	3010      	adds	r0, #16
    8926:	e850 3f00 	ldrex	r3, [r0]
    892a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    892e:	e840 3200 	strex	r2, r3, [r0]
    8932:	2a00      	cmp	r2, #0
    8934:	d1f7      	bne.n	8926 <enh_conn_complete+0x26>
    8936:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    893a:	2000      	movs	r0, #0
    893c:	f7ff f968 	bl	7c10 <find_pending_connect.part.0>
		if (!conn) {
    8940:	4604      	mov	r4, r0
    8942:	b9a8      	cbnz	r0, 8970 <enh_conn_complete+0x70>
    8944:	f01e f9d8 	bl	26cf8 <arch_is_user_context>
    8948:	4b6d      	ldr	r3, [pc, #436]	; (8b00 <enh_conn_complete+0x200>)
    894a:	4a6e      	ldr	r2, [pc, #440]	; (8b04 <enh_conn_complete+0x204>)
    894c:	1a9b      	subs	r3, r3, r2
    894e:	08db      	lsrs	r3, r3, #3
			BT_ERR("No pending slave connection");
    8950:	019b      	lsls	r3, r3, #6
    8952:	f043 0301 	orr.w	r3, r3, #1
    8956:	b130      	cbz	r0, 8966 <enh_conn_complete+0x66>
    8958:	496b      	ldr	r1, [pc, #428]	; (8b08 <enh_conn_complete+0x208>)
    895a:	4618      	mov	r0, r3
    895c:	f01c fa9b 	bl	24e96 <log_from_user>
}
    8960:	b004      	add	sp, #16
    8962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			BT_ERR("No pending slave connection");
    8966:	4868      	ldr	r0, [pc, #416]	; (8b08 <enh_conn_complete+0x208>)
    8968:	4619      	mov	r1, r3
    896a:	f01c faba 	bl	24ee2 <log_0>
			return;
    896e:	e7f7      	b.n	8960 <enh_conn_complete+0x60>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
    8970:	7305      	strb	r5, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    8972:	2100      	movs	r1, #0
    8974:	f001 ff84 	bl	a880 <bt_conn_set_state>
		bt_conn_unref(conn);
    8978:	4620      	mov	r0, r4
	bt_conn_unref(conn);
    897a:	f01e fdc2 	bl	27502 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    897e:	e7ef      	b.n	8960 <enh_conn_complete+0x60>
    8980:	f01e f9ba 	bl	26cf8 <arch_is_user_context>
    8984:	4b5e      	ldr	r3, [pc, #376]	; (8b00 <enh_conn_complete+0x200>)
    8986:	4a5f      	ldr	r2, [pc, #380]	; (8b04 <enh_conn_complete+0x204>)
    8988:	7821      	ldrb	r1, [r4, #0]
    898a:	1a9b      	subs	r3, r3, r2
    898c:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unexpected status 0x%02x", evt->status);
    898e:	019b      	lsls	r3, r3, #6
    8990:	f043 0302 	orr.w	r3, r3, #2
    8994:	b128      	cbz	r0, 89a2 <enh_conn_complete+0xa2>
    8996:	460a      	mov	r2, r1
    8998:	4618      	mov	r0, r3
    899a:	495c      	ldr	r1, [pc, #368]	; (8b0c <enh_conn_complete+0x20c>)
    899c:	f01c fa7b 	bl	24e96 <log_from_user>
    89a0:	e7de      	b.n	8960 <enh_conn_complete+0x60>
    89a2:	485a      	ldr	r0, [pc, #360]	; (8b0c <enh_conn_complete+0x20c>)
    89a4:	461a      	mov	r2, r3
    89a6:	f01c faa9 	bl	24efc <log_1>
		return;
    89aa:	e7d9      	b.n	8960 <enh_conn_complete+0x60>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    89ac:	7923      	ldrb	r3, [r4, #4]
    89ae:	3b02      	subs	r3, #2
    89b0:	2b01      	cmp	r3, #1
    89b2:	f104 0604 	add.w	r6, r4, #4
    89b6:	d844      	bhi.n	8a42 <enh_conn_complete+0x142>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    89b8:	4631      	mov	r1, r6
    89ba:	a802      	add	r0, sp, #8
    89bc:	f01e f9e9 	bl	26d92 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    89c0:	f89d 3008 	ldrb.w	r3, [sp, #8]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    89c4:	f104 0111 	add.w	r1, r4, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    89c8:	3b02      	subs	r3, #2
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    89ca:	f10d 0001 	add.w	r0, sp, #1
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    89ce:	f88d 3008 	strb.w	r3, [sp, #8]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    89d2:	f01e f9d9 	bl	26d88 <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    89d6:	2301      	movs	r3, #1
    89d8:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    89dc:	78e3      	ldrb	r3, [r4, #3]
    89de:	2b01      	cmp	r3, #1
    89e0:	d116      	bne.n	8a10 <enh_conn_complete+0x110>
    89e2:	a802      	add	r0, sp, #8
    89e4:	f7ff f914 	bl	7c10 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    89e8:	78e3      	ldrb	r3, [r4, #3]
    89ea:	2b01      	cmp	r3, #1
    89ec:	4605      	mov	r5, r0
    89ee:	d10e      	bne.n	8a0e <enh_conn_complete+0x10e>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    89f0:	f001 f8bc 	bl	9b6c <bt_le_adv_lookup_legacy>
    89f4:	f3bf 8f5b 	dmb	ish
    89f8:	3010      	adds	r0, #16
    89fa:	e850 3f00 	ldrex	r3, [r0]
    89fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    8a02:	e840 3200 	strex	r2, r3, [r0]
    8a06:	2a00      	cmp	r2, #0
    8a08:	d1f7      	bne.n	89fa <enh_conn_complete+0xfa>
    8a0a:	f3bf 8f5b 	dmb	ish
	if (!conn) {
    8a0e:	bbb5      	cbnz	r5, 8a7e <enh_conn_complete+0x17e>
    8a10:	f01e f972 	bl	26cf8 <arch_is_user_context>
    8a14:	4c3a      	ldr	r4, [pc, #232]	; (8b00 <enh_conn_complete+0x200>)
    8a16:	4b3b      	ldr	r3, [pc, #236]	; (8b04 <enh_conn_complete+0x204>)
    8a18:	1ae4      	subs	r4, r4, r3
    8a1a:	08e4      	lsrs	r4, r4, #3
		BT_ERR("No pending conn for peer %s",
    8a1c:	01a4      	lsls	r4, r4, #6
    8a1e:	f044 0401 	orr.w	r4, r4, #1
    8a22:	b308      	cbz	r0, 8a68 <enh_conn_complete+0x168>
    8a24:	4630      	mov	r0, r6
    8a26:	f7fe fba3 	bl	7170 <bt_addr_le_str_real>
    8a2a:	f7fb fbab 	bl	4184 <log_strdup>
    8a2e:	4938      	ldr	r1, [pc, #224]	; (8b10 <enh_conn_complete+0x210>)
    8a30:	4602      	mov	r2, r0
    8a32:	4620      	mov	r0, r4
    8a34:	f01c fa2f 	bl	24e96 <log_from_user>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    8a38:	211f      	movs	r1, #31
    8a3a:	4638      	mov	r0, r7
    8a3c:	f01e f9e0 	bl	26e00 <bt_hci_disconnect>
		return;
    8a40:	e78e      	b.n	8960 <enh_conn_complete+0x60>
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
    8a42:	78e3      	ldrb	r3, [r4, #3]
    8a44:	2b01      	cmp	r3, #1
    8a46:	bf04      	itt	eq
    8a48:	4b32      	ldreq	r3, [pc, #200]	; (8b14 <enh_conn_complete+0x214>)
    8a4a:	f893 5033 	ldrbeq.w	r5, [r3, #51]	; 0x33
		bt_addr_le_copy(&id_addr,
    8a4e:	4631      	mov	r1, r6
    8a50:	4628      	mov	r0, r5
    8a52:	f01e fb61 	bl	27118 <bt_lookup_id_addr>
    8a56:	4601      	mov	r1, r0
    8a58:	a802      	add	r0, sp, #8
    8a5a:	f01e f99a 	bl	26d92 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    8a5e:	4631      	mov	r1, r6
    8a60:	4668      	mov	r0, sp
    8a62:	f01e f996 	bl	26d92 <bt_addr_le_copy>
    8a66:	e7b9      	b.n	89dc <enh_conn_complete+0xdc>
		BT_ERR("No pending conn for peer %s",
    8a68:	4630      	mov	r0, r6
    8a6a:	f7fe fb81 	bl	7170 <bt_addr_le_str_real>
    8a6e:	f7fb fb89 	bl	4184 <log_strdup>
    8a72:	4622      	mov	r2, r4
    8a74:	4601      	mov	r1, r0
    8a76:	4826      	ldr	r0, [pc, #152]	; (8b10 <enh_conn_complete+0x210>)
    8a78:	f01c fa40 	bl	24efc <log_1>
    8a7c:	e7dc      	b.n	8a38 <enh_conn_complete+0x138>
	conn->handle = handle;
    8a7e:	4628      	mov	r0, r5
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    8a80:	a902      	add	r1, sp, #8
	conn->handle = handle;
    8a82:	f820 8b88 	strh.w	r8, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    8a86:	f01e f984 	bl	26d92 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    8a8a:	7e22      	ldrb	r2, [r4, #24]
    8a8c:	7de3      	ldrb	r3, [r4, #23]
    8a8e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    8a92:	f8a5 309e 	strh.w	r3, [r5, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    8a96:	7ea2      	ldrb	r2, [r4, #26]
    8a98:	7e63      	ldrb	r3, [r4, #25]
    8a9a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    8a9e:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    8aa2:	7ee3      	ldrb	r3, [r4, #27]
    8aa4:	7f22      	ldrb	r2, [r4, #28]
    8aa6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    8aaa:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->role = evt->role;
    8aae:	78e3      	ldrb	r3, [r4, #3]
    8ab0:	70eb      	strb	r3, [r5, #3]
	conn->err = 0U;
    8ab2:	2400      	movs	r4, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    8ab4:	2b01      	cmp	r3, #1
	conn->err = 0U;
    8ab6:	732c      	strb	r4, [r5, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    8ab8:	d118      	bne.n	8aec <enh_conn_complete+0x1ec>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    8aba:	4669      	mov	r1, sp
    8abc:	f105 008f 	add.w	r0, r5, #143	; 0x8f
    8ac0:	f01e f967 	bl	26d92 <bt_addr_le_copy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    8ac4:	f001 f852 	bl	9b6c <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
    8ac8:	7a29      	ldrb	r1, [r5, #8]
    8aca:	4a12      	ldr	r2, [pc, #72]	; (8b14 <enh_conn_complete+0x214>)
    8acc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
    8ad0:	4411      	add	r1, r2
    8ad2:	f105 0096 	add.w	r0, r5, #150	; 0x96
    8ad6:	f01e f95c 	bl	26d92 <bt_addr_le_copy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    8ada:	f8d2 10ac 	ldr.w	r1, [r2, #172]	; 0xac
    8ade:	4622      	mov	r2, r4
    8ae0:	f001 0340 	and.w	r3, r1, #64	; 0x40
    8ae4:	4313      	orrs	r3, r2
    8ae6:	d001      	beq.n	8aec <enh_conn_complete+0x1ec>
			bt_le_adv_resume();
    8ae8:	f001 f97c 	bl	9de4 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    8aec:	2107      	movs	r1, #7
    8aee:	4628      	mov	r0, r5
    8af0:	f001 fec6 	bl	a880 <bt_conn_set_state>
	conn_auto_initiate(conn);
    8af4:	4628      	mov	r0, r5
    8af6:	f7ff fdd9 	bl	86ac <conn_auto_initiate>
	bt_conn_unref(conn);
    8afa:	4628      	mov	r0, r5
    8afc:	e73d      	b.n	897a <enh_conn_complete+0x7a>
    8afe:	bf00      	nop
    8b00:	0002a7a8 	.word	0x0002a7a8
    8b04:	0002a6d0 	.word	0x0002a6d0
    8b08:	0002d7d0 	.word	0x0002d7d0
    8b0c:	0002d7ec 	.word	0x0002d7ec
    8b10:	0002d805 	.word	0x0002d805
    8b14:	20007600 	.word	0x20007600

00008b18 <bt_security_err_get>:
	switch (hci_err) {
    8b18:	2829      	cmp	r0, #41	; 0x29
    8b1a:	bf9a      	itte	ls
    8b1c:	4b01      	ldrls	r3, [pc, #4]	; (8b24 <bt_security_err_get+0xc>)
    8b1e:	5c18      	ldrbls	r0, [r3, r0]
{
    8b20:	2008      	movhi	r0, #8
}
    8b22:	4770      	bx	lr
    8b24:	0002d9d3 	.word	0x0002d9d3

00008b28 <hci_event_prio>:

#endif /* CONFIG_BT_CONN */
};

void hci_event_prio(struct net_buf *buf)
{
    8b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8b2c:	4604      	mov	r4, r0
	struct net_buf_simple_state state;
	struct bt_hci_evt_hdr *hdr;
	uint8_t evt_flags;

	net_buf_simple_save(&buf->b, &state);
    8b2e:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    8b32:	4630      	mov	r0, r6
    8b34:	f020 f8ee 	bl	28d14 <net_buf_simple_headroom>
	state->len = buf->len;
    8b38:	f8b4 800c 	ldrh.w	r8, [r4, #12]

	BT_ASSERT(buf->len >= sizeof(*hdr));
    8b3c:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
    8b40:	4605      	mov	r5, r0
    8b42:	d80c      	bhi.n	8b5e <hci_event_prio+0x36>
    8b44:	4a1c      	ldr	r2, [pc, #112]	; (8bb8 <hci_event_prio+0x90>)
    8b46:	491d      	ldr	r1, [pc, #116]	; (8bbc <hci_event_prio+0x94>)
    8b48:	481d      	ldr	r0, [pc, #116]	; (8bc0 <hci_event_prio+0x98>)
    8b4a:	f640 438f 	movw	r3, #3215	; 0xc8f
    8b4e:	f01b fd49 	bl	245e4 <printk>
    8b52:	4040      	eors	r0, r0
    8b54:	f380 8811 	msr	BASEPRI, r0
    8b58:	f04f 0003 	mov.w	r0, #3
    8b5c:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    8b5e:	2102      	movs	r1, #2
    8b60:	4630      	mov	r0, r6
    8b62:	f020 f8c7 	bl	28cf4 <net_buf_simple_pull_mem>
    8b66:	4607      	mov	r7, r0

	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    8b68:	7800      	ldrb	r0, [r0, #0]
    8b6a:	f01e f8cf 	bl	26d0c <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    8b6e:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    8b70:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    8b72:	d40c      	bmi.n	8b8e <hci_event_prio+0x66>
    8b74:	4a10      	ldr	r2, [pc, #64]	; (8bb8 <hci_event_prio+0x90>)
    8b76:	4913      	ldr	r1, [pc, #76]	; (8bc4 <hci_event_prio+0x9c>)
    8b78:	4811      	ldr	r0, [pc, #68]	; (8bc0 <hci_event_prio+0x98>)
    8b7a:	f640 4393 	movw	r3, #3219	; 0xc93
    8b7e:	f01b fd31 	bl	245e4 <printk>
    8b82:	4040      	eors	r0, r0
    8b84:	f380 8811 	msr	BASEPRI, r0
    8b88:	f04f 0003 	mov.w	r0, #3
    8b8c:	df02      	svc	2

	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    8b8e:	2305      	movs	r3, #5
    8b90:	4a0d      	ldr	r2, [pc, #52]	; (8bc8 <hci_event_prio+0xa0>)
    8b92:	7838      	ldrb	r0, [r7, #0]
    8b94:	4621      	mov	r1, r4
    8b96:	f7fe ffc9 	bl	7b2c <handle_event>

	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    8b9a:	07b3      	lsls	r3, r6, #30
    8b9c:	d507      	bpl.n	8bae <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
    8b9e:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    8ba0:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    8ba4:	fa10 f585 	uxtah	r5, r0, r5
    8ba8:	60a5      	str	r5, [r4, #8]
		net_buf_simple_restore(&buf->b, &state);
	} else {
		net_buf_unref(buf);
	}
}
    8baa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    8bae:	4620      	mov	r0, r4
}
    8bb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    8bb4:	f013 be20 	b.w	1c7f8 <net_buf_unref>
    8bb8:	0002d52a 	.word	0x0002d52a
    8bbc:	0002d821 	.word	0x0002d821
    8bc0:	0002d567 	.word	0x0002d567
    8bc4:	0002d83a 	.word	0x0002d83a
    8bc8:	0002ada8 	.word	0x0002ada8

00008bcc <bt_recv>:

int bt_recv(struct net_buf *buf)
{
    8bcc:	b570      	push	{r4, r5, r6, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    8bce:	7d03      	ldrb	r3, [r0, #20]
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_DBG("buf %p len %u", buf, buf->len);

	switch (bt_buf_get_type(buf)) {
    8bd0:	2b01      	cmp	r3, #1
{
    8bd2:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    8bd4:	d062      	beq.n	8c9c <bt_recv+0xd0>
    8bd6:	2b03      	cmp	r3, #3
    8bd8:	f040 808f 	bne.w	8cfa <bt_recv+0x12e>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    8bdc:	8983      	ldrh	r3, [r0, #12]
    8bde:	2b03      	cmp	r3, #3
    8be0:	d80c      	bhi.n	8bfc <bt_recv+0x30>
    8be2:	4a53      	ldr	r2, [pc, #332]	; (8d30 <bt_recv+0x164>)
    8be4:	4953      	ldr	r1, [pc, #332]	; (8d34 <bt_recv+0x168>)
    8be6:	4854      	ldr	r0, [pc, #336]	; (8d38 <bt_recv+0x16c>)
    8be8:	f240 137d 	movw	r3, #381	; 0x17d
    8bec:	f01b fcfa 	bl	245e4 <printk>
    8bf0:	4040      	eors	r0, r0
    8bf2:	f380 8811 	msr	BASEPRI, r0
    8bf6:	f04f 0003 	mov.w	r0, #3
    8bfa:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    8bfc:	2104      	movs	r1, #4
    8bfe:	f104 0008 	add.w	r0, r4, #8
    8c02:	f020 f877 	bl	28cf4 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    8c06:	23ff      	movs	r3, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
    8c08:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    8c0a:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    8c0c:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
    8c0e:	89a3      	ldrh	r3, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
    8c10:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    8c14:	4293      	cmp	r3, r2
	acl(buf)->handle = bt_acl_handle(handle);
    8c16:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
    8c18:	d019      	beq.n	8c4e <bt_recv+0x82>
    8c1a:	f01e f86d 	bl	26cf8 <arch_is_user_context>
    8c1e:	4d47      	ldr	r5, [pc, #284]	; (8d3c <bt_recv+0x170>)
    8c20:	4b47      	ldr	r3, [pc, #284]	; (8d40 <bt_recv+0x174>)
    8c22:	89a1      	ldrh	r1, [r4, #12]
    8c24:	1aed      	subs	r5, r5, r3
    8c26:	08ed      	lsrs	r5, r5, #3
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    8c28:	01ad      	lsls	r5, r5, #6
    8c2a:	f045 0501 	orr.w	r5, r5, #1
    8c2e:	b148      	cbz	r0, 8c44 <bt_recv+0x78>
    8c30:	4613      	mov	r3, r2
    8c32:	4628      	mov	r0, r5
    8c34:	460a      	mov	r2, r1
    8c36:	4943      	ldr	r1, [pc, #268]	; (8d44 <bt_recv+0x178>)
    8c38:	f01c f92d 	bl	24e96 <log_from_user>
	net_buf_unref(buf);
    8c3c:	4620      	mov	r0, r4
    8c3e:	f013 fddb 	bl	1c7f8 <net_buf_unref>
    8c42:	e029      	b.n	8c98 <bt_recv+0xcc>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    8c44:	483f      	ldr	r0, [pc, #252]	; (8d44 <bt_recv+0x178>)
    8c46:	462b      	mov	r3, r5
    8c48:	f01c f96c 	bl	24f24 <log_2>
		net_buf_unref(buf);
    8c4c:	e7f6      	b.n	8c3c <bt_recv+0x70>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    8c4e:	f001 fe0b 	bl	a868 <bt_conn_lookup_handle>
	if (!conn) {
    8c52:	4605      	mov	r5, r0
    8c54:	b9a8      	cbnz	r0, 8c82 <bt_recv+0xb6>
    8c56:	f01e f84f 	bl	26cf8 <arch_is_user_context>
    8c5a:	4b38      	ldr	r3, [pc, #224]	; (8d3c <bt_recv+0x170>)
    8c5c:	4a38      	ldr	r2, [pc, #224]	; (8d40 <bt_recv+0x174>)
    8c5e:	8ae1      	ldrh	r1, [r4, #22]
    8c60:	1a9b      	subs	r3, r3, r2
    8c62:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    8c64:	019b      	lsls	r3, r3, #6
    8c66:	f043 0301 	orr.w	r3, r3, #1
    8c6a:	b128      	cbz	r0, 8c78 <bt_recv+0xac>
    8c6c:	460a      	mov	r2, r1
    8c6e:	4618      	mov	r0, r3
    8c70:	4935      	ldr	r1, [pc, #212]	; (8d48 <bt_recv+0x17c>)
    8c72:	f01c f910 	bl	24e96 <log_from_user>
    8c76:	e7e1      	b.n	8c3c <bt_recv+0x70>
    8c78:	4833      	ldr	r0, [pc, #204]	; (8d48 <bt_recv+0x17c>)
    8c7a:	461a      	mov	r2, r3
    8c7c:	f01c f93e 	bl	24efc <log_1>
		net_buf_unref(buf);
    8c80:	e7dc      	b.n	8c3c <bt_recv+0x70>
	acl(buf)->index = bt_conn_index(conn);
    8c82:	f002 f8ef 	bl	ae64 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    8c86:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
    8c88:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    8c8a:	4621      	mov	r1, r4
    8c8c:	4628      	mov	r0, r5
    8c8e:	f001 fc3b 	bl	a508 <bt_conn_recv>
	bt_conn_unref(conn);
    8c92:	4628      	mov	r0, r5
    8c94:	f01e fc35 	bl	27502 <bt_conn_unref>

		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
			net_buf_put(&bt_dev.rx_queue, buf);
		}
#endif
		return 0;
    8c98:	2000      	movs	r0, #0
	default:
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
		return -EINVAL;
	}
}
    8c9a:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    8c9c:	8983      	ldrh	r3, [r0, #12]
    8c9e:	2b01      	cmp	r3, #1
    8ca0:	d80c      	bhi.n	8cbc <bt_recv+0xf0>
    8ca2:	4a23      	ldr	r2, [pc, #140]	; (8d30 <bt_recv+0x164>)
    8ca4:	4923      	ldr	r1, [pc, #140]	; (8d34 <bt_recv+0x168>)
    8ca6:	4824      	ldr	r0, [pc, #144]	; (8d38 <bt_recv+0x16c>)
    8ca8:	f640 03b2 	movw	r3, #2226	; 0x8b2
    8cac:	f01b fc9a 	bl	245e4 <printk>
    8cb0:	4040      	eors	r0, r0
    8cb2:	f380 8811 	msr	BASEPRI, r0
    8cb6:	f04f 0003 	mov.w	r0, #3
    8cba:	df02      	svc	2
    8cbc:	2102      	movs	r1, #2
    8cbe:	f104 0008 	add.w	r0, r4, #8
    8cc2:	f020 f817 	bl	28cf4 <net_buf_simple_pull_mem>
    8cc6:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    8cc8:	7800      	ldrb	r0, [r0, #0]
    8cca:	f01e f81f 	bl	26d0c <bt_hci_evt_get_flags>
    8cce:	0783      	lsls	r3, r0, #30
    8cd0:	d40c      	bmi.n	8cec <bt_recv+0x120>
    8cd2:	4a17      	ldr	r2, [pc, #92]	; (8d30 <bt_recv+0x164>)
    8cd4:	491d      	ldr	r1, [pc, #116]	; (8d4c <bt_recv+0x180>)
    8cd6:	4818      	ldr	r0, [pc, #96]	; (8d38 <bt_recv+0x16c>)
    8cd8:	f640 03b6 	movw	r3, #2230	; 0x8b6
    8cdc:	f01b fc82 	bl	245e4 <printk>
    8ce0:	4040      	eors	r0, r0
    8ce2:	f380 8811 	msr	BASEPRI, r0
    8ce6:	f04f 0003 	mov.w	r0, #3
    8cea:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    8cec:	4a18      	ldr	r2, [pc, #96]	; (8d50 <bt_recv+0x184>)
    8cee:	7828      	ldrb	r0, [r5, #0]
    8cf0:	2306      	movs	r3, #6
    8cf2:	4621      	mov	r1, r4
    8cf4:	f7fe ff1a 	bl	7b2c <handle_event>
    8cf8:	e7a0      	b.n	8c3c <bt_recv+0x70>
    8cfa:	f01d fffd 	bl	26cf8 <arch_is_user_context>
    8cfe:	4b0f      	ldr	r3, [pc, #60]	; (8d3c <bt_recv+0x170>)
    8d00:	4a0f      	ldr	r2, [pc, #60]	; (8d40 <bt_recv+0x174>)
    8d02:	7d21      	ldrb	r1, [r4, #20]
    8d04:	1a9b      	subs	r3, r3, r2
    8d06:	08db      	lsrs	r3, r3, #3
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    8d08:	019b      	lsls	r3, r3, #6
    8d0a:	f043 0301 	orr.w	r3, r3, #1
    8d0e:	b150      	cbz	r0, 8d26 <bt_recv+0x15a>
    8d10:	460a      	mov	r2, r1
    8d12:	4618      	mov	r0, r3
    8d14:	490f      	ldr	r1, [pc, #60]	; (8d54 <bt_recv+0x188>)
    8d16:	f01c f8be 	bl	24e96 <log_from_user>
		net_buf_unref(buf);
    8d1a:	4620      	mov	r0, r4
    8d1c:	f013 fd6c 	bl	1c7f8 <net_buf_unref>
		return -EINVAL;
    8d20:	f06f 0015 	mvn.w	r0, #21
    8d24:	e7b9      	b.n	8c9a <bt_recv+0xce>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    8d26:	480b      	ldr	r0, [pc, #44]	; (8d54 <bt_recv+0x188>)
    8d28:	461a      	mov	r2, r3
    8d2a:	f01c f8e7 	bl	24efc <log_1>
    8d2e:	e7f4      	b.n	8d1a <bt_recv+0x14e>
    8d30:	0002d52a 	.word	0x0002d52a
    8d34:	0002d821 	.word	0x0002d821
    8d38:	0002d567 	.word	0x0002d567
    8d3c:	0002a7a8 	.word	0x0002a7a8
    8d40:	0002a6d0 	.word	0x0002a6d0
    8d44:	0002d853 	.word	0x0002d853
    8d48:	0002d877 	.word	0x0002d877
    8d4c:	0002d899 	.word	0x0002d899
    8d50:	0002ad68 	.word	0x0002ad68
    8d54:	0002d8c7 	.word	0x0002d8c7

00008d58 <bt_recv_prio>:

#if defined(CONFIG_BT_RECV_IS_RX_THREAD)
int bt_recv_prio(struct net_buf *buf)
{
    8d58:	b510      	push	{r4, lr}
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    8d5a:	7d03      	ldrb	r3, [r0, #20]
    8d5c:	2b01      	cmp	r3, #1
{
    8d5e:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    8d60:	d00c      	beq.n	8d7c <bt_recv_prio+0x24>
    8d62:	4a09      	ldr	r2, [pc, #36]	; (8d88 <bt_recv_prio+0x30>)
    8d64:	4909      	ldr	r1, [pc, #36]	; (8d8c <bt_recv_prio+0x34>)
    8d66:	480a      	ldr	r0, [pc, #40]	; (8d90 <bt_recv_prio+0x38>)
    8d68:	f640 43d6 	movw	r3, #3286	; 0xcd6
    8d6c:	f01b fc3a 	bl	245e4 <printk>
    8d70:	4040      	eors	r0, r0
    8d72:	f380 8811 	msr	BASEPRI, r0
    8d76:	f04f 0003 	mov.w	r0, #3
    8d7a:	df02      	svc	2

	hci_event_prio(buf);
    8d7c:	4620      	mov	r0, r4
    8d7e:	f7ff fed3 	bl	8b28 <hci_event_prio>

	return 0;
}
    8d82:	2000      	movs	r0, #0
    8d84:	bd10      	pop	{r4, pc}
    8d86:	bf00      	nop
    8d88:	0002d52a 	.word	0x0002d52a
    8d8c:	0002d8db 	.word	0x0002d8db
    8d90:	0002d567 	.word	0x0002d567

00008d94 <bt_hci_driver_register>:
#endif /* defined(CONFIG_BT_RECV_IS_RX_THREAD) */

int bt_hci_driver_register(const struct bt_hci_driver *drv)
{
	if (bt_dev.drv) {
    8d94:	4a08      	ldr	r2, [pc, #32]	; (8db8 <bt_hci_driver_register+0x24>)
{
    8d96:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    8d98:	f8d2 0124 	ldr.w	r0, [r2, #292]	; 0x124
    8d9c:	b930      	cbnz	r0, 8dac <bt_hci_driver_register+0x18>
		return -EALREADY;
	}

	if (!drv->open || !drv->send) {
    8d9e:	68d9      	ldr	r1, [r3, #12]
    8da0:	b139      	cbz	r1, 8db2 <bt_hci_driver_register+0x1e>
    8da2:	6919      	ldr	r1, [r3, #16]
    8da4:	b129      	cbz	r1, 8db2 <bt_hci_driver_register+0x1e>
		return -EINVAL;
	}

	bt_dev.drv = drv;
    8da6:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
	BT_DBG("Registered %s", drv->name ? drv->name : "");

	bt_monitor_new_index(BT_MONITOR_TYPE_PRIMARY, drv->bus,
			     BT_ADDR_ANY, drv->name ? drv->name : "bt0");

	return 0;
    8daa:	4770      	bx	lr
		return -EALREADY;
    8dac:	f06f 0077 	mvn.w	r0, #119	; 0x77
    8db0:	4770      	bx	lr
		return -EINVAL;
    8db2:	f06f 0015 	mvn.w	r0, #21
}
    8db6:	4770      	bx	lr
    8db8:	20007600 	.word	0x20007600

00008dbc <bt_finalize_init>:

void bt_finalize_init(void)
{
    8dbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8dc0:	4c54      	ldr	r4, [pc, #336]	; (8f14 <bt_finalize_init+0x158>)
    8dc2:	f3bf 8f5b 	dmb	ish
    8dc6:	b087      	sub	sp, #28
    8dc8:	f104 0398 	add.w	r3, r4, #152	; 0x98
    8dcc:	e853 2f00 	ldrex	r2, [r3]
    8dd0:	f042 0202 	orr.w	r2, r2, #2
    8dd4:	e843 2100 	strex	r1, r2, [r3]
    8dd8:	2900      	cmp	r1, #0
    8dda:	d1f7      	bne.n	8dcc <bt_finalize_init+0x10>
    8ddc:	f3bf 8f5b 	dmb	ish
    8de0:	f01d ff8a 	bl	26cf8 <arch_is_user_context>
    8de4:	4d4c      	ldr	r5, [pc, #304]	; (8f18 <bt_finalize_init+0x15c>)
    8de6:	4b4d      	ldr	r3, [pc, #308]	; (8f1c <bt_finalize_init+0x160>)
    8de8:	79e2      	ldrb	r2, [r4, #7]
    8dea:	1aed      	subs	r5, r5, r3
    8dec:	08ed      	lsrs	r5, r5, #3
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    8dee:	01ad      	lsls	r5, r5, #6
    8df0:	f045 0703 	orr.w	r7, r5, #3
    8df4:	2800      	cmp	r0, #0
    8df6:	d044      	beq.n	8e82 <bt_finalize_init+0xc6>
    8df8:	4949      	ldr	r1, [pc, #292]	; (8f20 <bt_finalize_init+0x164>)
    8dfa:	4e4a      	ldr	r6, [pc, #296]	; (8f24 <bt_finalize_init+0x168>)
    8dfc:	4620      	mov	r0, r4
    8dfe:	2a01      	cmp	r2, #1
    8e00:	bf98      	it	ls
    8e02:	460e      	movls	r6, r1
    8e04:	f7fe f9b4 	bl	7170 <bt_addr_le_str_real>
    8e08:	f7fb f9bc 	bl	4184 <log_strdup>
    8e0c:	4946      	ldr	r1, [pc, #280]	; (8f28 <bt_finalize_init+0x16c>)
    8e0e:	4603      	mov	r3, r0
    8e10:	4632      	mov	r2, r6
    8e12:	4638      	mov	r0, r7
    8e14:	f01c f83f 	bl	24e96 <log_from_user>
		BT_INFO("Identity[%d]: %s",
    8e18:	f8df 8118 	ldr.w	r8, [pc, #280]	; 8f34 <bt_finalize_init+0x178>
	for (i = 1; i < bt_dev.id_count; i++) {
    8e1c:	2601      	movs	r6, #1
		BT_INFO("Identity[%d]: %s",
    8e1e:	f045 0703 	orr.w	r7, r5, #3
	for (i = 1; i < bt_dev.id_count; i++) {
    8e22:	79e3      	ldrb	r3, [r4, #7]
    8e24:	429e      	cmp	r6, r3
    8e26:	db3d      	blt.n	8ea4 <bt_finalize_init+0xe8>
    8e28:	f01d ff66 	bl	26cf8 <arch_is_user_context>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    8e2c:	f045 0703 	orr.w	r7, r5, #3
    8e30:	f894 6034 	ldrb.w	r6, [r4, #52]	; 0x34
    8e34:	f8b4 803a 	ldrh.w	r8, [r4, #58]	; 0x3a
    8e38:	f8b4 9036 	ldrh.w	r9, [r4, #54]	; 0x36
    8e3c:	2800      	cmp	r0, #0
    8e3e:	d04f      	beq.n	8ee0 <bt_finalize_init+0x124>
    8e40:	4630      	mov	r0, r6
    8e42:	f7fe fc87 	bl	7754 <ver_str>
    8e46:	e9cd 9800 	strd	r9, r8, [sp]
    8e4a:	4602      	mov	r2, r0
    8e4c:	4937      	ldr	r1, [pc, #220]	; (8f2c <bt_finalize_init+0x170>)
    8e4e:	4633      	mov	r3, r6
    8e50:	4638      	mov	r0, r7
    8e52:	f01c f820 	bl	24e96 <log_from_user>
    8e56:	f01d ff4f 	bl	26cf8 <arch_is_user_context>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    8e5a:	f045 0503 	orr.w	r5, r5, #3
    8e5e:	f894 6035 	ldrb.w	r6, [r4, #53]	; 0x35
    8e62:	2800      	cmp	r0, #0
    8e64:	d04a      	beq.n	8efc <bt_finalize_init+0x140>
    8e66:	4630      	mov	r0, r6
    8e68:	f7fe fc74 	bl	7754 <ver_str>
    8e6c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
    8e6e:	9300      	str	r3, [sp, #0]
    8e70:	4602      	mov	r2, r0
    8e72:	492f      	ldr	r1, [pc, #188]	; (8f30 <bt_finalize_init+0x174>)
    8e74:	4633      	mov	r3, r6
    8e76:	4628      	mov	r0, r5
    8e78:	f01c f80d 	bl	24e96 <log_from_user>
	if (IS_ENABLED(CONFIG_BT_OBSERVER)) {
		bt_le_scan_update(false);
	}

	bt_dev_show_info();
}
    8e7c:	b007      	add	sp, #28
    8e7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    8e82:	4928      	ldr	r1, [pc, #160]	; (8f24 <bt_finalize_init+0x168>)
    8e84:	4e26      	ldr	r6, [pc, #152]	; (8f20 <bt_finalize_init+0x164>)
    8e86:	4620      	mov	r0, r4
    8e88:	2a01      	cmp	r2, #1
    8e8a:	bf88      	it	hi
    8e8c:	460e      	movhi	r6, r1
    8e8e:	f7fe f96f 	bl	7170 <bt_addr_le_str_real>
    8e92:	f7fb f977 	bl	4184 <log_strdup>
    8e96:	463b      	mov	r3, r7
    8e98:	4602      	mov	r2, r0
    8e9a:	4631      	mov	r1, r6
    8e9c:	4822      	ldr	r0, [pc, #136]	; (8f28 <bt_finalize_init+0x16c>)
    8e9e:	f01c f841 	bl	24f24 <log_2>
    8ea2:	e7b9      	b.n	8e18 <bt_finalize_init+0x5c>
    8ea4:	f01d ff28 	bl	26cf8 <arch_is_user_context>
    8ea8:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
    8eac:	4602      	mov	r2, r0
		BT_INFO("Identity[%d]: %s",
    8eae:	18e0      	adds	r0, r4, r3
    8eb0:	b15a      	cbz	r2, 8eca <bt_finalize_init+0x10e>
    8eb2:	f7fe f95d 	bl	7170 <bt_addr_le_str_real>
    8eb6:	f7fb f965 	bl	4184 <log_strdup>
    8eba:	4632      	mov	r2, r6
    8ebc:	4603      	mov	r3, r0
    8ebe:	4641      	mov	r1, r8
    8ec0:	4638      	mov	r0, r7
    8ec2:	f01b ffe8 	bl	24e96 <log_from_user>
	for (i = 1; i < bt_dev.id_count; i++) {
    8ec6:	3601      	adds	r6, #1
    8ec8:	e7ab      	b.n	8e22 <bt_finalize_init+0x66>
		BT_INFO("Identity[%d]: %s",
    8eca:	f7fe f951 	bl	7170 <bt_addr_le_str_real>
    8ece:	f7fb f959 	bl	4184 <log_strdup>
    8ed2:	463b      	mov	r3, r7
    8ed4:	4602      	mov	r2, r0
    8ed6:	4631      	mov	r1, r6
    8ed8:	4640      	mov	r0, r8
    8eda:	f01c f823 	bl	24f24 <log_2>
    8ede:	e7f2      	b.n	8ec6 <bt_finalize_init+0x10a>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    8ee0:	4630      	mov	r0, r6
    8ee2:	f7fe fc37 	bl	7754 <ver_str>
    8ee6:	463b      	mov	r3, r7
    8ee8:	e9cd 0602 	strd	r0, r6, [sp, #8]
    8eec:	2204      	movs	r2, #4
    8eee:	480f      	ldr	r0, [pc, #60]	; (8f2c <bt_finalize_init+0x170>)
    8ef0:	a902      	add	r1, sp, #8
    8ef2:	e9cd 9804 	strd	r9, r8, [sp, #16]
    8ef6:	f01c f84a 	bl	24f8e <log_n>
    8efa:	e7ac      	b.n	8e56 <bt_finalize_init+0x9a>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    8efc:	4630      	mov	r0, r6
    8efe:	f7fe fc29 	bl	7754 <ver_str>
    8f02:	8f23      	ldrh	r3, [r4, #56]	; 0x38
    8f04:	f8ad 5000 	strh.w	r5, [sp]
    8f08:	4601      	mov	r1, r0
    8f0a:	4632      	mov	r2, r6
    8f0c:	4808      	ldr	r0, [pc, #32]	; (8f30 <bt_finalize_init+0x174>)
    8f0e:	f01c f822 	bl	24f56 <log_3>
}
    8f12:	e7b3      	b.n	8e7c <bt_finalize_init+0xc0>
    8f14:	20007600 	.word	0x20007600
    8f18:	0002a7a8 	.word	0x0002a7a8
    8f1c:	0002a6d0 	.word	0x0002a6d0
    8f20:	0002cb51 	.word	0x0002cb51
    8f24:	0002d8fe 	.word	0x0002d8fe
    8f28:	0002d902 	.word	0x0002d902
    8f2c:	0002d922 	.word	0x0002d922
    8f30:	0002d960 	.word	0x0002d960
    8f34:	0002d911 	.word	0x0002d911

00008f38 <init_work>:
	bt_finalize_init();
	return 0;
}

static void init_work(struct k_work *work)
{
    8f38:	b510      	push	{r4, lr}
	err = hci_init();
    8f3a:	f7f7 ff8d 	bl	e58 <hci_init>
	if (err) {
    8f3e:	4604      	mov	r4, r0
    8f40:	b928      	cbnz	r0, 8f4e <init_work+0x16>
		err = bt_conn_init();
    8f42:	f001 ff9b 	bl	ae7c <bt_conn_init>
		if (err) {
    8f46:	4604      	mov	r4, r0
    8f48:	b908      	cbnz	r0, 8f4e <init_work+0x16>
	bt_finalize_init();
    8f4a:	f7ff ff37 	bl	8dbc <bt_finalize_init>
	int err;

	err = bt_init();
	if (ready_cb) {
    8f4e:	4b04      	ldr	r3, [pc, #16]	; (8f60 <init_work+0x28>)
    8f50:	681b      	ldr	r3, [r3, #0]
    8f52:	b11b      	cbz	r3, 8f5c <init_work+0x24>
		ready_cb(err);
    8f54:	4620      	mov	r0, r4
	}
}
    8f56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    8f5a:	4718      	bx	r3
}
    8f5c:	bd10      	pop	{r4, pc}
    8f5e:	bf00      	nop
    8f60:	20000e20 	.word	0x20000e20

00008f64 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    8f64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int err;

	if (!bt_dev.drv) {
    8f68:	4b4a      	ldr	r3, [pc, #296]	; (9094 <bt_enable+0x130>)
    8f6a:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
{
    8f6e:	b08f      	sub	sp, #60	; 0x3c
    8f70:	4607      	mov	r7, r0
    8f72:	4699      	mov	r9, r3
	if (!bt_dev.drv) {
    8f74:	b9c2      	cbnz	r2, 8fa8 <bt_enable+0x44>
    8f76:	f01d febf 	bl	26cf8 <arch_is_user_context>
    8f7a:	4b47      	ldr	r3, [pc, #284]	; (9098 <bt_enable+0x134>)
    8f7c:	4a47      	ldr	r2, [pc, #284]	; (909c <bt_enable+0x138>)
    8f7e:	1a9b      	subs	r3, r3, r2
    8f80:	08db      	lsrs	r3, r3, #3
		BT_ERR("No HCI driver registered");
    8f82:	019b      	lsls	r3, r3, #6
    8f84:	f043 0301 	orr.w	r3, r3, #1
    8f88:	b148      	cbz	r0, 8f9e <bt_enable+0x3a>
    8f8a:	4945      	ldr	r1, [pc, #276]	; (90a0 <bt_enable+0x13c>)
    8f8c:	4618      	mov	r0, r3
    8f8e:	f01b ff82 	bl	24e96 <log_from_user>
		return -ENODEV;
    8f92:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    8f96:	4620      	mov	r0, r4
    8f98:	b00f      	add	sp, #60	; 0x3c
    8f9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_ERR("No HCI driver registered");
    8f9e:	4840      	ldr	r0, [pc, #256]	; (90a0 <bt_enable+0x13c>)
    8fa0:	4619      	mov	r1, r3
    8fa2:	f01b ff9e 	bl	24ee2 <log_0>
    8fa6:	e7f4      	b.n	8f92 <bt_enable+0x2e>
    8fa8:	3398      	adds	r3, #152	; 0x98
    8faa:	f3bf 8f5b 	dmb	ish
    8fae:	e853 4f00 	ldrex	r4, [r3]
    8fb2:	f044 0201 	orr.w	r2, r4, #1
    8fb6:	e843 2100 	strex	r1, r2, [r3]
    8fba:	2900      	cmp	r1, #0
    8fbc:	d1f7      	bne.n	8fae <bt_enable+0x4a>
    8fbe:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    8fc2:	f014 0401 	ands.w	r4, r4, #1
    8fc6:	d162      	bne.n	908e <bt_enable+0x12a>
	ready_cb = cb;
    8fc8:	4b36      	ldr	r3, [pc, #216]	; (90a4 <bt_enable+0x140>)
    8fca:	601f      	str	r7, [r3, #0]
	ret = arch_is_user_context();
    8fcc:	f01d fe94 	bl	26cf8 <arch_is_user_context>
	return ret;
    8fd0:	f06f 0308 	mvn.w	r3, #8
	if (z_syscall_trap()) {
    8fd4:	b360      	cbz	r0, 9030 <bt_enable+0xcc>
		uintptr_t more[] = {
    8fd6:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
    8fda:	e9cd 4408 	strd	r4, r4, [sp, #32]
    8fde:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
	register uint32_t ret __asm__("r0") = arg1;
    8fe2:	4831      	ldr	r0, [pc, #196]	; (90a8 <bt_enable+0x144>)
	register uint32_t r1 __asm__("r1") = arg2;
    8fe4:	4931      	ldr	r1, [pc, #196]	; (90ac <bt_enable+0x148>)
	register uint32_t r3 __asm__("r3") = arg4;
    8fe6:	4b32      	ldr	r3, [pc, #200]	; (90b0 <bt_enable+0x14c>)
	register uint32_t r2 __asm__("r2") = arg3;
    8fe8:	f44f 7220 	mov.w	r2, #640	; 0x280
	register uint32_t r5 __asm__("r5") = arg6;
    8fec:	ad08      	add	r5, sp, #32
	register uint32_t r6 __asm__("r6") = call_id;
    8fee:	26aa      	movs	r6, #170	; 0xaa
	__asm__ volatile("svc %[svid]\n"
    8ff0:	df03      	svc	3
	ret = arch_is_user_context();
    8ff2:	f01d fe81 	bl	26cf8 <arch_is_user_context>
	if (z_syscall_trap()) {
    8ff6:	b360      	cbz	r0, 9052 <bt_enable+0xee>
	register uint32_t ret __asm__("r0") = arg1;
    8ff8:	482b      	ldr	r0, [pc, #172]	; (90a8 <bt_enable+0x144>)
	register uint32_t r1 __asm__("r1") = arg2;
    8ffa:	492e      	ldr	r1, [pc, #184]	; (90b4 <bt_enable+0x150>)
	register uint32_t r6 __asm__("r6") = call_id;
    8ffc:	26b0      	movs	r6, #176	; 0xb0
	__asm__ volatile("svc %[svid]\n"
    8ffe:	df03      	svc	3
		bt_hci_ecc_init();
    9000:	f7fe fac6 	bl	7590 <bt_hci_ecc_init>
	err = bt_dev.drv->open();
    9004:	f8d9 3124 	ldr.w	r3, [r9, #292]	; 0x124
    9008:	68db      	ldr	r3, [r3, #12]
    900a:	4798      	blx	r3
	if (err) {
    900c:	4604      	mov	r4, r0
    900e:	b358      	cbz	r0, 9068 <bt_enable+0x104>
	return arch_is_user_context();
    9010:	f01d fe72 	bl	26cf8 <arch_is_user_context>
    9014:	4b20      	ldr	r3, [pc, #128]	; (9098 <bt_enable+0x134>)
    9016:	4a21      	ldr	r2, [pc, #132]	; (909c <bt_enable+0x138>)
    9018:	1a9b      	subs	r3, r3, r2
    901a:	08db      	lsrs	r3, r3, #3
		BT_ERR("HCI driver open failed (%d)", err);
    901c:	019b      	lsls	r3, r3, #6
    901e:	f043 0301 	orr.w	r3, r3, #1
    9022:	b1d8      	cbz	r0, 905c <bt_enable+0xf8>
    9024:	4924      	ldr	r1, [pc, #144]	; (90b8 <bt_enable+0x154>)
    9026:	4622      	mov	r2, r4
    9028:	4618      	mov	r0, r3
    902a:	f01b ff34 	bl	24e96 <log_from_user>
    902e:	e7b2      	b.n	8f96 <bt_enable+0x32>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    9030:	2400      	movs	r4, #0
    9032:	2500      	movs	r5, #0
    9034:	e9cd 3003 	strd	r3, r0, [sp, #12]
    9038:	e9cd 0001 	strd	r0, r0, [sp, #4]
    903c:	9000      	str	r0, [sp, #0]
    903e:	e9cd 4506 	strd	r4, r5, [sp, #24]
    9042:	4b1b      	ldr	r3, [pc, #108]	; (90b0 <bt_enable+0x14c>)
    9044:	4919      	ldr	r1, [pc, #100]	; (90ac <bt_enable+0x148>)
    9046:	4818      	ldr	r0, [pc, #96]	; (90a8 <bt_enable+0x144>)
    9048:	f44f 7220 	mov.w	r2, #640	; 0x280
    904c:	f020 fd45 	bl	29ada <z_impl_k_thread_create>
    9050:	e7cf      	b.n	8ff2 <bt_enable+0x8e>
	return z_impl_k_thread_name_set(thread, str);
    9052:	4918      	ldr	r1, [pc, #96]	; (90b4 <bt_enable+0x150>)
    9054:	4814      	ldr	r0, [pc, #80]	; (90a8 <bt_enable+0x144>)
    9056:	f020 fd32 	bl	29abe <z_impl_k_thread_name_set>
    905a:	e7d1      	b.n	9000 <bt_enable+0x9c>
    905c:	4816      	ldr	r0, [pc, #88]	; (90b8 <bt_enable+0x154>)
    905e:	461a      	mov	r2, r3
    9060:	4621      	mov	r1, r4
    9062:	f01b ff4b 	bl	24efc <log_1>
		return err;
    9066:	e796      	b.n	8f96 <bt_enable+0x32>
	if (!cb) {
    9068:	b967      	cbnz	r7, 9084 <bt_enable+0x120>
	err = hci_init();
    906a:	f7f7 fef5 	bl	e58 <hci_init>
	if (err) {
    906e:	4604      	mov	r4, r0
    9070:	2800      	cmp	r0, #0
    9072:	d190      	bne.n	8f96 <bt_enable+0x32>
		err = bt_conn_init();
    9074:	f001 ff02 	bl	ae7c <bt_conn_init>
		if (err) {
    9078:	4604      	mov	r4, r0
    907a:	2800      	cmp	r0, #0
    907c:	d18b      	bne.n	8f96 <bt_enable+0x32>
	bt_finalize_init();
    907e:	f7ff fe9d 	bl	8dbc <bt_finalize_init>
	return 0;
    9082:	e788      	b.n	8f96 <bt_enable+0x32>
    9084:	490d      	ldr	r1, [pc, #52]	; (90bc <bt_enable+0x158>)
    9086:	480e      	ldr	r0, [pc, #56]	; (90c0 <bt_enable+0x15c>)
    9088:	f020 fdb7 	bl	29bfa <k_work_submit_to_queue>
    908c:	e783      	b.n	8f96 <bt_enable+0x32>
		return -EALREADY;
    908e:	f06f 0477 	mvn.w	r4, #119	; 0x77
    9092:	e780      	b.n	8f96 <bt_enable+0x32>
    9094:	20007600 	.word	0x20007600
    9098:	0002a7a8 	.word	0x0002a7a8
    909c:	0002a6d0 	.word	0x0002a6d0
    90a0:	0002d987 	.word	0x0002d987
    90a4:	20000e20 	.word	0x20000e20
    90a8:	20000198 	.word	0x20000198
    90ac:	20003750 	.word	0x20003750
    90b0:	00007e1d 	.word	0x00007e1d
    90b4:	0002d9a0 	.word	0x0002d9a0
    90b8:	0002d9a6 	.word	0x0002d9a6
    90bc:	20007688 	.word	0x20007688
    90c0:	20000ac0 	.word	0x20000ac0

000090c4 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
    90c4:	4800      	ldr	r0, [pc, #0]	; (90c8 <bt_get_name+0x4>)
    90c6:	4770      	bx	lr
    90c8:	0002d9c2 	.word	0x0002d9c2

000090cc <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
    90cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    90ce:	4f0b      	ldr	r7, [pc, #44]	; (90fc <id_find+0x30>)
{
    90d0:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    90d2:	2500      	movs	r5, #0
    90d4:	79fb      	ldrb	r3, [r7, #7]
    90d6:	b2ec      	uxtb	r4, r5
    90d8:	42a3      	cmp	r3, r4
    90da:	d802      	bhi.n	90e2 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    90dc:	f06f 0401 	mvn.w	r4, #1
    90e0:	e009      	b.n	90f6 <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    90e2:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
    90e6:	2207      	movs	r2, #7
    90e8:	4439      	add	r1, r7
    90ea:	4630      	mov	r0, r6
    90ec:	f021 f96a 	bl	2a3c4 <memcmp>
    90f0:	3501      	adds	r5, #1
    90f2:	2800      	cmp	r0, #0
    90f4:	d1ee      	bne.n	90d4 <id_find+0x8>
}
    90f6:	4620      	mov	r0, r4
    90f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    90fa:	bf00      	nop
    90fc:	20007600 	.word	0x20007600

00009100 <id_create.isra.0>:

static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    9100:	b530      	push	{r4, r5, lr}
    9102:	4c14      	ldr	r4, [pc, #80]	; (9154 <id_create.isra.0+0x54>)
    9104:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    9108:	b085      	sub	sp, #20
    910a:	4404      	add	r4, r0
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    910c:	460d      	mov	r5, r1
    910e:	b179      	cbz	r1, 9130 <id_create.isra.0+0x30>
    9110:	2300      	movs	r3, #0
    9112:	2207      	movs	r2, #7
    9114:	4669      	mov	r1, sp
    9116:	4628      	mov	r0, r5
    9118:	9300      	str	r3, [sp, #0]
    911a:	f8cd 3003 	str.w	r3, [sp, #3]
    911e:	f021 f951 	bl	2a3c4 <memcmp>
    9122:	b128      	cbz	r0, 9130 <id_create.isra.0+0x30>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    9124:	4629      	mov	r1, r5
    9126:	4620      	mov	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    9128:	f01d ffa0 	bl	2706c <bt_addr_le_copy>
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}
}
    912c:	b005      	add	sp, #20
    912e:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
    9130:	a802      	add	r0, sp, #8
    9132:	f01d fdd3 	bl	26cdc <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    9136:	a802      	add	r0, sp, #8
    9138:	f7ff ffc8 	bl	90cc <id_find>
    913c:	2800      	cmp	r0, #0
    913e:	daf7      	bge.n	9130 <id_create.isra.0+0x30>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    9140:	a902      	add	r1, sp, #8
    9142:	4620      	mov	r0, r4
    9144:	f01d ff92 	bl	2706c <bt_addr_le_copy>
		if (addr) {
    9148:	2d00      	cmp	r5, #0
    914a:	d0ef      	beq.n	912c <id_create.isra.0+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    914c:	4621      	mov	r1, r4
    914e:	4628      	mov	r0, r5
    9150:	e7ea      	b.n	9128 <id_create.isra.0+0x28>
    9152:	bf00      	nop
    9154:	20007600 	.word	0x20007600

00009158 <set_random_address>:
{
    9158:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
    915a:	2206      	movs	r2, #6
    915c:	4913      	ldr	r1, [pc, #76]	; (91ac <set_random_address+0x54>)
    915e:	4605      	mov	r5, r0
    9160:	f021 f930 	bl	2a3c4 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    9164:	4602      	mov	r2, r0
    9166:	b1d8      	cbz	r0, 91a0 <set_random_address+0x48>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    9168:	2106      	movs	r1, #6
    916a:	f242 0005 	movw	r0, #8197	; 0x2005
    916e:	f7ff f853 	bl	8218 <bt_hci_cmd_create>
	if (!buf) {
    9172:	4604      	mov	r4, r0
    9174:	b1b0      	cbz	r0, 91a4 <set_random_address+0x4c>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    9176:	2206      	movs	r2, #6
    9178:	4629      	mov	r1, r5
    917a:	3008      	adds	r0, #8
    917c:	f01f fd98 	bl	28cb0 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    9180:	2200      	movs	r2, #0
    9182:	4621      	mov	r1, r4
    9184:	f242 0005 	movw	r0, #8197	; 0x2005
    9188:	f7ff f9dc 	bl	8544 <bt_hci_cmd_send_sync>
	if (err) {
    918c:	4602      	mov	r2, r0
    918e:	b938      	cbnz	r0, 91a0 <set_random_address+0x48>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
    9190:	4629      	mov	r1, r5
    9192:	4806      	ldr	r0, [pc, #24]	; (91ac <set_random_address+0x54>)
    9194:	f01d ff65 	bl	27062 <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    9198:	4b05      	ldr	r3, [pc, #20]	; (91b0 <set_random_address+0x58>)
    919a:	2101      	movs	r1, #1
    919c:	f883 102c 	strb.w	r1, [r3, #44]	; 0x2c
}
    91a0:	4610      	mov	r0, r2
    91a2:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    91a4:	f06f 0268 	mvn.w	r2, #104	; 0x68
    91a8:	e7fa      	b.n	91a0 <set_random_address+0x48>
    91aa:	bf00      	nop
    91ac:	2000762d 	.word	0x2000762d
    91b0:	20007600 	.word	0x20007600

000091b4 <bt_id_pending_keys_update>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    91b4:	4b0a      	ldr	r3, [pc, #40]	; (91e0 <bt_id_pending_keys_update+0x2c>)
    91b6:	f3bf 8f5b 	dmb	ish
    91ba:	e853 2f00 	ldrex	r2, [r3]
    91be:	f422 4180 	bic.w	r1, r2, #16384	; 0x4000
    91c2:	e843 1000 	strex	r0, r1, [r3]
    91c6:	2800      	cmp	r0, #0
    91c8:	d1f7      	bne.n	91ba <bt_id_pending_keys_update+0x6>
    91ca:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    91ce:	0453      	lsls	r3, r2, #17
    91d0:	d504      	bpl.n	91dc <bt_id_pending_keys_update+0x28>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
    91d2:	4904      	ldr	r1, [pc, #16]	; (91e4 <bt_id_pending_keys_update+0x30>)
    91d4:	2200      	movs	r2, #0
    91d6:	2002      	movs	r0, #2
    91d8:	f005 bd4a 	b.w	ec70 <bt_keys_foreach>
}
    91dc:	4770      	bx	lr
    91de:	bf00      	nop
    91e0:	20007698 	.word	0x20007698
    91e4:	00027151 	.word	0x00027151

000091e8 <bt_id_add>:
{
    91e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    91ea:	4d73      	ldr	r5, [pc, #460]	; (93b8 <bt_id_add+0x1d0>)
    91ec:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
    91f0:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
{
    91f4:	4604      	mov	r4, r0
    91f6:	462e      	mov	r6, r5
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    91f8:	b10a      	cbz	r2, 91fe <bt_id_add+0x16>
    91fa:	429a      	cmp	r2, r3
    91fc:	d208      	bcs.n	9210 <bt_id_add+0x28>
		bt_dev.le.rl_entries++;
    91fe:	3301      	adds	r3, #1
    9200:	f886 30e9 	strb.w	r3, [r6, #233]	; 0xe9
		keys->state |= BT_KEYS_ID_ADDED;
    9204:	7a23      	ldrb	r3, [r4, #8]
    9206:	f043 0304 	orr.w	r3, r3, #4
    920a:	7223      	strb	r3, [r4, #8]
}
    920c:	b003      	add	sp, #12
    920e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    9210:	2100      	movs	r1, #0
    9212:	2206      	movs	r2, #6
    9214:	4608      	mov	r0, r1
    9216:	f001 fc97 	bl	ab48 <bt_conn_lookup_state_le>
	if (conn) {
    921a:	4607      	mov	r7, r0
    921c:	b198      	cbz	r0, 9246 <bt_id_add+0x5e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    921e:	f3bf 8f5b 	dmb	ish
    9222:	3598      	adds	r5, #152	; 0x98
    9224:	e855 3f00 	ldrex	r3, [r5]
    9228:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    922c:	e845 3200 	strex	r2, r3, [r5]
    9230:	2a00      	cmp	r2, #0
    9232:	d1f7      	bne.n	9224 <bt_id_add+0x3c>
    9234:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
    9238:	7a23      	ldrb	r3, [r4, #8]
    923a:	f043 0301 	orr.w	r3, r3, #1
    923e:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
    9240:	f01e f95f 	bl	27502 <bt_conn_unref>
		return;
    9244:	e7e2      	b.n	920c <bt_id_add+0x24>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
    9246:	4601      	mov	r1, r0
    9248:	485c      	ldr	r0, [pc, #368]	; (93bc <bt_id_add+0x1d4>)
    924a:	f000 fc89 	bl	9b60 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries) {
    924e:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
    9252:	b1ab      	cbz	r3, 9280 <bt_id_add+0x98>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    9254:	4638      	mov	r0, r7
    9256:	f01d feec 	bl	27032 <addr_res_enable>
		if (err) {
    925a:	b188      	cbz	r0, 9280 <bt_id_add+0x98>
    925c:	f01d feca 	bl	26ff4 <arch_is_user_context>
    9260:	4b57      	ldr	r3, [pc, #348]	; (93c0 <bt_id_add+0x1d8>)
    9262:	4a58      	ldr	r2, [pc, #352]	; (93c4 <bt_id_add+0x1dc>)
    9264:	1a9b      	subs	r3, r3, r2
    9266:	08db      	lsrs	r3, r3, #3
			BT_WARN("Failed to disable address resolution");
    9268:	019b      	lsls	r3, r3, #6
    926a:	f043 0302 	orr.w	r3, r3, #2
    926e:	b110      	cbz	r0, 9276 <bt_id_add+0x8e>
    9270:	4955      	ldr	r1, [pc, #340]	; (93c8 <bt_id_add+0x1e0>)
		BT_ERR("Failed to set privacy mode");
    9272:	4618      	mov	r0, r3
    9274:	e026      	b.n	92c4 <bt_id_add+0xdc>
			BT_WARN("Failed to disable address resolution");
    9276:	4854      	ldr	r0, [pc, #336]	; (93c8 <bt_id_add+0x1e0>)
    9278:	4619      	mov	r1, r3
		BT_ERR("Failed to set privacy mode");
    927a:	f01b fe32 	bl	24ee2 <log_0>
		goto done;
    927e:	e023      	b.n	92c8 <bt_id_add+0xe0>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
    9280:	f896 20e9 	ldrb.w	r2, [r6, #233]	; 0xe9
    9284:	f896 30e8 	ldrb.w	r3, [r6, #232]	; 0xe8
    9288:	429a      	cmp	r2, r3
    928a:	d137      	bne.n	92fc <bt_id_add+0x114>
    928c:	f01d feb2 	bl	26ff4 <arch_is_user_context>
    9290:	4d4b      	ldr	r5, [pc, #300]	; (93c0 <bt_id_add+0x1d8>)
    9292:	4b4c      	ldr	r3, [pc, #304]	; (93c4 <bt_id_add+0x1dc>)
    9294:	1aed      	subs	r5, r5, r3
    9296:	08ed      	lsrs	r5, r5, #3
		BT_WARN("Resolving list size exceeded. Switching to host.");
    9298:	01ad      	lsls	r5, r5, #6
    929a:	f045 0302 	orr.w	r3, r5, #2
    929e:	b1d8      	cbz	r0, 92d8 <bt_id_add+0xf0>
    92a0:	494a      	ldr	r1, [pc, #296]	; (93cc <bt_id_add+0x1e4>)
    92a2:	4618      	mov	r0, r3
    92a4:	f01b fdf7 	bl	24e96 <log_from_user>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
    92a8:	2200      	movs	r2, #0
    92aa:	4611      	mov	r1, r2
    92ac:	f242 0029 	movw	r0, #8233	; 0x2029
    92b0:	f7ff f948 	bl	8544 <bt_hci_cmd_send_sync>
		if (err) {
    92b4:	b1c0      	cbz	r0, 92e8 <bt_id_add+0x100>
    92b6:	f01d fe9d 	bl	26ff4 <arch_is_user_context>
			BT_ERR("Failed to clear resolution list");
    92ba:	f045 0501 	orr.w	r5, r5, #1
    92be:	b180      	cbz	r0, 92e2 <bt_id_add+0xfa>
    92c0:	4943      	ldr	r1, [pc, #268]	; (93d0 <bt_id_add+0x1e8>)
    92c2:	4628      	mov	r0, r5
    92c4:	f01b fde7 	bl	24e96 <log_from_user>
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    92c8:	2001      	movs	r0, #1
    92ca:	f01d feb2 	bl	27032 <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
    92ce:	4841      	ldr	r0, [pc, #260]	; (93d4 <bt_id_add+0x1ec>)
    92d0:	2100      	movs	r1, #0
    92d2:	f000 fc45 	bl	9b60 <bt_le_ext_adv_foreach>
    92d6:	e799      	b.n	920c <bt_id_add+0x24>
		BT_WARN("Resolving list size exceeded. Switching to host.");
    92d8:	483c      	ldr	r0, [pc, #240]	; (93cc <bt_id_add+0x1e4>)
    92da:	4619      	mov	r1, r3
    92dc:	f01b fe01 	bl	24ee2 <log_0>
    92e0:	e7e2      	b.n	92a8 <bt_id_add+0xc0>
			BT_ERR("Failed to clear resolution list");
    92e2:	483b      	ldr	r0, [pc, #236]	; (93d0 <bt_id_add+0x1e8>)
    92e4:	4629      	mov	r1, r5
    92e6:	e7c8      	b.n	927a <bt_id_add+0x92>
		bt_dev.le.rl_entries++;
    92e8:	f896 30e9 	ldrb.w	r3, [r6, #233]	; 0xe9
    92ec:	3301      	adds	r3, #1
    92ee:	f886 30e9 	strb.w	r3, [r6, #233]	; 0xe9
		keys->state |= BT_KEYS_ID_ADDED;
    92f2:	7a23      	ldrb	r3, [r4, #8]
    92f4:	f043 0304 	orr.w	r3, r3, #4
    92f8:	7223      	strb	r3, [r4, #8]
		goto done;
    92fa:	e7e5      	b.n	92c8 <bt_id_add+0xe0>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
    92fc:	1c67      	adds	r7, r4, #1
    92fe:	f104 012a 	add.w	r1, r4, #42	; 0x2a
    9302:	4638      	mov	r0, r7
    9304:	f01d feb9 	bl	2707a <hci_id_add.isra.0>
	if (err) {
    9308:	4605      	mov	r5, r0
    930a:	b170      	cbz	r0, 932a <bt_id_add+0x142>
    930c:	f01d fe72 	bl	26ff4 <arch_is_user_context>
    9310:	4b2b      	ldr	r3, [pc, #172]	; (93c0 <bt_id_add+0x1d8>)
    9312:	4a2c      	ldr	r2, [pc, #176]	; (93c4 <bt_id_add+0x1dc>)
    9314:	1a9b      	subs	r3, r3, r2
    9316:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to add IRK to controller");
    9318:	019b      	lsls	r3, r3, #6
    931a:	f043 0301 	orr.w	r3, r3, #1
    931e:	b108      	cbz	r0, 9324 <bt_id_add+0x13c>
    9320:	492d      	ldr	r1, [pc, #180]	; (93d8 <bt_id_add+0x1f0>)
    9322:	e7a6      	b.n	9272 <bt_id_add+0x8a>
    9324:	482c      	ldr	r0, [pc, #176]	; (93d8 <bt_id_add+0x1f0>)
    9326:	4619      	mov	r1, r3
    9328:	e7a7      	b.n	927a <bt_id_add+0x92>
	bt_dev.le.rl_entries++;
    932a:	f896 30e9 	ldrb.w	r3, [r6, #233]	; 0xe9
    932e:	3301      	adds	r3, #1
    9330:	f886 30e9 	strb.w	r3, [r6, #233]	; 0xe9
	keys->state |= BT_KEYS_ID_ADDED;
    9334:	7a23      	ldrb	r3, [r4, #8]
    9336:	f043 0304 	orr.w	r3, r3, #4
    933a:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
    933c:	f896 306b 	ldrb.w	r3, [r6, #107]	; 0x6b
    9340:	075b      	lsls	r3, r3, #29
    9342:	d40e      	bmi.n	9362 <bt_id_add+0x17a>
    9344:	f01d fe56 	bl	26ff4 <arch_is_user_context>
    9348:	4b1d      	ldr	r3, [pc, #116]	; (93c0 <bt_id_add+0x1d8>)
    934a:	4a1e      	ldr	r2, [pc, #120]	; (93c4 <bt_id_add+0x1dc>)
    934c:	1a9b      	subs	r3, r3, r2
    934e:	08db      	lsrs	r3, r3, #3
		BT_WARN("Set privacy mode command is not supported");
    9350:	019b      	lsls	r3, r3, #6
    9352:	f043 0302 	orr.w	r3, r3, #2
    9356:	b108      	cbz	r0, 935c <bt_id_add+0x174>
    9358:	4920      	ldr	r1, [pc, #128]	; (93dc <bt_id_add+0x1f4>)
    935a:	e78a      	b.n	9272 <bt_id_add+0x8a>
    935c:	481f      	ldr	r0, [pc, #124]	; (93dc <bt_id_add+0x1f4>)
    935e:	4619      	mov	r1, r3
    9360:	e78b      	b.n	927a <bt_id_add+0x92>
	bt_addr_le_copy(&cp.id_addr, addr);
    9362:	4639      	mov	r1, r7
    9364:	4668      	mov	r0, sp
    9366:	f01d fe81 	bl	2706c <bt_addr_le_copy>
	cp.mode = mode;
    936a:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    936c:	2108      	movs	r1, #8
    936e:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
    9372:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    9376:	f7fe ff4f 	bl	8218 <bt_hci_cmd_create>
	if (!buf) {
    937a:	4604      	mov	r4, r0
    937c:	b960      	cbnz	r0, 9398 <bt_id_add+0x1b0>
    937e:	f01d fe39 	bl	26ff4 <arch_is_user_context>
    9382:	4b0f      	ldr	r3, [pc, #60]	; (93c0 <bt_id_add+0x1d8>)
    9384:	4a0f      	ldr	r2, [pc, #60]	; (93c4 <bt_id_add+0x1dc>)
    9386:	1a9b      	subs	r3, r3, r2
    9388:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to set privacy mode");
    938a:	019b      	lsls	r3, r3, #6
    938c:	f043 0301 	orr.w	r3, r3, #1
    9390:	b980      	cbnz	r0, 93b4 <bt_id_add+0x1cc>
    9392:	4813      	ldr	r0, [pc, #76]	; (93e0 <bt_id_add+0x1f8>)
    9394:	4619      	mov	r1, r3
    9396:	e770      	b.n	927a <bt_id_add+0x92>
    9398:	2208      	movs	r2, #8
    939a:	4669      	mov	r1, sp
    939c:	4410      	add	r0, r2
    939e:	f01f fc87 	bl	28cb0 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
    93a2:	462a      	mov	r2, r5
    93a4:	4621      	mov	r1, r4
    93a6:	f242 004e 	movw	r0, #8270	; 0x204e
    93aa:	f7ff f8cb 	bl	8544 <bt_hci_cmd_send_sync>
	if (err) {
    93ae:	2800      	cmp	r0, #0
    93b0:	d08a      	beq.n	92c8 <bt_id_add+0xe0>
    93b2:	e7e4      	b.n	937e <bt_id_add+0x196>
		BT_ERR("Failed to set privacy mode");
    93b4:	490a      	ldr	r1, [pc, #40]	; (93e0 <bt_id_add+0x1f8>)
    93b6:	e75c      	b.n	9272 <bt_id_add+0x8a>
    93b8:	20007600 	.word	0x20007600
    93bc:	000270e7 	.word	0x000270e7
    93c0:	0002a7b8 	.word	0x0002a7b8
    93c4:	0002a6d0 	.word	0x0002a6d0
    93c8:	0002d9fd 	.word	0x0002d9fd
    93cc:	0002da22 	.word	0x0002da22
    93d0:	0002da53 	.word	0x0002da53
    93d4:	00027009 	.word	0x00027009
    93d8:	0002da73 	.word	0x0002da73
    93dc:	0002da93 	.word	0x0002da93
    93e0:	0002dabd 	.word	0x0002dabd

000093e4 <bt_id_del>:
{
    93e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size ||
    93e8:	4e51      	ldr	r6, [pc, #324]	; (9530 <bt_id_del+0x14c>)
    93ea:	f896 20e8 	ldrb.w	r2, [r6, #232]	; 0xe8
    93ee:	f896 30e9 	ldrb.w	r3, [r6, #233]	; 0xe9
{
    93f2:	4604      	mov	r4, r0
    93f4:	4635      	mov	r5, r6
	if (!bt_dev.le.rl_size ||
    93f6:	b112      	cbz	r2, 93fe <bt_id_del+0x1a>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    93f8:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
    93fa:	4293      	cmp	r3, r2
    93fc:	dd08      	ble.n	9410 <bt_id_del+0x2c>
		bt_dev.le.rl_entries--;
    93fe:	3b01      	subs	r3, #1
    9400:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		keys->state &= ~BT_KEYS_ID_ADDED;
    9404:	7a23      	ldrb	r3, [r4, #8]
    9406:	f023 0304 	bic.w	r3, r3, #4
    940a:	7223      	strb	r3, [r4, #8]
}
    940c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    9410:	2100      	movs	r1, #0
    9412:	2206      	movs	r2, #6
    9414:	4608      	mov	r0, r1
    9416:	f001 fb97 	bl	ab48 <bt_conn_lookup_state_le>
	if (conn) {
    941a:	4607      	mov	r7, r0
    941c:	b1a0      	cbz	r0, 9448 <bt_id_del+0x64>
    941e:	f3bf 8f5b 	dmb	ish
    9422:	3698      	adds	r6, #152	; 0x98
    9424:	e856 3f00 	ldrex	r3, [r6]
    9428:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    942c:	e846 3200 	strex	r2, r3, [r6]
    9430:	2a00      	cmp	r2, #0
    9432:	d1f7      	bne.n	9424 <bt_id_del+0x40>
    9434:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
    9438:	7a23      	ldrb	r3, [r4, #8]
    943a:	f043 0302 	orr.w	r3, r3, #2
    943e:	7223      	strb	r3, [r4, #8]
}
    9440:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
    9444:	f01e b85d 	b.w	27502 <bt_conn_unref>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
    9448:	4601      	mov	r1, r0
    944a:	483a      	ldr	r0, [pc, #232]	; (9534 <bt_id_del+0x150>)
    944c:	f000 fb88 	bl	9b60 <bt_le_ext_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    9450:	4638      	mov	r0, r7
    9452:	f01d fdee 	bl	27032 <addr_res_enable>
	if (err) {
    9456:	4606      	mov	r6, r0
    9458:	b300      	cbz	r0, 949c <bt_id_del+0xb8>
    945a:	f01d fdcb 	bl	26ff4 <arch_is_user_context>
    945e:	4b36      	ldr	r3, [pc, #216]	; (9538 <bt_id_del+0x154>)
    9460:	4a36      	ldr	r2, [pc, #216]	; (953c <bt_id_del+0x158>)
    9462:	1a9b      	subs	r3, r3, r2
    9464:	08db      	lsrs	r3, r3, #3
		BT_ERR("Disabling address resolution failed (err %d)", err);
    9466:	019b      	lsls	r3, r3, #6
    9468:	f043 0301 	orr.w	r3, r3, #1
    946c:	b180      	cbz	r0, 9490 <bt_id_del+0xac>
    946e:	4934      	ldr	r1, [pc, #208]	; (9540 <bt_id_del+0x15c>)
    9470:	4632      	mov	r2, r6
    9472:	4618      	mov	r0, r3
    9474:	f01b fd0f 	bl	24e96 <log_from_user>
	if (bt_dev.le.rl_entries) {
    9478:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
    947c:	b113      	cbz	r3, 9484 <bt_id_del+0xa0>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    947e:	2001      	movs	r0, #1
    9480:	f01d fdd7 	bl	27032 <addr_res_enable>
}
    9484:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
    9488:	482e      	ldr	r0, [pc, #184]	; (9544 <bt_id_del+0x160>)
    948a:	2100      	movs	r1, #0
    948c:	f000 bb68 	b.w	9b60 <bt_le_ext_adv_foreach>
		BT_ERR("Disabling address resolution failed (err %d)", err);
    9490:	482b      	ldr	r0, [pc, #172]	; (9540 <bt_id_del+0x15c>)
    9492:	461a      	mov	r2, r3
    9494:	4631      	mov	r1, r6
    9496:	f01b fd31 	bl	24efc <log_1>
		goto done;
    949a:	e7ed      	b.n	9478 <bt_id_del+0x94>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    949c:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
    94a0:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
    94a4:	429a      	cmp	r2, r3
    94a6:	d20c      	bcs.n	94c2 <bt_id_del+0xde>
		bt_dev.le.rl_entries--;
    94a8:	3b01      	subs	r3, #1
    94aa:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		keys->state &= ~BT_KEYS_ID_ADDED;
    94ae:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    94b0:	4925      	ldr	r1, [pc, #148]	; (9548 <bt_id_del+0x164>)
		keys->state &= ~BT_KEYS_ID_ADDED;
    94b2:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    94b6:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
    94b8:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    94ba:	2002      	movs	r0, #2
    94bc:	f005 fbd8 	bl	ec70 <bt_keys_foreach>
		goto done;
    94c0:	e7da      	b.n	9478 <bt_id_del+0x94>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
    94c2:	2107      	movs	r1, #7
    94c4:	f242 0028 	movw	r0, #8232	; 0x2028
    94c8:	f7fe fea6 	bl	8218 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
    94cc:	f104 0801 	add.w	r8, r4, #1
	if (!buf) {
    94d0:	4607      	mov	r7, r0
    94d2:	b970      	cbnz	r0, 94f2 <bt_id_del+0x10e>
    94d4:	f01d fd8e 	bl	26ff4 <arch_is_user_context>
    94d8:	4b17      	ldr	r3, [pc, #92]	; (9538 <bt_id_del+0x154>)
    94da:	4a18      	ldr	r2, [pc, #96]	; (953c <bt_id_del+0x158>)
    94dc:	1a9b      	subs	r3, r3, r2
    94de:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to remove IRK from controller");
    94e0:	019b      	lsls	r3, r3, #6
    94e2:	f043 0301 	orr.w	r3, r3, #1
    94e6:	b9e8      	cbnz	r0, 9524 <bt_id_del+0x140>
    94e8:	4818      	ldr	r0, [pc, #96]	; (954c <bt_id_del+0x168>)
    94ea:	4619      	mov	r1, r3
    94ec:	f01b fcf9 	bl	24ee2 <log_0>
		goto done;
    94f0:	e7c2      	b.n	9478 <bt_id_del+0x94>
	return net_buf_simple_add(&buf->b, len);
    94f2:	2107      	movs	r1, #7
    94f4:	3008      	adds	r0, #8
    94f6:	f01f fbd5 	bl	28ca4 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    94fa:	4641      	mov	r1, r8
    94fc:	f01d fdb6 	bl	2706c <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
    9500:	4632      	mov	r2, r6
    9502:	4639      	mov	r1, r7
    9504:	f242 0028 	movw	r0, #8232	; 0x2028
    9508:	f7ff f81c 	bl	8544 <bt_hci_cmd_send_sync>
	if (err) {
    950c:	2800      	cmp	r0, #0
    950e:	d1e1      	bne.n	94d4 <bt_id_del+0xf0>
	bt_dev.le.rl_entries--;
    9510:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
    9514:	3b01      	subs	r3, #1
    9516:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
	keys->state &= ~BT_KEYS_ID_ADDED;
    951a:	7a23      	ldrb	r3, [r4, #8]
    951c:	f023 0304 	bic.w	r3, r3, #4
    9520:	7223      	strb	r3, [r4, #8]
    9522:	e7a9      	b.n	9478 <bt_id_del+0x94>
		BT_ERR("Failed to remove IRK from controller");
    9524:	4909      	ldr	r1, [pc, #36]	; (954c <bt_id_del+0x168>)
    9526:	4618      	mov	r0, r3
    9528:	f01b fcb5 	bl	24e96 <log_from_user>
    952c:	e7a4      	b.n	9478 <bt_id_del+0x94>
    952e:	bf00      	nop
    9530:	20007600 	.word	0x20007600
    9534:	000270e7 	.word	0x000270e7
    9538:	0002a7b8 	.word	0x0002a7b8
    953c:	0002a6d0 	.word	0x0002a6d0
    9540:	0002dad8 	.word	0x0002dad8
    9544:	00027009 	.word	0x00027009
    9548:	000270d5 	.word	0x000270d5
    954c:	0002db05 	.word	0x0002db05

00009550 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
    9550:	b573      	push	{r0, r1, r4, r5, r6, lr}
    9552:	460c      	mov	r4, r1
	int new_id;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    9554:	4605      	mov	r5, r0
    9556:	b918      	cbnz	r0, 9560 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    9558:	b394      	cbz	r4, 95c0 <bt_id_create+0x70>
		return -EINVAL;
    955a:	f06f 0415 	mvn.w	r4, #21
    955e:	e02c      	b.n	95ba <bt_id_create+0x6a>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    9560:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    9562:	2207      	movs	r2, #7
    9564:	4669      	mov	r1, sp
    9566:	9300      	str	r3, [sp, #0]
    9568:	f8cd 3003 	str.w	r3, [sp, #3]
    956c:	f020 ff2a 	bl	2a3c4 <memcmp>
    9570:	2800      	cmp	r0, #0
    9572:	d0f1      	beq.n	9558 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    9574:	782b      	ldrb	r3, [r5, #0]
    9576:	2b01      	cmp	r3, #1
    9578:	d104      	bne.n	9584 <bt_id_create+0x34>
    957a:	79ab      	ldrb	r3, [r5, #6]
    957c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    9580:	2bc0      	cmp	r3, #192	; 0xc0
    9582:	d013      	beq.n	95ac <bt_id_create+0x5c>
    9584:	f01d fd36 	bl	26ff4 <arch_is_user_context>
    9588:	4b1f      	ldr	r3, [pc, #124]	; (9608 <bt_id_create+0xb8>)
    958a:	4a20      	ldr	r2, [pc, #128]	; (960c <bt_id_create+0xbc>)
    958c:	1a9b      	subs	r3, r3, r2
    958e:	08db      	lsrs	r3, r3, #3
			BT_ERR("Only static random identity address supported");
    9590:	019b      	lsls	r3, r3, #6
    9592:	f043 0301 	orr.w	r3, r3, #1
    9596:	b120      	cbz	r0, 95a2 <bt_id_create+0x52>
    9598:	491d      	ldr	r1, [pc, #116]	; (9610 <bt_id_create+0xc0>)
    959a:	4618      	mov	r0, r3
    959c:	f01b fc7b 	bl	24e96 <log_from_user>
    95a0:	e7db      	b.n	955a <bt_id_create+0xa>
    95a2:	481b      	ldr	r0, [pc, #108]	; (9610 <bt_id_create+0xc0>)
    95a4:	4619      	mov	r1, r3
    95a6:	f01b fc9c 	bl	24ee2 <log_0>
			return -EINVAL;
    95aa:	e7d6      	b.n	955a <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    95ac:	4628      	mov	r0, r5
    95ae:	f7ff fd8d 	bl	90cc <id_find>
    95b2:	2800      	cmp	r0, #0
    95b4:	dbd0      	blt.n	9558 <bt_id_create+0x8>
			return -EALREADY;
    95b6:	f06f 0477 	mvn.w	r4, #119	; 0x77

	new_id = bt_dev.id_count++;
	id_create(new_id, addr, irk);

	return new_id;
}
    95ba:	4620      	mov	r0, r4
    95bc:	b002      	add	sp, #8
    95be:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    95c0:	4e14      	ldr	r6, [pc, #80]	; (9614 <bt_id_create+0xc4>)
    95c2:	79f3      	ldrb	r3, [r6, #7]
    95c4:	2b01      	cmp	r3, #1
    95c6:	d01b      	beq.n	9600 <bt_id_create+0xb0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    95c8:	f3bf 8f5b 	dmb	ish
    95cc:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
    95d0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    95d4:	07db      	lsls	r3, r3, #31
    95d6:	d40b      	bmi.n	95f0 <bt_id_create+0xa0>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
    95d8:	2d00      	cmp	r5, #0
    95da:	d0be      	beq.n	955a <bt_id_create+0xa>
    95dc:	2207      	movs	r2, #7
    95de:	4669      	mov	r1, sp
    95e0:	4628      	mov	r0, r5
    95e2:	9400      	str	r4, [sp, #0]
    95e4:	f8cd 4003 	str.w	r4, [sp, #3]
    95e8:	f020 feec 	bl	2a3c4 <memcmp>
    95ec:	2800      	cmp	r0, #0
    95ee:	d0b4      	beq.n	955a <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
    95f0:	79f4      	ldrb	r4, [r6, #7]
	id_create(new_id, addr, irk);
    95f2:	4629      	mov	r1, r5
	new_id = bt_dev.id_count++;
    95f4:	1c63      	adds	r3, r4, #1
	id_create(new_id, addr, irk);
    95f6:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
    95f8:	71f3      	strb	r3, [r6, #7]
	id_create(new_id, addr, irk);
    95fa:	f7ff fd81 	bl	9100 <id_create.isra.0>
	return new_id;
    95fe:	e7dc      	b.n	95ba <bt_id_create+0x6a>
		return -ENOMEM;
    9600:	f06f 040b 	mvn.w	r4, #11
    9604:	e7d9      	b.n	95ba <bt_id_create+0x6a>
    9606:	bf00      	nop
    9608:	0002a7b8 	.word	0x0002a7b8
    960c:	0002a6d0 	.word	0x0002a6d0
    9610:	0002db2a 	.word	0x0002db2a
    9614:	20007600 	.word	0x20007600

00009618 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
    9618:	b570      	push	{r4, r5, r6, lr}
    961a:	b086      	sub	sp, #24
    961c:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    961e:	aa01      	add	r2, sp, #4
    9620:	2100      	movs	r1, #0
    9622:	f241 0009 	movw	r0, #4105	; 0x1009
    9626:	f7fe ff8d 	bl	8544 <bt_hci_cmd_send_sync>
	if (err) {
    962a:	4604      	mov	r4, r0
    962c:	b1a8      	cbz	r0, 965a <bt_id_read_public_addr+0x42>
    962e:	f01d fce1 	bl	26ff4 <arch_is_user_context>
    9632:	4b1d      	ldr	r3, [pc, #116]	; (96a8 <bt_id_read_public_addr+0x90>)
    9634:	4a1d      	ldr	r2, [pc, #116]	; (96ac <bt_id_read_public_addr+0x94>)
    9636:	1a9b      	subs	r3, r3, r2
    9638:	08db      	lsrs	r3, r3, #3
		BT_WARN("Failed to read public address");
    963a:	019b      	lsls	r3, r3, #6
    963c:	f043 0302 	orr.w	r3, r3, #2
    9640:	b130      	cbz	r0, 9650 <bt_id_read_public_addr+0x38>
    9642:	491b      	ldr	r1, [pc, #108]	; (96b0 <bt_id_read_public_addr+0x98>)
    9644:	4618      	mov	r0, r3
    9646:	f01b fc26 	bl	24e96 <log_from_user>

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
		return 0U;
    964a:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
    964c:	b006      	add	sp, #24
    964e:	bd70      	pop	{r4, r5, r6, pc}
		BT_WARN("Failed to read public address");
    9650:	4817      	ldr	r0, [pc, #92]	; (96b0 <bt_id_read_public_addr+0x98>)
    9652:	4619      	mov	r1, r3
    9654:	f01b fc45 	bl	24ee2 <log_0>
		return 0U;
    9658:	e7f7      	b.n	964a <bt_id_read_public_addr+0x32>
	rp = (void *)rsp->data;
    965a:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    965c:	9002      	str	r0, [sp, #8]
    965e:	689d      	ldr	r5, [r3, #8]
    9660:	f8ad 000c 	strh.w	r0, [sp, #12]
    9664:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
    9666:	2206      	movs	r2, #6
    9668:	a902      	add	r1, sp, #8
    966a:	4628      	mov	r0, r5
    966c:	f020 feaa 	bl	2a3c4 <memcmp>
    9670:	b918      	cbnz	r0, 967a <bt_id_read_public_addr+0x62>
		net_buf_unref(rsp);
    9672:	9801      	ldr	r0, [sp, #4]
    9674:	f013 f8c0 	bl	1c7f8 <net_buf_unref>
    9678:	e7e7      	b.n	964a <bt_id_read_public_addr+0x32>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    967a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    967e:	2206      	movs	r2, #6
    9680:	a904      	add	r1, sp, #16
    9682:	4628      	mov	r0, r5
    9684:	9304      	str	r3, [sp, #16]
    9686:	f8ad 3014 	strh.w	r3, [sp, #20]
    968a:	f020 fe9b 	bl	2a3c4 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    968e:	2800      	cmp	r0, #0
    9690:	d0ef      	beq.n	9672 <bt_id_read_public_addr+0x5a>
	bt_addr_copy(&addr->a, &rp->bdaddr);
    9692:	4629      	mov	r1, r5
    9694:	1c70      	adds	r0, r6, #1
    9696:	f01d fce4 	bl	27062 <bt_addr_copy>
	net_buf_unref(rsp);
    969a:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    969c:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
    969e:	f013 f8ab 	bl	1c7f8 <net_buf_unref>
	return 1U;
    96a2:	2001      	movs	r0, #1
    96a4:	e7d2      	b.n	964c <bt_id_read_public_addr+0x34>
    96a6:	bf00      	nop
    96a8:	0002a7b8 	.word	0x0002a7b8
    96ac:	0002a6d0 	.word	0x0002a6d0
    96b0:	0002db58 	.word	0x0002db58

000096b4 <bt_setup_public_id_addr>:

void bt_setup_public_id_addr(void)
{
    96b4:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
    96b6:	4668      	mov	r0, sp
    96b8:	f7ff ffae 	bl	9618 <bt_id_read_public_addr>
    96bc:	4b04      	ldr	r3, [pc, #16]	; (96d0 <bt_setup_public_id_addr+0x1c>)
    96be:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
    96c0:	b118      	cbz	r0, 96ca <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	id_create(BT_ID_DEFAULT, &addr, irk);
    96c2:	4669      	mov	r1, sp
    96c4:	2000      	movs	r0, #0
    96c6:	f7ff fd1b 	bl	9100 <id_create.isra.0>
}
    96ca:	b003      	add	sp, #12
    96cc:	f85d fb04 	ldr.w	pc, [sp], #4
    96d0:	20007600 	.word	0x20007600

000096d4 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
    96d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    96d6:	4b33      	ldr	r3, [pc, #204]	; (97a4 <bt_read_static_addr+0xd0>)
    96d8:	f893 4086 	ldrb.w	r4, [r3, #134]	; 0x86
    96dc:	f014 0401 	ands.w	r4, r4, #1
{
    96e0:	4605      	mov	r5, r0
    96e2:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    96e4:	d113      	bne.n	970e <bt_read_static_addr+0x3a>
    96e6:	f01d fc85 	bl	26ff4 <arch_is_user_context>
    96ea:	4b2f      	ldr	r3, [pc, #188]	; (97a8 <bt_read_static_addr+0xd4>)
    96ec:	4a2f      	ldr	r2, [pc, #188]	; (97ac <bt_read_static_addr+0xd8>)
    96ee:	1a9b      	subs	r3, r3, r2
    96f0:	08db      	lsrs	r3, r3, #3
		BT_WARN("Read Static Addresses command not available");
    96f2:	019b      	lsls	r3, r3, #6
    96f4:	f043 0302 	orr.w	r3, r3, #2
    96f8:	b120      	cbz	r0, 9704 <bt_read_static_addr+0x30>
    96fa:	492d      	ldr	r1, [pc, #180]	; (97b0 <bt_read_static_addr+0xdc>)
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
	}

	net_buf_unref(rsp);
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
    96fc:	4618      	mov	r0, r3
    96fe:	f01b fbca 	bl	24e96 <log_from_user>
    9702:	e01b      	b.n	973c <bt_read_static_addr+0x68>
		BT_WARN("Read Static Addresses command not available");
    9704:	482a      	ldr	r0, [pc, #168]	; (97b0 <bt_read_static_addr+0xdc>)
    9706:	4619      	mov	r1, r3
		BT_WARN("No static addresses stored in controller");
    9708:	f01b fbeb 	bl	24ee2 <log_0>
    970c:	e016      	b.n	973c <bt_read_static_addr+0x68>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    970e:	aa01      	add	r2, sp, #4
    9710:	2100      	movs	r1, #0
    9712:	f64f 4009 	movw	r0, #64521	; 0xfc09
    9716:	f7fe ff15 	bl	8544 <bt_hci_cmd_send_sync>
	if (err) {
    971a:	4603      	mov	r3, r0
    971c:	b1b0      	cbz	r0, 974c <bt_read_static_addr+0x78>
    971e:	f01d fc69 	bl	26ff4 <arch_is_user_context>
    9722:	4b21      	ldr	r3, [pc, #132]	; (97a8 <bt_read_static_addr+0xd4>)
    9724:	4a21      	ldr	r2, [pc, #132]	; (97ac <bt_read_static_addr+0xd8>)
    9726:	1a9b      	subs	r3, r3, r2
    9728:	08db      	lsrs	r3, r3, #3
		BT_WARN("Failed to read static addresses");
    972a:	019b      	lsls	r3, r3, #6
    972c:	f043 0302 	orr.w	r3, r3, #2
    9730:	b138      	cbz	r0, 9742 <bt_read_static_addr+0x6e>
    9732:	4920      	ldr	r1, [pc, #128]	; (97b4 <bt_read_static_addr+0xe0>)
    9734:	4618      	mov	r0, r3
    9736:	f01b fbae 	bl	24e96 <log_from_user>
		return 0;
    973a:	2400      	movs	r4, #0
	}

	return cnt;
}
    973c:	4620      	mov	r0, r4
    973e:	b003      	add	sp, #12
    9740:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_WARN("Failed to read static addresses");
    9742:	481c      	ldr	r0, [pc, #112]	; (97b4 <bt_read_static_addr+0xe0>)
    9744:	4619      	mov	r1, r3
    9746:	f01b fbcc 	bl	24ee2 <log_0>
    974a:	e7f6      	b.n	973a <bt_read_static_addr+0x66>
	rp = (void *)rsp->data;
    974c:	9801      	ldr	r0, [sp, #4]
    974e:	6882      	ldr	r2, [r0, #8]
	cnt = MIN(rp->num_addrs, size);
    9750:	7854      	ldrb	r4, [r2, #1]
    9752:	f04f 0c16 	mov.w	ip, #22
    9756:	42b4      	cmp	r4, r6
    9758:	bf28      	it	cs
    975a:	4634      	movcs	r4, r6
    975c:	eb02 070c 	add.w	r7, r2, ip
	for (i = 0; i < cnt; i++) {
    9760:	42a3      	cmp	r3, r4
    9762:	db0f      	blt.n	9784 <bt_read_static_addr+0xb0>
	net_buf_unref(rsp);
    9764:	f013 f848 	bl	1c7f8 <net_buf_unref>
	if (!cnt) {
    9768:	2c00      	cmp	r4, #0
    976a:	d1e7      	bne.n	973c <bt_read_static_addr+0x68>
    976c:	f01d fc42 	bl	26ff4 <arch_is_user_context>
    9770:	4b0d      	ldr	r3, [pc, #52]	; (97a8 <bt_read_static_addr+0xd4>)
    9772:	4a0e      	ldr	r2, [pc, #56]	; (97ac <bt_read_static_addr+0xd8>)
    9774:	1a9b      	subs	r3, r3, r2
    9776:	08db      	lsrs	r3, r3, #3
		BT_WARN("No static addresses stored in controller");
    9778:	019b      	lsls	r3, r3, #6
    977a:	f043 0302 	orr.w	r3, r3, #2
    977e:	b170      	cbz	r0, 979e <bt_read_static_addr+0xca>
    9780:	490d      	ldr	r1, [pc, #52]	; (97b8 <bt_read_static_addr+0xe4>)
    9782:	e7bb      	b.n	96fc <bt_read_static_addr+0x28>
    9784:	1c96      	adds	r6, r2, #2
    9786:	fb0c 5103 	mla	r1, ip, r3, r5
    978a:	f856 eb04 	ldr.w	lr, [r6], #4
    978e:	f841 eb04 	str.w	lr, [r1], #4
    9792:	42be      	cmp	r6, r7
    9794:	d1f9      	bne.n	978a <bt_read_static_addr+0xb6>
    9796:	883e      	ldrh	r6, [r7, #0]
    9798:	800e      	strh	r6, [r1, #0]
	for (i = 0; i < cnt; i++) {
    979a:	3301      	adds	r3, #1
    979c:	e7e0      	b.n	9760 <bt_read_static_addr+0x8c>
		BT_WARN("No static addresses stored in controller");
    979e:	4806      	ldr	r0, [pc, #24]	; (97b8 <bt_read_static_addr+0xe4>)
    97a0:	4619      	mov	r1, r3
    97a2:	e7b1      	b.n	9708 <bt_read_static_addr+0x34>
    97a4:	20007600 	.word	0x20007600
    97a8:	0002a7b8 	.word	0x0002a7b8
    97ac:	0002a6d0 	.word	0x0002a6d0
    97b0:	0002db76 	.word	0x0002db76
    97b4:	0002dba2 	.word	0x0002dba2
    97b8:	0002dbc2 	.word	0x0002dbc2

000097bc <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
    97bc:	b570      	push	{r4, r5, r6, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
    97be:	4d13      	ldr	r5, [pc, #76]	; (980c <bt_setup_random_id_addr+0x50>)
    97c0:	79ec      	ldrb	r4, [r5, #7]
{
    97c2:	b088      	sub	sp, #32
	if (!bt_dev.id_count) {
    97c4:	b9ec      	cbnz	r4, 9802 <bt_setup_random_id_addr+0x46>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    97c6:	2101      	movs	r1, #1
    97c8:	a802      	add	r0, sp, #8
    97ca:	f7ff ff83 	bl	96d4 <bt_read_static_addr>
    97ce:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
    97d0:	b1b8      	cbz	r0, 9802 <bt_setup_random_id_addr+0x46>
					atomic_set_bit(bt_dev.flags,
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    97d2:	2616      	movs	r6, #22
    97d4:	e00e      	b.n	97f4 <bt_setup_random_id_addr+0x38>
    97d6:	ab02      	add	r3, sp, #8
    97d8:	fb06 3102 	mla	r1, r6, r2, r3
    97dc:	f10d 0001 	add.w	r0, sp, #1
    97e0:	f01d fc3f 	bl	27062 <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
    97e4:	2301      	movs	r3, #1

				id_create(i, &addr, irk);
    97e6:	4669      	mov	r1, sp
    97e8:	4610      	mov	r0, r2
				addr.type = BT_ADDR_LE_RANDOM;
    97ea:	f88d 3000 	strb.w	r3, [sp]
				id_create(i, &addr, irk);
    97ee:	f7ff fc87 	bl	9100 <id_create.isra.0>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    97f2:	3401      	adds	r4, #1
    97f4:	79eb      	ldrb	r3, [r5, #7]
    97f6:	b2e2      	uxtb	r2, r4
    97f8:	4293      	cmp	r3, r2
    97fa:	d8ec      	bhi.n	97d6 <bt_setup_random_id_addr+0x1a>
			}

			return 0;
    97fc:	2000      	movs	r0, #0
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
    97fe:	b008      	add	sp, #32
    9800:	bd70      	pop	{r4, r5, r6, pc}
	return bt_id_create(NULL, NULL);
    9802:	2100      	movs	r1, #0
    9804:	4608      	mov	r0, r1
    9806:	f7ff fea3 	bl	9550 <bt_id_create>
    980a:	e7f8      	b.n	97fe <bt_setup_random_id_addr+0x42>
    980c:	20007600 	.word	0x20007600

00009810 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
    9810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    9814:	f011 0401 	ands.w	r4, r1, #1
	id_addr = &bt_dev.id_addr[adv->id];
    9818:	7805      	ldrb	r5, [r0, #0]
{
    981a:	460e      	mov	r6, r1
    981c:	4690      	mov	r8, r2
    981e:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    9820:	d026      	beq.n	9870 <bt_id_set_adv_own_addr+0x60>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    9822:	4c22      	ldr	r4, [pc, #136]	; (98ac <bt_id_set_adv_own_addr+0x9c>)
    9824:	b12a      	cbz	r2, 9832 <bt_id_set_adv_own_addr+0x22>
    9826:	0688      	lsls	r0, r1, #26
    9828:	d503      	bpl.n	9832 <bt_id_set_adv_own_addr+0x22>
    982a:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
    982e:	0659      	lsls	r1, r3, #25
    9830:	d539      	bpl.n	98a6 <bt_id_set_adv_own_addr+0x96>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    9832:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    9836:	ea4f 09c5 	mov.w	r9, r5, lsl #3
    983a:	5ce3      	ldrb	r3, [r4, r3]
    983c:	2b01      	cmp	r3, #1
    983e:	d008      	beq.n	9852 <bt_id_set_adv_own_addr+0x42>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
    9840:	eba9 0505 	sub.w	r5, r9, r5
    9844:	5d63      	ldrb	r3, [r4, r5]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    9846:	f1b8 0f00 	cmp.w	r8, #0
    984a:	d10c      	bne.n	9866 <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    984c:	703b      	strb	r3, [r7, #0]
		if (err) {
			return err;
		}
	}

	return 0;
    984e:	2000      	movs	r0, #0
    9850:	e007      	b.n	9862 <bt_id_set_adv_own_addr+0x52>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    9852:	2007      	movs	r0, #7
    9854:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    9858:	4420      	add	r0, r4
    985a:	f7ff fc7d 	bl	9158 <set_random_address>
				if (err) {
    985e:	2800      	cmp	r0, #0
    9860:	d0ee      	beq.n	9840 <bt_id_set_adv_own_addr+0x30>
}
    9862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    9866:	06b2      	lsls	r2, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    9868:	bf48      	it	mi
    986a:	f043 0302 	orrmi.w	r3, r3, #2
    986e:	e7ed      	b.n	984c <bt_id_set_adv_own_addr+0x3c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    9870:	074b      	lsls	r3, r1, #29
    9872:	d514      	bpl.n	989e <bt_id_set_adv_own_addr+0x8e>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    9874:	4e0d      	ldr	r6, [pc, #52]	; (98ac <bt_id_set_adv_own_addr+0x9c>)
    9876:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    987a:	ea4f 08c5 	mov.w	r8, r5, lsl #3
    987e:	5cf3      	ldrb	r3, [r6, r3]
    9880:	2b01      	cmp	r3, #1
    9882:	d10a      	bne.n	989a <bt_id_set_adv_own_addr+0x8a>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    9884:	2007      	movs	r0, #7
    9886:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    988a:	4430      	add	r0, r6
    988c:	f7ff fc64 	bl	9158 <set_random_address>
			*own_addr_type = id_addr->type;
    9890:	eba8 0505 	sub.w	r5, r8, r5
    9894:	5d73      	ldrb	r3, [r6, r5]
			*own_addr_type = BT_ADDR_LE_RANDOM;
    9896:	703b      	strb	r3, [r7, #0]
		if (err) {
    9898:	e7e3      	b.n	9862 <bt_id_set_adv_own_addr+0x52>
	int err = 0;
    989a:	4620      	mov	r0, r4
    989c:	e7f8      	b.n	9890 <bt_id_set_adv_own_addr+0x80>
			err = bt_id_set_adv_private_addr(adv);
    989e:	f01d fc43 	bl	27128 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    98a2:	2301      	movs	r3, #1
    98a4:	e7f7      	b.n	9896 <bt_id_set_adv_own_addr+0x86>
			return -ENOTSUP;
    98a6:	f06f 0085 	mvn.w	r0, #133	; 0x85
    98aa:	e7da      	b.n	9862 <bt_id_set_adv_own_addr+0x52>
    98ac:	20007600 	.word	0x20007600

000098b0 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
    98b0:	b538      	push	{r3, r4, r5, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    98b2:	4d1c      	ldr	r5, [pc, #112]	; (9924 <bt_id_init+0x74>)
    98b4:	79eb      	ldrb	r3, [r5, #7]
    98b6:	b113      	cbz	r3, 98be <bt_id_init+0xe>

#if defined(CONFIG_BT_PRIVACY)
	k_delayed_work_init(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
    98b8:	2400      	movs	r4, #0
}
    98ba:	4620      	mov	r0, r4
    98bc:	bd38      	pop	{r3, r4, r5, pc}
		bt_setup_public_id_addr();
    98be:	f7ff fef9 	bl	96b4 <bt_setup_public_id_addr>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    98c2:	79eb      	ldrb	r3, [r5, #7]
    98c4:	2b00      	cmp	r3, #0
    98c6:	d1f7      	bne.n	98b8 <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
    98c8:	f7ff ff78 	bl	97bc <bt_setup_random_id_addr>
		if (err) {
    98cc:	4604      	mov	r4, r0
    98ce:	b198      	cbz	r0, 98f8 <bt_id_init+0x48>
    98d0:	f01d fb90 	bl	26ff4 <arch_is_user_context>
    98d4:	4b14      	ldr	r3, [pc, #80]	; (9928 <bt_id_init+0x78>)
    98d6:	4a15      	ldr	r2, [pc, #84]	; (992c <bt_id_init+0x7c>)
    98d8:	1a9b      	subs	r3, r3, r2
    98da:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to set identity address");
    98dc:	019b      	lsls	r3, r3, #6
    98de:	f043 0301 	orr.w	r3, r3, #1
    98e2:	b120      	cbz	r0, 98ee <bt_id_init+0x3e>
    98e4:	4912      	ldr	r1, [pc, #72]	; (9930 <bt_id_init+0x80>)
			BT_ERR("Unable to set random address");
    98e6:	4618      	mov	r0, r3
    98e8:	f01b fad5 	bl	24e96 <log_from_user>
    98ec:	e7e5      	b.n	98ba <bt_id_init+0xa>
			BT_ERR("Unable to set identity address");
    98ee:	4810      	ldr	r0, [pc, #64]	; (9930 <bt_id_init+0x80>)
    98f0:	4619      	mov	r1, r3
			BT_ERR("Unable to set random address");
    98f2:	f01b faf6 	bl	24ee2 <log_0>
			return err;
    98f6:	e7e0      	b.n	98ba <bt_id_init+0xa>
		err = set_random_address(&bt_dev.id_addr[0].a);
    98f8:	1c68      	adds	r0, r5, #1
    98fa:	f7ff fc2d 	bl	9158 <set_random_address>
		if (err) {
    98fe:	4604      	mov	r4, r0
    9900:	2800      	cmp	r0, #0
    9902:	d0d9      	beq.n	98b8 <bt_id_init+0x8>
    9904:	f01d fb76 	bl	26ff4 <arch_is_user_context>
    9908:	4b07      	ldr	r3, [pc, #28]	; (9928 <bt_id_init+0x78>)
    990a:	4a08      	ldr	r2, [pc, #32]	; (992c <bt_id_init+0x7c>)
    990c:	1a9b      	subs	r3, r3, r2
    990e:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to set random address");
    9910:	019b      	lsls	r3, r3, #6
    9912:	f043 0301 	orr.w	r3, r3, #1
    9916:	b108      	cbz	r0, 991c <bt_id_init+0x6c>
    9918:	4906      	ldr	r1, [pc, #24]	; (9934 <bt_id_init+0x84>)
    991a:	e7e4      	b.n	98e6 <bt_id_init+0x36>
    991c:	4805      	ldr	r0, [pc, #20]	; (9934 <bt_id_init+0x84>)
    991e:	4619      	mov	r1, r3
    9920:	e7e7      	b.n	98f2 <bt_id_init+0x42>
    9922:	bf00      	nop
    9924:	20007600 	.word	0x20007600
    9928:	0002a7b8 	.word	0x0002a7b8
    992c:	0002a6d0 	.word	0x0002a6d0
    9930:	0002dbeb 	.word	0x0002dbeb
    9934:	0002dc0a 	.word	0x0002dc0a

00009938 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    9938:	6843      	ldr	r3, [r0, #4]
{
    993a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    993c:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    993e:	0558      	lsls	r0, r3, #21
    9940:	d502      	bpl.n	9948 <valid_adv_param+0x10>
		return false;
    9942:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
    9944:	b003      	add	sp, #12
    9946:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    9948:	6922      	ldr	r2, [r4, #16]
    994a:	b10a      	cbz	r2, 9950 <valid_adv_param+0x18>
    994c:	07d9      	lsls	r1, r3, #31
    994e:	d5f8      	bpl.n	9942 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    9950:	4d1a      	ldr	r5, [pc, #104]	; (99bc <valid_adv_param+0x84>)
    9952:	7820      	ldrb	r0, [r4, #0]
    9954:	79eb      	ldrb	r3, [r5, #7]
    9956:	4283      	cmp	r3, r0
    9958:	d9f3      	bls.n	9942 <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    995a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    995e:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    9960:	2207      	movs	r2, #7
    9962:	4669      	mov	r1, sp
    9964:	4428      	add	r0, r5
    9966:	9300      	str	r3, [sp, #0]
    9968:	f8cd 3003 	str.w	r3, [sp, #3]
    996c:	f020 fd2a 	bl	2a3c4 <memcmp>
	if (param->id >= bt_dev.id_count ||
    9970:	2800      	cmp	r0, #0
    9972:	d0e6      	beq.n	9942 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    9974:	6860      	ldr	r0, [r4, #4]
    9976:	07c2      	lsls	r2, r0, #31
    9978:	d406      	bmi.n	9988 <valid_adv_param+0x50>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    997a:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    997e:	2b08      	cmp	r3, #8
    9980:	d802      	bhi.n	9988 <valid_adv_param+0x50>
    9982:	68a3      	ldr	r3, [r4, #8]
    9984:	2b9f      	cmp	r3, #159	; 0x9f
    9986:	d9dc      	bls.n	9942 <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    9988:	f010 0f30 	tst.w	r0, #48	; 0x30
    998c:	d002      	beq.n	9994 <valid_adv_param+0x5c>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    998e:	6923      	ldr	r3, [r4, #16]
    9990:	2b00      	cmp	r3, #0
    9992:	d0d6      	beq.n	9942 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    9994:	06c3      	lsls	r3, r0, #27
    9996:	d401      	bmi.n	999c <valid_adv_param+0x64>
    9998:	6923      	ldr	r3, [r4, #16]
    999a:	b943      	cbnz	r3, 99ae <valid_adv_param+0x76>
		if (param->interval_min > param->interval_max ||
    999c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    99a0:	429a      	cmp	r2, r3
    99a2:	d8ce      	bhi.n	9942 <valid_adv_param+0xa>
    99a4:	2a1f      	cmp	r2, #31
    99a6:	d9cc      	bls.n	9942 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    99a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    99ac:	d8c9      	bhi.n	9942 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    99ae:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    99b2:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    99b6:	bf18      	it	ne
    99b8:	2001      	movne	r0, #1
    99ba:	e7c3      	b.n	9944 <valid_adv_param+0xc>
    99bc:	20007600 	.word	0x20007600

000099c0 <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
    99c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    99c4:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    99c6:	2120      	movs	r1, #32
{
    99c8:	4682      	mov	sl, r0
    99ca:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    99cc:	f7fe fc24 	bl	8218 <bt_hci_cmd_create>
	if (!buf) {
    99d0:	4606      	mov	r6, r0
    99d2:	2800      	cmp	r0, #0
    99d4:	d065      	beq.n	9aa2 <hci_set_ad+0xe2>
    99d6:	2120      	movs	r1, #32
    99d8:	3008      	adds	r0, #8
    99da:	f01f f963 	bl	28ca4 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
    99de:	2220      	movs	r2, #32
    99e0:	2100      	movs	r1, #0
    99e2:	4681      	mov	r9, r0
    99e4:	f020 fd0a 	bl	2a3fc <memset>
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));

	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    99e8:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
    99ec:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
    99f0:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
    99f2:	2500      	movs	r5, #0
		for (size_t j = 0; j < ad[i].len; j++) {
    99f4:	f8d4 8000 	ldr.w	r8, [r4]
    99f8:	2300      	movs	r3, #0
    99fa:	6862      	ldr	r2, [r4, #4]
    99fc:	4293      	cmp	r3, r2
    99fe:	d30d      	bcc.n	9a1c <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
    9a00:	9b00      	ldr	r3, [sp, #0]
    9a02:	3408      	adds	r4, #8
    9a04:	429c      	cmp	r4, r3
    9a06:	d1f5      	bne.n	99f4 <hci_set_ad+0x34>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    9a08:	2200      	movs	r2, #0
    9a0a:	4631      	mov	r1, r6
    9a0c:	4650      	mov	r0, sl
	*data_len = set_data_len;
    9a0e:	f889 5000 	strb.w	r5, [r9]
}
    9a12:	b003      	add	sp, #12
    9a14:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    9a18:	f7fe bd94 	b.w	8544 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
    9a1c:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
    9a20:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
    9a24:	1ca8      	adds	r0, r5, #2
    9a26:	1811      	adds	r1, r2, r0
    9a28:	291f      	cmp	r1, #31
    9a2a:	d923      	bls.n	9a74 <hci_set_ad+0xb4>
				if (!(type == BT_DATA_NAME_COMPLETE &&
    9a2c:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
    9a30:	f1c5 021d 	rsb	r2, r5, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
    9a34:	d101      	bne.n	9a3a <hci_set_ad+0x7a>
    9a36:	2a00      	cmp	r2, #0
    9a38:	dc1a      	bgt.n	9a70 <hci_set_ad+0xb0>
    9a3a:	f01d fb99 	bl	27170 <arch_is_user_context>
    9a3e:	4b1a      	ldr	r3, [pc, #104]	; (9aa8 <hci_set_ad+0xe8>)
    9a40:	4a1a      	ldr	r2, [pc, #104]	; (9aac <hci_set_ad+0xec>)
    9a42:	1a9b      	subs	r3, r3, r2
    9a44:	08db      	lsrs	r3, r3, #3
					BT_ERR("Too big advertising data");
    9a46:	019b      	lsls	r3, r3, #6
    9a48:	f043 0301 	orr.w	r3, r3, #1
    9a4c:	b158      	cbz	r0, 9a66 <hci_set_ad+0xa6>
    9a4e:	4918      	ldr	r1, [pc, #96]	; (9ab0 <hci_set_ad+0xf0>)
    9a50:	4618      	mov	r0, r3
    9a52:	f01b fa20 	bl	24e96 <log_from_user>
		net_buf_unref(buf);
    9a56:	4630      	mov	r0, r6
    9a58:	f012 fece 	bl	1c7f8 <net_buf_unref>
					return -EINVAL;
    9a5c:	f06f 0015 	mvn.w	r0, #21
}
    9a60:	b003      	add	sp, #12
    9a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					BT_ERR("Too big advertising data");
    9a66:	4812      	ldr	r0, [pc, #72]	; (9ab0 <hci_set_ad+0xf0>)
    9a68:	4619      	mov	r1, r3
    9a6a:	f01b fa3a 	bl	24ee2 <log_0>
    9a6e:	e7f2      	b.n	9a56 <hci_set_ad+0x96>
				type = BT_DATA_NAME_SHORTENED;
    9a70:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
    9a74:	b2d7      	uxtb	r7, r2
    9a76:	1c79      	adds	r1, r7, #1
    9a78:	f80b 1005 	strb.w	r1, [fp, r5]
    9a7c:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
    9a7e:	b2c9      	uxtb	r1, r1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    9a80:	fa5b f080 	uxtab	r0, fp, r0
    9a84:	f80b c001 	strb.w	ip, [fp, r1]
    9a88:	f8d8 1004 	ldr.w	r1, [r8, #4]
    9a8c:	9301      	str	r3, [sp, #4]
			set_data_len += len;
    9a8e:	3702      	adds	r7, #2
    9a90:	f020 fca6 	bl	2a3e0 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
    9a94:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
    9a96:	443d      	add	r5, r7
    9a98:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
    9a9a:	3301      	adds	r3, #1
    9a9c:	f108 0808 	add.w	r8, r8, #8
    9aa0:	e7ab      	b.n	99fa <hci_set_ad+0x3a>
		return -ENOBUFS;
    9aa2:	f06f 0068 	mvn.w	r0, #104	; 0x68
    9aa6:	e7db      	b.n	9a60 <hci_set_ad+0xa0>
    9aa8:	0002a6d0 	.word	0x0002a6d0
    9aac:	0002a6d0 	.word	0x0002a6d0
    9ab0:	0002dc2d 	.word	0x0002dc2d

00009ab4 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    9ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
    9ab6:	4605      	mov	r5, r0
	struct bt_adv_id_check_data check_data = {
		.id = adv->id,
    9ab8:	7802      	ldrb	r2, [r0, #0]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    9aba:	4827      	ldr	r0, [pc, #156]	; (9b58 <le_adv_start_add_conn+0xa4>)
{
    9abc:	b085      	sub	sp, #20
    9abe:	460f      	mov	r7, r1
    9ac0:	f01d fb6f 	bl	271a2 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
    9ac4:	f010 0f40 	tst.w	r0, #64	; 0x40
    9ac8:	4b24      	ldr	r3, [pc, #144]	; (9b5c <le_adv_start_add_conn+0xa8>)
    9aca:	d008      	beq.n	9ade <le_adv_start_add_conn+0x2a>
    9acc:	f103 0028 	add.w	r0, r3, #40	; 0x28
    9ad0:	f01d fb67 	bl	271a2 <atomic_get>
    9ad4:	05c1      	lsls	r1, r0, #23
    9ad6:	d502      	bpl.n	9ade <le_adv_start_add_conn+0x2a>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE) &&
    9ad8:	7e19      	ldrb	r1, [r3, #24]
    9ada:	4291      	cmp	r1, r2
    9adc:	d132      	bne.n	9b44 <le_adv_start_add_conn+0x90>
	bt_le_ext_adv_foreach(adv_id_check_connectable_func, &check_data);
	if (check_data.adv_enabled) {
		return -ENOTSUP;
	}

	bt_dev.adv_conn_id = adv->id;
    9ade:	462e      	mov	r6, r5
    9ae0:	4669      	mov	r1, sp
    9ae2:	f816 2b09 	ldrb.w	r2, [r6], #9
    9ae6:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    9aea:	4630      	mov	r0, r6

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    9aec:	2300      	movs	r3, #0
    9aee:	2207      	movs	r2, #7
    9af0:	9300      	str	r3, [sp, #0]
    9af2:	f8cd 3003 	str.w	r3, [sp, #3]
    9af6:	f020 fc65 	bl	2a3c4 <memcmp>
    9afa:	4604      	mov	r4, r0
    9afc:	7828      	ldrb	r0, [r5, #0]
    9afe:	b164      	cbz	r4, 9b1a <le_adv_start_add_conn+0x66>
		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
		*out_conn = conn;
		return 0;
	}

	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    9b00:	4631      	mov	r1, r6
    9b02:	f000 ffed 	bl	aae0 <bt_conn_exists_le>
    9b06:	4604      	mov	r4, r0
    9b08:	b9f8      	cbnz	r0, 9b4a <le_adv_start_add_conn+0x96>
		return -EINVAL;
	}

	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    9b0a:	7828      	ldrb	r0, [r5, #0]
    9b0c:	4631      	mov	r1, r6
    9b0e:	f000 fe7d 	bl	a80c <bt_conn_add_le>
	if (!conn) {
    9b12:	4605      	mov	r5, r0
    9b14:	b1e0      	cbz	r0, 9b50 <le_adv_start_add_conn+0x9c>
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    9b16:	2105      	movs	r1, #5
    9b18:	e00e      	b.n	9b38 <le_adv_start_add_conn+0x84>
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    9b1a:	f06f 03ff 	mvn.w	r3, #255	; 0xff
    9b1e:	9302      	str	r3, [sp, #8]
    9b20:	a902      	add	r1, sp, #8
    9b22:	f64f 73ff 	movw	r3, #65535	; 0xffff
    9b26:	f8ad 300c 	strh.w	r3, [sp, #12]
    9b2a:	f88d 300e 	strb.w	r3, [sp, #14]
    9b2e:	f000 fe6d 	bl	a80c <bt_conn_add_le>
		if (!conn) {
    9b32:	4605      	mov	r5, r0
    9b34:	b160      	cbz	r0, 9b50 <le_adv_start_add_conn+0x9c>
		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
    9b36:	2104      	movs	r1, #4
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    9b38:	f000 fea2 	bl	a880 <bt_conn_set_state>
	*out_conn = conn;
    9b3c:	603d      	str	r5, [r7, #0]
	return 0;
}
    9b3e:	4620      	mov	r0, r4
    9b40:	b005      	add	sp, #20
    9b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOTSUP;
    9b44:	f06f 0485 	mvn.w	r4, #133	; 0x85
    9b48:	e7f9      	b.n	9b3e <le_adv_start_add_conn+0x8a>
		return -EINVAL;
    9b4a:	f06f 0415 	mvn.w	r4, #21
    9b4e:	e7f6      	b.n	9b3e <le_adv_start_add_conn+0x8a>
		return -ENOMEM;
    9b50:	f06f 040b 	mvn.w	r4, #11
    9b54:	e7f3      	b.n	9b3e <le_adv_start_add_conn+0x8a>
    9b56:	bf00      	nop
    9b58:	20007628 	.word	0x20007628
    9b5c:	20007600 	.word	0x20007600

00009b60 <bt_le_ext_adv_foreach>:
{
    9b60:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
    9b62:	4801      	ldr	r0, [pc, #4]	; (9b68 <bt_le_ext_adv_foreach+0x8>)
    9b64:	4718      	bx	r3
    9b66:	bf00      	nop
    9b68:	20007618 	.word	0x20007618

00009b6c <bt_le_adv_lookup_legacy>:
}
    9b6c:	4800      	ldr	r0, [pc, #0]	; (9b70 <bt_le_adv_lookup_legacy+0x4>)
    9b6e:	4770      	bx	lr
    9b70:	20007618 	.word	0x20007618

00009b74 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    9b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
    9b78:	690e      	ldr	r6, [r1, #16]
{
    9b7a:	b08d      	sub	sp, #52	; 0x34
    9b7c:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
    9b7e:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable;
    9b80:	ebb6 0b03 	subs.w	fp, r6, r3
{
    9b84:	4605      	mov	r5, r0
    9b86:	488b      	ldr	r0, [pc, #556]	; (9db4 <bt_le_adv_start_legacy+0x240>)
	struct bt_conn *conn = NULL;
    9b88:	9305      	str	r3, [sp, #20]
	bool dir_adv = (param->peer != NULL), scannable;
    9b8a:	bf18      	it	ne
    9b8c:	f04f 0b01 	movne.w	fp, #1
{
    9b90:	460c      	mov	r4, r1
    9b92:	4691      	mov	r9, r2
    9b94:	f01d fb05 	bl	271a2 <atomic_get>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    9b98:	0787      	lsls	r7, r0, #30
    9b9a:	f140 8100 	bpl.w	9d9e <bt_le_adv_start_legacy+0x22a>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    9b9e:	4608      	mov	r0, r1
    9ba0:	f7ff feca 	bl	9938 <valid_adv_param>
    9ba4:	b928      	cbnz	r0, 9bb2 <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
    9ba6:	f06f 0b15 	mvn.w	fp, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    9baa:	4658      	mov	r0, fp
    9bac:	b00d      	add	sp, #52	; 0x34
    9bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
    9bb2:	4620      	mov	r0, r4
    9bb4:	f01d faca 	bl	2714c <bt_id_adv_random_addr_check>
    9bb8:	4607      	mov	r7, r0
    9bba:	2800      	cmp	r0, #0
    9bbc:	d0f3      	beq.n	9ba6 <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    9bbe:	f105 0810 	add.w	r8, r5, #16
    9bc2:	4640      	mov	r0, r8
    9bc4:	f01d faed 	bl	271a2 <atomic_get>
    9bc8:	f3c0 1380 	ubfx	r3, r0, #6, #1
    9bcc:	0640      	lsls	r0, r0, #25
    9bce:	f100 80e9 	bmi.w	9da4 <bt_le_adv_start_legacy+0x230>
	(void)memset(&set_param, 0, sizeof(set_param));
    9bd2:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    9bd6:	f8cd 302b 	str.w	r3, [sp, #43]	; 0x2b
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    9bda:	68a3      	ldr	r3, [r4, #8]
    9bdc:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.channel_map  = get_adv_channel_map(param->options);
    9be0:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    9be2:	68e3      	ldr	r3, [r4, #12]
    9be4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
    9be8:	f01d facc 	bl	27184 <get_adv_channel_map>
	if (adv->id != param->id) {
    9bec:	782a      	ldrb	r2, [r5, #0]
    9bee:	7823      	ldrb	r3, [r4, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
    9bf0:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	if (adv->id != param->id) {
    9bf4:	429a      	cmp	r2, r3
    9bf6:	d004      	beq.n	9c02 <bt_le_adv_start_legacy+0x8e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9bf8:	486e      	ldr	r0, [pc, #440]	; (9db4 <bt_le_adv_start_legacy+0x240>)
    9bfa:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    9bfe:	f01d fad6 	bl	271ae <atomic_and>
	bt_dev.adv_conn_id = adv->id;
    9c02:	4a6d      	ldr	r2, [pc, #436]	; (9db8 <bt_le_adv_start_legacy+0x244>)
	adv->id = param->id;
    9c04:	7823      	ldrb	r3, [r4, #0]
    9c06:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
    9c08:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
    9c0c:	6861      	ldr	r1, [r4, #4]
    9c0e:	465a      	mov	r2, fp
    9c10:	f10d 0325 	add.w	r3, sp, #37	; 0x25
    9c14:	4628      	mov	r0, r5
    9c16:	f7ff fdfb 	bl	9810 <bt_id_set_adv_own_addr>
	if (err) {
    9c1a:	4683      	mov	fp, r0
    9c1c:	2800      	cmp	r0, #0
    9c1e:	d1c4      	bne.n	9baa <bt_le_adv_start_legacy+0x36>
	if (dir_adv) {
    9c20:	f105 0009 	add.w	r0, r5, #9
    9c24:	2e00      	cmp	r6, #0
    9c26:	d050      	beq.n	9cca <bt_le_adv_start_legacy+0x156>
		bt_addr_le_copy(&adv->target_addr, param->peer);
    9c28:	6921      	ldr	r1, [r4, #16]
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    9c2a:	f01d facf 	bl	271cc <bt_addr_le_copy>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    9c2e:	6860      	ldr	r0, [r4, #4]
    9c30:	07c1      	lsls	r1, r0, #31
    9c32:	d552      	bpl.n	9cda <bt_le_adv_start_legacy+0x166>
		if (dir_adv) {
    9c34:	2e00      	cmp	r6, #0
    9c36:	d04d      	beq.n	9cd4 <bt_le_adv_start_legacy+0x160>
				set_param.type = BT_HCI_ADV_DIRECT_IND;
    9c38:	f010 0f10 	tst.w	r0, #16
    9c3c:	bf14      	ite	ne
    9c3e:	2304      	movne	r3, #4
    9c40:	2301      	moveq	r3, #1
			bt_addr_le_copy(&set_param.direct_addr, param->peer);
    9c42:	6921      	ldr	r1, [r4, #16]
    9c44:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    9c48:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    9c4c:	f01d fabe 	bl	271cc <bt_addr_le_copy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    9c50:	210f      	movs	r1, #15
    9c52:	f242 0006 	movw	r0, #8198	; 0x2006
    9c56:	f7fe fadf 	bl	8218 <bt_hci_cmd_create>
	if (!buf) {
    9c5a:	4683      	mov	fp, r0
    9c5c:	2800      	cmp	r0, #0
    9c5e:	f000 80a4 	beq.w	9daa <bt_le_adv_start_legacy+0x236>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    9c62:	220f      	movs	r2, #15
    9c64:	a908      	add	r1, sp, #32
    9c66:	3008      	adds	r0, #8
    9c68:	f01f f822 	bl	28cb0 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    9c6c:	2200      	movs	r2, #0
    9c6e:	4659      	mov	r1, fp
    9c70:	f242 0006 	movw	r0, #8198	; 0x2006
    9c74:	f7fe fc66 	bl	8544 <bt_hci_cmd_send_sync>
	if (err) {
    9c78:	2800      	cmp	r0, #0
    9c7a:	f040 8099 	bne.w	9db0 <bt_le_adv_start_legacy+0x23c>
	if (!dir_adv) {
    9c7e:	2e00      	cmp	r6, #0
    9c80:	d036      	beq.n	9cf0 <bt_le_adv_start_legacy+0x17c>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    9c82:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    9c84:	07da      	lsls	r2, r3, #31
    9c86:	d444      	bmi.n	9d12 <bt_le_adv_start_legacy+0x19e>
	return bt_le_adv_set_enable_legacy(adv, enable);
    9c88:	2101      	movs	r1, #1
    9c8a:	4628      	mov	r0, r5
    9c8c:	f01d fb38 	bl	27300 <bt_le_adv_set_enable_legacy>
	if (err) {
    9c90:	4683      	mov	fp, r0
    9c92:	2800      	cmp	r0, #0
    9c94:	d07c      	beq.n	9d90 <bt_le_adv_start_legacy+0x21c>
    9c96:	f01d fa6b 	bl	27170 <arch_is_user_context>
    9c9a:	4b48      	ldr	r3, [pc, #288]	; (9dbc <bt_le_adv_start_legacy+0x248>)
    9c9c:	4a48      	ldr	r2, [pc, #288]	; (9dc0 <bt_le_adv_start_legacy+0x24c>)
    9c9e:	1a9b      	subs	r3, r3, r2
    9ca0:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to start advertiser");
    9ca2:	019b      	lsls	r3, r3, #6
    9ca4:	f043 0301 	orr.w	r3, r3, #1
    9ca8:	2800      	cmp	r0, #0
    9caa:	d06c      	beq.n	9d86 <bt_le_adv_start_legacy+0x212>
    9cac:	4945      	ldr	r1, [pc, #276]	; (9dc4 <bt_le_adv_start_legacy+0x250>)
    9cae:	4618      	mov	r0, r3
    9cb0:	f01b f8f1 	bl	24e96 <log_from_user>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    9cb4:	9805      	ldr	r0, [sp, #20]
    9cb6:	2800      	cmp	r0, #0
    9cb8:	f43f af77 	beq.w	9baa <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    9cbc:	2100      	movs	r1, #0
    9cbe:	f000 fddf 	bl	a880 <bt_conn_set_state>
			bt_conn_unref(conn);
    9cc2:	9805      	ldr	r0, [sp, #20]
    9cc4:	f01d fc1d 	bl	27502 <bt_conn_unref>
    9cc8:	e76f      	b.n	9baa <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    9cca:	9606      	str	r6, [sp, #24]
    9ccc:	a906      	add	r1, sp, #24
    9cce:	f8cd 601b 	str.w	r6, [sp, #27]
    9cd2:	e7aa      	b.n	9c2a <bt_le_adv_start_legacy+0xb6>
			set_param.type = BT_HCI_ADV_IND;
    9cd4:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
    9cd8:	e7ba      	b.n	9c50 <bt_le_adv_start_legacy+0xdc>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    9cda:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9cdc:	b933      	cbnz	r3, 9cec <bt_le_adv_start_legacy+0x178>
    9cde:	f3c0 07c0 	ubfx	r7, r0, #3, #1
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
    9ce2:	f1c7 0303 	rsb	r3, r7, #3
    9ce6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    9cea:	e7b1      	b.n	9c50 <bt_le_adv_start_legacy+0xdc>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    9cec:	2701      	movs	r7, #1
    9cee:	e7f8      	b.n	9ce2 <bt_le_adv_start_legacy+0x16e>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
    9cf0:	6863      	ldr	r3, [r4, #4]
    9cf2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    9cf6:	e9cd 7301 	strd	r7, r3, [sp, #4]
    9cfa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9cfc:	9300      	str	r3, [sp, #0]
    9cfe:	4652      	mov	r2, sl
    9d00:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9d02:	4649      	mov	r1, r9
    9d04:	4628      	mov	r0, r5
    9d06:	f01d fa7f 	bl	27208 <le_adv_update.constprop.0>
		if (err) {
    9d0a:	4683      	mov	fp, r0
    9d0c:	2800      	cmp	r0, #0
    9d0e:	d0b8      	beq.n	9c82 <bt_le_adv_start_legacy+0x10e>
    9d10:	e74b      	b.n	9baa <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
    9d12:	a905      	add	r1, sp, #20
    9d14:	4628      	mov	r0, r5
    9d16:	f7ff fecd 	bl	9ab4 <le_adv_start_add_conn>
		if (err) {
    9d1a:	4683      	mov	fp, r0
    9d1c:	2800      	cmp	r0, #0
    9d1e:	d0b3      	beq.n	9c88 <bt_le_adv_start_legacy+0x114>
			if (err == -ENOMEM && !dir_adv &&
    9d20:	f110 0f0c 	cmn.w	r0, #12
    9d24:	f47f af41 	bne.w	9baa <bt_le_adv_start_legacy+0x36>
    9d28:	2e00      	cmp	r6, #0
    9d2a:	f47f af3e 	bne.w	9baa <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    9d2e:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
    9d30:	079b      	lsls	r3, r3, #30
    9d32:	f53f af3a 	bmi.w	9baa <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    9d36:	6860      	ldr	r0, [r4, #4]
    9d38:	f080 0002 	eor.w	r0, r0, #2
    9d3c:	f3c0 0b40 	ubfx	fp, r0, #1, #1
    9d40:	f00b 0201 	and.w	r2, fp, #1
    9d44:	210c      	movs	r1, #12
    9d46:	4640      	mov	r0, r8
    9d48:	f01d fa47 	bl	271da <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
    9d4c:	6862      	ldr	r2, [r4, #4]
    9d4e:	2107      	movs	r1, #7
    9d50:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    9d54:	4640      	mov	r0, r8
    9d56:	f01d fa40 	bl	271da <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    9d5a:	6862      	ldr	r2, [r4, #4]
    9d5c:	2108      	movs	r1, #8
    9d5e:	f002 0201 	and.w	r2, r2, #1
    9d62:	4640      	mov	r0, r8
    9d64:	f01d fa39 	bl	271da <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    9d68:	463a      	mov	r2, r7
    9d6a:	2109      	movs	r1, #9
    9d6c:	4640      	mov	r0, r8
    9d6e:	f01d fa34 	bl	271da <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    9d72:	6862      	ldr	r2, [r4, #4]
    9d74:	210b      	movs	r1, #11
    9d76:	f3c2 0280 	ubfx	r2, r2, #2, #1
    9d7a:	4640      	mov	r0, r8
    9d7c:	f01d fa2d 	bl	271da <atomic_set_bit_to>
	return 0;
    9d80:	f04f 0b00 	mov.w	fp, #0
    9d84:	e711      	b.n	9baa <bt_le_adv_start_legacy+0x36>
		BT_ERR("Failed to start advertiser");
    9d86:	480f      	ldr	r0, [pc, #60]	; (9dc4 <bt_le_adv_start_legacy+0x250>)
    9d88:	4619      	mov	r1, r3
    9d8a:	f01b f8aa 	bl	24ee2 <log_0>
    9d8e:	e791      	b.n	9cb4 <bt_le_adv_start_legacy+0x140>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    9d90:	9805      	ldr	r0, [sp, #20]
    9d92:	b108      	cbz	r0, 9d98 <bt_le_adv_start_legacy+0x224>
		bt_conn_unref(conn);
    9d94:	f01d fbb5 	bl	27502 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    9d98:	2e00      	cmp	r6, #0
    9d9a:	d1d1      	bne.n	9d40 <bt_le_adv_start_legacy+0x1cc>
    9d9c:	e7cb      	b.n	9d36 <bt_le_adv_start_legacy+0x1c2>
		return -EAGAIN;
    9d9e:	f06f 0b0a 	mvn.w	fp, #10
    9da2:	e702      	b.n	9baa <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
    9da4:	f06f 0b77 	mvn.w	fp, #119	; 0x77
    9da8:	e6ff      	b.n	9baa <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
    9daa:	f06f 0b68 	mvn.w	fp, #104	; 0x68
    9dae:	e6fc      	b.n	9baa <bt_le_adv_start_legacy+0x36>
    9db0:	4683      	mov	fp, r0
    9db2:	e6fa      	b.n	9baa <bt_le_adv_start_legacy+0x36>
    9db4:	20007698 	.word	0x20007698
    9db8:	20007600 	.word	0x20007600
    9dbc:	0002a6d0 	.word	0x0002a6d0
    9dc0:	0002a6d0 	.word	0x0002a6d0
    9dc4:	0002dc46 	.word	0x0002dc46

00009dc8 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    9dc8:	b513      	push	{r0, r1, r4, lr}

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    9dca:	9c04      	ldr	r4, [sp, #16]
    9dcc:	e9cd 3400 	strd	r3, r4, [sp]
    9dd0:	4613      	mov	r3, r2
    9dd2:	460a      	mov	r2, r1
    9dd4:	4601      	mov	r1, r0
    9dd6:	4802      	ldr	r0, [pc, #8]	; (9de0 <bt_le_adv_start+0x18>)
    9dd8:	f7ff fecc 	bl	9b74 <bt_le_adv_start_legacy>
	if (err) {
		bt_le_adv_delete_legacy();
	}

	return err;
}
    9ddc:	b002      	add	sp, #8
    9dde:	bd10      	pop	{r4, pc}
    9de0:	20007618 	.word	0x20007618

00009de4 <bt_le_adv_resume>:
	return 0;
}

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
    9de4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    9de6:	481e      	ldr	r0, [pc, #120]	; (9e60 <bt_le_adv_resume+0x7c>)
    9de8:	4c1d      	ldr	r4, [pc, #116]	; (9e60 <bt_le_adv_resume+0x7c>)
    9dea:	f01d f9da 	bl	271a2 <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    9dee:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    9df2:	d032      	beq.n	9e5a <bt_le_adv_resume+0x76>
    9df4:	4620      	mov	r0, r4
    9df6:	f01d f9d4 	bl	271a2 <atomic_get>
    9dfa:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    9dfc:	f3c0 1580 	ubfx	r5, r0, #6, #1
    9e00:	d42b      	bmi.n	9e5a <bt_le_adv_resume+0x76>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    9e02:	4620      	mov	r0, r4
    9e04:	f01d f9cd 	bl	271a2 <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    9e08:	05c3      	lsls	r3, r0, #23
    9e0a:	d526      	bpl.n	9e5a <bt_le_adv_resume+0x76>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
    9e0c:	a901      	add	r1, sp, #4
    9e0e:	f1a4 0010 	sub.w	r0, r4, #16
    9e12:	f7ff fe4f 	bl	9ab4 <le_adv_start_add_conn>
	if (err) {
    9e16:	bb00      	cbnz	r0, 9e5a <bt_le_adv_resume+0x76>
	return bt_le_adv_set_enable_legacy(adv, enable);
    9e18:	2101      	movs	r1, #1
    9e1a:	f1a4 0010 	sub.w	r0, r4, #16
    9e1e:	f01d fa6f 	bl	27300 <bt_le_adv_set_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		bt_id_set_adv_private_addr(adv);
	}

	err = bt_le_adv_set_enable(adv, true);
	if (err) {
    9e22:	b150      	cbz	r0, 9e3a <bt_le_adv_resume+0x56>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    9e24:	4629      	mov	r1, r5
    9e26:	9801      	ldr	r0, [sp, #4]
    9e28:	f000 fd2a 	bl	a880 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9e2c:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    9e30:	4620      	mov	r0, r4
    9e32:	f01d f9bc 	bl	271ae <atomic_and>
	return (old & mask) != 0;
    9e36:	f3c0 3500 	ubfx	r5, r0, #12, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
    9e3a:	9801      	ldr	r0, [sp, #4]
    9e3c:	f01d fb61 	bl	27502 <bt_conn_unref>
	if (persist_paused) {
    9e40:	b15d      	cbz	r5, 9e5a <bt_le_adv_resume+0x76>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9e42:	f3bf 8f5b 	dmb	ish
    9e46:	e854 3f00 	ldrex	r3, [r4]
    9e4a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    9e4e:	e844 3200 	strex	r2, r3, [r4]
    9e52:	2a00      	cmp	r2, #0
    9e54:	d1f7      	bne.n	9e46 <bt_le_adv_resume+0x62>
    9e56:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
    9e5a:	b003      	add	sp, #12
    9e5c:	bd30      	pop	{r4, r5, pc}
    9e5e:	bf00      	nop
    9e60:	20007628 	.word	0x20007628

00009e64 <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
    9e64:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, 64) == 0;
    9e66:	4904      	ldr	r1, [pc, #16]	; (9e78 <bt_pub_key_is_debug+0x14>)
    9e68:	2240      	movs	r2, #64	; 0x40
    9e6a:	f020 faab 	bl	2a3c4 <memcmp>
}
    9e6e:	fab0 f080 	clz	r0, r0
    9e72:	0940      	lsrs	r0, r0, #5
    9e74:	bd08      	pop	{r3, pc}
    9e76:	bf00      	nop
    9e78:	0002dcf6 	.word	0x0002dcf6

00009e7c <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    9e7c:	b570      	push	{r4, r5, r6, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
    9e7e:	4b51      	ldr	r3, [pc, #324]	; (9fc4 <bt_pub_key_gen+0x148>)
    9e80:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
    9e84:	f003 0306 	and.w	r3, r3, #6
    9e88:	2b06      	cmp	r3, #6
    9e8a:	d016      	beq.n	9eba <bt_pub_key_gen+0x3e>
    9e8c:	f01d fa5f 	bl	2734e <arch_is_user_context>
    9e90:	4b4d      	ldr	r3, [pc, #308]	; (9fc8 <bt_pub_key_gen+0x14c>)
    9e92:	4a4e      	ldr	r2, [pc, #312]	; (9fcc <bt_pub_key_gen+0x150>)
    9e94:	1a9b      	subs	r3, r3, r2
    9e96:	08db      	lsrs	r3, r3, #3
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
    9e98:	019b      	lsls	r3, r3, #6
    9e9a:	f043 0302 	orr.w	r3, r3, #2
    9e9e:	b138      	cbz	r0, 9eb0 <bt_pub_key_gen+0x34>
    9ea0:	494b      	ldr	r1, [pc, #300]	; (9fd0 <bt_pub_key_gen+0x154>)
    9ea2:	4618      	mov	r0, r3
    9ea4:	f01a fff7 	bl	24e96 <log_from_user>
		return -ENOTSUP;
    9ea8:	f06f 0685 	mvn.w	r6, #133	; 0x85
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
    9eac:	4630      	mov	r0, r6
    9eae:	bd70      	pop	{r4, r5, r6, pc}
		BT_WARN("ECC HCI commands not available");
    9eb0:	4847      	ldr	r0, [pc, #284]	; (9fd0 <bt_pub_key_gen+0x154>)
    9eb2:	4619      	mov	r1, r3
    9eb4:	f01b f815 	bl	24ee2 <log_0>
    9eb8:	e7f6      	b.n	9ea8 <bt_pub_key_gen+0x2c>
	if (!new_cb) {
    9eba:	2800      	cmp	r0, #0
    9ebc:	d07f      	beq.n	9fbe <bt_pub_key_gen+0x142>
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    9ebe:	4d45      	ldr	r5, [pc, #276]	; (9fd4 <bt_pub_key_gen+0x158>)
    9ec0:	682a      	ldr	r2, [r5, #0]
    9ec2:	b10a      	cbz	r2, 9ec8 <bt_pub_key_gen+0x4c>
    9ec4:	1f13      	subs	r3, r2, #4
    9ec6:	b9bb      	cbnz	r3, 9ef8 <bt_pub_key_gen+0x7c>
	parent->next = child;
    9ec8:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
    9eca:	686a      	ldr	r2, [r5, #4]
	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
    9ecc:	1d03      	adds	r3, r0, #4
	list->head = node;
    9ece:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
    9ed0:	b902      	cbnz	r2, 9ed4 <bt_pub_key_gen+0x58>
	list->tail = node;
    9ed2:	606b      	str	r3, [r5, #4]
    9ed4:	4c40      	ldr	r4, [pc, #256]	; (9fd8 <bt_pub_key_gen+0x15c>)
    9ed6:	f3bf 8f5b 	dmb	ish
    9eda:	e854 2f00 	ldrex	r2, [r4]
    9ede:	f042 0310 	orr.w	r3, r2, #16
    9ee2:	e844 3100 	strex	r1, r3, [r4]
    9ee6:	2900      	cmp	r1, #0
    9ee8:	d1f7      	bne.n	9eda <bt_pub_key_gen+0x5e>
    9eea:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    9eee:	f012 0210 	ands.w	r2, r2, #16
    9ef2:	d020      	beq.n	9f36 <bt_pub_key_gen+0xba>
		return 0;
    9ef4:	2600      	movs	r6, #0
    9ef6:	e7d9      	b.n	9eac <bt_pub_key_gen+0x30>
		if (cb == new_cb) {
    9ef8:	4283      	cmp	r3, r0
    9efa:	d115      	bne.n	9f28 <bt_pub_key_gen+0xac>
    9efc:	f01d fa27 	bl	2734e <arch_is_user_context>
    9f00:	4b31      	ldr	r3, [pc, #196]	; (9fc8 <bt_pub_key_gen+0x14c>)
    9f02:	4a32      	ldr	r2, [pc, #200]	; (9fcc <bt_pub_key_gen+0x150>)
    9f04:	1a9b      	subs	r3, r3, r2
    9f06:	08db      	lsrs	r3, r3, #3
			BT_WARN("Callback already registered");
    9f08:	019b      	lsls	r3, r3, #6
    9f0a:	f043 0302 	orr.w	r3, r3, #2
    9f0e:	b130      	cbz	r0, 9f1e <bt_pub_key_gen+0xa2>
    9f10:	4932      	ldr	r1, [pc, #200]	; (9fdc <bt_pub_key_gen+0x160>)
    9f12:	4618      	mov	r0, r3
    9f14:	f01a ffbf 	bl	24e96 <log_from_user>
			return -EALREADY;
    9f18:	f06f 0677 	mvn.w	r6, #119	; 0x77
    9f1c:	e7c6      	b.n	9eac <bt_pub_key_gen+0x30>
			BT_WARN("Callback already registered");
    9f1e:	482f      	ldr	r0, [pc, #188]	; (9fdc <bt_pub_key_gen+0x160>)
    9f20:	4619      	mov	r1, r3
    9f22:	f01a ffde 	bl	24ee2 <log_0>
    9f26:	e7f7      	b.n	9f18 <bt_pub_key_gen+0x9c>
Z_GENLIST_PEEK_NEXT(slist, snode)
    9f28:	1d19      	adds	r1, r3, #4
    9f2a:	d0cd      	beq.n	9ec8 <bt_pub_key_gen+0x4c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    9f2c:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    9f2e:	2b00      	cmp	r3, #0
    9f30:	d0ca      	beq.n	9ec8 <bt_pub_key_gen+0x4c>
    9f32:	3b04      	subs	r3, #4
    9f34:	e7c7      	b.n	9ec6 <bt_pub_key_gen+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9f36:	f3bf 8f5b 	dmb	ish
    9f3a:	e854 3f00 	ldrex	r3, [r4]
    9f3e:	f023 0308 	bic.w	r3, r3, #8
    9f42:	e844 3100 	strex	r1, r3, [r4]
    9f46:	2900      	cmp	r1, #0
    9f48:	d1f7      	bne.n	9f3a <bt_pub_key_gen+0xbe>
    9f4a:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    9f4e:	4611      	mov	r1, r2
    9f50:	f242 0025 	movw	r0, #8229	; 0x2025
    9f54:	f7fe faf6 	bl	8544 <bt_hci_cmd_send_sync>
	if (err) {
    9f58:	4606      	mov	r6, r0
    9f5a:	2800      	cmp	r0, #0
    9f5c:	d0ca      	beq.n	9ef4 <bt_pub_key_gen+0x78>
    9f5e:	f01d f9f6 	bl	2734e <arch_is_user_context>
    9f62:	4b19      	ldr	r3, [pc, #100]	; (9fc8 <bt_pub_key_gen+0x14c>)
    9f64:	4a19      	ldr	r2, [pc, #100]	; (9fcc <bt_pub_key_gen+0x150>)
    9f66:	1a9b      	subs	r3, r3, r2
    9f68:	08db      	lsrs	r3, r3, #3
		BT_ERR("Sending LE P256 Public Key command failed");
    9f6a:	019b      	lsls	r3, r3, #6
    9f6c:	f043 0301 	orr.w	r3, r3, #1
    9f70:	b1a8      	cbz	r0, 9f9e <bt_pub_key_gen+0x122>
    9f72:	491b      	ldr	r1, [pc, #108]	; (9fe0 <bt_pub_key_gen+0x164>)
    9f74:	4618      	mov	r0, r3
    9f76:	f01a ff8e 	bl	24e96 <log_from_user>
    9f7a:	f3bf 8f5b 	dmb	ish
    9f7e:	e854 3f00 	ldrex	r3, [r4]
    9f82:	f023 0310 	bic.w	r3, r3, #16
    9f86:	e844 3200 	strex	r2, r3, [r4]
    9f8a:	2a00      	cmp	r2, #0
    9f8c:	d1f7      	bne.n	9f7e <bt_pub_key_gen+0x102>
    9f8e:	f3bf 8f5b 	dmb	ish
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    9f92:	682c      	ldr	r4, [r5, #0]
    9f94:	b944      	cbnz	r4, 9fa8 <bt_pub_key_gen+0x12c>
	list->head = NULL;
    9f96:	2300      	movs	r3, #0
	list->tail = NULL;
    9f98:	e9c5 3300 	strd	r3, r3, [r5]
		return err;
    9f9c:	e786      	b.n	9eac <bt_pub_key_gen+0x30>
		BT_ERR("Sending LE P256 Public Key command failed");
    9f9e:	4810      	ldr	r0, [pc, #64]	; (9fe0 <bt_pub_key_gen+0x164>)
    9fa0:	4619      	mov	r1, r3
    9fa2:	f01a ff9e 	bl	24ee2 <log_0>
    9fa6:	e7e8      	b.n	9f7a <bt_pub_key_gen+0xfe>
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    9fa8:	3c04      	subs	r4, #4
    9faa:	2c00      	cmp	r4, #0
    9fac:	d0f3      	beq.n	9f96 <bt_pub_key_gen+0x11a>
			if (cb->func) {
    9fae:	6823      	ldr	r3, [r4, #0]
    9fb0:	b10b      	cbz	r3, 9fb6 <bt_pub_key_gen+0x13a>
				cb->func(NULL);
    9fb2:	2000      	movs	r0, #0
    9fb4:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    9fb6:	1d23      	adds	r3, r4, #4
    9fb8:	d0ed      	beq.n	9f96 <bt_pub_key_gen+0x11a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    9fba:	6864      	ldr	r4, [r4, #4]
	return node->next;
    9fbc:	e7ea      	b.n	9f94 <bt_pub_key_gen+0x118>
		return -EINVAL;
    9fbe:	f06f 0615 	mvn.w	r6, #21
    9fc2:	e773      	b.n	9eac <bt_pub_key_gen+0x30>
    9fc4:	20007600 	.word	0x20007600
    9fc8:	0002a798 	.word	0x0002a798
    9fcc:	0002a6d0 	.word	0x0002a6d0
    9fd0:	0002dc68 	.word	0x0002dc68
    9fd4:	20000e28 	.word	0x20000e28
    9fd8:	20007698 	.word	0x20007698
    9fdc:	0002dc87 	.word	0x0002dc87
    9fe0:	0002dca3 	.word	0x0002dca3

00009fe4 <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9fe4:	4b05      	ldr	r3, [pc, #20]	; (9ffc <bt_pub_key_get+0x18>)
    9fe6:	f3bf 8f5b 	dmb	ish
    9fea:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
}
    9fec:	4804      	ldr	r0, [pc, #16]	; (a000 <bt_pub_key_get+0x1c>)
    9fee:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    9ff2:	f013 0f08 	tst.w	r3, #8
}
    9ff6:	bf08      	it	eq
    9ff8:	2000      	moveq	r0, #0
    9ffa:	4770      	bx	lr
    9ffc:	20007698 	.word	0x20007698
    a000:	20002a53 	.word	0x20002a53

0000a004 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    a004:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (dh_key_cb == cb) {
    a006:	4d2c      	ldr	r5, [pc, #176]	; (a0b8 <bt_dh_key_gen+0xb4>)
    a008:	682b      	ldr	r3, [r5, #0]
    a00a:	428b      	cmp	r3, r1
{
    a00c:	4604      	mov	r4, r0
	if (dh_key_cb == cb) {
    a00e:	d04c      	beq.n	a0aa <bt_dh_key_gen+0xa6>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    a010:	b11b      	cbz	r3, a01a <bt_dh_key_gen+0x16>
		return -EBUSY;
    a012:	f06f 040f 	mvn.w	r4, #15
		BT_WARN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
    a016:	4620      	mov	r0, r4
    a018:	bd70      	pop	{r4, r5, r6, pc}
    a01a:	4b28      	ldr	r3, [pc, #160]	; (a0bc <bt_dh_key_gen+0xb8>)
    a01c:	f3bf 8f5b 	dmb	ish
    a020:	681a      	ldr	r2, [r3, #0]
    a022:	f3bf 8f5b 	dmb	ish
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    a026:	06d2      	lsls	r2, r2, #27
    a028:	d4f3      	bmi.n	a012 <bt_dh_key_gen+0xe>
    a02a:	f3bf 8f5b 	dmb	ish
    a02e:	681b      	ldr	r3, [r3, #0]
    a030:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    a034:	071b      	lsls	r3, r3, #28
    a036:	d53b      	bpl.n	a0b0 <bt_dh_key_gen+0xac>
	dh_key_cb = cb;
    a038:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    a03a:	f242 0026 	movw	r0, #8230	; 0x2026
    a03e:	2140      	movs	r1, #64	; 0x40
    a040:	f7fe f8ea 	bl	8218 <bt_hci_cmd_create>
	if (!buf) {
    a044:	4606      	mov	r6, r0
    a046:	b338      	cbz	r0, a098 <bt_dh_key_gen+0x94>
	return net_buf_simple_add(&buf->b, len);
    a048:	2140      	movs	r1, #64	; 0x40
    a04a:	3008      	adds	r0, #8
    a04c:	f01e fe2a 	bl	28ca4 <net_buf_simple_add>
    a050:	4623      	mov	r3, r4
    a052:	f104 0240 	add.w	r2, r4, #64	; 0x40
    a056:	f853 1b04 	ldr.w	r1, [r3], #4
    a05a:	f840 1b04 	str.w	r1, [r0], #4
    a05e:	4293      	cmp	r3, r2
    a060:	d1f9      	bne.n	a056 <bt_dh_key_gen+0x52>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    a062:	2200      	movs	r2, #0
    a064:	4631      	mov	r1, r6
    a066:	f242 0026 	movw	r0, #8230	; 0x2026
    a06a:	f7fe fa6b 	bl	8544 <bt_hci_cmd_send_sync>
	if (err) {
    a06e:	4604      	mov	r4, r0
    a070:	2800      	cmp	r0, #0
    a072:	d0d0      	beq.n	a016 <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
    a074:	2300      	movs	r3, #0
    a076:	602b      	str	r3, [r5, #0]
    a078:	f01d f969 	bl	2734e <arch_is_user_context>
    a07c:	4b10      	ldr	r3, [pc, #64]	; (a0c0 <bt_dh_key_gen+0xbc>)
    a07e:	4a11      	ldr	r2, [pc, #68]	; (a0c4 <bt_dh_key_gen+0xc0>)
    a080:	1a9b      	subs	r3, r3, r2
    a082:	08db      	lsrs	r3, r3, #3
		BT_WARN("Failed to generate DHKey (err %d)", err);
    a084:	019b      	lsls	r3, r3, #6
    a086:	f043 0302 	orr.w	r3, r3, #2
    a08a:	b140      	cbz	r0, a09e <bt_dh_key_gen+0x9a>
    a08c:	490e      	ldr	r1, [pc, #56]	; (a0c8 <bt_dh_key_gen+0xc4>)
    a08e:	4622      	mov	r2, r4
    a090:	4618      	mov	r0, r3
    a092:	f01a ff00 	bl	24e96 <log_from_user>
    a096:	e7be      	b.n	a016 <bt_dh_key_gen+0x12>
		return -ENOBUFS;
    a098:	f06f 0468 	mvn.w	r4, #104	; 0x68
    a09c:	e7ea      	b.n	a074 <bt_dh_key_gen+0x70>
		BT_WARN("Failed to generate DHKey (err %d)", err);
    a09e:	480a      	ldr	r0, [pc, #40]	; (a0c8 <bt_dh_key_gen+0xc4>)
    a0a0:	461a      	mov	r2, r3
    a0a2:	4621      	mov	r1, r4
    a0a4:	f01a ff2a 	bl	24efc <log_1>
		return err;
    a0a8:	e7b5      	b.n	a016 <bt_dh_key_gen+0x12>
		return -EALREADY;
    a0aa:	f06f 0477 	mvn.w	r4, #119	; 0x77
    a0ae:	e7b2      	b.n	a016 <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
    a0b0:	f06f 047c 	mvn.w	r4, #124	; 0x7c
    a0b4:	e7af      	b.n	a016 <bt_dh_key_gen+0x12>
    a0b6:	bf00      	nop
    a0b8:	20000e24 	.word	0x20000e24
    a0bc:	20007698 	.word	0x20007698
    a0c0:	0002a798 	.word	0x0002a798
    a0c4:	0002a6d0 	.word	0x0002a6d0
    a0c8:	0002dccd 	.word	0x0002dccd

0000a0cc <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
    a0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a0ce:	4b20      	ldr	r3, [pc, #128]	; (a150 <bt_hci_evt_le_pkey_complete+0x84>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    a0d0:	6886      	ldr	r6, [r0, #8]
    a0d2:	f3bf 8f5b 	dmb	ish
    a0d6:	e853 2f00 	ldrex	r2, [r3]
    a0da:	f022 0210 	bic.w	r2, r2, #16
    a0de:	e843 2100 	strex	r1, r2, [r3]
    a0e2:	2900      	cmp	r1, #0
    a0e4:	d1f7      	bne.n	a0d6 <bt_hci_evt_le_pkey_complete+0xa>
    a0e6:	f3bf 8f5b 	dmb	ish

	BT_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
    a0ea:	7832      	ldrb	r2, [r6, #0]
    a0ec:	b9aa      	cbnz	r2, a11a <bt_hci_evt_le_pkey_complete+0x4e>
		memcpy(pub_key, evt->key, 64);
    a0ee:	4919      	ldr	r1, [pc, #100]	; (a154 <bt_hci_evt_le_pkey_complete+0x88>)
    a0f0:	1c72      	adds	r2, r6, #1
    a0f2:	f106 0041 	add.w	r0, r6, #65	; 0x41
    a0f6:	f852 4b04 	ldr.w	r4, [r2], #4
    a0fa:	f841 4b04 	str.w	r4, [r1], #4
    a0fe:	4282      	cmp	r2, r0
    a100:	d1f9      	bne.n	a0f6 <bt_hci_evt_le_pkey_complete+0x2a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a102:	f3bf 8f5b 	dmb	ish
    a106:	e853 2f00 	ldrex	r2, [r3]
    a10a:	f042 0208 	orr.w	r2, r2, #8
    a10e:	e843 2100 	strex	r1, r2, [r3]
    a112:	2900      	cmp	r1, #0
    a114:	d1f7      	bne.n	a106 <bt_hci_evt_le_pkey_complete+0x3a>
    a116:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    a11a:	4d0f      	ldr	r5, [pc, #60]	; (a158 <bt_hci_evt_le_pkey_complete+0x8c>)
    a11c:	682c      	ldr	r4, [r5, #0]
    a11e:	b91c      	cbnz	r4, a128 <bt_hci_evt_le_pkey_complete+0x5c>
	list->head = NULL;
    a120:	2300      	movs	r3, #0
	list->tail = NULL;
    a122:	e9c5 3300 	strd	r3, r3, [r5]
			cb->func(evt->status ? NULL : pub_key);
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
    a126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			cb->func(evt->status ? NULL : pub_key);
    a128:	4f0a      	ldr	r7, [pc, #40]	; (a154 <bt_hci_evt_le_pkey_complete+0x88>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    a12a:	3c04      	subs	r4, #4
    a12c:	2c00      	cmp	r4, #0
    a12e:	d0f7      	beq.n	a120 <bt_hci_evt_le_pkey_complete+0x54>
		if (cb->func) {
    a130:	6823      	ldr	r3, [r4, #0]
    a132:	b12b      	cbz	r3, a140 <bt_hci_evt_le_pkey_complete+0x74>
			cb->func(evt->status ? NULL : pub_key);
    a134:	7832      	ldrb	r2, [r6, #0]
    a136:	2a00      	cmp	r2, #0
    a138:	bf0c      	ite	eq
    a13a:	4638      	moveq	r0, r7
    a13c:	2000      	movne	r0, #0
    a13e:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    a140:	1d23      	adds	r3, r4, #4
    a142:	d0ed      	beq.n	a120 <bt_hci_evt_le_pkey_complete+0x54>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    a144:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    a146:	2c00      	cmp	r4, #0
    a148:	d0ea      	beq.n	a120 <bt_hci_evt_le_pkey_complete+0x54>
    a14a:	3c04      	subs	r4, #4
    a14c:	e7ee      	b.n	a12c <bt_hci_evt_le_pkey_complete+0x60>
    a14e:	bf00      	nop
    a150:	20007698 	.word	0x20007698
    a154:	20002a53 	.word	0x20002a53
    a158:	20000e28 	.word	0x20000e28

0000a15c <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
    a15c:	4905      	ldr	r1, [pc, #20]	; (a174 <bt_hci_evt_le_dhkey_complete+0x18>)
    a15e:	680b      	ldr	r3, [r1, #0]
    a160:	b133      	cbz	r3, a170 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    a162:	6882      	ldr	r2, [r0, #8]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
    a164:	2000      	movs	r0, #0
    a166:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
    a168:	7811      	ldrb	r1, [r2, #0]
    a16a:	b901      	cbnz	r1, a16e <bt_hci_evt_le_dhkey_complete+0x12>
    a16c:	1c50      	adds	r0, r2, #1
    a16e:	4718      	bx	r3
	}
}
    a170:	4770      	bx	lr
    a172:	bf00      	nop
    a174:	20000e24 	.word	0x20000e24

0000a178 <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    a178:	2300      	movs	r3, #0
	tx->user_data = NULL;
    a17a:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
    a17e:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
    a180:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
    a182:	4801      	ldr	r0, [pc, #4]	; (a188 <tx_free+0x10>)
    a184:	f01f ba82 	b.w	2968c <k_queue_append>
    a188:	20007ec0 	.word	0x20007ec0

0000a18c <notify_connected>:
{
    a18c:	b538      	push	{r3, r4, r5, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    a18e:	4b09      	ldr	r3, [pc, #36]	; (a1b4 <notify_connected+0x28>)
    a190:	681d      	ldr	r5, [r3, #0]
{
    a192:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    a194:	7b21      	ldrb	r1, [r4, #12]
    a196:	b92d      	cbnz	r5, a1a4 <notify_connected+0x18>
	if (!conn->err) {
    a198:	b951      	cbnz	r1, a1b0 <notify_connected+0x24>
		bt_gatt_connected(conn);
    a19a:	4620      	mov	r0, r4
}
    a19c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
    a1a0:	f002 bee8 	b.w	cf74 <bt_gatt_connected>
		if (cb->connected) {
    a1a4:	682b      	ldr	r3, [r5, #0]
    a1a6:	b10b      	cbz	r3, a1ac <notify_connected+0x20>
			cb->connected(conn, conn->err);
    a1a8:	4620      	mov	r0, r4
    a1aa:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    a1ac:	69ad      	ldr	r5, [r5, #24]
    a1ae:	e7f1      	b.n	a194 <notify_connected+0x8>
}
    a1b0:	bd38      	pop	{r3, r4, r5, pc}
    a1b2:	bf00      	nop
    a1b4:	20000e34 	.word	0x20000e34

0000a1b8 <k_queue_get.constprop.0>:
static inline void * k_queue_get(struct k_queue * queue, k_timeout_t timeout)
    a1b8:	e92d 4150 	stmdb	sp!, {r4, r6, r8, lr}
    a1bc:	4602      	mov	r2, r0
    a1be:	460c      	mov	r4, r1
	ret = arch_is_user_context();
    a1c0:	f01d f8cf 	bl	27362 <arch_is_user_context>
	if (z_syscall_trap()) {
    a1c4:	b130      	cbz	r0, a1d4 <k_queue_get.constprop.0+0x1c>
	register uint32_t r1 __asm__("r1") = arg2;
    a1c6:	4611      	mov	r1, r2
	register uint32_t ret __asm__("r0") = arg1;
    a1c8:	4805      	ldr	r0, [pc, #20]	; (a1e0 <k_queue_get.constprop.0+0x28>)
	register uint32_t r2 __asm__("r2") = arg3;
    a1ca:	4622      	mov	r2, r4
	register uint32_t r6 __asm__("r6") = call_id;
    a1cc:	269a      	movs	r6, #154	; 0x9a
	__asm__ volatile("svc %[svid]\n"
    a1ce:	df03      	svc	3
}
    a1d0:	e8bd 8150 	ldmia.w	sp!, {r4, r6, r8, pc}
	return z_impl_k_queue_get(queue, timeout);
    a1d4:	4802      	ldr	r0, [pc, #8]	; (a1e0 <k_queue_get.constprop.0+0x28>)
}
    a1d6:	e8bd 4150 	ldmia.w	sp!, {r4, r6, r8, lr}
	return z_impl_k_queue_get(queue, timeout);
    a1da:	460b      	mov	r3, r1
    a1dc:	f016 bf6c 	b.w	210b8 <z_impl_k_queue_get>
    a1e0:	20007ec0 	.word	0x20007ec0

0000a1e4 <k_poll_signal_raise.constprop.0>:
	z_impl_k_poll_signal_check(sig, signaled, result);
}


extern int z_impl_k_poll_signal_raise(struct k_poll_signal * sig, int result);
static inline int k_poll_signal_raise(struct k_poll_signal * sig, int result)
    a1e4:	e92d 4148 	stmdb	sp!, {r3, r6, r8, lr}
    a1e8:	f01d f8bb 	bl	27362 <arch_is_user_context>
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
    a1ec:	4601      	mov	r1, r0
    a1ee:	b128      	cbz	r0, a1fc <k_poll_signal_raise.constprop.0+0x18>
	register uint32_t ret __asm__("r0") = arg1;
    a1f0:	4805      	ldr	r0, [pc, #20]	; (a208 <k_poll_signal_raise.constprop.0+0x24>)
	register uint32_t r1 __asm__("r1") = arg2;
    a1f2:	2100      	movs	r1, #0
	register uint32_t r6 __asm__("r6") = call_id;
    a1f4:	2695      	movs	r6, #149	; 0x95
	__asm__ volatile("svc %[svid]\n"
    a1f6:	df03      	svc	3
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
}
    a1f8:	e8bd 8148 	ldmia.w	sp!, {r3, r6, r8, pc}
	return z_impl_k_poll_signal_raise(sig, result);
    a1fc:	4802      	ldr	r0, [pc, #8]	; (a208 <k_poll_signal_raise.constprop.0+0x24>)
}
    a1fe:	e8bd 4148 	ldmia.w	sp!, {r3, r6, r8, lr}
	return z_impl_k_poll_signal_raise(sig, result);
    a202:	f019 bc43 	b.w	23a8c <z_impl_k_poll_signal_raise>
    a206:	bf00      	nop
    a208:	20007818 	.word	0x20007818

0000a20c <k_sem_give.constprop.0>:
static inline void k_sem_give(struct k_sem * sem)
    a20c:	e92d 4148 	stmdb	sp!, {r3, r6, r8, lr}
    a210:	f01d f8a7 	bl	27362 <arch_is_user_context>
	if (z_syscall_trap()) {
    a214:	b120      	cbz	r0, a220 <k_sem_give.constprop.0+0x14>
	register uint32_t ret __asm__("r0") = arg1;
    a216:	4805      	ldr	r0, [pc, #20]	; (a22c <k_sem_give.constprop.0+0x20>)
	register uint32_t r6 __asm__("r6") = call_id;
    a218:	26a0      	movs	r6, #160	; 0xa0
	__asm__ volatile("svc %[svid]\n"
    a21a:	df03      	svc	3
}
    a21c:	e8bd 8148 	ldmia.w	sp!, {r3, r6, r8, pc}
	z_impl_k_sem_give(sem);
    a220:	4802      	ldr	r0, [pc, #8]	; (a22c <k_sem_give.constprop.0+0x20>)
}
    a222:	e8bd 4148 	ldmia.w	sp!, {r3, r6, r8, lr}
	z_impl_k_sem_give(sem);
    a226:	f017 beed 	b.w	22004 <z_impl_k_sem_give>
    a22a:	bf00      	nop
    a22c:	200076d0 	.word	0x200076d0

0000a230 <send_frag>:
	return bt_send(buf);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, uint8_t flags,
		      bool always_consume)
{
    a230:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    a234:	694d      	ldr	r5, [r1, #20]
{
    a236:	4604      	mov	r4, r0
    a238:	460f      	mov	r7, r1
    a23a:	4693      	mov	fp, r2
    a23c:	4699      	mov	r9, r3
    a23e:	f01d f890 	bl	27362 <arch_is_user_context>
	if (z_syscall_trap()) {
    a242:	2800      	cmp	r0, #0
    a244:	d072      	beq.n	a32c <send_frag+0xfc>
	register uint32_t r1 __asm__("r1") = arg2;
    a246:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	register uint32_t ret __asm__("r0") = arg1;
    a24a:	4850      	ldr	r0, [pc, #320]	; (a38c <send_frag+0x15c>)
	register uint32_t r2 __asm__("r2") = arg3;
    a24c:	460a      	mov	r2, r1
	register uint32_t r6 __asm__("r6") = call_id;
    a24e:	26a3      	movs	r6, #163	; 0xa3
	__asm__ volatile("svc %[svid]\n"
    a250:	df03      	svc	3

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    a252:	7b63      	ldrb	r3, [r4, #13]
    a254:	2b07      	cmp	r3, #7
    a256:	d158      	bne.n	a30a <send_frag+0xda>
	__asm__ volatile(
    a258:	f04f 0320 	mov.w	r3, #32
    a25c:	f3ef 8211 	mrs	r2, BASEPRI
    a260:	f383 8811 	msr	BASEPRI, r3
    a264:	f3bf 8f6f 	isb	sy
		goto fail;
	}

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
    a268:	2d00      	cmp	r5, #0
    a26a:	d06a      	beq.n	a342 <send_frag+0x112>
	parent->next = child;
    a26c:	2300      	movs	r3, #0
    a26e:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
    a270:	69a3      	ldr	r3, [r4, #24]
    a272:	2b00      	cmp	r3, #0
    a274:	d162      	bne.n	a33c <send_frag+0x10c>
	list->head = node;
    a276:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    a27a:	f382 8811 	msr	BASEPRI, r2
    a27e:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
    a282:	2104      	movs	r1, #4
    a284:	f107 0008 	add.w	r0, r7, #8
    a288:	f01e fd24 	bl	28cd4 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    a28c:	8823      	ldrh	r3, [r4, #0]
    a28e:	f00b 0bfd 	and.w	fp, fp, #253	; 0xfd
    a292:	ea43 3b0b 	orr.w	fp, r3, fp, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    a296:	89bb      	ldrh	r3, [r7, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    a298:	f8a0 b000 	strh.w	fp, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    a29c:	3b04      	subs	r3, #4
    a29e:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    a2a0:	2302      	movs	r3, #2
    a2a2:	753b      	strb	r3, [r7, #20]
	return bt_send(buf);
    a2a4:	4638      	mov	r0, r7
    a2a6:	f01c fe63 	bl	26f70 <bt_send>
		err = send_iso(conn, buf, flags);
	} else {
		err = send_acl(conn, buf, flags);
	}

	if (err) {
    a2aa:	4601      	mov	r1, r0
    a2ac:	2800      	cmp	r0, #0
    a2ae:	d069      	beq.n	a384 <send_frag+0x154>
	return arch_is_user_context();
    a2b0:	f01d f857 	bl	27362 <arch_is_user_context>
    a2b4:	4e36      	ldr	r6, [pc, #216]	; (a390 <send_frag+0x160>)
    a2b6:	4b37      	ldr	r3, [pc, #220]	; (a394 <send_frag+0x164>)
    a2b8:	1af6      	subs	r6, r6, r3
    a2ba:	08f6      	lsrs	r6, r6, #3
		BT_ERR("Unable to send to driver (err %d)", err);
    a2bc:	01b6      	lsls	r6, r6, #6
    a2be:	f046 0601 	orr.w	r6, r6, #1
    a2c2:	2800      	cmp	r0, #0
    a2c4:	d04a      	beq.n	a35c <send_frag+0x12c>
    a2c6:	460a      	mov	r2, r1
    a2c8:	4630      	mov	r0, r6
    a2ca:	4933      	ldr	r1, [pc, #204]	; (a398 <send_frag+0x168>)
    a2cc:	f01a fde3 	bl	24e96 <log_from_user>
	__asm__ volatile(
    a2d0:	f04f 0320 	mov.w	r3, #32
    a2d4:	f3ef 8111 	mrs	r1, BASEPRI
    a2d8:	f383 8811 	msr	BASEPRI, r3
    a2dc:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
    a2e0:	2d00      	cmp	r5, #0
    a2e2:	d049      	beq.n	a378 <send_frag+0x148>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    a2e4:	6963      	ldr	r3, [r4, #20]
    a2e6:	2200      	movs	r2, #0
    a2e8:	b15b      	cbz	r3, a302 <send_frag+0xd2>
    a2ea:	429d      	cmp	r5, r3
    a2ec:	d141      	bne.n	a372 <send_frag+0x142>
Z_GENLIST_REMOVE(slist, snode)
    a2ee:	682b      	ldr	r3, [r5, #0]
    a2f0:	2a00      	cmp	r2, #0
    a2f2:	d138      	bne.n	a366 <send_frag+0x136>
    a2f4:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
    a2f6:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    a2f8:	4295      	cmp	r5, r2
    a2fa:	d100      	bne.n	a2fe <send_frag+0xce>
	list->tail = node;
    a2fc:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    a2fe:	2300      	movs	r3, #0
    a300:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    a302:	f381 8811 	msr	BASEPRI, r1
    a306:	f3bf 8f6f 	isb	sy
	}

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
    a30a:	f7ff ff7f 	bl	a20c <k_sem_give.constprop.0>
	if (tx) {
    a30e:	b115      	cbz	r5, a316 <send_frag+0xe6>
		tx_free(tx);
    a310:	4628      	mov	r0, r5
    a312:	f7ff ff31 	bl	a178 <tx_free>
	}

	if (always_consume) {
    a316:	f1b9 0f00 	cmp.w	r9, #0
    a31a:	d004      	beq.n	a326 <send_frag+0xf6>
		net_buf_unref(buf);
    a31c:	4638      	mov	r0, r7
    a31e:	f012 fa6b 	bl	1c7f8 <net_buf_unref>
	}
	return false;
    a322:	f04f 0900 	mov.w	r9, #0
}
    a326:	4648      	mov	r0, r9
    a328:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return z_impl_k_sem_take(sem, timeout);
    a32c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a330:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a334:	4815      	ldr	r0, [pc, #84]	; (a38c <send_frag+0x15c>)
    a336:	f017 fec7 	bl	220c8 <z_impl_k_sem_take>
    a33a:	e78a      	b.n	a252 <send_frag+0x22>
    a33c:	601d      	str	r5, [r3, #0]
	list->tail = node;
    a33e:	61a5      	str	r5, [r4, #24]
}
    a340:	e79b      	b.n	a27a <send_frag+0x4a>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
    a342:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
    a344:	b133      	cbz	r3, a354 <send_frag+0x124>
			pending_no_cb = &tail_tx->pending_no_cb;
    a346:	f103 0a0c 	add.w	sl, r3, #12
    a34a:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    a34c:	3301      	adds	r3, #1
    a34e:	f8ca 3000 	str.w	r3, [sl]
    a352:	e792      	b.n	a27a <send_frag+0x4a>
			pending_no_cb = &conn->pending_no_cb;
    a354:	69e3      	ldr	r3, [r4, #28]
    a356:	f104 0a1c 	add.w	sl, r4, #28
    a35a:	e7f7      	b.n	a34c <send_frag+0x11c>
		BT_ERR("Unable to send to driver (err %d)", err);
    a35c:	480e      	ldr	r0, [pc, #56]	; (a398 <send_frag+0x168>)
    a35e:	4632      	mov	r2, r6
    a360:	f01a fdcc 	bl	24efc <log_1>
    a364:	e7b4      	b.n	a2d0 <send_frag+0xa0>
	parent->next = child;
    a366:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    a368:	69a3      	ldr	r3, [r4, #24]
    a36a:	429d      	cmp	r5, r3
	list->tail = node;
    a36c:	bf08      	it	eq
    a36e:	61a2      	streq	r2, [r4, #24]
}
    a370:	e7c5      	b.n	a2fe <send_frag+0xce>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    a372:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    a374:	681b      	ldr	r3, [r3, #0]
    a376:	e7b7      	b.n	a2e8 <send_frag+0xb8>
			(*pending_no_cb)--;
    a378:	f8da 3000 	ldr.w	r3, [sl]
    a37c:	3b01      	subs	r3, #1
    a37e:	f8ca 3000 	str.w	r3, [sl]
    a382:	e7be      	b.n	a302 <send_frag+0xd2>
	return true;
    a384:	f04f 0901 	mov.w	r9, #1
    a388:	e7cd      	b.n	a326 <send_frag+0xf6>
    a38a:	bf00      	nop
    a38c:	200076d0 	.word	0x200076d0
    a390:	0002a6e8 	.word	0x0002a6e8
    a394:	0002a6d0 	.word	0x0002a6d0
    a398:	0002d59f 	.word	0x0002d59f

0000a39c <bt_conn_get_pkts>:
}
    a39c:	4800      	ldr	r0, [pc, #0]	; (a3a0 <bt_conn_get_pkts+0x4>)
    a39e:	4770      	bx	lr
    a3a0:	200076d0 	.word	0x200076d0

0000a3a4 <notify_le_param_updated>:
{
    a3a4:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a3a6:	f3bf 8f5b 	dmb	ish
    a3aa:	6842      	ldr	r2, [r0, #4]
    a3ac:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    a3b0:	0592      	lsls	r2, r2, #22
{
    a3b2:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    a3b4:	f100 0304 	add.w	r3, r0, #4
    a3b8:	d519      	bpl.n	a3ee <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
    a3ba:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    a3be:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	; 0xa0
    a3c2:	4291      	cmp	r1, r2
    a3c4:	d813      	bhi.n	a3ee <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
    a3c6:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
    a3ca:	4291      	cmp	r1, r2
    a3cc:	d30f      	bcc.n	a3ee <notify_le_param_updated+0x4a>
	    conn->le.latency == conn->le.pending_latency &&
    a3ce:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
    a3d2:	4291      	cmp	r1, r2
    a3d4:	d10b      	bne.n	a3ee <notify_le_param_updated+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a3d6:	f3bf 8f5b 	dmb	ish
    a3da:	e853 2f00 	ldrex	r2, [r3]
    a3de:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    a3e2:	e843 2100 	strex	r1, r2, [r3]
    a3e6:	2900      	cmp	r1, #0
    a3e8:	d1f7      	bne.n	a3da <notify_le_param_updated+0x36>
    a3ea:	f3bf 8f5b 	dmb	ish
	for (cb = callback_list; cb; cb = cb->_next) {
    a3ee:	4b08      	ldr	r3, [pc, #32]	; (a410 <notify_le_param_updated+0x6c>)
    a3f0:	681d      	ldr	r5, [r3, #0]
    a3f2:	b905      	cbnz	r5, a3f6 <notify_le_param_updated+0x52>
}
    a3f4:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    a3f6:	68ee      	ldr	r6, [r5, #12]
    a3f8:	b13e      	cbz	r6, a40a <notify_le_param_updated+0x66>
			cb->le_param_updated(conn, conn->le.interval,
    a3fa:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    a3fe:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    a402:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    a406:	4620      	mov	r0, r4
    a408:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    a40a:	69ad      	ldr	r5, [r5, #24]
    a40c:	e7f1      	b.n	a3f2 <notify_le_param_updated+0x4e>
    a40e:	bf00      	nop
    a410:	20000e34 	.word	0x20000e34

0000a414 <le_param_req>:
{
    a414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a416:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    a418:	4608      	mov	r0, r1
{
    a41a:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    a41c:	f01c fd88 	bl	26f30 <bt_le_conn_params_valid>
    a420:	4604      	mov	r4, r0
    a422:	b910      	cbnz	r0, a42a <le_param_req+0x16>
		return false;
    a424:	2400      	movs	r4, #0
}
    a426:	4620      	mov	r0, r4
    a428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    a42a:	4b09      	ldr	r3, [pc, #36]	; (a450 <le_param_req+0x3c>)
    a42c:	681e      	ldr	r6, [r3, #0]
    a42e:	2e00      	cmp	r6, #0
    a430:	d0f9      	beq.n	a426 <le_param_req+0x12>
		if (!cb->le_param_req) {
    a432:	68b3      	ldr	r3, [r6, #8]
    a434:	b90b      	cbnz	r3, a43a <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    a436:	69b6      	ldr	r6, [r6, #24]
    a438:	e7f9      	b.n	a42e <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    a43a:	4629      	mov	r1, r5
    a43c:	4638      	mov	r0, r7
    a43e:	4798      	blx	r3
    a440:	2800      	cmp	r0, #0
    a442:	d0ef      	beq.n	a424 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    a444:	4628      	mov	r0, r5
    a446:	f01c fd73 	bl	26f30 <bt_le_conn_params_valid>
    a44a:	2800      	cmp	r0, #0
    a44c:	d1f3      	bne.n	a436 <le_param_req+0x22>
    a44e:	e7e9      	b.n	a424 <le_param_req+0x10>
    a450:	20000e34 	.word	0x20000e34

0000a454 <bt_conn_identity_resolved>:
{
    a454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->role == BT_HCI_ROLE_MASTER) {
    a456:	78c3      	ldrb	r3, [r0, #3]
{
    a458:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
    a45a:	b93b      	cbnz	r3, a46c <bt_conn_identity_resolved+0x18>
		rpa = &conn->le.resp_addr;
    a45c:	f100 0696 	add.w	r6, r0, #150	; 0x96
	for (cb = callback_list; cb; cb = cb->_next) {
    a460:	4b08      	ldr	r3, [pc, #32]	; (a484 <bt_conn_identity_resolved+0x30>)
    a462:	681d      	ldr	r5, [r3, #0]
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    a464:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
    a468:	b91d      	cbnz	r5, a472 <bt_conn_identity_resolved+0x1e>
}
    a46a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rpa = &conn->le.init_addr;
    a46c:	f100 068f 	add.w	r6, r0, #143	; 0x8f
    a470:	e7f6      	b.n	a460 <bt_conn_identity_resolved+0xc>
		if (cb->identity_resolved) {
    a472:	692b      	ldr	r3, [r5, #16]
    a474:	b11b      	cbz	r3, a47e <bt_conn_identity_resolved+0x2a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    a476:	463a      	mov	r2, r7
    a478:	4631      	mov	r1, r6
    a47a:	4620      	mov	r0, r4
    a47c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    a47e:	69ad      	ldr	r5, [r5, #24]
    a480:	e7f2      	b.n	a468 <bt_conn_identity_resolved+0x14>
    a482:	bf00      	nop
    a484:	20000e34 	.word	0x20000e34

0000a488 <bt_conn_security_changed>:
{
    a488:	b570      	push	{r4, r5, r6, lr}
	conn->required_sec_level = conn->sec_level;
    a48a:	7a43      	ldrb	r3, [r0, #9]
    a48c:	7283      	strb	r3, [r0, #10]
{
    a48e:	4604      	mov	r4, r0
    a490:	4616      	mov	r6, r2
	bt_l2cap_security_changed(conn, hci_err);
    a492:	f01d f916 	bl	276c2 <bt_l2cap_security_changed>
	for (cb = callback_list; cb; cb = cb->_next) {
    a496:	4b06      	ldr	r3, [pc, #24]	; (a4b0 <bt_conn_security_changed+0x28>)
    a498:	681d      	ldr	r5, [r3, #0]
    a49a:	b905      	cbnz	r5, a49e <bt_conn_security_changed+0x16>
}
    a49c:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->security_changed) {
    a49e:	696b      	ldr	r3, [r5, #20]
    a4a0:	b11b      	cbz	r3, a4aa <bt_conn_security_changed+0x22>
			cb->security_changed(conn, conn->sec_level, err);
    a4a2:	7a61      	ldrb	r1, [r4, #9]
    a4a4:	4632      	mov	r2, r6
    a4a6:	4620      	mov	r0, r4
    a4a8:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    a4aa:	69ad      	ldr	r5, [r5, #24]
    a4ac:	e7f5      	b.n	a49a <bt_conn_security_changed+0x12>
    a4ae:	bf00      	nop
    a4b0:	20000e34 	.word	0x20000e34

0000a4b4 <bt_conn_cb_register>:
	cb->_next = callback_list;
    a4b4:	4b02      	ldr	r3, [pc, #8]	; (a4c0 <bt_conn_cb_register+0xc>)
    a4b6:	681a      	ldr	r2, [r3, #0]
    a4b8:	6182      	str	r2, [r0, #24]
	callback_list = cb;
    a4ba:	6018      	str	r0, [r3, #0]
}
    a4bc:	4770      	bx	lr
    a4be:	bf00      	nop
    a4c0:	20000e34 	.word	0x20000e34

0000a4c4 <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
    a4c4:	b570      	push	{r4, r5, r6, lr}
    a4c6:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    a4c8:	f100 0638 	add.w	r6, r0, #56	; 0x38
    a4cc:	2200      	movs	r2, #0
    a4ce:	2300      	movs	r3, #0
    a4d0:	4630      	mov	r0, r6
    a4d2:	f01e fb96 	bl	28c02 <net_buf_get>
    a4d6:	4605      	mov	r5, r0
    a4d8:	b958      	cbnz	r0, a4f2 <conn_cleanup+0x2e>
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);

	bt_conn_reset_rx_state(conn);
    a4da:	4620      	mov	r0, r4
    a4dc:	f01c ffcd 	bl	2747a <bt_conn_reset_rx_state>
	return k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
    a4e0:	f104 0158 	add.w	r1, r4, #88	; 0x58
    a4e4:	4807      	ldr	r0, [pc, #28]	; (a504 <conn_cleanup+0x40>)

	k_delayed_work_submit(&conn->deferred_work, K_NO_WAIT);
}
    a4e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a4ea:	2200      	movs	r2, #0
    a4ec:	2300      	movs	r3, #0
    a4ee:	f018 bbb3 	b.w	22c58 <k_work_reschedule_for_queue>
		if (tx_data(buf)->tx) {
    a4f2:	6968      	ldr	r0, [r5, #20]
    a4f4:	b108      	cbz	r0, a4fa <conn_cleanup+0x36>
			tx_free(tx_data(buf)->tx);
    a4f6:	f7ff fe3f 	bl	a178 <tx_free>
		net_buf_unref(buf);
    a4fa:	4628      	mov	r0, r5
    a4fc:	f012 f97c 	bl	1c7f8 <net_buf_unref>
    a500:	e7e4      	b.n	a4cc <conn_cleanup+0x8>
    a502:	bf00      	nop
    a504:	20000ac0 	.word	0x20000ac0

0000a508 <bt_conn_recv>:
{
    a508:	b570      	push	{r4, r5, r6, lr}
    a50a:	4616      	mov	r6, r2
    a50c:	4604      	mov	r4, r0
    a50e:	460d      	mov	r5, r1
	tx_notify(conn);
    a510:	f01c ff31 	bl	27376 <tx_notify>
	switch (flags) {
    a514:	2e01      	cmp	r6, #1
    a516:	d040      	beq.n	a59a <bt_conn_recv+0x92>
    a518:	2e02      	cmp	r6, #2
    a51a:	d17c      	bne.n	a616 <bt_conn_recv+0x10e>
		if (conn->rx) {
    a51c:	6923      	ldr	r3, [r4, #16]
    a51e:	b183      	cbz	r3, a542 <bt_conn_recv+0x3a>
    a520:	f01c ff1f 	bl	27362 <arch_is_user_context>
    a524:	4b4e      	ldr	r3, [pc, #312]	; (a660 <bt_conn_recv+0x158>)
    a526:	4a4f      	ldr	r2, [pc, #316]	; (a664 <bt_conn_recv+0x15c>)
    a528:	1a9b      	subs	r3, r3, r2
    a52a:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unexpected first L2CAP frame");
    a52c:	019b      	lsls	r3, r3, #6
    a52e:	f043 0301 	orr.w	r3, r3, #1
    a532:	b368      	cbz	r0, a590 <bt_conn_recv+0x88>
    a534:	494c      	ldr	r1, [pc, #304]	; (a668 <bt_conn_recv+0x160>)
    a536:	4618      	mov	r0, r3
    a538:	f01a fcad 	bl	24e96 <log_from_user>
			bt_conn_reset_rx_state(conn);
    a53c:	4620      	mov	r0, r4
    a53e:	f01c ff9c 	bl	2747a <bt_conn_reset_rx_state>
		conn->rx = buf;
    a542:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
    a544:	6921      	ldr	r1, [r4, #16]
    a546:	898b      	ldrh	r3, [r1, #12]
    a548:	2b01      	cmp	r3, #1
    a54a:	f240 8087 	bls.w	a65c <bt_conn_recv+0x154>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
    a54e:	6888      	ldr	r0, [r1, #8]
	return ((uint16_t)src[1] << 8) | src[0];
    a550:	7845      	ldrb	r5, [r0, #1]
    a552:	7802      	ldrb	r2, [r0, #0]
    a554:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    a558:	3204      	adds	r2, #4
    a55a:	b292      	uxth	r2, r2
	if (conn->rx->len < acl_total_len) {
    a55c:	429a      	cmp	r2, r3
    a55e:	d87d      	bhi.n	a65c <bt_conn_recv+0x154>
	if (conn->rx->len > acl_total_len) {
    a560:	d275      	bcs.n	a64e <bt_conn_recv+0x146>
    a562:	f01c fefe 	bl	27362 <arch_is_user_context>
    a566:	4d3e      	ldr	r5, [pc, #248]	; (a660 <bt_conn_recv+0x158>)
    a568:	4b3e      	ldr	r3, [pc, #248]	; (a664 <bt_conn_recv+0x15c>)
    a56a:	6921      	ldr	r1, [r4, #16]
    a56c:	1aed      	subs	r5, r5, r3
    a56e:	08ed      	lsrs	r5, r5, #3
		BT_ERR("ACL len mismatch (%u > %u)",
    a570:	01ad      	lsls	r5, r5, #6
    a572:	f045 0501 	orr.w	r5, r5, #1
    a576:	2800      	cmp	r0, #0
    a578:	d063      	beq.n	a642 <bt_conn_recv+0x13a>
    a57a:	4613      	mov	r3, r2
    a57c:	4628      	mov	r0, r5
    a57e:	898a      	ldrh	r2, [r1, #12]
    a580:	493a      	ldr	r1, [pc, #232]	; (a66c <bt_conn_recv+0x164>)
    a582:	f01a fc88 	bl	24e96 <log_from_user>
		bt_conn_reset_rx_state(conn);
    a586:	4620      	mov	r0, r4
}
    a588:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
    a58c:	f01c bf75 	b.w	2747a <bt_conn_reset_rx_state>
			BT_ERR("Unexpected first L2CAP frame");
    a590:	4835      	ldr	r0, [pc, #212]	; (a668 <bt_conn_recv+0x160>)
    a592:	4619      	mov	r1, r3
    a594:	f01a fca5 	bl	24ee2 <log_0>
    a598:	e7d0      	b.n	a53c <bt_conn_recv+0x34>
		if (!conn->rx) {
    a59a:	6920      	ldr	r0, [r4, #16]
    a59c:	b9b0      	cbnz	r0, a5cc <bt_conn_recv+0xc4>
    a59e:	f01c fee0 	bl	27362 <arch_is_user_context>
    a5a2:	4b2f      	ldr	r3, [pc, #188]	; (a660 <bt_conn_recv+0x158>)
    a5a4:	4a2f      	ldr	r2, [pc, #188]	; (a664 <bt_conn_recv+0x15c>)
    a5a6:	1a9b      	subs	r3, r3, r2
    a5a8:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unexpected L2CAP continuation");
    a5aa:	019b      	lsls	r3, r3, #6
    a5ac:	f043 0301 	orr.w	r3, r3, #1
    a5b0:	b138      	cbz	r0, a5c2 <bt_conn_recv+0xba>
    a5b2:	492f      	ldr	r1, [pc, #188]	; (a670 <bt_conn_recv+0x168>)
			BT_ERR("Not enough buffer space for L2CAP data");
    a5b4:	4618      	mov	r0, r3
    a5b6:	f01a fc6e 	bl	24e96 <log_from_user>
			bt_conn_reset_rx_state(conn);
    a5ba:	4620      	mov	r0, r4
    a5bc:	f01c ff5d 	bl	2747a <bt_conn_reset_rx_state>
    a5c0:	e006      	b.n	a5d0 <bt_conn_recv+0xc8>
			BT_ERR("Unexpected L2CAP continuation");
    a5c2:	482b      	ldr	r0, [pc, #172]	; (a670 <bt_conn_recv+0x168>)
    a5c4:	4619      	mov	r1, r3
			BT_ERR("Not enough buffer space for L2CAP data");
    a5c6:	f01a fc8c 	bl	24ee2 <log_0>
    a5ca:	e7f6      	b.n	a5ba <bt_conn_recv+0xb2>
		if (!buf->len) {
    a5cc:	89ae      	ldrh	r6, [r5, #12]
    a5ce:	b926      	cbnz	r6, a5da <bt_conn_recv+0xd2>
			net_buf_unref(buf);
    a5d0:	4628      	mov	r0, r5
}
    a5d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
    a5d6:	f012 b90f 	b.w	1c7f8 <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
    a5da:	3008      	adds	r0, #8
    a5dc:	f01e fb9e 	bl	28d1c <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    a5e0:	42b0      	cmp	r0, r6
    a5e2:	d20e      	bcs.n	a602 <bt_conn_recv+0xfa>
    a5e4:	f01c febd 	bl	27362 <arch_is_user_context>
    a5e8:	4b1d      	ldr	r3, [pc, #116]	; (a660 <bt_conn_recv+0x158>)
    a5ea:	4a1e      	ldr	r2, [pc, #120]	; (a664 <bt_conn_recv+0x15c>)
    a5ec:	1a9b      	subs	r3, r3, r2
    a5ee:	08db      	lsrs	r3, r3, #3
			BT_ERR("Not enough buffer space for L2CAP data");
    a5f0:	019b      	lsls	r3, r3, #6
    a5f2:	f043 0301 	orr.w	r3, r3, #1
    a5f6:	b108      	cbz	r0, a5fc <bt_conn_recv+0xf4>
    a5f8:	491e      	ldr	r1, [pc, #120]	; (a674 <bt_conn_recv+0x16c>)
    a5fa:	e7db      	b.n	a5b4 <bt_conn_recv+0xac>
    a5fc:	481d      	ldr	r0, [pc, #116]	; (a674 <bt_conn_recv+0x16c>)
    a5fe:	4619      	mov	r1, r3
    a600:	e7e1      	b.n	a5c6 <bt_conn_recv+0xbe>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    a602:	6920      	ldr	r0, [r4, #16]
    a604:	89aa      	ldrh	r2, [r5, #12]
    a606:	68a9      	ldr	r1, [r5, #8]
    a608:	3008      	adds	r0, #8
    a60a:	f01e fb51 	bl	28cb0 <net_buf_simple_add_mem>
		net_buf_unref(buf);
    a60e:	4628      	mov	r0, r5
    a610:	f012 f8f2 	bl	1c7f8 <net_buf_unref>
		break;
    a614:	e796      	b.n	a544 <bt_conn_recv+0x3c>
    a616:	f01c fea4 	bl	27362 <arch_is_user_context>
    a61a:	4b11      	ldr	r3, [pc, #68]	; (a660 <bt_conn_recv+0x158>)
    a61c:	4a11      	ldr	r2, [pc, #68]	; (a664 <bt_conn_recv+0x15c>)
    a61e:	1a9b      	subs	r3, r3, r2
    a620:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    a622:	019b      	lsls	r3, r3, #6
    a624:	f043 0301 	orr.w	r3, r3, #1
    a628:	b128      	cbz	r0, a636 <bt_conn_recv+0x12e>
    a62a:	4913      	ldr	r1, [pc, #76]	; (a678 <bt_conn_recv+0x170>)
    a62c:	4632      	mov	r2, r6
    a62e:	4618      	mov	r0, r3
    a630:	f01a fc31 	bl	24e96 <log_from_user>
    a634:	e7c1      	b.n	a5ba <bt_conn_recv+0xb2>
    a636:	4810      	ldr	r0, [pc, #64]	; (a678 <bt_conn_recv+0x170>)
    a638:	461a      	mov	r2, r3
    a63a:	4631      	mov	r1, r6
    a63c:	f01a fc5e 	bl	24efc <log_1>
		bt_conn_reset_rx_state(conn);
    a640:	e7bb      	b.n	a5ba <bt_conn_recv+0xb2>
		BT_ERR("ACL len mismatch (%u > %u)",
    a642:	8989      	ldrh	r1, [r1, #12]
    a644:	4809      	ldr	r0, [pc, #36]	; (a66c <bt_conn_recv+0x164>)
    a646:	462b      	mov	r3, r5
    a648:	f01a fc6c 	bl	24f24 <log_2>
    a64c:	e79b      	b.n	a586 <bt_conn_recv+0x7e>
	conn->rx = NULL;
    a64e:	2300      	movs	r3, #0
    a650:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf);
    a652:	4620      	mov	r0, r4
}
    a654:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
    a658:	f000 bdb2 	b.w	b1c0 <bt_l2cap_recv>
}
    a65c:	bd70      	pop	{r4, r5, r6, pc}
    a65e:	bf00      	nop
    a660:	0002a6e8 	.word	0x0002a6e8
    a664:	0002a6d0 	.word	0x0002a6d0
    a668:	0002dd36 	.word	0x0002dd36
    a66c:	0002ddb6 	.word	0x0002ddb6
    a670:	0002dd53 	.word	0x0002dd53
    a674:	0002dd71 	.word	0x0002dd71
    a678:	0002dd98 	.word	0x0002dd98

0000a67c <bt_conn_send_cb>:
{
    a67c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a680:	469a      	mov	sl, r3
	if (conn->state != BT_CONN_CONNECTED) {
    a682:	7b43      	ldrb	r3, [r0, #13]
    a684:	2b07      	cmp	r3, #7
{
    a686:	4607      	mov	r7, r0
    a688:	460d      	mov	r5, r1
    a68a:	4691      	mov	r9, r2
	if (conn->state != BT_CONN_CONNECTED) {
    a68c:	d018      	beq.n	a6c0 <bt_conn_send_cb+0x44>
    a68e:	f01c fe68 	bl	27362 <arch_is_user_context>
    a692:	4b39      	ldr	r3, [pc, #228]	; (a778 <bt_conn_send_cb+0xfc>)
    a694:	4a39      	ldr	r2, [pc, #228]	; (a77c <bt_conn_send_cb+0x100>)
    a696:	1a9b      	subs	r3, r3, r2
    a698:	08db      	lsrs	r3, r3, #3
		BT_ERR("not connected!");
    a69a:	019b      	lsls	r3, r3, #6
    a69c:	f043 0301 	orr.w	r3, r3, #1
    a6a0:	b148      	cbz	r0, a6b6 <bt_conn_send_cb+0x3a>
    a6a2:	4937      	ldr	r1, [pc, #220]	; (a780 <bt_conn_send_cb+0x104>)
    a6a4:	4618      	mov	r0, r3
    a6a6:	f01a fbf6 	bl	24e96 <log_from_user>
		net_buf_unref(buf);
    a6aa:	4628      	mov	r0, r5
    a6ac:	f012 f8a4 	bl	1c7f8 <net_buf_unref>
			return -ENOTCONN;
    a6b0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    a6b4:	e02b      	b.n	a70e <bt_conn_send_cb+0x92>
		BT_ERR("not connected!");
    a6b6:	4832      	ldr	r0, [pc, #200]	; (a780 <bt_conn_send_cb+0x104>)
    a6b8:	4619      	mov	r1, r3
    a6ba:	f01a fc12 	bl	24ee2 <log_0>
    a6be:	e7f4      	b.n	a6aa <bt_conn_send_cb+0x2e>
	if (cb) {
    a6c0:	2a00      	cmp	r2, #0
    a6c2:	d057      	beq.n	a774 <bt_conn_send_cb+0xf8>
	ret = arch_is_user_context();
    a6c4:	f01c fe4d 	bl	27362 <arch_is_user_context>
	if (z_syscall_trap()) {
    a6c8:	b318      	cbz	r0, a712 <bt_conn_send_cb+0x96>
	register uint32_t r6 __asm__("r6") = call_id;
    a6ca:	2674      	movs	r6, #116	; 0x74
	__asm__ volatile("svc %[svid]\n"
    a6cc:	df03      	svc	3
	if (k_current_get() == &k_sys_work_q.thread) {
    a6ce:	4b2d      	ldr	r3, [pc, #180]	; (a784 <bt_conn_send_cb+0x108>)
    a6d0:	4298      	cmp	r0, r3
		return k_fifo_get(&free_tx, K_NO_WAIT);
    a6d2:	bf07      	ittee	eq
    a6d4:	2000      	moveq	r0, #0
    a6d6:	2100      	moveq	r1, #0
	return k_fifo_get(&free_tx, K_FOREVER);
    a6d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    a6dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    a6e0:	f7ff fd6a 	bl	a1b8 <k_queue_get.constprop.0>
    a6e4:	4604      	mov	r4, r0
		if (!tx) {
    a6e6:	b9e0      	cbnz	r0, a722 <bt_conn_send_cb+0xa6>
	return arch_is_user_context();
    a6e8:	f01c fe3b 	bl	27362 <arch_is_user_context>
    a6ec:	4b22      	ldr	r3, [pc, #136]	; (a778 <bt_conn_send_cb+0xfc>)
    a6ee:	4a23      	ldr	r2, [pc, #140]	; (a77c <bt_conn_send_cb+0x100>)
    a6f0:	1a9b      	subs	r3, r3, r2
    a6f2:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to allocate TX context");
    a6f4:	019b      	lsls	r3, r3, #6
    a6f6:	f043 0301 	orr.w	r3, r3, #1
    a6fa:	b168      	cbz	r0, a718 <bt_conn_send_cb+0x9c>
    a6fc:	4922      	ldr	r1, [pc, #136]	; (a788 <bt_conn_send_cb+0x10c>)
    a6fe:	4618      	mov	r0, r3
    a700:	f01a fbc9 	bl	24e96 <log_from_user>
			net_buf_unref(buf);
    a704:	4628      	mov	r0, r5
    a706:	f012 f877 	bl	1c7f8 <net_buf_unref>
			return -ENOBUFS;
    a70a:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    a70e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return z_impl_k_current_get();
    a712:	f017 faf9 	bl	21d08 <z_impl_k_current_get>
    a716:	e7da      	b.n	a6ce <bt_conn_send_cb+0x52>
			BT_ERR("Unable to allocate TX context");
    a718:	481b      	ldr	r0, [pc, #108]	; (a788 <bt_conn_send_cb+0x10c>)
    a71a:	4619      	mov	r1, r3
    a71c:	f01a fbe1 	bl	24ee2 <log_0>
    a720:	e7f0      	b.n	a704 <bt_conn_send_cb+0x88>
		if (conn->state != BT_CONN_CONNECTED) {
    a722:	7b7b      	ldrb	r3, [r7, #13]
    a724:	2b07      	cmp	r3, #7
    a726:	d019      	beq.n	a75c <bt_conn_send_cb+0xe0>
    a728:	f01c fe1b 	bl	27362 <arch_is_user_context>
    a72c:	4b12      	ldr	r3, [pc, #72]	; (a778 <bt_conn_send_cb+0xfc>)
    a72e:	4a13      	ldr	r2, [pc, #76]	; (a77c <bt_conn_send_cb+0x100>)
    a730:	1a9b      	subs	r3, r3, r2
    a732:	08db      	lsrs	r3, r3, #3
			BT_WARN("Disconnected while allocating context");
    a734:	019b      	lsls	r3, r3, #6
    a736:	f043 0302 	orr.w	r3, r3, #2
    a73a:	b150      	cbz	r0, a752 <bt_conn_send_cb+0xd6>
    a73c:	4913      	ldr	r1, [pc, #76]	; (a78c <bt_conn_send_cb+0x110>)
    a73e:	4618      	mov	r0, r3
    a740:	f01a fba9 	bl	24e96 <log_from_user>
			net_buf_unref(buf);
    a744:	4628      	mov	r0, r5
    a746:	f012 f857 	bl	1c7f8 <net_buf_unref>
			tx_free(tx);
    a74a:	4620      	mov	r0, r4
    a74c:	f7ff fd14 	bl	a178 <tx_free>
    a750:	e7ae      	b.n	a6b0 <bt_conn_send_cb+0x34>
			BT_WARN("Disconnected while allocating context");
    a752:	480e      	ldr	r0, [pc, #56]	; (a78c <bt_conn_send_cb+0x110>)
    a754:	4619      	mov	r1, r3
    a756:	f01a fbc4 	bl	24ee2 <log_0>
    a75a:	e7f3      	b.n	a744 <bt_conn_send_cb+0xc8>
		tx->pending_no_cb = 0U;
    a75c:	2300      	movs	r3, #0
		tx->user_data = user_data;
    a75e:	e9c0 9a01 	strd	r9, sl, [r0, #4]
		tx->pending_no_cb = 0U;
    a762:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    a764:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
    a766:	f107 0038 	add.w	r0, r7, #56	; 0x38
    a76a:	4629      	mov	r1, r5
    a76c:	f01e fa67 	bl	28c3e <net_buf_put>
	return 0;
    a770:	2000      	movs	r0, #0
    a772:	e7cc      	b.n	a70e <bt_conn_send_cb+0x92>
		tx_data(buf)->tx = NULL;
    a774:	614a      	str	r2, [r1, #20]
    a776:	e7f6      	b.n	a766 <bt_conn_send_cb+0xea>
    a778:	0002a6e8 	.word	0x0002a6e8
    a77c:	0002a6d0 	.word	0x0002a6d0
    a780:	0002ddd1 	.word	0x0002ddd1
    a784:	20000ac0 	.word	0x20000ac0
    a788:	0002dde0 	.word	0x0002dde0
    a78c:	0002ddfe 	.word	0x0002ddfe

0000a790 <bt_conn_prepare_events>:

	return 0;
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
    a790:	b538      	push	{r3, r4, r5, lr}
	int i, ev_count = 0;
	struct bt_conn *conn;

	BT_DBG("");

	conn_change.signaled = 0U;
    a792:	4b1b      	ldr	r3, [pc, #108]	; (a800 <bt_conn_prepare_events+0x70>)
    a794:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    a796:	2101      	movs	r1, #1
	conn_change.signaled = 0U;
    a798:	609a      	str	r2, [r3, #8]
{
    a79a:	4604      	mov	r4, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    a79c:	f01f fc8a 	bl	2a0b4 <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a7a0:	f3bf 8f5b 	dmb	ish
    a7a4:	4b17      	ldr	r3, [pc, #92]	; (a804 <bt_conn_prepare_events+0x74>)
    a7a6:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
    a7aa:	f3bf 8f5b 	dmb	ish
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		conn = &acl_conns[i];

		if (!conn_prepare_events(conn, &events[ev_count])) {
    a7ae:	f104 0014 	add.w	r0, r4, #20
    a7b2:	4619      	mov	r1, r3
	if (!atomic_get(&conn->ref)) {
    a7b4:	b90a      	cbnz	r2, a7ba <bt_conn_prepare_events+0x2a>
		conn_cleanup(conn);
    a7b6:	2001      	movs	r0, #1
		}
	}
#endif

	return ev_count;
}
    a7b8:	bd38      	pop	{r3, r4, r5, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
    a7ba:	7b5a      	ldrb	r2, [r3, #13]
    a7bc:	b99a      	cbnz	r2, a7e6 <bt_conn_prepare_events+0x56>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a7be:	f3bf 8f5b 	dmb	ish
    a7c2:	1d1a      	adds	r2, r3, #4
    a7c4:	e852 5f00 	ldrex	r5, [r2]
    a7c8:	f025 0c40 	bic.w	ip, r5, #64	; 0x40
    a7cc:	e842 ce00 	strex	lr, ip, [r2]
    a7d0:	f1be 0f00 	cmp.w	lr, #0
    a7d4:	d1f6      	bne.n	a7c4 <bt_conn_prepare_events+0x34>
    a7d6:	f3bf 8f5b 	dmb	ish
    a7da:	066a      	lsls	r2, r5, #25
    a7dc:	d503      	bpl.n	a7e6 <bt_conn_prepare_events+0x56>
		conn_cleanup(conn);
    a7de:	4618      	mov	r0, r3
    a7e0:	f7ff fe70 	bl	a4c4 <conn_cleanup>
    a7e4:	e7e7      	b.n	a7b6 <bt_conn_prepare_events+0x26>
	if (conn->state != BT_CONN_CONNECTED) {
    a7e6:	7b4b      	ldrb	r3, [r1, #13]
    a7e8:	2b07      	cmp	r3, #7
    a7ea:	d1e4      	bne.n	a7b6 <bt_conn_prepare_events+0x26>
	k_poll_event_init(&events[0],
    a7ec:	4b06      	ldr	r3, [pc, #24]	; (a808 <bt_conn_prepare_events+0x78>)
    a7ee:	2200      	movs	r2, #0
    a7f0:	2104      	movs	r1, #4
    a7f2:	f01f fc5f 	bl	2a0b4 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    a7f6:	2301      	movs	r3, #1
    a7f8:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
    a7fc:	2002      	movs	r0, #2
	return ev_count;
    a7fe:	e7db      	b.n	a7b8 <bt_conn_prepare_events+0x28>
    a800:	20007818 	.word	0x20007818
    a804:	20000238 	.word	0x20000238
    a808:	20000270 	.word	0x20000270

0000a80c <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
    a80c:	b570      	push	{r4, r5, r6, lr}
    a80e:	4606      	mov	r6, r0
    a810:	460d      	mov	r5, r1
	conn = bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
    a812:	4811      	ldr	r0, [pc, #68]	; (a858 <bt_conn_add_le+0x4c>)
    a814:	2101      	movs	r1, #1
    a816:	f01c fdd4 	bl	273c2 <bt_conn_new>
	if (!conn) {
    a81a:	4604      	mov	r4, r0
    a81c:	b1c8      	cbz	r0, a852 <bt_conn_add_le+0x46>
	k_work_init_delayable(&work->work, handler);
    a81e:	490f      	ldr	r1, [pc, #60]	; (a85c <bt_conn_add_le+0x50>)
    a820:	3058      	adds	r0, #88	; 0x58
    a822:	f01f fa07 	bl	29c34 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
    a826:	490e      	ldr	r1, [pc, #56]	; (a860 <bt_conn_add_le+0x54>)
    a828:	f104 0028 	add.w	r0, r4, #40	; 0x28
    a82c:	f01f f9dc 	bl	29be8 <k_work_init>

	if (!conn) {
		return NULL;
	}

	conn->id = id;
    a830:	7226      	strb	r6, [r4, #8]
    a832:	682b      	ldr	r3, [r5, #0]
    a834:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    a838:	88ab      	ldrh	r3, [r5, #4]
    a83a:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
    a83e:	79ab      	ldrb	r3, [r5, #6]
    a840:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
    a844:	2301      	movs	r3, #1
    a846:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
    a848:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
    a84a:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    a84c:	4b05      	ldr	r3, [pc, #20]	; (a864 <bt_conn_add_le+0x58>)
    a84e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
    a852:	4620      	mov	r0, r4
    a854:	bd70      	pop	{r4, r5, r6, pc}
    a856:	bf00      	nop
    a858:	20000238 	.word	0x20000238
    a85c:	0000abf1 	.word	0x0000abf1
    a860:	000273bd 	.word	0x000273bd
    a864:	00280018 	.word	0x00280018

0000a868 <bt_conn_lookup_handle>:
		break;
	}
}

struct bt_conn *bt_conn_lookup_handle(uint16_t handle)
{
    a868:	4602      	mov	r2, r0
    a86a:	b508      	push	{r3, lr}
	struct bt_conn *conn;

	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
    a86c:	2101      	movs	r1, #1
    a86e:	4803      	ldr	r0, [pc, #12]	; (a87c <bt_conn_lookup_handle+0x14>)
    a870:	f01c fe5e 	bl	27530 <conn_lookup_handle>
		return conn;
	}
#endif

	return NULL;
}
    a874:	2800      	cmp	r0, #0
    a876:	bf38      	it	cc
    a878:	2000      	movcc	r0, #0
    a87a:	bd08      	pop	{r3, pc}
    a87c:	20000238 	.word	0x20000238

0000a880 <bt_conn_set_state>:
{
    a880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->state == state) {
    a884:	7b46      	ldrb	r6, [r0, #13]
    a886:	428e      	cmp	r6, r1
{
    a888:	4604      	mov	r4, r0
    a88a:	460d      	mov	r5, r1
	if (conn->state == state) {
    a88c:	d122      	bne.n	a8d4 <bt_conn_set_state+0x54>
    a88e:	f01c fd68 	bl	27362 <arch_is_user_context>
    a892:	4b7c      	ldr	r3, [pc, #496]	; (aa84 <bt_conn_set_state+0x204>)
    a894:	4a7c      	ldr	r2, [pc, #496]	; (aa88 <bt_conn_set_state+0x208>)
    a896:	1a9b      	subs	r3, r3, r2
    a898:	08db      	lsrs	r3, r3, #3
		BT_WARN("no transition %s", state2str(state));
    a89a:	019b      	lsls	r3, r3, #6
    a89c:	f043 0302 	orr.w	r3, r3, #2
    a8a0:	b158      	cbz	r0, a8ba <bt_conn_set_state+0x3a>
	switch (state) {
    a8a2:	2e08      	cmp	r6, #8
    a8a4:	bf96      	itet	ls
    a8a6:	4a79      	ldrls	r2, [pc, #484]	; (aa8c <bt_conn_set_state+0x20c>)
		BT_WARN("no transition %s", state2str(state));
    a8a8:	4a79      	ldrhi	r2, [pc, #484]	; (aa90 <bt_conn_set_state+0x210>)
    a8aa:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
    a8ae:	4979      	ldr	r1, [pc, #484]	; (aa94 <bt_conn_set_state+0x214>)
}
    a8b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			BT_WARN("Invalid (%u) old state", state);
    a8b4:	4618      	mov	r0, r3
    a8b6:	f01a baee 	b.w	24e96 <log_from_user>
	switch (state) {
    a8ba:	2e08      	cmp	r6, #8
    a8bc:	bf94      	ite	ls
    a8be:	4a73      	ldrls	r2, [pc, #460]	; (aa8c <bt_conn_set_state+0x20c>)
		BT_WARN("no transition %s", state2str(state));
    a8c0:	4973      	ldrhi	r1, [pc, #460]	; (aa90 <bt_conn_set_state+0x210>)
    a8c2:	4874      	ldr	r0, [pc, #464]	; (aa94 <bt_conn_set_state+0x214>)
    a8c4:	bf98      	it	ls
    a8c6:	f852 1026 	ldrls.w	r1, [r2, r6, lsl #2]
    a8ca:	461a      	mov	r2, r3
}
    a8cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("no valid (%u) state was set", state);
    a8d0:	f01a bb14 	b.w	24efc <log_1>
	conn->state = state;
    a8d4:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
    a8d6:	b90e      	cbnz	r6, a8dc <bt_conn_set_state+0x5c>
		bt_conn_ref(conn);
    a8d8:	f01c fdf8 	bl	274cc <bt_conn_ref>
	switch (conn->state) {
    a8dc:	7b63      	ldrb	r3, [r4, #13]
    a8de:	2b08      	cmp	r3, #8
    a8e0:	f200 80bc 	bhi.w	aa5c <bt_conn_set_state+0x1dc>
    a8e4:	e8df f003 	tbb	[pc, r3]
    a8e8:	cbcb0544 	.word	0xcbcb0544
    a8ec:	1bcbcbcb 	.word	0x1bcbcbcb
    a8f0:	cb          	.byte	0xcb
    a8f1:	00          	.byte	0x00
		tx->pending_no_cb = 0U;
    a8f2:	2500      	movs	r5, #0
	__asm__ volatile(
    a8f4:	f04f 0320 	mov.w	r3, #32
    a8f8:	f3ef 8211 	mrs	r2, BASEPRI
    a8fc:	f383 8811 	msr	BASEPRI, r3
    a900:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    a904:	69e3      	ldr	r3, [r4, #28]
    a906:	2b00      	cmp	r3, #0
    a908:	f000 8089 	beq.w	aa1e <bt_conn_set_state+0x19e>
			conn->pending_no_cb--;
    a90c:	3b01      	subs	r3, #1
    a90e:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    a910:	f382 8811 	msr	BASEPRI, r2
    a914:	f3bf 8f6f 	isb	sy
		k_sem_give(bt_conn_get_pkts(conn));
    a918:	f7ff fc78 	bl	a20c <k_sem_give.constprop.0>
    a91c:	e7ea      	b.n	a8f4 <bt_conn_set_state+0x74>
		if (conn->type == BT_CONN_TYPE_SCO) {
    a91e:	78a3      	ldrb	r3, [r4, #2]
    a920:	2b04      	cmp	r3, #4
    a922:	f000 80ac 	beq.w	aa7e <bt_conn_set_state+0x1fe>
		k_fifo_init(&conn->tx_queue);
    a926:	f104 0238 	add.w	r2, r4, #56	; 0x38
	ret = arch_is_user_context();
    a92a:	f01c fd1a 	bl	27362 <arch_is_user_context>
	if (z_syscall_trap()) {
    a92e:	b1d8      	cbz	r0, a968 <bt_conn_set_state+0xe8>
	register uint32_t ret __asm__("r0") = arg1;
    a930:	4610      	mov	r0, r2
	register uint32_t r6 __asm__("r6") = call_id;
    a932:	269b      	movs	r6, #155	; 0x9b
	__asm__ volatile("svc %[svid]\n"
    a934:	df03      	svc	3
		k_poll_signal_raise(&conn_change, 0);
    a936:	f7ff fc55 	bl	a1e4 <k_poll_signal_raise.constprop.0>
	list->head = NULL;
    a93a:	2300      	movs	r3, #0
	list->tail = NULL;
    a93c:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		bt_l2cap_connected(conn);
    a940:	4620      	mov	r0, r4
    a942:	f000 fb43 	bl	afcc <bt_l2cap_connected>
		notify_connected(conn);
    a946:	4620      	mov	r0, r4
    a948:	f7ff fc20 	bl	a18c <notify_connected>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    a94c:	78e3      	ldrb	r3, [r4, #3]
    a94e:	2b01      	cmp	r3, #1
    a950:	f040 8095 	bne.w	aa7e <bt_conn_set_state+0x1fe>
	return k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
    a954:	f104 0158 	add.w	r1, r4, #88	; 0x58
    a958:	484f      	ldr	r0, [pc, #316]	; (aa98 <bt_conn_set_state+0x218>)
}
    a95a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    a95e:	f44f 3220 	mov.w	r2, #163840	; 0x28000
    a962:	2300      	movs	r3, #0
    a964:	f018 b978 	b.w	22c58 <k_work_reschedule_for_queue>
	z_impl_k_queue_init(queue);
    a968:	4610      	mov	r0, r2
    a96a:	f01e fe61 	bl	29630 <z_impl_k_queue_init>
    a96e:	e7e2      	b.n	a936 <bt_conn_set_state+0xb6>
		if (conn->type == BT_CONN_TYPE_SCO) {
    a970:	78a3      	ldrb	r3, [r4, #2]
    a972:	2b04      	cmp	r3, #4
    a974:	d104      	bne.n	a980 <bt_conn_set_state+0x100>
			bt_conn_unref(conn);
    a976:	4620      	mov	r0, r4
}
    a978:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			bt_conn_unref(conn);
    a97c:	f01c bdc1 	b.w	27502 <bt_conn_unref>
		switch (old_state) {
    a980:	2e08      	cmp	r6, #8
    a982:	d87c      	bhi.n	aa7e <bt_conn_set_state+0x1fe>
    a984:	a301      	add	r3, pc, #4	; (adr r3, a98c <bt_conn_set_state+0x10c>)
    a986:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
    a98a:	bf00      	nop
    a98c:	0000a9fd 	.word	0x0000a9fd
    a990:	0000a9b1 	.word	0x0000a9b1
    a994:	0000a9ef 	.word	0x0000a9ef
    a998:	0000a977 	.word	0x0000a977
    a99c:	0000a977 	.word	0x0000a977
    a9a0:	0000a9ef 	.word	0x0000a9ef
    a9a4:	0000a9ef 	.word	0x0000a9ef
    a9a8:	0000a9fd 	.word	0x0000a9fd
    a9ac:	0000a9fd 	.word	0x0000a9fd
			tx_notify(conn);
    a9b0:	4620      	mov	r0, r4
    a9b2:	f01c fce0 	bl	27376 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
    a9b6:	78a3      	ldrb	r3, [r4, #2]
    a9b8:	2b01      	cmp	r3, #1
    a9ba:	d107      	bne.n	a9cc <bt_conn_set_state+0x14c>
	bool pending = k_work_delayable_is_pending(&work->work);
    a9bc:	f104 0558 	add.w	r5, r4, #88	; 0x58
	return k_work_delayable_busy_get(dwork) != 0;
    a9c0:	4628      	mov	r0, r5
    a9c2:	f01f f943 	bl	29c4c <k_work_delayable_busy_get>
	int rc = k_work_cancel_delayable(&work->work);
    a9c6:	4628      	mov	r0, r5
    a9c8:	f01f f954 	bl	29c74 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a9cc:	f3bf 8f5b 	dmb	ish
    a9d0:	3404      	adds	r4, #4
    a9d2:	e854 3f00 	ldrex	r3, [r4]
    a9d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a9da:	e844 3200 	strex	r2, r3, [r4]
    a9de:	2a00      	cmp	r2, #0
    a9e0:	d1f7      	bne.n	a9d2 <bt_conn_set_state+0x152>
    a9e2:	f3bf 8f5b 	dmb	ish
}
    a9e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			k_poll_signal_raise(&conn_change, 0);
    a9ea:	f7ff bbfb 	b.w	a1e4 <k_poll_signal_raise.constprop.0>
			if (conn->err) {
    a9ee:	7b23      	ldrb	r3, [r4, #12]
    a9f0:	2b00      	cmp	r3, #0
    a9f2:	d0c0      	beq.n	a976 <bt_conn_set_state+0xf6>
				notify_connected(conn);
    a9f4:	4620      	mov	r0, r4
    a9f6:	f7ff fbc9 	bl	a18c <notify_connected>
    a9fa:	e7bc      	b.n	a976 <bt_conn_set_state+0xf6>
	return arch_is_user_context();
    a9fc:	f01c fcb1 	bl	27362 <arch_is_user_context>
    aa00:	4b20      	ldr	r3, [pc, #128]	; (aa84 <bt_conn_set_state+0x204>)
    aa02:	4a21      	ldr	r2, [pc, #132]	; (aa88 <bt_conn_set_state+0x208>)
    aa04:	1a9b      	subs	r3, r3, r2
    aa06:	08db      	lsrs	r3, r3, #3
			BT_WARN("Invalid (%u) old state", state);
    aa08:	019b      	lsls	r3, r3, #6
    aa0a:	f043 0302 	orr.w	r3, r3, #2
    aa0e:	b110      	cbz	r0, aa16 <bt_conn_set_state+0x196>
    aa10:	4922      	ldr	r1, [pc, #136]	; (aa9c <bt_conn_set_state+0x21c>)
    aa12:	462a      	mov	r2, r5
    aa14:	e74c      	b.n	a8b0 <bt_conn_set_state+0x30>
    aa16:	4821      	ldr	r0, [pc, #132]	; (aa9c <bt_conn_set_state+0x21c>)
    aa18:	461a      	mov	r2, r3
    aa1a:	4629      	mov	r1, r5
    aa1c:	e756      	b.n	a8cc <bt_conn_set_state+0x4c>
Z_GENLIST_IS_EMPTY(slist)
    aa1e:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
    aa20:	b128      	cbz	r0, aa2e <bt_conn_set_state+0x1ae>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    aa22:	69a1      	ldr	r1, [r4, #24]
    aa24:	6803      	ldr	r3, [r0, #0]
	list->head = node;
    aa26:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    aa28:	4288      	cmp	r0, r1
	list->tail = node;
    aa2a:	bf08      	it	eq
    aa2c:	61a3      	streq	r3, [r4, #24]
    aa2e:	f382 8811 	msr	BASEPRI, r2
    aa32:	f3bf 8f6f 	isb	sy
		if (!node) {
    aa36:	b310      	cbz	r0, aa7e <bt_conn_set_state+0x1fe>
	__asm__ volatile(
    aa38:	f04f 0220 	mov.w	r2, #32
    aa3c:	f3ef 8311 	mrs	r3, BASEPRI
    aa40:	f382 8811 	msr	BASEPRI, r2
    aa44:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    aa48:	68c2      	ldr	r2, [r0, #12]
    aa4a:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    aa4c:	60c5      	str	r5, [r0, #12]
	__asm__ volatile(
    aa4e:	f383 8811 	msr	BASEPRI, r3
    aa52:	f3bf 8f6f 	isb	sy
		tx_free(tx);
    aa56:	f7ff fb8f 	bl	a178 <tx_free>
    aa5a:	e75d      	b.n	a918 <bt_conn_set_state+0x98>
    aa5c:	f01c fc81 	bl	27362 <arch_is_user_context>
    aa60:	4b08      	ldr	r3, [pc, #32]	; (aa84 <bt_conn_set_state+0x204>)
    aa62:	4a09      	ldr	r2, [pc, #36]	; (aa88 <bt_conn_set_state+0x208>)
    aa64:	1a9b      	subs	r3, r3, r2
    aa66:	08db      	lsrs	r3, r3, #3
		BT_WARN("no valid (%u) state was set", state);
    aa68:	019b      	lsls	r3, r3, #6
    aa6a:	f043 0302 	orr.w	r3, r3, #2
    aa6e:	b110      	cbz	r0, aa76 <bt_conn_set_state+0x1f6>
    aa70:	490b      	ldr	r1, [pc, #44]	; (aaa0 <bt_conn_set_state+0x220>)
    aa72:	462a      	mov	r2, r5
    aa74:	e71c      	b.n	a8b0 <bt_conn_set_state+0x30>
    aa76:	480a      	ldr	r0, [pc, #40]	; (aaa0 <bt_conn_set_state+0x220>)
    aa78:	461a      	mov	r2, r3
    aa7a:	4629      	mov	r1, r5
    aa7c:	e726      	b.n	a8cc <bt_conn_set_state+0x4c>
}
    aa7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    aa82:	bf00      	nop
    aa84:	0002a6e8 	.word	0x0002a6e8
    aa88:	0002a6d0 	.word	0x0002a6d0
    aa8c:	0002ade0 	.word	0x0002ade0
    aa90:	0002de24 	.word	0x0002de24
    aa94:	0002de2e 	.word	0x0002de2e
    aa98:	20000ac0 	.word	0x20000ac0
    aa9c:	0002de3f 	.word	0x0002de3f
    aaa0:	0002de56 	.word	0x0002de56

0000aaa4 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
    aaa4:	b570      	push	{r4, r5, r6, lr}
    aaa6:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    aaa8:	480c      	ldr	r0, [pc, #48]	; (aadc <bt_conn_lookup_addr_le+0x38>)
{
    aaaa:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    aaac:	f01c fd0e 	bl	274cc <bt_conn_ref>

		if (!conn) {
    aab0:	4604      	mov	r4, r0
    aab2:	b128      	cbz	r0, aac0 <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    aab4:	7883      	ldrb	r3, [r0, #2]
    aab6:	2b01      	cmp	r3, #1
    aab8:	d004      	beq.n	aac4 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
    aaba:	f01c fd22 	bl	27502 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
    aabe:	2400      	movs	r4, #0
}
    aac0:	4620      	mov	r0, r4
    aac2:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
    aac4:	4629      	mov	r1, r5
    aac6:	4632      	mov	r2, r6
    aac8:	f01c fce0 	bl	2748c <bt_conn_is_peer_addr_le>
    aacc:	4605      	mov	r5, r0
    aace:	2800      	cmp	r0, #0
    aad0:	d1f6      	bne.n	aac0 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
    aad2:	4620      	mov	r0, r4
    aad4:	f01c fd15 	bl	27502 <bt_conn_unref>
	return NULL;
    aad8:	462c      	mov	r4, r5
			continue;
    aada:	e7f1      	b.n	aac0 <bt_conn_lookup_addr_le+0x1c>
    aadc:	20000238 	.word	0x20000238

0000aae0 <bt_conn_exists_le>:
{
    aae0:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
    aae2:	f7ff ffdf 	bl	aaa4 <bt_conn_lookup_addr_le>
	if (conn) {
    aae6:	4604      	mov	r4, r0
    aae8:	b1c0      	cbz	r0, ab1c <bt_conn_exists_le+0x3c>
    aaea:	f01c fc3a 	bl	27362 <arch_is_user_context>
    aaee:	4a11      	ldr	r2, [pc, #68]	; (ab34 <bt_conn_exists_le+0x54>)
    aaf0:	4b11      	ldr	r3, [pc, #68]	; (ab38 <bt_conn_exists_le+0x58>)
    aaf2:	1a9b      	subs	r3, r3, r2
    aaf4:	08db      	lsrs	r3, r3, #3
		BT_WARN("Found valid connection in %s state",
    aaf6:	019b      	lsls	r3, r3, #6
    aaf8:	7b62      	ldrb	r2, [r4, #13]
    aafa:	f043 0302 	orr.w	r3, r3, #2
    aafe:	b170      	cbz	r0, ab1e <bt_conn_exists_le+0x3e>
	switch (state) {
    ab00:	2a08      	cmp	r2, #8
    ab02:	bf96      	itet	ls
    ab04:	490d      	ldrls	r1, [pc, #52]	; (ab3c <bt_conn_exists_le+0x5c>)
		BT_WARN("Found valid connection in %s state",
    ab06:	4a0e      	ldrhi	r2, [pc, #56]	; (ab40 <bt_conn_exists_le+0x60>)
    ab08:	f851 2022 	ldrls.w	r2, [r1, r2, lsl #2]
    ab0c:	490d      	ldr	r1, [pc, #52]	; (ab44 <bt_conn_exists_le+0x64>)
    ab0e:	4618      	mov	r0, r3
    ab10:	f01a f9c1 	bl	24e96 <log_from_user>
		bt_conn_unref(conn);
    ab14:	4620      	mov	r0, r4
    ab16:	f01c fcf4 	bl	27502 <bt_conn_unref>
		return true;
    ab1a:	2001      	movs	r0, #1
}
    ab1c:	bd10      	pop	{r4, pc}
	switch (state) {
    ab1e:	2a08      	cmp	r2, #8
    ab20:	bf96      	itet	ls
    ab22:	4906      	ldrls	r1, [pc, #24]	; (ab3c <bt_conn_exists_le+0x5c>)
		BT_WARN("Found valid connection in %s state",
    ab24:	4906      	ldrhi	r1, [pc, #24]	; (ab40 <bt_conn_exists_le+0x60>)
    ab26:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
    ab2a:	4806      	ldr	r0, [pc, #24]	; (ab44 <bt_conn_exists_le+0x64>)
    ab2c:	461a      	mov	r2, r3
    ab2e:	f01a f9e5 	bl	24efc <log_1>
    ab32:	e7ef      	b.n	ab14 <bt_conn_exists_le+0x34>
    ab34:	0002a6d0 	.word	0x0002a6d0
    ab38:	0002a6e8 	.word	0x0002a6e8
    ab3c:	0002ade0 	.word	0x0002ade0
    ab40:	0002de24 	.word	0x0002de24
    ab44:	0002de72 	.word	0x0002de72

0000ab48 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
    ab48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ab4a:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    ab4c:	480f      	ldr	r0, [pc, #60]	; (ab8c <bt_conn_lookup_state_le+0x44>)
{
    ab4e:	460e      	mov	r6, r1
    ab50:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    ab52:	f01c fcbb 	bl	274cc <bt_conn_ref>

		if (!conn) {
    ab56:	4604      	mov	r4, r0
    ab58:	b1b0      	cbz	r0, ab88 <bt_conn_lookup_state_le+0x40>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    ab5a:	7883      	ldrb	r3, [r0, #2]
    ab5c:	2b01      	cmp	r3, #1
    ab5e:	d003      	beq.n	ab68 <bt_conn_lookup_state_le+0x20>
			bt_conn_ref(conn);
    ab60:	f01c fcb4 	bl	274cc <bt_conn_ref>
		}

		return conn;
	}

	return NULL;
    ab64:	2400      	movs	r4, #0
			continue;
    ab66:	e00f      	b.n	ab88 <bt_conn_lookup_state_le+0x40>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
    ab68:	b146      	cbz	r6, ab7c <bt_conn_lookup_state_le+0x34>
    ab6a:	4632      	mov	r2, r6
    ab6c:	4629      	mov	r1, r5
    ab6e:	f01c fc8d 	bl	2748c <bt_conn_is_peer_addr_le>
    ab72:	b918      	cbnz	r0, ab7c <bt_conn_lookup_state_le+0x34>
			bt_conn_unref(conn);
    ab74:	4620      	mov	r0, r4
    ab76:	f01c fcc4 	bl	27502 <bt_conn_unref>
    ab7a:	e7f3      	b.n	ab64 <bt_conn_lookup_state_le+0x1c>
		if (!(conn->state == state && conn->id == id)) {
    ab7c:	7b63      	ldrb	r3, [r4, #13]
    ab7e:	42bb      	cmp	r3, r7
    ab80:	d1f8      	bne.n	ab74 <bt_conn_lookup_state_le+0x2c>
    ab82:	7a23      	ldrb	r3, [r4, #8]
    ab84:	42ab      	cmp	r3, r5
    ab86:	d1f5      	bne.n	ab74 <bt_conn_lookup_state_le+0x2c>
}
    ab88:	4620      	mov	r0, r4
    ab8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ab8c:	20000238 	.word	0x20000238

0000ab90 <send_conn_le_param_update>:
{
    ab90:	b538      	push	{r3, r4, r5, lr}
    ab92:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
    ab94:	4608      	mov	r0, r1
{
    ab96:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    ab98:	f01c f9ca 	bl	26f30 <bt_le_conn_params_valid>
    ab9c:	b318      	cbz	r0, abe6 <send_conn_le_param_update+0x56>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    ab9e:	4b13      	ldr	r3, [pc, #76]	; (abec <send_conn_le_param_update+0x5c>)
    aba0:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
    aba4:	0799      	lsls	r1, r3, #30
    aba6:	d407      	bmi.n	abb8 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
    aba8:	78e3      	ldrb	r3, [r4, #3]
    abaa:	b183      	cbz	r3, abce <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
    abac:	4629      	mov	r1, r5
    abae:	4620      	mov	r0, r4
}
    abb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    abb4:	f000 bb4e 	b.w	b254 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    abb8:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
    abbc:	079a      	lsls	r2, r3, #30
    abbe:	d5f3      	bpl.n	aba8 <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    abc0:	f3bf 8f5b 	dmb	ish
    abc4:	6863      	ldr	r3, [r4, #4]
    abc6:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    abca:	055b      	lsls	r3, r3, #21
    abcc:	d4ec      	bmi.n	aba8 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
    abce:	4629      	mov	r1, r5
    abd0:	4620      	mov	r0, r4
    abd2:	f01c fcf5 	bl	275c0 <bt_conn_le_conn_update>
		if (rc == 0) {
    abd6:	b928      	cbnz	r0, abe4 <send_conn_le_param_update+0x54>
			conn->le.pending_latency = param->latency;
    abd8:	88ab      	ldrh	r3, [r5, #4]
    abda:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
    abde:	88eb      	ldrh	r3, [r5, #6]
    abe0:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
    abe4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    abe6:	f06f 0015 	mvn.w	r0, #21
    abea:	e7fb      	b.n	abe4 <send_conn_le_param_update+0x54>
    abec:	20007600 	.word	0x20007600

0000abf0 <deferred_work>:
{
    abf0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
    abf2:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
    abf6:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
    abf8:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
    abfc:	b993      	cbnz	r3, ac24 <deferred_work+0x34>
		bt_l2cap_disconnected(conn);
    abfe:	4630      	mov	r0, r6
    ac00:	f01c fd49 	bl	27696 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    ac04:	4b1f      	ldr	r3, [pc, #124]	; (ac84 <deferred_work+0x94>)
    ac06:	681d      	ldr	r5, [r3, #0]
    ac08:	b925      	cbnz	r5, ac14 <deferred_work+0x24>
		bt_conn_unref(conn);
    ac0a:	4630      	mov	r0, r6
    ac0c:	f01c fc79 	bl	27502 <bt_conn_unref>
}
    ac10:	b002      	add	sp, #8
    ac12:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->disconnected) {
    ac14:	686b      	ldr	r3, [r5, #4]
    ac16:	b11b      	cbz	r3, ac20 <deferred_work+0x30>
			cb->disconnected(conn, conn->err);
    ac18:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
    ac1c:	4630      	mov	r0, r6
    ac1e:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    ac20:	69ad      	ldr	r5, [r5, #24]
    ac22:	e7f1      	b.n	ac08 <deferred_work+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
    ac24:	f810 3c56 	ldrb.w	r3, [r0, #-86]
    ac28:	2b01      	cmp	r3, #1
    ac2a:	d1f1      	bne.n	ac10 <deferred_work+0x20>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    ac2c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
    ac30:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
    ac34:	e855 3f00 	ldrex	r3, [r5]
    ac38:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    ac3c:	e845 2100 	strex	r1, r2, [r5]
    ac40:	2900      	cmp	r1, #0
    ac42:	d1f7      	bne.n	ac34 <deferred_work+0x44>
    ac44:	f3bf 8f5b 	dmb	ish
    ac48:	059b      	lsls	r3, r3, #22
    ac4a:	d514      	bpl.n	ac76 <deferred_work+0x86>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    ac4c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    ac4e:	9300      	str	r3, [sp, #0]
    ac50:	6d23      	ldr	r3, [r4, #80]	; 0x50
    ac52:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
    ac54:	4669      	mov	r1, sp
    ac56:	4630      	mov	r0, r6
    ac58:	f7ff ff9a 	bl	ab90 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ac5c:	f3bf 8f5b 	dmb	ish
    ac60:	e855 3f00 	ldrex	r3, [r5]
    ac64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    ac68:	e845 3200 	strex	r2, r3, [r5]
    ac6c:	2a00      	cmp	r2, #0
    ac6e:	d1f7      	bne.n	ac60 <deferred_work+0x70>
    ac70:	f3bf 8f5b 	dmb	ish
    ac74:	e7cc      	b.n	ac10 <deferred_work+0x20>
		param = BT_LE_CONN_PARAM(
    ac76:	4a04      	ldr	r2, [pc, #16]	; (ac88 <deferred_work+0x98>)
    ac78:	6810      	ldr	r0, [r2, #0]
    ac7a:	6851      	ldr	r1, [r2, #4]
    ac7c:	466b      	mov	r3, sp
    ac7e:	c303      	stmia	r3!, {r0, r1}
    ac80:	e7e8      	b.n	ac54 <deferred_work+0x64>
    ac82:	bf00      	nop
    ac84:	20000e34 	.word	0x20000e34
    ac88:	0002a93e 	.word	0x0002a93e

0000ac8c <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
    ac8c:	b538      	push	{r3, r4, r5, lr}
    ac8e:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
    ac90:	4910      	ldr	r1, [pc, #64]	; (acd4 <bt_conn_create_pdu_timeout+0x48>)
    ac92:	2800      	cmp	r0, #0
    ac94:	bf08      	it	eq
    ac96:	4608      	moveq	r0, r1
    ac98:	f01d ffae 	bl	28bf8 <net_buf_alloc_fixed>
#else
		buf = net_buf_alloc(pool, timeout);
#endif
	}

	if (!buf) {
    ac9c:	4604      	mov	r4, r0
    ac9e:	b9a0      	cbnz	r0, acca <bt_conn_create_pdu_timeout+0x3e>
    aca0:	f01c fb5f 	bl	27362 <arch_is_user_context>
    aca4:	4b0c      	ldr	r3, [pc, #48]	; (acd8 <bt_conn_create_pdu_timeout+0x4c>)
    aca6:	4a0d      	ldr	r2, [pc, #52]	; (acdc <bt_conn_create_pdu_timeout+0x50>)
    aca8:	1a9b      	subs	r3, r3, r2
    acaa:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unable to allocate buffer within timeout");
    acac:	019b      	lsls	r3, r3, #6
    acae:	f043 0302 	orr.w	r3, r3, #2
    acb2:	b128      	cbz	r0, acc0 <bt_conn_create_pdu_timeout+0x34>
    acb4:	490a      	ldr	r1, [pc, #40]	; (ace0 <bt_conn_create_pdu_timeout+0x54>)
    acb6:	4618      	mov	r0, r3
    acb8:	f01a f8ed 	bl	24e96 <log_from_user>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
    acbc:	4620      	mov	r0, r4
    acbe:	bd38      	pop	{r3, r4, r5, pc}
		BT_WARN("Unable to allocate buffer within timeout");
    acc0:	4807      	ldr	r0, [pc, #28]	; (ace0 <bt_conn_create_pdu_timeout+0x54>)
    acc2:	4619      	mov	r1, r3
    acc4:	f01a f90d 	bl	24ee2 <log_0>
		return NULL;
    acc8:	e7f8      	b.n	acbc <bt_conn_create_pdu_timeout+0x30>
	net_buf_simple_reserve(&buf->b, reserve);
    acca:	1d29      	adds	r1, r5, #4
    accc:	3008      	adds	r0, #8
    acce:	f01d ffb2 	bl	28c36 <net_buf_simple_reserve>
	return buf;
    acd2:	e7f3      	b.n	acbc <bt_conn_create_pdu_timeout+0x30>
    acd4:	20007ef0 	.word	0x20007ef0
    acd8:	0002a6e8 	.word	0x0002a6e8
    acdc:	0002a6d0 	.word	0x0002a6d0
    ace0:	0002de95 	.word	0x0002de95

0000ace4 <bt_conn_create_frag_timeout>:
{
    ace4:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    ace6:	4801      	ldr	r0, [pc, #4]	; (acec <bt_conn_create_frag_timeout+0x8>)
    ace8:	f7ff bfd0 	b.w	ac8c <bt_conn_create_pdu_timeout>
    acec:	20007f40 	.word	0x20007f40

0000acf0 <create_frag.isra.0>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    acf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    acf4:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
    acf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    acfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    acfe:	2000      	movs	r0, #0
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    ad00:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
    ad02:	f7ff ffef 	bl	ace4 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    ad06:	7833      	ldrb	r3, [r6, #0]
    ad08:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
    ad0a:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    ad0c:	f04f 0600 	mov.w	r6, #0
    ad10:	d005      	beq.n	ad1e <create_frag.isra.0+0x2e>
		net_buf_unref(frag);
    ad12:	f011 fd71 	bl	1c7f8 <net_buf_unref>
		return NULL;
    ad16:	4635      	mov	r5, r6
}
    ad18:	4628      	mov	r0, r5
    ad1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
    ad1e:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
    ad20:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
    ad24:	4e0c      	ldr	r6, [pc, #48]	; (ad58 <create_frag.isra.0+0x68>)
    ad26:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    ad28:	f8b6 80cc 	ldrh.w	r8, [r6, #204]	; 0xcc
    ad2c:	f01d fff6 	bl	28d1c <net_buf_simple_tailroom>
    ad30:	4580      	cmp	r8, r0
    ad32:	d20c      	bcs.n	ad4e <create_frag.isra.0+0x5e>
	return bt_dev.le.acl_mtu;
    ad34:	f8b6 60cc 	ldrh.w	r6, [r6, #204]	; 0xcc
	return net_buf_simple_add_mem(&buf->b, mem, len);
    ad38:	f854 1f08 	ldr.w	r1, [r4, #8]!
    ad3c:	4632      	mov	r2, r6
    ad3e:	4638      	mov	r0, r7
    ad40:	f01d ffb6 	bl	28cb0 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
    ad44:	4631      	mov	r1, r6
    ad46:	4620      	mov	r0, r4
    ad48:	f01d ffcc 	bl	28ce4 <net_buf_simple_pull>
    ad4c:	e7e4      	b.n	ad18 <create_frag.isra.0+0x28>
	return net_buf_simple_tailroom(&buf->b);
    ad4e:	4638      	mov	r0, r7
    ad50:	f01d ffe4 	bl	28d1c <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    ad54:	b286      	uxth	r6, r0
    ad56:	e7ef      	b.n	ad38 <create_frag.isra.0+0x48>
    ad58:	20007600 	.word	0x20007600

0000ad5c <bt_conn_process_tx>:
{
    ad5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    ad5e:	7b43      	ldrb	r3, [r0, #13]
{
    ad60:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    ad62:	b993      	cbnz	r3, ad8a <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    ad64:	f3bf 8f5b 	dmb	ish
    ad68:	1d03      	adds	r3, r0, #4
    ad6a:	e853 2f00 	ldrex	r2, [r3]
    ad6e:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    ad72:	e843 1400 	strex	r4, r1, [r3]
    ad76:	2c00      	cmp	r4, #0
    ad78:	d1f7      	bne.n	ad6a <bt_conn_process_tx+0xe>
    ad7a:	f3bf 8f5b 	dmb	ish
    ad7e:	0653      	lsls	r3, r2, #25
    ad80:	d503      	bpl.n	ad8a <bt_conn_process_tx+0x2e>
}
    ad82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    ad86:	f7ff bb9d 	b.w	a4c4 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    ad8a:	2200      	movs	r2, #0
    ad8c:	2300      	movs	r3, #0
    ad8e:	f105 0038 	add.w	r0, r5, #56	; 0x38
    ad92:	f01d ff36 	bl	28c02 <net_buf_get>
	BT_ASSERT(buf);
    ad96:	4604      	mov	r4, r0
    ad98:	b960      	cbnz	r0, adb4 <bt_conn_process_tx+0x58>
    ad9a:	4a20      	ldr	r2, [pc, #128]	; (ae1c <bt_conn_process_tx+0xc0>)
    ad9c:	4920      	ldr	r1, [pc, #128]	; (ae20 <bt_conn_process_tx+0xc4>)
    ad9e:	4821      	ldr	r0, [pc, #132]	; (ae24 <bt_conn_process_tx+0xc8>)
    ada0:	f240 5361 	movw	r3, #1377	; 0x561
    ada4:	f019 fc1e 	bl	245e4 <printk>
    ada8:	4040      	eors	r0, r0
    adaa:	f380 8811 	msr	BASEPRI, r0
    adae:	f04f 0003 	mov.w	r0, #3
    adb2:	df02      	svc	2
	return bt_dev.le.acl_mtu;
    adb4:	4f1c      	ldr	r7, [pc, #112]	; (ae28 <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
    adb6:	89a1      	ldrh	r1, [r4, #12]
    adb8:	f8b7 20cc 	ldrh.w	r2, [r7, #204]	; 0xcc
    adbc:	4291      	cmp	r1, r2
    adbe:	d807      	bhi.n	add0 <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
    adc0:	2300      	movs	r3, #0
    adc2:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
    adc4:	4621      	mov	r1, r4
    adc6:	4628      	mov	r0, r5
    adc8:	f7ff fa32 	bl	a230 <send_frag>
	if (!send_buf(conn, buf)) {
    adcc:	b140      	cbz	r0, ade0 <bt_conn_process_tx+0x84>
}
    adce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
    add0:	f105 060d 	add.w	r6, r5, #13
    add4:	4621      	mov	r1, r4
    add6:	4630      	mov	r0, r6
    add8:	f7ff ff8a 	bl	acf0 <create_frag.isra.0>
	if (!frag) {
    addc:	4601      	mov	r1, r0
    adde:	b920      	cbnz	r0, adea <bt_conn_process_tx+0x8e>
		net_buf_unref(buf);
    ade0:	4620      	mov	r0, r4
}
    ade2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    ade6:	f011 bd07 	b.w	1c7f8 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
    adea:	2301      	movs	r3, #1
    adec:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    adee:	4628      	mov	r0, r5
    adf0:	f7ff fa1e 	bl	a230 <send_frag>
    adf4:	2800      	cmp	r0, #0
    adf6:	d0f3      	beq.n	ade0 <bt_conn_process_tx+0x84>
	while (buf->len > conn_mtu(conn)) {
    adf8:	89a2      	ldrh	r2, [r4, #12]
    adfa:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
    adfe:	429a      	cmp	r2, r3
    ae00:	d802      	bhi.n	ae08 <bt_conn_process_tx+0xac>
	return send_frag(conn, buf, FRAG_END, false);
    ae02:	2300      	movs	r3, #0
    ae04:	2203      	movs	r2, #3
    ae06:	e7dd      	b.n	adc4 <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
    ae08:	4621      	mov	r1, r4
    ae0a:	4630      	mov	r0, r6
    ae0c:	f7ff ff70 	bl	acf0 <create_frag.isra.0>
		if (!frag) {
    ae10:	4601      	mov	r1, r0
    ae12:	2800      	cmp	r0, #0
    ae14:	d0e4      	beq.n	ade0 <bt_conn_process_tx+0x84>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    ae16:	2301      	movs	r3, #1
    ae18:	461a      	mov	r2, r3
    ae1a:	e7e8      	b.n	adee <bt_conn_process_tx+0x92>
    ae1c:	0002debe 	.word	0x0002debe
    ae20:	0002d2a9 	.word	0x0002d2a9
    ae24:	0002d567 	.word	0x0002d567
    ae28:	20007600 	.word	0x20007600

0000ae2c <bt_conn_auth_cb_register>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
    ae2c:	4b0c      	ldr	r3, [pc, #48]	; (ae60 <bt_conn_auth_cb_register+0x34>)
    ae2e:	b908      	cbnz	r0, ae34 <bt_conn_auth_cb_register+0x8>
		bt_auth = NULL;
    ae30:	6018      	str	r0, [r3, #0]
		return 0;
    ae32:	4770      	bx	lr
	}

	if (bt_auth) {
    ae34:	681a      	ldr	r2, [r3, #0]
    ae36:	b962      	cbnz	r2, ae52 <bt_conn_auth_cb_register+0x26>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
    ae38:	6902      	ldr	r2, [r0, #16]
    ae3a:	b93a      	cbnz	r2, ae4c <bt_conn_auth_cb_register+0x20>
    ae3c:	6802      	ldr	r2, [r0, #0]
    ae3e:	b95a      	cbnz	r2, ae58 <bt_conn_auth_cb_register+0x2c>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
    ae40:	6842      	ldr	r2, [r0, #4]
    ae42:	b94a      	cbnz	r2, ae58 <bt_conn_auth_cb_register+0x2c>
    ae44:	6882      	ldr	r2, [r0, #8]
    ae46:	b93a      	cbnz	r2, ae58 <bt_conn_auth_cb_register+0x2c>
    ae48:	6942      	ldr	r2, [r0, #20]
    ae4a:	b92a      	cbnz	r2, ae58 <bt_conn_auth_cb_register+0x2c>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
    ae4c:	6018      	str	r0, [r3, #0]
	return 0;
    ae4e:	2000      	movs	r0, #0
    ae50:	4770      	bx	lr
		return -EALREADY;
    ae52:	f06f 0077 	mvn.w	r0, #119	; 0x77
    ae56:	4770      	bx	lr
		return -EINVAL;
    ae58:	f06f 0015 	mvn.w	r0, #21
}
    ae5c:	4770      	bx	lr
    ae5e:	bf00      	nop
    ae60:	20000e30 	.word	0x20000e30

0000ae64 <bt_conn_index>:
		__ASSERT(0 <= index && index < ARRAY_SIZE(sco_conns),
			"Invalid bt_conn pointer");
		break;
#endif
	default:
		index = conn - acl_conns;
    ae64:	4b03      	ldr	r3, [pc, #12]	; (ae74 <bt_conn_index+0x10>)
    ae66:	1ac0      	subs	r0, r0, r3
    ae68:	4b03      	ldr	r3, [pc, #12]	; (ae78 <bt_conn_index+0x14>)
    ae6a:	1180      	asrs	r0, r0, #6
    ae6c:	4358      	muls	r0, r3
			 "Invalid bt_conn pointer");
		break;
	}

	return (uint8_t)index;
}
    ae6e:	b2c0      	uxtb	r0, r0
    ae70:	4770      	bx	lr
    ae72:	bf00      	nop
    ae74:	20000238 	.word	0x20000238
    ae78:	aaaaaaab 	.word	0xaaaaaaab

0000ae7c <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
    ae7c:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    ae7e:	490b      	ldr	r1, [pc, #44]	; (aeac <bt_conn_init+0x30>)
    ae80:	480b      	ldr	r0, [pc, #44]	; (aeb0 <bt_conn_init+0x34>)
    ae82:	f01e fc03 	bl	2968c <k_queue_append>
    ae86:	490b      	ldr	r1, [pc, #44]	; (aeb4 <bt_conn_init+0x38>)
    ae88:	4809      	ldr	r0, [pc, #36]	; (aeb0 <bt_conn_init+0x34>)
    ae8a:	f01e fbff 	bl	2968c <k_queue_append>
    ae8e:	490a      	ldr	r1, [pc, #40]	; (aeb8 <bt_conn_init+0x3c>)
    ae90:	4807      	ldr	r0, [pc, #28]	; (aeb0 <bt_conn_init+0x34>)
    ae92:	f01e fbfb 	bl	2968c <k_queue_append>
	}

	bt_att_init();
    ae96:	f01c ff8b 	bl	27db0 <bt_att_init>

	err = bt_smp_init();
    ae9a:	f003 feab 	bl	ebf4 <bt_smp_init>
	if (err) {
    ae9e:	4604      	mov	r4, r0
    aea0:	b908      	cbnz	r0, aea6 <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
    aea2:	f01c fc64 	bl	2776e <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
    aea6:	4620      	mov	r0, r4
    aea8:	bd10      	pop	{r4, pc}
    aeaa:	bf00      	nop
    aeac:	20000e38 	.word	0x20000e38
    aeb0:	20007ec0 	.word	0x20007ec0
    aeb4:	20000e48 	.word	0x20000e48
    aeb8:	20000e58 	.word	0x20000e58

0000aebc <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    aebc:	4b10      	ldr	r3, [pc, #64]	; (af00 <l2cap_accept+0x44>)
{
    aebe:	b510      	push	{r4, lr}
    aec0:	4604      	mov	r4, r0
		if (l2cap->chan.chan.conn) {
    aec2:	6818      	ldr	r0, [r3, #0]
    aec4:	b918      	cbnz	r0, aece <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    aec6:	4a0f      	ldr	r2, [pc, #60]	; (af04 <l2cap_accept+0x48>)
    aec8:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
    aeca:	600b      	str	r3, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    aecc:	bd10      	pop	{r4, pc}
    aece:	f01c fb9f 	bl	27610 <arch_is_user_context>
    aed2:	4b0d      	ldr	r3, [pc, #52]	; (af08 <l2cap_accept+0x4c>)
    aed4:	4a0d      	ldr	r2, [pc, #52]	; (af0c <l2cap_accept+0x50>)
    aed6:	1a9b      	subs	r3, r3, r2
    aed8:	08db      	lsrs	r3, r3, #3
	BT_ERR("No available L2CAP context for conn %p", conn);
    aeda:	019b      	lsls	r3, r3, #6
    aedc:	f043 0301 	orr.w	r3, r3, #1
    aee0:	b138      	cbz	r0, aef2 <l2cap_accept+0x36>
    aee2:	490b      	ldr	r1, [pc, #44]	; (af10 <l2cap_accept+0x54>)
    aee4:	4622      	mov	r2, r4
    aee6:	4618      	mov	r0, r3
    aee8:	f019 ffd5 	bl	24e96 <log_from_user>
	return -ENOMEM;
    aeec:	f06f 000b 	mvn.w	r0, #11
    aef0:	e7ec      	b.n	aecc <l2cap_accept+0x10>
	BT_ERR("No available L2CAP context for conn %p", conn);
    aef2:	4807      	ldr	r0, [pc, #28]	; (af10 <l2cap_accept+0x54>)
    aef4:	461a      	mov	r2, r3
    aef6:	4621      	mov	r1, r4
    aef8:	f01a f800 	bl	24efc <log_1>
    aefc:	e7f6      	b.n	aeec <l2cap_accept+0x30>
    aefe:	bf00      	nop
    af00:	200002f8 	.word	0x200002f8
    af04:	0002ae24 	.word	0x0002ae24
    af08:	0002a7c8 	.word	0x0002a7c8
    af0c:	0002a6d0 	.word	0x0002a6d0
    af10:	0002df4b 	.word	0x0002df4b

0000af14 <l2cap_create_le_sig_pdu.isra.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    af14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    af16:	4605      	mov	r5, r0
    af18:	460f      	mov	r7, r1
    af1a:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
    af1c:	2300      	movs	r3, #0
    af1e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    af22:	2104      	movs	r1, #4
    af24:	2000      	movs	r0, #0
    af26:	f7ff feb1 	bl	ac8c <bt_conn_create_pdu_timeout>
	if (!buf) {
    af2a:	4604      	mov	r4, r0
    af2c:	b9b0      	cbnz	r0, af5c <l2cap_create_le_sig_pdu.isra.0+0x48>
    af2e:	f01c fb6f 	bl	27610 <arch_is_user_context>
    af32:	4b0e      	ldr	r3, [pc, #56]	; (af6c <l2cap_create_le_sig_pdu.isra.0+0x58>)
    af34:	4a0e      	ldr	r2, [pc, #56]	; (af70 <l2cap_create_le_sig_pdu.isra.0+0x5c>)
    af36:	1a9b      	subs	r3, r3, r2
    af38:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
    af3a:	019b      	lsls	r3, r3, #6
    af3c:	f043 0301 	orr.w	r3, r3, #1
    af40:	b130      	cbz	r0, af50 <l2cap_create_le_sig_pdu.isra.0+0x3c>
    af42:	490c      	ldr	r1, [pc, #48]	; (af74 <l2cap_create_le_sig_pdu.isra.0+0x60>)
    af44:	462a      	mov	r2, r5
    af46:	4618      	mov	r0, r3
    af48:	f019 ffa5 	bl	24e96 <log_from_user>
}
    af4c:	4620      	mov	r0, r4
    af4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
    af50:	4808      	ldr	r0, [pc, #32]	; (af74 <l2cap_create_le_sig_pdu.isra.0+0x60>)
    af52:	461a      	mov	r2, r3
    af54:	4629      	mov	r1, r5
    af56:	f019 ffd1 	bl	24efc <log_1>
		return NULL;
    af5a:	e7f7      	b.n	af4c <l2cap_create_le_sig_pdu.isra.0+0x38>
	return net_buf_simple_add(&buf->b, len);
    af5c:	2104      	movs	r1, #4
    af5e:	3008      	adds	r0, #8
    af60:	f01d fea0 	bl	28ca4 <net_buf_simple_add>
	hdr->code = code;
    af64:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
    af66:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    af68:	8046      	strh	r6, [r0, #2]
	return buf;
    af6a:	e7ef      	b.n	af4c <l2cap_create_le_sig_pdu.isra.0+0x38>
    af6c:	0002a7c8 	.word	0x0002a7c8
    af70:	0002a6d0 	.word	0x0002a6d0
    af74:	0002df72 	.word	0x0002df72

0000af78 <l2cap_rtx_timeout>:
{
    af78:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = chan->chan.conn;
    af7a:	f850 5c10 	ldr.w	r5, [r0, #-16]
	struct bt_l2cap_le_chan *chan = LE_CHAN_RTX(work);
    af7e:	f1a0 0410 	sub.w	r4, r0, #16
    af82:	f01c fb45 	bl	27610 <arch_is_user_context>
    af86:	4b0e      	ldr	r3, [pc, #56]	; (afc0 <l2cap_rtx_timeout+0x48>)
    af88:	4a0e      	ldr	r2, [pc, #56]	; (afc4 <l2cap_rtx_timeout+0x4c>)
    af8a:	1a9b      	subs	r3, r3, r2
    af8c:	08db      	lsrs	r3, r3, #3
	BT_ERR("chan %p timeout", chan);
    af8e:	019b      	lsls	r3, r3, #6
    af90:	f043 0301 	orr.w	r3, r3, #1
    af94:	b168      	cbz	r0, afb2 <l2cap_rtx_timeout+0x3a>
    af96:	490c      	ldr	r1, [pc, #48]	; (afc8 <l2cap_rtx_timeout+0x50>)
    af98:	4622      	mov	r2, r4
    af9a:	4618      	mov	r0, r3
    af9c:	f019 ff7b 	bl	24e96 <log_from_user>
	bt_l2cap_chan_remove(conn, &chan->chan);
    afa0:	4628      	mov	r0, r5
    afa2:	4621      	mov	r1, r4
    afa4:	f01c fb40 	bl	27628 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    afa8:	4620      	mov	r0, r4
}
    afaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
    afae:	f01c bb5d 	b.w	2766c <bt_l2cap_chan_del>
	BT_ERR("chan %p timeout", chan);
    afb2:	4805      	ldr	r0, [pc, #20]	; (afc8 <l2cap_rtx_timeout+0x50>)
    afb4:	461a      	mov	r2, r3
    afb6:	4621      	mov	r1, r4
    afb8:	f019 ffa0 	bl	24efc <log_1>
    afbc:	e7f0      	b.n	afa0 <l2cap_rtx_timeout+0x28>
    afbe:	bf00      	nop
    afc0:	0002a7c8 	.word	0x0002a7c8
    afc4:	0002a6d0 	.word	0x0002a6d0
    afc8:	0002df9a 	.word	0x0002df9a

0000afcc <bt_l2cap_connected>:
{
    afcc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    afd0:	4e29      	ldr	r6, [pc, #164]	; (b078 <bt_l2cap_connected+0xac>)
    afd2:	4f2a      	ldr	r7, [pc, #168]	; (b07c <bt_l2cap_connected+0xb0>)
	k_work_init_delayable(&work->work, handler);
    afd4:	f8df 80a8 	ldr.w	r8, [pc, #168]	; b080 <bt_l2cap_connected+0xb4>
{
    afd8:	4604      	mov	r4, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    afda:	42be      	cmp	r6, r7
    afdc:	d302      	bcc.n	afe4 <bt_l2cap_connected+0x18>
}
    afde:	b003      	add	sp, #12
    afe0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    afe4:	6873      	ldr	r3, [r6, #4]
    afe6:	a901      	add	r1, sp, #4
    afe8:	4620      	mov	r0, r4
    afea:	4798      	blx	r3
    afec:	2800      	cmp	r0, #0
    afee:	db3d      	blt.n	b06c <bt_l2cap_connected+0xa0>
		ch = BT_L2CAP_LE_CHAN(chan);
    aff0:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
    aff2:	8833      	ldrh	r3, [r6, #0]
    aff4:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
		ch->tx.cid = fchan->cid;
    aff8:	f8a5 3054 	strh.w	r3, [r5, #84]	; 0x54
    affc:	4641      	mov	r1, r8
    affe:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    b002:	f8d6 9008 	ldr.w	r9, [r6, #8]
    b006:	f01e fe15 	bl	29c34 <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    b00a:	f3bf 8f5b 	dmb	ish
    b00e:	f105 0340 	add.w	r3, r5, #64	; 0x40
    b012:	2200      	movs	r2, #0
    b014:	e853 1f00 	ldrex	r1, [r3]
    b018:	e843 2000 	strex	r0, r2, [r3]
    b01c:	2800      	cmp	r0, #0
    b01e:	d1f9      	bne.n	b014 <bt_l2cap_connected+0x48>
    b020:	f3bf 8f5b 	dmb	ish
	parent->next = child;
    b024:	60aa      	str	r2, [r5, #8]
Z_GENLIST_APPEND(slist, snode)
    b026:	6d62      	ldr	r2, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
    b028:	f105 0308 	add.w	r3, r5, #8
    b02c:	bb02      	cbnz	r2, b070 <bt_l2cap_connected+0xa4>
	list->head = node;
    b02e:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (chan->ops->connected) {
    b032:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    b034:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
    b036:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    b038:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
    b03c:	681b      	ldr	r3, [r3, #0]
    b03e:	b103      	cbz	r3, b042 <bt_l2cap_connected+0x76>
			chan->ops->connected(chan);
    b040:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b042:	9b01      	ldr	r3, [sp, #4]
    b044:	f3bf 8f5b 	dmb	ish
    b048:	3340      	adds	r3, #64	; 0x40
    b04a:	e853 2f00 	ldrex	r2, [r3]
    b04e:	f042 0201 	orr.w	r2, r2, #1
    b052:	e843 2100 	strex	r1, r2, [r3]
    b056:	2900      	cmp	r1, #0
    b058:	d1f7      	bne.n	b04a <bt_l2cap_connected+0x7e>
    b05a:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
    b05e:	9801      	ldr	r0, [sp, #4]
    b060:	6843      	ldr	r3, [r0, #4]
    b062:	699b      	ldr	r3, [r3, #24]
    b064:	b113      	cbz	r3, b06c <bt_l2cap_connected+0xa0>
			chan->ops->status(chan, chan->status);
    b066:	f100 0140 	add.w	r1, r0, #64	; 0x40
    b06a:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    b06c:	360c      	adds	r6, #12
    b06e:	e7b4      	b.n	afda <bt_l2cap_connected+0xe>
	parent->next = child;
    b070:	6013      	str	r3, [r2, #0]
	list->tail = node;
    b072:	6563      	str	r3, [r4, #84]	; 0x54
}
    b074:	e7dd      	b.n	b032 <bt_l2cap_connected+0x66>
    b076:	bf00      	nop
    b078:	0002a68c 	.word	0x0002a68c
    b07c:	0002a6b0 	.word	0x0002a6b0
    b080:	0000af79 	.word	0x0000af79

0000b084 <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
    b084:	898b      	ldrh	r3, [r1, #12]
    b086:	2b03      	cmp	r3, #3
{
    b088:	b573      	push	{r0, r1, r4, r5, r6, lr}
    b08a:	4606      	mov	r6, r0
    b08c:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    b08e:	d813      	bhi.n	b0b8 <l2cap_recv+0x34>
    b090:	f01c fabe 	bl	27610 <arch_is_user_context>
    b094:	4b43      	ldr	r3, [pc, #268]	; (b1a4 <l2cap_recv+0x120>)
    b096:	4a44      	ldr	r2, [pc, #272]	; (b1a8 <l2cap_recv+0x124>)
    b098:	1a9b      	subs	r3, r3, r2
    b09a:	08db      	lsrs	r3, r3, #3
		BT_ERR("Too small L2CAP signaling PDU");
    b09c:	019b      	lsls	r3, r3, #6
    b09e:	f043 0301 	orr.w	r3, r3, #1
    b0a2:	b120      	cbz	r0, b0ae <l2cap_recv+0x2a>
    b0a4:	4941      	ldr	r1, [pc, #260]	; (b1ac <l2cap_recv+0x128>)
		BT_ERR("Invalid ident value in L2CAP PDU");
    b0a6:	4618      	mov	r0, r3
    b0a8:	f019 fef5 	bl	24e96 <log_from_user>
    b0ac:	e01f      	b.n	b0ee <l2cap_recv+0x6a>
		BT_ERR("Too small L2CAP signaling PDU");
    b0ae:	483f      	ldr	r0, [pc, #252]	; (b1ac <l2cap_recv+0x128>)
    b0b0:	4619      	mov	r1, r3
		BT_ERR("Too small LE conn param rsp");
    b0b2:	f019 ff16 	bl	24ee2 <log_0>
		return;
    b0b6:	e01a      	b.n	b0ee <l2cap_recv+0x6a>
	return net_buf_simple_pull_mem(&buf->b, len);
    b0b8:	2104      	movs	r1, #4
    b0ba:	f105 0008 	add.w	r0, r5, #8
    b0be:	f01d fe19 	bl	28cf4 <net_buf_simple_pull_mem>
	if (buf->len != len) {
    b0c2:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
    b0c4:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
    b0c6:	429a      	cmp	r2, r3
    b0c8:	4604      	mov	r4, r0
    b0ca:	d018      	beq.n	b0fe <l2cap_recv+0x7a>
    b0cc:	f01c faa0 	bl	27610 <arch_is_user_context>
    b0d0:	4c34      	ldr	r4, [pc, #208]	; (b1a4 <l2cap_recv+0x120>)
    b0d2:	4b35      	ldr	r3, [pc, #212]	; (b1a8 <l2cap_recv+0x124>)
    b0d4:	89a9      	ldrh	r1, [r5, #12]
    b0d6:	1ae4      	subs	r4, r4, r3
    b0d8:	08e4      	lsrs	r4, r4, #3
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    b0da:	01a4      	lsls	r4, r4, #6
    b0dc:	f044 0401 	orr.w	r4, r4, #1
    b0e0:	b140      	cbz	r0, b0f4 <l2cap_recv+0x70>
    b0e2:	4613      	mov	r3, r2
    b0e4:	4620      	mov	r0, r4
    b0e6:	460a      	mov	r2, r1
    b0e8:	4931      	ldr	r1, [pc, #196]	; (b1b0 <l2cap_recv+0x12c>)
    b0ea:	f019 fed4 	bl	24e96 <log_from_user>
}
    b0ee:	2000      	movs	r0, #0
    b0f0:	b002      	add	sp, #8
    b0f2:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    b0f4:	482e      	ldr	r0, [pc, #184]	; (b1b0 <l2cap_recv+0x12c>)
    b0f6:	4623      	mov	r3, r4
    b0f8:	f019 ff14 	bl	24f24 <log_2>
		return 0;
    b0fc:	e7f7      	b.n	b0ee <l2cap_recv+0x6a>
	if (!hdr->ident) {
    b0fe:	7843      	ldrb	r3, [r0, #1]
    b100:	b973      	cbnz	r3, b120 <l2cap_recv+0x9c>
    b102:	f01c fa85 	bl	27610 <arch_is_user_context>
    b106:	4b27      	ldr	r3, [pc, #156]	; (b1a4 <l2cap_recv+0x120>)
    b108:	4a27      	ldr	r2, [pc, #156]	; (b1a8 <l2cap_recv+0x124>)
    b10a:	1a9b      	subs	r3, r3, r2
    b10c:	08db      	lsrs	r3, r3, #3
		BT_ERR("Invalid ident value in L2CAP PDU");
    b10e:	019b      	lsls	r3, r3, #6
    b110:	f043 0301 	orr.w	r3, r3, #1
    b114:	b108      	cbz	r0, b11a <l2cap_recv+0x96>
    b116:	4927      	ldr	r1, [pc, #156]	; (b1b4 <l2cap_recv+0x130>)
    b118:	e7c5      	b.n	b0a6 <l2cap_recv+0x22>
    b11a:	4826      	ldr	r0, [pc, #152]	; (b1b4 <l2cap_recv+0x130>)
    b11c:	4619      	mov	r1, r3
    b11e:	e7c8      	b.n	b0b2 <l2cap_recv+0x2e>
	switch (hdr->code) {
    b120:	7803      	ldrb	r3, [r0, #0]
    b122:	2b01      	cmp	r3, #1
    b124:	d0e3      	beq.n	b0ee <l2cap_recv+0x6a>
    b126:	2b13      	cmp	r3, #19
    b128:	d110      	bne.n	b14c <l2cap_recv+0xc8>
	if (buf->len < sizeof(*rsp)) {
    b12a:	2a01      	cmp	r2, #1
    b12c:	d8df      	bhi.n	b0ee <l2cap_recv+0x6a>
    b12e:	f01c fa6f 	bl	27610 <arch_is_user_context>
    b132:	4b1c      	ldr	r3, [pc, #112]	; (b1a4 <l2cap_recv+0x120>)
    b134:	4a1c      	ldr	r2, [pc, #112]	; (b1a8 <l2cap_recv+0x124>)
    b136:	1a9b      	subs	r3, r3, r2
    b138:	08db      	lsrs	r3, r3, #3
		BT_ERR("Too small LE conn param rsp");
    b13a:	019b      	lsls	r3, r3, #6
    b13c:	f043 0301 	orr.w	r3, r3, #1
    b140:	b108      	cbz	r0, b146 <l2cap_recv+0xc2>
    b142:	491d      	ldr	r1, [pc, #116]	; (b1b8 <l2cap_recv+0x134>)
    b144:	e7af      	b.n	b0a6 <l2cap_recv+0x22>
    b146:	481c      	ldr	r0, [pc, #112]	; (b1b8 <l2cap_recv+0x134>)
    b148:	4619      	mov	r1, r3
    b14a:	e7b2      	b.n	b0b2 <l2cap_recv+0x2e>
    b14c:	f01c fa60 	bl	27610 <arch_is_user_context>
    b150:	4b14      	ldr	r3, [pc, #80]	; (b1a4 <l2cap_recv+0x120>)
    b152:	4a15      	ldr	r2, [pc, #84]	; (b1a8 <l2cap_recv+0x124>)
    b154:	7821      	ldrb	r1, [r4, #0]
    b156:	1a9b      	subs	r3, r3, r2
    b158:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    b15a:	019b      	lsls	r3, r3, #6
    b15c:	f043 0302 	orr.w	r3, r3, #2
    b160:	b1d8      	cbz	r0, b19a <l2cap_recv+0x116>
    b162:	460a      	mov	r2, r1
    b164:	4618      	mov	r0, r3
    b166:	4915      	ldr	r1, [pc, #84]	; (b1bc <l2cap_recv+0x138>)
    b168:	f019 fe95 	bl	24e96 <log_from_user>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    b16c:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
    b16e:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    b170:	2202      	movs	r2, #2
    b172:	2001      	movs	r0, #1
    b174:	f7ff fece 	bl	af14 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    b178:	4604      	mov	r4, r0
    b17a:	2800      	cmp	r0, #0
    b17c:	d0b7      	beq.n	b0ee <l2cap_recv+0x6a>
	return net_buf_simple_add(&buf->b, len);
    b17e:	2102      	movs	r1, #2
    b180:	3008      	adds	r0, #8
    b182:	f01d fd8f 	bl	28ca4 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    b186:	2300      	movs	r3, #0
    b188:	7003      	strb	r3, [r0, #0]
    b18a:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    b18c:	4622      	mov	r2, r4
    b18e:	9300      	str	r3, [sp, #0]
    b190:	2105      	movs	r1, #5
    b192:	4628      	mov	r0, r5
    b194:	f01c fab2 	bl	276fc <bt_l2cap_send_cb>
}
    b198:	e7a9      	b.n	b0ee <l2cap_recv+0x6a>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    b19a:	4808      	ldr	r0, [pc, #32]	; (b1bc <l2cap_recv+0x138>)
    b19c:	461a      	mov	r2, r3
    b19e:	f019 fead 	bl	24efc <log_1>
    b1a2:	e7e3      	b.n	b16c <l2cap_recv+0xe8>
    b1a4:	0002a7c8 	.word	0x0002a7c8
    b1a8:	0002a6d0 	.word	0x0002a6d0
    b1ac:	0002dfaa 	.word	0x0002dfaa
    b1b0:	0002dfc8 	.word	0x0002dfc8
    b1b4:	0002dfe9 	.word	0x0002dfe9
    b1b8:	0002e00a 	.word	0x0002e00a
    b1bc:	0002e026 	.word	0x0002e026

0000b1c0 <bt_l2cap_recv>:
{
    b1c0:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
    b1c2:	898b      	ldrh	r3, [r1, #12]
    b1c4:	2b03      	cmp	r3, #3
{
    b1c6:	4605      	mov	r5, r0
    b1c8:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    b1ca:	d817      	bhi.n	b1fc <bt_l2cap_recv+0x3c>
    b1cc:	f01c fa20 	bl	27610 <arch_is_user_context>
    b1d0:	4b1c      	ldr	r3, [pc, #112]	; (b244 <bt_l2cap_recv+0x84>)
    b1d2:	4a1d      	ldr	r2, [pc, #116]	; (b248 <bt_l2cap_recv+0x88>)
    b1d4:	1a9b      	subs	r3, r3, r2
    b1d6:	08db      	lsrs	r3, r3, #3
		BT_ERR("Too small L2CAP PDU received");
    b1d8:	019b      	lsls	r3, r3, #6
    b1da:	f043 0301 	orr.w	r3, r3, #1
    b1de:	b140      	cbz	r0, b1f2 <bt_l2cap_recv+0x32>
    b1e0:	491a      	ldr	r1, [pc, #104]	; (b24c <bt_l2cap_recv+0x8c>)
    b1e2:	4618      	mov	r0, r3
    b1e4:	f019 fe57 	bl	24e96 <log_from_user>
	net_buf_unref(buf);
    b1e8:	4620      	mov	r0, r4
}
    b1ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
    b1ee:	f011 bb03 	b.w	1c7f8 <net_buf_unref>
		BT_ERR("Too small L2CAP PDU received");
    b1f2:	4816      	ldr	r0, [pc, #88]	; (b24c <bt_l2cap_recv+0x8c>)
    b1f4:	4619      	mov	r1, r3
    b1f6:	f019 fe74 	bl	24ee2 <log_0>
		net_buf_unref(buf);
    b1fa:	e7f5      	b.n	b1e8 <bt_l2cap_recv+0x28>
	return net_buf_simple_pull_mem(&buf->b, len);
    b1fc:	2104      	movs	r1, #4
    b1fe:	f104 0008 	add.w	r0, r4, #8
    b202:	f01d fd77 	bl	28cf4 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
    b206:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    b208:	4628      	mov	r0, r5
    b20a:	f01c faa0 	bl	2774e <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    b20e:	b9a0      	cbnz	r0, b23a <bt_l2cap_recv+0x7a>
    b210:	f01c f9fe 	bl	27610 <arch_is_user_context>
    b214:	4b0b      	ldr	r3, [pc, #44]	; (b244 <bt_l2cap_recv+0x84>)
    b216:	4a0c      	ldr	r2, [pc, #48]	; (b248 <bt_l2cap_recv+0x88>)
    b218:	1a9b      	subs	r3, r3, r2
    b21a:	08db      	lsrs	r3, r3, #3
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
    b21c:	019b      	lsls	r3, r3, #6
    b21e:	f043 0302 	orr.w	r3, r3, #2
    b222:	b128      	cbz	r0, b230 <bt_l2cap_recv+0x70>
    b224:	460a      	mov	r2, r1
    b226:	4618      	mov	r0, r3
    b228:	4909      	ldr	r1, [pc, #36]	; (b250 <bt_l2cap_recv+0x90>)
    b22a:	f019 fe34 	bl	24e96 <log_from_user>
    b22e:	e7db      	b.n	b1e8 <bt_l2cap_recv+0x28>
    b230:	4807      	ldr	r0, [pc, #28]	; (b250 <bt_l2cap_recv+0x90>)
    b232:	461a      	mov	r2, r3
    b234:	f019 fe62 	bl	24efc <log_1>
		net_buf_unref(buf);
    b238:	e7d6      	b.n	b1e8 <bt_l2cap_recv+0x28>
	chan->ops->recv(chan, buf);
    b23a:	6843      	ldr	r3, [r0, #4]
    b23c:	4621      	mov	r1, r4
    b23e:	691b      	ldr	r3, [r3, #16]
    b240:	4798      	blx	r3
    b242:	e7d1      	b.n	b1e8 <bt_l2cap_recv+0x28>
    b244:	0002a7c8 	.word	0x0002a7c8
    b248:	0002a6d0 	.word	0x0002a6d0
    b24c:	0002e044 	.word	0x0002e044
    b250:	0002e061 	.word	0x0002e061

0000b254 <bt_l2cap_update_conn_param>:
{
    b254:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
    b256:	4b15      	ldr	r3, [pc, #84]	; (b2ac <bt_l2cap_update_conn_param+0x58>)
    b258:	781a      	ldrb	r2, [r3, #0]
    b25a:	3201      	adds	r2, #1
	if (!ident) {
    b25c:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    b260:	bf08      	it	eq
    b262:	2201      	moveq	r2, #1
    b264:	701a      	strb	r2, [r3, #0]
{
    b266:	4605      	mov	r5, r0
    b268:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    b26a:	2208      	movs	r2, #8
    b26c:	7819      	ldrb	r1, [r3, #0]
    b26e:	2012      	movs	r0, #18
    b270:	f7ff fe50 	bl	af14 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    b274:	4606      	mov	r6, r0
    b276:	b1b0      	cbz	r0, b2a6 <bt_l2cap_update_conn_param+0x52>
	return net_buf_simple_add(&buf->b, len);
    b278:	2108      	movs	r1, #8
    b27a:	4408      	add	r0, r1
    b27c:	f01d fd12 	bl	28ca4 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    b280:	8822      	ldrh	r2, [r4, #0]
    b282:	8002      	strh	r2, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    b284:	8862      	ldrh	r2, [r4, #2]
    b286:	8042      	strh	r2, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    b288:	88a2      	ldrh	r2, [r4, #4]
    b28a:	8082      	strh	r2, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    b28c:	88e2      	ldrh	r2, [r4, #6]
    b28e:	80c2      	strh	r2, [r0, #6]
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    b290:	2400      	movs	r4, #0
    b292:	9400      	str	r4, [sp, #0]
    b294:	4623      	mov	r3, r4
    b296:	4632      	mov	r2, r6
    b298:	2105      	movs	r1, #5
    b29a:	4628      	mov	r0, r5
    b29c:	f01c fa2e 	bl	276fc <bt_l2cap_send_cb>
	return 0;
    b2a0:	4620      	mov	r0, r4
}
    b2a2:	b002      	add	sp, #8
    b2a4:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    b2a6:	f06f 000b 	mvn.w	r0, #11
    b2aa:	e7fa      	b.n	b2a2 <bt_l2cap_update_conn_param+0x4e>
    b2ac:	20002a93 	.word	0x20002a93

0000b2b0 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
    b2b0:	4b02      	ldr	r3, [pc, #8]	; (b2bc <att_cfm_sent+0xc>)
    b2b2:	f8c1 3110 	str.w	r3, [r1, #272]	; 0x110

	att_sent(conn, user_data);
    b2b6:	f01c ba92 	b.w	277de <att_sent>
    b2ba:	bf00      	nop
    b2bc:	00027afd 	.word	0x00027afd

0000b2c0 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
    b2c0:	4b02      	ldr	r3, [pc, #8]	; (b2cc <att_rsp_sent+0xc>)
    b2c2:	f8c1 3110 	str.w	r3, [r1, #272]	; 0x110

	att_sent(conn, user_data);
    b2c6:	f01c ba8a 	b.w	277de <att_sent>
    b2ca:	bf00      	nop
    b2cc:	00027ae1 	.word	0x00027ae1

0000b2d0 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
    b2d0:	4b02      	ldr	r3, [pc, #8]	; (b2dc <att_req_sent+0xc>)
    b2d2:	f8c1 3110 	str.w	r3, [r1, #272]	; 0x110

	att_sent(conn, user_data);
    b2d6:	f01c ba82 	b.w	277de <att_sent>
    b2da:	bf00      	nop
    b2dc:	0000b7a5 	.word	0x0000b7a5

0000b2e0 <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
    b2e0:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
    b2e2:	7b43      	ldrb	r3, [r0, #13]
    b2e4:	2b07      	cmp	r3, #7
    b2e6:	d014      	beq.n	b312 <att_get+0x32>
    b2e8:	f01c fa67 	bl	277ba <arch_is_user_context>
    b2ec:	4b23      	ldr	r3, [pc, #140]	; (b37c <att_get+0x9c>)
    b2ee:	4a24      	ldr	r2, [pc, #144]	; (b380 <att_get+0xa0>)
    b2f0:	1a9b      	subs	r3, r3, r2
    b2f2:	08db      	lsrs	r3, r3, #3
		BT_WARN("Not connected");
    b2f4:	019b      	lsls	r3, r3, #6
    b2f6:	f043 0302 	orr.w	r3, r3, #2
    b2fa:	b128      	cbz	r0, b308 <att_get+0x28>
    b2fc:	4921      	ldr	r1, [pc, #132]	; (b384 <att_get+0xa4>)
		return NULL;
	}

	att_chan = ATT_CHAN(chan);
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
		BT_WARN("ATT channel flagged as disconnected");
    b2fe:	4618      	mov	r0, r3
    b300:	f019 fdc9 	bl	24e96 <log_from_user>
		return NULL;
    b304:	2400      	movs	r4, #0
    b306:	e017      	b.n	b338 <att_get+0x58>
		BT_WARN("Not connected");
    b308:	481e      	ldr	r0, [pc, #120]	; (b384 <att_get+0xa4>)
    b30a:	4619      	mov	r1, r3
		BT_WARN("ATT channel flagged as disconnected");
    b30c:	f019 fde9 	bl	24ee2 <log_0>
    b310:	e7f8      	b.n	b304 <att_get+0x24>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    b312:	2104      	movs	r1, #4
    b314:	f01c fa1b 	bl	2774e <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    b318:	4604      	mov	r4, r0
    b31a:	b9a0      	cbnz	r0, b346 <att_get+0x66>
    b31c:	f01c fa4d 	bl	277ba <arch_is_user_context>
    b320:	4b16      	ldr	r3, [pc, #88]	; (b37c <att_get+0x9c>)
    b322:	4a17      	ldr	r2, [pc, #92]	; (b380 <att_get+0xa0>)
    b324:	1a9b      	subs	r3, r3, r2
    b326:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to find ATT channel");
    b328:	019b      	lsls	r3, r3, #6
    b32a:	f043 0301 	orr.w	r3, r3, #1
    b32e:	b128      	cbz	r0, b33c <att_get+0x5c>
    b330:	4915      	ldr	r1, [pc, #84]	; (b388 <att_get+0xa8>)
    b332:	4618      	mov	r0, r3
    b334:	f019 fdaf 	bl	24e96 <log_from_user>
	}

	return att_chan->att;
}
    b338:	4620      	mov	r0, r4
    b33a:	bd10      	pop	{r4, pc}
		BT_ERR("Unable to find ATT channel");
    b33c:	4812      	ldr	r0, [pc, #72]	; (b388 <att_get+0xa8>)
    b33e:	4619      	mov	r1, r3
    b340:	f019 fdcf 	bl	24ee2 <log_0>
		return NULL;
    b344:	e7f8      	b.n	b338 <att_get+0x58>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b346:	f3bf 8f5b 	dmb	ish
    b34a:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
    b34e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
    b352:	075b      	lsls	r3, r3, #29
    b354:	d50e      	bpl.n	b374 <att_get+0x94>
    b356:	f01c fa30 	bl	277ba <arch_is_user_context>
    b35a:	4b08      	ldr	r3, [pc, #32]	; (b37c <att_get+0x9c>)
    b35c:	4a08      	ldr	r2, [pc, #32]	; (b380 <att_get+0xa0>)
    b35e:	1a9b      	subs	r3, r3, r2
    b360:	08db      	lsrs	r3, r3, #3
		BT_WARN("ATT channel flagged as disconnected");
    b362:	019b      	lsls	r3, r3, #6
    b364:	f043 0302 	orr.w	r3, r3, #2
    b368:	b108      	cbz	r0, b36e <att_get+0x8e>
    b36a:	4908      	ldr	r1, [pc, #32]	; (b38c <att_get+0xac>)
    b36c:	e7c7      	b.n	b2fe <att_get+0x1e>
    b36e:	4807      	ldr	r0, [pc, #28]	; (b38c <att_get+0xac>)
    b370:	4619      	mov	r1, r3
    b372:	e7cb      	b.n	b30c <att_get+0x2c>
	return att_chan->att;
    b374:	f850 4c08 	ldr.w	r4, [r0, #-8]
    b378:	e7de      	b.n	b338 <att_get+0x58>
    b37a:	bf00      	nop
    b37c:	0002a6d8 	.word	0x0002a6d8
    b380:	0002a6d0 	.word	0x0002a6d0
    b384:	0002e096 	.word	0x0002e096
    b388:	0002e0a4 	.word	0x0002e0a4
    b38c:	0002e0bf 	.word	0x0002e0bf

0000b390 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
    b390:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
    b392:	3808      	subs	r0, #8
    b394:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
    b396:	a901      	add	r1, sp, #4
    b398:	4802      	ldr	r0, [pc, #8]	; (b3a4 <bt_att_released+0x14>)
    b39a:	f015 fbed 	bl	20b78 <k_mem_slab_free>
}
    b39e:	b003      	add	sp, #12
    b3a0:	f85d fb04 	ldr.w	pc, [sp], #4
    b3a4:	20007e14 	.word	0x20007e14

0000b3a8 <read_group_cb>:
{
    b3a8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    b3ac:	4606      	mov	r6, r0
    b3ae:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    b3b0:	f04f 0800 	mov.w	r8, #0
    b3b4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    b3b8:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
    b3ba:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    b3bc:	f88d 8008 	strb.w	r8, [sp, #8]
    b3c0:	a902      	add	r1, sp, #8
{
    b3c2:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    b3c4:	f8ad 300a 	strh.w	r3, [sp, #10]
    b3c8:	f01b fc31 	bl	26c2e <bt_uuid_cmp>
    b3cc:	b1a0      	cbz	r0, b3f8 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    b3ce:	f642 0301 	movw	r3, #10241	; 0x2801
    b3d2:	6830      	ldr	r0, [r6, #0]
    b3d4:	f88d 800c 	strb.w	r8, [sp, #12]
    b3d8:	a903      	add	r1, sp, #12
    b3da:	f8ad 300e 	strh.w	r3, [sp, #14]
    b3de:	f01b fc26 	bl	26c2e <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    b3e2:	b148      	cbz	r0, b3f8 <read_group_cb+0x50>
		if (data->group &&
    b3e4:	6923      	ldr	r3, [r4, #16]
    b3e6:	b11b      	cbz	r3, b3f0 <read_group_cb+0x48>
    b3e8:	885a      	ldrh	r2, [r3, #2]
    b3ea:	42aa      	cmp	r2, r5
    b3ec:	d200      	bcs.n	b3f0 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
    b3ee:	805d      	strh	r5, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    b3f0:	2001      	movs	r0, #1
}
    b3f2:	b004      	add	sp, #16
    b3f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    b3f8:	6861      	ldr	r1, [r4, #4]
    b3fa:	6830      	ldr	r0, [r6, #0]
    b3fc:	f01b fc17 	bl	26c2e <bt_uuid_cmp>
    b400:	b110      	cbz	r0, b408 <read_group_cb+0x60>
		data->group = NULL;
    b402:	2300      	movs	r3, #0
    b404:	6123      	str	r3, [r4, #16]
    b406:	e7f3      	b.n	b3f0 <read_group_cb+0x48>
	if (data->rsp->len &&
    b408:	68e3      	ldr	r3, [r4, #12]
    b40a:	68a0      	ldr	r0, [r4, #8]
    b40c:	781a      	ldrb	r2, [r3, #0]
    b40e:	b13a      	cbz	r2, b420 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    b410:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
    b414:	8981      	ldrh	r1, [r0, #12]
    b416:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    b418:	4293      	cmp	r3, r2
    b41a:	da01      	bge.n	b420 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
    b41c:	2000      	movs	r0, #0
    b41e:	e7e8      	b.n	b3f2 <read_group_cb+0x4a>
    b420:	2104      	movs	r1, #4
    b422:	3008      	adds	r0, #8
    b424:	f01d fc3e 	bl	28ca4 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    b428:	4b09      	ldr	r3, [pc, #36]	; (b450 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    b42a:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    b42c:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    b42e:	8005      	strh	r5, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    b430:	8045      	strh	r5, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    b432:	4631      	mov	r1, r6
    b434:	9300      	str	r3, [sp, #0]
    b436:	9401      	str	r4, [sp, #4]
    b438:	2300      	movs	r3, #0
    b43a:	4638      	mov	r0, r7
    b43c:	f01c fa1f 	bl	2787e <att_chan_read>
	if (read < 0) {
    b440:	2800      	cmp	r0, #0
    b442:	dbeb      	blt.n	b41c <read_group_cb+0x74>
	if (!data->group) {
    b444:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    b446:	3800      	subs	r0, #0
    b448:	bf18      	it	ne
    b44a:	2001      	movne	r0, #1
    b44c:	e7d1      	b.n	b3f2 <read_group_cb+0x4a>
    b44e:	bf00      	nop
    b450:	00027995 	.word	0x00027995

0000b454 <read_type_cb>:
{
    b454:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
    b458:	f8d2 8000 	ldr.w	r8, [r2]
{
    b45c:	4606      	mov	r6, r0
    b45e:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    b460:	6800      	ldr	r0, [r0, #0]
    b462:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
    b464:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
    b468:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    b46a:	f01b fbe0 	bl	26c2e <bt_uuid_cmp>
    b46e:	4607      	mov	r7, r0
    b470:	2800      	cmp	r0, #0
    b472:	d13e      	bne.n	b4f2 <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    b474:	4628      	mov	r0, r5
    b476:	2215      	movs	r2, #21
    b478:	4631      	mov	r1, r6
    b47a:	f01c ff35 	bl	282e8 <bt_gatt_check_perm>
    b47e:	4605      	mov	r5, r0
    b480:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    b482:	b148      	cbz	r0, b498 <read_type_cb+0x44>
		if (data->rsp->len) {
    b484:	68e3      	ldr	r3, [r4, #12]
    b486:	781b      	ldrb	r3, [r3, #0]
    b488:	b923      	cbnz	r3, b494 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
    b48a:	2500      	movs	r5, #0
}
    b48c:	4628      	mov	r0, r5
    b48e:	b003      	add	sp, #12
    b490:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
    b494:	7527      	strb	r7, [r4, #20]
    b496:	e7f8      	b.n	b48a <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    b498:	68a0      	ldr	r0, [r4, #8]
    b49a:	f01d fbe1 	bl	28c60 <net_buf_frag_last>
    b49e:	2102      	movs	r1, #2
    b4a0:	3008      	adds	r0, #8
    b4a2:	f01d fbff 	bl	28ca4 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    b4a6:	4b14      	ldr	r3, [pc, #80]	; (b4f8 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    b4a8:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    b4aa:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
    b4ac:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    b4b0:	4631      	mov	r1, r6
    b4b2:	9300      	str	r3, [sp, #0]
    b4b4:	9401      	str	r4, [sp, #4]
    b4b6:	462b      	mov	r3, r5
    b4b8:	4640      	mov	r0, r8
    b4ba:	f01c f9e0 	bl	2787e <att_chan_read>
	if (read < 0) {
    b4be:	2800      	cmp	r0, #0
    b4c0:	da07      	bge.n	b4d2 <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
    b4c2:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    b4c6:	bf26      	itte	cs
    b4c8:	4240      	negcs	r0, r0
    b4ca:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    b4cc:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
    b4ce:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    b4d0:	e7dc      	b.n	b48c <read_type_cb+0x38>
	if (!data->item) {
    b4d2:	6923      	ldr	r3, [r4, #16]
    b4d4:	2b00      	cmp	r3, #0
    b4d6:	d0d8      	beq.n	b48a <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    b4d8:	68a0      	ldr	r0, [r4, #8]
    b4da:	f01c f978 	bl	277ce <net_buf_frags_len>
    b4de:	f8b8 505e 	ldrh.w	r5, [r8, #94]	; 0x5e
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    b4e2:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    b4e4:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    b4e6:	7818      	ldrb	r0, [r3, #0]
    b4e8:	4285      	cmp	r5, r0
    b4ea:	bf94      	ite	ls
    b4ec:	2500      	movls	r5, #0
    b4ee:	2501      	movhi	r5, #1
    b4f0:	e7cc      	b.n	b48c <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
    b4f2:	2501      	movs	r5, #1
    b4f4:	e7ca      	b.n	b48c <read_type_cb+0x38>
    b4f6:	bf00      	nop
    b4f8:	000277eb 	.word	0x000277eb

0000b4fc <find_type_cb>:
{
    b4fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
    b500:	f8d2 9000 	ldr.w	r9, [r2]
{
    b504:	b091      	sub	sp, #68	; 0x44
    b506:	4607      	mov	r7, r0
    b508:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    b50a:	2500      	movs	r5, #0
    b50c:	f642 0301 	movw	r3, #10241	; 0x2801
    b510:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
    b512:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    b516:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    b51a:	a90b      	add	r1, sp, #44	; 0x2c
{
    b51c:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    b51e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    b522:	f01b fb84 	bl	26c2e <bt_uuid_cmp>
    b526:	2800      	cmp	r0, #0
    b528:	d06b      	beq.n	b602 <find_type_cb+0x106>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    b52a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    b52e:	6838      	ldr	r0, [r7, #0]
    b530:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    b534:	a90b      	add	r1, sp, #44	; 0x2c
    b536:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    b53a:	f01b fb78 	bl	26c2e <bt_uuid_cmp>
    b53e:	b138      	cbz	r0, b550 <find_type_cb+0x54>
		if (data->group &&
    b540:	68a3      	ldr	r3, [r4, #8]
    b542:	b11b      	cbz	r3, b54c <find_type_cb+0x50>
    b544:	885a      	ldrh	r2, [r3, #2]
    b546:	42b2      	cmp	r2, r6
    b548:	d200      	bcs.n	b54c <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
    b54a:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
    b54c:	2001      	movs	r0, #1
    b54e:	e009      	b.n	b564 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
    b550:	6861      	ldr	r1, [r4, #4]
    b552:	4608      	mov	r0, r1
    b554:	f01c f93b 	bl	277ce <net_buf_frags_len>
    b558:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
    b55c:	1a1b      	subs	r3, r3, r0
    b55e:	2b03      	cmp	r3, #3
    b560:	d803      	bhi.n	b56a <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
    b562:	2000      	movs	r0, #0
}
    b564:	b011      	add	sp, #68	; 0x44
    b566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
    b56a:	4608      	mov	r0, r1
    b56c:	f01d fb78 	bl	28c60 <net_buf_frag_last>
    b570:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
    b572:	6860      	ldr	r0, [r4, #4]
    b574:	f01c f92b 	bl	277ce <net_buf_frags_len>
    b578:	f8b9 a05e 	ldrh.w	sl, [r9, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
    b57c:	f105 0b08 	add.w	fp, r5, #8
    b580:	ebaa 0a00 	sub.w	sl, sl, r0
    b584:	4658      	mov	r0, fp
    b586:	f01d fbc9 	bl	28d1c <net_buf_simple_tailroom>
    b58a:	4582      	cmp	sl, r0
    b58c:	d23c      	bcs.n	b608 <find_type_cb+0x10c>
    b58e:	6860      	ldr	r0, [r4, #4]
    b590:	f01c f91d 	bl	277ce <net_buf_frags_len>
    b594:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
    b598:	1a18      	subs	r0, r3, r0
	if (!len) {
    b59a:	b970      	cbnz	r0, b5ba <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
    b59c:	6863      	ldr	r3, [r4, #4]
    b59e:	7998      	ldrb	r0, [r3, #6]
    b5a0:	f011 f86e 	bl	1c680 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
    b5a4:	2200      	movs	r2, #0
    b5a6:	2300      	movs	r3, #0
    b5a8:	f01d fb26 	bl	28bf8 <net_buf_alloc_fixed>
		if (!frag) {
    b5ac:	4605      	mov	r5, r0
    b5ae:	2800      	cmp	r0, #0
    b5b0:	d0d7      	beq.n	b562 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
    b5b2:	4601      	mov	r1, r0
    b5b4:	6860      	ldr	r0, [r4, #4]
    b5b6:	f01d fb64 	bl	28c82 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    b5ba:	2300      	movs	r3, #0
    b5bc:	9300      	str	r3, [sp, #0]
    b5be:	f8d7 9004 	ldr.w	r9, [r7, #4]
    b5c2:	4639      	mov	r1, r7
    b5c4:	2310      	movs	r3, #16
    b5c6:	aa02      	add	r2, sp, #8
    b5c8:	4640      	mov	r0, r8
    b5ca:	47c8      	blx	r9
	if (read < 0) {
    b5cc:	1e07      	subs	r7, r0, #0
    b5ce:	db18      	blt.n	b602 <find_type_cb+0x106>
	if (read != data->value_len) {
    b5d0:	7c22      	ldrb	r2, [r4, #16]
    b5d2:	68e0      	ldr	r0, [r4, #12]
    b5d4:	42ba      	cmp	r2, r7
    b5d6:	d048      	beq.n	b66a <find_type_cb+0x16e>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    b5d8:	4601      	mov	r1, r0
    b5da:	a80b      	add	r0, sp, #44	; 0x2c
    b5dc:	f01b fb51 	bl	26c82 <bt_uuid_create>
    b5e0:	b9d8      	cbnz	r0, b61a <find_type_cb+0x11e>
    b5e2:	f01c f8ea 	bl	277ba <arch_is_user_context>
    b5e6:	4b23      	ldr	r3, [pc, #140]	; (b674 <find_type_cb+0x178>)
    b5e8:	4a23      	ldr	r2, [pc, #140]	; (b678 <find_type_cb+0x17c>)
    b5ea:	7c21      	ldrb	r1, [r4, #16]
    b5ec:	1a9b      	subs	r3, r3, r2
    b5ee:	08db      	lsrs	r3, r3, #3
			BT_WARN("Unable to create UUID: size %u", data->value_len);
    b5f0:	019b      	lsls	r3, r3, #6
    b5f2:	f043 0302 	orr.w	r3, r3, #2
    b5f6:	b158      	cbz	r0, b610 <find_type_cb+0x114>
    b5f8:	460a      	mov	r2, r1
    b5fa:	4920      	ldr	r1, [pc, #128]	; (b67c <find_type_cb+0x180>)
			BT_WARN("Unable to create UUID: size %d", read);
    b5fc:	4618      	mov	r0, r3
    b5fe:	f019 fc4a 	bl	24e96 <log_from_user>
	data->group = NULL;
    b602:	2300      	movs	r3, #0
    b604:	60a3      	str	r3, [r4, #8]
    b606:	e7a1      	b.n	b54c <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
    b608:	4658      	mov	r0, fp
    b60a:	f01d fb87 	bl	28d1c <net_buf_simple_tailroom>
    b60e:	e7c4      	b.n	b59a <find_type_cb+0x9e>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
    b610:	481a      	ldr	r0, [pc, #104]	; (b67c <find_type_cb+0x180>)
    b612:	461a      	mov	r2, r3
			BT_WARN("Unable to create UUID: size %d", read);
    b614:	f019 fc72 	bl	24efc <log_1>
			goto skip;
    b618:	e7f3      	b.n	b602 <find_type_cb+0x106>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
    b61a:	b2fa      	uxtb	r2, r7
    b61c:	a902      	add	r1, sp, #8
    b61e:	a806      	add	r0, sp, #24
    b620:	f01b fb2f 	bl	26c82 <bt_uuid_create>
    b624:	b980      	cbnz	r0, b648 <find_type_cb+0x14c>
    b626:	f01c f8c8 	bl	277ba <arch_is_user_context>
    b62a:	4b12      	ldr	r3, [pc, #72]	; (b674 <find_type_cb+0x178>)
    b62c:	4a12      	ldr	r2, [pc, #72]	; (b678 <find_type_cb+0x17c>)
    b62e:	1a9b      	subs	r3, r3, r2
    b630:	08db      	lsrs	r3, r3, #3
			BT_WARN("Unable to create UUID: size %d", read);
    b632:	019b      	lsls	r3, r3, #6
    b634:	f043 0302 	orr.w	r3, r3, #2
    b638:	b110      	cbz	r0, b640 <find_type_cb+0x144>
    b63a:	4911      	ldr	r1, [pc, #68]	; (b680 <find_type_cb+0x184>)
    b63c:	463a      	mov	r2, r7
    b63e:	e7dd      	b.n	b5fc <find_type_cb+0x100>
    b640:	480f      	ldr	r0, [pc, #60]	; (b680 <find_type_cb+0x184>)
    b642:	461a      	mov	r2, r3
    b644:	4639      	mov	r1, r7
    b646:	e7e5      	b.n	b614 <find_type_cb+0x118>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
    b648:	a906      	add	r1, sp, #24
    b64a:	a80b      	add	r0, sp, #44	; 0x2c
    b64c:	f01b faef 	bl	26c2e <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
    b650:	2800      	cmp	r0, #0
    b652:	d1d6      	bne.n	b602 <find_type_cb+0x106>
	data->err = 0x00;
    b654:	2300      	movs	r3, #0
    b656:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
    b658:	2104      	movs	r1, #4
    b65a:	f105 0008 	add.w	r0, r5, #8
    b65e:	f01d fb21 	bl	28ca4 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
    b662:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    b664:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    b666:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
    b668:	e770      	b.n	b54c <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
    b66a:	a902      	add	r1, sp, #8
    b66c:	f01e feaa 	bl	2a3c4 <memcmp>
    b670:	e7ee      	b.n	b650 <find_type_cb+0x154>
    b672:	bf00      	nop
    b674:	0002a6d8 	.word	0x0002a6d8
    b678:	0002a6d0 	.word	0x0002a6d0
    b67c:	0002e0e3 	.word	0x0002e0e3
    b680:	0002e102 	.word	0x0002e102

0000b684 <chan_send>:
{
    b684:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    b688:	688b      	ldr	r3, [r1, #8]
    b68a:	781b      	ldrb	r3, [r3, #0]
    b68c:	2bd2      	cmp	r3, #210	; 0xd2
{
    b68e:	4605      	mov	r5, r0
    b690:	460c      	mov	r4, r1
    b692:	4691      	mov	r9, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    b694:	d11c      	bne.n	b6d0 <chan_send+0x4c>
		err = bt_smp_sign(chan->att->conn, buf);
    b696:	6803      	ldr	r3, [r0, #0]
    b698:	6818      	ldr	r0, [r3, #0]
    b69a:	f01d f9a6 	bl	289ea <bt_smp_sign>
		if (err) {
    b69e:	4606      	mov	r6, r0
    b6a0:	b1b0      	cbz	r0, b6d0 <chan_send+0x4c>
    b6a2:	f01c f88a 	bl	277ba <arch_is_user_context>
    b6a6:	4b2b      	ldr	r3, [pc, #172]	; (b754 <chan_send+0xd0>)
    b6a8:	4a2b      	ldr	r2, [pc, #172]	; (b758 <chan_send+0xd4>)
    b6aa:	1a9b      	subs	r3, r3, r2
    b6ac:	08db      	lsrs	r3, r3, #3
			BT_ERR("Error signing data");
    b6ae:	019b      	lsls	r3, r3, #6
    b6b0:	f043 0301 	orr.w	r3, r3, #1
    b6b4:	b138      	cbz	r0, b6c6 <chan_send+0x42>
    b6b6:	4929      	ldr	r1, [pc, #164]	; (b75c <chan_send+0xd8>)
    b6b8:	4618      	mov	r0, r3
    b6ba:	f019 fbec 	bl	24e96 <log_from_user>
		net_buf_unref(buf);
    b6be:	4620      	mov	r0, r4
    b6c0:	f011 f89a 	bl	1c7f8 <net_buf_unref>
    b6c4:	e03d      	b.n	b742 <chan_send+0xbe>
			BT_ERR("Error signing data");
    b6c6:	4825      	ldr	r0, [pc, #148]	; (b75c <chan_send+0xd8>)
    b6c8:	4619      	mov	r1, r3
    b6ca:	f019 fc0a 	bl	24ee2 <log_0>
			net_buf_unref(buf);
    b6ce:	e7f6      	b.n	b6be <chan_send+0x3a>
	state->offset = net_buf_simple_headroom(buf);
    b6d0:	f104 0008 	add.w	r0, r4, #8
    b6d4:	f01d fb1e 	bl	28d14 <net_buf_simple_headroom>
	state->len = buf->len;
    b6d8:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    b6dc:	4607      	mov	r7, r0
	chan->sent = cb ? cb : chan_cb(buf);
    b6de:	f1b9 0f00 	cmp.w	r9, #0
    b6e2:	d10a      	bne.n	b6fa <chan_send+0x76>
	switch (att_op_get_type(buf->data[0])) {
    b6e4:	68a3      	ldr	r3, [r4, #8]
    b6e6:	7818      	ldrb	r0, [r3, #0]
    b6e8:	f01c f891 	bl	2780e <att_op_get_type>
    b6ec:	1e43      	subs	r3, r0, #1
    b6ee:	b2db      	uxtb	r3, r3
    b6f0:	2b04      	cmp	r3, #4
    b6f2:	bf9c      	itt	ls
    b6f4:	4a1a      	ldrls	r2, [pc, #104]	; (b760 <chan_send+0xdc>)
    b6f6:	f852 9023 	ldrls.w	r9, [r2, r3, lsl #2]
	chan->sent = cb ? cb : chan_cb(buf);
    b6fa:	f8c5 9118 	str.w	r9, [r5, #280]	; 0x118
	net_buf_ref(buf);
    b6fe:	4620      	mov	r0, r4
    b700:	f01d faaa 	bl	28c58 <net_buf_ref>
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    b704:	682b      	ldr	r3, [r5, #0]
    b706:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
    b70a:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
    b70c:	4b15      	ldr	r3, [pc, #84]	; (b764 <chan_send+0xe0>)
    b70e:	429a      	cmp	r2, r3
    b710:	d01b      	beq.n	b74a <chan_send+0xc6>
	} else if (cb == chan_cfm_sent) {
    b712:	4b15      	ldr	r3, [pc, #84]	; (b768 <chan_send+0xe4>)
    b714:	429a      	cmp	r2, r3
    b716:	d01a      	beq.n	b74e <chan_send+0xca>
		return att_sent;
    b718:	4e14      	ldr	r6, [pc, #80]	; (b76c <chan_send+0xe8>)
    b71a:	4b15      	ldr	r3, [pc, #84]	; (b770 <chan_send+0xec>)
    b71c:	4915      	ldr	r1, [pc, #84]	; (b774 <chan_send+0xf0>)
    b71e:	42b2      	cmp	r2, r6
    b720:	bf18      	it	ne
    b722:	460b      	movne	r3, r1
			       &chan->chan.chan);
    b724:	3508      	adds	r5, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    b726:	9500      	str	r5, [sp, #0]
    b728:	4622      	mov	r2, r4
    b72a:	2104      	movs	r1, #4
    b72c:	f01b ffe6 	bl	276fc <bt_l2cap_send_cb>
	if (err) {
    b730:	4606      	mov	r6, r0
    b732:	2800      	cmp	r0, #0
    b734:	d0c3      	beq.n	b6be <chan_send+0x3a>
	buf->data = buf->__buf + state->offset;
    b736:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    b738:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    b73c:	fa10 f787 	uxtah	r7, r0, r7
    b740:	60a7      	str	r7, [r4, #8]
}
    b742:	4630      	mov	r0, r6
    b744:	b003      	add	sp, #12
    b746:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return att_rsp_sent;
    b74a:	4b0b      	ldr	r3, [pc, #44]	; (b778 <chan_send+0xf4>)
    b74c:	e7ea      	b.n	b724 <chan_send+0xa0>
		return att_cfm_sent;
    b74e:	4b0b      	ldr	r3, [pc, #44]	; (b77c <chan_send+0xf8>)
    b750:	e7e8      	b.n	b724 <chan_send+0xa0>
    b752:	bf00      	nop
    b754:	0002a6d8 	.word	0x0002a6d8
    b758:	0002a6d0 	.word	0x0002a6d0
    b75c:	0002e121 	.word	0x0002e121
    b760:	0002ae44 	.word	0x0002ae44
    b764:	00027ae1 	.word	0x00027ae1
    b768:	00027afd 	.word	0x00027afd
    b76c:	0000b7a5 	.word	0x0000b7a5
    b770:	0000b2d1 	.word	0x0000b2d1
    b774:	000277df 	.word	0x000277df
    b778:	0000b2c1 	.word	0x0000b2c1
    b77c:	0000b2b1 	.word	0x0000b2b1

0000b780 <bt_att_chan_send_rsp.constprop.0>:
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
    b780:	b538      	push	{r3, r4, r5, lr}
	return chan_send(chan, buf, cb);
    b782:	4a07      	ldr	r2, [pc, #28]	; (b7a0 <bt_att_chan_send_rsp.constprop.0+0x20>)
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
    b784:	4604      	mov	r4, r0
    b786:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
    b788:	f7ff ff7c 	bl	b684 <chan_send>
	if (err) {
    b78c:	b130      	cbz	r0, b79c <bt_att_chan_send_rsp.constprop.0+0x1c>
		net_buf_put(&chan->tx_queue, buf);
    b78e:	4629      	mov	r1, r5
    b790:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
}
    b794:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
    b798:	f01d ba51 	b.w	28c3e <net_buf_put>
}
    b79c:	bd38      	pop	{r3, r4, r5, pc}
    b79e:	bf00      	nop
    b7a0:	00027ae1 	.word	0x00027ae1

0000b7a4 <chan_req_sent>:
	if (chan->req) {
    b7a4:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
    b7a8:	b13b      	cbz	r3, b7ba <chan_req_sent+0x16>
	return k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
    b7aa:	f100 01e8 	add.w	r1, r0, #232	; 0xe8
    b7ae:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    b7b2:	4802      	ldr	r0, [pc, #8]	; (b7bc <chan_req_sent+0x18>)
    b7b4:	2300      	movs	r3, #0
    b7b6:	f017 ba4f 	b.w	22c58 <k_work_reschedule_for_queue>
}
    b7ba:	4770      	bx	lr
    b7bc:	20000ac0 	.word	0x20000ac0

0000b7c0 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
    b7c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    b7c2:	2300      	movs	r3, #0
{
    b7c4:	4605      	mov	r5, r0
    b7c6:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    b7c8:	4831      	ldr	r0, [pc, #196]	; (b890 <bt_att_accept+0xd0>)
    b7ca:	2200      	movs	r2, #0
    b7cc:	4669      	mov	r1, sp
    b7ce:	f015 f9a1 	bl	20b14 <k_mem_slab_alloc>
    b7d2:	4604      	mov	r4, r0
    b7d4:	b1c8      	cbz	r0, b80a <bt_att_accept+0x4a>
    b7d6:	f01b fff0 	bl	277ba <arch_is_user_context>
    b7da:	4b2e      	ldr	r3, [pc, #184]	; (b894 <bt_att_accept+0xd4>)
    b7dc:	4a2e      	ldr	r2, [pc, #184]	; (b898 <bt_att_accept+0xd8>)
    b7de:	1a9b      	subs	r3, r3, r2
    b7e0:	08db      	lsrs	r3, r3, #3
		BT_ERR("No available ATT context for conn %p", conn);
    b7e2:	019b      	lsls	r3, r3, #6
    b7e4:	f043 0301 	orr.w	r3, r3, #1
    b7e8:	b148      	cbz	r0, b7fe <bt_att_accept+0x3e>
    b7ea:	492c      	ldr	r1, [pc, #176]	; (b89c <bt_att_accept+0xdc>)
    b7ec:	462a      	mov	r2, r5
		BT_ERR("No available ATT channel for conn %p", att->conn);
    b7ee:	4618      	mov	r0, r3
    b7f0:	f019 fb51 	bl	24e96 <log_from_user>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
    b7f4:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
    b7f8:	4620      	mov	r0, r4
    b7fa:	b003      	add	sp, #12
    b7fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_ERR("No available ATT context for conn %p", conn);
    b7fe:	4827      	ldr	r0, [pc, #156]	; (b89c <bt_att_accept+0xdc>)
    b800:	461a      	mov	r2, r3
    b802:	4629      	mov	r1, r5
		BT_ERR("No available ATT channel for conn %p", att->conn);
    b804:	f019 fb7a 	bl	24efc <log_1>
    b808:	e7f4      	b.n	b7f4 <bt_att_accept+0x34>
__ssp_bos_icheck3(memset, void *, int)
    b80a:	4601      	mov	r1, r0
    b80c:	222c      	movs	r2, #44	; 0x2c
    b80e:	9800      	ldr	r0, [sp, #0]
    b810:	f01e fdf4 	bl	2a3fc <memset>
	att->conn = conn;
    b814:	9e00      	ldr	r6, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    b816:	4822      	ldr	r0, [pc, #136]	; (b8a0 <bt_att_accept+0xe0>)
	list->tail = NULL;
    b818:	60b4      	str	r4, [r6, #8]
	list->head = NULL;
    b81a:	e9c6 5400 	strd	r5, r4, [r6]
	list->tail = NULL;
    b81e:	e9c6 4409 	strd	r4, r4, [r6, #36]	; 0x24
    b822:	2200      	movs	r2, #0
    b824:	2300      	movs	r3, #0
    b826:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
    b828:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    b82a:	f015 f973 	bl	20b14 <k_mem_slab_alloc>
    b82e:	4604      	mov	r4, r0
    b830:	b180      	cbz	r0, b854 <bt_att_accept+0x94>
    b832:	f01b ffc2 	bl	277ba <arch_is_user_context>
    b836:	4b17      	ldr	r3, [pc, #92]	; (b894 <bt_att_accept+0xd4>)
    b838:	4a17      	ldr	r2, [pc, #92]	; (b898 <bt_att_accept+0xd8>)
    b83a:	1a9b      	subs	r3, r3, r2
    b83c:	08db      	lsrs	r3, r3, #3
		BT_ERR("No available ATT channel for conn %p", att->conn);
    b83e:	019b      	lsls	r3, r3, #6
    b840:	f043 0301 	orr.w	r3, r3, #1
    b844:	b110      	cbz	r0, b84c <bt_att_accept+0x8c>
    b846:	6832      	ldr	r2, [r6, #0]
    b848:	4916      	ldr	r1, [pc, #88]	; (b8a4 <bt_att_accept+0xe4>)
    b84a:	e7d0      	b.n	b7ee <bt_att_accept+0x2e>
    b84c:	6831      	ldr	r1, [r6, #0]
    b84e:	4815      	ldr	r0, [pc, #84]	; (b8a4 <bt_att_accept+0xe4>)
    b850:	461a      	mov	r2, r3
    b852:	e7d7      	b.n	b804 <bt_att_accept+0x44>
    b854:	4601      	mov	r1, r0
    b856:	f44f 7290 	mov.w	r2, #288	; 0x120
    b85a:	9801      	ldr	r0, [sp, #4]
    b85c:	f01e fdce 	bl	2a3fc <memset>
	chan->chan.chan.ops = &ops;
    b860:	9801      	ldr	r0, [sp, #4]
    b862:	4b11      	ldr	r3, [pc, #68]	; (b8a8 <bt_att_accept+0xe8>)
    b864:	60c3      	str	r3, [r0, #12]
	k_fifo_init(&chan->tx_queue);
    b866:	30d0      	adds	r0, #208	; 0xd0
    b868:	f01c f928 	bl	27abc <k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    b86c:	9b01      	ldr	r3, [sp, #4]
    b86e:	f3bf 8f5b 	dmb	ish
    b872:	33c8      	adds	r3, #200	; 0xc8
    b874:	e853 2f00 	ldrex	r2, [r3]
    b878:	e843 4100 	strex	r1, r4, [r3]
    b87c:	2900      	cmp	r1, #0
    b87e:	d1f9      	bne.n	b874 <bt_att_accept+0xb4>
    b880:	f3bf 8f5b 	dmb	ish
	chan->att = att;
    b884:	9b01      	ldr	r3, [sp, #4]
    b886:	f843 6b08 	str.w	r6, [r3], #8
	*ch = &chan->chan.chan;
    b88a:	603b      	str	r3, [r7, #0]
	return 0;
    b88c:	e7b4      	b.n	b7f8 <bt_att_accept+0x38>
    b88e:	bf00      	nop
    b890:	20007df8 	.word	0x20007df8
    b894:	0002a6d8 	.word	0x0002a6d8
    b898:	0002a6d0 	.word	0x0002a6d0
    b89c:	0002e134 	.word	0x0002e134
    b8a0:	20007e14 	.word	0x20007e14
    b8a4:	0002e159 	.word	0x0002e159
    b8a8:	20007828 	.word	0x20007828

0000b8ac <bt_att_connected>:
{
    b8ac:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    b8ae:	2104      	movs	r1, #4
{
    b8b0:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    b8b2:	6800      	ldr	r0, [r0, #0]
    b8b4:	f01b ff3b 	bl	2772e <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
    b8b8:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
    b8bc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b8be:	b91b      	cbnz	r3, b8c8 <bt_att_connected+0x1c>
		k_fifo_init(&att->tx_queue);
    b8c0:	f105 000c 	add.w	r0, r5, #12
    b8c4:	f01c f8fa 	bl	27abc <k_queue_init>
Z_GENLIST_PREPEND(slist, snode)
    b8c8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	parent->next = child;
    b8ca:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
Z_GENLIST_PREPEND(slist, snode)
    b8ce:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
    b8d0:	f504 738a 	add.w	r3, r4, #276	; 0x114
	list->head = node;
    b8d4:	626b      	str	r3, [r5, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
    b8d6:	b902      	cbnz	r2, b8da <bt_att_connected+0x2e>
	list->tail = node;
    b8d8:	62ab      	str	r3, [r5, #40]	; 0x28
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b8da:	f3bf 8f5b 	dmb	ish
    b8de:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
	k_work_init_delayable(&work->work, handler);
    b8e2:	4908      	ldr	r1, [pc, #32]	; (b904 <bt_att_connected+0x58>)
    b8e4:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
    b8e8:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    b8ea:	bf5e      	ittt	pl
    b8ec:	2317      	movpl	r3, #23
    b8ee:	f8a4 3056 	strhpl.w	r3, [r4, #86]	; 0x56
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    b8f2:	f8a4 304a 	strhpl.w	r3, [r4, #74]	; 0x4a
    b8f6:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
}
    b8fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    b8fe:	f01e b999 	b.w	29c34 <k_work_init_delayable>
    b902:	bf00      	nop
    b904:	0000c2e9 	.word	0x0000c2e9

0000b908 <att_write_cmd>:
{
    b908:	b5f0      	push	{r4, r5, r6, r7, lr}
    b90a:	4604      	mov	r4, r0
    b90c:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
    b90e:	f101 0008 	add.w	r0, r1, #8
    b912:	460d      	mov	r5, r1
    b914:	f01d f9f6 	bl	28d04 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    b918:	6823      	ldr	r3, [r4, #0]
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
    b91a:	68af      	ldr	r7, [r5, #8]
    b91c:	89ad      	ldrh	r5, [r5, #12]
    b91e:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    b920:	2100      	movs	r1, #0
    b922:	6818      	ldr	r0, [r3, #0]
    b924:	f01c fd0b 	bl	2833e <bt_gatt_change_aware>
    b928:	b1f8      	cbz	r0, b96a <att_write_cmd+0x62>
	if (!handle) {
    b92a:	b306      	cbz	r6, b96e <att_write_cmd+0x66>
	(void)memset(&data, 0, sizeof(data));
    b92c:	2214      	movs	r2, #20
    b92e:	2100      	movs	r1, #0
    b930:	a801      	add	r0, sp, #4
    b932:	f01e fd63 	bl	2a3fc <memset>
	data.conn = chan->att->conn;
    b936:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    b938:	4a0e      	ldr	r2, [pc, #56]	; (b974 <att_write_cmd+0x6c>)
	data.conn = chan->att->conn;
    b93a:	681b      	ldr	r3, [r3, #0]
    b93c:	9300      	str	r3, [sp, #0]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    b93e:	2301      	movs	r3, #1
    b940:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    b944:	4631      	mov	r1, r6
    b946:	466b      	mov	r3, sp
    b948:	4630      	mov	r0, r6
	data.value = value;
    b94a:	9703      	str	r7, [sp, #12]
	data.len = len;
    b94c:	f8ad 5010 	strh.w	r5, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    b950:	f01b ff8a 	bl	27868 <bt_gatt_foreach_attr>
	if (data.err) {
    b954:	f89d 3014 	ldrb.w	r3, [sp, #20]
    b958:	b923      	cbnz	r3, b964 <att_write_cmd+0x5c>
	if (data.buf) {
    b95a:	9901      	ldr	r1, [sp, #4]
    b95c:	b111      	cbz	r1, b964 <att_write_cmd+0x5c>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    b95e:	4620      	mov	r0, r4
    b960:	f7ff ff0e 	bl	b780 <bt_att_chan_send_rsp.constprop.0>
    b964:	2000      	movs	r0, #0
}
    b966:	b007      	add	sp, #28
    b968:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    b96a:	2012      	movs	r0, #18
    b96c:	e7fb      	b.n	b966 <att_write_cmd+0x5e>
		return BT_ATT_ERR_INVALID_HANDLE;
    b96e:	2001      	movs	r0, #1
    b970:	e7f9      	b.n	b966 <att_write_cmd+0x5e>
    b972:	bf00      	nop
    b974:	00027bb9 	.word	0x00027bb9

0000b978 <bt_att_chan_create_pdu>:
	if (len + sizeof(op) > chan->chan.tx.mtu) {
    b978:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    b97c:	3201      	adds	r2, #1
    b97e:	429a      	cmp	r2, r3
{
    b980:	b570      	push	{r4, r5, r6, lr}
    b982:	4606      	mov	r6, r0
    b984:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
    b986:	d919      	bls.n	b9bc <bt_att_chan_create_pdu+0x44>
    b988:	f01b ff17 	bl	277ba <arch_is_user_context>
    b98c:	4c24      	ldr	r4, [pc, #144]	; (ba20 <bt_att_chan_create_pdu+0xa8>)
    b98e:	4b25      	ldr	r3, [pc, #148]	; (ba24 <bt_att_chan_create_pdu+0xac>)
    b990:	f8b6 105e 	ldrh.w	r1, [r6, #94]	; 0x5e
    b994:	1ae4      	subs	r4, r4, r3
    b996:	08e4      	lsrs	r4, r4, #3
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    b998:	01a4      	lsls	r4, r4, #6
    b99a:	f044 0402 	orr.w	r4, r4, #2
    b99e:	b140      	cbz	r0, b9b2 <bt_att_chan_create_pdu+0x3a>
    b9a0:	4613      	mov	r3, r2
    b9a2:	4620      	mov	r0, r4
    b9a4:	460a      	mov	r2, r1
    b9a6:	4920      	ldr	r1, [pc, #128]	; (ba28 <bt_att_chan_create_pdu+0xb0>)
    b9a8:	f019 fa75 	bl	24e96 <log_from_user>
		return NULL;
    b9ac:	2400      	movs	r4, #0
}
    b9ae:	4620      	mov	r0, r4
    b9b0:	bd70      	pop	{r4, r5, r6, pc}
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    b9b2:	481d      	ldr	r0, [pc, #116]	; (ba28 <bt_att_chan_create_pdu+0xb0>)
    b9b4:	4623      	mov	r3, r4
    b9b6:	f019 fab5 	bl	24f24 <log_2>
    b9ba:	e7f7      	b.n	b9ac <bt_att_chan_create_pdu+0x34>
	switch (att_op_get_type(op)) {
    b9bc:	4608      	mov	r0, r1
    b9be:	f01b ff26 	bl	2780e <att_op_get_type>
    b9c2:	2802      	cmp	r0, #2
    b9c4:	d001      	beq.n	b9ca <bt_att_chan_create_pdu+0x52>
    b9c6:	2804      	cmp	r0, #4
    b9c8:	d118      	bne.n	b9fc <bt_att_chan_create_pdu+0x84>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
    b9ca:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    b9ce:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
    b9d0:	2100      	movs	r1, #0
    b9d2:	4608      	mov	r0, r1
    b9d4:	f01b fe8f 	bl	276f6 <bt_l2cap_create_pdu_timeout>
    b9d8:	4604      	mov	r4, r0
	if (!buf) {
    b9da:	b9d0      	cbnz	r0, ba12 <bt_att_chan_create_pdu+0x9a>
    b9dc:	f01b feed 	bl	277ba <arch_is_user_context>
    b9e0:	4b0f      	ldr	r3, [pc, #60]	; (ba20 <bt_att_chan_create_pdu+0xa8>)
    b9e2:	4a10      	ldr	r2, [pc, #64]	; (ba24 <bt_att_chan_create_pdu+0xac>)
    b9e4:	1a9b      	subs	r3, r3, r2
    b9e6:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
    b9e8:	019b      	lsls	r3, r3, #6
    b9ea:	f043 0301 	orr.w	r3, r3, #1
    b9ee:	b150      	cbz	r0, ba06 <bt_att_chan_create_pdu+0x8e>
    b9f0:	490e      	ldr	r1, [pc, #56]	; (ba2c <bt_att_chan_create_pdu+0xb4>)
    b9f2:	462a      	mov	r2, r5
    b9f4:	4618      	mov	r0, r3
    b9f6:	f019 fa4e 	bl	24e96 <log_from_user>
    b9fa:	e7d8      	b.n	b9ae <bt_att_chan_create_pdu+0x36>
		buf = bt_l2cap_create_pdu(NULL, 0);
    b9fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ba00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ba04:	e7e4      	b.n	b9d0 <bt_att_chan_create_pdu+0x58>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
    ba06:	4809      	ldr	r0, [pc, #36]	; (ba2c <bt_att_chan_create_pdu+0xb4>)
    ba08:	461a      	mov	r2, r3
    ba0a:	4629      	mov	r1, r5
    ba0c:	f019 fa76 	bl	24efc <log_1>
		return NULL;
    ba10:	e7cd      	b.n	b9ae <bt_att_chan_create_pdu+0x36>
	return net_buf_simple_add(&buf->b, len);
    ba12:	2101      	movs	r1, #1
    ba14:	3008      	adds	r0, #8
    ba16:	f01d f945 	bl	28ca4 <net_buf_simple_add>
	hdr->code = op;
    ba1a:	7005      	strb	r5, [r0, #0]
	return buf;
    ba1c:	e7c7      	b.n	b9ae <bt_att_chan_create_pdu+0x36>
    ba1e:	bf00      	nop
    ba20:	0002a6d8 	.word	0x0002a6d8
    ba24:	0002a6d0 	.word	0x0002a6d0
    ba28:	0002e17e 	.word	0x0002e17e
    ba2c:	0002df72 	.word	0x0002df72

0000ba30 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
    ba30:	898b      	ldrh	r3, [r1, #12]
{
    ba32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ba36:	4604      	mov	r4, r0
    ba38:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
    ba3a:	b9ab      	cbnz	r3, ba68 <bt_att_recv+0x38>
    ba3c:	f01b febd 	bl	277ba <arch_is_user_context>
    ba40:	4b63      	ldr	r3, [pc, #396]	; (bbd0 <bt_att_recv+0x1a0>)
    ba42:	4a64      	ldr	r2, [pc, #400]	; (bbd4 <bt_att_recv+0x1a4>)
    ba44:	1a9b      	subs	r3, r3, r2
    ba46:	08db      	lsrs	r3, r3, #3
		BT_ERR("Too small ATT PDU received");
    ba48:	019b      	lsls	r3, r3, #6
    ba4a:	f043 0301 	orr.w	r3, r3, #1
    ba4e:	b130      	cbz	r0, ba5e <bt_att_recv+0x2e>
    ba50:	4961      	ldr	r1, [pc, #388]	; (bbd8 <bt_att_recv+0x1a8>)
			BT_WARN("Ignoring unexpected request");
    ba52:	4618      	mov	r0, r3
    ba54:	f019 fa1f 	bl	24e96 <log_from_user>
}
    ba58:	2000      	movs	r0, #0
    ba5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_ERR("Too small ATT PDU received");
    ba5e:	485e      	ldr	r0, [pc, #376]	; (bbd8 <bt_att_recv+0x1a8>)
    ba60:	4619      	mov	r1, r3
			BT_WARN("Ignoring unexpected indication");
    ba62:	f019 fa3e 	bl	24ee2 <log_0>
			return 0;
    ba66:	e7f7      	b.n	ba58 <bt_att_recv+0x28>
	return net_buf_simple_pull_mem(&buf->b, len);
    ba68:	2101      	movs	r1, #1
    ba6a:	f108 0008 	add.w	r0, r8, #8
    ba6e:	f01d f941 	bl	28cf4 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
    ba72:	f854 3c08 	ldr.w	r3, [r4, #-8]
    ba76:	4605      	mov	r5, r0
    ba78:	2b00      	cmp	r3, #0
    ba7a:	d0ed      	beq.n	ba58 <bt_att_recv+0x28>
		if (hdr->code == handlers[i].op) {
    ba7c:	4a57      	ldr	r2, [pc, #348]	; (bbdc <bt_att_recv+0x1ac>)
    ba7e:	7800      	ldrb	r0, [r0, #0]
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    ba80:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    ba84:	2300      	movs	r3, #0
    ba86:	4611      	mov	r1, r2
		if (hdr->code == handlers[i].op) {
    ba88:	f812 7033 	ldrb.w	r7, [r2, r3, lsl #3]
    ba8c:	4287      	cmp	r7, r0
    ba8e:	d121      	bne.n	bad4 <bt_att_recv+0xa4>
		if (handler->type == ATT_REQUEST &&
    ba90:	00d8      	lsls	r0, r3, #3
    ba92:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    ba96:	789f      	ldrb	r7, [r3, #2]
    ba98:	2f01      	cmp	r7, #1
    ba9a:	d144      	bne.n	bb26 <bt_att_recv+0xf6>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ba9c:	f3bf 8f5b 	dmb	ish
    baa0:	34c0      	adds	r4, #192	; 0xc0
    baa2:	e854 3f00 	ldrex	r3, [r4]
    baa6:	f043 0201 	orr.w	r2, r3, #1
    baaa:	e844 2c00 	strex	ip, r2, [r4]
    baae:	f1bc 0f00 	cmp.w	ip, #0
    bab2:	d1f6      	bne.n	baa2 <bt_att_recv+0x72>
    bab4:	f3bf 8f5b 	dmb	ish
    bab8:	07da      	lsls	r2, r3, #31
    baba:	d555      	bpl.n	bb68 <bt_att_recv+0x138>
    babc:	f01b fe7d 	bl	277ba <arch_is_user_context>
    bac0:	4b43      	ldr	r3, [pc, #268]	; (bbd0 <bt_att_recv+0x1a0>)
    bac2:	4a44      	ldr	r2, [pc, #272]	; (bbd4 <bt_att_recv+0x1a4>)
    bac4:	1a9b      	subs	r3, r3, r2
    bac6:	08db      	lsrs	r3, r3, #3
			BT_WARN("Ignoring unexpected request");
    bac8:	019b      	lsls	r3, r3, #6
    baca:	f043 0302 	orr.w	r3, r3, #2
    bace:	b338      	cbz	r0, bb20 <bt_att_recv+0xf0>
    bad0:	4943      	ldr	r1, [pc, #268]	; (bbe0 <bt_att_recv+0x1b0>)
    bad2:	e7be      	b.n	ba52 <bt_att_recv+0x22>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    bad4:	3301      	adds	r3, #1
    bad6:	2b0d      	cmp	r3, #13
    bad8:	d1d6      	bne.n	ba88 <bt_att_recv+0x58>
    bada:	f01b fe6e 	bl	277ba <arch_is_user_context>
    bade:	4b3c      	ldr	r3, [pc, #240]	; (bbd0 <bt_att_recv+0x1a0>)
    bae0:	4a3c      	ldr	r2, [pc, #240]	; (bbd4 <bt_att_recv+0x1a4>)
    bae2:	7829      	ldrb	r1, [r5, #0]
    bae4:	1a9b      	subs	r3, r3, r2
    bae6:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
    bae8:	019b      	lsls	r3, r3, #6
    baea:	f043 0302 	orr.w	r3, r3, #2
    baee:	b920      	cbnz	r0, bafa <bt_att_recv+0xca>
    baf0:	483c      	ldr	r0, [pc, #240]	; (bbe4 <bt_att_recv+0x1b4>)
    baf2:	461a      	mov	r2, r3
    baf4:	f019 fa02 	bl	24efc <log_1>
    baf8:	e004      	b.n	bb04 <bt_att_recv+0xd4>
    bafa:	460a      	mov	r2, r1
    bafc:	4618      	mov	r0, r3
    bafe:	4939      	ldr	r1, [pc, #228]	; (bbe4 <bt_att_recv+0x1b4>)
    bb00:	f019 f9c9 	bl	24e96 <log_from_user>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    bb04:	7829      	ldrb	r1, [r5, #0]
    bb06:	4608      	mov	r0, r1
    bb08:	f01b fe81 	bl	2780e <att_op_get_type>
    bb0c:	2800      	cmp	r0, #0
    bb0e:	d0a3      	beq.n	ba58 <bt_att_recv+0x28>
	if (!req) {
    bb10:	2900      	cmp	r1, #0
    bb12:	d0a1      	beq.n	ba58 <bt_att_recv+0x28>
    bb14:	2306      	movs	r3, #6
    bb16:	2200      	movs	r2, #0
    bb18:	4630      	mov	r0, r6
    bb1a:	f01c f8e2 	bl	27ce2 <send_err_rsp.part.0>
    bb1e:	e79b      	b.n	ba58 <bt_att_recv+0x28>
			BT_WARN("Ignoring unexpected request");
    bb20:	482f      	ldr	r0, [pc, #188]	; (bbe0 <bt_att_recv+0x1b0>)
    bb22:	4619      	mov	r1, r3
    bb24:	e79d      	b.n	ba62 <bt_att_recv+0x32>
		} else if (handler->type == ATT_INDICATION &&
    bb26:	2f05      	cmp	r7, #5
    bb28:	d11e      	bne.n	bb68 <bt_att_recv+0x138>
    bb2a:	f3bf 8f5b 	dmb	ish
    bb2e:	34c0      	adds	r4, #192	; 0xc0
    bb30:	e854 3f00 	ldrex	r3, [r4]
    bb34:	f043 0202 	orr.w	r2, r3, #2
    bb38:	e844 2c00 	strex	ip, r2, [r4]
    bb3c:	f1bc 0f00 	cmp.w	ip, #0
    bb40:	d1f6      	bne.n	bb30 <bt_att_recv+0x100>
    bb42:	f3bf 8f5b 	dmb	ish
    bb46:	079b      	lsls	r3, r3, #30
    bb48:	d50e      	bpl.n	bb68 <bt_att_recv+0x138>
    bb4a:	f01b fe36 	bl	277ba <arch_is_user_context>
    bb4e:	4b20      	ldr	r3, [pc, #128]	; (bbd0 <bt_att_recv+0x1a0>)
    bb50:	4a20      	ldr	r2, [pc, #128]	; (bbd4 <bt_att_recv+0x1a4>)
    bb52:	1a9b      	subs	r3, r3, r2
    bb54:	08db      	lsrs	r3, r3, #3
			BT_WARN("Ignoring unexpected indication");
    bb56:	019b      	lsls	r3, r3, #6
    bb58:	f043 0302 	orr.w	r3, r3, #2
    bb5c:	b108      	cbz	r0, bb62 <bt_att_recv+0x132>
    bb5e:	4922      	ldr	r1, [pc, #136]	; (bbe8 <bt_att_recv+0x1b8>)
    bb60:	e777      	b.n	ba52 <bt_att_recv+0x22>
    bb62:	4821      	ldr	r0, [pc, #132]	; (bbe8 <bt_att_recv+0x1b8>)
    bb64:	4619      	mov	r1, r3
    bb66:	e77c      	b.n	ba62 <bt_att_recv+0x32>
	if (buf->len < handler->expect_len) {
    bb68:	180b      	adds	r3, r1, r0
    bb6a:	f8b8 100c 	ldrh.w	r1, [r8, #12]
    bb6e:	785a      	ldrb	r2, [r3, #1]
    bb70:	4291      	cmp	r1, r2
    bb72:	d21c      	bcs.n	bbae <bt_att_recv+0x17e>
    bb74:	f01b fe21 	bl	277ba <arch_is_user_context>
    bb78:	4c15      	ldr	r4, [pc, #84]	; (bbd0 <bt_att_recv+0x1a0>)
    bb7a:	4b16      	ldr	r3, [pc, #88]	; (bbd4 <bt_att_recv+0x1a4>)
    bb7c:	f8b8 100c 	ldrh.w	r1, [r8, #12]
    bb80:	782a      	ldrb	r2, [r5, #0]
    bb82:	1ae4      	subs	r4, r4, r3
    bb84:	08e4      	lsrs	r4, r4, #3
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    bb86:	01a4      	lsls	r4, r4, #6
    bb88:	f044 0401 	orr.w	r4, r4, #1
    bb8c:	b150      	cbz	r0, bba4 <bt_att_recv+0x174>
    bb8e:	4613      	mov	r3, r2
    bb90:	4620      	mov	r0, r4
    bb92:	460a      	mov	r2, r1
    bb94:	4915      	ldr	r1, [pc, #84]	; (bbec <bt_att_recv+0x1bc>)
    bb96:	f019 f97e 	bl	24e96 <log_from_user>
	if (handler->type == ATT_REQUEST && err) {
    bb9a:	2f01      	cmp	r7, #1
    bb9c:	f47f af5c 	bne.w	ba58 <bt_att_recv+0x28>
		err = BT_ATT_ERR_INVALID_PDU;
    bba0:	2304      	movs	r3, #4
    bba2:	e00f      	b.n	bbc4 <bt_att_recv+0x194>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    bba4:	4811      	ldr	r0, [pc, #68]	; (bbec <bt_att_recv+0x1bc>)
    bba6:	4623      	mov	r3, r4
    bba8:	f019 f9bc 	bl	24f24 <log_2>
    bbac:	e7f5      	b.n	bb9a <bt_att_recv+0x16a>
		err = handler->func(att_chan, buf);
    bbae:	685b      	ldr	r3, [r3, #4]
    bbb0:	4641      	mov	r1, r8
    bbb2:	4630      	mov	r0, r6
    bbb4:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    bbb6:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
    bbb8:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    bbba:	f47f af4d 	bne.w	ba58 <bt_att_recv+0x28>
    bbbe:	2800      	cmp	r0, #0
    bbc0:	f43f af4a 	beq.w	ba58 <bt_att_recv+0x28>
		send_err_rsp(att_chan, hdr->code, 0, err);
    bbc4:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    bbc6:	2900      	cmp	r1, #0
    bbc8:	f43f af46 	beq.w	ba58 <bt_att_recv+0x28>
    bbcc:	e7a3      	b.n	bb16 <bt_att_recv+0xe6>
    bbce:	bf00      	nop
    bbd0:	0002a6d8 	.word	0x0002a6d8
    bbd4:	0002a6d0 	.word	0x0002a6d0
    bbd8:	0002e1a3 	.word	0x0002e1a3
    bbdc:	0002ae58 	.word	0x0002ae58
    bbe0:	0002e1d8 	.word	0x0002e1d8
    bbe4:	0002e1be 	.word	0x0002e1be
    bbe8:	0002e1f4 	.word	0x0002e1f4
    bbec:	0002e213 	.word	0x0002e213

0000bbf0 <att_write_req>:
{
    bbf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    bbf4:	4604      	mov	r4, r0
    bbf6:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
    bbf8:	f101 0008 	add.w	r0, r1, #8
    bbfc:	460d      	mov	r5, r1
    bbfe:	f01d f881 	bl	28d04 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    bc02:	6823      	ldr	r3, [r4, #0]
			     handle, 0, buf->data, buf->len);
    bc04:	f8d5 9008 	ldr.w	r9, [r5, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
    bc08:	89ad      	ldrh	r5, [r5, #12]
    bc0a:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    bc0c:	2101      	movs	r1, #1
    bc0e:	6818      	ldr	r0, [r3, #0]
    bc10:	f01c fb95 	bl	2833e <bt_gatt_change_aware>
    bc14:	2800      	cmp	r0, #0
    bc16:	d03f      	beq.n	bc98 <att_write_req+0xa8>
	if (!handle) {
    bc18:	2e00      	cmp	r6, #0
    bc1a:	d03f      	beq.n	bc9c <att_write_req+0xac>
	(void)memset(&data, 0, sizeof(data));
    bc1c:	2218      	movs	r2, #24
    bc1e:	2100      	movs	r1, #0
    bc20:	4668      	mov	r0, sp
    bc22:	f01e fbeb 	bl	2a3fc <memset>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
    bc26:	2200      	movs	r2, #0
    bc28:	2113      	movs	r1, #19
    bc2a:	4620      	mov	r0, r4
    bc2c:	f7ff fea4 	bl	b978 <bt_att_chan_create_pdu>
    bc30:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    bc32:	b378      	cbz	r0, bc94 <att_write_req+0xa4>
	data.conn = chan->att->conn;
    bc34:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    bc36:	4a1a      	ldr	r2, [pc, #104]	; (bca0 <att_write_req+0xb0>)
	data.conn = chan->att->conn;
    bc38:	681b      	ldr	r3, [r3, #0]
    bc3a:	9300      	str	r3, [sp, #0]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    bc3c:	2301      	movs	r3, #1
    bc3e:	f88d 3014 	strb.w	r3, [sp, #20]
	data.req = req;
    bc42:	f04f 0812 	mov.w	r8, #18
	data.offset = offset;
    bc46:	2700      	movs	r7, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    bc48:	466b      	mov	r3, sp
    bc4a:	4631      	mov	r1, r6
    bc4c:	4630      	mov	r0, r6
	data.len = len;
    bc4e:	f8ad 5010 	strh.w	r5, [sp, #16]
	data.req = req;
    bc52:	f88d 8008 	strb.w	r8, [sp, #8]
	data.offset = offset;
    bc56:	f8ad 7012 	strh.w	r7, [sp, #18]
	data.value = value;
    bc5a:	f8cd 900c 	str.w	r9, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    bc5e:	f01b fe03 	bl	27868 <bt_gatt_foreach_attr>
	if (data.err) {
    bc62:	f89d 5014 	ldrb.w	r5, [sp, #20]
    bc66:	b175      	cbz	r5, bc86 <att_write_req+0x96>
			net_buf_unref(data.buf);
    bc68:	9801      	ldr	r0, [sp, #4]
    bc6a:	f010 fdc5 	bl	1c7f8 <net_buf_unref>
	if (!req) {
    bc6e:	f89d 3014 	ldrb.w	r3, [sp, #20]
    bc72:	4632      	mov	r2, r6
    bc74:	4641      	mov	r1, r8
    bc76:	4620      	mov	r0, r4
    bc78:	f01c f833 	bl	27ce2 <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    bc7c:	463d      	mov	r5, r7
}
    bc7e:	4628      	mov	r0, r5
    bc80:	b007      	add	sp, #28
    bc82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (data.buf) {
    bc86:	9901      	ldr	r1, [sp, #4]
    bc88:	2900      	cmp	r1, #0
    bc8a:	d0f8      	beq.n	bc7e <att_write_req+0x8e>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    bc8c:	4620      	mov	r0, r4
    bc8e:	f7ff fd77 	bl	b780 <bt_att_chan_send_rsp.constprop.0>
    bc92:	e7f4      	b.n	bc7e <att_write_req+0x8e>
			return BT_ATT_ERR_UNLIKELY;
    bc94:	250e      	movs	r5, #14
    bc96:	e7f2      	b.n	bc7e <att_write_req+0x8e>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    bc98:	2512      	movs	r5, #18
    bc9a:	e7f0      	b.n	bc7e <att_write_req+0x8e>
		return BT_ATT_ERR_INVALID_HANDLE;
    bc9c:	2501      	movs	r5, #1
    bc9e:	e7ee      	b.n	bc7e <att_write_req+0x8e>
    bca0:	00027bb9 	.word	0x00027bb9

0000bca4 <bt_att_create_pdu>:
{
    bca4:	b5b0      	push	{r4, r5, r7, lr}
    bca6:	460f      	mov	r7, r1
    bca8:	4615      	mov	r5, r2
	att = att_get(conn);
    bcaa:	f7ff fb19 	bl	b2e0 <att_get>
	if (!att) {
    bcae:	b1e8      	cbz	r0, bcec <bt_att_create_pdu+0x48>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    bcb0:	6a43      	ldr	r3, [r0, #36]	; 0x24
	return list->head;
    bcb2:	1c69      	adds	r1, r5, #1
    bcb4:	b15b      	cbz	r3, bcce <bt_att_create_pdu+0x2a>
    bcb6:	f5b3 708e 	subs.w	r0, r3, #284	; 0x11c
    bcba:	d008      	beq.n	bcce <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    bcbc:	681b      	ldr	r3, [r3, #0]
    bcbe:	b10b      	cbz	r3, bcc4 <bt_att_create_pdu+0x20>
    bcc0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
		if (len + sizeof(op) > chan->chan.tx.mtu) {
    bcc4:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    bcc8:	4291      	cmp	r1, r2
    bcca:	d911      	bls.n	bcf0 <bt_att_create_pdu+0x4c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    bccc:	b9b3      	cbnz	r3, bcfc <bt_att_create_pdu+0x58>
    bcce:	f01b fd74 	bl	277ba <arch_is_user_context>
    bcd2:	4b12      	ldr	r3, [pc, #72]	; (bd1c <bt_att_create_pdu+0x78>)
    bcd4:	4a12      	ldr	r2, [pc, #72]	; (bd20 <bt_att_create_pdu+0x7c>)
    bcd6:	1a9b      	subs	r3, r3, r2
    bcd8:	08db      	lsrs	r3, r3, #3
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
    bcda:	019b      	lsls	r3, r3, #6
    bcdc:	f043 0302 	orr.w	r3, r3, #2
    bce0:	b1b8      	cbz	r0, bd12 <bt_att_create_pdu+0x6e>
    bce2:	460a      	mov	r2, r1
    bce4:	4618      	mov	r0, r3
    bce6:	490f      	ldr	r1, [pc, #60]	; (bd24 <bt_att_create_pdu+0x80>)
    bce8:	f019 f8d5 	bl	24e96 <log_from_user>
}
    bcec:	2000      	movs	r0, #0
    bcee:	bdb0      	pop	{r4, r5, r7, pc}
		return bt_att_chan_create_pdu(chan, op, len);
    bcf0:	462a      	mov	r2, r5
    bcf2:	4639      	mov	r1, r7
}
    bcf4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
		return bt_att_chan_create_pdu(chan, op, len);
    bcf8:	f7ff be3e 	b.w	b978 <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
    bcfc:	f513 748e 	adds.w	r4, r3, #284	; 0x11c
    bd00:	d004      	beq.n	bd0c <bt_att_create_pdu+0x68>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    bd02:	f8d3 411c 	ldr.w	r4, [r3, #284]	; 0x11c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    bd06:	b10c      	cbz	r4, bd0c <bt_att_create_pdu+0x68>
    bd08:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
{
    bd0c:	4618      	mov	r0, r3
    bd0e:	4623      	mov	r3, r4
    bd10:	e7d8      	b.n	bcc4 <bt_att_create_pdu+0x20>
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
    bd12:	4804      	ldr	r0, [pc, #16]	; (bd24 <bt_att_create_pdu+0x80>)
    bd14:	461a      	mov	r2, r3
    bd16:	f019 f8f1 	bl	24efc <log_1>
	return NULL;
    bd1a:	e7e7      	b.n	bcec <bt_att_create_pdu+0x48>
    bd1c:	0002a6d8 	.word	0x0002a6d8
    bd20:	0002a6d0 	.word	0x0002a6d0
    bd24:	0002e232 	.word	0x0002e232

0000bd28 <att_read_group_req>:
{
    bd28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    bd2c:	7b0c      	ldrb	r4, [r1, #12]
    bd2e:	3c04      	subs	r4, #4
    bd30:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    bd32:	2c02      	cmp	r4, #2
{
    bd34:	4605      	mov	r5, r0
    bd36:	b08c      	sub	sp, #48	; 0x30
    bd38:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    bd3a:	d001      	beq.n	bd40 <att_read_group_req+0x18>
    bd3c:	2c10      	cmp	r4, #16
    bd3e:	d16e      	bne.n	be1e <att_read_group_req+0xf6>
	return net_buf_simple_pull_mem(&buf->b, len);
    bd40:	2104      	movs	r1, #4
    bd42:	3008      	adds	r0, #8
    bd44:	f01c ffd6 	bl	28cf4 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    bd48:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
    bd4c:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    bd4e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    bd50:	1d01      	adds	r1, r0, #4
    bd52:	4622      	mov	r2, r4
    bd54:	4640      	mov	r0, r8
    bd56:	f01a ff94 	bl	26c82 <bt_uuid_create>
    bd5a:	2800      	cmp	r0, #0
    bd5c:	d061      	beq.n	be22 <att_read_group_req+0xfa>
	if (!start || !end) {
    bd5e:	2e00      	cmp	r6, #0
    bd60:	d03a      	beq.n	bdd8 <att_read_group_req+0xb0>
    bd62:	2400      	movs	r4, #0
    bd64:	2f00      	cmp	r7, #0
    bd66:	d036      	beq.n	bdd6 <att_read_group_req+0xae>
	if (start > end) {
    bd68:	42be      	cmp	r6, r7
    bd6a:	d835      	bhi.n	bdd8 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    bd6c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    bd70:	a901      	add	r1, sp, #4
    bd72:	4640      	mov	r0, r8
    bd74:	f88d 4004 	strb.w	r4, [sp, #4]
    bd78:	f8ad 3006 	strh.w	r3, [sp, #6]
    bd7c:	f01a ff57 	bl	26c2e <bt_uuid_cmp>
    bd80:	2800      	cmp	r0, #0
    bd82:	d134      	bne.n	bdee <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
    bd84:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    bd86:	2214      	movs	r2, #20
    bd88:	2100      	movs	r1, #0
    bd8a:	a807      	add	r0, sp, #28
    bd8c:	f01e fb36 	bl	2a3fc <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    bd90:	2201      	movs	r2, #1
    bd92:	2111      	movs	r1, #17
    bd94:	4620      	mov	r0, r4
    bd96:	f7ff ff85 	bl	bca4 <bt_att_create_pdu>
    bd9a:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    bd9c:	2800      	cmp	r0, #0
    bd9e:	d040      	beq.n	be22 <att_read_group_req+0xfa>
	return net_buf_simple_add(&buf->b, len);
    bda0:	2101      	movs	r1, #1
    bda2:	3008      	adds	r0, #8
	data.uuid = uuid;
    bda4:	e9cd 5807 	strd	r5, r8, [sp, #28]
    bda8:	f01c ff7c 	bl	28ca4 <net_buf_simple_add>
	data.rsp->len = 0U;
    bdac:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    bdb0:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    bdb2:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
    bdb4:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    bdb8:	4a1b      	ldr	r2, [pc, #108]	; (be28 <att_read_group_req+0x100>)
	data.group = NULL;
    bdba:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    bdbe:	4639      	mov	r1, r7
    bdc0:	4630      	mov	r0, r6
    bdc2:	f01b fd51 	bl	27868 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    bdc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bdc8:	781c      	ldrb	r4, [r3, #0]
    bdca:	bb1c      	cbnz	r4, be14 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
    bdcc:	9809      	ldr	r0, [sp, #36]	; 0x24
    bdce:	f010 fd13 	bl	1c7f8 <net_buf_unref>
	if (!req) {
    bdd2:	230a      	movs	r3, #10
    bdd4:	e018      	b.n	be08 <att_read_group_req+0xe0>
			*err = 0U;
    bdd6:	463e      	mov	r6, r7
	if (!req) {
    bdd8:	2301      	movs	r3, #1
    bdda:	4632      	mov	r2, r6
    bddc:	2110      	movs	r1, #16
    bdde:	4628      	mov	r0, r5
    bde0:	f01b ff7f 	bl	27ce2 <send_err_rsp.part.0>
		return 0;
    bde4:	2400      	movs	r4, #0
}
    bde6:	4620      	mov	r0, r4
    bde8:	b00c      	add	sp, #48	; 0x30
    bdea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    bdee:	f642 0301 	movw	r3, #10241	; 0x2801
    bdf2:	a907      	add	r1, sp, #28
    bdf4:	4640      	mov	r0, r8
    bdf6:	f88d 401c 	strb.w	r4, [sp, #28]
    bdfa:	f8ad 301e 	strh.w	r3, [sp, #30]
    bdfe:	f01a ff16 	bl	26c2e <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    be02:	2800      	cmp	r0, #0
    be04:	d0be      	beq.n	bd84 <att_read_group_req+0x5c>
	if (!req) {
    be06:	2310      	movs	r3, #16
    be08:	4632      	mov	r2, r6
    be0a:	2110      	movs	r1, #16
    be0c:	4628      	mov	r0, r5
    be0e:	f01b ff68 	bl	27ce2 <send_err_rsp.part.0>
		return 0;
    be12:	e7e8      	b.n	bde6 <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    be14:	9909      	ldr	r1, [sp, #36]	; 0x24
    be16:	4628      	mov	r0, r5
    be18:	f7ff fcb2 	bl	b780 <bt_att_chan_send_rsp.constprop.0>
	return 0;
    be1c:	e7e2      	b.n	bde4 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
    be1e:	2404      	movs	r4, #4
    be20:	e7e1      	b.n	bde6 <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
    be22:	240e      	movs	r4, #14
    be24:	e7df      	b.n	bde6 <att_read_group_req+0xbe>
    be26:	bf00      	nop
    be28:	0000b3a9 	.word	0x0000b3a9

0000be2c <att_read_mult_req>:
{
    be2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    be30:	6886      	ldr	r6, [r0, #8]
{
    be32:	b085      	sub	sp, #20
	(void)memset(&data, 0, sizeof(data));
    be34:	2210      	movs	r2, #16
{
    be36:	4604      	mov	r4, r0
    be38:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
    be3a:	4668      	mov	r0, sp
    be3c:	2100      	movs	r1, #0
    be3e:	f01e fadd 	bl	2a3fc <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    be42:	2200      	movs	r2, #0
    be44:	210f      	movs	r1, #15
    be46:	4630      	mov	r0, r6
    be48:	f7ff ff2c 	bl	bca4 <bt_att_create_pdu>
    be4c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    be4e:	b358      	cbz	r0, bea8 <att_read_mult_req+0x7c>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    be50:	f8df 9058 	ldr.w	r9, [pc, #88]	; beac <att_read_mult_req+0x80>
	data.chan = chan;
    be54:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
    be56:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    be5a:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
    be5e:	89ab      	ldrh	r3, [r5, #12]
    be60:	2b01      	cmp	r3, #1
    be62:	d804      	bhi.n	be6e <att_read_mult_req+0x42>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    be64:	9902      	ldr	r1, [sp, #8]
    be66:	4620      	mov	r0, r4
    be68:	f7ff fc8a 	bl	b780 <bt_att_chan_send_rsp.constprop.0>
    be6c:	e018      	b.n	bea0 <att_read_mult_req+0x74>
    be6e:	4638      	mov	r0, r7
    be70:	f01c ff48 	bl	28d04 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    be74:	466b      	mov	r3, sp
    be76:	464a      	mov	r2, r9
    be78:	4601      	mov	r1, r0
    be7a:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    be7c:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    be80:	f01b fcf2 	bl	27868 <bt_gatt_foreach_attr>
		if (data.err) {
    be84:	f89d 300c 	ldrb.w	r3, [sp, #12]
    be88:	2b00      	cmp	r3, #0
    be8a:	d0e8      	beq.n	be5e <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    be8c:	9802      	ldr	r0, [sp, #8]
    be8e:	f010 fcb3 	bl	1c7f8 <net_buf_unref>
	if (!req) {
    be92:	f89d 300c 	ldrb.w	r3, [sp, #12]
    be96:	4632      	mov	r2, r6
    be98:	210e      	movs	r1, #14
    be9a:	4620      	mov	r0, r4
    be9c:	f01b ff21 	bl	27ce2 <send_err_rsp.part.0>
	return 0;
    bea0:	2000      	movs	r0, #0
}
    bea2:	b005      	add	sp, #20
    bea4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    bea8:	200e      	movs	r0, #14
    beaa:	e7fa      	b.n	bea2 <att_read_mult_req+0x76>
    beac:	00027c8f 	.word	0x00027c8f

0000beb0 <att_read_rsp>:
{
    beb0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    beb4:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
    beb8:	4605      	mov	r5, r0
    beba:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
    bebc:	4640      	mov	r0, r8
    bebe:	2101      	movs	r1, #1
{
    bec0:	4614      	mov	r4, r2
    bec2:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
    bec4:	f01c fa3b 	bl	2833e <bt_gatt_change_aware>
    bec8:	b388      	cbz	r0, bf2e <att_read_rsp+0x7e>
	if (!handle) {
    beca:	b396      	cbz	r6, bf32 <att_read_rsp+0x82>
	(void)memset(&data, 0, sizeof(data));
    becc:	2210      	movs	r2, #16
    bece:	2100      	movs	r1, #0
    bed0:	4668      	mov	r0, sp
    bed2:	f01e fa93 	bl	2a3fc <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    bed6:	2200      	movs	r2, #0
    bed8:	4621      	mov	r1, r4
    beda:	4640      	mov	r0, r8
    bedc:	f7ff fee2 	bl	bca4 <bt_att_create_pdu>
    bee0:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    bee2:	b340      	cbz	r0, bf36 <att_read_rsp+0x86>
	data.offset = offset;
    bee4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    bee8:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    beec:	2301      	movs	r3, #1
    beee:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    bef2:	4a12      	ldr	r2, [pc, #72]	; (bf3c <att_read_rsp+0x8c>)
	data.chan = chan;
    bef4:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    bef6:	466b      	mov	r3, sp
    bef8:	4631      	mov	r1, r6
    befa:	4630      	mov	r0, r6
    befc:	f01b fcb4 	bl	27868 <bt_gatt_foreach_attr>
	if (data.err) {
    bf00:	f89d 400c 	ldrb.w	r4, [sp, #12]
    bf04:	b174      	cbz	r4, bf24 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
    bf06:	9802      	ldr	r0, [sp, #8]
    bf08:	f010 fc76 	bl	1c7f8 <net_buf_unref>
	if (!req) {
    bf0c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    bf10:	4632      	mov	r2, r6
    bf12:	4639      	mov	r1, r7
    bf14:	4628      	mov	r0, r5
    bf16:	f01b fee4 	bl	27ce2 <send_err_rsp.part.0>
		return 0;
    bf1a:	2400      	movs	r4, #0
}
    bf1c:	4620      	mov	r0, r4
    bf1e:	b004      	add	sp, #16
    bf20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    bf24:	9902      	ldr	r1, [sp, #8]
    bf26:	4628      	mov	r0, r5
    bf28:	f7ff fc2a 	bl	b780 <bt_att_chan_send_rsp.constprop.0>
	return 0;
    bf2c:	e7f6      	b.n	bf1c <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    bf2e:	2412      	movs	r4, #18
    bf30:	e7f4      	b.n	bf1c <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
    bf32:	2401      	movs	r4, #1
    bf34:	e7f2      	b.n	bf1c <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    bf36:	240e      	movs	r4, #14
    bf38:	e7f0      	b.n	bf1c <att_read_rsp+0x6c>
    bf3a:	bf00      	nop
    bf3c:	00027c8f 	.word	0x00027c8f

0000bf40 <att_read_type_req>:
{
    bf40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    bf44:	7b0c      	ldrb	r4, [r1, #12]
    bf46:	3c04      	subs	r4, #4
    bf48:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    bf4a:	2c02      	cmp	r4, #2
{
    bf4c:	4605      	mov	r5, r0
    bf4e:	b08c      	sub	sp, #48	; 0x30
    bf50:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    bf52:	d001      	beq.n	bf58 <att_read_type_req+0x18>
    bf54:	2c10      	cmp	r4, #16
    bf56:	d14f      	bne.n	bff8 <att_read_type_req+0xb8>
	return net_buf_simple_pull_mem(&buf->b, len);
    bf58:	2104      	movs	r1, #4
    bf5a:	3008      	adds	r0, #8
    bf5c:	f01c feca 	bl	28cf4 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    bf60:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
    bf64:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    bf66:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    bf68:	1d01      	adds	r1, r0, #4
    bf6a:	4622      	mov	r2, r4
    bf6c:	4640      	mov	r0, r8
    bf6e:	f01a fe88 	bl	26c82 <bt_uuid_create>
    bf72:	b188      	cbz	r0, bf98 <att_read_type_req+0x58>
	if (!start || !end) {
    bf74:	b19e      	cbz	r6, bf9e <att_read_type_req+0x5e>
    bf76:	b18f      	cbz	r7, bf9c <att_read_type_req+0x5c>
	if (start > end) {
    bf78:	42b7      	cmp	r7, r6
    bf7a:	d310      	bcc.n	bf9e <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
    bf7c:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
    bf7e:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    bf80:	2100      	movs	r1, #0
    bf82:	eb0d 0002 	add.w	r0, sp, r2
    bf86:	f01e fa39 	bl	2a3fc <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    bf8a:	2201      	movs	r2, #1
    bf8c:	2109      	movs	r1, #9
    bf8e:	4620      	mov	r0, r4
    bf90:	f7ff fe88 	bl	bca4 <bt_att_create_pdu>
    bf94:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    bf96:	b968      	cbnz	r0, bfb4 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
    bf98:	240e      	movs	r4, #14
    bf9a:	e007      	b.n	bfac <att_read_type_req+0x6c>
			*err = 0U;
    bf9c:	463e      	mov	r6, r7
	if (!req) {
    bf9e:	2301      	movs	r3, #1
    bfa0:	4632      	mov	r2, r6
    bfa2:	2108      	movs	r1, #8
    bfa4:	4628      	mov	r0, r5
    bfa6:	f01b fe9c 	bl	27ce2 <send_err_rsp.part.0>
		return 0;
    bfaa:	2400      	movs	r4, #0
}
    bfac:	4620      	mov	r0, r4
    bfae:	b00c      	add	sp, #48	; 0x30
    bfb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
    bfb4:	2101      	movs	r1, #1
    bfb6:	3008      	adds	r0, #8
	data.uuid = uuid;
    bfb8:	e9cd 5806 	strd	r5, r8, [sp, #24]
    bfbc:	f01c fe72 	bl	28ca4 <net_buf_simple_add>
	data.rsp->len = 0U;
    bfc0:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    bfc4:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    bfc6:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    bfc8:	4a0c      	ldr	r2, [pc, #48]	; (bffc <att_read_type_req+0xbc>)
	data.rsp->len = 0U;
    bfca:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    bfce:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    bfd0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    bfd4:	4630      	mov	r0, r6
    bfd6:	ab06      	add	r3, sp, #24
    bfd8:	f01b fc46 	bl	27868 <bt_gatt_foreach_attr>
	if (data.err) {
    bfdc:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    bfe0:	b12c      	cbz	r4, bfee <att_read_type_req+0xae>
		net_buf_unref(data.buf);
    bfe2:	9808      	ldr	r0, [sp, #32]
    bfe4:	f010 fc08 	bl	1c7f8 <net_buf_unref>
	if (!req) {
    bfe8:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    bfec:	e7d8      	b.n	bfa0 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    bfee:	9908      	ldr	r1, [sp, #32]
    bff0:	4628      	mov	r0, r5
    bff2:	f7ff fbc5 	bl	b780 <bt_att_chan_send_rsp.constprop.0>
	return 0;
    bff6:	e7d9      	b.n	bfac <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
    bff8:	2404      	movs	r4, #4
    bffa:	e7d7      	b.n	bfac <att_read_type_req+0x6c>
    bffc:	0000b455 	.word	0x0000b455

0000c000 <att_find_type_req>:
{
    c000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c004:	4688      	mov	r8, r1
    c006:	b086      	sub	sp, #24
    c008:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
    c00a:	2106      	movs	r1, #6
    c00c:	f108 0008 	add.w	r0, r8, #8
    c010:	f01c fe70 	bl	28cf4 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    c014:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
    c016:	b317      	cbz	r7, c05e <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
    c018:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
    c01c:	f1b9 0f00 	cmp.w	r9, #0
    c020:	d01c      	beq.n	c05c <att_find_type_req+0x5c>
	if (start > end) {
    c022:	454f      	cmp	r7, r9
    c024:	d81b      	bhi.n	c05e <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
    c026:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    c028:	f8ad 3002 	strh.w	r3, [sp, #2]
    c02c:	2400      	movs	r4, #0
    c02e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    c032:	a901      	add	r1, sp, #4
    c034:	4668      	mov	r0, sp
	value = buf->data;
    c036:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    c03a:	f88d 4000 	strb.w	r4, [sp]
    c03e:	f88d 4004 	strb.w	r4, [sp, #4]
    c042:	f8ad 3006 	strh.w	r3, [sp, #6]
    c046:	f01a fdf2 	bl	26c2e <bt_uuid_cmp>
    c04a:	4606      	mov	r6, r0
    c04c:	b190      	cbz	r0, c074 <att_find_type_req+0x74>
	if (!req) {
    c04e:	230a      	movs	r3, #10
    c050:	463a      	mov	r2, r7
    c052:	2106      	movs	r1, #6
    c054:	4628      	mov	r0, r5
    c056:	f01b fe44 	bl	27ce2 <send_err_rsp.part.0>
		return 0;
    c05a:	e007      	b.n	c06c <att_find_type_req+0x6c>
			*err = 0U;
    c05c:	464f      	mov	r7, r9
	if (!req) {
    c05e:	2301      	movs	r3, #1
    c060:	463a      	mov	r2, r7
    c062:	2106      	movs	r1, #6
    c064:	4628      	mov	r0, r5
    c066:	f01b fe3c 	bl	27ce2 <send_err_rsp.part.0>
		return 0;
    c06a:	2400      	movs	r4, #0
}
    c06c:	4620      	mov	r0, r4
    c06e:	b006      	add	sp, #24
    c070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    c074:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
    c078:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    c07c:	4601      	mov	r1, r0
    c07e:	2214      	movs	r2, #20
    c080:	a801      	add	r0, sp, #4
    c082:	f01e f9bb 	bl	2a3fc <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    c086:	4632      	mov	r2, r6
    c088:	2107      	movs	r1, #7
    c08a:	4640      	mov	r0, r8
    c08c:	f7ff fe0a 	bl	bca4 <bt_att_create_pdu>
    c090:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    c092:	b1d8      	cbz	r0, c0cc <att_find_type_req+0xcc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    c094:	230a      	movs	r3, #10
    c096:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    c09a:	4a0d      	ldr	r2, [pc, #52]	; (c0d0 <att_find_type_req+0xd0>)
	data.value_len = value_len;
    c09c:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    c0a0:	ab01      	add	r3, sp, #4
    c0a2:	4649      	mov	r1, r9
    c0a4:	4638      	mov	r0, r7
	data.value = value;
    c0a6:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
    c0aa:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    c0ac:	f01b fbdc 	bl	27868 <bt_gatt_foreach_attr>
	if (data.err) {
    c0b0:	f89d 4015 	ldrb.w	r4, [sp, #21]
    c0b4:	b12c      	cbz	r4, c0c2 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    c0b6:	9802      	ldr	r0, [sp, #8]
    c0b8:	f010 fb9e 	bl	1c7f8 <net_buf_unref>
	if (!req) {
    c0bc:	f89d 3015 	ldrb.w	r3, [sp, #21]
    c0c0:	e7ce      	b.n	c060 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    c0c2:	9902      	ldr	r1, [sp, #8]
    c0c4:	4628      	mov	r0, r5
    c0c6:	f7ff fb5b 	bl	b780 <bt_att_chan_send_rsp.constprop.0>
	return 0;
    c0ca:	e7cf      	b.n	c06c <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    c0cc:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    c0ce:	e7cd      	b.n	c06c <att_find_type_req+0x6c>
    c0d0:	0000b4fd 	.word	0x0000b4fd

0000c0d4 <att_find_info_req>:
{
    c0d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    c0d6:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    c0d8:	881e      	ldrh	r6, [r3, #0]
{
    c0da:	b085      	sub	sp, #20
    c0dc:	4605      	mov	r5, r0
	if (!start || !end) {
    c0de:	b19e      	cbz	r6, c108 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    c0e0:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    c0e2:	b184      	cbz	r4, c106 <att_find_info_req+0x32>
	if (start > end) {
    c0e4:	42b4      	cmp	r4, r6
    c0e6:	d30f      	bcc.n	c108 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
    c0e8:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
    c0ea:	2210      	movs	r2, #16
    c0ec:	2100      	movs	r1, #0
    c0ee:	4668      	mov	r0, sp
    c0f0:	f01e f984 	bl	2a3fc <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    c0f4:	2200      	movs	r2, #0
    c0f6:	2105      	movs	r1, #5
    c0f8:	4638      	mov	r0, r7
    c0fa:	f7ff fdd3 	bl	bca4 <bt_att_create_pdu>
    c0fe:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    c100:	b958      	cbnz	r0, c11a <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    c102:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
    c104:	e007      	b.n	c116 <att_find_info_req+0x42>
			*err = 0U;
    c106:	4626      	mov	r6, r4
	if (!req) {
    c108:	2301      	movs	r3, #1
    c10a:	4632      	mov	r2, r6
    c10c:	2104      	movs	r1, #4
    c10e:	4628      	mov	r0, r5
    c110:	f01b fde7 	bl	27ce2 <send_err_rsp.part.0>
	return 0;
    c114:	2000      	movs	r0, #0
}
    c116:	b005      	add	sp, #20
    c118:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    c11a:	4621      	mov	r1, r4
    c11c:	4a08      	ldr	r2, [pc, #32]	; (c140 <att_find_info_req+0x6c>)
	data.chan = chan;
    c11e:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    c120:	466b      	mov	r3, sp
    c122:	4630      	mov	r0, r6
    c124:	f01b fba0 	bl	27868 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    c128:	9c02      	ldr	r4, [sp, #8]
    c12a:	b924      	cbnz	r4, c136 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
    c12c:	9801      	ldr	r0, [sp, #4]
    c12e:	f010 fb63 	bl	1c7f8 <net_buf_unref>
	if (!req) {
    c132:	230a      	movs	r3, #10
    c134:	e7e9      	b.n	c10a <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    c136:	9901      	ldr	r1, [sp, #4]
    c138:	4628      	mov	r0, r5
    c13a:	f7ff fb21 	bl	b780 <bt_att_chan_send_rsp.constprop.0>
    c13e:	e7e9      	b.n	c114 <att_find_info_req+0x40>
    c140:	00027a1b 	.word	0x00027a1b

0000c144 <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
    c144:	b513      	push	{r0, r1, r4, lr}
    c146:	4602      	mov	r2, r0
    c148:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    c14a:	4808      	ldr	r0, [pc, #32]	; (c16c <bt_att_req_alloc+0x28>)
    c14c:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
    c14e:	2400      	movs	r4, #0
    c150:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    c152:	f014 fcdf 	bl	20b14 <k_mem_slab_alloc>
    c156:	4601      	mov	r1, r0
    c158:	b930      	cbnz	r0, c168 <bt_att_req_alloc+0x24>
    c15a:	9801      	ldr	r0, [sp, #4]
    c15c:	221c      	movs	r2, #28
    c15e:	f01e f94d 	bl	2a3fc <memset>

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));

	return req;
    c162:	9801      	ldr	r0, [sp, #4]
}
    c164:	b002      	add	sp, #8
    c166:	bd10      	pop	{r4, pc}
		return NULL;
    c168:	4620      	mov	r0, r4
    c16a:	e7fb      	b.n	c164 <bt_att_req_alloc+0x20>
    c16c:	20007e30 	.word	0x20007e30

0000c170 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    c170:	b507      	push	{r0, r1, r2, lr}
    c172:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
    c174:	6880      	ldr	r0, [r0, #8]
    c176:	b120      	cbz	r0, c182 <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
    c178:	f010 fb3e 	bl	1c7f8 <net_buf_unref>
		req->buf = NULL;
    c17c:	9b01      	ldr	r3, [sp, #4]
    c17e:	2200      	movs	r2, #0
    c180:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
    c182:	4803      	ldr	r0, [pc, #12]	; (c190 <bt_att_req_free+0x20>)
    c184:	a901      	add	r1, sp, #4
    c186:	f014 fcf7 	bl	20b78 <k_mem_slab_free>
}
    c18a:	b003      	add	sp, #12
    c18c:	f85d fb04 	ldr.w	pc, [sp], #4
    c190:	20007e30 	.word	0x20007e30

0000c194 <att_handle_rsp>:
{
    c194:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	bool pending = k_work_delayable_is_pending(&work->work);
    c198:	f100 04e8 	add.w	r4, r0, #232	; 0xe8
    c19c:	4605      	mov	r5, r0
	return k_work_delayable_busy_get(dwork) != 0;
    c19e:	4620      	mov	r0, r4
    c1a0:	460f      	mov	r7, r1
    c1a2:	4690      	mov	r8, r2
    c1a4:	461e      	mov	r6, r3
    c1a6:	f01d fd51 	bl	29c4c <k_work_delayable_busy_get>
	int rc = k_work_cancel_delayable(&work->work);
    c1aa:	4620      	mov	r0, r4
    c1ac:	f01d fd62 	bl	29c74 <k_work_cancel_delayable>
	if (!chan->req) {
    c1b0:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
    c1b4:	bb18      	cbnz	r0, c1fe <att_handle_rsp+0x6a>
    c1b6:	f01b fb00 	bl	277ba <arch_is_user_context>
    c1ba:	4c1a      	ldr	r4, [pc, #104]	; (c224 <att_handle_rsp+0x90>)
    c1bc:	4b1a      	ldr	r3, [pc, #104]	; (c228 <att_handle_rsp+0x94>)
    c1be:	1ae4      	subs	r4, r4, r3
    c1c0:	08e4      	lsrs	r4, r4, #3
		BT_WARN("No pending ATT request");
    c1c2:	01a4      	lsls	r4, r4, #6
    c1c4:	f044 0402 	orr.w	r4, r4, #2
    c1c8:	b1a0      	cbz	r0, c1f4 <att_handle_rsp+0x60>
    c1ca:	4918      	ldr	r1, [pc, #96]	; (c22c <att_handle_rsp+0x98>)
    c1cc:	4620      	mov	r0, r4
    c1ce:	f018 fe62 	bl	24e96 <log_from_user>
	bt_att_func_t func = NULL;
    c1d2:	2400      	movs	r4, #0
	att_req_send_process(chan->att);
    c1d4:	6828      	ldr	r0, [r5, #0]
    c1d6:	f01b fcc3 	bl	27b60 <att_req_send_process>
	if (func) {
    c1da:	b13c      	cbz	r4, c1ec <att_handle_rsp+0x58>
		func(chan->att->conn, err, pdu, len, params);
    c1dc:	6828      	ldr	r0, [r5, #0]
    c1de:	f8cd 9000 	str.w	r9, [sp]
    c1e2:	6800      	ldr	r0, [r0, #0]
    c1e4:	4643      	mov	r3, r8
    c1e6:	463a      	mov	r2, r7
    c1e8:	4631      	mov	r1, r6
    c1ea:	47a0      	blx	r4
}
    c1ec:	2000      	movs	r0, #0
    c1ee:	b002      	add	sp, #8
    c1f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		BT_WARN("No pending ATT request");
    c1f4:	480d      	ldr	r0, [pc, #52]	; (c22c <att_handle_rsp+0x98>)
    c1f6:	4621      	mov	r1, r4
    c1f8:	f018 fe73 	bl	24ee2 <log_0>
    c1fc:	e7e9      	b.n	c1d2 <att_handle_rsp+0x3e>
	if (chan->req == &cancel) {
    c1fe:	4b0c      	ldr	r3, [pc, #48]	; (c230 <att_handle_rsp+0x9c>)
    c200:	4298      	cmp	r0, r3
    c202:	f04f 0a00 	mov.w	sl, #0
    c206:	d102      	bne.n	c20e <att_handle_rsp+0x7a>
		chan->req = NULL;
    c208:	f8c5 a0cc 	str.w	sl, [r5, #204]	; 0xcc
		goto process;
    c20c:	e7e1      	b.n	c1d2 <att_handle_rsp+0x3e>
	func = chan->req->func;
    c20e:	6844      	ldr	r4, [r0, #4]
	chan->req->func = NULL;
    c210:	f8c0 a004 	str.w	sl, [r0, #4]
	params = chan->req->user_data;
    c214:	f8d0 9018 	ldr.w	r9, [r0, #24]
	bt_att_req_free(chan->req);
    c218:	f7ff ffaa 	bl	c170 <bt_att_req_free>
	chan->req = NULL;
    c21c:	f8c5 a0cc 	str.w	sl, [r5, #204]	; 0xcc
    c220:	e7d8      	b.n	c1d4 <att_handle_rsp+0x40>
    c222:	bf00      	nop
    c224:	0002a6d8 	.word	0x0002a6d8
    c228:	0002a6d0 	.word	0x0002a6d0
    c22c:	0002e24d 	.word	0x0002e24d
    c230:	20000e68 	.word	0x20000e68

0000c234 <bt_att_disconnected>:
{
    c234:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
    c236:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
    c23a:	b085      	sub	sp, #20
    c23c:	4604      	mov	r4, r0
	if (!att_chan->att) {
    c23e:	b385      	cbz	r5, c2a2 <bt_att_disconnected+0x6e>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
    c240:	f500 718a 	add.w	r1, r0, #276	; 0x114
    c244:	f105 0024 	add.w	r0, r5, #36	; 0x24
    c248:	f01b fa9c 	bl	27784 <sys_slist_find_and_remove>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
    c24c:	f1a4 0608 	sub.w	r6, r4, #8
    c250:	f104 07c8 	add.w	r7, r4, #200	; 0xc8
    c254:	2200      	movs	r2, #0
    c256:	2300      	movs	r3, #0
    c258:	4638      	mov	r0, r7
    c25a:	f01c fcd2 	bl	28c02 <net_buf_get>
    c25e:	4602      	mov	r2, r0
    c260:	bb08      	cbnz	r0, c2a6 <bt_att_disconnected+0x72>
	if (chan->req) {
    c262:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
    c266:	b123      	cbz	r3, c272 <bt_att_disconnected+0x3e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
    c268:	4601      	mov	r1, r0
    c26a:	230e      	movs	r3, #14
    c26c:	4630      	mov	r0, r6
    c26e:	f7ff ff91 	bl	c194 <att_handle_rsp>
	chan->att = NULL;
    c272:	2300      	movs	r3, #0
    c274:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
    c278:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    c27a:	b993      	cbnz	r3, c2a2 <bt_att_disconnected+0x6e>
	att_reset(att);
    c27c:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
    c27e:	9803      	ldr	r0, [sp, #12]
    c280:	2200      	movs	r2, #0
    c282:	2300      	movs	r3, #0
    c284:	300c      	adds	r0, #12
    c286:	f01c fcbc 	bl	28c02 <net_buf_get>
    c28a:	b978      	cbnz	r0, c2ac <bt_att_disconnected+0x78>
	att->conn = NULL;
    c28c:	9a03      	ldr	r2, [sp, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    c28e:	6856      	ldr	r6, [r2, #4]
	att->conn = NULL;
    c290:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    c292:	b976      	cbnz	r6, c2b2 <bt_att_disconnected+0x7e>
	k_mem_slab_free(&att_slab, (void **)&att);
    c294:	4813      	ldr	r0, [pc, #76]	; (c2e4 <bt_att_disconnected+0xb0>)
    c296:	a903      	add	r1, sp, #12
    c298:	f014 fc6e 	bl	20b78 <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
    c29c:	6820      	ldr	r0, [r4, #0]
    c29e:	f000 feb7 	bl	d010 <bt_gatt_disconnected>
}
    c2a2:	b005      	add	sp, #20
    c2a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
    c2a6:	f010 faa7 	bl	1c7f8 <net_buf_unref>
    c2aa:	e7d3      	b.n	c254 <bt_att_disconnected+0x20>
		net_buf_unref(buf);
    c2ac:	f010 faa4 	bl	1c7f8 <net_buf_unref>
    c2b0:	e7e5      	b.n	c27e <bt_att_disconnected+0x4a>
	return node->next;
    c2b2:	6835      	ldr	r5, [r6, #0]
    c2b4:	2d00      	cmp	r5, #0
    c2b6:	bf38      	it	cc
    c2b8:	2500      	movcc	r5, #0
		if (req->func) {
    c2ba:	6877      	ldr	r7, [r6, #4]
    c2bc:	b137      	cbz	r7, c2cc <bt_att_disconnected+0x98>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
    c2be:	69b3      	ldr	r3, [r6, #24]
    c2c0:	9300      	str	r3, [sp, #0]
    c2c2:	2300      	movs	r3, #0
    c2c4:	461a      	mov	r2, r3
    c2c6:	210e      	movs	r1, #14
    c2c8:	4618      	mov	r0, r3
    c2ca:	47b8      	blx	r7
		bt_att_req_free(req);
    c2cc:	4630      	mov	r0, r6
    c2ce:	f7ff ff4f 	bl	c170 <bt_att_req_free>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    c2d2:	2d00      	cmp	r5, #0
    c2d4:	d0de      	beq.n	c294 <bt_att_disconnected+0x60>
    c2d6:	682b      	ldr	r3, [r5, #0]
    c2d8:	2b00      	cmp	r3, #0
    c2da:	bf38      	it	cc
    c2dc:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    c2de:	462e      	mov	r6, r5
    c2e0:	461d      	mov	r5, r3
    c2e2:	e7ea      	b.n	c2ba <bt_att_disconnected+0x86>
    c2e4:	20007df8 	.word	0x20007df8

0000c2e8 <att_timeout>:
{
    c2e8:	b510      	push	{r4, lr}
    c2ea:	4604      	mov	r4, r0
    c2ec:	f01b fa65 	bl	277ba <arch_is_user_context>
    c2f0:	4b0b      	ldr	r3, [pc, #44]	; (c320 <att_timeout+0x38>)
    c2f2:	4a0c      	ldr	r2, [pc, #48]	; (c324 <att_timeout+0x3c>)
    c2f4:	1a9b      	subs	r3, r3, r2
    c2f6:	08db      	lsrs	r3, r3, #3
	BT_ERR("ATT Timeout");
    c2f8:	019b      	lsls	r3, r3, #6
    c2fa:	f043 0301 	orr.w	r3, r3, #1
    c2fe:	b148      	cbz	r0, c314 <att_timeout+0x2c>
    c300:	4909      	ldr	r1, [pc, #36]	; (c328 <att_timeout+0x40>)
    c302:	4618      	mov	r0, r3
    c304:	f018 fdc7 	bl	24e96 <log_from_user>
	bt_att_disconnected(&chan->chan.chan);
    c308:	f1a4 00e0 	sub.w	r0, r4, #224	; 0xe0
}
    c30c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
    c310:	f7ff bf90 	b.w	c234 <bt_att_disconnected>
	BT_ERR("ATT Timeout");
    c314:	4804      	ldr	r0, [pc, #16]	; (c328 <att_timeout+0x40>)
    c316:	4619      	mov	r1, r3
    c318:	f018 fde3 	bl	24ee2 <log_0>
    c31c:	e7f4      	b.n	c308 <att_timeout+0x20>
    c31e:	bf00      	nop
    c320:	0002a6d8 	.word	0x0002a6d8
    c324:	0002a6d0 	.word	0x0002a6d0
    c328:	0002e264 	.word	0x0002e264

0000c32c <gatt_indicate>:
}
#endif

static int gatt_indicate(struct bt_conn *conn, uint16_t handle,
			 struct bt_gatt_indicate_params *params)
{
    c32c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c330:	4680      	mov	r8, r0
    c332:	4689      	mov	r9, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    c334:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
    c338:	2100      	movs	r1, #0
	    params->func == sc_restore_rsp)) &&
	    !bt_gatt_change_aware(conn, false)) {
		return -EAGAIN;
	}
#endif
	len = sizeof(*ind) + params->len;
    c33a:	8a96      	ldrh	r6, [r2, #20]
{
    c33c:	4615      	mov	r5, r2
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    c33e:	f7ff ff01 	bl	c144 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
    c342:	3602      	adds	r6, #2
	if (!req) {
    c344:	4604      	mov	r4, r0
    c346:	b920      	cbnz	r0, c352 <gatt_indicate+0x26>

	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
	if (!buf) {
		BT_WARN("No buffer available to send indication");
		bt_att_req_free(req);
		return -ENOMEM;
    c348:	f06f 050b 	mvn.w	r5, #11
	if (err) {
		bt_att_req_free(req);
	}

	return err;
}
    c34c:	4628      	mov	r0, r5
    c34e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req->encode = encode;
    c352:	2300      	movs	r3, #0
    c354:	60c3      	str	r3, [r0, #12]
	req->att_op = op;
    c356:	211d      	movs	r1, #29
	req->func = func;
    c358:	4b1f      	ldr	r3, [pc, #124]	; (c3d8 <gatt_indicate+0xac>)
	req->len = len;
    c35a:	6146      	str	r6, [r0, #20]
	req->att_op = op;
    c35c:	7441      	strb	r1, [r0, #17]
	req->func = func;
    c35e:	6043      	str	r3, [r0, #4]
	req->user_data = params;
    c360:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
    c362:	4632      	mov	r2, r6
    c364:	4640      	mov	r0, r8
    c366:	f7ff fc9d 	bl	bca4 <bt_att_create_pdu>
	if (!buf) {
    c36a:	4606      	mov	r6, r0
    c36c:	b9b0      	cbnz	r0, c39c <gatt_indicate+0x70>
    c36e:	f01b fdc7 	bl	27f00 <arch_is_user_context>
    c372:	4b1a      	ldr	r3, [pc, #104]	; (c3dc <gatt_indicate+0xb0>)
    c374:	4a1a      	ldr	r2, [pc, #104]	; (c3e0 <gatt_indicate+0xb4>)
    c376:	1a9b      	subs	r3, r3, r2
    c378:	08db      	lsrs	r3, r3, #3
		BT_WARN("No buffer available to send indication");
    c37a:	019b      	lsls	r3, r3, #6
    c37c:	f043 0302 	orr.w	r3, r3, #2
    c380:	b138      	cbz	r0, c392 <gatt_indicate+0x66>
    c382:	4918      	ldr	r1, [pc, #96]	; (c3e4 <gatt_indicate+0xb8>)
    c384:	4618      	mov	r0, r3
    c386:	f018 fd86 	bl	24e96 <log_from_user>
		bt_att_req_free(req);
    c38a:	4620      	mov	r0, r4
    c38c:	f7ff fef0 	bl	c170 <bt_att_req_free>
    c390:	e7da      	b.n	c348 <gatt_indicate+0x1c>
		BT_WARN("No buffer available to send indication");
    c392:	4814      	ldr	r0, [pc, #80]	; (c3e4 <gatt_indicate+0xb8>)
    c394:	4619      	mov	r1, r3
    c396:	f018 fda4 	bl	24ee2 <log_0>
    c39a:	e7f6      	b.n	c38a <gatt_indicate+0x5e>
	return net_buf_simple_add(&buf->b, len);
    c39c:	f100 0a08 	add.w	sl, r0, #8
    c3a0:	2102      	movs	r1, #2
    c3a2:	4650      	mov	r0, sl
    c3a4:	f01c fc7e 	bl	28ca4 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    c3a8:	4607      	mov	r7, r0
    c3aa:	8aa9      	ldrh	r1, [r5, #20]
    c3ac:	f827 9b02 	strh.w	r9, [r7], #2
    c3b0:	4650      	mov	r0, sl
    c3b2:	f01c fc77 	bl	28ca4 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    c3b6:	8aaa      	ldrh	r2, [r5, #20]
    c3b8:	6929      	ldr	r1, [r5, #16]
    c3ba:	4638      	mov	r0, r7
    c3bc:	f01e f810 	bl	2a3e0 <memcpy>
	req->buf = buf;
    c3c0:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
    c3c2:	4621      	mov	r1, r4
    c3c4:	4640      	mov	r0, r8
    c3c6:	f01b fd86 	bl	27ed6 <bt_att_req_send>
	if (err) {
    c3ca:	4605      	mov	r5, r0
    c3cc:	2800      	cmp	r0, #0
    c3ce:	d0bd      	beq.n	c34c <gatt_indicate+0x20>
		bt_att_req_free(req);
    c3d0:	4620      	mov	r0, r4
    c3d2:	f7ff fecd 	bl	c170 <bt_att_req_free>
    c3d6:	e7b9      	b.n	c34c <gatt_indicate+0x20>
    c3d8:	00027f31 	.word	0x00027f31
    c3dc:	0002a7a0 	.word	0x0002a7a0
    c3e0:	0002a6d0 	.word	0x0002a6d0
    c3e4:	0002e277 	.word	0x0002e277

0000c3e8 <read_ppcp>:
{
    c3e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    c3ea:	4610      	mov	r0, r2
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    c3ec:	4a07      	ldr	r2, [pc, #28]	; (c40c <read_ppcp+0x24>)
{
    c3ee:	4619      	mov	r1, r3
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    c3f0:	f44f 1328 	mov.w	r3, #2752512	; 0x2a0000
    c3f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
    c3f8:	2308      	movs	r3, #8
    c3fa:	9300      	str	r3, [sp, #0]
    c3fc:	f8bd 2018 	ldrh.w	r2, [sp, #24]
    c400:	446b      	add	r3, sp
    c402:	f01b fe1c 	bl	2803e <bt_gatt_attr_read.constprop.0>
}
    c406:	b005      	add	sp, #20
    c408:	f85d fb04 	ldr.w	pc, [sp], #4
    c40c:	00280018 	.word	0x00280018

0000c410 <find_sc_cfg>:
{
    c410:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
    c412:	4c0e      	ldr	r4, [pc, #56]	; (c44c <find_sc_cfg+0x3c>)
    c414:	7823      	ldrb	r3, [r4, #0]
    c416:	4283      	cmp	r3, r0
{
    c418:	4605      	mov	r5, r0
    c41a:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
    c41c:	d00a      	beq.n	c434 <find_sc_cfg+0x24>
    c41e:	7b23      	ldrb	r3, [r4, #12]
    c420:	42ab      	cmp	r3, r5
    c422:	d111      	bne.n	c448 <find_sc_cfg+0x38>
    c424:	480a      	ldr	r0, [pc, #40]	; (c450 <find_sc_cfg+0x40>)
    c426:	2207      	movs	r2, #7
    c428:	4631      	mov	r1, r6
    c42a:	f01d ffcb 	bl	2a3c4 <memcmp>
    c42e:	b958      	cbnz	r0, c448 <find_sc_cfg+0x38>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    c430:	2001      	movs	r0, #1
    c432:	e005      	b.n	c440 <find_sc_cfg+0x30>
    c434:	2207      	movs	r2, #7
    c436:	1c60      	adds	r0, r4, #1
    c438:	f01d ffc4 	bl	2a3c4 <memcmp>
		if (id == sc_cfg[i].id &&
    c43c:	2800      	cmp	r0, #0
    c43e:	d1ee      	bne.n	c41e <find_sc_cfg+0xe>
			return &sc_cfg[i];
    c440:	230c      	movs	r3, #12
    c442:	fb03 4000 	mla	r0, r3, r0, r4
    c446:	e000      	b.n	c44a <find_sc_cfg+0x3a>
	return NULL;
    c448:	2000      	movs	r0, #0
}
    c44a:	bd70      	pop	{r4, r5, r6, pc}
    c44c:	2000250a 	.word	0x2000250a
    c450:	20002517 	.word	0x20002517

0000c454 <sc_save>:
{
    c454:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    c458:	4680      	mov	r8, r0
    c45a:	460f      	mov	r7, r1
    c45c:	4616      	mov	r6, r2
    c45e:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
    c460:	f7ff ffd6 	bl	c410 <find_sc_cfg>
	if (!cfg) {
    c464:	4604      	mov	r4, r0
    c466:	bb10      	cbnz	r0, c4ae <sc_save+0x5a>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    c468:	4669      	mov	r1, sp
    c46a:	9000      	str	r0, [sp, #0]
    c46c:	f8cd 0003 	str.w	r0, [sp, #3]
    c470:	f7ff ffce 	bl	c410 <find_sc_cfg>
		if (!cfg) {
    c474:	4604      	mov	r4, r0
    c476:	b9a8      	cbnz	r0, c4a4 <sc_save+0x50>
    c478:	f01b fd42 	bl	27f00 <arch_is_user_context>
    c47c:	4b13      	ldr	r3, [pc, #76]	; (c4cc <sc_save+0x78>)
    c47e:	4a14      	ldr	r2, [pc, #80]	; (c4d0 <sc_save+0x7c>)
    c480:	1a9b      	subs	r3, r3, r2
    c482:	08db      	lsrs	r3, r3, #3
			BT_ERR("unable to save SC: no cfg left");
    c484:	019b      	lsls	r3, r3, #6
    c486:	f043 0301 	orr.w	r3, r3, #1
    c48a:	b130      	cbz	r0, c49a <sc_save+0x46>
    c48c:	4911      	ldr	r1, [pc, #68]	; (c4d4 <sc_save+0x80>)
    c48e:	4618      	mov	r0, r3
    c490:	f018 fd01 	bl	24e96 <log_from_user>
}
    c494:	b002      	add	sp, #8
    c496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			BT_ERR("unable to save SC: no cfg left");
    c49a:	480e      	ldr	r0, [pc, #56]	; (c4d4 <sc_save+0x80>)
    c49c:	4619      	mov	r1, r3
    c49e:	f018 fd20 	bl	24ee2 <log_0>
			return;
    c4a2:	e7f7      	b.n	c494 <sc_save+0x40>
		cfg->id = id;
    c4a4:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
    c4a8:	4639      	mov	r1, r7
    c4aa:	f01b fdbc 	bl	28026 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
    c4ae:	8922      	ldrh	r2, [r4, #8]
    c4b0:	8963      	ldrh	r3, [r4, #10]
    c4b2:	b91a      	cbnz	r2, c4bc <sc_save+0x68>
    c4b4:	b923      	cbnz	r3, c4c0 <sc_save+0x6c>
		cfg->data.start = start;
    c4b6:	8126      	strh	r6, [r4, #8]
		*end = new_end;
    c4b8:	8165      	strh	r5, [r4, #10]
    c4ba:	e7eb      	b.n	c494 <sc_save+0x40>
	if (new_start >= *start && new_end <= *end) {
    c4bc:	4296      	cmp	r6, r2
    c4be:	d302      	bcc.n	c4c6 <sc_save+0x72>
    c4c0:	429d      	cmp	r5, r3
    c4c2:	d9e7      	bls.n	c494 <sc_save+0x40>
    c4c4:	e7f8      	b.n	c4b8 <sc_save+0x64>
		*start = new_start;
    c4c6:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
    c4c8:	e7fa      	b.n	c4c0 <sc_save+0x6c>
    c4ca:	bf00      	nop
    c4cc:	0002a7a0 	.word	0x0002a7a0
    c4d0:	0002a6d0 	.word	0x0002a6d0
    c4d4:	0002e29e 	.word	0x0002e29e

0000c4d8 <find_cf_cfg>:
{
    c4d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    c4da:	4c16      	ldr	r4, [pc, #88]	; (c534 <find_cf_cfg+0x5c>)
		if (!conn) {
    c4dc:	4605      	mov	r5, r0
    c4de:	b140      	cbz	r0, c4f2 <find_cf_cfg+0x1a>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    c4e0:	4622      	mov	r2, r4
    c4e2:	f812 1b01 	ldrb.w	r1, [r2], #1
    c4e6:	f01a ffd1 	bl	2748c <bt_conn_is_peer_addr_le>
    c4ea:	b1c0      	cbz	r0, c51e <find_cf_cfg+0x46>
}
    c4ec:	4620      	mov	r0, r4
    c4ee:	b003      	add	sp, #12
    c4f0:	bd30      	pop	{r4, r5, pc}
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    c4f2:	9000      	str	r0, [sp, #0]
    c4f4:	2207      	movs	r2, #7
    c4f6:	f8cd 0003 	str.w	r0, [sp, #3]
    c4fa:	4669      	mov	r1, sp
    c4fc:	1c60      	adds	r0, r4, #1
    c4fe:	f01d ff61 	bl	2a3c4 <memcmp>
    c502:	2800      	cmp	r0, #0
    c504:	d0f2      	beq.n	c4ec <find_cf_cfg+0x14>
    c506:	2207      	movs	r2, #7
    c508:	4669      	mov	r1, sp
    c50a:	f104 0011 	add.w	r0, r4, #17
    c50e:	9500      	str	r5, [sp, #0]
    c510:	f8cd 5003 	str.w	r5, [sp, #3]
    c514:	f01d ff56 	bl	2a3c4 <memcmp>
    c518:	b948      	cbnz	r0, c52e <find_cf_cfg+0x56>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
    c51a:	3410      	adds	r4, #16
    c51c:	e7e6      	b.n	c4ec <find_cf_cfg+0x14>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    c51e:	7c21      	ldrb	r1, [r4, #16]
    c520:	f104 0211 	add.w	r2, r4, #17
    c524:	4628      	mov	r0, r5
    c526:	f01a ffb1 	bl	2748c <bt_conn_is_peer_addr_le>
    c52a:	2800      	cmp	r0, #0
    c52c:	d1f5      	bne.n	c51a <find_cf_cfg+0x42>
	return NULL;
    c52e:	2400      	movs	r4, #0
    c530:	e7dc      	b.n	c4ec <find_cf_cfg+0x14>
    c532:	bf00      	nop
    c534:	20000e84 	.word	0x20000e84

0000c538 <cf_write>:
{
    c538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c53c:	461e      	mov	r6, r3
    c53e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
    c542:	2b01      	cmp	r3, #1
{
    c544:	4607      	mov	r7, r0
    c546:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
    c548:	d846      	bhi.n	c5d8 <cf_write+0xa0>
	if (offset + len > sizeof(cfg->data)) {
    c54a:	4433      	add	r3, r6
    c54c:	2b01      	cmp	r3, #1
    c54e:	4635      	mov	r5, r6
    c550:	dc45      	bgt.n	c5de <cf_write+0xa6>
	cfg = find_cf_cfg(conn);
    c552:	f7ff ffc1 	bl	c4d8 <find_cf_cfg>
	if (!cfg) {
    c556:	4604      	mov	r4, r0
    c558:	b9d8      	cbnz	r0, c592 <cf_write+0x5a>
		cfg = find_cf_cfg(NULL);
    c55a:	f7ff ffbd 	bl	c4d8 <find_cf_cfg>
	if (!cfg) {
    c55e:	4604      	mov	r4, r0
    c560:	b9b8      	cbnz	r0, c592 <cf_write+0x5a>
    c562:	f01b fccd 	bl	27f00 <arch_is_user_context>
    c566:	4b21      	ldr	r3, [pc, #132]	; (c5ec <cf_write+0xb4>)
    c568:	4a21      	ldr	r2, [pc, #132]	; (c5f0 <cf_write+0xb8>)
    c56a:	1a9b      	subs	r3, r3, r2
    c56c:	08db      	lsrs	r3, r3, #3
		BT_WARN("No space to store Client Supported Features");
    c56e:	019b      	lsls	r3, r3, #6
    c570:	f043 0302 	orr.w	r3, r3, #2
    c574:	b140      	cbz	r0, c588 <cf_write+0x50>
    c576:	491f      	ldr	r1, [pc, #124]	; (c5f4 <cf_write+0xbc>)
    c578:	4618      	mov	r0, r3
    c57a:	f018 fc8c 	bl	24e96 <log_from_user>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    c57e:	f06f 0510 	mvn.w	r5, #16
}
    c582:	4628      	mov	r0, r5
    c584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_WARN("No space to store Client Supported Features");
    c588:	481a      	ldr	r0, [pc, #104]	; (c5f4 <cf_write+0xbc>)
    c58a:	4619      	mov	r1, r3
    c58c:	f018 fca9 	bl	24ee2 <log_0>
    c590:	e7f5      	b.n	c57e <cf_write+0x46>
{
    c592:	2300      	movs	r3, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
    c594:	b966      	cbnz	r6, c5b0 <cf_write+0x78>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    c596:	f107 0188 	add.w	r1, r7, #136	; 0x88
    c59a:	1c60      	adds	r0, r4, #1
    c59c:	f01b fd43 	bl	28026 <bt_addr_le_copy>
	cfg->id = conn->id;
    c5a0:	4620      	mov	r0, r4
    c5a2:	7a3b      	ldrb	r3, [r7, #8]
    c5a4:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    c5a8:	2100      	movs	r1, #0
    c5aa:	f01b fd2e 	bl	2800a <atomic_set_bit>
	return len;
    c5ae:	e7e8      	b.n	c582 <cf_write+0x4a>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
    c5b0:	7a21      	ldrb	r1, [r4, #8]
    c5b2:	fa21 f203 	lsr.w	r2, r1, r3
    c5b6:	07d0      	lsls	r0, r2, #31
    c5b8:	d504      	bpl.n	c5c4 <cf_write+0x8c>
		    !(value[i / 8] & BIT(i % 8))) {
    c5ba:	f898 2000 	ldrb.w	r2, [r8]
    c5be:	40da      	lsrs	r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
    c5c0:	07d2      	lsls	r2, r2, #31
    c5c2:	d50f      	bpl.n	c5e4 <cf_write+0xac>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
    c5c4:	3301      	adds	r3, #1
    c5c6:	2b03      	cmp	r3, #3
    c5c8:	d1e4      	bne.n	c594 <cf_write+0x5c>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
    c5ca:	f898 3000 	ldrb.w	r3, [r8]
    c5ce:	f003 0307 	and.w	r3, r3, #7
    c5d2:	4319      	orrs	r1, r3
    c5d4:	7221      	strb	r1, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
    c5d6:	e7de      	b.n	c596 <cf_write+0x5e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    c5d8:	f06f 0506 	mvn.w	r5, #6
    c5dc:	e7d1      	b.n	c582 <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    c5de:	f06f 050c 	mvn.w	r5, #12
    c5e2:	e7ce      	b.n	c582 <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
    c5e4:	f06f 0512 	mvn.w	r5, #18
    c5e8:	e7cb      	b.n	c582 <cf_write+0x4a>
    c5ea:	bf00      	nop
    c5ec:	0002a7a0 	.word	0x0002a7a0
    c5f0:	0002a6d0 	.word	0x0002a6d0
    c5f4:	0002e2bd 	.word	0x0002e2bd

0000c5f8 <sc_indicate_rsp>:
{
    c5f8:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c5fa:	4915      	ldr	r1, [pc, #84]	; (c650 <sc_indicate_rsp+0x58>)
    c5fc:	f3bf 8f5b 	dmb	ish
    c600:	4604      	mov	r4, r0
    c602:	f101 0350 	add.w	r3, r1, #80	; 0x50
    c606:	e853 2f00 	ldrex	r2, [r3]
    c60a:	f022 0202 	bic.w	r2, r2, #2
    c60e:	e843 2000 	strex	r0, r2, [r3]
    c612:	2800      	cmp	r0, #0
    c614:	d1f7      	bne.n	c606 <sc_indicate_rsp+0xe>
    c616:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c61a:	f3bf 8f5b 	dmb	ish
    c61e:	6d0b      	ldr	r3, [r1, #80]	; 0x50
    c620:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    c624:	07da      	lsls	r2, r3, #31
    c626:	d505      	bpl.n	c634 <sc_indicate_rsp+0x3c>
	return k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
    c628:	480a      	ldr	r0, [pc, #40]	; (c654 <sc_indicate_rsp+0x5c>)
    c62a:	2200      	movs	r2, #0
    c62c:	2300      	movs	r3, #0
    c62e:	3120      	adds	r1, #32
    c630:	f016 fb12 	bl	22c58 <k_work_reschedule_for_queue>
	cfg = find_cf_cfg(conn);
    c634:	4620      	mov	r0, r4
    c636:	f7ff ff4f 	bl	c4d8 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
    c63a:	b140      	cbz	r0, c64e <sc_indicate_rsp+0x56>
    c63c:	7a03      	ldrb	r3, [r0, #8]
    c63e:	07db      	lsls	r3, r3, #31
    c640:	d505      	bpl.n	c64e <sc_indicate_rsp+0x56>
}
    c642:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    c646:	2100      	movs	r1, #0
    c648:	300c      	adds	r0, #12
    c64a:	f01b bcde 	b.w	2800a <atomic_set_bit>
}
    c64e:	bd10      	pop	{r4, pc}
    c650:	200003e8 	.word	0x200003e8
    c654:	20000ac0 	.word	0x20000ac0

0000c658 <bt_gatt_attr_write_ccc>:
{
    c658:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    c65c:	461f      	mov	r7, r3
    c65e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
    c662:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
    c666:	4606      	mov	r6, r0
    c668:	4688      	mov	r8, r1
	if (offset) {
    c66a:	2b00      	cmp	r3, #0
    c66c:	d15a      	bne.n	c724 <bt_gatt_attr_write_ccc+0xcc>
	if (!len || len > sizeof(uint16_t)) {
    c66e:	1e7b      	subs	r3, r7, #1
    c670:	2b01      	cmp	r3, #1
    c672:	d85a      	bhi.n	c72a <bt_gatt_attr_write_ccc+0xd2>
	if (len < sizeof(uint16_t)) {
    c674:	2f01      	cmp	r7, #1
		value = *(uint8_t *)buf;
    c676:	7815      	ldrb	r5, [r2, #0]
    c678:	bf18      	it	ne
    c67a:	7852      	ldrbne	r2, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
    c67c:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
    c67e:	bf0c      	ite	eq
    c680:	b2ad      	uxtheq	r5, r5
    c682:	ea45 2502 	orrne.w	r5, r5, r2, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
    c686:	f01b fd8d 	bl	281a4 <find_ccc_cfg>
	if (!cfg) {
    c68a:	4604      	mov	r4, r0
    c68c:	bb30      	cbnz	r0, c6dc <bt_gatt_attr_write_ccc+0x84>
		if (!value) {
    c68e:	b91d      	cbnz	r5, c698 <bt_gatt_attr_write_ccc+0x40>
			return len;
    c690:	4638      	mov	r0, r7
}
    c692:	b003      	add	sp, #12
    c694:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
    c698:	4649      	mov	r1, r9
    c69a:	f01b fd83 	bl	281a4 <find_ccc_cfg>
		if (!cfg) {
    c69e:	4604      	mov	r4, r0
    c6a0:	b9a8      	cbnz	r0, c6ce <bt_gatt_attr_write_ccc+0x76>
    c6a2:	f01b fc2d 	bl	27f00 <arch_is_user_context>
    c6a6:	4b22      	ldr	r3, [pc, #136]	; (c730 <bt_gatt_attr_write_ccc+0xd8>)
    c6a8:	4a22      	ldr	r2, [pc, #136]	; (c734 <bt_gatt_attr_write_ccc+0xdc>)
    c6aa:	1a9b      	subs	r3, r3, r2
    c6ac:	08db      	lsrs	r3, r3, #3
			BT_WARN("No space to store CCC cfg");
    c6ae:	019b      	lsls	r3, r3, #6
    c6b0:	f043 0302 	orr.w	r3, r3, #2
    c6b4:	b130      	cbz	r0, c6c4 <bt_gatt_attr_write_ccc+0x6c>
    c6b6:	4920      	ldr	r1, [pc, #128]	; (c738 <bt_gatt_attr_write_ccc+0xe0>)
    c6b8:	4618      	mov	r0, r3
    c6ba:	f018 fbec 	bl	24e96 <log_from_user>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    c6be:	f06f 0010 	mvn.w	r0, #16
    c6c2:	e7e6      	b.n	c692 <bt_gatt_attr_write_ccc+0x3a>
			BT_WARN("No space to store CCC cfg");
    c6c4:	481c      	ldr	r0, [pc, #112]	; (c738 <bt_gatt_attr_write_ccc+0xe0>)
    c6c6:	4619      	mov	r1, r3
    c6c8:	f018 fc0b 	bl	24ee2 <log_0>
    c6cc:	e7f7      	b.n	c6be <bt_gatt_attr_write_ccc+0x66>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    c6ce:	f106 0188 	add.w	r1, r6, #136	; 0x88
    c6d2:	3001      	adds	r0, #1
    c6d4:	f01b fca7 	bl	28026 <bt_addr_le_copy>
		cfg->id = conn->id;
    c6d8:	7a33      	ldrb	r3, [r6, #8]
    c6da:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
    c6dc:	f8d9 301c 	ldr.w	r3, [r9, #28]
    c6e0:	b9a3      	cbnz	r3, c70c <bt_gatt_attr_write_ccc+0xb4>
	if (cfg->value != ccc->value) {
    c6e2:	f8b9 3014 	ldrh.w	r3, [r9, #20]
	cfg->value = value;
    c6e6:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
    c6e8:	42ab      	cmp	r3, r5
    c6ea:	d003      	beq.n	c6f4 <bt_gatt_attr_write_ccc+0x9c>
		gatt_ccc_changed(attr, ccc);
    c6ec:	4649      	mov	r1, r9
    c6ee:	4640      	mov	r0, r8
    c6f0:	f01b fc10 	bl	27f14 <gatt_ccc_changed>
	if (!value) {
    c6f4:	2d00      	cmp	r5, #0
    c6f6:	d1cb      	bne.n	c690 <bt_gatt_attr_write_ccc+0x38>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    c6f8:	4669      	mov	r1, sp
    c6fa:	1c60      	adds	r0, r4, #1
    c6fc:	9500      	str	r5, [sp, #0]
    c6fe:	f8cd 5003 	str.w	r5, [sp, #3]
    c702:	f01b fc90 	bl	28026 <bt_addr_le_copy>
	cfg->id = 0U;
    c706:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
    c708:	8125      	strh	r5, [r4, #8]
}
    c70a:	e7c1      	b.n	c690 <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
    c70c:	462a      	mov	r2, r5
    c70e:	4641      	mov	r1, r8
    c710:	4630      	mov	r0, r6
    c712:	4798      	blx	r3
		if (write < 0) {
    c714:	2800      	cmp	r0, #0
    c716:	dbbc      	blt.n	c692 <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
    c718:	3801      	subs	r0, #1
    c71a:	2801      	cmp	r0, #1
    c71c:	d9e1      	bls.n	c6e2 <bt_gatt_attr_write_ccc+0x8a>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
    c71e:	f06f 000d 	mvn.w	r0, #13
    c722:	e7b6      	b.n	c692 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    c724:	f06f 0006 	mvn.w	r0, #6
    c728:	e7b3      	b.n	c692 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    c72a:	f06f 000c 	mvn.w	r0, #12
    c72e:	e7b0      	b.n	c692 <bt_gatt_attr_write_ccc+0x3a>
    c730:	0002a7a0 	.word	0x0002a7a0
    c734:	0002a6d0 	.word	0x0002a6d0
    c738:	0002e2e9 	.word	0x0002e2e9

0000c73c <gatt_notify>:
{
    c73c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c740:	4614      	mov	r4, r2
				sizeof(*nfy) + params->len);
    c742:	8992      	ldrh	r2, [r2, #12]
{
    c744:	4688      	mov	r8, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    c746:	3202      	adds	r2, #2
    c748:	211b      	movs	r1, #27
{
    c74a:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    c74c:	f7ff faaa 	bl	bca4 <bt_att_create_pdu>
	if (!buf) {
    c750:	4605      	mov	r5, r0
    c752:	b9b0      	cbnz	r0, c782 <gatt_notify+0x46>
    c754:	f01b fbd4 	bl	27f00 <arch_is_user_context>
    c758:	4b17      	ldr	r3, [pc, #92]	; (c7b8 <gatt_notify+0x7c>)
    c75a:	4a18      	ldr	r2, [pc, #96]	; (c7bc <gatt_notify+0x80>)
    c75c:	1a9b      	subs	r3, r3, r2
    c75e:	08db      	lsrs	r3, r3, #3
		BT_WARN("No buffer available to send notification");
    c760:	019b      	lsls	r3, r3, #6
    c762:	f043 0302 	orr.w	r3, r3, #2
    c766:	b138      	cbz	r0, c778 <gatt_notify+0x3c>
    c768:	4915      	ldr	r1, [pc, #84]	; (c7c0 <gatt_notify+0x84>)
    c76a:	4618      	mov	r0, r3
    c76c:	f018 fb93 	bl	24e96 <log_from_user>
}
    c770:	f06f 000b 	mvn.w	r0, #11
    c774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		BT_WARN("No buffer available to send notification");
    c778:	4811      	ldr	r0, [pc, #68]	; (c7c0 <gatt_notify+0x84>)
    c77a:	4619      	mov	r1, r3
    c77c:	f018 fbb1 	bl	24ee2 <log_0>
		return -ENOMEM;
    c780:	e7f6      	b.n	c770 <gatt_notify+0x34>
    c782:	f100 0908 	add.w	r9, r0, #8
    c786:	2102      	movs	r1, #2
    c788:	4648      	mov	r0, r9
    c78a:	f01c fa8b 	bl	28ca4 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    c78e:	4606      	mov	r6, r0
    c790:	89a1      	ldrh	r1, [r4, #12]
    c792:	f826 8b02 	strh.w	r8, [r6], #2
    c796:	4648      	mov	r0, r9
    c798:	f01c fa84 	bl	28ca4 <net_buf_simple_add>
    c79c:	89a2      	ldrh	r2, [r4, #12]
    c79e:	68a1      	ldr	r1, [r4, #8]
    c7a0:	4630      	mov	r0, r6
    c7a2:	f01d fe1d 	bl	2a3e0 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
    c7a6:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    c7aa:	4629      	mov	r1, r5
    c7ac:	4638      	mov	r0, r7
}
    c7ae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
    c7b2:	f01b bb45 	b.w	27e40 <bt_att_send>
    c7b6:	bf00      	nop
    c7b8:	0002a7a0 	.word	0x0002a7a0
    c7bc:	0002a6d0 	.word	0x0002a6d0
    c7c0:	0002e303 	.word	0x0002e303

0000c7c4 <notify_cb>:

static uint8_t notify_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			 void *user_data)
{
    c7c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct notify_data *data = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    c7c8:	4b38      	ldr	r3, [pc, #224]	; (c8ac <notify_cb+0xe8>)
{
    c7ca:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    c7cc:	6882      	ldr	r2, [r0, #8]
    c7ce:	429a      	cmp	r2, r3
{
    c7d0:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    c7d2:	d003      	beq.n	c7dc <notify_cb+0x18>
		return BT_GATT_ITER_CONTINUE;
    c7d4:	2001      	movs	r0, #1

		data->err = 0;
	}

	return BT_GATT_ITER_CONTINUE;
}
    c7d6:	b003      	add	sp, #12
    c7d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc = attr->user_data;
    c7dc:	f8d0 900c 	ldr.w	r9, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
    c7e0:	4b33      	ldr	r3, [pc, #204]	; (c8b0 <notify_cb+0xec>)
    c7e2:	4599      	cmp	r9, r3
    c7e4:	d01a      	beq.n	c81c <notify_cb+0x58>
    c7e6:	f109 0701 	add.w	r7, r9, #1
    c7ea:	f109 0a15 	add.w	sl, r9, #21
    c7ee:	f04f 0b00 	mov.w	fp, #0
		if (cfg->value != data->type) {
    c7f2:	f8b7 2007 	ldrh.w	r2, [r7, #7]
    c7f6:	89a3      	ldrh	r3, [r4, #12]
    c7f8:	429a      	cmp	r2, r3
    c7fa:	d10b      	bne.n	c814 <notify_cb+0x50>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    c7fc:	f817 0c01 	ldrb.w	r0, [r7, #-1]
    c800:	4639      	mov	r1, r7
    c802:	f7fe f94f 	bl	aaa4 <bt_conn_lookup_addr_le>
		if (!conn) {
    c806:	4605      	mov	r5, r0
    c808:	b120      	cbz	r0, c814 <notify_cb+0x50>
		if (conn->state != BT_CONN_CONNECTED) {
    c80a:	7b43      	ldrb	r3, [r0, #13]
    c80c:	2b07      	cmp	r3, #7
    c80e:	d029      	beq.n	c864 <notify_cb+0xa0>
			bt_conn_unref(conn);
    c810:	f01a fe77 	bl	27502 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    c814:	370a      	adds	r7, #10
    c816:	4557      	cmp	r7, sl
    c818:	d0dc      	beq.n	c7d4 <notify_cb+0x10>
    c81a:	e7ea      	b.n	c7f2 <notify_cb+0x2e>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    c81c:	2600      	movs	r6, #0
    c81e:	4d25      	ldr	r5, [pc, #148]	; (c8b4 <notify_cb+0xf0>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    c820:	4637      	mov	r7, r6
    c822:	2207      	movs	r2, #7
    c824:	4669      	mov	r1, sp
    c826:	4628      	mov	r0, r5
    c828:	9700      	str	r7, [sp, #0]
    c82a:	f8cd 7003 	str.w	r7, [sp, #3]
    c82e:	f01d fdc9 	bl	2a3c4 <memcmp>
    c832:	b178      	cbz	r0, c854 <notify_cb+0x90>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
    c834:	f815 0c01 	ldrb.w	r0, [r5, #-1]
    c838:	2207      	movs	r2, #7
    c83a:	4629      	mov	r1, r5
    c83c:	f7fe f984 	bl	ab48 <bt_conn_lookup_state_le>
			if (!conn) {
    c840:	b968      	cbnz	r0, c85e <notify_cb+0x9a>
				sc = (struct sc_data *)data->ind_params->data;
    c842:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
    c844:	f815 0c01 	ldrb.w	r0, [r5, #-1]
				sc = (struct sc_data *)data->ind_params->data;
    c848:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
    c84a:	4629      	mov	r1, r5
    c84c:	8853      	ldrh	r3, [r2, #2]
    c84e:	8812      	ldrh	r2, [r2, #0]
    c850:	f7ff fe00 	bl	c454 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    c854:	350c      	adds	r5, #12
    c856:	2e00      	cmp	r6, #0
    c858:	d1c5      	bne.n	c7e6 <notify_cb+0x22>
    c85a:	2601      	movs	r6, #1
    c85c:	e7e1      	b.n	c822 <notify_cb+0x5e>
			bt_conn_unref(conn);
    c85e:	f01a fe50 	bl	27502 <bt_conn_unref>
    c862:	e7f7      	b.n	c854 <notify_cb+0x90>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    c864:	f8d9 3020 	ldr.w	r3, [r9, #32]
    c868:	b123      	cbz	r3, c874 <notify_cb+0xb0>
    c86a:	4641      	mov	r1, r8
    c86c:	4798      	blx	r3
    c86e:	b908      	cbnz	r0, c874 <notify_cb+0xb0>
			bt_conn_unref(conn);
    c870:	4628      	mov	r0, r5
    c872:	e7cd      	b.n	c810 <notify_cb+0x4c>
		if (data->type == BT_GATT_CCC_INDICATE) {
    c874:	89a3      	ldrh	r3, [r4, #12]
    c876:	88a1      	ldrh	r1, [r4, #4]
    c878:	6922      	ldr	r2, [r4, #16]
    c87a:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
    c87c:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
    c87e:	d10f      	bne.n	c8a0 <notify_cb+0xdc>
			err = gatt_indicate(conn, data->handle,
    c880:	f7ff fd54 	bl	c32c <gatt_indicate>
			if (err == 0) {
    c884:	4606      	mov	r6, r0
    c886:	b918      	cbnz	r0, c890 <notify_cb+0xcc>
				data->ind_params->_ref++;
    c888:	6922      	ldr	r2, [r4, #16]
    c88a:	7d93      	ldrb	r3, [r2, #22]
    c88c:	3301      	adds	r3, #1
    c88e:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
    c890:	4628      	mov	r0, r5
    c892:	f01a fe36 	bl	27502 <bt_conn_unref>
		if (err < 0) {
    c896:	2e00      	cmp	r6, #0
    c898:	db06      	blt.n	c8a8 <notify_cb+0xe4>
		data->err = 0;
    c89a:	f8c4 b008 	str.w	fp, [r4, #8]
    c89e:	e7b9      	b.n	c814 <notify_cb+0x50>
			err = gatt_notify(conn, data->handle, data->nfy_params);
    c8a0:	f7ff ff4c 	bl	c73c <gatt_notify>
    c8a4:	4606      	mov	r6, r0
    c8a6:	e7f3      	b.n	c890 <notify_cb+0xcc>
			return BT_GATT_ITER_STOP;
    c8a8:	2000      	movs	r0, #0
    c8aa:	e794      	b.n	c7d6 <notify_cb+0x12>
    c8ac:	0000c659 	.word	0x0000c659
    c8b0:	20007878 	.word	0x20007878
    c8b4:	2000250b 	.word	0x2000250b

0000c8b8 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
    c8b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    c8bc:	4b2a      	ldr	r3, [pc, #168]	; (c968 <disconnected_cb+0xb0>)
{
    c8be:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    c8c0:	6882      	ldr	r2, [r0, #8]
    c8c2:	429a      	cmp	r2, r3
{
    c8c4:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    c8c6:	d12f      	bne.n	c928 <disconnected_cb+0x70>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    c8c8:	68c5      	ldr	r5, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
    c8ca:	8aab      	ldrh	r3, [r5, #20]
    c8cc:	b363      	cbz	r3, c928 <disconnected_cb+0x70>
				bt_conn_unref(tmp);
			}
		} else {
			/* Clear value if not paired */
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
				if (ccc == &sc_ccc) {
    c8ce:	f8df b09c 	ldr.w	fp, [pc, #156]	; c96c <disconnected_cb+0xb4>
    c8d2:	1c6c      	adds	r4, r5, #1
    c8d4:	f105 0a15 	add.w	sl, r5, #21
	value_used = false;
    c8d8:	f04f 0800 	mov.w	r8, #0
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    c8dc:	f106 0988 	add.w	r9, r6, #136	; 0x88
		if (!cfg->value) {
    c8e0:	f8b4 3007 	ldrh.w	r3, [r4, #7]
    c8e4:	b19b      	cbz	r3, c90e <disconnected_cb+0x56>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    c8e6:	f814 1c01 	ldrb.w	r1, [r4, #-1]
    c8ea:	4622      	mov	r2, r4
    c8ec:	4630      	mov	r0, r6
    c8ee:	f01a fdcd 	bl	2748c <bt_conn_is_peer_addr_le>
    c8f2:	b9e8      	cbnz	r0, c930 <disconnected_cb+0x78>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    c8f4:	f814 0c01 	ldrb.w	r0, [r4, #-1]
    c8f8:	4621      	mov	r1, r4
    c8fa:	f7fe f8d3 	bl	aaa4 <bt_conn_lookup_addr_le>
			if (tmp) {
    c8fe:	b130      	cbz	r0, c90e <disconnected_cb+0x56>
				if (tmp->state == BT_CONN_CONNECTED) {
    c900:	7b43      	ldrb	r3, [r0, #13]
					value_used = true;
    c902:	2b07      	cmp	r3, #7
    c904:	bf08      	it	eq
    c906:	f04f 0801 	moveq.w	r8, #1
				bt_conn_unref(tmp);
    c90a:	f01a fdfa 	bl	27502 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    c90e:	340a      	adds	r4, #10
    c910:	4554      	cmp	r4, sl
    c912:	d1e5      	bne.n	c8e0 <disconnected_cb+0x28>
			}
		}
	}

	/* If all values are now disabled, reset value while disconnected */
	if (!value_used) {
    c914:	f1b8 0f00 	cmp.w	r8, #0
    c918:	d106      	bne.n	c928 <disconnected_cb+0x70>
		ccc->value = 0U;
		if (ccc->cfg_changed) {
    c91a:	69ab      	ldr	r3, [r5, #24]
		ccc->value = 0U;
    c91c:	f8a5 8014 	strh.w	r8, [r5, #20]
		if (ccc->cfg_changed) {
    c920:	b113      	cbz	r3, c928 <disconnected_cb+0x70>
			ccc->cfg_changed(attr, ccc->value);
    c922:	4641      	mov	r1, r8
    c924:	4638      	mov	r0, r7
    c926:	4798      	blx	r3

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
    c928:	2001      	movs	r0, #1
    c92a:	b003      	add	sp, #12
    c92c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    c930:	7a30      	ldrb	r0, [r6, #8]
    c932:	4649      	mov	r1, r9
    c934:	f01a fb1e 	bl	26f74 <bt_addr_le_is_bonded>
    c938:	b988      	cbnz	r0, c95e <disconnected_cb+0xa6>
				if (ccc == &sc_ccc) {
    c93a:	455d      	cmp	r5, fp
    c93c:	d102      	bne.n	c944 <disconnected_cb+0x8c>
					sc_clear(conn);
    c93e:	4630      	mov	r0, r6
    c940:	f01b fbe9 	bl	28116 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    c944:	2200      	movs	r2, #0
    c946:	4669      	mov	r1, sp
    c948:	4620      	mov	r0, r4
    c94a:	9200      	str	r2, [sp, #0]
    c94c:	f8cd 2003 	str.w	r2, [sp, #3]
    c950:	f01b fb69 	bl	28026 <bt_addr_le_copy>
	cfg->id = 0U;
    c954:	f804 2c01 	strb.w	r2, [r4, #-1]
	cfg->value = 0U;
    c958:	f8a4 2007 	strh.w	r2, [r4, #7]
}
    c95c:	e7d7      	b.n	c90e <disconnected_cb+0x56>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    c95e:	4649      	mov	r1, r9
    c960:	4620      	mov	r0, r4
    c962:	f01b fb60 	bl	28026 <bt_addr_le_copy>
    c966:	e7d2      	b.n	c90e <disconnected_cb+0x56>
    c968:	0000c659 	.word	0x0000c659
    c96c:	20007878 	.word	0x20007878

0000c970 <bt_gatt_init>:
{
    c970:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    c972:	4b1f      	ldr	r3, [pc, #124]	; (c9f0 <bt_gatt_init+0x80>)
    c974:	f3bf 8f5b 	dmb	ish
    c978:	2201      	movs	r2, #1
    c97a:	e853 1f00 	ldrex	r1, [r3]
    c97e:	2900      	cmp	r1, #0
    c980:	d103      	bne.n	c98a <bt_gatt_init+0x1a>
    c982:	e843 2000 	strex	r0, r2, [r3]
    c986:	2800      	cmp	r0, #0
    c988:	d1f7      	bne.n	c97a <bt_gatt_init+0xa>
    c98a:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
    c98e:	d12d      	bne.n	c9ec <bt_gatt_init+0x7c>
    c990:	f3bf 8f5b 	dmb	ish
    c994:	4b17      	ldr	r3, [pc, #92]	; (c9f4 <bt_gatt_init+0x84>)
    c996:	e853 1f00 	ldrex	r1, [r3]
    c99a:	2900      	cmp	r1, #0
    c99c:	d103      	bne.n	c9a6 <bt_gatt_init+0x36>
    c99e:	e843 2000 	strex	r0, r2, [r3]
    c9a2:	2800      	cmp	r0, #0
    c9a4:	d1f7      	bne.n	c996 <bt_gatt_init+0x26>
    c9a6:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
    c9aa:	d108      	bne.n	c9be <bt_gatt_init+0x4e>
    c9ac:	4a12      	ldr	r2, [pc, #72]	; (c9f8 <bt_gatt_init+0x88>)
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    c9ae:	4913      	ldr	r1, [pc, #76]	; (c9fc <bt_gatt_init+0x8c>)
    c9b0:	8813      	ldrh	r3, [r2, #0]
    c9b2:	4c13      	ldr	r4, [pc, #76]	; (ca00 <bt_gatt_init+0x90>)
	if (!atomic_cas(&service_init, 0, 1)) {
    c9b4:	2000      	movs	r0, #0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    c9b6:	42a1      	cmp	r1, r4
    c9b8:	d312      	bcc.n	c9e0 <bt_gatt_init+0x70>
    c9ba:	b100      	cbz	r0, c9be <bt_gatt_init+0x4e>
    c9bc:	8013      	strh	r3, [r2, #0]
	k_work_init_delayable(&work->work, handler);
    c9be:	4911      	ldr	r1, [pc, #68]	; (ca04 <bt_gatt_init+0x94>)
    c9c0:	4811      	ldr	r0, [pc, #68]	; (ca08 <bt_gatt_init+0x98>)
    c9c2:	f01d f937 	bl	29c34 <k_work_init_delayable>
	return k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
    c9c6:	4910      	ldr	r1, [pc, #64]	; (ca08 <bt_gatt_init+0x98>)
    c9c8:	4810      	ldr	r0, [pc, #64]	; (ca0c <bt_gatt_init+0x9c>)
    c9ca:	f44f 72a4 	mov.w	r2, #328	; 0x148
    c9ce:	2300      	movs	r3, #0
    c9d0:	f016 f942 	bl	22c58 <k_work_reschedule_for_queue>
}
    c9d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&work->work, handler);
    c9d8:	490d      	ldr	r1, [pc, #52]	; (ca10 <bt_gatt_init+0xa0>)
    c9da:	480e      	ldr	r0, [pc, #56]	; (ca14 <bt_gatt_init+0xa4>)
    c9dc:	f01d b92a 	b.w	29c34 <k_work_init_delayable>
		last_static_handle += svc->attr_count;
    c9e0:	6848      	ldr	r0, [r1, #4]
    c9e2:	4403      	add	r3, r0
    c9e4:	b29b      	uxth	r3, r3
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    c9e6:	3108      	adds	r1, #8
    c9e8:	2001      	movs	r0, #1
    c9ea:	e7e4      	b.n	c9b6 <bt_gatt_init+0x46>
}
    c9ec:	bd10      	pop	{r4, pc}
    c9ee:	bf00      	nop
    c9f0:	20000ea4 	.word	0x20000ea4
    c9f4:	20000ec0 	.word	0x20000ec0
    c9f8:	20002508 	.word	0x20002508
    c9fc:	0002a6b0 	.word	0x0002a6b0
    ca00:	0002a6d0 	.word	0x0002a6d0
    ca04:	000282e5 	.word	0x000282e5
    ca08:	200003b8 	.word	0x200003b8
    ca0c:	20000ac0 	.word	0x20000ac0
    ca10:	0000cdb9 	.word	0x0000cdb9
    ca14:	20000408 	.word	0x20000408

0000ca18 <bt_gatt_attr_get_handle>:
{
    ca18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
    ca1c:	4603      	mov	r3, r0
    ca1e:	b148      	cbz	r0, ca34 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
    ca20:	8a00      	ldrh	r0, [r0, #16]
    ca22:	b938      	cbnz	r0, ca34 <bt_gatt_attr_get_handle+0x1c>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    ca24:	4912      	ldr	r1, [pc, #72]	; (ca70 <bt_gatt_attr_get_handle+0x58>)
    ca26:	f8df e04c 	ldr.w	lr, [pc, #76]	; ca74 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
    ca2a:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    ca2c:	f04f 0c14 	mov.w	ip, #20
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    ca30:	4571      	cmp	r1, lr
    ca32:	d301      	bcc.n	ca38 <bt_gatt_attr_get_handle+0x20>
}
    ca34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((attr < &static_svc->attrs[0]) ||
    ca38:	e9d1 7600 	ldrd	r7, r6, [r1]
    ca3c:	42bb      	cmp	r3, r7
    ca3e:	d304      	bcc.n	ca4a <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    ca40:	fb0c 7206 	mla	r2, ip, r6, r7
    ca44:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
    ca46:	4293      	cmp	r3, r2
    ca48:	d90e      	bls.n	ca68 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
    ca4a:	19a2      	adds	r2, r4, r6
    ca4c:	b292      	uxth	r2, r2
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    ca4e:	3108      	adds	r1, #8
    ca50:	4614      	mov	r4, r2
    ca52:	e7ed      	b.n	ca30 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
    ca54:	fb0c 7805 	mla	r8, ip, r5, r7
    ca58:	4543      	cmp	r3, r8
    ca5a:	d007      	beq.n	ca6c <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    ca5c:	3501      	adds	r5, #1
    ca5e:	1962      	adds	r2, r4, r5
    ca60:	42b5      	cmp	r5, r6
    ca62:	b292      	uxth	r2, r2
    ca64:	d1f6      	bne.n	ca54 <bt_gatt_attr_get_handle+0x3c>
    ca66:	e7f2      	b.n	ca4e <bt_gatt_attr_get_handle+0x36>
    ca68:	2500      	movs	r5, #0
    ca6a:	e7f8      	b.n	ca5e <bt_gatt_attr_get_handle+0x46>
    ca6c:	4610      	mov	r0, r2
    ca6e:	e7e1      	b.n	ca34 <bt_gatt_attr_get_handle+0x1c>
    ca70:	0002a6b0 	.word	0x0002a6b0
    ca74:	0002a6d0 	.word	0x0002a6d0

0000ca78 <bt_gatt_foreach_attr_type>:
{
    ca78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ca7c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
    ca80:	9100      	str	r1, [sp, #0]
    ca82:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
    ca84:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ca88:	2d00      	cmp	r5, #0
    ca8a:	bf08      	it	eq
    ca8c:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
    ca8e:	4b24      	ldr	r3, [pc, #144]	; (cb20 <bt_gatt_foreach_attr_type+0xa8>)
    ca90:	881b      	ldrh	r3, [r3, #0]
    ca92:	4283      	cmp	r3, r0
{
    ca94:	4607      	mov	r7, r0
    ca96:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
    ca98:	d23c      	bcs.n	cb14 <bt_gatt_foreach_attr_type+0x9c>
}
    ca9a:	b003      	add	sp, #12
    ca9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
    caa0:	6873      	ldr	r3, [r6, #4]
    caa2:	4423      	add	r3, r4
    caa4:	42bb      	cmp	r3, r7
    caa6:	d232      	bcs.n	cb0e <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
    caa8:	b29c      	uxth	r4, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    caaa:	3608      	adds	r6, #8
    caac:	4b1d      	ldr	r3, [pc, #116]	; (cb24 <bt_gatt_foreach_attr_type+0xac>)
    caae:	429e      	cmp	r6, r3
    cab0:	d3f6      	bcc.n	caa0 <bt_gatt_foreach_attr_type+0x28>
    cab2:	e7f2      	b.n	ca9a <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    cab4:	5889      	ldr	r1, [r1, r2]
    cab6:	9301      	str	r3, [sp, #4]
    cab8:	4640      	mov	r0, r8
    caba:	f01a f8b8 	bl	26c2e <bt_uuid_cmp>
    cabe:	9b01      	ldr	r3, [sp, #4]
    cac0:	b190      	cbz	r0, cae8 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    cac2:	3401      	adds	r4, #1
    cac4:	f10a 0a01 	add.w	sl, sl, #1
    cac8:	b2a4      	uxth	r4, r4
    caca:	6873      	ldr	r3, [r6, #4]
    cacc:	4553      	cmp	r3, sl
    cace:	d9ec      	bls.n	caaa <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
    cad0:	9b00      	ldr	r3, [sp, #0]
    cad2:	429c      	cmp	r4, r3
    cad4:	d8e1      	bhi.n	ca9a <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
    cad6:	42bc      	cmp	r4, r7
    cad8:	d3f3      	bcc.n	cac2 <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    cada:	6831      	ldr	r1, [r6, #0]
    cadc:	fb0b f20a 	mul.w	r2, fp, sl
    cae0:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    cae2:	f1b8 0f00 	cmp.w	r8, #0
    cae6:	d1e5      	bne.n	cab4 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
    cae8:	f1b9 0f00 	cmp.w	r9, #0
    caec:	d10b      	bne.n	cb06 <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
    caee:	3d01      	subs	r5, #1
    caf0:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
    caf2:	4618      	mov	r0, r3
    caf4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    caf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    caf8:	4621      	mov	r1, r4
    cafa:	4798      	blx	r3
	if (!*num_matches) {
    cafc:	2d00      	cmp	r5, #0
    cafe:	d0cc      	beq.n	ca9a <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    cb00:	2800      	cmp	r0, #0
    cb02:	d1de      	bne.n	cac2 <bt_gatt_foreach_attr_type+0x4a>
    cb04:	e7c9      	b.n	ca9a <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
    cb06:	68da      	ldr	r2, [r3, #12]
    cb08:	4591      	cmp	r9, r2
    cb0a:	d1da      	bne.n	cac2 <bt_gatt_foreach_attr_type+0x4a>
    cb0c:	e7ef      	b.n	caee <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    cb0e:	f04f 0a00 	mov.w	sl, #0
    cb12:	e7da      	b.n	caca <bt_gatt_foreach_attr_type+0x52>
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    cb14:	4e04      	ldr	r6, [pc, #16]	; (cb28 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
    cb16:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
    cb18:	f04f 0b14 	mov.w	fp, #20
    cb1c:	e7c6      	b.n	caac <bt_gatt_foreach_attr_type+0x34>
    cb1e:	bf00      	nop
    cb20:	20002508 	.word	0x20002508
    cb24:	0002a6d0 	.word	0x0002a6d0
    cb28:	0002a6b0 	.word	0x0002a6b0

0000cb2c <db_hash_gen.isra.0>:
static void db_hash_gen(bool store)
    cb2c:	b510      	push	{r4, lr}
    cb2e:	b0c8      	sub	sp, #288	; 0x120
	uint8_t key[16] = {};
    cb30:	2300      	movs	r3, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    cb32:	aa1c      	add	r2, sp, #112	; 0x70
    cb34:	4669      	mov	r1, sp
    cb36:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
    cb38:	e9cd 3300 	strd	r3, r3, [sp]
    cb3c:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    cb40:	f019 fea6 	bl	26890 <tc_cmac_setup>
    cb44:	b9a0      	cbnz	r0, cb70 <db_hash_gen.isra.0+0x44>
    cb46:	f01b f9db 	bl	27f00 <arch_is_user_context>
    cb4a:	4b1d      	ldr	r3, [pc, #116]	; (cbc0 <db_hash_gen.isra.0+0x94>)
    cb4c:	4a1d      	ldr	r2, [pc, #116]	; (cbc4 <db_hash_gen.isra.0+0x98>)
    cb4e:	1a9b      	subs	r3, r3, r2
    cb50:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to setup AES CMAC");
    cb52:	019b      	lsls	r3, r3, #6
    cb54:	f043 0301 	orr.w	r3, r3, #1
    cb58:	b128      	cbz	r0, cb66 <db_hash_gen.isra.0+0x3a>
    cb5a:	491b      	ldr	r1, [pc, #108]	; (cbc8 <db_hash_gen.isra.0+0x9c>)
		BT_ERR("Unable to calculate hash");
    cb5c:	4618      	mov	r0, r3
    cb5e:	f018 f99a 	bl	24e96 <log_from_user>
}
    cb62:	b048      	add	sp, #288	; 0x120
    cb64:	bd10      	pop	{r4, pc}
		BT_ERR("Unable to setup AES CMAC");
    cb66:	4818      	ldr	r0, [pc, #96]	; (cbc8 <db_hash_gen.isra.0+0x9c>)
    cb68:	4619      	mov	r1, r3
		BT_ERR("Unable to calculate hash");
    cb6a:	f018 f9ba 	bl	24ee2 <log_0>
		return;
    cb6e:	e7f8      	b.n	cb62 <db_hash_gen.isra.0+0x36>
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
    cb70:	f64f 71ff 	movw	r1, #65535	; 0xffff
    cb74:	2001      	movs	r0, #1
    cb76:	4a15      	ldr	r2, [pc, #84]	; (cbcc <db_hash_gen.isra.0+0xa0>)
    cb78:	ab04      	add	r3, sp, #16
    cb7a:	f01b fba8 	bl	282ce <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    cb7e:	4814      	ldr	r0, [pc, #80]	; (cbd0 <db_hash_gen.isra.0+0xa4>)
    cb80:	a904      	add	r1, sp, #16
    cb82:	f019 ff1c 	bl	269be <tc_cmac_final>
    cb86:	b970      	cbnz	r0, cba6 <db_hash_gen.isra.0+0x7a>
    cb88:	f01b f9ba 	bl	27f00 <arch_is_user_context>
    cb8c:	4b0c      	ldr	r3, [pc, #48]	; (cbc0 <db_hash_gen.isra.0+0x94>)
    cb8e:	4a0d      	ldr	r2, [pc, #52]	; (cbc4 <db_hash_gen.isra.0+0x98>)
    cb90:	1a9b      	subs	r3, r3, r2
    cb92:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to calculate hash");
    cb94:	019b      	lsls	r3, r3, #6
    cb96:	f043 0301 	orr.w	r3, r3, #1
    cb9a:	b108      	cbz	r0, cba0 <db_hash_gen.isra.0+0x74>
    cb9c:	490d      	ldr	r1, [pc, #52]	; (cbd4 <db_hash_gen.isra.0+0xa8>)
    cb9e:	e7dd      	b.n	cb5c <db_hash_gen.isra.0+0x30>
    cba0:	480c      	ldr	r0, [pc, #48]	; (cbd4 <db_hash_gen.isra.0+0xa8>)
    cba2:	4619      	mov	r1, r3
    cba4:	e7e1      	b.n	cb6a <db_hash_gen.isra.0+0x3e>
    cba6:	4b0a      	ldr	r3, [pc, #40]	; (cbd0 <db_hash_gen.isra.0+0xa4>)
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    cba8:	2208      	movs	r2, #8
    cbaa:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
    cbae:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
    cbb0:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    cbb4:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
    cbb8:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
    cbba:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
    cbbc:	d1f7      	bne.n	cbae <db_hash_gen.isra.0+0x82>
    cbbe:	e7d0      	b.n	cb62 <db_hash_gen.isra.0+0x36>
    cbc0:	0002a7a0 	.word	0x0002a7a0
    cbc4:	0002a6d0 	.word	0x0002a6d0
    cbc8:	0002e32c 	.word	0x0002e32c
    cbcc:	00027f5f 	.word	0x00027f5f
    cbd0:	20002a94 	.word	0x20002a94
    cbd4:	0002e345 	.word	0x0002e345

0000cbd8 <bt_gatt_notify_cb>:
{
    cbd8:	b530      	push	{r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    cbda:	4b37      	ldr	r3, [pc, #220]	; (ccb8 <bt_gatt_notify_cb+0xe0>)
    cbdc:	f3bf 8f5b 	dmb	ish
    cbe0:	681b      	ldr	r3, [r3, #0]
    cbe2:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    cbe6:	079a      	lsls	r2, r3, #30
{
    cbe8:	b08b      	sub	sp, #44	; 0x2c
    cbea:	4604      	mov	r4, r0
    cbec:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    cbee:	d55d      	bpl.n	ccac <bt_gatt_notify_cb+0xd4>
	data.attr = params->attr;
    cbf0:	6848      	ldr	r0, [r1, #4]
    cbf2:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    cbf4:	b114      	cbz	r4, cbfc <bt_gatt_notify_cb+0x24>
    cbf6:	7b63      	ldrb	r3, [r4, #13]
    cbf8:	2b07      	cmp	r3, #7
    cbfa:	d15a      	bne.n	ccb2 <bt_gatt_notify_cb+0xda>
	data.handle = bt_gatt_attr_get_handle(data.attr);
    cbfc:	f7ff ff0c 	bl	ca18 <bt_gatt_attr_get_handle>
    cc00:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
    cc04:	b918      	cbnz	r0, cc0e <bt_gatt_notify_cb+0x36>
		return -ENOENT;
    cc06:	f06f 0001 	mvn.w	r0, #1
}
    cc0a:	b00b      	add	sp, #44	; 0x2c
    cc0c:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
    cc0e:	682a      	ldr	r2, [r5, #0]
    cc10:	b9aa      	cbnz	r2, cc3e <bt_gatt_notify_cb+0x66>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    cc12:	9b05      	ldr	r3, [sp, #20]
    cc14:	6818      	ldr	r0, [r3, #0]
    cc16:	2300      	movs	r3, #0
    cc18:	f88d 3010 	strb.w	r3, [sp, #16]
    cc1c:	a904      	add	r1, sp, #16
    cc1e:	f642 0303 	movw	r3, #10243	; 0x2803
    cc22:	f8ad 3012 	strh.w	r3, [sp, #18]
    cc26:	f01a f802 	bl	26c2e <bt_uuid_cmp>
    cc2a:	b1c0      	cbz	r0, cc5e <bt_gatt_notify_cb+0x86>
	if (conn) {
    cc2c:	f8bd 0018 	ldrh.w	r0, [sp, #24]
    cc30:	b314      	cbz	r4, cc78 <bt_gatt_notify_cb+0xa0>
		return gatt_notify(conn, data.handle, params);
    cc32:	4601      	mov	r1, r0
    cc34:	462a      	mov	r2, r5
    cc36:	4620      	mov	r0, r4
    cc38:	f7ff fd80 	bl	c73c <gatt_notify>
    cc3c:	e7e5      	b.n	cc0a <bt_gatt_notify_cb+0x32>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    cc3e:	a905      	add	r1, sp, #20
    cc40:	9102      	str	r1, [sp, #8]
    cc42:	491e      	ldr	r1, [pc, #120]	; (ccbc <bt_gatt_notify_cb+0xe4>)
    cc44:	9101      	str	r1, [sp, #4]
    cc46:	2101      	movs	r1, #1
	found->attr = NULL;
    cc48:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    cc4a:	9100      	str	r1, [sp, #0]
    cc4c:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    cc50:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    cc52:	f7ff ff11 	bl	ca78 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    cc56:	9b05      	ldr	r3, [sp, #20]
    cc58:	2b00      	cmp	r3, #0
    cc5a:	d1da      	bne.n	cc12 <bt_gatt_notify_cb+0x3a>
    cc5c:	e7d3      	b.n	cc06 <bt_gatt_notify_cb+0x2e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    cc5e:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
    cc60:	68c3      	ldr	r3, [r0, #12]
    cc62:	799b      	ldrb	r3, [r3, #6]
    cc64:	06db      	lsls	r3, r3, #27
    cc66:	d402      	bmi.n	cc6e <bt_gatt_notify_cb+0x96>
			return -EINVAL;
    cc68:	f06f 0015 	mvn.w	r0, #21
    cc6c:	e7cd      	b.n	cc0a <bt_gatt_notify_cb+0x32>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    cc6e:	f01b fae7 	bl	28240 <bt_gatt_attr_value_handle>
    cc72:	f8ad 0018 	strh.w	r0, [sp, #24]
    cc76:	e7d9      	b.n	cc2c <bt_gatt_notify_cb+0x54>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    cc78:	f642 1202 	movw	r2, #10498	; 0x2902
    cc7c:	f8ad 2012 	strh.w	r2, [sp, #18]
    cc80:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
    cc82:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    cc86:	9202      	str	r2, [sp, #8]
    cc88:	4a0d      	ldr	r2, [pc, #52]	; (ccc0 <bt_gatt_notify_cb+0xe8>)
	data.err = -ENOTCONN;
    cc8a:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
    cc8c:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    cc8e:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
    cc92:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    cc96:	aa04      	add	r2, sp, #16
    cc98:	4623      	mov	r3, r4
    cc9a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
    cc9e:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    cca0:	f88d 4010 	strb.w	r4, [sp, #16]
    cca4:	f7ff fee8 	bl	ca78 <bt_gatt_foreach_attr_type>
	return data.err;
    cca8:	9807      	ldr	r0, [sp, #28]
    ccaa:	e7ae      	b.n	cc0a <bt_gatt_notify_cb+0x32>
		return -EAGAIN;
    ccac:	f06f 000a 	mvn.w	r0, #10
    ccb0:	e7ab      	b.n	cc0a <bt_gatt_notify_cb+0x32>
		return -ENOTCONN;
    ccb2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    ccb6:	e7a8      	b.n	cc0a <bt_gatt_notify_cb+0x32>
    ccb8:	20007698 	.word	0x20007698
    ccbc:	00027f57 	.word	0x00027f57
    ccc0:	0000c7c5 	.word	0x0000c7c5

0000ccc4 <bt_gatt_indicate>:
{
    ccc4:	b530      	push	{r4, r5, lr}
    ccc6:	4b39      	ldr	r3, [pc, #228]	; (cdac <bt_gatt_indicate+0xe8>)
    ccc8:	f3bf 8f5b 	dmb	ish
    cccc:	681b      	ldr	r3, [r3, #0]
    ccce:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    ccd2:	079a      	lsls	r2, r3, #30
{
    ccd4:	b08b      	sub	sp, #44	; 0x2c
    ccd6:	4604      	mov	r4, r0
    ccd8:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    ccda:	d561      	bpl.n	cda0 <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
    ccdc:	6848      	ldr	r0, [r1, #4]
    ccde:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    cce0:	b114      	cbz	r4, cce8 <bt_gatt_indicate+0x24>
    cce2:	7b63      	ldrb	r3, [r4, #13]
    cce4:	2b07      	cmp	r3, #7
    cce6:	d15e      	bne.n	cda6 <bt_gatt_indicate+0xe2>
	data.handle = bt_gatt_attr_get_handle(data.attr);
    cce8:	f7ff fe96 	bl	ca18 <bt_gatt_attr_get_handle>
    ccec:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
    ccf0:	b918      	cbnz	r0, ccfa <bt_gatt_indicate+0x36>
		return -ENOENT;
    ccf2:	f06f 0001 	mvn.w	r0, #1
}
    ccf6:	b00b      	add	sp, #44	; 0x2c
    ccf8:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
    ccfa:	682a      	ldr	r2, [r5, #0]
    ccfc:	b9ba      	cbnz	r2, cd2e <bt_gatt_indicate+0x6a>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    ccfe:	9b05      	ldr	r3, [sp, #20]
    cd00:	6818      	ldr	r0, [r3, #0]
    cd02:	2300      	movs	r3, #0
    cd04:	f88d 3010 	strb.w	r3, [sp, #16]
    cd08:	a904      	add	r1, sp, #16
    cd0a:	f642 0303 	movw	r3, #10243	; 0x2803
    cd0e:	f8ad 3012 	strh.w	r3, [sp, #18]
    cd12:	f019 ff8c 	bl	26c2e <bt_uuid_cmp>
    cd16:	b1d0      	cbz	r0, cd4e <bt_gatt_indicate+0x8a>
	if (conn) {
    cd18:	f8bd 0018 	ldrh.w	r0, [sp, #24]
    cd1c:	b324      	cbz	r4, cd68 <bt_gatt_indicate+0xa4>
		params->_ref = 1;
    cd1e:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
    cd20:	4601      	mov	r1, r0
		params->_ref = 1;
    cd22:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
    cd24:	462a      	mov	r2, r5
    cd26:	4620      	mov	r0, r4
    cd28:	f7ff fb00 	bl	c32c <gatt_indicate>
    cd2c:	e7e3      	b.n	ccf6 <bt_gatt_indicate+0x32>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    cd2e:	a905      	add	r1, sp, #20
    cd30:	9102      	str	r1, [sp, #8]
    cd32:	491f      	ldr	r1, [pc, #124]	; (cdb0 <bt_gatt_indicate+0xec>)
    cd34:	9101      	str	r1, [sp, #4]
    cd36:	2101      	movs	r1, #1
	found->attr = NULL;
    cd38:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    cd3a:	9100      	str	r1, [sp, #0]
    cd3c:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    cd40:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    cd42:	f7ff fe99 	bl	ca78 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    cd46:	9b05      	ldr	r3, [sp, #20]
    cd48:	2b00      	cmp	r3, #0
    cd4a:	d1d8      	bne.n	ccfe <bt_gatt_indicate+0x3a>
    cd4c:	e7d1      	b.n	ccf2 <bt_gatt_indicate+0x2e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    cd4e:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    cd50:	68c3      	ldr	r3, [r0, #12]
    cd52:	799b      	ldrb	r3, [r3, #6]
    cd54:	069b      	lsls	r3, r3, #26
    cd56:	d402      	bmi.n	cd5e <bt_gatt_indicate+0x9a>
			return -EINVAL;
    cd58:	f06f 0015 	mvn.w	r0, #21
    cd5c:	e7cb      	b.n	ccf6 <bt_gatt_indicate+0x32>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    cd5e:	f01b fa6f 	bl	28240 <bt_gatt_attr_value_handle>
    cd62:	f8ad 0018 	strh.w	r0, [sp, #24]
    cd66:	e7d7      	b.n	cd18 <bt_gatt_indicate+0x54>
	data.err = -ENOTCONN;
    cd68:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    cd6c:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
    cd6e:	2302      	movs	r3, #2
    cd70:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    cd74:	f642 1302 	movw	r3, #10498	; 0x2902
    cd78:	f8ad 3012 	strh.w	r3, [sp, #18]
    cd7c:	ab05      	add	r3, sp, #20
    cd7e:	9302      	str	r3, [sp, #8]
    cd80:	4b0c      	ldr	r3, [pc, #48]	; (cdb4 <bt_gatt_indicate+0xf0>)
    cd82:	9301      	str	r3, [sp, #4]
    cd84:	2301      	movs	r3, #1
    cd86:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
    cd88:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    cd8a:	4623      	mov	r3, r4
    cd8c:	aa04      	add	r2, sp, #16
    cd8e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
    cd92:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    cd94:	f88d 4010 	strb.w	r4, [sp, #16]
    cd98:	f7ff fe6e 	bl	ca78 <bt_gatt_foreach_attr_type>
	return data.err;
    cd9c:	9807      	ldr	r0, [sp, #28]
    cd9e:	e7aa      	b.n	ccf6 <bt_gatt_indicate+0x32>
		return -EAGAIN;
    cda0:	f06f 000a 	mvn.w	r0, #10
    cda4:	e7a7      	b.n	ccf6 <bt_gatt_indicate+0x32>
		return -ENOTCONN;
    cda6:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    cdaa:	e7a4      	b.n	ccf6 <bt_gatt_indicate+0x32>
    cdac:	20007698 	.word	0x20007698
    cdb0:	00027f57 	.word	0x00027f57
    cdb4:	0000c7c5 	.word	0x0000c7c5

0000cdb8 <sc_process>:
{
    cdb8:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    cdba:	f850 2c08 	ldr.w	r2, [r0, #-8]
    cdbe:	9201      	str	r2, [sp, #4]
{
    cdc0:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    cdc2:	f1a0 0120 	sub.w	r1, r0, #32
    cdc6:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    cdca:	f3bf 8f5b 	dmb	ish
    cdce:	e854 2f00 	ldrex	r2, [r4]
    cdd2:	f022 0201 	bic.w	r2, r2, #1
    cdd6:	e844 2000 	strex	r0, r2, [r4]
    cdda:	2800      	cmp	r0, #0
    cddc:	d1f7      	bne.n	cdce <sc_process+0x16>
    cdde:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
    cde2:	4a0d      	ldr	r2, [pc, #52]	; (ce18 <sc_process+0x60>)
    cde4:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
    cde8:	4a0c      	ldr	r2, [pc, #48]	; (ce1c <sc_process+0x64>)
    cdea:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
    cdee:	aa01      	add	r2, sp, #4
	sc->start = 0U;
    cdf0:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
    cdf2:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
    cdf6:	2204      	movs	r2, #4
	sc->start = 0U;
    cdf8:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
    cdfc:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
    ce00:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    ce04:	f7ff ff5e 	bl	ccc4 <bt_gatt_indicate>
    ce08:	b918      	cbnz	r0, ce12 <sc_process+0x5a>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
    ce0a:	2101      	movs	r1, #1
    ce0c:	4620      	mov	r0, r4
    ce0e:	f01b f8fc 	bl	2800a <atomic_set_bit>
}
    ce12:	b002      	add	sp, #8
    ce14:	bd10      	pop	{r4, pc}
    ce16:	bf00      	nop
    ce18:	0002aee8 	.word	0x0002aee8
    ce1c:	0000c5f9 	.word	0x0000c5f9

0000ce20 <update_ccc>:
{
    ce20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    ce24:	4b4a      	ldr	r3, [pc, #296]	; (cf50 <update_ccc+0x130>)
{
    ce26:	4690      	mov	r8, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    ce28:	6882      	ldr	r2, [r0, #8]
    ce2a:	429a      	cmp	r2, r3
{
    ce2c:	b085      	sub	sp, #20
    ce2e:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    ce30:	f040 8085 	bne.w	cf3e <update_ccc+0x11e>
	ccc = attr->user_data;
    ce34:	f8d0 900c 	ldr.w	r9, [r0, #12]
    ce38:	4c46      	ldr	r4, [pc, #280]	; (cf54 <update_ccc+0x134>)
    ce3a:	4847      	ldr	r0, [pc, #284]	; (cf58 <update_ccc+0x138>)
	struct bt_conn *conn = data->conn;
    ce3c:	f8d8 6000 	ldr.w	r6, [r8]
				BT_WARN("CCC %p not writable", attr);
    ce40:	f8df b12c 	ldr.w	fp, [pc, #300]	; cf70 <update_ccc+0x150>
    ce44:	1a24      	subs	r4, r4, r0
    ce46:	08e4      	lsrs	r4, r4, #3
    ce48:	f109 0315 	add.w	r3, r9, #21
    ce4c:	ea4f 1a84 	mov.w	sl, r4, lsl #6
    ce50:	f109 0701 	add.w	r7, r9, #1
    ce54:	9300      	str	r3, [sp, #0]
    ce56:	f04a 0a02 	orr.w	sl, sl, #2
		if (!cfg->value ||
    ce5a:	f8b7 3007 	ldrh.w	r3, [r7, #7]
    ce5e:	b1b3      	cbz	r3, ce8e <update_ccc+0x6e>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    ce60:	f817 1c01 	ldrb.w	r1, [r7, #-1]
    ce64:	463a      	mov	r2, r7
    ce66:	4630      	mov	r0, r6
    ce68:	f01a fb10 	bl	2748c <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
    ce6c:	b178      	cbz	r0, ce8e <update_ccc+0x6e>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
    ce6e:	222a      	movs	r2, #42	; 0x2a
    ce70:	4629      	mov	r1, r5
    ce72:	4630      	mov	r0, r6
    ce74:	f01b fa38 	bl	282e8 <bt_gatt_check_perm>
		if (err) {
    ce78:	b330      	cbz	r0, cec8 <update_ccc+0xa8>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
    ce7a:	2803      	cmp	r0, #3
    ce7c:	d112      	bne.n	cea4 <update_ccc+0x84>
    ce7e:	f01b f83f 	bl	27f00 <arch_is_user_context>
				BT_WARN("CCC %p not writable", attr);
    ce82:	b148      	cbz	r0, ce98 <update_ccc+0x78>
    ce84:	462a      	mov	r2, r5
    ce86:	4659      	mov	r1, fp
    ce88:	4650      	mov	r0, sl
    ce8a:	f018 f804 	bl	24e96 <log_from_user>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    ce8e:	9b00      	ldr	r3, [sp, #0]
    ce90:	370a      	adds	r7, #10
    ce92:	429f      	cmp	r7, r3
    ce94:	d053      	beq.n	cf3e <update_ccc+0x11e>
    ce96:	e7e0      	b.n	ce5a <update_ccc+0x3a>
				BT_WARN("CCC %p not writable", attr);
    ce98:	4652      	mov	r2, sl
    ce9a:	4629      	mov	r1, r5
    ce9c:	4658      	mov	r0, fp
    ce9e:	f018 f82d 	bl	24efc <log_1>
				continue;
    cea2:	e7f4      	b.n	ce8e <update_ccc+0x6e>
				sec = BT_SECURITY_L3;
    cea4:	2805      	cmp	r0, #5
    cea6:	bf14      	ite	ne
    cea8:	2302      	movne	r3, #2
    ceaa:	2303      	moveq	r3, #3
			    bt_conn_get_security(conn) < sec) {
    ceac:	4630      	mov	r0, r6
				sec = BT_SECURITY_L3;
    ceae:	9301      	str	r3, [sp, #4]
			    bt_conn_get_security(conn) < sec) {
    ceb0:	f01a fae1 	bl	27476 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
    ceb4:	9b01      	ldr	r3, [sp, #4]
    ceb6:	4283      	cmp	r3, r0
    ceb8:	d906      	bls.n	cec8 <update_ccc+0xa8>
				if (data->sec < sec) {
    ceba:	f898 2004 	ldrb.w	r2, [r8, #4]
    cebe:	429a      	cmp	r2, r3
    cec0:	d2e5      	bcs.n	ce8e <update_ccc+0x6e>
					data->sec = sec;
    cec2:	f888 3004 	strb.w	r3, [r8, #4]
    cec6:	e7e2      	b.n	ce8e <update_ccc+0x6e>
		gatt_ccc_changed(attr, ccc);
    cec8:	4649      	mov	r1, r9
    ceca:	4628      	mov	r0, r5
    cecc:	f01b f822 	bl	27f14 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
    ced0:	4b22      	ldr	r3, [pc, #136]	; (cf5c <update_ccc+0x13c>)
    ced2:	4599      	cmp	r9, r3
    ced4:	d133      	bne.n	cf3e <update_ccc+0x11e>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
    ced6:	7a30      	ldrb	r0, [r6, #8]
    ced8:	f106 0188 	add.w	r1, r6, #136	; 0x88
    cedc:	f7ff fa98 	bl	c410 <find_sc_cfg>
	if (!cfg) {
    cee0:	4605      	mov	r5, r0
    cee2:	b360      	cbz	r0, cf3e <update_ccc+0x11e>
	if (!(cfg->data.start || cfg->data.end)) {
    cee4:	8902      	ldrh	r2, [r0, #8]
    cee6:	8943      	ldrh	r3, [r0, #10]
    cee8:	ea52 0103 	orrs.w	r1, r2, r3
    ceec:	d027      	beq.n	cf3e <update_ccc+0x11e>
	index = bt_conn_index(conn);
    ceee:	4630      	mov	r0, r6
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
    cef0:	f8ad 200c 	strh.w	r2, [sp, #12]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
    cef4:	f8ad 300e 	strh.w	r3, [sp, #14]
	index = bt_conn_index(conn);
    cef8:	f7fd ffb4 	bl	ae64 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    cefc:	4918      	ldr	r1, [pc, #96]	; (cf60 <update_ccc+0x140>)
    cefe:	4a19      	ldr	r2, [pc, #100]	; (cf64 <update_ccc+0x144>)
    cf00:	2318      	movs	r3, #24
    cf02:	fb03 1300 	mla	r3, r3, r0, r1
    cf06:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
    cf08:	4a17      	ldr	r2, [pc, #92]	; (cf68 <update_ccc+0x148>)
    cf0a:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
    cf0c:	aa03      	add	r2, sp, #12
    cf0e:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
    cf10:	2204      	movs	r2, #4
    cf12:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    cf14:	b203      	sxth	r3, r0
    cf16:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    cf1a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    cf1e:	4630      	mov	r0, r6
    cf20:	f7ff fed0 	bl	ccc4 <bt_gatt_indicate>
    cf24:	b148      	cbz	r0, cf3a <update_ccc+0x11a>
    cf26:	f01a ffeb 	bl	27f00 <arch_is_user_context>
		BT_ERR("SC restore indication failed");
    cf2a:	01a4      	lsls	r4, r4, #6
    cf2c:	f044 0401 	orr.w	r4, r4, #1
    cf30:	b148      	cbz	r0, cf46 <update_ccc+0x126>
    cf32:	490e      	ldr	r1, [pc, #56]	; (cf6c <update_ccc+0x14c>)
    cf34:	4620      	mov	r0, r4
    cf36:	f017 ffae 	bl	24e96 <log_from_user>
__ssp_bos_icheck3(memset, void *, int)
    cf3a:	2300      	movs	r3, #0
    cf3c:	60ab      	str	r3, [r5, #8]
}
    cf3e:	2001      	movs	r0, #1
    cf40:	b005      	add	sp, #20
    cf42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		BT_ERR("SC restore indication failed");
    cf46:	4809      	ldr	r0, [pc, #36]	; (cf6c <update_ccc+0x14c>)
    cf48:	4621      	mov	r1, r4
    cf4a:	f017 ffca 	bl	24ee2 <log_0>
    cf4e:	e7f4      	b.n	cf3a <update_ccc+0x11a>
    cf50:	0000c659 	.word	0x0000c659
    cf54:	0002a7a0 	.word	0x0002a7a0
    cf58:	0002a6d0 	.word	0x0002a6d0
    cf5c:	20007878 	.word	0x20007878
    cf60:	20000ea8 	.word	0x20000ea8
    cf64:	0002aee8 	.word	0x0002aee8
    cf68:	00028159 	.word	0x00028159
    cf6c:	0002e372 	.word	0x0002e372
    cf70:	0002e35e 	.word	0x0002e35e

0000cf74 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
    cf74:	b513      	push	{r0, r1, r4, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    cf76:	4a0b      	ldr	r2, [pc, #44]	; (cfa4 <bt_gatt_connected+0x30>)
	data.conn = conn;
    cf78:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    cf7a:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
    cf7e:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    cf80:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
    cf82:	2001      	movs	r0, #1
    cf84:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    cf88:	f01b f9a1 	bl	282ce <bt_gatt_foreach_attr>
	 * client prior to sending an indication or notification. If the client
	 * does not have an LTK indicating that the client has lost the bond,
	 * enabling encryption will fail.
	 */
	if (IS_ENABLED(CONFIG_BT_SMP) &&
	    bt_conn_get_security(conn) < data.sec) {
    cf8c:	4620      	mov	r0, r4
    cf8e:	f01a fa72 	bl	27476 <bt_conn_get_security>
    cf92:	f89d 1004 	ldrb.w	r1, [sp, #4]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    cf96:	4288      	cmp	r0, r1
    cf98:	d202      	bcs.n	cfa0 <bt_gatt_connected+0x2c>
		bt_conn_set_security(conn, data.sec);
    cf9a:	4620      	mov	r0, r4
    cf9c:	f01a fa38 	bl	27410 <bt_conn_set_security>
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}
    cfa0:	b002      	add	sp, #8
    cfa2:	bd10      	pop	{r4, pc}
    cfa4:	0000ce21 	.word	0x0000ce21

0000cfa8 <bt_gatt_encrypt_change>:

void bt_gatt_encrypt_change(struct bt_conn *conn)
{
    cfa8:	b507      	push	{r0, r1, r2, lr}
	BT_DBG("conn %p", conn);

	data.conn = conn;
	data.sec = BT_SECURITY_L1;

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    cfaa:	4a06      	ldr	r2, [pc, #24]	; (cfc4 <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
    cfac:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    cfae:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
    cfb0:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    cfb2:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
    cfb6:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    cfba:	f01b f988 	bl	282ce <bt_gatt_foreach_attr>
}
    cfbe:	b003      	add	sp, #12
    cfc0:	f85d fb04 	ldr.w	pc, [sp], #4
    cfc4:	0000ce21 	.word	0x0000ce21

0000cfc8 <db_hash_read>:
{
    cfc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cfcc:	4606      	mov	r6, r0
	return k_work_delayable_busy_get(dwork) != 0;
    cfce:	480e      	ldr	r0, [pc, #56]	; (d008 <db_hash_read+0x40>)
    cfd0:	f8bd 8018 	ldrh.w	r8, [sp, #24]
    cfd4:	4614      	mov	r4, r2
    cfd6:	461d      	mov	r5, r3
    cfd8:	f01c fe38 	bl	29c4c <k_work_delayable_busy_get>
    cfdc:	4607      	mov	r7, r0
	int rc = k_work_cancel_delayable(&work->work);
    cfde:	480a      	ldr	r0, [pc, #40]	; (d008 <db_hash_read+0x40>)
    cfe0:	f01c fe48 	bl	29c74 <k_work_cancel_delayable>
	if (pending) {
    cfe4:	b117      	cbz	r7, cfec <db_hash_read+0x24>
		return (rc == 0) ? 0 : -EINVAL;
    cfe6:	b908      	cbnz	r0, cfec <db_hash_read+0x24>
		db_hash_gen(true);
    cfe8:	f7ff fda0 	bl	cb2c <db_hash_gen.isra.0>
	bt_gatt_change_aware(conn, true);
    cfec:	2101      	movs	r1, #1
    cfee:	4630      	mov	r0, r6
    cff0:	f01b f9a5 	bl	2833e <bt_gatt_change_aware>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
    cff4:	2310      	movs	r3, #16
    cff6:	9306      	str	r3, [sp, #24]
    cff8:	4642      	mov	r2, r8
    cffa:	4629      	mov	r1, r5
    cffc:	4620      	mov	r0, r4
    cffe:	4b03      	ldr	r3, [pc, #12]	; (d00c <db_hash_read+0x44>)
}
    d000:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
    d004:	f01b b81b 	b.w	2803e <bt_gatt_attr_read.constprop.0>
    d008:	200003b8 	.word	0x200003b8
    d00c:	20002a94 	.word	0x20002a94

0000d010 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
    d010:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    d012:	4603      	mov	r3, r0
    d014:	4a14      	ldr	r2, [pc, #80]	; (d068 <bt_gatt_disconnected+0x58>)
{
    d016:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    d018:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d01c:	2001      	movs	r0, #1
    d01e:	f01b f956 	bl	282ce <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
    d022:	4628      	mov	r0, r5
    d024:	f7ff fa58 	bl	c4d8 <find_cf_cfg>
	if (!cfg) {
    d028:	4604      	mov	r4, r0
    d02a:	b1e0      	cbz	r0, d066 <bt_gatt_disconnected+0x56>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    d02c:	f105 0688 	add.w	r6, r5, #136	; 0x88
    d030:	7a28      	ldrb	r0, [r5, #8]
    d032:	4631      	mov	r1, r6
    d034:	f019 ff9e 	bl	26f74 <bt_addr_le_is_bonded>
    d038:	b920      	cbnz	r0, d044 <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
    d03a:	4620      	mov	r0, r4
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
    d03c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
    d040:	f01b b851 	b.w	280e6 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    d044:	1c60      	adds	r0, r4, #1
    d046:	4631      	mov	r1, r6
    d048:	340c      	adds	r4, #12
    d04a:	f01a ffec 	bl	28026 <bt_addr_le_copy>
    d04e:	f3bf 8f5b 	dmb	ish
    d052:	e854 3f00 	ldrex	r3, [r4]
    d056:	f023 0302 	bic.w	r3, r3, #2
    d05a:	e844 3200 	strex	r2, r3, [r4]
    d05e:	2a00      	cmp	r2, #0
    d060:	d1f7      	bne.n	d052 <bt_gatt_disconnected+0x42>
    d062:	f3bf 8f5b 	dmb	ish
}
    d066:	bd70      	pop	{r4, r5, r6, pc}
    d068:	0000c8b9 	.word	0x0000c8b9

0000d06c <get_io_capa>:
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
    d06c:	4b10      	ldr	r3, [pc, #64]	; (d0b0 <get_io_capa+0x44>)
    d06e:	681b      	ldr	r3, [r3, #0]
    d070:	b1bb      	cbz	r3, d0a2 <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    d072:	681a      	ldr	r2, [r3, #0]
    d074:	b142      	cbz	r2, d088 <get_io_capa+0x1c>
    d076:	6859      	ldr	r1, [r3, #4]
    d078:	b131      	cbz	r1, d088 <get_io_capa+0x1c>
    d07a:	6899      	ldr	r1, [r3, #8]
    d07c:	b911      	cbnz	r1, d084 <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
    d07e:	490d      	ldr	r1, [pc, #52]	; (d0b4 <get_io_capa+0x48>)
    d080:	7809      	ldrb	r1, [r1, #0]
    d082:	b939      	cbnz	r1, d094 <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    d084:	2004      	movs	r0, #4
    d086:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
    d088:	490a      	ldr	r1, [pc, #40]	; (d0b4 <get_io_capa+0x48>)
    d08a:	7809      	ldrb	r1, [r1, #0]
    d08c:	b111      	cbz	r1, d094 <get_io_capa+0x28>
    d08e:	b10a      	cbz	r2, d094 <get_io_capa+0x28>
    d090:	6899      	ldr	r1, [r3, #8]
    d092:	b941      	cbnz	r1, d0a6 <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
    d094:	685b      	ldr	r3, [r3, #4]
    d096:	b943      	cbnz	r3, d0aa <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
    d098:	2a00      	cmp	r2, #0
    d09a:	bf0c      	ite	eq
    d09c:	2003      	moveq	r0, #3
    d09e:	2000      	movne	r0, #0
    d0a0:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
    d0a2:	2003      	movs	r0, #3
    d0a4:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
    d0a6:	2001      	movs	r0, #1
    d0a8:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
    d0aa:	2002      	movs	r0, #2
	}
}
    d0ac:	4770      	bx	lr
    d0ae:	bf00      	nop
    d0b0:	20000e30 	.word	0x20000e30
    d0b4:	20002aa5 	.word	0x20002aa5

0000d0b8 <smp_dhkey_generate>:
}
#endif /* CONFIG_BT_PERIPHERAL */

static void bt_smp_dhkey_ready(const uint8_t *dhkey);
static uint8_t smp_dhkey_generate(struct bt_smp *smp)
{
    d0b8:	b538      	push	{r3, r4, r5, lr}
	int err;

	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
    d0ba:	f100 05c4 	add.w	r5, r0, #196	; 0xc4
{
    d0be:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
    d0c0:	2108      	movs	r1, #8
    d0c2:	4628      	mov	r0, r5
    d0c4:	f01b f983 	bl	283ce <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
    d0c8:	490f      	ldr	r1, [pc, #60]	; (d108 <smp_dhkey_generate+0x50>)
    d0ca:	f204 1017 	addw	r0, r4, #279	; 0x117
    d0ce:	f7fc ff99 	bl	a004 <bt_dh_key_gen>
	if (err) {
    d0d2:	b190      	cbz	r0, d0fa <smp_dhkey_generate+0x42>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
    d0d4:	2108      	movs	r1, #8
    d0d6:	4628      	mov	r0, r5
    d0d8:	f01b f99f 	bl	2841a <atomic_clear_bit>
    d0dc:	f01b f961 	bl	283a2 <arch_is_user_context>
    d0e0:	4b0a      	ldr	r3, [pc, #40]	; (d10c <smp_dhkey_generate+0x54>)
    d0e2:	4a0b      	ldr	r2, [pc, #44]	; (d110 <smp_dhkey_generate+0x58>)
    d0e4:	1a9b      	subs	r3, r3, r2
    d0e6:	08db      	lsrs	r3, r3, #3

		BT_ERR("Failed to generate DHKey");
    d0e8:	019b      	lsls	r3, r3, #6
    d0ea:	f043 0301 	orr.w	r3, r3, #1
    d0ee:	b128      	cbz	r0, d0fc <smp_dhkey_generate+0x44>
    d0f0:	4908      	ldr	r1, [pc, #32]	; (d114 <smp_dhkey_generate+0x5c>)
    d0f2:	4618      	mov	r0, r3
    d0f4:	f017 fecf 	bl	24e96 <log_from_user>
		return BT_SMP_ERR_UNSPECIFIED;
    d0f8:	2008      	movs	r0, #8
	}

	return 0;
}
    d0fa:	bd38      	pop	{r3, r4, r5, pc}
		BT_ERR("Failed to generate DHKey");
    d0fc:	4805      	ldr	r0, [pc, #20]	; (d114 <smp_dhkey_generate+0x5c>)
    d0fe:	4619      	mov	r1, r3
    d100:	f017 feef 	bl	24ee2 <log_0>
    d104:	e7f8      	b.n	d0f8 <smp_dhkey_generate+0x40>
    d106:	bf00      	nop
    d108:	00028a59 	.word	0x00028a59
    d10c:	0002a7d8 	.word	0x0002a7d8
    d110:	0002a6d0 	.word	0x0002a6d0
    d114:	0002e39e 	.word	0x0002e39e

0000d118 <get_auth.isra.0>:
	if (sc_supported) {
    d118:	4b0c      	ldr	r3, [pc, #48]	; (d14c <get_auth.isra.0+0x34>)
    d11a:	781b      	ldrb	r3, [r3, #0]
static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
    d11c:	b510      	push	{r4, lr}
	if (sc_supported) {
    d11e:	b17b      	cbz	r3, d140 <get_auth.isra.0+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
    d120:	f000 040f 	and.w	r4, r0, #15
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    d124:	f7ff ffa2 	bl	d06c <get_io_capa>
	if (bondable) {
    d128:	4b09      	ldr	r3, [pc, #36]	; (d150 <get_auth.isra.0+0x38>)
    d12a:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    d12c:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
    d12e:	bf0c      	ite	eq
    d130:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
    d134:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
    d138:	b12b      	cbz	r3, d146 <get_auth.isra.0+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
    d13a:	f044 0001 	orr.w	r0, r4, #1
}
    d13e:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
    d140:	f000 0407 	and.w	r4, r0, #7
    d144:	e7ee      	b.n	d124 <get_auth.isra.0+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
    d146:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
    d14a:	e7f8      	b.n	d13e <get_auth.isra.0+0x26>
    d14c:	20002aa5 	.word	0x20002aa5
    d150:	20007cff 	.word	0x20007cff

0000d154 <smp_chan_get>:
{
    d154:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
    d156:	2106      	movs	r1, #6
    d158:	f01a faf9 	bl	2774e <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    d15c:	4604      	mov	r4, r0
    d15e:	b968      	cbnz	r0, d17c <smp_chan_get+0x28>
    d160:	f01b f91f 	bl	283a2 <arch_is_user_context>
    d164:	4b09      	ldr	r3, [pc, #36]	; (d18c <smp_chan_get+0x38>)
    d166:	4a0a      	ldr	r2, [pc, #40]	; (d190 <smp_chan_get+0x3c>)
    d168:	1a9b      	subs	r3, r3, r2
    d16a:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to find SMP channel");
    d16c:	019b      	lsls	r3, r3, #6
    d16e:	f043 0301 	orr.w	r3, r3, #1
    d172:	b128      	cbz	r0, d180 <smp_chan_get+0x2c>
    d174:	4907      	ldr	r1, [pc, #28]	; (d194 <smp_chan_get+0x40>)
    d176:	4618      	mov	r0, r3
    d178:	f017 fe8d 	bl	24e96 <log_from_user>
}
    d17c:	4620      	mov	r0, r4
    d17e:	bd10      	pop	{r4, pc}
		BT_ERR("Unable to find SMP channel");
    d180:	4804      	ldr	r0, [pc, #16]	; (d194 <smp_chan_get+0x40>)
    d182:	4619      	mov	r1, r3
    d184:	f017 fead 	bl	24ee2 <log_0>
		return NULL;
    d188:	e7f8      	b.n	d17c <smp_chan_get+0x28>
    d18a:	bf00      	nop
    d18c:	0002a7d8 	.word	0x0002a7d8
    d190:	0002a6d0 	.word	0x0002a6d0
    d194:	0002e3b7 	.word	0x0002e3b7

0000d198 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
    d198:	4b10      	ldr	r3, [pc, #64]	; (d1dc <bt_smp_accept+0x44>)
{
    d19a:	b510      	push	{r4, lr}
    d19c:	4604      	mov	r4, r0
		if (smp->chan.chan.conn) {
    d19e:	6818      	ldr	r0, [r3, #0]
    d1a0:	b918      	cbnz	r0, d1aa <bt_smp_accept+0x12>
			continue;
		}

		smp->chan.chan.ops = &ops;
    d1a2:	4a0f      	ldr	r2, [pc, #60]	; (d1e0 <bt_smp_accept+0x48>)
    d1a4:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan.chan;
    d1a6:	600b      	str	r3, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    d1a8:	bd10      	pop	{r4, pc}
    d1aa:	f01b f8fa 	bl	283a2 <arch_is_user_context>
    d1ae:	4b0d      	ldr	r3, [pc, #52]	; (d1e4 <bt_smp_accept+0x4c>)
    d1b0:	4a0d      	ldr	r2, [pc, #52]	; (d1e8 <bt_smp_accept+0x50>)
    d1b2:	1a9b      	subs	r3, r3, r2
    d1b4:	08db      	lsrs	r3, r3, #3
	BT_ERR("No available SMP context for conn %p", conn);
    d1b6:	019b      	lsls	r3, r3, #6
    d1b8:	f043 0301 	orr.w	r3, r3, #1
    d1bc:	b138      	cbz	r0, d1ce <bt_smp_accept+0x36>
    d1be:	490b      	ldr	r1, [pc, #44]	; (d1ec <bt_smp_accept+0x54>)
    d1c0:	4622      	mov	r2, r4
    d1c2:	4618      	mov	r0, r3
    d1c4:	f017 fe67 	bl	24e96 <log_from_user>
	return -ENOMEM;
    d1c8:	f06f 000b 	mvn.w	r0, #11
    d1cc:	e7ec      	b.n	d1a8 <bt_smp_accept+0x10>
	BT_ERR("No available SMP context for conn %p", conn);
    d1ce:	4807      	ldr	r0, [pc, #28]	; (d1ec <bt_smp_accept+0x54>)
    d1d0:	461a      	mov	r2, r3
    d1d2:	4621      	mov	r1, r4
    d1d4:	f017 fe92 	bl	24efc <log_1>
    d1d8:	e7f6      	b.n	d1c8 <bt_smp_accept+0x30>
    d1da:	bf00      	nop
    d1dc:	20000440 	.word	0x20000440
    d1e0:	0002b064 	.word	0x0002b064
    d1e4:	0002a7d8 	.word	0x0002a7d8
    d1e8:	0002a6d0 	.word	0x0002a6d0
    d1ec:	0002e3d2 	.word	0x0002e3d2

0000d1f0 <smp_init>:
{
    d1f0:	b538      	push	{r3, r4, r5, lr}
	(void)memset((uint8_t *)smp + sizeof(smp->chan), 0,
    d1f2:	f100 05c0 	add.w	r5, r0, #192	; 0xc0
{
    d1f6:	4604      	mov	r4, r0
    d1f8:	22f0      	movs	r2, #240	; 0xf0
    d1fa:	2100      	movs	r1, #0
    d1fc:	4628      	mov	r0, r5
    d1fe:	f01d f8fd 	bl	2a3fc <memset>
	if (bt_rand(smp->prnd, 16)) {
    d202:	f104 00e7 	add.w	r0, r4, #231	; 0xe7
    d206:	2110      	movs	r1, #16
    d208:	f004 fdf0 	bl	11dec <bt_rand>
    d20c:	4604      	mov	r4, r0
    d20e:	b948      	cbnz	r0, d224 <smp_init+0x34>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    d210:	2105      	movs	r1, #5
    d212:	4628      	mov	r0, r5
    d214:	f01b f8db 	bl	283ce <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
    d218:	f7fc fee4 	bl	9fe4 <bt_pub_key_get>
    d21c:	4b02      	ldr	r3, [pc, #8]	; (d228 <smp_init+0x38>)
    d21e:	6018      	str	r0, [r3, #0]
}
    d220:	4620      	mov	r0, r4
    d222:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    d224:	2408      	movs	r4, #8
    d226:	e7fb      	b.n	d220 <smp_init+0x30>
    d228:	20000ec4 	.word	0x20000ec4

0000d22c <smp_send.isra.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
    d22c:	b513      	push	{r0, r1, r4, lr}
    d22e:	4613      	mov	r3, r2
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
    d230:	2200      	movs	r2, #0
    d232:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
    d234:	4604      	mov	r4, r0
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
    d236:	460a      	mov	r2, r1
    d238:	6800      	ldr	r0, [r0, #0]
    d23a:	2106      	movs	r1, #6
    d23c:	f01a fa5e 	bl	276fc <bt_l2cap_send_cb>
	return k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
    d240:	4805      	ldr	r0, [pc, #20]	; (d258 <smp_send.isra.0+0x2c>)
    d242:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    d246:	2300      	movs	r3, #0
    d248:	f504 71d8 	add.w	r1, r4, #432	; 0x1b0
}
    d24c:	b002      	add	sp, #8
    d24e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d252:	f015 bd01 	b.w	22c58 <k_work_reschedule_for_queue>
    d256:	bf00      	nop
    d258:	20000ac0 	.word	0x20000ac0

0000d25c <smp_find>:
{
    d25c:	4601      	mov	r1, r0
    d25e:	b508      	push	{r3, lr}
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
    d260:	4803      	ldr	r0, [pc, #12]	; (d270 <smp_find+0x14>)
    d262:	f01b f991 	bl	28588 <atomic_test_bit>
    d266:	2800      	cmp	r0, #0
}
    d268:	4802      	ldr	r0, [pc, #8]	; (d274 <smp_find+0x18>)
    d26a:	bf08      	it	eq
    d26c:	2000      	moveq	r0, #0
    d26e:	bd08      	pop	{r3, pc}
    d270:	20000504 	.word	0x20000504
    d274:	20000440 	.word	0x20000440

0000d278 <compute_and_check_and_send_slave_dhcheck>:
{
    d278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	(void)memset(r, 0, sizeof(r));
    d27c:	2210      	movs	r2, #16
{
    d27e:	b0a2      	sub	sp, #136	; 0x88
    d280:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
    d282:	2100      	movs	r1, #0
    d284:	eb0d 0002 	add.w	r0, sp, r2
    d288:	f01d f8b8 	bl	2a3fc <memset>
	switch (smp->method) {
    d28c:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    d290:	2b05      	cmp	r3, #5
    d292:	f200 809f 	bhi.w	d3d4 <compute_and_check_and_send_slave_dhcheck+0x15c>
    d296:	e8df f003 	tbb	[pc, r3]
    d29a:	0306      	.short	0x0306
    d29c:	8c9d0603 	.word	0x8c9d0603
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    d2a0:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
    d2a4:	9304      	str	r3, [sp, #16]
	uint8_t m[53] = { 0x00, /* counter */
    d2a6:	4b97      	ldr	r3, [pc, #604]	; (d504 <compute_and_check_and_send_slave_dhcheck+0x28c>)
		   &smp->chan.chan.conn->le.init_addr,
    d2a8:	f8d4 a000 	ldr.w	sl, [r4]
	uint8_t m[53] = { 0x00, /* counter */
    d2ac:	aa14      	add	r2, sp, #80	; 0x50
    d2ae:	f103 0730 	add.w	r7, r3, #48	; 0x30
    d2b2:	4615      	mov	r5, r2
    d2b4:	6818      	ldr	r0, [r3, #0]
    d2b6:	6859      	ldr	r1, [r3, #4]
    d2b8:	4616      	mov	r6, r2
    d2ba:	c603      	stmia	r6!, {r0, r1}
    d2bc:	3308      	adds	r3, #8
    d2be:	42bb      	cmp	r3, r7
    d2c0:	4632      	mov	r2, r6
    d2c2:	d1f7      	bne.n	d2b4 <compute_and_check_and_send_slave_dhcheck+0x3c>
    d2c4:	6818      	ldr	r0, [r3, #0]
    d2c6:	791b      	ldrb	r3, [r3, #4]
    d2c8:	6030      	str	r0, [r6, #0]
    d2ca:	7133      	strb	r3, [r6, #4]
	sys_memcpy_swap(ws, w, 32);
    d2cc:	ae0c      	add	r6, sp, #48	; 0x30
    d2ce:	2220      	movs	r2, #32
    d2d0:	f204 1157 	addw	r1, r4, #343	; 0x157
    d2d4:	4630      	mov	r0, r6
    d2d6:	f01b f86e 	bl	283b6 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
    d2da:	488b      	ldr	r0, [pc, #556]	; (d508 <compute_and_check_and_send_slave_dhcheck+0x290>)
    d2dc:	ab08      	add	r3, sp, #32
    d2de:	2220      	movs	r2, #32
    d2e0:	4631      	mov	r1, r6
    d2e2:	f01b f8b0 	bl	28446 <bt_smp_aes_cmac>
	if (err) {
    d2e6:	2800      	cmp	r0, #0
    d2e8:	f040 80fb 	bne.w	d4e2 <compute_and_check_and_send_slave_dhcheck+0x26a>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    d2ec:	f104 08f7 	add.w	r8, r4, #247	; 0xf7
	sys_memcpy_swap(m + 5, n1, 16);
    d2f0:	2210      	movs	r2, #16
    d2f2:	4641      	mov	r1, r8
    d2f4:	f10d 0055 	add.w	r0, sp, #85	; 0x55
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    d2f8:	f104 09e7 	add.w	r9, r4, #231	; 0xe7
	sys_memcpy_swap(m + 5, n1, 16);
    d2fc:	f01b f85b 	bl	283b6 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
    d300:	2210      	movs	r2, #16
    d302:	4649      	mov	r1, r9
    d304:	f10d 0065 	add.w	r0, sp, #101	; 0x65
    d308:	f01b f855 	bl	283b6 <sys_memcpy_swap>
	m[37] = a1->type;
    d30c:	f89a 308f 	ldrb.w	r3, [sl, #143]	; 0x8f
    d310:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    d314:	2206      	movs	r2, #6
    d316:	f10a 0190 	add.w	r1, sl, #144	; 0x90
    d31a:	f10d 0076 	add.w	r0, sp, #118	; 0x76
    d31e:	f01b f84a 	bl	283b6 <sys_memcpy_swap>
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    d322:	f204 1787 	addw	r7, r4, #391	; 0x187
	m[44] = a2->type;
    d326:	f89a 3096 	ldrb.w	r3, [sl, #150]	; 0x96
    d32a:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    d32e:	2206      	movs	r2, #6
    d330:	f10a 0197 	add.w	r1, sl, #151	; 0x97
    d334:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
    d338:	f01b f83d 	bl	283b6 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
    d33c:	463b      	mov	r3, r7
    d33e:	2235      	movs	r2, #53	; 0x35
    d340:	4629      	mov	r1, r5
    d342:	a808      	add	r0, sp, #32
    d344:	f01b f87f 	bl	28446 <bt_smp_aes_cmac>
	if (err) {
    d348:	2800      	cmp	r0, #0
    d34a:	f040 80ca 	bne.w	d4e2 <compute_and_check_and_send_slave_dhcheck+0x26a>
	sys_mem_swap(mackey, 16);
    d34e:	4638      	mov	r0, r7
    d350:	f01b f897 	bl	28482 <sys_mem_swap.constprop.0>
		   smp->tk)) {
    d354:	f204 1a07 	addw	sl, r4, #263	; 0x107
	m[0] = 0x01;
    d358:	2301      	movs	r3, #1
    d35a:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    d35e:	2235      	movs	r2, #53	; 0x35
    d360:	4653      	mov	r3, sl
    d362:	4629      	mov	r1, r5
    d364:	a808      	add	r0, sp, #32
    d366:	f01b f86e 	bl	28446 <bt_smp_aes_cmac>
	if (err) {
    d36a:	2800      	cmp	r0, #0
    d36c:	f040 80b9 	bne.w	d4e2 <compute_and_check_and_send_slave_dhcheck+0x26a>
	sys_mem_swap(ltk, 16);
    d370:	4650      	mov	r0, sl
    d372:	f01b f886 	bl	28482 <sys_mem_swap.constprop.0>
		   &smp->chan.chan.conn->le.resp_addr,
    d376:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    d378:	4638      	mov	r0, r7
		   &smp->chan.chan.conn->le.resp_addr,
    d37a:	f852 3bd1 	ldr.w	r3, [r2], #209
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    d37e:	9503      	str	r5, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
    d380:	f103 018f 	add.w	r1, r3, #143	; 0x8f
		   &smp->chan.chan.conn->le.resp_addr,
    d384:	3396      	adds	r3, #150	; 0x96
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    d386:	e9cd 2300 	strd	r2, r3, [sp]
    d38a:	9102      	str	r1, [sp, #8]
    d38c:	ab04      	add	r3, sp, #16
    d38e:	4642      	mov	r2, r8
    d390:	4649      	mov	r1, r9
    d392:	f01b f884 	bl	2849e <smp_f6>
    d396:	2800      	cmp	r0, #0
    d398:	d03c      	beq.n	d414 <compute_and_check_and_send_slave_dhcheck+0x19c>
    d39a:	f01b f802 	bl	283a2 <arch_is_user_context>
    d39e:	4b5b      	ldr	r3, [pc, #364]	; (d50c <compute_and_check_and_send_slave_dhcheck+0x294>)
    d3a0:	4a5b      	ldr	r2, [pc, #364]	; (d510 <compute_and_check_and_send_slave_dhcheck+0x298>)
    d3a2:	1a9b      	subs	r3, r3, r2
    d3a4:	08db      	lsrs	r3, r3, #3
		BT_ERR("Calculate local DHKey check failed");
    d3a6:	019b      	lsls	r3, r3, #6
    d3a8:	f043 0301 	orr.w	r3, r3, #1
    d3ac:	b378      	cbz	r0, d40e <compute_and_check_and_send_slave_dhcheck+0x196>
    d3ae:	4959      	ldr	r1, [pc, #356]	; (d514 <compute_and_check_and_send_slave_dhcheck+0x29c>)
    d3b0:	e029      	b.n	d406 <compute_and_check_and_send_slave_dhcheck+0x18e>
		if (smp->oobd_remote) {
    d3b2:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    d3b6:	2b00      	cmp	r3, #0
    d3b8:	f43f af75 	beq.w	d2a6 <compute_and_check_and_send_slave_dhcheck+0x2e>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
    d3bc:	ad04      	add	r5, sp, #16
    d3be:	f103 0610 	add.w	r6, r3, #16
    d3c2:	6818      	ldr	r0, [r3, #0]
    d3c4:	6859      	ldr	r1, [r3, #4]
    d3c6:	462a      	mov	r2, r5
    d3c8:	c203      	stmia	r2!, {r0, r1}
    d3ca:	3308      	adds	r3, #8
    d3cc:	42b3      	cmp	r3, r6
    d3ce:	4615      	mov	r5, r2
    d3d0:	d1f7      	bne.n	d3c2 <compute_and_check_and_send_slave_dhcheck+0x14a>
    d3d2:	e768      	b.n	d2a6 <compute_and_check_and_send_slave_dhcheck+0x2e>
    d3d4:	f01a ffe5 	bl	283a2 <arch_is_user_context>
    d3d8:	4b4c      	ldr	r3, [pc, #304]	; (d50c <compute_and_check_and_send_slave_dhcheck+0x294>)
    d3da:	4a4d      	ldr	r2, [pc, #308]	; (d510 <compute_and_check_and_send_slave_dhcheck+0x298>)
    d3dc:	f894 10c8 	ldrb.w	r1, [r4, #200]	; 0xc8
    d3e0:	1a9b      	subs	r3, r3, r2
    d3e2:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unknown pairing method (%u)", smp->method);
    d3e4:	019b      	lsls	r3, r3, #6
    d3e6:	f043 0301 	orr.w	r3, r3, #1
    d3ea:	b130      	cbz	r0, d3fa <compute_and_check_and_send_slave_dhcheck+0x182>
    d3ec:	460a      	mov	r2, r1
    d3ee:	4618      	mov	r0, r3
    d3f0:	4949      	ldr	r1, [pc, #292]	; (d518 <compute_and_check_and_send_slave_dhcheck+0x2a0>)
    d3f2:	f017 fd50 	bl	24e96 <log_from_user>
		return BT_SMP_ERR_UNSPECIFIED;
    d3f6:	2008      	movs	r0, #8
    d3f8:	e06e      	b.n	d4d8 <compute_and_check_and_send_slave_dhcheck+0x260>
		BT_ERR("Unknown pairing method (%u)", smp->method);
    d3fa:	4847      	ldr	r0, [pc, #284]	; (d518 <compute_and_check_and_send_slave_dhcheck+0x2a0>)
    d3fc:	461a      	mov	r2, r3
    d3fe:	f017 fd7d 	bl	24efc <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
    d402:	e7f8      	b.n	d3f6 <compute_and_check_and_send_slave_dhcheck+0x17e>
		BT_ERR("Calculate LTK failed");
    d404:	4945      	ldr	r1, [pc, #276]	; (d51c <compute_and_check_and_send_slave_dhcheck+0x2a4>)
		BT_ERR("Calculate remote DHKey check failed");
    d406:	4618      	mov	r0, r3
    d408:	f017 fd45 	bl	24e96 <log_from_user>
    d40c:	e7f3      	b.n	d3f6 <compute_and_check_and_send_slave_dhcheck+0x17e>
		BT_ERR("Calculate local DHKey check failed");
    d40e:	4841      	ldr	r0, [pc, #260]	; (d514 <compute_and_check_and_send_slave_dhcheck+0x29c>)
    d410:	4619      	mov	r1, r3
    d412:	e073      	b.n	d4fc <compute_and_check_and_send_slave_dhcheck+0x284>
	if (smp->method == LE_SC_OOB) {
    d414:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    d418:	2b05      	cmp	r3, #5
    d41a:	d10f      	bne.n	d43c <compute_and_check_and_send_slave_dhcheck+0x1c4>
		if (smp->oobd_local) {
    d41c:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
    d420:	b349      	cbz	r1, d476 <compute_and_check_and_send_slave_dhcheck+0x1fe>
			memcpy(r, smp->oobd_local->r, sizeof(r));
    d422:	460b      	mov	r3, r1
    d424:	f10d 0c10 	add.w	ip, sp, #16
    d428:	f101 0e10 	add.w	lr, r1, #16
    d42c:	6818      	ldr	r0, [r3, #0]
    d42e:	6859      	ldr	r1, [r3, #4]
    d430:	4662      	mov	r2, ip
    d432:	c203      	stmia	r2!, {r0, r1}
    d434:	3308      	adds	r3, #8
    d436:	4573      	cmp	r3, lr
    d438:	4694      	mov	ip, r2
    d43a:	d1f7      	bne.n	d42c <compute_and_check_and_send_slave_dhcheck+0x1b4>
		   &smp->chan.chan.conn->le.init_addr,
    d43c:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    d43e:	4638      	mov	r0, r7
		   &smp->chan.chan.conn->le.init_addr,
    d440:	f852 3bca 	ldr.w	r3, [r2], #202
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    d444:	9603      	str	r6, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, re)) {
    d446:	f103 0196 	add.w	r1, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
    d44a:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    d44c:	e9cd 2300 	strd	r2, r3, [sp]
    d450:	9102      	str	r1, [sp, #8]
    d452:	ab04      	add	r3, sp, #16
    d454:	464a      	mov	r2, r9
    d456:	4641      	mov	r1, r8
    d458:	f01b f821 	bl	2849e <smp_f6>
    d45c:	b1a0      	cbz	r0, d488 <compute_and_check_and_send_slave_dhcheck+0x210>
    d45e:	f01a ffa0 	bl	283a2 <arch_is_user_context>
    d462:	4b2a      	ldr	r3, [pc, #168]	; (d50c <compute_and_check_and_send_slave_dhcheck+0x294>)
    d464:	4a2a      	ldr	r2, [pc, #168]	; (d510 <compute_and_check_and_send_slave_dhcheck+0x298>)
    d466:	1a9b      	subs	r3, r3, r2
    d468:	08db      	lsrs	r3, r3, #3
		BT_ERR("Calculate remote DHKey check failed");
    d46a:	019b      	lsls	r3, r3, #6
    d46c:	f043 0301 	orr.w	r3, r3, #1
    d470:	b138      	cbz	r0, d482 <compute_and_check_and_send_slave_dhcheck+0x20a>
    d472:	492b      	ldr	r1, [pc, #172]	; (d520 <compute_and_check_and_send_slave_dhcheck+0x2a8>)
    d474:	e7c7      	b.n	d406 <compute_and_check_and_send_slave_dhcheck+0x18e>
			memset(r, 0, sizeof(r));
    d476:	2210      	movs	r2, #16
    d478:	eb0d 0002 	add.w	r0, sp, r2
    d47c:	f01c ffbe 	bl	2a3fc <memset>
    d480:	e7dc      	b.n	d43c <compute_and_check_and_send_slave_dhcheck+0x1c4>
		BT_ERR("Calculate remote DHKey check failed");
    d482:	4827      	ldr	r0, [pc, #156]	; (d520 <compute_and_check_and_send_slave_dhcheck+0x2a8>)
    d484:	4619      	mov	r1, r3
    d486:	e039      	b.n	d4fc <compute_and_check_and_send_slave_dhcheck+0x284>
	if (memcmp(smp->e, re, 16)) {
    d488:	2210      	movs	r2, #16
    d48a:	4631      	mov	r1, r6
    d48c:	f204 1077 	addw	r0, r4, #375	; 0x177
    d490:	f01c ff98 	bl	2a3c4 <memcmp>
    d494:	bb18      	cbnz	r0, d4de <compute_and_check_and_send_slave_dhcheck+0x266>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
    d496:	210d      	movs	r1, #13
    d498:	4620      	mov	r0, r4
    d49a:	f01b f8a3 	bl	285e4 <smp_create_pdu.isra.0>
	if (!buf) {
    d49e:	4606      	mov	r6, r0
    d4a0:	2800      	cmp	r0, #0
    d4a2:	d0a8      	beq.n	d3f6 <compute_and_check_and_send_slave_dhcheck+0x17e>
    d4a4:	2110      	movs	r1, #16
    d4a6:	3008      	adds	r0, #8
    d4a8:	f01b fbfc 	bl	28ca4 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    d4ac:	af18      	add	r7, sp, #96	; 0x60
    d4ae:	4603      	mov	r3, r0
    d4b0:	462a      	mov	r2, r5
    d4b2:	ca03      	ldmia	r2!, {r0, r1}
    d4b4:	42ba      	cmp	r2, r7
    d4b6:	6018      	str	r0, [r3, #0]
    d4b8:	6059      	str	r1, [r3, #4]
    d4ba:	4615      	mov	r5, r2
    d4bc:	f103 0308 	add.w	r3, r3, #8
    d4c0:	d1f6      	bne.n	d4b0 <compute_and_check_and_send_slave_dhcheck+0x238>
	smp_send(smp, buf, NULL, NULL);
    d4c2:	2200      	movs	r2, #0
    d4c4:	4631      	mov	r1, r6
    d4c6:	4620      	mov	r0, r4
    d4c8:	f7ff feb0 	bl	d22c <smp_send.isra.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    d4cc:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    d4d0:	2101      	movs	r1, #1
    d4d2:	f01a ff7c 	bl	283ce <atomic_set_bit>
	return 0;
    d4d6:	2000      	movs	r0, #0
}
    d4d8:	b022      	add	sp, #136	; 0x88
    d4da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    d4de:	200b      	movs	r0, #11
    d4e0:	e7fa      	b.n	d4d8 <compute_and_check_and_send_slave_dhcheck+0x260>
    d4e2:	f01a ff5e 	bl	283a2 <arch_is_user_context>
    d4e6:	4b09      	ldr	r3, [pc, #36]	; (d50c <compute_and_check_and_send_slave_dhcheck+0x294>)
    d4e8:	4a09      	ldr	r2, [pc, #36]	; (d510 <compute_and_check_and_send_slave_dhcheck+0x298>)
    d4ea:	1a9b      	subs	r3, r3, r2
    d4ec:	08db      	lsrs	r3, r3, #3
		BT_ERR("Calculate LTK failed");
    d4ee:	019b      	lsls	r3, r3, #6
    d4f0:	f043 0301 	orr.w	r3, r3, #1
    d4f4:	2800      	cmp	r0, #0
    d4f6:	d185      	bne.n	d404 <compute_and_check_and_send_slave_dhcheck+0x18c>
    d4f8:	4808      	ldr	r0, [pc, #32]	; (d51c <compute_and_check_and_send_slave_dhcheck+0x2a4>)
    d4fa:	4619      	mov	r1, r3
		BT_ERR("Calculate remote DHKey check failed");
    d4fc:	f017 fcf1 	bl	24ee2 <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
    d500:	e779      	b.n	d3f6 <compute_and_check_and_send_slave_dhcheck+0x17e>
    d502:	bf00      	nop
    d504:	0002a946 	.word	0x0002a946
    d508:	0002e6e7 	.word	0x0002e6e7
    d50c:	0002a7d8 	.word	0x0002a7d8
    d510:	0002a6d0 	.word	0x0002a6d0
    d514:	0002e428 	.word	0x0002e428
    d518:	0002e3f7 	.word	0x0002e3f7
    d51c:	0002e413 	.word	0x0002e413
    d520:	0002e44b 	.word	0x0002e44b

0000d524 <smp_send_pairing_confirm>:
{
    d524:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
    d526:	f890 40c8 	ldrb.w	r4, [r0, #200]	; 0xc8
    d52a:	2c02      	cmp	r4, #2
{
    d52c:	4605      	mov	r5, r0
	switch (smp->method) {
    d52e:	d824      	bhi.n	d57a <smp_send_pairing_confirm+0x56>
    d530:	b14c      	cbz	r4, d546 <smp_send_pairing_confirm+0x22>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    d532:	f890 319c 	ldrb.w	r3, [r0, #412]	; 0x19c
    d536:	f8d0 4198 	ldr.w	r4, [r0, #408]	; 0x198
    d53a:	40dc      	lsrs	r4, r3
    d53c:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
    d540:	f064 047f 	orn	r4, r4, #127	; 0x7f
    d544:	b2e4      	uxtb	r4, r4
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    d546:	2103      	movs	r1, #3
    d548:	4628      	mov	r0, r5
    d54a:	f01b f84b 	bl	285e4 <smp_create_pdu.isra.0>
	if (!buf) {
    d54e:	4606      	mov	r6, r0
    d550:	b330      	cbz	r0, d5a0 <smp_send_pairing_confirm+0x7c>
    d552:	2110      	movs	r1, #16
    d554:	3008      	adds	r0, #8
    d556:	f01b fba5 	bl	28ca4 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
    d55a:	9000      	str	r0, [sp, #0]
    d55c:	481b      	ldr	r0, [pc, #108]	; (d5cc <smp_send_pairing_confirm+0xa8>)
    d55e:	4623      	mov	r3, r4
    d560:	6800      	ldr	r0, [r0, #0]
    d562:	f105 02e7 	add.w	r2, r5, #231	; 0xe7
    d566:	f205 1117 	addw	r1, r5, #279	; 0x117
    d56a:	f01a ffe6 	bl	2853a <smp_f4>
    d56e:	4604      	mov	r4, r0
    d570:	b1f8      	cbz	r0, d5b2 <smp_send_pairing_confirm+0x8e>
		net_buf_unref(buf);
    d572:	4630      	mov	r0, r6
    d574:	f00f f940 	bl	1c7f8 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    d578:	e012      	b.n	d5a0 <smp_send_pairing_confirm+0x7c>
	switch (smp->method) {
    d57a:	2c03      	cmp	r4, #3
    d57c:	d017      	beq.n	d5ae <smp_send_pairing_confirm+0x8a>
    d57e:	f01a ff10 	bl	283a2 <arch_is_user_context>
    d582:	4b13      	ldr	r3, [pc, #76]	; (d5d0 <smp_send_pairing_confirm+0xac>)
    d584:	4a13      	ldr	r2, [pc, #76]	; (d5d4 <smp_send_pairing_confirm+0xb0>)
    d586:	f895 10c8 	ldrb.w	r1, [r5, #200]	; 0xc8
    d58a:	1a9b      	subs	r3, r3, r2
    d58c:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unknown pairing method (%u)", smp->method);
    d58e:	019b      	lsls	r3, r3, #6
    d590:	f043 0301 	orr.w	r3, r3, #1
    d594:	b130      	cbz	r0, d5a4 <smp_send_pairing_confirm+0x80>
    d596:	460a      	mov	r2, r1
    d598:	4618      	mov	r0, r3
    d59a:	490f      	ldr	r1, [pc, #60]	; (d5d8 <smp_send_pairing_confirm+0xb4>)
    d59c:	f017 fc7b 	bl	24e96 <log_from_user>
		return BT_SMP_ERR_UNSPECIFIED;
    d5a0:	2008      	movs	r0, #8
    d5a2:	e011      	b.n	d5c8 <smp_send_pairing_confirm+0xa4>
		BT_ERR("Unknown pairing method (%u)", smp->method);
    d5a4:	480c      	ldr	r0, [pc, #48]	; (d5d8 <smp_send_pairing_confirm+0xb4>)
    d5a6:	461a      	mov	r2, r3
    d5a8:	f017 fca8 	bl	24efc <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
    d5ac:	e7f8      	b.n	d5a0 <smp_send_pairing_confirm+0x7c>
	switch (smp->method) {
    d5ae:	2400      	movs	r4, #0
    d5b0:	e7c9      	b.n	d546 <smp_send_pairing_confirm+0x22>
	smp_send(smp, buf, NULL, NULL);
    d5b2:	4602      	mov	r2, r0
    d5b4:	4631      	mov	r1, r6
    d5b6:	4628      	mov	r0, r5
    d5b8:	f7ff fe38 	bl	d22c <smp_send.isra.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    d5bc:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
    d5c0:	4621      	mov	r1, r4
    d5c2:	f01a ff2a 	bl	2841a <atomic_clear_bit>
	return 0;
    d5c6:	4620      	mov	r0, r4
}
    d5c8:	b002      	add	sp, #8
    d5ca:	bd70      	pop	{r4, r5, r6, pc}
    d5cc:	20000ec4 	.word	0x20000ec4
    d5d0:	0002a7d8 	.word	0x0002a7d8
    d5d4:	0002a6d0 	.word	0x0002a6d0
    d5d8:	0002e3f7 	.word	0x0002e3f7

0000d5dc <smp_public_key_slave>:
{
    d5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
    d5de:	f100 05c4 	add.w	r5, r0, #196	; 0xc4
{
    d5e2:	4604      	mov	r4, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
    d5e4:	210e      	movs	r1, #14
    d5e6:	4628      	mov	r0, r5
    d5e8:	f01a ffce 	bl	28588 <atomic_test_bit>
    d5ec:	b9e0      	cbnz	r0, d628 <smp_public_key_slave+0x4c>
	    memcmp(smp->pkey, sc_public_key, 64) == 0) {
    d5ee:	4b59      	ldr	r3, [pc, #356]	; (d754 <smp_public_key_slave+0x178>)
    d5f0:	2240      	movs	r2, #64	; 0x40
    d5f2:	6819      	ldr	r1, [r3, #0]
    d5f4:	f204 1017 	addw	r0, r4, #279	; 0x117
    d5f8:	f01c fee4 	bl	2a3c4 <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
    d5fc:	b9a0      	cbnz	r0, d628 <smp_public_key_slave+0x4c>
    d5fe:	f01a fed0 	bl	283a2 <arch_is_user_context>
    d602:	4b55      	ldr	r3, [pc, #340]	; (d758 <smp_public_key_slave+0x17c>)
    d604:	4a55      	ldr	r2, [pc, #340]	; (d75c <smp_public_key_slave+0x180>)
    d606:	1a9b      	subs	r3, r3, r2
    d608:	08db      	lsrs	r3, r3, #3
		BT_WARN("Remote is using identical public key");
    d60a:	019b      	lsls	r3, r3, #6
    d60c:	f043 0302 	orr.w	r3, r3, #2
    d610:	b128      	cbz	r0, d61e <smp_public_key_slave+0x42>
    d612:	4953      	ldr	r1, [pc, #332]	; (d760 <smp_public_key_slave+0x184>)
    d614:	4618      	mov	r0, r3
    d616:	f017 fc3e 	bl	24e96 <log_from_user>
		return BT_SMP_ERR_UNSPECIFIED;
    d61a:	2008      	movs	r0, #8
    d61c:	e03c      	b.n	d698 <smp_public_key_slave+0xbc>
		BT_WARN("Remote is using identical public key");
    d61e:	4850      	ldr	r0, [pc, #320]	; (d760 <smp_public_key_slave+0x184>)
    d620:	4619      	mov	r1, r3
    d622:	f017 fc5e 	bl	24ee2 <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
    d626:	e7f8      	b.n	d61a <smp_public_key_slave+0x3e>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
    d628:	210c      	movs	r1, #12
    d62a:	4620      	mov	r0, r4
    d62c:	f01a ffda 	bl	285e4 <smp_create_pdu.isra.0>
	if (!req_buf) {
    d630:	4606      	mov	r6, r0
    d632:	2800      	cmp	r0, #0
    d634:	d0f1      	beq.n	d61a <smp_public_key_slave+0x3e>
    d636:	2140      	movs	r1, #64	; 0x40
    d638:	3008      	adds	r0, #8
    d63a:	f01b fb33 	bl	28ca4 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
    d63e:	4b45      	ldr	r3, [pc, #276]	; (d754 <smp_public_key_slave+0x178>)
    d640:	681b      	ldr	r3, [r3, #0]
    d642:	4602      	mov	r2, r0
    d644:	f103 0120 	add.w	r1, r3, #32
    d648:	f853 7b04 	ldr.w	r7, [r3], #4
    d64c:	f842 7b04 	str.w	r7, [r2], #4
    d650:	428b      	cmp	r3, r1
    d652:	d1f9      	bne.n	d648 <smp_public_key_slave+0x6c>
    d654:	f100 0220 	add.w	r2, r0, #32
    d658:	f103 0120 	add.w	r1, r3, #32
    d65c:	f853 0b04 	ldr.w	r0, [r3], #4
    d660:	f842 0b04 	str.w	r0, [r2], #4
    d664:	428b      	cmp	r3, r1
    d666:	d1f9      	bne.n	d65c <smp_public_key_slave+0x80>
	smp_send(smp, req_buf, NULL, NULL);
    d668:	2200      	movs	r2, #0
    d66a:	4631      	mov	r1, r6
    d66c:	4620      	mov	r0, r4
    d66e:	f7ff fddd 	bl	d22c <smp_send.isra.0>
	switch (smp->method) {
    d672:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    d676:	2b05      	cmp	r3, #5
    d678:	d853      	bhi.n	d722 <smp_public_key_slave+0x146>
    d67a:	e8df f003 	tbb	[pc, r3]
    d67e:	3503      	.short	0x3503
    d680:	5052030e 	.word	0x5052030e
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    d684:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    d688:	2104      	movs	r1, #4
    d68a:	f01a fea0 	bl	283ce <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
    d68e:	4620      	mov	r0, r4
    d690:	f7ff ff48 	bl	d524 <smp_send_pairing_confirm>
		if (err) {
    d694:	2800      	cmp	r0, #0
    d696:	d035      	beq.n	d704 <smp_public_key_slave+0x128>
}
    d698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    d69a:	2104      	movs	r1, #4
    d69c:	f504 70cc 	add.w	r0, r4, #408	; 0x198
    d6a0:	f004 fba4 	bl	11dec <bt_rand>
    d6a4:	2800      	cmp	r0, #0
    d6a6:	d1b8      	bne.n	d61a <smp_public_key_slave+0x3e>
		smp->passkey %= 1000000;
    d6a8:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
    d6ac:	4a2d      	ldr	r2, [pc, #180]	; (d764 <smp_public_key_slave+0x188>)
	if (bt_auth && bt_auth->passkey_display) {
    d6ae:	4e2e      	ldr	r6, [pc, #184]	; (d768 <smp_public_key_slave+0x18c>)
		smp->passkey %= 1000000;
    d6b0:	fbb1 f3f2 	udiv	r3, r1, r2
    d6b4:	fb02 1313 	mls	r3, r2, r3, r1
    d6b8:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
	if (bt_auth && bt_auth->passkey_display) {
    d6bc:	6833      	ldr	r3, [r6, #0]
	smp->passkey_round = 0U;
    d6be:	f884 019c 	strb.w	r0, [r4, #412]	; 0x19c
	if (bt_auth && bt_auth->passkey_display) {
    d6c2:	b15b      	cbz	r3, d6dc <smp_public_key_slave+0x100>
    d6c4:	681b      	ldr	r3, [r3, #0]
    d6c6:	b14b      	cbz	r3, d6dc <smp_public_key_slave+0x100>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    d6c8:	210b      	movs	r1, #11
    d6ca:	4628      	mov	r0, r5
    d6cc:	f01a fe7f 	bl	283ce <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    d6d0:	6833      	ldr	r3, [r6, #0]
    d6d2:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
    d6d6:	681b      	ldr	r3, [r3, #0]
    d6d8:	6820      	ldr	r0, [r4, #0]
    d6da:	4798      	blx	r3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    d6dc:	2103      	movs	r1, #3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    d6de:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    d6e2:	f01a fe74 	bl	283ce <atomic_set_bit>
		break;
    d6e6:	e00d      	b.n	d704 <smp_public_key_slave+0x128>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    d6e8:	2103      	movs	r1, #3
    d6ea:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    d6ee:	f01a fe6e 	bl	283ce <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    d6f2:	4628      	mov	r0, r5
    d6f4:	210a      	movs	r1, #10
    d6f6:	f01a fe6a 	bl	283ce <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
    d6fa:	4b1b      	ldr	r3, [pc, #108]	; (d768 <smp_public_key_slave+0x18c>)
    d6fc:	6820      	ldr	r0, [r4, #0]
    d6fe:	681b      	ldr	r3, [r3, #0]
    d700:	685b      	ldr	r3, [r3, #4]
    d702:	4798      	blx	r3
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    d704:	4628      	mov	r0, r5
    d706:	2107      	movs	r1, #7
    d708:	f01a fe61 	bl	283ce <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
    d70c:	2008      	movs	r0, #8
    d70e:	f7ff fda5 	bl	d25c <smp_find>
    d712:	b9e8      	cbnz	r0, d750 <smp_public_key_slave+0x174>
		return smp_dhkey_generate(smp);
    d714:	4620      	mov	r0, r4
}
    d716:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return smp_dhkey_generate(smp);
    d71a:	f7ff bccd 	b.w	d0b8 <smp_dhkey_generate>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    d71e:	2104      	movs	r1, #4
    d720:	e7dd      	b.n	d6de <smp_public_key_slave+0x102>
    d722:	f01a fe3e 	bl	283a2 <arch_is_user_context>
    d726:	4b0c      	ldr	r3, [pc, #48]	; (d758 <smp_public_key_slave+0x17c>)
    d728:	4a0c      	ldr	r2, [pc, #48]	; (d75c <smp_public_key_slave+0x180>)
    d72a:	f894 10c8 	ldrb.w	r1, [r4, #200]	; 0xc8
    d72e:	1a9b      	subs	r3, r3, r2
    d730:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unknown pairing method (%u)", smp->method);
    d732:	019b      	lsls	r3, r3, #6
    d734:	f043 0301 	orr.w	r3, r3, #1
    d738:	b128      	cbz	r0, d746 <smp_public_key_slave+0x16a>
    d73a:	460a      	mov	r2, r1
    d73c:	4618      	mov	r0, r3
    d73e:	490b      	ldr	r1, [pc, #44]	; (d76c <smp_public_key_slave+0x190>)
    d740:	f017 fba9 	bl	24e96 <log_from_user>
    d744:	e769      	b.n	d61a <smp_public_key_slave+0x3e>
    d746:	4809      	ldr	r0, [pc, #36]	; (d76c <smp_public_key_slave+0x190>)
    d748:	461a      	mov	r2, r3
    d74a:	f017 fbd7 	bl	24efc <log_1>
    d74e:	e764      	b.n	d61a <smp_public_key_slave+0x3e>
	return 0;
    d750:	2000      	movs	r0, #0
    d752:	e7a1      	b.n	d698 <smp_public_key_slave+0xbc>
    d754:	20000ec4 	.word	0x20000ec4
    d758:	0002a7d8 	.word	0x0002a7d8
    d75c:	0002a6d0 	.word	0x0002a6d0
    d760:	0002e46f 	.word	0x0002e46f
    d764:	000f4240 	.word	0x000f4240
    d768:	20000e30 	.word	0x20000e30
    d76c:	0002e3f7 	.word	0x0002e3f7

0000d770 <smp_public_key>:
{
    d770:	b538      	push	{r3, r4, r5, lr}
    d772:	688b      	ldr	r3, [r1, #8]
    d774:	4604      	mov	r4, r0
	memcpy(smp->pkey, req->x, 32);
    d776:	f200 1017 	addw	r0, r0, #279	; 0x117
    d77a:	4602      	mov	r2, r0
    d77c:	f103 0120 	add.w	r1, r3, #32
    d780:	f853 5b04 	ldr.w	r5, [r3], #4
    d784:	f842 5b04 	str.w	r5, [r2], #4
    d788:	428b      	cmp	r3, r1
    d78a:	d1f9      	bne.n	d780 <smp_public_key+0x10>
    d78c:	f204 1237 	addw	r2, r4, #311	; 0x137
    d790:	f103 0120 	add.w	r1, r3, #32
    d794:	f853 5b04 	ldr.w	r5, [r3], #4
    d798:	f842 5b04 	str.w	r5, [r2], #4
    d79c:	428b      	cmp	r3, r1
    d79e:	d1f9      	bne.n	d794 <smp_public_key+0x24>
	if (bt_pub_key_is_debug(smp->pkey)) {
    d7a0:	f7fc fb60 	bl	9e64 <bt_pub_key_is_debug>
    d7a4:	b950      	cbnz	r0, d7bc <smp_public_key+0x4c>
	if (!sc_public_key) {
    d7a6:	4b20      	ldr	r3, [pc, #128]	; (d828 <smp_public_key+0xb8>)
    d7a8:	681d      	ldr	r5, [r3, #0]
    d7aa:	2d00      	cmp	r5, #0
    d7ac:	d137      	bne.n	d81e <smp_public_key+0xae>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    d7ae:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    d7b2:	2106      	movs	r1, #6
    d7b4:	f01a fe0b 	bl	283ce <atomic_set_bit>
		return 0;
    d7b8:	4628      	mov	r0, r5
    d7ba:	e02a      	b.n	d812 <smp_public_key+0xa2>
    d7bc:	f01a fdf1 	bl	283a2 <arch_is_user_context>
    d7c0:	4b1a      	ldr	r3, [pc, #104]	; (d82c <smp_public_key+0xbc>)
    d7c2:	4a1b      	ldr	r2, [pc, #108]	; (d830 <smp_public_key+0xc0>)
    d7c4:	1a9b      	subs	r3, r3, r2
    d7c6:	08db      	lsrs	r3, r3, #3
		BT_INFO("Remote is using Debug Public key");
    d7c8:	019b      	lsls	r3, r3, #6
    d7ca:	f043 0303 	orr.w	r3, r3, #3
    d7ce:	b308      	cbz	r0, d814 <smp_public_key+0xa4>
    d7d0:	4918      	ldr	r1, [pc, #96]	; (d834 <smp_public_key+0xc4>)
    d7d2:	4618      	mov	r0, r3
    d7d4:	f017 fb5f 	bl	24e96 <log_from_user>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
    d7d8:	210e      	movs	r1, #14
    d7da:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    d7de:	f01a fdf6 	bl	283ce <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
    d7e2:	6825      	ldr	r5, [r4, #0]
	if (!conn->le.keys) {
    d7e4:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    d7e8:	b933      	cbnz	r3, d7f8 <smp_public_key+0x88>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    d7ea:	7a28      	ldrb	r0, [r5, #8]
    d7ec:	f105 0188 	add.w	r1, r5, #136	; 0x88
    d7f0:	f001 fa16 	bl	ec20 <bt_keys_get_addr>
    d7f4:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
    d7f8:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    d7fc:	2b00      	cmp	r3, #0
    d7fe:	d0d2      	beq.n	d7a6 <smp_public_key+0x36>
    d800:	89da      	ldrh	r2, [r3, #14]
    d802:	f002 0224 	and.w	r2, r2, #36	; 0x24
    d806:	2a00      	cmp	r2, #0
    d808:	d0cd      	beq.n	d7a6 <smp_public_key+0x36>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
    d80a:	7b5b      	ldrb	r3, [r3, #13]
    d80c:	079b      	lsls	r3, r3, #30
    d80e:	d4ca      	bmi.n	d7a6 <smp_public_key+0x36>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
    d810:	2003      	movs	r0, #3
}
    d812:	bd38      	pop	{r3, r4, r5, pc}
		BT_INFO("Remote is using Debug Public key");
    d814:	4807      	ldr	r0, [pc, #28]	; (d834 <smp_public_key+0xc4>)
    d816:	4619      	mov	r1, r3
    d818:	f017 fb63 	bl	24ee2 <log_0>
    d81c:	e7dc      	b.n	d7d8 <smp_public_key+0x68>
	err = smp_public_key_slave(smp);
    d81e:	4620      	mov	r0, r4
}
    d820:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	err = smp_public_key_slave(smp);
    d824:	f7ff beda 	b.w	d5dc <smp_public_key_slave>
    d828:	20000ec4 	.word	0x20000ec4
    d82c:	0002a7d8 	.word	0x0002a7d8
    d830:	0002a6d0 	.word	0x0002a6d0
    d834:	0002e494 	.word	0x0002e494

0000d838 <smp_pairing_req>:
{
    d838:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
    d83c:	688d      	ldr	r5, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    d83e:	78eb      	ldrb	r3, [r5, #3]
    d840:	3b07      	subs	r3, #7
    d842:	2b09      	cmp	r3, #9
{
    d844:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    d846:	d904      	bls.n	d852 <smp_pairing_req+0x1a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    d848:	2506      	movs	r5, #6
}
    d84a:	4628      	mov	r0, r5
    d84c:	b002      	add	sp, #8
    d84e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct bt_conn *conn = smp->chan.chan.conn;
    d852:	6807      	ldr	r7, [r0, #0]
	if (!conn->le.keys) {
    d854:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
    d858:	b163      	cbz	r3, d874 <smp_pairing_req+0x3c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
    d85a:	f104 06c4 	add.w	r6, r4, #196	; 0xc4
    d85e:	210f      	movs	r1, #15
    d860:	4630      	mov	r0, r6
    d862:	f01a fe91 	bl	28588 <atomic_test_bit>
    d866:	b980      	cbnz	r0, d88a <smp_pairing_req+0x52>
		int ret = smp_init(smp);
    d868:	4620      	mov	r0, r4
    d86a:	f7ff fcc1 	bl	d1f0 <smp_init>
		if (ret) {
    d86e:	b160      	cbz	r0, d88a <smp_pairing_req+0x52>
			return ret;
    d870:	b2c5      	uxtb	r5, r0
    d872:	e7ea      	b.n	d84a <smp_pairing_req+0x12>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    d874:	7a38      	ldrb	r0, [r7, #8]
    d876:	f107 0188 	add.w	r1, r7, #136	; 0x88
    d87a:	f001 f9d1 	bl	ec20 <bt_keys_get_addr>
    d87e:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
		if (!conn->le.keys) {
    d882:	2800      	cmp	r0, #0
    d884:	d1e9      	bne.n	d85a <smp_pairing_req+0x22>
	switch (sec) {
    d886:	2508      	movs	r5, #8
    d888:	e7df      	b.n	d84a <smp_pairing_req+0x12>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    d88a:	2301      	movs	r3, #1
    d88c:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
    d890:	682b      	ldr	r3, [r5, #0]
    d892:	f8c4 30ca 	str.w	r3, [r4, #202]	; 0xca
    d896:	88ab      	ldrh	r3, [r5, #4]
    d898:	f8a4 30ce 	strh.w	r3, [r4, #206]	; 0xce
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    d89c:	2302      	movs	r3, #2
    d89e:	f884 30d0 	strb.w	r3, [r4, #208]	; 0xd0
	rsp->auth_req = get_auth(conn, req->auth_req);
    d8a2:	78a8      	ldrb	r0, [r5, #2]
    d8a4:	f7ff fc38 	bl	d118 <get_auth.isra.0>
    d8a8:	f884 00d3 	strb.w	r0, [r4, #211]	; 0xd3
    d8ac:	4680      	mov	r8, r0
	rsp->io_capability = get_io_capa();
    d8ae:	f7ff fbdd 	bl	d06c <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    d8b2:	4bb1      	ldr	r3, [pc, #708]	; (db78 <smp_pairing_req+0x340>)
	rsp->io_capability = get_io_capa();
    d8b4:	f884 00d1 	strb.w	r0, [r4, #209]	; 0xd1
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    d8b8:	781b      	ldrb	r3, [r3, #0]
    d8ba:	f884 30d2 	strb.w	r3, [r4, #210]	; 0xd2
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    d8be:	2310      	movs	r3, #16
    d8c0:	f884 30d4 	strb.w	r3, [r4, #212]	; 0xd4
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
    d8c4:	792b      	ldrb	r3, [r5, #4]
    d8c6:	f003 0303 	and.w	r3, r3, #3
    d8ca:	f884 30d5 	strb.w	r3, [r4, #213]	; 0xd5
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    d8ce:	796b      	ldrb	r3, [r5, #5]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    d8d0:	f018 0f08 	tst.w	r8, #8
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    d8d4:	f003 0301 	and.w	r3, r3, #1
    d8d8:	f884 30d6 	strb.w	r3, [r4, #214]	; 0xd6
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    d8dc:	d00f      	beq.n	d8fe <smp_pairing_req+0xc6>
    d8de:	78ab      	ldrb	r3, [r5, #2]
    d8e0:	0719      	lsls	r1, r3, #28
    d8e2:	d50c      	bpl.n	d8fe <smp_pairing_req+0xc6>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    d8e4:	2105      	movs	r1, #5
    d8e6:	4630      	mov	r0, r6
    d8e8:	f01a fd71 	bl	283ce <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
    d8ec:	f894 30d5 	ldrb.w	r3, [r4, #213]	; 0xd5
    d8f0:	f003 0302 	and.w	r3, r3, #2
    d8f4:	f884 30d5 	strb.w	r3, [r4, #213]	; 0xd5
		rsp->resp_key_dist &= SEND_KEYS_SC;
    d8f8:	2300      	movs	r3, #0
    d8fa:	f884 30d6 	strb.w	r3, [r4, #214]	; 0xd6
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    d8fe:	f894 30d3 	ldrb.w	r3, [r4, #211]	; 0xd3
    d902:	069a      	lsls	r2, r3, #26
    d904:	d506      	bpl.n	d914 <smp_pairing_req+0xdc>
    d906:	78ab      	ldrb	r3, [r5, #2]
    d908:	069b      	lsls	r3, r3, #26
    d90a:	d503      	bpl.n	d914 <smp_pairing_req+0xdc>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    d90c:	2114      	movs	r1, #20
    d90e:	4630      	mov	r0, r6
    d910:	f01a fd5d 	bl	283ce <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
    d914:	f894 30d6 	ldrb.w	r3, [r4, #214]	; 0xd6
    d918:	f884 31a8 	strb.w	r3, [r4, #424]	; 0x1a8
	smp->remote_dist = rsp->init_key_dist;
    d91c:	f894 30d5 	ldrb.w	r3, [r4, #213]	; 0xd5
    d920:	f884 31a9 	strb.w	r3, [r4, #425]	; 0x1a9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    d924:	f894 30d3 	ldrb.w	r3, [r4, #211]	; 0xd3
    d928:	07d8      	lsls	r0, r3, #31
    d92a:	d506      	bpl.n	d93a <smp_pairing_req+0x102>
    d92c:	78ab      	ldrb	r3, [r5, #2]
    d92e:	07d9      	lsls	r1, r3, #31
    d930:	d503      	bpl.n	d93a <smp_pairing_req+0x102>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    d932:	210d      	movs	r1, #13
    d934:	4630      	mov	r0, r6
    d936:	f01a fd4a 	bl	283ce <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    d93a:	2103      	movs	r1, #3
    d93c:	4630      	mov	r0, r6
    d93e:	f01a fd46 	bl	283ce <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    d942:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
    d944:	782d      	ldrb	r5, [r5, #0]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    d946:	f01a fe1f 	bl	28588 <atomic_test_bit>
    d94a:	bb48      	cbnz	r0, d9a0 <smp_pairing_req+0x168>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    d94c:	2d04      	cmp	r5, #4
    d94e:	d81d      	bhi.n	d98c <smp_pairing_req+0x154>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
    d950:	f894 20d2 	ldrb.w	r2, [r4, #210]	; 0xd2
    d954:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
    d958:	4013      	ands	r3, r2
    d95a:	07da      	lsls	r2, r3, #31
    d95c:	d43d      	bmi.n	d9da <smp_pairing_req+0x1a2>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    d95e:	f894 00cc 	ldrb.w	r0, [r4, #204]	; 0xcc
    d962:	f894 30d3 	ldrb.w	r3, [r4, #211]	; 0xd3
    d966:	4318      	orrs	r0, r3
    d968:	f010 0004 	ands.w	r0, r0, #4
    d96c:	d00e      	beq.n	d98c <smp_pairing_req+0x154>
	method = gen_method_legacy[remote_io][get_io_capa()];
    d96e:	f7ff fb7d 	bl	d06c <get_io_capa>
    d972:	4b82      	ldr	r3, [pc, #520]	; (db7c <smp_pairing_req+0x344>)
    d974:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    d978:	441d      	add	r5, r3
    d97a:	5c28      	ldrb	r0, [r5, r0]
	if (method == PASSKEY_ROLE) {
    d97c:	2804      	cmp	r0, #4
    d97e:	d105      	bne.n	d98c <smp_pairing_req+0x154>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    d980:	6823      	ldr	r3, [r4, #0]
    d982:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_INPUT;
    d984:	2b00      	cmp	r3, #0
    d986:	bf0c      	ite	eq
    d988:	2002      	moveq	r0, #2
    d98a:	2001      	movne	r0, #1
	smp->method = get_pair_method(smp, req->io_capability);
    d98c:	f884 00c8 	strb.w	r0, [r4, #200]	; 0xc8
	if (!update_keys_check(smp, conn->le.keys)) {
    d990:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
    d994:	4620      	mov	r0, r4
    d996:	f01a fe00 	bl	2859a <update_keys_check>
    d99a:	bb20      	cbnz	r0, d9e6 <smp_pairing_req+0x1ae>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
    d99c:	2503      	movs	r5, #3
    d99e:	e754      	b.n	d84a <smp_pairing_req+0x12>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
    d9a0:	f894 00cc 	ldrb.w	r0, [r4, #204]	; 0xcc
    d9a4:	f894 20d3 	ldrb.w	r2, [r4, #211]	; 0xd3
    d9a8:	ea00 0302 	and.w	r3, r0, r2
    d9ac:	071b      	lsls	r3, r3, #28
    d9ae:	d506      	bpl.n	d9be <smp_pairing_req+0x186>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
    d9b0:	f894 10d2 	ldrb.w	r1, [r4, #210]	; 0xd2
    d9b4:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
    d9b8:	430b      	orrs	r3, r1
    d9ba:	07d9      	lsls	r1, r3, #31
    d9bc:	d40f      	bmi.n	d9de <smp_pairing_req+0x1a6>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    d9be:	2d04      	cmp	r5, #4
    d9c0:	d80f      	bhi.n	d9e2 <smp_pairing_req+0x1aa>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    d9c2:	4310      	orrs	r0, r2
    d9c4:	f010 0004 	ands.w	r0, r0, #4
    d9c8:	d0e0      	beq.n	d98c <smp_pairing_req+0x154>
	return gen_method_sc[remote_io][get_io_capa()];
    d9ca:	f7ff fb4f 	bl	d06c <get_io_capa>
    d9ce:	4b6c      	ldr	r3, [pc, #432]	; (db80 <smp_pairing_req+0x348>)
    d9d0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    d9d4:	441d      	add	r5, r3
    d9d6:	5c28      	ldrb	r0, [r5, r0]
    d9d8:	e7d8      	b.n	d98c <smp_pairing_req+0x154>
		return LEGACY_OOB;
    d9da:	2006      	movs	r0, #6
    d9dc:	e7d6      	b.n	d98c <smp_pairing_req+0x154>
			return LE_SC_OOB;
    d9de:	2005      	movs	r0, #5
    d9e0:	e7d4      	b.n	d98c <smp_pairing_req+0x154>
		return JUST_WORKS;
    d9e2:	2000      	movs	r0, #0
    d9e4:	e7d2      	b.n	d98c <smp_pairing_req+0x154>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
    d9e6:	6823      	ldr	r3, [r4, #0]
    d9e8:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
    d9ea:	2b03      	cmp	r3, #3
    d9ec:	d03a      	beq.n	da64 <smp_pairing_req+0x22c>
    d9ee:	d826      	bhi.n	da3e <smp_pairing_req+0x206>
    d9f0:	3b01      	subs	r3, #1
    d9f2:	2b01      	cmp	r3, #1
    d9f4:	f63f af47 	bhi.w	d886 <smp_pairing_req+0x4e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    d9f8:	2105      	movs	r1, #5
    d9fa:	4630      	mov	r0, r6
    d9fc:	f01a fdc4 	bl	28588 <atomic_test_bit>
    da00:	2800      	cmp	r0, #0
    da02:	f040 80dc 	bne.w	dbbe <smp_pairing_req+0x386>
	struct bt_conn *conn = smp->chan.chan.conn;
    da06:	6825      	ldr	r5, [r4, #0]
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
    da08:	7a28      	ldrb	r0, [r5, #8]
    da0a:	f105 0188 	add.w	r1, r5, #136	; 0x88
    da0e:	f001 f98d 	bl	ed2c <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
    da12:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    da16:	b378      	cbz	r0, da78 <smp_pairing_req+0x240>
    da18:	7b42      	ldrb	r2, [r0, #13]
    da1a:	07d2      	lsls	r2, r2, #31
    da1c:	d52c      	bpl.n	da78 <smp_pairing_req+0x240>
    da1e:	bb5b      	cbnz	r3, da78 <smp_pairing_req+0x240>
    da20:	f01a fcbf 	bl	283a2 <arch_is_user_context>
    da24:	4b57      	ldr	r3, [pc, #348]	; (db84 <smp_pairing_req+0x34c>)
    da26:	4a58      	ldr	r2, [pc, #352]	; (db88 <smp_pairing_req+0x350>)
    da28:	1a9b      	subs	r3, r3, r2
    da2a:	08db      	lsrs	r3, r3, #3
		BT_ERR("JustWorks failed, authenticated keys present");
    da2c:	019b      	lsls	r3, r3, #6
    da2e:	f043 0301 	orr.w	r3, r3, #1
    da32:	b1e0      	cbz	r0, da6e <smp_pairing_req+0x236>
    da34:	4955      	ldr	r1, [pc, #340]	; (db8c <smp_pairing_req+0x354>)
    da36:	4618      	mov	r0, r3
    da38:	f017 fa2d 	bl	24e96 <log_from_user>
    da3c:	e723      	b.n	d886 <smp_pairing_req+0x4e>
	switch (sec) {
    da3e:	2b04      	cmp	r3, #4
    da40:	f47f af21 	bne.w	d886 <smp_pairing_req+0x4e>
	return MIN(req->max_key_size, rsp->max_key_size);
    da44:	f894 30d4 	ldrb.w	r3, [r4, #212]	; 0xd4
    da48:	f894 20cd 	ldrb.w	r2, [r4, #205]	; 0xcd
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
    da4c:	4293      	cmp	r3, r2
    da4e:	bf28      	it	cs
    da50:	4613      	movcs	r3, r2
    da52:	2b10      	cmp	r3, #16
    da54:	f47f aef8 	bne.w	d848 <smp_pairing_req+0x10>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    da58:	2105      	movs	r1, #5
    da5a:	4630      	mov	r0, r6
    da5c:	f01a fd94 	bl	28588 <atomic_test_bit>
    da60:	2800      	cmp	r0, #0
    da62:	d09b      	beq.n	d99c <smp_pairing_req+0x164>
		if (smp->method == JUST_WORKS) {
    da64:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    da68:	2b00      	cmp	r3, #0
    da6a:	d1c5      	bne.n	d9f8 <smp_pairing_req+0x1c0>
    da6c:	e796      	b.n	d99c <smp_pairing_req+0x164>
		BT_ERR("JustWorks failed, authenticated keys present");
    da6e:	4847      	ldr	r0, [pc, #284]	; (db8c <smp_pairing_req+0x354>)
    da70:	4619      	mov	r1, r3
    da72:	f017 fa36 	bl	24ee2 <log_0>
	if (ret) {
    da76:	e706      	b.n	d886 <smp_pairing_req+0x4e>
	switch (smp->method) {
    da78:	2b06      	cmp	r3, #6
    da7a:	d86a      	bhi.n	db52 <smp_pairing_req+0x31a>
    da7c:	e8df f003 	tbb	[pc, r3]
    da80:	69345f1d 	.word	0x69345f1d
    da84:	6969      	.short	0x6969
    da86:	04          	.byte	0x04
    da87:	00          	.byte	0x00
		if (bt_auth && bt_auth->oob_data_request) {
    da88:	4d41      	ldr	r5, [pc, #260]	; (db90 <smp_pairing_req+0x358>)
    da8a:	682b      	ldr	r3, [r5, #0]
    da8c:	2b00      	cmp	r3, #0
    da8e:	f000 808a 	beq.w	dba6 <smp_pairing_req+0x36e>
    da92:	68db      	ldr	r3, [r3, #12]
    da94:	2b00      	cmp	r3, #0
    da96:	f000 8086 	beq.w	dba6 <smp_pairing_req+0x36e>
			struct bt_conn_oob_info info = {
    da9a:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    da9c:	210a      	movs	r1, #10
    da9e:	4630      	mov	r0, r6
			struct bt_conn_oob_info info = {
    daa0:	f8ad 3004 	strh.w	r3, [sp, #4]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    daa4:	f01a fc93 	bl	283ce <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
    daa8:	682b      	ldr	r3, [r5, #0]
    daaa:	6820      	ldr	r0, [r4, #0]
    daac:	68db      	ldr	r3, [r3, #12]
    daae:	a901      	add	r1, sp, #4
    dab0:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    dab2:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    dab6:	2b00      	cmp	r3, #0
    dab8:	d177      	bne.n	dbaa <smp_pairing_req+0x372>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    daba:	210f      	movs	r1, #15
    dabc:	4630      	mov	r0, r6
    dabe:	f01a fd63 	bl	28588 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    dac2:	4605      	mov	r5, r0
    dac4:	2800      	cmp	r0, #0
    dac6:	d170      	bne.n	dbaa <smp_pairing_req+0x372>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    dac8:	4f31      	ldr	r7, [pc, #196]	; (db90 <smp_pairing_req+0x358>)
    daca:	683b      	ldr	r3, [r7, #0]
    dacc:	2b00      	cmp	r3, #0
    dace:	d06c      	beq.n	dbaa <smp_pairing_req+0x372>
	    bt_auth && bt_auth->pairing_confirm) {
    dad0:	695b      	ldr	r3, [r3, #20]
    dad2:	2b00      	cmp	r3, #0
    dad4:	d069      	beq.n	dbaa <smp_pairing_req+0x372>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    dad6:	4630      	mov	r0, r6
    dad8:	210a      	movs	r1, #10
    dada:	f01a fc78 	bl	283ce <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    dade:	683b      	ldr	r3, [r7, #0]
    dae0:	6820      	ldr	r0, [r4, #0]
    dae2:	695b      	ldr	r3, [r3, #20]
		bt_auth->pairing_confirm(conn);
    dae4:	4798      	blx	r3
		return 0;
    dae6:	e6b0      	b.n	d84a <smp_pairing_req+0x12>
			if (bt_rand(&passkey, sizeof(passkey))) {
    dae8:	2104      	movs	r1, #4
    daea:	eb0d 0001 	add.w	r0, sp, r1
    daee:	f004 f97d 	bl	11dec <bt_rand>
    daf2:	2800      	cmp	r0, #0
    daf4:	f47f aec7 	bne.w	d886 <smp_pairing_req+0x4e>
			passkey %= 1000000;
    daf8:	9901      	ldr	r1, [sp, #4]
    dafa:	4a26      	ldr	r2, [pc, #152]	; (db94 <smp_pairing_req+0x35c>)
		if (bt_auth && bt_auth->passkey_display) {
    dafc:	4f24      	ldr	r7, [pc, #144]	; (db90 <smp_pairing_req+0x358>)
			passkey %= 1000000;
    dafe:	fbb1 f3f2 	udiv	r3, r1, r2
    db02:	fb02 1313 	mls	r3, r2, r3, r1
    db06:	9301      	str	r3, [sp, #4]
		if (bt_auth && bt_auth->passkey_display) {
    db08:	683b      	ldr	r3, [r7, #0]
    db0a:	b153      	cbz	r3, db22 <smp_pairing_req+0x2ea>
    db0c:	681b      	ldr	r3, [r3, #0]
    db0e:	b143      	cbz	r3, db22 <smp_pairing_req+0x2ea>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    db10:	210b      	movs	r1, #11
    db12:	4630      	mov	r0, r6
    db14:	f01a fc5b 	bl	283ce <atomic_set_bit>
			bt_auth->passkey_display(conn, passkey);
    db18:	683b      	ldr	r3, [r7, #0]
    db1a:	9901      	ldr	r1, [sp, #4]
    db1c:	681b      	ldr	r3, [r3, #0]
    db1e:	4628      	mov	r0, r5
    db20:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
    db22:	9b01      	ldr	r3, [sp, #4]
	dst[0] = val;
    db24:	f884 3107 	strb.w	r3, [r4, #263]	; 0x107
	dst[1] = val >> 8;
    db28:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    db2c:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    db2e:	f884 3109 	strb.w	r3, [r4, #265]	; 0x109
	dst[1] = val >> 8;
    db32:	0a1b      	lsrs	r3, r3, #8
    db34:	f884 2108 	strb.w	r2, [r4, #264]	; 0x108
    db38:	f884 310a 	strb.w	r3, [r4, #266]	; 0x10a
	if (ret) {
    db3c:	e7b9      	b.n	dab2 <smp_pairing_req+0x27a>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    db3e:	4630      	mov	r0, r6
    db40:	210a      	movs	r1, #10
    db42:	f01a fc44 	bl	283ce <atomic_set_bit>
		bt_auth->passkey_entry(conn);
    db46:	4b12      	ldr	r3, [pc, #72]	; (db90 <smp_pairing_req+0x358>)
    db48:	681b      	ldr	r3, [r3, #0]
    db4a:	4628      	mov	r0, r5
    db4c:	685b      	ldr	r3, [r3, #4]
    db4e:	4798      	blx	r3
	if (ret) {
    db50:	e7af      	b.n	dab2 <smp_pairing_req+0x27a>
    db52:	f01a fc26 	bl	283a2 <arch_is_user_context>
    db56:	4b0b      	ldr	r3, [pc, #44]	; (db84 <smp_pairing_req+0x34c>)
    db58:	4a0b      	ldr	r2, [pc, #44]	; (db88 <smp_pairing_req+0x350>)
    db5a:	f894 10c8 	ldrb.w	r1, [r4, #200]	; 0xc8
    db5e:	1a9b      	subs	r3, r3, r2
    db60:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unknown pairing method (%u)", smp->method);
    db62:	019b      	lsls	r3, r3, #6
    db64:	f043 0301 	orr.w	r3, r3, #1
    db68:	b1c0      	cbz	r0, db9c <smp_pairing_req+0x364>
    db6a:	460a      	mov	r2, r1
    db6c:	4618      	mov	r0, r3
    db6e:	490a      	ldr	r1, [pc, #40]	; (db98 <smp_pairing_req+0x360>)
    db70:	f017 f991 	bl	24e96 <log_from_user>
    db74:	e687      	b.n	d886 <smp_pairing_req+0x4e>
    db76:	bf00      	nop
    db78:	20002aa4 	.word	0x20002aa4
    db7c:	0002e6b5 	.word	0x0002e6b5
    db80:	0002e6ce 	.word	0x0002e6ce
    db84:	0002a7d8 	.word	0x0002a7d8
    db88:	0002a6d0 	.word	0x0002a6d0
    db8c:	0002e4b5 	.word	0x0002e4b5
    db90:	20000e30 	.word	0x20000e30
    db94:	000f4240 	.word	0x000f4240
    db98:	0002e3f7 	.word	0x0002e3f7
    db9c:	4815      	ldr	r0, [pc, #84]	; (dbf4 <smp_pairing_req+0x3bc>)
    db9e:	461a      	mov	r2, r3
    dba0:	f017 f9ac 	bl	24efc <log_1>
	if (ret) {
    dba4:	e66f      	b.n	d886 <smp_pairing_req+0x4e>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
    dba6:	2502      	movs	r5, #2
    dba8:	e64f      	b.n	d84a <smp_pairing_req+0x12>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    dbaa:	2103      	movs	r1, #3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    dbac:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    dbb0:	f01a fc0d 	bl	283ce <atomic_set_bit>
	return send_pairing_rsp(smp);
    dbb4:	4620      	mov	r0, r4
    dbb6:	f01a fd53 	bl	28660 <send_pairing_rsp>
    dbba:	4605      	mov	r5, r0
    dbbc:	e645      	b.n	d84a <smp_pairing_req+0x12>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    dbbe:	f894 50c8 	ldrb.w	r5, [r4, #200]	; 0xc8
    dbc2:	b9a5      	cbnz	r5, dbee <smp_pairing_req+0x3b6>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    dbc4:	210f      	movs	r1, #15
    dbc6:	4630      	mov	r0, r6
    dbc8:	f01a fcde 	bl	28588 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    dbcc:	b978      	cbnz	r0, dbee <smp_pairing_req+0x3b6>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    dbce:	f8df 8028 	ldr.w	r8, [pc, #40]	; dbf8 <smp_pairing_req+0x3c0>
    dbd2:	f8d8 3000 	ldr.w	r3, [r8]
    dbd6:	b153      	cbz	r3, dbee <smp_pairing_req+0x3b6>
	    bt_auth && bt_auth->pairing_confirm) {
    dbd8:	695b      	ldr	r3, [r3, #20]
    dbda:	b143      	cbz	r3, dbee <smp_pairing_req+0x3b6>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    dbdc:	4630      	mov	r0, r6
    dbde:	210a      	movs	r1, #10
    dbe0:	f01a fbf5 	bl	283ce <atomic_set_bit>
		bt_auth->pairing_confirm(conn);
    dbe4:	f8d8 3000 	ldr.w	r3, [r8]
    dbe8:	4638      	mov	r0, r7
    dbea:	695b      	ldr	r3, [r3, #20]
    dbec:	e77a      	b.n	dae4 <smp_pairing_req+0x2ac>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    dbee:	210c      	movs	r1, #12
    dbf0:	e7dc      	b.n	dbac <smp_pairing_req+0x374>
    dbf2:	bf00      	nop
    dbf4:	0002e3f7 	.word	0x0002e3f7
    dbf8:	20000e30 	.word	0x20000e30

0000dbfc <smp_ident_info>:
{
    dbfc:	b570      	push	{r4, r5, r6, lr}
    dbfe:	460b      	mov	r3, r1
    dc00:	4605      	mov	r5, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    dc02:	210d      	movs	r1, #13
    dc04:	30c4      	adds	r0, #196	; 0xc4
    dc06:	f01a fcbf 	bl	28588 <atomic_test_bit>
    dc0a:	b3a8      	cbz	r0, dc78 <smp_ident_info+0x7c>
		struct bt_smp_ident_info *req = (void *)buf->data;
    dc0c:	689c      	ldr	r4, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    dc0e:	682b      	ldr	r3, [r5, #0]
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
    dc10:	f103 0688 	add.w	r6, r3, #136	; 0x88
    dc14:	7a19      	ldrb	r1, [r3, #8]
    dc16:	4632      	mov	r2, r6
    dc18:	2002      	movs	r0, #2
    dc1a:	f01a ffb4 	bl	28b86 <bt_keys_get_type>
		if (!keys) {
    dc1e:	bb00      	cbnz	r0, dc62 <smp_ident_info+0x66>
    dc20:	f01a fbbf 	bl	283a2 <arch_is_user_context>
    dc24:	4c18      	ldr	r4, [pc, #96]	; (dc88 <smp_ident_info+0x8c>)
    dc26:	4b19      	ldr	r3, [pc, #100]	; (dc8c <smp_ident_info+0x90>)
    dc28:	1ae4      	subs	r4, r4, r3
    dc2a:	08e4      	lsrs	r4, r4, #3
			BT_ERR("Unable to get keys for %s",
    dc2c:	01a4      	lsls	r4, r4, #6
    dc2e:	f044 0401 	orr.w	r4, r4, #1
    dc32:	b158      	cbz	r0, dc4c <smp_ident_info+0x50>
    dc34:	4630      	mov	r0, r6
    dc36:	f7f9 fa9b 	bl	7170 <bt_addr_le_str_real>
    dc3a:	f7f6 faa3 	bl	4184 <log_strdup>
    dc3e:	4914      	ldr	r1, [pc, #80]	; (dc90 <smp_ident_info+0x94>)
    dc40:	4602      	mov	r2, r0
    dc42:	4620      	mov	r0, r4
    dc44:	f017 f927 	bl	24e96 <log_from_user>
			return BT_SMP_ERR_UNSPECIFIED;
    dc48:	2008      	movs	r0, #8
}
    dc4a:	bd70      	pop	{r4, r5, r6, pc}
			BT_ERR("Unable to get keys for %s",
    dc4c:	4630      	mov	r0, r6
    dc4e:	f7f9 fa8f 	bl	7170 <bt_addr_le_str_real>
    dc52:	f7f6 fa97 	bl	4184 <log_strdup>
    dc56:	4622      	mov	r2, r4
    dc58:	4601      	mov	r1, r0
    dc5a:	480d      	ldr	r0, [pc, #52]	; (dc90 <smp_ident_info+0x94>)
    dc5c:	f017 f94e 	bl	24efc <log_1>
    dc60:	e7f2      	b.n	dc48 <smp_ident_info+0x4c>
    dc62:	4622      	mov	r2, r4
    dc64:	f100 032a 	add.w	r3, r0, #42	; 0x2a
    dc68:	f104 0110 	add.w	r1, r4, #16
    dc6c:	f852 0b04 	ldr.w	r0, [r2], #4
    dc70:	f843 0b04 	str.w	r0, [r3], #4
    dc74:	428a      	cmp	r2, r1
    dc76:	d1f9      	bne.n	dc6c <smp_ident_info+0x70>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
    dc78:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
    dc7c:	2109      	movs	r1, #9
    dc7e:	f01a fba6 	bl	283ce <atomic_set_bit>
	return 0;
    dc82:	2000      	movs	r0, #0
    dc84:	e7e1      	b.n	dc4a <smp_ident_info+0x4e>
    dc86:	bf00      	nop
    dc88:	0002a7d8 	.word	0x0002a7d8
    dc8c:	0002a6d0 	.word	0x0002a6d0
    dc90:	0002e4e2 	.word	0x0002e4e2

0000dc94 <smp_encrypt_info>:
{
    dc94:	b570      	push	{r4, r5, r6, lr}
    dc96:	460b      	mov	r3, r1
    dc98:	4605      	mov	r5, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    dc9a:	210d      	movs	r1, #13
    dc9c:	30c4      	adds	r0, #196	; 0xc4
    dc9e:	f01a fc73 	bl	28588 <atomic_test_bit>
    dca2:	b3a8      	cbz	r0, dd10 <smp_encrypt_info+0x7c>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
    dca4:	689c      	ldr	r4, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    dca6:	682b      	ldr	r3, [r5, #0]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    dca8:	f103 0688 	add.w	r6, r3, #136	; 0x88
    dcac:	7a19      	ldrb	r1, [r3, #8]
    dcae:	4632      	mov	r2, r6
    dcb0:	2004      	movs	r0, #4
    dcb2:	f01a ff68 	bl	28b86 <bt_keys_get_type>
		if (!keys) {
    dcb6:	bb00      	cbnz	r0, dcfa <smp_encrypt_info+0x66>
    dcb8:	f01a fb73 	bl	283a2 <arch_is_user_context>
    dcbc:	4c18      	ldr	r4, [pc, #96]	; (dd20 <smp_encrypt_info+0x8c>)
    dcbe:	4b19      	ldr	r3, [pc, #100]	; (dd24 <smp_encrypt_info+0x90>)
    dcc0:	1ae4      	subs	r4, r4, r3
    dcc2:	08e4      	lsrs	r4, r4, #3
			BT_ERR("Unable to get keys for %s",
    dcc4:	01a4      	lsls	r4, r4, #6
    dcc6:	f044 0401 	orr.w	r4, r4, #1
    dcca:	b158      	cbz	r0, dce4 <smp_encrypt_info+0x50>
    dccc:	4630      	mov	r0, r6
    dcce:	f7f9 fa4f 	bl	7170 <bt_addr_le_str_real>
    dcd2:	f7f6 fa57 	bl	4184 <log_strdup>
    dcd6:	4914      	ldr	r1, [pc, #80]	; (dd28 <smp_encrypt_info+0x94>)
    dcd8:	4602      	mov	r2, r0
    dcda:	4620      	mov	r0, r4
    dcdc:	f017 f8db 	bl	24e96 <log_from_user>
			return BT_SMP_ERR_UNSPECIFIED;
    dce0:	2008      	movs	r0, #8
}
    dce2:	bd70      	pop	{r4, r5, r6, pc}
			BT_ERR("Unable to get keys for %s",
    dce4:	4630      	mov	r0, r6
    dce6:	f7f9 fa43 	bl	7170 <bt_addr_le_str_real>
    dcea:	f7f6 fa4b 	bl	4184 <log_strdup>
    dcee:	4622      	mov	r2, r4
    dcf0:	4601      	mov	r1, r0
    dcf2:	480d      	ldr	r0, [pc, #52]	; (dd28 <smp_encrypt_info+0x94>)
    dcf4:	f017 f902 	bl	24efc <log_1>
    dcf8:	e7f2      	b.n	dce0 <smp_encrypt_info+0x4c>
    dcfa:	4622      	mov	r2, r4
    dcfc:	f100 031a 	add.w	r3, r0, #26
    dd00:	f104 0110 	add.w	r1, r4, #16
    dd04:	f852 0b04 	ldr.w	r0, [r2], #4
    dd08:	f843 0b04 	str.w	r0, [r3], #4
    dd0c:	428a      	cmp	r2, r1
    dd0e:	d1f9      	bne.n	dd04 <smp_encrypt_info+0x70>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
    dd10:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
    dd14:	2107      	movs	r1, #7
    dd16:	f01a fb5a 	bl	283ce <atomic_set_bit>
	return 0;
    dd1a:	2000      	movs	r0, #0
    dd1c:	e7e1      	b.n	dce2 <smp_encrypt_info+0x4e>
    dd1e:	bf00      	nop
    dd20:	0002a7d8 	.word	0x0002a7d8
    dd24:	0002a6d0 	.word	0x0002a6d0
    dd28:	0002e4e2 	.word	0x0002e4e2

0000dd2c <bt_smp_connected>:
{
    dd2c:	b510      	push	{r4, lr}
	k_work_init_delayable(&work->work, handler);
    dd2e:	4905      	ldr	r1, [pc, #20]	; (dd44 <bt_smp_connected+0x18>)
    dd30:	4604      	mov	r4, r0
    dd32:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
    dd36:	f01b ff7d 	bl	29c34 <k_work_init_delayable>
	smp_reset(smp);
    dd3a:	4620      	mov	r0, r4
}
    dd3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
    dd40:	f01a bcee 	b.w	28720 <smp_reset>
    dd44:	0000ea6d 	.word	0x0000ea6d

0000dd48 <smp_pairing_confirm>:
{
    dd48:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
    dd4a:	688d      	ldr	r5, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
    dd4c:	f100 06c4 	add.w	r6, r0, #196	; 0xc4
{
    dd50:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
    dd52:	210b      	movs	r1, #11
    dd54:	4630      	mov	r0, r6
    dd56:	f01a fb60 	bl	2841a <atomic_clear_bit>
    dd5a:	462b      	mov	r3, r5
    dd5c:	f104 02d7 	add.w	r2, r4, #215	; 0xd7
    dd60:	f105 0110 	add.w	r1, r5, #16
    dd64:	f853 0b04 	ldr.w	r0, [r3], #4
    dd68:	f842 0b04 	str.w	r0, [r2], #4
    dd6c:	428b      	cmp	r3, r1
    dd6e:	d1f9      	bne.n	dd64 <smp_pairing_confirm+0x1c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    dd70:	2105      	movs	r1, #5
    dd72:	4630      	mov	r0, r6
    dd74:	f01a fc08 	bl	28588 <atomic_test_bit>
    dd78:	b920      	cbnz	r0, dd84 <smp_pairing_confirm+0x3c>
		return legacy_pairing_confirm(smp);
    dd7a:	4620      	mov	r0, r4
}
    dd7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return legacy_pairing_confirm(smp);
    dd80:	f01a bd4f 	b.w	28822 <legacy_pairing_confirm>
	switch (smp->method) {
    dd84:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    dd88:	2b01      	cmp	r3, #1
    dd8a:	d00b      	beq.n	dda4 <smp_pairing_confirm+0x5c>
    dd8c:	2b02      	cmp	r3, #2
    dd8e:	d115      	bne.n	ddbc <smp_pairing_confirm+0x74>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    dd90:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    dd94:	2104      	movs	r1, #4
    dd96:	f01a fb1a 	bl	283ce <atomic_set_bit>
		return smp_send_pairing_confirm(smp);
    dd9a:	4620      	mov	r0, r4
}
    dd9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
    dda0:	f7ff bbc0 	b.w	d524 <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    dda4:	210a      	movs	r1, #10
    dda6:	4630      	mov	r0, r6
    dda8:	f01a fbee 	bl	28588 <atomic_test_bit>
    ddac:	2800      	cmp	r0, #0
    ddae:	d0ef      	beq.n	dd90 <smp_pairing_confirm+0x48>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    ddb0:	4630      	mov	r0, r6
    ddb2:	2100      	movs	r1, #0
    ddb4:	f01a fb0b 	bl	283ce <atomic_set_bit>
			return 0;
    ddb8:	2000      	movs	r0, #0
}
    ddba:	bd70      	pop	{r4, r5, r6, pc}
    ddbc:	f01a faf1 	bl	283a2 <arch_is_user_context>
    ddc0:	4b0a      	ldr	r3, [pc, #40]	; (ddec <smp_pairing_confirm+0xa4>)
    ddc2:	4a0b      	ldr	r2, [pc, #44]	; (ddf0 <smp_pairing_confirm+0xa8>)
    ddc4:	f894 10c8 	ldrb.w	r1, [r4, #200]	; 0xc8
    ddc8:	1a9b      	subs	r3, r3, r2
    ddca:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unknown pairing method (%u)", smp->method);
    ddcc:	019b      	lsls	r3, r3, #6
    ddce:	f043 0301 	orr.w	r3, r3, #1
    ddd2:	b130      	cbz	r0, dde2 <smp_pairing_confirm+0x9a>
    ddd4:	460a      	mov	r2, r1
    ddd6:	4618      	mov	r0, r3
    ddd8:	4906      	ldr	r1, [pc, #24]	; (ddf4 <smp_pairing_confirm+0xac>)
    ddda:	f017 f85c 	bl	24e96 <log_from_user>
		return BT_SMP_ERR_UNSPECIFIED;
    ddde:	2008      	movs	r0, #8
    dde0:	e7eb      	b.n	ddba <smp_pairing_confirm+0x72>
		BT_ERR("Unknown pairing method (%u)", smp->method);
    dde2:	4804      	ldr	r0, [pc, #16]	; (ddf4 <smp_pairing_confirm+0xac>)
    dde4:	461a      	mov	r2, r3
    dde6:	f017 f889 	bl	24efc <log_1>
    ddea:	e7f8      	b.n	ddde <smp_pairing_confirm+0x96>
    ddec:	0002a7d8 	.word	0x0002a7d8
    ddf0:	0002a6d0 	.word	0x0002a6d0
    ddf4:	0002e3f7 	.word	0x0002e3f7

0000ddf8 <smp_pairing_random>:
{
    ddf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ddfc:	688b      	ldr	r3, [r1, #8]
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    ddfe:	f100 08f7 	add.w	r8, r0, #247	; 0xf7
{
    de02:	b09c      	sub	sp, #112	; 0x70
    de04:	4604      	mov	r4, r0
    de06:	4642      	mov	r2, r8
    de08:	f103 0110 	add.w	r1, r3, #16
    de0c:	f853 0b04 	ldr.w	r0, [r3], #4
    de10:	f842 0b04 	str.w	r0, [r2], #4
    de14:	428b      	cmp	r3, r1
    de16:	d1f9      	bne.n	de0c <smp_pairing_random+0x14>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    de18:	f104 06c4 	add.w	r6, r4, #196	; 0xc4
    de1c:	2105      	movs	r1, #5
    de1e:	4630      	mov	r0, r6
    de20:	f01a fbb2 	bl	28588 <atomic_test_bit>
    de24:	2800      	cmp	r0, #0
    de26:	d156      	bne.n	ded6 <smp_pairing_random+0xde>
	struct bt_conn *conn = smp->chan.chan.conn;
    de28:	6823      	ldr	r3, [r4, #0]
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    de2a:	f204 1707 	addw	r7, r4, #263	; 0x107
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    de2e:	f103 0296 	add.w	r2, r3, #150	; 0x96
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    de32:	ad08      	add	r5, sp, #32
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    de34:	338f      	adds	r3, #143	; 0x8f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    de36:	9201      	str	r2, [sp, #4]
    de38:	9300      	str	r3, [sp, #0]
    de3a:	9502      	str	r5, [sp, #8]
    de3c:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    de40:	f104 02c9 	add.w	r2, r4, #201	; 0xc9
    de44:	4641      	mov	r1, r8
    de46:	4638      	mov	r0, r7
    de48:	f01a fc8f 	bl	2876a <smp_c1>
	if (err) {
    de4c:	bb40      	cbnz	r0, dea0 <smp_pairing_random+0xa8>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
    de4e:	2210      	movs	r2, #16
    de50:	4629      	mov	r1, r5
    de52:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
    de56:	f01c fab5 	bl	2a3c4 <memcmp>
    de5a:	2800      	cmp	r0, #0
    de5c:	f040 80a7 	bne.w	dfae <smp_pairing_random+0x1b6>
	memcpy(out + 8, r1, 8);
    de60:	4622      	mov	r2, r4
	memcpy(out, r2, 8);
    de62:	f8d8 0000 	ldr.w	r0, [r8]
    de66:	f8d8 1004 	ldr.w	r1, [r8, #4]
    de6a:	462b      	mov	r3, r5
    de6c:	c303      	stmia	r3!, {r0, r1}
	memcpy(out + 8, r1, 8);
    de6e:	f852 0fe7 	ldr.w	r0, [r2, #231]!
    de72:	6851      	ldr	r1, [r2, #4]
    de74:	ab0a      	add	r3, sp, #40	; 0x28
    de76:	c303      	stmia	r3!, {r0, r1}
	return bt_encrypt_le(k, out, out);
    de78:	462a      	mov	r2, r5
    de7a:	4629      	mov	r1, r5
    de7c:	4638      	mov	r0, r7
    de7e:	f003 ffb7 	bl	11df0 <bt_encrypt_le>
		if (err) {
    de82:	b1a0      	cbz	r0, deae <smp_pairing_random+0xb6>
    de84:	f01a fa8d 	bl	283a2 <arch_is_user_context>
    de88:	4b83      	ldr	r3, [pc, #524]	; (e098 <smp_pairing_random+0x2a0>)
    de8a:	4a84      	ldr	r2, [pc, #528]	; (e09c <smp_pairing_random+0x2a4>)
    de8c:	1a9b      	subs	r3, r3, r2
    de8e:	08db      	lsrs	r3, r3, #3
			BT_ERR("Calculate STK failed");
    de90:	019b      	lsls	r3, r3, #6
    de92:	f043 0301 	orr.w	r3, r3, #1
    de96:	b128      	cbz	r0, dea4 <smp_pairing_random+0xac>
    de98:	4981      	ldr	r1, [pc, #516]	; (e0a0 <smp_pairing_random+0x2a8>)
		BT_ERR("Calculate confirm failed");
    de9a:	4618      	mov	r0, r3
    de9c:	f016 fffb 	bl	24e96 <log_from_user>
		return BT_SMP_ERR_UNSPECIFIED;
    dea0:	2508      	movs	r5, #8
    dea2:	e085      	b.n	dfb0 <smp_pairing_random+0x1b8>
			BT_ERR("Calculate STK failed");
    dea4:	487e      	ldr	r0, [pc, #504]	; (e0a0 <smp_pairing_random+0x2a8>)
    dea6:	4619      	mov	r1, r3
		BT_ERR("Calculate confirm failed");
    dea8:	f017 f81b 	bl	24ee2 <log_0>
		if (err) {
    deac:	e7f8      	b.n	dea0 <smp_pairing_random+0xa8>
    deae:	463b      	mov	r3, r7
    deb0:	af0c      	add	r7, sp, #48	; 0x30
    deb2:	462a      	mov	r2, r5
    deb4:	ca03      	ldmia	r2!, {r0, r1}
    deb6:	42ba      	cmp	r2, r7
    deb8:	6018      	str	r0, [r3, #0]
    deba:	6059      	str	r1, [r3, #4]
    debc:	4615      	mov	r5, r2
    debe:	f103 0308 	add.w	r3, r3, #8
    dec2:	d1f6      	bne.n	deb2 <smp_pairing_random+0xba>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    dec4:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    dec6:	4630      	mov	r0, r6
    dec8:	f01a fa81 	bl	283ce <atomic_set_bit>
	return smp_send_pairing_random(smp);
    decc:	4620      	mov	r0, r4
    dece:	f01a fba9 	bl	28624 <smp_send_pairing_random>
    ded2:	4605      	mov	r5, r0
    ded4:	e06c      	b.n	dfb0 <smp_pairing_random+0x1b8>
	switch (smp->method) {
    ded6:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    deda:	2b05      	cmp	r3, #5
    dedc:	f200 80bf 	bhi.w	e05e <smp_pairing_random+0x266>
    dee0:	e8df f003 	tbb	[pc, r3]
    dee4:	033c3c35 	.word	0x033c3c35
    dee8:	8fbd      	.short	0x8fbd
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
    deea:	4b6e      	ldr	r3, [pc, #440]	; (e0a4 <smp_pairing_random+0x2ac>)
	sys_memcpy_swap(m, u, 32);
    deec:	2220      	movs	r2, #32
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
    deee:	681d      	ldr	r5, [r3, #0]
	sys_memcpy_swap(m, u, 32);
    def0:	eb0d 0002 	add.w	r0, sp, r2
    def4:	f204 1117 	addw	r1, r4, #279	; 0x117
    def8:	f01a fa5d 	bl	283b6 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
    defc:	2220      	movs	r2, #32
    defe:	4629      	mov	r1, r5
    df00:	a810      	add	r0, sp, #64	; 0x40
    df02:	f01a fa58 	bl	283b6 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
    df06:	2210      	movs	r2, #16
    df08:	f104 01e7 	add.w	r1, r4, #231	; 0xe7
    df0c:	a818      	add	r0, sp, #96	; 0x60
    df0e:	f01a fa52 	bl	283b6 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
    df12:	2210      	movs	r2, #16
    df14:	eb0d 0002 	add.w	r0, sp, r2
    df18:	4641      	mov	r1, r8
    df1a:	f01a fa4c 	bl	283b6 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
    df1e:	ab04      	add	r3, sp, #16
    df20:	2250      	movs	r2, #80	; 0x50
    df22:	a908      	add	r1, sp, #32
    df24:	4618      	mov	r0, r3
    df26:	f01a fa8e 	bl	28446 <bt_smp_aes_cmac>
	if (err) {
    df2a:	2800      	cmp	r0, #0
    df2c:	d1b8      	bne.n	dea0 <smp_pairing_random+0xa8>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    df2e:	210a      	movs	r1, #10
    df30:	4630      	mov	r0, r6
    df32:	9d07      	ldr	r5, [sp, #28]
    df34:	f01a fa4b 	bl	283ce <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    df38:	4a5b      	ldr	r2, [pc, #364]	; (e0a8 <smp_pairing_random+0x2b0>)
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    df3a:	4b5c      	ldr	r3, [pc, #368]	; (e0ac <smp_pairing_random+0x2b4>)
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    df3c:	6812      	ldr	r2, [r2, #0]
    df3e:	6820      	ldr	r0, [r4, #0]
    df40:	6892      	ldr	r2, [r2, #8]
    df42:	ba2d      	rev	r5, r5
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    df44:	fbb5 f1f3 	udiv	r1, r5, r3
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    df48:	fb03 5111 	mls	r1, r3, r1, r5
    df4c:	4790      	blx	r2
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    df4e:	210d      	movs	r1, #13
    df50:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    df54:	f01a fa3b 	bl	283ce <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    df58:	2110      	movs	r1, #16
    df5a:	e7b4      	b.n	dec6 <smp_pairing_random+0xce>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    df5c:	f894 219c 	ldrb.w	r2, [r4, #412]	; 0x19c
    df60:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    df64:	494f      	ldr	r1, [pc, #316]	; (e0a4 <smp_pairing_random+0x2ac>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    df66:	40d3      	lsrs	r3, r2
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    df68:	ad08      	add	r5, sp, #32
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    df6a:	f003 0301 	and.w	r3, r3, #1
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    df6e:	9500      	str	r5, [sp, #0]
    df70:	6809      	ldr	r1, [r1, #0]
    df72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    df76:	4642      	mov	r2, r8
    df78:	f204 1017 	addw	r0, r4, #279	; 0x117
    df7c:	f01a fadd 	bl	2853a <smp_f4>
    df80:	b170      	cbz	r0, dfa0 <smp_pairing_random+0x1a8>
    df82:	f01a fa0e 	bl	283a2 <arch_is_user_context>
    df86:	4b44      	ldr	r3, [pc, #272]	; (e098 <smp_pairing_random+0x2a0>)
    df88:	4a44      	ldr	r2, [pc, #272]	; (e09c <smp_pairing_random+0x2a4>)
    df8a:	1a9b      	subs	r3, r3, r2
    df8c:	08db      	lsrs	r3, r3, #3
		BT_ERR("Calculate confirm failed");
    df8e:	019b      	lsls	r3, r3, #6
    df90:	f043 0301 	orr.w	r3, r3, #1
    df94:	b108      	cbz	r0, df9a <smp_pairing_random+0x1a2>
    df96:	4946      	ldr	r1, [pc, #280]	; (e0b0 <smp_pairing_random+0x2b8>)
    df98:	e77f      	b.n	de9a <smp_pairing_random+0xa2>
    df9a:	4845      	ldr	r0, [pc, #276]	; (e0b0 <smp_pairing_random+0x2b8>)
    df9c:	4619      	mov	r1, r3
    df9e:	e783      	b.n	dea8 <smp_pairing_random+0xb0>
	if (memcmp(smp->pcnf, cfm, 16)) {
    dfa0:	2210      	movs	r2, #16
    dfa2:	4629      	mov	r1, r5
    dfa4:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
    dfa8:	f01c fa0c 	bl	2a3c4 <memcmp>
    dfac:	b120      	cbz	r0, dfb8 <smp_pairing_random+0x1c0>
		return BT_SMP_ERR_CONFIRM_FAILED;
    dfae:	2504      	movs	r5, #4
}
    dfb0:	4628      	mov	r0, r5
    dfb2:	b01c      	add	sp, #112	; 0x70
    dfb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		atomic_set_bit(smp->allowed_cmds,
    dfb8:	f104 07c0 	add.w	r7, r4, #192	; 0xc0
    dfbc:	2103      	movs	r1, #3
    dfbe:	4638      	mov	r0, r7
    dfc0:	f01a fa05 	bl	283ce <atomic_set_bit>
		err = smp_send_pairing_random(smp);
    dfc4:	4620      	mov	r0, r4
    dfc6:	f01a fb2d 	bl	28624 <smp_send_pairing_random>
		if (err) {
    dfca:	4605      	mov	r5, r0
    dfcc:	2800      	cmp	r0, #0
    dfce:	d1ef      	bne.n	dfb0 <smp_pairing_random+0x1b8>
		smp->passkey_round++;
    dfd0:	f894 319c 	ldrb.w	r3, [r4, #412]	; 0x19c
    dfd4:	3301      	adds	r3, #1
    dfd6:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
    dfd8:	2b14      	cmp	r3, #20
		smp->passkey_round++;
    dfda:	f884 319c 	strb.w	r3, [r4, #412]	; 0x19c
		if (smp->passkey_round == 20U) {
    dfde:	d108      	bne.n	dff2 <smp_pairing_random+0x1fa>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    dfe0:	4638      	mov	r0, r7
    dfe2:	210d      	movs	r1, #13
    dfe4:	f01a f9f3 	bl	283ce <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    dfe8:	2110      	movs	r1, #16
    dfea:	4630      	mov	r0, r6
    dfec:	f01a f9ef 	bl	283ce <atomic_set_bit>
			return 0;
    dff0:	e7de      	b.n	dfb0 <smp_pairing_random+0x1b8>
		if (bt_rand(smp->prnd, 16)) {
    dff2:	2110      	movs	r1, #16
    dff4:	f104 00e7 	add.w	r0, r4, #231	; 0xe7
    dff8:	f003 fef8 	bl	11dec <bt_rand>
    dffc:	2800      	cmp	r0, #0
    dffe:	d0d7      	beq.n	dfb0 <smp_pairing_random+0x1b8>
    e000:	e74e      	b.n	dea0 <smp_pairing_random+0xa8>
		if (bt_rand(smp->prnd, 16)) {
    e002:	2110      	movs	r1, #16
    e004:	f104 00e7 	add.w	r0, r4, #231	; 0xe7
    e008:	f003 fef0 	bl	11dec <bt_rand>
    e00c:	2800      	cmp	r0, #0
    e00e:	f47f af47 	bne.w	dea0 <smp_pairing_random+0xa8>
		if (bt_auth && bt_auth->oob_data_request) {
    e012:	4f25      	ldr	r7, [pc, #148]	; (e0a8 <smp_pairing_random+0x2b0>)
    e014:	683b      	ldr	r3, [r7, #0]
    e016:	2b00      	cmp	r3, #0
    e018:	d038      	beq.n	e08c <smp_pairing_random+0x294>
    e01a:	68db      	ldr	r3, [r3, #12]
    e01c:	2b00      	cmp	r3, #0
    e01e:	d035      	beq.n	e08c <smp_pairing_random+0x294>
			struct bt_conn_oob_info info = {
    e020:	4b24      	ldr	r3, [pc, #144]	; (e0b4 <smp_pairing_random+0x2bc>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    e022:	f894 20cb 	ldrb.w	r2, [r4, #203]	; 0xcb
			struct bt_conn_oob_info info = {
    e026:	881b      	ldrh	r3, [r3, #0]
    e028:	f8ad 3020 	strh.w	r3, [sp, #32]
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    e02c:	f894 30d2 	ldrb.w	r3, [r4, #210]	; 0xd2
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
    e030:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    e032:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
    e036:	d42b      	bmi.n	e090 <smp_pairing_random+0x298>
    e038:	2b00      	cmp	r3, #0
    e03a:	bf14      	ite	ne
    e03c:	2001      	movne	r0, #1
    e03e:	2003      	moveq	r0, #3
			smp->oobd_local = NULL;
    e040:	2500      	movs	r5, #0
	info->lesc.oob_config = oob_config;
    e042:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
			smp->oobd_remote = NULL;
    e046:	e9c4 5568 	strd	r5, r5, [r4, #416]	; 0x1a0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
    e04a:	4630      	mov	r0, r6
    e04c:	210c      	movs	r1, #12
    e04e:	f01a f9be 	bl	283ce <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
    e052:	683b      	ldr	r3, [r7, #0]
    e054:	6820      	ldr	r0, [r4, #0]
    e056:	68db      	ldr	r3, [r3, #12]
    e058:	a908      	add	r1, sp, #32
    e05a:	4798      	blx	r3
			return 0;
    e05c:	e7a8      	b.n	dfb0 <smp_pairing_random+0x1b8>
    e05e:	f01a f9a0 	bl	283a2 <arch_is_user_context>
    e062:	4b0d      	ldr	r3, [pc, #52]	; (e098 <smp_pairing_random+0x2a0>)
    e064:	4a0d      	ldr	r2, [pc, #52]	; (e09c <smp_pairing_random+0x2a4>)
    e066:	f894 10c8 	ldrb.w	r1, [r4, #200]	; 0xc8
    e06a:	1a9b      	subs	r3, r3, r2
    e06c:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unknown pairing method (%u)", smp->method);
    e06e:	019b      	lsls	r3, r3, #6
    e070:	f043 0301 	orr.w	r3, r3, #1
    e074:	b128      	cbz	r0, e082 <smp_pairing_random+0x28a>
    e076:	460a      	mov	r2, r1
    e078:	4618      	mov	r0, r3
    e07a:	490f      	ldr	r1, [pc, #60]	; (e0b8 <smp_pairing_random+0x2c0>)
    e07c:	f016 ff0b 	bl	24e96 <log_from_user>
    e080:	e70e      	b.n	dea0 <smp_pairing_random+0xa8>
    e082:	480d      	ldr	r0, [pc, #52]	; (e0b8 <smp_pairing_random+0x2c0>)
    e084:	461a      	mov	r2, r3
    e086:	f016 ff39 	bl	24efc <log_1>
    e08a:	e709      	b.n	dea0 <smp_pairing_random+0xa8>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
    e08c:	2502      	movs	r5, #2
    e08e:	e78f      	b.n	dfb0 <smp_pairing_random+0x1b8>
				     BT_CONN_OOB_BOTH_PEERS :
    e090:	2b00      	cmp	r3, #0
    e092:	bf18      	it	ne
    e094:	2002      	movne	r0, #2
    e096:	e7d3      	b.n	e040 <smp_pairing_random+0x248>
    e098:	0002a7d8 	.word	0x0002a7d8
    e09c:	0002a6d0 	.word	0x0002a6d0
    e0a0:	0002e4fc 	.word	0x0002e4fc
    e0a4:	20000ec4 	.word	0x20000ec4
    e0a8:	20000e30 	.word	0x20000e30
    e0ac:	000f4240 	.word	0x000f4240
    e0b0:	0002e511 	.word	0x0002e511
    e0b4:	0002a97b 	.word	0x0002a97b
    e0b8:	0002e3f7 	.word	0x0002e3f7

0000e0bc <bt_smp_start_security>:
{
    e0bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
    e0c0:	78c4      	ldrb	r4, [r0, #3]
    e0c2:	2c01      	cmp	r4, #1
{
    e0c4:	4605      	mov	r5, r0
	switch (conn->role) {
    e0c6:	d005      	beq.n	e0d4 <bt_smp_start_security+0x18>
		return -EINVAL;
    e0c8:	f06f 0415 	mvn.w	r4, #21
}
    e0cc:	4620      	mov	r0, r4
    e0ce:	b003      	add	sp, #12
    e0d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
    e0d4:	f7ff f83e 	bl	d154 <smp_chan_get>
	if (!smp) {
    e0d8:	4606      	mov	r6, r0
    e0da:	2800      	cmp	r0, #0
    e0dc:	f000 80a1 	beq.w	e222 <bt_smp_start_security+0x166>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    e0e0:	f100 07c4 	add.w	r7, r0, #196	; 0xc4
    e0e4:	2104      	movs	r1, #4
    e0e6:	4638      	mov	r0, r7
    e0e8:	f01a fa4e 	bl	28588 <atomic_test_bit>
    e0ec:	2800      	cmp	r0, #0
    e0ee:	f040 809b 	bne.w	e228 <bt_smp_start_security+0x16c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    e0f2:	2103      	movs	r1, #3
    e0f4:	4638      	mov	r0, r7
    e0f6:	f01a fa47 	bl	28588 <atomic_test_bit>
    e0fa:	b110      	cbz	r0, e102 <bt_smp_start_security+0x46>
		return -EBUSY;
    e0fc:	f06f 040f 	mvn.w	r4, #15
    e100:	e7e4      	b.n	e0cc <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    e102:	4621      	mov	r1, r4
    e104:	4638      	mov	r0, r7
    e106:	f01a fa3f 	bl	28588 <atomic_test_bit>
    e10a:	2800      	cmp	r0, #0
    e10c:	d1f6      	bne.n	e0fc <bt_smp_start_security+0x40>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
    e10e:	7aab      	ldrb	r3, [r5, #10]
	switch (conn->required_sec_level) {
    e110:	2b03      	cmp	r3, #3
    e112:	d03d      	beq.n	e190 <bt_smp_start_security+0xd4>
    e114:	d82c      	bhi.n	e170 <bt_smp_start_security+0xb4>
    e116:	3b01      	subs	r3, #1
    e118:	2b01      	cmp	r3, #1
    e11a:	d947      	bls.n	e1ac <bt_smp_start_security+0xf0>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
    e11c:	210b      	movs	r1, #11
    e11e:	1d28      	adds	r0, r5, #4
    e120:	f01a fa32 	bl	28588 <atomic_test_bit>
    e124:	2800      	cmp	r0, #0
    e126:	d1cf      	bne.n	e0c8 <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
    e128:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    e12c:	b983      	cbnz	r3, e150 <bt_smp_start_security+0x94>
						     conn->id, &conn->le.dst);
    e12e:	f105 0488 	add.w	r4, r5, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
    e132:	7a29      	ldrb	r1, [r5, #8]
    e134:	4622      	mov	r2, r4
    e136:	2020      	movs	r0, #32
    e138:	f000 fda8 	bl	ec8c <bt_keys_find>
    e13c:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
    e140:	b930      	cbnz	r0, e150 <bt_smp_start_security+0x94>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
    e142:	7a29      	ldrb	r1, [r5, #8]
    e144:	4622      	mov	r2, r4
    e146:	2004      	movs	r0, #4
    e148:	f000 fda0 	bl	ec8c <bt_keys_find>
    e14c:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
    e150:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    e154:	2b00      	cmp	r3, #0
    e156:	d0b7      	beq.n	e0c8 <bt_smp_start_security+0xc>
    e158:	89da      	ldrh	r2, [r3, #14]
    e15a:	f002 0224 	and.w	r2, r2, #36	; 0x24
    e15e:	2a00      	cmp	r2, #0
    e160:	d0b2      	beq.n	e0c8 <bt_smp_start_security+0xc>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
    e162:	7aaa      	ldrb	r2, [r5, #10]
    e164:	2a02      	cmp	r2, #2
    e166:	d921      	bls.n	e1ac <bt_smp_start_security+0xf0>
    e168:	7b5b      	ldrb	r3, [r3, #13]
    e16a:	07db      	lsls	r3, r3, #31
    e16c:	d5ac      	bpl.n	e0c8 <bt_smp_start_security+0xc>
    e16e:	e01d      	b.n	e1ac <bt_smp_start_security+0xf0>
	switch (conn->required_sec_level) {
    e170:	2b04      	cmp	r3, #4
    e172:	d1d3      	bne.n	e11c <bt_smp_start_security+0x60>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    e174:	f7fe ff7a 	bl	d06c <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    e178:	2803      	cmp	r0, #3
    e17a:	d104      	bne.n	e186 <bt_smp_start_security+0xca>
    e17c:	4b2c      	ldr	r3, [pc, #176]	; (e230 <bt_smp_start_security+0x174>)
    e17e:	681b      	ldr	r3, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    e180:	b1fb      	cbz	r3, e1c2 <bt_smp_start_security+0x106>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    e182:	68dc      	ldr	r4, [r3, #12]
    e184:	b10c      	cbz	r4, e18a <bt_smp_start_security+0xce>
    e186:	4b2b      	ldr	r3, [pc, #172]	; (e234 <bt_smp_start_security+0x178>)
    e188:	781c      	ldrb	r4, [r3, #0]
    e18a:	f004 0401 	and.w	r4, r4, #1
    e18e:	e00b      	b.n	e1a8 <bt_smp_start_security+0xec>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    e190:	f7fe ff6c 	bl	d06c <get_io_capa>
    e194:	2803      	cmp	r0, #3
    e196:	d107      	bne.n	e1a8 <bt_smp_start_security+0xec>
		       (bt_auth && bt_auth->oob_data_request);
    e198:	4b25      	ldr	r3, [pc, #148]	; (e230 <bt_smp_start_security+0x174>)
    e19a:	681c      	ldr	r4, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    e19c:	2c00      	cmp	r4, #0
    e19e:	d0bd      	beq.n	e11c <bt_smp_start_security+0x60>
		       (bt_auth && bt_auth->oob_data_request);
    e1a0:	68e4      	ldr	r4, [r4, #12]
    e1a2:	3c00      	subs	r4, #0
    e1a4:	bf18      	it	ne
    e1a6:	2401      	movne	r4, #1
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
    e1a8:	2c00      	cmp	r4, #0
    e1aa:	d0b7      	beq.n	e11c <bt_smp_start_security+0x60>
	if (!conn->le.keys) {
    e1ac:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    e1b0:	b14b      	cbz	r3, e1c6 <bt_smp_start_security+0x10a>
	if (smp_init(smp) != 0) {
    e1b2:	4630      	mov	r0, r6
    e1b4:	f7ff f81c 	bl	d1f0 <smp_init>
    e1b8:	4604      	mov	r4, r0
    e1ba:	b180      	cbz	r0, e1de <bt_smp_start_security+0x122>
		return -ENOBUFS;
    e1bc:	f06f 0468 	mvn.w	r4, #104	; 0x68
    e1c0:	e784      	b.n	e0cc <bt_smp_start_security+0x10>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    e1c2:	2400      	movs	r4, #0
    e1c4:	e7e1      	b.n	e18a <bt_smp_start_security+0xce>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    e1c6:	7a28      	ldrb	r0, [r5, #8]
    e1c8:	f105 0188 	add.w	r1, r5, #136	; 0x88
    e1cc:	f000 fd28 	bl	ec20 <bt_keys_get_addr>
    e1d0:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
    e1d4:	2800      	cmp	r0, #0
    e1d6:	d1ec      	bne.n	e1b2 <bt_smp_start_security+0xf6>
			return -ENOMEM;
    e1d8:	f06f 040b 	mvn.w	r4, #11
    e1dc:	e776      	b.n	e0cc <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
    e1de:	210b      	movs	r1, #11
    e1e0:	4630      	mov	r0, r6
    e1e2:	f01a f9ff 	bl	285e4 <smp_create_pdu.isra.0>
	if (!req_buf) {
    e1e6:	4680      	mov	r8, r0
    e1e8:	2800      	cmp	r0, #0
    e1ea:	d0e7      	beq.n	e1bc <bt_smp_start_security+0x100>
    e1ec:	2101      	movs	r1, #1
    e1ee:	3008      	adds	r0, #8
    e1f0:	f01a fd58 	bl	28ca4 <net_buf_simple_add>
    e1f4:	4681      	mov	r9, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
    e1f6:	2009      	movs	r0, #9
    e1f8:	f7fe ff8e 	bl	d118 <get_auth.isra.0>
    e1fc:	4623      	mov	r3, r4
    e1fe:	f889 0000 	strb.w	r0, [r9]
    e202:	4642      	mov	r2, r8
    e204:	9400      	str	r4, [sp, #0]
    e206:	2106      	movs	r1, #6
    e208:	4628      	mov	r0, r5
    e20a:	f019 fa77 	bl	276fc <bt_l2cap_send_cb>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    e20e:	4638      	mov	r0, r7
    e210:	210f      	movs	r1, #15
    e212:	f01a f8dc 	bl	283ce <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
    e216:	2101      	movs	r1, #1
    e218:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
    e21c:	f01a f8d7 	bl	283ce <atomic_set_bit>
	return 0;
    e220:	e754      	b.n	e0cc <bt_smp_start_security+0x10>
		return -ENOTCONN;
    e222:	f06f 047f 	mvn.w	r4, #127	; 0x7f
    e226:	e751      	b.n	e0cc <bt_smp_start_security+0x10>
		return -EIO;
    e228:	f06f 0404 	mvn.w	r4, #4
    e22c:	e74e      	b.n	e0cc <bt_smp_start_security+0x10>
    e22e:	bf00      	nop
    e230:	20000e30 	.word	0x20000e30
    e234:	20002aa5 	.word	0x20002aa5

0000e238 <smp_pairing_complete>:
{
    e238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    e23c:	4606      	mov	r6, r0
    e23e:	f8df 80ac 	ldr.w	r8, [pc, #172]	; e2ec <smp_pairing_complete+0xb4>
    e242:	f856 4bc4 	ldr.w	r4, [r6], #196
{
    e246:	4607      	mov	r7, r0
	if (!status) {
    e248:	b9b9      	cbnz	r1, e27a <smp_pairing_complete+0x42>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
    e24a:	210d      	movs	r1, #13
    e24c:	4630      	mov	r0, r6
    e24e:	f01a f99b 	bl	28588 <atomic_test_bit>
		if (bt_auth && bt_auth->pairing_complete) {
    e252:	f8d8 3000 	ldr.w	r3, [r8]
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
    e256:	4601      	mov	r1, r0
		if (bt_auth && bt_auth->pairing_complete) {
    e258:	b11b      	cbz	r3, e262 <smp_pairing_complete+0x2a>
    e25a:	699b      	ldr	r3, [r3, #24]
    e25c:	b10b      	cbz	r3, e262 <smp_pairing_complete+0x2a>
			bt_auth->pairing_failed(conn, security_err);
    e25e:	4620      	mov	r0, r4
    e260:	4798      	blx	r3
	smp_reset(smp);
    e262:	4638      	mov	r0, r7
    e264:	f01a fa5c 	bl	28720 <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
    e268:	7a62      	ldrb	r2, [r4, #9]
    e26a:	7aa3      	ldrb	r3, [r4, #10]
    e26c:	429a      	cmp	r2, r3
    e26e:	d036      	beq.n	e2de <smp_pairing_complete+0xa6>
		bt_smp_start_security(conn);
    e270:	4620      	mov	r0, r4
}
    e272:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_smp_start_security(conn);
    e276:	f7ff bf21 	b.w	e0bc <bt_smp_start_security>
	switch (smp_err) {
    e27a:	3901      	subs	r1, #1
    e27c:	b2c9      	uxtb	r1, r1
    e27e:	290d      	cmp	r1, #13
    e280:	bf9c      	itt	ls
    e282:	4b18      	ldrls	r3, [pc, #96]	; (e2e4 <smp_pairing_complete+0xac>)
    e284:	5c5d      	ldrbls	r5, [r3, r1]
		if (conn->le.keys &&
    e286:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
	if (!status) {
    e28a:	bf88      	it	hi
    e28c:	2508      	movhi	r5, #8
		if (conn->le.keys &&
    e28e:	b143      	cbz	r3, e2a2 <smp_pairing_complete+0x6a>
    e290:	7b1b      	ldrb	r3, [r3, #12]
    e292:	b9eb      	cbnz	r3, e2d0 <smp_pairing_complete+0x98>
			bt_keys_clear(conn->le.keys);
    e294:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    e298:	f01a fc89 	bl	28bae <bt_keys_clear>
			conn->le.keys = NULL;
    e29c:	2300      	movs	r3, #0
    e29e:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
    e2a2:	2102      	movs	r1, #2
    e2a4:	4630      	mov	r0, r6
    e2a6:	f01a f96f 	bl	28588 <atomic_test_bit>
    e2aa:	b940      	cbnz	r0, e2be <smp_pairing_complete+0x86>
	switch (err) {
    e2ac:	2d08      	cmp	r5, #8
    e2ae:	bf16      	itet	ne
    e2b0:	4b0d      	ldrne	r3, [pc, #52]	; (e2e8 <smp_pairing_complete+0xb0>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
    e2b2:	211f      	moveq	r1, #31
    e2b4:	5d59      	ldrbne	r1, [r3, r5]
			bt_conn_security_changed(conn,
    e2b6:	462a      	mov	r2, r5
    e2b8:	4620      	mov	r0, r4
    e2ba:	f7fc f8e5 	bl	a488 <bt_conn_security_changed>
		if (bt_auth && bt_auth->pairing_failed) {
    e2be:	f8d8 3000 	ldr.w	r3, [r8]
    e2c2:	2b00      	cmp	r3, #0
    e2c4:	d0cd      	beq.n	e262 <smp_pairing_complete+0x2a>
    e2c6:	69db      	ldr	r3, [r3, #28]
    e2c8:	2b00      	cmp	r3, #0
    e2ca:	d0ca      	beq.n	e262 <smp_pairing_complete+0x2a>
			bt_auth->pairing_failed(conn, security_err);
    e2cc:	4629      	mov	r1, r5
    e2ce:	e7c6      	b.n	e25e <smp_pairing_complete+0x26>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
    e2d0:	2102      	movs	r1, #2
    e2d2:	4630      	mov	r0, r6
    e2d4:	f01a f958 	bl	28588 <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
    e2d8:	2800      	cmp	r0, #0
    e2da:	d1db      	bne.n	e294 <smp_pairing_complete+0x5c>
    e2dc:	e7e1      	b.n	e2a2 <smp_pairing_complete+0x6a>
}
    e2de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e2e2:	bf00      	nop
    e2e4:	0002e697 	.word	0x0002e697
    e2e8:	0002e6ad 	.word	0x0002e6ad
    e2ec:	20000e30 	.word	0x20000e30

0000e2f0 <bt_smp_recv>:
{
    e2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    e2f2:	898b      	ldrh	r3, [r1, #12]
{
    e2f4:	4606      	mov	r6, r0
    e2f6:	460f      	mov	r7, r1
	if (buf->len < sizeof(*hdr)) {
    e2f8:	b9a3      	cbnz	r3, e324 <bt_smp_recv+0x34>
    e2fa:	f01a f852 	bl	283a2 <arch_is_user_context>
    e2fe:	4b58      	ldr	r3, [pc, #352]	; (e460 <bt_smp_recv+0x170>)
    e300:	4a58      	ldr	r2, [pc, #352]	; (e464 <bt_smp_recv+0x174>)
    e302:	1a9b      	subs	r3, r3, r2
    e304:	08db      	lsrs	r3, r3, #3
		BT_ERR("Too small SMP PDU received");
    e306:	019b      	lsls	r3, r3, #6
    e308:	f043 0301 	orr.w	r3, r3, #1
    e30c:	b128      	cbz	r0, e31a <bt_smp_recv+0x2a>
    e30e:	4956      	ldr	r1, [pc, #344]	; (e468 <bt_smp_recv+0x178>)
    e310:	4618      	mov	r0, r3
    e312:	f016 fdc0 	bl	24e96 <log_from_user>
}
    e316:	2000      	movs	r0, #0
    e318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		BT_ERR("Too small SMP PDU received");
    e31a:	4853      	ldr	r0, [pc, #332]	; (e468 <bt_smp_recv+0x178>)
    e31c:	4619      	mov	r1, r3
    e31e:	f016 fde0 	bl	24ee2 <log_0>
		return 0;
    e322:	e7f8      	b.n	e316 <bt_smp_recv+0x26>
	return net_buf_simple_pull_mem(&buf->b, len);
    e324:	2101      	movs	r1, #1
    e326:	f107 0008 	add.w	r0, r7, #8
    e32a:	f01a fce3 	bl	28cf4 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    e32e:	2104      	movs	r1, #4
    e330:	4605      	mov	r5, r0
    e332:	f106 00c4 	add.w	r0, r6, #196	; 0xc4
    e336:	f01a f927 	bl	28588 <atomic_test_bit>
    e33a:	b1a8      	cbz	r0, e368 <bt_smp_recv+0x78>
    e33c:	f01a f831 	bl	283a2 <arch_is_user_context>
    e340:	4b47      	ldr	r3, [pc, #284]	; (e460 <bt_smp_recv+0x170>)
    e342:	4a48      	ldr	r2, [pc, #288]	; (e464 <bt_smp_recv+0x174>)
    e344:	7829      	ldrb	r1, [r5, #0]
    e346:	1a9b      	subs	r3, r3, r2
    e348:	08db      	lsrs	r3, r3, #3
		BT_WARN("SMP command (code 0x%02x) received after timeout",
    e34a:	019b      	lsls	r3, r3, #6
    e34c:	f043 0302 	orr.w	r3, r3, #2
    e350:	b128      	cbz	r0, e35e <bt_smp_recv+0x6e>
    e352:	460a      	mov	r2, r1
    e354:	4945      	ldr	r1, [pc, #276]	; (e46c <bt_smp_recv+0x17c>)
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
    e356:	4618      	mov	r0, r3
    e358:	f016 fd9d 	bl	24e96 <log_from_user>
    e35c:	e7db      	b.n	e316 <bt_smp_recv+0x26>
		BT_WARN("SMP command (code 0x%02x) received after timeout",
    e35e:	4843      	ldr	r0, [pc, #268]	; (e46c <bt_smp_recv+0x17c>)
    e360:	461a      	mov	r2, r3
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
    e362:	f016 fdcb 	bl	24efc <log_1>
		return 0;
    e366:	e7d6      	b.n	e316 <bt_smp_recv+0x26>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
    e368:	7829      	ldrb	r1, [r5, #0]
    e36a:	290e      	cmp	r1, #14
    e36c:	d910      	bls.n	e390 <bt_smp_recv+0xa0>
    e36e:	f01a f818 	bl	283a2 <arch_is_user_context>
    e372:	4b3b      	ldr	r3, [pc, #236]	; (e460 <bt_smp_recv+0x170>)
    e374:	4a3b      	ldr	r2, [pc, #236]	; (e464 <bt_smp_recv+0x174>)
    e376:	7829      	ldrb	r1, [r5, #0]
    e378:	1a9b      	subs	r3, r3, r2
    e37a:	08db      	lsrs	r3, r3, #3
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
    e37c:	019b      	lsls	r3, r3, #6
    e37e:	f043 0302 	orr.w	r3, r3, #2
    e382:	b110      	cbz	r0, e38a <bt_smp_recv+0x9a>
    e384:	460a      	mov	r2, r1
    e386:	493a      	ldr	r1, [pc, #232]	; (e470 <bt_smp_recv+0x180>)
    e388:	e7e5      	b.n	e356 <bt_smp_recv+0x66>
    e38a:	4839      	ldr	r0, [pc, #228]	; (e470 <bt_smp_recv+0x180>)
    e38c:	461a      	mov	r2, r3
    e38e:	e7e8      	b.n	e362 <bt_smp_recv+0x72>
	if (!handlers[hdr->code].func) {
    e390:	4c38      	ldr	r4, [pc, #224]	; (e474 <bt_smp_recv+0x184>)
    e392:	f854 3031 	ldr.w	r3, [r4, r1, lsl #3]
    e396:	b9cb      	cbnz	r3, e3cc <bt_smp_recv+0xdc>
    e398:	f01a f803 	bl	283a2 <arch_is_user_context>
    e39c:	4b30      	ldr	r3, [pc, #192]	; (e460 <bt_smp_recv+0x170>)
    e39e:	4a31      	ldr	r2, [pc, #196]	; (e464 <bt_smp_recv+0x174>)
    e3a0:	7829      	ldrb	r1, [r5, #0]
    e3a2:	1a9b      	subs	r3, r3, r2
    e3a4:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
    e3a6:	019b      	lsls	r3, r3, #6
    e3a8:	f043 0302 	orr.w	r3, r3, #2
    e3ac:	b148      	cbz	r0, e3c2 <bt_smp_recv+0xd2>
    e3ae:	460a      	mov	r2, r1
    e3b0:	4618      	mov	r0, r3
    e3b2:	4931      	ldr	r1, [pc, #196]	; (e478 <bt_smp_recv+0x188>)
    e3b4:	f016 fd6f 	bl	24e96 <log_from_user>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
    e3b8:	2107      	movs	r1, #7
		smp_error(smp, err);
    e3ba:	4630      	mov	r0, r6
    e3bc:	f01a fb18 	bl	289f0 <smp_error>
    e3c0:	e7a9      	b.n	e316 <bt_smp_recv+0x26>
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
    e3c2:	482d      	ldr	r0, [pc, #180]	; (e478 <bt_smp_recv+0x188>)
    e3c4:	461a      	mov	r2, r3
    e3c6:	f016 fd99 	bl	24efc <log_1>
    e3ca:	e7f5      	b.n	e3b8 <bt_smp_recv+0xc8>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
    e3cc:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
    e3d0:	f01a f98e 	bl	286f0 <atomic_test_and_clear_bit>
    e3d4:	b9c8      	cbnz	r0, e40a <bt_smp_recv+0x11a>
    e3d6:	f019 ffe4 	bl	283a2 <arch_is_user_context>
    e3da:	4b21      	ldr	r3, [pc, #132]	; (e460 <bt_smp_recv+0x170>)
    e3dc:	4a21      	ldr	r2, [pc, #132]	; (e464 <bt_smp_recv+0x174>)
    e3de:	7829      	ldrb	r1, [r5, #0]
    e3e0:	1a9b      	subs	r3, r3, r2
    e3e2:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
    e3e4:	019b      	lsls	r3, r3, #6
    e3e6:	f043 0302 	orr.w	r3, r3, #2
    e3ea:	b148      	cbz	r0, e400 <bt_smp_recv+0x110>
    e3ec:	460a      	mov	r2, r1
    e3ee:	4618      	mov	r0, r3
    e3f0:	4922      	ldr	r1, [pc, #136]	; (e47c <bt_smp_recv+0x18c>)
    e3f2:	f016 fd50 	bl	24e96 <log_from_user>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
    e3f6:	782b      	ldrb	r3, [r5, #0]
    e3f8:	2b05      	cmp	r3, #5
    e3fa:	d08c      	beq.n	e316 <bt_smp_recv+0x26>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    e3fc:	2108      	movs	r1, #8
    e3fe:	e7dc      	b.n	e3ba <bt_smp_recv+0xca>
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
    e400:	481e      	ldr	r0, [pc, #120]	; (e47c <bt_smp_recv+0x18c>)
    e402:	461a      	mov	r2, r3
    e404:	f016 fd7a 	bl	24efc <log_1>
    e408:	e7f5      	b.n	e3f6 <bt_smp_recv+0x106>
	if (buf->len != handlers[hdr->code].expect_len) {
    e40a:	782b      	ldrb	r3, [r5, #0]
    e40c:	89b9      	ldrh	r1, [r7, #12]
    e40e:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    e412:	7912      	ldrb	r2, [r2, #4]
    e414:	4291      	cmp	r1, r2
    e416:	d018      	beq.n	e44a <bt_smp_recv+0x15a>
    e418:	f019 ffc3 	bl	283a2 <arch_is_user_context>
    e41c:	4c10      	ldr	r4, [pc, #64]	; (e460 <bt_smp_recv+0x170>)
    e41e:	4b11      	ldr	r3, [pc, #68]	; (e464 <bt_smp_recv+0x174>)
    e420:	89b9      	ldrh	r1, [r7, #12]
    e422:	782a      	ldrb	r2, [r5, #0]
    e424:	1ae4      	subs	r4, r4, r3
    e426:	08e4      	lsrs	r4, r4, #3
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    e428:	01a4      	lsls	r4, r4, #6
    e42a:	f044 0401 	orr.w	r4, r4, #1
    e42e:	b138      	cbz	r0, e440 <bt_smp_recv+0x150>
    e430:	4613      	mov	r3, r2
    e432:	4620      	mov	r0, r4
    e434:	460a      	mov	r2, r1
    e436:	4912      	ldr	r1, [pc, #72]	; (e480 <bt_smp_recv+0x190>)
    e438:	f016 fd2d 	bl	24e96 <log_from_user>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
    e43c:	210a      	movs	r1, #10
    e43e:	e7bc      	b.n	e3ba <bt_smp_recv+0xca>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    e440:	480f      	ldr	r0, [pc, #60]	; (e480 <bt_smp_recv+0x190>)
    e442:	4623      	mov	r3, r4
    e444:	f016 fd6e 	bl	24f24 <log_2>
    e448:	e7f8      	b.n	e43c <bt_smp_recv+0x14c>
	err = handlers[hdr->code].func(smp, buf);
    e44a:	4639      	mov	r1, r7
    e44c:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    e450:	4630      	mov	r0, r6
    e452:	4798      	blx	r3
	if (err) {
    e454:	4601      	mov	r1, r0
    e456:	2800      	cmp	r0, #0
    e458:	f43f af5d 	beq.w	e316 <bt_smp_recv+0x26>
    e45c:	e7ad      	b.n	e3ba <bt_smp_recv+0xca>
    e45e:	bf00      	nop
    e460:	0002a7d8 	.word	0x0002a7d8
    e464:	0002a6d0 	.word	0x0002a6d0
    e468:	0002e52a 	.word	0x0002e52a
    e46c:	0002e545 	.word	0x0002e545
    e470:	0002e576 	.word	0x0002e576
    e474:	0002afec 	.word	0x0002afec
    e478:	0002e598 	.word	0x0002e598
    e47c:	0002e5b2 	.word	0x0002e5b2
    e480:	0002e213 	.word	0x0002e213

0000e484 <bt_smp_pkey_ready>:
	sc_public_key = pkey;
    e484:	4b1d      	ldr	r3, [pc, #116]	; (e4fc <bt_smp_pkey_ready+0x78>)
{
    e486:	e92d 4150 	stmdb	sp!, {r4, r6, r8, lr}
	sc_public_key = pkey;
    e48a:	6018      	str	r0, [r3, #0]
	if (!pkey) {
    e48c:	b9a8      	cbnz	r0, e4ba <bt_smp_pkey_ready+0x36>
    e48e:	f019 ff88 	bl	283a2 <arch_is_user_context>
    e492:	4b1b      	ldr	r3, [pc, #108]	; (e500 <bt_smp_pkey_ready+0x7c>)
    e494:	4a1b      	ldr	r2, [pc, #108]	; (e504 <bt_smp_pkey_ready+0x80>)
    e496:	1a9b      	subs	r3, r3, r2
    e498:	08db      	lsrs	r3, r3, #3
		BT_WARN("Public key not available");
    e49a:	019b      	lsls	r3, r3, #6
    e49c:	f043 0302 	orr.w	r3, r3, #2
    e4a0:	b128      	cbz	r0, e4ae <bt_smp_pkey_ready+0x2a>
}
    e4a2:	e8bd 4150 	ldmia.w	sp!, {r4, r6, r8, lr}
		BT_WARN("Public key not available");
    e4a6:	4918      	ldr	r1, [pc, #96]	; (e508 <bt_smp_pkey_ready+0x84>)
    e4a8:	4618      	mov	r0, r3
    e4aa:	f016 bcf4 	b.w	24e96 <log_from_user>
}
    e4ae:	e8bd 4150 	ldmia.w	sp!, {r4, r6, r8, lr}
		BT_WARN("Public key not available");
    e4b2:	4815      	ldr	r0, [pc, #84]	; (e508 <bt_smp_pkey_ready+0x84>)
    e4b4:	4619      	mov	r1, r3
    e4b6:	f016 bd14 	b.w	24ee2 <log_0>
	ret = arch_is_user_context();
    e4ba:	f019 ff72 	bl	283a2 <arch_is_user_context>
	if (z_syscall_trap()) {
    e4be:	b168      	cbz	r0, e4dc <bt_smp_pkey_ready+0x58>
	register uint32_t ret __asm__("r0") = arg1;
    e4c0:	4812      	ldr	r0, [pc, #72]	; (e50c <bt_smp_pkey_ready+0x88>)
	register uint32_t r6 __asm__("r6") = call_id;
    e4c2:	26a0      	movs	r6, #160	; 0xa0
	__asm__ volatile("svc %[svid]\n"
    e4c4:	df03      	svc	3
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e4c6:	4c12      	ldr	r4, [pc, #72]	; (e510 <bt_smp_pkey_ready+0x8c>)
    e4c8:	f3bf 8f5b 	dmb	ish
    e4cc:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
    e4d0:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    e4d4:	065b      	lsls	r3, r3, #25
    e4d6:	d405      	bmi.n	e4e4 <bt_smp_pkey_ready+0x60>
}
    e4d8:	e8bd 8150 	ldmia.w	sp!, {r4, r6, r8, pc}
	z_impl_k_sem_give(sem);
    e4dc:	480b      	ldr	r0, [pc, #44]	; (e50c <bt_smp_pkey_ready+0x88>)
    e4de:	f013 fd91 	bl	22004 <z_impl_k_sem_give>
    e4e2:	e7f0      	b.n	e4c6 <bt_smp_pkey_ready+0x42>
		err = smp_public_key_slave(smp);
    e4e4:	4620      	mov	r0, r4
    e4e6:	f7ff f879 	bl	d5dc <smp_public_key_slave>
		if (err) {
    e4ea:	4601      	mov	r1, r0
    e4ec:	2800      	cmp	r0, #0
    e4ee:	d0f3      	beq.n	e4d8 <bt_smp_pkey_ready+0x54>
			smp_error(smp, err);
    e4f0:	4620      	mov	r0, r4
}
    e4f2:	e8bd 4150 	ldmia.w	sp!, {r4, r6, r8, lr}
			smp_error(smp, err);
    e4f6:	f01a ba7b 	b.w	289f0 <smp_error>
    e4fa:	bf00      	nop
    e4fc:	20000ec4 	.word	0x20000ec4
    e500:	0002a7d8 	.word	0x0002a7d8
    e504:	0002a6d0 	.word	0x0002a6d0
    e508:	0002e5cd 	.word	0x0002e5cd
    e50c:	20007e90 	.word	0x20007e90
    e510:	20000440 	.word	0x20000440

0000e514 <smp_ident_addr_info>:
{
    e514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
    e518:	688f      	ldr	r7, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
    e51a:	6806      	ldr	r6, [r0, #0]
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    e51c:	783b      	ldrb	r3, [r7, #0]
{
    e51e:	4604      	mov	r4, r0
    e520:	f106 0588 	add.w	r5, r6, #136	; 0x88
    e524:	2b00      	cmp	r3, #0
    e526:	d040      	beq.n	e5aa <smp_ident_addr_info+0x96>
	if (!bt_addr_le_is_identity(&req->addr)) {
    e528:	79bb      	ldrb	r3, [r7, #6]
    e52a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    e52e:	2bc0      	cmp	r3, #192	; 0xc0
    e530:	d03b      	beq.n	e5aa <smp_ident_addr_info+0x96>
	return arch_is_user_context();
    e532:	f019 ff36 	bl	283a2 <arch_is_user_context>
    e536:	4c60      	ldr	r4, [pc, #384]	; (e6b8 <smp_ident_addr_info+0x1a4>)
    e538:	4b60      	ldr	r3, [pc, #384]	; (e6bc <smp_ident_addr_info+0x1a8>)
    e53a:	1ae4      	subs	r4, r4, r3
    e53c:	08e4      	lsrs	r4, r4, #3
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
    e53e:	01a4      	lsls	r4, r4, #6
    e540:	f044 0601 	orr.w	r6, r4, #1
    e544:	b1d8      	cbz	r0, e57e <smp_ident_addr_info+0x6a>
    e546:	4638      	mov	r0, r7
    e548:	f7f8 fe12 	bl	7170 <bt_addr_le_str_real>
    e54c:	f7f5 fe1a 	bl	4184 <log_strdup>
    e550:	495b      	ldr	r1, [pc, #364]	; (e6c0 <smp_ident_addr_info+0x1ac>)
    e552:	4602      	mov	r2, r0
    e554:	4630      	mov	r0, r6
    e556:	f016 fc9e 	bl	24e96 <log_from_user>
    e55a:	f019 ff22 	bl	283a2 <arch_is_user_context>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
    e55e:	f044 0401 	orr.w	r4, r4, #1
    e562:	b1b8      	cbz	r0, e594 <smp_ident_addr_info+0x80>
    e564:	4628      	mov	r0, r5
    e566:	f7f8 fe03 	bl	7170 <bt_addr_le_str_real>
    e56a:	f7f5 fe0b 	bl	4184 <log_strdup>
    e56e:	4955      	ldr	r1, [pc, #340]	; (e6c4 <smp_ident_addr_info+0x1b0>)
    e570:	4602      	mov	r2, r0
    e572:	4620      	mov	r0, r4
    e574:	f016 fc8f 	bl	24e96 <log_from_user>
		return BT_SMP_ERR_INVALID_PARAMS;
    e578:	200a      	movs	r0, #10
}
    e57a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
    e57e:	4638      	mov	r0, r7
    e580:	f7f8 fdf6 	bl	7170 <bt_addr_le_str_real>
    e584:	f7f5 fdfe 	bl	4184 <log_strdup>
    e588:	4632      	mov	r2, r6
    e58a:	4601      	mov	r1, r0
    e58c:	484c      	ldr	r0, [pc, #304]	; (e6c0 <smp_ident_addr_info+0x1ac>)
    e58e:	f016 fcb5 	bl	24efc <log_1>
    e592:	e7e2      	b.n	e55a <smp_ident_addr_info+0x46>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
    e594:	4628      	mov	r0, r5
    e596:	f7f8 fdeb 	bl	7170 <bt_addr_le_str_real>
    e59a:	f7f5 fdf3 	bl	4184 <log_strdup>
    e59e:	4622      	mov	r2, r4
    e5a0:	4601      	mov	r1, r0
    e5a2:	4848      	ldr	r0, [pc, #288]	; (e6c4 <smp_ident_addr_info+0x1b0>)
    e5a4:	f016 fcaa 	bl	24efc <log_1>
    e5a8:	e7e6      	b.n	e578 <smp_ident_addr_info+0x64>
	return memcmp(a, b, sizeof(*a));
    e5aa:	2207      	movs	r2, #7
    e5ac:	4639      	mov	r1, r7
    e5ae:	4628      	mov	r0, r5
    e5b0:	f01b ff08 	bl	2a3c4 <memcmp>
	if (bt_addr_le_cmp(&conn->le.dst, &req->addr) != 0) {
    e5b4:	b168      	cbz	r0, e5d2 <smp_ident_addr_info+0xbe>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
    e5b6:	7a30      	ldrb	r0, [r6, #8]
    e5b8:	4639      	mov	r1, r7
    e5ba:	f000 fbb7 	bl	ed2c <bt_keys_find_addr>
		if (keys) {
    e5be:	4680      	mov	r8, r0
    e5c0:	b138      	cbz	r0, e5d2 <smp_ident_addr_info+0xbe>
			if (!update_keys_check(smp, keys)) {
    e5c2:	4601      	mov	r1, r0
    e5c4:	4620      	mov	r0, r4
    e5c6:	f019 ffe8 	bl	2859a <update_keys_check>
    e5ca:	b320      	cbz	r0, e616 <smp_ident_addr_info+0x102>
			bt_keys_clear(keys);
    e5cc:	4640      	mov	r0, r8
    e5ce:	f01a faee 	bl	28bae <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    e5d2:	210d      	movs	r1, #13
    e5d4:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    e5d8:	f019 ffd6 	bl	28588 <atomic_test_bit>
    e5dc:	2800      	cmp	r0, #0
    e5de:	d052      	beq.n	e686 <smp_ident_addr_info+0x172>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
    e5e0:	7a31      	ldrb	r1, [r6, #8]
    e5e2:	462a      	mov	r2, r5
    e5e4:	2002      	movs	r0, #2
    e5e6:	f01a face 	bl	28b86 <bt_keys_get_type>
		if (!keys) {
    e5ea:	4680      	mov	r8, r0
    e5ec:	bb00      	cbnz	r0, e630 <smp_ident_addr_info+0x11c>
    e5ee:	f019 fed8 	bl	283a2 <arch_is_user_context>
    e5f2:	4c31      	ldr	r4, [pc, #196]	; (e6b8 <smp_ident_addr_info+0x1a4>)
    e5f4:	4b31      	ldr	r3, [pc, #196]	; (e6bc <smp_ident_addr_info+0x1a8>)
    e5f6:	1ae4      	subs	r4, r4, r3
    e5f8:	08e4      	lsrs	r4, r4, #3
			BT_ERR("Unable to get keys for %s",
    e5fa:	01a4      	lsls	r4, r4, #6
    e5fc:	f044 0401 	orr.w	r4, r4, #1
    e600:	b158      	cbz	r0, e61a <smp_ident_addr_info+0x106>
    e602:	4628      	mov	r0, r5
    e604:	f7f8 fdb4 	bl	7170 <bt_addr_le_str_real>
    e608:	f7f5 fdbc 	bl	4184 <log_strdup>
    e60c:	492e      	ldr	r1, [pc, #184]	; (e6c8 <smp_ident_addr_info+0x1b4>)
    e60e:	4602      	mov	r2, r0
    e610:	4620      	mov	r0, r4
    e612:	f016 fc40 	bl	24e96 <log_from_user>
				return BT_SMP_ERR_UNSPECIFIED;
    e616:	2008      	movs	r0, #8
    e618:	e7af      	b.n	e57a <smp_ident_addr_info+0x66>
			BT_ERR("Unable to get keys for %s",
    e61a:	4628      	mov	r0, r5
    e61c:	f7f8 fda8 	bl	7170 <bt_addr_le_str_real>
    e620:	f7f5 fdb0 	bl	4184 <log_strdup>
    e624:	4622      	mov	r2, r4
    e626:	4601      	mov	r1, r0
    e628:	4827      	ldr	r0, [pc, #156]	; (e6c8 <smp_ident_addr_info+0x1b4>)
    e62a:	f016 fc67 	bl	24efc <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    e62e:	e7f2      	b.n	e616 <smp_ident_addr_info+0x102>
		if (conn->role == BT_HCI_ROLE_MASTER) {
    e630:	78f3      	ldrb	r3, [r6, #3]
    e632:	2b00      	cmp	r3, #0
    e634:	d13d      	bne.n	e6b2 <smp_ident_addr_info+0x19e>
			dst = &conn->le.resp_addr;
    e636:	f106 0396 	add.w	r3, r6, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
    e63a:	781a      	ldrb	r2, [r3, #0]
    e63c:	2a01      	cmp	r2, #1
    e63e:	d11f      	bne.n	e680 <smp_ident_addr_info+0x16c>
		if (bt_addr_le_is_rpa(dst)) {
    e640:	799a      	ldrb	r2, [r3, #6]
    e642:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    e646:	2a40      	cmp	r2, #64	; 0x40
    e648:	d11a      	bne.n	e680 <smp_ident_addr_info+0x16c>
    e64a:	f853 2f01 	ldr.w	r2, [r3, #1]!
    e64e:	f8c8 203a 	str.w	r2, [r8, #58]	; 0x3a
    e652:	889b      	ldrh	r3, [r3, #4]
    e654:	f8a8 303e 	strh.w	r3, [r8, #62]	; 0x3e
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    e658:	f896 3088 	ldrb.w	r3, [r6, #136]	; 0x88
    e65c:	b183      	cbz	r3, e680 <smp_ident_addr_info+0x16c>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
    e65e:	f896 308e 	ldrb.w	r3, [r6, #142]	; 0x8e
    e662:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    e666:	2bc0      	cmp	r3, #192	; 0xc0
    e668:	d00a      	beq.n	e680 <smp_ident_addr_info+0x16c>
				bt_addr_le_copy(&keys->addr, &req->addr);
    e66a:	4639      	mov	r1, r7
    e66c:	f108 0001 	add.w	r0, r8, #1
    e670:	f019 fee2 	bl	28438 <bt_addr_le_copy>
				bt_addr_le_copy(&conn->le.dst, &req->addr);
    e674:	4628      	mov	r0, r5
    e676:	f019 fedf 	bl	28438 <bt_addr_le_copy>
				bt_conn_identity_resolved(conn);
    e67a:	4630      	mov	r0, r6
    e67c:	f7fb feea 	bl	a454 <bt_conn_identity_resolved>
		bt_id_add(keys);
    e680:	4640      	mov	r0, r8
    e682:	f7fa fdb1 	bl	91e8 <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    e686:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
    e68a:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    e68e:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    e690:	f884 21a9 	strb.w	r2, [r4, #425]	; 0x1a9
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    e694:	d504      	bpl.n	e6a0 <smp_ident_addr_info+0x18c>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    e696:	210a      	movs	r1, #10
    e698:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    e69c:	f019 fe97 	bl	283ce <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
    e6a0:	f8b4 51a8 	ldrh.w	r5, [r4, #424]	; 0x1a8
    e6a4:	b91d      	cbnz	r5, e6ae <smp_ident_addr_info+0x19a>
		smp_pairing_complete(smp, 0);
    e6a6:	4629      	mov	r1, r5
    e6a8:	4620      	mov	r0, r4
    e6aa:	f7ff fdc5 	bl	e238 <smp_pairing_complete>
	return 0;
    e6ae:	2000      	movs	r0, #0
    e6b0:	e763      	b.n	e57a <smp_ident_addr_info+0x66>
			dst = &conn->le.init_addr;
    e6b2:	f106 038f 	add.w	r3, r6, #143	; 0x8f
    e6b6:	e7c0      	b.n	e63a <smp_ident_addr_info+0x126>
    e6b8:	0002a7d8 	.word	0x0002a7d8
    e6bc:	0002a6d0 	.word	0x0002a6d0
    e6c0:	0002e5e6 	.word	0x0002e5e6
    e6c4:	0002e613 	.word	0x0002e613
    e6c8:	0002e4e2 	.word	0x0002e4e2

0000e6cc <smp_master_ident>:
{
    e6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e6ce:	4604      	mov	r4, r0
    e6d0:	460b      	mov	r3, r1
	struct bt_conn *conn = smp->chan.chan.conn;
    e6d2:	f850 7bc4 	ldr.w	r7, [r0], #196
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    e6d6:	210d      	movs	r1, #13
    e6d8:	f019 ff56 	bl	28588 <atomic_test_bit>
    e6dc:	b3b8      	cbz	r0, e74e <smp_master_ident+0x82>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    e6de:	f107 0688 	add.w	r6, r7, #136	; 0x88
    e6e2:	7a39      	ldrb	r1, [r7, #8]
		struct bt_smp_master_ident *req = (void *)buf->data;
    e6e4:	689d      	ldr	r5, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    e6e6:	4632      	mov	r2, r6
    e6e8:	2004      	movs	r0, #4
    e6ea:	f01a fa4c 	bl	28b86 <bt_keys_get_type>
		if (!keys) {
    e6ee:	bb00      	cbnz	r0, e732 <smp_master_ident+0x66>
    e6f0:	f019 fe57 	bl	283a2 <arch_is_user_context>
    e6f4:	4c21      	ldr	r4, [pc, #132]	; (e77c <smp_master_ident+0xb0>)
    e6f6:	4b22      	ldr	r3, [pc, #136]	; (e780 <smp_master_ident+0xb4>)
    e6f8:	1ae4      	subs	r4, r4, r3
    e6fa:	08e4      	lsrs	r4, r4, #3
			BT_ERR("Unable to get keys for %s",
    e6fc:	01a4      	lsls	r4, r4, #6
    e6fe:	f044 0401 	orr.w	r4, r4, #1
    e702:	b158      	cbz	r0, e71c <smp_master_ident+0x50>
    e704:	4630      	mov	r0, r6
    e706:	f7f8 fd33 	bl	7170 <bt_addr_le_str_real>
    e70a:	f7f5 fd3b 	bl	4184 <log_strdup>
    e70e:	491d      	ldr	r1, [pc, #116]	; (e784 <smp_master_ident+0xb8>)
    e710:	4602      	mov	r2, r0
    e712:	4620      	mov	r0, r4
    e714:	f016 fbbf 	bl	24e96 <log_from_user>
			return BT_SMP_ERR_UNSPECIFIED;
    e718:	2008      	movs	r0, #8
}
    e71a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			BT_ERR("Unable to get keys for %s",
    e71c:	4630      	mov	r0, r6
    e71e:	f7f8 fd27 	bl	7170 <bt_addr_le_str_real>
    e722:	f7f5 fd2f 	bl	4184 <log_strdup>
    e726:	4622      	mov	r2, r4
    e728:	4601      	mov	r1, r0
    e72a:	4816      	ldr	r0, [pc, #88]	; (e784 <smp_master_ident+0xb8>)
    e72c:	f016 fbe6 	bl	24efc <log_1>
    e730:	e7f2      	b.n	e718 <smp_master_ident+0x4c>
    e732:	882b      	ldrh	r3, [r5, #0]
    e734:	8303      	strh	r3, [r0, #24]
    e736:	462b      	mov	r3, r5
    e738:	f853 2f02 	ldr.w	r2, [r3, #2]!
    e73c:	6102      	str	r2, [r0, #16]
    e73e:	685a      	ldr	r2, [r3, #4]
    e740:	6142      	str	r2, [r0, #20]
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
    e742:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
    e746:	f023 0301 	bic.w	r3, r3, #1
    e74a:	f884 31a9 	strb.w	r3, [r4, #425]	; 0x1a9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    e74e:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
    e752:	079a      	lsls	r2, r3, #30
    e754:	d50d      	bpl.n	e772 <smp_master_ident+0xa6>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    e756:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    e758:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    e75c:	f019 fe37 	bl	283ce <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
    e760:	f8b4 51a8 	ldrh.w	r5, [r4, #424]	; 0x1a8
    e764:	b91d      	cbnz	r5, e76e <smp_master_ident+0xa2>
		smp_pairing_complete(smp, 0);
    e766:	4629      	mov	r1, r5
    e768:	4620      	mov	r0, r4
    e76a:	f7ff fd65 	bl	e238 <smp_pairing_complete>
	return 0;
    e76e:	2000      	movs	r0, #0
    e770:	e7d3      	b.n	e71a <smp_master_ident+0x4e>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    e772:	075b      	lsls	r3, r3, #29
    e774:	d5f4      	bpl.n	e760 <smp_master_ident+0x94>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    e776:	210a      	movs	r1, #10
    e778:	e7ee      	b.n	e758 <smp_master_ident+0x8c>
    e77a:	bf00      	nop
    e77c:	0002a7d8 	.word	0x0002a7d8
    e780:	0002a6d0 	.word	0x0002a6d0
    e784:	0002e4e2 	.word	0x0002e4e2

0000e788 <smp_pairing_failed>:
{
    e788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_smp_pairing_fail *req = (void *)buf->data;
    e78a:	688d      	ldr	r5, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
    e78c:	6806      	ldr	r6, [r0, #0]
{
    e78e:	4604      	mov	r4, r0
    e790:	f019 fe07 	bl	283a2 <arch_is_user_context>
    e794:	4b17      	ldr	r3, [pc, #92]	; (e7f4 <smp_pairing_failed+0x6c>)
    e796:	4a18      	ldr	r2, [pc, #96]	; (e7f8 <smp_pairing_failed+0x70>)
    e798:	7829      	ldrb	r1, [r5, #0]
    e79a:	1a9b      	subs	r3, r3, r2
    e79c:	08db      	lsrs	r3, r3, #3
	BT_ERR("reason 0x%x", req->reason);
    e79e:	019b      	lsls	r3, r3, #6
    e7a0:	f043 0301 	orr.w	r3, r3, #1
    e7a4:	b1a0      	cbz	r0, e7d0 <smp_pairing_failed+0x48>
    e7a6:	460a      	mov	r2, r1
    e7a8:	4618      	mov	r0, r3
    e7aa:	4914      	ldr	r1, [pc, #80]	; (e7fc <smp_pairing_failed+0x74>)
    e7ac:	f016 fb73 	bl	24e96 <log_from_user>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    e7b0:	f104 07c4 	add.w	r7, r4, #196	; 0xc4
    e7b4:	210a      	movs	r1, #10
    e7b6:	4638      	mov	r0, r7
    e7b8:	f019 ff9a 	bl	286f0 <atomic_test_and_clear_bit>
    e7bc:	b168      	cbz	r0, e7da <smp_pairing_failed+0x52>
		if (bt_auth && bt_auth->cancel) {
    e7be:	4b10      	ldr	r3, [pc, #64]	; (e800 <smp_pairing_failed+0x78>)
    e7c0:	681b      	ldr	r3, [r3, #0]
    e7c2:	b98b      	cbnz	r3, e7e8 <smp_pairing_failed+0x60>
	smp_pairing_complete(smp, req->reason);
    e7c4:	4620      	mov	r0, r4
    e7c6:	7829      	ldrb	r1, [r5, #0]
    e7c8:	f7ff fd36 	bl	e238 <smp_pairing_complete>
}
    e7cc:	2000      	movs	r0, #0
    e7ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BT_ERR("reason 0x%x", req->reason);
    e7d0:	480a      	ldr	r0, [pc, #40]	; (e7fc <smp_pairing_failed+0x74>)
    e7d2:	461a      	mov	r2, r3
    e7d4:	f016 fb92 	bl	24efc <log_1>
    e7d8:	e7ea      	b.n	e7b0 <smp_pairing_failed+0x28>
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
    e7da:	210b      	movs	r1, #11
    e7dc:	4638      	mov	r0, r7
    e7de:	f019 ff87 	bl	286f0 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    e7e2:	2800      	cmp	r0, #0
    e7e4:	d1eb      	bne.n	e7be <smp_pairing_failed+0x36>
    e7e6:	e7ed      	b.n	e7c4 <smp_pairing_failed+0x3c>
		if (bt_auth && bt_auth->cancel) {
    e7e8:	691b      	ldr	r3, [r3, #16]
    e7ea:	2b00      	cmp	r3, #0
    e7ec:	d0ea      	beq.n	e7c4 <smp_pairing_failed+0x3c>
			bt_auth->cancel(conn);
    e7ee:	4630      	mov	r0, r6
    e7f0:	4798      	blx	r3
    e7f2:	e7e7      	b.n	e7c4 <smp_pairing_failed+0x3c>
    e7f4:	0002a7d8 	.word	0x0002a7d8
    e7f8:	0002a6d0 	.word	0x0002a6d0
    e7fc:	0002e5fa 	.word	0x0002e5fa
    e800:	20000e30 	.word	0x20000e30

0000e804 <bt_smp_encrypt_change>:
{
    e804:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->conn;
    e808:	4605      	mov	r5, r0
{
    e80a:	b089      	sub	sp, #36	; 0x24
	struct bt_conn *conn = chan->conn;
    e80c:	f855 7bc4 	ldr.w	r7, [r5], #196
{
    e810:	4604      	mov	r4, r0
    e812:	460e      	mov	r6, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    e814:	4628      	mov	r0, r5
    e816:	2101      	movs	r1, #1
    e818:	f019 ff6a 	bl	286f0 <atomic_test_and_clear_bit>
    e81c:	b310      	cbz	r0, e864 <bt_smp_encrypt_change+0x60>
	if (hci_status) {
    e81e:	b1be      	cbz	r6, e850 <bt_smp_encrypt_change+0x4c>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    e820:	2103      	movs	r1, #3
    e822:	4628      	mov	r0, r5
    e824:	f019 feb0 	bl	28588 <atomic_test_bit>
    e828:	b1e0      	cbz	r0, e864 <bt_smp_encrypt_change+0x60>
			uint8_t smp_err = smp_err_get(
    e82a:	4630      	mov	r0, r6
    e82c:	f7fa f974 	bl	8b18 <bt_security_err_get>
	switch (auth_err) {
    e830:	3801      	subs	r0, #1
    e832:	b2c0      	uxtb	r0, r0
    e834:	2807      	cmp	r0, #7
    e836:	bf9a      	itte	ls
    e838:	4b84      	ldrls	r3, [pc, #528]	; (ea4c <bt_smp_encrypt_change+0x248>)
    e83a:	5c1e      	ldrbls	r6, [r3, r0]
			uint8_t smp_err = smp_err_get(
    e83c:	2600      	movhi	r6, #0
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
    e83e:	2102      	movs	r1, #2
    e840:	4628      	mov	r0, r5
    e842:	f019 fdc4 	bl	283ce <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
    e846:	4631      	mov	r1, r6
		smp_pairing_complete(smp, 0);
    e848:	4620      	mov	r0, r4
    e84a:	f7ff fcf5 	bl	e238 <smp_pairing_complete>
    e84e:	e009      	b.n	e864 <bt_smp_encrypt_change+0x60>
	if (!conn->encrypt) {
    e850:	7afb      	ldrb	r3, [r7, #11]
    e852:	b13b      	cbz	r3, e864 <bt_smp_encrypt_change+0x60>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    e854:	2103      	movs	r1, #3
    e856:	4628      	mov	r0, r5
    e858:	f019 fe96 	bl	28588 <atomic_test_bit>
    e85c:	b928      	cbnz	r0, e86a <bt_smp_encrypt_change+0x66>
		smp_reset(smp);
    e85e:	4620      	mov	r0, r4
    e860:	f019 ff5e 	bl	28720 <smp_reset>
}
    e864:	b009      	add	sp, #36	; 0x24
    e866:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    e86a:	2105      	movs	r1, #5
    e86c:	4628      	mov	r0, r5
    e86e:	f019 fe8b 	bl	28588 <atomic_test_bit>
    e872:	b198      	cbz	r0, e89c <bt_smp_encrypt_change+0x98>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
    e874:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
    e878:	071f      	lsls	r7, r3, #28
    e87a:	d507      	bpl.n	e88c <bt_smp_encrypt_change+0x88>
    e87c:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
    e880:	071e      	lsls	r6, r3, #28
    e882:	d503      	bpl.n	e88c <bt_smp_encrypt_change+0x88>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
    e884:	2111      	movs	r1, #17
    e886:	4628      	mov	r0, r5
    e888:	f019 fda1 	bl	283ce <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
    e88c:	f8b4 31a8 	ldrh.w	r3, [r4, #424]	; 0x1a8
    e890:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    e894:	f023 0308 	bic.w	r3, r3, #8
    e898:	f8a4 31a8 	strh.w	r3, [r4, #424]	; 0x1a8
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
    e89c:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
    e8a0:	07d8      	lsls	r0, r3, #31
    e8a2:	d523      	bpl.n	e8ec <bt_smp_encrypt_change+0xe8>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
    e8a4:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    e8a6:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    e8aa:	f019 fd90 	bl	283ce <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
    e8ae:	2102      	movs	r1, #2
    e8b0:	4628      	mov	r0, r5
    e8b2:	f019 fd8c 	bl	283ce <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
    e8b6:	6822      	ldr	r2, [r4, #0]
	if (!keys) {
    e8b8:	f8d2 30b4 	ldr.w	r3, [r2, #180]	; 0xb4
    e8bc:	bb43      	cbnz	r3, e910 <bt_smp_encrypt_change+0x10c>
    e8be:	f019 fd70 	bl	283a2 <arch_is_user_context>
    e8c2:	4c63      	ldr	r4, [pc, #396]	; (ea50 <bt_smp_encrypt_change+0x24c>)
    e8c4:	4963      	ldr	r1, [pc, #396]	; (ea54 <bt_smp_encrypt_change+0x250>)
    e8c6:	1a64      	subs	r4, r4, r1
    e8c8:	08e4      	lsrs	r4, r4, #3
    e8ca:	4603      	mov	r3, r0
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
    e8cc:	01a4      	lsls	r4, r4, #6
    e8ce:	f044 0401 	orr.w	r4, r4, #1
    e8d2:	f102 0088 	add.w	r0, r2, #136	; 0x88
    e8d6:	b18b      	cbz	r3, e8fc <bt_smp_encrypt_change+0xf8>
    e8d8:	f7f8 fc4a 	bl	7170 <bt_addr_le_str_real>
    e8dc:	f7f5 fc52 	bl	4184 <log_strdup>
    e8e0:	495d      	ldr	r1, [pc, #372]	; (ea58 <bt_smp_encrypt_change+0x254>)
    e8e2:	4602      	mov	r2, r0
    e8e4:	4620      	mov	r0, r4
    e8e6:	f016 fad6 	bl	24e96 <log_from_user>
    e8ea:	e7bb      	b.n	e864 <bt_smp_encrypt_change+0x60>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    e8ec:	0799      	lsls	r1, r3, #30
    e8ee:	d501      	bpl.n	e8f4 <bt_smp_encrypt_change+0xf0>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    e8f0:	2108      	movs	r1, #8
    e8f2:	e7d8      	b.n	e8a6 <bt_smp_encrypt_change+0xa2>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    e8f4:	075a      	lsls	r2, r3, #29
    e8f6:	d5da      	bpl.n	e8ae <bt_smp_encrypt_change+0xaa>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    e8f8:	210a      	movs	r1, #10
    e8fa:	e7d4      	b.n	e8a6 <bt_smp_encrypt_change+0xa2>
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
    e8fc:	f7f8 fc38 	bl	7170 <bt_addr_le_str_real>
    e900:	f7f5 fc40 	bl	4184 <log_strdup>
    e904:	4622      	mov	r2, r4
    e906:	4601      	mov	r1, r0
    e908:	4853      	ldr	r0, [pc, #332]	; (ea58 <bt_smp_encrypt_change+0x254>)
    e90a:	f016 faf7 	bl	24efc <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
    e90e:	e7a9      	b.n	e864 <bt_smp_encrypt_change+0x60>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    e910:	2105      	movs	r1, #5
    e912:	f019 fe39 	bl	28588 <atomic_test_bit>
    e916:	b9d0      	cbnz	r0, e94e <bt_smp_encrypt_change+0x14a>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
    e918:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
    e91c:	07db      	lsls	r3, r3, #31
    e91e:	d516      	bpl.n	e94e <bt_smp_encrypt_change+0x14a>
	struct bt_keys *keys = conn->le.keys;
    e920:	6823      	ldr	r3, [r4, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
    e922:	211a      	movs	r1, #26
    e924:	a801      	add	r0, sp, #4
	struct bt_keys *keys = conn->le.keys;
    e926:	f8d3 60b4 	ldr.w	r6, [r3, #180]	; 0xb4
		if (bt_rand((void *)&rand, sizeof(rand))) {
    e92a:	f003 fa5f 	bl	11dec <bt_rand>
    e92e:	4680      	mov	r8, r0
    e930:	b1b8      	cbz	r0, e962 <bt_smp_encrypt_change+0x15e>
    e932:	f019 fd36 	bl	283a2 <arch_is_user_context>
    e936:	4b46      	ldr	r3, [pc, #280]	; (ea50 <bt_smp_encrypt_change+0x24c>)
    e938:	4a46      	ldr	r2, [pc, #280]	; (ea54 <bt_smp_encrypt_change+0x250>)
    e93a:	1a9b      	subs	r3, r3, r2
    e93c:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to get random bytes");
    e93e:	019b      	lsls	r3, r3, #6
    e940:	f043 0301 	orr.w	r3, r3, #1
    e944:	b140      	cbz	r0, e958 <bt_smp_encrypt_change+0x154>
    e946:	4945      	ldr	r1, [pc, #276]	; (ea5c <bt_smp_encrypt_change+0x258>)
			BT_ERR("Unable to allocate Encrypt Info buffer");
    e948:	4618      	mov	r0, r3
    e94a:	f016 faa4 	bl	24e96 <log_from_user>
	if (!smp->local_dist && !smp->remote_dist) {
    e94e:	f8b4 11a8 	ldrh.w	r1, [r4, #424]	; 0x1a8
    e952:	2900      	cmp	r1, #0
    e954:	d186      	bne.n	e864 <bt_smp_encrypt_change+0x60>
    e956:	e777      	b.n	e848 <bt_smp_encrypt_change+0x44>
			BT_ERR("Unable to get random bytes");
    e958:	4840      	ldr	r0, [pc, #256]	; (ea5c <bt_smp_encrypt_change+0x258>)
    e95a:	4619      	mov	r1, r3
			BT_ERR("Unable to allocate Master Ident buffer");
    e95c:	f016 fac1 	bl	24ee2 <log_0>
			return;
    e960:	e7f5      	b.n	e94e <bt_smp_encrypt_change+0x14a>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
    e962:	2106      	movs	r1, #6
    e964:	4620      	mov	r0, r4
    e966:	f019 fe3d 	bl	285e4 <smp_create_pdu.isra.0>
		if (!buf) {
    e96a:	4607      	mov	r7, r0
    e96c:	b970      	cbnz	r0, e98c <bt_smp_encrypt_change+0x188>
    e96e:	f019 fd18 	bl	283a2 <arch_is_user_context>
    e972:	4b37      	ldr	r3, [pc, #220]	; (ea50 <bt_smp_encrypt_change+0x24c>)
    e974:	4a37      	ldr	r2, [pc, #220]	; (ea54 <bt_smp_encrypt_change+0x250>)
    e976:	1a9b      	subs	r3, r3, r2
    e978:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to allocate Encrypt Info buffer");
    e97a:	019b      	lsls	r3, r3, #6
    e97c:	f043 0301 	orr.w	r3, r3, #1
    e980:	b108      	cbz	r0, e986 <bt_smp_encrypt_change+0x182>
    e982:	4937      	ldr	r1, [pc, #220]	; (ea60 <bt_smp_encrypt_change+0x25c>)
    e984:	e7e0      	b.n	e948 <bt_smp_encrypt_change+0x144>
    e986:	4836      	ldr	r0, [pc, #216]	; (ea60 <bt_smp_encrypt_change+0x25c>)
    e988:	4619      	mov	r1, r3
    e98a:	e7e7      	b.n	e95c <bt_smp_encrypt_change+0x158>
	return net_buf_simple_add(&buf->b, len);
    e98c:	2110      	movs	r1, #16
    e98e:	3008      	adds	r0, #8
    e990:	f01a f988 	bl	28ca4 <net_buf_simple_add>
    e994:	7b32      	ldrb	r2, [r6, #12]
    e996:	a901      	add	r1, sp, #4
    e998:	4681      	mov	r9, r0
    e99a:	f01b fd21 	bl	2a3e0 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
    e99e:	7b30      	ldrb	r0, [r6, #12]
    e9a0:	280f      	cmp	r0, #15
    e9a2:	d805      	bhi.n	e9b0 <bt_smp_encrypt_change+0x1ac>
__ssp_bos_icheck3(memset, void *, int)
    e9a4:	f1c0 0210 	rsb	r2, r0, #16
    e9a8:	4641      	mov	r1, r8
    e9aa:	4448      	add	r0, r9
    e9ac:	f01b fd26 	bl	2a3fc <memset>
		smp_send(smp, buf, NULL, NULL);
    e9b0:	4639      	mov	r1, r7
    e9b2:	2200      	movs	r2, #0
    e9b4:	4620      	mov	r0, r4
    e9b6:	f7fe fc39 	bl	d22c <smp_send.isra.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_MASTER_IDENT,
    e9ba:	2107      	movs	r1, #7
    e9bc:	4620      	mov	r0, r4
    e9be:	f019 fe11 	bl	285e4 <smp_create_pdu.isra.0>
		if (!buf) {
    e9c2:	4607      	mov	r7, r0
    e9c4:	b970      	cbnz	r0, e9e4 <bt_smp_encrypt_change+0x1e0>
    e9c6:	f019 fcec 	bl	283a2 <arch_is_user_context>
    e9ca:	4b21      	ldr	r3, [pc, #132]	; (ea50 <bt_smp_encrypt_change+0x24c>)
    e9cc:	4a21      	ldr	r2, [pc, #132]	; (ea54 <bt_smp_encrypt_change+0x250>)
    e9ce:	1a9b      	subs	r3, r3, r2
    e9d0:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to allocate Master Ident buffer");
    e9d2:	019b      	lsls	r3, r3, #6
    e9d4:	f043 0301 	orr.w	r3, r3, #1
    e9d8:	b108      	cbz	r0, e9de <bt_smp_encrypt_change+0x1da>
    e9da:	4922      	ldr	r1, [pc, #136]	; (ea64 <bt_smp_encrypt_change+0x260>)
    e9dc:	e7b4      	b.n	e948 <bt_smp_encrypt_change+0x144>
    e9de:	4821      	ldr	r0, [pc, #132]	; (ea64 <bt_smp_encrypt_change+0x260>)
    e9e0:	4619      	mov	r1, r3
    e9e2:	e7bb      	b.n	e95c <bt_smp_encrypt_change+0x158>
    e9e4:	210a      	movs	r1, #10
    e9e6:	3008      	adds	r0, #8
    e9e8:	f01a f95c 	bl	28ca4 <net_buf_simple_add>
    e9ec:	aa05      	add	r2, sp, #20
    e9ee:	4603      	mov	r3, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    e9f0:	ca03      	ldmia	r2!, {r0, r1}
    e9f2:	f8c3 0002 	str.w	r0, [r3, #2]
    e9f6:	f8c3 1006 	str.w	r1, [r3, #6]
    e9fa:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    e9fe:	801a      	strh	r2, [r3, #0]
		smp_send(smp, buf, smp_ident_sent, NULL);
    ea00:	4639      	mov	r1, r7
    ea02:	4a19      	ldr	r2, [pc, #100]	; (ea68 <bt_smp_encrypt_change+0x264>)
    ea04:	4620      	mov	r0, r4
    ea06:	f7fe fc11 	bl	d22c <smp_send.isra.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    ea0a:	4628      	mov	r0, r5
    ea0c:	210d      	movs	r1, #13
    ea0e:	f019 fdbb 	bl	28588 <atomic_test_bit>
    ea12:	ad05      	add	r5, sp, #20
    ea14:	2800      	cmp	r0, #0
    ea16:	d09a      	beq.n	e94e <bt_smp_encrypt_change+0x14a>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
    ea18:	2101      	movs	r1, #1
    ea1a:	4630      	mov	r0, r6
    ea1c:	f01a f8c3 	bl	28ba6 <bt_keys_add_type>
    ea20:	f106 074a 	add.w	r7, r6, #74	; 0x4a
    ea24:	ab01      	add	r3, sp, #4
    ea26:	461a      	mov	r2, r3
    ea28:	ca03      	ldmia	r2!, {r0, r1}
    ea2a:	42aa      	cmp	r2, r5
    ea2c:	6038      	str	r0, [r7, #0]
    ea2e:	6079      	str	r1, [r7, #4]
    ea30:	4613      	mov	r3, r2
    ea32:	f107 0708 	add.w	r7, r7, #8
    ea36:	d1f6      	bne.n	ea26 <bt_smp_encrypt_change+0x222>
    ea38:	462b      	mov	r3, r5
    ea3a:	cb03      	ldmia	r3!, {r0, r1}
    ea3c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    ea40:	6430      	str	r0, [r6, #64]	; 0x40
    ea42:	6471      	str	r1, [r6, #68]	; 0x44
    ea44:	f8a6 3048 	strh.w	r3, [r6, #72]	; 0x48
    ea48:	e781      	b.n	e94e <bt_smp_encrypt_change+0x14a>
    ea4a:	bf00      	nop
    ea4c:	0002e6a5 	.word	0x0002e6a5
    ea50:	0002a7d8 	.word	0x0002a7d8
    ea54:	0002a6d0 	.word	0x0002a6d0
    ea58:	0002e606 	.word	0x0002e606
    ea5c:	0002e61b 	.word	0x0002e61b
    ea60:	0002e636 	.word	0x0002e636
    ea64:	0002e65d 	.word	0x0002e65d
    ea68:	00028b4f 	.word	0x00028b4f

0000ea6c <smp_timeout>:
{
    ea6c:	b538      	push	{r3, r4, r5, lr}
    ea6e:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(work, struct bt_smp, work);
    ea70:	f5a0 75d8 	sub.w	r5, r0, #432	; 0x1b0
    ea74:	f019 fc95 	bl	283a2 <arch_is_user_context>
    ea78:	4b0d      	ldr	r3, [pc, #52]	; (eab0 <smp_timeout+0x44>)
    ea7a:	4a0e      	ldr	r2, [pc, #56]	; (eab4 <smp_timeout+0x48>)
    ea7c:	1a9b      	subs	r3, r3, r2
    ea7e:	08db      	lsrs	r3, r3, #3
	BT_ERR("SMP Timeout");
    ea80:	019b      	lsls	r3, r3, #6
    ea82:	f043 0301 	orr.w	r3, r3, #1
    ea86:	b170      	cbz	r0, eaa6 <smp_timeout+0x3a>
    ea88:	490b      	ldr	r1, [pc, #44]	; (eab8 <smp_timeout+0x4c>)
    ea8a:	4618      	mov	r0, r3
    ea8c:	f016 fa03 	bl	24e96 <log_from_user>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
    ea90:	4628      	mov	r0, r5
    ea92:	2108      	movs	r1, #8
    ea94:	f7ff fbd0 	bl	e238 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    ea98:	f1a4 00ec 	sub.w	r0, r4, #236	; 0xec
    ea9c:	2104      	movs	r1, #4
}
    ea9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    eaa2:	f019 bc94 	b.w	283ce <atomic_set_bit>
	BT_ERR("SMP Timeout");
    eaa6:	4804      	ldr	r0, [pc, #16]	; (eab8 <smp_timeout+0x4c>)
    eaa8:	4619      	mov	r1, r3
    eaaa:	f016 fa1a 	bl	24ee2 <log_0>
    eaae:	e7ef      	b.n	ea90 <smp_timeout+0x24>
    eab0:	0002a7d8 	.word	0x0002a7d8
    eab4:	0002a6d0 	.word	0x0002a6d0
    eab8:	0002e684 	.word	0x0002e684

0000eabc <bt_smp_update_keys>:
{
    eabc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eabe:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
    eac0:	f7fe fb48 	bl	d154 <smp_chan_get>
	if (!smp) {
    eac4:	4605      	mov	r5, r0
    eac6:	2800      	cmp	r0, #0
    eac8:	f000 8083 	beq.w	ebd2 <bt_smp_update_keys+0x116>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    eacc:	f100 06c4 	add.w	r6, r0, #196	; 0xc4
    ead0:	2103      	movs	r1, #3
    ead2:	4630      	mov	r0, r6
    ead4:	f019 fd58 	bl	28588 <atomic_test_bit>
    ead8:	2800      	cmp	r0, #0
    eada:	d07a      	beq.n	ebd2 <bt_smp_update_keys+0x116>
	if (conn->le.keys) {
    eadc:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    eae0:	b108      	cbz	r0, eae6 <bt_smp_update_keys+0x2a>
		bt_keys_clear(conn->le.keys);
    eae2:	f01a f864 	bl	28bae <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    eae6:	f104 0788 	add.w	r7, r4, #136	; 0x88
    eaea:	7a20      	ldrb	r0, [r4, #8]
    eaec:	4639      	mov	r1, r7
    eaee:	f000 f897 	bl	ec20 <bt_keys_get_addr>
    eaf2:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
    eaf6:	bb20      	cbnz	r0, eb42 <bt_smp_update_keys+0x86>
    eaf8:	f019 fc53 	bl	283a2 <arch_is_user_context>
    eafc:	4c3a      	ldr	r4, [pc, #232]	; (ebe8 <bt_smp_update_keys+0x12c>)
    eafe:	4b3b      	ldr	r3, [pc, #236]	; (ebec <bt_smp_update_keys+0x130>)
    eb00:	1ae4      	subs	r4, r4, r3
    eb02:	08e4      	lsrs	r4, r4, #3
		BT_ERR("Unable to get keys for %s",
    eb04:	01a4      	lsls	r4, r4, #6
    eb06:	f044 0401 	orr.w	r4, r4, #1
    eb0a:	b178      	cbz	r0, eb2c <bt_smp_update_keys+0x70>
    eb0c:	4638      	mov	r0, r7
    eb0e:	f7f8 fb2f 	bl	7170 <bt_addr_le_str_real>
    eb12:	f7f5 fb37 	bl	4184 <log_strdup>
    eb16:	4936      	ldr	r1, [pc, #216]	; (ebf0 <bt_smp_update_keys+0x134>)
    eb18:	4602      	mov	r2, r0
    eb1a:	4620      	mov	r0, r4
    eb1c:	f016 f9bb 	bl	24e96 <log_from_user>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    eb20:	4628      	mov	r0, r5
    eb22:	2108      	movs	r1, #8
}
    eb24:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    eb28:	f019 bf62 	b.w	289f0 <smp_error>
		BT_ERR("Unable to get keys for %s",
    eb2c:	4638      	mov	r0, r7
    eb2e:	f7f8 fb1f 	bl	7170 <bt_addr_le_str_real>
    eb32:	f7f5 fb27 	bl	4184 <log_strdup>
    eb36:	4622      	mov	r2, r4
    eb38:	4601      	mov	r1, r0
    eb3a:	482d      	ldr	r0, [pc, #180]	; (ebf0 <bt_smp_update_keys+0x134>)
    eb3c:	f016 f9de 	bl	24efc <log_1>
    eb40:	e7ee      	b.n	eb20 <bt_smp_update_keys+0x64>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
    eb42:	210e      	movs	r1, #14
    eb44:	4630      	mov	r0, r6
    eb46:	f019 fd1f 	bl	28588 <atomic_test_bit>
    eb4a:	b128      	cbz	r0, eb58 <bt_smp_update_keys+0x9c>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
    eb4c:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
    eb50:	7b53      	ldrb	r3, [r2, #13]
    eb52:	f043 0302 	orr.w	r3, r3, #2
    eb56:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
    eb58:	f895 20c8 	ldrb.w	r2, [r5, #200]	; 0xc8
    eb5c:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
    eb60:	2a03      	cmp	r2, #3
    eb62:	7b4b      	ldrb	r3, [r1, #13]
    eb64:	d836      	bhi.n	ebd4 <bt_smp_update_keys+0x118>
    eb66:	b3c2      	cbz	r2, ebda <bt_smp_update_keys+0x11e>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
    eb68:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
    eb6c:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
    eb6e:	f895 30d4 	ldrb.w	r3, [r5, #212]	; 0xd4
    eb72:	f895 20cd 	ldrb.w	r2, [r5, #205]	; 0xcd
    eb76:	4293      	cmp	r3, r2
    eb78:	bf28      	it	cs
    eb7a:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
    eb7c:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    eb7e:	4630      	mov	r0, r6
    eb80:	2105      	movs	r1, #5
    eb82:	f019 fd01 	bl	28588 <atomic_test_bit>
    eb86:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
    eb8a:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    eb8c:	b340      	cbz	r0, ebe0 <bt_smp_update_keys+0x124>
		conn->le.keys->flags |= BT_KEYS_SC;
    eb8e:	f042 0210 	orr.w	r2, r2, #16
    eb92:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    eb94:	210d      	movs	r1, #13
    eb96:	4630      	mov	r0, r6
    eb98:	f019 fcf6 	bl	28588 <atomic_test_bit>
    eb9c:	b1c8      	cbz	r0, ebd2 <bt_smp_update_keys+0x116>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
    eb9e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    eba2:	2120      	movs	r1, #32
    eba4:	f019 ffff 	bl	28ba6 <bt_keys_add_type>
    eba8:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
    ebac:	f205 1207 	addw	r2, r5, #263	; 0x107
    ebb0:	331a      	adds	r3, #26
    ebb2:	f205 1517 	addw	r5, r5, #279	; 0x117
    ebb6:	f852 1b04 	ldr.w	r1, [r2], #4
    ebba:	f843 1b04 	str.w	r1, [r3], #4
    ebbe:	42aa      	cmp	r2, r5
    ebc0:	d1f9      	bne.n	ebb6 <bt_smp_update_keys+0xfa>
__ssp_bos_icheck3(memset, void *, int)
    ebc2:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
    ebc6:	2300      	movs	r3, #0
    ebc8:	6113      	str	r3, [r2, #16]
    ebca:	6153      	str	r3, [r2, #20]
    ebcc:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
    ebd0:	8313      	strh	r3, [r2, #24]
}
    ebd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (smp->method) {
    ebd4:	3a05      	subs	r2, #5
    ebd6:	2a01      	cmp	r2, #1
    ebd8:	d9c6      	bls.n	eb68 <bt_smp_update_keys+0xac>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
    ebda:	f023 0301 	bic.w	r3, r3, #1
    ebde:	e7c5      	b.n	eb6c <bt_smp_update_keys+0xb0>
		conn->le.keys->flags &= ~BT_KEYS_SC;
    ebe0:	f022 0210 	bic.w	r2, r2, #16
    ebe4:	735a      	strb	r2, [r3, #13]
    ebe6:	e7f4      	b.n	ebd2 <bt_smp_update_keys+0x116>
    ebe8:	0002a7d8 	.word	0x0002a7d8
    ebec:	0002a6d0 	.word	0x0002a6d0
    ebf0:	0002e4e2 	.word	0x0002e4e2

0000ebf4 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
    ebf4:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
    ebf6:	4b07      	ldr	r3, [pc, #28]	; (ec14 <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
    ebf8:	4807      	ldr	r0, [pc, #28]	; (ec18 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
    ebfa:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
    ebfe:	f003 0306 	and.w	r3, r3, #6
    ec02:	1f9a      	subs	r2, r3, #6
    ec04:	4253      	negs	r3, r2
    ec06:	4153      	adcs	r3, r2
    ec08:	4a04      	ldr	r2, [pc, #16]	; (ec1c <bt_smp_init+0x28>)
    ec0a:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
    ec0c:	f7fb f936 	bl	9e7c <bt_pub_key_gen>
	}

	return smp_self_test();
}
    ec10:	2000      	movs	r0, #0
    ec12:	bd08      	pop	{r3, pc}
    ec14:	20007600 	.word	0x20007600
    ec18:	2000789c 	.word	0x2000789c
    ec1c:	20002aa5 	.word	0x20002aa5

0000ec20 <bt_keys_get_addr>:
static uint32_t aging_counter_val;
static struct bt_keys *last_keys_updated;
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
    ec20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    ec22:	4c11      	ldr	r4, [pc, #68]	; (ec68 <bt_keys_get_addr+0x48>)
    ec24:	7823      	ldrb	r3, [r4, #0]
    ec26:	4283      	cmp	r3, r0
{
    ec28:	4605      	mov	r5, r0
    ec2a:	460e      	mov	r6, r1
    ec2c:	4627      	mov	r7, r4
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    ec2e:	d00b      	beq.n	ec48 <bt_keys_get_addr+0x28>
			return keys;
		}

		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
    ec30:	2400      	movs	r4, #0
	return memcmp(a, b, sizeof(*a));
    ec32:	480e      	ldr	r0, [pc, #56]	; (ec6c <bt_keys_get_addr+0x4c>)
    ec34:	9400      	str	r4, [sp, #0]
    ec36:	2207      	movs	r2, #7
    ec38:	4669      	mov	r1, sp
    ec3a:	f8cd 4003 	str.w	r4, [sp, #3]
    ec3e:	f01b fbc1 	bl	2a3c4 <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
    ec42:	b140      	cbz	r0, ec56 <bt_keys_get_addr+0x36>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
    ec44:	4620      	mov	r0, r4
    ec46:	e00c      	b.n	ec62 <bt_keys_get_addr+0x42>
    ec48:	2207      	movs	r2, #7
    ec4a:	1c60      	adds	r0, r4, #1
    ec4c:	f01b fbba 	bl	2a3c4 <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    ec50:	2800      	cmp	r0, #0
    ec52:	d1ed      	bne.n	ec30 <bt_keys_get_addr+0x10>
    ec54:	e7f6      	b.n	ec44 <bt_keys_get_addr+0x24>
		bt_addr_le_copy(&keys->addr, addr);
    ec56:	4805      	ldr	r0, [pc, #20]	; (ec6c <bt_keys_get_addr+0x4c>)
		keys->id = id;
    ec58:	703d      	strb	r5, [r7, #0]
		bt_addr_le_copy(&keys->addr, addr);
    ec5a:	4631      	mov	r1, r6
    ec5c:	f019 ff8c 	bl	28b78 <bt_addr_le_copy>
		return keys;
    ec60:	4801      	ldr	r0, [pc, #4]	; (ec68 <bt_keys_get_addr+0x48>)
}
    ec62:	b003      	add	sp, #12
    ec64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ec66:	bf00      	nop
    ec68:	20000ec8 	.word	0x20000ec8
    ec6c:	20000ec9 	.word	0x20000ec9

0000ec70 <bt_keys_foreach>:
	}
}

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
    ec70:	460b      	mov	r3, r1
    ec72:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
    ec74:	4a04      	ldr	r2, [pc, #16]	; (ec88 <bt_keys_foreach+0x18>)
{
    ec76:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
    ec78:	89d4      	ldrh	r4, [r2, #14]
    ec7a:	4204      	tst	r4, r0
    ec7c:	d002      	beq.n	ec84 <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
		}
	}
}
    ec7e:	bc10      	pop	{r4}
			func(&key_pool[i], data);
    ec80:	4610      	mov	r0, r2
    ec82:	4718      	bx	r3
}
    ec84:	bc10      	pop	{r4}
    ec86:	4770      	bx	lr
    ec88:	20000ec8 	.word	0x20000ec8

0000ec8c <bt_keys_find>:

struct bt_keys *bt_keys_find(int type, uint8_t id, const bt_addr_le_t *addr)
{
    ec8c:	b510      	push	{r4, lr}
	int i;

	BT_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
    ec8e:	4c09      	ldr	r4, [pc, #36]	; (ecb4 <bt_keys_find+0x28>)
{
    ec90:	460b      	mov	r3, r1
    ec92:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
    ec94:	89e2      	ldrh	r2, [r4, #14]
    ec96:	4202      	tst	r2, r0
    ec98:	d007      	beq.n	ecaa <bt_keys_find+0x1e>
    ec9a:	7822      	ldrb	r2, [r4, #0]
    ec9c:	429a      	cmp	r2, r3
    ec9e:	d104      	bne.n	ecaa <bt_keys_find+0x1e>
    eca0:	2207      	movs	r2, #7
    eca2:	1c60      	adds	r0, r4, #1
    eca4:	f01b fb8e 	bl	2a3c4 <memcmp>
    eca8:	b108      	cbz	r0, ecae <bt_keys_find+0x22>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
    ecaa:	2000      	movs	r0, #0
}
    ecac:	bd10      	pop	{r4, pc}
			return &key_pool[i];
    ecae:	4620      	mov	r0, r4
    ecb0:	e7fc      	b.n	ecac <bt_keys_find+0x20>
    ecb2:	bf00      	nop
    ecb4:	20000ec8 	.word	0x20000ec8

0000ecb8 <bt_keys_find_irk>:

	return keys;
}

struct bt_keys *bt_keys_find_irk(uint8_t id, const bt_addr_le_t *addr)
{
    ecb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
    ecba:	780b      	ldrb	r3, [r1, #0]
    ecbc:	2b01      	cmp	r3, #1
    ecbe:	4607      	mov	r7, r0
    ecc0:	460d      	mov	r5, r1
    ecc2:	d001      	beq.n	ecc8 <bt_keys_find_irk+0x10>
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
		return NULL;
    ecc4:	2000      	movs	r0, #0
	}

	BT_DBG("No IRK for %s", bt_addr_le_str(addr));

	return NULL;
}
    ecc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
    ecc8:	798b      	ldrb	r3, [r1, #6]
    ecca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    ecce:	2b40      	cmp	r3, #64	; 0x40
    ecd0:	d1f8      	bne.n	ecc4 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    ecd2:	4c13      	ldr	r4, [pc, #76]	; (ed20 <bt_keys_find_irk+0x68>)
    ecd4:	89e3      	ldrh	r3, [r4, #14]
    ecd6:	f013 0f02 	tst.w	r3, #2
    ecda:	4626      	mov	r6, r4
    ecdc:	d0f2      	beq.n	ecc4 <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
    ecde:	7833      	ldrb	r3, [r6, #0]
    ece0:	42bb      	cmp	r3, r7
    ece2:	d10b      	bne.n	ecfc <bt_keys_find_irk+0x44>
	return memcmp(a, b, sizeof(*a));
    ece4:	2206      	movs	r2, #6
    ece6:	f106 013a 	add.w	r1, r6, #58	; 0x3a
    ecea:	1c68      	adds	r0, r5, #1
    ecec:	f01b fb6a 	bl	2a3c4 <memcmp>
    ecf0:	b908      	cbnz	r0, ecf6 <bt_keys_find_irk+0x3e>
			return &key_pool[i];
    ecf2:	4620      	mov	r0, r4
    ecf4:	e7e7      	b.n	ecc6 <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    ecf6:	89f3      	ldrh	r3, [r6, #14]
    ecf8:	079b      	lsls	r3, r3, #30
    ecfa:	d5e3      	bpl.n	ecc4 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
    ecfc:	7833      	ldrb	r3, [r6, #0]
    ecfe:	42bb      	cmp	r3, r7
    ed00:	d1e0      	bne.n	ecc4 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
    ed02:	3501      	adds	r5, #1
    ed04:	4807      	ldr	r0, [pc, #28]	; (ed24 <bt_keys_find_irk+0x6c>)
    ed06:	4629      	mov	r1, r5
    ed08:	f017 ff1b 	bl	26b42 <bt_rpa_irk_matches>
    ed0c:	2800      	cmp	r0, #0
    ed0e:	d0d9      	beq.n	ecc4 <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
    ed10:	682b      	ldr	r3, [r5, #0]
    ed12:	4805      	ldr	r0, [pc, #20]	; (ed28 <bt_keys_find_irk+0x70>)
    ed14:	f8c6 303a 	str.w	r3, [r6, #58]	; 0x3a
    ed18:	88ab      	ldrh	r3, [r5, #4]
    ed1a:	8083      	strh	r3, [r0, #4]
			return &key_pool[i];
    ed1c:	383a      	subs	r0, #58	; 0x3a
}
    ed1e:	e7d2      	b.n	ecc6 <bt_keys_find_irk+0xe>
    ed20:	20000ec8 	.word	0x20000ec8
    ed24:	20000ef2 	.word	0x20000ef2
    ed28:	20000f02 	.word	0x20000f02

0000ed2c <bt_keys_find_addr>:

struct bt_keys *bt_keys_find_addr(uint8_t id, const bt_addr_le_t *addr)
{
    ed2c:	b510      	push	{r4, lr}
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if (key_pool[i].id == id &&
    ed2e:	4c06      	ldr	r4, [pc, #24]	; (ed48 <bt_keys_find_addr+0x1c>)
    ed30:	7823      	ldrb	r3, [r4, #0]
    ed32:	4283      	cmp	r3, r0
    ed34:	d104      	bne.n	ed40 <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
    ed36:	2207      	movs	r2, #7
    ed38:	1c60      	adds	r0, r4, #1
    ed3a:	f01b fb43 	bl	2a3c4 <memcmp>
    ed3e:	b108      	cbz	r0, ed44 <bt_keys_find_addr+0x18>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
    ed40:	2000      	movs	r0, #0
}
    ed42:	bd10      	pop	{r4, pc}
			return &key_pool[i];
    ed44:	4620      	mov	r0, r4
    ed46:	e7fc      	b.n	ed42 <bt_keys_find_addr+0x16>
    ed48:	20000ec8 	.word	0x20000ec8

0000ed4c <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
    ed4c:	b470      	push	{r4, r5, r6}
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    ed4e:	1e54      	subs	r4, r2, #1
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    ed50:	1dc5      	adds	r5, r0, #7
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    ed52:	b2a4      	uxth	r4, r4
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    ed54:	f025 0503 	bic.w	r5, r5, #3
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    ed58:	fb01 f604 	mul.w	r6, r1, r4
	*mem_head = mem_pool;
    ed5c:	6018      	str	r0, [r3, #0]
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    ed5e:	802a      	strh	r2, [r5, #0]
		     sizeof(mem_pool));
	while (mem_count--) {
    ed60:	1e93      	subs	r3, r2, #2
    ed62:	2200      	movs	r2, #0
    ed64:	5182      	str	r2, [r0, r6]
    ed66:	b17c      	cbz	r4, ed88 <mem_init+0x3c>
    ed68:	b29b      	uxth	r3, r3
    ed6a:	fb03 1401 	mla	r4, r3, r1, r1
    ed6e:	fb03 f201 	mul.w	r2, r3, r1
    ed72:	4420      	add	r0, r4
    ed74:	1b12      	subs	r2, r2, r4
    ed76:	f64f 74ff 	movw	r4, #65535	; 0xffff
    ed7a:	3b01      	subs	r3, #1
    ed7c:	b29b      	uxth	r3, r3
    ed7e:	42a3      	cmp	r3, r4
    ed80:	5080      	str	r0, [r0, r2]
    ed82:	eba0 0001 	sub.w	r0, r0, r1
    ed86:	d1f8      	bne.n	ed7a <mem_init+0x2e>
		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
    ed88:	bc70      	pop	{r4, r5, r6}
    ed8a:	4770      	bx	lr

0000ed8c <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    ed8c:	4603      	mov	r3, r0
	if (*mem_head) {
    ed8e:	6800      	ldr	r0, [r0, #0]
    ed90:	b180      	cbz	r0, edb4 <mem_acquire+0x28>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    ed92:	6802      	ldr	r2, [r0, #0]

		/* Store free mem_count after the list's next pointer */
		if (head) {
    ed94:	b162      	cbz	r2, edb0 <mem_acquire+0x24>
{
    ed96:	b410      	push	{r4}
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    ed98:	1dc4      	adds	r4, r0, #7
    ed9a:	f024 0403 	bic.w	r4, r4, #3
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    ed9e:	1dd1      	adds	r1, r2, #7
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    eda0:	8824      	ldrh	r4, [r4, #0]
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    eda2:	f021 0103 	bic.w	r1, r1, #3
		free_count--;
    eda6:	3c01      	subs	r4, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    eda8:	800c      	strh	r4, [r1, #0]
		*mem_head = head;
		return mem;
	}

	return NULL;
}
    edaa:	bc10      	pop	{r4}
		*mem_head = head;
    edac:	601a      	str	r2, [r3, #0]
}
    edae:	4770      	bx	lr
		*mem_head = head;
    edb0:	601a      	str	r2, [r3, #0]
		return mem;
    edb2:	4770      	bx	lr
}
    edb4:	4770      	bx	lr
    edb6:	bf00      	nop

0000edb8 <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    edb8:	b410      	push	{r4}
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    edba:	680b      	ldr	r3, [r1, #0]
{
    edbc:	b083      	sub	sp, #12
    edbe:	4602      	mov	r2, r0
    edc0:	9001      	str	r0, [sp, #4]
	if (*mem_head) {
    edc2:	b183      	cbz	r3, ede6 <mem_release+0x2e>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    edc4:	3307      	adds	r3, #7
    edc6:	f023 0303 	bic.w	r3, r3, #3
    edca:	8818      	ldrh	r0, [r3, #0]
    edcc:	3001      	adds	r0, #1
    edce:	b280      	uxth	r0, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    edd0:	4613      	mov	r3, r2
    edd2:	680c      	ldr	r4, [r1, #0]
    edd4:	f843 4b07 	str.w	r4, [r3], #7
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
    edd8:	f023 0303 	bic.w	r3, r3, #3
    eddc:	8018      	strh	r0, [r3, #0]

	*mem_head = mem;
    edde:	600a      	str	r2, [r1, #0]
}
    ede0:	b003      	add	sp, #12
    ede2:	bc10      	pop	{r4}
    ede4:	4770      	bx	lr
    ede6:	2001      	movs	r0, #1
    ede8:	e7f2      	b.n	edd0 <mem_release+0x18>
    edea:	bf00      	nop

0000edec <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
    edec:	fb02 0001 	mla	r0, r2, r1, r0
    edf0:	4770      	bx	lr
    edf2:	bf00      	nop

0000edf4 <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint16_t)((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size);
    edf4:	1a40      	subs	r0, r0, r1
    edf6:	b280      	uxth	r0, r0
}
    edf8:	fbb0 f0f2 	udiv	r0, r0, r2
    edfc:	4770      	bx	lr
    edfe:	bf00      	nop

0000ee00 <mem_rcopy>:
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
	src += len;
	while (len--) {
    ee00:	1e53      	subs	r3, r2, #1
	src += len;
    ee02:	4411      	add	r1, r2
	while (len--) {
    ee04:	b29b      	uxth	r3, r3
    ee06:	b142      	cbz	r2, ee1a <mem_rcopy+0x1a>
    ee08:	43db      	mvns	r3, r3
    ee0a:	18ca      	adds	r2, r1, r3
    ee0c:	3801      	subs	r0, #1
		*dst++ = *--src;
    ee0e:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    ee12:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (len--) {
    ee16:	4291      	cmp	r1, r2
    ee18:	d1f9      	bne.n	ee0e <mem_rcopy+0xe>
	}
}
    ee1a:	4770      	bx	lr

0000ee1c <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
    ee1c:	4401      	add	r1, r0
    ee1e:	e002      	b.n	ee26 <mem_nz+0xa>
		if (*src++) {
    ee20:	f810 3b01 	ldrb.w	r3, [r0], #1
    ee24:	b91b      	cbnz	r3, ee2e <mem_nz+0x12>
	while (len--) {
    ee26:	4288      	cmp	r0, r1
    ee28:	d1fa      	bne.n	ee20 <mem_nz+0x4>
			return 1;
		}
	}

	return 0;
    ee2a:	2000      	movs	r0, #0
    ee2c:	4770      	bx	lr
			return 1;
    ee2e:	2001      	movs	r0, #1
}
    ee30:	4770      	bx	lr
    ee32:	bf00      	nop

0000ee34 <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
    ee34:	6010      	str	r0, [r2, #0]
    ee36:	6008      	str	r0, [r1, #0]

	return link;
}
    ee38:	4770      	bx	lr
    ee3a:	bf00      	nop

0000ee3c <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
    ee3c:	680a      	ldr	r2, [r1, #0]
{
    ee3e:	4603      	mov	r3, r0
	if (*head != *tail) {
    ee40:	6800      	ldr	r0, [r0, #0]
    ee42:	4290      	cmp	r0, r2
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
    ee44:	bf05      	ittet	eq
    ee46:	2200      	moveq	r2, #0
    ee48:	600a      	streq	r2, [r1, #0]
		return NULL;
    ee4a:	2000      	movne	r0, #0
	*head = *tail = NULL;
    ee4c:	601a      	streq	r2, [r3, #0]

	return old_head;
}
    ee4e:	4770      	bx	lr

0000ee50 <memq_enqueue>:
 * @param mem[in]      The memory payload to be enqueued. Pointed to by old tail
 * @param tail[in,out] Tail of queue. Will be updated to point to link
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
    ee50:	b410      	push	{r4}
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
    ee52:	6814      	ldr	r4, [r2, #0]
    ee54:	6020      	str	r0, [r4, #0]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
    ee56:	6814      	ldr	r4, [r2, #0]
    ee58:	6061      	str	r1, [r4, #4]
	 */
	cpu_dmb(); /* Ensure data accesses are synchronized */
	*tail = link; /* Commit: enqueue of memq node */

	return link;
}
    ee5a:	bc10      	pop	{r4}
	*tail = link; /* Commit: enqueue of memq node */
    ee5c:	6010      	str	r0, [r2, #0]
}
    ee5e:	4770      	bx	lr

0000ee60 <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
    ee60:	4288      	cmp	r0, r1
    ee62:	d003      	beq.n	ee6c <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
    ee64:	b11a      	cbz	r2, ee6e <memq_peek+0xe>
		*mem = head->mem;
    ee66:	6843      	ldr	r3, [r0, #4]
    ee68:	6013      	str	r3, [r2, #0]
    ee6a:	4770      	bx	lr
		return NULL;
    ee6c:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
    ee6e:	4770      	bx	lr

0000ee70 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
    ee70:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    ee72:	4283      	cmp	r3, r0
    ee74:	d009      	beq.n	ee8a <memq_dequeue+0x1a>
	if (mem) {
    ee76:	b12a      	cbz	r2, ee84 <memq_dequeue+0x14>
		*mem = head->mem;
    ee78:	6858      	ldr	r0, [r3, #4]
    ee7a:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
    ee7c:	681a      	ldr	r2, [r3, #0]
    ee7e:	600a      	str	r2, [r1, #0]

	return old_head;
}
    ee80:	4618      	mov	r0, r3
    ee82:	4770      	bx	lr
	if (old_head == NULL) {
    ee84:	2b00      	cmp	r3, #0
    ee86:	d1f9      	bne.n	ee7c <memq_dequeue+0xc>
    ee88:	e7fa      	b.n	ee80 <memq_dequeue+0x10>
		return NULL; /* queue is empty */
    ee8a:	2300      	movs	r3, #0
    ee8c:	e7f8      	b.n	ee80 <memq_dequeue+0x10>
    ee8e:	bf00      	nop

0000ee90 <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
    ee90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ee94:	f8df 8034 	ldr.w	r8, [pc, #52]	; eecc <mayfly_init+0x3c>
    ee98:	4e0b      	ldr	r6, [pc, #44]	; (eec8 <mayfly_init+0x38>)
    ee9a:	270c      	movs	r7, #12
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
    ee9c:	f106 0430 	add.w	r4, r6, #48	; 0x30
{
    eea0:	4645      	mov	r5, r8
			memq_init(&mfl[callee_id][caller_id],
    eea2:	1d22      	adds	r2, r4, #4
    eea4:	4621      	mov	r1, r4
    eea6:	4628      	mov	r0, r5
    eea8:	3c0c      	subs	r4, #12
    eeaa:	f7ff ffc3 	bl	ee34 <memq_init>
		while (caller_id--) {
    eeae:	42b4      	cmp	r4, r6
    eeb0:	f1a5 0508 	sub.w	r5, r5, #8
    eeb4:	d1f5      	bne.n	eea2 <mayfly_init+0x12>
	while (callee_id--) {
    eeb6:	3f04      	subs	r7, #4
    eeb8:	1d3b      	adds	r3, r7, #4
    eeba:	f1a8 0820 	sub.w	r8, r8, #32
    eebe:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
    eec2:	d1eb      	bne.n	ee9c <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    eec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eec8:	2000102c 	.word	0x2000102c
    eecc:	20000f9c 	.word	0x20000f9c

0000eed0 <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
    eed0:	b430      	push	{r4, r5}
    eed2:	4603      	mov	r3, r0
    eed4:	460c      	mov	r4, r1
	if (enable) {
    eed6:	b19a      	cbz	r2, ef00 <mayfly_enable+0x30>
		if (mft[callee_id][caller_id].enable_req ==
    eed8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    eedc:	0108      	lsls	r0, r1, #4
    eede:	4d14      	ldr	r5, [pc, #80]	; (ef30 <mayfly_enable+0x60>)
    eee0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    eee4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    eee8:	4429      	add	r1, r5
    eeea:	7a48      	ldrb	r0, [r1, #9]
    eeec:	7a0d      	ldrb	r5, [r1, #8]
    eeee:	42a8      	cmp	r0, r5
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    eef0:	bf04      	itt	eq
    eef2:	3001      	addeq	r0, #1
    eef4:	7208      	strbeq	r0, [r1, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    eef6:	4621      	mov	r1, r4
    eef8:	4618      	mov	r0, r3

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
    eefa:	bc30      	pop	{r4, r5}
		mayfly_enable_cb(caller_id, callee_id, enable);
    eefc:	f00d b9de 	b.w	1c2bc <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    ef00:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    ef04:	4d0a      	ldr	r5, [pc, #40]	; (ef30 <mayfly_enable+0x60>)
    ef06:	0112      	lsls	r2, r2, #4
    ef08:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    ef0c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    ef10:	442b      	add	r3, r5
    ef12:	7a9d      	ldrb	r5, [r3, #10]
    ef14:	7ada      	ldrb	r2, [r3, #11]
    ef16:	42aa      	cmp	r2, r5
    ef18:	d001      	beq.n	ef1e <mayfly_enable+0x4e>
}
    ef1a:	bc30      	pop	{r4, r5}
    ef1c:	4770      	bx	lr
			mfp[callee_id] = 1U;
    ef1e:	4d05      	ldr	r5, [pc, #20]	; (ef34 <mayfly_enable+0x64>)
			mft[callee_id][caller_id].disable_req++;
    ef20:	3201      	adds	r2, #1
    ef22:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
    ef24:	2301      	movs	r3, #1
    ef26:	546b      	strb	r3, [r5, r1]
}
    ef28:	bc30      	pop	{r4, r5}
			mayfly_pend(caller_id, callee_id);
    ef2a:	f00d ba1d 	b.w	1c368 <mayfly_pend>
    ef2e:	bf00      	nop
    ef30:	20000fa8 	.word	0x20000fa8
    ef34:	20000fa4 	.word	0x20000fa4

0000ef38 <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
    ef38:	b570      	push	{r4, r5, r6, lr}
    ef3a:	461c      	mov	r4, r3
    ef3c:	4606      	mov	r6, r0
    ef3e:	460d      	mov	r5, r1
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    ef40:	b322      	cbz	r2, ef8c <mayfly_enqueue+0x54>
    ef42:	7863      	ldrb	r3, [r4, #1]

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    ef44:	7822      	ldrb	r2, [r4, #0]
    ef46:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
    ef48:	f012 0203 	ands.w	r2, r2, #3
    ef4c:	d005      	beq.n	ef5a <mayfly_enqueue+0x22>
		if (chain) {
			if (state != 1U) {
    ef4e:	2a01      	cmp	r2, #1
    ef50:	d040      	beq.n	efd4 <mayfly_enqueue+0x9c>
				/* mark as ready in queue */
				m->_req = ack + 1;
    ef52:	3301      	adds	r3, #1
    ef54:	b2db      	uxtb	r3, r3
    ef56:	7023      	strb	r3, [r4, #0]

				goto mayfly_enqueue_pend;
    ef58:	e00f      	b.n	ef7a <mayfly_enqueue+0x42>
		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    ef5a:	2230      	movs	r2, #48	; 0x30
    ef5c:	2104      	movs	r1, #4
    ef5e:	fb12 1105 	smlabb	r1, r2, r5, r1
    ef62:	220c      	movs	r2, #12
    ef64:	fb12 1206 	smlabb	r2, r2, r6, r1
	m->_req = ack + 1;
    ef68:	3301      	adds	r3, #1
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    ef6a:	491b      	ldr	r1, [pc, #108]	; (efd8 <mayfly_enqueue+0xa0>)
    ef6c:	6860      	ldr	r0, [r4, #4]
	m->_req = ack + 1;
    ef6e:	b2db      	uxtb	r3, r3
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    ef70:	440a      	add	r2, r1
	m->_req = ack + 1;
    ef72:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    ef74:	4621      	mov	r1, r4
    ef76:	f7ff ff6b 	bl	ee50 <memq_enqueue>

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
    ef7a:	4b18      	ldr	r3, [pc, #96]	; (efdc <mayfly_enqueue+0xa4>)

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    ef7c:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
    ef7e:	2201      	movs	r2, #1
	mayfly_pend(caller_id, callee_id);
    ef80:	4629      	mov	r1, r5
	mfp[callee_id] = 1U;
    ef82:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
    ef84:	f00d f9f0 	bl	1c368 <mayfly_pend>

	return 0;
    ef88:	2000      	movs	r0, #0
}
    ef8a:	bd70      	pop	{r4, r5, r6, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    ef8c:	f00d f9d6 	bl	1c33c <mayfly_prio_is_equal>
    ef90:	2800      	cmp	r0, #0
    ef92:	d0d6      	beq.n	ef42 <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    ef94:	4629      	mov	r1, r5
    ef96:	4630      	mov	r0, r6
    ef98:	f00d f9b0 	bl	1c2fc <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    ef9c:	2800      	cmp	r0, #0
    ef9e:	d0d0      	beq.n	ef42 <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    efa0:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    efa4:	0111      	lsls	r1, r2, #4
    efa6:	480c      	ldr	r0, [pc, #48]	; (efd8 <mayfly_enqueue+0xa0>)
    efa8:	7863      	ldrb	r3, [r4, #1]
    efaa:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    efae:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    efb2:	4402      	add	r2, r0
		!mayfly_is_enabled(caller_id, callee_id) ||
    efb4:	7a91      	ldrb	r1, [r2, #10]
    efb6:	7ad2      	ldrb	r2, [r2, #11]
    efb8:	4291      	cmp	r1, r2
    efba:	d1c3      	bne.n	ef44 <mayfly_enqueue+0xc>
	state = (m->_req - ack) & 0x03;
    efbc:	7822      	ldrb	r2, [r4, #0]
    efbe:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
    efc0:	0792      	lsls	r2, r2, #30
    efc2:	d002      	beq.n	efca <mayfly_enqueue+0x92>
		m->_req = ack + 2;
    efc4:	3302      	adds	r3, #2
    efc6:	b2db      	uxtb	r3, r3
    efc8:	7023      	strb	r3, [r4, #0]
		m->fp(m->param);
    efca:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
    efce:	4798      	blx	r3
		return 0;
    efd0:	2000      	movs	r0, #0
}
    efd2:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
    efd4:	4610      	mov	r0, r2
}
    efd6:	bd70      	pop	{r4, r5, r6, pc}
    efd8:	20000fa8 	.word	0x20000fa8
    efdc:	20000fa4 	.word	0x20000fa4

0000efe0 <mayfly_run>:
{
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
    efe0:	494e      	ldr	r1, [pc, #312]	; (f11c <mayfly_run+0x13c>)
    efe2:	5c0b      	ldrb	r3, [r1, r0]
    efe4:	2b00      	cmp	r3, #0
    efe6:	f000 8098 	beq.w	f11a <mayfly_run+0x13a>
{
    efea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    efee:	4b4c      	ldr	r3, [pc, #304]	; (f120 <mayfly_run+0x140>)
    eff0:	f04f 0b3c 	mov.w	fp, #60	; 0x3c
{
    eff4:	b087      	sub	sp, #28
		return;
	}
	mfp[callee_id] = 0U;
    eff6:	2200      	movs	r2, #0
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    eff8:	fb0b 3b00 	mla	fp, fp, r0, r3
	mfp[callee_id] = 0U;
    effc:	540a      	strb	r2, [r1, r0]

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
    effe:	eb00 0740 	add.w	r7, r0, r0, lsl #1
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    f002:	f10b 0104 	add.w	r1, fp, #4
	uint8_t enable = 0U;
    f006:	9203      	str	r2, [sp, #12]
    f008:	eb03 1707 	add.w	r7, r3, r7, lsl #4
	uint8_t disable = 0U;
    f00c:	9201      	str	r2, [sp, #4]
	while (caller_id--) {
    f00e:	f04f 0903 	mov.w	r9, #3
    f012:	4688      	mov	r8, r1
    f014:	9002      	str	r0, [sp, #8]
		memq_link_t *link;
		struct mayfly *m = 0;
    f016:	2300      	movs	r3, #0

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    f018:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
    f01c:	aa05      	add	r2, sp, #20
		struct mayfly *m = 0;
    f01e:	9305      	str	r3, [sp, #20]
		link = memq_peek(mft[callee_id][caller_id].head,
    f020:	f7ff ff1e 	bl	ee60 <memq_peek>
				 mft[callee_id][caller_id].tail,
				 (void **)&m);
		while (link) {
    f024:	f107 0624 	add.w	r6, r7, #36	; 0x24
    f028:	4683      	mov	fp, r0
    f02a:	2800      	cmp	r0, #0
    f02c:	d034      	beq.n	f098 <mayfly_run+0xb8>
#if defined(MAYFLY_UT)
			_state = 0U;
#endif /* MAYFLY_UT */

			/* execute work if ready */
			state = (m->_req - m->_ack) & 0x03;
    f02e:	9c05      	ldr	r4, [sp, #20]
    f030:	7825      	ldrb	r5, [r4, #0]
    f032:	7863      	ldrb	r3, [r4, #1]
    f034:	1aed      	subs	r5, r5, r3
    f036:	f005 0503 	and.w	r5, r5, #3
			if (state == 1U) {
    f03a:	2d01      	cmp	r5, #1
    f03c:	d106      	bne.n	f04c <mayfly_run+0x6c>
#if defined(MAYFLY_UT)
				_state = 1U;
#endif /* MAYFLY_UT */

				/* mark mayfly as ran */
				m->_ack--;
    f03e:	3b01      	subs	r3, #1
    f040:	7063      	strb	r3, [r4, #1]

				/* call the mayfly function */
				m->fp(m->param);
    f042:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
    f046:	4798      	blx	r3
    f048:	9c05      	ldr	r4, [sp, #20]
    f04a:	7863      	ldrb	r3, [r4, #1]
	req = m->_req;
    f04c:	f894 c000 	ldrb.w	ip, [r4]
    f050:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	if (((req - m->_ack) & 0x03) != 1U) {
    f052:	ebac 0303 	sub.w	r3, ip, r3
    f056:	f003 0303 	and.w	r3, r3, #3
    f05a:	2b01      	cmp	r3, #1
		memq_dequeue(mft[callee_id][caller_id].tail,
    f05c:	f04f 0200 	mov.w	r2, #0
    f060:	4631      	mov	r1, r6
	req = m->_req;
    f062:	fa5f fa8c 	uxtb.w	sl, ip
	if (((req - m->_ack) & 0x03) != 1U) {
    f066:	d00d      	beq.n	f084 <mayfly_run+0xa4>
		memq_dequeue(mft[callee_id][caller_id].tail,
    f068:	f7ff ff02 	bl	ee70 <memq_dequeue>
		ack = m->_ack;
    f06c:	7862      	ldrb	r2, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    f06e:	7823      	ldrb	r3, [r4, #0]
		m->_link = link;
    f070:	f8c4 b004 	str.w	fp, [r4, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
    f074:	1a9b      	subs	r3, r3, r2
    f076:	f003 0303 	and.w	r3, r3, #3
    f07a:	2b01      	cmp	r3, #1
		m->_ack = req;
    f07c:	f884 a001 	strb.w	sl, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    f080:	d044      	beq.n	f10c <mayfly_run+0x12c>
    f082:	6ab8      	ldr	r0, [r7, #40]	; 0x28

			/* dequeue if not re-pended */
			dequeue(callee_id, caller_id, link, m);

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].head,
    f084:	4601      	mov	r1, r0
    f086:	aa05      	add	r2, sp, #20
    f088:	6a78      	ldr	r0, [r7, #36]	; 0x24
    f08a:	f7ff fee9 	bl	ee60 <memq_peek>
 */
#if defined(CONFIG_BT_MAYFLY_YIELD_AFTER_CALL)
			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1U) {
    f08e:	2d01      	cmp	r5, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    f090:	4683      	mov	fp, r0
			if (state == 1U) {
    f092:	d029      	beq.n	f0e8 <mayfly_run+0x108>
		while (link) {
    f094:	2800      	cmp	r0, #0
    f096:	d1ca      	bne.n	f02e <mayfly_run+0x4e>
				}
			}
#endif
		}

		if (mft[callee_id][caller_id].disable_req !=
    f098:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    f09c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
    f0a0:	429a      	cmp	r2, r3
    f0a2:	d003      	beq.n	f0ac <mayfly_run+0xcc>
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1U;

			mft[callee_id][caller_id].disable_ack =
    f0a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			disable = 1U;
    f0a8:	2301      	movs	r3, #1
    f0aa:	9301      	str	r3, [sp, #4]
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
    f0ac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    f0b0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
    f0b4:	429a      	cmp	r2, r3
    f0b6:	d003      	beq.n	f0c0 <mayfly_run+0xe0>
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1U;

			mft[callee_id][caller_id].enable_ack =
    f0b8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			enable = 1U;
    f0bc:	2301      	movs	r3, #1
    f0be:	9303      	str	r3, [sp, #12]
	while (caller_id--) {
    f0c0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    f0c4:	fa5f f989 	uxtb.w	r9, r9
    f0c8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    f0cc:	f1a7 070c 	sub.w	r7, r7, #12
    f0d0:	d1a1      	bne.n	f016 <mayfly_run+0x36>
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    f0d2:	e9dd 3a01 	ldrd	r3, sl, [sp, #4]
    f0d6:	b1b3      	cbz	r3, f106 <mayfly_run+0x126>
    f0d8:	9b03      	ldr	r3, [sp, #12]
    f0da:	b9a3      	cbnz	r3, f106 <mayfly_run+0x126>
		mayfly_enable_cb(callee_id, callee_id, 0);
    f0dc:	461a      	mov	r2, r3
    f0de:	4651      	mov	r1, sl
    f0e0:	4650      	mov	r0, sl
    f0e2:	f00d f8eb 	bl	1c2bc <mayfly_enable_cb>
    f0e6:	e00e      	b.n	f106 <mayfly_run+0x126>
				if (caller_id || link) {
    f0e8:	f1b9 0f00 	cmp.w	r9, #0
    f0ec:	d101      	bne.n	f0f2 <mayfly_run+0x112>
    f0ee:	2800      	cmp	r0, #0
    f0f0:	d0d2      	beq.n	f098 <mayfly_run+0xb8>
    f0f2:	f8dd a008 	ldr.w	sl, [sp, #8]
					mfp[callee_id] = 1U;
    f0f6:	4a09      	ldr	r2, [pc, #36]	; (f11c <mayfly_run+0x13c>)
    f0f8:	2301      	movs	r3, #1
					mayfly_pend(callee_id, callee_id);
    f0fa:	4651      	mov	r1, sl
    f0fc:	4650      	mov	r0, sl
					mfp[callee_id] = 1U;
    f0fe:	f802 300a 	strb.w	r3, [r2, sl]
					mayfly_pend(callee_id, callee_id);
    f102:	f00d f931 	bl	1c368 <mayfly_pend>
	}
}
    f106:	b007      	add	sp, #28
    f108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			m->_ack = ack;
    f10c:	7062      	strb	r2, [r4, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    f10e:	4621      	mov	r1, r4
    f110:	4658      	mov	r0, fp
    f112:	4642      	mov	r2, r8
    f114:	f7ff fe9c 	bl	ee50 <memq_enqueue>
    f118:	e7b3      	b.n	f082 <mayfly_run+0xa2>
    f11a:	4770      	bx	lr
    f11c:	20000fa4 	.word	0x20000fa4
    f120:	20000fa8 	.word	0x20000fa8

0000f124 <util_ones_count_get>:
 */
uint8_t util_ones_count_get(uint8_t *octets, uint8_t octets_len)
{
	uint8_t one_count = 0U;

	while (octets_len--) {
    f124:	b1a1      	cbz	r1, f150 <util_ones_count_get+0x2c>
    f126:	1e4b      	subs	r3, r1, #1
    f128:	b2db      	uxtb	r3, r3
{
    f12a:	b410      	push	{r4}
    f12c:	1e41      	subs	r1, r0, #1
    f12e:	18c4      	adds	r4, r0, r3
	uint8_t one_count = 0U;
    f130:	2000      	movs	r0, #0
		uint8_t bite;

		bite = *octets;
    f132:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		while (bite) {
    f136:	b13b      	cbz	r3, f148 <util_ones_count_get+0x24>
			bite &= (bite - 1);
    f138:	b25b      	sxtb	r3, r3
    f13a:	1e5a      	subs	r2, r3, #1
    f13c:	4013      	ands	r3, r2
			one_count++;
    f13e:	3001      	adds	r0, #1
		while (bite) {
    f140:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
			one_count++;
    f144:	b2c0      	uxtb	r0, r0
		while (bite) {
    f146:	d1f7      	bne.n	f138 <util_ones_count_get+0x14>
	while (octets_len--) {
    f148:	42a1      	cmp	r1, r4
    f14a:	d1f2      	bne.n	f132 <util_ones_count_get+0xe>
		}
		octets++;
	}

	return one_count;
}
    f14c:	bc10      	pop	{r4}
    f14e:	4770      	bx	lr
	uint8_t one_count = 0U;
    f150:	4608      	mov	r0, r1
}
    f152:	4770      	bx	lr

0000f154 <ticker_worker>:
 *
 * @param param Pointer to ticker instance
 *
 */
void ticker_worker(void *param)
{
    f154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t ticks_expired;
	uint8_t ticker_id_head;

	/* Defer worker if job running */
	instance->worker_trigger = 1U;
	if (instance->job_guard) {
    f158:	7f82      	ldrb	r2, [r0, #30]
{
    f15a:	b08f      	sub	sp, #60	; 0x3c
	instance->worker_trigger = 1U;
    f15c:	2301      	movs	r3, #1
	if (instance->job_guard) {
    f15e:	9206      	str	r2, [sp, #24]
	instance->worker_trigger = 1U;
    f160:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    f162:	2a00      	cmp	r2, #0
    f164:	d15b      	bne.n	f21e <ticker_worker+0xca>
		return;
	}

	/* If no tickers queued (active), do nothing */
	if (instance->ticker_id_head == TICKER_NULL) {
    f166:	7f43      	ldrb	r3, [r0, #29]
    f168:	2bff      	cmp	r3, #255	; 0xff
    f16a:	4681      	mov	r9, r0
    f16c:	d056      	beq.n	f21c <ticker_worker+0xc8>
		instance->worker_trigger = 0U;
		return;
	}

	/* Get ticks elapsed since last job execution */
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    f16e:	f00c fc0d 	bl	1b98c <cntr_cnt_get>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    f172:	f8d9 2014 	ldr.w	r2, [r9, #20]
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    f176:	f899 301c 	ldrb.w	r3, [r9, #28]
	ticker_id_head = instance->ticker_id_head;
    f17a:	f899 601d 	ldrb.w	r6, [r9, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    f17e:	1a80      	subs	r0, r0, r2
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    f180:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    f182:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    f186:	f000 8140 	beq.w	f40a <ticker_worker+0x2b6>
		if (instance->ticks_slot_previous > ticks_elapsed) {
    f18a:	f8d9 3018 	ldr.w	r3, [r9, #24]
	uint8_t slot_reserved = 0;
    f18e:	42bb      	cmp	r3, r7
    f190:	bf94      	ite	ls
    f192:	2300      	movls	r3, #0
    f194:	2301      	movhi	r3, #1
    f196:	9303      	str	r3, [sp, #12]
	while (ticker_id_head != TICKER_NULL) {
    f198:	2eff      	cmp	r6, #255	; 0xff
	node = &instance->nodes[0];
    f19a:	f8d9 b000 	ldr.w	fp, [r9]
	ticks_expired = 0U;
    f19e:	f04f 0800 	mov.w	r8, #0
	while (ticker_id_head != TICKER_NULL) {
    f1a2:	d046      	beq.n	f232 <ticker_worker+0xde>
			must_expire_skip = 1U;
    f1a4:	46c2      	mov	sl, r8
    f1a6:	f8cd 9010 	str.w	r9, [sp, #16]
		ticker = &node[ticker_id_head];
    f1aa:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    f1ae:	eb0b 1406 	add.w	r4, fp, r6, lsl #4
    f1b2:	0136      	lsls	r6, r6, #4
		ticks_to_expire = ticker->ticks_to_expire;
    f1b4:	68a1      	ldr	r1, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    f1b6:	42b9      	cmp	r1, r7
    f1b8:	d838      	bhi.n	f22c <ticker_worker+0xd8>
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    f1ba:	78a2      	ldrb	r2, [r4, #2]
    f1bc:	7863      	ldrb	r3, [r4, #1]
		ticker_id_head = ticker->next;
    f1be:	f81b 6006 	ldrb.w	r6, [fp, r6]
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    f1c2:	1a9b      	subs	r3, r3, r2
    f1c4:	b2db      	uxtb	r3, r3
    f1c6:	2b01      	cmp	r3, #1
		ticks_elapsed -= ticks_to_expire;
    f1c8:	eba7 0701 	sub.w	r7, r7, r1
		ticks_expired += ticks_to_expire;
    f1cc:	448a      	add	sl, r1
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    f1ce:	d12b      	bne.n	f228 <ticker_worker+0xd4>
		if (ticker->ticks_slot != 0U &&
    f1d0:	69a5      	ldr	r5, [r4, #24]
    f1d2:	2d00      	cmp	r5, #0
    f1d4:	d055      	beq.n	f282 <ticker_worker+0x12e>
    f1d6:	9b03      	ldr	r3, [sp, #12]
    f1d8:	2b00      	cmp	r3, #0
    f1da:	f000 8092 	beq.w	f302 <ticker_worker+0x1ae>
    f1de:	8be3      	ldrh	r3, [r4, #30]
    f1e0:	9305      	str	r3, [sp, #20]
			struct ticker_ext *ext_data = ticker->ext_data;
    f1e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			if (ext_data &&
    f1e4:	b13b      	cbz	r3, f1f6 <ticker_worker+0xa2>
    f1e6:	6819      	ldr	r1, [r3, #0]
    f1e8:	b119      	cbz	r1, f1f2 <ticker_worker+0x9e>
			    ext_data->ticks_slot_window != 0U &&
    f1ea:	7a19      	ldrb	r1, [r3, #8]
    f1ec:	2900      	cmp	r1, #0
    f1ee:	f000 80fa 	beq.w	f3e6 <ticker_worker+0x292>
				ext_data->reschedule_state =
    f1f2:	2100      	movs	r1, #0
    f1f4:	7219      	strb	r1, [r3, #8]
			ticker->lazy_current++;
    f1f6:	9905      	ldr	r1, [sp, #20]
			if ((ticker->must_expire == 0U) ||
    f1f8:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
			ticker->lazy_current++;
    f1fc:	3101      	adds	r1, #1
    f1fe:	b289      	uxth	r1, r1
    f200:	83e1      	strh	r1, [r4, #30]
			if ((ticker->must_expire == 0U) ||
    f202:	b178      	cbz	r0, f224 <ticker_worker+0xd0>
    f204:	8ba0      	ldrh	r0, [r4, #28]
    f206:	4288      	cmp	r0, r1
    f208:	d20c      	bcs.n	f224 <ticker_worker+0xd0>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
    f20a:	2b00      	cmp	r3, #0
    f20c:	f000 8100 	beq.w	f410 <ticker_worker+0x2bc>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
    f210:	7a19      	ldrb	r1, [r3, #8]
    f212:	2901      	cmp	r1, #1
    f214:	d006      	beq.n	f224 <ticker_worker+0xd0>
			must_expire_skip = 1U;
    f216:	f04f 0e01 	mov.w	lr, #1
    f21a:	e036      	b.n	f28a <ticker_worker+0x136>
		instance->worker_trigger = 0U;
    f21c:	77c2      	strb	r2, [r0, #31]
}
    f21e:	b00f      	add	sp, #60	; 0x3c
    f220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ticker->ack--;
    f224:	3a01      	subs	r2, #1
    f226:	70a2      	strb	r2, [r4, #2]
	while (ticker_id_head != TICKER_NULL) {
    f228:	2eff      	cmp	r6, #255	; 0xff
    f22a:	d1be      	bne.n	f1aa <ticker_worker+0x56>
    f22c:	f8dd 9010 	ldr.w	r9, [sp, #16]
    f230:	46d0      	mov	r8, sl
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    f232:	f899 300b 	ldrb.w	r3, [r9, #11]
    f236:	f899 200a 	ldrb.w	r2, [r9, #10]
    f23a:	429a      	cmp	r2, r3
    f23c:	d10a      	bne.n	f254 <ticker_worker+0x100>
	uint8_t idx = *ticks_elapsed_index + 1;
    f23e:	3201      	adds	r2, #1
    f240:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
    f242:	2a02      	cmp	r2, #2
    f244:	bf1c      	itt	ne
    f246:	4613      	movne	r3, r2
    f248:	9306      	strne	r3, [sp, #24]
	*ticks_elapsed_index = idx;
    f24a:	9a06      	ldr	r2, [sp, #24]
    f24c:	f889 200b 	strb.w	r2, [r9, #11]
    f250:	bf08      	it	eq
    f252:	2300      	moveq	r3, #0
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    f254:	eb09 0383 	add.w	r3, r9, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    f258:	f8d9 4024 	ldr.w	r4, [r9, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    f25c:	f8c3 800c 	str.w	r8, [r3, #12]
	instance->worker_trigger = 0U;
    f260:	2200      	movs	r2, #0
    f262:	f889 201f 	strb.w	r2, [r9, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    f266:	464b      	mov	r3, r9
    f268:	2201      	movs	r2, #1
    f26a:	2104      	movs	r1, #4
    f26c:	2003      	movs	r0, #3
    f26e:	46a4      	mov	ip, r4
}
    f270:	b00f      	add	sp, #60	; 0x3c
    f272:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    f276:	4760      	bx	ip
    f278:	e9dd 7a0b 	ldrd	r7, sl, [sp, #44]	; 0x2c
    f27c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f27e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    f280:	4644      	mov	r4, r8
		if (ticker->ext_data) {
    f282:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    f284:	b1f3      	cbz	r3, f2c4 <ticker_worker+0x170>
    f286:	f04f 0e00 	mov.w	lr, #0
			ticker->ext_data->ticks_drift = 0U;
    f28a:	2100      	movs	r1, #0
			ticker->ext_data->reschedule_state =
    f28c:	7219      	strb	r1, [r3, #8]
		if (ticker->timeout_func) {
    f28e:	68e5      	ldr	r5, [r4, #12]
			ticker->ext_data->ticks_drift = 0U;
    f290:	6059      	str	r1, [r3, #4]
		ticker->ack--;
    f292:	3a01      	subs	r2, #1
    f294:	70a2      	strb	r2, [r4, #2]
		if (ticker->timeout_func) {
    f296:	2d00      	cmp	r5, #0
    f298:	d0c6      	beq.n	f228 <ticker_worker+0xd4>
					   ticks_expired -
    f29a:	9b04      	ldr	r3, [sp, #16]
    f29c:	6962      	ldr	r2, [r4, #20]
    f29e:	6958      	ldr	r0, [r3, #20]
			ticker->timeout_func(ticks_at_expire,
    f2a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
    f2a2:	f894 c003 	ldrb.w	ip, [r4, #3]
    f2a6:	6923      	ldr	r3, [r4, #16]
					   ticks_expired -
    f2a8:	ebaa 0202 	sub.w	r2, sl, r2
    f2ac:	4410      	add	r0, r2
			ticks_at_expire = (instance->ticks_current +
    f2ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
    f2b2:	f1be 0f00 	cmp.w	lr, #0
    f2b6:	d016      	beq.n	f2e6 <ticker_worker+0x192>
    f2b8:	9300      	str	r3, [sp, #0]
    f2ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f2be:	4663      	mov	r3, ip
    f2c0:	47a8      	blx	r5
			if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    f2c2:	e7b1      	b.n	f228 <ticker_worker+0xd4>
		if (ticker->timeout_func) {
    f2c4:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
    f2c6:	3a01      	subs	r2, #1
    f2c8:	70a2      	strb	r2, [r4, #2]
		if (ticker->timeout_func) {
    f2ca:	2d00      	cmp	r5, #0
    f2cc:	d0ac      	beq.n	f228 <ticker_worker+0xd4>
					   ticks_expired -
    f2ce:	9b04      	ldr	r3, [sp, #16]
    f2d0:	6962      	ldr	r2, [r4, #20]
    f2d2:	6958      	ldr	r0, [r3, #20]
			ticker->timeout_func(ticks_at_expire,
    f2d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
    f2d6:	f894 c003 	ldrb.w	ip, [r4, #3]
    f2da:	6923      	ldr	r3, [r4, #16]
					   ticks_expired -
    f2dc:	ebaa 0202 	sub.w	r2, sl, r2
    f2e0:	4410      	add	r0, r2
			ticks_at_expire = (instance->ticks_current +
    f2e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
    f2e6:	8be2      	ldrh	r2, [r4, #30]
    f2e8:	9300      	str	r3, [sp, #0]
    f2ea:	4663      	mov	r3, ip
    f2ec:	47a8      	blx	r5
				if (ticker->ticks_slot != 0U) {
    f2ee:	69a2      	ldr	r2, [r4, #24]
				ticker->lazy_current = 0U;
    f2f0:	2300      	movs	r3, #0
					slot_reserved = 1U;
    f2f2:	429a      	cmp	r2, r3
    f2f4:	9a03      	ldr	r2, [sp, #12]
				ticker->lazy_current = 0U;
    f2f6:	83e3      	strh	r3, [r4, #30]
					slot_reserved = 1U;
    f2f8:	bf18      	it	ne
    f2fa:	2201      	movne	r2, #1
    f2fc:	9203      	str	r2, [sp, #12]
				ticker->force = 0U;
    f2fe:	70e3      	strb	r3, [r4, #3]
				if (ticker->ticks_slot != 0U) {
    f300:	e792      	b.n	f228 <ticker_worker+0xd4>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
    f302:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
    f306:	9307      	str	r3, [sp, #28]
    f308:	3380      	adds	r3, #128	; 0x80
    f30a:	d0ba      	beq.n	f282 <ticker_worker+0x12e>
    f30c:	2eff      	cmp	r6, #255	; 0xff
    f30e:	d0b8      	beq.n	f282 <ticker_worker+0x12e>
		int32_t lazy_current = ticker->lazy_current;
    f310:	8be3      	ldrh	r3, [r4, #30]
		if (lazy_current >= ticker->lazy_periodic) {
    f312:	f8b4 c01c 	ldrh.w	ip, [r4, #28]
		uint32_t current_age = ticker->ticks_periodic +
    f316:	6861      	ldr	r1, [r4, #4]
				(lazy_current - ticker->priority);
    f318:	9807      	ldr	r0, [sp, #28]
		int32_t lazy_current = ticker->lazy_current;
    f31a:	9305      	str	r3, [sp, #20]
		if (lazy_current >= ticker->lazy_periodic) {
    f31c:	4563      	cmp	r3, ip
			lazy_current -= ticker->lazy_periodic;
    f31e:	bf28      	it	cs
    f320:	eba3 030c 	subcs.w	r3, r3, ip
				(lazy_current - ticker->priority);
    f324:	1a18      	subs	r0, r3, r0
		uint32_t current_age = ticker->ticks_periodic +
    f326:	fb03 1301 	mla	r3, r3, r1, r1
    f32a:	9308      	str	r3, [sp, #32]
		uint32_t acc_ticks_to_expire = 0U;
    f32c:	e9cd 7a0b 	strd	r7, sl, [sp, #44]	; 0x2c
				(lazy_current - ticker->priority);
    f330:	9009      	str	r0, [sp, #36]	; 0x24
		uint32_t current_age = ticker->ticks_periodic +
    f332:	4633      	mov	r3, r6
		uint32_t acc_ticks_to_expire = 0U;
    f334:	f04f 0c00 	mov.w	ip, #0
    f338:	920a      	str	r2, [sp, #40]	; 0x28
    f33a:	46a0      	mov	r8, r4
    f33c:	960d      	str	r6, [sp, #52]	; 0x34
    f33e:	9102      	str	r1, [sp, #8]
    f340:	e02c      	b.n	f39c <ticker_worker+0x248>
				(ticker->ticks_periodic == 0U) ||
    f342:	9c02      	ldr	r4, [sp, #8]
					  0U :
    f344:	eba9 0e0e 	sub.w	lr, r9, lr
				(ticker->ticks_periodic == 0U) ||
    f348:	2c00      	cmp	r4, #0
    f34a:	d047      	beq.n	f3dc <ticker_worker+0x288>
    f34c:	9c08      	ldr	r4, [sp, #32]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
    f34e:	fb09 ee06 	mla	lr, r9, r6, lr
				(ticker->ticks_periodic == 0U) ||
    f352:	4574      	cmp	r4, lr
    f354:	bf8c      	ite	hi
    f356:	f04f 0e01 	movhi.w	lr, #1
    f35a:	f04f 0e00 	movls.w	lr, #0
					(ticker->ticks_periodic != 0U) &&
    f35e:	bf34      	ite	cc
    f360:	f04f 0901 	movcc.w	r9, #1
    f364:	f04f 0900 	movcs.w	r9, #0
			if (!lazy_next_periodic_skip &&
    f368:	4281      	cmp	r1, r0
			uint8_t next_force = (ticker_next->force > ticker->force);
    f36a:	f892 a003 	ldrb.w	sl, [r2, #3]
    f36e:	f898 2003 	ldrb.w	r2, [r8, #3]
			if (!lazy_next_periodic_skip &&
    f372:	d30e      	bcc.n	f392 <ticker_worker+0x23e>
    f374:	4592      	cmp	sl, r2
    f376:	d842      	bhi.n	f3fe <ticker_worker+0x2aa>
			    (next_force ||
    f378:	f117 0f80 	cmn.w	r7, #128	; 0x80
    f37c:	d03f      	beq.n	f3fe <ticker_worker+0x2aa>
			     next_is_critical ||
    f37e:	9a09      	ldr	r2, [sp, #36]	; 0x24
				(lazy_next - ticker_next->priority) >
    f380:	1bf6      	subs	r6, r6, r7
			     next_is_critical ||
    f382:	4296      	cmp	r6, r2
    f384:	dd02      	ble.n	f38c <ticker_worker+0x238>
			     (next_has_priority && !current_is_older) ||
    f386:	f1be 0f00 	cmp.w	lr, #0
    f38a:	d038      	beq.n	f3fe <ticker_worker+0x2aa>
    f38c:	9a07      	ldr	r2, [sp, #28]
    f38e:	42ba      	cmp	r2, r7
    f390:	d032      	beq.n	f3f8 <ticker_worker+0x2a4>
			id_head = ticker_next->next;
    f392:	f81b 3003 	ldrb.w	r3, [fp, r3]
		while (id_head != TICKER_NULL) {
    f396:	2bff      	cmp	r3, #255	; 0xff
    f398:	f43f af6e 	beq.w	f278 <ticker_worker+0x124>
			struct ticker_node *ticker_next = &nodes[id_head];
    f39c:	b21b      	sxth	r3, r3
    f39e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    f3a2:	eb0b 1203 	add.w	r2, fp, r3, lsl #4
    f3a6:	011b      	lsls	r3, r3, #4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
    f3a8:	f8d2 e008 	ldr.w	lr, [r2, #8]
    f3ac:	44f4      	add	ip, lr
			if (acc_ticks_to_expire > ticker->ticks_slot) {
    f3ae:	4565      	cmp	r5, ip
    f3b0:	f4ff af62 	bcc.w	f278 <ticker_worker+0x124>
			if (ticker_next->ticks_slot == 0U) {
    f3b4:	6991      	ldr	r1, [r2, #24]
    f3b6:	2900      	cmp	r1, #0
    f3b8:	d0eb      	beq.n	f392 <ticker_worker+0x23e>
			int32_t lazy_next = ticker_next->lazy_current;
    f3ba:	8bd1      	ldrh	r1, [r2, #30]
				ticker_next->lazy_periodic > lazy_next;
    f3bc:	8b90      	ldrh	r0, [r2, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
    f3be:	f8d2 9004 	ldr.w	r9, [r2, #4]
				ticker_next->priority;
    f3c2:	f992 702d 	ldrsb.w	r7, [r2, #45]	; 0x2d
			if (!lazy_next_periodic_skip) {
    f3c6:	4281      	cmp	r1, r0
			int32_t lazy_next = ticker_next->lazy_current;
    f3c8:	460e      	mov	r6, r1
				lazy_next -= ticker_next->lazy_periodic;
    f3ca:	bf28      	it	cs
    f3cc:	1a0e      	subcs	r6, r1, r0
					  0U :
    f3ce:	f1b9 0f00 	cmp.w	r9, #0
    f3d2:	d1b6      	bne.n	f342 <ticker_worker+0x1ee>
				(ticker->ticks_periodic == 0U) ||
    f3d4:	9c02      	ldr	r4, [sp, #8]
					  0U :
    f3d6:	46ce      	mov	lr, r9
				(ticker->ticks_periodic == 0U) ||
    f3d8:	2c00      	cmp	r4, #0
    f3da:	d1b7      	bne.n	f34c <ticker_worker+0x1f8>
					(ticker->ticks_periodic != 0U) &&
    f3dc:	f8dd 9008 	ldr.w	r9, [sp, #8]
				(ticker->ticks_periodic == 0U) ||
    f3e0:	f04f 0e01 	mov.w	lr, #1
    f3e4:	e7c0      	b.n	f368 <ticker_worker+0x214>
			    TICKER_RESCHEDULE_STATE_NONE &&
    f3e6:	8ba1      	ldrh	r1, [r4, #28]
    f3e8:	9805      	ldr	r0, [sp, #20]
    f3ea:	4281      	cmp	r1, r0
    f3ec:	f63f af01 	bhi.w	f1f2 <ticker_worker+0x9e>
				ext_data->reschedule_state =
    f3f0:	f04f 0101 	mov.w	r1, #1
    f3f4:	7219      	strb	r1, [r3, #8]
    f3f6:	e6fe      	b.n	f1f6 <ticker_worker+0xa2>
			     (equal_priority && next_is_older))) {
    f3f8:	f1b9 0f00 	cmp.w	r9, #0
    f3fc:	d0c9      	beq.n	f392 <ticker_worker+0x23e>
    f3fe:	e9dd 7a0b 	ldrd	r7, sl, [sp, #44]	; 0x2c
    f402:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f404:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    f406:	4644      	mov	r4, r8
    f408:	e6eb      	b.n	f1e2 <ticker_worker+0x8e>
	uint8_t slot_reserved = 0;
    f40a:	9b06      	ldr	r3, [sp, #24]
    f40c:	9303      	str	r3, [sp, #12]
    f40e:	e6c3      	b.n	f198 <ticker_worker+0x44>
		if (ticker->timeout_func) {
    f410:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
    f412:	3a01      	subs	r2, #1
    f414:	70a2      	strb	r2, [r4, #2]
		if (ticker->timeout_func) {
    f416:	2d00      	cmp	r5, #0
    f418:	f43f af06 	beq.w	f228 <ticker_worker+0xd4>
					   ticks_expired -
    f41c:	9b04      	ldr	r3, [sp, #16]
    f41e:	6960      	ldr	r0, [r4, #20]
    f420:	695a      	ldr	r2, [r3, #20]
			ticker->timeout_func(ticks_at_expire,
    f422:	6a61      	ldr	r1, [r4, #36]	; 0x24
    f424:	f894 c003 	ldrb.w	ip, [r4, #3]
    f428:	6923      	ldr	r3, [r4, #16]
					   ticks_expired -
    f42a:	ebaa 0000 	sub.w	r0, sl, r0
    f42e:	4410      	add	r0, r2
			ticks_at_expire = (instance->ticks_current +
    f430:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
    f434:	e740      	b.n	f2b8 <ticker_worker+0x164>
    f436:	bf00      	nop

0000f438 <ticker_job>:
	if (instance->worker_trigger) {
    f438:	7fc3      	ldrb	r3, [r0, #31]
    f43a:	2b00      	cmp	r3, #0
    f43c:	f040 86c9 	bne.w	101d2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1d3>
{
    f440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
    f444:	7f82      	ldrb	r2, [r0, #30]
{
    f446:	b08f      	sub	sp, #60	; 0x3c
    f448:	4683      	mov	fp, r0
	if (instance->job_guard) {
    f44a:	2a00      	cmp	r2, #0
    f44c:	f040 80a5 	bne.w	f59a <ticker_job+0x162>
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    f450:	7a82      	ldrb	r2, [r0, #10]
    f452:	7ac1      	ldrb	r1, [r0, #11]
	ticks_previous = instance->ticks_current;
    f454:	6940      	ldr	r0, [r0, #20]
    f456:	9007      	str	r0, [sp, #28]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    f458:	4291      	cmp	r1, r2
	instance->job_guard = 1U;
    f45a:	f04f 0001 	mov.w	r0, #1
    f45e:	f88b 001e 	strb.w	r0, [fp, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    f462:	f000 86e0 	beq.w	10226 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x227>
	uint8_t idx = *ticks_elapsed_index + 1;
    f466:	4402      	add	r2, r0
    f468:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
    f46a:	2a02      	cmp	r2, #2
    f46c:	bf12      	itee	ne
    f46e:	4611      	movne	r1, r2
    f470:	4619      	moveq	r1, r3
		idx = 0U;
    f472:	461a      	moveq	r2, r3
		ticks_elapsed =
    f474:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
	*ticks_elapsed_index = idx;
    f478:	f88b 200a 	strb.w	r2, [fp, #10]
		ticks_elapsed =
    f47c:	68ca      	ldr	r2, [r1, #12]
		instance->ticks_current += ticks_elapsed;
    f47e:	9907      	ldr	r1, [sp, #28]
		ticks_elapsed =
    f480:	9202      	str	r2, [sp, #8]
		instance->ticks_current += ticks_elapsed;
    f482:	188a      	adds	r2, r1, r2
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
    f484:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    f488:	f8cb 2014 	str.w	r2, [fp, #20]
		flag_elapsed = 1U;
    f48c:	2201      	movs	r2, #1
    f48e:	920d      	str	r2, [sp, #52]	; 0x34
	count_user = instance->count_user;
    f490:	f89b 2009 	ldrb.w	r2, [fp, #9]
	ticker_id_old_head = instance->ticker_id_head;
    f494:	f89b 101d 	ldrb.w	r1, [fp, #29]
    f498:	910a      	str	r1, [sp, #40]	; 0x28
	node = &instance->nodes[0];
    f49a:	f8db 1000 	ldr.w	r1, [fp]
	users = &instance->users[0];
    f49e:	f8db 0004 	ldr.w	r0, [fp, #4]
	count_user = instance->count_user;
    f4a2:	9206      	str	r2, [sp, #24]
	node = &instance->nodes[0];
    f4a4:	9104      	str	r1, [sp, #16]
	while (count_user--) {
    f4a6:	4611      	mov	r1, r2
    f4a8:	3a01      	subs	r2, #1
	users = &instance->users[0];
    f4aa:	900b      	str	r0, [sp, #44]	; 0x2c
	while (count_user--) {
    f4ac:	b2d2      	uxtb	r2, r2
    f4ae:	2900      	cmp	r1, #0
    f4b0:	f000 8292 	beq.w	f9d8 <ticker_job+0x5a0>
	pending = 0U;
    f4b4:	2300      	movs	r3, #0
    f4b6:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
    f4ba:	9309      	str	r3, [sp, #36]	; 0x24
	insert_head = TICKER_NULL;
    f4bc:	23ff      	movs	r3, #255	; 0xff
    f4be:	9301      	str	r3, [sp, #4]
    f4c0:	4637      	mov	r7, r6
    f4c2:	46d9      	mov	r9, fp
		user_ops = &user->user_op[0];
    f4c4:	687b      	ldr	r3, [r7, #4]
    f4c6:	9305      	str	r3, [sp, #20]
		while (user->middle != user->last) {
    f4c8:	f897 c003 	ldrb.w	ip, [r7, #3]
    f4cc:	78bb      	ldrb	r3, [r7, #2]
    f4ce:	46ba      	mov	sl, r7
    f4d0:	9905      	ldr	r1, [sp, #20]
					ticks_used = 0;
    f4d2:	4698      	mov	r8, r3
			user_op = &user_ops[user->middle];
    f4d4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    f4d8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
			middle = user->middle + 1;
    f4dc:	1c58      	adds	r0, r3, #1
		while (user->middle != user->last) {
    f4de:	4563      	cmp	r3, ip
			user_op = &user_ops[user->middle];
    f4e0:	eb01 0582 	add.w	r5, r1, r2, lsl #2
			middle = user->middle + 1;
    f4e4:	b2c3      	uxtb	r3, r0
		while (user->middle != user->last) {
    f4e6:	f000 815f 	beq.w	f7a8 <ticker_job+0x370>
			if (middle == user->count_user_op) {
    f4ea:	f89a 0000 	ldrb.w	r0, [sl]
				middle = 0U;
    f4ee:	4298      	cmp	r0, r3
    f4f0:	bf08      	it	eq
    f4f2:	2300      	moveq	r3, #0
			user->middle = middle;
    f4f4:	f88a 3002 	strb.w	r3, [sl, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    f4f8:	f811 2022 	ldrb.w	r2, [r1, r2, lsl #2]
    f4fc:	2a04      	cmp	r2, #4
    f4fe:	f240 8151 	bls.w	f7a4 <ticker_job+0x36c>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    f502:	2a07      	cmp	r2, #7
    f504:	f200 813f 	bhi.w	f786 <ticker_job+0x34e>
			ticker = &node[user_op->id];
    f508:	7869      	ldrb	r1, [r5, #1]
    f50a:	9c04      	ldr	r4, [sp, #16]
    f50c:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    f510:	eb04 1400 	add.w	r4, r4, r0, lsl #4
    f514:	0100      	lsls	r0, r0, #4
			state = (ticker->req - ticker->ack) & 0xff;
    f516:	78a7      	ldrb	r7, [r4, #2]
			ticker = &node[user_op->id];
    f518:	9006      	str	r0, [sp, #24]
			state = (ticker->req - ticker->ack) & 0xff;
    f51a:	7860      	ldrb	r0, [r4, #1]
    f51c:	1bc0      	subs	r0, r0, r7
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    f51e:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    f522:	f000 8130 	beq.w	f786 <ticker_job+0x34e>
			    (state == 0U) ||
    f526:	2a05      	cmp	r2, #5
    f528:	f000 8118 	beq.w	f75c <ticker_job+0x324>
			if (state == 1U) {
    f52c:	2801      	cmp	r0, #1
    f52e:	f040 814f 	bne.w	f7d0 <ticker_job+0x398>
	previous = instance->ticker_id_head;
    f532:	f899 c01d 	ldrb.w	ip, [r9, #29]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    f536:	f8d9 6000 	ldr.w	r6, [r9]
	while (current != TICKER_NULL) {
    f53a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    f53e:	d016      	beq.n	f56e <ticker_job+0x136>
		ticker_current = &node[current];
    f540:	eb0c 004c 	add.w	r0, ip, ip, lsl #1
		if (current == id) {
    f544:	4561      	cmp	r1, ip
		ticker_current = &node[current];
    f546:	eb06 1000 	add.w	r0, r6, r0, lsl #4
		if (current == id) {
    f54a:	d064      	beq.n	f616 <ticker_job+0x1de>
	total = 0U;
    f54c:	2300      	movs	r3, #0
    f54e:	e001      	b.n	f554 <ticker_job+0x11c>
		if (current == id) {
    f550:	4561      	cmp	r1, ip
    f552:	d045      	beq.n	f5e0 <ticker_job+0x1a8>
		total += ticker_current->ticks_to_expire;
    f554:	46e6      	mov	lr, ip
		current = ticker_current->next;
    f556:	f890 c000 	ldrb.w	ip, [r0]
		total += ticker_current->ticks_to_expire;
    f55a:	f8d0 8008 	ldr.w	r8, [r0, #8]
	while (current != TICKER_NULL) {
    f55e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
		ticker_current = &node[current];
    f562:	eb0c 004c 	add.w	r0, ip, ip, lsl #1
		total += ticker_current->ticks_to_expire;
    f566:	4443      	add	r3, r8
		ticker_current = &node[current];
    f568:	eb06 1000 	add.w	r0, r6, r0, lsl #4
	while (current != TICKER_NULL) {
    f56c:	d1f0      	bne.n	f550 <ticker_job+0x118>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    f56e:	2600      	movs	r6, #0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    f570:	2a05      	cmp	r2, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    f572:	60a6      	str	r6, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    f574:	f000 80e0 	beq.w	f738 <ticker_job+0x300>
		ticker->req = ticker->ack;
    f578:	7067      	strb	r7, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    f57a:	f899 301c 	ldrb.w	r3, [r9, #28]
    f57e:	428b      	cmp	r3, r1
    f580:	d016      	beq.n	f5b0 <ticker_job+0x178>
	if (user_op->fp_op_func) {
    f582:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    f584:	2000      	movs	r0, #0
    f586:	7028      	strb	r0, [r5, #0]
	user_op->status = status;
    f588:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    f58a:	b10b      	cbz	r3, f590 <ticker_job+0x158>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    f58c:	6b29      	ldr	r1, [r5, #48]	; 0x30
    f58e:	4798      	blx	r3
    f590:	f89a c003 	ldrb.w	ip, [sl, #3]
    f594:	f89a 3002 	ldrb.w	r3, [sl, #2]
    f598:	e79a      	b.n	f4d0 <ticker_job+0x98>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_JOB, 1,
    f59a:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    f59e:	2104      	movs	r1, #4
    f5a0:	4608      	mov	r0, r1
    f5a2:	465b      	mov	r3, fp
    f5a4:	2201      	movs	r2, #1
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    f5a6:	46a4      	mov	ip, r4
}
    f5a8:	b00f      	add	sp, #60	; 0x3c
    f5aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    f5ae:	4760      	bx	ip
			instance->ticker_id_slot_previous = TICKER_NULL;
    f5b0:	23ff      	movs	r3, #255	; 0xff
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
    f5b2:	2a07      	cmp	r2, #7
			instance->ticker_id_slot_previous = TICKER_NULL;
    f5b4:	f889 301c 	strb.w	r3, [r9, #28]
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
    f5b8:	f040 8107 	bne.w	f7ca <ticker_job+0x392>
				ticks_at_stop =
    f5bc:	6868      	ldr	r0, [r5, #4]
			ticks_current = instance->ticks_current;
    f5be:	f8d9 2014 	ldr.w	r2, [r9, #20]
			if (!((ticks_at_stop - ticks_current) &
    f5c2:	1a83      	subs	r3, r0, r2
    f5c4:	021c      	lsls	r4, r3, #8
    f5c6:	f100 80f7 	bmi.w	f7b8 <ticker_job+0x380>
				ticks_used = ticks_elapsed +
    f5ca:	9a02      	ldr	r2, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    f5cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
    f5d0:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
    f5d2:	f8d9 2018 	ldr.w	r2, [r9, #24]
    f5d6:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
    f5d8:	bf88      	it	hi
    f5da:	f8c9 3018 	strhi.w	r3, [r9, #24]
    f5de:	e7d0      	b.n	f582 <ticker_job+0x14a>
	if (previous == current) {
    f5e0:	eb0e 074e 	add.w	r7, lr, lr, lsl #1
    f5e4:	4571      	cmp	r1, lr
    f5e6:	eb06 1707 	add.w	r7, r6, r7, lsl #4
    f5ea:	d016      	beq.n	f61a <ticker_job+0x1e2>
	node[previous].next = ticker_current->next;
    f5ec:	7801      	ldrb	r1, [r0, #0]
	timeout = ticker_current->ticks_to_expire;
    f5ee:	f8d0 c008 	ldr.w	ip, [r0, #8]
	node[previous].next = ticker_current->next;
    f5f2:	7039      	strb	r1, [r7, #0]
	if (ticker_current->next != TICKER_NULL) {
    f5f4:	29ff      	cmp	r1, #255	; 0xff
    f5f6:	d006      	beq.n	f606 <ticker_job+0x1ce>
		node[ticker_current->next].ticks_to_expire += timeout;
    f5f8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    f5fc:	eb06 1101 	add.w	r1, r6, r1, lsl #4
    f600:	6888      	ldr	r0, [r1, #8]
    f602:	4460      	add	r0, ip
    f604:	6088      	str	r0, [r1, #8]
	return (total + timeout);
    f606:	eb0c 0603 	add.w	r6, ip, r3
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    f60a:	2a05      	cmp	r2, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    f60c:	60a6      	str	r6, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    f60e:	d009      	beq.n	f624 <ticker_job+0x1ec>
    f610:	78a7      	ldrb	r7, [r4, #2]
    f612:	7869      	ldrb	r1, [r5, #1]
    f614:	e7b0      	b.n	f578 <ticker_job+0x140>
		if (current == id) {
    f616:	4607      	mov	r7, r0
	total = 0U;
    f618:	2300      	movs	r3, #0
		instance->ticker_id_head = ticker_current->next;
    f61a:	7802      	ldrb	r2, [r0, #0]
    f61c:	f889 201d 	strb.w	r2, [r9, #29]
    f620:	782a      	ldrb	r2, [r5, #0]
    f622:	e7e3      	b.n	f5ec <ticker_job+0x1b4>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    f624:	f8d9 7014 	ldr.w	r7, [r9, #20]
    f628:	9703      	str	r7, [sp, #12]
	ticks_now = cntr_cnt_get();
    f62a:	f00c f9af 	bl	1b98c <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    f62e:	9b02      	ldr	r3, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    f630:	eba0 0c07 	sub.w	ip, r0, r7
    f634:	f02c 477f 	bic.w	r7, ip, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    f638:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_elapsed) {
    f63a:	429e      	cmp	r6, r3
	ticks_now = cntr_cnt_get();
    f63c:	4680      	mov	r8, r0
	if (ticks_to_expire > ticks_elapsed) {
    f63e:	f240 8087 	bls.w	f750 <ticker_job+0x318>
		ticks_to_expire -= ticks_elapsed;
    f642:	6962      	ldr	r2, [r4, #20]
    f644:	1af3      	subs	r3, r6, r3
	if ((ticker->ticks_periodic != 0U) &&
    f646:	6866      	ldr	r6, [r4, #4]
    f648:	2e00      	cmp	r6, #0
    f64a:	d032      	beq.n	f6b2 <ticker_job+0x27a>
	    (user_op->params.update.lazy != 0U)) {
    f64c:	8aa8      	ldrh	r0, [r5, #20]
	if ((ticker->ticks_periodic != 0U) &&
    f64e:	b380      	cbz	r0, f6b2 <ticker_job+0x27a>
		user_op->params.update.lazy--;
    f650:	3801      	subs	r0, #1
    f652:	b280      	uxth	r0, r0
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    f654:	429e      	cmp	r6, r3
    f656:	f8b4 b01e 	ldrh.w	fp, [r4, #30]
		user_op->params.update.lazy--;
    f65a:	82a8      	strh	r0, [r5, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    f65c:	f080 8197 	bcs.w	f98e <ticker_job+0x556>
    f660:	1c71      	adds	r1, r6, #1
    f662:	9108      	str	r1, [sp, #32]
    f664:	920c      	str	r2, [sp, #48]	; 0x30
    f666:	4659      	mov	r1, fp
    f668:	e013      	b.n	f692 <ticker_job+0x25a>
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
    f66a:	f100 70e8 	add.w	r0, r0, #30408704	; 0x1d00000
    f66e:	f500 30d4 	add.w	r0, r0, #108544	; 0x1a800
    f672:	f8dd e020 	ldr.w	lr, [sp, #32]
    f676:	f500 70a5 	add.w	r0, r0, #330	; 0x14a
			ticker->lazy_current--;
    f67a:	3901      	subs	r1, #1
			ticks_to_expire -= ticker->ticks_periodic +
    f67c:	eba3 030e 	sub.w	r3, r3, lr
			ticker->lazy_current--;
    f680:	b289      	uxth	r1, r1
	ticker->remainder_current -= ticker->remainder_periodic;
    f682:	eba0 000b 	sub.w	r0, r0, fp
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    f686:	429e      	cmp	r6, r3
			ticker->lazy_current--;
    f688:	83e1      	strh	r1, [r4, #30]
	ticker->remainder_current -= ticker->remainder_periodic;
    f68a:	6260      	str	r0, [r4, #36]	; 0x24
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    f68c:	f080 817c 	bcs.w	f988 <ticker_job+0x550>
    f690:	8aa8      	ldrh	r0, [r5, #20]
    f692:	4288      	cmp	r0, r1
    f694:	f080 8329 	bcs.w	fcea <ticker_job+0x8b2>
					   ticker_remainder_dec(ticker);
    f698:	e9d4 b008 	ldrd	fp, r0, [r4, #32]
	if ((ticker->remainder_current >= BIT(31)) ||
    f69c:	f8df e1dc 	ldr.w	lr, [pc, #476]	; f87c <ticker_job+0x444>
    f6a0:	4a75      	ldr	r2, [pc, #468]	; (f878 <ticker_job+0x440>)
    f6a2:	4486      	add	lr, r0
    f6a4:	4596      	cmp	lr, r2
    f6a6:	d8e0      	bhi.n	f66a <ticker_job+0x232>
    f6a8:	46b6      	mov	lr, r6
    f6aa:	e7e6      	b.n	f67a <ticker_job+0x242>
    f6ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f6ae:	83e1      	strh	r1, [r4, #30]
		ticker->lazy_periodic = user_op->params.update.lazy;
    f6b0:	83a0      	strh	r0, [r4, #28]
				user_op->params.update.ticks_drift_minus;
    f6b2:	e9d5 0e01 	ldrd	r0, lr, [r5, #4]
	struct ticker_ext *ext_data = ticker->ext_data;
    f6b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
	ticker->ticks_to_expire = ticks_to_expire +
    f6b8:	4403      	add	r3, r0
	ticker->ticks_to_expire_minus +=
    f6ba:	4472      	add	r2, lr
	ticker->ticks_to_expire = ticks_to_expire +
    f6bc:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus +=
    f6be:	6162      	str	r2, [r4, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
    f6c0:	b136      	cbz	r6, f6d0 <ticker_job+0x298>
    f6c2:	6831      	ldr	r1, [r6, #0]
    f6c4:	b121      	cbz	r1, f6d0 <ticker_job+0x298>
			user_op->params.update.ticks_drift_plus -
    f6c6:	eba0 000e 	sub.w	r0, r0, lr
		ext_data->ticks_drift =
    f6ca:	6070      	str	r0, [r6, #4]
    f6cc:	68a3      	ldr	r3, [r4, #8]
    f6ce:	6962      	ldr	r2, [r4, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    f6d0:	f41c 0f00 	tst.w	ip, #8388608	; 0x800000
    f6d4:	d123      	bne.n	f71e <ticker_job+0x2e6>
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    f6d6:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_to_expire_minus) {
    f6d8:	4293      	cmp	r3, r2
    f6da:	d92b      	bls.n	f734 <ticker_job+0x2fc>
		ticks_to_expire -= ticks_to_expire_minus;
    f6dc:	1a9b      	subs	r3, r3, r2
		ticks_to_expire_minus = 0U;
    f6de:	2200      	movs	r2, #0
	ticker->ticks_to_expire = ticks_to_expire;
    f6e0:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    f6e2:	6162      	str	r2, [r4, #20]
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    f6e4:	68e9      	ldr	r1, [r5, #12]
    f6e6:	69a3      	ldr	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    f6e8:	692a      	ldr	r2, [r5, #16]
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    f6ea:	440b      	add	r3, r1
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    f6ec:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    f6ee:	bf88      	it	hi
    f6f0:	1a9b      	subhi	r3, r3, r2
	if (user_op->params.update.force != 0U) {
    f6f2:	7daa      	ldrb	r2, [r5, #22]
		ticker->ticks_slot = 0U;
    f6f4:	bf98      	it	ls
    f6f6:	2300      	movls	r3, #0
    f6f8:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0U) {
    f6fa:	b102      	cbz	r2, f6fe <ticker_job+0x2c6>
		ticker->force = user_op->params.update.force;
    f6fc:	70e2      	strb	r2, [r4, #3]
	if (user_op->params.update.must_expire) {
    f6fe:	7deb      	ldrb	r3, [r5, #23]
    f700:	b113      	cbz	r3, f708 <ticker_job+0x2d0>
		ticker->must_expire = (user_op->params.update.must_expire - 1);
    f702:	3b01      	subs	r3, #1
    f704:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->next = *insert_head;
    f708:	9b04      	ldr	r3, [sp, #16]
    f70a:	9a06      	ldr	r2, [sp, #24]
    f70c:	4619      	mov	r1, r3
    f70e:	9b01      	ldr	r3, [sp, #4]
    f710:	548b      	strb	r3, [r1, r2]
		ticker->req++;
    f712:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
    f714:	786a      	ldrb	r2, [r5, #1]
    f716:	9201      	str	r2, [sp, #4]
		ticker->req++;
    f718:	3301      	adds	r3, #1
    f71a:	7063      	strb	r3, [r4, #1]
    f71c:	e731      	b.n	f582 <ticker_job+0x14a>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    f71e:	9903      	ldr	r1, [sp, #12]
    f720:	eba1 0708 	sub.w	r7, r1, r8
    f724:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    f728:	429f      	cmp	r7, r3
    f72a:	f080 8129 	bcs.w	f980 <ticker_job+0x548>
			ticks_to_expire -= delta_current_start;
    f72e:	1bdb      	subs	r3, r3, r7
	if (ticks_to_expire > ticks_to_expire_minus) {
    f730:	4293      	cmp	r3, r2
    f732:	d8d3      	bhi.n	f6dc <ticker_job+0x2a4>
    f734:	1ad2      	subs	r2, r2, r3
    f736:	e125      	b.n	f984 <ticker_job+0x54c>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    f738:	f8d9 7014 	ldr.w	r7, [r9, #20]
    f73c:	9703      	str	r7, [sp, #12]
	ticks_now = cntr_cnt_get();
    f73e:	f00c f925 	bl	1b98c <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    f742:	9b02      	ldr	r3, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    f744:	eba0 0c07 	sub.w	ip, r0, r7
    f748:	f02c 477f 	bic.w	r7, ip, #4278190080	; 0xff000000
	ticks_now = cntr_cnt_get();
    f74c:	4680      	mov	r8, r0
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    f74e:	443b      	add	r3, r7
		ticker->ticks_to_expire_minus += ticks_elapsed -
    f750:	6961      	ldr	r1, [r4, #20]
    f752:	440b      	add	r3, r1
    f754:	1b9a      	subs	r2, r3, r6
    f756:	6162      	str	r2, [r4, #20]
		ticks_to_expire = 0U;
    f758:	2300      	movs	r3, #0
    f75a:	e774      	b.n	f646 <ticker_job+0x20e>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
    f75c:	686e      	ldr	r6, [r5, #4]
    f75e:	2e00      	cmp	r6, #0
    f760:	f47f aee4 	bne.w	f52c <ticker_job+0xf4>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
    f764:	68ae      	ldr	r6, [r5, #8]
    f766:	2e00      	cmp	r6, #0
    f768:	f47f aee0 	bne.w	f52c <ticker_job+0xf4>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
    f76c:	68ee      	ldr	r6, [r5, #12]
    f76e:	2e00      	cmp	r6, #0
    f770:	f47f aedc 	bne.w	f52c <ticker_job+0xf4>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
    f774:	692e      	ldr	r6, [r5, #16]
    f776:	2e00      	cmp	r6, #0
    f778:	f47f aed8 	bne.w	f52c <ticker_job+0xf4>
			     (user_op->params.update.lazy == 0U) &&
    f77c:	696e      	ldr	r6, [r5, #20]
    f77e:	f036 467f 	bics.w	r6, r6, #4278190080	; 0xff000000
    f782:	f47f aed3 	bne.w	f52c <ticker_job+0xf4>
	if (user_op->fp_op_func) {
    f786:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    f788:	2100      	movs	r1, #0
	user_op->status = status;
    f78a:	2001      	movs	r0, #1
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    f78c:	7029      	strb	r1, [r5, #0]
	user_op->status = status;
    f78e:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    f790:	2a00      	cmp	r2, #0
    f792:	f43f ae9d 	beq.w	f4d0 <ticker_job+0x98>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    f796:	6b29      	ldr	r1, [r5, #48]	; 0x30
    f798:	4790      	blx	r2
    f79a:	f89a c003 	ldrb.w	ip, [sl, #3]
    f79e:	f89a 3002 	ldrb.w	r3, [sl, #2]
    f7a2:	e695      	b.n	f4d0 <ticker_job+0x98>
    f7a4:	4698      	mov	r8, r3
    f7a6:	e695      	b.n	f4d4 <ticker_job+0x9c>
	while (count_user--) {
    f7a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f7aa:	4657      	mov	r7, sl
    f7ac:	42ba      	cmp	r2, r7
    f7ae:	f1a7 0308 	sub.w	r3, r7, #8
    f7b2:	d01e      	beq.n	f7f2 <ticker_job+0x3ba>
    f7b4:	461f      	mov	r7, r3
    f7b6:	e685      	b.n	f4c4 <ticker_job+0x8c>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    f7b8:	1a13      	subs	r3, r2, r0
				if (ticks_elapsed > ticks_used) {
    f7ba:	9a02      	ldr	r2, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    f7bc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
    f7c0:	429a      	cmp	r2, r3
					ticks_used = ticks_elapsed -
    f7c2:	bf8c      	ite	hi
    f7c4:	1ad3      	subhi	r3, r2, r3
					ticks_used = 0;
    f7c6:	2300      	movls	r3, #0
    f7c8:	e703      	b.n	f5d2 <ticker_job+0x19a>
				ticks_at_stop = cntr_cnt_get();
    f7ca:	f00c f8df 	bl	1b98c <cntr_cnt_get>
    f7ce:	e6f6      	b.n	f5be <ticker_job+0x186>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    f7d0:	2104      	movs	r1, #4
    f7d2:	464b      	mov	r3, r9
    f7d4:	2201      	movs	r2, #1
    f7d6:	f8d9 4024 	ldr.w	r4, [r9, #36]	; 0x24
    f7da:	4608      	mov	r0, r1
    f7dc:	47a0      	blx	r4
	while (count_user--) {
    f7de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
				user->middle = prev;
    f7e0:	f88a 8002 	strb.w	r8, [sl, #2]
    f7e4:	4657      	mov	r7, sl
				pending = 1U;
    f7e6:	2301      	movs	r3, #1
	while (count_user--) {
    f7e8:	42ba      	cmp	r2, r7
				pending = 1U;
    f7ea:	9309      	str	r3, [sp, #36]	; 0x24
    f7ec:	f1a7 0308 	sub.w	r3, r7, #8
	while (count_user--) {
    f7f0:	d1e0      	bne.n	f7b4 <ticker_job+0x37c>
    f7f2:	f899 c01d 	ldrb.w	ip, [r9, #29]
    f7f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f7f8:	ebb3 030c 	subs.w	r3, r3, ip
    f7fc:	bf18      	it	ne
    f7fe:	2301      	movne	r3, #1
    f800:	9306      	str	r3, [sp, #24]
	if (flag_elapsed) {
    f802:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f804:	46cb      	mov	fp, r9
    f806:	2b00      	cmp	r3, #0
    f808:	f040 80ee 	bne.w	f9e8 <ticker_job+0x5b0>
	count_user = instance->count_user;
    f80c:	f899 2009 	ldrb.w	r2, [r9, #9]
	node = &instance->nodes[0];
    f810:	f8d9 3000 	ldr.w	r3, [r9]
	users = &instance->users[0];
    f814:	f8d9 1004 	ldr.w	r1, [r9, #4]
	node = &instance->nodes[0];
    f818:	9304      	str	r3, [sp, #16]
	while (count_user--) {
    f81a:	1e53      	subs	r3, r2, #1
	users = &instance->users[0];
    f81c:	9107      	str	r1, [sp, #28]
	while (count_user--) {
    f81e:	b2db      	uxtb	r3, r3
    f820:	2a00      	cmp	r2, #0
    f822:	f000 82e9 	beq.w	fdf8 <ticker_job+0x9c0>
    f826:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    f82a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f82c:	9303      	str	r3, [sp, #12]
		user_ops = (void *)&user->user_op[0];
    f82e:	f8d8 3004 	ldr.w	r3, [r8, #4]
		user_ops_first = user->first;
    f832:	f898 6001 	ldrb.w	r6, [r8, #1]
		user_ops = (void *)&user->user_op[0];
    f836:	9305      	str	r3, [sp, #20]
		while ((insert_head != TICKER_NULL) ||
    f838:	9b01      	ldr	r3, [sp, #4]
    f83a:	2bff      	cmp	r3, #255	; 0xff
    f83c:	d064      	beq.n	f908 <ticker_job+0x4d0>
				ticker = &node[id_insert];
    f83e:	f8dd a004 	ldr.w	sl, [sp, #4]
    f842:	9b04      	ldr	r3, [sp, #16]
    f844:	fa0f f48a 	sxth.w	r4, sl
    f848:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    f84c:	ea4f 1c04 	mov.w	ip, r4, lsl #4
    f850:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				insert_head = ticker->next;
    f854:	f813 300c 	ldrb.w	r3, [r3, ip]
    f858:	9301      	str	r3, [sp, #4]
				user_op = NULL;
    f85a:	2500      	movs	r5, #0
	ticker->next = TICKER_NULL;
    f85c:	22ff      	movs	r2, #255	; 0xff
    f85e:	7022      	strb	r2, [r4, #0]
	(void)ticker_enqueue(instance, id_insert);
    f860:	f8db 7000 	ldr.w	r7, [fp]
	current = instance->ticker_id_head;
    f864:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticker_new = &node[id];
    f868:	eb07 000c 	add.w	r0, r7, ip
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    f86c:	4293      	cmp	r3, r2
	ticks_to_expire = ticker_new->ticks_to_expire;
    f86e:	6881      	ldr	r1, [r0, #8]
	previous = TICKER_NULL;
    f870:	bf18      	it	ne
    f872:	9202      	strne	r2, [sp, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    f874:	d116      	bne.n	f8a4 <ticker_job+0x46c>
    f876:	e3ec      	b.n	10052 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x53>
    f878:	7f172b59 	.word	0x7f172b59
    f87c:	ff172b5a 	.word	0xff172b5a
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
    f880:	ebb1 010c 	subs.w	r1, r1, ip
    f884:	d106      	bne.n	f894 <ticker_job+0x45c>
    f886:	f8be e01e 	ldrh.w	lr, [lr, #30]
    f88a:	f8b0 901e 	ldrh.w	r9, [r0, #30]
    f88e:	45f1      	cmp	r9, lr
    f890:	f200 842d 	bhi.w	100ee <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xef>
		current = ticker_current->next;
    f894:	f817 c002 	ldrb.w	ip, [r7, r2]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    f898:	9302      	str	r3, [sp, #8]
    f89a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    f89e:	f000 83cc 	beq.w	1003a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x3b>
    f8a2:	4663      	mov	r3, ip
		(ticker_current = &node[current])->ticks_to_expire))) {
    f8a4:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
    f8a8:	eb07 1e0c 	add.w	lr, r7, ip, lsl #4
    f8ac:	ea4f 120c 	mov.w	r2, ip, lsl #4
		(ticks_to_expire_current =
    f8b0:	f8de c008 	ldr.w	ip, [lr, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    f8b4:	4561      	cmp	r1, ip
    f8b6:	d2e3      	bcs.n	f880 <ticker_job+0x448>
    f8b8:	9a02      	ldr	r2, [sp, #8]
	ticker_new->ticks_to_expire = ticks_to_expire;
    f8ba:	6081      	str	r1, [r0, #8]
	if (previous == TICKER_NULL) {
    f8bc:	2aff      	cmp	r2, #255	; 0xff
	ticker_new->next = current;
    f8be:	7003      	strb	r3, [r0, #0]
	if (previous == TICKER_NULL) {
    f8c0:	f040 83c0 	bne.w	10044 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x45>
		instance->ticker_id_head = id;
    f8c4:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
    f8c8:	2bff      	cmp	r3, #255	; 0xff
    f8ca:	d006      	beq.n	f8da <ticker_job+0x4a2>
		node[current].ticks_to_expire -= ticks_to_expire;
    f8cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    f8d0:	eb07 1703 	add.w	r7, r7, r3, lsl #4
    f8d4:	68bb      	ldr	r3, [r7, #8]
    f8d6:	1a59      	subs	r1, r3, r1
    f8d8:	60b9      	str	r1, [r7, #8]
	ticker->req = ticker->ack + 1;
    f8da:	78a3      	ldrb	r3, [r4, #2]
    f8dc:	3301      	adds	r3, #1
    f8de:	7063      	strb	r3, [r4, #1]
			if (user_op) {
    f8e0:	2d00      	cmp	r5, #0
    f8e2:	d0a9      	beq.n	f838 <ticker_job+0x400>
	if (user_op->fp_op_func) {
    f8e4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    f8e6:	9a03      	ldr	r2, [sp, #12]
    f8e8:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
    f8ea:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    f8ec:	b113      	cbz	r3, f8f4 <ticker_job+0x4bc>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    f8ee:	6b29      	ldr	r1, [r5, #48]	; 0x30
    f8f0:	2000      	movs	r0, #0
    f8f2:	4798      	blx	r3
				if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    f8f4:	6863      	ldr	r3, [r4, #4]
    f8f6:	2b00      	cmp	r3, #0
    f8f8:	d19e      	bne.n	f838 <ticker_job+0x400>
					ticker->op_context =
    f8fa:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
    f8fe:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
    f902:	9b01      	ldr	r3, [sp, #4]
    f904:	2bff      	cmp	r3, #255	; 0xff
    f906:	d19a      	bne.n	f83e <ticker_job+0x406>
    f908:	f898 3002 	ldrb.w	r3, [r8, #2]
    f90c:	42b3      	cmp	r3, r6
    f90e:	d02f      	beq.n	f970 <ticker_job+0x538>
    f910:	9f05      	ldr	r7, [sp, #20]
				if (first == user->count_user_op) {
    f912:	f898 0000 	ldrb.w	r0, [r8]
				user_op = &user_ops[user_ops_first];
    f916:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    f91a:	eb06 0282 	add.w	r2, r6, r2, lsl #2
				first = user_ops_first + 1;
    f91e:	3601      	adds	r6, #1
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    f920:	f817 1022 	ldrb.w	r1, [r7, r2, lsl #2]
				first = user_ops_first + 1;
    f924:	b2f6      	uxtb	r6, r6
					first = 0U;
    f926:	42b0      	cmp	r0, r6
    f928:	bf08      	it	eq
    f92a:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    f92c:	2904      	cmp	r1, #4
				user_op = &user_ops[user_ops_first];
    f92e:	eb07 0582 	add.w	r5, r7, r2, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    f932:	d11b      	bne.n	f96c <ticker_job+0x534>
				id_insert = user_op->id;
    f934:	f895 a001 	ldrb.w	sl, [r5, #1]
				ticker = &node[id_insert];
    f938:	9b04      	ldr	r3, [sp, #16]
    f93a:	eb0a 0c4a 	add.w	ip, sl, sl, lsl #1
    f93e:	eb03 140c 	add.w	r4, r3, ip, lsl #4
    f942:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
				if (((ticker->req -
    f946:	7861      	ldrb	r1, [r4, #1]
				      ticker->ack) & 0xff) != 0U) {
    f948:	78a3      	ldrb	r3, [r4, #2]
				if (((ticker->req -
    f94a:	1ac9      	subs	r1, r1, r3
    f94c:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    f950:	f000 8384 	beq.w	1005c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x5d>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    f954:	9b03      	ldr	r3, [sp, #12]
    f956:	f807 3022 	strb.w	r3, [r7, r2, lsl #2]
	if (user_op->fp_op_func) {
    f95a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->status = status;
    f95c:	2201      	movs	r2, #1
    f95e:	62aa      	str	r2, [r5, #40]	; 0x28
		user_op->fp_op_func(user_op->status, user_op->op_context);
    f960:	4610      	mov	r0, r2
	if (user_op->fp_op_func) {
    f962:	b10b      	cbz	r3, f968 <ticker_job+0x530>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    f964:	6b29      	ldr	r1, [r5, #48]	; 0x30
    f966:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
    f968:	f898 3002 	ldrb.w	r3, [r8, #2]
    f96c:	42b3      	cmp	r3, r6
    f96e:	d1d0      	bne.n	f912 <ticker_job+0x4da>
	while (count_user--) {
    f970:	9a07      	ldr	r2, [sp, #28]
    f972:	4542      	cmp	r2, r8
    f974:	f1a8 0308 	sub.w	r3, r8, #8
    f978:	f000 823c 	beq.w	fdf4 <ticker_job+0x9bc>
    f97c:	4698      	mov	r8, r3
    f97e:	e756      	b.n	f82e <ticker_job+0x3f6>
			ticks_to_expire_minus +=
    f980:	443a      	add	r2, r7
    f982:	1ad2      	subs	r2, r2, r3
		ticks_to_expire = 0U;
    f984:	2300      	movs	r3, #0
    f986:	e6ab      	b.n	f6e0 <ticker_job+0x2a8>
    f988:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f98a:	8aa8      	ldrh	r0, [r5, #20]
    f98c:	468b      	mov	fp, r1
		while (ticker->lazy_current < user_op->params.update.lazy) {
    f98e:	4558      	cmp	r0, fp
    f990:	f67f ae8e 	bls.w	f6b0 <ticker_job+0x278>
					   ticker_remainder_inc(ticker);
    f994:	6a21      	ldr	r1, [r4, #32]
    f996:	9108      	str	r1, [sp, #32]
    f998:	f106 0e01 	add.w	lr, r6, #1
    f99c:	4659      	mov	r1, fp
    f99e:	920c      	str	r2, [sp, #48]	; 0x30
    f9a0:	e008      	b.n	f9b4 <ticker_job+0x57c>
	ticker->remainder_current += ticker->remainder_periodic;
    f9a2:	6260      	str	r0, [r4, #36]	; 0x24
    f9a4:	46b3      	mov	fp, r6
		while (ticker->lazy_current < user_op->params.update.lazy) {
    f9a6:	8aa8      	ldrh	r0, [r5, #20]
			ticker->lazy_current++;
    f9a8:	3101      	adds	r1, #1
    f9aa:	b289      	uxth	r1, r1
		while (ticker->lazy_current < user_op->params.update.lazy) {
    f9ac:	4281      	cmp	r1, r0
			ticks_to_expire += ticker->ticks_periodic +
    f9ae:	445b      	add	r3, fp
		while (ticker->lazy_current < user_op->params.update.lazy) {
    f9b0:	f4bf ae7c 	bcs.w	f6ac <ticker_job+0x274>
	ticker->remainder_current += ticker->remainder_periodic;
    f9b4:	9a08      	ldr	r2, [sp, #32]
    f9b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if ((ticker->remainder_current < BIT(31)) &&
    f9b8:	f8df b2cc 	ldr.w	fp, [pc, #716]	; fc88 <ticker_job+0x850>
	ticker->remainder_current += ticker->remainder_periodic;
    f9bc:	4410      	add	r0, r2
	if ((ticker->remainder_current < BIT(31)) &&
    f9be:	4ab1      	ldr	r2, [pc, #708]	; (fc84 <ticker_job+0x84c>)
    f9c0:	4483      	add	fp, r0
    f9c2:	4593      	cmp	fp, r2
    f9c4:	d8ed      	bhi.n	f9a2 <ticker_job+0x56a>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    f9c6:	f1a0 70e8 	sub.w	r0, r0, #30408704	; 0x1d00000
    f9ca:	f5a0 30d4 	sub.w	r0, r0, #108544	; 0x1a800
    f9ce:	f5a0 70a5 	sub.w	r0, r0, #330	; 0x14a
    f9d2:	6260      	str	r0, [r4, #36]	; 0x24
		return 1;
    f9d4:	46f3      	mov	fp, lr
    f9d6:	e7e6      	b.n	f9a6 <ticker_job+0x56e>
	if (flag_elapsed) {
    f9d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    f9da:	2a00      	cmp	r2, #0
    f9dc:	f000 8218 	beq.w	fe10 <ticker_job+0x9d8>
	pending = 0U;
    f9e0:	9b06      	ldr	r3, [sp, #24]
    f9e2:	9309      	str	r3, [sp, #36]	; 0x24
	insert_head = TICKER_NULL;
    f9e4:	23ff      	movs	r3, #255	; 0xff
    f9e6:	9301      	str	r3, [sp, #4]
	ticks_now = cntr_cnt_get();
    f9e8:	f00b ffd0 	bl	1b98c <cntr_cnt_get>
	node = &instance->nodes[0];
    f9ec:	f8db 3000 	ldr.w	r3, [fp]
	while (instance->ticker_id_head != TICKER_NULL) {
    f9f0:	f89b 501d 	ldrb.w	r5, [fp, #29]
	node = &instance->nodes[0];
    f9f4:	9304      	str	r3, [sp, #16]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    f9f6:	9b07      	ldr	r3, [sp, #28]
	while (instance->ticker_id_head != TICKER_NULL) {
    f9f8:	2dff      	cmp	r5, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    f9fa:	eba0 0003 	sub.w	r0, r0, r3
    f9fe:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
	while (instance->ticker_id_head != TICKER_NULL) {
    fa02:	d04d      	beq.n	faa0 <ticker_job+0x668>
    fa04:	f8dd a008 	ldr.w	sl, [sp, #8]
	ticks_expired = 0U;
    fa08:	f04f 0900 	mov.w	r9, #0
		ticker = &node[id_expired];
    fa0c:	9b04      	ldr	r3, [sp, #16]
    fa0e:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    fa12:	eb03 1404 	add.w	r4, r3, r4, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
    fa16:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    fa18:	4553      	cmp	r3, sl
    fa1a:	f200 8412 	bhi.w	10242 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x243>
		if (instance->ticks_slot_previous > ticks_to_expire) {
    fa1e:	f8db 2018 	ldr.w	r2, [fp, #24]
		skip_collision = (ticker->lazy_current != 0U);
    fa22:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
		if (instance->ticks_slot_previous > ticks_to_expire) {
    fa26:	4293      	cmp	r3, r2
		ticks_elapsed -= ticks_to_expire;
    fa28:	ebaa 0a03 	sub.w	sl, sl, r3
		ticks_expired += ticks_to_expire;
    fa2c:	4499      	add	r9, r3
		ticks_latency -= ticks_to_expire;
    fa2e:	eba8 0803 	sub.w	r8, r8, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    fa32:	bf25      	ittet	cs
    fa34:	f04f 33ff 	movcs.w	r3, #4294967295	; 0xffffffff
    fa38:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous -= ticks_to_expire;
    fa3c:	1ad3      	subcc	r3, r2, r3
			instance->ticks_slot_previous = 0U;
    fa3e:	2300      	movcs	r3, #0
    fa40:	f8cb 3018 	str.w	r3, [fp, #24]
		state = (ticker->req - ticker->ack) & 0xff;
    fa44:	7860      	ldrb	r0, [r4, #1]
    fa46:	78a1      	ldrb	r1, [r4, #2]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    fa48:	69a7      	ldr	r7, [r4, #24]
    fa4a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    fa4c:	f894 c000 	ldrb.w	ip, [r4]
    fa50:	6866      	ldr	r6, [r4, #4]
    fa52:	9703      	str	r7, [sp, #12]
		state = (ticker->req - ticker->ack) & 0xff;
    fa54:	1a43      	subs	r3, r0, r1
    fa56:	b2db      	uxtb	r3, r3
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    fa58:	b117      	cbz	r7, fa60 <ticker_job+0x628>
    fa5a:	2b02      	cmp	r3, #2
    fa5c:	f000 8148 	beq.w	fcf0 <ticker_job+0x8b8>
		ticker->ticks_to_expire = 0U;
    fa60:	2700      	movs	r7, #0
    fa62:	60a7      	str	r7, [r4, #8]
		instance->ticker_id_head = ticker->next;
    fa64:	f88b c01d 	strb.w	ip, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
    fa68:	2e00      	cmp	r6, #0
    fa6a:	f040 80f9 	bne.w	fc60 <ticker_job+0x828>
    fa6e:	b11a      	cbz	r2, fa78 <ticker_job+0x640>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
    fa70:	7a12      	ldrb	r2, [r2, #8]
    fa72:	2a01      	cmp	r2, #1
    fa74:	f000 80d5 	beq.w	fc22 <ticker_job+0x7ea>
			if (state && ((state == 1U) || skip_collision) &&
    fa78:	b153      	cbz	r3, fa90 <ticker_job+0x658>
    fa7a:	2b01      	cmp	r3, #1
    fa7c:	d002      	beq.n	fa84 <ticker_job+0x64c>
    fa7e:	f1be 0f00 	cmp.w	lr, #0
    fa82:	d005      	beq.n	fa90 <ticker_job+0x658>
			    ticker->fp_op_func) {
    fa84:	6a23      	ldr	r3, [r4, #32]
			if (state && ((state == 1U) || skip_collision) &&
    fa86:	b11b      	cbz	r3, fa90 <ticker_job+0x658>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
    fa88:	6a61      	ldr	r1, [r4, #36]	; 0x24
    fa8a:	2001      	movs	r0, #1
    fa8c:	4798      	blx	r3
    fa8e:	78a1      	ldrb	r1, [r4, #2]
			ticker->req = ticker->ack;
    fa90:	7061      	strb	r1, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
    fa92:	f89b 501d 	ldrb.w	r5, [fp, #29]
    fa96:	2dff      	cmp	r5, #255	; 0xff
    fa98:	d1b8      	bne.n	fa0c <ticker_job+0x5d4>
    fa9a:	f8db 3000 	ldr.w	r3, [fp]
    fa9e:	9304      	str	r3, [sp, #16]
			flag_compare_update = 1U;
    faa0:	9806      	ldr	r0, [sp, #24]
	count_user = instance->count_user;
    faa2:	f89b 2009 	ldrb.w	r2, [fp, #9]
			flag_compare_update = 1U;
    faa6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	users = &instance->users[0];
    faa8:	f8db 1004 	ldr.w	r1, [fp, #4]
    faac:	9107      	str	r1, [sp, #28]
	while (count_user--) {
    faae:	1e53      	subs	r3, r2, #1
			flag_compare_update = 1U;
    fab0:	42a5      	cmp	r5, r4
    fab2:	bf18      	it	ne
    fab4:	2001      	movne	r0, #1
    fab6:	9006      	str	r0, [sp, #24]
	while (count_user--) {
    fab8:	b2db      	uxtb	r3, r3
    faba:	2a00      	cmp	r2, #0
    fabc:	f000 812f 	beq.w	fd1e <ticker_job+0x8e6>
    fac0:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
		user_ops = (void *)&user->user_op[0];
    fac4:	f8d8 3004 	ldr.w	r3, [r8, #4]
		user_ops_first = user->first;
    fac8:	f898 6001 	ldrb.w	r6, [r8, #1]
		user_ops = (void *)&user->user_op[0];
    facc:	9305      	str	r3, [sp, #20]
		while ((insert_head != TICKER_NULL) ||
    face:	9b01      	ldr	r3, [sp, #4]
    fad0:	2bff      	cmp	r3, #255	; 0xff
    fad2:	d062      	beq.n	fb9a <ticker_job+0x762>
				ticker = &node[id_insert];
    fad4:	f8dd a004 	ldr.w	sl, [sp, #4]
    fad8:	9b04      	ldr	r3, [sp, #16]
    fada:	fa0f f48a 	sxth.w	r4, sl
    fade:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    fae2:	ea4f 1c04 	mov.w	ip, r4, lsl #4
    fae6:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				insert_head = ticker->next;
    faea:	f813 300c 	ldrb.w	r3, [r3, ip]
    faee:	9301      	str	r3, [sp, #4]
				user_op = NULL;
    faf0:	2500      	movs	r5, #0
	ticker->next = TICKER_NULL;
    faf2:	22ff      	movs	r2, #255	; 0xff
    faf4:	7022      	strb	r2, [r4, #0]
	(void)ticker_enqueue(instance, id_insert);
    faf6:	f8db 7000 	ldr.w	r7, [fp]
	current = instance->ticker_id_head;
    fafa:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticker_new = &node[id];
    fafe:	eb07 000c 	add.w	r0, r7, ip
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    fb02:	4293      	cmp	r3, r2
	ticks_to_expire = ticker_new->ticks_to_expire;
    fb04:	6881      	ldr	r1, [r0, #8]
	previous = TICKER_NULL;
    fb06:	bf18      	it	ne
    fb08:	9203      	strne	r2, [sp, #12]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    fb0a:	d112      	bne.n	fb32 <ticker_job+0x6fa>
    fb0c:	e2ff      	b.n	1010e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x10f>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
    fb0e:	ebb1 010c 	subs.w	r1, r1, ip
    fb12:	d106      	bne.n	fb22 <ticker_job+0x6ea>
    fb14:	f8be e01e 	ldrh.w	lr, [lr, #30]
    fb18:	f8b0 901e 	ldrh.w	r9, [r0, #30]
    fb1c:	45f1      	cmp	r9, lr
    fb1e:	f200 8343 	bhi.w	101a8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1a9>
		current = ticker_current->next;
    fb22:	f817 c002 	ldrb.w	ip, [r7, r2]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    fb26:	9303      	str	r3, [sp, #12]
    fb28:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    fb2c:	f000 82e3 	beq.w	100f6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xf7>
    fb30:	4663      	mov	r3, ip
		(ticker_current = &node[current])->ticks_to_expire))) {
    fb32:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
    fb36:	eb07 1e0c 	add.w	lr, r7, ip, lsl #4
    fb3a:	ea4f 120c 	mov.w	r2, ip, lsl #4
		(ticks_to_expire_current =
    fb3e:	f8de c008 	ldr.w	ip, [lr, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    fb42:	458c      	cmp	ip, r1
    fb44:	d9e3      	bls.n	fb0e <ticker_job+0x6d6>
    fb46:	9a03      	ldr	r2, [sp, #12]
	ticker_new->ticks_to_expire = ticks_to_expire;
    fb48:	6081      	str	r1, [r0, #8]
	if (previous == TICKER_NULL) {
    fb4a:	2aff      	cmp	r2, #255	; 0xff
	ticker_new->next = current;
    fb4c:	7003      	strb	r3, [r0, #0]
	if (previous == TICKER_NULL) {
    fb4e:	f040 82d7 	bne.w	10100 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x101>
		instance->ticker_id_head = id;
    fb52:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
    fb56:	2bff      	cmp	r3, #255	; 0xff
    fb58:	d006      	beq.n	fb68 <ticker_job+0x730>
		node[current].ticks_to_expire -= ticks_to_expire;
    fb5a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    fb5e:	eb07 1703 	add.w	r7, r7, r3, lsl #4
    fb62:	68bb      	ldr	r3, [r7, #8]
    fb64:	1a59      	subs	r1, r3, r1
    fb66:	60b9      	str	r1, [r7, #8]
	ticker->req = ticker->ack + 1;
    fb68:	78a3      	ldrb	r3, [r4, #2]
    fb6a:	3301      	adds	r3, #1
    fb6c:	7063      	strb	r3, [r4, #1]
			if (user_op) {
    fb6e:	2d00      	cmp	r5, #0
    fb70:	d0ad      	beq.n	face <ticker_job+0x696>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    fb72:	f04f 0200 	mov.w	r2, #0
	if (user_op->fp_op_func) {
    fb76:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    fb78:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
    fb7a:	2200      	movs	r2, #0
    fb7c:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    fb7e:	b113      	cbz	r3, fb86 <ticker_job+0x74e>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    fb80:	6b29      	ldr	r1, [r5, #48]	; 0x30
    fb82:	4610      	mov	r0, r2
    fb84:	4798      	blx	r3
				if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    fb86:	6863      	ldr	r3, [r4, #4]
    fb88:	2b00      	cmp	r3, #0
    fb8a:	d1a0      	bne.n	face <ticker_job+0x696>
					ticker->op_context =
    fb8c:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
    fb90:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
    fb94:	9b01      	ldr	r3, [sp, #4]
    fb96:	2bff      	cmp	r3, #255	; 0xff
    fb98:	d19c      	bne.n	fad4 <ticker_job+0x69c>
    fb9a:	f898 3002 	ldrb.w	r3, [r8, #2]
    fb9e:	42b3      	cmp	r3, r6
    fba0:	d030      	beq.n	fc04 <ticker_job+0x7cc>
    fba2:	9f05      	ldr	r7, [sp, #20]
				if (first == user->count_user_op) {
    fba4:	f898 0000 	ldrb.w	r0, [r8]
				user_op = &user_ops[user_ops_first];
    fba8:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    fbac:	eb06 0282 	add.w	r2, r6, r2, lsl #2
				first = user_ops_first + 1;
    fbb0:	3601      	adds	r6, #1
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    fbb2:	f817 1022 	ldrb.w	r1, [r7, r2, lsl #2]
				first = user_ops_first + 1;
    fbb6:	b2f6      	uxtb	r6, r6
					first = 0U;
    fbb8:	42b0      	cmp	r0, r6
    fbba:	bf08      	it	eq
    fbbc:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    fbbe:	2904      	cmp	r1, #4
				user_op = &user_ops[user_ops_first];
    fbc0:	eb07 0582 	add.w	r5, r7, r2, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    fbc4:	d11c      	bne.n	fc00 <ticker_job+0x7c8>
				id_insert = user_op->id;
    fbc6:	f895 a001 	ldrb.w	sl, [r5, #1]
				ticker = &node[id_insert];
    fbca:	9b04      	ldr	r3, [sp, #16]
    fbcc:	eb0a 0c4a 	add.w	ip, sl, sl, lsl #1
    fbd0:	eb03 140c 	add.w	r4, r3, ip, lsl #4
    fbd4:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
				if (((ticker->req -
    fbd8:	7861      	ldrb	r1, [r4, #1]
				      ticker->ack) & 0xff) != 0U) {
    fbda:	78a3      	ldrb	r3, [r4, #2]
				if (((ticker->req -
    fbdc:	1ac9      	subs	r1, r1, r3
    fbde:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    fbe2:	f000 8299 	beq.w	10118 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x119>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    fbe6:	f04f 0300 	mov.w	r3, #0
    fbea:	f807 3022 	strb.w	r3, [r7, r2, lsl #2]
	if (user_op->fp_op_func) {
    fbee:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->status = status;
    fbf0:	2201      	movs	r2, #1
    fbf2:	62aa      	str	r2, [r5, #40]	; 0x28
		user_op->fp_op_func(user_op->status, user_op->op_context);
    fbf4:	4610      	mov	r0, r2
	if (user_op->fp_op_func) {
    fbf6:	b10b      	cbz	r3, fbfc <ticker_job+0x7c4>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    fbf8:	6b29      	ldr	r1, [r5, #48]	; 0x30
    fbfa:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
    fbfc:	f898 3002 	ldrb.w	r3, [r8, #2]
    fc00:	42b3      	cmp	r3, r6
    fc02:	d1cf      	bne.n	fba4 <ticker_job+0x76c>
	while (count_user--) {
    fc04:	9a07      	ldr	r2, [sp, #28]
    fc06:	4542      	cmp	r2, r8
    fc08:	f1a8 0308 	sub.w	r3, r8, #8
    fc0c:	f000 8084 	beq.w	fd18 <ticker_job+0x8e0>
    fc10:	4698      	mov	r8, r3
    fc12:	e757      	b.n	fac4 <ticker_job+0x68c>
		ticker->ticks_to_expire = 0U;
    fc14:	f8c4 e008 	str.w	lr, [r4, #8]
		instance->ticker_id_head = ticker->next;
    fc18:	f88b c01d 	strb.w	ip, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
    fc1c:	2e00      	cmp	r6, #0
    fc1e:	f43f af27 	beq.w	fa70 <ticker_job+0x638>
				ticker->req = ticker->ack;
    fc22:	4653      	mov	r3, sl
			ticks_to_expire_prep(ticker, instance->ticks_current,
    fc24:	9e07      	ldr	r6, [sp, #28]
    fc26:	f8db 2014 	ldr.w	r2, [fp, #20]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    fc2a:	6960      	ldr	r0, [r4, #20]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    fc2c:	eb06 0709 	add.w	r7, r6, r9
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    fc30:	1abe      	subs	r6, r7, r2
    fc32:	f416 0f00 	tst.w	r6, #8388608	; 0x800000
    fc36:	d14d      	bne.n	fcd4 <ticker_job+0x89c>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    fc38:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    fc3c:	4433      	add	r3, r6
	if (ticks_to_expire > ticks_to_expire_minus) {
    fc3e:	4298      	cmp	r0, r3
    fc40:	d250      	bcs.n	fce4 <ticker_job+0x8ac>
		ticks_to_expire -= ticks_to_expire_minus;
    fc42:	1a1b      	subs	r3, r3, r0
		ticks_to_expire_minus = 0U;
    fc44:	2000      	movs	r0, #0
			ticker->next = *insert_head;
    fc46:	9a01      	ldr	r2, [sp, #4]
    fc48:	7022      	strb	r2, [r4, #0]
			ticker->req++;
    fc4a:	3101      	adds	r1, #1
    fc4c:	7061      	strb	r1, [r4, #1]
	ticker->ticks_to_expire = ticks_to_expire;
    fc4e:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    fc50:	6160      	str	r0, [r4, #20]
			ticker->req++;
    fc52:	9501      	str	r5, [sp, #4]
	while (instance->ticker_id_head != TICKER_NULL) {
    fc54:	f89b 501d 	ldrb.w	r5, [fp, #29]
    fc58:	2dff      	cmp	r5, #255	; 0xff
    fc5a:	f47f aed7 	bne.w	fa0c <ticker_job+0x5d4>
    fc5e:	e71c      	b.n	fa9a <ticker_job+0x662>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
    fc60:	b112      	cbz	r2, fc68 <ticker_job+0x830>
    fc62:	7a13      	ldrb	r3, [r2, #8]
    fc64:	2b01      	cmp	r3, #1
    fc66:	d0dc      	beq.n	fc22 <ticker_job+0x7ea>
				if (!ticker->lazy_current) {
    fc68:	f1be 0f00 	cmp.w	lr, #0
    fc6c:	d151      	bne.n	fd12 <ticker_job+0x8da>
					lazy_periodic = ticker->lazy_periodic;
    fc6e:	8ba7      	ldrh	r7, [r4, #28]
    fc70:	9705      	str	r7, [sp, #20]
    fc72:	4601      	mov	r1, r0
						ticker_remainder_inc(ticker);
    fc74:	6a23      	ldr	r3, [r4, #32]
    fc76:	9303      	str	r3, [sp, #12]
    fc78:	6a62      	ldr	r2, [r4, #36]	; 0x24
    fc7a:	9108      	str	r1, [sp, #32]
				ticks_to_expire = 0U;
    fc7c:	2300      	movs	r3, #0
    fc7e:	1c70      	adds	r0, r6, #1
    fc80:	e009      	b.n	fc96 <ticker_job+0x85e>
    fc82:	bf00      	nop
    fc84:	7f172b59 	.word	0x7f172b59
    fc88:	ff172b5a 	.word	0xff172b5a
				while (count--) {
    fc8c:	3f01      	subs	r7, #1
    fc8e:	46b4      	mov	ip, r6
    fc90:	1c79      	adds	r1, r7, #1
					ticks_to_expire +=
    fc92:	4463      	add	r3, ip
				while (count--) {
    fc94:	d012      	beq.n	fcbc <ticker_job+0x884>
	ticker->remainder_current += ticker->remainder_periodic;
    fc96:	9903      	ldr	r1, [sp, #12]
	if ((ticker->remainder_current < BIT(31)) &&
    fc98:	f8df c2c4 	ldr.w	ip, [pc, #708]	; ff60 <ticker_job+0xb28>
	ticker->remainder_current += ticker->remainder_periodic;
    fc9c:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
    fc9e:	49ad      	ldr	r1, [pc, #692]	; (ff54 <ticker_job+0xb1c>)
    fca0:	4494      	add	ip, r2
    fca2:	458c      	cmp	ip, r1
    fca4:	d8f2      	bhi.n	fc8c <ticker_job+0x854>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    fca6:	f1a2 72e8 	sub.w	r2, r2, #30408704	; 0x1d00000
				while (count--) {
    fcaa:	3f01      	subs	r7, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    fcac:	f5a2 32d4 	sub.w	r2, r2, #108544	; 0x1a800
    fcb0:	4684      	mov	ip, r0
				while (count--) {
    fcb2:	1c79      	adds	r1, r7, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    fcb4:	f5a2 72a5 	sub.w	r2, r2, #330	; 0x14a
					ticks_to_expire +=
    fcb8:	4463      	add	r3, ip
				while (count--) {
    fcba:	d1ec      	bne.n	fc96 <ticker_job+0x85e>
				} else if (!ticker->must_expire) {
    fcbc:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    fcc0:	9908      	ldr	r1, [sp, #32]
    fcc2:	6262      	str	r2, [r4, #36]	; 0x24
    fcc4:	2800      	cmp	r0, #0
    fcc6:	f000 8285 	beq.w	101d4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1d5>
				ticker->lazy_current += (lazy_periodic + lazy);
    fcca:	9a05      	ldr	r2, [sp, #20]
    fccc:	4496      	add	lr, r2
    fcce:	f8a4 e01e 	strh.w	lr, [r4, #30]
    fcd2:	e7a7      	b.n	fc24 <ticker_job+0x7ec>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    fcd4:	1bd2      	subs	r2, r2, r7
    fcd6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    fcda:	429a      	cmp	r2, r3
    fcdc:	d216      	bcs.n	fd0c <ticker_job+0x8d4>
			ticks_to_expire -= delta_current_start;
    fcde:	1a9b      	subs	r3, r3, r2
	if (ticks_to_expire > ticks_to_expire_minus) {
    fce0:	4298      	cmp	r0, r3
    fce2:	d3ae      	bcc.n	fc42 <ticker_job+0x80a>
    fce4:	1ac0      	subs	r0, r0, r3
		ticks_to_expire = 0U;
    fce6:	2300      	movs	r3, #0
    fce8:	e7ad      	b.n	fc46 <ticker_job+0x80e>
    fcea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    fcec:	468b      	mov	fp, r1
    fcee:	e64e      	b.n	f98e <ticker_job+0x556>
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    fcf0:	f1be 0f00 	cmp.w	lr, #0
    fcf4:	f47f aeb4 	bne.w	fa60 <ticker_job+0x628>
    fcf8:	b112      	cbz	r2, fd00 <ticker_job+0x8c8>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
    fcfa:	7a17      	ldrb	r7, [r2, #8]
    fcfc:	2f01      	cmp	r7, #1
    fcfe:	d089      	beq.n	fc14 <ticker_job+0x7dc>
			instance->ticks_slot_previous = ticker->ticks_slot;
    fd00:	9f03      	ldr	r7, [sp, #12]
			instance->ticker_id_slot_previous = id_expired;
    fd02:	f88b 501c 	strb.w	r5, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    fd06:	f8cb 7018 	str.w	r7, [fp, #24]
    fd0a:	e6a9      	b.n	fa60 <ticker_job+0x628>
			ticks_to_expire_minus +=
    fd0c:	4410      	add	r0, r2
    fd0e:	1ac0      	subs	r0, r0, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    fd10:	e7e9      	b.n	fce6 <ticker_job+0x8ae>
    fd12:	2700      	movs	r7, #0
					lazy_periodic = 0U;
    fd14:	9705      	str	r7, [sp, #20]
    fd16:	e7ad      	b.n	fc74 <ticker_job+0x83c>
    fd18:	f8db 3000 	ldr.w	r3, [fp]
    fd1c:	9304      	str	r3, [sp, #16]
	while (rescheduling) {
    fd1e:	f89b c01d 	ldrb.w	ip, [fp, #29]
    fd22:	9e04      	ldr	r6, [sp, #16]
	uint8_t  rescheduled = 0U;
    fd24:	2300      	movs	r3, #0
		while (ticker_id_head != TICKER_NULL) {
    fd26:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    fd2a:	d010      	beq.n	fd4e <ticker_job+0x916>
    fd2c:	46e2      	mov	sl, ip
			ticker = &nodes[ticker_id_head];
    fd2e:	fa0f f28a 	sxth.w	r2, sl
    fd32:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    fd36:	eb06 1202 	add.w	r2, r6, r2, lsl #4
			ext_data = ticker->ext_data;
    fd3a:	6a97      	ldr	r7, [r2, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
    fd3c:	b117      	cbz	r7, fd44 <ticker_job+0x90c>
    fd3e:	7a39      	ldrb	r1, [r7, #8]
    fd40:	2901      	cmp	r1, #1
    fd42:	d076      	beq.n	fe32 <ticker_job+0x9fa>
			ticker_id_head = ticker->next;
    fd44:	f892 a000 	ldrb.w	sl, [r2]
		while (ticker_id_head != TICKER_NULL) {
    fd48:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    fd4c:	d1ef      	bne.n	fd2e <ticker_job+0x8f6>
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
    fd4e:	2b00      	cmp	r3, #0
    fd50:	d052      	beq.n	fdf8 <ticker_job+0x9c0>
	if (instance->ticker_id_head != ticker_id_old_head) {
    fd52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    fd54:	4562      	cmp	r2, ip
    fd56:	f000 827b 	beq.w	10250 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x251>
	if (!pending) {
    fd5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fd5c:	2b00      	cmp	r3, #0
    fd5e:	f000 80e4 	beq.w	ff2a <ticker_job+0xaf2>
    fd62:	f89b c01d 	ldrb.w	ip, [fp, #29]
	if (instance->ticker_id_head == TICKER_NULL) {
    fd66:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    fd6a:	f000 827f 	beq.w	1026c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x26d>
	if (ticker_id_old_head == TICKER_NULL) {
    fd6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fd70:	2bff      	cmp	r3, #255	; 0xff
    fd72:	f000 8293 	beq.w	1029c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x29d>
	ticks_to_expire = ticker->ticks_to_expire;
    fd76:	f8db 3000 	ldr.w	r3, [fp]
		LL_ASSERT(i);
    fd7a:	f8df 81e8 	ldr.w	r8, [pc, #488]	; ff64 <ticker_job+0xb2c>
    fd7e:	4f76      	ldr	r7, [pc, #472]	; (ff58 <ticker_job+0xb20>)
    fd80:	4e76      	ldr	r6, [pc, #472]	; (ff5c <ticker_job+0xb24>)
	ticker = &instance->nodes[instance->ticker_id_head];
    fd82:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
    fd86:	eb03 130c 	add.w	r3, r3, ip, lsl #4
	i = 10U;
    fd8a:	250a      	movs	r5, #10
	ticks_to_expire = ticker->ticks_to_expire;
    fd8c:	f8d3 9008 	ldr.w	r9, [r3, #8]
		ctr = cntr_cnt_get();
    fd90:	f00b fdfc 	bl	1b98c <cntr_cnt_get>
		cc = instance->ticks_current;
    fd94:	f8db 3014 	ldr.w	r3, [fp, #20]
		instance->trigger_set_cb(cc);
    fd98:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    fd9c:	1ac4      	subs	r4, r0, r3
    fd9e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    fda2:	3403      	adds	r4, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
    fda4:	454c      	cmp	r4, r9
    fda6:	bf2c      	ite	cs
    fda8:	191b      	addcs	r3, r3, r4
    fdaa:	444b      	addcc	r3, r9
		cc &= HAL_TICKER_CNTR_MASK;
    fdac:	f023 447f 	bic.w	r4, r3, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
    fdb0:	4682      	mov	sl, r0
		instance->trigger_set_cb(cc);
    fdb2:	4620      	mov	r0, r4
    fdb4:	4790      	blx	r2
		ctr_post = cntr_cnt_get();
    fdb6:	f00b fde9 	bl	1b98c <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    fdba:	eba0 000a 	sub.w	r0, r0, sl
    fdbe:	eba4 040a 	sub.w	r4, r4, sl
    fdc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    fdc6:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    fdca:	3003      	adds	r0, #3
		  ticker_ticks_diff_get(cc, ctr));
    fdcc:	42a0      	cmp	r0, r4
		i--;
    fdce:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		  ticker_ticks_diff_get(cc, ctr));
    fdd2:	d91b      	bls.n	fe0c <ticker_job+0x9d4>
		LL_ASSERT(i);
    fdd4:	2d00      	cmp	r5, #0
    fdd6:	d1db      	bne.n	fd90 <ticker_job+0x958>
    fdd8:	f640 03f3 	movw	r3, #2291	; 0x8f3
    fddc:	4642      	mov	r2, r8
    fdde:	4639      	mov	r1, r7
    fde0:	4630      	mov	r0, r6
    fde2:	f014 fbff 	bl	245e4 <printk>
    fde6:	4040      	eors	r0, r0
    fde8:	f380 8811 	msr	BASEPRI, r0
    fdec:	f04f 0003 	mov.w	r0, #3
    fdf0:	df02      	svc	2
    fdf2:	e7cd      	b.n	fd90 <ticker_job+0x958>
    fdf4:	f89b c01d 	ldrb.w	ip, [fp, #29]
	if (instance->ticker_id_head != ticker_id_old_head) {
    fdf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fdfa:	4563      	cmp	r3, ip
    fdfc:	d1ad      	bne.n	fd5a <ticker_job+0x922>
	if (!pending) {
    fdfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fe00:	2b00      	cmp	r3, #0
    fe02:	f000 8241 	beq.w	10288 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x289>
	if (flag_compare_update) {
    fe06:	9b06      	ldr	r3, [sp, #24]
    fe08:	2b00      	cmp	r3, #0
    fe0a:	d1aa      	bne.n	fd62 <ticker_job+0x92a>
    fe0c:	f89b 301f 	ldrb.w	r3, [fp, #31]
	instance->job_guard = 0U;
    fe10:	2200      	movs	r2, #0
    fe12:	f88b 201e 	strb.w	r2, [fp, #30]
	if (instance->worker_trigger) {
    fe16:	2b00      	cmp	r3, #0
    fe18:	f000 81d8 	beq.w	101cc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1cd>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    fe1c:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    fe20:	465b      	mov	r3, fp
    fe22:	2201      	movs	r2, #1
    fe24:	2103      	movs	r1, #3
    fe26:	2004      	movs	r0, #4
    fe28:	46a4      	mov	ip, r4
}
    fe2a:	b00f      	add	sp, #60	; 0x3c
    fe2c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    fe30:	4760      	bx	ip
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
    fe32:	f89b 301c 	ldrb.w	r3, [fp, #28]
    fe36:	2bff      	cmp	r3, #255	; 0xff
    fe38:	d042      	beq.n	fec0 <ticker_job+0xa88>
			instance->ticks_slot_previous > ticks_elapsed) {
    fe3a:	f8db 0018 	ldr.w	r0, [fp, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
    fe3e:	9b02      	ldr	r3, [sp, #8]
    fe40:	4283      	cmp	r3, r0
    fe42:	d23d      	bcs.n	fec0 <ticker_job+0xa88>
			window_start_ticks = instance->ticks_slot_previous -
    fe44:	1ac3      	subs	r3, r0, r3
    fe46:	9301      	str	r3, [sp, #4]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    fe48:	e9d7 4300 	ldrd	r4, r3, [r7]
    fe4c:	42a3      	cmp	r3, r4
		ticker_id_iter = nodes[ticker_id_head].next;
    fe4e:	f892 e000 	ldrb.w	lr, [r2]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    fe52:	d23d      	bcs.n	fed0 <ticker_job+0xa98>
		while (ticker_id_iter != TICKER_NULL &&
    fe54:	f1be 0fff 	cmp.w	lr, #255	; 0xff
			ticks_slot_window = ext_data->ticks_slot_window -
    fe58:	eba4 0403 	sub.w	r4, r4, r3
		while (ticker_id_iter != TICKER_NULL &&
    fe5c:	d038      	beq.n	fed0 <ticker_job+0xa98>
		       ticks_start_offset + ticker->ticks_slot <=
    fe5e:	6995      	ldr	r5, [r2, #24]
		while (ticker_id_iter != TICKER_NULL &&
    fe60:	42ac      	cmp	r4, r5
    fe62:	f04f 0300 	mov.w	r3, #0
    fe66:	d337      	bcc.n	fed8 <ticker_job+0xaa0>
    fe68:	4699      	mov	r9, r3
    fe6a:	4671      	mov	r1, lr
    fe6c:	9203      	str	r2, [sp, #12]
    fe6e:	46a8      	mov	r8, r5
    fe70:	e01a      	b.n	fea8 <ticker_job+0xa70>
			if (node->ticks_to_expire >
    fe72:	6888      	ldr	r0, [r1, #8]
					MIN(ticks_slot_window,
    fe74:	1f03      	subs	r3, r0, #4
			if (node->ticks_to_expire >
    fe76:	2804      	cmp	r0, #4
					MIN(ticks_slot_window,
    fe78:	444b      	add	r3, r9
			if (node->ticks_to_expire >
    fe7a:	d909      	bls.n	fe90 <ticker_job+0xa58>
				window_end_ticks =
    fe7c:	42a3      	cmp	r3, r4
    fe7e:	bf28      	it	cs
    fe80:	4623      	movcs	r3, r4
			if (window_end_ticks > ticks_start_offset +
    fe82:	4543      	cmp	r3, r8
    fe84:	d904      	bls.n	fe90 <ticker_job+0xa58>
			if (ticks_to_expire != 0U &&
    fe86:	1b5b      	subs	r3, r3, r5
    fe88:	d002      	beq.n	fe90 <ticker_job+0xa58>
    fe8a:	9a01      	ldr	r2, [sp, #4]
    fe8c:	4293      	cmp	r3, r2
    fe8e:	d222      	bcs.n	fed6 <ticker_job+0xa9e>
			window_start_ticks  = node->ticks_to_expire +
    fe90:	698b      	ldr	r3, [r1, #24]
			ticker_id_iter = node->next;
    fe92:	7809      	ldrb	r1, [r1, #0]
			window_start_ticks  = node->ticks_to_expire +
    fe94:	18c3      	adds	r3, r0, r3
    fe96:	9301      	str	r3, [sp, #4]
			ticks_start_offset += node->ticks_to_expire;
    fe98:	4481      	add	r9, r0
			ticks_to_expire     = ticks_slot_window -
    fe9a:	1b63      	subs	r3, r4, r5
		while (ticker_id_iter != TICKER_NULL &&
    fe9c:	29ff      	cmp	r1, #255	; 0xff
		       ticks_start_offset + ticker->ticks_slot <=
    fe9e:	eb09 0805 	add.w	r8, r9, r5
		while (ticker_id_iter != TICKER_NULL &&
    fea2:	d018      	beq.n	fed6 <ticker_job+0xa9e>
    fea4:	4544      	cmp	r4, r8
    fea6:	d316      	bcc.n	fed6 <ticker_job+0xa9e>
			node = &nodes[ticker_id_iter];
    fea8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    feac:	eb06 1101 	add.w	r1, r6, r1, lsl #4
			if (node->ext_data &&
    feb0:	6a88      	ldr	r0, [r1, #40]	; 0x28
    feb2:	2800      	cmp	r0, #0
    feb4:	d0dd      	beq.n	fe72 <ticker_job+0xa3a>
    feb6:	7a00      	ldrb	r0, [r0, #8]
    feb8:	2801      	cmp	r0, #1
    feba:	d1da      	bne.n	fe72 <ticker_job+0xa3a>
				ticker_id_iter = node->next;
    febc:	7809      	ldrb	r1, [r1, #0]
				continue;
    febe:	e7ed      	b.n	fe9c <ticker_job+0xa64>
		window_start_ticks = 0U;
    fec0:	2300      	movs	r3, #0
    fec2:	9301      	str	r3, [sp, #4]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    fec4:	e9d7 4300 	ldrd	r4, r3, [r7]
    fec8:	42a3      	cmp	r3, r4
		ticker_id_iter = nodes[ticker_id_head].next;
    feca:	f892 e000 	ldrb.w	lr, [r2]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    fece:	d3c1      	bcc.n	fe54 <ticker_job+0xa1c>
		ticker->ticks_to_expire = ticks_to_expire;
    fed0:	2300      	movs	r3, #0
    fed2:	6093      	str	r3, [r2, #8]
		while (ticker_id_iter != TICKER_NULL) {
    fed4:	e021      	b.n	ff1a <ticker_job+0xae2>
    fed6:	9a03      	ldr	r2, [sp, #12]
		ticker->ticks_to_expire = ticks_to_expire;
    fed8:	6093      	str	r3, [r2, #8]
    feda:	4674      	mov	r4, lr
    fedc:	f04f 09ff 	mov.w	r9, #255	; 0xff
    fee0:	e000      	b.n	fee4 <ticker_job+0xaac>
    fee2:	4604      	mov	r4, r0
			node = &nodes[ticker_id_iter];
    fee4:	b221      	sxth	r1, r4
    fee6:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    feea:	eb06 1800 	add.w	r8, r6, r0, lsl #4
    feee:	0100      	lsls	r0, r0, #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
    fef0:	f8d8 5008 	ldr.w	r5, [r8, #8]
    fef4:	429d      	cmp	r5, r3
    fef6:	f080 819a 	bcs.w	1022e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x22f>
				ticker->ticks_to_expire -=
    fefa:	1b5b      	subs	r3, r3, r5
    fefc:	6093      	str	r3, [r2, #8]
			ticker_id_iter = node->next;
    fefe:	5c30      	ldrb	r0, [r6, r0]
		while (ticker_id_iter != TICKER_NULL) {
    ff00:	28ff      	cmp	r0, #255	; 0xff
    ff02:	46a1      	mov	r9, r4
    ff04:	d1ed      	bne.n	fee2 <ticker_job+0xaaa>
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
    ff06:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    ff0a:	0109      	lsls	r1, r1, #4
			instance->ticker_id_head = nodes[ticker_id_head].next;
    ff0c:	f88b e01d 	strb.w	lr, [fp, #29]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
    ff10:	5c73      	ldrb	r3, [r6, r1]
    ff12:	7013      	strb	r3, [r2, #0]
			nodes[ticker_id_prev].next = ticker_id_head;
    ff14:	f806 a001 	strb.w	sl, [r6, r1]
    ff18:	46f4      	mov	ip, lr
		ticker->lazy_current--;
    ff1a:	8bd3      	ldrh	r3, [r2, #30]
    ff1c:	3b01      	subs	r3, #1
    ff1e:	83d3      	strh	r3, [r2, #30]
		ext_data->reschedule_state =
    ff20:	f04f 0202 	mov.w	r2, #2
		rescheduled  = 1U;
    ff24:	2301      	movs	r3, #1
		ext_data->reschedule_state =
    ff26:	723a      	strb	r2, [r7, #8]
		rescheduled  = 1U;
    ff28:	e6fd      	b.n	fd26 <ticker_job+0x8ee>
	count_user = instance->count_user;
    ff2a:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
    ff2e:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
    ff32:	1e5c      	subs	r4, r3, #1
    ff34:	b2e4      	uxtb	r4, r4
    ff36:	2b00      	cmp	r3, #0
    ff38:	f43f af13 	beq.w	fd62 <ticker_job+0x92a>
		flag_compare_update = 1U;
    ff3c:	2301      	movs	r3, #1
    ff3e:	9306      	str	r3, [sp, #24]
    ff40:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
		uop->status = TICKER_STATUS_SUCCESS;
    ff44:	f04f 0900 	mov.w	r9, #0
		while (user->first != user->last) {
    ff48:	7863      	ldrb	r3, [r4, #1]
    ff4a:	78e1      	ldrb	r1, [r4, #3]
		user_op = &user->user_op[0];
    ff4c:	6865      	ldr	r5, [r4, #4]
		while (user->first != user->last) {
    ff4e:	4299      	cmp	r1, r3
    ff50:	d116      	bne.n	ff80 <ticker_job+0xb48>
    ff52:	e06b      	b.n	1002c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2d>
    ff54:	7f172b59 	.word	0x7f172b59
    ff58:	0002b188 	.word	0x0002b188
    ff5c:	0002b0c4 	.word	0x0002b0c4
    ff60:	ff172b5a 	.word	0xff172b5a
    ff64:	0002b084 	.word	0x0002b084
	switch (uop->op) {
    ff68:	2b01      	cmp	r3, #1
    ff6a:	d05b      	beq.n	10024 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x25>
			first = user->first + 1;
    ff6c:	7863      	ldrb	r3, [r4, #1]
			if (first == user->count_user_op) {
    ff6e:	7822      	ldrb	r2, [r4, #0]
			first = user->first + 1;
    ff70:	3301      	adds	r3, #1
    ff72:	b2db      	uxtb	r3, r3
				first = 0U;
    ff74:	429a      	cmp	r2, r3
    ff76:	bf08      	it	eq
    ff78:	2300      	moveq	r3, #0
		while (user->first != user->last) {
    ff7a:	4299      	cmp	r1, r3
			user->first = first;
    ff7c:	7063      	strb	r3, [r4, #1]
		while (user->first != user->last) {
    ff7e:	d055      	beq.n	1002c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2d>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    ff80:	b21b      	sxth	r3, r3
    ff82:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    ff86:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    ff8a:	eb05 0283 	add.w	r2, r5, r3, lsl #2
	switch (uop->op) {
    ff8e:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
    ff92:	2b02      	cmp	r3, #2
    ff94:	d01b      	beq.n	ffce <ticker_job+0xb96>
    ff96:	2b03      	cmp	r3, #3
    ff98:	d1e6      	bne.n	ff68 <ticker_job+0xb30>
		if (uop->id < instance->count_node) {
    ff9a:	7853      	ldrb	r3, [r2, #1]
    ff9c:	f89b 1008 	ldrb.w	r1, [fp, #8]
    ffa0:	4299      	cmp	r1, r3
    ffa2:	d911      	bls.n	ffc8 <ticker_job+0xb90>
			node[uop->id].priority =
    ffa4:	f8db 1000 	ldr.w	r1, [fp]
    ffa8:	7910      	ldrb	r0, [r2, #4]
    ffaa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    ffae:	eb01 1303 	add.w	r3, r1, r3, lsl #4
    ffb2:	f883 002d 	strb.w	r0, [r3, #45]	; 0x2d
			uop->status = TICKER_STATUS_SUCCESS;
    ffb6:	f8c2 9028 	str.w	r9, [r2, #40]	; 0x28
		fp_op_func = uop->fp_op_func;
    ffba:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	if (fp_op_func) {
    ffbc:	b113      	cbz	r3, ffc4 <ticker_job+0xb8c>
		fp_op_func(uop->status, uop->op_context);
    ffbe:	6b11      	ldr	r1, [r2, #48]	; 0x30
    ffc0:	6a90      	ldr	r0, [r2, #40]	; 0x28
    ffc2:	4798      	blx	r3
    ffc4:	78e1      	ldrb	r1, [r4, #3]
    ffc6:	e7d1      	b.n	ff6c <ticker_job+0xb34>
			uop->status = TICKER_STATUS_FAILURE;
    ffc8:	2301      	movs	r3, #1
    ffca:	6293      	str	r3, [r2, #40]	; 0x28
    ffcc:	e7f5      	b.n	ffba <ticker_job+0xb82>
		ticker_by_next_slot_get(instance,
    ffce:	e9d2 7001 	ldrd	r7, r0, [r2, #4]
	_ticker_id_head = *ticker_id_head;
    ffd2:	f897 e000 	ldrb.w	lr, [r7]
		ticker_by_next_slot_get(instance,
    ffd6:	f8d2 c00c 	ldr.w	ip, [r2, #12]
	node = instance->nodes;
    ffda:	f8db 1000 	ldr.w	r1, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
    ffde:	f8db 8014 	ldr.w	r8, [fp, #20]
    ffe2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
    ffe6:	d003      	beq.n	fff0 <ticker_job+0xbb8>
    ffe8:	6803      	ldr	r3, [r0, #0]
    ffea:	4543      	cmp	r3, r8
    ffec:	f000 80e7 	beq.w	101be <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1bf>
		_ticker_id_head = instance->ticker_id_head;
    fff0:	f89b 301d 	ldrb.w	r3, [fp, #29]
		*ticks_current = instance->ticks_current;
    fff4:	f8c0 8000 	str.w	r8, [r0]
		_ticks_to_expire = 0U;
    fff8:	f04f 0e00 	mov.w	lr, #0
    fffc:	e00d      	b.n	1001a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1b>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0U)) {
    fffe:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   10002:	eb01 1800 	add.w	r8, r1, r0, lsl #4
   10006:	0100      	lsls	r0, r0, #4
   10008:	f8d8 a008 	ldr.w	sl, [r8, #8]
	while ((_ticker_id_head != TICKER_NULL) &&
   1000c:	f8d8 8018 	ldr.w	r8, [r8, #24]
   10010:	44d6      	add	lr, sl
   10012:	f1b8 0f00 	cmp.w	r8, #0
   10016:	d102      	bne.n	1001e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1f>
		_ticker_id_head = ticker->next;
   10018:	5c0b      	ldrb	r3, [r1, r0]
	while ((_ticker_id_head != TICKER_NULL) &&
   1001a:	2bff      	cmp	r3, #255	; 0xff
   1001c:	d1ef      	bne.n	fffe <ticker_job+0xbc6>
	*ticker_id_head = _ticker_id_head;
   1001e:	703b      	strb	r3, [r7, #0]
	*ticks_to_expire = _ticks_to_expire;
   10020:	f8cc e000 	str.w	lr, [ip]
		fp_op_func = uop->fp_op_func;
   10024:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		uop->status = TICKER_STATUS_SUCCESS;
   10026:	f8c2 9028 	str.w	r9, [r2, #40]	; 0x28
		break;
   1002a:	e7c7      	b.n	ffbc <ticker_job+0xb84>
	while (count_user--) {
   1002c:	42a6      	cmp	r6, r4
   1002e:	f1a4 0308 	sub.w	r3, r4, #8
   10032:	f43f aee8 	beq.w	fe06 <ticker_job+0x9ce>
   10036:	461c      	mov	r4, r3
   10038:	e786      	b.n	ff48 <ticker_job+0xb10>
	ticker_new->next = current;
   1003a:	461a      	mov	r2, r3
	ticker_new->ticks_to_expire = ticks_to_expire;
   1003c:	6081      	str	r1, [r0, #8]
	ticker_new->next = current;
   1003e:	f880 c000 	strb.w	ip, [r0]
   10042:	4663      	mov	r3, ip
		node[previous].next = id;
   10044:	b212      	sxth	r2, r2
   10046:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1004a:	0112      	lsls	r2, r2, #4
   1004c:	f807 a002 	strb.w	sl, [r7, r2]
   10050:	e43a      	b.n	f8c8 <ticker_job+0x490>
	ticker_new->next = current;
   10052:	f807 300c 	strb.w	r3, [r7, ip]
		instance->ticker_id_head = id;
   10056:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
   1005a:	e43e      	b.n	f8da <ticker_job+0x4a2>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   1005c:	8aaf      	ldrh	r7, [r5, #20]
				ticker_job_op_start(ticker, user_op,
   1005e:	f8db e014 	ldr.w	lr, [fp, #20]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   10062:	f8d5 9024 	ldr.w	r9, [r5, #36]	; 0x24
   10066:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   1006a:	429f      	cmp	r7, r3
   1006c:	e9d5 0203 	ldrd	r0, r2, [r5, #12]
   10070:	d037      	beq.n	100e2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xe3>
		ticker->must_expire =
   10072:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10076:	1afb      	subs	r3, r7, r3
   10078:	fab3 f383 	clz	r3, r3
   1007c:	095b      	lsrs	r3, r3, #5
	ticker->ext_data = start->ext_data;
   1007e:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
	ticker->lazy_periodic =
   10082:	f64f 79fd 	movw	r9, #65533	; 0xfffd
	ticker->ticks_periodic = start->ticks_periodic;
   10086:	6060      	str	r0, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   10088:	6222      	str	r2, [r4, #32]
		ticker->must_expire =
   1008a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->lazy_periodic =
   1008e:	454f      	cmp	r7, r9
   10090:	bf88      	it	hi
   10092:	2700      	movhi	r7, #0
	ticker->timeout_func = start->fp_timeout_func;
   10094:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   10098:	6868      	ldr	r0, [r5, #4]
	ticker->ticks_slot = start->ticks_slot;
   1009a:	61a2      	str	r2, [r4, #24]
	ticker->context = start->context;
   1009c:	6a2a      	ldr	r2, [r5, #32]
	ticker->lazy_periodic =
   1009e:	83a7      	strh	r7, [r4, #28]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   100a0:	eba0 070e 	sub.w	r7, r0, lr
	ticker->context = start->context;
   100a4:	e9c4 3203 	strd	r3, r2, [r4, #12]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   100a8:	023a      	lsls	r2, r7, #8
	ticker->ticks_to_expire = start->ticks_first;
   100aa:	68ab      	ldr	r3, [r5, #8]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   100ac:	d40d      	bmi.n	100ca <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xcb>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   100ae:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   100b2:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_to_expire_minus) {
   100b4:	b193      	cbz	r3, 100dc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xdd>
	ticker->ticks_to_expire = ticks_to_expire;
   100b6:	60a3      	str	r3, [r4, #8]
	ticker->remainder_current = 0U;
   100b8:	9b03      	ldr	r3, [sp, #12]
   100ba:	6263      	str	r3, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
   100bc:	83e3      	strh	r3, [r4, #30]
	ticker->force = 1U;
   100be:	f04f 0301 	mov.w	r3, #1
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   100c2:	6161      	str	r1, [r4, #20]
	ticker->force = 1U;
   100c4:	70e3      	strb	r3, [r4, #3]
}
   100c6:	f7ff bbc9 	b.w	f85c <ticker_job+0x424>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   100ca:	ebae 0200 	sub.w	r2, lr, r0
   100ce:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   100d2:	4293      	cmp	r3, r2
   100d4:	d96f      	bls.n	101b6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1b7>
			ticks_to_expire -= delta_current_start;
   100d6:	1a9b      	subs	r3, r3, r2
	if (ticks_to_expire > ticks_to_expire_minus) {
   100d8:	2b00      	cmp	r3, #0
   100da:	d1ec      	bne.n	100b6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb7>
		ticks_to_expire_minus -= ticks_to_expire;
   100dc:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
   100de:	2300      	movs	r3, #0
   100e0:	e7e9      	b.n	100b6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb7>
	ticker->ext_data = start->ext_data;
   100e2:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   100e6:	6060      	str	r0, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   100e8:	6222      	str	r2, [r4, #32]
	ticker->lazy_periodic =
   100ea:	460f      	mov	r7, r1
   100ec:	e7d2      	b.n	10094 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x95>
   100ee:	9a02      	ldr	r2, [sp, #8]
   100f0:	4661      	mov	r1, ip
   100f2:	f7ff bbe2 	b.w	f8ba <ticker_job+0x482>
	ticker_new->next = current;
   100f6:	461a      	mov	r2, r3
	ticker_new->ticks_to_expire = ticks_to_expire;
   100f8:	6081      	str	r1, [r0, #8]
	ticker_new->next = current;
   100fa:	f880 c000 	strb.w	ip, [r0]
   100fe:	4663      	mov	r3, ip
		node[previous].next = id;
   10100:	b212      	sxth	r2, r2
   10102:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   10106:	0112      	lsls	r2, r2, #4
   10108:	f807 a002 	strb.w	sl, [r7, r2]
   1010c:	e523      	b.n	fb56 <ticker_job+0x71e>
	ticker_new->next = current;
   1010e:	f807 300c 	strb.w	r3, [r7, ip]
		instance->ticker_id_head = id;
   10112:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
   10116:	e527      	b.n	fb68 <ticker_job+0x730>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   10118:	8aaf      	ldrh	r7, [r5, #20]
				ticker_job_op_start(ticker, user_op,
   1011a:	f8db e014 	ldr.w	lr, [fp, #20]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   1011e:	f8d5 9024 	ldr.w	r9, [r5, #36]	; 0x24
   10122:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   10126:	429f      	cmp	r7, r3
   10128:	e9d5 0203 	ldrd	r0, r2, [r5, #12]
   1012c:	d036      	beq.n	1019c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x19d>
		ticker->must_expire =
   1012e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10132:	1afb      	subs	r3, r7, r3
   10134:	fab3 f383 	clz	r3, r3
   10138:	095b      	lsrs	r3, r3, #5
	ticker->ext_data = start->ext_data;
   1013a:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
	ticker->lazy_periodic =
   1013e:	f64f 79fd 	movw	r9, #65533	; 0xfffd
	ticker->ticks_periodic = start->ticks_periodic;
   10142:	6060      	str	r0, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   10144:	6222      	str	r2, [r4, #32]
		ticker->must_expire =
   10146:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->lazy_periodic =
   1014a:	454f      	cmp	r7, r9
   1014c:	bf88      	it	hi
   1014e:	2700      	movhi	r7, #0
	ticker->timeout_func = start->fp_timeout_func;
   10150:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   10154:	6868      	ldr	r0, [r5, #4]
	ticker->ticks_slot = start->ticks_slot;
   10156:	61a2      	str	r2, [r4, #24]
	ticker->context = start->context;
   10158:	6a2a      	ldr	r2, [r5, #32]
	ticker->lazy_periodic =
   1015a:	83a7      	strh	r7, [r4, #28]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   1015c:	eba0 070e 	sub.w	r7, r0, lr
	ticker->context = start->context;
   10160:	e9c4 3203 	strd	r3, r2, [r4, #12]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   10164:	023a      	lsls	r2, r7, #8
	ticker->ticks_to_expire = start->ticks_first;
   10166:	68ab      	ldr	r3, [r5, #8]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   10168:	d40c      	bmi.n	10184 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x185>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1016a:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   1016e:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_to_expire_minus) {
   10170:	b18b      	cbz	r3, 10196 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x197>
	ticker->ticks_to_expire = ticks_to_expire;
   10172:	60a3      	str	r3, [r4, #8]
	ticker->remainder_current = 0U;
   10174:	2300      	movs	r3, #0
   10176:	6263      	str	r3, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
   10178:	83e3      	strh	r3, [r4, #30]
	ticker->force = 1U;
   1017a:	f04f 0301 	mov.w	r3, #1
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   1017e:	6161      	str	r1, [r4, #20]
	ticker->force = 1U;
   10180:	70e3      	strb	r3, [r4, #3]
}
   10182:	e4b6      	b.n	faf2 <ticker_job+0x6ba>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10184:	ebae 0200 	sub.w	r2, lr, r0
   10188:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   1018c:	4293      	cmp	r3, r2
   1018e:	d90e      	bls.n	101ae <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1af>
			ticks_to_expire -= delta_current_start;
   10190:	1a9b      	subs	r3, r3, r2
	if (ticks_to_expire > ticks_to_expire_minus) {
   10192:	2b00      	cmp	r3, #0
   10194:	d1ed      	bne.n	10172 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x173>
		ticks_to_expire_minus -= ticks_to_expire;
   10196:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
   10198:	2300      	movs	r3, #0
   1019a:	e7ea      	b.n	10172 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x173>
	ticker->ext_data = start->ext_data;
   1019c:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   101a0:	6060      	str	r0, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   101a2:	6222      	str	r2, [r4, #32]
	ticker->lazy_periodic =
   101a4:	460f      	mov	r7, r1
   101a6:	e7d3      	b.n	10150 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x151>
   101a8:	9a03      	ldr	r2, [sp, #12]
   101aa:	4661      	mov	r1, ip
   101ac:	e4cc      	b.n	fb48 <ticker_job+0x710>
			    (delta_current_start - ticks_to_expire);
   101ae:	1ad3      	subs	r3, r2, r3
		ticks_to_expire_minus -= ticks_to_expire;
   101b0:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
   101b2:	2300      	movs	r3, #0
   101b4:	e7dd      	b.n	10172 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x173>
			    (delta_current_start - ticks_to_expire);
   101b6:	1ad3      	subs	r3, r2, r3
		ticks_to_expire_minus -= ticks_to_expire;
   101b8:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
   101ba:	2300      	movs	r3, #0
   101bc:	e77b      	b.n	100b6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb7>
		ticker = &node[_ticker_id_head];
   101be:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
   101c2:	011b      	lsls	r3, r3, #4
	_ticks_to_expire = *ticks_to_expire;
   101c4:	f8dc e000 	ldr.w	lr, [ip]
		_ticker_id_head = ticker->next;
   101c8:	5ccb      	ldrb	r3, [r1, r3]
	while ((_ticker_id_head != TICKER_NULL) &&
   101ca:	e726      	b.n	1001a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1b>
}
   101cc:	b00f      	add	sp, #60	; 0x3c
   101ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   101d2:	4770      	bx	lr
					while (ticks_to_expire <
   101d4:	4598      	cmp	r8, r3
   101d6:	f67f ad78 	bls.w	fcca <ticker_job+0x892>
   101da:	9f03      	ldr	r7, [sp, #12]
   101dc:	9508      	str	r5, [sp, #32]
   101de:	f106 0c01 	add.w	ip, r6, #1
   101e2:	910b      	str	r1, [sp, #44]	; 0x2c
   101e4:	e005      	b.n	101f2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1f3>
   101e6:	4635      	mov	r5, r6
						ticks_to_expire +=
   101e8:	442b      	add	r3, r5
						lazy++;
   101ea:	3001      	adds	r0, #1
					while (ticks_to_expire <
   101ec:	4598      	cmp	r8, r3
						lazy++;
   101ee:	b280      	uxth	r0, r0
					while (ticks_to_expire <
   101f0:	d911      	bls.n	10216 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x217>
	if ((ticker->remainder_current < BIT(31)) &&
   101f2:	4d31      	ldr	r5, [pc, #196]	; (102b8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2b9>)
   101f4:	4931      	ldr	r1, [pc, #196]	; (102bc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2bd>)
	ticker->remainder_current += ticker->remainder_periodic;
   101f6:	443a      	add	r2, r7
	if ((ticker->remainder_current < BIT(31)) &&
   101f8:	1955      	adds	r5, r2, r5
   101fa:	428d      	cmp	r5, r1
   101fc:	d8f3      	bhi.n	101e6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1e7>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   101fe:	4665      	mov	r5, ip
   10200:	f1a2 72e8 	sub.w	r2, r2, #30408704	; 0x1d00000
						ticks_to_expire +=
   10204:	442b      	add	r3, r5
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   10206:	f5a2 32d4 	sub.w	r2, r2, #108544	; 0x1a800
						lazy++;
   1020a:	3001      	adds	r0, #1
					while (ticks_to_expire <
   1020c:	4598      	cmp	r8, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   1020e:	f5a2 72a5 	sub.w	r2, r2, #330	; 0x14a
						lazy++;
   10212:	b280      	uxth	r0, r0
					while (ticks_to_expire <
   10214:	d8ed      	bhi.n	101f2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1f3>
   10216:	9e05      	ldr	r6, [sp, #20]
   10218:	9d08      	ldr	r5, [sp, #32]
   1021a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1021c:	6262      	str	r2, [r4, #36]	; 0x24
   1021e:	4406      	add	r6, r0
   10220:	b2b0      	uxth	r0, r6
   10222:	9005      	str	r0, [sp, #20]
   10224:	e551      	b.n	fcca <ticker_job+0x892>
		flag_elapsed = 0U;
   10226:	930d      	str	r3, [sp, #52]	; 0x34
		ticks_elapsed = 0U;
   10228:	9302      	str	r3, [sp, #8]
   1022a:	f7ff b931 	b.w	f490 <ticker_job+0x58>
				node->ticks_to_expire -=
   1022e:	1aeb      	subs	r3, r5, r3
		if (ticker_id_prev != TICKER_NULL) {
   10230:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
				node->ticks_to_expire -=
   10234:	f8c8 3008 	str.w	r3, [r8, #8]
		if (ticker_id_prev != TICKER_NULL) {
   10238:	f43f ae6f 	beq.w	ff1a <ticker_job+0xae2>
   1023c:	fa0f f189 	sxth.w	r1, r9
   10240:	e661      	b.n	ff06 <ticker_job+0xace>
			ticker->ticks_to_expire -= ticks_elapsed;
   10242:	eba3 030a 	sub.w	r3, r3, sl
   10246:	60a3      	str	r3, [r4, #8]
			break;
   10248:	f8db 3000 	ldr.w	r3, [fp]
   1024c:	9304      	str	r3, [sp, #16]
   1024e:	e427      	b.n	faa0 <ticker_job+0x668>
	if (!pending) {
   10250:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10252:	2a00      	cmp	r2, #0
   10254:	f47f ad87 	bne.w	fd66 <ticker_job+0x92e>
	count_user = instance->count_user;
   10258:	f89b 2009 	ldrb.w	r2, [fp, #9]
	users = &instance->users[0];
   1025c:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
   10260:	1e54      	subs	r4, r2, #1
   10262:	b2e4      	uxtb	r4, r4
   10264:	2a00      	cmp	r2, #0
   10266:	f47f ae6a 	bne.w	ff3e <ticker_job+0xb06>
   1026a:	e57c      	b.n	fd66 <ticker_job+0x92e>
		if (cntr_stop() == 0) {
   1026c:	f00b fb68 	bl	1b940 <cntr_stop>
   10270:	2800      	cmp	r0, #0
   10272:	f47f adcb 	bne.w	fe0c <ticker_job+0x9d4>
			instance->ticks_slot_previous = 0U;
   10276:	f8cb 0018 	str.w	r0, [fp, #24]
			instance->ticks_current = cntr_cnt_get();
   1027a:	f00b fb87 	bl	1b98c <cntr_cnt_get>
   1027e:	f89b 301f 	ldrb.w	r3, [fp, #31]
   10282:	f8cb 0014 	str.w	r0, [fp, #20]
   10286:	e5c3      	b.n	fe10 <ticker_job+0x9d8>
	count_user = instance->count_user;
   10288:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
   1028c:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
   10290:	1e5c      	subs	r4, r3, #1
   10292:	b2e4      	uxtb	r4, r4
   10294:	2b00      	cmp	r3, #0
   10296:	f47f ae53 	bne.w	ff40 <ticker_job+0xb08>
   1029a:	e5b4      	b.n	fe06 <ticker_job+0x9ce>
		ticks_current = cntr_cnt_get();
   1029c:	f00b fb76 	bl	1b98c <cntr_cnt_get>
   102a0:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
   102a2:	f00b fb3d 	bl	1b920 <cntr_start>
   102a6:	f89b c01d 	ldrb.w	ip, [fp, #29]
   102aa:	2800      	cmp	r0, #0
   102ac:	f47f ad63 	bne.w	fd76 <ticker_job+0x93e>
			instance->ticks_current = ticks_current;
   102b0:	f8cb 4014 	str.w	r4, [fp, #20]
   102b4:	e55f      	b.n	fd76 <ticker_job+0x93e>
   102b6:	bf00      	nop
   102b8:	ff172b5a 	.word	0xff172b5a
   102bc:	7f172b59 	.word	0x7f172b59

000102c0 <ticker_init>:
{
   102c0:	b4f0      	push	{r4, r5, r6, r7}
   102c2:	9f04      	ldr	r7, [sp, #16]
   102c4:	f89d 4014 	ldrb.w	r4, [sp, #20]
   102c8:	9e06      	ldr	r6, [sp, #24]
	if (instance_index >= TICKER_INSTANCE_MAX) {
   102ca:	2800      	cmp	r0, #0
   102cc:	d13e      	bne.n	1034c <ticker_init+0x8c>
	instance->count_node = count_node;
   102ce:	f8df c084 	ldr.w	ip, [pc, #132]	; 10354 <ticker_init+0x94>
	while (count_node--) {
   102d2:	1e4d      	subs	r5, r1, #1
	instance->count_node = count_node;
   102d4:	f88c 1008 	strb.w	r1, [ip, #8]
	instance->nodes = node;
   102d8:	f8cc 2000 	str.w	r2, [ip]
	while (count_node--) {
   102dc:	b2ed      	uxtb	r5, r5
   102de:	b149      	cbz	r1, 102f4 <ticker_init+0x34>
   102e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   102e4:	eb02 1105 	add.w	r1, r2, r5, lsl #4
   102e8:	4291      	cmp	r1, r2
		instance->nodes[count_node].priority = 0;
   102ea:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
	while (count_node--) {
   102ee:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
   102f2:	d1f9      	bne.n	102e8 <ticker_init+0x28>
	while (count_user--) {
   102f4:	1e5a      	subs	r2, r3, #1
	instance->count_user = count_user;
   102f6:	f88c 3009 	strb.w	r3, [ip, #9]
	instance->users = user;
   102fa:	f8cc 7004 	str.w	r7, [ip, #4]
	while (count_user--) {
   102fe:	b2d2      	uxtb	r2, r2
   10300:	b17b      	cbz	r3, 10322 <ticker_init+0x62>
   10302:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
		users[count_user].user_op = user_op_;
   10306:	6056      	str	r6, [r2, #4]
		user_op_ += users[count_user].count_user_op;
   10308:	4611      	mov	r1, r2
   1030a:	f812 3908 	ldrb.w	r3, [r2], #-8
   1030e:	eb03 0043 	add.w	r0, r3, r3, lsl #1
		count_op -= users[count_user].count_user_op;
   10312:	1ae4      	subs	r4, r4, r3
	while (count_user--) {
   10314:	428f      	cmp	r7, r1
		user_op_ += users[count_user].count_user_op;
   10316:	eb03 0380 	add.w	r3, r3, r0, lsl #2
		count_op -= users[count_user].count_user_op;
   1031a:	b2e4      	uxtb	r4, r4
		user_op_ += users[count_user].count_user_op;
   1031c:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	while (count_user--) {
   10320:	d1f1      	bne.n	10306 <ticker_init+0x46>
	if (count_op) {
   10322:	b99c      	cbnz	r4, 1034c <ticker_init+0x8c>
	instance->caller_id_get_cb = caller_id_get_cb;
   10324:	9a07      	ldr	r2, [sp, #28]
   10326:	f8cc 2020 	str.w	r2, [ip, #32]
	instance->sched_cb = sched_cb;
   1032a:	9a08      	ldr	r2, [sp, #32]
   1032c:	f8cc 2024 	str.w	r2, [ip, #36]	; 0x24
	instance->ticker_id_slot_previous = TICKER_NULL;
   10330:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->trigger_set_cb = trigger_set_cb;
   10334:	9a09      	ldr	r2, [sp, #36]	; 0x24
	instance->ticks_elapsed_first = 0U;
   10336:	f8ac 400a 	strh.w	r4, [ip, #10]
	return TICKER_STATUS_SUCCESS;
   1033a:	4620      	mov	r0, r4
	instance->ticks_slot_previous = 0U;
   1033c:	e9cc 4405 	strd	r4, r4, [ip, #20]
}
   10340:	bcf0      	pop	{r4, r5, r6, r7}
	instance->trigger_set_cb = trigger_set_cb;
   10342:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
	instance->ticker_id_slot_previous = TICKER_NULL;
   10346:	f8ac 301c 	strh.w	r3, [ip, #28]
}
   1034a:	4770      	bx	lr
		return TICKER_STATUS_FAILURE;
   1034c:	2001      	movs	r0, #1
}
   1034e:	bcf0      	pop	{r4, r5, r6, r7}
   10350:	4770      	bx	lr
   10352:	bf00      	nop
   10354:	20001068 	.word	0x20001068

00010358 <ticker_trigger>:
	if (instance->sched_cb) {
   10358:	4b0a      	ldr	r3, [pc, #40]	; (10384 <ticker_trigger+0x2c>)
   1035a:	222c      	movs	r2, #44	; 0x2c
   1035c:	fb02 3200 	mla	r2, r2, r0, r3
{
   10360:	b410      	push	{r4}
	if (instance->sched_cb) {
   10362:	6a54      	ldr	r4, [r2, #36]	; 0x24
   10364:	b15c      	cbz	r4, 1037e <ticker_trigger+0x26>
	instance = &_instance[instance_index];
   10366:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   1036a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   1036e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   10372:	46a4      	mov	ip, r4
   10374:	2201      	movs	r2, #1
}
   10376:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   10378:	2103      	movs	r1, #3
   1037a:	2002      	movs	r0, #2
   1037c:	4760      	bx	ip
}
   1037e:	bc10      	pop	{r4}
   10380:	4770      	bx	lr
   10382:	bf00      	nop
   10384:	20001068 	.word	0x20001068

00010388 <ticker_start_ext>:
{
   10388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   1038c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 10430 <ticker_start_ext+0xa8>
{
   10390:	f8bd e02c 	ldrh.w	lr, [sp, #44]	; 0x2c
	user = &instance->users[user_id];
   10394:	272c      	movs	r7, #44	; 0x2c
   10396:	fb07 8700 	mla	r7, r7, r0, r8
{
   1039a:	4604      	mov	r4, r0
	user = &instance->users[user_id];
   1039c:	687d      	ldr	r5, [r7, #4]
   1039e:	eb05 0cc1 	add.w	ip, r5, r1, lsl #3
	if (last >= user->count_user_op) {
   103a2:	f815 9031 	ldrb.w	r9, [r5, r1, lsl #3]
	last = user->last + 1;
   103a6:	f89c 6003 	ldrb.w	r6, [ip, #3]
	struct ticker_instance *instance = &_instance[instance_index];
   103aa:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   103ae:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	last = user->last + 1;
   103b2:	1c75      	adds	r5, r6, #1
{
   103b4:	4608      	mov	r0, r1
	last = user->last + 1;
   103b6:	b2ed      	uxtb	r5, r5
	if (last == user->first) {
   103b8:	f89c 1001 	ldrb.w	r1, [ip, #1]
		last = 0U;
   103bc:	45a9      	cmp	r9, r5
   103be:	bf98      	it	ls
   103c0:	2500      	movls	r5, #0
	if (last == user->first) {
   103c2:	42a9      	cmp	r1, r5
	struct ticker_instance *instance = &_instance[instance_index];
   103c4:	eb08 0884 	add.w	r8, r8, r4, lsl #2
	if (last == user->first) {
   103c8:	d02f      	beq.n	1042a <ticker_start_ext+0xa2>
	user_op = &user->user_op[user->last];
   103ca:	f8dc 1004 	ldr.w	r1, [ip, #4]
   103ce:	eb06 0446 	add.w	r4, r6, r6, lsl #1
   103d2:	eb06 0684 	add.w	r6, r6, r4, lsl #2
   103d6:	eb01 0486 	add.w	r4, r1, r6, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_START;
   103da:	f04f 0904 	mov.w	r9, #4
   103de:	f801 9026 	strb.w	r9, [r1, r6, lsl #2]
	user_op->params.start.ticks_at_start = ticks_anchor;
   103e2:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
   103e4:	9b08      	ldr	r3, [sp, #32]
   103e6:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
   103e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   103ea:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
   103ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   103ee:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
   103f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   103f2:	61a3      	str	r3, [r4, #24]
	user_op->params.start.ext_data = ext_data;
   103f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   103f6:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
   103f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   103fa:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
   103fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   103fe:	6223      	str	r3, [r4, #32]
	user_op->fp_op_func = fp_op_func;
   10400:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   10402:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
   10404:	2102      	movs	r1, #2
	user_op->op_context = op_context;
   10406:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
   10408:	7062      	strb	r2, [r4, #1]
	user_op->params.start.lazy = lazy;
   1040a:	f8a4 e014 	strh.w	lr, [r4, #20]
	user_op->op_context = op_context;
   1040e:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   10410:	62a1      	str	r1, [r4, #40]	; 0x28
	user->last = last;
   10412:	f88c 5003 	strb.w	r5, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   10416:	e9d7 3508 	ldrd	r3, r5, [r7, #32]
   1041a:	4798      	blx	r3
   1041c:	4643      	mov	r3, r8
   1041e:	4649      	mov	r1, r9
   10420:	2200      	movs	r2, #0
   10422:	47a8      	blx	r5
	return user_op->status;
   10424:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   10426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   1042a:	2001      	movs	r0, #1
}
   1042c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10430:	20001068 	.word	0x20001068

00010434 <ticker_start>:
{
   10434:	b530      	push	{r4, r5, lr}
   10436:	b08b      	sub	sp, #44	; 0x2c
   10438:	e9dd 540e 	ldrd	r5, r4, [sp, #56]	; 0x38
	return ticker_start_ext(instance_index, user_id, ticker_id,
   1043c:	9500      	str	r5, [sp, #0]
{
   1043e:	9d10      	ldr	r5, [sp, #64]	; 0x40
	return ticker_start_ext(instance_index, user_id, ticker_id,
   10440:	9401      	str	r4, [sp, #4]
   10442:	9502      	str	r5, [sp, #8]
{
   10444:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
   10448:	9d12      	ldr	r5, [sp, #72]	; 0x48
	return ticker_start_ext(instance_index, user_id, ticker_id,
   1044a:	9403      	str	r4, [sp, #12]
   1044c:	9504      	str	r5, [sp, #16]
{
   1044e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   10450:	9d14      	ldr	r5, [sp, #80]	; 0x50
	return ticker_start_ext(instance_index, user_id, ticker_id,
   10452:	9405      	str	r4, [sp, #20]
   10454:	9506      	str	r5, [sp, #24]
{
   10456:	9c15      	ldr	r4, [sp, #84]	; 0x54
   10458:	9d16      	ldr	r5, [sp, #88]	; 0x58
	return ticker_start_ext(instance_index, user_id, ticker_id,
   1045a:	9407      	str	r4, [sp, #28]
   1045c:	2400      	movs	r4, #0
   1045e:	e9cd 5408 	strd	r5, r4, [sp, #32]
   10462:	f7ff ff91 	bl	10388 <ticker_start_ext>
}
   10466:	b00b      	add	sp, #44	; 0x2c
   10468:	bd30      	pop	{r4, r5, pc}
   1046a:	bf00      	nop

0001046c <ticker_update_ext>:
	struct ticker_instance *instance = &_instance[instance_index];
   1046c:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 10510 <ticker_update_ext+0xa4>
{
   10470:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	user = &instance->users[user_id];
   10474:	272c      	movs	r7, #44	; 0x2c
   10476:	fb07 c700 	mla	r7, r7, r0, ip
{
   1047a:	4604      	mov	r4, r0
	user = &instance->users[user_id];
   1047c:	687d      	ldr	r5, [r7, #4]
{
   1047e:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
   10482:	f89d e038 	ldrb.w	lr, [sp, #56]	; 0x38
   10486:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
   1048a:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   1048c:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
	if (last >= user->count_user_op) {
   10490:	f815 a030 	ldrb.w	sl, [r5, r0, lsl #3]
	last = user->last + 1;
   10494:	78ce      	ldrb	r6, [r1, #3]
	if (last == user->first) {
   10496:	f891 9001 	ldrb.w	r9, [r1, #1]
	struct ticker_instance *instance = &_instance[instance_index];
   1049a:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   1049e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	last = user->last + 1;
   104a2:	1c75      	adds	r5, r6, #1
   104a4:	b2ed      	uxtb	r5, r5
		last = 0U;
   104a6:	45aa      	cmp	sl, r5
   104a8:	bf98      	it	ls
   104aa:	2500      	movls	r5, #0
	if (last == user->first) {
   104ac:	45a9      	cmp	r9, r5
	struct ticker_instance *instance = &_instance[instance_index];
   104ae:	eb0c 0a84 	add.w	sl, ip, r4, lsl #2
	if (last == user->first) {
   104b2:	d02a      	beq.n	1050a <ticker_update_ext+0x9e>
	user_op = &user->user_op[user->last];
   104b4:	f8d1 c004 	ldr.w	ip, [r1, #4]
   104b8:	eb06 0446 	add.w	r4, r6, r6, lsl #1
   104bc:	eb06 0684 	add.w	r6, r6, r4, lsl #2
   104c0:	eb0c 0486 	add.w	r4, ip, r6, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   104c4:	f04f 0905 	mov.w	r9, #5
   104c8:	f80c 9026 	strb.w	r9, [ip, r6, lsl #2]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
   104cc:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
   104ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   104d0:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
   104d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   104d4:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
   104d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   104d8:	6123      	str	r3, [r4, #16]
	user_op->fp_op_func = fp_op_func;
   104da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   104dc:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
   104de:	2602      	movs	r6, #2
	user_op->op_context = op_context;
   104e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
   104e2:	7062      	strb	r2, [r4, #1]
	user_op->params.update.force = force;
   104e4:	f884 e016 	strb.w	lr, [r4, #22]
	user_op->op_context = op_context;
   104e8:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->params.update.lazy = lazy;
   104ea:	f8a4 8014 	strh.w	r8, [r4, #20]
	user_op->params.update.must_expire = must_expire;
   104ee:	f884 b017 	strb.w	fp, [r4, #23]
	user_op->status = TICKER_STATUS_BUSY;
   104f2:	62a6      	str	r6, [r4, #40]	; 0x28
	user->last = last;
   104f4:	70cd      	strb	r5, [r1, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   104f6:	e9d7 3508 	ldrd	r3, r5, [r7, #32]
   104fa:	4798      	blx	r3
   104fc:	4653      	mov	r3, sl
   104fe:	2200      	movs	r2, #0
   10500:	2104      	movs	r1, #4
   10502:	47a8      	blx	r5
	return user_op->status;
   10504:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   10506:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return TICKER_STATUS_FAILURE;
   1050a:	2001      	movs	r0, #1
}
   1050c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10510:	20001068 	.word	0x20001068

00010514 <ticker_update>:
{
   10514:	b530      	push	{r4, r5, lr}
   10516:	b089      	sub	sp, #36	; 0x24
   10518:	e9dd 540c 	ldrd	r5, r4, [sp, #48]	; 0x30
	return ticker_update_ext(instance_index, user_id, ticker_id,
   1051c:	9500      	str	r5, [sp, #0]
{
   1051e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	return ticker_update_ext(instance_index, user_id, ticker_id,
   10520:	9401      	str	r4, [sp, #4]
   10522:	9502      	str	r5, [sp, #8]
{
   10524:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
   10528:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
	return ticker_update_ext(instance_index, user_id, ticker_id,
   1052c:	9403      	str	r4, [sp, #12]
   1052e:	9504      	str	r5, [sp, #16]
{
   10530:	9c11      	ldr	r4, [sp, #68]	; 0x44
   10532:	9d12      	ldr	r5, [sp, #72]	; 0x48
	return ticker_update_ext(instance_index, user_id, ticker_id,
   10534:	9405      	str	r4, [sp, #20]
   10536:	2400      	movs	r4, #0
   10538:	e9cd 5406 	strd	r5, r4, [sp, #24]
   1053c:	f7ff ff96 	bl	1046c <ticker_update_ext>
}
   10540:	b009      	add	sp, #36	; 0x24
   10542:	bd30      	pop	{r4, r5, pc}

00010544 <ticker_stop>:
	struct ticker_instance *instance = &_instance[instance_index];
   10544:	f8df c084 	ldr.w	ip, [pc, #132]	; 105cc <ticker_stop+0x88>
{
   10548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	user = &instance->users[user_id];
   1054c:	272c      	movs	r7, #44	; 0x2c
   1054e:	fb07 c700 	mla	r7, r7, r0, ip
{
   10552:	4604      	mov	r4, r0
	user = &instance->users[user_id];
   10554:	687d      	ldr	r5, [r7, #4]
{
   10556:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   10558:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
	if (last >= user->count_user_op) {
   1055c:	f815 8030 	ldrb.w	r8, [r5, r0, lsl #3]
	last = user->last + 1;
   10560:	78ce      	ldrb	r6, [r1, #3]
	if (last == user->first) {
   10562:	f891 e001 	ldrb.w	lr, [r1, #1]
	struct ticker_instance *instance = &_instance[instance_index];
   10566:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   1056a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	last = user->last + 1;
   1056e:	1c75      	adds	r5, r6, #1
   10570:	b2ed      	uxtb	r5, r5
		last = 0U;
   10572:	45a8      	cmp	r8, r5
   10574:	bf98      	it	ls
   10576:	2500      	movls	r5, #0
	if (last == user->first) {
   10578:	45ae      	cmp	lr, r5
	struct ticker_instance *instance = &_instance[instance_index];
   1057a:	eb0c 0484 	add.w	r4, ip, r4, lsl #2
	if (last == user->first) {
   1057e:	d021      	beq.n	105c4 <ticker_stop+0x80>
	user_op = &user->user_op[user->last];
   10580:	f8d1 c004 	ldr.w	ip, [r1, #4]
   10584:	eb06 0e46 	add.w	lr, r6, r6, lsl #1
   10588:	eb06 068e 	add.w	r6, r6, lr, lsl #2
   1058c:	eb0c 0886 	add.w	r8, ip, r6, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_STOP;
   10590:	f04f 0e06 	mov.w	lr, #6
   10594:	f80c e026 	strb.w	lr, [ip, r6, lsl #2]
	user_op->fp_op_func = fp_op_func;
   10598:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
   1059c:	2602      	movs	r6, #2
	user_op->op_context = op_context;
   1059e:	9b06      	ldr	r3, [sp, #24]
	user_op->id = ticker_id;
   105a0:	f888 2001 	strb.w	r2, [r8, #1]
	user_op->op_context = op_context;
   105a4:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   105a8:	f8c8 6028 	str.w	r6, [r8, #40]	; 0x28
	user->last = last;
   105ac:	70cd      	strb	r5, [r1, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   105ae:	e9d7 3508 	ldrd	r3, r5, [r7, #32]
   105b2:	4798      	blx	r3
   105b4:	4623      	mov	r3, r4
   105b6:	2200      	movs	r2, #0
   105b8:	2104      	movs	r1, #4
   105ba:	47a8      	blx	r5
	return user_op->status;
   105bc:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
}
   105c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   105c4:	2001      	movs	r0, #1
}
   105c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   105ca:	bf00      	nop
   105cc:	20001068 	.word	0x20001068

000105d0 <ticker_ticks_now_get>:
	return cntr_cnt_get();
   105d0:	f00b b9dc 	b.w	1b98c <cntr_cnt_get>

000105d4 <ll_addr_get>:
static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t *ll_addr_get(uint8_t addr_type, uint8_t *bdaddr)
{
	if (addr_type > 1) {
   105d4:	2801      	cmp	r0, #1
   105d6:	d810      	bhi.n	105fa <ll_addr_get+0x26>
		return NULL;
	}

	if (addr_type) {
   105d8:	b938      	cbnz	r0, 105ea <ll_addr_get+0x16>
		}

		return rnd_addr;
	}

	if (bdaddr) {
   105da:	b181      	cbz	r1, 105fe <ll_addr_get+0x2a>
   105dc:	4b0a      	ldr	r3, [pc, #40]	; (10608 <ll_addr_get+0x34>)
   105de:	6818      	ldr	r0, [r3, #0]
   105e0:	6008      	str	r0, [r1, #0]
   105e2:	889a      	ldrh	r2, [r3, #4]
   105e4:	808a      	strh	r2, [r1, #4]
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
	}

	return pub_addr;
   105e6:	4618      	mov	r0, r3
   105e8:	4770      	bx	lr
		if (bdaddr) {
   105ea:	b151      	cbz	r1, 10602 <ll_addr_get+0x2e>
   105ec:	4b07      	ldr	r3, [pc, #28]	; (1060c <ll_addr_get+0x38>)
   105ee:	6818      	ldr	r0, [r3, #0]
   105f0:	6008      	str	r0, [r1, #0]
   105f2:	889a      	ldrh	r2, [r3, #4]
   105f4:	808a      	strh	r2, [r1, #4]
	return pub_addr;
   105f6:	4618      	mov	r0, r3
   105f8:	4770      	bx	lr
		return NULL;
   105fa:	2000      	movs	r0, #0
   105fc:	4770      	bx	lr
	return pub_addr;
   105fe:	4802      	ldr	r0, [pc, #8]	; (10608 <ll_addr_get+0x34>)
}
   10600:	4770      	bx	lr
		return rnd_addr;
   10602:	4802      	ldr	r0, [pc, #8]	; (1060c <ll_addr_get+0x38>)
   10604:	4770      	bx	lr
   10606:	bf00      	nop
   10608:	20001094 	.word	0x20001094
   1060c:	2000109c 	.word	0x2000109c

00010610 <ll_addr_set>:

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
   10610:	b538      	push	{r3, r4, r5, lr}
   10612:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER)) {
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		if (ull_adv_is_enabled(0) && !ll_adv_cmds_is_ext()) {
#else /* !CONFIG_BT_CTLR_ADV_EXT */
		if (ull_adv_is_enabled(0)) {
   10614:	2000      	movs	r0, #0
{
   10616:	460d      	mov	r5, r1
		if (ull_adv_is_enabled(0)) {
   10618:	f003 fb46 	bl	13ca8 <ull_adv_is_enabled>
   1061c:	b978      	cbnz	r0, 1063e <ll_addr_set+0x2e>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
   1061e:	b13c      	cbz	r4, 10630 <ll_addr_set+0x20>
   10620:	4a08      	ldr	r2, [pc, #32]	; (10644 <ll_addr_set+0x34>)
   10622:	4603      	mov	r3, r0
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   10624:	6828      	ldr	r0, [r5, #0]
   10626:	6010      	str	r0, [r2, #0]
   10628:	88a9      	ldrh	r1, [r5, #4]
   1062a:	8091      	strh	r1, [r2, #4]
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
   1062c:	4618      	mov	r0, r3
}
   1062e:	bd38      	pop	{r3, r4, r5, pc}
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
   10630:	4b05      	ldr	r3, [pc, #20]	; (10648 <ll_addr_set+0x38>)
   10632:	6828      	ldr	r0, [r5, #0]
   10634:	6018      	str	r0, [r3, #0]
   10636:	88aa      	ldrh	r2, [r5, #4]
   10638:	809a      	strh	r2, [r3, #4]
	return 0;
   1063a:	4620      	mov	r0, r4
}
   1063c:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   1063e:	200c      	movs	r0, #12
}
   10640:	bd38      	pop	{r3, r4, r5, pc}
   10642:	bf00      	nop
   10644:	2000109c 	.word	0x2000109c
   10648:	20001094 	.word	0x20001094

0001064c <ll_tx_pwr_lvl_get>:
#include "ll.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
	switch (handle_type) {
   1064c:	2802      	cmp	r0, #2
   1064e:	d001      	beq.n	10654 <ll_tx_pwr_lvl_get+0x8>
			}
			break;
		}
#endif /* CONFIG_BT_CONN */
		default: {
			return BT_HCI_ERR_UNKNOWN_CMD;
   10650:	2001      	movs	r0, #1
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
   10652:	4770      	bx	lr
{
   10654:	b538      	push	{r3, r4, r5, lr}
   10656:	4604      	mov	r4, r0
			conn = ll_connected_get(handle);
   10658:	4608      	mov	r0, r1
   1065a:	461d      	mov	r5, r3
   1065c:	f004 f942 	bl	148e4 <ll_connected_get>
			if (!conn) {
   10660:	b110      	cbz	r0, 10668 <ll_tx_pwr_lvl_get+0x1c>
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
   10662:	2000      	movs	r0, #0
   10664:	7028      	strb	r0, [r5, #0]
}
   10666:	bd38      	pop	{r3, r4, r5, pc}
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10668:	4620      	mov	r0, r4
}
   1066a:	bd38      	pop	{r3, r4, r5, pc}

0001066c <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
   1066c:	2300      	movs	r3, #0
   1066e:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
   10670:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
   10672:	4770      	bx	lr

00010674 <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(const struct device *unused)
{
   10674:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
   10676:	4802      	ldr	r0, [pc, #8]	; (10680 <hci_driver_init+0xc>)
   10678:	f7f8 fb8c 	bl	8d94 <bt_hci_driver_register>

	return 0;
}
   1067c:	2000      	movs	r0, #0
   1067e:	bd08      	pop	{r3, pc}
   10680:	0002b1b4 	.word	0x0002b1b4

00010684 <hci_driver_send>:
{
   10684:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
   10686:	8983      	ldrh	r3, [r0, #12]
{
   10688:	b083      	sub	sp, #12
	if (!buf->len) {
   1068a:	2b00      	cmp	r3, #0
   1068c:	d04a      	beq.n	10724 <hci_driver_send+0xa0>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1068e:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   10690:	4604      	mov	r4, r0
   10692:	b33b      	cbz	r3, 106e4 <hci_driver_send+0x60>
   10694:	2b02      	cmp	r3, #2
   10696:	d018      	beq.n	106ca <hci_driver_send+0x46>
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   10698:	f3ef 8205 	mrs	r2, IPSR
	if (value) {
   1069c:	482e      	ldr	r0, [pc, #184]	; (10758 <hci_driver_send+0xd4>)
   1069e:	492f      	ldr	r1, [pc, #188]	; (1075c <hci_driver_send+0xd8>)
   106a0:	1a40      	subs	r0, r0, r1
   106a2:	08c0      	lsrs	r0, r0, #3
   106a4:	2a00      	cmp	r2, #0
   106a6:	d135      	bne.n	10714 <hci_driver_send+0x90>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   106a8:	f3ef 8114 	mrs	r1, CONTROL
		BT_ERR("Unknown HCI type %u", type);
   106ac:	0180      	lsls	r0, r0, #6
   106ae:	f040 0001 	orr.w	r0, r0, #1
   106b2:	07c9      	lsls	r1, r1, #31
   106b4:	4602      	mov	r2, r0
   106b6:	d530      	bpl.n	1071a <hci_driver_send+0x96>
   106b8:	4929      	ldr	r1, [pc, #164]	; (10760 <hci_driver_send+0xdc>)
   106ba:	461a      	mov	r2, r3
   106bc:	f014 fbeb 	bl	24e96 <log_from_user>
		return -EINVAL;
   106c0:	f06f 0515 	mvn.w	r5, #21
}
   106c4:	4628      	mov	r0, r5
   106c6:	b003      	add	sp, #12
   106c8:	bd30      	pop	{r4, r5, pc}
	err = hci_acl_handle(buf, &evt);
   106ca:	a901      	add	r1, sp, #4
   106cc:	f000 ff4c 	bl	11568 <hci_acl_handle>
	if (evt) {
   106d0:	9b01      	ldr	r3, [sp, #4]
	err = hci_acl_handle(buf, &evt);
   106d2:	4605      	mov	r5, r0
	if (evt) {
   106d4:	b113      	cbz	r3, 106dc <hci_driver_send+0x58>
		bt_recv_prio(evt);
   106d6:	4618      	mov	r0, r3
   106d8:	f7f8 fb3e 	bl	8d58 <bt_recv_prio>
	if (!err) {
   106dc:	b19d      	cbz	r5, 10706 <hci_driver_send+0x82>
}
   106de:	4628      	mov	r0, r5
   106e0:	b003      	add	sp, #12
   106e2:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   106e4:	a901      	add	r1, sp, #4
	struct node_rx_pdu *node_rx = NULL;
   106e6:	9301      	str	r3, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   106e8:	f000 fb44 	bl	10d74 <hci_cmd_handle>
	if (evt) {
   106ec:	b158      	cbz	r0, 10706 <hci_driver_send+0x82>
		bt_recv_prio(evt);
   106ee:	f7f8 fb33 	bl	8d58 <bt_recv_prio>
		if (node_rx) {
   106f2:	9d01      	ldr	r5, [sp, #4]
   106f4:	b13d      	cbz	r5, 10706 <hci_driver_send+0x82>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   106f6:	4628      	mov	r0, r5
   106f8:	f001 fb42 	bl	11d80 <hci_get_class>
   106fc:	7168      	strb	r0, [r5, #5]
			k_fifo_put(&recv_fifo, node_rx);
   106fe:	9901      	ldr	r1, [sp, #4]
   10700:	4818      	ldr	r0, [pc, #96]	; (10764 <hci_driver_send+0xe0>)
   10702:	f018 ffc3 	bl	2968c <k_queue_append>
		net_buf_unref(buf);
   10706:	4620      	mov	r0, r4
   10708:	f00c f876 	bl	1c7f8 <net_buf_unref>
   1070c:	2500      	movs	r5, #0
}
   1070e:	4628      	mov	r0, r5
   10710:	b003      	add	sp, #12
   10712:	bd30      	pop	{r4, r5, pc}
		BT_ERR("Unknown HCI type %u", type);
   10714:	0180      	lsls	r0, r0, #6
   10716:	f040 0201 	orr.w	r2, r0, #1
   1071a:	4811      	ldr	r0, [pc, #68]	; (10760 <hci_driver_send+0xdc>)
   1071c:	4619      	mov	r1, r3
   1071e:	f014 fbed 	bl	24efc <log_1>
   10722:	e7cd      	b.n	106c0 <hci_driver_send+0x3c>
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   10724:	f3ef 8205 	mrs	r2, IPSR
	if (value) {
   10728:	4b0b      	ldr	r3, [pc, #44]	; (10758 <hci_driver_send+0xd4>)
   1072a:	490c      	ldr	r1, [pc, #48]	; (1075c <hci_driver_send+0xd8>)
   1072c:	1a5b      	subs	r3, r3, r1
   1072e:	08db      	lsrs	r3, r3, #3
   10730:	b95a      	cbnz	r2, 1074a <hci_driver_send+0xc6>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   10732:	f3ef 8214 	mrs	r2, CONTROL
		BT_ERR("Empty HCI packet");
   10736:	019b      	lsls	r3, r3, #6
   10738:	f043 0001 	orr.w	r0, r3, #1
   1073c:	07d4      	lsls	r4, r2, #31
   1073e:	4601      	mov	r1, r0
   10740:	d506      	bpl.n	10750 <hci_driver_send+0xcc>
   10742:	4909      	ldr	r1, [pc, #36]	; (10768 <hci_driver_send+0xe4>)
   10744:	f014 fba7 	bl	24e96 <log_from_user>
   10748:	e7ba      	b.n	106c0 <hci_driver_send+0x3c>
   1074a:	019b      	lsls	r3, r3, #6
   1074c:	f043 0101 	orr.w	r1, r3, #1
   10750:	4805      	ldr	r0, [pc, #20]	; (10768 <hci_driver_send+0xe4>)
   10752:	f014 fbc6 	bl	24ee2 <log_0>
		return -EINVAL;
   10756:	e7b3      	b.n	106c0 <hci_driver_send+0x3c>
   10758:	0002a720 	.word	0x0002a720
   1075c:	0002a6d0 	.word	0x0002a6d0
   10760:	0002b108 	.word	0x0002b108
   10764:	20007ed8 	.word	0x20007ed8
   10768:	0002b0f4 	.word	0x0002b0f4

0001076c <recv_thread>:
{
   1076c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_queue_get(queue, timeout);
   10770:	4c44      	ldr	r4, [pc, #272]	; (10884 <recv_thread+0x118>)
		LL_ASSERT(0);
   10772:	4f45      	ldr	r7, [pc, #276]	; (10888 <recv_thread+0x11c>)
   10774:	4d45      	ldr	r5, [pc, #276]	; (1088c <recv_thread+0x120>)
{
   10776:	b082      	sub	sp, #8
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   10778:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   1077c:	b91b      	cbnz	r3, 10786 <recv_thread+0x1a>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   1077e:	f3ef 8314 	mrs	r3, CONTROL
	if (z_syscall_trap()) {
   10782:	07da      	lsls	r2, r3, #31
   10784:	d463      	bmi.n	1084e <recv_thread+0xe2>
	return z_impl_k_queue_get(queue, timeout);
   10786:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1078a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1078e:	4620      	mov	r0, r4
   10790:	f010 fc92 	bl	210b8 <z_impl_k_queue_get>
   10794:	4603      	mov	r3, r0
		if (node_rx && !buf) {
   10796:	b1c3      	cbz	r3, 107ca <recv_thread+0x5e>
	uint8_t class = node_rx->hdr.user_meta;
   10798:	795a      	ldrb	r2, [r3, #5]
	buf = encode_node(node_rx, class);
   1079a:	9301      	str	r3, [sp, #4]
	switch (class) {
   1079c:	2a04      	cmp	r2, #4
   1079e:	d81e      	bhi.n	107de <recv_thread+0x72>
   107a0:	2a00      	cmp	r2, #0
   107a2:	d138      	bne.n	10816 <recv_thread+0xaa>
		LL_ASSERT(0);
   107a4:	483a      	ldr	r0, [pc, #232]	; (10890 <recv_thread+0x124>)
   107a6:	f240 1347 	movw	r3, #327	; 0x147
   107aa:	463a      	mov	r2, r7
   107ac:	4629      	mov	r1, r5
   107ae:	f013 ff19 	bl	245e4 <printk>
   107b2:	4040      	eors	r0, r0
   107b4:	f380 8811 	msr	BASEPRI, r0
   107b8:	f04f 0003 	mov.w	r0, #3
   107bc:	df02      	svc	2
	node_rx->hdr.next = NULL;
   107be:	9b01      	ldr	r3, [sp, #4]
   107c0:	2200      	movs	r2, #0
   107c2:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   107c4:	a801      	add	r0, sp, #4
   107c6:	f002 fa83 	bl	12cd0 <ll_rx_mem_release>
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   107ca:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   107ce:	b91b      	cbnz	r3, 107d8 <recv_thread+0x6c>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   107d0:	f3ef 8314 	mrs	r3, CONTROL
	if (z_syscall_trap()) {
   107d4:	07db      	lsls	r3, r3, #31
   107d6:	d442      	bmi.n	1085e <recv_thread+0xf2>
	z_impl_k_yield();
   107d8:	f011 f994 	bl	21b04 <z_impl_k_yield>
	while (1) {
   107dc:	e7cc      	b.n	10778 <recv_thread+0xc>
	switch (class) {
   107de:	2a05      	cmp	r2, #5
   107e0:	d1e0      	bne.n	107a4 <recv_thread+0x38>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   107e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   107e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   107ea:	2003      	movs	r0, #3
   107ec:	f7f6 ff52 	bl	7694 <bt_buf_get_rx>
   107f0:	4606      	mov	r6, r0
		hci_acl_encode(node_rx, buf);
   107f2:	4601      	mov	r1, r0
   107f4:	9801      	ldr	r0, [sp, #4]
   107f6:	f000 ffc9 	bl	1178c <hci_acl_encode>
	node_rx->hdr.next = NULL;
   107fa:	9b01      	ldr	r3, [sp, #4]
   107fc:	2200      	movs	r2, #0
   107fe:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   10800:	a801      	add	r0, sp, #4
   10802:	f002 fa65 	bl	12cd0 <ll_rx_mem_release>
		if (buf) {
   10806:	2e00      	cmp	r6, #0
   10808:	d0df      	beq.n	107ca <recv_thread+0x5e>
			if (buf->len) {
   1080a:	89b3      	ldrh	r3, [r6, #12]
				bt_recv(buf);
   1080c:	4630      	mov	r0, r6
			if (buf->len) {
   1080e:	b1db      	cbz	r3, 10848 <recv_thread+0xdc>
				bt_recv(buf);
   10810:	f7f8 f9dc 	bl	8bcc <bt_recv>
   10814:	e7d9      	b.n	107ca <recv_thread+0x5e>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
   10816:	2a02      	cmp	r2, #2
   10818:	d024      	beq.n	10864 <recv_thread+0xf8>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1081a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1081e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10822:	2001      	movs	r0, #1
   10824:	f7f6 ff36 	bl	7694 <bt_buf_get_rx>
   10828:	4606      	mov	r6, r0
		if (buf) {
   1082a:	9801      	ldr	r0, [sp, #4]
   1082c:	b326      	cbz	r6, 10878 <recv_thread+0x10c>
			hci_evt_encode(node_rx, buf);
   1082e:	4631      	mov	r1, r6
   10830:	f000 ffe6 	bl	11800 <hci_evt_encode>
	node_rx->hdr.next = NULL;
   10834:	9b01      	ldr	r3, [sp, #4]
   10836:	2200      	movs	r2, #0
   10838:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   1083a:	a801      	add	r0, sp, #4
   1083c:	f002 fa48 	bl	12cd0 <ll_rx_mem_release>
			if (buf->len) {
   10840:	89b3      	ldrh	r3, [r6, #12]
				bt_recv(buf);
   10842:	4630      	mov	r0, r6
			if (buf->len) {
   10844:	2b00      	cmp	r3, #0
   10846:	d1e3      	bne.n	10810 <recv_thread+0xa4>
				net_buf_unref(buf);
   10848:	f00b ffd6 	bl	1c7f8 <net_buf_unref>
   1084c:	e7bd      	b.n	107ca <recv_thread+0x5e>
	register uint32_t r1 __asm__("r1") = arg2;
   1084e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	register uint32_t r2 __asm__("r2") = arg3;
   10852:	460a      	mov	r2, r1
	register uint32_t ret __asm__("r0") = arg1;
   10854:	4620      	mov	r0, r4
	register uint32_t r6 __asm__("r6") = call_id;
   10856:	269a      	movs	r6, #154	; 0x9a
	__asm__ volatile("svc %[svid]\n"
   10858:	df03      	svc	3
	return ret;
   1085a:	4603      	mov	r3, r0
   1085c:	e79b      	b.n	10796 <recv_thread+0x2a>
	register uint32_t r6 __asm__("r6") = call_id;
   1085e:	26c4      	movs	r6, #196	; 0xc4
	__asm__ volatile("svc %[svid]\n"
   10860:	df03      	svc	3
		return;
   10862:	e789      	b.n	10778 <recv_thread+0xc>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
   10864:	2200      	movs	r2, #0
   10866:	2300      	movs	r3, #0
   10868:	2101      	movs	r1, #1
   1086a:	2000      	movs	r0, #0
   1086c:	f7f6 ff48 	bl	7700 <bt_buf_get_evt>
   10870:	4606      	mov	r6, r0
		if (buf) {
   10872:	9801      	ldr	r0, [sp, #4]
   10874:	2e00      	cmp	r6, #0
   10876:	d1da      	bne.n	1082e <recv_thread+0xc2>
	node_rx->hdr.next = NULL;
   10878:	6006      	str	r6, [r0, #0]
	ll_rx_mem_release((void **)&node_rx);
   1087a:	a801      	add	r0, sp, #4
   1087c:	f002 fa28 	bl	12cd0 <ll_rx_mem_release>
		if (buf) {
   10880:	e7a3      	b.n	107ca <recv_thread+0x5e>
   10882:	bf00      	nop
   10884:	20007ed8 	.word	0x20007ed8
   10888:	0002b11c 	.word	0x0002b11c
   1088c:	0002b15c 	.word	0x0002b15c
   10890:	0002b0c4 	.word	0x0002b0c4

00010894 <prio_recv_thread>:
{
   10894:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   10898:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 1098c <prio_recv_thread+0xf8>
				k_fifo_put(&recv_fifo, node_rx);
   1089c:	4d3a      	ldr	r5, [pc, #232]	; (10988 <prio_recv_thread+0xf4>)
{
   1089e:	b083      	sub	sp, #12
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   108a0:	f10d 0102 	add.w	r1, sp, #2
   108a4:	a801      	add	r0, sp, #4
   108a6:	f002 f859 	bl	1295c <ll_rx_get>
   108aa:	4604      	mov	r4, r0
   108ac:	b308      	cbz	r0, 108f2 <prio_recv_thread+0x5e>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   108ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   108b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   108b6:	2100      	movs	r1, #0
   108b8:	2013      	movs	r0, #19
   108ba:	f7f6 ff21 	bl	7700 <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   108be:	4622      	mov	r2, r4
   108c0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   108c4:	4604      	mov	r4, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   108c6:	f001 fa43 	bl	11d50 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
   108ca:	4620      	mov	r0, r4
   108cc:	f7f8 fa44 	bl	8d58 <bt_recv_prio>
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   108d0:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   108d4:	b91b      	cbnz	r3, 108de <prio_recv_thread+0x4a>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   108d6:	f3ef 8314 	mrs	r3, CONTROL
	if (z_syscall_trap()) {
   108da:	07da      	lsls	r2, r3, #31
   108dc:	d41e      	bmi.n	1091c <prio_recv_thread+0x88>
	z_impl_k_yield();
   108de:	f011 f911 	bl	21b04 <z_impl_k_yield>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   108e2:	f10d 0102 	add.w	r1, sp, #2
   108e6:	a801      	add	r0, sp, #4
   108e8:	f002 f838 	bl	1295c <ll_rx_get>
   108ec:	4604      	mov	r4, r0
   108ee:	2800      	cmp	r0, #0
   108f0:	d1dd      	bne.n	108ae <prio_recv_thread+0x1a>
		if (node_rx) {
   108f2:	9b01      	ldr	r3, [sp, #4]
   108f4:	b1ab      	cbz	r3, 10922 <prio_recv_thread+0x8e>
			ll_rx_dequeue();
   108f6:	f002 f91b 	bl	12b30 <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   108fa:	9f01      	ldr	r7, [sp, #4]
   108fc:	4638      	mov	r0, r7
   108fe:	f001 fa3f 	bl	11d80 <hci_get_class>
			buf = process_prio_evt(node_rx, &evt_flags);
   10902:	9e01      	ldr	r6, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   10904:	7178      	strb	r0, [r7, #5]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
   10906:	7973      	ldrb	r3, [r6, #5]
   10908:	2b03      	cmp	r3, #3
   1090a:	d102      	bne.n	10912 <prio_recv_thread+0x7e>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
   1090c:	7933      	ldrb	r3, [r6, #4]
   1090e:	2b15      	cmp	r3, #21
   10910:	d016      	beq.n	10940 <prio_recv_thread+0xac>
				k_fifo_put(&recv_fifo, node_rx);
   10912:	4631      	mov	r1, r6
   10914:	4628      	mov	r0, r5
   10916:	f018 feb9 	bl	2968c <k_queue_append>
			continue;
   1091a:	e7c1      	b.n	108a0 <prio_recv_thread+0xc>
	register uint32_t r6 __asm__("r6") = call_id;
   1091c:	26c4      	movs	r6, #196	; 0xc4
	__asm__ volatile("svc %[svid]\n"
   1091e:	df03      	svc	3
		return;
   10920:	e7be      	b.n	108a0 <prio_recv_thread+0xc>
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   10922:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   10926:	b91b      	cbnz	r3, 10930 <prio_recv_thread+0x9c>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   10928:	f3ef 8314 	mrs	r3, CONTROL
	if (z_syscall_trap()) {
   1092c:	07db      	lsls	r3, r3, #31
   1092e:	d424      	bmi.n	1097a <prio_recv_thread+0xe6>
	return z_impl_k_sem_take(sem, timeout);
   10930:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   10934:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10938:	4648      	mov	r0, r9
   1093a:	f011 fbc5 	bl	220c8 <z_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   1093e:	e7af      	b.n	108a0 <prio_recv_thread+0xc>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   10940:	4621      	mov	r1, r4
   10942:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   10946:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1094a:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
   1094c:	f8b6 8006 	ldrh.w	r8, [r6, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   10950:	f7f6 fed6 	bl	7700 <bt_buf_get_evt>
   10954:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
   10956:	4622      	mov	r2, r4
   10958:	f106 001c 	add.w	r0, r6, #28
   1095c:	4641      	mov	r1, r8
   1095e:	f000 fefd 	bl	1175c <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
   10962:	4640      	mov	r0, r8
   10964:	f000 ff0a 	bl	1177c <hci_disconn_complete_process>
			if (buf) {
   10968:	b12c      	cbz	r4, 10976 <prio_recv_thread+0xe2>
				bt_recv_prio(buf);
   1096a:	4620      	mov	r0, r4
   1096c:	f7f8 f9f4 	bl	8d58 <bt_recv_prio>
					net_buf_unref(buf);
   10970:	4620      	mov	r0, r4
   10972:	f00b ff41 	bl	1c7f8 <net_buf_unref>
   10976:	9e01      	ldr	r6, [sp, #4]
   10978:	e7cb      	b.n	10912 <prio_recv_thread+0x7e>
	register uint32_t r1 __asm__("r1") = arg2;
   1097a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	register uint32_t r2 __asm__("r2") = arg3;
   1097e:	460a      	mov	r2, r1
	register uint32_t ret __asm__("r0") = arg1;
   10980:	4648      	mov	r0, r9
	register uint32_t r6 __asm__("r6") = call_id;
   10982:	26a3      	movs	r6, #163	; 0xa3
	__asm__ volatile("svc %[svid]\n"
   10984:	df03      	svc	3
	return ret;
   10986:	e78b      	b.n	108a0 <prio_recv_thread+0xc>
   10988:	20007ed8 	.word	0x20007ed8
   1098c:	20007ea8 	.word	0x20007ea8

00010990 <hci_driver_open>:
{
   10990:	e92d 4170 	stmdb	sp!, {r4, r5, r6, r8, lr}
	err = ll_init(&sem_prio_recv);
   10994:	4852      	ldr	r0, [pc, #328]	; (10ae0 <hci_driver_open+0x150>)
{
   10996:	b08f      	sub	sp, #60	; 0x3c
	err = ll_init(&sem_prio_recv);
   10998:	f001 fc96 	bl	122c8 <ll_init>
	if (err) {
   1099c:	b1c0      	cbz	r0, 109d0 <hci_driver_open+0x40>
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   1099e:	4604      	mov	r4, r0
   109a0:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   109a4:	4a4f      	ldr	r2, [pc, #316]	; (10ae4 <hci_driver_open+0x154>)
   109a6:	4850      	ldr	r0, [pc, #320]	; (10ae8 <hci_driver_open+0x158>)
   109a8:	1a12      	subs	r2, r2, r0
   109aa:	08d2      	lsrs	r2, r2, #3
   109ac:	2b00      	cmp	r3, #0
   109ae:	d160      	bne.n	10a72 <hci_driver_open+0xe2>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   109b0:	f3ef 8314 	mrs	r3, CONTROL
		BT_ERR("LL initialization failed: %d", err);
   109b4:	0192      	lsls	r2, r2, #6
   109b6:	f042 0001 	orr.w	r0, r2, #1
   109ba:	07de      	lsls	r6, r3, #31
   109bc:	4602      	mov	r2, r0
   109be:	d55b      	bpl.n	10a78 <hci_driver_open+0xe8>
   109c0:	494a      	ldr	r1, [pc, #296]	; (10aec <hci_driver_open+0x15c>)
   109c2:	4622      	mov	r2, r4
   109c4:	f014 fa67 	bl	24e96 <log_from_user>
}
   109c8:	4620      	mov	r0, r4
   109ca:	b00f      	add	sp, #60	; 0x3c
   109cc:	e8bd 8170 	ldmia.w	sp!, {r4, r5, r6, r8, pc}
	hci_init(NULL);
   109d0:	f001 f9ec 	bl	11dac <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
   109d4:	2000      	movs	r0, #0
   109d6:	2100      	movs	r1, #0
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   109d8:	f3ef 8405 	mrs	r4, IPSR
	if (value) {
   109dc:	b91c      	cbnz	r4, 109e6 <hci_driver_open+0x56>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   109de:	f3ef 8314 	mrs	r3, CONTROL
	if (z_syscall_trap()) {
   109e2:	07dd      	lsls	r5, r3, #31
   109e4:	d46b      	bmi.n	10abe <hci_driver_open+0x12e>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   109e6:	2300      	movs	r3, #0
   109e8:	f06f 0209 	mvn.w	r2, #9
   109ec:	e9cd 0106 	strd	r0, r1, [sp, #24]
   109f0:	e9cd 2303 	strd	r2, r3, [sp, #12]
   109f4:	e9cd 3301 	strd	r3, r3, [sp, #4]
   109f8:	9300      	str	r3, [sp, #0]
   109fa:	493d      	ldr	r1, [pc, #244]	; (10af0 <hci_driver_open+0x160>)
   109fc:	4b3d      	ldr	r3, [pc, #244]	; (10af4 <hci_driver_open+0x164>)
   109fe:	483e      	ldr	r0, [pc, #248]	; (10af8 <hci_driver_open+0x168>)
   10a00:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   10a04:	f019 f869 	bl	29ada <z_impl_k_thread_create>
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   10a08:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   10a0c:	b91b      	cbnz	r3, 10a16 <hci_driver_open+0x86>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   10a0e:	f3ef 8314 	mrs	r3, CONTROL
	if (z_syscall_trap()) {
   10a12:	07d9      	lsls	r1, r3, #31
   10a14:	d44e      	bmi.n	10ab4 <hci_driver_open+0x124>
	return z_impl_k_thread_name_set(thread, str);
   10a16:	4939      	ldr	r1, [pc, #228]	; (10afc <hci_driver_open+0x16c>)
   10a18:	4837      	ldr	r0, [pc, #220]	; (10af8 <hci_driver_open+0x168>)
   10a1a:	f019 f850 	bl	29abe <z_impl_k_thread_name_set>
	k_thread_create(&recv_thread_data, recv_thread_stack,
   10a1e:	2000      	movs	r0, #0
   10a20:	2100      	movs	r1, #0
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   10a22:	f3ef 8405 	mrs	r4, IPSR
	if (value) {
   10a26:	b91c      	cbnz	r4, 10a30 <hci_driver_open+0xa0>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   10a28:	f3ef 8314 	mrs	r3, CONTROL
	if (z_syscall_trap()) {
   10a2c:	07da      	lsls	r2, r3, #31
   10a2e:	d430      	bmi.n	10a92 <hci_driver_open+0x102>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   10a30:	2300      	movs	r3, #0
   10a32:	f06f 0207 	mvn.w	r2, #7
   10a36:	e9cd 0106 	strd	r0, r1, [sp, #24]
   10a3a:	e9cd 2303 	strd	r2, r3, [sp, #12]
   10a3e:	e9cd 3301 	strd	r3, r3, [sp, #4]
   10a42:	9300      	str	r3, [sp, #0]
   10a44:	492e      	ldr	r1, [pc, #184]	; (10b00 <hci_driver_open+0x170>)
   10a46:	4b2f      	ldr	r3, [pc, #188]	; (10b04 <hci_driver_open+0x174>)
   10a48:	482f      	ldr	r0, [pc, #188]	; (10b08 <hci_driver_open+0x178>)
   10a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   10a4e:	f019 f844 	bl	29ada <z_impl_k_thread_create>
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   10a52:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   10a56:	b91b      	cbnz	r3, 10a60 <hci_driver_open+0xd0>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   10a58:	f3ef 8314 	mrs	r3, CONTROL
	if (z_syscall_trap()) {
   10a5c:	07db      	lsls	r3, r3, #31
   10a5e:	d413      	bmi.n	10a88 <hci_driver_open+0xf8>
	return z_impl_k_thread_name_set(thread, str);
   10a60:	492a      	ldr	r1, [pc, #168]	; (10b0c <hci_driver_open+0x17c>)
   10a62:	4829      	ldr	r0, [pc, #164]	; (10b08 <hci_driver_open+0x178>)
   10a64:	f019 f82b 	bl	29abe <z_impl_k_thread_name_set>
{
   10a68:	2400      	movs	r4, #0
}
   10a6a:	4620      	mov	r0, r4
   10a6c:	b00f      	add	sp, #60	; 0x3c
   10a6e:	e8bd 8170 	ldmia.w	sp!, {r4, r5, r6, r8, pc}
		BT_ERR("LL initialization failed: %d", err);
   10a72:	0192      	lsls	r2, r2, #6
   10a74:	f042 0201 	orr.w	r2, r2, #1
   10a78:	481c      	ldr	r0, [pc, #112]	; (10aec <hci_driver_open+0x15c>)
   10a7a:	4621      	mov	r1, r4
   10a7c:	f014 fa3e 	bl	24efc <log_1>
}
   10a80:	4620      	mov	r0, r4
   10a82:	b00f      	add	sp, #60	; 0x3c
   10a84:	e8bd 8170 	ldmia.w	sp!, {r4, r5, r6, r8, pc}
	register uint32_t ret __asm__("r0") = arg1;
   10a88:	481f      	ldr	r0, [pc, #124]	; (10b08 <hci_driver_open+0x178>)
	register uint32_t r1 __asm__("r1") = arg2;
   10a8a:	4920      	ldr	r1, [pc, #128]	; (10b0c <hci_driver_open+0x17c>)
	register uint32_t r6 __asm__("r6") = call_id;
   10a8c:	26b0      	movs	r6, #176	; 0xb0
	__asm__ volatile("svc %[svid]\n"
   10a8e:	df03      	svc	3
	return ret;
   10a90:	e7ea      	b.n	10a68 <hci_driver_open+0xd8>
		uintptr_t more[] = {
   10a92:	f06f 0307 	mvn.w	r3, #7
   10a96:	930a      	str	r3, [sp, #40]	; 0x28
   10a98:	e9cd 4408 	strd	r4, r4, [sp, #32]
   10a9c:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
	register uint32_t ret __asm__("r0") = arg1;
   10aa0:	4819      	ldr	r0, [pc, #100]	; (10b08 <hci_driver_open+0x178>)
	register uint32_t r1 __asm__("r1") = arg2;
   10aa2:	4917      	ldr	r1, [pc, #92]	; (10b00 <hci_driver_open+0x170>)
	register uint32_t r3 __asm__("r3") = arg4;
   10aa4:	4b17      	ldr	r3, [pc, #92]	; (10b04 <hci_driver_open+0x174>)
   10aa6:	940d      	str	r4, [sp, #52]	; 0x34
	register uint32_t r2 __asm__("r2") = arg3;
   10aa8:	f44f 6280 	mov.w	r2, #1024	; 0x400
	register uint32_t r5 __asm__("r5") = arg6;
   10aac:	ad08      	add	r5, sp, #32
	register uint32_t r6 __asm__("r6") = call_id;
   10aae:	26aa      	movs	r6, #170	; 0xaa
	__asm__ volatile("svc %[svid]\n"
   10ab0:	df03      	svc	3
	return ret;
   10ab2:	e7ce      	b.n	10a52 <hci_driver_open+0xc2>
	register uint32_t ret __asm__("r0") = arg1;
   10ab4:	4810      	ldr	r0, [pc, #64]	; (10af8 <hci_driver_open+0x168>)
	register uint32_t r1 __asm__("r1") = arg2;
   10ab6:	4911      	ldr	r1, [pc, #68]	; (10afc <hci_driver_open+0x16c>)
	register uint32_t r6 __asm__("r6") = call_id;
   10ab8:	26b0      	movs	r6, #176	; 0xb0
	__asm__ volatile("svc %[svid]\n"
   10aba:	df03      	svc	3
	return ret;
   10abc:	e7af      	b.n	10a1e <hci_driver_open+0x8e>
   10abe:	f06f 0309 	mvn.w	r3, #9
   10ac2:	930a      	str	r3, [sp, #40]	; 0x28
   10ac4:	e9cd 4408 	strd	r4, r4, [sp, #32]
   10ac8:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
	register uint32_t ret __asm__("r0") = arg1;
   10acc:	480a      	ldr	r0, [pc, #40]	; (10af8 <hci_driver_open+0x168>)
	register uint32_t r1 __asm__("r1") = arg2;
   10ace:	4908      	ldr	r1, [pc, #32]	; (10af0 <hci_driver_open+0x160>)
	register uint32_t r3 __asm__("r3") = arg4;
   10ad0:	4b08      	ldr	r3, [pc, #32]	; (10af4 <hci_driver_open+0x164>)
   10ad2:	940d      	str	r4, [sp, #52]	; 0x34
	register uint32_t r2 __asm__("r2") = arg3;
   10ad4:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
	register uint32_t r5 __asm__("r5") = arg6;
   10ad8:	ad08      	add	r5, sp, #32
	register uint32_t r6 __asm__("r6") = call_id;
   10ada:	26aa      	movs	r6, #170	; 0xaa
	__asm__ volatile("svc %[svid]\n"
   10adc:	df03      	svc	3
	return ret;
   10ade:	e793      	b.n	10a08 <hci_driver_open+0x78>
   10ae0:	20007ea8 	.word	0x20007ea8
   10ae4:	0002a720 	.word	0x0002a720
   10ae8:	0002a6d0 	.word	0x0002a6d0
   10aec:	0002b160 	.word	0x0002b160
   10af0:	20003af0 	.word	0x20003af0
   10af4:	00010895 	.word	0x00010895
   10af8:	20000620 	.word	0x20000620
   10afc:	0002b180 	.word	0x0002b180
   10b00:	20003cb0 	.word	0x20003cb0
   10b04:	0001076d 	.word	0x0001076d
   10b08:	200006c0 	.word	0x200006c0
   10b0c:	0002b18c 	.word	0x0002b18c

00010b10 <cmd_complete_status>:
{
	return bt_hci_cmd_status_create(_opcode, status);
}

static struct net_buf *cmd_complete_status(uint8_t status)
{
   10b10:	b538      	push	{r3, r4, r5, lr}
	struct net_buf *buf;
	struct bt_hci_evt_cc_status *ccst;

	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   10b12:	4b07      	ldr	r3, [pc, #28]	; (10b30 <cmd_complete_status+0x20>)
{
   10b14:	4605      	mov	r5, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   10b16:	2101      	movs	r1, #1
   10b18:	8818      	ldrh	r0, [r3, #0]
   10b1a:	f016 fa47 	bl	26fac <bt_hci_cmd_complete_create>
   10b1e:	2101      	movs	r1, #1
   10b20:	4604      	mov	r4, r0
   10b22:	3008      	adds	r0, #8
   10b24:	f018 f8be 	bl	28ca4 <net_buf_simple_add>
   10b28:	4603      	mov	r3, r0
	ccst = net_buf_add(buf, sizeof(*ccst));
	ccst->status = status;

	return buf;
}
   10b2a:	4620      	mov	r0, r4
	ccst->status = status;
   10b2c:	701d      	strb	r5, [r3, #0]
}
   10b2e:	bd38      	pop	{r3, r4, r5, pc}
   10b30:	20002522 	.word	0x20002522

00010b34 <meta_evt>:

static void *meta_evt(struct net_buf *buf, uint8_t subevt, uint8_t melen)
{
   10b34:	b570      	push	{r4, r5, r6, lr}
   10b36:	f100 0408 	add.w	r4, r0, #8
   10b3a:	460e      	mov	r6, r1
   10b3c:	4620      	mov	r0, r4
   10b3e:	2102      	movs	r1, #2
   10b40:	4615      	mov	r5, r2
   10b42:	f018 f8af 	bl	28ca4 <net_buf_simple_add>
	struct bt_hci_evt_le_meta_event *me;

	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   10b46:	1c6b      	adds	r3, r5, #1
	hdr->evt = evt;
   10b48:	223e      	movs	r2, #62	; 0x3e
   10b4a:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   10b4c:	7043      	strb	r3, [r0, #1]
   10b4e:	2101      	movs	r1, #1
   10b50:	4620      	mov	r0, r4
   10b52:	f018 f8a7 	bl	28ca4 <net_buf_simple_add>
	me = net_buf_add(buf, sizeof(*me));
	me->subevent = subevt;
   10b56:	7006      	strb	r6, [r0, #0]
   10b58:	4629      	mov	r1, r5
   10b5a:	4620      	mov	r0, r4

	return net_buf_add(buf, melen);
}
   10b5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10b60:	f018 b8a0 	b.w	28ca4 <net_buf_simple_add>

00010b64 <encrypt_change.part.0>:
	sep->handle = sys_cpu_to_le16(handle);
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
}

static void encrypt_change(uint8_t err, uint16_t handle,
   10b64:	b570      	push	{r4, r5, r6, lr}
   10b66:	f102 0508 	add.w	r5, r2, #8
   10b6a:	4604      	mov	r4, r0
   10b6c:	460e      	mov	r6, r1
   10b6e:	4628      	mov	r0, r5
   10b70:	2102      	movs	r1, #2
   10b72:	f018 f897 	bl	28ca4 <net_buf_simple_add>
   10b76:	4603      	mov	r3, r0
	hdr->evt = evt;
   10b78:	2208      	movs	r2, #8
	hdr->len = len;
   10b7a:	2104      	movs	r1, #4
	hdr->evt = evt;
   10b7c:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
   10b7e:	7059      	strb	r1, [r3, #1]
   10b80:	4628      	mov	r0, r5
   10b82:	f018 f88f 	bl	28ca4 <net_buf_simple_add>
	hci_evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
	ep = net_buf_add(buf, sizeof(*ep));

	ep->status = err;
	ep->handle = sys_cpu_to_le16(handle);
	ep->encrypt = !err ? 1 : 0;
   10b86:	fab4 f384 	clz	r3, r4
   10b8a:	095b      	lsrs	r3, r3, #5
	ep->status = err;
   10b8c:	7004      	strb	r4, [r0, #0]
	ep->encrypt = !err ? 1 : 0;
   10b8e:	70c3      	strb	r3, [r0, #3]
	ep->handle = sys_cpu_to_le16(handle);
   10b90:	f8a0 6001 	strh.w	r6, [r0, #1]
}
   10b94:	bd70      	pop	{r4, r5, r6, pc}
   10b96:	bf00      	nop

00010b98 <le_remote_feat_complete>:
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
   10b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   10b9c:	4c17      	ldr	r4, [pc, #92]	; (10bfc <le_remote_feat_complete+0x64>)
   10b9e:	6866      	ldr	r6, [r4, #4]
   10ba0:	f04f 0900 	mov.w	r9, #0
   10ba4:	464c      	mov	r4, r9
   10ba6:	f006 5500 	and.w	r5, r6, #536870912	; 0x20000000
{
   10baa:	4690      	mov	r8, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   10bac:	ea54 0205 	orrs.w	r2, r4, r5
   10bb0:	d009      	beq.n	10bc6 <le_remote_feat_complete+0x2e>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
   10bb2:	4a13      	ldr	r2, [pc, #76]	; (10c00 <le_remote_feat_complete+0x68>)
   10bb4:	6812      	ldr	r2, [r2, #0]
   10bb6:	4607      	mov	r7, r0
   10bb8:	460e      	mov	r6, r1
   10bba:	f002 0008 	and.w	r0, r2, #8
   10bbe:	4649      	mov	r1, r9
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   10bc0:	ea50 0201 	orrs.w	r2, r0, r1
   10bc4:	d101      	bne.n	10bca <le_remote_feat_complete+0x32>
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
   10bc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	sep = meta_evt(buf, BT_HCI_EVT_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
   10bca:	4618      	mov	r0, r3
   10bcc:	220b      	movs	r2, #11
   10bce:	2104      	movs	r1, #4
   10bd0:	f7ff ffb0 	bl	10b34 <meta_evt>
	sep->status = status;
   10bd4:	7007      	strb	r7, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   10bd6:	f8a0 8001 	strh.w	r8, [r0, #1]
	if (!status) {
   10bda:	b947      	cbnz	r7, 10bee <le_remote_feat_complete+0x56>
   10bdc:	f856 3f04 	ldr.w	r3, [r6, #4]!
   10be0:	6872      	ldr	r2, [r6, #4]
   10be2:	f8c0 2007 	str.w	r2, [r0, #7]
   10be6:	f8c0 3003 	str.w	r3, [r0, #3]
}
   10bea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
__ssp_bos_icheck3(memset, void *, int)
   10bee:	f8c0 9003 	str.w	r9, [r0, #3]
   10bf2:	f8c0 9007 	str.w	r9, [r0, #7]
   10bf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10bfa:	bf00      	nop
   10bfc:	20007728 	.word	0x20007728
   10c00:	20007730 	.word	0x20007730

00010c04 <hci_disconn_complete_encode.part.0>:
void hci_disconn_complete_encode(struct pdu_data *pdu_data, uint16_t handle,
   10c04:	b570      	push	{r4, r5, r6, lr}
   10c06:	f102 0408 	add.w	r4, r2, #8
   10c0a:	4605      	mov	r5, r0
   10c0c:	460e      	mov	r6, r1
   10c0e:	4620      	mov	r0, r4
   10c10:	2102      	movs	r1, #2
   10c12:	f018 f847 	bl	28ca4 <net_buf_simple_add>
   10c16:	4603      	mov	r3, r0
	hdr->evt = evt;
   10c18:	2205      	movs	r2, #5
	hdr->len = len;
   10c1a:	2104      	movs	r1, #4
	hdr->evt = evt;
   10c1c:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
   10c1e:	7059      	strb	r1, [r3, #1]
   10c20:	4620      	mov	r0, r4
   10c22:	f018 f83f 	bl	28ca4 <net_buf_simple_add>
	ep->status = 0x00;
   10c26:	2300      	movs	r3, #0
	ep->handle = sys_cpu_to_le16(handle);
   10c28:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->status = 0x00;
   10c2c:	7003      	strb	r3, [r0, #0]
	ep->reason = *((uint8_t *)pdu_data);
   10c2e:	782b      	ldrb	r3, [r5, #0]
   10c30:	70c3      	strb	r3, [r0, #3]
}
   10c32:	bd70      	pop	{r4, r5, r6, pc}

00010c34 <hci_cmd_complete>:
{
   10c34:	b538      	push	{r3, r4, r5, lr}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   10c36:	4b06      	ldr	r3, [pc, #24]	; (10c50 <hci_cmd_complete+0x1c>)
{
   10c38:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   10c3a:	8818      	ldrh	r0, [r3, #0]
{
   10c3c:	460c      	mov	r4, r1
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   10c3e:	f016 f9b5 	bl	26fac <bt_hci_cmd_complete_create>
   10c42:	4621      	mov	r1, r4
   10c44:	6028      	str	r0, [r5, #0]
}
   10c46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10c4a:	3008      	adds	r0, #8
   10c4c:	f018 b82a 	b.w	28ca4 <net_buf_simple_add>
   10c50:	20002522 	.word	0x20002522

00010c54 <hci_vendor_cmd_handle_common>:
{
   10c54:	b5f0      	push	{r4, r5, r6, r7, lr}
   10c56:	1e43      	subs	r3, r0, #1
   10c58:	b087      	sub	sp, #28
   10c5a:	4614      	mov	r4, r2
   10c5c:	2b09      	cmp	r3, #9
   10c5e:	d806      	bhi.n	10c6e <hci_vendor_cmd_handle_common+0x1a>
   10c60:	e8df f003 	tbb	[pc, r3]
   10c64:	05342109 	.word	0x05342109
   10c68:	4e054305 	.word	0x4e054305
   10c6c:	7869      	.short	0x7869
	return 0;
   10c6e:	f06f 0015 	mvn.w	r0, #21
}
   10c72:	b007      	add	sp, #28
   10c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10c76:	4620      	mov	r0, r4
   10c78:	210d      	movs	r1, #13
   10c7a:	f7ff ffdb 	bl	10c34 <hci_cmd_complete>
   10c7e:	4603      	mov	r3, r0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   10c80:	2202      	movs	r2, #2
	rp->status = 0x00;
   10c82:	2000      	movs	r0, #0
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   10c84:	2405      	movs	r4, #5
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   10c86:	2163      	movs	r1, #99	; 0x63
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   10c88:	71dc      	strb	r4, [r3, #7]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   10c8a:	7259      	strb	r1, [r3, #9]
	rp->status = 0x00;
   10c8c:	7018      	strb	r0, [r3, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   10c8e:	7098      	strb	r0, [r3, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   10c90:	7118      	strb	r0, [r3, #4]
	rp->fw_variant = 0U;
   10c92:	7158      	strb	r0, [r3, #5]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   10c94:	7218      	strb	r0, [r3, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   10c96:	7298      	strb	r0, [r3, #10]
   10c98:	72d8      	strb	r0, [r3, #11]
   10c9a:	7318      	strb	r0, [r3, #12]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   10c9c:	705a      	strb	r2, [r3, #1]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   10c9e:	70da      	strb	r2, [r3, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   10ca0:	719a      	strb	r2, [r3, #6]
}
   10ca2:	b007      	add	sp, #28
   10ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10ca6:	4620      	mov	r0, r4
   10ca8:	2141      	movs	r1, #65	; 0x41
   10caa:	f7ff ffc3 	bl	10c34 <hci_cmd_complete>
	rp->status = 0x00;
   10cae:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10cb0:	4605      	mov	r5, r0
   10cb2:	4621      	mov	r1, r4
	rp->status = 0x00;
   10cb4:	f800 4b01 	strb.w	r4, [r0], #1
   10cb8:	2240      	movs	r2, #64	; 0x40
   10cba:	f019 fb9f 	bl	2a3fc <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
   10cbe:	22a7      	movs	r2, #167	; 0xa7
	rp->commands[1] |= BIT(0) | BIT(1);
   10cc0:	2303      	movs	r3, #3
	return 0;
   10cc2:	4620      	mov	r0, r4
	rp->commands[0] |= BIT(5) | BIT(7);
   10cc4:	706a      	strb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   10cc6:	70ab      	strb	r3, [r5, #2]
}
   10cc8:	b007      	add	sp, #28
   10cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10ccc:	4620      	mov	r0, r4
   10cce:	2109      	movs	r1, #9
   10cd0:	f7ff ffb0 	bl	10c34 <hci_cmd_complete>
	rp->status = 0x00;
   10cd4:	4601      	mov	r1, r0
   10cd6:	2300      	movs	r3, #0
   10cd8:	f801 3b01 	strb.w	r3, [r1], #1
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10cdc:	4602      	mov	r2, r0
	return 0;
   10cde:	4618      	mov	r0, r3
   10ce0:	f8c2 3001 	str.w	r3, [r2, #1]
   10ce4:	604b      	str	r3, [r1, #4]
}
   10ce6:	b007      	add	sp, #28
   10ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ll_addr_set(0, &cmd->bdaddr.val[0]);
   10cea:	6889      	ldr	r1, [r1, #8]
   10cec:	2000      	movs	r0, #0
   10cee:	f7ff fc8f 	bl	10610 <ll_addr_set>
	*evt = cmd_complete_status(0x00);
   10cf2:	2000      	movs	r0, #0
   10cf4:	f7ff ff0c 	bl	10b10 <cmd_complete_status>
   10cf8:	6020      	str	r0, [r4, #0]
   10cfa:	2000      	movs	r0, #0
}
   10cfc:	b007      	add	sp, #28
   10cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	const char build_info[] = HCI_VS_BUILD_INFO;
   10d00:	4e1b      	ldr	r6, [pc, #108]	; (10d70 <hci_vendor_cmd_handle_common+0x11c>)
   10d02:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   10d04:	ad01      	add	r5, sp, #4
   10d06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   10d08:	6833      	ldr	r3, [r6, #0]
   10d0a:	802b      	strh	r3, [r5, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
   10d0c:	4620      	mov	r0, r4
   10d0e:	2113      	movs	r1, #19
   10d10:	f7ff ff90 	bl	10c34 <hci_cmd_complete>
   10d14:	ad01      	add	r5, sp, #4
   10d16:	4607      	mov	r7, r0
   10d18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
	rp->status = 0x00;
   10d1a:	463e      	mov	r6, r7
   10d1c:	2400      	movs	r4, #0
   10d1e:	f806 4b01 	strb.w	r4, [r6], #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   10d22:	882d      	ldrh	r5, [r5, #0]
   10d24:	f8c7 0001 	str.w	r0, [r7, #1]
	return 0;
   10d28:	4620      	mov	r0, r4
   10d2a:	6071      	str	r1, [r6, #4]
   10d2c:	60b2      	str	r2, [r6, #8]
   10d2e:	60f3      	str	r3, [r6, #12]
   10d30:	8235      	strh	r5, [r6, #16]
}
   10d32:	b007      	add	sp, #28
   10d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp) +
   10d36:	4620      	mov	r0, r4
   10d38:	2118      	movs	r1, #24
   10d3a:	f7ff ff7b 	bl	10c34 <hci_cmd_complete>
	rp->status = 0x00;
   10d3e:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp) +
   10d40:	4605      	mov	r5, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   10d42:	2101      	movs	r1, #1
	rp->status = 0x00;
   10d44:	f800 4b02 	strb.w	r4, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   10d48:	f00b fbdc 	bl	1c504 <hci_vendor_read_static_addr>
   10d4c:	7068      	strb	r0, [r5, #1]
	return 0;
   10d4e:	4620      	mov	r0, r4
}
   10d50:	b007      	add	sp, #28
   10d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10d54:	4620      	mov	r0, r4
   10d56:	2121      	movs	r1, #33	; 0x21
   10d58:	f7ff ff6c 	bl	10c34 <hci_cmd_complete>
	rp->status = 0x00;
   10d5c:	4601      	mov	r1, r0
   10d5e:	2400      	movs	r4, #0
   10d60:	f801 4b11 	strb.w	r4, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
   10d64:	3001      	adds	r0, #1
   10d66:	f00b fc43 	bl	1c5f0 <hci_vendor_read_key_hierarchy_roots>
	return 0;
   10d6a:	4620      	mov	r0, r4
}
   10d6c:	b007      	add	sp, #28
   10d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10d70:	0002b1c8 	.word	0x0002b1c8

00010d74 <hci_cmd_handle>:
{
   10d74:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
   10d76:	8983      	ldrh	r3, [r0, #12]
{
   10d78:	b08d      	sub	sp, #52	; 0x34
	struct net_buf *evt = NULL;
   10d7a:	2200      	movs	r2, #0
	if (cmd->len < sizeof(*chdr)) {
   10d7c:	2b02      	cmp	r3, #2
	struct net_buf *evt = NULL;
   10d7e:	9207      	str	r2, [sp, #28]
	if (cmd->len < sizeof(*chdr)) {
   10d80:	f240 8090 	bls.w	10ea4 <hci_cmd_handle+0x130>
	return net_buf_simple_pull_mem(&buf->b, len);
   10d84:	4604      	mov	r4, r0
   10d86:	2103      	movs	r1, #3
   10d88:	3008      	adds	r0, #8
   10d8a:	f017 ffb3 	bl	28cf4 <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
   10d8e:	89a2      	ldrh	r2, [r4, #12]
   10d90:	7883      	ldrb	r3, [r0, #2]
   10d92:	429a      	cmp	r2, r3
   10d94:	f0c0 80cd 	bcc.w	10f32 <hci_cmd_handle+0x1be>
	_opcode = sys_le16_to_cpu(chdr->opcode);
   10d98:	8801      	ldrh	r1, [r0, #0]
   10d9a:	4d8e      	ldr	r5, [pc, #568]	; (10fd4 <hci_cmd_handle+0x260>)
	switch (BT_OGF(_opcode)) {
   10d9c:	f5b1 5f10 	cmp.w	r1, #9216	; 0x2400
	_opcode = sys_le16_to_cpu(chdr->opcode);
   10da0:	b288      	uxth	r0, r1
   10da2:	8029      	strh	r1, [r5, #0]
	ocf = BT_OCF(_opcode);
   10da4:	f3c1 0309 	ubfx	r3, r1, #0, #10
	switch (BT_OGF(_opcode)) {
   10da8:	ea4f 2291 	mov.w	r2, r1, lsr #10
   10dac:	d26b      	bcs.n	10e86 <hci_cmd_handle+0x112>
   10dae:	2a00      	cmp	r2, #0
   10db0:	d073      	beq.n	10e9a <hci_cmd_handle+0x126>
   10db2:	3a01      	subs	r2, #1
   10db4:	2a07      	cmp	r2, #7
   10db6:	d870      	bhi.n	10e9a <hci_cmd_handle+0x126>
   10db8:	e8df f002 	tbb	[pc, r2]
   10dbc:	578a6fa6 	.word	0x578a6fa6
   10dc0:	046f6f6f 	.word	0x046f6f6f
	switch (ocf) {
   10dc4:	3b01      	subs	r3, #1
   10dc6:	2b4d      	cmp	r3, #77	; 0x4d
   10dc8:	d867      	bhi.n	10e9a <hci_cmd_handle+0x126>
   10dca:	e8df f013 	tbh	[pc, r3, lsl #1]
   10dce:	018d      	.short	0x018d
   10dd0:	016d0180 	.word	0x016d0180
   10dd4:	01660066 	.word	0x01660066
   10dd8:	023c0156 	.word	0x023c0156
   10ddc:	02a10234 	.word	0x02a10234
   10de0:	0066029a 	.word	0x0066029a
   10de4:	00660066 	.word	0x00660066
   10de8:	028e0066 	.word	0x028e0066
   10dec:	02830289 	.word	0x02830289
   10df0:	0252027d 	.word	0x0252027d
   10df4:	026d0066 	.word	0x026d0066
   10df8:	03680264 	.word	0x03680264
   10dfc:	0066035c 	.word	0x0066035c
   10e00:	034e0356 	.word	0x034e0356
   10e04:	00660338 	.word	0x00660338
   10e08:	00660066 	.word	0x00660066
   10e0c:	031d0329 	.word	0x031d0329
   10e10:	02fc0315 	.word	0x02fc0315
   10e14:	006602f3 	.word	0x006602f3
   10e18:	02ea0066 	.word	0x02ea0066
   10e1c:	02df02e4 	.word	0x02df02e4
   10e20:	02be02d3 	.word	0x02be02d3
   10e24:	022602a9 	.word	0x022602a9
   10e28:	01fd021e 	.word	0x01fd021e
   10e2c:	01c401d5 	.word	0x01c401d5
   10e30:	00660197 	.word	0x00660197
   10e34:	00660066 	.word	0x00660066
   10e38:	00660066 	.word	0x00660066
   10e3c:	00660066 	.word	0x00660066
   10e40:	00660066 	.word	0x00660066
   10e44:	00660066 	.word	0x00660066
   10e48:	00660066 	.word	0x00660066
   10e4c:	00660066 	.word	0x00660066
   10e50:	00660066 	.word	0x00660066
   10e54:	00660066 	.word	0x00660066
   10e58:	00660066 	.word	0x00660066
   10e5c:	00660066 	.word	0x00660066
   10e60:	02450066 	.word	0x02450066
   10e64:	00660066 	.word	0x00660066
   10e68:	022d      	.short	0x022d
	switch (ocf) {
   10e6a:	3b01      	subs	r3, #1
   10e6c:	2b08      	cmp	r3, #8
   10e6e:	d814      	bhi.n	10e9a <hci_cmd_handle+0x126>
   10e70:	e8df f013 	tbh	[pc, r3, lsl #1]
   10e74:	00bc00ec 	.word	0x00bc00ec
   10e78:	0013009f 	.word	0x0013009f
   10e7c:	00130013 	.word	0x00130013
   10e80:	00130013 	.word	0x00130013
   10e84:	0093      	.short	0x0093
	switch (BT_OGF(_opcode)) {
   10e86:	2a3f      	cmp	r2, #63	; 0x3f
   10e88:	d107      	bne.n	10e9a <hci_cmd_handle+0x126>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
   10e8a:	4621      	mov	r1, r4
   10e8c:	4618      	mov	r0, r3
   10e8e:	aa07      	add	r2, sp, #28
   10e90:	f7ff fee0 	bl	10c54 <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
   10e94:	3016      	adds	r0, #22
   10e96:	d177      	bne.n	10f88 <hci_cmd_handle+0x214>
   10e98:	8828      	ldrh	r0, [r5, #0]
	return bt_hci_cmd_status_create(_opcode, status);
   10e9a:	2101      	movs	r1, #1
   10e9c:	f016 f898 	bl	26fd0 <bt_hci_cmd_status_create>
}
   10ea0:	b00d      	add	sp, #52	; 0x34
   10ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   10ea4:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   10ea8:	494b      	ldr	r1, [pc, #300]	; (10fd8 <hci_cmd_handle+0x264>)
   10eaa:	484c      	ldr	r0, [pc, #304]	; (10fdc <hci_cmd_handle+0x268>)
   10eac:	1a09      	subs	r1, r1, r0
   10eae:	08c9      	lsrs	r1, r1, #3
   10eb0:	2b00      	cmp	r3, #0
   10eb2:	d137      	bne.n	10f24 <hci_cmd_handle+0x1b0>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   10eb4:	f3ef 8314 	mrs	r3, CONTROL
		BT_ERR("No HCI Command header");
   10eb8:	0189      	lsls	r1, r1, #6
   10eba:	f041 0001 	orr.w	r0, r1, #1
   10ebe:	07dd      	lsls	r5, r3, #31
   10ec0:	4601      	mov	r1, r0
   10ec2:	d532      	bpl.n	10f2a <hci_cmd_handle+0x1b6>
   10ec4:	4946      	ldr	r1, [pc, #280]	; (10fe0 <hci_cmd_handle+0x26c>)
   10ec6:	f013 ffe6 	bl	24e96 <log_from_user>
		return NULL;
   10eca:	2000      	movs	r0, #0
}
   10ecc:	b00d      	add	sp, #52	; 0x34
   10ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
   10ed0:	2b63      	cmp	r3, #99	; 0x63
   10ed2:	f000 8321 	beq.w	11518 <hci_cmd_handle+0x7a4>
   10ed6:	d844      	bhi.n	10f62 <hci_cmd_handle+0x1ee>
   10ed8:	2b03      	cmp	r3, #3
   10eda:	f000 8303 	beq.w	114e4 <hci_cmd_handle+0x770>
   10ede:	2b2d      	cmp	r3, #45	; 0x2d
   10ee0:	d13a      	bne.n	10f58 <hci_cmd_handle+0x1e4>
		read_tx_power_level(cmd, evt);
   10ee2:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10ee4:	2104      	movs	r1, #4
   10ee6:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
   10ee8:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
   10eea:	789e      	ldrb	r6, [r3, #2]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10eec:	f7ff fea2 	bl	10c34 <hci_cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
   10ef0:	b2a9      	uxth	r1, r5
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10ef2:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
   10ef4:	1cc3      	adds	r3, r0, #3
   10ef6:	4632      	mov	r2, r6
   10ef8:	2002      	movs	r0, #2
   10efa:	f7ff fba7 	bl	1064c <ll_tx_pwr_lvl_get>
	rp->status = status;
   10efe:	7020      	strb	r0, [r4, #0]
	rp->handle = sys_cpu_to_le16(handle);
   10f00:	9807      	ldr	r0, [sp, #28]
   10f02:	f8a4 5001 	strh.w	r5, [r4, #1]
}
   10f06:	e7cb      	b.n	10ea0 <hci_cmd_handle+0x12c>
	switch (ocf) {
   10f08:	2b06      	cmp	r3, #6
   10f0a:	f000 82e1 	beq.w	114d0 <hci_cmd_handle+0x75c>
   10f0e:	2b1d      	cmp	r3, #29
   10f10:	d1c3      	bne.n	10e9a <hci_cmd_handle+0x126>
	handle = sys_le16_to_cpu(cmd->handle);
   10f12:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
   10f14:	8818      	ldrh	r0, [r3, #0]
   10f16:	f003 fe6b 	bl	14bf0 <ll_version_ind_send>
   10f1a:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   10f1c:	8828      	ldrh	r0, [r5, #0]
   10f1e:	f016 f857 	bl	26fd0 <bt_hci_cmd_status_create>
}
   10f22:	e7bd      	b.n	10ea0 <hci_cmd_handle+0x12c>
		BT_ERR("No HCI Command header");
   10f24:	0189      	lsls	r1, r1, #6
   10f26:	f041 0101 	orr.w	r1, r1, #1
   10f2a:	482d      	ldr	r0, [pc, #180]	; (10fe0 <hci_cmd_handle+0x26c>)
   10f2c:	f013 ffd9 	bl	24ee2 <log_0>
		return NULL;
   10f30:	e7cb      	b.n	10eca <hci_cmd_handle+0x156>
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   10f32:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   10f36:	4828      	ldr	r0, [pc, #160]	; (10fd8 <hci_cmd_handle+0x264>)
   10f38:	4a28      	ldr	r2, [pc, #160]	; (10fdc <hci_cmd_handle+0x268>)
   10f3a:	1a80      	subs	r0, r0, r2
   10f3c:	08c0      	lsrs	r0, r0, #3
   10f3e:	bb2b      	cbnz	r3, 10f8c <hci_cmd_handle+0x218>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   10f40:	f3ef 8314 	mrs	r3, CONTROL
		BT_ERR("Invalid HCI CMD packet length");
   10f44:	0180      	lsls	r0, r0, #6
   10f46:	f040 0001 	orr.w	r0, r0, #1
   10f4a:	07dc      	lsls	r4, r3, #31
   10f4c:	4601      	mov	r1, r0
   10f4e:	d520      	bpl.n	10f92 <hci_cmd_handle+0x21e>
   10f50:	4924      	ldr	r1, [pc, #144]	; (10fe4 <hci_cmd_handle+0x270>)
   10f52:	f013 ffa0 	bl	24e96 <log_from_user>
   10f56:	e7b8      	b.n	10eca <hci_cmd_handle+0x156>
	switch (ocf) {
   10f58:	2b01      	cmp	r3, #1
   10f5a:	d19e      	bne.n	10e9a <hci_cmd_handle+0x126>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   10f5c:	68a2      	ldr	r2, [r4, #8]
	event_mask = sys_get_le64(cmd->events);
   10f5e:	4b22      	ldr	r3, [pc, #136]	; (10fe8 <hci_cmd_handle+0x274>)
   10f60:	e0c4      	b.n	110ec <hci_cmd_handle+0x378>
	switch (ocf) {
   10f62:	2b7b      	cmp	r3, #123	; 0x7b
   10f64:	f000 82db 	beq.w	1151e <hci_cmd_handle+0x7aa>
   10f68:	2b7c      	cmp	r3, #124	; 0x7c
   10f6a:	d196      	bne.n	10e9a <hci_cmd_handle+0x126>
		write_auth_payload_timeout(cmd, evt);
   10f6c:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   10f6e:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
   10f70:	8859      	ldrh	r1, [r3, #2]
   10f72:	4628      	mov	r0, r5
   10f74:	f003 ff76 	bl	14e64 <ll_apto_set>
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   10f78:	4604      	mov	r4, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10f7a:	2103      	movs	r1, #3
   10f7c:	a807      	add	r0, sp, #28
   10f7e:	f7ff fe59 	bl	10c34 <hci_cmd_complete>
	rp->status = status;
   10f82:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   10f84:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (err == -EINVAL) {
   10f88:	9807      	ldr	r0, [sp, #28]
   10f8a:	e789      	b.n	10ea0 <hci_cmd_handle+0x12c>
		BT_ERR("Invalid HCI CMD packet length");
   10f8c:	0180      	lsls	r0, r0, #6
   10f8e:	f040 0101 	orr.w	r1, r0, #1
   10f92:	4814      	ldr	r0, [pc, #80]	; (10fe4 <hci_cmd_handle+0x270>)
   10f94:	f013 ffa5 	bl	24ee2 <log_0>
   10f98:	e797      	b.n	10eca <hci_cmd_handle+0x156>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10f9a:	2107      	movs	r1, #7
   10f9c:	a807      	add	r0, sp, #28
   10f9e:	f7ff fe49 	bl	10c34 <hci_cmd_complete>
	rp->status = 0x00;
   10fa2:	4601      	mov	r1, r0
   10fa4:	2000      	movs	r0, #0
   10fa6:	f801 0b01 	strb.w	r0, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
   10faa:	f7ff fb13 	bl	105d4 <ll_addr_get>
	if (err == -EINVAL) {
   10fae:	9807      	ldr	r0, [sp, #28]
   10fb0:	e776      	b.n	10ea0 <hci_cmd_handle+0x12c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10fb2:	2109      	movs	r1, #9
   10fb4:	a807      	add	r0, sp, #28
   10fb6:	f7ff fe3d 	bl	10c34 <hci_cmd_complete>
	rp->status = 0x00;
   10fba:	4602      	mov	r2, r0
   10fbc:	2100      	movs	r1, #0
   10fbe:	f802 1b01 	strb.w	r1, [r2], #1
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10fc2:	4603      	mov	r3, r0
__ssp_bos_icheck3(memset, void *, int)
   10fc4:	f8c0 1001 	str.w	r1, [r0, #1]
	rp->features[4] = (1 << 5) | (1 << 6);
   10fc8:	2460      	movs	r4, #96	; 0x60
   10fca:	6051      	str	r1, [r2, #4]
   10fcc:	9807      	ldr	r0, [sp, #28]
   10fce:	715c      	strb	r4, [r3, #5]
	if (err == -EINVAL) {
   10fd0:	e766      	b.n	10ea0 <hci_cmd_handle+0x12c>
   10fd2:	bf00      	nop
   10fd4:	20002522 	.word	0x20002522
   10fd8:	0002a718 	.word	0x0002a718
   10fdc:	0002a6d0 	.word	0x0002a6d0
   10fe0:	0002b1dc 	.word	0x0002b1dc
   10fe4:	0002b1f4 	.word	0x0002b1f4
   10fe8:	20007728 	.word	0x20007728
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10fec:	2141      	movs	r1, #65	; 0x41
   10fee:	a807      	add	r0, sp, #28
   10ff0:	f7ff fe20 	bl	10c34 <hci_cmd_complete>
	rp->status = 0x00;
   10ff4:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10ff6:	4604      	mov	r4, r0
   10ff8:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   10ffa:	f800 1b01 	strb.w	r1, [r0], #1
   10ffe:	f019 f9fd 	bl	2a3fc <memset>
	rp->commands[0] |= BIT(5);
   11002:	2320      	movs	r3, #32
   11004:	7063      	strb	r3, [r4, #1]
	rp->commands[14] |= BIT(3) | BIT(5);
   11006:	2228      	movs	r2, #40	; 0x28
	rp->commands[5] |= BIT(6) | BIT(7);
   11008:	23c0      	movs	r3, #192	; 0xc0
	rp->commands[15] |= BIT(1);
   1100a:	2502      	movs	r5, #2
	rp->commands[26] |= BIT(0) | BIT(1);
   1100c:	20c3      	movs	r0, #195	; 0xc3
	rp->commands[28] |= BIT(1) | BIT(2);
   1100e:	210e      	movs	r1, #14
	rp->commands[5] |= BIT(6) | BIT(7);
   11010:	71a3      	strb	r3, [r4, #6]
	rp->commands[14] |= BIT(3) | BIT(5);
   11012:	73e2      	strb	r2, [r4, #15]
	rp->commands[32] |= BIT(4) | BIT(5);
   11014:	2330      	movs	r3, #48	; 0x30
	rp->commands[33] |= BIT(6) | BIT(7);
   11016:	22f0      	movs	r2, #240	; 0xf0
	rp->commands[15] |= BIT(1);
   11018:	7425      	strb	r5, [r4, #16]
	rp->commands[26] |= BIT(0) | BIT(1);
   1101a:	76e0      	strb	r0, [r4, #27]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   1101c:	25f9      	movs	r5, #249	; 0xf9
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   1101e:	207f      	movs	r0, #127	; 0x7f
	rp->commands[28] |= BIT(1) | BIT(2);
   11020:	7761      	strb	r1, [r4, #29]
	rp->commands[32] |= BIT(4) | BIT(5);
   11022:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	rp->commands[38] |= BIT(7);
   11026:	2180      	movs	r1, #128	; 0x80
	rp->commands[10] |= BIT(2);
   11028:	2304      	movs	r3, #4
	rp->commands[33] |= BIT(6) | BIT(7);
   1102a:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   1102e:	22f7      	movs	r2, #247	; 0xf7
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   11030:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   11034:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
   11038:	9807      	ldr	r0, [sp, #28]
	rp->commands[38] |= BIT(7);
   1103a:	f884 1027 	strb.w	r1, [r4, #39]	; 0x27
	rp->commands[10] |= BIT(2);
   1103e:	72e3      	strb	r3, [r4, #11]
	rp->commands[22] |= BIT(2);
   11040:	75e3      	strb	r3, [r4, #23]
	rp->commands[39] |= BIT(2);
   11042:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   11046:	76a2      	strb	r2, [r4, #26]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   11048:	7722      	strb	r2, [r4, #28]
	if (err == -EINVAL) {
   1104a:	e729      	b.n	10ea0 <hci_cmd_handle+0x12c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1104c:	2109      	movs	r1, #9
   1104e:	a807      	add	r0, sp, #28
   11050:	f7ff fdf0 	bl	10c34 <hci_cmd_complete>
   11054:	4603      	mov	r3, r0
	rp->status = 0x00;
   11056:	2200      	movs	r2, #0
	rp->hci_version = LL_VERSION_NUMBER;
   11058:	200b      	movs	r0, #11
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   1105a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   1105e:	f06f 050e 	mvn.w	r5, #14
   11062:	2405      	movs	r4, #5
	rp->status = 0x00;
   11064:	701a      	strb	r2, [r3, #0]
	rp->hci_version = LL_VERSION_NUMBER;
   11066:	7058      	strb	r0, [r3, #1]
	rp->lmp_version = LL_VERSION_NUMBER;
   11068:	7118      	strb	r0, [r3, #4]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   1106a:	715d      	strb	r5, [r3, #5]
   1106c:	9807      	ldr	r0, [sp, #28]
   1106e:	719c      	strb	r4, [r3, #6]
	rp->hci_revision = sys_cpu_to_le16(0);
   11070:	709a      	strb	r2, [r3, #2]
   11072:	70da      	strb	r2, [r3, #3]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   11074:	71d9      	strb	r1, [r3, #7]
   11076:	7219      	strb	r1, [r3, #8]
	if (err == -EINVAL) {
   11078:	e712      	b.n	10ea0 <hci_cmd_handle+0x12c>
		le_set_adv_param(cmd, evt);
   1107a:	68a4      	ldr	r4, [r4, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
   1107c:	7ba5      	ldrb	r5, [r4, #14]
   1107e:	79a3      	ldrb	r3, [r4, #6]
   11080:	7962      	ldrb	r2, [r4, #5]
   11082:	7921      	ldrb	r1, [r4, #4]
   11084:	8820      	ldrh	r0, [r4, #0]
   11086:	9502      	str	r5, [sp, #8]
   11088:	7b65      	ldrb	r5, [r4, #13]
   1108a:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
   1108c:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
   1108e:	9400      	str	r4, [sp, #0]
   11090:	f002 fc88 	bl	139a4 <ll_adv_params_set>
	*evt = cmd_complete_status(status);
   11094:	f7ff fd3c 	bl	10b10 <cmd_complete_status>
	if (err == -EINVAL) {
   11098:	e702      	b.n	10ea0 <hci_cmd_handle+0x12c>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
   1109a:	68a1      	ldr	r1, [r4, #8]
   1109c:	2001      	movs	r0, #1
   1109e:	f7ff fab7 	bl	10610 <ll_addr_set>
	*evt = cmd_complete_status(status);
   110a2:	f7ff fd35 	bl	10b10 <cmd_complete_status>
	if (err == -EINVAL) {
   110a6:	e6fb      	b.n	10ea0 <hci_cmd_handle+0x12c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   110a8:	2109      	movs	r1, #9
   110aa:	a807      	add	r0, sp, #28
   110ac:	f7ff fdc2 	bl	10c34 <hci_cmd_complete>
	dst[0] = val;
   110b0:	247f      	movs	r4, #127	; 0x7f
	rp->status = 0x00;
   110b2:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   110b4:	2141      	movs	r1, #65	; 0x41
	dst[0] = val;
   110b6:	2201      	movs	r2, #1
   110b8:	7044      	strb	r4, [r0, #1]
	dst[1] = val >> 8;
   110ba:	7081      	strb	r1, [r0, #2]
	dst[0] = val;
   110bc:	70c2      	strb	r2, [r0, #3]
   110be:	7003      	strb	r3, [r0, #0]
   110c0:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
   110c2:	7203      	strb	r3, [r0, #8]
   110c4:	7103      	strb	r3, [r0, #4]
	dst[0] = val;
   110c6:	7143      	strb	r3, [r0, #5]
	dst[1] = val >> 8;
   110c8:	7183      	strb	r3, [r0, #6]
	if (err == -EINVAL) {
   110ca:	9807      	ldr	r0, [sp, #28]
   110cc:	e6e8      	b.n	10ea0 <hci_cmd_handle+0x12c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   110ce:	2104      	movs	r1, #4
   110d0:	a807      	add	r0, sp, #28
   110d2:	f7ff fdaf 	bl	10c34 <hci_cmd_complete>
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
   110d6:	2203      	movs	r2, #3
	rp->status = 0x00;
   110d8:	2300      	movs	r3, #0
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
   110da:	70c2      	strb	r2, [r0, #3]
	rp->status = 0x00;
   110dc:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
   110de:	221b      	movs	r2, #27
   110e0:	7042      	strb	r2, [r0, #1]
   110e2:	7083      	strb	r3, [r0, #2]
	if (err == -EINVAL) {
   110e4:	9807      	ldr	r0, [sp, #28]
   110e6:	e6db      	b.n	10ea0 <hci_cmd_handle+0x12c>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   110e8:	68a2      	ldr	r2, [r4, #8]
	le_event_mask = sys_get_le64(cmd->events);
   110ea:	4bc2      	ldr	r3, [pc, #776]	; (113f4 <hci_cmd_handle+0x680>)
   110ec:	6811      	ldr	r1, [r2, #0]
   110ee:	6852      	ldr	r2, [r2, #4]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   110f0:	605a      	str	r2, [r3, #4]
   110f2:	6019      	str	r1, [r3, #0]
	*evt = cmd_complete_status(0x00);
   110f4:	2000      	movs	r0, #0
   110f6:	f7ff fd0b 	bl	10b10 <cmd_complete_status>
}
   110fa:	e6d1      	b.n	10ea0 <hci_cmd_handle+0x12c>
		le_set_phy(cmd, evt);
   110fc:	68a2      	ldr	r2, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   110fe:	7896      	ldrb	r6, [r2, #2]
   11100:	78d1      	ldrb	r1, [r2, #3]
	handle = sys_le16_to_cpu(cmd->handle);
   11102:	8817      	ldrh	r7, [r2, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
   11104:	f8b2 4005 	ldrh.w	r4, [r2, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   11108:	07f3      	lsls	r3, r6, #31
		cmd->tx_phys |= mask_phys;
   1110a:	bf48      	it	mi
   1110c:	f041 0103 	orrmi.w	r1, r1, #3
   11110:	7913      	ldrb	r3, [r2, #4]
   11112:	bf48      	it	mi
   11114:	70d1      	strbmi	r1, [r2, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   11116:	07b6      	lsls	r6, r6, #30
		cmd->rx_phys |= mask_phys;
   11118:	bf44      	itt	mi
   1111a:	f043 0303 	orrmi.w	r3, r3, #3
   1111e:	7113      	strbmi	r3, [r2, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
   11120:	ea41 0203 	orr.w	r2, r1, r3
   11124:	f032 0203 	bics.w	r2, r2, #3
   11128:	f040 8211 	bne.w	1154e <hci_cmd_handle+0x7da>
	if (!(cmd->tx_phys & 0x07) ||
   1112c:	074e      	lsls	r6, r1, #29
   1112e:	f000 820a 	beq.w	11546 <hci_cmd_handle+0x7d2>
   11132:	075a      	lsls	r2, r3, #29
   11134:	f000 8207 	beq.w	11546 <hci_cmd_handle+0x7d2>
	if (phy_opts & 0x03) {
   11138:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1U;
   1113c:	bf1c      	itt	ne
   1113e:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
   11142:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
   11146:	4638      	mov	r0, r7
   11148:	f003 fe18 	bl	14d7c <ll_phy_req_send>
   1114c:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   1114e:	8828      	ldrh	r0, [r5, #0]
   11150:	f015 ff3e 	bl	26fd0 <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   11154:	e6a4      	b.n	10ea0 <hci_cmd_handle+0x12c>
		le_set_default_phy(cmd, evt);
   11156:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   11158:	781a      	ldrb	r2, [r3, #0]
   1115a:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
   1115c:	bf4a      	itet	mi
   1115e:	2007      	movmi	r0, #7
   11160:	7858      	ldrbpl	r0, [r3, #1]
   11162:	7058      	strbmi	r0, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   11164:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
   11166:	bf4a      	itet	mi
   11168:	2107      	movmi	r1, #7
   1116a:	7899      	ldrbpl	r1, [r3, #2]
   1116c:	7099      	strbmi	r1, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   1116e:	f003 fdfb 	bl	14d68 <ll_phy_default_set>
	*evt = cmd_complete_status(status);
   11172:	f7ff fccd 	bl	10b10 <cmd_complete_status>
	if (err == -EINVAL) {
   11176:	e693      	b.n	10ea0 <hci_cmd_handle+0x12c>
	handle = sys_le16_to_cpu(cmd->handle);
   11178:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1117a:	2105      	movs	r1, #5
   1117c:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
   1117e:	881d      	ldrh	r5, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11180:	f7ff fd58 	bl	10c34 <hci_cmd_complete>
   11184:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   11186:	1d22      	adds	r2, r4, #4
	handle = sys_le16_to_cpu(cmd->handle);
   11188:	b2a8      	uxth	r0, r5
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   1118a:	1ce1      	adds	r1, r4, #3
   1118c:	f003 fdce 	bl	14d2c <ll_phy_get>
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
	return __builtin_ffs(op);
   11190:	78e2      	ldrb	r2, [r4, #3]
   11192:	7923      	ldrb	r3, [r4, #4]
	rp->status = status;
   11194:	7020      	strb	r0, [r4, #0]
   11196:	2a00      	cmp	r2, #0
   11198:	fa92 f2a2 	rbit	r2, r2
   1119c:	fab2 f282 	clz	r2, r2
   111a0:	bf08      	it	eq
   111a2:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   111a6:	2b00      	cmp	r3, #0
   111a8:	fa93 f3a3 	rbit	r3, r3
   111ac:	fab3 f383 	clz	r3, r3
   111b0:	f102 0201 	add.w	r2, r2, #1
   111b4:	bf08      	it	eq
   111b6:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
	rp->tx_phy = find_lsb_set(rp->tx_phy);
   111ba:	70e2      	strb	r2, [r4, #3]
   111bc:	3301      	adds	r3, #1
   111be:	9807      	ldr	r0, [sp, #28]
	rp->handle = sys_cpu_to_le16(handle);
   111c0:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->rx_phy = find_lsb_set(rp->rx_phy);
   111c4:	7123      	strb	r3, [r4, #4]
	if (err == -EINVAL) {
   111c6:	e66b      	b.n	10ea0 <hci_cmd_handle+0x12c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   111c8:	2109      	movs	r1, #9
   111ca:	a807      	add	r0, sp, #28
   111cc:	f7ff fd32 	bl	10c34 <hci_cmd_complete>
	ll_length_max_get(&max_tx_octets, &max_tx_time,
   111d0:	ab08      	add	r3, sp, #32
	rp = hci_cmd_complete(evt, sizeof(*rp));
   111d2:	4604      	mov	r4, r0
	ll_length_max_get(&max_tx_octets, &max_tx_time,
   111d4:	f10d 021a 	add.w	r2, sp, #26
   111d8:	f10d 0016 	add.w	r0, sp, #22
   111dc:	a906      	add	r1, sp, #24
   111de:	f003 fd9b 	bl	14d18 <ll_length_max_get>
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   111e2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   111e6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   111ea:	f8a4 2001 	strh.w	r2, [r4, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   111ee:	f8a4 3003 	strh.w	r3, [r4, #3]
	rp->max_rx_octets = sys_cpu_to_le16(max_rx_octets);
   111f2:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   111f6:	f8a4 3005 	strh.w	r3, [r4, #5]
	rp->status = 0x00;
   111fa:	2200      	movs	r2, #0
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   111fc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->status = 0x00;
   11200:	7022      	strb	r2, [r4, #0]
   11202:	9807      	ldr	r0, [sp, #28]
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   11204:	f8a4 3007 	strh.w	r3, [r4, #7]
	if (err == -EINVAL) {
   11208:	e64a      	b.n	10ea0 <hci_cmd_handle+0x12c>
	uint16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
   1120a:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
   1120c:	8818      	ldrh	r0, [r3, #0]
   1120e:	f007 ff0d 	bl	1902c <ll_rl_timeout_set>
	*evt = cmd_complete_status(0x00);
   11212:	2000      	movs	r0, #0
   11214:	f7ff fc7c 	bl	10b10 <cmd_complete_status>
	if (err == -EINVAL) {
   11218:	e642      	b.n	10ea0 <hci_cmd_handle+0x12c>
	status = ll_rl_enable(cmd->enable);
   1121a:	68a3      	ldr	r3, [r4, #8]
   1121c:	7818      	ldrb	r0, [r3, #0]
   1121e:	f007 feef 	bl	19000 <ll_rl_enable>
	*evt = cmd_complete_status(status);
   11222:	f7ff fc75 	bl	10b10 <cmd_complete_status>
	if (err == -EINVAL) {
   11226:	e63b      	b.n	10ea0 <hci_cmd_handle+0x12c>
		le_set_privacy_mode(cmd, evt);
   11228:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
   1122a:	79c1      	ldrb	r1, [r0, #7]
   1122c:	f008 faf2 	bl	19814 <ll_priv_mode_set>
	*evt = cmd_complete_status(status);
   11230:	f7ff fc6e 	bl	10b10 <cmd_complete_status>
	if (err == -EINVAL) {
   11234:	e634      	b.n	10ea0 <hci_cmd_handle+0x12c>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
   11236:	68a1      	ldr	r1, [r4, #8]
   11238:	f811 0b01 	ldrb.w	r0, [r1], #1
   1123c:	f002 fd96 	bl	13d6c <ll_adv_data_set>
	*evt = cmd_complete_status(status);
   11240:	f7ff fc66 	bl	10b10 <cmd_complete_status>
	if (err == -EINVAL) {
   11244:	e62c      	b.n	10ea0 <hci_cmd_handle+0x12c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11246:	2102      	movs	r1, #2
   11248:	a807      	add	r0, sp, #28
   1124a:	f7ff fcf3 	bl	10c34 <hci_cmd_complete>
	rp->status = 0x00;
   1124e:	2300      	movs	r3, #0
   11250:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
   11252:	7043      	strb	r3, [r0, #1]
	if (err == -EINVAL) {
   11254:	9807      	ldr	r0, [sp, #28]
   11256:	e623      	b.n	10ea0 <hci_cmd_handle+0x12c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11258:	2103      	movs	r1, #3
   1125a:	a807      	add	r0, sp, #28
   1125c:	f7ff fcea 	bl	10c34 <hci_cmd_complete>
	rp->status = 0x00;
   11260:	4601      	mov	r1, r0
   11262:	2300      	movs	r3, #0
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   11264:	3001      	adds	r0, #1
	rp->status = 0x00;
   11266:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   1126a:	f7ff f9ff 	bl	1066c <ll_tx_pwr_get>
	if (err == -EINVAL) {
   1126e:	9807      	ldr	r0, [sp, #28]
   11270:	e616      	b.n	10ea0 <hci_cmd_handle+0x12c>
		le_conn_update(cmd, evt);
   11272:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
   11274:	8911      	ldrh	r1, [r2, #8]
   11276:	8853      	ldrh	r3, [r2, #2]
   11278:	8810      	ldrh	r0, [r2, #0]
   1127a:	9102      	str	r1, [sp, #8]
   1127c:	88d1      	ldrh	r1, [r2, #6]
   1127e:	9101      	str	r1, [sp, #4]
   11280:	8892      	ldrh	r2, [r2, #4]
   11282:	9200      	str	r2, [sp, #0]
   11284:	2200      	movs	r2, #0
   11286:	4611      	mov	r1, r2
   11288:	f003 fb94 	bl	149b4 <ll_conn_update>
   1128c:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   1128e:	8828      	ldrh	r0, [r5, #0]
   11290:	f015 fe9e 	bl	26fd0 <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   11294:	e604      	b.n	10ea0 <hci_cmd_handle+0x12c>
	handle = sys_le16_to_cpu(cmd->handle);
   11296:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
   11298:	8818      	ldrh	r0, [r3, #0]
   1129a:	f003 fc83 	bl	14ba4 <ll_feature_req_send>
   1129e:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   112a0:	8828      	ldrh	r0, [r5, #0]
   112a2:	f015 fe95 	bl	26fd0 <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   112a6:	e5fb      	b.n	10ea0 <hci_cmd_handle+0x12c>
	handle = sys_le16_to_cpu(cmd->handle);
   112a8:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   112aa:	2108      	movs	r1, #8
   112ac:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
   112ae:	881d      	ldrh	r5, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   112b0:	f7ff fcc0 	bl	10c34 <hci_cmd_complete>
   112b4:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
   112b6:	1ce1      	adds	r1, r4, #3
	handle = sys_le16_to_cpu(cmd->handle);
   112b8:	b2a8      	uxth	r0, r5
	status = ll_chm_get(handle, rp->ch_map);
   112ba:	f003 fc11 	bl	14ae0 <ll_chm_get>
	rp->status = status;
   112be:	7020      	strb	r0, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
   112c0:	9807      	ldr	r0, [sp, #28]
   112c2:	f8a4 5001 	strh.w	r5, [r4, #1]
	if (err == -EINVAL) {
   112c6:	e5eb      	b.n	10ea0 <hci_cmd_handle+0x12c>
	status = ll_wl_remove(&cmd->addr);
   112c8:	68a0      	ldr	r0, [r4, #8]
   112ca:	f007 fddb 	bl	18e84 <ll_wl_remove>
	*evt = cmd_complete_status(status);
   112ce:	f7ff fc1f 	bl	10b10 <cmd_complete_status>
	if (err == -EINVAL) {
   112d2:	e5e5      	b.n	10ea0 <hci_cmd_handle+0x12c>
	status = ll_wl_add(&cmd->addr);
   112d4:	68a0      	ldr	r0, [r4, #8]
   112d6:	f008 f893 	bl	19400 <ll_wl_add>
	*evt = cmd_complete_status(status);
   112da:	f7ff fc19 	bl	10b10 <cmd_complete_status>
	if (err == -EINVAL) {
   112de:	e5df      	b.n	10ea0 <hci_cmd_handle+0x12c>
	status = ll_wl_clear();
   112e0:	f007 fda6 	bl	18e30 <ll_wl_clear>
	*evt = cmd_complete_status(status);
   112e4:	f7ff fc14 	bl	10b10 <cmd_complete_status>
	if (err == -EINVAL) {
   112e8:	e5da      	b.n	10ea0 <hci_cmd_handle+0x12c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   112ea:	2102      	movs	r1, #2
   112ec:	a807      	add	r0, sp, #28
   112ee:	f7ff fca1 	bl	10c34 <hci_cmd_complete>
	rp->status = 0x00;
   112f2:	2300      	movs	r3, #0
   112f4:	7003      	strb	r3, [r0, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   112f6:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
   112f8:	f007 fd98 	bl	18e2c <ll_wl_size_get>
   112fc:	7060      	strb	r0, [r4, #1]
	if (err == -EINVAL) {
   112fe:	9807      	ldr	r0, [sp, #28]
   11300:	e5ce      	b.n	10ea0 <hci_cmd_handle+0x12c>
	status = ll_adv_enable(cmd->enable);
   11302:	68a3      	ldr	r3, [r4, #8]
   11304:	7818      	ldrb	r0, [r3, #0]
   11306:	f7f0 f8b7 	bl	1478 <ll_adv_enable>
	*evt = cmd_complete_status(status);
   1130a:	f7ff fc01 	bl	10b10 <cmd_complete_status>
	if (err == -EINVAL) {
   1130e:	e5c7      	b.n	10ea0 <hci_cmd_handle+0x12c>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
   11310:	68a1      	ldr	r1, [r4, #8]
   11312:	f811 0b01 	ldrb.w	r0, [r1], #1
   11316:	f002 fd5b 	bl	13dd0 <ll_adv_scan_rsp_set>
	*evt = cmd_complete_status(status);
   1131a:	f7ff fbf9 	bl	10b10 <cmd_complete_status>
	if (err == -EINVAL) {
   1131e:	e5bf      	b.n	10ea0 <hci_cmd_handle+0x12c>
	memcpy(dst, src, sizeof(*dst));
   11320:	68a3      	ldr	r3, [r4, #8]
   11322:	6818      	ldr	r0, [r3, #0]
   11324:	9008      	str	r0, [sp, #32]
   11326:	889a      	ldrh	r2, [r3, #4]
   11328:	799b      	ldrb	r3, [r3, #6]
   1132a:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1132e:	2107      	movs	r1, #7
   11330:	a807      	add	r0, sp, #28
   11332:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
   11336:	f7ff fc7d 	bl	10c34 <hci_cmd_complete>
   1133a:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
   1133c:	1c61      	adds	r1, r4, #1
   1133e:	a808      	add	r0, sp, #32
   11340:	f008 fa4c 	bl	197dc <ll_rl_lrpa_get>
   11344:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
   11346:	9807      	ldr	r0, [sp, #28]
   11348:	e5aa      	b.n	10ea0 <hci_cmd_handle+0x12c>
   1134a:	68a3      	ldr	r3, [r4, #8]
   1134c:	6818      	ldr	r0, [r3, #0]
   1134e:	9008      	str	r0, [sp, #32]
   11350:	889a      	ldrh	r2, [r3, #4]
   11352:	799b      	ldrb	r3, [r3, #6]
   11354:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11358:	2107      	movs	r1, #7
   1135a:	a807      	add	r0, sp, #28
   1135c:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
   11360:	f7ff fc68 	bl	10c34 <hci_cmd_complete>
   11364:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
   11366:	1c61      	adds	r1, r4, #1
   11368:	a808      	add	r0, sp, #32
   1136a:	f008 fa15 	bl	19798 <ll_rl_crpa_get>
   1136e:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
   11370:	9807      	ldr	r0, [sp, #28]
   11372:	e595      	b.n	10ea0 <hci_cmd_handle+0x12c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11374:	2102      	movs	r1, #2
   11376:	a807      	add	r0, sp, #28
   11378:	f7ff fc5c 	bl	10c34 <hci_cmd_complete>
   1137c:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
   1137e:	f007 fdfd 	bl	18f7c <ll_rl_size_get>
	rp->status = 0x00;
   11382:	2300      	movs	r3, #0
	rp->rl_size = ll_rl_size_get();
   11384:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
   11386:	7023      	strb	r3, [r4, #0]
	if (err == -EINVAL) {
   11388:	9807      	ldr	r0, [sp, #28]
   1138a:	e589      	b.n	10ea0 <hci_cmd_handle+0x12c>
	status = ll_rl_clear();
   1138c:	f007 fdf8 	bl	18f80 <ll_rl_clear>
	*evt = cmd_complete_status(status);
   11390:	f7ff fbbe 	bl	10b10 <cmd_complete_status>
	if (err == -EINVAL) {
   11394:	e584      	b.n	10ea0 <hci_cmd_handle+0x12c>
	status = ll_rl_remove(&cmd->peer_id_addr);
   11396:	68a0      	ldr	r0, [r4, #8]
   11398:	f008 f95c 	bl	19654 <ll_rl_remove>
	*evt = cmd_complete_status(status);
   1139c:	f7ff fbb8 	bl	10b10 <cmd_complete_status>
	if (err == -EINVAL) {
   113a0:	e57e      	b.n	10ea0 <hci_cmd_handle+0x12c>
		le_add_dev_to_rl(cmd, evt);
   113a2:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
   113a4:	f100 0217 	add.w	r2, r0, #23
   113a8:	1dc1      	adds	r1, r0, #7
   113aa:	f008 f88d 	bl	194c8 <ll_rl_add>
	*evt = cmd_complete_status(status);
   113ae:	f7ff fbaf 	bl	10b10 <cmd_complete_status>
	if (err == -EINVAL) {
   113b2:	e575      	b.n	10ea0 <hci_cmd_handle+0x12c>
		le_write_default_data_len(cmd, evt);
   113b4:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(max_tx_octets, max_tx_time);
   113b6:	8859      	ldrh	r1, [r3, #2]
   113b8:	8818      	ldrh	r0, [r3, #0]
   113ba:	f003 fca3 	bl	14d04 <ll_length_default_set>
	*evt = cmd_complete_status(status);
   113be:	b2c0      	uxtb	r0, r0
   113c0:	f7ff fba6 	bl	10b10 <cmd_complete_status>
	if (err == -EINVAL) {
   113c4:	e56c      	b.n	10ea0 <hci_cmd_handle+0x12c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   113c6:	2105      	movs	r1, #5
   113c8:	a807      	add	r0, sp, #28
   113ca:	f7ff fc33 	bl	10c34 <hci_cmd_complete>
	ll_length_default_get(&max_tx_octets, &max_tx_time);
   113ce:	a908      	add	r1, sp, #32
	rp = hci_cmd_complete(evt, sizeof(*rp));
   113d0:	4604      	mov	r4, r0
	ll_length_default_get(&max_tx_octets, &max_tx_time);
   113d2:	f10d 001a 	add.w	r0, sp, #26
   113d6:	f003 fc89 	bl	14cec <ll_length_default_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   113da:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   113de:	f8a4 3001 	strh.w	r3, [r4, #1]
	rp->status = 0x00;
   113e2:	2200      	movs	r2, #0
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   113e4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->status = 0x00;
   113e8:	7022      	strb	r2, [r4, #0]
   113ea:	9807      	ldr	r0, [sp, #28]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   113ec:	f8a4 3003 	strh.w	r3, [r4, #3]
	if (err == -EINVAL) {
   113f0:	e556      	b.n	10ea0 <hci_cmd_handle+0x12c>
   113f2:	bf00      	nop
   113f4:	20007730 	.word	0x20007730
		le_set_data_len(cmd, evt);
   113f8:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   113fa:	881d      	ldrh	r5, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
   113fc:	889a      	ldrh	r2, [r3, #4]
   113fe:	8859      	ldrh	r1, [r3, #2]
   11400:	4628      	mov	r0, r5
   11402:	f003 fc1b 	bl	14c3c <ll_length_req_send>
   11406:	e5b7      	b.n	10f78 <hci_cmd_handle+0x204>
		le_conn_param_req_neg_reply(cmd, evt);
   11408:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   1140a:	881d      	ldrh	r5, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   1140c:	789a      	ldrb	r2, [r3, #2]
   1140e:	2300      	movs	r3, #0
   11410:	e9cd 3301 	strd	r3, r3, [sp, #4]
   11414:	4628      	mov	r0, r5
   11416:	9300      	str	r3, [sp, #0]
   11418:	2102      	movs	r1, #2
   1141a:	f003 facb 	bl	149b4 <ll_conn_update>
   1141e:	e5ab      	b.n	10f78 <hci_cmd_handle+0x204>
		le_conn_param_req_reply(cmd, evt);
   11420:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   11422:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   11424:	8815      	ldrh	r5, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   11426:	8853      	ldrh	r3, [r2, #2]
   11428:	9102      	str	r1, [sp, #8]
   1142a:	88d1      	ldrh	r1, [r2, #6]
   1142c:	9101      	str	r1, [sp, #4]
   1142e:	8892      	ldrh	r2, [r2, #4]
   11430:	9200      	str	r2, [sp, #0]
   11432:	4628      	mov	r0, r5
   11434:	2200      	movs	r2, #0
   11436:	2102      	movs	r1, #2
   11438:	f003 fabc 	bl	149b4 <ll_conn_update>
   1143c:	e59c      	b.n	10f78 <hci_cmd_handle+0x204>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1143e:	2109      	movs	r1, #9
   11440:	a807      	add	r0, sp, #28
   11442:	f7ff fbf7 	bl	10c34 <hci_cmd_complete>
	dst[0] = val;
   11446:	248f      	movs	r4, #143	; 0x8f
	rp->status = 0x00;
   11448:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   1144a:	21cc      	movs	r1, #204	; 0xcc
	dst[0] = val;
   1144c:	2230      	movs	r2, #48	; 0x30
   1144e:	7044      	strb	r4, [r0, #1]
	dst[1] = val >> 8;
   11450:	7081      	strb	r1, [r0, #2]
	dst[0] = val;
   11452:	70c2      	strb	r2, [r0, #3]
	dst[1] = val >> 8;
   11454:	24ec      	movs	r4, #236	; 0xec
	dst[0] = val;
   11456:	21c0      	movs	r1, #192	; 0xc0
	dst[1] = val >> 8;
   11458:	2201      	movs	r2, #1
   1145a:	7003      	strb	r3, [r0, #0]
	dst[0] = val;
   1145c:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
   1145e:	7203      	strb	r3, [r0, #8]
   11460:	7104      	strb	r4, [r0, #4]
	dst[0] = val;
   11462:	7141      	strb	r1, [r0, #5]
	dst[1] = val >> 8;
   11464:	7182      	strb	r2, [r0, #6]
	if (err == -EINVAL) {
   11466:	9807      	ldr	r0, [sp, #28]
   11468:	e51a      	b.n	10ea0 <hci_cmd_handle+0x12c>
	handle = sys_le16_to_cpu(cmd->handle);
   1146a:	68a3      	ldr	r3, [r4, #8]
   1146c:	881d      	ldrh	r5, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   1146e:	2200      	movs	r2, #0
   11470:	4628      	mov	r0, r5
   11472:	2106      	movs	r1, #6
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   11474:	f007 fb38 	bl	18ae8 <ll_start_enc_req_send>
   11478:	e57e      	b.n	10f78 <hci_cmd_handle+0x204>
	handle = sys_le16_to_cpu(cmd->handle);
   1147a:	68a2      	ldr	r2, [r4, #8]
   1147c:	f832 5b02 	ldrh.w	r5, [r2], #2
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   11480:	2100      	movs	r1, #0
   11482:	4628      	mov	r0, r5
   11484:	e7f6      	b.n	11474 <hci_cmd_handle+0x700>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11486:	2109      	movs	r1, #9
   11488:	a807      	add	r0, sp, #28
   1148a:	f7ff fbd3 	bl	10c34 <hci_cmd_complete>
	rp->status = 0x00;
   1148e:	2300      	movs	r3, #0
   11490:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
   11494:	2108      	movs	r1, #8
   11496:	f008 fce5 	bl	19e64 <lll_csrand_get>
	if (err == -EINVAL) {
   1149a:	9807      	ldr	r0, [sp, #28]
   1149c:	e500      	b.n	10ea0 <hci_cmd_handle+0x12c>
		le_encrypt(cmd, evt);
   1149e:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
   114a0:	aa08      	add	r2, sp, #32
   114a2:	f100 0110 	add.w	r1, r0, #16
   114a6:	2300      	movs	r3, #0
   114a8:	f00a faa8 	bl	1b9fc <ecb_encrypt>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   114ac:	2111      	movs	r1, #17
   114ae:	a807      	add	r0, sp, #28
   114b0:	f7ff fbc0 	bl	10c34 <hci_cmd_complete>
	rp->status = 0x00;
   114b4:	4605      	mov	r5, r0
   114b6:	2300      	movs	r3, #0
   114b8:	f805 3b01 	strb.w	r3, [r5], #1
   114bc:	ac08      	add	r4, sp, #32
	rp = hci_cmd_complete(evt, sizeof(*rp));
   114be:	4606      	mov	r6, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   114c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   114c2:	f8c6 0001 	str.w	r0, [r6, #1]
   114c6:	9807      	ldr	r0, [sp, #28]
   114c8:	6069      	str	r1, [r5, #4]
   114ca:	60aa      	str	r2, [r5, #8]
   114cc:	60eb      	str	r3, [r5, #12]
	if (err == -EINVAL) {
   114ce:	e4e7      	b.n	10ea0 <hci_cmd_handle+0x12c>
		disconnect(cmd, evt);
   114d0:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
   114d2:	7899      	ldrb	r1, [r3, #2]
   114d4:	8818      	ldrh	r0, [r3, #0]
   114d6:	f003 fb23 	bl	14b20 <ll_terminate_ind_send>
   114da:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   114dc:	8828      	ldrh	r0, [r5, #0]
   114de:	f015 fd77 	bl	26fd0 <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   114e2:	e4dd      	b.n	10ea0 <hci_cmd_handle+0x12c>
	event_mask = DEFAULT_EVENT_MASK;
   114e4:	491c      	ldr	r1, [pc, #112]	; (11558 <hci_cmd_handle+0x7e4>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   114e6:	4a1d      	ldr	r2, [pc, #116]	; (1155c <hci_cmd_handle+0x7e8>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   114e8:	4b1d      	ldr	r3, [pc, #116]	; (11560 <hci_cmd_handle+0x7ec>)
	event_mask = DEFAULT_EVENT_MASK;
   114ea:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   114ee:	f641 75ff 	movw	r5, #8191	; 0x1fff
   114f2:	e9c1 4500 	strd	r4, r5, [r1]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   114f6:	201f      	movs	r0, #31
   114f8:	2100      	movs	r1, #0
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   114fa:	2400      	movs	r4, #0
   114fc:	2500      	movs	r5, #0
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   114fe:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   11502:	e9c2 4500 	strd	r4, r5, [r2]
		ll_reset();
   11506:	f001 f867 	bl	125d8 <ll_reset>
		*evt = cmd_complete_status(0x00);
   1150a:	2000      	movs	r0, #0
   1150c:	f7ff fb00 	bl	10b10 <cmd_complete_status>
	conn_count = 0U;
   11510:	4b14      	ldr	r3, [pc, #80]	; (11564 <hci_cmd_handle+0x7f0>)
   11512:	2200      	movs	r2, #0
   11514:	601a      	str	r2, [r3, #0]
}
   11516:	e4c3      	b.n	10ea0 <hci_cmd_handle+0x12c>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   11518:	68a2      	ldr	r2, [r4, #8]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   1151a:	4b10      	ldr	r3, [pc, #64]	; (1155c <hci_cmd_handle+0x7e8>)
   1151c:	e5e6      	b.n	110ec <hci_cmd_handle+0x378>
	handle = sys_le16_to_cpu(cmd->handle);
   1151e:	68a3      	ldr	r3, [r4, #8]
   11520:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
   11522:	a908      	add	r1, sp, #32
   11524:	4628      	mov	r0, r5
   11526:	f003 fc79 	bl	14e1c <ll_apto_get>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1152a:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
   1152c:	4604      	mov	r4, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1152e:	a807      	add	r0, sp, #28
   11530:	f7ff fb80 	bl	10c34 <hci_cmd_complete>
	rp->status = status;
   11534:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   11536:	f8a0 5001 	strh.w	r5, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
   1153a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   1153e:	f8a0 3003 	strh.w	r3, [r0, #3]
   11542:	9807      	ldr	r0, [sp, #28]
}
   11544:	e4ac      	b.n	10ea0 <hci_cmd_handle+0x12c>
	return bt_hci_cmd_status_create(_opcode, status);
   11546:	2112      	movs	r1, #18
   11548:	f015 fd42 	bl	26fd0 <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   1154c:	e4a8      	b.n	10ea0 <hci_cmd_handle+0x12c>
	return bt_hci_cmd_status_create(_opcode, status);
   1154e:	2111      	movs	r1, #17
   11550:	f015 fd3e 	bl	26fd0 <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   11554:	e4a4      	b.n	10ea0 <hci_cmd_handle+0x12c>
   11556:	bf00      	nop
   11558:	20007728 	.word	0x20007728
   1155c:	20000760 	.word	0x20000760
   11560:	20007730 	.word	0x20007730
   11564:	200010a4 	.word	0x200010a4

00011568 <hci_acl_handle>:
	if (buf->len < sizeof(*acl)) {
   11568:	8983      	ldrh	r3, [r0, #12]
	*evt = NULL;
   1156a:	2200      	movs	r2, #0
	if (buf->len < sizeof(*acl)) {
   1156c:	2b03      	cmp	r3, #3
{
   1156e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	*evt = NULL;
   11572:	600a      	str	r2, [r1, #0]
	if (buf->len < sizeof(*acl)) {
   11574:	d94f      	bls.n	11616 <hci_acl_handle+0xae>
   11576:	4605      	mov	r5, r0
   11578:	460e      	mov	r6, r1
   1157a:	3008      	adds	r0, #8
   1157c:	2104      	movs	r1, #4
   1157e:	f017 fbb9 	bl	28cf4 <net_buf_simple_pull_mem>
	if (buf->len < len) {
   11582:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
   11584:	8847      	ldrh	r7, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
   11586:	f8b0 8000 	ldrh.w	r8, [r0]
	if (buf->len < len) {
   1158a:	42bb      	cmp	r3, r7
   1158c:	d370      	bcc.n	11670 <hci_acl_handle+0x108>
	if (len > CONFIG_BT_CTLR_TX_BUFFER_SIZE) {
   1158e:	2f1b      	cmp	r7, #27
   11590:	d854      	bhi.n	1163c <hci_acl_handle+0xd4>
	node_tx = ll_tx_mem_acquire();
   11592:	f003 f9b9 	bl	14908 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
   11596:	ea4f 3318 	mov.w	r3, r8, lsr #12
	if (!node_tx) {
   1159a:	4604      	mov	r4, r0
   1159c:	2800      	cmp	r0, #0
   1159e:	f000 8088 	beq.w	116b2 <hci_acl_handle+0x14a>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
   115a2:	089a      	lsrs	r2, r3, #2
   115a4:	d102      	bne.n	115ac <hci_acl_handle+0x44>
	switch (bt_acl_flags_pb(flags)) {
   115a6:	b383      	cbz	r3, 1160a <hci_acl_handle+0xa2>
   115a8:	2b01      	cmp	r3, #1
   115aa:	d003      	beq.n	115b4 <hci_acl_handle+0x4c>
		return -EINVAL;
   115ac:	f06f 0015 	mvn.w	r0, #21
}
   115b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   115b4:	7902      	ldrb	r2, [r0, #4]
   115b6:	f363 0201 	bfi	r2, r3, #0, #2
   115ba:	7102      	strb	r2, [r0, #4]
	pdu_data->len = len;
   115bc:	7167      	strb	r7, [r4, #5]
   115be:	68a9      	ldr	r1, [r5, #8]
   115c0:	463a      	mov	r2, r7
   115c2:	1de0      	adds	r0, r4, #7
   115c4:	f018 ff0c 	bl	2a3e0 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
   115c8:	4621      	mov	r1, r4
   115ca:	f3c8 000b 	ubfx	r0, r8, #0, #12
   115ce:	f003 f9a7 	bl	14920 <ll_tx_mem_enqueue>
   115d2:	2800      	cmp	r0, #0
   115d4:	d0ec      	beq.n	115b0 <hci_acl_handle+0x48>
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   115d6:	f3ef 8205 	mrs	r2, IPSR
	if (value) {
   115da:	4b58      	ldr	r3, [pc, #352]	; (1173c <hci_acl_handle+0x1d4>)
   115dc:	4958      	ldr	r1, [pc, #352]	; (11740 <hci_acl_handle+0x1d8>)
   115de:	1a5b      	subs	r3, r3, r1
   115e0:	08db      	lsrs	r3, r3, #3
   115e2:	2a00      	cmp	r2, #0
   115e4:	f040 8081 	bne.w	116ea <hci_acl_handle+0x182>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   115e8:	f3ef 8214 	mrs	r2, CONTROL
		BT_ERR("Invalid Tx Enqueue");
   115ec:	019b      	lsls	r3, r3, #6
   115ee:	f043 0001 	orr.w	r0, r3, #1
   115f2:	07d3      	lsls	r3, r2, #31
   115f4:	4601      	mov	r1, r0
   115f6:	d57b      	bpl.n	116f0 <hci_acl_handle+0x188>
   115f8:	4952      	ldr	r1, [pc, #328]	; (11744 <hci_acl_handle+0x1dc>)
   115fa:	f013 fc4c 	bl	24e96 <log_from_user>
		ll_tx_mem_release(node_tx);
   115fe:	4620      	mov	r0, r4
   11600:	f003 f988 	bl	14914 <ll_tx_mem_release>
		return -EINVAL;
   11604:	f06f 0015 	mvn.w	r0, #21
   11608:	e7d2      	b.n	115b0 <hci_acl_handle+0x48>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   1160a:	7903      	ldrb	r3, [r0, #4]
   1160c:	2202      	movs	r2, #2
   1160e:	f362 0301 	bfi	r3, r2, #0, #2
   11612:	7103      	strb	r3, [r0, #4]
		break;
   11614:	e7d2      	b.n	115bc <hci_acl_handle+0x54>
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   11616:	f3ef 8205 	mrs	r2, IPSR
	if (value) {
   1161a:	4b48      	ldr	r3, [pc, #288]	; (1173c <hci_acl_handle+0x1d4>)
   1161c:	4948      	ldr	r1, [pc, #288]	; (11740 <hci_acl_handle+0x1d8>)
   1161e:	1a5b      	subs	r3, r3, r1
   11620:	08db      	lsrs	r3, r3, #3
   11622:	b9f2      	cbnz	r2, 11662 <hci_acl_handle+0xfa>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   11624:	f3ef 8214 	mrs	r2, CONTROL
		BT_ERR("No HCI ACL header");
   11628:	019b      	lsls	r3, r3, #6
   1162a:	f043 0001 	orr.w	r0, r3, #1
   1162e:	07d6      	lsls	r6, r2, #31
   11630:	4601      	mov	r1, r0
   11632:	d519      	bpl.n	11668 <hci_acl_handle+0x100>
   11634:	4944      	ldr	r1, [pc, #272]	; (11748 <hci_acl_handle+0x1e0>)
   11636:	f013 fc2e 	bl	24e96 <log_from_user>
   1163a:	e7b7      	b.n	115ac <hci_acl_handle+0x44>
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   1163c:	f3ef 8205 	mrs	r2, IPSR
	if (value) {
   11640:	4b3e      	ldr	r3, [pc, #248]	; (1173c <hci_acl_handle+0x1d4>)
   11642:	493f      	ldr	r1, [pc, #252]	; (11740 <hci_acl_handle+0x1d8>)
   11644:	1a5b      	subs	r3, r3, r1
   11646:	08db      	lsrs	r3, r3, #3
   11648:	bb2a      	cbnz	r2, 11696 <hci_acl_handle+0x12e>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   1164a:	f3ef 8214 	mrs	r2, CONTROL
		BT_ERR("Invalid HCI ACL Data length");
   1164e:	019b      	lsls	r3, r3, #6
   11650:	f043 0001 	orr.w	r0, r3, #1
   11654:	07d4      	lsls	r4, r2, #31
   11656:	4601      	mov	r1, r0
   11658:	d520      	bpl.n	1169c <hci_acl_handle+0x134>
   1165a:	493c      	ldr	r1, [pc, #240]	; (1174c <hci_acl_handle+0x1e4>)
   1165c:	f013 fc1b 	bl	24e96 <log_from_user>
   11660:	e7a4      	b.n	115ac <hci_acl_handle+0x44>
		BT_ERR("No HCI ACL header");
   11662:	019b      	lsls	r3, r3, #6
   11664:	f043 0101 	orr.w	r1, r3, #1
   11668:	4837      	ldr	r0, [pc, #220]	; (11748 <hci_acl_handle+0x1e0>)
   1166a:	f013 fc3a 	bl	24ee2 <log_0>
		return -EINVAL;
   1166e:	e79d      	b.n	115ac <hci_acl_handle+0x44>
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   11670:	f3ef 8205 	mrs	r2, IPSR
	if (value) {
   11674:	4b31      	ldr	r3, [pc, #196]	; (1173c <hci_acl_handle+0x1d4>)
   11676:	4932      	ldr	r1, [pc, #200]	; (11740 <hci_acl_handle+0x1d8>)
   11678:	1a5b      	subs	r3, r3, r1
   1167a:	08db      	lsrs	r3, r3, #3
   1167c:	b992      	cbnz	r2, 116a4 <hci_acl_handle+0x13c>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   1167e:	f3ef 8214 	mrs	r2, CONTROL
		BT_ERR("Invalid HCI ACL packet length");
   11682:	019b      	lsls	r3, r3, #6
   11684:	f043 0001 	orr.w	r0, r3, #1
   11688:	07d5      	lsls	r5, r2, #31
   1168a:	4601      	mov	r1, r0
   1168c:	d50d      	bpl.n	116aa <hci_acl_handle+0x142>
   1168e:	4930      	ldr	r1, [pc, #192]	; (11750 <hci_acl_handle+0x1e8>)
   11690:	f013 fc01 	bl	24e96 <log_from_user>
   11694:	e78a      	b.n	115ac <hci_acl_handle+0x44>
		BT_ERR("Invalid HCI ACL Data length");
   11696:	019b      	lsls	r3, r3, #6
   11698:	f043 0101 	orr.w	r1, r3, #1
   1169c:	482b      	ldr	r0, [pc, #172]	; (1174c <hci_acl_handle+0x1e4>)
   1169e:	f013 fc20 	bl	24ee2 <log_0>
		return -EINVAL;
   116a2:	e783      	b.n	115ac <hci_acl_handle+0x44>
		BT_ERR("Invalid HCI ACL packet length");
   116a4:	019b      	lsls	r3, r3, #6
   116a6:	f043 0101 	orr.w	r1, r3, #1
   116aa:	4829      	ldr	r0, [pc, #164]	; (11750 <hci_acl_handle+0x1e8>)
   116ac:	f013 fc19 	bl	24ee2 <log_0>
		return -EINVAL;
   116b0:	e77c      	b.n	115ac <hci_acl_handle+0x44>
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   116b2:	f3ef 8205 	mrs	r2, IPSR
	if (value) {
   116b6:	4b21      	ldr	r3, [pc, #132]	; (1173c <hci_acl_handle+0x1d4>)
   116b8:	4921      	ldr	r1, [pc, #132]	; (11740 <hci_acl_handle+0x1d8>)
   116ba:	1a5b      	subs	r3, r3, r1
   116bc:	08db      	lsrs	r3, r3, #3
   116be:	bbaa      	cbnz	r2, 1172c <hci_acl_handle+0x1c4>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   116c0:	f3ef 8214 	mrs	r2, CONTROL
		BT_ERR("Tx Buffer Overflow");
   116c4:	019b      	lsls	r3, r3, #6
   116c6:	f043 0001 	orr.w	r0, r3, #1
   116ca:	07d2      	lsls	r2, r2, #31
   116cc:	4601      	mov	r1, r0
   116ce:	d530      	bpl.n	11732 <hci_acl_handle+0x1ca>
   116d0:	4920      	ldr	r1, [pc, #128]	; (11754 <hci_acl_handle+0x1ec>)
   116d2:	f013 fbe0 	bl	24e96 <log_from_user>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
   116d6:	4b20      	ldr	r3, [pc, #128]	; (11758 <hci_acl_handle+0x1f0>)
   116d8:	6819      	ldr	r1, [r3, #0]
   116da:	2300      	movs	r3, #0
   116dc:	f001 7200 	and.w	r2, r1, #33554432	; 0x2000000
   116e0:	4313      	orrs	r3, r2
   116e2:	d109      	bne.n	116f8 <hci_acl_handle+0x190>
		return -ENOBUFS;
   116e4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   116e8:	e762      	b.n	115b0 <hci_acl_handle+0x48>
		BT_ERR("Invalid Tx Enqueue");
   116ea:	019b      	lsls	r3, r3, #6
   116ec:	f043 0101 	orr.w	r1, r3, #1
   116f0:	4814      	ldr	r0, [pc, #80]	; (11744 <hci_acl_handle+0x1dc>)
   116f2:	f013 fbf6 	bl	24ee2 <log_0>
   116f6:	e782      	b.n	115fe <hci_acl_handle+0x96>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   116f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   116fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11700:	2001      	movs	r0, #1
   11702:	f7f5 ffc7 	bl	7694 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   11706:	2102      	movs	r1, #2
   11708:	6030      	str	r0, [r6, #0]
   1170a:	3008      	adds	r0, #8
   1170c:	f017 faca 	bl	28ca4 <net_buf_simple_add>
	hdr->len = len;
   11710:	2401      	movs	r4, #1
	hdr->evt = evt;
   11712:	231a      	movs	r3, #26
   11714:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   11716:	7044      	strb	r4, [r0, #1]
   11718:	6830      	ldr	r0, [r6, #0]
   1171a:	4621      	mov	r1, r4
   1171c:	3008      	adds	r0, #8
   1171e:	f017 fac1 	bl	28ca4 <net_buf_simple_add>
   11722:	4603      	mov	r3, r0
		return -ENOBUFS;
   11724:	f06f 0068 	mvn.w	r0, #104	; 0x68
	ep->link_type = BT_OVERFLOW_LINK_ACL;
   11728:	701c      	strb	r4, [r3, #0]
   1172a:	e741      	b.n	115b0 <hci_acl_handle+0x48>
		BT_ERR("Tx Buffer Overflow");
   1172c:	019b      	lsls	r3, r3, #6
   1172e:	f043 0101 	orr.w	r1, r3, #1
   11732:	4808      	ldr	r0, [pc, #32]	; (11754 <hci_acl_handle+0x1ec>)
   11734:	f013 fbd5 	bl	24ee2 <log_0>
   11738:	e7cd      	b.n	116d6 <hci_acl_handle+0x16e>
   1173a:	bf00      	nop
   1173c:	0002a718 	.word	0x0002a718
   11740:	0002a6d0 	.word	0x0002a6d0
   11744:	0002b278 	.word	0x0002b278
   11748:	0002b214 	.word	0x0002b214
   1174c:	0002b248 	.word	0x0002b248
   11750:	0002b228 	.word	0x0002b228
   11754:	0002b264 	.word	0x0002b264
   11758:	20007728 	.word	0x20007728

0001175c <hci_disconn_complete_encode>:
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   1175c:	4b06      	ldr	r3, [pc, #24]	; (11778 <hci_disconn_complete_encode+0x1c>)
   1175e:	681b      	ldr	r3, [r3, #0]
{
   11760:	b430      	push	{r4, r5}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   11762:	f003 0410 	and.w	r4, r3, #16
   11766:	2500      	movs	r5, #0
   11768:	ea54 0305 	orrs.w	r3, r4, r5
   1176c:	d101      	bne.n	11772 <hci_disconn_complete_encode+0x16>
}
   1176e:	bc30      	pop	{r4, r5}
   11770:	4770      	bx	lr
   11772:	bc30      	pop	{r4, r5}
   11774:	f7ff ba46 	b.w	10c04 <hci_disconn_complete_encode.part.0>
   11778:	20007728 	.word	0x20007728

0001177c <hci_disconn_complete_process>:
	conn_count--;
   1177c:	4a02      	ldr	r2, [pc, #8]	; (11788 <hci_disconn_complete_process+0xc>)
   1177e:	6813      	ldr	r3, [r2, #0]
   11780:	3b01      	subs	r3, #1
   11782:	6013      	str	r3, [r2, #0]
}
   11784:	4770      	bx	lr
   11786:	bf00      	nop
   11788:	200010a4 	.word	0x200010a4

0001178c <hci_acl_encode>:
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
   1178c:	7f03      	ldrb	r3, [r0, #28]
   1178e:	f003 0303 	and.w	r3, r3, #3
   11792:	3b01      	subs	r3, #1
   11794:	2b01      	cmp	r3, #1
{
   11796:	b570      	push	{r4, r5, r6, lr}
	switch (pdu_data->ll_id) {
   11798:	d90d      	bls.n	117b6 <hci_acl_encode+0x2a>
		}
#endif
		break;

	default:
		LL_ASSERT(0);
   1179a:	4a16      	ldr	r2, [pc, #88]	; (117f4 <hci_acl_encode+0x68>)
   1179c:	4916      	ldr	r1, [pc, #88]	; (117f8 <hci_acl_encode+0x6c>)
   1179e:	4817      	ldr	r0, [pc, #92]	; (117fc <hci_acl_encode+0x70>)
   117a0:	f241 73d4 	movw	r3, #6100	; 0x17d4
   117a4:	f012 ff1e 	bl	245e4 <printk>
   117a8:	4040      	eors	r0, r0
   117aa:	f380 8811 	msr	BASEPRI, r0
   117ae:	f04f 0003 	mov.w	r0, #3
   117b2:	df02      	svc	2
		break;
	}
}
   117b4:	bd70      	pop	{r4, r5, r6, pc}
   117b6:	4604      	mov	r4, r0
   117b8:	f101 0508 	add.w	r5, r1, #8
   117bc:	4628      	mov	r0, r5
   117be:	2104      	movs	r1, #4
	handle = node_rx->hdr.handle;
   117c0:	88e6      	ldrh	r6, [r4, #6]
   117c2:	f017 fa6f 	bl	28ca4 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
   117c6:	7f23      	ldrb	r3, [r4, #28]
   117c8:	f003 0303 	and.w	r3, r3, #3
   117cc:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
   117ce:	bf0c      	ite	eq
   117d0:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
   117d4:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
   117d8:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
   117da:	7f61      	ldrb	r1, [r4, #29]
   117dc:	8041      	strh	r1, [r0, #2]
   117de:	4628      	mov	r0, r5
   117e0:	f017 fa60 	bl	28ca4 <net_buf_simple_add>
   117e4:	7f62      	ldrb	r2, [r4, #29]
   117e6:	f104 011f 	add.w	r1, r4, #31
}
   117ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   117ee:	f018 bdf7 	b.w	2a3e0 <memcpy>
   117f2:	bf00      	nop
   117f4:	0002b28c 	.word	0x0002b28c
   117f8:	0002b15c 	.word	0x0002b15c
   117fc:	0002b0c4 	.word	0x0002b0c4

00011800 <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
   11800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   11804:	7905      	ldrb	r5, [r0, #4]
   11806:	88c7      	ldrh	r7, [r0, #6]
   11808:	2d03      	cmp	r5, #3
{
   1180a:	4604      	mov	r4, r0
   1180c:	b088      	sub	sp, #32
   1180e:	460e      	mov	r6, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
   11810:	f100 001c 	add.w	r0, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   11814:	d00c      	beq.n	11830 <hci_evt_encode+0x30>
	switch (node_rx->hdr.type) {
   11816:	3d14      	subs	r5, #20
   11818:	2d06      	cmp	r5, #6
   1181a:	f200 828d 	bhi.w	11d38 <hci_evt_encode+0x538>
   1181e:	e8df f015 	tbh	[pc, r5, lsl #1]
   11822:	0064      	.short	0x0064
   11824:	00bc00de 	.word	0x00bc00de
   11828:	00eb011c 	.word	0x00eb011c
   1182c:	00210102 	.word	0x00210102
	switch (pdu_data->llctrl.opcode) {
   11830:	7fe3      	ldrb	r3, [r4, #31]
   11832:	3b03      	subs	r3, #3
   11834:	2b12      	cmp	r3, #18
   11836:	f200 812a 	bhi.w	11a8e <hci_evt_encode+0x28e>
   1183a:	e8df f013 	tbh	[pc, r3, lsl #1]
   1183e:	01dc      	.short	0x01dc
   11840:	01280128 	.word	0x01280128
   11844:	017601ff 	.word	0x017601ff
   11848:	01920128 	.word	0x01920128
   1184c:	01280128 	.word	0x01280128
   11850:	01af0128 	.word	0x01af0128
   11854:	01be0128 	.word	0x01be0128
   11858:	01280128 	.word	0x01280128
   1185c:	01280128 	.word	0x01280128
   11860:	01360136 	.word	0x01360136
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   11864:	4bc2      	ldr	r3, [pc, #776]	; (11b70 <hci_evt_encode+0x370>)
   11866:	6858      	ldr	r0, [r3, #4]
   11868:	2100      	movs	r1, #0
   1186a:	460a      	mov	r2, r1
   1186c:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   11870:	4313      	orrs	r3, r2
   11872:	d007      	beq.n	11884 <hci_evt_encode+0x84>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
   11874:	4bbf      	ldr	r3, [pc, #764]	; (11b74 <hci_evt_encode+0x374>)
   11876:	6818      	ldr	r0, [r3, #0]
   11878:	460b      	mov	r3, r1
   1187a:	f400 6200 	and.w	r2, r0, #2048	; 0x800
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1187e:	4313      	orrs	r3, r2
   11880:	f040 8133 	bne.w	11aea <hci_evt_encode+0x2ea>
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   11884:	f3ef 8c05 	mrs	ip, IPSR
	if (value) {
   11888:	7f60      	ldrb	r0, [r4, #29]
   1188a:	7fa2      	ldrb	r2, [r4, #30]
   1188c:	4eba      	ldr	r6, [pc, #744]	; (11b78 <hci_evt_encode+0x378>)
   1188e:	4bbb      	ldr	r3, [pc, #748]	; (11b7c <hci_evt_encode+0x37c>)
   11890:	7f25      	ldrb	r5, [r4, #28]
   11892:	2800      	cmp	r0, #0
   11894:	fa90 f1a0 	rbit	r1, r0
   11898:	fab1 f181 	clz	r1, r1
   1189c:	bf08      	it	eq
   1189e:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   118a2:	2a00      	cmp	r2, #0
   118a4:	fa92 f2a2 	rbit	r2, r2
   118a8:	fab2 f282 	clz	r2, r2
   118ac:	eba3 0306 	sub.w	r3, r3, r6
   118b0:	bf08      	it	eq
   118b2:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   118b6:	1c4e      	adds	r6, r1, #1
   118b8:	1c54      	adds	r4, r2, #1
   118ba:	08db      	lsrs	r3, r3, #3
   118bc:	f1bc 0f00 	cmp.w	ip, #0
   118c0:	f040 81ca 	bne.w	11c58 <hci_evt_encode+0x458>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   118c4:	f3ef 8214 	mrs	r2, CONTROL
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
   118c8:	019b      	lsls	r3, r3, #6
   118ca:	f043 0002 	orr.w	r0, r3, #2
   118ce:	07d2      	lsls	r2, r2, #31
   118d0:	4603      	mov	r3, r0
   118d2:	f140 81c4 	bpl.w	11c5e <hci_evt_encode+0x45e>
   118d6:	e9cd 6400 	strd	r6, r4, [sp]
   118da:	49a9      	ldr	r1, [pc, #676]	; (11b80 <hci_evt_encode+0x380>)
   118dc:	462b      	mov	r3, r5
   118de:	463a      	mov	r2, r7
   118e0:	f013 fad9 	bl	24e96 <log_from_user>
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
   118e4:	b008      	add	sp, #32
   118e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t status = cc->status;
   118ea:	7f25      	ldrb	r5, [r4, #28]
	if (!status) {
   118ec:	2d00      	cmp	r5, #0
   118ee:	f000 81c0 	beq.w	11c72 <hci_evt_encode+0x472>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   118f2:	4b9f      	ldr	r3, [pc, #636]	; (11b70 <hci_evt_encode+0x370>)
   118f4:	6859      	ldr	r1, [r3, #4]
   118f6:	f04f 0800 	mov.w	r8, #0
   118fa:	4642      	mov	r2, r8
   118fc:	f001 5300 	and.w	r3, r1, #536870912	; 0x20000000
   11900:	4313      	orrs	r3, r2
   11902:	d0ef      	beq.n	118e4 <hci_evt_encode+0xe4>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   11904:	4b9b      	ldr	r3, [pc, #620]	; (11b74 <hci_evt_encode+0x374>)
   11906:	f8d3 c000 	ldr.w	ip, [r3]
   1190a:	f240 2101 	movw	r1, #513	; 0x201
   1190e:	ea0c 0201 	and.w	r2, ip, r1
   11912:	4643      	mov	r3, r8
   11914:	4313      	orrs	r3, r2
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
   11916:	f40c 7000 	and.w	r0, ip, #512	; 0x200
   1191a:	4641      	mov	r1, r8
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   1191c:	d0e2      	beq.n	118e4 <hci_evt_encode+0xe4>
	if (!status) {
   1191e:	2d00      	cmp	r5, #0
   11920:	f040 81ba 	bne.w	11c98 <hci_evt_encode+0x498>
		conn_count++;
   11924:	4a97      	ldr	r2, [pc, #604]	; (11b84 <hci_evt_encode+0x384>)
   11926:	6813      	ldr	r3, [r2, #0]
   11928:	3301      	adds	r3, #1
   1192a:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   1192c:	ea50 0301 	orrs.w	r3, r0, r1
   11930:	f104 081f 	add.w	r8, r4, #31
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
   11934:	4630      	mov	r0, r6
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   11936:	f000 81c5 	beq.w	11cc4 <hci_evt_encode+0x4c4>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
   1193a:	221e      	movs	r2, #30
   1193c:	210a      	movs	r1, #10
   1193e:	f7ff f8f9 	bl	10b34 <meta_evt>
		leecc->status = 0x00;
   11942:	7005      	strb	r5, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
   11944:	f8a0 7001 	strh.w	r7, [r0, #1]
		leecc->role = cc->role;
   11948:	7f62      	ldrb	r2, [r4, #29]
   1194a:	70c2      	strb	r2, [r0, #3]
		leecc->peer_addr.type = cc->peer_addr_type;
   1194c:	7fa2      	ldrb	r2, [r4, #30]
   1194e:	7102      	strb	r2, [r0, #4]
   11950:	f8d8 2000 	ldr.w	r2, [r8]
   11954:	f8c0 2005 	str.w	r2, [r0, #5]
   11958:	f8b8 2004 	ldrh.w	r2, [r8, #4]
   1195c:	f8a0 2009 	strh.w	r2, [r0, #9]
   11960:	4623      	mov	r3, r4
   11962:	f853 2f2b 	ldr.w	r2, [r3, #43]!
   11966:	f8c0 200b 	str.w	r2, [r0, #11]
   1196a:	889b      	ldrh	r3, [r3, #4]
   1196c:	f8a0 300f 	strh.w	r3, [r0, #15]
   11970:	4623      	mov	r3, r4
   11972:	f853 2f25 	ldr.w	r2, [r3, #37]!
   11976:	f8c0 2011 	str.w	r2, [r0, #17]
   1197a:	889b      	ldrh	r3, [r3, #4]
   1197c:	f8a0 3015 	strh.w	r3, [r0, #21]
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   11980:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
		leecc->interval = sys_cpu_to_le16(cc->interval);
   11982:	8e61      	ldrh	r1, [r4, #50]	; 0x32
		leecc->latency = sys_cpu_to_le16(cc->latency);
   11984:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   11986:	f8a0 2019 	strh.w	r2, [r0, #25]
		leecc->interval = sys_cpu_to_le16(cc->interval);
   1198a:	f8a0 1017 	strh.w	r1, [r0, #23]
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   1198e:	f8a0 301b 	strh.w	r3, [r0, #27]
		leecc->clock_accuracy = cc->sca;
   11992:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   11996:	7743      	strb	r3, [r0, #29]
		return;
   11998:	e7a4      	b.n	118e4 <hci_evt_encode+0xe4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1199a:	4b75      	ldr	r3, [pc, #468]	; (11b70 <hci_evt_encode+0x370>)
   1199c:	6858      	ldr	r0, [r3, #4]
   1199e:	2100      	movs	r1, #0
   119a0:	460a      	mov	r2, r1
   119a2:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   119a6:	4313      	orrs	r3, r2
   119a8:	d09c      	beq.n	118e4 <hci_evt_encode+0xe4>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
   119aa:	4b72      	ldr	r3, [pc, #456]	; (11b74 <hci_evt_encode+0x374>)
   119ac:	6818      	ldr	r0, [r3, #0]
   119ae:	460b      	mov	r3, r1
   119b0:	f000 0204 	and.w	r2, r0, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   119b4:	4313      	orrs	r3, r2
   119b6:	d095      	beq.n	118e4 <hci_evt_encode+0xe4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
   119b8:	2209      	movs	r2, #9
   119ba:	2103      	movs	r1, #3
   119bc:	4630      	mov	r0, r6
   119be:	f7ff f8b9 	bl	10b34 <meta_evt>
	sep->status = cu->status;
   119c2:	7f23      	ldrb	r3, [r4, #28]
   119c4:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
   119c6:	8be1      	ldrh	r1, [r4, #30]
	sep->latency = sys_cpu_to_le16(cu->latency);
   119c8:	8c22      	ldrh	r2, [r4, #32]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   119ca:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   119cc:	f8a0 3007 	strh.w	r3, [r0, #7]
	sep->handle = sys_cpu_to_le16(handle);
   119d0:	f8a0 7001 	strh.w	r7, [r0, #1]
	sep->interval = sys_cpu_to_le16(cu->interval);
   119d4:	f8a0 1003 	strh.w	r1, [r0, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
   119d8:	f8a0 2005 	strh.w	r2, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   119dc:	e782      	b.n	118e4 <hci_evt_encode+0xe4>
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   119de:	4b64      	ldr	r3, [pc, #400]	; (11b70 <hci_evt_encode+0x370>)
   119e0:	6819      	ldr	r1, [r3, #0]
   119e2:	2300      	movs	r3, #0
   119e4:	f001 0210 	and.w	r2, r1, #16
   119e8:	4313      	orrs	r3, r2
   119ea:	f43f af7b 	beq.w	118e4 <hci_evt_encode+0xe4>
   119ee:	4632      	mov	r2, r6
   119f0:	4639      	mov	r1, r7
   119f2:	f7ff f907 	bl	10c04 <hci_disconn_complete_encode.part.0>
   119f6:	e775      	b.n	118e4 <hci_evt_encode+0xe4>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
   119f8:	4b63      	ldr	r3, [pc, #396]	; (11b88 <hci_evt_encode+0x388>)
   119fa:	6819      	ldr	r1, [r3, #0]
   119fc:	2300      	movs	r3, #0
   119fe:	f401 0200 	and.w	r2, r1, #8388608	; 0x800000
   11a02:	4313      	orrs	r3, r2
   11a04:	f43f af6e 	beq.w	118e4 <hci_evt_encode+0xe4>
   11a08:	3608      	adds	r6, #8
   11a0a:	2102      	movs	r1, #2
   11a0c:	4630      	mov	r0, r6
   11a0e:	f017 f949 	bl	28ca4 <net_buf_simple_add>
   11a12:	4603      	mov	r3, r0
	hdr->evt = evt;
   11a14:	2257      	movs	r2, #87	; 0x57
	hdr->len = len;
   11a16:	2102      	movs	r1, #2
   11a18:	4630      	mov	r0, r6
	hdr->evt = evt;
   11a1a:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
   11a1c:	7059      	strb	r1, [r3, #1]
   11a1e:	f017 f941 	bl	28ca4 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
   11a22:	8007      	strh	r7, [r0, #0]
   11a24:	e75e      	b.n	118e4 <hci_evt_encode+0xe4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   11a26:	4b52      	ldr	r3, [pc, #328]	; (11b70 <hci_evt_encode+0x370>)
   11a28:	6858      	ldr	r0, [r3, #4]
   11a2a:	2100      	movs	r1, #0
   11a2c:	460a      	mov	r2, r1
   11a2e:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   11a32:	4313      	orrs	r3, r2
   11a34:	f43f af56 	beq.w	118e4 <hci_evt_encode+0xe4>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
   11a38:	4b4e      	ldr	r3, [pc, #312]	; (11b74 <hci_evt_encode+0x374>)
   11a3a:	6818      	ldr	r0, [r3, #0]
   11a3c:	460b      	mov	r3, r1
   11a3e:	f400 2200 	and.w	r2, r0, #524288	; 0x80000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   11a42:	4313      	orrs	r3, r2
   11a44:	f43f af4e 	beq.w	118e4 <hci_evt_encode+0xe4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
   11a48:	4630      	mov	r0, r6
   11a4a:	2203      	movs	r2, #3
   11a4c:	2114      	movs	r1, #20
   11a4e:	f7ff f871 	bl	10b34 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
   11a52:	8007      	strh	r7, [r0, #0]
	sep->chan_sel_algo = cs->csa;
   11a54:	7f23      	ldrb	r3, [r4, #28]
   11a56:	7083      	strb	r3, [r0, #2]
   11a58:	e744      	b.n	118e4 <hci_evt_encode+0xe4>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
   11a5a:	4b45      	ldr	r3, [pc, #276]	; (11b70 <hci_evt_encode+0x370>)
   11a5c:	6859      	ldr	r1, [r3, #4]
   11a5e:	2400      	movs	r4, #0
   11a60:	4622      	mov	r2, r4
   11a62:	f401 4300 	and.w	r3, r1, #32768	; 0x8000
   11a66:	4313      	orrs	r3, r2
   11a68:	f43f af3c 	beq.w	118e4 <hci_evt_encode+0xe4>
   11a6c:	3608      	adds	r6, #8
   11a6e:	2102      	movs	r1, #2
   11a70:	4630      	mov	r0, r6
   11a72:	f017 f917 	bl	28ca4 <net_buf_simple_add>
   11a76:	4603      	mov	r3, r0
	hdr->evt = evt;
   11a78:	2230      	movs	r2, #48	; 0x30
	hdr->len = len;
   11a7a:	2103      	movs	r1, #3
   11a7c:	4630      	mov	r0, r6
	hdr->evt = evt;
   11a7e:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
   11a80:	7059      	strb	r1, [r3, #1]
   11a82:	f017 f90f 	bl	28ca4 <net_buf_simple_add>
	ep->status = 0x00;
   11a86:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   11a88:	f8a0 7001 	strh.w	r7, [r0, #1]
   11a8c:	e72a      	b.n	118e4 <hci_evt_encode+0xe4>
		LL_ASSERT(0);
   11a8e:	f241 73a8 	movw	r3, #6056	; 0x17a8
   11a92:	4a3e      	ldr	r2, [pc, #248]	; (11b8c <hci_evt_encode+0x38c>)
   11a94:	493e      	ldr	r1, [pc, #248]	; (11b90 <hci_evt_encode+0x390>)
   11a96:	483f      	ldr	r0, [pc, #252]	; (11b94 <hci_evt_encode+0x394>)
   11a98:	f012 fda4 	bl	245e4 <printk>
   11a9c:	4040      	eors	r0, r0
   11a9e:	f380 8811 	msr	BASEPRI, r0
   11aa2:	f04f 0003 	mov.w	r0, #3
   11aa6:	df02      	svc	2
}
   11aa8:	e71c      	b.n	118e4 <hci_evt_encode+0xe4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   11aaa:	4b31      	ldr	r3, [pc, #196]	; (11b70 <hci_evt_encode+0x370>)
   11aac:	6858      	ldr	r0, [r3, #4]
   11aae:	2100      	movs	r1, #0
   11ab0:	460a      	mov	r2, r1
   11ab2:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   11ab6:	4313      	orrs	r3, r2
   11ab8:	f43f af14 	beq.w	118e4 <hci_evt_encode+0xe4>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
   11abc:	4b2d      	ldr	r3, [pc, #180]	; (11b74 <hci_evt_encode+0x374>)
   11abe:	6818      	ldr	r0, [r3, #0]
   11ac0:	460b      	mov	r3, r1
   11ac2:	f000 0240 	and.w	r2, r0, #64	; 0x40
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   11ac6:	4313      	orrs	r3, r2
   11ac8:	f43f af0c 	beq.w	118e4 <hci_evt_encode+0xe4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
   11acc:	4630      	mov	r0, r6
   11ace:	220a      	movs	r2, #10
   11ad0:	2107      	movs	r1, #7
   11ad2:	f7ff f82f 	bl	10b34 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
   11ad6:	8007      	strh	r7, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
   11ad8:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   11ada:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
   11adc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   11ade:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
   11ae0:	8c23      	ldrh	r3, [r4, #32]
   11ae2:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
   11ae4:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   11ae6:	8103      	strh	r3, [r0, #8]
   11ae8:	e6fc      	b.n	118e4 <hci_evt_encode+0xe4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
   11aea:	2205      	movs	r2, #5
   11aec:	4630      	mov	r0, r6
   11aee:	210c      	movs	r1, #12
   11af0:	f7ff f820 	bl	10b34 <meta_evt>
	sep->status = pu->status;
   11af4:	7f23      	ldrb	r3, [r4, #28]
   11af6:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   11af8:	f8a0 7001 	strh.w	r7, [r0, #1]
   11afc:	7f62      	ldrb	r2, [r4, #29]
   11afe:	2a00      	cmp	r2, #0
   11b00:	fa92 f3a2 	rbit	r3, r2
   11b04:	fab3 f383 	clz	r3, r3
   11b08:	bf08      	it	eq
   11b0a:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   11b0e:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
   11b10:	70c3      	strb	r3, [r0, #3]
   11b12:	7fa2      	ldrb	r2, [r4, #30]
   11b14:	fa92 f3a2 	rbit	r3, r2
   11b18:	2a00      	cmp	r2, #0
   11b1a:	fab3 f383 	clz	r3, r3
   11b1e:	bf08      	it	eq
   11b20:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   11b24:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
   11b26:	7103      	strb	r3, [r0, #4]
   11b28:	e6dc      	b.n	118e4 <hci_evt_encode+0xe4>
		le_unknown_rsp(pdu_data, handle, buf);
   11b2a:	f894 1020 	ldrb.w	r1, [r4, #32]
	switch (pdu_data->llctrl.unknown_rsp.type) {
   11b2e:	290e      	cmp	r1, #14
   11b30:	f000 80fb 	beq.w	11d2a <hci_evt_encode+0x52a>
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   11b34:	f3ef 8205 	mrs	r2, IPSR
	if (value) {
   11b38:	4b10      	ldr	r3, [pc, #64]	; (11b7c <hci_evt_encode+0x37c>)
   11b3a:	480f      	ldr	r0, [pc, #60]	; (11b78 <hci_evt_encode+0x378>)
   11b3c:	1a1b      	subs	r3, r3, r0
   11b3e:	08db      	lsrs	r3, r3, #3
   11b40:	2a00      	cmp	r2, #0
   11b42:	f040 80b8 	bne.w	11cb6 <hci_evt_encode+0x4b6>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   11b46:	f3ef 8414 	mrs	r4, CONTROL
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   11b4a:	019b      	lsls	r3, r3, #6
   11b4c:	f043 0002 	orr.w	r0, r3, #2
   11b50:	07e3      	lsls	r3, r4, #31
   11b52:	4602      	mov	r2, r0
   11b54:	f140 80b2 	bpl.w	11cbc <hci_evt_encode+0x4bc>
   11b58:	460a      	mov	r2, r1
   11b5a:	490f      	ldr	r1, [pc, #60]	; (11b98 <hci_evt_encode+0x398>)
   11b5c:	f013 f99b 	bl	24e96 <log_from_user>
   11b60:	e6c0      	b.n	118e4 <hci_evt_encode+0xe4>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
   11b62:	460b      	mov	r3, r1
   11b64:	463a      	mov	r2, r7
   11b66:	4601      	mov	r1, r0
   11b68:	2000      	movs	r0, #0
   11b6a:	f7ff f815 	bl	10b98 <le_remote_feat_complete>
		break;
   11b6e:	e6b9      	b.n	118e4 <hci_evt_encode+0xe4>
   11b70:	20007728 	.word	0x20007728
   11b74:	20007730 	.word	0x20007730
   11b78:	0002a6d0 	.word	0x0002a6d0
   11b7c:	0002a718 	.word	0x0002a718
   11b80:	0002b2c8 	.word	0x0002b2c8
   11b84:	200010a4 	.word	0x200010a4
   11b88:	20000760 	.word	0x20000760
   11b8c:	0002b28c 	.word	0x0002b28c
   11b90:	0002b15c 	.word	0x0002b15c
   11b94:	0002b0c4 	.word	0x0002b0c4
   11b98:	0002b2f4 	.word	0x0002b2f4
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   11b9c:	4b68      	ldr	r3, [pc, #416]	; (11d40 <hci_evt_encode+0x540>)
   11b9e:	6819      	ldr	r1, [r3, #0]
   11ba0:	2300      	movs	r3, #0
   11ba2:	f001 0280 	and.w	r2, r1, #128	; 0x80
   11ba6:	4313      	orrs	r3, r2
   11ba8:	f43f ae9c 	beq.w	118e4 <hci_evt_encode+0xe4>
   11bac:	f894 0020 	ldrb.w	r0, [r4, #32]
   11bb0:	4632      	mov	r2, r6
   11bb2:	4639      	mov	r1, r7
   11bb4:	f7fe ffd6 	bl	10b64 <encrypt_change.part.0>
   11bb8:	e694      	b.n	118e4 <hci_evt_encode+0xe4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   11bba:	4b61      	ldr	r3, [pc, #388]	; (11d40 <hci_evt_encode+0x540>)
   11bbc:	6858      	ldr	r0, [r3, #4]
   11bbe:	2100      	movs	r1, #0
   11bc0:	460a      	mov	r2, r1
   11bc2:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   11bc6:	4313      	orrs	r3, r2
   11bc8:	d05c      	beq.n	11c84 <hci_evt_encode+0x484>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
   11bca:	4b5e      	ldr	r3, [pc, #376]	; (11d44 <hci_evt_encode+0x544>)
   11bcc:	6818      	ldr	r0, [r3, #0]
   11bce:	460b      	mov	r3, r1
   11bd0:	f000 0220 	and.w	r2, r0, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   11bd4:	4313      	orrs	r3, r2
   11bd6:	d055      	beq.n	11c84 <hci_evt_encode+0x484>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
   11bd8:	4630      	mov	r0, r6
   11bda:	220a      	movs	r2, #10
   11bdc:	2106      	movs	r1, #6
   11bde:	f7fe ffa9 	bl	10b34 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
   11be2:	8007      	strh	r7, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
   11be4:	8c23      	ldrh	r3, [r4, #32]
   11be6:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
   11be8:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   11bea:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
   11bec:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   11bee:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
   11bf0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   11bf2:	8103      	strh	r3, [r0, #8]
   11bf4:	e676      	b.n	118e4 <hci_evt_encode+0xe4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   11bf6:	4b52      	ldr	r3, [pc, #328]	; (11d40 <hci_evt_encode+0x540>)
   11bf8:	6858      	ldr	r0, [r3, #4]
   11bfa:	2100      	movs	r1, #0
   11bfc:	460a      	mov	r2, r1
   11bfe:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   11c02:	4313      	orrs	r3, r2
   11c04:	f43f ae6e 	beq.w	118e4 <hci_evt_encode+0xe4>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
   11c08:	4b4e      	ldr	r3, [pc, #312]	; (11d44 <hci_evt_encode+0x544>)
   11c0a:	6818      	ldr	r0, [r3, #0]
   11c0c:	460b      	mov	r3, r1
   11c0e:	f000 0210 	and.w	r2, r0, #16
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   11c12:	4313      	orrs	r3, r2
   11c14:	f43f ae66 	beq.w	118e4 <hci_evt_encode+0xe4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
   11c18:	220c      	movs	r2, #12
   11c1a:	2105      	movs	r1, #5
   11c1c:	4630      	mov	r0, r6
   11c1e:	f7fe ff89 	bl	10b34 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
   11c22:	4603      	mov	r3, r0
   11c24:	4622      	mov	r2, r4
   11c26:	f823 7b02 	strh.w	r7, [r3], #2
   11c2a:	f852 1f20 	ldr.w	r1, [r2, #32]!
   11c2e:	6852      	ldr	r2, [r2, #4]
   11c30:	f8c0 1002 	str.w	r1, [r0, #2]
   11c34:	605a      	str	r2, [r3, #4]
   11c36:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   11c38:	8143      	strh	r3, [r0, #10]
   11c3a:	e653      	b.n	118e4 <hci_evt_encode+0xe4>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   11c3c:	4b40      	ldr	r3, [pc, #256]	; (11d40 <hci_evt_encode+0x540>)
   11c3e:	6819      	ldr	r1, [r3, #0]
   11c40:	2000      	movs	r0, #0
   11c42:	f001 0280 	and.w	r2, r1, #128	; 0x80
   11c46:	4603      	mov	r3, r0
   11c48:	4313      	orrs	r3, r2
   11c4a:	f43f ae4b 	beq.w	118e4 <hci_evt_encode+0xe4>
   11c4e:	4632      	mov	r2, r6
   11c50:	4639      	mov	r1, r7
   11c52:	f7fe ff87 	bl	10b64 <encrypt_change.part.0>
   11c56:	e645      	b.n	118e4 <hci_evt_encode+0xe4>
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
   11c58:	019b      	lsls	r3, r3, #6
   11c5a:	f043 0302 	orr.w	r3, r3, #2
   11c5e:	483a      	ldr	r0, [pc, #232]	; (11d48 <hci_evt_encode+0x548>)
   11c60:	9704      	str	r7, [sp, #16]
   11c62:	2204      	movs	r2, #4
   11c64:	a904      	add	r1, sp, #16
   11c66:	e9cd 6406 	strd	r6, r4, [sp, #24]
   11c6a:	9505      	str	r5, [sp, #20]
   11c6c:	f013 f98f 	bl	24f8e <log_n>
		return;
   11c70:	e638      	b.n	118e4 <hci_evt_encode+0xe4>
		ll_rl_crpa_set(cc->peer_addr_type,
   11c72:	7fa0      	ldrb	r0, [r4, #30]
   11c74:	f104 0325 	add.w	r3, r4, #37	; 0x25
   11c78:	22ff      	movs	r2, #255	; 0xff
   11c7a:	f104 011f 	add.w	r1, r4, #31
   11c7e:	f007 fd69 	bl	19754 <ll_rl_crpa_set>
   11c82:	e636      	b.n	118f2 <hci_evt_encode+0xf2>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
   11c84:	2300      	movs	r3, #0
   11c86:	e9cd 3301 	strd	r3, r3, [sp, #4]
   11c8a:	4638      	mov	r0, r7
   11c8c:	9300      	str	r3, [sp, #0]
   11c8e:	221a      	movs	r2, #26
   11c90:	2102      	movs	r1, #2
   11c92:	f002 fe8f 	bl	149b4 <ll_conn_update>
		return;
   11c96:	e625      	b.n	118e4 <hci_evt_encode+0xe4>
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   11c98:	ea50 0301 	orrs.w	r3, r0, r1
   11c9c:	d034      	beq.n	11d08 <hci_evt_encode+0x508>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
   11c9e:	221e      	movs	r2, #30
   11ca0:	210a      	movs	r1, #10
   11ca2:	4630      	mov	r0, r6
   11ca4:	f7fe ff46 	bl	10b34 <meta_evt>
   11ca8:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   11caa:	4641      	mov	r1, r8
   11cac:	221e      	movs	r2, #30
   11cae:	f018 fba5 	bl	2a3fc <memset>
			leecc->status = status;
   11cb2:	7025      	strb	r5, [r4, #0]
			return;
   11cb4:	e616      	b.n	118e4 <hci_evt_encode+0xe4>
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   11cb6:	019b      	lsls	r3, r3, #6
   11cb8:	f043 0202 	orr.w	r2, r3, #2
   11cbc:	4823      	ldr	r0, [pc, #140]	; (11d4c <hci_evt_encode+0x54c>)
   11cbe:	f013 f91d 	bl	24efc <log_1>
   11cc2:	e60f      	b.n	118e4 <hci_evt_encode+0xe4>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
   11cc4:	2212      	movs	r2, #18
   11cc6:	2101      	movs	r1, #1
   11cc8:	f7fe ff34 	bl	10b34 <meta_evt>
	lecc->status = 0x00;
   11ccc:	7005      	strb	r5, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
   11cce:	f8a0 7001 	strh.w	r7, [r0, #1]
	lecc->role = cc->role;
   11cd2:	7f63      	ldrb	r3, [r4, #29]
   11cd4:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
   11cd6:	7fa3      	ldrb	r3, [r4, #30]
   11cd8:	f003 0301 	and.w	r3, r3, #1
   11cdc:	7103      	strb	r3, [r0, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   11cde:	f8d8 3000 	ldr.w	r3, [r8]
   11ce2:	f8c0 3005 	str.w	r3, [r0, #5]
   11ce6:	f8b8 3004 	ldrh.w	r3, [r8, #4]
   11cea:	f8a0 3009 	strh.w	r3, [r0, #9]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   11cee:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
	lecc->interval = sys_cpu_to_le16(cc->interval);
   11cf0:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	lecc->latency = sys_cpu_to_le16(cc->latency);
   11cf2:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   11cf4:	f8a0 200d 	strh.w	r2, [r0, #13]
	lecc->interval = sys_cpu_to_le16(cc->interval);
   11cf8:	f8a0 100b 	strh.w	r1, [r0, #11]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   11cfc:	f8a0 300f 	strh.w	r3, [r0, #15]
	lecc->clock_accuracy = cc->sca;
   11d00:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   11d04:	7443      	strb	r3, [r0, #17]
   11d06:	e5ed      	b.n	118e4 <hci_evt_encode+0xe4>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
   11d08:	4630      	mov	r0, r6
   11d0a:	2212      	movs	r2, #18
   11d0c:	2101      	movs	r1, #1
   11d0e:	f7fe ff11 	bl	10b34 <meta_evt>
__ssp_bos_icheck3(memset, void *, int)
   11d12:	f8c0 8000 	str.w	r8, [r0]
   11d16:	f8c0 8004 	str.w	r8, [r0, #4]
   11d1a:	f8c0 8008 	str.w	r8, [r0, #8]
   11d1e:	f8c0 800c 	str.w	r8, [r0, #12]
   11d22:	f8a0 8010 	strh.w	r8, [r0, #16]
		lecc->status = status;
   11d26:	7005      	strb	r5, [r0, #0]
		return;
   11d28:	e5dc      	b.n	118e4 <hci_evt_encode+0xe4>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   11d2a:	4633      	mov	r3, r6
   11d2c:	463a      	mov	r2, r7
   11d2e:	2100      	movs	r1, #0
   11d30:	201a      	movs	r0, #26
   11d32:	f7fe ff31 	bl	10b98 <le_remote_feat_complete>
		break;
   11d36:	e5d5      	b.n	118e4 <hci_evt_encode+0xe4>
		LL_ASSERT(0);
   11d38:	f241 63df 	movw	r3, #5855	; 0x16df
   11d3c:	e6a9      	b.n	11a92 <hci_evt_encode+0x292>
   11d3e:	bf00      	nop
   11d40:	20007728 	.word	0x20007728
   11d44:	20007730 	.word	0x20007730
   11d48:	0002b2c8 	.word	0x0002b2c8
   11d4c:	0002b2f4 	.word	0x0002b2f4

00011d50 <hci_num_cmplt_encode>:

#if defined(CONFIG_BT_CONN)
void hci_num_cmplt_encode(struct net_buf *buf, uint16_t handle, uint8_t num)
{
   11d50:	b570      	push	{r4, r5, r6, lr}
   11d52:	f100 0408 	add.w	r4, r0, #8
   11d56:	460e      	mov	r6, r1
   11d58:	4620      	mov	r0, r4
   11d5a:	2102      	movs	r1, #2
   11d5c:	4615      	mov	r5, r2
   11d5e:	f016 ffa1 	bl	28ca4 <net_buf_simple_add>
   11d62:	4603      	mov	r3, r0
	hdr->evt = evt;
   11d64:	2213      	movs	r2, #19
	hdr->len = len;
   11d66:	2105      	movs	r1, #5
	hdr->evt = evt;
   11d68:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
   11d6a:	7059      	strb	r1, [r3, #1]
   11d6c:	4620      	mov	r0, r4
   11d6e:	f016 ff99 	bl	28ca4 <net_buf_simple_add>

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
	ep->num_handles = num_handles;
   11d72:	2301      	movs	r3, #1
   11d74:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
   11d76:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
   11d7a:	f8a0 5003 	strh.w	r5, [r0, #3]
}
   11d7e:	bd70      	pop	{r4, r5, r6, pc}

00011d80 <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   11d80:	7903      	ldrb	r3, [r0, #4]
   11d82:	2b03      	cmp	r3, #3
   11d84:	d009      	beq.n	11d9a <hci_get_class+0x1a>

		switch (node_rx->hdr.type) {
   11d86:	2b14      	cmp	r3, #20
   11d88:	d005      	beq.n	11d96 <hci_get_class+0x16>
   11d8a:	3b15      	subs	r3, #21
		case NODE_RX_TYPE_USER_START ... NODE_RX_TYPE_USER_END - 1:
			return hci_user_ext_get_class(node_rx);
#endif /* CONFIG_BT_CTLR_USER_EVT_RANGE > 0 */

		default:
			return HCI_CLASS_NONE;
   11d8c:	2b05      	cmp	r3, #5
   11d8e:	bf94      	ite	ls
   11d90:	2003      	movls	r0, #3
   11d92:	2000      	movhi	r0, #0
   11d94:	4770      	bx	lr
			return HCI_CLASS_EVT_REQUIRED;
   11d96:	2001      	movs	r0, #1
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
   11d98:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
   11d9a:	7f03      	ldrb	r3, [r0, #28]
   11d9c:	f003 0303 	and.w	r3, r3, #3
   11da0:	2b03      	cmp	r3, #3
		return HCI_CLASS_ACL_DATA;
   11da2:	bf0c      	ite	eq
   11da4:	2004      	moveq	r0, #4
   11da6:	2005      	movne	r0, #5
   11da8:	4770      	bx	lr
   11daa:	bf00      	nop

00011dac <hci_init>:

void hci_init(struct k_poll_signal *signal_host_buf)
{
   11dac:	b430      	push	{r4, r5}
	event_mask = DEFAULT_EVENT_MASK;
   11dae:	480b      	ldr	r0, [pc, #44]	; (11ddc <hci_init+0x30>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   11db0:	490b      	ldr	r1, [pc, #44]	; (11de0 <hci_init+0x34>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   11db2:	4a0c      	ldr	r2, [pc, #48]	; (11de4 <hci_init+0x38>)
	conn_count = 0U;
   11db4:	4b0c      	ldr	r3, [pc, #48]	; (11de8 <hci_init+0x3c>)
	event_mask = DEFAULT_EVENT_MASK;
   11db6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   11dba:	f641 75ff 	movw	r5, #8191	; 0x1fff
   11dbe:	e9c0 4500 	strd	r4, r5, [r0]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   11dc2:	2400      	movs	r4, #0
   11dc4:	2500      	movs	r5, #0
   11dc6:	e9c1 4500 	strd	r4, r5, [r1]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   11dca:	201f      	movs	r0, #31
   11dcc:	2100      	movs	r1, #0
   11dce:	e9c2 0100 	strd	r0, r1, [r2]
	conn_count = 0U;
   11dd2:	2200      	movs	r2, #0
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
   11dd4:	bc30      	pop	{r4, r5}
	conn_count = 0U;
   11dd6:	601a      	str	r2, [r3, #0]
}
   11dd8:	4770      	bx	lr
   11dda:	bf00      	nop
   11ddc:	20007728 	.word	0x20007728
   11de0:	20000760 	.word	0x20000760
   11de4:	20007730 	.word	0x20007730
   11de8:	200010a4 	.word	0x200010a4

00011dec <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
   11dec:	f008 b83a 	b.w	19e64 <lll_csrand_get>

00011df0 <bt_encrypt_le>:
}

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   11df0:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
   11df2:	2300      	movs	r3, #0
   11df4:	f009 fe02 	bl	1b9fc <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   11df8:	2000      	movs	r0, #0
   11dfa:	bd08      	pop	{r3, pc}

00011dfc <tx_cmplt_get>:
}
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL */

#if defined(CONFIG_BT_CONN)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
   11dfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_tx *tx;
	uint8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   11e00:	4f2f      	ldr	r7, [pc, #188]	; (11ec0 <tx_cmplt_get+0xc4>)
					   uint8_t first, uint8_t last, uint8_t *idx)
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
   11e02:	780b      	ldrb	r3, [r1, #0]
   11e04:	783c      	ldrb	r4, [r7, #0]
{
   11e06:	460d      	mov	r5, r1
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   11e08:	7879      	ldrb	r1, [r7, #1]
   11e0a:	4299      	cmp	r1, r3
   11e0c:	bf9c      	itt	ls
   11e0e:	78bb      	ldrbls	r3, [r7, #2]
		*idx = first;
   11e10:	702b      	strbls	r3, [r5, #0]
	}

	if (*idx == last) {
   11e12:	429a      	cmp	r2, r3
{
   11e14:	4683      	mov	fp, r0
   11e16:	4692      	mov	sl, r2
   11e18:	d045      	beq.n	11ea6 <tx_cmplt_get+0xaa>
		return NULL;
	}

	i = *idx + 1;
   11e1a:	1c5a      	adds	r2, r3, #1
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
   11e1c:	4e29      	ldr	r6, [pc, #164]	; (11ec4 <tx_cmplt_get+0xc8>)
	i = *idx + 1;
   11e1e:	b2d2      	uxtb	r2, r2
	p = (void *)(fifo + (*idx) * size);
   11e20:	fb13 f304 	smulbb	r3, r3, r4
		i = 0U;
   11e24:	4291      	cmp	r1, r2
   11e26:	bf08      	it	eq
   11e28:	2200      	moveq	r2, #0
				    mfifo_tx_ack.n, mfifo_tx_ack.f, last,
				    first);
	if (!tx) {
   11e2a:	18f1      	adds	r1, r6, r3

	*idx = i;
   11e2c:	702a      	strb	r2, [r5, #0]
   11e2e:	d03a      	beq.n	11ea6 <tx_cmplt_get+0xaa>
		return 0;
	}

	*handle = tx->handle;
   11e30:	5af3      	ldrh	r3, [r6, r3]
   11e32:	8003      	strh	r3, [r0, #0]
	cmplt = 0U;
   11e34:	f04f 0800 	mov.w	r8, #0
   11e38:	f04f 0901 	mov.w	r9, #1
   11e3c:	e022      	b.n	11e84 <tx_cmplt_get+0x88>
		struct node_tx *node_tx;
		struct pdu_data *p;

		node_tx = tx->node;
		p = (void *)node_tx->pdu;
		if (!node_tx || (node_tx == (void *)1) ||
   11e3e:	b37b      	cbz	r3, 11ea0 <tx_cmplt_get+0xa4>
		    (((uint32_t)node_tx & ~3) &&
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
   11e40:	7903      	ldrb	r3, [r0, #4]
   11e42:	f003 0303 	and.w	r3, r3, #3
		    (((uint32_t)node_tx & ~3) &&
   11e46:	3b01      	subs	r3, #1
   11e48:	2b01      	cmp	r3, #1
   11e4a:	d931      	bls.n	11eb0 <tx_cmplt_get+0xb4>
   11e4c:	2302      	movs	r3, #2
   11e4e:	604b      	str	r3, [r1, #4]
			/* ctrl packet or flushed, hence dont count num cmplt */
			tx->node = (void *)2;
		}

		if (((uint32_t)node_tx & ~3)) {
			ll_tx_mem_release(node_tx);
   11e50:	f002 fd60 	bl	14914 <ll_tx_mem_release>
	if (*idx >= count) {
   11e54:	782b      	ldrb	r3, [r5, #0]
		}

		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   11e56:	7879      	ldrb	r1, [r7, #1]
   11e58:	7838      	ldrb	r0, [r7, #0]
   11e5a:	4299      	cmp	r1, r3
   11e5c:	bf9c      	itt	ls
   11e5e:	78bb      	ldrbls	r3, [r7, #2]
		*idx = first;
   11e60:	702b      	strbls	r3, [r5, #0]
	if (*idx == last) {
   11e62:	459a      	cmp	sl, r3
   11e64:	d021      	beq.n	11eaa <tx_cmplt_get+0xae>
	i = *idx + 1;
   11e66:	1c5c      	adds	r4, r3, #1
   11e68:	b2e4      	uxtb	r4, r4
	p = (void *)(fifo + (*idx) * size);
   11e6a:	fb13 f300 	smulbb	r3, r3, r0
		i = 0U;
   11e6e:	42a1      	cmp	r1, r4
   11e70:	bf08      	it	eq
   11e72:	2400      	moveq	r4, #0
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, first);
	} while (tx && tx->handle == *handle);
   11e74:	18f1      	adds	r1, r6, r3
	*idx = i;
   11e76:	702c      	strb	r4, [r5, #0]
   11e78:	d017      	beq.n	11eaa <tx_cmplt_get+0xae>
   11e7a:	5af0      	ldrh	r0, [r6, r3]
   11e7c:	f8bb 3000 	ldrh.w	r3, [fp]
   11e80:	4298      	cmp	r0, r3
   11e82:	d112      	bne.n	11eaa <tx_cmplt_get+0xae>
		node_tx = tx->node;
   11e84:	6848      	ldr	r0, [r1, #4]
		if (!node_tx || (node_tx == (void *)1) ||
   11e86:	2801      	cmp	r0, #1
   11e88:	f020 0303 	bic.w	r3, r0, #3
   11e8c:	d8d7      	bhi.n	11e3e <tx_cmplt_get+0x42>
			cmplt++;
   11e8e:	f108 0801 	add.w	r8, r8, #1
   11e92:	fa5f f888 	uxtb.w	r8, r8
   11e96:	f8c1 9004 	str.w	r9, [r1, #4]
		if (((uint32_t)node_tx & ~3)) {
   11e9a:	2b00      	cmp	r3, #0
   11e9c:	d0da      	beq.n	11e54 <tx_cmplt_get+0x58>
   11e9e:	e7d7      	b.n	11e50 <tx_cmplt_get+0x54>
   11ea0:	2302      	movs	r3, #2
   11ea2:	604b      	str	r3, [r1, #4]
   11ea4:	e7d6      	b.n	11e54 <tx_cmplt_get+0x58>
		return 0;
   11ea6:	f04f 0800 	mov.w	r8, #0

	return cmplt;
}
   11eaa:	4640      	mov	r0, r8
   11eac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cmplt++;
   11eb0:	f108 0801 	add.w	r8, r8, #1
   11eb4:	fa5f f888 	uxtb.w	r8, r8
   11eb8:	f8c1 9004 	str.w	r9, [r1, #4]
		if (((uint32_t)node_tx & ~3)) {
   11ebc:	e7c8      	b.n	11e50 <tx_cmplt_get+0x54>
   11ebe:	bf00      	nop
   11ec0:	200079e8 	.word	0x200079e8
   11ec4:	200079ec 	.word	0x200079ec

00011ec8 <ull_done>:
}
#endif /* CONFIG_BT_CONN */

#if !defined(CONFIG_BT_CTLR_LOW_LAT_ULL)
static void ull_done(void *param)
{
   11ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11ecc:	4f3f      	ldr	r7, [pc, #252]	; (11fcc <ull_done+0x104>)
	case EVENT_DONE_EXTRA_TYPE_NONE:
		/* ignore */
		break;

	default:
		LL_ASSERT(0);
   11ece:	f8df 810c 	ldr.w	r8, [pc, #268]	; 11fdc <ull_done+0x114>
   11ed2:	f8df a10c 	ldr.w	sl, [pc, #268]	; 11fe0 <ull_done+0x118>
{
   11ed6:	b082      	sub	sp, #8
			memq_dequeue(memq_ull_done.tail, &memq_ull_done.head, NULL);
   11ed8:	46b9      	mov	r9, r7
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
   11eda:	e9d7 0100 	ldrd	r0, r1, [r7]
   11ede:	aa01      	add	r2, sp, #4
   11ee0:	f7fc ffbe 	bl	ee60 <memq_peek>
		if (link) {
   11ee4:	4604      	mov	r4, r0
   11ee6:	2800      	cmp	r0, #0
   11ee8:	d042      	beq.n	11f70 <ull_done+0xa8>
			memq_dequeue(memq_ull_done.tail, &memq_ull_done.head, NULL);
   11eea:	6878      	ldr	r0, [r7, #4]
   11eec:	2200      	movs	r2, #0
   11eee:	4649      	mov	r1, r9
   11ef0:	f7fc ffbe 	bl	ee70 <memq_dequeue>
			rx_demux_event_done(link, done);
   11ef4:	9e01      	ldr	r6, [sp, #4]
	switch (done->extra.type) {
   11ef6:	f896 3020 	ldrb.w	r3, [r6, #32]
	ull_hdr = done->param;
   11efa:	69f5      	ldr	r5, [r6, #28]
	switch (done->extra.type) {
   11efc:	b123      	cbz	r3, 11f08 <ull_done+0x40>
   11efe:	2b01      	cmp	r3, #1
   11f00:	d147      	bne.n	11f92 <ull_done+0xca>
		ull_conn_done(done);
   11f02:	4630      	mov	r0, r6
   11f04:	f006 f8c0 	bl	18088 <ull_conn_done>
	if (!MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   11f08:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 11fe4 <ull_done+0x11c>
   11f0c:	f89c 2003 	ldrb.w	r2, [ip, #3]
	if (last == count) {
   11f10:	f89c 0001 	ldrb.w	r0, [ip, #1]
   11f14:	f89c 1002 	ldrb.w	r1, [ip, #2]
	last = last + 1;
   11f18:	1c53      	adds	r3, r2, #1
   11f1a:	b2db      	uxtb	r3, r3
		last = 0U;
   11f1c:	4298      	cmp	r0, r3
   11f1e:	bf08      	it	eq
   11f20:	2300      	moveq	r3, #0
	if (last == first) {
   11f22:	4299      	cmp	r1, r3
		break;
	}

	/* release done */
	done->extra.type = 0U;
   11f24:	f04f 0000 	mov.w	r0, #0
   11f28:	f886 0020 	strb.w	r0, [r6, #32]
   11f2c:	d023      	beq.n	11f76 <ull_done+0xae>
	done->hdr.link = link;
   11f2e:	6034      	str	r4, [r6, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   11f30:	f89c 1000 	ldrb.w	r1, [ip]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   11f34:	fb01 c202 	mla	r2, r1, r2, ip
   11f38:	6056      	str	r6, [r2, #4]
	*last = idx; /* Commit: Update write index */
   11f3a:	f88c 3003 	strb.w	r3, [ip, #3]
	/* LLL done synchronized */
	lll_done_sync();
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL_DONE */

	/* ull instance will resume, dont decrement ref */
	if (!ull_hdr) {
   11f3e:	2d00      	cmp	r5, #0
   11f40:	d0cb      	beq.n	11eda <ull_done+0x12>
	return hdr->ref;
   11f42:	782b      	ldrb	r3, [r5, #0]
		return;
	}

	/* Decrement prepare reference */
	LL_ASSERT(ull_ref_get(ull_hdr));
   11f44:	2b00      	cmp	r3, #0
   11f46:	d032      	beq.n	11fae <ull_done+0xe6>
	return hdr->ref--;
   11f48:	782b      	ldrb	r3, [r5, #0]
   11f4a:	3b01      	subs	r3, #1
   11f4c:	b2db      	uxtb	r3, r3
   11f4e:	702b      	strb	r3, [r5, #0]
	return hdr->ref;
   11f50:	782b      	ldrb	r3, [r5, #0]
	ull_ref_dec(ull_hdr);

	/* If disable initiated, signal the semaphore */
	if (!ull_ref_get(ull_hdr) && ull_hdr->disabled_cb) {
   11f52:	2b00      	cmp	r3, #0
   11f54:	d1c1      	bne.n	11eda <ull_done+0x12>
   11f56:	686b      	ldr	r3, [r5, #4]
   11f58:	2b00      	cmp	r3, #0
   11f5a:	d0be      	beq.n	11eda <ull_done+0x12>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
   11f5c:	68a8      	ldr	r0, [r5, #8]
   11f5e:	4798      	blx	r3
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
   11f60:	e9d7 0100 	ldrd	r0, r1, [r7]
   11f64:	aa01      	add	r2, sp, #4
   11f66:	f7fc ff7b 	bl	ee60 <memq_peek>
		if (link) {
   11f6a:	4604      	mov	r4, r0
   11f6c:	2800      	cmp	r0, #0
   11f6e:	d1bc      	bne.n	11eea <ull_done+0x22>
}
   11f70:	b002      	add	sp, #8
   11f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	LL_ASSERT(release == done);
   11f76:	4916      	ldr	r1, [pc, #88]	; (11fd0 <ull_done+0x108>)
   11f78:	4816      	ldr	r0, [pc, #88]	; (11fd4 <ull_done+0x10c>)
   11f7a:	f640 137b 	movw	r3, #2427	; 0x97b
   11f7e:	4642      	mov	r2, r8
   11f80:	f012 fb30 	bl	245e4 <printk>
   11f84:	4040      	eors	r0, r0
   11f86:	f380 8811 	msr	BASEPRI, r0
   11f8a:	f04f 0003 	mov.w	r0, #3
   11f8e:	df02      	svc	2
   11f90:	e7d5      	b.n	11f3e <ull_done+0x76>
		LL_ASSERT(0);
   11f92:	4810      	ldr	r0, [pc, #64]	; (11fd4 <ull_done+0x10c>)
   11f94:	f640 1374 	movw	r3, #2420	; 0x974
   11f98:	4642      	mov	r2, r8
   11f9a:	4651      	mov	r1, sl
   11f9c:	f012 fb22 	bl	245e4 <printk>
   11fa0:	4040      	eors	r0, r0
   11fa2:	f380 8811 	msr	BASEPRI, r0
   11fa6:	f04f 0003 	mov.w	r0, #3
   11faa:	df02      	svc	2
		break;
   11fac:	e7ac      	b.n	11f08 <ull_done+0x40>
	LL_ASSERT(ull_ref_get(ull_hdr));
   11fae:	490a      	ldr	r1, [pc, #40]	; (11fd8 <ull_done+0x110>)
   11fb0:	4808      	ldr	r0, [pc, #32]	; (11fd4 <ull_done+0x10c>)
   11fb2:	f640 138b 	movw	r3, #2443	; 0x98b
   11fb6:	4642      	mov	r2, r8
   11fb8:	f012 fb14 	bl	245e4 <printk>
   11fbc:	4040      	eors	r0, r0
   11fbe:	f380 8811 	msr	BASEPRI, r0
   11fc2:	f04f 0003 	mov.w	r0, #3
   11fc6:	df02      	svc	2
   11fc8:	e7be      	b.n	11f48 <ull_done+0x80>
   11fca:	bf00      	nop
   11fcc:	20001490 	.word	0x20001490
   11fd0:	0002b374 	.word	0x0002b374
   11fd4:	0002b0c4 	.word	0x0002b0c4
   11fd8:	0002b35c 	.word	0x0002b35c
   11fdc:	0002b320 	.word	0x0002b320
   11fe0:	0002b15c 	.word	0x0002b15c
   11fe4:	200078a4 	.word	0x200078a4

00011fe8 <disabled_cb>:
	}
}

static void disabled_cb(void *param)
{
   11fe8:	4603      	mov	r3, r0
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   11fea:	f3ef 8205 	mrs	r2, IPSR
	if (value) {
   11fee:	b91a      	cbnz	r2, 11ff8 <disabled_cb+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   11ff0:	f3ef 8214 	mrs	r2, CONTROL
	if (z_syscall_trap()) {
   11ff4:	07d2      	lsls	r2, r2, #31
   11ff6:	d402      	bmi.n	11ffe <disabled_cb+0x16>
	z_impl_k_sem_give(sem);
   11ff8:	4618      	mov	r0, r3
   11ffa:	f010 b803 	b.w	22004 <z_impl_k_sem_give>
   11ffe:	e92d 0140 	stmdb	sp!, {r6, r8}
	register uint32_t r6 __asm__("r6") = call_id;
   12002:	26a0      	movs	r6, #160	; 0xa0
	__asm__ volatile("svc %[svid]\n"
   12004:	df03      	svc	3
	k_sem_give(param);
}
   12006:	e8bd 0140 	ldmia.w	sp!, {r6, r8}
   1200a:	4770      	bx	lr

0001200c <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
   1200c:	6008      	str	r0, [r1, #0]
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   1200e:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   12012:	b91b      	cbnz	r3, 1201c <ull_ticker_status_give+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   12014:	f3ef 8314 	mrs	r3, CONTROL
	if (z_syscall_trap()) {
   12018:	07db      	lsls	r3, r3, #31
   1201a:	d402      	bmi.n	12022 <ull_ticker_status_give+0x16>
	z_impl_k_sem_give(sem);
   1201c:	4805      	ldr	r0, [pc, #20]	; (12034 <ull_ticker_status_give+0x28>)
   1201e:	f00f bff1 	b.w	22004 <z_impl_k_sem_give>
{
   12022:	e92d 0140 	stmdb	sp!, {r6, r8}
	register uint32_t ret __asm__("r0") = arg1;
   12026:	4803      	ldr	r0, [pc, #12]	; (12034 <ull_ticker_status_give+0x28>)
	register uint32_t r6 __asm__("r6") = call_id;
   12028:	26a0      	movs	r6, #160	; 0xa0
	__asm__ volatile("svc %[svid]\n"
   1202a:	df03      	svc	3
}
   1202c:	e8bd 0140 	ldmia.w	sp!, {r6, r8}
   12030:	4770      	bx	lr
   12032:	bf00      	nop
   12034:	200014a4 	.word	0x200014a4

00012038 <perform_lll_reset>:
{
   12038:	e92d 4150 	stmdb	sp!, {r4, r6, r8, lr}
   1203c:	4604      	mov	r4, r0
	err = lll_reset();
   1203e:	f007 ff49 	bl	19ed4 <lll_reset>
	LL_ASSERT(!err);
   12042:	2800      	cmp	r0, #0
   12044:	d132      	bne.n	120ac <perform_lll_reset+0x74>
	err = lll_adv_reset();
   12046:	f008 fb1f 	bl	1a688 <lll_adv_reset>
	LL_ASSERT(!err);
   1204a:	bb08      	cbnz	r0, 12090 <perform_lll_reset+0x58>
	err = lll_conn_reset();
   1204c:	f008 ffda 	bl	1b004 <lll_conn_reset>
	LL_ASSERT(!err);
   12050:	b980      	cbnz	r0, 12074 <perform_lll_reset+0x3c>
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   12052:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   12056:	b91b      	cbnz	r3, 12060 <perform_lll_reset+0x28>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   12058:	f3ef 8314 	mrs	r3, CONTROL
	if (z_syscall_trap()) {
   1205c:	07db      	lsls	r3, r3, #31
   1205e:	d404      	bmi.n	1206a <perform_lll_reset+0x32>
	z_impl_k_sem_give(sem);
   12060:	4620      	mov	r0, r4
}
   12062:	e8bd 4150 	ldmia.w	sp!, {r4, r6, r8, lr}
   12066:	f00f bfcd 	b.w	22004 <z_impl_k_sem_give>
	register uint32_t ret __asm__("r0") = arg1;
   1206a:	4620      	mov	r0, r4
	register uint32_t r6 __asm__("r6") = call_id;
   1206c:	26a0      	movs	r6, #160	; 0xa0
	__asm__ volatile("svc %[svid]\n"
   1206e:	df03      	svc	3
   12070:	e8bd 8150 	ldmia.w	sp!, {r4, r6, r8, pc}
	LL_ASSERT(!err);
   12074:	4a14      	ldr	r2, [pc, #80]	; (120c8 <perform_lll_reset+0x90>)
   12076:	4915      	ldr	r1, [pc, #84]	; (120cc <perform_lll_reset+0x94>)
   12078:	4815      	ldr	r0, [pc, #84]	; (120d0 <perform_lll_reset+0x98>)
   1207a:	f240 733a 	movw	r3, #1850	; 0x73a
   1207e:	f012 fab1 	bl	245e4 <printk>
   12082:	4040      	eors	r0, r0
   12084:	f380 8811 	msr	BASEPRI, r0
   12088:	f04f 0003 	mov.w	r0, #3
   1208c:	df02      	svc	2
   1208e:	e7e0      	b.n	12052 <perform_lll_reset+0x1a>
	LL_ASSERT(!err);
   12090:	4a0d      	ldr	r2, [pc, #52]	; (120c8 <perform_lll_reset+0x90>)
   12092:	490e      	ldr	r1, [pc, #56]	; (120cc <perform_lll_reset+0x94>)
   12094:	480e      	ldr	r0, [pc, #56]	; (120d0 <perform_lll_reset+0x98>)
   12096:	f240 732e 	movw	r3, #1838	; 0x72e
   1209a:	f012 faa3 	bl	245e4 <printk>
   1209e:	4040      	eors	r0, r0
   120a0:	f380 8811 	msr	BASEPRI, r0
   120a4:	f04f 0003 	mov.w	r0, #3
   120a8:	df02      	svc	2
   120aa:	e7cf      	b.n	1204c <perform_lll_reset+0x14>
	LL_ASSERT(!err);
   120ac:	4a06      	ldr	r2, [pc, #24]	; (120c8 <perform_lll_reset+0x90>)
   120ae:	4907      	ldr	r1, [pc, #28]	; (120cc <perform_lll_reset+0x94>)
   120b0:	4807      	ldr	r0, [pc, #28]	; (120d0 <perform_lll_reset+0x98>)
   120b2:	f240 7329 	movw	r3, #1833	; 0x729
   120b6:	f012 fa95 	bl	245e4 <printk>
   120ba:	4040      	eors	r0, r0
   120bc:	f380 8811 	msr	BASEPRI, r0
   120c0:	f04f 0003 	mov.w	r0, #3
   120c4:	df02      	svc	2
   120c6:	e7be      	b.n	12046 <perform_lll_reset+0xe>
   120c8:	0002b320 	.word	0x0002b320
   120cc:	0002b384 	.word	0x0002b384
   120d0:	0002b0c4 	.word	0x0002b0c4

000120d4 <rx_demux>:
{
   120d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   120d8:	4d73      	ldr	r5, [pc, #460]	; (122a8 <rx_demux+0x1d4>)
	k_sem_give(sem_recv);
   120da:	4f74      	ldr	r7, [pc, #464]	; (122ac <rx_demux+0x1d8>)
		LL_ASSERT(0);
   120dc:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 122c0 <rx_demux+0x1ec>
   120e0:	f8df a1e0 	ldr.w	sl, [pc, #480]	; 122c4 <rx_demux+0x1f0>
{
   120e4:	b087      	sub	sp, #28
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   120e6:	e9d5 0100 	ldrd	r0, r1, [r5]
   120ea:	aa03      	add	r2, sp, #12
   120ec:	f7fc feb8 	bl	ee60 <memq_peek>
		if (link) {
   120f0:	4606      	mov	r6, r0
   120f2:	2800      	cmp	r0, #0
   120f4:	d03d      	beq.n	12172 <rx_demux+0x9e>
			LL_ASSERT(rx);
   120f6:	9b03      	ldr	r3, [sp, #12]
   120f8:	2b00      	cmp	r3, #0
   120fa:	f000 80af 	beq.w	1225c <rx_demux+0x188>
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   120fe:	7818      	ldrb	r0, [r3, #0]
   12100:	aa04      	add	r2, sp, #16
   12102:	a902      	add	r1, sp, #8
   12104:	f006 fa48 	bl	18598 <ull_conn_ack_by_last_peek>
			if (link_tx) {
   12108:	4604      	mov	r4, r0
   1210a:	2800      	cmp	r0, #0
   1210c:	d05a      	beq.n	121c4 <rx_demux+0xf0>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
   1210e:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
   12112:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   12116:	f891 b000 	ldrb.w	fp, [r1]
   1211a:	9205      	str	r2, [sp, #20]
   1211c:	f8ad 300a 	strh.w	r3, [sp, #10]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   12120:	f10d 0814 	add.w	r8, sp, #20
   12124:	f10d 060a 	add.w	r6, sp, #10
		ull_conn_ack_dequeue();
   12128:	f006 fa4c 	bl	185c4 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   1212c:	4621      	mov	r1, r4
   1212e:	9a05      	ldr	r2, [sp, #20]
   12130:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   12134:	f006 fa8e 	bl	18654 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   12138:	4620      	mov	r0, r4
   1213a:	f006 fa07 	bl	1854c <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   1213e:	4642      	mov	r2, r8
   12140:	4631      	mov	r1, r6
   12142:	4658      	mov	r0, fp
   12144:	f006 fa28 	bl	18598 <ull_conn_ack_by_last_peek>
	} while (link);
   12148:	4604      	mov	r4, r0
   1214a:	2800      	cmp	r0, #0
   1214c:	d1ec      	bne.n	12128 <rx_demux+0x54>
	k_sem_give(sem_recv);
   1214e:	6838      	ldr	r0, [r7, #0]
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   12150:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   12154:	b91b      	cbnz	r3, 1215e <rx_demux+0x8a>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   12156:	f3ef 8314 	mrs	r3, CONTROL
	if (z_syscall_trap()) {
   1215a:	07db      	lsls	r3, r3, #31
   1215c:	d469      	bmi.n	12232 <rx_demux+0x15e>
	z_impl_k_sem_give(sem);
   1215e:	f00f ff51 	bl	22004 <z_impl_k_sem_give>
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   12162:	e9d5 0100 	ldrd	r0, r1, [r5]
   12166:	aa03      	add	r2, sp, #12
   12168:	f7fc fe7a 	bl	ee60 <memq_peek>
		if (link) {
   1216c:	4606      	mov	r6, r0
   1216e:	2800      	cmp	r0, #0
   12170:	d1c1      	bne.n	120f6 <rx_demux+0x22>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
   12172:	aa04      	add	r2, sp, #16
   12174:	a902      	add	r1, sp, #8
   12176:	f10d 0007 	add.w	r0, sp, #7
   1217a:	f006 f9f3 	bl	18564 <ull_conn_ack_peek>
			if (link) {
   1217e:	4604      	mov	r4, r0
   12180:	2800      	cmp	r0, #0
   12182:	d05e      	beq.n	12242 <rx_demux+0x16e>
				rx_demux_conn_tx_ack(ack_last, handle,
   12184:	9a04      	ldr	r2, [sp, #16]
   12186:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1218a:	f89d b007 	ldrb.w	fp, [sp, #7]
   1218e:	9205      	str	r2, [sp, #20]
   12190:	f8ad 300a 	strh.w	r3, [sp, #10]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   12194:	f10d 0814 	add.w	r8, sp, #20
   12198:	f10d 060a 	add.w	r6, sp, #10
		ull_conn_ack_dequeue();
   1219c:	f006 fa12 	bl	185c4 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   121a0:	4621      	mov	r1, r4
   121a2:	9a05      	ldr	r2, [sp, #20]
   121a4:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   121a8:	f006 fa54 	bl	18654 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   121ac:	4620      	mov	r0, r4
   121ae:	f006 f9cd 	bl	1854c <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   121b2:	4642      	mov	r2, r8
   121b4:	4631      	mov	r1, r6
   121b6:	4658      	mov	r0, fp
   121b8:	f006 f9ee 	bl	18598 <ull_conn_ack_by_last_peek>
	} while (link);
   121bc:	4604      	mov	r4, r0
   121be:	2800      	cmp	r0, #0
   121c0:	d1ec      	bne.n	1219c <rx_demux+0xc8>
   121c2:	e7c4      	b.n	1214e <rx_demux+0x7a>
				nack = rx_demux_rx(link, rx);
   121c4:	9b03      	ldr	r3, [sp, #12]
   121c6:	9305      	str	r3, [sp, #20]
	switch (rx->type) {
   121c8:	791b      	ldrb	r3, [r3, #4]
   121ca:	3b01      	subs	r3, #1
   121cc:	2b14      	cmp	r3, #20
   121ce:	d80c      	bhi.n	121ea <rx_demux+0x116>
   121d0:	e8df f003 	tbb	[pc, r3]
   121d4:	0b320b19 	.word	0x0b320b19
   121d8:	0b0b0b0b 	.word	0x0b0b0b0b
   121dc:	0b0b0b0b 	.word	0x0b0b0b0b
   121e0:	0b0b0b0b 	.word	0x0b0b0b0b
   121e4:	3a0b0b0b 	.word	0x3a0b0b0b
   121e8:	19          	.byte	0x19
   121e9:	00          	.byte	0x00
		LL_ASSERT(0);
   121ea:	4831      	ldr	r0, [pc, #196]	; (122b0 <rx_demux+0x1dc>)
   121ec:	f640 132f 	movw	r3, #2351	; 0x92f
   121f0:	464a      	mov	r2, r9
   121f2:	4651      	mov	r1, sl
   121f4:	f012 f9f6 	bl	245e4 <printk>
   121f8:	4040      	eors	r0, r0
   121fa:	f380 8811 	msr	BASEPRI, r0
   121fe:	f04f 0003 	mov.w	r0, #3
   12202:	df02      	svc	2
			if (nack) {
   12204:	e76f      	b.n	120e6 <rx_demux+0x12>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   12206:	4928      	ldr	r1, [pc, #160]	; (122a8 <rx_demux+0x1d4>)
   12208:	6868      	ldr	r0, [r5, #4]
   1220a:	2200      	movs	r2, #0
   1220c:	f7fc fe30 	bl	ee70 <memq_dequeue>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   12210:	4b28      	ldr	r3, [pc, #160]	; (122b4 <rx_demux+0x1e0>)
		ll_rx_put(link, rx);
   12212:	9905      	ldr	r1, [sp, #20]
	rx_hdr->ack_last = mfifo_tx_ack.l;
   12214:	78db      	ldrb	r3, [r3, #3]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   12216:	4a28      	ldr	r2, [pc, #160]	; (122b8 <rx_demux+0x1e4>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   12218:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   1221a:	4630      	mov	r0, r6
   1221c:	f7fc fe18 	bl	ee50 <memq_enqueue>
	k_sem_give(sem_recv);
   12220:	6838      	ldr	r0, [r7, #0]
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   12222:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   12226:	2b00      	cmp	r3, #0
   12228:	d199      	bne.n	1215e <rx_demux+0x8a>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   1222a:	f3ef 8314 	mrs	r3, CONTROL
	if (z_syscall_trap()) {
   1222e:	07db      	lsls	r3, r3, #31
   12230:	d595      	bpl.n	1215e <rx_demux+0x8a>
	register uint32_t r6 __asm__("r6") = call_id;
   12232:	26a0      	movs	r6, #160	; 0xa0
	__asm__ volatile("svc %[svid]\n"
   12234:	df03      	svc	3
		return;
   12236:	e756      	b.n	120e6 <rx_demux+0x12>
		nack = ull_conn_rx(link, (void *)&rx);
   12238:	a905      	add	r1, sp, #20
   1223a:	4630      	mov	r0, r6
   1223c:	f002 fea8 	bl	14f90 <ull_conn_rx>
		if (nack) {
   12240:	b1d8      	cbz	r0, 1227a <rx_demux+0x1a6>
}
   12242:	b007      	add	sp, #28
   12244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   12248:	4917      	ldr	r1, [pc, #92]	; (122a8 <rx_demux+0x1d4>)
   1224a:	6868      	ldr	r0, [r5, #4]
   1224c:	2200      	movs	r2, #0
   1224e:	f7fc fe0f 	bl	ee70 <memq_dequeue>
		ull_conn_setup(link, rx);
   12252:	9905      	ldr	r1, [sp, #20]
   12254:	4630      	mov	r0, r6
   12256:	f002 fe7b 	bl	14f50 <ull_conn_setup>
			if (nack) {
   1225a:	e744      	b.n	120e6 <rx_demux+0x12>
			LL_ASSERT(rx);
   1225c:	4917      	ldr	r1, [pc, #92]	; (122bc <rx_demux+0x1e8>)
   1225e:	4814      	ldr	r0, [pc, #80]	; (122b0 <rx_demux+0x1dc>)
   12260:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
   12264:	464a      	mov	r2, r9
   12266:	f012 f9bd 	bl	245e4 <printk>
   1226a:	4040      	eors	r0, r0
   1226c:	f380 8811 	msr	BASEPRI, r0
   12270:	f04f 0003 	mov.w	r0, #3
   12274:	df02      	svc	2
   12276:	9b03      	ldr	r3, [sp, #12]
   12278:	e741      	b.n	120fe <rx_demux+0x2a>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   1227a:	490b      	ldr	r1, [pc, #44]	; (122a8 <rx_demux+0x1d4>)
   1227c:	4602      	mov	r2, r0
   1227e:	6868      	ldr	r0, [r5, #4]
   12280:	f7fc fdf6 	bl	ee70 <memq_dequeue>
		if (rx) {
   12284:	9905      	ldr	r1, [sp, #20]
   12286:	2900      	cmp	r1, #0
   12288:	f43f af2d 	beq.w	120e6 <rx_demux+0x12>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   1228c:	4b09      	ldr	r3, [pc, #36]	; (122b4 <rx_demux+0x1e0>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   1228e:	4a0a      	ldr	r2, [pc, #40]	; (122b8 <rx_demux+0x1e4>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   12290:	78db      	ldrb	r3, [r3, #3]
   12292:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   12294:	4630      	mov	r0, r6
   12296:	f7fc fddb 	bl	ee50 <memq_enqueue>
	k_sem_give(sem_recv);
   1229a:	6838      	ldr	r0, [r7, #0]
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   1229c:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   122a0:	2b00      	cmp	r3, #0
   122a2:	f43f af58 	beq.w	12156 <rx_demux+0x82>
   122a6:	e75a      	b.n	1215e <rx_demux+0x8a>
   122a8:	20001498 	.word	0x20001498
   122ac:	200014a0 	.word	0x200014a0
   122b0:	0002b0c4 	.word	0x0002b0c4
   122b4:	200079e8 	.word	0x200079e8
   122b8:	2000148c 	.word	0x2000148c
   122bc:	0002b38c 	.word	0x0002b38c
   122c0:	0002b320 	.word	0x0002b320
   122c4:	0002b15c 	.word	0x0002b15c

000122c8 <ll_init>:
{
   122c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sem_recv = sem_rx;
   122cc:	4bab      	ldr	r3, [pc, #684]	; (1257c <ll_init+0x2b4>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   122ce:	4cac      	ldr	r4, [pc, #688]	; (12580 <ll_init+0x2b8>)
	sem_recv = sem_rx;
   122d0:	6018      	str	r0, [r3, #0]
{
   122d2:	b086      	sub	sp, #24
	cntr_init();
   122d4:	f009 fb16 	bl	1b904 <cntr_init>
	mayfly_init();
   122d8:	f7fc fdda 	bl	ee90 <mayfly_init>
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   122dc:	4aa9      	ldr	r2, [pc, #676]	; (12584 <ll_init+0x2bc>)
   122de:	48aa      	ldr	r0, [pc, #680]	; (12588 <ll_init+0x2c0>)
   122e0:	9205      	str	r2, [sp, #20]
   122e2:	9004      	str	r0, [sp, #16]
   122e4:	4aa9      	ldr	r2, [pc, #676]	; (1258c <ll_init+0x2c4>)
   122e6:	48aa      	ldr	r0, [pc, #680]	; (12590 <ll_init+0x2c8>)
   122e8:	9203      	str	r2, [sp, #12]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   122ea:	2304      	movs	r3, #4
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   122ec:	220c      	movs	r2, #12
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   122ee:	2502      	movs	r5, #2
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   122f0:	e9cd 2001 	strd	r2, r0, [sp, #4]
   122f4:	9400      	str	r4, [sp, #0]
   122f6:	4aa7      	ldr	r2, [pc, #668]	; (12594 <ll_init+0x2cc>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   122f8:	7023      	strb	r3, [r4, #0]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   122fa:	4619      	mov	r1, r3
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   122fc:	7223      	strb	r3, [r4, #8]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   122fe:	2000      	movs	r0, #0
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   12300:	7425      	strb	r5, [r4, #16]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_THREAD_OPS;
   12302:	7625      	strb	r5, [r4, #24]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   12304:	f7fd ffdc 	bl	102c0 <ticker_init>
	LL_ASSERT(!err);
   12308:	2800      	cmp	r0, #0
   1230a:	f040 80f9 	bne.w	12500 <ll_init+0x238>
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   1230e:	f3ef 8105 	mrs	r1, IPSR
	if (value) {
   12312:	b919      	cbnz	r1, 1231c <ll_init+0x54>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   12314:	f3ef 8314 	mrs	r3, CONTROL
	if (z_syscall_trap()) {
   12318:	07db      	lsls	r3, r3, #31
   1231a:	d40c      	bmi.n	12336 <ll_init+0x6e>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1231c:	2201      	movs	r2, #1
   1231e:	2100      	movs	r1, #0
   12320:	489d      	ldr	r0, [pc, #628]	; (12598 <ll_init+0x2d0>)
   12322:	f017 fb94 	bl	29a4e <z_impl_k_sem_init>
	err = lll_init();
   12326:	f007 fd5d 	bl	19de4 <lll_init>
	if (err) {
   1232a:	4604      	mov	r4, r0
   1232c:	b160      	cbz	r0, 12348 <ll_init+0x80>
}
   1232e:	4620      	mov	r0, r4
   12330:	b006      	add	sp, #24
   12332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	register uint32_t ret __asm__("r0") = arg1;
   12336:	4898      	ldr	r0, [pc, #608]	; (12598 <ll_init+0x2d0>)
	register uint32_t r2 __asm__("r2") = arg3;
   12338:	2201      	movs	r2, #1
	register uint32_t r6 __asm__("r6") = call_id;
   1233a:	26a1      	movs	r6, #161	; 0xa1
	__asm__ volatile("svc %[svid]\n"
   1233c:	df03      	svc	3
	err = lll_init();
   1233e:	f007 fd51 	bl	19de4 <lll_init>
	if (err) {
   12342:	4604      	mov	r4, r0
   12344:	2800      	cmp	r0, #0
   12346:	d1f2      	bne.n	1232e <ll_init+0x66>
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   12348:	4b94      	ldr	r3, [pc, #592]	; (1259c <ll_init+0x2d4>)
		link = mem_acquire(&mem_link_done.free);
   1234a:	f8df 8258 	ldr.w	r8, [pc, #600]	; 125a4 <ll_init+0x2dc>
   1234e:	4d94      	ldr	r5, [pc, #592]	; (125a0 <ll_init+0x2d8>)
		rx = mem_acquire(&mem_done.free);
   12350:	4f92      	ldr	r7, [pc, #584]	; (1259c <ll_init+0x2d4>)
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   12352:	1d18      	adds	r0, r3, #4
   12354:	2203      	movs	r2, #3
   12356:	2134      	movs	r1, #52	; 0x34
   12358:	f7fc fcf8 	bl	ed4c <mem_init>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX +
   1235c:	4643      	mov	r3, r8
   1235e:	2204      	movs	r2, #4
   12360:	1898      	adds	r0, r3, r2
   12362:	2108      	movs	r1, #8
   12364:	f7fc fcf2 	bl	ed4c <mem_init>
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   12368:	78ec      	ldrb	r4, [r5, #3]
	if (last == count) {
   1236a:	786a      	ldrb	r2, [r5, #1]
   1236c:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   1236e:	3401      	adds	r4, #1
   12370:	b2e4      	uxtb	r4, r4
		last = 0U;
   12372:	42a2      	cmp	r2, r4
   12374:	bf08      	it	eq
   12376:	2400      	moveq	r4, #0
	if (last == first) {
   12378:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_done.free);
   1237a:	4640      	mov	r0, r8
   1237c:	d013      	beq.n	123a6 <ll_init+0xde>
   1237e:	f7fc fd05 	bl	ed8c <mem_acquire>
   12382:	4606      	mov	r6, r0
		rx = mem_acquire(&mem_done.free);
   12384:	4638      	mov	r0, r7
		if (!link) {
   12386:	b176      	cbz	r6, 123a6 <ll_init+0xde>
		rx = mem_acquire(&mem_done.free);
   12388:	f7fc fd00 	bl	ed8c <mem_acquire>
		if (!rx) {
   1238c:	b138      	cbz	r0, 1239e <ll_init+0xd6>
		rx->link = link;
   1238e:	6006      	str	r6, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   12390:	78ea      	ldrb	r2, [r5, #3]
   12392:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   12394:	fb02 5303 	mla	r3, r2, r3, r5
   12398:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
   1239a:	70ec      	strb	r4, [r5, #3]
}
   1239c:	e7e5      	b.n	1236a <ll_init+0xa2>
			mem_release(link, &mem_link_done.free);
   1239e:	4981      	ldr	r1, [pc, #516]	; (125a4 <ll_init+0x2dc>)
   123a0:	4630      	mov	r0, r6
   123a2:	f7fc fd09 	bl	edb8 <mem_release>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   123a6:	4b80      	ldr	r3, [pc, #512]	; (125a8 <ll_init+0x2e0>)
   123a8:	2209      	movs	r2, #9
   123aa:	1d18      	adds	r0, r3, #4
   123ac:	2148      	movs	r1, #72	; 0x48
   123ae:	f7fc fccd 	bl	ed4c <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   123b2:	4b7e      	ldr	r3, [pc, #504]	; (125ac <ll_init+0x2e4>)
   123b4:	220b      	movs	r2, #11
   123b6:	1d18      	adds	r0, r3, #4
   123b8:	2108      	movs	r1, #8
   123ba:	f7fc fcc7 	bl	ed4c <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   123be:	487b      	ldr	r0, [pc, #492]	; (125ac <ll_init+0x2e4>)
   123c0:	f7fc fce4 	bl	ed8c <mem_acquire>
	LL_ASSERT(link);
   123c4:	4604      	mov	r4, r0
   123c6:	2800      	cmp	r0, #0
   123c8:	f000 80c4 	beq.w	12554 <ll_init+0x28c>
	MEMQ_INIT(ull_rx, link);
   123cc:	4a78      	ldr	r2, [pc, #480]	; (125b0 <ll_init+0x2e8>)
   123ce:	4620      	mov	r0, r4
   123d0:	1f11      	subs	r1, r2, #4
   123d2:	f7fc fd2f 	bl	ee34 <memq_init>
	link = mem_acquire(&mem_link_done.free);
   123d6:	4873      	ldr	r0, [pc, #460]	; (125a4 <ll_init+0x2dc>)
   123d8:	f7fc fcd8 	bl	ed8c <mem_acquire>
	LL_ASSERT(link);
   123dc:	4604      	mov	r4, r0
   123de:	2800      	cmp	r0, #0
   123e0:	f000 80aa 	beq.w	12538 <ll_init+0x270>
	MEMQ_INIT(ull_done, link);
   123e4:	4a73      	ldr	r2, [pc, #460]	; (125b4 <ll_init+0x2ec>)
   123e6:	4620      	mov	r0, r4
   123e8:	1f11      	subs	r1, r2, #4
   123ea:	f7fc fd23 	bl	ee34 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   123ee:	486f      	ldr	r0, [pc, #444]	; (125ac <ll_init+0x2e4>)
   123f0:	f7fc fccc 	bl	ed8c <mem_acquire>
	LL_ASSERT(link);
   123f4:	4604      	mov	r4, r0
   123f6:	2800      	cmp	r0, #0
   123f8:	f000 8090 	beq.w	1251c <ll_init+0x254>
	MEMQ_INIT(ll_rx, link);
   123fc:	4a6e      	ldr	r2, [pc, #440]	; (125b8 <ll_init+0x2f0>)
	mem_link_rx.quota_pdu = RX_CNT;
   123fe:	4f6f      	ldr	r7, [pc, #444]	; (125bc <ll_init+0x2f4>)
   12400:	4d6f      	ldr	r5, [pc, #444]	; (125c0 <ll_init+0x2f8>)
		rx = mem_acquire(&mem_pdu_rx.free);
   12402:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 125a8 <ll_init+0x2e0>
	MEMQ_INIT(ll_rx, link);
   12406:	4620      	mov	r0, r4
   12408:	1f11      	subs	r1, r2, #4
	mem_link_rx.quota_pdu = RX_CNT;
   1240a:	46b8      	mov	r8, r7
	MEMQ_INIT(ll_rx, link);
   1240c:	f7fc fd12 	bl	ee34 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   12410:	2307      	movs	r3, #7
   12412:	f808 3b04 	strb.w	r3, [r8], #4
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   12416:	78ec      	ldrb	r4, [r5, #3]
   12418:	2606      	movs	r6, #6
	if (last == count) {
   1241a:	786a      	ldrb	r2, [r5, #1]
   1241c:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   1241e:	3401      	adds	r4, #1
   12420:	b2e4      	uxtb	r4, r4
		last = 0U;
   12422:	42a2      	cmp	r2, r4
   12424:	bf08      	it	eq
   12426:	2400      	moveq	r4, #0
	if (last == first) {
   12428:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   1242a:	4640      	mov	r0, r8
   1242c:	d064      	beq.n	124f8 <ll_init+0x230>
   1242e:	f7fc fcad 	bl	ed8c <mem_acquire>
   12432:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   12434:	4648      	mov	r0, r9
		if (!link) {
   12436:	f1ba 0f00 	cmp.w	sl, #0
   1243a:	d041      	beq.n	124c0 <ll_init+0x1f8>
		rx = mem_acquire(&mem_pdu_rx.free);
   1243c:	f7fc fca6 	bl	ed8c <mem_acquire>
		if (!rx) {
   12440:	2800      	cmp	r0, #0
   12442:	f000 8095 	beq.w	12570 <ll_init+0x2a8>
		rx->link = link;
   12446:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1244a:	78ea      	ldrb	r2, [r5, #3]
   1244c:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1244e:	fb02 5303 	mla	r3, r2, r3, r5
   12452:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   12454:	783b      	ldrb	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
   12456:	70ec      	strb	r4, [r5, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   12458:	3e01      	subs	r6, #1
	mem_link_rx.quota_pdu += delta;
   1245a:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1245c:	b2f6      	uxtb	r6, r6
	mem_link_rx.quota_pdu += delta;
   1245e:	b2db      	uxtb	r3, r3
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   12460:	2eff      	cmp	r6, #255	; 0xff
	mem_link_rx.quota_pdu += delta;
   12462:	703b      	strb	r3, [r7, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   12464:	d1d9      	bne.n	1241a <ll_init+0x152>
	while (mem_link_rx.quota_pdu &&
   12466:	b35b      	cbz	r3, 124c0 <ll_init+0x1f8>
   12468:	4d56      	ldr	r5, [pc, #344]	; (125c4 <ll_init+0x2fc>)
		link = mem_acquire(&mem_link_rx.free);
   1246a:	4e50      	ldr	r6, [pc, #320]	; (125ac <ll_init+0x2e4>)
   1246c:	78ec      	ldrb	r4, [r5, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   1246e:	f8df 8138 	ldr.w	r8, [pc, #312]	; 125a8 <ll_init+0x2e0>
		link->mem = NULL;
   12472:	f04f 0900 	mov.w	r9, #0
	if (last == count) {
   12476:	786a      	ldrb	r2, [r5, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   12478:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   1247a:	3401      	adds	r4, #1
   1247c:	b2e4      	uxtb	r4, r4
		last = 0U;
   1247e:	42a2      	cmp	r2, r4
   12480:	bf08      	it	eq
   12482:	2400      	moveq	r4, #0
	if (last == first) {
   12484:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   12486:	4630      	mov	r0, r6
   12488:	d01a      	beq.n	124c0 <ll_init+0x1f8>
   1248a:	f7fc fc7f 	bl	ed8c <mem_acquire>
   1248e:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   12490:	4640      	mov	r0, r8
		if (!link) {
   12492:	f1ba 0f00 	cmp.w	sl, #0
   12496:	d013      	beq.n	124c0 <ll_init+0x1f8>
		rx = mem_acquire(&mem_pdu_rx.free);
   12498:	f7fc fc78 	bl	ed8c <mem_acquire>
		if (!rx) {
   1249c:	2800      	cmp	r0, #0
   1249e:	d067      	beq.n	12570 <ll_init+0x2a8>
		link->mem = NULL;
   124a0:	f8ca 9004 	str.w	r9, [sl, #4]
		rx->link = link;
   124a4:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   124a8:	78ea      	ldrb	r2, [r5, #3]
   124aa:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   124ac:	fb02 5303 	mla	r3, r2, r3, r5
   124b0:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   124b2:	783b      	ldrb	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
   124b4:	70ec      	strb	r4, [r5, #3]
   124b6:	3b01      	subs	r3, #1
   124b8:	b2db      	uxtb	r3, r3
   124ba:	703b      	strb	r3, [r7, #0]
	while (mem_link_rx.quota_pdu &&
   124bc:	2b00      	cmp	r3, #0
   124be:	d1da      	bne.n	12476 <ll_init+0x1ae>
	err = lll_adv_init();
   124c0:	f008 f8ba 	bl	1a638 <lll_adv_init>
	if (err) {
   124c4:	4604      	mov	r4, r0
   124c6:	2800      	cmp	r0, #0
   124c8:	f47f af31 	bne.w	1232e <ll_init+0x66>
	err = ull_adv_init();
   124cc:	f001 fb08 	bl	13ae0 <ull_adv_init>
	if (err) {
   124d0:	4604      	mov	r4, r0
   124d2:	2800      	cmp	r0, #0
   124d4:	f47f af2b 	bne.w	1232e <ll_init+0x66>
	err = lll_conn_init();
   124d8:	f008 fd8a 	bl	1aff0 <lll_conn_init>
	if (err) {
   124dc:	4604      	mov	r4, r0
   124de:	2800      	cmp	r0, #0
   124e0:	f47f af25 	bne.w	1232e <ll_init+0x66>
	err = ull_conn_init();
   124e4:	f002 fce0 	bl	14ea8 <ull_conn_init>
	if (err) {
   124e8:	4604      	mov	r4, r0
   124ea:	2800      	cmp	r0, #0
   124ec:	f47f af1f 	bne.w	1232e <ll_init+0x66>
		ull_filter_reset(true);
   124f0:	2001      	movs	r0, #1
   124f2:	f007 f9c1 	bl	19878 <ull_filter_reset>
	return  0;
   124f6:	e71a      	b.n	1232e <ll_init+0x66>
	if (!max) {
   124f8:	2e00      	cmp	r6, #0
   124fa:	d0e1      	beq.n	124c0 <ll_init+0x1f8>
   124fc:	783b      	ldrb	r3, [r7, #0]
   124fe:	e7b2      	b.n	12466 <ll_init+0x19e>
	LL_ASSERT(!err);
   12500:	4a31      	ldr	r2, [pc, #196]	; (125c8 <ll_init+0x300>)
   12502:	4932      	ldr	r1, [pc, #200]	; (125cc <ll_init+0x304>)
   12504:	4832      	ldr	r0, [pc, #200]	; (125d0 <ll_init+0x308>)
   12506:	f240 13a9 	movw	r3, #425	; 0x1a9
   1250a:	f012 f86b 	bl	245e4 <printk>
   1250e:	4040      	eors	r0, r0
   12510:	f380 8811 	msr	BASEPRI, r0
   12514:	f04f 0003 	mov.w	r0, #3
   12518:	df02      	svc	2
   1251a:	e6f8      	b.n	1230e <ll_init+0x46>
	LL_ASSERT(link);
   1251c:	4a2a      	ldr	r2, [pc, #168]	; (125c8 <ll_init+0x300>)
   1251e:	492d      	ldr	r1, [pc, #180]	; (125d4 <ll_init+0x30c>)
   12520:	482b      	ldr	r0, [pc, #172]	; (125d0 <ll_init+0x308>)
   12522:	f240 7317 	movw	r3, #1815	; 0x717
   12526:	f012 f85d 	bl	245e4 <printk>
   1252a:	4040      	eors	r0, r0
   1252c:	f380 8811 	msr	BASEPRI, r0
   12530:	f04f 0003 	mov.w	r0, #3
   12534:	df02      	svc	2
   12536:	e761      	b.n	123fc <ll_init+0x134>
	LL_ASSERT(link);
   12538:	4a23      	ldr	r2, [pc, #140]	; (125c8 <ll_init+0x300>)
   1253a:	4926      	ldr	r1, [pc, #152]	; (125d4 <ll_init+0x30c>)
   1253c:	4824      	ldr	r0, [pc, #144]	; (125d0 <ll_init+0x308>)
   1253e:	f240 730f 	movw	r3, #1807	; 0x70f
   12542:	f012 f84f 	bl	245e4 <printk>
   12546:	4040      	eors	r0, r0
   12548:	f380 8811 	msr	BASEPRI, r0
   1254c:	f04f 0003 	mov.w	r0, #3
   12550:	df02      	svc	2
   12552:	e747      	b.n	123e4 <ll_init+0x11c>
	LL_ASSERT(link);
   12554:	4a1c      	ldr	r2, [pc, #112]	; (125c8 <ll_init+0x300>)
   12556:	491f      	ldr	r1, [pc, #124]	; (125d4 <ll_init+0x30c>)
   12558:	481d      	ldr	r0, [pc, #116]	; (125d0 <ll_init+0x308>)
   1255a:	f240 7307 	movw	r3, #1799	; 0x707
   1255e:	f012 f841 	bl	245e4 <printk>
   12562:	4040      	eors	r0, r0
   12564:	f380 8811 	msr	BASEPRI, r0
   12568:	f04f 0003 	mov.w	r0, #3
   1256c:	df02      	svc	2
   1256e:	e72d      	b.n	123cc <ll_init+0x104>
			mem_release(link, &mem_link_rx.free);
   12570:	490e      	ldr	r1, [pc, #56]	; (125ac <ll_init+0x2e4>)
   12572:	4650      	mov	r0, sl
   12574:	f7fc fc20 	bl	edb8 <mem_release>
			return;
   12578:	e7a2      	b.n	124c0 <ll_init+0x1f8>
   1257a:	bf00      	nop
   1257c:	200014a0 	.word	0x200014a0
   12580:	200017ec 	.word	0x200017ec
   12584:	0001c4fd 	.word	0x0001c4fd
   12588:	0001c41d 	.word	0x0001c41d
   1258c:	0001c3b9 	.word	0x0001c3b9
   12590:	2000157c 	.word	0x2000157c
   12594:	200014bc 	.word	0x200014bc
   12598:	200014a4 	.word	0x200014a4
   1259c:	200010d8 	.word	0x200010d8
   125a0:	200078a4 	.word	0x200078a4
   125a4:	20001178 	.word	0x20001178
   125a8:	200011fc 	.word	0x200011fc
   125ac:	200011a0 	.word	0x200011a0
   125b0:	2000149c 	.word	0x2000149c
   125b4:	20001494 	.word	0x20001494
   125b8:	2000148c 	.word	0x2000148c
   125bc:	2000119c 	.word	0x2000119c
   125c0:	200078cc 	.word	0x200078cc
   125c4:	200078b8 	.word	0x200078b8
   125c8:	0002b320 	.word	0x0002b320
   125cc:	0002b384 	.word	0x0002b384
   125d0:	0002b0c4 	.word	0x0002b0c4
   125d4:	0002b65c 	.word	0x0002b65c

000125d8 <ll_reset>:
{
   125d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125dc:	b087      	sub	sp, #28
	err = ull_adv_reset();
   125de:	f001 fa81 	bl	13ae4 <ull_adv_reset>
	LL_ASSERT(!err);
   125e2:	2800      	cmp	r0, #0
   125e4:	f040 814a 	bne.w	1287c <ll_reset+0x2a4>
	err = ull_conn_reset();
   125e8:	f002 fc60 	bl	14eac <ull_conn_reset>
	LL_ASSERT(!err);
   125ec:	2800      	cmp	r0, #0
   125ee:	f040 8137 	bne.w	12860 <ll_reset+0x288>
	MFIFO_INIT(tx_ack);
   125f2:	4bb0      	ldr	r3, [pc, #704]	; (128b4 <ll_reset+0x2dc>)
	MFIFO_INIT(done);
   125f4:	4fb0      	ldr	r7, [pc, #704]	; (128b8 <ll_reset+0x2e0>)
	MFIFO_INIT(pdu_rx_free);
   125f6:	4db1      	ldr	r5, [pc, #708]	; (128bc <ll_reset+0x2e4>)
	MFIFO_INIT(ll_pdu_rx_free);
   125f8:	f8df 9300 	ldr.w	r9, [pc, #768]	; 128fc <ll_reset+0x324>
	MFIFO_INIT(tx_ack);
   125fc:	2400      	movs	r4, #0
   125fe:	805c      	strh	r4, [r3, #2]
		ull_filter_reset(false);
   12600:	4620      	mov	r0, r4
   12602:	f007 f939 	bl	19878 <ull_filter_reset>
	MFIFO_INIT(prep);
   12606:	4bae      	ldr	r3, [pc, #696]	; (128c0 <ll_reset+0x2e8>)
	MFIFO_INIT(done);
   12608:	807c      	strh	r4, [r7, #2]
	MFIFO_INIT(prep);
   1260a:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(pdu_rx_free);
   1260c:	806c      	strh	r4, [r5, #2]
	MFIFO_INIT(ll_pdu_rx_free);
   1260e:	f8a9 4002 	strh.w	r4, [r9, #2]
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   12612:	f3ef 8105 	mrs	r1, IPSR
	if (value) {
   12616:	b921      	cbnz	r1, 12622 <ll_reset+0x4a>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   12618:	f3ef 8314 	mrs	r3, CONTROL
	if (z_syscall_trap()) {
   1261c:	07da      	lsls	r2, r3, #31
   1261e:	f100 810b 	bmi.w	12838 <ll_reset+0x260>
	return z_impl_k_sem_init(sem, initial_count, limit);
   12622:	466c      	mov	r4, sp
   12624:	4620      	mov	r0, r4
   12626:	2201      	movs	r2, #1
   12628:	2100      	movs	r1, #0
   1262a:	f017 fa10 	bl	29a4e <z_impl_k_sem_init>
		mfy.param = &sem;
   1262e:	4ba5      	ldr	r3, [pc, #660]	; (128c4 <ll_reset+0x2ec>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   12630:	2200      	movs	r2, #0
   12632:	4611      	mov	r1, r2
   12634:	2003      	movs	r0, #3
		mfy.param = &sem;
   12636:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   12638:	f7fc fc7e 	bl	ef38 <mayfly_enqueue>
		LL_ASSERT(!retval);
   1263c:	2800      	cmp	r0, #0
   1263e:	f040 8101 	bne.w	12844 <ll_reset+0x26c>
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   12642:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   12646:	b923      	cbnz	r3, 12652 <ll_reset+0x7a>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   12648:	f3ef 8314 	mrs	r3, CONTROL
	if (z_syscall_trap()) {
   1264c:	07db      	lsls	r3, r3, #31
   1264e:	f100 80da 	bmi.w	12806 <ll_reset+0x22e>
	return z_impl_k_sem_take(sem, timeout);
   12652:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12656:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1265a:	4620      	mov	r0, r4
   1265c:	f00f fd34 	bl	220c8 <z_impl_k_sem_take>
	err = ull_adv_reset_finalize();
   12660:	f001 fae8 	bl	13c34 <ull_adv_reset_finalize>
	LL_ASSERT(!err);
   12664:	2800      	cmp	r0, #0
   12666:	f040 80d9 	bne.w	1281c <ll_reset+0x244>
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   1266a:	4b97      	ldr	r3, [pc, #604]	; (128c8 <ll_reset+0x2f0>)
		link = mem_acquire(&mem_link_done.free);
   1266c:	f8df 825c 	ldr.w	r8, [pc, #604]	; 128cc <ll_reset+0x2f4>
		rx = mem_acquire(&mem_done.free);
   12670:	4e95      	ldr	r6, [pc, #596]	; (128c8 <ll_reset+0x2f0>)
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   12672:	1d18      	adds	r0, r3, #4
   12674:	2203      	movs	r2, #3
   12676:	2134      	movs	r1, #52	; 0x34
   12678:	f7fc fb68 	bl	ed4c <mem_init>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX +
   1267c:	4643      	mov	r3, r8
   1267e:	2204      	movs	r2, #4
   12680:	1898      	adds	r0, r3, r2
   12682:	2108      	movs	r1, #8
   12684:	f7fc fb62 	bl	ed4c <mem_init>
static inline void done_alloc(void)
   12688:	78fc      	ldrb	r4, [r7, #3]
	if (last == count) {
   1268a:	787a      	ldrb	r2, [r7, #1]
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   1268c:	78bb      	ldrb	r3, [r7, #2]
	last = last + 1;
   1268e:	3401      	adds	r4, #1
   12690:	b2e4      	uxtb	r4, r4
		last = 0U;
   12692:	42a2      	cmp	r2, r4
   12694:	bf08      	it	eq
   12696:	2400      	moveq	r4, #0
	if (last == first) {
   12698:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_done.free);
   1269a:	4640      	mov	r0, r8
   1269c:	d016      	beq.n	126cc <ll_reset+0xf4>
   1269e:	f7fc fb75 	bl	ed8c <mem_acquire>
   126a2:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_done.free);
   126a4:	4630      	mov	r0, r6
		if (!link) {
   126a6:	f1ba 0f00 	cmp.w	sl, #0
   126aa:	d00f      	beq.n	126cc <ll_reset+0xf4>
		rx = mem_acquire(&mem_done.free);
   126ac:	f7fc fb6e 	bl	ed8c <mem_acquire>
		if (!rx) {
   126b0:	b140      	cbz	r0, 126c4 <ll_reset+0xec>
		rx->link = link;
   126b2:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   126b6:	78fa      	ldrb	r2, [r7, #3]
   126b8:	783b      	ldrb	r3, [r7, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   126ba:	fb02 7303 	mla	r3, r2, r3, r7
   126be:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
   126c0:	70fc      	strb	r4, [r7, #3]
}
   126c2:	e7e2      	b.n	1268a <ll_reset+0xb2>
			mem_release(link, &mem_link_done.free);
   126c4:	4981      	ldr	r1, [pc, #516]	; (128cc <ll_reset+0x2f4>)
   126c6:	4650      	mov	r0, sl
   126c8:	f7fc fb76 	bl	edb8 <mem_release>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   126cc:	4b80      	ldr	r3, [pc, #512]	; (128d0 <ll_reset+0x2f8>)
   126ce:	2209      	movs	r2, #9
   126d0:	1d18      	adds	r0, r3, #4
   126d2:	2148      	movs	r1, #72	; 0x48
   126d4:	f7fc fb3a 	bl	ed4c <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   126d8:	4b7e      	ldr	r3, [pc, #504]	; (128d4 <ll_reset+0x2fc>)
   126da:	220b      	movs	r2, #11
   126dc:	1d18      	adds	r0, r3, #4
   126de:	2108      	movs	r1, #8
   126e0:	f7fc fb34 	bl	ed4c <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   126e4:	487b      	ldr	r0, [pc, #492]	; (128d4 <ll_reset+0x2fc>)
   126e6:	f7fc fb51 	bl	ed8c <mem_acquire>
	LL_ASSERT(link);
   126ea:	4604      	mov	r4, r0
   126ec:	2800      	cmp	r0, #0
   126ee:	f000 80d3 	beq.w	12898 <ll_reset+0x2c0>
	MEMQ_INIT(ull_rx, link);
   126f2:	4a79      	ldr	r2, [pc, #484]	; (128d8 <ll_reset+0x300>)
   126f4:	4620      	mov	r0, r4
   126f6:	1f11      	subs	r1, r2, #4
   126f8:	f7fc fb9c 	bl	ee34 <memq_init>
	link = mem_acquire(&mem_link_done.free);
   126fc:	4873      	ldr	r0, [pc, #460]	; (128cc <ll_reset+0x2f4>)
   126fe:	f7fc fb45 	bl	ed8c <mem_acquire>
	LL_ASSERT(link);
   12702:	4604      	mov	r4, r0
   12704:	2800      	cmp	r0, #0
   12706:	f000 80fb 	beq.w	12900 <ll_reset+0x328>
	MEMQ_INIT(ull_done, link);
   1270a:	4a74      	ldr	r2, [pc, #464]	; (128dc <ll_reset+0x304>)
   1270c:	4620      	mov	r0, r4
   1270e:	1f11      	subs	r1, r2, #4
   12710:	f7fc fb90 	bl	ee34 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   12714:	486f      	ldr	r0, [pc, #444]	; (128d4 <ll_reset+0x2fc>)
   12716:	f7fc fb39 	bl	ed8c <mem_acquire>
	LL_ASSERT(link);
   1271a:	4604      	mov	r4, r0
   1271c:	2800      	cmp	r0, #0
   1271e:	f000 80fd 	beq.w	1291c <ll_reset+0x344>
	MEMQ_INIT(ll_rx, link);
   12722:	4a6f      	ldr	r2, [pc, #444]	; (128e0 <ll_reset+0x308>)
	mem_link_rx.quota_pdu = RX_CNT;
   12724:	4e6f      	ldr	r6, [pc, #444]	; (128e4 <ll_reset+0x30c>)
		rx = mem_acquire(&mem_pdu_rx.free);
   12726:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 128d0 <ll_reset+0x2f8>
	MEMQ_INIT(ll_rx, link);
   1272a:	4620      	mov	r0, r4
   1272c:	1f11      	subs	r1, r2, #4
	mem_link_rx.quota_pdu = RX_CNT;
   1272e:	4637      	mov	r7, r6
	MEMQ_INIT(ll_rx, link);
   12730:	f7fc fb80 	bl	ee34 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   12734:	2307      	movs	r3, #7
   12736:	f807 3b04 	strb.w	r3, [r7], #4
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1273a:	78ec      	ldrb	r4, [r5, #3]
   1273c:	f04f 0a06 	mov.w	sl, #6
	if (last == count) {
   12740:	786a      	ldrb	r2, [r5, #1]
   12742:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   12744:	3401      	adds	r4, #1
   12746:	b2e4      	uxtb	r4, r4
		last = 0U;
   12748:	42a2      	cmp	r2, r4
   1274a:	bf08      	it	eq
   1274c:	2400      	moveq	r4, #0
	if (last == first) {
   1274e:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   12750:	4638      	mov	r0, r7
   12752:	d053      	beq.n	127fc <ll_reset+0x224>
   12754:	f7fc fb1a 	bl	ed8c <mem_acquire>
   12758:	4683      	mov	fp, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   1275a:	4640      	mov	r0, r8
		if (!link) {
   1275c:	f1bb 0f00 	cmp.w	fp, #0
   12760:	d049      	beq.n	127f6 <ll_reset+0x21e>
		rx = mem_acquire(&mem_pdu_rx.free);
   12762:	f7fc fb13 	bl	ed8c <mem_acquire>
		if (!rx) {
   12766:	2800      	cmp	r0, #0
   12768:	f000 80e6 	beq.w	12938 <ll_reset+0x360>
		rx->link = link;
   1276c:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   12770:	78ea      	ldrb	r2, [r5, #3]
   12772:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   12774:	fb02 5303 	mla	r3, r2, r3, r5
   12778:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   1277a:	7833      	ldrb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
   1277c:	70ec      	strb	r4, [r5, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1277e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
	mem_link_rx.quota_pdu += delta;
   12782:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   12784:	fa5f fa8a 	uxtb.w	sl, sl
	mem_link_rx.quota_pdu += delta;
   12788:	b2db      	uxtb	r3, r3
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1278a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
	mem_link_rx.quota_pdu += delta;
   1278e:	7033      	strb	r3, [r6, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   12790:	d1d6      	bne.n	12740 <ll_reset+0x168>
	while (mem_link_rx.quota_pdu &&
   12792:	b383      	cbz	r3, 127f6 <ll_reset+0x21e>
   12794:	f899 4003 	ldrb.w	r4, [r9, #3]
		link = mem_acquire(&mem_link_rx.free);
   12798:	f8df 8138 	ldr.w	r8, [pc, #312]	; 128d4 <ll_reset+0x2fc>
		rx = mem_acquire(&mem_pdu_rx.free);
   1279c:	4f4c      	ldr	r7, [pc, #304]	; (128d0 <ll_reset+0x2f8>)
		link->mem = NULL;
   1279e:	2500      	movs	r5, #0
	if (last == count) {
   127a0:	f899 2001 	ldrb.w	r2, [r9, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   127a4:	f899 3002 	ldrb.w	r3, [r9, #2]
	last = last + 1;
   127a8:	3401      	adds	r4, #1
   127aa:	b2e4      	uxtb	r4, r4
		last = 0U;
   127ac:	42a2      	cmp	r2, r4
   127ae:	bf08      	it	eq
   127b0:	2400      	moveq	r4, #0
	if (last == first) {
   127b2:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   127b4:	4640      	mov	r0, r8
   127b6:	d01e      	beq.n	127f6 <ll_reset+0x21e>
   127b8:	f7fc fae8 	bl	ed8c <mem_acquire>
   127bc:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   127be:	4638      	mov	r0, r7
		if (!link) {
   127c0:	f1ba 0f00 	cmp.w	sl, #0
   127c4:	d017      	beq.n	127f6 <ll_reset+0x21e>
		rx = mem_acquire(&mem_pdu_rx.free);
   127c6:	f7fc fae1 	bl	ed8c <mem_acquire>
		if (!rx) {
   127ca:	2800      	cmp	r0, #0
   127cc:	f000 80b9 	beq.w	12942 <ll_reset+0x36a>
		link->mem = NULL;
   127d0:	f8ca 5004 	str.w	r5, [sl, #4]
		rx->link = link;
   127d4:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   127d8:	f899 2003 	ldrb.w	r2, [r9, #3]
   127dc:	f899 3000 	ldrb.w	r3, [r9]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   127e0:	fb02 9303 	mla	r3, r2, r3, r9
   127e4:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   127e6:	7833      	ldrb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
   127e8:	f889 4003 	strb.w	r4, [r9, #3]
   127ec:	3b01      	subs	r3, #1
   127ee:	b2db      	uxtb	r3, r3
   127f0:	7033      	strb	r3, [r6, #0]
	while (mem_link_rx.quota_pdu &&
   127f2:	2b00      	cmp	r3, #0
   127f4:	d1d4      	bne.n	127a0 <ll_reset+0x1c8>
}
   127f6:	b007      	add	sp, #28
   127f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!max) {
   127fc:	f1ba 0f00 	cmp.w	sl, #0
   12800:	d0f9      	beq.n	127f6 <ll_reset+0x21e>
   12802:	7833      	ldrb	r3, [r6, #0]
   12804:	e7c5      	b.n	12792 <ll_reset+0x1ba>
	register uint32_t r1 __asm__("r1") = arg2;
   12806:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	register uint32_t r2 __asm__("r2") = arg3;
   1280a:	460a      	mov	r2, r1
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
   1280c:	4668      	mov	r0, sp
	register uint32_t r6 __asm__("r6") = call_id;
   1280e:	26a3      	movs	r6, #163	; 0xa3
	__asm__ volatile("svc %[svid]\n"
   12810:	df03      	svc	3
	err = ull_adv_reset_finalize();
   12812:	f001 fa0f 	bl	13c34 <ull_adv_reset_finalize>
	LL_ASSERT(!err);
   12816:	2800      	cmp	r0, #0
   12818:	f43f af27 	beq.w	1266a <ll_reset+0x92>
   1281c:	4a32      	ldr	r2, [pc, #200]	; (128e8 <ll_reset+0x310>)
   1281e:	4933      	ldr	r1, [pc, #204]	; (128ec <ll_reset+0x314>)
   12820:	4833      	ldr	r0, [pc, #204]	; (128f0 <ll_reset+0x318>)
   12822:	f240 23da 	movw	r3, #730	; 0x2da
   12826:	f011 fedd 	bl	245e4 <printk>
   1282a:	4040      	eors	r0, r0
   1282c:	f380 8811 	msr	BASEPRI, r0
   12830:	f04f 0003 	mov.w	r0, #3
   12834:	df02      	svc	2
   12836:	e718      	b.n	1266a <ll_reset+0x92>
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
   12838:	4668      	mov	r0, sp
	register uint32_t r2 __asm__("r2") = arg3;
   1283a:	2201      	movs	r2, #1
	register uint32_t r6 __asm__("r6") = call_id;
   1283c:	26a1      	movs	r6, #161	; 0xa1
	__asm__ volatile("svc %[svid]\n"
   1283e:	df03      	svc	3
	return ret;
   12840:	466c      	mov	r4, sp
   12842:	e6f4      	b.n	1262e <ll_reset+0x56>
		LL_ASSERT(!retval);
   12844:	4a28      	ldr	r2, [pc, #160]	; (128e8 <ll_reset+0x310>)
   12846:	492b      	ldr	r1, [pc, #172]	; (128f4 <ll_reset+0x31c>)
   12848:	4829      	ldr	r0, [pc, #164]	; (128f0 <ll_reset+0x318>)
   1284a:	f240 23cd 	movw	r3, #717	; 0x2cd
   1284e:	f011 fec9 	bl	245e4 <printk>
   12852:	4040      	eors	r0, r0
   12854:	f380 8811 	msr	BASEPRI, r0
   12858:	f04f 0003 	mov.w	r0, #3
   1285c:	df02      	svc	2
   1285e:	e6f0      	b.n	12642 <ll_reset+0x6a>
	LL_ASSERT(!err);
   12860:	4a21      	ldr	r2, [pc, #132]	; (128e8 <ll_reset+0x310>)
   12862:	4922      	ldr	r1, [pc, #136]	; (128ec <ll_reset+0x314>)
   12864:	4822      	ldr	r0, [pc, #136]	; (128f0 <ll_reset+0x318>)
   12866:	f240 239b 	movw	r3, #667	; 0x29b
   1286a:	f011 febb 	bl	245e4 <printk>
   1286e:	4040      	eors	r0, r0
   12870:	f380 8811 	msr	BASEPRI, r0
   12874:	f04f 0003 	mov.w	r0, #3
   12878:	df02      	svc	2
   1287a:	e6ba      	b.n	125f2 <ll_reset+0x1a>
	LL_ASSERT(!err);
   1287c:	4a1a      	ldr	r2, [pc, #104]	; (128e8 <ll_reset+0x310>)
   1287e:	491b      	ldr	r1, [pc, #108]	; (128ec <ll_reset+0x314>)
   12880:	481b      	ldr	r0, [pc, #108]	; (128f0 <ll_reset+0x318>)
   12882:	f240 234b 	movw	r3, #587	; 0x24b
   12886:	f011 fead 	bl	245e4 <printk>
   1288a:	4040      	eors	r0, r0
   1288c:	f380 8811 	msr	BASEPRI, r0
   12890:	f04f 0003 	mov.w	r0, #3
   12894:	df02      	svc	2
   12896:	e6a7      	b.n	125e8 <ll_reset+0x10>
	LL_ASSERT(link);
   12898:	4a13      	ldr	r2, [pc, #76]	; (128e8 <ll_reset+0x310>)
   1289a:	4917      	ldr	r1, [pc, #92]	; (128f8 <ll_reset+0x320>)
   1289c:	4814      	ldr	r0, [pc, #80]	; (128f0 <ll_reset+0x318>)
   1289e:	f240 7307 	movw	r3, #1799	; 0x707
   128a2:	f011 fe9f 	bl	245e4 <printk>
   128a6:	4040      	eors	r0, r0
   128a8:	f380 8811 	msr	BASEPRI, r0
   128ac:	f04f 0003 	mov.w	r0, #3
   128b0:	df02      	svc	2
   128b2:	e71e      	b.n	126f2 <ll_reset+0x11a>
   128b4:	200079e8 	.word	0x200079e8
   128b8:	200078a4 	.word	0x200078a4
   128bc:	200078cc 	.word	0x200078cc
   128c0:	200078e4 	.word	0x200078e4
   128c4:	20007a0c 	.word	0x20007a0c
   128c8:	200010d8 	.word	0x200010d8
   128cc:	20001178 	.word	0x20001178
   128d0:	200011fc 	.word	0x200011fc
   128d4:	200011a0 	.word	0x200011a0
   128d8:	2000149c 	.word	0x2000149c
   128dc:	20001494 	.word	0x20001494
   128e0:	2000148c 	.word	0x2000148c
   128e4:	2000119c 	.word	0x2000119c
   128e8:	0002b320 	.word	0x0002b320
   128ec:	0002b384 	.word	0x0002b384
   128f0:	0002b0c4 	.word	0x0002b0c4
   128f4:	0002b390 	.word	0x0002b390
   128f8:	0002b65c 	.word	0x0002b65c
   128fc:	200078b8 	.word	0x200078b8
	LL_ASSERT(link);
   12900:	4a12      	ldr	r2, [pc, #72]	; (1294c <ll_reset+0x374>)
   12902:	4913      	ldr	r1, [pc, #76]	; (12950 <ll_reset+0x378>)
   12904:	4813      	ldr	r0, [pc, #76]	; (12954 <ll_reset+0x37c>)
   12906:	f240 730f 	movw	r3, #1807	; 0x70f
   1290a:	f011 fe6b 	bl	245e4 <printk>
   1290e:	4040      	eors	r0, r0
   12910:	f380 8811 	msr	BASEPRI, r0
   12914:	f04f 0003 	mov.w	r0, #3
   12918:	df02      	svc	2
   1291a:	e6f6      	b.n	1270a <ll_reset+0x132>
	LL_ASSERT(link);
   1291c:	4a0b      	ldr	r2, [pc, #44]	; (1294c <ll_reset+0x374>)
   1291e:	490c      	ldr	r1, [pc, #48]	; (12950 <ll_reset+0x378>)
   12920:	480c      	ldr	r0, [pc, #48]	; (12954 <ll_reset+0x37c>)
   12922:	f240 7317 	movw	r3, #1815	; 0x717
   12926:	f011 fe5d 	bl	245e4 <printk>
   1292a:	4040      	eors	r0, r0
   1292c:	f380 8811 	msr	BASEPRI, r0
   12930:	f04f 0003 	mov.w	r0, #3
   12934:	df02      	svc	2
   12936:	e6f4      	b.n	12722 <ll_reset+0x14a>
			mem_release(link, &mem_link_rx.free);
   12938:	4907      	ldr	r1, [pc, #28]	; (12958 <ll_reset+0x380>)
   1293a:	4658      	mov	r0, fp
   1293c:	f7fc fa3c 	bl	edb8 <mem_release>
			return;
   12940:	e759      	b.n	127f6 <ll_reset+0x21e>
			mem_release(link, &mem_link_rx.free);
   12942:	4905      	ldr	r1, [pc, #20]	; (12958 <ll_reset+0x380>)
   12944:	4650      	mov	r0, sl
   12946:	f7fc fa37 	bl	edb8 <mem_release>
			return;
   1294a:	e754      	b.n	127f6 <ll_reset+0x21e>
   1294c:	0002b320 	.word	0x0002b320
   12950:	0002b65c 	.word	0x0002b65c
   12954:	0002b0c4 	.word	0x0002b0c4
   12958:	200011a0 	.word	0x200011a0

0001295c <ll_rx_get>:
{
   1295c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12960:	b085      	sub	sp, #20
   12962:	e9cd 0100 	strd	r0, r1, [sp]
   12966:	4c67      	ldr	r4, [pc, #412]	; (12b04 <ll_rx_get+0x1a8>)
				mem_release(link, &mem_link_rx.free);
   12968:	4d67      	ldr	r5, [pc, #412]	; (12b08 <ll_rx_get+0x1ac>)
   1296a:	4e68      	ldr	r6, [pc, #416]	; (12b0c <ll_rx_get+0x1b0>)
	*node_rx = NULL;
   1296c:	9a00      	ldr	r2, [sp, #0]
   1296e:	2300      	movs	r3, #0
   12970:	6013      	str	r3, [r2, #0]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   12972:	e9d6 0100 	ldrd	r0, r1, [r6]
   12976:	aa03      	add	r2, sp, #12
   12978:	f7fc fa72 	bl	ee60 <memq_peek>
	if (link) {
   1297c:	4680      	mov	r8, r0
   1297e:	2800      	cmp	r0, #0
   12980:	f000 80b6 	beq.w	12af0 <ll_rx_get+0x194>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   12984:	9b03      	ldr	r3, [sp, #12]
   12986:	4962      	ldr	r1, [pc, #392]	; (12b10 <ll_rx_get+0x1b4>)
   12988:	781a      	ldrb	r2, [r3, #0]
   1298a:	9801      	ldr	r0, [sp, #4]
   1298c:	f7ff fa36 	bl	11dfc <tx_cmplt_get>
		if (!cmplt) {
   12990:	4603      	mov	r3, r0
   12992:	2800      	cmp	r0, #0
   12994:	f040 80a3 	bne.w	12ade <ll_rx_get+0x182>
			f = mfifo_tx_ack.f;
   12998:	78a2      	ldrb	r2, [r4, #2]
   1299a:	f88d 2009 	strb.w	r2, [sp, #9]
				cmplt_curr = tx_cmplt_get(&h, &f,
   1299e:	78e2      	ldrb	r2, [r4, #3]
   129a0:	f10d 0109 	add.w	r1, sp, #9
   129a4:	f10d 000a 	add.w	r0, sp, #10
   129a8:	461f      	mov	r7, r3
   129aa:	f7ff fa27 	bl	11dfc <tx_cmplt_get>
   129ae:	ea47 0200 	orr.w	r2, r7, r0
			} while ((cmplt_prev != 0U) ||
   129b2:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
				cmplt_curr = tx_cmplt_get(&h, &f,
   129b6:	4603      	mov	r3, r0
			} while ((cmplt_prev != 0U) ||
   129b8:	d1f1      	bne.n	1299e <ll_rx_get+0x42>
			if (rx->type == NODE_RX_TYPE_RELEASE) {
   129ba:	9b03      	ldr	r3, [sp, #12]
   129bc:	7919      	ldrb	r1, [r3, #4]
   129be:	2901      	cmp	r1, #1
   129c0:	f040 808a 	bne.w	12ad8 <ll_rx_get+0x17c>
				(void)memq_dequeue(memq_ll_rx.tail,
   129c4:	4951      	ldr	r1, [pc, #324]	; (12b0c <ll_rx_get+0x1b0>)
   129c6:	6870      	ldr	r0, [r6, #4]
   129c8:	f7fc fa52 	bl	ee70 <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
   129cc:	4951      	ldr	r1, [pc, #324]	; (12b14 <ll_rx_get+0x1b8>)
   129ce:	4640      	mov	r0, r8
   129d0:	f7fc f9f2 	bl	edb8 <mem_release>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   129d4:	782b      	ldrb	r3, [r5, #0]
   129d6:	2b06      	cmp	r3, #6
   129d8:	d86f      	bhi.n	12aba <ll_rx_get+0x15e>
	mem_link_rx.quota_pdu += delta;
   129da:	3301      	adds	r3, #1
				mem_release(rx, &mem_pdu_rx.free);
   129dc:	494e      	ldr	r1, [pc, #312]	; (12b18 <ll_rx_get+0x1bc>)
   129de:	9803      	ldr	r0, [sp, #12]
	mem_link_rx.quota_pdu += delta;
   129e0:	702b      	strb	r3, [r5, #0]
				mem_release(rx, &mem_pdu_rx.free);
   129e2:	f7fc f9e9 	bl	edb8 <mem_release>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   129e6:	782b      	ldrb	r3, [r5, #0]
   129e8:	2b00      	cmp	r3, #0
   129ea:	d0bf      	beq.n	1296c <ll_rx_get+0x10>
   129ec:	f8df 8138 	ldr.w	r8, [pc, #312]	; 12b28 <ll_rx_get+0x1cc>
	last = last + 1;
   129f0:	f898 7003 	ldrb.w	r7, [r8, #3]
	if (last == count) {
   129f4:	f898 2001 	ldrb.w	r2, [r8, #1]
   129f8:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
   129fc:	3701      	adds	r7, #1
   129fe:	b2ff      	uxtb	r7, r7
		last = 0U;
   12a00:	42ba      	cmp	r2, r7
   12a02:	bf08      	it	eq
   12a04:	2700      	moveq	r7, #0
	if (last == first) {
   12a06:	429f      	cmp	r7, r3
   12a08:	d0b0      	beq.n	1296c <ll_rx_get+0x10>
		link = mem_acquire(&mem_link_rx.free);
   12a0a:	4842      	ldr	r0, [pc, #264]	; (12b14 <ll_rx_get+0x1b8>)
   12a0c:	f7fc f9be 	bl	ed8c <mem_acquire>
		if (!link) {
   12a10:	4682      	mov	sl, r0
   12a12:	2800      	cmp	r0, #0
   12a14:	d0aa      	beq.n	1296c <ll_rx_get+0x10>
		rx = mem_acquire(&mem_pdu_rx.free);
   12a16:	4840      	ldr	r0, [pc, #256]	; (12b18 <ll_rx_get+0x1bc>)
   12a18:	f7fc f9b8 	bl	ed8c <mem_acquire>
		if (!rx) {
   12a1c:	2800      	cmp	r0, #0
   12a1e:	d062      	beq.n	12ae6 <ll_rx_get+0x18a>
		rx->link = link;
   12a20:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   12a24:	f898 2003 	ldrb.w	r2, [r8, #3]
   12a28:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   12a2c:	fb02 8303 	mla	r3, r2, r3, r8
   12a30:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   12a32:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   12a34:	f888 7003 	strb.w	r7, [r8, #3]
   12a38:	3b01      	subs	r3, #1
   12a3a:	b2db      	uxtb	r3, r3
   12a3c:	702b      	strb	r3, [r5, #0]
	while (mem_link_rx.quota_pdu &&
   12a3e:	2b00      	cmp	r3, #0
   12a40:	d094      	beq.n	1296c <ll_rx_get+0x10>
   12a42:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 12b2c <ll_rx_get+0x1d0>
		link = mem_acquire(&mem_link_rx.free);
   12a46:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 12b14 <ll_rx_get+0x1b8>
   12a4a:	f89a 7003 	ldrb.w	r7, [sl, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   12a4e:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 12b18 <ll_rx_get+0x1bc>
   12a52:	e014      	b.n	12a7e <ll_rx_get+0x122>
		link->mem = NULL;
   12a54:	2300      	movs	r3, #0
   12a56:	f8c9 3004 	str.w	r3, [r9, #4]
		rx->link = link;
   12a5a:	f8c0 9000 	str.w	r9, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   12a5e:	f89a 2003 	ldrb.w	r2, [sl, #3]
   12a62:	f89a 3000 	ldrb.w	r3, [sl]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   12a66:	fb02 a303 	mla	r3, r2, r3, sl
   12a6a:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   12a6c:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   12a6e:	f88a 7003 	strb.w	r7, [sl, #3]
   12a72:	3b01      	subs	r3, #1
   12a74:	b2db      	uxtb	r3, r3
   12a76:	702b      	strb	r3, [r5, #0]
	while (mem_link_rx.quota_pdu &&
   12a78:	2b00      	cmp	r3, #0
   12a7a:	f43f af77 	beq.w	1296c <ll_rx_get+0x10>
	if (last == count) {
   12a7e:	f89a 2001 	ldrb.w	r2, [sl, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   12a82:	f89a 3002 	ldrb.w	r3, [sl, #2]
	last = last + 1;
   12a86:	3701      	adds	r7, #1
   12a88:	b2ff      	uxtb	r7, r7
		last = 0U;
   12a8a:	42ba      	cmp	r2, r7
   12a8c:	bf08      	it	eq
   12a8e:	2700      	moveq	r7, #0
	if (last == first) {
   12a90:	429f      	cmp	r7, r3
		link = mem_acquire(&mem_link_rx.free);
   12a92:	4640      	mov	r0, r8
   12a94:	f43f af6a 	beq.w	1296c <ll_rx_get+0x10>
   12a98:	f7fc f978 	bl	ed8c <mem_acquire>
   12a9c:	4681      	mov	r9, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   12a9e:	4658      	mov	r0, fp
		if (!link) {
   12aa0:	f1b9 0f00 	cmp.w	r9, #0
   12aa4:	f43f af62 	beq.w	1296c <ll_rx_get+0x10>
		rx = mem_acquire(&mem_pdu_rx.free);
   12aa8:	f7fc f970 	bl	ed8c <mem_acquire>
		if (!rx) {
   12aac:	2800      	cmp	r0, #0
   12aae:	d1d1      	bne.n	12a54 <ll_rx_get+0xf8>
			mem_release(link, &mem_link_rx.free);
   12ab0:	4918      	ldr	r1, [pc, #96]	; (12b14 <ll_rx_get+0x1b8>)
   12ab2:	4648      	mov	r0, r9
   12ab4:	f7fc f980 	bl	edb8 <mem_release>
			return;
   12ab8:	e758      	b.n	1296c <ll_rx_get+0x10>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   12aba:	4a18      	ldr	r2, [pc, #96]	; (12b1c <ll_rx_get+0x1c0>)
   12abc:	4918      	ldr	r1, [pc, #96]	; (12b20 <ll_rx_get+0x1c4>)
   12abe:	4819      	ldr	r0, [pc, #100]	; (12b24 <ll_rx_get+0x1c8>)
   12ac0:	f240 531c 	movw	r3, #1308	; 0x51c
   12ac4:	f011 fd8e 	bl	245e4 <printk>
   12ac8:	4040      	eors	r0, r0
   12aca:	f380 8811 	msr	BASEPRI, r0
   12ace:	f04f 0003 	mov.w	r0, #3
   12ad2:	df02      	svc	2
   12ad4:	782b      	ldrb	r3, [r5, #0]
   12ad6:	e780      	b.n	129da <ll_rx_get+0x7e>
			*node_rx = rx;
   12ad8:	9900      	ldr	r1, [sp, #0]
   12ada:	600b      	str	r3, [r1, #0]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   12adc:	4613      	mov	r3, r2
}
   12ade:	4618      	mov	r0, r3
   12ae0:	b005      	add	sp, #20
   12ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, &mem_link_rx.free);
   12ae6:	490b      	ldr	r1, [pc, #44]	; (12b14 <ll_rx_get+0x1b8>)
   12ae8:	4650      	mov	r0, sl
   12aea:	f7fc f965 	bl	edb8 <mem_release>
			return;
   12aee:	e73d      	b.n	1296c <ll_rx_get+0x10>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
   12af0:	78e2      	ldrb	r2, [r4, #3]
   12af2:	4907      	ldr	r1, [pc, #28]	; (12b10 <ll_rx_get+0x1b4>)
   12af4:	9801      	ldr	r0, [sp, #4]
   12af6:	f7ff f981 	bl	11dfc <tx_cmplt_get>
   12afa:	4603      	mov	r3, r0
}
   12afc:	4618      	mov	r0, r3
   12afe:	b005      	add	sp, #20
   12b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b04:	200079e8 	.word	0x200079e8
   12b08:	2000119c 	.word	0x2000119c
   12b0c:	20001488 	.word	0x20001488
   12b10:	200079ea 	.word	0x200079ea
   12b14:	200011a0 	.word	0x200011a0
   12b18:	200011fc 	.word	0x200011fc
   12b1c:	0002b320 	.word	0x0002b320
   12b20:	0002b398 	.word	0x0002b398
   12b24:	0002b0c4 	.word	0x0002b0c4
   12b28:	200078cc 	.word	0x200078cc
   12b2c:	200078b8 	.word	0x200078b8

00012b30 <ll_rx_dequeue>:
{
   12b30:	b570      	push	{r4, r5, r6, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   12b32:	495d      	ldr	r1, [pc, #372]	; (12ca8 <ll_rx_dequeue+0x178>)
{
   12b34:	b082      	sub	sp, #8
	struct node_rx_hdr *rx = NULL;
   12b36:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   12b38:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
   12b3a:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   12b3c:	aa01      	add	r2, sp, #4
   12b3e:	f7fc f997 	bl	ee70 <memq_dequeue>
	LL_ASSERT(link);
   12b42:	4604      	mov	r4, r0
   12b44:	2800      	cmp	r0, #0
   12b46:	d062      	beq.n	12c0e <ll_rx_dequeue+0xde>
	mem_release(link, &mem_link_rx.free);
   12b48:	4958      	ldr	r1, [pc, #352]	; (12cac <ll_rx_dequeue+0x17c>)
   12b4a:	4620      	mov	r0, r4
   12b4c:	f7fc f934 	bl	edb8 <mem_release>
	switch (rx->type) {
   12b50:	9a01      	ldr	r2, [sp, #4]
   12b52:	7913      	ldrb	r3, [r2, #4]
   12b54:	2b1a      	cmp	r3, #26
   12b56:	d80f      	bhi.n	12b78 <ll_rx_dequeue+0x48>
   12b58:	e8df f003 	tbb	[pc, r3]
   12b5c:	1d0e0e1d 	.word	0x1d0e0e1d
   12b60:	0e0e0e0e 	.word	0x0e0e0e0e
   12b64:	0e0e0e0e 	.word	0x0e0e0e0e
   12b68:	0e0e0e0e 	.word	0x0e0e0e0e
   12b6c:	0e0e0e0e 	.word	0x0e0e0e0e
   12b70:	1d1d1d2e 	.word	0x1d1d1d2e
   12b74:	1d1d      	.short	0x1d1d
   12b76:	1d          	.byte	0x1d
   12b77:	00          	.byte	0x00
		LL_ASSERT(0);
   12b78:	4a4d      	ldr	r2, [pc, #308]	; (12cb0 <ll_rx_dequeue+0x180>)
   12b7a:	494e      	ldr	r1, [pc, #312]	; (12cb4 <ll_rx_dequeue+0x184>)
   12b7c:	484e      	ldr	r0, [pc, #312]	; (12cb8 <ll_rx_dequeue+0x188>)
   12b7e:	f240 4332 	movw	r3, #1074	; 0x432
   12b82:	f011 fd2f 	bl	245e4 <printk>
   12b86:	4040      	eors	r0, r0
   12b88:	f380 8811 	msr	BASEPRI, r0
   12b8c:	f04f 0003 	mov.w	r0, #3
   12b90:	df02      	svc	2
}
   12b92:	b002      	add	sp, #8
   12b94:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   12b96:	2b00      	cmp	r3, #0
   12b98:	d1fb      	bne.n	12b92 <ll_rx_dequeue+0x62>
   12b9a:	4a45      	ldr	r2, [pc, #276]	; (12cb0 <ll_rx_dequeue+0x180>)
   12b9c:	4947      	ldr	r1, [pc, #284]	; (12cbc <ll_rx_dequeue+0x18c>)
   12b9e:	4846      	ldr	r0, [pc, #280]	; (12cb8 <ll_rx_dequeue+0x188>)
   12ba0:	f240 432e 	movw	r3, #1070	; 0x42e
   12ba4:	f011 fd1e 	bl	245e4 <printk>
   12ba8:	4040      	eors	r0, r0
   12baa:	f380 8811 	msr	BASEPRI, r0
   12bae:	f04f 0003 	mov.w	r0, #3
   12bb2:	df02      	svc	2
}
   12bb4:	b002      	add	sp, #8
   12bb6:	bd70      	pop	{r4, r5, r6, pc}
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
   12bb8:	7f13      	ldrb	r3, [r2, #28]
   12bba:	2b3c      	cmp	r3, #60	; 0x3c
   12bbc:	d035      	beq.n	12c2a <ll_rx_dequeue+0xfa>
   12bbe:	7f53      	ldrb	r3, [r2, #29]
   12bc0:	b1bb      	cbz	r3, 12bf2 <ll_rx_dequeue+0xc2>
			struct ll_adv_set *adv = (void *)HDR_LLL2EVT(lll);
   12bc2:	6893      	ldr	r3, [r2, #8]
   12bc4:	681c      	ldr	r4, [r3, #0]
				if (adv->node_rx_cc_free) {
   12bc6:	6c60      	ldr	r0, [r4, #68]	; 0x44
   12bc8:	b120      	cbz	r0, 12bd4 <ll_rx_dequeue+0xa4>
					adv->node_rx_cc_free = NULL;
   12bca:	2300      	movs	r3, #0
					mem_release(rx_free, &mem_pdu_rx.free);
   12bcc:	493c      	ldr	r1, [pc, #240]	; (12cc0 <ll_rx_dequeue+0x190>)
					adv->node_rx_cc_free = NULL;
   12bce:	6463      	str	r3, [r4, #68]	; 0x44
					mem_release(rx_free, &mem_pdu_rx.free);
   12bd0:	f7fc f8f2 	bl	edb8 <mem_release>
			adv->is_enabled = 0U;
   12bd4:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
   12bd8:	f36f 0300 	bfc	r3, #0, #1
   12bdc:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
			      ull_adv_is_enabled(0));
   12be0:	2000      	movs	r0, #0
   12be2:	f001 f861 	bl	13ca8 <ull_adv_is_enabled>
			if (!bm) {
   12be6:	2800      	cmp	r0, #0
   12be8:	d1d3      	bne.n	12b92 <ll_rx_dequeue+0x62>
				ull_filter_adv_scan_state_cb(0);
   12bea:	f006 fa29 	bl	19040 <ull_filter_adv_scan_state_cb>
}
   12bee:	b002      	add	sp, #8
   12bf0:	bd70      	pop	{r4, r5, r6, pc}
			LL_ASSERT(0);
   12bf2:	4a2f      	ldr	r2, [pc, #188]	; (12cb0 <ll_rx_dequeue+0x180>)
   12bf4:	492f      	ldr	r1, [pc, #188]	; (12cb4 <ll_rx_dequeue+0x184>)
   12bf6:	4830      	ldr	r0, [pc, #192]	; (12cb8 <ll_rx_dequeue+0x188>)
   12bf8:	f44f 7373 	mov.w	r3, #972	; 0x3cc
   12bfc:	f011 fcf2 	bl	245e4 <printk>
   12c00:	4040      	eors	r0, r0
   12c02:	f380 8811 	msr	BASEPRI, r0
   12c06:	f04f 0003 	mov.w	r0, #3
   12c0a:	df02      	svc	2
   12c0c:	e7e8      	b.n	12be0 <ll_rx_dequeue+0xb0>
	LL_ASSERT(link);
   12c0e:	4a28      	ldr	r2, [pc, #160]	; (12cb0 <ll_rx_dequeue+0x180>)
   12c10:	492c      	ldr	r1, [pc, #176]	; (12cc4 <ll_rx_dequeue+0x194>)
   12c12:	4829      	ldr	r0, [pc, #164]	; (12cb8 <ll_rx_dequeue+0x188>)
   12c14:	f240 3331 	movw	r3, #817	; 0x331
   12c18:	f011 fce4 	bl	245e4 <printk>
   12c1c:	4040      	eors	r0, r0
   12c1e:	f380 8811 	msr	BASEPRI, r0
   12c22:	f04f 0003 	mov.w	r0, #3
   12c26:	df02      	svc	2
   12c28:	e78e      	b.n	12b48 <ll_rx_dequeue+0x18>
			struct lll_adv *lll = ftr->param;
   12c2a:	6896      	ldr	r6, [r2, #8]
			struct ll_adv_set *adv = (void *)HDR_LLL2EVT(lll);
   12c2c:	e9d6 4500 	ldrd	r4, r5, [r6]
				LL_ASSERT(conn_lll);
   12c30:	b1ed      	cbz	r5, 12c6e <ll_rx_dequeue+0x13e>
				LL_ASSERT(!conn_lll->link_tx_free);
   12c32:	6dab      	ldr	r3, [r5, #88]	; 0x58
				lll->conn = NULL;
   12c34:	2200      	movs	r2, #0
   12c36:	6072      	str	r2, [r6, #4]
				LL_ASSERT(!conn_lll->link_tx_free);
   12c38:	b163      	cbz	r3, 12c54 <ll_rx_dequeue+0x124>
   12c3a:	4a1d      	ldr	r2, [pc, #116]	; (12cb0 <ll_rx_dequeue+0x180>)
   12c3c:	4922      	ldr	r1, [pc, #136]	; (12cc8 <ll_rx_dequeue+0x198>)
   12c3e:	481e      	ldr	r0, [pc, #120]	; (12cb8 <ll_rx_dequeue+0x188>)
   12c40:	f44f 7369 	mov.w	r3, #932	; 0x3a4
   12c44:	f011 fcce 	bl	245e4 <printk>
   12c48:	4040      	eors	r0, r0
   12c4a:	f380 8811 	msr	BASEPRI, r0
   12c4e:	f04f 0003 	mov.w	r0, #3
   12c52:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
   12c54:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   12c58:	f105 0048 	add.w	r0, r5, #72	; 0x48
   12c5c:	f7fc f8ee 	bl	ee3c <memq_deinit>
				LL_ASSERT(link);
   12c60:	4606      	mov	r6, r0
   12c62:	b190      	cbz	r0, 12c8a <ll_rx_dequeue+0x15a>
				ll_conn_release(conn);
   12c64:	6828      	ldr	r0, [r5, #0]
				conn_lll->link_tx_free = link;
   12c66:	65ae      	str	r6, [r5, #88]	; 0x58
				ll_conn_release(conn);
   12c68:	f001 fe26 	bl	148b8 <ll_conn_release>
   12c6c:	e7b2      	b.n	12bd4 <ll_rx_dequeue+0xa4>
				LL_ASSERT(conn_lll);
   12c6e:	4a10      	ldr	r2, [pc, #64]	; (12cb0 <ll_rx_dequeue+0x180>)
   12c70:	4916      	ldr	r1, [pc, #88]	; (12ccc <ll_rx_dequeue+0x19c>)
   12c72:	4811      	ldr	r0, [pc, #68]	; (12cb8 <ll_rx_dequeue+0x188>)
   12c74:	f240 33a1 	movw	r3, #929	; 0x3a1
   12c78:	f011 fcb4 	bl	245e4 <printk>
   12c7c:	4040      	eors	r0, r0
   12c7e:	f380 8811 	msr	BASEPRI, r0
   12c82:	f04f 0003 	mov.w	r0, #3
   12c86:	df02      	svc	2
   12c88:	e7d3      	b.n	12c32 <ll_rx_dequeue+0x102>
				LL_ASSERT(link);
   12c8a:	4a09      	ldr	r2, [pc, #36]	; (12cb0 <ll_rx_dequeue+0x180>)
   12c8c:	490d      	ldr	r1, [pc, #52]	; (12cc4 <ll_rx_dequeue+0x194>)
   12c8e:	480a      	ldr	r0, [pc, #40]	; (12cb8 <ll_rx_dequeue+0x188>)
   12c90:	f240 33a7 	movw	r3, #935	; 0x3a7
   12c94:	f011 fca6 	bl	245e4 <printk>
   12c98:	4040      	eors	r0, r0
   12c9a:	f380 8811 	msr	BASEPRI, r0
   12c9e:	f04f 0003 	mov.w	r0, #3
   12ca2:	df02      	svc	2
   12ca4:	e7de      	b.n	12c64 <ll_rx_dequeue+0x134>
   12ca6:	bf00      	nop
   12ca8:	20001488 	.word	0x20001488
   12cac:	200011a0 	.word	0x200011a0
   12cb0:	0002b320 	.word	0x0002b320
   12cb4:	0002b15c 	.word	0x0002b15c
   12cb8:	0002b0c4 	.word	0x0002b0c4
   12cbc:	0002b3f0 	.word	0x0002b3f0
   12cc0:	200011fc 	.word	0x200011fc
   12cc4:	0002b65c 	.word	0x0002b65c
   12cc8:	0002b3d8 	.word	0x0002b3d8
   12ccc:	0002b3cc 	.word	0x0002b3cc

00012cd0 <ll_rx_mem_release>:
{
   12cd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	rx = *node_rx;
   12cd4:	6804      	ldr	r4, [r0, #0]
	while (rx) {
   12cd6:	4e88      	ldr	r6, [pc, #544]	; (12ef8 <ll_rx_mem_release+0x228>)
{
   12cd8:	4681      	mov	r9, r0
	while (rx) {
   12cda:	b344      	cbz	r4, 12d2e <ll_rx_mem_release+0x5e>
			LL_ASSERT(0);
   12cdc:	f8df 8244 	ldr.w	r8, [pc, #580]	; 12f24 <ll_rx_mem_release+0x254>
   12ce0:	f8df a244 	ldr.w	sl, [pc, #580]	; 12f28 <ll_rx_mem_release+0x258>
   12ce4:	4f85      	ldr	r7, [pc, #532]	; (12efc <ll_rx_mem_release+0x22c>)
		rx = rx->next;
   12ce6:	4625      	mov	r5, r4
   12ce8:	6824      	ldr	r4, [r4, #0]
		switch (rx_free->type) {
   12cea:	792b      	ldrb	r3, [r5, #4]
   12cec:	2b1a      	cmp	r3, #26
   12cee:	d80f      	bhi.n	12d10 <ll_rx_mem_release+0x40>
   12cf0:	e8df f003 	tbb	[pc, r3]
   12cf4:	940e0e94 	.word	0x940e0e94
   12cf8:	0e0e0e0e 	.word	0x0e0e0e0e
   12cfc:	0e0e0e0e 	.word	0x0e0e0e0e
   12d00:	0e0e0e0e 	.word	0x0e0e0e0e
   12d04:	0e0e0e0e 	.word	0x0e0e0e0e
   12d08:	9494af82 	.word	0x9494af82
   12d0c:	9494      	.short	0x9494
   12d0e:	94          	.byte	0x94
   12d0f:	00          	.byte	0x00
			LL_ASSERT(0);
   12d10:	f44f 63a2 	mov.w	r3, #1296	; 0x510
   12d14:	4642      	mov	r2, r8
   12d16:	4651      	mov	r1, sl
   12d18:	4638      	mov	r0, r7
   12d1a:	f011 fc63 	bl	245e4 <printk>
   12d1e:	4040      	eors	r0, r0
   12d20:	f380 8811 	msr	BASEPRI, r0
   12d24:	f04f 0003 	mov.w	r0, #3
   12d28:	df02      	svc	2
	while (rx) {
   12d2a:	2c00      	cmp	r4, #0
   12d2c:	d1db      	bne.n	12ce6 <ll_rx_mem_release+0x16>
	*node_rx = rx;
   12d2e:	2300      	movs	r3, #0
   12d30:	f8c9 3000 	str.w	r3, [r9]
	if (max > mem_link_rx.quota_pdu) {
   12d34:	7833      	ldrb	r3, [r6, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   12d36:	1e5f      	subs	r7, r3, #1
   12d38:	b2ff      	uxtb	r7, r7
   12d3a:	2b00      	cmp	r3, #0
   12d3c:	d05a      	beq.n	12df4 <ll_rx_mem_release+0x124>
   12d3e:	4d70      	ldr	r5, [pc, #448]	; (12f00 <ll_rx_mem_release+0x230>)
		link = mem_acquire(&mem_link_rx.free);
   12d40:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 12f08 <ll_rx_mem_release+0x238>
   12d44:	78ec      	ldrb	r4, [r5, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   12d46:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 12f14 <ll_rx_mem_release+0x244>
	if (last == count) {
   12d4a:	786a      	ldrb	r2, [r5, #1]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   12d4c:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   12d4e:	3401      	adds	r4, #1
   12d50:	b2e4      	uxtb	r4, r4
		last = 0U;
   12d52:	42a2      	cmp	r2, r4
   12d54:	bf08      	it	eq
   12d56:	2400      	moveq	r4, #0
	if (last == first) {
   12d58:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   12d5a:	4640      	mov	r0, r8
   12d5c:	f000 80ac 	beq.w	12eb8 <ll_rx_mem_release+0x1e8>
   12d60:	f7fc f814 	bl	ed8c <mem_acquire>
   12d64:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   12d66:	4648      	mov	r0, r9
		if (!link) {
   12d68:	f1ba 0f00 	cmp.w	sl, #0
   12d6c:	d042      	beq.n	12df4 <ll_rx_mem_release+0x124>
		rx = mem_acquire(&mem_pdu_rx.free);
   12d6e:	f7fc f80d 	bl	ed8c <mem_acquire>
		if (!rx) {
   12d72:	2800      	cmp	r0, #0
   12d74:	f000 80ba 	beq.w	12eec <ll_rx_mem_release+0x21c>
		rx->link = link;
   12d78:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   12d7c:	78ea      	ldrb	r2, [r5, #3]
   12d7e:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   12d80:	fb02 5303 	mla	r3, r2, r3, r5
   12d84:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   12d86:	7833      	ldrb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
   12d88:	70ec      	strb	r4, [r5, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   12d8a:	3f01      	subs	r7, #1
	mem_link_rx.quota_pdu += delta;
   12d8c:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   12d8e:	b2ff      	uxtb	r7, r7
	mem_link_rx.quota_pdu += delta;
   12d90:	b2db      	uxtb	r3, r3
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   12d92:	2fff      	cmp	r7, #255	; 0xff
	mem_link_rx.quota_pdu += delta;
   12d94:	7033      	strb	r3, [r6, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   12d96:	d1d8      	bne.n	12d4a <ll_rx_mem_release+0x7a>
	while (mem_link_rx.quota_pdu &&
   12d98:	b363      	cbz	r3, 12df4 <ll_rx_mem_release+0x124>
   12d9a:	4d5a      	ldr	r5, [pc, #360]	; (12f04 <ll_rx_mem_release+0x234>)
		link = mem_acquire(&mem_link_rx.free);
   12d9c:	4f5a      	ldr	r7, [pc, #360]	; (12f08 <ll_rx_mem_release+0x238>)
   12d9e:	78ec      	ldrb	r4, [r5, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   12da0:	f8df 8170 	ldr.w	r8, [pc, #368]	; 12f14 <ll_rx_mem_release+0x244>
		link->mem = NULL;
   12da4:	f04f 0900 	mov.w	r9, #0
	if (last == count) {
   12da8:	786a      	ldrb	r2, [r5, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   12daa:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   12dac:	3401      	adds	r4, #1
   12dae:	b2e4      	uxtb	r4, r4
		last = 0U;
   12db0:	42a2      	cmp	r2, r4
   12db2:	bf08      	it	eq
   12db4:	2400      	moveq	r4, #0
	if (last == first) {
   12db6:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   12db8:	4638      	mov	r0, r7
   12dba:	d01b      	beq.n	12df4 <ll_rx_mem_release+0x124>
   12dbc:	f7fb ffe6 	bl	ed8c <mem_acquire>
   12dc0:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   12dc2:	4640      	mov	r0, r8
		if (!link) {
   12dc4:	f1ba 0f00 	cmp.w	sl, #0
   12dc8:	d014      	beq.n	12df4 <ll_rx_mem_release+0x124>
		rx = mem_acquire(&mem_pdu_rx.free);
   12dca:	f7fb ffdf 	bl	ed8c <mem_acquire>
		if (!rx) {
   12dce:	2800      	cmp	r0, #0
   12dd0:	f000 808c 	beq.w	12eec <ll_rx_mem_release+0x21c>
		link->mem = NULL;
   12dd4:	f8ca 9004 	str.w	r9, [sl, #4]
		rx->link = link;
   12dd8:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   12ddc:	78ea      	ldrb	r2, [r5, #3]
   12dde:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   12de0:	fb02 5303 	mla	r3, r2, r3, r5
   12de4:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   12de6:	7833      	ldrb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
   12de8:	70ec      	strb	r4, [r5, #3]
   12dea:	3b01      	subs	r3, #1
   12dec:	b2db      	uxtb	r3, r3
   12dee:	7033      	strb	r3, [r6, #0]
	while (mem_link_rx.quota_pdu &&
   12df0:	2b00      	cmp	r3, #0
   12df2:	d1d9      	bne.n	12da8 <ll_rx_mem_release+0xd8>
}
   12df4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			} else if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   12df8:	7f2b      	ldrb	r3, [r5, #28]
   12dfa:	2b3c      	cmp	r3, #60	; 0x3c
   12dfc:	d060      	beq.n	12ec0 <ll_rx_mem_release+0x1f0>
				LL_ASSERT(!cc->status);
   12dfe:	b1db      	cbz	r3, 12e38 <ll_rx_mem_release+0x168>
   12e00:	4942      	ldr	r1, [pc, #264]	; (12f0c <ll_rx_mem_release+0x23c>)
   12e02:	f44f 6391 	mov.w	r3, #1160	; 0x488
   12e06:	4642      	mov	r2, r8
   12e08:	4638      	mov	r0, r7
   12e0a:	f011 fbeb 	bl	245e4 <printk>
   12e0e:	4040      	eors	r0, r0
   12e10:	f380 8811 	msr	BASEPRI, r0
   12e14:	f04f 0003 	mov.w	r0, #3
   12e18:	df02      	svc	2
   12e1a:	792b      	ldrb	r3, [r5, #4]
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
   12e1c:	b963      	cbnz	r3, 12e38 <ll_rx_mem_release+0x168>
   12e1e:	493c      	ldr	r1, [pc, #240]	; (12f10 <ll_rx_mem_release+0x240>)
   12e20:	f240 43dc 	movw	r3, #1244	; 0x4dc
   12e24:	4642      	mov	r2, r8
   12e26:	4638      	mov	r0, r7
   12e28:	f011 fbdc 	bl	245e4 <printk>
   12e2c:	4040      	eors	r0, r0
   12e2e:	f380 8811 	msr	BASEPRI, r0
   12e32:	f04f 0003 	mov.w	r0, #3
   12e36:	df02      	svc	2
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   12e38:	7833      	ldrb	r3, [r6, #0]
   12e3a:	2b06      	cmp	r3, #6
   12e3c:	d82d      	bhi.n	12e9a <ll_rx_mem_release+0x1ca>
	mem_link_rx.quota_pdu += delta;
   12e3e:	3301      	adds	r3, #1
			mem_release(rx_free, &mem_pdu_rx.free);
   12e40:	4934      	ldr	r1, [pc, #208]	; (12f14 <ll_rx_mem_release+0x244>)
	mem_link_rx.quota_pdu += delta;
   12e42:	7033      	strb	r3, [r6, #0]
			mem_release(rx_free, &mem_pdu_rx.free);
   12e44:	4628      	mov	r0, r5
   12e46:	f7fb ffb7 	bl	edb8 <mem_release>
	while (rx) {
   12e4a:	2c00      	cmp	r4, #0
   12e4c:	f47f af4b 	bne.w	12ce6 <ll_rx_mem_release+0x16>
   12e50:	e76d      	b.n	12d2e <ll_rx_mem_release+0x5e>
			conn = ll_conn_get(rx_free->handle);
   12e52:	88e8      	ldrh	r0, [r5, #6]
   12e54:	f001 fd3e 	bl	148d4 <ll_conn_get>
			LL_ASSERT(!conn->lll.link_tx_free);
   12e58:	6f43      	ldr	r3, [r0, #116]	; 0x74
			conn = ll_conn_get(rx_free->handle);
   12e5a:	4605      	mov	r5, r0
			LL_ASSERT(!conn->lll.link_tx_free);
   12e5c:	b163      	cbz	r3, 12e78 <ll_rx_mem_release+0x1a8>
   12e5e:	492e      	ldr	r1, [pc, #184]	; (12f18 <ll_rx_mem_release+0x248>)
   12e60:	f240 5303 	movw	r3, #1283	; 0x503
   12e64:	4642      	mov	r2, r8
   12e66:	4638      	mov	r0, r7
   12e68:	f011 fbbc 	bl	245e4 <printk>
   12e6c:	4040      	eors	r0, r0
   12e6e:	f380 8811 	msr	BASEPRI, r0
   12e72:	f04f 0003 	mov.w	r0, #3
   12e76:	df02      	svc	2
			link = memq_deinit(&conn->lll.memq_tx.head,
   12e78:	f105 0168 	add.w	r1, r5, #104	; 0x68
   12e7c:	f105 0064 	add.w	r0, r5, #100	; 0x64
   12e80:	f7fb ffdc 	bl	ee3c <memq_deinit>
			LL_ASSERT(link);
   12e84:	4683      	mov	fp, r0
   12e86:	b318      	cbz	r0, 12ed0 <ll_rx_mem_release+0x200>
			conn->lll.link_tx_free = link;
   12e88:	f8c5 b074 	str.w	fp, [r5, #116]	; 0x74
			ll_conn_release(conn);
   12e8c:	4628      	mov	r0, r5
   12e8e:	f001 fd13 	bl	148b8 <ll_conn_release>
	while (rx) {
   12e92:	2c00      	cmp	r4, #0
   12e94:	f47f af27 	bne.w	12ce6 <ll_rx_mem_release+0x16>
   12e98:	e749      	b.n	12d2e <ll_rx_mem_release+0x5e>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   12e9a:	4920      	ldr	r1, [pc, #128]	; (12f1c <ll_rx_mem_release+0x24c>)
   12e9c:	f240 531c 	movw	r3, #1308	; 0x51c
   12ea0:	4642      	mov	r2, r8
   12ea2:	4638      	mov	r0, r7
   12ea4:	f011 fb9e 	bl	245e4 <printk>
   12ea8:	4040      	eors	r0, r0
   12eaa:	f380 8811 	msr	BASEPRI, r0
   12eae:	f04f 0003 	mov.w	r0, #3
   12eb2:	df02      	svc	2
   12eb4:	7833      	ldrb	r3, [r6, #0]
   12eb6:	e7c2      	b.n	12e3e <ll_rx_mem_release+0x16e>
	if (!max) {
   12eb8:	2f00      	cmp	r7, #0
   12eba:	d09b      	beq.n	12df4 <ll_rx_mem_release+0x124>
   12ebc:	7833      	ldrb	r3, [r6, #0]
   12ebe:	e76b      	b.n	12d98 <ll_rx_mem_release+0xc8>
				mem_release(rx_free, &mem_pdu_rx.free);
   12ec0:	4914      	ldr	r1, [pc, #80]	; (12f14 <ll_rx_mem_release+0x244>)
   12ec2:	4628      	mov	r0, r5
   12ec4:	f7fb ff78 	bl	edb8 <mem_release>
	while (rx) {
   12ec8:	2c00      	cmp	r4, #0
   12eca:	f47f af0c 	bne.w	12ce6 <ll_rx_mem_release+0x16>
   12ece:	e72e      	b.n	12d2e <ll_rx_mem_release+0x5e>
			LL_ASSERT(link);
   12ed0:	4913      	ldr	r1, [pc, #76]	; (12f20 <ll_rx_mem_release+0x250>)
   12ed2:	f240 5306 	movw	r3, #1286	; 0x506
   12ed6:	4642      	mov	r2, r8
   12ed8:	4638      	mov	r0, r7
   12eda:	f011 fb83 	bl	245e4 <printk>
   12ede:	4040      	eors	r0, r0
   12ee0:	f380 8811 	msr	BASEPRI, r0
   12ee4:	f04f 0003 	mov.w	r0, #3
   12ee8:	df02      	svc	2
   12eea:	e7cd      	b.n	12e88 <ll_rx_mem_release+0x1b8>
			mem_release(link, &mem_link_rx.free);
   12eec:	4650      	mov	r0, sl
   12eee:	4906      	ldr	r1, [pc, #24]	; (12f08 <ll_rx_mem_release+0x238>)
}
   12ef0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mem_release(link, &mem_link_rx.free);
   12ef4:	f7fb bf60 	b.w	edb8 <mem_release>
   12ef8:	2000119c 	.word	0x2000119c
   12efc:	0002b0c4 	.word	0x0002b0c4
   12f00:	200078cc 	.word	0x200078cc
   12f04:	200078b8 	.word	0x200078b8
   12f08:	200011a0 	.word	0x200011a0
   12f0c:	0002b410 	.word	0x0002b410
   12f10:	0002b41c 	.word	0x0002b41c
   12f14:	200011fc 	.word	0x200011fc
   12f18:	0002b440 	.word	0x0002b440
   12f1c:	0002b398 	.word	0x0002b398
   12f20:	0002b65c 	.word	0x0002b65c
   12f24:	0002b320 	.word	0x0002b320
   12f28:	0002b15c 	.word	0x0002b15c

00012f2c <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
   12f2c:	4801      	ldr	r0, [pc, #4]	; (12f34 <ll_rx_link_alloc+0x8>)
   12f2e:	f7fb bf2d 	b.w	ed8c <mem_acquire>
   12f32:	bf00      	nop
   12f34:	200011a0 	.word	0x200011a0

00012f38 <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
   12f38:	4901      	ldr	r1, [pc, #4]	; (12f40 <ll_rx_link_release+0x8>)
   12f3a:	f7fb bf3d 	b.w	edb8 <mem_release>
   12f3e:	bf00      	nop
   12f40:	200011a0 	.word	0x200011a0

00012f44 <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
   12f44:	4801      	ldr	r0, [pc, #4]	; (12f4c <ll_rx_alloc+0x8>)
   12f46:	f7fb bf21 	b.w	ed8c <mem_acquire>
   12f4a:	bf00      	nop
   12f4c:	200011fc 	.word	0x200011fc

00012f50 <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
   12f50:	4901      	ldr	r1, [pc, #4]	; (12f58 <ll_rx_release+0x8>)
   12f52:	f7fb bf31 	b.w	edb8 <mem_release>
   12f56:	bf00      	nop
   12f58:	200011fc 	.word	0x200011fc

00012f5c <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
   12f5c:	4b02      	ldr	r3, [pc, #8]	; (12f68 <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   12f5e:	4a03      	ldr	r2, [pc, #12]	; (12f6c <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   12f60:	78db      	ldrb	r3, [r3, #3]
   12f62:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   12f64:	f7fb bf74 	b.w	ee50 <memq_enqueue>
   12f68:	200079e8 	.word	0x200079e8
   12f6c:	2000148c 	.word	0x2000148c

00012f70 <ll_rx_sched>:
	k_sem_give(sem_recv);
   12f70:	4b08      	ldr	r3, [pc, #32]	; (12f94 <ll_rx_sched+0x24>)
   12f72:	6818      	ldr	r0, [r3, #0]
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   12f74:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   12f78:	b91b      	cbnz	r3, 12f82 <ll_rx_sched+0x12>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   12f7a:	f3ef 8314 	mrs	r3, CONTROL
	if (z_syscall_trap()) {
   12f7e:	07db      	lsls	r3, r3, #31
   12f80:	d401      	bmi.n	12f86 <ll_rx_sched+0x16>
	z_impl_k_sem_give(sem);
   12f82:	f00f b83f 	b.w	22004 <z_impl_k_sem_give>
{
   12f86:	e92d 0140 	stmdb	sp!, {r6, r8}
	register uint32_t r6 __asm__("r6") = call_id;
   12f8a:	26a0      	movs	r6, #160	; 0xa0
	__asm__ volatile("svc %[svid]\n"
   12f8c:	df03      	svc	3
}
   12f8e:	e8bd 0140 	ldmia.w	sp!, {r6, r8}
   12f92:	4770      	bx	lr
   12f94:	200014a0 	.word	0x200014a0

00012f98 <ll_pdu_rx_alloc_peek>:
{
   12f98:	b410      	push	{r4}
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   12f9a:	4b0d      	ldr	r3, [pc, #52]	; (12fd0 <ll_pdu_rx_alloc_peek+0x38>)
   12f9c:	789a      	ldrb	r2, [r3, #2]
   12f9e:	78dc      	ldrb	r4, [r3, #3]
	if (last >= first) {
   12fa0:	42a2      	cmp	r2, r4
   12fa2:	d809      	bhi.n	12fb8 <ll_pdu_rx_alloc_peek+0x20>
		return last - first;
   12fa4:	1aa1      	subs	r1, r4, r2
   12fa6:	b2c9      	uxtb	r1, r1
   12fa8:	4288      	cmp	r0, r1
   12faa:	d802      	bhi.n	12fb2 <ll_pdu_rx_alloc_peek+0x1a>
	if (first == last) {
   12fac:	42a2      	cmp	r2, r4
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   12fae:	7819      	ldrb	r1, [r3, #0]
   12fb0:	d109      	bne.n	12fc6 <ll_pdu_rx_alloc_peek+0x2e>
		return NULL;
   12fb2:	2000      	movs	r0, #0
}
   12fb4:	bc10      	pop	{r4}
   12fb6:	4770      	bx	lr
		return count - first + last;
   12fb8:	7859      	ldrb	r1, [r3, #1]
   12fba:	1a89      	subs	r1, r1, r2
   12fbc:	4421      	add	r1, r4
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   12fbe:	b2c9      	uxtb	r1, r1
   12fc0:	4288      	cmp	r0, r1
   12fc2:	d8f6      	bhi.n	12fb2 <ll_pdu_rx_alloc_peek+0x1a>
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   12fc4:	7819      	ldrb	r1, [r3, #0]
}
   12fc6:	bc10      	pop	{r4}
	return *((void **)(fifo + first * size));
   12fc8:	fb02 3301 	mla	r3, r2, r1, r3
   12fcc:	6858      	ldr	r0, [r3, #4]
   12fce:	4770      	bx	lr
   12fd0:	200078b8 	.word	0x200078b8

00012fd4 <ll_pdu_rx_alloc>:
{
   12fd4:	b410      	push	{r4}
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   12fd6:	4b0a      	ldr	r3, [pc, #40]	; (13000 <ll_pdu_rx_alloc+0x2c>)
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
   12fd8:	7899      	ldrb	r1, [r3, #2]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
   12fda:	78da      	ldrb	r2, [r3, #3]
   12fdc:	7818      	ldrb	r0, [r3, #0]
   12fde:	785c      	ldrb	r4, [r3, #1]
   12fe0:	428a      	cmp	r2, r1
   12fe2:	d00a      	beq.n	12ffa <ll_pdu_rx_alloc+0x26>
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
   12fe4:	1c4a      	adds	r2, r1, #1
   12fe6:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   12fe8:	fb01 3100 	mla	r1, r1, r0, r3
	if (_first == count) {
		_first = 0U;
   12fec:	4294      	cmp	r4, r2
   12fee:	bf08      	it	eq
   12ff0:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   12ff2:	6848      	ldr	r0, [r1, #4]
	}

	*first = _first; /* Write back read-index */
   12ff4:	709a      	strb	r2, [r3, #2]
}
   12ff6:	bc10      	pop	{r4}
   12ff8:	4770      	bx	lr
		return NULL;
   12ffa:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   12ffc:	e7fb      	b.n	12ff6 <ll_pdu_rx_alloc+0x22>
   12ffe:	bf00      	nop
   13000:	200078b8 	.word	0x200078b8

00013004 <ll_tx_ack_put>:
{
   13004:	b570      	push	{r4, r5, r6, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
   13006:	4a13      	ldr	r2, [pc, #76]	; (13054 <ll_tx_ack_put+0x50>)
   13008:	78d6      	ldrb	r6, [r2, #3]
	if (last == count) {
   1300a:	7855      	ldrb	r5, [r2, #1]
   1300c:	7894      	ldrb	r4, [r2, #2]
	last = last + 1;
   1300e:	1c73      	adds	r3, r6, #1
   13010:	b2db      	uxtb	r3, r3
		last = 0U;
   13012:	429d      	cmp	r5, r3
   13014:	bf08      	it	eq
   13016:	2300      	moveq	r3, #0
	if (last == first) {
   13018:	429c      	cmp	r4, r3
   1301a:	d00a      	beq.n	13032 <ll_tx_ack_put+0x2e>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1301c:	4615      	mov	r5, r2
   1301e:	f815 4b04 	ldrb.w	r4, [r5], #4
   13022:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(tx);
   13026:	192e      	adds	r6, r5, r4
   13028:	d003      	beq.n	13032 <ll_tx_ack_put+0x2e>
	tx->handle = handle;
   1302a:	5328      	strh	r0, [r5, r4]
	tx->node = node_tx;
   1302c:	6071      	str	r1, [r6, #4]
	*last = idx; /* Commit: Update write index */
   1302e:	70d3      	strb	r3, [r2, #3]
}
   13030:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(tx);
   13032:	4a09      	ldr	r2, [pc, #36]	; (13058 <ll_tx_ack_put+0x54>)
   13034:	4909      	ldr	r1, [pc, #36]	; (1305c <ll_tx_ack_put+0x58>)
   13036:	480a      	ldr	r0, [pc, #40]	; (13060 <ll_tx_ack_put+0x5c>)
   13038:	f240 5364 	movw	r3, #1380	; 0x564
   1303c:	f011 fad2 	bl	245e4 <printk>
   13040:	4040      	eors	r0, r0
   13042:	f380 8811 	msr	BASEPRI, r0
   13046:	f04f 0003 	mov.w	r0, #3
   1304a:	df02      	svc	2
	tx->handle = handle;
   1304c:	2300      	movs	r3, #0
   1304e:	801b      	strh	r3, [r3, #0]
   13050:	deff      	udf	#255	; 0xff
   13052:	bf00      	nop
   13054:	200079e8 	.word	0x200079e8
   13058:	0002b320 	.word	0x0002b320
   1305c:	0002b650 	.word	0x0002b650
   13060:	0002b0c4 	.word	0x0002b0c4

00013064 <ull_ticker_status_take>:
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   13064:	f030 0302 	bics.w	r3, r0, #2
{
   13068:	e92d 4150 	stmdb	sp!, {r4, r6, r8, lr}
   1306c:	460c      	mov	r4, r1
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1306e:	d002      	beq.n	13076 <ull_ticker_status_take+0x12>
   13070:	680b      	ldr	r3, [r1, #0]
   13072:	2b02      	cmp	r3, #2
   13074:	d019      	beq.n	130aa <ull_ticker_status_take+0x46>
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   13076:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   1307a:	b91b      	cbnz	r3, 13084 <ull_ticker_status_take+0x20>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   1307c:	f3ef 8314 	mrs	r3, CONTROL
	if (z_syscall_trap()) {
   13080:	07db      	lsls	r3, r3, #31
   13082:	d409      	bmi.n	13098 <ull_ticker_status_take+0x34>
	return z_impl_k_sem_take(sem, timeout);
   13084:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13088:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1308c:	480e      	ldr	r0, [pc, #56]	; (130c8 <ull_ticker_status_take+0x64>)
   1308e:	f00f f81b 	bl	220c8 <z_impl_k_sem_take>
	return *ret_cb;
   13092:	6820      	ldr	r0, [r4, #0]
}
   13094:	e8bd 8150 	ldmia.w	sp!, {r4, r6, r8, pc}
	register uint32_t r1 __asm__("r1") = arg2;
   13098:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	register uint32_t r2 __asm__("r2") = arg3;
   1309c:	460a      	mov	r2, r1
	register uint32_t ret __asm__("r0") = arg1;
   1309e:	480a      	ldr	r0, [pc, #40]	; (130c8 <ull_ticker_status_take+0x64>)
	register uint32_t r6 __asm__("r6") = call_id;
   130a0:	26a3      	movs	r6, #163	; 0xa3
	__asm__ volatile("svc %[svid]\n"
   130a2:	df03      	svc	3
	return *ret_cb;
   130a4:	6820      	ldr	r0, [r4, #0]
}
   130a6:	e8bd 8150 	ldmia.w	sp!, {r4, r6, r8, pc}
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   130aa:	4a08      	ldr	r2, [pc, #32]	; (130cc <ull_ticker_status_take+0x68>)
   130ac:	4908      	ldr	r1, [pc, #32]	; (130d0 <ull_ticker_status_take+0x6c>)
   130ae:	4809      	ldr	r0, [pc, #36]	; (130d4 <ull_ticker_status_take+0x70>)
   130b0:	f44f 63b3 	mov.w	r3, #1432	; 0x598
   130b4:	f011 fa96 	bl	245e4 <printk>
   130b8:	4040      	eors	r0, r0
   130ba:	f380 8811 	msr	BASEPRI, r0
   130be:	f04f 0003 	mov.w	r0, #3
   130c2:	df02      	svc	2
   130c4:	e7d7      	b.n	13076 <ull_ticker_status_take+0x12>
   130c6:	bf00      	nop
   130c8:	200014a4 	.word	0x200014a4
   130cc:	0002b320 	.word	0x0002b320
   130d0:	0002b460 	.word	0x0002b460
   130d4:	0002b0c4 	.word	0x0002b0c4

000130d8 <ull_disable_mark>:
	if (!*m) {
   130d8:	4a04      	ldr	r2, [pc, #16]	; (130ec <ull_disable_mark+0x14>)
   130da:	6813      	ldr	r3, [r2, #0]
   130dc:	b10b      	cbz	r3, 130e2 <ull_disable_mark+0xa>
}
   130de:	4618      	mov	r0, r3
   130e0:	4770      	bx	lr
		*m = param;
   130e2:	4603      	mov	r3, r0
   130e4:	6010      	str	r0, [r2, #0]
}
   130e6:	4618      	mov	r0, r3
   130e8:	4770      	bx	lr
   130ea:	bf00      	nop
   130ec:	200010d0 	.word	0x200010d0

000130f0 <ull_disable_unmark>:
	if (*m && *m == param) {
   130f0:	4a04      	ldr	r2, [pc, #16]	; (13104 <ull_disable_unmark+0x14>)
   130f2:	6813      	ldr	r3, [r2, #0]
   130f4:	b123      	cbz	r3, 13100 <ull_disable_unmark+0x10>
   130f6:	4298      	cmp	r0, r3
		*m = NULL;
   130f8:	bf06      	itte	eq
   130fa:	2100      	moveq	r1, #0
   130fc:	6011      	streq	r1, [r2, #0]
	return NULL;
   130fe:	2300      	movne	r3, #0
}
   13100:	4618      	mov	r0, r3
   13102:	4770      	bx	lr
   13104:	200010d0 	.word	0x200010d0

00013108 <ull_disable_mark_get>:
	return mark_get(mark_disable);
   13108:	4b01      	ldr	r3, [pc, #4]	; (13110 <ull_disable_mark_get+0x8>)
}
   1310a:	6818      	ldr	r0, [r3, #0]
   1310c:	4770      	bx	lr
   1310e:	bf00      	nop
   13110:	200010d0 	.word	0x200010d0

00013114 <ull_update_mark>:
	if (!*m) {
   13114:	4a04      	ldr	r2, [pc, #16]	; (13128 <ull_update_mark+0x14>)
   13116:	6813      	ldr	r3, [r2, #0]
   13118:	b10b      	cbz	r3, 1311e <ull_update_mark+0xa>
}
   1311a:	4618      	mov	r0, r3
   1311c:	4770      	bx	lr
		*m = param;
   1311e:	4603      	mov	r3, r0
   13120:	6010      	str	r0, [r2, #0]
}
   13122:	4618      	mov	r0, r3
   13124:	4770      	bx	lr
   13126:	bf00      	nop
   13128:	200010d4 	.word	0x200010d4

0001312c <ull_update_unmark>:
	if (*m && *m == param) {
   1312c:	4a04      	ldr	r2, [pc, #16]	; (13140 <ull_update_unmark+0x14>)
   1312e:	6813      	ldr	r3, [r2, #0]
   13130:	b123      	cbz	r3, 1313c <ull_update_unmark+0x10>
   13132:	4298      	cmp	r0, r3
		*m = NULL;
   13134:	bf06      	itte	eq
   13136:	2100      	moveq	r1, #0
   13138:	6011      	streq	r1, [r2, #0]
	return NULL;
   1313a:	2300      	movne	r3, #0
}
   1313c:	4618      	mov	r0, r3
   1313e:	4770      	bx	lr
   13140:	200010d4 	.word	0x200010d4

00013144 <ull_update_mark_get>:
	return mark_get(mark_update);
   13144:	4b01      	ldr	r3, [pc, #4]	; (1314c <ull_update_mark_get+0x8>)
}
   13146:	6818      	ldr	r0, [r3, #0]
   13148:	4770      	bx	lr
   1314a:	bf00      	nop
   1314c:	200010d4 	.word	0x200010d4

00013150 <ull_disable>:
{
   13150:	e92d 4170 	stmdb	sp!, {r4, r5, r6, r8, lr}
	hdr = HDR_ULL(((struct lll_hdr *)lll)->parent);
   13154:	6805      	ldr	r5, [r0, #0]
	if (!hdr) {
   13156:	f115 0f10 	cmn.w	r5, #16
{
   1315a:	b087      	sub	sp, #28
	if (!hdr) {
   1315c:	d012      	beq.n	13184 <ull_disable+0x34>
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   1315e:	4604      	mov	r4, r0
   13160:	f3ef 8105 	mrs	r1, IPSR
	if (value) {
   13164:	b919      	cbnz	r1, 1316e <ull_disable+0x1e>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   13166:	f3ef 8314 	mrs	r3, CONTROL
	if (z_syscall_trap()) {
   1316a:	07da      	lsls	r2, r3, #31
   1316c:	d427      	bmi.n	131be <ull_disable+0x6e>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1316e:	466e      	mov	r6, sp
   13170:	4630      	mov	r0, r6
   13172:	2201      	movs	r2, #1
   13174:	2100      	movs	r1, #0
   13176:	f016 fc6a 	bl	29a4e <z_impl_k_sem_init>
	hdr->disabled_cb = disabled_cb;
   1317a:	4a1e      	ldr	r2, [pc, #120]	; (131f4 <ull_disable+0xa4>)
   1317c:	7c2b      	ldrb	r3, [r5, #16]
   1317e:	e9c5 2605 	strd	r2, r6, [r5, #20]
	if (!ull_ref_get(hdr)) {
   13182:	b91b      	cbnz	r3, 1318c <ull_disable+0x3c>
		return ULL_STATUS_SUCCESS;
   13184:	2000      	movs	r0, #0
}
   13186:	b007      	add	sp, #28
   13188:	e8bd 8170 	ldmia.w	sp!, {r4, r5, r6, r8, pc}
	mfy.param = lll;
   1318c:	4b1a      	ldr	r3, [pc, #104]	; (131f8 <ull_disable+0xa8>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   1318e:	2200      	movs	r2, #0
   13190:	4611      	mov	r1, r2
   13192:	2003      	movs	r0, #3
	mfy.param = lll;
   13194:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   13196:	f7fb fecf 	bl	ef38 <mayfly_enqueue>
	LL_ASSERT(!ret);
   1319a:	b9e8      	cbnz	r0, 131d8 <ull_disable+0x88>
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   1319c:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   131a0:	b91b      	cbnz	r3, 131aa <ull_disable+0x5a>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   131a2:	f3ef 8314 	mrs	r3, CONTROL
	if (z_syscall_trap()) {
   131a6:	07db      	lsls	r3, r3, #31
   131a8:	d40f      	bmi.n	131ca <ull_disable+0x7a>
	return z_impl_k_sem_take(sem, timeout);
   131aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   131ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   131b2:	4630      	mov	r0, r6
   131b4:	f00e ff88 	bl	220c8 <z_impl_k_sem_take>
}
   131b8:	b007      	add	sp, #28
   131ba:	e8bd 8170 	ldmia.w	sp!, {r4, r5, r6, r8, pc}
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
   131be:	4668      	mov	r0, sp
	register uint32_t r2 __asm__("r2") = arg3;
   131c0:	2201      	movs	r2, #1
	register uint32_t r6 __asm__("r6") = call_id;
   131c2:	26a1      	movs	r6, #161	; 0xa1
	__asm__ volatile("svc %[svid]\n"
   131c4:	df03      	svc	3
	return ret;
   131c6:	466e      	mov	r6, sp
   131c8:	e7d7      	b.n	1317a <ull_disable+0x2a>
	register uint32_t r1 __asm__("r1") = arg2;
   131ca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	register uint32_t r2 __asm__("r2") = arg3;
   131ce:	460a      	mov	r2, r1
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
   131d0:	4668      	mov	r0, sp
	register uint32_t r6 __asm__("r6") = call_id;
   131d2:	26a3      	movs	r6, #163	; 0xa3
	__asm__ volatile("svc %[svid]\n"
   131d4:	df03      	svc	3
	return ret;
   131d6:	e7d6      	b.n	13186 <ull_disable+0x36>
	LL_ASSERT(!ret);
   131d8:	4a08      	ldr	r2, [pc, #32]	; (131fc <ull_disable+0xac>)
   131da:	4909      	ldr	r1, [pc, #36]	; (13200 <ull_disable+0xb0>)
   131dc:	4809      	ldr	r0, [pc, #36]	; (13204 <ull_disable+0xb4>)
   131de:	f240 630a 	movw	r3, #1546	; 0x60a
   131e2:	f011 f9ff 	bl	245e4 <printk>
   131e6:	4040      	eors	r0, r0
   131e8:	f380 8811 	msr	BASEPRI, r0
   131ec:	f04f 0003 	mov.w	r0, #3
   131f0:	df02      	svc	2
   131f2:	e7d3      	b.n	1319c <ull_disable+0x4c>
   131f4:	00011fe9 	.word	0x00011fe9
   131f8:	20007a1c 	.word	0x20007a1c
   131fc:	0002b320 	.word	0x0002b320
   13200:	0002b458 	.word	0x0002b458
   13204:	0002b0c4 	.word	0x0002b0c4

00013208 <ull_ticker_stop_with_mark>:
{
   13208:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!*m) {
   1320a:	4d1d      	ldr	r5, [pc, #116]	; (13280 <ull_ticker_stop_with_mark+0x78>)
   1320c:	682b      	ldr	r3, [r5, #0]
{
   1320e:	b085      	sub	sp, #20
   13210:	460c      	mov	r4, r1
   13212:	4616      	mov	r6, r2
	if (!*m) {
   13214:	b323      	cbz	r3, 13260 <ull_ticker_stop_with_mark+0x58>
	if (mark != param) {
   13216:	4299      	cmp	r1, r3
   13218:	d112      	bne.n	13240 <ull_ticker_stop_with_mark+0x38>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   1321a:	af03      	add	r7, sp, #12
	ret_cb = TICKER_STATUS_BUSY;
   1321c:	2102      	movs	r1, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   1321e:	4602      	mov	r2, r0
	ret_cb = TICKER_STATUS_BUSY;
   13220:	9103      	str	r1, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   13222:	4b18      	ldr	r3, [pc, #96]	; (13284 <ull_ticker_stop_with_mark+0x7c>)
   13224:	9700      	str	r7, [sp, #0]
   13226:	2103      	movs	r1, #3
   13228:	2000      	movs	r0, #0
   1322a:	f7fd f98b 	bl	10544 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   1322e:	4639      	mov	r1, r7
   13230:	f7ff ff18 	bl	13064 <ull_ticker_status_take>
	if (ret) {
   13234:	b140      	cbz	r0, 13248 <ull_ticker_stop_with_mark+0x40>
	if (*m && *m == param) {
   13236:	682b      	ldr	r3, [r5, #0]
   13238:	b10b      	cbz	r3, 1323e <ull_ticker_stop_with_mark+0x36>
   1323a:	429c      	cmp	r4, r3
   1323c:	d012      	beq.n	13264 <ull_ticker_stop_with_mark+0x5c>
		if (mark != param) {
   1323e:	b1cc      	cbz	r4, 13274 <ull_ticker_stop_with_mark+0x6c>
			return -ENOLCK;
   13240:	f06f 002d 	mvn.w	r0, #45	; 0x2d
}
   13244:	b005      	add	sp, #20
   13246:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = ull_disable(lll_disable);
   13248:	4630      	mov	r0, r6
   1324a:	f7ff ff81 	bl	13150 <ull_disable>
	if (ret) {
   1324e:	b9a0      	cbnz	r0, 1327a <ull_ticker_stop_with_mark+0x72>
	if (*m && *m == param) {
   13250:	682b      	ldr	r3, [r5, #0]
   13252:	b10b      	cbz	r3, 13258 <ull_ticker_stop_with_mark+0x50>
   13254:	429c      	cmp	r4, r3
   13256:	d00b      	beq.n	13270 <ull_ticker_stop_with_mark+0x68>
	if (mark != param) {
   13258:	2c00      	cmp	r4, #0
   1325a:	d1f1      	bne.n	13240 <ull_ticker_stop_with_mark+0x38>
}
   1325c:	b005      	add	sp, #20
   1325e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = param;
   13260:	6029      	str	r1, [r5, #0]
	if (mark != param) {
   13262:	e7da      	b.n	1321a <ull_ticker_stop_with_mark+0x12>
		*m = NULL;
   13264:	2300      	movs	r3, #0
		return -EALREADY;
   13266:	f06f 0077 	mvn.w	r0, #119	; 0x77
		*m = NULL;
   1326a:	602b      	str	r3, [r5, #0]
}
   1326c:	b005      	add	sp, #20
   1326e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = NULL;
   13270:	6028      	str	r0, [r5, #0]
	if (mark != param) {
   13272:	e7e7      	b.n	13244 <ull_ticker_stop_with_mark+0x3c>
		return -EALREADY;
   13274:	f06f 0077 	mvn.w	r0, #119	; 0x77
   13278:	e7e4      	b.n	13244 <ull_ticker_stop_with_mark+0x3c>
		return -EBUSY;
   1327a:	f06f 000f 	mvn.w	r0, #15
   1327e:	e7e1      	b.n	13244 <ull_ticker_stop_with_mark+0x3c>
   13280:	200010d0 	.word	0x200010d0
   13284:	0001200d 	.word	0x0001200d

00013288 <ull_pdu_rx_alloc_peek>:
{
   13288:	b410      	push	{r4}
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   1328a:	4b0d      	ldr	r3, [pc, #52]	; (132c0 <ull_pdu_rx_alloc_peek+0x38>)
   1328c:	789a      	ldrb	r2, [r3, #2]
   1328e:	78dc      	ldrb	r4, [r3, #3]
	if (last >= first) {
   13290:	42a2      	cmp	r2, r4
   13292:	d809      	bhi.n	132a8 <ull_pdu_rx_alloc_peek+0x20>
		return last - first;
   13294:	1aa1      	subs	r1, r4, r2
   13296:	b2c9      	uxtb	r1, r1
   13298:	4288      	cmp	r0, r1
   1329a:	d802      	bhi.n	132a2 <ull_pdu_rx_alloc_peek+0x1a>
	if (first == last) {
   1329c:	42a2      	cmp	r2, r4
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   1329e:	7819      	ldrb	r1, [r3, #0]
   132a0:	d109      	bne.n	132b6 <ull_pdu_rx_alloc_peek+0x2e>
		return NULL;
   132a2:	2000      	movs	r0, #0
}
   132a4:	bc10      	pop	{r4}
   132a6:	4770      	bx	lr
		return count - first + last;
   132a8:	7859      	ldrb	r1, [r3, #1]
   132aa:	1a89      	subs	r1, r1, r2
   132ac:	4421      	add	r1, r4
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   132ae:	b2c9      	uxtb	r1, r1
   132b0:	4288      	cmp	r0, r1
   132b2:	d8f6      	bhi.n	132a2 <ull_pdu_rx_alloc_peek+0x1a>
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   132b4:	7819      	ldrb	r1, [r3, #0]
}
   132b6:	bc10      	pop	{r4}
	return *((void **)(fifo + first * size));
   132b8:	fb02 3301 	mla	r3, r2, r1, r3
   132bc:	6858      	ldr	r0, [r3, #4]
   132be:	4770      	bx	lr
   132c0:	200078cc 	.word	0x200078cc

000132c4 <ull_pdu_rx_alloc>:
{
   132c4:	b410      	push	{r4}
	return MFIFO_DEQUEUE(pdu_rx_free);
   132c6:	4b0a      	ldr	r3, [pc, #40]	; (132f0 <ull_pdu_rx_alloc+0x2c>)
	uint8_t _first = *first; /* Copy read-index */
   132c8:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   132ca:	78da      	ldrb	r2, [r3, #3]
   132cc:	7818      	ldrb	r0, [r3, #0]
   132ce:	785c      	ldrb	r4, [r3, #1]
   132d0:	428a      	cmp	r2, r1
   132d2:	d00a      	beq.n	132ea <ull_pdu_rx_alloc+0x26>
	_first += 1U;
   132d4:	1c4a      	adds	r2, r1, #1
   132d6:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   132d8:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   132dc:	4294      	cmp	r4, r2
   132de:	bf08      	it	eq
   132e0:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   132e2:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   132e4:	709a      	strb	r2, [r3, #2]
}
   132e6:	bc10      	pop	{r4}
   132e8:	4770      	bx	lr
		return NULL;
   132ea:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(pdu_rx_free);
   132ec:	e7fb      	b.n	132e6 <ull_pdu_rx_alloc+0x22>
   132ee:	bf00      	nop
   132f0:	200078cc 	.word	0x200078cc

000132f4 <ull_rx_put>:
{
   132f4:	b538      	push	{r3, r4, r5, lr}
   132f6:	460c      	mov	r4, r1
   132f8:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   132fa:	f005 f92d 	bl	18558 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   132fe:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   13300:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   13302:	4a03      	ldr	r2, [pc, #12]	; (13310 <ull_rx_put+0x1c>)
   13304:	4628      	mov	r0, r5
}
   13306:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   1330a:	f7fb bda1 	b.w	ee50 <memq_enqueue>
   1330e:	bf00      	nop
   13310:	2000149c 	.word	0x2000149c

00013314 <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   13314:	2201      	movs	r2, #1
   13316:	4b02      	ldr	r3, [pc, #8]	; (13320 <ull_rx_sched+0xc>)
   13318:	4611      	mov	r1, r2
   1331a:	2000      	movs	r0, #0
   1331c:	f7fb be0c 	b.w	ef38 <mayfly_enqueue>
   13320:	20007a2c 	.word	0x20007a2c

00013324 <ull_prepare_enqueue>:
{
   13324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   13328:	4e1c      	ldr	r6, [pc, #112]	; (1339c <ull_prepare_enqueue+0x78>)
{
   1332a:	f89d e024 	ldrb.w	lr, [sp, #36]	; 0x24
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   1332e:	78f4      	ldrb	r4, [r6, #3]
	if (last == count) {
   13330:	f896 c001 	ldrb.w	ip, [r6, #1]
   13334:	78b7      	ldrb	r7, [r6, #2]
	last = last + 1;
   13336:	1c65      	adds	r5, r4, #1
   13338:	b2ed      	uxtb	r5, r5
		last = 0U;
   1333a:	45ac      	cmp	ip, r5
   1333c:	bf08      	it	eq
   1333e:	2500      	moveq	r5, #0
	if (last == first) {
   13340:	42af      	cmp	r7, r5
   13342:	d026      	beq.n	13392 <ull_prepare_enqueue+0x6e>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   13344:	46b4      	mov	ip, r6
   13346:	f81c 7b04 	ldrb.w	r7, [ip], #4
   1334a:	fb17 f704 	smulbb	r7, r7, r4
	if (!e) {
   1334e:	eb1c 0407 	adds.w	r4, ip, r7
   13352:	d01e      	beq.n	13392 <ull_prepare_enqueue+0x6e>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   13354:	f8d2 b000 	ldr.w	fp, [r2]
   13358:	f8d2 a004 	ldr.w	sl, [r2, #4]
   1335c:	f8d2 8008 	ldr.w	r8, [r2, #8]
   13360:	f8d2 900c 	ldr.w	r9, [r2, #12]
   13364:	f84c b007 	str.w	fp, [ip, r7]
	e->is_resume = is_resume;
   13368:	7f22      	ldrb	r2, [r4, #28]
   1336a:	f8c4 a004 	str.w	sl, [r4, #4]
   1336e:	f00e 0e01 	and.w	lr, lr, #1
   13372:	f022 0203 	bic.w	r2, r2, #3
   13376:	ea42 020e 	orr.w	r2, r2, lr
   1337a:	f8c4 8008 	str.w	r8, [r4, #8]
   1337e:	f8c4 900c 	str.w	r9, [r4, #12]
	e->is_abort_cb = is_abort_cb;
   13382:	e9c4 3004 	strd	r3, r0, [r4, #16]
	e->abort_cb = abort_cb;
   13386:	61a1      	str	r1, [r4, #24]
	e->is_resume = is_resume;
   13388:	7722      	strb	r2, [r4, #28]
	return 0;
   1338a:	2000      	movs	r0, #0
	*last = idx; /* Commit: Update write index */
   1338c:	70f5      	strb	r5, [r6, #3]
}
   1338e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOBUFS;
   13392:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   13396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1339a:	bf00      	nop
   1339c:	200078e4 	.word	0x200078e4

000133a0 <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
   133a0:	4b05      	ldr	r3, [pc, #20]	; (133b8 <ull_prepare_dequeue_get+0x18>)
   133a2:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
   133a4:	78d9      	ldrb	r1, [r3, #3]
   133a6:	7818      	ldrb	r0, [r3, #0]
   133a8:	4291      	cmp	r1, r2
	return (void *)(fifo + first * size);
   133aa:	bf1a      	itte	ne
   133ac:	3304      	addne	r3, #4
   133ae:	fb02 3000 	mlane	r0, r2, r0, r3
		return NULL;
   133b2:	2000      	moveq	r0, #0
}
   133b4:	4770      	bx	lr
   133b6:	bf00      	nop
   133b8:	200078e4 	.word	0x200078e4

000133bc <ull_prepare_dequeue_iter>:
{
   133bc:	b430      	push	{r4, r5}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   133be:	4b0c      	ldr	r3, [pc, #48]	; (133f0 <ull_prepare_dequeue_iter+0x34>)
	if (*idx >= count) {
   133c0:	7802      	ldrb	r2, [r0, #0]
   133c2:	785c      	ldrb	r4, [r3, #1]
   133c4:	78dd      	ldrb	r5, [r3, #3]
   133c6:	7819      	ldrb	r1, [r3, #0]
   133c8:	4294      	cmp	r4, r2
   133ca:	bf9c      	itt	ls
   133cc:	789a      	ldrbls	r2, [r3, #2]
		*idx = first;
   133ce:	7002      	strbls	r2, [r0, #0]
	if (*idx == last) {
   133d0:	4295      	cmp	r5, r2
   133d2:	d00a      	beq.n	133ea <ull_prepare_dequeue_iter+0x2e>
	i = *idx + 1;
   133d4:	1c53      	adds	r3, r2, #1
	p = (void *)(fifo + (*idx) * size);
   133d6:	4d07      	ldr	r5, [pc, #28]	; (133f4 <ull_prepare_dequeue_iter+0x38>)
	i = *idx + 1;
   133d8:	b2db      	uxtb	r3, r3
		i = 0U;
   133da:	429c      	cmp	r4, r3
   133dc:	bf08      	it	eq
   133de:	2300      	moveq	r3, #0
	*idx = i;
   133e0:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
   133e2:	fb02 5001 	mla	r0, r2, r1, r5
}
   133e6:	bc30      	pop	{r4, r5}
   133e8:	4770      	bx	lr
		return NULL;
   133ea:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   133ec:	e7fb      	b.n	133e6 <ull_prepare_dequeue_iter+0x2a>
   133ee:	bf00      	nop
   133f0:	200078e4 	.word	0x200078e4
   133f4:	200078e8 	.word	0x200078e8

000133f8 <ull_prepare_dequeue>:
{
   133f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return MFIFO_DEQUEUE_GET(prep);
   133fc:	4c26      	ldr	r4, [pc, #152]	; (13498 <ull_prepare_dequeue+0xa0>)
   133fe:	78a2      	ldrb	r2, [r4, #2]
	if (first == last) {
   13400:	78e1      	ldrb	r1, [r4, #3]
   13402:	7823      	ldrb	r3, [r4, #0]
   13404:	4291      	cmp	r1, r2
   13406:	d027      	beq.n	13458 <ull_prepare_dequeue+0x60>
	return (void *)(fifo + first * size);
   13408:	1d27      	adds	r7, r4, #4
   1340a:	fb02 7203 	mla	r2, r2, r3, r7
	while (next) {
   1340e:	b31a      	cbz	r2, 13458 <ull_prepare_dequeue+0x60>
			mfy.param = next;
   13410:	f8df 9088 	ldr.w	r9, [pc, #136]	; 1349c <ull_prepare_dequeue+0xa4>
			LL_ASSERT(!ret);
   13414:	f8df b090 	ldr.w	fp, [pc, #144]	; 134a8 <ull_prepare_dequeue+0xb0>
   13418:	f8df a090 	ldr.w	sl, [pc, #144]	; 134ac <ull_prepare_dequeue+0xb4>
   1341c:	4680      	mov	r8, r0
		uint8_t is_aborted = next->is_aborted;
   1341e:	7f13      	ldrb	r3, [r2, #28]
		if (!is_aborted) {
   13420:	0799      	lsls	r1, r3, #30
		uint8_t is_aborted = next->is_aborted;
   13422:	f3c3 0540 	ubfx	r5, r3, #1, #1
		uint8_t is_resume = next->is_resume;
   13426:	f003 0601 	and.w	r6, r3, #1
		if (!is_aborted) {
   1342a:	d517      	bpl.n	1345c <ull_prepare_dequeue+0x64>
		MFIFO_DEQUEUE(prep);
   1342c:	78e1      	ldrb	r1, [r4, #3]
	uint8_t _first = *first; /* Copy read-index */
   1342e:	78a3      	ldrb	r3, [r4, #2]
   13430:	7822      	ldrb	r2, [r4, #0]
   13432:	7860      	ldrb	r0, [r4, #1]
	if (_first == last) {
   13434:	4299      	cmp	r1, r3
   13436:	d00f      	beq.n	13458 <ull_prepare_dequeue+0x60>
	_first += 1U;
   13438:	3301      	adds	r3, #1
   1343a:	b2db      	uxtb	r3, r3
	if (_first == count) {
   1343c:	4298      	cmp	r0, r3
   1343e:	d025      	beq.n	1348c <ull_prepare_dequeue+0x94>
	if (first == last) {
   13440:	4299      	cmp	r1, r3
	*first = _first; /* Write back read-index */
   13442:	70a3      	strb	r3, [r4, #2]
	if (first == last) {
   13444:	d008      	beq.n	13458 <ull_prepare_dequeue+0x60>
	return (void *)(fifo + first * size);
   13446:	fb03 7202 	mla	r2, r3, r2, r7
		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
   1344a:	b12a      	cbz	r2, 13458 <ull_prepare_dequeue+0x60>
   1344c:	2d00      	cmp	r5, #0
   1344e:	d1e6      	bne.n	1341e <ull_prepare_dequeue+0x26>
   13450:	b116      	cbz	r6, 13458 <ull_prepare_dequeue+0x60>
   13452:	7f13      	ldrb	r3, [r2, #28]
   13454:	07db      	lsls	r3, r3, #31
   13456:	d5e2      	bpl.n	1341e <ull_prepare_dequeue+0x26>
}
   13458:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mfy.param = next;
   1345c:	f8c9 2008 	str.w	r2, [r9, #8]
			ret = mayfly_enqueue(caller_id, TICKER_USER_ID_LLL, 0,
   13460:	4b0e      	ldr	r3, [pc, #56]	; (1349c <ull_prepare_dequeue+0xa4>)
   13462:	462a      	mov	r2, r5
   13464:	4629      	mov	r1, r5
   13466:	4640      	mov	r0, r8
   13468:	f7fb fd66 	bl	ef38 <mayfly_enqueue>
			LL_ASSERT(!ret);
   1346c:	2800      	cmp	r0, #0
   1346e:	d0dd      	beq.n	1342c <ull_prepare_dequeue+0x34>
   13470:	480b      	ldr	r0, [pc, #44]	; (134a0 <ull_prepare_dequeue+0xa8>)
   13472:	f240 6381 	movw	r3, #1665	; 0x681
   13476:	465a      	mov	r2, fp
   13478:	4651      	mov	r1, sl
   1347a:	f011 f8b3 	bl	245e4 <printk>
   1347e:	4040      	eors	r0, r0
   13480:	f380 8811 	msr	BASEPRI, r0
   13484:	f04f 0003 	mov.w	r0, #3
   13488:	df02      	svc	2
   1348a:	e7cf      	b.n	1342c <ull_prepare_dequeue+0x34>
	*first = _first; /* Write back read-index */
   1348c:	2300      	movs	r3, #0
   1348e:	70a3      	strb	r3, [r4, #2]
	if (first == last) {
   13490:	2900      	cmp	r1, #0
   13492:	d0e1      	beq.n	13458 <ull_prepare_dequeue+0x60>
	return (void *)(fifo + first * size);
   13494:	4a03      	ldr	r2, [pc, #12]	; (134a4 <ull_prepare_dequeue+0xac>)
   13496:	e7d9      	b.n	1344c <ull_prepare_dequeue+0x54>
   13498:	200078e4 	.word	0x200078e4
   1349c:	20007a4c 	.word	0x20007a4c
   134a0:	0002b0c4 	.word	0x0002b0c4
   134a4:	200078e8 	.word	0x200078e8
   134a8:	0002b320 	.word	0x0002b320
   134ac:	0002b458 	.word	0x0002b458

000134b0 <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
   134b0:	4b06      	ldr	r3, [pc, #24]	; (134cc <ull_event_done_extra_get+0x1c>)
   134b2:	7899      	ldrb	r1, [r3, #2]
	if (first == last) {
   134b4:	78d8      	ldrb	r0, [r3, #3]
   134b6:	781a      	ldrb	r2, [r3, #0]
   134b8:	4288      	cmp	r0, r1
   134ba:	d005      	beq.n	134c8 <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
   134bc:	fb01 3302 	mla	r3, r1, r2, r3
   134c0:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
   134c2:	b110      	cbz	r0, 134ca <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
   134c4:	3020      	adds	r0, #32
   134c6:	4770      	bx	lr
		return NULL;
   134c8:	2000      	movs	r0, #0
}
   134ca:	4770      	bx	lr
   134cc:	200078a4 	.word	0x200078a4

000134d0 <ull_event_done>:
{
   134d0:	b570      	push	{r4, r5, r6, lr}
	evdone = MFIFO_DEQUEUE(done);
   134d2:	4a13      	ldr	r2, [pc, #76]	; (13520 <ull_event_done+0x50>)
	uint8_t _first = *first; /* Copy read-index */
   134d4:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   134d6:	78d5      	ldrb	r5, [r2, #3]
   134d8:	7814      	ldrb	r4, [r2, #0]
   134da:	7856      	ldrb	r6, [r2, #1]
   134dc:	429d      	cmp	r5, r3
   134de:	d01c      	beq.n	1351a <ull_event_done+0x4a>
	mem = *((void **)(fifo + _first * size));
   134e0:	fb03 2404 	mla	r4, r3, r4, r2
	_first += 1U;
   134e4:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   134e6:	6864      	ldr	r4, [r4, #4]
	_first += 1U;
   134e8:	b2db      	uxtb	r3, r3
		_first = 0U;
   134ea:	429e      	cmp	r6, r3
   134ec:	bf08      	it	eq
   134ee:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   134f0:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
   134f2:	b184      	cbz	r4, 13516 <ull_event_done+0x46>
   134f4:	4601      	mov	r1, r0
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   134f6:	2302      	movs	r3, #2
	evdone->hdr.link = NULL;
   134f8:	2500      	movs	r5, #0
	link = evdone->hdr.link;
   134fa:	6820      	ldr	r0, [r4, #0]
	memq_enqueue(link, done, &memq_ull_done.tail);
   134fc:	4a09      	ldr	r2, [pc, #36]	; (13524 <ull_event_done+0x54>)
	evdone->param = param;
   134fe:	61e1      	str	r1, [r4, #28]
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   13500:	7123      	strb	r3, [r4, #4]
	memq_enqueue(link, done, &memq_ull_done.tail);
   13502:	4621      	mov	r1, r4
	evdone->hdr.link = NULL;
   13504:	6025      	str	r5, [r4, #0]
	memq_enqueue(link, done, &memq_ull_done.tail);
   13506:	f7fb fca3 	bl	ee50 <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   1350a:	2201      	movs	r2, #1
   1350c:	4b06      	ldr	r3, [pc, #24]	; (13528 <ull_event_done+0x58>)
   1350e:	4628      	mov	r0, r5
   13510:	4611      	mov	r1, r2
   13512:	f7fb fd11 	bl	ef38 <mayfly_enqueue>
}
   13516:	4620      	mov	r0, r4
   13518:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   1351a:	2400      	movs	r4, #0
   1351c:	e7fb      	b.n	13516 <ull_event_done+0x46>
   1351e:	bf00      	nop
   13520:	200078a4 	.word	0x200078a4
   13524:	20001494 	.word	0x20001494
   13528:	20007a3c 	.word	0x20007a3c

0001352c <lll_prepare>:
 *	   -EINPROGRESS: Event already in progress and prepare was queued
 */
int lll_prepare(lll_is_abort_cb_t is_abort_cb, lll_abort_cb_t abort_cb,
		lll_prepare_cb_t prepare_cb, int8_t event_prio,
		struct lll_prepare_param *prepare_param)
{
   1352c:	b500      	push	{lr}
   1352e:	b083      	sub	sp, #12
	}

	prepare_param->prio = prio;
#endif /* CONFIG_BT_CTLR_JIT_SCHEDULING */

	return lll_prepare_resolve(is_abort_cb, abort_cb, prepare_cb,
   13530:	2300      	movs	r3, #0
   13532:	e9cd 3300 	strd	r3, r3, [sp]
   13536:	9b04      	ldr	r3, [sp, #16]
   13538:	f006 fe6e 	bl	1a218 <lll_prepare_resolve>
				   prepare_param, 0, 0);
}
   1353c:	b003      	add	sp, #12
   1353e:	f85d fb04 	ldr.w	pc, [sp], #4
   13542:	bf00      	nop

00013544 <lll_resume>:

void lll_resume(void *param)
{
   13544:	b510      	push	{r4, lr}
   13546:	4603      	mov	r3, r0
	int ret;

	next = param;
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
				  next->prepare_cb, &next->prepare_param,
				  next->is_resume, 1);
   13548:	7f00      	ldrb	r0, [r0, #28]
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   1354a:	691a      	ldr	r2, [r3, #16]
   1354c:	6999      	ldr	r1, [r3, #24]
{
   1354e:	b082      	sub	sp, #8
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   13550:	2401      	movs	r4, #1
   13552:	4020      	ands	r0, r4
   13554:	9401      	str	r4, [sp, #4]
   13556:	9000      	str	r0, [sp, #0]
   13558:	6958      	ldr	r0, [r3, #20]
   1355a:	f006 fe5d 	bl	1a218 <lll_prepare_resolve>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   1355e:	b108      	cbz	r0, 13564 <lll_resume+0x20>
   13560:	3077      	adds	r0, #119	; 0x77
   13562:	d101      	bne.n	13568 <lll_resume+0x24>
}
   13564:	b002      	add	sp, #8
   13566:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   13568:	4a06      	ldr	r2, [pc, #24]	; (13584 <lll_resume+0x40>)
   1356a:	4907      	ldr	r1, [pc, #28]	; (13588 <lll_resume+0x44>)
   1356c:	4807      	ldr	r0, [pc, #28]	; (1358c <lll_resume+0x48>)
   1356e:	234f      	movs	r3, #79	; 0x4f
   13570:	f011 f838 	bl	245e4 <printk>
   13574:	4040      	eors	r0, r0
   13576:	f380 8811 	msr	BASEPRI, r0
   1357a:	f04f 0003 	mov.w	r0, #3
   1357e:	df02      	svc	2
}
   13580:	b002      	add	sp, #8
   13582:	bd10      	pop	{r4, pc}
   13584:	0002b48c 	.word	0x0002b48c
   13588:	0002b4d0 	.word	0x0002b4d0
   1358c:	0002b0c4 	.word	0x0002b0c4

00013590 <ticker_cb>:
{
   13590:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13594:	4615      	mov	r5, r2
   13596:	b08b      	sub	sp, #44	; 0x2c
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
   13598:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1359c:	4295      	cmp	r5, r2
{
   1359e:	9c12      	ldr	r4, [sp, #72]	; 0x48
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
   135a0:	d01b      	beq.n	135da <ticker_cb+0x4a>
	return ++hdr->ref;
   135a2:	7c22      	ldrb	r2, [r4, #16]
   135a4:	3201      	adds	r2, #1
   135a6:	b2d2      	uxtb	r2, r2
   135a8:	4681      	mov	r9, r0
   135aa:	4688      	mov	r8, r1
   135ac:	461f      	mov	r7, r3
   135ae:	7422      	strb	r2, [r4, #16]
		LL_ASSERT(ref);
   135b0:	2a00      	cmp	r2, #0
   135b2:	d064      	beq.n	1367e <ticker_cb+0xee>
		p.ticks_at_expire = ticks_at_expire;
   135b4:	4e39      	ldr	r6, [pc, #228]	; (1369c <ticker_cb+0x10c>)
		mfy.param = &p;
   135b6:	4b3a      	ldr	r3, [pc, #232]	; (136a0 <ticker_cb+0x110>)
		p.ticks_at_expire = ticks_at_expire;
   135b8:	f8c6 9000 	str.w	r9, [r6]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   135bc:	2200      	movs	r2, #0
	lll = &adv->lll;
   135be:	f104 0c1c 	add.w	ip, r4, #28
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   135c2:	4611      	mov	r1, r2
   135c4:	2001      	movs	r0, #1
		mfy.param = &p;
   135c6:	609e      	str	r6, [r3, #8]
		p.remainder = remainder;
   135c8:	f8c6 8004 	str.w	r8, [r6, #4]
		p.lazy = lazy;
   135cc:	8135      	strh	r5, [r6, #8]
		p.force = force;
   135ce:	72b7      	strb	r7, [r6, #10]
		p.param = lll;
   135d0:	f8c6 c00c 	str.w	ip, [r6, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   135d4:	f7fb fcb0 	bl	ef38 <mayfly_enqueue>
		LL_ASSERT(!ret);
   135d8:	b938      	cbnz	r0, 135ea <ticker_cb+0x5a>
	if (!lll->is_hdcd)
   135da:	f894 5024 	ldrb.w	r5, [r4, #36]	; 0x24
   135de:	f015 0501 	ands.w	r5, r5, #1
   135e2:	d014      	beq.n	1360e <ticker_cb+0x7e>
}
   135e4:	b00b      	add	sp, #44	; 0x2c
   135e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LL_ASSERT(!ret);
   135ea:	4a2e      	ldr	r2, [pc, #184]	; (136a4 <ticker_cb+0x114>)
   135ec:	492e      	ldr	r1, [pc, #184]	; (136a8 <ticker_cb+0x118>)
   135ee:	482f      	ldr	r0, [pc, #188]	; (136ac <ticker_cb+0x11c>)
   135f0:	f240 63ce 	movw	r3, #1742	; 0x6ce
   135f4:	f010 fff6 	bl	245e4 <printk>
   135f8:	4040      	eors	r0, r0
   135fa:	f380 8811 	msr	BASEPRI, r0
   135fe:	f04f 0003 	mov.w	r0, #3
   13602:	df02      	svc	2
	if (!lll->is_hdcd)
   13604:	f894 5024 	ldrb.w	r5, [r4, #36]	; 0x24
   13608:	f015 0501 	ands.w	r5, r5, #1
   1360c:	d1ea      	bne.n	135e4 <ticker_cb+0x54>
		lll_rand_isr_get(&random_delay, sizeof(random_delay));
   1360e:	2104      	movs	r1, #4
   13610:	a809      	add	r0, sp, #36	; 0x24
   13612:	f006 fc5d 	bl	19ed0 <lll_rand_isr_get>
		random_delay %= ULL_ADV_RANDOM_DELAY;
   13616:	9809      	ldr	r0, [sp, #36]	; 0x24
   13618:	4925      	ldr	r1, [pc, #148]	; (136b0 <ticker_cb+0x120>)
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   1361a:	4a26      	ldr	r2, [pc, #152]	; (136b4 <ticker_cb+0x124>)
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1361c:	9406      	str	r4, [sp, #24]
		random_delay %= ULL_ADV_RANDOM_DELAY;
   1361e:	fba1 3100 	umull	r3, r1, r1, r0
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   13622:	1aa2      	subs	r2, r4, r2
   13624:	4c24      	ldr	r4, [pc, #144]	; (136b8 <ticker_cb+0x128>)
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   13626:	9504      	str	r5, [sp, #16]
		random_delay %= ULL_ADV_RANDOM_DELAY;
   13628:	1a43      	subs	r3, r0, r1
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   1362a:	0892      	lsrs	r2, r2, #2
		random_delay %= ULL_ADV_RANDOM_DELAY;
   1362c:	eb01 0353 	add.w	r3, r1, r3, lsr #1
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   13630:	fba4 4202 	umull	r4, r2, r4, r2
		random_delay %= ULL_ADV_RANDOM_DELAY;
   13634:	f240 1147 	movw	r1, #327	; 0x147
   13638:	0a1b      	lsrs	r3, r3, #8
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   1363a:	0892      	lsrs	r2, r2, #2
		random_delay %= ULL_ADV_RANDOM_DELAY;
   1363c:	fb01 0313 	mls	r3, r1, r3, r0
				    (TICKER_ID_ADV_BASE +
   13640:	3202      	adds	r2, #2
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   13642:	491e      	ldr	r1, [pc, #120]	; (136bc <ticker_cb+0x12c>)
   13644:	9105      	str	r1, [sp, #20]
		random_delay += 1;
   13646:	3301      	adds	r3, #1
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   13648:	e9cd 5502 	strd	r5, r5, [sp, #8]
   1364c:	e9cd 5500 	strd	r5, r5, [sp]
   13650:	4628      	mov	r0, r5
   13652:	b2d2      	uxtb	r2, r2
   13654:	2101      	movs	r1, #1
		random_delay += 1;
   13656:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   13658:	f7fc ff5c 	bl	10514 <ticker_update>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1365c:	f030 0302 	bics.w	r3, r0, #2
   13660:	d0c0      	beq.n	135e4 <ticker_cb+0x54>
   13662:	4a10      	ldr	r2, [pc, #64]	; (136a4 <ticker_cb+0x114>)
   13664:	4916      	ldr	r1, [pc, #88]	; (136c0 <ticker_cb+0x130>)
   13666:	4811      	ldr	r0, [pc, #68]	; (136ac <ticker_cb+0x11c>)
   13668:	f240 63e4 	movw	r3, #1764	; 0x6e4
   1366c:	f010 ffba 	bl	245e4 <printk>
   13670:	4040      	eors	r0, r0
   13672:	f380 8811 	msr	BASEPRI, r0
   13676:	f04f 0003 	mov.w	r0, #3
   1367a:	df02      	svc	2
}
   1367c:	e7b2      	b.n	135e4 <ticker_cb+0x54>
		LL_ASSERT(ref);
   1367e:	4a09      	ldr	r2, [pc, #36]	; (136a4 <ticker_cb+0x114>)
   13680:	4910      	ldr	r1, [pc, #64]	; (136c4 <ticker_cb+0x134>)
   13682:	480a      	ldr	r0, [pc, #40]	; (136ac <ticker_cb+0x11c>)
   13684:	f240 63c1 	movw	r3, #1729	; 0x6c1
   13688:	f010 ffac 	bl	245e4 <printk>
   1368c:	4040      	eors	r0, r0
   1368e:	f380 8811 	msr	BASEPRI, r0
   13692:	f04f 0003 	mov.w	r0, #3
   13696:	df02      	svc	2
   13698:	e78c      	b.n	135b4 <ticker_cb+0x24>
   1369a:	bf00      	nop
   1369c:	2000187c 	.word	0x2000187c
   136a0:	20007a5c 	.word	0x20007a5c
   136a4:	0002b4f8 	.word	0x0002b4f8
   136a8:	0002b458 	.word	0x0002b458
   136ac:	0002b0c4 	.word	0x0002b0c4
   136b0:	90d4f121 	.word	0x90d4f121
   136b4:	2000181c 	.word	0x2000181c
   136b8:	30c30c31 	.word	0x30c30c31
   136bc:	00013801 	.word	0x00013801
   136c0:	0002b53c 	.word	0x0002b53c
   136c4:	0002b538 	.word	0x0002b538

000136c8 <ticker_op_stop_cb>:
	if (status != TICKER_STATUS_SUCCESS) {
   136c8:	2800      	cmp	r0, #0
   136ca:	d132      	bne.n	13732 <ticker_op_stop_cb+0x6a>
{
   136cc:	b538      	push	{r3, r4, r5, lr}
   136ce:	460c      	mov	r4, r1
	mfy.param = &adv->lll;
   136d0:	4d1f      	ldr	r5, [pc, #124]	; (13750 <ticker_op_stop_cb+0x88>)
	return hdr->ref;
   136d2:	7c09      	ldrb	r1, [r1, #16]
   136d4:	f104 031c 	add.w	r3, r4, #28
   136d8:	60ab      	str	r3, [r5, #8]
	if (ull_ref_get(hdr)) {
   136da:	f001 02ff 	and.w	r2, r1, #255	; 0xff
   136de:	b1e1      	cbz	r1, 1371a <ticker_op_stop_cb+0x52>
		LL_ASSERT(!hdr->disabled_cb);
   136e0:	6962      	ldr	r2, [r4, #20]
   136e2:	b16a      	cbz	r2, 13700 <ticker_op_stop_cb+0x38>
   136e4:	4a1b      	ldr	r2, [pc, #108]	; (13754 <ticker_op_stop_cb+0x8c>)
   136e6:	491c      	ldr	r1, [pc, #112]	; (13758 <ticker_op_stop_cb+0x90>)
   136e8:	481c      	ldr	r0, [pc, #112]	; (1375c <ticker_op_stop_cb+0x94>)
   136ea:	f240 7335 	movw	r3, #1845	; 0x735
   136ee:	f010 ff79 	bl	245e4 <printk>
   136f2:	4040      	eors	r0, r0
   136f4:	f380 8811 	msr	BASEPRI, r0
   136f8:	f04f 0003 	mov.w	r0, #3
   136fc:	df02      	svc	2
   136fe:	68ab      	ldr	r3, [r5, #8]
		hdr->disabled_cb = disabled_cb;
   13700:	4917      	ldr	r1, [pc, #92]	; (13760 <ticker_op_stop_cb+0x98>)
		mfy.fp = lll_disable;
   13702:	4818      	ldr	r0, [pc, #96]	; (13764 <ticker_op_stop_cb+0x9c>)
		hdr->disabled_param = mfy.param;
   13704:	61a3      	str	r3, [r4, #24]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   13706:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   13708:	6161      	str	r1, [r4, #20]
		mfy.fp = lll_disable;
   1370a:	60e8      	str	r0, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   1370c:	4b10      	ldr	r3, [pc, #64]	; (13750 <ticker_op_stop_cb+0x88>)
   1370e:	4611      	mov	r1, r2
   13710:	2002      	movs	r0, #2
   13712:	f7fb fc11 	bl	ef38 <mayfly_enqueue>
		LL_ASSERT(!ret);
   13716:	b968      	cbnz	r0, 13734 <ticker_op_stop_cb+0x6c>
}
   13718:	bd38      	pop	{r3, r4, r5, pc}
		mfy.fp = disabled_cb;
   1371a:	4b11      	ldr	r3, [pc, #68]	; (13760 <ticker_op_stop_cb+0x98>)
   1371c:	60eb      	str	r3, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   1371e:	2101      	movs	r1, #1
   13720:	462b      	mov	r3, r5
   13722:	2002      	movs	r0, #2
   13724:	f7fb fc08 	bl	ef38 <mayfly_enqueue>
		LL_ASSERT(!ret);
   13728:	2800      	cmp	r0, #0
   1372a:	d0f5      	beq.n	13718 <ticker_op_stop_cb+0x50>
   1372c:	f240 7341 	movw	r3, #1857	; 0x741
   13730:	e002      	b.n	13738 <ticker_op_stop_cb+0x70>
   13732:	4770      	bx	lr
		LL_ASSERT(!ret);
   13734:	f240 733c 	movw	r3, #1852	; 0x73c
		LL_ASSERT(!ret);
   13738:	4a06      	ldr	r2, [pc, #24]	; (13754 <ticker_op_stop_cb+0x8c>)
   1373a:	490b      	ldr	r1, [pc, #44]	; (13768 <ticker_op_stop_cb+0xa0>)
   1373c:	4807      	ldr	r0, [pc, #28]	; (1375c <ticker_op_stop_cb+0x94>)
   1373e:	f010 ff51 	bl	245e4 <printk>
   13742:	4040      	eors	r0, r0
   13744:	f380 8811 	msr	BASEPRI, r0
   13748:	f04f 0003 	mov.w	r0, #3
   1374c:	df02      	svc	2
}
   1374e:	bd38      	pop	{r3, r4, r5, pc}
   13750:	20007a6c 	.word	0x20007a6c
   13754:	0002b4f8 	.word	0x0002b4f8
   13758:	0002b558 	.word	0x0002b558
   1375c:	0002b0c4 	.word	0x0002b0c4
   13760:	0001376d 	.word	0x0001376d
   13764:	00019ed9 	.word	0x00019ed9
   13768:	0002b458 	.word	0x0002b458

0001376c <disabled_cb>:
{
   1376c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	adv = ((struct lll_hdr *)param)->parent;
   1376e:	6805      	ldr	r5, [r0, #0]
	LL_ASSERT(adv->link_cc_free);
   13770:	6c2f      	ldr	r7, [r5, #64]	; 0x40
{
   13772:	4606      	mov	r6, r0
	LL_ASSERT(adv->link_cc_free);
   13774:	b1d7      	cbz	r7, 137ac <disabled_cb+0x40>
	LL_ASSERT(adv->node_rx_cc_free);
   13776:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	adv->link_cc_free = NULL;
   13778:	2300      	movs	r3, #0
   1377a:	642b      	str	r3, [r5, #64]	; 0x40
	LL_ASSERT(adv->node_rx_cc_free);
   1377c:	b34c      	cbz	r4, 137d2 <disabled_cb+0x66>
	adv->node_rx_cc_free = NULL;
   1377e:	2100      	movs	r1, #0
	rx->hdr.handle = 0xffff;
   13780:	f64f 73ff 	movw	r3, #65535	; 0xffff
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   13784:	2214      	movs	r2, #20
	adv->node_rx_cc_free = NULL;
   13786:	6469      	str	r1, [r5, #68]	; 0x44
__ssp_bos_icheck3(memset, void *, int)
   13788:	f104 001c 	add.w	r0, r4, #28
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1378c:	7122      	strb	r2, [r4, #4]
	rx->hdr.handle = 0xffff;
   1378e:	80e3      	strh	r3, [r4, #6]
   13790:	221e      	movs	r2, #30
   13792:	f016 fe33 	bl	2a3fc <memset>
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
   13796:	233c      	movs	r3, #60	; 0x3c
	rx->hdr.rx_ftr.param = param;
   13798:	60a6      	str	r6, [r4, #8]
	ll_rx_put(link, rx);
   1379a:	4638      	mov	r0, r7
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
   1379c:	7723      	strb	r3, [r4, #28]
	ll_rx_put(link, rx);
   1379e:	4621      	mov	r1, r4
   137a0:	f7ff fbdc 	bl	12f5c <ll_rx_put>
}
   137a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_rx_sched();
   137a8:	f7ff bbe2 	b.w	12f70 <ll_rx_sched>
	LL_ASSERT(adv->link_cc_free);
   137ac:	4a10      	ldr	r2, [pc, #64]	; (137f0 <disabled_cb+0x84>)
   137ae:	4911      	ldr	r1, [pc, #68]	; (137f4 <disabled_cb+0x88>)
   137b0:	4811      	ldr	r0, [pc, #68]	; (137f8 <disabled_cb+0x8c>)
   137b2:	f240 734e 	movw	r3, #1870	; 0x74e
   137b6:	f010 ff15 	bl	245e4 <printk>
   137ba:	4040      	eors	r0, r0
   137bc:	f380 8811 	msr	BASEPRI, r0
   137c0:	f04f 0003 	mov.w	r0, #3
   137c4:	df02      	svc	2
	LL_ASSERT(adv->node_rx_cc_free);
   137c6:	6c6c      	ldr	r4, [r5, #68]	; 0x44
   137c8:	6c2f      	ldr	r7, [r5, #64]	; 0x40
	adv->link_cc_free = NULL;
   137ca:	2300      	movs	r3, #0
   137cc:	642b      	str	r3, [r5, #64]	; 0x40
	LL_ASSERT(adv->node_rx_cc_free);
   137ce:	2c00      	cmp	r4, #0
   137d0:	d1d5      	bne.n	1377e <disabled_cb+0x12>
   137d2:	4a07      	ldr	r2, [pc, #28]	; (137f0 <disabled_cb+0x84>)
   137d4:	4909      	ldr	r1, [pc, #36]	; (137fc <disabled_cb+0x90>)
   137d6:	4808      	ldr	r0, [pc, #32]	; (137f8 <disabled_cb+0x8c>)
   137d8:	f240 7352 	movw	r3, #1874	; 0x752
   137dc:	f010 ff02 	bl	245e4 <printk>
   137e0:	4040      	eors	r0, r0
   137e2:	f380 8811 	msr	BASEPRI, r0
   137e6:	f04f 0003 	mov.w	r0, #3
   137ea:	df02      	svc	2
   137ec:	6c6c      	ldr	r4, [r5, #68]	; 0x44
   137ee:	e7c6      	b.n	1377e <disabled_cb+0x12>
   137f0:	0002b4f8 	.word	0x0002b4f8
   137f4:	0002b56c 	.word	0x0002b56c
   137f8:	0002b0c4 	.word	0x0002b0c4
   137fc:	0002b580 	.word	0x0002b580

00013800 <ticker_op_update_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   13800:	b900      	cbnz	r0, 13804 <ticker_op_update_cb+0x4>
   13802:	4770      	bx	lr
{
   13804:	b510      	push	{r4, lr}
   13806:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   13808:	f7ff fc7e 	bl	13108 <ull_disable_mark_get>
   1380c:	4284      	cmp	r4, r0
   1380e:	d00c      	beq.n	1382a <ticker_op_update_cb+0x2a>
   13810:	4a06      	ldr	r2, [pc, #24]	; (1382c <ticker_op_update_cb+0x2c>)
   13812:	4907      	ldr	r1, [pc, #28]	; (13830 <ticker_op_update_cb+0x30>)
   13814:	4807      	ldr	r0, [pc, #28]	; (13834 <ticker_op_update_cb+0x34>)
   13816:	f240 7305 	movw	r3, #1797	; 0x705
   1381a:	f010 fee3 	bl	245e4 <printk>
   1381e:	4040      	eors	r0, r0
   13820:	f380 8811 	msr	BASEPRI, r0
   13824:	f04f 0003 	mov.w	r0, #3
   13828:	df02      	svc	2
}
   1382a:	bd10      	pop	{r4, pc}
   1382c:	0002b4f8 	.word	0x0002b4f8
   13830:	0002b598 	.word	0x0002b598
   13834:	0002b0c4 	.word	0x0002b0c4

00013838 <ticker_stop_cb>:
{
   13838:	b530      	push	{r4, r5, lr}
   1383a:	b083      	sub	sp, #12
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   1383c:	4b19      	ldr	r3, [pc, #100]	; (138a4 <ticker_stop_cb+0x6c>)
{
   1383e:	9d06      	ldr	r5, [sp, #24]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   13840:	4a19      	ldr	r2, [pc, #100]	; (138a8 <ticker_stop_cb+0x70>)
   13842:	1aeb      	subs	r3, r5, r3
   13844:	089b      	lsrs	r3, r3, #2
   13846:	fba2 2303 	umull	r2, r3, r2, r3
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   1384a:	f413 7f7f 	tst.w	r3, #1020	; 0x3fc
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   1384e:	ea4f 0493 	mov.w	r4, r3, lsr #2
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   13852:	d119      	bne.n	13888 <ticker_stop_cb+0x50>
			  TICKER_ID_ADV_BASE + handle,
   13854:	1ca2      	adds	r2, r4, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   13856:	4b15      	ldr	r3, [pc, #84]	; (138ac <ticker_stop_cb+0x74>)
   13858:	9500      	str	r5, [sp, #0]
   1385a:	b2d2      	uxtb	r2, r2
   1385c:	2101      	movs	r1, #1
   1385e:	2000      	movs	r0, #0
   13860:	f7fc fe70 	bl	10544 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   13864:	f030 0302 	bics.w	r3, r0, #2
   13868:	d00c      	beq.n	13884 <ticker_stop_cb+0x4c>
   1386a:	4a11      	ldr	r2, [pc, #68]	; (138b0 <ticker_stop_cb+0x78>)
   1386c:	4911      	ldr	r1, [pc, #68]	; (138b4 <ticker_stop_cb+0x7c>)
   1386e:	4812      	ldr	r0, [pc, #72]	; (138b8 <ticker_stop_cb+0x80>)
   13870:	f240 7317 	movw	r3, #1815	; 0x717
   13874:	f010 feb6 	bl	245e4 <printk>
   13878:	4040      	eors	r0, r0
   1387a:	f380 8811 	msr	BASEPRI, r0
   1387e:	f04f 0003 	mov.w	r0, #3
   13882:	df02      	svc	2
}
   13884:	b003      	add	sp, #12
   13886:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   13888:	4a09      	ldr	r2, [pc, #36]	; (138b0 <ticker_stop_cb+0x78>)
   1388a:	490c      	ldr	r1, [pc, #48]	; (138bc <ticker_stop_cb+0x84>)
   1388c:	480a      	ldr	r0, [pc, #40]	; (138b8 <ticker_stop_cb+0x80>)
   1388e:	f240 7312 	movw	r3, #1810	; 0x712
   13892:	f010 fea7 	bl	245e4 <printk>
   13896:	4040      	eors	r0, r0
   13898:	f380 8811 	msr	BASEPRI, r0
   1389c:	f04f 0003 	mov.w	r0, #3
   138a0:	df02      	svc	2
   138a2:	e7d7      	b.n	13854 <ticker_stop_cb+0x1c>
   138a4:	2000181c 	.word	0x2000181c
   138a8:	30c30c31 	.word	0x30c30c31
   138ac:	000136c9 	.word	0x000136c9
   138b0:	0002b4f8 	.word	0x0002b4f8
   138b4:	0002b53c 	.word	0x0002b53c
   138b8:	0002b0c4 	.word	0x0002b0c4
   138bc:	0002b5c8 	.word	0x0002b5c8

000138c0 <init_reset>:
{
   138c0:	b538      	push	{r3, r4, r5, lr}
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   138c2:	4c15      	ldr	r4, [pc, #84]	; (13918 <init_reset+0x58>)
   138c4:	f104 0028 	add.w	r0, r4, #40	; 0x28
   138c8:	f006 fee0 	bl	1a68c <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   138cc:	f104 0034 	add.w	r0, r4, #52	; 0x34
   138d0:	f006 fedc 	bl	1a68c <lll_adv_data_init>
   138d4:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
{
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
#if defined(CONFIG_BT_CTLR_PRIVACY)
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
#endif /* CONFIG_BT_CTLR_PRIVACY */
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
   138d8:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   138da:	4910      	ldr	r1, [pc, #64]	; (1391c <init_reset+0x5c>)
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   138dc:	f894 504a 	ldrb.w	r5, [r4, #74]	; 0x4a
   138e0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
   138e4:	400b      	ands	r3, r1
   138e6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   138e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
   138ec:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   138f0:	f36f 0542 	bfc	r5, #1, #2
	pdu->len = BDADDR_SIZE;
   138f4:	2206      	movs	r2, #6
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
   138f6:	f043 030e 	orr.w	r3, r3, #14
	pdu->type = pdu_type;
   138fa:	2000      	movs	r0, #0
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
   138fc:	84a3      	strh	r3, [r4, #36]	; 0x24
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   138fe:	f884 504a 	strb.w	r5, [r4, #74]	; 0x4a
	pdu->len = BDADDR_SIZE;
   13902:	704a      	strb	r2, [r1, #1]
	pdu->type = pdu_type;
   13904:	7008      	strb	r0, [r1, #0]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   13906:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
   1390a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   1390e:	2104      	movs	r1, #4
   13910:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	pdu->len = BDADDR_SIZE;
   13912:	705a      	strb	r2, [r3, #1]
	pdu->type = pdu_type;
   13914:	7019      	strb	r1, [r3, #0]
}
   13916:	bd38      	pop	{r3, r4, r5, pc}
   13918:	2000181c 	.word	0x2000181c
   1391c:	fffffcf1 	.word	0xfffffcf1

00013920 <conn_release.constprop.0>:
static void conn_release(struct ll_adv_set *adv)
   13920:	b570      	push	{r4, r5, r6, lr}
	struct lll_conn *lll = adv->lll.conn;
   13922:	4c1b      	ldr	r4, [pc, #108]	; (13990 <conn_release.constprop.0+0x70>)
   13924:	6a25      	ldr	r5, [r4, #32]
	LL_ASSERT(!lll->link_tx_free);
   13926:	6dab      	ldr	r3, [r5, #88]	; 0x58
   13928:	b163      	cbz	r3, 13944 <conn_release.constprop.0+0x24>
   1392a:	4a1a      	ldr	r2, [pc, #104]	; (13994 <conn_release.constprop.0+0x74>)
   1392c:	491a      	ldr	r1, [pc, #104]	; (13998 <conn_release.constprop.0+0x78>)
   1392e:	481b      	ldr	r0, [pc, #108]	; (1399c <conn_release.constprop.0+0x7c>)
   13930:	f240 737c 	movw	r3, #1916	; 0x77c
   13934:	f010 fe56 	bl	245e4 <printk>
   13938:	4040      	eors	r0, r0
   1393a:	f380 8811 	msr	BASEPRI, r0
   1393e:	f04f 0003 	mov.w	r0, #3
   13942:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
   13944:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   13948:	f105 0048 	add.w	r0, r5, #72	; 0x48
   1394c:	f7fb fa76 	bl	ee3c <memq_deinit>
	LL_ASSERT(link);
   13950:	4606      	mov	r6, r0
   13952:	b170      	cbz	r0, 13972 <conn_release.constprop.0+0x52>
	ll_conn_release(lll->hdr.parent);
   13954:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
   13956:	65ae      	str	r6, [r5, #88]	; 0x58
	ll_conn_release(lll->hdr.parent);
   13958:	f000 ffae 	bl	148b8 <ll_conn_release>
	adv->lll.conn = NULL;
   1395c:	2500      	movs	r5, #0
	ll_rx_release(adv->node_rx_cc_free);
   1395e:	6c60      	ldr	r0, [r4, #68]	; 0x44
	adv->lll.conn = NULL;
   13960:	6225      	str	r5, [r4, #32]
	ll_rx_release(adv->node_rx_cc_free);
   13962:	f7ff faf5 	bl	12f50 <ll_rx_release>
	ll_rx_link_release(adv->link_cc_free);
   13966:	6c20      	ldr	r0, [r4, #64]	; 0x40
	adv->node_rx_cc_free = NULL;
   13968:	6465      	str	r5, [r4, #68]	; 0x44
	ll_rx_link_release(adv->link_cc_free);
   1396a:	f7ff fae5 	bl	12f38 <ll_rx_link_release>
	adv->link_cc_free = NULL;
   1396e:	6425      	str	r5, [r4, #64]	; 0x40
}
   13970:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
   13972:	4a08      	ldr	r2, [pc, #32]	; (13994 <conn_release.constprop.0+0x74>)
   13974:	490a      	ldr	r1, [pc, #40]	; (139a0 <conn_release.constprop.0+0x80>)
   13976:	4809      	ldr	r0, [pc, #36]	; (1399c <conn_release.constprop.0+0x7c>)
   13978:	f240 737e 	movw	r3, #1918	; 0x77e
   1397c:	f010 fe32 	bl	245e4 <printk>
   13980:	4040      	eors	r0, r0
   13982:	f380 8811 	msr	BASEPRI, r0
   13986:	f04f 0003 	mov.w	r0, #3
   1398a:	df02      	svc	2
   1398c:	e7e2      	b.n	13954 <conn_release.constprop.0+0x34>
   1398e:	bf00      	nop
   13990:	2000181c 	.word	0x2000181c
   13994:	0002b4f8 	.word	0x0002b4f8
   13998:	0002b5d4 	.word	0x0002b5d4
   1399c:	0002b0c4 	.word	0x0002b0c4
   139a0:	0002b65c 	.word	0x0002b65c

000139a4 <ll_adv_params_set>:
{
   139a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   139a8:	4d4a      	ldr	r5, [pc, #296]	; (13ad4 <ll_adv_params_set+0x130>)
	if (!adv || adv->is_enabled) {
   139aa:	4c4b      	ldr	r4, [pc, #300]	; (13ad8 <ll_adv_params_set+0x134>)
{
   139ac:	4686      	mov	lr, r0
   139ae:	460e      	mov	r6, r1
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   139b0:	e895 0003 	ldmia.w	r5, {r0, r1}
{
   139b4:	b083      	sub	sp, #12
	if (!adv || adv->is_enabled) {
   139b6:	f894 804a 	ldrb.w	r8, [r4, #74]	; 0x4a
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   139ba:	9000      	str	r0, [sp, #0]
	if (!adv || adv->is_enabled) {
   139bc:	f018 0001 	ands.w	r0, r8, #1
{
   139c0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   139c2:	f89d c02c 	ldrb.w	ip, [sp, #44]	; 0x2c
   139c6:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   139ca:	f88d 1004 	strb.w	r1, [sp, #4]
	if (!adv || adv->is_enabled) {
   139ce:	d17c      	bne.n	13aca <ll_adv_params_set+0x126>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   139d0:	f894 9029 	ldrb.w	r9, [r4, #41]	; 0x29
	adv->lll.chan_map = chan_map;
   139d4:	f8b4 8024 	ldrh.w	r8, [r4, #36]	; 0x24
   139d8:	eb04 0989 	add.w	r9, r4, r9, lsl #2
	pdu->type = pdu_adv_type[adv_type];
   139dc:	a902      	add	r1, sp, #8
	adv->lll.chan_map = chan_map;
   139de:	f00c 0c07 	and.w	ip, ip, #7
		adv->interval = 0;
   139e2:	2e01      	cmp	r6, #1
	pdu->type = pdu_adv_type[adv_type];
   139e4:	4431      	add	r1, r6
	adv->lll.chan_map = chan_map;
   139e6:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   139ea:	f8d9 602c 	ldr.w	r6, [r9, #44]	; 0x2c
	pdu->type = pdu_adv_type[adv_type];
   139ee:	f811 9c08 	ldrb.w	r9, [r1, #-8]
   139f2:	7831      	ldrb	r1, [r6, #0]
	adv->lll.chan_map = chan_map;
   139f4:	f005 0503 	and.w	r5, r5, #3
   139f8:	ea4c 2505 	orr.w	r5, ip, r5, lsl #8
   139fc:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 13adc <ll_adv_params_set+0x138>
   13a00:	ea08 080c 	and.w	r8, r8, ip
	adv->own_addr_type = own_addr_type;
   13a04:	f894 c04a 	ldrb.w	ip, [r4, #74]	; 0x4a
		adv->interval = 0;
   13a08:	bf08      	it	eq
   13a0a:	f04f 0e00 	moveq.w	lr, #0
	pdu->type = pdu_adv_type[adv_type];
   13a0e:	f021 011f 	bic.w	r1, r1, #31
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   13a12:	f019 0f0e 	tst.w	r9, #14
	pdu->type = pdu_adv_type[adv_type];
   13a16:	f009 090f 	and.w	r9, r9, #15
   13a1a:	f8a4 e048 	strh.w	lr, [r4, #72]	; 0x48
	adv->own_addr_type = own_addr_type;
   13a1e:	f362 0c42 	bfi	ip, r2, #1, #2
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   13a22:	bf0c      	ite	eq
   13a24:	f04f 0e01 	moveq.w	lr, #1
   13a28:	f04f 0e00 	movne.w	lr, #0
   13a2c:	ea49 0101 	orr.w	r1, r9, r1
	adv->lll.chan_map = chan_map;
   13a30:	ea45 0508 	orr.w	r5, r5, r8
   13a34:	f36e 1145 	bfi	r1, lr, #5, #1
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   13a38:	f01c 0f04 	tst.w	ip, #4
	adv->lll.chan_map = chan_map;
   13a3c:	84a5      	strh	r5, [r4, #36]	; 0x24
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   13a3e:	7031      	strb	r1, [r6, #0]
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   13a40:	fa5f f58c 	uxtb.w	r5, ip
	adv->own_addr_type = own_addr_type;
   13a44:	f884 c04a 	strb.w	ip, [r4, #74]	; 0x4a
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   13a48:	d00a      	beq.n	13a60 <ll_adv_params_set+0xbc>
		adv->peer_addr_type = direct_addr_type;
   13a4a:	4629      	mov	r1, r5
   13a4c:	f363 01c3 	bfi	r1, r3, #3, #1
   13a50:	f884 104a 	strb.w	r1, [r4, #74]	; 0x4a
		memcpy(&adv->peer_addr, direct_addr, BDADDR_SIZE);
   13a54:	6839      	ldr	r1, [r7, #0]
   13a56:	f8c4 104b 	str.w	r1, [r4, #75]	; 0x4b
   13a5a:	88b9      	ldrh	r1, [r7, #4]
   13a5c:	f8a4 104f 	strh.w	r1, [r4, #79]	; 0x4f
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   13a60:	7831      	ldrb	r1, [r6, #0]
   13a62:	f001 050f 	and.w	r5, r1, #15
   13a66:	2d01      	cmp	r5, #1
   13a68:	f002 0c01 	and.w	ip, r2, #1
   13a6c:	d01f      	beq.n	13aae <ll_adv_params_set+0x10a>
	} else if (pdu->len == 0) {
   13a6e:	7873      	ldrb	r3, [r6, #1]
		pdu->tx_addr = own_addr_type & 0x1;
   13a70:	f36c 1186 	bfi	r1, ip, #6, #1
	} else if (pdu->len == 0) {
   13a74:	b1ab      	cbz	r3, 13aa2 <ll_adv_params_set+0xfe>
		pdu->rx_addr = 0;
   13a76:	f36f 11c7 	bfc	r1, #7, #1
   13a7a:	7031      	strb	r1, [r6, #0]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   13a7c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
   13a80:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   13a84:	0192      	lsls	r2, r2, #6
   13a86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   13a88:	f002 0240 	and.w	r2, r2, #64	; 0x40
		if (pdu->len == 0) {
   13a8c:	7859      	ldrb	r1, [r3, #1]
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   13a8e:	f042 0204 	orr.w	r2, r2, #4
   13a92:	701a      	strb	r2, [r3, #0]
		if (pdu->len == 0) {
   13a94:	b911      	cbnz	r1, 13a9c <ll_adv_params_set+0xf8>
			pdu->len = BDADDR_SIZE;
   13a96:	2206      	movs	r2, #6
	return 0;
   13a98:	4608      	mov	r0, r1
			pdu->len = BDADDR_SIZE;
   13a9a:	705a      	strb	r2, [r3, #1]
}
   13a9c:	b003      	add	sp, #12
   13a9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pdu->rx_addr = 0;
   13aa2:	f363 11c7 	bfi	r1, r3, #7, #1
		pdu->len = BDADDR_SIZE;
   13aa6:	2306      	movs	r3, #6
		pdu->rx_addr = 0;
   13aa8:	7031      	strb	r1, [r6, #0]
		pdu->len = BDADDR_SIZE;
   13aaa:	7073      	strb	r3, [r6, #1]
   13aac:	e7e6      	b.n	13a7c <ll_adv_params_set+0xd8>
		pdu->rx_addr = direct_addr_type;
   13aae:	4635      	mov	r5, r6
		pdu->tx_addr = own_addr_type & 0x1;
   13ab0:	f36c 1186 	bfi	r1, ip, #6, #1
		pdu->rx_addr = direct_addr_type;
   13ab4:	f363 11c7 	bfi	r1, r3, #7, #1
   13ab8:	f805 1b08 	strb.w	r1, [r5], #8
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   13abc:	683b      	ldr	r3, [r7, #0]
   13abe:	60b3      	str	r3, [r6, #8]
   13ac0:	88bb      	ldrh	r3, [r7, #4]
   13ac2:	80ab      	strh	r3, [r5, #4]
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   13ac4:	230c      	movs	r3, #12
   13ac6:	7073      	strb	r3, [r6, #1]
   13ac8:	e7d8      	b.n	13a7c <ll_adv_params_set+0xd8>
		return BT_HCI_ERR_CMD_DISALLOWED;
   13aca:	200c      	movs	r0, #12
}
   13acc:	b003      	add	sp, #12
   13ace:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13ad2:	bf00      	nop
   13ad4:	0002a938 	.word	0x0002a938
   13ad8:	2000181c 	.word	0x2000181c
   13adc:	fffffcf1 	.word	0xfffffcf1

00013ae0 <ull_adv_init>:
	err = init_reset();
   13ae0:	f7ff beee 	b.w	138c0 <init_reset>

00013ae4 <ull_adv_reset>:
{
   13ae4:	b530      	push	{r4, r5, lr}
	if (!adv || !adv->is_enabled) {
   13ae6:	4c4c      	ldr	r4, [pc, #304]	; (13c18 <ull_adv_reset+0x134>)
   13ae8:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
   13aec:	07d9      	lsls	r1, r3, #31
{
   13aee:	b085      	sub	sp, #20
	if (!adv || !adv->is_enabled) {
   13af0:	d551      	bpl.n	13b96 <ull_adv_reset+0xb2>
	if (adv->lll.conn) {
   13af2:	6a23      	ldr	r3, [r4, #32]
   13af4:	b153      	cbz	r3, 13b0c <ull_adv_reset+0x28>
		adv->lll.conn->slave.cancelled = 1U;
   13af6:	f893 2020 	ldrb.w	r2, [r3, #32]
   13afa:	f042 0202 	orr.w	r2, r2, #2
   13afe:	f883 2020 	strb.w	r2, [r3, #32]
		if (unlikely(adv->lll.conn->slave.initiated)) {
   13b02:	6a23      	ldr	r3, [r4, #32]
   13b04:	f893 3020 	ldrb.w	r3, [r3, #32]
   13b08:	07da      	lsls	r2, r3, #31
   13b0a:	d444      	bmi.n	13b96 <ull_adv_reset+0xb2>
	mark = ull_disable_mark(adv);
   13b0c:	4842      	ldr	r0, [pc, #264]	; (13c18 <ull_adv_reset+0x134>)
   13b0e:	f7ff fae3 	bl	130d8 <ull_disable_mark>
	LL_ASSERT(mark == adv);
   13b12:	4284      	cmp	r4, r0
   13b14:	d00c      	beq.n	13b30 <ull_adv_reset+0x4c>
   13b16:	4a41      	ldr	r2, [pc, #260]	; (13c1c <ull_adv_reset+0x138>)
   13b18:	4941      	ldr	r1, [pc, #260]	; (13c20 <ull_adv_reset+0x13c>)
   13b1a:	4842      	ldr	r0, [pc, #264]	; (13c24 <ull_adv_reset+0x140>)
   13b1c:	f240 73df 	movw	r3, #2015	; 0x7df
   13b20:	f010 fd60 	bl	245e4 <printk>
   13b24:	4040      	eors	r0, r0
   13b26:	f380 8811 	msr	BASEPRI, r0
   13b2a:	f04f 0003 	mov.w	r0, #3
   13b2e:	df02      	svc	2
	if (adv->lll.is_hdcd) {
   13b30:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   13b34:	07db      	lsls	r3, r3, #31
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   13b36:	ad03      	add	r5, sp, #12
	if (adv->lll.is_hdcd) {
   13b38:	d430      	bmi.n	13b9c <ull_adv_reset+0xb8>
	ret_cb = TICKER_STATUS_BUSY;
   13b3a:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   13b3c:	2103      	movs	r1, #3
   13b3e:	4b3a      	ldr	r3, [pc, #232]	; (13c28 <ull_adv_reset+0x144>)
   13b40:	9500      	str	r5, [sp, #0]
   13b42:	2000      	movs	r0, #0
	ret_cb = TICKER_STATUS_BUSY;
   13b44:	9203      	str	r2, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   13b46:	f7fc fcfd 	bl	10544 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   13b4a:	4629      	mov	r1, r5
   13b4c:	f7ff fa8a 	bl	13064 <ull_ticker_status_take>
	if (ret) {
   13b50:	2800      	cmp	r0, #0
   13b52:	d14c      	bne.n	13bee <ull_adv_reset+0x10a>
	ret = ull_disable(&adv->lll);
   13b54:	4835      	ldr	r0, [pc, #212]	; (13c2c <ull_adv_reset+0x148>)
   13b56:	f7ff fafb 	bl	13150 <ull_disable>
	LL_ASSERT(!ret);
   13b5a:	2800      	cmp	r0, #0
   13b5c:	d134      	bne.n	13bc8 <ull_adv_reset+0xe4>
	mark = ull_disable_unmark(adv);
   13b5e:	482e      	ldr	r0, [pc, #184]	; (13c18 <ull_adv_reset+0x134>)
   13b60:	f7ff fac6 	bl	130f0 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   13b64:	4284      	cmp	r4, r0
   13b66:	d00c      	beq.n	13b82 <ull_adv_reset+0x9e>
   13b68:	4a2c      	ldr	r2, [pc, #176]	; (13c1c <ull_adv_reset+0x138>)
   13b6a:	492d      	ldr	r1, [pc, #180]	; (13c20 <ull_adv_reset+0x13c>)
   13b6c:	482d      	ldr	r0, [pc, #180]	; (13c24 <ull_adv_reset+0x140>)
   13b6e:	f640 0301 	movw	r3, #2049	; 0x801
   13b72:	f010 fd37 	bl	245e4 <printk>
   13b76:	4040      	eors	r0, r0
   13b78:	f380 8811 	msr	BASEPRI, r0
   13b7c:	f04f 0003 	mov.w	r0, #3
   13b80:	df02      	svc	2
	if (adv->lll.conn) {
   13b82:	6a23      	ldr	r3, [r4, #32]
   13b84:	b10b      	cbz	r3, 13b8a <ull_adv_reset+0xa6>
		conn_release(adv);
   13b86:	f7ff fecb 	bl	13920 <conn_release.constprop.0>
	adv->is_enabled = 0U;
   13b8a:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
   13b8e:	f36f 0300 	bfc	r3, #0, #1
   13b92:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
}
   13b96:	2000      	movs	r0, #0
   13b98:	b005      	add	sp, #20
   13b9a:	bd30      	pop	{r4, r5, pc}
		ret_cb = TICKER_STATUS_BUSY;
   13b9c:	2202      	movs	r2, #2
   13b9e:	9203      	str	r2, [sp, #12]
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   13ba0:	2103      	movs	r1, #3
   13ba2:	4b21      	ldr	r3, [pc, #132]	; (13c28 <ull_adv_reset+0x144>)
   13ba4:	9500      	str	r5, [sp, #0]
   13ba6:	2201      	movs	r2, #1
   13ba8:	2000      	movs	r0, #0
   13baa:	f7fc fccb 	bl	10544 <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
   13bae:	4629      	mov	r1, r5
   13bb0:	f7ff fa58 	bl	13064 <ull_ticker_status_take>
		if (ret) {
   13bb4:	2800      	cmp	r0, #0
   13bb6:	d0c0      	beq.n	13b3a <ull_adv_reset+0x56>
			mark = ull_disable_unmark(adv);
   13bb8:	4817      	ldr	r0, [pc, #92]	; (13c18 <ull_adv_reset+0x134>)
   13bba:	f7ff fa99 	bl	130f0 <ull_disable_unmark>
			LL_ASSERT(mark == adv);
   13bbe:	4284      	cmp	r4, r0
   13bc0:	d0e9      	beq.n	13b96 <ull_adv_reset+0xb2>
   13bc2:	f240 73ea 	movw	r3, #2026	; 0x7ea
   13bc6:	e019      	b.n	13bfc <ull_adv_reset+0x118>
	LL_ASSERT(!ret);
   13bc8:	4a14      	ldr	r2, [pc, #80]	; (13c1c <ull_adv_reset+0x138>)
   13bca:	4919      	ldr	r1, [pc, #100]	; (13c30 <ull_adv_reset+0x14c>)
   13bcc:	4815      	ldr	r0, [pc, #84]	; (13c24 <ull_adv_reset+0x140>)
   13bce:	f240 73fe 	movw	r3, #2046	; 0x7fe
   13bd2:	f010 fd07 	bl	245e4 <printk>
   13bd6:	4040      	eors	r0, r0
   13bd8:	f380 8811 	msr	BASEPRI, r0
   13bdc:	f04f 0003 	mov.w	r0, #3
   13be0:	df02      	svc	2
	mark = ull_disable_unmark(adv);
   13be2:	480d      	ldr	r0, [pc, #52]	; (13c18 <ull_adv_reset+0x134>)
   13be4:	f7ff fa84 	bl	130f0 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   13be8:	4284      	cmp	r4, r0
   13bea:	d1bd      	bne.n	13b68 <ull_adv_reset+0x84>
   13bec:	e7c9      	b.n	13b82 <ull_adv_reset+0x9e>
		mark = ull_disable_unmark(adv);
   13bee:	480a      	ldr	r0, [pc, #40]	; (13c18 <ull_adv_reset+0x134>)
   13bf0:	f7ff fa7e 	bl	130f0 <ull_disable_unmark>
		LL_ASSERT(mark == adv);
   13bf4:	4284      	cmp	r4, r0
   13bf6:	d0ce      	beq.n	13b96 <ull_adv_reset+0xb2>
   13bf8:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
   13bfc:	4a07      	ldr	r2, [pc, #28]	; (13c1c <ull_adv_reset+0x138>)
   13bfe:	4908      	ldr	r1, [pc, #32]	; (13c20 <ull_adv_reset+0x13c>)
   13c00:	4808      	ldr	r0, [pc, #32]	; (13c24 <ull_adv_reset+0x140>)
   13c02:	f010 fcef 	bl	245e4 <printk>
   13c06:	4040      	eors	r0, r0
   13c08:	f380 8811 	msr	BASEPRI, r0
   13c0c:	f04f 0003 	mov.w	r0, #3
   13c10:	df02      	svc	2
}
   13c12:	2000      	movs	r0, #0
   13c14:	b005      	add	sp, #20
   13c16:	bd30      	pop	{r4, r5, pc}
   13c18:	2000181c 	.word	0x2000181c
   13c1c:	0002b4f8 	.word	0x0002b4f8
   13c20:	0002b5e8 	.word	0x0002b5e8
   13c24:	0002b0c4 	.word	0x0002b0c4
   13c28:	0001200d 	.word	0x0001200d
   13c2c:	20001838 	.word	0x20001838
   13c30:	0002b458 	.word	0x0002b458

00013c34 <ull_adv_reset_finalize>:
{
   13c34:	b510      	push	{r4, lr}
		lll_adv_data_reset(&lll->adv_data);
   13c36:	4c06      	ldr	r4, [pc, #24]	; (13c50 <ull_adv_reset_finalize+0x1c>)
   13c38:	f104 0028 	add.w	r0, r4, #40	; 0x28
   13c3c:	f006 fd36 	bl	1a6ac <lll_adv_data_reset>
		lll_adv_data_reset(&lll->scan_rsp);
   13c40:	f104 0034 	add.w	r0, r4, #52	; 0x34
   13c44:	f006 fd32 	bl	1a6ac <lll_adv_data_reset>
}
   13c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = init_reset();
   13c4c:	f7ff be38 	b.w	138c0 <init_reset>
   13c50:	2000181c 	.word	0x2000181c

00013c54 <ull_adv_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   13c54:	4a04      	ldr	r2, [pc, #16]	; (13c68 <ull_adv_handle_get+0x14>)
   13c56:	4b05      	ldr	r3, [pc, #20]	; (13c6c <ull_adv_handle_get+0x18>)
   13c58:	1a80      	subs	r0, r0, r2
   13c5a:	0880      	lsrs	r0, r0, #2
   13c5c:	fba3 3000 	umull	r3, r0, r3, r0
}
   13c60:	f3c0 008f 	ubfx	r0, r0, #2, #16
   13c64:	4770      	bx	lr
   13c66:	bf00      	nop
   13c68:	2000181c 	.word	0x2000181c
   13c6c:	30c30c31 	.word	0x30c30c31

00013c70 <ull_adv_lll_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   13c70:	4a04      	ldr	r2, [pc, #16]	; (13c84 <ull_adv_lll_handle_get+0x14>)
   13c72:	6800      	ldr	r0, [r0, #0]
   13c74:	4b04      	ldr	r3, [pc, #16]	; (13c88 <ull_adv_lll_handle_get+0x18>)
   13c76:	1a80      	subs	r0, r0, r2
   13c78:	0880      	lsrs	r0, r0, #2
   13c7a:	fba3 3000 	umull	r3, r0, r3, r0
}
   13c7e:	f3c0 008f 	ubfx	r0, r0, #2, #16
   13c82:	4770      	bx	lr
   13c84:	2000181c 	.word	0x2000181c
   13c88:	30c30c31 	.word	0x30c30c31

00013c8c <ull_adv_is_enabled_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   13c8c:	b938      	cbnz	r0, 13c9e <ull_adv_is_enabled_get+0x12>
	if (!adv || !adv->is_enabled) {
   13c8e:	4805      	ldr	r0, [pc, #20]	; (13ca4 <ull_adv_is_enabled_get+0x18>)
   13c90:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
	return &ll_adv[handle];
   13c94:	f013 0f01 	tst.w	r3, #1
   13c98:	bf08      	it	eq
   13c9a:	2000      	moveq	r0, #0
   13c9c:	4770      	bx	lr
		return NULL;
   13c9e:	2000      	movs	r0, #0
}
   13ca0:	4770      	bx	lr
   13ca2:	bf00      	nop
   13ca4:	2000181c 	.word	0x2000181c

00013ca8 <ull_adv_is_enabled>:
	if (handle >= BT_CTLR_ADV_SET) {
   13ca8:	b928      	cbnz	r0, 13cb6 <ull_adv_is_enabled+0xe>
	if (!adv || !adv->is_enabled) {
   13caa:	4b04      	ldr	r3, [pc, #16]	; (13cbc <ull_adv_is_enabled+0x14>)
   13cac:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
   13cb0:	f000 0001 	and.w	r0, r0, #1
   13cb4:	4770      	bx	lr
   13cb6:	2000      	movs	r0, #0
}
   13cb8:	4770      	bx	lr
   13cba:	bf00      	nop
   13cbc:	2000181c 	.word	0x2000181c

00013cc0 <ull_adv_filter_pol_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   13cc0:	b950      	cbnz	r0, 13cd8 <ull_adv_filter_pol_get+0x18>
	if (!adv || !adv->is_enabled) {
   13cc2:	4b06      	ldr	r3, [pc, #24]	; (13cdc <ull_adv_filter_pol_get+0x1c>)
   13cc4:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
   13cc8:	f010 0001 	ands.w	r0, r0, #1
   13ccc:	d005      	beq.n	13cda <ull_adv_filter_pol_get+0x1a>
	return adv->lll.filter_policy;
   13cce:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
   13cd2:	f000 0003 	and.w	r0, r0, #3
   13cd6:	4770      	bx	lr
		return 0;
   13cd8:	2000      	movs	r0, #0
}
   13cda:	4770      	bx	lr
   13cdc:	2000181c 	.word	0x2000181c

00013ce0 <ull_adv_data_set>:
{
   13ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   13ce4:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   13ce8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   13cec:	b082      	sub	sp, #8
   13cee:	6ade      	ldr	r6, [r3, #44]	; 0x2c
	if (prev->type == PDU_ADV_TYPE_DIRECT_IND) {
   13cf0:	7833      	ldrb	r3, [r6, #0]
   13cf2:	f003 030f 	and.w	r3, r3, #15
   13cf6:	2b01      	cmp	r3, #1
   13cf8:	d034      	beq.n	13d64 <ull_adv_data_set+0x84>
	if (len > PDU_AC_DATA_SIZE_MAX) {
   13cfa:	291f      	cmp	r1, #31
   13cfc:	460d      	mov	r5, r1
   13cfe:	d82d      	bhi.n	13d5c <ull_adv_data_set+0x7c>
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   13d00:	4604      	mov	r4, r0
   13d02:	f10d 0107 	add.w	r1, sp, #7
   13d06:	3028      	adds	r0, #40	; 0x28
   13d08:	4690      	mov	r8, r2
   13d0a:	f006 fcd5 	bl	1a6b8 <lll_adv_pdu_alloc>
		pdu->chan_sel = prev->chan_sel;
   13d0e:	7832      	ldrb	r2, [r6, #0]
   13d10:	f3c2 1140 	ubfx	r1, r2, #5, #1
	pdu->type = prev->type;
   13d14:	f3c2 0303 	ubfx	r3, r2, #0, #4
   13d18:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
	pdu->tx_addr = prev->tx_addr;
   13d1c:	f3c2 1180 	ubfx	r1, r2, #6, #1
	pdu->type = prev->type;
   13d20:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
   13d24:	f002 0280 	and.w	r2, r2, #128	; 0x80
   13d28:	4601      	mov	r1, r0
   13d2a:	4313      	orrs	r3, r2
   13d2c:	f801 3b02 	strb.w	r3, [r1], #2
   13d30:	f856 3f02 	ldr.w	r3, [r6, #2]!
   13d34:	f8c0 3002 	str.w	r3, [r0, #2]
   13d38:	88b3      	ldrh	r3, [r6, #4]
   13d3a:	808b      	strh	r3, [r1, #4]
   13d3c:	4607      	mov	r7, r0
   13d3e:	462a      	mov	r2, r5
   13d40:	4641      	mov	r1, r8
   13d42:	3008      	adds	r0, #8
   13d44:	f016 fb4c 	bl	2a3e0 <memcpy>
	pdu->last = idx;
   13d48:	f89d 3007 	ldrb.w	r3, [sp, #7]
	pdu->len = BDADDR_SIZE + len;
   13d4c:	3506      	adds	r5, #6
	return 0;
   13d4e:	2000      	movs	r0, #0
	pdu->len = BDADDR_SIZE + len;
   13d50:	707d      	strb	r5, [r7, #1]
   13d52:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
   13d56:	b002      	add	sp, #8
   13d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_INVALID_PARAM;
   13d5c:	2012      	movs	r0, #18
}
   13d5e:	b002      	add	sp, #8
   13d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 0;
   13d64:	2000      	movs	r0, #0
}
   13d66:	b002      	add	sp, #8
   13d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00013d6c <ll_adv_data_set>:
{
   13d6c:	460a      	mov	r2, r1
	return ull_adv_data_set(adv, len, data);
   13d6e:	4601      	mov	r1, r0
   13d70:	4801      	ldr	r0, [pc, #4]	; (13d78 <ll_adv_data_set+0xc>)
   13d72:	f7ff bfb5 	b.w	13ce0 <ull_adv_data_set>
   13d76:	bf00      	nop
   13d78:	2000181c 	.word	0x2000181c

00013d7c <ull_scan_rsp_set>:
{
   13d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   13d7e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
   13d82:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   13d86:	b083      	sub	sp, #12
   13d88:	6b9d      	ldr	r5, [r3, #56]	; 0x38
   13d8a:	460e      	mov	r6, r1
   13d8c:	4604      	mov	r4, r0
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
   13d8e:	f10d 0107 	add.w	r1, sp, #7
   13d92:	3034      	adds	r0, #52	; 0x34
   13d94:	4617      	mov	r7, r2
   13d96:	f006 fc8f 	bl	1a6b8 <lll_adv_pdu_alloc>
	pdu->tx_addr = prev->tx_addr;
   13d9a:	782b      	ldrb	r3, [r5, #0]
   13d9c:	f3c3 1380 	ubfx	r3, r3, #6, #1
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   13da0:	019b      	lsls	r3, r3, #6
	pdu->len = BDADDR_SIZE + len;
   13da2:	1db2      	adds	r2, r6, #6
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   13da4:	f043 0304 	orr.w	r3, r3, #4
	pdu->len = BDADDR_SIZE + len;
   13da8:	7042      	strb	r2, [r0, #1]
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   13daa:	7003      	strb	r3, [r0, #0]
   13dac:	f855 3f02 	ldr.w	r3, [r5, #2]!
   13db0:	f8c0 3002 	str.w	r3, [r0, #2]
   13db4:	88ab      	ldrh	r3, [r5, #4]
   13db6:	80c3      	strh	r3, [r0, #6]
   13db8:	4639      	mov	r1, r7
   13dba:	4632      	mov	r2, r6
   13dbc:	3008      	adds	r0, #8
   13dbe:	f016 fb0f 	bl	2a3e0 <memcpy>
	pdu->last = idx;
   13dc2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   13dc6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
   13dca:	2000      	movs	r0, #0
   13dcc:	b003      	add	sp, #12
   13dce:	bdf0      	pop	{r4, r5, r6, r7, pc}

00013dd0 <ll_adv_scan_rsp_set>:
{
   13dd0:	460a      	mov	r2, r1
	return ull_scan_rsp_set(adv, len, data);
   13dd2:	4601      	mov	r1, r0
   13dd4:	4801      	ldr	r0, [pc, #4]	; (13ddc <ll_adv_scan_rsp_set+0xc>)
   13dd6:	f7ff bfd1 	b.w	13d7c <ull_scan_rsp_set>
   13dda:	bf00      	nop
   13ddc:	2000181c 	.word	0x2000181c

00013de0 <ull_adv_pdu_update_addrs>:
{
   13de0:	b570      	push	{r4, r5, r6, lr}
   13de2:	460c      	mov	r4, r1
   13de4:	4605      	mov	r5, r0
	const uint8_t *rpa = ull_filter_adva_get(adv);
   13de6:	f005 fa89 	bl	192fc <ull_filter_adva_get>
			own_addr = ll_addr_get(pdu->tx_addr, NULL);
   13dea:	7823      	ldrb	r3, [r4, #0]
	if (!rpa || IS_ENABLED(CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN)) {
   13dec:	b308      	cbz	r0, 13e32 <ull_adv_pdu_update_addrs+0x52>
		pdu->tx_addr = 1;
   13dee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13df2:	7023      	strb	r3, [r4, #0]
	if ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   13df4:	7823      	ldrb	r3, [r4, #0]
   13df6:	6802      	ldr	r2, [r0, #0]
   13df8:	f8c4 2002 	str.w	r2, [r4, #2]
   13dfc:	f003 030f 	and.w	r3, r3, #15
   13e00:	8882      	ldrh	r2, [r0, #4]
   13e02:	80e2      	strh	r2, [r4, #6]
   13e04:	2b01      	cmp	r3, #1
	return pdu->adv_ind.addr;
   13e06:	f104 0602 	add.w	r6, r4, #2
	if ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   13e0a:	d001      	beq.n	13e10 <ull_adv_pdu_update_addrs+0x30>
}
   13e0c:	4630      	mov	r0, r6
   13e0e:	bd70      	pop	{r4, r5, r6, pc}
	rx_addr = ull_filter_tgta_get(adv);
   13e10:	4628      	mov	r0, r5
   13e12:	f005 faa1 	bl	19358 <ull_filter_tgta_get>
	if (rx_addr) {
   13e16:	2800      	cmp	r0, #0
   13e18:	d0f8      	beq.n	13e0c <ull_adv_pdu_update_addrs+0x2c>
		pdu->rx_addr = 1;
   13e1a:	7822      	ldrb	r2, [r4, #0]
   13e1c:	4623      	mov	r3, r4
   13e1e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   13e22:	f803 2b08 	strb.w	r2, [r3], #8
   13e26:	6802      	ldr	r2, [r0, #0]
   13e28:	60a2      	str	r2, [r4, #8]
   13e2a:	8882      	ldrh	r2, [r0, #4]
   13e2c:	809a      	strh	r2, [r3, #4]
}
   13e2e:	4630      	mov	r0, r6
   13e30:	bd70      	pop	{r4, r5, r6, pc}
			own_addr = ll_addr_get(pdu->tx_addr, NULL);
   13e32:	4601      	mov	r1, r0
   13e34:	f3c3 1080 	ubfx	r0, r3, #6, #1
   13e38:	f7fc fbcc 	bl	105d4 <ll_addr_get>
	if (rpa) {
   13e3c:	e7da      	b.n	13df4 <ull_adv_pdu_update_addrs+0x14>
   13e3e:	bf00      	nop

00013e40 <tx_ull_dequeue>:
{
   13e40:	b410      	push	{r4}
   13e42:	e9d0 2471 	ldrd	r2, r4, [r0, #452]	; 0x1c4
   13e46:	4603      	mov	r3, r0
   13e48:	4608      	mov	r0, r1
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   13e4a:	b164      	cbz	r4, 13e66 <tx_ull_dequeue+0x26>
	if (conn->tx_head == conn->tx_ctrl) {
   13e4c:	4294      	cmp	r4, r2
   13e4e:	d027      	beq.n	13ea0 <tx_ull_dequeue+0x60>
		if (conn->tx_head == conn->tx_data) {
   13e50:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
   13e54:	4291      	cmp	r1, r2
   13e56:	d018      	beq.n	13e8a <tx_ull_dequeue+0x4a>
		conn->tx_head = conn->tx_head->next;
   13e58:	6812      	ldr	r2, [r2, #0]
   13e5a:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
		tx->next = NULL;
   13e5e:	2300      	movs	r3, #0
}
   13e60:	bc10      	pop	{r4}
		tx->next = NULL;
   13e62:	6003      	str	r3, [r0, #0]
}
   13e64:	4770      	bx	lr
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   13e66:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
   13e6a:	4291      	cmp	r1, r2
   13e6c:	d023      	beq.n	13eb6 <tx_ull_dequeue+0x76>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   13e6e:	7911      	ldrb	r1, [r2, #4]
   13e70:	f001 0103 	and.w	r1, r1, #3
   13e74:	2903      	cmp	r1, #3
   13e76:	d00d      	beq.n	13e94 <tx_ull_dequeue+0x54>
		conn->tx_head = conn->tx_head->next;
   13e78:	6812      	ldr	r2, [r2, #0]
   13e7a:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
			conn->tx_ctrl = NULL;
   13e7e:	2200      	movs	r2, #0
			conn->tx_ctrl_last = NULL;
   13e80:	e9c3 2272 	strd	r2, r2, [r3, #456]	; 0x1c8
}
   13e84:	bc10      	pop	{r4}
		tx->next = tx;
   13e86:	6000      	str	r0, [r0, #0]
}
   13e88:	4770      	bx	lr
   13e8a:	4611      	mov	r1, r2
			conn->tx_data = conn->tx_data->next;
   13e8c:	6809      	ldr	r1, [r1, #0]
   13e8e:	f8c3 11d0 	str.w	r1, [r3, #464]	; 0x1d0
   13e92:	e7e1      	b.n	13e58 <tx_ull_dequeue+0x18>
	    ((pdu_data_tx->llctrl.opcode !=
   13e94:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   13e96:	2903      	cmp	r1, #3
   13e98:	d0de      	beq.n	13e58 <tx_ull_dequeue+0x18>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   13e9a:	290a      	cmp	r1, #10
   13e9c:	d1ec      	bne.n	13e78 <tx_ull_dequeue+0x38>
   13e9e:	e7db      	b.n	13e58 <tx_ull_dequeue+0x18>
   13ea0:	f8d3 11cc 	ldr.w	r1, [r3, #460]	; 0x1cc
		conn->tx_head = conn->tx_head->next;
   13ea4:	6812      	ldr	r2, [r2, #0]
   13ea6:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   13eaa:	42a1      	cmp	r1, r4
			conn->tx_ctrl = conn->tx_head;
   13eac:	bf18      	it	ne
   13eae:	f8c3 21c8 	strne.w	r2, [r3, #456]	; 0x1c8
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   13eb2:	d1e7      	bne.n	13e84 <tx_ull_dequeue+0x44>
   13eb4:	e7e3      	b.n	13e7e <tx_ull_dequeue+0x3e>
	if (conn->tx_head == conn->tx_ctrl) {
   13eb6:	2a00      	cmp	r2, #0
   13eb8:	d1e8      	bne.n	13e8c <tx_ull_dequeue+0x4c>
   13eba:	f8d3 11cc 	ldr.w	r1, [r3, #460]	; 0x1cc
   13ebe:	4614      	mov	r4, r2
   13ec0:	e7f0      	b.n	13ea4 <tx_ull_dequeue+0x64>
   13ec2:	bf00      	nop

00013ec4 <init_reset>:
{
   13ec4:	b538      	push	{r3, r4, r5, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
   13ec6:	4813      	ldr	r0, [pc, #76]	; (13f14 <init_reset+0x50>)
   13ec8:	4b13      	ldr	r3, [pc, #76]	; (13f18 <init_reset+0x54>)
   13eca:	2201      	movs	r2, #1
   13ecc:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   13ed0:	f7fa ff3c 	bl	ed4c <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_CTLR_TX_BUFFERS,
   13ed4:	4b11      	ldr	r3, [pc, #68]	; (13f1c <init_reset+0x58>)
   13ed6:	2203      	movs	r2, #3
   13ed8:	1d18      	adds	r0, r3, #4
   13eda:	2124      	movs	r1, #36	; 0x24
   13edc:	f7fa ff36 	bl	ed4c <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
   13ee0:	4b0f      	ldr	r3, [pc, #60]	; (13f20 <init_reset+0x5c>)
   13ee2:	2204      	movs	r2, #4
   13ee4:	1898      	adds	r0, r3, r2
   13ee6:	212c      	movs	r1, #44	; 0x2c
   13ee8:	f7fa ff30 	bl	ed4c <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
   13eec:	4b0d      	ldr	r3, [pc, #52]	; (13f24 <init_reset+0x60>)
   13eee:	2207      	movs	r2, #7
   13ef0:	1d18      	adds	r0, r3, #4
   13ef2:	2108      	movs	r1, #8
   13ef4:	f7fa ff2a 	bl	ed4c <mem_init>
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   13ef8:	4b0b      	ldr	r3, [pc, #44]	; (13f28 <init_reset+0x64>)
	default_phy_tx |= PHY_2M;
   13efa:	490c      	ldr	r1, [pc, #48]	; (13f2c <init_reset+0x68>)
	default_phy_rx |= PHY_2M;
   13efc:	4a0c      	ldr	r2, [pc, #48]	; (13f30 <init_reset+0x6c>)
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   13efe:	480d      	ldr	r0, [pc, #52]	; (13f34 <init_reset+0x70>)
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   13f00:	251b      	movs	r5, #27
   13f02:	801d      	strh	r5, [r3, #0]
	default_phy_tx |= PHY_2M;
   13f04:	2303      	movs	r3, #3
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   13f06:	f44f 74a4 	mov.w	r4, #328	; 0x148
	default_phy_tx |= PHY_2M;
   13f0a:	700b      	strb	r3, [r1, #0]
	default_phy_rx |= PHY_2M;
   13f0c:	7013      	strb	r3, [r2, #0]
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   13f0e:	8004      	strh	r4, [r0, #0]
}
   13f10:	2000      	movs	r0, #0
   13f12:	bd38      	pop	{r3, r4, r5, pc}
   13f14:	20000768 	.word	0x20000768
   13f18:	2000188c 	.word	0x2000188c
   13f1c:	200018a4 	.word	0x200018a4
   13f20:	20001914 	.word	0x20001914
   13f24:	200019c8 	.word	0x200019c8
   13f28:	20002524 	.word	0x20002524
   13f2c:	20002aa7 	.word	0x20002aa7
   13f30:	20002aa6 	.word	0x20002aa6
   13f34:	20002526 	.word	0x20002526

00013f38 <ctrl_tx_pause_enqueue>:
{
   13f38:	b538      	push	{r3, r4, r5, lr}
   13f3a:	4604      	mov	r4, r0
   13f3c:	e9d0 3071 	ldrd	r3, r0, [r0, #452]	; 0x1c4
   13f40:	460d      	mov	r5, r1
	if (
   13f42:	b11b      	cbz	r3, 13f4c <ctrl_tx_pause_enqueue+0x14>
	    !conn->llcp_enc.pause_tx &&
   13f44:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   13f48:	0789      	lsls	r1, r1, #30
   13f4a:	d50b      	bpl.n	13f64 <ctrl_tx_pause_enqueue+0x2c>
		if (!conn->tx_ctrl) {
   13f4c:	b1e0      	cbz	r0, 13f88 <ctrl_tx_pause_enqueue+0x50>
			LL_ASSERT(!pause);
   13f4e:	bb2a      	cbnz	r2, 13f9c <ctrl_tx_pause_enqueue+0x64>
	tx->next = conn->tx_ctrl_last->next;
   13f50:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   13f54:	681a      	ldr	r2, [r3, #0]
   13f56:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   13f58:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
   13f5a:	682b      	ldr	r3, [r5, #0]
   13f5c:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
	if (!tx->next) {
   13f60:	b17b      	cbz	r3, 13f82 <ctrl_tx_pause_enqueue+0x4a>
}
   13f62:	bd38      	pop	{r3, r4, r5, pc}
	    !conn->llcp_phy.pause_tx &&
   13f64:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   13f68:	07c9      	lsls	r1, r1, #31
   13f6a:	d4ef      	bmi.n	13f4c <ctrl_tx_pause_enqueue+0x14>
		if (conn->tx_head == conn->tx_data) {
   13f6c:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   13f70:	428b      	cmp	r3, r1
   13f72:	d021      	beq.n	13fb8 <ctrl_tx_pause_enqueue+0x80>
		} else if (!conn->tx_ctrl) {
   13f74:	2800      	cmp	r0, #0
   13f76:	d02e      	beq.n	13fd6 <ctrl_tx_pause_enqueue+0x9e>
			LL_ASSERT(!pause);
   13f78:	2a00      	cmp	r2, #0
   13f7a:	d0e9      	beq.n	13f50 <ctrl_tx_pause_enqueue+0x18>
   13f7c:	f640 0359 	movw	r3, #2137	; 0x859
   13f80:	e00e      	b.n	13fa0 <ctrl_tx_pause_enqueue+0x68>
		conn->tx_data_last = tx;
   13f82:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
}
   13f86:	bd38      	pop	{r3, r4, r5, pc}
			tx->next = conn->tx_head;
   13f88:	602b      	str	r3, [r5, #0]
			conn->tx_head = tx;
   13f8a:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
			if (!pause) {
   13f8e:	2a00      	cmp	r2, #0
   13f90:	d1e6      	bne.n	13f60 <ctrl_tx_pause_enqueue+0x28>
				conn->tx_ctrl_last = tx;
   13f92:	e9c4 5572 	strd	r5, r5, [r4, #456]	; 0x1c8
	if (!tx->next) {
   13f96:	2b00      	cmp	r3, #0
   13f98:	d1e3      	bne.n	13f62 <ctrl_tx_pause_enqueue+0x2a>
   13f9a:	e7f2      	b.n	13f82 <ctrl_tx_pause_enqueue+0x4a>
			LL_ASSERT(!pause);
   13f9c:	f640 036b 	movw	r3, #2155	; 0x86b
   13fa0:	4a15      	ldr	r2, [pc, #84]	; (13ff8 <ctrl_tx_pause_enqueue+0xc0>)
   13fa2:	4916      	ldr	r1, [pc, #88]	; (13ffc <ctrl_tx_pause_enqueue+0xc4>)
   13fa4:	4816      	ldr	r0, [pc, #88]	; (14000 <ctrl_tx_pause_enqueue+0xc8>)
   13fa6:	f010 fb1d 	bl	245e4 <printk>
   13faa:	4040      	eors	r0, r0
   13fac:	f380 8811 	msr	BASEPRI, r0
   13fb0:	f04f 0003 	mov.w	r0, #3
   13fb4:	df02      	svc	2
   13fb6:	e7cb      	b.n	13f50 <ctrl_tx_pause_enqueue+0x18>
			conn->tx_data = conn->tx_data->next;
   13fb8:	6819      	ldr	r1, [r3, #0]
   13fba:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   13fbe:	2800      	cmp	r0, #0
   13fc0:	d1da      	bne.n	13f78 <ctrl_tx_pause_enqueue+0x40>
			tx->next = conn->tx_head->next;
   13fc2:	6819      	ldr	r1, [r3, #0]
   13fc4:	6029      	str	r1, [r5, #0]
			conn->tx_head->next = tx;
   13fc6:	601d      	str	r5, [r3, #0]
			if (!pause) {
   13fc8:	b90a      	cbnz	r2, 13fce <ctrl_tx_pause_enqueue+0x96>
				conn->tx_ctrl_last = tx;
   13fca:	e9c4 5572 	strd	r5, r5, [r4, #456]	; 0x1c8
   13fce:	682b      	ldr	r3, [r5, #0]
	if (!tx->next) {
   13fd0:	2b00      	cmp	r3, #0
   13fd2:	d1c6      	bne.n	13f62 <ctrl_tx_pause_enqueue+0x2a>
   13fd4:	e7d5      	b.n	13f82 <ctrl_tx_pause_enqueue+0x4a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   13fd6:	7919      	ldrb	r1, [r3, #4]
   13fd8:	f001 0103 	and.w	r1, r1, #3
   13fdc:	2903      	cmp	r1, #3
   13fde:	d004      	beq.n	13fea <ctrl_tx_pause_enqueue+0xb2>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   13fe0:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
			LL_ASSERT(!pause);
   13fe4:	2a00      	cmp	r2, #0
   13fe6:	d0b3      	beq.n	13f50 <ctrl_tx_pause_enqueue+0x18>
   13fe8:	e7c8      	b.n	13f7c <ctrl_tx_pause_enqueue+0x44>
	    ((pdu_data_tx->llctrl.opcode !=
   13fea:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   13fec:	2903      	cmp	r1, #3
   13fee:	d0e8      	beq.n	13fc2 <ctrl_tx_pause_enqueue+0x8a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   13ff0:	290a      	cmp	r1, #10
   13ff2:	d1f5      	bne.n	13fe0 <ctrl_tx_pause_enqueue+0xa8>
   13ff4:	e7e5      	b.n	13fc2 <ctrl_tx_pause_enqueue+0x8a>
   13ff6:	bf00      	nop
   13ff8:	0002b604 	.word	0x0002b604
   13ffc:	0002b644 	.word	0x0002b644
   14000:	0002b0c4 	.word	0x0002b0c4

00014004 <tx_lll_flush>:
{
   14004:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct ll_conn *conn = (void *)HDR_LLL2EVT(param);
   14008:	f8d0 8000 	ldr.w	r8, [r0]
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   1400c:	4934      	ldr	r1, [pc, #208]	; (140e0 <tx_lll_flush+0xdc>)
{
   1400e:	b083      	sub	sp, #12
   14010:	4605      	mov	r5, r0
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   14012:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   14016:	4640      	mov	r0, r8
   14018:	f7fa feec 	bl	edf4 <mem_index_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   1401c:	f105 0648 	add.w	r6, r5, #72	; 0x48
	lll_conn_flush(handle, lll);
   14020:	4629      	mov	r1, r5
   14022:	f006 fff1 	bl	1b008 <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   14026:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
   14028:	4631      	mov	r1, r6
   1402a:	aa01      	add	r2, sp, #4
   1402c:	f7fa ff20 	bl	ee70 <memq_dequeue>
	while (link) {
   14030:	b328      	cbz	r0, 1407e <tx_lll_flush+0x7a>
   14032:	4c2c      	ldr	r4, [pc, #176]	; (140e4 <tx_lll_flush+0xe0>)
		lll_tx->handle = 0xFFFF;
   14034:	f64f 77ff 	movw	r7, #65535	; 0xffff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   14038:	f104 0904 	add.w	r9, r4, #4
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   1403c:	78e1      	ldrb	r1, [r4, #3]
	if (last == count) {
   1403e:	f894 c001 	ldrb.w	ip, [r4, #1]
   14042:	78a2      	ldrb	r2, [r4, #2]
	last = last + 1;
   14044:	1c4b      	adds	r3, r1, #1
   14046:	b2db      	uxtb	r3, r3
		last = 0U;
   14048:	459c      	cmp	ip, r3
   1404a:	bf08      	it	eq
   1404c:	2300      	moveq	r3, #0
	if (last == first) {
   1404e:	429a      	cmp	r2, r3
   14050:	d035      	beq.n	140be <tx_lll_flush+0xba>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   14052:	7822      	ldrb	r2, [r4, #0]
   14054:	fb12 f201 	smulbb	r2, r2, r1
		LL_ASSERT(lll_tx);
   14058:	eb19 0c02 	adds.w	ip, r9, r2
   1405c:	d02f      	beq.n	140be <tx_lll_flush+0xba>
		lll_tx->node = tx;
   1405e:	9901      	ldr	r1, [sp, #4]
		lll_tx->handle = 0xFFFF;
   14060:	f829 7002 	strh.w	r7, [r9, r2]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   14064:	680a      	ldr	r2, [r1, #0]
		lll_tx->node = tx;
   14066:	f8cc 1004 	str.w	r1, [ip, #4]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   1406a:	6002      	str	r2, [r0, #0]
		tx->next = link;
   1406c:	6008      	str	r0, [r1, #0]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   1406e:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
	*last = idx; /* Commit: Update write index */
   14070:	70e3      	strb	r3, [r4, #3]
   14072:	aa01      	add	r2, sp, #4
   14074:	4631      	mov	r1, r6
   14076:	f7fa fefb 	bl	ee70 <memq_dequeue>
	while (link) {
   1407a:	2800      	cmp	r0, #0
   1407c:	d1de      	bne.n	1403c <tx_lll_flush+0x38>
	LL_ASSERT(rx->hdr.link);
   1407e:	f8d8 0144 	ldr.w	r0, [r8, #324]	; 0x144
	rx = (void *)&conn->llcp_terminate.node_rx;
   14082:	f508 74a2 	add.w	r4, r8, #324	; 0x144
	LL_ASSERT(rx->hdr.link);
   14086:	b150      	cbz	r0, 1409e <tx_lll_flush+0x9a>
	rx->hdr.link = NULL;
   14088:	2300      	movs	r3, #0
	ull_rx_put(link, rx);
   1408a:	4621      	mov	r1, r4
	rx->hdr.link = NULL;
   1408c:	f8c8 3144 	str.w	r3, [r8, #324]	; 0x144
	ull_rx_put(link, rx);
   14090:	f7ff f930 	bl	132f4 <ull_rx_put>
	ull_rx_sched();
   14094:	f7ff f93e 	bl	13314 <ull_rx_sched>
}
   14098:	b003      	add	sp, #12
   1409a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(rx->hdr.link);
   1409e:	4a12      	ldr	r2, [pc, #72]	; (140e8 <tx_lll_flush+0xe4>)
   140a0:	4912      	ldr	r1, [pc, #72]	; (140ec <tx_lll_flush+0xe8>)
   140a2:	4813      	ldr	r0, [pc, #76]	; (140f0 <tx_lll_flush+0xec>)
   140a4:	f240 73c6 	movw	r3, #1990	; 0x7c6
   140a8:	f010 fa9c 	bl	245e4 <printk>
   140ac:	4040      	eors	r0, r0
   140ae:	f380 8811 	msr	BASEPRI, r0
   140b2:	f04f 0003 	mov.w	r0, #3
   140b6:	df02      	svc	2
   140b8:	f8d8 0144 	ldr.w	r0, [r8, #324]	; 0x144
   140bc:	e7e4      	b.n	14088 <tx_lll_flush+0x84>
		LL_ASSERT(lll_tx);
   140be:	4a0a      	ldr	r2, [pc, #40]	; (140e8 <tx_lll_flush+0xe4>)
   140c0:	490c      	ldr	r1, [pc, #48]	; (140f4 <tx_lll_flush+0xf0>)
   140c2:	480b      	ldr	r0, [pc, #44]	; (140f0 <tx_lll_flush+0xec>)
   140c4:	f240 73b2 	movw	r3, #1970	; 0x7b2
   140c8:	f010 fa8c 	bl	245e4 <printk>
   140cc:	4040      	eors	r0, r0
   140ce:	f380 8811 	msr	BASEPRI, r0
   140d2:	f04f 0003 	mov.w	r0, #3
   140d6:	df02      	svc	2
		lll_tx->handle = 0xFFFF;
   140d8:	2300      	movs	r3, #0
   140da:	801b      	strh	r3, [r3, #0]
   140dc:	deff      	udf	#255	; 0xff
   140de:	bf00      	nop
   140e0:	20000768 	.word	0x20000768
   140e4:	20007a7c 	.word	0x20007a7c
   140e8:	0002b604 	.word	0x0002b604
   140ec:	0002b654 	.word	0x0002b654
   140f0:	0002b0c4 	.word	0x0002b0c4
   140f4:	0002b64c 	.word	0x0002b64c

000140f8 <ticker_op_stop_cb>:
{
   140f8:	b510      	push	{r4, lr}
   140fa:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   140fc:	b9b0      	cbnz	r0, 1412c <ticker_op_stop_cb+0x34>
	mfy.param = param;
   140fe:	4b12      	ldr	r3, [pc, #72]	; (14148 <ticker_op_stop_cb+0x50>)
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
   14100:	2200      	movs	r2, #0
   14102:	4611      	mov	r1, r2
   14104:	2002      	movs	r0, #2
	mfy.param = param;
   14106:	609c      	str	r4, [r3, #8]
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
   14108:	f7fa ff16 	bl	ef38 <mayfly_enqueue>
	LL_ASSERT(!retval);
   1410c:	b900      	cbnz	r0, 14110 <ticker_op_stop_cb+0x18>
}
   1410e:	bd10      	pop	{r4, pc}
	LL_ASSERT(!retval);
   14110:	4a0e      	ldr	r2, [pc, #56]	; (1414c <ticker_op_stop_cb+0x54>)
   14112:	490f      	ldr	r1, [pc, #60]	; (14150 <ticker_op_stop_cb+0x58>)
   14114:	480f      	ldr	r0, [pc, #60]	; (14154 <ticker_op_stop_cb+0x5c>)
   14116:	f240 7321 	movw	r3, #1825	; 0x721
   1411a:	f010 fa63 	bl	245e4 <printk>
   1411e:	4040      	eors	r0, r0
   14120:	f380 8811 	msr	BASEPRI, r0
   14124:	f04f 0003 	mov.w	r0, #3
   14128:	df02      	svc	2
}
   1412a:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1412c:	4a07      	ldr	r2, [pc, #28]	; (1414c <ticker_op_stop_cb+0x54>)
   1412e:	490a      	ldr	r1, [pc, #40]	; (14158 <ticker_op_stop_cb+0x60>)
   14130:	4808      	ldr	r0, [pc, #32]	; (14154 <ticker_op_stop_cb+0x5c>)
   14132:	f240 731a 	movw	r3, #1818	; 0x71a
   14136:	f010 fa55 	bl	245e4 <printk>
   1413a:	4040      	eors	r0, r0
   1413c:	f380 8811 	msr	BASEPRI, r0
   14140:	f04f 0003 	mov.w	r0, #3
   14144:	df02      	svc	2
   14146:	e7da      	b.n	140fe <ticker_op_stop_cb+0x6>
   14148:	20007af4 	.word	0x20007af4
   1414c:	0002b604 	.word	0x0002b604
   14150:	0002b390 	.word	0x0002b390
   14154:	0002b0c4 	.word	0x0002b0c4
   14158:	0002b664 	.word	0x0002b664

0001415c <ticker_start_conn_op_cb>:
{
   1415c:	b510      	push	{r4, lr}
   1415e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   14160:	b990      	cbnz	r0, 14188 <ticker_start_conn_op_cb+0x2c>
	p = ull_update_unmark(param);
   14162:	4620      	mov	r0, r4
   14164:	f7fe ffe2 	bl	1312c <ull_update_unmark>
	LL_ASSERT(p == param);
   14168:	4284      	cmp	r4, r0
   1416a:	d00c      	beq.n	14186 <ticker_start_conn_op_cb+0x2a>
   1416c:	4a0d      	ldr	r2, [pc, #52]	; (141a4 <ticker_start_conn_op_cb+0x48>)
   1416e:	490e      	ldr	r1, [pc, #56]	; (141a8 <ticker_start_conn_op_cb+0x4c>)
   14170:	480e      	ldr	r0, [pc, #56]	; (141ac <ticker_start_conn_op_cb+0x50>)
   14172:	f240 7311 	movw	r3, #1809	; 0x711
   14176:	f010 fa35 	bl	245e4 <printk>
   1417a:	4040      	eors	r0, r0
   1417c:	f380 8811 	msr	BASEPRI, r0
   14180:	f04f 0003 	mov.w	r0, #3
   14184:	df02      	svc	2
}
   14186:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   14188:	4a06      	ldr	r2, [pc, #24]	; (141a4 <ticker_start_conn_op_cb+0x48>)
   1418a:	4909      	ldr	r1, [pc, #36]	; (141b0 <ticker_start_conn_op_cb+0x54>)
   1418c:	4807      	ldr	r0, [pc, #28]	; (141ac <ticker_start_conn_op_cb+0x50>)
   1418e:	f240 730e 	movw	r3, #1806	; 0x70e
   14192:	f010 fa27 	bl	245e4 <printk>
   14196:	4040      	eors	r0, r0
   14198:	f380 8811 	msr	BASEPRI, r0
   1419c:	f04f 0003 	mov.w	r0, #3
   141a0:	df02      	svc	2
   141a2:	e7de      	b.n	14162 <ticker_start_conn_op_cb+0x6>
   141a4:	0002b604 	.word	0x0002b604
   141a8:	0002b670 	.word	0x0002b670
   141ac:	0002b0c4 	.word	0x0002b0c4
   141b0:	0002b664 	.word	0x0002b664

000141b4 <ticker_stop_conn_op_cb>:
{
   141b4:	b510      	push	{r4, lr}
   141b6:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   141b8:	b990      	cbnz	r0, 141e0 <ticker_stop_conn_op_cb+0x2c>
	p = ull_update_mark(param);
   141ba:	4620      	mov	r0, r4
   141bc:	f7fe ffaa 	bl	13114 <ull_update_mark>
	LL_ASSERT(p == param);
   141c0:	4284      	cmp	r4, r0
   141c2:	d00c      	beq.n	141de <ticker_stop_conn_op_cb+0x2a>
   141c4:	4a0d      	ldr	r2, [pc, #52]	; (141fc <ticker_stop_conn_op_cb+0x48>)
   141c6:	490e      	ldr	r1, [pc, #56]	; (14200 <ticker_stop_conn_op_cb+0x4c>)
   141c8:	480e      	ldr	r0, [pc, #56]	; (14204 <ticker_stop_conn_op_cb+0x50>)
   141ca:	f240 7307 	movw	r3, #1799	; 0x707
   141ce:	f010 fa09 	bl	245e4 <printk>
   141d2:	4040      	eors	r0, r0
   141d4:	f380 8811 	msr	BASEPRI, r0
   141d8:	f04f 0003 	mov.w	r0, #3
   141dc:	df02      	svc	2
}
   141de:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   141e0:	4a06      	ldr	r2, [pc, #24]	; (141fc <ticker_stop_conn_op_cb+0x48>)
   141e2:	4909      	ldr	r1, [pc, #36]	; (14208 <ticker_stop_conn_op_cb+0x54>)
   141e4:	4807      	ldr	r0, [pc, #28]	; (14204 <ticker_stop_conn_op_cb+0x50>)
   141e6:	f240 7304 	movw	r3, #1796	; 0x704
   141ea:	f010 f9fb 	bl	245e4 <printk>
   141ee:	4040      	eors	r0, r0
   141f0:	f380 8811 	msr	BASEPRI, r0
   141f4:	f04f 0003 	mov.w	r0, #3
   141f8:	df02      	svc	2
   141fa:	e7de      	b.n	141ba <ticker_stop_conn_op_cb+0x6>
   141fc:	0002b604 	.word	0x0002b604
   14200:	0002b670 	.word	0x0002b670
   14204:	0002b0c4 	.word	0x0002b0c4
   14208:	0002b664 	.word	0x0002b664

0001420c <ticker_update_conn_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   1420c:	b900      	cbnz	r0, 14210 <ticker_update_conn_op_cb+0x4>
   1420e:	4770      	bx	lr
{
   14210:	b510      	push	{r4, lr}
   14212:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   14214:	f7fe ff96 	bl	13144 <ull_update_mark_get>
   14218:	4284      	cmp	r4, r0
   1421a:	d010      	beq.n	1423e <ticker_update_conn_op_cb+0x32>
   1421c:	f7fe ff74 	bl	13108 <ull_disable_mark_get>
   14220:	4284      	cmp	r4, r0
   14222:	d00c      	beq.n	1423e <ticker_update_conn_op_cb+0x32>
   14224:	4a06      	ldr	r2, [pc, #24]	; (14240 <ticker_update_conn_op_cb+0x34>)
   14226:	4907      	ldr	r1, [pc, #28]	; (14244 <ticker_update_conn_op_cb+0x38>)
   14228:	4807      	ldr	r0, [pc, #28]	; (14248 <ticker_update_conn_op_cb+0x3c>)
   1422a:	f240 63fb 	movw	r3, #1787	; 0x6fb
   1422e:	f010 f9d9 	bl	245e4 <printk>
   14232:	4040      	eors	r0, r0
   14234:	f380 8811 	msr	BASEPRI, r0
   14238:	f04f 0003 	mov.w	r0, #3
   1423c:	df02      	svc	2
}
   1423e:	bd10      	pop	{r4, pc}
   14240:	0002b604 	.word	0x0002b604
   14244:	0002b67c 	.word	0x0002b67c
   14248:	0002b0c4 	.word	0x0002b0c4

0001424c <reject_ext_ind_send>:
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ) || defined(CONFIG_BT_CTLR_PHY)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
			       uint8_t reject_opcode, uint8_t error_code)
{
   1424c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14250:	4604      	mov	r4, r0
	if (conn->common.txn_lock) {
   14252:	f890 00d8 	ldrb.w	r0, [r0, #216]	; 0xd8
{
   14256:	460d      	mov	r5, r1
	if (conn->common.txn_lock) {
   14258:	0781      	lsls	r1, r0, #30
   1425a:	d433      	bmi.n	142c4 <reject_ext_ind_send+0x78>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1425c:	4836      	ldr	r0, [pc, #216]	; (14338 <reject_ext_ind_send+0xec>)
   1425e:	4690      	mov	r8, r2
   14260:	461f      	mov	r7, r3
   14262:	f7fa fd93 	bl	ed8c <mem_acquire>
	if (!tx) {
   14266:	2800      	cmp	r0, #0
   14268:	d047      	beq.n	142fa <reject_ext_ind_send+0xae>
	conn->common.txn_lock = 1U;
   1426a:	f894 10d8 	ldrb.w	r1, [r4, #216]	; 0xd8
	if (!tx) {
		return err;
	}

	pdu_ctrl_tx = (void *)tx->pdu;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1426e:	7906      	ldrb	r6, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   14270:	2303      	movs	r3, #3
	conn->common.txn_lock = 1U;
   14272:	f041 0102 	orr.w	r1, r1, #2
   14276:	f884 10d8 	strb.w	r1, [r4, #216]	; 0xd8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   1427a:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
   1427c:	f8d4 11c4 	ldr.w	r1, [r4, #452]	; 0x1c4
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   14280:	f880 8008 	strb.w	r8, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14284:	ea46 0203 	orr.w	r2, r6, r3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   14288:	2311      	movs	r3, #17
   1428a:	f8d4 61c8 	ldr.w	r6, [r4, #456]	; 0x1c8
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   1428e:	7247      	strb	r7, [r0, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14290:	7102      	strb	r2, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   14292:	71c3      	strb	r3, [r0, #7]
	if (
   14294:	b1d9      	cbz	r1, 142ce <reject_ext_ind_send+0x82>
	    !conn->llcp_enc.pause_tx &&
   14296:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
	    conn->tx_head &&
   1429a:	079a      	lsls	r2, r3, #30
   1429c:	d417      	bmi.n	142ce <reject_ext_ind_send+0x82>
	    !conn->llcp_phy.pause_tx &&
   1429e:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   142a2:	07db      	lsls	r3, r3, #31
   142a4:	d413      	bmi.n	142ce <reject_ext_ind_send+0x82>
		if (conn->tx_head == conn->tx_data) {
   142a6:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
   142aa:	4299      	cmp	r1, r3
   142ac:	d028      	beq.n	14300 <reject_ext_ind_send+0xb4>
		} else if (!conn->tx_ctrl) {
   142ae:	2e00      	cmp	r6, #0
   142b0:	d034      	beq.n	1431c <reject_ext_ind_send+0xd0>
   142b2:	f8d4 11cc 	ldr.w	r1, [r4, #460]	; 0x1cc
	tx->next = conn->tx_ctrl_last->next;
   142b6:	680b      	ldr	r3, [r1, #0]
   142b8:	6003      	str	r3, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   142ba:	6008      	str	r0, [r1, #0]
	if (!tx->next) {
   142bc:	6801      	ldr	r1, [r0, #0]
	conn->tx_ctrl_last = tx;
   142be:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   142c2:	b179      	cbz	r1, 142e4 <reject_ext_ind_send+0x98>

	ctrl_tx_enqueue(conn, tx);

	/* Mark for buffer for release */
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   142c4:	2301      	movs	r3, #1
   142c6:	712b      	strb	r3, [r5, #4]

	return 0;
   142c8:	2000      	movs	r0, #0
}
   142ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!conn->tx_ctrl) {
   142ce:	b166      	cbz	r6, 142ea <reject_ext_ind_send+0x9e>
	tx->next = conn->tx_ctrl_last->next;
   142d0:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   142d4:	681a      	ldr	r2, [r3, #0]
   142d6:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   142d8:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   142da:	6801      	ldr	r1, [r0, #0]
   142dc:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   142e0:	2900      	cmp	r1, #0
   142e2:	d1ef      	bne.n	142c4 <reject_ext_ind_send+0x78>
		conn->tx_data_last = tx;
   142e4:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   142e8:	e7ec      	b.n	142c4 <reject_ext_ind_send+0x78>
			tx->next = conn->tx_head;
   142ea:	6001      	str	r1, [r0, #0]
				conn->tx_ctrl = tx;
   142ec:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   142f0:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   142f4:	2900      	cmp	r1, #0
   142f6:	d1e5      	bne.n	142c4 <reject_ext_ind_send+0x78>
   142f8:	e7f4      	b.n	142e4 <reject_ext_ind_send+0x98>
		*err = -ENOBUFS;
   142fa:	f06f 0068 	mvn.w	r0, #104	; 0x68
   142fe:	e7e4      	b.n	142ca <reject_ext_ind_send+0x7e>
			conn->tx_data = conn->tx_data->next;
   14300:	680b      	ldr	r3, [r1, #0]
   14302:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   14306:	2e00      	cmp	r6, #0
   14308:	d1d3      	bne.n	142b2 <reject_ext_ind_send+0x66>
			tx->next = conn->tx_head->next;
   1430a:	680b      	ldr	r3, [r1, #0]
   1430c:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   1430e:	6008      	str	r0, [r1, #0]
				conn->tx_ctrl = tx;
   14310:	6801      	ldr	r1, [r0, #0]
				conn->tx_ctrl_last = tx;
   14312:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
	if (!tx->next) {
   14316:	2900      	cmp	r1, #0
   14318:	d1d4      	bne.n	142c4 <reject_ext_ind_send+0x78>
   1431a:	e7e3      	b.n	142e4 <reject_ext_ind_send+0x98>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1431c:	790b      	ldrb	r3, [r1, #4]
   1431e:	f003 0303 	and.w	r3, r3, #3
   14322:	2b03      	cmp	r3, #3
   14324:	d002      	beq.n	1432c <reject_ext_ind_send+0xe0>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   14326:	f8c4 11c8 	str.w	r1, [r4, #456]	; 0x1c8
   1432a:	e7c4      	b.n	142b6 <reject_ext_ind_send+0x6a>
	    ((pdu_data_tx->llctrl.opcode !=
   1432c:	79cb      	ldrb	r3, [r1, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1432e:	2b03      	cmp	r3, #3
   14330:	d0eb      	beq.n	1430a <reject_ext_ind_send+0xbe>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   14332:	2b0a      	cmp	r3, #10
   14334:	d1f7      	bne.n	14326 <reject_ext_ind_send+0xda>
   14336:	e7e8      	b.n	1430a <reject_ext_ind_send+0xbe>
   14338:	20001914 	.word	0x20001914

0001433c <start_enc_rsp_send>:
{
   1433c:	b570      	push	{r4, r5, r6, lr}
   1433e:	4604      	mov	r4, r0
	if (!pdu_ctrl_tx) {
   14340:	b179      	cbz	r1, 14362 <start_enc_rsp_send+0x26>
	conn->lll.enc_tx = 1;
   14342:	f890 207a 	ldrb.w	r2, [r0, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14346:	780b      	ldrb	r3, [r1, #0]
	conn->lll.enc_tx = 1;
   14348:	f042 0210 	orr.w	r2, r2, #16
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   1434c:	2601      	movs	r6, #1
	conn->lll.enc_tx = 1;
   1434e:	f880 207a 	strb.w	r2, [r0, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14352:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   14356:	2506      	movs	r5, #6
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   14358:	704e      	strb	r6, [r1, #1]
	return 0;
   1435a:	2000      	movs	r0, #0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1435c:	700b      	strb	r3, [r1, #0]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   1435e:	70cd      	strb	r5, [r1, #3]
}
   14360:	bd70      	pop	{r4, r5, r6, pc}
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   14362:	482c      	ldr	r0, [pc, #176]	; (14414 <start_enc_rsp_send+0xd8>)
   14364:	f7fa fd12 	bl	ed8c <mem_acquire>
		if (!tx) {
   14368:	2800      	cmp	r0, #0
   1436a:	d04f      	beq.n	1440c <start_enc_rsp_send+0xd0>
	conn->lll.enc_tx = 1;
   1436c:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14370:	7902      	ldrb	r2, [r0, #4]
	conn->lll.enc_tx = 1;
   14372:	f043 0310 	orr.w	r3, r3, #16
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   14376:	2101      	movs	r1, #1
	conn->lll.enc_tx = 1;
   14378:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   1437c:	7141      	strb	r1, [r0, #5]
   1437e:	e9d4 3571 	ldrd	r3, r5, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14382:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   14386:	2106      	movs	r1, #6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14388:	7102      	strb	r2, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   1438a:	71c1      	strb	r1, [r0, #7]
	if (
   1438c:	b1bb      	cbz	r3, 143be <start_enc_rsp_send+0x82>
	    !conn->llcp_enc.pause_tx &&
   1438e:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   14392:	0791      	lsls	r1, r2, #30
   14394:	d413      	bmi.n	143be <start_enc_rsp_send+0x82>
	    !conn->llcp_phy.pause_tx &&
   14396:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   1439a:	07d2      	lsls	r2, r2, #31
   1439c:	d40f      	bmi.n	143be <start_enc_rsp_send+0x82>
		if (conn->tx_head == conn->tx_data) {
   1439e:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   143a2:	4293      	cmp	r3, r2
   143a4:	d020      	beq.n	143e8 <start_enc_rsp_send+0xac>
		} else if (!conn->tx_ctrl) {
   143a6:	b1bd      	cbz	r5, 143d8 <start_enc_rsp_send+0x9c>
	tx->next = conn->tx_ctrl_last->next;
   143a8:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   143ac:	681a      	ldr	r2, [r3, #0]
   143ae:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   143b0:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   143b2:	6803      	ldr	r3, [r0, #0]
   143b4:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   143b8:	b153      	cbz	r3, 143d0 <start_enc_rsp_send+0x94>
	return 0;
   143ba:	2000      	movs	r0, #0
}
   143bc:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->tx_ctrl) {
   143be:	2d00      	cmp	r5, #0
   143c0:	d1f2      	bne.n	143a8 <start_enc_rsp_send+0x6c>
			tx->next = conn->tx_head;
   143c2:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   143c4:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   143c8:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   143cc:	2b00      	cmp	r3, #0
   143ce:	d1f4      	bne.n	143ba <start_enc_rsp_send+0x7e>
		conn->tx_data_last = tx;
   143d0:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
	return 0;
   143d4:	4618      	mov	r0, r3
}
   143d6:	bd70      	pop	{r4, r5, r6, pc}
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   143d8:	791a      	ldrb	r2, [r3, #4]
   143da:	f002 0203 	and.w	r2, r2, #3
   143de:	2a03      	cmp	r2, #3
   143e0:	d00e      	beq.n	14400 <start_enc_rsp_send+0xc4>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   143e2:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
   143e6:	e7e1      	b.n	143ac <start_enc_rsp_send+0x70>
			conn->tx_data = conn->tx_data->next;
   143e8:	681a      	ldr	r2, [r3, #0]
   143ea:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   143ee:	2d00      	cmp	r5, #0
   143f0:	d1da      	bne.n	143a8 <start_enc_rsp_send+0x6c>
			tx->next = conn->tx_head->next;
   143f2:	681a      	ldr	r2, [r3, #0]
   143f4:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   143f6:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   143f8:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   143fa:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   143fe:	e7db      	b.n	143b8 <start_enc_rsp_send+0x7c>
	    ((pdu_data_tx->llctrl.opcode !=
   14400:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   14402:	2a03      	cmp	r2, #3
   14404:	d0f5      	beq.n	143f2 <start_enc_rsp_send+0xb6>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   14406:	2a0a      	cmp	r2, #10
   14408:	d1eb      	bne.n	143e2 <start_enc_rsp_send+0xa6>
   1440a:	e7f2      	b.n	143f2 <start_enc_rsp_send+0xb6>
			return -ENOBUFS;
   1440c:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   14410:	bd70      	pop	{r4, r5, r6, pc}
   14412:	bf00      	nop
   14414:	20001914 	.word	0x20001914

00014418 <ctrl_tx_sec_enqueue>:
	if (conn->llcp_enc.pause_tx) {
   14418:	f890 3166 	ldrb.w	r3, [r0, #358]	; 0x166
   1441c:	f8d0 21c8 	ldr.w	r2, [r0, #456]	; 0x1c8
   14420:	079b      	lsls	r3, r3, #30
{
   14422:	b570      	push	{r4, r5, r6, lr}
   14424:	4604      	mov	r4, r0
   14426:	460d      	mov	r5, r1
	if (conn->llcp_enc.pause_tx) {
   14428:	d509      	bpl.n	1443e <ctrl_tx_sec_enqueue+0x26>
		if (!conn->tx_ctrl) {
   1442a:	2a00      	cmp	r2, #0
   1442c:	d044      	beq.n	144b8 <ctrl_tx_sec_enqueue+0xa0>
			tx->next = conn->tx_ctrl_last->next;
   1442e:	f8d0 31cc 	ldr.w	r3, [r0, #460]	; 0x1cc
   14432:	681a      	ldr	r2, [r3, #0]
   14434:	600a      	str	r2, [r1, #0]
			conn->tx_ctrl_last->next = tx;
   14436:	6019      	str	r1, [r3, #0]
		if (!tx->next) {
   14438:	682b      	ldr	r3, [r5, #0]
   1443a:	b36b      	cbz	r3, 14498 <ctrl_tx_sec_enqueue+0x80>
}
   1443c:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->tx_head) {
   1443e:	f8d0 11c4 	ldr.w	r1, [r0, #452]	; 0x1c4
   14442:	b319      	cbz	r1, 1448c <ctrl_tx_sec_enqueue+0x74>
			if ((conn->llcp_req != conn->llcp_ack) &&
   14444:	f890 31bf 	ldrb.w	r3, [r0, #447]	; 0x1bf
   14448:	f890 60e4 	ldrb.w	r6, [r0, #228]	; 0xe4
   1444c:	f890 00e5 	ldrb.w	r0, [r0, #229]	; 0xe5
   14450:	4286      	cmp	r6, r0
   14452:	f003 0301 	and.w	r3, r3, #1
   14456:	d003      	beq.n	14460 <ctrl_tx_sec_enqueue+0x48>
   14458:	f894 00e6 	ldrb.w	r0, [r4, #230]	; 0xe6
   1445c:	2803      	cmp	r0, #3
   1445e:	d033      	beq.n	144c8 <ctrl_tx_sec_enqueue+0xb0>
	    !conn->llcp_phy.pause_tx &&
   14460:	b9eb      	cbnz	r3, 1449e <ctrl_tx_sec_enqueue+0x86>
		if (conn->tx_head == conn->tx_data) {
   14462:	f8d4 01d0 	ldr.w	r0, [r4, #464]	; 0x1d0
   14466:	4281      	cmp	r1, r0
   14468:	d04b      	beq.n	14502 <ctrl_tx_sec_enqueue+0xea>
		} else if (!conn->tx_ctrl) {
   1446a:	2a00      	cmp	r2, #0
   1446c:	d03b      	beq.n	144e6 <ctrl_tx_sec_enqueue+0xce>
			LL_ASSERT(!pause);
   1446e:	b1c3      	cbz	r3, 144a2 <ctrl_tx_sec_enqueue+0x8a>
   14470:	f640 0359 	movw	r3, #2137	; 0x859
			LL_ASSERT(!pause);
   14474:	4a32      	ldr	r2, [pc, #200]	; (14540 <ctrl_tx_sec_enqueue+0x128>)
   14476:	4933      	ldr	r1, [pc, #204]	; (14544 <ctrl_tx_sec_enqueue+0x12c>)
   14478:	4833      	ldr	r0, [pc, #204]	; (14548 <ctrl_tx_sec_enqueue+0x130>)
   1447a:	f010 f8b3 	bl	245e4 <printk>
   1447e:	4040      	eors	r0, r0
   14480:	f380 8811 	msr	BASEPRI, r0
   14484:	f04f 0003 	mov.w	r0, #3
   14488:	df02      	svc	2
   1448a:	e00a      	b.n	144a2 <ctrl_tx_sec_enqueue+0x8a>
		if (!conn->tx_ctrl) {
   1448c:	b94a      	cbnz	r2, 144a2 <ctrl_tx_sec_enqueue+0x8a>
			tx->next = conn->tx_head;
   1448e:	602a      	str	r2, [r5, #0]
				conn->tx_ctrl = tx;
   14490:	e9c0 5571 	strd	r5, r5, [r0, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   14494:	f8c0 51cc 	str.w	r5, [r0, #460]	; 0x1cc
			conn->tx_data_last = tx;
   14498:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
}
   1449c:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->tx_ctrl) {
   1449e:	2a00      	cmp	r2, #0
   144a0:	d03f      	beq.n	14522 <ctrl_tx_sec_enqueue+0x10a>
	tx->next = conn->tx_ctrl_last->next;
   144a2:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   144a6:	681a      	ldr	r2, [r3, #0]
   144a8:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   144aa:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
   144ac:	682b      	ldr	r3, [r5, #0]
   144ae:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
		if (!tx->next) {
   144b2:	2b00      	cmp	r3, #0
   144b4:	d1c2      	bne.n	1443c <ctrl_tx_sec_enqueue+0x24>
   144b6:	e7ef      	b.n	14498 <ctrl_tx_sec_enqueue+0x80>
			tx->next = conn->tx_head;
   144b8:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
   144bc:	600b      	str	r3, [r1, #0]
			conn->tx_head = tx;
   144be:	f8c4 11c4 	str.w	r1, [r4, #452]	; 0x1c4
		if (!tx->next) {
   144c2:	2b00      	cmp	r3, #0
   144c4:	d1ba      	bne.n	1443c <ctrl_tx_sec_enqueue+0x24>
   144c6:	e7e7      	b.n	14498 <ctrl_tx_sec_enqueue+0x80>
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   144c8:	7908      	ldrb	r0, [r1, #4]
			    (conn->llcp_type == LLCP_ENCRYPTION) &&
   144ca:	f000 0003 	and.w	r0, r0, #3
   144ce:	2803      	cmp	r0, #3
   144d0:	d1c6      	bne.n	14460 <ctrl_tx_sec_enqueue+0x48>
			    ((pdu_data_tx->llctrl.opcode ==
   144d2:	79c8      	ldrb	r0, [r1, #7]
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   144d4:	2803      	cmp	r0, #3
   144d6:	d001      	beq.n	144dc <ctrl_tx_sec_enqueue+0xc4>
			      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   144d8:	280a      	cmp	r0, #10
   144da:	d1c1      	bne.n	14460 <ctrl_tx_sec_enqueue+0x48>
	    !conn->llcp_phy.pause_tx &&
   144dc:	b33b      	cbz	r3, 1452e <ctrl_tx_sec_enqueue+0x116>
		if (!conn->tx_ctrl) {
   144de:	b162      	cbz	r2, 144fa <ctrl_tx_sec_enqueue+0xe2>
			LL_ASSERT(!pause);
   144e0:	f640 036b 	movw	r3, #2155	; 0x86b
   144e4:	e7c6      	b.n	14474 <ctrl_tx_sec_enqueue+0x5c>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   144e6:	790a      	ldrb	r2, [r1, #4]
   144e8:	f002 0203 	and.w	r2, r2, #3
   144ec:	2a03      	cmp	r2, #3
   144ee:	d020      	beq.n	14532 <ctrl_tx_sec_enqueue+0x11a>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   144f0:	e9c4 1172 	strd	r1, r1, [r4, #456]	; 0x1c8
			LL_ASSERT(!pause);
   144f4:	2b00      	cmp	r3, #0
   144f6:	d0d4      	beq.n	144a2 <ctrl_tx_sec_enqueue+0x8a>
   144f8:	e7ba      	b.n	14470 <ctrl_tx_sec_enqueue+0x58>
			tx->next = conn->tx_head;
   144fa:	6029      	str	r1, [r5, #0]
			conn->tx_head = tx;
   144fc:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
}
   14500:	bd70      	pop	{r4, r5, r6, pc}
			conn->tx_data = conn->tx_data->next;
   14502:	6808      	ldr	r0, [r1, #0]
   14504:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   14508:	2a00      	cmp	r2, #0
   1450a:	d1b0      	bne.n	1446e <ctrl_tx_sec_enqueue+0x56>
			tx->next = conn->tx_head->next;
   1450c:	680a      	ldr	r2, [r1, #0]
   1450e:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
   14510:	600d      	str	r5, [r1, #0]
			if (!pause) {
   14512:	2b00      	cmp	r3, #0
   14514:	d190      	bne.n	14438 <ctrl_tx_sec_enqueue+0x20>
				conn->tx_ctrl = tx;
   14516:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
   14518:	e9c4 5572 	strd	r5, r5, [r4, #456]	; 0x1c8
		if (!tx->next) {
   1451c:	2b00      	cmp	r3, #0
   1451e:	d18d      	bne.n	1443c <ctrl_tx_sec_enqueue+0x24>
   14520:	e7ba      	b.n	14498 <ctrl_tx_sec_enqueue+0x80>
			tx->next = conn->tx_head;
   14522:	6029      	str	r1, [r5, #0]
				conn->tx_ctrl = tx;
   14524:	e9c4 5571 	strd	r5, r5, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   14528:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
}
   1452c:	bd70      	pop	{r4, r5, r6, pc}
				pause = true;
   1452e:	2301      	movs	r3, #1
   14530:	e797      	b.n	14462 <ctrl_tx_sec_enqueue+0x4a>
	    ((pdu_data_tx->llctrl.opcode !=
   14532:	79ca      	ldrb	r2, [r1, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   14534:	2a03      	cmp	r2, #3
   14536:	d0e9      	beq.n	1450c <ctrl_tx_sec_enqueue+0xf4>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   14538:	2a0a      	cmp	r2, #10
   1453a:	d1d9      	bne.n	144f0 <ctrl_tx_sec_enqueue+0xd8>
   1453c:	e7e6      	b.n	1450c <ctrl_tx_sec_enqueue+0xf4>
   1453e:	bf00      	nop
   14540:	0002b604 	.word	0x0002b604
   14544:	0002b644 	.word	0x0002b644
   14548:	0002b0c4 	.word	0x0002b0c4

0001454c <event_phy_upd_ind_prep>:
{
   1454c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (conn->llcp.phy_upd_ind.initiate) {
   14550:	f890 30e8 	ldrb.w	r3, [r0, #232]	; 0xe8
   14554:	f013 0201 	ands.w	r2, r3, #1
{
   14558:	4604      	mov	r4, r0
   1455a:	460d      	mov	r5, r1
	if (conn->llcp.phy_upd_ind.initiate) {
   1455c:	f040 8090 	bne.w	14680 <event_phy_upd_ind_prep+0x134>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) &
   14560:	f8b0 10ea 	ldrh.w	r1, [r0, #234]	; 0xea
   14564:	1a69      	subs	r1, r5, r1
   14566:	0409      	lsls	r1, r1, #16
   14568:	f100 80d6 	bmi.w	14718 <event_phy_upd_ind_prep+0x1cc>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   1456c:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
   14570:	2900      	cmp	r1, #0
   14572:	469c      	mov	ip, r3
   14574:	f2c0 80fb 	blt.w	1476e <event_phy_upd_ind_prep+0x222>
			conn->llcp_ack = conn->llcp_req;
   14578:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   1457c:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
		old_tx = lll->phy_tx;
   14580:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
		old_rx = lll->phy_rx;
   14584:	f894 8061 	ldrb.w	r8, [r4, #97]	; 0x61
		uint16_t eff_rx_time = lll->max_rx_time;
   14588:	f8b4 705e 	ldrh.w	r7, [r4, #94]	; 0x5e
		if (conn->llcp.phy_upd_ind.tx) {
   1458c:	f013 0f1c 	tst.w	r3, #28
		old_tx = lll->phy_tx;
   14590:	f002 0907 	and.w	r9, r2, #7
		old_rx = lll->phy_rx;
   14594:	f008 0807 	and.w	r8, r8, #7
		if (conn->llcp.phy_upd_ind.tx) {
   14598:	f040 80c0 	bne.w	1471c <event_phy_upd_ind_prep+0x1d0>
		uint16_t eff_tx_time = lll->max_tx_time;
   1459c:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c
		if (conn->llcp.phy_upd_ind.rx) {
   145a0:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   145a4:	d008      	beq.n	145b8 <event_phy_upd_ind_prep+0x6c>
			lll->phy_rx = conn->llcp.phy_upd_ind.rx;
   145a6:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
   145aa:	095b      	lsrs	r3, r3, #5
   145ac:	f363 0202 	bfi	r2, r3, #0, #3
   145b0:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
				calc_eff_time(lll->max_rx_octets, lll->phy_rx,
   145b4:	f44f 77a4 	mov.w	r7, #328	; 0x148
		rx = conn->llcp_rx;
   145b8:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
		LL_ASSERT(rx && rx->hdr.link);
   145bc:	2d00      	cmp	r5, #0
   145be:	f000 80b6 	beq.w	1472e <event_phy_upd_ind_prep+0x1e2>
   145c2:	6828      	ldr	r0, [r5, #0]
   145c4:	2800      	cmp	r0, #0
   145c6:	f000 80b2 	beq.w	1472e <event_phy_upd_ind_prep+0x1e2>
		conn->llcp_rx = rx->hdr.link->mem;
   145ca:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   145ce:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
   145d2:	6841      	ldr	r1, [r0, #4]
   145d4:	f8c4 1108 	str.w	r1, [r4, #264]	; 0x108
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   145d8:	f01c 0f02 	tst.w	ip, #2
   145dc:	f3c3 0102 	ubfx	r1, r3, #0, #3
   145e0:	f3c2 0e02 	ubfx	lr, r2, #0, #3
   145e4:	f003 0307 	and.w	r3, r3, #7
   145e8:	f002 0207 	and.w	r2, r2, #7
   145ec:	d102      	bne.n	145f4 <event_phy_upd_ind_prep+0xa8>
   145ee:	4599      	cmp	r9, r3
   145f0:	f000 80c5 	beq.w	1477e <event_phy_upd_ind_prep+0x232>
		rx->hdr.handle = lll->handle;
   145f4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   145f6:	80eb      	strh	r3, [r5, #6]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   145f8:	221a      	movs	r2, #26
		upd->status = 0U;
   145fa:	2300      	movs	r3, #0
		upd->tx = lll->phy_tx;
   145fc:	7769      	strb	r1, [r5, #29]
		upd->rx = lll->phy_rx;
   145fe:	f885 e01e 	strb.w	lr, [r5, #30]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   14602:	712a      	strb	r2, [r5, #4]
		upd->status = 0U;
   14604:	772b      	strb	r3, [r5, #28]
		ll_rx_put(rx->hdr.link, rx);
   14606:	4629      	mov	r1, r5
   14608:	f7fe fca8 	bl	12f5c <ll_rx_put>
		rx = conn->llcp_rx;
   1460c:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
		LL_ASSERT(rx && rx->hdr.link);
   14610:	2d00      	cmp	r5, #0
   14612:	f000 809d 	beq.w	14750 <event_phy_upd_ind_prep+0x204>
   14616:	6828      	ldr	r0, [r5, #0]
   14618:	2800      	cmp	r0, #0
   1461a:	f000 8099 	beq.w	14750 <event_phy_upd_ind_prep+0x204>
		if ((eff_tx_time <= lll->max_tx_time) &&
   1461e:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
		conn->llcp_rx = rx->hdr.link->mem;
   14622:	6842      	ldr	r2, [r0, #4]
   14624:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
		if ((eff_tx_time <= lll->max_tx_time) &&
   14628:	42b3      	cmp	r3, r6
   1462a:	d30a      	bcc.n	14642 <event_phy_upd_ind_prep+0xf6>
   1462c:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   14630:	d807      	bhi.n	14642 <event_phy_upd_ind_prep+0xf6>
		    (eff_rx_time <= lll->max_rx_time) &&
   14632:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
		    (lll->max_tx_time <= max_tx_time) &&
   14636:	42bb      	cmp	r3, r7
   14638:	d303      	bcc.n	14642 <event_phy_upd_ind_prep+0xf6>
		    (eff_rx_time <= lll->max_rx_time) &&
   1463a:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   1463e:	f240 80b0 	bls.w	147a2 <event_phy_upd_ind_prep+0x256>
		lll->max_tx_time = eff_tx_time;
   14642:	f8a4 605c 	strh.w	r6, [r4, #92]	; 0x5c
		lll->max_rx_time = eff_rx_time;
   14646:	f8a4 705e 	strh.w	r7, [r4, #94]	; 0x5e
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   1464a:	7f2b      	ldrb	r3, [r5, #28]
		rx->hdr.handle = lll->handle;
   1464c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   1464e:	80ea      	strh	r2, [r5, #6]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   14650:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   14654:	2103      	movs	r1, #3
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   14656:	2209      	movs	r2, #9
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   14658:	7129      	strb	r1, [r5, #4]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   1465a:	772b      	strb	r3, [r5, #28]
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   1465c:	776a      	strb	r2, [r5, #29]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   1465e:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
   14662:	f8b4 2058 	ldrh.w	r2, [r4, #88]	; 0x58
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   14666:	842b      	strh	r3, [r5, #32]
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   14668:	2315      	movs	r3, #21
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
   1466a:	84aa      	strh	r2, [r5, #36]	; 0x24
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   1466c:	846f      	strh	r7, [r5, #34]	; 0x22
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);
   1466e:	84ee      	strh	r6, [r5, #38]	; 0x26
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   14670:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
   14672:	4629      	mov	r1, r5
   14674:	f7fe fc72 	bl	12f5c <ll_rx_put>
}
   14678:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		ll_rx_sched();
   1467c:	f7fe bc78 	b.w	12f70 <ll_rx_sched>
		rx = ll_pdu_rx_alloc_peek(2);
   14680:	2002      	movs	r0, #2
   14682:	f7fe fc89 	bl	12f98 <ll_pdu_rx_alloc_peek>
		if (!rx) {
   14686:	4607      	mov	r7, r0
   14688:	2800      	cmp	r0, #0
   1468a:	d045      	beq.n	14718 <event_phy_upd_ind_prep+0x1cc>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1468c:	4883      	ldr	r0, [pc, #524]	; (1489c <event_phy_upd_ind_prep+0x350>)
   1468e:	f7fa fb7d 	bl	ed8c <mem_acquire>
		if (!tx) {
   14692:	4606      	mov	r6, r0
   14694:	2800      	cmp	r0, #0
   14696:	d03f      	beq.n	14718 <event_phy_upd_ind_prep+0x1cc>
		conn->llcp.phy_upd_ind.initiate = 0U;
   14698:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   1469c:	f36f 0300 	bfc	r3, #0, #1
		if (!((conn->llcp.phy_upd_ind.tx |
   146a0:	f3c3 0882 	ubfx	r8, r3, #2, #3
		       conn->llcp.phy_upd_ind.rx) & 0x07)) {
   146a4:	f3c3 1242 	ubfx	r2, r3, #5, #3
		if (!((conn->llcp.phy_upd_ind.tx |
   146a8:	ea58 0802 	orrs.w	r8, r8, r2
		conn->llcp.phy_upd_ind.initiate = 0U;
   146ac:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
		if (!((conn->llcp.phy_upd_ind.tx |
   146b0:	b2db      	uxtb	r3, r3
   146b2:	d17f      	bne.n	147b4 <event_phy_upd_ind_prep+0x268>
			conn->llcp_ack = conn->llcp_req;
   146b4:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
			conn->llcp.phy_upd_ind.instant = 0U;
   146b8:	f8a4 80ea 	strh.w	r8, [r4, #234]	; 0xea
			if (conn->llcp.phy_upd_ind.cmd) {
   146bc:	079b      	lsls	r3, r3, #30
			conn->llcp_ack = conn->llcp_req;
   146be:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			if (conn->llcp.phy_upd_ind.cmd) {
   146c2:	f100 80a8 	bmi.w	14816 <event_phy_upd_ind_prep+0x2ca>
   146c6:	4643      	mov	r3, r8
   146c8:	4641      	mov	r1, r8
		pdu_ctrl_tx->len =
   146ca:	2205      	movs	r2, #5
   146cc:	7172      	strb	r2, [r6, #5]
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   146ce:	f886 8008 	strb.w	r8, [r6, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   146d2:	7932      	ldrb	r2, [r6, #4]
		ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
   146d4:	7273      	strb	r3, [r6, #9]
	    conn->tx_head &&
   146d6:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   146da:	8171      	strh	r1, [r6, #10]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   146dc:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode =
   146e0:	2118      	movs	r1, #24
   146e2:	f8d4 01c8 	ldr.w	r0, [r4, #456]	; 0x1c8
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   146e6:	7132      	strb	r2, [r6, #4]
		pdu_ctrl_tx->llctrl.opcode =
   146e8:	71f1      	strb	r1, [r6, #7]
	if (
   146ea:	b13b      	cbz	r3, 146fc <event_phy_upd_ind_prep+0x1b0>
	    !conn->llcp_enc.pause_tx &&
   146ec:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   146f0:	0797      	lsls	r7, r2, #30
   146f2:	d403      	bmi.n	146fc <event_phy_upd_ind_prep+0x1b0>
	    !conn->llcp_phy.pause_tx &&
   146f4:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   146f8:	07d5      	lsls	r5, r2, #31
   146fa:	d578      	bpl.n	147ee <event_phy_upd_ind_prep+0x2a2>
		if (!conn->tx_ctrl) {
   146fc:	2800      	cmp	r0, #0
   146fe:	f000 8084 	beq.w	1480a <event_phy_upd_ind_prep+0x2be>
	tx->next = conn->tx_ctrl_last->next;
   14702:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   14706:	681a      	ldr	r2, [r3, #0]
   14708:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
   1470a:	601e      	str	r6, [r3, #0]
	conn->tx_ctrl_last = tx;
   1470c:	6833      	ldr	r3, [r6, #0]
   1470e:	f8c4 61cc 	str.w	r6, [r4, #460]	; 0x1cc
	if (!tx->next) {
   14712:	b90b      	cbnz	r3, 14718 <event_phy_upd_ind_prep+0x1cc>
		conn->tx_data_last = tx;
   14714:	f8c4 61d4 	str.w	r6, [r4, #468]	; 0x1d4
}
   14718:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			lll->phy_tx = conn->llcp.phy_upd_ind.tx;
   1471c:	f3c3 0182 	ubfx	r1, r3, #2, #3
   14720:	f361 0202 	bfi	r2, r1, #0, #3
   14724:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
			eff_tx_time = calc_eff_time(lll->max_tx_octets,
   14728:	f44f 76a4 	mov.w	r6, #328	; 0x148
   1472c:	e738      	b.n	145a0 <event_phy_upd_ind_prep+0x54>
		LL_ASSERT(rx && rx->hdr.link);
   1472e:	4a5c      	ldr	r2, [pc, #368]	; (148a0 <event_phy_upd_ind_prep+0x354>)
   14730:	495c      	ldr	r1, [pc, #368]	; (148a4 <event_phy_upd_ind_prep+0x358>)
   14732:	485d      	ldr	r0, [pc, #372]	; (148a8 <event_phy_upd_ind_prep+0x35c>)
   14734:	f640 7396 	movw	r3, #3990	; 0xf96
   14738:	f00f ff54 	bl	245e4 <printk>
   1473c:	4040      	eors	r0, r0
   1473e:	f380 8811 	msr	BASEPRI, r0
   14742:	f04f 0003 	mov.w	r0, #3
   14746:	df02      	svc	2
   14748:	6828      	ldr	r0, [r5, #0]
   1474a:	f894 c0e8 	ldrb.w	ip, [r4, #232]	; 0xe8
   1474e:	e73c      	b.n	145ca <event_phy_upd_ind_prep+0x7e>
		LL_ASSERT(rx && rx->hdr.link);
   14750:	4a53      	ldr	r2, [pc, #332]	; (148a0 <event_phy_upd_ind_prep+0x354>)
   14752:	4954      	ldr	r1, [pc, #336]	; (148a4 <event_phy_upd_ind_prep+0x358>)
   14754:	4854      	ldr	r0, [pc, #336]	; (148a8 <event_phy_upd_ind_prep+0x35c>)
   14756:	f640 73c2 	movw	r3, #4034	; 0xfc2
   1475a:	f00f ff43 	bl	245e4 <printk>
   1475e:	4040      	eors	r0, r0
   14760:	f380 8811 	msr	BASEPRI, r0
   14764:	f04f 0003 	mov.w	r0, #3
   14768:	df02      	svc	2
   1476a:	6828      	ldr	r0, [r5, #0]
   1476c:	e757      	b.n	1461e <event_phy_upd_ind_prep+0xd2>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   1476e:	f890 10d9 	ldrb.w	r1, [r0, #217]	; 0xd9
   14772:	2900      	cmp	r1, #0
   14774:	f43f af00 	beq.w	14578 <event_phy_upd_ind_prep+0x2c>
			conn->slave.llcp_type = LLCP_NONE;
   14778:	f880 20d9 	strb.w	r2, [r0, #217]	; 0xd9
   1477c:	e700      	b.n	14580 <event_phy_upd_ind_prep+0x34>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   1477e:	4590      	cmp	r8, r2
   14780:	f47f af38 	bne.w	145f4 <event_phy_upd_ind_prep+0xa8>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   14784:	2301      	movs	r3, #1
   14786:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
   14788:	4629      	mov	r1, r5
   1478a:	f7fe fbe7 	bl	12f5c <ll_rx_put>
				rx = conn->llcp_rx;
   1478e:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
				LL_ASSERT(rx && rx->hdr.link);
   14792:	2d00      	cmp	r5, #0
   14794:	d06c      	beq.n	14870 <event_phy_upd_ind_prep+0x324>
   14796:	6828      	ldr	r0, [r5, #0]
   14798:	2800      	cmp	r0, #0
   1479a:	d069      	beq.n	14870 <event_phy_upd_ind_prep+0x324>
				conn->llcp_rx = rx->hdr.link->mem;
   1479c:	6843      	ldr	r3, [r0, #4]
   1479e:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   147a2:	2301      	movs	r3, #1
   147a4:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
   147a6:	4629      	mov	r1, r5
   147a8:	f7fe fbd8 	bl	12f5c <ll_rx_put>
}
   147ac:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			ll_rx_sched();
   147b0:	f7fe bbde 	b.w	12f70 <ll_rx_sched>
			conn->llcp.phy_upd_ind.instant = event_counter +
   147b4:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
   147b6:	4429      	add	r1, r5
							 lll->latency +
   147b8:	3106      	adds	r1, #6
			conn->llcp.phy_upd_ind.instant = event_counter +
   147ba:	f8a4 10ea 	strh.w	r1, [r4, #234]	; 0xea
			(void)ll_pdu_rx_alloc();
   147be:	f7fe fc09 	bl	12fd4 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
   147c2:	683b      	ldr	r3, [r7, #0]
   147c4:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   147c8:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
   147ca:	f8c4 7108 	str.w	r7, [r4, #264]	; 0x108
			rx = ll_pdu_rx_alloc();
   147ce:	f7fe fc01 	bl	12fd4 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
   147d2:	6803      	ldr	r3, [r0, #0]
   147d4:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   147d8:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
   147da:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   147de:	f8b4 10ea 	ldrh.w	r1, [r4, #234]	; 0xea
   147e2:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
   147e6:	f3c3 0882 	ubfx	r8, r3, #2, #3
   147ea:	095b      	lsrs	r3, r3, #5
   147ec:	e76d      	b.n	146ca <event_phy_upd_ind_prep+0x17e>
		if (conn->tx_head == conn->tx_data) {
   147ee:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   147f2:	4293      	cmp	r3, r2
   147f4:	d02f      	beq.n	14856 <event_phy_upd_ind_prep+0x30a>
		} else if (!conn->tx_ctrl) {
   147f6:	2800      	cmp	r0, #0
   147f8:	d183      	bne.n	14702 <event_phy_upd_ind_prep+0x1b6>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   147fa:	791a      	ldrb	r2, [r3, #4]
   147fc:	f002 0203 	and.w	r2, r2, #3
   14800:	2a03      	cmp	r2, #3
   14802:	d044      	beq.n	1488e <event_phy_upd_ind_prep+0x342>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   14804:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
   14808:	e77d      	b.n	14706 <event_phy_upd_ind_prep+0x1ba>
			tx->next = conn->tx_head;
   1480a:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
   1480c:	e9c4 6671 	strd	r6, r6, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   14810:	f8c4 61cc 	str.w	r6, [r4, #460]	; 0x1cc
   14814:	e77d      	b.n	14712 <event_phy_upd_ind_prep+0x1c6>
				(void)ll_pdu_rx_alloc();
   14816:	f7fe fbdd 	bl	12fd4 <ll_pdu_rx_alloc>
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1481a:	231a      	movs	r3, #26
				rx->hdr.handle = lll->handle;
   1481c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
				upd->status = 0U;
   1481e:	f887 801c 	strb.w	r8, [r7, #28]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   14822:	713b      	strb	r3, [r7, #4]
				upd->tx = lll->phy_tx;
   14824:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
				ll_rx_put(rx->hdr.link, rx);
   14828:	6838      	ldr	r0, [r7, #0]
				rx->hdr.handle = lll->handle;
   1482a:	80fa      	strh	r2, [r7, #6]
				upd->tx = lll->phy_tx;
   1482c:	f3c3 0302 	ubfx	r3, r3, #0, #3
   14830:	777b      	strb	r3, [r7, #29]
				upd->rx = lll->phy_rx;
   14832:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   14836:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1483a:	77bb      	strb	r3, [r7, #30]
				ll_rx_put(rx->hdr.link, rx);
   1483c:	4639      	mov	r1, r7
   1483e:	f7fe fb8d 	bl	12f5c <ll_rx_put>
				ll_rx_sched();
   14842:	f7fe fb95 	bl	12f70 <ll_rx_sched>
   14846:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   1484a:	f8b4 10ea 	ldrh.w	r1, [r4, #234]	; 0xea
   1484e:	f3c3 0882 	ubfx	r8, r3, #2, #3
   14852:	095b      	lsrs	r3, r3, #5
   14854:	e739      	b.n	146ca <event_phy_upd_ind_prep+0x17e>
			conn->tx_data = conn->tx_data->next;
   14856:	681a      	ldr	r2, [r3, #0]
   14858:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1485c:	2800      	cmp	r0, #0
   1485e:	f47f af50 	bne.w	14702 <event_phy_upd_ind_prep+0x1b6>
			tx->next = conn->tx_head->next;
   14862:	681a      	ldr	r2, [r3, #0]
   14864:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
   14866:	601e      	str	r6, [r3, #0]
				conn->tx_ctrl = tx;
   14868:	6833      	ldr	r3, [r6, #0]
				conn->tx_ctrl_last = tx;
   1486a:	e9c4 6672 	strd	r6, r6, [r4, #456]	; 0x1c8
   1486e:	e750      	b.n	14712 <event_phy_upd_ind_prep+0x1c6>
				LL_ASSERT(rx && rx->hdr.link);
   14870:	4a0b      	ldr	r2, [pc, #44]	; (148a0 <event_phy_upd_ind_prep+0x354>)
   14872:	490c      	ldr	r1, [pc, #48]	; (148a4 <event_phy_upd_ind_prep+0x358>)
   14874:	480c      	ldr	r0, [pc, #48]	; (148a8 <event_phy_upd_ind_prep+0x35c>)
   14876:	f640 73a5 	movw	r3, #4005	; 0xfa5
   1487a:	f00f feb3 	bl	245e4 <printk>
   1487e:	4040      	eors	r0, r0
   14880:	f380 8811 	msr	BASEPRI, r0
   14884:	f04f 0003 	mov.w	r0, #3
   14888:	df02      	svc	2
   1488a:	6828      	ldr	r0, [r5, #0]
   1488c:	e786      	b.n	1479c <event_phy_upd_ind_prep+0x250>
	    ((pdu_data_tx->llctrl.opcode !=
   1488e:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   14890:	2a03      	cmp	r2, #3
   14892:	d0e6      	beq.n	14862 <event_phy_upd_ind_prep+0x316>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   14894:	2a0a      	cmp	r2, #10
   14896:	d1b5      	bne.n	14804 <event_phy_upd_ind_prep+0x2b8>
   14898:	e7e3      	b.n	14862 <event_phy_upd_ind_prep+0x316>
   1489a:	bf00      	nop
   1489c:	20001914 	.word	0x20001914
   148a0:	0002b604 	.word	0x0002b604
   148a4:	0002b6d0 	.word	0x0002b6d0
   148a8:	0002b0c4 	.word	0x0002b0c4

000148ac <ll_conn_acquire>:
	return mem_acquire(&conn_free);
   148ac:	4801      	ldr	r0, [pc, #4]	; (148b4 <ll_conn_acquire+0x8>)
   148ae:	f7fa ba6d 	b.w	ed8c <mem_acquire>
   148b2:	bf00      	nop
   148b4:	2000188c 	.word	0x2000188c

000148b8 <ll_conn_release>:
	mem_release(conn, &conn_free);
   148b8:	4901      	ldr	r1, [pc, #4]	; (148c0 <ll_conn_release+0x8>)
   148ba:	f7fa ba7d 	b.w	edb8 <mem_release>
   148be:	bf00      	nop
   148c0:	2000188c 	.word	0x2000188c

000148c4 <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   148c4:	4902      	ldr	r1, [pc, #8]	; (148d0 <ll_conn_handle_get+0xc>)
   148c6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   148ca:	f7fa ba93 	b.w	edf4 <mem_index_get>
   148ce:	bf00      	nop
   148d0:	20000768 	.word	0x20000768

000148d4 <ll_conn_get>:
{
   148d4:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   148d6:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   148da:	4801      	ldr	r0, [pc, #4]	; (148e0 <ll_conn_get+0xc>)
   148dc:	f7fa ba86 	b.w	edec <mem_get>
   148e0:	20000768 	.word	0x20000768

000148e4 <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   148e4:	b958      	cbnz	r0, 148fe <ll_connected_get+0x1a>
{
   148e6:	b508      	push	{r3, lr}
   148e8:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   148ea:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   148ee:	4805      	ldr	r0, [pc, #20]	; (14904 <ll_connected_get+0x20>)
   148f0:	f7fa fa7c 	bl	edec <mem_get>
	if (conn->lll.handle != handle) {
   148f4:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   148f6:	b903      	cbnz	r3, 148fa <ll_connected_get+0x16>
}
   148f8:	bd08      	pop	{r3, pc}
		return NULL;
   148fa:	2000      	movs	r0, #0
}
   148fc:	bd08      	pop	{r3, pc}
		return NULL;
   148fe:	2000      	movs	r0, #0
}
   14900:	4770      	bx	lr
   14902:	bf00      	nop
   14904:	20000768 	.word	0x20000768

00014908 <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
   14908:	4801      	ldr	r0, [pc, #4]	; (14910 <ll_tx_mem_acquire+0x8>)
   1490a:	f7fa ba3f 	b.w	ed8c <mem_acquire>
   1490e:	bf00      	nop
   14910:	200018a4 	.word	0x200018a4

00014914 <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
   14914:	4901      	ldr	r1, [pc, #4]	; (1491c <ll_tx_mem_release+0x8>)
   14916:	f7fa ba4f 	b.w	edb8 <mem_release>
   1491a:	bf00      	nop
   1491c:	200018a4 	.word	0x200018a4

00014920 <ll_tx_mem_enqueue>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   14920:	2800      	cmp	r0, #0
   14922:	d13d      	bne.n	149a0 <ll_tx_mem_enqueue+0x80>
{
   14924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14926:	4602      	mov	r2, r0
   14928:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1492a:	481f      	ldr	r0, [pc, #124]	; (149a8 <ll_tx_mem_enqueue+0x88>)
   1492c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   14930:	f7fa fa5c 	bl	edec <mem_get>
	if (conn->lll.handle != handle) {
   14934:	8d02      	ldrh	r2, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   14936:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   14938:	b9e2      	cbnz	r2, 14974 <ll_tx_mem_enqueue+0x54>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
   1493a:	491c      	ldr	r1, [pc, #112]	; (149ac <ll_tx_mem_enqueue+0x8c>)
   1493c:	78cf      	ldrb	r7, [r1, #3]
	if (last == count) {
   1493e:	784e      	ldrb	r6, [r1, #1]
   14940:	7888      	ldrb	r0, [r1, #2]
	last = last + 1;
   14942:	1c7b      	adds	r3, r7, #1
   14944:	b2db      	uxtb	r3, r3
		last = 0U;
   14946:	429e      	cmp	r6, r3
   14948:	bf08      	it	eq
   1494a:	2300      	moveq	r3, #0
	if (last == first) {
   1494c:	4298      	cmp	r0, r3
   1494e:	d014      	beq.n	1497a <ll_tx_mem_enqueue+0x5a>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   14950:	460e      	mov	r6, r1
   14952:	f816 0b04 	ldrb.w	r0, [r6], #4
   14956:	fb10 f007 	smulbb	r0, r0, r7
	if (!lll_tx) {
   1495a:	1837      	adds	r7, r6, r0
   1495c:	d00d      	beq.n	1497a <ll_tx_mem_enqueue+0x5a>
	lll_tx->handle = handle;
   1495e:	5232      	strh	r2, [r6, r0]
	lll_tx->node = tx;
   14960:	607d      	str	r5, [r7, #4]
   14962:	7c20      	ldrb	r0, [r4, #16]
	*last = idx; /* Commit: Update write index */
   14964:	70cb      	strb	r3, [r1, #3]
	if (ull_ref_get(&conn->ull)) {
   14966:	b958      	cbnz	r0, 14980 <ll_tx_mem_enqueue+0x60>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   14968:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1496c:	2b00      	cmp	r3, #0
   1496e:	db11      	blt.n	14994 <ll_tx_mem_enqueue+0x74>
	return 0;
   14970:	2000      	movs	r0, #0
}
   14972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   14974:	f06f 0015 	mvn.w	r0, #21
}
   14978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   1497a:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   1497e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		mfy.param = conn;
   14980:	4b0b      	ldr	r3, [pc, #44]	; (149b0 <ll_tx_mem_enqueue+0x90>)
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   14982:	2101      	movs	r1, #1
   14984:	2003      	movs	r0, #3
		mfy.param = conn;
   14986:	609c      	str	r4, [r3, #8]
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   14988:	f7fa fad6 	bl	ef38 <mayfly_enqueue>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1498c:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   14990:	2b00      	cmp	r3, #0
   14992:	daed      	bge.n	14970 <ll_tx_mem_enqueue+0x50>
		ull_slave_latency_cancel(conn, handle);
   14994:	4620      	mov	r0, r4
   14996:	2100      	movs	r1, #0
   14998:	f004 f86e 	bl	18a78 <ull_slave_latency_cancel>
	return 0;
   1499c:	2000      	movs	r0, #0
}
   1499e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   149a0:	f06f 0015 	mvn.w	r0, #21
}
   149a4:	4770      	bx	lr
   149a6:	bf00      	nop
   149a8:	20000768 	.word	0x20000768
   149ac:	20007ac0 	.word	0x20007ac0
   149b0:	20007ae4 	.word	0x20007ae4

000149b4 <ll_conn_update>:
{
   149b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   149b8:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   149bc:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
   149c0:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	if (handle >= CONFIG_BT_MAX_CONN) {
   149c4:	2800      	cmp	r0, #0
   149c6:	d155      	bne.n	14a74 <ll_conn_update+0xc0>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   149c8:	460c      	mov	r4, r1
   149ca:	4616      	mov	r6, r2
   149cc:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   149d0:	4602      	mov	r2, r0
   149d2:	4842      	ldr	r0, [pc, #264]	; (14adc <ll_conn_update+0x128>)
   149d4:	461d      	mov	r5, r3
   149d6:	f7fa fa09 	bl	edec <mem_get>
	if (conn->lll.handle != handle) {
   149da:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   149dc:	2b00      	cmp	r3, #0
   149de:	d149      	bne.n	14a74 <ll_conn_update+0xc0>
	if (!cmd) {
   149e0:	b1e4      	cbz	r4, 14a1c <ll_conn_update+0x68>
		cmd--;
   149e2:	3c01      	subs	r4, #1
		if (cmd) {
   149e4:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   149e8:	f890 2184 	ldrb.w	r2, [r0, #388]	; 0x184
   149ec:	f890 1185 	ldrb.w	r1, [r0, #389]	; 0x185
   149f0:	d052      	beq.n	14a98 <ll_conn_update+0xe4>
			if ((conn->llcp_conn_param.req ==
   149f2:	428a      	cmp	r2, r1
   149f4:	d03b      	beq.n	14a6e <ll_conn_update+0xba>
			    (conn->llcp_conn_param.state !=
   149f6:	f890 2186 	ldrb.w	r2, [r0, #390]	; 0x186
			     conn->llcp_conn_param.ack) ||
   149fa:	f002 0107 	and.w	r1, r2, #7
   149fe:	2903      	cmp	r1, #3
   14a00:	d135      	bne.n	14a6e <ll_conn_update+0xba>
			conn->llcp_conn_param.state = cmd;
   14a02:	f004 0407 	and.w	r4, r4, #7
   14a06:	f044 0408 	orr.w	r4, r4, #8
   14a0a:	f022 020f 	bic.w	r2, r2, #15
   14a0e:	4314      	orrs	r4, r2
   14a10:	f880 4186 	strb.w	r4, [r0, #390]	; 0x186
			conn->llcp_conn_param.status = status;
   14a14:	f880 6187 	strb.w	r6, [r0, #391]	; 0x187
	return 0;
   14a18:	4618      	mov	r0, r3
   14a1a:	e029      	b.n	14a70 <ll_conn_update+0xbc>
		if (!conn->llcp_conn_param.disabled &&
   14a1c:	f890 3186 	ldrb.w	r3, [r0, #390]	; 0x186
   14a20:	f013 0410 	ands.w	r4, r3, #16
   14a24:	d029      	beq.n	14a7a <ll_conn_update+0xc6>
		} else if (conn->lll.role) {
   14a26:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   14a2a:	2b00      	cmp	r3, #0
   14a2c:	db4f      	blt.n	14ace <ll_conn_update+0x11a>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
   14a2e:	f890 210c 	ldrb.w	r2, [r0, #268]	; 0x10c
   14a32:	f890 310d 	ldrb.w	r3, [r0, #269]	; 0x10d
   14a36:	4293      	cmp	r3, r2
   14a38:	d119      	bne.n	14a6e <ll_conn_update+0xba>
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   14a3a:	f890 210e 	ldrb.w	r2, [r0, #270]	; 0x10e
		conn->llcp_cu.interval = interval_max;
   14a3e:	f8a0 9110 	strh.w	r9, [r0, #272]	; 0x110
		conn->llcp_cu.req++;
   14a42:	3301      	adds	r3, #1
		conn->llcp_cu.win_size = 1U;
   14a44:	2101      	movs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   14a46:	f022 020f 	bic.w	r2, r2, #15
		conn->llcp_cu.req++;
   14a4a:	f880 310c 	strb.w	r3, [r0, #268]	; 0x10c
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   14a4e:	f042 0209 	orr.w	r2, r2, #9
		conn->llcp_cu.win_offset_us = 0U;
   14a52:	2300      	movs	r3, #0
		conn->llcp_cu.win_size = 1U;
   14a54:	f880 111c 	strb.w	r1, [r0, #284]	; 0x11c
		conn->llcp_cu.latency = latency;
   14a58:	f8a0 8112 	strh.w	r8, [r0, #274]	; 0x112
		conn->llcp_cu.timeout = timeout;
   14a5c:	f8a0 7114 	strh.w	r7, [r0, #276]	; 0x114
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   14a60:	f880 210e 	strb.w	r2, [r0, #270]	; 0x10e
		conn->llcp_cu.win_offset_us = 0U;
   14a64:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
	return 0;
   14a68:	4618      	mov	r0, r3
}
   14a6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   14a6e:	200c      	movs	r0, #12
}
   14a70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   14a74:	2002      	movs	r0, #2
}
   14a76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		    (!conn->common.fex_valid ||
   14a7a:	f890 30d8 	ldrb.w	r3, [r0, #216]	; 0xd8
		if (!conn->llcp_conn_param.disabled &&
   14a7e:	07db      	lsls	r3, r3, #31
   14a80:	d506      	bpl.n	14a90 <ll_conn_update+0xdc>
		     (conn->llcp_feature.features_conn &
   14a82:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
   14a86:	4623      	mov	r3, r4
   14a88:	f001 0202 	and.w	r2, r1, #2
		    (!conn->common.fex_valid ||
   14a8c:	4313      	orrs	r3, r2
   14a8e:	d0ca      	beq.n	14a26 <ll_conn_update+0x72>
   14a90:	f890 2184 	ldrb.w	r2, [r0, #388]	; 0x184
   14a94:	f890 1185 	ldrb.w	r1, [r0, #389]	; 0x185
			if (conn->llcp_conn_param.req !=
   14a98:	428a      	cmp	r2, r1
   14a9a:	d1e8      	bne.n	14a6e <ll_conn_update+0xba>
			conn->llcp_conn_param.state = cmd;
   14a9c:	f8b0 3186 	ldrh.w	r3, [r0, #390]	; 0x186
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14aa0:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
			conn->llcp_conn_param.interval_min = interval_min;
   14aa4:	f8a0 5188 	strh.w	r5, [r0, #392]	; 0x188
			conn->llcp_conn_param.state = cmd;
   14aa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
			conn->llcp_conn_param.req++;
   14aac:	3201      	adds	r2, #1
			conn->llcp_conn_param.state = cmd;
   14aae:	f043 0308 	orr.w	r3, r3, #8
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14ab2:	2900      	cmp	r1, #0
			conn->llcp_conn_param.interval_max = interval_max;
   14ab4:	f8a0 918a 	strh.w	r9, [r0, #394]	; 0x18a
			conn->llcp_conn_param.req++;
   14ab8:	f880 2184 	strb.w	r2, [r0, #388]	; 0x184
			conn->llcp_conn_param.latency = latency;
   14abc:	f8a0 818c 	strh.w	r8, [r0, #396]	; 0x18c
			conn->llcp_conn_param.timeout = timeout;
   14ac0:	f8a0 718e 	strh.w	r7, [r0, #398]	; 0x18e
			conn->llcp_conn_param.state = cmd;
   14ac4:	f8a0 3186 	strh.w	r3, [r0, #390]	; 0x186
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14ac8:	db03      	blt.n	14ad2 <ll_conn_update+0x11e>
	return 0;
   14aca:	2000      	movs	r0, #0
   14acc:	e7d0      	b.n	14a70 <ll_conn_update+0xbc>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   14ace:	201a      	movs	r0, #26
   14ad0:	e7ce      	b.n	14a70 <ll_conn_update+0xbc>
				ull_slave_latency_cancel(conn, handle);
   14ad2:	2100      	movs	r1, #0
   14ad4:	f003 ffd0 	bl	18a78 <ull_slave_latency_cancel>
	return 0;
   14ad8:	2000      	movs	r0, #0
   14ada:	e7c9      	b.n	14a70 <ll_conn_update+0xbc>
   14adc:	20000768 	.word	0x20000768

00014ae0 <ll_chm_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   14ae0:	b9c8      	cbnz	r0, 14b16 <ll_chm_get+0x36>
{
   14ae2:	b538      	push	{r3, r4, r5, lr}
   14ae4:	4602      	mov	r2, r0
   14ae6:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   14ae8:	480c      	ldr	r0, [pc, #48]	; (14b1c <ll_chm_get+0x3c>)
   14aea:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   14aee:	f7fa f97d 	bl	edec <mem_get>
	if (conn->lll.handle != handle) {
   14af2:	8d05      	ldrh	r5, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   14af4:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   14af6:	b965      	cbnz	r5, 14b12 <ll_chm_get+0x32>
   14af8:	f100 0234 	add.w	r2, r0, #52	; 0x34
		conn->chm_updated = 0U;
   14afc:	f883 51d8 	strb.w	r5, [r3, #472]	; 0x1d8
   14b00:	6811      	ldr	r1, [r2, #0]
   14b02:	6021      	str	r1, [r4, #0]
   14b04:	7911      	ldrb	r1, [r2, #4]
   14b06:	7121      	strb	r1, [r4, #4]
	} while (conn->chm_updated);
   14b08:	f893 01d8 	ldrb.w	r0, [r3, #472]	; 0x1d8
   14b0c:	2800      	cmp	r0, #0
   14b0e:	d1f5      	bne.n	14afc <ll_chm_get+0x1c>
}
   14b10:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   14b12:	2002      	movs	r0, #2
}
   14b14:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   14b16:	2002      	movs	r0, #2
}
   14b18:	4770      	bx	lr
   14b1a:	bf00      	nop
   14b1c:	20000768 	.word	0x20000768

00014b20 <ll_terminate_ind_send>:
	switch (reason) {
   14b20:	2929      	cmp	r1, #41	; 0x29
{
   14b22:	b538      	push	{r3, r4, r5, lr}
   14b24:	460d      	mov	r5, r1
   14b26:	4604      	mov	r4, r0
	switch (reason) {
   14b28:	d819      	bhi.n	14b5e <ll_terminate_ind_send+0x3e>
   14b2a:	2904      	cmp	r1, #4
   14b2c:	d919      	bls.n	14b62 <ll_terminate_ind_send+0x42>
   14b2e:	1f4b      	subs	r3, r1, #5
   14b30:	2b24      	cmp	r3, #36	; 0x24
   14b32:	d816      	bhi.n	14b62 <ll_terminate_ind_send+0x42>
   14b34:	e8df f003 	tbb	[pc, r3]
   14b38:	15151517 	.word	0x15151517
   14b3c:	15151515 	.word	0x15151515
   14b40:	15151515 	.word	0x15151515
   14b44:	17171515 	.word	0x17171515
   14b48:	15151517 	.word	0x15151517
   14b4c:	15151715 	.word	0x15151715
   14b50:	15151515 	.word	0x15151515
   14b54:	15151515 	.word	0x15151515
   14b58:	15151515 	.word	0x15151515
   14b5c:	17          	.byte	0x17
   14b5d:	00          	.byte	0x00
   14b5e:	293b      	cmp	r1, #59	; 0x3b
   14b60:	d001      	beq.n	14b66 <ll_terminate_ind_send+0x46>
   14b62:	2012      	movs	r0, #18
}
   14b64:	bd38      	pop	{r3, r4, r5, pc}
	if (handle >= CONFIG_BT_MAX_CONN) {
   14b66:	b9a4      	cbnz	r4, 14b92 <ll_terminate_ind_send+0x72>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   14b68:	4622      	mov	r2, r4
   14b6a:	480d      	ldr	r0, [pc, #52]	; (14ba0 <ll_terminate_ind_send+0x80>)
   14b6c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   14b70:	f7fa f93c 	bl	edec <mem_get>
	if (conn->lll.handle != handle) {
   14b74:	8d02      	ldrh	r2, [r0, #40]	; 0x28
   14b76:	b962      	cbnz	r2, 14b92 <ll_terminate_ind_send+0x72>
	conn->llcp_terminate.req++;
   14b78:	f890 2140 	ldrb.w	r2, [r0, #320]	; 0x140
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   14b7c:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
	conn->llcp_terminate.reason_own = reason;
   14b80:	f880 5142 	strb.w	r5, [r0, #322]	; 0x142
	conn->llcp_terminate.req++;
   14b84:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   14b86:	2900      	cmp	r1, #0
	conn->llcp_terminate.req++;
   14b88:	f880 2140 	strb.w	r2, [r0, #320]	; 0x140
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   14b8c:	db03      	blt.n	14b96 <ll_terminate_ind_send+0x76>
	return 0;
   14b8e:	4620      	mov	r0, r4
}
   14b90:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   14b92:	2002      	movs	r0, #2
}
   14b94:	bd38      	pop	{r3, r4, r5, pc}
		ull_slave_latency_cancel(conn, handle);
   14b96:	4621      	mov	r1, r4
   14b98:	f003 ff6e 	bl	18a78 <ull_slave_latency_cancel>
	return 0;
   14b9c:	4620      	mov	r0, r4
}
   14b9e:	bd38      	pop	{r3, r4, r5, pc}
   14ba0:	20000768 	.word	0x20000768

00014ba4 <ll_feature_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   14ba4:	b9d8      	cbnz	r0, 14bde <ll_feature_req_send+0x3a>
{
   14ba6:	b510      	push	{r4, lr}
   14ba8:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   14baa:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   14bae:	480f      	ldr	r0, [pc, #60]	; (14bec <ll_feature_req_send+0x48>)
   14bb0:	f7fa f91c 	bl	edec <mem_get>
	if (conn->lll.handle != handle) {
   14bb4:	8d04      	ldrh	r4, [r0, #40]	; 0x28
   14bb6:	b984      	cbnz	r4, 14bda <ll_feature_req_send+0x36>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
   14bb8:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
   14bbc:	f890 2121 	ldrb.w	r2, [r0, #289]	; 0x121
   14bc0:	428a      	cmp	r2, r1
   14bc2:	d108      	bne.n	14bd6 <ll_feature_req_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14bc4:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
	conn->llcp_feature.req++;
   14bc8:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14bca:	2900      	cmp	r1, #0
	conn->llcp_feature.req++;
   14bcc:	f880 2120 	strb.w	r2, [r0, #288]	; 0x120
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14bd0:	db07      	blt.n	14be2 <ll_feature_req_send+0x3e>
	return 0;
   14bd2:	4620      	mov	r0, r4
}
   14bd4:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   14bd6:	200c      	movs	r0, #12
}
   14bd8:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   14bda:	2002      	movs	r0, #2
}
   14bdc:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   14bde:	2002      	movs	r0, #2
}
   14be0:	4770      	bx	lr
		ull_slave_latency_cancel(conn, handle);
   14be2:	4621      	mov	r1, r4
   14be4:	f003 ff48 	bl	18a78 <ull_slave_latency_cancel>
	return 0;
   14be8:	4620      	mov	r0, r4
}
   14bea:	bd10      	pop	{r4, pc}
   14bec:	20000768 	.word	0x20000768

00014bf0 <ll_version_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   14bf0:	b9d8      	cbnz	r0, 14c2a <ll_version_ind_send+0x3a>
{
   14bf2:	b510      	push	{r4, lr}
   14bf4:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   14bf6:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   14bfa:	480f      	ldr	r0, [pc, #60]	; (14c38 <ll_version_ind_send+0x48>)
   14bfc:	f7fa f8f6 	bl	edec <mem_get>
	if (conn->lll.handle != handle) {
   14c00:	8d04      	ldrh	r4, [r0, #40]	; 0x28
   14c02:	b984      	cbnz	r4, 14c26 <ll_version_ind_send+0x36>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
   14c04:	f890 1138 	ldrb.w	r1, [r0, #312]	; 0x138
   14c08:	f890 2139 	ldrb.w	r2, [r0, #313]	; 0x139
   14c0c:	428a      	cmp	r2, r1
   14c0e:	d108      	bne.n	14c22 <ll_version_ind_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   14c10:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
	conn->llcp_version.req++;
   14c14:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   14c16:	2900      	cmp	r1, #0
	conn->llcp_version.req++;
   14c18:	f880 2138 	strb.w	r2, [r0, #312]	; 0x138
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   14c1c:	db07      	blt.n	14c2e <ll_version_ind_send+0x3e>
	return 0;
   14c1e:	4620      	mov	r0, r4
}
   14c20:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   14c22:	200c      	movs	r0, #12
}
   14c24:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   14c26:	2002      	movs	r0, #2
}
   14c28:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   14c2a:	2002      	movs	r0, #2
}
   14c2c:	4770      	bx	lr
		ull_slave_latency_cancel(conn, handle);
   14c2e:	4621      	mov	r1, r4
   14c30:	f003 ff22 	bl	18a78 <ull_slave_latency_cancel>
	return 0;
   14c34:	4620      	mov	r0, r4
}
   14c36:	bd10      	pop	{r4, pc}
   14c38:	20000768 	.word	0x20000768

00014c3c <ll_length_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   14c3c:	2800      	cmp	r0, #0
   14c3e:	d14c      	bne.n	14cda <ll_length_req_send+0x9e>
{
   14c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14c42:	460d      	mov	r5, r1
   14c44:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   14c46:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   14c4a:	4602      	mov	r2, r0
   14c4c:	4826      	ldr	r0, [pc, #152]	; (14ce8 <ll_length_req_send+0xac>)
   14c4e:	f7fa f8cd 	bl	edec <mem_get>
	if (conn->lll.handle != handle) {
   14c52:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   14c54:	bb43      	cbnz	r3, 14ca8 <ll_length_req_send+0x6c>
	if (conn->llcp_length.disabled ||
   14c56:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
   14c5a:	f013 0108 	ands.w	r1, r3, #8
   14c5e:	d125      	bne.n	14cac <ll_length_req_send+0x70>
	    (conn->common.fex_valid &&
   14c60:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
	if (conn->llcp_length.disabled ||
   14c64:	07d2      	lsls	r2, r2, #31
   14c66:	d507      	bpl.n	14c78 <ll_length_req_send+0x3c>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_DLE)))) {
   14c68:	f8d0 2128 	ldr.w	r2, [r0, #296]	; 0x128
   14c6c:	460f      	mov	r7, r1
   14c6e:	f002 0620 	and.w	r6, r2, #32
	    (conn->common.fex_valid &&
   14c72:	ea56 0207 	orrs.w	r2, r6, r7
   14c76:	d019      	beq.n	14cac <ll_length_req_send+0x70>
	if (conn->llcp_length.req != conn->llcp_length.ack) {
   14c78:	f890 11ac 	ldrb.w	r1, [r0, #428]	; 0x1ac
   14c7c:	f890 21ad 	ldrb.w	r2, [r0, #429]	; 0x1ad
   14c80:	428a      	cmp	r2, r1
   14c82:	d017      	beq.n	14cb4 <ll_length_req_send+0x78>
		switch (conn->llcp_length.state) {
   14c84:	f003 0307 	and.w	r3, r3, #7
   14c88:	2b03      	cmp	r3, #3
   14c8a:	d004      	beq.n	14c96 <ll_length_req_send+0x5a>
   14c8c:	3303      	adds	r3, #3
   14c8e:	f003 0307 	and.w	r3, r3, #7
   14c92:	2b01      	cmp	r3, #1
   14c94:	d80c      	bhi.n	14cb0 <ll_length_req_send+0x74>
			if (!conn->llcp_length.cache.tx_octets) {
   14c96:	f8b0 31b8 	ldrh.w	r3, [r0, #440]	; 0x1b8
   14c9a:	b94b      	cbnz	r3, 14cb0 <ll_length_req_send+0x74>
				conn->llcp_length.cache.tx_octets = tx_octets;
   14c9c:	f8a0 51b8 	strh.w	r5, [r0, #440]	; 0x1b8
				conn->llcp_length.cache.tx_time = tx_time;
   14ca0:	f8a0 41ba 	strh.w	r4, [r0, #442]	; 0x1ba
				return 0;
   14ca4:	4618      	mov	r0, r3
}
   14ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   14ca8:	2002      	movs	r0, #2
}
   14caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   14cac:	201a      	movs	r0, #26
}
   14cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   14cb0:	200c      	movs	r0, #12
}
   14cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   14cb4:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   14cb8:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
	conn->llcp_length.tx_octets = tx_octets;
   14cbc:	f8a0 51b2 	strh.w	r5, [r0, #434]	; 0x1b2
	conn->llcp_length.req++;
   14cc0:	3201      	adds	r2, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   14cc2:	f36f 0302 	bfc	r3, #0, #3
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   14cc6:	2900      	cmp	r1, #0
	conn->llcp_length.req++;
   14cc8:	f880 21ac 	strb.w	r2, [r0, #428]	; 0x1ac
	conn->llcp_length.tx_time = tx_time;
   14ccc:	f8a0 41b6 	strh.w	r4, [r0, #438]	; 0x1b6
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   14cd0:	f880 31ae 	strb.w	r3, [r0, #430]	; 0x1ae
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   14cd4:	db03      	blt.n	14cde <ll_length_req_send+0xa2>
	return 0;
   14cd6:	2000      	movs	r0, #0
}
   14cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   14cda:	2002      	movs	r0, #2
}
   14cdc:	4770      	bx	lr
		ull_slave_latency_cancel(conn, handle);
   14cde:	2100      	movs	r1, #0
   14ce0:	f003 feca 	bl	18a78 <ull_slave_latency_cancel>
	return 0;
   14ce4:	2000      	movs	r0, #0
}
   14ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14ce8:	20000768 	.word	0x20000768

00014cec <ll_length_default_get>:
	*max_tx_octets = default_tx_octets;
   14cec:	4a03      	ldr	r2, [pc, #12]	; (14cfc <ll_length_default_get+0x10>)
	*max_tx_time = default_tx_time;
   14cee:	4b04      	ldr	r3, [pc, #16]	; (14d00 <ll_length_default_get+0x14>)
	*max_tx_octets = default_tx_octets;
   14cf0:	8812      	ldrh	r2, [r2, #0]
	*max_tx_time = default_tx_time;
   14cf2:	881b      	ldrh	r3, [r3, #0]
	*max_tx_octets = default_tx_octets;
   14cf4:	8002      	strh	r2, [r0, #0]
	*max_tx_time = default_tx_time;
   14cf6:	800b      	strh	r3, [r1, #0]
}
   14cf8:	4770      	bx	lr
   14cfa:	bf00      	nop
   14cfc:	20002524 	.word	0x20002524
   14d00:	20002526 	.word	0x20002526

00014d04 <ll_length_default_set>:
	default_tx_octets = max_tx_octets;
   14d04:	4a02      	ldr	r2, [pc, #8]	; (14d10 <ll_length_default_set+0xc>)
	default_tx_time = max_tx_time;
   14d06:	4b03      	ldr	r3, [pc, #12]	; (14d14 <ll_length_default_set+0x10>)
	default_tx_octets = max_tx_octets;
   14d08:	8010      	strh	r0, [r2, #0]
	default_tx_time = max_tx_time;
   14d0a:	8019      	strh	r1, [r3, #0]
}
   14d0c:	2000      	movs	r0, #0
   14d0e:	4770      	bx	lr
   14d10:	20002524 	.word	0x20002524
   14d14:	20002526 	.word	0x20002526

00014d18 <ll_length_max_get>:
{
   14d18:	b430      	push	{r4, r5}
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   14d1a:	251b      	movs	r5, #27
	*max_tx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   14d1c:	f44f 74a0 	mov.w	r4, #320	; 0x140
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   14d20:	8005      	strh	r5, [r0, #0]
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
   14d22:	8015      	strh	r5, [r2, #0]
	*max_tx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   14d24:	800c      	strh	r4, [r1, #0]
	*max_rx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   14d26:	801c      	strh	r4, [r3, #0]
}
   14d28:	bc30      	pop	{r4, r5}
   14d2a:	4770      	bx	lr

00014d2c <ll_phy_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   14d2c:	b9c0      	cbnz	r0, 14d60 <ll_phy_get+0x34>
{
   14d2e:	b538      	push	{r3, r4, r5, lr}
   14d30:	460d      	mov	r5, r1
   14d32:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   14d34:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   14d38:	4602      	mov	r2, r0
   14d3a:	480a      	ldr	r0, [pc, #40]	; (14d64 <ll_phy_get+0x38>)
   14d3c:	f7fa f856 	bl	edec <mem_get>
   14d40:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   14d42:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   14d44:	b950      	cbnz	r0, 14d5c <ll_phy_get+0x30>
	*tx = conn->lll.phy_tx;
   14d46:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   14d4a:	f3c2 0202 	ubfx	r2, r2, #0, #3
   14d4e:	702a      	strb	r2, [r5, #0]
	*rx = conn->lll.phy_rx;
   14d50:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
   14d54:	f3c3 0302 	ubfx	r3, r3, #0, #3
   14d58:	7023      	strb	r3, [r4, #0]
}
   14d5a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   14d5c:	2002      	movs	r0, #2
}
   14d5e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   14d60:	2002      	movs	r0, #2
}
   14d62:	4770      	bx	lr
   14d64:	20000768 	.word	0x20000768

00014d68 <ll_phy_default_set>:
	default_phy_tx = tx;
   14d68:	4a02      	ldr	r2, [pc, #8]	; (14d74 <ll_phy_default_set+0xc>)
	default_phy_rx = rx;
   14d6a:	4b03      	ldr	r3, [pc, #12]	; (14d78 <ll_phy_default_set+0x10>)
	default_phy_tx = tx;
   14d6c:	7010      	strb	r0, [r2, #0]
	default_phy_rx = rx;
   14d6e:	7019      	strb	r1, [r3, #0]
}
   14d70:	2000      	movs	r0, #0
   14d72:	4770      	bx	lr
   14d74:	20002aa7 	.word	0x20002aa7
   14d78:	20002aa6 	.word	0x20002aa6

00014d7c <ll_phy_req_send>:
{
   14d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
   14d7e:	2800      	cmp	r0, #0
   14d80:	d13d      	bne.n	14dfe <ll_phy_req_send+0x82>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   14d82:	460c      	mov	r4, r1
   14d84:	4615      	mov	r5, r2
   14d86:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   14d8a:	4602      	mov	r2, r0
   14d8c:	4822      	ldr	r0, [pc, #136]	; (14e18 <ll_phy_req_send+0x9c>)
   14d8e:	461e      	mov	r6, r3
   14d90:	f7fa f82c 	bl	edec <mem_get>
	if (conn->lll.handle != handle) {
   14d94:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   14d96:	bb93      	cbnz	r3, 14dfe <ll_phy_req_send+0x82>
	if (conn->llcp_phy.disabled ||
   14d98:	f890 71bf 	ldrb.w	r7, [r0, #447]	; 0x1bf
   14d9c:	f017 0708 	ands.w	r7, r7, #8
   14da0:	d130      	bne.n	14e04 <ll_phy_req_send+0x88>
	    (conn->common.fex_valid &&
   14da2:	f890 30d8 	ldrb.w	r3, [r0, #216]	; 0xd8
	if (conn->llcp_phy.disabled ||
   14da6:	07db      	lsls	r3, r3, #31
   14da8:	d506      	bpl.n	14db8 <ll_phy_req_send+0x3c>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_PHY_2M)) &&
   14daa:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
   14dae:	463b      	mov	r3, r7
   14db0:	f401 6210 	and.w	r2, r1, #2304	; 0x900
   14db4:	4313      	orrs	r3, r2
   14db6:	d025      	beq.n	14e04 <ll_phy_req_send+0x88>
	if (conn->llcp_phy.req != conn->llcp_phy.ack) {
   14db8:	f890 31bc 	ldrb.w	r3, [r0, #444]	; 0x1bc
   14dbc:	f890 21bd 	ldrb.w	r2, [r0, #445]	; 0x1bd
   14dc0:	429a      	cmp	r2, r3
   14dc2:	d122      	bne.n	14e0a <ll_phy_req_send+0x8e>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   14dc4:	f004 0407 	and.w	r4, r4, #7
   14dc8:	00a4      	lsls	r4, r4, #2
   14dca:	f8b0 11be 	ldrh.w	r1, [r0, #446]	; 0x1be
   14dce:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
   14dd2:	f006 0307 	and.w	r3, r6, #7
   14dd6:	ea44 1343 	orr.w	r3, r4, r3, lsl #5
   14dda:	f005 0501 	and.w	r5, r5, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   14dde:	f990 4039 	ldrsb.w	r4, [r0, #57]	; 0x39
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   14de2:	ea43 2345 	orr.w	r3, r3, r5, lsl #9
   14de6:	f401 4179 	and.w	r1, r1, #63744	; 0xf900
	conn->llcp_phy.req++;
   14dea:	3201      	adds	r2, #1
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   14dec:	430b      	orrs	r3, r1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   14dee:	2c00      	cmp	r4, #0
	conn->llcp_phy.req++;
   14df0:	f880 21bc 	strb.w	r2, [r0, #444]	; 0x1bc
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   14df4:	f8a0 31be 	strh.w	r3, [r0, #446]	; 0x1be
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   14df8:	db0a      	blt.n	14e10 <ll_phy_req_send+0x94>
}
   14dfa:	4638      	mov	r0, r7
   14dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   14dfe:	2702      	movs	r7, #2
}
   14e00:	4638      	mov	r0, r7
   14e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   14e04:	271a      	movs	r7, #26
}
   14e06:	4638      	mov	r0, r7
   14e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   14e0a:	270c      	movs	r7, #12
}
   14e0c:	4638      	mov	r0, r7
   14e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ull_slave_latency_cancel(conn, handle);
   14e10:	2100      	movs	r1, #0
   14e12:	f003 fe31 	bl	18a78 <ull_slave_latency_cancel>
   14e16:	e7f0      	b.n	14dfa <ll_phy_req_send+0x7e>
   14e18:	20000768 	.word	0x20000768

00014e1c <ll_apto_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   14e1c:	b9d8      	cbnz	r0, 14e56 <ll_apto_get+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   14e1e:	4602      	mov	r2, r0
{
   14e20:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   14e22:	480e      	ldr	r0, [pc, #56]	; (14e5c <ll_apto_get+0x40>)
   14e24:	460c      	mov	r4, r1
   14e26:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   14e2a:	f7f9 ffdf 	bl	edec <mem_get>
   14e2e:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   14e30:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   14e32:	b970      	cbnz	r0, 14e52 <ll_apto_get+0x36>
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
   14e34:	f8b2 10ce 	ldrh.w	r1, [r2, #206]	; 0xce
   14e38:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
   14e3a:	4a09      	ldr	r2, [pc, #36]	; (14e60 <ll_apto_get+0x44>)
   14e3c:	fb03 f301 	mul.w	r3, r3, r1
   14e40:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
   14e44:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   14e48:	fba2 2303 	umull	r2, r3, r2, r3
   14e4c:	099b      	lsrs	r3, r3, #6
   14e4e:	8023      	strh	r3, [r4, #0]
}
   14e50:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   14e52:	2002      	movs	r0, #2
}
   14e54:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   14e56:	2002      	movs	r0, #2
}
   14e58:	4770      	bx	lr
   14e5a:	bf00      	nop
   14e5c:	20000768 	.word	0x20000768
   14e60:	10624dd3 	.word	0x10624dd3

00014e64 <ll_apto_set>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   14e64:	b9d8      	cbnz	r0, 14e9e <ll_apto_set+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   14e66:	4602      	mov	r2, r0
{
   14e68:	b538      	push	{r3, r4, r5, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   14e6a:	480e      	ldr	r0, [pc, #56]	; (14ea4 <ll_apto_set+0x40>)
   14e6c:	460d      	mov	r5, r1
   14e6e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   14e72:	f7f9 ffbb 	bl	edec <mem_get>
   14e76:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   14e78:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   14e7a:	b970      	cbnz	r0, 14e9a <ll_apto_set+0x36>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
   14e7c:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
   14e7e:	f240 44e2 	movw	r4, #1250	; 0x4e2
   14e82:	fb04 f403 	mul.w	r4, r4, r3
   14e86:	f242 7310 	movw	r3, #10000	; 0x2710
   14e8a:	fb03 4305 	mla	r3, r3, r5, r4
   14e8e:	3b01      	subs	r3, #1
   14e90:	fbb3 f3f4 	udiv	r3, r3, r4
   14e94:	f8a2 30ce 	strh.w	r3, [r2, #206]	; 0xce
}
   14e98:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   14e9a:	2002      	movs	r0, #2
}
   14e9c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   14e9e:	2002      	movs	r0, #2
}
   14ea0:	4770      	bx	lr
   14ea2:	bf00      	nop
   14ea4:	20000768 	.word	0x20000768

00014ea8 <ull_conn_init>:
	err = init_reset();
   14ea8:	f7ff b80c 	b.w	13ec4 <init_reset>

00014eac <ull_conn_reset>:
{
   14eac:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   14eae:	2200      	movs	r2, #0
   14eb0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   14eb4:	4813      	ldr	r0, [pc, #76]	; (14f04 <ull_conn_reset+0x58>)
   14eb6:	f7f9 ff99 	bl	edec <mem_get>
   14eba:	4604      	mov	r4, r0
	err = ull_ticker_stop_with_mark(TICKER_ID_CONN_BASE + handle,
   14ebc:	f100 021c 	add.w	r2, r0, #28
   14ec0:	4601      	mov	r1, r0
   14ec2:	2003      	movs	r0, #3
   14ec4:	f7fe f9a0 	bl	13208 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   14ec8:	b108      	cbz	r0, 14ece <ull_conn_reset+0x22>
   14eca:	3078      	adds	r0, #120	; 0x78
   14ecc:	d10b      	bne.n	14ee6 <ull_conn_reset+0x3a>
	MFIFO_INIT(conn_tx);
   14ece:	480e      	ldr	r0, [pc, #56]	; (14f08 <ull_conn_reset+0x5c>)
	MFIFO_INIT(conn_ack);
   14ed0:	490e      	ldr	r1, [pc, #56]	; (14f0c <ull_conn_reset+0x60>)
	conn_upd_curr = NULL;
   14ed2:	4a0f      	ldr	r2, [pc, #60]	; (14f10 <ull_conn_reset+0x64>)
	conn->lll.link_tx_free = NULL;
   14ed4:	2300      	movs	r3, #0
	MFIFO_INIT(conn_tx);
   14ed6:	8043      	strh	r3, [r0, #2]
	MFIFO_INIT(conn_ack);
   14ed8:	804b      	strh	r3, [r1, #2]
	conn->lll.link_tx_free = NULL;
   14eda:	6763      	str	r3, [r4, #116]	; 0x74
}
   14edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	conn_upd_curr = NULL;
   14ee0:	6013      	str	r3, [r2, #0]
	err = init_reset();
   14ee2:	f7fe bfef 	b.w	13ec4 <init_reset>
	LL_ASSERT(err == 0 || err == -EALREADY);
   14ee6:	4a0b      	ldr	r2, [pc, #44]	; (14f14 <ull_conn_reset+0x68>)
   14ee8:	490b      	ldr	r1, [pc, #44]	; (14f18 <ull_conn_reset+0x6c>)
   14eea:	480c      	ldr	r0, [pc, #48]	; (14f1c <ull_conn_reset+0x70>)
   14eec:	f240 732d 	movw	r3, #1837	; 0x72d
   14ef0:	f00f fb78 	bl	245e4 <printk>
   14ef4:	4040      	eors	r0, r0
   14ef6:	f380 8811 	msr	BASEPRI, r0
   14efa:	f04f 0003 	mov.w	r0, #3
   14efe:	df02      	svc	2
   14f00:	e7e5      	b.n	14ece <ull_conn_reset+0x22>
   14f02:	bf00      	nop
   14f04:	20000768 	.word	0x20000768
   14f08:	20007ac0 	.word	0x20007ac0
   14f0c:	20007a7c 	.word	0x20007a7c
   14f10:	20001890 	.word	0x20001890
   14f14:	0002b604 	.word	0x0002b604
   14f18:	0002b714 	.word	0x0002b714
   14f1c:	0002b0c4 	.word	0x0002b0c4

00014f20 <ull_conn_default_tx_octets_get>:
	return default_tx_octets;
   14f20:	4b01      	ldr	r3, [pc, #4]	; (14f28 <ull_conn_default_tx_octets_get+0x8>)
}
   14f22:	8818      	ldrh	r0, [r3, #0]
   14f24:	4770      	bx	lr
   14f26:	bf00      	nop
   14f28:	20002524 	.word	0x20002524

00014f2c <ull_conn_default_tx_time_get>:
	return default_tx_time;
   14f2c:	4b01      	ldr	r3, [pc, #4]	; (14f34 <ull_conn_default_tx_time_get+0x8>)
}
   14f2e:	8818      	ldrh	r0, [r3, #0]
   14f30:	4770      	bx	lr
   14f32:	bf00      	nop
   14f34:	20002526 	.word	0x20002526

00014f38 <ull_conn_default_phy_tx_get>:
	return default_phy_tx;
   14f38:	4b01      	ldr	r3, [pc, #4]	; (14f40 <ull_conn_default_phy_tx_get+0x8>)
}
   14f3a:	7818      	ldrb	r0, [r3, #0]
   14f3c:	4770      	bx	lr
   14f3e:	bf00      	nop
   14f40:	20002aa7 	.word	0x20002aa7

00014f44 <ull_conn_default_phy_rx_get>:
	return default_phy_rx;
   14f44:	4b01      	ldr	r3, [pc, #4]	; (14f4c <ull_conn_default_phy_rx_get+0x8>)
}
   14f46:	7818      	ldrb	r0, [r3, #0]
   14f48:	4770      	bx	lr
   14f4a:	bf00      	nop
   14f4c:	20002aa6 	.word	0x20002aa6

00014f50 <ull_conn_setup>:
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
   14f50:	688b      	ldr	r3, [r1, #8]
   14f52:	685b      	ldr	r3, [r3, #4]
{
   14f54:	b510      	push	{r4, lr}
	switch (lll->role) {
   14f56:	7f5c      	ldrb	r4, [r3, #29]
   14f58:	09e4      	lsrs	r4, r4, #7
   14f5a:	d10d      	bne.n	14f78 <ull_conn_setup+0x28>
		LL_ASSERT(0);
   14f5c:	4a09      	ldr	r2, [pc, #36]	; (14f84 <ull_conn_setup+0x34>)
   14f5e:	490a      	ldr	r1, [pc, #40]	; (14f88 <ull_conn_setup+0x38>)
   14f60:	480a      	ldr	r0, [pc, #40]	; (14f8c <ull_conn_setup+0x3c>)
   14f62:	f240 3341 	movw	r3, #833	; 0x341
   14f66:	f00f fb3d 	bl	245e4 <printk>
   14f6a:	4040      	eors	r0, r0
   14f6c:	f380 8811 	msr	BASEPRI, r0
   14f70:	f04f 0003 	mov.w	r0, #3
   14f74:	df02      	svc	2
}
   14f76:	bd10      	pop	{r4, pc}
		ull_slave_setup(link, rx, ftr, lll);
   14f78:	460a      	mov	r2, r1
}
   14f7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ull_slave_setup(link, rx, ftr, lll);
   14f7e:	3208      	adds	r2, #8
   14f80:	f7ed b812 	b.w	1fa8 <ull_slave_setup>
   14f84:	0002b604 	.word	0x0002b604
   14f88:	0002b15c 	.word	0x0002b15c
   14f8c:	0002b0c4 	.word	0x0002b0c4

00014f90 <ull_conn_rx>:
	conn = ll_connected_get((*rx)->hdr.handle);
   14f90:	680b      	ldr	r3, [r1, #0]
	if (handle >= CONFIG_BT_MAX_CONN) {
   14f92:	88da      	ldrh	r2, [r3, #6]
   14f94:	2a00      	cmp	r2, #0
   14f96:	f040 80c8 	bne.w	1512a <ull_conn_rx+0x19a>
{
   14f9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f9e:	460d      	mov	r5, r1
   14fa0:	b085      	sub	sp, #20
   14fa2:	4607      	mov	r7, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   14fa4:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   14fa8:	48be      	ldr	r0, [pc, #760]	; (152a4 <ull_conn_rx+0x314>)
   14faa:	f7f9 ff1f 	bl	edec <mem_get>
	if (conn->lll.handle != handle) {
   14fae:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   14fb0:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   14fb2:	2b00      	cmp	r3, #0
   14fb4:	f040 80fa 	bne.w	151ac <ull_conn_rx+0x21c>
	pdu_rx = (void *)(*rx)->pdu;
   14fb8:	682e      	ldr	r6, [r5, #0]
	switch (pdu_rx->ll_id) {
   14fba:	f890 1166 	ldrb.w	r1, [r0, #358]	; 0x166
   14fbe:	7f32      	ldrb	r2, [r6, #28]
   14fc0:	f002 0203 	and.w	r2, r2, #3
   14fc4:	2a03      	cmp	r2, #3
   14fc6:	f001 0001 	and.w	r0, r1, #1
   14fca:	d128      	bne.n	1501e <ull_conn_rx+0x8e>
			  struct pdu_data *pdu_rx, struct ll_conn *conn)
{
	int nack = 0;
	uint8_t opcode;

	opcode = pdu_rx->llctrl.opcode;
   14fcc:	f896 801f 	ldrb.w	r8, [r6, #31]

#if defined(CONFIG_BT_CTLR_LE_ENC)
	/* FIXME: do check in individual case to reduce CPU time */
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   14fd0:	2800      	cmp	r0, #0
   14fd2:	d03a      	beq.n	1504a <ull_conn_rx+0xba>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   14fd4:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   14fd8:	2b00      	cmp	r3, #0
   14fda:	f001 0004 	and.w	r0, r1, #4
   14fde:	f2c0 85b8 	blt.w	15b52 <ull_conn_rx+0xbc2>
	return (!conn->lll.role &&
   14fe2:	2800      	cmp	r0, #0
   14fe4:	f040 8506 	bne.w	159f4 <ull_conn_rx+0xa64>
		((!conn->llcp_enc.refresh &&
   14fe8:	f1b8 0f02 	cmp.w	r8, #2
   14fec:	f000 83fa 	beq.w	157e4 <ull_conn_rx+0x854>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   14ff0:	f1b8 0f05 	cmp.w	r8, #5
   14ff4:	d04b      	beq.n	1508e <ull_conn_rx+0xfe>
   14ff6:	f1b8 0f06 	cmp.w	r8, #6
   14ffa:	f000 85c6 	beq.w	15b8a <ull_conn_rx+0xbfa>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   14ffe:	f1b8 0f0d 	cmp.w	r8, #13
   15002:	f000 81ab 	beq.w	1535c <ull_conn_rx+0x3cc>
   15006:	f1b8 0f11 	cmp.w	r8, #17
   1500a:	f000 823e 	beq.w	1548a <ull_conn_rx+0x4fa>
		conn->llcp_terminate.reason_peer =
   1500e:	233d      	movs	r3, #61	; 0x3d
   15010:	f884 3143 	strb.w	r3, [r4, #323]	; 0x143
			BT_HCI_ERR_TERM_DUE_TO_MIC_FAIL;

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   15014:	682b      	ldr	r3, [r5, #0]
   15016:	2201      	movs	r2, #1
   15018:	711a      	strb	r2, [r3, #4]

		return 0;
   1501a:	2000      	movs	r0, #0
   1501c:	e008      	b.n	15030 <ull_conn_rx+0xa0>
	switch (pdu_rx->ll_id) {
   1501e:	b952      	cbnz	r2, 15036 <ull_conn_rx+0xa6>
		if (conn->llcp_enc.pause_rx) {
   15020:	b118      	cbz	r0, 1502a <ull_conn_rx+0x9a>
			conn->llcp_terminate.reason_peer =
   15022:	233d      	movs	r3, #61	; 0x3d
   15024:	f884 3143 	strb.w	r3, [r4, #323]	; 0x143
   15028:	682e      	ldr	r6, [r5, #0]
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1502a:	2301      	movs	r3, #1
   1502c:	7133      	strb	r3, [r6, #4]
	return 0;
   1502e:	2000      	movs	r0, #0
}
   15030:	b005      	add	sp, #20
   15032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->llcp_enc.pause_rx) {
   15036:	2800      	cmp	r0, #0
   15038:	d0f9      	beq.n	1502e <ull_conn_rx+0x9e>
			conn->llcp_terminate.reason_peer =
   1503a:	223d      	movs	r2, #61	; 0x3d
   1503c:	f884 2143 	strb.w	r2, [r4, #323]	; 0x143
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   15040:	682a      	ldr	r2, [r5, #0]
   15042:	2101      	movs	r1, #1
	return 0;
   15044:	4618      	mov	r0, r3
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   15046:	7111      	strb	r1, [r2, #4]
   15048:	e7f2      	b.n	15030 <ull_conn_rx+0xa0>
	}
#endif /* CONFIG_BT_CTLR_LE_ENC */

	switch (opcode) {
   1504a:	f1b8 0f18 	cmp.w	r8, #24
   1504e:	d81e      	bhi.n	1508e <ull_conn_rx+0xfe>
   15050:	e8df f018 	tbh	[pc, r8, lsl #1]
   15054:	03d40355 	.word	0x03d40355
   15058:	040903c8 	.word	0x040903c8
   1505c:	001d001d 	.word	0x001d001d
   15060:	032b04aa 	.word	0x032b04aa
   15064:	029c02ce 	.word	0x029c02ce
   15068:	04560250 	.word	0x04560250
   1506c:	018401c7 	.word	0x018401c7
   15070:	0173001d 	.word	0x0173001d
   15074:	021b001d 	.word	0x021b001d
   15078:	016901f6 	.word	0x016901f6
   1507c:	012e012e 	.word	0x012e012e
   15080:	001d00f6 	.word	0x001d00f6
   15084:	00b3      	.short	0x00b3
		nack = pause_enc_rsp_send(conn, *rx, 1);
		break;
#endif /* CONFIG_BT_PERIPHERAL */

	case PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP:
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   15086:	7f73      	ldrb	r3, [r6, #29]
   15088:	2b01      	cmp	r3, #1
   1508a:	f000 8442 	beq.w	15912 <ull_conn_rx+0x982>
   1508e:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
   15092:	f000 0502 	and.w	r5, r0, #2
	if (conn->common.txn_lock) {
   15096:	2d00      	cmp	r5, #0
   15098:	d1c7      	bne.n	1502a <ull_conn_rx+0x9a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1509a:	4883      	ldr	r0, [pc, #524]	; (152a8 <ull_conn_rx+0x318>)
   1509c:	f7f9 fe76 	bl	ed8c <mem_acquire>
	if (!tx) {
   150a0:	2800      	cmp	r0, #0
   150a2:	f000 856e 	beq.w	15b82 <ull_conn_rx+0xbf2>
	conn->common.txn_lock = 1U;
   150a6:	f894 10d8 	ldrb.w	r1, [r4, #216]	; 0xd8
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   150aa:	7903      	ldrb	r3, [r0, #4]
	conn->common.txn_lock = 1U;
   150ac:	f041 0102 	orr.w	r1, r1, #2
   150b0:	f884 10d8 	strb.w	r1, [r4, #216]	; 0xd8
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   150b4:	2102      	movs	r1, #2
   150b6:	7141      	strb	r1, [r0, #5]
	    conn->tx_head &&
   150b8:	f8d4 11c4 	ldr.w	r1, [r4, #452]	; 0x1c4
	pdu->llctrl.unknown_rsp.type = type;
   150bc:	f880 8008 	strb.w	r8, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   150c0:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   150c4:	2207      	movs	r2, #7
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   150c6:	7103      	strb	r3, [r0, #4]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   150c8:	71c2      	strb	r2, [r0, #7]
	if (
   150ca:	b1e9      	cbz	r1, 15108 <ull_conn_rx+0x178>
	    !conn->llcp_enc.pause_tx &&
   150cc:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
	    conn->tx_head &&
   150d0:	079a      	lsls	r2, r3, #30
   150d2:	d419      	bmi.n	15108 <ull_conn_rx+0x178>
	    !conn->llcp_phy.pause_tx &&
   150d4:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   150d8:	07db      	lsls	r3, r3, #31
   150da:	d415      	bmi.n	15108 <ull_conn_rx+0x178>
		if (conn->tx_head == conn->tx_data) {
   150dc:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
   150e0:	4299      	cmp	r1, r3
		if (!conn->tx_ctrl) {
   150e2:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   150e6:	f000 855b 	beq.w	15ba0 <ull_conn_rx+0xc10>
		} else if (!conn->tx_ctrl) {
   150ea:	2b00      	cmp	r3, #0
   150ec:	f000 8574 	beq.w	15bd8 <ull_conn_rx+0xc48>
   150f0:	f8d4 11cc 	ldr.w	r1, [r4, #460]	; 0x1cc
	tx->next = conn->tx_ctrl_last->next;
   150f4:	680b      	ldr	r3, [r1, #0]
   150f6:	6003      	str	r3, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   150f8:	6008      	str	r0, [r1, #0]
	if (!tx->next) {
   150fa:	6801      	ldr	r1, [r0, #0]
	conn->tx_ctrl_last = tx;
   150fc:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   15100:	2900      	cmp	r1, #0
   15102:	d192      	bne.n	1502a <ull_conn_rx+0x9a>
   15104:	f000 bc43 	b.w	1598e <ull_conn_rx+0x9fe>
		if (!conn->tx_ctrl) {
   15108:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   1510c:	2b00      	cmp	r3, #0
   1510e:	f000 847f 	beq.w	15a10 <ull_conn_rx+0xa80>
	tx->next = conn->tx_ctrl_last->next;
   15112:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   15116:	681a      	ldr	r2, [r3, #0]
   15118:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   1511a:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   1511c:	6801      	ldr	r1, [r0, #0]
   1511e:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   15122:	2900      	cmp	r1, #0
   15124:	d181      	bne.n	1502a <ull_conn_rx+0x9a>
   15126:	f000 bc32 	b.w	1598e <ull_conn_rx+0x9fe>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1512a:	2201      	movs	r2, #1
   1512c:	711a      	strb	r2, [r3, #4]
		return 0;
   1512e:	2000      	movs	r0, #0
}
   15130:	4770      	bx	lr
			} else {
				struct pdu_data_llctrl *c = &pdu_rx->llctrl;
				struct pdu_data_llctrl_phy_req *p =
					&c->phy_req;

				conn->llcp_phy.state =
   15132:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
					LLCP_PHY_STATE_UPD;

				if (conn->llcp_phy.ack ==
   15136:	4281      	cmp	r1, r0
				conn->llcp_phy.state =
   15138:	f043 0303 	orr.w	r3, r3, #3
   1513c:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
				if (conn->llcp_phy.ack ==
   15140:	d10f      	bne.n	15162 <ull_conn_rx+0x1d2>
				    conn->llcp_phy.req) {
					conn->llcp_phy.ack--;

					conn->llcp_phy.cmd = 0U;

					conn->llcp_phy.tx =
   15142:	f8b4 21be 	ldrh.w	r2, [r4, #446]	; 0x1be
   15146:	4859      	ldr	r0, [pc, #356]	; (152ac <ull_conn_rx+0x31c>)
						conn->phy_pref_tx;
					conn->llcp_phy.rx =
						conn->phy_pref_rx;
   15148:	f894 31c0 	ldrb.w	r3, [r4, #448]	; 0x1c0
					conn->llcp_phy.tx =
   1514c:	4010      	ands	r0, r2
   1514e:	f240 42fc 	movw	r2, #1276	; 0x4fc
   15152:	ea02 0283 	and.w	r2, r2, r3, lsl #2
   15156:	4302      	orrs	r2, r0
					conn->llcp_phy.ack--;
   15158:	1e4b      	subs	r3, r1, #1
   1515a:	f884 31bd 	strb.w	r3, [r4, #445]	; 0x1bd
					conn->llcp_phy.tx =
   1515e:	f8a4 21be 	strh.w	r2, [r4, #446]	; 0x1be
				}

				conn->llcp_phy.tx &= p->rx_phys;
				conn->llcp_phy.rx &= p->tx_phys;
   15162:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
				conn->llcp_phy.tx &= p->rx_phys;
   15166:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
				conn->llcp_phy.rx &= p->tx_phys;
   1516a:	f896 1020 	ldrb.w	r1, [r6, #32]
				conn->llcp_phy.tx &= p->rx_phys;
   1516e:	f3c2 0082 	ubfx	r0, r2, #2, #3
   15172:	4003      	ands	r3, r0
				conn->llcp_phy.rx &= p->tx_phys;
   15174:	ea01 1152 	and.w	r1, r1, r2, lsr #5
				conn->llcp_phy.tx &= p->rx_phys;
   15178:	009b      	lsls	r3, r3, #2
   1517a:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   1517e:	f002 0203 	and.w	r2, r2, #3
   15182:	4313      	orrs	r3, r2

				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   15184:	f013 0f1c 	tst.w	r3, #28
				conn->llcp_phy.tx &= p->rx_phys;
   15188:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   1518c:	d002      	beq.n	15194 <ull_conn_rx+0x204>
   1518e:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   15192:	d105      	bne.n	151a0 <ull_conn_rx+0x210>
					conn->llcp_phy.tx = 0;
   15194:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   15198:	f003 0303 	and.w	r3, r3, #3
   1519c:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
					conn->llcp_phy.rx = 0;
				}

				/* pause data packet tx */
				conn->llcp_phy.pause_tx = 1U;
   151a0:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   151a4:	f043 0301 	orr.w	r3, r3, #1
   151a8:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf

				/* Mark for buffer for release */
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   151ac:	682b      	ldr	r3, [r5, #0]
   151ae:	2201      	movs	r2, #1
	int nack = 0;
   151b0:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   151b2:	711a      	strb	r2, [r3, #4]
}
   151b4:	b005      	add	sp, #20
   151b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
#if defined(CONFIG_BT_PERIPHERAL)
	case PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND:
	{
		uint8_t err;

		if (!conn->lll.role ||
   151ba:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   151be:	2b00      	cmp	r3, #0
   151c0:	f6bf af65 	bge.w	1508e <ull_conn_rx+0xfe>
   151c4:	7f73      	ldrb	r3, [r6, #29]
   151c6:	2b05      	cmp	r3, #5
   151c8:	f47f af61 	bne.w	1508e <ull_conn_rx+0xfe>
	if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
   151cc:	f896 1020 	ldrb.w	r1, [r6, #32]
   151d0:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   151d4:	ea41 0003 	orr.w	r0, r1, r3
   151d8:	f010 0007 	ands.w	r0, r0, #7
   151dc:	f040 876e 	bne.w	160bc <ull_conn_rx+0x112c>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   151e0:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   151e4:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   151e8:	428b      	cmp	r3, r1
   151ea:	f43f af1e 	beq.w	1502a <ull_conn_rx+0x9a>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   151ee:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   151f2:	f003 0303 	and.w	r3, r3, #3
   151f6:	2b02      	cmp	r3, #2
   151f8:	f47f af17 	bne.w	1502a <ull_conn_rx+0x9a>
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   151fc:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
   15200:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
		conn->llcp_phy.ack = conn->llcp_phy.req;
   15204:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
		conn->llcp_phy.pause_tx = 0U;
   15208:	f360 0300 	bfi	r3, r0, #0, #1
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   1520c:	4611      	mov	r1, r2
   1520e:	f362 1106 	bfi	r1, r2, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   15212:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
		if (!conn->llcp_phy.cmd) {
   15216:	f013 0304 	ands.w	r3, r3, #4
		conn->procedure_expire = 0U;
   1521a:	f8a4 00c8 	strh.w	r0, [r4, #200]	; 0xc8
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   1521e:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
   15222:	f3c2 0202 	ubfx	r2, r2, #0, #3
		if (!conn->llcp_phy.cmd) {
   15226:	f43f af0b 	beq.w	15040 <ull_conn_rx+0xb0>
		(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1522a:	682b      	ldr	r3, [r5, #0]
   1522c:	211a      	movs	r1, #26
   1522e:	7119      	strb	r1, [r3, #4]
		p->status = 0U;
   15230:	7730      	strb	r0, [r6, #28]
		p->tx = conn->lll.phy_tx;
   15232:	7772      	strb	r2, [r6, #29]
		p->rx = conn->lll.phy_rx;
   15234:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   15238:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1523c:	77b3      	strb	r3, [r6, #30]
		    PDU_DATA_LLCTRL_LEN(phy_upd_ind) != pdu_rx->len) {
			goto ull_conn_rx_unknown_rsp_send;
		}

		err = phy_upd_ind_recv(conn, link, rx, pdu_rx);
		if (err) {
   1523e:	e6f7      	b.n	15030 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(phy_req) != pdu_rx->len) {
   15240:	7f73      	ldrb	r3, [r6, #29]
   15242:	2b03      	cmp	r3, #3
   15244:	f47f af23 	bne.w	1508e <ull_conn_rx+0xfe>
		if (!conn->lll.role) {
   15248:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1524c:	2b00      	cmp	r3, #0
   1524e:	f2c0 8627 	blt.w	15ea0 <ull_conn_rx+0xf10>
			if ((conn->llcp_phy.ack !=
   15252:	f894 11bd 	ldrb.w	r1, [r4, #445]	; 0x1bd
			     conn->llcp_phy.req) &&
   15256:	f894 01bc 	ldrb.w	r0, [r4, #444]	; 0x1bc
			if ((conn->llcp_phy.ack !=
   1525a:	4281      	cmp	r1, r0
   1525c:	d007      	beq.n	1526e <ull_conn_rx+0x2de>
			      LLCP_PHY_STATE_RSP_WAIT) ||
   1525e:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   15262:	f003 0303 	and.w	r3, r3, #3
			     conn->llcp_phy.req) &&
   15266:	3b01      	subs	r3, #1
   15268:	2b02      	cmp	r3, #2
   1526a:	f240 87db 	bls.w	16224 <ull_conn_rx+0x1294>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   1526e:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   15272:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   15276:	1a9b      	subs	r3, r3, r2
   15278:	f003 0303 	and.w	r3, r3, #3
   1527c:	2b02      	cmp	r3, #2
   1527e:	f000 8716 	beq.w	160ae <ull_conn_rx+0x111e>
				     LLCP_ENCRYPTION)) ||
   15282:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   15286:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   1528a:	429a      	cmp	r2, r3
   1528c:	f43f af51 	beq.w	15132 <ull_conn_rx+0x1a2>
				nack = reject_ext_ind_send(conn, *rx,
   15290:	4631      	mov	r1, r6
   15292:	4620      	mov	r0, r4
   15294:	232a      	movs	r3, #42	; 0x2a
   15296:	2216      	movs	r2, #22
}
   15298:	b005      	add	sp, #20
   1529a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(conn, *rx,
   1529e:	f7fe bfd5 	b.w	1424c <reject_ext_ind_send>
   152a2:	bf00      	nop
   152a4:	20000768 	.word	0x20000768
   152a8:	20001914 	.word	0x20001914
   152ac:	fffffb03 	.word	0xfffffb03
		if (PDU_DATA_LLCTRL_LEN(length_req) != pdu_rx->len) {
   152b0:	7f73      	ldrb	r3, [r6, #29]
   152b2:	2b09      	cmp	r3, #9
   152b4:	f47f aeeb 	bne.w	1508e <ull_conn_rx+0xfe>
	if (pdu_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   152b8:	f1b8 0f14 	cmp.w	r8, #20
   152bc:	f000 84ce 	beq.w	15c5c <ull_conn_rx+0xccc>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   152c0:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
	if (/* Local idle, and Peer request then complete the Peer procedure
   152c4:	f894 11ad 	ldrb.w	r1, [r4, #429]	; 0x1ad
	eff_rx_octets = conn->lll.max_rx_octets;
   152c8:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
	eff_tx_octets = conn->lll.max_tx_octets;
   152cc:	f8b4 9058 	ldrh.w	r9, [r4, #88]	; 0x58
	eff_rx_time = conn->lll.max_rx_time;
   152d0:	f8b4 a05e 	ldrh.w	sl, [r4, #94]	; 0x5e
	eff_tx_time = conn->lll.max_tx_time;
   152d4:	f8b4 b05c 	ldrh.w	fp, [r4, #92]	; 0x5c
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   152d8:	9200      	str	r2, [sp, #0]
	if (/* Local idle, and Peer request then complete the Peer procedure
   152da:	4291      	cmp	r1, r2
	eff_rx_octets = conn->lll.max_rx_octets;
   152dc:	9301      	str	r3, [sp, #4]
	if (/* Local idle, and Peer request then complete the Peer procedure
   152de:	f001 810e 	beq.w	164fe <ull_conn_rx+0x156e>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   152e2:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
	struct node_tx *tx = NULL;
   152e6:	2100      	movs	r1, #0
	       tx) ||
   152e8:	f002 0207 	and.w	r2, r2, #7
   152ec:	2a02      	cmp	r2, #2
   152ee:	f000 84dd 	beq.w	15cac <ull_conn_rx+0xd1c>
   152f2:	f896 801f 	ldrb.w	r8, [r6, #31]
		if (pdu_rx->llctrl.opcode != PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) {
   152f6:	f1b8 0f15 	cmp.w	r8, #21
   152fa:	f43f ae98 	beq.w	1502e <ull_conn_rx+0x9e>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   152fe:	4608      	mov	r0, r1
   15300:	49b7      	ldr	r1, [pc, #732]	; (155e0 <ull_conn_rx+0x650>)
   15302:	f7f9 fd59 	bl	edb8 <mem_release>
			if (conn->llcp_length.state ==
   15306:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
			conn->common.txn_lock = 0U;
   1530a:	f894 20d8 	ldrb.w	r2, [r4, #216]	; 0xd8
			if (conn->llcp_length.state ==
   1530e:	f003 0307 	and.w	r3, r3, #7
			conn->common.txn_lock = 0U;
   15312:	f36f 0241 	bfc	r2, #1, #1
			if (conn->llcp_length.state ==
   15316:	2b04      	cmp	r3, #4
			conn->common.txn_lock = 0U;
   15318:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
			if (conn->llcp_length.state ==
   1531c:	f47f ae87 	bne.w	1502e <ull_conn_rx+0x9e>
				return -EBUSY;
   15320:	f06f 000f 	mvn.w	r0, #15
   15324:	e684      	b.n	15030 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(ping_rsp) != pdu_rx->len) {
   15326:	7f71      	ldrb	r1, [r6, #29]
   15328:	2901      	cmp	r1, #1
   1532a:	f47f aeb0 	bne.w	1508e <ull_conn_rx+0xfe>
		conn->procedure_expire = 0U;
   1532e:	2300      	movs	r3, #0
   15330:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   15334:	4618      	mov	r0, r3
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   15336:	7131      	strb	r1, [r6, #4]
		break;
   15338:	e67a      	b.n	15030 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(conn_param_req) != pdu_rx->len) {
   1533a:	7f73      	ldrb	r3, [r6, #29]
   1533c:	2b18      	cmp	r3, #24
   1533e:	f47f aea6 	bne.w	1508e <ull_conn_rx+0xfe>
		if (conn_upd_curr && (conn_upd_curr != conn)) {
   15342:	4fa8      	ldr	r7, [pc, #672]	; (155e4 <ull_conn_rx+0x654>)
   15344:	683b      	ldr	r3, [r7, #0]
   15346:	2b00      	cmp	r3, #0
   15348:	f000 8450 	beq.w	15bec <ull_conn_rx+0xc5c>
   1534c:	429c      	cmp	r4, r3
   1534e:	f000 844d 	beq.w	15bec <ull_conn_rx+0xc5c>
			nack = reject_ext_ind_send(conn, *rx,
   15352:	4631      	mov	r1, r6
   15354:	4620      	mov	r0, r4
   15356:	2320      	movs	r3, #32
   15358:	220f      	movs	r2, #15
   1535a:	e79d      	b.n	15298 <ull_conn_rx+0x308>
		if (PDU_DATA_LLCTRL_LEN(reject_ind) != pdu_rx->len) {
   1535c:	7f73      	ldrb	r3, [r6, #29]
   1535e:	2b02      	cmp	r3, #2
   15360:	f47f ae95 	bne.w	1508e <ull_conn_rx+0xfe>
	} else if ((conn->llcp_ack != conn->llcp_req) &&
   15364:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   15368:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   1536c:	429a      	cmp	r2, r3
   1536e:	d004      	beq.n	1537a <ull_conn_rx+0x3ea>
   15370:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
   15374:	2a03      	cmp	r2, #3
   15376:	f000 875a 	beq.w	1622e <ull_conn_rx+0x129e>
	} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   1537a:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
   1537e:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   15382:	4293      	cmp	r3, r2
   15384:	f000 8708 	beq.w	16198 <ull_conn_rx+0x1208>
		rej_ext_ind->error_code = rej_ind->error_code;
   15388:	f896 1020 	ldrb.w	r1, [r6, #32]
   1538c:	f886 1021 	strb.w	r1, [r6, #33]	; 0x21
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   15390:	2923      	cmp	r1, #35	; 0x23
   15392:	d012      	beq.n	153ba <ull_conn_rx+0x42a>
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   15394:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
   15398:	f894 01bf 	ldrb.w	r0, [r4, #447]	; 0x1bf
		conn->llcp_phy.ack = conn->llcp_phy.req;
   1539c:	f884 21bd 	strb.w	r2, [r4, #445]	; 0x1bd
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   153a0:	f3c3 0202 	ubfx	r2, r3, #0, #3
   153a4:	f362 1306 	bfi	r3, r2, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   153a8:	f36f 0000 	bfc	r0, #0, #1
		conn->procedure_expire = 0U;
   153ac:	2200      	movs	r2, #0
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   153ae:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
   153b2:	f884 01bf 	strb.w	r0, [r4, #447]	; 0x1bf
		conn->procedure_expire = 0U;
   153b6:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	if (!conn->llcp_phy.cmd) {
   153ba:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   153be:	0758      	lsls	r0, r3, #29
   153c0:	f57f ae33 	bpl.w	1502a <ull_conn_rx+0x9a>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   153c4:	231a      	movs	r3, #26
	p->status = rej_ext_ind->error_code;
   153c6:	7731      	strb	r1, [r6, #28]
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   153c8:	7133      	strb	r3, [r6, #4]
	p->tx = conn->lll.phy_tx;
   153ca:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   153ce:	f3c3 0302 	ubfx	r3, r3, #0, #3
   153d2:	7773      	strb	r3, [r6, #29]
	p->rx = conn->lll.phy_rx;
   153d4:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   153d8:	f3c3 0302 	ubfx	r3, r3, #0, #3
   153dc:	77b3      	strb	r3, [r6, #30]
	int nack = 0;
   153de:	2000      	movs	r0, #0
   153e0:	e626      	b.n	15030 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(version_ind) != pdu_rx->len) {
   153e2:	7f75      	ldrb	r5, [r6, #29]
   153e4:	2d06      	cmp	r5, #6
   153e6:	f47f ae52 	bne.w	1508e <ull_conn_rx+0xfe>
	if (!conn->llcp_version.tx) {
   153ea:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   153ee:	07df      	lsls	r7, r3, #31
   153f0:	f140 85e8 	bpl.w	15fc4 <ull_conn_rx+0x1034>
	} else if (!conn->llcp_version.rx) {
   153f4:	f013 0302 	ands.w	r3, r3, #2
   153f8:	f47f ae17 	bne.w	1502a <ull_conn_rx+0x9a>
		conn->llcp_version.ack = conn->llcp_version.req;
   153fc:	f894 2138 	ldrb.w	r2, [r4, #312]	; 0x138
		conn->procedure_expire = 0U;
   15400:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
		conn->llcp_version.ack = conn->llcp_version.req;
   15404:	f884 2139 	strb.w	r2, [r4, #313]	; 0x139
	conn->llcp_version.version_number = v->version_number;
   15408:	f896 3020 	ldrb.w	r3, [r6, #32]
   1540c:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   15410:	f896 1022 	ldrb.w	r1, [r6, #34]	; 0x22
   15414:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
	conn->llcp_version.rx = 1U;
   15418:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   1541c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   15420:	f8a4 213c 	strh.w	r2, [r4, #316]	; 0x13c
		sys_le16_to_cpu(v->sub_version_number);
   15424:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
   15428:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
	conn->llcp_version.rx = 1U;
   1542c:	f043 0302 	orr.w	r3, r3, #2
		sys_le16_to_cpu(v->sub_version_number);
   15430:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_version.sub_version_number =
   15434:	f8a4 213e 	strh.w	r2, [r4, #318]	; 0x13e
	conn->llcp_version.rx = 1U;
   15438:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
	return 0;
   1543c:	2000      	movs	r0, #0
   1543e:	e5f7      	b.n	15030 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(ping_req) != pdu_rx->len) {
   15440:	7f77      	ldrb	r7, [r6, #29]
   15442:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
   15446:	2f01      	cmp	r7, #1
   15448:	f000 0502 	and.w	r5, r0, #2
   1544c:	f47f ae23 	bne.w	15096 <ull_conn_rx+0x106>
	if (conn->common.txn_lock) {
   15450:	2d00      	cmp	r5, #0
   15452:	f040 8628 	bne.w	160a6 <ull_conn_rx+0x1116>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   15456:	4862      	ldr	r0, [pc, #392]	; (155e0 <ull_conn_rx+0x650>)
   15458:	f7f9 fc98 	bl	ed8c <mem_acquire>
	if (!tx) {
   1545c:	4601      	mov	r1, r0
   1545e:	2800      	cmp	r0, #0
   15460:	f000 838f 	beq.w	15b82 <ull_conn_rx+0xbf2>
	conn->common.txn_lock = 1U;
   15464:	f894 20d8 	ldrb.w	r2, [r4, #216]	; 0xd8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   15468:	7903      	ldrb	r3, [r0, #4]
	conn->common.txn_lock = 1U;
   1546a:	f042 0202 	orr.w	r2, r2, #2
   1546e:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   15472:	f043 0303 	orr.w	r3, r3, #3
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   15476:	2213      	movs	r2, #19
	pdu_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
   15478:	7147      	strb	r7, [r0, #5]
	ctrl_tx_sec_enqueue(conn, tx);
   1547a:	4620      	mov	r0, r4
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1547c:	710b      	strb	r3, [r1, #4]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   1547e:	71ca      	strb	r2, [r1, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   15480:	f7fe ffca 	bl	14418 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   15484:	7137      	strb	r7, [r6, #4]
	return 0;
   15486:	4628      	mov	r0, r5
   15488:	e5d2      	b.n	15030 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(reject_ext_ind) != pdu_rx->len) {
   1548a:	7f73      	ldrb	r3, [r6, #29]
   1548c:	2b03      	cmp	r3, #3
   1548e:	f47f adfe 	bne.w	1508e <ull_conn_rx+0xfe>
	switch (rej_ext_ind->reject_opcode) {
   15492:	f896 3020 	ldrb.w	r3, [r6, #32]
   15496:	3b03      	subs	r3, #3
   15498:	2b13      	cmp	r3, #19
   1549a:	f63f adc6 	bhi.w	1502a <ull_conn_rx+0x9a>
   1549e:	a201      	add	r2, pc, #4	; (adr r2, 154a4 <ull_conn_rx+0x514>)
   154a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   154a4:	00015b13 	.word	0x00015b13
   154a8:	0001502b 	.word	0x0001502b
   154ac:	0001502b 	.word	0x0001502b
   154b0:	0001502b 	.word	0x0001502b
   154b4:	0001502b 	.word	0x0001502b
   154b8:	0001502b 	.word	0x0001502b
   154bc:	0001502b 	.word	0x0001502b
   154c0:	0001502b 	.word	0x0001502b
   154c4:	0001502b 	.word	0x0001502b
   154c8:	0001502b 	.word	0x0001502b
   154cc:	0001502b 	.word	0x0001502b
   154d0:	0001502b 	.word	0x0001502b
   154d4:	00015aad 	.word	0x00015aad
   154d8:	0001502b 	.word	0x0001502b
   154dc:	0001502b 	.word	0x0001502b
   154e0:	0001502b 	.word	0x0001502b
   154e4:	0001502b 	.word	0x0001502b
   154e8:	00015a23 	.word	0x00015a23
   154ec:	0001502b 	.word	0x0001502b
   154f0:	00015a61 	.word	0x00015a61
		if (!conn->lll.role ||
   154f4:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   154f8:	2b00      	cmp	r3, #0
   154fa:	f6bf adc8 	bge.w	1508e <ull_conn_rx+0xfe>
   154fe:	7f75      	ldrb	r5, [r6, #29]
   15500:	2d01      	cmp	r5, #1
   15502:	f47f adc4 	bne.w	1508e <ull_conn_rx+0xfe>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   15506:	4836      	ldr	r0, [pc, #216]	; (155e0 <ull_conn_rx+0x650>)
   15508:	f7f9 fc40 	bl	ed8c <mem_acquire>
		if (!tx) {
   1550c:	4601      	mov	r1, r0
   1550e:	2800      	cmp	r0, #0
   15510:	f000 8337 	beq.w	15b82 <ull_conn_rx+0xbf2>
	conn->llcp_enc.pause_rx = 1U;
   15514:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
	conn->lll.enc_rx = 0;
   15518:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
	conn->llcp_enc.pause_rx = 1U;
   1551c:	f023 0305 	bic.w	r3, r3, #5
   15520:	f043 0305 	orr.w	r3, r3, #5
	conn->lll.enc_rx = 0;
   15524:	f36f 02c3 	bfc	r2, #3, #1
	conn->llcp_enc.pause_rx = 1U;
   15528:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
	conn->lll.enc_rx = 0;
   1552c:	f884 207a 	strb.w	r2, [r4, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15530:	7902      	ldrb	r2, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   15532:	7145      	strb	r5, [r0, #5]
	    conn->tx_head &&
   15534:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15538:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   1553c:	200b      	movs	r0, #11
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1553e:	710a      	strb	r2, [r1, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   15540:	71c8      	strb	r0, [r1, #7]
	if (
   15542:	2b00      	cmp	r3, #0
   15544:	f000 840f 	beq.w	15d66 <ull_conn_rx+0xdd6>
	    !conn->llcp_enc.pause_tx &&
   15548:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   1554c:	0795      	lsls	r5, r2, #30
   1554e:	f100 840a 	bmi.w	15d66 <ull_conn_rx+0xdd6>
	    !conn->llcp_phy.pause_tx &&
   15552:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   15556:	07d0      	lsls	r0, r2, #31
   15558:	f100 8405 	bmi.w	15d66 <ull_conn_rx+0xdd6>
		if (conn->tx_head == conn->tx_data) {
   1555c:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   15560:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   15562:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   15566:	f000 87e1 	beq.w	1652c <ull_conn_rx+0x159c>
		} else if (!conn->tx_ctrl) {
   1556a:	2a00      	cmp	r2, #0
   1556c:	f000 87d4 	beq.w	16518 <ull_conn_rx+0x1588>
	tx->next = conn->tx_ctrl_last->next;
   15570:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   15574:	681a      	ldr	r2, [r3, #0]
   15576:	600a      	str	r2, [r1, #0]
	conn->tx_ctrl_last->next = tx;
   15578:	6019      	str	r1, [r3, #0]
	conn->tx_ctrl_last = tx;
   1557a:	f8c4 11cc 	str.w	r1, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1557e:	680b      	ldr	r3, [r1, #0]
   15580:	2b00      	cmp	r3, #0
   15582:	f47f ad52 	bne.w	1502a <ull_conn_rx+0x9a>
		conn->tx_data_last = tx;
   15586:	f8c4 11d4 	str.w	r1, [r4, #468]	; 0x1d4
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1558a:	e54e      	b.n	1502a <ull_conn_rx+0x9a>
		if ((!IS_ENABLED(CONFIG_BT_CTLR_SLAVE_FEAT_REQ) &&
   1558c:	7f73      	ldrb	r3, [r6, #29]
   1558e:	2b09      	cmp	r3, #9
   15590:	f47f ad7d 	bne.w	1508e <ull_conn_rx+0xfe>
   15594:	6a35      	ldr	r5, [r6, #32]
   15596:	6a73      	ldr	r3, [r6, #36]	; 0x24
	feat &= LL_FEAT_BIT_MASK;
   15598:	4913      	ldr	r1, [pc, #76]	; (155e8 <ull_conn_rx+0x658>)
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   1559a:	e9d4 204a 	ldrd	r2, r0, [r4, #296]	; 0x128
	feat &= LL_FEAT_BIT_MASK;
   1559e:	4329      	orrs	r1, r5
   155a0:	f003 030f 	and.w	r3, r3, #15
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   155a4:	400a      	ands	r2, r1
   155a6:	4003      	ands	r3, r0
   155a8:	e9c4 234a 	strd	r2, r3, [r4, #296]	; 0x128
   155ac:	6a33      	ldr	r3, [r6, #32]
   155ae:	6a75      	ldr	r5, [r6, #36]	; 0x24
	conn->common.fex_valid = 1U;
   155b0:	f894 20d8 	ldrb.w	r2, [r4, #216]	; 0xd8
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   155b4:	490d      	ldr	r1, [pc, #52]	; (155ec <ull_conn_rx+0x65c>)
	conn->llcp_feature.ack = conn->llcp_feature.req;
   155b6:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
   155ba:	f884 0121 	strb.w	r0, [r4, #289]	; 0x121
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   155be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   155c2:	4319      	orrs	r1, r3
   155c4:	f005 050f 	and.w	r5, r5, #15
	feat &= LL_FEAT_BIT_MASK;
   155c8:	2300      	movs	r3, #0
	conn->common.fex_valid = 1U;
   155ca:	f042 0201 	orr.w	r2, r2, #1
	conn->llcp_feature.features_peer =
   155ce:	e9c4 154c 	strd	r1, r5, [r4, #304]	; 0x130
	conn->common.fex_valid = 1U;
   155d2:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
	conn->procedure_expire = 0U;
   155d6:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   155da:	4618      	mov	r0, r3
}
   155dc:	e528      	b.n	15030 <ull_conn_rx+0xa0>
   155de:	bf00      	nop
   155e0:	20001914 	.word	0x20001914
   155e4:	20001890 	.word	0x20001890
   155e8:	087830d0 	.word	0x087830d0
   155ec:	08783050 	.word	0x08783050
		if (!conn->lll.role ||
   155f0:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   155f4:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
   155f8:	2b00      	cmp	r3, #0
   155fa:	f000 0502 	and.w	r5, r0, #2
   155fe:	f6bf ad4a 	bge.w	15096 <ull_conn_rx+0x106>
   15602:	7f77      	ldrb	r7, [r6, #29]
   15604:	2f09      	cmp	r7, #9
   15606:	f47f ad46 	bne.w	15096 <ull_conn_rx+0x106>
	if (conn->common.txn_lock) {
   1560a:	2d00      	cmp	r5, #0
   1560c:	f47f ad0d 	bne.w	1502a <ull_conn_rx+0x9a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   15610:	48e1      	ldr	r0, [pc, #900]	; (15998 <ull_conn_rx+0xa08>)
   15612:	f7f9 fbbb 	bl	ed8c <mem_acquire>
	if (!tx) {
   15616:	4601      	mov	r1, r0
   15618:	2800      	cmp	r0, #0
   1561a:	f000 82b2 	beq.w	15b82 <ull_conn_rx+0xbf2>
	conn->common.txn_lock = 1U;
   1561e:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
	feat &= LL_FEAT_BIT_MASK;
   15622:	48de      	ldr	r0, [pc, #888]	; (1599c <ull_conn_rx+0xa0c>)
	conn->common.txn_lock = 1U;
   15624:	f043 0302 	orr.w	r3, r3, #2
   15628:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
   1562c:	6a32      	ldr	r2, [r6, #32]
   1562e:	6a73      	ldr	r3, [r6, #36]	; 0x24
	feat &= LL_FEAT_BIT_MASK;
   15630:	4310      	orrs	r0, r2
   15632:	f003 020f 	and.w	r2, r3, #15
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   15636:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1563a:	4018      	ands	r0, r3
   1563c:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
   15640:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
   15644:	4013      	ands	r3, r2
   15646:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
   1564a:	f8d6 c020 	ldr.w	ip, [r6, #32]
   1564e:	6a72      	ldr	r2, [r6, #36]	; 0x24
	conn->common.fex_valid = 1U;
   15650:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   15654:	48d2      	ldr	r0, [pc, #840]	; (159a0 <ull_conn_rx+0xa10>)
   15656:	f02c 0c80 	bic.w	ip, ip, #128	; 0x80
   1565a:	ea4c 0000 	orr.w	r0, ip, r0
   1565e:	f002 020f 	and.w	r2, r2, #15
	conn->common.fex_valid = 1U;
   15662:	f043 0301 	orr.w	r3, r3, #1
	conn->llcp_feature.features_peer =
   15666:	e9c4 024c 	strd	r0, r2, [r4, #304]	; 0x130
	conn->common.fex_valid = 1U;
   1566a:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
__ssp_bos_icheck3(memset, void *, int)
   1566e:	608d      	str	r5, [r1, #8]
   15670:	60cd      	str	r5, [r1, #12]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   15672:	714f      	strb	r7, [r1, #5]
	feat_result &= 0xFF;
   15674:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   15678:	790b      	ldrb	r3, [r1, #4]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   1567a:	71cf      	strb	r7, [r1, #7]
	feat_result &= 0xFF;
   1567c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   15680:	f043 0303 	orr.w	r3, r3, #3
	dst[1] = val >> 8;
   15684:	f04f 0c41 	mov.w	ip, #65	; 0x41
	dst[0] = val;
   15688:	2701      	movs	r7, #1
	ctrl_tx_sec_enqueue(conn, tx);
   1568a:	4620      	mov	r0, r4
   1568c:	720a      	strb	r2, [r1, #8]
	dst[1] = val >> 8;
   1568e:	72cd      	strb	r5, [r1, #11]
	dst[0] = val;
   15690:	730d      	strb	r5, [r1, #12]
	dst[1] = val >> 8;
   15692:	734d      	strb	r5, [r1, #13]
	dst[0] = val;
   15694:	738d      	strb	r5, [r1, #14]
	dst[1] = val >> 8;
   15696:	73cd      	strb	r5, [r1, #15]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   15698:	710b      	strb	r3, [r1, #4]
   1569a:	f881 c009 	strb.w	ip, [r1, #9]
	dst[0] = val;
   1569e:	728f      	strb	r7, [r1, #10]
	ctrl_tx_sec_enqueue(conn, tx);
   156a0:	f7fe feba 	bl	14418 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   156a4:	7137      	strb	r7, [r6, #4]
	return 0;
   156a6:	4628      	mov	r0, r5
   156a8:	e4c2      	b.n	15030 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(unknown_rsp) != pdu_rx->len) {
   156aa:	7f73      	ldrb	r3, [r6, #29]
   156ac:	2b02      	cmp	r3, #2
   156ae:	f47f acee 	bne.w	1508e <ull_conn_rx+0xfe>
		} else if ((conn->llcp_conn_param.ack !=
   156b2:	f894 1185 	ldrb.w	r1, [r4, #389]	; 0x185
   156b6:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   156ba:	f896 2020 	ldrb.w	r2, [r6, #32]
   156be:	4299      	cmp	r1, r3
   156c0:	d002      	beq.n	156c8 <ull_conn_rx+0x738>
			    conn->llcp_conn_param.req) &&
   156c2:	2a0f      	cmp	r2, #15
   156c4:	f000 84a4 	beq.w	16010 <ull_conn_rx+0x1080>
		} else if ((conn->llcp_length.req != conn->llcp_length.ack) &&
   156c8:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
   156cc:	f894 11ad 	ldrb.w	r1, [r4, #429]	; 0x1ad
   156d0:	4299      	cmp	r1, r3
   156d2:	d002      	beq.n	156da <ull_conn_rx+0x74a>
   156d4:	2a14      	cmp	r2, #20
   156d6:	f000 8595 	beq.w	16204 <ull_conn_rx+0x1274>
		} else if ((conn->llcp_phy.req != conn->llcp_phy.ack) &&
   156da:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   156de:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   156e2:	428b      	cmp	r3, r1
   156e4:	d002      	beq.n	156ec <ull_conn_rx+0x75c>
   156e6:	2a16      	cmp	r2, #22
   156e8:	f000 85c2 	beq.w	16270 <ull_conn_rx+0x12e0>
			switch (llctrl->unknown_rsp.type) {
   156ec:	2a12      	cmp	r2, #18
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   156ee:	bf04      	itt	eq
   156f0:	2301      	moveq	r3, #1
   156f2:	7133      	strbeq	r3, [r6, #4]
		conn->procedure_expire = 0U;
   156f4:	2300      	movs	r3, #0
   156f6:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   156fa:	4618      	mov	r0, r3
		break;
   156fc:	e498      	b.n	15030 <ull_conn_rx+0xa0>
		if (!conn->lll.role ||
   156fe:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   15702:	2b00      	cmp	r3, #0
   15704:	f6bf acc3 	bge.w	1508e <ull_conn_rx+0xfe>
   15708:	7f73      	ldrb	r3, [r6, #29]
   1570a:	2b0c      	cmp	r3, #12
   1570c:	f47f acbf 	bne.w	1508e <ull_conn_rx+0xfe>
	instant = sys_le16_to_cpu(pdu->llctrl.conn_update_ind.instant);
   15710:	f8b6 0029 	ldrh.w	r0, [r6, #41]	; 0x29
	if (((instant - conn->lll.event_counter) & 0xFFFF) > 0x7FFF) {
   15714:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   15716:	1ac3      	subs	r3, r0, r3
   15718:	041b      	lsls	r3, r3, #16
   1571a:	f100 8598 	bmi.w	1624e <ull_conn_rx+0x12be>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   1571e:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   15722:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   15726:	1a9b      	subs	r3, r3, r2
   15728:	f003 0303 	and.w	r3, r3, #3
   1572c:	2b02      	cmp	r3, #2
   1572e:	f000 862b 	beq.w	16388 <ull_conn_rx+0x13f8>
	if (!conn_upd_curr) {
   15732:	4b9c      	ldr	r3, [pc, #624]	; (159a4 <ull_conn_rx+0xa14>)
   15734:	681a      	ldr	r2, [r3, #0]
   15736:	2a00      	cmp	r2, #0
   15738:	f000 8638 	beq.w	163ac <ull_conn_rx+0x141c>
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   1573c:	f896 3020 	ldrb.w	r3, [r6, #32]
   15740:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) *
   15744:	f8b6 1021 	ldrh.w	r1, [r6, #33]	; 0x21
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   15748:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) *
   1574c:	f240 42e2 	movw	r2, #1250	; 0x4e2
   15750:	fb02 f201 	mul.w	r2, r2, r1
	conn->llcp_cu.win_offset_us =
   15754:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.interval);
   15758:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
   1575c:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
   15760:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_cu.interval =
   15764:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.latency);
   15768:	f896 1026 	ldrb.w	r1, [r6, #38]	; 0x26
   1576c:	f896 2025 	ldrb.w	r2, [r6, #37]	; 0x25
   15770:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_cu.latency =
   15774:	f8a4 2112 	strh.w	r2, [r4, #274]	; 0x112
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   15778:	f896 1027 	ldrb.w	r1, [r6, #39]	; 0x27
	conn->llcp_cu.ack--;
   1577c:	f894 210d 	ldrb.w	r2, [r4, #269]	; 0x10d
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   15780:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
	conn->llcp.conn_upd.instant = instant;
   15784:	f8a4 00e8 	strh.w	r0, [r4, #232]	; 0xe8
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   15788:	f023 030f 	bic.w	r3, r3, #15
	link->mem = conn->llcp_rx;
   1578c:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   15790:	f043 0308 	orr.w	r3, r3, #8
	conn->llcp_cu.ack--;
   15794:	3a01      	subs	r2, #1
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   15796:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
	conn->llcp_cu.ack--;
   1579a:	f884 210d 	strb.w	r2, [r4, #269]	; 0x10d
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   1579e:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
	conn->llcp_cu.timeout =
   157a2:	f8a4 1114 	strh.w	r1, [r4, #276]	; 0x114
	link->mem = conn->llcp_rx;
   157a6:	6078      	str	r0, [r7, #4]
	(*rx)->hdr.link = link;
   157a8:	682b      	ldr	r3, [r5, #0]
   157aa:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
   157ac:	682b      	ldr	r3, [r5, #0]
   157ae:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
	*rx = NULL;
   157b2:	2300      	movs	r3, #0
   157b4:	602b      	str	r3, [r5, #0]
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   157b6:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   157ba:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   157be:	4293      	cmp	r3, r2
   157c0:	d098      	beq.n	156f4 <ull_conn_rx+0x764>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
   157c2:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   157c6:	f003 0307 	and.w	r3, r3, #7
   157ca:	2b04      	cmp	r3, #4
   157cc:	d192      	bne.n	156f4 <ull_conn_rx+0x764>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   157ce:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
		if (err) {
   157d2:	e78f      	b.n	156f4 <ull_conn_rx+0x764>
		((!conn->llcp_enc.refresh &&
   157d4:	f1b8 0f07 	cmp.w	r8, #7
   157d8:	f43f af67 	beq.w	156aa <ull_conn_rx+0x71a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
   157dc:	f1b8 0f02 	cmp.w	r8, #2
   157e0:	f040 81c5 	bne.w	15b6e <ull_conn_rx+0xbde>
		if (PDU_DATA_LLCTRL_LEN(terminate_ind) != pdu_rx->len) {
   157e4:	7f73      	ldrb	r3, [r6, #29]
   157e6:	2b02      	cmp	r3, #2
   157e8:	f47f ac51 	bne.w	1508e <ull_conn_rx+0xfe>
	conn->llcp_terminate.reason_peer = pdu->llctrl.terminate_ind.error_code;
   157ec:	f896 3020 	ldrb.w	r3, [r6, #32]
   157f0:	f884 3143 	strb.w	r3, [r4, #323]	; 0x143
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   157f4:	2301      	movs	r3, #1
   157f6:	7133      	strb	r3, [r6, #4]
	int nack = 0;
   157f8:	2000      	movs	r0, #0
}
   157fa:	e419      	b.n	15030 <ull_conn_rx+0xa0>
		if (!conn->lll.role ||
   157fc:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   15800:	2b00      	cmp	r3, #0
   15802:	f6bf ac44 	bge.w	1508e <ull_conn_rx+0xfe>
   15806:	7f73      	ldrb	r3, [r6, #29]
   15808:	2b08      	cmp	r3, #8
   1580a:	f47f ac40 	bne.w	1508e <ull_conn_rx+0xfe>
	instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
   1580e:	f8b6 0025 	ldrh.w	r0, [r6, #37]	; 0x25
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   15812:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   15814:	1ac3      	subs	r3, r0, r3
   15816:	041f      	lsls	r7, r3, #16
   15818:	f100 8519 	bmi.w	1624e <ull_conn_rx+0x12be>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   1581c:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   15820:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   15824:	1a9b      	subs	r3, r3, r2
   15826:	f003 0303 	and.w	r3, r3, #3
   1582a:	2b02      	cmp	r3, #2
   1582c:	f000 85ac 	beq.w	16388 <ull_conn_rx+0x13f8>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   15830:	4633      	mov	r3, r6
	conn->llcp.chan_map.initiate = 0U;
   15832:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   15836:	f853 5f20 	ldr.w	r5, [r3, #32]!
   1583a:	f8c4 50e9 	str.w	r5, [r4, #233]	; 0xe9
   1583e:	791b      	ldrb	r3, [r3, #4]
   15840:	f884 30ed 	strb.w	r3, [r4, #237]	; 0xed
	conn->llcp_ack -= 2U;
   15844:	3a02      	subs	r2, #2
	conn->llcp.chan_map.initiate = 0U;
   15846:	f36f 0100 	bfc	r1, #0, #1
	conn->llcp_type = LLCP_CHAN_MAP;
   1584a:	2502      	movs	r5, #2
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1584c:	2301      	movs	r3, #1
	conn->llcp.chan_map.instant = instant;
   1584e:	f8a4 00ee 	strh.w	r0, [r4, #238]	; 0xee
	conn->llcp_ack -= 2U;
   15852:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
	conn->llcp.chan_map.initiate = 0U;
   15856:	f884 10e8 	strb.w	r1, [r4, #232]	; 0xe8
	conn->llcp_type = LLCP_CHAN_MAP;
   1585a:	f884 50e6 	strb.w	r5, [r4, #230]	; 0xe6
	int nack = 0;
   1585e:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   15860:	7133      	strb	r3, [r6, #4]
		if (err) {
   15862:	f7ff bbe5 	b.w	15030 <ull_conn_rx+0xa0>
		if (!conn->lll.role ||
   15866:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1586a:	2b00      	cmp	r3, #0
   1586c:	f6bf ac0f 	bge.w	1508e <ull_conn_rx+0xfe>
   15870:	7f73      	ldrb	r3, [r6, #29]
   15872:	2b17      	cmp	r3, #23
   15874:	f47f ac0b 	bne.w	1508e <ull_conn_rx+0xfe>
		if (unlikely(((conn->llcp_req - conn->llcp_ack) & 0x03) ==
   15878:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   1587c:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   15880:	1a9b      	subs	r3, r3, r2
   15882:	f003 0303 	and.w	r3, r3, #3
   15886:	2b02      	cmp	r3, #2
   15888:	f000 862c 	beq.w	164e4 <ull_conn_rx+0x1554>
   1588c:	4633      	mov	r3, r6
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   1588e:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
   15892:	f853 1f20 	ldr.w	r1, [r3, #32]!
   15896:	685b      	ldr	r3, [r3, #4]
   15898:	f8c4 316d 	str.w	r3, [r4, #365]	; 0x16d
   1589c:	f8c4 1169 	str.w	r1, [r4, #361]	; 0x169
		conn->llcp_enc.ediv[0] = pdu_rx->llctrl.enc_req.ediv[0];
   158a0:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
   158a4:	f884 3167 	strb.w	r3, [r4, #359]	; 0x167
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
   158a8:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
   158ac:	f884 3168 	strb.w	r3, [r4, #360]	; 0x168
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   158b0:	6829      	ldr	r1, [r5, #0]
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   158b2:	2301      	movs	r3, #1
   158b4:	f363 0201 	bfi	r2, r3, #0, #2
   158b8:	f884 20f4 	strb.w	r2, [r4, #244]	; 0xf4
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   158bc:	710b      	strb	r3, [r1, #4]
		conn->llcp_ack -= 2U;
   158be:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
		conn->llcp_enc.pause_rx = 1U;
   158c2:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
		conn->procedure_expire = conn->procedure_reload;
   158c6:	f8b4 10c6 	ldrh.w	r1, [r4, #198]	; 0xc6
		conn->llcp_ack -= 2U;
   158ca:	3a02      	subs	r2, #2
   158cc:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
		conn->llcp_type = LLCP_ENCRYPTION;
   158d0:	2003      	movs	r0, #3
   158d2:	4632      	mov	r2, r6
   158d4:	f884 00e6 	strb.w	r0, [r4, #230]	; 0xe6
   158d8:	f852 0f2a 	ldr.w	r0, [r2, #42]!
   158dc:	6852      	ldr	r2, [r2, #4]
   158de:	f8c4 20fa 	str.w	r2, [r4, #250]	; 0xfa
   158e2:	f8c4 00f6 	str.w	r0, [r4, #246]	; 0xf6
   158e6:	f8d6 2032 	ldr.w	r2, [r6, #50]	; 0x32
   158ea:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
		conn->llcp_enc.pause_rx = 1U;
   158ee:	f043 0301 	orr.w	r3, r3, #1
   158f2:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
		conn->procedure_expire = conn->procedure_reload;
   158f6:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
	int nack = 0;
   158fa:	2000      	movs	r0, #0
		break;
   158fc:	f7ff bb98 	b.w	15030 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   15900:	7f73      	ldrb	r3, [r6, #29]
   15902:	2b01      	cmp	r3, #1
   15904:	f47f abc3 	bne.w	1508e <ull_conn_rx+0xfe>
	} else if (!conn->lll.role) {
   15908:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1590c:	2b00      	cmp	r3, #0
   1590e:	f2c0 815b 	blt.w	15bc8 <ull_conn_rx+0xc38>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   15912:	4821      	ldr	r0, [pc, #132]	; (15998 <ull_conn_rx+0xa08>)
   15914:	f7f9 fa3a 	bl	ed8c <mem_acquire>
		if (!tx) {
   15918:	2800      	cmp	r0, #0
   1591a:	f000 8132 	beq.w	15b82 <ull_conn_rx+0xbf2>
	conn->llcp_enc.pause_rx = 1U;
   1591e:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	conn->lll.enc_rx = 0;
   15922:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15926:	7902      	ldrb	r2, [r0, #4]
	conn->llcp_enc.pause_rx = 1U;
   15928:	f041 0101 	orr.w	r1, r1, #1
   1592c:	f884 1166 	strb.w	r1, [r4, #358]	; 0x166
	conn->lll.enc_rx = 0;
   15930:	f023 0318 	bic.w	r3, r3, #24
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   15934:	2101      	movs	r1, #1
	conn->lll.enc_rx = 0;
   15936:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   1593a:	7141      	strb	r1, [r0, #5]
	    conn->tx_head &&
   1593c:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15940:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   15944:	210b      	movs	r1, #11
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15946:	7102      	strb	r2, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   15948:	71c1      	strb	r1, [r0, #7]
	if (
   1594a:	2b00      	cmp	r3, #0
   1594c:	f000 817b 	beq.w	15c46 <ull_conn_rx+0xcb6>
	    !conn->llcp_enc.pause_tx &&
   15950:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   15954:	0791      	lsls	r1, r2, #30
   15956:	f100 8176 	bmi.w	15c46 <ull_conn_rx+0xcb6>
	    !conn->llcp_phy.pause_tx &&
   1595a:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   1595e:	07d2      	lsls	r2, r2, #31
   15960:	f100 8171 	bmi.w	15c46 <ull_conn_rx+0xcb6>
		if (conn->tx_head == conn->tx_data) {
   15964:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   15968:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   1596a:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   1596e:	f000 863f 	beq.w	165f0 <ull_conn_rx+0x1660>
		} else if (!conn->tx_ctrl) {
   15972:	2a00      	cmp	r2, #0
   15974:	f000 8633 	beq.w	165de <ull_conn_rx+0x164e>
	tx->next = conn->tx_ctrl_last->next;
   15978:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1597c:	681a      	ldr	r2, [r3, #0]
   1597e:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   15980:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   15982:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   15986:	6803      	ldr	r3, [r0, #0]
   15988:	2b00      	cmp	r3, #0
   1598a:	f47f ab4e 	bne.w	1502a <ull_conn_rx+0x9a>
		conn->tx_data_last = tx;
   1598e:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   15992:	f7ff bb4a 	b.w	1502a <ull_conn_rx+0x9a>
   15996:	bf00      	nop
   15998:	20001914 	.word	0x20001914
   1599c:	087830d0 	.word	0x087830d0
   159a0:	08783050 	.word	0x08783050
   159a4:	20001890 	.word	0x20001890
		if (PDU_DATA_LLCTRL_LEN(start_enc_rsp) != pdu_rx->len) {
   159a8:	7f73      	ldrb	r3, [r6, #29]
   159aa:	2b01      	cmp	r3, #1
   159ac:	f47f ab6f 	bne.w	1508e <ull_conn_rx+0xfe>
		if (conn->lll.role) {
   159b0:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   159b4:	2b00      	cmp	r3, #0
   159b6:	f280 80ec 	bge.w	15b92 <ull_conn_rx+0xc02>
			if ((conn->llcp_req != conn->llcp_ack) &&
   159ba:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
   159be:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   159c2:	4283      	cmp	r3, r0
   159c4:	f000 84e4 	beq.w	16390 <ull_conn_rx+0x1400>
   159c8:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   159cc:	2b03      	cmp	r3, #3
   159ce:	f47f ab5e 	bne.w	1508e <ull_conn_rx+0xfe>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   159d2:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   159d6:	f36f 0301 	bfc	r3, #0, #2
   159da:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
		if (conn->llcp_enc.refresh) {
   159de:	074e      	lsls	r6, r1, #29
   159e0:	f57f ae88 	bpl.w	156f4 <ull_conn_rx+0x764>
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   159e4:	682b      	ldr	r3, [r5, #0]
			conn->llcp_enc.refresh = 0U;
   159e6:	f36f 0182 	bfc	r1, #2, #1
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   159ea:	2217      	movs	r2, #23
			conn->llcp_enc.refresh = 0U;
   159ec:	f884 1166 	strb.w	r1, [r4, #358]	; 0x166
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   159f0:	711a      	strb	r2, [r3, #4]
		conn->procedure_expire = 0U;
   159f2:	e67f      	b.n	156f4 <ull_conn_rx+0x764>
		 (conn->llcp_enc.refresh &&
   159f4:	f1b8 0f02 	cmp.w	r8, #2
   159f8:	f43f aef4 	beq.w	157e4 <ull_conn_rx+0x854>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   159fc:	f1b8 0f0b 	cmp.w	r8, #11
   15a00:	f43f ab41 	beq.w	15086 <ull_conn_rx+0xf6>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   15a04:	f1b8 0f04 	cmp.w	r8, #4
   15a08:	f47f aaf2 	bne.w	14ff0 <ull_conn_rx+0x60>
   15a0c:	f7ff bb3f 	b.w	1508e <ull_conn_rx+0xfe>
			tx->next = conn->tx_head;
   15a10:	6001      	str	r1, [r0, #0]
				conn->tx_ctrl = tx;
   15a12:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   15a16:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   15a1a:	2900      	cmp	r1, #0
   15a1c:	f47f ab05 	bne.w	1502a <ull_conn_rx+0x9a>
   15a20:	e7b5      	b.n	1598e <ull_conn_rx+0x9fe>
		if (conn->llcp_length.ack != conn->llcp_length.req) {
   15a22:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
   15a26:	f894 31ad 	ldrb.w	r3, [r4, #429]	; 0x1ad
   15a2a:	4293      	cmp	r3, r2
   15a2c:	f43f aafd 	beq.w	1502a <ull_conn_rx+0x9a>
	conn->procedure_expire = 0U;
   15a30:	2300      	movs	r3, #0
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   15a32:	2109      	movs	r1, #9
	conn->llcp_length.ack = conn->llcp_length.req;
   15a34:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
	conn->procedure_expire = 0U;
   15a38:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   15a3c:	7771      	strb	r1, [r6, #29]
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   15a3e:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   15a42:	f8b4 7058 	ldrh.w	r7, [r4, #88]	; 0x58
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   15a46:	f8b4 505e 	ldrh.w	r5, [r4, #94]	; 0x5e
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   15a4a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   15a4e:	8432      	strh	r2, [r6, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   15a50:	2215      	movs	r2, #21
	int nack = 0;
   15a52:	4618      	mov	r0, r3
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   15a54:	84b7      	strh	r7, [r6, #36]	; 0x24
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   15a56:	8475      	strh	r5, [r6, #34]	; 0x22
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   15a58:	84f1      	strh	r1, [r6, #38]	; 0x26
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   15a5a:	77f2      	strb	r2, [r6, #31]
	if (err) {
   15a5c:	f7ff bae8 	b.w	15030 <ull_conn_rx+0xa0>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   15a60:	f894 01bc 	ldrb.w	r0, [r4, #444]	; 0x1bc
   15a64:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   15a68:	4283      	cmp	r3, r0
   15a6a:	f43f aade 	beq.w	1502a <ull_conn_rx+0x9a>
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   15a6e:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   15a72:	2a23      	cmp	r2, #35	; 0x23
   15a74:	d012      	beq.n	15a9c <ull_conn_rx+0xb0c>
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   15a76:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
   15a7a:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
		conn->llcp_phy.ack = conn->llcp_phy.req;
   15a7e:	f884 01bd 	strb.w	r0, [r4, #445]	; 0x1bd
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   15a82:	f3c3 0002 	ubfx	r0, r3, #0, #3
   15a86:	f360 1306 	bfi	r3, r0, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   15a8a:	f36f 0100 	bfc	r1, #0, #1
		conn->procedure_expire = 0U;
   15a8e:	2000      	movs	r0, #0
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   15a90:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
   15a94:	f884 11bf 	strb.w	r1, [r4, #447]	; 0x1bf
		conn->procedure_expire = 0U;
   15a98:	f8a4 00c8 	strh.w	r0, [r4, #200]	; 0xc8
	if (!conn->llcp_phy.cmd) {
   15a9c:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   15aa0:	075d      	lsls	r5, r3, #29
   15aa2:	f57f aac2 	bpl.w	1502a <ull_conn_rx+0x9a>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   15aa6:	231a      	movs	r3, #26
	p->status = rej_ext_ind->error_code;
   15aa8:	7732      	strb	r2, [r6, #28]
   15aaa:	e48d      	b.n	153c8 <ull_conn_rx+0x438>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   15aac:	f894 2185 	ldrb.w	r2, [r4, #389]	; 0x185
   15ab0:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   15ab4:	429a      	cmp	r2, r3
   15ab6:	f43f aab8 	beq.w	1502a <ull_conn_rx+0x9a>
	if (!lll->role && (rej_ext_ind->error_code ==
   15aba:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
   15abe:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   15ac2:	2900      	cmp	r1, #0
   15ac4:	f2c0 857a 	blt.w	165bc <ull_conn_rx+0x162c>
   15ac8:	2a1a      	cmp	r2, #26
   15aca:	f000 8606 	beq.w	166da <ull_conn_rx+0x174a>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   15ace:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   15ad2:	f002 0107 	and.w	r1, r2, #7
   15ad6:	2904      	cmp	r1, #4
   15ad8:	f000 8535 	beq.w	16546 <ull_conn_rx+0x15b6>
	if (!conn->llcp_conn_param.cmd) {
   15adc:	0710      	lsls	r0, r2, #28
   15ade:	f57f aaa4 	bpl.w	1502a <ull_conn_rx+0x9a>
	cu->status = rej_ext_ind->error_code;
   15ae2:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   15ae6:	7733      	strb	r3, [r6, #28]
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   15ae8:	2216      	movs	r2, #22
   15aea:	7132      	strb	r2, [r6, #4]
	cu->interval = lll->interval;
   15aec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
	cu->timeout = conn->supervision_reload *
   15aee:	f8b4 20c2 	ldrh.w	r2, [r4, #194]	; 0xc2
	cu->latency = lll->latency;
   15af2:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
	cu->interval = lll->interval;
   15af4:	83f3      	strh	r3, [r6, #30]
	cu->timeout = conn->supervision_reload *
   15af6:	fb03 f202 	mul.w	r2, r3, r2
		      lll->interval * 125U / 1000;
   15afa:	237d      	movs	r3, #125	; 0x7d
   15afc:	fb03 f302 	mul.w	r3, r3, r2
	cu->latency = lll->latency;
   15b00:	8431      	strh	r1, [r6, #32]
		      lll->interval * 125U / 1000;
   15b02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	int nack = 0;
   15b06:	2000      	movs	r0, #0
		      lll->interval * 125U / 1000;
   15b08:	fbb3 f3f2 	udiv	r3, r3, r2
	cu->timeout = conn->supervision_reload *
   15b0c:	8473      	strh	r3, [r6, #34]	; 0x22
	if (err) {
   15b0e:	f7ff ba8f 	b.w	15030 <ull_conn_rx+0xa0>
		if ((conn->llcp_ack != conn->llcp_req) &&
   15b12:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   15b16:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   15b1a:	429a      	cmp	r2, r3
   15b1c:	f43f aa85 	beq.w	1502a <ull_conn_rx+0x9a>
   15b20:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
   15b24:	2a03      	cmp	r2, #3
   15b26:	f47f aa80 	bne.w	1502a <ull_conn_rx+0x9a>
	conn->llcp_enc.pause_rx = 0U;
   15b2a:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	conn->llcp_ack = conn->llcp_req;
   15b2e:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
	conn->llcp_enc.pause_rx = 0U;
   15b32:	f022 0203 	bic.w	r2, r2, #3
	conn->procedure_expire = 0U;
   15b36:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   15b38:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
	conn->procedure_expire = 0U;
   15b3c:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	pdu_rx->llctrl.reject_ind.error_code = rej_ext_ind->error_code;
   15b40:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   15b44:	f886 2020 	strb.w	r2, [r6, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   15b48:	220d      	movs	r2, #13
	int nack = 0;
   15b4a:	4618      	mov	r0, r3
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   15b4c:	77f2      	strb	r2, [r6, #31]
	if (err) {
   15b4e:	f7ff ba6f 	b.w	15030 <ull_conn_rx+0xa0>
	       (conn->lll.role &&
   15b52:	2800      	cmp	r0, #0
   15b54:	f43f ae3e 	beq.w	157d4 <ull_conn_rx+0x844>
		 (conn->llcp_enc.refresh &&
   15b58:	f1b8 0f02 	cmp.w	r8, #2
   15b5c:	f43f ae42 	beq.w	157e4 <ull_conn_rx+0x854>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   15b60:	f1b8 0f0b 	cmp.w	r8, #11
   15b64:	d02c      	beq.n	15bc0 <ull_conn_rx+0xc30>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   15b66:	f1b8 0f03 	cmp.w	r8, #3
   15b6a:	f43f ae81 	beq.w	15870 <ull_conn_rx+0x8e0>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   15b6e:	f1b8 0f06 	cmp.w	r8, #6
   15b72:	f47f aa44 	bne.w	14ffe <ull_conn_rx+0x6e>
		if (PDU_DATA_LLCTRL_LEN(start_enc_rsp) != pdu_rx->len) {
   15b76:	7f73      	ldrb	r3, [r6, #29]
   15b78:	2b01      	cmp	r3, #1
   15b7a:	f43f af1e 	beq.w	159ba <ull_conn_rx+0xa2a>
   15b7e:	f7ff ba86 	b.w	1508e <ull_conn_rx+0xfe>
		*err = -ENOBUFS;
   15b82:	f06f 0068 	mvn.w	r0, #104	; 0x68
   15b86:	f7ff ba53 	b.w	15030 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(start_enc_rsp) != pdu_rx->len) {
   15b8a:	7f73      	ldrb	r3, [r6, #29]
   15b8c:	2b01      	cmp	r3, #1
   15b8e:	f47f aa7e 	bne.w	1508e <ull_conn_rx+0xfe>
			conn->llcp_enc.pause_rx = 0U;
   15b92:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
   15b96:	f021 0103 	bic.w	r1, r1, #3
   15b9a:	f884 1166 	strb.w	r1, [r4, #358]	; 0x166
   15b9e:	e71e      	b.n	159de <ull_conn_rx+0xa4e>
			conn->tx_data = conn->tx_data->next;
   15ba0:	680a      	ldr	r2, [r1, #0]
   15ba2:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   15ba6:	2b00      	cmp	r3, #0
   15ba8:	f47f aaa2 	bne.w	150f0 <ull_conn_rx+0x160>
			tx->next = conn->tx_head->next;
   15bac:	680b      	ldr	r3, [r1, #0]
   15bae:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   15bb0:	6008      	str	r0, [r1, #0]
				conn->tx_ctrl = tx;
   15bb2:	6801      	ldr	r1, [r0, #0]
				conn->tx_ctrl_last = tx;
   15bb4:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
	if (!tx->next) {
   15bb8:	2900      	cmp	r1, #0
   15bba:	f47f aa36 	bne.w	1502a <ull_conn_rx+0x9a>
   15bbe:	e6e6      	b.n	1598e <ull_conn_rx+0x9fe>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   15bc0:	7f73      	ldrb	r3, [r6, #29]
   15bc2:	2b01      	cmp	r3, #1
   15bc4:	f47f aa63 	bne.w	1508e <ull_conn_rx+0xfe>
		conn->lll.enc_tx = 0;
   15bc8:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   15bcc:	f36f 1304 	bfc	r3, #4, #1
   15bd0:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
		goto pause_enc_rsp_send_exit;
   15bd4:	f7ff ba29 	b.w	1502a <ull_conn_rx+0x9a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   15bd8:	790b      	ldrb	r3, [r1, #4]
   15bda:	f003 0303 	and.w	r3, r3, #3
   15bde:	2b03      	cmp	r3, #3
   15be0:	f000 81e6 	beq.w	15fb0 <ull_conn_rx+0x1020>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   15be4:	f8c4 11c8 	str.w	r1, [r4, #456]	; 0x1c8
   15be8:	f7ff ba84 	b.w	150f4 <ull_conn_rx+0x164>
		if (!conn->lll.role) {
   15bec:	f994 0039 	ldrsb.w	r0, [r4, #57]	; 0x39
   15bf0:	f894 2185 	ldrb.w	r2, [r4, #389]	; 0x185
   15bf4:	f894 c184 	ldrb.w	ip, [r4, #388]	; 0x184
   15bf8:	9200      	str	r2, [sp, #0]
   15bfa:	2800      	cmp	r0, #0
   15bfc:	f2c0 80be 	blt.w	15d7c <ull_conn_rx+0xdec>
			if ((conn->llcp_conn_param.req !=
   15c00:	4562      	cmp	r2, ip
   15c02:	d009      	beq.n	15c18 <ull_conn_rx+0xc88>
			    ((conn->llcp_conn_param.state ==
   15c04:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
					conn->llcp_conn_param.ack) &&
   15c08:	f012 0207 	ands.w	r2, r2, #7
   15c0c:	f000 8304 	beq.w	16218 <ull_conn_rx+0x1288>
			      LLCP_CPR_STATE_REQ) ||
   15c10:	3a04      	subs	r2, #4
   15c12:	2a01      	cmp	r2, #1
   15c14:	f240 8300 	bls.w	16218 <ull_conn_rx+0x1288>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   15c18:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   15c1c:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
   15c20:	1a12      	subs	r2, r2, r0
   15c22:	f002 0203 	and.w	r2, r2, #3
   15c26:	2a02      	cmp	r2, #2
   15c28:	f000 83c8 	beq.w	163bc <ull_conn_rx+0x142c>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
   15c2c:	f894 01bc 	ldrb.w	r0, [r4, #444]	; 0x1bc
   15c30:	f894 21bd 	ldrb.w	r2, [r4, #445]	; 0x1bd
   15c34:	4290      	cmp	r0, r2
   15c36:	f000 83c7 	beq.w	163c8 <ull_conn_rx+0x1438>
				nack = reject_ext_ind_send(conn, *rx,
   15c3a:	4631      	mov	r1, r6
   15c3c:	4620      	mov	r0, r4
   15c3e:	232a      	movs	r3, #42	; 0x2a
   15c40:	220f      	movs	r2, #15
   15c42:	f7ff bb29 	b.w	15298 <ull_conn_rx+0x308>
		if (!conn->tx_ctrl) {
   15c46:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   15c4a:	2a00      	cmp	r2, #0
   15c4c:	f47f ae94 	bne.w	15978 <ull_conn_rx+0x9e8>
			tx->next = conn->tx_head;
   15c50:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   15c52:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   15c56:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   15c5a:	e694      	b.n	15986 <ull_conn_rx+0x9f6>
	if (conn->common.txn_lock) {
   15c5c:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   15c60:	079b      	lsls	r3, r3, #30
   15c62:	f53f a9e2 	bmi.w	1502a <ull_conn_rx+0x9a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   15c66:	48d6      	ldr	r0, [pc, #856]	; (15fc0 <ull_conn_rx+0x1030>)
   15c68:	f7f9 f890 	bl	ed8c <mem_acquire>
	if (!tx) {
   15c6c:	4601      	mov	r1, r0
   15c6e:	2800      	cmp	r0, #0
   15c70:	d087      	beq.n	15b82 <ull_conn_rx+0xbf2>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   15c72:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
   15c76:	9300      	str	r3, [sp, #0]
	eff_rx_octets = conn->lll.max_rx_octets;
   15c78:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
	conn->common.txn_lock = 1U;
   15c7c:	f894 20d8 	ldrb.w	r2, [r4, #216]	; 0xd8
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   15c80:	f894 01ad 	ldrb.w	r0, [r4, #429]	; 0x1ad
	eff_rx_octets = conn->lll.max_rx_octets;
   15c84:	9301      	str	r3, [sp, #4]
	if (/* Local idle, and Peer request then complete the Peer procedure
   15c86:	9b00      	ldr	r3, [sp, #0]
	eff_tx_octets = conn->lll.max_tx_octets;
   15c88:	f8b4 9058 	ldrh.w	r9, [r4, #88]	; 0x58
	eff_rx_time = conn->lll.max_rx_time;
   15c8c:	f8b4 a05e 	ldrh.w	sl, [r4, #94]	; 0x5e
	eff_tx_time = conn->lll.max_tx_time;
   15c90:	f8b4 b05c 	ldrh.w	fp, [r4, #92]	; 0x5c
	conn->common.txn_lock = 1U;
   15c94:	f042 0202 	orr.w	r2, r2, #2
	if (/* Local idle, and Peer request then complete the Peer procedure
   15c98:	4283      	cmp	r3, r0
	conn->common.txn_lock = 1U;
   15c9a:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
	if (/* Local idle, and Peer request then complete the Peer procedure
   15c9e:	d005      	beq.n	15cac <ull_conn_rx+0xd1c>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   15ca0:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
	    ((conn->llcp_length.req != conn->llcp_length.ack) &&
   15ca4:	f012 0f06 	tst.w	r2, #6
   15ca8:	f47f ab1e 	bne.w	152e8 <ull_conn_rx+0x358>
		max_rx_octets = sys_le16_to_cpu(lr->max_rx_octets);
   15cac:	8c32      	ldrh	r2, [r6, #32]
		if (max_rx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   15cae:	2a1a      	cmp	r2, #26
   15cb0:	f240 82cb 	bls.w	1624a <ull_conn_rx+0x12ba>
			eff_tx_octets = MIN(max_rx_octets,
   15cb4:	f8b4 00d2 	ldrh.w	r0, [r4, #210]	; 0xd2
   15cb8:	4282      	cmp	r2, r0
   15cba:	bf28      	it	cs
   15cbc:	4602      	movcs	r2, r0
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   15cbe:	f8b6 e024 	ldrh.w	lr, [r6, #36]	; 0x24
			eff_rx_octets = MIN(max_tx_octets,
   15cc2:	9b01      	ldr	r3, [sp, #4]
		if (lr_rx_time >= PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M)) {
   15cc4:	f8b6 8022 	ldrh.w	r8, [r6, #34]	; 0x22
		lr_tx_time = sys_le16_to_cpu(lr->max_tx_time);
   15cc8:	f8b6 c026 	ldrh.w	ip, [r6, #38]	; 0x26
			eff_rx_octets = MIN(max_tx_octets,
   15ccc:	f1be 0f1b 	cmp.w	lr, #27
   15cd0:	bf34      	ite	cc
   15cd2:	469e      	movcc	lr, r3
   15cd4:	f04f 0e1b 	movcs.w	lr, #27
			eff_tx_time = MIN(lr_rx_time, max_tx_time);
   15cd8:	f5b8 7fa4 	cmp.w	r8, #328	; 0x148
			eff_rx_octets = MIN(max_tx_octets,
   15cdc:	4618      	mov	r0, r3
			eff_tx_time = MIN(lr_rx_time, max_tx_time);
   15cde:	bf34      	ite	cc
   15ce0:	4658      	movcc	r0, fp
   15ce2:	f44f 70a4 	movcs.w	r0, #328	; 0x148
			eff_rx_time = MIN(lr_tx_time, max_rx_time);
   15ce6:	f5bc 7fa4 	cmp.w	ip, #328	; 0x148
   15cea:	bf34      	ite	cc
   15cec:	46d4      	movcc	ip, sl
   15cee:	f44f 7ca4 	movcs.w	ip, #328	; 0x148
		if (eff_rx_octets != conn->lll.max_rx_octets) {
   15cf2:	459e      	cmp	lr, r3
   15cf4:	f000 8320 	beq.w	16338 <ull_conn_rx+0x13a8>
			conn->llcp_length.ack = conn->llcp_length.req - 1;
   15cf8:	9b00      	ldr	r3, [sp, #0]
			conn->llcp_length.rx_octets = eff_rx_octets;
   15cfa:	f8a4 e1b0 	strh.w	lr, [r4, #432]	; 0x1b0
			conn->llcp_length.ack = conn->llcp_length.req - 1;
   15cfe:	3b01      	subs	r3, #1
   15d00:	f884 31ad 	strb.w	r3, [r4, #429]	; 0x1ad
			conn->llcp_length.tx_octets = eff_tx_octets;
   15d04:	f8a4 21b2 	strh.w	r2, [r4, #434]	; 0x1b2
				conn->llcp_length.state =
   15d08:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
			conn->llcp_length.rx_time = eff_rx_time;
   15d0c:	f8a4 c1b4 	strh.w	ip, [r4, #436]	; 0x1b4
			conn->llcp_length.tx_time = eff_tx_time;
   15d10:	f8a4 01b6 	strh.w	r0, [r4, #438]	; 0x1b6
			if (tx) {
   15d14:	2900      	cmp	r1, #0
   15d16:	f000 83f5 	beq.w	16504 <ull_conn_rx+0x1574>
				conn->llcp_length.state =
   15d1a:	2605      	movs	r6, #5
   15d1c:	f366 0302 	bfi	r3, r6, #0, #3
   15d20:	f884 31ae 	strb.w	r3, [r4, #430]	; 0x1ae
			link->mem = conn->llcp_rx;
   15d24:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   15d28:	607b      	str	r3, [r7, #4]
			(*rx)->hdr.link = link;
   15d2a:	682b      	ldr	r3, [r5, #0]
   15d2c:	601f      	str	r7, [r3, #0]
			conn->llcp_rx = *rx;
   15d2e:	682b      	ldr	r3, [r5, #0]
   15d30:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
			*rx = NULL;
   15d34:	2300      	movs	r3, #0
   15d36:	602b      	str	r3, [r5, #0]
	if (tx) {
   15d38:	2900      	cmp	r1, #0
   15d3a:	f43f a978 	beq.w	1502e <ull_conn_rx+0x9e>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   15d3e:	790b      	ldrb	r3, [r1, #4]
	pdu_tx->llctrl.length_rsp.max_tx_octets =
   15d40:	818a      	strh	r2, [r1, #12]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   15d42:	f043 0303 	orr.w	r3, r3, #3
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   15d46:	2215      	movs	r2, #21
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   15d48:	2509      	movs	r5, #9
	pdu_tx->llctrl.length_rsp.max_tx_time = sys_cpu_to_le16(eff_tx_time);
   15d4a:	81c8      	strh	r0, [r1, #14]
	pdu_tx->llctrl.length_rsp.max_rx_octets =
   15d4c:	f8a1 e008 	strh.w	lr, [r1, #8]
	ctrl_tx_sec_enqueue(conn, tx);
   15d50:	4620      	mov	r0, r4
	pdu_tx->llctrl.length_rsp.max_rx_time = sys_cpu_to_le16(eff_rx_time);
   15d52:	f8a1 c00a 	strh.w	ip, [r1, #10]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   15d56:	710b      	strb	r3, [r1, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   15d58:	714d      	strb	r5, [r1, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   15d5a:	71ca      	strb	r2, [r1, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   15d5c:	f7fe fb5c 	bl	14418 <ctrl_tx_sec_enqueue>
	return 0;
   15d60:	2000      	movs	r0, #0
}
   15d62:	f7ff b965 	b.w	15030 <ull_conn_rx+0xa0>
		if (!conn->tx_ctrl) {
   15d66:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   15d6a:	2a00      	cmp	r2, #0
   15d6c:	f47f ac00 	bne.w	15570 <ull_conn_rx+0x5e0>
			tx->next = conn->tx_head;
   15d70:	600b      	str	r3, [r1, #0]
				conn->tx_ctrl = tx;
   15d72:	e9c4 1171 	strd	r1, r1, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   15d76:	f8c4 11cc 	str.w	r1, [r4, #460]	; 0x1cc
   15d7a:	e400      	b.n	1557e <ull_conn_rx+0x5ee>
		} else if ((conn->llcp_conn_param.req ==
   15d7c:	9a00      	ldr	r2, [sp, #0]
   15d7e:	4562      	cmp	r2, ip
   15d80:	d004      	beq.n	15d8c <ull_conn_rx+0xdfc>
			    conn->llcp_conn_param.ack) ||
   15d82:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   15d86:	0792      	lsls	r2, r2, #30
   15d88:	f47f a94f 	bne.w	1502a <ull_conn_rx+0x9a>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   15d8c:	f8b6 8020 	ldrh.w	r8, [r6, #32]
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   15d90:	f1b8 0f05 	cmp.w	r8, #5
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   15d94:	fa1f f288 	uxth.w	r2, r8
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   15d98:	f240 8104 	bls.w	15fa4 <ull_conn_rx+0x1014>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   15d9c:	f8b6 e022 	ldrh.w	lr, [r6, #34]	; 0x22
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   15da0:	f5be 6f48 	cmp.w	lr, #3200	; 0xc80
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   15da4:	fa1f f18e 	uxth.w	r1, lr
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   15da8:	f200 80fc 	bhi.w	15fa4 <ull_conn_rx+0x1014>
			    (interval_max > 3200) ||
   15dac:	428a      	cmp	r2, r1
   15dae:	f200 80f9 	bhi.w	15fa4 <ull_conn_rx+0x1014>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   15db2:	f8b6 c024 	ldrh.w	ip, [r6, #36]	; 0x24
			    (interval_min > interval_max) ||
   15db6:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   15dba:	fa1f fa8c 	uxth.w	sl, ip
			    (interval_min > interval_max) ||
   15dbe:	f080 80f1 	bcs.w	15fa4 <ull_conn_rx+0x1014>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   15dc2:	8cf0      	ldrh	r0, [r6, #38]	; 0x26
			    (latency > 499) ||
   15dc4:	f1a0 090a 	sub.w	r9, r0, #10
   15dc8:	fa1f f989 	uxth.w	r9, r9
   15dcc:	f640 4b76 	movw	fp, #3190	; 0xc76
   15dd0:	45d9      	cmp	r9, fp
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   15dd2:	b282      	uxth	r2, r0
			    (latency > 499) ||
   15dd4:	f200 80e6 	bhi.w	15fa4 <ull_conn_rx+0x1014>
			     ((latency + 1) * interval_max)) ||
   15dd8:	fb0a 1901 	mla	r9, sl, r1, r1
			    (timeout < 10) || (timeout > 3200) ||
   15ddc:	ebb9 0f82 	cmp.w	r9, r2, lsl #2
   15de0:	f080 80e0 	bcs.w	15fa4 <ull_conn_rx+0x1014>
			     ((latency + 1) * interval_max)) ||
   15de4:	f896 b028 	ldrb.w	fp, [r6, #40]	; 0x28
   15de8:	4559      	cmp	r1, fp
   15dea:	f0c0 80db 	bcc.w	15fa4 <ull_conn_rx+0x1014>
			conn->llcp_conn_param.latency =	latency;
   15dee:	f8a4 c18c 	strh.w	ip, [r4, #396]	; 0x18c
			conn->llcp_conn_param.interval_min = interval_min;
   15df2:	f8a4 8188 	strh.w	r8, [r4, #392]	; 0x188
			conn->llcp_conn_param.interval_max = interval_max;
   15df6:	f8a4 e18a 	strh.w	lr, [r4, #394]	; 0x18a
			conn->llcp_conn_param.timeout =	timeout;
   15dfa:	f8a4 018e 	strh.w	r0, [r4, #398]	; 0x18e
			conn->llcp_conn_param.preferred_periodicity =
   15dfe:	f884 b190 	strb.w	fp, [r4, #400]	; 0x190
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   15e02:	f896 e02a 	ldrb.w	lr, [r6, #42]	; 0x2a
   15e06:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
			     lll->interval) ||
   15e0a:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   15e0e:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   15e12:	f8a4 0192 	strh.w	r0, [r4, #402]	; 0x192
				sys_le16_to_cpu(cpr->offset0);
   15e16:	f896 e02c 	ldrb.w	lr, [r6, #44]	; 0x2c
   15e1a:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
   15e1e:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset0 =
   15e22:	f8a4 0194 	strh.w	r0, [r4, #404]	; 0x194
				sys_le16_to_cpu(cpr->offset1);
   15e26:	f896 e02e 	ldrb.w	lr, [r6, #46]	; 0x2e
   15e2a:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
   15e2e:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset1 =
   15e32:	f8a4 0196 	strh.w	r0, [r4, #406]	; 0x196
				sys_le16_to_cpu(cpr->offset2);
   15e36:	f896 e030 	ldrb.w	lr, [r6, #48]	; 0x30
   15e3a:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
   15e3e:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset2 =
   15e42:	f8a4 0198 	strh.w	r0, [r4, #408]	; 0x198
				sys_le16_to_cpu(cpr->offset3);
   15e46:	f896 e032 	ldrb.w	lr, [r6, #50]	; 0x32
   15e4a:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
   15e4e:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset3 =
   15e52:	f8a4 019a 	strh.w	r0, [r4, #410]	; 0x19a
				sys_le16_to_cpu(cpr->offset4);
   15e56:	f896 0033 	ldrb.w	r0, [r6, #51]	; 0x33
   15e5a:	f896 e034 	ldrb.w	lr, [r6, #52]	; 0x34
   15e5e:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset4 =
   15e62:	f8a4 019c 	strh.w	r0, [r4, #412]	; 0x19c
				sys_le16_to_cpu(cpr->offset5);
   15e66:	f896 0035 	ldrb.w	r0, [r6, #53]	; 0x35
   15e6a:	f896 6036 	ldrb.w	r6, [r6, #54]	; 0x36
			if ((conn->llcp_conn_param.interval_max !=
   15e6e:	4561      	cmp	r1, ip
				sys_le16_to_cpu(cpr->offset5);
   15e70:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
			conn->llcp_conn_param.offset5 =
   15e74:	f8a4 019e 	strh.w	r0, [r4, #414]	; 0x19e
			if ((conn->llcp_conn_param.interval_max !=
   15e78:	f000 83f7 	beq.w	1666a <ull_conn_rx+0x16da>
				conn->llcp_conn_param.state =
   15e7c:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   15e80:	2103      	movs	r1, #3
   15e82:	f361 0202 	bfi	r2, r1, #0, #3
   15e86:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
			conn->llcp_conn_param.ack--;
   15e8a:	9a00      	ldr	r2, [sp, #0]
   15e8c:	3a01      	subs	r2, #1
   15e8e:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
			if (!conn_upd_curr) {
   15e92:	2b00      	cmp	r3, #0
   15e94:	f47f a8cb 	bne.w	1502e <ull_conn_rx+0x9e>
				conn_upd_curr = conn;
   15e98:	603c      	str	r4, [r7, #0]
	int nack = 0;
   15e9a:	4618      	mov	r0, r3
   15e9c:	f7ff b8c8 	b.w	15030 <ull_conn_rx+0xa0>
	if (conn->common.txn_lock) {
   15ea0:	f894 80d8 	ldrb.w	r8, [r4, #216]	; 0xd8
   15ea4:	f018 0802 	ands.w	r8, r8, #2
   15ea8:	f47f a8bf 	bne.w	1502a <ull_conn_rx+0x9a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   15eac:	4844      	ldr	r0, [pc, #272]	; (15fc0 <ull_conn_rx+0x1030>)
   15eae:	f7f8 ff6d 	bl	ed8c <mem_acquire>
	if (!tx) {
   15eb2:	4602      	mov	r2, r0
   15eb4:	2800      	cmp	r0, #0
   15eb6:	f43f ae64 	beq.w	15b82 <ull_conn_rx+0xbf2>
	conn->common.txn_lock = 1U;
   15eba:	f894 10d8 	ldrb.w	r1, [r4, #216]	; 0xd8
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   15ebe:	f894 01be 	ldrb.w	r0, [r4, #446]	; 0x1be
	if (conn->llcp_phy.ack ==
   15ec2:	f894 e1bd 	ldrb.w	lr, [r4, #445]	; 0x1bd
   15ec6:	f894 71bc 	ldrb.w	r7, [r4, #444]	; 0x1bc
   15eca:	f894 31c0 	ldrb.w	r3, [r4, #448]	; 0x1c0
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   15ece:	2502      	movs	r5, #2
   15ed0:	f365 0001 	bfi	r0, r5, #0, #2
	conn->common.txn_lock = 1U;
   15ed4:	4329      	orrs	r1, r5
	if (conn->llcp_phy.ack ==
   15ed6:	4577      	cmp	r7, lr
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   15ed8:	f884 01be 	strb.w	r0, [r4, #446]	; 0x1be
	conn->common.txn_lock = 1U;
   15edc:	f884 10d8 	strb.w	r1, [r4, #216]	; 0xd8
	if (conn->llcp_phy.ack ==
   15ee0:	f3c3 0502 	ubfx	r5, r3, #0, #3
   15ee4:	f003 0c07 	and.w	ip, r3, #7
   15ee8:	f3c3 00c2 	ubfx	r0, r3, #3, #3
   15eec:	d114      	bne.n	15f18 <ull_conn_rx+0xf88>
		conn->llcp_phy.tx =
   15eee:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
		conn->procedure_expire =
   15ef2:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   15ef6:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
		conn->llcp_phy.tx =
   15efa:	f36c 0184 	bfi	r1, ip, #2, #3
		conn->llcp_phy.cmd = 0U;
   15efe:	f894 c1bf 	ldrb.w	ip, [r4, #447]	; 0x1bf
		conn->llcp_phy.ack--;
   15f02:	3f01      	subs	r7, #1
		conn->llcp_phy.rx =
   15f04:	f360 1147 	bfi	r1, r0, #5, #3
		conn->llcp_phy.cmd = 0U;
   15f08:	f368 0c82 	bfi	ip, r8, #2, #1
		conn->llcp_phy.ack--;
   15f0c:	f884 71bd 	strb.w	r7, [r4, #445]	; 0x1bd
		conn->llcp_phy.rx =
   15f10:	f884 11be 	strb.w	r1, [r4, #446]	; 0x1be
		conn->llcp_phy.cmd = 0U;
   15f14:	f884 c1bf 	strb.w	ip, [r4, #447]	; 0x1bf
	conn->llcp_phy.rx &= p->tx_phys;
   15f18:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
	conn->llcp_phy.tx &= p->rx_phys;
   15f1c:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
	conn->llcp_phy.rx &= p->tx_phys;
   15f20:	f896 7020 	ldrb.w	r7, [r6, #32]
	conn->llcp_phy.tx &= p->rx_phys;
   15f24:	f3c1 0c82 	ubfx	ip, r1, #2, #3
   15f28:	ea03 030c 	and.w	r3, r3, ip
	conn->llcp_phy.rx &= p->tx_phys;
   15f2c:	ea07 1751 	and.w	r7, r7, r1, lsr #5
	conn->llcp_phy.tx &= p->rx_phys;
   15f30:	009b      	lsls	r3, r3, #2
   15f32:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   15f36:	f001 0103 	and.w	r1, r1, #3
   15f3a:	430b      	orrs	r3, r1
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   15f3c:	2703      	movs	r7, #3
	conn->llcp_phy.tx &= p->rx_phys;
   15f3e:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15f42:	7911      	ldrb	r1, [r2, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   15f44:	7157      	strb	r7, [r2, #5]
	    conn->tx_head &&
   15f46:	f8d4 71c4 	ldr.w	r7, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   15f4a:	7215      	strb	r5, [r2, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15f4c:	f041 0103 	orr.w	r1, r1, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   15f50:	2517      	movs	r5, #23
   15f52:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   15f56:	7250      	strb	r0, [r2, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15f58:	7111      	strb	r1, [r2, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   15f5a:	71d5      	strb	r5, [r2, #7]
	if (
   15f5c:	2f00      	cmp	r7, #0
   15f5e:	f000 817e 	beq.w	1625e <ull_conn_rx+0x12ce>
	    !conn->llcp_enc.pause_tx &&
   15f62:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   15f66:	0788      	lsls	r0, r1, #30
   15f68:	f100 8179 	bmi.w	1625e <ull_conn_rx+0x12ce>
	    !conn->llcp_phy.pause_tx &&
   15f6c:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   15f70:	07c9      	lsls	r1, r1, #31
   15f72:	f100 8174 	bmi.w	1625e <ull_conn_rx+0x12ce>
		if (conn->tx_head == conn->tx_data) {
   15f76:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   15f7a:	428f      	cmp	r7, r1
   15f7c:	f000 839b 	beq.w	166b6 <ull_conn_rx+0x1726>
		} else if (!conn->tx_ctrl) {
   15f80:	2b00      	cmp	r3, #0
   15f82:	f000 8388 	beq.w	16696 <ull_conn_rx+0x1706>
	tx->next = conn->tx_ctrl_last->next;
   15f86:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   15f8a:	6819      	ldr	r1, [r3, #0]
   15f8c:	6011      	str	r1, [r2, #0]
	conn->tx_ctrl_last->next = tx;
   15f8e:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
   15f90:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
	if (!tx->next) {
   15f94:	6813      	ldr	r3, [r2, #0]
   15f96:	2b00      	cmp	r3, #0
   15f98:	f47f a847 	bne.w	1502a <ull_conn_rx+0x9a>
		conn->tx_data_last = tx;
   15f9c:	f8c4 21d4 	str.w	r2, [r4, #468]	; 0x1d4
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   15fa0:	f7ff b843 	b.w	1502a <ull_conn_rx+0x9a>
				nack = reject_ext_ind_send(conn, *rx,
   15fa4:	4631      	mov	r1, r6
   15fa6:	4620      	mov	r0, r4
   15fa8:	231e      	movs	r3, #30
   15faa:	220f      	movs	r2, #15
   15fac:	f7ff b974 	b.w	15298 <ull_conn_rx+0x308>
	    ((pdu_data_tx->llctrl.opcode !=
   15fb0:	79cb      	ldrb	r3, [r1, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   15fb2:	2b03      	cmp	r3, #3
   15fb4:	f43f adfa 	beq.w	15bac <ull_conn_rx+0xc1c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   15fb8:	2b0a      	cmp	r3, #10
   15fba:	f47f ae13 	bne.w	15be4 <ull_conn_rx+0xc54>
   15fbe:	e5f5      	b.n	15bac <ull_conn_rx+0xc1c>
   15fc0:	20001914 	.word	0x20001914
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   15fc4:	48d6      	ldr	r0, [pc, #856]	; (16320 <ull_conn_rx+0x1390>)
   15fc6:	f7f8 fee1 	bl	ed8c <mem_acquire>
		if (!tx) {
   15fca:	4601      	mov	r1, r0
   15fcc:	2800      	cmp	r0, #0
   15fce:	f43f add8 	beq.w	15b82 <ull_conn_rx+0xbf2>
		conn->llcp_version.tx = 1U;
   15fd2:	f894 213a 	ldrb.w	r2, [r4, #314]	; 0x13a
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   15fd6:	7903      	ldrb	r3, [r0, #4]
		conn->llcp_version.tx = 1U;
   15fd8:	f042 0201 	orr.w	r2, r2, #1
   15fdc:	f884 213a 	strb.w	r2, [r4, #314]	; 0x13a
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   15fe0:	f043 0303 	orr.w	r3, r3, #3
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   15fe4:	220c      	movs	r2, #12
		pdu_tx->len =
   15fe6:	7145      	strb	r5, [r0, #5]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   15fe8:	7103      	strb	r3, [r0, #4]
		v->version_number = LL_VERSION_NUMBER;
   15fea:	250b      	movs	r5, #11
		v->sub_version_number =
   15fec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   15ff0:	f06f 000e 	mvn.w	r0, #14
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   15ff4:	71ca      	strb	r2, [r1, #7]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   15ff6:	2205      	movs	r2, #5
   15ff8:	7248      	strb	r0, [r1, #9]
		v->sub_version_number =
   15ffa:	72cb      	strb	r3, [r1, #11]
   15ffc:	730b      	strb	r3, [r1, #12]
		v->version_number = LL_VERSION_NUMBER;
   15ffe:	720d      	strb	r5, [r1, #8]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   16000:	728a      	strb	r2, [r1, #10]
		ctrl_tx_sec_enqueue(conn, tx);
   16002:	4620      	mov	r0, r4
   16004:	f7fe fa08 	bl	14418 <ctrl_tx_sec_enqueue>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   16008:	2301      	movs	r3, #1
   1600a:	7133      	strb	r3, [r6, #4]
   1600c:	f7ff b9fc 	b.w	15408 <ull_conn_rx+0x478>
			conn->llcp_conn_param.disabled = 1U;
   16010:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
			if (!conn->lll.role) {
   16014:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
			conn->llcp_conn_param.disabled = 1U;
   16018:	f042 0210 	orr.w	r2, r2, #16
			if (!conn->lll.role) {
   1601c:	2900      	cmp	r1, #0
			conn->llcp_conn_param.disabled = 1U;
   1601e:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
			if (!conn->lll.role) {
   16022:	f2c0 8148 	blt.w	162b6 <ull_conn_rx+0x1326>
				LL_ASSERT(conn->llcp_cu.req ==
   16026:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
   1602a:	f894 210d 	ldrb.w	r2, [r4, #269]	; 0x10d
   1602e:	4293      	cmp	r3, r2
   16030:	d00e      	beq.n	16050 <ull_conn_rx+0x10c0>
   16032:	4abc      	ldr	r2, [pc, #752]	; (16324 <ull_conn_rx+0x1394>)
   16034:	49bc      	ldr	r1, [pc, #752]	; (16328 <ull_conn_rx+0x1398>)
   16036:	48bd      	ldr	r0, [pc, #756]	; (1632c <ull_conn_rx+0x139c>)
   16038:	f641 1315 	movw	r3, #6421	; 0x1915
   1603c:	f00e fad2 	bl	245e4 <printk>
   16040:	4040      	eors	r0, r0
   16042:	f380 8811 	msr	BASEPRI, r0
   16046:	f04f 0003 	mov.w	r0, #3
   1604a:	df02      	svc	2
   1604c:	f894 210d 	ldrb.w	r2, [r4, #269]	; 0x10d
				conn->llcp_conn_param.state =
   16050:	f894 0186 	ldrb.w	r0, [r4, #390]	; 0x186
				conn->llcp_cu.interval =
   16054:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
   16058:	f8a4 3110 	strh.w	r3, [r4, #272]	; 0x110
				conn->llcp_conn_param.state =
   1605c:	2305      	movs	r3, #5
   1605e:	f363 0002 	bfi	r0, r3, #0, #3
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   16062:	f894 110e 	ldrb.w	r1, [r4, #270]	; 0x10e
				conn->llcp_cu.ack--;
   16066:	1e53      	subs	r3, r2, #1
				conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   16068:	f3c0 02c0 	ubfx	r2, r0, #3, #1
				conn->llcp_cu.win_size = 1U;
   1606c:	2601      	movs	r6, #1
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1606e:	00d2      	lsls	r2, r2, #3
				conn->llcp_cu.ack--;
   16070:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
				conn->llcp_cu.win_size = 1U;
   16074:	f884 611c 	strb.w	r6, [r4, #284]	; 0x11c
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   16078:	f021 030f 	bic.w	r3, r1, #15
   1607c:	4332      	orrs	r2, r6
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1607e:	6829      	ldr	r1, [r5, #0]
				conn->llcp_cu.latency =
   16080:	f8b4 518c 	ldrh.w	r5, [r4, #396]	; 0x18c
				conn->llcp_conn_param.state =
   16084:	f884 0186 	strb.w	r0, [r4, #390]	; 0x186
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   16088:	431a      	orrs	r2, r3
   1608a:	f884 210e 	strb.w	r2, [r4, #270]	; 0x10e
				conn->llcp_cu.win_offset_us = 0U;
   1608e:	2000      	movs	r0, #0
				conn->llcp_cu.timeout =
   16090:	f8b4 218e 	ldrh.w	r2, [r4, #398]	; 0x18e
				conn->llcp_cu.win_offset_us = 0U;
   16094:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
				conn->llcp_cu.latency =
   16098:	f8a4 5112 	strh.w	r5, [r4, #274]	; 0x112
				conn->llcp_cu.timeout =
   1609c:	f8a4 2114 	strh.w	r2, [r4, #276]	; 0x114
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   160a0:	710e      	strb	r6, [r1, #4]
				break;
   160a2:	f7fe bfc5 	b.w	15030 <ull_conn_rx+0xa0>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   160a6:	7137      	strb	r7, [r6, #4]
		*err = 0U;
   160a8:	2000      	movs	r0, #0
   160aa:	f7fe bfc1 	b.w	15030 <ull_conn_rx+0xa0>
				      0x03) == 0x02) &&
   160ae:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   160b2:	2b03      	cmp	r3, #3
   160b4:	f47f a8ec 	bne.w	15290 <ull_conn_rx+0x300>
   160b8:	f7ff b8e3 	b.w	15282 <ull_conn_rx+0x2f2>
	instant = sys_le16_to_cpu(ind->instant);
   160bc:	8c70      	ldrh	r0, [r6, #34]	; 0x22
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   160be:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   160c0:	1a82      	subs	r2, r0, r2
   160c2:	0412      	lsls	r2, r2, #16
   160c4:	f100 80c3 	bmi.w	1624e <ull_conn_rx+0x12be>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   160c8:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   160cc:	f894 c0e5 	ldrb.w	ip, [r4, #229]	; 0xe5
   160d0:	eba2 020c 	sub.w	r2, r2, ip
   160d4:	f002 0203 	and.w	r2, r2, #3
   160d8:	2a02      	cmp	r2, #2
   160da:	f000 8155 	beq.w	16388 <ull_conn_rx+0x13f8>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   160de:	f894 c1bc 	ldrb.w	ip, [r4, #444]	; 0x1bc
   160e2:	f894 21bd 	ldrb.w	r2, [r4, #445]	; 0x1bd
   160e6:	4562      	cmp	r2, ip
   160e8:	d019      	beq.n	1611e <ull_conn_rx+0x118e>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   160ea:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   160ee:	f002 0203 	and.w	r2, r2, #3
   160f2:	2a02      	cmp	r2, #2
   160f4:	d113      	bne.n	1611e <ull_conn_rx+0x118e>
		conn->llcp_phy.pause_tx = 0U;
   160f6:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   160fa:	f894 60e8 	ldrb.w	r6, [r4, #232]	; 0xe8
		conn->llcp_phy.ack = conn->llcp_phy.req;
   160fe:	f884 c1bd 	strb.w	ip, [r4, #445]	; 0x1bd
		conn->llcp_phy.pause_tx = 0U;
   16102:	f36f 0200 	bfc	r2, #0, #1
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   16106:	f3c2 0c80 	ubfx	ip, r2, #2, #1
   1610a:	f36c 0641 	bfi	r6, ip, #1, #1
		conn->procedure_expire = 0U;
   1610e:	f04f 0c00 	mov.w	ip, #0
		conn->llcp_phy.pause_tx = 0U;
   16112:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   16116:	f884 60e8 	strb.w	r6, [r4, #232]	; 0xe8
		conn->procedure_expire = 0U;
   1611a:	f8a4 c0c8 	strh.w	ip, [r4, #200]	; 0xc8
	conn->llcp.phy_upd_ind.initiate = 0U;
   1611e:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
	conn->llcp.phy_upd_ind.instant = instant;
   16122:	f8a4 00ea 	strh.w	r0, [r4, #234]	; 0xea
	conn->llcp.phy_upd_ind.initiate = 0U;
   16126:	009b      	lsls	r3, r3, #2
   16128:	f003 031c 	and.w	r3, r3, #28
   1612c:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   16130:	f002 0202 	and.w	r2, r2, #2
   16134:	4313      	orrs	r3, r2
	link->mem = conn->llcp_rx;
   16136:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
	conn->llcp.phy_upd_ind.initiate = 0U;
   1613a:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	link->mem = conn->llcp_rx;
   1613e:	607a      	str	r2, [r7, #4]
	(*rx)->hdr.link = link;
   16140:	682b      	ldr	r3, [r5, #0]
   16142:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
   16144:	682b      	ldr	r3, [r5, #0]
   16146:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
	*rx = NULL;
   1614a:	2300      	movs	r3, #0
   1614c:	602b      	str	r3, [r5, #0]
	struct node_rx_pdu *rx_dle = ll_pdu_rx_alloc();
   1614e:	f7fc ff41 	bl	12fd4 <ll_pdu_rx_alloc>
	LL_ASSERT(rx_dle);
   16152:	4605      	mov	r5, r0
   16154:	2800      	cmp	r0, #0
   16156:	f000 8258 	beq.w	1660a <ull_conn_rx+0x167a>
	rx_dle->hdr.link->mem = conn->llcp_rx;
   1615a:	682b      	ldr	r3, [r5, #0]
   1615c:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   16160:	605a      	str	r2, [r3, #4]
	conn->llcp_ack -= 2U;
   16162:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
	if (conn->llcp.phy_upd_ind.tx) {
   16166:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
	conn->llcp_rx = rx_dle;
   1616a:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
	conn->llcp_ack -= 2U;
   1616e:	3a02      	subs	r2, #2
	conn->llcp_type = LLCP_PHY_UPD;
   16170:	2106      	movs	r1, #6
	if (conn->llcp.phy_upd_ind.tx) {
   16172:	f013 0f1c 	tst.w	r3, #28
	conn->llcp_ack -= 2U;
   16176:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
	conn->llcp_type = LLCP_PHY_UPD;
   1617a:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
	if (conn->llcp.phy_upd_ind.tx) {
   1617e:	f43e af56 	beq.w	1502e <ull_conn_rx+0x9e>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   16182:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
   16186:	f3c3 0382 	ubfx	r3, r3, #2, #3
   1618a:	f363 1206 	bfi	r2, r3, #4, #3
   1618e:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
	int nack = 0;
   16192:	2000      	movs	r0, #0
   16194:	f7fe bf4c 	b.w	15030 <ull_conn_rx+0xa0>
	} else if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   16198:	f894 2185 	ldrb.w	r2, [r4, #389]	; 0x185
   1619c:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   161a0:	429a      	cmp	r2, r3
   161a2:	f43f ac3e 	beq.w	15a22 <ull_conn_rx+0xa92>
		rej_ext_ind->error_code = rej_ind->error_code;
   161a6:	f896 3020 	ldrb.w	r3, [r6, #32]
   161aa:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
	if (!lll->role && (rej_ext_ind->error_code ==
   161ae:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   161b2:	2a00      	cmp	r2, #0
   161b4:	f2c0 820b 	blt.w	165ce <ull_conn_rx+0x163e>
   161b8:	2b1a      	cmp	r3, #26
   161ba:	f000 828e 	beq.w	166da <ull_conn_rx+0x174a>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   161be:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   161c2:	f002 0307 	and.w	r3, r2, #7
   161c6:	2b04      	cmp	r3, #4
   161c8:	f47f ac88 	bne.w	15adc <ull_conn_rx+0xb4c>
		LL_ASSERT(conn_upd_curr == conn);
   161cc:	4f58      	ldr	r7, [pc, #352]	; (16330 <ull_conn_rx+0x13a0>)
   161ce:	683b      	ldr	r3, [r7, #0]
   161d0:	429c      	cmp	r4, r3
   161d2:	d00e      	beq.n	161f2 <ull_conn_rx+0x1262>
   161d4:	4a53      	ldr	r2, [pc, #332]	; (16324 <ull_conn_rx+0x1394>)
   161d6:	4957      	ldr	r1, [pc, #348]	; (16334 <ull_conn_rx+0x13a4>)
   161d8:	4854      	ldr	r0, [pc, #336]	; (1632c <ull_conn_rx+0x139c>)
   161da:	f241 2329 	movw	r3, #4649	; 0x1229
   161de:	f00e fa01 	bl	245e4 <printk>
   161e2:	4040      	eors	r0, r0
   161e4:	f380 8811 	msr	BASEPRI, r0
   161e8:	f04f 0003 	mov.w	r0, #3
   161ec:	df02      	svc	2
   161ee:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   161f2:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   161f6:	f884 3185 	strb.w	r3, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   161fa:	2300      	movs	r3, #0
   161fc:	603b      	str	r3, [r7, #0]
		conn->procedure_expire = 0U;
   161fe:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   16202:	e46b      	b.n	15adc <ull_conn_rx+0xb4c>
			conn->llcp_length.disabled = 1U;
   16204:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
			conn->llcp_length.ack = conn->llcp_length.req;
   16208:	f884 31ad 	strb.w	r3, [r4, #429]	; 0x1ad
			conn->llcp_length.disabled = 1U;
   1620c:	f042 0308 	orr.w	r3, r2, #8
   16210:	f884 31ae 	strb.w	r3, [r4, #430]	; 0x1ae
			conn->llcp_length.ack = conn->llcp_length.req;
   16214:	f7ff ba6e 	b.w	156f4 <ull_conn_rx+0x764>
				nack = reject_ext_ind_send(conn, *rx,
   16218:	4631      	mov	r1, r6
   1621a:	4620      	mov	r0, r4
   1621c:	2323      	movs	r3, #35	; 0x23
   1621e:	220f      	movs	r2, #15
   16220:	f7ff b83a 	b.w	15298 <ull_conn_rx+0x308>
				nack = reject_ext_ind_send(conn, *rx,
   16224:	4631      	mov	r1, r6
   16226:	4620      	mov	r0, r4
   16228:	2323      	movs	r3, #35	; 0x23
   1622a:	f7ff b834 	b.w	15296 <ull_conn_rx+0x306>
	conn->llcp_enc.pause_rx = 0U;
   1622e:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	conn->llcp_ack = conn->llcp_req;
   16232:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
	conn->llcp_enc.pause_rx = 0U;
   16236:	f022 0203 	bic.w	r2, r2, #3
	conn->procedure_expire = 0U;
   1623a:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   1623c:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
	conn->procedure_expire = 0U;
   16240:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   16244:	4618      	mov	r0, r3
   16246:	f7fe bef3 	b.w	15030 <ull_conn_rx+0xa0>
   1624a:	464a      	mov	r2, r9
   1624c:	e537      	b.n	15cbe <ull_conn_rx+0xd2e>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1624e:	2301      	movs	r3, #1
   16250:	7133      	strb	r3, [r6, #4]
		return BT_HCI_ERR_INSTANT_PASSED;
   16252:	2328      	movs	r3, #40	; 0x28
			conn->llcp_terminate.reason_peer = err;
   16254:	f884 3143 	strb.w	r3, [r4, #323]	; 0x143
	int nack = 0;
   16258:	2000      	movs	r0, #0
   1625a:	f7fe bee9 	b.w	15030 <ull_conn_rx+0xa0>
		if (!conn->tx_ctrl) {
   1625e:	2b00      	cmp	r3, #0
   16260:	f47f ae91 	bne.w	15f86 <ull_conn_rx+0xff6>
			tx->next = conn->tx_head;
   16264:	6017      	str	r7, [r2, #0]
				conn->tx_ctrl = tx;
   16266:	e9c4 2271 	strd	r2, r2, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1626a:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
   1626e:	e691      	b.n	15f94 <ull_conn_rx+0x1004>
			lll->phy_tx_time = lll->phy_tx;
   16270:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
			conn->llcp_phy.pause_tx = 0U;
   16274:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
			conn->llcp_phy.ack = conn->llcp_phy.req;
   16278:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
			conn->llcp_phy.pause_tx = 0U;
   1627c:	f023 0309 	bic.w	r3, r3, #9
			lll->phy_tx_time = lll->phy_tx;
   16280:	4611      	mov	r1, r2
   16282:	f362 1106 	bfi	r1, r2, #4, #3
			conn->llcp_phy.pause_tx = 0U;
   16286:	f043 0308 	orr.w	r3, r3, #8
			lll->phy_tx_time = lll->phy_tx;
   1628a:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
			if (conn->llcp_phy.cmd) {
   1628e:	0759      	lsls	r1, r3, #29
			conn->llcp_phy.pause_tx = 0U;
   16290:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
			lll->phy_tx_time = lll->phy_tx;
   16294:	f3c2 0202 	ubfx	r2, r2, #0, #3
			if (conn->llcp_phy.cmd) {
   16298:	f140 808b 	bpl.w	163b2 <ull_conn_rx+0x1422>
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1629c:	6829      	ldr	r1, [r5, #0]
				p->status = 0U;
   1629e:	2300      	movs	r3, #0
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   162a0:	201a      	movs	r0, #26
   162a2:	7108      	strb	r0, [r1, #4]
				p->tx = lll->phy_tx;
   162a4:	7772      	strb	r2, [r6, #29]
				p->status = 0U;
   162a6:	7733      	strb	r3, [r6, #28]
				p->rx = lll->phy_rx;
   162a8:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   162ac:	f3c3 0302 	ubfx	r3, r3, #0, #3
   162b0:	77b3      	strb	r3, [r6, #30]
   162b2:	f7ff ba1f 	b.w	156f4 <ull_conn_rx+0x764>
			LL_ASSERT(conn_upd_curr == conn);
   162b6:	4f1e      	ldr	r7, [pc, #120]	; (16330 <ull_conn_rx+0x13a0>)
   162b8:	683a      	ldr	r2, [r7, #0]
   162ba:	4294      	cmp	r4, r2
   162bc:	d00e      	beq.n	162dc <ull_conn_rx+0x134c>
   162be:	4a19      	ldr	r2, [pc, #100]	; (16324 <ull_conn_rx+0x1394>)
   162c0:	491c      	ldr	r1, [pc, #112]	; (16334 <ull_conn_rx+0x13a4>)
   162c2:	481a      	ldr	r0, [pc, #104]	; (1632c <ull_conn_rx+0x139c>)
   162c4:	f641 132d 	movw	r3, #6445	; 0x192d
   162c8:	f00e f98c 	bl	245e4 <printk>
   162cc:	4040      	eors	r0, r0
   162ce:	f380 8811 	msr	BASEPRI, r0
   162d2:	f04f 0003 	mov.w	r0, #3
   162d6:	df02      	svc	2
   162d8:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
			if (!conn->llcp_conn_param.cmd) {
   162dc:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   162e0:	f884 3185 	strb.w	r3, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   162e4:	2300      	movs	r3, #0
   162e6:	603b      	str	r3, [r7, #0]
			if (!conn->llcp_conn_param.cmd) {
   162e8:	f012 0308 	ands.w	r3, r2, #8
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   162ec:	682a      	ldr	r2, [r5, #0]
			if (!conn->llcp_conn_param.cmd) {
   162ee:	f43e aea8 	beq.w	15042 <ull_conn_rx+0xb2>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   162f2:	2116      	movs	r1, #22
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   162f4:	231a      	movs	r3, #26
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   162f6:	7111      	strb	r1, [r2, #4]
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   162f8:	7733      	strb	r3, [r6, #28]
			cu->interval = lll->interval;
   162fa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
			cu->timeout = conn->supervision_reload *
   162fc:	f8b4 20c2 	ldrh.w	r2, [r4, #194]	; 0xc2
			cu->latency = lll->latency;
   16300:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
			cu->interval = lll->interval;
   16302:	83f3      	strh	r3, [r6, #30]
			cu->timeout = conn->supervision_reload *
   16304:	fb03 f202 	mul.w	r2, r3, r2
				      lll->interval * 125U / 1000;
   16308:	237d      	movs	r3, #125	; 0x7d
   1630a:	fb03 f302 	mul.w	r3, r3, r2
			cu->latency = lll->latency;
   1630e:	8431      	strh	r1, [r6, #32]
				      lll->interval * 125U / 1000;
   16310:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16314:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
   16318:	8473      	strh	r3, [r6, #34]	; 0x22
			    PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ)) {
   1631a:	f7ff b9eb 	b.w	156f4 <ull_conn_rx+0x764>
   1631e:	bf00      	nop
   16320:	20001914 	.word	0x20001914
   16324:	0002b604 	.word	0x0002b604
   16328:	0002b750 	.word	0x0002b750
   1632c:	0002b0c4 	.word	0x0002b0c4
   16330:	20001890 	.word	0x20001890
   16334:	0002b778 	.word	0x0002b778
			conn->llcp_length.ack = conn->llcp_length.req;
   16338:	9b00      	ldr	r3, [sp, #0]
   1633a:	f884 31ad 	strb.w	r3, [r4, #429]	; 0x1ad
			conn->procedure_expire = 0U;
   1633e:	2700      	movs	r7, #0
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   16340:	454a      	cmp	r2, r9
			conn->procedure_expire = 0U;
   16342:	f8a4 70c8 	strh.w	r7, [r4, #200]	; 0xc8
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   16346:	f000 812e 	beq.w	165a6 <ull_conn_rx+0x1616>
			conn->lll.max_rx_time = eff_rx_time;
   1634a:	f8a4 c05e 	strh.w	ip, [r4, #94]	; 0x5e
			if (tx) {
   1634e:	2900      	cmp	r1, #0
   16350:	f000 8124 	beq.w	1659c <ull_conn_rx+0x160c>
				conn->llcp_length.state =
   16354:	f894 51ae 	ldrb.w	r5, [r4, #430]	; 0x1ae
					(conn->llcp_length.req - 1);
   16358:	9b00      	ldr	r3, [sp, #0]
				conn->llcp_length.rx_octets = eff_rx_octets;
   1635a:	f8a4 e1b0 	strh.w	lr, [r4, #432]	; 0x1b0
				conn->llcp_length.state =
   1635e:	2703      	movs	r7, #3
					(conn->llcp_length.req - 1);
   16360:	3b01      	subs	r3, #1
				conn->llcp_length.state =
   16362:	f367 0502 	bfi	r5, r7, #0, #3
				conn->llcp_length.ack =
   16366:	f884 31ad 	strb.w	r3, [r4, #429]	; 0x1ad
				conn->llcp_length.tx_octets = eff_tx_octets;
   1636a:	f8a4 21b2 	strh.w	r2, [r4, #434]	; 0x1b2
				conn->llcp_length.rx_time = eff_rx_time;
   1636e:	f8a4 c1b4 	strh.w	ip, [r4, #436]	; 0x1b4
				conn->llcp_length.tx_time = eff_tx_time;
   16372:	f8a4 01b6 	strh.w	r0, [r4, #438]	; 0x1b6
				conn->llcp_length.state =
   16376:	f884 51ae 	strb.w	r5, [r4, #430]	; 0x1ae
			lr->max_rx_octets = sys_cpu_to_le16(eff_rx_octets);
   1637a:	f8a6 e020 	strh.w	lr, [r6, #32]
			lr->max_tx_octets = sys_cpu_to_le16(eff_tx_octets);
   1637e:	84b2      	strh	r2, [r6, #36]	; 0x24
			lr->max_rx_time = sys_cpu_to_le16(eff_rx_time);
   16380:	f8a6 c022 	strh.w	ip, [r6, #34]	; 0x22
			lr->max_tx_time = sys_cpu_to_le16(eff_tx_time);
   16384:	84f0      	strh	r0, [r6, #38]	; 0x26
   16386:	e4d7      	b.n	15d38 <ull_conn_rx+0xda8>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16388:	2301      	movs	r3, #1
   1638a:	7133      	strb	r3, [r6, #4]
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
   1638c:	232a      	movs	r3, #42	; 0x2a
   1638e:	e761      	b.n	16254 <ull_conn_rx+0x12c4>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   16390:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
				conn->llcp_ack -= 2U;
   16394:	3b02      	subs	r3, #2
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   16396:	f36f 0201 	bfc	r2, #0, #2
				conn->llcp_type = LLCP_ENCRYPTION;
   1639a:	2003      	movs	r0, #3
				conn->llcp_ack -= 2U;
   1639c:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   163a0:	f884 20f4 	strb.w	r2, [r4, #244]	; 0xf4
				conn->llcp_type = LLCP_ENCRYPTION;
   163a4:	f884 00e6 	strb.w	r0, [r4, #230]	; 0xe6
				conn->llcp_ack -= 2U;
   163a8:	f7ff bb19 	b.w	159de <ull_conn_rx+0xa4e>
		conn_upd_curr = conn;
   163ac:	601c      	str	r4, [r3, #0]
   163ae:	f7ff b9c5 	b.w	1573c <ull_conn_rx+0x7ac>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   163b2:	682b      	ldr	r3, [r5, #0]
   163b4:	2201      	movs	r2, #1
   163b6:	711a      	strb	r2, [r3, #4]
   163b8:	f7ff b99c 	b.w	156f4 <ull_conn_rx+0x764>
				      0x03) == 0x02) &&
   163bc:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
   163c0:	2a03      	cmp	r2, #3
   163c2:	f47f ac3a 	bne.w	15c3a <ull_conn_rx+0xcaa>
   163c6:	e431      	b.n	15c2c <ull_conn_rx+0xc9c>
				uint16_t interval_min =
   163c8:	f8b6 8020 	ldrh.w	r8, [r6, #32]
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   163cc:	f1b8 0f05 	cmp.w	r8, #5
				uint16_t interval_min =
   163d0:	fa1f f088 	uxth.w	r0, r8
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   163d4:	f67f ade6 	bls.w	15fa4 <ull_conn_rx+0x1014>
				uint16_t interval_max =
   163d8:	f8b6 e022 	ldrh.w	lr, [r6, #34]	; 0x22
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   163dc:	f5be 6f48 	cmp.w	lr, #3200	; 0xc80
				uint16_t interval_max =
   163e0:	fa1f f28e 	uxth.w	r2, lr
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   163e4:	f63f adde 	bhi.w	15fa4 <ull_conn_rx+0x1014>
				    (interval_max > 3200) ||
   163e8:	4290      	cmp	r0, r2
   163ea:	f63f addb 	bhi.w	15fa4 <ull_conn_rx+0x1014>
				uint16_t latency =
   163ee:	f8b6 c024 	ldrh.w	ip, [r6, #36]	; 0x24
   163f2:	fa1f f08c 	uxth.w	r0, ip
				    (interval_min > interval_max) ||
   163f6:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
				uint16_t latency =
   163fa:	e9cd 0001 	strd	r0, r0, [sp, #4]
				    (interval_min > interval_max) ||
   163fe:	f4bf add1 	bcs.w	15fa4 <ull_conn_rx+0x1014>
				uint16_t timeout =
   16402:	8cf0      	ldrh	r0, [r6, #38]	; 0x26
   16404:	f8ad 000e 	strh.w	r0, [sp, #14]
				    (latency > 499) ||
   16408:	f1a0 090a 	sub.w	r9, r0, #10
   1640c:	fa1f f989 	uxth.w	r9, r9
   16410:	f640 4a76 	movw	sl, #3190	; 0xc76
   16414:	45d1      	cmp	r9, sl
				uint16_t timeout =
   16416:	fa1f fb80 	uxth.w	fp, r0
				    (latency > 499) ||
   1641a:	f63f adc3 	bhi.w	15fa4 <ull_conn_rx+0x1014>
				     ((latency + 1) * interval_max)) ||
   1641e:	9801      	ldr	r0, [sp, #4]
   16420:	fb00 2902 	mla	r9, r0, r2, r2
				    (timeout > 3200) ||
   16424:	ebb9 0f8b 	cmp.w	r9, fp, lsl #2
   16428:	f4bf adbc 	bcs.w	15fa4 <ull_conn_rx+0x1014>
				     ((latency + 1) * interval_max)) ||
   1642c:	f896 a028 	ldrb.w	sl, [r6, #40]	; 0x28
   16430:	4552      	cmp	r2, sl
   16432:	f4ff adb7 	bcc.w	15fa4 <ull_conn_rx+0x1014>
				conn->llcp_conn_param.timeout =	timeout;
   16436:	f8bd 000e 	ldrh.w	r0, [sp, #14]
				conn->llcp_conn_param.latency =	latency;
   1643a:	f8a4 c18c 	strh.w	ip, [r4, #396]	; 0x18c
				conn->llcp_conn_param.interval_min =
   1643e:	f8a4 8188 	strh.w	r8, [r4, #392]	; 0x188
				conn->llcp_conn_param.interval_max =
   16442:	f8a4 e18a 	strh.w	lr, [r4, #394]	; 0x18a
				conn->llcp_conn_param.timeout =	timeout;
   16446:	f8a4 018e 	strh.w	r0, [r4, #398]	; 0x18e
				conn->llcp_conn_param.preferred_periodicity =
   1644a:	f884 a190 	strb.w	sl, [r4, #400]	; 0x190
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   1644e:	f896 e02a 	ldrb.w	lr, [r6, #42]	; 0x2a
   16452:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
				     lll->interval) ||
   16456:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   1645a:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
   1645e:	f8a4 0192 	strh.w	r0, [r4, #402]	; 0x192
					sys_le16_to_cpu(cpr->offset0);
   16462:	f896 e02c 	ldrb.w	lr, [r6, #44]	; 0x2c
   16466:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
   1646a:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset0 =
   1646e:	f8a4 0194 	strh.w	r0, [r4, #404]	; 0x194
					sys_le16_to_cpu(cpr->offset1);
   16472:	f896 e02e 	ldrb.w	lr, [r6, #46]	; 0x2e
   16476:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
   1647a:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset1 =
   1647e:	f8a4 0196 	strh.w	r0, [r4, #406]	; 0x196
					sys_le16_to_cpu(cpr->offset2);
   16482:	f896 e030 	ldrb.w	lr, [r6, #48]	; 0x30
   16486:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
   1648a:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset2 =
   1648e:	f8a4 0198 	strh.w	r0, [r4, #408]	; 0x198
					sys_le16_to_cpu(cpr->offset3);
   16492:	f896 e032 	ldrb.w	lr, [r6, #50]	; 0x32
   16496:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
   1649a:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset3 =
   1649e:	f8a4 019a 	strh.w	r0, [r4, #410]	; 0x19a
					sys_le16_to_cpu(cpr->offset4);
   164a2:	f896 0033 	ldrb.w	r0, [r6, #51]	; 0x33
   164a6:	f896 e034 	ldrb.w	lr, [r6, #52]	; 0x34
   164aa:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset4 =
   164ae:	f8a4 019c 	strh.w	r0, [r4, #412]	; 0x19c
					sys_le16_to_cpu(cpr->offset5);
   164b2:	f896 0035 	ldrb.w	r0, [r6, #53]	; 0x35
   164b6:	f896 6036 	ldrb.w	r6, [r6, #54]	; 0x36
				if ((conn->llcp_conn_param.interval_max !=
   164ba:	4562      	cmp	r2, ip
					sys_le16_to_cpu(cpr->offset5);
   164bc:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
				conn->llcp_conn_param.offset5 =
   164c0:	f8a4 019e 	strh.w	r0, [r4, #414]	; 0x19e
				if ((conn->llcp_conn_param.interval_max !=
   164c4:	f000 80af 	beq.w	16626 <ull_conn_rx+0x1696>
					if (conn->llcp_enc.pause_tx) {
   164c8:	0789      	lsls	r1, r1, #30
						conn->llcp_conn_param.state =
   164ca:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
					if (conn->llcp_enc.pause_tx) {
   164ce:	f57f acd7 	bpl.w	15e80 <ull_conn_rx+0xef0>
						(*rx)->hdr.type =
   164d2:	6829      	ldr	r1, [r5, #0]
						conn->llcp_conn_param.state =
   164d4:	2002      	movs	r0, #2
   164d6:	f360 0202 	bfi	r2, r0, #0, #3
						(*rx)->hdr.type =
   164da:	2001      	movs	r0, #1
						conn->llcp_conn_param.state =
   164dc:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
						(*rx)->hdr.type =
   164e0:	7108      	strb	r0, [r1, #4]
   164e2:	e4d2      	b.n	15e8a <ull_conn_rx+0xefa>
			LL_ASSERT(conn->slave.llcp_type == LLCP_NONE);
   164e4:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
			conn->llcp_ack += 2U;
   164e8:	3202      	adds	r2, #2
   164ea:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			LL_ASSERT(conn->slave.llcp_type == LLCP_NONE);
   164ee:	2b00      	cmp	r3, #0
   164f0:	d146      	bne.n	16580 <ull_conn_rx+0x15f0>
			conn->slave.llcp_type = conn->llcp_type;
   164f2:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   164f6:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
   164fa:	f7ff b9c7 	b.w	1588c <ull_conn_rx+0x8fc>
	struct node_tx *tx = NULL;
   164fe:	2100      	movs	r1, #0
   16500:	f7fe bef9 	b.w	152f6 <ull_conn_rx+0x366>
				conn->llcp_length.state =
   16504:	2604      	movs	r6, #4
   16506:	f366 0302 	bfi	r3, r6, #0, #3
				conn->lll.max_tx_octets = eff_tx_octets;
   1650a:	f8a4 2058 	strh.w	r2, [r4, #88]	; 0x58
				conn->lll.max_tx_time = eff_tx_time;
   1650e:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
				conn->llcp_length.state =
   16512:	f884 31ae 	strb.w	r3, [r4, #430]	; 0x1ae
   16516:	e405      	b.n	15d24 <ull_conn_rx+0xd94>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   16518:	791a      	ldrb	r2, [r3, #4]
   1651a:	f002 0203 	and.w	r2, r2, #3
   1651e:	2a03      	cmp	r2, #3
   16520:	f000 80c1 	beq.w	166a6 <ull_conn_rx+0x1716>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   16524:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   16528:	f7ff b822 	b.w	15570 <ull_conn_rx+0x5e0>
			conn->tx_data = conn->tx_data->next;
   1652c:	6818      	ldr	r0, [r3, #0]
   1652e:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   16532:	2a00      	cmp	r2, #0
   16534:	f47f a81c 	bne.w	15570 <ull_conn_rx+0x5e0>
			tx->next = conn->tx_head->next;
   16538:	681a      	ldr	r2, [r3, #0]
   1653a:	600a      	str	r2, [r1, #0]
			conn->tx_head->next = tx;
   1653c:	6019      	str	r1, [r3, #0]
				conn->tx_ctrl_last = tx;
   1653e:	e9c4 1172 	strd	r1, r1, [r4, #456]	; 0x1c8
   16542:	f7ff b81c 	b.w	1557e <ull_conn_rx+0x5ee>
		LL_ASSERT(conn_upd_curr == conn);
   16546:	4f87      	ldr	r7, [pc, #540]	; (16764 <ull_conn_rx+0x17d4>)
   16548:	6839      	ldr	r1, [r7, #0]
   1654a:	428c      	cmp	r4, r1
   1654c:	d010      	beq.n	16570 <ull_conn_rx+0x15e0>
   1654e:	4a86      	ldr	r2, [pc, #536]	; (16768 <ull_conn_rx+0x17d8>)
   16550:	4986      	ldr	r1, [pc, #536]	; (1676c <ull_conn_rx+0x17dc>)
   16552:	4887      	ldr	r0, [pc, #540]	; (16770 <ull_conn_rx+0x17e0>)
   16554:	f241 2329 	movw	r3, #4649	; 0x1229
   16558:	f00e f844 	bl	245e4 <printk>
   1655c:	4040      	eors	r0, r0
   1655e:	f380 8811 	msr	BASEPRI, r0
   16562:	f04f 0003 	mov.w	r0, #3
   16566:	df02      	svc	2
   16568:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   1656c:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   16570:	f884 3185 	strb.w	r3, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   16574:	2300      	movs	r3, #0
   16576:	603b      	str	r3, [r7, #0]
		conn->procedure_expire = 0U;
   16578:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   1657c:	f7ff baae 	b.w	15adc <ull_conn_rx+0xb4c>
			LL_ASSERT(conn->slave.llcp_type == LLCP_NONE);
   16580:	4a79      	ldr	r2, [pc, #484]	; (16768 <ull_conn_rx+0x17d8>)
   16582:	497c      	ldr	r1, [pc, #496]	; (16774 <ull_conn_rx+0x17e4>)
   16584:	487a      	ldr	r0, [pc, #488]	; (16770 <ull_conn_rx+0x17e0>)
   16586:	f241 63c1 	movw	r3, #5825	; 0x16c1
   1658a:	f00e f82b 	bl	245e4 <printk>
   1658e:	4040      	eors	r0, r0
   16590:	f380 8811 	msr	BASEPRI, r0
   16594:	f04f 0003 	mov.w	r0, #3
   16598:	df02      	svc	2
   1659a:	e7aa      	b.n	164f2 <ull_conn_rx+0x1562>
				conn->lll.max_tx_octets = eff_tx_octets;
   1659c:	f8a4 2058 	strh.w	r2, [r4, #88]	; 0x58
				conn->lll.max_tx_time = eff_tx_time;
   165a0:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
   165a4:	e6e9      	b.n	1637a <ull_conn_rx+0x13ea>
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   165a6:	4558      	cmp	r0, fp
   165a8:	f47f aecf 	bne.w	1634a <ull_conn_rx+0x13ba>
			    eff_rx_time == conn->lll.max_rx_time &&
   165ac:	45d4      	cmp	ip, sl
   165ae:	f47f aecc 	bne.w	1634a <ull_conn_rx+0x13ba>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   165b2:	682b      	ldr	r3, [r5, #0]
   165b4:	2501      	movs	r5, #1
   165b6:	711d      	strb	r5, [r3, #4]
				goto send_length_resp;
   165b8:	f7ff bbbe 	b.w	15d38 <ull_conn_rx+0xda8>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   165bc:	2a23      	cmp	r2, #35	; 0x23
   165be:	f43f aa86 	beq.w	15ace <ull_conn_rx+0xb3e>
			conn->slave.ticks_to_offset =
   165c2:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
   165c6:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
   165ca:	f7ff ba80 	b.w	15ace <ull_conn_rx+0xb3e>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   165ce:	2b23      	cmp	r3, #35	; 0x23
   165d0:	f43f adf5 	beq.w	161be <ull_conn_rx+0x122e>
			conn->slave.ticks_to_offset =
   165d4:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
   165d8:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
   165dc:	e5ef      	b.n	161be <ull_conn_rx+0x122e>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   165de:	791a      	ldrb	r2, [r3, #4]
   165e0:	f002 0203 	and.w	r2, r2, #3
   165e4:	2a03      	cmp	r2, #3
   165e6:	d072      	beq.n	166ce <ull_conn_rx+0x173e>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   165e8:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   165ec:	f7ff b9c4 	b.w	15978 <ull_conn_rx+0x9e8>
			conn->tx_data = conn->tx_data->next;
   165f0:	6819      	ldr	r1, [r3, #0]
   165f2:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   165f6:	2a00      	cmp	r2, #0
   165f8:	f47f a9be 	bne.w	15978 <ull_conn_rx+0x9e8>
			tx->next = conn->tx_head->next;
   165fc:	681a      	ldr	r2, [r3, #0]
   165fe:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   16600:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
   16602:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   16606:	f7ff b9be 	b.w	15986 <ull_conn_rx+0x9f6>
	LL_ASSERT(rx_dle);
   1660a:	4a57      	ldr	r2, [pc, #348]	; (16768 <ull_conn_rx+0x17d8>)
   1660c:	495a      	ldr	r1, [pc, #360]	; (16778 <ull_conn_rx+0x17e8>)
   1660e:	4858      	ldr	r0, [pc, #352]	; (16770 <ull_conn_rx+0x17e0>)
   16610:	f241 43eb 	movw	r3, #5355	; 0x14eb
   16614:	f00d ffe6 	bl	245e4 <printk>
   16618:	4040      	eors	r0, r0
   1661a:	f380 8811 	msr	BASEPRI, r0
   1661e:	f04f 0003 	mov.w	r0, #3
   16622:	df02      	svc	2
   16624:	e599      	b.n	1615a <ull_conn_rx+0x11ca>
				     lll->interval) ||
   16626:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   16628:	9802      	ldr	r0, [sp, #8]
   1662a:	4282      	cmp	r2, r0
   1662c:	f47f af4c 	bne.w	164c8 <ull_conn_rx+0x1538>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   16630:	f240 42e2 	movw	r2, #1250	; 0x4e2
   16634:	fb02 f00c 	mul.w	r0, r2, ip
   16638:	f242 7210 	movw	r2, #10000	; 0x2710
				     lll->latency) ||
   1663c:	f8b4 60c2 	ldrh.w	r6, [r4, #194]	; 0xc2
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   16640:	fb02 020b 	mla	r2, r2, fp, r0
   16644:	3a01      	subs	r2, #1
   16646:	fbb2 f2f0 	udiv	r2, r2, r0
				     lll->latency) ||
   1664a:	b292      	uxth	r2, r2
   1664c:	4296      	cmp	r6, r2
   1664e:	f47f af3b 	bne.w	164c8 <ull_conn_rx+0x1538>
				conn->llcp_conn_param.state =
   16652:	f8b4 2186 	ldrh.w	r2, [r4, #390]	; 0x186
   16656:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
   1665a:	f042 0201 	orr.w	r2, r2, #1
   1665e:	f8a4 2186 	strh.w	r2, [r4, #390]	; 0x186
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16662:	682a      	ldr	r2, [r5, #0]
   16664:	2101      	movs	r1, #1
   16666:	7111      	strb	r1, [r2, #4]
   16668:	e40f      	b.n	15e8a <ull_conn_rx+0xefa>
			     lll->interval) ||
   1666a:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
   1666c:	4550      	cmp	r0, sl
   1666e:	f47f ac05 	bne.w	15e7c <ull_conn_rx+0xeec>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   16672:	f240 40e2 	movw	r0, #1250	; 0x4e2
   16676:	fb00 f101 	mul.w	r1, r0, r1
   1667a:	f242 7010 	movw	r0, #10000	; 0x2710
   1667e:	fb00 1202 	mla	r2, r0, r2, r1
			    (conn->llcp_conn_param.latency != lll->latency) ||
   16682:	f8b4 00c2 	ldrh.w	r0, [r4, #194]	; 0xc2
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   16686:	3a01      	subs	r2, #1
   16688:	fbb2 f2f1 	udiv	r2, r2, r1
			    (conn->llcp_conn_param.latency != lll->latency) ||
   1668c:	b292      	uxth	r2, r2
   1668e:	4290      	cmp	r0, r2
   16690:	f47f abf4 	bne.w	15e7c <ull_conn_rx+0xeec>
   16694:	e7dd      	b.n	16652 <ull_conn_rx+0x16c2>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   16696:	793b      	ldrb	r3, [r7, #4]
   16698:	f003 0303 	and.w	r3, r3, #3
   1669c:	2b03      	cmp	r3, #3
   1669e:	d05b      	beq.n	16758 <ull_conn_rx+0x17c8>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   166a0:	e9c4 7772 	strd	r7, r7, [r4, #456]	; 0x1c8
   166a4:	e46f      	b.n	15f86 <ull_conn_rx+0xff6>
	    ((pdu_data_tx->llctrl.opcode !=
   166a6:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   166a8:	2a03      	cmp	r2, #3
   166aa:	f43f af45 	beq.w	16538 <ull_conn_rx+0x15a8>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   166ae:	2a0a      	cmp	r2, #10
   166b0:	f47f af38 	bne.w	16524 <ull_conn_rx+0x1594>
   166b4:	e740      	b.n	16538 <ull_conn_rx+0x15a8>
			conn->tx_data = conn->tx_data->next;
   166b6:	6839      	ldr	r1, [r7, #0]
   166b8:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   166bc:	2b00      	cmp	r3, #0
   166be:	f47f ac62 	bne.w	15f86 <ull_conn_rx+0xff6>
			tx->next = conn->tx_head->next;
   166c2:	683b      	ldr	r3, [r7, #0]
   166c4:	6013      	str	r3, [r2, #0]
			conn->tx_head->next = tx;
   166c6:	603a      	str	r2, [r7, #0]
				conn->tx_ctrl_last = tx;
   166c8:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   166cc:	e462      	b.n	15f94 <ull_conn_rx+0x1004>
	    ((pdu_data_tx->llctrl.opcode !=
   166ce:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   166d0:	2a03      	cmp	r2, #3
   166d2:	d093      	beq.n	165fc <ull_conn_rx+0x166c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   166d4:	2a0a      	cmp	r2, #10
   166d6:	d187      	bne.n	165e8 <ull_conn_rx+0x1658>
   166d8:	e790      	b.n	165fc <ull_conn_rx+0x166c>
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
   166da:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
   166de:	f894 210d 	ldrb.w	r2, [r4, #269]	; 0x10d
   166e2:	4293      	cmp	r3, r2
   166e4:	d00e      	beq.n	16704 <ull_conn_rx+0x1774>
   166e6:	4a20      	ldr	r2, [pc, #128]	; (16768 <ull_conn_rx+0x17d8>)
   166e8:	4924      	ldr	r1, [pc, #144]	; (1677c <ull_conn_rx+0x17ec>)
   166ea:	4821      	ldr	r0, [pc, #132]	; (16770 <ull_conn_rx+0x17e0>)
   166ec:	f241 230e 	movw	r3, #4622	; 0x120e
   166f0:	f00d ff78 	bl	245e4 <printk>
   166f4:	4040      	eors	r0, r0
   166f6:	f380 8811 	msr	BASEPRI, r0
   166fa:	f04f 0003 	mov.w	r0, #3
   166fe:	df02      	svc	2
   16700:	f894 210d 	ldrb.w	r2, [r4, #269]	; 0x10d
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   16704:	f894 1186 	ldrb.w	r1, [r4, #390]	; 0x186
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   16708:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
   1670c:	f8a4 3110 	strh.w	r3, [r4, #272]	; 0x110
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   16710:	2305      	movs	r3, #5
   16712:	f363 0102 	bfi	r1, r3, #0, #3
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   16716:	f894 010e 	ldrb.w	r0, [r4, #270]	; 0x10e
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1671a:	f884 1186 	strb.w	r1, [r4, #390]	; 0x186
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   1671e:	f3c1 03c0 	ubfx	r3, r1, #3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   16722:	00db      	lsls	r3, r3, #3
   16724:	f020 000f 	bic.w	r0, r0, #15
   16728:	f043 0301 	orr.w	r3, r3, #1
   1672c:	4303      	orrs	r3, r0
		conn->llcp_cu.ack--;
   1672e:	3a01      	subs	r2, #1
		conn->llcp_cu.win_size = 1U;
   16730:	2501      	movs	r5, #1
		conn->llcp_cu.ack--;
   16732:	f884 210d 	strb.w	r2, [r4, #269]	; 0x10d
		conn->llcp_cu.win_offset_us = 0U;
   16736:	2000      	movs	r0, #0
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   16738:	f8b4 218c 	ldrh.w	r2, [r4, #396]	; 0x18c
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1673c:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   16740:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
		conn->llcp_cu.win_size = 1U;
   16744:	f884 511c 	strb.w	r5, [r4, #284]	; 0x11c
		conn->llcp_cu.win_offset_us = 0U;
   16748:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   1674c:	f8a4 2112 	strh.w	r2, [r4, #274]	; 0x112
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   16750:	f8a4 3114 	strh.w	r3, [r4, #276]	; 0x114
	if (err) {
   16754:	f7fe bc69 	b.w	1502a <ull_conn_rx+0x9a>
	    ((pdu_data_tx->llctrl.opcode !=
   16758:	79fb      	ldrb	r3, [r7, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1675a:	2b03      	cmp	r3, #3
   1675c:	d0b1      	beq.n	166c2 <ull_conn_rx+0x1732>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1675e:	2b0a      	cmp	r3, #10
   16760:	d19e      	bne.n	166a0 <ull_conn_rx+0x1710>
   16762:	e7ae      	b.n	166c2 <ull_conn_rx+0x1732>
   16764:	20001890 	.word	0x20001890
   16768:	0002b604 	.word	0x0002b604
   1676c:	0002b778 	.word	0x0002b778
   16770:	0002b0c4 	.word	0x0002b0c4
   16774:	0002b72c 	.word	0x0002b72c
   16778:	0002b790 	.word	0x0002b790
   1677c:	0002b750 	.word	0x0002b750

00016780 <ull_conn_llcp>:
{
   16780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16784:	4604      	mov	r4, r0
	if ((conn->llcp_ack == conn->llcp_req) &&
   16786:	f890 00e5 	ldrb.w	r0, [r0, #229]	; 0xe5
   1678a:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   1678e:	4298      	cmp	r0, r3
{
   16790:	460d      	mov	r5, r1
   16792:	4616      	mov	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) &&
   16794:	d042      	beq.n	1681c <ull_conn_llcp+0x9c>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   16796:	1a1b      	subs	r3, r3, r0
   16798:	f003 0303 	and.w	r3, r3, #3
   1679c:	2b02      	cmp	r3, #2
   1679e:	d055      	beq.n	1684c <ull_conn_llcp+0xcc>
   167a0:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
   167a4:	468c      	mov	ip, r1
	if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   167a6:	f1bc 0f00 	cmp.w	ip, #0
   167aa:	f2c0 8084 	blt.w	168b6 <ull_conn_llcp+0x136>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
   167ae:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
   167b2:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
   167b6:	429a      	cmp	r2, r3
   167b8:	d07a      	beq.n	168b0 <ull_conn_llcp+0x130>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   167ba:	48c0      	ldr	r0, [pc, #768]	; (16abc <ull_conn_llcp+0x33c>)
   167bc:	f7f8 fae6 	bl	ed8c <mem_acquire>
		if (tx) {
   167c0:	2800      	cmp	r0, #0
   167c2:	d06c      	beq.n	1689e <ull_conn_llcp+0x11e>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
   167c4:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
   167c8:	f884 3141 	strb.w	r3, [r4, #321]	; 0x141
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   167cc:	7903      	ldrb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
   167ce:	2202      	movs	r2, #2
   167d0:	7142      	strb	r2, [r0, #5]
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   167d2:	f043 0303 	orr.w	r3, r3, #3
   167d6:	7103      	strb	r3, [r0, #4]
			pdu_tx->llctrl.opcode =
   167d8:	71c2      	strb	r2, [r0, #7]
	    conn->tx_head &&
   167da:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
			pdu_tx->llctrl.terminate_ind.error_code =
   167de:	f894 2142 	ldrb.w	r2, [r4, #322]	; 0x142
   167e2:	7202      	strb	r2, [r0, #8]
	if (
   167e4:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   167e8:	2b00      	cmp	r3, #0
   167ea:	d04b      	beq.n	16884 <ull_conn_llcp+0x104>
	    !conn->llcp_enc.pause_tx &&
   167ec:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   167f0:	078d      	lsls	r5, r1, #30
   167f2:	d447      	bmi.n	16884 <ull_conn_llcp+0x104>
	    !conn->llcp_phy.pause_tx &&
   167f4:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   167f8:	07c9      	lsls	r1, r1, #31
   167fa:	d443      	bmi.n	16884 <ull_conn_llcp+0x104>
		if (conn->tx_head == conn->tx_data) {
   167fc:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   16800:	428b      	cmp	r3, r1
   16802:	f000 846f 	beq.w	170e4 <ull_conn_llcp+0x964>
		} else if (!conn->tx_ctrl) {
   16806:	2a00      	cmp	r2, #0
   16808:	d13e      	bne.n	16888 <ull_conn_llcp+0x108>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1680a:	791a      	ldrb	r2, [r3, #4]
   1680c:	f002 0203 	and.w	r2, r2, #3
   16810:	2a03      	cmp	r2, #3
   16812:	f000 8700 	beq.w	17616 <ull_conn_llcp+0xe96>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   16816:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
   1681a:	e037      	b.n	1688c <ull_conn_llcp+0x10c>
   1681c:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
	if ((conn->llcp_ack == conn->llcp_req) &&
   16820:	2900      	cmp	r1, #0
   16822:	468c      	mov	ip, r1
   16824:	f2c0 81c5 	blt.w	16bb2 <ull_conn_llcp+0x432>
	    !conn->llcp_enc.pause_rx) {
   16828:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    (!conn->lll.role || (conn->slave.llcp_type == LLCP_NONE)) &&
   1682c:	f012 0801 	ands.w	r8, r2, #1
   16830:	d1b9      	bne.n	167a6 <ull_conn_llcp+0x26>
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
   16832:	f894 e10d 	ldrb.w	lr, [r4, #269]	; 0x10d
   16836:	f894 710c 	ldrb.w	r7, [r4, #268]	; 0x10c
   1683a:	4577      	cmp	r7, lr
   1683c:	f000 8369 	beq.w	16f12 <ull_conn_llcp+0x792>
			conn->llcp_ack -= 2U;
   16840:	1e83      	subs	r3, r0, #2
			conn->llcp_type = LLCP_CONN_UPD;
   16842:	2201      	movs	r2, #1
			conn->llcp_ack -= 2U;
   16844:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
			conn->llcp_type = LLCP_CONN_UPD;
   16848:	f884 20e6 	strb.w	r2, [r4, #230]	; 0xe6
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   1684c:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
   16850:	f894 21ad 	ldrb.w	r2, [r4, #429]	; 0x1ad
   16854:	429a      	cmp	r2, r3
   16856:	d006      	beq.n	16866 <ull_conn_llcp+0xe6>
			if ((conn->llcp_length.state ==
   16858:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
   1685c:	f002 0106 	and.w	r1, r2, #6
   16860:	2904      	cmp	r1, #4
   16862:	f000 81ac 	beq.w	16bbe <ull_conn_llcp+0x43e>
		switch (conn->llcp_type) {
   16866:	f894 90e6 	ldrb.w	r9, [r4, #230]	; 0xe6
   1686a:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
   1686e:	2b05      	cmp	r3, #5
   16870:	f200 8191 	bhi.w	16b96 <ull_conn_llcp+0x416>
   16874:	e8df f013 	tbh	[pc, r3, lsl #1]
   16878:	012a015c 	.word	0x012a015c
   1687c:	018f009e 	.word	0x018f009e
   16880:	00580063 	.word	0x00580063
		if (!conn->tx_ctrl) {
   16884:	2a00      	cmp	r2, #0
   16886:	d049      	beq.n	1691c <ull_conn_llcp+0x19c>
	tx->next = conn->tx_ctrl_last->next;
   16888:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1688c:	681a      	ldr	r2, [r3, #0]
   1688e:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   16890:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   16892:	6803      	ldr	r3, [r0, #0]
   16894:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   16898:	b90b      	cbnz	r3, 1689e <ull_conn_llcp+0x11e>
		conn->tx_data_last = tx;
   1689a:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
		if (!conn->procedure_expire) {
   1689e:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
   168a2:	b928      	cbnz	r0, 168b0 <ull_conn_llcp+0x130>
			conn->procedure_expire = conn->supervision_reload;
   168a4:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
			if (conn->procedure_expire <= 1U) {
   168a8:	2b01      	cmp	r3, #1
   168aa:	d91e      	bls.n	168ea <ull_conn_llcp+0x16a>
			conn->procedure_expire = conn->supervision_reload;
   168ac:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	return 0;
   168b0:	2000      	movs	r0, #0
}
   168b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   168b6:	f894 20d9 	ldrb.w	r2, [r4, #217]	; 0xd9
	if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   168ba:	2a00      	cmp	r2, #0
   168bc:	f43f af77 	beq.w	167ae <ull_conn_llcp+0x2e>
		switch (conn->slave.llcp_type) {
   168c0:	2a02      	cmp	r2, #2
   168c2:	f000 8140 	beq.w	16b46 <ull_conn_llcp+0x3c6>
   168c6:	2a06      	cmp	r2, #6
   168c8:	d014      	beq.n	168f4 <ull_conn_llcp+0x174>
   168ca:	2a01      	cmp	r2, #1
   168cc:	d01b      	beq.n	16906 <ull_conn_llcp+0x186>
			LL_ASSERT(0);
   168ce:	4a7c      	ldr	r2, [pc, #496]	; (16ac0 <ull_conn_llcp+0x340>)
   168d0:	497c      	ldr	r1, [pc, #496]	; (16ac4 <ull_conn_llcp+0x344>)
   168d2:	487d      	ldr	r0, [pc, #500]	; (16ac8 <ull_conn_llcp+0x348>)
   168d4:	f240 434f 	movw	r3, #1103	; 0x44f
   168d8:	f00d fe84 	bl	245e4 <printk>
   168dc:	4040      	eors	r0, r0
   168de:	f380 8811 	msr	BASEPRI, r0
   168e2:	f04f 0003 	mov.w	r0, #3
   168e6:	df02      	svc	2
			break;
   168e8:	e761      	b.n	167ae <ull_conn_llcp+0x2e>
				conn->procedure_expire++;
   168ea:	3301      	adds	r3, #1
   168ec:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
}
   168f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			event_counter = lll->event_counter +
   168f4:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
   168f6:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   168f8:	440a      	add	r2, r1
					lll->latency_prepare + lazy;
   168fa:	4432      	add	r2, r6
			event_phy_upd_ind_prep(conn, event_counter);
   168fc:	b291      	uxth	r1, r2
   168fe:	4620      	mov	r0, r4
   16900:	f7fd fe24 	bl	1454c <event_phy_upd_ind_prep>
		break;
   16904:	e753      	b.n	167ae <ull_conn_llcp+0x2e>
			if (event_conn_upd_prep(conn, lazy,
   16906:	462a      	mov	r2, r5
   16908:	4631      	mov	r1, r6
   1690a:	4620      	mov	r0, r4
   1690c:	f7eb f88c 	bl	1a28 <event_conn_upd_prep>
   16910:	2800      	cmp	r0, #0
   16912:	f47f af4c 	bne.w	167ae <ull_conn_llcp+0x2e>
				return -ECANCELED;
   16916:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   1691a:	e7ca      	b.n	168b2 <ull_conn_llcp+0x132>
			tx->next = conn->tx_head;
   1691c:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   1691e:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   16922:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   16926:	e7b7      	b.n	16898 <ull_conn_llcp+0x118>
			event_counter = lll->event_counter +
   16928:	8e61      	ldrh	r1, [r4, #50]	; 0x32
   1692a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   1692c:	4419      	add	r1, r3
					lll->latency_prepare + lazy;
   1692e:	4431      	add	r1, r6
			event_phy_upd_ind_prep(conn, event_counter);
   16930:	b289      	uxth	r1, r1
   16932:	4620      	mov	r0, r4
   16934:	f7fd fe0a 	bl	1454c <event_phy_upd_ind_prep>
		break;
   16938:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   1693c:	e733      	b.n	167a6 <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1693e:	485f      	ldr	r0, [pc, #380]	; (16abc <ull_conn_llcp+0x33c>)
   16940:	f7f8 fa24 	bl	ed8c <mem_acquire>
	if (tx) {
   16944:	2800      	cmp	r0, #0
   16946:	f000 80fb 	beq.w	16b40 <ull_conn_llcp+0x3c0>
		conn->llcp_ack = conn->llcp_req;
   1694a:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   1694e:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
   16952:	2301      	movs	r3, #1
   16954:	7143      	strb	r3, [r0, #5]
   16956:	e9d4 3771 	ldrd	r3, r7, [r4, #452]	; 0x1c4
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1695a:	7902      	ldrb	r2, [r0, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
   1695c:	2112      	movs	r1, #18
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1695e:	f042 0203 	orr.w	r2, r2, #3
   16962:	7102      	strb	r2, [r0, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
   16964:	71c1      	strb	r1, [r0, #7]
	if (
   16966:	2b00      	cmp	r3, #0
   16968:	f000 8327 	beq.w	16fba <ull_conn_llcp+0x83a>
	    !conn->llcp_enc.pause_tx &&
   1696c:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   16970:	0791      	lsls	r1, r2, #30
   16972:	f100 8322 	bmi.w	16fba <ull_conn_llcp+0x83a>
	    !conn->llcp_phy.pause_tx &&
   16976:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   1697a:	07d2      	lsls	r2, r2, #31
   1697c:	f100 831d 	bmi.w	16fba <ull_conn_llcp+0x83a>
		if (conn->tx_head == conn->tx_data) {
   16980:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   16984:	4293      	cmp	r3, r2
   16986:	f000 87f1 	beq.w	1796c <ull_conn_llcp+0x11ec>
		} else if (!conn->tx_ctrl) {
   1698a:	2f00      	cmp	r7, #0
   1698c:	f000 87fc 	beq.w	17988 <ull_conn_llcp+0x1208>
	tx->next = conn->tx_ctrl_last->next;
   16990:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   16994:	681a      	ldr	r2, [r3, #0]
   16996:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   16998:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   1699a:	6803      	ldr	r3, [r0, #0]
   1699c:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   169a0:	2b00      	cmp	r3, #0
   169a2:	f000 84ab 	beq.w	172fc <ull_conn_llcp+0xb7c>
		conn->procedure_expire = conn->procedure_reload;
   169a6:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   169aa:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   169ae:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   169b2:	e6f8      	b.n	167a6 <ull_conn_llcp+0x26>
	if (conn->llcp.encryption.state) {
   169b4:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
   169b8:	f012 0803 	ands.w	r8, r2, #3
   169bc:	f000 8161 	beq.w	16c82 <ull_conn_llcp+0x502>
		if (lll->role &&
   169c0:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   169c4:	2b00      	cmp	r3, #0
   169c6:	f6bf aef2 	bge.w	167ae <ull_conn_llcp+0x2e>
   169ca:	f1b8 0f01 	cmp.w	r8, #1
   169ce:	f47f af72 	bne.w	168b6 <ull_conn_llcp+0x136>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   169d2:	483a      	ldr	r0, [pc, #232]	; (16abc <ull_conn_llcp+0x33c>)
   169d4:	f7f8 f9da 	bl	ed8c <mem_acquire>
	if (!tx) {
   169d8:	4680      	mov	r8, r0
   169da:	2800      	cmp	r0, #0
   169dc:	f000 80b0 	beq.w	16b40 <ull_conn_llcp+0x3c0>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   169e0:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   169e2:	2204      	movs	r2, #4
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   169e4:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   169e8:	210d      	movs	r1, #13
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
   169ea:	f100 0708 	add.w	r7, r0, #8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   169ee:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   169f0:	7141      	strb	r1, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   169f2:	71c2      	strb	r2, [r0, #7]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
   169f4:	210c      	movs	r1, #12
   169f6:	4638      	mov	r0, r7
   169f8:	f003 fa56 	bl	19ea8 <lll_csrand_isr_get>
   169fc:	f8d8 3008 	ldr.w	r3, [r8, #8]
   16a00:	f8d8 200c 	ldr.w	r2, [r8, #12]
   16a04:	f8c4 2102 	str.w	r2, [r4, #258]	; 0x102
   16a08:	f8c4 30fe 	str.w	r3, [r4, #254]	; 0xfe
	    conn->tx_head &&
   16a0c:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   16a10:	f8d8 2010 	ldr.w	r2, [r8, #16]
   16a14:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	if (
   16a18:	2b00      	cmp	r3, #0
   16a1a:	f000 85b6 	beq.w	1758a <ull_conn_llcp+0xe0a>
	    !conn->llcp_enc.pause_tx &&
   16a1e:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
   16a22:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
	    conn->tx_head &&
   16a26:	0789      	lsls	r1, r1, #30
   16a28:	f100 85b1 	bmi.w	1758e <ull_conn_llcp+0xe0e>
	    !conn->llcp_phy.pause_tx &&
   16a2c:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   16a30:	07cf      	lsls	r7, r1, #31
   16a32:	f100 85ac 	bmi.w	1758e <ull_conn_llcp+0xe0e>
		if (conn->tx_head == conn->tx_data) {
   16a36:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   16a3a:	428b      	cmp	r3, r1
   16a3c:	f000 87e2 	beq.w	17a04 <ull_conn_llcp+0x1284>
		} else if (!conn->tx_ctrl) {
   16a40:	2a00      	cmp	r2, #0
   16a42:	f001 8055 	beq.w	17af0 <ull_conn_llcp+0x1370>
	tx->next = conn->tx_ctrl_last->next;
   16a46:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   16a4a:	681a      	ldr	r2, [r3, #0]
   16a4c:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
   16a50:	f8c3 8000 	str.w	r8, [r3]
	conn->tx_ctrl_last = tx;
   16a54:	f8d8 3000 	ldr.w	r3, [r8]
   16a58:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
	if (!tx->next) {
   16a5c:	2b00      	cmp	r3, #0
   16a5e:	f000 86d1 	beq.w	17804 <ull_conn_llcp+0x1084>
			rx = ll_pdu_rx_alloc();
   16a62:	f7fc fab7 	bl	12fd4 <ll_pdu_rx_alloc>
			if (!rx) {
   16a66:	4601      	mov	r1, r0
   16a68:	2800      	cmp	r0, #0
   16a6a:	d069      	beq.n	16b40 <ull_conn_llcp+0x3c0>
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   16a6c:	7f0b      	ldrb	r3, [r1, #28]
			rx->hdr.handle = conn->lll.handle;
   16a6e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   16a70:	80ca      	strh	r2, [r1, #6]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   16a72:	f043 0303 	orr.w	r3, r3, #3
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   16a76:	2203      	movs	r2, #3
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
   16a78:	2017      	movs	r0, #23
   16a7a:	7748      	strb	r0, [r1, #29]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   16a7c:	770b      	strb	r3, [r1, #28]
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   16a7e:	710a      	strb	r2, [r1, #4]
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   16a80:	77ca      	strb	r2, [r1, #31]
   16a82:	f8d4 216d 	ldr.w	r2, [r4, #365]	; 0x16d
   16a86:	f8d4 3169 	ldr.w	r3, [r4, #361]	; 0x169
   16a8a:	620b      	str	r3, [r1, #32]
   16a8c:	624a      	str	r2, [r1, #36]	; 0x24
			pdu->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
   16a8e:	f894 3167 	ldrb.w	r3, [r4, #359]	; 0x167
   16a92:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
			pdu->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
   16a96:	f894 3168 	ldrb.w	r3, [r4, #360]	; 0x168
   16a9a:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
			ll_rx_put(rx->hdr.link, rx);
   16a9e:	6808      	ldr	r0, [r1, #0]
   16aa0:	f7fc fa5c 	bl	12f5c <ll_rx_put>
			ll_rx_sched();
   16aa4:	f7fc fa64 	bl	12f70 <ll_rx_sched>
			conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
   16aa8:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   16aac:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   16ab0:	2202      	movs	r2, #2
   16ab2:	f362 0301 	bfi	r3, r2, #0, #2
   16ab6:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
   16aba:	e674      	b.n	167a6 <ull_conn_llcp+0x26>
   16abc:	20001914 	.word	0x20001914
   16ac0:	0002b604 	.word	0x0002b604
   16ac4:	0002b15c 	.word	0x0002b15c
   16ac8:	0002b0c4 	.word	0x0002b0c4
			event_counter = lll->event_counter +
   16acc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   16ace:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
	if (conn->llcp.chan_map.initiate) {
   16ad0:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
			event_counter = lll->event_counter +
   16ad4:	440b      	add	r3, r1
					lll->latency_prepare + lazy;
   16ad6:	4433      	add	r3, r6
	if (conn->llcp.chan_map.initiate) {
   16ad8:	f012 0201 	ands.w	r2, r2, #1
			event_counter = lll->event_counter +
   16adc:	b29f      	uxth	r7, r3
	if (conn->llcp.chan_map.initiate) {
   16ade:	f040 8085 	bne.w	16bec <ull_conn_llcp+0x46c>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   16ae2:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
   16ae6:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   16aea:	1afb      	subs	r3, r7, r3
   16aec:	0418      	lsls	r0, r3, #16
   16aee:	f53f ae5a 	bmi.w	167a6 <ull_conn_llcp+0x26>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   16af2:	f1bc 0f00 	cmp.w	ip, #0
   16af6:	f2c0 83f9 	blt.w	172ec <ull_conn_llcp+0xb6c>
			conn->llcp_ack = conn->llcp_req;
   16afa:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   16afe:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
   16b02:	4623      	mov	r3, r4
		memcpy(&lll->data_chan_map[0],
   16b04:	f104 0034 	add.w	r0, r4, #52	; 0x34
   16b08:	f853 2fe9 	ldr.w	r2, [r3, #233]!
   16b0c:	6362      	str	r2, [r4, #52]	; 0x34
   16b0e:	791b      	ldrb	r3, [r3, #4]
   16b10:	7103      	strb	r3, [r0, #4]
			util_ones_count_get(&lll->data_chan_map[0],
   16b12:	2105      	movs	r1, #5
   16b14:	f7f8 fb06 	bl	f124 <util_ones_count_get>
		lll->data_chan_count =
   16b18:	f894 c039 	ldrb.w	ip, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   16b1c:	2301      	movs	r3, #1
		lll->data_chan_count =
   16b1e:	f360 0c05 	bfi	ip, r0, #0, #6
   16b22:	f884 c039 	strb.w	ip, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   16b26:	f884 31d8 	strb.w	r3, [r4, #472]	; 0x1d8
   16b2a:	fa4f fc8c 	sxtb.w	ip, ip
   16b2e:	e63a      	b.n	167a6 <ull_conn_llcp+0x26>
			if (event_conn_upd_prep(conn, lazy,
   16b30:	462a      	mov	r2, r5
   16b32:	4631      	mov	r1, r6
   16b34:	4620      	mov	r0, r4
   16b36:	f7ea ff77 	bl	1a28 <event_conn_upd_prep>
   16b3a:	2800      	cmp	r0, #0
   16b3c:	f43f aeeb 	beq.w	16916 <ull_conn_llcp+0x196>
			break;
   16b40:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   16b44:	e62f      	b.n	167a6 <ull_conn_llcp+0x26>
			event_counter = lll->event_counter +
   16b46:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   16b48:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
	if (conn->llcp.chan_map.initiate) {
   16b4a:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
			event_counter = lll->event_counter +
   16b4e:	440a      	add	r2, r1
					lll->latency_prepare + lazy;
   16b50:	4432      	add	r2, r6
	if (conn->llcp.chan_map.initiate) {
   16b52:	f013 0301 	ands.w	r3, r3, #1
			event_counter = lll->event_counter +
   16b56:	b296      	uxth	r6, r2
	if (conn->llcp.chan_map.initiate) {
   16b58:	f040 80f4 	bne.w	16d44 <ull_conn_llcp+0x5c4>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   16b5c:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
   16b60:	1ab6      	subs	r6, r6, r2
   16b62:	0436      	lsls	r6, r6, #16
   16b64:	f53f ae23 	bmi.w	167ae <ull_conn_llcp+0x2e>
   16b68:	4622      	mov	r2, r4
			conn->slave.llcp_type = LLCP_NONE;
   16b6a:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
   16b6e:	f852 3fe9 	ldr.w	r3, [r2, #233]!
   16b72:	6363      	str	r3, [r4, #52]	; 0x34
		memcpy(&lll->data_chan_map[0],
   16b74:	f104 0034 	add.w	r0, r4, #52	; 0x34
   16b78:	7913      	ldrb	r3, [r2, #4]
   16b7a:	7103      	strb	r3, [r0, #4]
			util_ones_count_get(&lll->data_chan_map[0],
   16b7c:	2105      	movs	r1, #5
   16b7e:	f7f8 fad1 	bl	f124 <util_ones_count_get>
		lll->data_chan_count =
   16b82:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   16b86:	2201      	movs	r2, #1
		lll->data_chan_count =
   16b88:	f360 0305 	bfi	r3, r0, #0, #6
   16b8c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   16b90:	f884 21d8 	strb.w	r2, [r4, #472]	; 0x1d8
   16b94:	e60b      	b.n	167ae <ull_conn_llcp+0x2e>
			LL_ASSERT(0);
   16b96:	4ab1      	ldr	r2, [pc, #708]	; (16e5c <ull_conn_llcp+0x6dc>)
   16b98:	49b1      	ldr	r1, [pc, #708]	; (16e60 <ull_conn_llcp+0x6e0>)
   16b9a:	48b2      	ldr	r0, [pc, #712]	; (16e64 <ull_conn_llcp+0x6e4>)
   16b9c:	f240 431e 	movw	r3, #1054	; 0x41e
   16ba0:	f00d fd20 	bl	245e4 <printk>
   16ba4:	4040      	eors	r0, r0
   16ba6:	f380 8811 	msr	BASEPRI, r0
   16baa:	f04f 0003 	mov.w	r0, #3
   16bae:	df02      	svc	2
   16bb0:	e7c6      	b.n	16b40 <ull_conn_llcp+0x3c0>
	    (!conn->lll.role || (conn->slave.llcp_type == LLCP_NONE)) &&
   16bb2:	f894 20d9 	ldrb.w	r2, [r4, #217]	; 0xd9
   16bb6:	2a00      	cmp	r2, #0
   16bb8:	f47f ae82 	bne.w	168c0 <ull_conn_llcp+0x140>
   16bbc:	e634      	b.n	16828 <ull_conn_llcp+0xa8>
	switch (conn->llcp_length.state) {
   16bbe:	f002 0107 	and.w	r1, r2, #7
   16bc2:	2906      	cmp	r1, #6
   16bc4:	f201 8174 	bhi.w	17eb0 <ull_conn_llcp+0x1730>
   16bc8:	a001      	add	r0, pc, #4	; (adr r0, 16bd0 <ull_conn_llcp+0x450>)
   16bca:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   16bce:	bf00      	nop
   16bd0:	00016e6d 	.word	0x00016e6d
   16bd4:	00016867 	.word	0x00016867
   16bd8:	00016867 	.word	0x00016867
   16bdc:	00016867 	.word	0x00016867
   16be0:	00016dd9 	.word	0x00016dd9
   16be4:	00016dd9 	.word	0x00016dd9
   16be8:	00016867 	.word	0x00016867
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   16bec:	489e      	ldr	r0, [pc, #632]	; (16e68 <ull_conn_llcp+0x6e8>)
   16bee:	f7f8 f8cd 	bl	ed8c <mem_acquire>
		if (tx) {
   16bf2:	2800      	cmp	r0, #0
   16bf4:	d0a4      	beq.n	16b40 <ull_conn_llcp+0x3c0>
			conn->llcp.chan_map.instant = event_counter +
   16bf6:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			conn->llcp.chan_map.initiate = 0U;
   16bf8:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16bfc:	7902      	ldrb	r2, [r0, #4]
			conn->llcp.chan_map.instant = event_counter +
   16bfe:	443b      	add	r3, r7
						      conn->lll.latency + 6;
   16c00:	3306      	adds	r3, #6
			conn->llcp.chan_map.initiate = 0U;
   16c02:	f36f 0100 	bfc	r1, #0, #1
			conn->llcp.chan_map.instant = event_counter +
   16c06:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
			conn->llcp.chan_map.initiate = 0U;
   16c0a:	f884 10e8 	strb.w	r1, [r4, #232]	; 0xe8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16c0e:	f042 0203 	orr.w	r2, r2, #3
   16c12:	4623      	mov	r3, r4
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   16c14:	2708      	movs	r7, #8
			pdu_ctrl_tx->llctrl.opcode =
   16c16:	2101      	movs	r1, #1
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   16c18:	7147      	strb	r7, [r0, #5]
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16c1a:	7102      	strb	r2, [r0, #4]
			pdu_ctrl_tx->llctrl.opcode =
   16c1c:	71c1      	strb	r1, [r0, #7]
   16c1e:	f853 2fe9 	ldr.w	r2, [r3, #233]!
   16c22:	6082      	str	r2, [r0, #8]
   16c24:	791b      	ldrb	r3, [r3, #4]
   16c26:	7303      	strb	r3, [r0, #12]
	    conn->tx_head &&
   16c28:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   16c2c:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
   16c30:	f8a0 200d 	strh.w	r2, [r0, #13]
	if (
   16c34:	2b00      	cmp	r3, #0
   16c36:	f000 8343 	beq.w	172c0 <ull_conn_llcp+0xb40>
	    !conn->llcp_enc.pause_tx &&
   16c3a:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
   16c3e:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
	    conn->tx_head &&
   16c42:	0789      	lsls	r1, r1, #30
   16c44:	f100 833e 	bmi.w	172c4 <ull_conn_llcp+0xb44>
	    !conn->llcp_phy.pause_tx &&
   16c48:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   16c4c:	07cf      	lsls	r7, r1, #31
   16c4e:	f100 8339 	bmi.w	172c4 <ull_conn_llcp+0xb44>
		if (conn->tx_head == conn->tx_data) {
   16c52:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   16c56:	428b      	cmp	r3, r1
   16c58:	f000 86ae 	beq.w	179b8 <ull_conn_llcp+0x1238>
		} else if (!conn->tx_ctrl) {
   16c5c:	2a00      	cmp	r2, #0
   16c5e:	f000 86c7 	beq.w	179f0 <ull_conn_llcp+0x1270>
	tx->next = conn->tx_ctrl_last->next;
   16c62:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   16c66:	681a      	ldr	r2, [r3, #0]
   16c68:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   16c6a:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   16c6c:	6803      	ldr	r3, [r0, #0]
   16c6e:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   16c72:	2b00      	cmp	r3, #0
   16c74:	f47f af64 	bne.w	16b40 <ull_conn_llcp+0x3c0>
		conn->tx_data_last = tx;
   16c78:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   16c7c:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   16c80:	e591      	b.n	167a6 <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   16c82:	4879      	ldr	r0, [pc, #484]	; (16e68 <ull_conn_llcp+0x6e8>)
   16c84:	f7f8 f882 	bl	ed8c <mem_acquire>
	if (!tx) {
   16c88:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   16c8c:	4607      	mov	r7, r0
   16c8e:	2800      	cmp	r0, #0
   16c90:	f43f ad89 	beq.w	167a6 <ull_conn_llcp+0x26>
	if (!lll->role) {
   16c94:	f1bc 0f00 	cmp.w	ip, #0
	pdu_ctrl_tx = (void *)tx->pdu;
   16c98:	f100 0a04 	add.w	sl, r0, #4
	if (!lll->role) {
   16c9c:	f280 8392 	bge.w	173c4 <ull_conn_llcp+0xc44>
	else if (!lll->enc_rx) {
   16ca0:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   16ca4:	f013 0208 	ands.w	r2, r3, #8
   16ca8:	f040 8511 	bne.w	176ce <ull_conn_llcp+0xf4e>
		if (conn->llcp.encryption.error_code) {
   16cac:	f894 80f5 	ldrb.w	r8, [r4, #245]	; 0xf5
   16cb0:	f1b8 0f00 	cmp.w	r8, #0
   16cb4:	f000 85ad 	beq.w	17812 <ull_conn_llcp+0x1092>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   16cb8:	7903      	ldrb	r3, [r0, #4]
	if (conn->common.fex_valid &&
   16cba:	f894 10d8 	ldrb.w	r1, [r4, #216]	; 0xd8
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   16cbe:	f043 0303 	orr.w	r3, r3, #3
   16cc2:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
   16cc4:	07cb      	lsls	r3, r1, #31
   16cc6:	f140 8533 	bpl.w	17730 <ull_conn_llcp+0xfb0>
	    (conn->llcp_feature.features_conn &
   16cca:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   16cce:	4611      	mov	r1, r2
   16cd0:	f003 0004 	and.w	r0, r3, #4
	if (conn->common.fex_valid &&
   16cd4:	ea50 0301 	orrs.w	r3, r0, r1
   16cd8:	f000 852a 	beq.w	17730 <ull_conn_llcp+0xfb0>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   16cdc:	2211      	movs	r2, #17
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   16cde:	2303      	movs	r3, #3
		p->error_code = conn->llcp.encryption.error_code;
   16ce0:	f887 8009 	strb.w	r8, [r7, #9]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   16ce4:	71fa      	strb	r2, [r7, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   16ce6:	723b      	strb	r3, [r7, #8]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
   16ce8:	f887 9005 	strb.w	r9, [r7, #5]
	    conn->tx_head &&
   16cec:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
	conn->llcp.encryption.error_code = 0U;
   16cf0:	2300      	movs	r3, #0
   16cf2:	f884 30f5 	strb.w	r3, [r4, #245]	; 0xf5
	if (
   16cf6:	2a00      	cmp	r2, #0
   16cf8:	f000 8495 	beq.w	17626 <ull_conn_llcp+0xea6>
	    !conn->llcp_enc.pause_tx &&
   16cfc:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
	    conn->tx_head &&
   16d00:	0798      	lsls	r0, r3, #30
   16d02:	f100 8490 	bmi.w	17626 <ull_conn_llcp+0xea6>
	    !conn->llcp_phy.pause_tx &&
   16d06:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   16d0a:	07d9      	lsls	r1, r3, #31
   16d0c:	f100 848b 	bmi.w	17626 <ull_conn_llcp+0xea6>
		if (conn->tx_head == conn->tx_data) {
   16d10:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
   16d14:	429a      	cmp	r2, r3
		if (!conn->tx_ctrl) {
   16d16:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   16d1a:	f000 8765 	beq.w	17be8 <ull_conn_llcp+0x1468>
		} else if (!conn->tx_ctrl) {
   16d1e:	2b00      	cmp	r3, #0
   16d20:	f001 8043 	beq.w	17daa <ull_conn_llcp+0x162a>
	tx->next = conn->tx_ctrl_last->next;
   16d24:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   16d28:	681a      	ldr	r2, [r3, #0]
   16d2a:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
   16d2c:	601f      	str	r7, [r3, #0]
	conn->tx_ctrl_last = tx;
   16d2e:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
	if (!tx->next) {
   16d32:	683b      	ldr	r3, [r7, #0]
   16d34:	2b00      	cmp	r3, #0
   16d36:	f000 83b7 	beq.w	174a8 <ull_conn_llcp+0xd28>
	conn->llcp_ack = conn->llcp_req;
   16d3a:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   16d3e:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
   16d42:	e530      	b.n	167a6 <ull_conn_llcp+0x26>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   16d44:	4848      	ldr	r0, [pc, #288]	; (16e68 <ull_conn_llcp+0x6e8>)
   16d46:	f7f8 f821 	bl	ed8c <mem_acquire>
		if (tx) {
   16d4a:	2800      	cmp	r0, #0
   16d4c:	f43f ad2f 	beq.w	167ae <ull_conn_llcp+0x2e>
			conn->llcp.chan_map.instant = event_counter +
   16d50:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			conn->llcp.chan_map.initiate = 0U;
   16d52:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16d56:	7902      	ldrb	r2, [r0, #4]
			conn->llcp.chan_map.instant = event_counter +
   16d58:	4433      	add	r3, r6
						      conn->lll.latency + 6;
   16d5a:	3306      	adds	r3, #6
			conn->llcp.chan_map.instant = event_counter +
   16d5c:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16d60:	f042 0203 	orr.w	r2, r2, #3
   16d64:	4623      	mov	r3, r4
			conn->llcp.chan_map.initiate = 0U;
   16d66:	f36f 0100 	bfc	r1, #0, #1
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   16d6a:	2608      	movs	r6, #8
			pdu_ctrl_tx->llctrl.opcode =
   16d6c:	2501      	movs	r5, #1
			conn->llcp.chan_map.initiate = 0U;
   16d6e:	f884 10e8 	strb.w	r1, [r4, #232]	; 0xe8
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   16d72:	7146      	strb	r6, [r0, #5]
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16d74:	7102      	strb	r2, [r0, #4]
			pdu_ctrl_tx->llctrl.opcode =
   16d76:	71c5      	strb	r5, [r0, #7]
   16d78:	f853 2fe9 	ldr.w	r2, [r3, #233]!
   16d7c:	6082      	str	r2, [r0, #8]
   16d7e:	791b      	ldrb	r3, [r3, #4]
   16d80:	7303      	strb	r3, [r0, #12]
	    conn->tx_head &&
   16d82:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   16d86:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
   16d8a:	f8a0 200d 	strh.w	r2, [r0, #13]
	if (
   16d8e:	2b00      	cmp	r3, #0
   16d90:	f000 82a1 	beq.w	172d6 <ull_conn_llcp+0xb56>
	    !conn->llcp_enc.pause_tx &&
   16d94:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
   16d98:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
	    conn->tx_head &&
   16d9c:	0789      	lsls	r1, r1, #30
   16d9e:	f100 829c 	bmi.w	172da <ull_conn_llcp+0xb5a>
	    !conn->llcp_phy.pause_tx &&
   16da2:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   16da6:	07cf      	lsls	r7, r1, #31
   16da8:	f100 8297 	bmi.w	172da <ull_conn_llcp+0xb5a>
		if (conn->tx_head == conn->tx_data) {
   16dac:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   16db0:	428b      	cmp	r3, r1
   16db2:	f000 860f 	beq.w	179d4 <ull_conn_llcp+0x1254>
		} else if (!conn->tx_ctrl) {
   16db6:	2a00      	cmp	r2, #0
   16db8:	f000 8653 	beq.w	17a62 <ull_conn_llcp+0x12e2>
	tx->next = conn->tx_ctrl_last->next;
   16dbc:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   16dc0:	681a      	ldr	r2, [r3, #0]
   16dc2:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   16dc4:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   16dc6:	6803      	ldr	r3, [r0, #0]
   16dc8:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   16dcc:	2b00      	cmp	r3, #0
   16dce:	f47f acee 	bne.w	167ae <ull_conn_llcp+0x2e>
		conn->tx_data_last = tx;
   16dd2:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   16dd6:	e4ea      	b.n	167ae <ull_conn_llcp+0x2e>
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   16dd8:	f002 0207 	and.w	r2, r2, #7
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   16ddc:	f8b4 c1b0 	ldrh.w	ip, [r4, #432]	; 0x1b0
		lll->max_rx_time = conn->llcp_length.rx_time;
   16de0:	f8b4 11b4 	ldrh.w	r1, [r4, #436]	; 0x1b4
		tx_octets = conn->llcp_length.tx_octets;
   16de4:	f8b4 91b2 	ldrh.w	r9, [r4, #434]	; 0x1b2
		uint16_t tx_time = conn->llcp_length.tx_time;
   16de8:	f8b4 81b6 	ldrh.w	r8, [r4, #438]	; 0x1b6
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   16dec:	f8a4 c05a 	strh.w	ip, [r4, #90]	; 0x5a
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   16df0:	2a04      	cmp	r2, #4
		lll->max_rx_time = conn->llcp_length.rx_time;
   16df2:	f8a4 105e 	strh.w	r1, [r4, #94]	; 0x5e
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   16df6:	f000 8403 	beq.w	17600 <ull_conn_llcp+0xe80>
			conn->llcp_length.state =
   16dfa:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
   16dfe:	2206      	movs	r2, #6
   16e00:	f362 0302 	bfi	r3, r2, #0, #3
   16e04:	f884 31ae 	strb.w	r3, [r4, #430]	; 0x1ae
		rx = conn->llcp_rx;
   16e08:	f8d4 7108 	ldr.w	r7, [r4, #264]	; 0x108
		LL_ASSERT(rx && rx->hdr.link);
   16e0c:	2f00      	cmp	r7, #0
   16e0e:	f000 83d9 	beq.w	175c4 <ull_conn_llcp+0xe44>
   16e12:	6838      	ldr	r0, [r7, #0]
   16e14:	2800      	cmp	r0, #0
   16e16:	f000 83d5 	beq.w	175c4 <ull_conn_llcp+0xe44>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   16e1a:	7f3b      	ldrb	r3, [r7, #28]
		conn->llcp_rx = rx->hdr.link->mem;
   16e1c:	6842      	ldr	r2, [r0, #4]
		rx->hdr.handle = conn->lll.handle;
   16e1e:	f8b4 e028 	ldrh.w	lr, [r4, #40]	; 0x28
		conn->llcp_rx = rx->hdr.link->mem;
   16e22:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   16e26:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   16e2a:	2203      	movs	r2, #3
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   16e2c:	773b      	strb	r3, [r7, #28]
		pdu_ctrl_rx->len =
   16e2e:	f04f 0a09 	mov.w	sl, #9
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   16e32:	2315      	movs	r3, #21
		rx->hdr.handle = conn->lll.handle;
   16e34:	f8a7 e006 	strh.w	lr, [r7, #6]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   16e38:	f8a7 c020 	strh.w	ip, [r7, #32]
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   16e3c:	8479      	strh	r1, [r7, #34]	; 0x22
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   16e3e:	713a      	strb	r2, [r7, #4]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   16e40:	77fb      	strb	r3, [r7, #31]
		ll_rx_put(rx->hdr.link, rx);
   16e42:	4639      	mov	r1, r7
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
   16e44:	f8a7 9024 	strh.w	r9, [r7, #36]	; 0x24
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   16e48:	f8a7 8026 	strh.w	r8, [r7, #38]	; 0x26
		pdu_ctrl_rx->len =
   16e4c:	f887 a01d 	strb.w	sl, [r7, #29]
		ll_rx_put(rx->hdr.link, rx);
   16e50:	f7fc f884 	bl	12f5c <ll_rx_put>
		ll_rx_sched();
   16e54:	f7fc f88c 	bl	12f70 <ll_rx_sched>
	break;
   16e58:	e505      	b.n	16866 <ull_conn_llcp+0xe6>
   16e5a:	bf00      	nop
   16e5c:	0002b604 	.word	0x0002b604
   16e60:	0002b15c 	.word	0x0002b15c
   16e64:	0002b0c4 	.word	0x0002b0c4
   16e68:	20001914 	.word	0x20001914
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   16e6c:	48cc      	ldr	r0, [pc, #816]	; (171a0 <ull_conn_llcp+0xa20>)
   16e6e:	f7f7 ff8d 	bl	ed8c <mem_acquire>
		if (!tx) {
   16e72:	2800      	cmp	r0, #0
   16e74:	f43f acf7 	beq.w	16866 <ull_conn_llcp+0xe6>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   16e78:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   16e7c:	f8b4 11b2 	ldrh.w	r1, [r4, #434]	; 0x1b2
		conn->default_tx_time = conn->llcp_length.tx_time;
   16e80:	f8b4 71b6 	ldrh.w	r7, [r4, #438]	; 0x1b6
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   16e84:	f8a4 10d2 	strh.w	r1, [r4, #210]	; 0xd2
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   16e88:	2201      	movs	r2, #1
		conn->default_tx_time = conn->llcp_length.tx_time;
   16e8a:	f8a4 70d4 	strh.w	r7, [r4, #212]	; 0xd4
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   16e8e:	f362 0302 	bfi	r3, r2, #0, #3
   16e92:	f884 31ae 	strb.w	r3, [r4, #430]	; 0x1ae
		pdu_ctrl_tx->len =
   16e96:	2709      	movs	r7, #9
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16e98:	7903      	ldrb	r3, [r0, #4]
		pdu_ctrl_tx->len =
   16e9a:	7147      	strb	r7, [r0, #5]
	    conn->tx_head &&
   16e9c:	f8d4 c1c4 	ldr.w	ip, [r4, #452]	; 0x1c4
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
   16ea0:	8181      	strh	r1, [r0, #12]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16ea2:	f043 0303 	orr.w	r3, r3, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   16ea6:	2114      	movs	r1, #20
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   16ea8:	72c2      	strb	r2, [r0, #11]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   16eaa:	73c2      	strb	r2, [r0, #15]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   16eac:	2700      	movs	r7, #0
   16eae:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16eb2:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   16eb4:	71c1      	strb	r1, [r0, #7]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   16eb6:	2348      	movs	r3, #72	; 0x48
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   16eb8:	211b      	movs	r1, #27
   16eba:	7247      	strb	r7, [r0, #9]
   16ebc:	7201      	strb	r1, [r0, #8]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   16ebe:	7283      	strb	r3, [r0, #10]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   16ec0:	7383      	strb	r3, [r0, #14]
	if (
   16ec2:	f1bc 0f00 	cmp.w	ip, #0
   16ec6:	f000 8273 	beq.w	173b0 <ull_conn_llcp+0xc30>
	    !conn->llcp_enc.pause_tx &&
   16eca:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
	    conn->tx_head &&
   16ece:	079b      	lsls	r3, r3, #30
   16ed0:	f100 826e 	bmi.w	173b0 <ull_conn_llcp+0xc30>
	    !conn->llcp_phy.pause_tx &&
   16ed4:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   16ed8:	07df      	lsls	r7, r3, #31
   16eda:	f100 8269 	bmi.w	173b0 <ull_conn_llcp+0xc30>
		if (conn->tx_head == conn->tx_data) {
   16ede:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
   16ee2:	459c      	cmp	ip, r3
   16ee4:	f000 85ab 	beq.w	17a3e <ull_conn_llcp+0x12be>
		} else if (!conn->tx_ctrl) {
   16ee8:	2a00      	cmp	r2, #0
   16eea:	f000 85cb 	beq.w	17a84 <ull_conn_llcp+0x1304>
	tx->next = conn->tx_ctrl_last->next;
   16eee:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   16ef2:	681a      	ldr	r2, [r3, #0]
   16ef4:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   16ef6:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   16ef8:	f8d0 c000 	ldr.w	ip, [r0]
   16efc:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   16f00:	f1bc 0f00 	cmp.w	ip, #0
   16f04:	f000 8470 	beq.w	177e8 <ull_conn_llcp+0x1068>
		conn->procedure_expire = conn->procedure_reload;
   16f08:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   16f0c:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	break;
   16f10:	e4a9      	b.n	16866 <ull_conn_llcp+0xe6>
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
   16f12:	f894 7121 	ldrb.w	r7, [r4, #289]	; 0x121
   16f16:	f894 9120 	ldrb.w	r9, [r4, #288]	; 0x120
   16f1a:	454f      	cmp	r7, r9
   16f1c:	d056      	beq.n	16fcc <ull_conn_llcp+0x84c>
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
   16f1e:	eba7 0709 	sub.w	r7, r7, r9
   16f22:	07f8      	lsls	r0, r7, #31
   16f24:	f57f ac3f 	bpl.w	167a6 <ull_conn_llcp+0x26>
	if (conn->common.fex_valid) {
   16f28:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   16f2c:	f013 0701 	ands.w	r7, r3, #1
   16f30:	f000 81e8 	beq.w	17304 <ull_conn_llcp+0xb84>
		rx = ll_pdu_rx_alloc();
   16f34:	f7fc f84e 	bl	12fd4 <ll_pdu_rx_alloc>
		if (!rx) {
   16f38:	4601      	mov	r1, r0
   16f3a:	2800      	cmp	r0, #0
   16f3c:	f000 80cc 	beq.w	170d8 <ull_conn_llcp+0x958>
		conn->llcp_feature.ack = conn->llcp_feature.req;
   16f40:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
   16f44:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   16f48:	2709      	movs	r7, #9
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   16f4a:	2303      	movs	r3, #3
		rx->hdr.handle = conn->lll.handle;
   16f4c:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   16f50:	7747      	strb	r7, [r0, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   16f52:	7103      	strb	r3, [r0, #4]
__ssp_bos_icheck3(memset, void *, int)
   16f54:	f8c0 8020 	str.w	r8, [r0, #32]
   16f58:	f8c0 8024 	str.w	r8, [r0, #36]	; 0x24
		sys_put_le64(conn->llcp_feature.features_peer,
   16f5c:	e9d4 024c 	ldrd	r0, r2, [r4, #304]	; 0x130
		rx->hdr.handle = conn->lll.handle;
   16f60:	f8a1 c006 	strh.w	ip, [r1, #6]
	sys_put_le16(val >> 16, &dst[2]);
   16f64:	ea4f 4c10 	mov.w	ip, r0, lsr #16
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   16f68:	7f0b      	ldrb	r3, [r1, #28]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   16f6a:	77cf      	strb	r7, [r1, #31]
	dst[1] = val >> 8;
   16f6c:	ea4f 271c 	mov.w	r7, ip, lsr #8
   16f70:	f881 7023 	strb.w	r7, [r1, #35]	; 0x23
	sys_put_le16(val >> 16, &dst[2]);
   16f74:	0c17      	lsrs	r7, r2, #16
	dst[1] = val >> 8;
   16f76:	f3c0 2e07 	ubfx	lr, r0, #8, #8
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   16f7a:	f043 0303 	orr.w	r3, r3, #3
	dst[0] = val;
   16f7e:	f881 c022 	strb.w	ip, [r1, #34]	; 0x22
   16f82:	f881 0020 	strb.w	r0, [r1, #32]
	dst[1] = val >> 8;
   16f86:	ea4f 2c17 	mov.w	ip, r7, lsr #8
   16f8a:	f3c2 2007 	ubfx	r0, r2, #8, #8
   16f8e:	f881 e021 	strb.w	lr, [r1, #33]	; 0x21
	dst[0] = val;
   16f92:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
   16f96:	f881 7026 	strb.w	r7, [r1, #38]	; 0x26
	dst[1] = val >> 8;
   16f9a:	f881 c027 	strb.w	ip, [r1, #39]	; 0x27
   16f9e:	f881 0025 	strb.w	r0, [r1, #37]	; 0x25
   16fa2:	770b      	strb	r3, [r1, #28]
	ll_rx_put(rx->hdr.link, rx);
   16fa4:	6808      	ldr	r0, [r1, #0]
   16fa6:	f7fb ffd9 	bl	12f5c <ll_rx_put>
	ll_rx_sched();
   16faa:	f7fb ffe1 	bl	12f70 <ll_rx_sched>
   16fae:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   16fb2:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
   16fb6:	f7ff bbee 	b.w	16796 <ull_conn_llcp+0x16>
		if (!conn->tx_ctrl) {
   16fba:	2f00      	cmp	r7, #0
   16fbc:	f47f ace8 	bne.w	16990 <ull_conn_llcp+0x210>
			tx->next = conn->tx_head;
   16fc0:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   16fc2:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   16fc6:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   16fca:	e4e9      	b.n	169a0 <ull_conn_llcp+0x220>
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
   16fcc:	f894 7139 	ldrb.w	r7, [r4, #313]	; 0x139
   16fd0:	f894 8138 	ldrb.w	r8, [r4, #312]	; 0x138
   16fd4:	4547      	cmp	r7, r8
   16fd6:	f000 8093 	beq.w	17100 <ull_conn_llcp+0x980>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
   16fda:	eba7 0708 	sub.w	r7, r7, r8
   16fde:	07f8      	lsls	r0, r7, #31
   16fe0:	f57f abe1 	bpl.w	167a6 <ull_conn_llcp+0x26>
	if (conn->llcp_version.tx == 0U) {
   16fe4:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   16fe8:	07d9      	lsls	r1, r3, #31
   16fea:	f140 83a9 	bpl.w	17740 <ull_conn_llcp+0xfc0>
	} else if (conn->llcp_version.rx) {
   16fee:	0798      	lsls	r0, r3, #30
   16ff0:	f140 83ec 	bpl.w	177cc <ull_conn_llcp+0x104c>
		rx = ll_pdu_rx_alloc();
   16ff4:	f7fb ffee 	bl	12fd4 <ll_pdu_rx_alloc>
		if (!rx) {
   16ff8:	4601      	mov	r1, r0
   16ffa:	2800      	cmp	r0, #0
   16ffc:	d06c      	beq.n	170d8 <ull_conn_llcp+0x958>
		conn->llcp_version.ack = conn->llcp_version.req;
   16ffe:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
   17002:	f884 3139 	strb.w	r3, [r4, #313]	; 0x139
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   17006:	7f03      	ldrb	r3, [r0, #28]
		rx->hdr.handle = conn->lll.handle;
   17008:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   1700a:	80c2      	strh	r2, [r0, #6]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   1700c:	f043 0303 	orr.w	r3, r3, #3
   17010:	770b      	strb	r3, [r1, #28]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   17012:	2003      	movs	r0, #3
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
   17014:	2206      	movs	r2, #6
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   17016:	230c      	movs	r3, #12
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   17018:	7108      	strb	r0, [r1, #4]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
   1701a:	774a      	strb	r2, [r1, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   1701c:	77cb      	strb	r3, [r1, #31]
		pdu->llctrl.version_ind.version_number =
   1701e:	f894 013b 	ldrb.w	r0, [r4, #315]	; 0x13b
		pdu->llctrl.version_ind.company_id =
   17022:	f8b4 213c 	ldrh.w	r2, [r4, #316]	; 0x13c
		pdu->llctrl.version_ind.sub_version_number =
   17026:	f8b4 313e 	ldrh.w	r3, [r4, #318]	; 0x13e
   1702a:	f8a1 3023 	strh.w	r3, [r1, #35]	; 0x23
		pdu->llctrl.version_ind.version_number =
   1702e:	f881 0020 	strb.w	r0, [r1, #32]
		pdu->llctrl.version_ind.company_id =
   17032:	f8a1 2021 	strh.w	r2, [r1, #33]	; 0x21
		ll_rx_put(rx->hdr.link, rx);
   17036:	e7b5      	b.n	16fa4 <ull_conn_llcp+0x824>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   17038:	4859      	ldr	r0, [pc, #356]	; (171a0 <ull_conn_llcp+0xa20>)
   1703a:	f7f7 fea7 	bl	ed8c <mem_acquire>
		if (!tx) {
   1703e:	2800      	cmp	r0, #0
   17040:	d04a      	beq.n	170d8 <ull_conn_llcp+0x958>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   17042:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   17046:	f8b4 71b2 	ldrh.w	r7, [r4, #434]	; 0x1b2
		conn->default_tx_time = conn->llcp_length.tx_time;
   1704a:	f8b4 11b6 	ldrh.w	r1, [r4, #438]	; 0x1b6
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   1704e:	f8a4 70d2 	strh.w	r7, [r4, #210]	; 0xd2
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   17052:	2201      	movs	r2, #1
		conn->default_tx_time = conn->llcp_length.tx_time;
   17054:	f8a4 10d4 	strh.w	r1, [r4, #212]	; 0xd4
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   17058:	f362 0302 	bfi	r3, r2, #0, #3
   1705c:	f884 31ae 	strb.w	r3, [r4, #430]	; 0x1ae
		pdu_ctrl_tx->len =
   17060:	2109      	movs	r1, #9
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17062:	7903      	ldrb	r3, [r0, #4]
		pdu_ctrl_tx->len =
   17064:	7141      	strb	r1, [r0, #5]
	    conn->tx_head &&
   17066:	f8d4 11c4 	ldr.w	r1, [r4, #452]	; 0x1c4
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
   1706a:	8187      	strh	r7, [r0, #12]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1706c:	f043 0303 	orr.w	r3, r3, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   17070:	f04f 0c14 	mov.w	ip, #20
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   17074:	72c2      	strb	r2, [r0, #11]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   17076:	73c2      	strb	r2, [r0, #15]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   17078:	2700      	movs	r7, #0
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1707a:	7103      	strb	r3, [r0, #4]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   1707c:	221b      	movs	r2, #27
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   1707e:	2348      	movs	r3, #72	; 0x48
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   17080:	f880 c007 	strb.w	ip, [r0, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   17084:	7247      	strb	r7, [r0, #9]
   17086:	7202      	strb	r2, [r0, #8]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   17088:	7283      	strb	r3, [r0, #10]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   1708a:	7383      	strb	r3, [r0, #14]
	if (
   1708c:	2900      	cmp	r1, #0
   1708e:	f000 84ca 	beq.w	17a26 <ull_conn_llcp+0x12a6>
	    !conn->llcp_enc.pause_tx &&
   17092:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
	    conn->tx_head &&
   17096:	079a      	lsls	r2, r3, #30
   17098:	f100 84c5 	bmi.w	17a26 <ull_conn_llcp+0x12a6>
	    !conn->llcp_phy.pause_tx &&
   1709c:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   170a0:	07db      	lsls	r3, r3, #31
   170a2:	f100 84c0 	bmi.w	17a26 <ull_conn_llcp+0x12a6>
		if (conn->tx_head == conn->tx_data) {
   170a6:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
   170aa:	4299      	cmp	r1, r3
		if (!conn->tx_ctrl) {
   170ac:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   170b0:	f000 86c3 	beq.w	17e3a <ull_conn_llcp+0x16ba>
		} else if (!conn->tx_ctrl) {
   170b4:	2b00      	cmp	r3, #0
   170b6:	f000 86a9 	beq.w	17e0c <ull_conn_llcp+0x168c>
	tx->next = conn->tx_ctrl_last->next;
   170ba:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   170be:	681a      	ldr	r2, [r3, #0]
   170c0:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   170c2:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   170c4:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   170c8:	6803      	ldr	r3, [r0, #0]
   170ca:	2b00      	cmp	r3, #0
   170cc:	f000 839e 	beq.w	1780c <ull_conn_llcp+0x108c>
		conn->procedure_expire = conn->procedure_reload;
   170d0:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   170d4:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	break;
   170d8:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   170dc:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
   170e0:	f7ff bb59 	b.w	16796 <ull_conn_llcp+0x16>
			conn->tx_data = conn->tx_data->next;
   170e4:	6819      	ldr	r1, [r3, #0]
   170e6:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   170ea:	2a00      	cmp	r2, #0
   170ec:	f47f abcc 	bne.w	16888 <ull_conn_llcp+0x108>
			tx->next = conn->tx_head->next;
   170f0:	681a      	ldr	r2, [r3, #0]
   170f2:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   170f4:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   170f6:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   170f8:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   170fc:	f7ff bbcc 	b.w	16898 <ull_conn_llcp+0x118>
		} else if (conn->llcp_conn_param.ack !=
   17100:	f894 8185 	ldrb.w	r8, [r4, #389]	; 0x185
   17104:	f894 7184 	ldrb.w	r7, [r4, #388]	; 0x184
   17108:	45b8      	cmp	r8, r7
   1710a:	f000 81d0 	beq.w	174ae <ull_conn_llcp+0xd2e>
	conn_upd = conn_upd_curr;
   1710e:	4f25      	ldr	r7, [pc, #148]	; (171a4 <ull_conn_llcp+0xa24>)
   17110:	f8d7 8000 	ldr.w	r8, [r7]
	if (conn_upd && (conn_upd != conn)) {
   17114:	f1b8 0f00 	cmp.w	r8, #0
   17118:	f000 8408 	beq.w	1792c <ull_conn_llcp+0x11ac>
   1711c:	4544      	cmp	r4, r8
   1711e:	f47f ab42 	bne.w	167a6 <ull_conn_llcp+0x26>
	switch (conn->llcp_conn_param.state) {
   17122:	f894 8186 	ldrb.w	r8, [r4, #390]	; 0x186
   17126:	f008 0807 	and.w	r8, r8, #7
   1712a:	f1b8 0f05 	cmp.w	r8, #5
   1712e:	f200 86ac 	bhi.w	17e8a <ull_conn_llcp+0x170a>
   17132:	f20f 0908 	addw	r9, pc, #8
   17136:	f859 f028 	ldr.w	pc, [r9, r8, lsl #2]
   1713a:	bf00      	nop
   1713c:	00017229 	.word	0x00017229
   17140:	000171a9 	.word	0x000171a9
   17144:	00017155 	.word	0x00017155
   17148:	00016797 	.word	0x00016797
   1714c:	00016797 	.word	0x00016797
   17150:	00016797 	.word	0x00016797
	if (conn->llcp_enc.pause_tx) {
   17154:	0791      	lsls	r1, r2, #30
   17156:	f53f ab26 	bmi.w	167a6 <ull_conn_llcp+0x26>
	rx = ll_pdu_rx_alloc();
   1715a:	f7fb ff3b 	bl	12fd4 <ll_pdu_rx_alloc>
	if (!rx) {
   1715e:	4601      	mov	r1, r0
   17160:	2800      	cmp	r0, #0
   17162:	d0b9      	beq.n	170d8 <ull_conn_llcp+0x958>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   17164:	f894 0186 	ldrb.w	r0, [r4, #390]	; 0x186
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   17168:	7f0b      	ldrb	r3, [r1, #28]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   1716a:	2203      	movs	r2, #3
   1716c:	f362 0002 	bfi	r0, r2, #0, #3
   17170:	f884 0186 	strb.w	r0, [r4, #390]	; 0x186
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   17174:	4313      	orrs	r3, r2
	rx->hdr.handle = conn->lll.handle;
   17176:	8d20      	ldrh	r0, [r4, #40]	; 0x28
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   17178:	710a      	strb	r2, [r1, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   1717a:	2218      	movs	r2, #24
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1717c:	770b      	strb	r3, [r1, #28]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   1717e:	774a      	strb	r2, [r1, #29]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   17180:	f8b4 2188 	ldrh.w	r2, [r4, #392]	; 0x188
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   17184:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
	rx->hdr.handle = conn->lll.handle;
   17188:	80c8      	strh	r0, [r1, #6]
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   1718a:	f8b4 018c 	ldrh.w	r0, [r4, #396]	; 0x18c
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   1718e:	840a      	strh	r2, [r1, #32]
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   17190:	f8b4 218e 	ldrh.w	r2, [r4, #398]	; 0x18e
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   17194:	844b      	strh	r3, [r1, #34]	; 0x22
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   17196:	230f      	movs	r3, #15
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   17198:	8488      	strh	r0, [r1, #36]	; 0x24
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   1719a:	84ca      	strh	r2, [r1, #38]	; 0x26
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   1719c:	77cb      	strb	r3, [r1, #31]
   1719e:	e701      	b.n	16fa4 <ull_conn_llcp+0x824>
   171a0:	20001914 	.word	0x20001914
   171a4:	20001890 	.word	0x20001890
	if (conn->llcp_conn_param.status) {
   171a8:	f894 8187 	ldrb.w	r8, [r4, #391]	; 0x187
   171ac:	f1b8 0f00 	cmp.w	r8, #0
   171b0:	f040 8527 	bne.w	17c02 <ull_conn_llcp+0x1482>
	if (!conn->lll.role) {
   171b4:	2900      	cmp	r1, #0
   171b6:	f2c0 8548 	blt.w	17c4a <ull_conn_llcp+0x14ca>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   171ba:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
		if (conn->llcp_conn_param.preferred_periodicity) {
   171be:	f894 2190 	ldrb.w	r2, [r4, #400]	; 0x190
		conn->llcp_cu.win_offset_us = 0U;
   171c2:	f8c4 8118 	str.w	r8, [r4, #280]	; 0x118
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   171c6:	2105      	movs	r1, #5
   171c8:	f361 0302 	bfi	r3, r1, #0, #3
		conn->llcp_cu.win_size = 1U;
   171cc:	2101      	movs	r1, #1
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   171ce:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
		conn->llcp_cu.win_size = 1U;
   171d2:	f884 111c 	strb.w	r1, [r4, #284]	; 0x11c
		if (conn->llcp_conn_param.preferred_periodicity) {
   171d6:	2a00      	cmp	r2, #0
   171d8:	f000 85bf 	beq.w	17d5a <ull_conn_llcp+0x15da>
				((conn->llcp_conn_param.interval_min /
   171dc:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
   171e0:	fbb3 f3f2 	udiv	r3, r3, r2
				  conn->llcp_conn_param.preferred_periodicity) +
   171e4:	440b      	add	r3, r1
			conn->llcp_cu.interval =
   171e6:	fb13 f302 	smulbb	r3, r3, r2
   171ea:	b29b      	uxth	r3, r3
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   171ec:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   171f0:	f894 110e 	ldrb.w	r1, [r4, #270]	; 0x10e
   171f4:	f8a4 3110 	strh.w	r3, [r4, #272]	; 0x110
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   171f8:	f3c2 03c0 	ubfx	r3, r2, #3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   171fc:	00db      	lsls	r3, r3, #3
   171fe:	f021 020f 	bic.w	r2, r1, #15
   17202:	f043 0302 	orr.w	r3, r3, #2
   17206:	4313      	orrs	r3, r2
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   17208:	f8b4 118c 	ldrh.w	r1, [r4, #396]	; 0x18c
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   1720c:	f8b4 218e 	ldrh.w	r2, [r4, #398]	; 0x18e
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   17210:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
		conn->llcp_cu.ack--;
   17214:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
   17218:	f884 e10d 	strb.w	lr, [r4, #269]	; 0x10d
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   1721c:	f8a4 1112 	strh.w	r1, [r4, #274]	; 0x112
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   17220:	f8a4 2114 	strh.w	r2, [r4, #276]	; 0x114
	if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   17224:	f7ff bac3 	b.w	167ae <ull_conn_llcp+0x2e>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   17228:	48e4      	ldr	r0, [pc, #912]	; (175bc <ull_conn_llcp+0xe3c>)
			event_counter = lll->event_counter +
   1722a:	f8b4 8032 	ldrh.w	r8, [r4, #50]	; 0x32
					lll->latency_prepare + lazy;
   1722e:	f8b4 902e 	ldrh.w	r9, [r4, #46]	; 0x2e
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   17232:	f7f7 fdab 	bl	ed8c <mem_acquire>
	if (!tx) {
   17236:	4601      	mov	r1, r0
   17238:	2800      	cmp	r0, #0
   1723a:	f43f af4d 	beq.w	170d8 <ull_conn_llcp+0x958>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1723e:	7903      	ldrb	r3, [r0, #4]
	conn_upd_curr = conn;
   17240:	603c      	str	r4, [r7, #0]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17242:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   17246:	2218      	movs	r2, #24
   17248:	7142      	strb	r2, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1724a:	7103      	strb	r3, [r0, #4]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   1724c:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   17250:	f8b4 718a 	ldrh.w	r7, [r4, #394]	; 0x18a
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   17254:	f8b4 c18c 	ldrh.w	ip, [r4, #396]	; 0x18c
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   17258:	810b      	strh	r3, [r1, #8]
	p->preferred_periodicity = 0U;
   1725a:	2200      	movs	r2, #0
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   1725c:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
	p->preferred_periodicity = 0U;
   17260:	740a      	strb	r2, [r1, #16]
			event_counter = lll->event_counter +
   17262:	eb08 0009 	add.w	r0, r8, r9
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   17266:	814f      	strh	r7, [r1, #10]
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
   17268:	4430      	add	r0, r6
	conn->procedure_expire = conn->procedure_reload;
   1726a:	f8b4 70c6 	ldrh.w	r7, [r4, #198]	; 0xc6
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   1726e:	f8a1 c00c 	strh.w	ip, [r1, #12]
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   17272:	81cb      	strh	r3, [r1, #14]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   17274:	f04f 0c0f 	mov.w	ip, #15
	p->offset1 = sys_cpu_to_le16(0xffff);
   17278:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	p->offset0 = sys_cpu_to_le16(0x0000);
   1727c:	74ca      	strb	r2, [r1, #19]
   1727e:	750a      	strb	r2, [r1, #20]
	p->offset1 = sys_cpu_to_le16(0xffff);
   17280:	754b      	strb	r3, [r1, #21]
   17282:	758b      	strb	r3, [r1, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
   17284:	75cb      	strb	r3, [r1, #23]
   17286:	760b      	strb	r3, [r1, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
   17288:	764b      	strb	r3, [r1, #25]
   1728a:	768b      	strb	r3, [r1, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
   1728c:	76cb      	strb	r3, [r1, #27]
   1728e:	770b      	strb	r3, [r1, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
   17290:	774b      	strb	r3, [r1, #29]
   17292:	778b      	strb	r3, [r1, #30]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   17294:	f881 c007 	strb.w	ip, [r1, #7]
	conn->procedure_expire = conn->procedure_reload;
   17298:	f8a4 70c8 	strh.w	r7, [r4, #200]	; 0xc8
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
   1729c:	f8a1 0011 	strh.w	r0, [r1, #17]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   172a0:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   172a4:	2004      	movs	r0, #4
   172a6:	f360 0302 	bfi	r3, r0, #0, #3
   172aa:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
	ctrl_tx_pause_enqueue(conn, tx, false);
   172ae:	4620      	mov	r0, r4
   172b0:	f7fc fe42 	bl	13f38 <ctrl_tx_pause_enqueue>
   172b4:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   172b8:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
}
   172bc:	f7ff ba6b 	b.w	16796 <ull_conn_llcp+0x16>
   172c0:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   172c4:	2a00      	cmp	r2, #0
   172c6:	f47f accc 	bne.w	16c62 <ull_conn_llcp+0x4e2>
			tx->next = conn->tx_head;
   172ca:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   172cc:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   172d0:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   172d4:	e4cd      	b.n	16c72 <ull_conn_llcp+0x4f2>
   172d6:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   172da:	2a00      	cmp	r2, #0
   172dc:	f47f ad6e 	bne.w	16dbc <ull_conn_llcp+0x63c>
			tx->next = conn->tx_head;
   172e0:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   172e2:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   172e6:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   172ea:	e56f      	b.n	16dcc <ull_conn_llcp+0x64c>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   172ec:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
   172f0:	2b00      	cmp	r3, #0
   172f2:	f43f ac02 	beq.w	16afa <ull_conn_llcp+0x37a>
			conn->slave.llcp_type = LLCP_NONE;
   172f6:	f884 20d9 	strb.w	r2, [r4, #217]	; 0xd9
   172fa:	e402      	b.n	16b02 <ull_conn_llcp+0x382>
		conn->tx_data_last = tx;
   172fc:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   17300:	f7ff bb51 	b.w	169a6 <ull_conn_llcp+0x226>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   17304:	48ad      	ldr	r0, [pc, #692]	; (175bc <ull_conn_llcp+0xe3c>)
   17306:	f7f7 fd41 	bl	ed8c <mem_acquire>
	if (tx) {
   1730a:	2800      	cmp	r0, #0
   1730c:	f43f aee4 	beq.w	170d8 <ull_conn_llcp+0x958>
		conn->llcp_feature.ack--;
   17310:	f894 2121 	ldrb.w	r2, [r4, #289]	; 0x121
		conn->llcp_feature.features_conn = LL_FEAT;
   17314:	f8df 82a8 	ldr.w	r8, [pc, #680]	; 175c0 <ull_conn_llcp+0xe40>
   17318:	f04f 0900 	mov.w	r9, #0
   1731c:	e9c4 894a 	strd	r8, r9, [r4, #296]	; 0x128
		conn->llcp_feature.ack--;
   17320:	3a01      	subs	r2, #1
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
   17322:	2309      	movs	r3, #9
		conn->llcp_feature.ack--;
   17324:	f884 2121 	strb.w	r2, [r4, #289]	; 0x121
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
   17328:	7143      	strb	r3, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
   1732a:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   1732e:	6087      	str	r7, [r0, #8]
   17330:	60c7      	str	r7, [r0, #12]
		sys_put_le64(conn->llcp_feature.features_conn,
   17332:	e9d4 134a 	ldrd	r1, r3, [r4, #296]	; 0x128
	sys_put_le16(val >> 16, &dst[2]);
   17336:	0c0a      	lsrs	r2, r1, #16
   17338:	0c1f      	lsrs	r7, r3, #16
	dst[0] = val;
   1733a:	7282      	strb	r2, [r0, #10]
	dst[1] = val >> 8;
   1733c:	0a12      	lsrs	r2, r2, #8
   1733e:	f3c1 2e07 	ubfx	lr, r1, #8, #8
	dst[0] = val;
   17342:	7303      	strb	r3, [r0, #12]
	dst[1] = val >> 8;
   17344:	72c2      	strb	r2, [r0, #11]
   17346:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1734a:	0a3a      	lsrs	r2, r7, #8
	dst[0] = val;
   1734c:	7201      	strb	r1, [r0, #8]
	dst[1] = val >> 8;
   1734e:	73c2      	strb	r2, [r0, #15]
   17350:	f880 e009 	strb.w	lr, [r0, #9]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   17354:	7902      	ldrb	r2, [r0, #4]
	dst[0] = val;
   17356:	7387      	strb	r7, [r0, #14]
	dst[1] = val >> 8;
   17358:	7343      	strb	r3, [r0, #13]
	    conn->tx_head &&
   1735a:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
		pdu->llctrl.opcode = !conn->lll.role ?
   1735e:	f1bc 0f00 	cmp.w	ip, #0
   17362:	bfac      	ite	ge
   17364:	2108      	movge	r1, #8
   17366:	210e      	movlt	r1, #14
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   17368:	f042 0203 	orr.w	r2, r2, #3
		pdu->llctrl.opcode = !conn->lll.role ?
   1736c:	71c1      	strb	r1, [r0, #7]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   1736e:	7102      	strb	r2, [r0, #4]
	if (
   17370:	2b00      	cmp	r3, #0
   17372:	f000 813a 	beq.w	175ea <ull_conn_llcp+0xe6a>
	    !conn->llcp_enc.pause_tx &&
   17376:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
   1737a:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
	    conn->tx_head &&
   1737e:	0789      	lsls	r1, r1, #30
   17380:	f100 8135 	bmi.w	175ee <ull_conn_llcp+0xe6e>
	    !conn->llcp_phy.pause_tx &&
   17384:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   17388:	07cf      	lsls	r7, r1, #31
   1738a:	f100 8130 	bmi.w	175ee <ull_conn_llcp+0xe6e>
		if (conn->tx_head == conn->tx_data) {
   1738e:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   17392:	428b      	cmp	r3, r1
   17394:	f000 8391 	beq.w	17aba <ull_conn_llcp+0x133a>
		} else if (!conn->tx_ctrl) {
   17398:	2a00      	cmp	r2, #0
   1739a:	f000 83c5 	beq.w	17b28 <ull_conn_llcp+0x13a8>
	tx->next = conn->tx_ctrl_last->next;
   1739e:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   173a2:	681a      	ldr	r2, [r3, #0]
   173a4:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   173a6:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   173a8:	6803      	ldr	r3, [r0, #0]
   173aa:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
}
   173ae:	e68c      	b.n	170ca <ull_conn_llcp+0x94a>
		if (!conn->tx_ctrl) {
   173b0:	2a00      	cmp	r2, #0
   173b2:	f47f ad9c 	bne.w	16eee <ull_conn_llcp+0x76e>
			tx->next = conn->tx_head;
   173b6:	f8c0 c000 	str.w	ip, [r0]
				conn->tx_ctrl = tx;
   173ba:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   173be:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   173c2:	e59d      	b.n	16f00 <ull_conn_llcp+0x780>
		ecb_encrypt(&conn->llcp_enc.ltk[0],
   173c4:	f104 097b 	add.w	r9, r4, #123	; 0x7b
   173c8:	464b      	mov	r3, r9
   173ca:	4642      	mov	r2, r8
   173cc:	f104 01f6 	add.w	r1, r4, #246	; 0xf6
   173d0:	f204 1071 	addw	r0, r4, #369	; 0x171
   173d4:	f004 fb12 	bl	1b9fc <ecb_encrypt>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   173d8:	f8d4 2087 	ldr.w	r2, [r4, #135]	; 0x87
   173dc:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8
   173e0:	f8d4 007b 	ldr.w	r0, [r4, #123]	; 0x7b
   173e4:	f8d4 107f 	ldr.w	r1, [r4, #127]	; 0x7f
   173e8:	f8d4 3083 	ldr.w	r3, [r4, #131]	; 0x83
   173ec:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
   173f0:	4622      	mov	r2, r4
   173f2:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
   173f6:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
   173fa:	f852 1f94 	ldr.w	r1, [r2, #148]!
		lll->ccm_rx.direction = 0;
   173fe:	f894 0093 	ldrb.w	r0, [r4, #147]	; 0x93
   17402:	6852      	ldr	r2, [r2, #4]
		lll->enc_rx = 1;
   17404:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   17408:	f8c4 20b9 	str.w	r2, [r4, #185]	; 0xb9
		lll->ccm_tx.direction = 1;
   1740c:	f894 20b4 	ldrb.w	r2, [r4, #180]	; 0xb4
   17410:	f8c4 10b5 	str.w	r1, [r4, #181]	; 0xb5
		lll->enc_rx = 1;
   17414:	f043 0308 	orr.w	r3, r3, #8
		lll->ccm_rx.direction = 0;
   17418:	f368 0000 	bfi	r0, r8, #0, #1
		lll->ccm_tx.direction = 1;
   1741c:	f042 0201 	orr.w	r2, r2, #1
		lll->ccm_rx.direction = 0;
   17420:	f884 0093 	strb.w	r0, [r4, #147]	; 0x93
		lll->enc_rx = 1;
   17424:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
		lll->ccm_rx.counter = 0;
   17428:	f884 808b 	strb.w	r8, [r4, #139]	; 0x8b
   1742c:	f884 808c 	strb.w	r8, [r4, #140]	; 0x8c
   17430:	f884 808d 	strb.w	r8, [r4, #141]	; 0x8d
   17434:	f884 808e 	strb.w	r8, [r4, #142]	; 0x8e
   17438:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
   1743c:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
   17440:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
   17444:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
		lll->ccm_tx.counter = 0;
   17448:	f8c4 80ac 	str.w	r8, [r4, #172]	; 0xac
		start_enc_rsp_send(conn, pdu_ctrl_tx);
   1744c:	4651      	mov	r1, sl
		lll->ccm_tx.counter = 0;
   1744e:	f8c4 80b0 	str.w	r8, [r4, #176]	; 0xb0
		lll->ccm_tx.direction = 1;
   17452:	f884 20b4 	strb.w	r2, [r4, #180]	; 0xb4
		start_enc_rsp_send(conn, pdu_ctrl_tx);
   17456:	4620      	mov	r0, r4
   17458:	f7fc ff70 	bl	1433c <start_enc_rsp_send>
	    conn->tx_head &&
   1745c:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   17460:	2b00      	cmp	r3, #0
   17462:	f000 809f 	beq.w	175a4 <ull_conn_llcp+0xe24>
	    !conn->llcp_enc.pause_tx &&
   17466:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
   1746a:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
	    conn->tx_head &&
   1746e:	0788      	lsls	r0, r1, #30
   17470:	f100 809a 	bmi.w	175a8 <ull_conn_llcp+0xe28>
	    !conn->llcp_phy.pause_tx &&
   17474:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   17478:	07c9      	lsls	r1, r1, #31
   1747a:	f100 8095 	bmi.w	175a8 <ull_conn_llcp+0xe28>
		if (conn->tx_head == conn->tx_data) {
   1747e:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   17482:	428b      	cmp	r3, r1
   17484:	f000 8327 	beq.w	17ad6 <ull_conn_llcp+0x1356>
		} else if (!conn->tx_ctrl) {
   17488:	2a00      	cmp	r2, #0
   1748a:	f000 83a4 	beq.w	17bd6 <ull_conn_llcp+0x1456>
	tx->next = conn->tx_ctrl_last->next;
   1748e:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   17492:	681a      	ldr	r2, [r3, #0]
   17494:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
   17496:	601f      	str	r7, [r3, #0]
	conn->tx_ctrl_last = tx;
   17498:	683b      	ldr	r3, [r7, #0]
   1749a:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
   1749e:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
	if (!tx->next) {
   174a2:	2b00      	cmp	r3, #0
   174a4:	f47f ac49 	bne.w	16d3a <ull_conn_llcp+0x5ba>
		conn->tx_data_last = tx;
   174a8:	f8c4 71d4 	str.w	r7, [r4, #468]	; 0x1d4
   174ac:	e445      	b.n	16d3a <ull_conn_llcp+0x5ba>
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   174ae:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
   174b2:	f894 71ad 	ldrb.w	r7, [r4, #429]	; 0x1ad
   174b6:	4297      	cmp	r7, r2
   174b8:	f000 80c1 	beq.w	1763e <ull_conn_llcp+0xebe>
	switch (conn->llcp_length.state) {
   174bc:	f894 c1ae 	ldrb.w	ip, [r4, #430]	; 0x1ae
   174c0:	f00c 0107 	and.w	r1, ip, #7
   174c4:	2906      	cmp	r1, #6
   174c6:	f200 84dd 	bhi.w	17e84 <ull_conn_llcp+0x1704>
   174ca:	a701      	add	r7, pc, #4	; (adr r7, 174d0 <ull_conn_llcp+0xd50>)
   174cc:	f857 f021 	ldr.w	pc, [r7, r1, lsl #2]
   174d0:	00017039 	.word	0x00017039
   174d4:	00016797 	.word	0x00016797
   174d8:	00016797 	.word	0x00016797
   174dc:	00016797 	.word	0x00016797
   174e0:	000174ed 	.word	0x000174ed
   174e4:	000174ed 	.word	0x000174ed
   174e8:	00016797 	.word	0x00016797
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   174ec:	f8b4 11b0 	ldrh.w	r1, [r4, #432]	; 0x1b0
   174f0:	f8a4 105a 	strh.w	r1, [r4, #90]	; 0x5a
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   174f4:	f00c 0107 	and.w	r1, ip, #7
		lll->max_rx_time = conn->llcp_length.rx_time;
   174f8:	f8b4 31b4 	ldrh.w	r3, [r4, #436]	; 0x1b4
		tx_octets = conn->llcp_length.tx_octets;
   174fc:	f8b4 81b2 	ldrh.w	r8, [r4, #434]	; 0x1b2
		uint16_t tx_time = conn->llcp_length.tx_time;
   17500:	f8b4 71b6 	ldrh.w	r7, [r4, #438]	; 0x1b6
		lll->max_rx_time = conn->llcp_length.rx_time;
   17504:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   17508:	2904      	cmp	r1, #4
   1750a:	f000 82fb 	beq.w	17b04 <ull_conn_llcp+0x1384>
			conn->llcp_length.state =
   1750e:	4663      	mov	r3, ip
   17510:	2206      	movs	r2, #6
   17512:	f362 0302 	bfi	r3, r2, #0, #3
   17516:	f884 31ae 	strb.w	r3, [r4, #430]	; 0x1ae
		rx = conn->llcp_rx;
   1751a:	f8d4 9108 	ldr.w	r9, [r4, #264]	; 0x108
		LL_ASSERT(rx && rx->hdr.link);
   1751e:	f1b9 0f00 	cmp.w	r9, #0
   17522:	f000 82ba 	beq.w	17a9a <ull_conn_llcp+0x131a>
   17526:	f8d9 0000 	ldr.w	r0, [r9]
   1752a:	2800      	cmp	r0, #0
   1752c:	f000 82b5 	beq.w	17a9a <ull_conn_llcp+0x131a>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   17530:	f899 301c 	ldrb.w	r3, [r9, #28]
		conn->llcp_rx = rx->hdr.link->mem;
   17534:	6842      	ldr	r2, [r0, #4]
		rx->hdr.handle = conn->lll.handle;
   17536:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
		conn->llcp_rx = rx->hdr.link->mem;
   1753a:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   1753e:	f043 0303 	orr.w	r3, r3, #3
   17542:	f889 301c 	strb.w	r3, [r9, #28]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   17546:	2203      	movs	r2, #3
		pdu_ctrl_rx->len =
   17548:	2309      	movs	r3, #9
   1754a:	f889 301d 	strb.w	r3, [r9, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1754e:	f889 2004 	strb.w	r2, [r9, #4]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   17552:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   17556:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
   1755a:	f8a9 2022 	strh.w	r2, [r9, #34]	; 0x22
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   1755e:	2315      	movs	r3, #21
   17560:	f889 301f 	strb.w	r3, [r9, #31]
		rx->hdr.handle = conn->lll.handle;
   17564:	f8a9 c006 	strh.w	ip, [r9, #6]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   17568:	f8a9 1020 	strh.w	r1, [r9, #32]
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
   1756c:	f8a9 8024 	strh.w	r8, [r9, #36]	; 0x24
		ll_rx_put(rx->hdr.link, rx);
   17570:	4649      	mov	r1, r9
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   17572:	f8a9 7026 	strh.w	r7, [r9, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
   17576:	f7fb fcf1 	bl	12f5c <ll_rx_put>
		ll_rx_sched();
   1757a:	f7fb fcf9 	bl	12f70 <ll_rx_sched>
	break;
   1757e:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   17582:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
   17586:	f7ff b906 	b.w	16796 <ull_conn_llcp+0x16>
   1758a:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   1758e:	2a00      	cmp	r2, #0
   17590:	f47f aa59 	bne.w	16a46 <ull_conn_llcp+0x2c6>
			tx->next = conn->tx_head;
   17594:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   17598:	e9c4 8871 	strd	r8, r8, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1759c:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
   175a0:	f7ff ba5c 	b.w	16a5c <ull_conn_llcp+0x2dc>
   175a4:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   175a8:	2a00      	cmp	r2, #0
   175aa:	f47f af70 	bne.w	1748e <ull_conn_llcp+0xd0e>
			tx->next = conn->tx_head;
   175ae:	603b      	str	r3, [r7, #0]
				conn->tx_ctrl = tx;
   175b0:	e9c4 7771 	strd	r7, r7, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   175b4:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
   175b8:	e771      	b.n	1749e <ull_conn_llcp+0xd1e>
   175ba:	bf00      	nop
   175bc:	20001914 	.word	0x20001914
   175c0:	0001417f 	.word	0x0001417f
		LL_ASSERT(rx && rx->hdr.link);
   175c4:	4ad4      	ldr	r2, [pc, #848]	; (17918 <ull_conn_llcp+0x1198>)
   175c6:	49d5      	ldr	r1, [pc, #852]	; (1791c <ull_conn_llcp+0x119c>)
   175c8:	48d5      	ldr	r0, [pc, #852]	; (17920 <ull_conn_llcp+0x11a0>)
   175ca:	f640 635d 	movw	r3, #3677	; 0xe5d
   175ce:	f00d f809 	bl	245e4 <printk>
   175d2:	4040      	eors	r0, r0
   175d4:	f380 8811 	msr	BASEPRI, r0
   175d8:	f04f 0003 	mov.w	r0, #3
   175dc:	df02      	svc	2
   175de:	6838      	ldr	r0, [r7, #0]
   175e0:	f8b4 c05a 	ldrh.w	ip, [r4, #90]	; 0x5a
   175e4:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
   175e8:	e417      	b.n	16e1a <ull_conn_llcp+0x69a>
   175ea:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   175ee:	2a00      	cmp	r2, #0
   175f0:	f47f aed5 	bne.w	1739e <ull_conn_llcp+0xc1e>
			tx->next = conn->tx_head;
   175f4:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   175f6:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   175fa:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   175fe:	e564      	b.n	170ca <ull_conn_llcp+0x94a>
			if (!conn->llcp_length.cache.tx_octets) {
   17600:	f8b4 21b8 	ldrh.w	r2, [r4, #440]	; 0x1b8
   17604:	2a00      	cmp	r2, #0
   17606:	f040 8175 	bne.w	178f4 <ull_conn_llcp+0x1174>
				conn->llcp_length.ack = conn->llcp_length.req;
   1760a:	f884 31ad 	strb.w	r3, [r4, #429]	; 0x1ad
				conn->procedure_expire = 0U;
   1760e:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
   17612:	f7ff bbf9 	b.w	16e08 <ull_conn_llcp+0x688>
	    ((pdu_data_tx->llctrl.opcode !=
   17616:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   17618:	2a03      	cmp	r2, #3
   1761a:	f43f ad69 	beq.w	170f0 <ull_conn_llcp+0x970>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1761e:	2a0a      	cmp	r2, #10
   17620:	f47f a8f9 	bne.w	16816 <ull_conn_llcp+0x96>
   17624:	e564      	b.n	170f0 <ull_conn_llcp+0x970>
		if (!conn->tx_ctrl) {
   17626:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   1762a:	2b00      	cmp	r3, #0
   1762c:	f47f ab7a 	bne.w	16d24 <ull_conn_llcp+0x5a4>
			tx->next = conn->tx_head;
   17630:	603a      	str	r2, [r7, #0]
				conn->tx_ctrl = tx;
   17632:	e9c4 7771 	strd	r7, r7, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   17636:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
   1763a:	f7ff bb7a 	b.w	16d32 <ull_conn_llcp+0x5b2>
		} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   1763e:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
   17642:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   17646:	4293      	cmp	r3, r2
   17648:	f43f a8ad 	beq.w	167a6 <ull_conn_llcp+0x26>
	switch (conn->llcp_phy.state) {
   1764c:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   17650:	f003 0703 	and.w	r7, r3, #3
   17654:	2f03      	cmp	r7, #3
   17656:	f000 8270 	beq.w	17b3a <ull_conn_llcp+0x13ba>
   1765a:	2f00      	cmp	r7, #0
   1765c:	f47f a8a2 	bne.w	167a4 <ull_conn_llcp+0x24>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   17660:	48b0      	ldr	r0, [pc, #704]	; (17924 <ull_conn_llcp+0x11a4>)
   17662:	f7f7 fb93 	bl	ed8c <mem_acquire>
		if (!tx) {
   17666:	4601      	mov	r1, r0
   17668:	2800      	cmp	r0, #0
   1766a:	f43f ad35 	beq.w	170d8 <ull_conn_llcp+0x958>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   1766e:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
		conn->phy_pref_tx = conn->llcp_phy.tx;
   17672:	f894 21c0 	ldrb.w	r2, [r4, #448]	; 0x1c0
		conn->lll.phy_flags = conn->llcp_phy.flags;
   17676:	f894 71bf 	ldrb.w	r7, [r4, #447]	; 0x1bf
   1767a:	f894 c060 	ldrb.w	ip, [r4, #96]	; 0x60
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   1767e:	2001      	movs	r0, #1
   17680:	f360 0301 	bfi	r3, r0, #0, #2
		conn->phy_pref_tx = conn->llcp_phy.tx;
   17684:	f3c3 0082 	ubfx	r0, r3, #2, #3
   17688:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
   1768c:	f3c3 1042 	ubfx	r0, r3, #5, #3
   17690:	f360 02c5 	bfi	r2, r0, #3, #3
		conn->lll.phy_flags = conn->llcp_phy.flags;
   17694:	f3c7 0740 	ubfx	r7, r7, #1, #1
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17698:	7908      	ldrb	r0, [r1, #4]
		conn->phy_pref_rx = conn->llcp_phy.rx;
   1769a:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
		conn->lll.phy_flags = conn->llcp_phy.flags;
   1769e:	f367 0cc3 	bfi	ip, r7, #3, #1
		conn->phy_pref_tx = conn->llcp_phy.tx;
   176a2:	f3c3 0282 	ubfx	r2, r3, #2, #3
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   176a6:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
		conn->lll.phy_flags = conn->llcp_phy.flags;
   176aa:	f884 c060 	strb.w	ip, [r4, #96]	; 0x60
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   176ae:	f040 0003 	orr.w	r0, r0, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
   176b2:	f3c3 1342 	ubfx	r3, r3, #5, #3
		pdu_ctrl_tx->len =
   176b6:	2703      	movs	r7, #3
		pr->tx_phys = conn->llcp_phy.tx;
   176b8:	720a      	strb	r2, [r1, #8]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   176ba:	2216      	movs	r2, #22
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   176bc:	7108      	strb	r0, [r1, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   176be:	71ca      	strb	r2, [r1, #7]
		pr->rx_phys = conn->llcp_phy.rx;
   176c0:	724b      	strb	r3, [r1, #9]
		pdu_ctrl_tx->len =
   176c2:	714f      	strb	r7, [r1, #5]
	ctrl_tx_pause_enqueue(conn, tx, false);
   176c4:	2200      	movs	r2, #0
   176c6:	4620      	mov	r0, r4
   176c8:	f7fc fc36 	bl	13f38 <ctrl_tx_pause_enqueue>
   176cc:	e500      	b.n	170d0 <ull_conn_llcp+0x950>
		start_enc_rsp_send(conn, pdu_ctrl_tx);
   176ce:	4651      	mov	r1, sl
   176d0:	4620      	mov	r0, r4
   176d2:	f7fc fe33 	bl	1433c <start_enc_rsp_send>
	    conn->tx_head &&
   176d6:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   176da:	2b00      	cmp	r3, #0
   176dc:	f000 8088 	beq.w	177f0 <ull_conn_llcp+0x1070>
	    !conn->llcp_enc.pause_tx &&
   176e0:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
   176e4:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
	    conn->tx_head &&
   176e8:	0789      	lsls	r1, r1, #30
   176ea:	f100 8083 	bmi.w	177f4 <ull_conn_llcp+0x1074>
	    !conn->llcp_phy.pause_tx &&
   176ee:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   176f2:	07c8      	lsls	r0, r1, #31
   176f4:	d47e      	bmi.n	177f4 <ull_conn_llcp+0x1074>
		if (conn->tx_head == conn->tx_data) {
   176f6:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   176fa:	428b      	cmp	r3, r1
   176fc:	f000 825f 	beq.w	17bbe <ull_conn_llcp+0x143e>
		} else if (!conn->tx_ctrl) {
   17700:	2a00      	cmp	r2, #0
   17702:	f000 832e 	beq.w	17d62 <ull_conn_llcp+0x15e2>
	tx->next = conn->tx_ctrl_last->next;
   17706:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1770a:	681a      	ldr	r2, [r3, #0]
   1770c:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
   1770e:	601f      	str	r7, [r3, #0]
	conn->tx_ctrl_last = tx;
   17710:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
	if (!tx->next) {
   17714:	683b      	ldr	r3, [r7, #0]
   17716:	2b00      	cmp	r3, #0
   17718:	f000 814b 	beq.w	179b2 <ull_conn_llcp+0x1232>
		conn->llcp_enc.pause_rx = 0U;
   1771c:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   17720:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   17724:	f023 0303 	bic.w	r3, r3, #3
   17728:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
   1772c:	f7ff bb05 	b.w	16d3a <ull_conn_llcp+0x5ba>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   17730:	230d      	movs	r3, #13
		p->error_code =	conn->llcp.encryption.error_code;
   17732:	f887 8008 	strb.w	r8, [r7, #8]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   17736:	71fb      	strb	r3, [r7, #7]
		p->error_code =	conn->llcp.encryption.error_code;
   17738:	f04f 0902 	mov.w	r9, #2
   1773c:	f7ff bad4 	b.w	16ce8 <ull_conn_llcp+0x568>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   17740:	4878      	ldr	r0, [pc, #480]	; (17924 <ull_conn_llcp+0x11a4>)
   17742:	f7f7 fb23 	bl	ed8c <mem_acquire>
		if (tx) {
   17746:	2800      	cmp	r0, #0
   17748:	f43f acc6 	beq.w	170d8 <ull_conn_llcp+0x958>
			conn->llcp_version.ack--;
   1774c:	f894 2139 	ldrb.w	r2, [r4, #313]	; 0x139
			conn->llcp_version.tx = 1U;
   17750:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
			conn->llcp_version.ack--;
   17754:	3a01      	subs	r2, #1
   17756:	f884 2139 	strb.w	r2, [r4, #313]	; 0x139
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   1775a:	7902      	ldrb	r2, [r0, #4]
			conn->llcp_version.tx = 1U;
   1775c:	f043 0301 	orr.w	r3, r3, #1
			pdu->len =
   17760:	2106      	movs	r1, #6
			conn->llcp_version.tx = 1U;
   17762:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   17766:	f042 0203 	orr.w	r2, r2, #3
			pdu->len =
   1776a:	7141      	strb	r1, [r0, #5]
	    conn->tx_head &&
   1776c:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   17770:	7102      	strb	r2, [r0, #4]
			pdu->llctrl.version_ind.version_number =
   17772:	210b      	movs	r1, #11
			pdu->llctrl.version_ind.company_id = cid;
   17774:	f06f 020e 	mvn.w	r2, #14
			pdu->llctrl.opcode =
   17778:	270c      	movs	r7, #12
			pdu->llctrl.version_ind.version_number =
   1777a:	7201      	strb	r1, [r0, #8]
			pdu->llctrl.version_ind.company_id = cid;
   1777c:	7242      	strb	r2, [r0, #9]
   1777e:	2105      	movs	r1, #5
			pdu->llctrl.version_ind.sub_version_number = svn;
   17780:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
			pdu->llctrl.opcode =
   17784:	71c7      	strb	r7, [r0, #7]
			pdu->llctrl.version_ind.company_id = cid;
   17786:	7281      	strb	r1, [r0, #10]
			pdu->llctrl.version_ind.sub_version_number = svn;
   17788:	72c2      	strb	r2, [r0, #11]
   1778a:	7302      	strb	r2, [r0, #12]
	if (
   1778c:	2b00      	cmp	r3, #0
   1778e:	f000 8104 	beq.w	1799a <ull_conn_llcp+0x121a>
	    !conn->llcp_enc.pause_tx &&
   17792:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   17796:	0792      	lsls	r2, r2, #30
   17798:	f100 80ff 	bmi.w	1799a <ull_conn_llcp+0x121a>
	    !conn->llcp_phy.pause_tx &&
   1779c:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   177a0:	07d7      	lsls	r7, r2, #31
   177a2:	f100 80fa 	bmi.w	1799a <ull_conn_llcp+0x121a>
		if (conn->tx_head == conn->tx_data) {
   177a6:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   177aa:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   177ac:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   177b0:	f000 8295 	beq.w	17cde <ull_conn_llcp+0x155e>
		} else if (!conn->tx_ctrl) {
   177b4:	2a00      	cmp	r2, #0
   177b6:	f47f ac80 	bne.w	170ba <ull_conn_llcp+0x93a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   177ba:	791a      	ldrb	r2, [r3, #4]
   177bc:	f002 0203 	and.w	r2, r2, #3
   177c0:	2a03      	cmp	r2, #3
   177c2:	f000 8332 	beq.w	17e2a <ull_conn_llcp+0x16aa>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   177c6:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   177ca:	e476      	b.n	170ba <ull_conn_llcp+0x93a>
		LL_ASSERT(0);
   177cc:	f640 435e 	movw	r3, #3166	; 0xc5e
		LL_ASSERT(0);
   177d0:	4a51      	ldr	r2, [pc, #324]	; (17918 <ull_conn_llcp+0x1198>)
   177d2:	4955      	ldr	r1, [pc, #340]	; (17928 <ull_conn_llcp+0x11a8>)
   177d4:	4852      	ldr	r0, [pc, #328]	; (17920 <ull_conn_llcp+0x11a0>)
   177d6:	f00c ff05 	bl	245e4 <printk>
   177da:	4040      	eors	r0, r0
   177dc:	f380 8811 	msr	BASEPRI, r0
   177e0:	f04f 0003 	mov.w	r0, #3
   177e4:	df02      	svc	2
		break;
   177e6:	e477      	b.n	170d8 <ull_conn_llcp+0x958>
		conn->tx_data_last = tx;
   177e8:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   177ec:	f7ff bb8c 	b.w	16f08 <ull_conn_llcp+0x788>
   177f0:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   177f4:	2a00      	cmp	r2, #0
   177f6:	d186      	bne.n	17706 <ull_conn_llcp+0xf86>
			tx->next = conn->tx_head;
   177f8:	603b      	str	r3, [r7, #0]
				conn->tx_ctrl = tx;
   177fa:	e9c4 7771 	strd	r7, r7, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   177fe:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
   17802:	e787      	b.n	17714 <ull_conn_llcp+0xf94>
		conn->tx_data_last = tx;
   17804:	f8c4 81d4 	str.w	r8, [r4, #468]	; 0x1d4
   17808:	f7ff b92b 	b.w	16a62 <ull_conn_llcp+0x2e2>
   1780c:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
		conn->procedure_expire = conn->procedure_reload;
   17810:	e45e      	b.n	170d0 <ull_conn_llcp+0x950>
			ecb_encrypt(&conn->llcp_enc.ltk[0],
   17812:	f104 097b 	add.w	r9, r4, #123	; 0x7b
   17816:	464b      	mov	r3, r9
   17818:	4642      	mov	r2, r8
   1781a:	f104 01f6 	add.w	r1, r4, #246	; 0xf6
   1781e:	f204 1071 	addw	r0, r4, #369	; 0x171
   17822:	f004 f8eb 	bl	1b9fc <ecb_encrypt>
   17826:	f8d4 2087 	ldr.w	r2, [r4, #135]	; 0x87
   1782a:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8
   1782e:	f8d4 007b 	ldr.w	r0, [r4, #123]	; 0x7b
   17832:	f8d4 107f 	ldr.w	r1, [r4, #127]	; 0x7f
   17836:	f8d4 3083 	ldr.w	r3, [r4, #131]	; 0x83
   1783a:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
   1783e:	4622      	mov	r2, r4
   17840:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
   17844:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
   17848:	f852 1f94 	ldr.w	r1, [r2, #148]!
			lll->ccm_tx.direction = 0U;
   1784c:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
   17850:	6852      	ldr	r2, [r2, #4]
   17852:	f8c4 20b9 	str.w	r2, [r4, #185]	; 0xb9
   17856:	f8c4 10b5 	str.w	r1, [r4, #181]	; 0xb5
			lll->enc_rx = 1U;
   1785a:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
			lll->ccm_rx.direction = 1U;
   1785e:	f894 1093 	ldrb.w	r1, [r4, #147]	; 0x93
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17862:	793b      	ldrb	r3, [r7, #4]
			lll->ccm_rx.counter = 0U;
   17864:	f884 808b 	strb.w	r8, [r4, #139]	; 0x8b
			lll->enc_rx = 1U;
   17868:	f042 0208 	orr.w	r2, r2, #8
			lll->ccm_rx.direction = 1U;
   1786c:	f041 0101 	orr.w	r1, r1, #1
			lll->ccm_tx.direction = 0U;
   17870:	f368 0000 	bfi	r0, r8, #0, #1
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   17874:	f04f 0c01 	mov.w	ip, #1
			lll->enc_rx = 1U;
   17878:	f884 207a 	strb.w	r2, [r4, #122]	; 0x7a
			lll->ccm_rx.counter = 0U;
   1787c:	f884 808c 	strb.w	r8, [r4, #140]	; 0x8c
   17880:	f884 808d 	strb.w	r8, [r4, #141]	; 0x8d
   17884:	f884 808e 	strb.w	r8, [r4, #142]	; 0x8e
   17888:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
   1788c:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
   17890:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
   17894:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
			lll->ccm_tx.counter = 0U;
   17898:	f8c4 80ac 	str.w	r8, [r4, #172]	; 0xac
   1789c:	f8c4 80b0 	str.w	r8, [r4, #176]	; 0xb0
			lll->ccm_rx.direction = 1U;
   178a0:	f884 1093 	strb.w	r1, [r4, #147]	; 0x93
			lll->ccm_tx.direction = 0U;
   178a4:	f884 00b4 	strb.w	r0, [r4, #180]	; 0xb4
			pdu_ctrl_tx->llctrl.opcode =
   178a8:	2205      	movs	r2, #5
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   178aa:	f043 0303 	orr.w	r3, r3, #3
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   178ae:	f887 c005 	strb.w	ip, [r7, #5]
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   178b2:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->llctrl.opcode =
   178b4:	71fa      	strb	r2, [r7, #7]
	    conn->tx_head &&
   178b6:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
	if (
   178ba:	2a00      	cmp	r2, #0
   178bc:	d04c      	beq.n	17958 <ull_conn_llcp+0x11d8>
	    !conn->llcp_enc.pause_tx &&
   178be:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
	    conn->tx_head &&
   178c2:	079b      	lsls	r3, r3, #30
   178c4:	d448      	bmi.n	17958 <ull_conn_llcp+0x11d8>
	    !conn->llcp_phy.pause_tx &&
   178c6:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   178ca:	07d8      	lsls	r0, r3, #31
   178cc:	d444      	bmi.n	17958 <ull_conn_llcp+0x11d8>
		if (conn->tx_head == conn->tx_data) {
   178ce:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   178d2:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   178d6:	428a      	cmp	r2, r1
   178d8:	f000 824b 	beq.w	17d72 <ull_conn_llcp+0x15f2>
		} else if (!conn->tx_ctrl) {
   178dc:	2b00      	cmp	r3, #0
   178de:	f000 825c 	beq.w	17d9a <ull_conn_llcp+0x161a>
	tx->next = conn->tx_ctrl_last->next;
   178e2:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   178e6:	681a      	ldr	r2, [r3, #0]
   178e8:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
   178ea:	601f      	str	r7, [r3, #0]
	conn->tx_ctrl_last = tx;
   178ec:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
	if (!tx->next) {
   178f0:	683b      	ldr	r3, [r7, #0]
   178f2:	e5d4      	b.n	1749e <ull_conn_llcp+0xd1e>
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   178f4:	f894 01ae 	ldrb.w	r0, [r4, #430]	; 0x1ae
				conn->llcp_length.tx_time =
   178f8:	f8b4 71ba 	ldrh.w	r7, [r4, #442]	; 0x1ba
				conn->llcp_length.tx_octets =
   178fc:	f8a4 21b2 	strh.w	r2, [r4, #434]	; 0x1b2
				conn->llcp_length.cache.tx_octets = 0;
   17900:	2300      	movs	r3, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   17902:	f363 0002 	bfi	r0, r3, #0, #3
   17906:	f884 01ae 	strb.w	r0, [r4, #430]	; 0x1ae
				conn->llcp_length.cache.tx_octets = 0;
   1790a:	f8a4 31b8 	strh.w	r3, [r4, #440]	; 0x1b8
				conn->llcp_length.tx_time =
   1790e:	f8a4 71b6 	strh.w	r7, [r4, #438]	; 0x1b6
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   17912:	f7ff ba79 	b.w	16e08 <ull_conn_llcp+0x688>
   17916:	bf00      	nop
   17918:	0002b604 	.word	0x0002b604
   1791c:	0002b6d0 	.word	0x0002b6d0
   17920:	0002b0c4 	.word	0x0002b0c4
   17924:	20001914 	.word	0x20001914
   17928:	0002b15c 	.word	0x0002b15c
	switch (conn->llcp_conn_param.state) {
   1792c:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   17930:	f003 0307 	and.w	r3, r3, #7
   17934:	2b05      	cmp	r3, #5
   17936:	f200 82a8 	bhi.w	17e8a <ull_conn_llcp+0x170a>
   1793a:	a001      	add	r0, pc, #4	; (adr r0, 17940 <ull_conn_llcp+0x11c0>)
   1793c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   17940:	00017229 	.word	0x00017229
   17944:	000171a9 	.word	0x000171a9
   17948:	00017155 	.word	0x00017155
   1794c:	000167a7 	.word	0x000167a7
   17950:	000167a7 	.word	0x000167a7
   17954:	000167a7 	.word	0x000167a7
		if (!conn->tx_ctrl) {
   17958:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   1795c:	2b00      	cmp	r3, #0
   1795e:	d1c0      	bne.n	178e2 <ull_conn_llcp+0x1162>
			tx->next = conn->tx_head;
   17960:	603a      	str	r2, [r7, #0]
				conn->tx_ctrl = tx;
   17962:	e9c4 7771 	strd	r7, r7, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   17966:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
   1796a:	e7c1      	b.n	178f0 <ull_conn_llcp+0x1170>
			conn->tx_data = conn->tx_data->next;
   1796c:	681a      	ldr	r2, [r3, #0]
   1796e:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   17972:	2f00      	cmp	r7, #0
   17974:	f47f a80c 	bne.w	16990 <ull_conn_llcp+0x210>
			tx->next = conn->tx_head->next;
   17978:	681a      	ldr	r2, [r3, #0]
   1797a:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   1797c:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   1797e:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   17980:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   17984:	f7ff b80c 	b.w	169a0 <ull_conn_llcp+0x220>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   17988:	791a      	ldrb	r2, [r3, #4]
   1798a:	f002 0203 	and.w	r2, r2, #3
   1798e:	2a03      	cmp	r2, #3
   17990:	d071      	beq.n	17a76 <ull_conn_llcp+0x12f6>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   17992:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   17996:	f7fe bffb 	b.w	16990 <ull_conn_llcp+0x210>
		if (!conn->tx_ctrl) {
   1799a:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   1799e:	2a00      	cmp	r2, #0
   179a0:	f47f ab8b 	bne.w	170ba <ull_conn_llcp+0x93a>
			tx->next = conn->tx_head;
   179a4:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   179a6:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   179aa:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   179ae:	f7ff bb8b 	b.w	170c8 <ull_conn_llcp+0x948>
		conn->tx_data_last = tx;
   179b2:	f8c4 71d4 	str.w	r7, [r4, #468]	; 0x1d4
   179b6:	e6b1      	b.n	1771c <ull_conn_llcp+0xf9c>
			conn->tx_data = conn->tx_data->next;
   179b8:	6819      	ldr	r1, [r3, #0]
   179ba:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   179be:	2a00      	cmp	r2, #0
   179c0:	f47f a94f 	bne.w	16c62 <ull_conn_llcp+0x4e2>
			tx->next = conn->tx_head->next;
   179c4:	681a      	ldr	r2, [r3, #0]
   179c6:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   179c8:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   179ca:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   179cc:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   179d0:	f7ff b94f 	b.w	16c72 <ull_conn_llcp+0x4f2>
			conn->tx_data = conn->tx_data->next;
   179d4:	6819      	ldr	r1, [r3, #0]
   179d6:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   179da:	2a00      	cmp	r2, #0
   179dc:	f47f a9ee 	bne.w	16dbc <ull_conn_llcp+0x63c>
			tx->next = conn->tx_head->next;
   179e0:	681a      	ldr	r2, [r3, #0]
   179e2:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   179e4:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   179e6:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   179e8:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   179ec:	f7ff b9ee 	b.w	16dcc <ull_conn_llcp+0x64c>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   179f0:	791a      	ldrb	r2, [r3, #4]
   179f2:	f002 0203 	and.w	r2, r2, #3
   179f6:	2a03      	cmp	r2, #3
   179f8:	f000 808e 	beq.w	17b18 <ull_conn_llcp+0x1398>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   179fc:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   17a00:	f7ff b92f 	b.w	16c62 <ull_conn_llcp+0x4e2>
			conn->tx_data = conn->tx_data->next;
   17a04:	6819      	ldr	r1, [r3, #0]
   17a06:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   17a0a:	2a00      	cmp	r2, #0
   17a0c:	f47f a81b 	bne.w	16a46 <ull_conn_llcp+0x2c6>
			tx->next = conn->tx_head->next;
   17a10:	681a      	ldr	r2, [r3, #0]
   17a12:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
   17a16:	f8c3 8000 	str.w	r8, [r3]
				conn->tx_ctrl = tx;
   17a1a:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
   17a1e:	e9c4 8872 	strd	r8, r8, [r4, #456]	; 0x1c8
   17a22:	f7ff b81b 	b.w	16a5c <ull_conn_llcp+0x2dc>
		if (!conn->tx_ctrl) {
   17a26:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   17a2a:	2b00      	cmp	r3, #0
   17a2c:	f47f ab45 	bne.w	170ba <ull_conn_llcp+0x93a>
			tx->next = conn->tx_head;
   17a30:	6001      	str	r1, [r0, #0]
				conn->tx_ctrl = tx;
   17a32:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   17a36:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   17a3a:	f7ff bb45 	b.w	170c8 <ull_conn_llcp+0x948>
			conn->tx_data = conn->tx_data->next;
   17a3e:	f8dc 3000 	ldr.w	r3, [ip]
   17a42:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   17a46:	2a00      	cmp	r2, #0
   17a48:	f47f aa51 	bne.w	16eee <ull_conn_llcp+0x76e>
			tx->next = conn->tx_head->next;
   17a4c:	f8dc 3000 	ldr.w	r3, [ip]
   17a50:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   17a52:	f8cc 0000 	str.w	r0, [ip]
				conn->tx_ctrl = tx;
   17a56:	f8d0 c000 	ldr.w	ip, [r0]
				conn->tx_ctrl_last = tx;
   17a5a:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   17a5e:	f7ff ba4f 	b.w	16f00 <ull_conn_llcp+0x780>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   17a62:	791a      	ldrb	r2, [r3, #4]
   17a64:	f002 0203 	and.w	r2, r2, #3
   17a68:	2a03      	cmp	r2, #3
   17a6a:	f000 8145 	beq.w	17cf8 <ull_conn_llcp+0x1578>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   17a6e:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   17a72:	f7ff b9a3 	b.w	16dbc <ull_conn_llcp+0x63c>
	    ((pdu_data_tx->llctrl.opcode !=
   17a76:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   17a78:	2a03      	cmp	r2, #3
   17a7a:	f43f af7d 	beq.w	17978 <ull_conn_llcp+0x11f8>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   17a7e:	2a0a      	cmp	r2, #10
   17a80:	d187      	bne.n	17992 <ull_conn_llcp+0x1212>
   17a82:	e779      	b.n	17978 <ull_conn_llcp+0x11f8>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   17a84:	f89c 3004 	ldrb.w	r3, [ip, #4]
   17a88:	f003 0303 	and.w	r3, r3, #3
   17a8c:	2b03      	cmp	r3, #3
   17a8e:	f000 8153 	beq.w	17d38 <ull_conn_llcp+0x15b8>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   17a92:	e9c4 cc72 	strd	ip, ip, [r4, #456]	; 0x1c8
   17a96:	f7ff ba2a 	b.w	16eee <ull_conn_llcp+0x76e>
		LL_ASSERT(rx && rx->hdr.link);
   17a9a:	4ad1      	ldr	r2, [pc, #836]	; (17de0 <ull_conn_llcp+0x1660>)
   17a9c:	49d1      	ldr	r1, [pc, #836]	; (17de4 <ull_conn_llcp+0x1664>)
   17a9e:	48d2      	ldr	r0, [pc, #840]	; (17de8 <ull_conn_llcp+0x1668>)
   17aa0:	f640 635d 	movw	r3, #3677	; 0xe5d
   17aa4:	f00c fd9e 	bl	245e4 <printk>
   17aa8:	4040      	eors	r0, r0
   17aaa:	f380 8811 	msr	BASEPRI, r0
   17aae:	f04f 0003 	mov.w	r0, #3
   17ab2:	df02      	svc	2
   17ab4:	f8d9 0000 	ldr.w	r0, [r9]
   17ab8:	e53a      	b.n	17530 <ull_conn_llcp+0xdb0>
			conn->tx_data = conn->tx_data->next;
   17aba:	6819      	ldr	r1, [r3, #0]
   17abc:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   17ac0:	2a00      	cmp	r2, #0
   17ac2:	f47f ac6c 	bne.w	1739e <ull_conn_llcp+0xc1e>
			tx->next = conn->tx_head->next;
   17ac6:	681a      	ldr	r2, [r3, #0]
   17ac8:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   17aca:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   17acc:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   17ace:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   17ad2:	f7ff bafa 	b.w	170ca <ull_conn_llcp+0x94a>
			conn->tx_data = conn->tx_data->next;
   17ad6:	6819      	ldr	r1, [r3, #0]
   17ad8:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   17adc:	2a00      	cmp	r2, #0
   17ade:	f47f acd6 	bne.w	1748e <ull_conn_llcp+0xd0e>
			tx->next = conn->tx_head->next;
   17ae2:	681a      	ldr	r2, [r3, #0]
   17ae4:	603a      	str	r2, [r7, #0]
			conn->tx_head->next = tx;
   17ae6:	601f      	str	r7, [r3, #0]
				conn->tx_ctrl = tx;
   17ae8:	683b      	ldr	r3, [r7, #0]
				conn->tx_ctrl_last = tx;
   17aea:	e9c4 7772 	strd	r7, r7, [r4, #456]	; 0x1c8
   17aee:	e4d6      	b.n	1749e <ull_conn_llcp+0xd1e>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   17af0:	791a      	ldrb	r2, [r3, #4]
   17af2:	f002 0203 	and.w	r2, r2, #3
   17af6:	2a03      	cmp	r2, #3
   17af8:	f000 8127 	beq.w	17d4a <ull_conn_llcp+0x15ca>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   17afc:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   17b00:	f7fe bfa1 	b.w	16a46 <ull_conn_llcp+0x2c6>
			if (!conn->llcp_length.cache.tx_octets) {
   17b04:	f8b4 11b8 	ldrh.w	r1, [r4, #440]	; 0x1b8
   17b08:	2900      	cmp	r1, #0
   17b0a:	f040 80fd 	bne.w	17d08 <ull_conn_llcp+0x1588>
				conn->llcp_length.ack = conn->llcp_length.req;
   17b0e:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
				conn->procedure_expire = 0U;
   17b12:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
   17b16:	e500      	b.n	1751a <ull_conn_llcp+0xd9a>
	    ((pdu_data_tx->llctrl.opcode !=
   17b18:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   17b1a:	2a03      	cmp	r2, #3
   17b1c:	f43f af52 	beq.w	179c4 <ull_conn_llcp+0x1244>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   17b20:	2a0a      	cmp	r2, #10
   17b22:	f47f af6b 	bne.w	179fc <ull_conn_llcp+0x127c>
   17b26:	e74d      	b.n	179c4 <ull_conn_llcp+0x1244>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   17b28:	791a      	ldrb	r2, [r3, #4]
   17b2a:	f002 0203 	and.w	r2, r2, #3
   17b2e:	2a03      	cmp	r2, #3
   17b30:	f000 80fa 	beq.w	17d28 <ull_conn_llcp+0x15a8>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   17b34:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   17b38:	e431      	b.n	1739e <ull_conn_llcp+0xc1e>
		if (conn->llcp_phy.tx & PHY_2M) {
   17b3a:	071f      	lsls	r7, r3, #28
		conn->llcp_phy.ack = conn->llcp_phy.req;
   17b3c:	f884 21bd 	strb.w	r2, [r4, #445]	; 0x1bd
		if (conn->llcp_phy.tx & PHY_2M) {
   17b40:	f3c3 0282 	ubfx	r2, r3, #2, #3
   17b44:	f140 8142 	bpl.w	17dcc <ull_conn_llcp+0x164c>
			conn->llcp_phy.tx = PHY_2M;
   17b48:	2202      	movs	r2, #2
   17b4a:	f362 0384 	bfi	r3, r2, #2, #3
   17b4e:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
		if (conn->llcp_phy.rx & PHY_2M) {
   17b52:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   17b56:	065f      	lsls	r7, r3, #25
   17b58:	ea4f 1253 	mov.w	r2, r3, lsr #5
   17b5c:	f140 812e 	bpl.w	17dbc <ull_conn_llcp+0x163c>
			conn->llcp_phy.rx = PHY_2M;
   17b60:	2202      	movs	r2, #2
   17b62:	f362 1347 	bfi	r3, r2, #5, #3
   17b66:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
   17b6a:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   17b6e:	f894 c060 	ldrb.w	ip, [r4, #96]	; 0x60
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   17b72:	f894 7061 	ldrb.w	r7, [r4, #97]	; 0x61
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   17b76:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
   17b7a:	f3c3 0182 	ubfx	r1, r3, #2, #3
   17b7e:	f00c 0c07 	and.w	ip, ip, #7
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   17b82:	f007 0707 	and.w	r7, r7, #7
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   17b86:	f3c2 0280 	ubfx	r2, r2, #2, #1
			conn->llcp.phy_upd_ind.tx = 0U;
   17b8a:	458c      	cmp	ip, r1
   17b8c:	bf08      	it	eq
   17b8e:	2100      	moveq	r1, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
   17b90:	0052      	lsls	r2, r2, #1
			conn->llcp.phy_upd_ind.rx = 0U;
   17b92:	ebb7 1f53 	cmp.w	r7, r3, lsr #5
		conn->llcp.phy_upd_ind.initiate = 1U;
   17b96:	f042 0201 	orr.w	r2, r2, #1
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   17b9a:	ea4f 1353 	mov.w	r3, r3, lsr #5
			conn->llcp.phy_upd_ind.rx = 0U;
   17b9e:	bf08      	it	eq
   17ba0:	2300      	moveq	r3, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
   17ba2:	ea42 1243 	orr.w	r2, r2, r3, lsl #5
   17ba6:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
		conn->llcp_ack -= 2U;
   17baa:	1e83      	subs	r3, r0, #2
		conn->llcp_type = LLCP_PHY_UPD;
   17bac:	2106      	movs	r1, #6
		conn->llcp_ack -= 2U;
   17bae:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		conn->llcp.phy_upd_ind.initiate = 1U;
   17bb2:	f884 20e8 	strb.w	r2, [r4, #232]	; 0xe8
		conn->llcp_type = LLCP_PHY_UPD;
   17bb6:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   17bba:	f7fe be54 	b.w	16866 <ull_conn_llcp+0xe6>
			conn->tx_data = conn->tx_data->next;
   17bbe:	6819      	ldr	r1, [r3, #0]
   17bc0:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   17bc4:	2a00      	cmp	r2, #0
   17bc6:	f47f ad9e 	bne.w	17706 <ull_conn_llcp+0xf86>
			tx->next = conn->tx_head->next;
   17bca:	681a      	ldr	r2, [r3, #0]
   17bcc:	603a      	str	r2, [r7, #0]
			conn->tx_head->next = tx;
   17bce:	601f      	str	r7, [r3, #0]
				conn->tx_ctrl_last = tx;
   17bd0:	e9c4 7772 	strd	r7, r7, [r4, #456]	; 0x1c8
   17bd4:	e59e      	b.n	17714 <ull_conn_llcp+0xf94>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   17bd6:	791a      	ldrb	r2, [r3, #4]
   17bd8:	f002 0203 	and.w	r2, r2, #3
   17bdc:	2a03      	cmp	r2, #3
   17bde:	f000 80d4 	beq.w	17d8a <ull_conn_llcp+0x160a>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   17be2:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   17be6:	e452      	b.n	1748e <ull_conn_llcp+0xd0e>
			conn->tx_data = conn->tx_data->next;
   17be8:	6811      	ldr	r1, [r2, #0]
   17bea:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   17bee:	2b00      	cmp	r3, #0
   17bf0:	f47f a898 	bne.w	16d24 <ull_conn_llcp+0x5a4>
			tx->next = conn->tx_head->next;
   17bf4:	6813      	ldr	r3, [r2, #0]
   17bf6:	603b      	str	r3, [r7, #0]
			conn->tx_head->next = tx;
   17bf8:	6017      	str	r7, [r2, #0]
				conn->tx_ctrl_last = tx;
   17bfa:	e9c4 7772 	strd	r7, r7, [r4, #456]	; 0x1c8
   17bfe:	f7ff b898 	b.w	16d32 <ull_conn_llcp+0x5b2>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   17c02:	487a      	ldr	r0, [pc, #488]	; (17dec <ull_conn_llcp+0x166c>)
   17c04:	f7f7 f8c2 	bl	ed8c <mem_acquire>
		if (!tx) {
   17c08:	4601      	mov	r1, r0
   17c0a:	2800      	cmp	r0, #0
   17c0c:	f43f aa64 	beq.w	170d8 <ull_conn_llcp+0x958>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   17c10:	7903      	ldrb	r3, [r0, #4]
   17c12:	f043 0303 	orr.w	r3, r3, #3
   17c16:	710b      	strb	r3, [r1, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   17c18:	2011      	movs	r0, #17
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   17c1a:	2203      	movs	r2, #3
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   17c1c:	230f      	movs	r3, #15
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   17c1e:	71c8      	strb	r0, [r1, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   17c20:	714a      	strb	r2, [r1, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   17c22:	720b      	strb	r3, [r1, #8]
		rej->error_code = conn->llcp_conn_param.status;
   17c24:	f894 3187 	ldrb.w	r3, [r4, #391]	; 0x187
   17c28:	724b      	strb	r3, [r1, #9]
	ctrl_tx_pause_enqueue(conn, tx, false);
   17c2a:	4620      	mov	r0, r4
   17c2c:	2200      	movs	r2, #0
   17c2e:	f7fc f983 	bl	13f38 <ctrl_tx_pause_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   17c32:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   17c36:	f884 3185 	strb.w	r3, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   17c3a:	2300      	movs	r3, #0
   17c3c:	603b      	str	r3, [r7, #0]
		return;
   17c3e:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
   17c42:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   17c46:	f7fe bda6 	b.w	16796 <ull_conn_llcp+0x16>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   17c4a:	4868      	ldr	r0, [pc, #416]	; (17dec <ull_conn_llcp+0x166c>)
   17c4c:	f7f7 f89e 	bl	ed8c <mem_acquire>
	if (!tx) {
   17c50:	4601      	mov	r1, r0
   17c52:	2800      	cmp	r0, #0
   17c54:	f43f aa40 	beq.w	170d8 <ull_conn_llcp+0x958>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   17c58:	7903      	ldrb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
   17c5a:	2218      	movs	r2, #24
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   17c5c:	f043 0303 	orr.w	r3, r3, #3
   17c60:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
   17c62:	7142      	strb	r2, [r0, #5]
	rsp->interval_min =
   17c64:	f8b4 2188 	ldrh.w	r2, [r4, #392]	; 0x188
	rsp->interval_max =
   17c68:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
	rsp->latency =
   17c6c:	f8b4 018c 	ldrh.w	r0, [r4, #396]	; 0x18c
	rsp->interval_min =
   17c70:	810a      	strh	r2, [r1, #8]
	rsp->timeout =
   17c72:	f8b4 218e 	ldrh.w	r2, [r4, #398]	; 0x18e
	rsp->interval_max =
   17c76:	814b      	strh	r3, [r1, #10]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
   17c78:	2310      	movs	r3, #16
	rsp->latency =
   17c7a:	8188      	strh	r0, [r1, #12]
	rsp->timeout =
   17c7c:	81ca      	strh	r2, [r1, #14]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
   17c7e:	71cb      	strb	r3, [r1, #7]
	rsp->preferred_periodicity =
   17c80:	f894 3190 	ldrb.w	r3, [r4, #400]	; 0x190
   17c84:	740b      	strb	r3, [r1, #16]
	rsp->reference_conn_event_count =
   17c86:	f8b4 3192 	ldrh.w	r3, [r4, #402]	; 0x192
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
   17c8a:	f8b4 0194 	ldrh.w	r0, [r4, #404]	; 0x194
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
   17c8e:	f8b4 2196 	ldrh.w	r2, [r4, #406]	; 0x196
	rsp->reference_conn_event_count =
   17c92:	f8a1 3011 	strh.w	r3, [r1, #17]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
   17c96:	f8b4 3198 	ldrh.w	r3, [r4, #408]	; 0x198
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
   17c9a:	f8a1 0013 	strh.w	r0, [r1, #19]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
   17c9e:	f8b4 019a 	ldrh.w	r0, [r4, #410]	; 0x19a
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
   17ca2:	f8a1 2015 	strh.w	r2, [r1, #21]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
   17ca6:	f8b4 219c 	ldrh.w	r2, [r4, #412]	; 0x19c
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
   17caa:	f8a1 3017 	strh.w	r3, [r1, #23]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
   17cae:	f8b4 319e 	ldrh.w	r3, [r4, #414]	; 0x19e
   17cb2:	f8a1 301d 	strh.w	r3, [r1, #29]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
   17cb6:	f8a1 0019 	strh.w	r0, [r1, #25]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
   17cba:	f8a1 201b 	strh.w	r2, [r1, #27]
	ctrl_tx_pause_enqueue(conn, tx, false);
   17cbe:	4620      	mov	r0, r4
   17cc0:	4642      	mov	r2, r8
   17cc2:	f7fc f939 	bl	13f38 <ctrl_tx_pause_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   17cc6:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   17cca:	f884 3185 	strb.w	r3, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   17cce:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
   17cd2:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   17cd6:	f8c7 8000 	str.w	r8, [r7]
}
   17cda:	f7fe bd5c 	b.w	16796 <ull_conn_llcp+0x16>
			conn->tx_data = conn->tx_data->next;
   17cde:	6819      	ldr	r1, [r3, #0]
   17ce0:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   17ce4:	2a00      	cmp	r2, #0
   17ce6:	f47f a9e8 	bne.w	170ba <ull_conn_llcp+0x93a>
			tx->next = conn->tx_head->next;
   17cea:	681a      	ldr	r2, [r3, #0]
   17cec:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   17cee:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
   17cf0:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   17cf4:	f7ff b9e8 	b.w	170c8 <ull_conn_llcp+0x948>
	    ((pdu_data_tx->llctrl.opcode !=
   17cf8:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   17cfa:	2a03      	cmp	r2, #3
   17cfc:	f43f ae70 	beq.w	179e0 <ull_conn_llcp+0x1260>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   17d00:	2a0a      	cmp	r2, #10
   17d02:	f47f aeb4 	bne.w	17a6e <ull_conn_llcp+0x12ee>
   17d06:	e66b      	b.n	179e0 <ull_conn_llcp+0x1260>
				conn->llcp_length.cache.tx_octets = 0;
   17d08:	2200      	movs	r2, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   17d0a:	4663      	mov	r3, ip
   17d0c:	f362 0302 	bfi	r3, r2, #0, #3
				conn->llcp_length.tx_octets =
   17d10:	f8a4 11b2 	strh.w	r1, [r4, #434]	; 0x1b2
				conn->llcp_length.tx_time =
   17d14:	f8b4 11ba 	ldrh.w	r1, [r4, #442]	; 0x1ba
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   17d18:	f884 31ae 	strb.w	r3, [r4, #430]	; 0x1ae
				conn->llcp_length.cache.tx_octets = 0;
   17d1c:	f8a4 21b8 	strh.w	r2, [r4, #440]	; 0x1b8
				conn->llcp_length.tx_time =
   17d20:	f8a4 11b6 	strh.w	r1, [r4, #438]	; 0x1b6
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   17d24:	f7ff bbf9 	b.w	1751a <ull_conn_llcp+0xd9a>
	    ((pdu_data_tx->llctrl.opcode !=
   17d28:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   17d2a:	2a03      	cmp	r2, #3
   17d2c:	f43f aecb 	beq.w	17ac6 <ull_conn_llcp+0x1346>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   17d30:	2a0a      	cmp	r2, #10
   17d32:	f47f aeff 	bne.w	17b34 <ull_conn_llcp+0x13b4>
   17d36:	e6c6      	b.n	17ac6 <ull_conn_llcp+0x1346>
	    ((pdu_data_tx->llctrl.opcode !=
   17d38:	f89c 3007 	ldrb.w	r3, [ip, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   17d3c:	2b03      	cmp	r3, #3
   17d3e:	f43f ae85 	beq.w	17a4c <ull_conn_llcp+0x12cc>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   17d42:	2b0a      	cmp	r3, #10
   17d44:	f47f aea5 	bne.w	17a92 <ull_conn_llcp+0x1312>
   17d48:	e680      	b.n	17a4c <ull_conn_llcp+0x12cc>
	    ((pdu_data_tx->llctrl.opcode !=
   17d4a:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   17d4c:	2a03      	cmp	r2, #3
   17d4e:	f43f ae5f 	beq.w	17a10 <ull_conn_llcp+0x1290>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   17d52:	2a0a      	cmp	r2, #10
   17d54:	f47f aed2 	bne.w	17afc <ull_conn_llcp+0x137c>
   17d58:	e65a      	b.n	17a10 <ull_conn_llcp+0x1290>
				conn->llcp_conn_param.interval_max;
   17d5a:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
   17d5e:	f7ff ba45 	b.w	171ec <ull_conn_llcp+0xa6c>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   17d62:	791a      	ldrb	r2, [r3, #4]
   17d64:	f002 0203 	and.w	r2, r2, #3
   17d68:	2a03      	cmp	r2, #3
   17d6a:	d048      	beq.n	17dfe <ull_conn_llcp+0x167e>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   17d6c:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   17d70:	e4c9      	b.n	17706 <ull_conn_llcp+0xf86>
			conn->tx_data = conn->tx_data->next;
   17d72:	6811      	ldr	r1, [r2, #0]
   17d74:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   17d78:	2b00      	cmp	r3, #0
   17d7a:	f47f adb2 	bne.w	178e2 <ull_conn_llcp+0x1162>
			tx->next = conn->tx_head->next;
   17d7e:	6813      	ldr	r3, [r2, #0]
   17d80:	603b      	str	r3, [r7, #0]
			conn->tx_head->next = tx;
   17d82:	6017      	str	r7, [r2, #0]
				conn->tx_ctrl_last = tx;
   17d84:	e9c4 7772 	strd	r7, r7, [r4, #456]	; 0x1c8
   17d88:	e5b2      	b.n	178f0 <ull_conn_llcp+0x1170>
	    ((pdu_data_tx->llctrl.opcode !=
   17d8a:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   17d8c:	2a03      	cmp	r2, #3
   17d8e:	f43f aea8 	beq.w	17ae2 <ull_conn_llcp+0x1362>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   17d92:	2a0a      	cmp	r2, #10
   17d94:	f47f af25 	bne.w	17be2 <ull_conn_llcp+0x1462>
   17d98:	e6a3      	b.n	17ae2 <ull_conn_llcp+0x1362>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   17d9a:	7913      	ldrb	r3, [r2, #4]
   17d9c:	f003 0303 	and.w	r3, r3, #3
   17da0:	2b03      	cmp	r3, #3
   17da2:	d03c      	beq.n	17e1e <ull_conn_llcp+0x169e>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   17da4:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   17da8:	e59b      	b.n	178e2 <ull_conn_llcp+0x1162>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   17daa:	7913      	ldrb	r3, [r2, #4]
   17dac:	f003 0303 	and.w	r3, r3, #3
   17db0:	2b03      	cmp	r3, #3
   17db2:	d01d      	beq.n	17df0 <ull_conn_llcp+0x1670>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   17db4:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   17db8:	f7fe bfb4 	b.w	16d24 <ull_conn_llcp+0x5a4>
		} else if (conn->llcp_phy.rx & PHY_1M) {
   17dbc:	07d1      	lsls	r1, r2, #31
   17dbe:	d549      	bpl.n	17e54 <ull_conn_llcp+0x16d4>
			conn->llcp_phy.rx = PHY_1M;
   17dc0:	2201      	movs	r2, #1
   17dc2:	f362 1347 	bfi	r3, r2, #5, #3
   17dc6:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
   17dca:	e6ce      	b.n	17b6a <ull_conn_llcp+0x13ea>
		} else if (conn->llcp_phy.tx & PHY_1M) {
   17dcc:	07d1      	lsls	r1, r2, #31
			conn->llcp_phy.tx = PHY_1M;
   17dce:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
		} else if (conn->llcp_phy.tx & PHY_1M) {
   17dd2:	d548      	bpl.n	17e66 <ull_conn_llcp+0x16e6>
			conn->llcp_phy.tx = PHY_1M;
   17dd4:	2201      	movs	r2, #1
   17dd6:	f362 0384 	bfi	r3, r2, #2, #3
   17dda:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
   17dde:	e6b8      	b.n	17b52 <ull_conn_llcp+0x13d2>
   17de0:	0002b604 	.word	0x0002b604
   17de4:	0002b6d0 	.word	0x0002b6d0
   17de8:	0002b0c4 	.word	0x0002b0c4
   17dec:	20001914 	.word	0x20001914
	    ((pdu_data_tx->llctrl.opcode !=
   17df0:	79d3      	ldrb	r3, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   17df2:	2b03      	cmp	r3, #3
   17df4:	f43f aefe 	beq.w	17bf4 <ull_conn_llcp+0x1474>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   17df8:	2b0a      	cmp	r3, #10
   17dfa:	d1db      	bne.n	17db4 <ull_conn_llcp+0x1634>
   17dfc:	e6fa      	b.n	17bf4 <ull_conn_llcp+0x1474>
	    ((pdu_data_tx->llctrl.opcode !=
   17dfe:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   17e00:	2a03      	cmp	r2, #3
   17e02:	f43f aee2 	beq.w	17bca <ull_conn_llcp+0x144a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   17e06:	2a0a      	cmp	r2, #10
   17e08:	d1b0      	bne.n	17d6c <ull_conn_llcp+0x15ec>
   17e0a:	e6de      	b.n	17bca <ull_conn_llcp+0x144a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   17e0c:	790b      	ldrb	r3, [r1, #4]
   17e0e:	f003 0303 	and.w	r3, r3, #3
   17e12:	2b03      	cmp	r3, #3
   17e14:	d030      	beq.n	17e78 <ull_conn_llcp+0x16f8>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   17e16:	e9c4 1172 	strd	r1, r1, [r4, #456]	; 0x1c8
   17e1a:	f7ff b94e 	b.w	170ba <ull_conn_llcp+0x93a>
	    ((pdu_data_tx->llctrl.opcode !=
   17e1e:	79d3      	ldrb	r3, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   17e20:	2b03      	cmp	r3, #3
   17e22:	d0ac      	beq.n	17d7e <ull_conn_llcp+0x15fe>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   17e24:	2b0a      	cmp	r3, #10
   17e26:	d1bd      	bne.n	17da4 <ull_conn_llcp+0x1624>
   17e28:	e7a9      	b.n	17d7e <ull_conn_llcp+0x15fe>
	    ((pdu_data_tx->llctrl.opcode !=
   17e2a:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   17e2c:	2a03      	cmp	r2, #3
   17e2e:	f43f af5c 	beq.w	17cea <ull_conn_llcp+0x156a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   17e32:	2a0a      	cmp	r2, #10
   17e34:	f47f acc7 	bne.w	177c6 <ull_conn_llcp+0x1046>
   17e38:	e757      	b.n	17cea <ull_conn_llcp+0x156a>
			conn->tx_data = conn->tx_data->next;
   17e3a:	680a      	ldr	r2, [r1, #0]
   17e3c:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   17e40:	2b00      	cmp	r3, #0
   17e42:	f47f a93a 	bne.w	170ba <ull_conn_llcp+0x93a>
			tx->next = conn->tx_head->next;
   17e46:	680b      	ldr	r3, [r1, #0]
   17e48:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   17e4a:	6008      	str	r0, [r1, #0]
				conn->tx_ctrl_last = tx;
   17e4c:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   17e50:	f7ff b93a 	b.w	170c8 <ull_conn_llcp+0x948>
		} else if (conn->llcp_phy.rx & PHY_CODED) {
   17e54:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = PHY_CODED;
   17e58:	bf18      	it	ne
   17e5a:	2204      	movne	r2, #4
			conn->llcp_phy.rx = 0U;
   17e5c:	f362 1347 	bfi	r3, r2, #5, #3
   17e60:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
   17e64:	e681      	b.n	17b6a <ull_conn_llcp+0x13ea>
		} else if (conn->llcp_phy.tx & PHY_CODED) {
   17e66:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.tx = PHY_CODED;
   17e6a:	bf18      	it	ne
   17e6c:	2204      	movne	r2, #4
			conn->llcp_phy.tx = 0U;
   17e6e:	f362 0384 	bfi	r3, r2, #2, #3
   17e72:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
   17e76:	e66c      	b.n	17b52 <ull_conn_llcp+0x13d2>
	    ((pdu_data_tx->llctrl.opcode !=
   17e78:	79cb      	ldrb	r3, [r1, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   17e7a:	2b03      	cmp	r3, #3
   17e7c:	d0e3      	beq.n	17e46 <ull_conn_llcp+0x16c6>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   17e7e:	2b0a      	cmp	r3, #10
   17e80:	d1c9      	bne.n	17e16 <ull_conn_llcp+0x1696>
   17e82:	e7e0      	b.n	17e46 <ull_conn_llcp+0x16c6>
		LL_ASSERT(0);
   17e84:	f640 6385 	movw	r3, #3717	; 0xe85
   17e88:	e4a2      	b.n	177d0 <ull_conn_llcp+0x1050>
		LL_ASSERT(0);
   17e8a:	4a11      	ldr	r2, [pc, #68]	; (17ed0 <ull_conn_llcp+0x1750>)
   17e8c:	4911      	ldr	r1, [pc, #68]	; (17ed4 <ull_conn_llcp+0x1754>)
   17e8e:	4812      	ldr	r0, [pc, #72]	; (17ed8 <ull_conn_llcp+0x1758>)
   17e90:	f640 5389 	movw	r3, #3465	; 0xd89
   17e94:	f00c fba6 	bl	245e4 <printk>
   17e98:	4040      	eors	r0, r0
   17e9a:	f380 8811 	msr	BASEPRI, r0
   17e9e:	f04f 0003 	mov.w	r0, #3
   17ea2:	df02      	svc	2
		break;
   17ea4:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   17ea8:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
   17eac:	f7fe bc73 	b.w	16796 <ull_conn_llcp+0x16>
		LL_ASSERT(0);
   17eb0:	4a07      	ldr	r2, [pc, #28]	; (17ed0 <ull_conn_llcp+0x1750>)
   17eb2:	4908      	ldr	r1, [pc, #32]	; (17ed4 <ull_conn_llcp+0x1754>)
   17eb4:	4808      	ldr	r0, [pc, #32]	; (17ed8 <ull_conn_llcp+0x1758>)
   17eb6:	f640 6385 	movw	r3, #3717	; 0xe85
   17eba:	f00c fb93 	bl	245e4 <printk>
   17ebe:	4040      	eors	r0, r0
   17ec0:	f380 8811 	msr	BASEPRI, r0
   17ec4:	f04f 0003 	mov.w	r0, #3
   17ec8:	df02      	svc	2
		break;
   17eca:	f7fe bccc 	b.w	16866 <ull_conn_llcp+0xe6>
   17ece:	bf00      	nop
   17ed0:	0002b604 	.word	0x0002b604
   17ed4:	0002b15c 	.word	0x0002b15c
   17ed8:	0002b0c4 	.word	0x0002b0c4

00017edc <ull_conn_tx_demux>:
{
   17edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17ee0:	4f24      	ldr	r7, [pc, #144]	; (17f74 <ull_conn_tx_demux+0x98>)
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   17ee2:	4e25      	ldr	r6, [pc, #148]	; (17f78 <ull_conn_tx_demux+0x9c>)
   17ee4:	78fa      	ldrb	r2, [r7, #3]
{
   17ee6:	4604      	mov	r4, r0
	return (void *)(fifo + first * size);
   17ee8:	1d3d      	adds	r5, r7, #4
   17eea:	e021      	b.n	17f30 <ull_conn_tx_demux+0x54>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   17eec:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   17ef0:	4630      	mov	r0, r6
   17ef2:	f7f6 ff7b 	bl	edec <mem_get>
	if (conn->lll.handle != handle) {
   17ef6:	8d02      	ldrh	r2, [r0, #40]	; 0x28
   17ef8:	bb32      	cbnz	r2, 17f48 <ull_conn_tx_demux+0x6c>
			struct node_tx *tx = lll_tx->node;
   17efa:	f8d8 3004 	ldr.w	r3, [r8, #4]
			if (!conn->tx_data) {
   17efe:	f8d0 11d0 	ldr.w	r1, [r0, #464]	; 0x1d0
			tx->next = NULL;
   17f02:	601a      	str	r2, [r3, #0]
			if (!conn->tx_data) {
   17f04:	b369      	cbz	r1, 17f62 <ull_conn_tx_demux+0x86>
			if (conn->tx_data_last) {
   17f06:	f8d0 21d4 	ldr.w	r2, [r0, #468]	; 0x1d4
   17f0a:	b102      	cbz	r2, 17f0e <ull_conn_tx_demux+0x32>
				conn->tx_data_last->next = tx;
   17f0c:	6013      	str	r3, [r2, #0]
			conn->tx_data_last = tx;
   17f0e:	f8c0 31d4 	str.w	r3, [r0, #468]	; 0x1d4
		MFIFO_DEQUEUE(conn_tx);
   17f12:	78fa      	ldrb	r2, [r7, #3]
	uint8_t _first = *first; /* Copy read-index */
   17f14:	78bb      	ldrb	r3, [r7, #2]
   17f16:	7879      	ldrb	r1, [r7, #1]
	if (_first == last) {
   17f18:	429a      	cmp	r2, r3
   17f1a:	d005      	beq.n	17f28 <ull_conn_tx_demux+0x4c>
	_first += 1U;
   17f1c:	3301      	adds	r3, #1
   17f1e:	b2db      	uxtb	r3, r3
		_first = 0U;
   17f20:	4299      	cmp	r1, r3
   17f22:	bf08      	it	eq
   17f24:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   17f26:	70bb      	strb	r3, [r7, #2]
	} while (--count);
   17f28:	3c01      	subs	r4, #1
   17f2a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   17f2e:	d016      	beq.n	17f5e <ull_conn_tx_demux+0x82>
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   17f30:	78bb      	ldrb	r3, [r7, #2]
   17f32:	7839      	ldrb	r1, [r7, #0]
	if (first == last) {
   17f34:	4293      	cmp	r3, r2
   17f36:	d012      	beq.n	17f5e <ull_conn_tx_demux+0x82>
	return (void *)(fifo + first * size);
   17f38:	fb13 f301 	smulbb	r3, r3, r1
		if (!lll_tx) {
   17f3c:	eb15 0803 	adds.w	r8, r5, r3
   17f40:	d00d      	beq.n	17f5e <ull_conn_tx_demux+0x82>
	if (handle >= CONFIG_BT_MAX_CONN) {
   17f42:	5aea      	ldrh	r2, [r5, r3]
   17f44:	2a00      	cmp	r2, #0
   17f46:	d0d1      	beq.n	17eec <ull_conn_tx_demux+0x10>
			struct node_tx *tx = lll_tx->node;
   17f48:	f8d8 1004 	ldr.w	r1, [r8, #4]
			p->ll_id = PDU_DATA_LLID_RESV;
   17f4c:	790b      	ldrb	r3, [r1, #4]
   17f4e:	f36f 0301 	bfc	r3, #0, #2
   17f52:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(0xFFFF, tx);
   17f54:	f64f 70ff 	movw	r0, #65535	; 0xffff
   17f58:	f7fb f854 	bl	13004 <ll_tx_ack_put>
   17f5c:	e7d9      	b.n	17f12 <ull_conn_tx_demux+0x36>
}
   17f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (!conn->tx_head) {
   17f62:	f8d0 21c4 	ldr.w	r2, [r0, #452]	; 0x1c4
				conn->tx_data = tx;
   17f66:	f8c0 31d0 	str.w	r3, [r0, #464]	; 0x1d0
				if (!conn->tx_head) {
   17f6a:	2a00      	cmp	r2, #0
   17f6c:	d1cb      	bne.n	17f06 <ull_conn_tx_demux+0x2a>
					conn->tx_head = tx;
   17f6e:	f8c0 31c4 	str.w	r3, [r0, #452]	; 0x1c4
			if (conn->tx_data_last) {
   17f72:	e7cc      	b.n	17f0e <ull_conn_tx_demux+0x32>
   17f74:	20007ac0 	.word	0x20007ac0
   17f78:	20000768 	.word	0x20000768

00017f7c <conn_cleanup>:
	if (conn == conn_upd_curr) {
   17f7c:	4b3b      	ldr	r3, [pc, #236]	; (1806c <conn_cleanup+0xf0>)
{
   17f7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (conn == conn_upd_curr) {
   17f82:	681a      	ldr	r2, [r3, #0]
	rx = conn->llcp_rx;
   17f84:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
	*((uint8_t *)rx->pdu) = reason;
   17f88:	f880 1160 	strb.w	r1, [r0, #352]	; 0x160
	if (conn == conn_upd_curr) {
   17f8c:	4282      	cmp	r2, r0
	conn_upd_curr = NULL;
   17f8e:	bf04      	itt	eq
   17f90:	2200      	moveq	r2, #0
   17f92:	601a      	streq	r2, [r3, #0]
	rx->hdr.handle = conn->lll.handle;
   17f94:	8d02      	ldrh	r2, [r0, #40]	; 0x28
   17f96:	f8a0 214a 	strh.w	r2, [r0, #330]	; 0x14a
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   17f9a:	2315      	movs	r3, #21
{
   17f9c:	b083      	sub	sp, #12
   17f9e:	4606      	mov	r6, r0
	struct lll_conn *lll = &conn->lll;
   17fa0:	f100 0b1c 	add.w	fp, r0, #28
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   17fa4:	f880 3148 	strb.w	r3, [r0, #328]	; 0x148
	while (rx) {
   17fa8:	b144      	cbz	r4, 17fbc <conn_cleanup+0x40>
		hdr->type = NODE_RX_TYPE_RELEASE;
   17faa:	2501      	movs	r5, #1
		rx = hdr->link->mem;
   17fac:	6820      	ldr	r0, [r4, #0]
		hdr = &rx->hdr;
   17fae:	4621      	mov	r1, r4
		rx = hdr->link->mem;
   17fb0:	6844      	ldr	r4, [r0, #4]
		hdr->type = NODE_RX_TYPE_RELEASE;
   17fb2:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
   17fb4:	f7fa ffd2 	bl	12f5c <ll_rx_put>
	while (rx) {
   17fb8:	2c00      	cmp	r4, #0
   17fba:	d1f7      	bne.n	17fac <conn_cleanup+0x30>
	while (conn->tx_head) {
   17fbc:	f8d6 11c4 	ldr.w	r1, [r6, #452]	; 0x1c4
   17fc0:	b381      	cbz	r1, 18024 <conn_cleanup+0xa8>
		link = mem_acquire(&mem_link_tx.free);
   17fc2:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 18080 <conn_cleanup+0x104>
		LL_ASSERT(link);
   17fc6:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 18078 <conn_cleanup+0xfc>
   17fca:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 18084 <conn_cleanup+0x108>
   17fce:	f106 0768 	add.w	r7, r6, #104	; 0x68
   17fd2:	e007      	b.n	17fe4 <conn_cleanup+0x68>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   17fd4:	4629      	mov	r1, r5
   17fd6:	4620      	mov	r0, r4
   17fd8:	463a      	mov	r2, r7
   17fda:	f7f6 ff39 	bl	ee50 <memq_enqueue>
	while (conn->tx_head) {
   17fde:	f8d6 11c4 	ldr.w	r1, [r6, #452]	; 0x1c4
   17fe2:	b1f9      	cbz	r1, 18024 <conn_cleanup+0xa8>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   17fe4:	4630      	mov	r0, r6
   17fe6:	f7fb ff2b 	bl	13e40 <tx_ull_dequeue>
   17fea:	4605      	mov	r5, r0
		link = mem_acquire(&mem_link_tx.free);
   17fec:	4640      	mov	r0, r8
   17fee:	f7f6 fecd 	bl	ed8c <mem_acquire>
		LL_ASSERT(link);
   17ff2:	4604      	mov	r4, r0
   17ff4:	2800      	cmp	r0, #0
   17ff6:	d1ed      	bne.n	17fd4 <conn_cleanup+0x58>
   17ff8:	481d      	ldr	r0, [pc, #116]	; (18070 <conn_cleanup+0xf4>)
   17ffa:	f240 739a 	movw	r3, #1946	; 0x79a
   17ffe:	4652      	mov	r2, sl
   18000:	4649      	mov	r1, r9
   18002:	f00c faef 	bl	245e4 <printk>
   18006:	4040      	eors	r0, r0
   18008:	f380 8811 	msr	BASEPRI, r0
   1800c:	f04f 0003 	mov.w	r0, #3
   18010:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   18012:	4629      	mov	r1, r5
   18014:	4620      	mov	r0, r4
   18016:	463a      	mov	r2, r7
   18018:	f7f6 ff1a 	bl	ee50 <memq_enqueue>
	while (conn->tx_head) {
   1801c:	f8d6 11c4 	ldr.w	r1, [r6, #452]	; 0x1c4
   18020:	2900      	cmp	r1, #0
   18022:	d1df      	bne.n	17fe4 <conn_cleanup+0x68>
				    TICKER_ID_CONN_BASE + lll->handle,
   18024:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   18028:	4b12      	ldr	r3, [pc, #72]	; (18074 <conn_cleanup+0xf8>)
   1802a:	f8cd b000 	str.w	fp, [sp]
				    TICKER_ID_CONN_BASE + lll->handle,
   1802e:	3203      	adds	r2, #3
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   18030:	b2d2      	uxtb	r2, r2
   18032:	2101      	movs	r1, #1
   18034:	2000      	movs	r0, #0
   18036:	f7f8 fa85 	bl	10544 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1803a:	f030 0302 	bics.w	r3, r0, #2
   1803e:	d00c      	beq.n	1805a <conn_cleanup+0xde>
   18040:	4a0d      	ldr	r2, [pc, #52]	; (18078 <conn_cleanup+0xfc>)
   18042:	490e      	ldr	r1, [pc, #56]	; (1807c <conn_cleanup+0x100>)
   18044:	480a      	ldr	r0, [pc, #40]	; (18070 <conn_cleanup+0xf4>)
   18046:	f44f 63ec 	mov.w	r3, #1888	; 0x760
   1804a:	f00c facb 	bl	245e4 <printk>
   1804e:	4040      	eors	r0, r0
   18050:	f380 8811 	msr	BASEPRI, r0
   18054:	f04f 0003 	mov.w	r0, #3
   18058:	df02      	svc	2
	lll->handle = 0xFFFF;
   1805a:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
   1805e:	20ff      	movs	r0, #255	; 0xff
	lll->handle = 0xFFFF;
   18060:	8533      	strh	r3, [r6, #40]	; 0x28
}
   18062:	b003      	add	sp, #12
   18064:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ull_conn_tx_demux(UINT8_MAX);
   18068:	f7ff bf38 	b.w	17edc <ull_conn_tx_demux>
   1806c:	20001890 	.word	0x20001890
   18070:	0002b0c4 	.word	0x0002b0c4
   18074:	000140f9 	.word	0x000140f9
   18078:	0002b604 	.word	0x0002b604
   1807c:	0002b6e4 	.word	0x0002b6e4
   18080:	200019c8 	.word	0x200019c8
   18084:	0002b65c 	.word	0x0002b65c

00018088 <ull_conn_done>:
{
   18088:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct lll_conn *lll = (void *)HDR_ULL2LLL(done->param);
   1808c:	69c5      	ldr	r5, [r0, #28]
	if (unlikely(lll->handle == 0xFFFF)) {
   1808e:	8b2a      	ldrh	r2, [r5, #24]
	struct ll_conn *conn = (void *)HDR_LLL2EVT(lll);
   18090:	68ec      	ldr	r4, [r5, #12]
	if (unlikely(lll->handle == 0xFFFF)) {
   18092:	f64f 73ff 	movw	r3, #65535	; 0xffff
   18096:	429a      	cmp	r2, r3
{
   18098:	b08b      	sub	sp, #44	; 0x2c
	if (unlikely(lll->handle == 0xFFFF)) {
   1809a:	f000 8092 	beq.w	181c2 <ull_conn_done+0x13a>
	switch (done->extra.mic_state) {
   1809e:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   180a2:	2b01      	cmp	r3, #1
   180a4:	4606      	mov	r6, r0
   180a6:	f000 80dd 	beq.w	18264 <ull_conn_done+0x1dc>
   180aa:	2b02      	cmp	r3, #2
   180ac:	f000 80d0 	beq.w	18250 <ull_conn_done+0x1c8>
   180b0:	2b00      	cmp	r3, #0
   180b2:	f000 80b3 	beq.w	1821c <ull_conn_done+0x194>
	reason_peer = conn->llcp_terminate.reason_peer;
   180b6:	f894 7143 	ldrb.w	r7, [r4, #323]	; 0x143
	if (reason_peer && (
   180ba:	2f00      	cmp	r7, #0
   180bc:	f040 80cb 	bne.w	18256 <ull_conn_done+0x1ce>
	latency_event = lll->latency_event;
   180c0:	f8b5 9020 	ldrh.w	r9, [r5, #32]
	if (done->extra.trx_cnt) {
   180c4:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
	ticks_drift_plus = 0U;
   180c6:	9709      	str	r7, [sp, #36]	; 0x24
	elapsed_event = latency_event + 1;
   180c8:	f109 0801 	add.w	r8, r9, #1
	ticks_drift_minus = 0U;
   180cc:	9708      	str	r7, [sp, #32]
	elapsed_event = latency_event + 1;
   180ce:	fa1f f888 	uxth.w	r8, r8
	if (done->extra.trx_cnt) {
   180d2:	2b00      	cmp	r3, #0
   180d4:	d078      	beq.n	181c8 <ull_conn_done+0x140>
		} else if (lll->role) {
   180d6:	f995 3029 	ldrsb.w	r3, [r5, #41]	; 0x29
   180da:	2b00      	cmp	r3, #0
   180dc:	f2c0 8108 	blt.w	182f0 <ull_conn_done+0x268>
	if (done->extra.crc_valid) {
   180e0:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
		conn->connect_expire = 0U;
   180e4:	2200      	movs	r2, #0
   180e6:	f8a4 20c0 	strh.w	r2, [r4, #192]	; 0xc0
	if (done->extra.crc_valid) {
   180ea:	2b00      	cmp	r3, #0
   180ec:	f000 80c0 	beq.w	18270 <ull_conn_done+0x1e8>
		conn->supervision_expire = 0U;
   180f0:	2300      	movs	r3, #0
   180f2:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
	if (conn->procedure_expire != 0U) {
   180f6:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   180fa:	b133      	cbz	r3, 1810a <ull_conn_done+0x82>
		if (conn->procedure_expire > elapsed_event) {
   180fc:	4543      	cmp	r3, r8
   180fe:	f240 810d 	bls.w	1831c <ull_conn_done+0x294>
			conn->procedure_expire -= elapsed_event;
   18102:	eba3 0308 	sub.w	r3, r3, r8
   18106:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (conn->apto_expire != 0U) {
   1810a:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
   1810e:	b133      	cbz	r3, 1811e <ull_conn_done+0x96>
		if (conn->apto_expire > elapsed_event) {
   18110:	4543      	cmp	r3, r8
   18112:	f240 80d5 	bls.w	182c0 <ull_conn_done+0x238>
			conn->apto_expire -= elapsed_event;
   18116:	eba3 0308 	sub.w	r3, r3, r8
   1811a:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
	if (conn->appto_expire != 0U) {
   1811e:	f8b4 20cc 	ldrh.w	r2, [r4, #204]	; 0xcc
   18122:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   18126:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
   1812a:	b15a      	cbz	r2, 18144 <ull_conn_done+0xbc>
		if (conn->appto_expire > elapsed_event) {
   1812c:	4542      	cmp	r2, r8
   1812e:	f200 80ab 	bhi.w	18288 <ull_conn_done+0x200>
			if ((conn->procedure_expire == 0U) &&
   18132:	f8b4 20c8 	ldrh.w	r2, [r4, #200]	; 0xc8
			conn->appto_expire = 0U;
   18136:	2000      	movs	r0, #0
   18138:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
			if ((conn->procedure_expire == 0U) &&
   1813c:	b912      	cbnz	r2, 18144 <ull_conn_done+0xbc>
   1813e:	4299      	cmp	r1, r3
   18140:	f000 8103 	beq.w	1834a <ull_conn_done+0x2c2>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   18144:	1a5b      	subs	r3, r3, r1
   18146:	f003 0303 	and.w	r3, r3, #3
   1814a:	2b02      	cmp	r3, #2
   1814c:	f000 80a6 	beq.w	1829c <ull_conn_done+0x214>
	      (conn->llcp_type == LLCP_CHAN_MAP))) ||
   18150:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
   18154:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
   18158:	429a      	cmp	r2, r3
   1815a:	f000 80c7 	beq.w	182ec <ull_conn_done+0x264>
		lll->latency_event = 0U;
   1815e:	2200      	movs	r2, #0
   18160:	842a      	strh	r2, [r5, #32]
	if ((force) || (latency_event != lll->latency_event)) {
   18162:	e9dd 4308 	ldrd	r4, r3, [sp, #32]
   18166:	b917      	cbnz	r7, 1816e <ull_conn_done+0xe6>
   18168:	454a      	cmp	r2, r9
   1816a:	f000 80a4 	beq.w	182b6 <ull_conn_done+0x22e>
		lazy = lll->latency_event + 1U;
   1816e:	3201      	adds	r2, #1
   18170:	b291      	uxth	r1, r2
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   18172:	b913      	cbnz	r3, 1817a <ull_conn_done+0xf2>
   18174:	2c00      	cmp	r4, #0
   18176:	f000 8084 	beq.w	18282 <ull_conn_done+0x1fa>
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   1817a:	7e2a      	ldrb	r2, [r5, #24]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1817c:	4e83      	ldr	r6, [pc, #524]	; (1838c <ull_conn_done+0x304>)
		struct ll_conn *conn = lll->hdr.parent;
   1817e:	68ed      	ldr	r5, [r5, #12]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   18180:	9506      	str	r5, [sp, #24]
   18182:	2000      	movs	r0, #0
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   18184:	3203      	adds	r2, #3
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   18186:	9103      	str	r1, [sp, #12]
   18188:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1818c:	b2d2      	uxtb	r2, r2
   1818e:	9704      	str	r7, [sp, #16]
   18190:	9400      	str	r4, [sp, #0]
   18192:	9605      	str	r6, [sp, #20]
   18194:	2101      	movs	r1, #1
   18196:	f7f8 f9bd 	bl	10514 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1819a:	f030 0302 	bics.w	r3, r0, #2
   1819e:	d010      	beq.n	181c2 <ull_conn_done+0x13a>
   181a0:	f7fa ffb2 	bl	13108 <ull_disable_mark_get>
   181a4:	4285      	cmp	r5, r0
   181a6:	d00c      	beq.n	181c2 <ull_conn_done+0x13a>
   181a8:	4a79      	ldr	r2, [pc, #484]	; (18390 <ull_conn_done+0x308>)
   181aa:	497a      	ldr	r1, [pc, #488]	; (18394 <ull_conn_done+0x30c>)
   181ac:	487a      	ldr	r0, [pc, #488]	; (18398 <ull_conn_done+0x310>)
   181ae:	f240 53af 	movw	r3, #1455	; 0x5af
   181b2:	f00c fa17 	bl	245e4 <printk>
   181b6:	4040      	eors	r0, r0
   181b8:	f380 8811 	msr	BASEPRI, r0
   181bc:	f04f 0003 	mov.w	r0, #3
   181c0:	df02      	svc	2
}
   181c2:	b00b      	add	sp, #44	; 0x2c
   181c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (done->extra.crc_valid) {
   181c8:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
   181cc:	2b00      	cmp	r3, #0
   181ce:	d18f      	bne.n	180f0 <ull_conn_done+0x68>
	else if (conn->connect_expire) {
   181d0:	f8b4 30c0 	ldrh.w	r3, [r4, #192]	; 0xc0
   181d4:	2b00      	cmp	r3, #0
   181d6:	d04b      	beq.n	18270 <ull_conn_done+0x1e8>
		if (conn->connect_expire > elapsed_event) {
   181d8:	4543      	cmp	r3, r8
   181da:	f240 80bd 	bls.w	18358 <ull_conn_done+0x2d0>
			conn->connect_expire -= elapsed_event;
   181de:	eba3 0308 	sub.w	r3, r3, r8
   181e2:	f8a4 30c0 	strh.w	r3, [r4, #192]	; 0xc0
   181e6:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
	if (conn->supervision_expire) {
   181ea:	2b00      	cmp	r3, #0
   181ec:	d083      	beq.n	180f6 <ull_conn_done+0x6e>
		if (conn->supervision_expire > elapsed_event) {
   181ee:	4598      	cmp	r8, r3
   181f0:	f080 808f 	bcs.w	18312 <ull_conn_done+0x28a>
			conn->supervision_expire -= elapsed_event;
   181f4:	eba3 0308 	sub.w	r3, r3, r8
   181f8:	b29b      	uxth	r3, r3
			lll->latency_event = 0U;
   181fa:	2200      	movs	r2, #0
			if (conn->supervision_expire <= 6U) {
   181fc:	2b06      	cmp	r3, #6
			conn->supervision_expire -= elapsed_event;
   181fe:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
			lll->latency_event = 0U;
   18202:	842a      	strh	r2, [r5, #32]
			if (conn->supervision_expire <= 6U) {
   18204:	d908      	bls.n	18218 <ull_conn_done+0x190>
			else if (lll->role) {
   18206:	f995 3029 	ldrsb.w	r3, [r5, #41]	; 0x29
   1820a:	4293      	cmp	r3, r2
   1820c:	f6bf af73 	bge.w	180f6 <ull_conn_done+0x6e>
				if (latency_event) {
   18210:	f1b9 0f00 	cmp.w	r9, #0
   18214:	f000 808b 	beq.w	1832e <ull_conn_done+0x2a6>
				force = 1U;
   18218:	2701      	movs	r7, #1
   1821a:	e76c      	b.n	180f6 <ull_conn_done+0x6e>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   1821c:	f895 306a 	ldrb.w	r3, [r5, #106]	; 0x6a
   18220:	0719      	lsls	r1, r3, #28
   18222:	d542      	bpl.n	182aa <ull_conn_done+0x222>
					    (lll->latency + 6)) ?
   18224:	8bab      	ldrh	r3, [r5, #28]
			appto_reload_new = (conn->apto_reload >
   18226:	f8b4 20ce 	ldrh.w	r2, [r4, #206]	; 0xce
					    (lll->latency + 6)) ?
   1822a:	1d99      	adds	r1, r3, #6
			appto_reload_new = (conn->apto_reload >
   1822c:	428a      	cmp	r2, r1
					   (conn->apto_reload -
   1822e:	bfc4      	itt	gt
   18230:	1ad3      	subgt	r3, r2, r3
   18232:	3b06      	subgt	r3, #6
			if (conn->appto_reload != appto_reload_new) {
   18234:	f8b4 10ca 	ldrh.w	r1, [r4, #202]	; 0xca
			appto_reload_new = (conn->apto_reload >
   18238:	bfcc      	ite	gt
   1823a:	b29b      	uxthgt	r3, r3
   1823c:	4613      	movle	r3, r2
			if (conn->appto_reload != appto_reload_new) {
   1823e:	4299      	cmp	r1, r3
   18240:	d061      	beq.n	18306 <ull_conn_done+0x27e>
				conn->appto_reload = appto_reload_new;
   18242:	f8a4 30ca 	strh.w	r3, [r4, #202]	; 0xca
				conn->appto_expire = conn->appto_reload;
   18246:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
				conn->apto_expire = conn->apto_reload;
   1824a:	f8a4 20d0 	strh.w	r2, [r4, #208]	; 0xd0
   1824e:	e732      	b.n	180b6 <ull_conn_done+0x2e>
		conn->llcp_terminate.reason_peer =
   18250:	273d      	movs	r7, #61	; 0x3d
   18252:	f884 7143 	strb.w	r7, [r4, #323]	; 0x143
		conn_cleanup(conn, reason_peer);
   18256:	4639      	mov	r1, r7
   18258:	4620      	mov	r0, r4
   1825a:	f7ff fe8f 	bl	17f7c <conn_cleanup>
}
   1825e:	b00b      	add	sp, #44	; 0x2c
   18260:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		conn->appto_expire = conn->apto_expire = 0U;
   18264:	2300      	movs	r3, #0
   18266:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
   1826a:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
		break;
   1826e:	e722      	b.n	180b6 <ull_conn_done+0x2e>
		if (!conn->supervision_expire) {
   18270:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   18274:	2b00      	cmp	r3, #0
   18276:	d1ba      	bne.n	181ee <ull_conn_done+0x166>
			conn->supervision_expire = conn->supervision_reload;
   18278:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
   1827c:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
   18280:	e7b3      	b.n	181ea <ull_conn_done+0x162>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   18282:	b371      	cbz	r1, 182e2 <ull_conn_done+0x25a>
   18284:	4623      	mov	r3, r4
   18286:	e778      	b.n	1817a <ull_conn_done+0xf2>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   18288:	1a5b      	subs	r3, r3, r1
   1828a:	f003 0303 	and.w	r3, r3, #3
			conn->appto_expire -= elapsed_event;
   1828e:	eba2 0808 	sub.w	r8, r2, r8
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   18292:	2b02      	cmp	r3, #2
			conn->appto_expire -= elapsed_event;
   18294:	f8a4 80cc 	strh.w	r8, [r4, #204]	; 0xcc
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   18298:	f47f af5a 	bne.w	18150 <ull_conn_done+0xc8>
   1829c:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   182a0:	3b01      	subs	r3, #1
   182a2:	2b01      	cmp	r3, #1
   182a4:	f63f af54 	bhi.w	18150 <ull_conn_done+0xc8>
   182a8:	e759      	b.n	1815e <ull_conn_done+0xd6>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   182aa:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   182ae:	07da      	lsls	r2, r3, #31
   182b0:	f57f af01 	bpl.w	180b6 <ull_conn_done+0x2e>
   182b4:	e7b6      	b.n	18224 <ull_conn_done+0x19c>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   182b6:	b90b      	cbnz	r3, 182bc <ull_conn_done+0x234>
   182b8:	2c00      	cmp	r4, #0
   182ba:	d082      	beq.n	181c2 <ull_conn_done+0x13a>
	lazy = 0U;
   182bc:	4639      	mov	r1, r7
   182be:	e75c      	b.n	1817a <ull_conn_done+0xf2>
			rx = ll_pdu_rx_alloc();
   182c0:	f7fa fe88 	bl	12fd4 <ll_pdu_rx_alloc>
			if (rx) {
   182c4:	4601      	mov	r1, r0
   182c6:	b370      	cbz	r0, 18326 <ull_conn_done+0x29e>
				conn->apto_expire = 0U;
   182c8:	2300      	movs	r3, #0
				rx->handle = lll->handle;
   182ca:	8b2a      	ldrh	r2, [r5, #24]
				conn->apto_expire = 0U;
   182cc:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
				rx->type = NODE_RX_TYPE_APTO;
   182d0:	2318      	movs	r3, #24
				rx->handle = lll->handle;
   182d2:	80c2      	strh	r2, [r0, #6]
				rx->type = NODE_RX_TYPE_APTO;
   182d4:	7103      	strb	r3, [r0, #4]
				ll_rx_put(rx->link, rx);
   182d6:	6800      	ldr	r0, [r0, #0]
   182d8:	f7fa fe40 	bl	12f5c <ll_rx_put>
				ll_rx_sched();
   182dc:	f7fa fe48 	bl	12f70 <ll_rx_sched>
   182e0:	e71d      	b.n	1811e <ull_conn_done+0x96>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   182e2:	2f00      	cmp	r7, #0
   182e4:	f43f af6d 	beq.w	181c2 <ull_conn_done+0x13a>
   182e8:	4623      	mov	r3, r4
   182ea:	e746      	b.n	1817a <ull_conn_done+0xf2>
   182ec:	8c2a      	ldrh	r2, [r5, #32]
   182ee:	e738      	b.n	18162 <ull_conn_done+0xda>
			ull_drift_ticks_get(done, &ticks_drift_plus,
   182f0:	aa08      	add	r2, sp, #32
   182f2:	a909      	add	r1, sp, #36	; 0x24
   182f4:	4630      	mov	r0, r6
   182f6:	f7e9 f877 	bl	13e8 <ull_drift_ticks_get>
			if (!conn->tx_head) {
   182fa:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   182fe:	b383      	cbz	r3, 18362 <ull_conn_done+0x2da>
				lll->latency_event = 0;
   18300:	2300      	movs	r3, #0
   18302:	842b      	strh	r3, [r5, #32]
   18304:	e6ec      	b.n	180e0 <ull_conn_done+0x58>
			if (conn->apto_expire == 0U) {
   18306:	f8b4 10d0 	ldrh.w	r1, [r4, #208]	; 0xd0
   1830a:	2900      	cmp	r1, #0
   1830c:	f47f aed3 	bne.w	180b6 <ull_conn_done+0x2e>
   18310:	e799      	b.n	18246 <ull_conn_done+0x1be>
			conn_cleanup(conn, BT_HCI_ERR_CONN_TIMEOUT);
   18312:	4620      	mov	r0, r4
   18314:	2108      	movs	r1, #8
   18316:	f7ff fe31 	bl	17f7c <conn_cleanup>
			return;
   1831a:	e752      	b.n	181c2 <ull_conn_done+0x13a>
			conn_cleanup(conn, BT_HCI_ERR_LL_RESP_TIMEOUT);
   1831c:	4620      	mov	r0, r4
   1831e:	2122      	movs	r1, #34	; 0x22
   18320:	f7ff fe2c 	bl	17f7c <conn_cleanup>
			return;
   18324:	e74d      	b.n	181c2 <ull_conn_done+0x13a>
				conn->apto_expire = 1U;
   18326:	2301      	movs	r3, #1
   18328:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
   1832c:	e6f7      	b.n	1811e <ull_conn_done+0x96>
					force = conn->slave.force & 0x01;
   1832e:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
					conn->slave.force >>= 1U;
   18332:	085a      	lsrs	r2, r3, #1
					if (force) {
   18334:	f013 0301 	ands.w	r3, r3, #1
						conn->slave.force |= BIT(31);
   18338:	bf17      	itett	ne
   1833a:	f042 4200 	orrne.w	r2, r2, #2147483648	; 0x80000000
					conn->slave.force >>= 1U;
   1833e:	f8c4 20dc 	streq.w	r2, [r4, #220]	; 0xdc
						conn->slave.force |= BIT(31);
   18342:	f8c4 20dc 	strne.w	r2, [r4, #220]	; 0xdc
					force = conn->slave.force & 0x01;
   18346:	461f      	movne	r7, r3
   18348:	e6d5      	b.n	180f6 <ull_conn_done+0x6e>
				conn->llcp_ack -= 2U;
   1834a:	1e8b      	subs	r3, r1, #2
				conn->llcp_type = LLCP_PING;
   1834c:	2205      	movs	r2, #5
				conn->llcp_ack -= 2U;
   1834e:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
				conn->llcp_type = LLCP_PING;
   18352:	f884 20e6 	strb.w	r2, [r4, #230]	; 0xe6
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   18356:	e6fb      	b.n	18150 <ull_conn_done+0xc8>
			conn_cleanup(conn, BT_HCI_ERR_CONN_FAIL_TO_ESTAB);
   18358:	4620      	mov	r0, r4
   1835a:	213e      	movs	r1, #62	; 0x3e
   1835c:	f7ff fe0e 	bl	17f7c <conn_cleanup>
			return;
   18360:	e72f      	b.n	181c2 <ull_conn_done+0x13a>
				ull_conn_tx_demux(UINT8_MAX);
   18362:	20ff      	movs	r0, #255	; 0xff
   18364:	f7ff fdba 	bl	17edc <ull_conn_tx_demux>
			if (conn->tx_head || memq_peek(lll->memq_tx.head,
   18368:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   1836c:	2b00      	cmp	r3, #0
   1836e:	d1c7      	bne.n	18300 <ull_conn_done+0x278>
   18370:	e9d5 0115 	ldrd	r0, r1, [r5, #84]	; 0x54
   18374:	463a      	mov	r2, r7
   18376:	f7f6 fd73 	bl	ee60 <memq_peek>
   1837a:	2800      	cmp	r0, #0
   1837c:	d1c0      	bne.n	18300 <ull_conn_done+0x278>
			} else if (lll->slave.latency_enabled) {
   1837e:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   18382:	075b      	lsls	r3, r3, #29
				lll->latency_event = lll->latency;
   18384:	bf44      	itt	mi
   18386:	8bab      	ldrhmi	r3, [r5, #28]
   18388:	842b      	strhmi	r3, [r5, #32]
   1838a:	e6a9      	b.n	180e0 <ull_conn_done+0x58>
   1838c:	0001420d 	.word	0x0001420d
   18390:	0002b604 	.word	0x0002b604
   18394:	0002b798 	.word	0x0002b798
   18398:	0002b0c4 	.word	0x0002b0c4

0001839c <ull_conn_tx_lll_enqueue>:
	while (conn->tx_head &&
   1839c:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
   183a0:	2b00      	cmp	r3, #0
   183a2:	f000 80be 	beq.w	18522 <ull_conn_tx_lll_enqueue+0x186>
   183a6:	3901      	subs	r1, #1
{
   183a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
   183ac:	f8df 8178 	ldr.w	r8, [pc, #376]	; 18528 <ull_conn_tx_lll_enqueue+0x18c>
		LL_ASSERT(link);
   183b0:	f8df a178 	ldr.w	sl, [pc, #376]	; 1852c <ull_conn_tx_lll_enqueue+0x190>
   183b4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 18530 <ull_conn_tx_lll_enqueue+0x194>
   183b8:	4604      	mov	r4, r0
   183ba:	b2cd      	uxtb	r5, r1
   183bc:	e010      	b.n	183e0 <ull_conn_tx_lll_enqueue+0x44>
		link = mem_acquire(&mem_link_tx.free);
   183be:	4640      	mov	r0, r8
   183c0:	f7f6 fce4 	bl	ed8c <mem_acquire>
		LL_ASSERT(link);
   183c4:	4607      	mov	r7, r0
   183c6:	b3b0      	cbz	r0, 18436 <ull_conn_tx_lll_enqueue+0x9a>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   183c8:	4631      	mov	r1, r6
   183ca:	4638      	mov	r0, r7
   183cc:	f104 0268 	add.w	r2, r4, #104	; 0x68
   183d0:	f7f6 fd3e 	bl	ee50 <memq_enqueue>
	while (conn->tx_head &&
   183d4:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   183d8:	3d01      	subs	r5, #1
   183da:	b2ed      	uxtb	r5, r5
   183dc:	2b00      	cmp	r3, #0
   183de:	d05c      	beq.n	1849a <ull_conn_tx_lll_enqueue+0xfe>
		 !conn->llcp_phy.pause_tx &&
   183e0:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
	while (conn->tx_head &&
   183e4:	07d1      	lsls	r1, r2, #31
   183e6:	d403      	bmi.n	183f0 <ull_conn_tx_lll_enqueue+0x54>
		 !conn->llcp_enc.pause_tx &&
   183e8:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
		 !conn->llcp_phy.pause_tx &&
   183ec:	0792      	lsls	r2, r2, #30
   183ee:	d53a      	bpl.n	18466 <ull_conn_tx_lll_enqueue+0xca>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   183f0:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   183f4:	4293      	cmp	r3, r2
   183f6:	d150      	bne.n	1849a <ull_conn_tx_lll_enqueue+0xfe>
   183f8:	2dff      	cmp	r5, #255	; 0xff
   183fa:	d04e      	beq.n	1849a <ull_conn_tx_lll_enqueue+0xfe>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   183fc:	f8d4 11c4 	ldr.w	r1, [r4, #452]	; 0x1c4
   18400:	4620      	mov	r0, r4
   18402:	f7fb fd1d 	bl	13e40 <tx_ull_dequeue>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   18406:	7903      	ldrb	r3, [r0, #4]
   18408:	f003 0303 	and.w	r3, r3, #3
   1840c:	2b03      	cmp	r3, #3
		tx = tx_ull_dequeue(conn, conn->tx_head);
   1840e:	4606      	mov	r6, r0
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   18410:	d1d5      	bne.n	183be <ull_conn_tx_lll_enqueue+0x22>
			ctrl_tx_pre_ack(conn, pdu_tx);
   18412:	79c3      	ldrb	r3, [r0, #7]
	switch (pdu_tx->llctrl.opcode) {
   18414:	2b0b      	cmp	r3, #11
   18416:	d042      	beq.n	1849e <ull_conn_tx_lll_enqueue+0x102>
   18418:	d81b      	bhi.n	18452 <ull_conn_tx_lll_enqueue+0xb6>
   1841a:	2b04      	cmp	r3, #4
   1841c:	d1cf      	bne.n	183be <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_enc.pause_tx = 1U;
   1841e:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   18422:	f043 0302 	orr.w	r3, r3, #2
   18426:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
		link = mem_acquire(&mem_link_tx.free);
   1842a:	4640      	mov	r0, r8
   1842c:	f7f6 fcae 	bl	ed8c <mem_acquire>
		LL_ASSERT(link);
   18430:	4607      	mov	r7, r0
   18432:	2800      	cmp	r0, #0
   18434:	d1c8      	bne.n	183c8 <ull_conn_tx_lll_enqueue+0x2c>
   18436:	483b      	ldr	r0, [pc, #236]	; (18524 <ull_conn_tx_lll_enqueue+0x188>)
   18438:	f240 6303 	movw	r3, #1539	; 0x603
   1843c:	4652      	mov	r2, sl
   1843e:	4649      	mov	r1, r9
   18440:	f00c f8d0 	bl	245e4 <printk>
   18444:	4040      	eors	r0, r0
   18446:	f380 8811 	msr	BASEPRI, r0
   1844a:	f04f 0003 	mov.w	r0, #3
   1844e:	df02      	svc	2
   18450:	e7ba      	b.n	183c8 <ull_conn_tx_lll_enqueue+0x2c>
	switch (pdu_tx->llctrl.opcode) {
   18452:	3b16      	subs	r3, #22
   18454:	2b01      	cmp	r3, #1
   18456:	d8b2      	bhi.n	183be <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_phy.pause_tx = 1U;
   18458:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   1845c:	f043 0301 	orr.w	r3, r3, #1
   18460:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
		break;
   18464:	e7ab      	b.n	183be <ull_conn_tx_lll_enqueue+0x22>
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   18466:	791a      	ldrb	r2, [r3, #4]
   18468:	f002 0203 	and.w	r2, r2, #3
   1846c:	2a03      	cmp	r2, #3
   1846e:	d1c3      	bne.n	183f8 <ull_conn_tx_lll_enqueue+0x5c>
	    ((pdu_data_tx->llctrl.opcode ==
   18470:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   18472:	2a03      	cmp	r2, #3
   18474:	d001      	beq.n	1847a <ull_conn_tx_lll_enqueue+0xde>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   18476:	2a0a      	cmp	r2, #10
   18478:	d1be      	bne.n	183f8 <ull_conn_tx_lll_enqueue+0x5c>
		if (((conn->llcp_req != conn->llcp_ack) &&
   1847a:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
   1847e:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   18482:	428a      	cmp	r2, r1
   18484:	d010      	beq.n	184a8 <ull_conn_tx_lll_enqueue+0x10c>
   18486:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
   1848a:	2a03      	cmp	r2, #3
   1848c:	d0b4      	beq.n	183f8 <ull_conn_tx_lll_enqueue+0x5c>
			if ((tx->next != NULL) &&
   1848e:	681a      	ldr	r2, [r3, #0]
   18490:	b11a      	cbz	r2, 1849a <ull_conn_tx_lll_enqueue+0xfe>
   18492:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   18496:	428a      	cmp	r2, r1
   18498:	d032      	beq.n	18500 <ull_conn_tx_lll_enqueue+0x164>
}
   1849a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!conn->lll.role) {
   1849e:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   184a2:	2b00      	cmp	r3, #0
   184a4:	da8b      	bge.n	183be <ull_conn_tx_lll_enqueue+0x22>
   184a6:	e7ba      	b.n	1841e <ull_conn_tx_lll_enqueue+0x82>
		    ((conn->llcp_req == conn->llcp_ack) &&
   184a8:	f894 0121 	ldrb.w	r0, [r4, #289]	; 0x121
   184ac:	f894 1120 	ldrb.w	r1, [r4, #288]	; 0x120
   184b0:	4288      	cmp	r0, r1
   184b2:	d1ec      	bne.n	1848e <ull_conn_tx_lll_enqueue+0xf2>
		     ((conn->llcp_feature.ack != conn->llcp_feature.req) ||
   184b4:	f894 0139 	ldrb.w	r0, [r4, #313]	; 0x139
   184b8:	f894 1138 	ldrb.w	r1, [r4, #312]	; 0x138
   184bc:	4288      	cmp	r0, r1
   184be:	d1e6      	bne.n	1848e <ull_conn_tx_lll_enqueue+0xf2>
		      (conn->llcp_version.ack != conn->llcp_version.req) ||
   184c0:	f894 0185 	ldrb.w	r0, [r4, #389]	; 0x185
   184c4:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
   184c8:	4288      	cmp	r0, r1
   184ca:	d1e0      	bne.n	1848e <ull_conn_tx_lll_enqueue+0xf2>
		       conn->llcp_conn_param.req) ||
   184cc:	f894 01ad 	ldrb.w	r0, [r4, #429]	; 0x1ad
   184d0:	f894 11ac 	ldrb.w	r1, [r4, #428]	; 0x1ac
   184d4:	4288      	cmp	r0, r1
   184d6:	d1da      	bne.n	1848e <ull_conn_tx_lll_enqueue+0xf2>
		      (conn->llcp_phy.ack != conn->llcp_phy.req) ||
   184d8:	f894 01bd 	ldrb.w	r0, [r4, #445]	; 0x1bd
   184dc:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   184e0:	4288      	cmp	r0, r1
   184e2:	d1d4      	bne.n	1848e <ull_conn_tx_lll_enqueue+0xf2>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   184e4:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   184e8:	2101      	movs	r1, #1
   184ea:	f361 0301 	bfi	r3, r1, #0, #2
			conn->llcp_ack -= 2U;
   184ee:	3a02      	subs	r2, #2
			conn->llcp_type = LLCP_ENCRYPTION;
   184f0:	2103      	movs	r1, #3
			conn->llcp_ack -= 2U;
   184f2:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   184f6:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
			conn->llcp_type = LLCP_ENCRYPTION;
   184fa:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
			conn->llcp_ack -= 2U;
   184fe:	e77b      	b.n	183f8 <ull_conn_tx_lll_enqueue+0x5c>
				tx->next = conn->tx_ctrl_last->next;
   18500:	f8d4 11cc 	ldr.w	r1, [r4, #460]	; 0x1cc
				if (!conn->tx_data_last) {
   18504:	f8d4 01d4 	ldr.w	r0, [r4, #468]	; 0x1d4
				conn->tx_head = tx->next;
   18508:	f8c4 21c4 	str.w	r2, [r4, #452]	; 0x1c4
				tx->next = conn->tx_ctrl_last->next;
   1850c:	680a      	ldr	r2, [r1, #0]
   1850e:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last->next = tx;
   18510:	600b      	str	r3, [r1, #0]
				conn->tx_data = tx;
   18512:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
				if (!conn->tx_data_last) {
   18516:	2800      	cmp	r0, #0
   18518:	f47f af6e 	bne.w	183f8 <ull_conn_tx_lll_enqueue+0x5c>
					conn->tx_data_last = tx;
   1851c:	f8c4 31d4 	str.w	r3, [r4, #468]	; 0x1d4
   18520:	e76a      	b.n	183f8 <ull_conn_tx_lll_enqueue+0x5c>
   18522:	4770      	bx	lr
   18524:	0002b0c4 	.word	0x0002b0c4
   18528:	200019c8 	.word	0x200019c8
   1852c:	0002b604 	.word	0x0002b604
   18530:	0002b65c 	.word	0x0002b65c

00018534 <tx_demux>:
{
   18534:	b510      	push	{r4, lr}
   18536:	4604      	mov	r4, r0
	ull_conn_tx_demux(1);
   18538:	2001      	movs	r0, #1
   1853a:	f7ff fccf 	bl	17edc <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(param, 1);
   1853e:	4620      	mov	r0, r4
   18540:	2101      	movs	r1, #1
}
   18542:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ull_conn_tx_lll_enqueue(param, 1);
   18546:	f7ff bf29 	b.w	1839c <ull_conn_tx_lll_enqueue>
   1854a:	bf00      	nop

0001854c <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   1854c:	4901      	ldr	r1, [pc, #4]	; (18554 <ull_conn_link_tx_release+0x8>)
   1854e:	f7f6 bc33 	b.w	edb8 <mem_release>
   18552:	bf00      	nop
   18554:	200019c8 	.word	0x200019c8

00018558 <ull_conn_ack_last_idx_get>:
	return mfifo_conn_ack.l;
   18558:	4b01      	ldr	r3, [pc, #4]	; (18560 <ull_conn_ack_last_idx_get+0x8>)
}
   1855a:	78d8      	ldrb	r0, [r3, #3]
   1855c:	4770      	bx	lr
   1855e:	bf00      	nop
   18560:	20007a7c 	.word	0x20007a7c

00018564 <ull_conn_ack_peek>:
{
   18564:	b4f0      	push	{r4, r5, r6, r7}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   18566:	4b0b      	ldr	r3, [pc, #44]	; (18594 <ull_conn_ack_peek+0x30>)
   18568:	789c      	ldrb	r4, [r3, #2]
   1856a:	78de      	ldrb	r6, [r3, #3]
   1856c:	781f      	ldrb	r7, [r3, #0]
	if (first == last) {
   1856e:	42b4      	cmp	r4, r6
   18570:	d00d      	beq.n	1858e <ull_conn_ack_peek+0x2a>
	return (void *)(fifo + first * size);
   18572:	3304      	adds	r3, #4
   18574:	fb14 f407 	smulbb	r4, r4, r7
	if (!lll_tx) {
   18578:	4605      	mov	r5, r0
   1857a:	1918      	adds	r0, r3, r4
   1857c:	d005      	beq.n	1858a <ull_conn_ack_peek+0x26>
	*ack_last = mfifo_conn_ack.l;
   1857e:	702e      	strb	r6, [r5, #0]
	*handle = lll_tx->handle;
   18580:	5b1c      	ldrh	r4, [r3, r4]
	*tx = lll_tx->node;
   18582:	6843      	ldr	r3, [r0, #4]
	*handle = lll_tx->handle;
   18584:	800c      	strh	r4, [r1, #0]
	*tx = lll_tx->node;
   18586:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   18588:	6818      	ldr	r0, [r3, #0]
}
   1858a:	bcf0      	pop	{r4, r5, r6, r7}
   1858c:	4770      	bx	lr
		return NULL;
   1858e:	2000      	movs	r0, #0
   18590:	e7fb      	b.n	1858a <ull_conn_ack_peek+0x26>
   18592:	bf00      	nop
   18594:	20007a7c 	.word	0x20007a7c

00018598 <ull_conn_ack_by_last_peek>:
{
   18598:	b430      	push	{r4, r5}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   1859a:	4b09      	ldr	r3, [pc, #36]	; (185c0 <ull_conn_ack_by_last_peek+0x28>)
   1859c:	789c      	ldrb	r4, [r3, #2]
   1859e:	781d      	ldrb	r5, [r3, #0]
	if (first == last) {
   185a0:	4284      	cmp	r4, r0
   185a2:	d00b      	beq.n	185bc <ull_conn_ack_by_last_peek+0x24>
	return (void *)(fifo + first * size);
   185a4:	3304      	adds	r3, #4
   185a6:	fb14 f405 	smulbb	r4, r4, r5
	if (!lll_tx) {
   185aa:	1918      	adds	r0, r3, r4
   185ac:	d004      	beq.n	185b8 <ull_conn_ack_by_last_peek+0x20>
	*handle = lll_tx->handle;
   185ae:	5b1c      	ldrh	r4, [r3, r4]
	*tx = lll_tx->node;
   185b0:	6843      	ldr	r3, [r0, #4]
	*handle = lll_tx->handle;
   185b2:	800c      	strh	r4, [r1, #0]
	*tx = lll_tx->node;
   185b4:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   185b6:	6818      	ldr	r0, [r3, #0]
}
   185b8:	bc30      	pop	{r4, r5}
   185ba:	4770      	bx	lr
		return NULL;
   185bc:	2000      	movs	r0, #0
   185be:	e7fb      	b.n	185b8 <ull_conn_ack_by_last_peek+0x20>
   185c0:	20007a7c 	.word	0x20007a7c

000185c4 <ull_conn_ack_dequeue>:
{
   185c4:	b410      	push	{r4}
	return MFIFO_DEQUEUE(conn_ack);
   185c6:	4b0a      	ldr	r3, [pc, #40]	; (185f0 <ull_conn_ack_dequeue+0x2c>)
	uint8_t _first = *first; /* Copy read-index */
   185c8:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   185ca:	78da      	ldrb	r2, [r3, #3]
   185cc:	7818      	ldrb	r0, [r3, #0]
   185ce:	785c      	ldrb	r4, [r3, #1]
   185d0:	428a      	cmp	r2, r1
   185d2:	d00a      	beq.n	185ea <ull_conn_ack_dequeue+0x26>
	_first += 1U;
   185d4:	1c4a      	adds	r2, r1, #1
   185d6:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   185d8:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   185dc:	4294      	cmp	r4, r2
   185de:	bf08      	it	eq
   185e0:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   185e2:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   185e4:	709a      	strb	r2, [r3, #2]
}
   185e6:	bc10      	pop	{r4}
   185e8:	4770      	bx	lr
		return NULL;
   185ea:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(conn_ack);
   185ec:	e7fb      	b.n	185e6 <ull_conn_ack_dequeue+0x22>
   185ee:	bf00      	nop
   185f0:	20007a7c 	.word	0x20007a7c

000185f4 <ull_conn_lll_ack_enqueue>:
{
   185f4:	b570      	push	{r4, r5, r6, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   185f6:	4a13      	ldr	r2, [pc, #76]	; (18644 <ull_conn_lll_ack_enqueue+0x50>)
   185f8:	78d6      	ldrb	r6, [r2, #3]
	if (last == count) {
   185fa:	7855      	ldrb	r5, [r2, #1]
   185fc:	7894      	ldrb	r4, [r2, #2]
	last = last + 1;
   185fe:	1c73      	adds	r3, r6, #1
   18600:	b2db      	uxtb	r3, r3
		last = 0U;
   18602:	429d      	cmp	r5, r3
   18604:	bf08      	it	eq
   18606:	2300      	moveq	r3, #0
	if (last == first) {
   18608:	429c      	cmp	r4, r3
   1860a:	d00a      	beq.n	18622 <ull_conn_lll_ack_enqueue+0x2e>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1860c:	4615      	mov	r5, r2
   1860e:	f815 4b04 	ldrb.w	r4, [r5], #4
   18612:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(lll_tx);
   18616:	192e      	adds	r6, r5, r4
   18618:	d003      	beq.n	18622 <ull_conn_lll_ack_enqueue+0x2e>
	lll_tx->handle = handle;
   1861a:	5328      	strh	r0, [r5, r4]
	lll_tx->node = tx;
   1861c:	6071      	str	r1, [r6, #4]
	*last = idx; /* Commit: Update write index */
   1861e:	70d3      	strb	r3, [r2, #3]
}
   18620:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(lll_tx);
   18622:	4a09      	ldr	r2, [pc, #36]	; (18648 <ull_conn_lll_ack_enqueue+0x54>)
   18624:	4909      	ldr	r1, [pc, #36]	; (1864c <ull_conn_lll_ack_enqueue+0x58>)
   18626:	480a      	ldr	r0, [pc, #40]	; (18650 <ull_conn_lll_ack_enqueue+0x5c>)
   18628:	f240 6341 	movw	r3, #1601	; 0x641
   1862c:	f00b ffda 	bl	245e4 <printk>
   18630:	4040      	eors	r0, r0
   18632:	f380 8811 	msr	BASEPRI, r0
   18636:	f04f 0003 	mov.w	r0, #3
   1863a:	df02      	svc	2
	lll_tx->handle = handle;
   1863c:	2300      	movs	r3, #0
   1863e:	801b      	strh	r3, [r3, #0]
   18640:	deff      	udf	#255	; 0xff
   18642:	bf00      	nop
   18644:	20007a7c 	.word	0x20007a7c
   18648:	0002b604 	.word	0x0002b604
   1864c:	0002b64c 	.word	0x0002b64c
   18650:	0002b0c4 	.word	0x0002b0c4

00018654 <ull_conn_tx_ack>:
{
   18654:	b5f0      	push	{r4, r5, r6, r7, lr}
	LL_ASSERT(pdu_tx->len);
   18656:	7953      	ldrb	r3, [r2, #5]
{
   18658:	b083      	sub	sp, #12
   1865a:	4614      	mov	r4, r2
   1865c:	4605      	mov	r5, r0
   1865e:	460e      	mov	r6, r1
	LL_ASSERT(pdu_tx->len);
   18660:	b383      	cbz	r3, 186c4 <ull_conn_tx_ack+0x70>
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   18662:	7923      	ldrb	r3, [r4, #4]
   18664:	f003 0203 	and.w	r2, r3, #3
   18668:	2a03      	cmp	r2, #3
   1866a:	d00d      	beq.n	18688 <ull_conn_tx_ack+0x34>
	} else if (handle == 0xFFFF) {
   1866c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   18670:	4295      	cmp	r5, r2
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   18672:	bf04      	itt	eq
   18674:	f36f 0301 	bfceq	r3, #0, #2
   18678:	7123      	strbeq	r3, [r4, #4]
	ll_tx_ack_put(handle, tx);
   1867a:	4621      	mov	r1, r4
   1867c:	4628      	mov	r0, r5
}
   1867e:	b003      	add	sp, #12
   18680:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	ll_tx_ack_put(handle, tx);
   18684:	f7fa bcbe 	b.w	13004 <ll_tx_ack_put>
		if (handle != 0xFFFF) {
   18688:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1868c:	429d      	cmp	r5, r3
   1868e:	d127      	bne.n	186e0 <ull_conn_tx_ack+0x8c>
		if (link->next == (void *)tx) {
   18690:	6833      	ldr	r3, [r6, #0]
   18692:	42a3      	cmp	r3, r4
   18694:	f000 80e3 	beq.w	1885e <ull_conn_tx_ack+0x20a>
			LL_ASSERT(!link->next);
   18698:	2b00      	cmp	r3, #0
   1869a:	d0ee      	beq.n	1867a <ull_conn_tx_ack+0x26>
   1869c:	4a83      	ldr	r2, [pc, #524]	; (188ac <ull_conn_tx_ack+0x258>)
   1869e:	4984      	ldr	r1, [pc, #528]	; (188b0 <ull_conn_tx_ack+0x25c>)
   186a0:	4884      	ldr	r0, [pc, #528]	; (188b4 <ull_conn_tx_ack+0x260>)
   186a2:	f240 6361 	movw	r3, #1633	; 0x661
   186a6:	f00b ff9d 	bl	245e4 <printk>
   186aa:	4040      	eors	r0, r0
   186ac:	f380 8811 	msr	BASEPRI, r0
   186b0:	f04f 0003 	mov.w	r0, #3
   186b4:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
   186b6:	4621      	mov	r1, r4
   186b8:	4628      	mov	r0, r5
}
   186ba:	b003      	add	sp, #12
   186bc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	ll_tx_ack_put(handle, tx);
   186c0:	f7fa bca0 	b.w	13004 <ll_tx_ack_put>
	LL_ASSERT(pdu_tx->len);
   186c4:	4a79      	ldr	r2, [pc, #484]	; (188ac <ull_conn_tx_ack+0x258>)
   186c6:	497c      	ldr	r1, [pc, #496]	; (188b8 <ull_conn_tx_ack+0x264>)
   186c8:	487a      	ldr	r0, [pc, #488]	; (188b4 <ull_conn_tx_ack+0x260>)
   186ca:	f240 634e 	movw	r3, #1614	; 0x64e
   186ce:	f00b ff89 	bl	245e4 <printk>
   186d2:	4040      	eors	r0, r0
   186d4:	f380 8811 	msr	BASEPRI, r0
   186d8:	f04f 0003 	mov.w	r0, #3
   186dc:	df02      	svc	2
   186de:	e7c0      	b.n	18662 <ull_conn_tx_ack+0xe>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   186e0:	462a      	mov	r2, r5
   186e2:	4876      	ldr	r0, [pc, #472]	; (188bc <ull_conn_tx_ack+0x268>)
   186e4:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   186e8:	f7f6 fb80 	bl	edec <mem_get>
   186ec:	79e2      	ldrb	r2, [r4, #7]
   186ee:	3a02      	subs	r2, #2
   186f0:	4603      	mov	r3, r0
	switch (pdu_tx->llctrl.opcode) {
   186f2:	2a15      	cmp	r2, #21
   186f4:	d8cc      	bhi.n	18690 <ull_conn_tx_ack+0x3c>
   186f6:	a101      	add	r1, pc, #4	; (adr r1, 186fc <ull_conn_tx_ack+0xa8>)
   186f8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   186fc:	000187f7 	.word	0x000187f7
   18700:	00018691 	.word	0x00018691
   18704:	00018769 	.word	0x00018769
   18708:	00018691 	.word	0x00018691
   1870c:	00018691 	.word	0x00018691
   18710:	0001875b 	.word	0x0001875b
   18714:	00018691 	.word	0x00018691
   18718:	0001875b 	.word	0x0001875b
   1871c:	00018691 	.word	0x00018691
   18720:	00018769 	.word	0x00018769
   18724:	00018691 	.word	0x00018691
   18728:	00018777 	.word	0x00018777
   1872c:	00018691 	.word	0x00018691
   18730:	00018691 	.word	0x00018691
   18734:	00018691 	.word	0x00018691
   18738:	00018755 	.word	0x00018755
   1873c:	00018691 	.word	0x00018691
   18740:	0001875b 	.word	0x0001875b
   18744:	000187e7 	.word	0x000187e7
   18748:	0001878b 	.word	0x0001878b
   1874c:	0001881b 	.word	0x0001881b
   18750:	00018805 	.word	0x00018805
		if (pdu_tx->llctrl.reject_ext_ind.reject_opcode !=
   18754:	7a22      	ldrb	r2, [r4, #8]
   18756:	2a03      	cmp	r2, #3
   18758:	d00d      	beq.n	18776 <ull_conn_tx_ack+0x122>
			conn->common.txn_lock = 0U;
   1875a:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
   1875e:	f36f 0241 	bfc	r2, #1, #1
   18762:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
			break;
   18766:	e793      	b.n	18690 <ull_conn_tx_ack+0x3c>
			conn->llcp_enc.pause_tx = 1U;
   18768:	f890 2166 	ldrb.w	r2, [r0, #358]	; 0x166
   1876c:	f042 0202 	orr.w	r2, r2, #2
   18770:	f880 2166 	strb.w	r2, [r0, #358]	; 0x166
		break;
   18774:	e78c      	b.n	18690 <ull_conn_tx_ack+0x3c>
		conn->llcp_enc.pause_rx = 0U;
   18776:	f893 2166 	ldrb.w	r2, [r3, #358]	; 0x166
		conn->procedure_expire = 0U;
   1877a:	2100      	movs	r1, #0
		conn->llcp_enc.pause_rx = 0U;
   1877c:	f022 0203 	bic.w	r2, r2, #3
   18780:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
		conn->procedure_expire = 0U;
   18784:	f8a3 10c8 	strh.w	r1, [r3, #200]	; 0xc8
		break;
   18788:	e782      	b.n	18690 <ull_conn_tx_ack+0x3c>
		conn->common.txn_lock = 0U;
   1878a:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   1878e:	f893 11ad 	ldrb.w	r1, [r3, #429]	; 0x1ad
   18792:	f890 01ac 	ldrb.w	r0, [r0, #428]	; 0x1ac
		conn->common.txn_lock = 0U;
   18796:	f36f 0241 	bfc	r2, #1, #1
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   1879a:	4281      	cmp	r1, r0
		conn->common.txn_lock = 0U;
   1879c:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   187a0:	f43f af76 	beq.w	18690 <ull_conn_tx_ack+0x3c>
			switch (conn->llcp_length.state) {
   187a4:	f893 11ae 	ldrb.w	r1, [r3, #430]	; 0x1ae
   187a8:	f001 0207 	and.w	r2, r1, #7
   187ac:	2a03      	cmp	r2, #3
   187ae:	d005      	beq.n	187bc <ull_conn_tx_ack+0x168>
   187b0:	3203      	adds	r2, #3
   187b2:	f002 0207 	and.w	r2, r2, #7
   187b6:	2a01      	cmp	r2, #1
   187b8:	f63f af6a 	bhi.w	18690 <ull_conn_tx_ack+0x3c>
				conn->lll.max_tx_octets =
   187bc:	f8b3 21b2 	ldrh.w	r2, [r3, #434]	; 0x1b2
   187c0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
				if (conn->llcp_length.state ==
   187c4:	f001 0207 	and.w	r2, r1, #7
				conn->lll.max_tx_time =
   187c8:	f8b3 71b6 	ldrh.w	r7, [r3, #438]	; 0x1b6
   187cc:	f8a3 705c 	strh.w	r7, [r3, #92]	; 0x5c
				if (conn->llcp_length.state ==
   187d0:	2a05      	cmp	r2, #5
   187d2:	d057      	beq.n	18884 <ull_conn_tx_ack+0x230>
				if (!conn->llcp_length.cache.tx_octets) {
   187d4:	f8b3 21b8 	ldrh.w	r2, [r3, #440]	; 0x1b8
   187d8:	2a00      	cmp	r2, #0
   187da:	d159      	bne.n	18890 <ull_conn_tx_ack+0x23c>
					conn->llcp_length.ack =
   187dc:	f883 01ad 	strb.w	r0, [r3, #429]	; 0x1ad
					conn->procedure_expire = 0U;
   187e0:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
					break;
   187e4:	e754      	b.n	18690 <ull_conn_tx_ack+0x3c>
		conn->llcp_length.state = LLCP_LENGTH_STATE_RSP_WAIT;
   187e6:	f890 21ae 	ldrb.w	r2, [r0, #430]	; 0x1ae
   187ea:	2102      	movs	r1, #2
   187ec:	f361 0202 	bfi	r2, r1, #0, #3
   187f0:	f880 21ae 	strb.w	r2, [r0, #430]	; 0x1ae
		break;
   187f4:	e74c      	b.n	18690 <ull_conn_tx_ack+0x3c>
		uint8_t reason = (pdu_tx->llctrl.terminate_ind.error_code ==
   187f6:	7a21      	ldrb	r1, [r4, #8]
   187f8:	2913      	cmp	r1, #19
		conn_cleanup(conn, reason);
   187fa:	bf08      	it	eq
   187fc:	2116      	moveq	r1, #22
   187fe:	f7ff fbbd 	bl	17f7c <conn_cleanup>
	break;
   18802:	e745      	b.n	18690 <ull_conn_tx_ack+0x3c>
		if (conn->lll.role) {
   18804:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
   18808:	2a00      	cmp	r2, #0
   1880a:	db2f      	blt.n	1886c <ull_conn_tx_ack+0x218>
		conn->llcp_phy.pause_tx = 0U;
   1880c:	f893 21bf 	ldrb.w	r2, [r3, #447]	; 0x1bf
   18810:	f36f 0200 	bfc	r2, #0, #1
   18814:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
		break;
   18818:	e73a      	b.n	18690 <ull_conn_tx_ack+0x3c>
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   1881a:	f890 21be 	ldrb.w	r2, [r0, #446]	; 0x1be
		if (conn->lll.role) {
   1881e:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   18822:	2002      	movs	r0, #2
   18824:	f360 0201 	bfi	r2, r0, #0, #2
		if (conn->lll.role) {
   18828:	2900      	cmp	r1, #0
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   1882a:	f883 21be 	strb.w	r2, [r3, #446]	; 0x1be
		if (conn->lll.role) {
   1882e:	daed      	bge.n	1880c <ull_conn_tx_ack+0x1b8>
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   18830:	4a23      	ldr	r2, [pc, #140]	; (188c0 <ull_conn_tx_ack+0x26c>)
   18832:	e892 0003 	ldmia.w	r2, {r0, r1}
   18836:	aa02      	add	r2, sp, #8
   18838:	e902 0003 	stmdb	r2, {r0, r1}
			phys = conn->llcp_phy.tx | lll->phy_tx;
   1883c:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
   18840:	f893 21be 	ldrb.w	r2, [r3, #446]	; 0x1be
   18844:	ea41 0292 	orr.w	r2, r1, r2, lsr #2
			lll->phy_tx_time = phy_tx_time[phys];
   18848:	f002 0207 	and.w	r2, r2, #7
   1884c:	a802      	add	r0, sp, #8
   1884e:	4402      	add	r2, r0
   18850:	f812 2c08 	ldrb.w	r2, [r2, #-8]
   18854:	f362 1106 	bfi	r1, r2, #4, #3
   18858:	f883 1060 	strb.w	r1, [r3, #96]	; 0x60
   1885c:	e7d6      	b.n	1880c <ull_conn_tx_ack+0x1b8>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   1885e:	4919      	ldr	r1, [pc, #100]	; (188c4 <ull_conn_tx_ack+0x270>)
   18860:	4620      	mov	r0, r4
}
   18862:	b003      	add	sp, #12
   18864:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			mem_release(tx, &mem_conn_tx_ctrl.free);
   18868:	f7f6 baa6 	b.w	edb8 <mem_release>
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   1886c:	4914      	ldr	r1, [pc, #80]	; (188c0 <ull_conn_tx_ack+0x26c>)
				conn->common.txn_lock = 0U;
   1886e:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   18872:	c903      	ldmia	r1, {r0, r1}
   18874:	af02      	add	r7, sp, #8
				conn->common.txn_lock = 0U;
   18876:	f36f 0241 	bfc	r2, #1, #1
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   1887a:	e907 0003 	stmdb	r7, {r0, r1}
				conn->common.txn_lock = 0U;
   1887e:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
   18882:	e7db      	b.n	1883c <ull_conn_tx_ack+0x1e8>
					conn->llcp_length.state =
   18884:	2204      	movs	r2, #4
   18886:	f362 0102 	bfi	r1, r2, #0, #3
   1888a:	f883 11ae 	strb.w	r1, [r3, #430]	; 0x1ae
					break;
   1888e:	e6ff      	b.n	18690 <ull_conn_tx_ack+0x3c>
				conn->llcp_length.cache.tx_octets = 0;
   18890:	2000      	movs	r0, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   18892:	f360 0102 	bfi	r1, r0, #0, #3
				conn->llcp_length.tx_octets =
   18896:	f8a3 21b2 	strh.w	r2, [r3, #434]	; 0x1b2
				conn->llcp_length.tx_time =
   1889a:	f8b3 21ba 	ldrh.w	r2, [r3, #442]	; 0x1ba
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1889e:	f883 11ae 	strb.w	r1, [r3, #430]	; 0x1ae
				conn->llcp_length.cache.tx_octets = 0;
   188a2:	f8a3 01b8 	strh.w	r0, [r3, #440]	; 0x1b8
				conn->llcp_length.tx_time =
   188a6:	f8a3 21b6 	strh.w	r2, [r3, #438]	; 0x1b6
				break;
   188aa:	e6f1      	b.n	18690 <ull_conn_tx_ack+0x3c>
   188ac:	0002b604 	.word	0x0002b604
   188b0:	0002b800 	.word	0x0002b800
   188b4:	0002b0c4 	.word	0x0002b0c4
   188b8:	0002b7f4 	.word	0x0002b7f4
   188bc:	20000768 	.word	0x20000768
   188c0:	0002b80c 	.word	0x0002b80c
   188c4:	20001914 	.word	0x20001914

000188c8 <ull_conn_lll_max_tx_octets_get>:
	switch (lll->phy_tx_time) {
   188c8:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
   188cc:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
   188d0:	f3c2 1202 	ubfx	r2, r2, #4, #3
   188d4:	2a02      	cmp	r2, #2
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   188d6:	bf14      	ite	ne
   188d8:	08db      	lsrne	r3, r3, #3
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   188da:	089b      	lsreq	r3, r3, #2
	if (lll->enc_tx) {
   188dc:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
	return max_tx_octets;
   188e0:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   188e2:	bf14      	ite	ne
   188e4:	3b0a      	subne	r3, #10
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   188e6:	3b0b      	subeq	r3, #11
   188e8:	b29b      	uxth	r3, r3
	if (lll->enc_tx) {
   188ea:	06d2      	lsls	r2, r2, #27
		max_tx_octets -= 4U;
   188ec:	bf44      	itt	mi
   188ee:	3b04      	submi	r3, #4
   188f0:	b29b      	uxthmi	r3, r3
}
   188f2:	4298      	cmp	r0, r3
   188f4:	bf28      	it	cs
   188f6:	4618      	movcs	r0, r3
   188f8:	4770      	bx	lr
   188fa:	bf00      	nop

000188fc <ticker_update_latency_cancel_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *params)
{
   188fc:	b510      	push	{r4, lr}
   188fe:	460c      	mov	r4, r1
	struct ll_conn *conn = params;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   18900:	b930      	cbnz	r0, 18910 <ticker_update_latency_cancel_op_cb+0x14>

	conn->slave.latency_cancel = 0U;
   18902:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   18906:	f36f 0382 	bfc	r3, #2, #1
   1890a:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
}
   1890e:	bd10      	pop	{r4, pc}
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   18910:	4a09      	ldr	r2, [pc, #36]	; (18938 <ticker_update_latency_cancel_op_cb+0x3c>)
   18912:	490a      	ldr	r1, [pc, #40]	; (1893c <ticker_update_latency_cancel_op_cb+0x40>)
   18914:	480a      	ldr	r0, [pc, #40]	; (18940 <ticker_update_latency_cancel_op_cb+0x44>)
   18916:	f240 2343 	movw	r3, #579	; 0x243
   1891a:	f00b fe63 	bl	245e4 <printk>
   1891e:	4040      	eors	r0, r0
   18920:	f380 8811 	msr	BASEPRI, r0
   18924:	f04f 0003 	mov.w	r0, #3
   18928:	df02      	svc	2
	conn->slave.latency_cancel = 0U;
   1892a:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   1892e:	f36f 0382 	bfc	r3, #2, #1
   18932:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
}
   18936:	bd10      	pop	{r4, pc}
   18938:	0002b82c 	.word	0x0002b82c
   1893c:	0002b870 	.word	0x0002b870
   18940:	0002b0c4 	.word	0x0002b0c4

00018944 <ticker_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   18944:	b900      	cbnz	r0, 18948 <ticker_op_cb+0x4>
   18946:	4770      	bx	lr
{
   18948:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1894a:	4a07      	ldr	r2, [pc, #28]	; (18968 <ticker_op_cb+0x24>)
   1894c:	4907      	ldr	r1, [pc, #28]	; (1896c <ticker_op_cb+0x28>)
   1894e:	4808      	ldr	r0, [pc, #32]	; (18970 <ticker_op_cb+0x2c>)
   18950:	f240 233b 	movw	r3, #571	; 0x23b
   18954:	f00b fe46 	bl	245e4 <printk>
   18958:	4040      	eors	r0, r0
   1895a:	f380 8811 	msr	BASEPRI, r0
   1895e:	f04f 0003 	mov.w	r0, #3
   18962:	df02      	svc	2
}
   18964:	bd08      	pop	{r3, pc}
   18966:	bf00      	nop
   18968:	0002b82c 	.word	0x0002b82c
   1896c:	0002b664 	.word	0x0002b664
   18970:	0002b0c4 	.word	0x0002b0c4

00018974 <ticker_op_stop_adv_cb.part.0>:
static void ticker_op_stop_adv_cb(uint32_t status, void *param)
   18974:	b508      	push	{r3, lr}
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   18976:	4a07      	ldr	r2, [pc, #28]	; (18994 <ticker_op_stop_adv_cb.part.0+0x20>)
   18978:	4907      	ldr	r1, [pc, #28]	; (18998 <ticker_op_stop_adv_cb.part.0+0x24>)
   1897a:	4808      	ldr	r0, [pc, #32]	; (1899c <ticker_op_stop_adv_cb.part.0+0x28>)
   1897c:	f240 2333 	movw	r3, #563	; 0x233
   18980:	f00b fe30 	bl	245e4 <printk>
   18984:	4040      	eors	r0, r0
   18986:	f380 8811 	msr	BASEPRI, r0
   1898a:	f04f 0003 	mov.w	r0, #3
   1898e:	df02      	svc	2
}
   18990:	bd08      	pop	{r3, pc}
   18992:	bf00      	nop
   18994:	0002b82c 	.word	0x0002b82c
   18998:	0002b884 	.word	0x0002b884
   1899c:	0002b0c4 	.word	0x0002b0c4

000189a0 <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   189a0:	2801      	cmp	r0, #1
   189a2:	d000      	beq.n	189a6 <ticker_op_stop_adv_cb+0x6>
   189a4:	4770      	bx	lr
{
   189a6:	b510      	push	{r4, lr}
   189a8:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   189aa:	f7fa fbad 	bl	13108 <ull_disable_mark_get>
   189ae:	4284      	cmp	r4, r0
   189b0:	d003      	beq.n	189ba <ticker_op_stop_adv_cb+0x1a>
}
   189b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   189b6:	f7ff bfdd 	b.w	18974 <ticker_op_stop_adv_cb.part.0>
   189ba:	bd10      	pop	{r4, pc}

000189bc <ull_slave_ticker_cb>:
{
   189bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   189c0:	9c08      	ldr	r4, [sp, #32]
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   189c2:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
   189c6:	f64f 76ff 	movw	r6, #65535	; 0xffff
   189ca:	45b4      	cmp	ip, r6
   189cc:	d029      	beq.n	18a22 <ull_slave_ticker_cb+0x66>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   189ce:	4605      	mov	r5, r0
   189d0:	4689      	mov	r9, r1
   189d2:	4601      	mov	r1, r0
   189d4:	4620      	mov	r0, r4
   189d6:	461f      	mov	r7, r3
   189d8:	4690      	mov	r8, r2
   189da:	f7fd fed1 	bl	16780 <ull_conn_llcp>
		if (ret) {
   189de:	bb00      	cbnz	r0, 18a22 <ull_slave_ticker_cb+0x66>
	return ++hdr->ref;
   189e0:	7c20      	ldrb	r0, [r4, #16]
   189e2:	3001      	adds	r0, #1
   189e4:	b2c0      	uxtb	r0, r0
   189e6:	7420      	strb	r0, [r4, #16]
	LL_ASSERT(ref);
   189e8:	b358      	cbz	r0, 18a42 <ull_slave_ticker_cb+0x86>
	p.ticks_at_expire = ticks_at_expire;
   189ea:	4e1d      	ldr	r6, [pc, #116]	; (18a60 <ull_slave_ticker_cb+0xa4>)
	mfy.param = &p;
   189ec:	4b1d      	ldr	r3, [pc, #116]	; (18a64 <ull_slave_ticker_cb+0xa8>)
	p.ticks_at_expire = ticks_at_expire;
   189ee:	6035      	str	r5, [r6, #0]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   189f0:	2200      	movs	r2, #0
	p.param = &conn->lll;
   189f2:	f104 0c1c 	add.w	ip, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   189f6:	4611      	mov	r1, r2
   189f8:	2001      	movs	r0, #1
	mfy.param = &p;
   189fa:	609e      	str	r6, [r3, #8]
	p.remainder = remainder;
   189fc:	f8c6 9004 	str.w	r9, [r6, #4]
	p.lazy = lazy;
   18a00:	f8a6 8008 	strh.w	r8, [r6, #8]
	p.force = force;
   18a04:	72b7      	strb	r7, [r6, #10]
	p.param = &conn->lll;
   18a06:	f8c6 c00c 	str.w	ip, [r6, #12]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   18a0a:	f7f6 fa95 	bl	ef38 <mayfly_enqueue>
	LL_ASSERT(!err);
   18a0e:	b950      	cbnz	r0, 18a26 <ull_slave_ticker_cb+0x6a>
	ull_conn_tx_demux(UINT8_MAX);
   18a10:	20ff      	movs	r0, #255	; 0xff
   18a12:	f7ff fa63 	bl	17edc <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   18a16:	4620      	mov	r0, r4
   18a18:	21ff      	movs	r1, #255	; 0xff
}
   18a1a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   18a1e:	f7ff bcbd 	b.w	1839c <ull_conn_tx_lll_enqueue>
}
   18a22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(!err);
   18a26:	4a10      	ldr	r2, [pc, #64]	; (18a68 <ull_slave_ticker_cb+0xac>)
   18a28:	4910      	ldr	r1, [pc, #64]	; (18a6c <ull_slave_ticker_cb+0xb0>)
   18a2a:	4811      	ldr	r0, [pc, #68]	; (18a70 <ull_slave_ticker_cb+0xb4>)
   18a2c:	f240 13f7 	movw	r3, #503	; 0x1f7
   18a30:	f00b fdd8 	bl	245e4 <printk>
   18a34:	4040      	eors	r0, r0
   18a36:	f380 8811 	msr	BASEPRI, r0
   18a3a:	f04f 0003 	mov.w	r0, #3
   18a3e:	df02      	svc	2
   18a40:	e7e6      	b.n	18a10 <ull_slave_ticker_cb+0x54>
	LL_ASSERT(ref);
   18a42:	4a09      	ldr	r2, [pc, #36]	; (18a68 <ull_slave_ticker_cb+0xac>)
   18a44:	490b      	ldr	r1, [pc, #44]	; (18a74 <ull_slave_ticker_cb+0xb8>)
   18a46:	480a      	ldr	r0, [pc, #40]	; (18a70 <ull_slave_ticker_cb+0xb4>)
   18a48:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
   18a4c:	f00b fdca 	bl	245e4 <printk>
   18a50:	4040      	eors	r0, r0
   18a52:	f380 8811 	msr	BASEPRI, r0
   18a56:	f04f 0003 	mov.w	r0, #3
   18a5a:	df02      	svc	2
   18a5c:	e7c5      	b.n	189ea <ull_slave_ticker_cb+0x2e>
   18a5e:	bf00      	nop
   18a60:	20001a0c 	.word	0x20001a0c
   18a64:	20007b04 	.word	0x20007b04
   18a68:	0002b82c 	.word	0x0002b82c
   18a6c:	0002b384 	.word	0x0002b384
   18a70:	0002b0c4 	.word	0x0002b0c4
   18a74:	0002b538 	.word	0x0002b538

00018a78 <ull_slave_latency_cancel>:
	if (conn->lll.latency_event && !conn->slave.latency_cancel) {
   18a78:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   18a7a:	b123      	cbz	r3, 18a86 <ull_slave_latency_cancel+0xe>
   18a7c:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
   18a80:	f012 0304 	ands.w	r3, r2, #4
   18a84:	d000      	beq.n	18a88 <ull_slave_latency_cancel+0x10>
   18a86:	4770      	bx	lr
{
   18a88:	b530      	push	{r4, r5, lr}
   18a8a:	b089      	sub	sp, #36	; 0x24
		conn->slave.latency_cancel = 1U;
   18a8c:	f042 0204 	orr.w	r2, r2, #4
				      (TICKER_ID_CONN_BASE + handle),
   18a90:	3103      	adds	r1, #3
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   18a92:	4d11      	ldr	r5, [pc, #68]	; (18ad8 <ull_slave_latency_cancel+0x60>)
		conn->slave.latency_cancel = 1U;
   18a94:	f880 20d8 	strb.w	r2, [r0, #216]	; 0xd8
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   18a98:	2401      	movs	r4, #1
   18a9a:	e9cd 3301 	strd	r3, r3, [sp, #4]
   18a9e:	b2ca      	uxtb	r2, r1
   18aa0:	9006      	str	r0, [sp, #24]
   18aa2:	9304      	str	r3, [sp, #16]
   18aa4:	9300      	str	r3, [sp, #0]
   18aa6:	4618      	mov	r0, r3
   18aa8:	9505      	str	r5, [sp, #20]
   18aaa:	9403      	str	r4, [sp, #12]
   18aac:	2103      	movs	r1, #3
   18aae:	f7f7 fd31 	bl	10514 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   18ab2:	f030 0302 	bics.w	r3, r0, #2
   18ab6:	d00c      	beq.n	18ad2 <ull_slave_latency_cancel+0x5a>
   18ab8:	4a08      	ldr	r2, [pc, #32]	; (18adc <ull_slave_latency_cancel+0x64>)
   18aba:	4909      	ldr	r1, [pc, #36]	; (18ae0 <ull_slave_latency_cancel+0x68>)
   18abc:	4809      	ldr	r0, [pc, #36]	; (18ae4 <ull_slave_latency_cancel+0x6c>)
   18abe:	f44f 73de 	mov.w	r3, #444	; 0x1bc
   18ac2:	f00b fd8f 	bl	245e4 <printk>
   18ac6:	4040      	eors	r0, r0
   18ac8:	f380 8811 	msr	BASEPRI, r0
   18acc:	f04f 0003 	mov.w	r0, #3
   18ad0:	df02      	svc	2
}
   18ad2:	b009      	add	sp, #36	; 0x24
   18ad4:	bd30      	pop	{r4, r5, pc}
   18ad6:	bf00      	nop
   18ad8:	000188fd 	.word	0x000188fd
   18adc:	0002b82c 	.word	0x0002b82c
   18ae0:	0002b6e4 	.word	0x0002b6e4
   18ae4:	0002b0c4 	.word	0x0002b0c4

00018ae8 <ll_start_enc_req_send>:
{
   18ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18aea:	460d      	mov	r5, r1
   18aec:	4614      	mov	r4, r2
	conn = ll_connected_get(handle);
   18aee:	f7fb fef9 	bl	148e4 <ll_connected_get>
	if (!conn) {
   18af2:	2800      	cmp	r0, #0
   18af4:	d046      	beq.n	18b84 <ll_start_enc_req_send+0x9c>
	if (error_code) {
   18af6:	4603      	mov	r3, r0
   18af8:	b9ed      	cbnz	r5, 18b36 <ll_start_enc_req_send+0x4e>
		if ((conn->llcp_req == conn->llcp_ack) ||
   18afa:	f890 10e4 	ldrb.w	r1, [r0, #228]	; 0xe4
   18afe:	f890 20e5 	ldrb.w	r2, [r0, #229]	; 0xe5
   18b02:	4291      	cmp	r1, r2
   18b04:	d035      	beq.n	18b72 <ll_start_enc_req_send+0x8a>
   18b06:	f890 20e6 	ldrb.w	r2, [r0, #230]	; 0xe6
   18b0a:	2a03      	cmp	r2, #3
   18b0c:	d131      	bne.n	18b72 <ll_start_enc_req_send+0x8a>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   18b0e:	f8b0 20f4 	ldrh.w	r2, [r0, #244]	; 0xf4
   18b12:	6827      	ldr	r7, [r4, #0]
   18b14:	68e0      	ldr	r0, [r4, #12]
   18b16:	6866      	ldr	r6, [r4, #4]
   18b18:	68a1      	ldr	r1, [r4, #8]
   18b1a:	f8c3 1179 	str.w	r1, [r3, #377]	; 0x179
   18b1e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
   18b22:	f8c3 017d 	str.w	r0, [r3, #381]	; 0x17d
   18b26:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
   18b2a:	f8c3 7171 	str.w	r7, [r3, #369]	; 0x171
   18b2e:	f8c3 6175 	str.w	r6, [r3, #373]	; 0x175
	return 0;
   18b32:	4628      	mov	r0, r5
}
   18b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->llcp_enc.refresh == 0U) {
   18b36:	f890 0166 	ldrb.w	r0, [r0, #358]	; 0x166
   18b3a:	f010 0004 	ands.w	r0, r0, #4
   18b3e:	d112      	bne.n	18b66 <ll_start_enc_req_send+0x7e>
			if ((conn->llcp_req == conn->llcp_ack) ||
   18b40:	f893 10e4 	ldrb.w	r1, [r3, #228]	; 0xe4
   18b44:	f893 20e5 	ldrb.w	r2, [r3, #229]	; 0xe5
   18b48:	4291      	cmp	r1, r2
   18b4a:	d012      	beq.n	18b72 <ll_start_enc_req_send+0x8a>
   18b4c:	f893 20e6 	ldrb.w	r2, [r3, #230]	; 0xe6
   18b50:	2a03      	cmp	r2, #3
   18b52:	d10e      	bne.n	18b72 <ll_start_enc_req_send+0x8a>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   18b54:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
			conn->llcp.encryption.error_code = error_code;
   18b58:	f883 50f5 	strb.w	r5, [r3, #245]	; 0xf5
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   18b5c:	f360 0201 	bfi	r2, r0, #0, #2
   18b60:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
}
   18b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			    conn->llcp_terminate.req) {
   18b66:	f893 1140 	ldrb.w	r1, [r3, #320]	; 0x140
			if (conn->llcp_terminate.ack !=
   18b6a:	f893 2141 	ldrb.w	r2, [r3, #321]	; 0x141
   18b6e:	428a      	cmp	r2, r1
   18b70:	d001      	beq.n	18b76 <ll_start_enc_req_send+0x8e>
				return BT_HCI_ERR_CMD_DISALLOWED;
   18b72:	200c      	movs	r0, #12
}
   18b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			conn->llcp_terminate.req++;
   18b76:	3201      	adds	r2, #1
   18b78:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
			conn->llcp_terminate.reason_own = error_code;
   18b7c:	f883 5142 	strb.w	r5, [r3, #322]	; 0x142
	return 0;
   18b80:	2000      	movs	r0, #0
}
   18b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18b84:	2002      	movs	r0, #2
}
   18b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00018b88 <lll_chan_sel_1>:
#endif /* CONFIG_BT_CTLR_CHAN_SEL_2 */

#if defined(CONFIG_BT_CONN)
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   18b88:	b470      	push	{r4, r5, r6}
   18b8a:	4605      	mov	r5, r0
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   18b8c:	7800      	ldrb	r0, [r0, #0]
   18b8e:	4c1b      	ldr	r4, [pc, #108]	; (18bfc <lll_chan_sel_1+0x74>)
   18b90:	fb02 1101 	mla	r1, r2, r1, r1
   18b94:	180a      	adds	r2, r1, r0
   18b96:	fb84 0102 	smull	r0, r1, r4, r2
   18b9a:	4411      	add	r1, r2
   18b9c:	1149      	asrs	r1, r1, #5
   18b9e:	eb01 04c1 	add.w	r4, r1, r1, lsl #3
   18ba2:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   18ba6:	1a51      	subs	r1, r2, r1
   18ba8:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   18baa:	08c2      	lsrs	r2, r0, #3
	*chan_use = chan_next;
   18bac:	7028      	strb	r0, [r5, #0]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   18bae:	5c9c      	ldrb	r4, [r3, r2]
{
   18bb0:	f89d 500c 	ldrb.w	r5, [sp, #12]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   18bb4:	f001 0107 	and.w	r1, r1, #7
   18bb8:	410c      	asrs	r4, r1
   18bba:	f014 0401 	ands.w	r4, r4, #1
   18bbe:	d11b      	bne.n	18bf8 <lll_chan_sel_1+0x70>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   18bc0:	fbb0 f2f5 	udiv	r2, r0, r5
   18bc4:	fb05 0212 	mls	r2, r5, r2, r0
   18bc8:	b2d2      	uxtb	r2, r2
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   18bca:	1e5d      	subs	r5, r3, #1
   18bcc:	1d1e      	adds	r6, r3, #4
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   18bce:	f104 0108 	add.w	r1, r4, #8
   18bd2:	f815 3f01 	ldrb.w	r3, [r5, #1]!
		bit_count = 8U;
		while (bit_count--) {
   18bd6:	4620      	mov	r0, r4
   18bd8:	b2cc      	uxtb	r4, r1
			if (bite & 0x01) {
   18bda:	f013 0f01 	tst.w	r3, #1
				if (chan_index == 0U) {
					break;
				}
				chan_index--;
			}
			chan_next++;
   18bde:	f100 0101 	add.w	r1, r0, #1
			bite >>= 1;
   18be2:	ea4f 0353 	mov.w	r3, r3, lsr #1
			if (bite & 0x01) {
   18be6:	d002      	beq.n	18bee <lll_chan_sel_1+0x66>
				if (chan_index == 0U) {
   18be8:	b132      	cbz	r2, 18bf8 <lll_chan_sel_1+0x70>
				chan_index--;
   18bea:	3a01      	subs	r2, #1
   18bec:	b2d2      	uxtb	r2, r2
			chan_next++;
   18bee:	b2c8      	uxtb	r0, r1
		while (bit_count--) {
   18bf0:	4284      	cmp	r4, r0
   18bf2:	d1f2      	bne.n	18bda <lll_chan_sel_1+0x52>
	while (byte_count--) {
   18bf4:	42b5      	cmp	r5, r6
   18bf6:	d1ea      	bne.n	18bce <lll_chan_sel_1+0x46>
}
   18bf8:	bc70      	pop	{r4, r5, r6}
   18bfa:	4770      	bx	lr
   18bfc:	dd67c8a7 	.word	0xdd67c8a7

00018c00 <lll_chan_id>:
{
   18c00:	b410      	push	{r4}
	uint16_t aa_ls = ((uint16_t)access_addr[1] << 8) | access_addr[0];
   18c02:	7844      	ldrb	r4, [r0, #1]
	uint16_t aa_ms = ((uint16_t)access_addr[3] << 8) | access_addr[2];
   18c04:	78c1      	ldrb	r1, [r0, #3]
   18c06:	7883      	ldrb	r3, [r0, #2]
	uint16_t aa_ls = ((uint16_t)access_addr[1] << 8) | access_addr[0];
   18c08:	7802      	ldrb	r2, [r0, #0]
	uint16_t aa_ms = ((uint16_t)access_addr[3] << 8) | access_addr[2];
   18c0a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	uint16_t aa_ls = ((uint16_t)access_addr[1] << 8) | access_addr[0];
   18c0e:	ea42 2004 	orr.w	r0, r2, r4, lsl #8
}
   18c12:	4058      	eors	r0, r3
   18c14:	bc10      	pop	{r4}
   18c16:	4770      	bx	lr

00018c18 <lll_chan_sel_2>:
{
   18c18:	b5f0      	push	{r4, r5, r6, r7, lr}
/* Attribution:
 * http://graphics.stanford.edu/%7Eseander/bithacks.html#ReverseByteWith32Bits
 */
static uint8_t chan_rev_8(uint8_t b)
{
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   18c1a:	4f2f      	ldr	r7, [pc, #188]	; (18cd8 <lll_chan_sel_2+0xc0>)
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   18c1c:	4e2f      	ldr	r6, [pc, #188]	; (18cdc <lll_chan_sel_2+0xc4>)
static uint16_t chan_prn(uint16_t counter, uint16_t chan_id)
{
	uint8_t iterate;
	uint16_t prn_e;

	prn_e = counter ^ chan_id;
   18c1e:	ea80 0501 	eor.w	r5, r0, r1
   18c22:	2403      	movs	r4, #3
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   18c24:	0a28      	lsrs	r0, r5, #8
   18c26:	b2ed      	uxtb	r5, r5
   18c28:	eb00 2080 	add.w	r0, r0, r0, lsl #10
   18c2c:	eb05 2585 	add.w	r5, r5, r5, lsl #10
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   18c30:	ea06 1e40 	and.w	lr, r6, r0, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   18c34:	ea07 0c40 	and.w	ip, r7, r0, lsl #1
   18c38:	ea07 0045 	and.w	r0, r7, r5, lsl #1
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   18c3c:	ea06 1545 	and.w	r5, r6, r5, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   18c40:	ea4c 0c0e 	orr.w	ip, ip, lr
   18c44:	4328      	orrs	r0, r5
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   18c46:	eb00 2500 	add.w	r5, r0, r0, lsl #8
   18c4a:	eb0c 2e0c 	add.w	lr, ip, ip, lsl #8
   18c4e:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   18c52:	eb0c 2c0e 	add.w	ip, ip, lr, lsl #8
   18c56:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   18c5a:	f3c0 4007 	ubfx	r0, r0, #16, #8
   18c5e:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   18c62:	eb00 1000 	add.w	r0, r0, r0, lsl #4
   18c66:	3c01      	subs	r4, #1
   18c68:	4408      	add	r0, r1

	for (iterate = 0U; iterate < 3; iterate++) {
   18c6a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   18c6e:	b285      	uxth	r5, r0
	for (iterate = 0U; iterate < 3; iterate++) {
   18c70:	d1d8      	bne.n	18c24 <lll_chan_sel_2+0xc>
	chan_next = prn_e % 37;
   18c72:	481b      	ldr	r0, [pc, #108]	; (18ce0 <lll_chan_sel_2+0xc8>)
		prn_e = chan_perm(prn_e);
		prn_e = chan_mam(prn_e, chan_id);
	}

	prn_e ^= chan_id;
   18c74:	4069      	eors	r1, r5
	chan_next = prn_e % 37;
   18c76:	fba0 5001 	umull	r5, r0, r0, r1
   18c7a:	1a0d      	subs	r5, r1, r0
   18c7c:	eb00 0055 	add.w	r0, r0, r5, lsr #1
   18c80:	0940      	lsrs	r0, r0, #5
   18c82:	eb00 05c0 	add.w	r5, r0, r0, lsl #3
   18c86:	eb00 0085 	add.w	r0, r0, r5, lsl #2
   18c8a:	1a08      	subs	r0, r1, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   18c8c:	f3c0 05c4 	ubfx	r5, r0, #3, #5
   18c90:	f000 0607 	and.w	r6, r0, #7
   18c94:	5d55      	ldrb	r5, [r2, r5]
   18c96:	4135      	asrs	r5, r6
   18c98:	07ed      	lsls	r5, r5, #31
	chan_next = prn_e % 37;
   18c9a:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   18c9c:	d41a      	bmi.n	18cd4 <lll_chan_sel_2+0xbc>
		chan_index = ((uint32_t)chan_count * prn_e) >> 16;
   18c9e:	fb01 f303 	mul.w	r3, r1, r3
   18ca2:	1e56      	subs	r6, r2, #1
   18ca4:	f3c3 4307 	ubfx	r3, r3, #16, #8
	while (byte_count--) {
   18ca8:	3204      	adds	r2, #4
		bite = *chan_map;
   18caa:	f104 0508 	add.w	r5, r4, #8
   18cae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		while (bit_count--) {
   18cb2:	4620      	mov	r0, r4
   18cb4:	b2ec      	uxtb	r4, r5
			if (bite & 0x01) {
   18cb6:	f011 0f01 	tst.w	r1, #1
			chan_next++;
   18cba:	f100 0501 	add.w	r5, r0, #1
			bite >>= 1;
   18cbe:	ea4f 0151 	mov.w	r1, r1, lsr #1
			if (bite & 0x01) {
   18cc2:	d002      	beq.n	18cca <lll_chan_sel_2+0xb2>
				if (chan_index == 0U) {
   18cc4:	b133      	cbz	r3, 18cd4 <lll_chan_sel_2+0xbc>
				chan_index--;
   18cc6:	3b01      	subs	r3, #1
   18cc8:	b2db      	uxtb	r3, r3
			chan_next++;
   18cca:	b2e8      	uxtb	r0, r5
		while (bit_count--) {
   18ccc:	42a0      	cmp	r0, r4
   18cce:	d1f2      	bne.n	18cb6 <lll_chan_sel_2+0x9e>
	while (byte_count--) {
   18cd0:	42b2      	cmp	r2, r6
   18cd2:	d1ea      	bne.n	18caa <lll_chan_sel_2+0x92>
}
   18cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18cd6:	bf00      	nop
   18cd8:	00022110 	.word	0x00022110
   18cdc:	00088440 	.word	0x00088440
   18ce0:	bacf914d 	.word	0xbacf914d

00018ce4 <wl_find>:
		wl[i].taken = 0U;
	}
}

static uint8_t wl_find(uint8_t addr_type, uint8_t *addr, uint8_t *free)
{
   18ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18ce8:	4688      	mov	r8, r1
	int i;

	if (free) {
   18cea:	4615      	mov	r5, r2
   18cec:	b10a      	cbz	r2, 18cf2 <wl_find+0xe>
		*free = FILTER_IDX_NONE;
   18cee:	23ff      	movs	r3, #255	; 0xff
   18cf0:	7013      	strb	r3, [r2, #0]
   18cf2:	4e17      	ldr	r6, [pc, #92]	; (18d50 <wl_find+0x6c>)
	}

	for (i = 0; i < WL_SIZE; i++) {
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   18cf4:	f000 0701 	and.w	r7, r0, #1
   18cf8:	f106 0902 	add.w	r9, r6, #2
{
   18cfc:	2400      	movs	r4, #0
   18cfe:	e004      	b.n	18d0a <wl_find+0x26>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   18d00:	42ba      	cmp	r2, r7
   18d02:	d014      	beq.n	18d2e <wl_find+0x4a>
	for (i = 0; i < WL_SIZE; i++) {
   18d04:	3401      	adds	r4, #1
   18d06:	2c08      	cmp	r4, #8
   18d08:	d00e      	beq.n	18d28 <wl_find+0x44>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   18d0a:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   18d0e:	07d9      	lsls	r1, r3, #31
   18d10:	f3c3 0240 	ubfx	r2, r3, #1, #1
   18d14:	d4f4      	bmi.n	18d00 <wl_find+0x1c>
			return i;
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   18d16:	2d00      	cmp	r5, #0
   18d18:	d0f4      	beq.n	18d04 <wl_find+0x20>
   18d1a:	782b      	ldrb	r3, [r5, #0]
   18d1c:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   18d1e:	bf08      	it	eq
   18d20:	702c      	strbeq	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
   18d22:	3401      	adds	r4, #1
   18d24:	2c08      	cmp	r4, #8
   18d26:	d1f0      	bne.n	18d0a <wl_find+0x26>
		}
	}

	return FILTER_IDX_NONE;
   18d28:	20ff      	movs	r0, #255	; 0xff
}
   18d2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   18d2e:	2206      	movs	r2, #6
   18d30:	4641      	mov	r1, r8
   18d32:	eb09 00c4 	add.w	r0, r9, r4, lsl #3
   18d36:	f011 fb45 	bl	2a3c4 <memcmp>
   18d3a:	b130      	cbz	r0, 18d4a <wl_find+0x66>
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   18d3c:	2d00      	cmp	r5, #0
   18d3e:	d0e1      	beq.n	18d04 <wl_find+0x20>
   18d40:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   18d44:	07db      	lsls	r3, r3, #31
   18d46:	d4dd      	bmi.n	18d04 <wl_find+0x20>
   18d48:	e7e7      	b.n	18d1a <wl_find+0x36>
			return i;
   18d4a:	b2e0      	uxtb	r0, r4
   18d4c:	e7ed      	b.n	18d2a <wl_find+0x46>
   18d4e:	bf00      	nop
   18d50:	20001c4c 	.word	0x20001c4c

00018d54 <filter_insert>:
}
#endif /* !CONFIG_BT_CTLR_PRIVACY */

static void filter_insert(struct lll_filter *filter, int index, uint8_t addr_type,
			   uint8_t *bdaddr)
{
   18d54:	b430      	push	{r4, r5}
	filter->enable_bitmask |= BIT(index);
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   18d56:	7845      	ldrb	r5, [r0, #1]
	filter->enable_bitmask |= BIT(index);
   18d58:	7804      	ldrb	r4, [r0, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   18d5a:	408a      	lsls	r2, r1
   18d5c:	4315      	orrs	r5, r2
	filter->enable_bitmask |= BIT(index);
   18d5e:	2201      	movs	r2, #1
   18d60:	408a      	lsls	r2, r1
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   18d62:	eb01 0141 	add.w	r1, r1, r1, lsl #1
	filter->enable_bitmask |= BIT(index);
   18d66:	4314      	orrs	r4, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   18d68:	0049      	lsls	r1, r1, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   18d6a:	7045      	strb	r5, [r0, #1]
	filter->enable_bitmask |= BIT(index);
   18d6c:	7004      	strb	r4, [r0, #0]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   18d6e:	3102      	adds	r1, #2
   18d70:	681a      	ldr	r2, [r3, #0]
   18d72:	5042      	str	r2, [r0, r1]
   18d74:	4401      	add	r1, r0
   18d76:	889b      	ldrh	r3, [r3, #4]
   18d78:	808b      	strh	r3, [r1, #4]
}
   18d7a:	bc30      	pop	{r4, r5}
   18d7c:	4770      	bx	lr
   18d7e:	bf00      	nop

00018d80 <wl_update>:
{
   18d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18d84:	4d16      	ldr	r5, [pc, #88]	; (18de0 <wl_update+0x60>)
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   18d86:	f8df 8060 	ldr.w	r8, [pc, #96]	; 18de8 <wl_update+0x68>
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   18d8a:	4f16      	ldr	r7, [pc, #88]	; (18de4 <wl_update+0x64>)
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   18d8c:	f8df 905c 	ldr.w	r9, [pc, #92]	; 18dec <wl_update+0x6c>
   18d90:	1eae      	subs	r6, r5, #2
{
   18d92:	2400      	movs	r4, #0
		if (!wl[i].taken) {
   18d94:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   18d98:	f013 0f01 	tst.w	r3, #1
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   18d9c:	4621      	mov	r1, r4
   18d9e:	462b      	mov	r3, r5
   18da0:	4638      	mov	r0, r7
		if (!wl[i].taken) {
   18da2:	d015      	beq.n	18dd0 <wl_update+0x50>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   18da4:	f898 2000 	ldrb.w	r2, [r8]
   18da8:	b162      	cbz	r2, 18dc4 <wl_update+0x44>
		j = wl[i].rl_idx;
   18daa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   18dae:	2a07      	cmp	r2, #7
   18db0:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
   18db4:	d806      	bhi.n	18dc4 <wl_update+0x44>
   18db6:	f819 203c 	ldrb.w	r2, [r9, ip, lsl #3]
   18dba:	f012 0f04 	tst.w	r2, #4
   18dbe:	d001      	beq.n	18dc4 <wl_update+0x44>
   18dc0:	06d2      	lsls	r2, r2, #27
   18dc2:	d505      	bpl.n	18dd0 <wl_update+0x50>
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   18dc4:	f816 2034 	ldrb.w	r2, [r6, r4, lsl #3]
   18dc8:	f3c2 0240 	ubfx	r2, r2, #1, #1
   18dcc:	f7ff ffc2 	bl	18d54 <filter_insert>
	for (i = 0U; i < WL_SIZE; i++) {
   18dd0:	3401      	adds	r4, #1
   18dd2:	2c08      	cmp	r4, #8
   18dd4:	f105 0508 	add.w	r5, r5, #8
   18dd8:	d1dc      	bne.n	18d94 <wl_update+0x14>
}
   18dda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   18dde:	bf00      	nop
   18de0:	20001c4e 	.word	0x20001c4e
   18de4:	20001c8c 	.word	0x20001c8c
   18de8:	20002aa9 	.word	0x20002aa9
   18dec:	20001ad4 	.word	0x20001ad4

00018df0 <rl_update>:
{
   18df0:	b570      	push	{r4, r5, r6, lr}
   18df2:	4d0c      	ldr	r5, [pc, #48]	; (18e24 <rl_update+0x34>)
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   18df4:	480c      	ldr	r0, [pc, #48]	; (18e28 <rl_update+0x38>)
   18df6:	1c6e      	adds	r6, r5, #1
{
   18df8:	2400      	movs	r4, #0
   18dfa:	e002      	b.n	18e02 <rl_update+0x12>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   18dfc:	3401      	adds	r4, #1
   18dfe:	2c08      	cmp	r4, #8
   18e00:	d00f      	beq.n	18e22 <rl_update+0x32>
		if (rl[i].taken) {
   18e02:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   18e06:	00d3      	lsls	r3, r2, #3
   18e08:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
   18e0c:	07d1      	lsls	r1, r2, #31
   18e0e:	d5f5      	bpl.n	18dfc <rl_update+0xc>
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   18e10:	4621      	mov	r1, r4
   18e12:	4433      	add	r3, r6
   18e14:	f3c2 1280 	ubfx	r2, r2, #6, #1
   18e18:	3401      	adds	r4, #1
   18e1a:	f7ff ff9b 	bl	18d54 <filter_insert>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   18e1e:	2c08      	cmp	r4, #8
   18e20:	d1ef      	bne.n	18e02 <rl_update+0x12>
}
   18e22:	bd70      	pop	{r4, r5, r6, pc}
   18e24:	20001ad4 	.word	0x20001ad4
   18e28:	20001c14 	.word	0x20001c14

00018e2c <ll_wl_size_get>:
}
   18e2c:	2008      	movs	r0, #8
   18e2e:	4770      	bx	lr

00018e30 <ll_wl_clear>:
{
   18e30:	b510      	push	{r4, lr}
	if (ull_adv_filter_pol_get(0)) {
   18e32:	2000      	movs	r0, #0
   18e34:	f7fa ff44 	bl	13cc0 <ull_adv_filter_pol_get>
   18e38:	b9d8      	cbnz	r0, 18e72 <ll_wl_clear+0x42>
   18e3a:	4a0f      	ldr	r2, [pc, #60]	; (18e78 <ll_wl_clear+0x48>)
			rl[j].wl = 0U;
   18e3c:	4c0f      	ldr	r4, [pc, #60]	; (18e7c <ll_wl_clear+0x4c>)
		uint8_t j = wl[i].rl_idx;
   18e3e:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   18e42:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   18e44:	2b07      	cmp	r3, #7
			rl[j].wl = 0U;
   18e46:	eb03 0183 	add.w	r1, r3, r3, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   18e4a:	d805      	bhi.n	18e58 <ll_wl_clear+0x28>
			rl[j].wl = 0U;
   18e4c:	f814 3031 	ldrb.w	r3, [r4, r1, lsl #3]
   18e50:	f36f 1345 	bfc	r3, #5, #1
   18e54:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
		wl[i].taken = 0U;
   18e58:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   18e5c:	f36f 0300 	bfc	r3, #0, #1
   18e60:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   18e64:	3001      	adds	r0, #1
   18e66:	2808      	cmp	r0, #8
   18e68:	d1e9      	bne.n	18e3e <ll_wl_clear+0xe>
	wl_anon = 0U;
   18e6a:	4b05      	ldr	r3, [pc, #20]	; (18e80 <ll_wl_clear+0x50>)
   18e6c:	2000      	movs	r0, #0
   18e6e:	7018      	strb	r0, [r3, #0]
}
   18e70:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   18e72:	200c      	movs	r0, #12
}
   18e74:	bd10      	pop	{r4, pc}
   18e76:	bf00      	nop
   18e78:	20001c4c 	.word	0x20001c4c
   18e7c:	20001ad4 	.word	0x20001ad4
   18e80:	20002aaa 	.word	0x20002aaa

00018e84 <ll_wl_remove>:
{
   18e84:	b538      	push	{r3, r4, r5, lr}
   18e86:	4605      	mov	r5, r0
	if (ull_adv_filter_pol_get(0)) {
   18e88:	2000      	movs	r0, #0
   18e8a:	f7fa ff19 	bl	13cc0 <ull_adv_filter_pol_get>
   18e8e:	bb30      	cbnz	r0, 18ede <ll_wl_remove+0x5a>
   18e90:	4604      	mov	r4, r0
	if (addr->type == ADDR_TYPE_ANON) {
   18e92:	7828      	ldrb	r0, [r5, #0]
   18e94:	28ff      	cmp	r0, #255	; 0xff
   18e96:	d01e      	beq.n	18ed6 <ll_wl_remove+0x52>
	uint8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   18e98:	1c69      	adds	r1, r5, #1
   18e9a:	4622      	mov	r2, r4
   18e9c:	f7ff ff22 	bl	18ce4 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   18ea0:	2807      	cmp	r0, #7
   18ea2:	d901      	bls.n	18ea8 <ll_wl_remove+0x24>
   18ea4:	2002      	movs	r0, #2
}
   18ea6:	bd38      	pop	{r3, r4, r5, pc}
		uint8_t j = wl[i].rl_idx;
   18ea8:	4a0e      	ldr	r2, [pc, #56]	; (18ee4 <ll_wl_remove+0x60>)
   18eaa:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   18eae:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   18eb0:	2b07      	cmp	r3, #7
   18eb2:	d808      	bhi.n	18ec6 <ll_wl_remove+0x42>
			rl[j].wl = 0U;
   18eb4:	490c      	ldr	r1, [pc, #48]	; (18ee8 <ll_wl_remove+0x64>)
   18eb6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   18eba:	f811 5033 	ldrb.w	r5, [r1, r3, lsl #3]
   18ebe:	f364 1545 	bfi	r5, r4, #5, #1
   18ec2:	f801 5033 	strb.w	r5, [r1, r3, lsl #3]
		wl[i].taken = 0U;
   18ec6:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   18eca:	f36f 0300 	bfc	r3, #0, #1
   18ece:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
		return 0;
   18ed2:	2000      	movs	r0, #0
}
   18ed4:	bd38      	pop	{r3, r4, r5, pc}
		wl_anon = 0U;
   18ed6:	4b05      	ldr	r3, [pc, #20]	; (18eec <ll_wl_remove+0x68>)
   18ed8:	701c      	strb	r4, [r3, #0]
		return 0;
   18eda:	4620      	mov	r0, r4
}
   18edc:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   18ede:	200c      	movs	r0, #12
}
   18ee0:	bd38      	pop	{r3, r4, r5, pc}
   18ee2:	bf00      	nop
   18ee4:	20001c4c 	.word	0x20001c4c
   18ee8:	20001ad4 	.word	0x20001ad4
   18eec:	20002aaa 	.word	0x20002aaa

00018ef0 <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   18ef0:	2807      	cmp	r0, #7
{
   18ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18ef6:	4604      	mov	r4, r0
   18ef8:	460e      	mov	r6, r1
   18efa:	4615      	mov	r5, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   18efc:	d819      	bhi.n	18f32 <ll_rl_id_addr_get+0x42>
	LL_ASSERT(rl[rl_idx].taken);
   18efe:	4f1a      	ldr	r7, [pc, #104]	; (18f68 <ll_rl_id_addr_get+0x78>)
   18f00:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   18f04:	ea4f 0884 	mov.w	r8, r4, lsl #2
   18f08:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   18f0c:	07db      	lsls	r3, r3, #31
   18f0e:	d51d      	bpl.n	18f4c <ll_rl_id_addr_get+0x5c>
	*id_addr_type = rl[rl_idx].id_addr_type;
   18f10:	44a0      	add	r8, r4
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   18f12:	2028      	movs	r0, #40	; 0x28
	*id_addr_type = rl[rl_idx].id_addr_type;
   18f14:	f817 3038 	ldrb.w	r3, [r7, r8, lsl #3]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   18f18:	fb00 7404 	mla	r4, r0, r4, r7
	*id_addr_type = rl[rl_idx].id_addr_type;
   18f1c:	f3c3 1380 	ubfx	r3, r3, #6, #1
   18f20:	7033      	strb	r3, [r6, #0]
   18f22:	f8d4 3001 	ldr.w	r3, [r4, #1]
   18f26:	602b      	str	r3, [r5, #0]
   18f28:	f8b4 3005 	ldrh.w	r3, [r4, #5]
   18f2c:	80ab      	strh	r3, [r5, #4]
}
   18f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   18f32:	4a0e      	ldr	r2, [pc, #56]	; (18f6c <ll_rl_id_addr_get+0x7c>)
   18f34:	490e      	ldr	r1, [pc, #56]	; (18f70 <ll_rl_id_addr_get+0x80>)
   18f36:	480f      	ldr	r0, [pc, #60]	; (18f74 <ll_rl_id_addr_get+0x84>)
   18f38:	23f3      	movs	r3, #243	; 0xf3
   18f3a:	f00b fb53 	bl	245e4 <printk>
   18f3e:	4040      	eors	r0, r0
   18f40:	f380 8811 	msr	BASEPRI, r0
   18f44:	f04f 0003 	mov.w	r0, #3
   18f48:	df02      	svc	2
   18f4a:	e7d8      	b.n	18efe <ll_rl_id_addr_get+0xe>
	LL_ASSERT(rl[rl_idx].taken);
   18f4c:	4a07      	ldr	r2, [pc, #28]	; (18f6c <ll_rl_id_addr_get+0x7c>)
   18f4e:	490a      	ldr	r1, [pc, #40]	; (18f78 <ll_rl_id_addr_get+0x88>)
   18f50:	4808      	ldr	r0, [pc, #32]	; (18f74 <ll_rl_id_addr_get+0x84>)
   18f52:	23f4      	movs	r3, #244	; 0xf4
   18f54:	f00b fb46 	bl	245e4 <printk>
   18f58:	4040      	eors	r0, r0
   18f5a:	f380 8811 	msr	BASEPRI, r0
   18f5e:	f04f 0003 	mov.w	r0, #3
   18f62:	df02      	svc	2
   18f64:	e7d4      	b.n	18f10 <ll_rl_id_addr_get+0x20>
   18f66:	bf00      	nop
   18f68:	20001ad4 	.word	0x20001ad4
   18f6c:	0002b8dc 	.word	0x0002b8dc
   18f70:	0002b920 	.word	0x0002b920
   18f74:	0002b0c4 	.word	0x0002b0c4
   18f78:	0002b92c 	.word	0x0002b92c

00018f7c <ll_rl_size_get>:
   18f7c:	2008      	movs	r0, #8
   18f7e:	4770      	bx	lr

00018f80 <ll_rl_clear>:
{
   18f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   18f82:	2000      	movs	r0, #0
   18f84:	f7fa fe90 	bl	13ca8 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   18f88:	bb98      	cbnz	r0, 18ff2 <ll_rl_clear+0x72>
		rl[i].taken = 0U;
   18f8a:	4b1b      	ldr	r3, [pc, #108]	; (18ff8 <ll_rl_clear+0x78>)
	peer_irk_count = 0U;
   18f8c:	491b      	ldr	r1, [pc, #108]	; (18ffc <ll_rl_clear+0x7c>)
		rl[i].taken = 0U;
   18f8e:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   18f92:	f893 c000 	ldrb.w	ip, [r3]
   18f96:	f893 7028 	ldrb.w	r7, [r3, #40]	; 0x28
   18f9a:	f893 6078 	ldrb.w	r6, [r3, #120]	; 0x78
   18f9e:	f893 50a0 	ldrb.w	r5, [r3, #160]	; 0xa0
   18fa2:	f893 40c8 	ldrb.w	r4, [r3, #200]	; 0xc8
	peer_irk_count = 0U;
   18fa6:	7008      	strb	r0, [r1, #0]
		rl[i].taken = 0U;
   18fa8:	f360 0200 	bfi	r2, r0, #0, #1
   18fac:	f893 10f0 	ldrb.w	r1, [r3, #240]	; 0xf0
   18fb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
   18fb4:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
   18fb8:	f360 0c00 	bfi	ip, r0, #0, #1
   18fbc:	f360 0700 	bfi	r7, r0, #0, #1
   18fc0:	f360 0600 	bfi	r6, r0, #0, #1
   18fc4:	f360 0500 	bfi	r5, r0, #0, #1
   18fc8:	f360 0400 	bfi	r4, r0, #0, #1
   18fcc:	f360 0100 	bfi	r1, r0, #0, #1
   18fd0:	f360 0200 	bfi	r2, r0, #0, #1
   18fd4:	f883 c000 	strb.w	ip, [r3]
   18fd8:	f883 7028 	strb.w	r7, [r3, #40]	; 0x28
   18fdc:	f883 6078 	strb.w	r6, [r3, #120]	; 0x78
   18fe0:	f883 50a0 	strb.w	r5, [r3, #160]	; 0xa0
   18fe4:	f883 40c8 	strb.w	r4, [r3, #200]	; 0xc8
   18fe8:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
   18fec:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
}
   18ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   18ff2:	200c      	movs	r0, #12
}
   18ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18ff6:	bf00      	nop
   18ff8:	20001ad4 	.word	0x20001ad4
   18ffc:	20002aa8 	.word	0x20002aa8

00019000 <ll_rl_enable>:
{
   19000:	b510      	push	{r4, lr}
   19002:	4604      	mov	r4, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   19004:	2000      	movs	r0, #0
   19006:	f7fa fe4f 	bl	13ca8 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   1900a:	b958      	cbnz	r0, 19024 <ll_rl_enable+0x24>
	switch (enable) {
   1900c:	b134      	cbz	r4, 1901c <ll_rl_enable+0x1c>
   1900e:	2c01      	cmp	r4, #1
   19010:	d001      	beq.n	19016 <ll_rl_enable+0x16>
   19012:	2012      	movs	r0, #18
}
   19014:	bd10      	pop	{r4, pc}
		rl_enable = 1U;
   19016:	4b04      	ldr	r3, [pc, #16]	; (19028 <ll_rl_enable+0x28>)
   19018:	701c      	strb	r4, [r3, #0]
}
   1901a:	bd10      	pop	{r4, pc}
		rl_enable = 0U;
   1901c:	4b02      	ldr	r3, [pc, #8]	; (19028 <ll_rl_enable+0x28>)
   1901e:	701c      	strb	r4, [r3, #0]
	return 0;
   19020:	4620      	mov	r0, r4
}
   19022:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   19024:	200c      	movs	r0, #12
}
   19026:	bd10      	pop	{r4, pc}
   19028:	20002aa9 	.word	0x20002aa9

0001902c <ll_rl_timeout_set>:
	rpa_timeout_ms = timeout * 1000U;
   1902c:	4a03      	ldr	r2, [pc, #12]	; (1903c <ll_rl_timeout_set+0x10>)
   1902e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   19032:	fb03 f300 	mul.w	r3, r3, r0
   19036:	6013      	str	r3, [r2, #0]
}
   19038:	4770      	bx	lr
   1903a:	bf00      	nop
   1903c:	20001c48 	.word	0x20001c48

00019040 <ull_filter_adv_scan_state_cb>:
{
   19040:	b510      	push	{r4, lr}
	if (bm) {
   19042:	b1a8      	cbz	r0, 19070 <ull_filter_adv_scan_state_cb+0x30>
	k_delayed_work_submit(&rpa_work, K_MSEC(rpa_timeout_ms));
   19044:	4b0e      	ldr	r3, [pc, #56]	; (19080 <ull_filter_adv_scan_state_cb+0x40>)
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
   19046:	681a      	ldr	r2, [r3, #0]
   19048:	f240 30e7 	movw	r0, #999	; 0x3e7
   1904c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   19050:	2100      	movs	r1, #0
   19052:	fbe3 0102 	umlal	r0, r1, r3, r2
   19056:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1905a:	2300      	movs	r3, #0
   1905c:	f7e7 fd6e 	bl	b3c <__aeabi_uldivmod>
}
   19060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19064:	4602      	mov	r2, r0
   19066:	460b      	mov	r3, r1
	return k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   19068:	4806      	ldr	r0, [pc, #24]	; (19084 <ull_filter_adv_scan_state_cb+0x44>)
   1906a:	4907      	ldr	r1, [pc, #28]	; (19088 <ull_filter_adv_scan_state_cb+0x48>)
   1906c:	f009 bdf4 	b.w	22c58 <k_work_reschedule_for_queue>
	return k_work_delayable_busy_get(dwork) != 0;
   19070:	4805      	ldr	r0, [pc, #20]	; (19088 <ull_filter_adv_scan_state_cb+0x48>)
   19072:	f010 fdeb 	bl	29c4c <k_work_delayable_busy_get>
   19076:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	int rc = k_work_cancel_delayable(&work->work);
   1907a:	4803      	ldr	r0, [pc, #12]	; (19088 <ull_filter_adv_scan_state_cb+0x48>)
   1907c:	f010 bdfa 	b.w	29c74 <k_work_cancel_delayable>
   19080:	20001c48 	.word	0x20001c48
   19084:	20000ac0 	.word	0x20000ac0
   19088:	20000950 	.word	0x20000950

0001908c <ull_filter_adv_update>:
{
   1908c:	b508      	push	{r3, lr}

static void filter_clear(struct lll_filter *filter)
{
	filter->enable_bitmask = 0;
   1908e:	4b09      	ldr	r3, [pc, #36]	; (190b4 <ull_filter_adv_update+0x28>)
   19090:	2200      	movs	r2, #0
   19092:	801a      	strh	r2, [r3, #0]
	if (adv_fp &&
   19094:	b930      	cbnz	r0, 190a4 <ull_filter_adv_update+0x18>
	if (rl_enable &&
   19096:	4b08      	ldr	r3, [pc, #32]	; (190b8 <ull_filter_adv_update+0x2c>)
	filter->enable_bitmask = 0;
   19098:	4a08      	ldr	r2, [pc, #32]	; (190bc <ull_filter_adv_update+0x30>)
	if (rl_enable &&
   1909a:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   1909c:	2100      	movs	r1, #0
   1909e:	8011      	strh	r1, [r2, #0]
	if (rl_enable &&
   190a0:	b91b      	cbnz	r3, 190aa <ull_filter_adv_update+0x1e>
}
   190a2:	bd08      	pop	{r3, pc}
		wl_update();
   190a4:	f7ff fe6c 	bl	18d80 <wl_update>
   190a8:	e7f5      	b.n	19096 <ull_filter_adv_update+0xa>
}
   190aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   190ae:	f7ff be9f 	b.w	18df0 <rl_update>
   190b2:	bf00      	nop
   190b4:	20001c8c 	.word	0x20001c8c
   190b8:	20002aa9 	.word	0x20002aa9
   190bc:	20001c14 	.word	0x20001c14

000190c0 <ull_filter_rpa_update>:
{
   190c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   190c4:	4681      	mov	r9, r0
   190c6:	b087      	sub	sp, #28
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   190c8:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   190cc:	b923      	cbnz	r3, 190d8 <ull_filter_rpa_update+0x18>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   190ce:	f3ef 8314 	mrs	r3, CONTROL
	if (z_syscall_trap()) {
   190d2:	07d8      	lsls	r0, r3, #31
   190d4:	f100 80a8 	bmi.w	19228 <ull_filter_rpa_update+0x168>
	return z_impl_k_uptime_ticks();
   190d8:	f010 fe34 	bl	29d44 <z_impl_k_uptime_ticks>
   190dc:	0142      	lsls	r2, r0, #5
   190de:	014b      	lsls	r3, r1, #5
   190e0:	ebb2 0800 	subs.w	r8, r2, r0
   190e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
   190e8:	eb63 0301 	sbc.w	r3, r3, r1
   190ec:	009b      	lsls	r3, r3, #2
   190ee:	ea4f 0288 	mov.w	r2, r8, lsl #2
   190f2:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
   190f6:	eb12 0800 	adds.w	r8, r2, r0
   190fa:	eb43 0101 	adc.w	r1, r3, r1
   190fe:	00c9      	lsls	r1, r1, #3
   19100:	ea41 7158 	orr.w	r1, r1, r8, lsr #29
   19104:	ea4f 03c8 	mov.w	r3, r8, lsl #3
   19108:	ea4f 38d3 	mov.w	r8, r3, lsr #15
   1910c:	0bc8      	lsrs	r0, r1, #15
   1910e:	ea48 4841 	orr.w	r8, r8, r1, lsl #17
   19112:	9001      	str	r0, [sp, #4]
	bool all = timeout || (rpa_last_ms == -1) ||
   19114:	f1b9 0f00 	cmp.w	r9, #0
   19118:	d117      	bne.n	1914a <ull_filter_rpa_update+0x8a>
   1911a:	4b60      	ldr	r3, [pc, #384]	; (1929c <ull_filter_rpa_update+0x1dc>)
   1911c:	e9d3 2300 	ldrd	r2, r3, [r3]
   19120:	1c59      	adds	r1, r3, #1
   19122:	bf08      	it	eq
   19124:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   19128:	d00f      	beq.n	1914a <ull_filter_rpa_update+0x8a>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   1912a:	495d      	ldr	r1, [pc, #372]	; (192a0 <ull_filter_rpa_update+0x1e0>)
   1912c:	6809      	ldr	r1, [r1, #0]
   1912e:	ebb8 0402 	subs.w	r4, r8, r2
   19132:	eb60 0503 	sbc.w	r5, r0, r3
   19136:	2300      	movs	r3, #0
	bool all = timeout || (rpa_last_ms == -1) ||
   19138:	428c      	cmp	r4, r1
   1913a:	eb75 0303 	sbcs.w	r3, r5, r3
   1913e:	bfac      	ite	ge
   19140:	f04f 0a01 	movge.w	sl, #1
   19144:	f04f 0a00 	movlt.w	sl, #0
   19148:	e001      	b.n	1914e <ull_filter_rpa_update+0x8e>
   1914a:	f04f 0a01 	mov.w	sl, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1914e:	4e55      	ldr	r6, [pc, #340]	; (192a4 <ull_filter_rpa_update+0x1e4>)
   19150:	f8df b164 	ldr.w	fp, [pc, #356]	; 192b8 <ull_filter_rpa_update+0x1f8>
   19154:	f1a6 0717 	sub.w	r7, r6, #23
	bool all = timeout || (rpa_last_ms == -1) ||
   19158:	2400      	movs	r4, #0
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   1915a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1915e:	00a5      	lsls	r5, r4, #2
   19160:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   19164:	07da      	lsls	r2, r3, #31
   19166:	d515      	bpl.n	19194 <ull_filter_rpa_update+0xd4>
   19168:	f1ba 0f00 	cmp.w	sl, #0
   1916c:	d101      	bne.n	19172 <ull_filter_rpa_update+0xb2>
   1916e:	0798      	lsls	r0, r3, #30
   19170:	d410      	bmi.n	19194 <ull_filter_rpa_update+0xd4>
			if (rl[i].pirk) {
   19172:	192b      	adds	r3, r5, r4
   19174:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   19178:	0759      	lsls	r1, r3, #29
   1917a:	d432      	bmi.n	191e2 <ull_filter_rpa_update+0x122>
			if (rl[i].lirk) {
   1917c:	192b      	adds	r3, r5, r4
   1917e:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   19182:	071a      	lsls	r2, r3, #28
   19184:	d419      	bmi.n	191ba <ull_filter_rpa_update+0xfa>
			rl[i].rpas_ready = 1U;
   19186:	4425      	add	r5, r4
   19188:	f817 3035 	ldrb.w	r3, [r7, r5, lsl #3]
   1918c:	f043 0302 	orr.w	r3, r3, #2
   19190:	f807 3035 	strb.w	r3, [r7, r5, lsl #3]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19194:	3401      	adds	r4, #1
   19196:	2c08      	cmp	r4, #8
   19198:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1919c:	d1dd      	bne.n	1915a <ull_filter_rpa_update+0x9a>
	if (all) {
   1919e:	f1ba 0f00 	cmp.w	sl, #0
   191a2:	d004      	beq.n	191ae <ull_filter_rpa_update+0xee>
		rpa_last_ms = now;
   191a4:	4b3d      	ldr	r3, [pc, #244]	; (1929c <ull_filter_rpa_update+0x1dc>)
   191a6:	9a01      	ldr	r2, [sp, #4]
   191a8:	f8c3 8000 	str.w	r8, [r3]
   191ac:	605a      	str	r2, [r3, #4]
	if (timeout) {
   191ae:	f1b9 0f00 	cmp.w	r9, #0
   191b2:	d13f      	bne.n	19234 <ull_filter_rpa_update+0x174>
}
   191b4:	b007      	add	sp, #28
   191b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   191ba:	a902      	add	r1, sp, #8
   191bc:	f1a6 0010 	sub.w	r0, r6, #16
   191c0:	f00d fcd2 	bl	26b68 <bt_rpa_create>
				LL_ASSERT(!err);
   191c4:	2800      	cmp	r0, #0
   191c6:	d15b      	bne.n	19280 <ull_filter_rpa_update+0x1c0>
				bt_addr_copy(&local_rpas[i], &rpa);
   191c8:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   191cc:	eb0b 0342 	add.w	r3, fp, r2, lsl #1
   191d0:	9802      	ldr	r0, [sp, #8]
   191d2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   191d6:	f84b 0012 	str.w	r0, [fp, r2, lsl #1]
				rl[i].local_rpa = &local_rpas[i];
   191da:	f8c6 300d 	str.w	r3, [r6, #13]
   191de:	8099      	strh	r1, [r3, #4]
   191e0:	e7d1      	b.n	19186 <ull_filter_rpa_update+0xc6>
	psrc += length - 1;
   191e2:	7833      	ldrb	r3, [r6, #0]
   191e4:	4a30      	ldr	r2, [pc, #192]	; (192a8 <ull_filter_rpa_update+0x1e8>)
   191e6:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   191ea:	320f      	adds	r2, #15
	for (; length > 0; length--) {
   191ec:	f10d 0307 	add.w	r3, sp, #7
   191f0:	f10d 0017 	add.w	r0, sp, #23
		*pdst++ = *psrc--;
   191f4:	f812 1901 	ldrb.w	r1, [r2], #-1
   191f8:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   191fc:	4283      	cmp	r3, r0
   191fe:	d1f9      	bne.n	191f4 <ull_filter_rpa_update+0x134>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   19200:	1df1      	adds	r1, r6, #7
   19202:	a802      	add	r0, sp, #8
   19204:	f00d fcb0 	bl	26b68 <bt_rpa_create>
				LL_ASSERT(!err);
   19208:	2800      	cmp	r0, #0
   1920a:	d0b7      	beq.n	1917c <ull_filter_rpa_update+0xbc>
   1920c:	4a27      	ldr	r2, [pc, #156]	; (192ac <ull_filter_rpa_update+0x1ec>)
   1920e:	4928      	ldr	r1, [pc, #160]	; (192b0 <ull_filter_rpa_update+0x1f0>)
   19210:	4828      	ldr	r0, [pc, #160]	; (192b4 <ull_filter_rpa_update+0x1f4>)
   19212:	f240 2323 	movw	r3, #547	; 0x223
   19216:	f00b f9e5 	bl	245e4 <printk>
   1921a:	4040      	eors	r0, r0
   1921c:	f380 8811 	msr	BASEPRI, r0
   19220:	f04f 0003 	mov.w	r0, #3
   19224:	df02      	svc	2
   19226:	e7a9      	b.n	1917c <ull_filter_rpa_update+0xbc>
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
   19228:	a802      	add	r0, sp, #8
	register uint32_t r6 __asm__("r6") = call_id;
   1922a:	26c1      	movs	r6, #193	; 0xc1
	__asm__ volatile("svc %[svid]\n"
   1922c:	df03      	svc	3
		return (int64_t)ret64;
   1922e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   19232:	e753      	b.n	190dc <ull_filter_rpa_update+0x1c>
		adv = ull_adv_is_enabled_get(0);
   19234:	2000      	movs	r0, #0
   19236:	f7fa fd29 	bl	13c8c <ull_adv_is_enabled_get>
		if (adv) {
   1923a:	4604      	mov	r4, r0
   1923c:	2800      	cmp	r0, #0
   1923e:	d0b9      	beq.n	191b4 <ull_filter_rpa_update+0xf4>
	if (adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   19240:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
   19244:	075b      	lsls	r3, r3, #29
   19246:	d5b5      	bpl.n	191b4 <ull_filter_rpa_update+0xf4>
	if (adv->lll.rl_idx >= ARRAY_SIZE(rl)) {
   19248:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
   1924c:	2b07      	cmp	r3, #7
   1924e:	d8b1      	bhi.n	191b4 <ull_filter_rpa_update+0xf4>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   19250:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   19254:	eb00 0383 	add.w	r3, r0, r3, lsl #2
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   19258:	a902      	add	r1, sp, #8
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   1925a:	6add      	ldr	r5, [r3, #44]	; 0x2c
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   1925c:	3028      	adds	r0, #40	; 0x28
   1925e:	f001 fa2b 	bl	1a6b8 <lll_adv_pdu_alloc>
	memcpy(pdu, prev, PDU_AC_LL_HEADER_SIZE + prev->len);
   19262:	786a      	ldrb	r2, [r5, #1]
   19264:	4629      	mov	r1, r5
   19266:	3202      	adds	r2, #2
   19268:	4605      	mov	r5, r0
   1926a:	f011 f8b9 	bl	2a3e0 <memcpy>
	ull_adv_pdu_update_addrs(adv, pdu);
   1926e:	4629      	mov	r1, r5
   19270:	4620      	mov	r0, r4
   19272:	f7fa fdb5 	bl	13de0 <ull_adv_pdu_update_addrs>
	pdu->last = idx;
   19276:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1927a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
   1927e:	e799      	b.n	191b4 <ull_filter_rpa_update+0xf4>
				LL_ASSERT(!err);
   19280:	4a0a      	ldr	r2, [pc, #40]	; (192ac <ull_filter_rpa_update+0x1ec>)
   19282:	490b      	ldr	r1, [pc, #44]	; (192b0 <ull_filter_rpa_update+0x1f0>)
   19284:	480b      	ldr	r0, [pc, #44]	; (192b4 <ull_filter_rpa_update+0x1f4>)
   19286:	f44f 730c 	mov.w	r3, #560	; 0x230
   1928a:	f00b f9ab 	bl	245e4 <printk>
   1928e:	4040      	eors	r0, r0
   19290:	f380 8811 	msr	BASEPRI, r0
   19294:	f04f 0003 	mov.w	r0, #3
   19298:	df02      	svc	2
   1929a:	e795      	b.n	191c8 <ull_filter_rpa_update+0x108>
   1929c:	20000948 	.word	0x20000948
   192a0:	20001c48 	.word	0x20001c48
   192a4:	20001aeb 	.word	0x20001aeb
   192a8:	20001a54 	.word	0x20001a54
   192ac:	0002b8dc 	.word	0x0002b8dc
   192b0:	0002b384 	.word	0x0002b384
   192b4:	0002b0c4 	.word	0x0002b0c4
   192b8:	20001a1c 	.word	0x20001a1c

000192bc <rpa_timeout>:
{
   192bc:	b510      	push	{r4, lr}
	ull_filter_rpa_update(true);
   192be:	2001      	movs	r0, #1
   192c0:	f7ff fefe 	bl	190c0 <ull_filter_rpa_update>
	k_delayed_work_submit(&rpa_work, K_MSEC(rpa_timeout_ms));
   192c4:	4b0a      	ldr	r3, [pc, #40]	; (192f0 <rpa_timeout+0x34>)
   192c6:	681a      	ldr	r2, [r3, #0]
   192c8:	f240 30e7 	movw	r0, #999	; 0x3e7
   192cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   192d0:	2100      	movs	r1, #0
   192d2:	fbe3 0102 	umlal	r0, r1, r3, r2
   192d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   192da:	2300      	movs	r3, #0
   192dc:	f7e7 fc2e 	bl	b3c <__aeabi_uldivmod>
}
   192e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   192e4:	4602      	mov	r2, r0
   192e6:	460b      	mov	r3, r1
	return k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   192e8:	4802      	ldr	r0, [pc, #8]	; (192f4 <rpa_timeout+0x38>)
   192ea:	4903      	ldr	r1, [pc, #12]	; (192f8 <rpa_timeout+0x3c>)
   192ec:	f009 bcb4 	b.w	22c58 <k_work_reschedule_for_queue>
   192f0:	20001c48 	.word	0x20001c48
   192f4:	20000ac0 	.word	0x20000ac0
   192f8:	20000950 	.word	0x20000950

000192fc <ull_filter_adva_get>:
{
   192fc:	b570      	push	{r4, r5, r6, lr}
	uint8_t idx = adv->lll.rl_idx;
   192fe:	f890 4026 	ldrb.w	r4, [r0, #38]	; 0x26
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   19302:	2c07      	cmp	r4, #7
   19304:	d810      	bhi.n	19328 <ull_filter_adva_get+0x2c>
   19306:	4d10      	ldr	r5, [pc, #64]	; (19348 <ull_filter_adva_get+0x4c>)
   19308:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1930c:	00a6      	lsls	r6, r4, #2
   1930e:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   19312:	071a      	lsls	r2, r3, #28
   19314:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   19318:	d505      	bpl.n	19326 <ull_filter_adva_get+0x2a>
		LL_ASSERT(rl[idx].rpas_ready);
   1931a:	079b      	lsls	r3, r3, #30
   1931c:	d506      	bpl.n	1932c <ull_filter_adva_get+0x30>
		return rl[idx].local_rpa->val;
   1931e:	4434      	add	r4, r6
   19320:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   19324:	6a68      	ldr	r0, [r5, #36]	; 0x24
}
   19326:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   19328:	2000      	movs	r0, #0
}
   1932a:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(rl[idx].rpas_ready);
   1932c:	4a07      	ldr	r2, [pc, #28]	; (1934c <ull_filter_adva_get+0x50>)
   1932e:	4908      	ldr	r1, [pc, #32]	; (19350 <ull_filter_adva_get+0x54>)
   19330:	4808      	ldr	r0, [pc, #32]	; (19354 <ull_filter_adva_get+0x58>)
   19332:	f240 2356 	movw	r3, #598	; 0x256
   19336:	f00b f955 	bl	245e4 <printk>
   1933a:	4040      	eors	r0, r0
   1933c:	f380 8811 	msr	BASEPRI, r0
   19340:	f04f 0003 	mov.w	r0, #3
   19344:	df02      	svc	2
   19346:	e7ea      	b.n	1931e <ull_filter_adva_get+0x22>
   19348:	20001ad4 	.word	0x20001ad4
   1934c:	0002b8dc 	.word	0x0002b8dc
   19350:	0002b940 	.word	0x0002b940
   19354:	0002b0c4 	.word	0x0002b0c4

00019358 <ull_filter_tgta_get>:
	uint8_t idx = adv->lll.rl_idx;
   19358:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
	if (idx < ARRAY_SIZE(rl) && rl[idx].pirk) {
   1935c:	2b07      	cmp	r3, #7
   1935e:	d80e      	bhi.n	1937e <ull_filter_tgta_get+0x26>
   19360:	4908      	ldr	r1, [pc, #32]	; (19384 <ull_filter_tgta_get+0x2c>)
   19362:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   19366:	f811 2032 	ldrb.w	r2, [r1, r2, lsl #3]
   1936a:	f3c2 0080 	ubfx	r0, r2, #2, #1
   1936e:	0752      	lsls	r2, r2, #29
   19370:	d506      	bpl.n	19380 <ull_filter_tgta_get+0x28>
		return rl[idx].peer_rpa.val;
   19372:	2028      	movs	r0, #40	; 0x28
   19374:	fb00 1303 	mla	r3, r0, r3, r1
   19378:	f103 001e 	add.w	r0, r3, #30
   1937c:	4770      	bx	lr
	return NULL;
   1937e:	2000      	movs	r0, #0
}
   19380:	4770      	bx	lr
   19382:	bf00      	nop
   19384:	20001ad4 	.word	0x20001ad4

00019388 <ull_filter_rl_find>:
{
   19388:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1938c:	468b      	mov	fp, r1
	if (free) {
   1938e:	4616      	mov	r6, r2
   19390:	b10a      	cbz	r2, 19396 <ull_filter_rl_find+0xe>
		*free = FILTER_IDX_NONE;
   19392:	23ff      	movs	r3, #255	; 0xff
   19394:	7013      	strb	r3, [r2, #0]
   19396:	f8df 8064 	ldr.w	r8, [pc, #100]	; 193fc <ull_filter_rl_find+0x74>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1939a:	f000 0901 	and.w	r9, r0, #1
   1939e:	f108 0a01 	add.w	sl, r8, #1
{
   193a2:	2400      	movs	r4, #0
   193a4:	e004      	b.n	193b0 <ull_filter_rl_find+0x28>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   193a6:	454a      	cmp	r2, r9
   193a8:	d019      	beq.n	193de <ull_filter_rl_find+0x56>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   193aa:	3401      	adds	r4, #1
   193ac:	2c08      	cmp	r4, #8
   193ae:	d012      	beq.n	193d6 <ull_filter_rl_find+0x4e>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   193b0:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   193b4:	00e8      	lsls	r0, r5, #3
   193b6:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   193ba:	07d9      	lsls	r1, r3, #31
   193bc:	f3c3 1280 	ubfx	r2, r3, #6, #1
   193c0:	b2e7      	uxtb	r7, r4
   193c2:	d4f0      	bmi.n	193a6 <ull_filter_rl_find+0x1e>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   193c4:	2e00      	cmp	r6, #0
   193c6:	d0f0      	beq.n	193aa <ull_filter_rl_find+0x22>
   193c8:	7833      	ldrb	r3, [r6, #0]
   193ca:	3401      	adds	r4, #1
   193cc:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   193ce:	bf08      	it	eq
   193d0:	7037      	strbeq	r7, [r6, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   193d2:	2c08      	cmp	r4, #8
   193d4:	d1ec      	bne.n	193b0 <ull_filter_rl_find+0x28>
	return FILTER_IDX_NONE;
   193d6:	27ff      	movs	r7, #255	; 0xff
}
   193d8:	4638      	mov	r0, r7
   193da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   193de:	4450      	add	r0, sl
   193e0:	2206      	movs	r2, #6
   193e2:	4659      	mov	r1, fp
   193e4:	f010 ffee 	bl	2a3c4 <memcmp>
   193e8:	2800      	cmp	r0, #0
   193ea:	d0f5      	beq.n	193d8 <ull_filter_rl_find+0x50>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   193ec:	2e00      	cmp	r6, #0
   193ee:	d0dc      	beq.n	193aa <ull_filter_rl_find+0x22>
   193f0:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   193f4:	07db      	lsls	r3, r3, #31
   193f6:	d4d8      	bmi.n	193aa <ull_filter_rl_find+0x22>
   193f8:	e7e6      	b.n	193c8 <ull_filter_rl_find+0x40>
   193fa:	bf00      	nop
   193fc:	20001ad4 	.word	0x20001ad4

00019400 <ll_wl_add>:
{
   19400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19404:	4605      	mov	r5, r0
   19406:	b082      	sub	sp, #8
	if (ull_adv_filter_pol_get(0)) {
   19408:	2000      	movs	r0, #0
   1940a:	f7fa fc59 	bl	13cc0 <ull_adv_filter_pol_get>
   1940e:	2800      	cmp	r0, #0
   19410:	d13e      	bne.n	19490 <ll_wl_add+0x90>
   19412:	4604      	mov	r4, r0
	if (addr->type == ADDR_TYPE_ANON) {
   19414:	7828      	ldrb	r0, [r5, #0]
   19416:	28ff      	cmp	r0, #255	; 0xff
   19418:	d033      	beq.n	19482 <ll_wl_add+0x82>
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   1941a:	f105 0801 	add.w	r8, r5, #1
   1941e:	4641      	mov	r1, r8
   19420:	f10d 0207 	add.w	r2, sp, #7
   19424:	f7ff fc5e 	bl	18ce4 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   19428:	2807      	cmp	r0, #7
   1942a:	d926      	bls.n	1947a <ll_wl_add+0x7a>
	} else if (j >= ARRAY_SIZE(wl)) {
   1942c:	f89d 6007 	ldrb.w	r6, [sp, #7]
   19430:	2e07      	cmp	r6, #7
   19432:	d83e      	bhi.n	194b2 <ll_wl_add+0xb2>
	wl[i].id_addr_type = id_addr->type & 0x1;
   19434:	4f21      	ldr	r7, [pc, #132]	; (194bc <ll_wl_add+0xbc>)
   19436:	782a      	ldrb	r2, [r5, #0]
   19438:	f817 3036 	ldrb.w	r3, [r7, r6, lsl #3]
   1943c:	f362 0341 	bfi	r3, r2, #1, #1
   19440:	f807 3036 	strb.w	r3, [r7, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   19444:	2302      	movs	r3, #2
   19446:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   1944a:	f8d5 2001 	ldr.w	r2, [r5, #1]
   1944e:	50fa      	str	r2, [r7, r3]
   19450:	443b      	add	r3, r7
   19452:	f8b5 2005 	ldrh.w	r2, [r5, #5]
   19456:	809a      	strh	r2, [r3, #4]
	j = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   19458:	7828      	ldrb	r0, [r5, #0]
   1945a:	4622      	mov	r2, r4
   1945c:	4641      	mov	r1, r8
   1945e:	f7ff ff93 	bl	19388 <ull_filter_rl_find>
	if (j < ARRAY_SIZE(rl)) {
   19462:	2807      	cmp	r0, #7
   19464:	d918      	bls.n	19498 <ll_wl_add+0x98>
		wl[i].rl_idx = FILTER_IDX_NONE;
   19466:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
   1946a:	22ff      	movs	r2, #255	; 0xff
   1946c:	705a      	strb	r2, [r3, #1]
	wl[i].taken = 1U;
   1946e:	f817 3036 	ldrb.w	r3, [r7, r6, lsl #3]
   19472:	f043 0301 	orr.w	r3, r3, #1
   19476:	f807 3036 	strb.w	r3, [r7, r6, lsl #3]
	return 0;
   1947a:	2000      	movs	r0, #0
}
   1947c:	b002      	add	sp, #8
   1947e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		wl_anon = 1U;
   19482:	4b0f      	ldr	r3, [pc, #60]	; (194c0 <ll_wl_add+0xc0>)
   19484:	2201      	movs	r2, #1
		return 0;
   19486:	4620      	mov	r0, r4
		wl_anon = 1U;
   19488:	701a      	strb	r2, [r3, #0]
}
   1948a:	b002      	add	sp, #8
   1948c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   19490:	200c      	movs	r0, #12
}
   19492:	b002      	add	sp, #8
   19494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rl[j].wl = 1U;
   19498:	490a      	ldr	r1, [pc, #40]	; (194c4 <ll_wl_add+0xc4>)
   1949a:	eb00 0480 	add.w	r4, r0, r0, lsl #2
		wl[i].rl_idx = j;
   1949e:	eb07 02c6 	add.w	r2, r7, r6, lsl #3
		rl[j].wl = 1U;
   194a2:	f811 3034 	ldrb.w	r3, [r1, r4, lsl #3]
		wl[i].rl_idx = j;
   194a6:	7050      	strb	r0, [r2, #1]
		rl[j].wl = 1U;
   194a8:	f043 0320 	orr.w	r3, r3, #32
   194ac:	f801 3034 	strb.w	r3, [r1, r4, lsl #3]
   194b0:	e7dd      	b.n	1946e <ll_wl_add+0x6e>
   194b2:	2007      	movs	r0, #7
}
   194b4:	b002      	add	sp, #8
   194b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   194ba:	bf00      	nop
   194bc:	20001c4c 	.word	0x20001c4c
   194c0:	20002aaa 	.word	0x20002aaa
   194c4:	20001ad4 	.word	0x20001ad4

000194c8 <ll_rl_add>:
{
   194c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   194cc:	4606      	mov	r6, r0
   194ce:	b085      	sub	sp, #20
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   194d0:	2000      	movs	r0, #0
{
   194d2:	460d      	mov	r5, r1
   194d4:	4617      	mov	r7, r2
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   194d6:	f7fa fbe7 	bl	13ca8 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   194da:	2800      	cmp	r0, #0
   194dc:	f040 8099 	bne.w	19612 <ll_rl_add+0x14a>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, &j);
   194e0:	46b1      	mov	r9, r6
   194e2:	f10d 020f 	add.w	r2, sp, #15
   194e6:	f819 0b01 	ldrb.w	r0, [r9], #1
   194ea:	4649      	mov	r1, r9
   194ec:	f7ff ff4c 	bl	19388 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   194f0:	2807      	cmp	r0, #7
   194f2:	f240 80a0 	bls.w	19636 <ll_rl_add+0x16e>
	} else if (j >= ARRAY_SIZE(rl)) {
   194f6:	f89d 800f 	ldrb.w	r8, [sp, #15]
   194fa:	f1b8 0f07 	cmp.w	r8, #7
   194fe:	f200 808c 	bhi.w	1961a <ll_rl_add+0x152>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   19502:	eb08 0288 	add.w	r2, r8, r8, lsl #2
   19506:	00d2      	lsls	r2, r2, #3
   19508:	4c4d      	ldr	r4, [pc, #308]	; (19640 <ll_rl_add+0x178>)
   1950a:	f8d9 1000 	ldr.w	r1, [r9]
   1950e:	9201      	str	r2, [sp, #4]
   19510:	1c53      	adds	r3, r2, #1
	rl[i].id_addr_type = id_addr->type & 0x1;
   19512:	eb08 0a88 	add.w	sl, r8, r8, lsl #2
   19516:	50e1      	str	r1, [r4, r3]
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   19518:	4423      	add	r3, r4
   1951a:	f8b9 1004 	ldrh.w	r1, [r9, #4]
   1951e:	8099      	strh	r1, [r3, #4]
	rl[i].id_addr_type = id_addr->type & 0x1;
   19520:	7831      	ldrb	r1, [r6, #0]
   19522:	f814 303a 	ldrb.w	r3, [r4, sl, lsl #3]
   19526:	4693      	mov	fp, r2
   19528:	f361 1386 	bfi	r3, r1, #6, #1
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   1952c:	4628      	mov	r0, r5
   1952e:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
   19530:	54a3      	strb	r3, [r4, r2]
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   19532:	f7f5 fc73 	bl	ee1c <mem_nz>
   19536:	f814 300b 	ldrb.w	r3, [r4, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   1953a:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   1953c:	f360 0382 	bfi	r3, r0, #2, #1
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   19540:	4638      	mov	r0, r7
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   19542:	f804 300b 	strb.w	r3, [r4, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   19546:	f7f5 fc69 	bl	ee1c <mem_nz>
   1954a:	f814 300b 	ldrb.w	r3, [r4, fp]
	if (rl[i].pirk) {
   1954e:	9a01      	ldr	r2, [sp, #4]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   19550:	f000 0001 	and.w	r0, r0, #1
   19554:	f360 03c3 	bfi	r3, r0, #3, #1
	if (rl[i].pirk) {
   19558:	f013 0f04 	tst.w	r3, #4
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   1955c:	f804 300b 	strb.w	r3, [r4, fp]
	rl[i].id_addr_type = id_addr->type & 0x1;
   19560:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
   19564:	ea4f 0b88 	mov.w	fp, r8, lsl #2
	if (rl[i].pirk) {
   19568:	d01a      	beq.n	195a0 <ll_rl_add+0xd8>
		rl[i].pirk_idx = peer_irk_count;
   1956a:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 1964c <ll_rl_add+0x184>
		peer_irk_rl_ids[peer_irk_count] = i;
   1956e:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 19650 <ll_rl_add+0x188>
		rl[i].pirk_idx = peer_irk_count;
   19572:	f89e 1000 	ldrb.w	r1, [lr]
   19576:	4b33      	ldr	r3, [pc, #204]	; (19644 <ll_rl_add+0x17c>)
		peer_irk_rl_ids[peer_irk_count] = i;
   19578:	f80c 8001 	strb.w	r8, [ip, r1]
		rl[i].pirk_idx = peer_irk_count;
   1957c:	f88a 1017 	strb.w	r1, [sl, #23]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, IRK_SIZE);
   19580:	eb03 1c01 	add.w	ip, r3, r1, lsl #4
   19584:	3101      	adds	r1, #1
	psrc += length - 1;
   19586:	f105 030f 	add.w	r3, r5, #15
   1958a:	f88e 1000 	strb.w	r1, [lr]
	for (; length > 0; length--) {
   1958e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   19592:	3d01      	subs	r5, #1
		*pdst++ = *psrc--;
   19594:	f813 1901 	ldrb.w	r1, [r3], #-1
   19598:	f80c 1f01 	strb.w	r1, [ip, #1]!
	for (; length > 0; length--) {
   1959c:	429d      	cmp	r5, r3
   1959e:	d1f9      	bne.n	19594 <ll_rl_add+0xcc>
	if (rl[i].lirk) {
   195a0:	b198      	cbz	r0, 195ca <ll_rl_add+0x102>
		memcpy(rl[i].local_irk, lirk, IRK_SIZE);
   195a2:	1dd3      	adds	r3, r2, #7
   195a4:	6838      	ldr	r0, [r7, #0]
   195a6:	f8d7 e004 	ldr.w	lr, [r7, #4]
   195aa:	f8d7 c008 	ldr.w	ip, [r7, #8]
   195ae:	68fd      	ldr	r5, [r7, #12]
   195b0:	50e0      	str	r0, [r4, r3]
		rl[i].local_rpa = NULL;
   195b2:	eb0b 0108 	add.w	r1, fp, r8
		memcpy(rl[i].local_irk, lirk, IRK_SIZE);
   195b6:	4423      	add	r3, r4
		rl[i].local_rpa = NULL;
   195b8:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
   195bc:	2000      	movs	r0, #0
   195be:	f8c3 e004 	str.w	lr, [r3, #4]
   195c2:	f8c3 c008 	str.w	ip, [r3, #8]
   195c6:	60dd      	str	r5, [r3, #12]
   195c8:	6248      	str	r0, [r1, #36]	; 0x24
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   195ca:	f102 0318 	add.w	r3, r2, #24
   195ce:	18e2      	adds	r2, r4, r3
__ssp_bos_icheck3(memset, void *, int)
   195d0:	2700      	movs	r7, #0
   195d2:	50e7      	str	r7, [r4, r3]
   195d4:	eb0b 0508 	add.w	r5, fp, r8
   195d8:	8097      	strh	r7, [r2, #4]
	rl[i].rpas_ready = 0U;
   195da:	f814 3035 	ldrb.w	r3, [r4, r5, lsl #3]
   195de:	00ed      	lsls	r5, r5, #3
   195e0:	f023 0312 	bic.w	r3, r3, #18
   195e4:	5563      	strb	r3, [r4, r5]
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   195e6:	4649      	mov	r1, r9
   195e8:	7830      	ldrb	r0, [r6, #0]
   195ea:	463a      	mov	r2, r7
   195ec:	f7ff fb7a 	bl	18ce4 <wl_find>
	if (j < ARRAY_SIZE(wl)) {
   195f0:	2807      	cmp	r0, #7
   195f2:	d916      	bls.n	19622 <ll_rl_add+0x15a>
		rl[i].wl = 0U;
   195f4:	5d63      	ldrb	r3, [r4, r5]
   195f6:	f367 1345 	bfi	r3, r7, #5, #1
   195fa:	5563      	strb	r3, [r4, r5]
	rl[i].taken = 1U;
   195fc:	44d8      	add	r8, fp
	return 0;
   195fe:	2000      	movs	r0, #0
	rl[i].taken = 1U;
   19600:	f814 3038 	ldrb.w	r3, [r4, r8, lsl #3]
   19604:	f043 0301 	orr.w	r3, r3, #1
   19608:	f804 3038 	strb.w	r3, [r4, r8, lsl #3]
}
   1960c:	b005      	add	sp, #20
   1960e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   19612:	200c      	movs	r0, #12
}
   19614:	b005      	add	sp, #20
   19616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1961a:	2007      	movs	r0, #7
}
   1961c:	b005      	add	sp, #20
   1961e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		wl[j].rl_idx = i;
   19622:	4a09      	ldr	r2, [pc, #36]	; (19648 <ll_rl_add+0x180>)
		rl[i].wl = 1U;
   19624:	5d63      	ldrb	r3, [r4, r5]
		wl[j].rl_idx = i;
   19626:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
		rl[i].wl = 1U;
   1962a:	f043 0320 	orr.w	r3, r3, #32
   1962e:	5563      	strb	r3, [r4, r5]
		wl[j].rl_idx = i;
   19630:	f880 8001 	strb.w	r8, [r0, #1]
		rl[i].wl = 1U;
   19634:	e7e2      	b.n	195fc <ll_rl_add+0x134>
		return BT_HCI_ERR_INVALID_PARAM;
   19636:	2012      	movs	r0, #18
}
   19638:	b005      	add	sp, #20
   1963a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1963e:	bf00      	nop
   19640:	20001ad4 	.word	0x20001ad4
   19644:	20001a54 	.word	0x20001a54
   19648:	20001c4c 	.word	0x20001c4c
   1964c:	20002aa8 	.word	0x20002aa8
   19650:	20001a4c 	.word	0x20001a4c

00019654 <ll_rl_remove>:
{
   19654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19658:	b083      	sub	sp, #12
   1965a:	4605      	mov	r5, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1965c:	2000      	movs	r0, #0
{
   1965e:	9500      	str	r5, [sp, #0]
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   19660:	f7fa fb22 	bl	13ca8 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   19664:	2800      	cmp	r0, #0
   19666:	d160      	bne.n	1972a <ll_rl_remove+0xd6>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   19668:	462f      	mov	r7, r5
   1966a:	4602      	mov	r2, r0
   1966c:	4604      	mov	r4, r0
   1966e:	f817 0b01 	ldrb.w	r0, [r7], #1
   19672:	9500      	str	r5, [sp, #0]
   19674:	4639      	mov	r1, r7
   19676:	f7ff fe87 	bl	19388 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1967a:	2807      	cmp	r0, #7
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1967c:	4606      	mov	r6, r0
	if (i < ARRAY_SIZE(rl)) {
   1967e:	d903      	bls.n	19688 <ll_rl_remove+0x34>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   19680:	2002      	movs	r0, #2
}
   19682:	b003      	add	sp, #12
   19684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (rl[i].pirk) {
   19688:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 19748 <ll_rl_remove+0xf4>
   1968c:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   19690:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   19694:	f818 3033 	ldrb.w	r3, [r8, r3, lsl #3]
   19698:	075d      	lsls	r5, r3, #29
   1969a:	ea4f 0980 	mov.w	r9, r0, lsl #2
   1969e:	d52c      	bpl.n	196fa <ll_rl_remove+0xa6>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   196a0:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 1974c <ll_rl_remove+0xf8>
   196a4:	f89e c000 	ldrb.w	ip, [lr]
   196a8:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
			if (pj && pi != pj) {
   196ac:	f01c 0bff 	ands.w	fp, ip, #255	; 0xff
   196b0:	d021      	beq.n	196f6 <ll_rl_remove+0xa2>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   196b2:	7dd3      	ldrb	r3, [r2, #23]
   196b4:	9301      	str	r3, [sp, #4]
			if (pj && pi != pj) {
   196b6:	455b      	cmp	r3, fp
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   196b8:	461d      	mov	r5, r3
			if (pj && pi != pj) {
   196ba:	d01c      	beq.n	196f6 <ll_rl_remove+0xa2>
				memcpy(peer_irks[pi], peer_irks[pj], IRK_SIZE);
   196bc:	f8df a090 	ldr.w	sl, [pc, #144]	; 19750 <ll_rl_remove+0xfc>
   196c0:	eb0a 130b 	add.w	r3, sl, fp, lsl #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   196c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   196c6:	eb0a 1a05 	add.w	sl, sl, r5, lsl #4
   196ca:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
   196ce:	9d00      	ldr	r5, [sp, #0]
					if (rl[k].taken && rl[k].pirk &&
   196d0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   196d4:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   196d8:	f818 3033 	ldrb.w	r3, [r8, r3, lsl #3]
   196dc:	07d8      	lsls	r0, r3, #31
   196de:	b2e1      	uxtb	r1, r4
   196e0:	f104 0401 	add.w	r4, r4, #1
   196e4:	d504      	bpl.n	196f0 <ll_rl_remove+0x9c>
   196e6:	075b      	lsls	r3, r3, #29
   196e8:	d502      	bpl.n	196f0 <ll_rl_remove+0x9c>
   196ea:	7dd3      	ldrb	r3, [r2, #23]
   196ec:	455b      	cmp	r3, fp
   196ee:	d020      	beq.n	19732 <ll_rl_remove+0xde>
				for (k = 0U;
   196f0:	2c08      	cmp	r4, #8
   196f2:	d1ed      	bne.n	196d0 <ll_rl_remove+0x7c>
   196f4:	9500      	str	r5, [sp, #0]
			peer_irk_count--;
   196f6:	f88e c000 	strb.w	ip, [lr]
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   196fa:	9b00      	ldr	r3, [sp, #0]
   196fc:	4639      	mov	r1, r7
   196fe:	7818      	ldrb	r0, [r3, #0]
   19700:	2200      	movs	r2, #0
   19702:	f7ff faef 	bl	18ce4 <wl_find>
		if (j < ARRAY_SIZE(wl)) {
   19706:	2807      	cmp	r0, #7
   19708:	d804      	bhi.n	19714 <ll_rl_remove+0xc0>
			wl[j].rl_idx = FILTER_IDX_NONE;
   1970a:	4b0d      	ldr	r3, [pc, #52]	; (19740 <ll_rl_remove+0xec>)
   1970c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   19710:	23ff      	movs	r3, #255	; 0xff
   19712:	7043      	strb	r3, [r0, #1]
		rl[i].taken = 0U;
   19714:	444e      	add	r6, r9
		return 0;
   19716:	2000      	movs	r0, #0
		rl[i].taken = 0U;
   19718:	f818 3036 	ldrb.w	r3, [r8, r6, lsl #3]
   1971c:	f36f 0300 	bfc	r3, #0, #1
   19720:	f808 3036 	strb.w	r3, [r8, r6, lsl #3]
}
   19724:	b003      	add	sp, #12
   19726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1972a:	200c      	movs	r0, #12
}
   1972c:	b003      	add	sp, #12
   1972e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						rl[k].pirk_idx = pi;
   19732:	9801      	ldr	r0, [sp, #4]
						peer_irk_rl_ids[pi] = k;
   19734:	4b03      	ldr	r3, [pc, #12]	; (19744 <ll_rl_remove+0xf0>)
   19736:	9500      	str	r5, [sp, #0]
   19738:	5419      	strb	r1, [r3, r0]
						rl[k].pirk_idx = pi;
   1973a:	75d0      	strb	r0, [r2, #23]
						break;
   1973c:	e7db      	b.n	196f6 <ll_rl_remove+0xa2>
   1973e:	bf00      	nop
   19740:	20001c4c 	.word	0x20001c4c
   19744:	20001a4c 	.word	0x20001a4c
   19748:	20001ad4 	.word	0x20001ad4
   1974c:	20002aa8 	.word	0x20002aa8
   19750:	20001a54 	.word	0x20001a54

00019754 <ll_rl_crpa_set>:
{
   19754:	b538      	push	{r3, r4, r5, lr}
   19756:	461c      	mov	r4, r3
	if ((crpa[5] & 0xc0) == 0x40) {
   19758:	795b      	ldrb	r3, [r3, #5]
   1975a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1975e:	2b40      	cmp	r3, #64	; 0x40
   19760:	d000      	beq.n	19764 <ll_rl_crpa_set+0x10>
}
   19762:	bd38      	pop	{r3, r4, r5, pc}
		if (id_addr) {
   19764:	b119      	cbz	r1, 1976e <ll_rl_crpa_set+0x1a>
			rl_idx = ull_filter_rl_find(id_addr_type, id_addr, NULL);
   19766:	2200      	movs	r2, #0
   19768:	f7ff fe0e 	bl	19388 <ull_filter_rl_find>
   1976c:	4602      	mov	r2, r0
		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   1976e:	2a07      	cmp	r2, #7
   19770:	d8f7      	bhi.n	19762 <ll_rl_crpa_set+0xe>
   19772:	4b08      	ldr	r3, [pc, #32]	; (19794 <ll_rl_crpa_set+0x40>)
   19774:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   19778:	f813 1031 	ldrb.w	r1, [r3, r1, lsl #3]
   1977c:	07c9      	lsls	r1, r1, #31
   1977e:	d5f0      	bpl.n	19762 <ll_rl_crpa_set+0xe>
			memcpy(rl[rl_idx].curr_rpa.val, crpa,
   19780:	2028      	movs	r0, #40	; 0x28
   19782:	2118      	movs	r1, #24
   19784:	fb10 1202 	smlabb	r2, r0, r2, r1
   19788:	6820      	ldr	r0, [r4, #0]
   1978a:	5098      	str	r0, [r3, r2]
   1978c:	4413      	add	r3, r2
   1978e:	88a2      	ldrh	r2, [r4, #4]
   19790:	809a      	strh	r2, [r3, #4]
}
   19792:	bd38      	pop	{r3, r4, r5, pc}
   19794:	20001ad4 	.word	0x20001ad4

00019798 <ll_rl_crpa_get>:
{
   19798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1979a:	4603      	mov	r3, r0
{
   1979c:	460d      	mov	r5, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1979e:	f813 0b01 	ldrb.w	r0, [r3], #1
   197a2:	2200      	movs	r2, #0
   197a4:	4619      	mov	r1, r3
   197a6:	f7ff fdef 	bl	19388 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl) &&
   197aa:	2807      	cmp	r0, #7
   197ac:	d901      	bls.n	197b2 <ll_rl_crpa_get+0x1a>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   197ae:	2002      	movs	r0, #2
}
   197b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   197b2:	4f09      	ldr	r7, [pc, #36]	; (197d8 <ll_rl_crpa_get+0x40>)
   197b4:	2428      	movs	r4, #40	; 0x28
   197b6:	2318      	movs	r3, #24
   197b8:	fb14 3400 	smlabb	r4, r4, r0, r3
   197bc:	193e      	adds	r6, r7, r4
   197be:	4630      	mov	r0, r6
   197c0:	2106      	movs	r1, #6
   197c2:	f7f5 fb2b 	bl	ee1c <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   197c6:	2800      	cmp	r0, #0
   197c8:	d0f1      	beq.n	197ae <ll_rl_crpa_get+0x16>
   197ca:	5938      	ldr	r0, [r7, r4]
   197cc:	6028      	str	r0, [r5, #0]
   197ce:	88b3      	ldrh	r3, [r6, #4]
   197d0:	80ab      	strh	r3, [r5, #4]
		return 0;
   197d2:	2000      	movs	r0, #0
}
   197d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   197d6:	bf00      	nop
   197d8:	20001ad4 	.word	0x20001ad4

000197dc <ll_rl_lrpa_get>:
{
   197dc:	b510      	push	{r4, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   197de:	4603      	mov	r3, r0
{
   197e0:	460c      	mov	r4, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   197e2:	f813 0b01 	ldrb.w	r0, [r3], #1
   197e6:	2200      	movs	r2, #0
   197e8:	4619      	mov	r1, r3
   197ea:	f7ff fdcd 	bl	19388 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   197ee:	2807      	cmp	r0, #7
   197f0:	d901      	bls.n	197f6 <ll_rl_lrpa_get+0x1a>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   197f2:	2002      	movs	r0, #2
}
   197f4:	bd10      	pop	{r4, pc}
		bt_addr_copy(lrpa, rl[i].local_rpa);
   197f6:	4b06      	ldr	r3, [pc, #24]	; (19810 <ll_rl_lrpa_get+0x34>)
   197f8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   197fc:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
		return 0;
   19800:	2000      	movs	r0, #0
   19802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19804:	681a      	ldr	r2, [r3, #0]
   19806:	6022      	str	r2, [r4, #0]
   19808:	889b      	ldrh	r3, [r3, #4]
   1980a:	80a3      	strh	r3, [r4, #4]
}
   1980c:	bd10      	pop	{r4, pc}
   1980e:	bf00      	nop
   19810:	20001ad4 	.word	0x20001ad4

00019814 <ll_priv_mode_set>:
{
   19814:	b570      	push	{r4, r5, r6, lr}
   19816:	4605      	mov	r5, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   19818:	2000      	movs	r0, #0
{
   1981a:	460e      	mov	r6, r1
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1981c:	f7fa fa44 	bl	13ca8 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   19820:	b968      	cbnz	r0, 1983e <ll_priv_mode_set+0x2a>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   19822:	4629      	mov	r1, r5
   19824:	4602      	mov	r2, r0
   19826:	4604      	mov	r4, r0
   19828:	f811 0b01 	ldrb.w	r0, [r1], #1
   1982c:	f7ff fdac 	bl	19388 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   19830:	2807      	cmp	r0, #7
   19832:	d81c      	bhi.n	1986e <ll_priv_mode_set+0x5a>
		switch (mode) {
   19834:	b186      	cbz	r6, 19858 <ll_priv_mode_set+0x44>
   19836:	2e01      	cmp	r6, #1
   19838:	d003      	beq.n	19842 <ll_priv_mode_set+0x2e>
   1983a:	2012      	movs	r0, #18
}
   1983c:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1983e:	200c      	movs	r0, #12
}
   19840:	bd70      	pop	{r4, r5, r6, pc}
			rl[i].dev = 1U;
   19842:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   19846:	490b      	ldr	r1, [pc, #44]	; (19874 <ll_priv_mode_set+0x60>)
   19848:	f811 2033 	ldrb.w	r2, [r1, r3, lsl #3]
   1984c:	f042 0210 	orr.w	r2, r2, #16
   19850:	f801 2033 	strb.w	r2, [r1, r3, lsl #3]
	return 0;
   19854:	4620      	mov	r0, r4
}
   19856:	bd70      	pop	{r4, r5, r6, pc}
			rl[i].dev = 0U;
   19858:	4b06      	ldr	r3, [pc, #24]	; (19874 <ll_priv_mode_set+0x60>)
   1985a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1985e:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
   19862:	f366 1204 	bfi	r2, r6, #4, #1
   19866:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
	return 0;
   1986a:	4630      	mov	r0, r6
}
   1986c:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1986e:	2002      	movs	r0, #2
}
   19870:	bd70      	pop	{r4, r5, r6, pc}
   19872:	bf00      	nop
   19874:	20001ad4 	.word	0x20001ad4

00019878 <ull_filter_reset>:
	wl_anon = 0U;
   19878:	4a33      	ldr	r2, [pc, #204]	; (19948 <ull_filter_reset+0xd0>)
   1987a:	4934      	ldr	r1, [pc, #208]	; (1994c <ull_filter_reset+0xd4>)
{
   1987c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	wl_anon = 0U;
   1987e:	2300      	movs	r3, #0
   19880:	4c33      	ldr	r4, [pc, #204]	; (19950 <ull_filter_reset+0xd8>)
   19882:	7013      	strb	r3, [r2, #0]
		uint8_t j = wl[i].rl_idx;
   19884:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   19888:	7852      	ldrb	r2, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   1988a:	2a07      	cmp	r2, #7
			rl[j].wl = 0U;
   1988c:	eb02 0582 	add.w	r5, r2, r2, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   19890:	d805      	bhi.n	1989e <ull_filter_reset+0x26>
			rl[j].wl = 0U;
   19892:	f811 2035 	ldrb.w	r2, [r1, r5, lsl #3]
   19896:	f36f 1245 	bfc	r2, #5, #1
   1989a:	f801 2035 	strb.w	r2, [r1, r5, lsl #3]
		wl[i].taken = 0U;
   1989e:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   198a2:	f36f 0200 	bfc	r2, #0, #1
   198a6:	f804 2033 	strb.w	r2, [r4, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   198aa:	3301      	adds	r3, #1
   198ac:	2b08      	cmp	r3, #8
   198ae:	d1e9      	bne.n	19884 <ull_filter_reset+0xc>
		rl[i].taken = 0U;
   198b0:	780f      	ldrb	r7, [r1, #0]
   198b2:	f891 5028 	ldrb.w	r5, [r1, #40]	; 0x28
   198b6:	f891 4050 	ldrb.w	r4, [r1, #80]	; 0x50
   198ba:	f891 2078 	ldrb.w	r2, [r1, #120]	; 0x78
   198be:	f891 60a0 	ldrb.w	r6, [r1, #160]	; 0xa0
	rl_enable = 0U;
   198c2:	2300      	movs	r3, #0
		rl[i].taken = 0U;
   198c4:	f363 0700 	bfi	r7, r3, #0, #1
   198c8:	700f      	strb	r7, [r1, #0]
	rl_enable = 0U;
   198ca:	4f22      	ldr	r7, [pc, #136]	; (19954 <ull_filter_reset+0xdc>)
		rl[i].taken = 0U;
   198cc:	f363 0500 	bfi	r5, r3, #0, #1
   198d0:	f363 0400 	bfi	r4, r3, #0, #1
   198d4:	f363 0200 	bfi	r2, r3, #0, #1
	rl_enable = 0U;
   198d8:	703b      	strb	r3, [r7, #0]
		rl[i].taken = 0U;
   198da:	f881 5028 	strb.w	r5, [r1, #40]	; 0x28
	peer_irk_count = 0U;
   198de:	4f1e      	ldr	r7, [pc, #120]	; (19958 <ull_filter_reset+0xe0>)
		rl[i].taken = 0U;
   198e0:	f891 50c8 	ldrb.w	r5, [r1, #200]	; 0xc8
   198e4:	f881 4050 	strb.w	r4, [r1, #80]	; 0x50
   198e8:	f881 2078 	strb.w	r2, [r1, #120]	; 0x78
   198ec:	f891 40f0 	ldrb.w	r4, [r1, #240]	; 0xf0
   198f0:	f891 2118 	ldrb.w	r2, [r1, #280]	; 0x118
	peer_irk_count = 0U;
   198f4:	703b      	strb	r3, [r7, #0]
		rl[i].taken = 0U;
   198f6:	f363 0600 	bfi	r6, r3, #0, #1
   198fa:	f363 0500 	bfi	r5, r3, #0, #1
   198fe:	f363 0400 	bfi	r4, r3, #0, #1
   19902:	f363 0200 	bfi	r2, r3, #0, #1
   19906:	f881 60a0 	strb.w	r6, [r1, #160]	; 0xa0
	rpa_last_ms = -1;
   1990a:	4b14      	ldr	r3, [pc, #80]	; (1995c <ull_filter_reset+0xe4>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   1990c:	4e14      	ldr	r6, [pc, #80]	; (19960 <ull_filter_reset+0xe8>)
   1990e:	4f15      	ldr	r7, [pc, #84]	; (19964 <ull_filter_reset+0xec>)
		rl[i].taken = 0U;
   19910:	f881 50c8 	strb.w	r5, [r1, #200]	; 0xc8
   19914:	f881 40f0 	strb.w	r4, [r1, #240]	; 0xf0
	rpa_last_ms = -1;
   19918:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1991c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   19920:	e9c3 4500 	strd	r4, r5, [r3]
		rl[i].taken = 0U;
   19924:	f881 2118 	strb.w	r2, [r1, #280]	; 0x118
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   19928:	6037      	str	r7, [r6, #0]
	if (init) {
   1992a:	b128      	cbz	r0, 19938 <ull_filter_reset+0xc0>
}
   1992c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_work_init_delayable(&work->work, handler);
   19930:	490d      	ldr	r1, [pc, #52]	; (19968 <ull_filter_reset+0xf0>)
   19932:	480e      	ldr	r0, [pc, #56]	; (1996c <ull_filter_reset+0xf4>)
   19934:	f010 b97e 	b.w	29c34 <k_work_init_delayable>
	return k_work_delayable_busy_get(dwork) != 0;
   19938:	480c      	ldr	r0, [pc, #48]	; (1996c <ull_filter_reset+0xf4>)
   1993a:	f010 f987 	bl	29c4c <k_work_delayable_busy_get>
   1993e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	int rc = k_work_cancel_delayable(&work->work);
   19942:	480a      	ldr	r0, [pc, #40]	; (1996c <ull_filter_reset+0xf4>)
   19944:	f010 b996 	b.w	29c74 <k_work_cancel_delayable>
   19948:	20002aaa 	.word	0x20002aaa
   1994c:	20001ad4 	.word	0x20001ad4
   19950:	20001c4c 	.word	0x20001c4c
   19954:	20002aa9 	.word	0x20002aa9
   19958:	20002aa8 	.word	0x20002aa8
   1995c:	20000948 	.word	0x20000948
   19960:	20001c48 	.word	0x20001c48
   19964:	000dbba0 	.word	0x000dbba0
   19968:	000192bd 	.word	0x000192bd
   1996c:	20000950 	.word	0x20000950

00019970 <ull_filter_lll_lrpa_used>:
	return rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk;
   19970:	2807      	cmp	r0, #7
   19972:	d807      	bhi.n	19984 <ull_filter_lll_lrpa_used+0x14>
   19974:	4b04      	ldr	r3, [pc, #16]	; (19988 <ull_filter_lll_lrpa_used+0x18>)
   19976:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1997a:	f813 0030 	ldrb.w	r0, [r3, r0, lsl #3]
   1997e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   19982:	4770      	bx	lr
   19984:	2000      	movs	r0, #0
}
   19986:	4770      	bx	lr
   19988:	20001ad4 	.word	0x20001ad4

0001998c <ull_filter_lll_irks_get>:
	*count = peer_irk_count;
   1998c:	4b02      	ldr	r3, [pc, #8]	; (19998 <ull_filter_lll_irks_get+0xc>)
   1998e:	781b      	ldrb	r3, [r3, #0]
   19990:	7003      	strb	r3, [r0, #0]
}
   19992:	4802      	ldr	r0, [pc, #8]	; (1999c <ull_filter_lll_irks_get+0x10>)
   19994:	4770      	bx	lr
   19996:	bf00      	nop
   19998:	20002aa8 	.word	0x20002aa8
   1999c:	20001a54 	.word	0x20001a54

000199a0 <ull_filter_lll_rl_irk_idx>:
{
   199a0:	b510      	push	{r4, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   199a2:	4b20      	ldr	r3, [pc, #128]	; (19a24 <ull_filter_lll_rl_irk_idx+0x84>)
   199a4:	781b      	ldrb	r3, [r3, #0]
   199a6:	4283      	cmp	r3, r0
{
   199a8:	4604      	mov	r4, r0
	LL_ASSERT(irkmatch_id < peer_irk_count);
   199aa:	d90c      	bls.n	199c6 <ull_filter_lll_rl_irk_idx+0x26>
	i = peer_irk_rl_ids[irkmatch_id];
   199ac:	4b1e      	ldr	r3, [pc, #120]	; (19a28 <ull_filter_lll_rl_irk_idx+0x88>)
   199ae:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   199b0:	2c07      	cmp	r4, #7
   199b2:	d819      	bhi.n	199e8 <ull_filter_lll_rl_irk_idx+0x48>
	LL_ASSERT(rl[i].taken);
   199b4:	4b1d      	ldr	r3, [pc, #116]	; (19a2c <ull_filter_lll_rl_irk_idx+0x8c>)
   199b6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   199ba:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   199be:	07db      	lsls	r3, r3, #31
   199c0:	d520      	bpl.n	19a04 <ull_filter_lll_rl_irk_idx+0x64>
}
   199c2:	4620      	mov	r0, r4
   199c4:	bd10      	pop	{r4, pc}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   199c6:	4a1a      	ldr	r2, [pc, #104]	; (19a30 <ull_filter_lll_rl_irk_idx+0x90>)
   199c8:	491a      	ldr	r1, [pc, #104]	; (19a34 <ull_filter_lll_rl_irk_idx+0x94>)
   199ca:	481b      	ldr	r0, [pc, #108]	; (19a38 <ull_filter_lll_rl_irk_idx+0x98>)
   199cc:	f240 23c6 	movw	r3, #710	; 0x2c6
   199d0:	f00a fe08 	bl	245e4 <printk>
   199d4:	4040      	eors	r0, r0
   199d6:	f380 8811 	msr	BASEPRI, r0
   199da:	f04f 0003 	mov.w	r0, #3
   199de:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   199e0:	4b11      	ldr	r3, [pc, #68]	; (19a28 <ull_filter_lll_rl_irk_idx+0x88>)
   199e2:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   199e4:	2c07      	cmp	r4, #7
   199e6:	d9e5      	bls.n	199b4 <ull_filter_lll_rl_irk_idx+0x14>
   199e8:	4a11      	ldr	r2, [pc, #68]	; (19a30 <ull_filter_lll_rl_irk_idx+0x90>)
   199ea:	4914      	ldr	r1, [pc, #80]	; (19a3c <ull_filter_lll_rl_irk_idx+0x9c>)
   199ec:	4812      	ldr	r0, [pc, #72]	; (19a38 <ull_filter_lll_rl_irk_idx+0x98>)
   199ee:	f44f 7332 	mov.w	r3, #712	; 0x2c8
   199f2:	f00a fdf7 	bl	245e4 <printk>
   199f6:	4040      	eors	r0, r0
   199f8:	f380 8811 	msr	BASEPRI, r0
   199fc:	f04f 0003 	mov.w	r0, #3
   19a00:	df02      	svc	2
   19a02:	e7d7      	b.n	199b4 <ull_filter_lll_rl_irk_idx+0x14>
	LL_ASSERT(rl[i].taken);
   19a04:	4a0a      	ldr	r2, [pc, #40]	; (19a30 <ull_filter_lll_rl_irk_idx+0x90>)
   19a06:	490e      	ldr	r1, [pc, #56]	; (19a40 <ull_filter_lll_rl_irk_idx+0xa0>)
   19a08:	480b      	ldr	r0, [pc, #44]	; (19a38 <ull_filter_lll_rl_irk_idx+0x98>)
   19a0a:	f240 23c9 	movw	r3, #713	; 0x2c9
   19a0e:	f00a fde9 	bl	245e4 <printk>
   19a12:	4040      	eors	r0, r0
   19a14:	f380 8811 	msr	BASEPRI, r0
   19a18:	f04f 0003 	mov.w	r0, #3
   19a1c:	df02      	svc	2
}
   19a1e:	4620      	mov	r0, r4
   19a20:	bd10      	pop	{r4, pc}
   19a22:	bf00      	nop
   19a24:	20002aa8 	.word	0x20002aa8
   19a28:	20001a4c 	.word	0x20001a4c
   19a2c:	20001ad4 	.word	0x20001ad4
   19a30:	0002b8dc 	.word	0x0002b8dc
   19a34:	0002bac0 	.word	0x0002bac0
   19a38:	0002b0c4 	.word	0x0002b0c4
   19a3c:	0002bae0 	.word	0x0002bae0
   19a40:	0002bab4 	.word	0x0002bab4

00019a44 <ull_filter_lll_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   19a44:	2807      	cmp	r0, #7
   19a46:	d823      	bhi.n	19a90 <ull_filter_lll_irk_whitelisted+0x4c>
{
   19a48:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(rl[rl_idx].taken);
   19a4a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   19a4e:	4e11      	ldr	r6, [pc, #68]	; (19a94 <ull_filter_lll_irk_whitelisted+0x50>)
   19a50:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   19a54:	07db      	lsls	r3, r3, #31
   19a56:	4604      	mov	r4, r0
   19a58:	ea4f 0580 	mov.w	r5, r0, lsl #2
   19a5c:	d505      	bpl.n	19a6a <ull_filter_lll_irk_whitelisted+0x26>
	return rl[rl_idx].wl;
   19a5e:	442c      	add	r4, r5
   19a60:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   19a64:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   19a68:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   19a6a:	4a0b      	ldr	r2, [pc, #44]	; (19a98 <ull_filter_lll_irk_whitelisted+0x54>)
   19a6c:	490b      	ldr	r1, [pc, #44]	; (19a9c <ull_filter_lll_irk_whitelisted+0x58>)
   19a6e:	480c      	ldr	r0, [pc, #48]	; (19aa0 <ull_filter_lll_irk_whitelisted+0x5c>)
   19a70:	f44f 7335 	mov.w	r3, #724	; 0x2d4
   19a74:	f00a fdb6 	bl	245e4 <printk>
   19a78:	4040      	eors	r0, r0
   19a7a:	f380 8811 	msr	BASEPRI, r0
   19a7e:	f04f 0003 	mov.w	r0, #3
   19a82:	df02      	svc	2
	return rl[rl_idx].wl;
   19a84:	442c      	add	r4, r5
   19a86:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   19a8a:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   19a8e:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   19a90:	2000      	movs	r0, #0
}
   19a92:	4770      	bx	lr
   19a94:	20001ad4 	.word	0x20001ad4
   19a98:	0002b8dc 	.word	0x0002b8dc
   19a9c:	0002b92c 	.word	0x0002b92c
   19aa0:	0002b0c4 	.word	0x0002b0c4

00019aa4 <ull_filter_lll_get>:
		return &wl_filter;
   19aa4:	4a03      	ldr	r2, [pc, #12]	; (19ab4 <ull_filter_lll_get+0x10>)
   19aa6:	4b04      	ldr	r3, [pc, #16]	; (19ab8 <ull_filter_lll_get+0x14>)
}
   19aa8:	2800      	cmp	r0, #0
   19aaa:	bf0c      	ite	eq
   19aac:	4610      	moveq	r0, r2
   19aae:	4618      	movne	r0, r3
   19ab0:	4770      	bx	lr
   19ab2:	bf00      	nop
   19ab4:	20001c14 	.word	0x20001c14
   19ab8:	20001c8c 	.word	0x20001c8c

00019abc <ull_filter_lll_rl_addr_allowed>:
	if (*rl_idx != FILTER_IDX_NONE) {
   19abc:	7813      	ldrb	r3, [r2, #0]
   19abe:	2bff      	cmp	r3, #255	; 0xff
   19ac0:	d11c      	bne.n	19afc <ull_filter_lll_rl_addr_allowed+0x40>
{
   19ac2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19ac6:	4d19      	ldr	r5, [pc, #100]	; (19b2c <ull_filter_lll_rl_addr_allowed+0x70>)
   19ac8:	4606      	mov	r6, r0
	if (*rl_idx != FILTER_IDX_NONE) {
   19aca:	2300      	movs	r3, #0
   19acc:	1faf      	subs	r7, r5, #6
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   19ace:	eb03 0483 	add.w	r4, r3, r3, lsl #2
   19ad2:	fa5f fe83 	uxtb.w	lr, r3
   19ad6:	f817 4034 	ldrb.w	r4, [r7, r4, lsl #3]
   19ada:	f014 0001 	ands.w	r0, r4, #1
   19ade:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   19ae2:	d003      	beq.n	19aec <ull_filter_lll_rl_addr_allowed+0x30>
   19ae4:	f3c4 1480 	ubfx	r4, r4, #6, #1
   19ae8:	42b4      	cmp	r4, r6
   19aea:	d009      	beq.n	19b00 <ull_filter_lll_rl_addr_allowed+0x44>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19aec:	3301      	adds	r3, #1
   19aee:	2b08      	cmp	r3, #8
   19af0:	f105 0528 	add.w	r5, r5, #40	; 0x28
   19af4:	d1eb      	bne.n	19ace <ull_filter_lll_rl_addr_allowed+0x12>
		return true;
   19af6:	2001      	movs	r0, #1
}
   19af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return true;
   19afc:	2001      	movs	r0, #1
}
   19afe:	4770      	bx	lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   19b00:	1fac      	subs	r4, r5, #6
   19b02:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
				if (addr[j] != id_addr[j]) {
   19b06:	f814 af01 	ldrb.w	sl, [r4, #1]!
   19b0a:	f818 9f01 	ldrb.w	r9, [r8, #1]!
   19b0e:	45ca      	cmp	sl, r9
   19b10:	d1ec      	bne.n	19aec <ull_filter_lll_rl_addr_allowed+0x30>
			for (j = 0U; j < BDADDR_SIZE; j++) {
   19b12:	42ac      	cmp	r4, r5
   19b14:	d1f7      	bne.n	19b06 <ull_filter_lll_rl_addr_allowed+0x4a>
				return !rl[i].pirk || rl[i].dev;
   19b16:	4463      	add	r3, ip
				*rl_idx = i;
   19b18:	f882 e000 	strb.w	lr, [r2]
				return !rl[i].pirk || rl[i].dev;
   19b1c:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   19b20:	075a      	lsls	r2, r3, #29
   19b22:	d5e9      	bpl.n	19af8 <ull_filter_lll_rl_addr_allowed+0x3c>
   19b24:	f3c3 1000 	ubfx	r0, r3, #4, #1
   19b28:	e7e6      	b.n	19af8 <ull_filter_lll_rl_addr_allowed+0x3c>
   19b2a:	bf00      	nop
   19b2c:	20001ada 	.word	0x20001ada

00019b30 <ull_filter_lll_rl_enabled>:
	return rl_enable;
   19b30:	4b02      	ldr	r3, [pc, #8]	; (19b3c <ull_filter_lll_rl_enabled+0xc>)
   19b32:	7818      	ldrb	r0, [r3, #0]
}
   19b34:	3800      	subs	r0, #0
   19b36:	bf18      	it	ne
   19b38:	2001      	movne	r0, #1
   19b3a:	4770      	bx	lr
   19b3c:	20002aa9 	.word	0x20002aa9

00019b40 <radio_nrf5_isr>:
static void mfy_ticker_job_idle_get(void *param);
static void ticker_op_job_disable(uint32_t status, void *op_context);
#endif
#endif /* CONFIG_BT_CTLR_LOW_LAT */

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   19b40:	4668      	mov	r0, sp
   19b42:	f020 0107 	bic.w	r1, r0, #7
   19b46:	468d      	mov	sp, r1
   19b48:	b501      	push	{r0, lr}
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_radio();

	isr_radio();
   19b4a:	f001 ffdd 	bl	1bb08 <isr_radio>

	ISR_DIRECT_PM();
   19b4e:	f7ec fa95 	bl	607c <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   19b52:	f7ed f81f 	bl	6b94 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   19b56:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   19b5a:	4685      	mov	sp, r0
   19b5c:	4770      	bx	lr
   19b5e:	bf00      	nop

00019b60 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(const void *arg)
{
   19b60:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	lll_prof_enter_ull_high();

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   19b62:	4b09      	ldr	r3, [pc, #36]	; (19b88 <rtc0_nrf5_isr+0x28>)
   19b64:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   19b68:	b93a      	cbnz	r2, 19b7a <rtc0_nrf5_isr+0x1a>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;

		ticker_trigger(0);
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   19b6a:	2001      	movs	r0, #1
   19b6c:	f7f5 fa38 	bl	efe0 <mayfly_run>

	lll_prof_exit_ull_low();
#endif

	DEBUG_TICKER_ISR(0);
}
   19b70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   19b74:	2002      	movs	r0, #2
   19b76:	f7f5 ba33 	b.w	efe0 <mayfly_run>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   19b7a:	2000      	movs	r0, #0
   19b7c:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   19b80:	f7f6 fbea 	bl	10358 <ticker_trigger>
   19b84:	e7f1      	b.n	19b6a <rtc0_nrf5_isr+0xa>
   19b86:	bf00      	nop
   19b88:	4000b000 	.word	0x4000b000

00019b8c <swi_lll_nrf5_isr>:
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_lll();

	mayfly_run(TICKER_USER_ID_LLL);
   19b8c:	2000      	movs	r0, #0
   19b8e:	f7f5 ba27 	b.w	efe0 <mayfly_run>
   19b92:	bf00      	nop

00019b94 <isr_race>:
}

static void isr_race(void *param)
{
	/* NOTE: lll_disable could have a race with ... */
	radio_status_reset();
   19b94:	f002 b8d8 	b.w	1bd48 <radio_status_reset>

00019b98 <ticker_stop_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   19b98:	2801      	cmp	r0, #1
   19b9a:	d800      	bhi.n	19b9e <ticker_stop_op_cb+0x6>
   19b9c:	4770      	bx	lr
{
   19b9e:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   19ba0:	4a06      	ldr	r2, [pc, #24]	; (19bbc <ticker_stop_op_cb+0x24>)
   19ba2:	4907      	ldr	r1, [pc, #28]	; (19bc0 <ticker_stop_op_cb+0x28>)
   19ba4:	4807      	ldr	r0, [pc, #28]	; (19bc4 <ticker_stop_op_cb+0x2c>)
   19ba6:	f240 23d5 	movw	r3, #725	; 0x2d5
   19baa:	f00a fd1b 	bl	245e4 <printk>
   19bae:	4040      	eors	r0, r0
   19bb0:	f380 8811 	msr	BASEPRI, r0
   19bb4:	f04f 0003 	mov.w	r0, #3
   19bb8:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   19bba:	bd08      	pop	{r3, pc}
   19bbc:	0002bafc 	.word	0x0002bafc
   19bc0:	0002bb44 	.word	0x0002bb44
   19bc4:	0002b0c4 	.word	0x0002b0c4

00019bc8 <ticker_start_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   19bc8:	2801      	cmp	r0, #1
   19bca:	d800      	bhi.n	19bce <ticker_start_op_cb+0x6>
   19bcc:	4770      	bx	lr
{
   19bce:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   19bd0:	4a06      	ldr	r2, [pc, #24]	; (19bec <ticker_start_op_cb+0x24>)
   19bd2:	4907      	ldr	r1, [pc, #28]	; (19bf0 <ticker_start_op_cb+0x28>)
   19bd4:	4807      	ldr	r0, [pc, #28]	; (19bf4 <ticker_start_op_cb+0x2c>)
   19bd6:	f44f 7338 	mov.w	r3, #736	; 0x2e0
   19bda:	f00a fd03 	bl	245e4 <printk>
   19bde:	4040      	eors	r0, r0
   19be0:	f380 8811 	msr	BASEPRI, r0
   19be4:	f04f 0003 	mov.w	r0, #3
   19be8:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   19bea:	bd08      	pop	{r3, pc}
   19bec:	0002bafc 	.word	0x0002bafc
   19bf0:	0002bb44 	.word	0x0002bb44
   19bf4:	0002b0c4 	.word	0x0002b0c4

00019bf8 <preempt_ticker_start.isra.0>:

static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   19bf8:	b530      	push	{r4, r5, lr}
	preempt_to = MAX(evt->ticks_active_to_start,
			 evt->ticks_xtal_to_start) -
			 evt->ticks_preempt_to_start;

	/* Setup pre empt timeout */
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   19bfa:	2200      	movs	r2, #0
static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   19bfc:	b08b      	sub	sp, #44	; 0x2c
	evt = HDR_LLL2EVT(prepare_param->param);
   19bfe:	680b      	ldr	r3, [r1, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   19c00:	4c15      	ldr	r4, [pc, #84]	; (19c58 <preempt_ticker_start.isra.0+0x60>)
   19c02:	4916      	ldr	r1, [pc, #88]	; (19c5c <preempt_ticker_start.isra.0+0x64>)
   19c04:	9208      	str	r2, [sp, #32]
   19c06:	e9cd 2203 	strd	r2, r2, [sp, #12]
   19c0a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   19c0e:	9206      	str	r2, [sp, #24]
   19c10:	9407      	str	r4, [sp, #28]
   19c12:	9105      	str	r1, [sp, #20]
	preempt_to = MAX(evt->ticks_active_to_start,
   19c14:	e9d3 5400 	ldrd	r5, r4, [r3]
   19c18:	6899      	ldr	r1, [r3, #8]
   19c1a:	42a5      	cmp	r5, r4
   19c1c:	bf2c      	ite	cs
   19c1e:	ebc1 0105 	rsbcs	r1, r1, r5
   19c22:	ebc1 0104 	rsbcc	r1, r1, r4
static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   19c26:	4603      	mov	r3, r0
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   19c28:	9100      	str	r1, [sp, #0]
   19c2a:	4610      	mov	r0, r2
   19c2c:	4611      	mov	r1, r2
   19c2e:	f7f6 fc01 	bl	10434 <ticker_start>
			   TICKER_NULL_REMAINDER,
			   TICKER_NULL_LAZY,
			   TICKER_NULL_SLOT,
			   preempt_ticker_cb, NULL,
			   ticker_start_op_cb, NULL);
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   19c32:	2802      	cmp	r0, #2
   19c34:	d801      	bhi.n	19c3a <preempt_ticker_start.isra.0+0x42>
		  (ret == TICKER_STATUS_FAILURE) ||
		  (ret == TICKER_STATUS_BUSY));
}
   19c36:	b00b      	add	sp, #44	; 0x2c
   19c38:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   19c3a:	4a09      	ldr	r2, [pc, #36]	; (19c60 <preempt_ticker_start.isra.0+0x68>)
   19c3c:	4909      	ldr	r1, [pc, #36]	; (19c64 <preempt_ticker_start.isra.0+0x6c>)
   19c3e:	480a      	ldr	r0, [pc, #40]	; (19c68 <preempt_ticker_start.isra.0+0x70>)
   19c40:	f240 23fe 	movw	r3, #766	; 0x2fe
   19c44:	f00a fcce 	bl	245e4 <printk>
   19c48:	4040      	eors	r0, r0
   19c4a:	f380 8811 	msr	BASEPRI, r0
   19c4e:	f04f 0003 	mov.w	r0, #3
   19c52:	df02      	svc	2
}
   19c54:	b00b      	add	sp, #44	; 0x2c
   19c56:	bd30      	pop	{r4, r5, pc}
   19c58:	00019bc9 	.word	0x00019bc9
   19c5c:	00019da5 	.word	0x00019da5
   19c60:	0002bafc 	.word	0x0002bafc
   19c64:	0002bb64 	.word	0x0002bb64
   19c68:	0002b0c4 	.word	0x0002b0c4

00019c6c <preempt>:
			     0, &mfy);
	LL_ASSERT(!ret);
}

static void preempt(void *param)
{
   19c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll_prepare_cb_t resume_cb;
	struct lll_event *next;
	uint8_t idx;
	int ret;

	if (!event.curr.abort_cb || !event.curr.param) {
   19c6e:	4e48      	ldr	r6, [pc, #288]	; (19d90 <preempt+0x124>)
   19c70:	68b3      	ldr	r3, [r6, #8]
{
   19c72:	b089      	sub	sp, #36	; 0x24
	if (!event.curr.abort_cb || !event.curr.param) {
   19c74:	b1ab      	cbz	r3, 19ca2 <preempt+0x36>
   19c76:	6833      	ldr	r3, [r6, #0]
   19c78:	b19b      	cbz	r3, 19ca2 <preempt+0x36>
		return;
	}

	idx = UINT8_MAX;
   19c7a:	23ff      	movs	r3, #255	; 0xff
	next = ull_prepare_dequeue_iter(&idx);
   19c7c:	f10d 000a 	add.w	r0, sp, #10
	idx = UINT8_MAX;
   19c80:	f88d 300a 	strb.w	r3, [sp, #10]
	next = ull_prepare_dequeue_iter(&idx);
   19c84:	f7f9 fb9a 	bl	133bc <ull_prepare_dequeue_iter>
	if (!next) {
   19c88:	4604      	mov	r4, r0
   19c8a:	b150      	cbz	r0, 19ca2 <preempt+0x36>
		return;
	}

	while (next && (next->is_aborted || next->is_resume)) {
   19c8c:	7f23      	ldrb	r3, [r4, #28]
   19c8e:	f013 0503 	ands.w	r5, r3, #3
		next = ull_prepare_dequeue_iter(&idx);
   19c92:	f10d 000a 	add.w	r0, sp, #10
	while (next && (next->is_aborted || next->is_resume)) {
   19c96:	d006      	beq.n	19ca6 <preempt+0x3a>
		next = ull_prepare_dequeue_iter(&idx);
   19c98:	f7f9 fb90 	bl	133bc <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   19c9c:	4604      	mov	r4, r0
   19c9e:	2800      	cmp	r0, #0
   19ca0:	d1f4      	bne.n	19c8c <preempt+0x20>
			return;
		}
	} while (next->is_aborted || next->is_resume);

	preempt_ticker_start(&next->prepare_param);
}
   19ca2:	b009      	add	sp, #36	; 0x24
   19ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = event.curr.is_abort_cb(next->prepare_param.param,
   19ca6:	e9d6 1300 	ldrd	r1, r3, [r6]
   19caa:	68e0      	ldr	r0, [r4, #12]
   19cac:	aa03      	add	r2, sp, #12
   19cae:	4798      	blx	r3
	if (!ret) {
   19cb0:	4607      	mov	r7, r0
   19cb2:	2800      	cmp	r0, #0
   19cb4:	d062      	beq.n	19d7c <preempt+0x110>
	event.curr.abort_cb(NULL, event.curr.param);
   19cb6:	68b3      	ldr	r3, [r6, #8]
   19cb8:	6831      	ldr	r1, [r6, #0]
   19cba:	4628      	mov	r0, r5
   19cbc:	4798      	blx	r3
	if (ret == -EAGAIN) {
   19cbe:	f117 0f0b 	cmn.w	r7, #11
   19cc2:	d019      	beq.n	19cf8 <preempt+0x8c>
		LL_ASSERT(ret == -ECANCELED);
   19cc4:	378c      	adds	r7, #140	; 0x8c
   19cc6:	d010      	beq.n	19cea <preempt+0x7e>
   19cc8:	4a32      	ldr	r2, [pc, #200]	; (19d94 <preempt+0x128>)
   19cca:	4933      	ldr	r1, [pc, #204]	; (19d98 <preempt+0x12c>)
   19ccc:	4833      	ldr	r0, [pc, #204]	; (19d9c <preempt+0x130>)
   19cce:	f240 3351 	movw	r3, #849	; 0x351
   19cd2:	f00a fc87 	bl	245e4 <printk>
   19cd6:	4040      	eors	r0, r0
   19cd8:	f380 8811 	msr	BASEPRI, r0
   19cdc:	f04f 0003 	mov.w	r0, #3
   19ce0:	df02      	svc	2
   19ce2:	e002      	b.n	19cea <preempt+0x7e>
	} while (next->is_aborted || next->is_resume);
   19ce4:	7f03      	ldrb	r3, [r0, #28]
   19ce6:	079b      	lsls	r3, r3, #30
   19ce8:	d042      	beq.n	19d70 <preempt+0x104>
		next = ull_prepare_dequeue_iter(&idx);
   19cea:	f10d 000a 	add.w	r0, sp, #10
   19cee:	f7f9 fb65 	bl	133bc <ull_prepare_dequeue_iter>
		if (!next) {
   19cf2:	2800      	cmp	r0, #0
   19cf4:	d1f6      	bne.n	19ce4 <preempt+0x78>
   19cf6:	e7d4      	b.n	19ca2 <preempt+0x36>
		iter_idx = UINT8_MAX;
   19cf8:	24ff      	movs	r4, #255	; 0xff
		iter = ull_prepare_dequeue_iter(&iter_idx);
   19cfa:	f10d 000b 	add.w	r0, sp, #11
		iter_idx = UINT8_MAX;
   19cfe:	f88d 400b 	strb.w	r4, [sp, #11]
		iter = ull_prepare_dequeue_iter(&iter_idx);
   19d02:	f7f9 fb5b 	bl	133bc <ull_prepare_dequeue_iter>
		while (iter) {
   19d06:	bb58      	cbnz	r0, 19d60 <preempt+0xf4>
	struct lll_prepare_param prepare_param = {0};
   19d08:	2100      	movs	r1, #0
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   19d0a:	2301      	movs	r3, #1
	prepare_param.param = event.curr.param;
   19d0c:	6834      	ldr	r4, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   19d0e:	9300      	str	r3, [sp, #0]
	struct lll_prepare_param prepare_param = {0};
   19d10:	e9cd 1104 	strd	r1, r1, [sp, #16]
   19d14:	9106      	str	r1, [sp, #24]
	event.curr.param = NULL;
   19d16:	6031      	str	r1, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   19d18:	9b03      	ldr	r3, [sp, #12]
	prepare_param.param = event.curr.param;
   19d1a:	9407      	str	r4, [sp, #28]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   19d1c:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
   19d20:	aa04      	add	r2, sp, #16
   19d22:	f7f9 faff 	bl	13324 <ull_prepare_enqueue>
		LL_ASSERT(!ret);
   19d26:	2800      	cmp	r0, #0
   19d28:	d0df      	beq.n	19cea <preempt+0x7e>
   19d2a:	4a1a      	ldr	r2, [pc, #104]	; (19d94 <preempt+0x128>)
   19d2c:	491c      	ldr	r1, [pc, #112]	; (19da0 <preempt+0x134>)
   19d2e:	481b      	ldr	r0, [pc, #108]	; (19d9c <preempt+0x130>)
   19d30:	f240 334f 	movw	r3, #847	; 0x34f
   19d34:	f00a fc56 	bl	245e4 <printk>
   19d38:	4040      	eors	r0, r0
   19d3a:	f380 8811 	msr	BASEPRI, r0
   19d3e:	f04f 0003 	mov.w	r0, #3
   19d42:	df02      	svc	2
   19d44:	e7d1      	b.n	19cea <preempt+0x7e>
				iter->is_aborted = 1;
   19d46:	f043 0302 	orr.w	r3, r3, #2
   19d4a:	7703      	strb	r3, [r0, #28]
				iter->abort_cb(&iter->prepare_param,
   19d4c:	6983      	ldr	r3, [r0, #24]
   19d4e:	4798      	blx	r3
				idx = UINT8_MAX;
   19d50:	f88d 400a 	strb.w	r4, [sp, #10]
			iter = ull_prepare_dequeue_iter(&iter_idx);
   19d54:	f10d 000b 	add.w	r0, sp, #11
   19d58:	f7f9 fb30 	bl	133bc <ull_prepare_dequeue_iter>
		while (iter) {
   19d5c:	2800      	cmp	r0, #0
   19d5e:	d0d3      	beq.n	19d08 <preempt+0x9c>
			if (!iter->is_aborted &&
   19d60:	7f03      	ldrb	r3, [r0, #28]
   19d62:	079a      	lsls	r2, r3, #30
   19d64:	d4f6      	bmi.n	19d54 <preempt+0xe8>
			    event.curr.param == iter->prepare_param.param) {
   19d66:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   19d68:	6831      	ldr	r1, [r6, #0]
   19d6a:	4291      	cmp	r1, r2
   19d6c:	d1f2      	bne.n	19d54 <preempt+0xe8>
   19d6e:	e7ea      	b.n	19d46 <preempt+0xda>
	preempt_ticker_start(&next->prepare_param);
   19d70:	68c1      	ldr	r1, [r0, #12]
   19d72:	6800      	ldr	r0, [r0, #0]
   19d74:	f7ff ff40 	bl	19bf8 <preempt_ticker_start.isra.0>
}
   19d78:	b009      	add	sp, #36	; 0x24
   19d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next->is_aborted = 1;
   19d7c:	7f23      	ldrb	r3, [r4, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   19d7e:	69a2      	ldr	r2, [r4, #24]
   19d80:	68e1      	ldr	r1, [r4, #12]
		next->is_aborted = 1;
   19d82:	f043 0302 	orr.w	r3, r3, #2
   19d86:	7723      	strb	r3, [r4, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   19d88:	4620      	mov	r0, r4
   19d8a:	4790      	blx	r2
		goto preempt_next;
   19d8c:	e7ad      	b.n	19cea <preempt+0x7e>
   19d8e:	bf00      	nop
   19d90:	20001cc4 	.word	0x20001cc4
   19d94:	0002bafc 	.word	0x0002bafc
   19d98:	0002bb8c 	.word	0x0002bb8c
   19d9c:	0002b0c4 	.word	0x0002b0c4
   19da0:	0002b458 	.word	0x0002b458

00019da4 <preempt_ticker_cb>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   19da4:	2200      	movs	r2, #0
{
   19da6:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   19da8:	4611      	mov	r1, r2
   19daa:	4b0a      	ldr	r3, [pc, #40]	; (19dd4 <preempt_ticker_cb+0x30>)
   19dac:	2001      	movs	r0, #1
   19dae:	f7f5 f8c3 	bl	ef38 <mayfly_enqueue>
	LL_ASSERT(!ret);
   19db2:	b900      	cbnz	r0, 19db6 <preempt_ticker_cb+0x12>
}
   19db4:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   19db6:	4a08      	ldr	r2, [pc, #32]	; (19dd8 <preempt_ticker_cb+0x34>)
   19db8:	4908      	ldr	r1, [pc, #32]	; (19ddc <preempt_ticker_cb+0x38>)
   19dba:	4809      	ldr	r0, [pc, #36]	; (19de0 <preempt_ticker_cb+0x3c>)
   19dbc:	f44f 7343 	mov.w	r3, #780	; 0x30c
   19dc0:	f00a fc10 	bl	245e4 <printk>
   19dc4:	4040      	eors	r0, r0
   19dc6:	f380 8811 	msr	BASEPRI, r0
   19dca:	f04f 0003 	mov.w	r0, #3
   19dce:	df02      	svc	2
}
   19dd0:	bd08      	pop	{r3, pc}
   19dd2:	bf00      	nop
   19dd4:	20007b14 	.word	0x20007b14
   19dd8:	0002bafc 	.word	0x0002bafc
   19ddc:	0002b458 	.word	0x0002b458
   19de0:	0002b0c4 	.word	0x0002b0c4

00019de4 <lll_init>:
{
   19de4:	e92d 4150 	stmdb	sp!, {r4, r6, r8, lr}
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   19de8:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   19dec:	b91b      	cbnz	r3, 19df6 <lll_init+0x12>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   19dee:	f3ef 8314 	mrs	r3, CONTROL
	if (z_syscall_trap()) {
   19df2:	07db      	lsls	r3, r3, #31
   19df4:	d429      	bmi.n	19e4a <lll_init+0x66>
	return z_impl_device_get_binding(name);
   19df6:	4818      	ldr	r0, [pc, #96]	; (19e58 <lll_init+0x74>)
   19df8:	f006 fc48 	bl	2068c <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   19dfc:	4b17      	ldr	r3, [pc, #92]	; (19e5c <lll_init+0x78>)
   19dfe:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   19e00:	b338      	cbz	r0, 19e52 <lll_init+0x6e>
	event.curr.abort_cb = NULL;
   19e02:	4b17      	ldr	r3, [pc, #92]	; (19e60 <lll_init+0x7c>)
   19e04:	2400      	movs	r4, #0
   19e06:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
   19e08:	f000 fae0 	bl	1a3cc <lll_clock_init>
	if (err < 0) {
   19e0c:	2800      	cmp	r0, #0
   19e0e:	db1a      	blt.n	19e46 <lll_init+0x62>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   19e10:	4622      	mov	r2, r4
   19e12:	4621      	mov	r1, r4
   19e14:	2001      	movs	r0, #1
   19e16:	f7ec f919 	bl	604c <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   19e1a:	4622      	mov	r2, r4
   19e1c:	2101      	movs	r1, #1
   19e1e:	200b      	movs	r0, #11
   19e20:	f7ec f914 	bl	604c <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   19e24:	4622      	mov	r2, r4
   19e26:	4621      	mov	r1, r4
   19e28:	2018      	movs	r0, #24
   19e2a:	f7ec f90f 	bl	604c <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   19e2e:	2001      	movs	r0, #1
   19e30:	f7ec f8da 	bl	5fe8 <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   19e34:	200b      	movs	r0, #11
   19e36:	f7ec f8d7 	bl	5fe8 <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   19e3a:	2018      	movs	r0, #24
   19e3c:	f7ec f8d4 	bl	5fe8 <arch_irq_enable>
	radio_setup();
   19e40:	f001 fe92 	bl	1bb68 <radio_setup>
	return 0;
   19e44:	4620      	mov	r0, r4
}
   19e46:	e8bd 8150 	ldmia.w	sp!, {r4, r6, r8, pc}
	register uint32_t ret __asm__("r0") = arg1;
   19e4a:	4803      	ldr	r0, [pc, #12]	; (19e58 <lll_init+0x74>)
	register uint32_t r6 __asm__("r6") = call_id;
   19e4c:	2628      	movs	r6, #40	; 0x28
	__asm__ volatile("svc %[svid]\n"
   19e4e:	df03      	svc	3
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
   19e50:	e7d4      	b.n	19dfc <lll_init+0x18>
		return -ENODEV;
   19e52:	f06f 0012 	mvn.w	r0, #18
   19e56:	e7f6      	b.n	19e46 <lll_init+0x62>
   19e58:	0002bb98 	.word	0x0002bb98
   19e5c:	20001cc0 	.word	0x20001cc0
   19e60:	20001cc4 	.word	0x20001cc4

00019e64 <lll_csrand_get>:
{
   19e64:	e92d 0140 	stmdb	sp!, {r6, r8}
	return entropy_get_entropy(dev_entropy, buf, len);
   19e68:	4b0e      	ldr	r3, [pc, #56]	; (19ea4 <lll_csrand_get+0x40>)
{
   19e6a:	b082      	sub	sp, #8
   19e6c:	460a      	mov	r2, r1
	return entropy_get_entropy(dev_entropy, buf, len);
   19e6e:	f8ad 2006 	strh.w	r2, [sp, #6]
{
   19e72:	4601      	mov	r1, r0
	return entropy_get_entropy(dev_entropy, buf, len);
   19e74:	6818      	ldr	r0, [r3, #0]
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   19e76:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   19e7a:	b91b      	cbnz	r3, 19e84 <lll_csrand_get+0x20>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   19e7c:	f3ef 8314 	mrs	r3, CONTROL

extern int z_impl_entropy_get_entropy(const struct device * dev, uint8_t * buffer, uint16_t length);
static inline int entropy_get_entropy(const struct device * dev, uint8_t * buffer, uint16_t length)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
   19e80:	07db      	lsls	r3, r3, #31
   19e82:	d407      	bmi.n	19e94 <lll_csrand_get+0x30>
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   19e84:	6883      	ldr	r3, [r0, #8]
   19e86:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   19e8a:	681b      	ldr	r3, [r3, #0]
}
   19e8c:	b002      	add	sp, #8
   19e8e:	e8bd 0140 	ldmia.w	sp!, {r6, r8}
   19e92:	4718      	bx	r3
	register uint32_t r2 __asm__("r2") = arg3;
   19e94:	f8dd 2006 	ldr.w	r2, [sp, #6]
	register uint32_t r6 __asm__("r6") = call_id;
   19e98:	2631      	movs	r6, #49	; 0x31
	__asm__ volatile("svc %[svid]\n"
   19e9a:	df03      	svc	3
   19e9c:	b002      	add	sp, #8
   19e9e:	e8bd 0140 	ldmia.w	sp!, {r6, r8}
   19ea2:	4770      	bx	lr
   19ea4:	20001cc0 	.word	0x20001cc0

00019ea8 <lll_csrand_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   19ea8:	4b08      	ldr	r3, [pc, #32]	; (19ecc <lll_csrand_isr_get+0x24>)
   19eaa:	681b      	ldr	r3, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   19eac:	689a      	ldr	r2, [r3, #8]
{
   19eae:	b410      	push	{r4}
   19eb0:	6854      	ldr	r4, [r2, #4]
   19eb2:	b134      	cbz	r4, 19ec2 <lll_csrand_isr_get+0x1a>
   19eb4:	b28a      	uxth	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   19eb6:	46a4      	mov	ip, r4
   19eb8:	4601      	mov	r1, r0
}
   19eba:	bc10      	pop	{r4}
   19ebc:	4618      	mov	r0, r3
   19ebe:	2300      	movs	r3, #0
   19ec0:	4760      	bx	ip
   19ec2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   19ec6:	bc10      	pop	{r4}
   19ec8:	4770      	bx	lr
   19eca:	bf00      	nop
   19ecc:	20001cc0 	.word	0x20001cc0

00019ed0 <lll_rand_isr_get>:
   19ed0:	f7ff bfea 	b.w	19ea8 <lll_csrand_isr_get>

00019ed4 <lll_reset>:
}
   19ed4:	2000      	movs	r0, #0
   19ed6:	4770      	bx	lr

00019ed8 <lll_disable>:
{
   19ed8:	b530      	push	{r4, r5, lr}
	if (!param || (param == event.curr.param)) {
   19eda:	4604      	mov	r4, r0
{
   19edc:	b083      	sub	sp, #12
	if (!param || (param == event.curr.param)) {
   19ede:	b378      	cbz	r0, 19f40 <lll_disable+0x68>
   19ee0:	4b23      	ldr	r3, [pc, #140]	; (19f70 <lll_disable+0x98>)
   19ee2:	681a      	ldr	r2, [r3, #0]
   19ee4:	4282      	cmp	r2, r0
   19ee6:	d025      	beq.n	19f34 <lll_disable+0x5c>
		idx = UINT8_MAX;
   19ee8:	25ff      	movs	r5, #255	; 0xff
		next = ull_prepare_dequeue_iter(&idx);
   19eea:	f10d 0007 	add.w	r0, sp, #7
		idx = UINT8_MAX;
   19eee:	f88d 5007 	strb.w	r5, [sp, #7]
		next = ull_prepare_dequeue_iter(&idx);
   19ef2:	f7f9 fa63 	bl	133bc <ull_prepare_dequeue_iter>
		while (next) {
   19ef6:	b938      	cbnz	r0, 19f08 <lll_disable+0x30>
   19ef8:	e01a      	b.n	19f30 <lll_disable+0x58>
			    (!param || (param == next->prepare_param.param))) {
   19efa:	428c      	cmp	r4, r1
   19efc:	d00a      	beq.n	19f14 <lll_disable+0x3c>
			next = ull_prepare_dequeue_iter(&idx);
   19efe:	f10d 0007 	add.w	r0, sp, #7
   19f02:	f7f9 fa5b 	bl	133bc <ull_prepare_dequeue_iter>
		while (next) {
   19f06:	b198      	cbz	r0, 19f30 <lll_disable+0x58>
			if (!next->is_aborted &&
   19f08:	7f03      	ldrb	r3, [r0, #28]
   19f0a:	079b      	lsls	r3, r3, #30
   19f0c:	d4f7      	bmi.n	19efe <lll_disable+0x26>
				next->is_aborted = 1;
   19f0e:	68c1      	ldr	r1, [r0, #12]
			if (!next->is_aborted &&
   19f10:	2c00      	cmp	r4, #0
   19f12:	d1f2      	bne.n	19efa <lll_disable+0x22>
				next->is_aborted = 1;
   19f14:	7f03      	ldrb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   19f16:	6982      	ldr	r2, [r0, #24]
				next->is_aborted = 1;
   19f18:	f043 0302 	orr.w	r3, r3, #2
   19f1c:	7703      	strb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   19f1e:	4790      	blx	r2
			next = ull_prepare_dequeue_iter(&idx);
   19f20:	f10d 0007 	add.w	r0, sp, #7
				idx = UINT8_MAX;
   19f24:	f88d 5007 	strb.w	r5, [sp, #7]
			next = ull_prepare_dequeue_iter(&idx);
   19f28:	f7f9 fa48 	bl	133bc <ull_prepare_dequeue_iter>
		while (next) {
   19f2c:	2800      	cmp	r0, #0
   19f2e:	d1eb      	bne.n	19f08 <lll_disable+0x30>
}
   19f30:	b003      	add	sp, #12
   19f32:	bd30      	pop	{r4, r5, pc}
		if (event.curr.abort_cb && event.curr.param) {
   19f34:	689b      	ldr	r3, [r3, #8]
   19f36:	b16b      	cbz	r3, 19f54 <lll_disable+0x7c>
   19f38:	4621      	mov	r1, r4
			event.curr.abort_cb(NULL, event.curr.param);
   19f3a:	2000      	movs	r0, #0
   19f3c:	4798      	blx	r3
   19f3e:	e7d3      	b.n	19ee8 <lll_disable+0x10>
		if (event.curr.abort_cb && event.curr.param) {
   19f40:	4a0b      	ldr	r2, [pc, #44]	; (19f70 <lll_disable+0x98>)
   19f42:	6893      	ldr	r3, [r2, #8]
   19f44:	2b00      	cmp	r3, #0
   19f46:	d0cf      	beq.n	19ee8 <lll_disable+0x10>
   19f48:	6811      	ldr	r1, [r2, #0]
   19f4a:	2900      	cmp	r1, #0
   19f4c:	d0cc      	beq.n	19ee8 <lll_disable+0x10>
			event.curr.abort_cb(NULL, event.curr.param);
   19f4e:	2000      	movs	r0, #0
   19f50:	4798      	blx	r3
   19f52:	e7c9      	b.n	19ee8 <lll_disable+0x10>
			LL_ASSERT(!param);
   19f54:	4a07      	ldr	r2, [pc, #28]	; (19f74 <lll_disable+0x9c>)
   19f56:	4908      	ldr	r1, [pc, #32]	; (19f78 <lll_disable+0xa0>)
   19f58:	4808      	ldr	r0, [pc, #32]	; (19f7c <lll_disable+0xa4>)
   19f5a:	23fc      	movs	r3, #252	; 0xfc
   19f5c:	f00a fb42 	bl	245e4 <printk>
   19f60:	4040      	eors	r0, r0
   19f62:	f380 8811 	msr	BASEPRI, r0
   19f66:	f04f 0003 	mov.w	r0, #3
   19f6a:	df02      	svc	2
   19f6c:	e7bc      	b.n	19ee8 <lll_disable+0x10>
   19f6e:	bf00      	nop
   19f70:	20001cc4 	.word	0x20001cc4
   19f74:	0002bafc 	.word	0x0002bafc
   19f78:	0002bb9c 	.word	0x0002bb9c
   19f7c:	0002b0c4 	.word	0x0002b0c4

00019f80 <lll_prepare_done>:
}
   19f80:	2000      	movs	r0, #0
   19f82:	4770      	bx	lr

00019f84 <lll_done>:
{
   19f84:	b538      	push	{r3, r4, r5, lr}
   19f86:	4604      	mov	r4, r0
	next = ull_prepare_dequeue_get();
   19f88:	f7f9 fa0a 	bl	133a0 <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   19f8c:	b15c      	cbz	r4, 19fa6 <lll_done+0x22>
   19f8e:	b318      	cbz	r0, 19fd8 <lll_done+0x54>
			ull = HDR_ULL(((struct lll_hdr *)param)->parent);
   19f90:	6824      	ldr	r4, [r4, #0]
   19f92:	3410      	adds	r4, #16
	ull_prepare_dequeue(TICKER_USER_ID_LLL);
   19f94:	2000      	movs	r0, #0
   19f96:	f7f9 fa2f 	bl	133f8 <ull_prepare_dequeue>
	evdone = ull_event_done(ull);
   19f9a:	4620      	mov	r0, r4
   19f9c:	f7f9 fa98 	bl	134d0 <ull_event_done>
	LL_ASSERT(evdone);
   19fa0:	b158      	cbz	r0, 19fba <lll_done+0x36>
}
   19fa2:	2000      	movs	r0, #0
   19fa4:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(event.curr.abort_cb);
   19fa6:	4d1a      	ldr	r5, [pc, #104]	; (1a010 <lll_done+0x8c>)
   19fa8:	68ab      	ldr	r3, [r5, #8]
   19faa:	b31b      	cbz	r3, 19ff4 <lll_done+0x70>
		param = event.curr.param;
   19fac:	682c      	ldr	r4, [r5, #0]
		event.curr.abort_cb = NULL;
   19fae:	2300      	movs	r3, #0
   19fb0:	60ab      	str	r3, [r5, #8]
		event.curr.param = NULL;
   19fb2:	602b      	str	r3, [r5, #0]
		if (param) {
   19fb4:	2c00      	cmp	r4, #0
   19fb6:	d1eb      	bne.n	19f90 <lll_done+0xc>
   19fb8:	e7ec      	b.n	19f94 <lll_done+0x10>
	LL_ASSERT(evdone);
   19fba:	4a16      	ldr	r2, [pc, #88]	; (1a014 <lll_done+0x90>)
   19fbc:	4916      	ldr	r1, [pc, #88]	; (1a018 <lll_done+0x94>)
   19fbe:	4817      	ldr	r0, [pc, #92]	; (1a01c <lll_done+0x98>)
   19fc0:	f240 1361 	movw	r3, #353	; 0x161
   19fc4:	f00a fb0e 	bl	245e4 <printk>
   19fc8:	4040      	eors	r0, r0
   19fca:	f380 8811 	msr	BASEPRI, r0
   19fce:	f04f 0003 	mov.w	r0, #3
   19fd2:	df02      	svc	2
}
   19fd4:	2000      	movs	r0, #0
   19fd6:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(!param || next);
   19fd8:	4a0e      	ldr	r2, [pc, #56]	; (1a014 <lll_done+0x90>)
   19fda:	4911      	ldr	r1, [pc, #68]	; (1a020 <lll_done+0x9c>)
   19fdc:	480f      	ldr	r0, [pc, #60]	; (1a01c <lll_done+0x98>)
   19fde:	f240 1337 	movw	r3, #311	; 0x137
   19fe2:	f00a faff 	bl	245e4 <printk>
   19fe6:	4040      	eors	r0, r0
   19fe8:	f380 8811 	msr	BASEPRI, r0
   19fec:	f04f 0003 	mov.w	r0, #3
   19ff0:	df02      	svc	2
   19ff2:	e7cd      	b.n	19f90 <lll_done+0xc>
		LL_ASSERT(event.curr.abort_cb);
   19ff4:	4a07      	ldr	r2, [pc, #28]	; (1a014 <lll_done+0x90>)
   19ff6:	490b      	ldr	r1, [pc, #44]	; (1a024 <lll_done+0xa0>)
   19ff8:	4808      	ldr	r0, [pc, #32]	; (1a01c <lll_done+0x98>)
   19ffa:	f240 133d 	movw	r3, #317	; 0x13d
   19ffe:	f00a faf1 	bl	245e4 <printk>
   1a002:	4040      	eors	r0, r0
   1a004:	f380 8811 	msr	BASEPRI, r0
   1a008:	f04f 0003 	mov.w	r0, #3
   1a00c:	df02      	svc	2
   1a00e:	e7cd      	b.n	19fac <lll_done+0x28>
   1a010:	20001cc4 	.word	0x20001cc4
   1a014:	0002bafc 	.word	0x0002bafc
   1a018:	0002bbc8 	.word	0x0002bbc8
   1a01c:	0002b0c4 	.word	0x0002b0c4
   1a020:	0002bba4 	.word	0x0002bba4
   1a024:	0002bbb4 	.word	0x0002bbb4

0001a028 <lll_is_abort_cb>:
}
   1a028:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   1a02c:	4770      	bx	lr
   1a02e:	bf00      	nop

0001a030 <lll_evt_offset_get>:
	} else if (evt->ticks_xtal_to_start & XON_BITMASK) {
   1a030:	e9d0 2300 	ldrd	r2, r3, [r0]
   1a034:	2a00      	cmp	r2, #0
   1a036:	db04      	blt.n	1a042 <lll_evt_offset_get+0x12>
		return MAX(evt->ticks_active_to_start,
   1a038:	429a      	cmp	r2, r3
   1a03a:	bf38      	it	cc
   1a03c:	461a      	movcc	r2, r3
   1a03e:	4610      	mov	r0, r2
}
   1a040:	4770      	bx	lr
		return MAX(evt->ticks_active_to_start,
   1a042:	6880      	ldr	r0, [r0, #8]
   1a044:	4298      	cmp	r0, r3
   1a046:	bf38      	it	cc
   1a048:	4618      	movcc	r0, r3
   1a04a:	4770      	bx	lr

0001a04c <lll_preempt_calc>:
{
   1a04c:	b510      	push	{r4, lr}
   1a04e:	4614      	mov	r4, r2
	ticks_now = ticker_ticks_now_get();
   1a050:	f7f6 fabe 	bl	105d0 <ticker_ticks_now_get>
	diff = ticks_now - ticks_at_event;
   1a054:	1b02      	subs	r2, r0, r4
	if (diff & BIT(HAL_TICKER_CNTR_MSBIT)) {
   1a056:	0213      	lsls	r3, r2, #8
   1a058:	d405      	bmi.n	1a066 <lll_preempt_calc+0x1a>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   1a05a:	1cd0      	adds	r0, r2, #3
	if (diff > HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US)) {
   1a05c:	2809      	cmp	r0, #9
   1a05e:	bf94      	ite	ls
   1a060:	2000      	movls	r0, #0
   1a062:	2001      	movhi	r0, #1
}
   1a064:	bd10      	pop	{r4, pc}
		return 0;
   1a066:	2000      	movs	r0, #0
}
   1a068:	bd10      	pop	{r4, pc}
   1a06a:	bf00      	nop

0001a06c <lll_chan_set>:
	switch (chan) {
   1a06c:	2826      	cmp	r0, #38	; 0x26
{
   1a06e:	b510      	push	{r4, lr}
   1a070:	4604      	mov	r4, r0
	switch (chan) {
   1a072:	d01c      	beq.n	1a0ae <lll_chan_set+0x42>
   1a074:	2827      	cmp	r0, #39	; 0x27
   1a076:	d012      	beq.n	1a09e <lll_chan_set+0x32>
   1a078:	2825      	cmp	r0, #37	; 0x25
   1a07a:	d008      	beq.n	1a08e <lll_chan_set+0x22>
		if (chan < 11) {
   1a07c:	280a      	cmp	r0, #10
   1a07e:	d91e      	bls.n	1a0be <lll_chan_set+0x52>
		} else if (chan < 40) {
   1a080:	2827      	cmp	r0, #39	; 0x27
   1a082:	d821      	bhi.n	1a0c8 <lll_chan_set+0x5c>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   1a084:	3003      	adds	r0, #3
   1a086:	0040      	lsls	r0, r0, #1
   1a088:	f001 fdca 	bl	1bc20 <radio_freq_chan_set>
   1a08c:	e002      	b.n	1a094 <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   1a08e:	2002      	movs	r0, #2
   1a090:	f001 fdc6 	bl	1bc20 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1a094:	4620      	mov	r0, r4
}
   1a096:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1a09a:	f001 bdc7 	b.w	1bc2c <radio_whiten_iv_set>
		radio_freq_chan_set(80);
   1a09e:	2050      	movs	r0, #80	; 0x50
   1a0a0:	f001 fdbe 	bl	1bc20 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1a0a4:	4620      	mov	r0, r4
}
   1a0a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1a0aa:	f001 bdbf 	b.w	1bc2c <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   1a0ae:	201a      	movs	r0, #26
   1a0b0:	f001 fdb6 	bl	1bc20 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1a0b4:	4620      	mov	r0, r4
}
   1a0b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1a0ba:	f001 bdb7 	b.w	1bc2c <radio_whiten_iv_set>
			radio_freq_chan_set(4 + (chan * 2U));
   1a0be:	3002      	adds	r0, #2
   1a0c0:	0040      	lsls	r0, r0, #1
   1a0c2:	f001 fdad 	bl	1bc20 <radio_freq_chan_set>
   1a0c6:	e7e5      	b.n	1a094 <lll_chan_set+0x28>
			LL_ASSERT(0);
   1a0c8:	4a06      	ldr	r2, [pc, #24]	; (1a0e4 <lll_chan_set+0x78>)
   1a0ca:	4907      	ldr	r1, [pc, #28]	; (1a0e8 <lll_chan_set+0x7c>)
   1a0cc:	4807      	ldr	r0, [pc, #28]	; (1a0ec <lll_chan_set+0x80>)
   1a0ce:	f240 13cd 	movw	r3, #461	; 0x1cd
   1a0d2:	f00a fa87 	bl	245e4 <printk>
   1a0d6:	4040      	eors	r0, r0
   1a0d8:	f380 8811 	msr	BASEPRI, r0
   1a0dc:	f04f 0003 	mov.w	r0, #3
   1a0e0:	df02      	svc	2
   1a0e2:	e7d7      	b.n	1a094 <lll_chan_set+0x28>
   1a0e4:	0002bafc 	.word	0x0002bafc
   1a0e8:	0002b15c 	.word	0x0002b15c
   1a0ec:	0002b0c4 	.word	0x0002b0c4

0001a0f0 <lll_radio_rx_ready_delay_get>:
	return radio_rx_ready_delay_get(phy, flags);
   1a0f0:	f001 be04 	b.w	1bcfc <radio_rx_ready_delay_get>

0001a0f4 <lll_isr_tx_status_reset>:
{
   1a0f4:	b508      	push	{r3, lr}
	radio_status_reset();
   1a0f6:	f001 fe27 	bl	1bd48 <radio_status_reset>
}
   1a0fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   1a0fe:	f001 bee3 	b.w	1bec8 <radio_tmr_status_reset>
   1a102:	bf00      	nop

0001a104 <lll_isr_rx_status_reset>:
{
   1a104:	b508      	push	{r3, lr}
	radio_status_reset();
   1a106:	f001 fe1f 	bl	1bd48 <radio_status_reset>
	radio_tmr_status_reset();
   1a10a:	f001 fedd 	bl	1bec8 <radio_tmr_status_reset>
}
   1a10e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   1a112:	f001 be89 	b.w	1be28 <radio_rssi_status_reset>
   1a116:	bf00      	nop

0001a118 <lll_isr_status_reset>:
{
   1a118:	b508      	push	{r3, lr}
	radio_status_reset();
   1a11a:	f001 fe15 	bl	1bd48 <radio_status_reset>
	radio_tmr_status_reset();
   1a11e:	f001 fed3 	bl	1bec8 <radio_tmr_status_reset>
	radio_filter_status_reset();
   1a122:	f001 feb9 	bl	1be98 <radio_filter_status_reset>
	radio_ar_status_reset();
   1a126:	f002 f89f 	bl	1c268 <radio_ar_status_reset>
}
   1a12a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   1a12e:	f001 be7b 	b.w	1be28 <radio_rssi_status_reset>
   1a132:	bf00      	nop

0001a134 <lll_isr_cleanup>:
{
   1a134:	b508      	push	{r3, lr}
   1a136:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   1a138:	4815      	ldr	r0, [pc, #84]	; (1a190 <lll_isr_cleanup+0x5c>)
   1a13a:	f001 fcf5 	bl	1bb28 <radio_isr_set>
	if (!radio_is_idle()) {
   1a13e:	f001 fe23 	bl	1bd88 <radio_is_idle>
   1a142:	b150      	cbz	r0, 1a15a <lll_isr_cleanup+0x26>
	radio_tmr_stop();
   1a144:	f001 ff62 	bl	1c00c <radio_tmr_stop>
	err = lll_hfclock_off();
   1a148:	f000 f984 	bl	1a454 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1a14c:	2800      	cmp	r0, #0
   1a14e:	db0c      	blt.n	1a16a <lll_isr_cleanup+0x36>
}
   1a150:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1a154:	2000      	movs	r0, #0
   1a156:	f7ff bf15 	b.w	19f84 <lll_done>
		radio_disable();
   1a15a:	f001 fddd 	bl	1bd18 <radio_disable>
	radio_tmr_stop();
   1a15e:	f001 ff55 	bl	1c00c <radio_tmr_stop>
	err = lll_hfclock_off();
   1a162:	f000 f977 	bl	1a454 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1a166:	2800      	cmp	r0, #0
   1a168:	daf2      	bge.n	1a150 <lll_isr_cleanup+0x1c>
   1a16a:	4a0a      	ldr	r2, [pc, #40]	; (1a194 <lll_isr_cleanup+0x60>)
   1a16c:	490a      	ldr	r1, [pc, #40]	; (1a198 <lll_isr_cleanup+0x64>)
   1a16e:	480b      	ldr	r0, [pc, #44]	; (1a19c <lll_isr_cleanup+0x68>)
   1a170:	f44f 730c 	mov.w	r3, #560	; 0x230
   1a174:	f00a fa36 	bl	245e4 <printk>
   1a178:	4040      	eors	r0, r0
   1a17a:	f380 8811 	msr	BASEPRI, r0
   1a17e:	f04f 0003 	mov.w	r0, #3
   1a182:	df02      	svc	2
	lll_done(NULL);
   1a184:	2000      	movs	r0, #0
}
   1a186:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1a18a:	f7ff befb 	b.w	19f84 <lll_done>
   1a18e:	bf00      	nop
   1a190:	00019b95 	.word	0x00019b95
   1a194:	0002bafc 	.word	0x0002bafc
   1a198:	0002bbd0 	.word	0x0002bbd0
   1a19c:	0002b0c4 	.word	0x0002b0c4

0001a1a0 <lll_isr_abort>:
{
   1a1a0:	b510      	push	{r4, lr}
   1a1a2:	4604      	mov	r4, r0
	lll_isr_status_reset();
   1a1a4:	f7ff ffb8 	bl	1a118 <lll_isr_status_reset>
	lll_isr_cleanup(param);
   1a1a8:	4620      	mov	r0, r4
}
   1a1aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1a1ae:	f7ff bfc1 	b.w	1a134 <lll_isr_cleanup>
   1a1b2:	bf00      	nop

0001a1b4 <lll_isr_early_abort>:
{
   1a1b4:	b508      	push	{r3, lr}
   1a1b6:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   1a1b8:	4813      	ldr	r0, [pc, #76]	; (1a208 <lll_isr_early_abort+0x54>)
   1a1ba:	f001 fcb5 	bl	1bb28 <radio_isr_set>
	if (!radio_is_idle()) {
   1a1be:	f001 fde3 	bl	1bd88 <radio_is_idle>
   1a1c2:	b140      	cbz	r0, 1a1d6 <lll_isr_early_abort+0x22>
	err = lll_hfclock_off();
   1a1c4:	f000 f946 	bl	1a454 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1a1c8:	2800      	cmp	r0, #0
   1a1ca:	db0a      	blt.n	1a1e2 <lll_isr_early_abort+0x2e>
}
   1a1cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1a1d0:	2000      	movs	r0, #0
   1a1d2:	f7ff bed7 	b.w	19f84 <lll_done>
		radio_disable();
   1a1d6:	f001 fd9f 	bl	1bd18 <radio_disable>
	err = lll_hfclock_off();
   1a1da:	f000 f93b 	bl	1a454 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1a1de:	2800      	cmp	r0, #0
   1a1e0:	daf4      	bge.n	1a1cc <lll_isr_early_abort+0x18>
   1a1e2:	4a0a      	ldr	r2, [pc, #40]	; (1a20c <lll_isr_early_abort+0x58>)
   1a1e4:	490a      	ldr	r1, [pc, #40]	; (1a210 <lll_isr_early_abort+0x5c>)
   1a1e6:	480b      	ldr	r0, [pc, #44]	; (1a214 <lll_isr_early_abort+0x60>)
   1a1e8:	f240 233f 	movw	r3, #575	; 0x23f
   1a1ec:	f00a f9fa 	bl	245e4 <printk>
   1a1f0:	4040      	eors	r0, r0
   1a1f2:	f380 8811 	msr	BASEPRI, r0
   1a1f6:	f04f 0003 	mov.w	r0, #3
   1a1fa:	df02      	svc	2
	lll_done(NULL);
   1a1fc:	2000      	movs	r0, #0
}
   1a1fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1a202:	f7ff bebf 	b.w	19f84 <lll_done>
   1a206:	bf00      	nop
   1a208:	00019b95 	.word	0x00019b95
   1a20c:	0002bafc 	.word	0x0002bafc
   1a210:	0002bbd0 	.word	0x0002bbd0
   1a214:	0002b0c4 	.word	0x0002b0c4

0001a218 <lll_prepare_resolve>:
{
   1a218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a21c:	b084      	sub	sp, #16
   1a21e:	4605      	mov	r5, r0
	idx = UINT8_MAX;
   1a220:	f04f 0cff 	mov.w	ip, #255	; 0xff
	p = ull_prepare_dequeue_iter(&idx);
   1a224:	f10d 000f 	add.w	r0, sp, #15
{
   1a228:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
	idx = UINT8_MAX;
   1a22c:	f88d c00f 	strb.w	ip, [sp, #15]
{
   1a230:	460e      	mov	r6, r1
   1a232:	4617      	mov	r7, r2
   1a234:	461c      	mov	r4, r3
	p = ull_prepare_dequeue_iter(&idx);
   1a236:	f7f9 f8c1 	bl	133bc <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   1a23a:	b918      	cbnz	r0, 1a244 <lll_prepare_resolve+0x2c>
   1a23c:	e01c      	b.n	1a278 <lll_prepare_resolve+0x60>
		p = ull_prepare_dequeue_iter(&idx);
   1a23e:	f7f9 f8bd 	bl	133bc <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   1a242:	b1c8      	cbz	r0, 1a278 <lll_prepare_resolve+0x60>
   1a244:	7f03      	ldrb	r3, [r0, #28]
   1a246:	079b      	lsls	r3, r3, #30
		p = ull_prepare_dequeue_iter(&idx);
   1a248:	f10d 000f 	add.w	r0, sp, #15
	while (p && (p->is_aborted || p->is_resume)) {
   1a24c:	d1f7      	bne.n	1a23e <lll_prepare_resolve+0x26>
	    event.curr.abort_cb ||
   1a24e:	4b2c      	ldr	r3, [pc, #176]	; (1a300 <lll_prepare_resolve+0xe8>)
	if ((!is_dequeue && !is_done_sync()) ||
   1a250:	689a      	ldr	r2, [r3, #8]
   1a252:	b9a2      	cbnz	r2, 1a27e <lll_prepare_resolve+0x66>
	    (p && is_resume)) {
   1a254:	f1b8 0f00 	cmp.w	r8, #0
   1a258:	d033      	beq.n	1a2c2 <lll_prepare_resolve+0xaa>
		err = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   1a25a:	f8cd 8000 	str.w	r8, [sp]
   1a25e:	463b      	mov	r3, r7
   1a260:	4631      	mov	r1, r6
   1a262:	4628      	mov	r0, r5
   1a264:	4622      	mov	r2, r4
   1a266:	f7f9 f85d 	bl	13324 <ull_prepare_enqueue>
		LL_ASSERT(!err);
   1a26a:	b9c8      	cbnz	r0, 1a2a0 <lll_prepare_resolve+0x88>
		return -EINPROGRESS;
   1a26c:	f06f 0476 	mvn.w	r4, #118	; 0x76
}
   1a270:	4620      	mov	r0, r4
   1a272:	b004      	add	sp, #16
   1a274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    event.curr.abort_cb ||
   1a278:	4b21      	ldr	r3, [pc, #132]	; (1a300 <lll_prepare_resolve+0xe8>)
	if ((!is_dequeue && !is_done_sync()) ||
   1a27a:	689a      	ldr	r2, [r3, #8]
   1a27c:	b30a      	cbz	r2, 1a2c2 <lll_prepare_resolve+0xaa>
		err = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   1a27e:	f8cd 8000 	str.w	r8, [sp]
   1a282:	463b      	mov	r3, r7
   1a284:	4631      	mov	r1, r6
   1a286:	4628      	mov	r0, r5
   1a288:	4622      	mov	r2, r4
   1a28a:	f7f9 f84b 	bl	13324 <ull_prepare_enqueue>
		LL_ASSERT(!err);
   1a28e:	b938      	cbnz	r0, 1a2a0 <lll_prepare_resolve+0x88>
		if (is_resume) {
   1a290:	f1b8 0f00 	cmp.w	r8, #0
   1a294:	d1ea      	bne.n	1a26c <lll_prepare_resolve+0x54>
		preempt_ticker_start(prepare_param);
   1a296:	68e1      	ldr	r1, [r4, #12]
   1a298:	6820      	ldr	r0, [r4, #0]
   1a29a:	f7ff fcad 	bl	19bf8 <preempt_ticker_start.isra.0>
   1a29e:	e7e5      	b.n	1a26c <lll_prepare_resolve+0x54>
		LL_ASSERT(!err);
   1a2a0:	4a18      	ldr	r2, [pc, #96]	; (1a304 <lll_prepare_resolve+0xec>)
   1a2a2:	4919      	ldr	r1, [pc, #100]	; (1a308 <lll_prepare_resolve+0xf0>)
   1a2a4:	4819      	ldr	r0, [pc, #100]	; (1a30c <lll_prepare_resolve+0xf4>)
   1a2a6:	f240 237a 	movw	r3, #634	; 0x27a
   1a2aa:	f00a f99b 	bl	245e4 <printk>
   1a2ae:	4040      	eors	r0, r0
   1a2b0:	f380 8811 	msr	BASEPRI, r0
   1a2b4:	f04f 0003 	mov.w	r0, #3
   1a2b8:	df02      	svc	2
		if (is_resume) {
   1a2ba:	f1b8 0f00 	cmp.w	r8, #0
   1a2be:	d1d5      	bne.n	1a26c <lll_prepare_resolve+0x54>
   1a2c0:	e7e9      	b.n	1a296 <lll_prepare_resolve+0x7e>
	event.curr.param = prepare_param->param;
   1a2c2:	68e2      	ldr	r2, [r4, #12]
   1a2c4:	601a      	str	r2, [r3, #0]
	event.curr.abort_cb = abort_cb;
   1a2c6:	e9c3 5601 	strd	r5, r6, [r3, #4]
	err = prepare_cb(prepare_param);
   1a2ca:	4620      	mov	r0, r4
   1a2cc:	47b8      	blx	r7
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1a2ce:	2200      	movs	r2, #0
   1a2d0:	4b0f      	ldr	r3, [pc, #60]	; (1a310 <lll_prepare_resolve+0xf8>)
   1a2d2:	9200      	str	r2, [sp, #0]
	err = prepare_cb(prepare_param);
   1a2d4:	4604      	mov	r4, r0
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1a2d6:	4611      	mov	r1, r2
   1a2d8:	4610      	mov	r0, r2
   1a2da:	f7f6 f933 	bl	10544 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1a2de:	2802      	cmp	r0, #2
   1a2e0:	d9c6      	bls.n	1a270 <lll_prepare_resolve+0x58>
   1a2e2:	4a08      	ldr	r2, [pc, #32]	; (1a304 <lll_prepare_resolve+0xec>)
   1a2e4:	490b      	ldr	r1, [pc, #44]	; (1a314 <lll_prepare_resolve+0xfc>)
   1a2e6:	4809      	ldr	r0, [pc, #36]	; (1a30c <lll_prepare_resolve+0xf4>)
   1a2e8:	f44f 732d 	mov.w	r3, #692	; 0x2b4
   1a2ec:	f00a f97a 	bl	245e4 <printk>
   1a2f0:	4040      	eors	r0, r0
   1a2f2:	f380 8811 	msr	BASEPRI, r0
   1a2f6:	f04f 0003 	mov.w	r0, #3
   1a2fa:	df02      	svc	2
   1a2fc:	e7b8      	b.n	1a270 <lll_prepare_resolve+0x58>
   1a2fe:	bf00      	nop
   1a300:	20001cc4 	.word	0x20001cc4
   1a304:	0002bafc 	.word	0x0002bafc
   1a308:	0002b384 	.word	0x0002b384
   1a30c:	0002b0c4 	.word	0x0002b0c4
   1a310:	00019b99 	.word	0x00019b99
   1a314:	0002bb64 	.word	0x0002bb64

0001a318 <clock_ready>:
			uint32_t state, int res)
{
	struct lll_clock_state *clk_state =
		CONTAINER_OF(cli, struct lll_clock_state, cli);

	k_sem_give(&clk_state->sem);
   1a318:	f101 0010 	add.w	r0, r1, #16
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   1a31c:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   1a320:	b91b      	cbnz	r3, 1a32a <clock_ready+0x12>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   1a322:	f3ef 8314 	mrs	r3, CONTROL
	if (z_syscall_trap()) {
   1a326:	07db      	lsls	r3, r3, #31
   1a328:	d401      	bmi.n	1a32e <clock_ready+0x16>
	z_impl_k_sem_give(sem);
   1a32a:	f007 be6b 	b.w	22004 <z_impl_k_sem_give>
{
   1a32e:	e92d 0140 	stmdb	sp!, {r6, r8}
	register uint32_t r6 __asm__("r6") = call_id;
   1a332:	26a0      	movs	r6, #160	; 0xa0
	__asm__ volatile("svc %[svid]\n"
   1a334:	df03      	svc	3
}
   1a336:	e8bd 0140 	ldmia.w	sp!, {r6, r8}
   1a33a:	4770      	bx	lr

0001a33c <blocking_on>:

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   1a33c:	e92d 4170 	stmdb	sp!, {r4, r5, r6, r8, lr}
   1a340:	4604      	mov	r4, r0
   1a342:	b08b      	sub	sp, #44	; 0x2c
   1a344:	460d      	mov	r5, r1
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   1a346:	f3ef 8105 	mrs	r1, IPSR
	if (value) {
   1a34a:	b919      	cbnz	r1, 1a354 <blocking_on+0x18>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   1a34c:	f3ef 8314 	mrs	r3, CONTROL
	if (z_syscall_trap()) {
   1a350:	07d8      	lsls	r0, r3, #31
   1a352:	d42b      	bmi.n	1a3ac <blocking_on+0x70>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1a354:	2201      	movs	r2, #1
   1a356:	a804      	add	r0, sp, #16
   1a358:	2100      	movs	r1, #0
   1a35a:	f00f fb78 	bl	29a4e <z_impl_k_sem_init>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   1a35e:	2300      	movs	r3, #0
   1a360:	4a19      	ldr	r2, [pc, #100]	; (1a3c8 <blocking_on+0x8c>)
   1a362:	9303      	str	r3, [sp, #12]
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   1a364:	4620      	mov	r0, r4
   1a366:	2303      	movs	r3, #3
   1a368:	4669      	mov	r1, sp
   1a36a:	9201      	str	r2, [sp, #4]
   1a36c:	9302      	str	r3, [sp, #8]
   1a36e:	f00a f9b5 	bl	246dc <onoff_request>
	if (err < 0) {
   1a372:	2800      	cmp	r0, #0
   1a374:	db17      	blt.n	1a3a6 <blocking_on+0x6a>
   1a376:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1a37a:	f240 30e7 	movw	r0, #999	; 0x3e7
   1a37e:	2100      	movs	r1, #0
   1a380:	fbe3 0105 	umlal	r0, r1, r3, r5
   1a384:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a388:	2300      	movs	r3, #0
   1a38a:	f7e6 fbd7 	bl	b3c <__aeabi_uldivmod>
   1a38e:	4602      	mov	r2, r0
   1a390:	460b      	mov	r3, r1
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   1a392:	f3ef 8105 	mrs	r1, IPSR
	if (value) {
   1a396:	b919      	cbnz	r1, 1a3a0 <blocking_on+0x64>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   1a398:	f3ef 8114 	mrs	r1, CONTROL
	if (z_syscall_trap()) {
   1a39c:	07c9      	lsls	r1, r1, #31
   1a39e:	d40a      	bmi.n	1a3b6 <blocking_on+0x7a>
	return z_impl_k_sem_take(sem, timeout);
   1a3a0:	a804      	add	r0, sp, #16
   1a3a2:	f007 fe91 	bl	220c8 <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   1a3a6:	b00b      	add	sp, #44	; 0x2c
   1a3a8:	e8bd 8170 	ldmia.w	sp!, {r4, r5, r6, r8, pc}
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
   1a3ac:	a804      	add	r0, sp, #16
	register uint32_t r2 __asm__("r2") = arg3;
   1a3ae:	2201      	movs	r2, #1
	register uint32_t r6 __asm__("r6") = call_id;
   1a3b0:	26a1      	movs	r6, #161	; 0xa1
	__asm__ volatile("svc %[svid]\n"
   1a3b2:	df03      	svc	3
   1a3b4:	e7d3      	b.n	1a35e <blocking_on+0x22>
	register uint32_t r1 __asm__("r1") = arg2;
   1a3b6:	4611      	mov	r1, r2
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
   1a3b8:	a804      	add	r0, sp, #16
	register uint32_t r2 __asm__("r2") = arg3;
   1a3ba:	461a      	mov	r2, r3
	register uint32_t r6 __asm__("r6") = call_id;
   1a3bc:	26a3      	movs	r6, #163	; 0xa3
	__asm__ volatile("svc %[svid]\n"
   1a3be:	df03      	svc	3
   1a3c0:	b00b      	add	sp, #44	; 0x2c
   1a3c2:	e8bd 8170 	ldmia.w	sp!, {r4, r5, r6, r8, pc}
   1a3c6:	bf00      	nop
   1a3c8:	0001a319 	.word	0x0001a319

0001a3cc <lll_clock_init>:

int lll_clock_init(void)
{
   1a3cc:	b510      	push	{r4, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1a3ce:	2001      	movs	r0, #1
   1a3d0:	f7eb f94e 	bl	5670 <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   1a3d4:	4904      	ldr	r1, [pc, #16]	; (1a3e8 <lll_clock_init+0x1c>)
   1a3d6:	2401      	movs	r4, #1
   1a3d8:	2300      	movs	r3, #0
   1a3da:	608c      	str	r4, [r1, #8]
   1a3dc:	60cb      	str	r3, [r1, #12]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
}
   1a3de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a3e2:	604b      	str	r3, [r1, #4]
	return onoff_request(mgr, &lf_cli);
   1a3e4:	f00a b97a 	b.w	246dc <onoff_request>
   1a3e8:	20001cdc 	.word	0x20001cdc

0001a3ec <lll_clock_wait>:
{
	struct onoff_manager *mgr;
	static bool done;
	int err;

	if (done) {
   1a3ec:	4b0c      	ldr	r3, [pc, #48]	; (1a420 <lll_clock_wait+0x34>)
   1a3ee:	781a      	ldrb	r2, [r3, #0]
   1a3f0:	b10a      	cbz	r2, 1a3f6 <lll_clock_wait+0xa>
		return 0;
   1a3f2:	2000      	movs	r0, #0
	if (err != ONOFF_STATE_ON) {
		return -EIO;
	}

	return 0;
}
   1a3f4:	4770      	bx	lr
{
   1a3f6:	b510      	push	{r4, lr}
	done = true;
   1a3f8:	2001      	movs	r0, #1
   1a3fa:	7018      	strb	r0, [r3, #0]
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1a3fc:	f7eb f938 	bl	5670 <z_nrf_clock_control_get_onoff>
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   1a400:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1a404:	4604      	mov	r4, r0
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   1a406:	f7ff ff99 	bl	1a33c <blocking_on>
	if (err) {
   1a40a:	b938      	cbnz	r0, 1a41c <lll_clock_wait+0x30>
	err = onoff_release(mgr);
   1a40c:	4620      	mov	r0, r4
   1a40e:	f00a f9ae 	bl	2476e <onoff_release>
	if (err != ONOFF_STATE_ON) {
   1a412:	2802      	cmp	r0, #2
		return 0;
   1a414:	bf0c      	ite	eq
   1a416:	2000      	moveq	r0, #0
		return -EIO;
   1a418:	f06f 0004 	mvnne.w	r0, #4
}
   1a41c:	bd10      	pop	{r4, pc}
   1a41e:	bf00      	nop
   1a420:	20002aab 	.word	0x20002aab

0001a424 <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   1a424:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1a426:	4b0a      	ldr	r3, [pc, #40]	; (1a450 <lll_hfclock_on+0x2c>)
   1a428:	f3bf 8f5b 	dmb	ish
   1a42c:	e853 2f00 	ldrex	r2, [r3]
   1a430:	1c51      	adds	r1, r2, #1
   1a432:	e843 1000 	strex	r0, r1, [r3]
   1a436:	2800      	cmp	r0, #0
   1a438:	d1f8      	bne.n	1a42c <lll_hfclock_on+0x8>
   1a43a:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   1a43e:	2a00      	cmp	r2, #0
   1a440:	dd01      	ble.n	1a446 <lll_hfclock_on+0x22>

	z_nrf_clock_bt_ctlr_hf_request();
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   1a442:	2000      	movs	r0, #0
   1a444:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_request();
   1a446:	f7eb f91b 	bl	5680 <z_nrf_clock_bt_ctlr_hf_request>
}
   1a44a:	2000      	movs	r0, #0
   1a44c:	bd08      	pop	{r3, pc}
   1a44e:	bf00      	nop
   1a450:	20001cd8 	.word	0x20001cd8

0001a454 <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   1a454:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   1a456:	4b0d      	ldr	r3, [pc, #52]	; (1a48c <lll_hfclock_off+0x38>)
   1a458:	681a      	ldr	r2, [r3, #0]
   1a45a:	2a00      	cmp	r2, #0
   1a45c:	dd12      	ble.n	1a484 <lll_hfclock_off+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1a45e:	f3bf 8f5b 	dmb	ish
   1a462:	e853 2f00 	ldrex	r2, [r3]
   1a466:	1e51      	subs	r1, r2, #1
   1a468:	e843 1000 	strex	r0, r1, [r3]
   1a46c:	2800      	cmp	r0, #0
   1a46e:	d1f8      	bne.n	1a462 <lll_hfclock_off+0xe>
   1a470:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   1a474:	2a01      	cmp	r2, #1
   1a476:	dd01      	ble.n	1a47c <lll_hfclock_off+0x28>
		return 0;
   1a478:	2000      	movs	r0, #0

	z_nrf_clock_bt_ctlr_hf_release();
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   1a47a:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_release();
   1a47c:	f7eb f916 	bl	56ac <z_nrf_clock_bt_ctlr_hf_release>
	return 0;
   1a480:	2000      	movs	r0, #0
}
   1a482:	bd08      	pop	{r3, pc}
		return -EALREADY;
   1a484:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   1a488:	bd08      	pop	{r3, pc}
   1a48a:	bf00      	nop
   1a48c:	20001cd8 	.word	0x20001cd8

0001a490 <lll_clock_ppm_local_get>:
}

uint32_t lll_clock_ppm_local_get(void)
{
	return sca_ppm_lut[CLOCK_CONTROL_NRF_K32SRC_ACCURACY];
}
   1a490:	2014      	movs	r0, #20
   1a492:	4770      	bx	lr

0001a494 <lll_clock_ppm_get>:

uint32_t lll_clock_ppm_get(uint8_t sca)
{
	return sca_ppm_lut[sca];
   1a494:	4b01      	ldr	r3, [pc, #4]	; (1a49c <lll_clock_ppm_get+0x8>)
}
   1a496:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   1a49a:	4770      	bx	lr
   1a49c:	0002bbfc 	.word	0x0002bbfc

0001a4a0 <isr_abort>:

	lll_isr_cleanup(param);
}

static void isr_abort(void *param)
{
   1a4a0:	b510      	push	{r4, lr}
   1a4a2:	4604      	mov	r4, r0
	/* Clear radio status and events */
	lll_isr_status_reset();
   1a4a4:	f7ff fe38 	bl	1a118 <lll_isr_status_reset>

	radio_filter_disable();
   1a4a8:	f001 fcec 	bl	1be84 <radio_filter_disable>

	lll_isr_cleanup(param);
   1a4ac:	4620      	mov	r0, r4
}
   1a4ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1a4b2:	f7ff be3f 	b.w	1a134 <lll_isr_cleanup>
   1a4b6:	bf00      	nop

0001a4b8 <isr_tx>:
{
   1a4b8:	b530      	push	{r4, r5, lr}
   1a4ba:	b083      	sub	sp, #12
   1a4bc:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   1a4be:	f7ff fe19 	bl	1a0f4 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1a4c2:	2096      	movs	r0, #150	; 0x96
   1a4c4:	f001 fd10 	bl	1bee8 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(phy_p, 0, phy_p, 0);
   1a4c8:	2300      	movs	r3, #0
   1a4ca:	461a      	mov	r2, r3
   1a4cc:	4619      	mov	r1, r3
   1a4ce:	4618      	mov	r0, r3
   1a4d0:	f001 fc90 	bl	1bdf4 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(radio_pkt_scratch_get());
   1a4d4:	f001 fc7c 	bl	1bdd0 <radio_pkt_scratch_get>
   1a4d8:	f001 fc02 	bl	1bce0 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   1a4dc:	f001 fc40 	bl	1bd60 <radio_is_ready>
   1a4e0:	b9d8      	cbnz	r0, 1a51a <isr_tx+0x62>
	radio_isr_set(isr_rx, param);
   1a4e2:	481e      	ldr	r0, [pc, #120]	; (1a55c <isr_tx+0xa4>)
   1a4e4:	4621      	mov	r1, r4
   1a4e6:	f001 fb1f 	bl	1bb28 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   1a4ea:	f7ff fb21 	bl	19b30 <ull_filter_lll_rl_enabled>
   1a4ee:	bb48      	cbnz	r0, 1a544 <isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1a4f0:	f001 fde8 	bl	1c0c4 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   1a4f4:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1a4f6:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   1a4f8:	4608      	mov	r0, r1
   1a4fa:	f001 fc01 	bl	1bd00 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   1a4fe:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   1a500:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   1a502:	4608      	mov	r0, r1
   1a504:	f001 fbf8 	bl	1bcf8 <radio_tx_chain_delay_get>
   1a508:	442c      	add	r4, r5
   1a50a:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   1a50c:	1a20      	subs	r0, r4, r0
   1a50e:	f001 fd91 	bl	1c034 <radio_tmr_hcto_configure>
	radio_tmr_end_capture();
   1a512:	f001 fdc9 	bl	1c0a8 <radio_tmr_end_capture>
}
   1a516:	b003      	add	sp, #12
   1a518:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!radio_is_ready());
   1a51a:	4a11      	ldr	r2, [pc, #68]	; (1a560 <isr_tx+0xa8>)
   1a51c:	4911      	ldr	r1, [pc, #68]	; (1a564 <isr_tx+0xac>)
   1a51e:	4812      	ldr	r0, [pc, #72]	; (1a568 <isr_tx+0xb0>)
   1a520:	f240 33b9 	movw	r3, #953	; 0x3b9
   1a524:	f00a f85e 	bl	245e4 <printk>
   1a528:	4040      	eors	r0, r0
   1a52a:	f380 8811 	msr	BASEPRI, r0
   1a52e:	f04f 0003 	mov.w	r0, #3
   1a532:	df02      	svc	2
	radio_isr_set(isr_rx, param);
   1a534:	4809      	ldr	r0, [pc, #36]	; (1a55c <isr_tx+0xa4>)
   1a536:	4621      	mov	r1, r4
   1a538:	f001 faf6 	bl	1bb28 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   1a53c:	f7ff faf8 	bl	19b30 <ull_filter_lll_rl_enabled>
   1a540:	2800      	cmp	r0, #0
   1a542:	d0d5      	beq.n	1a4f0 <isr_tx+0x38>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1a544:	f10d 0007 	add.w	r0, sp, #7
   1a548:	f7ff fa20 	bl	1998c <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   1a54c:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1a54e:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   1a550:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1a554:	f001 fe50 	bl	1c1f8 <radio_ar_configure>
   1a558:	e7ca      	b.n	1a4f0 <isr_tx+0x38>
   1a55a:	bf00      	nop
   1a55c:	0001ad21 	.word	0x0001ad21
   1a560:	0002bc0c 	.word	0x0002bc0c
   1a564:	0002bc58 	.word	0x0002bc58
   1a568:	0002b0c4 	.word	0x0002b0c4

0001a56c <is_abort_cb>:
	if (next != curr) {
   1a56c:	4281      	cmp	r1, r0
{
   1a56e:	b508      	push	{r3, lr}
	if (next != curr) {
   1a570:	d00e      	beq.n	1a590 <is_abort_cb+0x24>
		} else if (lll->is_hdcd) {
   1a572:	7a0b      	ldrb	r3, [r1, #8]
   1a574:	07db      	lsls	r3, r3, #31
   1a576:	d402      	bmi.n	1a57e <is_abort_cb+0x12>
			return -ECANCELED;
   1a578:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   1a57c:	bd08      	pop	{r3, pc}
			*resume_cb = resume_prepare_cb;
   1a57e:	4b13      	ldr	r3, [pc, #76]	; (1a5cc <is_abort_cb+0x60>)
   1a580:	6013      	str	r3, [r2, #0]
			err = lll_hfclock_on();
   1a582:	f7ff ff4f 	bl	1a424 <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   1a586:	2800      	cmp	r0, #0
   1a588:	db0f      	blt.n	1a5aa <is_abort_cb+0x3e>
   1a58a:	f06f 000a 	mvn.w	r0, #10
}
   1a58e:	bd08      	pop	{r3, pc}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
}

static inline struct pdu_adv *lll_adv_data_curr_get(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   1a590:	7b0b      	ldrb	r3, [r1, #12]
   1a592:	eb01 0183 	add.w	r1, r1, r3, lsl #2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1a596:	690b      	ldr	r3, [r1, #16]
   1a598:	781b      	ldrb	r3, [r3, #0]
   1a59a:	f003 030f 	and.w	r3, r3, #15
   1a59e:	2b01      	cmp	r3, #1
		return 0;
   1a5a0:	bf14      	ite	ne
   1a5a2:	f06f 008b 	mvnne.w	r0, #139	; 0x8b
   1a5a6:	2000      	moveq	r0, #0
}
   1a5a8:	bd08      	pop	{r3, pc}
			LL_ASSERT(err >= 0);
   1a5aa:	4a09      	ldr	r2, [pc, #36]	; (1a5d0 <is_abort_cb+0x64>)
   1a5ac:	4909      	ldr	r1, [pc, #36]	; (1a5d4 <is_abort_cb+0x68>)
   1a5ae:	480a      	ldr	r0, [pc, #40]	; (1a5d8 <is_abort_cb+0x6c>)
   1a5b0:	f240 3377 	movw	r3, #887	; 0x377
   1a5b4:	f00a f816 	bl	245e4 <printk>
   1a5b8:	4040      	eors	r0, r0
   1a5ba:	f380 8811 	msr	BASEPRI, r0
   1a5be:	f04f 0003 	mov.w	r0, #3
   1a5c2:	df02      	svc	2
   1a5c4:	f06f 000a 	mvn.w	r0, #10
}
   1a5c8:	bd08      	pop	{r3, pc}
   1a5ca:	bf00      	nop
   1a5cc:	0001aaed 	.word	0x0001aaed
   1a5d0:	0002bc0c 	.word	0x0002bc0c
   1a5d4:	0002bbd0 	.word	0x0002bbd0
   1a5d8:	0002b0c4 	.word	0x0002b0c4

0001a5dc <abort_cb>:
{
   1a5dc:	b510      	push	{r4, lr}
	if (!prepare_param) {
   1a5de:	b1d8      	cbz	r0, 1a618 <abort_cb+0x3c>
	err = lll_hfclock_off();
   1a5e0:	460c      	mov	r4, r1
   1a5e2:	f7ff ff37 	bl	1a454 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1a5e6:	2800      	cmp	r0, #0
   1a5e8:	db04      	blt.n	1a5f4 <abort_cb+0x18>
	lll_done(param);
   1a5ea:	4620      	mov	r0, r4
}
   1a5ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1a5f0:	f7ff bcc8 	b.w	19f84 <lll_done>
	LL_ASSERT(err >= 0);
   1a5f4:	4a0c      	ldr	r2, [pc, #48]	; (1a628 <abort_cb+0x4c>)
   1a5f6:	490d      	ldr	r1, [pc, #52]	; (1a62c <abort_cb+0x50>)
   1a5f8:	480d      	ldr	r0, [pc, #52]	; (1a630 <abort_cb+0x54>)
   1a5fa:	f240 339d 	movw	r3, #925	; 0x39d
   1a5fe:	f009 fff1 	bl	245e4 <printk>
   1a602:	4040      	eors	r0, r0
   1a604:	f380 8811 	msr	BASEPRI, r0
   1a608:	f04f 0003 	mov.w	r0, #3
   1a60c:	df02      	svc	2
	lll_done(param);
   1a60e:	4620      	mov	r0, r4
}
   1a610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1a614:	f7ff bcb6 	b.w	19f84 <lll_done>
		radio_isr_set(isr_abort, param);
   1a618:	4806      	ldr	r0, [pc, #24]	; (1a634 <abort_cb+0x58>)
   1a61a:	f001 fa85 	bl	1bb28 <radio_isr_set>
}
   1a61e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   1a622:	f001 bb79 	b.w	1bd18 <radio_disable>
   1a626:	bf00      	nop
   1a628:	0002bc0c 	.word	0x0002bc0c
   1a62c:	0002bbd0 	.word	0x0002bbd0
   1a630:	0002b0c4 	.word	0x0002b0c4
   1a634:	0001a4a1 	.word	0x0001a4a1

0001a638 <lll_adv_init>:
{
   1a638:	e92d 4148 	stmdb	sp!, {r3, r6, r8, lr}
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   1a63c:	4b0f      	ldr	r3, [pc, #60]	; (1a67c <lll_adv_init+0x44>)
   1a63e:	2205      	movs	r2, #5
   1a640:	1d18      	adds	r0, r3, #4
   1a642:	2128      	movs	r1, #40	; 0x28
   1a644:	f7f4 fb82 	bl	ed4c <mem_init>
	MFIFO_INIT(pdu_free);
   1a648:	4b0d      	ldr	r3, [pc, #52]	; (1a680 <lll_adv_init+0x48>)
   1a64a:	2200      	movs	r2, #0
   1a64c:	805a      	strh	r2, [r3, #2]
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   1a64e:	f3ef 8105 	mrs	r1, IPSR
	if (value) {
   1a652:	b919      	cbnz	r1, 1a65c <lll_adv_init+0x24>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   1a654:	f3ef 8314 	mrs	r3, CONTROL
	if (z_syscall_trap()) {
   1a658:	07db      	lsls	r3, r3, #31
   1a65a:	d407      	bmi.n	1a66c <lll_adv_init+0x34>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1a65c:	2203      	movs	r2, #3
   1a65e:	2100      	movs	r1, #0
   1a660:	4808      	ldr	r0, [pc, #32]	; (1a684 <lll_adv_init+0x4c>)
   1a662:	f00f f9f4 	bl	29a4e <z_impl_k_sem_init>
}
   1a666:	2000      	movs	r0, #0
   1a668:	e8bd 8148 	ldmia.w	sp!, {r3, r6, r8, pc}
	register uint32_t ret __asm__("r0") = arg1;
   1a66c:	4805      	ldr	r0, [pc, #20]	; (1a684 <lll_adv_init+0x4c>)
	register uint32_t r2 __asm__("r2") = arg3;
   1a66e:	2203      	movs	r2, #3
	register uint32_t r6 __asm__("r6") = call_id;
   1a670:	26a1      	movs	r6, #161	; 0xa1
	__asm__ volatile("svc %[svid]\n"
   1a672:	df03      	svc	3
   1a674:	2000      	movs	r0, #0
   1a676:	e8bd 8148 	ldmia.w	sp!, {r3, r6, r8, pc}
   1a67a:	bf00      	nop
   1a67c:	20001cec 	.word	0x20001cec
   1a680:	20007b24 	.word	0x20007b24
   1a684:	20001db8 	.word	0x20001db8

0001a688 <lll_adv_reset>:
   1a688:	f7ff bfd6 	b.w	1a638 <lll_adv_init>

0001a68c <lll_adv_data_init>:
{
   1a68c:	b510      	push	{r4, lr}
   1a68e:	4604      	mov	r4, r0
	p = mem_acquire(&mem_pdu.free);
   1a690:	4805      	ldr	r0, [pc, #20]	; (1a6a8 <lll_adv_data_init+0x1c>)
   1a692:	f7f4 fb7b 	bl	ed8c <mem_acquire>
	if (!p) {
   1a696:	b120      	cbz	r0, 1a6a2 <lll_adv_data_init+0x16>
   1a698:	4603      	mov	r3, r0
	p->len = 0U;
   1a69a:	2000      	movs	r0, #0
   1a69c:	7058      	strb	r0, [r3, #1]
	pdu->pdu[0] = (void *)p;
   1a69e:	6063      	str	r3, [r4, #4]
}
   1a6a0:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   1a6a2:	f06f 000b 	mvn.w	r0, #11
}
   1a6a6:	bd10      	pop	{r4, pc}
   1a6a8:	20001cec 	.word	0x20001cec

0001a6ac <lll_adv_data_reset>:
{
   1a6ac:	4603      	mov	r3, r0
	pdu->first = 0U;
   1a6ae:	2000      	movs	r0, #0
   1a6b0:	7018      	strb	r0, [r3, #0]
	pdu->last = 0U;
   1a6b2:	7058      	strb	r0, [r3, #1]
	pdu->pdu[1] = NULL;
   1a6b4:	6098      	str	r0, [r3, #8]
}
   1a6b6:	4770      	bx	lr

0001a6b8 <lll_adv_pdu_alloc>:
{
   1a6b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	first = pdu->first;
   1a6bc:	7802      	ldrb	r2, [r0, #0]
	last = pdu->last;
   1a6be:	7843      	ldrb	r3, [r0, #1]
	if (first == last) {
   1a6c0:	429a      	cmp	r2, r3
   1a6c2:	d004      	beq.n	1a6ce <lll_adv_pdu_alloc+0x16>
		pdu->last = first;
   1a6c4:	b2d4      	uxtb	r4, r2
   1a6c6:	7044      	strb	r4, [r0, #1]
		first_latest = pdu->first;
   1a6c8:	7802      	ldrb	r2, [r0, #0]
		if (first_latest != first) {
   1a6ca:	4294      	cmp	r4, r2
   1a6cc:	d003      	beq.n	1a6d6 <lll_adv_pdu_alloc+0x1e>
		last++;
   1a6ce:	3301      	adds	r3, #1
   1a6d0:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   1a6d2:	2b02      	cmp	r3, #2
   1a6d4:	d008      	beq.n	1a6e8 <lll_adv_pdu_alloc+0x30>
	*idx = last;
   1a6d6:	461c      	mov	r4, r3
   1a6d8:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   1a6dc:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   1a6de:	6865      	ldr	r5, [r4, #4]
	if (p) {
   1a6e0:	b155      	cbz	r5, 1a6f8 <lll_adv_pdu_alloc+0x40>
}
   1a6e2:	4628      	mov	r0, r5
   1a6e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   1a6e8:	2400      	movs	r4, #0
			last = 0U;
   1a6ea:	4623      	mov	r3, r4
	*idx = last;
   1a6ec:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   1a6f0:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   1a6f2:	6865      	ldr	r5, [r4, #4]
	if (p) {
   1a6f4:	2d00      	cmp	r5, #0
   1a6f6:	d1f4      	bne.n	1a6e2 <lll_adv_pdu_alloc+0x2a>
	p = MFIFO_DEQUEUE_PEEK(pdu_free);
   1a6f8:	4f42      	ldr	r7, [pc, #264]	; (1a804 <lll_adv_pdu_alloc+0x14c>)
   1a6fa:	78ba      	ldrb	r2, [r7, #2]
	if (first == last) {
   1a6fc:	78f9      	ldrb	r1, [r7, #3]
   1a6fe:	783b      	ldrb	r3, [r7, #0]
   1a700:	4291      	cmp	r1, r2
   1a702:	d003      	beq.n	1a70c <lll_adv_pdu_alloc+0x54>
	return *((void **)(fifo + first * size));
   1a704:	fb02 7303 	mla	r3, r2, r3, r7
   1a708:	685d      	ldr	r5, [r3, #4]
	if (p) {
   1a70a:	b945      	cbnz	r5, 1a71e <lll_adv_pdu_alloc+0x66>
	p = mem_acquire(&mem_pdu.free);
   1a70c:	483e      	ldr	r0, [pc, #248]	; (1a808 <lll_adv_pdu_alloc+0x150>)
   1a70e:	f7f4 fb3d 	bl	ed8c <mem_acquire>
	if (p) {
   1a712:	4605      	mov	r5, r0
   1a714:	b1e8      	cbz	r0, 1a752 <lll_adv_pdu_alloc+0x9a>
	pdu->pdu[last] = (void *)p;
   1a716:	6065      	str	r5, [r4, #4]
}
   1a718:	4628      	mov	r0, r5
   1a71a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   1a71e:	f3ef 8105 	mrs	r1, IPSR
	if (value) {
   1a722:	b919      	cbnz	r1, 1a72c <lll_adv_pdu_alloc+0x74>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   1a724:	f3ef 8314 	mrs	r3, CONTROL
	if (z_syscall_trap()) {
   1a728:	07da      	lsls	r2, r3, #31
   1a72a:	d457      	bmi.n	1a7dc <lll_adv_pdu_alloc+0x124>
	return z_impl_k_sem_take(sem, timeout);
   1a72c:	4837      	ldr	r0, [pc, #220]	; (1a80c <lll_adv_pdu_alloc+0x154>)
   1a72e:	2200      	movs	r2, #0
   1a730:	2300      	movs	r3, #0
   1a732:	f007 fcc9 	bl	220c8 <z_impl_k_sem_take>
		LL_ASSERT(!err);
   1a736:	2800      	cmp	r0, #0
   1a738:	d13b      	bne.n	1a7b2 <lll_adv_pdu_alloc+0xfa>
	uint8_t _first = *first; /* Copy read-index */
   1a73a:	78bb      	ldrb	r3, [r7, #2]
	if (_first == last) {
   1a73c:	78fa      	ldrb	r2, [r7, #3]
		MFIFO_DEQUEUE(pdu_free);
   1a73e:	7879      	ldrb	r1, [r7, #1]
   1a740:	429a      	cmp	r2, r3
   1a742:	d0e8      	beq.n	1a716 <lll_adv_pdu_alloc+0x5e>
	_first += 1U;
   1a744:	3301      	adds	r3, #1
   1a746:	b2db      	uxtb	r3, r3
		_first = 0U;
   1a748:	4299      	cmp	r1, r3
   1a74a:	bf08      	it	eq
   1a74c:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1a74e:	70bb      	strb	r3, [r7, #2]

	return mem;
   1a750:	e7e1      	b.n	1a716 <lll_adv_pdu_alloc+0x5e>
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   1a752:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   1a756:	b91b      	cbnz	r3, 1a760 <lll_adv_pdu_alloc+0xa8>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   1a758:	f3ef 8314 	mrs	r3, CONTROL
	if (z_syscall_trap()) {
   1a75c:	07db      	lsls	r3, r3, #31
   1a75e:	d436      	bmi.n	1a7ce <lll_adv_pdu_alloc+0x116>
	return z_impl_k_sem_take(sem, timeout);
   1a760:	482a      	ldr	r0, [pc, #168]	; (1a80c <lll_adv_pdu_alloc+0x154>)
   1a762:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1a766:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a76a:	f007 fcad 	bl	220c8 <z_impl_k_sem_take>
	LL_ASSERT(!err);
   1a76e:	2800      	cmp	r0, #0
   1a770:	d139      	bne.n	1a7e6 <lll_adv_pdu_alloc+0x12e>
	uint8_t _first = *first; /* Copy read-index */
   1a772:	78bb      	ldrb	r3, [r7, #2]
	if (_first == last) {
   1a774:	78f9      	ldrb	r1, [r7, #3]
	p = MFIFO_DEQUEUE(pdu_free);
   1a776:	783a      	ldrb	r2, [r7, #0]
   1a778:	7878      	ldrb	r0, [r7, #1]
   1a77a:	4299      	cmp	r1, r3
   1a77c:	d00a      	beq.n	1a794 <lll_adv_pdu_alloc+0xdc>
	mem = *((void **)(fifo + _first * size));
   1a77e:	fb03 7202 	mla	r2, r3, r2, r7
	_first += 1U;
   1a782:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   1a784:	6855      	ldr	r5, [r2, #4]
	_first += 1U;
   1a786:	b2db      	uxtb	r3, r3
		_first = 0U;
   1a788:	4298      	cmp	r0, r3
   1a78a:	bf08      	it	eq
   1a78c:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1a78e:	70bb      	strb	r3, [r7, #2]
	LL_ASSERT(p);
   1a790:	2d00      	cmp	r5, #0
   1a792:	d1c0      	bne.n	1a716 <lll_adv_pdu_alloc+0x5e>
   1a794:	4a1e      	ldr	r2, [pc, #120]	; (1a810 <lll_adv_pdu_alloc+0x158>)
   1a796:	491f      	ldr	r1, [pc, #124]	; (1a814 <lll_adv_pdu_alloc+0x15c>)
   1a798:	481f      	ldr	r0, [pc, #124]	; (1a818 <lll_adv_pdu_alloc+0x160>)
   1a79a:	f240 2382 	movw	r3, #642	; 0x282
   1a79e:	f009 ff21 	bl	245e4 <printk>
   1a7a2:	4040      	eors	r0, r0
   1a7a4:	f380 8811 	msr	BASEPRI, r0
   1a7a8:	f04f 0003 	mov.w	r0, #3
   1a7ac:	df02      	svc	2
   1a7ae:	2500      	movs	r5, #0
   1a7b0:	e7b1      	b.n	1a716 <lll_adv_pdu_alloc+0x5e>
		LL_ASSERT(!err);
   1a7b2:	4a17      	ldr	r2, [pc, #92]	; (1a810 <lll_adv_pdu_alloc+0x158>)
   1a7b4:	4919      	ldr	r1, [pc, #100]	; (1a81c <lll_adv_pdu_alloc+0x164>)
   1a7b6:	4818      	ldr	r0, [pc, #96]	; (1a818 <lll_adv_pdu_alloc+0x160>)
   1a7b8:	f240 236f 	movw	r3, #623	; 0x26f
   1a7bc:	f009 ff12 	bl	245e4 <printk>
   1a7c0:	4040      	eors	r0, r0
   1a7c2:	f380 8811 	msr	BASEPRI, r0
   1a7c6:	f04f 0003 	mov.w	r0, #3
   1a7ca:	df02      	svc	2
   1a7cc:	e7b5      	b.n	1a73a <lll_adv_pdu_alloc+0x82>
	register uint32_t r1 __asm__("r1") = arg2;
   1a7ce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	register uint32_t ret __asm__("r0") = arg1;
   1a7d2:	480e      	ldr	r0, [pc, #56]	; (1a80c <lll_adv_pdu_alloc+0x154>)
	register uint32_t r2 __asm__("r2") = arg3;
   1a7d4:	460a      	mov	r2, r1
	register uint32_t r6 __asm__("r6") = call_id;
   1a7d6:	26a3      	movs	r6, #163	; 0xa3
	__asm__ volatile("svc %[svid]\n"
   1a7d8:	df03      	svc	3
	return ret;
   1a7da:	e7c8      	b.n	1a76e <lll_adv_pdu_alloc+0xb6>
	register uint32_t ret __asm__("r0") = arg1;
   1a7dc:	480b      	ldr	r0, [pc, #44]	; (1a80c <lll_adv_pdu_alloc+0x154>)
	register uint32_t r2 __asm__("r2") = arg3;
   1a7de:	460a      	mov	r2, r1
	register uint32_t r6 __asm__("r6") = call_id;
   1a7e0:	26a3      	movs	r6, #163	; 0xa3
	__asm__ volatile("svc %[svid]\n"
   1a7e2:	df03      	svc	3
	return ret;
   1a7e4:	e7a7      	b.n	1a736 <lll_adv_pdu_alloc+0x7e>
	LL_ASSERT(!err);
   1a7e6:	4a0a      	ldr	r2, [pc, #40]	; (1a810 <lll_adv_pdu_alloc+0x158>)
   1a7e8:	490c      	ldr	r1, [pc, #48]	; (1a81c <lll_adv_pdu_alloc+0x164>)
   1a7ea:	480b      	ldr	r0, [pc, #44]	; (1a818 <lll_adv_pdu_alloc+0x160>)
   1a7ec:	f240 237f 	movw	r3, #639	; 0x27f
   1a7f0:	f009 fef8 	bl	245e4 <printk>
   1a7f4:	4040      	eors	r0, r0
   1a7f6:	f380 8811 	msr	BASEPRI, r0
   1a7fa:	f04f 0003 	mov.w	r0, #3
   1a7fe:	df02      	svc	2
   1a800:	e7b7      	b.n	1a772 <lll_adv_pdu_alloc+0xba>
   1a802:	bf00      	nop
   1a804:	20007b24 	.word	0x20007b24
   1a808:	20001cec 	.word	0x20001cec
   1a80c:	20001db8 	.word	0x20001db8
   1a810:	0002bc0c 	.word	0x0002bc0c
   1a814:	0002bc6c 	.word	0x0002bc6c
   1a818:	0002b0c4 	.word	0x0002b0c4
   1a81c:	0002b384 	.word	0x0002b384

0001a820 <lll_adv_pdu_latest_get>:
{
   1a820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	first = pdu->first;
   1a824:	7803      	ldrb	r3, [r0, #0]
	if (first != pdu->last) {
   1a826:	7847      	ldrb	r7, [r0, #1]
   1a828:	429f      	cmp	r7, r3
{
   1a82a:	4604      	mov	r4, r0
	if (first != pdu->last) {
   1a82c:	d02c      	beq.n	1a888 <lll_adv_pdu_latest_get+0x68>
		if (!MFIFO_ENQUEUE_IDX_GET(pdu_free, &free_idx)) {
   1a82e:	4d1c      	ldr	r5, [pc, #112]	; (1a8a0 <lll_adv_pdu_latest_get+0x80>)
   1a830:	b2da      	uxtb	r2, r3
	last = last + 1;
   1a832:	78eb      	ldrb	r3, [r5, #3]
	if (last == count) {
   1a834:	786e      	ldrb	r6, [r5, #1]
   1a836:	78a8      	ldrb	r0, [r5, #2]
	last = last + 1;
   1a838:	3301      	adds	r3, #1
   1a83a:	b2db      	uxtb	r3, r3
		last = 0U;
   1a83c:	429e      	cmp	r6, r3
   1a83e:	bf08      	it	eq
   1a840:	2300      	moveq	r3, #0
	if (last == first) {
   1a842:	4298      	cmp	r0, r3
   1a844:	d025      	beq.n	1a892 <lll_adv_pdu_latest_get+0x72>
		first += 1U;
   1a846:	1c50      	adds	r0, r2, #1
   1a848:	b2c0      	uxtb	r0, r0
		if (first == DOUBLE_BUFFER_SIZE) {
   1a84a:	2802      	cmp	r0, #2
   1a84c:	bf04      	itt	eq
   1a84e:	2700      	moveq	r7, #0
			first = 0U;
   1a850:	4638      	moveq	r0, r7
		*is_modified = 1U;
   1a852:	f04f 0601 	mov.w	r6, #1
		pdu->first = first;
   1a856:	7020      	strb	r0, [r4, #0]
		*is_modified = 1U;
   1a858:	700e      	strb	r6, [r1, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1a85a:	7829      	ldrb	r1, [r5, #0]
   1a85c:	bf18      	it	ne
   1a85e:	4607      	movne	r7, r0
   1a860:	78e8      	ldrb	r0, [r5, #3]
   1a862:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1a866:	fb00 5101 	mla	r1, r0, r1, r5
		pdu->pdu[pdu_idx] = NULL;
   1a86a:	2600      	movs	r6, #0
		p = pdu->pdu[pdu_idx];
   1a86c:	6850      	ldr	r0, [r2, #4]
		pdu->pdu[pdu_idx] = NULL;
   1a86e:	6056      	str	r6, [r2, #4]
   1a870:	6048      	str	r0, [r1, #4]
	*last = idx; /* Commit: Update write index */
   1a872:	70eb      	strb	r3, [r5, #3]
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   1a874:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   1a878:	b91b      	cbnz	r3, 1a882 <lll_adv_pdu_latest_get+0x62>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   1a87a:	f3ef 8314 	mrs	r3, CONTROL
	if (z_syscall_trap()) {
   1a87e:	07db      	lsls	r3, r3, #31
   1a880:	d40a      	bmi.n	1a898 <lll_adv_pdu_latest_get+0x78>
	z_impl_k_sem_give(sem);
   1a882:	4808      	ldr	r0, [pc, #32]	; (1a8a4 <lll_adv_pdu_latest_get+0x84>)
   1a884:	f007 fbbe 	bl	22004 <z_impl_k_sem_give>
	return (void *)pdu->pdu[first];
   1a888:	eb04 0487 	add.w	r4, r4, r7, lsl #2
   1a88c:	6860      	ldr	r0, [r4, #4]
}
   1a88e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return NULL;
   1a892:	2000      	movs	r0, #0
}
   1a894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	register uint32_t ret __asm__("r0") = arg1;
   1a898:	4802      	ldr	r0, [pc, #8]	; (1a8a4 <lll_adv_pdu_latest_get+0x84>)
	register uint32_t r6 __asm__("r6") = call_id;
   1a89a:	26a0      	movs	r6, #160	; 0xa0
	__asm__ volatile("svc %[svid]\n"
   1a89c:	df03      	svc	3
		return;
   1a89e:	e7f3      	b.n	1a888 <lll_adv_pdu_latest_get+0x68>
   1a8a0:	20007b24 	.word	0x20007b24
   1a8a4:	20001db8 	.word	0x20001db8

0001a8a8 <chan_prepare>:
{
	struct pdu_adv *pdu;
	uint8_t chan;
	uint8_t upd;

	chan = find_lsb_set(lll->chan_map_curr);
   1a8a8:	7a03      	ldrb	r3, [r0, #8]
{
   1a8aa:	b570      	push	{r4, r5, r6, lr}
	chan = find_lsb_set(lll->chan_map_curr);
   1a8ac:	f3c3 1302 	ubfx	r3, r3, #4, #3
   1a8b0:	2b00      	cmp	r3, #0
{
   1a8b2:	4604      	mov	r4, r0
   1a8b4:	fa93 f0a3 	rbit	r0, r3
   1a8b8:	fab0 f080 	clz	r0, r0
   1a8bc:	bf08      	it	eq
   1a8be:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
	LL_ASSERT(chan);
   1a8c2:	1c45      	adds	r5, r0, #1
{
   1a8c4:	b082      	sub	sp, #8
	LL_ASSERT(chan);
   1a8c6:	d047      	beq.n	1a958 <chan_prepare+0xb0>

	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   1a8c8:	7a22      	ldrb	r2, [r4, #8]
   1a8ca:	1e59      	subs	r1, r3, #1
   1a8cc:	400b      	ands	r3, r1
   1a8ce:	f363 1206 	bfi	r2, r3, #4, #3

	lll_chan_set(36 + chan);
   1a8d2:	f105 0024 	add.w	r0, r5, #36	; 0x24
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   1a8d6:	7222      	strb	r2, [r4, #8]
	lll_chan_set(36 + chan);
   1a8d8:	f7ff fbc8 	bl	1a06c <lll_chan_set>

	/* FIXME: get latest only when primary PDU without Aux PDUs */
	upd = 0U;
   1a8dc:	2300      	movs	r3, #0
#endif /* CONFIG_BT_CTLR_ADV_EXT_PDU_EXTRA_DATA_MEMORY */

static inline struct pdu_adv *lll_adv_data_latest_get(struct lll_adv *lll,
						      uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->adv_data, is_modified);
   1a8de:	f10d 0107 	add.w	r1, sp, #7
   1a8e2:	f104 000c 	add.w	r0, r4, #12
   1a8e6:	f88d 3007 	strb.w	r3, [sp, #7]
   1a8ea:	f7ff ff99 	bl	1a820 <lll_adv_pdu_latest_get>
	pdu = lll_adv_data_latest_get(lll, &upd);
	LL_ASSERT(pdu);
   1a8ee:	4605      	mov	r5, r0
   1a8f0:	2800      	cmp	r0, #0
   1a8f2:	d042      	beq.n	1a97a <chan_prepare+0xd2>

	radio_pkt_tx_set(pdu);
   1a8f4:	4628      	mov	r0, r5
   1a8f6:	f001 f9f9 	bl	1bcec <radio_pkt_tx_set>

	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   1a8fa:	782b      	ldrb	r3, [r5, #0]
   1a8fc:	f003 030f 	and.w	r3, r3, #15
   1a900:	2b02      	cmp	r3, #2
   1a902:	d020      	beq.n	1a946 <chan_prepare+0x9e>
}

static inline struct pdu_adv *lll_adv_scan_rsp_latest_get(struct lll_adv *lll,
							  uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
   1a904:	f10d 0107 	add.w	r1, sp, #7
   1a908:	f104 0018 	add.w	r0, r4, #24
   1a90c:	f7ff ff88 	bl	1a820 <lll_adv_pdu_latest_get>
	    (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) ||
	     (pdu->type != PDU_ADV_TYPE_EXT_IND))) {
		struct pdu_adv *scan_pdu;

		scan_pdu = lll_adv_scan_rsp_latest_get(lll, &upd);
		LL_ASSERT(scan_pdu);
   1a910:	4606      	mov	r6, r0
   1a912:	2800      	cmp	r0, #0
   1a914:	d03f      	beq.n	1a996 <chan_prepare+0xee>

#if defined(CONFIG_BT_CTLR_PRIVACY)
		if (upd) {
   1a916:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1a91a:	b963      	cbnz	r3, 1a936 <chan_prepare+0x8e>
#else
		ARG_UNUSED(scan_pdu);
		ARG_UNUSED(upd);
#endif /* !CONFIG_BT_CTLR_PRIVACY */

		radio_isr_set(isr_tx, lll);
   1a91c:	4621      	mov	r1, r4
   1a91e:	4825      	ldr	r0, [pc, #148]	; (1a9b4 <chan_prepare+0x10c>)
   1a920:	f001 f902 	bl	1bb28 <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1a924:	2096      	movs	r0, #150	; 0x96
   1a926:	f001 fadf 	bl	1bee8 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   1a92a:	2000      	movs	r0, #0
   1a92c:	f001 fa54 	bl	1bdd8 <radio_switch_complete_and_rx>
		radio_isr_set(isr_done, lll);
		radio_switch_complete_and_disable();
	}

	return pdu;
}
   1a930:	4628      	mov	r0, r5
   1a932:	b002      	add	sp, #8
   1a934:	bd70      	pop	{r4, r5, r6, pc}
   1a936:	462b      	mov	r3, r5
   1a938:	f853 2f02 	ldr.w	r2, [r3, #2]!
   1a93c:	f8c6 2002 	str.w	r2, [r6, #2]
   1a940:	889b      	ldrh	r3, [r3, #4]
   1a942:	80f3      	strh	r3, [r6, #6]
   1a944:	e7ea      	b.n	1a91c <chan_prepare+0x74>
		radio_isr_set(isr_done, lll);
   1a946:	481c      	ldr	r0, [pc, #112]	; (1a9b8 <chan_prepare+0x110>)
   1a948:	4621      	mov	r1, r4
   1a94a:	f001 f8ed 	bl	1bb28 <radio_isr_set>
		radio_switch_complete_and_disable();
   1a94e:	f001 fa5d 	bl	1be0c <radio_switch_complete_and_disable>
}
   1a952:	4628      	mov	r0, r5
   1a954:	b002      	add	sp, #8
   1a956:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(chan);
   1a958:	4a18      	ldr	r2, [pc, #96]	; (1a9bc <chan_prepare+0x114>)
   1a95a:	4919      	ldr	r1, [pc, #100]	; (1a9c0 <chan_prepare+0x118>)
   1a95c:	4819      	ldr	r0, [pc, #100]	; (1a9c4 <chan_prepare+0x11c>)
   1a95e:	f240 43a6 	movw	r3, #1190	; 0x4a6
   1a962:	f009 fe3f 	bl	245e4 <printk>
   1a966:	4040      	eors	r0, r0
   1a968:	f380 8811 	msr	BASEPRI, r0
   1a96c:	f04f 0003 	mov.w	r0, #3
   1a970:	df02      	svc	2
   1a972:	7a23      	ldrb	r3, [r4, #8]
   1a974:	f3c3 1302 	ubfx	r3, r3, #4, #3
   1a978:	e7a6      	b.n	1a8c8 <chan_prepare+0x20>
	LL_ASSERT(pdu);
   1a97a:	4a10      	ldr	r2, [pc, #64]	; (1a9bc <chan_prepare+0x114>)
   1a97c:	4912      	ldr	r1, [pc, #72]	; (1a9c8 <chan_prepare+0x120>)
   1a97e:	4811      	ldr	r0, [pc, #68]	; (1a9c4 <chan_prepare+0x11c>)
   1a980:	f240 43af 	movw	r3, #1199	; 0x4af
   1a984:	f009 fe2e 	bl	245e4 <printk>
   1a988:	4040      	eors	r0, r0
   1a98a:	f380 8811 	msr	BASEPRI, r0
   1a98e:	f04f 0003 	mov.w	r0, #3
   1a992:	df02      	svc	2
   1a994:	e7ae      	b.n	1a8f4 <chan_prepare+0x4c>
		LL_ASSERT(scan_pdu);
   1a996:	4a09      	ldr	r2, [pc, #36]	; (1a9bc <chan_prepare+0x114>)
   1a998:	490c      	ldr	r1, [pc, #48]	; (1a9cc <chan_prepare+0x124>)
   1a99a:	480a      	ldr	r0, [pc, #40]	; (1a9c4 <chan_prepare+0x11c>)
   1a99c:	f240 43b9 	movw	r3, #1209	; 0x4b9
   1a9a0:	f009 fe20 	bl	245e4 <printk>
   1a9a4:	4040      	eors	r0, r0
   1a9a6:	f380 8811 	msr	BASEPRI, r0
   1a9aa:	f04f 0003 	mov.w	r0, #3
   1a9ae:	df02      	svc	2
   1a9b0:	e7b1      	b.n	1a916 <chan_prepare+0x6e>
   1a9b2:	bf00      	nop
   1a9b4:	0001a4b9 	.word	0x0001a4b9
   1a9b8:	0001ab15 	.word	0x0001ab15
   1a9bc:	0002bc0c 	.word	0x0002bc0c
   1a9c0:	0002b8d4 	.word	0x0002b8d4
   1a9c4:	0002b0c4 	.word	0x0002b0c4
   1a9c8:	0002bc70 	.word	0x0002bc70
   1a9cc:	0002bc74 	.word	0x0002bc74

0001a9d0 <prepare_cb>:
{
   1a9d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll = p->param;
   1a9d2:	68c4      	ldr	r4, [r0, #12]
	if (unlikely(lll->conn &&
   1a9d4:	6863      	ldr	r3, [r4, #4]
{
   1a9d6:	b083      	sub	sp, #12
   1a9d8:	4605      	mov	r5, r0
	if (unlikely(lll->conn &&
   1a9da:	2b00      	cmp	r3, #0
   1a9dc:	d16d      	bne.n	1aaba <prepare_cb+0xea>
	radio_reset();
   1a9de:	f001 f8e5 	bl	1bbac <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1a9e2:	2000      	movs	r0, #0
   1a9e4:	f001 f916 	bl	1bc14 <radio_tx_power_set>
	radio_phy_set(0, 0);
   1a9e8:	2100      	movs	r1, #0
   1a9ea:	4608      	mov	r0, r1
   1a9ec:	f001 f902 	bl	1bbf4 <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_LEG_PAYLOAD_SIZE_MAX, 0);
   1a9f0:	2200      	movs	r2, #0
   1a9f2:	2125      	movs	r1, #37	; 0x25
   1a9f4:	2008      	movs	r0, #8
   1a9f6:	f001 f945 	bl	1bc84 <radio_pkt_configure>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   1a9fa:	4b35      	ldr	r3, [pc, #212]	; (1aad0 <prepare_cb+0x100>)
   1a9fc:	9301      	str	r3, [sp, #4]
	radio_aa_set((uint8_t *)&aa);
   1a9fe:	a801      	add	r0, sp, #4
   1aa00:	f001 f926 	bl	1bc50 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1aa04:	4933      	ldr	r1, [pc, #204]	; (1aad4 <prepare_cb+0x104>)
   1aa06:	f240 605b 	movw	r0, #1627	; 0x65b
   1aa0a:	f001 f9c7 	bl	1bd9c <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
   1aa0e:	7a23      	ldrb	r3, [r4, #8]
   1aa10:	f3c3 0242 	ubfx	r2, r3, #1, #3
   1aa14:	f362 1306 	bfi	r3, r2, #4, #3
   1aa18:	7223      	strb	r3, [r4, #8]
	pdu = chan_prepare(lll);
   1aa1a:	4620      	mov	r0, r4
   1aa1c:	f7ff ff44 	bl	1a8a8 <chan_prepare>
	if (ull_filter_lll_rl_enabled()) {
   1aa20:	f7ff f886 	bl	19b30 <ull_filter_lll_rl_enabled>
   1aa24:	bb98      	cbnz	r0, 1aa8e <prepare_cb+0xbe>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER) && lll->filter_policy) {
   1aa26:	7a63      	ldrb	r3, [r4, #9]
   1aa28:	079b      	lsls	r3, r3, #30
   1aa2a:	d127      	bne.n	1aa7c <prepare_cb+0xac>
	evt = HDR_LLL2EVT(lll);
   1aa2c:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   1aa2e:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   1aa30:	4638      	mov	r0, r7
   1aa32:	f7ff fafd 	bl	1a030 <lll_evt_offset_get>
   1aa36:	4406      	add	r6, r0
	start_us = radio_tmr_start(1, ticks_at_start, remainder);
   1aa38:	686a      	ldr	r2, [r5, #4]
   1aa3a:	f106 0109 	add.w	r1, r6, #9
   1aa3e:	2001      	movs	r0, #1
   1aa40:	f001 fa5e 	bl	1bf00 <radio_tmr_start>
	radio_tmr_end_capture();
   1aa44:	f001 fb30 	bl	1c0a8 <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
   1aa48:	4620      	mov	r0, r4
   1aa4a:	f7f9 f911 	bl	13c70 <ull_adv_lll_handle_get>
	if (lll_preempt_calc(evt, (TICKER_ID_ADV_BASE +
   1aa4e:	1c81      	adds	r1, r0, #2
   1aa50:	4632      	mov	r2, r6
   1aa52:	b2c9      	uxtb	r1, r1
   1aa54:	4638      	mov	r0, r7
   1aa56:	f7ff faf9 	bl	1a04c <lll_preempt_calc>
   1aa5a:	b930      	cbnz	r0, 1aa6a <prepare_cb+0x9a>
		ret = lll_prepare_done(lll);
   1aa5c:	4620      	mov	r0, r4
   1aa5e:	f7ff fa8f 	bl	19f80 <lll_prepare_done>
		LL_ASSERT(!ret);
   1aa62:	b9d0      	cbnz	r0, 1aa9a <prepare_cb+0xca>
}
   1aa64:	2000      	movs	r0, #0
   1aa66:	b003      	add	sp, #12
   1aa68:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(isr_abort, lll);
   1aa6a:	481b      	ldr	r0, [pc, #108]	; (1aad8 <prepare_cb+0x108>)
   1aa6c:	4621      	mov	r1, r4
   1aa6e:	f001 f85b 	bl	1bb28 <radio_isr_set>
		radio_disable();
   1aa72:	f001 f951 	bl	1bd18 <radio_disable>
}
   1aa76:	2000      	movs	r0, #0
   1aa78:	b003      	add	sp, #12
   1aa7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct lll_filter *wl = ull_filter_lll_get(true);
   1aa7c:	2001      	movs	r0, #1
   1aa7e:	f7ff f811 	bl	19aa4 <ull_filter_lll_get>
		radio_filter_configure(wl->enable_bitmask,
   1aa82:	7841      	ldrb	r1, [r0, #1]
   1aa84:	1c82      	adds	r2, r0, #2
   1aa86:	7800      	ldrb	r0, [r0, #0]
   1aa88:	f001 f9e0 	bl	1be4c <radio_filter_configure>
   1aa8c:	e7ce      	b.n	1aa2c <prepare_cb+0x5c>
			ull_filter_lll_get(!!(lll->filter_policy));
   1aa8e:	7a60      	ldrb	r0, [r4, #9]
   1aa90:	f010 0003 	ands.w	r0, r0, #3
   1aa94:	bf18      	it	ne
   1aa96:	2001      	movne	r0, #1
   1aa98:	e7f1      	b.n	1aa7e <prepare_cb+0xae>
		LL_ASSERT(!ret);
   1aa9a:	4a10      	ldr	r2, [pc, #64]	; (1aadc <prepare_cb+0x10c>)
   1aa9c:	4910      	ldr	r1, [pc, #64]	; (1aae0 <prepare_cb+0x110>)
   1aa9e:	4811      	ldr	r0, [pc, #68]	; (1aae4 <prepare_cb+0x114>)
   1aaa0:	f240 334e 	movw	r3, #846	; 0x34e
   1aaa4:	f009 fd9e 	bl	245e4 <printk>
   1aaa8:	4040      	eors	r0, r0
   1aaaa:	f380 8811 	msr	BASEPRI, r0
   1aaae:	f04f 0003 	mov.w	r0, #3
   1aab2:	df02      	svc	2
}
   1aab4:	2000      	movs	r0, #0
   1aab6:	b003      	add	sp, #12
   1aab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (unlikely(lll->conn &&
   1aaba:	f893 3020 	ldrb.w	r3, [r3, #32]
   1aabe:	079a      	lsls	r2, r3, #30
   1aac0:	d08d      	beq.n	1a9de <prepare_cb+0xe>
		radio_isr_set(lll_isr_early_abort, lll);
   1aac2:	4809      	ldr	r0, [pc, #36]	; (1aae8 <prepare_cb+0x118>)
   1aac4:	4621      	mov	r1, r4
   1aac6:	f001 f82f 	bl	1bb28 <radio_isr_set>
		radio_disable();
   1aaca:	f001 f925 	bl	1bd18 <radio_disable>
		return 0;
   1aace:	e7c9      	b.n	1aa64 <prepare_cb+0x94>
   1aad0:	8e89bed6 	.word	0x8e89bed6
   1aad4:	00555555 	.word	0x00555555
   1aad8:	0001a4a1 	.word	0x0001a4a1
   1aadc:	0002bc0c 	.word	0x0002bc0c
   1aae0:	0002b458 	.word	0x0002b458
   1aae4:	0002b0c4 	.word	0x0002b0c4
   1aae8:	0001a1b5 	.word	0x0001a1b5

0001aaec <resume_prepare_cb>:
	evt = HDR_LLL2EVT(p->param);
   1aaec:	68c3      	ldr	r3, [r0, #12]
{
   1aaee:	b570      	push	{r4, r5, r6, lr}
	evt = HDR_LLL2EVT(p->param);
   1aaf0:	681e      	ldr	r6, [r3, #0]
{
   1aaf2:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   1aaf4:	f7f5 fd6c 	bl	105d0 <ticker_ticks_now_get>
   1aaf8:	4605      	mov	r5, r0
   1aafa:	4630      	mov	r0, r6
   1aafc:	f7ff fa98 	bl	1a030 <lll_evt_offset_get>
	p->remainder = 0;
   1ab00:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   1ab02:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   1ab04:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   1ab08:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   1ab0a:	4620      	mov	r0, r4
}
   1ab0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   1ab10:	f7ff bf5e 	b.w	1a9d0 <prepare_cb>

0001ab14 <isr_done>:
{
   1ab14:	b510      	push	{r4, lr}
   1ab16:	4604      	mov	r4, r0
	lll_isr_status_reset();
   1ab18:	f7ff fafe 	bl	1a118 <lll_isr_status_reset>
	if (!IS_ENABLED(CONFIG_BT_CTLR_LOW_LAT) && lll->is_hdcd &&
   1ab1c:	7a23      	ldrb	r3, [r4, #8]
   1ab1e:	f003 0271 	and.w	r2, r3, #113	; 0x71
   1ab22:	2a01      	cmp	r2, #1
   1ab24:	d105      	bne.n	1ab32 <isr_done+0x1e>
		lll->chan_map_curr = lll->chan_map;
   1ab26:	f3c3 0242 	ubfx	r2, r3, #1, #3
   1ab2a:	f362 1306 	bfi	r3, r2, #4, #3
   1ab2e:	7223      	strb	r3, [r4, #8]
   1ab30:	b2db      	uxtb	r3, r3
	if (lll->chan_map_curr &&
   1ab32:	f013 0f70 	tst.w	r3, #112	; 0x70
   1ab36:	d005      	beq.n	1ab44 <isr_done+0x30>
	    (!lll->conn || !lll->conn->slave.cancelled) &&
   1ab38:	6863      	ldr	r3, [r4, #4]
   1ab3a:	b153      	cbz	r3, 1ab52 <isr_done+0x3e>
   1ab3c:	f893 3020 	ldrb.w	r3, [r3, #32]
   1ab40:	079b      	lsls	r3, r3, #30
   1ab42:	d506      	bpl.n	1ab52 <isr_done+0x3e>
	radio_filter_disable();
   1ab44:	f001 f99e 	bl	1be84 <radio_filter_disable>
	lll_isr_cleanup(param);
   1ab48:	4620      	mov	r0, r4
}
   1ab4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1ab4e:	f7ff baf1 	b.w	1a134 <lll_isr_cleanup>
		pdu = chan_prepare(lll);
   1ab52:	4620      	mov	r0, r4
   1ab54:	f7ff fea8 	bl	1a8a8 <chan_prepare>
		radio_tx_enable();
   1ab58:	f001 f8d8 	bl	1bd0c <radio_tx_enable>
}
   1ab5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   1ab60:	f001 baa2 	b.w	1c0a8 <radio_tmr_end_capture>

0001ab64 <lll_adv_prepare>:
{
   1ab64:	b510      	push	{r4, lr}
   1ab66:	b082      	sub	sp, #8
   1ab68:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1ab6a:	f7ff fc5b 	bl	1a424 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1ab6e:	2800      	cmp	r0, #0
   1ab70:	db1a      	blt.n	1aba8 <lll_adv_prepare+0x44>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   1ab72:	4a14      	ldr	r2, [pc, #80]	; (1abc4 <lll_adv_prepare+0x60>)
   1ab74:	4914      	ldr	r1, [pc, #80]	; (1abc8 <lll_adv_prepare+0x64>)
   1ab76:	4815      	ldr	r0, [pc, #84]	; (1abcc <lll_adv_prepare+0x68>)
   1ab78:	9400      	str	r4, [sp, #0]
   1ab7a:	2300      	movs	r3, #0
   1ab7c:	f7f8 fcd6 	bl	1352c <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1ab80:	b108      	cbz	r0, 1ab86 <lll_adv_prepare+0x22>
   1ab82:	3077      	adds	r0, #119	; 0x77
   1ab84:	d101      	bne.n	1ab8a <lll_adv_prepare+0x26>
}
   1ab86:	b002      	add	sp, #8
   1ab88:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1ab8a:	4a11      	ldr	r2, [pc, #68]	; (1abd0 <lll_adv_prepare+0x6c>)
   1ab8c:	4911      	ldr	r1, [pc, #68]	; (1abd4 <lll_adv_prepare+0x70>)
   1ab8e:	4812      	ldr	r0, [pc, #72]	; (1abd8 <lll_adv_prepare+0x74>)
   1ab90:	f44f 73f4 	mov.w	r3, #488	; 0x1e8
   1ab94:	f009 fd26 	bl	245e4 <printk>
   1ab98:	4040      	eors	r0, r0
   1ab9a:	f380 8811 	msr	BASEPRI, r0
   1ab9e:	f04f 0003 	mov.w	r0, #3
   1aba2:	df02      	svc	2
}
   1aba4:	b002      	add	sp, #8
   1aba6:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   1aba8:	4a09      	ldr	r2, [pc, #36]	; (1abd0 <lll_adv_prepare+0x6c>)
   1abaa:	490c      	ldr	r1, [pc, #48]	; (1abdc <lll_adv_prepare+0x78>)
   1abac:	480a      	ldr	r0, [pc, #40]	; (1abd8 <lll_adv_prepare+0x74>)
   1abae:	f240 13e5 	movw	r3, #485	; 0x1e5
   1abb2:	f009 fd17 	bl	245e4 <printk>
   1abb6:	4040      	eors	r0, r0
   1abb8:	f380 8811 	msr	BASEPRI, r0
   1abbc:	f04f 0003 	mov.w	r0, #3
   1abc0:	df02      	svc	2
   1abc2:	e7d6      	b.n	1ab72 <lll_adv_prepare+0xe>
   1abc4:	0001a9d1 	.word	0x0001a9d1
   1abc8:	0001a5dd 	.word	0x0001a5dd
   1abcc:	0001a56d 	.word	0x0001a56d
   1abd0:	0002bc0c 	.word	0x0002bc0c
   1abd4:	0002bc80 	.word	0x0002bc80
   1abd8:	0002b0c4 	.word	0x0002b0c4
   1abdc:	0002bbd0 	.word	0x0002bbd0

0001abe0 <lll_adv_scan_req_check>:
{
   1abe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return ((((lll->filter_policy & 0x01) == 0) &&
   1abe4:	7a45      	ldrb	r5, [r0, #9]
{
   1abe6:	f89d 8020 	ldrb.w	r8, [sp, #32]
   1abea:	4617      	mov	r7, r2
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1abec:	07ea      	lsls	r2, r5, #31
{
   1abee:	4689      	mov	r9, r1
   1abf0:	461e      	mov	r6, r3
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1abf2:	d50a      	bpl.n	1ac0a <lll_adv_scan_req_check+0x2a>
		(((lll->filter_policy & 0x01) != 0) &&
   1abf4:	f1b8 0f00 	cmp.w	r8, #0
   1abf8:	d017      	beq.n	1ac2a <lll_adv_scan_req_check+0x4a>
}

static bool isr_rx_sr_adva_check(uint8_t tx_addr, uint8_t *addr,
				 struct pdu_adv *sr)
{
	return (tx_addr == sr->rx_addr) &&
   1abfa:	f899 3000 	ldrb.w	r3, [r9]
   1abfe:	ebb7 1fd3 	cmp.w	r7, r3, lsr #7
   1ac02:	d019      	beq.n	1ac38 <lll_adv_scan_req_check+0x58>
{
   1ac04:	2000      	movs	r0, #0
}
   1ac06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1ac0a:	4604      	mov	r4, r0
		 ull_filter_lll_rl_addr_allowed(sr->tx_addr,
   1ac0c:	f811 0b02 	ldrb.w	r0, [r1], #2
   1ac10:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1ac12:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1ac16:	f7fe ff51 	bl	19abc <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & 0x01) == 0) &&
   1ac1a:	2800      	cmp	r0, #0
   1ac1c:	d1ed      	bne.n	1abfa <lll_adv_scan_req_check+0x1a>
		(((lll->filter_policy & 0x01) != 0) &&
   1ac1e:	7a63      	ldrb	r3, [r4, #9]
						rl_idx)) ||
   1ac20:	07db      	lsls	r3, r3, #31
   1ac22:	d5ef      	bpl.n	1ac04 <lll_adv_scan_req_check+0x24>
		(((lll->filter_policy & 0x01) != 0) &&
   1ac24:	f1b8 0f00 	cmp.w	r8, #0
   1ac28:	d1e7      	bne.n	1abfa <lll_adv_scan_req_check+0x1a>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1ac2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ac2c:	7818      	ldrb	r0, [r3, #0]
   1ac2e:	f7fe ff09 	bl	19a44 <ull_filter_lll_irk_whitelisted>
   1ac32:	2800      	cmp	r0, #0
   1ac34:	d1e1      	bne.n	1abfa <lll_adv_scan_req_check+0x1a>
   1ac36:	e7e5      	b.n	1ac04 <lll_adv_scan_req_check+0x24>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   1ac38:	f109 0108 	add.w	r1, r9, #8
   1ac3c:	4630      	mov	r0, r6
   1ac3e:	2206      	movs	r2, #6
   1ac40:	f00f fbc0 	bl	2a3c4 <memcmp>
	return (tx_addr == sr->rx_addr) &&
   1ac44:	fab0 f080 	clz	r0, r0
   1ac48:	0940      	lsrs	r0, r0, #5
}
   1ac4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1ac4e:	bf00      	nop

0001ac50 <lll_adv_connect_ind_check>:
{
   1ac50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ac54:	461f      	mov	r7, r3
	if (tgt_addr) {
   1ac56:	9b09      	ldr	r3, [sp, #36]	; 0x24
{
   1ac58:	f89d 8020 	ldrb.w	r8, [sp, #32]
   1ac5c:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
   1ac60:	4605      	mov	r5, r0
   1ac62:	460c      	mov	r4, r1
   1ac64:	4692      	mov	sl, r2
	if (tgt_addr) {
   1ac66:	b9fb      	cbnz	r3, 1aca8 <lll_adv_connect_ind_check+0x58>
	return ((((lll->filter_policy & 0x02) == 0) &&
   1ac68:	7a43      	ldrb	r3, [r0, #9]
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1ac6a:	079a      	lsls	r2, r3, #30
   1ac6c:	d507      	bpl.n	1ac7e <lll_adv_connect_ind_check+0x2e>
		(((lll->filter_policy & 0x02) != 0) &&
   1ac6e:	b1a6      	cbz	r6, 1ac9a <lll_adv_connect_ind_check+0x4a>
}

static inline bool isr_rx_ci_adva_check(uint8_t tx_addr, uint8_t *addr,
					struct pdu_adv *ci)
{
	return (tx_addr == ci->rx_addr) &&
   1ac70:	7823      	ldrb	r3, [r4, #0]
   1ac72:	ebba 1fd3 	cmp.w	sl, r3, lsr #7
   1ac76:	d03a      	beq.n	1acee <lll_adv_connect_ind_check+0x9e>
   1ac78:	2000      	movs	r0, #0
}
   1ac7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		 ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   1ac7e:	f811 0b02 	ldrb.w	r0, [r1], #2
   1ac82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1ac84:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1ac88:	f7fe ff18 	bl	19abc <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & 0x02) == 0) &&
   1ac8c:	2800      	cmp	r0, #0
   1ac8e:	d1ef      	bne.n	1ac70 <lll_adv_connect_ind_check+0x20>
		(((lll->filter_policy & 0x02) != 0) &&
   1ac90:	7a6b      	ldrb	r3, [r5, #9]
						rl_idx)) ||
   1ac92:	079b      	lsls	r3, r3, #30
   1ac94:	d5f0      	bpl.n	1ac78 <lll_adv_connect_ind_check+0x28>
		(((lll->filter_policy & 0x02) != 0) &&
   1ac96:	2e00      	cmp	r6, #0
   1ac98:	d1ea      	bne.n	1ac70 <lll_adv_connect_ind_check+0x20>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1ac9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ac9c:	7818      	ldrb	r0, [r3, #0]
   1ac9e:	f7fe fed1 	bl	19a44 <ull_filter_lll_irk_whitelisted>
   1aca2:	2800      	cmp	r0, #0
   1aca4:	d1e4      	bne.n	1ac70 <lll_adv_connect_ind_check+0x20>
   1aca6:	e7e7      	b.n	1ac78 <lll_adv_connect_ind_check+0x28>
						      ci->connect_ind.init_addr,
   1aca8:	4689      	mov	r9, r1
		return ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   1acaa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1acac:	f819 0b02 	ldrb.w	r0, [r9], #2
   1acb0:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1acb4:	4649      	mov	r1, r9
   1acb6:	f7fe ff01 	bl	19abc <ull_filter_lll_rl_addr_allowed>
		       isr_rx_ci_adva_check(tx_addr, addr, ci) &&
   1acba:	2800      	cmp	r0, #0
   1acbc:	d0dc      	beq.n	1ac78 <lll_adv_connect_ind_check+0x28>
	return (tx_addr == ci->rx_addr) &&
   1acbe:	7823      	ldrb	r3, [r4, #0]
   1acc0:	ebba 1fd3 	cmp.w	sl, r3, lsr #7
   1acc4:	d1d8      	bne.n	1ac78 <lll_adv_connect_ind_check+0x28>
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   1acc6:	4638      	mov	r0, r7
   1acc8:	2206      	movs	r2, #6
   1acca:	f104 0108 	add.w	r1, r4, #8
   1acce:	f00f fb79 	bl	2a3c4 <memcmp>
	return (tx_addr == ci->rx_addr) &&
   1acd2:	2800      	cmp	r0, #0
   1acd4:	d1d0      	bne.n	1ac78 <lll_adv_connect_ind_check+0x28>
		       isr_rx_ci_tgta_check(lll, rx_addr, tgt_addr, ci,
   1acd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1acd8:	7818      	ldrb	r0, [r3, #0]
	if (rl_idx != FILTER_IDX_NONE && lll->rl_idx != FILTER_IDX_NONE) {
   1acda:	28ff      	cmp	r0, #255	; 0xff
   1acdc:	d011      	beq.n	1ad02 <lll_adv_connect_ind_check+0xb2>
   1acde:	7aab      	ldrb	r3, [r5, #10]
   1ace0:	2bff      	cmp	r3, #255	; 0xff
   1ace2:	d00e      	beq.n	1ad02 <lll_adv_connect_ind_check+0xb2>
		return rl_idx == lll->rl_idx;
   1ace4:	1ac0      	subs	r0, r0, r3
   1ace6:	fab0 f080 	clz	r0, r0
   1acea:	0940      	lsrs	r0, r0, #5
   1acec:	e7c5      	b.n	1ac7a <lll_adv_connect_ind_check+0x2a>
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   1acee:	f104 0108 	add.w	r1, r4, #8
   1acf2:	4638      	mov	r0, r7
   1acf4:	2206      	movs	r2, #6
   1acf6:	f00f fb65 	bl	2a3c4 <memcmp>
	return (tx_addr == ci->rx_addr) &&
   1acfa:	fab0 f080 	clz	r0, r0
   1acfe:	0940      	lsrs	r0, r0, #5
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1ad00:	e7bb      	b.n	1ac7a <lll_adv_connect_ind_check+0x2a>
	return (rx_addr == ci->tx_addr) &&
   1ad02:	7823      	ldrb	r3, [r4, #0]
   1ad04:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1ad08:	4543      	cmp	r3, r8
   1ad0a:	d1b5      	bne.n	1ac78 <lll_adv_connect_ind_check+0x28>
	       !memcmp(tgt_addr, ci->connect_ind.init_addr, BDADDR_SIZE);
   1ad0c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1ad0e:	4649      	mov	r1, r9
   1ad10:	2206      	movs	r2, #6
   1ad12:	f00f fb57 	bl	2a3c4 <memcmp>
	return (rx_addr == ci->tx_addr) &&
   1ad16:	fab0 f080 	clz	r0, r0
   1ad1a:	0940      	lsrs	r0, r0, #5
   1ad1c:	e7ad      	b.n	1ac7a <lll_adv_connect_ind_check+0x2a>
   1ad1e:	bf00      	nop

0001ad20 <isr_rx>:
{
   1ad20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ad24:	b089      	sub	sp, #36	; 0x24
   1ad26:	4605      	mov	r5, r0
	trx_done = radio_is_done();
   1ad28:	f001 f824 	bl	1bd74 <radio_is_done>
	if (trx_done) {
   1ad2c:	f010 0fff 	tst.w	r0, #255	; 0xff
   1ad30:	d10a      	bne.n	1ad48 <isr_rx+0x28>
	lll_isr_status_reset();
   1ad32:	f7ff f9f1 	bl	1a118 <lll_isr_status_reset>
	radio_isr_set(isr_done, param);
   1ad36:	487d      	ldr	r0, [pc, #500]	; (1af2c <isr_rx+0x20c>)
   1ad38:	4629      	mov	r1, r5
   1ad3a:	f000 fef5 	bl	1bb28 <radio_isr_set>
	radio_disable();
   1ad3e:	f000 ffeb 	bl	1bd18 <radio_disable>
}
   1ad42:	b009      	add	sp, #36	; 0x24
   1ad44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		crc_ok = radio_crc_is_valid();
   1ad48:	f001 f834 	bl	1bdb4 <radio_crc_is_valid>
   1ad4c:	4607      	mov	r7, r0
		devmatch_ok = radio_filter_has_match();
   1ad4e:	f001 f8ab 	bl	1bea8 <radio_filter_has_match>
   1ad52:	4681      	mov	r9, r0
		devmatch_id = radio_filter_match_get();
   1ad54:	f001 f8b2 	bl	1bebc <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   1ad58:	f001 fa9c 	bl	1c294 <radio_ar_has_match>
   1ad5c:	4604      	mov	r4, r0
		irkmatch_id = radio_ar_match_get();
   1ad5e:	f001 fa7d 	bl	1c25c <radio_ar_match_get>
   1ad62:	4680      	mov	r8, r0
		rssi_ready = radio_rssi_is_ready();
   1ad64:	f001 f868 	bl	1be38 <radio_rssi_is_ready>
	lll_isr_status_reset();
   1ad68:	f7ff f9d6 	bl	1a118 <lll_isr_status_reset>
	if (crc_ok) {
   1ad6c:	f017 0fff 	tst.w	r7, #255	; 0xff
   1ad70:	d0e1      	beq.n	1ad36 <isr_rx+0x16>
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   1ad72:	f014 07ff 	ands.w	r7, r4, #255	; 0xff
   1ad76:	f040 808b 	bne.w	1ae90 <isr_rx+0x170>
   1ad7a:	20ff      	movs	r0, #255	; 0xff
   1ad7c:	f88d 001f 	strb.w	r0, [sp, #31]
	pdu_rx = (void *)radio_pkt_scratch_get();
   1ad80:	f001 f826 	bl	1bdd0 <radio_pkt_scratch_get>
   1ad84:	7b2b      	ldrb	r3, [r5, #12]
   1ad86:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   1ad8a:	4604      	mov	r4, r0
   1ad8c:	6919      	ldr	r1, [r3, #16]
	addr = pdu_adv->adv_ind.addr;
   1ad8e:	460b      	mov	r3, r1
		devmatch_ok = radio_filter_has_match();
   1ad90:	fa5f f989 	uxtb.w	r9, r9
	tx_addr = pdu_adv->tx_addr;
   1ad94:	f813 0b02 	ldrb.w	r0, [r3], #2
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   1ad98:	f000 0c0f 	and.w	ip, r0, #15
   1ad9c:	f1bc 0f01 	cmp.w	ip, #1
		tgt_addr = pdu_adv->direct_ind.tgt_addr;
   1ada0:	bf08      	it	eq
   1ada2:	f101 0808 	addeq.w	r8, r1, #8
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1ada6:	7821      	ldrb	r1, [r4, #0]
   1ada8:	f001 010f 	and.w	r1, r1, #15
		tgt_addr = NULL;
   1adac:	bf18      	it	ne
   1adae:	f04f 0800 	movne.w	r8, #0
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1adb2:	2903      	cmp	r1, #3
	tx_addr = pdu_adv->tx_addr;
   1adb4:	f3c0 1280 	ubfx	r2, r0, #6, #1
	rx_addr = pdu_adv->rx_addr;
   1adb8:	ea4f 16d0 	mov.w	r6, r0, lsr #7
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1adbc:	d06f      	beq.n	1ae9e <isr_rx+0x17e>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   1adbe:	2905      	cmp	r1, #5
   1adc0:	d1b9      	bne.n	1ad36 <isr_rx+0x16>
   1adc2:	7861      	ldrb	r1, [r4, #1]
   1adc4:	2922      	cmp	r1, #34	; 0x22
   1adc6:	d1b6      	bne.n	1ad36 <isr_rx+0x16>
		   lll->conn && !lll->conn->slave.cancelled &&
   1adc8:	6869      	ldr	r1, [r5, #4]
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   1adca:	2900      	cmp	r1, #0
   1adcc:	d0b3      	beq.n	1ad36 <isr_rx+0x16>
		   lll->conn && !lll->conn->slave.cancelled &&
   1adce:	f891 1020 	ldrb.w	r1, [r1, #32]
   1add2:	0789      	lsls	r1, r1, #30
   1add4:	d4af      	bmi.n	1ad36 <isr_rx+0x16>
		   lll_adv_connect_ind_check(lll, pdu_rx, tx_addr, addr,
   1add6:	f10d 011f 	add.w	r1, sp, #31
   1adda:	9103      	str	r1, [sp, #12]
   1addc:	e9cd 8901 	strd	r8, r9, [sp, #4]
   1ade0:	9600      	str	r6, [sp, #0]
   1ade2:	4621      	mov	r1, r4
   1ade4:	4628      	mov	r0, r5
   1ade6:	f7ff ff33 	bl	1ac50 <lll_adv_connect_ind_check>
		   lll->conn && !lll->conn->slave.cancelled &&
   1adea:	2800      	cmp	r0, #0
   1adec:	d0a3      	beq.n	1ad36 <isr_rx+0x16>
			rx = ull_pdu_rx_alloc_peek(4);
   1adee:	2004      	movs	r0, #4
   1adf0:	f7f8 fa4a 	bl	13288 <ull_pdu_rx_alloc_peek>
		if (!rx) {
   1adf4:	2800      	cmp	r0, #0
   1adf6:	d09e      	beq.n	1ad36 <isr_rx+0x16>
		radio_isr_set(isr_abort, lll);
   1adf8:	484d      	ldr	r0, [pc, #308]	; (1af30 <isr_rx+0x210>)
   1adfa:	4629      	mov	r1, r5
   1adfc:	f000 fe94 	bl	1bb28 <radio_isr_set>
		radio_disable();
   1ae00:	f000 ff8a 	bl	1bd18 <radio_disable>
		LL_ASSERT(!radio_is_ready());
   1ae04:	f000 ffac 	bl	1bd60 <radio_is_ready>
   1ae08:	2800      	cmp	r0, #0
   1ae0a:	d161      	bne.n	1aed0 <isr_rx+0x1b0>
		lll->conn->slave.initiated = 1;
   1ae0c:	686a      	ldr	r2, [r5, #4]
   1ae0e:	f892 3020 	ldrb.w	r3, [r2, #32]
   1ae12:	f043 0301 	orr.w	r3, r3, #1
   1ae16:	f882 3020 	strb.w	r3, [r2, #32]
		rx = ull_pdu_rx_alloc();
   1ae1a:	f7f8 fa53 	bl	132c4 <ull_pdu_rx_alloc>
		rx->hdr.handle = 0xffff;
   1ae1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1ae22:	2214      	movs	r2, #20
		rx->hdr.handle = 0xffff;
   1ae24:	80c3      	strh	r3, [r0, #6]
		rx = ull_pdu_rx_alloc();
   1ae26:	4606      	mov	r6, r0
   1ae28:	4621      	mov	r1, r4
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1ae2a:	7102      	strb	r2, [r0, #4]
   1ae2c:	f100 031c 	add.w	r3, r0, #28
   1ae30:	f104 0e20 	add.w	lr, r4, #32
   1ae34:	680c      	ldr	r4, [r1, #0]
   1ae36:	6848      	ldr	r0, [r1, #4]
   1ae38:	688a      	ldr	r2, [r1, #8]
   1ae3a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   1ae3e:	f8c3 c00c 	str.w	ip, [r3, #12]
   1ae42:	3110      	adds	r1, #16
   1ae44:	4571      	cmp	r1, lr
   1ae46:	601c      	str	r4, [r3, #0]
   1ae48:	6058      	str	r0, [r3, #4]
   1ae4a:	609a      	str	r2, [r3, #8]
   1ae4c:	f103 0310 	add.w	r3, r3, #16
   1ae50:	d1f0      	bne.n	1ae34 <isr_rx+0x114>
   1ae52:	680a      	ldr	r2, [r1, #0]
   1ae54:	601a      	str	r2, [r3, #0]
		ftr->param = lll;
   1ae56:	60b5      	str	r5, [r6, #8]
		ftr->ticks_anchor = radio_tmr_start_get();
   1ae58:	f001 f8d2 	bl	1c000 <radio_tmr_start_get>
   1ae5c:	6130      	str	r0, [r6, #16]
		ftr->radio_end_us = radio_tmr_end_get() -
   1ae5e:	f001 f92b 	bl	1c0b8 <radio_tmr_end_get>
				    radio_tx_chain_delay_get(0, 0);
   1ae62:	2100      	movs	r1, #0
		ftr->radio_end_us = radio_tmr_end_get() -
   1ae64:	4604      	mov	r4, r0
				    radio_tx_chain_delay_get(0, 0);
   1ae66:	4608      	mov	r0, r1
   1ae68:	f000 ff46 	bl	1bcf8 <radio_tx_chain_delay_get>
		ftr->radio_end_us = radio_tmr_end_get() -
   1ae6c:	1a24      	subs	r4, r4, r0
   1ae6e:	6174      	str	r4, [r6, #20]
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   1ae70:	b19f      	cbz	r7, 1ae9a <isr_rx+0x17a>
   1ae72:	f89d 301f 	ldrb.w	r3, [sp, #31]
   1ae76:	76b3      	strb	r3, [r6, #26]
			ftr->extra = ull_pdu_rx_alloc();
   1ae78:	f7f8 fa24 	bl	132c4 <ull_pdu_rx_alloc>
		ull_rx_put(rx->hdr.link, rx);
   1ae7c:	4631      	mov	r1, r6
			ftr->extra = ull_pdu_rx_alloc();
   1ae7e:	60f0      	str	r0, [r6, #12]
		ull_rx_put(rx->hdr.link, rx);
   1ae80:	6830      	ldr	r0, [r6, #0]
   1ae82:	f7f8 fa37 	bl	132f4 <ull_rx_put>
		ull_rx_sched();
   1ae86:	f7f8 fa45 	bl	13314 <ull_rx_sched>
}
   1ae8a:	b009      	add	sp, #36	; 0x24
   1ae8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   1ae90:	fa5f f088 	uxtb.w	r0, r8
   1ae94:	f7fe fd84 	bl	199a0 <ull_filter_lll_rl_irk_idx>
   1ae98:	e770      	b.n	1ad7c <isr_rx+0x5c>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   1ae9a:	23ff      	movs	r3, #255	; 0xff
   1ae9c:	e7eb      	b.n	1ae76 <isr_rx+0x156>
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1ae9e:	7861      	ldrb	r1, [r4, #1]
   1aea0:	290c      	cmp	r1, #12
   1aea2:	f47f af48 	bne.w	1ad36 <isr_rx+0x16>
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
   1aea6:	f1b8 0f00 	cmp.w	r8, #0
   1aeaa:	f47f af44 	bne.w	1ad36 <isr_rx+0x16>
	    lll_adv_scan_req_check(lll, pdu_rx, tx_addr, addr, devmatch_ok,
   1aeae:	f10d 011f 	add.w	r1, sp, #31
   1aeb2:	e9cd 9100 	strd	r9, r1, [sp]
   1aeb6:	4628      	mov	r0, r5
   1aeb8:	4621      	mov	r1, r4
   1aeba:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1aebe:	f7ff fe8f 	bl	1abe0 <lll_adv_scan_req_check>
	    (tgt_addr == NULL) &&
   1aec2:	b998      	cbnz	r0, 1aeec <isr_rx+0x1cc>
   1aec4:	7821      	ldrb	r1, [r4, #0]
   1aec6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1aeca:	f001 010f 	and.w	r1, r1, #15
   1aece:	e776      	b.n	1adbe <isr_rx+0x9e>
		LL_ASSERT(!radio_is_ready());
   1aed0:	4a18      	ldr	r2, [pc, #96]	; (1af34 <isr_rx+0x214>)
   1aed2:	4919      	ldr	r1, [pc, #100]	; (1af38 <isr_rx+0x218>)
   1aed4:	4819      	ldr	r0, [pc, #100]	; (1af3c <isr_rx+0x21c>)
   1aed6:	f240 5345 	movw	r3, #1349	; 0x545
   1aeda:	f009 fb83 	bl	245e4 <printk>
   1aede:	4040      	eors	r0, r0
   1aee0:	f380 8811 	msr	BASEPRI, r0
   1aee4:	f04f 0003 	mov.w	r0, #3
   1aee8:	df02      	svc	2
   1aeea:	e78f      	b.n	1ae0c <isr_rx+0xec>
		radio_isr_set(isr_done, lll);
   1aeec:	4629      	mov	r1, r5
   1aeee:	480f      	ldr	r0, [pc, #60]	; (1af2c <isr_rx+0x20c>)
   1aef0:	f000 fe1a 	bl	1bb28 <radio_isr_set>
		radio_switch_complete_and_disable();
   1aef4:	f000 ff8a 	bl	1be0c <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   1aef8:	7e2b      	ldrb	r3, [r5, #24]
   1aefa:	eb05 0583 	add.w	r5, r5, r3, lsl #2
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   1aefe:	69e8      	ldr	r0, [r5, #28]
   1af00:	f000 fef4 	bl	1bcec <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   1af04:	f000 ff2c 	bl	1bd60 <radio_is_ready>
   1af08:	2800      	cmp	r0, #0
   1af0a:	f43f af1a 	beq.w	1ad42 <isr_rx+0x22>
   1af0e:	4a09      	ldr	r2, [pc, #36]	; (1af34 <isr_rx+0x214>)
   1af10:	4909      	ldr	r1, [pc, #36]	; (1af38 <isr_rx+0x218>)
   1af12:	480a      	ldr	r0, [pc, #40]	; (1af3c <isr_rx+0x21c>)
   1af14:	f240 43fe 	movw	r3, #1278	; 0x4fe
   1af18:	f009 fb64 	bl	245e4 <printk>
   1af1c:	4040      	eors	r0, r0
   1af1e:	f380 8811 	msr	BASEPRI, r0
   1af22:	f04f 0003 	mov.w	r0, #3
   1af26:	df02      	svc	2
		if (!err) {
   1af28:	e70b      	b.n	1ad42 <isr_rx+0x22>
   1af2a:	bf00      	nop
   1af2c:	0001ab15 	.word	0x0001ab15
   1af30:	0001a4a1 	.word	0x0001a4a1
   1af34:	0002bc0c 	.word	0x0002bc0c
   1af38:	0002bc58 	.word	0x0002bc58
   1af3c:	0002b0c4 	.word	0x0002b0c4

0001af40 <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   1af40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1af42:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   1af44:	f7ff f8e8 	bl	1a118 <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   1af48:	f7f8 fab2 	bl	134b0 <ull_event_done_extra_get>
	LL_ASSERT(e);
   1af4c:	4604      	mov	r4, r0
   1af4e:	2800      	cmp	r0, #0
   1af50:	d033      	beq.n	1afba <isr_done+0x7a>

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
	e->trx_cnt = trx_cnt;
   1af52:	4b21      	ldr	r3, [pc, #132]	; (1afd8 <isr_done+0x98>)
	e->crc_valid = crc_valid;
   1af54:	4921      	ldr	r1, [pc, #132]	; (1afdc <isr_done+0x9c>)

#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
   1af56:	4a22      	ldr	r2, [pc, #136]	; (1afe0 <isr_done+0xa0>)
	e->trx_cnt = trx_cnt;
   1af58:	881b      	ldrh	r3, [r3, #0]
	e->crc_valid = crc_valid;
   1af5a:	7808      	ldrb	r0, [r1, #0]
	e->mic_state = mic_state;
   1af5c:	7811      	ldrb	r1, [r2, #0]
	e->trx_cnt = trx_cnt;
   1af5e:	80a3      	strh	r3, [r4, #4]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   1af60:	2201      	movs	r2, #1
	e->crc_valid = crc_valid;
   1af62:	71a0      	strb	r0, [r4, #6]
	e->mic_state = mic_state;
   1af64:	71e1      	strb	r1, [r4, #7]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   1af66:	7022      	strb	r2, [r4, #0]
#endif /* CONFIG_BT_CTLR_LE_ENC */

#if defined(CONFIG_BT_PERIPHERAL)
	if (trx_cnt) {
   1af68:	b11b      	cbz	r3, 1af72 <isr_done+0x32>
		struct lll_conn *lll = param;

		if (lll->role) {
   1af6a:	f995 301d 	ldrsb.w	r3, [r5, #29]
   1af6e:	2b00      	cmp	r3, #0
   1af70:	db04      	blt.n	1af7c <isr_done+0x3c>
			lll->slave.window_size_event_us = 0;
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   1af72:	4628      	mov	r0, r5
}
   1af74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   1af78:	f7ff b8dc 	b.w	1a134 <lll_isr_cleanup>
				addr_us_get(lll->phy_rx);
   1af7c:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
   1af80:	f003 0307 	and.w	r3, r3, #7
#define RANGE_DISTANCE 1000 /* meters */
#define RANGE_DELAY_US (2 * RANGE_DISTANCE * 4 / 1000)

static inline uint32_t addr_us_get(uint8_t phy)
{
	switch (phy) {
   1af84:	2b02      	cmp	r3, #2
   1af86:	d016      	beq.n	1afb6 <isr_done+0x76>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
   1af88:	2b04      	cmp	r3, #4
   1af8a:	bf14      	ite	ne
   1af8c:	2728      	movne	r7, #40	; 0x28
   1af8e:	f44f 77bc 	moveq.w	r7, #376	; 0x178
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   1af92:	f001 f87d 	bl	1c090 <radio_tmr_aa_restore>
   1af96:	4606      	mov	r6, r0
   1af98:	f001 f880 	bl	1c09c <radio_tmr_ready_get>
			e->drift.window_widening_event_us =
   1af9c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   1af9e:	1a36      	subs	r6, r6, r0
			lll->slave.window_widening_event_us = 0;
   1afa0:	2300      	movs	r3, #0
			e->drift.preamble_to_addr_us = preamble_to_addr_us;
   1afa2:	e9c4 2703 	strd	r2, r7, [r4, #12]
			e->drift.start_to_address_actual_us =
   1afa6:	60a6      	str	r6, [r4, #8]
	lll_isr_cleanup(param);
   1afa8:	4628      	mov	r0, r5
			lll->slave.window_widening_event_us = 0;
   1afaa:	632b      	str	r3, [r5, #48]	; 0x30
			lll->slave.window_size_event_us = 0;
   1afac:	63ab      	str	r3, [r5, #56]	; 0x38
}
   1afae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   1afb2:	f7ff b8bf 	b.w	1a134 <lll_isr_cleanup>
	switch (phy) {
   1afb6:	2718      	movs	r7, #24
   1afb8:	e7eb      	b.n	1af92 <isr_done+0x52>
	LL_ASSERT(e);
   1afba:	4a0a      	ldr	r2, [pc, #40]	; (1afe4 <isr_done+0xa4>)
   1afbc:	490a      	ldr	r1, [pc, #40]	; (1afe8 <isr_done+0xa8>)
   1afbe:	480b      	ldr	r0, [pc, #44]	; (1afec <isr_done+0xac>)
   1afc0:	f44f 731d 	mov.w	r3, #628	; 0x274
   1afc4:	f009 fb0e 	bl	245e4 <printk>
   1afc8:	4040      	eors	r0, r0
   1afca:	f380 8811 	msr	BASEPRI, r0
   1afce:	f04f 0003 	mov.w	r0, #3
   1afd2:	df02      	svc	2
   1afd4:	e7bd      	b.n	1af52 <isr_done+0x12>
   1afd6:	bf00      	nop
   1afd8:	20002528 	.word	0x20002528
   1afdc:	20002aad 	.word	0x20002aad
   1afe0:	20002aae 	.word	0x20002aae
   1afe4:	0002bca4 	.word	0x0002bca4
   1afe8:	0002b57c 	.word	0x0002b57c
   1afec:	0002b0c4 	.word	0x0002b0c4

0001aff0 <lll_conn_init>:
{
   1aff0:	b508      	push	{r3, lr}

static void empty_tx_init(void)
{
	struct pdu_data *p;

	p = (void *)radio_pkt_empty_get();
   1aff2:	f000 fee9 	bl	1bdc8 <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1aff6:	7803      	ldrb	r3, [r0, #0]
   1aff8:	2201      	movs	r2, #1
   1affa:	f362 0301 	bfi	r3, r2, #0, #2
   1affe:	7003      	strb	r3, [r0, #0]
}
   1b000:	2000      	movs	r0, #0
   1b002:	bd08      	pop	{r3, pc}

0001b004 <lll_conn_reset>:
}
   1b004:	2000      	movs	r0, #0
   1b006:	4770      	bx	lr

0001b008 <lll_conn_flush>:
}
   1b008:	4770      	bx	lr
   1b00a:	bf00      	nop

0001b00c <lll_conn_prepare_reset>:
	crc_valid = 0U;
   1b00c:	4805      	ldr	r0, [pc, #20]	; (1b024 <lll_conn_prepare_reset+0x18>)
	crc_expire = 0U;
   1b00e:	4906      	ldr	r1, [pc, #24]	; (1b028 <lll_conn_prepare_reset+0x1c>)
	mic_state = LLL_CONN_MIC_NONE;
   1b010:	4a06      	ldr	r2, [pc, #24]	; (1b02c <lll_conn_prepare_reset+0x20>)
{
   1b012:	b410      	push	{r4}
	trx_cnt = 0U;
   1b014:	2300      	movs	r3, #0
   1b016:	4c06      	ldr	r4, [pc, #24]	; (1b030 <lll_conn_prepare_reset+0x24>)
	crc_valid = 0U;
   1b018:	7003      	strb	r3, [r0, #0]
	crc_expire = 0U;
   1b01a:	700b      	strb	r3, [r1, #0]
	mic_state = LLL_CONN_MIC_NONE;
   1b01c:	7013      	strb	r3, [r2, #0]
	trx_cnt = 0U;
   1b01e:	8023      	strh	r3, [r4, #0]
}
   1b020:	bc10      	pop	{r4}
   1b022:	4770      	bx	lr
   1b024:	20002aad 	.word	0x20002aad
   1b028:	20002aac 	.word	0x20002aac
   1b02c:	20002aae 	.word	0x20002aae
   1b030:	20002528 	.word	0x20002528

0001b034 <lll_conn_abort_cb>:
{
   1b034:	b510      	push	{r4, lr}
	if (!prepare_param) {
   1b036:	b1d0      	cbz	r0, 1b06e <lll_conn_abort_cb+0x3a>
	err = lll_hfclock_off();
   1b038:	460c      	mov	r4, r1
   1b03a:	f7ff fa0b 	bl	1a454 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1b03e:	2800      	cmp	r0, #0
   1b040:	db04      	blt.n	1b04c <lll_conn_abort_cb+0x18>
	lll_done(param);
   1b042:	4620      	mov	r0, r4
}
   1b044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1b048:	f7fe bf9c 	b.w	19f84 <lll_done>
	LL_ASSERT(err >= 0);
   1b04c:	4a0b      	ldr	r2, [pc, #44]	; (1b07c <lll_conn_abort_cb+0x48>)
   1b04e:	490c      	ldr	r1, [pc, #48]	; (1b080 <lll_conn_abort_cb+0x4c>)
   1b050:	480c      	ldr	r0, [pc, #48]	; (1b084 <lll_conn_abort_cb+0x50>)
   1b052:	239c      	movs	r3, #156	; 0x9c
   1b054:	f009 fac6 	bl	245e4 <printk>
   1b058:	4040      	eors	r0, r0
   1b05a:	f380 8811 	msr	BASEPRI, r0
   1b05e:	f04f 0003 	mov.w	r0, #3
   1b062:	df02      	svc	2
	lll_done(param);
   1b064:	4620      	mov	r0, r4
}
   1b066:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1b06a:	f7fe bf8b 	b.w	19f84 <lll_done>
		radio_isr_set(isr_done, param);
   1b06e:	4806      	ldr	r0, [pc, #24]	; (1b088 <lll_conn_abort_cb+0x54>)
   1b070:	f000 fd5a 	bl	1bb28 <radio_isr_set>
}
   1b074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   1b078:	f000 be4e 	b.w	1bd18 <radio_disable>
   1b07c:	0002bca4 	.word	0x0002bca4
   1b080:	0002bbd0 	.word	0x0002bbd0
   1b084:	0002b0c4 	.word	0x0002b0c4
   1b088:	0001af41 	.word	0x0001af41

0001b08c <lll_conn_rx_pkt_set>:
{
   1b08c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b08e:	4605      	mov	r5, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
   1b090:	2001      	movs	r0, #1
   1b092:	f7f8 f8f9 	bl	13288 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1b096:	4604      	mov	r4, r0
   1b098:	b348      	cbz	r0, 1b0ee <lll_conn_rx_pkt_set+0x62>
	phy = lll->phy_rx;
   1b09a:	f895 6045 	ldrb.w	r6, [r5, #69]	; 0x45
	max_rx_octets = lll->max_rx_octets;
   1b09e:	8fef      	ldrh	r7, [r5, #62]	; 0x3e
	phy = lll->phy_rx;
   1b0a0:	f006 0607 	and.w	r6, r6, #7
	radio_phy_set(phy, 0);
   1b0a4:	4630      	mov	r0, r6
   1b0a6:	2100      	movs	r1, #0
   1b0a8:	f000 fda4 	bl	1bbf4 <radio_phy_set>
	} else if (lll->enc_rx) {
   1b0ac:	f895 305e 	ldrb.w	r3, [r5, #94]	; 0x5e
   1b0b0:	0072      	lsls	r2, r6, #1
   1b0b2:	071b      	lsls	r3, r3, #28
   1b0b4:	f104 041c 	add.w	r4, r4, #28
   1b0b8:	f042 0201 	orr.w	r2, r2, #1
   1b0bc:	d50e      	bpl.n	1b0dc <lll_conn_rx_pkt_set+0x50>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   1b0be:	1d39      	adds	r1, r7, #4
   1b0c0:	b2c9      	uxtb	r1, r1
   1b0c2:	2008      	movs	r0, #8
   1b0c4:	f000 fdde 	bl	1bc84 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   1b0c8:	4622      	mov	r2, r4
   1b0ca:	4631      	mov	r1, r6
   1b0cc:	f105 005f 	add.w	r0, r5, #95	; 0x5f
   1b0d0:	f000 fffe 	bl	1c0d0 <radio_ccm_rx_pkt_set>
}
   1b0d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   1b0d8:	f000 be02 	b.w	1bce0 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
   1b0dc:	b2f9      	uxtb	r1, r7
   1b0de:	2008      	movs	r0, #8
   1b0e0:	f000 fdd0 	bl	1bc84 <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   1b0e4:	4620      	mov	r0, r4
}
   1b0e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(node_rx->pdu);
   1b0ea:	f000 bdf9 	b.w	1bce0 <radio_pkt_rx_set>
	LL_ASSERT(node_rx);
   1b0ee:	4a07      	ldr	r2, [pc, #28]	; (1b10c <lll_conn_rx_pkt_set+0x80>)
   1b0f0:	4907      	ldr	r1, [pc, #28]	; (1b110 <lll_conn_rx_pkt_set+0x84>)
   1b0f2:	4808      	ldr	r0, [pc, #32]	; (1b114 <lll_conn_rx_pkt_set+0x88>)
   1b0f4:	f240 13d9 	movw	r3, #473	; 0x1d9
   1b0f8:	f009 fa74 	bl	245e4 <printk>
   1b0fc:	4040      	eors	r0, r0
   1b0fe:	f380 8811 	msr	BASEPRI, r0
   1b102:	f04f 0003 	mov.w	r0, #3
   1b106:	df02      	svc	2
   1b108:	e7c7      	b.n	1b09a <lll_conn_rx_pkt_set+0xe>
   1b10a:	bf00      	nop
   1b10c:	0002bca4 	.word	0x0002bca4
   1b110:	0002bcf0 	.word	0x0002bcf0
   1b114:	0002b0c4 	.word	0x0002b0c4

0001b118 <lll_conn_isr_tx>:
{
   1b118:	b538      	push	{r3, r4, r5, lr}
   1b11a:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   1b11c:	f7fe ffea 	bl	1a0f4 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1b120:	2096      	movs	r0, #150	; 0x96
   1b122:	f000 fee1 	bl	1bee8 <radio_tmr_tifs_set>
				     lll->phy_flags);
   1b126:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
	radio_switch_complete_and_tx(lll->phy_rx, 0,
   1b12a:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   1b12e:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   1b132:	f000 0007 	and.w	r0, r0, #7
   1b136:	f002 0207 	and.w	r2, r2, #7
   1b13a:	2100      	movs	r1, #0
   1b13c:	f000 fe5a 	bl	1bdf4 <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   1b140:	4620      	mov	r0, r4
   1b142:	f7ff ffa3 	bl	1b08c <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   1b146:	f000 fe0b 	bl	1bd60 <radio_is_ready>
   1b14a:	bb58      	cbnz	r0, 1b1a4 <lll_conn_isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 +
   1b14c:	f000 ffba 	bl	1c0c4 <radio_tmr_tifs_base_get>
   1b150:	4605      	mov	r5, r0
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1b152:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   1b156:	2101      	movs	r1, #1
   1b158:	f000 0007 	and.w	r0, r0, #7
   1b15c:	f000 fdd0 	bl	1bd00 <radio_rx_chain_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   1b160:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   1b164:	f003 0307 	and.w	r3, r3, #7
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1b168:	4405      	add	r5, r0
   1b16a:	2b02      	cmp	r3, #2
   1b16c:	f105 05a3 	add.w	r5, r5, #163	; 0xa3
   1b170:	d016      	beq.n	1b1a0 <lll_conn_isr_tx+0x88>
		return 376;
   1b172:	2b04      	cmp	r3, #4
   1b174:	bf14      	ite	ne
   1b176:	2328      	movne	r3, #40	; 0x28
   1b178:	f44f 73bc 	moveq.w	r3, #376	; 0x178
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   1b17c:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
   1b180:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   1b184:	f000 0007 	and.w	r0, r0, #7
	hcto += addr_us_get(lll->phy_rx);
   1b188:	441d      	add	r5, r3
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   1b18a:	f000 fdb5 	bl	1bcf8 <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   1b18e:	1a28      	subs	r0, r5, r0
   1b190:	f000 ff50 	bl	1c034 <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   1b194:	4621      	mov	r1, r4
   1b196:	480a      	ldr	r0, [pc, #40]	; (1b1c0 <lll_conn_isr_tx+0xa8>)
}
   1b198:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   1b19c:	f000 bcc4 	b.w	1bb28 <radio_isr_set>
	switch (phy) {
   1b1a0:	2318      	movs	r3, #24
   1b1a2:	e7eb      	b.n	1b17c <lll_conn_isr_tx+0x64>
	LL_ASSERT(!radio_is_ready());
   1b1a4:	4a07      	ldr	r2, [pc, #28]	; (1b1c4 <lll_conn_isr_tx+0xac>)
   1b1a6:	4908      	ldr	r1, [pc, #32]	; (1b1c8 <lll_conn_isr_tx+0xb0>)
   1b1a8:	4808      	ldr	r0, [pc, #32]	; (1b1cc <lll_conn_isr_tx+0xb4>)
   1b1aa:	f240 13a5 	movw	r3, #421	; 0x1a5
   1b1ae:	f009 fa19 	bl	245e4 <printk>
   1b1b2:	4040      	eors	r0, r0
   1b1b4:	f380 8811 	msr	BASEPRI, r0
   1b1b8:	f04f 0003 	mov.w	r0, #3
   1b1bc:	df02      	svc	2
   1b1be:	e7c5      	b.n	1b14c <lll_conn_isr_tx+0x34>
   1b1c0:	0001b309 	.word	0x0001b309
   1b1c4:	0002bca4 	.word	0x0002bca4
   1b1c8:	0002bc58 	.word	0x0002bc58
   1b1cc:	0002b0c4 	.word	0x0002b0c4

0001b1d0 <lll_conn_tx_pkt_set>:
{
   1b1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b1d2:	460f      	mov	r7, r1
	phy = lll->phy_tx;
   1b1d4:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
	max_tx_octets = lll->max_tx_octets;
   1b1d8:	8f86      	ldrh	r6, [r0, #60]	; 0x3c
	phy = lll->phy_tx;
   1b1da:	f001 0407 	and.w	r4, r1, #7
{
   1b1de:	4605      	mov	r5, r0
	radio_phy_set(phy, flags);
   1b1e0:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   1b1e4:	4620      	mov	r0, r4
   1b1e6:	f000 fd05 	bl	1bbf4 <radio_phy_set>
	} else if (lll->enc_tx) {
   1b1ea:	f895 305e 	ldrb.w	r3, [r5, #94]	; 0x5e
   1b1ee:	0062      	lsls	r2, r4, #1
   1b1f0:	06db      	lsls	r3, r3, #27
   1b1f2:	f042 0201 	orr.w	r2, r2, #1
   1b1f6:	b2f1      	uxtb	r1, r6
   1b1f8:	d50d      	bpl.n	1b216 <lll_conn_tx_pkt_set+0x46>
		radio_pkt_configure(8, (max_tx_octets + 4U),
   1b1fa:	3104      	adds	r1, #4
   1b1fc:	b2c9      	uxtb	r1, r1
   1b1fe:	2008      	movs	r0, #8
   1b200:	f000 fd40 	bl	1bc84 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx,
   1b204:	4639      	mov	r1, r7
   1b206:	f105 0080 	add.w	r0, r5, #128	; 0x80
   1b20a:	f000 ff9f 	bl	1c14c <radio_ccm_tx_pkt_set>
}
   1b20e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx,
   1b212:	f000 bd6b 	b.w	1bcec <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
   1b216:	2008      	movs	r0, #8
   1b218:	f000 fd34 	bl	1bc84 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   1b21c:	4638      	mov	r0, r7
}
   1b21e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   1b222:	f000 bd63 	b.w	1bcec <radio_pkt_tx_set>
   1b226:	bf00      	nop

0001b228 <lll_conn_pdu_tx_prep>:
{
   1b228:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b22c:	4604      	mov	r4, r0
   1b22e:	b083      	sub	sp, #12
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1b230:	aa01      	add	r2, sp, #4
   1b232:	6c80      	ldr	r0, [r0, #72]	; 0x48
{
   1b234:	4689      	mov	r9, r1
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1b236:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   1b238:	f7f3 fe12 	bl	ee60 <memq_peek>
	if (lll->empty || !link) {
   1b23c:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   1b240:	075a      	lsls	r2, r3, #29
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1b242:	4606      	mov	r6, r0
	if (lll->empty || !link) {
   1b244:	d432      	bmi.n	1b2ac <lll_conn_pdu_tx_prep+0x84>
   1b246:	2800      	cmp	r0, #0
   1b248:	d04e      	beq.n	1b2e8 <lll_conn_pdu_tx_prep+0xc0>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   1b24a:	9a01      	ldr	r2, [sp, #4]
   1b24c:	f894 705d 	ldrb.w	r7, [r4, #93]	; 0x5d
		if (!lll->packet_tx_head_len) {
   1b250:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   1b254:	f102 0804 	add.w	r8, r2, #4
   1b258:	eb08 0507 	add.w	r5, r8, r7
		if (!lll->packet_tx_head_len) {
   1b25c:	b913      	cbnz	r3, 1b264 <lll_conn_pdu_tx_prep+0x3c>
			lll->packet_tx_head_len = p->len;
   1b25e:	786b      	ldrb	r3, [r5, #1]
   1b260:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
		if (lll->packet_tx_head_offset) {
   1b264:	b137      	cbz	r7, 1b274 <lll_conn_pdu_tx_prep+0x4c>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1b266:	f818 2007 	ldrb.w	r2, [r8, r7]
   1b26a:	2101      	movs	r1, #1
   1b26c:	f361 0201 	bfi	r2, r1, #0, #2
   1b270:	f808 2007 	strb.w	r2, [r8, r7]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   1b274:	1bdb      	subs	r3, r3, r7
   1b276:	706b      	strb	r3, [r5, #1]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   1b278:	4620      	mov	r0, r4
   1b27a:	f7fd fb25 	bl	188c8 <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   1b27e:	786b      	ldrb	r3, [r5, #1]
   1b280:	4283      	cmp	r3, r0
   1b282:	d924      	bls.n	1b2ce <lll_conn_pdu_tx_prep+0xa6>
			p->len = max_tx_octets;
   1b284:	7068      	strb	r0, [r5, #1]
			p->md = 1U;
   1b286:	f818 3007 	ldrb.w	r3, [r8, r7]
   1b28a:	f043 0310 	orr.w	r3, r3, #16
   1b28e:	f808 3007 	strb.w	r3, [r8, r7]
		p->rfu = 0U;
   1b292:	f818 3007 	ldrb.w	r3, [r8, r7]
		p->resv = 0U;
   1b296:	2200      	movs	r2, #0
		p->rfu = 0U;
   1b298:	f36f 1347 	bfc	r3, #5, #3
   1b29c:	f808 3007 	strb.w	r3, [r8, r7]
		p->resv = 0U;
   1b2a0:	70aa      	strb	r2, [r5, #2]
	*pdu_data_tx = p;
   1b2a2:	f8c9 5000 	str.w	r5, [r9]
}
   1b2a6:	b003      	add	sp, #12
   1b2a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		lll->empty = 1U;
   1b2ac:	f043 0304 	orr.w	r3, r3, #4
   1b2b0:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		p = (void *)radio_pkt_empty_get();
   1b2b4:	f000 fd88 	bl	1bdc8 <radio_pkt_empty_get>
   1b2b8:	4605      	mov	r5, r0
		if (link || FORCE_MD_CNT_GET()) {
   1b2ba:	b1e6      	cbz	r6, 1b2f6 <lll_conn_pdu_tx_prep+0xce>
			p->md = 1U;
   1b2bc:	7803      	ldrb	r3, [r0, #0]
   1b2be:	f043 0310 	orr.w	r3, r3, #16
   1b2c2:	7003      	strb	r3, [r0, #0]
	*pdu_data_tx = p;
   1b2c4:	f8c9 5000 	str.w	r5, [r9]
}
   1b2c8:	b003      	add	sp, #12
   1b2ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((link->next != lll->memq_tx.tail) ||
   1b2ce:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1b2d0:	6832      	ldr	r2, [r6, #0]
   1b2d2:	429a      	cmp	r2, r3
			p->md = 1U;
   1b2d4:	f818 3007 	ldrb.w	r3, [r8, r7]
   1b2d8:	bf14      	ite	ne
   1b2da:	f043 0310 	orrne.w	r3, r3, #16
			p->md = 0U;
   1b2de:	f36f 1304 	bfceq	r3, #4, #1
   1b2e2:	f808 3007 	strb.w	r3, [r8, r7]
   1b2e6:	e7d4      	b.n	1b292 <lll_conn_pdu_tx_prep+0x6a>
		lll->empty = 1U;
   1b2e8:	f043 0304 	orr.w	r3, r3, #4
   1b2ec:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		p = (void *)radio_pkt_empty_get();
   1b2f0:	f000 fd6a 	bl	1bdc8 <radio_pkt_empty_get>
   1b2f4:	4605      	mov	r5, r0
			p->md = 0U;
   1b2f6:	782b      	ldrb	r3, [r5, #0]
   1b2f8:	f36f 1304 	bfc	r3, #4, #1
   1b2fc:	702b      	strb	r3, [r5, #0]
	*pdu_data_tx = p;
   1b2fe:	f8c9 5000 	str.w	r5, [r9]
}
   1b302:	b003      	add	sp, #12
   1b304:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001b308 <lll_conn_isr_rx>:
{
   1b308:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b30a:	b083      	sub	sp, #12
   1b30c:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   1b30e:	f000 fd31 	bl	1bd74 <radio_is_done>
	if (trx_done) {
   1b312:	f010 0fff 	tst.w	r0, #255	; 0xff
   1b316:	d109      	bne.n	1b32c <lll_conn_isr_rx+0x24>
	lll_isr_rx_status_reset();
   1b318:	f7fe fef4 	bl	1a104 <lll_isr_rx_status_reset>
		radio_isr_set(isr_done, param);
   1b31c:	48b7      	ldr	r0, [pc, #732]	; (1b5fc <lll_conn_isr_rx+0x2f4>)
   1b31e:	4621      	mov	r1, r4
   1b320:	f000 fc02 	bl	1bb28 <radio_isr_set>
		radio_disable();
   1b324:	f000 fcf8 	bl	1bd18 <radio_disable>
}
   1b328:	b003      	add	sp, #12
   1b32a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		crc_ok = radio_crc_is_valid();
   1b32c:	f000 fd42 	bl	1bdb4 <radio_crc_is_valid>
   1b330:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
   1b332:	f000 fd81 	bl	1be38 <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   1b336:	f7fe fee5 	bl	1a104 <lll_isr_rx_status_reset>
	trx_cnt++;
   1b33a:	4ab1      	ldr	r2, [pc, #708]	; (1b600 <lll_conn_isr_rx+0x2f8>)
   1b33c:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   1b33e:	2001      	movs	r0, #1
	trx_cnt++;
   1b340:	4403      	add	r3, r0
   1b342:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   1b344:	f7f7 ffa0 	bl	13288 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1b348:	4606      	mov	r6, r0
   1b34a:	2800      	cmp	r0, #0
   1b34c:	f000 80bb 	beq.w	1b4c6 <lll_conn_isr_rx+0x1be>
	if (crc_ok) {
   1b350:	2d00      	cmp	r5, #0
   1b352:	d155      	bne.n	1b400 <lll_conn_isr_rx+0xf8>
		if (crc_expire == 0U) {
   1b354:	4bab      	ldr	r3, [pc, #684]	; (1b604 <lll_conn_isr_rx+0x2fc>)
   1b356:	781f      	ldrb	r7, [r3, #0]
   1b358:	2f00      	cmp	r7, #0
   1b35a:	f040 80a3 	bne.w	1b4a4 <lll_conn_isr_rx+0x19c>
		crc_expire--;
   1b35e:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1b360:	a901      	add	r1, sp, #4
   1b362:	4620      	mov	r0, r4
		crc_expire--;
   1b364:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1b366:	f7ff ff5f 	bl	1b228 <lll_conn_pdu_tx_prep>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1b36a:	2096      	movs	r0, #150	; 0x96
   1b36c:	f000 fdbc 	bl	1bee8 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(lll->phy_rx);
   1b370:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   1b374:	f000 0007 	and.w	r0, r0, #7
   1b378:	f000 fd2e 	bl	1bdd8 <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   1b37c:	48a2      	ldr	r0, [pc, #648]	; (1b608 <lll_conn_isr_rx+0x300>)
   1b37e:	4621      	mov	r1, r4
   1b380:	f000 fbd2 	bl	1bb28 <radio_isr_set>
		radio_tmr_end_capture();
   1b384:	f000 fe90 	bl	1c0a8 <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   1b388:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
   1b38c:	9901      	ldr	r1, [sp, #4]
	pdu_data_tx->nesn = lll->nesn;
   1b38e:	f3c2 0340 	ubfx	r3, r2, #1, #1
   1b392:	7808      	ldrb	r0, [r1, #0]
	pdu_data_tx->sn = lll->sn;
   1b394:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   1b398:	009b      	lsls	r3, r3, #2
   1b39a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   1b39e:	f020 020c 	bic.w	r2, r0, #12
   1b3a2:	4313      	orrs	r3, r2
   1b3a4:	700b      	strb	r3, [r1, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   1b3a6:	4620      	mov	r0, r4
   1b3a8:	f7ff ff12 	bl	1b1d0 <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   1b3ac:	f000 fcd8 	bl	1bd60 <radio_is_ready>
   1b3b0:	2800      	cmp	r0, #0
   1b3b2:	f040 80b7 	bne.w	1b524 <lll_conn_isr_rx+0x21c>
	if (!radio_tmr_aa_restore()) {
   1b3b6:	f000 fe6b 	bl	1c090 <radio_tmr_aa_restore>
   1b3ba:	b170      	cbz	r0, 1b3da <lll_conn_isr_rx+0xd2>
	if (tx_release) {
   1b3bc:	b19d      	cbz	r5, 1b3e6 <lll_conn_isr_rx+0xde>
		LL_ASSERT(lll->handle != 0xFFFF);
   1b3be:	89a0      	ldrh	r0, [r4, #12]
   1b3c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1b3c4:	4298      	cmp	r0, r3
   1b3c6:	f000 80bb 	beq.w	1b540 <lll_conn_isr_rx+0x238>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   1b3ca:	4629      	mov	r1, r5
   1b3cc:	f7fd f912 	bl	185f4 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   1b3d0:	b95f      	cbnz	r7, 1b3ea <lll_conn_isr_rx+0xe2>
		ull_rx_sched();
   1b3d2:	f7f7 ff9f 	bl	13314 <ull_rx_sched>
}
   1b3d6:	b003      	add	sp, #12
   1b3d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_tmr_aa_save(radio_tmr_aa_get());
   1b3da:	f000 fe4d 	bl	1c078 <radio_tmr_aa_get>
   1b3de:	f000 fe51 	bl	1c084 <radio_tmr_aa_save>
	if (tx_release) {
   1b3e2:	2d00      	cmp	r5, #0
   1b3e4:	d1eb      	bne.n	1b3be <lll_conn_isr_rx+0xb6>
	if (is_rx_enqueue) {
   1b3e6:	2f00      	cmp	r7, #0
   1b3e8:	d09e      	beq.n	1b328 <lll_conn_isr_rx+0x20>
		ull_pdu_rx_alloc();
   1b3ea:	f7f7 ff6b 	bl	132c4 <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1b3ee:	2303      	movs	r3, #3
   1b3f0:	7133      	strb	r3, [r6, #4]
		node_rx->hdr.handle = lll->handle;
   1b3f2:	89a3      	ldrh	r3, [r4, #12]
		ull_rx_put(node_rx->hdr.link, node_rx);
   1b3f4:	6830      	ldr	r0, [r6, #0]
		node_rx->hdr.handle = lll->handle;
   1b3f6:	80f3      	strh	r3, [r6, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   1b3f8:	4631      	mov	r1, r6
   1b3fa:	f7f7 ff7b 	bl	132f4 <ull_rx_put>
	if (is_ull_rx) {
   1b3fe:	e7e8      	b.n	1b3d2 <lll_conn_isr_rx+0xca>
	if (pdu_data_rx->nesn != lll->sn) {
   1b400:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   1b404:	7f32      	ldrb	r2, [r6, #28]
   1b406:	f003 0101 	and.w	r1, r3, #1
   1b40a:	f3c2 0080 	ubfx	r0, r2, #2, #1
   1b40e:	4288      	cmp	r0, r1
   1b410:	d069      	beq.n	1b4e6 <lll_conn_isr_rx+0x1de>
		if (lll->role) {
   1b412:	f994 201d 	ldrsb.w	r2, [r4, #29]
		lll->sn++;
   1b416:	f081 0101 	eor.w	r1, r1, #1
   1b41a:	f361 0300 	bfi	r3, r1, #0, #1
		if (lll->role) {
   1b41e:	2a00      	cmp	r2, #0
		lll->sn++;
   1b420:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		if (lll->role) {
   1b424:	da05      	bge.n	1b432 <lll_conn_isr_rx+0x12a>
			lll->slave.latency_enabled = 1;
   1b426:	f894 3020 	ldrb.w	r3, [r4, #32]
   1b42a:	f043 0304 	orr.w	r3, r3, #4
   1b42e:	f884 3020 	strb.w	r3, [r4, #32]
		if (!lll->empty) {
   1b432:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   1b436:	075a      	lsls	r2, r3, #29
   1b438:	f100 8091 	bmi.w	1b55e <lll_conn_isr_rx+0x256>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   1b43c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   1b440:	aa01      	add	r2, sp, #4
   1b442:	f7f3 fd0d 	bl	ee60 <memq_peek>
		if (link) {
   1b446:	4605      	mov	r5, r0
   1b448:	2800      	cmp	r0, #0
   1b44a:	f000 808f 	beq.w	1b56c <lll_conn_isr_rx+0x264>
					       lll->packet_tx_head_offset);
   1b44e:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
			pdu_data_tx_len = pdu_data_tx->len;
   1b452:	9b01      	ldr	r3, [sp, #4]
   1b454:	4413      	add	r3, r2
   1b456:	7959      	ldrb	r1, [r3, #5]
			if (pdu_data_tx_len != 0U) {
   1b458:	b151      	cbz	r1, 1b470 <lll_conn_isr_rx+0x168>
				if (lll->enc_tx) {
   1b45a:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   1b45e:	06df      	lsls	r7, r3, #27
   1b460:	d506      	bpl.n	1b470 <lll_conn_isr_rx+0x168>
					lll->ccm_tx.counter++;
   1b462:	e9d4 3024 	ldrd	r3, r0, [r4, #144]	; 0x90
   1b466:	3301      	adds	r3, #1
   1b468:	f140 0000 	adc.w	r0, r0, #0
   1b46c:	e9c4 3024 	strd	r3, r0, [r4, #144]	; 0x90
			if (offset < lll->packet_tx_head_len) {
   1b470:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   1b474:	440a      	add	r2, r1
   1b476:	b2d2      	uxtb	r2, r2
			if (offset < lll->packet_tx_head_len) {
   1b478:	429a      	cmp	r2, r3
   1b47a:	d37b      	bcc.n	1b574 <lll_conn_isr_rx+0x26c>
			} else if (offset == lll->packet_tx_head_len) {
   1b47c:	f000 8095 	beq.w	1b5aa <lll_conn_isr_rx+0x2a2>
				LL_ASSERT(0);
   1b480:	4a62      	ldr	r2, [pc, #392]	; (1b60c <lll_conn_isr_rx+0x304>)
   1b482:	4963      	ldr	r1, [pc, #396]	; (1b610 <lll_conn_isr_rx+0x308>)
   1b484:	4863      	ldr	r0, [pc, #396]	; (1b614 <lll_conn_isr_rx+0x30c>)
   1b486:	f44f 7340 	mov.w	r3, #768	; 0x300
   1b48a:	f009 f8ab 	bl	245e4 <printk>
   1b48e:	4040      	eors	r0, r0
   1b490:	f380 8811 	msr	BASEPRI, r0
   1b494:	f04f 0003 	mov.w	r0, #3
   1b498:	df02      	svc	2
	tx_release = NULL;
   1b49a:	2500      	movs	r5, #0
   1b49c:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   1b4a0:	7f32      	ldrb	r2, [r6, #28]
   1b4a2:	e021      	b.n	1b4e8 <lll_conn_isr_rx+0x1e0>
		crc_expire--;
   1b4a4:	3f01      	subs	r7, #1
   1b4a6:	b2ff      	uxtb	r7, r7
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1b4a8:	a901      	add	r1, sp, #4
   1b4aa:	4620      	mov	r0, r4
		crc_expire--;
   1b4ac:	701f      	strb	r7, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1b4ae:	f7ff febb 	bl	1b228 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1b4b2:	2f00      	cmp	r7, #0
   1b4b4:	f040 80ef 	bne.w	1b696 <lll_conn_isr_rx+0x38e>
		radio_isr_set(isr_done, param);
   1b4b8:	4850      	ldr	r0, [pc, #320]	; (1b5fc <lll_conn_isr_rx+0x2f4>)
   1b4ba:	4621      	mov	r1, r4
   1b4bc:	f000 fb34 	bl	1bb28 <radio_isr_set>
			radio_switch_complete_and_disable();
   1b4c0:	f000 fca4 	bl	1be0c <radio_switch_complete_and_disable>
   1b4c4:	e760      	b.n	1b388 <lll_conn_isr_rx+0x80>
	LL_ASSERT(node_rx);
   1b4c6:	4a51      	ldr	r2, [pc, #324]	; (1b60c <lll_conn_isr_rx+0x304>)
   1b4c8:	4953      	ldr	r1, [pc, #332]	; (1b618 <lll_conn_isr_rx+0x310>)
   1b4ca:	4852      	ldr	r0, [pc, #328]	; (1b614 <lll_conn_isr_rx+0x30c>)
   1b4cc:	23d1      	movs	r3, #209	; 0xd1
   1b4ce:	f009 f889 	bl	245e4 <printk>
   1b4d2:	4040      	eors	r0, r0
   1b4d4:	f380 8811 	msr	BASEPRI, r0
   1b4d8:	f04f 0003 	mov.w	r0, #3
   1b4dc:	df02      	svc	2
	if (crc_ok) {
   1b4de:	2d00      	cmp	r5, #0
   1b4e0:	f43f af38 	beq.w	1b354 <lll_conn_isr_rx+0x4c>
   1b4e4:	e78c      	b.n	1b400 <lll_conn_isr_rx+0xf8>
	tx_release = NULL;
   1b4e6:	2500      	movs	r5, #0
	if ((pdu_data_rx->sn == lll->nesn) &&
   1b4e8:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   1b4ec:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1b4f0:	429a      	cmp	r2, r3
   1b4f2:	d046      	beq.n	1b582 <lll_conn_isr_rx+0x27a>
	is_rx_enqueue = 0U;
   1b4f4:	2700      	movs	r7, #0
		crc_expire = 0U;
   1b4f6:	4a43      	ldr	r2, [pc, #268]	; (1b604 <lll_conn_isr_rx+0x2fc>)
		crc_valid = 1U;
   1b4f8:	4b48      	ldr	r3, [pc, #288]	; (1b61c <lll_conn_isr_rx+0x314>)
		crc_expire = 0U;
   1b4fa:	2100      	movs	r1, #0
   1b4fc:	7011      	strb	r1, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1b4fe:	4620      	mov	r0, r4
		crc_valid = 1U;
   1b500:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1b502:	a901      	add	r1, sp, #4
		crc_valid = 1U;
   1b504:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1b506:	f7ff fe8f 	bl	1b228 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1b50a:	7f33      	ldrb	r3, [r6, #28]
   1b50c:	06d9      	lsls	r1, r3, #27
   1b50e:	f53f af2c 	bmi.w	1b36a <lll_conn_isr_rx+0x62>
			      (pdu_data_tx->md == 0) &&
   1b512:	9b01      	ldr	r3, [sp, #4]
   1b514:	781a      	ldrb	r2, [r3, #0]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1b516:	06d2      	lsls	r2, r2, #27
   1b518:	f53f af27 	bmi.w	1b36a <lll_conn_isr_rx+0x62>
			      (pdu_data_tx->md == 0) &&
   1b51c:	785b      	ldrb	r3, [r3, #1]
   1b51e:	2b00      	cmp	r3, #0
   1b520:	d0ca      	beq.n	1b4b8 <lll_conn_isr_rx+0x1b0>
   1b522:	e722      	b.n	1b36a <lll_conn_isr_rx+0x62>
	LL_ASSERT(!radio_is_ready());
   1b524:	4a39      	ldr	r2, [pc, #228]	; (1b60c <lll_conn_isr_rx+0x304>)
   1b526:	493e      	ldr	r1, [pc, #248]	; (1b620 <lll_conn_isr_rx+0x318>)
   1b528:	483a      	ldr	r0, [pc, #232]	; (1b614 <lll_conn_isr_rx+0x30c>)
   1b52a:	f240 133d 	movw	r3, #317	; 0x13d
   1b52e:	f009 f859 	bl	245e4 <printk>
   1b532:	4040      	eors	r0, r0
   1b534:	f380 8811 	msr	BASEPRI, r0
   1b538:	f04f 0003 	mov.w	r0, #3
   1b53c:	df02      	svc	2
   1b53e:	e73a      	b.n	1b3b6 <lll_conn_isr_rx+0xae>
		LL_ASSERT(lll->handle != 0xFFFF);
   1b540:	4a32      	ldr	r2, [pc, #200]	; (1b60c <lll_conn_isr_rx+0x304>)
   1b542:	4938      	ldr	r1, [pc, #224]	; (1b624 <lll_conn_isr_rx+0x31c>)
   1b544:	4833      	ldr	r0, [pc, #204]	; (1b614 <lll_conn_isr_rx+0x30c>)
   1b546:	f44f 73a6 	mov.w	r3, #332	; 0x14c
   1b54a:	f009 f84b 	bl	245e4 <printk>
   1b54e:	4040      	eors	r0, r0
   1b550:	f380 8811 	msr	BASEPRI, r0
   1b554:	f04f 0003 	mov.w	r0, #3
   1b558:	df02      	svc	2
   1b55a:	89a0      	ldrh	r0, [r4, #12]
   1b55c:	e735      	b.n	1b3ca <lll_conn_isr_rx+0xc2>
			lll->empty = 0;
   1b55e:	f36f 0382 	bfc	r3, #2, #1
   1b562:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
			pdu_data_tx = (void *)radio_pkt_empty_get();
   1b566:	f000 fc2f 	bl	1bdc8 <radio_pkt_empty_get>
	tx_release = NULL;
   1b56a:	2500      	movs	r5, #0
   1b56c:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   1b570:	7f32      	ldrb	r2, [r6, #28]
   1b572:	e7b9      	b.n	1b4e8 <lll_conn_isr_rx+0x1e0>
				lll->packet_tx_head_offset = offset;
   1b574:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
   1b578:	7f32      	ldrb	r2, [r6, #28]
   1b57a:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
	tx_release = NULL;
   1b57e:	2500      	movs	r5, #0
   1b580:	e7b2      	b.n	1b4e8 <lll_conn_isr_rx+0x1e0>
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   1b582:	2003      	movs	r0, #3
   1b584:	f7f7 fe80 	bl	13288 <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   1b588:	2800      	cmp	r0, #0
   1b58a:	d0b3      	beq.n	1b4f4 <lll_conn_isr_rx+0x1ec>
		lll->nesn++;
   1b58c:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   1b590:	f083 0302 	eor.w	r3, r3, #2
   1b594:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		if (pdu_data_rx->len != 0) {
   1b598:	7f73      	ldrb	r3, [r6, #29]
   1b59a:	2b00      	cmp	r3, #0
   1b59c:	d0aa      	beq.n	1b4f4 <lll_conn_isr_rx+0x1ec>
			if (lll->enc_rx) {
   1b59e:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   1b5a2:	0718      	lsls	r0, r3, #28
   1b5a4:	d412      	bmi.n	1b5cc <lll_conn_isr_rx+0x2c4>
			*is_rx_enqueue = 1U;
   1b5a6:	2701      	movs	r7, #1
   1b5a8:	e7a5      	b.n	1b4f6 <lll_conn_isr_rx+0x1ee>
				lll->packet_tx_head_len = 0;
   1b5aa:	2200      	movs	r2, #0
   1b5ac:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
				memq_dequeue(lll->memq_tx.tail,
   1b5b0:	f104 0148 	add.w	r1, r4, #72	; 0x48
   1b5b4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   1b5b6:	f7f3 fc5b 	bl	ee70 <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   1b5ba:	9901      	ldr	r1, [sp, #4]
   1b5bc:	7f32      	ldrb	r2, [r6, #28]
   1b5be:	680b      	ldr	r3, [r1, #0]
   1b5c0:	602b      	str	r3, [r5, #0]
				tx->next = link;
   1b5c2:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   1b5c6:	600d      	str	r5, [r1, #0]
				FORCE_MD_CNT_SET();
   1b5c8:	460d      	mov	r5, r1
   1b5ca:	e78d      	b.n	1b4e8 <lll_conn_isr_rx+0x1e0>
				done = radio_ccm_is_done();
   1b5cc:	f000 fde8 	bl	1c1a0 <radio_ccm_is_done>
				LL_ASSERT(done);
   1b5d0:	2800      	cmp	r0, #0
   1b5d2:	d052      	beq.n	1b67a <lll_conn_isr_rx+0x372>
				bool mic_failure = !radio_ccm_mic_is_valid();
   1b5d4:	f000 fe06 	bl	1c1e4 <radio_ccm_mic_is_valid>
				if (mic_failure &&
   1b5d8:	2800      	cmp	r0, #0
   1b5da:	d13e      	bne.n	1b65a <lll_conn_isr_rx+0x352>
				    lll->ccm_rx.counter == 0 &&
   1b5dc:	f8d4 206f 	ldr.w	r2, [r4, #111]	; 0x6f
   1b5e0:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
				if (mic_failure &&
   1b5e4:	4313      	orrs	r3, r2
   1b5e6:	d104      	bne.n	1b5f2 <lll_conn_isr_rx+0x2ea>
				    (pdu_data_rx->ll_id ==
   1b5e8:	7f33      	ldrb	r3, [r6, #28]
				    lll->ccm_rx.counter == 0 &&
   1b5ea:	f003 0303 	and.w	r3, r3, #3
   1b5ee:	2b03      	cmp	r3, #3
   1b5f0:	d01c      	beq.n	1b62c <lll_conn_isr_rx+0x324>
					mic_state = LLL_CONN_MIC_FAIL;
   1b5f2:	4b0d      	ldr	r3, [pc, #52]	; (1b628 <lll_conn_isr_rx+0x320>)
   1b5f4:	2202      	movs	r2, #2
   1b5f6:	701a      	strb	r2, [r3, #0]
	is_rx_enqueue = 0U;
   1b5f8:	2700      	movs	r7, #0
   1b5fa:	e6dc      	b.n	1b3b6 <lll_conn_isr_rx+0xae>
   1b5fc:	0001af41 	.word	0x0001af41
   1b600:	20002528 	.word	0x20002528
   1b604:	20002aac 	.word	0x20002aac
   1b608:	0001b119 	.word	0x0001b119
   1b60c:	0002bca4 	.word	0x0002bca4
   1b610:	0002b15c 	.word	0x0002b15c
   1b614:	0002b0c4 	.word	0x0002b0c4
   1b618:	0002bcf0 	.word	0x0002bcf0
   1b61c:	20002aad 	.word	0x20002aad
   1b620:	0002bc58 	.word	0x0002bc58
   1b624:	0002bd00 	.word	0x0002bd00
   1b628:	20002aae 	.word	0x20002aae
						radio_pkt_scratch_get();
   1b62c:	f000 fbd0 	bl	1bdd0 <radio_pkt_scratch_get>
					if (ctrl_pdu_len_check(
   1b630:	7842      	ldrb	r2, [r0, #1]
   1b632:	2a27      	cmp	r2, #39	; 0x27
						radio_pkt_scratch_get();
   1b634:	4601      	mov	r1, r0
					if (ctrl_pdu_len_check(
   1b636:	d8dc      	bhi.n	1b5f2 <lll_conn_isr_rx+0x2ea>
   1b638:	3203      	adds	r2, #3
   1b63a:	f106 001c 	add.w	r0, r6, #28
   1b63e:	f00e fecf 	bl	2a3e0 <memcpy>
						lll->ccm_rx.counter--;
   1b642:	f8d4 306f 	ldr.w	r3, [r4, #111]	; 0x6f
   1b646:	f8d4 2073 	ldr.w	r2, [r4, #115]	; 0x73
   1b64a:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
   1b64e:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   1b652:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
   1b656:	f8c4 2073 	str.w	r2, [r4, #115]	; 0x73
				lll->ccm_rx.counter++;
   1b65a:	f8d4 306f 	ldr.w	r3, [r4, #111]	; 0x6f
   1b65e:	f8d4 2073 	ldr.w	r2, [r4, #115]	; 0x73
				mic_state = LLL_CONN_MIC_PASS;
   1b662:	490e      	ldr	r1, [pc, #56]	; (1b69c <lll_conn_isr_rx+0x394>)
				lll->ccm_rx.counter++;
   1b664:	3301      	adds	r3, #1
						lll->ccm_rx.counter--;
   1b666:	f104 006f 	add.w	r0, r4, #111	; 0x6f
				lll->ccm_rx.counter++;
   1b66a:	f142 0200 	adc.w	r2, r2, #0
				mic_state = LLL_CONN_MIC_PASS;
   1b66e:	2701      	movs	r7, #1
				lll->ccm_rx.counter++;
   1b670:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
				mic_state = LLL_CONN_MIC_PASS;
   1b674:	700f      	strb	r7, [r1, #0]
				lll->ccm_rx.counter++;
   1b676:	6042      	str	r2, [r0, #4]
		if (err) {
   1b678:	e73d      	b.n	1b4f6 <lll_conn_isr_rx+0x1ee>
				LL_ASSERT(done);
   1b67a:	4a09      	ldr	r2, [pc, #36]	; (1b6a0 <lll_conn_isr_rx+0x398>)
   1b67c:	4909      	ldr	r1, [pc, #36]	; (1b6a4 <lll_conn_isr_rx+0x39c>)
   1b67e:	480a      	ldr	r0, [pc, #40]	; (1b6a8 <lll_conn_isr_rx+0x3a0>)
   1b680:	f240 331b 	movw	r3, #795	; 0x31b
   1b684:	f008 ffae 	bl	245e4 <printk>
   1b688:	4040      	eors	r0, r0
   1b68a:	f380 8811 	msr	BASEPRI, r0
   1b68e:	f04f 0003 	mov.w	r0, #3
   1b692:	df02      	svc	2
   1b694:	e79e      	b.n	1b5d4 <lll_conn_isr_rx+0x2cc>
	is_rx_enqueue = 0U;
   1b696:	462f      	mov	r7, r5
   1b698:	e667      	b.n	1b36a <lll_conn_isr_rx+0x62>
   1b69a:	bf00      	nop
   1b69c:	20002aae 	.word	0x20002aae
   1b6a0:	0002bca4 	.word	0x0002bca4
   1b6a4:	0002bcf8 	.word	0x0002bcf8
   1b6a8:	0002b0c4 	.word	0x0002b0c4

0001b6ac <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   1b6ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t remainder;
	uint32_t hcto;

	DEBUG_RADIO_START_S(1);

	lll = p->param;
   1b6b0:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   1b6b2:	89a2      	ldrh	r2, [r4, #12]
   1b6b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1b6b8:	429a      	cmp	r2, r3
{
   1b6ba:	b082      	sub	sp, #8
	if (unlikely(lll->handle == 0xFFFF)) {
   1b6bc:	f000 80c0 	beq.w	1b840 <prepare_cb+0x194>

		return 0;
	}

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   1b6c0:	4605      	mov	r5, r0
   1b6c2:	f7ff fca3 	bl	1b00c <lll_conn_prepare_reset>

	/* Deduce the latency */
	lll->latency_event = lll->latency_prepare - 1;
   1b6c6:	8a61      	ldrh	r1, [r4, #18]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   1b6c8:	8ae6      	ldrh	r6, [r4, #22]
	lll->event_counter = lll->event_counter + lll->latency_prepare;

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   1b6ca:	7f63      	ldrb	r3, [r4, #29]
	lll->latency_event = lll->latency_prepare - 1;
   1b6cc:	1e48      	subs	r0, r1, #1
	lll->event_counter = lll->event_counter + lll->latency_prepare;
   1b6ce:	4431      	add	r1, r6
	lll->latency_prepare = 0;
   1b6d0:	2200      	movs	r2, #0
	lll->latency_event = lll->latency_prepare - 1;
   1b6d2:	b280      	uxth	r0, r0
	lll->event_counter = lll->event_counter + lll->latency_prepare;
   1b6d4:	82e1      	strh	r1, [r4, #22]
	if (lll->data_chan_sel) {
   1b6d6:	0659      	lsls	r1, r3, #25
	lll->latency_prepare = 0;
   1b6d8:	8262      	strh	r2, [r4, #18]
	lll->latency_event = lll->latency_prepare - 1;
   1b6da:	82a0      	strh	r0, [r4, #20]
	if (lll->data_chan_sel) {
   1b6dc:	f104 0218 	add.w	r2, r4, #24
   1b6e0:	f100 808d 	bmi.w	1b7fe <prepare_cb+0x152>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   1b6e4:	f003 063f 	and.w	r6, r3, #63	; 0x3f
   1b6e8:	7fa1      	ldrb	r1, [r4, #30]
   1b6ea:	9600      	str	r6, [sp, #0]
   1b6ec:	4613      	mov	r3, r2
   1b6ee:	4602      	mov	r2, r0
   1b6f0:	f104 001f 	add.w	r0, r4, #31
   1b6f4:	f7fd fa48 	bl	18b88 <lll_chan_sel_1>
   1b6f8:	4607      	mov	r7, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* current window widening */
	lll->slave.window_widening_event_us +=
   1b6fa:	e9d4 610b 	ldrd	r6, r1, [r4, #44]	; 0x2c
		lll->slave.window_widening_prepare_us;
	lll->slave.window_widening_prepare_us = 0;
	if (lll->slave.window_widening_event_us >
	    lll->slave.window_widening_max_us) {
   1b6fe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
		lll->slave.window_widening_event_us =
			lll->slave.window_widening_max_us;
	}

	/* current window size */
	lll->slave.window_size_event_us +=
   1b700:	e9d4 030d 	ldrd	r0, r3, [r4, #52]	; 0x34
	lll->slave.window_widening_event_us +=
   1b704:	4431      	add	r1, r6
		lll->slave.window_widening_event_us =
   1b706:	428a      	cmp	r2, r1
   1b708:	bf28      	it	cs
   1b70a:	460a      	movcs	r2, r1
	lll->slave.window_size_event_us +=
   1b70c:	4403      	add	r3, r0
	lll->slave.window_widening_prepare_us = 0;
   1b70e:	2600      	movs	r6, #0
		lll->slave.window_widening_event_us =
   1b710:	6322      	str	r2, [r4, #48]	; 0x30
	lll->slave.window_size_event_us +=
   1b712:	63a3      	str	r3, [r4, #56]	; 0x38
	lll->slave.window_widening_prepare_us = 0;
   1b714:	62e6      	str	r6, [r4, #44]	; 0x2c
		lll->slave.window_size_prepare_us;
	lll->slave.window_size_prepare_us = 0;
   1b716:	6366      	str	r6, [r4, #52]	; 0x34

	/* Start setting up Radio h/w */
	radio_reset();
   1b718:	f000 fa48 	bl	1bbac <radio_reset>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1b71c:	4630      	mov	r0, r6
   1b71e:	f000 fa79 	bl	1bc14 <radio_tx_power_set>
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */

	lll_conn_rx_pkt_set(lll);
   1b722:	4620      	mov	r0, r4
   1b724:	f7ff fcb2 	bl	1b08c <lll_conn_rx_pkt_set>

	radio_aa_set(lll->access_addr);
   1b728:	1d20      	adds	r0, r4, #4
   1b72a:	f000 fa91 	bl	1bc50 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
			    (((uint32_t)lll->crc_init[2] << 16) |
			     ((uint32_t)lll->crc_init[1] << 8) |
   1b72e:	7a63      	ldrb	r3, [r4, #9]
			    (((uint32_t)lll->crc_init[2] << 16) |
   1b730:	7aa2      	ldrb	r2, [r4, #10]
			     ((uint32_t)lll->crc_init[0])));
   1b732:	7a21      	ldrb	r1, [r4, #8]
			     ((uint32_t)lll->crc_init[1] << 8) |
   1b734:	021b      	lsls	r3, r3, #8
			    (((uint32_t)lll->crc_init[2] << 16) |
   1b736:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1b73a:	4319      	orrs	r1, r3
   1b73c:	f240 605b 	movw	r0, #1627	; 0x65b
   1b740:	f000 fb2c 	bl	1bd9c <radio_crc_configure>

	lll_chan_set(data_chan_use);
   1b744:	4638      	mov	r0, r7
   1b746:	f7fe fc91 	bl	1a06c <lll_chan_set>

	radio_isr_set(lll_conn_isr_rx, lll);
   1b74a:	4621      	mov	r1, r4
   1b74c:	4841      	ldr	r0, [pc, #260]	; (1b854 <prepare_cb+0x1a8>)
   1b74e:	f000 f9eb 	bl	1bb28 <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   1b752:	2096      	movs	r0, #150	; 0x96
   1b754:	f000 fbc8 	bl	1bee8 <radio_tmr_tifs_set>

#if defined(CONFIG_BT_CTLR_PHY)
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx,
				     lll->phy_flags);
   1b758:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx,
   1b75c:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   1b760:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   1b764:	4631      	mov	r1, r6
   1b766:	f002 0207 	and.w	r2, r2, #7
   1b76a:	f000 0007 	and.w	r0, r0, #7
   1b76e:	f000 fb41 	bl	1bdf4 <radio_switch_complete_and_tx>
#else /* !CONFIG_BT_CTLR_PHY */
	radio_switch_complete_and_tx(0, 0, 0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	ticks_at_event = p->ticks_at_expire;
	evt = HDR_LLL2EVT(lll);
   1b772:	f8d4 8000 	ldr.w	r8, [r4]
	ticks_at_event = p->ticks_at_expire;
   1b776:	682f      	ldr	r7, [r5, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   1b778:	4640      	mov	r0, r8
   1b77a:	f7fe fc59 	bl	1a030 <lll_evt_offset_get>
   1b77e:	4407      	add	r7, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   1b780:	686a      	ldr	r2, [r5, #4]
   1b782:	f107 0109 	add.w	r1, r7, #9
   1b786:	4630      	mov	r0, r6
   1b788:	f000 fbba 	bl	1bf00 <radio_tmr_start>
   1b78c:	4605      	mov	r5, r0

	radio_tmr_aa_capture();
   1b78e:	f000 fc5f 	bl	1c050 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   1b792:	4630      	mov	r0, r6
   1b794:	f000 fc76 	bl	1c084 <radio_tmr_aa_save>

	hcto = remainder_us +
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   1b798:	6b22      	ldr	r2, [r4, #48]	; 0x30
	hcto = remainder_us +
   1b79a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		 lll->slave.window_widening_event_us) << 1) +
	       lll->slave.window_size_event_us;

#if defined(CONFIG_BT_CTLR_PHY)
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   1b79c:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   1b7a0:	3230      	adds	r2, #48	; 0x30
	hcto = remainder_us +
   1b7a2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   1b7a6:	f000 0007 	and.w	r0, r0, #7
   1b7aa:	2101      	movs	r1, #1
	hcto = remainder_us +
   1b7ac:	441d      	add	r5, r3
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   1b7ae:	f000 faa5 	bl	1bcfc <radio_rx_ready_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   1b7b2:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
   1b7b6:	f002 0207 	and.w	r2, r2, #7
   1b7ba:	2a02      	cmp	r2, #2
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   1b7bc:	4405      	add	r5, r0
   1b7be:	d03d      	beq.n	1b83c <prepare_cb+0x190>
		return 40;
   1b7c0:	2a04      	cmp	r2, #4
   1b7c2:	bf0c      	ite	eq
   1b7c4:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   1b7c8:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1b7ca:	4610      	mov	r0, r2
   1b7cc:	2101      	movs	r1, #1
	hcto += addr_us_get(lll->phy_rx);
   1b7ce:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1b7d0:	f000 fa96 	bl	1bd00 <radio_rx_chain_delay_get>
	hcto += radio_rx_ready_delay_get(0, 0);
	hcto += addr_us_get(0);
	hcto += radio_rx_chain_delay_get(0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	radio_tmr_hcto_configure(hcto);
   1b7d4:	4428      	add	r0, r5
   1b7d6:	f000 fc2d 	bl	1c034 <radio_tmr_hcto_configure>
#endif /* CONFIG_BT_CTLR_CONN_RSSI */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(evt, (TICKER_ID_CONN_BASE + lll->handle),
   1b7da:	7b21      	ldrb	r1, [r4, #12]
   1b7dc:	3103      	adds	r1, #3
   1b7de:	463a      	mov	r2, r7
   1b7e0:	4640      	mov	r0, r8
   1b7e2:	b2c9      	uxtb	r1, r1
   1b7e4:	f7fe fc32 	bl	1a04c <lll_preempt_calc>
   1b7e8:	b190      	cbz	r0, 1b810 <prepare_cb+0x164>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   1b7ea:	481b      	ldr	r0, [pc, #108]	; (1b858 <prepare_cb+0x1ac>)
   1b7ec:	4621      	mov	r1, r4
   1b7ee:	f000 f99b 	bl	1bb28 <radio_isr_set>
		radio_disable();
   1b7f2:	f000 fa91 	bl	1bd18 <radio_disable>
	}

	DEBUG_RADIO_START_S(1);

	return 0;
}
   1b7f6:	2000      	movs	r0, #0
   1b7f8:	b002      	add	sp, #8
   1b7fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	event_counter = lll->event_counter + lll->latency_event;
   1b7fe:	4430      	add	r0, r6
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   1b800:	8be1      	ldrh	r1, [r4, #30]
   1b802:	b280      	uxth	r0, r0
   1b804:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1b808:	f7fd fa06 	bl	18c18 <lll_chan_sel_2>
   1b80c:	4607      	mov	r7, r0
   1b80e:	e774      	b.n	1b6fa <prepare_cb+0x4e>
		ret = lll_prepare_done(lll);
   1b810:	4620      	mov	r0, r4
   1b812:	f7fe fbb5 	bl	19f80 <lll_prepare_done>
		LL_ASSERT(!ret);
   1b816:	2800      	cmp	r0, #0
   1b818:	d0ed      	beq.n	1b7f6 <prepare_cb+0x14a>
   1b81a:	4a10      	ldr	r2, [pc, #64]	; (1b85c <prepare_cb+0x1b0>)
   1b81c:	4910      	ldr	r1, [pc, #64]	; (1b860 <prepare_cb+0x1b4>)
   1b81e:	4811      	ldr	r0, [pc, #68]	; (1b864 <prepare_cb+0x1b8>)
   1b820:	f44f 7387 	mov.w	r3, #270	; 0x10e
   1b824:	f008 fede 	bl	245e4 <printk>
   1b828:	4040      	eors	r0, r0
   1b82a:	f380 8811 	msr	BASEPRI, r0
   1b82e:	f04f 0003 	mov.w	r0, #3
   1b832:	df02      	svc	2
}
   1b834:	2000      	movs	r0, #0
   1b836:	b002      	add	sp, #8
   1b838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (phy) {
   1b83c:	2318      	movs	r3, #24
   1b83e:	e7c4      	b.n	1b7ca <prepare_cb+0x11e>
		radio_isr_set(lll_isr_early_abort, lll);
   1b840:	4809      	ldr	r0, [pc, #36]	; (1b868 <prepare_cb+0x1bc>)
   1b842:	4621      	mov	r1, r4
   1b844:	f000 f970 	bl	1bb28 <radio_isr_set>
		radio_disable();
   1b848:	f000 fa66 	bl	1bd18 <radio_disable>
}
   1b84c:	2000      	movs	r0, #0
   1b84e:	b002      	add	sp, #8
   1b850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b854:	0001b309 	.word	0x0001b309
   1b858:	0001a1a1 	.word	0x0001a1a1
   1b85c:	0002bd2c 	.word	0x0002bd2c
   1b860:	0002b458 	.word	0x0002b458
   1b864:	0002b0c4 	.word	0x0002b0c4
   1b868:	0001a1b5 	.word	0x0001a1b5

0001b86c <lll_slave_prepare>:
{
   1b86c:	b570      	push	{r4, r5, r6, lr}
   1b86e:	b082      	sub	sp, #8
   1b870:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1b872:	f7fe fdd7 	bl	1a424 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1b876:	2800      	cmp	r0, #0
   1b878:	db29      	blt.n	1b8ce <lll_slave_prepare+0x62>
	lll = p->param;
   1b87a:	68e1      	ldr	r1, [r4, #12]
	elapsed = p->lazy + 1;
   1b87c:	8923      	ldrh	r3, [r4, #8]
	    lll->slave.window_widening_periodic_us * elapsed;
   1b87e:	6a48      	ldr	r0, [r1, #36]	; 0x24
	lll->slave.window_widening_prepare_us +=
   1b880:	6acd      	ldr	r5, [r1, #44]	; 0x2c
	lll->latency_prepare += elapsed;
   1b882:	8a4e      	ldrh	r6, [r1, #18]
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   1b884:	4a18      	ldr	r2, [pc, #96]	; (1b8e8 <lll_slave_prepare+0x7c>)
	elapsed = p->lazy + 1;
   1b886:	3301      	adds	r3, #1
   1b888:	b29b      	uxth	r3, r3
	lll->slave.window_widening_prepare_us +=
   1b88a:	fb00 5503 	mla	r5, r0, r3, r5
	    lll->slave.window_widening_max_us) {
   1b88e:	6a88      	ldr	r0, [r1, #40]	; 0x28
		lll->slave.window_widening_prepare_us =
   1b890:	42a8      	cmp	r0, r5
   1b892:	bf28      	it	cs
   1b894:	4628      	movcs	r0, r5
	lll->latency_prepare += elapsed;
   1b896:	4433      	add	r3, r6
		lll->slave.window_widening_prepare_us =
   1b898:	62c8      	str	r0, [r1, #44]	; 0x2c
	lll->latency_prepare += elapsed;
   1b89a:	824b      	strh	r3, [r1, #18]
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   1b89c:	4813      	ldr	r0, [pc, #76]	; (1b8ec <lll_slave_prepare+0x80>)
   1b89e:	4914      	ldr	r1, [pc, #80]	; (1b8f0 <lll_slave_prepare+0x84>)
   1b8a0:	9400      	str	r4, [sp, #0]
   1b8a2:	2300      	movs	r3, #0
   1b8a4:	f7f7 fe42 	bl	1352c <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1b8a8:	b108      	cbz	r0, 1b8ae <lll_slave_prepare+0x42>
   1b8aa:	3077      	adds	r0, #119	; 0x77
   1b8ac:	d101      	bne.n	1b8b2 <lll_slave_prepare+0x46>
}
   1b8ae:	b002      	add	sp, #8
   1b8b0:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1b8b2:	4a10      	ldr	r2, [pc, #64]	; (1b8f4 <lll_slave_prepare+0x88>)
   1b8b4:	4910      	ldr	r1, [pc, #64]	; (1b8f8 <lll_slave_prepare+0x8c>)
   1b8b6:	4811      	ldr	r0, [pc, #68]	; (1b8fc <lll_slave_prepare+0x90>)
   1b8b8:	235f      	movs	r3, #95	; 0x5f
   1b8ba:	f008 fe93 	bl	245e4 <printk>
   1b8be:	4040      	eors	r0, r0
   1b8c0:	f380 8811 	msr	BASEPRI, r0
   1b8c4:	f04f 0003 	mov.w	r0, #3
   1b8c8:	df02      	svc	2
}
   1b8ca:	b002      	add	sp, #8
   1b8cc:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(err >= 0);
   1b8ce:	4a09      	ldr	r2, [pc, #36]	; (1b8f4 <lll_slave_prepare+0x88>)
   1b8d0:	490b      	ldr	r1, [pc, #44]	; (1b900 <lll_slave_prepare+0x94>)
   1b8d2:	480a      	ldr	r0, [pc, #40]	; (1b8fc <lll_slave_prepare+0x90>)
   1b8d4:	2348      	movs	r3, #72	; 0x48
   1b8d6:	f008 fe85 	bl	245e4 <printk>
   1b8da:	4040      	eors	r0, r0
   1b8dc:	f380 8811 	msr	BASEPRI, r0
   1b8e0:	f04f 0003 	mov.w	r0, #3
   1b8e4:	df02      	svc	2
   1b8e6:	e7c8      	b.n	1b87a <lll_slave_prepare+0xe>
   1b8e8:	0001b6ad 	.word	0x0001b6ad
   1b8ec:	0001a029 	.word	0x0001a029
   1b8f0:	0001b035 	.word	0x0001b035
   1b8f4:	0002bd2c 	.word	0x0002bd2c
   1b8f8:	0002bc80 	.word	0x0002bc80
   1b8fc:	0002b0c4 	.word	0x0002b0c4
   1b900:	0002bbd0 	.word	0x0002bbd0

0001b904 <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   1b904:	4b05      	ldr	r3, [pc, #20]	; (1b91c <cntr_init+0x18>)
    p_reg->EVTENSET = mask;
   1b906:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1b90a:	2100      	movs	r1, #0
   1b90c:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   1b910:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   1b914:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   1b918:	4770      	bx	lr
   1b91a:	bf00      	nop
   1b91c:	4000b000 	.word	0x4000b000

0001b920 <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   1b920:	4b05      	ldr	r3, [pc, #20]	; (1b938 <cntr_start+0x18>)
   1b922:	7818      	ldrb	r0, [r3, #0]
   1b924:	1c42      	adds	r2, r0, #1
   1b926:	701a      	strb	r2, [r3, #0]
   1b928:	b918      	cbnz	r0, 1b932 <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1b92a:	4b04      	ldr	r3, [pc, #16]	; (1b93c <cntr_start+0x1c>)
   1b92c:	2201      	movs	r2, #1
   1b92e:	601a      	str	r2, [r3, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   1b930:	4770      	bx	lr
		return 1;
   1b932:	2001      	movs	r0, #1
}
   1b934:	4770      	bx	lr
   1b936:	bf00      	nop
   1b938:	20002aaf 	.word	0x20002aaf
   1b93c:	4000b000 	.word	0x4000b000

0001b940 <cntr_stop>:

uint32_t cntr_stop(void)
{
   1b940:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   1b942:	4c0d      	ldr	r4, [pc, #52]	; (1b978 <cntr_stop+0x38>)
   1b944:	7820      	ldrb	r0, [r4, #0]
   1b946:	b148      	cbz	r0, 1b95c <cntr_stop+0x1c>

	if (--_refcount) {
   1b948:	3801      	subs	r0, #1
   1b94a:	b2c0      	uxtb	r0, r0
   1b94c:	7020      	strb	r0, [r4, #0]
   1b94e:	b918      	cbnz	r0, 1b958 <cntr_stop+0x18>
   1b950:	4b0a      	ldr	r3, [pc, #40]	; (1b97c <cntr_stop+0x3c>)
   1b952:	2201      	movs	r2, #1
   1b954:	601a      	str	r2, [r3, #0]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   1b956:	bd10      	pop	{r4, pc}
		return 1;
   1b958:	2001      	movs	r0, #1
}
   1b95a:	bd10      	pop	{r4, pc}
	LL_ASSERT(_refcount);
   1b95c:	4a08      	ldr	r2, [pc, #32]	; (1b980 <cntr_stop+0x40>)
   1b95e:	4909      	ldr	r1, [pc, #36]	; (1b984 <cntr_stop+0x44>)
   1b960:	4809      	ldr	r0, [pc, #36]	; (1b988 <cntr_stop+0x48>)
   1b962:	232d      	movs	r3, #45	; 0x2d
   1b964:	f008 fe3e 	bl	245e4 <printk>
   1b968:	4040      	eors	r0, r0
   1b96a:	f380 8811 	msr	BASEPRI, r0
   1b96e:	f04f 0003 	mov.w	r0, #3
   1b972:	df02      	svc	2
   1b974:	7820      	ldrb	r0, [r4, #0]
   1b976:	e7e7      	b.n	1b948 <cntr_stop+0x8>
   1b978:	20002aaf 	.word	0x20002aaf
   1b97c:	4000b004 	.word	0x4000b004
   1b980:	0002bd8c 	.word	0x0002bd8c
   1b984:	0002bdd8 	.word	0x0002bdd8
   1b988:	0002b0c4 	.word	0x0002b0c4

0001b98c <cntr_cnt_get>:
     return p_reg->COUNTER;
   1b98c:	4b01      	ldr	r3, [pc, #4]	; (1b994 <cntr_cnt_get+0x8>)
   1b98e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   1b992:	4770      	bx	lr
   1b994:	4000b000 	.word	0x4000b000

0001b998 <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   1b998:	4b02      	ldr	r3, [pc, #8]	; (1b9a4 <cntr_cmp_set+0xc>)
   1b99a:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1b99e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   1b9a2:	4770      	bx	lr
   1b9a4:	4000b000 	.word	0x4000b000

0001b9a8 <do_ecb>:
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   1b9a8:	b4f0      	push	{r4, r5, r6, r7}
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   1b9aa:	4b12      	ldr	r3, [pc, #72]	; (1b9f4 <do_ecb+0x4c>)

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b9ac:	4d12      	ldr	r5, [pc, #72]	; (1b9f8 <do_ecb+0x50>)
   1b9ae:	2601      	movs	r6, #1
   1b9b0:	4634      	mov	r4, r6
		NRF_ECB->EVENTS_ENDECB = 0;
   1b9b2:	2100      	movs	r1, #0
   1b9b4:	602c      	str	r4, [r5, #0]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   1b9b6:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   1b9ba:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   1b9be:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   1b9c2:	601c      	str	r4, [r3, #0]
}
   1b9c4:	e005      	b.n	1b9d2 <do_ecb+0x2a>
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1b9c6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1b9ca:	b932      	cbnz	r2, 1b9da <do_ecb+0x32>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   1b9cc:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1b9d0:	b11a      	cbz	r2, 1b9da <do_ecb+0x32>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1b9d2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   1b9d6:	2a00      	cmp	r2, #0
   1b9d8:	d0f5      	beq.n	1b9c6 <do_ecb+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b9da:	602e      	str	r6, [r5, #0]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   1b9dc:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1b9e0:	2a00      	cmp	r2, #0
   1b9e2:	d1e7      	bne.n	1b9b4 <do_ecb+0xc>
   1b9e4:	f8d3 7504 	ldr.w	r7, [r3, #1284]	; 0x504
   1b9e8:	2f00      	cmp	r7, #0
   1b9ea:	d0e3      	beq.n	1b9b4 <do_ecb+0xc>

	NRF_ECB->ECBDATAPTR = 0;
}
   1b9ec:	bcf0      	pop	{r4, r5, r6, r7}
	NRF_ECB->ECBDATAPTR = 0;
   1b9ee:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1b9f2:	4770      	bx	lr
   1b9f4:	4000e000 	.word	0x4000e000
   1b9f8:	4000e004 	.word	0x4000e004

0001b9fc <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   1b9fc:	b570      	push	{r4, r5, r6, lr}
   1b9fe:	b08c      	sub	sp, #48	; 0x30
   1ba00:	460e      	mov	r6, r1
   1ba02:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1ba04:	4601      	mov	r1, r0
   1ba06:	2210      	movs	r2, #16
   1ba08:	4668      	mov	r0, sp
{
   1ba0a:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1ba0c:	f7f3 f9f8 	bl	ee00 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   1ba10:	2210      	movs	r2, #16
   1ba12:	eb0d 0002 	add.w	r0, sp, r2
   1ba16:	4631      	mov	r1, r6
   1ba18:	f7f3 f9f2 	bl	ee00 <mem_rcopy>

	do_ecb(&ecb);
   1ba1c:	4668      	mov	r0, sp
   1ba1e:	f7ff ffc3 	bl	1b9a8 <do_ecb>

	if (cipher_text_le) {
   1ba22:	b125      	cbz	r5, 1ba2e <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   1ba24:	4628      	mov	r0, r5
   1ba26:	2210      	movs	r2, #16
   1ba28:	a908      	add	r1, sp, #32
   1ba2a:	f7f3 f9e9 	bl	ee00 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   1ba2e:	b12c      	cbz	r4, 1ba3c <ecb_encrypt+0x40>
   1ba30:	ad08      	add	r5, sp, #32
   1ba32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1ba34:	6020      	str	r0, [r4, #0]
   1ba36:	6061      	str	r1, [r4, #4]
   1ba38:	60a2      	str	r2, [r4, #8]
   1ba3a:	60e3      	str	r3, [r4, #12]
		memcpy(cipher_text_be, &ecb.cipher_text[0],
			 sizeof(ecb.cipher_text));
	}
}
   1ba3c:	b00c      	add	sp, #48	; 0x30
   1ba3e:	bd70      	pop	{r4, r5, r6, pc}

0001ba40 <sw_switch.isra.0>:
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static uint8_t sw_tifs_toggle;

static void sw_switch(uint8_t dir, uint8_t phy_curr, uint8_t flags_curr, uint8_t phy_next,
   1ba40:	b4f0      	push	{r4, r5, r6, r7}
		      uint8_t flags_next)
{
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1ba42:	4e2a      	ldr	r6, [pc, #168]	; (1baec <sw_switch.isra.0+0xac>)
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1ba44:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 1bb00 <sw_switch.isra.0+0xc0>
   1ba48:	7834      	ldrb	r4, [r6, #0]
   1ba4a:	4b29      	ldr	r3, [pc, #164]	; (1baf0 <sw_switch.isra.0+0xb0>)
   1ba4c:	f8cc 3568 	str.w	r3, [ip, #1384]	; 0x568
   1ba50:	f104 030c 	add.w	r3, r4, #12
   1ba54:	b2db      	uxtb	r3, r3
   1ba56:	00db      	lsls	r3, r3, #3
	 * (TX/RX).
	 */
	nrf_ppi_event_endpoint_setup(
		NRF_PPI,
		radio_enable_ppi,
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1ba58:	4f26      	ldr	r7, [pc, #152]	; (1baf4 <sw_switch.isra.0+0xb4>)
   1ba5a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1ba5e:	00e5      	lsls	r5, r4, #3
   1ba60:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   1ba64:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   1ba68:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1ba6c:	eb07 0784 	add.w	r7, r7, r4, lsl #2
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1ba70:	f8cc 556c 	str.w	r5, [ip, #1388]	; 0x56c
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1ba74:	b225      	sxth	r5, r4

NRF_STATIC_INLINE void nrf_ppi_event_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                    nrf_ppi_channel_t channel,
                                                    uint32_t          eep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1ba76:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	uint8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	uint32_t delay;

	hal_radio_sw_switch_setup(cc, ppi, sw_tifs_toggle);

	if (dir) {
   1ba7a:	b388      	cbz	r0, 1bae0 <sw_switch.isra.0+0xa0>
	}
}

static inline uint32_t hal_radio_tx_ready_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   1ba7c:	f24a 17b8 	movw	r7, #41400	; 0xa1b8
   1ba80:	f649 6c34 	movw	ip, #40500	; 0x9e34
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_NS;
   1ba84:	f242 40b8 	movw	r0, #9400	; 0x24b8
	switch (phy) {
   1ba88:	2a02      	cmp	r2, #2
   1ba8a:	bf14      	ite	ne
   1ba8c:	463a      	movne	r2, r7
   1ba8e:	4662      	moveq	r2, ip
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_NS;
   1ba90:	f241 3788 	movw	r7, #5000	; 0x1388
   1ba94:	2902      	cmp	r1, #2
   1ba96:	bf14      	ite	ne
   1ba98:	4601      	movne	r1, r0
   1ba9a:	4639      	moveq	r1, r7
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
   1ba9c:	4816      	ldr	r0, [pc, #88]	; (1baf8 <sw_switch.isra.0+0xb8>)

NRF_STATIC_INLINE void nrf_ppi_task_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                   nrf_ppi_channel_t channel,
                                                   uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1ba9e:	4f17      	ldr	r7, [pc, #92]	; (1bafc <sw_switch.isra.0+0xbc>)
   1baa0:	f8c3 7514 	str.w	r7, [r3, #1300]	; 0x514
   1baa4:	440a      	add	r2, r1
   1baa6:	fba0 3202 	umull	r3, r2, r0, r2
   1baaa:	0992      	lsrs	r2, r2, #6
		}
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
   1baac:	00ab      	lsls	r3, r5, #2
   1baae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1bab2:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1U;
   1bab6:	3401      	adds	r4, #1
		SW_SWITCH_TIMER->CC[cc]) {
   1bab8:	f8d3 1540 	ldr.w	r1, [r3, #1344]	; 0x540
	if (delay <
   1babc:	4291      	cmp	r1, r2
				 SW_SWITCH_TIMER->CC[cc] - delay);
   1babe:	bf8a      	itet	hi
   1bac0:	f8d3 1540 	ldrhi.w	r1, [r3, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   1bac4:	2201      	movls	r2, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   1bac6:	1a8a      	subhi	r2, r1, r2
   1bac8:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    p_reg->CHENSET = mask;
   1bacc:	4b0c      	ldr	r3, [pc, #48]	; (1bb00 <sw_switch.isra.0+0xc0>)
	sw_tifs_toggle &= 1;
   1bace:	f004 0401 	and.w	r4, r4, #1
   1bad2:	f44f 6210 	mov.w	r2, #2304	; 0x900
   1bad6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1bada:	7034      	strb	r4, [r6, #0]
}
   1badc:	bcf0      	pop	{r4, r5, r6, r7}
   1bade:	4770      	bx	lr
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1bae0:	4a08      	ldr	r2, [pc, #32]	; (1bb04 <sw_switch.isra.0+0xc4>)
   1bae2:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
   1bae6:	2228      	movs	r2, #40	; 0x28
{
	nrf_ppi_task_endpoint_setup(
		NRF_PPI,
		ppi,
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_RX);
}
   1bae8:	e7e0      	b.n	1baac <sw_switch.isra.0+0x6c>
   1baea:	bf00      	nop
   1baec:	20002ab0 	.word	0x20002ab0
   1baf0:	4000110c 	.word	0x4000110c
   1baf4:	40009140 	.word	0x40009140
   1baf8:	10624dd3 	.word	0x10624dd3
   1bafc:	40001000 	.word	0x40001000
   1bb00:	4001f000 	.word	0x4001f000
   1bb04:	40001004 	.word	0x40001004

0001bb08 <isr_radio>:
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   1bb08:	4b04      	ldr	r3, [pc, #16]	; (1bb1c <isr_radio+0x14>)
   1bb0a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   1bb0e:	b123      	cbz	r3, 1bb1a <isr_radio+0x12>
		isr_cb(isr_cb_param);
   1bb10:	4a03      	ldr	r2, [pc, #12]	; (1bb20 <isr_radio+0x18>)
   1bb12:	4b04      	ldr	r3, [pc, #16]	; (1bb24 <isr_radio+0x1c>)
   1bb14:	6810      	ldr	r0, [r2, #0]
   1bb16:	681b      	ldr	r3, [r3, #0]
   1bb18:	4718      	bx	r3
}
   1bb1a:	4770      	bx	lr
   1bb1c:	40001000 	.word	0x40001000
   1bb20:	20001fec 	.word	0x20001fec
   1bb24:	20001fe8 	.word	0x20001fe8

0001bb28 <radio_isr_set>:
{
   1bb28:	b538      	push	{r3, r4, r5, lr}
   1bb2a:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   1bb2c:	2001      	movs	r0, #1
{
   1bb2e:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   1bb30:	f7ea fa6a 	bl	6008 <arch_irq_disable>
	isr_cb_param = param;
   1bb34:	4a08      	ldr	r2, [pc, #32]	; (1bb58 <radio_isr_set+0x30>)
	isr_cb = cb;
   1bb36:	4809      	ldr	r0, [pc, #36]	; (1bb5c <radio_isr_set+0x34>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1bb38:	4b09      	ldr	r3, [pc, #36]	; (1bb60 <radio_isr_set+0x38>)
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1bb3a:	490a      	ldr	r1, [pc, #40]	; (1bb64 <radio_isr_set+0x3c>)
	isr_cb_param = param;
   1bb3c:	6015      	str	r5, [r2, #0]
   1bb3e:	2510      	movs	r5, #16
   1bb40:	2202      	movs	r2, #2
	isr_cb = cb;
   1bb42:	6004      	str	r4, [r0, #0]
   1bb44:	f8c1 5304 	str.w	r5, [r1, #772]	; 0x304
	irq_enable(RADIO_IRQn);
   1bb48:	2001      	movs	r0, #1
   1bb4a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   1bb4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   1bb52:	f7ea ba49 	b.w	5fe8 <arch_irq_enable>
   1bb56:	bf00      	nop
   1bb58:	20001fec 	.word	0x20001fec
   1bb5c:	20001fe8 	.word	0x20001fe8
   1bb60:	e000e100 	.word	0xe000e100
   1bb64:	40001000 	.word	0x40001000

0001bb68 <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   1bb68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1bb6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   1bb70:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   1bb72:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   1bb76:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   1bb7a:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   1bb7e:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   1bb82:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   1bb86:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   1bb8a:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   1bb8e:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   1bb92:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   1bb96:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   1bb9a:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   1bb9e:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   1bba2:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   1bba6:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   1bbaa:	4770      	bx	lr

0001bbac <radio_reset>:
{
   1bbac:	b510      	push	{r4, lr}
	irq_disable(RADIO_IRQn);
   1bbae:	2001      	movs	r0, #1
   1bbb0:	f7ea fa2a 	bl	6008 <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (uint32_t) radio_power;
   1bbb4:	4b0c      	ldr	r3, [pc, #48]	; (1bbe8 <radio_reset+0x3c>)
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   1bbb6:	490d      	ldr	r1, [pc, #52]	; (1bbec <radio_reset+0x40>)
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1bbb8:	4a0d      	ldr	r2, [pc, #52]	; (1bbf0 <radio_reset+0x44>)
   1bbba:	2400      	movs	r4, #0
   1bbbc:	2001      	movs	r0, #1
   1bbbe:	f8c3 4ffc 	str.w	r4, [r3, #4092]	; 0xffc
   1bbc2:	f8c3 0ffc 	str.w	r0, [r3, #4092]	; 0xffc
   1bbc6:	680b      	ldr	r3, [r1, #0]
					 0xfffffffe) | 0x01000000;
   1bbc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1bbcc:	f023 0301 	bic.w	r3, r3, #1
   1bbd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1bbd4:	f44f 5490 	mov.w	r4, #4608	; 0x1200
		BIT(HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) |
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(0));
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1bbd8:	f44f 5010 	mov.w	r0, #9216	; 0x2400
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   1bbdc:	600b      	str	r3, [r1, #0]
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1bbde:	f8c2 4800 	str.w	r4, [r2, #2048]	; 0x800
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1bbe2:	f8c2 0804 	str.w	r0, [r2, #2052]	; 0x804
}
   1bbe6:	bd10      	pop	{r4, pc}
   1bbe8:	40001000 	.word	0x40001000
   1bbec:	40001774 	.word	0x40001774
   1bbf0:	4001f000 	.word	0x4001f000

0001bbf4 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   1bbf4:	4b06      	ldr	r3, [pc, #24]	; (1bc10 <radio_phy_set+0x1c>)
	switch (phy) {
   1bbf6:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   1bbf8:	bf14      	ite	ne
   1bbfa:	2203      	movne	r2, #3
   1bbfc:	2204      	moveq	r2, #4
   1bbfe:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   1bc02:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   1bc06:	f042 0201 	orr.w	r2, r2, #1
   1bc0a:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   1bc0e:	4770      	bx	lr
   1bc10:	40001000 	.word	0x40001000

0001bc14 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   1bc14:	4b01      	ldr	r3, [pc, #4]	; (1bc1c <radio_tx_power_set+0x8>)
   1bc16:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   1bc1a:	4770      	bx	lr
   1bc1c:	40001000 	.word	0x40001000

0001bc20 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   1bc20:	4b01      	ldr	r3, [pc, #4]	; (1bc28 <radio_freq_chan_set+0x8>)
   1bc22:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   1bc26:	4770      	bx	lr
   1bc28:	40001000 	.word	0x40001000

0001bc2c <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   1bc2c:	4b07      	ldr	r3, [pc, #28]	; (1bc4c <radio_whiten_iv_set+0x20>)
   1bc2e:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   1bc32:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1bc36:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   1bc3a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   1bc3e:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1bc42:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   1bc46:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   1bc4a:	4770      	bx	lr
   1bc4c:	40001000 	.word	0x40001000

0001bc50 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   1bc50:	4a0b      	ldr	r2, [pc, #44]	; (1bc80 <radio_aa_set+0x30>)
   1bc52:	2100      	movs	r1, #0
	NRF_RADIO->RXADDRESSES =
   1bc54:	2301      	movs	r3, #1
{
   1bc56:	b410      	push	{r4}
	NRF_RADIO->TXADDRESS =
   1bc58:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   1bc5c:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   1bc60:	78c3      	ldrb	r3, [r0, #3]
   1bc62:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   1bc66:	7843      	ldrb	r3, [r0, #1]
   1bc68:	7884      	ldrb	r4, [r0, #2]
   1bc6a:	7801      	ldrb	r1, [r0, #0]
   1bc6c:	041b      	lsls	r3, r3, #16
   1bc6e:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
   1bc72:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
}
   1bc76:	bc10      	pop	{r4}
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   1bc78:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   1bc7c:	4770      	bx	lr
   1bc7e:	bf00      	nop
   1bc80:	40001000 	.word	0x40001000

0001bc84 <radio_pkt_configure>:
	switch (phy) {
   1bc84:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   1bc88:	2b02      	cmp	r3, #2
{
   1bc8a:	b410      	push	{r4}
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   1bc8c:	bf14      	ite	ne
   1bc8e:	2400      	movne	r4, #0
   1bc90:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
	if (dc) {
   1bc94:	07d3      	lsls	r3, r2, #31
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1bc96:	f1c0 0308 	rsb	r3, r0, #8
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   1bc9a:	bf48      	it	mi
   1bc9c:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1bca0:	041b      	lsls	r3, r3, #16
			   ((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   1bca2:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   1bca6:	4320      	orrs	r0, r4
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1bca8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   1bcac:	4a0a      	ldr	r2, [pc, #40]	; (1bcd8 <radio_pkt_configure+0x54>)
}
   1bcae:	bc10      	pop	{r4}
			    RADIO_PCNF0_S1LEN_Msk) |
   1bcb0:	4303      	orrs	r3, r0
   1bcb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   1bcb6:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   1bcba:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   1bcbe:	4807      	ldr	r0, [pc, #28]	; (1bcdc <radio_pkt_configure+0x58>)
   1bcc0:	4018      	ands	r0, r3
   1bcc2:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((uint32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   1bcc6:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   1bcca:	4319      	orrs	r1, r3
   1bccc:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   1bcd0:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
   1bcd4:	4770      	bx	lr
   1bcd6:	bf00      	nop
   1bcd8:	40001000 	.word	0x40001000
   1bcdc:	fef80000 	.word	0xfef80000

0001bce0 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   1bce0:	4b01      	ldr	r3, [pc, #4]	; (1bce8 <radio_pkt_rx_set+0x8>)
   1bce2:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   1bce6:	4770      	bx	lr
   1bce8:	40001000 	.word	0x40001000

0001bcec <radio_pkt_tx_set>:
   1bcec:	4b01      	ldr	r3, [pc, #4]	; (1bcf4 <radio_pkt_tx_set+0x8>)
   1bcee:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   1bcf2:	4770      	bx	lr
   1bcf4:	40001000 	.word	0x40001000

0001bcf8 <radio_tx_chain_delay_get>:
}
   1bcf8:	2001      	movs	r0, #1
   1bcfa:	4770      	bx	lr

0001bcfc <radio_rx_ready_delay_get>:
}
   1bcfc:	2029      	movs	r0, #41	; 0x29
   1bcfe:	4770      	bx	lr

0001bd00 <radio_rx_chain_delay_get>:
	switch (phy) {
   1bd00:	2802      	cmp	r0, #2
}
   1bd02:	bf14      	ite	ne
   1bd04:	200a      	movne	r0, #10
   1bd06:	2005      	moveq	r0, #5
   1bd08:	4770      	bx	lr
   1bd0a:	bf00      	nop

0001bd0c <radio_tx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1bd0c:	4b01      	ldr	r3, [pc, #4]	; (1bd14 <radio_tx_enable+0x8>)
   1bd0e:	2201      	movs	r2, #1
   1bd10:	601a      	str	r2, [r3, #0]
}
   1bd12:	4770      	bx	lr
   1bd14:	40001000 	.word	0x40001000

0001bd18 <radio_disable>:
{
   1bd18:	b430      	push	{r4, r5}
    p_reg->CHENCLR = mask;
   1bd1a:	4a08      	ldr	r2, [pc, #32]	; (1bd3c <radio_disable+0x24>)
	NRF_RADIO->SHORTS = 0;
   1bd1c:	4808      	ldr	r0, [pc, #32]	; (1bd40 <radio_disable+0x28>)
   1bd1e:	4909      	ldr	r1, [pc, #36]	; (1bd44 <radio_disable+0x2c>)
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   1bd20:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   1bd22:	f44f 6510 	mov.w	r5, #2304	; 0x900
   1bd26:	2400      	movs	r4, #0
   1bd28:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   1bd2c:	6053      	str	r3, [r2, #4]
   1bd2e:	60d3      	str	r3, [r2, #12]
   1bd30:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
   1bd34:	bc30      	pop	{r4, r5}
   1bd36:	600b      	str	r3, [r1, #0]
   1bd38:	4770      	bx	lr
   1bd3a:	bf00      	nop
   1bd3c:	4001f000 	.word	0x4001f000
   1bd40:	40001000 	.word	0x40001000
   1bd44:	40001010 	.word	0x40001010

0001bd48 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   1bd48:	4b04      	ldr	r3, [pc, #16]	; (1bd5c <radio_status_reset+0x14>)
   1bd4a:	2200      	movs	r2, #0
   1bd4c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   1bd50:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   1bd54:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   1bd58:	4770      	bx	lr
   1bd5a:	bf00      	nop
   1bd5c:	40001000 	.word	0x40001000

0001bd60 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   1bd60:	4b03      	ldr	r3, [pc, #12]	; (1bd70 <radio_is_ready+0x10>)
   1bd62:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   1bd66:	3800      	subs	r0, #0
   1bd68:	bf18      	it	ne
   1bd6a:	2001      	movne	r0, #1
   1bd6c:	4770      	bx	lr
   1bd6e:	bf00      	nop
   1bd70:	40001000 	.word	0x40001000

0001bd74 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   1bd74:	4b03      	ldr	r3, [pc, #12]	; (1bd84 <radio_is_done+0x10>)
   1bd76:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   1bd7a:	3800      	subs	r0, #0
   1bd7c:	bf18      	it	ne
   1bd7e:	2001      	movne	r0, #1
   1bd80:	4770      	bx	lr
   1bd82:	bf00      	nop
   1bd84:	40001000 	.word	0x40001000

0001bd88 <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
   1bd88:	4b03      	ldr	r3, [pc, #12]	; (1bd98 <radio_is_idle+0x10>)
   1bd8a:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   1bd8e:	fab0 f080 	clz	r0, r0
   1bd92:	0940      	lsrs	r0, r0, #5
   1bd94:	4770      	bx	lr
   1bd96:	bf00      	nop
   1bd98:	40001000 	.word	0x40001000

0001bd9c <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
   1bd9c:	4b04      	ldr	r3, [pc, #16]	; (1bdb0 <radio_crc_configure+0x14>)
   1bd9e:	f240 1203 	movw	r2, #259	; 0x103
   1bda2:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
   1bda6:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   1bdaa:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   1bdae:	4770      	bx	lr
   1bdb0:	40001000 	.word	0x40001000

0001bdb4 <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
   1bdb4:	4b03      	ldr	r3, [pc, #12]	; (1bdc4 <radio_crc_is_valid+0x10>)
   1bdb6:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1bdba:	3800      	subs	r0, #0
   1bdbc:	bf18      	it	ne
   1bdbe:	2001      	movne	r0, #1
   1bdc0:	4770      	bx	lr
   1bdc2:	bf00      	nop
   1bdc4:	40001000 	.word	0x40001000

0001bdc8 <radio_pkt_empty_get>:
}
   1bdc8:	4800      	ldr	r0, [pc, #0]	; (1bdcc <radio_pkt_empty_get+0x4>)
   1bdca:	4770      	bx	lr
   1bdcc:	20001ee0 	.word	0x20001ee0

0001bdd0 <radio_pkt_scratch_get>:
}
   1bdd0:	4800      	ldr	r0, [pc, #0]	; (1bdd4 <radio_pkt_scratch_get+0x4>)
   1bdd2:	4770      	bx	lr
   1bdd4:	20001ee4 	.word	0x20001ee4

0001bdd8 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1bdd8:	4b05      	ldr	r3, [pc, #20]	; (1bdf0 <radio_switch_complete_and_rx+0x18>)
{
   1bdda:	b410      	push	{r4}
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
   1bddc:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1bdde:	2403      	movs	r4, #3
{
   1bde0:	4602      	mov	r2, r0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1bde2:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
   1bde6:	4608      	mov	r0, r1
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1bde8:	bc10      	pop	{r4}
	sw_switch(0, 0, 0, phy_rx, 0);
   1bdea:	f7ff be29 	b.w	1ba40 <sw_switch.isra.0>
   1bdee:	bf00      	nop
   1bdf0:	40001000 	.word	0x40001000

0001bdf4 <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1bdf4:	4b04      	ldr	r3, [pc, #16]	; (1be08 <radio_switch_complete_and_tx+0x14>)
{
   1bdf6:	b410      	push	{r4}
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1bdf8:	2403      	movs	r4, #3
{
   1bdfa:	4601      	mov	r1, r0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1bdfc:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   1be00:	2001      	movs	r0, #1
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1be02:	bc10      	pop	{r4}
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   1be04:	f7ff be1c 	b.w	1ba40 <sw_switch.isra.0>
   1be08:	40001000 	.word	0x40001000

0001be0c <radio_switch_complete_and_disable>:

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   1be0c:	4904      	ldr	r1, [pc, #16]	; (1be20 <radio_switch_complete_and_disable+0x14>)
    p_reg->CHENCLR = mask;
   1be0e:	4b05      	ldr	r3, [pc, #20]	; (1be24 <radio_switch_complete_and_disable+0x18>)
   1be10:	2003      	movs	r0, #3
   1be12:	f44f 6210 	mov.w	r2, #2304	; 0x900
   1be16:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   1be1a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1be1e:	4770      	bx	lr
   1be20:	40001000 	.word	0x40001000
   1be24:	4001f000 	.word	0x4001f000

0001be28 <radio_rssi_status_reset>:
	return NRF_RADIO->RSSISAMPLE;
}

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   1be28:	4b02      	ldr	r3, [pc, #8]	; (1be34 <radio_rssi_status_reset+0xc>)
   1be2a:	2200      	movs	r2, #0
   1be2c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   1be30:	4770      	bx	lr
   1be32:	bf00      	nop
   1be34:	40001000 	.word	0x40001000

0001be38 <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   1be38:	4b03      	ldr	r3, [pc, #12]	; (1be48 <radio_rssi_is_ready+0x10>)
   1be3a:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   1be3e:	3800      	subs	r0, #0
   1be40:	bf18      	it	ne
   1be42:	2001      	movne	r0, #1
   1be44:	4770      	bx	lr
   1be46:	bf00      	nop
   1be48:	40001000 	.word	0x40001000

0001be4c <radio_filter_configure>:

void radio_filter_configure(uint8_t bitmask_enable, uint8_t bitmask_addr_type,
			    uint8_t *bdaddr)
{
   1be4c:	b430      	push	{r4, r5}
   1be4e:	2400      	movs	r4, #0
	uint8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   1be50:	00a3      	lsls	r3, r4, #2
   1be52:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1be56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
   1be5a:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   1be5c:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
   1be60:	3401      	adds	r4, #1
   1be62:	8895      	ldrh	r5, [r2, #4]
   1be64:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   1be68:	2c08      	cmp	r4, #8
		bdaddr += 6;
   1be6a:	f102 0206 	add.w	r2, r2, #6
	for (index = 0U; index < 8; index++) {
   1be6e:	d1ef      	bne.n	1be50 <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   1be70:	4b03      	ldr	r3, [pc, #12]	; (1be80 <radio_filter_configure+0x34>)
   1be72:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
}
   1be76:	bc30      	pop	{r4, r5}
	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   1be78:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   1be7c:	4770      	bx	lr
   1be7e:	bf00      	nop
   1be80:	40001000 	.word	0x40001000

0001be84 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   1be84:	4a03      	ldr	r2, [pc, #12]	; (1be94 <radio_filter_disable+0x10>)
   1be86:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   1be8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1be8e:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   1be92:	4770      	bx	lr
   1be94:	40001000 	.word	0x40001000

0001be98 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   1be98:	4b02      	ldr	r3, [pc, #8]	; (1bea4 <radio_filter_status_reset+0xc>)
   1be9a:	2200      	movs	r2, #0
   1be9c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   1bea0:	4770      	bx	lr
   1bea2:	bf00      	nop
   1bea4:	40001000 	.word	0x40001000

0001bea8 <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   1bea8:	4b03      	ldr	r3, [pc, #12]	; (1beb8 <radio_filter_has_match+0x10>)
   1beaa:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   1beae:	3800      	subs	r0, #0
   1beb0:	bf18      	it	ne
   1beb2:	2001      	movne	r0, #1
   1beb4:	4770      	bx	lr
   1beb6:	bf00      	nop
   1beb8:	40001000 	.word	0x40001000

0001bebc <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   1bebc:	4b01      	ldr	r3, [pc, #4]	; (1bec4 <radio_filter_match_get+0x8>)
   1bebe:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   1bec2:	4770      	bx	lr
   1bec4:	40001000 	.word	0x40001000

0001bec8 <radio_tmr_status_reset>:
    p_reg->EVTENCLR = mask;
   1bec8:	4904      	ldr	r1, [pc, #16]	; (1bedc <radio_tmr_status_reset+0x14>)
   1beca:	4b05      	ldr	r3, [pc, #20]	; (1bee0 <radio_tmr_status_reset+0x18>)
   1becc:	4a05      	ldr	r2, [pc, #20]	; (1bee4 <radio_tmr_status_reset+0x1c>)
   1bece:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   1bed2:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   1bed6:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			BIT(HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI) |
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   1beda:	4770      	bx	lr
   1bedc:	4000b000 	.word	0x4000b000
   1bee0:	4001f000 	.word	0x4001f000
   1bee4:	0e7000c0 	.word	0x0e7000c0

0001bee8 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   1bee8:	4b03      	ldr	r3, [pc, #12]	; (1bef8 <radio_tmr_tifs_set+0x10>)
   1beea:	4a04      	ldr	r2, [pc, #16]	; (1befc <radio_tmr_tifs_set+0x14>)
   1beec:	781b      	ldrb	r3, [r3, #0]
   1beee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   1bef2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1bef6:	4770      	bx	lr
   1bef8:	20002ab0 	.word	0x20002ab0
   1befc:	40009000 	.word	0x40009000

0001bf00 <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   1bf00:	b4f0      	push	{r4, r5, r6, r7}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   1bf02:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   1bf06:	4d31      	ldr	r5, [pc, #196]	; (1bfcc <radio_tmr_start+0xcc>)
   1bf08:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   1bf0c:	42ab      	cmp	r3, r5
{
   1bf0e:	4604      	mov	r4, r0
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   1bf10:	d906      	bls.n	1bf20 <radio_tmr_start+0x20>
		ticks_start--;
		remainder += 30517578UL;
   1bf12:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
   1bf16:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
   1bf1a:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
		ticks_start--;
   1bf1e:	3901      	subs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1bf20:	4d2b      	ldr	r5, [pc, #172]	; (1bfd0 <radio_tmr_start+0xd0>)
	}
	remainder /= 1000000UL;

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   1bf22:	4b2c      	ldr	r3, [pc, #176]	; (1bfd4 <radio_tmr_start+0xd4>)
	remainder /= 1000000UL;
   1bf24:	482c      	ldr	r0, [pc, #176]	; (1bfd8 <radio_tmr_start+0xd8>)
   1bf26:	2601      	movs	r6, #1
   1bf28:	602e      	str	r6, [r5, #0]
	EVENT_TIMER->MODE = 0;
   1bf2a:	2600      	movs	r6, #0
   1bf2c:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
    p_reg->CC[ch] = cc_val;
   1bf30:	4d2a      	ldr	r5, [pc, #168]	; (1bfdc <radio_tmr_start+0xdc>)
	remainder /= 1000000UL;
   1bf32:	fba0 0202 	umull	r0, r2, r0, r2
	EVENT_TIMER->PRESCALER = 4;
   1bf36:	2604      	movs	r6, #4
   1bf38:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
	remainder /= 1000000UL;
   1bf3c:	0c90      	lsrs	r0, r2, #18
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   1bf3e:	2602      	movs	r6, #2
   1bf40:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1bf44:	4a26      	ldr	r2, [pc, #152]	; (1bfe0 <radio_tmr_start+0xe0>)
    p_reg->CC[cc_channel] = cc_value;
   1bf46:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   1bf4a:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   1bf4e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   1bf52:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344
   1bf56:	4923      	ldr	r1, [pc, #140]	; (1bfe4 <radio_tmr_start+0xe4>)
   1bf58:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    p_reg->CHENSET = mask;
   1bf5c:	2140      	movs	r1, #64	; 0x40
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1bf5e:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    p_reg->CHENSET = mask;
   1bf62:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
	nrf_ppi_channels_disable(
   1bf66:	b354      	cbz	r4, 1bfbe <radio_tmr_start+0xbe>
    p_reg->CHENCLR = mask;
   1bf68:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   1bf6c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_ppi_channels_enable(
   1bf70:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
    p_reg->CHENSET = mask;
   1bf74:	4b1a      	ldr	r3, [pc, #104]	; (1bfe0 <radio_tmr_start+0xe0>)
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   1bf76:	4a1c      	ldr	r2, [pc, #112]	; (1bfe8 <radio_tmr_start+0xe8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1bf78:	491c      	ldr	r1, [pc, #112]	; (1bfec <radio_tmr_start+0xec>)
   1bf7a:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
   1bf7e:	2500      	movs	r5, #0
   1bf80:	2401      	movs	r4, #1
	SW_SWITCH_TIMER->PRESCALER = 4;
   1bf82:	2604      	movs	r6, #4
   1bf84:	600c      	str	r4, [r1, #0]
	SW_SWITCH_TIMER->MODE = 0;
   1bf86:	f8c2 5504 	str.w	r5, [r2, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   1bf8a:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   1bf8e:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508
   1bf92:	6014      	str	r4, [r2, #0]
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1bf94:	f502 32b0 	add.w	r2, r2, #90112	; 0x16000
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1bf98:	4f15      	ldr	r7, [pc, #84]	; (1bff0 <radio_tmr_start+0xf0>)
   1bf9a:	4e16      	ldr	r6, [pc, #88]	; (1bff4 <radio_tmr_start+0xf4>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1bf9c:	4d16      	ldr	r5, [pc, #88]	; (1bff8 <radio_tmr_start+0xf8>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1bf9e:	4c17      	ldr	r4, [pc, #92]	; (1bffc <radio_tmr_start+0xfc>)
   1bfa0:	f8c3 7550 	str.w	r7, [r3, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1bfa4:	320c      	adds	r2, #12
   1bfa6:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1bfaa:	f8c3 6558 	str.w	r6, [r3, #1368]	; 0x558
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1bfae:	f8c3 555c 	str.w	r5, [r3, #1372]	; 0x55c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1bfb2:	f8c3 4560 	str.w	r4, [r3, #1376]	; 0x560
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   1bfb6:	bcf0      	pop	{r4, r5, r6, r7}
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1bfb8:	f8c3 2564 	str.w	r2, [r3, #1380]	; 0x564
   1bfbc:	4770      	bx	lr
    p_reg->CHENCLR = mask;
   1bfbe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   1bfc2:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   1bfc6:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
   1bfca:	e7d3      	b.n	1bf74 <radio_tmr_start+0x74>
   1bfcc:	7ff0bdbf 	.word	0x7ff0bdbf
   1bfd0:	4000800c 	.word	0x4000800c
   1bfd4:	40008000 	.word	0x40008000
   1bfd8:	431bde83 	.word	0x431bde83
   1bfdc:	4000b000 	.word	0x4000b000
   1bfe0:	4001f000 	.word	0x4001f000
   1bfe4:	4000b148 	.word	0x4000b148
   1bfe8:	40009000 	.word	0x40009000
   1bfec:	4000900c 	.word	0x4000900c
   1bff0:	4000110c 	.word	0x4000110c
   1bff4:	40009140 	.word	0x40009140
   1bff8:	4001f004 	.word	0x4001f004
   1bffc:	40009144 	.word	0x40009144

0001c000 <radio_tmr_start_get>:
    return p_reg->CC[ch];
   1c000:	4b01      	ldr	r3, [pc, #4]	; (1c008 <radio_tmr_start_get+0x8>)
   1c002:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   1c006:	4770      	bx	lr
   1c008:	4000b000 	.word	0x4000b000

0001c00c <radio_tmr_stop>:

void radio_tmr_stop(void)
{
   1c00c:	b410      	push	{r4}
   1c00e:	4805      	ldr	r0, [pc, #20]	; (1c024 <radio_tmr_stop+0x18>)
   1c010:	4c05      	ldr	r4, [pc, #20]	; (1c028 <radio_tmr_stop+0x1c>)
   1c012:	4906      	ldr	r1, [pc, #24]	; (1c02c <radio_tmr_stop+0x20>)
   1c014:	4a06      	ldr	r2, [pc, #24]	; (1c030 <radio_tmr_stop+0x24>)
   1c016:	2301      	movs	r3, #1
   1c018:	6023      	str	r3, [r4, #0]
   1c01a:	6003      	str	r3, [r0, #0]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1c01c:	bc10      	pop	{r4}
   1c01e:	600b      	str	r3, [r1, #0]
   1c020:	6013      	str	r3, [r2, #0]
   1c022:	4770      	bx	lr
   1c024:	40008010 	.word	0x40008010
   1c028:	40008004 	.word	0x40008004
   1c02c:	40009004 	.word	0x40009004
   1c030:	40009010 	.word	0x40009010

0001c034 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   1c034:	4904      	ldr	r1, [pc, #16]	; (1c048 <radio_tmr_hcto_configure+0x14>)
    p_reg->CHENSET = mask;
   1c036:	4b05      	ldr	r3, [pc, #20]	; (1c04c <radio_tmr_hcto_configure+0x18>)
   1c038:	f8c1 0544 	str.w	r0, [r1, #1348]	; 0x544
   1c03c:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   1c040:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   1c044:	4770      	bx	lr
   1c046:	bf00      	nop
   1c048:	40008000 	.word	0x40008000
   1c04c:	4001f000 	.word	0x4001f000

0001c050 <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1c050:	4b05      	ldr	r3, [pc, #20]	; (1c068 <radio_tmr_aa_capture+0x18>)
   1c052:	4806      	ldr	r0, [pc, #24]	; (1c06c <radio_tmr_aa_capture+0x1c>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c054:	4906      	ldr	r1, [pc, #24]	; (1c070 <radio_tmr_aa_capture+0x20>)
    p_reg->CHENSET = mask;
   1c056:	4a07      	ldr	r2, [pc, #28]	; (1c074 <radio_tmr_aa_capture+0x24>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1c058:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c05c:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
    p_reg->CHENSET = mask;
   1c060:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   1c064:	4770      	bx	lr
   1c066:	bf00      	nop
   1c068:	4001f000 	.word	0x4001f000
   1c06c:	40001100 	.word	0x40001100
   1c070:	40008040 	.word	0x40008040
   1c074:	04000080 	.word	0x04000080

0001c078 <radio_tmr_aa_get>:

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   1c078:	4b01      	ldr	r3, [pc, #4]	; (1c080 <radio_tmr_aa_get+0x8>)
   1c07a:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   1c07e:	4770      	bx	lr
   1c080:	40008000 	.word	0x40008000

0001c084 <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   1c084:	4b01      	ldr	r3, [pc, #4]	; (1c08c <radio_tmr_aa_save+0x8>)
   1c086:	6018      	str	r0, [r3, #0]
}
   1c088:	4770      	bx	lr
   1c08a:	bf00      	nop
   1c08c:	20001ff0 	.word	0x20001ff0

0001c090 <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
   1c090:	4b01      	ldr	r3, [pc, #4]	; (1c098 <radio_tmr_aa_restore+0x8>)
}
   1c092:	6818      	ldr	r0, [r3, #0]
   1c094:	4770      	bx	lr
   1c096:	bf00      	nop
   1c098:	20001ff0 	.word	0x20001ff0

0001c09c <radio_tmr_ready_get>:

uint32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   1c09c:	4b01      	ldr	r3, [pc, #4]	; (1c0a4 <radio_tmr_ready_get+0x8>)
   1c09e:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   1c0a2:	4770      	bx	lr
   1c0a4:	40008000 	.word	0x40008000

0001c0a8 <radio_tmr_end_capture>:
   1c0a8:	4b02      	ldr	r3, [pc, #8]	; (1c0b4 <radio_tmr_end_capture+0xc>)
   1c0aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   1c0ae:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

void radio_tmr_end_capture(void)
{
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
}
   1c0b2:	4770      	bx	lr
   1c0b4:	4001f000 	.word	0x4001f000

0001c0b8 <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   1c0b8:	4b01      	ldr	r3, [pc, #4]	; (1c0c0 <radio_tmr_end_get+0x8>)
   1c0ba:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   1c0be:	4770      	bx	lr
   1c0c0:	40008000 	.word	0x40008000

0001c0c4 <radio_tmr_tifs_base_get>:
   1c0c4:	4b01      	ldr	r3, [pc, #4]	; (1c0cc <radio_tmr_tifs_base_get+0x8>)
   1c0c6:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   1c0ca:	4770      	bx	lr
   1c0cc:	40008000 	.word	0x40008000

0001c0d0 <radio_ccm_rx_pkt_set>:
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN || CONFIG_BT_CTLR_GPIO_LNA_PIN */

static uint8_t MALIGN(4) _ccm_scratch[(HAL_RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, uint8_t phy, void *pkt)
{
   1c0d0:	b4f0      	push	{r4, r5, r6, r7}
			 CCM_MODE_DATARATE_Pos) &
			CCM_MODE_DATARATE_Msk;
		break;

	case PHY_2M:
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   1c0d2:	f8df c074 	ldr.w	ip, [pc, #116]	; 1c148 <radio_ccm_rx_pkt_set+0x78>
   1c0d6:	4d17      	ldr	r5, [pc, #92]	; (1c134 <radio_ccm_rx_pkt_set+0x64>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1c0d8:	4b17      	ldr	r3, [pc, #92]	; (1c138 <radio_ccm_rx_pkt_set+0x68>)
	}

#if !defined(CONFIG_SOC_COMPATIBLE_NRF52832) && \
	(!defined(CONFIG_BT_CTLR_DATA_LENGTH_MAX) || \
	 (CONFIG_BT_CTLR_DATA_LENGTH_MAX < ((HAL_RADIO_PDU_LEN_MAX) - 4)))
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   1c0da:	4f18      	ldr	r7, [pc, #96]	; (1c13c <radio_ccm_rx_pkt_set+0x6c>)
#endif
#endif /* !CONFIG_SOC_SERIES_NRF51X */

	NRF_CCM->MODE = mode;
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   1c0dc:	4e18      	ldr	r6, [pc, #96]	; (1c140 <radio_ccm_rx_pkt_set+0x70>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1c0de:	2400      	movs	r4, #0
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   1c0e0:	2902      	cmp	r1, #2
   1c0e2:	bf08      	it	eq
   1c0e4:	4665      	moveq	r5, ip
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1c0e6:	2102      	movs	r1, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1c0e8:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1c0ec:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   1c0f0:	f8d7 1518 	ldr.w	r1, [r7, #1304]	; 0x518
   1c0f4:	f507 37f0 	add.w	r7, r7, #122880	; 0x1e000
   1c0f8:	b2c9      	uxtb	r1, r1
	NRF_CCM->MAXPACKETSIZE = max_len;
   1c0fa:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
	NRF_CCM->MODE = mode;
   1c0fe:	f8c3 5504 	str.w	r5, [r3, #1284]	; 0x504
   1c102:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   1c106:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->OUTPTR = (uint32_t)pkt;
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1c10a:	4d0e      	ldr	r5, [pc, #56]	; (1c144 <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   1c10c:	f8c3 650c 	str.w	r6, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (uint32_t)pkt;
   1c110:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                            nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c114:	2201      	movs	r2, #1
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1c116:	f8c3 5514 	str.w	r5, [r3, #1300]	; 0x514
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_CRYPT_PPI));

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   1c11a:	4630      	mov	r0, r6
	NRF_CCM->SHORTS = 0;
   1c11c:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   1c120:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   1c124:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   1c128:	f8c7 1504 	str.w	r1, [r7, #1284]	; 0x504
}
   1c12c:	bcf0      	pop	{r4, r5, r6, r7}
   1c12e:	601a      	str	r2, [r3, #0]
   1c130:	4770      	bx	lr
   1c132:	bf00      	nop
   1c134:	01000001 	.word	0x01000001
   1c138:	4000f000 	.word	0x4000f000
   1c13c:	40001000 	.word	0x40001000
   1c140:	20001ee4 	.word	0x20001ee4
   1c144:	20001dd4 	.word	0x20001dd4
   1c148:	01010001 	.word	0x01010001

0001c14c <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
   1c14c:	b470      	push	{r4, r5, r6}
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1c14e:	4b10      	ldr	r3, [pc, #64]	; (1c190 <radio_ccm_tx_pkt_set+0x44>)
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)pkt;
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   1c150:	4d10      	ldr	r5, [pc, #64]	; (1c194 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->MODE = mode;
   1c152:	4e11      	ldr	r6, [pc, #68]	; (1c198 <radio_ccm_tx_pkt_set+0x4c>)
{
   1c154:	4604      	mov	r4, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1c156:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1c158:	2002      	movs	r0, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1c15a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1c15e:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
	NRF_CCM->MODE = mode;
   1c162:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   1c166:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1c16a:	4e0c      	ldr	r6, [pc, #48]	; (1c19c <radio_ccm_tx_pkt_set+0x50>)
	NRF_CCM->INPTR = (uint32_t)pkt;
   1c16c:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1c170:	2401      	movs	r4, #1
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   1c172:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
	NRF_CCM->EVENTS_ERROR = 0;

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   1c176:	4628      	mov	r0, r5
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1c178:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1c17c:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   1c180:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   1c184:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1c188:	601c      	str	r4, [r3, #0]
}
   1c18a:	bc70      	pop	{r4, r5, r6}
   1c18c:	4770      	bx	lr
   1c18e:	bf00      	nop
   1c190:	4000f000 	.word	0x4000f000
   1c194:	20001ee4 	.word	0x20001ee4
   1c198:	01010000 	.word	0x01010000
   1c19c:	20001dd4 	.word	0x20001dd4

0001c1a0 <radio_ccm_is_done>:
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1c1a0:	4a0e      	ldr	r2, [pc, #56]	; (1c1dc <radio_ccm_is_done+0x3c>)
   1c1a2:	2302      	movs	r3, #2
   1c1a4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

uint32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   1c1a8:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   1c1ac:	b933      	cbnz	r3, 1c1bc <radio_ccm_is_done+0x1c>
		__WFE();
   1c1ae:	bf20      	wfe
		__SEV();
   1c1b0:	bf40      	sev
		__WFE();
   1c1b2:	bf20      	wfe
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   1c1b4:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   1c1b8:	2b00      	cmp	r3, #0
   1c1ba:	d0f8      	beq.n	1c1ae <radio_ccm_is_done+0xe>
}

NRF_STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1c1bc:	4b07      	ldr	r3, [pc, #28]	; (1c1dc <radio_ccm_is_done+0x3c>)
   1c1be:	4a08      	ldr	r2, [pc, #32]	; (1c1e0 <radio_ccm_is_done+0x40>)
   1c1c0:	2002      	movs	r0, #2
   1c1c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1c1c6:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   1c1ca:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_CCM));

	return (NRF_CCM->EVENTS_ERROR == 0);
   1c1ce:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   1c1d2:	fab0 f080 	clz	r0, r0
   1c1d6:	0940      	lsrs	r0, r0, #5
   1c1d8:	4770      	bx	lr
   1c1da:	bf00      	nop
   1c1dc:	4000f000 	.word	0x4000f000
   1c1e0:	e000e100 	.word	0xe000e100

0001c1e4 <radio_ccm_mic_is_valid>:

uint32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   1c1e4:	4b03      	ldr	r3, [pc, #12]	; (1c1f4 <radio_ccm_mic_is_valid+0x10>)
   1c1e6:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1c1ea:	3800      	subs	r0, #0
   1c1ec:	bf18      	it	ne
   1c1ee:	2001      	movne	r0, #1
   1c1f0:	4770      	bx	lr
   1c1f2:	bf00      	nop
   1c1f4:	4000f000 	.word	0x4000f000

0001c1f8 <radio_ar_configure>:
	if (IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) &&
	    ((flags & BIT(1)) || (!(flags & BIT(0)) && (phy > PHY_1M)))) {
		addrptr = NRF_RADIO->PACKETPTR + 1;
		bcc = 80;
	} else {
		addrptr = NRF_RADIO->PACKETPTR - 1;
   1c1f8:	4a14      	ldr	r2, [pc, #80]	; (1c24c <radio_ar_configure+0x54>)
	/* For Coded PHY adjust for CI and TERM1 */
	if (IS_ENABLED(CONFIG_BT_CTLR_PHY_CODED) && (phy == PHY_CODED)) {
		bcc += 5;
	}

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   1c1fa:	4b15      	ldr	r3, [pc, #84]	; (1c250 <radio_ar_configure+0x58>)
{
   1c1fc:	b470      	push	{r4, r5, r6}
		addrptr = NRF_RADIO->PACKETPTR - 1;
   1c1fe:	f8d2 5504 	ldr.w	r5, [r2, #1284]	; 0x504
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (uint32_t)irk;
	NRF_AAR->ADDRPTR = addrptr;
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   1c202:	4e14      	ldr	r6, [pc, #80]	; (1c254 <radio_ar_configure+0x5c>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   1c204:	2403      	movs	r4, #3
   1c206:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
		addrptr = NRF_RADIO->PACKETPTR - 1;
   1c20a:	3d01      	subs	r5, #1
	NRF_AAR->NIRK = nirk;
   1c20c:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504

	NRF_AAR->EVENTS_END = 0;
   1c210:	2400      	movs	r4, #0
    p_reg->BCC = radio_bcc;
   1c212:	2040      	movs	r0, #64	; 0x40
	NRF_AAR->IRKPTR = (uint32_t)irk;
   1c214:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	NRF_AAR->ADDRPTR = addrptr;
   1c218:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   1c21c:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRF_AAR->EVENTS_END = 0;
   1c220:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   1c224:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   1c228:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   1c22c:	f8c2 0560 	str.w	r0, [r2, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   1c230:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1c234:	4908      	ldr	r1, [pc, #32]	; (1c258 <radio_ar_configure+0x60>)
   1c236:	4303      	orrs	r3, r0
   1c238:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   1c23c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1c240:	f8c2 4128 	str.w	r4, [r2, #296]	; 0x128
	radio_bc_configure(bcc);
	radio_bc_status_reset();

	hal_trigger_aar_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}
   1c244:	bc70      	pop	{r4, r5, r6}
   1c246:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
   1c24a:	4770      	bx	lr
   1c24c:	40001000 	.word	0x40001000
   1c250:	4000f000 	.word	0x4000f000
   1c254:	20001dd0 	.word	0x20001dd0
   1c258:	4001f000 	.word	0x4001f000

0001c25c <radio_ar_match_get>:

uint32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   1c25c:	4b01      	ldr	r3, [pc, #4]	; (1c264 <radio_ar_match_get+0x8>)
   1c25e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1c262:	4770      	bx	lr
   1c264:	4000f000 	.word	0x4000f000

0001c268 <radio_ar_status_reset>:

void radio_ar_status_reset(void)
{
   1c268:	b410      	push	{r4}
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   1c26a:	4807      	ldr	r0, [pc, #28]	; (1c288 <radio_ar_status_reset+0x20>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1c26c:	4c07      	ldr	r4, [pc, #28]	; (1c28c <radio_ar_status_reset+0x24>)
    p_reg->CHENCLR = mask;
   1c26e:	4a08      	ldr	r2, [pc, #32]	; (1c290 <radio_ar_status_reset+0x28>)
   1c270:	2300      	movs	r3, #0
   1c272:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   1c276:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   1c27a:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;

	hal_radio_nrf_ppi_channels_disable(BIT(HAL_TRIGGER_AAR_PPI));
}
   1c27e:	bc10      	pop	{r4}
   1c280:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
   1c284:	4770      	bx	lr
   1c286:	bf00      	nop
   1c288:	4000f000 	.word	0x4000f000
   1c28c:	40001000 	.word	0x40001000
   1c290:	4001f000 	.word	0x4001f000

0001c294 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   1c294:	4b08      	ldr	r3, [pc, #32]	; (1c2b8 <radio_ar_has_match+0x24>)
   1c296:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

uint32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   1c29a:	b160      	cbz	r0, 1c2b6 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   1c29c:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   1c2a0:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   1c2a4:	b138      	cbz	r0, 1c2b6 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   1c2a6:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   1c2aa:	b120      	cbz	r0, 1c2b6 <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   1c2ac:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   1c2b0:	fab0 f080 	clz	r0, r0
   1c2b4:	0940      	lsrs	r0, r0, #5
}
   1c2b6:	4770      	bx	lr
   1c2b8:	40001000 	.word	0x40001000

0001c2bc <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1c2bc:	2902      	cmp	r1, #2
{
   1c2be:	b510      	push	{r4, lr}
   1c2c0:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1c2c2:	d00b      	beq.n	1c2dc <mayfly_enable_cb+0x20>
   1c2c4:	4a0a      	ldr	r2, [pc, #40]	; (1c2f0 <mayfly_enable_cb+0x34>)
   1c2c6:	490b      	ldr	r1, [pc, #44]	; (1c2f4 <mayfly_enable_cb+0x38>)
   1c2c8:	480b      	ldr	r0, [pc, #44]	; (1c2f8 <mayfly_enable_cb+0x3c>)
   1c2ca:	231e      	movs	r3, #30
   1c2cc:	f008 f98a 	bl	245e4 <printk>
   1c2d0:	4040      	eors	r0, r0
   1c2d2:	f380 8811 	msr	BASEPRI, r0
   1c2d6:	f04f 0003 	mov.w	r0, #3
   1c2da:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   1c2dc:	200b      	movs	r0, #11
	if (enable) {
   1c2de:	b11c      	cbz	r4, 1c2e8 <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   1c2e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   1c2e4:	f7e9 be80 	b.w	5fe8 <arch_irq_enable>
}
   1c2e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   1c2ec:	f7e9 be8c 	b.w	6008 <arch_irq_disable>
   1c2f0:	0002be08 	.word	0x0002be08
   1c2f4:	0002be58 	.word	0x0002be58
   1c2f8:	0002b0c4 	.word	0x0002b0c4

0001c2fc <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   1c2fc:	b129      	cbz	r1, 1c30a <mayfly_is_enabled+0xe>
   1c2fe:	3901      	subs	r1, #1
   1c300:	2901      	cmp	r1, #1
   1c302:	d805      	bhi.n	1c310 <mayfly_is_enabled+0x14>
	case MAYFLY_CALL_ID_LLL:
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);

	case MAYFLY_CALL_ID_WORKER:
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   1c304:	200b      	movs	r0, #11
   1c306:	f7e9 be93 	b.w	6030 <arch_irq_is_enabled>
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   1c30a:	2018      	movs	r0, #24
   1c30c:	f7e9 be90 	b.w	6030 <arch_irq_is_enabled>
{
   1c310:	b508      	push	{r3, lr}

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   1c312:	4a07      	ldr	r2, [pc, #28]	; (1c330 <mayfly_is_enabled+0x34>)
   1c314:	4907      	ldr	r1, [pc, #28]	; (1c334 <mayfly_is_enabled+0x38>)
   1c316:	4808      	ldr	r0, [pc, #32]	; (1c338 <mayfly_is_enabled+0x3c>)
   1c318:	2336      	movs	r3, #54	; 0x36
   1c31a:	f008 f963 	bl	245e4 <printk>
   1c31e:	4040      	eors	r0, r0
   1c320:	f380 8811 	msr	BASEPRI, r0
   1c324:	f04f 0003 	mov.w	r0, #3
   1c328:	df02      	svc	2
		break;
	}

	return 0;
}
   1c32a:	2000      	movs	r0, #0
   1c32c:	bd08      	pop	{r3, pc}
   1c32e:	bf00      	nop
   1c330:	0002be08 	.word	0x0002be08
   1c334:	0002b15c 	.word	0x0002b15c
   1c338:	0002b0c4 	.word	0x0002b0c4

0001c33c <mayfly_prio_is_equal>:
#endif
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1c33c:	4288      	cmp	r0, r1
   1c33e:	d00b      	beq.n	1c358 <mayfly_prio_is_equal+0x1c>
	return (caller_id == callee_id) ||
   1c340:	2801      	cmp	r0, #1
   1c342:	d003      	beq.n	1c34c <mayfly_prio_is_equal+0x10>
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1c344:	2802      	cmp	r0, #2
   1c346:	d009      	beq.n	1c35c <mayfly_prio_is_equal+0x20>
   1c348:	2000      	movs	r0, #0
#endif
	       0;
}
   1c34a:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   1c34c:	f1a1 0002 	sub.w	r0, r1, #2
   1c350:	fab0 f080 	clz	r0, r0
   1c354:	0940      	lsrs	r0, r0, #5
   1c356:	4770      	bx	lr
   1c358:	2001      	movs	r0, #1
   1c35a:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   1c35c:	f1a1 0001 	sub.w	r0, r1, #1
   1c360:	fab0 f080 	clz	r0, r0
   1c364:	0940      	lsrs	r0, r0, #5
   1c366:	4770      	bx	lr

0001c368 <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   1c368:	2901      	cmp	r1, #1
{
   1c36a:	b508      	push	{r3, lr}
	switch (callee_id) {
   1c36c:	d00f      	beq.n	1c38e <mayfly_pend+0x26>
   1c36e:	2902      	cmp	r1, #2
   1c370:	d00d      	beq.n	1c38e <mayfly_pend+0x26>
   1c372:	b191      	cbz	r1, 1c39a <mayfly_pend+0x32>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   1c374:	4a0c      	ldr	r2, [pc, #48]	; (1c3a8 <mayfly_pend+0x40>)
   1c376:	490d      	ldr	r1, [pc, #52]	; (1c3ac <mayfly_pend+0x44>)
   1c378:	480d      	ldr	r0, [pc, #52]	; (1c3b0 <mayfly_pend+0x48>)
   1c37a:	2367      	movs	r3, #103	; 0x67
   1c37c:	f008 f932 	bl	245e4 <printk>
   1c380:	4040      	eors	r0, r0
   1c382:	f380 8811 	msr	BASEPRI, r0
   1c386:	f04f 0003 	mov.w	r0, #3
   1c38a:	df02      	svc	2
		break;
	}
}
   1c38c:	bd08      	pop	{r3, pc}
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1c38e:	4b09      	ldr	r3, [pc, #36]	; (1c3b4 <mayfly_pend+0x4c>)
   1c390:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1c394:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1c398:	bd08      	pop	{r3, pc}
   1c39a:	4b06      	ldr	r3, [pc, #24]	; (1c3b4 <mayfly_pend+0x4c>)
   1c39c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1c3a0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1c3a4:	bd08      	pop	{r3, pc}
   1c3a6:	bf00      	nop
   1c3a8:	0002be08 	.word	0x0002be08
   1c3ac:	0002b15c 	.word	0x0002b15c
   1c3b0:	0002b0c4 	.word	0x0002b0c4
   1c3b4:	e000e100 	.word	0xe000e100

0001c3b8 <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1c3b8:	2803      	cmp	r0, #3
{
   1c3ba:	b510      	push	{r4, lr}
   1c3bc:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1c3be:	d804      	bhi.n	1c3ca <hal_ticker_instance0_caller_id_get+0x12>

	caller_id = caller_id_lut[user_id];
   1c3c0:	4b11      	ldr	r3, [pc, #68]	; (1c408 <hal_ticker_instance0_caller_id_get+0x50>)
   1c3c2:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1c3c4:	b18c      	cbz	r4, 1c3ea <hal_ticker_instance0_caller_id_get+0x32>

	return caller_id;
}
   1c3c6:	4620      	mov	r0, r4
   1c3c8:	bd10      	pop	{r4, pc}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1c3ca:	4a10      	ldr	r2, [pc, #64]	; (1c40c <hal_ticker_instance0_caller_id_get+0x54>)
   1c3cc:	4910      	ldr	r1, [pc, #64]	; (1c410 <hal_ticker_instance0_caller_id_get+0x58>)
   1c3ce:	4811      	ldr	r0, [pc, #68]	; (1c414 <hal_ticker_instance0_caller_id_get+0x5c>)
   1c3d0:	232b      	movs	r3, #43	; 0x2b
   1c3d2:	f008 f907 	bl	245e4 <printk>
   1c3d6:	4040      	eors	r0, r0
   1c3d8:	f380 8811 	msr	BASEPRI, r0
   1c3dc:	f04f 0003 	mov.w	r0, #3
   1c3e0:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   1c3e2:	4b09      	ldr	r3, [pc, #36]	; (1c408 <hal_ticker_instance0_caller_id_get+0x50>)
   1c3e4:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1c3e6:	2c00      	cmp	r4, #0
   1c3e8:	d1ed      	bne.n	1c3c6 <hal_ticker_instance0_caller_id_get+0xe>
   1c3ea:	4a08      	ldr	r2, [pc, #32]	; (1c40c <hal_ticker_instance0_caller_id_get+0x54>)
   1c3ec:	490a      	ldr	r1, [pc, #40]	; (1c418 <hal_ticker_instance0_caller_id_get+0x60>)
   1c3ee:	4809      	ldr	r0, [pc, #36]	; (1c414 <hal_ticker_instance0_caller_id_get+0x5c>)
   1c3f0:	232e      	movs	r3, #46	; 0x2e
   1c3f2:	f008 f8f7 	bl	245e4 <printk>
   1c3f6:	4040      	eors	r0, r0
   1c3f8:	f380 8811 	msr	BASEPRI, r0
   1c3fc:	f04f 0003 	mov.w	r0, #3
   1c400:	df02      	svc	2
}
   1c402:	4620      	mov	r0, r4
   1c404:	bd10      	pop	{r4, pc}
   1c406:	bf00      	nop
   1c408:	0002bf10 	.word	0x0002bf10
   1c40c:	0002be7c 	.word	0x0002be7c
   1c410:	0002becc 	.word	0x0002becc
   1c414:	0002b0c4 	.word	0x0002b0c4
   1c418:	0002beec 	.word	0x0002beec

0001c41c <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   1c41c:	3801      	subs	r0, #1
{
   1c41e:	b510      	push	{r4, lr}
   1c420:	461c      	mov	r4, r3
   1c422:	2804      	cmp	r0, #4
   1c424:	d855      	bhi.n	1c4d2 <hal_ticker_instance0_sched+0xb6>
   1c426:	e8df f000 	tbb	[pc, r0]
   1c42a:	1a12      	.short	0x1a12
   1c42c:	1e16      	.short	0x1e16
   1c42e:	03          	.byte	0x03
   1c42f:	00          	.byte	0x00
			break;
		}
		break;

	case TICKER_CALL_ID_PROGRAM:
		switch (callee_id) {
   1c430:	2904      	cmp	r1, #4
   1c432:	d01e      	beq.n	1c472 <hal_ticker_instance0_sched+0x56>
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
   1c434:	23ba      	movs	r3, #186	; 0xba
			break;
		}
		break;

	default:
		LL_ASSERT(0);
   1c436:	4a28      	ldr	r2, [pc, #160]	; (1c4d8 <hal_ticker_instance0_sched+0xbc>)
   1c438:	4928      	ldr	r1, [pc, #160]	; (1c4dc <hal_ticker_instance0_sched+0xc0>)
   1c43a:	4829      	ldr	r0, [pc, #164]	; (1c4e0 <hal_ticker_instance0_sched+0xc4>)
   1c43c:	f008 f8d2 	bl	245e4 <printk>
   1c440:	4040      	eors	r0, r0
   1c442:	f380 8811 	msr	BASEPRI, r0
   1c446:	f04f 0003 	mov.w	r0, #3
   1c44a:	df02      	svc	2
		break;
	}
}
   1c44c:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1c44e:	2904      	cmp	r1, #4
   1c450:	d01f      	beq.n	1c492 <hal_ticker_instance0_sched+0x76>
			LL_ASSERT(0);
   1c452:	234e      	movs	r3, #78	; 0x4e
   1c454:	e7ef      	b.n	1c436 <hal_ticker_instance0_sched+0x1a>
		switch (callee_id) {
   1c456:	2904      	cmp	r1, #4
   1c458:	d013      	beq.n	1c482 <hal_ticker_instance0_sched+0x66>
			LL_ASSERT(0);
   1c45a:	237c      	movs	r3, #124	; 0x7c
   1c45c:	e7eb      	b.n	1c436 <hal_ticker_instance0_sched+0x1a>
		switch (callee_id) {
   1c45e:	2903      	cmp	r1, #3
   1c460:	d01f      	beq.n	1c4a2 <hal_ticker_instance0_sched+0x86>
			LL_ASSERT(0);
   1c462:	2365      	movs	r3, #101	; 0x65
   1c464:	e7e7      	b.n	1c436 <hal_ticker_instance0_sched+0x1a>
		switch (callee_id) {
   1c466:	2903      	cmp	r1, #3
   1c468:	d02b      	beq.n	1c4c2 <hal_ticker_instance0_sched+0xa6>
   1c46a:	2904      	cmp	r1, #4
   1c46c:	d021      	beq.n	1c4b2 <hal_ticker_instance0_sched+0x96>
			LL_ASSERT(0);
   1c46e:	23a2      	movs	r3, #162	; 0xa2
   1c470:	e7e1      	b.n	1c436 <hal_ticker_instance0_sched+0x1a>
			m.param = instance;
   1c472:	4b1c      	ldr	r3, [pc, #112]	; (1c4e4 <hal_ticker_instance0_sched+0xc8>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1c474:	2102      	movs	r1, #2
			m.param = instance;
   1c476:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1c478:	2003      	movs	r0, #3
}
   1c47a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1c47e:	f7f2 bd5b 	b.w	ef38 <mayfly_enqueue>
			m.param = instance;
   1c482:	4b19      	ldr	r3, [pc, #100]	; (1c4e8 <hal_ticker_instance0_sched+0xcc>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1c484:	2102      	movs	r1, #2
			m.param = instance;
   1c486:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1c488:	2001      	movs	r0, #1
}
   1c48a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1c48e:	f7f2 bd53 	b.w	ef38 <mayfly_enqueue>
			m.param = instance;
   1c492:	4b16      	ldr	r3, [pc, #88]	; (1c4ec <hal_ticker_instance0_sched+0xd0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1c494:	2102      	movs	r1, #2
			m.param = instance;
   1c496:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1c498:	2000      	movs	r0, #0
}
   1c49a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1c49e:	f7f2 bd4b 	b.w	ef38 <mayfly_enqueue>
			m.param = instance;
   1c4a2:	4b13      	ldr	r3, [pc, #76]	; (1c4f0 <hal_ticker_instance0_sched+0xd4>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1c4a4:	2101      	movs	r1, #1
			m.param = instance;
   1c4a6:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1c4a8:	4608      	mov	r0, r1
}
   1c4aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1c4ae:	f7f2 bd43 	b.w	ef38 <mayfly_enqueue>
			m.param = instance;
   1c4b2:	4b10      	ldr	r3, [pc, #64]	; (1c4f4 <hal_ticker_instance0_sched+0xd8>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1c4b4:	2102      	movs	r1, #2
			m.param = instance;
   1c4b6:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1c4b8:	4608      	mov	r0, r1
}
   1c4ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1c4be:	f7f2 bd3b 	b.w	ef38 <mayfly_enqueue>
			m.param = instance;
   1c4c2:	4b0d      	ldr	r3, [pc, #52]	; (1c4f8 <hal_ticker_instance0_sched+0xdc>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1c4c4:	2101      	movs	r1, #1
			m.param = instance;
   1c4c6:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1c4c8:	2002      	movs	r0, #2
}
   1c4ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1c4ce:	f7f2 bd33 	b.w	ef38 <mayfly_enqueue>
		LL_ASSERT(0);
   1c4d2:	23c0      	movs	r3, #192	; 0xc0
   1c4d4:	e7af      	b.n	1c436 <hal_ticker_instance0_sched+0x1a>
   1c4d6:	bf00      	nop
   1c4d8:	0002be7c 	.word	0x0002be7c
   1c4dc:	0002b15c 	.word	0x0002b15c
   1c4e0:	0002b0c4 	.word	0x0002b0c4
   1c4e4:	20007b88 	.word	0x20007b88
   1c4e8:	20007b58 	.word	0x20007b58
   1c4ec:	20007b38 	.word	0x20007b38
   1c4f0:	20007b48 	.word	0x20007b48
   1c4f4:	20007b78 	.word	0x20007b78
   1c4f8:	20007b68 	.word	0x20007b68

0001c4fc <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
   1c4fc:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   1c4fe:	2000      	movs	r0, #0
   1c500:	f7ff ba4a 	b.w	1b998 <cntr_cmp_set>

0001c504 <hci_vendor_read_static_addr>:
				 uint8_t size)
{
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1c504:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1c508:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   1c50c:	3201      	adds	r2, #1
   1c50e:	d008      	beq.n	1c522 <hci_vendor_read_static_addr+0x1e>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   1c510:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1c514:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1c518:	f013 0301 	ands.w	r3, r3, #1
   1c51c:	d10f      	bne.n	1c53e <hci_vendor_read_static_addr+0x3a>
		}

		return 1;
	}

	return 0;
   1c51e:	2000      	movs	r0, #0
   1c520:	4770      	bx	lr
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1c522:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   1c526:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1c52a:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1c52c:	4293      	cmp	r3, r2
   1c52e:	d0f6      	beq.n	1c51e <hci_vendor_read_static_addr+0x1a>
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   1c530:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1c534:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1c538:	f013 0301 	ands.w	r3, r3, #1
   1c53c:	d0ef      	beq.n	1c51e <hci_vendor_read_static_addr+0x1a>
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   1c53e:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	sys_put_le16(val >> 16, &dst[2]);
   1c542:	0c19      	lsrs	r1, r3, #16
{
   1c544:	b410      	push	{r4}
	dst[0] = val;
   1c546:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   1c548:	0a0c      	lsrs	r4, r1, #8
   1c54a:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1c54e:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   1c550:	70c4      	strb	r4, [r0, #3]
   1c552:	7043      	strb	r3, [r0, #1]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   1c554:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	dst[0] = val;
   1c558:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   1c55a:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   1c55e:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1c562:	7143      	strb	r3, [r0, #5]
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   1c564:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   1c568:	3301      	adds	r3, #1
   1c56a:	d035      	beq.n	1c5d8 <hci_vendor_read_static_addr+0xd4>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   1c56c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   1c570:	3301      	adds	r3, #1
   1c572:	d031      	beq.n	1c5d8 <hci_vendor_read_static_addr+0xd4>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   1c574:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   1c578:	3301      	adds	r3, #1
   1c57a:	d02d      	beq.n	1c5d8 <hci_vendor_read_static_addr+0xd4>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   1c57c:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   1c580:	3301      	adds	r3, #1
   1c582:	d029      	beq.n	1c5d8 <hci_vendor_read_static_addr+0xd4>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   1c584:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
   1c588:	7183      	strb	r3, [r0, #6]
	sys_put_le16(val >> 16, &dst[2]);
   1c58a:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1c58c:	0a0c      	lsrs	r4, r1, #8
   1c58e:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1c592:	7201      	strb	r1, [r0, #8]
	dst[1] = val >> 8;
   1c594:	7244      	strb	r4, [r0, #9]
   1c596:	71c3      	strb	r3, [r0, #7]
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   1c598:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
	dst[0] = val;
   1c59c:	7283      	strb	r3, [r0, #10]
	sys_put_le16(val >> 16, &dst[2]);
   1c59e:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1c5a0:	0a0c      	lsrs	r4, r1, #8
   1c5a2:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1c5a6:	7301      	strb	r1, [r0, #12]
	dst[1] = val >> 8;
   1c5a8:	7344      	strb	r4, [r0, #13]
   1c5aa:	72c3      	strb	r3, [r0, #11]
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   1c5ac:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
	dst[0] = val;
   1c5b0:	7383      	strb	r3, [r0, #14]
	sys_put_le16(val >> 16, &dst[2]);
   1c5b2:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1c5b4:	0a0c      	lsrs	r4, r1, #8
   1c5b6:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1c5ba:	7401      	strb	r1, [r0, #16]
	dst[1] = val >> 8;
   1c5bc:	7444      	strb	r4, [r0, #17]
   1c5be:	73c3      	strb	r3, [r0, #15]
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   1c5c0:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	dst[0] = val;
   1c5c4:	7483      	strb	r3, [r0, #18]
	sys_put_le16(val >> 16, &dst[2]);
   1c5c6:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   1c5c8:	0a11      	lsrs	r1, r2, #8
   1c5ca:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1c5ce:	7502      	strb	r2, [r0, #20]
	dst[1] = val >> 8;
   1c5d0:	7541      	strb	r1, [r0, #21]
   1c5d2:	74c3      	strb	r3, [r0, #19]
		return 1;
   1c5d4:	2001      	movs	r0, #1
}
   1c5d6:	e009      	b.n	1c5ec <hci_vendor_read_static_addr+0xe8>
__ssp_bos_icheck3(memset, void *, int)
   1c5d8:	2300      	movs	r3, #0
   1c5da:	f8c0 3006 	str.w	r3, [r0, #6]
   1c5de:	f8c0 300a 	str.w	r3, [r0, #10]
   1c5e2:	f8c0 300e 	str.w	r3, [r0, #14]
   1c5e6:	f8c0 3012 	str.w	r3, [r0, #18]
   1c5ea:	2001      	movs	r0, #1
}
   1c5ec:	bc10      	pop	{r4}
   1c5ee:	4770      	bx	lr

0001c5f0 <hci_vendor_read_key_hierarchy_roots>:
   1c5f0:	2300      	movs	r3, #0
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   1c5f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1c5f6:	6003      	str	r3, [r0, #0]
   1c5f8:	6043      	str	r3, [r0, #4]
   1c5fa:	6083      	str	r3, [r0, #8]
   1c5fc:	60c3      	str	r3, [r0, #12]
   1c5fe:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   1c602:	3301      	adds	r3, #1
   1c604:	d036      	beq.n	1c674 <hci_vendor_read_key_hierarchy_roots+0x84>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   1c606:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   1c60a:	3301      	adds	r3, #1
   1c60c:	d032      	beq.n	1c674 <hci_vendor_read_key_hierarchy_roots+0x84>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   1c60e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   1c612:	3301      	adds	r3, #1
   1c614:	d02e      	beq.n	1c674 <hci_vendor_read_key_hierarchy_roots+0x84>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   1c616:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   1c61a:	3301      	adds	r3, #1
   1c61c:	d02a      	beq.n	1c674 <hci_vendor_read_key_hierarchy_roots+0x84>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   1c61e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	dst[0] = val;
   1c622:	700b      	strb	r3, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
   1c624:	0c18      	lsrs	r0, r3, #16
{
   1c626:	b410      	push	{r4}
	dst[1] = val >> 8;
   1c628:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1c62c:	0a04      	lsrs	r4, r0, #8
	dst[0] = val;
   1c62e:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
   1c630:	70cc      	strb	r4, [r1, #3]
   1c632:	704b      	strb	r3, [r1, #1]
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   1c634:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
	dst[0] = val;
   1c638:	710b      	strb	r3, [r1, #4]
	sys_put_le16(val >> 16, &dst[2]);
   1c63a:	0c18      	lsrs	r0, r3, #16
	dst[1] = val >> 8;
   1c63c:	0a04      	lsrs	r4, r0, #8
   1c63e:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1c642:	7188      	strb	r0, [r1, #6]
	dst[1] = val >> 8;
   1c644:	71cc      	strb	r4, [r1, #7]
   1c646:	714b      	strb	r3, [r1, #5]
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   1c648:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
	dst[0] = val;
   1c64c:	720b      	strb	r3, [r1, #8]
	sys_put_le16(val >> 16, &dst[2]);
   1c64e:	0c18      	lsrs	r0, r3, #16
	dst[1] = val >> 8;
   1c650:	0a04      	lsrs	r4, r0, #8
   1c652:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1c656:	7288      	strb	r0, [r1, #10]
	dst[1] = val >> 8;
   1c658:	72cc      	strb	r4, [r1, #11]
   1c65a:	724b      	strb	r3, [r1, #9]
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   1c65c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
	dst[0] = val;
   1c660:	730b      	strb	r3, [r1, #12]
	sys_put_le16(val >> 16, &dst[2]);
   1c662:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   1c664:	0a10      	lsrs	r0, r2, #8
   1c666:	f3c3 2307 	ubfx	r3, r3, #8, #8
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   1c66a:	bc10      	pop	{r4}
	dst[0] = val;
   1c66c:	738a      	strb	r2, [r1, #14]
	dst[1] = val >> 8;
   1c66e:	73c8      	strb	r0, [r1, #15]
   1c670:	734b      	strb	r3, [r1, #13]
   1c672:	4770      	bx	lr
   1c674:	2300      	movs	r3, #0
   1c676:	600b      	str	r3, [r1, #0]
   1c678:	604b      	str	r3, [r1, #4]
   1c67a:	608b      	str	r3, [r1, #8]
   1c67c:	60cb      	str	r3, [r1, #12]
   1c67e:	4770      	bx	lr

0001c680 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1c680:	4b02      	ldr	r3, [pc, #8]	; (1c68c <net_buf_pool_get+0xc>)
   1c682:	2228      	movs	r2, #40	; 0x28
   1c684:	fb02 3000 	mla	r0, r2, r0, r3
   1c688:	4770      	bx	lr
   1c68a:	bf00      	nop
   1c68c:	20007ef0 	.word	0x20007ef0

0001c690 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1c690:	7983      	ldrb	r3, [r0, #6]

	return buf - pool->__bufs;
   1c692:	4a05      	ldr	r2, [pc, #20]	; (1c6a8 <net_buf_id+0x18>)
   1c694:	2128      	movs	r1, #40	; 0x28
   1c696:	fb01 2303 	mla	r3, r1, r3, r2
   1c69a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c69c:	1ac0      	subs	r0, r0, r3
}
   1c69e:	4b03      	ldr	r3, [pc, #12]	; (1c6ac <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   1c6a0:	10c0      	asrs	r0, r0, #3
}
   1c6a2:	4358      	muls	r0, r3
   1c6a4:	4770      	bx	lr
   1c6a6:	bf00      	nop
   1c6a8:	20007ef0 	.word	0x20007ef0
   1c6ac:	aaaaaaab 	.word	0xaaaaaaab

0001c6b0 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1c6b0:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1c6b2:	4a0a      	ldr	r2, [pc, #40]	; (1c6dc <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1c6b4:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1c6b6:	2428      	movs	r4, #40	; 0x28
   1c6b8:	fb04 2303 	mla	r3, r4, r3, r2

	*size = MIN(fixed->data_size, *size);
   1c6bc:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1c6be:	6a1b      	ldr	r3, [r3, #32]
   1c6c0:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1c6c2:	6823      	ldr	r3, [r4, #0]
   1c6c4:	429a      	cmp	r2, r3
   1c6c6:	bf94      	ite	ls
   1c6c8:	600a      	strls	r2, [r1, #0]
   1c6ca:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1c6cc:	f7ff ffe0 	bl	1c690 <net_buf_id>
   1c6d0:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1c6d4:	fb02 3000 	mla	r0, r2, r0, r3
   1c6d8:	bd10      	pop	{r4, pc}
   1c6da:	bf00      	nop
   1c6dc:	20007ef0 	.word	0x20007ef0

0001c6e0 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1c6e0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1c6e4:	4605      	mov	r5, r0
   1c6e6:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1c6e8:	4610      	mov	r0, r2
   1c6ea:	4619      	mov	r1, r3
{
   1c6ec:	4616      	mov	r6, r2
   1c6ee:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1c6f0:	f00d fb2a 	bl	29d48 <sys_clock_timeout_end_calc>
   1c6f4:	4680      	mov	r8, r0
   1c6f6:	4689      	mov	r9, r1
	__asm__ volatile(
   1c6f8:	f04f 0320 	mov.w	r3, #32
   1c6fc:	f3ef 8a11 	mrs	sl, BASEPRI
   1c700:	f383 8811 	msr	BASEPRI, r3
   1c704:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1c708:	8b6b      	ldrh	r3, [r5, #26]
   1c70a:	2b00      	cmp	r3, #0
   1c70c:	d054      	beq.n	1c7b8 <net_buf_alloc_len+0xd8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1c70e:	8b2a      	ldrh	r2, [r5, #24]
   1c710:	429a      	cmp	r2, r3
   1c712:	d93d      	bls.n	1c790 <net_buf_alloc_len+0xb0>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
   1c714:	2200      	movs	r2, #0
   1c716:	2300      	movs	r3, #0
   1c718:	4628      	mov	r0, r5
   1c71a:	f00c fa57 	bl	28bcc <k_queue_get>
			if (buf) {
   1c71e:	4604      	mov	r4, r0
   1c720:	2800      	cmp	r0, #0
   1c722:	d035      	beq.n	1c790 <net_buf_alloc_len+0xb0>
	__asm__ volatile(
   1c724:	f38a 8811 	msr	BASEPRI, sl
   1c728:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1c72c:	9b01      	ldr	r3, [sp, #4]
   1c72e:	2b00      	cmp	r3, #0
   1c730:	d052      	beq.n	1c7d8 <net_buf_alloc_len+0xf8>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1c732:	ea56 0307 	orrs.w	r3, r6, r7
   1c736:	d010      	beq.n	1c75a <net_buf_alloc_len+0x7a>
   1c738:	1c7b      	adds	r3, r7, #1
   1c73a:	bf08      	it	eq
   1c73c:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   1c740:	d00b      	beq.n	1c75a <net_buf_alloc_len+0x7a>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   1c742:	f006 fc73 	bl	2302c <sys_clock_tick_get>
   1c746:	ebb8 0600 	subs.w	r6, r8, r0
   1c74a:	eb69 0701 	sbc.w	r7, r9, r1
   1c74e:	2e00      	cmp	r6, #0
   1c750:	f177 0300 	sbcs.w	r3, r7, #0
   1c754:	bfbc      	itt	lt
   1c756:	2600      	movlt	r6, #0
   1c758:	2700      	movlt	r7, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1c75a:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1c75c:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1c7f0 <net_buf_alloc_len+0x110>
   1c760:	2228      	movs	r2, #40	; 0x28
   1c762:	fb02 8303 	mla	r3, r2, r3, r8
   1c766:	a901      	add	r1, sp, #4
   1c768:	6a1b      	ldr	r3, [r3, #32]
   1c76a:	681b      	ldr	r3, [r3, #0]
   1c76c:	4632      	mov	r2, r6
   1c76e:	681d      	ldr	r5, [r3, #0]
   1c770:	4620      	mov	r0, r4
   1c772:	463b      	mov	r3, r7
   1c774:	47a8      	blx	r5
   1c776:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1c778:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1c77a:	bb70      	cbnz	r0, 1c7da <net_buf_alloc_len+0xfa>
	k_lifo_put(&pool->free, buf);
   1c77c:	79a0      	ldrb	r0, [r4, #6]
   1c77e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1c782:	4621      	mov	r1, r4
   1c784:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
   1c788:	f00c ff8b 	bl	296a2 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1c78c:	462c      	mov	r4, r5
}
   1c78e:	e01f      	b.n	1c7d0 <net_buf_alloc_len+0xf0>
		uninit_count = pool->uninit_count--;
   1c790:	8b68      	ldrh	r0, [r5, #26]
   1c792:	1e43      	subs	r3, r0, #1
   1c794:	836b      	strh	r3, [r5, #26]
   1c796:	f38a 8811 	msr	BASEPRI, sl
   1c79a:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   1c79e:	8b2c      	ldrh	r4, [r5, #24]
   1c7a0:	1a24      	subs	r4, r4, r0
   1c7a2:	6a68      	ldr	r0, [r5, #36]	; 0x24
   1c7a4:	2318      	movs	r3, #24
   1c7a6:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   1c7aa:	4811      	ldr	r0, [pc, #68]	; (1c7f0 <net_buf_alloc_len+0x110>)
   1c7ac:	4b11      	ldr	r3, [pc, #68]	; (1c7f4 <net_buf_alloc_len+0x114>)
   1c7ae:	1a2d      	subs	r5, r5, r0
   1c7b0:	10ed      	asrs	r5, r5, #3
   1c7b2:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   1c7b4:	71a5      	strb	r5, [r4, #6]
		goto success;
   1c7b6:	e7b9      	b.n	1c72c <net_buf_alloc_len+0x4c>
   1c7b8:	f38a 8811 	msr	BASEPRI, sl
   1c7bc:	f3bf 8f6f 	isb	sy
	buf = k_lifo_get(&pool->free, timeout);
   1c7c0:	4632      	mov	r2, r6
   1c7c2:	463b      	mov	r3, r7
   1c7c4:	4628      	mov	r0, r5
   1c7c6:	f00c fa01 	bl	28bcc <k_queue_get>
	if (!buf) {
   1c7ca:	4604      	mov	r4, r0
   1c7cc:	2800      	cmp	r0, #0
   1c7ce:	d1ad      	bne.n	1c72c <net_buf_alloc_len+0x4c>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1c7d0:	4620      	mov	r0, r4
   1c7d2:	b002      	add	sp, #8
   1c7d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf->__buf = NULL;
   1c7d8:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   1c7da:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1c7dc:	2201      	movs	r2, #1
	buf->frags = NULL;
   1c7de:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1c7e0:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   1c7e2:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   1c7e4:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   1c7e6:	6923      	ldr	r3, [r4, #16]
   1c7e8:	81e2      	strh	r2, [r4, #14]
   1c7ea:	60a3      	str	r3, [r4, #8]
	return buf;
   1c7ec:	e7f0      	b.n	1c7d0 <net_buf_alloc_len+0xf0>
   1c7ee:	bf00      	nop
   1c7f0:	20007ef0 	.word	0x20007ef0
   1c7f4:	cccccccd 	.word	0xcccccccd

0001c7f8 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1c7f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c7fc:	4d17      	ldr	r5, [pc, #92]	; (1c85c <net_buf_unref+0x64>)
   1c7fe:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1c800:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   1c802:	2728      	movs	r7, #40	; 0x28
	while (buf) {
   1c804:	b90c      	cbnz	r4, 1c80a <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1c806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   1c80a:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   1c80c:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   1c810:	3b01      	subs	r3, #1
   1c812:	b2db      	uxtb	r3, r3
   1c814:	7123      	strb	r3, [r4, #4]
   1c816:	2b00      	cmp	r3, #0
   1c818:	d1f5      	bne.n	1c806 <net_buf_unref+0xe>
		if (buf->__buf) {
   1c81a:	6921      	ldr	r1, [r4, #16]
   1c81c:	b159      	cbz	r1, 1c836 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1c81e:	7963      	ldrb	r3, [r4, #5]
   1c820:	079b      	lsls	r3, r3, #30
   1c822:	d407      	bmi.n	1c834 <net_buf_unref+0x3c>
	pool->alloc->cb->unref(buf, data);
   1c824:	79a3      	ldrb	r3, [r4, #6]
   1c826:	fb07 5303 	mla	r3, r7, r3, r5
   1c82a:	4620      	mov	r0, r4
   1c82c:	6a1b      	ldr	r3, [r3, #32]
   1c82e:	681b      	ldr	r3, [r3, #0]
   1c830:	689b      	ldr	r3, [r3, #8]
   1c832:	4798      	blx	r3
			buf->__buf = NULL;
   1c834:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   1c836:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1c838:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   1c83a:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   1c83e:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   1c840:	69db      	ldr	r3, [r3, #28]
   1c842:	b11b      	cbz	r3, 1c84c <net_buf_unref+0x54>
			pool->destroy(buf);
   1c844:	4620      	mov	r0, r4
   1c846:	4798      	blx	r3
{
   1c848:	4644      	mov	r4, r8
   1c84a:	e7db      	b.n	1c804 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   1c84c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1c850:	4621      	mov	r1, r4
   1c852:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
   1c856:	f00c ff24 	bl	296a2 <k_queue_prepend>
}
   1c85a:	e7f5      	b.n	1c848 <net_buf_unref+0x50>
   1c85c:	20007ef0 	.word	0x20007ef0

0001c860 <z_mrsh_sys_rand32_get>:
#include <syscalls/rand32.h>

extern uint32_t z_vrfy_sys_rand32_get();
uintptr_t z_mrsh_sys_rand32_get(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   1c860:	b510      	push	{r4, lr}
	_current->syscall_frame = ssf;
   1c862:	4c06      	ldr	r4, [pc, #24]	; (1c87c <z_mrsh_sys_rand32_get+0x1c>)
   1c864:	9a04      	ldr	r2, [sp, #16]
   1c866:	68a3      	ldr	r3, [r4, #8]
   1c868:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#include <syscall_handler.h>


static inline uint32_t z_vrfy_sys_rand32_get(void)
{
	return z_impl_sys_rand32_get();
   1c86c:	f000 f872 	bl	1c954 <z_impl_sys_rand32_get>
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	uint32_t ret = z_vrfy_sys_rand32_get()
;
	_current->syscall_frame = NULL;
   1c870:	68a3      	ldr	r3, [r4, #8]
   1c872:	2200      	movs	r2, #0
   1c874:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	return (uintptr_t) ret;
}
   1c878:	bd10      	pop	{r4, pc}
   1c87a:	bf00      	nop
   1c87c:	200023f4 	.word	0x200023f4

0001c880 <z_mrsh_sys_rand_get>:
#include <syscalls/rand32.h>

extern void z_vrfy_sys_rand_get(void * dst, size_t len);
uintptr_t z_mrsh_sys_rand_get(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   1c880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_current->syscall_frame = ssf;
   1c884:	f8df 809c 	ldr.w	r8, [pc, #156]	; 1c924 <z_mrsh_sys_rand_get+0xa4>
{
   1c888:	b086      	sub	sp, #24
	_current->syscall_frame = ssf;
   1c88a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1c88e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1c890:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
#include <syscalls/sys_rand32_get_mrsh.c>

static inline void z_vrfy_sys_rand_get(void *dst, size_t len)
{
	Z_OOPS(Z_SYSCALL_MEMORY_WRITE(dst, len));
   1c894:	2201      	movs	r2, #1
{
   1c896:	4605      	mov	r5, r0
   1c898:	460f      	mov	r7, r1
   1c89a:	f00a f903 	bl	26aa4 <arch_buffer_validate>
   1c89e:	4646      	mov	r6, r8
   1c8a0:	4604      	mov	r4, r0
   1c8a2:	b348      	cbz	r0, 1c8f8 <z_mrsh_sys_rand_get+0x78>
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   1c8a4:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   1c8a8:	b9c3      	cbnz	r3, 1c8dc <z_mrsh_sys_rand_get+0x5c>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   1c8aa:	f3ef 8314 	mrs	r3, CONTROL
	return (value & CONTROL_nPRIV_Msk) ? true : false;
   1c8ae:	f003 0301 	and.w	r3, r3, #1
   1c8b2:	4a17      	ldr	r2, [pc, #92]	; (1c910 <z_mrsh_sys_rand_get+0x90>)
   1c8b4:	4817      	ldr	r0, [pc, #92]	; (1c914 <z_mrsh_sys_rand_get+0x94>)
   1c8b6:	1a80      	subs	r0, r0, r2
   1c8b8:	08c0      	lsrs	r0, r0, #3
   1c8ba:	0180      	lsls	r0, r0, #6
   1c8bc:	4a16      	ldr	r2, [pc, #88]	; (1c918 <z_mrsh_sys_rand_get+0x98>)
   1c8be:	f040 0001 	orr.w	r0, r0, #1
   1c8c2:	b16b      	cbz	r3, 1c8e0 <z_mrsh_sys_rand_get+0x60>
   1c8c4:	e9cd 7200 	strd	r7, r2, [sp]
   1c8c8:	4914      	ldr	r1, [pc, #80]	; (1c91c <z_mrsh_sys_rand_get+0x9c>)
   1c8ca:	4a15      	ldr	r2, [pc, #84]	; (1c920 <z_mrsh_sys_rand_get+0xa0>)
   1c8cc:	462b      	mov	r3, r5
   1c8ce:	f008 fae2 	bl	24e96 <log_from_user>
   1c8d2:	68b3      	ldr	r3, [r6, #8]
   1c8d4:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   1c8d8:	f00a f8c0 	bl	26a5c <arch_syscall_oops>
		return false;
   1c8dc:	2300      	movs	r3, #0
   1c8de:	e7e8      	b.n	1c8b2 <z_mrsh_sys_rand_get+0x32>
   1c8e0:	4b0f      	ldr	r3, [pc, #60]	; (1c920 <z_mrsh_sys_rand_get+0xa0>)
   1c8e2:	e9cd 7204 	strd	r7, r2, [sp, #16]
   1c8e6:	e9cd 3502 	strd	r3, r5, [sp, #8]
   1c8ea:	2204      	movs	r2, #4
   1c8ec:	4603      	mov	r3, r0
   1c8ee:	a902      	add	r1, sp, #8
   1c8f0:	480a      	ldr	r0, [pc, #40]	; (1c91c <z_mrsh_sys_rand_get+0x9c>)
   1c8f2:	f008 fb4c 	bl	24f8e <log_n>
   1c8f6:	e7ec      	b.n	1c8d2 <z_mrsh_sys_rand_get+0x52>

	z_impl_sys_rand_get(dst, len);
   1c8f8:	4628      	mov	r0, r5
   1c8fa:	4639      	mov	r1, r7
   1c8fc:	f000 f840 	bl	1c980 <z_impl_sys_rand_get>
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	z_vrfy_sys_rand_get(*(void **)&arg0, *(size_t*)&arg1)
;
	_current->syscall_frame = NULL;
   1c900:	f8d8 3008 	ldr.w	r3, [r8, #8]
	return 0;
}
   1c904:	4620      	mov	r0, r4
	_current->syscall_frame = NULL;
   1c906:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
}
   1c90a:	b006      	add	sp, #24
   1c90c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c910:	0002a6d0 	.word	0x0002a6d0
   1c914:	0002a810 	.word	0x0002a810
   1c918:	0002c903 	.word	0x0002c903
   1c91c:	0002c8a6 	.word	0x0002c8a6
   1c920:	0002e707 	.word	0x0002e707
   1c924:	200023f4 	.word	0x200023f4

0001c928 <device_get_binding.constprop.0>:
static inline const struct device * device_get_binding(const char * name)
   1c928:	e92d 0140 	stmdb	sp!, {r6, r8}
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   1c92c:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   1c930:	b94b      	cbnz	r3, 1c946 <device_get_binding.constprop.0+0x1e>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   1c932:	f3ef 8314 	mrs	r3, CONTROL
	if (z_syscall_trap()) {
   1c936:	07db      	lsls	r3, r3, #31
   1c938:	d505      	bpl.n	1c946 <device_get_binding.constprop.0+0x1e>
	register uint32_t ret __asm__("r0") = arg1;
   1c93a:	4805      	ldr	r0, [pc, #20]	; (1c950 <device_get_binding.constprop.0+0x28>)
	register uint32_t r6 __asm__("r6") = call_id;
   1c93c:	2628      	movs	r6, #40	; 0x28
	__asm__ volatile("svc %[svid]\n"
   1c93e:	df03      	svc	3
}
   1c940:	e8bd 0140 	ldmia.w	sp!, {r6, r8}
   1c944:	4770      	bx	lr
	return z_impl_device_get_binding(name);
   1c946:	4802      	ldr	r0, [pc, #8]	; (1c950 <device_get_binding.constprop.0+0x28>)
}
   1c948:	e8bd 0140 	ldmia.w	sp!, {r6, r8}
	return z_impl_device_get_binding(name);
   1c94c:	f003 be9e 	b.w	2068c <z_impl_device_get_binding>
   1c950:	0002e71b 	.word	0x0002e71b

0001c954 <z_impl_sys_rand32_get>:

static const struct device *entropy_driver;

#if defined(CONFIG_ENTROPY_DEVICE_RANDOM_GENERATOR)
uint32_t z_impl_sys_rand32_get(void)
{
   1c954:	b513      	push	{r0, r1, r4, lr}
	const struct device *dev = entropy_driver;
   1c956:	4c09      	ldr	r4, [pc, #36]	; (1c97c <z_impl_sys_rand32_get+0x28>)
   1c958:	6820      	ldr	r0, [r4, #0]
	uint32_t random_num;
	int ret;

	if (unlikely(!dev)) {
   1c95a:	b910      	cbnz	r0, 1c962 <z_impl_sys_rand32_get+0xe>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(DT_CHOSEN_ZEPHYR_ENTROPY_LABEL);
   1c95c:	f7ff ffe4 	bl	1c928 <device_get_binding.constprop.0>
		__ASSERT((dev != NULL),
			"Device driver for %s (DT_CHOSEN_ZEPHYR_ENTROPY_LABEL) not found. "
			"Check your build configuration!",
			DT_CHOSEN_ZEPHYR_ENTROPY_LABEL);
		entropy_driver = dev;
   1c960:	6020      	str	r0, [r4, #0]
	}

	ret = entropy_get_entropy(dev, (uint8_t *)&random_num,
   1c962:	2204      	movs	r2, #4
   1c964:	eb0d 0102 	add.w	r1, sp, r2
   1c968:	f00c f9e0 	bl	28d2c <entropy_get_entropy>
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
   1c96c:	2800      	cmp	r0, #0
   1c96e:	da02      	bge.n	1c976 <z_impl_sys_rand32_get+0x22>
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   1c970:	f7e9 f848 	bl	5a04 <sys_clock_cycle_get_32>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
   1c974:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
   1c976:	9801      	ldr	r0, [sp, #4]
   1c978:	b002      	add	sp, #8
   1c97a:	bd10      	pop	{r4, pc}
   1c97c:	20002024 	.word	0x20002024

0001c980 <z_impl_sys_rand_get>:
	return 0;
}

#if defined(CONFIG_ENTROPY_DEVICE_RANDOM_GENERATOR)
void z_impl_sys_rand_get(void *dst, size_t outlen)
{
   1c980:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct device *dev = entropy_driver;
   1c982:	4c10      	ldr	r4, [pc, #64]	; (1c9c4 <z_impl_sys_rand_get+0x44>)
{
   1c984:	4606      	mov	r6, r0
	const struct device *dev = entropy_driver;
   1c986:	6820      	ldr	r0, [r4, #0]
{
   1c988:	460d      	mov	r5, r1
	if (unlikely(!dev)) {
   1c98a:	b910      	cbnz	r0, 1c992 <z_impl_sys_rand_get+0x12>
		dev = device_get_binding(DT_CHOSEN_ZEPHYR_ENTROPY_LABEL);
   1c98c:	f7ff ffcc 	bl	1c928 <device_get_binding.constprop.0>
		entropy_driver = dev;
   1c990:	6020      	str	r0, [r4, #0]
	ret = entropy_get_entropy(dev, dst, outlen);
   1c992:	b2aa      	uxth	r2, r5
   1c994:	4631      	mov	r1, r6
   1c996:	f00c f9c9 	bl	28d2c <entropy_get_entropy>
	if (unlikely(ret < 0)) {
   1c99a:	2800      	cmp	r0, #0
   1c99c:	da10      	bge.n	1c9c0 <z_impl_sys_rand_get+0x40>
		uint32_t len = 0;
   1c99e:	2400      	movs	r4, #0
   1c9a0:	e00c      	b.n	1c9bc <z_impl_sys_rand_get+0x3c>
			size_t copylen = outlen - len;
   1c9a2:	1b2f      	subs	r7, r5, r4
			if (copylen > blocksize) {
   1c9a4:	2f04      	cmp	r7, #4
   1c9a6:	bf28      	it	cs
   1c9a8:	2704      	movcs	r7, #4
   1c9aa:	f7e9 f82b 	bl	5a04 <sys_clock_cycle_get_32>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1c9ae:	463a      	mov	r2, r7
			random_num = k_cycle_get_32();
   1c9b0:	9001      	str	r0, [sp, #4]
   1c9b2:	a901      	add	r1, sp, #4
   1c9b4:	1930      	adds	r0, r6, r4
   1c9b6:	f00d fd13 	bl	2a3e0 <memcpy>
			len += copylen;
   1c9ba:	443c      	add	r4, r7
		while (len < outlen) {
   1c9bc:	42a5      	cmp	r5, r4
   1c9be:	d8f0      	bhi.n	1c9a2 <z_impl_sys_rand_get+0x22>
	rand_get(dst, outlen, false);
}
   1c9c0:	b003      	add	sp, #12
   1c9c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c9c4:	20002024 	.word	0x20002024

0001c9c8 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1c9c8:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   1c9ca:	4b09      	ldr	r3, [pc, #36]	; (1c9f0 <gpio_nrfx_init+0x28>)
   1c9cc:	781a      	ldrb	r2, [r3, #0]
   1c9ce:	b96a      	cbnz	r2, 1c9ec <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   1c9d0:	2101      	movs	r1, #1
   1c9d2:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1c9d4:	2006      	movs	r0, #6
   1c9d6:	2105      	movs	r1, #5
   1c9d8:	f7e9 fb38 	bl	604c <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   1c9dc:	2006      	movs	r0, #6
   1c9de:	f7e9 fb03 	bl	5fe8 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1c9e2:	4b04      	ldr	r3, [pc, #16]	; (1c9f4 <gpio_nrfx_init+0x2c>)
   1c9e4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1c9e8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   1c9ec:	2000      	movs	r0, #0
   1c9ee:	bd08      	pop	{r3, pc}
   1c9f0:	20002ab1 	.word	0x20002ab1
   1c9f4:	40006000 	.word	0x40006000

0001c9f8 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1c9f8:	4b2b      	ldr	r3, [pc, #172]	; (1caa8 <gpio_nrfx_config+0xb0>)
{
   1c9fa:	b5f0      	push	{r4, r5, r6, r7, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c9fc:	6844      	ldr	r4, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1c9fe:	482b      	ldr	r0, [pc, #172]	; (1caac <gpio_nrfx_config+0xb4>)
   1ca00:	4013      	ands	r3, r2
   1ca02:	4283      	cmp	r3, r0
   1ca04:	d041      	beq.n	1ca8a <gpio_nrfx_config+0x92>
   1ca06:	d80d      	bhi.n	1ca24 <gpio_nrfx_config+0x2c>
   1ca08:	2b06      	cmp	r3, #6
   1ca0a:	d015      	beq.n	1ca38 <gpio_nrfx_config+0x40>
   1ca0c:	d805      	bhi.n	1ca1a <gpio_nrfx_config+0x22>
   1ca0e:	b19b      	cbz	r3, 1ca38 <gpio_nrfx_config+0x40>
   1ca10:	2b02      	cmp	r3, #2
   1ca12:	d03c      	beq.n	1ca8e <gpio_nrfx_config+0x96>
   1ca14:	f06f 0015 	mvn.w	r0, #21
   1ca18:	e036      	b.n	1ca88 <gpio_nrfx_config+0x90>
   1ca1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1ca1e:	d1f9      	bne.n	1ca14 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   1ca20:	2301      	movs	r3, #1
   1ca22:	e009      	b.n	1ca38 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1ca24:	4822      	ldr	r0, [pc, #136]	; (1cab0 <gpio_nrfx_config+0xb8>)
   1ca26:	4283      	cmp	r3, r0
   1ca28:	d033      	beq.n	1ca92 <gpio_nrfx_config+0x9a>
   1ca2a:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   1ca2e:	d032      	beq.n	1ca96 <gpio_nrfx_config+0x9e>
   1ca30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1ca34:	d1ee      	bne.n	1ca14 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   1ca36:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   1ca38:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
   1ca3a:	bf54      	ite	pl
   1ca3c:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   1ca40:	2603      	movmi	r6, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1ca42:	f482 7580 	eor.w	r5, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   1ca46:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   1ca48:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1ca4c:	f3c5 2500 	ubfx	r5, r5, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   1ca50:	d507      	bpl.n	1ca62 <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1ca52:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1ca56:	6867      	ldr	r7, [r4, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1ca58:	d01f      	beq.n	1ca9a <gpio_nrfx_config+0xa2>
			nrf_gpio_port_out_set(reg, BIT(pin));
   1ca5a:	2201      	movs	r2, #1
   1ca5c:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   1ca5e:	f8c7 2508 	str.w	r2, [r7, #1288]	; 0x508
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   1ca62:	7a22      	ldrb	r2, [r4, #8]
        case 1: return NRF_P1;
   1ca64:	4c13      	ldr	r4, [pc, #76]	; (1cab4 <gpio_nrfx_config+0xbc>)
   1ca66:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   1ca68:	f001 011f 	and.w	r1, r1, #31
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1ca6c:	ea40 0245 	orr.w	r2, r0, r5, lsl #1
        case 1: return NRF_P1;
   1ca70:	bf18      	it	ne
   1ca72:	f04f 44a0 	movne.w	r4, #1342177280	; 0x50000000
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1ca76:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1ca7a:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1ca7e:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1ca82:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
	return 0;
   1ca86:	2000      	movs	r0, #0
}
   1ca88:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   1ca8a:	2307      	movs	r3, #7
   1ca8c:	e7d4      	b.n	1ca38 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   1ca8e:	2304      	movs	r3, #4
   1ca90:	e7d2      	b.n	1ca38 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   1ca92:	2305      	movs	r3, #5
   1ca94:	e7d0      	b.n	1ca38 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   1ca96:	2303      	movs	r3, #3
   1ca98:	e7ce      	b.n	1ca38 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   1ca9a:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   1ca9c:	bf42      	ittt	mi
   1ca9e:	2201      	movmi	r2, #1
   1caa0:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
   1caa2:	f8c7 250c 	strmi.w	r2, [r7, #1292]	; 0x50c
}
   1caa6:	e7dc      	b.n	1ca62 <gpio_nrfx_config+0x6a>
   1caa8:	00f00006 	.word	0x00f00006
   1caac:	00100006 	.word	0x00100006
   1cab0:	00400002 	.word	0x00400002
   1cab4:	50000300 	.word	0x50000300

0001cab8 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
   1cab8:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
   1cabc:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
   1cabe:	4b08      	ldr	r3, [pc, #32]	; (1cae0 <nrf_gpio_cfg_sense_set+0x28>)
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1cac0:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
   1cac2:	bf18      	it	ne
   1cac4:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1cac8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   1cacc:	f8d3 2700 	ldr.w	r2, [r3, #1792]	; 0x700
   1cad0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1cad4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   1cad8:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
}
   1cadc:	4770      	bx	lr
   1cade:	bf00      	nop
   1cae0:	50000300 	.word	0x50000300

0001cae4 <check_level_trigger_pins>:
{
   1cae4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct gpio_nrfx_data *data = get_port_data(port);
   1cae8:	6903      	ldr	r3, [r0, #16]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   1caea:	f8d0 a004 	ldr.w	sl, [r0, #4]
	uint32_t out = data->pin_int_en;
   1caee:	68de      	ldr	r6, [r3, #12]
        case 1: return NRF_P1;
   1caf0:	f8df b07c 	ldr.w	fp, [pc, #124]	; 1cb70 <check_level_trigger_pins+0x8c>
{
   1caf4:	4688      	mov	r8, r1
	out &= ~data->trig_edge & ~data->double_edge;
   1caf6:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   1cafa:	430a      	orrs	r2, r1
   1cafc:	ea26 0602 	bic.w	r6, r6, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   1cb00:	f8da 2004 	ldr.w	r2, [sl, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   1cb04:	691b      	ldr	r3, [r3, #16]
    return p_reg->IN;
   1cb06:	f8d2 5510 	ldr.w	r5, [r2, #1296]	; 0x510
   1cb0a:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
   1cb0c:	ea26 0505 	bic.w	r5, r6, r5
	uint32_t check_pins = level_pins;
   1cb10:	4637      	mov	r7, r6
	uint32_t bit = 1U << pin;
   1cb12:	2401      	movs	r4, #1
	uint32_t pin = 0U;
   1cb14:	f04f 0900 	mov.w	r9, #0
	while (check_pins) {
   1cb18:	b917      	cbnz	r7, 1cb20 <check_level_trigger_pins+0x3c>
}
   1cb1a:	4628      	mov	r0, r5
   1cb1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (check_pins & bit) {
   1cb20:	423c      	tst	r4, r7
   1cb22:	d021      	beq.n	1cb68 <check_level_trigger_pins+0x84>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1cb24:	f89a 3008 	ldrb.w	r3, [sl, #8]
   1cb28:	f009 001f 	and.w	r0, r9, #31
			if (!(level_pins & bit)) {
   1cb2c:	4234      	tst	r4, r6
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1cb2e:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
			if (!(level_pins & bit)) {
   1cb32:	d114      	bne.n	1cb5e <check_level_trigger_pins+0x7a>
    return pin_number >> 5;
   1cb34:	0942      	lsrs	r2, r0, #5
        case 1: return NRF_P1;
   1cb36:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   1cb38:	f000 031f 	and.w	r3, r0, #31
        case 1: return NRF_P1;
   1cb3c:	bf14      	ite	ne
   1cb3e:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
   1cb42:	465a      	moveq	r2, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1cb44:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1cb48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   1cb4c:	f3c3 4301 	ubfx	r3, r3, #16, #2
				if (high) {
   1cb50:	2b02      	cmp	r3, #2
					*sense_levels |= bit;
   1cb52:	bf02      	ittt	eq
   1cb54:	f8d8 3000 	ldreq.w	r3, [r8]
   1cb58:	4323      	orreq	r3, r4
   1cb5a:	f8c8 3000 	streq.w	r3, [r8]
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1cb5e:	2100      	movs	r1, #0
   1cb60:	f7ff ffaa 	bl	1cab8 <nrf_gpio_cfg_sense_set>
			check_pins &= ~bit;
   1cb64:	ea27 0704 	bic.w	r7, r7, r4
		++pin;
   1cb68:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
   1cb6c:	0064      	lsls	r4, r4, #1
   1cb6e:	e7d3      	b.n	1cb18 <check_level_trigger_pins+0x34>
   1cb70:	50000300 	.word	0x50000300

0001cb74 <gpio_nrfx_pin_interrupt_configure>:
{
   1cb74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1cb76:	460e      	mov	r6, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1cb78:	6841      	ldr	r1, [r0, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
   1cb7a:	6907      	ldr	r7, [r0, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1cb7c:	7a09      	ldrb	r1, [r1, #8]
   1cb7e:	f006 051f 	and.w	r5, r6, #31
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
   1cb82:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   1cb86:	ea45 1541 	orr.w	r5, r5, r1, lsl #5
   1cb8a:	d110      	bne.n	1cbae <gpio_nrfx_pin_interrupt_configure+0x3a>
    return pin_number >> 5;
   1cb8c:	0968      	lsrs	r0, r5, #5
        case 1: return NRF_P1;
   1cb8e:	2801      	cmp	r0, #1
    *p_pin = pin_number & 0x1F;
   1cb90:	f005 011f 	and.w	r1, r5, #31
        case 1: return NRF_P1;
   1cb94:	485d      	ldr	r0, [pc, #372]	; (1cd0c <gpio_nrfx_pin_interrupt_configure+0x198>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1cb96:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
        case 1: return NRF_P1;
   1cb9a:	bf18      	it	ne
   1cb9c:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1cba0:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1cba4:	07c8      	lsls	r0, r1, #31
   1cba6:	d507      	bpl.n	1cbb8 <gpio_nrfx_pin_interrupt_configure+0x44>
		return -ENOTSUP;
   1cba8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1cbac:	e093      	b.n	1ccd6 <gpio_nrfx_pin_interrupt_configure+0x162>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1cbae:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1cbb2:	68f9      	ldr	r1, [r7, #12]
   1cbb4:	f000 8091 	beq.w	1ccda <gpio_nrfx_pin_interrupt_configure+0x166>
   1cbb8:	68f8      	ldr	r0, [r7, #12]
   1cbba:	2101      	movs	r1, #1
   1cbbc:	40b1      	lsls	r1, r6
   1cbbe:	4301      	orrs	r1, r0
   1cbc0:	6978      	ldr	r0, [r7, #20]
   1cbc2:	60f9      	str	r1, [r7, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1cbc4:	2101      	movs	r1, #1
   1cbc6:	40b1      	lsls	r1, r6
   1cbc8:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   1cbcc:	69ba      	ldr	r2, [r7, #24]
   1cbce:	bf0c      	ite	eq
   1cbd0:	4308      	orreq	r0, r1
   1cbd2:	4388      	bicne	r0, r1
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   1cbd4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   1cbd8:	bf0c      	ite	eq
   1cbda:	430a      	orreq	r2, r1
   1cbdc:	438a      	bicne	r2, r1
   1cbde:	61ba      	str	r2, [r7, #24]
   1cbe0:	693a      	ldr	r2, [r7, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1cbe2:	6178      	str	r0, [r7, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   1cbe4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   1cbe8:	bf0c      	ite	eq
   1cbea:	4311      	orreq	r1, r2
   1cbec:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   1cbf0:	4a47      	ldr	r2, [pc, #284]	; (1cd10 <gpio_nrfx_pin_interrupt_configure+0x19c>)
   1cbf2:	6139      	str	r1, [r7, #16]
   1cbf4:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1cbf8:	2000      	movs	r0, #0
   1cbfa:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1cbfc:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   1cc00:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   1cc04:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   1cc08:	428d      	cmp	r5, r1
   1cc0a:	d16b      	bne.n	1cce4 <gpio_nrfx_pin_interrupt_configure+0x170>
		    && (intenset & BIT(i))) {
   1cc0c:	fa23 f100 	lsr.w	r1, r3, r0
   1cc10:	07c9      	lsls	r1, r1, #31
   1cc12:	d567      	bpl.n	1cce4 <gpio_nrfx_pin_interrupt_configure+0x170>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   1cc14:	0083      	lsls	r3, r0, #2
   1cc16:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1cc1a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1cc1e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   1cc22:	f021 0101 	bic.w	r1, r1, #1
   1cc26:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   1cc2a:	2301      	movs	r3, #1
   1cc2c:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   1cc2e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   1cc32:	b2c0      	uxtb	r0, r0
   1cc34:	f003 fb52 	bl	202dc <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1cc38:	4628      	mov	r0, r5
   1cc3a:	2100      	movs	r1, #0
   1cc3c:	f7ff ff3c 	bl	1cab8 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   1cc40:	68f8      	ldr	r0, [r7, #12]
   1cc42:	40f0      	lsrs	r0, r6
   1cc44:	f010 0001 	ands.w	r0, r0, #1
   1cc48:	d045      	beq.n	1ccd6 <gpio_nrfx_pin_interrupt_configure+0x162>
		if (data->trig_edge & BIT(pin)) {
   1cc4a:	6978      	ldr	r0, [r7, #20]
   1cc4c:	40f0      	lsrs	r0, r6
   1cc4e:	f010 0401 	ands.w	r4, r0, #1
   1cc52:	d04e      	beq.n	1ccf2 <gpio_nrfx_pin_interrupt_configure+0x17e>
				if (data->double_edge & BIT(pin)) {
   1cc54:	69bb      	ldr	r3, [r7, #24]
   1cc56:	40f3      	lsrs	r3, r6
   1cc58:	07db      	lsls	r3, r3, #31
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1cc5a:	bf5f      	itttt	pl
   1cc5c:	6939      	ldrpl	r1, [r7, #16]
   1cc5e:	fa21 f606 	lsrpl.w	r6, r1, r6
   1cc62:	f006 0601 	andpl.w	r6, r6, #1
   1cc66:	f1c6 0602 	rsbpl	r6, r6, #2
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   1cc6a:	f10d 0007 	add.w	r0, sp, #7
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1cc6e:	bf54      	ite	pl
   1cc70:	b2f6      	uxtbpl	r6, r6
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
   1cc72:	2603      	movmi	r6, #3
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   1cc74:	f003 fb54 	bl	20320 <nrfx_gpiote_channel_alloc>
   1cc78:	4b26      	ldr	r3, [pc, #152]	; (1cd14 <gpio_nrfx_pin_interrupt_configure+0x1a0>)
   1cc7a:	4298      	cmp	r0, r3
   1cc7c:	d136      	bne.n	1ccec <gpio_nrfx_pin_interrupt_configure+0x178>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   1cc7e:	f89d 1007 	ldrb.w	r1, [sp, #7]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1cc82:	008b      	lsls	r3, r1, #2
   1cc84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1cc88:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1cc8c:	022d      	lsls	r5, r5, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1cc8e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1cc92:	f422 324f 	bic.w	r2, r2, #211968	; 0x33c00
   1cc96:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   1cc9a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1cc9e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1cca2:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
   1cca6:	4315      	orrs	r5, r2
    return ((uint32_t)p_reg + event);
   1cca8:	008a      	lsls	r2, r1, #2
   1ccaa:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1ccae:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1ccb2:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1ccb6:	2000      	movs	r0, #0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1ccb8:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1ccbc:	6010      	str	r0, [r2, #0]
   1ccbe:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1ccc0:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1ccc4:	f042 0201 	orr.w	r2, r2, #1
   1ccc8:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->INTENSET = mask;
   1cccc:	4a10      	ldr	r2, [pc, #64]	; (1cd10 <gpio_nrfx_pin_interrupt_configure+0x19c>)
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   1ccce:	2301      	movs	r3, #1
   1ccd0:	408b      	lsls	r3, r1
   1ccd2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1ccd6:	b003      	add	sp, #12
   1ccd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1ccda:	2001      	movs	r0, #1
   1ccdc:	40b0      	lsls	r0, r6
   1ccde:	ea21 0100 	bic.w	r1, r1, r0
   1cce2:	e76d      	b.n	1cbc0 <gpio_nrfx_pin_interrupt_configure+0x4c>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1cce4:	3001      	adds	r0, #1
   1cce6:	2808      	cmp	r0, #8
   1cce8:	d188      	bne.n	1cbfc <gpio_nrfx_pin_interrupt_configure+0x88>
   1ccea:	e7a5      	b.n	1cc38 <gpio_nrfx_pin_interrupt_configure+0xc4>
		return -ENODEV;
   1ccec:	f06f 0012 	mvn.w	r0, #18
   1ccf0:	e7f1      	b.n	1ccd6 <gpio_nrfx_pin_interrupt_configure+0x162>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1ccf2:	6939      	ldr	r1, [r7, #16]
   1ccf4:	40f1      	lsrs	r1, r6
   1ccf6:	f001 0101 	and.w	r1, r1, #1
   1ccfa:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1ccfe:	4628      	mov	r0, r5
   1cd00:	b2c9      	uxtb	r1, r1
   1cd02:	f7ff fed9 	bl	1cab8 <nrf_gpio_cfg_sense_set>
	int res = 0;
   1cd06:	4620      	mov	r0, r4
   1cd08:	e7e5      	b.n	1ccd6 <gpio_nrfx_pin_interrupt_configure+0x162>
   1cd0a:	bf00      	nop
   1cd0c:	50000300 	.word	0x50000300
   1cd10:	40006000 	.word	0x40006000
   1cd14:	0bad0000 	.word	0x0bad0000

0001cd18 <gpiote_event_handler>:
{
   1cd18:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   1cd1a:	2400      	movs	r4, #0
{
   1cd1c:	b085      	sub	sp, #20
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   1cd1e:	e9cd 4400 	strd	r4, r4, [sp]
	uint32_t sense_levels[GPIO_COUNT] = {0};
   1cd22:	e9cd 4402 	strd	r4, r4, [sp, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1cd26:	4e26      	ldr	r6, [pc, #152]	; (1cdc0 <gpiote_event_handler+0xa8>)
   1cd28:	6835      	ldr	r5, [r6, #0]
	if (port_event) {
   1cd2a:	b15d      	cbz	r5, 1cd44 <gpiote_event_handler+0x2c>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)),
   1cd2c:	a902      	add	r1, sp, #8
   1cd2e:	4825      	ldr	r0, [pc, #148]	; (1cdc4 <gpiote_event_handler+0xac>)
   1cd30:	f7ff fed8 	bl	1cae4 <check_level_trigger_pins>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
   1cd34:	a903      	add	r1, sp, #12
		fired_triggers[0] =
   1cd36:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
   1cd38:	4823      	ldr	r0, [pc, #140]	; (1cdc8 <gpiote_event_handler+0xb0>)
   1cd3a:	f7ff fed3 	bl	1cae4 <check_level_trigger_pins>
		fired_triggers[1] =
   1cd3e:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1cd40:	6034      	str	r4, [r6, #0]
   1cd42:	6833      	ldr	r3, [r6, #0]
    return p_reg->INTENSET & mask;
   1cd44:	4c21      	ldr	r4, [pc, #132]	; (1cdcc <gpiote_event_handler+0xb4>)
{
   1cd46:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   1cd48:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1cd4a:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
   1cd4c:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
   1cd50:	fa06 f102 	lsl.w	r1, r6, r2
   1cd54:	4219      	tst	r1, r3
   1cd56:	d01b      	beq.n	1cd90 <gpiote_event_handler+0x78>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1cd58:	0091      	lsls	r1, r2, #2
   1cd5a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1cd5e:	f501 41c2 	add.w	r1, r1, #24832	; 0x6100
   1cd62:	680b      	ldr	r3, [r1, #0]
   1cd64:	b1a3      	cbz	r3, 1cd90 <gpiote_event_handler+0x78>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1cd66:	f502 73a2 	add.w	r3, r2, #324	; 0x144
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   1cd6a:	af04      	add	r7, sp, #16
   1cd6c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1cd70:	f8c1 c000 	str.w	ip, [r1]
   1cd74:	f3c3 3040 	ubfx	r0, r3, #13, #1
   1cd78:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   1cd7c:	f3c3 2304 	ubfx	r3, r3, #8, #5
   1cd80:	f850 7c10 	ldr.w	r7, [r0, #-16]
   1cd84:	fa06 f303 	lsl.w	r3, r6, r3
   1cd88:	433b      	orrs	r3, r7
   1cd8a:	f840 3c10 	str.w	r3, [r0, #-16]
   1cd8e:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1cd90:	3201      	adds	r2, #1
   1cd92:	2a08      	cmp	r2, #8
   1cd94:	d1da      	bne.n	1cd4c <gpiote_event_handler+0x34>
	if (fired_triggers[0]) {
   1cd96:	9a00      	ldr	r2, [sp, #0]
   1cd98:	b11a      	cbz	r2, 1cda2 <gpiote_event_handler+0x8a>
	gpio_fire_callbacks(list, port, pins);
   1cd9a:	490a      	ldr	r1, [pc, #40]	; (1cdc4 <gpiote_event_handler+0xac>)
   1cd9c:	480c      	ldr	r0, [pc, #48]	; (1cdd0 <gpiote_event_handler+0xb8>)
   1cd9e:	f00b ffe1 	bl	28d64 <gpio_fire_callbacks>
	if (fired_triggers[1]) {
   1cda2:	9a01      	ldr	r2, [sp, #4]
   1cda4:	b11a      	cbz	r2, 1cdae <gpiote_event_handler+0x96>
	gpio_fire_callbacks(list, port, pins);
   1cda6:	4908      	ldr	r1, [pc, #32]	; (1cdc8 <gpiote_event_handler+0xb0>)
   1cda8:	480a      	ldr	r0, [pc, #40]	; (1cdd4 <gpiote_event_handler+0xbc>)
   1cdaa:	f00b ffdb 	bl	28d64 <gpio_fire_callbacks>
	if (port_event) {
   1cdae:	b12d      	cbz	r5, 1cdbc <gpiote_event_handler+0xa4>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
   1cdb0:	4804      	ldr	r0, [pc, #16]	; (1cdc4 <gpiote_event_handler+0xac>)
   1cdb2:	f00c f841 	bl	28e38 <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   1cdb6:	4804      	ldr	r0, [pc, #16]	; (1cdc8 <gpiote_event_handler+0xb0>)
   1cdb8:	f00c f83e 	bl	28e38 <cfg_level_pins>
}
   1cdbc:	b005      	add	sp, #20
   1cdbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cdc0:	4000617c 	.word	0x4000617c
   1cdc4:	20007d60 	.word	0x20007d60
   1cdc8:	20007d78 	.word	0x20007d78
   1cdcc:	40006000 	.word	0x40006000
   1cdd0:	20002034 	.word	0x20002034
   1cdd4:	20002050 	.word	0x20002050

0001cdd8 <z_mrsh_gpio_config>:
#include <syscalls/gpio.h>

extern int z_vrfy_gpio_config(const struct device * port, gpio_pin_t pin, gpio_flags_t flags);
uintptr_t z_mrsh_gpio_config(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   1cdd8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	_current->syscall_frame = ssf;
   1cddc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 1cea4 <z_mrsh_gpio_config+0xcc>
   1cde0:	f8da 3008 	ldr.w	r3, [sl, #8]
{
   1cde4:	4691      	mov	r9, r2
	_current->syscall_frame = ssf;
   1cde6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1cde8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
{
   1cdec:	4604      	mov	r4, r0
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	int ret = z_vrfy_gpio_config(*(const struct device **)&arg0, *(gpio_pin_t*)&arg1, *(gpio_flags_t*)&arg2)
   1cdee:	fa5f f881 	uxtb.w	r8, r1
#include <syscall_handler.h>

static inline int z_vrfy_gpio_config(const struct device *port,
				     gpio_pin_t pin, gpio_flags_t flags)
{
	Z_OOPS(Z_SYSCALL_DRIVER_GPIO(port, pin_configure));
   1cdf2:	f7e3 f985 	bl	100 <z_object_find>
   1cdf6:	4621      	mov	r1, r4
   1cdf8:	f00c f84e 	bl	28e98 <z_obj_validation_check.constprop.0>
   1cdfc:	4655      	mov	r5, sl
   1cdfe:	4606      	mov	r6, r0
   1ce00:	b368      	cbz	r0, 1ce5e <z_mrsh_gpio_config+0x86>
   1ce02:	f00c f83f 	bl	28e84 <arch_is_user_context>
   1ce06:	4b21      	ldr	r3, [pc, #132]	; (1ce8c <z_mrsh_gpio_config+0xb4>)
   1ce08:	4a21      	ldr	r2, [pc, #132]	; (1ce90 <z_mrsh_gpio_config+0xb8>)
   1ce0a:	1a9b      	subs	r3, r3, r2
   1ce0c:	08db      	lsrs	r3, r3, #3
   1ce0e:	019b      	lsls	r3, r3, #6
   1ce10:	f043 0301 	orr.w	r3, r3, #1
   1ce14:	b148      	cbz	r0, 1ce2a <z_mrsh_gpio_config+0x52>
   1ce16:	4a1f      	ldr	r2, [pc, #124]	; (1ce94 <z_mrsh_gpio_config+0xbc>)
   1ce18:	491f      	ldr	r1, [pc, #124]	; (1ce98 <z_mrsh_gpio_config+0xc0>)
   1ce1a:	4618      	mov	r0, r3
   1ce1c:	f008 f83b 	bl	24e96 <log_from_user>
   1ce20:	68ab      	ldr	r3, [r5, #8]
   1ce22:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   1ce26:	f009 fe19 	bl	26a5c <arch_syscall_oops>
   1ce2a:	491a      	ldr	r1, [pc, #104]	; (1ce94 <z_mrsh_gpio_config+0xbc>)
   1ce2c:	481a      	ldr	r0, [pc, #104]	; (1ce98 <z_mrsh_gpio_config+0xc0>)
   1ce2e:	461a      	mov	r2, r3
   1ce30:	f008 f864 	bl	24efc <log_1>
   1ce34:	e7f4      	b.n	1ce20 <z_mrsh_gpio_config+0x48>
   1ce36:	4a19      	ldr	r2, [pc, #100]	; (1ce9c <z_mrsh_gpio_config+0xc4>)
   1ce38:	4916      	ldr	r1, [pc, #88]	; (1ce94 <z_mrsh_gpio_config+0xbc>)
   1ce3a:	4819      	ldr	r0, [pc, #100]	; (1cea0 <z_mrsh_gpio_config+0xc8>)
   1ce3c:	f8ad 4000 	strh.w	r4, [sp]
   1ce40:	463b      	mov	r3, r7
   1ce42:	f008 f888 	bl	24f56 <log_3>
   1ce46:	e7eb      	b.n	1ce20 <z_mrsh_gpio_config+0x48>
				     gpio_pin_t pin, gpio_flags_t flags)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	return api->pin_configure(port, pin, flags);
   1ce48:	464a      	mov	r2, r9
   1ce4a:	4641      	mov	r1, r8
   1ce4c:	4620      	mov	r0, r4
   1ce4e:	4798      	blx	r3
;
	_current->syscall_frame = NULL;
   1ce50:	f8da 3008 	ldr.w	r3, [sl, #8]
   1ce54:	f8c3 6084 	str.w	r6, [r3, #132]	; 0x84
	return (uintptr_t) ret;
}
   1ce58:	b002      	add	sp, #8
   1ce5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ce5e:	68a7      	ldr	r7, [r4, #8]
   1ce60:	683b      	ldr	r3, [r7, #0]
   1ce62:	2b00      	cmp	r3, #0
   1ce64:	d1f0      	bne.n	1ce48 <z_mrsh_gpio_config+0x70>
   1ce66:	f00c f80d 	bl	28e84 <arch_is_user_context>
   1ce6a:	4c08      	ldr	r4, [pc, #32]	; (1ce8c <z_mrsh_gpio_config+0xb4>)
   1ce6c:	4b08      	ldr	r3, [pc, #32]	; (1ce90 <z_mrsh_gpio_config+0xb8>)
   1ce6e:	1ae4      	subs	r4, r4, r3
   1ce70:	08e4      	lsrs	r4, r4, #3
   1ce72:	01a4      	lsls	r4, r4, #6
   1ce74:	f044 0401 	orr.w	r4, r4, #1
   1ce78:	2800      	cmp	r0, #0
   1ce7a:	d0dc      	beq.n	1ce36 <z_mrsh_gpio_config+0x5e>
   1ce7c:	4b07      	ldr	r3, [pc, #28]	; (1ce9c <z_mrsh_gpio_config+0xc4>)
   1ce7e:	4a05      	ldr	r2, [pc, #20]	; (1ce94 <z_mrsh_gpio_config+0xbc>)
   1ce80:	4907      	ldr	r1, [pc, #28]	; (1cea0 <z_mrsh_gpio_config+0xc8>)
   1ce82:	9700      	str	r7, [sp, #0]
   1ce84:	4620      	mov	r0, r4
   1ce86:	f008 f806 	bl	24e96 <log_from_user>
   1ce8a:	e7c9      	b.n	1ce20 <z_mrsh_gpio_config+0x48>
   1ce8c:	0002a810 	.word	0x0002a810
   1ce90:	0002a6d0 	.word	0x0002a6d0
   1ce94:	0002e82b 	.word	0x0002e82b
   1ce98:	0002e72d 	.word	0x0002e72d
   1ce9c:	0002e754 	.word	0x0002e754
   1cea0:	0002e762 	.word	0x0002e762
   1cea4:	200023f4 	.word	0x200023f4

0001cea8 <z_mrsh_gpio_port_get_raw>:
#include <syscalls/gpio.h>

extern int z_vrfy_gpio_port_get_raw(const struct device * port, gpio_port_value_t * value);
uintptr_t z_mrsh_gpio_port_get_raw(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   1cea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_current->syscall_frame = ssf;
   1ceac:	f8df 8120 	ldr.w	r8, [pc, #288]	; 1cfd0 <z_mrsh_gpio_port_get_raw+0x128>
{
   1ceb0:	b086      	sub	sp, #24
	_current->syscall_frame = ssf;
   1ceb2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1ceb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1ceb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
{
   1cebc:	4604      	mov	r4, r0
   1cebe:	460e      	mov	r6, r1
#include <syscalls/gpio_config_mrsh.c>

static inline int z_vrfy_gpio_port_get_raw(const struct device *port,
					   gpio_port_value_t *value)
{
	Z_OOPS(Z_SYSCALL_DRIVER_GPIO(port, port_get_raw));
   1cec0:	f7e3 f91e 	bl	100 <z_object_find>
   1cec4:	4621      	mov	r1, r4
   1cec6:	f00b ffe7 	bl	28e98 <z_obj_validation_check.constprop.0>
   1ceca:	4645      	mov	r5, r8
   1cecc:	2800      	cmp	r0, #0
   1cece:	d057      	beq.n	1cf80 <z_mrsh_gpio_port_get_raw+0xd8>
   1ced0:	f00b ffd8 	bl	28e84 <arch_is_user_context>
   1ced4:	4b36      	ldr	r3, [pc, #216]	; (1cfb0 <z_mrsh_gpio_port_get_raw+0x108>)
   1ced6:	4a37      	ldr	r2, [pc, #220]	; (1cfb4 <z_mrsh_gpio_port_get_raw+0x10c>)
   1ced8:	1a9b      	subs	r3, r3, r2
   1ceda:	08db      	lsrs	r3, r3, #3
   1cedc:	019b      	lsls	r3, r3, #6
   1cede:	f043 0301 	orr.w	r3, r3, #1
   1cee2:	b148      	cbz	r0, 1cef8 <z_mrsh_gpio_port_get_raw+0x50>
   1cee4:	4a34      	ldr	r2, [pc, #208]	; (1cfb8 <z_mrsh_gpio_port_get_raw+0x110>)
   1cee6:	4935      	ldr	r1, [pc, #212]	; (1cfbc <z_mrsh_gpio_port_get_raw+0x114>)
   1cee8:	4618      	mov	r0, r3
   1ceea:	f007 ffd4 	bl	24e96 <log_from_user>
	Z_OOPS(Z_SYSCALL_MEMORY_WRITE(value, sizeof(gpio_port_value_t)));
   1ceee:	68ab      	ldr	r3, [r5, #8]
   1cef0:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   1cef4:	f009 fdb2 	bl	26a5c <arch_syscall_oops>
	Z_OOPS(Z_SYSCALL_DRIVER_GPIO(port, port_get_raw));
   1cef8:	492f      	ldr	r1, [pc, #188]	; (1cfb8 <z_mrsh_gpio_port_get_raw+0x110>)
   1cefa:	4830      	ldr	r0, [pc, #192]	; (1cfbc <z_mrsh_gpio_port_get_raw+0x114>)
   1cefc:	461a      	mov	r2, r3
   1cefe:	f007 fffd 	bl	24efc <log_1>
   1cf02:	e7f4      	b.n	1ceee <z_mrsh_gpio_port_get_raw+0x46>
   1cf04:	4613      	mov	r3, r2
   1cf06:	492c      	ldr	r1, [pc, #176]	; (1cfb8 <z_mrsh_gpio_port_get_raw+0x110>)
   1cf08:	4a2d      	ldr	r2, [pc, #180]	; (1cfc0 <z_mrsh_gpio_port_get_raw+0x118>)
   1cf0a:	482e      	ldr	r0, [pc, #184]	; (1cfc4 <z_mrsh_gpio_port_get_raw+0x11c>)
   1cf0c:	f8ad 4000 	strh.w	r4, [sp]
   1cf10:	f008 f821 	bl	24f56 <log_3>
   1cf14:	e7eb      	b.n	1ceee <z_mrsh_gpio_port_get_raw+0x46>
	Z_OOPS(Z_SYSCALL_MEMORY_WRITE(value, sizeof(gpio_port_value_t)));
   1cf16:	4928      	ldr	r1, [pc, #160]	; (1cfb8 <z_mrsh_gpio_port_get_raw+0x110>)
   1cf18:	482b      	ldr	r0, [pc, #172]	; (1cfc8 <z_mrsh_gpio_port_get_raw+0x120>)
   1cf1a:	e9cd 1602 	strd	r1, r6, [sp, #8]
   1cf1e:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1cf22:	a902      	add	r1, sp, #8
   1cf24:	4623      	mov	r3, r4
   1cf26:	f008 f832 	bl	24f8e <log_n>
   1cf2a:	e7e0      	b.n	1ceee <z_mrsh_gpio_port_get_raw+0x46>
					   gpio_port_value_t *value)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	return api->port_get_raw(port, value);
   1cf2c:	68a3      	ldr	r3, [r4, #8]
   1cf2e:	4631      	mov	r1, r6
   1cf30:	685b      	ldr	r3, [r3, #4]
   1cf32:	4620      	mov	r0, r4
   1cf34:	4798      	blx	r3
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	int ret = z_vrfy_gpio_port_get_raw(*(const struct device **)&arg0, *(gpio_port_value_t **)&arg1)
;
	_current->syscall_frame = NULL;
   1cf36:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1cf3a:	f8c3 7084 	str.w	r7, [r3, #132]	; 0x84
	return (uintptr_t) ret;
}
   1cf3e:	b006      	add	sp, #24
   1cf40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cf44:	2201      	movs	r2, #1
   1cf46:	2104      	movs	r1, #4
   1cf48:	4630      	mov	r0, r6
   1cf4a:	f009 fdab 	bl	26aa4 <arch_buffer_validate>
   1cf4e:	4607      	mov	r7, r0
   1cf50:	2800      	cmp	r0, #0
   1cf52:	d0eb      	beq.n	1cf2c <z_mrsh_gpio_port_get_raw+0x84>
   1cf54:	f00b ff96 	bl	28e84 <arch_is_user_context>
   1cf58:	4c15      	ldr	r4, [pc, #84]	; (1cfb0 <z_mrsh_gpio_port_get_raw+0x108>)
   1cf5a:	4b16      	ldr	r3, [pc, #88]	; (1cfb4 <z_mrsh_gpio_port_get_raw+0x10c>)
   1cf5c:	1ae4      	subs	r4, r4, r3
   1cf5e:	08e4      	lsrs	r4, r4, #3
   1cf60:	01a4      	lsls	r4, r4, #6
   1cf62:	4b1a      	ldr	r3, [pc, #104]	; (1cfcc <z_mrsh_gpio_port_get_raw+0x124>)
   1cf64:	f044 0401 	orr.w	r4, r4, #1
   1cf68:	2204      	movs	r2, #4
   1cf6a:	2800      	cmp	r0, #0
   1cf6c:	d0d3      	beq.n	1cf16 <z_mrsh_gpio_port_get_raw+0x6e>
   1cf6e:	e9cd 2300 	strd	r2, r3, [sp]
   1cf72:	4915      	ldr	r1, [pc, #84]	; (1cfc8 <z_mrsh_gpio_port_get_raw+0x120>)
   1cf74:	4a10      	ldr	r2, [pc, #64]	; (1cfb8 <z_mrsh_gpio_port_get_raw+0x110>)
   1cf76:	4633      	mov	r3, r6
   1cf78:	4620      	mov	r0, r4
   1cf7a:	f007 ff8c 	bl	24e96 <log_from_user>
   1cf7e:	e7b6      	b.n	1ceee <z_mrsh_gpio_port_get_raw+0x46>
	Z_OOPS(Z_SYSCALL_DRIVER_GPIO(port, port_get_raw));
   1cf80:	68a2      	ldr	r2, [r4, #8]
   1cf82:	6853      	ldr	r3, [r2, #4]
   1cf84:	2b00      	cmp	r3, #0
   1cf86:	d1dd      	bne.n	1cf44 <z_mrsh_gpio_port_get_raw+0x9c>
   1cf88:	f00b ff7c 	bl	28e84 <arch_is_user_context>
   1cf8c:	4c08      	ldr	r4, [pc, #32]	; (1cfb0 <z_mrsh_gpio_port_get_raw+0x108>)
   1cf8e:	4b09      	ldr	r3, [pc, #36]	; (1cfb4 <z_mrsh_gpio_port_get_raw+0x10c>)
   1cf90:	1ae4      	subs	r4, r4, r3
   1cf92:	08e4      	lsrs	r4, r4, #3
   1cf94:	01a4      	lsls	r4, r4, #6
   1cf96:	f044 0401 	orr.w	r4, r4, #1
   1cf9a:	2800      	cmp	r0, #0
   1cf9c:	d0b2      	beq.n	1cf04 <z_mrsh_gpio_port_get_raw+0x5c>
   1cf9e:	9200      	str	r2, [sp, #0]
   1cfa0:	4b07      	ldr	r3, [pc, #28]	; (1cfc0 <z_mrsh_gpio_port_get_raw+0x118>)
   1cfa2:	4a05      	ldr	r2, [pc, #20]	; (1cfb8 <z_mrsh_gpio_port_get_raw+0x110>)
   1cfa4:	4907      	ldr	r1, [pc, #28]	; (1cfc4 <z_mrsh_gpio_port_get_raw+0x11c>)
   1cfa6:	4620      	mov	r0, r4
   1cfa8:	f007 ff75 	bl	24e96 <log_from_user>
   1cfac:	e79f      	b.n	1ceee <z_mrsh_gpio_port_get_raw+0x46>
   1cfae:	bf00      	nop
   1cfb0:	0002a810 	.word	0x0002a810
   1cfb4:	0002a6d0 	.word	0x0002a6d0
   1cfb8:	0002e83e 	.word	0x0002e83e
   1cfbc:	0002e72d 	.word	0x0002e72d
   1cfc0:	0002e7ab 	.word	0x0002e7ab
   1cfc4:	0002e762 	.word	0x0002e762
   1cfc8:	0002c8a6 	.word	0x0002c8a6
   1cfcc:	0002c903 	.word	0x0002c903
   1cfd0:	200023f4 	.word	0x200023f4

0001cfd4 <z_mrsh_gpio_port_set_masked_raw>:
#include <syscalls/gpio.h>

extern int z_vrfy_gpio_port_set_masked_raw(const struct device * port, gpio_port_pins_t mask, gpio_port_value_t value);
uintptr_t z_mrsh_gpio_port_set_masked_raw(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   1cfd4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	_current->syscall_frame = ssf;
   1cfd8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 1d0a0 <z_mrsh_gpio_port_set_masked_raw+0xcc>
   1cfdc:	f8da 3008 	ldr.w	r3, [sl, #8]
{
   1cfe0:	4691      	mov	r9, r2
	_current->syscall_frame = ssf;
   1cfe2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1cfe4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
{
   1cfe8:	4604      	mov	r4, r0
   1cfea:	4688      	mov	r8, r1

static inline int z_vrfy_gpio_port_set_masked_raw(const struct device *port,
						  gpio_port_pins_t mask,
						  gpio_port_value_t value)
{
	Z_OOPS(Z_SYSCALL_DRIVER_GPIO(port, port_set_masked_raw));
   1cfec:	f7e3 f888 	bl	100 <z_object_find>
   1cff0:	4621      	mov	r1, r4
   1cff2:	f00b ff51 	bl	28e98 <z_obj_validation_check.constprop.0>
   1cff6:	4655      	mov	r5, sl
   1cff8:	4606      	mov	r6, r0
   1cffa:	b368      	cbz	r0, 1d058 <z_mrsh_gpio_port_set_masked_raw+0x84>
   1cffc:	f00b ff42 	bl	28e84 <arch_is_user_context>
   1d000:	4b21      	ldr	r3, [pc, #132]	; (1d088 <z_mrsh_gpio_port_set_masked_raw+0xb4>)
   1d002:	4a22      	ldr	r2, [pc, #136]	; (1d08c <z_mrsh_gpio_port_set_masked_raw+0xb8>)
   1d004:	1a9b      	subs	r3, r3, r2
   1d006:	08db      	lsrs	r3, r3, #3
   1d008:	019b      	lsls	r3, r3, #6
   1d00a:	f043 0301 	orr.w	r3, r3, #1
   1d00e:	b148      	cbz	r0, 1d024 <z_mrsh_gpio_port_set_masked_raw+0x50>
   1d010:	4a1f      	ldr	r2, [pc, #124]	; (1d090 <z_mrsh_gpio_port_set_masked_raw+0xbc>)
   1d012:	4920      	ldr	r1, [pc, #128]	; (1d094 <z_mrsh_gpio_port_set_masked_raw+0xc0>)
   1d014:	4618      	mov	r0, r3
   1d016:	f007 ff3e 	bl	24e96 <log_from_user>
   1d01a:	68ab      	ldr	r3, [r5, #8]
   1d01c:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   1d020:	f009 fd1c 	bl	26a5c <arch_syscall_oops>
   1d024:	491a      	ldr	r1, [pc, #104]	; (1d090 <z_mrsh_gpio_port_set_masked_raw+0xbc>)
   1d026:	481b      	ldr	r0, [pc, #108]	; (1d094 <z_mrsh_gpio_port_set_masked_raw+0xc0>)
   1d028:	461a      	mov	r2, r3
   1d02a:	f007 ff67 	bl	24efc <log_1>
   1d02e:	e7f4      	b.n	1d01a <z_mrsh_gpio_port_set_masked_raw+0x46>
   1d030:	4a19      	ldr	r2, [pc, #100]	; (1d098 <z_mrsh_gpio_port_set_masked_raw+0xc4>)
   1d032:	4917      	ldr	r1, [pc, #92]	; (1d090 <z_mrsh_gpio_port_set_masked_raw+0xbc>)
   1d034:	4819      	ldr	r0, [pc, #100]	; (1d09c <z_mrsh_gpio_port_set_masked_raw+0xc8>)
   1d036:	f8ad 4000 	strh.w	r4, [sp]
   1d03a:	463b      	mov	r3, r7
   1d03c:	f007 ff8b 	bl	24f56 <log_3>
   1d040:	e7eb      	b.n	1d01a <z_mrsh_gpio_port_set_masked_raw+0x46>
						  gpio_port_value_t value)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	return api->port_set_masked_raw(port, mask, value);
   1d042:	464a      	mov	r2, r9
   1d044:	4641      	mov	r1, r8
   1d046:	4620      	mov	r0, r4
   1d048:	4798      	blx	r3
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	int ret = z_vrfy_gpio_port_set_masked_raw(*(const struct device **)&arg0, *(gpio_port_pins_t*)&arg1, *(gpio_port_value_t*)&arg2)
;
	_current->syscall_frame = NULL;
   1d04a:	f8da 3008 	ldr.w	r3, [sl, #8]
   1d04e:	f8c3 6084 	str.w	r6, [r3, #132]	; 0x84
	return (uintptr_t) ret;
}
   1d052:	b002      	add	sp, #8
   1d054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d058:	68a7      	ldr	r7, [r4, #8]
   1d05a:	68bb      	ldr	r3, [r7, #8]
   1d05c:	2b00      	cmp	r3, #0
   1d05e:	d1f0      	bne.n	1d042 <z_mrsh_gpio_port_set_masked_raw+0x6e>
   1d060:	f00b ff10 	bl	28e84 <arch_is_user_context>
   1d064:	4c08      	ldr	r4, [pc, #32]	; (1d088 <z_mrsh_gpio_port_set_masked_raw+0xb4>)
   1d066:	4b09      	ldr	r3, [pc, #36]	; (1d08c <z_mrsh_gpio_port_set_masked_raw+0xb8>)
   1d068:	1ae4      	subs	r4, r4, r3
   1d06a:	08e4      	lsrs	r4, r4, #3
   1d06c:	01a4      	lsls	r4, r4, #6
   1d06e:	f044 0401 	orr.w	r4, r4, #1
   1d072:	2800      	cmp	r0, #0
   1d074:	d0dc      	beq.n	1d030 <z_mrsh_gpio_port_set_masked_raw+0x5c>
   1d076:	4b08      	ldr	r3, [pc, #32]	; (1d098 <z_mrsh_gpio_port_set_masked_raw+0xc4>)
   1d078:	4a05      	ldr	r2, [pc, #20]	; (1d090 <z_mrsh_gpio_port_set_masked_raw+0xbc>)
   1d07a:	4908      	ldr	r1, [pc, #32]	; (1d09c <z_mrsh_gpio_port_set_masked_raw+0xc8>)
   1d07c:	9700      	str	r7, [sp, #0]
   1d07e:	4620      	mov	r0, r4
   1d080:	f007 ff09 	bl	24e96 <log_from_user>
   1d084:	e7c9      	b.n	1d01a <z_mrsh_gpio_port_set_masked_raw+0x46>
   1d086:	bf00      	nop
   1d088:	0002a810 	.word	0x0002a810
   1d08c:	0002a6d0 	.word	0x0002a6d0
   1d090:	0002e857 	.word	0x0002e857
   1d094:	0002e72d 	.word	0x0002e72d
   1d098:	0002e7b8 	.word	0x0002e7b8
   1d09c:	0002e762 	.word	0x0002e762
   1d0a0:	200023f4 	.word	0x200023f4

0001d0a4 <z_mrsh_gpio_port_set_bits_raw>:
#include <syscalls/gpio.h>

extern int z_vrfy_gpio_port_set_bits_raw(const struct device * port, gpio_port_pins_t pins);
uintptr_t z_mrsh_gpio_port_set_bits_raw(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   1d0a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	_current->syscall_frame = ssf;
   1d0a8:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 1d16c <z_mrsh_gpio_port_set_bits_raw+0xc8>
   1d0ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1d0ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
{
   1d0b2:	4604      	mov	r4, r0
	_current->syscall_frame = ssf;
   1d0b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
{
   1d0b8:	460f      	mov	r7, r1
#include <syscalls/gpio_port_set_masked_raw_mrsh.c>

static inline int z_vrfy_gpio_port_set_bits_raw(const struct device *port,
						gpio_port_pins_t pins)
{
	Z_OOPS(Z_SYSCALL_DRIVER_GPIO(port, port_set_bits_raw));
   1d0ba:	f7e3 f821 	bl	100 <z_object_find>
   1d0be:	4621      	mov	r1, r4
   1d0c0:	f00b feea 	bl	28e98 <z_obj_validation_check.constprop.0>
   1d0c4:	4645      	mov	r5, r8
   1d0c6:	4606      	mov	r6, r0
   1d0c8:	b360      	cbz	r0, 1d124 <z_mrsh_gpio_port_set_bits_raw+0x80>
   1d0ca:	f00b fedb 	bl	28e84 <arch_is_user_context>
   1d0ce:	4b21      	ldr	r3, [pc, #132]	; (1d154 <z_mrsh_gpio_port_set_bits_raw+0xb0>)
   1d0d0:	4a21      	ldr	r2, [pc, #132]	; (1d158 <z_mrsh_gpio_port_set_bits_raw+0xb4>)
   1d0d2:	1a9b      	subs	r3, r3, r2
   1d0d4:	08db      	lsrs	r3, r3, #3
   1d0d6:	019b      	lsls	r3, r3, #6
   1d0d8:	f043 0301 	orr.w	r3, r3, #1
   1d0dc:	b148      	cbz	r0, 1d0f2 <z_mrsh_gpio_port_set_bits_raw+0x4e>
   1d0de:	4a1f      	ldr	r2, [pc, #124]	; (1d15c <z_mrsh_gpio_port_set_bits_raw+0xb8>)
   1d0e0:	491f      	ldr	r1, [pc, #124]	; (1d160 <z_mrsh_gpio_port_set_bits_raw+0xbc>)
   1d0e2:	4618      	mov	r0, r3
   1d0e4:	f007 fed7 	bl	24e96 <log_from_user>
   1d0e8:	68ab      	ldr	r3, [r5, #8]
   1d0ea:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   1d0ee:	f009 fcb5 	bl	26a5c <arch_syscall_oops>
   1d0f2:	491a      	ldr	r1, [pc, #104]	; (1d15c <z_mrsh_gpio_port_set_bits_raw+0xb8>)
   1d0f4:	481a      	ldr	r0, [pc, #104]	; (1d160 <z_mrsh_gpio_port_set_bits_raw+0xbc>)
   1d0f6:	461a      	mov	r2, r3
   1d0f8:	f007 ff00 	bl	24efc <log_1>
   1d0fc:	e7f4      	b.n	1d0e8 <z_mrsh_gpio_port_set_bits_raw+0x44>
   1d0fe:	4613      	mov	r3, r2
   1d100:	4916      	ldr	r1, [pc, #88]	; (1d15c <z_mrsh_gpio_port_set_bits_raw+0xb8>)
   1d102:	4a18      	ldr	r2, [pc, #96]	; (1d164 <z_mrsh_gpio_port_set_bits_raw+0xc0>)
   1d104:	4818      	ldr	r0, [pc, #96]	; (1d168 <z_mrsh_gpio_port_set_bits_raw+0xc4>)
   1d106:	f8ad 4000 	strh.w	r4, [sp]
   1d10a:	f007 ff24 	bl	24f56 <log_3>
   1d10e:	e7eb      	b.n	1d0e8 <z_mrsh_gpio_port_set_bits_raw+0x44>
						gpio_port_pins_t pins)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	return api->port_set_bits_raw(port, pins);
   1d110:	4639      	mov	r1, r7
   1d112:	4620      	mov	r0, r4
   1d114:	4798      	blx	r3
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	int ret = z_vrfy_gpio_port_set_bits_raw(*(const struct device **)&arg0, *(gpio_port_pins_t*)&arg1)
;
	_current->syscall_frame = NULL;
   1d116:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1d11a:	f8c3 6084 	str.w	r6, [r3, #132]	; 0x84
	return (uintptr_t) ret;
}
   1d11e:	b002      	add	sp, #8
   1d120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d124:	68a2      	ldr	r2, [r4, #8]
   1d126:	68d3      	ldr	r3, [r2, #12]
   1d128:	2b00      	cmp	r3, #0
   1d12a:	d1f1      	bne.n	1d110 <z_mrsh_gpio_port_set_bits_raw+0x6c>
   1d12c:	f00b feaa 	bl	28e84 <arch_is_user_context>
   1d130:	4c08      	ldr	r4, [pc, #32]	; (1d154 <z_mrsh_gpio_port_set_bits_raw+0xb0>)
   1d132:	4b09      	ldr	r3, [pc, #36]	; (1d158 <z_mrsh_gpio_port_set_bits_raw+0xb4>)
   1d134:	1ae4      	subs	r4, r4, r3
   1d136:	08e4      	lsrs	r4, r4, #3
   1d138:	01a4      	lsls	r4, r4, #6
   1d13a:	f044 0401 	orr.w	r4, r4, #1
   1d13e:	2800      	cmp	r0, #0
   1d140:	d0dd      	beq.n	1d0fe <z_mrsh_gpio_port_set_bits_raw+0x5a>
   1d142:	9200      	str	r2, [sp, #0]
   1d144:	4b07      	ldr	r3, [pc, #28]	; (1d164 <z_mrsh_gpio_port_set_bits_raw+0xc0>)
   1d146:	4a05      	ldr	r2, [pc, #20]	; (1d15c <z_mrsh_gpio_port_set_bits_raw+0xb8>)
   1d148:	4907      	ldr	r1, [pc, #28]	; (1d168 <z_mrsh_gpio_port_set_bits_raw+0xc4>)
   1d14a:	4620      	mov	r0, r4
   1d14c:	f007 fea3 	bl	24e96 <log_from_user>
   1d150:	e7ca      	b.n	1d0e8 <z_mrsh_gpio_port_set_bits_raw+0x44>
   1d152:	bf00      	nop
   1d154:	0002a810 	.word	0x0002a810
   1d158:	0002a6d0 	.word	0x0002a6d0
   1d15c:	0002e877 	.word	0x0002e877
   1d160:	0002e72d 	.word	0x0002e72d
   1d164:	0002e7cc 	.word	0x0002e7cc
   1d168:	0002e762 	.word	0x0002e762
   1d16c:	200023f4 	.word	0x200023f4

0001d170 <z_mrsh_gpio_port_clear_bits_raw>:
#include <syscalls/gpio.h>

extern int z_vrfy_gpio_port_clear_bits_raw(const struct device * port, gpio_port_pins_t pins);
uintptr_t z_mrsh_gpio_port_clear_bits_raw(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   1d170:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	_current->syscall_frame = ssf;
   1d174:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 1d238 <z_mrsh_gpio_port_clear_bits_raw+0xc8>
   1d178:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1d17a:	f8d8 3008 	ldr.w	r3, [r8, #8]
{
   1d17e:	4604      	mov	r4, r0
	_current->syscall_frame = ssf;
   1d180:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
{
   1d184:	460f      	mov	r7, r1
#include <syscalls/gpio_port_set_bits_raw_mrsh.c>

static inline int z_vrfy_gpio_port_clear_bits_raw(const struct device *port,
						  gpio_port_pins_t pins)
{
	Z_OOPS(Z_SYSCALL_DRIVER_GPIO(port, port_clear_bits_raw));
   1d186:	f7e2 ffbb 	bl	100 <z_object_find>
   1d18a:	4621      	mov	r1, r4
   1d18c:	f00b fe84 	bl	28e98 <z_obj_validation_check.constprop.0>
   1d190:	4645      	mov	r5, r8
   1d192:	4606      	mov	r6, r0
   1d194:	b360      	cbz	r0, 1d1f0 <z_mrsh_gpio_port_clear_bits_raw+0x80>
   1d196:	f00b fe75 	bl	28e84 <arch_is_user_context>
   1d19a:	4b21      	ldr	r3, [pc, #132]	; (1d220 <z_mrsh_gpio_port_clear_bits_raw+0xb0>)
   1d19c:	4a21      	ldr	r2, [pc, #132]	; (1d224 <z_mrsh_gpio_port_clear_bits_raw+0xb4>)
   1d19e:	1a9b      	subs	r3, r3, r2
   1d1a0:	08db      	lsrs	r3, r3, #3
   1d1a2:	019b      	lsls	r3, r3, #6
   1d1a4:	f043 0301 	orr.w	r3, r3, #1
   1d1a8:	b148      	cbz	r0, 1d1be <z_mrsh_gpio_port_clear_bits_raw+0x4e>
   1d1aa:	4a1f      	ldr	r2, [pc, #124]	; (1d228 <z_mrsh_gpio_port_clear_bits_raw+0xb8>)
   1d1ac:	491f      	ldr	r1, [pc, #124]	; (1d22c <z_mrsh_gpio_port_clear_bits_raw+0xbc>)
   1d1ae:	4618      	mov	r0, r3
   1d1b0:	f007 fe71 	bl	24e96 <log_from_user>
   1d1b4:	68ab      	ldr	r3, [r5, #8]
   1d1b6:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   1d1ba:	f009 fc4f 	bl	26a5c <arch_syscall_oops>
   1d1be:	491a      	ldr	r1, [pc, #104]	; (1d228 <z_mrsh_gpio_port_clear_bits_raw+0xb8>)
   1d1c0:	481a      	ldr	r0, [pc, #104]	; (1d22c <z_mrsh_gpio_port_clear_bits_raw+0xbc>)
   1d1c2:	461a      	mov	r2, r3
   1d1c4:	f007 fe9a 	bl	24efc <log_1>
   1d1c8:	e7f4      	b.n	1d1b4 <z_mrsh_gpio_port_clear_bits_raw+0x44>
   1d1ca:	4613      	mov	r3, r2
   1d1cc:	4916      	ldr	r1, [pc, #88]	; (1d228 <z_mrsh_gpio_port_clear_bits_raw+0xb8>)
   1d1ce:	4a18      	ldr	r2, [pc, #96]	; (1d230 <z_mrsh_gpio_port_clear_bits_raw+0xc0>)
   1d1d0:	4818      	ldr	r0, [pc, #96]	; (1d234 <z_mrsh_gpio_port_clear_bits_raw+0xc4>)
   1d1d2:	f8ad 4000 	strh.w	r4, [sp]
   1d1d6:	f007 febe 	bl	24f56 <log_3>
   1d1da:	e7eb      	b.n	1d1b4 <z_mrsh_gpio_port_clear_bits_raw+0x44>
						  gpio_port_pins_t pins)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	return api->port_clear_bits_raw(port, pins);
   1d1dc:	4639      	mov	r1, r7
   1d1de:	4620      	mov	r0, r4
   1d1e0:	4798      	blx	r3
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	int ret = z_vrfy_gpio_port_clear_bits_raw(*(const struct device **)&arg0, *(gpio_port_pins_t*)&arg1)
;
	_current->syscall_frame = NULL;
   1d1e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1d1e6:	f8c3 6084 	str.w	r6, [r3, #132]	; 0x84
	return (uintptr_t) ret;
}
   1d1ea:	b002      	add	sp, #8
   1d1ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d1f0:	68a2      	ldr	r2, [r4, #8]
   1d1f2:	6913      	ldr	r3, [r2, #16]
   1d1f4:	2b00      	cmp	r3, #0
   1d1f6:	d1f1      	bne.n	1d1dc <z_mrsh_gpio_port_clear_bits_raw+0x6c>
   1d1f8:	f00b fe44 	bl	28e84 <arch_is_user_context>
   1d1fc:	4c08      	ldr	r4, [pc, #32]	; (1d220 <z_mrsh_gpio_port_clear_bits_raw+0xb0>)
   1d1fe:	4b09      	ldr	r3, [pc, #36]	; (1d224 <z_mrsh_gpio_port_clear_bits_raw+0xb4>)
   1d200:	1ae4      	subs	r4, r4, r3
   1d202:	08e4      	lsrs	r4, r4, #3
   1d204:	01a4      	lsls	r4, r4, #6
   1d206:	f044 0401 	orr.w	r4, r4, #1
   1d20a:	2800      	cmp	r0, #0
   1d20c:	d0dd      	beq.n	1d1ca <z_mrsh_gpio_port_clear_bits_raw+0x5a>
   1d20e:	9200      	str	r2, [sp, #0]
   1d210:	4b07      	ldr	r3, [pc, #28]	; (1d230 <z_mrsh_gpio_port_clear_bits_raw+0xc0>)
   1d212:	4a05      	ldr	r2, [pc, #20]	; (1d228 <z_mrsh_gpio_port_clear_bits_raw+0xb8>)
   1d214:	4907      	ldr	r1, [pc, #28]	; (1d234 <z_mrsh_gpio_port_clear_bits_raw+0xc4>)
   1d216:	4620      	mov	r0, r4
   1d218:	f007 fe3d 	bl	24e96 <log_from_user>
   1d21c:	e7ca      	b.n	1d1b4 <z_mrsh_gpio_port_clear_bits_raw+0x44>
   1d21e:	bf00      	nop
   1d220:	0002a810 	.word	0x0002a810
   1d224:	0002a6d0 	.word	0x0002a6d0
   1d228:	0002e895 	.word	0x0002e895
   1d22c:	0002e72d 	.word	0x0002e72d
   1d230:	0002e7de 	.word	0x0002e7de
   1d234:	0002e762 	.word	0x0002e762
   1d238:	200023f4 	.word	0x200023f4

0001d23c <z_mrsh_gpio_port_toggle_bits>:
#include <syscalls/gpio.h>

extern int z_vrfy_gpio_port_toggle_bits(const struct device * port, gpio_port_pins_t pins);
uintptr_t z_mrsh_gpio_port_toggle_bits(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   1d23c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	_current->syscall_frame = ssf;
   1d240:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 1d304 <z_mrsh_gpio_port_toggle_bits+0xc8>
   1d244:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1d246:	f8d8 3008 	ldr.w	r3, [r8, #8]
{
   1d24a:	4604      	mov	r4, r0
	_current->syscall_frame = ssf;
   1d24c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
{
   1d250:	460f      	mov	r7, r1
#include <syscalls/gpio_port_clear_bits_raw_mrsh.c>

static inline int z_vrfy_gpio_port_toggle_bits(const struct device *port,
					       gpio_port_pins_t pins)
{
	Z_OOPS(Z_SYSCALL_DRIVER_GPIO(port, port_toggle_bits));
   1d252:	f7e2 ff55 	bl	100 <z_object_find>
   1d256:	4621      	mov	r1, r4
   1d258:	f00b fe1e 	bl	28e98 <z_obj_validation_check.constprop.0>
   1d25c:	4645      	mov	r5, r8
   1d25e:	4606      	mov	r6, r0
   1d260:	b360      	cbz	r0, 1d2bc <z_mrsh_gpio_port_toggle_bits+0x80>
   1d262:	f00b fe0f 	bl	28e84 <arch_is_user_context>
   1d266:	4b21      	ldr	r3, [pc, #132]	; (1d2ec <z_mrsh_gpio_port_toggle_bits+0xb0>)
   1d268:	4a21      	ldr	r2, [pc, #132]	; (1d2f0 <z_mrsh_gpio_port_toggle_bits+0xb4>)
   1d26a:	1a9b      	subs	r3, r3, r2
   1d26c:	08db      	lsrs	r3, r3, #3
   1d26e:	019b      	lsls	r3, r3, #6
   1d270:	f043 0301 	orr.w	r3, r3, #1
   1d274:	b148      	cbz	r0, 1d28a <z_mrsh_gpio_port_toggle_bits+0x4e>
   1d276:	4a1f      	ldr	r2, [pc, #124]	; (1d2f4 <z_mrsh_gpio_port_toggle_bits+0xb8>)
   1d278:	491f      	ldr	r1, [pc, #124]	; (1d2f8 <z_mrsh_gpio_port_toggle_bits+0xbc>)
   1d27a:	4618      	mov	r0, r3
   1d27c:	f007 fe0b 	bl	24e96 <log_from_user>
   1d280:	68ab      	ldr	r3, [r5, #8]
   1d282:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   1d286:	f009 fbe9 	bl	26a5c <arch_syscall_oops>
   1d28a:	491a      	ldr	r1, [pc, #104]	; (1d2f4 <z_mrsh_gpio_port_toggle_bits+0xb8>)
   1d28c:	481a      	ldr	r0, [pc, #104]	; (1d2f8 <z_mrsh_gpio_port_toggle_bits+0xbc>)
   1d28e:	461a      	mov	r2, r3
   1d290:	f007 fe34 	bl	24efc <log_1>
   1d294:	e7f4      	b.n	1d280 <z_mrsh_gpio_port_toggle_bits+0x44>
   1d296:	4613      	mov	r3, r2
   1d298:	4916      	ldr	r1, [pc, #88]	; (1d2f4 <z_mrsh_gpio_port_toggle_bits+0xb8>)
   1d29a:	4a18      	ldr	r2, [pc, #96]	; (1d2fc <z_mrsh_gpio_port_toggle_bits+0xc0>)
   1d29c:	4818      	ldr	r0, [pc, #96]	; (1d300 <z_mrsh_gpio_port_toggle_bits+0xc4>)
   1d29e:	f8ad 4000 	strh.w	r4, [sp]
   1d2a2:	f007 fe58 	bl	24f56 <log_3>
   1d2a6:	e7eb      	b.n	1d280 <z_mrsh_gpio_port_toggle_bits+0x44>
					       gpio_port_pins_t pins)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	return api->port_toggle_bits(port, pins);
   1d2a8:	4639      	mov	r1, r7
   1d2aa:	4620      	mov	r0, r4
   1d2ac:	4798      	blx	r3
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	int ret = z_vrfy_gpio_port_toggle_bits(*(const struct device **)&arg0, *(gpio_port_pins_t*)&arg1)
;
	_current->syscall_frame = NULL;
   1d2ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1d2b2:	f8c3 6084 	str.w	r6, [r3, #132]	; 0x84
	return (uintptr_t) ret;
}
   1d2b6:	b002      	add	sp, #8
   1d2b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d2bc:	68a2      	ldr	r2, [r4, #8]
   1d2be:	6953      	ldr	r3, [r2, #20]
   1d2c0:	2b00      	cmp	r3, #0
   1d2c2:	d1f1      	bne.n	1d2a8 <z_mrsh_gpio_port_toggle_bits+0x6c>
   1d2c4:	f00b fdde 	bl	28e84 <arch_is_user_context>
   1d2c8:	4c08      	ldr	r4, [pc, #32]	; (1d2ec <z_mrsh_gpio_port_toggle_bits+0xb0>)
   1d2ca:	4b09      	ldr	r3, [pc, #36]	; (1d2f0 <z_mrsh_gpio_port_toggle_bits+0xb4>)
   1d2cc:	1ae4      	subs	r4, r4, r3
   1d2ce:	08e4      	lsrs	r4, r4, #3
   1d2d0:	01a4      	lsls	r4, r4, #6
   1d2d2:	f044 0401 	orr.w	r4, r4, #1
   1d2d6:	2800      	cmp	r0, #0
   1d2d8:	d0dd      	beq.n	1d296 <z_mrsh_gpio_port_toggle_bits+0x5a>
   1d2da:	9200      	str	r2, [sp, #0]
   1d2dc:	4b07      	ldr	r3, [pc, #28]	; (1d2fc <z_mrsh_gpio_port_toggle_bits+0xc0>)
   1d2de:	4a05      	ldr	r2, [pc, #20]	; (1d2f4 <z_mrsh_gpio_port_toggle_bits+0xb8>)
   1d2e0:	4907      	ldr	r1, [pc, #28]	; (1d300 <z_mrsh_gpio_port_toggle_bits+0xc4>)
   1d2e2:	4620      	mov	r0, r4
   1d2e4:	f007 fdd7 	bl	24e96 <log_from_user>
   1d2e8:	e7ca      	b.n	1d280 <z_mrsh_gpio_port_toggle_bits+0x44>
   1d2ea:	bf00      	nop
   1d2ec:	0002a810 	.word	0x0002a810
   1d2f0:	0002a6d0 	.word	0x0002a6d0
   1d2f4:	0002e8b5 	.word	0x0002e8b5
   1d2f8:	0002e72d 	.word	0x0002e72d
   1d2fc:	0002e7f2 	.word	0x0002e7f2
   1d300:	0002e762 	.word	0x0002e762
   1d304:	200023f4 	.word	0x200023f4

0001d308 <z_mrsh_gpio_pin_interrupt_configure>:
#include <syscalls/gpio.h>

extern int z_vrfy_gpio_pin_interrupt_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags);
uintptr_t z_mrsh_gpio_pin_interrupt_configure(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   1d308:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	_current->syscall_frame = ssf;
   1d30c:	4d31      	ldr	r5, [pc, #196]	; (1d3d4 <z_mrsh_gpio_pin_interrupt_configure+0xcc>)
   1d30e:	68ab      	ldr	r3, [r5, #8]
{
   1d310:	4614      	mov	r4, r2
	_current->syscall_frame = ssf;
   1d312:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1d314:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
{
   1d318:	4606      	mov	r6, r0
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	int ret = z_vrfy_gpio_pin_interrupt_configure(*(const struct device **)&arg0, *(gpio_pin_t*)&arg1, *(gpio_flags_t*)&arg2)
   1d31a:	b2cf      	uxtb	r7, r1

static inline int z_vrfy_gpio_pin_interrupt_configure(const struct device *port,
						      gpio_pin_t pin,
						      gpio_flags_t flags)
{
	Z_OOPS(Z_SYSCALL_DRIVER_GPIO(port, pin_interrupt_configure));
   1d31c:	f7e2 fef0 	bl	100 <z_object_find>
   1d320:	4631      	mov	r1, r6
   1d322:	f00b fdb9 	bl	28e98 <z_obj_validation_check.constprop.0>
   1d326:	2800      	cmp	r0, #0
   1d328:	d03a      	beq.n	1d3a0 <z_mrsh_gpio_pin_interrupt_configure+0x98>
   1d32a:	f00b fdab 	bl	28e84 <arch_is_user_context>
   1d32e:	4b2a      	ldr	r3, [pc, #168]	; (1d3d8 <z_mrsh_gpio_pin_interrupt_configure+0xd0>)
   1d330:	4a2a      	ldr	r2, [pc, #168]	; (1d3dc <z_mrsh_gpio_pin_interrupt_configure+0xd4>)
   1d332:	1a9b      	subs	r3, r3, r2
   1d334:	08db      	lsrs	r3, r3, #3
   1d336:	019b      	lsls	r3, r3, #6
   1d338:	f043 0301 	orr.w	r3, r3, #1
   1d33c:	b148      	cbz	r0, 1d352 <z_mrsh_gpio_pin_interrupt_configure+0x4a>
   1d33e:	4a28      	ldr	r2, [pc, #160]	; (1d3e0 <z_mrsh_gpio_pin_interrupt_configure+0xd8>)
   1d340:	4928      	ldr	r1, [pc, #160]	; (1d3e4 <z_mrsh_gpio_pin_interrupt_configure+0xdc>)
   1d342:	4618      	mov	r0, r3
   1d344:	f007 fda7 	bl	24e96 <log_from_user>
   1d348:	68ab      	ldr	r3, [r5, #8]
   1d34a:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   1d34e:	f009 fb85 	bl	26a5c <arch_syscall_oops>
   1d352:	4923      	ldr	r1, [pc, #140]	; (1d3e0 <z_mrsh_gpio_pin_interrupt_configure+0xd8>)
   1d354:	4823      	ldr	r0, [pc, #140]	; (1d3e4 <z_mrsh_gpio_pin_interrupt_configure+0xdc>)
   1d356:	461a      	mov	r2, r3
   1d358:	f007 fdd0 	bl	24efc <log_1>
   1d35c:	e7f4      	b.n	1d348 <z_mrsh_gpio_pin_interrupt_configure+0x40>
   1d35e:	4613      	mov	r3, r2
   1d360:	491f      	ldr	r1, [pc, #124]	; (1d3e0 <z_mrsh_gpio_pin_interrupt_configure+0xd8>)
   1d362:	4a21      	ldr	r2, [pc, #132]	; (1d3e8 <z_mrsh_gpio_pin_interrupt_configure+0xe0>)
   1d364:	4821      	ldr	r0, [pc, #132]	; (1d3ec <z_mrsh_gpio_pin_interrupt_configure+0xe4>)
   1d366:	f8ad 4000 	strh.w	r4, [sp]
   1d36a:	f007 fdf4 	bl	24f56 <log_3>
   1d36e:	e7eb      	b.n	1d348 <z_mrsh_gpio_pin_interrupt_configure+0x40>
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   1d370:	0423      	lsls	r3, r4, #16
   1d372:	d507      	bpl.n	1d384 <z_mrsh_gpio_pin_interrupt_configure+0x7c>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   1d374:	6932      	ldr	r2, [r6, #16]
   1d376:	2301      	movs	r3, #1
   1d378:	6812      	ldr	r2, [r2, #0]
   1d37a:	40bb      	lsls	r3, r7
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   1d37c:	4213      	tst	r3, r2
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   1d37e:	bf18      	it	ne
   1d380:	f484 24c0 	eorne.w	r4, r4, #393216	; 0x60000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   1d384:	f404 23c0 	and.w	r3, r4, #393216	; 0x60000
   1d388:	f404 32b0 	and.w	r2, r4, #90112	; 0x16000
   1d38c:	4639      	mov	r1, r7
   1d38e:	4630      	mov	r0, r6
   1d390:	47c0      	blx	r8
;
	_current->syscall_frame = NULL;
   1d392:	68ab      	ldr	r3, [r5, #8]
   1d394:	2200      	movs	r2, #0
   1d396:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	return (uintptr_t) ret;
}
   1d39a:	b002      	add	sp, #8
   1d39c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d3a0:	68b2      	ldr	r2, [r6, #8]
   1d3a2:	f8d2 8018 	ldr.w	r8, [r2, #24]
   1d3a6:	f1b8 0f00 	cmp.w	r8, #0
   1d3aa:	d1e1      	bne.n	1d370 <z_mrsh_gpio_pin_interrupt_configure+0x68>
   1d3ac:	f00b fd6a 	bl	28e84 <arch_is_user_context>
   1d3b0:	4c09      	ldr	r4, [pc, #36]	; (1d3d8 <z_mrsh_gpio_pin_interrupt_configure+0xd0>)
   1d3b2:	4b0a      	ldr	r3, [pc, #40]	; (1d3dc <z_mrsh_gpio_pin_interrupt_configure+0xd4>)
   1d3b4:	1ae4      	subs	r4, r4, r3
   1d3b6:	08e4      	lsrs	r4, r4, #3
   1d3b8:	01a4      	lsls	r4, r4, #6
   1d3ba:	f044 0401 	orr.w	r4, r4, #1
   1d3be:	2800      	cmp	r0, #0
   1d3c0:	d0cd      	beq.n	1d35e <z_mrsh_gpio_pin_interrupt_configure+0x56>
   1d3c2:	9200      	str	r2, [sp, #0]
   1d3c4:	4b08      	ldr	r3, [pc, #32]	; (1d3e8 <z_mrsh_gpio_pin_interrupt_configure+0xe0>)
   1d3c6:	4a06      	ldr	r2, [pc, #24]	; (1d3e0 <z_mrsh_gpio_pin_interrupt_configure+0xd8>)
   1d3c8:	4908      	ldr	r1, [pc, #32]	; (1d3ec <z_mrsh_gpio_pin_interrupt_configure+0xe4>)
   1d3ca:	4620      	mov	r0, r4
   1d3cc:	f007 fd63 	bl	24e96 <log_from_user>
   1d3d0:	e7ba      	b.n	1d348 <z_mrsh_gpio_pin_interrupt_configure+0x40>
   1d3d2:	bf00      	nop
   1d3d4:	200023f4 	.word	0x200023f4
   1d3d8:	0002a810 	.word	0x0002a810
   1d3dc:	0002a6d0 	.word	0x0002a6d0
   1d3e0:	0002e8d2 	.word	0x0002e8d2
   1d3e4:	0002e72d 	.word	0x0002e72d
   1d3e8:	0002e803 	.word	0x0002e803
   1d3ec:	0002e762 	.word	0x0002e762

0001d3f0 <z_mrsh_gpio_get_pending_int>:
#include <syscalls/gpio.h>

extern int z_vrfy_gpio_get_pending_int(const struct device * dev);
uintptr_t z_mrsh_gpio_get_pending_int(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   1d3f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	_current->syscall_frame = ssf;
   1d3f2:	4f27      	ldr	r7, [pc, #156]	; (1d490 <z_mrsh_gpio_get_pending_int+0xa0>)
   1d3f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1d3f6:	68bb      	ldr	r3, [r7, #8]
{
   1d3f8:	4604      	mov	r4, r0
	_current->syscall_frame = ssf;
   1d3fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
#include <syscalls/gpio_pin_interrupt_configure_mrsh.c>

static inline int z_vrfy_gpio_get_pending_int(const struct device *dev)
{
	Z_OOPS(Z_SYSCALL_DRIVER_GPIO(dev, get_pending_int));
   1d3fe:	f7e2 fe7f 	bl	100 <z_object_find>
   1d402:	4621      	mov	r1, r4
   1d404:	f00b fd48 	bl	28e98 <z_obj_validation_check.constprop.0>
   1d408:	463d      	mov	r5, r7
   1d40a:	4606      	mov	r6, r0
   1d40c:	b348      	cbz	r0, 1d462 <z_mrsh_gpio_get_pending_int+0x72>
   1d40e:	f00b fd39 	bl	28e84 <arch_is_user_context>
   1d412:	4b20      	ldr	r3, [pc, #128]	; (1d494 <z_mrsh_gpio_get_pending_int+0xa4>)
   1d414:	4a20      	ldr	r2, [pc, #128]	; (1d498 <z_mrsh_gpio_get_pending_int+0xa8>)
   1d416:	1a9b      	subs	r3, r3, r2
   1d418:	08db      	lsrs	r3, r3, #3
   1d41a:	019b      	lsls	r3, r3, #6
   1d41c:	f043 0301 	orr.w	r3, r3, #1
   1d420:	b148      	cbz	r0, 1d436 <z_mrsh_gpio_get_pending_int+0x46>
   1d422:	4a1e      	ldr	r2, [pc, #120]	; (1d49c <z_mrsh_gpio_get_pending_int+0xac>)
   1d424:	491e      	ldr	r1, [pc, #120]	; (1d4a0 <z_mrsh_gpio_get_pending_int+0xb0>)
   1d426:	4618      	mov	r0, r3
   1d428:	f007 fd35 	bl	24e96 <log_from_user>
   1d42c:	68ab      	ldr	r3, [r5, #8]
   1d42e:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   1d432:	f009 fb13 	bl	26a5c <arch_syscall_oops>
   1d436:	4919      	ldr	r1, [pc, #100]	; (1d49c <z_mrsh_gpio_get_pending_int+0xac>)
   1d438:	4819      	ldr	r0, [pc, #100]	; (1d4a0 <z_mrsh_gpio_get_pending_int+0xb0>)
   1d43a:	461a      	mov	r2, r3
   1d43c:	f007 fd5e 	bl	24efc <log_1>
   1d440:	e7f4      	b.n	1d42c <z_mrsh_gpio_get_pending_int+0x3c>
   1d442:	4613      	mov	r3, r2
   1d444:	4915      	ldr	r1, [pc, #84]	; (1d49c <z_mrsh_gpio_get_pending_int+0xac>)
   1d446:	4a17      	ldr	r2, [pc, #92]	; (1d4a4 <z_mrsh_gpio_get_pending_int+0xb4>)
   1d448:	4817      	ldr	r0, [pc, #92]	; (1d4a8 <z_mrsh_gpio_get_pending_int+0xb8>)
   1d44a:	f8ad 4000 	strh.w	r4, [sp]
   1d44e:	f007 fd82 	bl	24f56 <log_3>
   1d452:	e7eb      	b.n	1d42c <z_mrsh_gpio_get_pending_int+0x3c>

	if (api->get_pending_int == NULL) {
		return -ENOTSUP;
	}

	return api->get_pending_int(dev);
   1d454:	4620      	mov	r0, r4
   1d456:	4798      	blx	r3
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	int ret = z_vrfy_gpio_get_pending_int(*(const struct device **)&arg0)
;
	_current->syscall_frame = NULL;
   1d458:	68bb      	ldr	r3, [r7, #8]
   1d45a:	f8c3 6084 	str.w	r6, [r3, #132]	; 0x84
	return (uintptr_t) ret;
}
   1d45e:	b003      	add	sp, #12
   1d460:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d462:	68a2      	ldr	r2, [r4, #8]
   1d464:	6a13      	ldr	r3, [r2, #32]
   1d466:	2b00      	cmp	r3, #0
   1d468:	d1f4      	bne.n	1d454 <z_mrsh_gpio_get_pending_int+0x64>
   1d46a:	f00b fd0b 	bl	28e84 <arch_is_user_context>
   1d46e:	4c09      	ldr	r4, [pc, #36]	; (1d494 <z_mrsh_gpio_get_pending_int+0xa4>)
   1d470:	4b09      	ldr	r3, [pc, #36]	; (1d498 <z_mrsh_gpio_get_pending_int+0xa8>)
   1d472:	1ae4      	subs	r4, r4, r3
   1d474:	08e4      	lsrs	r4, r4, #3
   1d476:	01a4      	lsls	r4, r4, #6
   1d478:	f044 0401 	orr.w	r4, r4, #1
   1d47c:	2800      	cmp	r0, #0
   1d47e:	d0e0      	beq.n	1d442 <z_mrsh_gpio_get_pending_int+0x52>
   1d480:	9200      	str	r2, [sp, #0]
   1d482:	4b08      	ldr	r3, [pc, #32]	; (1d4a4 <z_mrsh_gpio_get_pending_int+0xb4>)
   1d484:	4a05      	ldr	r2, [pc, #20]	; (1d49c <z_mrsh_gpio_get_pending_int+0xac>)
   1d486:	4908      	ldr	r1, [pc, #32]	; (1d4a8 <z_mrsh_gpio_get_pending_int+0xb8>)
   1d488:	4620      	mov	r0, r4
   1d48a:	f007 fd04 	bl	24e96 <log_from_user>
   1d48e:	e7cd      	b.n	1d42c <z_mrsh_gpio_get_pending_int+0x3c>
   1d490:	200023f4 	.word	0x200023f4
   1d494:	0002a810 	.word	0x0002a810
   1d498:	0002a6d0 	.word	0x0002a6d0
   1d49c:	0002e8f6 	.word	0x0002e8f6
   1d4a0:	0002e72d 	.word	0x0002e72d
   1d4a4:	0002e81b 	.word	0x0002e81b
   1d4a8:	0002e762 	.word	0x0002e762

0001d4ac <spi_1_init>:
#ifdef CONFIG_SPI_0_NRF_SPI
SPI_NRFX_SPI_DEVICE(0);
#endif

#ifdef CONFIG_SPI_1_NRF_SPI
SPI_NRFX_SPI_DEVICE(1);
   1d4ac:	b538      	push	{r3, r4, r5, lr}
   1d4ae:	4604      	mov	r4, r0
   1d4b0:	2200      	movs	r2, #0
   1d4b2:	2101      	movs	r1, #1
   1d4b4:	2004      	movs	r0, #4
   1d4b6:	f7e8 fdc9 	bl	604c <z_arm_irq_priority_set>
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   1d4ba:	6923      	ldr	r3, [r4, #16]
	result = nrfx_spi_init(&get_dev_config(dev)->spi,
   1d4bc:	4a13      	ldr	r2, [pc, #76]	; (1d50c <spi_1_init+0x60>)
	dev_data->dev = dev;
   1d4be:	65dc      	str	r4, [r3, #92]	; 0x5c
	result = nrfx_spi_init(&get_dev_config(dev)->spi,
   1d4c0:	6860      	ldr	r0, [r4, #4]
   1d4c2:	f100 0108 	add.w	r1, r0, #8
   1d4c6:	f002 ff71 	bl	203ac <nrfx_spi_init>
	if (result != NRFX_SUCCESS) {
   1d4ca:	4b11      	ldr	r3, [pc, #68]	; (1d510 <spi_1_init+0x64>)
   1d4cc:	4298      	cmp	r0, r3
   1d4ce:	d01b      	beq.n	1d508 <spi_1_init+0x5c>
   1d4d0:	f00b fcf2 	bl	28eb8 <arch_is_user_context>
   1d4d4:	4b0f      	ldr	r3, [pc, #60]	; (1d514 <spi_1_init+0x68>)
   1d4d6:	4a10      	ldr	r2, [pc, #64]	; (1d518 <spi_1_init+0x6c>)
   1d4d8:	1a9b      	subs	r3, r3, r2
   1d4da:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to initialize device: %s", dev->name);
   1d4dc:	019b      	lsls	r3, r3, #6
   1d4de:	f043 0301 	orr.w	r3, r3, #1
   1d4e2:	b158      	cbz	r0, 1d4fc <spi_1_init+0x50>
   1d4e4:	6822      	ldr	r2, [r4, #0]
   1d4e6:	490d      	ldr	r1, [pc, #52]	; (1d51c <spi_1_init+0x70>)
   1d4e8:	4618      	mov	r0, r3
   1d4ea:	f007 fcd4 	bl	24e96 <log_from_user>
		return -EBUSY;
   1d4ee:	f06f 050f 	mvn.w	r5, #15
SPI_NRFX_SPI_DEVICE(1);
   1d4f2:	6920      	ldr	r0, [r4, #16]
   1d4f4:	f00b fd1f 	bl	28f36 <spi_context_unlock_unconditionally>
   1d4f8:	4628      	mov	r0, r5
   1d4fa:	bd38      	pop	{r3, r4, r5, pc}
		LOG_ERR("Failed to initialize device: %s", dev->name);
   1d4fc:	6821      	ldr	r1, [r4, #0]
   1d4fe:	4807      	ldr	r0, [pc, #28]	; (1d51c <spi_1_init+0x70>)
   1d500:	461a      	mov	r2, r3
   1d502:	f007 fcfb 	bl	24efc <log_1>
   1d506:	e7f2      	b.n	1d4ee <spi_1_init+0x42>
	return 0;
   1d508:	2500      	movs	r5, #0
   1d50a:	e7f2      	b.n	1d4f2 <spi_1_init+0x46>
   1d50c:	0001d87d 	.word	0x0001d87d
   1d510:	0bad0000 	.word	0x0bad0000
   1d514:	0002a828 	.word	0x0002a828
   1d518:	0002a6d0 	.word	0x0002a6d0
   1d51c:	0002e912 	.word	0x0002e912

0001d520 <transfer_next_chunk>:
{
   1d520:	b530      	push	{r4, r5, lr}
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   1d522:	6905      	ldr	r5, [r0, #16]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   1d524:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   1d526:	6dab      	ldr	r3, [r5, #88]	; 0x58
{
   1d528:	b085      	sub	sp, #20
   1d52a:	b982      	cbnz	r2, 1d54e <transfer_next_chunk+0x2e>
	if (chunk_len > 0) {
   1d52c:	bb73      	cbnz	r3, 1d58c <transfer_next_chunk+0x6c>
	int error = 0;
   1d52e:	461c      	mov	r4, r3
	_spi_context_cs_control(ctx, on, false);
   1d530:	2200      	movs	r2, #0
   1d532:	4611      	mov	r1, r2
   1d534:	4628      	mov	r0, r5
   1d536:	f00b fcd9 	bl	28eec <_spi_context_cs_control.isra.0>
	ctx->sync_status = status;
   1d53a:	63ac      	str	r4, [r5, #56]	; 0x38
	z_impl_k_sem_give(sem);
   1d53c:	f105 0020 	add.w	r0, r5, #32
   1d540:	f004 fd60 	bl	22004 <z_impl_k_sem_give>
	dev_data->busy = false;
   1d544:	2300      	movs	r3, #0
   1d546:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
}
   1d54a:	b005      	add	sp, #20
   1d54c:	bd30      	pop	{r4, r5, pc}
		return ctx->rx_len;
	} else if (!ctx->rx_len) {
   1d54e:	4611      	mov	r1, r2
   1d550:	b113      	cbz	r3, 1d558 <transfer_next_chunk+0x38>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   1d552:	429a      	cmp	r2, r3
   1d554:	bf28      	it	cs
   1d556:	4619      	movcs	r1, r3
		xfer.p_tx_buffer = ctx->tx_buf;
   1d558:	6cec      	ldr	r4, [r5, #76]	; 0x4c
		dev_data->chunk_len = chunk_len;
   1d55a:	6629      	str	r1, [r5, #96]	; 0x60
		xfer.p_tx_buffer = ctx->tx_buf;
   1d55c:	9400      	str	r4, [sp, #0]
	return !!(ctx->tx_buf && ctx->tx_len);
   1d55e:	b1bc      	cbz	r4, 1d590 <transfer_next_chunk+0x70>
   1d560:	2a00      	cmp	r2, #0
   1d562:	bf18      	it	ne
   1d564:	460a      	movne	r2, r1
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1d566:	9201      	str	r2, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   1d568:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   1d56a:	9202      	str	r2, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   1d56c:	b192      	cbz	r2, 1d594 <transfer_next_chunk+0x74>
   1d56e:	2b00      	cmp	r3, #0
   1d570:	bf18      	it	ne
   1d572:	460b      	movne	r3, r1
		result = nrfx_spi_xfer(&get_dev_config(dev)->spi, &xfer, 0);
   1d574:	6840      	ldr	r0, [r0, #4]
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1d576:	9303      	str	r3, [sp, #12]
		result = nrfx_spi_xfer(&get_dev_config(dev)->spi, &xfer, 0);
   1d578:	2200      	movs	r2, #0
   1d57a:	4669      	mov	r1, sp
   1d57c:	f002 ffb8 	bl	204f0 <nrfx_spi_xfer>
		if (result == NRFX_SUCCESS) {
   1d580:	4b05      	ldr	r3, [pc, #20]	; (1d598 <transfer_next_chunk+0x78>)
   1d582:	4298      	cmp	r0, r3
   1d584:	d0e1      	beq.n	1d54a <transfer_next_chunk+0x2a>
		error = -EIO;
   1d586:	f06f 0404 	mvn.w	r4, #4
   1d58a:	e7d1      	b.n	1d530 <transfer_next_chunk+0x10>
   1d58c:	4619      	mov	r1, r3
   1d58e:	e7e3      	b.n	1d558 <transfer_next_chunk+0x38>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1d590:	4622      	mov	r2, r4
   1d592:	e7e8      	b.n	1d566 <transfer_next_chunk+0x46>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1d594:	4613      	mov	r3, r2
   1d596:	e7ed      	b.n	1d574 <transfer_next_chunk+0x54>
   1d598:	0bad0000 	.word	0x0bad0000

0001d59c <spi_nrfx_transceive>:
{
   1d59c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d5a0:	461e      	mov	r6, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1d5a2:	888b      	ldrh	r3, [r1, #4]
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   1d5a4:	6904      	ldr	r4, [r0, #16]
   1d5a6:	045b      	lsls	r3, r3, #17
{
   1d5a8:	4680      	mov	r8, r0
   1d5aa:	460d      	mov	r5, r1
   1d5ac:	4617      	mov	r7, r2
   1d5ae:	d431      	bmi.n	1d614 <spi_nrfx_transceive+0x78>
	return z_impl_k_sem_take(sem, timeout);
   1d5b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d5b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d5b8:	f104 0008 	add.w	r0, r4, #8
   1d5bc:	f004 fd84 	bl	220c8 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   1d5c0:	6065      	str	r5, [r4, #4]
	struct spi_context *ctx = &get_dev_data(dev)->ctx;
   1d5c2:	f8d8 2010 	ldr.w	r2, [r8, #16]
	if (spi_context_configured(ctx, spi_cfg)) {
   1d5c6:	6813      	ldr	r3, [r2, #0]
   1d5c8:	429d      	cmp	r5, r3
   1d5ca:	f000 80d8 	beq.w	1d77e <spi_nrfx_transceive+0x1e2>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   1d5ce:	88ab      	ldrh	r3, [r5, #4]
   1d5d0:	07d8      	lsls	r0, r3, #31
   1d5d2:	d52d      	bpl.n	1d630 <spi_nrfx_transceive+0x94>
   1d5d4:	f00b fc70 	bl	28eb8 <arch_is_user_context>
   1d5d8:	4b99      	ldr	r3, [pc, #612]	; (1d840 <spi_nrfx_transceive+0x2a4>)
   1d5da:	4a9a      	ldr	r2, [pc, #616]	; (1d844 <spi_nrfx_transceive+0x2a8>)
   1d5dc:	1a9b      	subs	r3, r3, r2
   1d5de:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Slave mode is not supported on %s",
   1d5e0:	019b      	lsls	r3, r3, #6
   1d5e2:	f043 0301 	orr.w	r3, r3, #1
   1d5e6:	b1e0      	cbz	r0, 1d622 <spi_nrfx_transceive+0x86>
   1d5e8:	f8d8 2000 	ldr.w	r2, [r8]
   1d5ec:	4996      	ldr	r1, [pc, #600]	; (1d848 <spi_nrfx_transceive+0x2ac>)
   1d5ee:	4618      	mov	r0, r3
   1d5f0:	f007 fc51 	bl	24e96 <log_from_user>
		return -EINVAL;
   1d5f4:	f06f 0515 	mvn.w	r5, #21
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   1d5f8:	6823      	ldr	r3, [r4, #0]
   1d5fa:	889b      	ldrh	r3, [r3, #4]
   1d5fc:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
   1d600:	d104      	bne.n	1d60c <spi_nrfx_transceive+0x70>
		ctx->owner = NULL;
   1d602:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   1d604:	f104 0008 	add.w	r0, r4, #8
   1d608:	f004 fcfc 	bl	22004 <z_impl_k_sem_give>
}
   1d60c:	4628      	mov	r0, r5
   1d60e:	b003      	add	sp, #12
   1d610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1d614:	6923      	ldr	r3, [r4, #16]
   1d616:	2b00      	cmp	r3, #0
   1d618:	d1ca      	bne.n	1d5b0 <spi_nrfx_transceive+0x14>
		(k_sem_count_get(&ctx->lock) == 0) &&
   1d61a:	6863      	ldr	r3, [r4, #4]
   1d61c:	4299      	cmp	r1, r3
   1d61e:	d1c7      	bne.n	1d5b0 <spi_nrfx_transceive+0x14>
   1d620:	e7cf      	b.n	1d5c2 <spi_nrfx_transceive+0x26>
		LOG_ERR("Slave mode is not supported on %s",
   1d622:	f8d8 1000 	ldr.w	r1, [r8]
   1d626:	4888      	ldr	r0, [pc, #544]	; (1d848 <spi_nrfx_transceive+0x2ac>)
   1d628:	461a      	mov	r2, r3
   1d62a:	f007 fc67 	bl	24efc <log_1>
	if (error == 0) {
   1d62e:	e7e1      	b.n	1d5f4 <spi_nrfx_transceive+0x58>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
   1d630:	0719      	lsls	r1, r3, #28
   1d632:	d513      	bpl.n	1d65c <spi_nrfx_transceive+0xc0>
   1d634:	f00b fc40 	bl	28eb8 <arch_is_user_context>
   1d638:	4b81      	ldr	r3, [pc, #516]	; (1d840 <spi_nrfx_transceive+0x2a4>)
   1d63a:	4a82      	ldr	r2, [pc, #520]	; (1d844 <spi_nrfx_transceive+0x2a8>)
   1d63c:	1a9b      	subs	r3, r3, r2
   1d63e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Loopback mode is not supported");
   1d640:	019b      	lsls	r3, r3, #6
   1d642:	f043 0301 	orr.w	r3, r3, #1
   1d646:	b120      	cbz	r0, 1d652 <spi_nrfx_transceive+0xb6>
   1d648:	4980      	ldr	r1, [pc, #512]	; (1d84c <spi_nrfx_transceive+0x2b0>)
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   1d64a:	4618      	mov	r0, r3
   1d64c:	f007 fc23 	bl	24e96 <log_from_user>
   1d650:	e7d0      	b.n	1d5f4 <spi_nrfx_transceive+0x58>
		LOG_ERR("Loopback mode is not supported");
   1d652:	487e      	ldr	r0, [pc, #504]	; (1d84c <spi_nrfx_transceive+0x2b0>)
   1d654:	4619      	mov	r1, r3
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   1d656:	f007 fc44 	bl	24ee2 <log_0>
   1d65a:	e7cb      	b.n	1d5f4 <spi_nrfx_transceive+0x58>
	if ((spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
   1d65c:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
   1d660:	d00e      	beq.n	1d680 <spi_nrfx_transceive+0xe4>
   1d662:	f00b fc29 	bl	28eb8 <arch_is_user_context>
   1d666:	4b76      	ldr	r3, [pc, #472]	; (1d840 <spi_nrfx_transceive+0x2a4>)
   1d668:	4a76      	ldr	r2, [pc, #472]	; (1d844 <spi_nrfx_transceive+0x2a8>)
   1d66a:	1a9b      	subs	r3, r3, r2
   1d66c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Only single line mode is supported");
   1d66e:	019b      	lsls	r3, r3, #6
   1d670:	f043 0301 	orr.w	r3, r3, #1
   1d674:	b108      	cbz	r0, 1d67a <spi_nrfx_transceive+0xde>
   1d676:	4976      	ldr	r1, [pc, #472]	; (1d850 <spi_nrfx_transceive+0x2b4>)
   1d678:	e7e7      	b.n	1d64a <spi_nrfx_transceive+0xae>
   1d67a:	4875      	ldr	r0, [pc, #468]	; (1d850 <spi_nrfx_transceive+0x2b4>)
   1d67c:	4619      	mov	r1, r3
   1d67e:	e7ea      	b.n	1d656 <spi_nrfx_transceive+0xba>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   1d680:	f3c3 1345 	ubfx	r3, r3, #5, #6
   1d684:	2b08      	cmp	r3, #8
   1d686:	d00e      	beq.n	1d6a6 <spi_nrfx_transceive+0x10a>
   1d688:	f00b fc16 	bl	28eb8 <arch_is_user_context>
   1d68c:	4b6c      	ldr	r3, [pc, #432]	; (1d840 <spi_nrfx_transceive+0x2a4>)
   1d68e:	4a6d      	ldr	r2, [pc, #436]	; (1d844 <spi_nrfx_transceive+0x2a8>)
   1d690:	1a9b      	subs	r3, r3, r2
   1d692:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Word sizes other than 8 bits"
   1d694:	019b      	lsls	r3, r3, #6
   1d696:	f043 0301 	orr.w	r3, r3, #1
   1d69a:	b108      	cbz	r0, 1d6a0 <spi_nrfx_transceive+0x104>
   1d69c:	496d      	ldr	r1, [pc, #436]	; (1d854 <spi_nrfx_transceive+0x2b8>)
   1d69e:	e7d4      	b.n	1d64a <spi_nrfx_transceive+0xae>
   1d6a0:	486c      	ldr	r0, [pc, #432]	; (1d854 <spi_nrfx_transceive+0x2b8>)
   1d6a2:	4619      	mov	r1, r3
   1d6a4:	e7d7      	b.n	1d656 <spi_nrfx_transceive+0xba>
	if (spi_cfg->frequency < 125000) {
   1d6a6:	6829      	ldr	r1, [r5, #0]
   1d6a8:	4b6b      	ldr	r3, [pc, #428]	; (1d858 <spi_nrfx_transceive+0x2bc>)
   1d6aa:	4299      	cmp	r1, r3
   1d6ac:	d80e      	bhi.n	1d6cc <spi_nrfx_transceive+0x130>
   1d6ae:	f00b fc03 	bl	28eb8 <arch_is_user_context>
   1d6b2:	4b63      	ldr	r3, [pc, #396]	; (1d840 <spi_nrfx_transceive+0x2a4>)
   1d6b4:	4a63      	ldr	r2, [pc, #396]	; (1d844 <spi_nrfx_transceive+0x2a8>)
   1d6b6:	1a9b      	subs	r3, r3, r2
   1d6b8:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   1d6ba:	019b      	lsls	r3, r3, #6
   1d6bc:	f043 0301 	orr.w	r3, r3, #1
   1d6c0:	b108      	cbz	r0, 1d6c6 <spi_nrfx_transceive+0x12a>
   1d6c2:	4966      	ldr	r1, [pc, #408]	; (1d85c <spi_nrfx_transceive+0x2c0>)
   1d6c4:	e7c1      	b.n	1d64a <spi_nrfx_transceive+0xae>
   1d6c6:	4865      	ldr	r0, [pc, #404]	; (1d85c <spi_nrfx_transceive+0x2c0>)
   1d6c8:	4619      	mov	r1, r3
   1d6ca:	e7c4      	b.n	1d656 <spi_nrfx_transceive+0xba>
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
   1d6cc:	68ab      	ldr	r3, [r5, #8]
	const nrfx_spi_t *spi = &get_dev_config(dev)->spi;
   1d6ce:	f8d8 9004 	ldr.w	r9, [r8, #4]
	ctx->config = spi_cfg;
   1d6d2:	6015      	str	r5, [r2, #0]
   1d6d4:	2b00      	cmp	r3, #0
   1d6d6:	d07c      	beq.n	1d7d2 <spi_nrfx_transceive+0x236>
   1d6d8:	6818      	ldr	r0, [r3, #0]
   1d6da:	2800      	cmp	r0, #0
   1d6dc:	d079      	beq.n	1d7d2 <spi_nrfx_transceive+0x236>
				   ctx->config->cs->gpio_dt_flags |
   1d6de:	f893 a009 	ldrb.w	sl, [r3, #9]
		gpio_pin_configure(ctx->config->cs->gpio_dev,
   1d6e2:	7a19      	ldrb	r1, [r3, #8]
	struct gpio_driver_data *data =
   1d6e4:	f8d0 b010 	ldr.w	fp, [r0, #16]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1d6e8:	f01a 0f01 	tst.w	sl, #1
   1d6ec:	bf0c      	ite	eq
   1d6ee:	f44a 5ab0 	orreq.w	sl, sl, #5632	; 0x1600
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1d6f2:	f48a 5ad0 	eorne.w	sl, sl, #6656	; 0x1a00
	return api->pin_configure(port, pin, flags);
   1d6f6:	6883      	ldr	r3, [r0, #8]
   1d6f8:	9101      	str	r1, [sp, #4]
   1d6fa:	681b      	ldr	r3, [r3, #0]
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1d6fc:	f42a 5280 	bic.w	r2, sl, #4096	; 0x1000
	return api->pin_configure(port, pin, flags);
   1d700:	4798      	blx	r3
	if (ret != 0) {
   1d702:	b960      	cbnz	r0, 1d71e <spi_nrfx_transceive+0x182>
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1d704:	9901      	ldr	r1, [sp, #4]
   1d706:	f8db 3000 	ldr.w	r3, [fp]
   1d70a:	2201      	movs	r2, #1
   1d70c:	fa02 f101 	lsl.w	r1, r2, r1
   1d710:	f01a 0f01 	tst.w	sl, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1d714:	bf14      	ite	ne
   1d716:	430b      	orrne	r3, r1
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1d718:	438b      	biceq	r3, r1
   1d71a:	f8cb 3000 	str.w	r3, [fp]
	nrf_spi_configure(spi->p_reg,
   1d71e:	88a9      	ldrh	r1, [r5, #4]
   1d720:	f8d9 2000 	ldr.w	r2, [r9]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1d724:	0788      	lsls	r0, r1, #30
   1d726:	f001 0304 	and.w	r3, r1, #4
   1d72a:	d566      	bpl.n	1d7fa <spi_nrfx_transceive+0x25e>
			return NRF_SPI_MODE_2;
   1d72c:	2b00      	cmp	r3, #0
   1d72e:	bf14      	ite	ne
   1d730:	2303      	movne	r3, #3
   1d732:	2302      	moveq	r3, #2
                                         nrf_spi_mode_t      spi_mode,
                                         nrf_spi_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPI_BIT_ORDER_MSB_FIRST ?
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
    switch (spi_mode)
   1d734:	2b02      	cmp	r3, #2
	if (operation & SPI_TRANSFER_LSB) {
   1d736:	f3c1 1100 	ubfx	r1, r1, #4, #1
   1d73a:	d062      	beq.n	1d802 <spi_nrfx_transceive+0x266>
   1d73c:	2b03      	cmp	r3, #3
   1d73e:	d063      	beq.n	1d808 <spi_nrfx_transceive+0x26c>
   1d740:	2b01      	cmp	r3, #1
   1d742:	d101      	bne.n	1d748 <spi_nrfx_transceive+0x1ac>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Leading    << SPI_CONFIG_CPHA_Pos);
        break;

    case NRF_SPI_MODE_1:
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
   1d744:	f041 0102 	orr.w	r1, r1, #2
	if (frequency < 250000) {
   1d748:	4b45      	ldr	r3, [pc, #276]	; (1d860 <spi_nrfx_transceive+0x2c4>)
    case NRF_SPI_MODE_3:
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Trailing   << SPI_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   1d74a:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
	nrf_spi_frequency_set(spi->p_reg,
   1d74e:	6829      	ldr	r1, [r5, #0]
	if (frequency < 250000) {
   1d750:	4299      	cmp	r1, r3
   1d752:	d95c      	bls.n	1d80e <spi_nrfx_transceive+0x272>
	} else if (frequency < 500000) {
   1d754:	4b43      	ldr	r3, [pc, #268]	; (1d864 <spi_nrfx_transceive+0x2c8>)
   1d756:	4299      	cmp	r1, r3
   1d758:	d95c      	bls.n	1d814 <spi_nrfx_transceive+0x278>
	} else if (frequency < 1000000) {
   1d75a:	4b43      	ldr	r3, [pc, #268]	; (1d868 <spi_nrfx_transceive+0x2cc>)
   1d75c:	4299      	cmp	r1, r3
   1d75e:	d95c      	bls.n	1d81a <spi_nrfx_transceive+0x27e>
	} else if (frequency < 2000000) {
   1d760:	4b42      	ldr	r3, [pc, #264]	; (1d86c <spi_nrfx_transceive+0x2d0>)
   1d762:	4299      	cmp	r1, r3
   1d764:	d95c      	bls.n	1d820 <spi_nrfx_transceive+0x284>
	} else if (frequency < 4000000) {
   1d766:	4b42      	ldr	r3, [pc, #264]	; (1d870 <spi_nrfx_transceive+0x2d4>)
   1d768:	4299      	cmp	r1, r3
   1d76a:	d95c      	bls.n	1d826 <spi_nrfx_transceive+0x28a>
		return NRF_SPI_FREQ_8M;
   1d76c:	4b41      	ldr	r3, [pc, #260]	; (1d874 <spi_nrfx_transceive+0x2d8>)
   1d76e:	4299      	cmp	r1, r3
   1d770:	bf34      	ite	cc
   1d772:	f04f 4180 	movcc.w	r1, #1073741824	; 0x40000000
   1d776:	f04f 4100 	movcs.w	r1, #2147483648	; 0x80000000
    p_reg->FREQUENCY = (uint32_t)frequency;
   1d77a:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
		dev_data->busy = true;
   1d77e:	2301      	movs	r3, #1
   1d780:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	if (tx_bufs) {
   1d784:	2f00      	cmp	r7, #0
   1d786:	d051      	beq.n	1d82c <spi_nrfx_transceive+0x290>
		ctx->current_tx = tx_bufs->buffers;
   1d788:	683b      	ldr	r3, [r7, #0]
		ctx->tx_count = tx_bufs->count;
   1d78a:	687a      	ldr	r2, [r7, #4]
		ctx->current_tx = tx_bufs->buffers;
   1d78c:	63e3      	str	r3, [r4, #60]	; 0x3c
		ctx->tx_count = tx_bufs->count;
   1d78e:	6422      	str	r2, [r4, #64]	; 0x40
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   1d790:	681a      	ldr	r2, [r3, #0]
		ctx->tx_len = ctx->current_tx->len / dfs;
   1d792:	685b      	ldr	r3, [r3, #4]
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   1d794:	64e2      	str	r2, [r4, #76]	; 0x4c
		ctx->tx_len = ctx->current_tx->len / dfs;
   1d796:	6523      	str	r3, [r4, #80]	; 0x50
	if (rx_bufs) {
   1d798:	2e00      	cmp	r6, #0
   1d79a:	d04c      	beq.n	1d836 <spi_nrfx_transceive+0x29a>
		ctx->current_rx = rx_bufs->buffers;
   1d79c:	6833      	ldr	r3, [r6, #0]
		ctx->rx_count = rx_bufs->count;
   1d79e:	6872      	ldr	r2, [r6, #4]
		ctx->current_rx = rx_bufs->buffers;
   1d7a0:	6463      	str	r3, [r4, #68]	; 0x44
		ctx->rx_count = rx_bufs->count;
   1d7a2:	64a2      	str	r2, [r4, #72]	; 0x48
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   1d7a4:	681a      	ldr	r2, [r3, #0]
		ctx->rx_len = ctx->current_rx->len / dfs;
   1d7a6:	685b      	ldr	r3, [r3, #4]
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   1d7a8:	6562      	str	r2, [r4, #84]	; 0x54
		ctx->rx_len = ctx->current_rx->len / dfs;
   1d7aa:	65a3      	str	r3, [r4, #88]	; 0x58
	ctx->sync_status = 0;
   1d7ac:	2200      	movs	r2, #0
   1d7ae:	63a2      	str	r2, [r4, #56]	; 0x38
	_spi_context_cs_control(ctx, on, false);
   1d7b0:	2101      	movs	r1, #1
   1d7b2:	4620      	mov	r0, r4
   1d7b4:	f00b fb9a 	bl	28eec <_spi_context_cs_control.isra.0>
		transfer_next_chunk(dev);
   1d7b8:	4640      	mov	r0, r8
   1d7ba:	f7ff feb1 	bl	1d520 <transfer_next_chunk>
	return z_impl_k_sem_take(sem, timeout);
   1d7be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d7c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d7c6:	f104 0020 	add.w	r0, r4, #32
   1d7ca:	f004 fc7d 	bl	220c8 <z_impl_k_sem_take>
	status = ctx->sync_status;
   1d7ce:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	return status;
   1d7d0:	e712      	b.n	1d5f8 <spi_nrfx_transceive+0x5c>
   1d7d2:	f00b fb71 	bl	28eb8 <arch_is_user_context>
   1d7d6:	4b1a      	ldr	r3, [pc, #104]	; (1d840 <spi_nrfx_transceive+0x2a4>)
   1d7d8:	4a1a      	ldr	r2, [pc, #104]	; (1d844 <spi_nrfx_transceive+0x2a8>)
   1d7da:	1a9b      	subs	r3, r3, r2
   1d7dc:	08db      	lsrs	r3, r3, #3
		LOG_INF("CS control inhibited (no GPIO device)");
   1d7de:	019b      	lsls	r3, r3, #6
   1d7e0:	f043 0303 	orr.w	r3, r3, #3
   1d7e4:	b120      	cbz	r0, 1d7f0 <spi_nrfx_transceive+0x254>
   1d7e6:	4924      	ldr	r1, [pc, #144]	; (1d878 <spi_nrfx_transceive+0x2dc>)
   1d7e8:	4618      	mov	r0, r3
   1d7ea:	f007 fb54 	bl	24e96 <log_from_user>
   1d7ee:	e796      	b.n	1d71e <spi_nrfx_transceive+0x182>
   1d7f0:	4821      	ldr	r0, [pc, #132]	; (1d878 <spi_nrfx_transceive+0x2dc>)
   1d7f2:	4619      	mov	r1, r3
   1d7f4:	f007 fb75 	bl	24ee2 <log_0>
   1d7f8:	e791      	b.n	1d71e <spi_nrfx_transceive+0x182>
			return NRF_SPI_MODE_0;
   1d7fa:	3b00      	subs	r3, #0
   1d7fc:	bf18      	it	ne
   1d7fe:	2301      	movne	r3, #1
   1d800:	e798      	b.n	1d734 <spi_nrfx_transceive+0x198>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   1d802:	f041 0104 	orr.w	r1, r1, #4
        break;
   1d806:	e79f      	b.n	1d748 <spi_nrfx_transceive+0x1ac>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   1d808:	f041 0106 	orr.w	r1, r1, #6
        break;
   1d80c:	e79c      	b.n	1d748 <spi_nrfx_transceive+0x1ac>
		return NRF_SPI_FREQ_125K;
   1d80e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   1d812:	e7b2      	b.n	1d77a <spi_nrfx_transceive+0x1de>
		return NRF_SPI_FREQ_250K;
   1d814:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   1d818:	e7af      	b.n	1d77a <spi_nrfx_transceive+0x1de>
		return NRF_SPI_FREQ_500K;
   1d81a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   1d81e:	e7ac      	b.n	1d77a <spi_nrfx_transceive+0x1de>
		return NRF_SPI_FREQ_1M;
   1d820:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   1d824:	e7a9      	b.n	1d77a <spi_nrfx_transceive+0x1de>
		return NRF_SPI_FREQ_2M;
   1d826:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   1d82a:	e7a6      	b.n	1d77a <spi_nrfx_transceive+0x1de>
		ctx->tx_count = 0;
   1d82c:	e9c4 770f 	strd	r7, r7, [r4, #60]	; 0x3c
		ctx->tx_len = 0;
   1d830:	e9c4 7713 	strd	r7, r7, [r4, #76]	; 0x4c
   1d834:	e7b0      	b.n	1d798 <spi_nrfx_transceive+0x1fc>
		ctx->rx_count = 0;
   1d836:	e9c4 6611 	strd	r6, r6, [r4, #68]	; 0x44
		ctx->rx_len = 0;
   1d83a:	e9c4 6615 	strd	r6, r6, [r4, #84]	; 0x54
   1d83e:	e7b5      	b.n	1d7ac <spi_nrfx_transceive+0x210>
   1d840:	0002a828 	.word	0x0002a828
   1d844:	0002a6d0 	.word	0x0002a6d0
   1d848:	0002e932 	.word	0x0002e932
   1d84c:	0002e954 	.word	0x0002e954
   1d850:	0002e973 	.word	0x0002e973
   1d854:	0002e996 	.word	0x0002e996
   1d858:	0001e847 	.word	0x0001e847
   1d85c:	0002e9c5 	.word	0x0002e9c5
   1d860:	0003d08f 	.word	0x0003d08f
   1d864:	0007a11f 	.word	0x0007a11f
   1d868:	000f423f 	.word	0x000f423f
   1d86c:	001e847f 	.word	0x001e847f
   1d870:	003d08ff 	.word	0x003d08ff
   1d874:	007a1200 	.word	0x007a1200
   1d878:	0002e9f6 	.word	0x0002e9f6

0001d87c <event_handler>:
{
   1d87c:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
   1d87e:	7803      	ldrb	r3, [r0, #0]
{
   1d880:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
   1d882:	2b00      	cmp	r3, #0
   1d884:	d160      	bne.n	1d948 <event_handler+0xcc>
	if (!ctx->tx_len) {
   1d886:	6d0b      	ldr	r3, [r1, #80]	; 0x50
   1d888:	b183      	cbz	r3, 1d8ac <event_handler+0x30>
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   1d88a:	6e0a      	ldr	r2, [r1, #96]	; 0x60
	if (len > ctx->tx_len) {
   1d88c:	429a      	cmp	r2, r3
   1d88e:	d92a      	bls.n	1d8e6 <event_handler+0x6a>
   1d890:	f00b fb12 	bl	28eb8 <arch_is_user_context>
   1d894:	4b2d      	ldr	r3, [pc, #180]	; (1d94c <event_handler+0xd0>)
   1d896:	4a2e      	ldr	r2, [pc, #184]	; (1d950 <event_handler+0xd4>)
   1d898:	1a9b      	subs	r3, r3, r2
   1d89a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Update exceeds current buffer");
   1d89c:	019b      	lsls	r3, r3, #6
   1d89e:	f043 0301 	orr.w	r3, r3, #1
   1d8a2:	b1d8      	cbz	r0, 1d8dc <event_handler+0x60>
   1d8a4:	492b      	ldr	r1, [pc, #172]	; (1d954 <event_handler+0xd8>)
   1d8a6:	4618      	mov	r0, r3
   1d8a8:	f007 faf5 	bl	24e96 <log_from_user>
	if (!ctx->rx_len) {
   1d8ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1d8ae:	b183      	cbz	r3, 1d8d2 <event_handler+0x56>
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   1d8b0:	6e22      	ldr	r2, [r4, #96]	; 0x60
	if (len > ctx->rx_len) {
   1d8b2:	429a      	cmp	r2, r3
   1d8b4:	d932      	bls.n	1d91c <event_handler+0xa0>
   1d8b6:	f00b faff 	bl	28eb8 <arch_is_user_context>
   1d8ba:	4b24      	ldr	r3, [pc, #144]	; (1d94c <event_handler+0xd0>)
   1d8bc:	4a24      	ldr	r2, [pc, #144]	; (1d950 <event_handler+0xd4>)
   1d8be:	1a9b      	subs	r3, r3, r2
   1d8c0:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Update exceeds current buffer");
   1d8c2:	019b      	lsls	r3, r3, #6
   1d8c4:	f043 0301 	orr.w	r3, r3, #1
   1d8c8:	b318      	cbz	r0, 1d912 <event_handler+0x96>
   1d8ca:	4922      	ldr	r1, [pc, #136]	; (1d954 <event_handler+0xd8>)
   1d8cc:	4618      	mov	r0, r3
   1d8ce:	f007 fae2 	bl	24e96 <log_from_user>
		transfer_next_chunk(dev_data->dev);
   1d8d2:	6de0      	ldr	r0, [r4, #92]	; 0x5c
}
   1d8d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
   1d8d8:	f7ff be22 	b.w	1d520 <transfer_next_chunk>
		LOG_ERR("Update exceeds current buffer");
   1d8dc:	481d      	ldr	r0, [pc, #116]	; (1d954 <event_handler+0xd8>)
   1d8de:	4619      	mov	r1, r3
   1d8e0:	f007 faff 	bl	24ee2 <log_0>
		return;
   1d8e4:	e7e2      	b.n	1d8ac <event_handler+0x30>
	ctx->tx_len -= len;
   1d8e6:	1a9b      	subs	r3, r3, r2
   1d8e8:	650b      	str	r3, [r1, #80]	; 0x50
	if (!ctx->tx_len) {
   1d8ea:	b963      	cbnz	r3, 1d906 <event_handler+0x8a>
		ctx->tx_count--;
   1d8ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   1d8ee:	3b01      	subs	r3, #1
   1d8f0:	640b      	str	r3, [r1, #64]	; 0x40
		if (ctx->tx_count) {
   1d8f2:	b163      	cbz	r3, 1d90e <event_handler+0x92>
			ctx->current_tx++;
   1d8f4:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   1d8f6:	f103 0208 	add.w	r2, r3, #8
   1d8fa:	63ca      	str	r2, [r1, #60]	; 0x3c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   1d8fc:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
   1d8fe:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   1d900:	64ca      	str	r2, [r1, #76]	; 0x4c
			ctx->tx_len = ctx->current_tx->len / dfs;
   1d902:	650b      	str	r3, [r1, #80]	; 0x50
   1d904:	e7d2      	b.n	1d8ac <event_handler+0x30>
	} else if (ctx->tx_buf) {
   1d906:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
   1d908:	2b00      	cmp	r3, #0
   1d90a:	d0cf      	beq.n	1d8ac <event_handler+0x30>
		ctx->tx_buf += dfs * len;
   1d90c:	4413      	add	r3, r2
   1d90e:	64e3      	str	r3, [r4, #76]	; 0x4c
   1d910:	e7cc      	b.n	1d8ac <event_handler+0x30>
		LOG_ERR("Update exceeds current buffer");
   1d912:	4810      	ldr	r0, [pc, #64]	; (1d954 <event_handler+0xd8>)
   1d914:	4619      	mov	r1, r3
   1d916:	f007 fae4 	bl	24ee2 <log_0>
		return;
   1d91a:	e7da      	b.n	1d8d2 <event_handler+0x56>
	ctx->rx_len -= len;
   1d91c:	1a9b      	subs	r3, r3, r2
   1d91e:	65a3      	str	r3, [r4, #88]	; 0x58
	if (!ctx->rx_len) {
   1d920:	b963      	cbnz	r3, 1d93c <event_handler+0xc0>
		ctx->rx_count--;
   1d922:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1d924:	3b01      	subs	r3, #1
   1d926:	64a3      	str	r3, [r4, #72]	; 0x48
		if (ctx->rx_count) {
   1d928:	b163      	cbz	r3, 1d944 <event_handler+0xc8>
			ctx->current_rx++;
   1d92a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1d92c:	f103 0208 	add.w	r2, r3, #8
   1d930:	6462      	str	r2, [r4, #68]	; 0x44
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   1d932:	689a      	ldr	r2, [r3, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
   1d934:	68db      	ldr	r3, [r3, #12]
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   1d936:	6562      	str	r2, [r4, #84]	; 0x54
			ctx->rx_len = ctx->current_rx->len / dfs;
   1d938:	65a3      	str	r3, [r4, #88]	; 0x58
   1d93a:	e7ca      	b.n	1d8d2 <event_handler+0x56>
	} else if (ctx->rx_buf) {
   1d93c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1d93e:	2b00      	cmp	r3, #0
   1d940:	d0c7      	beq.n	1d8d2 <event_handler+0x56>
		ctx->rx_buf += dfs * len;
   1d942:	4413      	add	r3, r2
   1d944:	6563      	str	r3, [r4, #84]	; 0x54
   1d946:	e7c4      	b.n	1d8d2 <event_handler+0x56>
}
   1d948:	bd10      	pop	{r4, pc}
   1d94a:	bf00      	nop
   1d94c:	0002a828 	.word	0x0002a828
   1d950:	0002a6d0 	.word	0x0002a6d0
   1d954:	0002ea1c 	.word	0x0002ea1c

0001d958 <copy_and_check>:
 * as syscall arguments.
 */
static struct spi_buf_set *copy_and_check(struct spi_buf_set *bufs,
					  struct spi_buf *buf_copy,
					  int writable)
{
   1d958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t i;

	if (bufs->count == 0) {
   1d95c:	6843      	ldr	r3, [r0, #4]
{
   1d95e:	b086      	sub	sp, #24
   1d960:	4604      	mov	r4, r0
   1d962:	4688      	mov	r8, r1
   1d964:	4616      	mov	r6, r2
	if (bufs->count == 0) {
   1d966:	b92b      	cbnz	r3, 1d974 <copy_and_check+0x1c>
		bufs->buffers = NULL;
   1d968:	6003      	str	r3, [r0, #0]
		return NULL;
   1d96a:	461c      	mov	r4, r3

		Z_OOPS(Z_SYSCALL_MEMORY(buf->buf, buf->len, writable));
	}

	return bufs;
}
   1d96c:	4620      	mov	r0, r4
   1d96e:	b006      	add	sp, #24
   1d970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return __builtin_mul_overflow(a, b, result);
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_mul_overflow(a, b, result);
   1d974:	00df      	lsls	r7, r3, #3
   1d976:	0f5b      	lsrs	r3, r3, #29
   1d978:	bf14      	ite	ne
   1d97a:	2501      	movne	r5, #1
   1d97c:	2500      	moveq	r5, #0
	Z_OOPS(Z_SYSCALL_MEMORY_ARRAY_READ(bufs->buffers,
   1d97e:	d06a      	beq.n	1da56 <copy_and_check+0xfe>
   1d980:	f00b fafb 	bl	28f7a <arch_is_user_context>
   1d984:	4d42      	ldr	r5, [pc, #264]	; (1da90 <copy_and_check+0x138>)
   1d986:	4b43      	ldr	r3, [pc, #268]	; (1da94 <copy_and_check+0x13c>)
   1d988:	1aed      	subs	r5, r5, r3
   1d98a:	08ed      	lsrs	r5, r5, #3
   1d98c:	01ad      	lsls	r5, r5, #6
   1d98e:	f045 0501 	orr.w	r5, r5, #1
   1d992:	b168      	cbz	r0, 1d9b0 <copy_and_check+0x58>
   1d994:	2308      	movs	r3, #8
   1d996:	9300      	str	r3, [sp, #0]
   1d998:	6863      	ldr	r3, [r4, #4]
   1d99a:	4a3f      	ldr	r2, [pc, #252]	; (1da98 <copy_and_check+0x140>)
   1d99c:	493f      	ldr	r1, [pc, #252]	; (1da9c <copy_and_check+0x144>)
   1d99e:	4628      	mov	r0, r5
   1d9a0:	f007 fa79 	bl	24e96 <log_from_user>
		Z_OOPS(Z_SYSCALL_MEMORY(buf->buf, buf->len, writable));
   1d9a4:	4b3e      	ldr	r3, [pc, #248]	; (1daa0 <copy_and_check+0x148>)
   1d9a6:	689b      	ldr	r3, [r3, #8]
   1d9a8:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   1d9ac:	f009 f856 	bl	26a5c <arch_syscall_oops>
	Z_OOPS(Z_SYSCALL_MEMORY_ARRAY_READ(bufs->buffers,
   1d9b0:	f8ad 5000 	strh.w	r5, [sp]
   1d9b4:	6862      	ldr	r2, [r4, #4]
   1d9b6:	4938      	ldr	r1, [pc, #224]	; (1da98 <copy_and_check+0x140>)
   1d9b8:	4838      	ldr	r0, [pc, #224]	; (1da9c <copy_and_check+0x144>)
   1d9ba:	2308      	movs	r3, #8
   1d9bc:	f007 facb 	bl	24f56 <log_3>
   1d9c0:	e7f0      	b.n	1d9a4 <copy_and_check+0x4c>
   1d9c2:	4a35      	ldr	r2, [pc, #212]	; (1da98 <copy_and_check+0x140>)
   1d9c4:	9202      	str	r2, [sp, #8]
   1d9c6:	6822      	ldr	r2, [r4, #0]
   1d9c8:	9305      	str	r3, [sp, #20]
   1d9ca:	e9cd 2703 	strd	r2, r7, [sp, #12]
   1d9ce:	462b      	mov	r3, r5
		Z_OOPS(Z_SYSCALL_MEMORY(buf->buf, buf->len, writable));
   1d9d0:	4834      	ldr	r0, [pc, #208]	; (1daa4 <copy_and_check+0x14c>)
   1d9d2:	2204      	movs	r2, #4
   1d9d4:	a902      	add	r1, sp, #8
   1d9d6:	f007 fada 	bl	24f8e <log_n>
   1d9da:	e7e3      	b.n	1d9a4 <copy_and_check+0x4c>
   1d9dc:	4a2e      	ldr	r2, [pc, #184]	; (1da98 <copy_and_check+0x140>)
   1d9de:	9104      	str	r1, [sp, #16]
   1d9e0:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1d9e4:	4b30      	ldr	r3, [pc, #192]	; (1daa8 <copy_and_check+0x150>)
   1d9e6:	4a31      	ldr	r2, [pc, #196]	; (1daac <copy_and_check+0x154>)
   1d9e8:	2e00      	cmp	r6, #0
   1d9ea:	bf0c      	ite	eq
   1d9ec:	4616      	moveq	r6, r2
   1d9ee:	461e      	movne	r6, r3
   1d9f0:	9605      	str	r6, [sp, #20]
   1d9f2:	4623      	mov	r3, r4
   1d9f4:	e7ec      	b.n	1d9d0 <copy_and_check+0x78>
	for (i = 0; i < bufs->count; i++) {
   1d9f6:	3501      	adds	r5, #1
   1d9f8:	6863      	ldr	r3, [r4, #4]
   1d9fa:	429d      	cmp	r5, r3
   1d9fc:	d2b6      	bcs.n	1d96c <copy_and_check+0x14>
		const struct spi_buf *buf = &bufs->buffers[i];
   1d9fe:	6823      	ldr	r3, [r4, #0]
   1da00:	eb03 07c5 	add.w	r7, r3, r5, lsl #3
		Z_OOPS(Z_SYSCALL_MEMORY(buf->buf, buf->len, writable));
   1da04:	f853 0035 	ldr.w	r0, [r3, r5, lsl #3]
   1da08:	6879      	ldr	r1, [r7, #4]
   1da0a:	4632      	mov	r2, r6
   1da0c:	f009 f84a 	bl	26aa4 <arch_buffer_validate>
   1da10:	2800      	cmp	r0, #0
   1da12:	d0f0      	beq.n	1d9f6 <copy_and_check+0x9e>
   1da14:	f00b fab1 	bl	28f7a <arch_is_user_context>
   1da18:	4c1d      	ldr	r4, [pc, #116]	; (1da90 <copy_and_check+0x138>)
   1da1a:	4b1e      	ldr	r3, [pc, #120]	; (1da94 <copy_and_check+0x13c>)
   1da1c:	1ae4      	subs	r4, r4, r3
   1da1e:	08e4      	lsrs	r4, r4, #3
   1da20:	01a4      	lsls	r4, r4, #6
   1da22:	e9d7 3100 	ldrd	r3, r1, [r7]
   1da26:	f044 0401 	orr.w	r4, r4, #1
   1da2a:	2800      	cmp	r0, #0
   1da2c:	d0d6      	beq.n	1d9dc <copy_and_check+0x84>
   1da2e:	4a1e      	ldr	r2, [pc, #120]	; (1daa8 <copy_and_check+0x150>)
   1da30:	481e      	ldr	r0, [pc, #120]	; (1daac <copy_and_check+0x154>)
   1da32:	2e00      	cmp	r6, #0
   1da34:	bf14      	ite	ne
   1da36:	4616      	movne	r6, r2
   1da38:	4606      	moveq	r6, r0
   1da3a:	e9cd 1600 	strd	r1, r6, [sp]
   1da3e:	4a16      	ldr	r2, [pc, #88]	; (1da98 <copy_and_check+0x140>)
   1da40:	4918      	ldr	r1, [pc, #96]	; (1daa4 <copy_and_check+0x14c>)
   1da42:	4620      	mov	r0, r4
   1da44:	e020      	b.n	1da88 <copy_and_check+0x130>
	bufs->buffers = memcpy(buf_copy,
   1da46:	6862      	ldr	r2, [r4, #4]
   1da48:	6821      	ldr	r1, [r4, #0]
   1da4a:	00d2      	lsls	r2, r2, #3
   1da4c:	4640      	mov	r0, r8
   1da4e:	f00c fcc7 	bl	2a3e0 <memcpy>
   1da52:	6020      	str	r0, [r4, #0]
	for (i = 0; i < bufs->count; i++) {
   1da54:	e7d0      	b.n	1d9f8 <copy_and_check+0xa0>
	Z_OOPS(Z_SYSCALL_MEMORY_ARRAY_READ(bufs->buffers,
   1da56:	6800      	ldr	r0, [r0, #0]
   1da58:	462a      	mov	r2, r5
   1da5a:	4639      	mov	r1, r7
   1da5c:	f009 f822 	bl	26aa4 <arch_buffer_validate>
   1da60:	2800      	cmp	r0, #0
   1da62:	d0f0      	beq.n	1da46 <copy_and_check+0xee>
   1da64:	f00b fa89 	bl	28f7a <arch_is_user_context>
   1da68:	4d09      	ldr	r5, [pc, #36]	; (1da90 <copy_and_check+0x138>)
   1da6a:	4b0a      	ldr	r3, [pc, #40]	; (1da94 <copy_and_check+0x13c>)
   1da6c:	1aed      	subs	r5, r5, r3
   1da6e:	08ed      	lsrs	r5, r5, #3
   1da70:	01ad      	lsls	r5, r5, #6
   1da72:	4b0e      	ldr	r3, [pc, #56]	; (1daac <copy_and_check+0x154>)
   1da74:	f045 0501 	orr.w	r5, r5, #1
   1da78:	2800      	cmp	r0, #0
   1da7a:	d0a2      	beq.n	1d9c2 <copy_and_check+0x6a>
   1da7c:	e9cd 7300 	strd	r7, r3, [sp]
   1da80:	4a05      	ldr	r2, [pc, #20]	; (1da98 <copy_and_check+0x140>)
   1da82:	6823      	ldr	r3, [r4, #0]
   1da84:	4907      	ldr	r1, [pc, #28]	; (1daa4 <copy_and_check+0x14c>)
   1da86:	4628      	mov	r0, r5
		Z_OOPS(Z_SYSCALL_MEMORY(buf->buf, buf->len, writable));
   1da88:	f007 fa05 	bl	24e96 <log_from_user>
   1da8c:	e78a      	b.n	1d9a4 <copy_and_check+0x4c>
   1da8e:	bf00      	nop
   1da90:	0002a810 	.word	0x0002a810
   1da94:	0002a6d0 	.word	0x0002a6d0
   1da98:	0002eaf6 	.word	0x0002eaf6
   1da9c:	0002ea4d 	.word	0x0002ea4d
   1daa0:	200023f4 	.word	0x200023f4
   1daa4:	0002c8a6 	.word	0x0002c8a6
   1daa8:	0002c903 	.word	0x0002c903
   1daac:	0002d10e 	.word	0x0002d10e

0001dab0 <z_mrsh_spi_transceive>:
#include <syscalls/spi.h>

extern int z_vrfy_spi_transceive(const struct device * dev, const struct spi_config * config, const struct spi_buf_set * tx_bufs, const struct spi_buf_set * rx_bufs);
uintptr_t z_mrsh_spi_transceive(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   1dab0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	_current->syscall_frame = ssf;
   1dab4:	4ca6      	ldr	r4, [pc, #664]	; (1dd50 <z_mrsh_spi_transceive+0x2a0>)
{
   1dab6:	b08f      	sub	sp, #60	; 0x3c
   1dab8:	af02      	add	r7, sp, #8
   1daba:	461e      	mov	r6, r3
	_current->syscall_frame = ssf;
   1dabc:	68a3      	ldr	r3, [r4, #8]
{
   1dabe:	4688      	mov	r8, r1
   1dac0:	4615      	mov	r5, r2
	_current->syscall_frame = ssf;
   1dac2:	6dba      	ldr	r2, [r7, #88]	; 0x58
   1dac4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
{
   1dac8:	4681      	mov	r9, r0
{
	struct spi_buf_set tx_bufs_copy;
	struct spi_buf_set rx_bufs_copy;
	struct spi_config config_copy;

	Z_OOPS(Z_SYSCALL_MEMORY_READ(config, sizeof(*config)));
   1daca:	2200      	movs	r2, #0
   1dacc:	210c      	movs	r1, #12
   1dace:	4640      	mov	r0, r8
   1dad0:	f008 ffe8 	bl	26aa4 <arch_buffer_validate>
   1dad4:	2800      	cmp	r0, #0
   1dad6:	f000 8113 	beq.w	1dd00 <z_mrsh_spi_transceive+0x250>
   1dada:	f00b fa4e 	bl	28f7a <arch_is_user_context>
   1dade:	4d9d      	ldr	r5, [pc, #628]	; (1dd54 <z_mrsh_spi_transceive+0x2a4>)
   1dae0:	4b9d      	ldr	r3, [pc, #628]	; (1dd58 <z_mrsh_spi_transceive+0x2a8>)
   1dae2:	1aed      	subs	r5, r5, r3
   1dae4:	08ed      	lsrs	r5, r5, #3
   1dae6:	01ad      	lsls	r5, r5, #6
   1dae8:	4b9c      	ldr	r3, [pc, #624]	; (1dd5c <z_mrsh_spi_transceive+0x2ac>)
   1daea:	f045 0501 	orr.w	r5, r5, #1
   1daee:	220c      	movs	r2, #12
   1daf0:	b130      	cbz	r0, 1db00 <z_mrsh_spi_transceive+0x50>
   1daf2:	e9cd 2300 	strd	r2, r3, [sp]
   1daf6:	4643      	mov	r3, r8

	memcpy(&config_copy, config, sizeof(*config));
	if (config_copy.cs) {
		const struct spi_cs_control *cs = config_copy.cs;

		Z_OOPS(Z_SYSCALL_MEMORY_READ(cs, sizeof(*cs)));
   1daf8:	4a99      	ldr	r2, [pc, #612]	; (1dd60 <z_mrsh_spi_transceive+0x2b0>)
   1dafa:	499a      	ldr	r1, [pc, #616]	; (1dd64 <z_mrsh_spi_transceive+0x2b4>)
   1dafc:	4628      	mov	r0, r5
   1dafe:	e028      	b.n	1db52 <z_mrsh_spi_transceive+0xa2>
	Z_OOPS(Z_SYSCALL_MEMORY_READ(config, sizeof(*config)));
   1db00:	4997      	ldr	r1, [pc, #604]	; (1dd60 <z_mrsh_spi_transceive+0x2b0>)
   1db02:	e9c7 1808 	strd	r1, r8, [r7, #32]
		Z_OOPS(Z_SYSCALL_MEMORY_READ(cs, sizeof(*cs)));
   1db06:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   1db0a:	462b      	mov	r3, r5
   1db0c:	e02a      	b.n	1db64 <z_mrsh_spi_transceive+0xb4>
	Z_OOPS(Z_SYSCALL_DRIVER_SPI(dev, transceive));
   1db0e:	460b      	mov	r3, r1
   1db10:	4a95      	ldr	r2, [pc, #596]	; (1dd68 <z_mrsh_spi_transceive+0x2b8>)
   1db12:	4993      	ldr	r1, [pc, #588]	; (1dd60 <z_mrsh_spi_transceive+0x2b0>)
   1db14:	4895      	ldr	r0, [pc, #596]	; (1dd6c <z_mrsh_spi_transceive+0x2bc>)
   1db16:	f8ad 5000 	strh.w	r5, [sp]
   1db1a:	f007 fa1c 	bl	24f56 <log_3>
   1db1e:	e112      	b.n	1dd46 <z_mrsh_spi_transceive+0x296>
		Z_OOPS(Z_SYSCALL_MEMORY_READ(tx_bufs,
   1db20:	2108      	movs	r1, #8
   1db22:	4628      	mov	r0, r5
   1db24:	f008 ffbe 	bl	26aa4 <arch_buffer_validate>
   1db28:	2800      	cmp	r0, #0
   1db2a:	f000 80af 	beq.w	1dc8c <z_mrsh_spi_transceive+0x1dc>
   1db2e:	f00b fa24 	bl	28f7a <arch_is_user_context>
   1db32:	4e88      	ldr	r6, [pc, #544]	; (1dd54 <z_mrsh_spi_transceive+0x2a4>)
   1db34:	4b88      	ldr	r3, [pc, #544]	; (1dd58 <z_mrsh_spi_transceive+0x2a8>)
   1db36:	1af6      	subs	r6, r6, r3
   1db38:	08f6      	lsrs	r6, r6, #3
   1db3a:	01b6      	lsls	r6, r6, #6
   1db3c:	4b87      	ldr	r3, [pc, #540]	; (1dd5c <z_mrsh_spi_transceive+0x2ac>)
   1db3e:	f046 0601 	orr.w	r6, r6, #1
   1db42:	2208      	movs	r2, #8
   1db44:	b140      	cbz	r0, 1db58 <z_mrsh_spi_transceive+0xa8>
   1db46:	e9cd 2300 	strd	r2, r3, [sp]
   1db4a:	4986      	ldr	r1, [pc, #536]	; (1dd64 <z_mrsh_spi_transceive+0x2b4>)
   1db4c:	4a84      	ldr	r2, [pc, #528]	; (1dd60 <z_mrsh_spi_transceive+0x2b0>)
   1db4e:	462b      	mov	r3, r5
   1db50:	4630      	mov	r0, r6
		Z_OOPS(Z_SYSCALL_MEMORY_READ(cs, sizeof(*cs)));
   1db52:	f007 f9a0 	bl	24e96 <log_from_user>
   1db56:	e0f6      	b.n	1dd46 <z_mrsh_spi_transceive+0x296>
		Z_OOPS(Z_SYSCALL_MEMORY_READ(tx_bufs,
   1db58:	4981      	ldr	r1, [pc, #516]	; (1dd60 <z_mrsh_spi_transceive+0x2b0>)
   1db5a:	e9c7 1508 	strd	r1, r5, [r7, #32]
   1db5e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   1db62:	4633      	mov	r3, r6
		Z_OOPS(Z_SYSCALL_MEMORY_READ(cs, sizeof(*cs)));
   1db64:	487f      	ldr	r0, [pc, #508]	; (1dd64 <z_mrsh_spi_transceive+0x2b4>)
   1db66:	2204      	movs	r2, #4
   1db68:	f107 0120 	add.w	r1, r7, #32
   1db6c:	f007 fa0f 	bl	24f8e <log_n>
   1db70:	e0e9      	b.n	1dd46 <z_mrsh_spi_transceive+0x296>
		Z_OOPS(Z_SYSCALL_VERIFY(tx_bufs_copy.count < 32));
   1db72:	497b      	ldr	r1, [pc, #492]	; (1dd60 <z_mrsh_spi_transceive+0x2b0>)
   1db74:	487e      	ldr	r0, [pc, #504]	; (1dd70 <z_mrsh_spi_transceive+0x2c0>)
   1db76:	461a      	mov	r2, r3
		if (cs->gpio_dev) {
			Z_OOPS(Z_SYSCALL_OBJ(cs->gpio_dev, K_OBJ_DRIVER_GPIO));
   1db78:	f007 f9c0 	bl	24efc <log_1>
   1db7c:	e0e3      	b.n	1dd46 <z_mrsh_spi_transceive+0x296>
		Z_OOPS(Z_SYSCALL_VERIFY(rx_bufs_copy.count < 32));
   1db7e:	4978      	ldr	r1, [pc, #480]	; (1dd60 <z_mrsh_spi_transceive+0x2b0>)
   1db80:	487c      	ldr	r0, [pc, #496]	; (1dd74 <z_mrsh_spi_transceive+0x2c4>)
   1db82:	461a      	mov	r2, r3
   1db84:	e7f8      	b.n	1db78 <z_mrsh_spi_transceive+0xc8>
		memset(&rx_bufs_copy, 0, sizeof(rx_bufs_copy));
   1db86:	e9c7 6603 	strd	r6, r6, [r7, #12]
	memcpy(&config_copy, config, sizeof(*config));
   1db8a:	f8d8 0000 	ldr.w	r0, [r8]
   1db8e:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1db92:	f107 0214 	add.w	r2, r7, #20
   1db96:	c203      	stmia	r2!, {r0, r1}
   1db98:	f8d8 0008 	ldr.w	r0, [r8, #8]
   1db9c:	6010      	str	r0, [r2, #0]
	if (config_copy.cs) {
   1db9e:	4606      	mov	r6, r0
   1dba0:	b378      	cbz	r0, 1dc02 <z_mrsh_spi_transceive+0x152>
		Z_OOPS(Z_SYSCALL_MEMORY_READ(cs, sizeof(*cs)));
   1dba2:	2200      	movs	r2, #0
   1dba4:	210c      	movs	r1, #12
   1dba6:	f008 ff7d 	bl	26aa4 <arch_buffer_validate>
   1dbaa:	b338      	cbz	r0, 1dbfc <z_mrsh_spi_transceive+0x14c>
   1dbac:	f00b f9e5 	bl	28f7a <arch_is_user_context>
   1dbb0:	4d68      	ldr	r5, [pc, #416]	; (1dd54 <z_mrsh_spi_transceive+0x2a4>)
   1dbb2:	4b69      	ldr	r3, [pc, #420]	; (1dd58 <z_mrsh_spi_transceive+0x2a8>)
   1dbb4:	1aed      	subs	r5, r5, r3
   1dbb6:	08ed      	lsrs	r5, r5, #3
   1dbb8:	01ad      	lsls	r5, r5, #6
   1dbba:	4b68      	ldr	r3, [pc, #416]	; (1dd5c <z_mrsh_spi_transceive+0x2ac>)
   1dbbc:	f045 0501 	orr.w	r5, r5, #1
   1dbc0:	220c      	movs	r2, #12
   1dbc2:	e096      	b.n	1dcf2 <z_mrsh_spi_transceive+0x242>
   1dbc4:	4966      	ldr	r1, [pc, #408]	; (1dd60 <z_mrsh_spi_transceive+0x2b0>)
   1dbc6:	e9c7 1608 	strd	r1, r6, [r7, #32]
   1dbca:	e79c      	b.n	1db06 <z_mrsh_spi_transceive+0x56>
			Z_OOPS(Z_SYSCALL_OBJ(cs->gpio_dev, K_OBJ_DRIVER_GPIO));
   1dbcc:	f7e2 fa98 	bl	100 <z_object_find>
   1dbd0:	6831      	ldr	r1, [r6, #0]
   1dbd2:	221e      	movs	r2, #30
   1dbd4:	f00b f9db 	bl	28f8e <z_obj_validation_check.constprop.0>
   1dbd8:	b198      	cbz	r0, 1dc02 <z_mrsh_spi_transceive+0x152>
   1dbda:	f00b f9ce 	bl	28f7a <arch_is_user_context>
   1dbde:	4b5d      	ldr	r3, [pc, #372]	; (1dd54 <z_mrsh_spi_transceive+0x2a4>)
   1dbe0:	4a5d      	ldr	r2, [pc, #372]	; (1dd58 <z_mrsh_spi_transceive+0x2a8>)
   1dbe2:	1a9b      	subs	r3, r3, r2
   1dbe4:	08db      	lsrs	r3, r3, #3
   1dbe6:	019b      	lsls	r3, r3, #6
   1dbe8:	f043 0301 	orr.w	r3, r3, #1
   1dbec:	b110      	cbz	r0, 1dbf4 <z_mrsh_spi_transceive+0x144>
   1dbee:	4a5c      	ldr	r2, [pc, #368]	; (1dd60 <z_mrsh_spi_transceive+0x2b0>)
   1dbf0:	4961      	ldr	r1, [pc, #388]	; (1dd78 <z_mrsh_spi_transceive+0x2c8>)
   1dbf2:	e060      	b.n	1dcb6 <z_mrsh_spi_transceive+0x206>
   1dbf4:	495a      	ldr	r1, [pc, #360]	; (1dd60 <z_mrsh_spi_transceive+0x2b0>)
   1dbf6:	4860      	ldr	r0, [pc, #384]	; (1dd78 <z_mrsh_spi_transceive+0x2c8>)
   1dbf8:	461a      	mov	r2, r3
   1dbfa:	e7bd      	b.n	1db78 <z_mrsh_spi_transceive+0xc8>
		if (cs->gpio_dev) {
   1dbfc:	6830      	ldr	r0, [r6, #0]
   1dbfe:	2800      	cmp	r0, #0
   1dc00:	d1e4      	bne.n	1dbcc <z_mrsh_spi_transceive+0x11c>
	struct spi_buf tx_buf_copy[tx_bufs->count ? tx_bufs->count : 1];
   1dc02:	68bb      	ldr	r3, [r7, #8]
   1dc04:	2b01      	cmp	r3, #1
   1dc06:	466a      	mov	r2, sp
   1dc08:	bf38      	it	cc
   1dc0a:	2301      	movcc	r3, #1
   1dc0c:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
   1dc10:	469d      	mov	sp, r3
	struct spi_buf rx_buf_copy[rx_bufs->count ? rx_bufs->count : 1];
   1dc12:	693b      	ldr	r3, [r7, #16]
   1dc14:	2b01      	cmp	r3, #1
   1dc16:	bf38      	it	cc
   1dc18:	2301      	movcc	r3, #1
   1dc1a:	466a      	mov	r2, sp
   1dc1c:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
	struct spi_buf tx_buf_copy[tx_bufs->count ? tx_bufs->count : 1];
   1dc20:	a902      	add	r1, sp, #8
	tx_bufs = copy_and_check(tx_bufs, tx_buf_copy, 0);
   1dc22:	2200      	movs	r2, #0
	struct spi_buf rx_buf_copy[rx_bufs->count ? rx_bufs->count : 1];
   1dc24:	469d      	mov	sp, r3
	tx_bufs = copy_and_check(tx_bufs, tx_buf_copy, 0);
   1dc26:	1d38      	adds	r0, r7, #4
   1dc28:	f7ff fe96 	bl	1d958 <copy_and_check>
	struct spi_buf rx_buf_copy[rx_bufs->count ? rx_bufs->count : 1];
   1dc2c:	ae02      	add	r6, sp, #8
	tx_bufs = copy_and_check(tx_bufs, tx_buf_copy, 0);
   1dc2e:	4605      	mov	r5, r0
	rx_bufs = copy_and_check(rx_bufs, rx_buf_copy, 1);
   1dc30:	4631      	mov	r1, r6
   1dc32:	2201      	movs	r2, #1
   1dc34:	f107 000c 	add.w	r0, r7, #12
   1dc38:	f7ff fe8e 	bl	1d958 <copy_and_check>
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
   1dc3c:	f8d9 2008 	ldr.w	r2, [r9, #8]
   1dc40:	4603      	mov	r3, r0
   1dc42:	6816      	ldr	r6, [r2, #0]
   1dc44:	f107 0114 	add.w	r1, r7, #20
   1dc48:	462a      	mov	r2, r5
   1dc4a:	4648      	mov	r0, r9
   1dc4c:	47b0      	blx	r6
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	int ret = z_vrfy_spi_transceive(*(const struct device **)&arg0, *(const struct spi_config **)&arg1, *(const struct spi_buf_set **)&arg2, *(const struct spi_buf_set **)&arg3)
;
	_current->syscall_frame = NULL;
   1dc4e:	68a3      	ldr	r3, [r4, #8]
   1dc50:	2200      	movs	r2, #0
	return (uintptr_t) ret;
}
   1dc52:	3734      	adds	r7, #52	; 0x34
	_current->syscall_frame = NULL;
   1dc54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
   1dc58:	46bd      	mov	sp, r7
   1dc5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		memcpy(&rx_bufs_copy, rx, sizeof(rx_bufs_copy));
   1dc5e:	6830      	ldr	r0, [r6, #0]
   1dc60:	6871      	ldr	r1, [r6, #4]
   1dc62:	f107 030c 	add.w	r3, r7, #12
   1dc66:	c303      	stmia	r3!, {r0, r1}
		Z_OOPS(Z_SYSCALL_VERIFY(rx_bufs_copy.count < 32));
   1dc68:	693b      	ldr	r3, [r7, #16]
   1dc6a:	2b1f      	cmp	r3, #31
   1dc6c:	d98d      	bls.n	1db8a <z_mrsh_spi_transceive+0xda>
   1dc6e:	f00b f984 	bl	28f7a <arch_is_user_context>
   1dc72:	4b38      	ldr	r3, [pc, #224]	; (1dd54 <z_mrsh_spi_transceive+0x2a4>)
   1dc74:	4a38      	ldr	r2, [pc, #224]	; (1dd58 <z_mrsh_spi_transceive+0x2a8>)
   1dc76:	1a9b      	subs	r3, r3, r2
   1dc78:	08db      	lsrs	r3, r3, #3
   1dc7a:	019b      	lsls	r3, r3, #6
   1dc7c:	f043 0301 	orr.w	r3, r3, #1
   1dc80:	2800      	cmp	r0, #0
   1dc82:	f43f af7c 	beq.w	1db7e <z_mrsh_spi_transceive+0xce>
   1dc86:	4a36      	ldr	r2, [pc, #216]	; (1dd60 <z_mrsh_spi_transceive+0x2b0>)
   1dc88:	493a      	ldr	r1, [pc, #232]	; (1dd74 <z_mrsh_spi_transceive+0x2c4>)
   1dc8a:	e014      	b.n	1dcb6 <z_mrsh_spi_transceive+0x206>
		memcpy(&tx_bufs_copy, tx, sizeof(tx_bufs_copy));
   1dc8c:	6828      	ldr	r0, [r5, #0]
   1dc8e:	6869      	ldr	r1, [r5, #4]
   1dc90:	1d3b      	adds	r3, r7, #4
   1dc92:	c303      	stmia	r3!, {r0, r1}
		Z_OOPS(Z_SYSCALL_VERIFY(tx_bufs_copy.count < 32));
   1dc94:	68bb      	ldr	r3, [r7, #8]
   1dc96:	2b1f      	cmp	r3, #31
   1dc98:	d916      	bls.n	1dcc8 <z_mrsh_spi_transceive+0x218>
   1dc9a:	f00b f96e 	bl	28f7a <arch_is_user_context>
   1dc9e:	4b2d      	ldr	r3, [pc, #180]	; (1dd54 <z_mrsh_spi_transceive+0x2a4>)
   1dca0:	4a2d      	ldr	r2, [pc, #180]	; (1dd58 <z_mrsh_spi_transceive+0x2a8>)
   1dca2:	1a9b      	subs	r3, r3, r2
   1dca4:	08db      	lsrs	r3, r3, #3
   1dca6:	019b      	lsls	r3, r3, #6
   1dca8:	f043 0301 	orr.w	r3, r3, #1
   1dcac:	2800      	cmp	r0, #0
   1dcae:	f43f af60 	beq.w	1db72 <z_mrsh_spi_transceive+0xc2>
   1dcb2:	4a2b      	ldr	r2, [pc, #172]	; (1dd60 <z_mrsh_spi_transceive+0x2b0>)
   1dcb4:	492e      	ldr	r1, [pc, #184]	; (1dd70 <z_mrsh_spi_transceive+0x2c0>)
			Z_OOPS(Z_SYSCALL_OBJ(cs->gpio_dev, K_OBJ_DRIVER_GPIO));
   1dcb6:	4618      	mov	r0, r3
   1dcb8:	f007 f8ed 	bl	24e96 <log_from_user>
   1dcbc:	e043      	b.n	1dd46 <z_mrsh_spi_transceive+0x296>
	if (tx_bufs) {
   1dcbe:	2d00      	cmp	r5, #0
   1dcc0:	f47f af2e 	bne.w	1db20 <z_mrsh_spi_transceive+0x70>
		memset(&tx_bufs_copy, 0, sizeof(tx_bufs_copy));
   1dcc4:	e9c7 5501 	strd	r5, r5, [r7, #4]
	if (rx_bufs) {
   1dcc8:	2e00      	cmp	r6, #0
   1dcca:	f43f af5c 	beq.w	1db86 <z_mrsh_spi_transceive+0xd6>
		Z_OOPS(Z_SYSCALL_MEMORY_READ(rx_bufs,
   1dcce:	2200      	movs	r2, #0
   1dcd0:	2108      	movs	r1, #8
   1dcd2:	4630      	mov	r0, r6
   1dcd4:	f008 fee6 	bl	26aa4 <arch_buffer_validate>
   1dcd8:	2800      	cmp	r0, #0
   1dcda:	d0c0      	beq.n	1dc5e <z_mrsh_spi_transceive+0x1ae>
   1dcdc:	f00b f94d 	bl	28f7a <arch_is_user_context>
   1dce0:	4d1c      	ldr	r5, [pc, #112]	; (1dd54 <z_mrsh_spi_transceive+0x2a4>)
   1dce2:	4b1d      	ldr	r3, [pc, #116]	; (1dd58 <z_mrsh_spi_transceive+0x2a8>)
   1dce4:	1aed      	subs	r5, r5, r3
   1dce6:	08ed      	lsrs	r5, r5, #3
   1dce8:	01ad      	lsls	r5, r5, #6
   1dcea:	4b1c      	ldr	r3, [pc, #112]	; (1dd5c <z_mrsh_spi_transceive+0x2ac>)
   1dcec:	f045 0501 	orr.w	r5, r5, #1
   1dcf0:	2208      	movs	r2, #8
		Z_OOPS(Z_SYSCALL_MEMORY_READ(cs, sizeof(*cs)));
   1dcf2:	2800      	cmp	r0, #0
   1dcf4:	f43f af66 	beq.w	1dbc4 <z_mrsh_spi_transceive+0x114>
   1dcf8:	e9cd 2300 	strd	r2, r3, [sp]
   1dcfc:	4633      	mov	r3, r6
   1dcfe:	e6fb      	b.n	1daf8 <z_mrsh_spi_transceive+0x48>
	Z_OOPS(Z_SYSCALL_DRIVER_SPI(dev, transceive));
   1dd00:	4648      	mov	r0, r9
   1dd02:	f7e2 f9fd 	bl	100 <z_object_find>
   1dd06:	222a      	movs	r2, #42	; 0x2a
   1dd08:	4649      	mov	r1, r9
   1dd0a:	f00b f940 	bl	28f8e <z_obj_validation_check.constprop.0>
   1dd0e:	4602      	mov	r2, r0
   1dd10:	2800      	cmp	r0, #0
   1dd12:	f47f af62 	bne.w	1dbda <z_mrsh_spi_transceive+0x12a>
   1dd16:	f8d9 1008 	ldr.w	r1, [r9, #8]
   1dd1a:	680b      	ldr	r3, [r1, #0]
   1dd1c:	2b00      	cmp	r3, #0
   1dd1e:	d1ce      	bne.n	1dcbe <z_mrsh_spi_transceive+0x20e>
   1dd20:	f00b f92b 	bl	28f7a <arch_is_user_context>
   1dd24:	4d0b      	ldr	r5, [pc, #44]	; (1dd54 <z_mrsh_spi_transceive+0x2a4>)
   1dd26:	4b0c      	ldr	r3, [pc, #48]	; (1dd58 <z_mrsh_spi_transceive+0x2a8>)
   1dd28:	1aed      	subs	r5, r5, r3
   1dd2a:	08ed      	lsrs	r5, r5, #3
   1dd2c:	01ad      	lsls	r5, r5, #6
   1dd2e:	f045 0501 	orr.w	r5, r5, #1
   1dd32:	2800      	cmp	r0, #0
   1dd34:	f43f aeeb 	beq.w	1db0e <z_mrsh_spi_transceive+0x5e>
   1dd38:	9100      	str	r1, [sp, #0]
   1dd3a:	4b0b      	ldr	r3, [pc, #44]	; (1dd68 <z_mrsh_spi_transceive+0x2b8>)
   1dd3c:	4a08      	ldr	r2, [pc, #32]	; (1dd60 <z_mrsh_spi_transceive+0x2b0>)
   1dd3e:	490b      	ldr	r1, [pc, #44]	; (1dd6c <z_mrsh_spi_transceive+0x2bc>)
   1dd40:	4628      	mov	r0, r5
   1dd42:	f007 f8a8 	bl	24e96 <log_from_user>
			Z_OOPS(Z_SYSCALL_OBJ(cs->gpio_dev, K_OBJ_DRIVER_GPIO));
   1dd46:	68a3      	ldr	r3, [r4, #8]
   1dd48:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   1dd4c:	f008 fe86 	bl	26a5c <arch_syscall_oops>
   1dd50:	200023f4 	.word	0x200023f4
   1dd54:	0002a810 	.word	0x0002a810
   1dd58:	0002a6d0 	.word	0x0002a6d0
   1dd5c:	0002d10e 	.word	0x0002d10e
   1dd60:	0002eb05 	.word	0x0002eb05
   1dd64:	0002c8a6 	.word	0x0002c8a6
   1dd68:	0002ea81 	.word	0x0002ea81
   1dd6c:	0002e762 	.word	0x0002e762
   1dd70:	0002ea8c 	.word	0x0002ea8c
   1dd74:	0002eabd 	.word	0x0002eabd
   1dd78:	0002e72d 	.word	0x0002e72d

0001dd7c <z_mrsh_spi_release>:
#include <syscalls/spi.h>

extern int z_vrfy_spi_release(const struct device * dev, const struct spi_config * config);
uintptr_t z_mrsh_spi_release(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   1dd7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_current->syscall_frame = ssf;
   1dd80:	f8df 8120 	ldr.w	r8, [pc, #288]	; 1dea4 <z_mrsh_spi_release+0x128>
{
   1dd84:	b086      	sub	sp, #24
	_current->syscall_frame = ssf;
   1dd86:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1dd8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1dd8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
{
   1dd90:	460e      	mov	r6, r1
   1dd92:	4604      	mov	r4, r0
#include <syscalls/spi_transceive_mrsh.c>

static inline int z_vrfy_spi_release(const struct device *dev,
				     const struct spi_config *config)
{
	Z_OOPS(Z_SYSCALL_MEMORY_READ(config, sizeof(*config)));
   1dd94:	2200      	movs	r2, #0
   1dd96:	210c      	movs	r1, #12
   1dd98:	4630      	mov	r0, r6
   1dd9a:	f008 fe83 	bl	26aa4 <arch_buffer_validate>
   1dd9e:	4645      	mov	r5, r8
   1dda0:	2800      	cmp	r0, #0
   1dda2:	d054      	beq.n	1de4e <z_mrsh_spi_release+0xd2>
   1dda4:	f00b f8e9 	bl	28f7a <arch_is_user_context>
   1dda8:	4c36      	ldr	r4, [pc, #216]	; (1de84 <z_mrsh_spi_release+0x108>)
   1ddaa:	4b37      	ldr	r3, [pc, #220]	; (1de88 <z_mrsh_spi_release+0x10c>)
   1ddac:	1ae4      	subs	r4, r4, r3
   1ddae:	08e4      	lsrs	r4, r4, #3
   1ddb0:	01a4      	lsls	r4, r4, #6
   1ddb2:	4b36      	ldr	r3, [pc, #216]	; (1de8c <z_mrsh_spi_release+0x110>)
   1ddb4:	f044 0401 	orr.w	r4, r4, #1
   1ddb8:	220c      	movs	r2, #12
   1ddba:	b160      	cbz	r0, 1ddd6 <z_mrsh_spi_release+0x5a>
   1ddbc:	e9cd 2300 	strd	r2, r3, [sp]
   1ddc0:	4933      	ldr	r1, [pc, #204]	; (1de90 <z_mrsh_spi_release+0x114>)
   1ddc2:	4a34      	ldr	r2, [pc, #208]	; (1de94 <z_mrsh_spi_release+0x118>)
   1ddc4:	4633      	mov	r3, r6
   1ddc6:	4620      	mov	r0, r4
   1ddc8:	f007 f865 	bl	24e96 <log_from_user>
	Z_OOPS(Z_SYSCALL_DRIVER_SPI(dev, release));
   1ddcc:	68ab      	ldr	r3, [r5, #8]
   1ddce:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   1ddd2:	f008 fe43 	bl	26a5c <arch_syscall_oops>
	Z_OOPS(Z_SYSCALL_MEMORY_READ(config, sizeof(*config)));
   1ddd6:	492f      	ldr	r1, [pc, #188]	; (1de94 <z_mrsh_spi_release+0x118>)
   1ddd8:	482d      	ldr	r0, [pc, #180]	; (1de90 <z_mrsh_spi_release+0x114>)
   1ddda:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1ddde:	e9cd 1602 	strd	r1, r6, [sp, #8]
   1dde2:	4623      	mov	r3, r4
   1dde4:	2204      	movs	r2, #4
   1dde6:	a902      	add	r1, sp, #8
   1dde8:	f007 f8d1 	bl	24f8e <log_n>
   1ddec:	e7ee      	b.n	1ddcc <z_mrsh_spi_release+0x50>
	Z_OOPS(Z_SYSCALL_DRIVER_SPI(dev, release));
   1ddee:	4929      	ldr	r1, [pc, #164]	; (1de94 <z_mrsh_spi_release+0x118>)
   1ddf0:	4829      	ldr	r0, [pc, #164]	; (1de98 <z_mrsh_spi_release+0x11c>)
   1ddf2:	461a      	mov	r2, r3
   1ddf4:	f007 f882 	bl	24efc <log_1>
   1ddf8:	e7e8      	b.n	1ddcc <z_mrsh_spi_release+0x50>
   1ddfa:	4613      	mov	r3, r2
   1ddfc:	4925      	ldr	r1, [pc, #148]	; (1de94 <z_mrsh_spi_release+0x118>)
   1ddfe:	4a27      	ldr	r2, [pc, #156]	; (1de9c <z_mrsh_spi_release+0x120>)
   1de00:	4827      	ldr	r0, [pc, #156]	; (1dea0 <z_mrsh_spi_release+0x124>)
   1de02:	f8ad 4000 	strh.w	r4, [sp]
   1de06:	f007 f8a6 	bl	24f56 <log_3>
   1de0a:	e7df      	b.n	1ddcc <z_mrsh_spi_release+0x50>
				     const struct spi_config *config)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->release(dev, config);
   1de0c:	4631      	mov	r1, r6
   1de0e:	4620      	mov	r0, r4
   1de10:	4798      	blx	r3
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	int ret = z_vrfy_spi_release(*(const struct device **)&arg0, *(const struct spi_config **)&arg1)
;
	_current->syscall_frame = NULL;
   1de12:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1de16:	f8c3 7084 	str.w	r7, [r3, #132]	; 0x84
	return (uintptr_t) ret;
}
   1de1a:	b006      	add	sp, #24
   1de1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1de20:	68a2      	ldr	r2, [r4, #8]
   1de22:	6853      	ldr	r3, [r2, #4]
   1de24:	2b00      	cmp	r3, #0
   1de26:	d1f1      	bne.n	1de0c <z_mrsh_spi_release+0x90>
   1de28:	f00b f8a7 	bl	28f7a <arch_is_user_context>
   1de2c:	4c15      	ldr	r4, [pc, #84]	; (1de84 <z_mrsh_spi_release+0x108>)
   1de2e:	4b16      	ldr	r3, [pc, #88]	; (1de88 <z_mrsh_spi_release+0x10c>)
   1de30:	1ae4      	subs	r4, r4, r3
   1de32:	08e4      	lsrs	r4, r4, #3
   1de34:	01a4      	lsls	r4, r4, #6
   1de36:	f044 0401 	orr.w	r4, r4, #1
   1de3a:	2800      	cmp	r0, #0
   1de3c:	d0dd      	beq.n	1ddfa <z_mrsh_spi_release+0x7e>
   1de3e:	9200      	str	r2, [sp, #0]
   1de40:	4b16      	ldr	r3, [pc, #88]	; (1de9c <z_mrsh_spi_release+0x120>)
   1de42:	4a14      	ldr	r2, [pc, #80]	; (1de94 <z_mrsh_spi_release+0x118>)
   1de44:	4916      	ldr	r1, [pc, #88]	; (1dea0 <z_mrsh_spi_release+0x124>)
   1de46:	4620      	mov	r0, r4
   1de48:	f007 f825 	bl	24e96 <log_from_user>
   1de4c:	e7be      	b.n	1ddcc <z_mrsh_spi_release+0x50>
   1de4e:	4620      	mov	r0, r4
   1de50:	f7e2 f956 	bl	100 <z_object_find>
   1de54:	222a      	movs	r2, #42	; 0x2a
   1de56:	4621      	mov	r1, r4
   1de58:	f00b f899 	bl	28f8e <z_obj_validation_check.constprop.0>
   1de5c:	4607      	mov	r7, r0
   1de5e:	2800      	cmp	r0, #0
   1de60:	d0de      	beq.n	1de20 <z_mrsh_spi_release+0xa4>
   1de62:	f00b f88a 	bl	28f7a <arch_is_user_context>
   1de66:	4b07      	ldr	r3, [pc, #28]	; (1de84 <z_mrsh_spi_release+0x108>)
   1de68:	4a07      	ldr	r2, [pc, #28]	; (1de88 <z_mrsh_spi_release+0x10c>)
   1de6a:	1a9b      	subs	r3, r3, r2
   1de6c:	08db      	lsrs	r3, r3, #3
   1de6e:	019b      	lsls	r3, r3, #6
   1de70:	f043 0301 	orr.w	r3, r3, #1
   1de74:	2800      	cmp	r0, #0
   1de76:	d0ba      	beq.n	1ddee <z_mrsh_spi_release+0x72>
   1de78:	4a06      	ldr	r2, [pc, #24]	; (1de94 <z_mrsh_spi_release+0x118>)
   1de7a:	4907      	ldr	r1, [pc, #28]	; (1de98 <z_mrsh_spi_release+0x11c>)
   1de7c:	4618      	mov	r0, r3
   1de7e:	f007 f80a 	bl	24e96 <log_from_user>
   1de82:	e7a3      	b.n	1ddcc <z_mrsh_spi_release+0x50>
   1de84:	0002a810 	.word	0x0002a810
   1de88:	0002a6d0 	.word	0x0002a6d0
   1de8c:	0002d10e 	.word	0x0002d10e
   1de90:	0002c8a6 	.word	0x0002c8a6
   1de94:	0002eb1b 	.word	0x0002eb1b
   1de98:	0002e72d 	.word	0x0002e72d
   1de9c:	0002eaee 	.word	0x0002eaee
   1dea0:	0002e762 	.word	0x0002e762
   1dea4:	200023f4 	.word	0x200023f4

0001dea8 <timer_callback>:
	return k_work_submit_to_queue(&k_sys_work_q, work);
   1dea8:	4901      	ldr	r1, [pc, #4]	; (1deb0 <timer_callback+0x8>)
   1deaa:	4802      	ldr	r0, [pc, #8]	; (1deb4 <timer_callback+0xc>)
   1deac:	f00b bea5 	b.w	29bfa <k_work_submit_to_queue>
   1deb0:	20007c00 	.word	0x20007c00
   1deb4:	20000ac0 	.word	0x20000ac0

0001deb8 <RtcGetTimerElapsedTime>:
{
	return k_uptime_get_32();
}

uint32_t RtcGetTimerElapsedTime(void)
{
   1deb8:	b508      	push	{r3, lr}
	return (uint32_t)k_uptime_get();
   1deba:	f00b f87b 	bl	28fb4 <k_uptime_get>
	return (k_uptime_get_32() - saved_time);
   1debe:	4b02      	ldr	r3, [pc, #8]	; (1dec8 <RtcGetTimerElapsedTime+0x10>)
   1dec0:	681b      	ldr	r3, [r3, #0]
}
   1dec2:	1ac0      	subs	r0, r0, r3
   1dec4:	bd08      	pop	{r3, pc}
   1dec6:	bf00      	nop
   1dec8:	2000206c 	.word	0x2000206c

0001decc <RtcStopAlarm>:
	z_impl_k_timer_stop(timer);
   1decc:	4801      	ldr	r0, [pc, #4]	; (1ded4 <RtcStopAlarm+0x8>)
   1dece:	f00b bf8b 	b.w	29de8 <z_impl_k_timer_stop>
   1ded2:	bf00      	nop
   1ded4:	20007dc0 	.word	0x20007dc0

0001ded8 <RtcSetAlarm>:
{
	k_timer_stop(&lora_timer);
}

void RtcSetAlarm(uint32_t timeout)
{
   1ded8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1deda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1dede:	f240 34e7 	movw	r4, #999	; 0x3e7
   1dee2:	2500      	movs	r5, #0
   1dee4:	fbe1 4500 	umlal	r4, r5, r1, r0
   1dee8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1deec:	2300      	movs	r3, #0
   1deee:	4620      	mov	r0, r4
   1def0:	4629      	mov	r1, r5
   1def2:	f7e2 fe23 	bl	b3c <__aeabi_uldivmod>
   1def6:	4602      	mov	r2, r0
   1def8:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   1defa:	2100      	movs	r1, #0
   1defc:	2000      	movs	r0, #0
   1defe:	e9cd 0100 	strd	r0, r1, [sp]
   1df02:	4802      	ldr	r0, [pc, #8]	; (1df0c <RtcSetAlarm+0x34>)
   1df04:	f005 f928 	bl	23158 <z_impl_k_timer_start>
	k_timer_start(&lora_timer, K_MSEC(timeout), K_NO_WAIT);
}
   1df08:	b003      	add	sp, #12
   1df0a:	bd30      	pop	{r4, r5, pc}
   1df0c:	20007dc0 	.word	0x20007dc0

0001df10 <RtcSetTimerContext>:

uint32_t RtcSetTimerContext(void)
{
   1df10:	b508      	push	{r3, lr}
   1df12:	f00b f84f 	bl	28fb4 <k_uptime_get>
	saved_time = k_uptime_get_32();
   1df16:	4b01      	ldr	r3, [pc, #4]	; (1df1c <RtcSetTimerContext+0xc>)
   1df18:	6018      	str	r0, [r3, #0]

	return saved_time;
}
   1df1a:	bd08      	pop	{r3, pc}
   1df1c:	2000206c 	.word	0x2000206c

0001df20 <RtcGetTimerContext>:

/* For us, 1 tick = 1 milli second. So no need to do any conversion here */
uint32_t RtcGetTimerContext(void)
{
	return saved_time;
}
   1df20:	4b01      	ldr	r3, [pc, #4]	; (1df28 <RtcGetTimerContext+0x8>)
   1df22:	6818      	ldr	r0, [r3, #0]
   1df24:	4770      	bx	lr
   1df26:	bf00      	nop
   1df28:	2000206c 	.word	0x2000206c

0001df2c <sx12xx_ev_tx_done>:
	k_sem_give(&dev_data.data_sem);
}

static void sx12xx_ev_tx_done(void)
{
	Radio.Sleep();
   1df2c:	4b01      	ldr	r3, [pc, #4]	; (1df34 <sx12xx_ev_tx_done+0x8>)
   1df2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1df30:	4718      	bx	r3
   1df32:	bf00      	nop
   1df34:	0002bf7c 	.word	0x0002bf7c

0001df38 <sx12xx_ev_rx_done>:
{
   1df38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1df3a:	461c      	mov	r4, r3
	Radio.Sleep();
   1df3c:	4b08      	ldr	r3, [pc, #32]	; (1df60 <sx12xx_ev_rx_done+0x28>)
   1df3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
   1df40:	4607      	mov	r7, r0
   1df42:	460e      	mov	r6, r1
   1df44:	4615      	mov	r5, r2
	Radio.Sleep();
   1df46:	4798      	blx	r3
	dev_data.rx_buf = payload;
   1df48:	4806      	ldr	r0, [pc, #24]	; (1df64 <sx12xx_ev_rx_done+0x2c>)
   1df4a:	6347      	str	r7, [r0, #52]	; 0x34
	dev_data.rx_len = size;
   1df4c:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38
	dev_data.rssi = rssi;
   1df50:	8745      	strh	r5, [r0, #58]	; 0x3a
	dev_data.snr = snr;
   1df52:	f880 4039 	strb.w	r4, [r0, #57]	; 0x39
}
   1df56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_impl_k_sem_give(sem);
   1df5a:	f004 b853 	b.w	22004 <z_impl_k_sem_give>
   1df5e:	bf00      	nop
   1df60:	0002bf7c 	.word	0x0002bf7c
   1df64:	20002070 	.word	0x20002070

0001df68 <__sx12xx_configure_pin>:
{
   1df68:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1df6c:	4606      	mov	r6, r0
   1df6e:	460f      	mov	r7, r1
   1df70:	4690      	mov	r8, r2
   1df72:	461c      	mov	r4, r3
   1df74:	4608      	mov	r0, r1
   1df76:	f002 fb89 	bl	2068c <z_impl_device_get_binding>
   1df7a:	4605      	mov	r5, r0
	*dev = device_get_binding(controller);
   1df7c:	6030      	str	r0, [r6, #0]
	if (!(*dev)) {
   1df7e:	b9d0      	cbnz	r0, 1dfb6 <__sx12xx_configure_pin+0x4e>
   1df80:	f00b f851 	bl	29026 <arch_is_user_context>
   1df84:	4b38      	ldr	r3, [pc, #224]	; (1e068 <__sx12xx_configure_pin+0x100>)
   1df86:	4a39      	ldr	r2, [pc, #228]	; (1e06c <__sx12xx_configure_pin+0x104>)
   1df88:	1a9b      	subs	r3, r3, r2
   1df8a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Cannot get pointer to %s device", controller);
   1df8c:	019b      	lsls	r3, r3, #6
   1df8e:	f043 0301 	orr.w	r3, r3, #1
   1df92:	b150      	cbz	r0, 1dfaa <__sx12xx_configure_pin+0x42>
   1df94:	4936      	ldr	r1, [pc, #216]	; (1e070 <__sx12xx_configure_pin+0x108>)
   1df96:	463a      	mov	r2, r7
   1df98:	4618      	mov	r0, r3
   1df9a:	f006 ff7c 	bl	24e96 <log_from_user>
		return -EIO;
   1df9e:	f06f 0604 	mvn.w	r6, #4
}
   1dfa2:	4630      	mov	r0, r6
   1dfa4:	b002      	add	sp, #8
   1dfa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		LOG_ERR("Cannot get pointer to %s device", controller);
   1dfaa:	4831      	ldr	r0, [pc, #196]	; (1e070 <__sx12xx_configure_pin+0x108>)
   1dfac:	461a      	mov	r2, r3
   1dfae:	4639      	mov	r1, r7
   1dfb0:	f006 ffa4 	bl	24efc <log_1>
   1dfb4:	e7f3      	b.n	1df9e <__sx12xx_configure_pin+0x36>
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   1dfb6:	04e6      	lsls	r6, r4, #19
	const struct gpio_driver_api *api =
   1dfb8:	f8d0 a008 	ldr.w	sl, [r0, #8]
	struct gpio_driver_data *data =
   1dfbc:	f8d0 9010 	ldr.w	r9, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   1dfc0:	d506      	bpl.n	1dfd0 <__sx12xx_configure_pin+0x68>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   1dfc2:	f414 6f40 	tst.w	r4, #3072	; 0xc00
   1dfc6:	d003      	beq.n	1dfd0 <__sx12xx_configure_pin+0x68>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1dfc8:	07e0      	lsls	r0, r4, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1dfca:	bf48      	it	mi
   1dfcc:	f484 6440 	eormi.w	r4, r4, #3072	; 0xc00
	return api->pin_configure(port, pin, flags);
   1dfd0:	68ab      	ldr	r3, [r5, #8]
   1dfd2:	f424 5280 	bic.w	r2, r4, #4096	; 0x1000
   1dfd6:	681b      	ldr	r3, [r3, #0]
   1dfd8:	4641      	mov	r1, r8
   1dfda:	4628      	mov	r0, r5
   1dfdc:	4798      	blx	r3
	if (ret != 0) {
   1dfde:	4606      	mov	r6, r0
   1dfe0:	bb38      	cbnz	r0, 1e032 <__sx12xx_configure_pin+0xca>
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1dfe2:	f8d9 2000 	ldr.w	r2, [r9]
   1dfe6:	2301      	movs	r3, #1
   1dfe8:	07e1      	lsls	r1, r4, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1dfea:	fa03 f308 	lsl.w	r3, r3, r8
   1dfee:	bf4c      	ite	mi
   1dff0:	431a      	orrmi	r2, r3
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1dff2:	439a      	bicpl	r2, r3
	if (((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U)
   1dff4:	f414 4fc0 	tst.w	r4, #24576	; 0x6000
   1dff8:	f8c9 2000 	str.w	r2, [r9]
   1dffc:	d0d1      	beq.n	1dfa2 <__sx12xx_configure_pin+0x3a>
	    && (api->pin_interrupt_configure != NULL)) {
   1dffe:	f8da 2018 	ldr.w	r2, [sl, #24]
   1e002:	2a00      	cmp	r2, #0
   1e004:	d0cd      	beq.n	1dfa2 <__sx12xx_configure_pin+0x3a>
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   1e006:	0420      	lsls	r0, r4, #16
	const struct gpio_driver_api *api =
   1e008:	68a9      	ldr	r1, [r5, #8]
		flags &= ~GPIO_INT_DEBOUNCE;
   1e00a:	f424 2201 	bic.w	r2, r4, #528384	; 0x81000
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   1e00e:	d505      	bpl.n	1e01c <__sx12xx_configure_pin+0xb4>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   1e010:	6928      	ldr	r0, [r5, #16]
   1e012:	6800      	ldr	r0, [r0, #0]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   1e014:	4203      	tst	r3, r0
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   1e016:	bf18      	it	ne
   1e018:	f482 22c0 	eorne.w	r2, r2, #393216	; 0x60000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   1e01c:	698c      	ldr	r4, [r1, #24]
   1e01e:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
   1e022:	4641      	mov	r1, r8
   1e024:	f402 32b0 	and.w	r2, r2, #90112	; 0x16000
   1e028:	4628      	mov	r0, r5
   1e02a:	47a0      	blx	r4
	if (err) {
   1e02c:	2800      	cmp	r0, #0
   1e02e:	d0b8      	beq.n	1dfa2 <__sx12xx_configure_pin+0x3a>
   1e030:	4606      	mov	r6, r0
   1e032:	f00a fff8 	bl	29026 <arch_is_user_context>
   1e036:	4c0c      	ldr	r4, [pc, #48]	; (1e068 <__sx12xx_configure_pin+0x100>)
   1e038:	4b0c      	ldr	r3, [pc, #48]	; (1e06c <__sx12xx_configure_pin+0x104>)
   1e03a:	1ae4      	subs	r4, r4, r3
   1e03c:	08e4      	lsrs	r4, r4, #3
		LOG_ERR("Cannot configure gpio %s %d: %d", controller, pin,
   1e03e:	01a4      	lsls	r4, r4, #6
   1e040:	f044 0401 	orr.w	r4, r4, #1
   1e044:	b138      	cbz	r0, 1e056 <__sx12xx_configure_pin+0xee>
   1e046:	490b      	ldr	r1, [pc, #44]	; (1e074 <__sx12xx_configure_pin+0x10c>)
   1e048:	9600      	str	r6, [sp, #0]
   1e04a:	4643      	mov	r3, r8
   1e04c:	463a      	mov	r2, r7
   1e04e:	4620      	mov	r0, r4
   1e050:	f006 ff21 	bl	24e96 <log_from_user>
   1e054:	e7a5      	b.n	1dfa2 <__sx12xx_configure_pin+0x3a>
   1e056:	4807      	ldr	r0, [pc, #28]	; (1e074 <__sx12xx_configure_pin+0x10c>)
   1e058:	f8ad 4000 	strh.w	r4, [sp]
   1e05c:	4633      	mov	r3, r6
   1e05e:	4642      	mov	r2, r8
   1e060:	4639      	mov	r1, r7
   1e062:	f006 ff78 	bl	24f56 <log_3>
		return err;
   1e066:	e79c      	b.n	1dfa2 <__sx12xx_configure_pin+0x3a>
   1e068:	0002a838 	.word	0x0002a838
   1e06c:	0002a6d0 	.word	0x0002a6d0
   1e070:	0002eb2e 	.word	0x0002eb2e
   1e074:	0002eb4e 	.word	0x0002eb4e

0001e078 <sx12xx_lora_send>:
}

int sx12xx_lora_send(const struct device *dev, uint8_t *data,
		     uint32_t data_len)
{
   1e078:	b570      	push	{r4, r5, r6, lr}
	Radio.SetMaxPayloadLength(MODEM_LORA, data_len);
   1e07a:	4e06      	ldr	r6, [pc, #24]	; (1e094 <sx12xx_lora_send+0x1c>)
   1e07c:	b2d4      	uxtb	r4, r2
   1e07e:	6d73      	ldr	r3, [r6, #84]	; 0x54
{
   1e080:	460d      	mov	r5, r1
	Radio.SetMaxPayloadLength(MODEM_LORA, data_len);
   1e082:	2001      	movs	r0, #1
   1e084:	4621      	mov	r1, r4
   1e086:	4798      	blx	r3

	Radio.Send(data, data_len);
   1e088:	4628      	mov	r0, r5
   1e08a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1e08c:	4621      	mov	r1, r4
   1e08e:	4798      	blx	r3

	return 0;
}
   1e090:	2000      	movs	r0, #0
   1e092:	bd70      	pop	{r4, r5, r6, pc}
   1e094:	0002bf7c 	.word	0x0002bf7c

0001e098 <sx12xx_lora_recv>:

int sx12xx_lora_recv(const struct device *dev, uint8_t *data, uint8_t size,
		     k_timeout_t timeout, int16_t *rssi, int8_t *snr)
{
   1e098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int ret;

	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
   1e09c:	4c23      	ldr	r4, [pc, #140]	; (1e12c <sx12xx_lora_recv+0x94>)
{
   1e09e:	460f      	mov	r7, r1
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
   1e0a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1e0a2:	21ff      	movs	r1, #255	; 0xff
   1e0a4:	2001      	movs	r0, #1
{
   1e0a6:	4616      	mov	r6, r2
   1e0a8:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	; 0x28
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
   1e0ac:	4798      	blx	r3
	Radio.Rx(0);
   1e0ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1e0b0:	2000      	movs	r0, #0
   1e0b2:	4798      	blx	r3
	return z_impl_k_sem_take(sem, timeout);
   1e0b4:	4c1e      	ldr	r4, [pc, #120]	; (1e130 <sx12xx_lora_recv+0x98>)
   1e0b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   1e0ba:	4620      	mov	r0, r4
   1e0bc:	f004 f804 	bl	220c8 <z_impl_k_sem_take>

	ret = k_sem_take(&dev_data.data_sem, timeout);
	if (ret < 0) {
   1e0c0:	1e05      	subs	r5, r0, #0
   1e0c2:	da15      	bge.n	1e0f0 <sx12xx_lora_recv+0x58>
   1e0c4:	f00a ffaf 	bl	29026 <arch_is_user_context>
   1e0c8:	4b1a      	ldr	r3, [pc, #104]	; (1e134 <sx12xx_lora_recv+0x9c>)
   1e0ca:	4a1b      	ldr	r2, [pc, #108]	; (1e138 <sx12xx_lora_recv+0xa0>)
   1e0cc:	1a9b      	subs	r3, r3, r2
   1e0ce:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Receive timeout!");
   1e0d0:	019b      	lsls	r3, r3, #6
   1e0d2:	f043 0301 	orr.w	r3, r3, #1
   1e0d6:	b130      	cbz	r0, 1e0e6 <sx12xx_lora_recv+0x4e>
   1e0d8:	4918      	ldr	r1, [pc, #96]	; (1e13c <sx12xx_lora_recv+0xa4>)
   1e0da:	4618      	mov	r0, r3
   1e0dc:	f006 fedb 	bl	24e96 <log_from_user>
	if (snr != NULL) {
		*snr = dev_data.snr;
	}

	return dev_data.rx_len;
}
   1e0e0:	4628      	mov	r0, r5
   1e0e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		LOG_ERR("Receive timeout!");
   1e0e6:	4815      	ldr	r0, [pc, #84]	; (1e13c <sx12xx_lora_recv+0xa4>)
   1e0e8:	4619      	mov	r1, r3
   1e0ea:	f006 fefa 	bl	24ee2 <log_0>
		return ret;
   1e0ee:	e7f7      	b.n	1e0e0 <sx12xx_lora_recv+0x48>
	if (dev_data.rx_len > size)
   1e0f0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1e0f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1e0f6:	42b3      	cmp	r3, r6
		dev_data.rx_len = size;
   1e0f8:	bf88      	it	hi
   1e0fa:	f884 6038 	strbhi.w	r6, [r4, #56]	; 0x38
   1e0fe:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   1e102:	4638      	mov	r0, r7
   1e104:	f00c f96c 	bl	2a3e0 <memcpy>
	if (rssi != NULL) {
   1e108:	f1b9 0f00 	cmp.w	r9, #0
   1e10c:	d003      	beq.n	1e116 <sx12xx_lora_recv+0x7e>
		*rssi = dev_data.rssi;
   1e10e:	f9b4 303a 	ldrsh.w	r3, [r4, #58]	; 0x3a
   1e112:	f8a9 3000 	strh.w	r3, [r9]
	if (snr != NULL) {
   1e116:	f1b8 0f00 	cmp.w	r8, #0
   1e11a:	d003      	beq.n	1e124 <sx12xx_lora_recv+0x8c>
		*snr = dev_data.snr;
   1e11c:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1e120:	f888 3000 	strb.w	r3, [r8]
	return dev_data.rx_len;
   1e124:	f894 5038 	ldrb.w	r5, [r4, #56]	; 0x38
   1e128:	e7da      	b.n	1e0e0 <sx12xx_lora_recv+0x48>
   1e12a:	bf00      	nop
   1e12c:	0002bf7c 	.word	0x0002bf7c
   1e130:	20002070 	.word	0x20002070
   1e134:	0002a838 	.word	0x0002a838
   1e138:	0002a6d0 	.word	0x0002a6d0
   1e13c:	0002eb6e 	.word	0x0002eb6e

0001e140 <sx12xx_lora_config>:

int sx12xx_lora_config(const struct device *dev,
		       struct lora_modem_config *config)
{
   1e140:	b5f0      	push	{r4, r5, r6, r7, lr}
	Radio.SetChannel(config->frequency);
   1e142:	4e19      	ldr	r6, [pc, #100]	; (1e1a8 <sx12xx_lora_config+0x68>)
   1e144:	6808      	ldr	r0, [r1, #0]
   1e146:	68f3      	ldr	r3, [r6, #12]
{
   1e148:	460c      	mov	r4, r1
   1e14a:	b08b      	sub	sp, #44	; 0x2c
	Radio.SetChannel(config->frequency);
   1e14c:	4798      	blx	r3

	if (config->tx) {
   1e14e:	7ae5      	ldrb	r5, [r4, #11]
   1e150:	7921      	ldrb	r1, [r4, #4]
   1e152:	f8b4 c008 	ldrh.w	ip, [r4, #8]
   1e156:	79a3      	ldrb	r3, [r4, #6]
   1e158:	7967      	ldrb	r7, [r4, #5]
   1e15a:	b1a5      	cbz	r5, 1e186 <sx12xx_lora_config+0x46>
		Radio.SetTxConfig(MODEM_LORA, config->tx_power, 0,
   1e15c:	2200      	movs	r2, #0
   1e15e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
   1e162:	e9cd 2007 	strd	r2, r0, [sp, #28]
   1e166:	2001      	movs	r0, #1
   1e168:	e9cd 3c01 	strd	r3, ip, [sp, #4]
   1e16c:	e9cd 2205 	strd	r2, r2, [sp, #20]
   1e170:	e9cd 2003 	strd	r2, r0, [sp, #12]
   1e174:	9700      	str	r7, [sp, #0]
   1e176:	460b      	mov	r3, r1
   1e178:	69f5      	ldr	r5, [r6, #28]
   1e17a:	f994 100a 	ldrsb.w	r1, [r4, #10]
   1e17e:	47a8      	blx	r5
				  0, config->preamble_len, 10, false, 0,
				  false, 0, 0, false, true);
	}

	return 0;
}
   1e180:	2000      	movs	r0, #0
   1e182:	b00b      	add	sp, #44	; 0x2c
   1e184:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Radio.SetRxConfig(MODEM_LORA, config->bandwidth,
   1e186:	2001      	movs	r0, #1
   1e188:	220a      	movs	r2, #10
   1e18a:	e9cd c201 	strd	ip, r2, [sp, #4]
   1e18e:	e9cd 5008 	strd	r5, r0, [sp, #32]
   1e192:	e9cd 5506 	strd	r5, r5, [sp, #24]
   1e196:	e9cd 5504 	strd	r5, r5, [sp, #16]
   1e19a:	69b4      	ldr	r4, [r6, #24]
   1e19c:	9503      	str	r5, [sp, #12]
   1e19e:	9500      	str	r5, [sp, #0]
   1e1a0:	463a      	mov	r2, r7
   1e1a2:	47a0      	blx	r4
   1e1a4:	e7ec      	b.n	1e180 <sx12xx_lora_config+0x40>
   1e1a6:	bf00      	nop
   1e1a8:	0002bf7c 	.word	0x0002bf7c

0001e1ac <sx12xx_lora_test_cw>:

int sx12xx_lora_test_cw(const struct device *dev, uint32_t frequency,
			int8_t tx_power,
			uint16_t duration)
{
   1e1ac:	b510      	push	{r4, lr}
   1e1ae:	4608      	mov	r0, r1
   1e1b0:	4611      	mov	r1, r2
	Radio.SetTxContinuousWave(frequency, tx_power, duration);
   1e1b2:	4a03      	ldr	r2, [pc, #12]	; (1e1c0 <sx12xx_lora_test_cw+0x14>)
   1e1b4:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   1e1b6:	461a      	mov	r2, r3
   1e1b8:	47a0      	blx	r4
	return 0;
}
   1e1ba:	2000      	movs	r0, #0
   1e1bc:	bd10      	pop	{r4, pc}
   1e1be:	bf00      	nop
   1e1c0:	0002bf7c 	.word	0x0002bf7c

0001e1c4 <sx12xx_init>:

int sx12xx_init(const struct device *dev)
{
   1e1c4:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1e1c6:	4c0a      	ldr	r4, [pc, #40]	; (1e1f0 <sx12xx_init+0x2c>)
	k_sem_init(&dev_data.data_sem, 0, K_SEM_MAX_LIMIT);

	dev_data.events.TxDone = sx12xx_ev_tx_done;
	dev_data.events.RxDone = sx12xx_ev_rx_done;
	Radio.Init(&dev_data.events);
   1e1c8:	4d0a      	ldr	r5, [pc, #40]	; (1e1f4 <sx12xx_init+0x30>)
   1e1ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1e1ce:	2100      	movs	r1, #0
   1e1d0:	4620      	mov	r0, r4
   1e1d2:	f00b fc3c 	bl	29a4e <z_impl_k_sem_init>
	dev_data.events.TxDone = sx12xx_ev_tx_done;
   1e1d6:	4b08      	ldr	r3, [pc, #32]	; (1e1f8 <sx12xx_init+0x34>)
   1e1d8:	61a3      	str	r3, [r4, #24]
	dev_data.events.RxDone = sx12xx_ev_rx_done;
   1e1da:	4b08      	ldr	r3, [pc, #32]	; (1e1fc <sx12xx_init+0x38>)
   1e1dc:	6223      	str	r3, [r4, #32]
	Radio.Init(&dev_data.events);
   1e1de:	f104 0018 	add.w	r0, r4, #24
   1e1e2:	682b      	ldr	r3, [r5, #0]
   1e1e4:	4798      	blx	r3
	 * The required `lora_config` call before transmission or reception
	 * will bring the radio out of sleep mode before it is used. The radio
	 * is automatically placed back into sleep mode upon TX or RX
	 * completion.
	 */
	Radio.Sleep();
   1e1e6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1e1e8:	4798      	blx	r3

	return 0;
}
   1e1ea:	2000      	movs	r0, #0
   1e1ec:	bd38      	pop	{r3, r4, r5, pc}
   1e1ee:	bf00      	nop
   1e1f0:	20002070 	.word	0x20002070
   1e1f4:	0002bf7c 	.word	0x0002bf7c
   1e1f8:	0001df2d 	.word	0x0001df2d
   1e1fc:	0001df39 	.word	0x0001df39

0001e200 <sx127x_dio_work_handle>:
	k_sleep(K_MSEC(6));
}

static void sx127x_dio_work_handle(struct k_work *work)
{
	int dio = work - dev_data.dio_work;
   1e200:	4b03      	ldr	r3, [pc, #12]	; (1e210 <sx127x_dio_work_handle+0x10>)
   1e202:	1ac0      	subs	r0, r0, r3
   1e204:	1100      	asrs	r0, r0, #4

	(*DioIrq[dio])(NULL);
   1e206:	4b03      	ldr	r3, [pc, #12]	; (1e214 <sx127x_dio_work_handle+0x14>)
   1e208:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1e20c:	2000      	movs	r0, #0
   1e20e:	4718      	bx	r3
   1e210:	20002114 	.word	0x20002114
   1e214:	20007c10 	.word	0x20007c10

0001e218 <sx127x_irq_callback>:
}

static void sx127x_irq_callback(const struct device *dev,
				struct gpio_callback *cb, uint32_t pins)
{
   1e218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e21c:	4d11      	ldr	r5, [pc, #68]	; (1e264 <sx127x_irq_callback+0x4c>)

	pin = find_lsb_set(pins) - 1;

	for (i = 0; i < SX127X_MAX_DIO; i++) {
		if (dev == dev_data.dio_dev[i] &&
		    pin == sx127x_dios[i].pin) {
   1e21e:	f8df 8048 	ldr.w	r8, [pc, #72]	; 1e268 <sx127x_irq_callback+0x50>
	return k_work_submit_to_queue(&k_sys_work_q, work);
   1e222:	f8df a048 	ldr.w	sl, [pc, #72]	; 1e26c <sx127x_irq_callback+0x54>
   1e226:	fa92 f7a2 	rbit	r7, r2
   1e22a:	2a00      	cmp	r2, #0
   1e22c:	fab7 f787 	clz	r7, r7
{
   1e230:	4606      	mov	r6, r0
   1e232:	bf08      	it	eq
   1e234:	f04f 37ff 	moveq.w	r7, #4294967295	; 0xffffffff
	for (i = 0; i < SX127X_MAX_DIO; i++) {
   1e238:	2400      	movs	r4, #0
   1e23a:	f105 0914 	add.w	r9, r5, #20
		if (dev == dev_data.dio_dev[i] &&
   1e23e:	f855 3b04 	ldr.w	r3, [r5], #4
   1e242:	42b3      	cmp	r3, r6
   1e244:	d109      	bne.n	1e25a <sx127x_irq_callback+0x42>
		    pin == sx127x_dios[i].pin) {
   1e246:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   1e24a:	791b      	ldrb	r3, [r3, #4]
		if (dev == dev_data.dio_dev[i] &&
   1e24c:	42bb      	cmp	r3, r7
   1e24e:	d104      	bne.n	1e25a <sx127x_irq_callback+0x42>
   1e250:	eb09 1104 	add.w	r1, r9, r4, lsl #4
   1e254:	4650      	mov	r0, sl
   1e256:	f00b fcd0 	bl	29bfa <k_work_submit_to_queue>
	for (i = 0; i < SX127X_MAX_DIO; i++) {
   1e25a:	3401      	adds	r4, #1
   1e25c:	2c05      	cmp	r4, #5
   1e25e:	d1ee      	bne.n	1e23e <sx127x_irq_callback+0x26>
			k_work_submit(&dev_data.dio_work[i]);
		}
	}
}
   1e260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1e264:	20002100 	.word	0x20002100
   1e268:	0002bfe8 	.word	0x0002bfe8
   1e26c:	20000ac0 	.word	0x20000ac0

0001e270 <SX1276Reset>:
{
   1e270:	b510      	push	{r4, lr}
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 1);
   1e272:	4c09      	ldr	r4, [pc, #36]	; (1e298 <SX1276Reset+0x28>)
   1e274:	2101      	movs	r1, #1
   1e276:	6820      	ldr	r0, [r4, #0]
   1e278:	f00a feff 	bl	2907a <gpio_pin_set.constprop.0>
	return z_impl_k_sleep(timeout);
   1e27c:	2100      	movs	r1, #0
   1e27e:	2021      	movs	r0, #33	; 0x21
   1e280:	f003 fca2 	bl	21bc8 <z_impl_k_sleep>
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 0);
   1e284:	6820      	ldr	r0, [r4, #0]
   1e286:	2100      	movs	r1, #0
   1e288:	f00a fef7 	bl	2907a <gpio_pin_set.constprop.0>
   1e28c:	20c5      	movs	r0, #197	; 0xc5
}
   1e28e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e292:	2100      	movs	r1, #0
   1e294:	f003 bc98 	b.w	21bc8 <z_impl_k_sleep>
   1e298:	200020ec 	.word	0x200020ec

0001e29c <SX1276IoIrqInit>:

void SX127xIoIrqInit(DioIrqHandler **irqHandlers)
{
   1e29c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e2a0:	4c43      	ldr	r4, [pc, #268]	; (1e3b0 <SX1276IoIrqInit+0x114>)
   1e2a2:	4e44      	ldr	r6, [pc, #272]	; (1e3b4 <SX1276IoIrqInit+0x118>)
   1e2a4:	4d44      	ldr	r5, [pc, #272]	; (1e3b8 <SX1276IoIrqInit+0x11c>)
   1e2a6:	f100 0310 	add.w	r3, r0, #16
   1e2aa:	f1a0 0804 	sub.w	r8, r0, #4
   1e2ae:	f1a4 0914 	sub.w	r9, r4, #20
   1e2b2:	9301      	str	r3, [sp, #4]
	unsigned int i;
	static struct gpio_callback callbacks[SX127X_MAX_DIO];

	/* Setup DIO gpios */
	for (i = 0; i < SX127X_MAX_DIO; i++) {
		if (!irqHandlers[i]) {
   1e2b4:	f858 3f04 	ldr.w	r3, [r8, #4]!
   1e2b8:	2b00      	cmp	r3, #0
   1e2ba:	d064      	beq.n	1e386 <SX1276IoIrqInit+0xea>
			continue;
		}

		dev_data.dio_dev[i] = device_get_binding(sx127x_dios[i].port);
   1e2bc:	682f      	ldr	r7, [r5, #0]
   1e2be:	4638      	mov	r0, r7
   1e2c0:	f002 f9e4 	bl	2068c <z_impl_device_get_binding>
   1e2c4:	6020      	str	r0, [r4, #0]
		if (dev_data.dio_dev[i] == NULL) {
   1e2c6:	b9c8      	cbnz	r0, 1e2fc <SX1276IoIrqInit+0x60>
   1e2c8:	f00a feb7 	bl	2903a <arch_is_user_context>
   1e2cc:	4b3b      	ldr	r3, [pc, #236]	; (1e3bc <SX1276IoIrqInit+0x120>)
   1e2ce:	4a3c      	ldr	r2, [pc, #240]	; (1e3c0 <SX1276IoIrqInit+0x124>)
   1e2d0:	1a9b      	subs	r3, r3, r2
   1e2d2:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Cannot get pointer to %s device",
   1e2d4:	019b      	lsls	r3, r3, #6
   1e2d6:	f043 0301 	orr.w	r3, r3, #1
   1e2da:	b138      	cbz	r0, 1e2ec <SX1276IoIrqInit+0x50>
   1e2dc:	4939      	ldr	r1, [pc, #228]	; (1e3c4 <SX1276IoIrqInit+0x128>)
   1e2de:	463a      	mov	r2, r7
   1e2e0:	4618      	mov	r0, r3
		gpio_pin_interrupt_configure(dev_data.dio_dev[i],
					     sx127x_dios[i].pin,
					     GPIO_INT_EDGE_TO_ACTIVE);
	}

}
   1e2e2:	b003      	add	sp, #12
   1e2e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			LOG_ERR("Cannot get pointer to %s device",
   1e2e8:	f006 bdd5 	b.w	24e96 <log_from_user>
   1e2ec:	4835      	ldr	r0, [pc, #212]	; (1e3c4 <SX1276IoIrqInit+0x128>)
   1e2ee:	461a      	mov	r2, r3
   1e2f0:	4639      	mov	r1, r7
}
   1e2f2:	b003      	add	sp, #12
   1e2f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			LOG_ERR("Cannot get pointer to %s device",
   1e2f8:	f006 be00 	b.w	24efc <log_1>
		k_work_init(&dev_data.dio_work[i], sx127x_dio_work_handle);
   1e2fc:	f109 0028 	add.w	r0, r9, #40	; 0x28
   1e300:	4931      	ldr	r1, [pc, #196]	; (1e3c8 <SX1276IoIrqInit+0x12c>)
   1e302:	f00b fc71 	bl	29be8 <k_work_init>
		gpio_pin_configure(dev_data.dio_dev[i], sx127x_dios[i].pin,
   1e306:	6820      	ldr	r0, [r4, #0]
   1e308:	792f      	ldrb	r7, [r5, #4]
				   | sx127x_dios[i].flags);
   1e30a:	f895 b005 	ldrb.w	fp, [r5, #5]
	struct gpio_driver_data *data =
   1e30e:	f8d0 a010 	ldr.w	sl, [r0, #16]
	return api->pin_configure(port, pin, flags);
   1e312:	6883      	ldr	r3, [r0, #8]
   1e314:	f44b 2200 	orr.w	r2, fp, #524288	; 0x80000
   1e318:	681b      	ldr	r3, [r3, #0]
   1e31a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   1e31e:	4639      	mov	r1, r7
   1e320:	4798      	blx	r3
	if (ret != 0) {
   1e322:	b958      	cbnz	r0, 1e33c <SX1276IoIrqInit+0xa0>
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1e324:	f8da 2000 	ldr.w	r2, [sl]
   1e328:	2301      	movs	r3, #1
   1e32a:	40bb      	lsls	r3, r7
   1e32c:	f01b 0f01 	tst.w	fp, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1e330:	bf14      	ite	ne
   1e332:	4313      	orrne	r3, r2
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1e334:	ea22 0303 	biceq.w	r3, r2, r3
   1e338:	f8ca 3000 	str.w	r3, [sl]
	callback->handler = handler;
   1e33c:	4b23      	ldr	r3, [pc, #140]	; (1e3cc <SX1276IoIrqInit+0x130>)
		if (gpio_add_callback(dev_data.dio_dev[i], &callbacks[i]) < 0) {
   1e33e:	6820      	ldr	r0, [r4, #0]
   1e340:	6073      	str	r3, [r6, #4]
				   BIT(sx127x_dios[i].pin));
   1e342:	2201      	movs	r2, #1
   1e344:	fa02 f307 	lsl.w	r3, r2, r7
	callback->pin_mask = pin_mask;
   1e348:	60b3      	str	r3, [r6, #8]
	if (api->manage_callback == NULL) {
   1e34a:	6883      	ldr	r3, [r0, #8]
   1e34c:	69db      	ldr	r3, [r3, #28]
   1e34e:	b983      	cbnz	r3, 1e372 <SX1276IoIrqInit+0xd6>
   1e350:	f00a fe73 	bl	2903a <arch_is_user_context>
   1e354:	4b19      	ldr	r3, [pc, #100]	; (1e3bc <SX1276IoIrqInit+0x120>)
   1e356:	4a1a      	ldr	r2, [pc, #104]	; (1e3c0 <SX1276IoIrqInit+0x124>)
   1e358:	1a9b      	subs	r3, r3, r2
   1e35a:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Could not set gpio callback.");
   1e35c:	019b      	lsls	r3, r3, #6
   1e35e:	f043 0301 	orr.w	r3, r3, #1
   1e362:	b9f0      	cbnz	r0, 1e3a2 <SX1276IoIrqInit+0x106>
   1e364:	481a      	ldr	r0, [pc, #104]	; (1e3d0 <SX1276IoIrqInit+0x134>)
   1e366:	4619      	mov	r1, r3
}
   1e368:	b003      	add	sp, #12
   1e36a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			LOG_ERR("Could not set gpio callback.");
   1e36e:	f006 bdb8 	b.w	24ee2 <log_0>
	return api->manage_callback(port, callback, true);
   1e372:	4631      	mov	r1, r6
   1e374:	4798      	blx	r3
		if (gpio_add_callback(dev_data.dio_dev[i], &callbacks[i]) < 0) {
   1e376:	2800      	cmp	r0, #0
   1e378:	dbea      	blt.n	1e350 <SX1276IoIrqInit+0xb4>
		gpio_pin_interrupt_configure(dev_data.dio_dev[i],
   1e37a:	6820      	ldr	r0, [r4, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   1e37c:	f44f 22b8 	mov.w	r2, #376832	; 0x5c000
   1e380:	4639      	mov	r1, r7
   1e382:	f00a fe64 	bl	2904e <z_impl_gpio_pin_interrupt_configure>
	for (i = 0; i < SX127X_MAX_DIO; i++) {
   1e386:	9b01      	ldr	r3, [sp, #4]
   1e388:	4598      	cmp	r8, r3
   1e38a:	f104 0404 	add.w	r4, r4, #4
   1e38e:	f106 060c 	add.w	r6, r6, #12
   1e392:	f109 0910 	add.w	r9, r9, #16
   1e396:	f105 0508 	add.w	r5, r5, #8
   1e39a:	d18b      	bne.n	1e2b4 <SX1276IoIrqInit+0x18>
}
   1e39c:	b003      	add	sp, #12
   1e39e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LOG_ERR("Could not set gpio callback.");
   1e3a2:	490b      	ldr	r1, [pc, #44]	; (1e3d0 <SX1276IoIrqInit+0x134>)
   1e3a4:	4618      	mov	r0, r3
}
   1e3a6:	b003      	add	sp, #12
   1e3a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			LOG_ERR("Could not set gpio callback.");
   1e3ac:	f006 bd73 	b.w	24e96 <log_from_user>
   1e3b0:	20002100 	.word	0x20002100
   1e3b4:	200020b0 	.word	0x200020b0
   1e3b8:	0002bfe8 	.word	0x0002bfe8
   1e3bc:	0002a830 	.word	0x0002a830
   1e3c0:	0002a6d0 	.word	0x0002a6d0
   1e3c4:	0002eb2e 	.word	0x0002eb2e
   1e3c8:	0001e201 	.word	0x0001e201
   1e3cc:	0001e219 	.word	0x0001e219
   1e3d0:	0002eb8d 	.word	0x0002eb8d

0001e3d4 <sx127x_read>:

	return spi_write(dev_data.spi, &dev_data.spi_cfg, &tx);
}

int sx127x_read(uint8_t reg_addr, uint8_t *data, uint8_t len)
{
   1e3d4:	b510      	push	{r4, lr}
   1e3d6:	b08a      	sub	sp, #40	; 0x28
	const struct spi_buf buf[2] = {
   1e3d8:	f10d 0307 	add.w	r3, sp, #7
   1e3dc:	9306      	str	r3, [sp, #24]
   1e3de:	2301      	movs	r3, #1
   1e3e0:	e9cd 3107 	strd	r3, r1, [sp, #28]
		return spi_transceive(dev_data.spi, &dev_data.spi_cfg, &tx, &rx);
   1e3e4:	4909      	ldr	r1, [pc, #36]	; (1e40c <sx127x_read+0x38>)
	return sx127x_transceive(reg_addr, false, data, len);
   1e3e6:	9209      	str	r2, [sp, #36]	; 0x24
	struct spi_buf_set tx = {
   1e3e8:	2302      	movs	r3, #2
   1e3ea:	aa06      	add	r2, sp, #24
   1e3ec:	f88d 0007 	strb.w	r0, [sp, #7]
		const struct spi_buf_set rx = {
   1e3f0:	e9cd 3203 	strd	r3, r2, [sp, #12]
		return spi_transceive(dev_data.spi, &dev_data.spi_cfg, &tx, &rx);
   1e3f4:	6848      	ldr	r0, [r1, #4]
	struct spi_buf_set tx = {
   1e3f6:	9202      	str	r2, [sp, #8]
		const struct spi_buf_set rx = {
   1e3f8:	9305      	str	r3, [sp, #20]
	return api->transceive(dev, config, tx_bufs, rx_bufs);
   1e3fa:	6883      	ldr	r3, [r0, #8]
   1e3fc:	aa02      	add	r2, sp, #8
   1e3fe:	681c      	ldr	r4, [r3, #0]
   1e400:	3108      	adds	r1, #8
   1e402:	ab04      	add	r3, sp, #16
   1e404:	47a0      	blx	r4
}
   1e406:	b00a      	add	sp, #40	; 0x28
   1e408:	bd10      	pop	{r4, pc}
   1e40a:	bf00      	nop
   1e40c:	200020ec 	.word	0x200020ec

0001e410 <SX1276ReadBuffer>:
		LOG_ERR("Unable to write address: 0x%x", addr);
	}
}

void SX127xReadBuffer(uint16_t addr, uint8_t *buffer, uint8_t size)
{
   1e410:	b510      	push	{r4, lr}
   1e412:	4604      	mov	r4, r0
	int ret;

	ret = sx127x_read(addr, buffer, size);
   1e414:	b2c0      	uxtb	r0, r0
   1e416:	f7ff ffdd 	bl	1e3d4 <sx127x_read>
	if (ret < 0) {
   1e41a:	2800      	cmp	r0, #0
   1e41c:	da17      	bge.n	1e44e <SX1276ReadBuffer+0x3e>
   1e41e:	f00a fe0c 	bl	2903a <arch_is_user_context>
   1e422:	4b0b      	ldr	r3, [pc, #44]	; (1e450 <SX1276ReadBuffer+0x40>)
   1e424:	4a0b      	ldr	r2, [pc, #44]	; (1e454 <SX1276ReadBuffer+0x44>)
   1e426:	1a9b      	subs	r3, r3, r2
   1e428:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unable to read address: 0x%x", addr);
   1e42a:	019b      	lsls	r3, r3, #6
   1e42c:	f043 0301 	orr.w	r3, r3, #1
   1e430:	b130      	cbz	r0, 1e440 <SX1276ReadBuffer+0x30>
   1e432:	4622      	mov	r2, r4
   1e434:	4908      	ldr	r1, [pc, #32]	; (1e458 <SX1276ReadBuffer+0x48>)
	}
}
   1e436:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("Unable to read address: 0x%x", addr);
   1e43a:	4618      	mov	r0, r3
   1e43c:	f006 bd2b 	b.w	24e96 <log_from_user>
   1e440:	4621      	mov	r1, r4
   1e442:	4805      	ldr	r0, [pc, #20]	; (1e458 <SX1276ReadBuffer+0x48>)
}
   1e444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("Unable to read address: 0x%x", addr);
   1e448:	461a      	mov	r2, r3
   1e44a:	f006 bd57 	b.w	24efc <log_1>
}
   1e44e:	bd10      	pop	{r4, pc}
   1e450:	0002a830 	.word	0x0002a830
   1e454:	0002a6d0 	.word	0x0002a6d0
   1e458:	0002ebaa 	.word	0x0002ebaa

0001e45c <sx127x_lora_init>:

	return 0;
}

static int sx127x_lora_init(const struct device *dev)
{
   1e45c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1e45e:	4606      	mov	r6, r0
   1e460:	4851      	ldr	r0, [pc, #324]	; (1e5a8 <sx127x_lora_init+0x14c>)
	static struct spi_cs_control spi_cs;
#endif
	int ret;
	uint8_t regval;

	dev_data.spi = device_get_binding(DT_INST_BUS_LABEL(0));
   1e462:	4c52      	ldr	r4, [pc, #328]	; (1e5ac <sx127x_lora_init+0x150>)
   1e464:	f002 f912 	bl	2068c <z_impl_device_get_binding>
   1e468:	6060      	str	r0, [r4, #4]
	if (!dev_data.spi) {
   1e46a:	b9c8      	cbnz	r0, 1e4a0 <sx127x_lora_init+0x44>
   1e46c:	f00a fde5 	bl	2903a <arch_is_user_context>
   1e470:	4b4f      	ldr	r3, [pc, #316]	; (1e5b0 <sx127x_lora_init+0x154>)
   1e472:	4a50      	ldr	r2, [pc, #320]	; (1e5b4 <sx127x_lora_init+0x158>)
   1e474:	1a9b      	subs	r3, r3, r2
   1e476:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Cannot get pointer to %s device",
   1e478:	019b      	lsls	r3, r3, #6
   1e47a:	f043 0301 	orr.w	r3, r3, #1
   1e47e:	b148      	cbz	r0, 1e494 <sx127x_lora_init+0x38>
   1e480:	4a49      	ldr	r2, [pc, #292]	; (1e5a8 <sx127x_lora_init+0x14c>)
   1e482:	494d      	ldr	r1, [pc, #308]	; (1e5b8 <sx127x_lora_init+0x15c>)
   1e484:	4618      	mov	r0, r3
   1e486:	f006 fd06 	bl	24e96 <log_from_user>
			DT_INST_BUS_LABEL(0));
		return -EINVAL;
   1e48a:	f06f 0515 	mvn.w	r5, #21
		LOG_ERR("Failed to initialize SX12xx common");
		return ret;
	}

	return 0;
}
   1e48e:	4628      	mov	r0, r5
   1e490:	b002      	add	sp, #8
   1e492:	bd70      	pop	{r4, r5, r6, pc}
		LOG_ERR("Cannot get pointer to %s device",
   1e494:	4944      	ldr	r1, [pc, #272]	; (1e5a8 <sx127x_lora_init+0x14c>)
   1e496:	4848      	ldr	r0, [pc, #288]	; (1e5b8 <sx127x_lora_init+0x15c>)
   1e498:	461a      	mov	r2, r3
   1e49a:	f006 fd2f 	bl	24efc <log_1>
   1e49e:	e7f4      	b.n	1e48a <sx127x_lora_init+0x2e>
	dev_data.spi_cfg.operation = SPI_WORD_SET(8) | SPI_TRANSFER_MSB;
   1e4a0:	4a46      	ldr	r2, [pc, #280]	; (1e5bc <sx127x_lora_init+0x160>)
   1e4a2:	f44f 7380 	mov.w	r3, #256	; 0x100
   1e4a6:	e9c4 2302 	strd	r2, r3, [r4, #8]
   1e4aa:	4845      	ldr	r0, [pc, #276]	; (1e5c0 <sx127x_lora_init+0x164>)
   1e4ac:	f002 f8ee 	bl	2068c <z_impl_device_get_binding>
	spi_cs.gpio_dev = device_get_binding(DT_INST_SPI_DEV_CS_GPIOS_LABEL(0));
   1e4b0:	4b44      	ldr	r3, [pc, #272]	; (1e5c4 <sx127x_lora_init+0x168>)
   1e4b2:	6018      	str	r0, [r3, #0]
	if (!spi_cs.gpio_dev) {
   1e4b4:	b9b8      	cbnz	r0, 1e4e6 <sx127x_lora_init+0x8a>
   1e4b6:	f00a fdc0 	bl	2903a <arch_is_user_context>
   1e4ba:	4b3d      	ldr	r3, [pc, #244]	; (1e5b0 <sx127x_lora_init+0x154>)
   1e4bc:	4a3d      	ldr	r2, [pc, #244]	; (1e5b4 <sx127x_lora_init+0x158>)
   1e4be:	1a9b      	subs	r3, r3, r2
   1e4c0:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Cannot get pointer to %s device",
   1e4c2:	019b      	lsls	r3, r3, #6
   1e4c4:	f043 0301 	orr.w	r3, r3, #1
   1e4c8:	b138      	cbz	r0, 1e4da <sx127x_lora_init+0x7e>
   1e4ca:	4a3d      	ldr	r2, [pc, #244]	; (1e5c0 <sx127x_lora_init+0x164>)
   1e4cc:	493a      	ldr	r1, [pc, #232]	; (1e5b8 <sx127x_lora_init+0x15c>)
   1e4ce:	4618      	mov	r0, r3
   1e4d0:	f006 fce1 	bl	24e96 <log_from_user>
		return -EIO;
   1e4d4:	f06f 0504 	mvn.w	r5, #4
   1e4d8:	e7d9      	b.n	1e48e <sx127x_lora_init+0x32>
		LOG_ERR("Cannot get pointer to %s device",
   1e4da:	4939      	ldr	r1, [pc, #228]	; (1e5c0 <sx127x_lora_init+0x164>)
   1e4dc:	4836      	ldr	r0, [pc, #216]	; (1e5b8 <sx127x_lora_init+0x15c>)
   1e4de:	461a      	mov	r2, r3
   1e4e0:	f006 fd0c 	bl	24efc <log_1>
		return -EIO;
   1e4e4:	e7f6      	b.n	1e4d4 <sx127x_lora_init+0x78>
	spi_cs.delay = 0U;
   1e4e6:	2200      	movs	r2, #0
   1e4e8:	605a      	str	r2, [r3, #4]
	spi_cs.gpio_pin = GPIO_CS_PIN;
   1e4ea:	f240 1209 	movw	r2, #265	; 0x109
   1e4ee:	811a      	strh	r2, [r3, #8]
	dev_data.spi_cfg.cs = &spi_cs;
   1e4f0:	6123      	str	r3, [r4, #16]
	ret = sx12xx_configure_pin(reset, GPIO_OUTPUT_ACTIVE);
   1e4f2:	4933      	ldr	r1, [pc, #204]	; (1e5c0 <sx127x_lora_init+0x164>)
   1e4f4:	f641 2311 	movw	r3, #6673	; 0x1a11
   1e4f8:	2208      	movs	r2, #8
   1e4fa:	4620      	mov	r0, r4
   1e4fc:	f7ff fd34 	bl	1df68 <__sx12xx_configure_pin>
	if (ret) {
   1e500:	4605      	mov	r5, r0
   1e502:	2800      	cmp	r0, #0
   1e504:	d1c3      	bne.n	1e48e <sx127x_lora_init+0x32>
   1e506:	2100      	movs	r1, #0
   1e508:	f640 40cd 	movw	r0, #3277	; 0xccd
   1e50c:	f003 fb5c 	bl	21bc8 <z_impl_k_sleep>
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 0);
   1e510:	6820      	ldr	r0, [r4, #0]
   1e512:	4629      	mov	r1, r5
   1e514:	f00a fdb1 	bl	2907a <gpio_pin_set.constprop.0>
   1e518:	2100      	movs	r1, #0
   1e51a:	f640 40cd 	movw	r0, #3277	; 0xccd
   1e51e:	f003 fb53 	bl	21bc8 <z_impl_k_sleep>
	ret = sx127x_read(REG_VERSION, &regval, 1);
   1e522:	2201      	movs	r2, #1
   1e524:	f10d 0107 	add.w	r1, sp, #7
   1e528:	2042      	movs	r0, #66	; 0x42
   1e52a:	f7ff ff53 	bl	1e3d4 <sx127x_read>
	if (ret < 0) {
   1e52e:	4c20      	ldr	r4, [pc, #128]	; (1e5b0 <sx127x_lora_init+0x154>)
   1e530:	4b20      	ldr	r3, [pc, #128]	; (1e5b4 <sx127x_lora_init+0x158>)
   1e532:	1ae4      	subs	r4, r4, r3
   1e534:	08e4      	lsrs	r4, r4, #3
   1e536:	2800      	cmp	r0, #0
   1e538:	ea4f 1484 	mov.w	r4, r4, lsl #6
   1e53c:	da0e      	bge.n	1e55c <sx127x_lora_init+0x100>
   1e53e:	f00a fd7c 	bl	2903a <arch_is_user_context>
		LOG_ERR("Unable to read version info");
   1e542:	f044 0401 	orr.w	r4, r4, #1
   1e546:	b120      	cbz	r0, 1e552 <sx127x_lora_init+0xf6>
   1e548:	491f      	ldr	r1, [pc, #124]	; (1e5c8 <sx127x_lora_init+0x16c>)
   1e54a:	4620      	mov	r0, r4
   1e54c:	f006 fca3 	bl	24e96 <log_from_user>
   1e550:	e7c0      	b.n	1e4d4 <sx127x_lora_init+0x78>
   1e552:	481d      	ldr	r0, [pc, #116]	; (1e5c8 <sx127x_lora_init+0x16c>)
   1e554:	4621      	mov	r1, r4
   1e556:	f006 fcc4 	bl	24ee2 <log_0>
   1e55a:	e7bb      	b.n	1e4d4 <sx127x_lora_init+0x78>
   1e55c:	f00a fd6d 	bl	2903a <arch_is_user_context>
   1e560:	f89d 1007 	ldrb.w	r1, [sp, #7]
	LOG_INF("SX127x version 0x%02x found", regval);
   1e564:	f044 0303 	orr.w	r3, r4, #3
   1e568:	b1a0      	cbz	r0, 1e594 <sx127x_lora_init+0x138>
   1e56a:	460a      	mov	r2, r1
   1e56c:	4618      	mov	r0, r3
   1e56e:	4917      	ldr	r1, [pc, #92]	; (1e5cc <sx127x_lora_init+0x170>)
   1e570:	f006 fc91 	bl	24e96 <log_from_user>
	ret = sx12xx_init(dev);
   1e574:	4630      	mov	r0, r6
   1e576:	f7ff fe25 	bl	1e1c4 <sx12xx_init>
	if (ret < 0) {
   1e57a:	1e06      	subs	r6, r0, #0
   1e57c:	da87      	bge.n	1e48e <sx127x_lora_init+0x32>
   1e57e:	f00a fd5c 	bl	2903a <arch_is_user_context>
		LOG_ERR("Failed to initialize SX12xx common");
   1e582:	f044 0401 	orr.w	r4, r4, #1
   1e586:	b150      	cbz	r0, 1e59e <sx127x_lora_init+0x142>
   1e588:	4911      	ldr	r1, [pc, #68]	; (1e5d0 <sx127x_lora_init+0x174>)
   1e58a:	4620      	mov	r0, r4
   1e58c:	f006 fc83 	bl	24e96 <log_from_user>
		return ret;
   1e590:	4635      	mov	r5, r6
   1e592:	e77c      	b.n	1e48e <sx127x_lora_init+0x32>
	LOG_INF("SX127x version 0x%02x found", regval);
   1e594:	480d      	ldr	r0, [pc, #52]	; (1e5cc <sx127x_lora_init+0x170>)
   1e596:	461a      	mov	r2, r3
   1e598:	f006 fcb0 	bl	24efc <log_1>
   1e59c:	e7ea      	b.n	1e574 <sx127x_lora_init+0x118>
		LOG_ERR("Failed to initialize SX12xx common");
   1e59e:	480c      	ldr	r0, [pc, #48]	; (1e5d0 <sx127x_lora_init+0x174>)
   1e5a0:	4621      	mov	r1, r4
   1e5a2:	f006 fc9e 	bl	24ee2 <log_0>
   1e5a6:	e7f3      	b.n	1e590 <sx127x_lora_init+0x134>
   1e5a8:	0002ea3a 	.word	0x0002ea3a
   1e5ac:	200020ec 	.word	0x200020ec
   1e5b0:	0002a830 	.word	0x0002a830
   1e5b4:	0002a6d0 	.word	0x0002a6d0
   1e5b8:	0002eb2e 	.word	0x0002eb2e
   1e5bc:	000f4240 	.word	0x000f4240
   1e5c0:	0002e71f 	.word	0x0002e71f
   1e5c4:	20002164 	.word	0x20002164
   1e5c8:	0002ebc7 	.word	0x0002ebc7
   1e5cc:	0002ebe3 	.word	0x0002ebe3
   1e5d0:	0002ebff 	.word	0x0002ebff

0001e5d4 <sx127x_write>:
{
   1e5d4:	b510      	push	{r4, lr}
   1e5d6:	b088      	sub	sp, #32
	const struct spi_buf buf[2] = {
   1e5d8:	f10d 0307 	add.w	r3, sp, #7
   1e5dc:	9304      	str	r3, [sp, #16]
   1e5de:	2301      	movs	r3, #1
   1e5e0:	e9cd 3105 	strd	r3, r1, [sp, #20]
	struct spi_buf_set tx = {
   1e5e4:	ab04      	add	r3, sp, #16
	return spi_write(dev_data.spi, &dev_data.spi_cfg, &tx);
   1e5e6:	4909      	ldr	r1, [pc, #36]	; (1e60c <sx127x_write+0x38>)
	struct spi_buf_set tx = {
   1e5e8:	9302      	str	r3, [sp, #8]
	return sx127x_transceive(reg_addr | BIT(7), true, data, len);
   1e5ea:	f060 007f 	orn	r0, r0, #127	; 0x7f
	struct spi_buf_set tx = {
   1e5ee:	2302      	movs	r3, #2
   1e5f0:	f88d 0007 	strb.w	r0, [sp, #7]
	return sx127x_transceive(reg_addr | BIT(7), true, data, len);
   1e5f4:	9207      	str	r2, [sp, #28]
	return spi_write(dev_data.spi, &dev_data.spi_cfg, &tx);
   1e5f6:	6848      	ldr	r0, [r1, #4]
	struct spi_buf_set tx = {
   1e5f8:	9303      	str	r3, [sp, #12]
   1e5fa:	6883      	ldr	r3, [r0, #8]
   1e5fc:	aa02      	add	r2, sp, #8
   1e5fe:	681c      	ldr	r4, [r3, #0]
   1e600:	3108      	adds	r1, #8
   1e602:	2300      	movs	r3, #0
   1e604:	47a0      	blx	r4
}
   1e606:	b008      	add	sp, #32
   1e608:	bd10      	pop	{r4, pc}
   1e60a:	bf00      	nop
   1e60c:	200020ec 	.word	0x200020ec

0001e610 <SX1276WriteBuffer>:
{
   1e610:	b510      	push	{r4, lr}
   1e612:	4604      	mov	r4, r0
	ret = sx127x_write(addr, buffer, size);
   1e614:	b2c0      	uxtb	r0, r0
   1e616:	f7ff ffdd 	bl	1e5d4 <sx127x_write>
	if (ret < 0) {
   1e61a:	2800      	cmp	r0, #0
   1e61c:	da17      	bge.n	1e64e <SX1276WriteBuffer+0x3e>
   1e61e:	f00a fd0c 	bl	2903a <arch_is_user_context>
   1e622:	4b0b      	ldr	r3, [pc, #44]	; (1e650 <SX1276WriteBuffer+0x40>)
   1e624:	4a0b      	ldr	r2, [pc, #44]	; (1e654 <SX1276WriteBuffer+0x44>)
   1e626:	1a9b      	subs	r3, r3, r2
   1e628:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unable to write address: 0x%x", addr);
   1e62a:	019b      	lsls	r3, r3, #6
   1e62c:	f043 0301 	orr.w	r3, r3, #1
   1e630:	b130      	cbz	r0, 1e640 <SX1276WriteBuffer+0x30>
   1e632:	4622      	mov	r2, r4
   1e634:	4908      	ldr	r1, [pc, #32]	; (1e658 <SX1276WriteBuffer+0x48>)
}
   1e636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("Unable to write address: 0x%x", addr);
   1e63a:	4618      	mov	r0, r3
   1e63c:	f006 bc2b 	b.w	24e96 <log_from_user>
   1e640:	4621      	mov	r1, r4
   1e642:	4805      	ldr	r0, [pc, #20]	; (1e658 <SX1276WriteBuffer+0x48>)
}
   1e644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("Unable to write address: 0x%x", addr);
   1e648:	461a      	mov	r2, r3
   1e64a:	f006 bc57 	b.w	24efc <log_1>
}
   1e64e:	bd10      	pop	{r4, pc}
   1e650:	0002a830 	.word	0x0002a830
   1e654:	0002a6d0 	.word	0x0002a6d0
   1e658:	0002ec22 	.word	0x0002ec22

0001e65c <SX1276SetRfTxPower>:
{
   1e65c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t pa_config = 0;
   1e65e:	2300      	movs	r3, #0
{
   1e660:	4605      	mov	r5, r0
	ret = sx127x_read(REG_PADAC, &pa_dac, 1);
   1e662:	2201      	movs	r2, #1
   1e664:	f10d 0107 	add.w	r1, sp, #7
   1e668:	204d      	movs	r0, #77	; 0x4d
	uint8_t pa_config = 0;
   1e66a:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t pa_dac = 0;
   1e66e:	f88d 3007 	strb.w	r3, [sp, #7]
	ret = sx127x_read(REG_PADAC, &pa_dac, 1);
   1e672:	f7ff feaf 	bl	1e3d4 <sx127x_read>
	if (ret < 0) {
   1e676:	2800      	cmp	r0, #0
   1e678:	da14      	bge.n	1e6a4 <SX1276SetRfTxPower+0x48>
   1e67a:	f00a fcde 	bl	2903a <arch_is_user_context>
   1e67e:	4b32      	ldr	r3, [pc, #200]	; (1e748 <SX1276SetRfTxPower+0xec>)
   1e680:	4a32      	ldr	r2, [pc, #200]	; (1e74c <SX1276SetRfTxPower+0xf0>)
   1e682:	1a9b      	subs	r3, r3, r2
   1e684:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unable to read PA dac");
   1e686:	019b      	lsls	r3, r3, #6
   1e688:	f043 0301 	orr.w	r3, r3, #1
   1e68c:	b128      	cbz	r0, 1e69a <SX1276SetRfTxPower+0x3e>
   1e68e:	4930      	ldr	r1, [pc, #192]	; (1e750 <SX1276SetRfTxPower+0xf4>)
		LOG_ERR("Unable to write PA dac");
   1e690:	4618      	mov	r0, r3
   1e692:	f006 fc00 	bl	24e96 <log_from_user>
}
   1e696:	b003      	add	sp, #12
   1e698:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Unable to read PA dac");
   1e69a:	482d      	ldr	r0, [pc, #180]	; (1e750 <SX1276SetRfTxPower+0xf4>)
   1e69c:	4619      	mov	r1, r3
		LOG_ERR("Unable to write PA dac");
   1e69e:	f006 fc20 	bl	24ee2 <log_0>
		return;
   1e6a2:	e7f8      	b.n	1e696 <SX1276SetRfTxPower+0x3a>
	pa_dac &= ~SX127X_PADAC_20DBM_MASK;
   1e6a4:	2d14      	cmp	r5, #20
   1e6a6:	4629      	mov	r1, r5
   1e6a8:	bfa8      	it	ge
   1e6aa:	2114      	movge	r1, #20
   1e6ac:	2902      	cmp	r1, #2
   1e6ae:	f89d 4007 	ldrb.w	r4, [sp, #7]
		pa_config |= SX127X_PACONFIG_PASELECT_PABOOST;
   1e6b2:	f99d 2006 	ldrsb.w	r2, [sp, #6]
   1e6b6:	bfb8      	it	lt
   1e6b8:	2102      	movlt	r1, #2
		if (power > 17) {
   1e6ba:	2d11      	cmp	r5, #17
	pa_dac &= ~SX127X_PADAC_20DBM_MASK;
   1e6bc:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
			pa_config |= (power - 5) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
   1e6c0:	bfcc      	ite	gt
   1e6c2:	3905      	subgt	r1, #5
			pa_config |= (power - 2) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
   1e6c4:	3902      	suble	r1, #2
   1e6c6:	f062 037f 	orn	r3, r2, #127	; 0x7f
			pa_dac |= SX127X_PADAC_20DBM_ON;
   1e6ca:	bfcc      	ite	gt
   1e6cc:	f044 0407 	orrgt.w	r4, r4, #7
			pa_dac |= SX127X_PADAC_20DBM_OFF;
   1e6d0:	f044 0404 	orrle.w	r4, r4, #4
			pa_config |= (power - 2) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
   1e6d4:	ea43 0301 	orr.w	r3, r3, r1
	ret = sx127x_write(REG_PACONFIG, &pa_config, 1);
   1e6d8:	f04f 0201 	mov.w	r2, #1
   1e6dc:	f10d 0106 	add.w	r1, sp, #6
   1e6e0:	f04f 0009 	mov.w	r0, #9
			pa_dac |= SX127X_PADAC_20DBM_ON;
   1e6e4:	bfcc      	ite	gt
   1e6e6:	f88d 4007 	strbgt.w	r4, [sp, #7]
			pa_dac |= SX127X_PADAC_20DBM_OFF;
   1e6ea:	f88d 4007 	strble.w	r4, [sp, #7]
			pa_config |= (power - 2) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
   1e6ee:	f88d 3006 	strb.w	r3, [sp, #6]
	ret = sx127x_write(REG_PACONFIG, &pa_config, 1);
   1e6f2:	f7ff ff6f 	bl	1e5d4 <sx127x_write>
	if (ret < 0) {
   1e6f6:	2800      	cmp	r0, #0
   1e6f8:	da0e      	bge.n	1e718 <SX1276SetRfTxPower+0xbc>
   1e6fa:	f00a fc9e 	bl	2903a <arch_is_user_context>
   1e6fe:	4b12      	ldr	r3, [pc, #72]	; (1e748 <SX1276SetRfTxPower+0xec>)
   1e700:	4a12      	ldr	r2, [pc, #72]	; (1e74c <SX1276SetRfTxPower+0xf0>)
   1e702:	1a9b      	subs	r3, r3, r2
   1e704:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unable to write PA config");
   1e706:	019b      	lsls	r3, r3, #6
   1e708:	f043 0301 	orr.w	r3, r3, #1
   1e70c:	b108      	cbz	r0, 1e712 <SX1276SetRfTxPower+0xb6>
   1e70e:	4911      	ldr	r1, [pc, #68]	; (1e754 <SX1276SetRfTxPower+0xf8>)
   1e710:	e7be      	b.n	1e690 <SX1276SetRfTxPower+0x34>
   1e712:	4810      	ldr	r0, [pc, #64]	; (1e754 <SX1276SetRfTxPower+0xf8>)
   1e714:	4619      	mov	r1, r3
   1e716:	e7c2      	b.n	1e69e <SX1276SetRfTxPower+0x42>
	ret = sx127x_write(REG_PADAC, &pa_dac, 1);
   1e718:	2201      	movs	r2, #1
   1e71a:	f10d 0107 	add.w	r1, sp, #7
   1e71e:	204d      	movs	r0, #77	; 0x4d
   1e720:	f7ff ff58 	bl	1e5d4 <sx127x_write>
	if (ret < 0) {
   1e724:	2800      	cmp	r0, #0
   1e726:	dab6      	bge.n	1e696 <SX1276SetRfTxPower+0x3a>
   1e728:	f00a fc87 	bl	2903a <arch_is_user_context>
   1e72c:	4b06      	ldr	r3, [pc, #24]	; (1e748 <SX1276SetRfTxPower+0xec>)
   1e72e:	4a07      	ldr	r2, [pc, #28]	; (1e74c <SX1276SetRfTxPower+0xf0>)
   1e730:	1a9b      	subs	r3, r3, r2
   1e732:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unable to write PA dac");
   1e734:	019b      	lsls	r3, r3, #6
   1e736:	f043 0301 	orr.w	r3, r3, #1
   1e73a:	b108      	cbz	r0, 1e740 <SX1276SetRfTxPower+0xe4>
   1e73c:	4906      	ldr	r1, [pc, #24]	; (1e758 <SX1276SetRfTxPower+0xfc>)
   1e73e:	e7a7      	b.n	1e690 <SX1276SetRfTxPower+0x34>
   1e740:	4805      	ldr	r0, [pc, #20]	; (1e758 <SX1276SetRfTxPower+0xfc>)
   1e742:	4619      	mov	r1, r3
   1e744:	e7ab      	b.n	1e69e <SX1276SetRfTxPower+0x42>
   1e746:	bf00      	nop
   1e748:	0002a830 	.word	0x0002a830
   1e74c:	0002a6d0 	.word	0x0002a6d0
   1e750:	0002ec40 	.word	0x0002ec40
   1e754:	0002ec56 	.word	0x0002ec56
   1e758:	0002ec70 	.word	0x0002ec70

0001e75c <GetFskBandwidthRegValue>:
{
   1e75c:	b510      	push	{r4, lr}
   1e75e:	4b09      	ldr	r3, [pc, #36]	; (1e784 <GetFskBandwidthRegValue+0x28>)
   1e760:	2200      	movs	r2, #0
   1e762:	4619      	mov	r1, r3
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
   1e764:	681c      	ldr	r4, [r3, #0]
   1e766:	4284      	cmp	r4, r0
   1e768:	d806      	bhi.n	1e778 <GetFskBandwidthRegValue+0x1c>
   1e76a:	689c      	ldr	r4, [r3, #8]
   1e76c:	4284      	cmp	r4, r0
   1e76e:	d903      	bls.n	1e778 <GetFskBandwidthRegValue+0x1c>
            return FskBandwidths[i].RegValue;
   1e770:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   1e774:	7910      	ldrb	r0, [r2, #4]
}
   1e776:	bd10      	pop	{r4, pc}
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
   1e778:	3201      	adds	r2, #1
   1e77a:	2a15      	cmp	r2, #21
   1e77c:	f103 0308 	add.w	r3, r3, #8
   1e780:	d1f0      	bne.n	1e764 <GetFskBandwidthRegValue+0x8>
    while( 1 );
   1e782:	e7fe      	b.n	1e782 <GetFskBandwidthRegValue+0x26>
   1e784:	0002c020 	.word	0x0002c020

0001e788 <SX1276OnDio4Irq>:
    }
}

void SX1276OnDio4Irq( void* context )
{
    switch( SX1276.Settings.Modem )
   1e788:	4b05      	ldr	r3, [pc, #20]	; (1e7a0 <SX1276OnDio4Irq+0x18>)
   1e78a:	f893 20e1 	ldrb.w	r2, [r3, #225]	; 0xe1
   1e78e:	b92a      	cbnz	r2, 1e79c <SX1276OnDio4Irq+0x14>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
   1e790:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
   1e794:	b912      	cbnz	r2, 1e79c <SX1276OnDio4Irq+0x14>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
   1e796:	2201      	movs	r2, #1
   1e798:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
   1e79c:	4770      	bx	lr
   1e79e:	bf00      	nop
   1e7a0:	200021a4 	.word	0x200021a4

0001e7a4 <SX1276GetStatus>:
}
   1e7a4:	4b01      	ldr	r3, [pc, #4]	; (1e7ac <SX1276GetStatus+0x8>)
   1e7a6:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
   1e7aa:	4770      	bx	lr
   1e7ac:	200021a4 	.word	0x200021a4

0001e7b0 <SX1276ReadRssi>:
{
   1e7b0:	b508      	push	{r3, lr}
    switch( modem )
   1e7b2:	b120      	cbz	r0, 1e7be <SX1276ReadRssi+0xe>
   1e7b4:	2801      	cmp	r0, #1
   1e7b6:	d00a      	beq.n	1e7ce <SX1276ReadRssi+0x1e>
   1e7b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1e7bc:	bd08      	pop	{r3, pc}
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
   1e7be:	2011      	movs	r0, #17
   1e7c0:	f00a fc7a 	bl	290b8 <SX1276Read>
   1e7c4:	f3c0 0047 	ubfx	r0, r0, #1, #8
   1e7c8:	4240      	negs	r0, r0
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
   1e7ca:	b200      	sxth	r0, r0
   1e7cc:	e7f6      	b.n	1e7bc <SX1276ReadRssi+0xc>
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
   1e7ce:	4b08      	ldr	r3, [pc, #32]	; (1e7f0 <SX1276ReadRssi+0x40>)
   1e7d0:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
   1e7d4:	4b07      	ldr	r3, [pc, #28]	; (1e7f4 <SX1276ReadRssi+0x44>)
   1e7d6:	429a      	cmp	r2, r3
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
   1e7d8:	f04f 001b 	mov.w	r0, #27
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
   1e7dc:	d903      	bls.n	1e7e6 <SX1276ReadRssi+0x36>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
   1e7de:	f00a fc6b 	bl	290b8 <SX1276Read>
   1e7e2:	389d      	subs	r0, #157	; 0x9d
   1e7e4:	e7f1      	b.n	1e7ca <SX1276ReadRssi+0x1a>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
   1e7e6:	f00a fc67 	bl	290b8 <SX1276Read>
   1e7ea:	38a4      	subs	r0, #164	; 0xa4
   1e7ec:	e7ed      	b.n	1e7ca <SX1276ReadRssi+0x1a>
   1e7ee:	bf00      	nop
   1e7f0:	200021a4 	.word	0x200021a4
   1e7f4:	1f4add40 	.word	0x1f4add40

0001e7f8 <SX1276SetSleep>:
{
   1e7f8:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
   1e7fa:	480a      	ldr	r0, [pc, #40]	; (1e824 <SX1276SetSleep+0x2c>)
   1e7fc:	f000 fdc8 	bl	1f390 <TimerStop>
    TimerStop( &TxTimeoutTimer );
   1e800:	4809      	ldr	r0, [pc, #36]	; (1e828 <SX1276SetSleep+0x30>)
   1e802:	f000 fdc5 	bl	1f390 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
   1e806:	4809      	ldr	r0, [pc, #36]	; (1e82c <SX1276SetSleep+0x34>)
   1e808:	f000 fdc2 	bl	1f390 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
   1e80c:	2000      	movs	r0, #0
   1e80e:	f00a fc5e 	bl	290ce <SX1276SetOpMode>
    SX1276SetBoardTcxo( false );
   1e812:	2000      	movs	r0, #0
   1e814:	f00a fc43 	bl	2909e <SX1276SetBoardTcxo>
    SX1276.Settings.State = RF_IDLE;
   1e818:	4b05      	ldr	r3, [pc, #20]	; (1e830 <SX1276SetSleep+0x38>)
   1e81a:	2200      	movs	r2, #0
   1e81c:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
   1e820:	bd08      	pop	{r3, pc}
   1e822:	bf00      	nop
   1e824:	2000218c 	.word	0x2000218c
   1e828:	200022e8 	.word	0x200022e8
   1e82c:	20002174 	.word	0x20002174
   1e830:	200021a4 	.word	0x200021a4

0001e834 <SX1276SetStby>:
{
   1e834:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
   1e836:	4808      	ldr	r0, [pc, #32]	; (1e858 <SX1276SetStby+0x24>)
   1e838:	f000 fdaa 	bl	1f390 <TimerStop>
    TimerStop( &TxTimeoutTimer );
   1e83c:	4807      	ldr	r0, [pc, #28]	; (1e85c <SX1276SetStby+0x28>)
   1e83e:	f000 fda7 	bl	1f390 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
   1e842:	4807      	ldr	r0, [pc, #28]	; (1e860 <SX1276SetStby+0x2c>)
   1e844:	f000 fda4 	bl	1f390 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_STANDBY );
   1e848:	2001      	movs	r0, #1
   1e84a:	f00a fc40 	bl	290ce <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
   1e84e:	4b05      	ldr	r3, [pc, #20]	; (1e864 <SX1276SetStby+0x30>)
   1e850:	2200      	movs	r2, #0
   1e852:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
   1e856:	bd08      	pop	{r3, pc}
   1e858:	2000218c 	.word	0x2000218c
   1e85c:	200022e8 	.word	0x200022e8
   1e860:	20002174 	.word	0x20002174
   1e864:	200021a4 	.word	0x200021a4

0001e868 <SX1276SetRx>:
{
   1e868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch( SX1276.Settings.Modem )
   1e86a:	4c81      	ldr	r4, [pc, #516]	; (1ea70 <SX1276SetRx+0x208>)
{
   1e86c:	4606      	mov	r6, r0
    TimerStop( &TxTimeoutTimer );
   1e86e:	4881      	ldr	r0, [pc, #516]	; (1ea74 <SX1276SetRx+0x20c>)
   1e870:	f000 fd8e 	bl	1f390 <TimerStop>
    switch( SX1276.Settings.Modem )
   1e874:	f894 50e1 	ldrb.w	r5, [r4, #225]	; 0xe1
   1e878:	b32d      	cbz	r5, 1e8c6 <SX1276SetRx+0x5e>
   1e87a:	2d01      	cmp	r5, #1
   1e87c:	d04a      	beq.n	1e914 <SX1276SetRx+0xac>
   1e87e:	2700      	movs	r7, #0
    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
   1e880:	487d      	ldr	r0, [pc, #500]	; (1ea78 <SX1276SetRx+0x210>)
   1e882:	f44f 7280 	mov.w	r2, #256	; 0x100
   1e886:	2100      	movs	r1, #0
   1e888:	f00b fdb8 	bl	2a3fc <memset>
    SX1276.Settings.State = RF_RX_RUNNING;
   1e88c:	2301      	movs	r3, #1
   1e88e:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    if( timeout != 0 )
   1e892:	b136      	cbz	r6, 1e8a2 <SX1276SetRx+0x3a>
        TimerSetValue( &RxTimeoutTimer, timeout );
   1e894:	4879      	ldr	r0, [pc, #484]	; (1ea7c <SX1276SetRx+0x214>)
   1e896:	4631      	mov	r1, r6
   1e898:	f00a fca6 	bl	291e8 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
   1e89c:	4877      	ldr	r0, [pc, #476]	; (1ea7c <SX1276SetRx+0x214>)
   1e89e:	f000 fd01 	bl	1f2a4 <TimerStart>
    if( SX1276.Settings.Modem == MODEM_FSK )
   1e8a2:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   1e8a6:	2b00      	cmp	r3, #0
   1e8a8:	f040 80d9 	bne.w	1ea5e <SX1276SetRx+0x1f6>
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
   1e8ac:	2005      	movs	r0, #5
   1e8ae:	f00a fc0e 	bl	290ce <SX1276SetOpMode>
        TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
   1e8b2:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
   1e8b6:	4872      	ldr	r0, [pc, #456]	; (1ea80 <SX1276SetRx+0x218>)
   1e8b8:	f00a fc96 	bl	291e8 <TimerSetValue>
}
   1e8bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        TimerStart( &RxTimeoutSyncWord );
   1e8c0:	486f      	ldr	r0, [pc, #444]	; (1ea80 <SX1276SetRx+0x218>)
   1e8c2:	f000 bcef 	b.w	1f2a4 <TimerStart>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
   1e8c6:	2040      	movs	r0, #64	; 0x40
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
   1e8c8:	f894 7102 	ldrb.w	r7, [r4, #258]	; 0x102
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
   1e8cc:	f00a fbf4 	bl	290b8 <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO0_00 |
   1e8d0:	f000 0103 	and.w	r1, r0, #3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
   1e8d4:	f041 010c 	orr.w	r1, r1, #12
   1e8d8:	2040      	movs	r0, #64	; 0x40
   1e8da:	f00a fbe2 	bl	290a2 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
   1e8de:	2041      	movs	r0, #65	; 0x41
   1e8e0:	f00a fbea 	bl	290b8 <SX1276Read>
   1e8e4:	f060 013e 	orn	r1, r0, #62	; 0x3e
   1e8e8:	b2c9      	uxtb	r1, r1
   1e8ea:	2041      	movs	r0, #65	; 0x41
   1e8ec:	f00a fbd9 	bl	290a2 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
   1e8f0:	2035      	movs	r0, #53	; 0x35
   1e8f2:	f00a fbe1 	bl	290b8 <SX1276Read>
   1e8f6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   1e8fa:	f884 011a 	strb.w	r0, [r4, #282]	; 0x11a
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
   1e8fe:	211e      	movs	r1, #30
   1e900:	200d      	movs	r0, #13
   1e902:	f00a fbce 	bl	290a2 <SX1276Write>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
   1e906:	f8a4 510c 	strh.w	r5, [r4, #268]	; 0x10c
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
   1e90a:	f8a4 5118 	strh.w	r5, [r4, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = 0;
   1e90e:	f8a4 5116 	strh.w	r5, [r4, #278]	; 0x116
        break;
   1e912:	e7b5      	b.n	1e880 <SX1276SetRx+0x18>
            if( SX1276.Settings.LoRa.IqInverted == true )
   1e914:	f894 3131 	ldrb.w	r3, [r4, #305]	; 0x131
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
   1e918:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
   1e91a:	b33b      	cbz	r3, 1e96c <SX1276SetRx+0x104>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
   1e91c:	f00a fbcc 	bl	290b8 <SX1276Read>
   1e920:	f040 0141 	orr.w	r1, r0, #65	; 0x41
   1e924:	b2c9      	uxtb	r1, r1
   1e926:	2033      	movs	r0, #51	; 0x33
   1e928:	f00a fbbb 	bl	290a2 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
   1e92c:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
   1e92e:	203b      	movs	r0, #59	; 0x3b
   1e930:	f00a fbb7 	bl	290a2 <SX1276Write>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
   1e934:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1e938:	2b08      	cmp	r3, #8
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
   1e93a:	f04f 0031 	mov.w	r0, #49	; 0x31
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
   1e93e:	d87d      	bhi.n	1ea3c <SX1276SetRx+0x1d4>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
   1e940:	f00a fbba 	bl	290b8 <SX1276Read>
   1e944:	f000 017f 	and.w	r1, r0, #127	; 0x7f
   1e948:	2031      	movs	r0, #49	; 0x31
   1e94a:	f00a fbaa 	bl	290a2 <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
   1e94e:	2100      	movs	r1, #0
   1e950:	2030      	movs	r0, #48	; 0x30
   1e952:	f00a fba6 	bl	290a2 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
   1e956:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1e95a:	2b08      	cmp	r3, #8
   1e95c:	d81c      	bhi.n	1e998 <SX1276SetRx+0x130>
   1e95e:	e8df f003 	tbb	[pc, r3]
   1e962:	3610      	.short	0x3610
   1e964:	5e544a40 	.word	0x5e544a40
   1e968:	6868      	.short	0x6868
   1e96a:	68          	.byte	0x68
   1e96b:	00          	.byte	0x00
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
   1e96c:	f00a fba4 	bl	290b8 <SX1276Read>
   1e970:	f000 01be 	and.w	r1, r0, #190	; 0xbe
   1e974:	f041 0101 	orr.w	r1, r1, #1
   1e978:	2033      	movs	r0, #51	; 0x33
   1e97a:	f00a fb92 	bl	290a2 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
   1e97e:	211d      	movs	r1, #29
   1e980:	e7d5      	b.n	1e92e <SX1276SetRx+0xc6>
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
   1e982:	202f      	movs	r0, #47	; 0x2f
   1e984:	2148      	movs	r1, #72	; 0x48
   1e986:	f00a fb8c 	bl	290a2 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
   1e98a:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
   1e98e:	f500 50f4 	add.w	r0, r0, #7808	; 0x1e80
   1e992:	3002      	adds	r0, #2
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
   1e994:	f7e3 fd10 	bl	23b8 <SX1276SetChannel>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
   1e998:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
   1e99c:	f894 7132 	ldrb.w	r7, [r4, #306]	; 0x132
            if( SX1276.Settings.LoRa.FreqHopOn == true )
   1e9a0:	2b00      	cmp	r3, #0
   1e9a2:	d052      	beq.n	1ea4a <SX1276SetRx+0x1e2>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
   1e9a4:	211d      	movs	r1, #29
   1e9a6:	2011      	movs	r0, #17
   1e9a8:	f00a fb7b 	bl	290a2 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
   1e9ac:	2040      	movs	r0, #64	; 0x40
   1e9ae:	f00a fb83 	bl	290b8 <SX1276Read>
   1e9b2:	f000 0133 	and.w	r1, r0, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
   1e9b6:	2040      	movs	r0, #64	; 0x40
   1e9b8:	f00a fb73 	bl	290a2 <SX1276Write>
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
   1e9bc:	2100      	movs	r1, #0
   1e9be:	200f      	movs	r0, #15
   1e9c0:	f00a fb6f 	bl	290a2 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
   1e9c4:	2100      	movs	r1, #0
   1e9c6:	200d      	movs	r0, #13
   1e9c8:	f00a fb6b 	bl	290a2 <SX1276Write>
        break;
   1e9cc:	e758      	b.n	1e880 <SX1276SetRx+0x18>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
   1e9ce:	202f      	movs	r0, #47	; 0x2f
   1e9d0:	2144      	movs	r1, #68	; 0x44
   1e9d2:	f00a fb66 	bl	290a2 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
   1e9d6:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
   1e9da:	f500 5022 	add.w	r0, r0, #10368	; 0x2880
   1e9de:	3034      	adds	r0, #52	; 0x34
   1e9e0:	e7d8      	b.n	1e994 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
   1e9e2:	202f      	movs	r0, #47	; 0x2f
   1e9e4:	2144      	movs	r1, #68	; 0x44
   1e9e6:	f00a fb5c 	bl	290a2 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
   1e9ea:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
   1e9ee:	f500 5074 	add.w	r0, r0, #15616	; 0x3d00
   1e9f2:	3004      	adds	r0, #4
   1e9f4:	e7ce      	b.n	1e994 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
   1e9f6:	202f      	movs	r0, #47	; 0x2f
   1e9f8:	2144      	movs	r1, #68	; 0x44
   1e9fa:	f00a fb52 	bl	290a2 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
   1e9fe:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
   1ea02:	f500 40a2 	add.w	r0, r0, #20736	; 0x5100
   1ea06:	305e      	adds	r0, #94	; 0x5e
   1ea08:	e7c4      	b.n	1e994 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
   1ea0a:	202f      	movs	r0, #47	; 0x2f
   1ea0c:	2144      	movs	r1, #68	; 0x44
   1ea0e:	f00a fb48 	bl	290a2 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
   1ea12:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
   1ea16:	f500 40f4 	add.w	r0, r0, #31232	; 0x7a00
   1ea1a:	3012      	adds	r0, #18
   1ea1c:	e7ba      	b.n	1e994 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
   1ea1e:	202f      	movs	r0, #47	; 0x2f
   1ea20:	2144      	movs	r1, #68	; 0x44
   1ea22:	f00a fb3e 	bl	290a2 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
   1ea26:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
   1ea2a:	f500 4022 	add.w	r0, r0, #41472	; 0xa200
   1ea2e:	30c6      	adds	r0, #198	; 0xc6
   1ea30:	e7b0      	b.n	1e994 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
   1ea32:	2140      	movs	r1, #64	; 0x40
   1ea34:	202f      	movs	r0, #47	; 0x2f
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
   1ea36:	f00a fb34 	bl	290a2 <SX1276Write>
   1ea3a:	e7ad      	b.n	1e998 <SX1276SetRx+0x130>
   1ea3c:	f00a fb3c 	bl	290b8 <SX1276Read>
   1ea40:	f060 017f 	orn	r1, r0, #127	; 0x7f
   1ea44:	b2c9      	uxtb	r1, r1
   1ea46:	2031      	movs	r0, #49	; 0x31
   1ea48:	e7f5      	b.n	1ea36 <SX1276SetRx+0x1ce>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
   1ea4a:	211f      	movs	r1, #31
   1ea4c:	2011      	movs	r0, #17
   1ea4e:	f00a fb28 	bl	290a2 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
   1ea52:	2040      	movs	r0, #64	; 0x40
   1ea54:	f00a fb30 	bl	290b8 <SX1276Read>
   1ea58:	f000 013f 	and.w	r1, r0, #63	; 0x3f
   1ea5c:	e7ab      	b.n	1e9b6 <SX1276SetRx+0x14e>
        if( rxContinuous == true )
   1ea5e:	b127      	cbz	r7, 1ea6a <SX1276SetRx+0x202>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
   1ea60:	2005      	movs	r0, #5
}
   1ea62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
   1ea66:	f00a bb32 	b.w	290ce <SX1276SetOpMode>
   1ea6a:	2006      	movs	r0, #6
   1ea6c:	e7f9      	b.n	1ea62 <SX1276SetRx+0x1fa>
   1ea6e:	bf00      	nop
   1ea70:	200021a4 	.word	0x200021a4
   1ea74:	200022e8 	.word	0x200022e8
   1ea78:	20002ab2 	.word	0x20002ab2
   1ea7c:	2000218c 	.word	0x2000218c
   1ea80:	20002174 	.word	0x20002174

0001ea84 <SX1276SetTx>:
{
   1ea84:	b510      	push	{r4, lr}
   1ea86:	4604      	mov	r4, r0
    TimerStop( &RxTimeoutTimer );
   1ea88:	4826      	ldr	r0, [pc, #152]	; (1eb24 <SX1276SetTx+0xa0>)
   1ea8a:	f000 fc81 	bl	1f390 <TimerStop>
    TimerSetValue( &TxTimeoutTimer, timeout );
   1ea8e:	4621      	mov	r1, r4
    switch( SX1276.Settings.Modem )
   1ea90:	4c25      	ldr	r4, [pc, #148]	; (1eb28 <SX1276SetTx+0xa4>)
    TimerSetValue( &TxTimeoutTimer, timeout );
   1ea92:	4826      	ldr	r0, [pc, #152]	; (1eb2c <SX1276SetTx+0xa8>)
   1ea94:	f00a fba8 	bl	291e8 <TimerSetValue>
    switch( SX1276.Settings.Modem )
   1ea98:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   1ea9c:	b163      	cbz	r3, 1eab8 <SX1276SetTx+0x34>
   1ea9e:	2b01      	cmp	r3, #1
   1eaa0:	d024      	beq.n	1eaec <SX1276SetTx+0x68>
    TimerStart( &TxTimeoutTimer );
   1eaa2:	4822      	ldr	r0, [pc, #136]	; (1eb2c <SX1276SetTx+0xa8>)
    SX1276.Settings.State = RF_TX_RUNNING;
   1eaa4:	2302      	movs	r3, #2
   1eaa6:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    TimerStart( &TxTimeoutTimer );
   1eaaa:	f000 fbfb 	bl	1f2a4 <TimerStart>
}
   1eaae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
   1eab2:	2003      	movs	r0, #3
   1eab4:	f00a bb0b 	b.w	290ce <SX1276SetOpMode>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
   1eab8:	2040      	movs	r0, #64	; 0x40
   1eaba:	f00a fafd 	bl	290b8 <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO1_MASK &
   1eabe:	f000 0103 	and.w	r1, r0, #3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
   1eac2:	f041 0110 	orr.w	r1, r1, #16
   1eac6:	2040      	movs	r0, #64	; 0x40
   1eac8:	f00a faeb 	bl	290a2 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
   1eacc:	2041      	movs	r0, #65	; 0x41
   1eace:	f00a faf3 	bl	290b8 <SX1276Read>
   1ead2:	f000 013e 	and.w	r1, r0, #62	; 0x3e
   1ead6:	2041      	movs	r0, #65	; 0x41
   1ead8:	f00a fae3 	bl	290a2 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
   1eadc:	2035      	movs	r0, #53	; 0x35
   1eade:	f00a faeb 	bl	290b8 <SX1276Read>
   1eae2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   1eae6:	f884 011a 	strb.w	r0, [r4, #282]	; 0x11a
        break;
   1eaea:	e7da      	b.n	1eaa2 <SX1276SetTx+0x1e>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
   1eaec:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
   1eaf0:	b173      	cbz	r3, 1eb10 <SX1276SetTx+0x8c>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
   1eaf2:	21f5      	movs	r1, #245	; 0xf5
   1eaf4:	2011      	movs	r0, #17
   1eaf6:	f00a fad4 	bl	290a2 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
   1eafa:	2040      	movs	r0, #64	; 0x40
   1eafc:	f00a fadc 	bl	290b8 <SX1276Read>
   1eb00:	f000 0133 	and.w	r1, r0, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
   1eb04:	f041 0140 	orr.w	r1, r1, #64	; 0x40
   1eb08:	2040      	movs	r0, #64	; 0x40
   1eb0a:	f00a faca 	bl	290a2 <SX1276Write>
   1eb0e:	e7c8      	b.n	1eaa2 <SX1276SetTx+0x1e>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
   1eb10:	21f7      	movs	r1, #247	; 0xf7
   1eb12:	2011      	movs	r0, #17
   1eb14:	f00a fac5 	bl	290a2 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
   1eb18:	2040      	movs	r0, #64	; 0x40
   1eb1a:	f00a facd 	bl	290b8 <SX1276Read>
   1eb1e:	f000 013f 	and.w	r1, r0, #63	; 0x3f
   1eb22:	e7ef      	b.n	1eb04 <SX1276SetTx+0x80>
   1eb24:	2000218c 	.word	0x2000218c
   1eb28:	200021a4 	.word	0x200021a4
   1eb2c:	200022e8 	.word	0x200022e8

0001eb30 <SX1276SetModem>:
{
   1eb30:	b510      	push	{r4, lr}
   1eb32:	4604      	mov	r4, r0
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
   1eb34:	2001      	movs	r0, #1
   1eb36:	f00a fabf 	bl	290b8 <SX1276Read>
        SX1276.Settings.Modem = MODEM_LORA;
   1eb3a:	f3c0 10c0 	ubfx	r0, r0, #7, #1
    if( SX1276.Settings.Modem == modem )
   1eb3e:	42a0      	cmp	r0, r4
   1eb40:	4b17      	ldr	r3, [pc, #92]	; (1eba0 <SX1276SetModem+0x70>)
   1eb42:	d102      	bne.n	1eb4a <SX1276SetModem+0x1a>
   1eb44:	f883 00e1 	strb.w	r0, [r3, #225]	; 0xe1
}
   1eb48:	bd10      	pop	{r4, pc}
    switch( SX1276.Settings.Modem )
   1eb4a:	2c01      	cmp	r4, #1
    SX1276.Settings.Modem = modem;
   1eb4c:	f883 40e1 	strb.w	r4, [r3, #225]	; 0xe1
        SX1276SetOpMode( RF_OPMODE_SLEEP );
   1eb50:	f04f 0000 	mov.w	r0, #0
    switch( SX1276.Settings.Modem )
   1eb54:	d013      	beq.n	1eb7e <SX1276SetModem+0x4e>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
   1eb56:	f00a faba 	bl	290ce <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
   1eb5a:	2001      	movs	r0, #1
   1eb5c:	f00a faac 	bl	290b8 <SX1276Read>
   1eb60:	f000 017f 	and.w	r1, r0, #127	; 0x7f
   1eb64:	2001      	movs	r0, #1
   1eb66:	f00a fa9c 	bl	290a2 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
   1eb6a:	2100      	movs	r1, #0
   1eb6c:	2040      	movs	r0, #64	; 0x40
   1eb6e:	f00a fa98 	bl	290a2 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
   1eb72:	2130      	movs	r1, #48	; 0x30
}
   1eb74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SX1276Write( REG_DIOMAPPING2, 0x00 );
   1eb78:	2041      	movs	r0, #65	; 0x41
   1eb7a:	f00a ba92 	b.w	290a2 <SX1276Write>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
   1eb7e:	f00a faa6 	bl	290ce <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
   1eb82:	4620      	mov	r0, r4
   1eb84:	f00a fa98 	bl	290b8 <SX1276Read>
   1eb88:	f060 017f 	orn	r1, r0, #127	; 0x7f
   1eb8c:	b2c9      	uxtb	r1, r1
   1eb8e:	4620      	mov	r0, r4
   1eb90:	f00a fa87 	bl	290a2 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
   1eb94:	2100      	movs	r1, #0
   1eb96:	2040      	movs	r0, #64	; 0x40
   1eb98:	f00a fa83 	bl	290a2 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
   1eb9c:	2100      	movs	r1, #0
   1eb9e:	e7e9      	b.n	1eb74 <SX1276SetModem+0x44>
   1eba0:	200021a4 	.word	0x200021a4

0001eba4 <SX1276Init>:
{
   1eba4:	b538      	push	{r3, r4, r5, lr}
    RadioEvents = events;
   1eba6:	4b17      	ldr	r3, [pc, #92]	; (1ec04 <SX1276Init+0x60>)
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
   1eba8:	4917      	ldr	r1, [pc, #92]	; (1ec08 <SX1276Init+0x64>)
    RadioEvents = events;
   1ebaa:	6018      	str	r0, [r3, #0]
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
   1ebac:	4817      	ldr	r0, [pc, #92]	; (1ec0c <SX1276Init+0x68>)
   1ebae:	4c18      	ldr	r4, [pc, #96]	; (1ec10 <SX1276Init+0x6c>)
   1ebb0:	f00a fb12 	bl	291d8 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
   1ebb4:	4914      	ldr	r1, [pc, #80]	; (1ec08 <SX1276Init+0x64>)
   1ebb6:	4817      	ldr	r0, [pc, #92]	; (1ec14 <SX1276Init+0x70>)
   1ebb8:	f00a fb0e 	bl	291d8 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
   1ebbc:	4912      	ldr	r1, [pc, #72]	; (1ec08 <SX1276Init+0x64>)
   1ebbe:	4816      	ldr	r0, [pc, #88]	; (1ec18 <SX1276Init+0x74>)
   1ebc0:	f00a fb0a 	bl	291d8 <TimerInit>
    SX1276Reset( );
   1ebc4:	f7ff fb54 	bl	1e270 <SX1276Reset>
    RxChainCalibration( );
   1ebc8:	f7e3 fc1e 	bl	2408 <RxChainCalibration>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
   1ebcc:	2000      	movs	r0, #0
   1ebce:	f00a fa7e 	bl	290ce <SX1276SetOpMode>
    SX1276IoIrqInit( DioIrq );
   1ebd2:	4812      	ldr	r0, [pc, #72]	; (1ec1c <SX1276Init+0x78>)
   1ebd4:	f7ff fb62 	bl	1e29c <SX1276IoIrqInit>
   1ebd8:	2500      	movs	r5, #0
        SX1276SetModem( RadioRegsInit[i].Modem );
   1ebda:	7820      	ldrb	r0, [r4, #0]
   1ebdc:	f7ff ffa8 	bl	1eb30 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
   1ebe0:	3501      	adds	r5, #1
   1ebe2:	78a1      	ldrb	r1, [r4, #2]
   1ebe4:	7860      	ldrb	r0, [r4, #1]
   1ebe6:	f00a fa5c 	bl	290a2 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
   1ebea:	2d10      	cmp	r5, #16
   1ebec:	f104 0403 	add.w	r4, r4, #3
   1ebf0:	d1f3      	bne.n	1ebda <SX1276Init+0x36>
    SX1276SetModem( MODEM_FSK );
   1ebf2:	2000      	movs	r0, #0
   1ebf4:	f7ff ff9c 	bl	1eb30 <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
   1ebf8:	4b09      	ldr	r3, [pc, #36]	; (1ec20 <SX1276Init+0x7c>)
   1ebfa:	2200      	movs	r2, #0
   1ebfc:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
   1ec00:	bd38      	pop	{r3, r4, r5, pc}
   1ec02:	bf00      	nop
   1ec04:	20002170 	.word	0x20002170
   1ec08:	0001f1bd 	.word	0x0001f1bd
   1ec0c:	200022e8 	.word	0x200022e8
   1ec10:	0002ec8e 	.word	0x0002ec8e
   1ec14:	2000218c 	.word	0x2000218c
   1ec18:	20002174 	.word	0x20002174
   1ec1c:	20007c10 	.word	0x20007c10
   1ec20:	200021a4 	.word	0x200021a4

0001ec24 <SX1276SetTxContinuousWave>:
{
   1ec24:	b530      	push	{r4, r5, lr}
    uint32_t timeout = ( uint32_t )( time * 1000 );
   1ec26:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
   1ec2a:	b08b      	sub	sp, #44	; 0x2c
    uint32_t timeout = ( uint32_t )( time * 1000 );
   1ec2c:	4354      	muls	r4, r2
{
   1ec2e:	460d      	mov	r5, r1
    SX1276SetChannel( freq );
   1ec30:	f7e3 fbc2 	bl	23b8 <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
   1ec34:	2300      	movs	r3, #0
   1ec36:	2205      	movs	r2, #5
   1ec38:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1ec3c:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
   1ec40:	e9cd 3306 	strd	r3, r3, [sp, #24]
   1ec44:	e9cd 3304 	strd	r3, r3, [sp, #16]
   1ec48:	9303      	str	r3, [sp, #12]
   1ec4a:	4618      	mov	r0, r3
   1ec4c:	4629      	mov	r1, r5
   1ec4e:	9200      	str	r2, [sp, #0]
   1ec50:	9408      	str	r4, [sp, #32]
   1ec52:	461a      	mov	r2, r3
   1ec54:	f7e3 fea8 	bl	29a8 <SX1276SetTxConfig>
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
   1ec58:	2031      	movs	r0, #49	; 0x31
   1ec5a:	f00a fa2d 	bl	290b8 <SX1276Read>
   1ec5e:	f000 01bf 	and.w	r1, r0, #191	; 0xbf
   1ec62:	2031      	movs	r0, #49	; 0x31
   1ec64:	f00a fa1d 	bl	290a2 <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
   1ec68:	4d0c      	ldr	r5, [pc, #48]	; (1ec9c <SX1276SetTxContinuousWave+0x78>)
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
   1ec6a:	21f0      	movs	r1, #240	; 0xf0
   1ec6c:	2040      	movs	r0, #64	; 0x40
   1ec6e:	f00a fa18 	bl	290a2 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
   1ec72:	21a0      	movs	r1, #160	; 0xa0
   1ec74:	2041      	movs	r0, #65	; 0x41
   1ec76:	f00a fa14 	bl	290a2 <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
   1ec7a:	4621      	mov	r1, r4
   1ec7c:	4628      	mov	r0, r5
   1ec7e:	f00a fab3 	bl	291e8 <TimerSetValue>
    SX1276.Settings.State = RF_TX_RUNNING;
   1ec82:	4b07      	ldr	r3, [pc, #28]	; (1eca0 <SX1276SetTxContinuousWave+0x7c>)
   1ec84:	2202      	movs	r2, #2
    TimerStart( &TxTimeoutTimer );
   1ec86:	4628      	mov	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
   1ec88:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    TimerStart( &TxTimeoutTimer );
   1ec8c:	f000 fb0a 	bl	1f2a4 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
   1ec90:	2003      	movs	r0, #3
}
   1ec92:	b00b      	add	sp, #44	; 0x2c
   1ec94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
   1ec98:	f00a ba19 	b.w	290ce <SX1276SetOpMode>
   1ec9c:	200022e8 	.word	0x200022e8
   1eca0:	200021a4 	.word	0x200021a4

0001eca4 <SX1276OnDio3Irq>:
{
   1eca4:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
   1eca6:	4b11      	ldr	r3, [pc, #68]	; (1ecec <SX1276OnDio3Irq+0x48>)
   1eca8:	f893 60e1 	ldrb.w	r6, [r3, #225]	; 0xe1
   1ecac:	2e01      	cmp	r6, #1
   1ecae:	d11c      	bne.n	1ecea <SX1276OnDio3Irq+0x46>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
   1ecb0:	2012      	movs	r0, #18
   1ecb2:	f00a fa01 	bl	290b8 <SX1276Read>
   1ecb6:	f010 0401 	ands.w	r4, r0, #1
   1ecba:	4d0d      	ldr	r5, [pc, #52]	; (1ecf0 <SX1276OnDio3Irq+0x4c>)
   1ecbc:	d00b      	beq.n	1ecd6 <SX1276OnDio3Irq+0x32>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
   1ecbe:	2105      	movs	r1, #5
   1ecc0:	2012      	movs	r0, #18
   1ecc2:	f00a f9ee 	bl	290a2 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
   1ecc6:	682b      	ldr	r3, [r5, #0]
   1ecc8:	b17b      	cbz	r3, 1ecea <SX1276OnDio3Irq+0x46>
   1ecca:	699b      	ldr	r3, [r3, #24]
   1eccc:	b16b      	cbz	r3, 1ecea <SX1276OnDio3Irq+0x46>
                RadioEvents->CadDone( true );
   1ecce:	4630      	mov	r0, r6
}
   1ecd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                RadioEvents->CadDone( false );
   1ecd4:	4718      	bx	r3
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
   1ecd6:	2104      	movs	r1, #4
   1ecd8:	2012      	movs	r0, #18
   1ecda:	f00a f9e2 	bl	290a2 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
   1ecde:	682b      	ldr	r3, [r5, #0]
   1ece0:	b11b      	cbz	r3, 1ecea <SX1276OnDio3Irq+0x46>
   1ece2:	699b      	ldr	r3, [r3, #24]
   1ece4:	b10b      	cbz	r3, 1ecea <SX1276OnDio3Irq+0x46>
                RadioEvents->CadDone( false );
   1ece6:	4620      	mov	r0, r4
   1ece8:	e7f2      	b.n	1ecd0 <SX1276OnDio3Irq+0x2c>
}
   1ecea:	bd70      	pop	{r4, r5, r6, pc}
   1ecec:	200021a4 	.word	0x200021a4
   1ecf0:	20002170 	.word	0x20002170

0001ecf4 <SX1276Send>:
{
   1ecf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    switch( SX1276.Settings.Modem )
   1ecf6:	4c3d      	ldr	r4, [pc, #244]	; (1edec <SX1276Send+0xf8>)
{
   1ecf8:	f88d 1007 	strb.w	r1, [sp, #7]
    switch( SX1276.Settings.Modem )
   1ecfc:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
{
   1ed00:	4605      	mov	r5, r0
    switch( SX1276.Settings.Modem )
   1ed02:	b133      	cbz	r3, 1ed12 <SX1276Send+0x1e>
   1ed04:	2b01      	cmp	r3, #1
   1ed06:	d034      	beq.n	1ed72 <SX1276Send+0x7e>
   1ed08:	2000      	movs	r0, #0
    SX1276SetTx( txTimeout );
   1ed0a:	f7ff febb 	bl	1ea84 <SX1276SetTx>
}
   1ed0e:	b003      	add	sp, #12
   1ed10:	bd30      	pop	{r4, r5, pc}
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
   1ed12:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
            if( SX1276.Settings.Fsk.FixLen == false )
   1ed16:	f894 30fe 	ldrb.w	r3, [r4, #254]	; 0xfe
            SX1276.Settings.FskPacketHandler.Size = size;
   1ed1a:	f89d 1007 	ldrb.w	r1, [sp, #7]
   1ed1e:	f8a4 1116 	strh.w	r1, [r4, #278]	; 0x116
            if( SX1276.Settings.Fsk.FixLen == false )
   1ed22:	b9d3      	cbnz	r3, 1ed5a <SX1276Send+0x66>
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
   1ed24:	2101      	movs	r1, #1
   1ed26:	f10d 0007 	add.w	r0, sp, #7
   1ed2a:	f00a fa30 	bl	2918e <SX1276WriteFifo>
            if( ( size > 0 ) && ( size <= 64 ) )
   1ed2e:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1ed32:	1e53      	subs	r3, r2, #1
   1ed34:	2b3f      	cmp	r3, #63	; 0x3f
   1ed36:	d814      	bhi.n	1ed62 <SX1276Send+0x6e>
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
   1ed38:	f884 211b 	strb.w	r2, [r4, #283]	; 0x11b
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
   1ed3c:	4628      	mov	r0, r5
   1ed3e:	f894 111b 	ldrb.w	r1, [r4, #283]	; 0x11b
   1ed42:	f00a fa24 	bl	2918e <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
   1ed46:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
   1ed4a:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
   1ed4e:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
   1ed52:	4413      	add	r3, r2
   1ed54:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
        break;
   1ed58:	e7d7      	b.n	1ed0a <SX1276Send+0x16>
                SX1276Write( REG_PAYLOADLENGTH, size );
   1ed5a:	2032      	movs	r0, #50	; 0x32
   1ed5c:	f00a f9a1 	bl	290a2 <SX1276Write>
   1ed60:	e7e5      	b.n	1ed2e <SX1276Send+0x3a>
                memcpy1( RxTxBuffer, buffer, size );
   1ed62:	4823      	ldr	r0, [pc, #140]	; (1edf0 <SX1276Send+0xfc>)
   1ed64:	4629      	mov	r1, r5
   1ed66:	f00a fa68 	bl	2923a <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
   1ed6a:	2320      	movs	r3, #32
   1ed6c:	f884 311b 	strb.w	r3, [r4, #283]	; 0x11b
   1ed70:	e7e4      	b.n	1ed3c <SX1276Send+0x48>
            if( SX1276.Settings.LoRa.IqInverted == true )
   1ed72:	f894 3131 	ldrb.w	r3, [r4, #305]	; 0x131
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
   1ed76:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
   1ed78:	b363      	cbz	r3, 1edd4 <SX1276Send+0xe0>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
   1ed7a:	f00a f99d 	bl	290b8 <SX1276Read>
   1ed7e:	f000 01be 	and.w	r1, r0, #190	; 0xbe
   1ed82:	2033      	movs	r0, #51	; 0x33
   1ed84:	f00a f98d 	bl	290a2 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
   1ed88:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
   1ed8a:	203b      	movs	r0, #59	; 0x3b
   1ed8c:	f00a f989 	bl	290a2 <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
   1ed90:	f89d 1007 	ldrb.w	r1, [sp, #7]
   1ed94:	f884 1140 	strb.w	r1, [r4, #320]	; 0x140
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
   1ed98:	2022      	movs	r0, #34	; 0x22
   1ed9a:	f00a f982 	bl	290a2 <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
   1ed9e:	2100      	movs	r1, #0
   1eda0:	200e      	movs	r0, #14
   1eda2:	f00a f97e 	bl	290a2 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
   1eda6:	2100      	movs	r1, #0
   1eda8:	200d      	movs	r0, #13
   1edaa:	f00a f97a 	bl	290a2 <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
   1edae:	2001      	movs	r0, #1
   1edb0:	f00a f982 	bl	290b8 <SX1276Read>
   1edb4:	f030 03f8 	bics.w	r3, r0, #248	; 0xf8
   1edb8:	d104      	bne.n	1edc4 <SX1276Send+0xd0>
                SX1276SetStby( );
   1edba:	f7ff fd3b 	bl	1e834 <SX1276SetStby>
                DelayMs( 1 );
   1edbe:	2001      	movs	r0, #1
   1edc0:	f00a fa39 	bl	29236 <DelayMs>
            SX1276WriteFifo( buffer, size );
   1edc4:	4628      	mov	r0, r5
   1edc6:	f89d 1007 	ldrb.w	r1, [sp, #7]
   1edca:	f00a f9e0 	bl	2918e <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
   1edce:	f8d4 0134 	ldr.w	r0, [r4, #308]	; 0x134
        break;
   1edd2:	e79a      	b.n	1ed0a <SX1276Send+0x16>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
   1edd4:	f00a f970 	bl	290b8 <SX1276Read>
   1edd8:	f000 01be 	and.w	r1, r0, #190	; 0xbe
   1eddc:	f041 0101 	orr.w	r1, r1, #1
   1ede0:	2033      	movs	r0, #51	; 0x33
   1ede2:	f00a f95e 	bl	290a2 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
   1ede6:	211d      	movs	r1, #29
   1ede8:	e7cf      	b.n	1ed8a <SX1276Send+0x96>
   1edea:	bf00      	nop
   1edec:	200021a4 	.word	0x200021a4
   1edf0:	20002ab2 	.word	0x20002ab2

0001edf4 <SX1276OnDio0Irq>:
{
   1edf4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    switch( SX1276.Settings.State )
   1edf6:	4e91      	ldr	r6, [pc, #580]	; (1f03c <SX1276OnDio0Irq+0x248>)
    volatile uint8_t irqFlags = 0;
   1edf8:	2300      	movs	r3, #0
   1edfa:	f88d 3007 	strb.w	r3, [sp, #7]
    switch( SX1276.Settings.State )
   1edfe:	f896 30e0 	ldrb.w	r3, [r6, #224]	; 0xe0
   1ee02:	2b01      	cmp	r3, #1
   1ee04:	4634      	mov	r4, r6
   1ee06:	d004      	beq.n	1ee12 <SX1276OnDio0Irq+0x1e>
   1ee08:	2b02      	cmp	r3, #2
   1ee0a:	f000 8101 	beq.w	1f010 <SX1276OnDio0Irq+0x21c>
}
   1ee0e:	b002      	add	sp, #8
   1ee10:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
   1ee12:	f896 30e1 	ldrb.w	r3, [r6, #225]	; 0xe1
   1ee16:	b33b      	cbz	r3, 1ee68 <SX1276OnDio0Irq+0x74>
   1ee18:	2b01      	cmp	r3, #1
   1ee1a:	d1f8      	bne.n	1ee0e <SX1276OnDio0Irq+0x1a>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
   1ee1c:	2140      	movs	r1, #64	; 0x40
   1ee1e:	2012      	movs	r0, #18
   1ee20:	f00a f93f 	bl	290a2 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
   1ee24:	2012      	movs	r0, #18
   1ee26:	f00a f947 	bl	290b8 <SX1276Read>
   1ee2a:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
   1ee2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1ee32:	4d83      	ldr	r5, [pc, #524]	; (1f040 <SX1276OnDio0Irq+0x24c>)
   1ee34:	f013 0f20 	tst.w	r3, #32
   1ee38:	f000 8098 	beq.w	1ef6c <SX1276OnDio0Irq+0x178>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
   1ee3c:	2120      	movs	r1, #32
   1ee3e:	2012      	movs	r0, #18
   1ee40:	f00a f92f 	bl	290a2 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
   1ee44:	f896 3132 	ldrb.w	r3, [r6, #306]	; 0x132
   1ee48:	b90b      	cbnz	r3, 1ee4e <SX1276OnDio0Irq+0x5a>
                            SX1276.Settings.State = RF_IDLE;
   1ee4a:	f886 30e0 	strb.w	r3, [r6, #224]	; 0xe0
                        TimerStop( &RxTimeoutTimer );
   1ee4e:	487d      	ldr	r0, [pc, #500]	; (1f044 <SX1276OnDio0Irq+0x250>)
   1ee50:	f000 fa9e 	bl	1f390 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
   1ee54:	682b      	ldr	r3, [r5, #0]
   1ee56:	2b00      	cmp	r3, #0
   1ee58:	d0d9      	beq.n	1ee0e <SX1276OnDio0Irq+0x1a>
   1ee5a:	691b      	ldr	r3, [r3, #16]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
   1ee5c:	2b00      	cmp	r3, #0
   1ee5e:	d0d6      	beq.n	1ee0e <SX1276OnDio0Irq+0x1a>
}
   1ee60:	b002      	add	sp, #8
   1ee62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    RadioEvents->TxDone( );
   1ee66:	4718      	bx	r3
                if( SX1276.Settings.Fsk.CrcOn == true )
   1ee68:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
   1ee6c:	4d74      	ldr	r5, [pc, #464]	; (1f040 <SX1276OnDio0Irq+0x24c>)
   1ee6e:	b3ab      	cbz	r3, 1eedc <SX1276OnDio0Irq+0xe8>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
   1ee70:	203f      	movs	r0, #63	; 0x3f
   1ee72:	f00a f921 	bl	290b8 <SX1276Read>
   1ee76:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
   1ee7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1ee7e:	079b      	lsls	r3, r3, #30
   1ee80:	d42c      	bmi.n	1eedc <SX1276OnDio0Irq+0xe8>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
   1ee82:	210b      	movs	r1, #11
   1ee84:	203e      	movs	r0, #62	; 0x3e
   1ee86:	f00a f90c 	bl	290a2 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
   1ee8a:	2110      	movs	r1, #16
   1ee8c:	203f      	movs	r0, #63	; 0x3f
   1ee8e:	f00a f908 	bl	290a2 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
   1ee92:	486c      	ldr	r0, [pc, #432]	; (1f044 <SX1276OnDio0Irq+0x250>)
   1ee94:	f000 fa7c 	bl	1f390 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
   1ee98:	f896 6102 	ldrb.w	r6, [r6, #258]	; 0x102
   1ee9c:	b98e      	cbnz	r6, 1eec2 <SX1276OnDio0Irq+0xce>
                            TimerStop( &RxTimeoutSyncWord );
   1ee9e:	486a      	ldr	r0, [pc, #424]	; (1f048 <SX1276OnDio0Irq+0x254>)
   1eea0:	f000 fa76 	bl	1f390 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
   1eea4:	f884 60e0 	strb.w	r6, [r4, #224]	; 0xe0
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
   1eea8:	682b      	ldr	r3, [r5, #0]
   1eeaa:	b113      	cbz	r3, 1eeb2 <SX1276OnDio0Irq+0xbe>
   1eeac:	691b      	ldr	r3, [r3, #16]
   1eeae:	b103      	cbz	r3, 1eeb2 <SX1276OnDio0Irq+0xbe>
                            RadioEvents->RxError( );
   1eeb0:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
   1eeb2:	2300      	movs	r3, #0
   1eeb4:	f8a4 310c 	strh.w	r3, [r4, #268]	; 0x10c
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
   1eeb8:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
                        SX1276.Settings.FskPacketHandler.Size = 0;
   1eebc:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
                        break;
   1eec0:	e7a5      	b.n	1ee0e <SX1276OnDio0Irq+0x1a>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
   1eec2:	200d      	movs	r0, #13
   1eec4:	f00a f8f8 	bl	290b8 <SX1276Read>
   1eec8:	f040 0140 	orr.w	r1, r0, #64	; 0x40
   1eecc:	b2c9      	uxtb	r1, r1
   1eece:	200d      	movs	r0, #13
   1eed0:	f00a f8e7 	bl	290a2 <SX1276Write>
                            TimerStart( &RxTimeoutSyncWord );
   1eed4:	485c      	ldr	r0, [pc, #368]	; (1f048 <SX1276OnDio0Irq+0x254>)
   1eed6:	f000 f9e5 	bl	1f2a4 <TimerStart>
   1eeda:	e7e5      	b.n	1eea8 <SX1276OnDio0Irq+0xb4>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
   1eedc:	f8b4 1116 	ldrh.w	r1, [r4, #278]	; 0x116
   1eee0:	f8b4 0118 	ldrh.w	r0, [r4, #280]	; 0x118
   1eee4:	4e59      	ldr	r6, [pc, #356]	; (1f04c <SX1276OnDio0Irq+0x258>)
   1eee6:	ea51 0300 	orrs.w	r3, r1, r0
   1eeea:	d10a      	bne.n	1ef02 <SX1276OnDio0Irq+0x10e>
                    if( SX1276.Settings.Fsk.FixLen == false )
   1eeec:	f894 30fe 	ldrb.w	r3, [r4, #254]	; 0xfe
   1eef0:	bb4b      	cbnz	r3, 1ef46 <SX1276OnDio0Irq+0x152>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
   1eef2:	4857      	ldr	r0, [pc, #348]	; (1f050 <SX1276OnDio0Irq+0x25c>)
   1eef4:	2101      	movs	r1, #1
   1eef6:	f00a f94f 	bl	29198 <SX1276ReadFifo>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
   1eefa:	f8b4 0118 	ldrh.w	r0, [r4, #280]	; 0x118
   1eefe:	f894 1116 	ldrb.w	r1, [r4, #278]	; 0x116
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
   1ef02:	1a09      	subs	r1, r1, r0
   1ef04:	b2c9      	uxtb	r1, r1
   1ef06:	4430      	add	r0, r6
   1ef08:	f00a f946 	bl	29198 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
   1ef0c:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
                TimerStop( &RxTimeoutTimer );
   1ef10:	484c      	ldr	r0, [pc, #304]	; (1f044 <SX1276OnDio0Irq+0x250>)
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
   1ef12:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
                TimerStop( &RxTimeoutTimer );
   1ef16:	f000 fa3b 	bl	1f390 <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
   1ef1a:	f894 3102 	ldrb.w	r3, [r4, #258]	; 0x102
   1ef1e:	b9c3      	cbnz	r3, 1ef52 <SX1276OnDio0Irq+0x15e>
                    TimerStop( &RxTimeoutSyncWord );
   1ef20:	4849      	ldr	r0, [pc, #292]	; (1f048 <SX1276OnDio0Irq+0x254>)
                    SX1276.Settings.State = RF_IDLE;
   1ef22:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                    TimerStop( &RxTimeoutSyncWord );
   1ef26:	f000 fa33 	bl	1f390 <TimerStop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
   1ef2a:	682b      	ldr	r3, [r5, #0]
   1ef2c:	2b00      	cmp	r3, #0
   1ef2e:	d0c0      	beq.n	1eeb2 <SX1276OnDio0Irq+0xbe>
   1ef30:	689d      	ldr	r5, [r3, #8]
   1ef32:	2d00      	cmp	r5, #0
   1ef34:	d0bd      	beq.n	1eeb2 <SX1276OnDio0Irq+0xbe>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
   1ef36:	f994 210e 	ldrsb.w	r2, [r4, #270]	; 0x10e
   1ef3a:	f8b4 1116 	ldrh.w	r1, [r4, #278]	; 0x116
   1ef3e:	4843      	ldr	r0, [pc, #268]	; (1f04c <SX1276OnDio0Irq+0x258>)
   1ef40:	2300      	movs	r3, #0
   1ef42:	47a8      	blx	r5
   1ef44:	e7b5      	b.n	1eeb2 <SX1276OnDio0Irq+0xbe>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
   1ef46:	2032      	movs	r0, #50	; 0x32
   1ef48:	f00a f8b6 	bl	290b8 <SX1276Read>
   1ef4c:	f8a4 0116 	strh.w	r0, [r4, #278]	; 0x116
   1ef50:	e7d3      	b.n	1eefa <SX1276OnDio0Irq+0x106>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
   1ef52:	200d      	movs	r0, #13
   1ef54:	f00a f8b0 	bl	290b8 <SX1276Read>
   1ef58:	f040 0140 	orr.w	r1, r0, #64	; 0x40
   1ef5c:	b2c9      	uxtb	r1, r1
   1ef5e:	200d      	movs	r0, #13
   1ef60:	f00a f89f 	bl	290a2 <SX1276Write>
                    TimerStart( &RxTimeoutSyncWord );
   1ef64:	4838      	ldr	r0, [pc, #224]	; (1f048 <SX1276OnDio0Irq+0x254>)
   1ef66:	f000 f99d 	bl	1f2a4 <TimerStart>
   1ef6a:	e7de      	b.n	1ef2a <SX1276OnDio0Irq+0x136>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
   1ef6c:	2019      	movs	r0, #25
   1ef6e:	f00a f8a3 	bl	290b8 <SX1276Read>
   1ef72:	b240      	sxtb	r0, r0
   1ef74:	3002      	adds	r0, #2
   1ef76:	1080      	asrs	r0, r0, #2
   1ef78:	f886 013c 	strb.w	r0, [r6, #316]	; 0x13c
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
   1ef7c:	201a      	movs	r0, #26
   1ef7e:	f00a f89b 	bl	290b8 <SX1276Read>
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
   1ef82:	f996 213c 	ldrsb.w	r2, [r6, #316]	; 0x13c
   1ef86:	4933      	ldr	r1, [pc, #204]	; (1f054 <SX1276OnDio0Irq+0x260>)
   1ef88:	2a00      	cmp	r2, #0
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
   1ef8a:	b203      	sxth	r3, r0
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
   1ef8c:	f340 100b 	sbfx	r0, r0, #4, #12
   1ef90:	da37      	bge.n	1f002 <SX1276OnDio0Irq+0x20e>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
   1ef92:	f8d6 60e4 	ldr.w	r6, [r6, #228]	; 0xe4
   1ef96:	b212      	sxth	r2, r2
   1ef98:	428e      	cmp	r6, r1
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
   1ef9a:	bf8c      	ite	hi
   1ef9c:	3a9d      	subhi	r2, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
   1ef9e:	3aa4      	subls	r2, #164	; 0xa4
   1efa0:	4413      	add	r3, r2
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
   1efa2:	4403      	add	r3, r0
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
   1efa4:	2013      	movs	r0, #19
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
   1efa6:	f8a4 313e 	strh.w	r3, [r4, #318]	; 0x13e
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
   1efaa:	f00a f885 	bl	290b8 <SX1276Read>
   1efae:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
   1efb2:	2010      	movs	r0, #16
   1efb4:	f00a f880 	bl	290b8 <SX1276Read>
   1efb8:	4601      	mov	r1, r0
   1efba:	200d      	movs	r0, #13
   1efbc:	f00a f871 	bl	290a2 <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
   1efc0:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
   1efc4:	4821      	ldr	r0, [pc, #132]	; (1f04c <SX1276OnDio0Irq+0x258>)
   1efc6:	f00a f8e7 	bl	29198 <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
   1efca:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
   1efce:	b90b      	cbnz	r3, 1efd4 <SX1276OnDio0Irq+0x1e0>
                        SX1276.Settings.State = RF_IDLE;
   1efd0:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                    TimerStop( &RxTimeoutTimer );
   1efd4:	481b      	ldr	r0, [pc, #108]	; (1f044 <SX1276OnDio0Irq+0x250>)
   1efd6:	f000 f9db 	bl	1f390 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
   1efda:	682b      	ldr	r3, [r5, #0]
   1efdc:	2b00      	cmp	r3, #0
   1efde:	f43f af16 	beq.w	1ee0e <SX1276OnDio0Irq+0x1a>
   1efe2:	689d      	ldr	r5, [r3, #8]
   1efe4:	2d00      	cmp	r5, #0
   1efe6:	f43f af12 	beq.w	1ee0e <SX1276OnDio0Irq+0x1a>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
   1efea:	f994 313c 	ldrsb.w	r3, [r4, #316]	; 0x13c
   1efee:	f9b4 213e 	ldrsh.w	r2, [r4, #318]	; 0x13e
   1eff2:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
   1eff6:	4815      	ldr	r0, [pc, #84]	; (1f04c <SX1276OnDio0Irq+0x258>)
   1eff8:	46ac      	mov	ip, r5
}
   1effa:	b002      	add	sp, #8
   1effc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
   1f000:	4760      	bx	ip
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
   1f002:	f8d6 20e4 	ldr.w	r2, [r6, #228]	; 0xe4
   1f006:	428a      	cmp	r2, r1
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
   1f008:	bf8c      	ite	hi
   1f00a:	3b9d      	subhi	r3, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
   1f00c:	3ba4      	subls	r3, #164	; 0xa4
   1f00e:	e7c8      	b.n	1efa2 <SX1276OnDio0Irq+0x1ae>
            TimerStop( &TxTimeoutTimer );
   1f010:	4811      	ldr	r0, [pc, #68]	; (1f058 <SX1276OnDio0Irq+0x264>)
   1f012:	f000 f9bd 	bl	1f390 <TimerStop>
            switch( SX1276.Settings.Modem )
   1f016:	f896 30e1 	ldrb.w	r3, [r6, #225]	; 0xe1
   1f01a:	2b01      	cmp	r3, #1
   1f01c:	d103      	bne.n	1f026 <SX1276OnDio0Irq+0x232>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
   1f01e:	2108      	movs	r1, #8
   1f020:	2012      	movs	r0, #18
   1f022:	f00a f83e 	bl	290a2 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
   1f026:	2300      	movs	r3, #0
   1f028:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
   1f02c:	4b04      	ldr	r3, [pc, #16]	; (1f040 <SX1276OnDio0Irq+0x24c>)
   1f02e:	681b      	ldr	r3, [r3, #0]
   1f030:	2b00      	cmp	r3, #0
   1f032:	f43f aeec 	beq.w	1ee0e <SX1276OnDio0Irq+0x1a>
   1f036:	681b      	ldr	r3, [r3, #0]
   1f038:	e710      	b.n	1ee5c <SX1276OnDio0Irq+0x68>
   1f03a:	bf00      	nop
   1f03c:	200021a4 	.word	0x200021a4
   1f040:	20002170 	.word	0x20002170
   1f044:	2000218c 	.word	0x2000218c
   1f048:	20002174 	.word	0x20002174
   1f04c:	20002ab2 	.word	0x20002ab2
   1f050:	200022ba 	.word	0x200022ba
   1f054:	1f4add40 	.word	0x1f4add40
   1f058:	200022e8 	.word	0x200022e8

0001f05c <SX1276OnDio1Irq>:
{
   1f05c:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
   1f05e:	4c3b      	ldr	r4, [pc, #236]	; (1f14c <SX1276OnDio1Irq+0xf0>)
   1f060:	f894 60e0 	ldrb.w	r6, [r4, #224]	; 0xe0
   1f064:	2e01      	cmp	r6, #1
   1f066:	4625      	mov	r5, r4
   1f068:	d002      	beq.n	1f070 <SX1276OnDio1Irq+0x14>
   1f06a:	2e02      	cmp	r6, #2
   1f06c:	d04e      	beq.n	1f10c <SX1276OnDio1Irq+0xb0>
}
   1f06e:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
   1f070:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   1f074:	b1ab      	cbz	r3, 1f0a2 <SX1276OnDio1Irq+0x46>
   1f076:	2b01      	cmp	r3, #1
   1f078:	d1f9      	bne.n	1f06e <SX1276OnDio1Irq+0x12>
                TimerStop( &RxTimeoutTimer );
   1f07a:	4835      	ldr	r0, [pc, #212]	; (1f150 <SX1276OnDio1Irq+0xf4>)
   1f07c:	f000 f988 	bl	1f390 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
   1f080:	2180      	movs	r1, #128	; 0x80
   1f082:	2012      	movs	r0, #18
   1f084:	f00a f80d 	bl	290a2 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
   1f088:	2300      	movs	r3, #0
   1f08a:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
   1f08e:	4b31      	ldr	r3, [pc, #196]	; (1f154 <SX1276OnDio1Irq+0xf8>)
   1f090:	681b      	ldr	r3, [r3, #0]
   1f092:	2b00      	cmp	r3, #0
   1f094:	d0eb      	beq.n	1f06e <SX1276OnDio1Irq+0x12>
   1f096:	68db      	ldr	r3, [r3, #12]
   1f098:	2b00      	cmp	r3, #0
   1f09a:	d0e8      	beq.n	1f06e <SX1276OnDio1Irq+0x12>
}
   1f09c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    RadioEvents->RxTimeout( );
   1f0a0:	4718      	bx	r3
                TimerStop( &RxTimeoutSyncWord );
   1f0a2:	482d      	ldr	r0, [pc, #180]	; (1f158 <SX1276OnDio1Irq+0xfc>)
   1f0a4:	f000 f974 	bl	1f390 <TimerStop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
   1f0a8:	f8b4 2116 	ldrh.w	r2, [r4, #278]	; 0x116
   1f0ac:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118
   1f0b0:	4313      	orrs	r3, r2
   1f0b2:	d107      	bne.n	1f0c4 <SX1276OnDio1Irq+0x68>
                    if( SX1276.Settings.Fsk.FixLen == false )
   1f0b4:	f894 30fe 	ldrb.w	r3, [r4, #254]	; 0xfe
   1f0b8:	b9e3      	cbnz	r3, 1f0f4 <SX1276OnDio1Irq+0x98>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
   1f0ba:	4631      	mov	r1, r6
   1f0bc:	f504 708b 	add.w	r0, r4, #278	; 0x116
   1f0c0:	f00a f86a 	bl	29198 <SX1276ReadFifo>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
   1f0c4:	f8b5 2118 	ldrh.w	r2, [r5, #280]	; 0x118
   1f0c8:	f8b5 1116 	ldrh.w	r1, [r5, #278]	; 0x116
   1f0cc:	f895 311a 	ldrb.w	r3, [r5, #282]	; 0x11a
   1f0d0:	4822      	ldr	r0, [pc, #136]	; (1f15c <SX1276OnDio1Irq+0x100>)
   1f0d2:	1a89      	subs	r1, r1, r2
   1f0d4:	4299      	cmp	r1, r3
   1f0d6:	4410      	add	r0, r2
   1f0d8:	db12      	blt.n	1f100 <SX1276OnDio1Irq+0xa4>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
   1f0da:	1e59      	subs	r1, r3, #1
   1f0dc:	b2c9      	uxtb	r1, r1
   1f0de:	f00a f85b 	bl	29198 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
   1f0e2:	f895 311a 	ldrb.w	r3, [r5, #282]	; 0x11a
   1f0e6:	f8b5 2118 	ldrh.w	r2, [r5, #280]	; 0x118
   1f0ea:	4413      	add	r3, r2
   1f0ec:	3b01      	subs	r3, #1
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
   1f0ee:	f8a5 3118 	strh.w	r3, [r5, #280]	; 0x118
   1f0f2:	e7bc      	b.n	1f06e <SX1276OnDio1Irq+0x12>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
   1f0f4:	2032      	movs	r0, #50	; 0x32
   1f0f6:	f009 ffdf 	bl	290b8 <SX1276Read>
   1f0fa:	f8a4 0116 	strh.w	r0, [r4, #278]	; 0x116
   1f0fe:	e7e1      	b.n	1f0c4 <SX1276OnDio1Irq+0x68>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
   1f100:	b2c9      	uxtb	r1, r1
   1f102:	f00a f849 	bl	29198 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
   1f106:	f8b5 3116 	ldrh.w	r3, [r5, #278]	; 0x116
   1f10a:	e7f0      	b.n	1f0ee <SX1276OnDio1Irq+0x92>
            switch( SX1276.Settings.Modem )
   1f10c:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   1f110:	2b00      	cmp	r3, #0
   1f112:	d1ac      	bne.n	1f06e <SX1276OnDio1Irq+0x12>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
   1f114:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
   1f118:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
   1f11c:	f894 111b 	ldrb.w	r1, [r4, #283]	; 0x11b
   1f120:	480e      	ldr	r0, [pc, #56]	; (1f15c <SX1276OnDio1Irq+0x100>)
   1f122:	1a9b      	subs	r3, r3, r2
   1f124:	428b      	cmp	r3, r1
   1f126:	4410      	add	r0, r2
   1f128:	dd09      	ble.n	1f13e <SX1276OnDio1Irq+0xe2>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
   1f12a:	f00a f830 	bl	2918e <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
   1f12e:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
   1f132:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
   1f136:	4413      	add	r3, r2
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
   1f138:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
}
   1f13c:	e797      	b.n	1f06e <SX1276OnDio1Irq+0x12>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
   1f13e:	b2d9      	uxtb	r1, r3
   1f140:	f00a f825 	bl	2918e <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
   1f144:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
   1f148:	e7f6      	b.n	1f138 <SX1276OnDio1Irq+0xdc>
   1f14a:	bf00      	nop
   1f14c:	200021a4 	.word	0x200021a4
   1f150:	2000218c 	.word	0x2000218c
   1f154:	20002170 	.word	0x20002170
   1f158:	20002174 	.word	0x20002174
   1f15c:	20002ab2 	.word	0x20002ab2

0001f160 <SX1276SetMaxPayloadLength>:
{
   1f160:	b538      	push	{r3, r4, r5, lr}
   1f162:	4605      	mov	r5, r0
   1f164:	460c      	mov	r4, r1
    SX1276SetModem( modem );
   1f166:	f7ff fce3 	bl	1eb30 <SX1276SetModem>
    switch( modem )
   1f16a:	b115      	cbz	r5, 1f172 <SX1276SetMaxPayloadLength+0x12>
   1f16c:	2d01      	cmp	r5, #1
   1f16e:	d00b      	beq.n	1f188 <SX1276SetMaxPayloadLength+0x28>
}
   1f170:	bd38      	pop	{r3, r4, r5, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
   1f172:	4b07      	ldr	r3, [pc, #28]	; (1f190 <SX1276SetMaxPayloadLength+0x30>)
   1f174:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
   1f178:	2b00      	cmp	r3, #0
   1f17a:	d1f9      	bne.n	1f170 <SX1276SetMaxPayloadLength+0x10>
            SX1276Write( REG_PAYLOADLENGTH, max );
   1f17c:	4621      	mov	r1, r4
   1f17e:	2032      	movs	r0, #50	; 0x32
}
   1f180:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
   1f184:	f009 bf8d 	b.w	290a2 <SX1276Write>
   1f188:	4621      	mov	r1, r4
   1f18a:	2023      	movs	r0, #35	; 0x23
   1f18c:	e7f8      	b.n	1f180 <SX1276SetMaxPayloadLength+0x20>
   1f18e:	bf00      	nop
   1f190:	200021a4 	.word	0x200021a4

0001f194 <SX1276SetPublicNetwork>:
{
   1f194:	b510      	push	{r4, lr}
   1f196:	4604      	mov	r4, r0
    SX1276SetModem( MODEM_LORA );
   1f198:	2001      	movs	r0, #1
   1f19a:	f7ff fcc9 	bl	1eb30 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
   1f19e:	4b06      	ldr	r3, [pc, #24]	; (1f1b8 <SX1276SetPublicNetwork+0x24>)
   1f1a0:	f883 4138 	strb.w	r4, [r3, #312]	; 0x138
    if( enable == true )
   1f1a4:	b12c      	cbz	r4, 1f1b2 <SX1276SetPublicNetwork+0x1e>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
   1f1a6:	2134      	movs	r1, #52	; 0x34
}
   1f1a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
   1f1ac:	2039      	movs	r0, #57	; 0x39
   1f1ae:	f009 bf78 	b.w	290a2 <SX1276Write>
   1f1b2:	2112      	movs	r1, #18
   1f1b4:	e7f8      	b.n	1f1a8 <SX1276SetPublicNetwork+0x14>
   1f1b6:	bf00      	nop
   1f1b8:	200021a4 	.word	0x200021a4

0001f1bc <SX1276OnTimeoutIrq>:
{
   1f1bc:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
   1f1be:	4c2f      	ldr	r4, [pc, #188]	; (1f27c <SX1276OnTimeoutIrq+0xc0>)
   1f1c0:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   1f1c4:	2b01      	cmp	r3, #1
   1f1c6:	4626      	mov	r6, r4
   1f1c8:	d002      	beq.n	1f1d0 <SX1276OnTimeoutIrq+0x14>
   1f1ca:	2b02      	cmp	r3, #2
   1f1cc:	d030      	beq.n	1f230 <SX1276OnTimeoutIrq+0x74>
}
   1f1ce:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
   1f1d0:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   1f1d4:	b9e3      	cbnz	r3, 1f210 <SX1276OnTimeoutIrq+0x54>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
   1f1d6:	f8a4 310c 	strh.w	r3, [r4, #268]	; 0x10c
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
   1f1da:	210b      	movs	r1, #11
   1f1dc:	203e      	movs	r0, #62	; 0x3e
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
   1f1de:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = 0;
   1f1e2:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
   1f1e6:	f009 ff5c 	bl	290a2 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
   1f1ea:	2110      	movs	r1, #16
   1f1ec:	203f      	movs	r0, #63	; 0x3f
   1f1ee:	f009 ff58 	bl	290a2 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
   1f1f2:	f894 3102 	ldrb.w	r3, [r4, #258]	; 0x102
   1f1f6:	b1ab      	cbz	r3, 1f224 <SX1276OnTimeoutIrq+0x68>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
   1f1f8:	200d      	movs	r0, #13
   1f1fa:	f009 ff5d 	bl	290b8 <SX1276Read>
   1f1fe:	f040 0140 	orr.w	r1, r0, #64	; 0x40
   1f202:	b2c9      	uxtb	r1, r1
   1f204:	200d      	movs	r0, #13
   1f206:	f009 ff4c 	bl	290a2 <SX1276Write>
                TimerStart( &RxTimeoutSyncWord );
   1f20a:	481d      	ldr	r0, [pc, #116]	; (1f280 <SX1276OnTimeoutIrq+0xc4>)
   1f20c:	f000 f84a 	bl	1f2a4 <TimerStart>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
   1f210:	4b1c      	ldr	r3, [pc, #112]	; (1f284 <SX1276OnTimeoutIrq+0xc8>)
   1f212:	681b      	ldr	r3, [r3, #0]
   1f214:	2b00      	cmp	r3, #0
   1f216:	d0da      	beq.n	1f1ce <SX1276OnTimeoutIrq+0x12>
   1f218:	68db      	ldr	r3, [r3, #12]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
   1f21a:	2b00      	cmp	r3, #0
   1f21c:	d0d7      	beq.n	1f1ce <SX1276OnTimeoutIrq+0x12>
}
   1f21e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            RadioEvents->TxTimeout( );
   1f222:	4718      	bx	r3
                TimerStop( &RxTimeoutSyncWord );
   1f224:	4816      	ldr	r0, [pc, #88]	; (1f280 <SX1276OnTimeoutIrq+0xc4>)
                SX1276.Settings.State = RF_IDLE;
   1f226:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                TimerStop( &RxTimeoutSyncWord );
   1f22a:	f000 f8b1 	bl	1f390 <TimerStop>
   1f22e:	e7ef      	b.n	1f210 <SX1276OnTimeoutIrq+0x54>
        SX1276Reset( );
   1f230:	f7ff f81e 	bl	1e270 <SX1276Reset>
        RxChainCalibration( );
   1f234:	f7e3 f8e8 	bl	2408 <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
   1f238:	2000      	movs	r0, #0
   1f23a:	f009 ff48 	bl	290ce <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
   1f23e:	4c12      	ldr	r4, [pc, #72]	; (1f288 <SX1276OnTimeoutIrq+0xcc>)
        SX1276SetOpMode( RF_OPMODE_SLEEP );
   1f240:	2500      	movs	r5, #0
            SX1276SetModem( RadioRegsInit[i].Modem );
   1f242:	7820      	ldrb	r0, [r4, #0]
   1f244:	f7ff fc74 	bl	1eb30 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
   1f248:	3501      	adds	r5, #1
   1f24a:	78a1      	ldrb	r1, [r4, #2]
   1f24c:	7860      	ldrb	r0, [r4, #1]
   1f24e:	f009 ff28 	bl	290a2 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
   1f252:	2d10      	cmp	r5, #16
   1f254:	f104 0403 	add.w	r4, r4, #3
   1f258:	d1f3      	bne.n	1f242 <SX1276OnTimeoutIrq+0x86>
        SX1276SetModem( MODEM_FSK );
   1f25a:	2000      	movs	r0, #0
   1f25c:	f7ff fc68 	bl	1eb30 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
   1f260:	f896 0138 	ldrb.w	r0, [r6, #312]	; 0x138
   1f264:	f7ff ff96 	bl	1f194 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
   1f268:	2300      	movs	r3, #0
   1f26a:	f886 30e0 	strb.w	r3, [r6, #224]	; 0xe0
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
   1f26e:	4b05      	ldr	r3, [pc, #20]	; (1f284 <SX1276OnTimeoutIrq+0xc8>)
   1f270:	681b      	ldr	r3, [r3, #0]
   1f272:	2b00      	cmp	r3, #0
   1f274:	d0ab      	beq.n	1f1ce <SX1276OnTimeoutIrq+0x12>
   1f276:	685b      	ldr	r3, [r3, #4]
   1f278:	e7cf      	b.n	1f21a <SX1276OnTimeoutIrq+0x5e>
   1f27a:	bf00      	nop
   1f27c:	200021a4 	.word	0x200021a4
   1f280:	20002174 	.word	0x20002174
   1f284:	20002170 	.word	0x20002170
   1f288:	0002ec8e 	.word	0x0002ec8e

0001f28c <TimerInsertNewHeadTimer>:
    obj->Next = NULL;
}

static void TimerInsertNewHeadTimer( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
   1f28c:	4b04      	ldr	r3, [pc, #16]	; (1f2a0 <TimerInsertNewHeadTimer+0x14>)
   1f28e:	681a      	ldr	r2, [r3, #0]

    if( cur != NULL )
   1f290:	b10a      	cbz	r2, 1f296 <TimerInsertNewHeadTimer+0xa>
    {
        cur->IsNext2Expire = false;
   1f292:	2100      	movs	r1, #0
   1f294:	7251      	strb	r1, [r2, #9]
    }

    obj->Next = cur;
   1f296:	6142      	str	r2, [r0, #20]
    TimerListHead = obj;
   1f298:	6018      	str	r0, [r3, #0]
    TimerSetTimeout( TimerListHead );
   1f29a:	f009 bf87 	b.w	291ac <TimerSetTimeout>
   1f29e:	bf00      	nop
   1f2a0:	20002300 	.word	0x20002300

0001f2a4 <TimerStart>:
{
   1f2a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1f2a6:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
   1f2a8:	a801      	add	r0, sp, #4
   1f2aa:	f009 feac 	bl	29006 <BoardCriticalSectionBegin>
    if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
   1f2ae:	b16c      	cbz	r4, 1f2cc <TimerStart+0x28>
    CRITICAL_SECTION_END( );
}

static bool TimerExists( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
   1f2b0:	4d17      	ldr	r5, [pc, #92]	; (1f310 <TimerStart+0x6c>)
   1f2b2:	6829      	ldr	r1, [r5, #0]
   1f2b4:	460a      	mov	r2, r1

    while( cur != NULL )
   1f2b6:	b972      	cbnz	r2, 1f2d6 <TimerStart+0x32>
    obj->Timestamp = obj->ReloadValue;
   1f2b8:	6863      	ldr	r3, [r4, #4]
   1f2ba:	6023      	str	r3, [r4, #0]
    obj->IsStarted = true;
   1f2bc:	2301      	movs	r3, #1
   1f2be:	8123      	strh	r3, [r4, #8]
    if( TimerListHead == NULL )
   1f2c0:	b969      	cbnz	r1, 1f2de <TimerStart+0x3a>
        RtcSetTimerContext( );
   1f2c2:	f7fe fe25 	bl	1df10 <RtcSetTimerContext>
            TimerInsertNewHeadTimer( obj );
   1f2c6:	4620      	mov	r0, r4
   1f2c8:	f7ff ffe0 	bl	1f28c <TimerInsertNewHeadTimer>
        CRITICAL_SECTION_END( );
   1f2cc:	a801      	add	r0, sp, #4
   1f2ce:	f009 fea4 	bl	2901a <BoardCriticalSectionEnd>
}
   1f2d2:	b003      	add	sp, #12
   1f2d4:	bd30      	pop	{r4, r5, pc}
    {
        if( cur == obj )
   1f2d6:	4294      	cmp	r4, r2
   1f2d8:	d0f8      	beq.n	1f2cc <TimerStart+0x28>
        {
            return true;
        }
        cur = cur->Next;
   1f2da:	6952      	ldr	r2, [r2, #20]
   1f2dc:	e7eb      	b.n	1f2b6 <TimerStart+0x12>
        elapsedTime = RtcGetTimerElapsedTime( );
   1f2de:	f7fe fdeb 	bl	1deb8 <RtcGetTimerElapsedTime>
        obj->Timestamp += elapsedTime;
   1f2e2:	6823      	ldr	r3, [r4, #0]
   1f2e4:	4418      	add	r0, r3
        if( obj->Timestamp < TimerListHead->Timestamp )
   1f2e6:	682b      	ldr	r3, [r5, #0]
        obj->Timestamp += elapsedTime;
   1f2e8:	6020      	str	r0, [r4, #0]
        if( obj->Timestamp < TimerListHead->Timestamp )
   1f2ea:	681a      	ldr	r2, [r3, #0]
   1f2ec:	4290      	cmp	r0, r2
   1f2ee:	d3ea      	bcc.n	1f2c6 <TimerStart+0x22>
    TimerEvent_t* next = TimerListHead->Next;
   1f2f0:	695a      	ldr	r2, [r3, #20]
    while( cur->Next != NULL )
   1f2f2:	6959      	ldr	r1, [r3, #20]
   1f2f4:	b911      	cbnz	r1, 1f2fc <TimerStart+0x58>
    cur->Next = obj;
   1f2f6:	615c      	str	r4, [r3, #20]
    obj->Next = NULL;
   1f2f8:	6161      	str	r1, [r4, #20]
   1f2fa:	e7e7      	b.n	1f2cc <TimerStart+0x28>
        if( obj->Timestamp > next->Timestamp )
   1f2fc:	6811      	ldr	r1, [r2, #0]
   1f2fe:	4288      	cmp	r0, r1
   1f300:	d902      	bls.n	1f308 <TimerStart+0x64>
            next = next->Next;
   1f302:	4613      	mov	r3, r2
   1f304:	6952      	ldr	r2, [r2, #20]
   1f306:	e7f4      	b.n	1f2f2 <TimerStart+0x4e>
            cur->Next = obj;
   1f308:	615c      	str	r4, [r3, #20]
            obj->Next = next;
   1f30a:	6162      	str	r2, [r4, #20]
            return;
   1f30c:	e7de      	b.n	1f2cc <TimerStart+0x28>
   1f30e:	bf00      	nop
   1f310:	20002300 	.word	0x20002300

0001f314 <TimerIrqHandler>:
{
   1f314:	b570      	push	{r4, r5, r6, lr}
    uint32_t old =  RtcGetTimerContext( );
   1f316:	f7fe fe03 	bl	1df20 <RtcGetTimerContext>
    if( TimerListHead != NULL )
   1f31a:	4c1c      	ldr	r4, [pc, #112]	; (1f38c <TimerIrqHandler+0x78>)
    uint32_t old =  RtcGetTimerContext( );
   1f31c:	4605      	mov	r5, r0
    uint32_t now =  RtcSetTimerContext( );
   1f31e:	f7fe fdf7 	bl	1df10 <RtcSetTimerContext>
    if( TimerListHead != NULL )
   1f322:	6822      	ldr	r2, [r4, #0]
   1f324:	b9aa      	cbnz	r2, 1f352 <TimerIrqHandler+0x3e>
        cur->IsStarted = false;
   1f326:	2600      	movs	r6, #0
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
   1f328:	6823      	ldr	r3, [r4, #0]
   1f32a:	b9db      	cbnz	r3, 1f364 <TimerIrqHandler+0x50>
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
   1f32c:	6820      	ldr	r0, [r4, #0]
   1f32e:	bb30      	cbnz	r0, 1f37e <TimerIrqHandler+0x6a>
}
   1f330:	bd70      	pop	{r4, r5, r6, pc}
            if( next->Timestamp > deltaContext )
   1f332:	680b      	ldr	r3, [r1, #0]
   1f334:	42b3      	cmp	r3, r6
                next->Timestamp -= deltaContext;
   1f336:	bf86      	itte	hi
   1f338:	195b      	addhi	r3, r3, r5
   1f33a:	1a1b      	subhi	r3, r3, r0
                next->Timestamp = 0;
   1f33c:	2300      	movls	r3, #0
   1f33e:	600b      	str	r3, [r1, #0]
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
   1f340:	6949      	ldr	r1, [r1, #20]
   1f342:	2900      	cmp	r1, #0
   1f344:	d1f5      	bne.n	1f332 <TimerIrqHandler+0x1e>
        TimerListHead = TimerListHead->Next;
   1f346:	6953      	ldr	r3, [r2, #20]
   1f348:	6023      	str	r3, [r4, #0]
        ExecuteCallBack( cur->Callback, cur->Context );
   1f34a:	68d3      	ldr	r3, [r2, #12]
        cur->IsStarted = false;
   1f34c:	7211      	strb	r1, [r2, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
   1f34e:	b91b      	cbnz	r3, 1f358 <TimerIrqHandler+0x44>
   1f350:	e7fe      	b.n	1f350 <TimerIrqHandler+0x3c>
   1f352:	4611      	mov	r1, r2
    uint32_t deltaContext = now - old; // intentional wrap around
   1f354:	1b46      	subs	r6, r0, r5
   1f356:	e7f3      	b.n	1f340 <TimerIrqHandler+0x2c>
        ExecuteCallBack( cur->Callback, cur->Context );
   1f358:	6910      	ldr	r0, [r2, #16]
   1f35a:	4798      	blx	r3
   1f35c:	e7e3      	b.n	1f326 <TimerIrqHandler+0x12>
        ExecuteCallBack( cur->Callback, cur->Context );
   1f35e:	6918      	ldr	r0, [r3, #16]
   1f360:	4790      	blx	r2
   1f362:	e7e1      	b.n	1f328 <TimerIrqHandler+0x14>
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
   1f364:	681d      	ldr	r5, [r3, #0]
   1f366:	f7fe fda7 	bl	1deb8 <RtcGetTimerElapsedTime>
   1f36a:	4285      	cmp	r5, r0
   1f36c:	d2de      	bcs.n	1f32c <TimerIrqHandler+0x18>
        cur = TimerListHead;
   1f36e:	6823      	ldr	r3, [r4, #0]
        TimerListHead = TimerListHead->Next;
   1f370:	695a      	ldr	r2, [r3, #20]
   1f372:	6022      	str	r2, [r4, #0]
        ExecuteCallBack( cur->Callback, cur->Context );
   1f374:	68da      	ldr	r2, [r3, #12]
        cur->IsStarted = false;
   1f376:	721e      	strb	r6, [r3, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
   1f378:	2a00      	cmp	r2, #0
   1f37a:	d1f0      	bne.n	1f35e <TimerIrqHandler+0x4a>
   1f37c:	e7fe      	b.n	1f37c <TimerIrqHandler+0x68>
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
   1f37e:	7a43      	ldrb	r3, [r0, #9]
   1f380:	2b00      	cmp	r3, #0
   1f382:	d1d5      	bne.n	1f330 <TimerIrqHandler+0x1c>
}
   1f384:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        TimerSetTimeout( TimerListHead );
   1f388:	f009 bf10 	b.w	291ac <TimerSetTimeout>
   1f38c:	20002300 	.word	0x20002300

0001f390 <TimerStop>:
{
   1f390:	b537      	push	{r0, r1, r2, r4, r5, lr}
    TimerEvent_t* prev = TimerListHead;
   1f392:	4d14      	ldr	r5, [pc, #80]	; (1f3e4 <TimerStop+0x54>)
{
   1f394:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
   1f396:	a801      	add	r0, sp, #4
   1f398:	f009 fe35 	bl	29006 <BoardCriticalSectionBegin>
    TimerEvent_t* prev = TimerListHead;
   1f39c:	682b      	ldr	r3, [r5, #0]
    if( ( TimerListHead == NULL ) || ( obj == NULL ) )
   1f39e:	b103      	cbz	r3, 1f3a2 <TimerStop+0x12>
   1f3a0:	b924      	cbnz	r4, 1f3ac <TimerStop+0x1c>
        CRITICAL_SECTION_END( );
   1f3a2:	a801      	add	r0, sp, #4
   1f3a4:	f009 fe39 	bl	2901a <BoardCriticalSectionEnd>
}
   1f3a8:	b003      	add	sp, #12
   1f3aa:	bd30      	pop	{r4, r5, pc}
    obj->IsStarted = false;
   1f3ac:	2200      	movs	r2, #0
    if( TimerListHead == obj ) // Stop the Head
   1f3ae:	42a3      	cmp	r3, r4
    obj->IsStarted = false;
   1f3b0:	7222      	strb	r2, [r4, #8]
    if( TimerListHead == obj ) // Stop the Head
   1f3b2:	d10d      	bne.n	1f3d0 <TimerStop+0x40>
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
   1f3b4:	7a59      	ldrb	r1, [r3, #9]
   1f3b6:	695c      	ldr	r4, [r3, #20]
   1f3b8:	b141      	cbz	r1, 1f3cc <TimerStop+0x3c>
            TimerListHead->IsNext2Expire = false;
   1f3ba:	725a      	strb	r2, [r3, #9]
            if( TimerListHead->Next != NULL )
   1f3bc:	b124      	cbz	r4, 1f3c8 <TimerStop+0x38>
                TimerSetTimeout( TimerListHead );
   1f3be:	4620      	mov	r0, r4
                TimerListHead = TimerListHead->Next;
   1f3c0:	602c      	str	r4, [r5, #0]
                TimerSetTimeout( TimerListHead );
   1f3c2:	f009 fef3 	bl	291ac <TimerSetTimeout>
   1f3c6:	e7ec      	b.n	1f3a2 <TimerStop+0x12>
                RtcStopAlarm( );
   1f3c8:	f7fe fd80 	bl	1decc <RtcStopAlarm>
                TimerListHead = NULL;
   1f3cc:	602c      	str	r4, [r5, #0]
   1f3ce:	e7e8      	b.n	1f3a2 <TimerStop+0x12>
                cur = cur->Next;
   1f3d0:	461a      	mov	r2, r3
   1f3d2:	695b      	ldr	r3, [r3, #20]
        while( cur != NULL )
   1f3d4:	2b00      	cmp	r3, #0
   1f3d6:	d0e4      	beq.n	1f3a2 <TimerStop+0x12>
            if( cur == obj )
   1f3d8:	429c      	cmp	r4, r3
   1f3da:	d1f9      	bne.n	1f3d0 <TimerStop+0x40>
                if( cur->Next != NULL )
   1f3dc:	6963      	ldr	r3, [r4, #20]
                    prev->Next = cur;
   1f3de:	6153      	str	r3, [r2, #20]
   1f3e0:	e7df      	b.n	1f3a2 <TimerStop+0x12>
   1f3e2:	bf00      	nop
   1f3e4:	20002300 	.word	0x20002300

0001f3e8 <uart_nrfx_poll_in>:
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type const * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f3e8:	4b06      	ldr	r3, [pc, #24]	; (1f404 <uart_nrfx_poll_in+0x1c>)
   1f3ea:	681a      	ldr	r2, [r3, #0]
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrfx_poll_in(const struct device *dev, unsigned char *c)
{
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
   1f3ec:	b13a      	cbz	r2, 1f3fe <uart_nrfx_poll_in+0x16>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f3ee:	2000      	movs	r0, #0
   1f3f0:	6018      	str	r0, [r3, #0]
   1f3f2:	681b      	ldr	r3, [r3, #0]
    nrf_uart_hwfc_pins_set(p_reg, NRF_UART_PSEL_DISCONNECTED, NRF_UART_PSEL_DISCONNECTED);
}

NRF_STATIC_INLINE uint8_t nrf_uart_rxd_get(NRF_UART_Type const * p_reg)
{
    return p_reg->RXD;
   1f3f4:	4b04      	ldr	r3, [pc, #16]	; (1f408 <uart_nrfx_poll_in+0x20>)
   1f3f6:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   1f3fa:	700b      	strb	r3, [r1, #0]
	nrf_uart_event_clear(uart0_addr, NRF_UART_EVENT_RXDRDY);

	/* got a character */
	*c = nrf_uart_rxd_get(uart0_addr);

	return 0;
   1f3fc:	4770      	bx	lr
		return -1;
   1f3fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1f402:	4770      	bx	lr
   1f404:	40002108 	.word	0x40002108
   1f408:	40002000 	.word	0x40002000

0001f40c <uart_nrfx_err_check>:
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1f40c:	4b02      	ldr	r3, [pc, #8]	; (1f418 <uart_nrfx_err_check+0xc>)
   1f40e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1f412:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
/** Console I/O function */
static int uart_nrfx_err_check(const struct device *dev)
{
	/* register bitfields maps to the defines in uart.h */
	return nrf_uart_errorsrc_get_and_clear(uart0_addr);
}
   1f416:	4770      	bx	lr
   1f418:	40002000 	.word	0x40002000

0001f41c <uart_nrfx_configure>:

static int uart_nrfx_configure(const struct device *dev,
			       const struct uart_config *cfg)
{
   1f41c:	b530      	push	{r4, r5, lr}
	nrf_uart_config_t uart_cfg;

#if defined(UART_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   1f41e:	794b      	ldrb	r3, [r1, #5]
   1f420:	2b01      	cmp	r3, #1
   1f422:	d022      	beq.n	1f46a <uart_nrfx_configure+0x4e>
   1f424:	2b03      	cmp	r3, #3
   1f426:	d11d      	bne.n	1f464 <uart_nrfx_configure+0x48>
	case UART_CFG_STOP_BITS_1:
		uart_cfg.stop = NRF_UART_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uart_cfg.stop = NRF_UART_STOP_TWO;
   1f428:	2210      	movs	r2, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1f42a:	798b      	ldrb	r3, [r1, #6]
   1f42c:	2b03      	cmp	r3, #3
   1f42e:	d119      	bne.n	1f464 <uart_nrfx_configure+0x48>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1f430:	79cb      	ldrb	r3, [r1, #7]
   1f432:	b9bb      	cbnz	r3, 1f464 <uart_nrfx_configure+0x48>
	}

#if defined(UART_CONFIG_PARITYTYPE_Msk)
	uart_cfg.paritytype = NRF_UART_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1f434:	790c      	ldrb	r4, [r1, #4]
   1f436:	b114      	cbz	r4, 1f43e <uart_nrfx_configure+0x22>
   1f438:	2c02      	cmp	r4, #2
   1f43a:	d113      	bne.n	1f464 <uart_nrfx_configure+0x48>
	case UART_CFG_PARITY_NONE:
		uart_cfg.parity = NRF_UART_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uart_cfg.parity = NRF_UART_PARITY_INCLUDED;
   1f43c:	240e      	movs	r4, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1f43e:	680b      	ldr	r3, [r1, #0]
	switch (baudrate) {
   1f440:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   1f444:	d061      	beq.n	1f50a <uart_nrfx_configure+0xee>
   1f446:	d82d      	bhi.n	1f4a4 <uart_nrfx_configure+0x88>
   1f448:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1f44c:	d05f      	beq.n	1f50e <uart_nrfx_configure+0xf2>
   1f44e:	d816      	bhi.n	1f47e <uart_nrfx_configure+0x62>
   1f450:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1f454:	d05d      	beq.n	1f512 <uart_nrfx_configure+0xf6>
   1f456:	d80a      	bhi.n	1f46e <uart_nrfx_configure+0x52>
   1f458:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1f45c:	d05c      	beq.n	1f518 <uart_nrfx_configure+0xfc>
   1f45e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1f462:	d05c      	beq.n	1f51e <uart_nrfx_configure+0x102>
   1f464:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1f468:	e04e      	b.n	1f508 <uart_nrfx_configure+0xec>
	switch (cfg->stop_bits) {
   1f46a:	2200      	movs	r2, #0
   1f46c:	e7dd      	b.n	1f42a <uart_nrfx_configure+0xe>
	switch (baudrate) {
   1f46e:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1f472:	d057      	beq.n	1f524 <uart_nrfx_configure+0x108>
   1f474:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1f478:	d1f4      	bne.n	1f464 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
   1f47a:	4b34      	ldr	r3, [pc, #208]	; (1f54c <uart_nrfx_configure+0x130>)
   1f47c:	e039      	b.n	1f4f2 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   1f47e:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1f482:	d052      	beq.n	1f52a <uart_nrfx_configure+0x10e>
   1f484:	d807      	bhi.n	1f496 <uart_nrfx_configure+0x7a>
   1f486:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1f48a:	d050      	beq.n	1f52e <uart_nrfx_configure+0x112>
   1f48c:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1f490:	d1e8      	bne.n	1f464 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
   1f492:	4b2f      	ldr	r3, [pc, #188]	; (1f550 <uart_nrfx_configure+0x134>)
   1f494:	e02d      	b.n	1f4f2 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   1f496:	f647 2512 	movw	r5, #31250	; 0x7a12
   1f49a:	42ab      	cmp	r3, r5
   1f49c:	d1e2      	bne.n	1f464 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
   1f49e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1f4a2:	e026      	b.n	1f4f2 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   1f4a4:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1f4a8:	d044      	beq.n	1f534 <uart_nrfx_configure+0x118>
   1f4aa:	d811      	bhi.n	1f4d0 <uart_nrfx_configure+0xb4>
   1f4ac:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1f4b0:	d042      	beq.n	1f538 <uart_nrfx_configure+0x11c>
   1f4b2:	d808      	bhi.n	1f4c6 <uart_nrfx_configure+0xaa>
   1f4b4:	f64d 25c0 	movw	r5, #56000	; 0xdac0
   1f4b8:	42ab      	cmp	r3, r5
   1f4ba:	d03f      	beq.n	1f53c <uart_nrfx_configure+0x120>
   1f4bc:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1f4c0:	d1d0      	bne.n	1f464 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
   1f4c2:	4b24      	ldr	r3, [pc, #144]	; (1f554 <uart_nrfx_configure+0x138>)
   1f4c4:	e015      	b.n	1f4f2 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   1f4c6:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1f4ca:	d1cb      	bne.n	1f464 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
   1f4cc:	4b22      	ldr	r3, [pc, #136]	; (1f558 <uart_nrfx_configure+0x13c>)
   1f4ce:	e010      	b.n	1f4f2 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   1f4d0:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1f4d4:	d035      	beq.n	1f542 <uart_nrfx_configure+0x126>
   1f4d6:	d807      	bhi.n	1f4e8 <uart_nrfx_configure+0xcc>
   1f4d8:	4d20      	ldr	r5, [pc, #128]	; (1f55c <uart_nrfx_configure+0x140>)
   1f4da:	42ab      	cmp	r3, r5
   1f4dc:	d033      	beq.n	1f546 <uart_nrfx_configure+0x12a>
   1f4de:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1f4e2:	d1bf      	bne.n	1f464 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
   1f4e4:	4b1e      	ldr	r3, [pc, #120]	; (1f560 <uart_nrfx_configure+0x144>)
   1f4e6:	e004      	b.n	1f4f2 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   1f4e8:	4d1e      	ldr	r5, [pc, #120]	; (1f564 <uart_nrfx_configure+0x148>)
   1f4ea:	42ab      	cmp	r3, r5
   1f4ec:	d1ba      	bne.n	1f464 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
   1f4ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1f4f2:	4d1d      	ldr	r5, [pc, #116]	; (1f568 <uart_nrfx_configure+0x14c>)
                    | (uint32_t)p_cfg->hwfc;
   1f4f4:	4322      	orrs	r2, r4
    p_reg->BAUDRATE = baudrate;
   1f4f6:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1f4fa:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uart_configure(uart0_addr, &uart_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   1f4fe:	6903      	ldr	r3, [r0, #16]
   1f500:	c903      	ldmia	r1, {r0, r1}
   1f502:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1f506:	2000      	movs	r0, #0
}
   1f508:	bd30      	pop	{r4, r5, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
   1f50a:	4b18      	ldr	r3, [pc, #96]	; (1f56c <uart_nrfx_configure+0x150>)
   1f50c:	e7f1      	b.n	1f4f2 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
   1f50e:	4b18      	ldr	r3, [pc, #96]	; (1f570 <uart_nrfx_configure+0x154>)
   1f510:	e7ef      	b.n	1f4f2 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
   1f512:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1f516:	e7ec      	b.n	1f4f2 <uart_nrfx_configure+0xd6>
		nrf_baudrate = 0x00014000;
   1f518:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1f51c:	e7e9      	b.n	1f4f2 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   1f51e:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1f522:	e7e6      	b.n	1f4f2 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
   1f524:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1f528:	e7e3      	b.n	1f4f2 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
   1f52a:	4b12      	ldr	r3, [pc, #72]	; (1f574 <uart_nrfx_configure+0x158>)
   1f52c:	e7e1      	b.n	1f4f2 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
   1f52e:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
   1f532:	e7de      	b.n	1f4f2 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
   1f534:	4b10      	ldr	r3, [pc, #64]	; (1f578 <uart_nrfx_configure+0x15c>)
   1f536:	e7dc      	b.n	1f4f2 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
   1f538:	4b10      	ldr	r3, [pc, #64]	; (1f57c <uart_nrfx_configure+0x160>)
   1f53a:	e7da      	b.n	1f4f2 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
   1f53c:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1f540:	e7d7      	b.n	1f4f2 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
   1f542:	4b0f      	ldr	r3, [pc, #60]	; (1f580 <uart_nrfx_configure+0x164>)
   1f544:	e7d5      	b.n	1f4f2 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
   1f546:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1f54a:	e7d2      	b.n	1f4f2 <uart_nrfx_configure+0xd6>
   1f54c:	0013b000 	.word	0x0013b000
   1f550:	004ea000 	.word	0x004ea000
   1f554:	00ebf000 	.word	0x00ebf000
   1f558:	01d7e000 	.word	0x01d7e000
   1f55c:	0003d090 	.word	0x0003d090
   1f560:	075f7000 	.word	0x075f7000
   1f564:	000f4240 	.word	0x000f4240
   1f568:	40002000 	.word	0x40002000
   1f56c:	009d5000 	.word	0x009d5000
   1f570:	00275000 	.word	0x00275000
   1f574:	0075f000 	.word	0x0075f000
   1f578:	03afb000 	.word	0x03afb000
   1f57c:	013a9000 	.word	0x013a9000
   1f580:	0ebed000 	.word	0x0ebed000

0001f584 <uart_nrfx_poll_out>:
{
   1f584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f586:	460e      	mov	r6, r1
	if (!k_is_in_isr()) {
   1f588:	f00a fa8f 	bl	29aaa <k_is_in_isr>
   1f58c:	4d19      	ldr	r5, [pc, #100]	; (1f5f4 <uart_nrfx_poll_out+0x70>)
   1f58e:	bb70      	cbnz	r0, 1f5ee <uart_nrfx_poll_out+0x6a>
   1f590:	2464      	movs	r4, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1f592:	2701      	movs	r7, #1
   1f594:	f3bf 8f5b 	dmb	ish
   1f598:	e855 3f00 	ldrex	r3, [r5]
   1f59c:	2b00      	cmp	r3, #0
   1f59e:	d103      	bne.n	1f5a8 <uart_nrfx_poll_out+0x24>
   1f5a0:	e845 7200 	strex	r2, r7, [r5]
   1f5a4:	2a00      	cmp	r2, #0
   1f5a6:	d1f7      	bne.n	1f598 <uart_nrfx_poll_out+0x14>
   1f5a8:	f3bf 8f5b 	dmb	ish
		while (atomic_cas((atomic_t *) lock,
   1f5ac:	d007      	beq.n	1f5be <uart_nrfx_poll_out+0x3a>
   1f5ae:	2021      	movs	r0, #33	; 0x21
   1f5b0:	2100      	movs	r1, #0
   1f5b2:	3c01      	subs	r4, #1
   1f5b4:	f002 fb08 	bl	21bc8 <z_impl_k_sleep>
			if (--safety_cnt == 0) {
   1f5b8:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   1f5bc:	d1ea      	bne.n	1f594 <uart_nrfx_poll_out+0x10>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f5be:	4c0e      	ldr	r4, [pc, #56]	; (1f5f8 <uart_nrfx_poll_out+0x74>)
   1f5c0:	2200      	movs	r2, #0
   1f5c2:	6022      	str	r2, [r4, #0]
   1f5c4:	6822      	ldr	r2, [r4, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f5c6:	4a0d      	ldr	r2, [pc, #52]	; (1f5fc <uart_nrfx_poll_out+0x78>)
   1f5c8:	2101      	movs	r1, #1
   1f5ca:	6011      	str	r1, [r2, #0]
    p_reg->TXD = txd;
   1f5cc:	f8c2 6514 	str.w	r6, [r2, #1300]	; 0x514
   1f5d0:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f5d4:	6823      	ldr	r3, [r4, #0]
	NRFX_WAIT_FOR(event_txdrdy_check(), 1000, 1, res);
   1f5d6:	b923      	cbnz	r3, 1f5e2 <uart_nrfx_poll_out+0x5e>
   1f5d8:	2001      	movs	r0, #1
   1f5da:	f009 fe65 	bl	292a8 <nrfx_busy_wait>
   1f5de:	3e01      	subs	r6, #1
   1f5e0:	d1f8      	bne.n	1f5d4 <uart_nrfx_poll_out+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f5e2:	4b07      	ldr	r3, [pc, #28]	; (1f600 <uart_nrfx_poll_out+0x7c>)
   1f5e4:	2201      	movs	r2, #1
   1f5e6:	601a      	str	r2, [r3, #0]
	*lock = 0;
   1f5e8:	2300      	movs	r3, #0
   1f5ea:	602b      	str	r3, [r5, #0]
}
   1f5ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*lock = 1;
   1f5ee:	2301      	movs	r3, #1
   1f5f0:	602b      	str	r3, [r5, #0]
   1f5f2:	e7e4      	b.n	1f5be <uart_nrfx_poll_out+0x3a>
   1f5f4:	20002308 	.word	0x20002308
   1f5f8:	4000211c 	.word	0x4000211c
   1f5fc:	40002008 	.word	0x40002008
   1f600:	4000200c 	.word	0x4000200c

0001f604 <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(const struct device *dev)
{
   1f604:	b510      	push	{r4, lr}
    p_reg->OUTSET = set_mask;
   1f606:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    p_reg->ENABLE = UART_ENABLE_ENABLE_Disabled;
   1f60a:	4c13      	ldr	r4, [pc, #76]	; (1f658 <uart_nrfx_init+0x54>)
   1f60c:	2200      	movs	r2, #0
   1f60e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   1f612:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
   1f616:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1f61a:	2103      	movs	r1, #3
   1f61c:	f8c3 1764 	str.w	r1, [r3, #1892]	; 0x764
   1f620:	f8c3 2760 	str.w	r2, [r3, #1888]	; 0x760
    p_reg->PSEL.RXD = pselrxd;
   1f624:	2318      	movs	r3, #24
   1f626:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
    p_reg->PSEL.TXD = pseltxd;
   1f62a:	2319      	movs	r3, #25
   1f62c:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
    p_reg->PSEL.RTS = pselrts;
   1f630:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f634:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
	}

	nrf_uart_hwfc_pins_set(uart0_addr, RTS_PIN, CTS_PIN);

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   1f638:	6901      	ldr	r1, [r0, #16]
    p_reg->PSEL.CTS = pselcts;
   1f63a:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   1f63e:	f7ff feed 	bl	1f41c <uart_nrfx_configure>
	if (err) {
   1f642:	b938      	cbnz	r0, 1f654 <uart_nrfx_init+0x50>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
   1f644:	2304      	movs	r3, #4
   1f646:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f64a:	4b04      	ldr	r3, [pc, #16]	; (1f65c <uart_nrfx_init+0x58>)
   1f64c:	6018      	str	r0, [r3, #0]
   1f64e:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f650:	2301      	movs	r3, #1
   1f652:	6023      	str	r3, [r4, #0]
#if HW_FLOW_CONTROL_AVAILABLE
	k_timer_init(&uart0_cb.tx_timeout_timer, tx_timeout, NULL);
#endif
#endif
	return 0;
}
   1f654:	bd10      	pop	{r4, pc}
   1f656:	bf00      	nop
   1f658:	40002000 	.word	0x40002000
   1f65c:	40002108 	.word	0x40002108

0001f660 <z_mrsh_uart_err_check>:
#include <syscalls/uart.h>

extern int z_vrfy_uart_err_check(const struct device * dev);
uintptr_t z_mrsh_uart_err_check(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   1f660:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	_current->syscall_frame = ssf;
   1f662:	4f27      	ldr	r7, [pc, #156]	; (1f700 <z_mrsh_uart_err_check+0xa0>)
   1f664:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1f666:	68bb      	ldr	r3, [r7, #8]
{
   1f668:	4604      	mov	r4, r0
	_current->syscall_frame = ssf;
   1f66a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	{							 \
		Z_OOPS(Z_SYSCALL_DRIVER_UART(dev, op_)); \
		z_impl_uart_ ## op_(dev); \
	}

UART_SIMPLE(err_check)
   1f66e:	f7e0 fd47 	bl	100 <z_object_find>
   1f672:	4621      	mov	r1, r4
   1f674:	f009 fdfd 	bl	29272 <z_obj_validation_check.constprop.0>
   1f678:	463d      	mov	r5, r7
   1f67a:	4606      	mov	r6, r0
   1f67c:	b348      	cbz	r0, 1f6d2 <z_mrsh_uart_err_check+0x72>
   1f67e:	f009 fdee 	bl	2925e <arch_is_user_context>
   1f682:	4b20      	ldr	r3, [pc, #128]	; (1f704 <z_mrsh_uart_err_check+0xa4>)
   1f684:	4a20      	ldr	r2, [pc, #128]	; (1f708 <z_mrsh_uart_err_check+0xa8>)
   1f686:	1a9b      	subs	r3, r3, r2
   1f688:	08db      	lsrs	r3, r3, #3
   1f68a:	019b      	lsls	r3, r3, #6
   1f68c:	f043 0301 	orr.w	r3, r3, #1
   1f690:	b148      	cbz	r0, 1f6a6 <z_mrsh_uart_err_check+0x46>
   1f692:	4a1e      	ldr	r2, [pc, #120]	; (1f70c <z_mrsh_uart_err_check+0xac>)
   1f694:	491e      	ldr	r1, [pc, #120]	; (1f710 <z_mrsh_uart_err_check+0xb0>)
   1f696:	4618      	mov	r0, r3
   1f698:	f005 fbfd 	bl	24e96 <log_from_user>
   1f69c:	68ab      	ldr	r3, [r5, #8]
   1f69e:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   1f6a2:	f007 f9db 	bl	26a5c <arch_syscall_oops>
   1f6a6:	4919      	ldr	r1, [pc, #100]	; (1f70c <z_mrsh_uart_err_check+0xac>)
   1f6a8:	4819      	ldr	r0, [pc, #100]	; (1f710 <z_mrsh_uart_err_check+0xb0>)
   1f6aa:	461a      	mov	r2, r3
   1f6ac:	f005 fc26 	bl	24efc <log_1>
   1f6b0:	e7f4      	b.n	1f69c <z_mrsh_uart_err_check+0x3c>
   1f6b2:	4613      	mov	r3, r2
   1f6b4:	4915      	ldr	r1, [pc, #84]	; (1f70c <z_mrsh_uart_err_check+0xac>)
   1f6b6:	4a17      	ldr	r2, [pc, #92]	; (1f714 <z_mrsh_uart_err_check+0xb4>)
   1f6b8:	4817      	ldr	r0, [pc, #92]	; (1f718 <z_mrsh_uart_err_check+0xb8>)
   1f6ba:	f8ad 4000 	strh.w	r4, [sp]
   1f6be:	f005 fc4a 	bl	24f56 <log_3>
   1f6c2:	e7eb      	b.n	1f69c <z_mrsh_uart_err_check+0x3c>
		(const struct uart_driver_api *)dev->api;

	if (api->err_check == NULL) {
		return -ENOSYS;
	}
	return api->err_check(dev);
   1f6c4:	4620      	mov	r0, r4
   1f6c6:	4798      	blx	r3
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	int ret = z_vrfy_uart_err_check(*(const struct device **)&arg0)
;
	_current->syscall_frame = NULL;
   1f6c8:	68bb      	ldr	r3, [r7, #8]
   1f6ca:	f8c3 6084 	str.w	r6, [r3, #132]	; 0x84
	return (uintptr_t) ret;
}
   1f6ce:	b003      	add	sp, #12
   1f6d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f6d2:	68a2      	ldr	r2, [r4, #8]
   1f6d4:	6893      	ldr	r3, [r2, #8]
   1f6d6:	2b00      	cmp	r3, #0
   1f6d8:	d1f4      	bne.n	1f6c4 <z_mrsh_uart_err_check+0x64>
   1f6da:	f009 fdc0 	bl	2925e <arch_is_user_context>
   1f6de:	4c09      	ldr	r4, [pc, #36]	; (1f704 <z_mrsh_uart_err_check+0xa4>)
   1f6e0:	4b09      	ldr	r3, [pc, #36]	; (1f708 <z_mrsh_uart_err_check+0xa8>)
   1f6e2:	1ae4      	subs	r4, r4, r3
   1f6e4:	08e4      	lsrs	r4, r4, #3
   1f6e6:	01a4      	lsls	r4, r4, #6
   1f6e8:	f044 0401 	orr.w	r4, r4, #1
   1f6ec:	2800      	cmp	r0, #0
   1f6ee:	d0e0      	beq.n	1f6b2 <z_mrsh_uart_err_check+0x52>
   1f6f0:	9200      	str	r2, [sp, #0]
   1f6f2:	4b08      	ldr	r3, [pc, #32]	; (1f714 <z_mrsh_uart_err_check+0xb4>)
   1f6f4:	4a05      	ldr	r2, [pc, #20]	; (1f70c <z_mrsh_uart_err_check+0xac>)
   1f6f6:	4908      	ldr	r1, [pc, #32]	; (1f718 <z_mrsh_uart_err_check+0xb8>)
   1f6f8:	4620      	mov	r0, r4
   1f6fa:	f005 fbcc 	bl	24e96 <log_from_user>
   1f6fe:	e7cd      	b.n	1f69c <z_mrsh_uart_err_check+0x3c>
   1f700:	200023f4 	.word	0x200023f4
   1f704:	0002a810 	.word	0x0002a810
   1f708:	0002a6d0 	.word	0x0002a6d0
   1f70c:	0002eceb 	.word	0x0002eceb
   1f710:	0002e72d 	.word	0x0002e72d
   1f714:	0002ecc5 	.word	0x0002ecc5
   1f718:	0002e762 	.word	0x0002e762

0001f71c <z_mrsh_uart_poll_in>:
#include <syscalls/uart.h>

extern int z_vrfy_uart_poll_in(const struct device * dev, unsigned char * p_char);
uintptr_t z_mrsh_uart_poll_in(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   1f71c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_current->syscall_frame = ssf;
   1f720:	f8df 8120 	ldr.w	r8, [pc, #288]	; 1f844 <z_mrsh_uart_poll_in+0x128>
{
   1f724:	b086      	sub	sp, #24
	_current->syscall_frame = ssf;
   1f726:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1f72a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1f72c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
{
   1f730:	4604      	mov	r4, r0
   1f732:	460e      	mov	r6, r1
#include <syscalls/uart_err_check_mrsh.c>

static inline int z_vrfy_uart_poll_in(const struct device *dev,
				      unsigned char *p_char)
{
	Z_OOPS(Z_SYSCALL_DRIVER_UART(dev, poll_in));
   1f734:	f7e0 fce4 	bl	100 <z_object_find>
   1f738:	4621      	mov	r1, r4
   1f73a:	f009 fd9a 	bl	29272 <z_obj_validation_check.constprop.0>
   1f73e:	4645      	mov	r5, r8
   1f740:	2800      	cmp	r0, #0
   1f742:	d058      	beq.n	1f7f6 <z_mrsh_uart_poll_in+0xda>
   1f744:	f009 fd8b 	bl	2925e <arch_is_user_context>
   1f748:	4b36      	ldr	r3, [pc, #216]	; (1f824 <z_mrsh_uart_poll_in+0x108>)
   1f74a:	4a37      	ldr	r2, [pc, #220]	; (1f828 <z_mrsh_uart_poll_in+0x10c>)
   1f74c:	1a9b      	subs	r3, r3, r2
   1f74e:	08db      	lsrs	r3, r3, #3
   1f750:	019b      	lsls	r3, r3, #6
   1f752:	f043 0301 	orr.w	r3, r3, #1
   1f756:	b148      	cbz	r0, 1f76c <z_mrsh_uart_poll_in+0x50>
   1f758:	4a34      	ldr	r2, [pc, #208]	; (1f82c <z_mrsh_uart_poll_in+0x110>)
   1f75a:	4935      	ldr	r1, [pc, #212]	; (1f830 <z_mrsh_uart_poll_in+0x114>)
   1f75c:	4618      	mov	r0, r3
   1f75e:	f005 fb9a 	bl	24e96 <log_from_user>
	Z_OOPS(Z_SYSCALL_MEMORY_WRITE(p_char, sizeof(unsigned char)));
   1f762:	68ab      	ldr	r3, [r5, #8]
   1f764:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   1f768:	f007 f978 	bl	26a5c <arch_syscall_oops>
	Z_OOPS(Z_SYSCALL_DRIVER_UART(dev, poll_in));
   1f76c:	492f      	ldr	r1, [pc, #188]	; (1f82c <z_mrsh_uart_poll_in+0x110>)
   1f76e:	4830      	ldr	r0, [pc, #192]	; (1f830 <z_mrsh_uart_poll_in+0x114>)
   1f770:	461a      	mov	r2, r3
   1f772:	f005 fbc3 	bl	24efc <log_1>
   1f776:	e7f4      	b.n	1f762 <z_mrsh_uart_poll_in+0x46>
   1f778:	4613      	mov	r3, r2
   1f77a:	492c      	ldr	r1, [pc, #176]	; (1f82c <z_mrsh_uart_poll_in+0x110>)
   1f77c:	4a2d      	ldr	r2, [pc, #180]	; (1f834 <z_mrsh_uart_poll_in+0x118>)
   1f77e:	482e      	ldr	r0, [pc, #184]	; (1f838 <z_mrsh_uart_poll_in+0x11c>)
   1f780:	f8ad 4000 	strh.w	r4, [sp]
   1f784:	f005 fbe7 	bl	24f56 <log_3>
   1f788:	e7eb      	b.n	1f762 <z_mrsh_uart_poll_in+0x46>
	Z_OOPS(Z_SYSCALL_MEMORY_WRITE(p_char, sizeof(unsigned char)));
   1f78a:	4928      	ldr	r1, [pc, #160]	; (1f82c <z_mrsh_uart_poll_in+0x110>)
   1f78c:	482b      	ldr	r0, [pc, #172]	; (1f83c <z_mrsh_uart_poll_in+0x120>)
   1f78e:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1f792:	e9cd 1602 	strd	r1, r6, [sp, #8]
   1f796:	4623      	mov	r3, r4
   1f798:	2204      	movs	r2, #4
   1f79a:	a902      	add	r1, sp, #8
   1f79c:	f005 fbf7 	bl	24f8e <log_n>
   1f7a0:	e7df      	b.n	1f762 <z_mrsh_uart_poll_in+0x46>
				      unsigned char *p_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	return api->poll_in(dev, p_char);
   1f7a2:	68a3      	ldr	r3, [r4, #8]
   1f7a4:	4631      	mov	r1, r6
   1f7a6:	681b      	ldr	r3, [r3, #0]
   1f7a8:	4620      	mov	r0, r4
   1f7aa:	4798      	blx	r3
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	int ret = z_vrfy_uart_poll_in(*(const struct device **)&arg0, *(unsigned char **)&arg1)
;
	_current->syscall_frame = NULL;
   1f7ac:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1f7b0:	f8c3 7084 	str.w	r7, [r3, #132]	; 0x84
	return (uintptr_t) ret;
}
   1f7b4:	b006      	add	sp, #24
   1f7b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f7ba:	2201      	movs	r2, #1
   1f7bc:	4611      	mov	r1, r2
   1f7be:	4630      	mov	r0, r6
   1f7c0:	f007 f970 	bl	26aa4 <arch_buffer_validate>
   1f7c4:	4607      	mov	r7, r0
   1f7c6:	2800      	cmp	r0, #0
   1f7c8:	d0eb      	beq.n	1f7a2 <z_mrsh_uart_poll_in+0x86>
   1f7ca:	f009 fd48 	bl	2925e <arch_is_user_context>
   1f7ce:	4c15      	ldr	r4, [pc, #84]	; (1f824 <z_mrsh_uart_poll_in+0x108>)
   1f7d0:	4b15      	ldr	r3, [pc, #84]	; (1f828 <z_mrsh_uart_poll_in+0x10c>)
   1f7d2:	1ae4      	subs	r4, r4, r3
   1f7d4:	08e4      	lsrs	r4, r4, #3
   1f7d6:	01a4      	lsls	r4, r4, #6
   1f7d8:	4b19      	ldr	r3, [pc, #100]	; (1f840 <z_mrsh_uart_poll_in+0x124>)
   1f7da:	f044 0401 	orr.w	r4, r4, #1
   1f7de:	2201      	movs	r2, #1
   1f7e0:	2800      	cmp	r0, #0
   1f7e2:	d0d2      	beq.n	1f78a <z_mrsh_uart_poll_in+0x6e>
   1f7e4:	e9cd 2300 	strd	r2, r3, [sp]
   1f7e8:	4914      	ldr	r1, [pc, #80]	; (1f83c <z_mrsh_uart_poll_in+0x120>)
   1f7ea:	4a10      	ldr	r2, [pc, #64]	; (1f82c <z_mrsh_uart_poll_in+0x110>)
   1f7ec:	4633      	mov	r3, r6
   1f7ee:	4620      	mov	r0, r4
   1f7f0:	f005 fb51 	bl	24e96 <log_from_user>
   1f7f4:	e7b5      	b.n	1f762 <z_mrsh_uart_poll_in+0x46>
	Z_OOPS(Z_SYSCALL_DRIVER_UART(dev, poll_in));
   1f7f6:	68a2      	ldr	r2, [r4, #8]
   1f7f8:	6813      	ldr	r3, [r2, #0]
   1f7fa:	2b00      	cmp	r3, #0
   1f7fc:	d1dd      	bne.n	1f7ba <z_mrsh_uart_poll_in+0x9e>
   1f7fe:	f009 fd2e 	bl	2925e <arch_is_user_context>
   1f802:	4c08      	ldr	r4, [pc, #32]	; (1f824 <z_mrsh_uart_poll_in+0x108>)
   1f804:	4b08      	ldr	r3, [pc, #32]	; (1f828 <z_mrsh_uart_poll_in+0x10c>)
   1f806:	1ae4      	subs	r4, r4, r3
   1f808:	08e4      	lsrs	r4, r4, #3
   1f80a:	01a4      	lsls	r4, r4, #6
   1f80c:	f044 0401 	orr.w	r4, r4, #1
   1f810:	2800      	cmp	r0, #0
   1f812:	d0b1      	beq.n	1f778 <z_mrsh_uart_poll_in+0x5c>
   1f814:	9200      	str	r2, [sp, #0]
   1f816:	4b07      	ldr	r3, [pc, #28]	; (1f834 <z_mrsh_uart_poll_in+0x118>)
   1f818:	4a04      	ldr	r2, [pc, #16]	; (1f82c <z_mrsh_uart_poll_in+0x110>)
   1f81a:	4907      	ldr	r1, [pc, #28]	; (1f838 <z_mrsh_uart_poll_in+0x11c>)
   1f81c:	4620      	mov	r0, r4
   1f81e:	f005 fb3a 	bl	24e96 <log_from_user>
   1f822:	e79e      	b.n	1f762 <z_mrsh_uart_poll_in+0x46>
   1f824:	0002a810 	.word	0x0002a810
   1f828:	0002a6d0 	.word	0x0002a6d0
   1f82c:	0002ed01 	.word	0x0002ed01
   1f830:	0002e72d 	.word	0x0002e72d
   1f834:	0002eccf 	.word	0x0002eccf
   1f838:	0002e762 	.word	0x0002e762
   1f83c:	0002c8a6 	.word	0x0002c8a6
   1f840:	0002c903 	.word	0x0002c903
   1f844:	200023f4 	.word	0x200023f4

0001f848 <z_mrsh_uart_poll_out>:
#include <syscalls/uart.h>

extern void z_vrfy_uart_poll_out(const struct device * dev, unsigned char out_char);
uintptr_t z_mrsh_uart_poll_out(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   1f848:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	_current->syscall_frame = ssf;
   1f84c:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 1f910 <z_mrsh_uart_poll_out+0xc8>
   1f850:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1f852:	f8d8 3008 	ldr.w	r3, [r8, #8]
{
   1f856:	4606      	mov	r6, r0
	_current->syscall_frame = ssf;
   1f858:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	(void) arg2;	/* unused */
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	z_vrfy_uart_poll_out(*(const struct device **)&arg0, *(unsigned char*)&arg1)
   1f85c:	b2cf      	uxtb	r7, r1
#include <syscalls/uart_poll_in_mrsh.c>

static inline void z_vrfy_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	Z_OOPS(Z_SYSCALL_DRIVER_UART(dev, poll_out));
   1f85e:	f7e0 fc4f 	bl	100 <z_object_find>
   1f862:	4631      	mov	r1, r6
   1f864:	f009 fd05 	bl	29272 <z_obj_validation_check.constprop.0>
   1f868:	4645      	mov	r5, r8
   1f86a:	4604      	mov	r4, r0
   1f86c:	2800      	cmp	r0, #0
   1f86e:	d034      	beq.n	1f8da <z_mrsh_uart_poll_out+0x92>
   1f870:	f009 fcf5 	bl	2925e <arch_is_user_context>
   1f874:	4b20      	ldr	r3, [pc, #128]	; (1f8f8 <z_mrsh_uart_poll_out+0xb0>)
   1f876:	4a21      	ldr	r2, [pc, #132]	; (1f8fc <z_mrsh_uart_poll_out+0xb4>)
   1f878:	1a9b      	subs	r3, r3, r2
   1f87a:	08db      	lsrs	r3, r3, #3
   1f87c:	019b      	lsls	r3, r3, #6
   1f87e:	f043 0301 	orr.w	r3, r3, #1
   1f882:	b148      	cbz	r0, 1f898 <z_mrsh_uart_poll_out+0x50>
   1f884:	4a1e      	ldr	r2, [pc, #120]	; (1f900 <z_mrsh_uart_poll_out+0xb8>)
   1f886:	491f      	ldr	r1, [pc, #124]	; (1f904 <z_mrsh_uart_poll_out+0xbc>)
   1f888:	4618      	mov	r0, r3
   1f88a:	f005 fb04 	bl	24e96 <log_from_user>
   1f88e:	68ab      	ldr	r3, [r5, #8]
   1f890:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   1f894:	f007 f8e2 	bl	26a5c <arch_syscall_oops>
   1f898:	4919      	ldr	r1, [pc, #100]	; (1f900 <z_mrsh_uart_poll_out+0xb8>)
   1f89a:	481a      	ldr	r0, [pc, #104]	; (1f904 <z_mrsh_uart_poll_out+0xbc>)
   1f89c:	461a      	mov	r2, r3
   1f89e:	f005 fb2d 	bl	24efc <log_1>
   1f8a2:	e7f4      	b.n	1f88e <z_mrsh_uart_poll_out+0x46>
   1f8a4:	f009 fcdb 	bl	2925e <arch_is_user_context>
   1f8a8:	4c13      	ldr	r4, [pc, #76]	; (1f8f8 <z_mrsh_uart_poll_out+0xb0>)
   1f8aa:	4b14      	ldr	r3, [pc, #80]	; (1f8fc <z_mrsh_uart_poll_out+0xb4>)
   1f8ac:	1ae4      	subs	r4, r4, r3
   1f8ae:	08e4      	lsrs	r4, r4, #3
   1f8b0:	01a4      	lsls	r4, r4, #6
   1f8b2:	f044 0401 	orr.w	r4, r4, #1
   1f8b6:	b138      	cbz	r0, 1f8c8 <z_mrsh_uart_poll_out+0x80>
   1f8b8:	9200      	str	r2, [sp, #0]
   1f8ba:	4b13      	ldr	r3, [pc, #76]	; (1f908 <z_mrsh_uart_poll_out+0xc0>)
   1f8bc:	4a10      	ldr	r2, [pc, #64]	; (1f900 <z_mrsh_uart_poll_out+0xb8>)
   1f8be:	4913      	ldr	r1, [pc, #76]	; (1f90c <z_mrsh_uart_poll_out+0xc4>)
   1f8c0:	4620      	mov	r0, r4
   1f8c2:	f005 fae8 	bl	24e96 <log_from_user>
   1f8c6:	e7e2      	b.n	1f88e <z_mrsh_uart_poll_out+0x46>
   1f8c8:	4613      	mov	r3, r2
   1f8ca:	490d      	ldr	r1, [pc, #52]	; (1f900 <z_mrsh_uart_poll_out+0xb8>)
   1f8cc:	4a0e      	ldr	r2, [pc, #56]	; (1f908 <z_mrsh_uart_poll_out+0xc0>)
   1f8ce:	480f      	ldr	r0, [pc, #60]	; (1f90c <z_mrsh_uart_poll_out+0xc4>)
   1f8d0:	f8ad 4000 	strh.w	r4, [sp]
   1f8d4:	f005 fb3f 	bl	24f56 <log_3>
   1f8d8:	e7d9      	b.n	1f88e <z_mrsh_uart_poll_out+0x46>
   1f8da:	68b2      	ldr	r2, [r6, #8]
   1f8dc:	6853      	ldr	r3, [r2, #4]
   1f8de:	2b00      	cmp	r3, #0
   1f8e0:	d0e0      	beq.n	1f8a4 <z_mrsh_uart_poll_out+0x5c>
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   1f8e2:	4630      	mov	r0, r6
   1f8e4:	4639      	mov	r1, r7
   1f8e6:	4798      	blx	r3
;
	_current->syscall_frame = NULL;
   1f8e8:	f8d8 3008 	ldr.w	r3, [r8, #8]
	return 0;
}
   1f8ec:	4620      	mov	r0, r4
	_current->syscall_frame = NULL;
   1f8ee:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
}
   1f8f2:	b002      	add	sp, #8
   1f8f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f8f8:	0002a810 	.word	0x0002a810
   1f8fc:	0002a6d0 	.word	0x0002a6d0
   1f900:	0002ed15 	.word	0x0002ed15
   1f904:	0002e72d 	.word	0x0002e72d
   1f908:	0002ecd7 	.word	0x0002ecd7
   1f90c:	0002e762 	.word	0x0002e762
   1f910:	200023f4 	.word	0x200023f4

0001f914 <z_mrsh_uart_config_get>:
#include <syscalls/uart.h>

extern int z_vrfy_uart_config_get(const struct device * dev, struct uart_config * cfg);
uintptr_t z_mrsh_uart_config_get(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   1f914:	b570      	push	{r4, r5, r6, lr}
	_current->syscall_frame = ssf;
   1f916:	4d41      	ldr	r5, [pc, #260]	; (1fa1c <z_mrsh_uart_config_get+0x108>)
{
   1f918:	b086      	sub	sp, #24
	_current->syscall_frame = ssf;
   1f91a:	68ab      	ldr	r3, [r5, #8]
   1f91c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1f91e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
{
   1f922:	4604      	mov	r4, r0
   1f924:	460e      	mov	r6, r1
#include <syscalls/uart_poll_out_mrsh.c>

static inline int z_vrfy_uart_config_get(const struct device *dev,
					 struct uart_config *cfg)
{
	Z_OOPS(Z_SYSCALL_DRIVER_UART(dev, config_get));
   1f926:	f7e0 fbeb 	bl	100 <z_object_find>
   1f92a:	4621      	mov	r1, r4
   1f92c:	f009 fca1 	bl	29272 <z_obj_validation_check.constprop.0>
   1f930:	2800      	cmp	r0, #0
   1f932:	d05b      	beq.n	1f9ec <z_mrsh_uart_config_get+0xd8>
   1f934:	f009 fc93 	bl	2925e <arch_is_user_context>
   1f938:	4b39      	ldr	r3, [pc, #228]	; (1fa20 <z_mrsh_uart_config_get+0x10c>)
   1f93a:	4a3a      	ldr	r2, [pc, #232]	; (1fa24 <z_mrsh_uart_config_get+0x110>)
   1f93c:	1a9b      	subs	r3, r3, r2
   1f93e:	08db      	lsrs	r3, r3, #3
   1f940:	019b      	lsls	r3, r3, #6
   1f942:	f043 0301 	orr.w	r3, r3, #1
   1f946:	b148      	cbz	r0, 1f95c <z_mrsh_uart_config_get+0x48>
   1f948:	4a37      	ldr	r2, [pc, #220]	; (1fa28 <z_mrsh_uart_config_get+0x114>)
   1f94a:	4938      	ldr	r1, [pc, #224]	; (1fa2c <z_mrsh_uart_config_get+0x118>)
   1f94c:	4618      	mov	r0, r3
   1f94e:	f005 faa2 	bl	24e96 <log_from_user>
	Z_OOPS(Z_SYSCALL_MEMORY_WRITE(cfg, sizeof(struct uart_config)));
   1f952:	68ab      	ldr	r3, [r5, #8]
   1f954:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   1f958:	f007 f880 	bl	26a5c <arch_syscall_oops>
	Z_OOPS(Z_SYSCALL_DRIVER_UART(dev, config_get));
   1f95c:	4932      	ldr	r1, [pc, #200]	; (1fa28 <z_mrsh_uart_config_get+0x114>)
   1f95e:	4833      	ldr	r0, [pc, #204]	; (1fa2c <z_mrsh_uart_config_get+0x118>)
   1f960:	461a      	mov	r2, r3
   1f962:	f005 facb 	bl	24efc <log_1>
   1f966:	e7f4      	b.n	1f952 <z_mrsh_uart_config_get+0x3e>
   1f968:	4613      	mov	r3, r2
   1f96a:	492f      	ldr	r1, [pc, #188]	; (1fa28 <z_mrsh_uart_config_get+0x114>)
   1f96c:	4a30      	ldr	r2, [pc, #192]	; (1fa30 <z_mrsh_uart_config_get+0x11c>)
   1f96e:	4831      	ldr	r0, [pc, #196]	; (1fa34 <z_mrsh_uart_config_get+0x120>)
   1f970:	f8ad 4000 	strh.w	r4, [sp]
   1f974:	f005 faef 	bl	24f56 <log_3>
   1f978:	e7eb      	b.n	1f952 <z_mrsh_uart_config_get+0x3e>
	Z_OOPS(Z_SYSCALL_MEMORY_WRITE(cfg, sizeof(struct uart_config)));
   1f97a:	492b      	ldr	r1, [pc, #172]	; (1fa28 <z_mrsh_uart_config_get+0x114>)
   1f97c:	482e      	ldr	r0, [pc, #184]	; (1fa38 <z_mrsh_uart_config_get+0x124>)
   1f97e:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1f982:	e9cd 1602 	strd	r1, r6, [sp, #8]
   1f986:	4623      	mov	r3, r4
   1f988:	2204      	movs	r2, #4
   1f98a:	a902      	add	r1, sp, #8
   1f98c:	f005 faff 	bl	24f8e <log_n>
   1f990:	e7df      	b.n	1f952 <z_mrsh_uart_config_get+0x3e>

	if (api->config_get == NULL) {
		return -ENOSYS;
	}

	return api->config_get(dev, cfg);
   1f992:	4631      	mov	r1, r6
   1f994:	4620      	mov	r0, r4
   1f996:	4798      	blx	r3
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	int ret = z_vrfy_uart_config_get(*(const struct device **)&arg0, *(struct uart_config **)&arg1)
;
	_current->syscall_frame = NULL;
   1f998:	68ab      	ldr	r3, [r5, #8]
   1f99a:	2200      	movs	r2, #0
   1f99c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	return (uintptr_t) ret;
}
   1f9a0:	b006      	add	sp, #24
   1f9a2:	bd70      	pop	{r4, r5, r6, pc}
	if (api->config_get == NULL) {
   1f9a4:	68a3      	ldr	r3, [r4, #8]
   1f9a6:	691b      	ldr	r3, [r3, #16]
   1f9a8:	2b00      	cmp	r3, #0
   1f9aa:	d1f2      	bne.n	1f992 <z_mrsh_uart_config_get+0x7e>
		return -ENOSYS;
   1f9ac:	f06f 0057 	mvn.w	r0, #87	; 0x57
   1f9b0:	e7f2      	b.n	1f998 <z_mrsh_uart_config_get+0x84>
   1f9b2:	2201      	movs	r2, #1
   1f9b4:	2108      	movs	r1, #8
   1f9b6:	4630      	mov	r0, r6
   1f9b8:	f007 f874 	bl	26aa4 <arch_buffer_validate>
   1f9bc:	2800      	cmp	r0, #0
   1f9be:	d0f1      	beq.n	1f9a4 <z_mrsh_uart_config_get+0x90>
   1f9c0:	f009 fc4d 	bl	2925e <arch_is_user_context>
   1f9c4:	4c16      	ldr	r4, [pc, #88]	; (1fa20 <z_mrsh_uart_config_get+0x10c>)
   1f9c6:	4b17      	ldr	r3, [pc, #92]	; (1fa24 <z_mrsh_uart_config_get+0x110>)
   1f9c8:	1ae4      	subs	r4, r4, r3
   1f9ca:	08e4      	lsrs	r4, r4, #3
   1f9cc:	01a4      	lsls	r4, r4, #6
   1f9ce:	4b1b      	ldr	r3, [pc, #108]	; (1fa3c <z_mrsh_uart_config_get+0x128>)
   1f9d0:	f044 0401 	orr.w	r4, r4, #1
   1f9d4:	2208      	movs	r2, #8
   1f9d6:	2800      	cmp	r0, #0
   1f9d8:	d0cf      	beq.n	1f97a <z_mrsh_uart_config_get+0x66>
   1f9da:	e9cd 2300 	strd	r2, r3, [sp]
   1f9de:	4916      	ldr	r1, [pc, #88]	; (1fa38 <z_mrsh_uart_config_get+0x124>)
   1f9e0:	4a11      	ldr	r2, [pc, #68]	; (1fa28 <z_mrsh_uart_config_get+0x114>)
   1f9e2:	4633      	mov	r3, r6
   1f9e4:	4620      	mov	r0, r4
   1f9e6:	f005 fa56 	bl	24e96 <log_from_user>
   1f9ea:	e7b2      	b.n	1f952 <z_mrsh_uart_config_get+0x3e>
	Z_OOPS(Z_SYSCALL_DRIVER_UART(dev, config_get));
   1f9ec:	68a2      	ldr	r2, [r4, #8]
   1f9ee:	6913      	ldr	r3, [r2, #16]
   1f9f0:	2b00      	cmp	r3, #0
   1f9f2:	d1de      	bne.n	1f9b2 <z_mrsh_uart_config_get+0x9e>
   1f9f4:	f009 fc33 	bl	2925e <arch_is_user_context>
   1f9f8:	4c09      	ldr	r4, [pc, #36]	; (1fa20 <z_mrsh_uart_config_get+0x10c>)
   1f9fa:	4b0a      	ldr	r3, [pc, #40]	; (1fa24 <z_mrsh_uart_config_get+0x110>)
   1f9fc:	1ae4      	subs	r4, r4, r3
   1f9fe:	08e4      	lsrs	r4, r4, #3
   1fa00:	01a4      	lsls	r4, r4, #6
   1fa02:	f044 0401 	orr.w	r4, r4, #1
   1fa06:	2800      	cmp	r0, #0
   1fa08:	d0ae      	beq.n	1f968 <z_mrsh_uart_config_get+0x54>
   1fa0a:	9200      	str	r2, [sp, #0]
   1fa0c:	4b08      	ldr	r3, [pc, #32]	; (1fa30 <z_mrsh_uart_config_get+0x11c>)
   1fa0e:	4a06      	ldr	r2, [pc, #24]	; (1fa28 <z_mrsh_uart_config_get+0x114>)
   1fa10:	4908      	ldr	r1, [pc, #32]	; (1fa34 <z_mrsh_uart_config_get+0x120>)
   1fa12:	4620      	mov	r0, r4
   1fa14:	f005 fa3f 	bl	24e96 <log_from_user>
   1fa18:	e79b      	b.n	1f952 <z_mrsh_uart_config_get+0x3e>
   1fa1a:	bf00      	nop
   1fa1c:	200023f4 	.word	0x200023f4
   1fa20:	0002a810 	.word	0x0002a810
   1fa24:	0002a6d0 	.word	0x0002a6d0
   1fa28:	0002ed2a 	.word	0x0002ed2a
   1fa2c:	0002e72d 	.word	0x0002e72d
   1fa30:	0002ece0 	.word	0x0002ece0
   1fa34:	0002e762 	.word	0x0002e762
   1fa38:	0002c8a6 	.word	0x0002c8a6
   1fa3c:	0002c903 	.word	0x0002c903

0001fa40 <z_mrsh_uart_configure>:
#include <syscalls/uart.h>

extern int z_vrfy_uart_configure(const struct device * dev, const struct uart_config * cfg);
uintptr_t z_mrsh_uart_configure(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   1fa40:	b570      	push	{r4, r5, r6, lr}
	_current->syscall_frame = ssf;
   1fa42:	4d41      	ldr	r5, [pc, #260]	; (1fb48 <z_mrsh_uart_configure+0x108>)
{
   1fa44:	b086      	sub	sp, #24
	_current->syscall_frame = ssf;
   1fa46:	68ab      	ldr	r3, [r5, #8]
   1fa48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1fa4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
{
   1fa4e:	4604      	mov	r4, r0
   1fa50:	460e      	mov	r6, r1
#include <syscalls/uart_config_get_mrsh.c>

static inline int z_vrfy_uart_configure(const struct device *dev,
					const struct uart_config *cfg)
{
	Z_OOPS(Z_SYSCALL_DRIVER_UART(dev, config_get));
   1fa52:	f7e0 fb55 	bl	100 <z_object_find>
   1fa56:	4621      	mov	r1, r4
   1fa58:	f009 fc0b 	bl	29272 <z_obj_validation_check.constprop.0>
   1fa5c:	4602      	mov	r2, r0
   1fa5e:	2800      	cmp	r0, #0
   1fa60:	d05a      	beq.n	1fb18 <z_mrsh_uart_configure+0xd8>
   1fa62:	f009 fbfc 	bl	2925e <arch_is_user_context>
   1fa66:	4b39      	ldr	r3, [pc, #228]	; (1fb4c <z_mrsh_uart_configure+0x10c>)
   1fa68:	4a39      	ldr	r2, [pc, #228]	; (1fb50 <z_mrsh_uart_configure+0x110>)
   1fa6a:	1a9b      	subs	r3, r3, r2
   1fa6c:	08db      	lsrs	r3, r3, #3
   1fa6e:	019b      	lsls	r3, r3, #6
   1fa70:	f043 0301 	orr.w	r3, r3, #1
   1fa74:	b148      	cbz	r0, 1fa8a <z_mrsh_uart_configure+0x4a>
   1fa76:	4a37      	ldr	r2, [pc, #220]	; (1fb54 <z_mrsh_uart_configure+0x114>)
   1fa78:	4937      	ldr	r1, [pc, #220]	; (1fb58 <z_mrsh_uart_configure+0x118>)
   1fa7a:	4618      	mov	r0, r3
   1fa7c:	f005 fa0b 	bl	24e96 <log_from_user>
	Z_OOPS(Z_SYSCALL_MEMORY_READ(cfg, sizeof(struct uart_config)));
   1fa80:	68ab      	ldr	r3, [r5, #8]
   1fa82:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   1fa86:	f006 ffe9 	bl	26a5c <arch_syscall_oops>
	Z_OOPS(Z_SYSCALL_DRIVER_UART(dev, config_get));
   1fa8a:	4932      	ldr	r1, [pc, #200]	; (1fb54 <z_mrsh_uart_configure+0x114>)
   1fa8c:	4832      	ldr	r0, [pc, #200]	; (1fb58 <z_mrsh_uart_configure+0x118>)
   1fa8e:	461a      	mov	r2, r3
   1fa90:	f005 fa34 	bl	24efc <log_1>
   1fa94:	e7f4      	b.n	1fa80 <z_mrsh_uart_configure+0x40>
   1fa96:	460b      	mov	r3, r1
   1fa98:	4a30      	ldr	r2, [pc, #192]	; (1fb5c <z_mrsh_uart_configure+0x11c>)
   1fa9a:	492e      	ldr	r1, [pc, #184]	; (1fb54 <z_mrsh_uart_configure+0x114>)
   1fa9c:	4830      	ldr	r0, [pc, #192]	; (1fb60 <z_mrsh_uart_configure+0x120>)
   1fa9e:	f8ad 4000 	strh.w	r4, [sp]
   1faa2:	f005 fa58 	bl	24f56 <log_3>
   1faa6:	e7eb      	b.n	1fa80 <z_mrsh_uart_configure+0x40>
	Z_OOPS(Z_SYSCALL_MEMORY_READ(cfg, sizeof(struct uart_config)));
   1faa8:	492a      	ldr	r1, [pc, #168]	; (1fb54 <z_mrsh_uart_configure+0x114>)
   1faaa:	482e      	ldr	r0, [pc, #184]	; (1fb64 <z_mrsh_uart_configure+0x124>)
   1faac:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1fab0:	e9cd 1602 	strd	r1, r6, [sp, #8]
   1fab4:	4623      	mov	r3, r4
   1fab6:	2204      	movs	r2, #4
   1fab8:	a902      	add	r1, sp, #8
   1faba:	f005 fa68 	bl	24f8e <log_n>
   1fabe:	e7df      	b.n	1fa80 <z_mrsh_uart_configure+0x40>
	return api->configure(dev, cfg);
   1fac0:	4631      	mov	r1, r6
   1fac2:	4620      	mov	r0, r4
   1fac4:	4798      	blx	r3
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	int ret = z_vrfy_uart_configure(*(const struct device **)&arg0, *(const struct uart_config **)&arg1)
;
	_current->syscall_frame = NULL;
   1fac6:	68ab      	ldr	r3, [r5, #8]
   1fac8:	2200      	movs	r2, #0
   1faca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	return (uintptr_t) ret;
}
   1face:	b006      	add	sp, #24
   1fad0:	bd70      	pop	{r4, r5, r6, pc}
	if (api->configure == NULL) {
   1fad2:	68a3      	ldr	r3, [r4, #8]
   1fad4:	68db      	ldr	r3, [r3, #12]
   1fad6:	2b00      	cmp	r3, #0
   1fad8:	d1f2      	bne.n	1fac0 <z_mrsh_uart_configure+0x80>
		return -ENOSYS;
   1fada:	f06f 0057 	mvn.w	r0, #87	; 0x57
   1fade:	e7f2      	b.n	1fac6 <z_mrsh_uart_configure+0x86>
   1fae0:	2108      	movs	r1, #8
   1fae2:	4630      	mov	r0, r6
   1fae4:	f006 ffde 	bl	26aa4 <arch_buffer_validate>
   1fae8:	2800      	cmp	r0, #0
   1faea:	d0f2      	beq.n	1fad2 <z_mrsh_uart_configure+0x92>
   1faec:	f009 fbb7 	bl	2925e <arch_is_user_context>
   1faf0:	4c16      	ldr	r4, [pc, #88]	; (1fb4c <z_mrsh_uart_configure+0x10c>)
   1faf2:	4b17      	ldr	r3, [pc, #92]	; (1fb50 <z_mrsh_uart_configure+0x110>)
   1faf4:	1ae4      	subs	r4, r4, r3
   1faf6:	08e4      	lsrs	r4, r4, #3
   1faf8:	01a4      	lsls	r4, r4, #6
   1fafa:	4b1b      	ldr	r3, [pc, #108]	; (1fb68 <z_mrsh_uart_configure+0x128>)
   1fafc:	f044 0401 	orr.w	r4, r4, #1
   1fb00:	2208      	movs	r2, #8
   1fb02:	2800      	cmp	r0, #0
   1fb04:	d0d0      	beq.n	1faa8 <z_mrsh_uart_configure+0x68>
   1fb06:	e9cd 2300 	strd	r2, r3, [sp]
   1fb0a:	4916      	ldr	r1, [pc, #88]	; (1fb64 <z_mrsh_uart_configure+0x124>)
   1fb0c:	4a11      	ldr	r2, [pc, #68]	; (1fb54 <z_mrsh_uart_configure+0x114>)
   1fb0e:	4633      	mov	r3, r6
   1fb10:	4620      	mov	r0, r4
   1fb12:	f005 f9c0 	bl	24e96 <log_from_user>
   1fb16:	e7b3      	b.n	1fa80 <z_mrsh_uart_configure+0x40>
	Z_OOPS(Z_SYSCALL_DRIVER_UART(dev, config_get));
   1fb18:	68a1      	ldr	r1, [r4, #8]
   1fb1a:	690b      	ldr	r3, [r1, #16]
   1fb1c:	2b00      	cmp	r3, #0
   1fb1e:	d1df      	bne.n	1fae0 <z_mrsh_uart_configure+0xa0>
   1fb20:	f009 fb9d 	bl	2925e <arch_is_user_context>
   1fb24:	4c09      	ldr	r4, [pc, #36]	; (1fb4c <z_mrsh_uart_configure+0x10c>)
   1fb26:	4b0a      	ldr	r3, [pc, #40]	; (1fb50 <z_mrsh_uart_configure+0x110>)
   1fb28:	1ae4      	subs	r4, r4, r3
   1fb2a:	08e4      	lsrs	r4, r4, #3
   1fb2c:	01a4      	lsls	r4, r4, #6
   1fb2e:	f044 0401 	orr.w	r4, r4, #1
   1fb32:	2800      	cmp	r0, #0
   1fb34:	d0af      	beq.n	1fa96 <z_mrsh_uart_configure+0x56>
   1fb36:	9100      	str	r1, [sp, #0]
   1fb38:	4b08      	ldr	r3, [pc, #32]	; (1fb5c <z_mrsh_uart_configure+0x11c>)
   1fb3a:	4a06      	ldr	r2, [pc, #24]	; (1fb54 <z_mrsh_uart_configure+0x114>)
   1fb3c:	4908      	ldr	r1, [pc, #32]	; (1fb60 <z_mrsh_uart_configure+0x120>)
   1fb3e:	4620      	mov	r0, r4
   1fb40:	f005 f9a9 	bl	24e96 <log_from_user>
   1fb44:	e79c      	b.n	1fa80 <z_mrsh_uart_configure+0x40>
   1fb46:	bf00      	nop
   1fb48:	200023f4 	.word	0x200023f4
   1fb4c:	0002a810 	.word	0x0002a810
   1fb50:	0002a6d0 	.word	0x0002a6d0
   1fb54:	0002ed41 	.word	0x0002ed41
   1fb58:	0002e72d 	.word	0x0002e72d
   1fb5c:	0002ece0 	.word	0x0002ece0
   1fb60:	0002e762 	.word	0x0002e762
   1fb64:	0002c8a6 	.word	0x0002c8a6
   1fb68:	0002d10e 	.word	0x0002d10e

0001fb6c <random_byte_get>:
	__asm__ volatile(
   1fb6c:	f04f 0320 	mov.w	r3, #32
   1fb70:	f3ef 8211 	mrs	r2, BASEPRI
   1fb74:	f383 8811 	msr	BASEPRI, r3
   1fb78:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1fb7c:	4b08      	ldr	r3, [pc, #32]	; (1fba0 <random_byte_get+0x34>)
   1fb7e:	6819      	ldr	r1, [r3, #0]
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1fb80:	b159      	cbz	r1, 1fb9a <random_byte_get+0x2e>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1fb82:	4908      	ldr	r1, [pc, #32]	; (1fba4 <random_byte_get+0x38>)
   1fb84:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1fb88:	2100      	movs	r1, #0
   1fb8a:	6019      	str	r1, [r3, #0]
   1fb8c:	681b      	ldr	r3, [r3, #0]
		retval = nrf_rng_random_value_get(NRF_RNG);
   1fb8e:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1fb90:	f382 8811 	msr	BASEPRI, r2
   1fb94:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1fb98:	4770      	bx	lr
	int retval = -EAGAIN;
   1fb9a:	f06f 000a 	mvn.w	r0, #10
   1fb9e:	e7f7      	b.n	1fb90 <random_byte_get+0x24>
   1fba0:	4000d100 	.word	0x4000d100
   1fba4:	4000d000 	.word	0x4000d000

0001fba8 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1fba8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fbaa:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   1fbac:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   1fbae:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   1fbb0:	f04f 0520 	mov.w	r5, #32
   1fbb4:	f3ef 8011 	mrs	r0, BASEPRI
   1fbb8:	f385 8811 	msr	BASEPRI, r5
   1fbbc:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1fbc0:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1fbc2:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   1fbc6:	1ba4      	subs	r4, r4, r6
   1fbc8:	403c      	ands	r4, r7
	if (available < len) {
   1fbca:	42a2      	cmp	r2, r4
		len = available;
   1fbcc:	bf88      	it	hi
   1fbce:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1fbd0:	eb06 0c02 	add.w	ip, r6, r2
   1fbd4:	ea07 0c0c 	and.w	ip, r7, ip
	first = rngp->first_alloc;
   1fbd8:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   1fbda:	f883 c000 	strb.w	ip, [r3]
	__asm__ volatile(
   1fbde:	f380 8811 	msr	BASEPRI, r0
   1fbe2:	f3bf 8f6f 	isb	sy
   1fbe6:	440a      	add	r2, r1
	uint8_t *dst   = buf;
   1fbe8:	4608      	mov	r0, r1
	irq_unlock(key);

	while (likely(len--)) {
   1fbea:	4282      	cmp	r2, r0
   1fbec:	d119      	bne.n	1fc22 <rng_pool_get+0x7a>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1fbee:	4576      	cmp	r6, lr
   1fbf0:	d10d      	bne.n	1fc0e <rng_pool_get+0x66>
	__asm__ volatile(
   1fbf2:	f04f 0520 	mov.w	r5, #32
   1fbf6:	f3ef 8211 	mrs	r2, BASEPRI
   1fbfa:	f385 8811 	msr	BASEPRI, r5
   1fbfe:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1fc02:	781d      	ldrb	r5, [r3, #0]
   1fc04:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   1fc06:	f382 8811 	msr	BASEPRI, r2
   1fc0a:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1fc0e:	1a41      	subs	r1, r0, r1
	available = available - len;
	if (available <= rngp->threshold) {
   1fc10:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   1fc12:	b288      	uxth	r0, r1
	available = available - len;
   1fc14:	1a21      	subs	r1, r4, r0
	if (available <= rngp->threshold) {
   1fc16:	428b      	cmp	r3, r1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1fc18:	bf22      	ittt	cs
   1fc1a:	4b06      	ldrcs	r3, [pc, #24]	; (1fc34 <rng_pool_get+0x8c>)
   1fc1c:	2201      	movcs	r2, #1
   1fc1e:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1fc20:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1fc22:	eb03 0c05 	add.w	ip, r3, r5
		first = (first + 1) & mask;
   1fc26:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1fc28:	f89c c005 	ldrb.w	ip, [ip, #5]
   1fc2c:	f800 cb01 	strb.w	ip, [r0], #1
		first = (first + 1) & mask;
   1fc30:	403d      	ands	r5, r7
   1fc32:	e7da      	b.n	1fbea <rng_pool_get+0x42>
   1fc34:	4000d000 	.word	0x4000d000

0001fc38 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1fc38:	43db      	mvns	r3, r3
{
   1fc3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1fc3e:	f013 0501 	ands.w	r5, r3, #1
{
   1fc42:	460e      	mov	r6, r1
   1fc44:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1fc46:	d004      	beq.n	1fc52 <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1fc48:	4821      	ldr	r0, [pc, #132]	; (1fcd0 <entropy_nrf5_get_entropy_isr+0x98>)
   1fc4a:	f7ff ffad 	bl	1fba8 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1fc4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1fc52:	2a00      	cmp	r2, #0
   1fc54:	d033      	beq.n	1fcbe <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   1fc56:	f04f 0320 	mov.w	r3, #32
   1fc5a:	f3ef 8811 	mrs	r8, BASEPRI
   1fc5e:	f383 8811 	msr	BASEPRI, r3
   1fc62:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1fc66:	200d      	movs	r0, #13
   1fc68:	f7e6 f9e2 	bl	6030 <arch_irq_is_enabled>
   1fc6c:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1fc6e:	200d      	movs	r0, #13
   1fc70:	f7e6 f9ca 	bl	6008 <arch_irq_disable>
	__asm__ volatile(
   1fc74:	f388 8811 	msr	BASEPRI, r8
   1fc78:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1fc7c:	4a15      	ldr	r2, [pc, #84]	; (1fcd4 <entropy_nrf5_get_entropy_isr+0x9c>)
   1fc7e:	6015      	str	r5, [r2, #0]
   1fc80:	6813      	ldr	r3, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1fc82:	4b15      	ldr	r3, [pc, #84]	; (1fcd8 <entropy_nrf5_get_entropy_isr+0xa0>)
   1fc84:	2101      	movs	r1, #1
   1fc86:	6019      	str	r1, [r3, #0]
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1fc88:	4914      	ldr	r1, [pc, #80]	; (1fcdc <entropy_nrf5_get_entropy_isr+0xa4>)
   1fc8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   1fc8e:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
   1fc92:	4625      	mov	r5, r4
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1fc94:	4691      	mov	r9, r2
   1fc96:	468a      	mov	sl, r1
   1fc98:	4698      	mov	r8, r3
   1fc9a:	f8d9 3000 	ldr.w	r3, [r9]
			while (!nrf_rng_event_check(NRF_RNG,
   1fc9e:	b183      	cbz	r3, 1fcc2 <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   1fca0:	f7ff ff64 	bl	1fb6c <random_byte_get>
			if (byte < 0) {
   1fca4:	1e03      	subs	r3, r0, #0
   1fca6:	f8ca 8180 	str.w	r8, [sl, #384]	; 0x180
   1fcaa:	dbf6      	blt.n	1fc9a <entropy_nrf5_get_entropy_isr+0x62>
   1fcac:	3d01      	subs	r5, #1
   1fcae:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
   1fcb0:	5573      	strb	r3, [r6, r5]
		} while (len);
   1fcb2:	2d00      	cmp	r5, #0
   1fcb4:	d1f1      	bne.n	1fc9a <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   1fcb6:	b117      	cbz	r7, 1fcbe <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   1fcb8:	200d      	movs	r0, #13
   1fcba:	f7e6 f995 	bl	5fe8 <arch_irq_enable>
	return cnt;
   1fcbe:	4620      	mov	r0, r4
   1fcc0:	e7c5      	b.n	1fc4e <entropy_nrf5_get_entropy_isr+0x16>
  __ASM volatile ("dsb 0xF":::"memory");
   1fcc2:	f3bf 8f4f 	dsb	sy
				__WFE();
   1fcc6:	bf20      	wfe
				__SEV();
   1fcc8:	bf40      	sev
				__WFE();
   1fcca:	bf20      	wfe
   1fccc:	e7e5      	b.n	1fc9a <entropy_nrf5_get_entropy_isr+0x62>
   1fcce:	bf00      	nop
   1fcd0:	20002340 	.word	0x20002340
   1fcd4:	4000d100 	.word	0x4000d100
   1fcd8:	4000d000 	.word	0x4000d000
   1fcdc:	e000e100 	.word	0xe000e100

0001fce0 <entropy_nrf5_get_entropy>:
{
   1fce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   1fce4:	4f13      	ldr	r7, [pc, #76]	; (1fd34 <entropy_nrf5_get_entropy+0x54>)
   1fce6:	460d      	mov	r5, r1
   1fce8:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1fcea:	f107 0845 	add.w	r8, r7, #69	; 0x45
   1fcee:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   1fcf2:	b914      	cbnz	r4, 1fcfa <entropy_nrf5_get_entropy+0x1a>
}
   1fcf4:	4620      	mov	r0, r4
   1fcf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1fcfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fcfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1fd02:	4638      	mov	r0, r7
   1fd04:	f002 f9e0 	bl	220c8 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1fd08:	4622      	mov	r2, r4
   1fd0a:	4629      	mov	r1, r5
   1fd0c:	4640      	mov	r0, r8
   1fd0e:	f7ff ff4b 	bl	1fba8 <rng_pool_get>
   1fd12:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   1fd14:	4638      	mov	r0, r7
   1fd16:	f002 f975 	bl	22004 <z_impl_k_sem_give>
		if (bytes == 0U) {
   1fd1a:	b93e      	cbnz	r6, 1fd2c <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   1fd1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1fd20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fd24:	4648      	mov	r0, r9
   1fd26:	f002 f9cf 	bl	220c8 <z_impl_k_sem_take>
			continue;
   1fd2a:	e7e2      	b.n	1fcf2 <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   1fd2c:	1ba4      	subs	r4, r4, r6
   1fd2e:	b2a4      	uxth	r4, r4
		buf += bytes;
   1fd30:	4435      	add	r5, r6
   1fd32:	e7de      	b.n	1fcf2 <entropy_nrf5_get_entropy+0x12>
   1fd34:	20002310 	.word	0x20002310

0001fd38 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   1fd38:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1fd3a:	4c19      	ldr	r4, [pc, #100]	; (1fda0 <entropy_nrf5_init+0x68>)
   1fd3c:	2201      	movs	r2, #1
   1fd3e:	4611      	mov	r1, r2
   1fd40:	4620      	mov	r0, r4
   1fd42:	f009 fe84 	bl	29a4e <z_impl_k_sem_init>
   1fd46:	2201      	movs	r2, #1
   1fd48:	2100      	movs	r1, #0
   1fd4a:	f104 0018 	add.w	r0, r4, #24
   1fd4e:	f009 fe7e 	bl	29a4e <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1fd52:	f240 4307 	movw	r3, #1031	; 0x407
   1fd56:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1fd5a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1fd5e:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1fd60:	230c      	movs	r3, #12
   1fd62:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1fd66:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   1fd68:	4b0e      	ldr	r3, [pc, #56]	; (1fda4 <entropy_nrf5_init+0x6c>)
   1fd6a:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1fd6e:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1fd72:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1fd76:	f042 0201 	orr.w	r2, r2, #1
   1fd7a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1fd7e:	4a0a      	ldr	r2, [pc, #40]	; (1fda8 <entropy_nrf5_init+0x70>)
    p_reg->INTENSET = mask;
   1fd80:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1fd82:	6015      	str	r5, [r2, #0]
   1fd84:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENSET = mask;
   1fd86:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1fd8a:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1fd8c:	6019      	str	r1, [r3, #0]
   1fd8e:	200d      	movs	r0, #13
   1fd90:	f7e6 f95c 	bl	604c <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1fd94:	200d      	movs	r0, #13
   1fd96:	f7e6 f927 	bl	5fe8 <arch_irq_enable>

	return 0;
}
   1fd9a:	4628      	mov	r0, r5
   1fd9c:	bd38      	pop	{r3, r4, r5, pc}
   1fd9e:	bf00      	nop
   1fda0:	20002310 	.word	0x20002310
   1fda4:	4000d000 	.word	0x4000d000
   1fda8:	4000d100 	.word	0x4000d100

0001fdac <isr>:
{
   1fdac:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1fdae:	f7ff fedd 	bl	1fb6c <random_byte_get>
	if (byte < 0) {
   1fdb2:	2800      	cmp	r0, #0
   1fdb4:	db20      	blt.n	1fdf8 <isr+0x4c>
	uint8_t last  = rngp->last;
   1fdb6:	4b17      	ldr	r3, [pc, #92]	; (1fe14 <isr+0x68>)
   1fdb8:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1fdbc:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   1fdc0:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1fdc4:	1a51      	subs	r1, r2, r1
   1fdc6:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1fdca:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1fdcc:	d10d      	bne.n	1fdea <isr+0x3e>
	uint8_t last  = rngp->last;
   1fdce:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1fdd2:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1fdd6:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1fdda:	1a51      	subs	r1, r2, r1
   1fddc:	ea34 0101 	bics.w	r1, r4, r1
   1fde0:	d10b      	bne.n	1fdfa <isr+0x4e>
   1fde2:	4b0d      	ldr	r3, [pc, #52]	; (1fe18 <isr+0x6c>)
   1fde4:	2201      	movs	r2, #1
   1fde6:	601a      	str	r2, [r3, #0]
}
   1fde8:	e00e      	b.n	1fe08 <isr+0x5c>
	rngp->buffer[last] = byte;
   1fdea:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1fdec:	3201      	adds	r2, #1
   1fdee:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1fdf0:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1fdf4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   1fdf8:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1fdfa:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1fdfc:	3201      	adds	r2, #1
   1fdfe:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1fe00:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1fe04:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   1fe08:	4804      	ldr	r0, [pc, #16]	; (1fe1c <isr+0x70>)
}
   1fe0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1fe0e:	f002 b8f9 	b.w	22004 <z_impl_k_sem_give>
   1fe12:	bf00      	nop
   1fe14:	20002310 	.word	0x20002310
   1fe18:	4000d004 	.word	0x4000d004
   1fe1c:	20002328 	.word	0x20002328

0001fe20 <z_mrsh_entropy_get_entropy>:
#include <syscalls/entropy.h>

extern int z_vrfy_entropy_get_entropy(const struct device * dev, uint8_t * buffer, uint16_t length);
uintptr_t z_mrsh_entropy_get_entropy(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   1fe20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_current->syscall_frame = ssf;
   1fe24:	f8df 8138 	ldr.w	r8, [pc, #312]	; 1ff60 <z_mrsh_entropy_get_entropy+0x140>
{
   1fe28:	b086      	sub	sp, #24
	_current->syscall_frame = ssf;
   1fe2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
{
   1fe2e:	4616      	mov	r6, r2
	_current->syscall_frame = ssf;
   1fe30:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1fe32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
{
   1fe36:	460f      	mov	r7, r1
   1fe38:	4604      	mov	r4, r0

static inline int z_vrfy_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t len)
{
	Z_OOPS(Z_SYSCALL_DRIVER_ENTROPY(dev, get_entropy));
   1fe3a:	f7e0 f961 	bl	100 <z_object_find>
					 enum k_objects otype,
					 enum _obj_init_check init)
{
	int ret;

	ret = z_object_validate(ko, otype, init);
   1fe3e:	2200      	movs	r2, #0
   1fe40:	211a      	movs	r1, #26
   1fe42:	4682      	mov	sl, r0
   1fe44:	f004 f95a 	bl	240fc <z_object_validate>
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	int ret = z_vrfy_entropy_get_entropy(*(const struct device **)&arg0, *(uint8_t **)&arg1, *(uint16_t*)&arg2)
   1fe48:	fa1f f986 	uxth.w	r9, r6

#ifdef CONFIG_LOG
	if (ret != 0) {
   1fe4c:	4645      	mov	r5, r8
   1fe4e:	2800      	cmp	r0, #0
   1fe50:	d05e      	beq.n	1ff10 <z_mrsh_entropy_get_entropy+0xf0>
		z_dump_object_error(ret, obj, ko, otype);
   1fe52:	231a      	movs	r3, #26
   1fe54:	4652      	mov	r2, sl
   1fe56:	4621      	mov	r1, r4
   1fe58:	f004 f858 	bl	23f0c <z_dump_object_error>
   1fe5c:	f009 fa19 	bl	29292 <arch_is_user_context>
   1fe60:	4b37      	ldr	r3, [pc, #220]	; (1ff40 <z_mrsh_entropy_get_entropy+0x120>)
   1fe62:	4a38      	ldr	r2, [pc, #224]	; (1ff44 <z_mrsh_entropy_get_entropy+0x124>)
   1fe64:	1a9b      	subs	r3, r3, r2
   1fe66:	08db      	lsrs	r3, r3, #3
   1fe68:	019b      	lsls	r3, r3, #6
   1fe6a:	f043 0301 	orr.w	r3, r3, #1
   1fe6e:	b148      	cbz	r0, 1fe84 <z_mrsh_entropy_get_entropy+0x64>
   1fe70:	4a35      	ldr	r2, [pc, #212]	; (1ff48 <z_mrsh_entropy_get_entropy+0x128>)
   1fe72:	4936      	ldr	r1, [pc, #216]	; (1ff4c <z_mrsh_entropy_get_entropy+0x12c>)
   1fe74:	4618      	mov	r0, r3
   1fe76:	f005 f80e 	bl	24e96 <log_from_user>
	Z_OOPS(Z_SYSCALL_MEMORY_WRITE(buffer, len));
   1fe7a:	68ab      	ldr	r3, [r5, #8]
   1fe7c:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   1fe80:	f006 fdec 	bl	26a5c <arch_syscall_oops>
	Z_OOPS(Z_SYSCALL_DRIVER_ENTROPY(dev, get_entropy));
   1fe84:	4930      	ldr	r1, [pc, #192]	; (1ff48 <z_mrsh_entropy_get_entropy+0x128>)
   1fe86:	4831      	ldr	r0, [pc, #196]	; (1ff4c <z_mrsh_entropy_get_entropy+0x12c>)
   1fe88:	461a      	mov	r2, r3
   1fe8a:	f005 f837 	bl	24efc <log_1>
   1fe8e:	e7f4      	b.n	1fe7a <z_mrsh_entropy_get_entropy+0x5a>
   1fe90:	4613      	mov	r3, r2
   1fe92:	492d      	ldr	r1, [pc, #180]	; (1ff48 <z_mrsh_entropy_get_entropy+0x128>)
   1fe94:	4a2e      	ldr	r2, [pc, #184]	; (1ff50 <z_mrsh_entropy_get_entropy+0x130>)
   1fe96:	482f      	ldr	r0, [pc, #188]	; (1ff54 <z_mrsh_entropy_get_entropy+0x134>)
   1fe98:	f8ad 4000 	strh.w	r4, [sp]
   1fe9c:	f005 f85b 	bl	24f56 <log_3>
   1fea0:	e7eb      	b.n	1fe7a <z_mrsh_entropy_get_entropy+0x5a>
	Z_OOPS(Z_SYSCALL_MEMORY_WRITE(buffer, len));
   1fea2:	4a29      	ldr	r2, [pc, #164]	; (1ff48 <z_mrsh_entropy_get_entropy+0x128>)
   1fea4:	482c      	ldr	r0, [pc, #176]	; (1ff58 <z_mrsh_entropy_get_entropy+0x138>)
   1fea6:	e9cd 2702 	strd	r2, r7, [sp, #8]
   1feaa:	e9cd 6304 	strd	r6, r3, [sp, #16]
   1feae:	2204      	movs	r2, #4
   1feb0:	4623      	mov	r3, r4
   1feb2:	a902      	add	r1, sp, #8
   1feb4:	f005 f86b 	bl	24f8e <log_n>
   1feb8:	e7df      	b.n	1fe7a <z_mrsh_entropy_get_entropy+0x5a>
	return api->get_entropy(dev, buffer, length);
   1feba:	68a3      	ldr	r3, [r4, #8]
   1febc:	464a      	mov	r2, r9
   1febe:	681b      	ldr	r3, [r3, #0]
   1fec0:	4639      	mov	r1, r7
   1fec2:	4620      	mov	r0, r4
   1fec4:	4798      	blx	r3
;
	_current->syscall_frame = NULL;
   1fec6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1feca:	f8c3 a084 	str.w	sl, [r3, #132]	; 0x84
	return (uintptr_t) ret;
}
   1fece:	b006      	add	sp, #24
   1fed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1fed4:	b2b6      	uxth	r6, r6
   1fed6:	2201      	movs	r2, #1
   1fed8:	4631      	mov	r1, r6
   1feda:	4638      	mov	r0, r7
   1fedc:	f006 fde2 	bl	26aa4 <arch_buffer_validate>
   1fee0:	4682      	mov	sl, r0
   1fee2:	2800      	cmp	r0, #0
   1fee4:	d0e9      	beq.n	1feba <z_mrsh_entropy_get_entropy+0x9a>
   1fee6:	f009 f9d4 	bl	29292 <arch_is_user_context>
   1feea:	4c15      	ldr	r4, [pc, #84]	; (1ff40 <z_mrsh_entropy_get_entropy+0x120>)
   1feec:	4b15      	ldr	r3, [pc, #84]	; (1ff44 <z_mrsh_entropy_get_entropy+0x124>)
   1feee:	1ae4      	subs	r4, r4, r3
   1fef0:	08e4      	lsrs	r4, r4, #3
   1fef2:	01a4      	lsls	r4, r4, #6
   1fef4:	4b19      	ldr	r3, [pc, #100]	; (1ff5c <z_mrsh_entropy_get_entropy+0x13c>)
   1fef6:	f044 0401 	orr.w	r4, r4, #1
   1fefa:	2800      	cmp	r0, #0
   1fefc:	d0d1      	beq.n	1fea2 <z_mrsh_entropy_get_entropy+0x82>
   1fefe:	e9cd 6300 	strd	r6, r3, [sp]
   1ff02:	4a11      	ldr	r2, [pc, #68]	; (1ff48 <z_mrsh_entropy_get_entropy+0x128>)
   1ff04:	4914      	ldr	r1, [pc, #80]	; (1ff58 <z_mrsh_entropy_get_entropy+0x138>)
   1ff06:	463b      	mov	r3, r7
   1ff08:	4620      	mov	r0, r4
   1ff0a:	f004 ffc4 	bl	24e96 <log_from_user>
   1ff0e:	e7b4      	b.n	1fe7a <z_mrsh_entropy_get_entropy+0x5a>
	Z_OOPS(Z_SYSCALL_DRIVER_ENTROPY(dev, get_entropy));
   1ff10:	68a2      	ldr	r2, [r4, #8]
   1ff12:	6813      	ldr	r3, [r2, #0]
   1ff14:	2b00      	cmp	r3, #0
   1ff16:	d1dd      	bne.n	1fed4 <z_mrsh_entropy_get_entropy+0xb4>
   1ff18:	f009 f9bb 	bl	29292 <arch_is_user_context>
   1ff1c:	4c08      	ldr	r4, [pc, #32]	; (1ff40 <z_mrsh_entropy_get_entropy+0x120>)
   1ff1e:	4b09      	ldr	r3, [pc, #36]	; (1ff44 <z_mrsh_entropy_get_entropy+0x124>)
   1ff20:	1ae4      	subs	r4, r4, r3
   1ff22:	08e4      	lsrs	r4, r4, #3
   1ff24:	01a4      	lsls	r4, r4, #6
   1ff26:	f044 0401 	orr.w	r4, r4, #1
   1ff2a:	2800      	cmp	r0, #0
   1ff2c:	d0b0      	beq.n	1fe90 <z_mrsh_entropy_get_entropy+0x70>
   1ff2e:	9200      	str	r2, [sp, #0]
   1ff30:	4b07      	ldr	r3, [pc, #28]	; (1ff50 <z_mrsh_entropy_get_entropy+0x130>)
   1ff32:	4a05      	ldr	r2, [pc, #20]	; (1ff48 <z_mrsh_entropy_get_entropy+0x128>)
   1ff34:	4907      	ldr	r1, [pc, #28]	; (1ff54 <z_mrsh_entropy_get_entropy+0x134>)
   1ff36:	4620      	mov	r0, r4
   1ff38:	f004 ffad 	bl	24e96 <log_from_user>
   1ff3c:	e79d      	b.n	1fe7a <z_mrsh_entropy_get_entropy+0x5a>
   1ff3e:	bf00      	nop
   1ff40:	0002a810 	.word	0x0002a810
   1ff44:	0002a6d0 	.word	0x0002a6d0
   1ff48:	0002ed63 	.word	0x0002ed63
   1ff4c:	0002e72d 	.word	0x0002e72d
   1ff50:	0002ed57 	.word	0x0002ed57
   1ff54:	0002e762 	.word	0x0002e762
   1ff58:	0002c8a6 	.word	0x0002c8a6
   1ff5c:	0002c903 	.word	0x0002c903
   1ff60:	200023f4 	.word	0x200023f4

0001ff64 <nrf52_errata_136>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1ff64:	4b06      	ldr	r3, [pc, #24]	; (1ff80 <nrf52_errata_136+0x1c>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1ff66:	681b      	ldr	r3, [r3, #0]
   1ff68:	2b08      	cmp	r3, #8
   1ff6a:	d106      	bne.n	1ff7a <nrf52_errata_136+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1ff6c:	4b05      	ldr	r3, [pc, #20]	; (1ff84 <nrf52_errata_136+0x20>)
   1ff6e:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
   1ff70:	2b05      	cmp	r3, #5
   1ff72:	d802      	bhi.n	1ff7a <nrf52_errata_136+0x16>
   1ff74:	4a04      	ldr	r2, [pc, #16]	; (1ff88 <nrf52_errata_136+0x24>)
   1ff76:	5cd0      	ldrb	r0, [r2, r3]
   1ff78:	4770      	bx	lr
                    default:
                        return true;
                }
            }
        #endif
        return false;
   1ff7a:	2000      	movs	r0, #0
    #endif
}
   1ff7c:	4770      	bx	lr
   1ff7e:	bf00      	nop
   1ff80:	10000130 	.word	0x10000130
   1ff84:	10000134 	.word	0x10000134
   1ff88:	0002ed7e 	.word	0x0002ed7e

0001ff8c <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1ff8c:	4b06      	ldr	r3, [pc, #24]	; (1ffa8 <nrf52_errata_103+0x1c>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1ff8e:	681b      	ldr	r3, [r3, #0]
   1ff90:	2b08      	cmp	r3, #8
   1ff92:	d106      	bne.n	1ffa2 <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1ff94:	4b05      	ldr	r3, [pc, #20]	; (1ffac <nrf52_errata_103+0x20>)
   1ff96:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
   1ff98:	2b05      	cmp	r3, #5
   1ff9a:	d802      	bhi.n	1ffa2 <nrf52_errata_103+0x16>
   1ff9c:	4a04      	ldr	r2, [pc, #16]	; (1ffb0 <nrf52_errata_103+0x24>)
   1ff9e:	5cd0      	ldrb	r0, [r2, r3]
   1ffa0:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   1ffa2:	2000      	movs	r0, #0
    #endif
}
   1ffa4:	4770      	bx	lr
   1ffa6:	bf00      	nop
   1ffa8:	10000130 	.word	0x10000130
   1ffac:	10000134 	.word	0x10000134
   1ffb0:	0002ed84 	.word	0x0002ed84

0001ffb4 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1ffb4:	4a02      	ldr	r2, [pc, #8]	; (1ffc0 <nvmc_wait+0xc>)
   1ffb6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1ffba:	2b00      	cmp	r3, #0
   1ffbc:	d0fb      	beq.n	1ffb6 <nvmc_wait+0x2>
}
   1ffbe:	4770      	bx	lr
   1ffc0:	4001e000 	.word	0x4001e000

0001ffc4 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   1ffc4:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   1ffc6:	f7ff ffcd 	bl	1ff64 <nrf52_errata_136>
   1ffca:	b140      	cbz	r0, 1ffde <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   1ffcc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ffd0:	2200      	movs	r2, #0
   1ffd2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1ffd6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1ffda:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   1ffde:	f7ff ffc1 	bl	1ff64 <nrf52_errata_136>
   1ffe2:	2800      	cmp	r0, #0
   1ffe4:	d046      	beq.n	20074 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1ffe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1ffea:	4b52      	ldr	r3, [pc, #328]	; (20134 <SystemInit+0x170>)
   1ffec:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1fff0:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1fff4:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   1fff8:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1fffc:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   20000:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   20004:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   20008:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   2000c:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   20010:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   20014:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   20018:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   2001c:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   20020:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   20024:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   20028:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   2002c:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   20030:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   20034:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   20038:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   2003c:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   20040:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   20044:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   20048:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   2004c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   20050:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   20054:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   20058:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   2005c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   20060:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   20064:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   20068:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   2006c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   20070:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   20074:	f7ff ff8a 	bl	1ff8c <nrf52_errata_103>
   20078:	b110      	cbz	r0, 20080 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   2007a:	4b2f      	ldr	r3, [pc, #188]	; (20138 <SystemInit+0x174>)
   2007c:	4a2f      	ldr	r2, [pc, #188]	; (2013c <SystemInit+0x178>)
   2007e:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   20080:	f7ff ff84 	bl	1ff8c <nrf52_errata_103>
   20084:	b118      	cbz	r0, 2008e <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   20086:	4b2e      	ldr	r3, [pc, #184]	; (20140 <SystemInit+0x17c>)
   20088:	22fb      	movs	r2, #251	; 0xfb
   2008a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   2008e:	f7ff ff7d 	bl	1ff8c <nrf52_errata_103>
   20092:	b148      	cbz	r0, 200a8 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   20094:	492b      	ldr	r1, [pc, #172]	; (20144 <SystemInit+0x180>)
   20096:	4b2c      	ldr	r3, [pc, #176]	; (20148 <SystemInit+0x184>)
   20098:	680a      	ldr	r2, [r1, #0]
   2009a:	681b      	ldr	r3, [r3, #0]
   2009c:	f022 020f 	bic.w	r2, r2, #15
   200a0:	f003 030f 	and.w	r3, r3, #15
   200a4:	4313      	orrs	r3, r2
   200a6:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   200a8:	f7ff ff70 	bl	1ff8c <nrf52_errata_103>
   200ac:	b118      	cbz	r0, 200b6 <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   200ae:	4b27      	ldr	r3, [pc, #156]	; (2014c <SystemInit+0x188>)
   200b0:	f44f 7200 	mov.w	r2, #512	; 0x200
   200b4:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   200b6:	f7ff ff55 	bl	1ff64 <nrf52_errata_136>
   200ba:	b148      	cbz	r0, 200d0 <SystemInit+0x10c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   200bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   200c0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   200c4:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   200c6:	bf44      	itt	mi
   200c8:	f06f 0201 	mvnmi.w	r2, #1
   200cc:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   200d0:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   200d4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   200d8:	2a00      	cmp	r2, #0
   200da:	db03      	blt.n	200e4 <SystemInit+0x120>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   200dc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   200e0:	2b00      	cmp	r3, #0
   200e2:	da22      	bge.n	2012a <SystemInit+0x166>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   200e4:	491a      	ldr	r1, [pc, #104]	; (20150 <SystemInit+0x18c>)
   200e6:	2301      	movs	r3, #1
   200e8:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   200ec:	f7ff ff62 	bl	1ffb4 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   200f0:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
   200f4:	2412      	movs	r4, #18
   200f6:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   200fa:	f7ff ff5b 	bl	1ffb4 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   200fe:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   20102:	f7ff ff57 	bl	1ffb4 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   20106:	2300      	movs	r3, #0
   20108:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   2010c:	f7ff ff52 	bl	1ffb4 <nvmc_wait>
   20110:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   20114:	490f      	ldr	r1, [pc, #60]	; (20154 <SystemInit+0x190>)
   20116:	4b10      	ldr	r3, [pc, #64]	; (20158 <SystemInit+0x194>)
   20118:	68ca      	ldr	r2, [r1, #12]
   2011a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   2011e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   20120:	60cb      	str	r3, [r1, #12]
   20122:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   20126:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   20128:	e7fd      	b.n	20126 <SystemInit+0x162>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   2012a:	4b0c      	ldr	r3, [pc, #48]	; (2015c <SystemInit+0x198>)
   2012c:	4a0c      	ldr	r2, [pc, #48]	; (20160 <SystemInit+0x19c>)
   2012e:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   20130:	bd10      	pop	{r4, pc}
   20132:	bf00      	nop
   20134:	4000c000 	.word	0x4000c000
   20138:	4000568c 	.word	0x4000568c
   2013c:	00038148 	.word	0x00038148
   20140:	4000f000 	.word	0x4000f000
   20144:	40000ee4 	.word	0x40000ee4
   20148:	10000258 	.word	0x10000258
   2014c:	40029640 	.word	0x40029640
   20150:	4001e000 	.word	0x4001e000
   20154:	e000ed00 	.word	0xe000ed00
   20158:	05fa0004 	.word	0x05fa0004
   2015c:	20007c30 	.word	0x20007c30
   20160:	03d09000 	.word	0x03d09000

00020164 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   20164:	4b04      	ldr	r3, [pc, #16]	; (20178 <nrfx_clock_init+0x14>)
   20166:	791a      	ldrb	r2, [r3, #4]
   20168:	b922      	cbnz	r2, 20174 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   2016a:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   2016c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   2016e:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   20170:	4802      	ldr	r0, [pc, #8]	; (2017c <nrfx_clock_init+0x18>)
   20172:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   20174:	4802      	ldr	r0, [pc, #8]	; (20180 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   20176:	4770      	bx	lr
   20178:	20002364 	.word	0x20002364
   2017c:	0bad0000 	.word	0x0bad0000
   20180:	0bad000c 	.word	0x0bad000c

00020184 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   20184:	b110      	cbz	r0, 2018c <nrfx_clock_start+0x8>
   20186:	2801      	cmp	r0, #1
   20188:	d020      	beq.n	201cc <nrfx_clock_start+0x48>
   2018a:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   2018c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20190:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   20194:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   20198:	f411 3f80 	tst.w	r1, #65536	; 0x10000
   2019c:	4619      	mov	r1, r3
   2019e:	d011      	beq.n	201c4 <nrfx_clock_start+0x40>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   201a0:	f002 0203 	and.w	r2, r2, #3
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   201a4:	2a01      	cmp	r2, #1
   201a6:	d10d      	bne.n	201c4 <nrfx_clock_start+0x40>
    p_reg->LFCLKSRC = (uint32_t)(source);
   201a8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   201ac:	4b0c      	ldr	r3, [pc, #48]	; (201e0 <nrfx_clock_start+0x5c>)
   201ae:	2200      	movs	r2, #0
   201b0:	601a      	str	r2, [r3, #0]
   201b2:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   201b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   201b8:	2202      	movs	r2, #2
   201ba:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   201be:	2201      	movs	r2, #1
   201c0:	609a      	str	r2, [r3, #8]
}
   201c2:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
   201c4:	2300      	movs	r3, #0
   201c6:	f8c1 3518 	str.w	r3, [r1, #1304]	; 0x518
}
   201ca:	e7ef      	b.n	201ac <nrfx_clock_start+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   201cc:	4b05      	ldr	r3, [pc, #20]	; (201e4 <nrfx_clock_start+0x60>)
   201ce:	2200      	movs	r2, #0
   201d0:	601a      	str	r2, [r3, #0]
   201d2:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   201d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   201d8:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   201dc:	6018      	str	r0, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   201de:	4770      	bx	lr
   201e0:	40000104 	.word	0x40000104
   201e4:	40000100 	.word	0x40000100

000201e8 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   201e8:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   201ea:	b110      	cbz	r0, 201f2 <nrfx_clock_stop+0xa>
   201ec:	2801      	cmp	r0, #1
   201ee:	d018      	beq.n	20222 <nrfx_clock_stop+0x3a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   201f0:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   201f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   201f6:	2202      	movs	r2, #2
   201f8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   201fc:	4a18      	ldr	r2, [pc, #96]	; (20260 <nrfx_clock_stop+0x78>)
   201fe:	6010      	str	r0, [r2, #0]
   20200:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20202:	4a18      	ldr	r2, [pc, #96]	; (20264 <nrfx_clock_stop+0x7c>)
   20204:	2101      	movs	r1, #1
   20206:	6011      	str	r1, [r2, #0]
   20208:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   2020c:	461c      	mov	r4, r3
   2020e:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   20212:	03db      	lsls	r3, r3, #15
   20214:	d5ec      	bpl.n	201f0 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   20216:	2001      	movs	r0, #1
   20218:	f009 f846 	bl	292a8 <nrfx_busy_wait>
   2021c:	3d01      	subs	r5, #1
   2021e:	d1f6      	bne.n	2020e <nrfx_clock_stop+0x26>
   20220:	e7e6      	b.n	201f0 <nrfx_clock_stop+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20222:	4b11      	ldr	r3, [pc, #68]	; (20268 <nrfx_clock_stop+0x80>)
    p_reg->INTENCLR = mask;
   20224:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20228:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   2022a:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2022e:	601a      	str	r2, [r3, #0]
   20230:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20232:	4b0e      	ldr	r3, [pc, #56]	; (2026c <nrfx_clock_stop+0x84>)
   20234:	f242 7510 	movw	r5, #10000	; 0x2710
   20238:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   2023a:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   2023e:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
   20242:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   20244:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   20248:	d505      	bpl.n	20256 <nrfx_clock_stop+0x6e>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   2024a:	b123      	cbz	r3, 20256 <nrfx_clock_stop+0x6e>
   2024c:	2001      	movs	r0, #1
   2024e:	f009 f82b 	bl	292a8 <nrfx_busy_wait>
   20252:	3d01      	subs	r5, #1
   20254:	d1f1      	bne.n	2023a <nrfx_clock_stop+0x52>
            m_clock_cb.hfclk_started = false;
   20256:	4b06      	ldr	r3, [pc, #24]	; (20270 <nrfx_clock_stop+0x88>)
   20258:	2200      	movs	r2, #0
   2025a:	715a      	strb	r2, [r3, #5]
   2025c:	e7c8      	b.n	201f0 <nrfx_clock_stop+0x8>
   2025e:	bf00      	nop
   20260:	40000104 	.word	0x40000104
   20264:	4000000c 	.word	0x4000000c
   20268:	40000100 	.word	0x40000100
   2026c:	40000004 	.word	0x40000004
   20270:	20002364 	.word	0x20002364

00020274 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   20274:	4b16      	ldr	r3, [pc, #88]	; (202d0 <nrfx_power_clock_irq_handler+0x5c>)
   20276:	681a      	ldr	r2, [r3, #0]
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   20278:	b510      	push	{r4, lr}
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   2027a:	b16a      	cbz	r2, 20298 <nrfx_power_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2027c:	2200      	movs	r2, #0
   2027e:	601a      	str	r2, [r3, #0]
   20280:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   20282:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20286:	2201      	movs	r2, #1
   20288:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   2028c:	4b11      	ldr	r3, [pc, #68]	; (202d4 <nrfx_power_clock_irq_handler+0x60>)
   2028e:	7958      	ldrb	r0, [r3, #5]
   20290:	b910      	cbnz	r0, 20298 <nrfx_power_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
   20292:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   20294:	681b      	ldr	r3, [r3, #0]
   20296:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   20298:	4b0f      	ldr	r3, [pc, #60]	; (202d8 <nrfx_power_clock_irq_handler+0x64>)
   2029a:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   2029c:	b172      	cbz	r2, 202bc <nrfx_power_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2029e:	2200      	movs	r2, #0
   202a0:	601a      	str	r2, [r3, #0]
   202a2:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   202a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   202a8:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   202ac:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   202b0:	0792      	lsls	r2, r2, #30
   202b2:	d104      	bne.n	202be <nrfx_power_clock_irq_handler+0x4a>
    p_reg->LFCLKSRC = (uint32_t)(source);
   202b4:	2201      	movs	r2, #1
   202b6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   202ba:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   202bc:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   202be:	2202      	movs	r2, #2
   202c0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   202c4:	4b03      	ldr	r3, [pc, #12]	; (202d4 <nrfx_power_clock_irq_handler+0x60>)
}
   202c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   202ca:	681b      	ldr	r3, [r3, #0]
   202cc:	2001      	movs	r0, #1
   202ce:	4718      	bx	r3
   202d0:	40000100 	.word	0x40000100
   202d4:	20002364 	.word	0x20002364
   202d8:	40000104 	.word	0x40000104

000202dc <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   202dc:	2301      	movs	r3, #1
   202de:	fa03 f000 	lsl.w	r0, r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   202e2:	f010 0fff 	tst.w	r0, #255	; 0xff
   202e6:	d012      	beq.n	2030e <nrfx_gpiote_channel_free+0x32>
	__asm__ volatile(
   202e8:	f04f 0320 	mov.w	r3, #32
   202ec:	f3ef 8111 	mrs	r1, BASEPRI
   202f0:	f383 8811 	msr	BASEPRI, r3
   202f4:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   202f8:	4a06      	ldr	r2, [pc, #24]	; (20314 <nrfx_gpiote_channel_free+0x38>)
   202fa:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   202fc:	ea23 0000 	bic.w	r0, r3, r0
   20300:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
   20302:	f381 8811 	msr	BASEPRI, r1
   20306:	f3bf 8f6f 	isb	sy
   2030a:	4803      	ldr	r0, [pc, #12]	; (20318 <nrfx_gpiote_channel_free+0x3c>)
   2030c:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   2030e:	4803      	ldr	r0, [pc, #12]	; (2031c <nrfx_gpiote_channel_free+0x40>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   20310:	4770      	bx	lr
   20312:	bf00      	nop
   20314:	2000236c 	.word	0x2000236c
   20318:	0bad0000 	.word	0x0bad0000
   2031c:	0bad0004 	.word	0x0bad0004

00020320 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   20320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20324:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   20326:	f8df e060 	ldr.w	lr, [pc, #96]	; 20388 <nrfx_gpiote_channel_alloc+0x68>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   2032a:	4816      	ldr	r0, [pc, #88]	; (20384 <nrfx_gpiote_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   2032c:	f8df 805c 	ldr.w	r8, [pc, #92]	; 2038c <nrfx_gpiote_channel_alloc+0x6c>
{
   20330:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   20332:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
   20334:	2601      	movs	r6, #1
   20336:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   20338:	f04f 0120 	mov.w	r1, #32
   2033c:	f3ef 8c11 	mrs	ip, BASEPRI
   20340:	f381 8811 	msr	BASEPRI, r1
   20344:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   20348:	fa22 f103 	lsr.w	r1, r2, r3
   2034c:	07c9      	lsls	r1, r1, #31
   2034e:	d50a      	bpl.n	20366 <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
   20350:	f8de 105c 	ldr.w	r1, [lr, #92]	; 0x5c
   20354:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   20358:	4239      	tst	r1, r7
    m_cb.allocated_channels_mask |= (1UL << index);
   2035a:	bf01      	itttt	eq
   2035c:	4339      	orreq	r1, r7
   2035e:	f8ce 105c 	streq.w	r1, [lr, #92]	; 0x5c
            err_code = NRFX_SUCCESS;
   20362:	4640      	moveq	r0, r8
            *p_channel = ch_idx;
   20364:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
   20366:	f38c 8811 	msr	BASEPRI, ip
   2036a:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   2036e:	4540      	cmp	r0, r8
   20370:	d005      	beq.n	2037e <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   20372:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   20376:	439a      	bics	r2, r3
   20378:	f104 0401 	add.w	r4, r4, #1
   2037c:	d1db      	bne.n	20336 <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   2037e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20382:	bf00      	nop
   20384:	0bad0002 	.word	0x0bad0002
   20388:	2000236c 	.word	0x2000236c
   2038c:	0bad0000 	.word	0x0bad0000

00020390 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   20390:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   20392:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   20396:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   20398:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   2039a:	6002      	str	r2, [r0, #0]
}
   2039c:	4802      	ldr	r0, [pc, #8]	; (203a8 <nrf_gpio_pin_port_decode+0x18>)
   2039e:	bf18      	it	ne
   203a0:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   203a4:	4770      	bx	lr
   203a6:	bf00      	nop
   203a8:	50000300 	.word	0x50000300

000203ac <nrfx_spi_init>:

nrfx_err_t nrfx_spi_init(nrfx_spi_t const *        p_instance,
                         nrfx_spi_config_t const * p_config,
                         nrfx_spi_evt_handler_t    handler,
                         void *                    p_context)
{
   203ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    NRFX_ASSERT(p_config);
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   203b0:	7906      	ldrb	r6, [r0, #4]
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   203b2:	4c4c      	ldr	r4, [pc, #304]	; (204e4 <nrfx_spi_init+0x138>)
{
   203b4:	4680      	mov	r8, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   203b6:	2028      	movs	r0, #40	; 0x28
   203b8:	4370      	muls	r0, r6
   203ba:	1825      	adds	r5, r4, r0
   203bc:	7f2f      	ldrb	r7, [r5, #28]
   203be:	2f00      	cmp	r7, #0
   203c0:	f040 808e 	bne.w	204e0 <nrfx_spi_init+0x134>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
   203c4:	5022      	str	r2, [r4, r0]
    p_cb->p_context = p_context;
   203c6:	606b      	str	r3, [r5, #4]
    // Configure pins used by the peripheral:
    // - SCK - output with initial value corresponding with the SPI mode used:
    //   0 - for modes 0 and 1 (CPOL = 0), 1 - for modes 2 and 3 (CPOL = 1);
    //   according to the reference manual guidelines this pin and its input
    //   buffer must always be connected for the SPI to work.
    if (p_config->mode <= NRF_SPI_MODE_1)
   203c8:	7b0b      	ldrb	r3, [r1, #12]
   203ca:	7808      	ldrb	r0, [r1, #0]
   203cc:	2b01      	cmp	r3, #1
   203ce:	d878      	bhi.n	204c2 <nrfx_spi_init+0x116>
    {
        nrf_gpio_pin_clear(p_config->sck_pin);
   203d0:	f008 ff95 	bl	292fe <nrf_gpio_pin_clear>
    }
    else
    {
        nrf_gpio_pin_set(p_config->sck_pin);
    }
    nrf_gpio_cfg(p_config->sck_pin,
   203d4:	780b      	ldrb	r3, [r1, #0]
   203d6:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   203d8:	a801      	add	r0, sp, #4
   203da:	f7ff ffd9 	bl	20390 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   203de:	9b01      	ldr	r3, [sp, #4]
   203e0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   203e4:	2201      	movs	r2, #1
   203e6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                 NRF_GPIO_PIN_INPUT_CONNECT,
                 NRF_GPIO_PIN_NOPULL,
                 NRF_GPIO_PIN_S0S1,
                 NRF_GPIO_PIN_NOSENSE);
    // - MOSI (optional) - output with initial value 0,
    if (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
   203ea:	784d      	ldrb	r5, [r1, #1]
   203ec:	2dff      	cmp	r5, #255	; 0xff
   203ee:	d06b      	beq.n	204c8 <nrfx_spi_init+0x11c>
    {
        mosi_pin = p_config->mosi_pin;
        nrf_gpio_pin_clear(mosi_pin);
   203f0:	4628      	mov	r0, r5
   203f2:	f008 ff84 	bl	292fe <nrf_gpio_pin_clear>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   203f6:	a801      	add	r0, sp, #4
   203f8:	9501      	str	r5, [sp, #4]
   203fa:	f7ff ffc9 	bl	20390 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   203fe:	9b01      	ldr	r3, [sp, #4]
   20400:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   20404:	2203      	movs	r2, #3
   20406:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    else
    {
        mosi_pin = NRF_SPI_PIN_NOT_CONNECTED;
    }
    // - MISO (optional) - input,
    if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
   2040a:	788f      	ldrb	r7, [r1, #2]
   2040c:	2fff      	cmp	r7, #255	; 0xff
   2040e:	d05e      	beq.n	204ce <nrfx_spi_init+0x122>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20410:	a801      	add	r0, sp, #4
    {
        miso_pin = p_config->miso_pin;
        nrf_gpio_cfg_input(miso_pin, p_config->miso_pull);
   20412:	f891 900e 	ldrb.w	r9, [r1, #14]
    nrf_gpio_cfg(
   20416:	9701      	str	r7, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20418:	f7ff ffba 	bl	20390 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2041c:	9b01      	ldr	r3, [sp, #4]
   2041e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
                               | ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)
   20422:	ea4f 0289 	mov.w	r2, r9, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   20426:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    else
    {
        miso_pin = NRF_SPI_PIN_NOT_CONNECTED;
    }
    // - Slave Select (optional) - output with initial value 1 (inactive).
    if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
   2042a:	78c8      	ldrb	r0, [r1, #3]
   2042c:	28ff      	cmp	r0, #255	; 0xff
   2042e:	d00c      	beq.n	2044a <nrfx_spi_init+0x9e>
    {
        nrf_gpio_pin_set(p_config->ss_pin);
   20430:	f008 ff58 	bl	292e4 <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20434:	a801      	add	r0, sp, #4
        nrf_gpio_cfg_output(p_config->ss_pin);
   20436:	78cb      	ldrb	r3, [r1, #3]
   20438:	9301      	str	r3, [sp, #4]
   2043a:	f7ff ffa9 	bl	20390 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2043e:	9b01      	ldr	r3, [sp, #4]
   20440:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   20444:	2203      	movs	r2, #3
   20446:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    }
    m_cb[p_instance->drv_inst_idx].ss_pin = p_config->ss_pin;
   2044a:	f898 2004 	ldrb.w	r2, [r8, #4]
   2044e:	78c8      	ldrb	r0, [r1, #3]
   20450:	2328      	movs	r3, #40	; 0x28
   20452:	fb03 4302 	mla	r3, r3, r2, r4
   20456:	7798      	strb	r0, [r3, #30]

    NRF_SPI_Type * p_spi = p_instance->p_reg;
   20458:	f8d8 0000 	ldr.w	r0, [r8]
    nrf_spi_pins_set(p_spi, p_config->sck_pin, mosi_pin, miso_pin);
   2045c:	780b      	ldrb	r3, [r1, #0]
    p_reg->PSEL.SCK = sck_pin;
   2045e:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    p_reg->FREQUENCY = (uint32_t)frequency;
   20462:	688b      	ldr	r3, [r1, #8]
    p_reg->PSEL.MOSI = mosi_pin;
   20464:	f8c0 550c 	str.w	r5, [r0, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   20468:	f8c0 7510 	str.w	r7, [r0, #1296]	; 0x510
    p_reg->FREQUENCY = (uint32_t)frequency;
   2046c:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
   20470:	7b4b      	ldrb	r3, [r1, #13]
    nrf_spi_frequency_set(p_spi, p_config->frequency);
    nrf_spi_configure(p_spi, p_config->mode, p_config->bit_order);
   20472:	7b0d      	ldrb	r5, [r1, #12]
   20474:	3b00      	subs	r3, #0
   20476:	bf18      	it	ne
   20478:	2301      	movne	r3, #1
    switch (spi_mode)
   2047a:	2d02      	cmp	r5, #2
   2047c:	d02a      	beq.n	204d4 <nrfx_spi_init+0x128>
   2047e:	2d03      	cmp	r5, #3
   20480:	d02b      	beq.n	204da <nrfx_spi_init+0x12e>
   20482:	2d01      	cmp	r5, #1
   20484:	d101      	bne.n	2048a <nrfx_spi_init+0xde>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
   20486:	f043 0302 	orr.w	r3, r3, #2
    p_reg->CONFIG = config;
   2048a:	f8c0 3554 	str.w	r3, [r0, #1364]	; 0x554

    m_cb[p_instance->drv_inst_idx].orc = p_config->orc;
   2048e:	2328      	movs	r3, #40	; 0x28
   20490:	fb03 4202 	mla	r2, r3, r2, r4

    nrf_spi_enable(p_spi);

    if (p_cb->handler)
   20494:	4373      	muls	r3, r6
    m_cb[p_instance->drv_inst_idx].orc = p_config->orc;
   20496:	7949      	ldrb	r1, [r1, #5]
    if (p_cb->handler)
   20498:	58e3      	ldr	r3, [r4, r3]
    m_cb[p_instance->drv_inst_idx].orc = p_config->orc;
   2049a:	77d1      	strb	r1, [r2, #31]
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   2049c:	2201      	movs	r2, #1
   2049e:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
    if (p_cb->handler)
   204a2:	b11b      	cbz	r3, 204ac <nrfx_spi_init+0x100>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   204a4:	f340 3007 	sbfx	r0, r0, #12, #8
   204a8:	f7e5 fd9e 	bl	5fe8 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
   204ac:	2328      	movs	r3, #40	; 0x28
   204ae:	fb03 4406 	mla	r4, r3, r6, r4
   204b2:	2300      	movs	r3, #0
   204b4:	7763      	strb	r3, [r4, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   204b6:	480c      	ldr	r0, [pc, #48]	; (204e8 <nrfx_spi_init+0x13c>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   204b8:	2301      	movs	r3, #1
   204ba:	7723      	strb	r3, [r4, #28]
}
   204bc:	b003      	add	sp, #12
   204be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        nrf_gpio_pin_set(p_config->sck_pin);
   204c2:	f008 ff0f 	bl	292e4 <nrf_gpio_pin_set>
   204c6:	e785      	b.n	203d4 <nrfx_spi_init+0x28>
        mosi_pin = NRF_SPI_PIN_NOT_CONNECTED;
   204c8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   204cc:	e79d      	b.n	2040a <nrfx_spi_init+0x5e>
        miso_pin = NRF_SPI_PIN_NOT_CONNECTED;
   204ce:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   204d2:	e7aa      	b.n	2042a <nrfx_spi_init+0x7e>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   204d4:	f043 0304 	orr.w	r3, r3, #4
        break;
   204d8:	e7d7      	b.n	2048a <nrfx_spi_init+0xde>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   204da:	f043 0306 	orr.w	r3, r3, #6
        break;
   204de:	e7d4      	b.n	2048a <nrfx_spi_init+0xde>
        return err_code;
   204e0:	4802      	ldr	r0, [pc, #8]	; (204ec <nrfx_spi_init+0x140>)
   204e2:	e7eb      	b.n	204bc <nrfx_spi_init+0x110>
   204e4:	200023cc 	.word	0x200023cc
   204e8:	0bad0000 	.word	0x0bad0000
   204ec:	0bad0005 	.word	0x0bad0005

000204f0 <nrfx_spi_xfer>:
}

nrfx_err_t nrfx_spi_xfer(nrfx_spi_t const *           p_instance,
                         nrfx_spi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
   204f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   204f4:	7904      	ldrb	r4, [r0, #4]
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   204f6:	4d39      	ldr	r5, [pc, #228]	; (205dc <nrfx_spi_xfer+0xec>)
   204f8:	2328      	movs	r3, #40	; 0x28
   204fa:	4363      	muls	r3, r4
{
   204fc:	4690      	mov	r8, r2
    if (p_cb->transfer_in_progress)
   204fe:	18ea      	adds	r2, r5, r3
{
   20500:	460f      	mov	r7, r1
    if (p_cb->transfer_in_progress)
   20502:	7f51      	ldrb	r1, [r2, #29]
{
   20504:	4681      	mov	r9, r0
    if (p_cb->transfer_in_progress)
   20506:	2900      	cmp	r1, #0
   20508:	d165      	bne.n	205d6 <nrfx_spi_xfer+0xe6>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler)
   2050a:	58eb      	ldr	r3, [r5, r3]
   2050c:	b10b      	cbz	r3, 20512 <nrfx_spi_xfer+0x22>
        {
            p_cb->transfer_in_progress = true;
   2050e:	2301      	movs	r3, #1
   20510:	7753      	strb	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   20512:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   20516:	2628      	movs	r6, #40	; 0x28
   20518:	fb06 5604 	mla	r6, r6, r4, r5
   2051c:	f106 0c0c 	add.w	ip, r6, #12
   20520:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    p_cb->abort = false;

    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   20524:	7fb0      	ldrb	r0, [r6, #30]
    p_cb->abort = false;
   20526:	2300      	movs	r3, #0
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   20528:	28ff      	cmp	r0, #255	; 0xff
    p_cb->abort = false;
   2052a:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   2052e:	d001      	beq.n	20534 <nrfx_spi_xfer+0x44>
    {
        nrf_gpio_pin_clear(p_cb->ss_pin);
   20530:	f008 fee5 	bl	292fe <nrf_gpio_pin_clear>
    }
    if (flags)
   20534:	2328      	movs	r3, #40	; 0x28
   20536:	f1b8 0f00 	cmp.w	r8, #0
   2053a:	d006      	beq.n	2054a <nrfx_spi_xfer+0x5a>
    {
        p_cb->transfer_in_progress = false;
   2053c:	fb03 5404 	mla	r4, r3, r4, r5
        err_code = NRFX_ERROR_NOT_SUPPORTED;
   20540:	4827      	ldr	r0, [pc, #156]	; (205e0 <nrfx_spi_xfer+0xf0>)
        p_cb->transfer_in_progress = false;
   20542:	2300      	movs	r3, #0
   20544:	7763      	strb	r3, [r4, #29]
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   20546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        spi_xfer(p_instance->p_reg, p_cb, p_xfer_desc);
   2054a:	f8d9 6000 	ldr.w	r6, [r9]
    p_cb->bytes_transferred = 0;
   2054e:	fb03 5304 	mla	r3, r3, r4, r5
    p_reg->INTENCLR = mask;
   20552:	2204      	movs	r2, #4
   20554:	f8c6 2308 	str.w	r2, [r6, #776]	; 0x308
   20558:	f8c3 8020 	str.w	r8, [r3, #32]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2055c:	f8c6 8108 	str.w	r8, [r6, #264]	; 0x108
   20560:	f8d6 2108 	ldr.w	r2, [r6, #264]	; 0x108
        (p_xfer_desc->tx_length > 0 ? p_xfer_desc->p_tx_buffer[0] : p_cb->orc));
   20564:	687a      	ldr	r2, [r7, #4]
    nrf_spi_txd_set(p_spi,
   20566:	b192      	cbz	r2, 2058e <nrfx_spi_xfer+0x9e>
   20568:	683b      	ldr	r3, [r7, #0]
   2056a:	781b      	ldrb	r3, [r3, #0]
    p_reg->TXD = data;
   2056c:	f8c6 351c 	str.w	r3, [r6, #1308]	; 0x51c
    if (p_xfer_desc->tx_length > 1)
   20570:	2a01      	cmp	r2, #1
   20572:	d90e      	bls.n	20592 <nrfx_spi_xfer+0xa2>
        nrf_spi_txd_set(p_spi, p_xfer_desc->p_tx_buffer[1]);
   20574:	683b      	ldr	r3, [r7, #0]
   20576:	785b      	ldrb	r3, [r3, #1]
   20578:	f8c6 351c 	str.w	r3, [r6, #1308]	; 0x51c
    if (p_cb->handler)
   2057c:	2328      	movs	r3, #40	; 0x28
   2057e:	4363      	muls	r3, r4
   20580:	58ef      	ldr	r7, [r5, r3]
   20582:	b177      	cbz	r7, 205a2 <nrfx_spi_xfer+0xb2>
    p_reg->INTENSET = mask;
   20584:	2304      	movs	r3, #4
   20586:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
    nrfx_err_t err_code = NRFX_SUCCESS;
   2058a:	4816      	ldr	r0, [pc, #88]	; (205e4 <nrfx_spi_xfer+0xf4>)
   2058c:	e7db      	b.n	20546 <nrfx_spi_xfer+0x56>
    nrf_spi_txd_set(p_spi,
   2058e:	7fdb      	ldrb	r3, [r3, #31]
   20590:	e7ec      	b.n	2056c <nrfx_spi_xfer+0x7c>
    else if (p_xfer_desc->rx_length > 1)
   20592:	68fb      	ldr	r3, [r7, #12]
   20594:	2b01      	cmp	r3, #1
   20596:	d9f1      	bls.n	2057c <nrfx_spi_xfer+0x8c>
        nrf_spi_txd_set(p_spi, p_cb->orc);
   20598:	2328      	movs	r3, #40	; 0x28
   2059a:	fb03 5304 	mla	r3, r3, r4, r5
    p_reg->TXD = data;
   2059e:	7fdb      	ldrb	r3, [r3, #31]
   205a0:	e7ea      	b.n	20578 <nrfx_spi_xfer+0x88>
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   205a2:	eb04 0184 	add.w	r1, r4, r4, lsl #2
   205a6:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   205aa:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
            while (!nrf_spi_event_check(p_spi, NRF_SPI_EVENT_READY)) {}
   205ae:	2b00      	cmp	r3, #0
   205b0:	d0fb      	beq.n	205aa <nrfx_spi_xfer+0xba>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   205b2:	f8c6 7108 	str.w	r7, [r6, #264]	; 0x108
        } while (transfer_byte(p_spi, p_cb));
   205b6:	4630      	mov	r0, r6
   205b8:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
   205bc:	f008 feac 	bl	29318 <transfer_byte>
   205c0:	2800      	cmp	r0, #0
   205c2:	d1f2      	bne.n	205aa <nrfx_spi_xfer+0xba>
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   205c4:	2328      	movs	r3, #40	; 0x28
   205c6:	fb03 5404 	mla	r4, r3, r4, r5
   205ca:	7fa0      	ldrb	r0, [r4, #30]
   205cc:	28ff      	cmp	r0, #255	; 0xff
   205ce:	d0dc      	beq.n	2058a <nrfx_spi_xfer+0x9a>
            nrf_gpio_pin_set(p_cb->ss_pin);
   205d0:	f008 fe88 	bl	292e4 <nrf_gpio_pin_set>
   205d4:	e7d9      	b.n	2058a <nrfx_spi_xfer+0x9a>
        return err_code;
   205d6:	4804      	ldr	r0, [pc, #16]	; (205e8 <nrfx_spi_xfer+0xf8>)
   205d8:	e7b5      	b.n	20546 <nrfx_spi_xfer+0x56>
   205da:	bf00      	nop
   205dc:	200023cc 	.word	0x200023cc
   205e0:	0bad0003 	.word	0x0bad0003
   205e4:	0bad0000 	.word	0x0bad0000
   205e8:	0bad000b 	.word	0x0bad000b

000205ec <nrfx_spi_1_irq_handler>:
   205ec:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
   205f0:	2300      	movs	r3, #0
}
#endif

#if NRFX_CHECK(NRFX_SPI1_ENABLED)
void nrfx_spi_1_irq_handler(void)
{
   205f2:	b510      	push	{r4, lr}
    if (!transfer_byte(p_spi, p_cb))
   205f4:	490b      	ldr	r1, [pc, #44]	; (20624 <nrfx_spi_1_irq_handler+0x38>)
   205f6:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   205fa:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   205fe:	f008 fe8b 	bl	29318 <transfer_byte>
   20602:	b968      	cbnz	r0, 20620 <nrfx_spi_1_irq_handler+0x34>
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   20604:	7f88      	ldrb	r0, [r1, #30]
   20606:	28ff      	cmp	r0, #255	; 0xff
   20608:	d001      	beq.n	2060e <nrfx_spi_1_irq_handler+0x22>
        nrf_gpio_pin_set(p_cb->ss_pin);
   2060a:	f008 fe6b 	bl	292e4 <nrf_gpio_pin_set>
    p_cb->transfer_in_progress = false;
   2060e:	2300      	movs	r3, #0
    p_cb->evt.type = NRFX_SPI_EVENT_DONE;
   20610:	720b      	strb	r3, [r1, #8]
    p_cb->transfer_in_progress = false;
   20612:	774b      	strb	r3, [r1, #29]
    irq_handler(NRF_SPI1, &m_cb[NRFX_SPI1_INST_IDX]);
}
   20614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   20618:	e9d1 3100 	ldrd	r3, r1, [r1]
   2061c:	4802      	ldr	r0, [pc, #8]	; (20628 <nrfx_spi_1_irq_handler+0x3c>)
   2061e:	4718      	bx	r3
}
   20620:	bd10      	pop	{r4, pc}
   20622:	bf00      	nop
   20624:	200023cc 	.word	0x200023cc
   20628:	200023d4 	.word	0x200023d4

0002062c <z_device_state_init>:
 *
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
   2062c:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev = __device_start;
   2062e:	4c05      	ldr	r4, [pc, #20]	; (20644 <z_device_state_init+0x18>)

	while (dev < __device_end) {
   20630:	4d05      	ldr	r5, [pc, #20]	; (20648 <z_device_state_init+0x1c>)
   20632:	42ac      	cmp	r4, r5
   20634:	d300      	bcc.n	20638 <z_device_state_init+0xc>
		device_pm_state_init(dev);
		z_object_init(dev);
		++dev;
	}
}
   20636:	bd38      	pop	{r3, r4, r5, pc}
		z_object_init(dev);
   20638:	4620      	mov	r0, r4
   2063a:	f009 fe94 	bl	2a366 <z_object_init>
		++dev;
   2063e:	3418      	adds	r4, #24
   20640:	e7f7      	b.n	20632 <z_device_state_init+0x6>
   20642:	bf00      	nop
   20644:	20007d00 	.word	0x20007d00
   20648:	20007dc0 	.word	0x20007dc0

0002064c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   2064c:	4b0e      	ldr	r3, [pc, #56]	; (20688 <z_sys_init_run_level+0x3c>)
{
   2064e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   20650:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   20654:	3001      	adds	r0, #1
   20656:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   2065a:	42a6      	cmp	r6, r4
   2065c:	d800      	bhi.n	20660 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   2065e:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   20660:	e9d4 3500 	ldrd	r3, r5, [r4]
   20664:	4628      	mov	r0, r5
   20666:	4798      	blx	r3
		if (dev != NULL) {
   20668:	b165      	cbz	r5, 20684 <z_sys_init_run_level+0x38>
			if (rc != 0) {
   2066a:	68eb      	ldr	r3, [r5, #12]
   2066c:	b130      	cbz	r0, 2067c <z_sys_init_run_level+0x30>
				if (rc < 0) {
   2066e:	2800      	cmp	r0, #0
   20670:	bfb8      	it	lt
   20672:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   20674:	28ff      	cmp	r0, #255	; 0xff
   20676:	bfa8      	it	ge
   20678:	20ff      	movge	r0, #255	; 0xff
   2067a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   2067c:	785a      	ldrb	r2, [r3, #1]
   2067e:	f042 0201 	orr.w	r2, r2, #1
   20682:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   20684:	3408      	adds	r4, #8
   20686:	e7e8      	b.n	2065a <z_sys_init_run_level+0xe>
   20688:	0002c0ec 	.word	0x0002c0ec

0002068c <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   2068c:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   2068e:	4605      	mov	r5, r0
   20690:	b910      	cbnz	r0, 20698 <z_impl_device_get_binding+0xc>
		return NULL;
   20692:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   20694:	4620      	mov	r0, r4
   20696:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   20698:	7803      	ldrb	r3, [r0, #0]
   2069a:	2b00      	cmp	r3, #0
   2069c:	d0f9      	beq.n	20692 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   2069e:	4a0f      	ldr	r2, [pc, #60]	; (206dc <z_impl_device_get_binding+0x50>)
   206a0:	4c0f      	ldr	r4, [pc, #60]	; (206e0 <z_impl_device_get_binding+0x54>)
   206a2:	4616      	mov	r6, r2
   206a4:	4294      	cmp	r4, r2
   206a6:	d108      	bne.n	206ba <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
   206a8:	4c0d      	ldr	r4, [pc, #52]	; (206e0 <z_impl_device_get_binding+0x54>)
   206aa:	42b4      	cmp	r4, r6
   206ac:	d0f1      	beq.n	20692 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   206ae:	4620      	mov	r0, r4
   206b0:	f008 fe65 	bl	2937e <z_device_ready>
   206b4:	b950      	cbnz	r0, 206cc <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   206b6:	3418      	adds	r4, #24
   206b8:	e7f7      	b.n	206aa <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
   206ba:	4620      	mov	r0, r4
   206bc:	f008 fe5f 	bl	2937e <z_device_ready>
   206c0:	b110      	cbz	r0, 206c8 <z_impl_device_get_binding+0x3c>
   206c2:	6823      	ldr	r3, [r4, #0]
   206c4:	42ab      	cmp	r3, r5
   206c6:	d0e5      	beq.n	20694 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   206c8:	3418      	adds	r4, #24
   206ca:	e7eb      	b.n	206a4 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   206cc:	6821      	ldr	r1, [r4, #0]
   206ce:	4628      	mov	r0, r5
   206d0:	f7e0 fbb0 	bl	e34 <strcmp>
   206d4:	2800      	cmp	r0, #0
   206d6:	d1ee      	bne.n	206b6 <z_impl_device_get_binding+0x2a>
   206d8:	e7dc      	b.n	20694 <z_impl_device_get_binding+0x8>
   206da:	bf00      	nop
   206dc:	20007dc0 	.word	0x20007dc0
   206e0:	20007d00 	.word	0x20007d00

000206e4 <z_mrsh_device_get_binding>:
#include <syscalls/device.h>

extern const struct device * z_vrfy_device_get_binding(const char * name);
uintptr_t z_mrsh_device_get_binding(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   206e4:	b510      	push	{r4, lr}
	_current->syscall_frame = ssf;
   206e6:	4c0b      	ldr	r4, [pc, #44]	; (20714 <z_mrsh_device_get_binding+0x30>)
{
   206e8:	b08c      	sub	sp, #48	; 0x30
	_current->syscall_frame = ssf;
   206ea:	68a3      	ldr	r3, [r4, #8]
   206ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
   206ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
{
   206f2:	4601      	mov	r1, r0
#ifdef CONFIG_USERSPACE
static inline const struct device *z_vrfy_device_get_binding(const char *name)
{
	char name_copy[Z_DEVICE_MAX_NAME_LEN];

	if (z_user_string_copy(name_copy, (char *)name, sizeof(name_copy))
   206f4:	2230      	movs	r2, #48	; 0x30
   206f6:	4668      	mov	r0, sp
   206f8:	f003 fd7a 	bl	241f0 <z_user_string_copy>
   206fc:	b940      	cbnz	r0, 20710 <z_mrsh_device_get_binding+0x2c>
	    != 0) {
		return 0;
	}

	return z_impl_device_get_binding(name_copy);
   206fe:	4668      	mov	r0, sp
   20700:	f7ff ffc4 	bl	2068c <z_impl_device_get_binding>
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	const struct device * ret = z_vrfy_device_get_binding(*(const char **)&arg0)
;
	_current->syscall_frame = NULL;
   20704:	68a3      	ldr	r3, [r4, #8]
   20706:	2200      	movs	r2, #0
   20708:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	return (uintptr_t) ret;
}
   2070c:	b00c      	add	sp, #48	; 0x30
   2070e:	bd10      	pop	{r4, pc}
		return 0;
   20710:	2000      	movs	r0, #0
   20712:	e7f7      	b.n	20704 <z_mrsh_device_get_binding+0x20>
   20714:	200023f4 	.word	0x200023f4

00020718 <z_mrsh_device_usable_check>:
#include <syscalls/device.h>

extern int z_vrfy_device_usable_check(const struct device * dev);
uintptr_t z_mrsh_device_usable_check(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   20718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	_current->syscall_frame = ssf;
   2071a:	4e21      	ldr	r6, [pc, #132]	; (207a0 <z_mrsh_device_usable_check+0x88>)
   2071c:	9a08      	ldr	r2, [sp, #32]
   2071e:	68b3      	ldr	r3, [r6, #8]
   20720:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
{
   20724:	4604      	mov	r4, r0
}
#include <syscalls/device_get_binding_mrsh.c>

static inline int z_vrfy_device_usable_check(const struct device *dev)
{
	Z_OOPS(Z_SYSCALL_OBJ_INIT(dev, K_OBJ_ANY));
   20726:	f7df fceb 	bl	100 <z_object_find>
	ret = z_object_validate(ko, otype, init);
   2072a:	2201      	movs	r2, #1
   2072c:	2100      	movs	r1, #0
   2072e:	4607      	mov	r7, r0
   20730:	f003 fce4 	bl	240fc <z_object_validate>
	if (ret != 0) {
   20734:	4635      	mov	r5, r6
	ret = z_object_validate(ko, otype, init);
   20736:	4602      	mov	r2, r0
	if (ret != 0) {
   20738:	b320      	cbz	r0, 20784 <z_mrsh_device_usable_check+0x6c>
		z_dump_object_error(ret, obj, ko, otype);
   2073a:	2300      	movs	r3, #0
   2073c:	463a      	mov	r2, r7
   2073e:	4621      	mov	r1, r4
   20740:	f003 fbe4 	bl	23f0c <z_dump_object_error>
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   20744:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   20748:	b9a3      	cbnz	r3, 20774 <z_mrsh_device_usable_check+0x5c>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   2074a:	f3ef 8314 	mrs	r3, CONTROL
	return (value & CONTROL_nPRIV_Msk) ? true : false;
   2074e:	f003 0301 	and.w	r3, r3, #1
   20752:	4814      	ldr	r0, [pc, #80]	; (207a4 <z_mrsh_device_usable_check+0x8c>)
   20754:	4a14      	ldr	r2, [pc, #80]	; (207a8 <z_mrsh_device_usable_check+0x90>)
   20756:	1a80      	subs	r0, r0, r2
   20758:	08c0      	lsrs	r0, r0, #3
   2075a:	0180      	lsls	r0, r0, #6
   2075c:	f040 0001 	orr.w	r0, r0, #1
   20760:	b153      	cbz	r3, 20778 <z_mrsh_device_usable_check+0x60>
   20762:	4a12      	ldr	r2, [pc, #72]	; (207ac <z_mrsh_device_usable_check+0x94>)
   20764:	4912      	ldr	r1, [pc, #72]	; (207b0 <z_mrsh_device_usable_check+0x98>)
   20766:	f004 fb96 	bl	24e96 <log_from_user>
   2076a:	68ab      	ldr	r3, [r5, #8]
   2076c:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   20770:	f006 f974 	bl	26a5c <arch_syscall_oops>
		return false;
   20774:	2300      	movs	r3, #0
   20776:	e7ec      	b.n	20752 <z_mrsh_device_usable_check+0x3a>
   20778:	4602      	mov	r2, r0
   2077a:	490c      	ldr	r1, [pc, #48]	; (207ac <z_mrsh_device_usable_check+0x94>)
   2077c:	480c      	ldr	r0, [pc, #48]	; (207b0 <z_mrsh_device_usable_check+0x98>)
   2077e:	f004 fbbd 	bl	24efc <log_1>
   20782:	e7f2      	b.n	2076a <z_mrsh_device_usable_check+0x52>
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
   20784:	4620      	mov	r0, r4
   20786:	f008 fdfa 	bl	2937e <z_device_ready>
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	int ret = z_vrfy_device_usable_check(*(const struct device **)&arg0)
;
	_current->syscall_frame = NULL;
   2078a:	68b3      	ldr	r3, [r6, #8]
   2078c:	2800      	cmp	r0, #0
   2078e:	f04f 0100 	mov.w	r1, #0
   20792:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	return (uintptr_t) ret;
}
   20796:	bf14      	ite	ne
   20798:	4610      	movne	r0, r2
   2079a:	f06f 0012 	mvneq.w	r0, #18
   2079e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   207a0:	200023f4 	.word	0x200023f4
   207a4:	0002a810 	.word	0x0002a810
   207a8:	0002a6d0 	.word	0x0002a6d0
   207ac:	0002ed8a 	.word	0x0002ed8a
   207b0:	0002e72d 	.word	0x0002e72d

000207b4 <z_mrsh_z_errno>:

extern int * z_vrfy_z_errno();
uintptr_t z_mrsh_z_errno(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
	_current->syscall_frame = ssf;
   207b4:	4b03      	ldr	r3, [pc, #12]	; (207c4 <z_mrsh_z_errno+0x10>)
   207b6:	689b      	ldr	r3, [r3, #8]
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	int * ret = z_vrfy_z_errno()
;
	_current->syscall_frame = NULL;
   207b8:	2200      	movs	r2, #0
	return (uintptr_t) ret;
}
   207ba:	6e58      	ldr	r0, [r3, #100]	; 0x64
	_current->syscall_frame = NULL;
   207bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
   207c0:	4770      	bx	lr
   207c2:	bf00      	nop
   207c4:	200023f4 	.word	0x200023f4

000207c8 <thread_name_get>:
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
}
/* LCOV_EXCL_STOP */

static const char *thread_name_get(struct k_thread *thread)
{
   207c8:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   207ca:	b120      	cbz	r0, 207d6 <thread_name_get+0xe>
   207cc:	f009 f97a 	bl	29ac4 <k_thread_name_get>

	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   207d0:	b108      	cbz	r0, 207d6 <thread_name_get+0xe>
   207d2:	7803      	ldrb	r3, [r0, #0]
   207d4:	b903      	cbnz	r3, 207d8 <thread_name_get+0x10>
		thread_name = "unknown";
   207d6:	4801      	ldr	r0, [pc, #4]	; (207dc <thread_name_get+0x14>)
	}

	return thread_name;
}
   207d8:	bd08      	pop	{r3, pc}
   207da:	bf00      	nop
   207dc:	0002d398 	.word	0x0002d398

000207e0 <k_sys_fatal_error_handler>:
{
   207e0:	b510      	push	{r4, lr}
   207e2:	4604      	mov	r4, r0
	z_impl_log_panic();
   207e4:	f7e3 fe3e 	bl	4464 <z_impl_log_panic>
   207e8:	f008 fdd2 	bl	29390 <arch_is_user_context>
   207ec:	4b09      	ldr	r3, [pc, #36]	; (20814 <k_sys_fatal_error_handler+0x34>)
   207ee:	4a0a      	ldr	r2, [pc, #40]	; (20818 <k_sys_fatal_error_handler+0x38>)
   207f0:	1a9b      	subs	r3, r3, r2
   207f2:	08db      	lsrs	r3, r3, #3
	LOG_ERR("Halting system");
   207f4:	019b      	lsls	r3, r3, #6
   207f6:	f043 0301 	orr.w	r3, r3, #1
   207fa:	b130      	cbz	r0, 2080a <k_sys_fatal_error_handler+0x2a>
   207fc:	4907      	ldr	r1, [pc, #28]	; (2081c <k_sys_fatal_error_handler+0x3c>)
   207fe:	4618      	mov	r0, r3
   20800:	f004 fb49 	bl	24e96 <log_from_user>
	arch_system_halt(reason);
   20804:	4620      	mov	r0, r4
   20806:	f008 fdcd 	bl	293a4 <arch_system_halt>
	LOG_ERR("Halting system");
   2080a:	4804      	ldr	r0, [pc, #16]	; (2081c <k_sys_fatal_error_handler+0x3c>)
   2080c:	4619      	mov	r1, r3
   2080e:	f004 fb68 	bl	24ee2 <log_0>
   20812:	e7f7      	b.n	20804 <k_sys_fatal_error_handler+0x24>
   20814:	0002a810 	.word	0x0002a810
   20818:	0002a6d0 	.word	0x0002a6d0
   2081c:	0002eda5 	.word	0x0002eda5

00020820 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   20820:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   20824:	4605      	mov	r5, r0
   20826:	460f      	mov	r7, r1
	__asm__ volatile(
   20828:	f04f 0320 	mov.w	r3, #32
   2082c:	f3ef 8811 	mrs	r8, BASEPRI
   20830:	f383 8811 	msr	BASEPRI, r3
   20834:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   20838:	f001 fa66 	bl	21d08 <z_impl_k_current_get>
   2083c:	4c31      	ldr	r4, [pc, #196]	; (20904 <z_fatal_error+0xe4>)
   2083e:	4606      	mov	r6, r0
   20840:	f008 fda6 	bl	29390 <arch_is_user_context>
   20844:	4b30      	ldr	r3, [pc, #192]	; (20908 <z_fatal_error+0xe8>)
   20846:	1ae4      	subs	r4, r4, r3
   20848:	08e4      	lsrs	r4, r4, #3
	struct k_thread *thread = k_current_get();

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   2084a:	01a4      	lsls	r4, r4, #6
   2084c:	f044 0c01 	orr.w	ip, r4, #1
   20850:	2800      	cmp	r0, #0
   20852:	d038      	beq.n	208c6 <z_fatal_error+0xa6>
	switch (reason) {
   20854:	2d04      	cmp	r5, #4
   20856:	bf96      	itet	ls
   20858:	4b2c      	ldrls	r3, [pc, #176]	; (2090c <z_fatal_error+0xec>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   2085a:	4b2d      	ldrhi	r3, [pc, #180]	; (20910 <z_fatal_error+0xf0>)
	return 0;
   2085c:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   20860:	492c      	ldr	r1, [pc, #176]	; (20914 <z_fatal_error+0xf4>)
   20862:	2200      	movs	r2, #0
   20864:	9200      	str	r2, [sp, #0]
   20866:	4660      	mov	r0, ip
   20868:	462a      	mov	r2, r5
   2086a:	f004 fb14 	bl	24e96 <log_from_user>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   2086e:	b167      	cbz	r7, 2088a <z_fatal_error+0x6a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   20870:	69fb      	ldr	r3, [r7, #28]
   20872:	f3c3 0308 	ubfx	r3, r3, #0, #9
   20876:	b143      	cbz	r3, 2088a <z_fatal_error+0x6a>
   20878:	f008 fd8a 	bl	29390 <arch_is_user_context>
		LOG_ERR("Fault during interrupt handling\n");
   2087c:	f044 0301 	orr.w	r3, r4, #1
   20880:	b378      	cbz	r0, 208e2 <z_fatal_error+0xc2>
   20882:	4925      	ldr	r1, [pc, #148]	; (20918 <z_fatal_error+0xf8>)
   20884:	4618      	mov	r0, r3
   20886:	f004 fb06 	bl	24e96 <log_from_user>
   2088a:	f008 fd81 	bl	29390 <arch_is_user_context>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   2088e:	f044 0401 	orr.w	r4, r4, #1
   20892:	b358      	cbz	r0, 208ec <z_fatal_error+0xcc>
   20894:	4630      	mov	r0, r6
   20896:	f7ff ff97 	bl	207c8 <thread_name_get>
   2089a:	f7e3 fc73 	bl	4184 <log_strdup>
   2089e:	491f      	ldr	r1, [pc, #124]	; (2091c <z_fatal_error+0xfc>)
   208a0:	4603      	mov	r3, r0
   208a2:	4632      	mov	r2, r6
   208a4:	4620      	mov	r0, r4
   208a6:	f004 faf6 	bl	24e96 <log_from_user>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   208aa:	4639      	mov	r1, r7
   208ac:	4628      	mov	r0, r5
   208ae:	f7ff ff97 	bl	207e0 <k_sys_fatal_error_handler>
	__asm__ volatile(
   208b2:	f388 8811 	msr	BASEPRI, r8
   208b6:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   208ba:	4630      	mov	r0, r6
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   208bc:	b002      	add	sp, #8
   208be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   208c2:	f7e6 b981 	b.w	6bc8 <z_impl_k_thread_abort>
	switch (reason) {
   208c6:	2d04      	cmp	r5, #4
   208c8:	bf96      	itet	ls
   208ca:	4b10      	ldrls	r3, [pc, #64]	; (2090c <z_fatal_error+0xec>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   208cc:	4a10      	ldrhi	r2, [pc, #64]	; (20910 <z_fatal_error+0xf0>)
	return 0;
   208ce:	f853 2025 	ldrls.w	r2, [r3, r5, lsl #2]
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   208d2:	4810      	ldr	r0, [pc, #64]	; (20914 <z_fatal_error+0xf4>)
   208d4:	f8ad c000 	strh.w	ip, [sp]
   208d8:	2300      	movs	r3, #0
   208da:	4629      	mov	r1, r5
   208dc:	f004 fb3b 	bl	24f56 <log_3>
   208e0:	e7c5      	b.n	2086e <z_fatal_error+0x4e>
		LOG_ERR("Fault during interrupt handling\n");
   208e2:	480d      	ldr	r0, [pc, #52]	; (20918 <z_fatal_error+0xf8>)
   208e4:	4619      	mov	r1, r3
   208e6:	f004 fafc 	bl	24ee2 <log_0>
   208ea:	e7ce      	b.n	2088a <z_fatal_error+0x6a>
	LOG_ERR("Current thread: %p (%s)", thread,
   208ec:	4630      	mov	r0, r6
   208ee:	f7ff ff6b 	bl	207c8 <thread_name_get>
   208f2:	f7e3 fc47 	bl	4184 <log_strdup>
   208f6:	4623      	mov	r3, r4
   208f8:	4602      	mov	r2, r0
   208fa:	4631      	mov	r1, r6
   208fc:	4807      	ldr	r0, [pc, #28]	; (2091c <z_fatal_error+0xfc>)
   208fe:	f004 fb11 	bl	24f24 <log_2>
   20902:	e7d2      	b.n	208aa <z_fatal_error+0x8a>
   20904:	0002a810 	.word	0x0002a810
   20908:	0002a6d0 	.word	0x0002a6d0
   2090c:	0002c104 	.word	0x0002c104
   20910:	0002edb4 	.word	0x0002edb4
   20914:	0002edc2 	.word	0x0002edc2
   20918:	0002edea 	.word	0x0002edea
   2091c:	0002ee0b 	.word	0x0002ee0b

00020920 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   20920:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   20922:	4c09      	ldr	r4, [pc, #36]	; (20948 <idle+0x28>)
	__asm__ volatile(
   20924:	f04f 0220 	mov.w	r2, #32
   20928:	f3ef 8311 	mrs	r3, BASEPRI
   2092c:	f382 8811 	msr	BASEPRI, r2
   20930:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   20934:	f009 f9d8 	bl	29ce8 <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
   20938:	6220      	str	r0, [r4, #32]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
   2093a:	f7e4 fcfd 	bl	5338 <pm_system_suspend>
   2093e:	2800      	cmp	r0, #0
   20940:	d1f0      	bne.n	20924 <idle+0x4>
	arch_cpu_idle();
   20942:	f7e5 fc31 	bl	61a8 <arch_cpu_idle>
}
   20946:	e7ed      	b.n	20924 <idle+0x4>
   20948:	200023f4 	.word	0x200023f4

0002094c <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   2094c:	4802      	ldr	r0, [pc, #8]	; (20958 <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
   2094e:	4a03      	ldr	r2, [pc, #12]	; (2095c <z_bss_zero+0x10>)
   20950:	2100      	movs	r1, #0
   20952:	1a12      	subs	r2, r2, r0
   20954:	f009 bd52 	b.w	2a3fc <memset>
   20958:	20000020 	.word	0x20000020
   2095c:	20002bb4 	.word	0x20002bb4

00020960 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   20960:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   20962:	4b0a      	ldr	r3, [pc, #40]	; (2098c <bg_thread_main+0x2c>)
   20964:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   20966:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   20968:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   2096a:	f7ff fe6f 	bl	2064c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   2096e:	f002 f9a1 	bl	22cb4 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   20972:	2003      	movs	r0, #3
   20974:	f7ff fe6a 	bl	2064c <z_sys_init_run_level>

	z_init_static_threads();
   20978:	f001 fefe 	bl	22778 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   2097c:	f7e2 fbd6 	bl	312c <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   20980:	4a03      	ldr	r2, [pc, #12]	; (20990 <bg_thread_main+0x30>)
   20982:	7b13      	ldrb	r3, [r2, #12]
   20984:	f023 0301 	bic.w	r3, r3, #1
   20988:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   2098a:	bd08      	pop	{r3, pc}
   2098c:	20002bb2 	.word	0x20002bb2
   20990:	20000a20 	.word	0x20000a20

00020994 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   20994:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   20998:	b0af      	sub	sp, #188	; 0xbc
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   2099a:	f7e3 fb41 	bl	4020 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   2099e:	f8df 9100 	ldr.w	r9, [pc, #256]	; 20aa0 <z_cstart+0x10c>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   209a2:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   209a6:	4d35      	ldr	r5, [pc, #212]	; (20a7c <z_cstart+0xe8>)
	_kernel.ready_q.cache = &z_main_thread;
   209a8:	4e35      	ldr	r6, [pc, #212]	; (20a80 <z_cstart+0xec>)
   209aa:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   209ac:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 20aa4 <z_cstart+0x110>
	z_setup_new_thread(thread, stack,
   209b0:	4f34      	ldr	r7, [pc, #208]	; (20a84 <z_cstart+0xf0>)
   209b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   209b6:	2400      	movs	r4, #0
   209b8:	616b      	str	r3, [r5, #20]
   209ba:	23e0      	movs	r3, #224	; 0xe0
   209bc:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   209c0:	77ec      	strb	r4, [r5, #31]
   209c2:	762c      	strb	r4, [r5, #24]
   209c4:	766c      	strb	r4, [r5, #25]
   209c6:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   209c8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   209ca:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   209ce:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   209d0:	f7e6 f8d8 	bl	6b84 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   209d4:	f7e5 fbe2 	bl	619c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   209d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   209dc:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   209de:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   209e0:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   209e4:	4d28      	ldr	r5, [pc, #160]	; (20a88 <z_cstart+0xf4>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   209e6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
   209ea:	4b28      	ldr	r3, [pc, #160]	; (20a8c <z_cstart+0xf8>)
   209ec:	9325      	str	r3, [sp, #148]	; 0x94
	_current_cpu->current = dummy_thread;
   209ee:	ab06      	add	r3, sp, #24
   209f0:	60ab      	str	r3, [r5, #8]
	dummy_thread->stack_info.size = 0U;
   209f2:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
#endif
#if defined(CONFIG_MMU) && defined(CONFIG_USERSPACE)
	z_kernel_map_fixup();
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   209f6:	f7ff fe19 	bl	2062c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   209fa:	4620      	mov	r0, r4
   209fc:	f7ff fe26 	bl	2064c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   20a00:	2001      	movs	r0, #1
   20a02:	f7ff fe23 	bl	2064c <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   20a06:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
   20a0a:	f000 ffad 	bl	21968 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   20a0e:	4b20      	ldr	r3, [pc, #128]	; (20a90 <z_cstart+0xfc>)
	_kernel.ready_q.cache = &z_main_thread;
   20a10:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   20a12:	4920      	ldr	r1, [pc, #128]	; (20a94 <z_cstart+0x100>)
   20a14:	9305      	str	r3, [sp, #20]
   20a16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   20a1a:	4653      	mov	r3, sl
   20a1c:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   20a20:	e9cd 4401 	strd	r4, r4, [sp, #4]
   20a24:	9400      	str	r4, [sp, #0]
   20a26:	4630      	mov	r0, r6
   20a28:	f001 fce0 	bl	223ec <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   20a2c:	7b73      	ldrb	r3, [r6, #13]
   20a2e:	4680      	mov	r8, r0
   20a30:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   20a34:	4630      	mov	r0, r6
   20a36:	7373      	strb	r3, [r6, #13]
   20a38:	f008 ff47 	bl	298ca <z_ready_thread>
	z_setup_new_thread(thread, stack,
   20a3c:	230f      	movs	r3, #15
   20a3e:	e9cd 4302 	strd	r4, r3, [sp, #8]
   20a42:	4915      	ldr	r1, [pc, #84]	; (20a98 <z_cstart+0x104>)
   20a44:	4b15      	ldr	r3, [pc, #84]	; (20a9c <z_cstart+0x108>)
   20a46:	f44f 72a0 	mov.w	r2, #320	; 0x140
   20a4a:	e9cd b404 	strd	fp, r4, [sp, #16]
   20a4e:	e9cd 5400 	strd	r5, r4, [sp]
   20a52:	4638      	mov	r0, r7
   20a54:	f001 fcca 	bl	223ec <z_setup_new_thread>
   20a58:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   20a5a:	60ef      	str	r7, [r5, #12]
   20a5c:	f023 0304 	bic.w	r3, r3, #4
   20a60:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   20a62:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
   20a66:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].id = i;
   20a6a:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   20a6c:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   20a70:	4652      	mov	r2, sl
   20a72:	4641      	mov	r1, r8
   20a74:	4630      	mov	r0, r6
   20a76:	f7e5 fb77 	bl	6168 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   20a7a:	bf00      	nop
   20a7c:	e000ed00 	.word	0xe000ed00
   20a80:	20000a20 	.word	0x20000a20
   20a84:	20000980 	.word	0x20000980
   20a88:	200023f4 	.word	0x200023f4
   20a8c:	2000243c 	.word	0x2000243c
   20a90:	0002ee6d 	.word	0x0002ee6d
   20a94:	20006000 	.word	0x20006000
   20a98:	200040b0 	.word	0x200040b0
   20a9c:	00020921 	.word	0x00020921
   20aa0:	200049f0 	.word	0x200049f0
   20aa4:	00020961 	.word	0x00020961

00020aa8 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   20aa8:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   20aaa:	4c06      	ldr	r4, [pc, #24]	; (20ac4 <statics_init+0x1c>)
   20aac:	4d06      	ldr	r5, [pc, #24]	; (20ac8 <statics_init+0x20>)
   20aae:	42ac      	cmp	r4, r5
   20ab0:	d301      	bcc.n	20ab6 <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   20ab2:	2000      	movs	r0, #0
   20ab4:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   20ab6:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   20aba:	4620      	mov	r0, r4
   20abc:	f008 fc82 	bl	293c4 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   20ac0:	3414      	adds	r4, #20
   20ac2:	e7f4      	b.n	20aae <statics_init+0x6>
   20ac4:	20007e4c 	.word	0x20007e4c
   20ac8:	20007e4c 	.word	0x20007e4c

00020acc <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   20acc:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   20ace:	4c0f      	ldr	r4, [pc, #60]	; (20b0c <init_mem_slab_module+0x40>)
   20ad0:	4d0f      	ldr	r5, [pc, #60]	; (20b10 <init_mem_slab_module+0x44>)
   20ad2:	42ac      	cmp	r4, r5
   20ad4:	d301      	bcc.n	20ada <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   20ad6:	2000      	movs	r0, #0
	return rc;
}
   20ad8:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   20ada:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   20ade:	ea42 0301 	orr.w	r3, r2, r1
   20ae2:	f013 0303 	ands.w	r3, r3, #3
   20ae6:	d10e      	bne.n	20b06 <init_mem_slab_module+0x3a>
	for (j = 0U; j < slab->num_blocks; j++) {
   20ae8:	68a0      	ldr	r0, [r4, #8]
	slab->free_list = NULL;
   20aea:	6163      	str	r3, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   20aec:	4283      	cmp	r3, r0
   20aee:	d104      	bne.n	20afa <init_mem_slab_module+0x2e>
		z_object_init(slab);
   20af0:	4620      	mov	r0, r4
   20af2:	f009 fc38 	bl	2a366 <z_object_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   20af6:	341c      	adds	r4, #28
   20af8:	e7eb      	b.n	20ad2 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   20afa:	6966      	ldr	r6, [r4, #20]
   20afc:	6016      	str	r6, [r2, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   20afe:	3301      	adds	r3, #1
		slab->free_list = p;
   20b00:	6162      	str	r2, [r4, #20]
		p += slab->block_size;
   20b02:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   20b04:	e7f2      	b.n	20aec <init_mem_slab_module+0x20>
		return -EINVAL;
   20b06:	f06f 0015 	mvn.w	r0, #21
	return rc;
   20b0a:	e7e5      	b.n	20ad8 <init_mem_slab_module+0xc>
   20b0c:	20007df8 	.word	0x20007df8
   20b10:	20007e4c 	.word	0x20007e4c

00020b14 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   20b14:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   20b16:	460c      	mov	r4, r1
   20b18:	4616      	mov	r6, r2
   20b1a:	461f      	mov	r7, r3
   20b1c:	f04f 0320 	mov.w	r3, #32
   20b20:	f3ef 8111 	mrs	r1, BASEPRI
   20b24:	f383 8811 	msr	BASEPRI, r3
   20b28:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   20b2c:	6943      	ldr	r3, [r0, #20]
   20b2e:	b15b      	cbz	r3, 20b48 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   20b30:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   20b32:	681b      	ldr	r3, [r3, #0]
   20b34:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   20b36:	6983      	ldr	r3, [r0, #24]
   20b38:	3301      	adds	r3, #1
   20b3a:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   20b3c:	2000      	movs	r0, #0
	__asm__ volatile(
   20b3e:	f381 8811 	msr	BASEPRI, r1
   20b42:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   20b46:	e011      	b.n	20b6c <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   20b48:	ea56 0207 	orrs.w	r2, r6, r7
   20b4c:	d103      	bne.n	20b56 <k_mem_slab_alloc+0x42>
		*mem = NULL;
   20b4e:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   20b50:	f06f 000b 	mvn.w	r0, #11
   20b54:	e7f3      	b.n	20b3e <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   20b56:	4602      	mov	r2, r0
   20b58:	e9cd 6700 	strd	r6, r7, [sp]
   20b5c:	4804      	ldr	r0, [pc, #16]	; (20b70 <k_mem_slab_alloc+0x5c>)
   20b5e:	f000 fc9f 	bl	214a0 <z_pend_curr>
		if (result == 0) {
   20b62:	b918      	cbnz	r0, 20b6c <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   20b64:	4b03      	ldr	r3, [pc, #12]	; (20b74 <k_mem_slab_alloc+0x60>)
   20b66:	689b      	ldr	r3, [r3, #8]
   20b68:	695b      	ldr	r3, [r3, #20]
   20b6a:	6023      	str	r3, [r4, #0]
}
   20b6c:	b002      	add	sp, #8
   20b6e:	bdd0      	pop	{r4, r6, r7, pc}
   20b70:	20002bb3 	.word	0x20002bb3
   20b74:	200023f4 	.word	0x200023f4

00020b78 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   20b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20b7a:	4604      	mov	r4, r0
   20b7c:	460d      	mov	r5, r1
	__asm__ volatile(
   20b7e:	f04f 0320 	mov.w	r3, #32
   20b82:	f3ef 8611 	mrs	r6, BASEPRI
   20b86:	f383 8811 	msr	BASEPRI, r3
   20b8a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (slab->free_list == NULL) {
   20b8e:	6947      	ldr	r7, [r0, #20]
   20b90:	b977      	cbnz	r7, 20bb0 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   20b92:	f008 fee1 	bl	29958 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   20b96:	b158      	cbz	r0, 20bb0 <k_mem_slab_free+0x38>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   20b98:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   20b9a:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   20b9c:	f8c0 7090 	str.w	r7, [r0, #144]	; 0x90
			z_ready_thread(pending_thread);
   20ba0:	f008 fe93 	bl	298ca <z_ready_thread>
			z_reschedule(&lock, key);
   20ba4:	4631      	mov	r1, r6
   20ba6:	4809      	ldr	r0, [pc, #36]	; (20bcc <k_mem_slab_free+0x54>)
	}
	**(char ***) mem = slab->free_list;
	slab->free_list = *(char **) mem;
	slab->num_used--;
	k_spin_unlock(&lock, key);
}
   20ba8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&lock, key);
   20bac:	f000 bbf6 	b.w	2139c <z_reschedule>
	**(char ***) mem = slab->free_list;
   20bb0:	682b      	ldr	r3, [r5, #0]
   20bb2:	6962      	ldr	r2, [r4, #20]
   20bb4:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   20bb6:	682b      	ldr	r3, [r5, #0]
   20bb8:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   20bba:	69a3      	ldr	r3, [r4, #24]
   20bbc:	3b01      	subs	r3, #1
   20bbe:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   20bc0:	f386 8811 	msr	BASEPRI, r6
   20bc4:	f3bf 8f6f 	isb	sy
}
   20bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20bca:	bf00      	nop
   20bcc:	20002bb3 	.word	0x20002bb3

00020bd0 <z_mrsh_k_mutex_init>:
#include <syscalls/kernel.h>

extern int z_vrfy_k_mutex_init(struct k_mutex * mutex);
uintptr_t z_mrsh_k_mutex_init(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   20bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	_current->syscall_frame = ssf;
   20bd2:	4f18      	ldr	r7, [pc, #96]	; (20c34 <z_mrsh_k_mutex_init+0x64>)
   20bd4:	9a08      	ldr	r2, [sp, #32]
   20bd6:	68bb      	ldr	r3, [r7, #8]
{
   20bd8:	4605      	mov	r5, r0
	_current->syscall_frame = ssf;
   20bda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}

#ifdef CONFIG_USERSPACE
static inline int z_vrfy_k_mutex_init(struct k_mutex *mutex)
{
	Z_OOPS(Z_SYSCALL_OBJ_INIT(mutex, K_OBJ_MUTEX));
   20bde:	f7df fa8f 	bl	100 <z_object_find>
   20be2:	2201      	movs	r2, #1
   20be4:	4629      	mov	r1, r5
   20be6:	f008 fc80 	bl	294ea <z_obj_validation_check.constprop.0>
   20bea:	463e      	mov	r6, r7
   20bec:	4604      	mov	r4, r0
   20bee:	b1c8      	cbz	r0, 20c24 <z_mrsh_k_mutex_init+0x54>
   20bf0:	f008 fc71 	bl	294d6 <arch_is_user_context>
   20bf4:	4b10      	ldr	r3, [pc, #64]	; (20c38 <z_mrsh_k_mutex_init+0x68>)
   20bf6:	4a11      	ldr	r2, [pc, #68]	; (20c3c <z_mrsh_k_mutex_init+0x6c>)
   20bf8:	1a9b      	subs	r3, r3, r2
   20bfa:	08db      	lsrs	r3, r3, #3
   20bfc:	019b      	lsls	r3, r3, #6
   20bfe:	f043 0301 	orr.w	r3, r3, #1
   20c02:	b148      	cbz	r0, 20c18 <z_mrsh_k_mutex_init+0x48>
   20c04:	4a0e      	ldr	r2, [pc, #56]	; (20c40 <z_mrsh_k_mutex_init+0x70>)
   20c06:	490f      	ldr	r1, [pc, #60]	; (20c44 <z_mrsh_k_mutex_init+0x74>)
   20c08:	4618      	mov	r0, r3
   20c0a:	f004 f944 	bl	24e96 <log_from_user>
   20c0e:	68b3      	ldr	r3, [r6, #8]
   20c10:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   20c14:	f005 ff22 	bl	26a5c <arch_syscall_oops>
   20c18:	4909      	ldr	r1, [pc, #36]	; (20c40 <z_mrsh_k_mutex_init+0x70>)
   20c1a:	480a      	ldr	r0, [pc, #40]	; (20c44 <z_mrsh_k_mutex_init+0x74>)
   20c1c:	461a      	mov	r2, r3
   20c1e:	f004 f96d 	bl	24efc <log_1>
   20c22:	e7f4      	b.n	20c0e <z_mrsh_k_mutex_init+0x3e>
	return z_impl_k_mutex_init(mutex);
   20c24:	4628      	mov	r0, r5
   20c26:	f008 fc6f 	bl	29508 <z_impl_k_mutex_init>
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	int ret = z_vrfy_k_mutex_init(*(struct k_mutex **)&arg0)
;
	_current->syscall_frame = NULL;
   20c2a:	68bb      	ldr	r3, [r7, #8]
   20c2c:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
	return (uintptr_t) ret;
}
   20c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20c32:	bf00      	nop
   20c34:	200023f4 	.word	0x200023f4
   20c38:	0002a810 	.word	0x0002a810
   20c3c:	0002a6d0 	.word	0x0002a6d0
   20c40:	0002ee75 	.word	0x0002ee75
   20c44:	0002e72d 	.word	0x0002e72d

00020c48 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   20c48:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   20c4c:	4604      	mov	r4, r0
   20c4e:	4616      	mov	r6, r2
   20c50:	461f      	mov	r7, r3
	__asm__ volatile(
   20c52:	f04f 0320 	mov.w	r3, #32
   20c56:	f3ef 8811 	mrs	r8, BASEPRI
   20c5a:	f383 8811 	msr	BASEPRI, r3
   20c5e:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   20c62:	68c3      	ldr	r3, [r0, #12]
   20c64:	4a32      	ldr	r2, [pc, #200]	; (20d30 <z_impl_k_mutex_lock+0xe8>)
   20c66:	b16b      	cbz	r3, 20c84 <z_impl_k_mutex_lock+0x3c>
   20c68:	6880      	ldr	r0, [r0, #8]
   20c6a:	6891      	ldr	r1, [r2, #8]
   20c6c:	4288      	cmp	r0, r1
   20c6e:	d019      	beq.n	20ca4 <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   20c70:	ea56 0307 	orrs.w	r3, r6, r7
   20c74:	d118      	bne.n	20ca8 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   20c76:	f388 8811 	msr	BASEPRI, r8
   20c7a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   20c7e:	f06f 000f 	mvn.w	r0, #15
   20c82:	e00c      	b.n	20c9e <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   20c84:	6891      	ldr	r1, [r2, #8]
   20c86:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   20c8a:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   20c8c:	3301      	adds	r3, #1
   20c8e:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   20c90:	6893      	ldr	r3, [r2, #8]
   20c92:	60a3      	str	r3, [r4, #8]
   20c94:	f388 8811 	msr	BASEPRI, r8
   20c98:	f3bf 8f6f 	isb	sy
		return 0;
   20c9c:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   20c9e:	b002      	add	sp, #8
   20ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   20ca4:	6921      	ldr	r1, [r4, #16]
   20ca6:	e7f0      	b.n	20c8a <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   20ca8:	f990 300e 	ldrsb.w	r3, [r0, #14]
   20cac:	f991 100e 	ldrsb.w	r1, [r1, #14]
   20cb0:	4299      	cmp	r1, r3
   20cb2:	bfa8      	it	ge
   20cb4:	4619      	movge	r1, r3
   20cb6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   20cba:	428b      	cmp	r3, r1
   20cbc:	dd2c      	ble.n	20d18 <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
   20cbe:	f000 fdf7 	bl	218b0 <z_set_prio>
   20cc2:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   20cc4:	e9cd 6700 	strd	r6, r7, [sp]
   20cc8:	481a      	ldr	r0, [pc, #104]	; (20d34 <z_impl_k_mutex_lock+0xec>)
   20cca:	4622      	mov	r2, r4
   20ccc:	4641      	mov	r1, r8
   20cce:	f000 fbe7 	bl	214a0 <z_pend_curr>
	if (got_mutex == 0) {
   20cd2:	2800      	cmp	r0, #0
   20cd4:	d0e3      	beq.n	20c9e <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   20cd6:	f04f 0320 	mov.w	r3, #32
   20cda:	f3ef 8611 	mrs	r6, BASEPRI
   20cde:	f383 8811 	msr	BASEPRI, r3
   20ce2:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   20ce6:	6823      	ldr	r3, [r4, #0]
   20ce8:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20cea:	42a3      	cmp	r3, r4
   20cec:	d007      	beq.n	20cfe <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   20cee:	b133      	cbz	r3, 20cfe <z_impl_k_mutex_lock+0xb6>
   20cf0:	f993 300e 	ldrsb.w	r3, [r3, #14]
   20cf4:	4299      	cmp	r1, r3
   20cf6:	bfa8      	it	ge
   20cf8:	4619      	movge	r1, r3
   20cfa:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   20cfe:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   20d00:	f990 300e 	ldrsb.w	r3, [r0, #14]
   20d04:	4299      	cmp	r1, r3
   20d06:	d109      	bne.n	20d1c <z_impl_k_mutex_lock+0xd4>
	if (resched) {
   20d08:	b16d      	cbz	r5, 20d26 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   20d0a:	480a      	ldr	r0, [pc, #40]	; (20d34 <z_impl_k_mutex_lock+0xec>)
   20d0c:	4631      	mov	r1, r6
   20d0e:	f000 fb45 	bl	2139c <z_reschedule>
	return -EAGAIN;
   20d12:	f06f 000a 	mvn.w	r0, #10
   20d16:	e7c2      	b.n	20c9e <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   20d18:	2500      	movs	r5, #0
   20d1a:	e7d3      	b.n	20cc4 <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
   20d1c:	f000 fdc8 	bl	218b0 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   20d20:	2800      	cmp	r0, #0
   20d22:	d1f2      	bne.n	20d0a <z_impl_k_mutex_lock+0xc2>
   20d24:	e7f0      	b.n	20d08 <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
   20d26:	f386 8811 	msr	BASEPRI, r6
   20d2a:	f3bf 8f6f 	isb	sy
   20d2e:	e7f0      	b.n	20d12 <z_impl_k_mutex_lock+0xca>
   20d30:	200023f4 	.word	0x200023f4
   20d34:	20002bb3 	.word	0x20002bb3

00020d38 <z_mrsh_k_mutex_lock>:
#include <syscalls/kernel.h>

extern int z_vrfy_k_mutex_lock(struct k_mutex * mutex, k_timeout_t timeout);
uintptr_t z_mrsh_k_mutex_lock(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   20d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	_current->syscall_frame = ssf;
   20d3c:	4f1a      	ldr	r7, [pc, #104]	; (20da8 <z_mrsh_k_mutex_lock+0x70>)
   20d3e:	68bb      	ldr	r3, [r7, #8]
{
   20d40:	4690      	mov	r8, r2
	_current->syscall_frame = ssf;
   20d42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   20d44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
{
   20d48:	4605      	mov	r5, r0
   20d4a:	4689      	mov	r9, r1

#ifdef CONFIG_USERSPACE
static inline int z_vrfy_k_mutex_lock(struct k_mutex *mutex,
				      k_timeout_t timeout)
{
	Z_OOPS(Z_SYSCALL_OBJ(mutex, K_OBJ_MUTEX));
   20d4c:	f7df f9d8 	bl	100 <z_object_find>
   20d50:	2200      	movs	r2, #0
   20d52:	4629      	mov	r1, r5
   20d54:	f008 fbc9 	bl	294ea <z_obj_validation_check.constprop.0>
   20d58:	463e      	mov	r6, r7
   20d5a:	4604      	mov	r4, r0
   20d5c:	b1c8      	cbz	r0, 20d92 <z_mrsh_k_mutex_lock+0x5a>
   20d5e:	f008 fbba 	bl	294d6 <arch_is_user_context>
   20d62:	4b12      	ldr	r3, [pc, #72]	; (20dac <z_mrsh_k_mutex_lock+0x74>)
   20d64:	4a12      	ldr	r2, [pc, #72]	; (20db0 <z_mrsh_k_mutex_lock+0x78>)
   20d66:	1a9b      	subs	r3, r3, r2
   20d68:	08db      	lsrs	r3, r3, #3
   20d6a:	019b      	lsls	r3, r3, #6
   20d6c:	f043 0301 	orr.w	r3, r3, #1
   20d70:	b148      	cbz	r0, 20d86 <z_mrsh_k_mutex_lock+0x4e>
   20d72:	4a10      	ldr	r2, [pc, #64]	; (20db4 <z_mrsh_k_mutex_lock+0x7c>)
   20d74:	4910      	ldr	r1, [pc, #64]	; (20db8 <z_mrsh_k_mutex_lock+0x80>)
   20d76:	4618      	mov	r0, r3
   20d78:	f004 f88d 	bl	24e96 <log_from_user>
   20d7c:	68b3      	ldr	r3, [r6, #8]
   20d7e:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   20d82:	f005 fe6b 	bl	26a5c <arch_syscall_oops>
   20d86:	490b      	ldr	r1, [pc, #44]	; (20db4 <z_mrsh_k_mutex_lock+0x7c>)
   20d88:	480b      	ldr	r0, [pc, #44]	; (20db8 <z_mrsh_k_mutex_lock+0x80>)
   20d8a:	461a      	mov	r2, r3
   20d8c:	f004 f8b6 	bl	24efc <log_1>
   20d90:	e7f4      	b.n	20d7c <z_mrsh_k_mutex_lock+0x44>
	return z_impl_k_mutex_lock(mutex, timeout);
   20d92:	4643      	mov	r3, r8
   20d94:	464a      	mov	r2, r9
   20d96:	4628      	mov	r0, r5
   20d98:	f7ff ff56 	bl	20c48 <z_impl_k_mutex_lock>
	union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0;
	parm0.split.lo = arg1;
	parm0.split.hi = arg2;
	int ret = z_vrfy_k_mutex_lock(*(struct k_mutex **)&arg0, parm0.val)
;
	_current->syscall_frame = NULL;
   20d9c:	68bb      	ldr	r3, [r7, #8]
   20d9e:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
	return (uintptr_t) ret;
}
   20da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   20da6:	bf00      	nop
   20da8:	200023f4 	.word	0x200023f4
   20dac:	0002a810 	.word	0x0002a810
   20db0:	0002a6d0 	.word	0x0002a6d0
   20db4:	0002ee89 	.word	0x0002ee89
   20db8:	0002e72d 	.word	0x0002e72d

00020dbc <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   20dbc:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
   20dbe:	6883      	ldr	r3, [r0, #8]
{
   20dc0:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   20dc2:	2b00      	cmp	r3, #0
   20dc4:	d037      	beq.n	20e36 <z_impl_k_mutex_unlock+0x7a>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   20dc6:	4a1f      	ldr	r2, [pc, #124]	; (20e44 <z_impl_k_mutex_unlock+0x88>)
   20dc8:	6892      	ldr	r2, [r2, #8]
   20dca:	4293      	cmp	r3, r2
   20dcc:	d136      	bne.n	20e3c <z_impl_k_mutex_unlock+0x80>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   20dce:	7bda      	ldrb	r2, [r3, #15]
   20dd0:	3a01      	subs	r2, #1
   20dd2:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   20dd4:	68c3      	ldr	r3, [r0, #12]
   20dd6:	2b01      	cmp	r3, #1
   20dd8:	d005      	beq.n	20de6 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   20dda:	3b01      	subs	r3, #1
   20ddc:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   20dde:	f000 fc1b 	bl	21618 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   20de2:	2000      	movs	r0, #0
}
   20de4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   20de6:	f04f 0320 	mov.w	r3, #32
   20dea:	f3ef 8511 	mrs	r5, BASEPRI
   20dee:	f383 8811 	msr	BASEPRI, r3
   20df2:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   20df6:	6901      	ldr	r1, [r0, #16]
   20df8:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   20dfa:	f990 300e 	ldrsb.w	r3, [r0, #14]
   20dfe:	4299      	cmp	r1, r3
   20e00:	d001      	beq.n	20e06 <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   20e02:	f000 fd55 	bl	218b0 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   20e06:	4620      	mov	r0, r4
   20e08:	f008 fda6 	bl	29958 <z_unpend_first_thread>
	mutex->owner = new_owner;
   20e0c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   20e0e:	b160      	cbz	r0, 20e2a <z_impl_k_mutex_unlock+0x6e>
		mutex->owner_orig_prio = new_owner->base.prio;
   20e10:	f990 200e 	ldrsb.w	r2, [r0, #14]
   20e14:	6122      	str	r2, [r4, #16]
   20e16:	2200      	movs	r2, #0
   20e18:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
		z_ready_thread(new_owner);
   20e1c:	f008 fd55 	bl	298ca <z_ready_thread>
		z_reschedule(&lock, key);
   20e20:	4809      	ldr	r0, [pc, #36]	; (20e48 <z_impl_k_mutex_unlock+0x8c>)
   20e22:	4629      	mov	r1, r5
   20e24:	f000 faba 	bl	2139c <z_reschedule>
   20e28:	e7d9      	b.n	20dde <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   20e2a:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   20e2c:	f385 8811 	msr	BASEPRI, r5
   20e30:	f3bf 8f6f 	isb	sy
   20e34:	e7d3      	b.n	20dde <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   20e36:	f06f 0015 	mvn.w	r0, #21
   20e3a:	e7d3      	b.n	20de4 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   20e3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20e40:	e7d0      	b.n	20de4 <z_impl_k_mutex_unlock+0x28>
   20e42:	bf00      	nop
   20e44:	200023f4 	.word	0x200023f4
   20e48:	20002bb3 	.word	0x20002bb3

00020e4c <z_mrsh_k_mutex_unlock>:
#include <syscalls/kernel.h>

extern int z_vrfy_k_mutex_unlock(struct k_mutex * mutex);
uintptr_t z_mrsh_k_mutex_unlock(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   20e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	_current->syscall_frame = ssf;
   20e4e:	4f18      	ldr	r7, [pc, #96]	; (20eb0 <z_mrsh_k_mutex_unlock+0x64>)
   20e50:	9a08      	ldr	r2, [sp, #32]
   20e52:	68bb      	ldr	r3, [r7, #8]
{
   20e54:	4605      	mov	r5, r0
	_current->syscall_frame = ssf;
   20e56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

#ifdef CONFIG_USERSPACE
static inline int z_vrfy_k_mutex_unlock(struct k_mutex *mutex)
{
	Z_OOPS(Z_SYSCALL_OBJ(mutex, K_OBJ_MUTEX));
   20e5a:	f7df f951 	bl	100 <z_object_find>
   20e5e:	2200      	movs	r2, #0
   20e60:	4629      	mov	r1, r5
   20e62:	f008 fb42 	bl	294ea <z_obj_validation_check.constprop.0>
   20e66:	463e      	mov	r6, r7
   20e68:	4604      	mov	r4, r0
   20e6a:	b1c8      	cbz	r0, 20ea0 <z_mrsh_k_mutex_unlock+0x54>
   20e6c:	f008 fb33 	bl	294d6 <arch_is_user_context>
   20e70:	4b10      	ldr	r3, [pc, #64]	; (20eb4 <z_mrsh_k_mutex_unlock+0x68>)
   20e72:	4a11      	ldr	r2, [pc, #68]	; (20eb8 <z_mrsh_k_mutex_unlock+0x6c>)
   20e74:	1a9b      	subs	r3, r3, r2
   20e76:	08db      	lsrs	r3, r3, #3
   20e78:	019b      	lsls	r3, r3, #6
   20e7a:	f043 0301 	orr.w	r3, r3, #1
   20e7e:	b148      	cbz	r0, 20e94 <z_mrsh_k_mutex_unlock+0x48>
   20e80:	4a0e      	ldr	r2, [pc, #56]	; (20ebc <z_mrsh_k_mutex_unlock+0x70>)
   20e82:	490f      	ldr	r1, [pc, #60]	; (20ec0 <z_mrsh_k_mutex_unlock+0x74>)
   20e84:	4618      	mov	r0, r3
   20e86:	f004 f806 	bl	24e96 <log_from_user>
   20e8a:	68b3      	ldr	r3, [r6, #8]
   20e8c:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   20e90:	f005 fde4 	bl	26a5c <arch_syscall_oops>
   20e94:	4909      	ldr	r1, [pc, #36]	; (20ebc <z_mrsh_k_mutex_unlock+0x70>)
   20e96:	480a      	ldr	r0, [pc, #40]	; (20ec0 <z_mrsh_k_mutex_unlock+0x74>)
   20e98:	461a      	mov	r2, r3
   20e9a:	f004 f82f 	bl	24efc <log_1>
   20e9e:	e7f4      	b.n	20e8a <z_mrsh_k_mutex_unlock+0x3e>
	return z_impl_k_mutex_unlock(mutex);
   20ea0:	4628      	mov	r0, r5
   20ea2:	f7ff ff8b 	bl	20dbc <z_impl_k_mutex_unlock>
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	int ret = z_vrfy_k_mutex_unlock(*(struct k_mutex **)&arg0)
;
	_current->syscall_frame = NULL;
   20ea6:	68bb      	ldr	r3, [r7, #8]
   20ea8:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
	return (uintptr_t) ret;
}
   20eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20eae:	bf00      	nop
   20eb0:	200023f4 	.word	0x200023f4
   20eb4:	0002a810 	.word	0x0002a810
   20eb8:	0002a6d0 	.word	0x0002a6d0
   20ebc:	0002ee9d 	.word	0x0002ee9d
   20ec0:	0002e72d 	.word	0x0002e72d

00020ec4 <z_mrsh_k_queue_init>:
#include <syscalls/kernel.h>

extern void z_vrfy_k_queue_init(struct k_queue * queue);
uintptr_t z_mrsh_k_queue_init(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   20ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	_current->syscall_frame = ssf;
   20ec6:	4f19      	ldr	r7, [pc, #100]	; (20f2c <z_mrsh_k_queue_init+0x68>)
   20ec8:	9a08      	ldr	r2, [sp, #32]
   20eca:	68bb      	ldr	r3, [r7, #8]
{
   20ecc:	4605      	mov	r5, r0
	_current->syscall_frame = ssf;
   20ece:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}

#ifdef CONFIG_USERSPACE
static inline void z_vrfy_k_queue_init(struct k_queue *queue)
{
	Z_OOPS(Z_SYSCALL_OBJ_NEVER_INIT(queue, K_OBJ_QUEUE));
   20ed2:	f7df f915 	bl	100 <z_object_find>
   20ed6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   20eda:	4629      	mov	r1, r5
   20edc:	f008 fb28 	bl	29530 <z_obj_validation_check.constprop.0>
   20ee0:	463e      	mov	r6, r7
   20ee2:	4604      	mov	r4, r0
   20ee4:	b1c8      	cbz	r0, 20f1a <z_mrsh_k_queue_init+0x56>
   20ee6:	f008 fb19 	bl	2951c <arch_is_user_context>
   20eea:	4b11      	ldr	r3, [pc, #68]	; (20f30 <z_mrsh_k_queue_init+0x6c>)
   20eec:	4a11      	ldr	r2, [pc, #68]	; (20f34 <z_mrsh_k_queue_init+0x70>)
   20eee:	1a9b      	subs	r3, r3, r2
   20ef0:	08db      	lsrs	r3, r3, #3
   20ef2:	019b      	lsls	r3, r3, #6
   20ef4:	f043 0301 	orr.w	r3, r3, #1
   20ef8:	b148      	cbz	r0, 20f0e <z_mrsh_k_queue_init+0x4a>
   20efa:	4a0f      	ldr	r2, [pc, #60]	; (20f38 <z_mrsh_k_queue_init+0x74>)
   20efc:	490f      	ldr	r1, [pc, #60]	; (20f3c <z_mrsh_k_queue_init+0x78>)
   20efe:	4618      	mov	r0, r3
   20f00:	f003 ffc9 	bl	24e96 <log_from_user>
   20f04:	68b3      	ldr	r3, [r6, #8]
   20f06:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   20f0a:	f005 fda7 	bl	26a5c <arch_syscall_oops>
   20f0e:	490a      	ldr	r1, [pc, #40]	; (20f38 <z_mrsh_k_queue_init+0x74>)
   20f10:	480a      	ldr	r0, [pc, #40]	; (20f3c <z_mrsh_k_queue_init+0x78>)
   20f12:	461a      	mov	r2, r3
   20f14:	f003 fff2 	bl	24efc <log_1>
   20f18:	e7f4      	b.n	20f04 <z_mrsh_k_queue_init+0x40>
	z_impl_k_queue_init(queue);
   20f1a:	4628      	mov	r0, r5
   20f1c:	f008 fb88 	bl	29630 <z_impl_k_queue_init>
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	z_vrfy_k_queue_init(*(struct k_queue **)&arg0)
;
	_current->syscall_frame = NULL;
   20f20:	68bb      	ldr	r3, [r7, #8]
	return 0;
}
   20f22:	4620      	mov	r0, r4
	_current->syscall_frame = NULL;
   20f24:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
}
   20f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20f2a:	bf00      	nop
   20f2c:	200023f4 	.word	0x200023f4
   20f30:	0002a810 	.word	0x0002a810
   20f34:	0002a6d0 	.word	0x0002a6d0
   20f38:	0002eeb3 	.word	0x0002eeb3
   20f3c:	0002e72d 	.word	0x0002e72d

00020f40 <z_mrsh_k_queue_cancel_wait>:
#include <syscalls/kernel.h>

extern void z_vrfy_k_queue_cancel_wait(struct k_queue * queue);
uintptr_t z_mrsh_k_queue_cancel_wait(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   20f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	_current->syscall_frame = ssf;
   20f42:	4f18      	ldr	r7, [pc, #96]	; (20fa4 <z_mrsh_k_queue_cancel_wait+0x64>)
   20f44:	9a08      	ldr	r2, [sp, #32]
   20f46:	68bb      	ldr	r3, [r7, #8]
{
   20f48:	4605      	mov	r5, r0
	_current->syscall_frame = ssf;
   20f4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}

#ifdef CONFIG_USERSPACE
static inline void z_vrfy_k_queue_cancel_wait(struct k_queue *queue)
{
	Z_OOPS(Z_SYSCALL_OBJ(queue, K_OBJ_QUEUE));
   20f4e:	f7df f8d7 	bl	100 <z_object_find>
   20f52:	2200      	movs	r2, #0
   20f54:	4629      	mov	r1, r5
   20f56:	f008 faeb 	bl	29530 <z_obj_validation_check.constprop.0>
   20f5a:	463e      	mov	r6, r7
   20f5c:	4604      	mov	r4, r0
   20f5e:	b1c8      	cbz	r0, 20f94 <z_mrsh_k_queue_cancel_wait+0x54>
   20f60:	f008 fadc 	bl	2951c <arch_is_user_context>
   20f64:	4b10      	ldr	r3, [pc, #64]	; (20fa8 <z_mrsh_k_queue_cancel_wait+0x68>)
   20f66:	4a11      	ldr	r2, [pc, #68]	; (20fac <z_mrsh_k_queue_cancel_wait+0x6c>)
   20f68:	1a9b      	subs	r3, r3, r2
   20f6a:	08db      	lsrs	r3, r3, #3
   20f6c:	019b      	lsls	r3, r3, #6
   20f6e:	f043 0301 	orr.w	r3, r3, #1
   20f72:	b148      	cbz	r0, 20f88 <z_mrsh_k_queue_cancel_wait+0x48>
   20f74:	4a0e      	ldr	r2, [pc, #56]	; (20fb0 <z_mrsh_k_queue_cancel_wait+0x70>)
   20f76:	490f      	ldr	r1, [pc, #60]	; (20fb4 <z_mrsh_k_queue_cancel_wait+0x74>)
   20f78:	4618      	mov	r0, r3
   20f7a:	f003 ff8c 	bl	24e96 <log_from_user>
   20f7e:	68b3      	ldr	r3, [r6, #8]
   20f80:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   20f84:	f005 fd6a 	bl	26a5c <arch_syscall_oops>
   20f88:	4909      	ldr	r1, [pc, #36]	; (20fb0 <z_mrsh_k_queue_cancel_wait+0x70>)
   20f8a:	480a      	ldr	r0, [pc, #40]	; (20fb4 <z_mrsh_k_queue_cancel_wait+0x74>)
   20f8c:	461a      	mov	r2, r3
   20f8e:	f003 ffb5 	bl	24efc <log_1>
   20f92:	e7f4      	b.n	20f7e <z_mrsh_k_queue_cancel_wait+0x3e>
	z_impl_k_queue_cancel_wait(queue);
   20f94:	4628      	mov	r0, r5
   20f96:	f008 fb58 	bl	2964a <z_impl_k_queue_cancel_wait>
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	z_vrfy_k_queue_cancel_wait(*(struct k_queue **)&arg0)
;
	_current->syscall_frame = NULL;
   20f9a:	68bb      	ldr	r3, [r7, #8]
	return 0;
}
   20f9c:	4620      	mov	r0, r4
	_current->syscall_frame = NULL;
   20f9e:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
}
   20fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20fa4:	200023f4 	.word	0x200023f4
   20fa8:	0002a810 	.word	0x0002a810
   20fac:	0002a6d0 	.word	0x0002a6d0
   20fb0:	0002eec7 	.word	0x0002eec7
   20fb4:	0002e72d 	.word	0x0002e72d

00020fb8 <z_mrsh_k_queue_alloc_append>:
#include <syscalls/kernel.h>

extern int32_t z_vrfy_k_queue_alloc_append(struct k_queue * queue, void * data);
uintptr_t z_mrsh_k_queue_alloc_append(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   20fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_current->syscall_frame = ssf;
   20fbc:	4f19      	ldr	r7, [pc, #100]	; (21024 <z_mrsh_k_queue_alloc_append+0x6c>)
   20fbe:	9a08      	ldr	r2, [sp, #32]
   20fc0:	68bb      	ldr	r3, [r7, #8]
{
   20fc2:	4605      	mov	r5, r0
	_current->syscall_frame = ssf;
   20fc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
{
   20fc8:	4688      	mov	r8, r1

#ifdef CONFIG_USERSPACE
static inline int32_t z_vrfy_k_queue_alloc_append(struct k_queue *queue,
						  void *data)
{
	Z_OOPS(Z_SYSCALL_OBJ(queue, K_OBJ_QUEUE));
   20fca:	f7df f899 	bl	100 <z_object_find>
   20fce:	2200      	movs	r2, #0
   20fd0:	4629      	mov	r1, r5
   20fd2:	f008 faad 	bl	29530 <z_obj_validation_check.constprop.0>
   20fd6:	463e      	mov	r6, r7
   20fd8:	4604      	mov	r4, r0
   20fda:	b1c8      	cbz	r0, 21010 <z_mrsh_k_queue_alloc_append+0x58>
   20fdc:	f008 fa9e 	bl	2951c <arch_is_user_context>
   20fe0:	4b11      	ldr	r3, [pc, #68]	; (21028 <z_mrsh_k_queue_alloc_append+0x70>)
   20fe2:	4a12      	ldr	r2, [pc, #72]	; (2102c <z_mrsh_k_queue_alloc_append+0x74>)
   20fe4:	1a9b      	subs	r3, r3, r2
   20fe6:	08db      	lsrs	r3, r3, #3
   20fe8:	019b      	lsls	r3, r3, #6
   20fea:	f043 0301 	orr.w	r3, r3, #1
   20fee:	b148      	cbz	r0, 21004 <z_mrsh_k_queue_alloc_append+0x4c>
   20ff0:	4a0f      	ldr	r2, [pc, #60]	; (21030 <z_mrsh_k_queue_alloc_append+0x78>)
   20ff2:	4910      	ldr	r1, [pc, #64]	; (21034 <z_mrsh_k_queue_alloc_append+0x7c>)
   20ff4:	4618      	mov	r0, r3
   20ff6:	f003 ff4e 	bl	24e96 <log_from_user>
   20ffa:	68b3      	ldr	r3, [r6, #8]
   20ffc:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   21000:	f005 fd2c 	bl	26a5c <arch_syscall_oops>
   21004:	490a      	ldr	r1, [pc, #40]	; (21030 <z_mrsh_k_queue_alloc_append+0x78>)
   21006:	480b      	ldr	r0, [pc, #44]	; (21034 <z_mrsh_k_queue_alloc_append+0x7c>)
   21008:	461a      	mov	r2, r3
   2100a:	f003 ff77 	bl	24efc <log_1>
   2100e:	e7f4      	b.n	20ffa <z_mrsh_k_queue_alloc_append+0x42>
	return z_impl_k_queue_alloc_append(queue, data);
   21010:	4641      	mov	r1, r8
   21012:	4628      	mov	r0, r5
   21014:	f008 fb4f 	bl	296b6 <z_impl_k_queue_alloc_append>
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	int32_t ret = z_vrfy_k_queue_alloc_append(*(struct k_queue **)&arg0, *(void **)&arg1)
;
	_current->syscall_frame = NULL;
   21018:	68bb      	ldr	r3, [r7, #8]
   2101a:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
	return (uintptr_t) ret;
}
   2101e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21022:	bf00      	nop
   21024:	200023f4 	.word	0x200023f4
   21028:	0002a810 	.word	0x0002a810
   2102c:	0002a6d0 	.word	0x0002a6d0
   21030:	0002eee2 	.word	0x0002eee2
   21034:	0002e72d 	.word	0x0002e72d

00021038 <z_mrsh_k_queue_alloc_prepend>:
#include <syscalls/kernel.h>

extern int32_t z_vrfy_k_queue_alloc_prepend(struct k_queue * queue, void * data);
uintptr_t z_mrsh_k_queue_alloc_prepend(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   21038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_current->syscall_frame = ssf;
   2103c:	4f19      	ldr	r7, [pc, #100]	; (210a4 <z_mrsh_k_queue_alloc_prepend+0x6c>)
   2103e:	9a08      	ldr	r2, [sp, #32]
   21040:	68bb      	ldr	r3, [r7, #8]
{
   21042:	4605      	mov	r5, r0
	_current->syscall_frame = ssf;
   21044:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
{
   21048:	4688      	mov	r8, r1

#ifdef CONFIG_USERSPACE
static inline int32_t z_vrfy_k_queue_alloc_prepend(struct k_queue *queue,
						   void *data)
{
	Z_OOPS(Z_SYSCALL_OBJ(queue, K_OBJ_QUEUE));
   2104a:	f7df f859 	bl	100 <z_object_find>
   2104e:	2200      	movs	r2, #0
   21050:	4629      	mov	r1, r5
   21052:	f008 fa6d 	bl	29530 <z_obj_validation_check.constprop.0>
   21056:	463e      	mov	r6, r7
   21058:	4604      	mov	r4, r0
   2105a:	b1c8      	cbz	r0, 21090 <z_mrsh_k_queue_alloc_prepend+0x58>
   2105c:	f008 fa5e 	bl	2951c <arch_is_user_context>
   21060:	4b11      	ldr	r3, [pc, #68]	; (210a8 <z_mrsh_k_queue_alloc_prepend+0x70>)
   21062:	4a12      	ldr	r2, [pc, #72]	; (210ac <z_mrsh_k_queue_alloc_prepend+0x74>)
   21064:	1a9b      	subs	r3, r3, r2
   21066:	08db      	lsrs	r3, r3, #3
   21068:	019b      	lsls	r3, r3, #6
   2106a:	f043 0301 	orr.w	r3, r3, #1
   2106e:	b148      	cbz	r0, 21084 <z_mrsh_k_queue_alloc_prepend+0x4c>
   21070:	4a0f      	ldr	r2, [pc, #60]	; (210b0 <z_mrsh_k_queue_alloc_prepend+0x78>)
   21072:	4910      	ldr	r1, [pc, #64]	; (210b4 <z_mrsh_k_queue_alloc_prepend+0x7c>)
   21074:	4618      	mov	r0, r3
   21076:	f003 ff0e 	bl	24e96 <log_from_user>
   2107a:	68b3      	ldr	r3, [r6, #8]
   2107c:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   21080:	f005 fcec 	bl	26a5c <arch_syscall_oops>
   21084:	490a      	ldr	r1, [pc, #40]	; (210b0 <z_mrsh_k_queue_alloc_prepend+0x78>)
   21086:	480b      	ldr	r0, [pc, #44]	; (210b4 <z_mrsh_k_queue_alloc_prepend+0x7c>)
   21088:	461a      	mov	r2, r3
   2108a:	f003 ff37 	bl	24efc <log_1>
   2108e:	e7f4      	b.n	2107a <z_mrsh_k_queue_alloc_prepend+0x42>
	return z_impl_k_queue_alloc_prepend(queue, data);
   21090:	4641      	mov	r1, r8
   21092:	4628      	mov	r0, r5
   21094:	f008 fb19 	bl	296ca <z_impl_k_queue_alloc_prepend>
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	int32_t ret = z_vrfy_k_queue_alloc_prepend(*(struct k_queue **)&arg0, *(void **)&arg1)
;
	_current->syscall_frame = NULL;
   21098:	68bb      	ldr	r3, [r7, #8]
   2109a:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
	return (uintptr_t) ret;
}
   2109e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   210a2:	bf00      	nop
   210a4:	200023f4 	.word	0x200023f4
   210a8:	0002a810 	.word	0x0002a810
   210ac:	0002a6d0 	.word	0x0002a6d0
   210b0:	0002eefe 	.word	0x0002eefe
   210b4:	0002e72d 	.word	0x0002e72d

000210b8 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   210b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   210ba:	4616      	mov	r6, r2
   210bc:	461f      	mov	r7, r3
	__asm__ volatile(
   210be:	f04f 0320 	mov.w	r3, #32
   210c2:	f3ef 8511 	mrs	r5, BASEPRI
   210c6:	f383 8811 	msr	BASEPRI, r3
   210ca:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
   210ce:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   210d0:	b19c      	cbz	r4, 210fa <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   210d2:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   210d4:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   210d6:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   210da:	4294      	cmp	r4, r2
	list->head = node;
   210dc:	6003      	str	r3, [r0, #0]
	list->tail = node;
   210de:	bf08      	it	eq
   210e0:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   210e2:	2101      	movs	r1, #1
   210e4:	4620      	mov	r0, r4
   210e6:	f008 fa97 	bl	29618 <z_queue_node_peek>
   210ea:	4604      	mov	r4, r0
	__asm__ volatile(
   210ec:	f385 8811 	msr	BASEPRI, r5
   210f0:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   210f4:	4620      	mov	r0, r4
   210f6:	b003      	add	sp, #12
   210f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   210fa:	ea56 0307 	orrs.w	r3, r6, r7
   210fe:	d0f5      	beq.n	210ec <z_impl_k_queue_get+0x34>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   21100:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   21104:	e9cd 6700 	strd	r6, r7, [sp]
   21108:	4629      	mov	r1, r5
   2110a:	4610      	mov	r0, r2
   2110c:	f000 f9c8 	bl	214a0 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   21110:	2800      	cmp	r0, #0
   21112:	d1ef      	bne.n	210f4 <z_impl_k_queue_get+0x3c>
   21114:	4b01      	ldr	r3, [pc, #4]	; (2111c <z_impl_k_queue_get+0x64>)
   21116:	689b      	ldr	r3, [r3, #8]
   21118:	695c      	ldr	r4, [r3, #20]
   2111a:	e7eb      	b.n	210f4 <z_impl_k_queue_get+0x3c>
   2111c:	200023f4 	.word	0x200023f4

00021120 <z_mrsh_k_queue_get>:
#include <syscalls/kernel.h>

extern void * z_vrfy_k_queue_get(struct k_queue * queue, k_timeout_t timeout);
uintptr_t z_mrsh_k_queue_get(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   21120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	_current->syscall_frame = ssf;
   21124:	4f1a      	ldr	r7, [pc, #104]	; (21190 <z_mrsh_k_queue_get+0x70>)
   21126:	68bb      	ldr	r3, [r7, #8]
{
   21128:	4690      	mov	r8, r2
	_current->syscall_frame = ssf;
   2112a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2112c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
{
   21130:	4605      	mov	r5, r0
   21132:	4689      	mov	r9, r1

#ifdef CONFIG_USERSPACE
static inline void *z_vrfy_k_queue_get(struct k_queue *queue,
				       k_timeout_t timeout)
{
	Z_OOPS(Z_SYSCALL_OBJ(queue, K_OBJ_QUEUE));
   21134:	f7de ffe4 	bl	100 <z_object_find>
   21138:	2200      	movs	r2, #0
   2113a:	4629      	mov	r1, r5
   2113c:	f008 f9f8 	bl	29530 <z_obj_validation_check.constprop.0>
   21140:	463e      	mov	r6, r7
   21142:	4604      	mov	r4, r0
   21144:	b1c8      	cbz	r0, 2117a <z_mrsh_k_queue_get+0x5a>
   21146:	f008 f9e9 	bl	2951c <arch_is_user_context>
   2114a:	4b12      	ldr	r3, [pc, #72]	; (21194 <z_mrsh_k_queue_get+0x74>)
   2114c:	4a12      	ldr	r2, [pc, #72]	; (21198 <z_mrsh_k_queue_get+0x78>)
   2114e:	1a9b      	subs	r3, r3, r2
   21150:	08db      	lsrs	r3, r3, #3
   21152:	019b      	lsls	r3, r3, #6
   21154:	f043 0301 	orr.w	r3, r3, #1
   21158:	b148      	cbz	r0, 2116e <z_mrsh_k_queue_get+0x4e>
   2115a:	4a10      	ldr	r2, [pc, #64]	; (2119c <z_mrsh_k_queue_get+0x7c>)
   2115c:	4910      	ldr	r1, [pc, #64]	; (211a0 <z_mrsh_k_queue_get+0x80>)
   2115e:	4618      	mov	r0, r3
   21160:	f003 fe99 	bl	24e96 <log_from_user>
   21164:	68b3      	ldr	r3, [r6, #8]
   21166:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   2116a:	f005 fc77 	bl	26a5c <arch_syscall_oops>
   2116e:	490b      	ldr	r1, [pc, #44]	; (2119c <z_mrsh_k_queue_get+0x7c>)
   21170:	480b      	ldr	r0, [pc, #44]	; (211a0 <z_mrsh_k_queue_get+0x80>)
   21172:	461a      	mov	r2, r3
   21174:	f003 fec2 	bl	24efc <log_1>
   21178:	e7f4      	b.n	21164 <z_mrsh_k_queue_get+0x44>
	return z_impl_k_queue_get(queue, timeout);
   2117a:	4643      	mov	r3, r8
   2117c:	464a      	mov	r2, r9
   2117e:	4628      	mov	r0, r5
   21180:	f7ff ff9a 	bl	210b8 <z_impl_k_queue_get>
	union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0;
	parm0.split.lo = arg1;
	parm0.split.hi = arg2;
	void * ret = z_vrfy_k_queue_get(*(struct k_queue **)&arg0, parm0.val)
;
	_current->syscall_frame = NULL;
   21184:	68bb      	ldr	r3, [r7, #8]
   21186:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
	return (uintptr_t) ret;
}
   2118a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2118e:	bf00      	nop
   21190:	200023f4 	.word	0x200023f4
   21194:	0002a810 	.word	0x0002a810
   21198:	0002a6d0 	.word	0x0002a6d0
   2119c:	0002ef1b 	.word	0x0002ef1b
   211a0:	0002e72d 	.word	0x0002e72d

000211a4 <z_mrsh_k_queue_is_empty>:
#include <syscalls/kernel.h>

extern int z_vrfy_k_queue_is_empty(struct k_queue * queue);
uintptr_t z_mrsh_k_queue_is_empty(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   211a4:	b570      	push	{r4, r5, r6, lr}
	_current->syscall_frame = ssf;
   211a6:	4e18      	ldr	r6, [pc, #96]	; (21208 <z_mrsh_k_queue_is_empty+0x64>)
   211a8:	9a06      	ldr	r2, [sp, #24]
   211aa:	68b3      	ldr	r3, [r6, #8]
{
   211ac:	4604      	mov	r4, r0
	_current->syscall_frame = ssf;
   211ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
#include <syscalls/k_queue_get_mrsh.c>

static inline int z_vrfy_k_queue_is_empty(struct k_queue *queue)
{
	Z_OOPS(Z_SYSCALL_OBJ(queue, K_OBJ_QUEUE));
   211b2:	f7de ffa5 	bl	100 <z_object_find>
   211b6:	2200      	movs	r2, #0
   211b8:	4621      	mov	r1, r4
   211ba:	f008 f9b9 	bl	29530 <z_obj_validation_check.constprop.0>
   211be:	4635      	mov	r5, r6
   211c0:	b1c8      	cbz	r0, 211f6 <z_mrsh_k_queue_is_empty+0x52>
   211c2:	f008 f9ab 	bl	2951c <arch_is_user_context>
   211c6:	4b11      	ldr	r3, [pc, #68]	; (2120c <z_mrsh_k_queue_is_empty+0x68>)
   211c8:	4a11      	ldr	r2, [pc, #68]	; (21210 <z_mrsh_k_queue_is_empty+0x6c>)
   211ca:	1a9b      	subs	r3, r3, r2
   211cc:	08db      	lsrs	r3, r3, #3
   211ce:	019b      	lsls	r3, r3, #6
   211d0:	f043 0301 	orr.w	r3, r3, #1
   211d4:	b148      	cbz	r0, 211ea <z_mrsh_k_queue_is_empty+0x46>
   211d6:	4a0f      	ldr	r2, [pc, #60]	; (21214 <z_mrsh_k_queue_is_empty+0x70>)
   211d8:	490f      	ldr	r1, [pc, #60]	; (21218 <z_mrsh_k_queue_is_empty+0x74>)
   211da:	4618      	mov	r0, r3
   211dc:	f003 fe5b 	bl	24e96 <log_from_user>
   211e0:	68ab      	ldr	r3, [r5, #8]
   211e2:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   211e6:	f005 fc39 	bl	26a5c <arch_syscall_oops>
   211ea:	490a      	ldr	r1, [pc, #40]	; (21214 <z_mrsh_k_queue_is_empty+0x70>)
   211ec:	480a      	ldr	r0, [pc, #40]	; (21218 <z_mrsh_k_queue_is_empty+0x74>)
   211ee:	461a      	mov	r2, r3
   211f0:	f003 fe84 	bl	24efc <log_1>
   211f4:	e7f4      	b.n	211e0 <z_mrsh_k_queue_is_empty+0x3c>
Z_GENLIST_IS_EMPTY(sflist)
   211f6:	6823      	ldr	r3, [r4, #0]
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	int ret = z_vrfy_k_queue_is_empty(*(struct k_queue **)&arg0)
;
	_current->syscall_frame = NULL;
   211f8:	68b2      	ldr	r2, [r6, #8]
   211fa:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
	return (uintptr_t) ret;
}
   211fe:	fab3 f083 	clz	r0, r3
   21202:	0940      	lsrs	r0, r0, #5
   21204:	bd70      	pop	{r4, r5, r6, pc}
   21206:	bf00      	nop
   21208:	200023f4 	.word	0x200023f4
   2120c:	0002a810 	.word	0x0002a810
   21210:	0002a6d0 	.word	0x0002a6d0
   21214:	0002ef2e 	.word	0x0002ef2e
   21218:	0002e72d 	.word	0x0002e72d

0002121c <z_mrsh_k_queue_peek_head>:
#include <syscalls/kernel.h>

extern void * z_vrfy_k_queue_peek_head(struct k_queue * queue);
uintptr_t z_mrsh_k_queue_peek_head(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   2121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	_current->syscall_frame = ssf;
   2121e:	4f18      	ldr	r7, [pc, #96]	; (21280 <z_mrsh_k_queue_peek_head+0x64>)
   21220:	9a08      	ldr	r2, [sp, #32]
   21222:	68bb      	ldr	r3, [r7, #8]
{
   21224:	4605      	mov	r5, r0
	_current->syscall_frame = ssf;
   21226:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
#include <syscalls/k_queue_is_empty_mrsh.c>

static inline void *z_vrfy_k_queue_peek_head(struct k_queue *queue)
{
	Z_OOPS(Z_SYSCALL_OBJ(queue, K_OBJ_QUEUE));
   2122a:	f7de ff69 	bl	100 <z_object_find>
   2122e:	2200      	movs	r2, #0
   21230:	4629      	mov	r1, r5
   21232:	f008 f97d 	bl	29530 <z_obj_validation_check.constprop.0>
   21236:	463e      	mov	r6, r7
   21238:	4604      	mov	r4, r0
   2123a:	b1c8      	cbz	r0, 21270 <z_mrsh_k_queue_peek_head+0x54>
   2123c:	f008 f96e 	bl	2951c <arch_is_user_context>
   21240:	4b10      	ldr	r3, [pc, #64]	; (21284 <z_mrsh_k_queue_peek_head+0x68>)
   21242:	4a11      	ldr	r2, [pc, #68]	; (21288 <z_mrsh_k_queue_peek_head+0x6c>)
   21244:	1a9b      	subs	r3, r3, r2
   21246:	08db      	lsrs	r3, r3, #3
   21248:	019b      	lsls	r3, r3, #6
   2124a:	f043 0301 	orr.w	r3, r3, #1
   2124e:	b148      	cbz	r0, 21264 <z_mrsh_k_queue_peek_head+0x48>
   21250:	4a0e      	ldr	r2, [pc, #56]	; (2128c <z_mrsh_k_queue_peek_head+0x70>)
   21252:	490f      	ldr	r1, [pc, #60]	; (21290 <z_mrsh_k_queue_peek_head+0x74>)
   21254:	4618      	mov	r0, r3
   21256:	f003 fe1e 	bl	24e96 <log_from_user>
   2125a:	68b3      	ldr	r3, [r6, #8]
   2125c:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   21260:	f005 fbfc 	bl	26a5c <arch_syscall_oops>
   21264:	4909      	ldr	r1, [pc, #36]	; (2128c <z_mrsh_k_queue_peek_head+0x70>)
   21266:	480a      	ldr	r0, [pc, #40]	; (21290 <z_mrsh_k_queue_peek_head+0x74>)
   21268:	461a      	mov	r2, r3
   2126a:	f003 fe47 	bl	24efc <log_1>
   2126e:	e7f4      	b.n	2125a <z_mrsh_k_queue_peek_head+0x3e>
	return z_queue_node_peek(sys_sflist_peek_head(&queue->data_q), false);
   21270:	4601      	mov	r1, r0
   21272:	6828      	ldr	r0, [r5, #0]
   21274:	f008 f9d0 	bl	29618 <z_queue_node_peek>
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	void * ret = z_vrfy_k_queue_peek_head(*(struct k_queue **)&arg0)
;
	_current->syscall_frame = NULL;
   21278:	68bb      	ldr	r3, [r7, #8]
   2127a:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
	return (uintptr_t) ret;
}
   2127e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21280:	200023f4 	.word	0x200023f4
   21284:	0002a810 	.word	0x0002a810
   21288:	0002a6d0 	.word	0x0002a6d0
   2128c:	0002ef46 	.word	0x0002ef46
   21290:	0002e72d 	.word	0x0002e72d

00021294 <z_mrsh_k_queue_peek_tail>:
#include <syscalls/kernel.h>

extern void * z_vrfy_k_queue_peek_tail(struct k_queue * queue);
uintptr_t z_mrsh_k_queue_peek_tail(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   21294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	_current->syscall_frame = ssf;
   21296:	4f18      	ldr	r7, [pc, #96]	; (212f8 <z_mrsh_k_queue_peek_tail+0x64>)
   21298:	9a08      	ldr	r2, [sp, #32]
   2129a:	68bb      	ldr	r3, [r7, #8]
{
   2129c:	4605      	mov	r5, r0
	_current->syscall_frame = ssf;
   2129e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
#include <syscalls/k_queue_peek_head_mrsh.c>

static inline void *z_vrfy_k_queue_peek_tail(struct k_queue *queue)
{
	Z_OOPS(Z_SYSCALL_OBJ(queue, K_OBJ_QUEUE));
   212a2:	f7de ff2d 	bl	100 <z_object_find>
   212a6:	2200      	movs	r2, #0
   212a8:	4629      	mov	r1, r5
   212aa:	f008 f941 	bl	29530 <z_obj_validation_check.constprop.0>
   212ae:	463e      	mov	r6, r7
   212b0:	4604      	mov	r4, r0
   212b2:	b1c8      	cbz	r0, 212e8 <z_mrsh_k_queue_peek_tail+0x54>
   212b4:	f008 f932 	bl	2951c <arch_is_user_context>
   212b8:	4b10      	ldr	r3, [pc, #64]	; (212fc <z_mrsh_k_queue_peek_tail+0x68>)
   212ba:	4a11      	ldr	r2, [pc, #68]	; (21300 <z_mrsh_k_queue_peek_tail+0x6c>)
   212bc:	1a9b      	subs	r3, r3, r2
   212be:	08db      	lsrs	r3, r3, #3
   212c0:	019b      	lsls	r3, r3, #6
   212c2:	f043 0301 	orr.w	r3, r3, #1
   212c6:	b148      	cbz	r0, 212dc <z_mrsh_k_queue_peek_tail+0x48>
   212c8:	4a0e      	ldr	r2, [pc, #56]	; (21304 <z_mrsh_k_queue_peek_tail+0x70>)
   212ca:	490f      	ldr	r1, [pc, #60]	; (21308 <z_mrsh_k_queue_peek_tail+0x74>)
   212cc:	4618      	mov	r0, r3
   212ce:	f003 fde2 	bl	24e96 <log_from_user>
   212d2:	68b3      	ldr	r3, [r6, #8]
   212d4:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   212d8:	f005 fbc0 	bl	26a5c <arch_syscall_oops>
   212dc:	4909      	ldr	r1, [pc, #36]	; (21304 <z_mrsh_k_queue_peek_tail+0x70>)
   212de:	480a      	ldr	r0, [pc, #40]	; (21308 <z_mrsh_k_queue_peek_tail+0x74>)
   212e0:	461a      	mov	r2, r3
   212e2:	f003 fe0b 	bl	24efc <log_1>
   212e6:	e7f4      	b.n	212d2 <z_mrsh_k_queue_peek_tail+0x3e>
	return z_queue_node_peek(sys_sflist_peek_tail(&queue->data_q), false);
   212e8:	4601      	mov	r1, r0
   212ea:	6868      	ldr	r0, [r5, #4]
   212ec:	f008 f994 	bl	29618 <z_queue_node_peek>
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	void * ret = z_vrfy_k_queue_peek_tail(*(struct k_queue **)&arg0)
;
	_current->syscall_frame = NULL;
   212f0:	68bb      	ldr	r3, [r7, #8]
   212f2:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
	return (uintptr_t) ret;
}
   212f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   212f8:	200023f4 	.word	0x200023f4
   212fc:	0002a810 	.word	0x0002a810
   21300:	0002a6d0 	.word	0x0002a6d0
   21304:	0002ef5f 	.word	0x0002ef5f
   21308:	0002e72d 	.word	0x0002e72d

0002130c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   2130c:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   2130e:	4c08      	ldr	r4, [pc, #32]	; (21330 <z_reset_time_slice+0x24>)
   21310:	6823      	ldr	r3, [r4, #0]
   21312:	b15b      	cbz	r3, 2132c <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   21314:	f7e4 fb5c 	bl	59d0 <sys_clock_elapsed>
   21318:	4603      	mov	r3, r0
   2131a:	6820      	ldr	r0, [r4, #0]
   2131c:	4a05      	ldr	r2, [pc, #20]	; (21334 <z_reset_time_slice+0x28>)
   2131e:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   21320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   21324:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   21326:	2100      	movs	r1, #0
   21328:	f008 bcee 	b.w	29d08 <z_set_timeout_expiry>
}
   2132c:	bd10      	pop	{r4, pc}
   2132e:	bf00      	nop
   21330:	2000242c 	.word	0x2000242c
   21334:	200023f4 	.word	0x200023f4

00021338 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   21338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2133a:	4604      	mov	r4, r0
   2133c:	460d      	mov	r5, r1
	__asm__ volatile(
   2133e:	f04f 0320 	mov.w	r3, #32
   21342:	f3ef 8611 	mrs	r6, BASEPRI
   21346:	f383 8811 	msr	BASEPRI, r3
   2134a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   2134e:	4b10      	ldr	r3, [pc, #64]	; (21390 <k_sched_time_slice_set+0x58>)
   21350:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   21352:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   21356:	f240 30e7 	movw	r0, #999	; 0x3e7
   2135a:	2100      	movs	r1, #0
   2135c:	611a      	str	r2, [r3, #16]
   2135e:	fbe7 0104 	umlal	r0, r1, r7, r4
   21362:	2300      	movs	r3, #0
   21364:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   21368:	f7df fbe8 	bl	b3c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   2136c:	2c00      	cmp	r4, #0
   2136e:	4b09      	ldr	r3, [pc, #36]	; (21394 <k_sched_time_slice_set+0x5c>)
   21370:	dc09      	bgt.n	21386 <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   21372:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   21374:	4b08      	ldr	r3, [pc, #32]	; (21398 <k_sched_time_slice_set+0x60>)
   21376:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   21378:	f7ff ffc8 	bl	2130c <z_reset_time_slice>
	__asm__ volatile(
   2137c:	f386 8811 	msr	BASEPRI, r6
   21380:	f3bf 8f6f 	isb	sy
	}
}
   21384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   21386:	2802      	cmp	r0, #2
   21388:	bfb8      	it	lt
   2138a:	2002      	movlt	r0, #2
   2138c:	e7f1      	b.n	21372 <k_sched_time_slice_set+0x3a>
   2138e:	bf00      	nop
   21390:	200023f4 	.word	0x200023f4
   21394:	2000242c 	.word	0x2000242c
   21398:	20002428 	.word	0x20002428

0002139c <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2139c:	b949      	cbnz	r1, 213b2 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2139e:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   213a2:	b930      	cbnz	r0, 213b2 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   213a4:	4b05      	ldr	r3, [pc, #20]	; (213bc <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   213a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   213a8:	689b      	ldr	r3, [r3, #8]
   213aa:	429a      	cmp	r2, r3
   213ac:	d001      	beq.n	213b2 <z_reschedule+0x16>
	ret = arch_swap(key);
   213ae:	f7e4 bd8f 	b.w	5ed0 <arch_swap>
   213b2:	f381 8811 	msr	BASEPRI, r1
   213b6:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   213ba:	4770      	bx	lr
   213bc:	200023f4 	.word	0x200023f4

000213c0 <k_sched_lock>:
	__asm__ volatile(
   213c0:	f04f 0320 	mov.w	r3, #32
   213c4:	f3ef 8111 	mrs	r1, BASEPRI
   213c8:	f383 8811 	msr	BASEPRI, r3
   213cc:	f3bf 8f6f 	isb	sy
   213d0:	4b04      	ldr	r3, [pc, #16]	; (213e4 <k_sched_lock+0x24>)
   213d2:	689a      	ldr	r2, [r3, #8]
   213d4:	7bd3      	ldrb	r3, [r2, #15]
   213d6:	3b01      	subs	r3, #1
   213d8:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   213da:	f381 8811 	msr	BASEPRI, r1
   213de:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   213e2:	4770      	bx	lr
   213e4:	200023f4 	.word	0x200023f4

000213e8 <update_cache>:
{
   213e8:	b538      	push	{r3, r4, r5, lr}
	thread = _priq_run_best(&_kernel.ready_q.runq);
   213ea:	4c0d      	ldr	r4, [pc, #52]	; (21420 <update_cache+0x38>)
{
   213ec:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
   213ee:	f104 0028 	add.w	r0, r4, #40	; 0x28
   213f2:	f008 fa33 	bl	2985c <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   213f6:	4605      	mov	r5, r0
   213f8:	b900      	cbnz	r0, 213fc <update_cache+0x14>
   213fa:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   213fc:	68a3      	ldr	r3, [r4, #8]
   213fe:	b94a      	cbnz	r2, 21414 <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
   21400:	7b5a      	ldrb	r2, [r3, #13]
   21402:	06d2      	lsls	r2, r2, #27
   21404:	d106      	bne.n	21414 <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   21406:	69aa      	ldr	r2, [r5, #24]
   21408:	b922      	cbnz	r2, 21414 <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(thread)) {
   2140a:	89da      	ldrh	r2, [r3, #14]
   2140c:	2a7f      	cmp	r2, #127	; 0x7f
   2140e:	d901      	bls.n	21414 <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
   21410:	6263      	str	r3, [r4, #36]	; 0x24
}
   21412:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   21414:	429d      	cmp	r5, r3
   21416:	d001      	beq.n	2141c <update_cache+0x34>
			z_reset_time_slice();
   21418:	f7ff ff78 	bl	2130c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   2141c:	6265      	str	r5, [r4, #36]	; 0x24
}
   2141e:	e7f8      	b.n	21412 <update_cache+0x2a>
   21420:	200023f4 	.word	0x200023f4

00021424 <unready_thread>:
{
   21424:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   21426:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   2142a:	7b43      	ldrb	r3, [r0, #13]
   2142c:	2a00      	cmp	r2, #0
{
   2142e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   21430:	da04      	bge.n	2143c <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21432:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   21436:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   21438:	f008 f98d 	bl	29756 <sys_dlist_remove>
	update_cache(thread == _current);
   2143c:	4b04      	ldr	r3, [pc, #16]	; (21450 <unready_thread+0x2c>)
   2143e:	6898      	ldr	r0, [r3, #8]
   21440:	1a43      	subs	r3, r0, r1
   21442:	4258      	negs	r0, r3
   21444:	4158      	adcs	r0, r3
}
   21446:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   2144a:	f7ff bfcd 	b.w	213e8 <update_cache>
   2144e:	bf00      	nop
   21450:	200023f4 	.word	0x200023f4

00021454 <pend>:
{
   21454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21458:	4606      	mov	r6, r0
   2145a:	4614      	mov	r4, r2
   2145c:	461d      	mov	r5, r3
	__asm__ volatile(
   2145e:	f04f 0320 	mov.w	r3, #32
   21462:	f3ef 8711 	mrs	r7, BASEPRI
   21466:	f383 8811 	msr	BASEPRI, r3
   2146a:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   2146e:	f008 f9ff 	bl	29870 <add_to_waitq_locked>
	__asm__ volatile(
   21472:	f387 8811 	msr	BASEPRI, r7
   21476:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2147a:	1c6b      	adds	r3, r5, #1
   2147c:	bf08      	it	eq
   2147e:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
   21482:	d008      	beq.n	21496 <pend+0x42>

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   21484:	4622      	mov	r2, r4
   21486:	462b      	mov	r3, r5
   21488:	f106 0018 	add.w	r0, r6, #24
   2148c:	4903      	ldr	r1, [pc, #12]	; (2149c <pend+0x48>)
}
   2148e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21492:	f001 bcb7 	b.w	22e04 <z_add_timeout>
   21496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2149a:	bf00      	nop
   2149c:	000298eb 	.word	0x000298eb

000214a0 <z_pend_curr>:
{
   214a0:	b510      	push	{r4, lr}
	pending_current = _current;
   214a2:	4b07      	ldr	r3, [pc, #28]	; (214c0 <z_pend_curr+0x20>)
   214a4:	6898      	ldr	r0, [r3, #8]
   214a6:	4b07      	ldr	r3, [pc, #28]	; (214c4 <z_pend_curr+0x24>)
{
   214a8:	460c      	mov	r4, r1
	pending_current = _current;
   214aa:	6018      	str	r0, [r3, #0]
{
   214ac:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   214ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   214b2:	f7ff ffcf 	bl	21454 <pend>
   214b6:	4620      	mov	r0, r4
}
   214b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   214bc:	f7e4 bd08 	b.w	5ed0 <arch_swap>
   214c0:	200023f4 	.word	0x200023f4
   214c4:	20002424 	.word	0x20002424

000214c8 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
   214c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   214cc:	4605      	mov	r5, r0
   214ce:	460f      	mov	r7, r1
		return 0;
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);

	expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   214d0:	f008 fc34 	bl	29d3c <sys_clock_tick_get_32>
   214d4:	4604      	mov	r4, r0
	__asm__ volatile(
   214d6:	f04f 0320 	mov.w	r3, #32
   214da:	f3ef 8811 	mrs	r8, BASEPRI
   214de:	f383 8811 	msr	BASEPRI, r3
   214e2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   214e6:	4e12      	ldr	r6, [pc, #72]	; (21530 <z_tick_sleep.part.0+0x68>)
   214e8:	4b12      	ldr	r3, [pc, #72]	; (21534 <z_tick_sleep.part.0+0x6c>)
   214ea:	68b0      	ldr	r0, [r6, #8]
   214ec:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   214ee:	f7ff ff99 	bl	21424 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   214f2:	68b0      	ldr	r0, [r6, #8]
   214f4:	4910      	ldr	r1, [pc, #64]	; (21538 <z_tick_sleep.part.0+0x70>)
   214f6:	462a      	mov	r2, r5
   214f8:	463b      	mov	r3, r7
   214fa:	3018      	adds	r0, #24
   214fc:	f001 fc82 	bl	22e04 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   21500:	68b2      	ldr	r2, [r6, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   21502:	7b53      	ldrb	r3, [r2, #13]
   21504:	f043 0310 	orr.w	r3, r3, #16
   21508:	7353      	strb	r3, [r2, #13]
   2150a:	4640      	mov	r0, r8
   2150c:	f7e4 fce0 	bl	5ed0 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   21510:	f008 fc14 	bl	29d3c <sys_clock_tick_get_32>
	expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   21514:	442c      	add	r4, r5
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   21516:	1a24      	subs	r4, r4, r0
   21518:	f04f 0500 	mov.w	r5, #0
   2151c:	f165 0500 	sbc.w	r5, r5, #0
   21520:	2c00      	cmp	r4, #0
   21522:	f175 0300 	sbcs.w	r3, r5, #0
   21526:	bfb8      	it	lt
   21528:	2400      	movlt	r4, #0
		return ticks;
	}
#endif

	return 0;
}
   2152a:	4620      	mov	r0, r4
   2152c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21530:	200023f4 	.word	0x200023f4
   21534:	20002424 	.word	0x20002424
   21538:	000298eb 	.word	0x000298eb

0002153c <z_impl_k_thread_suspend>:
{
   2153c:	b570      	push	{r4, r5, r6, lr}
   2153e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   21540:	3018      	adds	r0, #24
   21542:	f008 fbab 	bl	29c9c <z_abort_timeout>
   21546:	f04f 0320 	mov.w	r3, #32
   2154a:	f3ef 8611 	mrs	r6, BASEPRI
   2154e:	f383 8811 	msr	BASEPRI, r3
   21552:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   21556:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   2155a:	7b63      	ldrb	r3, [r4, #13]
   2155c:	2a00      	cmp	r2, #0
   2155e:	da05      	bge.n	2156c <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21560:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   21564:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   21566:	4620      	mov	r0, r4
   21568:	f008 f8f5 	bl	29756 <sys_dlist_remove>
		update_cache(thread == _current);
   2156c:	4d0b      	ldr	r5, [pc, #44]	; (2159c <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2156e:	7b63      	ldrb	r3, [r4, #13]
   21570:	68a8      	ldr	r0, [r5, #8]
   21572:	f043 0310 	orr.w	r3, r3, #16
   21576:	7363      	strb	r3, [r4, #13]
   21578:	1b03      	subs	r3, r0, r4
   2157a:	4258      	negs	r0, r3
   2157c:	4158      	adcs	r0, r3
   2157e:	f7ff ff33 	bl	213e8 <update_cache>
	__asm__ volatile(
   21582:	f386 8811 	msr	BASEPRI, r6
   21586:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   2158a:	68ab      	ldr	r3, [r5, #8]
   2158c:	42a3      	cmp	r3, r4
   2158e:	d103      	bne.n	21598 <z_impl_k_thread_suspend+0x5c>
}
   21590:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   21594:	f008 b958 	b.w	29848 <z_reschedule_unlocked>
}
   21598:	bd70      	pop	{r4, r5, r6, pc}
   2159a:	bf00      	nop
   2159c:	200023f4 	.word	0x200023f4

000215a0 <z_mrsh_k_thread_suspend>:
#include <syscalls/kernel.h>

extern void z_vrfy_k_thread_suspend(k_tid_t thread);
uintptr_t z_mrsh_k_thread_suspend(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   215a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	_current->syscall_frame = ssf;
   215a2:	4f18      	ldr	r7, [pc, #96]	; (21604 <z_mrsh_k_thread_suspend+0x64>)
   215a4:	9a08      	ldr	r2, [sp, #32]
   215a6:	68bb      	ldr	r3, [r7, #8]
{
   215a8:	4605      	mov	r5, r0
	_current->syscall_frame = ssf;
   215aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	Z_OOPS(Z_SYSCALL_OBJ(thread, K_OBJ_THREAD));
   215ae:	f7de fda7 	bl	100 <z_object_find>
   215b2:	4629      	mov	r1, r5
   215b4:	f008 f8ff 	bl	297b6 <z_obj_validation_check.constprop.0>
   215b8:	463e      	mov	r6, r7
   215ba:	4604      	mov	r4, r0
   215bc:	b1c8      	cbz	r0, 215f2 <z_mrsh_k_thread_suspend+0x52>
   215be:	f008 f8d2 	bl	29766 <arch_is_user_context>
   215c2:	4b11      	ldr	r3, [pc, #68]	; (21608 <z_mrsh_k_thread_suspend+0x68>)
   215c4:	4a11      	ldr	r2, [pc, #68]	; (2160c <z_mrsh_k_thread_suspend+0x6c>)
   215c6:	1a9b      	subs	r3, r3, r2
   215c8:	08db      	lsrs	r3, r3, #3
   215ca:	019b      	lsls	r3, r3, #6
   215cc:	f043 0301 	orr.w	r3, r3, #1
   215d0:	b148      	cbz	r0, 215e6 <z_mrsh_k_thread_suspend+0x46>
   215d2:	4a0f      	ldr	r2, [pc, #60]	; (21610 <z_mrsh_k_thread_suspend+0x70>)
   215d4:	490f      	ldr	r1, [pc, #60]	; (21614 <z_mrsh_k_thread_suspend+0x74>)
   215d6:	4618      	mov	r0, r3
   215d8:	f003 fc5d 	bl	24e96 <log_from_user>
   215dc:	68b3      	ldr	r3, [r6, #8]
   215de:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   215e2:	f005 fa3b 	bl	26a5c <arch_syscall_oops>
   215e6:	490a      	ldr	r1, [pc, #40]	; (21610 <z_mrsh_k_thread_suspend+0x70>)
   215e8:	480a      	ldr	r0, [pc, #40]	; (21614 <z_mrsh_k_thread_suspend+0x74>)
   215ea:	461a      	mov	r2, r3
   215ec:	f003 fc86 	bl	24efc <log_1>
   215f0:	e7f4      	b.n	215dc <z_mrsh_k_thread_suspend+0x3c>
	z_impl_k_thread_suspend(thread);
   215f2:	4628      	mov	r0, r5
   215f4:	f7ff ffa2 	bl	2153c <z_impl_k_thread_suspend>
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	z_vrfy_k_thread_suspend(*(k_tid_t*)&arg0)
;
	_current->syscall_frame = NULL;
   215f8:	68bb      	ldr	r3, [r7, #8]
	return 0;
}
   215fa:	4620      	mov	r0, r4
	_current->syscall_frame = NULL;
   215fc:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
}
   21600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21602:	bf00      	nop
   21604:	200023f4 	.word	0x200023f4
   21608:	0002a810 	.word	0x0002a810
   2160c:	0002a6d0 	.word	0x0002a6d0
   21610:	0002f02c 	.word	0x0002f02c
   21614:	0002e72d 	.word	0x0002e72d

00021618 <k_sched_unlock>:
{
   21618:	b510      	push	{r4, lr}
	__asm__ volatile(
   2161a:	f04f 0320 	mov.w	r3, #32
   2161e:	f3ef 8411 	mrs	r4, BASEPRI
   21622:	f383 8811 	msr	BASEPRI, r3
   21626:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   2162a:	4b08      	ldr	r3, [pc, #32]	; (2164c <k_sched_unlock+0x34>)
   2162c:	689a      	ldr	r2, [r3, #8]
   2162e:	7bd3      	ldrb	r3, [r2, #15]
   21630:	3301      	adds	r3, #1
   21632:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   21634:	2000      	movs	r0, #0
   21636:	f7ff fed7 	bl	213e8 <update_cache>
	__asm__ volatile(
   2163a:	f384 8811 	msr	BASEPRI, r4
   2163e:	f3bf 8f6f 	isb	sy
}
   21642:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   21646:	f008 b8ff 	b.w	29848 <z_reschedule_unlocked>
   2164a:	bf00      	nop
   2164c:	200023f4 	.word	0x200023f4

00021650 <move_thread_to_end_of_prio_q>:
{
   21650:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   21652:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   21656:	7b43      	ldrb	r3, [r0, #13]
   21658:	2a00      	cmp	r2, #0
{
   2165a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   2165c:	da04      	bge.n	21668 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2165e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   21662:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   21664:	f008 f877 	bl	29756 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   21668:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   2166a:	4a17      	ldr	r2, [pc, #92]	; (216c8 <move_thread_to_end_of_prio_q+0x78>)
   2166c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   21670:	4610      	mov	r0, r2
   21672:	734b      	strb	r3, [r1, #13]
   21674:	f850 3f28 	ldr.w	r3, [r0, #40]!
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   21678:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2167a:	4283      	cmp	r3, r0
   2167c:	bf08      	it	eq
   2167e:	2300      	moveq	r3, #0
   21680:	2b00      	cmp	r3, #0
   21682:	bf38      	it	cc
   21684:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21686:	b1cb      	cbz	r3, 216bc <move_thread_to_end_of_prio_q+0x6c>
	int32_t b1 = thread_1->base.prio;
   21688:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   2168c:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
   21690:	42a6      	cmp	r6, r4
   21692:	d00f      	beq.n	216b4 <move_thread_to_end_of_prio_q+0x64>
		return b2 - b1;
   21694:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   21696:	2c00      	cmp	r4, #0
   21698:	dd0c      	ble.n	216b4 <move_thread_to_end_of_prio_q+0x64>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   2169a:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   2169c:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   216a0:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   216a2:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   216a4:	6890      	ldr	r0, [r2, #8]
   216a6:	1a43      	subs	r3, r0, r1
   216a8:	4258      	negs	r0, r3
}
   216aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   216ae:	4158      	adcs	r0, r3
   216b0:	f7ff be9a 	b.w	213e8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   216b4:	42ab      	cmp	r3, r5
   216b6:	d001      	beq.n	216bc <move_thread_to_end_of_prio_q+0x6c>
   216b8:	681b      	ldr	r3, [r3, #0]
   216ba:	e7e4      	b.n	21686 <move_thread_to_end_of_prio_q+0x36>
	node->prev = tail;
   216bc:	e9c1 0500 	strd	r0, r5, [r1]
	tail->next = node;
   216c0:	6029      	str	r1, [r5, #0]
	list->tail = node;
   216c2:	62d1      	str	r1, [r2, #44]	; 0x2c
}
   216c4:	e7ee      	b.n	216a4 <move_thread_to_end_of_prio_q+0x54>
   216c6:	bf00      	nop
   216c8:	200023f4 	.word	0x200023f4

000216cc <z_time_slice>:
{
   216cc:	b570      	push	{r4, r5, r6, lr}
   216ce:	4601      	mov	r1, r0
	__asm__ volatile(
   216d0:	f04f 0320 	mov.w	r3, #32
   216d4:	f3ef 8411 	mrs	r4, BASEPRI
   216d8:	f383 8811 	msr	BASEPRI, r3
   216dc:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   216e0:	4b16      	ldr	r3, [pc, #88]	; (2173c <z_time_slice+0x70>)
   216e2:	4a17      	ldr	r2, [pc, #92]	; (21740 <z_time_slice+0x74>)
   216e4:	6898      	ldr	r0, [r3, #8]
   216e6:	6815      	ldr	r5, [r2, #0]
   216e8:	42a8      	cmp	r0, r5
   216ea:	461d      	mov	r5, r3
   216ec:	d106      	bne.n	216fc <z_time_slice+0x30>
			z_reset_time_slice();
   216ee:	f7ff fe0d 	bl	2130c <z_reset_time_slice>
	__asm__ volatile(
   216f2:	f384 8811 	msr	BASEPRI, r4
   216f6:	f3bf 8f6f 	isb	sy
}
   216fa:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   216fc:	2600      	movs	r6, #0
   216fe:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   21700:	4a10      	ldr	r2, [pc, #64]	; (21744 <z_time_slice+0x78>)
   21702:	6812      	ldr	r2, [r2, #0]
   21704:	b1ba      	cbz	r2, 21736 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   21706:	89c2      	ldrh	r2, [r0, #14]
   21708:	2a7f      	cmp	r2, #127	; 0x7f
   2170a:	d814      	bhi.n	21736 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   2170c:	7b42      	ldrb	r2, [r0, #13]
   2170e:	06d2      	lsls	r2, r2, #27
   21710:	d111      	bne.n	21736 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   21712:	4a0d      	ldr	r2, [pc, #52]	; (21748 <z_time_slice+0x7c>)
   21714:	f990 600e 	ldrsb.w	r6, [r0, #14]
   21718:	6812      	ldr	r2, [r2, #0]
   2171a:	4296      	cmp	r6, r2
   2171c:	db0b      	blt.n	21736 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   2171e:	4a0b      	ldr	r2, [pc, #44]	; (2174c <z_time_slice+0x80>)
   21720:	4290      	cmp	r0, r2
   21722:	d008      	beq.n	21736 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   21724:	691a      	ldr	r2, [r3, #16]
   21726:	428a      	cmp	r2, r1
   21728:	dc02      	bgt.n	21730 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
   2172a:	f7ff ff91 	bl	21650 <move_thread_to_end_of_prio_q>
   2172e:	e7de      	b.n	216ee <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
   21730:	1a52      	subs	r2, r2, r1
   21732:	611a      	str	r2, [r3, #16]
   21734:	e7dd      	b.n	216f2 <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
   21736:	2300      	movs	r3, #0
   21738:	612b      	str	r3, [r5, #16]
   2173a:	e7da      	b.n	216f2 <z_time_slice+0x26>
   2173c:	200023f4 	.word	0x200023f4
   21740:	20002424 	.word	0x20002424
   21744:	2000242c 	.word	0x2000242c
   21748:	20002428 	.word	0x20002428
   2174c:	20000980 	.word	0x20000980

00021750 <ready_thread>:
{
   21750:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   21752:	f990 300d 	ldrsb.w	r3, [r0, #13]
   21756:	7b42      	ldrb	r2, [r0, #13]
   21758:	2b00      	cmp	r3, #0
   2175a:	db2d      	blt.n	217b8 <ready_thread+0x68>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2175c:	06d3      	lsls	r3, r2, #27
   2175e:	d12b      	bne.n	217b8 <ready_thread+0x68>
	return !sys_dnode_is_linked(&to->node);
   21760:	6983      	ldr	r3, [r0, #24]
   21762:	bb4b      	cbnz	r3, 217b8 <ready_thread+0x68>
	return list->head == list;
   21764:	4915      	ldr	r1, [pc, #84]	; (217bc <ready_thread+0x6c>)
	thread->base.thread_state |= _THREAD_QUEUED;
   21766:	f062 027f 	orn	r2, r2, #127	; 0x7f
   2176a:	7342      	strb	r2, [r0, #13]
   2176c:	460a      	mov	r2, r1
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2176e:	6acd      	ldr	r5, [r1, #44]	; 0x2c
	return list->head == list;
   21770:	f852 4f28 	ldr.w	r4, [r2, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21774:	4294      	cmp	r4, r2
   21776:	bf18      	it	ne
   21778:	4623      	movne	r3, r4
   2177a:	2b00      	cmp	r3, #0
   2177c:	bf38      	it	cc
   2177e:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21780:	b1ab      	cbz	r3, 217ae <ready_thread+0x5e>
	int32_t b1 = thread_1->base.prio;
   21782:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   21786:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
   2178a:	42a6      	cmp	r6, r4
   2178c:	d00b      	beq.n	217a6 <ready_thread+0x56>
		return b2 - b1;
   2178e:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   21790:	2c00      	cmp	r4, #0
   21792:	dd08      	ble.n	217a6 <ready_thread+0x56>
	sys_dnode_t *const prev = successor->prev;
   21794:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   21796:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   2179a:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   2179c:	6058      	str	r0, [r3, #4]
}
   2179e:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   217a0:	2000      	movs	r0, #0
   217a2:	f7ff be21 	b.w	213e8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   217a6:	42ab      	cmp	r3, r5
   217a8:	d001      	beq.n	217ae <ready_thread+0x5e>
   217aa:	681b      	ldr	r3, [r3, #0]
   217ac:	e7e8      	b.n	21780 <ready_thread+0x30>
	node->prev = tail;
   217ae:	e9c0 2500 	strd	r2, r5, [r0]
	tail->next = node;
   217b2:	6028      	str	r0, [r5, #0]
	list->tail = node;
   217b4:	62c8      	str	r0, [r1, #44]	; 0x2c
}
   217b6:	e7f2      	b.n	2179e <ready_thread+0x4e>
}
   217b8:	bc70      	pop	{r4, r5, r6}
   217ba:	4770      	bx	lr
   217bc:	200023f4 	.word	0x200023f4

000217c0 <z_sched_start>:
{
   217c0:	b510      	push	{r4, lr}
	__asm__ volatile(
   217c2:	f04f 0220 	mov.w	r2, #32
   217c6:	f3ef 8411 	mrs	r4, BASEPRI
   217ca:	f382 8811 	msr	BASEPRI, r2
   217ce:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   217d2:	7b42      	ldrb	r2, [r0, #13]
   217d4:	0751      	lsls	r1, r2, #29
   217d6:	d404      	bmi.n	217e2 <z_sched_start+0x22>
	__asm__ volatile(
   217d8:	f384 8811 	msr	BASEPRI, r4
   217dc:	f3bf 8f6f 	isb	sy
}
   217e0:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   217e2:	f022 0204 	bic.w	r2, r2, #4
   217e6:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   217e8:	f7ff ffb2 	bl	21750 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   217ec:	4621      	mov	r1, r4
   217ee:	4802      	ldr	r0, [pc, #8]	; (217f8 <z_sched_start+0x38>)
}
   217f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   217f4:	f7ff bdd2 	b.w	2139c <z_reschedule>
   217f8:	20002bb3 	.word	0x20002bb3

000217fc <z_impl_k_thread_resume>:
{
   217fc:	b510      	push	{r4, lr}
	__asm__ volatile(
   217fe:	f04f 0220 	mov.w	r2, #32
   21802:	f3ef 8411 	mrs	r4, BASEPRI
   21806:	f382 8811 	msr	BASEPRI, r2
   2180a:	f3bf 8f6f 	isb	sy
	if (!z_is_thread_suspended(thread)) {
   2180e:	7b42      	ldrb	r2, [r0, #13]
   21810:	06d1      	lsls	r1, r2, #27
   21812:	d404      	bmi.n	2181e <z_impl_k_thread_resume+0x22>
	__asm__ volatile(
   21814:	f384 8811 	msr	BASEPRI, r4
   21818:	f3bf 8f6f 	isb	sy
}
   2181c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2181e:	f022 0210 	bic.w	r2, r2, #16
   21822:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   21824:	f7ff ff94 	bl	21750 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   21828:	4621      	mov	r1, r4
   2182a:	4802      	ldr	r0, [pc, #8]	; (21834 <z_impl_k_thread_resume+0x38>)
}
   2182c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   21830:	f7ff bdb4 	b.w	2139c <z_reschedule>
   21834:	20002bb3 	.word	0x20002bb3

00021838 <z_mrsh_k_thread_resume>:
#include <syscalls/kernel.h>

extern void z_vrfy_k_thread_resume(k_tid_t thread);
uintptr_t z_mrsh_k_thread_resume(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   21838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	_current->syscall_frame = ssf;
   2183a:	4f18      	ldr	r7, [pc, #96]	; (2189c <z_mrsh_k_thread_resume+0x64>)
   2183c:	9a08      	ldr	r2, [sp, #32]
   2183e:	68bb      	ldr	r3, [r7, #8]
{
   21840:	4605      	mov	r5, r0
	_current->syscall_frame = ssf;
   21842:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	Z_OOPS(Z_SYSCALL_OBJ(thread, K_OBJ_THREAD));
   21846:	f7de fc5b 	bl	100 <z_object_find>
   2184a:	4629      	mov	r1, r5
   2184c:	f007 ffb3 	bl	297b6 <z_obj_validation_check.constprop.0>
   21850:	463e      	mov	r6, r7
   21852:	4604      	mov	r4, r0
   21854:	b1c8      	cbz	r0, 2188a <z_mrsh_k_thread_resume+0x52>
   21856:	f007 ff86 	bl	29766 <arch_is_user_context>
   2185a:	4b11      	ldr	r3, [pc, #68]	; (218a0 <z_mrsh_k_thread_resume+0x68>)
   2185c:	4a11      	ldr	r2, [pc, #68]	; (218a4 <z_mrsh_k_thread_resume+0x6c>)
   2185e:	1a9b      	subs	r3, r3, r2
   21860:	08db      	lsrs	r3, r3, #3
   21862:	019b      	lsls	r3, r3, #6
   21864:	f043 0301 	orr.w	r3, r3, #1
   21868:	b148      	cbz	r0, 2187e <z_mrsh_k_thread_resume+0x46>
   2186a:	4a0f      	ldr	r2, [pc, #60]	; (218a8 <z_mrsh_k_thread_resume+0x70>)
   2186c:	490f      	ldr	r1, [pc, #60]	; (218ac <z_mrsh_k_thread_resume+0x74>)
   2186e:	4618      	mov	r0, r3
   21870:	f003 fb11 	bl	24e96 <log_from_user>
   21874:	68b3      	ldr	r3, [r6, #8]
   21876:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   2187a:	f005 f8ef 	bl	26a5c <arch_syscall_oops>
   2187e:	490a      	ldr	r1, [pc, #40]	; (218a8 <z_mrsh_k_thread_resume+0x70>)
   21880:	480a      	ldr	r0, [pc, #40]	; (218ac <z_mrsh_k_thread_resume+0x74>)
   21882:	461a      	mov	r2, r3
   21884:	f003 fb3a 	bl	24efc <log_1>
   21888:	e7f4      	b.n	21874 <z_mrsh_k_thread_resume+0x3c>
	z_impl_k_thread_resume(thread);
   2188a:	4628      	mov	r0, r5
   2188c:	f7ff ffb6 	bl	217fc <z_impl_k_thread_resume>
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	z_vrfy_k_thread_resume(*(k_tid_t*)&arg0)
;
	_current->syscall_frame = NULL;
   21890:	68bb      	ldr	r3, [r7, #8]
	return 0;
}
   21892:	4620      	mov	r0, r4
	_current->syscall_frame = NULL;
   21894:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
}
   21898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2189a:	bf00      	nop
   2189c:	200023f4 	.word	0x200023f4
   218a0:	0002a810 	.word	0x0002a810
   218a4:	0002a6d0 	.word	0x0002a6d0
   218a8:	0002f044 	.word	0x0002f044
   218ac:	0002e72d 	.word	0x0002e72d

000218b0 <z_set_prio>:
{
   218b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   218b2:	4604      	mov	r4, r0
	__asm__ volatile(
   218b4:	f04f 0320 	mov.w	r3, #32
   218b8:	f3ef 8611 	mrs	r6, BASEPRI
   218bc:	f383 8811 	msr	BASEPRI, r3
   218c0:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   218c4:	7b43      	ldrb	r3, [r0, #13]
   218c6:	06da      	lsls	r2, r3, #27
   218c8:	b249      	sxtb	r1, r1
   218ca:	d138      	bne.n	2193e <z_set_prio+0x8e>
   218cc:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
   218ce:	2d00      	cmp	r5, #0
   218d0:	d135      	bne.n	2193e <z_set_prio+0x8e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   218d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   218d6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   218d8:	f007 ff3d 	bl	29756 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   218dc:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
   218de:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   218e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   218e4:	7343      	strb	r3, [r0, #13]
	return list->head == list;
   218e6:	4817      	ldr	r0, [pc, #92]	; (21944 <z_set_prio+0x94>)
   218e8:	4603      	mov	r3, r0
   218ea:	f853 7f28 	ldr.w	r7, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   218ee:	429f      	cmp	r7, r3
   218f0:	bf18      	it	ne
   218f2:	463d      	movne	r5, r7
   218f4:	2d00      	cmp	r5, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   218f6:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   218f8:	461a      	mov	r2, r3
   218fa:	462b      	mov	r3, r5
   218fc:	bf38      	it	cc
   218fe:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21900:	b1c3      	cbz	r3, 21934 <z_set_prio+0x84>
	int32_t b2 = thread_2->base.prio;
   21902:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   21906:	42a9      	cmp	r1, r5
   21908:	d010      	beq.n	2192c <z_set_prio+0x7c>
		return b2 - b1;
   2190a:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   2190c:	2d00      	cmp	r5, #0
   2190e:	dd0d      	ble.n	2192c <z_set_prio+0x7c>
	sys_dnode_t *const prev = successor->prev;
   21910:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   21912:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   21916:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   21918:	605c      	str	r4, [r3, #4]
			update_cache(1);
   2191a:	2001      	movs	r0, #1
   2191c:	f7ff fd64 	bl	213e8 <update_cache>
   21920:	2001      	movs	r0, #1
	__asm__ volatile(
   21922:	f386 8811 	msr	BASEPRI, r6
   21926:	f3bf 8f6f 	isb	sy
}
   2192a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   2192c:	42bb      	cmp	r3, r7
   2192e:	d001      	beq.n	21934 <z_set_prio+0x84>
   21930:	681b      	ldr	r3, [r3, #0]
   21932:	e7e5      	b.n	21900 <z_set_prio+0x50>
	node->prev = tail;
   21934:	e9c4 2700 	strd	r2, r7, [r4]
	tail->next = node;
   21938:	603c      	str	r4, [r7, #0]
	list->tail = node;
   2193a:	62c4      	str	r4, [r0, #44]	; 0x2c
}
   2193c:	e7ed      	b.n	2191a <z_set_prio+0x6a>
			thread->base.prio = prio;
   2193e:	73a1      	strb	r1, [r4, #14]
   21940:	2000      	movs	r0, #0
   21942:	e7ee      	b.n	21922 <z_set_prio+0x72>
   21944:	200023f4 	.word	0x200023f4

00021948 <z_thread_priority_set>:
{
   21948:	b508      	push	{r3, lr}
	bool need_sched = z_set_prio(thread, prio);
   2194a:	f7ff ffb1 	bl	218b0 <z_set_prio>
	if (need_sched && _current->base.sched_locked == 0U) {
   2194e:	b138      	cbz	r0, 21960 <z_thread_priority_set+0x18>
   21950:	4b04      	ldr	r3, [pc, #16]	; (21964 <z_thread_priority_set+0x1c>)
   21952:	689b      	ldr	r3, [r3, #8]
   21954:	7bdb      	ldrb	r3, [r3, #15]
   21956:	b91b      	cbnz	r3, 21960 <z_thread_priority_set+0x18>
}
   21958:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_reschedule_unlocked();
   2195c:	f007 bf74 	b.w	29848 <z_reschedule_unlocked>
}
   21960:	bd08      	pop	{r3, pc}
   21962:	bf00      	nop
   21964:	200023f4 	.word	0x200023f4

00021968 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   21968:	4b04      	ldr	r3, [pc, #16]	; (2197c <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   2196a:	2100      	movs	r1, #0
   2196c:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   21970:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   21974:	4608      	mov	r0, r1
   21976:	f7ff bcdf 	b.w	21338 <k_sched_time_slice_set>
   2197a:	bf00      	nop
   2197c:	200023f4 	.word	0x200023f4

00021980 <z_mrsh_k_thread_priority_get>:
#include <syscalls/kernel.h>

extern int z_vrfy_k_thread_priority_get(k_tid_t thread);
uintptr_t z_mrsh_k_thread_priority_get(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   21980:	b570      	push	{r4, r5, r6, lr}
	_current->syscall_frame = ssf;
   21982:	4e17      	ldr	r6, [pc, #92]	; (219e0 <z_mrsh_k_thread_priority_get+0x60>)
   21984:	9a06      	ldr	r2, [sp, #24]
   21986:	68b3      	ldr	r3, [r6, #8]
{
   21988:	4604      	mov	r4, r0
	_current->syscall_frame = ssf;
   2198a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	Z_OOPS(Z_SYSCALL_OBJ(thread, K_OBJ_THREAD));
   2198e:	f7de fbb7 	bl	100 <z_object_find>
   21992:	4621      	mov	r1, r4
   21994:	f007 ff0f 	bl	297b6 <z_obj_validation_check.constprop.0>
   21998:	4635      	mov	r5, r6
   2199a:	4603      	mov	r3, r0
   2199c:	b1c8      	cbz	r0, 219d2 <z_mrsh_k_thread_priority_get+0x52>
   2199e:	f007 fee2 	bl	29766 <arch_is_user_context>
   219a2:	4b10      	ldr	r3, [pc, #64]	; (219e4 <z_mrsh_k_thread_priority_get+0x64>)
   219a4:	4a10      	ldr	r2, [pc, #64]	; (219e8 <z_mrsh_k_thread_priority_get+0x68>)
   219a6:	1a9b      	subs	r3, r3, r2
   219a8:	08db      	lsrs	r3, r3, #3
   219aa:	019b      	lsls	r3, r3, #6
   219ac:	f043 0301 	orr.w	r3, r3, #1
   219b0:	b148      	cbz	r0, 219c6 <z_mrsh_k_thread_priority_get+0x46>
   219b2:	4a0e      	ldr	r2, [pc, #56]	; (219ec <z_mrsh_k_thread_priority_get+0x6c>)
   219b4:	490e      	ldr	r1, [pc, #56]	; (219f0 <z_mrsh_k_thread_priority_get+0x70>)
   219b6:	4618      	mov	r0, r3
   219b8:	f003 fa6d 	bl	24e96 <log_from_user>
   219bc:	68ab      	ldr	r3, [r5, #8]
   219be:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   219c2:	f005 f84b 	bl	26a5c <arch_syscall_oops>
   219c6:	4909      	ldr	r1, [pc, #36]	; (219ec <z_mrsh_k_thread_priority_get+0x6c>)
   219c8:	4809      	ldr	r0, [pc, #36]	; (219f0 <z_mrsh_k_thread_priority_get+0x70>)
   219ca:	461a      	mov	r2, r3
   219cc:	f003 fa96 	bl	24efc <log_1>
   219d0:	e7f4      	b.n	219bc <z_mrsh_k_thread_priority_get+0x3c>
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	int ret = z_vrfy_k_thread_priority_get(*(k_tid_t*)&arg0)
;
	_current->syscall_frame = NULL;
   219d2:	68b2      	ldr	r2, [r6, #8]
	return thread->base.prio;
   219d4:	f994 000e 	ldrsb.w	r0, [r4, #14]
   219d8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	return (uintptr_t) ret;
}
   219dc:	bd70      	pop	{r4, r5, r6, pc}
   219de:	bf00      	nop
   219e0:	200023f4 	.word	0x200023f4
   219e4:	0002a810 	.word	0x0002a810
   219e8:	0002a6d0 	.word	0x0002a6d0
   219ec:	0002f05b 	.word	0x0002f05b
   219f0:	0002e72d 	.word	0x0002e72d

000219f4 <z_mrsh_k_thread_priority_set>:
#include <syscalls/kernel.h>

extern void z_vrfy_k_thread_priority_set(k_tid_t thread, int prio);
uintptr_t z_mrsh_k_thread_priority_set(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   219f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	_current->syscall_frame = ssf;
   219f8:	f8df 8104 	ldr.w	r8, [pc, #260]	; 21b00 <z_mrsh_k_thread_priority_set+0x10c>
   219fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   219fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
{
   21a02:	4607      	mov	r7, r0
	_current->syscall_frame = ssf;
   21a04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
{
   21a08:	460c      	mov	r4, r1
	Z_OOPS(Z_SYSCALL_OBJ(thread, K_OBJ_THREAD));
   21a0a:	f7de fb79 	bl	100 <z_object_find>
   21a0e:	4639      	mov	r1, r7
   21a10:	f007 fed1 	bl	297b6 <z_obj_validation_check.constprop.0>
   21a14:	4646      	mov	r6, r8
   21a16:	4605      	mov	r5, r0
   21a18:	2800      	cmp	r0, #0
   21a1a:	d042      	beq.n	21aa2 <z_mrsh_k_thread_priority_set+0xae>
   21a1c:	f007 fea3 	bl	29766 <arch_is_user_context>
   21a20:	4b31      	ldr	r3, [pc, #196]	; (21ae8 <z_mrsh_k_thread_priority_set+0xf4>)
   21a22:	4a32      	ldr	r2, [pc, #200]	; (21aec <z_mrsh_k_thread_priority_set+0xf8>)
   21a24:	1a9b      	subs	r3, r3, r2
   21a26:	08db      	lsrs	r3, r3, #3
   21a28:	019b      	lsls	r3, r3, #6
   21a2a:	f043 0301 	orr.w	r3, r3, #1
   21a2e:	b148      	cbz	r0, 21a44 <z_mrsh_k_thread_priority_set+0x50>
   21a30:	4a2f      	ldr	r2, [pc, #188]	; (21af0 <z_mrsh_k_thread_priority_set+0xfc>)
   21a32:	4930      	ldr	r1, [pc, #192]	; (21af4 <z_mrsh_k_thread_priority_set+0x100>)
   21a34:	4618      	mov	r0, r3
   21a36:	f003 fa2e 	bl	24e96 <log_from_user>
	Z_OOPS(Z_SYSCALL_VERIFY_MSG((int8_t)prio >= thread->base.prio,
   21a3a:	68b3      	ldr	r3, [r6, #8]
   21a3c:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   21a40:	f005 f80c 	bl	26a5c <arch_syscall_oops>
	Z_OOPS(Z_SYSCALL_OBJ(thread, K_OBJ_THREAD));
   21a44:	492a      	ldr	r1, [pc, #168]	; (21af0 <z_mrsh_k_thread_priority_set+0xfc>)
   21a46:	482b      	ldr	r0, [pc, #172]	; (21af4 <z_mrsh_k_thread_priority_set+0x100>)
   21a48:	461a      	mov	r2, r3
   21a4a:	f003 fa57 	bl	24efc <log_1>
   21a4e:	e7f4      	b.n	21a3a <z_mrsh_k_thread_priority_set+0x46>
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(_is_valid_prio(prio, NULL),
   21a50:	4927      	ldr	r1, [pc, #156]	; (21af0 <z_mrsh_k_thread_priority_set+0xfc>)
   21a52:	4829      	ldr	r0, [pc, #164]	; (21af8 <z_mrsh_k_thread_priority_set+0x104>)
   21a54:	462b      	mov	r3, r5
   21a56:	4622      	mov	r2, r4
   21a58:	f003 fa64 	bl	24f24 <log_2>
   21a5c:	e7ed      	b.n	21a3a <z_mrsh_k_thread_priority_set+0x46>
	Z_OOPS(Z_SYSCALL_VERIFY_MSG((int8_t)prio >= thread->base.prio,
   21a5e:	4924      	ldr	r1, [pc, #144]	; (21af0 <z_mrsh_k_thread_priority_set+0xfc>)
   21a60:	4826      	ldr	r0, [pc, #152]	; (21afc <z_mrsh_k_thread_priority_set+0x108>)
   21a62:	f8ad 5000 	strh.w	r5, [sp]
   21a66:	4622      	mov	r2, r4
   21a68:	f003 fa75 	bl	24f56 <log_3>
   21a6c:	e7e5      	b.n	21a3a <z_mrsh_k_thread_priority_set+0x46>
   21a6e:	f997 200e 	ldrsb.w	r2, [r7, #14]
   21a72:	b263      	sxtb	r3, r4
   21a74:	429a      	cmp	r2, r3
   21a76:	dd2b      	ble.n	21ad0 <z_mrsh_k_thread_priority_set+0xdc>
   21a78:	f007 fe75 	bl	29766 <arch_is_user_context>
   21a7c:	4d1a      	ldr	r5, [pc, #104]	; (21ae8 <z_mrsh_k_thread_priority_set+0xf4>)
   21a7e:	4b1b      	ldr	r3, [pc, #108]	; (21aec <z_mrsh_k_thread_priority_set+0xf8>)
   21a80:	1aed      	subs	r5, r5, r3
   21a82:	08ed      	lsrs	r5, r5, #3
   21a84:	01ad      	lsls	r5, r5, #6
   21a86:	f997 300e 	ldrsb.w	r3, [r7, #14]
   21a8a:	f045 0501 	orr.w	r5, r5, #1
   21a8e:	2800      	cmp	r0, #0
   21a90:	d0e5      	beq.n	21a5e <z_mrsh_k_thread_priority_set+0x6a>
   21a92:	9300      	str	r3, [sp, #0]
   21a94:	4a16      	ldr	r2, [pc, #88]	; (21af0 <z_mrsh_k_thread_priority_set+0xfc>)
   21a96:	4919      	ldr	r1, [pc, #100]	; (21afc <z_mrsh_k_thread_priority_set+0x108>)
   21a98:	4623      	mov	r3, r4
   21a9a:	4628      	mov	r0, r5
   21a9c:	f003 f9fb 	bl	24e96 <log_from_user>
   21aa0:	e7cb      	b.n	21a3a <z_mrsh_k_thread_priority_set+0x46>
	if (!z_is_prio_higher_or_equal(prio,
   21aa2:	2c0e      	cmp	r4, #14
   21aa4:	dc02      	bgt.n	21aac <z_mrsh_k_thread_priority_set+0xb8>
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(_is_valid_prio(prio, NULL),
   21aa6:	f114 0f10 	cmn.w	r4, #16
   21aaa:	dae0      	bge.n	21a6e <z_mrsh_k_thread_priority_set+0x7a>
   21aac:	f007 fe5b 	bl	29766 <arch_is_user_context>
   21ab0:	4d0d      	ldr	r5, [pc, #52]	; (21ae8 <z_mrsh_k_thread_priority_set+0xf4>)
   21ab2:	4b0e      	ldr	r3, [pc, #56]	; (21aec <z_mrsh_k_thread_priority_set+0xf8>)
   21ab4:	1aed      	subs	r5, r5, r3
   21ab6:	08ed      	lsrs	r5, r5, #3
   21ab8:	01ad      	lsls	r5, r5, #6
   21aba:	f045 0501 	orr.w	r5, r5, #1
   21abe:	2800      	cmp	r0, #0
   21ac0:	d0c6      	beq.n	21a50 <z_mrsh_k_thread_priority_set+0x5c>
   21ac2:	4a0b      	ldr	r2, [pc, #44]	; (21af0 <z_mrsh_k_thread_priority_set+0xfc>)
   21ac4:	490c      	ldr	r1, [pc, #48]	; (21af8 <z_mrsh_k_thread_priority_set+0x104>)
   21ac6:	4623      	mov	r3, r4
   21ac8:	4628      	mov	r0, r5
   21aca:	f003 f9e4 	bl	24e96 <log_from_user>
   21ace:	e7b4      	b.n	21a3a <z_mrsh_k_thread_priority_set+0x46>
	z_thread_priority_set(th, prio);
   21ad0:	4638      	mov	r0, r7
   21ad2:	4621      	mov	r1, r4
   21ad4:	f7ff ff38 	bl	21948 <z_thread_priority_set>
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	z_vrfy_k_thread_priority_set(*(k_tid_t*)&arg0, *(int*)&arg1)
;
	_current->syscall_frame = NULL;
   21ad8:	f8d8 3008 	ldr.w	r3, [r8, #8]
	return 0;
}
   21adc:	4628      	mov	r0, r5
	_current->syscall_frame = NULL;
   21ade:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
   21ae2:	b002      	add	sp, #8
   21ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21ae8:	0002a810 	.word	0x0002a810
   21aec:	0002a6d0 	.word	0x0002a6d0
   21af0:	0002f078 	.word	0x0002f078
   21af4:	0002e72d 	.word	0x0002e72d
   21af8:	0002ef78 	.word	0x0002ef78
   21afc:	0002efac 	.word	0x0002efac
   21b00:	200023f4 	.word	0x200023f4

00021b04 <z_impl_k_yield>:
	if (!z_is_idle_thread_object(_current)) {
   21b04:	4926      	ldr	r1, [pc, #152]	; (21ba0 <z_impl_k_yield+0x9c>)
{
   21b06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   21b08:	688a      	ldr	r2, [r1, #8]
   21b0a:	4b26      	ldr	r3, [pc, #152]	; (21ba4 <z_impl_k_yield+0xa0>)
   21b0c:	429a      	cmp	r2, r3
   21b0e:	d03d      	beq.n	21b8c <z_impl_k_yield+0x88>
	__asm__ volatile(
   21b10:	f04f 0320 	mov.w	r3, #32
   21b14:	f3ef 8511 	mrs	r5, BASEPRI
   21b18:	f383 8811 	msr	BASEPRI, r3
   21b1c:	f3bf 8f6f 	isb	sy
			dequeue_thread(&_kernel.ready_q.runq,
   21b20:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21b22:	7b43      	ldrb	r3, [r0, #13]
   21b24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   21b28:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   21b2a:	f007 fe14 	bl	29756 <sys_dlist_remove>
		queue_thread(&_kernel.ready_q.runq, _current);
   21b2e:	688a      	ldr	r2, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   21b30:	7b53      	ldrb	r3, [r2, #13]
	return list->head == list;
   21b32:	4608      	mov	r0, r1
   21b34:	f063 037f 	orn	r3, r3, #127	; 0x7f
   21b38:	7353      	strb	r3, [r2, #13]
   21b3a:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   21b3e:	6ace      	ldr	r6, [r1, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21b40:	4283      	cmp	r3, r0
   21b42:	bf08      	it	eq
   21b44:	2300      	moveq	r3, #0
   21b46:	2b00      	cmp	r3, #0
   21b48:	bf38      	it	cc
   21b4a:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21b4c:	b1cb      	cbz	r3, 21b82 <z_impl_k_yield+0x7e>
	int32_t b1 = thread_1->base.prio;
   21b4e:	f992 700e 	ldrsb.w	r7, [r2, #14]
	int32_t b2 = thread_2->base.prio;
   21b52:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
   21b56:	42a7      	cmp	r7, r4
   21b58:	d00f      	beq.n	21b7a <z_impl_k_yield+0x76>
		return b2 - b1;
   21b5a:	1be4      	subs	r4, r4, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   21b5c:	2c00      	cmp	r4, #0
   21b5e:	dd0c      	ble.n	21b7a <z_impl_k_yield+0x76>
	sys_dnode_t *const prev = successor->prev;
   21b60:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   21b62:	e9c2 3100 	strd	r3, r1, [r2]
	prev->next = node;
   21b66:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   21b68:	605a      	str	r2, [r3, #4]
		update_cache(1);
   21b6a:	2001      	movs	r0, #1
   21b6c:	f7ff fc3c 	bl	213e8 <update_cache>
   21b70:	4628      	mov	r0, r5
}
   21b72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   21b76:	f7e4 b9ab 	b.w	5ed0 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   21b7a:	42b3      	cmp	r3, r6
   21b7c:	d001      	beq.n	21b82 <z_impl_k_yield+0x7e>
   21b7e:	681b      	ldr	r3, [r3, #0]
   21b80:	e7e4      	b.n	21b4c <z_impl_k_yield+0x48>
	node->prev = tail;
   21b82:	e9c2 0600 	strd	r0, r6, [r2]
	tail->next = node;
   21b86:	6032      	str	r2, [r6, #0]
	list->tail = node;
   21b88:	62ca      	str	r2, [r1, #44]	; 0x2c
}
   21b8a:	e7ee      	b.n	21b6a <z_impl_k_yield+0x66>
   21b8c:	f04f 0320 	mov.w	r3, #32
   21b90:	f3ef 8011 	mrs	r0, BASEPRI
   21b94:	f383 8811 	msr	BASEPRI, r3
   21b98:	f3bf 8f6f 	isb	sy
   21b9c:	e7e9      	b.n	21b72 <z_impl_k_yield+0x6e>
   21b9e:	bf00      	nop
   21ba0:	200023f4 	.word	0x200023f4
   21ba4:	20000980 	.word	0x20000980

00021ba8 <z_mrsh_k_yield>:
#include <syscalls/kernel.h>

extern void z_vrfy_k_yield();
uintptr_t z_mrsh_k_yield(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   21ba8:	b510      	push	{r4, lr}
	_current->syscall_frame = ssf;
   21baa:	4c06      	ldr	r4, [pc, #24]	; (21bc4 <z_mrsh_k_yield+0x1c>)
   21bac:	9a04      	ldr	r2, [sp, #16]
   21bae:	68a3      	ldr	r3, [r4, #8]
   21bb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	z_impl_k_yield();
   21bb4:	f7ff ffa6 	bl	21b04 <z_impl_k_yield>
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	z_vrfy_k_yield()
;
	_current->syscall_frame = NULL;
   21bb8:	68a3      	ldr	r3, [r4, #8]
   21bba:	2000      	movs	r0, #0
   21bbc:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	return 0;
}
   21bc0:	bd10      	pop	{r4, pc}
   21bc2:	bf00      	nop
   21bc4:	200023f4 	.word	0x200023f4

00021bc8 <z_impl_k_sleep>:

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21bc8:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   21bcc:	bf08      	it	eq
   21bce:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   21bd2:	b508      	push	{r3, lr}
   21bd4:	4602      	mov	r2, r0
   21bd6:	460b      	mov	r3, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21bd8:	d106      	bne.n	21be8 <z_impl_k_sleep+0x20>
		k_thread_suspend(_current);
   21bda:	4b0b      	ldr	r3, [pc, #44]	; (21c08 <z_impl_k_sleep+0x40>)
   21bdc:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   21bde:	f7ff fcad 	bl	2153c <z_impl_k_thread_suspend>
   21be2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   21be6:	bd08      	pop	{r3, pc}
	if (ticks == 0) {
   21be8:	4313      	orrs	r3, r2
   21bea:	d10a      	bne.n	21c02 <z_impl_k_sleep+0x3a>
	z_impl_k_yield();
   21bec:	f7ff ff8a 	bl	21b04 <z_impl_k_yield>
		return 0;
   21bf0:	2000      	movs	r0, #0
			return (t * to_hz + off) / from_hz;
   21bf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   21bf6:	fb80 2303 	smull	r2, r3, r0, r3
   21bfa:	0bd0      	lsrs	r0, r2, #15
   21bfc:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   21c00:	e7f1      	b.n	21be6 <z_impl_k_sleep+0x1e>
   21c02:	f7ff fc61 	bl	214c8 <z_tick_sleep.part.0>
   21c06:	e7f4      	b.n	21bf2 <z_impl_k_sleep+0x2a>
   21c08:	200023f4 	.word	0x200023f4

00021c0c <z_mrsh_k_sleep>:
#include <syscalls/kernel.h>

extern int32_t z_vrfy_k_sleep(k_timeout_t timeout);
uintptr_t z_mrsh_k_sleep(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   21c0c:	b510      	push	{r4, lr}
	_current->syscall_frame = ssf;
   21c0e:	4c06      	ldr	r4, [pc, #24]	; (21c28 <z_mrsh_k_sleep+0x1c>)
   21c10:	9a04      	ldr	r2, [sp, #16]
   21c12:	68a3      	ldr	r3, [r4, #8]
   21c14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

#ifdef CONFIG_USERSPACE
static inline int32_t z_vrfy_k_sleep(k_timeout_t timeout)
{
	return z_impl_k_sleep(timeout);
   21c18:	f7ff ffd6 	bl	21bc8 <z_impl_k_sleep>
	union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0;
	parm0.split.lo = arg0;
	parm0.split.hi = arg1;
	int32_t ret = z_vrfy_k_sleep(parm0.val)
;
	_current->syscall_frame = NULL;
   21c1c:	68a3      	ldr	r3, [r4, #8]
   21c1e:	2200      	movs	r2, #0
   21c20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	return (uintptr_t) ret;
}
   21c24:	bd10      	pop	{r4, pc}
   21c26:	bf00      	nop
   21c28:	200023f4 	.word	0x200023f4

00021c2c <z_impl_k_usleep>:
}
#include <syscalls/k_sleep_mrsh.c>
#endif

int32_t z_impl_k_usleep(int us)
{
   21c2c:	b538      	push	{r3, r4, r5, lr}
   21c2e:	4c0e      	ldr	r4, [pc, #56]	; (21c68 <z_impl_k_usleep+0x3c>)
   21c30:	4a0e      	ldr	r2, [pc, #56]	; (21c6c <z_impl_k_usleep+0x40>)
   21c32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   21c36:	2500      	movs	r5, #0
   21c38:	fbc1 4500 	smlal	r4, r5, r1, r0
   21c3c:	2300      	movs	r3, #0
   21c3e:	4620      	mov	r0, r4
   21c40:	4629      	mov	r1, r5
   21c42:	f7de ff7b 	bl	b3c <__aeabi_uldivmod>
   21c46:	4603      	mov	r3, r0
	int32_t ticks;

	ticks = k_us_to_ticks_ceil64(us);
	ticks = z_tick_sleep(ticks);
   21c48:	4618      	mov	r0, r3
   21c4a:	17d9      	asrs	r1, r3, #31
	if (ticks == 0) {
   21c4c:	b94b      	cbnz	r3, 21c62 <z_impl_k_usleep+0x36>
   21c4e:	f7ff ff59 	bl	21b04 <z_impl_k_yield>
		return 0;
   21c52:	2000      	movs	r0, #0
   21c54:	4a05      	ldr	r2, [pc, #20]	; (21c6c <z_impl_k_usleep+0x40>)
   21c56:	fb80 2302 	smull	r2, r3, r0, r2
   21c5a:	0bd0      	lsrs	r0, r2, #15
	return k_ticks_to_us_floor64(ticks);
}
   21c5c:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   21c60:	bd38      	pop	{r3, r4, r5, pc}
   21c62:	f7ff fc31 	bl	214c8 <z_tick_sleep.part.0>
   21c66:	e7f5      	b.n	21c54 <z_impl_k_usleep+0x28>
   21c68:	000f423f 	.word	0x000f423f
   21c6c:	000f4240 	.word	0x000f4240

00021c70 <z_mrsh_k_usleep>:
#include <syscalls/kernel.h>

extern int32_t z_vrfy_k_usleep(int32_t us);
uintptr_t z_mrsh_k_usleep(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   21c70:	b510      	push	{r4, lr}
	_current->syscall_frame = ssf;
   21c72:	4c06      	ldr	r4, [pc, #24]	; (21c8c <z_mrsh_k_usleep+0x1c>)
   21c74:	9a04      	ldr	r2, [sp, #16]
   21c76:	68a3      	ldr	r3, [r4, #8]
   21c78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

#ifdef CONFIG_USERSPACE
static inline int32_t z_vrfy_k_usleep(int us)
{
	return z_impl_k_usleep(us);
   21c7c:	f7ff ffd6 	bl	21c2c <z_impl_k_usleep>
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	int32_t ret = z_vrfy_k_usleep(*(int32_t*)&arg0)
;
	_current->syscall_frame = NULL;
   21c80:	68a3      	ldr	r3, [r4, #8]
   21c82:	2200      	movs	r2, #0
   21c84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	return (uintptr_t) ret;
}
   21c88:	bd10      	pop	{r4, pc}
   21c8a:	bf00      	nop
   21c8c:	200023f4 	.word	0x200023f4

00021c90 <z_mrsh_k_wakeup>:
#include <syscalls/kernel.h>

extern void z_vrfy_k_wakeup(k_tid_t thread);
uintptr_t z_mrsh_k_wakeup(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   21c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	_current->syscall_frame = ssf;
   21c92:	4f18      	ldr	r7, [pc, #96]	; (21cf4 <z_mrsh_k_wakeup+0x64>)
   21c94:	9a08      	ldr	r2, [sp, #32]
   21c96:	68bb      	ldr	r3, [r7, #8]
{
   21c98:	4605      	mov	r5, r0
	_current->syscall_frame = ssf;
   21c9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif

#ifdef CONFIG_USERSPACE
static inline void z_vrfy_k_wakeup(k_tid_t thread)
{
	Z_OOPS(Z_SYSCALL_OBJ(thread, K_OBJ_THREAD));
   21c9e:	f7de fa2f 	bl	100 <z_object_find>
   21ca2:	4629      	mov	r1, r5
   21ca4:	f007 fd87 	bl	297b6 <z_obj_validation_check.constprop.0>
   21ca8:	463e      	mov	r6, r7
   21caa:	4604      	mov	r4, r0
   21cac:	b1c8      	cbz	r0, 21ce2 <z_mrsh_k_wakeup+0x52>
   21cae:	f007 fd5a 	bl	29766 <arch_is_user_context>
   21cb2:	4b11      	ldr	r3, [pc, #68]	; (21cf8 <z_mrsh_k_wakeup+0x68>)
   21cb4:	4a11      	ldr	r2, [pc, #68]	; (21cfc <z_mrsh_k_wakeup+0x6c>)
   21cb6:	1a9b      	subs	r3, r3, r2
   21cb8:	08db      	lsrs	r3, r3, #3
   21cba:	019b      	lsls	r3, r3, #6
   21cbc:	f043 0301 	orr.w	r3, r3, #1
   21cc0:	b148      	cbz	r0, 21cd6 <z_mrsh_k_wakeup+0x46>
   21cc2:	4a0f      	ldr	r2, [pc, #60]	; (21d00 <z_mrsh_k_wakeup+0x70>)
   21cc4:	490f      	ldr	r1, [pc, #60]	; (21d04 <z_mrsh_k_wakeup+0x74>)
   21cc6:	4618      	mov	r0, r3
   21cc8:	f003 f8e5 	bl	24e96 <log_from_user>
   21ccc:	68b3      	ldr	r3, [r6, #8]
   21cce:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   21cd2:	f004 fec3 	bl	26a5c <arch_syscall_oops>
   21cd6:	490a      	ldr	r1, [pc, #40]	; (21d00 <z_mrsh_k_wakeup+0x70>)
   21cd8:	480a      	ldr	r0, [pc, #40]	; (21d04 <z_mrsh_k_wakeup+0x74>)
   21cda:	461a      	mov	r2, r3
   21cdc:	f003 f90e 	bl	24efc <log_1>
   21ce0:	e7f4      	b.n	21ccc <z_mrsh_k_wakeup+0x3c>
	z_impl_k_wakeup(thread);
   21ce2:	4628      	mov	r0, r5
   21ce4:	f007 fe60 	bl	299a8 <z_impl_k_wakeup>
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	z_vrfy_k_wakeup(*(k_tid_t*)&arg0)
;
	_current->syscall_frame = NULL;
   21ce8:	68bb      	ldr	r3, [r7, #8]
	return 0;
}
   21cea:	4620      	mov	r0, r4
	_current->syscall_frame = NULL;
   21cec:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
}
   21cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21cf2:	bf00      	nop
   21cf4:	200023f4 	.word	0x200023f4
   21cf8:	0002a810 	.word	0x0002a810
   21cfc:	0002a6d0 	.word	0x0002a6d0
   21d00:	0002f095 	.word	0x0002f095
   21d04:	0002e72d 	.word	0x0002e72d

00021d08 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   21d08:	4b01      	ldr	r3, [pc, #4]	; (21d10 <z_impl_k_current_get+0x8>)
   21d0a:	6898      	ldr	r0, [r3, #8]
   21d0c:	4770      	bx	lr
   21d0e:	bf00      	nop
   21d10:	200023f4 	.word	0x200023f4

00021d14 <z_mrsh_k_current_get>:

extern k_tid_t z_vrfy_k_current_get();
uintptr_t z_mrsh_k_current_get(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
	_current->syscall_frame = ssf;
   21d14:	4b02      	ldr	r3, [pc, #8]	; (21d20 <z_mrsh_k_current_get+0xc>)
   21d16:	6898      	ldr	r0, [r3, #8]
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	k_tid_t ret = z_vrfy_k_current_get()
;
	_current->syscall_frame = NULL;
   21d18:	2300      	movs	r3, #0
   21d1a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	return (uintptr_t) ret;
}
   21d1e:	4770      	bx	lr
   21d20:	200023f4 	.word	0x200023f4

00021d24 <z_impl_k_is_preempt_thread>:
   21d24:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/k_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   21d28:	b93b      	cbnz	r3, 21d3a <z_impl_k_is_preempt_thread+0x16>
   21d2a:	4b05      	ldr	r3, [pc, #20]	; (21d40 <z_impl_k_is_preempt_thread+0x1c>)
   21d2c:	689b      	ldr	r3, [r3, #8]
   21d2e:	89d8      	ldrh	r0, [r3, #14]
   21d30:	287f      	cmp	r0, #127	; 0x7f
   21d32:	bf8c      	ite	hi
   21d34:	2000      	movhi	r0, #0
   21d36:	2001      	movls	r0, #1
   21d38:	4770      	bx	lr
   21d3a:	2000      	movs	r0, #0
}
   21d3c:	4770      	bx	lr
   21d3e:	bf00      	nop
   21d40:	200023f4 	.word	0x200023f4

00021d44 <z_mrsh_k_is_preempt_thread>:

extern int z_vrfy_k_is_preempt_thread();
uintptr_t z_mrsh_k_is_preempt_thread(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
	_current->syscall_frame = ssf;
   21d44:	4a06      	ldr	r2, [pc, #24]	; (21d60 <z_mrsh_k_is_preempt_thread+0x1c>)
{
   21d46:	b508      	push	{r3, lr}
	_current->syscall_frame = ssf;
   21d48:	6893      	ldr	r3, [r2, #8]
   21d4a:	9904      	ldr	r1, [sp, #16]
   21d4c:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84

#ifdef CONFIG_USERSPACE
static inline int z_vrfy_k_is_preempt_thread(void)
{
	return z_impl_k_is_preempt_thread();
   21d50:	f7ff ffe8 	bl	21d24 <z_impl_k_is_preempt_thread>
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	int ret = z_vrfy_k_is_preempt_thread()
;
	_current->syscall_frame = NULL;
   21d54:	6893      	ldr	r3, [r2, #8]
   21d56:	2200      	movs	r2, #0
   21d58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	return (uintptr_t) ret;
}
   21d5c:	bd08      	pop	{r3, pc}
   21d5e:	bf00      	nop
   21d60:	200023f4 	.word	0x200023f4

00021d64 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   21d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21d68:	4604      	mov	r4, r0
   21d6a:	f04f 0320 	mov.w	r3, #32
   21d6e:	f3ef 8611 	mrs	r6, BASEPRI
   21d72:	f383 8811 	msr	BASEPRI, r3
   21d76:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   21d7a:	7b43      	ldrb	r3, [r0, #13]
   21d7c:	071a      	lsls	r2, r3, #28
   21d7e:	d505      	bpl.n	21d8c <z_thread_abort+0x28>
	__asm__ volatile(
   21d80:	f386 8811 	msr	BASEPRI, r6
   21d84:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   21d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   21d8c:	f023 0220 	bic.w	r2, r3, #32
   21d90:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   21d94:	09d2      	lsrs	r2, r2, #7
   21d96:	d12d      	bne.n	21df4 <z_thread_abort+0x90>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   21d98:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   21d9a:	68a3      	ldr	r3, [r4, #8]
   21d9c:	b113      	cbz	r3, 21da4 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   21d9e:	4620      	mov	r0, r4
   21da0:	f007 fceb 	bl	2977a <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   21da4:	f104 0018 	add.w	r0, r4, #24
   21da8:	f007 ff78 	bl	29c9c <z_abort_timeout>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   21dac:	f104 0758 	add.w	r7, r4, #88	; 0x58
   21db0:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   21db4:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21db6:	42bd      	cmp	r5, r7
   21db8:	d000      	beq.n	21dbc <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   21dba:	bb1d      	cbnz	r5, 21e04 <z_thread_abort+0xa0>
		update_cache(1);
   21dbc:	2001      	movs	r0, #1
   21dbe:	f7ff fb13 	bl	213e8 <update_cache>
		z_mem_domain_exit_thread(thread);
   21dc2:	4620      	mov	r0, r4
   21dc4:	f008 fa30 	bl	2a228 <z_mem_domain_exit_thread>
		z_thread_perms_all_clear(thread);
   21dc8:	4620      	mov	r0, r4
   21dca:	f002 f891 	bl	23ef0 <z_thread_perms_all_clear>
		z_object_uninit(thread->stack_obj);
   21dce:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
   21dd2:	f008 fad1 	bl	2a378 <z_object_uninit>
		z_object_uninit(thread);
   21dd6:	4620      	mov	r0, r4
   21dd8:	f008 face 	bl	2a378 <z_object_uninit>
	if (thread == _current && !arch_is_in_isr()) {
   21ddc:	4b10      	ldr	r3, [pc, #64]	; (21e20 <z_thread_abort+0xbc>)
   21dde:	689b      	ldr	r3, [r3, #8]
   21de0:	42a3      	cmp	r3, r4
   21de2:	d1cd      	bne.n	21d80 <z_thread_abort+0x1c>
   21de4:	f3ef 8305 	mrs	r3, IPSR
   21de8:	2b00      	cmp	r3, #0
   21dea:	d1c9      	bne.n	21d80 <z_thread_abort+0x1c>
   21dec:	4630      	mov	r0, r6
   21dee:	f7e4 f86f 	bl	5ed0 <arch_swap>
	return ret;
   21df2:	e7c5      	b.n	21d80 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21df4:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   21df8:	f043 0308 	orr.w	r3, r3, #8
   21dfc:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   21dfe:	f007 fcaa 	bl	29756 <sys_dlist_remove>
}
   21e02:	e7ca      	b.n	21d9a <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   21e04:	4628      	mov	r0, r5
   21e06:	f007 fcb8 	bl	2977a <unpend_thread_no_timeout>
   21e0a:	f105 0018 	add.w	r0, r5, #24
   21e0e:	f007 ff45 	bl	29c9c <z_abort_timeout>
   21e12:	f8c5 8090 	str.w	r8, [r5, #144]	; 0x90
		ready_thread(thread);
   21e16:	4628      	mov	r0, r5
   21e18:	f7ff fc9a 	bl	21750 <ready_thread>
   21e1c:	e7ca      	b.n	21db4 <z_thread_abort+0x50>
   21e1e:	bf00      	nop
   21e20:	200023f4 	.word	0x200023f4

00021e24 <z_impl_k_thread_join>:
	z_thread_abort(thread);
}
#endif

int z_impl_k_thread_join(struct k_thread *thread, k_timeout_t timeout)
{
   21e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21e26:	4601      	mov	r1, r0
   21e28:	4614      	mov	r4, r2
   21e2a:	461d      	mov	r5, r3
	__asm__ volatile(
   21e2c:	f04f 0320 	mov.w	r3, #32
   21e30:	f3ef 8611 	mrs	r6, BASEPRI
   21e34:	f383 8811 	msr	BASEPRI, r3
   21e38:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);
	int ret = 0;

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   21e3c:	7b43      	ldrb	r3, [r0, #13]
   21e3e:	071a      	lsls	r2, r3, #28
   21e40:	d41f      	bmi.n	21e82 <z_impl_k_thread_join+0x5e>
		ret = 0;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   21e42:	ea54 0305 	orrs.w	r3, r4, r5
   21e46:	d022      	beq.n	21e8e <z_impl_k_thread_join+0x6a>
		ret = -EBUSY;
	} else if ((thread == _current) ||
   21e48:	4f14      	ldr	r7, [pc, #80]	; (21e9c <z_impl_k_thread_join+0x78>)
   21e4a:	68b8      	ldr	r0, [r7, #8]
   21e4c:	4288      	cmp	r0, r1
   21e4e:	d021      	beq.n	21e94 <z_impl_k_thread_join+0x70>
   21e50:	688a      	ldr	r2, [r1, #8]
		   (thread->base.pended_on == &_current->join_queue)) {
   21e52:	f100 0358 	add.w	r3, r0, #88	; 0x58
	} else if ((thread == _current) ||
   21e56:	429a      	cmp	r2, r3
   21e58:	d01c      	beq.n	21e94 <z_impl_k_thread_join+0x70>
		ret = -EDEADLK;
	} else {
		__ASSERT(!arch_is_in_isr(), "cannot join in ISR");
		add_to_waitq_locked(_current, &thread->join_queue);
   21e5a:	3158      	adds	r1, #88	; 0x58
   21e5c:	f007 fd08 	bl	29870 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21e60:	1c6b      	adds	r3, r5, #1
   21e62:	bf08      	it	eq
   21e64:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
   21e68:	d006      	beq.n	21e78 <z_impl_k_thread_join+0x54>
		add_thread_timeout(_current, timeout);
   21e6a:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   21e6c:	490c      	ldr	r1, [pc, #48]	; (21ea0 <z_impl_k_thread_join+0x7c>)
   21e6e:	4622      	mov	r2, r4
   21e70:	462b      	mov	r3, r5
   21e72:	3018      	adds	r0, #24
   21e74:	f000 ffc6 	bl	22e04 <z_add_timeout>
	ret = arch_swap(key);
   21e78:	4630      	mov	r0, r6
		return z_swap(&sched_spinlock, key);
	}

	k_spin_unlock(&sched_spinlock, key);
	return ret;
}
   21e7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   21e7e:	f7e4 b827 	b.w	5ed0 <arch_swap>
		ret = 0;
   21e82:	2000      	movs	r0, #0
	__asm__ volatile(
   21e84:	f386 8811 	msr	BASEPRI, r6
   21e88:	f3bf 8f6f 	isb	sy
}
   21e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ret = -EBUSY;
   21e8e:	f06f 000f 	mvn.w	r0, #15
   21e92:	e7f7      	b.n	21e84 <z_impl_k_thread_join+0x60>
		ret = -EDEADLK;
   21e94:	f06f 002c 	mvn.w	r0, #44	; 0x2c
   21e98:	e7f4      	b.n	21e84 <z_impl_k_thread_join+0x60>
   21e9a:	bf00      	nop
   21e9c:	200023f4 	.word	0x200023f4
   21ea0:	000298eb 	.word	0x000298eb

00021ea4 <z_mrsh_k_thread_join>:
#include <syscalls/kernel.h>

extern int z_vrfy_k_thread_join(struct k_thread * thread, k_timeout_t timeout);
uintptr_t z_mrsh_k_thread_join(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   21ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	_current->syscall_frame = ssf;
   21ea6:	4c0b      	ldr	r4, [pc, #44]	; (21ed4 <z_mrsh_k_thread_join+0x30>)
   21ea8:	68a3      	ldr	r3, [r4, #8]
{
   21eaa:	4616      	mov	r6, r2
	_current->syscall_frame = ssf;
   21eac:	9a08      	ldr	r2, [sp, #32]
   21eae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
{
   21eb2:	4605      	mov	r5, r0
   21eb4:	460f      	mov	r7, r1
}

static inline int z_vrfy_k_thread_join(struct k_thread *thread,
				       k_timeout_t timeout)
{
	if (thread_obj_validate(thread)) {
   21eb6:	f007 fc6a 	bl	2978e <thread_obj_validate>
   21eba:	b948      	cbnz	r0, 21ed0 <z_mrsh_k_thread_join+0x2c>
		return 0;
	}

	return z_impl_k_thread_join(thread, timeout);
   21ebc:	463a      	mov	r2, r7
   21ebe:	4633      	mov	r3, r6
   21ec0:	4628      	mov	r0, r5
   21ec2:	f7ff ffaf 	bl	21e24 <z_impl_k_thread_join>
	union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0;
	parm0.split.lo = arg1;
	parm0.split.hi = arg2;
	int ret = z_vrfy_k_thread_join(*(struct k_thread **)&arg0, parm0.val)
;
	_current->syscall_frame = NULL;
   21ec6:	68a3      	ldr	r3, [r4, #8]
   21ec8:	2200      	movs	r2, #0
   21eca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	return (uintptr_t) ret;
}
   21ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
   21ed0:	2000      	movs	r0, #0
   21ed2:	e7f8      	b.n	21ec6 <z_mrsh_k_thread_join+0x22>
   21ed4:	200023f4 	.word	0x200023f4

00021ed8 <z_mrsh_k_thread_abort>:
#include <syscalls/kernel.h>

extern void z_vrfy_k_thread_abort(k_tid_t thread);
uintptr_t z_mrsh_k_thread_abort(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   21ed8:	b570      	push	{r4, r5, r6, lr}
	_current->syscall_frame = ssf;
   21eda:	4e18      	ldr	r6, [pc, #96]	; (21f3c <z_mrsh_k_thread_abort+0x64>)
   21edc:	9a06      	ldr	r2, [sp, #24]
   21ede:	68b3      	ldr	r3, [r6, #8]
   21ee0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
{
   21ee4:	4605      	mov	r5, r0
}
#include <syscalls/k_thread_join_mrsh.c>

static inline void z_vrfy_k_thread_abort(k_tid_t thread)
{
	if (thread_obj_validate(thread)) {
   21ee6:	f007 fc52 	bl	2978e <thread_obj_validate>
   21eea:	bb08      	cbnz	r0, 21f30 <z_mrsh_k_thread_abort+0x58>
		return;
	}

	Z_OOPS(Z_SYSCALL_VERIFY_MSG(!(thread->base.user_options & K_ESSENTIAL),
   21eec:	7b2b      	ldrb	r3, [r5, #12]
   21eee:	07db      	lsls	r3, r3, #31
   21ef0:	d51b      	bpl.n	21f2a <z_mrsh_k_thread_abort+0x52>
   21ef2:	f007 fc38 	bl	29766 <arch_is_user_context>
   21ef6:	4c12      	ldr	r4, [pc, #72]	; (21f40 <z_mrsh_k_thread_abort+0x68>)
   21ef8:	4b12      	ldr	r3, [pc, #72]	; (21f44 <z_mrsh_k_thread_abort+0x6c>)
   21efa:	1ae4      	subs	r4, r4, r3
   21efc:	08e4      	lsrs	r4, r4, #3
   21efe:	01a4      	lsls	r4, r4, #6
   21f00:	f044 0401 	orr.w	r4, r4, #1
   21f04:	b150      	cbz	r0, 21f1c <z_mrsh_k_thread_abort+0x44>
   21f06:	4a10      	ldr	r2, [pc, #64]	; (21f48 <z_mrsh_k_thread_abort+0x70>)
   21f08:	4910      	ldr	r1, [pc, #64]	; (21f4c <z_mrsh_k_thread_abort+0x74>)
   21f0a:	462b      	mov	r3, r5
   21f0c:	4620      	mov	r0, r4
   21f0e:	f002 ffc2 	bl	24e96 <log_from_user>
   21f12:	68b3      	ldr	r3, [r6, #8]
   21f14:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   21f18:	f004 fda0 	bl	26a5c <arch_syscall_oops>
   21f1c:	490a      	ldr	r1, [pc, #40]	; (21f48 <z_mrsh_k_thread_abort+0x70>)
   21f1e:	480b      	ldr	r0, [pc, #44]	; (21f4c <z_mrsh_k_thread_abort+0x74>)
   21f20:	4623      	mov	r3, r4
   21f22:	462a      	mov	r2, r5
   21f24:	f002 fffe 	bl	24f24 <log_2>
   21f28:	e7f3      	b.n	21f12 <z_mrsh_k_thread_abort+0x3a>
				    "aborting essential thread %p", thread));

	z_impl_k_thread_abort((struct k_thread *)thread);
   21f2a:	4628      	mov	r0, r5
   21f2c:	f7e4 fe4c 	bl	6bc8 <z_impl_k_thread_abort>
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	z_vrfy_k_thread_abort(*(k_tid_t*)&arg0)
;
	_current->syscall_frame = NULL;
   21f30:	68b3      	ldr	r3, [r6, #8]
   21f32:	2000      	movs	r0, #0
   21f34:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	return 0;
}
   21f38:	bd70      	pop	{r4, r5, r6, pc}
   21f3a:	bf00      	nop
   21f3c:	200023f4 	.word	0x200023f4
   21f40:	0002a810 	.word	0x0002a810
   21f44:	0002a6d0 	.word	0x0002a6d0
   21f48:	0002f0a5 	.word	0x0002f0a5
   21f4c:	0002eff6 	.word	0x0002eff6

00021f50 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   21f50:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   21f52:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   21f56:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   21f58:	e9cd 6700 	strd	r6, r7, [sp]
   21f5c:	f7ff faa0 	bl	214a0 <z_pend_curr>

	if (data != NULL) {
   21f60:	b11c      	cbz	r4, 21f6a <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   21f62:	4b03      	ldr	r3, [pc, #12]	; (21f70 <z_sched_wait+0x20>)
   21f64:	689b      	ldr	r3, [r3, #8]
   21f66:	695b      	ldr	r3, [r3, #20]
   21f68:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   21f6a:	b002      	add	sp, #8
   21f6c:	bdd0      	pop	{r4, r6, r7, pc}
   21f6e:	bf00      	nop
   21f70:	200023f4 	.word	0x200023f4

00021f74 <z_vrfy_k_sem_init>:
}

#ifdef CONFIG_USERSPACE
int z_vrfy_k_sem_init(struct k_sem *sem, unsigned int initial_count,
		      unsigned int limit)
{
   21f74:	b570      	push	{r4, r5, r6, lr}
   21f76:	4604      	mov	r4, r0
   21f78:	460d      	mov	r5, r1
   21f7a:	4616      	mov	r6, r2
	Z_OOPS(Z_SYSCALL_OBJ_INIT(sem, K_OBJ_SEM));
   21f7c:	f7de f8c0 	bl	100 <z_object_find>
   21f80:	2201      	movs	r2, #1
   21f82:	4621      	mov	r1, r4
   21f84:	f007 fd54 	bl	29a30 <z_obj_validation_check.constprop.0>
   21f88:	b1d0      	cbz	r0, 21fc0 <z_vrfy_k_sem_init+0x4c>
   21f8a:	f007 fd47 	bl	29a1c <arch_is_user_context>
   21f8e:	4b10      	ldr	r3, [pc, #64]	; (21fd0 <z_vrfy_k_sem_init+0x5c>)
   21f90:	4a10      	ldr	r2, [pc, #64]	; (21fd4 <z_vrfy_k_sem_init+0x60>)
   21f92:	1a9b      	subs	r3, r3, r2
   21f94:	08db      	lsrs	r3, r3, #3
   21f96:	019b      	lsls	r3, r3, #6
   21f98:	f043 0301 	orr.w	r3, r3, #1
   21f9c:	b150      	cbz	r0, 21fb4 <z_vrfy_k_sem_init+0x40>
   21f9e:	4a0e      	ldr	r2, [pc, #56]	; (21fd8 <z_vrfy_k_sem_init+0x64>)
   21fa0:	490e      	ldr	r1, [pc, #56]	; (21fdc <z_vrfy_k_sem_init+0x68>)
   21fa2:	4618      	mov	r0, r3
   21fa4:	f002 ff77 	bl	24e96 <log_from_user>
   21fa8:	4b0d      	ldr	r3, [pc, #52]	; (21fe0 <z_vrfy_k_sem_init+0x6c>)
   21faa:	689b      	ldr	r3, [r3, #8]
   21fac:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   21fb0:	f004 fd54 	bl	26a5c <arch_syscall_oops>
   21fb4:	4908      	ldr	r1, [pc, #32]	; (21fd8 <z_vrfy_k_sem_init+0x64>)
   21fb6:	4809      	ldr	r0, [pc, #36]	; (21fdc <z_vrfy_k_sem_init+0x68>)
   21fb8:	461a      	mov	r2, r3
   21fba:	f002 ff9f 	bl	24efc <log_1>
   21fbe:	e7f3      	b.n	21fa8 <z_vrfy_k_sem_init+0x34>
	return z_impl_k_sem_init(sem, initial_count, limit);
   21fc0:	4632      	mov	r2, r6
   21fc2:	4629      	mov	r1, r5
   21fc4:	4620      	mov	r0, r4
}
   21fc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   21fca:	f007 bd40 	b.w	29a4e <z_impl_k_sem_init>
   21fce:	bf00      	nop
   21fd0:	0002a810 	.word	0x0002a810
   21fd4:	0002a6d0 	.word	0x0002a6d0
   21fd8:	0002f0bb 	.word	0x0002f0bb
   21fdc:	0002e72d 	.word	0x0002e72d
   21fe0:	200023f4 	.word	0x200023f4

00021fe4 <z_mrsh_k_sem_init>:
#include <syscalls/kernel.h>

extern int z_vrfy_k_sem_init(struct k_sem * sem, unsigned int initial_count, unsigned int limit);
uintptr_t z_mrsh_k_sem_init(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   21fe4:	b538      	push	{r3, r4, r5, lr}
	_current->syscall_frame = ssf;
   21fe6:	4c06      	ldr	r4, [pc, #24]	; (22000 <z_mrsh_k_sem_init+0x1c>)
   21fe8:	9d06      	ldr	r5, [sp, #24]
   21fea:	68a3      	ldr	r3, [r4, #8]
   21fec:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	int ret = z_vrfy_k_sem_init(*(struct k_sem **)&arg0, *(unsigned int*)&arg1, *(unsigned int*)&arg2)
   21ff0:	f7ff ffc0 	bl	21f74 <z_vrfy_k_sem_init>
;
	_current->syscall_frame = NULL;
   21ff4:	68a3      	ldr	r3, [r4, #8]
   21ff6:	2200      	movs	r2, #0
   21ff8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	return (uintptr_t) ret;
}
   21ffc:	bd38      	pop	{r3, r4, r5, pc}
   21ffe:	bf00      	nop
   22000:	200023f4 	.word	0x200023f4

00022004 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   22004:	b538      	push	{r3, r4, r5, lr}
   22006:	4604      	mov	r4, r0
	__asm__ volatile(
   22008:	f04f 0320 	mov.w	r3, #32
   2200c:	f3ef 8511 	mrs	r5, BASEPRI
   22010:	f383 8811 	msr	BASEPRI, r3
   22014:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   22018:	f007 fc9e 	bl	29958 <z_unpend_first_thread>

	if (thread != NULL) {
   2201c:	b150      	cbz	r0, 22034 <z_impl_k_sem_give+0x30>
   2201e:	2200      	movs	r2, #0
   22020:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   22024:	f007 fc51 	bl	298ca <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   22028:	4629      	mov	r1, r5
   2202a:	4808      	ldr	r0, [pc, #32]	; (2204c <z_impl_k_sem_give+0x48>)
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   2202c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   22030:	f7ff b9b4 	b.w	2139c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   22034:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   22038:	429a      	cmp	r2, r3
   2203a:	bf18      	it	ne
   2203c:	3301      	addne	r3, #1
   2203e:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   22040:	2102      	movs	r1, #2
   22042:	f104 0010 	add.w	r0, r4, #16
   22046:	f008 f844 	bl	2a0d2 <z_handle_obj_poll_events>
}
   2204a:	e7ed      	b.n	22028 <z_impl_k_sem_give+0x24>
   2204c:	20002bb3 	.word	0x20002bb3

00022050 <z_mrsh_k_sem_give>:
#include <syscalls/kernel.h>

extern void z_vrfy_k_sem_give(struct k_sem * sem);
uintptr_t z_mrsh_k_sem_give(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   22050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	_current->syscall_frame = ssf;
   22052:	4f18      	ldr	r7, [pc, #96]	; (220b4 <z_mrsh_k_sem_give+0x64>)
   22054:	9a08      	ldr	r2, [sp, #32]
   22056:	68bb      	ldr	r3, [r7, #8]
{
   22058:	4605      	mov	r5, r0
	_current->syscall_frame = ssf;
   2205a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

#ifdef CONFIG_USERSPACE
static inline void z_vrfy_k_sem_give(struct k_sem *sem)
{
	Z_OOPS(Z_SYSCALL_OBJ(sem, K_OBJ_SEM));
   2205e:	f7de f84f 	bl	100 <z_object_find>
   22062:	2200      	movs	r2, #0
   22064:	4629      	mov	r1, r5
   22066:	f007 fce3 	bl	29a30 <z_obj_validation_check.constprop.0>
   2206a:	463e      	mov	r6, r7
   2206c:	4604      	mov	r4, r0
   2206e:	b1c8      	cbz	r0, 220a4 <z_mrsh_k_sem_give+0x54>
   22070:	f007 fcd4 	bl	29a1c <arch_is_user_context>
   22074:	4b10      	ldr	r3, [pc, #64]	; (220b8 <z_mrsh_k_sem_give+0x68>)
   22076:	4a11      	ldr	r2, [pc, #68]	; (220bc <z_mrsh_k_sem_give+0x6c>)
   22078:	1a9b      	subs	r3, r3, r2
   2207a:	08db      	lsrs	r3, r3, #3
   2207c:	019b      	lsls	r3, r3, #6
   2207e:	f043 0301 	orr.w	r3, r3, #1
   22082:	b148      	cbz	r0, 22098 <z_mrsh_k_sem_give+0x48>
   22084:	4a0e      	ldr	r2, [pc, #56]	; (220c0 <z_mrsh_k_sem_give+0x70>)
   22086:	490f      	ldr	r1, [pc, #60]	; (220c4 <z_mrsh_k_sem_give+0x74>)
   22088:	4618      	mov	r0, r3
   2208a:	f002 ff04 	bl	24e96 <log_from_user>
   2208e:	68b3      	ldr	r3, [r6, #8]
   22090:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   22094:	f004 fce2 	bl	26a5c <arch_syscall_oops>
   22098:	4909      	ldr	r1, [pc, #36]	; (220c0 <z_mrsh_k_sem_give+0x70>)
   2209a:	480a      	ldr	r0, [pc, #40]	; (220c4 <z_mrsh_k_sem_give+0x74>)
   2209c:	461a      	mov	r2, r3
   2209e:	f002 ff2d 	bl	24efc <log_1>
   220a2:	e7f4      	b.n	2208e <z_mrsh_k_sem_give+0x3e>
	z_impl_k_sem_give(sem);
   220a4:	4628      	mov	r0, r5
   220a6:	f7ff ffad 	bl	22004 <z_impl_k_sem_give>
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	z_vrfy_k_sem_give(*(struct k_sem **)&arg0)
;
	_current->syscall_frame = NULL;
   220aa:	68bb      	ldr	r3, [r7, #8]
	return 0;
}
   220ac:	4620      	mov	r0, r4
	_current->syscall_frame = NULL;
   220ae:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
}
   220b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   220b4:	200023f4 	.word	0x200023f4
   220b8:	0002a810 	.word	0x0002a810
   220bc:	0002a6d0 	.word	0x0002a6d0
   220c0:	0002f0cd 	.word	0x0002f0cd
   220c4:	0002e72d 	.word	0x0002e72d

000220c8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   220c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   220ca:	4614      	mov	r4, r2
   220cc:	461d      	mov	r5, r3
   220ce:	f04f 0320 	mov.w	r3, #32
   220d2:	f3ef 8111 	mrs	r1, BASEPRI
   220d6:	f383 8811 	msr	BASEPRI, r3
   220da:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   220de:	6883      	ldr	r3, [r0, #8]
   220e0:	b143      	cbz	r3, 220f4 <z_impl_k_sem_take+0x2c>
		sem->count--;
   220e2:	3b01      	subs	r3, #1
   220e4:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   220e6:	f381 8811 	msr	BASEPRI, r1
   220ea:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   220ee:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   220f0:	b003      	add	sp, #12
   220f2:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   220f4:	ea54 0305 	orrs.w	r3, r4, r5
   220f8:	d106      	bne.n	22108 <z_impl_k_sem_take+0x40>
   220fa:	f381 8811 	msr	BASEPRI, r1
   220fe:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   22102:	f06f 000f 	mvn.w	r0, #15
   22106:	e7f3      	b.n	220f0 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   22108:	4602      	mov	r2, r0
   2210a:	e9cd 4500 	strd	r4, r5, [sp]
   2210e:	4802      	ldr	r0, [pc, #8]	; (22118 <z_impl_k_sem_take+0x50>)
   22110:	f7ff f9c6 	bl	214a0 <z_pend_curr>
	return ret;
   22114:	e7ec      	b.n	220f0 <z_impl_k_sem_take+0x28>
   22116:	bf00      	nop
   22118:	20002bb3 	.word	0x20002bb3

0002211c <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
   2211c:	b570      	push	{r4, r5, r6, lr}
   2211e:	4604      	mov	r4, r0
	__asm__ volatile(
   22120:	f04f 0320 	mov.w	r3, #32
   22124:	f3ef 8511 	mrs	r5, BASEPRI
   22128:	f383 8811 	msr	BASEPRI, r3
   2212c:	f3bf 8f6f 	isb	sy
   22130:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
   22134:	4620      	mov	r0, r4
   22136:	f007 fc0f 	bl	29958 <z_unpend_first_thread>
		if (thread == NULL) {
   2213a:	b120      	cbz	r0, 22146 <z_impl_k_sem_reset+0x2a>
   2213c:	f8c0 6090 	str.w	r6, [r0, #144]	; 0x90
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
   22140:	f007 fbc3 	bl	298ca <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
   22144:	e7f6      	b.n	22134 <z_impl_k_sem_reset+0x18>
	}
	sem->count = 0;
   22146:	60a0      	str	r0, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   22148:	2102      	movs	r1, #2
   2214a:	f104 0010 	add.w	r0, r4, #16
   2214e:	f007 ffc0 	bl	2a0d2 <z_handle_obj_poll_events>
	handle_poll_events(sem);

	z_reschedule(&lock, key);
   22152:	4629      	mov	r1, r5
   22154:	4802      	ldr	r0, [pc, #8]	; (22160 <z_impl_k_sem_reset+0x44>)
}
   22156:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   2215a:	f7ff b91f 	b.w	2139c <z_reschedule>
   2215e:	bf00      	nop
   22160:	20002bb3 	.word	0x20002bb3

00022164 <z_mrsh_k_sem_take>:
#include <syscalls/kernel.h>

extern int z_vrfy_k_sem_take(struct k_sem * sem, k_timeout_t timeout);
uintptr_t z_mrsh_k_sem_take(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   22164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	_current->syscall_frame = ssf;
   22168:	4f1a      	ldr	r7, [pc, #104]	; (221d4 <z_mrsh_k_sem_take+0x70>)
   2216a:	68bb      	ldr	r3, [r7, #8]
{
   2216c:	4690      	mov	r8, r2
	_current->syscall_frame = ssf;
   2216e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   22170:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
{
   22174:	4605      	mov	r5, r0
   22176:	4689      	mov	r9, r1

#ifdef CONFIG_USERSPACE
static inline int z_vrfy_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
	Z_OOPS(Z_SYSCALL_OBJ(sem, K_OBJ_SEM));
   22178:	f7dd ffc2 	bl	100 <z_object_find>
   2217c:	2200      	movs	r2, #0
   2217e:	4629      	mov	r1, r5
   22180:	f007 fc56 	bl	29a30 <z_obj_validation_check.constprop.0>
   22184:	463e      	mov	r6, r7
   22186:	4604      	mov	r4, r0
   22188:	b1c8      	cbz	r0, 221be <z_mrsh_k_sem_take+0x5a>
   2218a:	f007 fc47 	bl	29a1c <arch_is_user_context>
   2218e:	4b12      	ldr	r3, [pc, #72]	; (221d8 <z_mrsh_k_sem_take+0x74>)
   22190:	4a12      	ldr	r2, [pc, #72]	; (221dc <z_mrsh_k_sem_take+0x78>)
   22192:	1a9b      	subs	r3, r3, r2
   22194:	08db      	lsrs	r3, r3, #3
   22196:	019b      	lsls	r3, r3, #6
   22198:	f043 0301 	orr.w	r3, r3, #1
   2219c:	b148      	cbz	r0, 221b2 <z_mrsh_k_sem_take+0x4e>
   2219e:	4a10      	ldr	r2, [pc, #64]	; (221e0 <z_mrsh_k_sem_take+0x7c>)
   221a0:	4910      	ldr	r1, [pc, #64]	; (221e4 <z_mrsh_k_sem_take+0x80>)
   221a2:	4618      	mov	r0, r3
   221a4:	f002 fe77 	bl	24e96 <log_from_user>
   221a8:	68b3      	ldr	r3, [r6, #8]
   221aa:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   221ae:	f004 fc55 	bl	26a5c <arch_syscall_oops>
   221b2:	490b      	ldr	r1, [pc, #44]	; (221e0 <z_mrsh_k_sem_take+0x7c>)
   221b4:	480b      	ldr	r0, [pc, #44]	; (221e4 <z_mrsh_k_sem_take+0x80>)
   221b6:	461a      	mov	r2, r3
   221b8:	f002 fea0 	bl	24efc <log_1>
   221bc:	e7f4      	b.n	221a8 <z_mrsh_k_sem_take+0x44>
	return z_impl_k_sem_take((struct k_sem *)sem, timeout);
   221be:	4643      	mov	r3, r8
   221c0:	464a      	mov	r2, r9
   221c2:	4628      	mov	r0, r5
   221c4:	f7ff ff80 	bl	220c8 <z_impl_k_sem_take>
	union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0;
	parm0.split.lo = arg1;
	parm0.split.hi = arg2;
	int ret = z_vrfy_k_sem_take(*(struct k_sem **)&arg0, parm0.val)
;
	_current->syscall_frame = NULL;
   221c8:	68bb      	ldr	r3, [r7, #8]
   221ca:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
	return (uintptr_t) ret;
}
   221ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   221d2:	bf00      	nop
   221d4:	200023f4 	.word	0x200023f4
   221d8:	0002a810 	.word	0x0002a810
   221dc:	0002a6d0 	.word	0x0002a6d0
   221e0:	0002f0df 	.word	0x0002f0df
   221e4:	0002e72d 	.word	0x0002e72d

000221e8 <z_mrsh_k_sem_reset>:
#include <syscalls/kernel.h>

extern void z_vrfy_k_sem_reset(struct k_sem * sem);
uintptr_t z_mrsh_k_sem_reset(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   221e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	_current->syscall_frame = ssf;
   221ea:	4f18      	ldr	r7, [pc, #96]	; (2224c <z_mrsh_k_sem_reset+0x64>)
   221ec:	9a08      	ldr	r2, [sp, #32]
   221ee:	68bb      	ldr	r3, [r7, #8]
{
   221f0:	4605      	mov	r5, r0
	_current->syscall_frame = ssf;
   221f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
#include <syscalls/k_sem_take_mrsh.c>

static inline void z_vrfy_k_sem_reset(struct k_sem *sem)
{
	Z_OOPS(Z_SYSCALL_OBJ(sem, K_OBJ_SEM));
   221f6:	f7dd ff83 	bl	100 <z_object_find>
   221fa:	2200      	movs	r2, #0
   221fc:	4629      	mov	r1, r5
   221fe:	f007 fc17 	bl	29a30 <z_obj_validation_check.constprop.0>
   22202:	463e      	mov	r6, r7
   22204:	4604      	mov	r4, r0
   22206:	b1c8      	cbz	r0, 2223c <z_mrsh_k_sem_reset+0x54>
   22208:	f007 fc08 	bl	29a1c <arch_is_user_context>
   2220c:	4b10      	ldr	r3, [pc, #64]	; (22250 <z_mrsh_k_sem_reset+0x68>)
   2220e:	4a11      	ldr	r2, [pc, #68]	; (22254 <z_mrsh_k_sem_reset+0x6c>)
   22210:	1a9b      	subs	r3, r3, r2
   22212:	08db      	lsrs	r3, r3, #3
   22214:	019b      	lsls	r3, r3, #6
   22216:	f043 0301 	orr.w	r3, r3, #1
   2221a:	b148      	cbz	r0, 22230 <z_mrsh_k_sem_reset+0x48>
   2221c:	4a0e      	ldr	r2, [pc, #56]	; (22258 <z_mrsh_k_sem_reset+0x70>)
   2221e:	490f      	ldr	r1, [pc, #60]	; (2225c <z_mrsh_k_sem_reset+0x74>)
   22220:	4618      	mov	r0, r3
   22222:	f002 fe38 	bl	24e96 <log_from_user>
   22226:	68b3      	ldr	r3, [r6, #8]
   22228:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   2222c:	f004 fc16 	bl	26a5c <arch_syscall_oops>
   22230:	4909      	ldr	r1, [pc, #36]	; (22258 <z_mrsh_k_sem_reset+0x70>)
   22232:	480a      	ldr	r0, [pc, #40]	; (2225c <z_mrsh_k_sem_reset+0x74>)
   22234:	461a      	mov	r2, r3
   22236:	f002 fe61 	bl	24efc <log_1>
   2223a:	e7f4      	b.n	22226 <z_mrsh_k_sem_reset+0x3e>
	z_impl_k_sem_reset(sem);
   2223c:	4628      	mov	r0, r5
   2223e:	f7ff ff6d 	bl	2211c <z_impl_k_sem_reset>
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	z_vrfy_k_sem_reset(*(struct k_sem **)&arg0)
;
	_current->syscall_frame = NULL;
   22242:	68bb      	ldr	r3, [r7, #8]
	return 0;
}
   22244:	4620      	mov	r0, r4
	_current->syscall_frame = NULL;
   22246:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
}
   2224a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2224c:	200023f4 	.word	0x200023f4
   22250:	0002a810 	.word	0x0002a810
   22254:	0002a6d0 	.word	0x0002a6d0
   22258:	0002f0f1 	.word	0x0002f0f1
   2225c:	0002e72d 	.word	0x0002e72d

00022260 <z_mrsh_k_sem_count_get>:
#include <syscalls/kernel.h>

extern unsigned int z_vrfy_k_sem_count_get(struct k_sem * sem);
uintptr_t z_mrsh_k_sem_count_get(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   22260:	b570      	push	{r4, r5, r6, lr}
	_current->syscall_frame = ssf;
   22262:	4e17      	ldr	r6, [pc, #92]	; (222c0 <z_mrsh_k_sem_count_get+0x60>)
   22264:	9a06      	ldr	r2, [sp, #24]
   22266:	68b3      	ldr	r3, [r6, #8]
{
   22268:	4604      	mov	r4, r0
	_current->syscall_frame = ssf;
   2226a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
#include <syscalls/k_sem_reset_mrsh.c>

static inline unsigned int z_vrfy_k_sem_count_get(struct k_sem *sem)
{
	Z_OOPS(Z_SYSCALL_OBJ(sem, K_OBJ_SEM));
   2226e:	f7dd ff47 	bl	100 <z_object_find>
   22272:	2200      	movs	r2, #0
   22274:	4621      	mov	r1, r4
   22276:	f007 fbdb 	bl	29a30 <z_obj_validation_check.constprop.0>
   2227a:	4635      	mov	r5, r6
   2227c:	4603      	mov	r3, r0
   2227e:	b1c8      	cbz	r0, 222b4 <z_mrsh_k_sem_count_get+0x54>
   22280:	f007 fbcc 	bl	29a1c <arch_is_user_context>
   22284:	4b0f      	ldr	r3, [pc, #60]	; (222c4 <z_mrsh_k_sem_count_get+0x64>)
   22286:	4a10      	ldr	r2, [pc, #64]	; (222c8 <z_mrsh_k_sem_count_get+0x68>)
   22288:	1a9b      	subs	r3, r3, r2
   2228a:	08db      	lsrs	r3, r3, #3
   2228c:	019b      	lsls	r3, r3, #6
   2228e:	f043 0301 	orr.w	r3, r3, #1
   22292:	b148      	cbz	r0, 222a8 <z_mrsh_k_sem_count_get+0x48>
   22294:	4a0d      	ldr	r2, [pc, #52]	; (222cc <z_mrsh_k_sem_count_get+0x6c>)
   22296:	490e      	ldr	r1, [pc, #56]	; (222d0 <z_mrsh_k_sem_count_get+0x70>)
   22298:	4618      	mov	r0, r3
   2229a:	f002 fdfc 	bl	24e96 <log_from_user>
   2229e:	68ab      	ldr	r3, [r5, #8]
   222a0:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   222a4:	f004 fbda 	bl	26a5c <arch_syscall_oops>
   222a8:	4908      	ldr	r1, [pc, #32]	; (222cc <z_mrsh_k_sem_count_get+0x6c>)
   222aa:	4809      	ldr	r0, [pc, #36]	; (222d0 <z_mrsh_k_sem_count_get+0x70>)
   222ac:	461a      	mov	r2, r3
   222ae:	f002 fe25 	bl	24efc <log_1>
   222b2:	e7f4      	b.n	2229e <z_mrsh_k_sem_count_get+0x3e>
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	unsigned int ret = z_vrfy_k_sem_count_get(*(struct k_sem **)&arg0)
;
	_current->syscall_frame = NULL;
   222b4:	68b2      	ldr	r2, [r6, #8]
	return z_impl_k_sem_count_get(sem);
   222b6:	68a0      	ldr	r0, [r4, #8]
   222b8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	return (uintptr_t) ret;
}
   222bc:	bd70      	pop	{r4, r5, r6, pc}
   222be:	bf00      	nop
   222c0:	200023f4 	.word	0x200023f4
   222c4:	0002a810 	.word	0x0002a810
   222c8:	0002a6d0 	.word	0x0002a6d0
   222cc:	0002f104 	.word	0x0002f104
   222d0:	0002e72d 	.word	0x0002e72d

000222d4 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   222d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   222d6:	4b09      	ldr	r3, [pc, #36]	; (222fc <k_sys_work_q_init+0x28>)
   222d8:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   222da:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   222dc:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   222de:	9300      	str	r3, [sp, #0]
   222e0:	4907      	ldr	r1, [pc, #28]	; (22300 <k_sys_work_q_init+0x2c>)
   222e2:	4808      	ldr	r0, [pc, #32]	; (22304 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   222e4:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   222e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   222ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
   222f0:	f000 fc7a 	bl	22be8 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   222f4:	4620      	mov	r0, r4
   222f6:	b004      	add	sp, #16
   222f8:	bd10      	pop	{r4, pc}
   222fa:	bf00      	nop
   222fc:	0002f11b 	.word	0x0002f11b
   22300:	200049f0 	.word	0x200049f0
   22304:	20000ac0 	.word	0x20000ac0

00022308 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
   22308:	b4d0      	push	{r4, r6, r7}
   2230a:	4616      	mov	r6, r2
   2230c:	461f      	mov	r7, r3
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2230e:	ea56 0107 	orrs.w	r1, r6, r7
   22312:	d102      	bne.n	2231a <schedule_new_thread+0x12>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
   22314:	bcd0      	pop	{r4, r6, r7}
	z_sched_start(thread);
   22316:	f7ff ba53 	b.w	217c0 <z_sched_start>
}
   2231a:	bcd0      	pop	{r4, r6, r7}
   2231c:	4901      	ldr	r1, [pc, #4]	; (22324 <schedule_new_thread+0x1c>)
   2231e:	3018      	adds	r0, #24
   22320:	f000 bd70 	b.w	22e04 <z_add_timeout>
   22324:	000298eb 	.word	0x000298eb

00022328 <z_mrsh_k_busy_wait>:
#include <syscalls/kernel.h>

extern void z_vrfy_k_busy_wait(uint32_t usec_to_wait);
uintptr_t z_mrsh_k_busy_wait(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   22328:	b510      	push	{r4, lr}
	_current->syscall_frame = ssf;
   2232a:	4c06      	ldr	r4, [pc, #24]	; (22344 <z_mrsh_k_busy_wait+0x1c>)
   2232c:	9a04      	ldr	r2, [sp, #16]
   2232e:	68a3      	ldr	r3, [r4, #8]
   22330:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	z_impl_k_busy_wait(usec_to_wait);
   22334:	f007 fbbf 	bl	29ab6 <z_impl_k_busy_wait>
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	z_vrfy_k_busy_wait(*(uint32_t*)&arg0)
;
	_current->syscall_frame = NULL;
   22338:	68a3      	ldr	r3, [r4, #8]
   2233a:	2000      	movs	r0, #0
   2233c:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	return 0;
}
   22340:	bd10      	pop	{r4, pc}
   22342:	bf00      	nop
   22344:	200023f4 	.word	0x200023f4

00022348 <z_mrsh_k_thread_name_set>:

extern int z_vrfy_k_thread_name_set(k_tid_t thread, const char * str);
uintptr_t z_mrsh_k_thread_name_set(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
	_current->syscall_frame = ssf;
   22348:	4b03      	ldr	r3, [pc, #12]	; (22358 <z_mrsh_k_thread_name_set+0x10>)
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	int ret = z_vrfy_k_thread_name_set(*(k_tid_t*)&arg0, *(const char **)&arg1)
;
	_current->syscall_frame = NULL;
   2234a:	689b      	ldr	r3, [r3, #8]
   2234c:	2200      	movs	r2, #0
   2234e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	return (uintptr_t) ret;
}
   22352:	f06f 0057 	mvn.w	r0, #87	; 0x57
   22356:	4770      	bx	lr
   22358:	200023f4 	.word	0x200023f4

0002235c <z_mrsh_k_thread_name_copy>:
   2235c:	4b03      	ldr	r3, [pc, #12]	; (2236c <z_mrsh_k_thread_name_copy+0x10>)
   2235e:	689b      	ldr	r3, [r3, #8]
   22360:	2200      	movs	r2, #0
   22362:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   22366:	f06f 0057 	mvn.w	r0, #87	; 0x57
   2236a:	4770      	bx	lr
   2236c:	200023f4 	.word	0x200023f4

00022370 <z_mrsh_k_thread_start>:
#include <syscalls/kernel.h>

extern void z_vrfy_k_thread_start(k_tid_t thread);
uintptr_t z_mrsh_k_thread_start(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   22370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	_current->syscall_frame = ssf;
   22372:	4f19      	ldr	r7, [pc, #100]	; (223d8 <z_mrsh_k_thread_start+0x68>)
   22374:	9a08      	ldr	r2, [sp, #32]
   22376:	68bb      	ldr	r3, [r7, #8]
{
   22378:	4605      	mov	r5, r0
	_current->syscall_frame = ssf;
   2237a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	Z_OOPS(Z_SYSCALL_OBJ(thread, K_OBJ_THREAD));
   2237e:	f7dd febf 	bl	100 <z_object_find>
   22382:	2300      	movs	r3, #0
   22384:	2209      	movs	r2, #9
   22386:	4629      	mov	r1, r5
   22388:	f007 fb7e 	bl	29a88 <z_obj_validation_check>
   2238c:	463e      	mov	r6, r7
   2238e:	4604      	mov	r4, r0
   22390:	b1c8      	cbz	r0, 223c6 <z_mrsh_k_thread_start+0x56>
   22392:	f007 fb6f 	bl	29a74 <arch_is_user_context>
   22396:	4b11      	ldr	r3, [pc, #68]	; (223dc <z_mrsh_k_thread_start+0x6c>)
   22398:	4a11      	ldr	r2, [pc, #68]	; (223e0 <z_mrsh_k_thread_start+0x70>)
   2239a:	1a9b      	subs	r3, r3, r2
   2239c:	08db      	lsrs	r3, r3, #3
   2239e:	019b      	lsls	r3, r3, #6
   223a0:	f043 0301 	orr.w	r3, r3, #1
   223a4:	b148      	cbz	r0, 223ba <z_mrsh_k_thread_start+0x4a>
   223a6:	4a0f      	ldr	r2, [pc, #60]	; (223e4 <z_mrsh_k_thread_start+0x74>)
   223a8:	490f      	ldr	r1, [pc, #60]	; (223e8 <z_mrsh_k_thread_start+0x78>)
   223aa:	4618      	mov	r0, r3
   223ac:	f002 fd73 	bl	24e96 <log_from_user>
   223b0:	68b3      	ldr	r3, [r6, #8]
   223b2:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   223b6:	f004 fb51 	bl	26a5c <arch_syscall_oops>
   223ba:	490a      	ldr	r1, [pc, #40]	; (223e4 <z_mrsh_k_thread_start+0x74>)
   223bc:	480a      	ldr	r0, [pc, #40]	; (223e8 <z_mrsh_k_thread_start+0x78>)
   223be:	461a      	mov	r2, r3
   223c0:	f002 fd9c 	bl	24efc <log_1>
   223c4:	e7f4      	b.n	223b0 <z_mrsh_k_thread_start+0x40>
	z_sched_start(thread);
   223c6:	4628      	mov	r0, r5
   223c8:	f7ff f9fa 	bl	217c0 <z_sched_start>
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	z_vrfy_k_thread_start(*(k_tid_t*)&arg0)
;
	_current->syscall_frame = NULL;
   223cc:	68bb      	ldr	r3, [r7, #8]
	return 0;
}
   223ce:	4620      	mov	r0, r4
	_current->syscall_frame = NULL;
   223d0:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
}
   223d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   223d6:	bf00      	nop
   223d8:	200023f4 	.word	0x200023f4
   223dc:	0002a810 	.word	0x0002a810
   223e0:	0002a6d0 	.word	0x0002a6d0
   223e4:	0002f26a 	.word	0x0002f26a
   223e8:	0002e72d 	.word	0x0002e72d

000223ec <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   223ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   223f0:	b085      	sub	sp, #20
   223f2:	4604      	mov	r4, r0
   223f4:	460e      	mov	r6, r1
   223f6:	4617      	mov	r7, r2
   223f8:	4699      	mov	r9, r3
   223fa:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
		 "user thread %p with kernel-only stack %p",
		 new_thread, stack);
	z_object_init(new_thread);
	z_object_init(stack);
	new_thread->stack_obj = stack;
	new_thread->syscall_frame = NULL;
   223fe:	2500      	movs	r5, #0
	z_object_init(new_thread);
   22400:	f007 ffb1 	bl	2a366 <z_object_init>
	z_object_init(stack);
   22404:	4630      	mov	r0, r6
   22406:	f007 ffae 	bl	2a366 <z_object_init>
	new_thread->stack_obj = stack;
   2240a:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
	new_thread->syscall_frame = NULL;
   2240e:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
		arch_syscall_invoke2(*(uintptr_t *)&object, *(uintptr_t *)&thread, K_SYSCALL_K_OBJECT_ACCESS_GRANT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_object_access_grant(object, thread);
   22412:	4620      	mov	r0, r4
   22414:	4621      	mov	r1, r4
   22416:	f007 ff9b 	bl	2a350 <z_impl_k_object_access_grant>
	sys_dlist_init(&w->waitq);
   2241a:	f104 0358 	add.w	r3, r4, #88	; 0x58
	list->tail = (sys_dnode_t *)list;
   2241e:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
	thread_base->thread_state = (uint8_t)initial_state;
   22422:	2304      	movs	r3, #4
   22424:	7363      	strb	r3, [r4, #13]

	thread_base->prio = priority;
   22426:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	thread_base->pended_on = NULL;
   22428:	60a5      	str	r5, [r4, #8]
	node->prev = NULL;
   2242a:	e9c4 5506 	strd	r5, r5, [r4, #24]
	thread_base->user_options = (uint8_t)options;
   2242e:	f884 800c 	strb.w	r8, [r4, #12]
	thread_base->prio = priority;
   22432:	73a3      	strb	r3, [r4, #14]

	thread_base->sched_locked = 0U;
   22434:	73e5      	strb	r5, [r4, #15]
	if (z_stack_is_user_capable(stack)) {
   22436:	4630      	mov	r0, r6
   22438:	f007 fb48 	bl	29acc <z_stack_is_user_capable>
   2243c:	b350      	cbz	r0, 22494 <z_setup_new_thread+0xa8>
		stack_obj_size = Z_THREAD_STACK_SIZE_ADJUST(stack_size);
   2243e:	fab7 f387 	clz	r3, r7
   22442:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   22446:	40dd      	lsrs	r5, r3
   22448:	42af      	cmp	r7, r5
   2244a:	d903      	bls.n	22454 <z_setup_new_thread+0x68>
   2244c:	f1c3 0320 	rsb	r3, r3, #32
   22450:	2501      	movs	r5, #1
   22452:	409d      	lsls	r5, r3
	stack_ptr = (char *)stack + stack_obj_size;
   22454:	1973      	adds	r3, r6, r5
		(struct _thread_userspace_local_data *)(stack_ptr - delta);
   22456:	1f1a      	subs	r2, r3, #4
	new_thread->stack_info.size = stack_buf_size;
   22458:	66e5      	str	r5, [r4, #108]	; 0x6c
	stack_ptr -= delta;
   2245a:	f1a3 0508 	sub.w	r5, r3, #8
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2245e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   22460:	9302      	str	r3, [sp, #8]
   22462:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   22464:	9301      	str	r3, [sp, #4]
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   22466:	e9c4 2619 	strd	r2, r6, [r4, #100]	; 0x64
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2246a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2246c:	9300      	str	r3, [sp, #0]
	new_thread->stack_info.delta = delta;
   2246e:	2208      	movs	r2, #8
   22470:	6722      	str	r2, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   22472:	464b      	mov	r3, r9
   22474:	4631      	mov	r1, r6
   22476:	462a      	mov	r2, r5
	if (!_current) {
   22478:	4e0f      	ldr	r6, [pc, #60]	; (224b8 <z_setup_new_thread+0xcc>)
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2247a:	4620      	mov	r0, r4
   2247c:	f7e3 fe28 	bl	60d0 <arch_new_thread>
	new_thread->init_data = NULL;
   22480:	2300      	movs	r3, #0
   22482:	6563      	str	r3, [r4, #84]	; 0x54
	if (!_current) {
   22484:	68b3      	ldr	r3, [r6, #8]
   22486:	b94b      	cbnz	r3, 2249c <z_setup_new_thread+0xb0>
}
   22488:	4628      	mov	r0, r5
	new_thread->resource_pool = _current->resource_pool;
   2248a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
   2248e:	b005      	add	sp, #20
   22490:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   22494:	1dfd      	adds	r5, r7, #7
   22496:	f025 0507 	bic.w	r5, r5, #7
		stack_buf_size = stack_obj_size - K_KERNEL_STACK_RESERVED;
   2249a:	e7db      	b.n	22454 <z_setup_new_thread+0x68>
	z_mem_domain_init_thread(new_thread);
   2249c:	4620      	mov	r0, r4
   2249e:	f001 fc9d 	bl	23ddc <z_mem_domain_init_thread>
	if ((options & K_INHERIT_PERMS) != 0U) {
   224a2:	f018 0f08 	tst.w	r8, #8
   224a6:	d003      	beq.n	224b0 <z_setup_new_thread+0xc4>
		z_thread_perms_inherit(_current, new_thread);
   224a8:	68b0      	ldr	r0, [r6, #8]
   224aa:	4621      	mov	r1, r4
   224ac:	f001 fd06 	bl	23ebc <z_thread_perms_inherit>
	new_thread->resource_pool = _current->resource_pool;
   224b0:	68b3      	ldr	r3, [r6, #8]
   224b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   224b6:	e7e7      	b.n	22488 <z_setup_new_thread+0x9c>
   224b8:	200023f4 	.word	0x200023f4

000224bc <z_vrfy_k_thread_create>:
{
   224bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   224c0:	4605      	mov	r5, r0
   224c2:	b087      	sub	sp, #28
   224c4:	460f      	mov	r7, r1
   224c6:	4616      	mov	r6, r2
   224c8:	469a      	mov	sl, r3
   224ca:	e9dd b813 	ldrd	fp, r8, [sp, #76]	; 0x4c
	Z_OOPS(Z_SYSCALL_OBJ_NEVER_INIT(new_thread, K_OBJ_THREAD));
   224ce:	f7dd fe17 	bl	100 <z_object_find>
   224d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   224d6:	2209      	movs	r2, #9
   224d8:	4629      	mov	r1, r5
   224da:	f007 fad5 	bl	29a88 <z_obj_validation_check>
   224de:	4c6b      	ldr	r4, [pc, #428]	; (2268c <z_vrfy_k_thread_create+0x1d0>)
   224e0:	2800      	cmp	r0, #0
   224e2:	f000 80b7 	beq.w	22654 <z_vrfy_k_thread_create+0x198>
   224e6:	f007 fac5 	bl	29a74 <arch_is_user_context>
   224ea:	4b69      	ldr	r3, [pc, #420]	; (22690 <z_vrfy_k_thread_create+0x1d4>)
   224ec:	4a69      	ldr	r2, [pc, #420]	; (22694 <z_vrfy_k_thread_create+0x1d8>)
   224ee:	1a9b      	subs	r3, r3, r2
   224f0:	08db      	lsrs	r3, r3, #3
   224f2:	019b      	lsls	r3, r3, #6
   224f4:	f043 0301 	orr.w	r3, r3, #1
   224f8:	b128      	cbz	r0, 22506 <z_vrfy_k_thread_create+0x4a>
   224fa:	4a67      	ldr	r2, [pc, #412]	; (22698 <z_vrfy_k_thread_create+0x1dc>)
   224fc:	4967      	ldr	r1, [pc, #412]	; (2269c <z_vrfy_k_thread_create+0x1e0>)
	Z_OOPS(Z_SYSCALL_VERIFY(z_is_prio_lower_or_equal(prio,
   224fe:	4618      	mov	r0, r3
   22500:	f002 fcc9 	bl	24e96 <log_from_user>
   22504:	e0a1      	b.n	2264a <z_vrfy_k_thread_create+0x18e>
	Z_OOPS(Z_SYSCALL_OBJ_NEVER_INIT(new_thread, K_OBJ_THREAD));
   22506:	4964      	ldr	r1, [pc, #400]	; (22698 <z_vrfy_k_thread_create+0x1dc>)
   22508:	4864      	ldr	r0, [pc, #400]	; (2269c <z_vrfy_k_thread_create+0x1e0>)
   2250a:	461a      	mov	r2, r3
	Z_OOPS(Z_SYSCALL_VERIFY(z_is_prio_lower_or_equal(prio,
   2250c:	f002 fcf6 	bl	24efc <log_1>
   22510:	e09b      	b.n	2264a <z_vrfy_k_thread_create+0x18e>
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(z_obj_validation_check(stack_object, stack,
   22512:	4961      	ldr	r1, [pc, #388]	; (22698 <z_vrfy_k_thread_create+0x1dc>)
   22514:	4862      	ldr	r0, [pc, #392]	; (226a0 <z_vrfy_k_thread_create+0x1e4>)
   22516:	461a      	mov	r2, r3
   22518:	e7f8      	b.n	2250c <z_vrfy_k_thread_create+0x50>
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(total_size <= stack_obj_size,
   2251a:	4613      	mov	r3, r2
   2251c:	495e      	ldr	r1, [pc, #376]	; (22698 <z_vrfy_k_thread_create+0x1dc>)
   2251e:	4861      	ldr	r0, [pc, #388]	; (226a4 <z_vrfy_k_thread_create+0x1e8>)
   22520:	f8ad 5000 	strh.w	r5, [sp]
   22524:	4632      	mov	r2, r6
   22526:	f002 fd16 	bl	24f56 <log_3>
   2252a:	e08e      	b.n	2264a <z_vrfy_k_thread_create+0x18e>
	Z_OOPS(Z_SYSCALL_VERIFY(options & K_USER));
   2252c:	495a      	ldr	r1, [pc, #360]	; (22698 <z_vrfy_k_thread_create+0x1dc>)
   2252e:	485e      	ldr	r0, [pc, #376]	; (226a8 <z_vrfy_k_thread_create+0x1ec>)
   22530:	461a      	mov	r2, r3
   22532:	e7eb      	b.n	2250c <z_vrfy_k_thread_create+0x50>
	Z_OOPS(Z_SYSCALL_VERIFY(!(options & K_ESSENTIAL)));
   22534:	4958      	ldr	r1, [pc, #352]	; (22698 <z_vrfy_k_thread_create+0x1dc>)
   22536:	485d      	ldr	r0, [pc, #372]	; (226ac <z_vrfy_k_thread_create+0x1f0>)
   22538:	461a      	mov	r2, r3
   2253a:	e7e7      	b.n	2250c <z_vrfy_k_thread_create+0x50>
	Z_OOPS(Z_SYSCALL_VERIFY(_is_valid_prio(prio, NULL)));
   2253c:	4956      	ldr	r1, [pc, #344]	; (22698 <z_vrfy_k_thread_create+0x1dc>)
   2253e:	485c      	ldr	r0, [pc, #368]	; (226b0 <z_vrfy_k_thread_create+0x1f4>)
   22540:	461a      	mov	r2, r3
   22542:	e7e3      	b.n	2250c <z_vrfy_k_thread_create+0x50>
	Z_OOPS(Z_SYSCALL_VERIFY(z_is_prio_lower_or_equal(prio,
   22544:	4954      	ldr	r1, [pc, #336]	; (22698 <z_vrfy_k_thread_create+0x1dc>)
   22546:	485b      	ldr	r0, [pc, #364]	; (226b4 <z_vrfy_k_thread_create+0x1f8>)
   22548:	461a      	mov	r2, r3
   2254a:	e7df      	b.n	2250c <z_vrfy_k_thread_create+0x50>
	z_setup_new_thread(new_thread, stack, stack_size,
   2254c:	e9cd 8304 	strd	r8, r3, [sp, #16]
   22550:	9b12      	ldr	r3, [sp, #72]	; 0x48
   22552:	9302      	str	r3, [sp, #8]
   22554:	9b11      	ldr	r3, [sp, #68]	; 0x44
   22556:	9301      	str	r3, [sp, #4]
   22558:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2255a:	9300      	str	r3, [sp, #0]
   2255c:	f8cd b00c 	str.w	fp, [sp, #12]
   22560:	4653      	mov	r3, sl
   22562:	4632      	mov	r2, r6
   22564:	4639      	mov	r1, r7
   22566:	4628      	mov	r0, r5
   22568:	f7ff ff40 	bl	223ec <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   2256c:	e9dd 3416 	ldrd	r3, r4, [sp, #88]	; 0x58
   22570:	3401      	adds	r4, #1
   22572:	bf08      	it	eq
   22574:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   22578:	d004      	beq.n	22584 <z_vrfy_k_thread_create+0xc8>
		schedule_new_thread(new_thread, delay);
   2257a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   2257e:	4628      	mov	r0, r5
   22580:	f7ff fec2 	bl	22308 <schedule_new_thread>
}
   22584:	4628      	mov	r0, r5
   22586:	b007      	add	sp, #28
   22588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	Z_OOPS(Z_SYSCALL_VERIFY(z_is_prio_lower_or_equal(prio,
   2258c:	68a2      	ldr	r2, [r4, #8]
   2258e:	f992 200e 	ldrsb.w	r2, [r2, #14]
   22592:	455a      	cmp	r2, fp
   22594:	ddda      	ble.n	2254c <z_vrfy_k_thread_create+0x90>
   22596:	f007 fa6d 	bl	29a74 <arch_is_user_context>
   2259a:	4b3d      	ldr	r3, [pc, #244]	; (22690 <z_vrfy_k_thread_create+0x1d4>)
   2259c:	4a3d      	ldr	r2, [pc, #244]	; (22694 <z_vrfy_k_thread_create+0x1d8>)
   2259e:	1a9b      	subs	r3, r3, r2
   225a0:	08db      	lsrs	r3, r3, #3
   225a2:	019b      	lsls	r3, r3, #6
   225a4:	f043 0301 	orr.w	r3, r3, #1
   225a8:	2800      	cmp	r0, #0
   225aa:	d0cb      	beq.n	22544 <z_vrfy_k_thread_create+0x88>
   225ac:	4a3a      	ldr	r2, [pc, #232]	; (22698 <z_vrfy_k_thread_create+0x1dc>)
   225ae:	4941      	ldr	r1, [pc, #260]	; (226b4 <z_vrfy_k_thread_create+0x1f8>)
   225b0:	e7a5      	b.n	224fe <z_vrfy_k_thread_create+0x42>
   225b2:	f10b 0210 	add.w	r2, fp, #16
   225b6:	2a1e      	cmp	r2, #30
   225b8:	d9e8      	bls.n	2258c <z_vrfy_k_thread_create+0xd0>
   225ba:	f007 fa5b 	bl	29a74 <arch_is_user_context>
   225be:	4b34      	ldr	r3, [pc, #208]	; (22690 <z_vrfy_k_thread_create+0x1d4>)
   225c0:	4a34      	ldr	r2, [pc, #208]	; (22694 <z_vrfy_k_thread_create+0x1d8>)
   225c2:	1a9b      	subs	r3, r3, r2
   225c4:	08db      	lsrs	r3, r3, #3
	Z_OOPS(Z_SYSCALL_VERIFY(_is_valid_prio(prio, NULL)));
   225c6:	019b      	lsls	r3, r3, #6
   225c8:	f043 0301 	orr.w	r3, r3, #1
   225cc:	2800      	cmp	r0, #0
   225ce:	d0b5      	beq.n	2253c <z_vrfy_k_thread_create+0x80>
   225d0:	4a31      	ldr	r2, [pc, #196]	; (22698 <z_vrfy_k_thread_create+0x1dc>)
   225d2:	4937      	ldr	r1, [pc, #220]	; (226b0 <z_vrfy_k_thread_create+0x1f4>)
   225d4:	e793      	b.n	224fe <z_vrfy_k_thread_create+0x42>
	Z_OOPS(Z_SYSCALL_VERIFY(!(options & K_ESSENTIAL)));
   225d6:	f018 0301 	ands.w	r3, r8, #1
   225da:	d0ea      	beq.n	225b2 <z_vrfy_k_thread_create+0xf6>
   225dc:	f007 fa4a 	bl	29a74 <arch_is_user_context>
   225e0:	4b2b      	ldr	r3, [pc, #172]	; (22690 <z_vrfy_k_thread_create+0x1d4>)
   225e2:	4a2c      	ldr	r2, [pc, #176]	; (22694 <z_vrfy_k_thread_create+0x1d8>)
   225e4:	1a9b      	subs	r3, r3, r2
   225e6:	08db      	lsrs	r3, r3, #3
   225e8:	019b      	lsls	r3, r3, #6
   225ea:	f043 0301 	orr.w	r3, r3, #1
   225ee:	2800      	cmp	r0, #0
   225f0:	d0a0      	beq.n	22534 <z_vrfy_k_thread_create+0x78>
   225f2:	4a29      	ldr	r2, [pc, #164]	; (22698 <z_vrfy_k_thread_create+0x1dc>)
   225f4:	492d      	ldr	r1, [pc, #180]	; (226ac <z_vrfy_k_thread_create+0x1f0>)
   225f6:	e782      	b.n	224fe <z_vrfy_k_thread_create+0x42>
	Z_OOPS(Z_SYSCALL_VERIFY(options & K_USER));
   225f8:	f018 0f04 	tst.w	r8, #4
   225fc:	d1eb      	bne.n	225d6 <z_vrfy_k_thread_create+0x11a>
   225fe:	f007 fa39 	bl	29a74 <arch_is_user_context>
   22602:	4b23      	ldr	r3, [pc, #140]	; (22690 <z_vrfy_k_thread_create+0x1d4>)
   22604:	4a23      	ldr	r2, [pc, #140]	; (22694 <z_vrfy_k_thread_create+0x1d8>)
   22606:	1a9b      	subs	r3, r3, r2
   22608:	08db      	lsrs	r3, r3, #3
   2260a:	019b      	lsls	r3, r3, #6
   2260c:	f043 0301 	orr.w	r3, r3, #1
   22610:	2800      	cmp	r0, #0
   22612:	d08b      	beq.n	2252c <z_vrfy_k_thread_create+0x70>
   22614:	4a20      	ldr	r2, [pc, #128]	; (22698 <z_vrfy_k_thread_create+0x1dc>)
   22616:	4924      	ldr	r1, [pc, #144]	; (226a8 <z_vrfy_k_thread_create+0x1ec>)
   22618:	e771      	b.n	224fe <z_vrfy_k_thread_create+0x42>
	stack_obj_size = stack_object->data.stack_data->size;
   2261a:	f8d9 3008 	ldr.w	r3, [r9, #8]
   2261e:	681a      	ldr	r2, [r3, #0]
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(total_size <= stack_obj_size,
   22620:	4296      	cmp	r6, r2
   22622:	d9e9      	bls.n	225f8 <z_vrfy_k_thread_create+0x13c>
   22624:	f007 fa26 	bl	29a74 <arch_is_user_context>
   22628:	4d19      	ldr	r5, [pc, #100]	; (22690 <z_vrfy_k_thread_create+0x1d4>)
   2262a:	4b1a      	ldr	r3, [pc, #104]	; (22694 <z_vrfy_k_thread_create+0x1d8>)
   2262c:	1aed      	subs	r5, r5, r3
   2262e:	08ed      	lsrs	r5, r5, #3
   22630:	01ad      	lsls	r5, r5, #6
   22632:	f045 0501 	orr.w	r5, r5, #1
   22636:	2800      	cmp	r0, #0
   22638:	f43f af6f 	beq.w	2251a <z_vrfy_k_thread_create+0x5e>
   2263c:	9200      	str	r2, [sp, #0]
   2263e:	4919      	ldr	r1, [pc, #100]	; (226a4 <z_vrfy_k_thread_create+0x1e8>)
   22640:	4a15      	ldr	r2, [pc, #84]	; (22698 <z_vrfy_k_thread_create+0x1dc>)
   22642:	4633      	mov	r3, r6
   22644:	4628      	mov	r0, r5
   22646:	f002 fc26 	bl	24e96 <log_from_user>
	Z_OOPS(Z_SYSCALL_VERIFY(z_is_prio_lower_or_equal(prio,
   2264a:	68a3      	ldr	r3, [r4, #8]
   2264c:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   22650:	f004 fa04 	bl	26a5c <arch_syscall_oops>
	stack_object = z_object_find(stack);
   22654:	4638      	mov	r0, r7
   22656:	f7dd fd53 	bl	100 <z_object_find>
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(z_obj_validation_check(stack_object, stack,
   2265a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2265e:	220b      	movs	r2, #11
   22660:	4639      	mov	r1, r7
	stack_object = z_object_find(stack);
   22662:	4681      	mov	r9, r0
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(z_obj_validation_check(stack_object, stack,
   22664:	f007 fa10 	bl	29a88 <z_obj_validation_check>
   22668:	2800      	cmp	r0, #0
   2266a:	d0d6      	beq.n	2261a <z_vrfy_k_thread_create+0x15e>
   2266c:	f007 fa02 	bl	29a74 <arch_is_user_context>
   22670:	4b07      	ldr	r3, [pc, #28]	; (22690 <z_vrfy_k_thread_create+0x1d4>)
   22672:	4a08      	ldr	r2, [pc, #32]	; (22694 <z_vrfy_k_thread_create+0x1d8>)
   22674:	1a9b      	subs	r3, r3, r2
   22676:	08db      	lsrs	r3, r3, #3
   22678:	019b      	lsls	r3, r3, #6
   2267a:	f043 0301 	orr.w	r3, r3, #1
   2267e:	2800      	cmp	r0, #0
   22680:	f43f af47 	beq.w	22512 <z_vrfy_k_thread_create+0x56>
   22684:	4a04      	ldr	r2, [pc, #16]	; (22698 <z_vrfy_k_thread_create+0x1dc>)
   22686:	4906      	ldr	r1, [pc, #24]	; (226a0 <z_vrfy_k_thread_create+0x1e4>)
   22688:	e739      	b.n	224fe <z_vrfy_k_thread_create+0x42>
   2268a:	bf00      	nop
   2268c:	200023f4 	.word	0x200023f4
   22690:	0002a810 	.word	0x0002a810
   22694:	0002a6d0 	.word	0x0002a6d0
   22698:	0002f280 	.word	0x0002f280
   2269c:	0002e72d 	.word	0x0002e72d
   226a0:	0002f124 	.word	0x0002f124
   226a4:	0002f14e 	.word	0x0002f14e
   226a8:	0002f18d 	.word	0x0002f18d
   226ac:	0002f1b7 	.word	0x0002f1b7
   226b0:	0002f1e9 	.word	0x0002f1e9
   226b4:	0002f21d 	.word	0x0002f21d

000226b8 <z_mrsh_k_thread_create>:
#include <syscalls/kernel.h>

extern k_tid_t z_vrfy_k_thread_create(struct k_thread * new_thread, k_thread_stack_t * stack, size_t stack_size, k_thread_entry_t entry, void * p1, void * p2, void * p3, int prio, uint32_t options, k_timeout_t delay);
uintptr_t z_mrsh_k_thread_create(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, void *more, void *ssf)
{
   226b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_current->syscall_frame = ssf;
   226bc:	4f28      	ldr	r7, [pc, #160]	; (22760 <z_mrsh_k_thread_create+0xa8>)
{
   226be:	b08d      	sub	sp, #52	; 0x34
   226c0:	469b      	mov	fp, r3
   226c2:	9d17      	ldr	r5, [sp, #92]	; 0x5c
	_current->syscall_frame = ssf;
   226c4:	68bb      	ldr	r3, [r7, #8]
{
   226c6:	4692      	mov	sl, r2
	_current->syscall_frame = ssf;
   226c8:	9a18      	ldr	r2, [sp, #96]	; 0x60
   226ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
{
   226ce:	4680      	mov	r8, r0
   226d0:	4689      	mov	r9, r1
	Z_OOPS(Z_SYSCALL_MEMORY_READ(more, 5 * sizeof(uintptr_t)));
   226d2:	2200      	movs	r2, #0
   226d4:	2114      	movs	r1, #20
   226d6:	4628      	mov	r0, r5
   226d8:	f004 f9e4 	bl	26aa4 <arch_buffer_validate>
   226dc:	463e      	mov	r6, r7
   226de:	4604      	mov	r4, r0
   226e0:	b320      	cbz	r0, 2272c <z_mrsh_k_thread_create+0x74>
   226e2:	f007 f9c7 	bl	29a74 <arch_is_user_context>
   226e6:	4c1f      	ldr	r4, [pc, #124]	; (22764 <z_mrsh_k_thread_create+0xac>)
   226e8:	4b1f      	ldr	r3, [pc, #124]	; (22768 <z_mrsh_k_thread_create+0xb0>)
   226ea:	1ae4      	subs	r4, r4, r3
   226ec:	08e4      	lsrs	r4, r4, #3
   226ee:	01a4      	lsls	r4, r4, #6
   226f0:	4b1e      	ldr	r3, [pc, #120]	; (2276c <z_mrsh_k_thread_create+0xb4>)
   226f2:	f044 0401 	orr.w	r4, r4, #1
   226f6:	2214      	movs	r2, #20
   226f8:	b160      	cbz	r0, 22714 <z_mrsh_k_thread_create+0x5c>
   226fa:	e9cd 2300 	strd	r2, r3, [sp]
   226fe:	491c      	ldr	r1, [pc, #112]	; (22770 <z_mrsh_k_thread_create+0xb8>)
   22700:	4a1c      	ldr	r2, [pc, #112]	; (22774 <z_mrsh_k_thread_create+0xbc>)
   22702:	462b      	mov	r3, r5
   22704:	4620      	mov	r0, r4
   22706:	f002 fbc6 	bl	24e96 <log_from_user>
   2270a:	68b3      	ldr	r3, [r6, #8]
   2270c:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   22710:	f004 f9a4 	bl	26a5c <arch_syscall_oops>
   22714:	4917      	ldr	r1, [pc, #92]	; (22774 <z_mrsh_k_thread_create+0xbc>)
   22716:	4816      	ldr	r0, [pc, #88]	; (22770 <z_mrsh_k_thread_create+0xb8>)
   22718:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   2271c:	e9cd 1508 	strd	r1, r5, [sp, #32]
   22720:	4623      	mov	r3, r4
   22722:	2204      	movs	r2, #4
   22724:	a908      	add	r1, sp, #32
   22726:	f002 fc32 	bl	24f8e <log_n>
   2272a:	e7ee      	b.n	2270a <z_mrsh_k_thread_create+0x52>
	union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0;
	parm0.split.lo = (((uintptr_t *)more)[4]);
	parm0.split.hi = (((uintptr_t *)more)[5]);
   2272c:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
	k_tid_t ret = z_vrfy_k_thread_create(*(struct k_thread **)&arg0, *(k_thread_stack_t **)&arg1, *(size_t*)&arg2, *(k_thread_entry_t*)&arg3, *(void **)&arg4, *(void **)&(((uintptr_t *)more)[0]), *(void **)&(((uintptr_t *)more)[1]), *(int*)&(((uintptr_t *)more)[2]), *(uint32_t*)&(((uintptr_t *)more)[3]), parm0.val)
   22730:	e9cd 2306 	strd	r2, r3, [sp, #24]
   22734:	68eb      	ldr	r3, [r5, #12]
   22736:	9304      	str	r3, [sp, #16]
   22738:	68ab      	ldr	r3, [r5, #8]
   2273a:	9303      	str	r3, [sp, #12]
   2273c:	686b      	ldr	r3, [r5, #4]
   2273e:	9302      	str	r3, [sp, #8]
   22740:	682b      	ldr	r3, [r5, #0]
   22742:	9301      	str	r3, [sp, #4]
   22744:	9b16      	ldr	r3, [sp, #88]	; 0x58
   22746:	9300      	str	r3, [sp, #0]
   22748:	4652      	mov	r2, sl
   2274a:	465b      	mov	r3, fp
   2274c:	4649      	mov	r1, r9
   2274e:	4640      	mov	r0, r8
   22750:	f7ff feb4 	bl	224bc <z_vrfy_k_thread_create>
;
	_current->syscall_frame = NULL;
   22754:	68bb      	ldr	r3, [r7, #8]
   22756:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
	return (uintptr_t) ret;
}
   2275a:	b00d      	add	sp, #52	; 0x34
   2275c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22760:	200023f4 	.word	0x200023f4
   22764:	0002a810 	.word	0x0002a810
   22768:	0002a6d0 	.word	0x0002a6d0
   2276c:	0002d10e 	.word	0x0002d10e
   22770:	0002c8a6 	.word	0x0002c8a6
   22774:	0002f297 	.word	0x0002f297

00022778 <z_init_static_threads>:
{
   22778:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   2277c:	4f2e      	ldr	r7, [pc, #184]	; (22838 <z_init_static_threads+0xc0>)
   2277e:	4e2f      	ldr	r6, [pc, #188]	; (2283c <z_init_static_threads+0xc4>)
{
   22780:	b086      	sub	sp, #24
   22782:	463d      	mov	r5, r7
	_FOREACH_STATIC_THREAD(thread_data) {
   22784:	42be      	cmp	r6, r7
   22786:	f106 0430 	add.w	r4, r6, #48	; 0x30
   2278a:	d312      	bcc.n	227b2 <z_init_static_threads+0x3a>
	Z_STRUCT_SECTION_FOREACH(z_object_assignment, pos) {
   2278c:	4c2c      	ldr	r4, [pc, #176]	; (22840 <z_init_static_threads+0xc8>)
   2278e:	4f2d      	ldr	r7, [pc, #180]	; (22844 <z_init_static_threads+0xcc>)
   22790:	42bc      	cmp	r4, r7
   22792:	d335      	bcc.n	22800 <z_init_static_threads+0x88>
	k_sched_lock();
   22794:	f7fe fe14 	bl	213c0 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   22798:	4c28      	ldr	r4, [pc, #160]	; (2283c <z_init_static_threads+0xc4>)
   2279a:	f44f 4800 	mov.w	r8, #32768	; 0x8000
   2279e:	f240 36e7 	movw	r6, #999	; 0x3e7
   227a2:	2700      	movs	r7, #0
   227a4:	42ac      	cmp	r4, r5
   227a6:	d32d      	bcc.n	22804 <z_init_static_threads+0x8c>
}
   227a8:	b006      	add	sp, #24
   227aa:	e8bd 4bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	k_sched_unlock();
   227ae:	f7fe bf33 	b.w	21618 <k_sched_unlock>
		z_setup_new_thread(
   227b2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   227b6:	9305      	str	r3, [sp, #20]
   227b8:	f854 3c10 	ldr.w	r3, [r4, #-16]
   227bc:	9304      	str	r3, [sp, #16]
   227be:	f854 3c14 	ldr.w	r3, [r4, #-20]
   227c2:	9303      	str	r3, [sp, #12]
   227c4:	f854 3c18 	ldr.w	r3, [r4, #-24]
   227c8:	9302      	str	r3, [sp, #8]
   227ca:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   227ce:	9301      	str	r3, [sp, #4]
   227d0:	f854 3c20 	ldr.w	r3, [r4, #-32]
   227d4:	9300      	str	r3, [sp, #0]
   227d6:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   227da:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   227de:	f7ff fe05 	bl	223ec <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   227e2:	f854 3c30 	ldr.w	r3, [r4, #-48]
   227e6:	655e      	str	r6, [r3, #84]	; 0x54
   227e8:	4626      	mov	r6, r4
   227ea:	e7cb      	b.n	22784 <z_init_static_threads+0xc>
			k_object_access_grant(pos->objects[i],
   227ec:	6821      	ldr	r1, [r4, #0]
   227ee:	f007 fdaf 	bl	2a350 <z_impl_k_object_access_grant>
		for (int i = 0; pos->objects[i] != NULL; i++) {
   227f2:	6863      	ldr	r3, [r4, #4]
   227f4:	5998      	ldr	r0, [r3, r6]
   227f6:	3604      	adds	r6, #4
   227f8:	2800      	cmp	r0, #0
   227fa:	d1f7      	bne.n	227ec <z_init_static_threads+0x74>
	Z_STRUCT_SECTION_FOREACH(z_object_assignment, pos) {
   227fc:	3408      	adds	r4, #8
   227fe:	e7c7      	b.n	22790 <z_init_static_threads+0x18>
   22800:	2600      	movs	r6, #0
   22802:	e7f6      	b.n	227f2 <z_init_static_threads+0x7a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   22804:	6a61      	ldr	r1, [r4, #36]	; 0x24
   22806:	1c4b      	adds	r3, r1, #1
   22808:	d013      	beq.n	22832 <z_init_static_threads+0xba>
					    K_MSEC(thread_data->init_delay));
   2280a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   2280e:	46b3      	mov	fp, r6
   22810:	46bc      	mov	ip, r7
   22812:	fbc8 bc01 	smlal	fp, ip, r8, r1
   22816:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2281a:	2300      	movs	r3, #0
   2281c:	4658      	mov	r0, fp
   2281e:	4661      	mov	r1, ip
   22820:	f7de f98c 	bl	b3c <__aeabi_uldivmod>
			schedule_new_thread(thread_data->init_thread,
   22824:	f8d4 9000 	ldr.w	r9, [r4]
   22828:	4602      	mov	r2, r0
   2282a:	460b      	mov	r3, r1
   2282c:	4648      	mov	r0, r9
   2282e:	f7ff fd6b 	bl	22308 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
   22832:	3430      	adds	r4, #48	; 0x30
   22834:	e7b6      	b.n	227a4 <z_init_static_threads+0x2c>
   22836:	bf00      	nop
   22838:	20007dc0 	.word	0x20007dc0
   2283c:	20007dc0 	.word	0x20007dc0
   22840:	0002a684 	.word	0x0002a684
   22844:	0002a684 	.word	0x0002a684

00022848 <z_mrsh_k_float_disable>:
#include <syscalls/kernel.h>

extern int z_vrfy_k_float_disable(struct k_thread * thread);
uintptr_t z_mrsh_k_float_disable(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   22848:	b538      	push	{r3, r4, r5, lr}
	_current->syscall_frame = ssf;
   2284a:	4c17      	ldr	r4, [pc, #92]	; (228a8 <z_mrsh_k_float_disable+0x60>)
   2284c:	9a06      	ldr	r2, [sp, #24]
   2284e:	68a3      	ldr	r3, [r4, #8]
{
   22850:	4605      	mov	r5, r0
	_current->syscall_frame = ssf;
   22852:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}

#ifdef CONFIG_USERSPACE
static inline int z_vrfy_k_float_disable(struct k_thread *thread)
{
	Z_OOPS(Z_SYSCALL_OBJ(thread, K_OBJ_THREAD));
   22856:	f7dd fc53 	bl	100 <z_object_find>
   2285a:	4629      	mov	r1, r5
   2285c:	2300      	movs	r3, #0
   2285e:	2209      	movs	r2, #9
   22860:	f007 f912 	bl	29a88 <z_obj_validation_check>
   22864:	4625      	mov	r5, r4
   22866:	b1c8      	cbz	r0, 2289c <z_mrsh_k_float_disable+0x54>
   22868:	f007 f904 	bl	29a74 <arch_is_user_context>
   2286c:	4b0f      	ldr	r3, [pc, #60]	; (228ac <z_mrsh_k_float_disable+0x64>)
   2286e:	4a10      	ldr	r2, [pc, #64]	; (228b0 <z_mrsh_k_float_disable+0x68>)
   22870:	1a9b      	subs	r3, r3, r2
   22872:	08db      	lsrs	r3, r3, #3
   22874:	019b      	lsls	r3, r3, #6
   22876:	f043 0301 	orr.w	r3, r3, #1
   2287a:	b148      	cbz	r0, 22890 <z_mrsh_k_float_disable+0x48>
   2287c:	4a0d      	ldr	r2, [pc, #52]	; (228b4 <z_mrsh_k_float_disable+0x6c>)
   2287e:	490e      	ldr	r1, [pc, #56]	; (228b8 <z_mrsh_k_float_disable+0x70>)
   22880:	4618      	mov	r0, r3
   22882:	f002 fb08 	bl	24e96 <log_from_user>
   22886:	68ab      	ldr	r3, [r5, #8]
   22888:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   2288c:	f004 f8e6 	bl	26a5c <arch_syscall_oops>
   22890:	4908      	ldr	r1, [pc, #32]	; (228b4 <z_mrsh_k_float_disable+0x6c>)
   22892:	4809      	ldr	r0, [pc, #36]	; (228b8 <z_mrsh_k_float_disable+0x70>)
   22894:	461a      	mov	r2, r3
   22896:	f002 fb31 	bl	24efc <log_1>
   2289a:	e7f4      	b.n	22886 <z_mrsh_k_float_disable+0x3e>
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	int ret = z_vrfy_k_float_disable(*(struct k_thread **)&arg0)
;
	_current->syscall_frame = NULL;
   2289c:	68a3      	ldr	r3, [r4, #8]
   2289e:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	return (uintptr_t) ret;
}
   228a2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   228a6:	bd38      	pop	{r3, r4, r5, pc}
   228a8:	200023f4 	.word	0x200023f4
   228ac:	0002a810 	.word	0x0002a810
   228b0:	0002a6d0 	.word	0x0002a6d0
   228b4:	0002f2ae 	.word	0x0002f2ae
   228b8:	0002e72d 	.word	0x0002e72d

000228bc <z_mrsh_k_thread_timeout_remaining_ticks>:
#include <syscalls/kernel.h>

extern k_ticks_t z_vrfy_k_thread_timeout_remaining_ticks(const struct k_thread * t);
uintptr_t z_mrsh_k_thread_timeout_remaining_ticks(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   228bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	_current->syscall_frame = ssf;
   228be:	4f19      	ldr	r7, [pc, #100]	; (22924 <z_mrsh_k_thread_timeout_remaining_ticks+0x68>)
   228c0:	9a08      	ldr	r2, [sp, #32]
   228c2:	68bb      	ldr	r3, [r7, #8]
{
   228c4:	4605      	mov	r5, r0
	_current->syscall_frame = ssf;
   228c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

#ifdef CONFIG_USERSPACE
static inline k_ticks_t z_vrfy_k_thread_timeout_remaining_ticks(
						    const struct k_thread *t)
{
	Z_OOPS(Z_SYSCALL_OBJ(t, K_OBJ_THREAD));
   228ca:	f7dd fc19 	bl	100 <z_object_find>
   228ce:	2300      	movs	r3, #0
   228d0:	2209      	movs	r2, #9
   228d2:	4629      	mov	r1, r5
   228d4:	f007 f8d8 	bl	29a88 <z_obj_validation_check>
   228d8:	463e      	mov	r6, r7
   228da:	4604      	mov	r4, r0
   228dc:	b1c8      	cbz	r0, 22912 <z_mrsh_k_thread_timeout_remaining_ticks+0x56>
   228de:	f007 f8c9 	bl	29a74 <arch_is_user_context>
   228e2:	4b11      	ldr	r3, [pc, #68]	; (22928 <z_mrsh_k_thread_timeout_remaining_ticks+0x6c>)
   228e4:	4a11      	ldr	r2, [pc, #68]	; (2292c <z_mrsh_k_thread_timeout_remaining_ticks+0x70>)
   228e6:	1a9b      	subs	r3, r3, r2
   228e8:	08db      	lsrs	r3, r3, #3
   228ea:	019b      	lsls	r3, r3, #6
   228ec:	f043 0301 	orr.w	r3, r3, #1
   228f0:	b148      	cbz	r0, 22906 <z_mrsh_k_thread_timeout_remaining_ticks+0x4a>
   228f2:	4a0f      	ldr	r2, [pc, #60]	; (22930 <z_mrsh_k_thread_timeout_remaining_ticks+0x74>)
   228f4:	490f      	ldr	r1, [pc, #60]	; (22934 <z_mrsh_k_thread_timeout_remaining_ticks+0x78>)
   228f6:	4618      	mov	r0, r3
   228f8:	f002 facd 	bl	24e96 <log_from_user>
   228fc:	68b3      	ldr	r3, [r6, #8]
   228fe:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   22902:	f004 f8ab 	bl	26a5c <arch_syscall_oops>
   22906:	490a      	ldr	r1, [pc, #40]	; (22930 <z_mrsh_k_thread_timeout_remaining_ticks+0x74>)
   22908:	480a      	ldr	r0, [pc, #40]	; (22934 <z_mrsh_k_thread_timeout_remaining_ticks+0x78>)
   2290a:	461a      	mov	r2, r3
   2290c:	f002 faf6 	bl	24efc <log_1>
   22910:	e7f4      	b.n	228fc <z_mrsh_k_thread_timeout_remaining_ticks+0x40>
	return z_timeout_remaining(&t->base.timeout);
   22912:	f105 0018 	add.w	r0, r5, #24
   22916:	f007 f9d7 	bl	29cc8 <z_timeout_remaining>
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	k_ticks_t ret = z_vrfy_k_thread_timeout_remaining_ticks(*(const struct k_thread **)&arg0)
;
	_current->syscall_frame = NULL;
   2291a:	68bb      	ldr	r3, [r7, #8]
   2291c:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
	return (uintptr_t) ret;
}
   22920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22922:	bf00      	nop
   22924:	200023f4 	.word	0x200023f4
   22928:	0002a810 	.word	0x0002a810
   2292c:	0002a6d0 	.word	0x0002a6d0
   22930:	0002f2c5 	.word	0x0002f2c5
   22934:	0002e72d 	.word	0x0002e72d

00022938 <z_mrsh_k_thread_timeout_expires_ticks>:
#include <syscalls/kernel.h>

extern k_ticks_t z_vrfy_k_thread_timeout_expires_ticks(const struct k_thread * t);
uintptr_t z_mrsh_k_thread_timeout_expires_ticks(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   22938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	_current->syscall_frame = ssf;
   2293a:	4f19      	ldr	r7, [pc, #100]	; (229a0 <z_mrsh_k_thread_timeout_expires_ticks+0x68>)
   2293c:	9a08      	ldr	r2, [sp, #32]
   2293e:	68bb      	ldr	r3, [r7, #8]
{
   22940:	4605      	mov	r5, r0
	_current->syscall_frame = ssf;
   22942:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#include <syscalls/k_thread_timeout_remaining_ticks_mrsh.c>

static inline k_ticks_t z_vrfy_k_thread_timeout_expires_ticks(
						  const struct k_thread *t)
{
	Z_OOPS(Z_SYSCALL_OBJ(t, K_OBJ_THREAD));
   22946:	f7dd fbdb 	bl	100 <z_object_find>
   2294a:	2300      	movs	r3, #0
   2294c:	2209      	movs	r2, #9
   2294e:	4629      	mov	r1, r5
   22950:	f007 f89a 	bl	29a88 <z_obj_validation_check>
   22954:	463e      	mov	r6, r7
   22956:	4604      	mov	r4, r0
   22958:	b1c8      	cbz	r0, 2298e <z_mrsh_k_thread_timeout_expires_ticks+0x56>
   2295a:	f007 f88b 	bl	29a74 <arch_is_user_context>
   2295e:	4b11      	ldr	r3, [pc, #68]	; (229a4 <z_mrsh_k_thread_timeout_expires_ticks+0x6c>)
   22960:	4a11      	ldr	r2, [pc, #68]	; (229a8 <z_mrsh_k_thread_timeout_expires_ticks+0x70>)
   22962:	1a9b      	subs	r3, r3, r2
   22964:	08db      	lsrs	r3, r3, #3
   22966:	019b      	lsls	r3, r3, #6
   22968:	f043 0301 	orr.w	r3, r3, #1
   2296c:	b148      	cbz	r0, 22982 <z_mrsh_k_thread_timeout_expires_ticks+0x4a>
   2296e:	4a0f      	ldr	r2, [pc, #60]	; (229ac <z_mrsh_k_thread_timeout_expires_ticks+0x74>)
   22970:	490f      	ldr	r1, [pc, #60]	; (229b0 <z_mrsh_k_thread_timeout_expires_ticks+0x78>)
   22972:	4618      	mov	r0, r3
   22974:	f002 fa8f 	bl	24e96 <log_from_user>
   22978:	68b3      	ldr	r3, [r6, #8]
   2297a:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   2297e:	f004 f86d 	bl	26a5c <arch_syscall_oops>
   22982:	490a      	ldr	r1, [pc, #40]	; (229ac <z_mrsh_k_thread_timeout_expires_ticks+0x74>)
   22984:	480a      	ldr	r0, [pc, #40]	; (229b0 <z_mrsh_k_thread_timeout_expires_ticks+0x78>)
   22986:	461a      	mov	r2, r3
   22988:	f002 fab8 	bl	24efc <log_1>
   2298c:	e7f4      	b.n	22978 <z_mrsh_k_thread_timeout_expires_ticks+0x40>
	return z_timeout_expires(&t->base.timeout);
   2298e:	f105 0018 	add.w	r0, r5, #24
   22992:	f000 fac7 	bl	22f24 <z_timeout_expires>
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	k_ticks_t ret = z_vrfy_k_thread_timeout_expires_ticks(*(const struct k_thread **)&arg0)
;
	_current->syscall_frame = NULL;
   22996:	68bb      	ldr	r3, [r7, #8]
   22998:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
	return (uintptr_t) ret;
}
   2299c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2299e:	bf00      	nop
   229a0:	200023f4 	.word	0x200023f4
   229a4:	0002a810 	.word	0x0002a810
   229a8:	0002a6d0 	.word	0x0002a6d0
   229ac:	0002f2ed 	.word	0x0002f2ed
   229b0:	0002e72d 	.word	0x0002e72d

000229b4 <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
   229b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   229b6:	68c3      	ldr	r3, [r0, #12]
   229b8:	079a      	lsls	r2, r3, #30
{
   229ba:	4604      	mov	r4, r0
   229bc:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   229be:	f3c3 0540 	ubfx	r5, r3, #1, #1
   229c2:	d41f      	bmi.n	22a04 <submit_to_queue_locked+0x50>
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   229c4:	075f      	lsls	r7, r3, #29
   229c6:	d41f      	bmi.n	22a08 <submit_to_queue_locked+0x54>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
   229c8:	680a      	ldr	r2, [r1, #0]
   229ca:	b90a      	cbnz	r2, 229d0 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   229cc:	6882      	ldr	r2, [r0, #8]
   229ce:	600a      	str	r2, [r1, #0]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   229d0:	07d8      	lsls	r0, r3, #31
			__ASSERT_NO_MSG(work->queue != NULL);
			*queuep = work->queue;
   229d2:	bf44      	itt	mi
   229d4:	68a3      	ldrmi	r3, [r4, #8]
   229d6:	6033      	strmi	r3, [r6, #0]
			ret = 2;
		}

		int rc = queue_submit_locked(*queuep, work);
   229d8:	6837      	ldr	r7, [r6, #0]
			ret = 2;
   229da:	bf4c      	ite	mi
   229dc:	2502      	movmi	r5, #2
		ret = 1;
   229de:	2501      	movpl	r5, #1
	if (queue == NULL) {
   229e0:	b37f      	cbz	r7, 22a42 <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   229e2:	4b1b      	ldr	r3, [pc, #108]	; (22a50 <submit_to_queue_locked+0x9c>)
   229e4:	689b      	ldr	r3, [r3, #8]
   229e6:	42bb      	cmp	r3, r7
   229e8:	d111      	bne.n	22a0e <submit_to_queue_locked+0x5a>
   229ea:	f007 f85e 	bl	29aaa <k_is_in_isr>
   229ee:	f080 0001 	eor.w	r0, r0, #1
   229f2:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
   229f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   229f8:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   229fa:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   229fe:	d523      	bpl.n	22a48 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   22a00:	b13a      	cbz	r2, 22a12 <submit_to_queue_locked+0x5e>
   22a02:	b940      	cbnz	r0, 22a16 <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   22a04:	f06f 050f 	mvn.w	r5, #15
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
		*queuep = NULL;
   22a08:	2300      	movs	r3, #0
   22a0a:	6033      	str	r3, [r6, #0]
	}

	return ret;
   22a0c:	e013      	b.n	22a36 <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   22a0e:	2000      	movs	r0, #0
   22a10:	e7f0      	b.n	229f4 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   22a12:	071b      	lsls	r3, r3, #28
   22a14:	d4f6      	bmi.n	22a04 <submit_to_queue_locked+0x50>
	parent->next = child;
   22a16:	2300      	movs	r3, #0
   22a18:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   22a1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
   22a1e:	b963      	cbnz	r3, 22a3a <submit_to_queue_locked+0x86>
	list->head = node;
   22a20:	e9c7 4428 	strd	r4, r4, [r7, #160]	; 0xa0
		(void)notify_queue_locked(queue);
   22a24:	4638      	mov	r0, r7
   22a26:	f007 f878 	bl	29b1a <notify_queue_locked>
	*flagp |= BIT(bit);
   22a2a:	68e3      	ldr	r3, [r4, #12]
   22a2c:	f043 0304 	orr.w	r3, r3, #4
   22a30:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   22a32:	6833      	ldr	r3, [r6, #0]
   22a34:	60a3      	str	r3, [r4, #8]
}
   22a36:	4628      	mov	r0, r5
   22a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   22a3a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   22a3c:	f8c7 40a4 	str.w	r4, [r7, #164]	; 0xa4
}
   22a40:	e7f0      	b.n	22a24 <submit_to_queue_locked+0x70>
		return -EINVAL;
   22a42:	f06f 0515 	mvn.w	r5, #21
   22a46:	e7df      	b.n	22a08 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   22a48:	f06f 0512 	mvn.w	r5, #18
   22a4c:	e7dc      	b.n	22a08 <submit_to_queue_locked+0x54>
   22a4e:	bf00      	nop
   22a50:	200023f4 	.word	0x200023f4

00022a54 <finalize_cancel_locked>:
	*flagp &= ~BIT(bit);
   22a54:	68c3      	ldr	r3, [r0, #12]
{
   22a56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   22a5a:	4c17      	ldr	r4, [pc, #92]	; (22ab8 <finalize_cancel_locked+0x64>)
	*flagp &= ~BIT(bit);
   22a5c:	f023 0302 	bic.w	r3, r3, #2
{
   22a60:	4607      	mov	r7, r0
	*flagp &= ~BIT(bit);
   22a62:	60c3      	str	r3, [r0, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   22a64:	6820      	ldr	r0, [r4, #0]
   22a66:	b320      	cbz	r0, 22ab2 <finalize_cancel_locked+0x5e>
	return node->next;
   22a68:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   22a6a:	2600      	movs	r6, #0
   22a6c:	2d00      	cmp	r5, #0
   22a6e:	bf38      	it	cc
   22a70:	2500      	movcc	r5, #0
	parent->next = child;
   22a72:	46b0      	mov	r8, r6
		if (wc->work == work) {
   22a74:	6842      	ldr	r2, [r0, #4]
   22a76:	42ba      	cmp	r2, r7
   22a78:	4603      	mov	r3, r0
   22a7a:	d10b      	bne.n	22a94 <finalize_cancel_locked+0x40>
Z_GENLIST_REMOVE(slist, snode)
   22a7c:	6803      	ldr	r3, [r0, #0]
   22a7e:	b996      	cbnz	r6, 22aa6 <finalize_cancel_locked+0x52>
   22a80:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   22a82:	6023      	str	r3, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   22a84:	4290      	cmp	r0, r2
   22a86:	d100      	bne.n	22a8a <finalize_cancel_locked+0x36>
	list->tail = node;
   22a88:	6063      	str	r3, [r4, #4]
	parent->next = child;
   22a8a:	f840 8b08 	str.w	r8, [r0], #8
	z_impl_k_sem_give(sem);
   22a8e:	f7ff fab9 	bl	22004 <z_impl_k_sem_give>
   22a92:	4633      	mov	r3, r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   22a94:	b16d      	cbz	r5, 22ab2 <finalize_cancel_locked+0x5e>
	return node->next;
   22a96:	682a      	ldr	r2, [r5, #0]
   22a98:	2a00      	cmp	r2, #0
   22a9a:	bf38      	it	cc
   22a9c:	2200      	movcc	r2, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   22a9e:	4628      	mov	r0, r5
   22aa0:	461e      	mov	r6, r3
   22aa2:	4615      	mov	r5, r2
   22aa4:	e7e6      	b.n	22a74 <finalize_cancel_locked+0x20>
	parent->next = child;
   22aa6:	6033      	str	r3, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   22aa8:	6863      	ldr	r3, [r4, #4]
   22aaa:	4298      	cmp	r0, r3
	list->tail = node;
   22aac:	bf08      	it	eq
   22aae:	6066      	streq	r6, [r4, #4]
}
   22ab0:	e7eb      	b.n	22a8a <finalize_cancel_locked+0x36>
}
   22ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22ab6:	bf00      	nop
   22ab8:	20002430 	.word	0x20002430

00022abc <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   22abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   22ac0:	f8df 9120 	ldr.w	r9, [pc, #288]	; 22be4 <work_queue_main+0x128>
{
   22ac4:	b087      	sub	sp, #28
   22ac6:	4604      	mov	r4, r0
					   K_FOREVER, NULL);
   22ac8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   22acc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   22ad0:	f100 08a8 	add.w	r8, r0, #168	; 0xa8
   22ad4:	f04f 0320 	mov.w	r3, #32
   22ad8:	f3ef 8a11 	mrs	sl, BASEPRI
   22adc:	f383 8811 	msr	BASEPRI, r3
   22ae0:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   22ae4:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
	return list->head;
   22ae8:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
Z_GENLIST_GET(slist, snode)
   22aec:	b9c5      	cbnz	r5, 22b20 <work_queue_main+0x64>
	*flagp &= ~BIT(bit);
   22aee:	f023 0204 	bic.w	r2, r3, #4
		} else if (flag_test_and_clear(&queue->flags,
   22af2:	0759      	lsls	r1, r3, #29
	*flagp &= ~BIT(bit);
   22af4:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
		} else if (flag_test_and_clear(&queue->flags,
   22af8:	d508      	bpl.n	22b0c <work_queue_main+0x50>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   22afa:	f104 05b0 	add.w	r5, r4, #176	; 0xb0
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   22afe:	2200      	movs	r2, #0
   22b00:	2101      	movs	r1, #1
   22b02:	4628      	mov	r0, r5
   22b04:	f006 ff6c 	bl	299e0 <z_sched_wake>
   22b08:	2800      	cmp	r0, #0
   22b0a:	d1f8      	bne.n	22afe <work_queue_main+0x42>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   22b0c:	2300      	movs	r3, #0
   22b0e:	e9cd 6700 	strd	r6, r7, [sp]
   22b12:	9302      	str	r3, [sp, #8]
   22b14:	4642      	mov	r2, r8
   22b16:	4651      	mov	r1, sl
   22b18:	4648      	mov	r0, r9
   22b1a:	f7ff fa19 	bl	21f50 <z_sched_wait>
			continue;
   22b1e:	e7d9      	b.n	22ad4 <work_queue_main+0x18>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   22b20:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
   22b24:	6829      	ldr	r1, [r5, #0]
	list->head = node;
   22b26:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   22b2a:	4295      	cmp	r5, r2
   22b2c:	d101      	bne.n	22b32 <work_queue_main+0x76>
	list->tail = node;
   22b2e:	f8c4 10a4 	str.w	r1, [r4, #164]	; 0xa4
	*flagp |= BIT(bit);
   22b32:	f043 0302 	orr.w	r3, r3, #2
   22b36:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
	__asm__ volatile(
   22b3a:	f38a 8811 	msr	BASEPRI, sl
   22b3e:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		if (work != NULL) {
			bool yield;
			k_work_handler_t handler = work->handler;
   22b42:	f8d5 a004 	ldr.w	sl, [r5, #4]
	__asm__ volatile(
   22b46:	f04f 0320 	mov.w	r3, #32
   22b4a:	f3ef 8b11 	mrs	fp, BASEPRI
   22b4e:	f383 8811 	msr	BASEPRI, r3
   22b52:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   22b56:	68eb      	ldr	r3, [r5, #12]
   22b58:	f023 0304 	bic.w	r3, r3, #4
	return (*flagp & BIT(bit)) != 0U;
   22b5c:	f3c3 0140 	ubfx	r1, r3, #1, #1
	*flagp &= ~BIT(bit);
   22b60:	60eb      	str	r3, [r5, #12]
	if (ret) {
   22b62:	f081 0201 	eor.w	r2, r1, #1
   22b66:	b129      	cbz	r1, 22b74 <work_queue_main+0xb8>
		finalize_cancel_locked(work);
   22b68:	4628      	mov	r0, r5
   22b6a:	9205      	str	r2, [sp, #20]
   22b6c:	f7ff ff72 	bl	22a54 <finalize_cancel_locked>
   22b70:	9a05      	ldr	r2, [sp, #20]
   22b72:	e002      	b.n	22b7a <work_queue_main+0xbe>
	*flagp |= BIT(bit);
   22b74:	f043 0301 	orr.w	r3, r3, #1
   22b78:	60eb      	str	r3, [r5, #12]
	__asm__ volatile(
   22b7a:	f38b 8811 	msr	BASEPRI, fp
   22b7e:	f3bf 8f6f 	isb	sy

			__ASSERT_NO_MSG(handler != 0);

			if (work_set_running(work, queue)) {
   22b82:	b9b2      	cbnz	r2, 22bb2 <work_queue_main+0xf6>
	__asm__ volatile(
   22b84:	f04f 0320 	mov.w	r3, #32
   22b88:	f3ef 8211 	mrs	r2, BASEPRI
   22b8c:	f383 8811 	msr	BASEPRI, r3
   22b90:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   22b94:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   22b98:	f023 0302 	bic.w	r3, r3, #2
   22b9c:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
	__asm__ volatile(
   22ba0:	f382 8811 	msr	BASEPRI, r2
   22ba4:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
   22ba8:	05db      	lsls	r3, r3, #23
   22baa:	d493      	bmi.n	22ad4 <work_queue_main+0x18>
	z_impl_k_yield();
   22bac:	f7fe ffaa 	bl	21b04 <z_impl_k_yield>
   22bb0:	e790      	b.n	22ad4 <work_queue_main+0x18>
				handler(work);
   22bb2:	4628      	mov	r0, r5
   22bb4:	47d0      	blx	sl
	__asm__ volatile(
   22bb6:	f04f 0320 	mov.w	r3, #32
   22bba:	f3ef 8a11 	mrs	sl, BASEPRI
   22bbe:	f383 8811 	msr	BASEPRI, r3
   22bc2:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   22bc6:	68eb      	ldr	r3, [r5, #12]
   22bc8:	f023 0301 	bic.w	r3, r3, #1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   22bcc:	079a      	lsls	r2, r3, #30
	*flagp &= ~BIT(bit);
   22bce:	60eb      	str	r3, [r5, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   22bd0:	d502      	bpl.n	22bd8 <work_queue_main+0x11c>
		finalize_cancel_locked(work);
   22bd2:	4628      	mov	r0, r5
   22bd4:	f7ff ff3e 	bl	22a54 <finalize_cancel_locked>
	__asm__ volatile(
   22bd8:	f38a 8811 	msr	BASEPRI, sl
   22bdc:	f3bf 8f6f 	isb	sy
}
   22be0:	e7d0      	b.n	22b84 <work_queue_main+0xc8>
   22be2:	bf00      	nop
   22be4:	20002bb3 	.word	0x20002bb3

00022be8 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   22be8:	b5f0      	push	{r4, r5, r6, r7, lr}
   22bea:	b089      	sub	sp, #36	; 0x24
   22bec:	4604      	mov	r4, r0
	list->head = NULL;
   22bee:	2000      	movs	r0, #0
	list->tail = NULL;
   22bf0:	e9c4 0028 	strd	r0, r0, [r4, #160]	; 0xa0
   22bf4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   22bf6:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
	list->tail = (sys_dnode_t *)list;
   22bfa:	e9c4 002a 	strd	r0, r0, [r4, #168]	; 0xa8
   22bfe:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   22c02:	e9c4 002c 	strd	r0, r0, [r4, #176]	; 0xb0

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   22c06:	b31d      	cbz	r5, 22c50 <k_work_queue_start+0x68>
   22c08:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   22c0a:	2800      	cmp	r0, #0
   22c0c:	f240 1001 	movw	r0, #257	; 0x101
   22c10:	bf08      	it	eq
   22c12:	2001      	moveq	r0, #1
	*flagp = flags;
   22c14:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   22c18:	2000      	movs	r0, #0
   22c1a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   22c1e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   22c22:	e9cd 3003 	strd	r3, r0, [sp, #12]
   22c26:	e9cd 0001 	strd	r0, r0, [sp, #4]
   22c2a:	e9cd 6706 	strd	r6, r7, [sp, #24]
   22c2e:	4b09      	ldr	r3, [pc, #36]	; (22c54 <k_work_queue_start+0x6c>)
   22c30:	9400      	str	r4, [sp, #0]
   22c32:	4620      	mov	r0, r4
   22c34:	f006 ff51 	bl	29ada <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   22c38:	b125      	cbz	r5, 22c44 <k_work_queue_start+0x5c>
   22c3a:	6829      	ldr	r1, [r5, #0]
   22c3c:	b111      	cbz	r1, 22c44 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   22c3e:	4620      	mov	r0, r4
   22c40:	f006 ff3d 	bl	29abe <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   22c44:	4620      	mov	r0, r4
		k_thread_name_set(&queue->thread, cfg->name);
	}

	k_thread_start(&queue->thread);
}
   22c46:	b009      	add	sp, #36	; 0x24
   22c48:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   22c4c:	f006 bf3c 	b.w	29ac8 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   22c50:	2001      	movs	r0, #1
   22c52:	e7df      	b.n	22c14 <k_work_queue_start+0x2c>
   22c54:	00022abd 	.word	0x00022abd

00022c58 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   22c58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   22c5a:	460c      	mov	r4, r1
   22c5c:	9001      	str	r0, [sp, #4]
   22c5e:	4616      	mov	r6, r2
   22c60:	461f      	mov	r7, r3
	__asm__ volatile(
   22c62:	f04f 0320 	mov.w	r3, #32
   22c66:	f3ef 8511 	mrs	r5, BASEPRI
   22c6a:	f383 8811 	msr	BASEPRI, r3
   22c6e:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   22c72:	4608      	mov	r0, r1
   22c74:	f006 ff58 	bl	29b28 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   22c78:	ea56 0307 	orrs.w	r3, r6, r7
   22c7c:	d109      	bne.n	22c92 <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   22c7e:	a901      	add	r1, sp, #4
   22c80:	4620      	mov	r0, r4
   22c82:	f7ff fe97 	bl	229b4 <submit_to_queue_locked>
	__asm__ volatile(
   22c86:	f385 8811 	msr	BASEPRI, r5
   22c8a:	f3bf 8f6f 	isb	sy
	ret = schedule_for_queue_locked(&queue, dwork, delay);

	k_spin_unlock(&lock, key);

	return ret;
}
   22c8e:	b003      	add	sp, #12
   22c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   22c92:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   22c94:	4906      	ldr	r1, [pc, #24]	; (22cb0 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   22c96:	f043 0308 	orr.w	r3, r3, #8
   22c9a:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   22c9c:	9b01      	ldr	r3, [sp, #4]
   22c9e:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   22ca0:	f104 0010 	add.w	r0, r4, #16
   22ca4:	4632      	mov	r2, r6
   22ca6:	463b      	mov	r3, r7
   22ca8:	f000 f8ac 	bl	22e04 <z_add_timeout>
	return ret;
   22cac:	2001      	movs	r0, #1
   22cae:	e7ea      	b.n	22c86 <k_work_reschedule_for_queue+0x2e>
   22cb0:	00029bab 	.word	0x00029bab

00022cb4 <boot_banner>:
#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
	       STRINGIFY(BUILD_VERSION), BOOT_DELAY_BANNER);
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
   22cb4:	4a02      	ldr	r2, [pc, #8]	; (22cc0 <boot_banner+0xc>)
   22cb6:	4903      	ldr	r1, [pc, #12]	; (22cc4 <boot_banner+0x10>)
   22cb8:	4803      	ldr	r0, [pc, #12]	; (22cc8 <boot_banner+0x14>)
   22cba:	f001 bc93 	b.w	245e4 <printk>
   22cbe:	bf00      	nop
   22cc0:	0002cb51 	.word	0x0002cb51
   22cc4:	0002f313 	.word	0x0002f313
   22cc8:	0002f31a 	.word	0x0002f31a

00022ccc <z_data_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   22ccc:	4809      	ldr	r0, [pc, #36]	; (22cf4 <z_data_copy+0x28>)
   22cce:	4a0a      	ldr	r2, [pc, #40]	; (22cf8 <z_data_copy+0x2c>)
   22cd0:	490a      	ldr	r1, [pc, #40]	; (22cfc <z_data_copy+0x30>)
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   22cd2:	b508      	push	{r3, lr}
   22cd4:	1a12      	subs	r2, r2, r0
   22cd6:	f007 fb83 	bl	2a3e0 <memcpy>
   22cda:	4a09      	ldr	r2, [pc, #36]	; (22d00 <z_data_copy+0x34>)
   22cdc:	4909      	ldr	r1, [pc, #36]	; (22d04 <z_data_copy+0x38>)
   22cde:	480a      	ldr	r0, [pc, #40]	; (22d08 <z_data_copy+0x3c>)
   22ce0:	f007 fb7e 	bl	2a3e0 <memcpy>
   22ce4:	4809      	ldr	r0, [pc, #36]	; (22d0c <z_data_copy+0x40>)
   22ce6:	4a0a      	ldr	r2, [pc, #40]	; (22d10 <z_data_copy+0x44>)
   22ce8:	490a      	ldr	r1, [pc, #40]	; (22d14 <z_data_copy+0x48>)
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   22cea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   22cee:	1a12      	subs	r2, r2, r0
   22cf0:	f007 bb76 	b.w	2a3e0 <memcpy>
   22cf4:	20007600 	.word	0x20007600
   22cf8:	200091b0 	.word	0x200091b0
   22cfc:	0002fb1c 	.word	0x0002fb1c
   22d00:	00000000 	.word	0x00000000
   22d04:	0002fafc 	.word	0x0002fafc
   22d08:	20000000 	.word	0x20000000
   22d0c:	20000000 	.word	0x20000000
   22d10:	20000020 	.word	0x20000020
   22d14:	0002fafc 	.word	0x0002fafc

00022d18 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   22d18:	4b03      	ldr	r3, [pc, #12]	; (22d28 <elapsed+0x10>)
   22d1a:	681b      	ldr	r3, [r3, #0]
   22d1c:	b90b      	cbnz	r3, 22d22 <elapsed+0xa>
   22d1e:	f7e2 be57 	b.w	59d0 <sys_clock_elapsed>
}
   22d22:	2000      	movs	r0, #0
   22d24:	4770      	bx	lr
   22d26:	bf00      	nop
   22d28:	20002438 	.word	0x20002438

00022d2c <remove_timeout>:
{
   22d2c:	b530      	push	{r4, r5, lr}
   22d2e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   22d30:	b168      	cbz	r0, 22d4e <remove_timeout+0x22>
   22d32:	4a0a      	ldr	r2, [pc, #40]	; (22d5c <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   22d34:	6852      	ldr	r2, [r2, #4]
   22d36:	4290      	cmp	r0, r2
   22d38:	d009      	beq.n	22d4e <remove_timeout+0x22>
	if (next(t) != NULL) {
   22d3a:	b143      	cbz	r3, 22d4e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   22d3c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   22d40:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   22d44:	1912      	adds	r2, r2, r4
   22d46:	eb45 0101 	adc.w	r1, r5, r1
   22d4a:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   22d4e:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   22d50:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   22d52:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   22d54:	2300      	movs	r3, #0
	node->prev = NULL;
   22d56:	e9c0 3300 	strd	r3, r3, [r0]
}
   22d5a:	bd30      	pop	{r4, r5, pc}
   22d5c:	20007c34 	.word	0x20007c34

00022d60 <next_timeout>:

static int32_t next_timeout(void)
{
   22d60:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   22d62:	4b13      	ldr	r3, [pc, #76]	; (22db0 <next_timeout+0x50>)
   22d64:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22d66:	429c      	cmp	r4, r3
   22d68:	bf08      	it	eq
   22d6a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   22d6c:	f7ff ffd4 	bl	22d18 <elapsed>
   22d70:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   22d72:	b1bc      	cbz	r4, 22da4 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   22d74:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   22d78:	1b40      	subs	r0, r0, r5
   22d7a:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   22d7e:	2801      	cmp	r0, #1
   22d80:	f171 0300 	sbcs.w	r3, r1, #0
   22d84:	db11      	blt.n	22daa <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   22d86:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   22d8a:	2300      	movs	r3, #0
   22d8c:	4282      	cmp	r2, r0
   22d8e:	eb73 0401 	sbcs.w	r4, r3, r1
   22d92:	da00      	bge.n	22d96 <next_timeout+0x36>
   22d94:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   22d96:	4b07      	ldr	r3, [pc, #28]	; (22db4 <next_timeout+0x54>)
   22d98:	691b      	ldr	r3, [r3, #16]
   22d9a:	b113      	cbz	r3, 22da2 <next_timeout+0x42>
   22d9c:	4298      	cmp	r0, r3
   22d9e:	bfa8      	it	ge
   22da0:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   22da2:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   22da4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   22da8:	e7f5      	b.n	22d96 <next_timeout+0x36>
   22daa:	2000      	movs	r0, #0
   22dac:	e7f3      	b.n	22d96 <next_timeout+0x36>
   22dae:	bf00      	nop
   22db0:	20007c34 	.word	0x20007c34
   22db4:	200023f4 	.word	0x200023f4

00022db8 <timeout_rem>:
/* must be locked */
static k_ticks_t timeout_rem(const struct _timeout *timeout)
{
	k_ticks_t ticks = 0;

	if (z_is_inactive_timeout(timeout)) {
   22db8:	6803      	ldr	r3, [r0, #0]
{
   22dba:	b570      	push	{r4, r5, r6, lr}
	if (z_is_inactive_timeout(timeout)) {
   22dbc:	b1eb      	cbz	r3, 22dfa <timeout_rem+0x42>
	return list->head == list;
   22dbe:	4a10      	ldr	r2, [pc, #64]	; (22e00 <timeout_rem+0x48>)
   22dc0:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22dc2:	4293      	cmp	r3, r2
   22dc4:	d016      	beq.n	22df4 <timeout_rem+0x3c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   22dc6:	6851      	ldr	r1, [r2, #4]
   22dc8:	2400      	movs	r4, #0
   22dca:	2500      	movs	r5, #0
		return 0;
	}

	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   22dcc:	b93b      	cbnz	r3, 22dde <timeout_rem+0x26>
		if (timeout == t) {
			break;
		}
	}

	return ticks - elapsed();
   22dce:	f7ff ffa3 	bl	22d18 <elapsed>
   22dd2:	1a24      	subs	r4, r4, r0
   22dd4:	eb65 75e0 	sbc.w	r5, r5, r0, asr #31
}
   22dd8:	4620      	mov	r0, r4
   22dda:	4629      	mov	r1, r5
   22ddc:	bd70      	pop	{r4, r5, r6, pc}
		ticks += t->dticks;
   22dde:	e9d3 2604 	ldrd	r2, r6, [r3, #16]
   22de2:	18a4      	adds	r4, r4, r2
   22de4:	eb46 0505 	adc.w	r5, r6, r5
		if (timeout == t) {
   22de8:	4283      	cmp	r3, r0
   22dea:	d0f0      	beq.n	22dce <timeout_rem+0x16>
	return (node == list->tail) ? NULL : node->next;
   22dec:	428b      	cmp	r3, r1
   22dee:	d0ee      	beq.n	22dce <timeout_rem+0x16>
   22df0:	681b      	ldr	r3, [r3, #0]
   22df2:	e7eb      	b.n	22dcc <timeout_rem+0x14>
   22df4:	2400      	movs	r4, #0
   22df6:	2500      	movs	r5, #0
   22df8:	e7e9      	b.n	22dce <timeout_rem+0x16>
		return 0;
   22dfa:	2400      	movs	r4, #0
   22dfc:	2500      	movs	r5, #0
   22dfe:	e7eb      	b.n	22dd8 <timeout_rem+0x20>
   22e00:	20007c34 	.word	0x20007c34

00022e04 <z_add_timeout>:
{
   22e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   22e08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   22e0c:	bf08      	it	eq
   22e0e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   22e12:	b085      	sub	sp, #20
   22e14:	4604      	mov	r4, r0
   22e16:	4692      	mov	sl, r2
   22e18:	469b      	mov	fp, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   22e1a:	d070      	beq.n	22efe <z_add_timeout+0xfa>
	k_ticks_t ticks = timeout.ticks + 1;
   22e1c:	1c56      	adds	r6, r2, #1
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   22e1e:	f06f 0501 	mvn.w	r5, #1
	k_ticks_t ticks = timeout.ticks + 1;
   22e22:	f143 0700 	adc.w	r7, r3, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   22e26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22e2a:	ebb5 0806 	subs.w	r8, r5, r6
   22e2e:	eb63 0907 	sbc.w	r9, r3, r7
   22e32:	f1b8 0f00 	cmp.w	r8, #0
   22e36:	f179 0300 	sbcs.w	r3, r9, #0
   22e3a:	db16      	blt.n	22e6a <z_add_timeout+0x66>
		ticks = Z_TICK_ABS(timeout.ticks) - (curr_tick + elapsed());
   22e3c:	4e36      	ldr	r6, [pc, #216]	; (22f18 <z_add_timeout+0x114>)
   22e3e:	9103      	str	r1, [sp, #12]
   22e40:	f7ff ff6a 	bl	22d18 <elapsed>
   22e44:	e9d6 2600 	ldrd	r2, r6, [r6]
   22e48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22e4c:	1aad      	subs	r5, r5, r2
   22e4e:	eb63 0306 	sbc.w	r3, r3, r6
   22e52:	ebb5 020a 	subs.w	r2, r5, sl
   22e56:	eb63 030b 	sbc.w	r3, r3, fp
   22e5a:	9200      	str	r2, [sp, #0]
   22e5c:	9301      	str	r3, [sp, #4]
   22e5e:	e9dd 6700 	ldrd	r6, r7, [sp]
   22e62:	9903      	ldr	r1, [sp, #12]
   22e64:	1a36      	subs	r6, r6, r0
   22e66:	eb67 77e0 	sbc.w	r7, r7, r0, asr #31
	to->fn = fn;
   22e6a:	60a1      	str	r1, [r4, #8]
	__asm__ volatile(
   22e6c:	f04f 0320 	mov.w	r3, #32
   22e70:	f3ef 8511 	mrs	r5, BASEPRI
   22e74:	f383 8811 	msr	BASEPRI, r3
   22e78:	f3bf 8f6f 	isb	sy
		to->dticks = ticks + elapsed();
   22e7c:	f7ff ff4c 	bl	22d18 <elapsed>
	ticks = MAX(1, ticks);
   22e80:	2e01      	cmp	r6, #1
	return list->head == list;
   22e82:	4a26      	ldr	r2, [pc, #152]	; (22f1c <z_add_timeout+0x118>)
   22e84:	f177 0300 	sbcs.w	r3, r7, #0
   22e88:	bfb8      	it	lt
   22e8a:	2601      	movlt	r6, #1
   22e8c:	6813      	ldr	r3, [r2, #0]
   22e8e:	bfb8      	it	lt
   22e90:	2700      	movlt	r7, #0
		to->dticks = ticks + elapsed();
   22e92:	1836      	adds	r6, r6, r0
   22e94:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22e98:	4293      	cmp	r3, r2
   22e9a:	e9c4 6704 	strd	r6, r7, [r4, #16]
   22e9e:	d002      	beq.n	22ea6 <z_add_timeout+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   22ea0:	f8d2 c004 	ldr.w	ip, [r2, #4]
		for (t = first(); t != NULL; t = next(t)) {
   22ea4:	b92b      	cbnz	r3, 22eb2 <z_add_timeout+0xae>
	sys_dnode_t *const tail = list->tail;
   22ea6:	6853      	ldr	r3, [r2, #4]
	node->prev = tail;
   22ea8:	e9c4 2300 	strd	r2, r3, [r4]
	tail->next = node;
   22eac:	601c      	str	r4, [r3, #0]
	list->tail = node;
   22eae:	6054      	str	r4, [r2, #4]
}
   22eb0:	e012      	b.n	22ed8 <z_add_timeout+0xd4>
			if (t->dticks > to->dticks) {
   22eb2:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
   22eb6:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
   22eba:	4546      	cmp	r6, r8
   22ebc:	eb77 0109 	sbcs.w	r1, r7, r9
   22ec0:	da20      	bge.n	22f04 <z_add_timeout+0x100>
				t->dticks -= to->dticks;
   22ec2:	ebb8 0006 	subs.w	r0, r8, r6
   22ec6:	eb69 0107 	sbc.w	r1, r9, r7
   22eca:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   22ece:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   22ed0:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   22ed4:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   22ed6:	605c      	str	r4, [r3, #4]
	return list->head == list;
   22ed8:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22eda:	4293      	cmp	r3, r2
   22edc:	d00b      	beq.n	22ef6 <z_add_timeout+0xf2>
		if (to == first()) {
   22ede:	429c      	cmp	r4, r3
   22ee0:	d109      	bne.n	22ef6 <z_add_timeout+0xf2>
			int32_t next_time = next_timeout();
   22ee2:	f7ff ff3d 	bl	22d60 <next_timeout>
			if (next_time == 0 ||
   22ee6:	b118      	cbz	r0, 22ef0 <z_add_timeout+0xec>
			    _current_cpu->slice_ticks != next_time) {
   22ee8:	4b0d      	ldr	r3, [pc, #52]	; (22f20 <z_add_timeout+0x11c>)
			if (next_time == 0 ||
   22eea:	691b      	ldr	r3, [r3, #16]
   22eec:	4283      	cmp	r3, r0
   22eee:	d002      	beq.n	22ef6 <z_add_timeout+0xf2>
				sys_clock_set_timeout(next_time, false);
   22ef0:	2100      	movs	r1, #0
   22ef2:	f7e2 fd3b 	bl	596c <sys_clock_set_timeout>
	__asm__ volatile(
   22ef6:	f385 8811 	msr	BASEPRI, r5
   22efa:	f3bf 8f6f 	isb	sy
}
   22efe:	b005      	add	sp, #20
   22f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   22f04:	ebb6 0008 	subs.w	r0, r6, r8
   22f08:	eb67 0109 	sbc.w	r1, r7, r9
	return (node == list->tail) ? NULL : node->next;
   22f0c:	4563      	cmp	r3, ip
   22f0e:	e9c4 0104 	strd	r0, r1, [r4, #16]
   22f12:	d0c8      	beq.n	22ea6 <z_add_timeout+0xa2>
   22f14:	681b      	ldr	r3, [r3, #0]
   22f16:	e7c5      	b.n	22ea4 <z_add_timeout+0xa0>
   22f18:	20000b80 	.word	0x20000b80
   22f1c:	20007c34 	.word	0x20007c34
   22f20:	200023f4 	.word	0x200023f4

00022f24 <z_timeout_expires>:

	return ticks;
}

k_ticks_t z_timeout_expires(const struct _timeout *timeout)
{
   22f24:	b510      	push	{r4, lr}
	__asm__ volatile(
   22f26:	f04f 0320 	mov.w	r3, #32
   22f2a:	f3ef 8411 	mrs	r4, BASEPRI
   22f2e:	f383 8811 	msr	BASEPRI, r3
   22f32:	f3bf 8f6f 	isb	sy
	k_ticks_t ticks = 0;

	LOCKED(&timeout_lock) {
		ticks = curr_tick + timeout_rem(timeout);
   22f36:	f7ff ff3f 	bl	22db8 <timeout_rem>
   22f3a:	4a05      	ldr	r2, [pc, #20]	; (22f50 <z_timeout_expires+0x2c>)
   22f3c:	e9d2 3200 	ldrd	r3, r2, [r2]
   22f40:	18c0      	adds	r0, r0, r3
   22f42:	eb42 0101 	adc.w	r1, r2, r1
	__asm__ volatile(
   22f46:	f384 8811 	msr	BASEPRI, r4
   22f4a:	f3bf 8f6f 	isb	sy
	}

	return ticks;
}
   22f4e:	bd10      	pop	{r4, pc}
   22f50:	20000b80 	.word	0x20000b80

00022f54 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   22f54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22f58:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   22f5a:	f7fe fbb7 	bl	216cc <z_time_slice>
	__asm__ volatile(
   22f5e:	f04f 0320 	mov.w	r3, #32
   22f62:	f3ef 8411 	mrs	r4, BASEPRI
   22f66:	f383 8811 	msr	BASEPRI, r3
   22f6a:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   22f6e:	4d2c      	ldr	r5, [pc, #176]	; (23020 <sys_clock_announce+0xcc>)
   22f70:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 23024 <sys_clock_announce+0xd0>
	return list->head == list;
   22f74:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 23028 <sys_clock_announce+0xd4>
   22f78:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   22f7a:	4651      	mov	r1, sl
   22f7c:	f8d5 c000 	ldr.w	ip, [r5]
   22f80:	f8db 0000 	ldr.w	r0, [fp]
   22f84:	4662      	mov	r2, ip
   22f86:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22f88:	4558      	cmp	r0, fp
   22f8a:	e9da 8900 	ldrd	r8, r9, [sl]
   22f8e:	e9cd 2300 	strd	r2, r3, [sp]
   22f92:	d00d      	beq.n	22fb0 <sys_clock_announce+0x5c>
   22f94:	b160      	cbz	r0, 22fb0 <sys_clock_announce+0x5c>
   22f96:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   22f9a:	45b4      	cmp	ip, r6
   22f9c:	41bb      	sbcs	r3, r7
   22f9e:	da1e      	bge.n	22fde <sys_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   22fa0:	9b00      	ldr	r3, [sp, #0]
   22fa2:	ebb6 0c03 	subs.w	ip, r6, r3
   22fa6:	9b01      	ldr	r3, [sp, #4]
   22fa8:	eb67 0603 	sbc.w	r6, r7, r3
   22fac:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
   22fb0:	9b00      	ldr	r3, [sp, #0]
   22fb2:	eb13 0208 	adds.w	r2, r3, r8
   22fb6:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
   22fb8:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
   22fbc:	eb43 0309 	adc.w	r3, r3, r9
   22fc0:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
   22fc4:	602e      	str	r6, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
   22fc6:	f7ff fecb 	bl	22d60 <next_timeout>
   22fca:	4631      	mov	r1, r6
   22fcc:	f7e2 fcce 	bl	596c <sys_clock_set_timeout>
	__asm__ volatile(
   22fd0:	f384 8811 	msr	BASEPRI, r4
   22fd4:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   22fd8:	b003      	add	sp, #12
   22fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
   22fde:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
   22fe2:	f04f 0200 	mov.w	r2, #0
   22fe6:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
   22fea:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
   22fee:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
   22ff2:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
   22ff6:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
   22ffa:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
   22ffc:	f7ff fe96 	bl	22d2c <remove_timeout>
   23000:	f384 8811 	msr	BASEPRI, r4
   23004:	f3bf 8f6f 	isb	sy
		t->fn(t);
   23008:	6883      	ldr	r3, [r0, #8]
   2300a:	4798      	blx	r3
	__asm__ volatile(
   2300c:	f04f 0320 	mov.w	r3, #32
   23010:	f3ef 8411 	mrs	r4, BASEPRI
   23014:	f383 8811 	msr	BASEPRI, r3
   23018:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
   2301c:	4901      	ldr	r1, [pc, #4]	; (23024 <sys_clock_announce+0xd0>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   2301e:	e7ad      	b.n	22f7c <sys_clock_announce+0x28>
   23020:	20002438 	.word	0x20002438
   23024:	20000b80 	.word	0x20000b80
   23028:	20007c34 	.word	0x20007c34

0002302c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   2302c:	b510      	push	{r4, lr}
   2302e:	f04f 0320 	mov.w	r3, #32
   23032:	f3ef 8411 	mrs	r4, BASEPRI
   23036:	f383 8811 	msr	BASEPRI, r3
   2303a:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   2303e:	f7e2 fcc7 	bl	59d0 <sys_clock_elapsed>
   23042:	4b06      	ldr	r3, [pc, #24]	; (2305c <sys_clock_tick_get+0x30>)
   23044:	e9d3 2300 	ldrd	r2, r3, [r3]
   23048:	1812      	adds	r2, r2, r0
   2304a:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   2304e:	f384 8811 	msr	BASEPRI, r4
   23052:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   23056:	4610      	mov	r0, r2
   23058:	4619      	mov	r1, r3
   2305a:	bd10      	pop	{r4, pc}
   2305c:	20000b80 	.word	0x20000b80

00023060 <z_mrsh_k_uptime_ticks>:
#include <syscalls/kernel.h>

extern int64_t z_vrfy_k_uptime_ticks();
uintptr_t z_mrsh_k_uptime_ticks(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   23060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_current->syscall_frame = ssf;
   23064:	4e22      	ldr	r6, [pc, #136]	; (230f0 <z_mrsh_k_uptime_ticks+0x90>)
{
   23066:	b086      	sub	sp, #24
	_current->syscall_frame = ssf;
   23068:	68b3      	ldr	r3, [r6, #8]
   2306a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2306c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
{
   23070:	4604      	mov	r4, r0
#endif
}

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   23072:	f7ff ffdb 	bl	2302c <sys_clock_tick_get>
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	int64_t ret = z_vrfy_k_uptime_ticks()
;
	Z_OOPS(Z_SYSCALL_MEMORY_WRITE(((uint64_t *)arg0), 8));
   23076:	2201      	movs	r2, #1
   23078:	4680      	mov	r8, r0
   2307a:	460f      	mov	r7, r1
   2307c:	4620      	mov	r0, r4
   2307e:	2108      	movs	r1, #8
   23080:	f003 fd10 	bl	26aa4 <arch_buffer_validate>
   23084:	4635      	mov	r5, r6
   23086:	b350      	cbz	r0, 230de <z_mrsh_k_uptime_ticks+0x7e>
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   23088:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   2308c:	b9cb      	cbnz	r3, 230c2 <z_mrsh_k_uptime_ticks+0x62>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   2308e:	f3ef 8314 	mrs	r3, CONTROL
	return (value & CONTROL_nPRIV_Msk) ? true : false;
   23092:	f003 0301 	and.w	r3, r3, #1
   23096:	4817      	ldr	r0, [pc, #92]	; (230f4 <z_mrsh_k_uptime_ticks+0x94>)
   23098:	4a17      	ldr	r2, [pc, #92]	; (230f8 <z_mrsh_k_uptime_ticks+0x98>)
   2309a:	1a12      	subs	r2, r2, r0
   2309c:	08d2      	lsrs	r2, r2, #3
   2309e:	0192      	lsls	r2, r2, #6
   230a0:	f042 0001 	orr.w	r0, r2, #1
   230a4:	2108      	movs	r1, #8
   230a6:	4a15      	ldr	r2, [pc, #84]	; (230fc <z_mrsh_k_uptime_ticks+0x9c>)
   230a8:	b16b      	cbz	r3, 230c6 <z_mrsh_k_uptime_ticks+0x66>
   230aa:	e9cd 1200 	strd	r1, r2, [sp]
   230ae:	4623      	mov	r3, r4
   230b0:	4a13      	ldr	r2, [pc, #76]	; (23100 <z_mrsh_k_uptime_ticks+0xa0>)
   230b2:	4914      	ldr	r1, [pc, #80]	; (23104 <z_mrsh_k_uptime_ticks+0xa4>)
   230b4:	f001 feef 	bl	24e96 <log_from_user>
   230b8:	68ab      	ldr	r3, [r5, #8]
   230ba:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   230be:	f003 fccd 	bl	26a5c <arch_syscall_oops>
		return false;
   230c2:	2300      	movs	r3, #0
   230c4:	e7e7      	b.n	23096 <z_mrsh_k_uptime_ticks+0x36>
   230c6:	4b0e      	ldr	r3, [pc, #56]	; (23100 <z_mrsh_k_uptime_ticks+0xa0>)
   230c8:	e9cd 1204 	strd	r1, r2, [sp, #16]
   230cc:	e9cd 3402 	strd	r3, r4, [sp, #8]
   230d0:	2204      	movs	r2, #4
   230d2:	4603      	mov	r3, r0
   230d4:	a902      	add	r1, sp, #8
   230d6:	480b      	ldr	r0, [pc, #44]	; (23104 <z_mrsh_k_uptime_ticks+0xa4>)
   230d8:	f001 ff59 	bl	24f8e <log_n>
   230dc:	e7ec      	b.n	230b8 <z_mrsh_k_uptime_ticks+0x58>
	*((uint64_t *)arg0) = ret;
	_current->syscall_frame = NULL;
   230de:	68b2      	ldr	r2, [r6, #8]
	*((uint64_t *)arg0) = ret;
   230e0:	e9c4 8700 	strd	r8, r7, [r4]
	_current->syscall_frame = NULL;
   230e4:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
	return 0;
}
   230e8:	b006      	add	sp, #24
   230ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   230ee:	bf00      	nop
   230f0:	200023f4 	.word	0x200023f4
   230f4:	0002a6d0 	.word	0x0002a6d0
   230f8:	0002a810 	.word	0x0002a810
   230fc:	0002c903 	.word	0x0002c903
   23100:	0002f343 	.word	0x0002f343
   23104:	0002c8a6 	.word	0x0002c8a6

00023108 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   23108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   2310a:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   2310e:	1c56      	adds	r6, r2, #1
   23110:	f143 0700 	adc.w	r7, r3, #0
   23114:	2f00      	cmp	r7, #0
   23116:	bf08      	it	eq
   23118:	2e02      	cmpeq	r6, #2
{
   2311a:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   2311c:	d302      	bcc.n	23124 <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2311e:	490d      	ldr	r1, [pc, #52]	; (23154 <z_timer_expiration_handler+0x4c>)
   23120:	f7ff fe70 	bl	22e04 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   23124:	6b23      	ldr	r3, [r4, #48]	; 0x30
   23126:	3301      	adds	r3, #1
   23128:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   2312a:	6a23      	ldr	r3, [r4, #32]
   2312c:	b10b      	cbz	r3, 23132 <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
   2312e:	4620      	mov	r0, r4
   23130:	4798      	blx	r3
	return list->head == list;
   23132:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23136:	42a5      	cmp	r5, r4
   23138:	d00b      	beq.n	23152 <z_timer_expiration_handler+0x4a>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   2313a:	b155      	cbz	r5, 23152 <z_timer_expiration_handler+0x4a>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   2313c:	4628      	mov	r0, r5
   2313e:	f006 fb53 	bl	297e8 <z_unpend_thread_no_timeout>
   23142:	2300      	movs	r3, #0
   23144:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90

	arch_thread_return_value_set(thread, 0);

	z_ready_thread(thread);
   23148:	4628      	mov	r0, r5
}
   2314a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
   2314e:	f006 bbbc 	b.w	298ca <z_ready_thread>
}
   23152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23154:	00023109 	.word	0x00023109

00023158 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   23158:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   2315c:	4619      	mov	r1, r3
   2315e:	4606      	mov	r6, r0
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   23160:	1c4c      	adds	r4, r1, #1
{
   23162:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   23164:	bf08      	it	eq
   23166:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   2316a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   2316e:	4680      	mov	r8, r0
   23170:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   23172:	d04c      	beq.n	2320e <z_impl_k_timer_start+0xb6>
   23174:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   23176:	1c6b      	adds	r3, r5, #1
   23178:	bf08      	it	eq
   2317a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   2317e:	4614      	mov	r4, r2
   23180:	d019      	beq.n	231b6 <z_impl_k_timer_start+0x5e>
   23182:	ea54 0305 	orrs.w	r3, r4, r5
   23186:	d016      	beq.n	231b6 <z_impl_k_timer_start+0x5e>
	    Z_TICK_ABS(period.ticks) < 0) {
   23188:	f06f 0301 	mvn.w	r3, #1
   2318c:	ebb3 0a02 	subs.w	sl, r3, r2
   23190:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   23194:	eb63 0b05 	sbc.w	fp, r3, r5
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   23198:	f1ba 0f00 	cmp.w	sl, #0
   2319c:	f17b 0300 	sbcs.w	r3, fp, #0
   231a0:	da09      	bge.n	231b6 <z_impl_k_timer_start+0x5e>
		period.ticks = MAX(period.ticks - 1, 1);
   231a2:	f112 34ff 	adds.w	r4, r2, #4294967295	; 0xffffffff
   231a6:	f145 35ff 	adc.w	r5, r5, #4294967295	; 0xffffffff
   231aa:	2c01      	cmp	r4, #1
   231ac:	f175 0300 	sbcs.w	r3, r5, #0
   231b0:	bfbc      	itt	lt
   231b2:	2401      	movlt	r4, #1
   231b4:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   231b6:	f06f 0301 	mvn.w	r3, #1
   231ba:	1a1b      	subs	r3, r3, r0
   231bc:	9300      	str	r3, [sp, #0]
   231be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   231c2:	eb63 0301 	sbc.w	r3, r3, r1
   231c6:	9301      	str	r3, [sp, #4]
   231c8:	e9dd 2300 	ldrd	r2, r3, [sp]
   231cc:	2a00      	cmp	r2, #0
   231ce:	f173 0300 	sbcs.w	r3, r3, #0
   231d2:	da0c      	bge.n	231ee <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
   231d4:	f110 38ff 	adds.w	r8, r0, #4294967295	; 0xffffffff
   231d8:	f141 39ff 	adc.w	r9, r1, #4294967295	; 0xffffffff
   231dc:	f1b8 0f00 	cmp.w	r8, #0
   231e0:	f179 0300 	sbcs.w	r3, r9, #0
   231e4:	bfbc      	itt	lt
   231e6:	f04f 0800 	movlt.w	r8, #0
   231ea:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
   231ee:	4630      	mov	r0, r6
   231f0:	f006 fd54 	bl	29c9c <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   231f4:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   231f6:	4907      	ldr	r1, [pc, #28]	; (23214 <z_impl_k_timer_start+0xbc>)
	timer->status = 0U;
   231f8:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   231fa:	4642      	mov	r2, r8
   231fc:	464b      	mov	r3, r9
   231fe:	4630      	mov	r0, r6
	timer->period = period;
   23200:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   23204:	b002      	add	sp, #8
   23206:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2320a:	f7ff bdfb 	b.w	22e04 <z_add_timeout>
}
   2320e:	b002      	add	sp, #8
   23210:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   23214:	00023109 	.word	0x00023109

00023218 <z_mrsh_k_timer_start>:
#include <syscalls/kernel.h>

extern void z_vrfy_k_timer_start(struct k_timer * timer, k_timeout_t duration, k_timeout_t period);
uintptr_t z_mrsh_k_timer_start(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   23218:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	_current->syscall_frame = ssf;
   2321c:	4f1d      	ldr	r7, [pc, #116]	; (23294 <z_mrsh_k_timer_start+0x7c>)
{
   2321e:	469a      	mov	sl, r3
	_current->syscall_frame = ssf;
   23220:	68bb      	ldr	r3, [r7, #8]
{
   23222:	4690      	mov	r8, r2
	_current->syscall_frame = ssf;
   23224:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   23226:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
{
   2322a:	4605      	mov	r5, r0
   2322c:	4689      	mov	r9, r1
#ifdef CONFIG_USERSPACE
static inline void z_vrfy_k_timer_start(struct k_timer *timer,
					k_timeout_t duration,
					k_timeout_t period)
{
	Z_OOPS(Z_SYSCALL_OBJ(timer, K_OBJ_TIMER));
   2322e:	f7dc ff67 	bl	100 <z_object_find>
   23232:	4629      	mov	r1, r5
   23234:	f006 fdbb 	bl	29dae <z_obj_validation_check.constprop.0>
   23238:	463e      	mov	r6, r7
   2323a:	4604      	mov	r4, r0
   2323c:	b1c8      	cbz	r0, 23272 <z_mrsh_k_timer_start+0x5a>
   2323e:	f006 fdac 	bl	29d9a <arch_is_user_context>
   23242:	4b15      	ldr	r3, [pc, #84]	; (23298 <z_mrsh_k_timer_start+0x80>)
   23244:	4a15      	ldr	r2, [pc, #84]	; (2329c <z_mrsh_k_timer_start+0x84>)
   23246:	1a9b      	subs	r3, r3, r2
   23248:	08db      	lsrs	r3, r3, #3
   2324a:	019b      	lsls	r3, r3, #6
   2324c:	f043 0301 	orr.w	r3, r3, #1
   23250:	b148      	cbz	r0, 23266 <z_mrsh_k_timer_start+0x4e>
   23252:	4a13      	ldr	r2, [pc, #76]	; (232a0 <z_mrsh_k_timer_start+0x88>)
   23254:	4913      	ldr	r1, [pc, #76]	; (232a4 <z_mrsh_k_timer_start+0x8c>)
   23256:	4618      	mov	r0, r3
   23258:	f001 fe1d 	bl	24e96 <log_from_user>
   2325c:	68b3      	ldr	r3, [r6, #8]
   2325e:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   23262:	f003 fbfb 	bl	26a5c <arch_syscall_oops>
   23266:	490e      	ldr	r1, [pc, #56]	; (232a0 <z_mrsh_k_timer_start+0x88>)
   23268:	480e      	ldr	r0, [pc, #56]	; (232a4 <z_mrsh_k_timer_start+0x8c>)
   2326a:	461a      	mov	r2, r3
   2326c:	f001 fe46 	bl	24efc <log_1>
   23270:	e7f4      	b.n	2325c <z_mrsh_k_timer_start+0x44>
	z_impl_k_timer_start(timer, duration, period);
   23272:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   23274:	9301      	str	r3, [sp, #4]
   23276:	4628      	mov	r0, r5
   23278:	4643      	mov	r3, r8
   2327a:	f8cd a000 	str.w	sl, [sp]
   2327e:	464a      	mov	r2, r9
   23280:	f7ff ff6a 	bl	23158 <z_impl_k_timer_start>
	union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1;
	parm1.split.lo = arg3;
	parm1.split.hi = arg4;
	z_vrfy_k_timer_start(*(struct k_timer **)&arg0, parm0.val, parm1.val)
;
	_current->syscall_frame = NULL;
   23284:	68bb      	ldr	r3, [r7, #8]
	return 0;
}
   23286:	4620      	mov	r0, r4
	_current->syscall_frame = NULL;
   23288:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
}
   2328c:	b002      	add	sp, #8
   2328e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   23292:	bf00      	nop
   23294:	200023f4 	.word	0x200023f4
   23298:	0002a810 	.word	0x0002a810
   2329c:	0002a6d0 	.word	0x0002a6d0
   232a0:	0002f359 	.word	0x0002f359
   232a4:	0002e72d 	.word	0x0002e72d

000232a8 <z_mrsh_k_timer_stop>:
#include <syscalls/kernel.h>

extern void z_vrfy_k_timer_stop(struct k_timer * timer);
uintptr_t z_mrsh_k_timer_stop(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   232a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	_current->syscall_frame = ssf;
   232aa:	4f18      	ldr	r7, [pc, #96]	; (2330c <z_mrsh_k_timer_stop+0x64>)
   232ac:	9a08      	ldr	r2, [sp, #32]
   232ae:	68bb      	ldr	r3, [r7, #8]
{
   232b0:	4605      	mov	r5, r0
	_current->syscall_frame = ssf;
   232b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}

#ifdef CONFIG_USERSPACE
static inline void z_vrfy_k_timer_stop(struct k_timer *timer)
{
	Z_OOPS(Z_SYSCALL_OBJ(timer, K_OBJ_TIMER));
   232b6:	f7dc ff23 	bl	100 <z_object_find>
   232ba:	4629      	mov	r1, r5
   232bc:	f006 fd77 	bl	29dae <z_obj_validation_check.constprop.0>
   232c0:	463e      	mov	r6, r7
   232c2:	4604      	mov	r4, r0
   232c4:	b1c8      	cbz	r0, 232fa <z_mrsh_k_timer_stop+0x52>
   232c6:	f006 fd68 	bl	29d9a <arch_is_user_context>
   232ca:	4b11      	ldr	r3, [pc, #68]	; (23310 <z_mrsh_k_timer_stop+0x68>)
   232cc:	4a11      	ldr	r2, [pc, #68]	; (23314 <z_mrsh_k_timer_stop+0x6c>)
   232ce:	1a9b      	subs	r3, r3, r2
   232d0:	08db      	lsrs	r3, r3, #3
   232d2:	019b      	lsls	r3, r3, #6
   232d4:	f043 0301 	orr.w	r3, r3, #1
   232d8:	b148      	cbz	r0, 232ee <z_mrsh_k_timer_stop+0x46>
   232da:	4a0f      	ldr	r2, [pc, #60]	; (23318 <z_mrsh_k_timer_stop+0x70>)
   232dc:	490f      	ldr	r1, [pc, #60]	; (2331c <z_mrsh_k_timer_stop+0x74>)
   232de:	4618      	mov	r0, r3
   232e0:	f001 fdd9 	bl	24e96 <log_from_user>
   232e4:	68b3      	ldr	r3, [r6, #8]
   232e6:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   232ea:	f003 fbb7 	bl	26a5c <arch_syscall_oops>
   232ee:	490a      	ldr	r1, [pc, #40]	; (23318 <z_mrsh_k_timer_stop+0x70>)
   232f0:	480a      	ldr	r0, [pc, #40]	; (2331c <z_mrsh_k_timer_stop+0x74>)
   232f2:	461a      	mov	r2, r3
   232f4:	f001 fe02 	bl	24efc <log_1>
   232f8:	e7f4      	b.n	232e4 <z_mrsh_k_timer_stop+0x3c>
	z_impl_k_timer_stop(timer);
   232fa:	4628      	mov	r0, r5
   232fc:	f006 fd74 	bl	29de8 <z_impl_k_timer_stop>
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	z_vrfy_k_timer_stop(*(struct k_timer **)&arg0)
;
	_current->syscall_frame = NULL;
   23300:	68bb      	ldr	r3, [r7, #8]
	return 0;
}
   23302:	4620      	mov	r0, r4
	_current->syscall_frame = NULL;
   23304:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
}
   23308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2330a:	bf00      	nop
   2330c:	200023f4 	.word	0x200023f4
   23310:	0002a810 	.word	0x0002a810
   23314:	0002a6d0 	.word	0x0002a6d0
   23318:	0002f36e 	.word	0x0002f36e
   2331c:	0002e72d 	.word	0x0002e72d

00023320 <z_mrsh_k_timer_status_get>:
#include <syscalls/kernel.h>

extern uint32_t z_vrfy_k_timer_status_get(struct k_timer * timer);
uintptr_t z_mrsh_k_timer_status_get(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   23320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	_current->syscall_frame = ssf;
   23322:	4f17      	ldr	r7, [pc, #92]	; (23380 <z_mrsh_k_timer_status_get+0x60>)
   23324:	9a08      	ldr	r2, [sp, #32]
   23326:	68bb      	ldr	r3, [r7, #8]
{
   23328:	4605      	mov	r5, r0
	_current->syscall_frame = ssf;
   2332a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}

#ifdef CONFIG_USERSPACE
static inline uint32_t z_vrfy_k_timer_status_get(struct k_timer *timer)
{
	Z_OOPS(Z_SYSCALL_OBJ(timer, K_OBJ_TIMER));
   2332e:	f7dc fee7 	bl	100 <z_object_find>
   23332:	4629      	mov	r1, r5
   23334:	f006 fd3b 	bl	29dae <z_obj_validation_check.constprop.0>
   23338:	463e      	mov	r6, r7
   2333a:	4604      	mov	r4, r0
   2333c:	b1c8      	cbz	r0, 23372 <z_mrsh_k_timer_status_get+0x52>
   2333e:	f006 fd2c 	bl	29d9a <arch_is_user_context>
   23342:	4b10      	ldr	r3, [pc, #64]	; (23384 <z_mrsh_k_timer_status_get+0x64>)
   23344:	4a10      	ldr	r2, [pc, #64]	; (23388 <z_mrsh_k_timer_status_get+0x68>)
   23346:	1a9b      	subs	r3, r3, r2
   23348:	08db      	lsrs	r3, r3, #3
   2334a:	019b      	lsls	r3, r3, #6
   2334c:	f043 0301 	orr.w	r3, r3, #1
   23350:	b148      	cbz	r0, 23366 <z_mrsh_k_timer_status_get+0x46>
   23352:	4a0e      	ldr	r2, [pc, #56]	; (2338c <z_mrsh_k_timer_status_get+0x6c>)
   23354:	490e      	ldr	r1, [pc, #56]	; (23390 <z_mrsh_k_timer_status_get+0x70>)
   23356:	4618      	mov	r0, r3
   23358:	f001 fd9d 	bl	24e96 <log_from_user>
   2335c:	68b3      	ldr	r3, [r6, #8]
   2335e:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   23362:	f003 fb7b 	bl	26a5c <arch_syscall_oops>
   23366:	4909      	ldr	r1, [pc, #36]	; (2338c <z_mrsh_k_timer_status_get+0x6c>)
   23368:	4809      	ldr	r0, [pc, #36]	; (23390 <z_mrsh_k_timer_status_get+0x70>)
   2336a:	461a      	mov	r2, r3
   2336c:	f001 fdc6 	bl	24efc <log_1>
   23370:	e7f4      	b.n	2335c <z_mrsh_k_timer_status_get+0x3c>
	return z_impl_k_timer_status_get(timer);
   23372:	4628      	mov	r0, r5
   23374:	f006 fd55 	bl	29e22 <z_impl_k_timer_status_get>
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	uint32_t ret = z_vrfy_k_timer_status_get(*(struct k_timer **)&arg0)
;
	_current->syscall_frame = NULL;
   23378:	68bb      	ldr	r3, [r7, #8]
   2337a:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
	return (uintptr_t) ret;
}
   2337e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23380:	200023f4 	.word	0x200023f4
   23384:	0002a810 	.word	0x0002a810
   23388:	0002a6d0 	.word	0x0002a6d0
   2338c:	0002f382 	.word	0x0002f382
   23390:	0002e72d 	.word	0x0002e72d

00023394 <z_impl_k_timer_status_sync>:
}
#include <syscalls/k_timer_status_get_mrsh.c>
#endif

uint32_t z_impl_k_timer_status_sync(struct k_timer *timer)
{
   23394:	b513      	push	{r0, r1, r4, lr}
   23396:	4604      	mov	r4, r0
	__asm__ volatile(
   23398:	f04f 0320 	mov.w	r3, #32
   2339c:	f3ef 8111 	mrs	r1, BASEPRI
   233a0:	f383 8811 	msr	BASEPRI, r3
   233a4:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t result = timer->status;
   233a8:	6b00      	ldr	r0, [r0, #48]	; 0x30

	if (result == 0U) {
   233aa:	b9a8      	cbnz	r0, 233d8 <z_impl_k_timer_status_sync+0x44>
		if (!z_is_inactive_timeout(&timer->timeout)) {
   233ac:	6823      	ldr	r3, [r4, #0]
   233ae:	b19b      	cbz	r3, 233d8 <z_impl_k_timer_status_sync+0x44>
			/* wait for timer to expire or stop */
			(void)z_pend_curr(&lock, key, &timer->wait_q, K_FOREVER);
   233b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   233b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   233b8:	e9cd 2300 	strd	r2, r3, [sp]
   233bc:	480a      	ldr	r0, [pc, #40]	; (233e8 <z_impl_k_timer_status_sync+0x54>)
   233be:	f104 0218 	add.w	r2, r4, #24
   233c2:	f7fe f86d 	bl	214a0 <z_pend_curr>
   233c6:	f04f 0320 	mov.w	r3, #32
   233ca:	f3ef 8111 	mrs	r1, BASEPRI
   233ce:	f383 8811 	msr	BASEPRI, r3
   233d2:	f3bf 8f6f 	isb	sy

			/* get updated timer status */
			key = k_spin_lock(&lock);
			result = timer->status;
   233d6:	6b20      	ldr	r0, [r4, #48]	; 0x30
		}
	} else {
		/* timer has already expired at least once */
	}

	timer->status = 0U;
   233d8:	2300      	movs	r3, #0
   233da:	6323      	str	r3, [r4, #48]	; 0x30
	__asm__ volatile(
   233dc:	f381 8811 	msr	BASEPRI, r1
   233e0:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	return result;
}
   233e4:	b002      	add	sp, #8
   233e6:	bd10      	pop	{r4, pc}
   233e8:	20002bb3 	.word	0x20002bb3

000233ec <z_mrsh_k_timer_status_sync>:
#include <syscalls/kernel.h>

extern uint32_t z_vrfy_k_timer_status_sync(struct k_timer * timer);
uintptr_t z_mrsh_k_timer_status_sync(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   233ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	_current->syscall_frame = ssf;
   233ee:	4f17      	ldr	r7, [pc, #92]	; (2344c <z_mrsh_k_timer_status_sync+0x60>)
   233f0:	9a08      	ldr	r2, [sp, #32]
   233f2:	68bb      	ldr	r3, [r7, #8]
{
   233f4:	4605      	mov	r5, r0
	_current->syscall_frame = ssf;
   233f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

#ifdef CONFIG_USERSPACE
static inline uint32_t z_vrfy_k_timer_status_sync(struct k_timer *timer)
{
	Z_OOPS(Z_SYSCALL_OBJ(timer, K_OBJ_TIMER));
   233fa:	f7dc fe81 	bl	100 <z_object_find>
   233fe:	4629      	mov	r1, r5
   23400:	f006 fcd5 	bl	29dae <z_obj_validation_check.constprop.0>
   23404:	463e      	mov	r6, r7
   23406:	4604      	mov	r4, r0
   23408:	b1c8      	cbz	r0, 2343e <z_mrsh_k_timer_status_sync+0x52>
   2340a:	f006 fcc6 	bl	29d9a <arch_is_user_context>
   2340e:	4b10      	ldr	r3, [pc, #64]	; (23450 <z_mrsh_k_timer_status_sync+0x64>)
   23410:	4a10      	ldr	r2, [pc, #64]	; (23454 <z_mrsh_k_timer_status_sync+0x68>)
   23412:	1a9b      	subs	r3, r3, r2
   23414:	08db      	lsrs	r3, r3, #3
   23416:	019b      	lsls	r3, r3, #6
   23418:	f043 0301 	orr.w	r3, r3, #1
   2341c:	b148      	cbz	r0, 23432 <z_mrsh_k_timer_status_sync+0x46>
   2341e:	4a0e      	ldr	r2, [pc, #56]	; (23458 <z_mrsh_k_timer_status_sync+0x6c>)
   23420:	490e      	ldr	r1, [pc, #56]	; (2345c <z_mrsh_k_timer_status_sync+0x70>)
   23422:	4618      	mov	r0, r3
   23424:	f001 fd37 	bl	24e96 <log_from_user>
   23428:	68b3      	ldr	r3, [r6, #8]
   2342a:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   2342e:	f003 fb15 	bl	26a5c <arch_syscall_oops>
   23432:	4909      	ldr	r1, [pc, #36]	; (23458 <z_mrsh_k_timer_status_sync+0x6c>)
   23434:	4809      	ldr	r0, [pc, #36]	; (2345c <z_mrsh_k_timer_status_sync+0x70>)
   23436:	461a      	mov	r2, r3
   23438:	f001 fd60 	bl	24efc <log_1>
   2343c:	e7f4      	b.n	23428 <z_mrsh_k_timer_status_sync+0x3c>
	return z_impl_k_timer_status_sync(timer);
   2343e:	4628      	mov	r0, r5
   23440:	f7ff ffa8 	bl	23394 <z_impl_k_timer_status_sync>
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	uint32_t ret = z_vrfy_k_timer_status_sync(*(struct k_timer **)&arg0)
;
	_current->syscall_frame = NULL;
   23444:	68bb      	ldr	r3, [r7, #8]
   23446:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
	return (uintptr_t) ret;
}
   2344a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2344c:	200023f4 	.word	0x200023f4
   23450:	0002a810 	.word	0x0002a810
   23454:	0002a6d0 	.word	0x0002a6d0
   23458:	0002f39c 	.word	0x0002f39c
   2345c:	0002e72d 	.word	0x0002e72d

00023460 <z_mrsh_k_timer_remaining_ticks>:
#include <syscalls/kernel.h>

extern k_ticks_t z_vrfy_k_timer_remaining_ticks(const struct k_timer * timer);
uintptr_t z_mrsh_k_timer_remaining_ticks(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   23460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	_current->syscall_frame = ssf;
   23462:	4f17      	ldr	r7, [pc, #92]	; (234c0 <z_mrsh_k_timer_remaining_ticks+0x60>)
   23464:	9a08      	ldr	r2, [sp, #32]
   23466:	68bb      	ldr	r3, [r7, #8]
{
   23468:	4605      	mov	r5, r0
	_current->syscall_frame = ssf;
   2346a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#include <syscalls/k_timer_status_sync_mrsh.c>

static inline k_ticks_t z_vrfy_k_timer_remaining_ticks(
						const struct k_timer *timer)
{
	Z_OOPS(Z_SYSCALL_OBJ(timer, K_OBJ_TIMER));
   2346e:	f7dc fe47 	bl	100 <z_object_find>
   23472:	4629      	mov	r1, r5
   23474:	f006 fc9b 	bl	29dae <z_obj_validation_check.constprop.0>
   23478:	463e      	mov	r6, r7
   2347a:	4604      	mov	r4, r0
   2347c:	b1c8      	cbz	r0, 234b2 <z_mrsh_k_timer_remaining_ticks+0x52>
   2347e:	f006 fc8c 	bl	29d9a <arch_is_user_context>
   23482:	4b10      	ldr	r3, [pc, #64]	; (234c4 <z_mrsh_k_timer_remaining_ticks+0x64>)
   23484:	4a10      	ldr	r2, [pc, #64]	; (234c8 <z_mrsh_k_timer_remaining_ticks+0x68>)
   23486:	1a9b      	subs	r3, r3, r2
   23488:	08db      	lsrs	r3, r3, #3
   2348a:	019b      	lsls	r3, r3, #6
   2348c:	f043 0301 	orr.w	r3, r3, #1
   23490:	b148      	cbz	r0, 234a6 <z_mrsh_k_timer_remaining_ticks+0x46>
   23492:	4a0e      	ldr	r2, [pc, #56]	; (234cc <z_mrsh_k_timer_remaining_ticks+0x6c>)
   23494:	490e      	ldr	r1, [pc, #56]	; (234d0 <z_mrsh_k_timer_remaining_ticks+0x70>)
   23496:	4618      	mov	r0, r3
   23498:	f001 fcfd 	bl	24e96 <log_from_user>
   2349c:	68b3      	ldr	r3, [r6, #8]
   2349e:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   234a2:	f003 fadb 	bl	26a5c <arch_syscall_oops>
   234a6:	4909      	ldr	r1, [pc, #36]	; (234cc <z_mrsh_k_timer_remaining_ticks+0x6c>)
   234a8:	4809      	ldr	r0, [pc, #36]	; (234d0 <z_mrsh_k_timer_remaining_ticks+0x70>)
   234aa:	461a      	mov	r2, r3
   234ac:	f001 fd26 	bl	24efc <log_1>
   234b0:	e7f4      	b.n	2349c <z_mrsh_k_timer_remaining_ticks+0x3c>
	return z_timeout_remaining(&timer->timeout);
   234b2:	4628      	mov	r0, r5
   234b4:	f006 fc08 	bl	29cc8 <z_timeout_remaining>
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	k_ticks_t ret = z_vrfy_k_timer_remaining_ticks(*(const struct k_timer **)&arg0)
;
	_current->syscall_frame = NULL;
   234b8:	68bb      	ldr	r3, [r7, #8]
   234ba:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
	return (uintptr_t) ret;
}
   234be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   234c0:	200023f4 	.word	0x200023f4
   234c4:	0002a810 	.word	0x0002a810
   234c8:	0002a6d0 	.word	0x0002a6d0
   234cc:	0002f3b7 	.word	0x0002f3b7
   234d0:	0002e72d 	.word	0x0002e72d

000234d4 <z_mrsh_k_timer_expires_ticks>:
#include <syscalls/kernel.h>

extern k_ticks_t z_vrfy_k_timer_expires_ticks(const struct k_timer * timer);
uintptr_t z_mrsh_k_timer_expires_ticks(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   234d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	_current->syscall_frame = ssf;
   234d6:	4f17      	ldr	r7, [pc, #92]	; (23534 <z_mrsh_k_timer_expires_ticks+0x60>)
   234d8:	9a08      	ldr	r2, [sp, #32]
   234da:	68bb      	ldr	r3, [r7, #8]
{
   234dc:	4605      	mov	r5, r0
	_current->syscall_frame = ssf;
   234de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#include <syscalls/k_timer_remaining_ticks_mrsh.c>

static inline k_ticks_t z_vrfy_k_timer_expires_ticks(
						const struct k_timer *timer)
{
	Z_OOPS(Z_SYSCALL_OBJ(timer, K_OBJ_TIMER));
   234e2:	f7dc fe0d 	bl	100 <z_object_find>
   234e6:	4629      	mov	r1, r5
   234e8:	f006 fc61 	bl	29dae <z_obj_validation_check.constprop.0>
   234ec:	463e      	mov	r6, r7
   234ee:	4604      	mov	r4, r0
   234f0:	b1c8      	cbz	r0, 23526 <z_mrsh_k_timer_expires_ticks+0x52>
   234f2:	f006 fc52 	bl	29d9a <arch_is_user_context>
   234f6:	4b10      	ldr	r3, [pc, #64]	; (23538 <z_mrsh_k_timer_expires_ticks+0x64>)
   234f8:	4a10      	ldr	r2, [pc, #64]	; (2353c <z_mrsh_k_timer_expires_ticks+0x68>)
   234fa:	1a9b      	subs	r3, r3, r2
   234fc:	08db      	lsrs	r3, r3, #3
   234fe:	019b      	lsls	r3, r3, #6
   23500:	f043 0301 	orr.w	r3, r3, #1
   23504:	b148      	cbz	r0, 2351a <z_mrsh_k_timer_expires_ticks+0x46>
   23506:	4a0e      	ldr	r2, [pc, #56]	; (23540 <z_mrsh_k_timer_expires_ticks+0x6c>)
   23508:	490e      	ldr	r1, [pc, #56]	; (23544 <z_mrsh_k_timer_expires_ticks+0x70>)
   2350a:	4618      	mov	r0, r3
   2350c:	f001 fcc3 	bl	24e96 <log_from_user>
   23510:	68b3      	ldr	r3, [r6, #8]
   23512:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   23516:	f003 faa1 	bl	26a5c <arch_syscall_oops>
   2351a:	4909      	ldr	r1, [pc, #36]	; (23540 <z_mrsh_k_timer_expires_ticks+0x6c>)
   2351c:	4809      	ldr	r0, [pc, #36]	; (23544 <z_mrsh_k_timer_expires_ticks+0x70>)
   2351e:	461a      	mov	r2, r3
   23520:	f001 fcec 	bl	24efc <log_1>
   23524:	e7f4      	b.n	23510 <z_mrsh_k_timer_expires_ticks+0x3c>
	return z_timeout_expires(&timer->timeout);
   23526:	4628      	mov	r0, r5
   23528:	f7ff fcfc 	bl	22f24 <z_timeout_expires>
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	k_ticks_t ret = z_vrfy_k_timer_expires_ticks(*(const struct k_timer **)&arg0)
;
	_current->syscall_frame = NULL;
   2352c:	68bb      	ldr	r3, [r7, #8]
   2352e:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
	return (uintptr_t) ret;
}
   23532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23534:	200023f4 	.word	0x200023f4
   23538:	0002a810 	.word	0x0002a810
   2353c:	0002a6d0 	.word	0x0002a6d0
   23540:	0002f3d6 	.word	0x0002f3d6
   23544:	0002e72d 	.word	0x0002e72d

00023548 <z_mrsh_k_timer_user_data_get>:
#include <syscalls/kernel.h>

extern void * z_vrfy_k_timer_user_data_get(const struct k_timer * timer);
uintptr_t z_mrsh_k_timer_user_data_get(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   23548:	b570      	push	{r4, r5, r6, lr}
	_current->syscall_frame = ssf;
   2354a:	4e16      	ldr	r6, [pc, #88]	; (235a4 <z_mrsh_k_timer_user_data_get+0x5c>)
   2354c:	9a06      	ldr	r2, [sp, #24]
   2354e:	68b3      	ldr	r3, [r6, #8]
{
   23550:	4604      	mov	r4, r0
	_current->syscall_frame = ssf;
   23552:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
#include <syscalls/k_timer_expires_ticks_mrsh.c>

static inline void *z_vrfy_k_timer_user_data_get(const struct k_timer *timer)
{
	Z_OOPS(Z_SYSCALL_OBJ(timer, K_OBJ_TIMER));
   23556:	f7dc fdd3 	bl	100 <z_object_find>
   2355a:	4621      	mov	r1, r4
   2355c:	f006 fc27 	bl	29dae <z_obj_validation_check.constprop.0>
   23560:	4635      	mov	r5, r6
   23562:	4603      	mov	r3, r0
   23564:	b1c8      	cbz	r0, 2359a <z_mrsh_k_timer_user_data_get+0x52>
   23566:	f006 fc18 	bl	29d9a <arch_is_user_context>
   2356a:	4b0f      	ldr	r3, [pc, #60]	; (235a8 <z_mrsh_k_timer_user_data_get+0x60>)
   2356c:	4a0f      	ldr	r2, [pc, #60]	; (235ac <z_mrsh_k_timer_user_data_get+0x64>)
   2356e:	1a9b      	subs	r3, r3, r2
   23570:	08db      	lsrs	r3, r3, #3
   23572:	019b      	lsls	r3, r3, #6
   23574:	f043 0301 	orr.w	r3, r3, #1
   23578:	b148      	cbz	r0, 2358e <z_mrsh_k_timer_user_data_get+0x46>
   2357a:	4a0d      	ldr	r2, [pc, #52]	; (235b0 <z_mrsh_k_timer_user_data_get+0x68>)
   2357c:	490d      	ldr	r1, [pc, #52]	; (235b4 <z_mrsh_k_timer_user_data_get+0x6c>)
   2357e:	4618      	mov	r0, r3
   23580:	f001 fc89 	bl	24e96 <log_from_user>
   23584:	68ab      	ldr	r3, [r5, #8]
   23586:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   2358a:	f003 fa67 	bl	26a5c <arch_syscall_oops>
   2358e:	4908      	ldr	r1, [pc, #32]	; (235b0 <z_mrsh_k_timer_user_data_get+0x68>)
   23590:	4808      	ldr	r0, [pc, #32]	; (235b4 <z_mrsh_k_timer_user_data_get+0x6c>)
   23592:	461a      	mov	r2, r3
   23594:	f001 fcb2 	bl	24efc <log_1>
   23598:	e7f4      	b.n	23584 <z_mrsh_k_timer_user_data_get+0x3c>
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	void * ret = z_vrfy_k_timer_user_data_get(*(const struct k_timer **)&arg0)
;
	_current->syscall_frame = NULL;
   2359a:	68b2      	ldr	r2, [r6, #8]
	return z_impl_k_timer_user_data_get(timer);
   2359c:	6b60      	ldr	r0, [r4, #52]	; 0x34
   2359e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	return (uintptr_t) ret;
}
   235a2:	bd70      	pop	{r4, r5, r6, pc}
   235a4:	200023f4 	.word	0x200023f4
   235a8:	0002a810 	.word	0x0002a810
   235ac:	0002a6d0 	.word	0x0002a6d0
   235b0:	0002f3f3 	.word	0x0002f3f3
   235b4:	0002e72d 	.word	0x0002e72d

000235b8 <z_mrsh_k_timer_user_data_set>:
#include <syscalls/kernel.h>

extern void z_vrfy_k_timer_user_data_set(struct k_timer * timer, void * user_data);
uintptr_t z_mrsh_k_timer_user_data_set(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   235b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	_current->syscall_frame = ssf;
   235ba:	4e16      	ldr	r6, [pc, #88]	; (23614 <z_mrsh_k_timer_user_data_set+0x5c>)
   235bc:	9a08      	ldr	r2, [sp, #32]
   235be:	68b3      	ldr	r3, [r6, #8]
{
   235c0:	4604      	mov	r4, r0
	_current->syscall_frame = ssf;
   235c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
{
   235c6:	460f      	mov	r7, r1
#include <syscalls/k_timer_user_data_get_mrsh.c>

static inline void z_vrfy_k_timer_user_data_set(struct k_timer *timer,
						void *user_data)
{
	Z_OOPS(Z_SYSCALL_OBJ(timer, K_OBJ_TIMER));
   235c8:	f7dc fd9a 	bl	100 <z_object_find>
   235cc:	4621      	mov	r1, r4
   235ce:	f006 fbee 	bl	29dae <z_obj_validation_check.constprop.0>
   235d2:	4635      	mov	r5, r6
   235d4:	b1c8      	cbz	r0, 2360a <z_mrsh_k_timer_user_data_set+0x52>
   235d6:	f006 fbe0 	bl	29d9a <arch_is_user_context>
   235da:	4b0f      	ldr	r3, [pc, #60]	; (23618 <z_mrsh_k_timer_user_data_set+0x60>)
   235dc:	4a0f      	ldr	r2, [pc, #60]	; (2361c <z_mrsh_k_timer_user_data_set+0x64>)
   235de:	1a9b      	subs	r3, r3, r2
   235e0:	08db      	lsrs	r3, r3, #3
   235e2:	019b      	lsls	r3, r3, #6
   235e4:	f043 0301 	orr.w	r3, r3, #1
   235e8:	b148      	cbz	r0, 235fe <z_mrsh_k_timer_user_data_set+0x46>
   235ea:	4a0d      	ldr	r2, [pc, #52]	; (23620 <z_mrsh_k_timer_user_data_set+0x68>)
   235ec:	490d      	ldr	r1, [pc, #52]	; (23624 <z_mrsh_k_timer_user_data_set+0x6c>)
   235ee:	4618      	mov	r0, r3
   235f0:	f001 fc51 	bl	24e96 <log_from_user>
   235f4:	68ab      	ldr	r3, [r5, #8]
   235f6:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   235fa:	f003 fa2f 	bl	26a5c <arch_syscall_oops>
   235fe:	4908      	ldr	r1, [pc, #32]	; (23620 <z_mrsh_k_timer_user_data_set+0x68>)
   23600:	4808      	ldr	r0, [pc, #32]	; (23624 <z_mrsh_k_timer_user_data_set+0x6c>)
   23602:	461a      	mov	r2, r3
   23604:	f001 fc7a 	bl	24efc <log_1>
   23608:	e7f4      	b.n	235f4 <z_mrsh_k_timer_user_data_set+0x3c>
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	z_vrfy_k_timer_user_data_set(*(struct k_timer **)&arg0, *(void **)&arg1)
;
	_current->syscall_frame = NULL;
   2360a:	68b2      	ldr	r2, [r6, #8]
	timer->user_data = user_data;
   2360c:	6367      	str	r7, [r4, #52]	; 0x34
   2360e:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
	return 0;
}
   23612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23614:	200023f4 	.word	0x200023f4
   23618:	0002a810 	.word	0x0002a810
   2361c:	0002a6d0 	.word	0x0002a6d0
   23620:	0002f410 	.word	0x0002f410
   23624:	0002e72d 	.word	0x0002e72d

00023628 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   23628:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   2362c:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   2362e:	4b29      	ldr	r3, [pc, #164]	; (236d4 <z_impl_k_poll+0xac>)
   23630:	689d      	ldr	r5, [r3, #8]

	poller->is_polling = true;
   23632:	2301      	movs	r3, #1
   23634:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	poller->mode = MODE_POLL;
   23638:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	events_registered = register_events(events, num_events, poller,
   2363c:	ea52 0307 	orrs.w	r3, r2, r7
{
   23640:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   23642:	bf0c      	ite	eq
   23644:	2301      	moveq	r3, #1
   23646:	2300      	movne	r3, #0
   23648:	f105 0260 	add.w	r2, r5, #96	; 0x60
{
   2364c:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   2364e:	f006 fc74 	bl	29f3a <register_events>
   23652:	4681      	mov	r9, r0
	__asm__ volatile(
   23654:	f04f 0320 	mov.w	r3, #32
   23658:	f3ef 8a11 	mrs	sl, BASEPRI
   2365c:	f383 8811 	msr	BASEPRI, r3
   23660:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   23664:	f895 4060 	ldrb.w	r4, [r5, #96]	; 0x60
   23668:	b964      	cbnz	r4, 23684 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   2366a:	4601      	mov	r1, r0
   2366c:	4652      	mov	r2, sl
   2366e:	4640      	mov	r0, r8
   23670:	f006 fbf2 	bl	29e58 <clear_event_registrations>
	__asm__ volatile(
   23674:	f38a 8811 	msr	BASEPRI, sl
   23678:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   2367c:	4620      	mov	r0, r4
   2367e:	b002      	add	sp, #8
   23680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   23684:	2300      	movs	r3, #0
   23686:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2368a:	ea56 0307 	orrs.w	r3, r6, r7
   2368e:	d106      	bne.n	2369e <z_impl_k_poll+0x76>
   23690:	f38a 8811 	msr	BASEPRI, sl
   23694:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   23698:	f06f 040a 	mvn.w	r4, #10
   2369c:	e7ee      	b.n	2367c <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   2369e:	e9cd 6700 	strd	r6, r7, [sp]
   236a2:	4a0d      	ldr	r2, [pc, #52]	; (236d8 <z_impl_k_poll+0xb0>)
   236a4:	480d      	ldr	r0, [pc, #52]	; (236dc <z_impl_k_poll+0xb4>)
   236a6:	4651      	mov	r1, sl
   236a8:	f7fd fefa 	bl	214a0 <z_pend_curr>
   236ac:	4604      	mov	r4, r0
	__asm__ volatile(
   236ae:	f04f 0320 	mov.w	r3, #32
   236b2:	f3ef 8511 	mrs	r5, BASEPRI
   236b6:	f383 8811 	msr	BASEPRI, r3
   236ba:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   236be:	462a      	mov	r2, r5
   236c0:	4649      	mov	r1, r9
   236c2:	4640      	mov	r0, r8
   236c4:	f006 fbc8 	bl	29e58 <clear_event_registrations>
	__asm__ volatile(
   236c8:	f385 8811 	msr	BASEPRI, r5
   236cc:	f3bf 8f6f 	isb	sy
	return swap_rc;
   236d0:	e7d4      	b.n	2367c <z_impl_k_poll+0x54>
   236d2:	bf00      	nop
   236d4:	200023f4 	.word	0x200023f4
   236d8:	20007c3c 	.word	0x20007c3c
   236dc:	20002bb3 	.word	0x20002bb3

000236e0 <z_mrsh_k_poll>:
#include <syscalls/kernel.h>

extern int z_vrfy_k_poll(struct k_poll_event * events, int num_events, k_timeout_t timeout);
uintptr_t z_mrsh_k_poll(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   236e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_current->syscall_frame = ssf;
   236e4:	4f78      	ldr	r7, [pc, #480]	; (238c8 <z_mrsh_k_poll+0x1e8>)
{
   236e6:	b089      	sub	sp, #36	; 0x24
   236e8:	469b      	mov	fp, r3
	_current->syscall_frame = ssf;
   236ea:	68bb      	ldr	r3, [r7, #8]
{
   236ec:	9203      	str	r2, [sp, #12]
	return a != 0 && (c / a) != b;
}

static inline bool u32_mul_overflow(uint32_t a, uint32_t b, uint32_t *result)
{
	uint32_t c = a * b;
   236ee:	2614      	movs	r6, #20
	_current->syscall_frame = ssf;
   236f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
   236f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
{
   236f6:	4680      	mov	r8, r0
   236f8:	4689      	mov	r9, r1
   236fa:	434e      	muls	r6, r1

	*result = c;

	return a != 0 && (c / a) != b;
   236fc:	b199      	cbz	r1, 23726 <z_mrsh_k_poll+0x46>
   236fe:	fbb6 f3f1 	udiv	r3, r6, r1
   23702:	2b14      	cmp	r3, #20
   23704:	d00f      	beq.n	23726 <z_mrsh_k_poll+0x46>
   23706:	f006 fb9d 	bl	29e44 <arch_is_user_context>
   2370a:	4b70      	ldr	r3, [pc, #448]	; (238cc <z_mrsh_k_poll+0x1ec>)
   2370c:	4a70      	ldr	r2, [pc, #448]	; (238d0 <z_mrsh_k_poll+0x1f0>)
   2370e:	1a9b      	subs	r3, r3, r2
   23710:	08db      	lsrs	r3, r3, #3
	 */
	if (Z_SYSCALL_VERIFY(num_events >= 0U)) {
		ret = -EINVAL;
		goto out;
	}
	if (Z_SYSCALL_VERIFY_MSG(!u32_mul_overflow(num_events,
   23712:	019b      	lsls	r3, r3, #6
   23714:	f043 0301 	orr.w	r3, r3, #1
   23718:	b970      	cbnz	r0, 23738 <z_mrsh_k_poll+0x58>
   2371a:	496e      	ldr	r1, [pc, #440]	; (238d4 <z_mrsh_k_poll+0x1f4>)
   2371c:	486e      	ldr	r0, [pc, #440]	; (238d8 <z_mrsh_k_poll+0x1f8>)
   2371e:	461a      	mov	r2, r3
   23720:	f001 fbec 	bl	24efc <log_1>
   23724:	e00d      	b.n	23742 <z_mrsh_k_poll+0x62>
	return z_thread_aligned_alloc(0, size);
   23726:	4631      	mov	r1, r6
   23728:	2000      	movs	r0, #0
   2372a:	f000 fa51 	bl	23bd0 <z_thread_aligned_alloc>
				 "num_events too large")) {
		ret = -EINVAL;
		goto out;
	}
	events_copy = z_thread_malloc(bounds);
	if (!events_copy) {
   2372e:	4605      	mov	r5, r0
   23730:	b988      	cbnz	r0, 23756 <z_mrsh_k_poll+0x76>
		ret = -ENOMEM;
   23732:	f06f 040b 	mvn.w	r4, #11
   23736:	e006      	b.n	23746 <z_mrsh_k_poll+0x66>
	if (Z_SYSCALL_VERIFY_MSG(!u32_mul_overflow(num_events,
   23738:	4a66      	ldr	r2, [pc, #408]	; (238d4 <z_mrsh_k_poll+0x1f4>)
   2373a:	4967      	ldr	r1, [pc, #412]	; (238d8 <z_mrsh_k_poll+0x1f8>)
   2373c:	4618      	mov	r0, r3
   2373e:	f001 fbaa 	bl	24e96 <log_from_user>
		ret = -EINVAL;
   23742:	f06f 0415 	mvn.w	r4, #21
	union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0;
	parm0.split.lo = arg2;
	parm0.split.hi = arg3;
	int ret = z_vrfy_k_poll(*(struct k_poll_event **)&arg0, *(int*)&arg1, parm0.val)
;
	_current->syscall_frame = NULL;
   23746:	68bb      	ldr	r3, [r7, #8]
   23748:	2200      	movs	r2, #0
	return (uintptr_t) ret;
}
   2374a:	4620      	mov	r0, r4
	_current->syscall_frame = NULL;
   2374c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
   23750:	b009      	add	sp, #36	; 0x24
   23752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   23756:	f04f 0320 	mov.w	r3, #32
   2375a:	f3ef 8411 	mrs	r4, BASEPRI
   2375e:	f383 8811 	msr	BASEPRI, r3
   23762:	f3bf 8f6f 	isb	sy
		goto out;
	}

	key = k_spin_lock(&lock);
	if (Z_SYSCALL_MEMORY_WRITE(events, bounds)) {
   23766:	2201      	movs	r2, #1
   23768:	4631      	mov	r1, r6
   2376a:	4640      	mov	r0, r8
   2376c:	f003 f99a 	bl	26aa4 <arch_buffer_validate>
   23770:	4682      	mov	sl, r0
   23772:	2800      	cmp	r0, #0
   23774:	f000 809c 	beq.w	238b0 <z_mrsh_k_poll+0x1d0>
   23778:	f006 fb64 	bl	29e44 <arch_is_user_context>
   2377c:	4b53      	ldr	r3, [pc, #332]	; (238cc <z_mrsh_k_poll+0x1ec>)
   2377e:	4a54      	ldr	r2, [pc, #336]	; (238d0 <z_mrsh_k_poll+0x1f0>)
   23780:	eba3 0c02 	sub.w	ip, r3, r2
   23784:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
   23788:	ea4f 1c8c 	mov.w	ip, ip, lsl #6
   2378c:	4b53      	ldr	r3, [pc, #332]	; (238dc <z_mrsh_k_poll+0x1fc>)
   2378e:	f04c 0c01 	orr.w	ip, ip, #1
   23792:	b198      	cbz	r0, 237bc <z_mrsh_k_poll+0xdc>
   23794:	e9cd 6300 	strd	r6, r3, [sp]
   23798:	4a4e      	ldr	r2, [pc, #312]	; (238d4 <z_mrsh_k_poll+0x1f4>)
   2379a:	4951      	ldr	r1, [pc, #324]	; (238e0 <z_mrsh_k_poll+0x200>)
   2379c:	4643      	mov	r3, r8
   2379e:	4660      	mov	r0, ip
   237a0:	f001 fb79 	bl	24e96 <log_from_user>
	__asm__ volatile(
   237a4:	f384 8811 	msr	BASEPRI, r4
   237a8:	f3bf 8f6f 	isb	sy
out_free:
	k_free(events_copy);
out:
	return ret;
oops_free:
	k_free(events_copy);
   237ac:	4628      	mov	r0, r5
   237ae:	f006 fca4 	bl	2a0fa <k_free>
			Z_OOPS(Z_SYSCALL_OBJ(e->queue, K_OBJ_QUEUE));
   237b2:	68bb      	ldr	r3, [r7, #8]
   237b4:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   237b8:	f003 f950 	bl	26a5c <arch_syscall_oops>
	if (Z_SYSCALL_MEMORY_WRITE(events, bounds)) {
   237bc:	4a45      	ldr	r2, [pc, #276]	; (238d4 <z_mrsh_k_poll+0x1f4>)
   237be:	4848      	ldr	r0, [pc, #288]	; (238e0 <z_mrsh_k_poll+0x200>)
   237c0:	e9cd 2804 	strd	r2, r8, [sp, #16]
   237c4:	e9cd 6306 	strd	r6, r3, [sp, #24]
   237c8:	2204      	movs	r2, #4
   237ca:	4663      	mov	r3, ip
   237cc:	a904      	add	r1, sp, #16
   237ce:	f001 fbde 	bl	24f8e <log_n>
   237d2:	e7e7      	b.n	237a4 <z_mrsh_k_poll+0xc4>
		if (Z_SYSCALL_VERIFY(e->mode == K_POLL_MODE_NOTIFY_ONLY)) {
   237d4:	7ba3      	ldrb	r3, [r4, #14]
   237d6:	079b      	lsls	r3, r3, #30
   237d8:	d557      	bpl.n	2388a <z_mrsh_k_poll+0x1aa>
   237da:	f006 fb33 	bl	29e44 <arch_is_user_context>
   237de:	4b3b      	ldr	r3, [pc, #236]	; (238cc <z_mrsh_k_poll+0x1ec>)
   237e0:	4a3b      	ldr	r2, [pc, #236]	; (238d0 <z_mrsh_k_poll+0x1f0>)
   237e2:	1a9b      	subs	r3, r3, r2
   237e4:	08db      	lsrs	r3, r3, #3
   237e6:	019b      	lsls	r3, r3, #6
   237e8:	f043 0301 	orr.w	r3, r3, #1
   237ec:	b138      	cbz	r0, 237fe <z_mrsh_k_poll+0x11e>
   237ee:	4a39      	ldr	r2, [pc, #228]	; (238d4 <z_mrsh_k_poll+0x1f4>)
   237f0:	493c      	ldr	r1, [pc, #240]	; (238e4 <z_mrsh_k_poll+0x204>)
   237f2:	4618      	mov	r0, r3
   237f4:	f001 fb4f 	bl	24e96 <log_from_user>
		switch (e->type) {
   237f8:	f06f 0415 	mvn.w	r4, #21
   237fc:	e041      	b.n	23882 <z_mrsh_k_poll+0x1a2>
		if (Z_SYSCALL_VERIFY(e->mode == K_POLL_MODE_NOTIFY_ONLY)) {
   237fe:	4935      	ldr	r1, [pc, #212]	; (238d4 <z_mrsh_k_poll+0x1f4>)
   23800:	4838      	ldr	r0, [pc, #224]	; (238e4 <z_mrsh_k_poll+0x204>)
   23802:	461a      	mov	r2, r3
   23804:	f001 fb7a 	bl	24efc <log_1>
   23808:	e7f6      	b.n	237f8 <z_mrsh_k_poll+0x118>
			Z_OOPS(Z_SYSCALL_OBJ(e->signal, K_OBJ_POLL_SIGNAL));
   2380a:	6920      	ldr	r0, [r4, #16]
   2380c:	f7dc fc78 	bl	100 <z_object_find>
   23810:	2300      	movs	r3, #0
   23812:	2206      	movs	r2, #6
			Z_OOPS(Z_SYSCALL_OBJ(e->queue, K_OBJ_QUEUE));
   23814:	6921      	ldr	r1, [r4, #16]
   23816:	f006 fb4a 	bl	29eae <z_obj_validation_check>
   2381a:	b308      	cbz	r0, 23860 <z_mrsh_k_poll+0x180>
   2381c:	f006 fb12 	bl	29e44 <arch_is_user_context>
   23820:	4b2a      	ldr	r3, [pc, #168]	; (238cc <z_mrsh_k_poll+0x1ec>)
   23822:	4a2b      	ldr	r2, [pc, #172]	; (238d0 <z_mrsh_k_poll+0x1f0>)
   23824:	1a9b      	subs	r3, r3, r2
   23826:	08db      	lsrs	r3, r3, #3
   23828:	019b      	lsls	r3, r3, #6
   2382a:	f043 0301 	orr.w	r3, r3, #1
   2382e:	b188      	cbz	r0, 23854 <z_mrsh_k_poll+0x174>
   23830:	4a28      	ldr	r2, [pc, #160]	; (238d4 <z_mrsh_k_poll+0x1f4>)
   23832:	492d      	ldr	r1, [pc, #180]	; (238e8 <z_mrsh_k_poll+0x208>)
   23834:	4618      	mov	r0, r3
   23836:	f001 fb2e 	bl	24e96 <log_from_user>
   2383a:	e7ba      	b.n	237b2 <z_mrsh_k_poll+0xd2>
			Z_OOPS(Z_SYSCALL_OBJ(e->sem, K_OBJ_SEM));
   2383c:	6920      	ldr	r0, [r4, #16]
   2383e:	f7dc fc5f 	bl	100 <z_object_find>
   23842:	2300      	movs	r3, #0
   23844:	2207      	movs	r2, #7
   23846:	e7e5      	b.n	23814 <z_mrsh_k_poll+0x134>
			Z_OOPS(Z_SYSCALL_OBJ(e->queue, K_OBJ_QUEUE));
   23848:	6920      	ldr	r0, [r4, #16]
   2384a:	f7dc fc59 	bl	100 <z_object_find>
   2384e:	2300      	movs	r3, #0
   23850:	2205      	movs	r2, #5
   23852:	e7df      	b.n	23814 <z_mrsh_k_poll+0x134>
   23854:	491f      	ldr	r1, [pc, #124]	; (238d4 <z_mrsh_k_poll+0x1f4>)
   23856:	4824      	ldr	r0, [pc, #144]	; (238e8 <z_mrsh_k_poll+0x208>)
   23858:	461a      	mov	r2, r3
   2385a:	f001 fb4f 	bl	24efc <log_1>
   2385e:	e7a8      	b.n	237b2 <z_mrsh_k_poll+0xd2>
	for (int i = 0; i < num_events; i++) {
   23860:	f10a 0a01 	add.w	sl, sl, #1
   23864:	3414      	adds	r4, #20
   23866:	45d1      	cmp	r9, sl
   23868:	dcb4      	bgt.n	237d4 <z_mrsh_k_poll+0xf4>
	return z_impl_k_poll(events, num_events, timeout);
   2386a:	9a03      	ldr	r2, [sp, #12]
   2386c:	4649      	mov	r1, r9
   2386e:	465b      	mov	r3, fp
   23870:	4628      	mov	r0, r5
   23872:	f7ff fed9 	bl	23628 <z_impl_k_poll>
   23876:	4632      	mov	r2, r6
   23878:	4604      	mov	r4, r0
   2387a:	4629      	mov	r1, r5
   2387c:	4640      	mov	r0, r8
   2387e:	f006 fdaf 	bl	2a3e0 <memcpy>
	k_free(events_copy);
   23882:	4628      	mov	r0, r5
   23884:	f006 fc39 	bl	2a0fa <k_free>
   23888:	e75d      	b.n	23746 <z_mrsh_k_poll+0x66>
		switch (e->type) {
   2388a:	7b63      	ldrb	r3, [r4, #13]
   2388c:	f003 030f 	and.w	r3, r3, #15
   23890:	2b04      	cmp	r3, #4
   23892:	d8b1      	bhi.n	237f8 <z_mrsh_k_poll+0x118>
   23894:	a201      	add	r2, pc, #4	; (adr r2, 2389c <z_mrsh_k_poll+0x1bc>)
   23896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2389a:	bf00      	nop
   2389c:	00023861 	.word	0x00023861
   238a0:	0002380b 	.word	0x0002380b
   238a4:	0002383d 	.word	0x0002383d
   238a8:	000237f9 	.word	0x000237f9
   238ac:	00023849 	.word	0x00023849
   238b0:	4632      	mov	r2, r6
   238b2:	4641      	mov	r1, r8
   238b4:	4628      	mov	r0, r5
   238b6:	f006 fd93 	bl	2a3e0 <memcpy>
   238ba:	f384 8811 	msr	BASEPRI, r4
   238be:	f3bf 8f6f 	isb	sy
	for (int i = 0; i < num_events; i++) {
   238c2:	462c      	mov	r4, r5
   238c4:	e7cf      	b.n	23866 <z_mrsh_k_poll+0x186>
   238c6:	bf00      	nop
   238c8:	200023f4 	.word	0x200023f4
   238cc:	0002a810 	.word	0x0002a810
   238d0:	0002a6d0 	.word	0x0002a6d0
   238d4:	0002f497 	.word	0x0002f497
   238d8:	0002f42d 	.word	0x0002f42d
   238dc:	0002c903 	.word	0x0002c903
   238e0:	0002c8a6 	.word	0x0002c8a6
   238e4:	0002f45b 	.word	0x0002f45b
   238e8:	0002e72d 	.word	0x0002e72d

000238ec <z_mrsh_k_poll_signal_init>:
#include <syscalls/kernel.h>

extern void z_vrfy_k_poll_signal_init(struct k_poll_signal * sig);
uintptr_t z_mrsh_k_poll_signal_init(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   238ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	_current->syscall_frame = ssf;
   238ee:	4f19      	ldr	r7, [pc, #100]	; (23954 <z_mrsh_k_poll_signal_init+0x68>)
   238f0:	9a08      	ldr	r2, [sp, #32]
   238f2:	68bb      	ldr	r3, [r7, #8]
{
   238f4:	4605      	mov	r5, r0
	_current->syscall_frame = ssf;
   238f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}

#ifdef CONFIG_USERSPACE
static inline void z_vrfy_k_poll_signal_init(struct k_poll_signal *sig)
{
	Z_OOPS(Z_SYSCALL_OBJ_INIT(sig, K_OBJ_POLL_SIGNAL));
   238fa:	f7dc fc01 	bl	100 <z_object_find>
   238fe:	2301      	movs	r3, #1
   23900:	2206      	movs	r2, #6
   23902:	4629      	mov	r1, r5
   23904:	f006 fad3 	bl	29eae <z_obj_validation_check>
   23908:	463e      	mov	r6, r7
   2390a:	4604      	mov	r4, r0
   2390c:	b1c8      	cbz	r0, 23942 <z_mrsh_k_poll_signal_init+0x56>
   2390e:	f006 fa99 	bl	29e44 <arch_is_user_context>
   23912:	4b11      	ldr	r3, [pc, #68]	; (23958 <z_mrsh_k_poll_signal_init+0x6c>)
   23914:	4a11      	ldr	r2, [pc, #68]	; (2395c <z_mrsh_k_poll_signal_init+0x70>)
   23916:	1a9b      	subs	r3, r3, r2
   23918:	08db      	lsrs	r3, r3, #3
   2391a:	019b      	lsls	r3, r3, #6
   2391c:	f043 0301 	orr.w	r3, r3, #1
   23920:	b148      	cbz	r0, 23936 <z_mrsh_k_poll_signal_init+0x4a>
   23922:	4a0f      	ldr	r2, [pc, #60]	; (23960 <z_mrsh_k_poll_signal_init+0x74>)
   23924:	490f      	ldr	r1, [pc, #60]	; (23964 <z_mrsh_k_poll_signal_init+0x78>)
   23926:	4618      	mov	r0, r3
   23928:	f001 fab5 	bl	24e96 <log_from_user>
   2392c:	68b3      	ldr	r3, [r6, #8]
   2392e:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   23932:	f003 f893 	bl	26a5c <arch_syscall_oops>
   23936:	490a      	ldr	r1, [pc, #40]	; (23960 <z_mrsh_k_poll_signal_init+0x74>)
   23938:	480a      	ldr	r0, [pc, #40]	; (23964 <z_mrsh_k_poll_signal_init+0x78>)
   2393a:	461a      	mov	r2, r3
   2393c:	f001 fade 	bl	24efc <log_1>
   23940:	e7f4      	b.n	2392c <z_mrsh_k_poll_signal_init+0x40>
	z_impl_k_poll_signal_init(sig);
   23942:	4628      	mov	r0, r5
   23944:	f006 fbd3 	bl	2a0ee <z_impl_k_poll_signal_init>
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	z_vrfy_k_poll_signal_init(*(struct k_poll_signal **)&arg0)
;
	_current->syscall_frame = NULL;
   23948:	68bb      	ldr	r3, [r7, #8]
	return 0;
}
   2394a:	4620      	mov	r0, r4
	_current->syscall_frame = NULL;
   2394c:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
}
   23950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23952:	bf00      	nop
   23954:	200023f4 	.word	0x200023f4
   23958:	0002a810 	.word	0x0002a810
   2395c:	0002a6d0 	.word	0x0002a6d0
   23960:	0002f4a5 	.word	0x0002f4a5
   23964:	0002e72d 	.word	0x0002e72d

00023968 <z_vrfy_k_poll_signal_check>:
}

#ifdef CONFIG_USERSPACE
void z_vrfy_k_poll_signal_check(struct k_poll_signal *sig,
			       unsigned int *signaled, int *result)
{
   23968:	b570      	push	{r4, r5, r6, lr}
   2396a:	4604      	mov	r4, r0
   2396c:	b086      	sub	sp, #24
   2396e:	460d      	mov	r5, r1
   23970:	4616      	mov	r6, r2
	Z_OOPS(Z_SYSCALL_OBJ(sig, K_OBJ_POLL_SIGNAL));
   23972:	f7dc fbc5 	bl	100 <z_object_find>
   23976:	2300      	movs	r3, #0
   23978:	2206      	movs	r2, #6
   2397a:	4621      	mov	r1, r4
   2397c:	f006 fa97 	bl	29eae <z_obj_validation_check>
   23980:	2800      	cmp	r0, #0
   23982:	d047      	beq.n	23a14 <z_vrfy_k_poll_signal_check+0xac>
   23984:	f006 fa5e 	bl	29e44 <arch_is_user_context>
   23988:	4b31      	ldr	r3, [pc, #196]	; (23a50 <z_vrfy_k_poll_signal_check+0xe8>)
   2398a:	4a32      	ldr	r2, [pc, #200]	; (23a54 <z_vrfy_k_poll_signal_check+0xec>)
   2398c:	1a9b      	subs	r3, r3, r2
   2398e:	08db      	lsrs	r3, r3, #3
   23990:	019b      	lsls	r3, r3, #6
   23992:	f043 0301 	orr.w	r3, r3, #1
   23996:	b150      	cbz	r0, 239ae <z_vrfy_k_poll_signal_check+0x46>
   23998:	4a2f      	ldr	r2, [pc, #188]	; (23a58 <z_vrfy_k_poll_signal_check+0xf0>)
   2399a:	4930      	ldr	r1, [pc, #192]	; (23a5c <z_vrfy_k_poll_signal_check+0xf4>)
   2399c:	4618      	mov	r0, r3
   2399e:	f001 fa7a 	bl	24e96 <log_from_user>
	Z_OOPS(Z_SYSCALL_MEMORY_WRITE(signaled, sizeof(unsigned int)));
	Z_OOPS(Z_SYSCALL_MEMORY_WRITE(result, sizeof(int)));
   239a2:	4b2f      	ldr	r3, [pc, #188]	; (23a60 <z_vrfy_k_poll_signal_check+0xf8>)
   239a4:	689b      	ldr	r3, [r3, #8]
   239a6:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   239aa:	f003 f857 	bl	26a5c <arch_syscall_oops>
	Z_OOPS(Z_SYSCALL_OBJ(sig, K_OBJ_POLL_SIGNAL));
   239ae:	492a      	ldr	r1, [pc, #168]	; (23a58 <z_vrfy_k_poll_signal_check+0xf0>)
   239b0:	482a      	ldr	r0, [pc, #168]	; (23a5c <z_vrfy_k_poll_signal_check+0xf4>)
   239b2:	461a      	mov	r2, r3
   239b4:	f001 faa2 	bl	24efc <log_1>
   239b8:	e7f3      	b.n	239a2 <z_vrfy_k_poll_signal_check+0x3a>
	Z_OOPS(Z_SYSCALL_MEMORY_WRITE(signaled, sizeof(unsigned int)));
   239ba:	4927      	ldr	r1, [pc, #156]	; (23a58 <z_vrfy_k_poll_signal_check+0xf0>)
   239bc:	e9cd 1502 	strd	r1, r5, [sp, #8]
	Z_OOPS(Z_SYSCALL_MEMORY_WRITE(result, sizeof(int)));
   239c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
   239c4:	4827      	ldr	r0, [pc, #156]	; (23a64 <z_vrfy_k_poll_signal_check+0xfc>)
   239c6:	4623      	mov	r3, r4
   239c8:	a902      	add	r1, sp, #8
   239ca:	f001 fae0 	bl	24f8e <log_n>
   239ce:	e7e8      	b.n	239a2 <z_vrfy_k_poll_signal_check+0x3a>
   239d0:	4921      	ldr	r1, [pc, #132]	; (23a58 <z_vrfy_k_poll_signal_check+0xf0>)
   239d2:	e9cd 1602 	strd	r1, r6, [sp, #8]
   239d6:	e7f3      	b.n	239c0 <z_vrfy_k_poll_signal_check+0x58>
	*signaled = sig->signaled;
   239d8:	68a3      	ldr	r3, [r4, #8]
   239da:	602b      	str	r3, [r5, #0]
	*result = sig->result;
   239dc:	68e3      	ldr	r3, [r4, #12]
   239de:	6033      	str	r3, [r6, #0]
	z_impl_k_poll_signal_check(sig, signaled, result);
}
   239e0:	b006      	add	sp, #24
   239e2:	bd70      	pop	{r4, r5, r6, pc}
	Z_OOPS(Z_SYSCALL_MEMORY_WRITE(result, sizeof(int)));
   239e4:	2201      	movs	r2, #1
   239e6:	2104      	movs	r1, #4
   239e8:	4630      	mov	r0, r6
   239ea:	f003 f85b 	bl	26aa4 <arch_buffer_validate>
   239ee:	2800      	cmp	r0, #0
   239f0:	d0f2      	beq.n	239d8 <z_vrfy_k_poll_signal_check+0x70>
   239f2:	f006 fa27 	bl	29e44 <arch_is_user_context>
   239f6:	4c16      	ldr	r4, [pc, #88]	; (23a50 <z_vrfy_k_poll_signal_check+0xe8>)
   239f8:	4b16      	ldr	r3, [pc, #88]	; (23a54 <z_vrfy_k_poll_signal_check+0xec>)
   239fa:	1ae4      	subs	r4, r4, r3
   239fc:	08e4      	lsrs	r4, r4, #3
   239fe:	01a4      	lsls	r4, r4, #6
   23a00:	4b19      	ldr	r3, [pc, #100]	; (23a68 <z_vrfy_k_poll_signal_check+0x100>)
   23a02:	f044 0401 	orr.w	r4, r4, #1
   23a06:	2204      	movs	r2, #4
   23a08:	2800      	cmp	r0, #0
   23a0a:	d0e1      	beq.n	239d0 <z_vrfy_k_poll_signal_check+0x68>
   23a0c:	e9cd 2300 	strd	r2, r3, [sp]
   23a10:	4633      	mov	r3, r6
   23a12:	e016      	b.n	23a42 <z_vrfy_k_poll_signal_check+0xda>
	Z_OOPS(Z_SYSCALL_MEMORY_WRITE(signaled, sizeof(unsigned int)));
   23a14:	2201      	movs	r2, #1
   23a16:	2104      	movs	r1, #4
   23a18:	4628      	mov	r0, r5
   23a1a:	f003 f843 	bl	26aa4 <arch_buffer_validate>
   23a1e:	2800      	cmp	r0, #0
   23a20:	d0e0      	beq.n	239e4 <z_vrfy_k_poll_signal_check+0x7c>
   23a22:	f006 fa0f 	bl	29e44 <arch_is_user_context>
   23a26:	4c0a      	ldr	r4, [pc, #40]	; (23a50 <z_vrfy_k_poll_signal_check+0xe8>)
   23a28:	4b0a      	ldr	r3, [pc, #40]	; (23a54 <z_vrfy_k_poll_signal_check+0xec>)
   23a2a:	1ae4      	subs	r4, r4, r3
   23a2c:	08e4      	lsrs	r4, r4, #3
   23a2e:	01a4      	lsls	r4, r4, #6
   23a30:	4b0d      	ldr	r3, [pc, #52]	; (23a68 <z_vrfy_k_poll_signal_check+0x100>)
   23a32:	f044 0401 	orr.w	r4, r4, #1
   23a36:	2204      	movs	r2, #4
   23a38:	2800      	cmp	r0, #0
   23a3a:	d0be      	beq.n	239ba <z_vrfy_k_poll_signal_check+0x52>
   23a3c:	e9cd 2300 	strd	r2, r3, [sp]
   23a40:	462b      	mov	r3, r5
	Z_OOPS(Z_SYSCALL_MEMORY_WRITE(result, sizeof(int)));
   23a42:	4a05      	ldr	r2, [pc, #20]	; (23a58 <z_vrfy_k_poll_signal_check+0xf0>)
   23a44:	4907      	ldr	r1, [pc, #28]	; (23a64 <z_vrfy_k_poll_signal_check+0xfc>)
   23a46:	4620      	mov	r0, r4
   23a48:	f001 fa25 	bl	24e96 <log_from_user>
   23a4c:	e7a9      	b.n	239a2 <z_vrfy_k_poll_signal_check+0x3a>
   23a4e:	bf00      	nop
   23a50:	0002a810 	.word	0x0002a810
   23a54:	0002a6d0 	.word	0x0002a6d0
   23a58:	0002f4bf 	.word	0x0002f4bf
   23a5c:	0002e72d 	.word	0x0002e72d
   23a60:	200023f4 	.word	0x200023f4
   23a64:	0002c8a6 	.word	0x0002c8a6
   23a68:	0002c903 	.word	0x0002c903

00023a6c <z_mrsh_k_poll_signal_check>:
#include <syscalls/kernel.h>

extern void z_vrfy_k_poll_signal_check(struct k_poll_signal * sig, unsigned int * signaled, int * result);
uintptr_t z_mrsh_k_poll_signal_check(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   23a6c:	b538      	push	{r3, r4, r5, lr}
	_current->syscall_frame = ssf;
   23a6e:	4c06      	ldr	r4, [pc, #24]	; (23a88 <z_mrsh_k_poll_signal_check+0x1c>)
   23a70:	9d06      	ldr	r5, [sp, #24]
   23a72:	68a3      	ldr	r3, [r4, #8]
   23a74:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	z_vrfy_k_poll_signal_check(*(struct k_poll_signal **)&arg0, *(unsigned int **)&arg1, *(int **)&arg2)
   23a78:	f7ff ff76 	bl	23968 <z_vrfy_k_poll_signal_check>
;
	_current->syscall_frame = NULL;
   23a7c:	68a3      	ldr	r3, [r4, #8]
   23a7e:	2000      	movs	r0, #0
   23a80:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	return 0;
}
   23a84:	bd38      	pop	{r3, r4, r5, pc}
   23a86:	bf00      	nop
   23a88:	200023f4 	.word	0x200023f4

00023a8c <z_impl_k_poll_signal_raise>:
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   23a8c:	b538      	push	{r3, r4, r5, lr}
   23a8e:	4603      	mov	r3, r0
	__asm__ volatile(
   23a90:	f04f 0220 	mov.w	r2, #32
   23a94:	f3ef 8511 	mrs	r5, BASEPRI
   23a98:	f382 8811 	msr	BASEPRI, r2
   23a9c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   23aa0:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   23aa2:	2101      	movs	r1, #1
   23aa4:	6081      	str	r1, [r0, #8]
	return list->head == list;
   23aa6:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   23aa8:	4283      	cmp	r3, r0
   23aaa:	d106      	bne.n	23aba <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   23aac:	f385 8811 	msr	BASEPRI, r5
   23ab0:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&sig->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   23ab4:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
   23ab6:	4620      	mov	r0, r4
   23ab8:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   23aba:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   23abe:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   23ac0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   23ac2:	2300      	movs	r3, #0
	node->prev = NULL;
   23ac4:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   23ac8:	f006 fa98 	bl	29ffc <signal_poll_event>
	z_reschedule(&lock, key);
   23acc:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   23ace:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   23ad0:	4801      	ldr	r0, [pc, #4]	; (23ad8 <z_impl_k_poll_signal_raise+0x4c>)
   23ad2:	f7fd fc63 	bl	2139c <z_reschedule>
	return rc;
   23ad6:	e7ee      	b.n	23ab6 <z_impl_k_poll_signal_raise+0x2a>
   23ad8:	20002bb3 	.word	0x20002bb3

00023adc <z_mrsh_k_poll_signal_raise>:
#include <syscalls/kernel.h>

extern int z_vrfy_k_poll_signal_raise(struct k_poll_signal * sig, int result);
uintptr_t z_mrsh_k_poll_signal_raise(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   23adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_current->syscall_frame = ssf;
   23ae0:	4f19      	ldr	r7, [pc, #100]	; (23b48 <z_mrsh_k_poll_signal_raise+0x6c>)
   23ae2:	9a08      	ldr	r2, [sp, #32]
   23ae4:	68bb      	ldr	r3, [r7, #8]
{
   23ae6:	4605      	mov	r5, r0
	_current->syscall_frame = ssf;
   23ae8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
{
   23aec:	4688      	mov	r8, r1

#ifdef CONFIG_USERSPACE
static inline int z_vrfy_k_poll_signal_raise(struct k_poll_signal *sig,
					     int result)
{
	Z_OOPS(Z_SYSCALL_OBJ(sig, K_OBJ_POLL_SIGNAL));
   23aee:	f7dc fb07 	bl	100 <z_object_find>
   23af2:	2300      	movs	r3, #0
   23af4:	2206      	movs	r2, #6
   23af6:	4629      	mov	r1, r5
   23af8:	f006 f9d9 	bl	29eae <z_obj_validation_check>
   23afc:	463e      	mov	r6, r7
   23afe:	4604      	mov	r4, r0
   23b00:	b1c8      	cbz	r0, 23b36 <z_mrsh_k_poll_signal_raise+0x5a>
   23b02:	f006 f99f 	bl	29e44 <arch_is_user_context>
   23b06:	4b11      	ldr	r3, [pc, #68]	; (23b4c <z_mrsh_k_poll_signal_raise+0x70>)
   23b08:	4a11      	ldr	r2, [pc, #68]	; (23b50 <z_mrsh_k_poll_signal_raise+0x74>)
   23b0a:	1a9b      	subs	r3, r3, r2
   23b0c:	08db      	lsrs	r3, r3, #3
   23b0e:	019b      	lsls	r3, r3, #6
   23b10:	f043 0301 	orr.w	r3, r3, #1
   23b14:	b148      	cbz	r0, 23b2a <z_mrsh_k_poll_signal_raise+0x4e>
   23b16:	4a0f      	ldr	r2, [pc, #60]	; (23b54 <z_mrsh_k_poll_signal_raise+0x78>)
   23b18:	490f      	ldr	r1, [pc, #60]	; (23b58 <z_mrsh_k_poll_signal_raise+0x7c>)
   23b1a:	4618      	mov	r0, r3
   23b1c:	f001 f9bb 	bl	24e96 <log_from_user>
   23b20:	68b3      	ldr	r3, [r6, #8]
   23b22:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   23b26:	f002 ff99 	bl	26a5c <arch_syscall_oops>
   23b2a:	490a      	ldr	r1, [pc, #40]	; (23b54 <z_mrsh_k_poll_signal_raise+0x78>)
   23b2c:	480a      	ldr	r0, [pc, #40]	; (23b58 <z_mrsh_k_poll_signal_raise+0x7c>)
   23b2e:	461a      	mov	r2, r3
   23b30:	f001 f9e4 	bl	24efc <log_1>
   23b34:	e7f4      	b.n	23b20 <z_mrsh_k_poll_signal_raise+0x44>
	return z_impl_k_poll_signal_raise(sig, result);
   23b36:	4641      	mov	r1, r8
   23b38:	4628      	mov	r0, r5
   23b3a:	f7ff ffa7 	bl	23a8c <z_impl_k_poll_signal_raise>
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	int ret = z_vrfy_k_poll_signal_raise(*(struct k_poll_signal **)&arg0, *(int*)&arg1)
;
	_current->syscall_frame = NULL;
   23b3e:	68bb      	ldr	r3, [r7, #8]
   23b40:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
	return (uintptr_t) ret;
}
   23b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23b48:	200023f4 	.word	0x200023f4
   23b4c:	0002a810 	.word	0x0002a810
   23b50:	0002a6d0 	.word	0x0002a6d0
   23b54:	0002f4da 	.word	0x0002f4da
   23b58:	0002e72d 	.word	0x0002e72d

00023b5c <z_mrsh_k_poll_signal_reset>:
#include <syscalls/kernel.h>

extern void z_vrfy_k_poll_signal_reset(struct k_poll_signal * sig);
uintptr_t z_mrsh_k_poll_signal_reset(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   23b5c:	b570      	push	{r4, r5, r6, lr}
	_current->syscall_frame = ssf;
   23b5e:	4e17      	ldr	r6, [pc, #92]	; (23bbc <z_mrsh_k_poll_signal_reset+0x60>)
   23b60:	9a06      	ldr	r2, [sp, #24]
   23b62:	68b3      	ldr	r3, [r6, #8]
{
   23b64:	4604      	mov	r4, r0
	_current->syscall_frame = ssf;
   23b66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
#include <syscalls/k_poll_signal_raise_mrsh.c>

static inline void z_vrfy_k_poll_signal_reset(struct k_poll_signal *sig)
{
	Z_OOPS(Z_SYSCALL_OBJ(sig, K_OBJ_POLL_SIGNAL));
   23b6a:	f7dc fac9 	bl	100 <z_object_find>
   23b6e:	2300      	movs	r3, #0
   23b70:	2206      	movs	r2, #6
   23b72:	4621      	mov	r1, r4
   23b74:	f006 f99b 	bl	29eae <z_obj_validation_check>
   23b78:	4635      	mov	r5, r6
   23b7a:	b1c8      	cbz	r0, 23bb0 <z_mrsh_k_poll_signal_reset+0x54>
   23b7c:	f006 f962 	bl	29e44 <arch_is_user_context>
   23b80:	4b0f      	ldr	r3, [pc, #60]	; (23bc0 <z_mrsh_k_poll_signal_reset+0x64>)
   23b82:	4a10      	ldr	r2, [pc, #64]	; (23bc4 <z_mrsh_k_poll_signal_reset+0x68>)
   23b84:	1a9b      	subs	r3, r3, r2
   23b86:	08db      	lsrs	r3, r3, #3
   23b88:	019b      	lsls	r3, r3, #6
   23b8a:	f043 0301 	orr.w	r3, r3, #1
   23b8e:	b148      	cbz	r0, 23ba4 <z_mrsh_k_poll_signal_reset+0x48>
   23b90:	4a0d      	ldr	r2, [pc, #52]	; (23bc8 <z_mrsh_k_poll_signal_reset+0x6c>)
   23b92:	490e      	ldr	r1, [pc, #56]	; (23bcc <z_mrsh_k_poll_signal_reset+0x70>)
   23b94:	4618      	mov	r0, r3
   23b96:	f001 f97e 	bl	24e96 <log_from_user>
   23b9a:	68ab      	ldr	r3, [r5, #8]
   23b9c:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   23ba0:	f002 ff5c 	bl	26a5c <arch_syscall_oops>
   23ba4:	4908      	ldr	r1, [pc, #32]	; (23bc8 <z_mrsh_k_poll_signal_reset+0x6c>)
   23ba6:	4809      	ldr	r0, [pc, #36]	; (23bcc <z_mrsh_k_poll_signal_reset+0x70>)
   23ba8:	461a      	mov	r2, r3
   23baa:	f001 f9a7 	bl	24efc <log_1>
   23bae:	e7f4      	b.n	23b9a <z_mrsh_k_poll_signal_reset+0x3e>
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	z_vrfy_k_poll_signal_reset(*(struct k_poll_signal **)&arg0)
;
	_current->syscall_frame = NULL;
   23bb0:	68b2      	ldr	r2, [r6, #8]
	sig->signaled = 0U;
   23bb2:	60a0      	str	r0, [r4, #8]
   23bb4:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
	return 0;
}
   23bb8:	bd70      	pop	{r4, r5, r6, pc}
   23bba:	bf00      	nop
   23bbc:	200023f4 	.word	0x200023f4
   23bc0:	0002a810 	.word	0x0002a810
   23bc4:	0002a6d0 	.word	0x0002a6d0
   23bc8:	0002f4f5 	.word	0x0002f4f5
   23bcc:	0002e72d 	.word	0x0002e72d

00023bd0 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   23bd0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   23bd2:	4606      	mov	r6, r0
   23bd4:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   23bd6:	f005 ff68 	bl	29aaa <k_is_in_isr>
   23bda:	b988      	cbnz	r0, 23c00 <z_thread_aligned_alloc+0x30>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   23bdc:	4b0c      	ldr	r3, [pc, #48]	; (23c10 <z_thread_aligned_alloc+0x40>)
   23bde:	689b      	ldr	r3, [r3, #8]
   23be0:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
	}

	if (heap != NULL) {
   23be4:	b184      	cbz	r4, 23c08 <z_thread_aligned_alloc+0x38>
	size_t c = a + b;
   23be6:	2204      	movs	r2, #4
   23be8:	18aa      	adds	r2, r5, r2
   23bea:	d209      	bcs.n	23c00 <z_thread_aligned_alloc+0x30>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   23bec:	2000      	movs	r0, #0
   23bee:	2100      	movs	r1, #0
   23bf0:	e9cd 0100 	strd	r0, r1, [sp]
   23bf4:	f046 0104 	orr.w	r1, r6, #4
   23bf8:	4620      	mov	r0, r4
   23bfa:	f005 fbeb 	bl	293d4 <k_heap_aligned_alloc>
	if (mem == NULL) {
   23bfe:	b908      	cbnz	r0, 23c04 <z_thread_aligned_alloc+0x34>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   23c00:	2400      	movs	r4, #0
	}

	return ret;
   23c02:	e001      	b.n	23c08 <z_thread_aligned_alloc+0x38>
	*heap_ref = heap;
   23c04:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   23c06:	1d04      	adds	r4, r0, #4
}
   23c08:	4620      	mov	r0, r4
   23c0a:	b002      	add	sp, #8
   23c0c:	bd70      	pop	{r4, r5, r6, pc}
   23c0e:	bf00      	nop
   23c10:	200023f4 	.word	0x200023f4

00023c14 <z_mrsh_k_futex_wake>:
#include <syscalls/kernel.h>

extern int z_vrfy_k_futex_wake(struct k_futex * futex, bool wake_all);
uintptr_t z_mrsh_k_futex_wake(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   23c14:	b570      	push	{r4, r5, r6, lr}
	_current->syscall_frame = ssf;
   23c16:	4d20      	ldr	r5, [pc, #128]	; (23c98 <z_mrsh_k_futex_wake+0x84>)
{
   23c18:	b088      	sub	sp, #32
	_current->syscall_frame = ssf;
   23c1a:	68ab      	ldr	r3, [r5, #8]
   23c1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
{
   23c1e:	9103      	str	r1, [sp, #12]
	_current->syscall_frame = ssf;
   23c20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	(void) arg2;	/* unused */
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	int ret = z_vrfy_k_futex_wake(*(struct k_futex **)&arg0, *(bool*)&arg1)
   23c24:	b2ce      	uxtb	r6, r1
	return woken;
}

static inline int z_vrfy_k_futex_wake(struct k_futex *futex, bool wake_all)
{
	if (Z_SYSCALL_MEMORY_WRITE(futex, sizeof(struct k_futex)) != 0) {
   23c26:	2201      	movs	r2, #1
   23c28:	2104      	movs	r1, #4
{
   23c2a:	4604      	mov	r4, r0
   23c2c:	f002 ff3a 	bl	26aa4 <arch_buffer_validate>
   23c30:	b360      	cbz	r0, 23c8c <z_mrsh_k_futex_wake+0x78>
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   23c32:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   23c36:	b9e3      	cbnz	r3, 23c72 <z_mrsh_k_futex_wake+0x5e>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   23c38:	f3ef 8314 	mrs	r3, CONTROL
	return (value & CONTROL_nPRIV_Msk) ? true : false;
   23c3c:	f003 0301 	and.w	r3, r3, #1
   23c40:	4a16      	ldr	r2, [pc, #88]	; (23c9c <z_mrsh_k_futex_wake+0x88>)
   23c42:	4817      	ldr	r0, [pc, #92]	; (23ca0 <z_mrsh_k_futex_wake+0x8c>)
   23c44:	4917      	ldr	r1, [pc, #92]	; (23ca4 <z_mrsh_k_futex_wake+0x90>)
   23c46:	1a80      	subs	r0, r0, r2
   23c48:	08c0      	lsrs	r0, r0, #3
   23c4a:	0180      	lsls	r0, r0, #6
   23c4c:	f040 0001 	orr.w	r0, r0, #1
   23c50:	2204      	movs	r2, #4
   23c52:	b183      	cbz	r3, 23c76 <z_mrsh_k_futex_wake+0x62>
   23c54:	e9cd 2100 	strd	r2, r1, [sp]
   23c58:	4623      	mov	r3, r4
   23c5a:	4a13      	ldr	r2, [pc, #76]	; (23ca8 <z_mrsh_k_futex_wake+0x94>)
   23c5c:	4913      	ldr	r1, [pc, #76]	; (23cac <z_mrsh_k_futex_wake+0x98>)
   23c5e:	f001 f91a 	bl	24e96 <log_from_user>
		return -EACCES;
   23c62:	f06f 000c 	mvn.w	r0, #12
;
	_current->syscall_frame = NULL;
   23c66:	68ab      	ldr	r3, [r5, #8]
   23c68:	2200      	movs	r2, #0
   23c6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	return (uintptr_t) ret;
}
   23c6e:	b008      	add	sp, #32
   23c70:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   23c72:	2300      	movs	r3, #0
   23c74:	e7e4      	b.n	23c40 <z_mrsh_k_futex_wake+0x2c>
	if (Z_SYSCALL_MEMORY_WRITE(futex, sizeof(struct k_futex)) != 0) {
   23c76:	4b0c      	ldr	r3, [pc, #48]	; (23ca8 <z_mrsh_k_futex_wake+0x94>)
   23c78:	e9cd 2106 	strd	r2, r1, [sp, #24]
   23c7c:	e9cd 3404 	strd	r3, r4, [sp, #16]
   23c80:	a904      	add	r1, sp, #16
   23c82:	4603      	mov	r3, r0
   23c84:	4809      	ldr	r0, [pc, #36]	; (23cac <z_mrsh_k_futex_wake+0x98>)
   23c86:	f001 f982 	bl	24f8e <log_n>
   23c8a:	e7ea      	b.n	23c62 <z_mrsh_k_futex_wake+0x4e>
	}

	return z_impl_k_futex_wake(futex, wake_all);
   23c8c:	4631      	mov	r1, r6
   23c8e:	4620      	mov	r0, r4
   23c90:	f006 fa3a 	bl	2a108 <z_impl_k_futex_wake>
   23c94:	e7e7      	b.n	23c66 <z_mrsh_k_futex_wake+0x52>
   23c96:	bf00      	nop
   23c98:	200023f4 	.word	0x200023f4
   23c9c:	0002a6d0 	.word	0x0002a6d0
   23ca0:	0002a810 	.word	0x0002a810
   23ca4:	0002c903 	.word	0x0002c903
   23ca8:	0002f510 	.word	0x0002f510
   23cac:	0002c8a6 	.word	0x0002c8a6

00023cb0 <z_mrsh_k_futex_wait>:
#include <syscalls/kernel.h>

extern int z_vrfy_k_futex_wait(struct k_futex * futex, int expected, k_timeout_t timeout);
uintptr_t z_mrsh_k_futex_wait(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   23cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_current->syscall_frame = ssf;
   23cb4:	4d21      	ldr	r5, [pc, #132]	; (23d3c <z_mrsh_k_futex_wait+0x8c>)
{
   23cb6:	b086      	sub	sp, #24
   23cb8:	461f      	mov	r7, r3
	_current->syscall_frame = ssf;
   23cba:	68ab      	ldr	r3, [r5, #8]
{
   23cbc:	4690      	mov	r8, r2
	_current->syscall_frame = ssf;
   23cbe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   23cc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
{
   23cc4:	460e      	mov	r6, r1
}

static inline int z_vrfy_k_futex_wait(struct k_futex *futex, int expected,
				      k_timeout_t timeout)
{
	if (Z_SYSCALL_MEMORY_WRITE(futex, sizeof(struct k_futex)) != 0) {
   23cc6:	2201      	movs	r2, #1
   23cc8:	2104      	movs	r1, #4
   23cca:	4604      	mov	r4, r0
   23ccc:	f002 feea 	bl	26aa4 <arch_buffer_validate>
   23cd0:	b368      	cbz	r0, 23d2e <z_mrsh_k_futex_wait+0x7e>
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   23cd2:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   23cd6:	b9eb      	cbnz	r3, 23d14 <z_mrsh_k_futex_wait+0x64>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   23cd8:	f3ef 8314 	mrs	r3, CONTROL
	return (value & CONTROL_nPRIV_Msk) ? true : false;
   23cdc:	f003 0301 	and.w	r3, r3, #1
   23ce0:	4a17      	ldr	r2, [pc, #92]	; (23d40 <z_mrsh_k_futex_wait+0x90>)
   23ce2:	4818      	ldr	r0, [pc, #96]	; (23d44 <z_mrsh_k_futex_wait+0x94>)
   23ce4:	4918      	ldr	r1, [pc, #96]	; (23d48 <z_mrsh_k_futex_wait+0x98>)
   23ce6:	1a80      	subs	r0, r0, r2
   23ce8:	08c0      	lsrs	r0, r0, #3
   23cea:	0180      	lsls	r0, r0, #6
   23cec:	f040 0001 	orr.w	r0, r0, #1
   23cf0:	2204      	movs	r2, #4
   23cf2:	b18b      	cbz	r3, 23d18 <z_mrsh_k_futex_wait+0x68>
   23cf4:	e9cd 2100 	strd	r2, r1, [sp]
   23cf8:	4623      	mov	r3, r4
   23cfa:	4a14      	ldr	r2, [pc, #80]	; (23d4c <z_mrsh_k_futex_wait+0x9c>)
   23cfc:	4914      	ldr	r1, [pc, #80]	; (23d50 <z_mrsh_k_futex_wait+0xa0>)
   23cfe:	f001 f8ca 	bl	24e96 <log_from_user>
		return -EACCES;
   23d02:	f06f 000c 	mvn.w	r0, #12
	union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0;
	parm0.split.lo = arg2;
	parm0.split.hi = arg3;
	int ret = z_vrfy_k_futex_wait(*(struct k_futex **)&arg0, *(int*)&arg1, parm0.val)
;
	_current->syscall_frame = NULL;
   23d06:	68ab      	ldr	r3, [r5, #8]
   23d08:	2200      	movs	r2, #0
   23d0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	return (uintptr_t) ret;
}
   23d0e:	b006      	add	sp, #24
   23d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   23d14:	2300      	movs	r3, #0
   23d16:	e7e3      	b.n	23ce0 <z_mrsh_k_futex_wait+0x30>
	if (Z_SYSCALL_MEMORY_WRITE(futex, sizeof(struct k_futex)) != 0) {
   23d18:	4b0c      	ldr	r3, [pc, #48]	; (23d4c <z_mrsh_k_futex_wait+0x9c>)
   23d1a:	e9cd 2104 	strd	r2, r1, [sp, #16]
   23d1e:	e9cd 3402 	strd	r3, r4, [sp, #8]
   23d22:	a902      	add	r1, sp, #8
   23d24:	4603      	mov	r3, r0
   23d26:	480a      	ldr	r0, [pc, #40]	; (23d50 <z_mrsh_k_futex_wait+0xa0>)
   23d28:	f001 f931 	bl	24f8e <log_n>
   23d2c:	e7e9      	b.n	23d02 <z_mrsh_k_futex_wait+0x52>
	}

	return z_impl_k_futex_wait(futex, expected, timeout);
   23d2e:	4642      	mov	r2, r8
   23d30:	463b      	mov	r3, r7
   23d32:	4631      	mov	r1, r6
   23d34:	4620      	mov	r0, r4
   23d36:	f006 fa13 	bl	2a160 <z_impl_k_futex_wait>
   23d3a:	e7e4      	b.n	23d06 <z_mrsh_k_futex_wait+0x56>
   23d3c:	200023f4 	.word	0x200023f4
   23d40:	0002a6d0 	.word	0x0002a6d0
   23d44:	0002a810 	.word	0x0002a810
   23d48:	0002c903 	.word	0x0002c903
   23d4c:	0002f524 	.word	0x0002f524
   23d50:	0002c8a6 	.word	0x0002c8a6

00023d54 <k_mem_domain_add_partition>:
	k_spin_unlock(&z_mem_domain_lock, key);
}

void k_mem_domain_add_partition(struct k_mem_domain *domain,
				struct k_mem_partition *part)
{
   23d54:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
   23d56:	f04f 0320 	mov.w	r3, #32
   23d5a:	f3ef 8411 	mrs	r4, BASEPRI
   23d5e:	f383 8811 	msr	BASEPRI, r3
   23d62:	f3bf 8f6f 	isb	sy
	__ASSERT(check_add_partition(domain, part),
		 "invalid partition %p", part);

	key = k_spin_lock(&z_mem_domain_lock);

	for (p_idx = 0; p_idx < max_partitions; p_idx++) {
   23d66:	4b10      	ldr	r3, [pc, #64]	; (23da8 <k_mem_domain_add_partition+0x54>)
		/* A zero-sized partition denotes it's a free partition */
		if (domain->partitions[p_idx].size == 0U) {
   23d68:	1d05      	adds	r5, r0, #4
	for (p_idx = 0; p_idx < max_partitions; p_idx++) {
   23d6a:	781a      	ldrb	r2, [r3, #0]
		if (domain->partitions[p_idx].size == 0U) {
   23d6c:	260c      	movs	r6, #12
	for (p_idx = 0; p_idx < max_partitions; p_idx++) {
   23d6e:	2300      	movs	r3, #0
   23d70:	429a      	cmp	r2, r3
   23d72:	dd03      	ble.n	23d7c <k_mem_domain_add_partition+0x28>
		if (domain->partitions[p_idx].size == 0U) {
   23d74:	fb06 f703 	mul.w	r7, r6, r3
   23d78:	59ef      	ldr	r7, [r5, r7]
   23d7a:	b997      	cbnz	r7, 23da2 <k_mem_domain_add_partition+0x4e>
		 "no free partition slots available");

	LOG_DBG("add partition base %lx size %zu to domain %p\n",
		part->start, part->size, domain);

	domain->partitions[p_idx].start = part->start;
   23d7c:	220c      	movs	r2, #12
   23d7e:	4353      	muls	r3, r2
   23d80:	680d      	ldr	r5, [r1, #0]
   23d82:	50c5      	str	r5, [r0, r3]
	domain->partitions[p_idx].size = part->size;
   23d84:	18c2      	adds	r2, r0, r3
   23d86:	684b      	ldr	r3, [r1, #4]
   23d88:	6053      	str	r3, [r2, #4]
	domain->partitions[p_idx].attr = part->attr;
   23d8a:	688b      	ldr	r3, [r1, #8]
   23d8c:	6093      	str	r3, [r2, #8]

	domain->num_partitions++;
   23d8e:	f890 30c8 	ldrb.w	r3, [r0, #200]	; 0xc8
   23d92:	3301      	adds	r3, #1
   23d94:	f880 30c8 	strb.w	r3, [r0, #200]	; 0xc8
	__asm__ volatile(
   23d98:	f384 8811 	msr	BASEPRI, r4
   23d9c:	f3bf 8f6f 	isb	sy

#ifdef CONFIG_ARCH_MEM_DOMAIN_SYNCHRONOUS_API
	arch_mem_domain_partition_add(domain, p_idx);
#endif
	k_spin_unlock(&z_mem_domain_lock, key);
}
   23da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (p_idx = 0; p_idx < max_partitions; p_idx++) {
   23da2:	3301      	adds	r3, #1
   23da4:	e7e4      	b.n	23d70 <k_mem_domain_add_partition+0x1c>
   23da6:	bf00      	nop
   23da8:	20002bb3 	.word	0x20002bb3

00023dac <init_mem_domain_module>:
	}
	k_spin_unlock(&z_mem_domain_lock, key);
}

static int init_mem_domain_module(const struct device *arg)
{
   23dac:	b510      	push	{r4, lr}
	ARG_UNUSED(arg);

	max_partitions = arch_mem_domain_max_partitions_get();
   23dae:	f002 fe74 	bl	26a9a <arch_mem_domain_max_partitions_get>
	 * CONFIG_MAX_DOMAIN_PARTITIONS, or would encounter array index
	 * out of bounds error.
	 */
	__ASSERT(max_partitions <= CONFIG_MAX_DOMAIN_PARTITIONS, "");

	k_mem_domain_init(&k_mem_domain_default, 0, NULL);
   23db2:	4c07      	ldr	r4, [pc, #28]	; (23dd0 <init_mem_domain_module+0x24>)
	max_partitions = arch_mem_domain_max_partitions_get();
   23db4:	4b07      	ldr	r3, [pc, #28]	; (23dd4 <init_mem_domain_module+0x28>)
	k_mem_domain_init(&k_mem_domain_default, 0, NULL);
   23db6:	2200      	movs	r2, #0
	max_partitions = arch_mem_domain_max_partitions_get();
   23db8:	7018      	strb	r0, [r3, #0]
	k_mem_domain_init(&k_mem_domain_default, 0, NULL);
   23dba:	4611      	mov	r1, r2
   23dbc:	4620      	mov	r0, r4
   23dbe:	f006 fa02 	bl	2a1c6 <k_mem_domain_init>
#ifdef Z_LIBC_PARTITION_EXISTS
	k_mem_domain_add_partition(&k_mem_domain_default, &z_libc_partition);
   23dc2:	4620      	mov	r0, r4
   23dc4:	4904      	ldr	r1, [pc, #16]	; (23dd8 <init_mem_domain_module+0x2c>)
   23dc6:	f7ff ffc5 	bl	23d54 <k_mem_domain_add_partition>
#endif /* Z_LIBC_PARTITION_EXISTS */

	return 0;
}
   23dca:	2000      	movs	r0, #0
   23dcc:	bd10      	pop	{r4, pc}
   23dce:	bf00      	nop
   23dd0:	2000243c 	.word	0x2000243c
   23dd4:	20002bb3 	.word	0x20002bb3
   23dd8:	20007c44 	.word	0x20007c44

00023ddc <z_mem_domain_init_thread>:
{
   23ddc:	b530      	push	{r4, r5, lr}
	__asm__ volatile(
   23dde:	f04f 0320 	mov.w	r3, #32
   23de2:	f3ef 8411 	mrs	r4, BASEPRI
   23de6:	f383 8811 	msr	BASEPRI, r3
   23dea:	f3bf 8f6f 	isb	sy
	add_thread_locked(_current->mem_domain_info.mem_domain, thread);
   23dee:	4b0a      	ldr	r3, [pc, #40]	; (23e18 <z_mem_domain_init_thread+0x3c>)
   23df0:	689b      	ldr	r3, [r3, #8]
   23df2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
	sys_dnode_t *const tail = list->tail;
   23df4:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
	sys_dlist_append(&domain->mem_domain_q,
   23df8:	f100 0274 	add.w	r2, r0, #116	; 0x74
   23dfc:	f103 05c0 	add.w	r5, r3, #192	; 0xc0
	node->prev = tail;
   23e00:	e9c0 511d 	strd	r5, r1, [r0, #116]	; 0x74
	tail->next = node;
   23e04:	600a      	str	r2, [r1, #0]
	list->tail = node;
   23e06:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	thread->mem_domain_info.mem_domain = domain;
   23e0a:	67c3      	str	r3, [r0, #124]	; 0x7c
	__asm__ volatile(
   23e0c:	f384 8811 	msr	BASEPRI, r4
   23e10:	f3bf 8f6f 	isb	sy
}
   23e14:	bd30      	pop	{r4, r5, pc}
   23e16:	bf00      	nop
   23e18:	200023f4 	.word	0x200023f4

00023e1c <z_mrsh_adc_channel_setup>:
}

static uintptr_t handler_no_syscall(uintptr_t arg1, uintptr_t arg2,
				    uintptr_t arg3, uintptr_t arg4,
				    uintptr_t arg5, uintptr_t arg6, void *ssf)
{
   23e1c:	b508      	push	{r3, lr}
   23e1e:	f006 fa17 	bl	2a250 <arch_is_user_context>
   23e22:	4b0a      	ldr	r3, [pc, #40]	; (23e4c <z_mrsh_adc_channel_setup+0x30>)
   23e24:	4a0a      	ldr	r2, [pc, #40]	; (23e50 <z_mrsh_adc_channel_setup+0x34>)
   23e26:	1a9b      	subs	r3, r3, r2
   23e28:	08db      	lsrs	r3, r3, #3
	LOG_ERR("Unimplemented system call");
   23e2a:	019b      	lsls	r3, r3, #6
   23e2c:	f043 0301 	orr.w	r3, r3, #1
   23e30:	b130      	cbz	r0, 23e40 <z_mrsh_adc_channel_setup+0x24>
   23e32:	4908      	ldr	r1, [pc, #32]	; (23e54 <z_mrsh_adc_channel_setup+0x38>)
   23e34:	4618      	mov	r0, r3
   23e36:	f001 f82e 	bl	24e96 <log_from_user>
	arch_syscall_oops(ssf);
   23e3a:	9804      	ldr	r0, [sp, #16]
   23e3c:	f002 fe0e 	bl	26a5c <arch_syscall_oops>
	LOG_ERR("Unimplemented system call");
   23e40:	4804      	ldr	r0, [pc, #16]	; (23e54 <z_mrsh_adc_channel_setup+0x38>)
   23e42:	4619      	mov	r1, r3
   23e44:	f001 f84d 	bl	24ee2 <log_0>
   23e48:	e7f7      	b.n	23e3a <z_mrsh_adc_channel_setup+0x1e>
   23e4a:	bf00      	nop
   23e4c:	0002a810 	.word	0x0002a810
   23e50:	0002a6d0 	.word	0x0002a6d0
   23e54:	0002f538 	.word	0x0002f538

00023e58 <handler_bad_syscall>:
{
   23e58:	b508      	push	{r3, lr}
   23e5a:	4601      	mov	r1, r0
   23e5c:	f006 f9f8 	bl	2a250 <arch_is_user_context>
   23e60:	4b0a      	ldr	r3, [pc, #40]	; (23e8c <handler_bad_syscall+0x34>)
   23e62:	4a0b      	ldr	r2, [pc, #44]	; (23e90 <handler_bad_syscall+0x38>)
   23e64:	1a9b      	subs	r3, r3, r2
   23e66:	08db      	lsrs	r3, r3, #3
	LOG_ERR("Bad system call id %" PRIuPTR " invoked", bad_id);
   23e68:	019b      	lsls	r3, r3, #6
   23e6a:	f043 0301 	orr.w	r3, r3, #1
   23e6e:	b138      	cbz	r0, 23e80 <handler_bad_syscall+0x28>
   23e70:	460a      	mov	r2, r1
   23e72:	4618      	mov	r0, r3
   23e74:	4907      	ldr	r1, [pc, #28]	; (23e94 <handler_bad_syscall+0x3c>)
   23e76:	f001 f80e 	bl	24e96 <log_from_user>
	arch_syscall_oops(ssf);
   23e7a:	9804      	ldr	r0, [sp, #16]
   23e7c:	f002 fdee 	bl	26a5c <arch_syscall_oops>
	LOG_ERR("Bad system call id %" PRIuPTR " invoked", bad_id);
   23e80:	4804      	ldr	r0, [pc, #16]	; (23e94 <handler_bad_syscall+0x3c>)
   23e82:	461a      	mov	r2, r3
   23e84:	f001 f83a 	bl	24efc <log_1>
   23e88:	e7f7      	b.n	23e7a <handler_bad_syscall+0x22>
   23e8a:	bf00      	nop
   23e8c:	0002a810 	.word	0x0002a810
   23e90:	0002a6d0 	.word	0x0002a6d0
   23e94:	0002f552 	.word	0x0002f552

00023e98 <app_shmem_bss_zero>:
{
   23e98:	b538      	push	{r3, r4, r5, lr}
	region = (struct z_app_region *)&__app_shmem_regions_start;
   23e9a:	4c06      	ldr	r4, [pc, #24]	; (23eb4 <app_shmem_bss_zero+0x1c>)
	for ( ; region < end; region++) {
   23e9c:	4d06      	ldr	r5, [pc, #24]	; (23eb8 <app_shmem_bss_zero+0x20>)
   23e9e:	42ac      	cmp	r4, r5
   23ea0:	d301      	bcc.n	23ea6 <app_shmem_bss_zero+0xe>
}
   23ea2:	2000      	movs	r0, #0
   23ea4:	bd38      	pop	{r3, r4, r5, pc}
__ssp_bos_icheck3(memset, void *, int)
   23ea6:	6862      	ldr	r2, [r4, #4]
   23ea8:	6820      	ldr	r0, [r4, #0]
   23eaa:	2100      	movs	r1, #0
   23eac:	f006 faa6 	bl	2a3fc <memset>
	for ( ; region < end; region++) {
   23eb0:	3408      	adds	r4, #8
   23eb2:	e7f4      	b.n	23e9e <app_shmem_bss_zero+0x6>
   23eb4:	0002a684 	.word	0x0002a684
   23eb8:	0002a68c 	.word	0x0002a68c

00023ebc <z_thread_perms_inherit>:
{
   23ebc:	b530      	push	{r4, r5, lr}
   23ebe:	b085      	sub	sp, #20
   23ec0:	460d      	mov	r5, r1
   23ec2:	4604      	mov	r4, r0
		thread_index_get(parent),
   23ec4:	f006 fa07 	bl	2a2d6 <thread_index_get>
	struct perm_ctx ctx = {
   23ec8:	9001      	str	r0, [sp, #4]
		thread_index_get(child),
   23eca:	4628      	mov	r0, r5
   23ecc:	f006 fa03 	bl	2a2d6 <thread_index_get>
	if ((ctx.parent_id != -1) && (ctx.child_id != -1)) {
   23ed0:	9b01      	ldr	r3, [sp, #4]
   23ed2:	3301      	adds	r3, #1
	struct perm_ctx ctx = {
   23ed4:	e9cd 0402 	strd	r0, r4, [sp, #8]
	if ((ctx.parent_id != -1) && (ctx.child_id != -1)) {
   23ed8:	d005      	beq.n	23ee6 <z_thread_perms_inherit+0x2a>
   23eda:	3001      	adds	r0, #1
   23edc:	d003      	beq.n	23ee6 <z_thread_perms_inherit+0x2a>
		z_object_wordlist_foreach(wordlist_cb, &ctx);
   23ede:	4803      	ldr	r0, [pc, #12]	; (23eec <z_thread_perms_inherit+0x30>)
   23ee0:	a901      	add	r1, sp, #4
   23ee2:	f7dc f927 	bl	134 <z_object_gperf_wordlist_foreach>
}
   23ee6:	b005      	add	sp, #20
   23ee8:	bd30      	pop	{r4, r5, pc}
   23eea:	bf00      	nop
   23eec:	0002a29b 	.word	0x0002a29b

00023ef0 <z_thread_perms_all_clear>:
{
   23ef0:	b508      	push	{r3, lr}
	uintptr_t index = thread_index_get(thread);
   23ef2:	f006 f9f0 	bl	2a2d6 <thread_index_get>
	if ((int)index != -1) {
   23ef6:	1c43      	adds	r3, r0, #1
	uintptr_t index = thread_index_get(thread);
   23ef8:	4601      	mov	r1, r0
	if ((int)index != -1) {
   23efa:	d004      	beq.n	23f06 <z_thread_perms_all_clear+0x16>
}
   23efc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_object_wordlist_foreach(clear_perms_cb, (void *)index);
   23f00:	4801      	ldr	r0, [pc, #4]	; (23f08 <z_thread_perms_all_clear+0x18>)
   23f02:	f7dc b917 	b.w	134 <z_object_gperf_wordlist_foreach>
}
   23f06:	bd08      	pop	{r3, pc}
   23f08:	0002a2d3 	.word	0x0002a2d3

00023f0c <z_dump_object_error>:
{
   23f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (retval) {
   23f10:	f110 0f09 	cmn.w	r0, #9
{
   23f14:	4615      	mov	r5, r2
   23f16:	b086      	sub	sp, #24
   23f18:	461a      	mov	r2, r3
	switch (retval) {
   23f1a:	d03f      	beq.n	23f9c <z_dump_object_error+0x90>
   23f1c:	f110 0f08 	cmn.w	r0, #8
   23f20:	da09      	bge.n	23f36 <z_dump_object_error+0x2a>
   23f22:	f110 0f70 	cmn.w	r0, #112	; 0x70
   23f26:	f000 80b0 	beq.w	2408a <z_dump_object_error+0x17e>
   23f2a:	3016      	adds	r0, #22
   23f2c:	f000 809c 	beq.w	24068 <z_dump_object_error+0x15c>
}
   23f30:	b006      	add	sp, #24
   23f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (retval) {
   23f36:	3001      	adds	r0, #1
   23f38:	d1fa      	bne.n	23f30 <z_dump_object_error+0x24>
	int index = thread_index_get(_current);
   23f3a:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 240f8 <z_dump_object_error+0x1ec>
   23f3e:	4c63      	ldr	r4, [pc, #396]	; (240cc <z_dump_object_error+0x1c0>)
   23f40:	f8d8 0008 	ldr.w	r0, [r8, #8]
   23f44:	f006 f9c7 	bl	2a2d6 <thread_index_get>
   23f48:	4607      	mov	r7, r0
   23f4a:	f006 f981 	bl	2a250 <arch_is_user_context>
   23f4e:	4b60      	ldr	r3, [pc, #384]	; (240d0 <z_dump_object_error+0x1c4>)
   23f50:	79a9      	ldrb	r1, [r5, #6]
   23f52:	682e      	ldr	r6, [r5, #0]
   23f54:	1ae4      	subs	r4, r4, r3
   23f56:	08e4      	lsrs	r4, r4, #3
	LOG_ERR("thread %p (%d) does not have permission on %s %p",
   23f58:	01a4      	lsls	r4, r4, #6
   23f5a:	f044 0c01 	orr.w	ip, r4, #1
   23f5e:	2800      	cmp	r0, #0
   23f60:	d069      	beq.n	24036 <z_dump_object_error+0x12a>
   23f62:	292e      	cmp	r1, #46	; 0x2e
   23f64:	bf96      	itet	ls
   23f66:	4b5b      	ldrls	r3, [pc, #364]	; (240d4 <z_dump_object_error+0x1c8>)
   23f68:	495b      	ldrhi	r1, [pc, #364]	; (240d8 <z_dump_object_error+0x1cc>)
   23f6a:	f853 1021 	ldrls.w	r1, [r3, r1, lsl #2]
   23f6e:	f8d8 2008 	ldr.w	r2, [r8, #8]
   23f72:	e9cd 1600 	strd	r1, r6, [sp]
   23f76:	463b      	mov	r3, r7
   23f78:	4958      	ldr	r1, [pc, #352]	; (240dc <z_dump_object_error+0x1d0>)
   23f7a:	4660      	mov	r0, ip
   23f7c:	f000 ff8b 	bl	24e96 <log_from_user>
   23f80:	f006 f966 	bl	2a250 <arch_is_user_context>
	LOG_HEXDUMP_ERR(ko->perms, sizeof(ko->perms), "permission bitmap");
   23f84:	f044 0401 	orr.w	r4, r4, #1
   23f88:	1d29      	adds	r1, r5, #4
   23f8a:	2800      	cmp	r0, #0
   23f8c:	d066      	beq.n	2405c <z_dump_object_error+0x150>
   23f8e:	460a      	mov	r2, r1
   23f90:	2302      	movs	r3, #2
   23f92:	4953      	ldr	r1, [pc, #332]	; (240e0 <z_dump_object_error+0x1d4>)
   23f94:	4620      	mov	r0, r4
   23f96:	f001 f839 	bl	2500c <log_hexdump_from_user>
   23f9a:	e7c9      	b.n	23f30 <z_dump_object_error+0x24>
   23f9c:	f006 f958 	bl	2a250 <arch_is_user_context>
   23fa0:	4c4a      	ldr	r4, [pc, #296]	; (240cc <z_dump_object_error+0x1c0>)
   23fa2:	4b4b      	ldr	r3, [pc, #300]	; (240d0 <z_dump_object_error+0x1c4>)
   23fa4:	1ae4      	subs	r4, r4, r3
   23fa6:	08e4      	lsrs	r4, r4, #3
		LOG_ERR("%p is not a valid %s", obj, otype_to_str(otype));
   23fa8:	01a4      	lsls	r4, r4, #6
   23faa:	f044 0601 	orr.w	r6, r4, #1
   23fae:	b1a8      	cbz	r0, 23fdc <z_dump_object_error+0xd0>
	switch (otype) {
   23fb0:	2a2e      	cmp	r2, #46	; 0x2e
   23fb2:	bf96      	itet	ls
   23fb4:	4b47      	ldrls	r3, [pc, #284]	; (240d4 <z_dump_object_error+0x1c8>)
		LOG_ERR("%p is not a valid %s", obj, otype_to_str(otype));
   23fb6:	4b48      	ldrhi	r3, [pc, #288]	; (240d8 <z_dump_object_error+0x1cc>)
   23fb8:	f853 3022 	ldrls.w	r3, [r3, r2, lsl #2]
   23fbc:	4630      	mov	r0, r6
   23fbe:	460a      	mov	r2, r1
   23fc0:	4948      	ldr	r1, [pc, #288]	; (240e4 <z_dump_object_error+0x1d8>)
   23fc2:	f000 ff68 	bl	24e96 <log_from_user>
		if (ko == NULL) {
   23fc6:	b9cd      	cbnz	r5, 23ffc <z_dump_object_error+0xf0>
   23fc8:	f006 f942 	bl	2a250 <arch_is_user_context>
			LOG_ERR("address is not a known kernel object");
   23fcc:	f044 0401 	orr.w	r4, r4, #1
   23fd0:	b178      	cbz	r0, 23ff2 <z_dump_object_error+0xe6>
   23fd2:	4945      	ldr	r1, [pc, #276]	; (240e8 <z_dump_object_error+0x1dc>)
   23fd4:	4620      	mov	r0, r4
   23fd6:	f000 ff5e 	bl	24e96 <log_from_user>
   23fda:	e7a9      	b.n	23f30 <z_dump_object_error+0x24>
	switch (otype) {
   23fdc:	2a2e      	cmp	r2, #46	; 0x2e
   23fde:	bf96      	itet	ls
   23fe0:	4b3c      	ldrls	r3, [pc, #240]	; (240d4 <z_dump_object_error+0x1c8>)
		LOG_ERR("%p is not a valid %s", obj, otype_to_str(otype));
   23fe2:	4a3d      	ldrhi	r2, [pc, #244]	; (240d8 <z_dump_object_error+0x1cc>)
   23fe4:	f853 2022 	ldrls.w	r2, [r3, r2, lsl #2]
   23fe8:	483e      	ldr	r0, [pc, #248]	; (240e4 <z_dump_object_error+0x1d8>)
   23fea:	4633      	mov	r3, r6
   23fec:	f000 ff9a 	bl	24f24 <log_2>
   23ff0:	e7e9      	b.n	23fc6 <z_dump_object_error+0xba>
			LOG_ERR("address is not a known kernel object");
   23ff2:	483d      	ldr	r0, [pc, #244]	; (240e8 <z_dump_object_error+0x1dc>)
   23ff4:	4621      	mov	r1, r4
   23ff6:	f000 ff74 	bl	24ee2 <log_0>
   23ffa:	e799      	b.n	23f30 <z_dump_object_error+0x24>
   23ffc:	f006 f928 	bl	2a250 <arch_is_user_context>
			LOG_ERR("address is actually a %s",
   24000:	f044 0401 	orr.w	r4, r4, #1
   24004:	79ab      	ldrb	r3, [r5, #6]
   24006:	b150      	cbz	r0, 2401e <z_dump_object_error+0x112>
	switch (otype) {
   24008:	2b2e      	cmp	r3, #46	; 0x2e
   2400a:	bf96      	itet	ls
   2400c:	4a31      	ldrls	r2, [pc, #196]	; (240d4 <z_dump_object_error+0x1c8>)
			LOG_ERR("address is actually a %s",
   2400e:	4a32      	ldrhi	r2, [pc, #200]	; (240d8 <z_dump_object_error+0x1cc>)
   24010:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   24014:	4935      	ldr	r1, [pc, #212]	; (240ec <z_dump_object_error+0x1e0>)
   24016:	4620      	mov	r0, r4
		LOG_ERR("%p used before initialization", obj);
   24018:	f000 ff3d 	bl	24e96 <log_from_user>
   2401c:	e788      	b.n	23f30 <z_dump_object_error+0x24>
	switch (otype) {
   2401e:	2b2e      	cmp	r3, #46	; 0x2e
   24020:	bf94      	ite	ls
   24022:	4a2c      	ldrls	r2, [pc, #176]	; (240d4 <z_dump_object_error+0x1c8>)
			LOG_ERR("address is actually a %s",
   24024:	492c      	ldrhi	r1, [pc, #176]	; (240d8 <z_dump_object_error+0x1cc>)
   24026:	4831      	ldr	r0, [pc, #196]	; (240ec <z_dump_object_error+0x1e0>)
   24028:	bf98      	it	ls
   2402a:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
   2402e:	4622      	mov	r2, r4
		LOG_ERR("%p used before initialization", obj);
   24030:	f000 ff64 	bl	24efc <log_1>
   24034:	e77c      	b.n	23f30 <z_dump_object_error+0x24>
	LOG_ERR("thread %p (%d) does not have permission on %s %p",
   24036:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2403a:	4828      	ldr	r0, [pc, #160]	; (240dc <z_dump_object_error+0x1d0>)
   2403c:	292e      	cmp	r1, #46	; 0x2e
   2403e:	e9cd 3702 	strd	r3, r7, [sp, #8]
	switch (otype) {
   24042:	bf96      	itet	ls
   24044:	4b23      	ldrls	r3, [pc, #140]	; (240d4 <z_dump_object_error+0x1c8>)
	LOG_ERR("thread %p (%d) does not have permission on %s %p",
   24046:	4b24      	ldrhi	r3, [pc, #144]	; (240d8 <z_dump_object_error+0x1cc>)
   24048:	f853 3021 	ldrls.w	r3, [r3, r1, lsl #2]
   2404c:	2204      	movs	r2, #4
   2404e:	e9cd 3604 	strd	r3, r6, [sp, #16]
   24052:	a902      	add	r1, sp, #8
   24054:	4663      	mov	r3, ip
   24056:	f000 ff9a 	bl	24f8e <log_n>
   2405a:	e791      	b.n	23f80 <z_dump_object_error+0x74>
	LOG_HEXDUMP_ERR(ko->perms, sizeof(ko->perms), "permission bitmap");
   2405c:	4820      	ldr	r0, [pc, #128]	; (240e0 <z_dump_object_error+0x1d4>)
   2405e:	4623      	mov	r3, r4
   24060:	2202      	movs	r2, #2
   24062:	f000 ff9f 	bl	24fa4 <log_hexdump>
}
   24066:	e763      	b.n	23f30 <z_dump_object_error+0x24>
   24068:	f006 f8f2 	bl	2a250 <arch_is_user_context>
   2406c:	4b17      	ldr	r3, [pc, #92]	; (240cc <z_dump_object_error+0x1c0>)
   2406e:	4a18      	ldr	r2, [pc, #96]	; (240d0 <z_dump_object_error+0x1c4>)
   24070:	1a9b      	subs	r3, r3, r2
   24072:	08db      	lsrs	r3, r3, #3
		LOG_ERR("%p used before initialization", obj);
   24074:	019b      	lsls	r3, r3, #6
   24076:	f043 0301 	orr.w	r3, r3, #1
   2407a:	b118      	cbz	r0, 24084 <z_dump_object_error+0x178>
   2407c:	460a      	mov	r2, r1
   2407e:	4618      	mov	r0, r3
   24080:	491b      	ldr	r1, [pc, #108]	; (240f0 <z_dump_object_error+0x1e4>)
   24082:	e7c9      	b.n	24018 <z_dump_object_error+0x10c>
   24084:	481a      	ldr	r0, [pc, #104]	; (240f0 <z_dump_object_error+0x1e4>)
   24086:	461a      	mov	r2, r3
   24088:	e7d2      	b.n	24030 <z_dump_object_error+0x124>
   2408a:	f006 f8e1 	bl	2a250 <arch_is_user_context>
   2408e:	4c0f      	ldr	r4, [pc, #60]	; (240cc <z_dump_object_error+0x1c0>)
   24090:	4b0f      	ldr	r3, [pc, #60]	; (240d0 <z_dump_object_error+0x1c4>)
   24092:	1ae4      	subs	r4, r4, r3
   24094:	08e4      	lsrs	r4, r4, #3
		LOG_ERR("%p %s in use", obj, otype_to_str(otype));
   24096:	01a4      	lsls	r4, r4, #6
   24098:	f044 0401 	orr.w	r4, r4, #1
   2409c:	b158      	cbz	r0, 240b6 <z_dump_object_error+0x1aa>
	switch (otype) {
   2409e:	2a2e      	cmp	r2, #46	; 0x2e
   240a0:	bf96      	itet	ls
   240a2:	4b0c      	ldrls	r3, [pc, #48]	; (240d4 <z_dump_object_error+0x1c8>)
		LOG_ERR("%p %s in use", obj, otype_to_str(otype));
   240a4:	4b0c      	ldrhi	r3, [pc, #48]	; (240d8 <z_dump_object_error+0x1cc>)
   240a6:	f853 3022 	ldrls.w	r3, [r3, r2, lsl #2]
   240aa:	4620      	mov	r0, r4
   240ac:	460a      	mov	r2, r1
   240ae:	4911      	ldr	r1, [pc, #68]	; (240f4 <z_dump_object_error+0x1e8>)
   240b0:	f000 fef1 	bl	24e96 <log_from_user>
   240b4:	e73c      	b.n	23f30 <z_dump_object_error+0x24>
	switch (otype) {
   240b6:	2a2e      	cmp	r2, #46	; 0x2e
   240b8:	bf96      	itet	ls
   240ba:	4b06      	ldrls	r3, [pc, #24]	; (240d4 <z_dump_object_error+0x1c8>)
		LOG_ERR("%p %s in use", obj, otype_to_str(otype));
   240bc:	4a06      	ldrhi	r2, [pc, #24]	; (240d8 <z_dump_object_error+0x1cc>)
   240be:	f853 2022 	ldrls.w	r2, [r3, r2, lsl #2]
   240c2:	480c      	ldr	r0, [pc, #48]	; (240f4 <z_dump_object_error+0x1e8>)
   240c4:	4623      	mov	r3, r4
   240c6:	f000 ff2d 	bl	24f24 <log_2>
}
   240ca:	e731      	b.n	23f30 <z_dump_object_error+0x24>
   240cc:	0002a810 	.word	0x0002a810
   240d0:	0002a6d0 	.word	0x0002a6d0
   240d4:	0002c118 	.word	0x0002c118
   240d8:	0002f571 	.word	0x0002f571
   240dc:	0002f5c6 	.word	0x0002f5c6
   240e0:	0002f5f7 	.word	0x0002f5f7
   240e4:	0002f573 	.word	0x0002f573
   240e8:	0002f588 	.word	0x0002f588
   240ec:	0002f5ad 	.word	0x0002f5ad
   240f0:	0002f609 	.word	0x0002f609
   240f4:	0002f627 	.word	0x0002f627
   240f8:	200023f4 	.word	0x200023f4

000240fc <z_object_validate>:
{
   240fc:	b538      	push	{r3, r4, r5, lr}
   240fe:	4615      	mov	r5, r2
	if (unlikely((ko == NULL) ||
   24100:	4604      	mov	r4, r0
   24102:	b368      	cbz	r0, 24160 <z_object_validate+0x64>
   24104:	b111      	cbz	r1, 2410c <z_object_validate+0x10>
   24106:	7983      	ldrb	r3, [r0, #6]
   24108:	428b      	cmp	r3, r1
   2410a:	d129      	bne.n	24160 <z_object_validate+0x64>
	if ((ko->flags & K_OBJ_FLAG_PUBLIC) != 0U) {
   2410c:	79e3      	ldrb	r3, [r4, #7]
   2410e:	079a      	lsls	r2, r3, #30
   24110:	d50a      	bpl.n	24128 <z_object_validate+0x2c>
	if (likely(init == _OBJ_INIT_TRUE)) {
   24112:	2d00      	cmp	r5, #0
   24114:	d01c      	beq.n	24150 <z_object_validate+0x54>
	} else if (init < _OBJ_INIT_TRUE) { /* _OBJ_INIT_FALSE case */
   24116:	da26      	bge.n	24166 <z_object_validate+0x6a>
		if (unlikely((ko->flags & K_OBJ_FLAG_INITIALIZED) != 0U)) {
   24118:	79e3      	ldrb	r3, [r4, #7]
			return -EADDRINUSE;
   2411a:	f013 0f01 	tst.w	r3, #1
   2411e:	bf0c      	ite	eq
   24120:	2000      	moveq	r0, #0
   24122:	f06f 006f 	mvnne.w	r0, #111	; 0x6f
   24126:	e01a      	b.n	2415e <z_object_validate+0x62>
	index = thread_index_get(_current);
   24128:	4b10      	ldr	r3, [pc, #64]	; (2416c <z_object_validate+0x70>)
   2412a:	6898      	ldr	r0, [r3, #8]
   2412c:	f006 f8d3 	bl	2a2d6 <thread_index_get>
	if (index != -1) {
   24130:	1c43      	adds	r3, r0, #1
   24132:	d014      	beq.n	2415e <z_object_validate+0x62>
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   24134:	0942      	lsrs	r2, r0, #5
		return sys_bitfield_test_bit((mem_addr_t)&ko->perms, index);
   24136:	1d23      	adds	r3, r4, #4
   24138:	f000 001f 	and.w	r0, r0, #31
	uint32_t temp = *(volatile uint32_t *)addr;
   2413c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   24140:	2301      	movs	r3, #1
   24142:	fa03 f000 	lsl.w	r0, r3, r0
	if (unlikely(thread_perms_test(ko) == 0)) {
   24146:	4210      	tst	r0, r2
   24148:	d1e3      	bne.n	24112 <z_object_validate+0x16>
		return -EPERM;
   2414a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2414e:	e006      	b.n	2415e <z_object_validate+0x62>
		if (unlikely((ko->flags & K_OBJ_FLAG_INITIALIZED) == 0U)) {
   24150:	79e3      	ldrb	r3, [r4, #7]
			return -EINVAL;
   24152:	f013 0f01 	tst.w	r3, #1
   24156:	bf14      	ite	ne
   24158:	2000      	movne	r0, #0
   2415a:	f06f 0015 	mvneq.w	r0, #21
}
   2415e:	bd38      	pop	{r3, r4, r5, pc}
		return -EBADF;
   24160:	f06f 0008 	mvn.w	r0, #8
   24164:	e7fb      	b.n	2415e <z_object_validate+0x62>
	return 0;
   24166:	2000      	movs	r0, #0
   24168:	e7f9      	b.n	2415e <z_object_validate+0x62>
   2416a:	bf00      	nop
   2416c:	200023f4 	.word	0x200023f4

00024170 <z_user_from_copy>:
{
   24170:	b5f0      	push	{r4, r5, r6, r7, lr}
   24172:	460d      	mov	r5, r1
   24174:	4616      	mov	r6, r2
   24176:	b087      	sub	sp, #28
   24178:	4607      	mov	r7, r0
			Z_SYSCALL_MEMORY_READ(src, size)) {
   2417a:	2200      	movs	r2, #0
   2417c:	4631      	mov	r1, r6
   2417e:	4628      	mov	r0, r5
   24180:	f002 fc90 	bl	26aa4 <arch_buffer_validate>
   24184:	4604      	mov	r4, r0
   24186:	b310      	cbz	r0, 241ce <z_user_from_copy+0x5e>
   24188:	f006 f862 	bl	2a250 <arch_is_user_context>
   2418c:	4c13      	ldr	r4, [pc, #76]	; (241dc <z_user_from_copy+0x6c>)
   2418e:	4b14      	ldr	r3, [pc, #80]	; (241e0 <z_user_from_copy+0x70>)
   24190:	1ae4      	subs	r4, r4, r3
   24192:	08e4      	lsrs	r4, r4, #3
   24194:	01a4      	lsls	r4, r4, #6
   24196:	4b13      	ldr	r3, [pc, #76]	; (241e4 <z_user_from_copy+0x74>)
   24198:	f044 0401 	orr.w	r4, r4, #1
   2419c:	b158      	cbz	r0, 241b6 <z_user_from_copy+0x46>
   2419e:	e9cd 6300 	strd	r6, r3, [sp]
   241a2:	4a11      	ldr	r2, [pc, #68]	; (241e8 <z_user_from_copy+0x78>)
   241a4:	4911      	ldr	r1, [pc, #68]	; (241ec <z_user_from_copy+0x7c>)
   241a6:	462b      	mov	r3, r5
   241a8:	4620      	mov	r0, r4
   241aa:	f000 fe74 	bl	24e96 <log_from_user>
	int ret = EFAULT;
   241ae:	240e      	movs	r4, #14
}
   241b0:	4620      	mov	r0, r4
   241b2:	b007      	add	sp, #28
   241b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			Z_SYSCALL_MEMORY_READ(src, size)) {
   241b6:	4a0c      	ldr	r2, [pc, #48]	; (241e8 <z_user_from_copy+0x78>)
   241b8:	480c      	ldr	r0, [pc, #48]	; (241ec <z_user_from_copy+0x7c>)
   241ba:	e9cd 2502 	strd	r2, r5, [sp, #8]
   241be:	e9cd 6304 	strd	r6, r3, [sp, #16]
   241c2:	2204      	movs	r2, #4
   241c4:	4623      	mov	r3, r4
   241c6:	a902      	add	r1, sp, #8
   241c8:	f000 fee1 	bl	24f8e <log_n>
   241cc:	e7ef      	b.n	241ae <z_user_from_copy+0x3e>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   241ce:	4632      	mov	r2, r6
   241d0:	4629      	mov	r1, r5
   241d2:	4638      	mov	r0, r7
   241d4:	f006 f904 	bl	2a3e0 <memcpy>
   241d8:	e7ea      	b.n	241b0 <z_user_from_copy+0x40>
   241da:	bf00      	nop
   241dc:	0002a810 	.word	0x0002a810
   241e0:	0002a6d0 	.word	0x0002a6d0
   241e4:	0002d10e 	.word	0x0002d10e
   241e8:	0002f88b 	.word	0x0002f88b
   241ec:	0002c8a6 	.word	0x0002c8a6

000241f0 <z_user_string_copy>:
{
   241f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   241f4:	460d      	mov	r5, r1
   241f6:	4616      	mov	r6, r2
   241f8:	4607      	mov	r7, r0
	return arch_user_string_nlen(src, maxlen, err);
   241fa:	aa01      	add	r2, sp, #4
   241fc:	4631      	mov	r1, r6
   241fe:	4628      	mov	r0, r5
   24200:	f7e2 f926 	bl	6450 <arch_user_string_nlen>
	if (err != 0) {
   24204:	f8dd 8004 	ldr.w	r8, [sp, #4]
   24208:	4604      	mov	r4, r0
   2420a:	f1b8 0f00 	cmp.w	r8, #0
   2420e:	d13a      	bne.n	24286 <z_user_string_copy+0x96>
	if (actual_len == maxlen) {
   24210:	4286      	cmp	r6, r0
   24212:	d118      	bne.n	24246 <z_user_string_copy+0x56>
   24214:	f006 f81c 	bl	2a250 <arch_is_user_context>
   24218:	4c1c      	ldr	r4, [pc, #112]	; (2428c <z_user_string_copy+0x9c>)
   2421a:	4b1d      	ldr	r3, [pc, #116]	; (24290 <z_user_string_copy+0xa0>)
   2421c:	1ae4      	subs	r4, r4, r3
   2421e:	08e4      	lsrs	r4, r4, #3
		LOG_ERR("string too long %p (%zu)", src, actual_len);
   24220:	01a4      	lsls	r4, r4, #6
   24222:	f044 0401 	orr.w	r4, r4, #1
   24226:	b138      	cbz	r0, 24238 <z_user_string_copy+0x48>
   24228:	491a      	ldr	r1, [pc, #104]	; (24294 <z_user_string_copy+0xa4>)
   2422a:	4633      	mov	r3, r6
   2422c:	462a      	mov	r2, r5
   2422e:	4620      	mov	r0, r4
   24230:	f000 fe31 	bl	24e96 <log_from_user>
		ret = EINVAL;
   24234:	2016      	movs	r0, #22
		goto out;
   24236:	e00f      	b.n	24258 <z_user_string_copy+0x68>
		LOG_ERR("string too long %p (%zu)", src, actual_len);
   24238:	4816      	ldr	r0, [pc, #88]	; (24294 <z_user_string_copy+0xa4>)
   2423a:	4623      	mov	r3, r4
   2423c:	4632      	mov	r2, r6
   2423e:	4629      	mov	r1, r5
   24240:	f000 fe70 	bl	24f24 <log_2>
		goto out;
   24244:	e7f6      	b.n	24234 <z_user_string_copy+0x44>
   24246:	2201      	movs	r2, #1
   24248:	1882      	adds	r2, r0, r2
   2424a:	d208      	bcs.n	2425e <z_user_string_copy+0x6e>
	ret = z_user_from_copy(dst, src, actual_len);
   2424c:	4629      	mov	r1, r5
   2424e:	4638      	mov	r0, r7
   24250:	f7ff ff8e 	bl	24170 <z_user_from_copy>
	dst[actual_len - 1] = '\0';
   24254:	f807 8004 	strb.w	r8, [r7, r4]
}
   24258:	b002      	add	sp, #8
   2425a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2425e:	f005 fff7 	bl	2a250 <arch_is_user_context>
   24262:	4b0a      	ldr	r3, [pc, #40]	; (2428c <z_user_string_copy+0x9c>)
   24264:	4a0a      	ldr	r2, [pc, #40]	; (24290 <z_user_string_copy+0xa0>)
   24266:	1a9b      	subs	r3, r3, r2
   24268:	08db      	lsrs	r3, r3, #3
		LOG_ERR("overflow");
   2426a:	019b      	lsls	r3, r3, #6
   2426c:	f043 0301 	orr.w	r3, r3, #1
   24270:	b120      	cbz	r0, 2427c <z_user_string_copy+0x8c>
   24272:	4909      	ldr	r1, [pc, #36]	; (24298 <z_user_string_copy+0xa8>)
   24274:	4618      	mov	r0, r3
   24276:	f000 fe0e 	bl	24e96 <log_from_user>
   2427a:	e7db      	b.n	24234 <z_user_string_copy+0x44>
   2427c:	4806      	ldr	r0, [pc, #24]	; (24298 <z_user_string_copy+0xa8>)
   2427e:	4619      	mov	r1, r3
   24280:	f000 fe2f 	bl	24ee2 <log_0>
   24284:	e7d6      	b.n	24234 <z_user_string_copy+0x44>
		ret = EFAULT;
   24286:	200e      	movs	r0, #14
	return ret;
   24288:	e7e6      	b.n	24258 <z_user_string_copy+0x68>
   2428a:	bf00      	nop
   2428c:	0002a810 	.word	0x0002a810
   24290:	0002a6d0 	.word	0x0002a6d0
   24294:	0002f65d 	.word	0x0002f65d
   24298:	0002ee4b 	.word	0x0002ee4b

0002429c <z_mrsh_k_object_access_grant>:
#include <syscalls/kobject.h>

extern void z_vrfy_k_object_access_grant(const void * object, struct k_thread * thread);
uintptr_t z_mrsh_k_object_access_grant(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   2429c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	_current->syscall_frame = ssf;
   242a0:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 2436c <z_mrsh_k_object_access_grant+0xd0>
   242a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   242a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
{
   242aa:	4606      	mov	r6, r0
	_current->syscall_frame = ssf;
   242ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
static inline void z_vrfy_k_object_access_grant(const void *object,
						struct k_thread *thread)
{
	struct z_object *ko;

	Z_OOPS(Z_SYSCALL_OBJ_INIT(thread, K_OBJ_THREAD));
   242b0:	4608      	mov	r0, r1
{
   242b2:	460f      	mov	r7, r1
   242b4:	f7db ff24 	bl	100 <z_object_find>
	ret = z_object_validate(ko, otype, init);
   242b8:	2201      	movs	r2, #1
   242ba:	2109      	movs	r1, #9
   242bc:	4681      	mov	r9, r0
   242be:	f7ff ff1d 	bl	240fc <z_object_validate>
	if (ret != 0) {
   242c2:	4645      	mov	r5, r8
   242c4:	4604      	mov	r4, r0
   242c6:	2800      	cmp	r0, #0
   242c8:	d036      	beq.n	24338 <z_mrsh_k_object_access_grant+0x9c>
		z_dump_object_error(ret, obj, ko, otype);
   242ca:	2309      	movs	r3, #9
   242cc:	464a      	mov	r2, r9
   242ce:	4639      	mov	r1, r7
   242d0:	f7ff fe1c 	bl	23f0c <z_dump_object_error>
   242d4:	f006 f859 	bl	2a38a <arch_is_user_context>
   242d8:	4b1f      	ldr	r3, [pc, #124]	; (24358 <z_mrsh_k_object_access_grant+0xbc>)
   242da:	4a20      	ldr	r2, [pc, #128]	; (2435c <z_mrsh_k_object_access_grant+0xc0>)
   242dc:	1a9b      	subs	r3, r3, r2
   242de:	08db      	lsrs	r3, r3, #3
   242e0:	019b      	lsls	r3, r3, #6
   242e2:	f043 0301 	orr.w	r3, r3, #1
   242e6:	b148      	cbz	r0, 242fc <z_mrsh_k_object_access_grant+0x60>
   242e8:	4a1d      	ldr	r2, [pc, #116]	; (24360 <z_mrsh_k_object_access_grant+0xc4>)
   242ea:	491e      	ldr	r1, [pc, #120]	; (24364 <z_mrsh_k_object_access_grant+0xc8>)
   242ec:	4618      	mov	r0, r3
   242ee:	f000 fdd2 	bl	24e96 <log_from_user>
	ko = validate_any_object(object);
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(ko != NULL, "object %p access denied",
   242f2:	68ab      	ldr	r3, [r5, #8]
   242f4:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   242f8:	f002 fbb0 	bl	26a5c <arch_syscall_oops>
	Z_OOPS(Z_SYSCALL_OBJ_INIT(thread, K_OBJ_THREAD));
   242fc:	4918      	ldr	r1, [pc, #96]	; (24360 <z_mrsh_k_object_access_grant+0xc4>)
   242fe:	4819      	ldr	r0, [pc, #100]	; (24364 <z_mrsh_k_object_access_grant+0xc8>)
   24300:	461a      	mov	r2, r3
   24302:	f000 fdfb 	bl	24efc <log_1>
   24306:	e7f4      	b.n	242f2 <z_mrsh_k_object_access_grant+0x56>
   24308:	f006 f83f 	bl	2a38a <arch_is_user_context>
   2430c:	4c12      	ldr	r4, [pc, #72]	; (24358 <z_mrsh_k_object_access_grant+0xbc>)
   2430e:	4b13      	ldr	r3, [pc, #76]	; (2435c <z_mrsh_k_object_access_grant+0xc0>)
   24310:	1ae4      	subs	r4, r4, r3
   24312:	08e4      	lsrs	r4, r4, #3
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(ko != NULL, "object %p access denied",
   24314:	01a4      	lsls	r4, r4, #6
   24316:	f044 0401 	orr.w	r4, r4, #1
   2431a:	b130      	cbz	r0, 2432a <z_mrsh_k_object_access_grant+0x8e>
   2431c:	4a10      	ldr	r2, [pc, #64]	; (24360 <z_mrsh_k_object_access_grant+0xc4>)
   2431e:	4912      	ldr	r1, [pc, #72]	; (24368 <z_mrsh_k_object_access_grant+0xcc>)
   24320:	4633      	mov	r3, r6
   24322:	4620      	mov	r0, r4
   24324:	f000 fdb7 	bl	24e96 <log_from_user>
   24328:	e7e3      	b.n	242f2 <z_mrsh_k_object_access_grant+0x56>
   2432a:	490d      	ldr	r1, [pc, #52]	; (24360 <z_mrsh_k_object_access_grant+0xc4>)
   2432c:	480e      	ldr	r0, [pc, #56]	; (24368 <z_mrsh_k_object_access_grant+0xcc>)
   2432e:	4623      	mov	r3, r4
   24330:	4632      	mov	r2, r6
   24332:	f000 fdf7 	bl	24f24 <log_2>
   24336:	e7dc      	b.n	242f2 <z_mrsh_k_object_access_grant+0x56>
	ko = validate_any_object(object);
   24338:	4630      	mov	r0, r6
   2433a:	f006 f830 	bl	2a39e <validate_any_object>
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(ko != NULL, "object %p access denied",
   2433e:	2800      	cmp	r0, #0
   24340:	d0e2      	beq.n	24308 <z_mrsh_k_object_access_grant+0x6c>
				    object));
	z_thread_perms_set(ko, thread);
   24342:	4639      	mov	r1, r7
   24344:	f005 ffd6 	bl	2a2f4 <z_thread_perms_set>
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	z_vrfy_k_object_access_grant(*(const void **)&arg0, *(struct k_thread **)&arg1)
;
	_current->syscall_frame = NULL;
   24348:	f8d8 3008 	ldr.w	r3, [r8, #8]
	return 0;
}
   2434c:	4620      	mov	r0, r4
	_current->syscall_frame = NULL;
   2434e:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
}
   24352:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   24356:	bf00      	nop
   24358:	0002a810 	.word	0x0002a810
   2435c:	0002a6d0 	.word	0x0002a6d0
   24360:	0002f8c6 	.word	0x0002f8c6
   24364:	0002e72d 	.word	0x0002e72d
   24368:	0002f895 	.word	0x0002f895
   2436c:	200023f4 	.word	0x200023f4

00024370 <z_mrsh_k_object_release>:
#include <syscalls/kobject.h>

extern void z_vrfy_k_object_release(const void * object);
uintptr_t z_mrsh_k_object_release(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
   24370:	b570      	push	{r4, r5, r6, lr}
	_current->syscall_frame = ssf;
   24372:	4c17      	ldr	r4, [pc, #92]	; (243d0 <z_mrsh_k_object_release+0x60>)
   24374:	9a06      	ldr	r2, [sp, #24]
   24376:	68a3      	ldr	r3, [r4, #8]
   24378:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
{
   2437c:	4605      	mov	r5, r0

static inline void z_vrfy_k_object_release(const void *object)
{
	struct z_object *ko;

	ko = validate_any_object((void *)object);
   2437e:	f006 f80e 	bl	2a39e <validate_any_object>
	Z_OOPS(Z_SYSCALL_VERIFY_MSG(ko != NULL, "object %p access denied",
   24382:	4626      	mov	r6, r4
   24384:	b9d8      	cbnz	r0, 243be <z_mrsh_k_object_release+0x4e>
   24386:	f006 f800 	bl	2a38a <arch_is_user_context>
   2438a:	4c12      	ldr	r4, [pc, #72]	; (243d4 <z_mrsh_k_object_release+0x64>)
   2438c:	4b12      	ldr	r3, [pc, #72]	; (243d8 <z_mrsh_k_object_release+0x68>)
   2438e:	1ae4      	subs	r4, r4, r3
   24390:	08e4      	lsrs	r4, r4, #3
   24392:	01a4      	lsls	r4, r4, #6
   24394:	f044 0401 	orr.w	r4, r4, #1
   24398:	b150      	cbz	r0, 243b0 <z_mrsh_k_object_release+0x40>
   2439a:	4a10      	ldr	r2, [pc, #64]	; (243dc <z_mrsh_k_object_release+0x6c>)
   2439c:	4910      	ldr	r1, [pc, #64]	; (243e0 <z_mrsh_k_object_release+0x70>)
   2439e:	462b      	mov	r3, r5
   243a0:	4620      	mov	r0, r4
   243a2:	f000 fd78 	bl	24e96 <log_from_user>
   243a6:	68b3      	ldr	r3, [r6, #8]
   243a8:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   243ac:	f002 fb56 	bl	26a5c <arch_syscall_oops>
   243b0:	490a      	ldr	r1, [pc, #40]	; (243dc <z_mrsh_k_object_release+0x6c>)
   243b2:	480b      	ldr	r0, [pc, #44]	; (243e0 <z_mrsh_k_object_release+0x70>)
   243b4:	4623      	mov	r3, r4
   243b6:	462a      	mov	r2, r5
   243b8:	f000 fdb4 	bl	24f24 <log_2>
   243bc:	e7f3      	b.n	243a6 <z_mrsh_k_object_release+0x36>
				    (void *)object));
	z_thread_perms_clear(ko, _current);
   243be:	68a1      	ldr	r1, [r4, #8]
   243c0:	f005 ffac 	bl	2a31c <z_thread_perms_clear>
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	z_vrfy_k_object_release(*(const void **)&arg0)
;
	_current->syscall_frame = NULL;
   243c4:	68a3      	ldr	r3, [r4, #8]
   243c6:	2000      	movs	r0, #0
   243c8:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	return 0;
}
   243cc:	bd70      	pop	{r4, r5, r6, pc}
   243ce:	bf00      	nop
   243d0:	200023f4 	.word	0x200023f4
   243d4:	0002a810 	.word	0x0002a810
   243d8:	0002a6d0 	.word	0x0002a6d0
   243dc:	0002f8e3 	.word	0x0002f8e3
   243e0:	0002f895 	.word	0x0002f895

000243e4 <z_mrsh_k_object_alloc>:

extern void * z_vrfy_k_object_alloc(enum k_objects otype);
uintptr_t z_mrsh_k_object_alloc(uintptr_t arg0, uintptr_t arg1, uintptr_t arg2,
		uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, void *ssf)
{
	_current->syscall_frame = ssf;
   243e4:	4b02      	ldr	r3, [pc, #8]	; (243f0 <z_mrsh_k_object_alloc+0xc>)
	(void) arg3;	/* unused */
	(void) arg4;	/* unused */
	(void) arg5;	/* unused */
	void * ret = z_vrfy_k_object_alloc(*(enum k_objects*)&arg0)
;
	_current->syscall_frame = NULL;
   243e6:	689b      	ldr	r3, [r3, #8]
   243e8:	2000      	movs	r0, #0
   243ea:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	return (uintptr_t) ret;
}
   243ee:	4770      	bx	lr
   243f0:	200023f4 	.word	0x200023f4

000243f4 <round>:
   243f4:	b580      	push	{r7, lr}
   243f6:	b08c      	sub	sp, #48	; 0x30
   243f8:	af00      	add	r7, sp, #0
   243fa:	e9c7 0100 	strd	r0, r1, [r7]
   243fe:	e9d7 2300 	ldrd	r2, r3, [r7]
   24402:	e9c7 2304 	strd	r2, r3, [r7, #16]
   24406:	697b      	ldr	r3, [r7, #20]
   24408:	62fb      	str	r3, [r7, #44]	; 0x2c
   2440a:	693b      	ldr	r3, [r7, #16]
   2440c:	62bb      	str	r3, [r7, #40]	; 0x28
   2440e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   24410:	151b      	asrs	r3, r3, #20
   24412:	f3c3 030a 	ubfx	r3, r3, #0, #11
   24416:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   2441a:	627b      	str	r3, [r7, #36]	; 0x24
   2441c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2441e:	2b13      	cmp	r3, #19
   24420:	dc33      	bgt.n	2448a <round+0x96>
   24422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   24424:	2b00      	cmp	r3, #0
   24426:	da10      	bge.n	2444a <round+0x56>
   24428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2442a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
   2442e:	62fb      	str	r3, [r7, #44]	; 0x2c
   24430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   24432:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   24436:	d105      	bne.n	24444 <round+0x50>
   24438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2443a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
   2443e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   24442:	62fb      	str	r3, [r7, #44]	; 0x2c
   24444:	2300      	movs	r3, #0
   24446:	62bb      	str	r3, [r7, #40]	; 0x28
   24448:	e059      	b.n	244fe <round+0x10a>
   2444a:	4a34      	ldr	r2, [pc, #208]	; (2451c <round+0x128>)
   2444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2444e:	fa42 f303 	asr.w	r3, r2, r3
   24452:	61bb      	str	r3, [r7, #24]
   24454:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   24456:	69bb      	ldr	r3, [r7, #24]
   24458:	4013      	ands	r3, r2
   2445a:	2b00      	cmp	r3, #0
   2445c:	d105      	bne.n	2446a <round+0x76>
   2445e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   24460:	2b00      	cmp	r3, #0
   24462:	d102      	bne.n	2446a <round+0x76>
   24464:	e9d7 2300 	ldrd	r2, r3, [r7]
   24468:	e053      	b.n	24512 <round+0x11e>
   2446a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   2446e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   24470:	fa42 f303 	asr.w	r3, r2, r3
   24474:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   24476:	4413      	add	r3, r2
   24478:	62fb      	str	r3, [r7, #44]	; 0x2c
   2447a:	69bb      	ldr	r3, [r7, #24]
   2447c:	43da      	mvns	r2, r3
   2447e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   24480:	4013      	ands	r3, r2
   24482:	62fb      	str	r3, [r7, #44]	; 0x2c
   24484:	2300      	movs	r3, #0
   24486:	62bb      	str	r3, [r7, #40]	; 0x28
   24488:	e039      	b.n	244fe <round+0x10a>
   2448a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2448c:	2b33      	cmp	r3, #51	; 0x33
   2448e:	dd0f      	ble.n	244b0 <round+0xbc>
   24490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   24492:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   24496:	d108      	bne.n	244aa <round+0xb6>
   24498:	e9d7 0100 	ldrd	r0, r1, [r7]
   2449c:	4602      	mov	r2, r0
   2449e:	460b      	mov	r3, r1
   244a0:	f7db feb4 	bl	20c <__adddf3>
   244a4:	4602      	mov	r2, r0
   244a6:	460b      	mov	r3, r1
   244a8:	e033      	b.n	24512 <round+0x11e>
   244aa:	e9d7 2300 	ldrd	r2, r3, [r7]
   244ae:	e030      	b.n	24512 <round+0x11e>
   244b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   244b2:	3b14      	subs	r3, #20
   244b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   244b8:	fa22 f303 	lsr.w	r3, r2, r3
   244bc:	623b      	str	r3, [r7, #32]
   244be:	6aba      	ldr	r2, [r7, #40]	; 0x28
   244c0:	6a3b      	ldr	r3, [r7, #32]
   244c2:	4013      	ands	r3, r2
   244c4:	2b00      	cmp	r3, #0
   244c6:	d102      	bne.n	244ce <round+0xda>
   244c8:	e9d7 2300 	ldrd	r2, r3, [r7]
   244cc:	e021      	b.n	24512 <round+0x11e>
   244ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   244d0:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
   244d4:	2201      	movs	r2, #1
   244d6:	fa02 f303 	lsl.w	r3, r2, r3
   244da:	461a      	mov	r2, r3
   244dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   244de:	4413      	add	r3, r2
   244e0:	61fb      	str	r3, [r7, #28]
   244e2:	69fa      	ldr	r2, [r7, #28]
   244e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   244e6:	429a      	cmp	r2, r3
   244e8:	d202      	bcs.n	244f0 <round+0xfc>
   244ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   244ec:	3301      	adds	r3, #1
   244ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   244f0:	69fb      	ldr	r3, [r7, #28]
   244f2:	62bb      	str	r3, [r7, #40]	; 0x28
   244f4:	6a3b      	ldr	r3, [r7, #32]
   244f6:	43db      	mvns	r3, r3
   244f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   244fa:	4013      	ands	r3, r2
   244fc:	62bb      	str	r3, [r7, #40]	; 0x28
   244fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   24500:	60fb      	str	r3, [r7, #12]
   24502:	6abb      	ldr	r3, [r7, #40]	; 0x28
   24504:	60bb      	str	r3, [r7, #8]
   24506:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   2450a:	e9c7 2300 	strd	r2, r3, [r7]
   2450e:	e9d7 2300 	ldrd	r2, r3, [r7]
   24512:	4610      	mov	r0, r2
   24514:	4619      	mov	r1, r3
   24516:	3730      	adds	r7, #48	; 0x30
   24518:	46bd      	mov	sp, r7
   2451a:	bd80      	pop	{r7, pc}
   2451c:	000fffff 	.word	0x000fffff

00024520 <arch_is_user_context>:
static inline bool arch_is_user_context(void)
{
	uint32_t value;

	/* check for handler mode */
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   24520:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   24524:	b923      	cbnz	r3, 24530 <arch_is_user_context+0x10>
		return false;
	}

	/* if not handler mode, return mode information */
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   24526:	f3ef 8014 	mrs	r0, CONTROL
	return (value & CONTROL_nPRIV_Msk) ? true : false;
   2452a:	f000 0001 	and.w	r0, r0, #1
   2452e:	4770      	bx	lr
		return false;
   24530:	2000      	movs	r0, #0
}
   24532:	4770      	bx	lr

00024534 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   24534:	4603      	mov	r3, r0
   24536:	b140      	cbz	r0, 2454a <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   24538:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   2453a:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   2453e:	2a02      	cmp	r2, #2
   24540:	d006      	beq.n	24550 <sys_notify_validate+0x1c>
   24542:	2a03      	cmp	r2, #3
   24544:	d004      	beq.n	24550 <sys_notify_validate+0x1c>
   24546:	2a01      	cmp	r2, #1
   24548:	d005      	beq.n	24556 <sys_notify_validate+0x22>
		return -EINVAL;
   2454a:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   2454e:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   24550:	681a      	ldr	r2, [r3, #0]
   24552:	2a00      	cmp	r2, #0
   24554:	d0f9      	beq.n	2454a <sys_notify_validate+0x16>
		notify->result = 0;
   24556:	2000      	movs	r0, #0
   24558:	6098      	str	r0, [r3, #8]
   2455a:	4770      	bx	lr

0002455c <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2455c:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   2455e:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   24562:	2a02      	cmp	r2, #2
{
   24564:	e92d 4150 	stmdb	sp!, {r4, r6, r8, lr}
   24568:	4603      	mov	r3, r0
	notify->result = res;
   2456a:	6081      	str	r1, [r0, #8]
	switch (method) {
   2456c:	d012      	beq.n	24594 <sys_notify_finalize+0x38>
   2456e:	2a03      	cmp	r2, #3
   24570:	d113      	bne.n	2459a <sys_notify_finalize+0x3e>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   24572:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   24574:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   24576:	2200      	movs	r2, #0
   24578:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   2457a:	b140      	cbz	r0, 2458e <sys_notify_finalize+0x32>
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   2457c:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   24580:	b973      	cbnz	r3, 245a0 <sys_notify_finalize+0x44>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   24582:	f3ef 8314 	mrs	r3, CONTROL
	if (z_syscall_trap()) {
   24586:	07db      	lsls	r3, r3, #31
   24588:	d50a      	bpl.n	245a0 <sys_notify_finalize+0x44>
	register uint32_t r6 __asm__("r6") = call_id;
   2458a:	2695      	movs	r6, #149	; 0x95
	__asm__ volatile("svc %[svid]\n"
   2458c:	df03      	svc	3
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   2458e:	4620      	mov	r0, r4
   24590:	e8bd 8150 	ldmia.w	sp!, {r4, r6, r8, pc}
		sig = notify->method.signal;
   24594:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = 0;
   24596:	2400      	movs	r4, #0
		break;
   24598:	e7ed      	b.n	24576 <sys_notify_finalize+0x1a>
	switch (method) {
   2459a:	2400      	movs	r4, #0
   2459c:	4620      	mov	r0, r4
   2459e:	e7ea      	b.n	24576 <sys_notify_finalize+0x1a>
	return z_impl_k_poll_signal_raise(sig, result);
   245a0:	f7ff fa74 	bl	23a8c <z_impl_k_poll_signal_raise>
	return rv;
   245a4:	e7f3      	b.n	2458e <sys_notify_finalize+0x32>

000245a6 <arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   245a6:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   245aa:	b923      	cbnz	r3, 245b6 <arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   245ac:	f3ef 8014 	mrs	r0, CONTROL
	return (value & CONTROL_nPRIV_Msk) ? true : false;
   245b0:	f000 0001 	and.w	r0, r0, #1
   245b4:	4770      	bx	lr
		return false;
   245b6:	2000      	movs	r0, #0
}
   245b8:	4770      	bx	lr

000245ba <arch_printk_char_out>:
}
   245ba:	2000      	movs	r0, #0
   245bc:	4770      	bx	lr

000245be <str_out>:
{
   245be:	b530      	push	{r4, r5, lr}
   245c0:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   245c2:	680c      	ldr	r4, [r1, #0]
   245c4:	1c55      	adds	r5, r2, #1
   245c6:	b114      	cbz	r4, 245ce <str_out+0x10>
   245c8:	684b      	ldr	r3, [r1, #4]
   245ca:	4293      	cmp	r3, r2
   245cc:	dc01      	bgt.n	245d2 <str_out+0x14>
		ctx->count++;
   245ce:	608d      	str	r5, [r1, #8]
}
   245d0:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   245d2:	3b01      	subs	r3, #1
   245d4:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   245d6:	bf08      	it	eq
   245d8:	2200      	moveq	r2, #0
   245da:	608d      	str	r5, [r1, #8]
   245dc:	bf0c      	ite	eq
   245de:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   245e0:	54a0      	strbne	r0, [r4, r2]
   245e2:	e7f5      	b.n	245d0 <str_out+0x12>

000245e4 <printk>:
{
   245e4:	b40f      	push	{r0, r1, r2, r3}
   245e6:	b507      	push	{r0, r1, r2, lr}
   245e8:	a904      	add	r1, sp, #16
   245ea:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   245ee:	9101      	str	r1, [sp, #4]
		log_printk(fmt, ap);
   245f0:	f000 fce3 	bl	24fba <log_printk>
}
   245f4:	b003      	add	sp, #12
   245f6:	f85d eb04 	ldr.w	lr, [sp], #4
   245fa:	b004      	add	sp, #16
   245fc:	4770      	bx	lr

000245fe <snprintk>:
{
   245fe:	b40c      	push	{r2, r3}
   24600:	b507      	push	{r0, r1, r2, lr}
   24602:	ab04      	add	r3, sp, #16
   24604:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   24608:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   2460a:	f7de ff27 	bl	345c <vsnprintk>
}
   2460e:	b003      	add	sp, #12
   24610:	f85d eb04 	ldr.w	lr, [sp], #4
   24614:	b002      	add	sp, #8
   24616:	4770      	bx	lr

00024618 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   24618:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   2461a:	f013 0307 	ands.w	r3, r3, #7
   2461e:	d105      	bne.n	2462c <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   24620:	6803      	ldr	r3, [r0, #0]
   24622:	2b00      	cmp	r3, #0
		evt = EVT_START;
   24624:	bf0c      	ite	eq
   24626:	2000      	moveq	r0, #0
   24628:	2003      	movne	r0, #3
   2462a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   2462c:	2b02      	cmp	r3, #2
   2462e:	d105      	bne.n	2463c <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   24630:	8b43      	ldrh	r3, [r0, #26]
   24632:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   24634:	bf14      	ite	ne
   24636:	2000      	movne	r0, #0
   24638:	2004      	moveq	r0, #4
   2463a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   2463c:	2b01      	cmp	r3, #1
   2463e:	d105      	bne.n	2464c <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   24640:	6803      	ldr	r3, [r0, #0]
   24642:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   24644:	bf0c      	ite	eq
   24646:	2000      	moveq	r0, #0
   24648:	2005      	movne	r0, #5
   2464a:	4770      	bx	lr
	int evt = EVT_NOP;
   2464c:	2000      	movs	r0, #0
}
   2464e:	4770      	bx	lr

00024650 <notify_one>:
{
   24650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24654:	460d      	mov	r5, r1
   24656:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   24658:	4619      	mov	r1, r3
   2465a:	1d28      	adds	r0, r5, #4
{
   2465c:	4690      	mov	r8, r2
   2465e:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   24660:	f7ff ff7c 	bl	2455c <sys_notify_finalize>
	if (cb) {
   24664:	4604      	mov	r4, r0
   24666:	b138      	cbz	r0, 24678 <notify_one+0x28>
		cb(mgr, cli, state, res);
   24668:	4633      	mov	r3, r6
   2466a:	4642      	mov	r2, r8
   2466c:	4629      	mov	r1, r5
   2466e:	4638      	mov	r0, r7
   24670:	46a4      	mov	ip, r4
}
   24672:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   24676:	4760      	bx	ip
}
   24678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002467c <transition_complete>:
{
   2467c:	b410      	push	{r4}
	__asm__ volatile(
   2467e:	f04f 0420 	mov.w	r4, #32
   24682:	f3ef 8211 	mrs	r2, BASEPRI
   24686:	f384 8811 	msr	BASEPRI, r4
   2468a:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   2468e:	6141      	str	r1, [r0, #20]
}
   24690:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   24692:	2101      	movs	r1, #1
   24694:	f7de bef6 	b.w	3484 <process_event>

00024698 <validate_args>:
{
   24698:	b510      	push	{r4, lr}
   2469a:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   2469c:	b140      	cbz	r0, 246b0 <validate_args+0x18>
   2469e:	b139      	cbz	r1, 246b0 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   246a0:	1d08      	adds	r0, r1, #4
   246a2:	f7ff ff47 	bl	24534 <sys_notify_validate>
	if ((rv == 0)
   246a6:	b928      	cbnz	r0, 246b4 <validate_args+0x1c>
	    && ((cli->notify.flags
   246a8:	68a3      	ldr	r3, [r4, #8]
   246aa:	f033 0303 	bics.w	r3, r3, #3
   246ae:	d001      	beq.n	246b4 <validate_args+0x1c>
		rv = -EINVAL;
   246b0:	f06f 0015 	mvn.w	r0, #21
}
   246b4:	bd10      	pop	{r4, pc}

000246b6 <onoff_manager_init>:
{
   246b6:	b538      	push	{r3, r4, r5, lr}
   246b8:	460c      	mov	r4, r1
	if ((mgr == NULL)
   246ba:	4605      	mov	r5, r0
   246bc:	b158      	cbz	r0, 246d6 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   246be:	b151      	cbz	r1, 246d6 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   246c0:	680b      	ldr	r3, [r1, #0]
   246c2:	b143      	cbz	r3, 246d6 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   246c4:	684b      	ldr	r3, [r1, #4]
   246c6:	b133      	cbz	r3, 246d6 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   246c8:	221c      	movs	r2, #28
   246ca:	2100      	movs	r1, #0
   246cc:	f005 fe96 	bl	2a3fc <memset>
   246d0:	612c      	str	r4, [r5, #16]
	return 0;
   246d2:	2000      	movs	r0, #0
}
   246d4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   246d6:	f06f 0015 	mvn.w	r0, #21
   246da:	e7fb      	b.n	246d4 <onoff_manager_init+0x1e>

000246dc <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   246dc:	b570      	push	{r4, r5, r6, lr}
   246de:	4604      	mov	r4, r0
   246e0:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   246e2:	f7ff ffd9 	bl	24698 <validate_args>

	if (rv < 0) {
   246e6:	1e05      	subs	r5, r0, #0
   246e8:	db31      	blt.n	2474e <onoff_request+0x72>
   246ea:	f04f 0320 	mov.w	r3, #32
   246ee:	f3ef 8111 	mrs	r1, BASEPRI
   246f2:	f383 8811 	msr	BASEPRI, r3
   246f6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   246fa:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   246fc:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   246fe:	f64f 75ff 	movw	r5, #65535	; 0xffff
   24702:	42ab      	cmp	r3, r5
   24704:	f000 0207 	and.w	r2, r0, #7
   24708:	d02e      	beq.n	24768 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   2470a:	2a02      	cmp	r2, #2
   2470c:	d10e      	bne.n	2472c <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   2470e:	3301      	adds	r3, #1
   24710:	8363      	strh	r3, [r4, #26]
	rv = state;
   24712:	4615      	mov	r5, r2
		notify = true;
   24714:	2301      	movs	r3, #1
	__asm__ volatile(
   24716:	f381 8811 	msr	BASEPRI, r1
   2471a:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   2471e:	b1b3      	cbz	r3, 2474e <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   24720:	2300      	movs	r3, #0
   24722:	4631      	mov	r1, r6
   24724:	4620      	mov	r0, r4
   24726:	f7ff ff93 	bl	24650 <notify_one>
   2472a:	e010      	b.n	2474e <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   2472c:	0783      	lsls	r3, r0, #30
   2472e:	d001      	beq.n	24734 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   24730:	2a06      	cmp	r2, #6
   24732:	d10e      	bne.n	24752 <onoff_request+0x76>
	parent->next = child;
   24734:	2300      	movs	r3, #0
   24736:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   24738:	6863      	ldr	r3, [r4, #4]
   2473a:	b993      	cbnz	r3, 24762 <onoff_request+0x86>
	list->head = node;
   2473c:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   24740:	4615      	mov	r5, r2
   24742:	b962      	cbnz	r2, 2475e <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   24744:	460a      	mov	r2, r1
   24746:	4620      	mov	r0, r4
   24748:	2102      	movs	r1, #2
   2474a:	f7de fe9b 	bl	3484 <process_event>
		}
	}

	return rv;
}
   2474e:	4628      	mov	r0, r5
   24750:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   24752:	2a05      	cmp	r2, #5
   24754:	bf0c      	ite	eq
   24756:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   2475a:	f06f 0504 	mvnne.w	r5, #4
   2475e:	2300      	movs	r3, #0
   24760:	e7d9      	b.n	24716 <onoff_request+0x3a>
	parent->next = child;
   24762:	601e      	str	r6, [r3, #0]
	list->tail = node;
   24764:	6066      	str	r6, [r4, #4]
}
   24766:	e7eb      	b.n	24740 <onoff_request+0x64>
		rv = -EAGAIN;
   24768:	f06f 050a 	mvn.w	r5, #10
   2476c:	e7f7      	b.n	2475e <onoff_request+0x82>

0002476e <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   2476e:	b510      	push	{r4, lr}
	__asm__ volatile(
   24770:	f04f 0320 	mov.w	r3, #32
   24774:	f3ef 8211 	mrs	r2, BASEPRI
   24778:	f383 8811 	msr	BASEPRI, r3
   2477c:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   24780:	8b04      	ldrh	r4, [r0, #24]
   24782:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   24786:	2c02      	cmp	r4, #2
   24788:	d00a      	beq.n	247a0 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
   2478a:	2c01      	cmp	r4, #1
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   2478c:	bf0c      	ite	eq
   2478e:	f06f 0004 	mvneq.w	r0, #4
   24792:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
   24796:	f382 8811 	msr	BASEPRI, r2
   2479a:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   2479e:	e008      	b.n	247b2 <onoff_release+0x44>
	mgr->refs -= 1U;
   247a0:	8b43      	ldrh	r3, [r0, #26]
   247a2:	3b01      	subs	r3, #1
   247a4:	b29b      	uxth	r3, r3
   247a6:	8343      	strh	r3, [r0, #26]
	if (stop) {
   247a8:	b923      	cbnz	r3, 247b4 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   247aa:	4621      	mov	r1, r4
   247ac:	f7de fe6a 	bl	3484 <process_event>
	int rv = state;
   247b0:	4620      	mov	r0, r4
}
   247b2:	bd10      	pop	{r4, pc}
	int rv = state;
   247b4:	4620      	mov	r0, r4
   247b6:	e7ee      	b.n	24796 <onoff_release+0x28>

000247b8 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   247b8:	4604      	mov	r4, r0
   247ba:	b508      	push	{r3, lr}
   247bc:	4608      	mov	r0, r1
   247be:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   247c0:	461a      	mov	r2, r3
   247c2:	47a0      	blx	r4
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   247c4:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   247c8:	b973      	cbnz	r3, 247e8 <z_thread_entry+0x30>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   247ca:	f3ef 8314 	mrs	r3, CONTROL
	if (z_syscall_trap()) {
   247ce:	07da      	lsls	r2, r3, #31
   247d0:	d50a      	bpl.n	247e8 <z_thread_entry+0x30>
	register uint32_t r6 __asm__("r6") = call_id;
   247d2:	2674      	movs	r6, #116	; 0x74
	__asm__ volatile("svc %[svid]\n"
   247d4:	df03      	svc	3
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   247d6:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   247da:	b943      	cbnz	r3, 247ee <z_thread_entry+0x36>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   247dc:	f3ef 8314 	mrs	r3, CONTROL
	if (z_syscall_trap()) {
   247e0:	07db      	lsls	r3, r3, #31
   247e2:	d504      	bpl.n	247ee <z_thread_entry+0x36>
	register uint32_t r6 __asm__("r6") = call_id;
   247e4:	26a9      	movs	r6, #169	; 0xa9
	__asm__ volatile("svc %[svid]\n"
   247e6:	df03      	svc	3
	return z_impl_k_current_get();
   247e8:	f7fd fa8e 	bl	21d08 <z_impl_k_current_get>
   247ec:	e7f3      	b.n	247d6 <z_thread_entry+0x1e>
	z_impl_k_thread_abort(thread);
   247ee:	f7e2 f9eb 	bl	6bc8 <z_impl_k_thread_abort>
   247f2:	e7f9      	b.n	247e8 <z_thread_entry+0x30>

000247f4 <chunk_field>:
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   247f4:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   247f6:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   247fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   247fe:	bf2c      	ite	cs
   24800:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   24804:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   24808:	4770      	bx	lr

0002480a <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   2480a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   2480e:	6880      	ldr	r0, [r0, #8]
   24810:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   24814:	bf2c      	ite	cs
   24816:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   2481a:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   2481e:	4770      	bx	lr

00024820 <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
   24820:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   24822:	2201      	movs	r2, #1
   24824:	f7ff ffe6 	bl	247f4 <chunk_field>
}
   24828:	0840      	lsrs	r0, r0, #1
   2482a:	bd08      	pop	{r3, pc}

0002482c <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   2482c:	6883      	ldr	r3, [r0, #8]
   2482e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
   24832:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   24836:	d308      	bcc.n	2484a <set_chunk_used+0x1e>
		if (used) {
   24838:	684b      	ldr	r3, [r1, #4]
   2483a:	b11a      	cbz	r2, 24844 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   2483c:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   24840:	604b      	str	r3, [r1, #4]
   24842:	4770      	bx	lr
   24844:	f023 0301 	bic.w	r3, r3, #1
   24848:	e7fa      	b.n	24840 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
   2484a:	884b      	ldrh	r3, [r1, #2]
   2484c:	b11a      	cbz	r2, 24856 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2484e:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   24852:	804b      	strh	r3, [r1, #2]
		}
	}
}
   24854:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   24856:	f023 0301 	bic.w	r3, r3, #1
   2485a:	e7fa      	b.n	24852 <set_chunk_used+0x26>

0002485c <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2485c:	0053      	lsls	r3, r2, #1
   2485e:	2201      	movs	r2, #1
   24860:	f7ff bfd3 	b.w	2480a <chunk_set>

00024864 <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   24864:	6880      	ldr	r0, [r0, #8]
	return chunksz * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   24866:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   24868:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   2486c:	bf2c      	ite	cs
   2486e:	2002      	movcs	r0, #2
   24870:	2001      	movcc	r0, #1
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   24872:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
   24874:	fab0 f080 	clz	r0, r0
}
   24878:	f1c0 001f 	rsb	r0, r0, #31
   2487c:	4770      	bx	lr

0002487e <merge_chunks>:
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   2487e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24882:	4616      	mov	r6, r2
   24884:	4604      	mov	r4, r0
   24886:	460f      	mov	r7, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   24888:	f7ff ffca 	bl	24820 <chunk_size>
   2488c:	4631      	mov	r1, r6
   2488e:	4605      	mov	r5, r0
   24890:	4620      	mov	r0, r4
   24892:	f7ff ffc5 	bl	24820 <chunk_size>
   24896:	4405      	add	r5, r0

	set_chunk_size(h, lc, newsz);
   24898:	462a      	mov	r2, r5
   2489a:	4639      	mov	r1, r7
   2489c:	4620      	mov	r0, r4
   2489e:	f7ff ffdd 	bl	2485c <set_chunk_size>
	return c + chunk_size(h, c);
   248a2:	4631      	mov	r1, r6
   248a4:	4620      	mov	r0, r4
   248a6:	f7ff ffbb 	bl	24820 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   248aa:	462b      	mov	r3, r5
   248ac:	1831      	adds	r1, r6, r0
   248ae:	2200      	movs	r2, #0
   248b0:	4620      	mov	r0, r4
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   248b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   248b6:	f7ff bfa8 	b.w	2480a <chunk_set>

000248ba <split_chunks>:
{
   248ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   248be:	4614      	mov	r4, r2
   248c0:	4605      	mov	r5, r0
   248c2:	460e      	mov	r6, r1
	chunksz_t sz0 = chunk_size(h, lc);
   248c4:	f7ff ffac 	bl	24820 <chunk_size>
	chunksz_t lsz = rc - lc;
   248c8:	eba4 0806 	sub.w	r8, r4, r6
	chunksz_t rsz = sz0 - lsz;
   248cc:	1b37      	subs	r7, r6, r4
   248ce:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   248d0:	4642      	mov	r2, r8
   248d2:	4631      	mov	r1, r6
   248d4:	4628      	mov	r0, r5
   248d6:	f7ff ffc1 	bl	2485c <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   248da:	463a      	mov	r2, r7
   248dc:	4621      	mov	r1, r4
   248de:	4628      	mov	r0, r5
   248e0:	f7ff ffbc 	bl	2485c <set_chunk_size>
   248e4:	4643      	mov	r3, r8
   248e6:	2200      	movs	r2, #0
   248e8:	4621      	mov	r1, r4
   248ea:	4628      	mov	r0, r5
   248ec:	f7ff ff8d 	bl	2480a <chunk_set>
	return c + chunk_size(h, c);
   248f0:	4621      	mov	r1, r4
   248f2:	4628      	mov	r0, r5
   248f4:	f7ff ff94 	bl	24820 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   248f8:	463b      	mov	r3, r7
   248fa:	1821      	adds	r1, r4, r0
   248fc:	2200      	movs	r2, #0
   248fe:	4628      	mov	r0, r5
}
   24900:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   24904:	f7ff bf81 	b.w	2480a <chunk_set>

00024908 <free_list_remove_bidx>:
{
   24908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2490c:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   2490e:	2203      	movs	r2, #3
   24910:	460e      	mov	r6, r1
   24912:	4604      	mov	r4, r0
   24914:	f7ff ff6e 	bl	247f4 <chunk_field>
	if (next_free_chunk(h, c) == c) {
   24918:	4286      	cmp	r6, r0
   2491a:	4605      	mov	r5, r0
   2491c:	f107 0804 	add.w	r8, r7, #4
   24920:	d10b      	bne.n	2493a <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   24922:	2301      	movs	r3, #1
   24924:	fa03 f707 	lsl.w	r7, r3, r7
   24928:	68e3      	ldr	r3, [r4, #12]
   2492a:	ea23 0307 	bic.w	r3, r3, r7
   2492e:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   24930:	2300      	movs	r3, #0
   24932:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   24936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   2493a:	4631      	mov	r1, r6
   2493c:	2202      	movs	r2, #2
   2493e:	4620      	mov	r0, r4
   24940:	f7ff ff58 	bl	247f4 <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
   24944:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
   24946:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   24948:	4601      	mov	r1, r0
		b->next = second;
   2494a:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   2494e:	4620      	mov	r0, r4
   24950:	2203      	movs	r2, #3
   24952:	f7ff ff5a 	bl	2480a <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   24956:	4633      	mov	r3, r6
   24958:	4629      	mov	r1, r5
   2495a:	4620      	mov	r0, r4
   2495c:	2202      	movs	r2, #2
}
   2495e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   24962:	f7ff bf52 	b.w	2480a <chunk_set>

00024966 <free_list_remove>:
{
   24966:	b538      	push	{r3, r4, r5, lr}
   24968:	4604      	mov	r4, r0
   2496a:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   2496c:	f7ff ff58 	bl	24820 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   24970:	68a3      	ldr	r3, [r4, #8]
   24972:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   24976:	4601      	mov	r1, r0
   24978:	d301      	bcc.n	2497e <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   2497a:	2801      	cmp	r0, #1
   2497c:	d009      	beq.n	24992 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   2497e:	4620      	mov	r0, r4
   24980:	f7ff ff70 	bl	24864 <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   24984:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   24986:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   24988:	4620      	mov	r0, r4
}
   2498a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   2498e:	f7ff bfbb 	b.w	24908 <free_list_remove_bidx>
}
   24992:	bd38      	pop	{r3, r4, r5, pc}

00024994 <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   24994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24998:	4605      	mov	r5, r0
   2499a:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   2499c:	f7ff ff62 	bl	24864 <bucket_idx>
   249a0:	eb05 0a80 	add.w	sl, r5, r0, lsl #2
   249a4:	4606      	mov	r6, r0
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   249a6:	f8da 9010 	ldr.w	r9, [sl, #16]
   249aa:	f1b9 0f00 	cmp.w	r9, #0
   249ae:	d01b      	beq.n	249e8 <alloc_chunk+0x54>
   249b0:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   249b2:	f8da 4010 	ldr.w	r4, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   249b6:	4628      	mov	r0, r5
   249b8:	4621      	mov	r1, r4
   249ba:	f7ff ff31 	bl	24820 <chunk_size>
   249be:	4540      	cmp	r0, r8
   249c0:	d307      	bcc.n	249d2 <alloc_chunk+0x3e>
				free_list_remove_bidx(h, c, bi);
   249c2:	4632      	mov	r2, r6

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   249c4:	4621      	mov	r1, r4
   249c6:	4628      	mov	r0, r5
   249c8:	f7ff ff9e 	bl	24908 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   249cc:	4620      	mov	r0, r4
   249ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return chunk_field(h, c, FREE_NEXT);
   249d2:	2203      	movs	r2, #3
   249d4:	4621      	mov	r1, r4
   249d6:	4628      	mov	r0, r5
   249d8:	f7ff ff0c 	bl	247f4 <chunk_field>
		} while (--i && b->next != first);
   249dc:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   249de:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   249e2:	d001      	beq.n	249e8 <alloc_chunk+0x54>
   249e4:	4581      	cmp	r9, r0
   249e6:	d1e4      	bne.n	249b2 <alloc_chunk+0x1e>
	uint32_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   249e8:	68e9      	ldr	r1, [r5, #12]
   249ea:	3601      	adds	r6, #1
   249ec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   249f0:	40b4      	lsls	r4, r6
	if (bmask != 0U) {
   249f2:	400c      	ands	r4, r1
   249f4:	d0ea      	beq.n	249cc <alloc_chunk+0x38>
		int minbucket = __builtin_ctz(bmask);
   249f6:	fa94 f2a4 	rbit	r2, r4
   249fa:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   249fe:	1d13      	adds	r3, r2, #4
   24a00:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
   24a04:	e7de      	b.n	249c4 <alloc_chunk+0x30>

00024a06 <free_list_add>:
{
   24a06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24a0a:	4604      	mov	r4, r0
   24a0c:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   24a0e:	f7ff ff07 	bl	24820 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   24a12:	68a3      	ldr	r3, [r4, #8]
   24a14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   24a18:	4601      	mov	r1, r0
   24a1a:	d301      	bcc.n	24a20 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   24a1c:	2801      	cmp	r0, #1
   24a1e:	d035      	beq.n	24a8c <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   24a20:	4620      	mov	r0, r4
   24a22:	f7ff ff1f 	bl	24864 <bucket_idx>
	if (b->next == 0U) {
   24a26:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   24a2a:	6916      	ldr	r6, [r2, #16]
   24a2c:	b99e      	cbnz	r6, 24a56 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   24a2e:	2301      	movs	r3, #1
   24a30:	fa03 f000 	lsl.w	r0, r3, r0
   24a34:	68e3      	ldr	r3, [r4, #12]
   24a36:	4303      	orrs	r3, r0
   24a38:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   24a3a:	4629      	mov	r1, r5
		b->next = c;
   24a3c:	6115      	str	r5, [r2, #16]
   24a3e:	462b      	mov	r3, r5
   24a40:	2202      	movs	r2, #2
   24a42:	4620      	mov	r0, r4
   24a44:	f7ff fee1 	bl	2480a <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   24a48:	2203      	movs	r2, #3
   24a4a:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   24a4c:	4620      	mov	r0, r4
}
   24a4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   24a52:	f7ff beda 	b.w	2480a <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   24a56:	2202      	movs	r2, #2
   24a58:	4631      	mov	r1, r6
   24a5a:	4620      	mov	r0, r4
   24a5c:	f7ff feca 	bl	247f4 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
   24a60:	2202      	movs	r2, #2
   24a62:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
   24a64:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   24a66:	4629      	mov	r1, r5
   24a68:	4620      	mov	r0, r4
   24a6a:	f7ff fece 	bl	2480a <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   24a6e:	4633      	mov	r3, r6
   24a70:	2203      	movs	r2, #3
   24a72:	4629      	mov	r1, r5
   24a74:	4620      	mov	r0, r4
   24a76:	f7ff fec8 	bl	2480a <chunk_set>
   24a7a:	2203      	movs	r2, #3
   24a7c:	4639      	mov	r1, r7
   24a7e:	462b      	mov	r3, r5
   24a80:	4620      	mov	r0, r4
   24a82:	f7ff fec2 	bl	2480a <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   24a86:	2202      	movs	r2, #2
   24a88:	4631      	mov	r1, r6
   24a8a:	e7df      	b.n	24a4c <free_list_add+0x46>
   24a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00024a90 <free_chunk>:
{
   24a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24a92:	460c      	mov	r4, r1
   24a94:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   24a96:	f7ff fec3 	bl	24820 <chunk_size>
   24a9a:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   24a9c:	2201      	movs	r2, #1
   24a9e:	4631      	mov	r1, r6
   24aa0:	4628      	mov	r0, r5
   24aa2:	f7ff fea7 	bl	247f4 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   24aa6:	07c3      	lsls	r3, r0, #31
   24aa8:	d40c      	bmi.n	24ac4 <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
   24aaa:	4631      	mov	r1, r6
   24aac:	4628      	mov	r0, r5
   24aae:	f7ff ff5a 	bl	24966 <free_list_remove>
	return c + chunk_size(h, c);
   24ab2:	4621      	mov	r1, r4
   24ab4:	4628      	mov	r0, r5
   24ab6:	f7ff feb3 	bl	24820 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   24aba:	4621      	mov	r1, r4
   24abc:	1822      	adds	r2, r4, r0
   24abe:	4628      	mov	r0, r5
   24ac0:	f7ff fedd 	bl	2487e <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   24ac4:	2200      	movs	r2, #0
   24ac6:	4621      	mov	r1, r4
   24ac8:	4628      	mov	r0, r5
   24aca:	f7ff fe93 	bl	247f4 <chunk_field>
   24ace:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   24ad0:	2201      	movs	r2, #1
   24ad2:	4639      	mov	r1, r7
   24ad4:	4628      	mov	r0, r5
   24ad6:	f7ff fe8d 	bl	247f4 <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   24ada:	f010 0601 	ands.w	r6, r0, #1
   24ade:	d113      	bne.n	24b08 <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
   24ae0:	4639      	mov	r1, r7
   24ae2:	4628      	mov	r0, r5
   24ae4:	f7ff ff3f 	bl	24966 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   24ae8:	4621      	mov	r1, r4
   24aea:	4632      	mov	r2, r6
   24aec:	4628      	mov	r0, r5
   24aee:	f7ff fe81 	bl	247f4 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   24af2:	4622      	mov	r2, r4
   24af4:	1a21      	subs	r1, r4, r0
   24af6:	4628      	mov	r0, r5
   24af8:	f7ff fec1 	bl	2487e <merge_chunks>
   24afc:	4621      	mov	r1, r4
   24afe:	4632      	mov	r2, r6
   24b00:	4628      	mov	r0, r5
   24b02:	f7ff fe77 	bl	247f4 <chunk_field>
   24b06:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   24b08:	4621      	mov	r1, r4
   24b0a:	4628      	mov	r0, r5
}
   24b0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   24b10:	f7ff bf79 	b.w	24a06 <free_list_add>

00024b14 <sys_heap_free>:
{
   24b14:	b510      	push	{r4, lr}
	if (mem == NULL) {
   24b16:	b191      	cbz	r1, 24b3e <sys_heap_free+0x2a>
	struct z_heap *h = heap->heap;
   24b18:	6800      	ldr	r0, [r0, #0]
	return big_heap(h) ? 8 : 4;
   24b1a:	6883      	ldr	r3, [r0, #8]
   24b1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   24b20:	bf2c      	ite	cs
   24b22:	2408      	movcs	r4, #8
   24b24:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   24b26:	1b0c      	subs	r4, r1, r4
   24b28:	1a24      	subs	r4, r4, r0
   24b2a:	08e4      	lsrs	r4, r4, #3
	set_chunk_used(h, c, false);
   24b2c:	4621      	mov	r1, r4
   24b2e:	2200      	movs	r2, #0
   24b30:	f7ff fe7c 	bl	2482c <set_chunk_used>
	free_chunk(h, c);
   24b34:	4621      	mov	r1, r4
}
   24b36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	free_chunk(h, c);
   24b3a:	f7ff bfa9 	b.w	24a90 <free_chunk>
}
   24b3e:	bd10      	pop	{r4, pc}

00024b40 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   24b40:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   24b42:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   24b44:	b909      	cbnz	r1, 24b4a <sys_heap_alloc+0xa>
		return NULL;
   24b46:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
   24b48:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   24b4a:	68ab      	ldr	r3, [r5, #8]
   24b4c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   24b50:	d9f9      	bls.n	24b46 <sys_heap_alloc+0x6>
   24b52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   24b56:	bf2c      	ite	cs
   24b58:	2208      	movcs	r2, #8
   24b5a:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   24b5c:	1dcc      	adds	r4, r1, #7
   24b5e:	4414      	add	r4, r2
   24b60:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   24b62:	4621      	mov	r1, r4
   24b64:	4628      	mov	r0, r5
   24b66:	f7ff ff15 	bl	24994 <alloc_chunk>
	if (c == 0U) {
   24b6a:	4606      	mov	r6, r0
   24b6c:	2800      	cmp	r0, #0
   24b6e:	d0ea      	beq.n	24b46 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   24b70:	4601      	mov	r1, r0
   24b72:	4628      	mov	r0, r5
   24b74:	f7ff fe54 	bl	24820 <chunk_size>
   24b78:	42a0      	cmp	r0, r4
   24b7a:	d909      	bls.n	24b90 <sys_heap_alloc+0x50>
		split_chunks(h, c, c + chunk_sz);
   24b7c:	4434      	add	r4, r6
   24b7e:	4631      	mov	r1, r6
   24b80:	4628      	mov	r0, r5
   24b82:	4622      	mov	r2, r4
   24b84:	f7ff fe99 	bl	248ba <split_chunks>
		free_list_add(h, c + chunk_sz);
   24b88:	4621      	mov	r1, r4
   24b8a:	4628      	mov	r0, r5
   24b8c:	f7ff ff3b 	bl	24a06 <free_list_add>
	set_chunk_used(h, c, true);
   24b90:	4628      	mov	r0, r5
   24b92:	2201      	movs	r2, #1
   24b94:	4631      	mov	r1, r6
   24b96:	f7ff fe49 	bl	2482c <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   24b9a:	68ab      	ldr	r3, [r5, #8]
   24b9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   24ba0:	bf2c      	ite	cs
   24ba2:	2008      	movcs	r0, #8
   24ba4:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   24ba6:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   24baa:	4428      	add	r0, r5
	return chunk_mem(h, c);
   24bac:	e7cc      	b.n	24b48 <sys_heap_alloc+0x8>

00024bae <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   24bae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_heap *h = heap->heap;
   24bb2:	6806      	ldr	r6, [r0, #0]
{
   24bb4:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   24bb6:	424a      	negs	r2, r1
   24bb8:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   24bbc:	ea31 0202 	bics.w	r2, r1, r2
   24bc0:	68b5      	ldr	r5, [r6, #8]
{
   24bc2:	460b      	mov	r3, r1
	if (align != rew) {
   24bc4:	d00f      	beq.n	24be6 <sys_heap_aligned_alloc+0x38>
   24bc6:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   24bca:	bf34      	ite	cc
   24bcc:	2104      	movcc	r1, #4
   24bce:	2108      	movcs	r1, #8
   24bd0:	42b9      	cmp	r1, r7
   24bd2:	460a      	mov	r2, r1
   24bd4:	46b9      	mov	r9, r7
   24bd6:	bf28      	it	cs
   24bd8:	463a      	movcs	r2, r7
		align -= rew;
   24bda:	1bdf      	subs	r7, r3, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   24bdc:	b994      	cbnz	r4, 24c04 <sys_heap_aligned_alloc+0x56>
		return NULL;
   24bde:	2500      	movs	r5, #0
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
   24be0:	4628      	mov	r0, r5
   24be2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   24be6:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   24bea:	bf34      	ite	cc
   24bec:	2204      	movcc	r2, #4
   24bee:	2208      	movcs	r2, #8
		if (align <= chunk_header_bytes(h)) {
   24bf0:	4291      	cmp	r1, r2
   24bf2:	d804      	bhi.n	24bfe <sys_heap_aligned_alloc+0x50>
			return sys_heap_alloc(heap, bytes);
   24bf4:	4621      	mov	r1, r4
}
   24bf6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   24bfa:	f7ff bfa1 	b.w	24b40 <sys_heap_alloc>
		rew = 0;
   24bfe:	f04f 0900 	mov.w	r9, #0
   24c02:	e7eb      	b.n	24bdc <sys_heap_aligned_alloc+0x2e>
	if (bytes == 0 || size_too_big(h, bytes)) {
   24c04:	ebb5 0fd4 	cmp.w	r5, r4, lsr #3
   24c08:	d9e9      	bls.n	24bde <sys_heap_aligned_alloc+0x30>
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   24c0a:	1de1      	adds	r1, r4, #7
   24c0c:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   24c10:	4439      	add	r1, r7
   24c12:	bf2c      	ite	cs
   24c14:	2308      	movcs	r3, #8
   24c16:	2304      	movcc	r3, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   24c18:	1a89      	subs	r1, r1, r2
   24c1a:	4419      	add	r1, r3
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   24c1c:	08c9      	lsrs	r1, r1, #3
   24c1e:	4630      	mov	r0, r6
   24c20:	f7ff feb8 	bl	24994 <alloc_chunk>
	if (c0 == 0) {
   24c24:	4680      	mov	r8, r0
   24c26:	2800      	cmp	r0, #0
   24c28:	d0d9      	beq.n	24bde <sys_heap_aligned_alloc+0x30>
	return big_heap(h) ? 8 : 4;
   24c2a:	68b3      	ldr	r3, [r6, #8]
   24c2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   24c30:	bf2c      	ite	cs
   24c32:	2308      	movcs	r3, #8
   24c34:	2304      	movcc	r3, #4
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   24c36:	eb09 05c0 	add.w	r5, r9, r0, lsl #3
   24c3a:	441d      	add	r5, r3
   24c3c:	1e7a      	subs	r2, r7, #1
   24c3e:	4435      	add	r5, r6
   24c40:	427f      	negs	r7, r7
   24c42:	4415      	add	r5, r2
   24c44:	403d      	ands	r5, r7
   24c46:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   24c4a:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   24c4c:	1aeb      	subs	r3, r5, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   24c4e:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   24c50:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   24c52:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   24c56:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   24c58:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   24c5c:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   24c60:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   24c64:	d208      	bcs.n	24c78 <sys_heap_aligned_alloc+0xca>
		split_chunks(h, c0, c);
   24c66:	4601      	mov	r1, r0
   24c68:	463a      	mov	r2, r7
   24c6a:	4630      	mov	r0, r6
   24c6c:	f7ff fe25 	bl	248ba <split_chunks>
		free_list_add(h, c0);
   24c70:	4641      	mov	r1, r8
   24c72:	4630      	mov	r0, r6
   24c74:	f7ff fec7 	bl	24a06 <free_list_add>
	return c + chunk_size(h, c);
   24c78:	4639      	mov	r1, r7
   24c7a:	4630      	mov	r0, r6
   24c7c:	f7ff fdd0 	bl	24820 <chunk_size>
   24c80:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   24c82:	4284      	cmp	r4, r0
   24c84:	d208      	bcs.n	24c98 <sys_heap_aligned_alloc+0xea>
		split_chunks(h, c, c_end);
   24c86:	4639      	mov	r1, r7
   24c88:	4630      	mov	r0, r6
   24c8a:	4622      	mov	r2, r4
   24c8c:	f7ff fe15 	bl	248ba <split_chunks>
		free_list_add(h, c_end);
   24c90:	4621      	mov	r1, r4
   24c92:	4630      	mov	r0, r6
   24c94:	f7ff feb7 	bl	24a06 <free_list_add>
	set_chunk_used(h, c, true);
   24c98:	2201      	movs	r2, #1
   24c9a:	4639      	mov	r1, r7
   24c9c:	4630      	mov	r0, r6
   24c9e:	f7ff fdc5 	bl	2482c <set_chunk_used>
	return mem;
   24ca2:	e79d      	b.n	24be0 <sys_heap_aligned_alloc+0x32>

00024ca4 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   24ca4:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   24ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24caa:	bf2c      	ite	cs
   24cac:	2508      	movcs	r5, #8
   24cae:	2504      	movcc	r5, #4
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   24cb0:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   24cb2:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   24cb4:	440d      	add	r5, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   24cb6:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   24cba:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   24cbe:	1b2d      	subs	r5, r5, r4
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   24cc0:	2300      	movs	r3, #0
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   24cc2:	08ed      	lsrs	r5, r5, #3
	heap->heap = h;
   24cc4:	6004      	str	r4, [r0, #0]

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   24cc6:	4629      	mov	r1, r5
	h->end_chunk = heap_sz;
   24cc8:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
   24cca:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   24ccc:	4620      	mov	r0, r4
   24cce:	f7ff fdc9 	bl	24864 <bucket_idx>
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   24cd2:	0086      	lsls	r6, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   24cd4:	361b      	adds	r6, #27
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   24cd6:	1c41      	adds	r1, r0, #1
   24cd8:	08f6      	lsrs	r6, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   24cda:	f104 0210 	add.w	r2, r4, #16
		h->buckets[i].next = 0;
   24cde:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
   24ce0:	428b      	cmp	r3, r1
   24ce2:	db2f      	blt.n	24d44 <sys_heap_init+0xa0>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   24ce4:	4632      	mov	r2, r6
   24ce6:	4620      	mov	r0, r4
   24ce8:	2100      	movs	r1, #0
   24cea:	f7ff fdb7 	bl	2485c <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   24cee:	2300      	movs	r3, #0
   24cf0:	461a      	mov	r2, r3
   24cf2:	4619      	mov	r1, r3
   24cf4:	4620      	mov	r0, r4
   24cf6:	f7ff fd88 	bl	2480a <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   24cfa:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
   24cfc:	4620      	mov	r0, r4
   24cfe:	2201      	movs	r2, #1
   24d00:	2100      	movs	r1, #0
   24d02:	f7ff fd93 	bl	2482c <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   24d06:	463a      	mov	r2, r7
   24d08:	4631      	mov	r1, r6
   24d0a:	f7ff fda7 	bl	2485c <set_chunk_size>
   24d0e:	4633      	mov	r3, r6
   24d10:	4631      	mov	r1, r6
   24d12:	4620      	mov	r0, r4
   24d14:	2200      	movs	r2, #0
   24d16:	f7ff fd78 	bl	2480a <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
   24d1a:	4629      	mov	r1, r5
   24d1c:	4620      	mov	r0, r4
   24d1e:	2200      	movs	r2, #0
   24d20:	f7ff fd9c 	bl	2485c <set_chunk_size>
   24d24:	463b      	mov	r3, r7
   24d26:	4629      	mov	r1, r5
   24d28:	4620      	mov	r0, r4
   24d2a:	2200      	movs	r2, #0
   24d2c:	f7ff fd6d 	bl	2480a <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
   24d30:	4629      	mov	r1, r5
   24d32:	4620      	mov	r0, r4
   24d34:	2201      	movs	r2, #1
   24d36:	f7ff fd79 	bl	2482c <set_chunk_used>

	free_list_add(h, chunk0_size);
   24d3a:	4631      	mov	r1, r6
}
   24d3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   24d40:	f7ff be61 	b.w	24a06 <free_list_add>
		h->buckets[i].next = 0;
   24d44:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   24d48:	3301      	adds	r3, #1
   24d4a:	e7c9      	b.n	24ce0 <sys_heap_init+0x3c>

00024d4c <outs>:
{
   24d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24d50:	4607      	mov	r7, r0
   24d52:	4688      	mov	r8, r1
   24d54:	4615      	mov	r5, r2
   24d56:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   24d58:	4614      	mov	r4, r2
   24d5a:	42b4      	cmp	r4, r6
   24d5c:	eba4 0005 	sub.w	r0, r4, r5
   24d60:	d302      	bcc.n	24d68 <outs+0x1c>
   24d62:	b93e      	cbnz	r6, 24d74 <outs+0x28>
   24d64:	7823      	ldrb	r3, [r4, #0]
   24d66:	b12b      	cbz	r3, 24d74 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   24d68:	f814 0b01 	ldrb.w	r0, [r4], #1
   24d6c:	4641      	mov	r1, r8
   24d6e:	47b8      	blx	r7
		if (rc < 0) {
   24d70:	2800      	cmp	r0, #0
   24d72:	daf2      	bge.n	24d5a <outs+0xe>
}
   24d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00024d78 <arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   24d78:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   24d7c:	b923      	cbnz	r3, 24d88 <arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   24d7e:	f3ef 8014 	mrs	r0, CONTROL
	return (value & CONTROL_nPRIV_Msk) ? true : false;
   24d82:	f000 0001 	and.w	r0, r0, #1
   24d86:	4770      	bx	lr
		return false;
   24d88:	2000      	movs	r0, #0
}
   24d8a:	4770      	bx	lr

00024d8c <z_impl_z_sys_mutex_kernel_lock>:
{
   24d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24d90:	4615      	mov	r5, r2
   24d92:	461c      	mov	r4, r3
	obj = z_object_find(mutex);
   24d94:	f7db f9b4 	bl	100 <z_object_find>
	if (obj == NULL || obj->type != K_OBJ_SYS_MUTEX) {
   24d98:	b1a8      	cbz	r0, 24dc6 <z_impl_z_sys_mutex_kernel_lock+0x3a>
   24d9a:	7983      	ldrb	r3, [r0, #6]
   24d9c:	2b0e      	cmp	r3, #14
   24d9e:	d112      	bne.n	24dc6 <z_impl_z_sys_mutex_kernel_lock+0x3a>
	return obj->data.mutex;
   24da0:	6881      	ldr	r1, [r0, #8]
	if (kernel_mutex == NULL) {
   24da2:	b181      	cbz	r1, 24dc6 <z_impl_z_sys_mutex_kernel_lock+0x3a>
	ret = arch_is_user_context();
   24da4:	f7ff ffe8 	bl	24d78 <arch_is_user_context>
	if (z_syscall_trap()) {
   24da8:	b130      	cbz	r0, 24db8 <z_impl_z_sys_mutex_kernel_lock+0x2c>
	register uint32_t ret __asm__("r0") = arg1;
   24daa:	4608      	mov	r0, r1
	register uint32_t r2 __asm__("r2") = arg3;
   24dac:	4622      	mov	r2, r4
	register uint32_t r1 __asm__("r1") = arg2;
   24dae:	4629      	mov	r1, r5
	register uint32_t r6 __asm__("r6") = call_id;
   24db0:	2688      	movs	r6, #136	; 0x88
	__asm__ volatile("svc %[svid]\n"
   24db2:	df03      	svc	3
}
   24db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
   24db8:	462a      	mov	r2, r5
   24dba:	4623      	mov	r3, r4
   24dbc:	4608      	mov	r0, r1
   24dbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   24dc2:	f7fb bf41 	b.w	20c48 <z_impl_k_mutex_lock>
		return -EINVAL;
   24dc6:	f06f 0015 	mvn.w	r0, #21
   24dca:	e7f3      	b.n	24db4 <z_impl_z_sys_mutex_kernel_lock+0x28>

00024dcc <z_impl_z_sys_mutex_kernel_unlock>:
{
   24dcc:	e92d 4148 	stmdb	sp!, {r3, r6, r8, lr}
	obj = z_object_find(mutex);
   24dd0:	f7db f996 	bl	100 <z_object_find>
	if (obj == NULL || obj->type != K_OBJ_SYS_MUTEX) {
   24dd4:	b198      	cbz	r0, 24dfe <z_impl_z_sys_mutex_kernel_unlock+0x32>
   24dd6:	7983      	ldrb	r3, [r0, #6]
   24dd8:	2b0e      	cmp	r3, #14
   24dda:	d110      	bne.n	24dfe <z_impl_z_sys_mutex_kernel_unlock+0x32>
	return obj->data.mutex;
   24ddc:	6882      	ldr	r2, [r0, #8]
	if (kernel_mutex == NULL || kernel_mutex->lock_count == 0) {
   24dde:	b172      	cbz	r2, 24dfe <z_impl_z_sys_mutex_kernel_unlock+0x32>
   24de0:	68d3      	ldr	r3, [r2, #12]
   24de2:	b163      	cbz	r3, 24dfe <z_impl_z_sys_mutex_kernel_unlock+0x32>
   24de4:	f7ff ffc8 	bl	24d78 <arch_is_user_context>
	if (z_syscall_trap()) {
   24de8:	b120      	cbz	r0, 24df4 <z_impl_z_sys_mutex_kernel_unlock+0x28>
	register uint32_t ret __asm__("r0") = arg1;
   24dea:	4610      	mov	r0, r2
	register uint32_t r6 __asm__("r6") = call_id;
   24dec:	2689      	movs	r6, #137	; 0x89
	__asm__ volatile("svc %[svid]\n"
   24dee:	df03      	svc	3
}
   24df0:	e8bd 8148 	ldmia.w	sp!, {r3, r6, r8, pc}
   24df4:	e8bd 4148 	ldmia.w	sp!, {r3, r6, r8, lr}
	return z_impl_k_mutex_unlock(mutex);
   24df8:	4610      	mov	r0, r2
   24dfa:	f7fb bfdf 	b.w	20dbc <z_impl_k_mutex_unlock>
		return -EINVAL;
   24dfe:	f06f 0015 	mvn.w	r0, #21
   24e02:	e7f5      	b.n	24df0 <z_impl_z_sys_mutex_kernel_unlock+0x24>

00024e04 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   24e04:	4770      	bx	lr

00024e06 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   24e06:	2300      	movs	r3, #0
	list->head = NULL;
   24e08:	e9c0 3300 	strd	r3, r3, [r0]
}
   24e0c:	4770      	bx	lr

00024e0e <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   24e0e:	6803      	ldr	r3, [r0, #0]
   24e10:	b923      	cbnz	r3, 24e1c <log_list_add_tail+0xe>
		list->head = msg;
   24e12:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   24e14:	2300      	movs	r3, #0
	list->tail = msg;
   24e16:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   24e18:	600b      	str	r3, [r1, #0]
}
   24e1a:	4770      	bx	lr
		list->tail->next = msg;
   24e1c:	6843      	ldr	r3, [r0, #4]
   24e1e:	6019      	str	r1, [r3, #0]
   24e20:	e7f8      	b.n	24e14 <log_list_add_tail+0x6>

00024e22 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   24e22:	6800      	ldr	r0, [r0, #0]
   24e24:	4770      	bx	lr

00024e26 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   24e26:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   24e28:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   24e2a:	b108      	cbz	r0, 24e30 <log_list_head_get+0xa>
		list->head = list->head->next;
   24e2c:	6802      	ldr	r2, [r0, #0]
   24e2e:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   24e30:	4770      	bx	lr

00024e32 <arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   24e32:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   24e36:	b923      	cbnz	r3, 24e42 <arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   24e38:	f3ef 8014 	mrs	r0, CONTROL
	return (value & CONTROL_nPRIV_Msk) ? true : false;
   24e3c:	f000 0001 	and.w	r0, r0, #1
   24e40:	4770      	bx	lr
		return false;
   24e42:	2000      	movs	r0, #0
}
   24e44:	4770      	bx	lr

00024e46 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   24e46:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   24e48:	f7df fe00 	bl	4a4c <log_msg_chunk_alloc>

	if (msg != NULL) {
   24e4c:	b118      	cbz	r0, 24e56 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
		msg->hdr.params.raw = 0U;
   24e4e:	2201      	movs	r2, #1
   24e50:	2300      	movs	r3, #0
   24e52:	e9c0 2301 	strd	r2, r3, [r0, #4]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   24e56:	bd08      	pop	{r3, pc}

00024e58 <k_cycle_get_32_wrapper>:
   24e58:	f7e0 bdd4 	b.w	5a04 <sys_clock_cycle_get_32>

00024e5c <log_process_thread_timer_expiry_fn>:
	k_sem_give(&log_process_thread_sem);
   24e5c:	f7df b862 	b.w	3f24 <k_sem_give.constprop.0>

00024e60 <dummy_timestamp>:
   24e60:	2000      	movs	r0, #0
   24e62:	4770      	bx	lr

00024e64 <log_generic_from_user>:
{
   24e64:	e92d 4150 	stmdb	sp!, {r4, r6, r8, lr}
   24e68:	b092      	sub	sp, #72	; 0x48
   24e6a:	4604      	mov	r4, r0
   24e6c:	4613      	mov	r3, r2
	vsnprintk(buffer, sizeof(buffer), fmt, ap);
   24e6e:	a801      	add	r0, sp, #4
   24e70:	460a      	mov	r2, r1
   24e72:	2143      	movs	r1, #67	; 0x43
   24e74:	f7de faf2 	bl	345c <vsnprintk>
	src_level_union.structure = src_level;
   24e78:	2200      	movs	r2, #0
   24e7a:	f364 020f 	bfi	r2, r4, #0, #16
   24e7e:	f7ff ffd8 	bl	24e32 <arch_is_user_context>

extern void z_impl_z_log_string_from_user(uint32_t src_level_val, const char * str);
static inline void z_log_string_from_user(uint32_t src_level_val, const char * str)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
   24e82:	b138      	cbz	r0, 24e94 <log_generic_from_user+0x30>
	register uint32_t ret __asm__("r0") = arg1;
   24e84:	4610      	mov	r0, r2
	register uint32_t r1 __asm__("r1") = arg2;
   24e86:	a901      	add	r1, sp, #4
	register uint32_t r6 __asm__("r6") = call_id;
   24e88:	f240 162d 	movw	r6, #301	; 0x12d
	__asm__ volatile("svc %[svid]\n"
   24e8c:	df03      	svc	3
}
   24e8e:	b012      	add	sp, #72	; 0x48
   24e90:	e8bd 8150 	ldmia.w	sp!, {r4, r6, r8, pc}
   24e94:	e7fb      	b.n	24e8e <log_generic_from_user+0x2a>

00024e96 <log_from_user>:
{
   24e96:	b40e      	push	{r1, r2, r3}
   24e98:	b503      	push	{r0, r1, lr}
   24e9a:	aa03      	add	r2, sp, #12
   24e9c:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, fmt);
   24ea0:	9201      	str	r2, [sp, #4]
	log_generic_from_user(src_level, fmt, ap);
   24ea2:	f7ff ffdf 	bl	24e64 <log_generic_from_user>
}
   24ea6:	b002      	add	sp, #8
   24ea8:	f85d eb04 	ldr.w	lr, [sp], #4
   24eac:	b003      	add	sp, #12
   24eae:	4770      	bx	lr

00024eb0 <log_process.constprop.0>:
static inline bool log_process(bool bypass)
   24eb0:	e92d 4147 	stmdb	sp!, {r0, r1, r2, r6, r8, lr}
   24eb4:	2300      	movs	r3, #0
   24eb6:	f88d 3007 	strb.w	r3, [sp, #7]
   24eba:	f7ff ffba 	bl	24e32 <arch_is_user_context>
	if (z_syscall_trap()) {
   24ebe:	b148      	cbz	r0, 24ed4 <log_process.constprop.0+0x24>
	register uint32_t ret __asm__("r0") = arg1;
   24ec0:	f8dd 0007 	ldr.w	r0, [sp, #7]
	register uint32_t r6 __asm__("r6") = call_id;
   24ec4:	26d0      	movs	r6, #208	; 0xd0
	__asm__ volatile("svc %[svid]\n"
   24ec6:	df03      	svc	3
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
   24ec8:	3800      	subs	r0, #0
   24eca:	bf18      	it	ne
   24ecc:	2001      	movne	r0, #1
}
   24ece:	b003      	add	sp, #12
   24ed0:	e8bd 8140 	ldmia.w	sp!, {r6, r8, pc}
	return z_impl_log_process(bypass);
   24ed4:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
   24ed8:	b003      	add	sp, #12
   24eda:	e8bd 4140 	ldmia.w	sp!, {r6, r8, lr}
	return z_impl_log_process(bypass);
   24ede:	f7df b9b7 	b.w	4250 <z_impl_log_process>

00024ee2 <log_0>:
{
   24ee2:	b538      	push	{r3, r4, r5, lr}
   24ee4:	4605      	mov	r5, r0
   24ee6:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   24ee8:	f7ff ffad 	bl	24e46 <z_log_msg_std_alloc>

	if (msg != NULL) {
   24eec:	b128      	cbz	r0, 24efa <log_0+0x18>
		msg->str = str;
   24eee:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   24ef0:	4621      	mov	r1, r4
}
   24ef2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   24ef6:	f7df bae9 	b.w	44cc <msg_finalize>
}
   24efa:	bd38      	pop	{r3, r4, r5, pc}

00024efc <log_1>:
{
   24efc:	b570      	push	{r4, r5, r6, lr}
   24efe:	4606      	mov	r6, r0
   24f00:	460d      	mov	r5, r1
   24f02:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   24f04:	f7ff ff9f 	bl	24e46 <z_log_msg_std_alloc>

	if (msg != NULL) {
   24f08:	b158      	cbz	r0, 24f22 <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   24f0a:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   24f0c:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   24f0e:	2101      	movs	r1, #1
   24f10:	f361 1207 	bfi	r2, r1, #4, #4
   24f14:	7242      	strb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   24f16:	6145      	str	r5, [r0, #20]
		msg_finalize(msg, src_level);
   24f18:	4621      	mov	r1, r4
}
   24f1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   24f1e:	f7df bad5 	b.w	44cc <msg_finalize>
}
   24f22:	bd70      	pop	{r4, r5, r6, pc}

00024f24 <log_2>:
{
   24f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24f28:	4680      	mov	r8, r0
   24f2a:	460f      	mov	r7, r1
   24f2c:	4616      	mov	r6, r2
   24f2e:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   24f30:	f7ff ff89 	bl	24e46 <z_log_msg_std_alloc>

	if (msg != NULL) {
   24f34:	b168      	cbz	r0, 24f52 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   24f36:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   24f38:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   24f3c:	2202      	movs	r2, #2
   24f3e:	f362 1307 	bfi	r3, r2, #4, #4
   24f42:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   24f44:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg_finalize(msg, src_level);
   24f48:	4629      	mov	r1, r5
}
   24f4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   24f4e:	f7df babd 	b.w	44cc <msg_finalize>
}
   24f52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00024f56 <log_3>:
{
   24f56:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24f5a:	4680      	mov	r8, r0
   24f5c:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   24f60:	460f      	mov	r7, r1
   24f62:	4616      	mov	r6, r2
   24f64:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   24f66:	f7ff ff6e 	bl	24e46 <z_log_msg_std_alloc>

	if (msg != NULL) {
   24f6a:	b170      	cbz	r0, 24f8a <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   24f6c:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   24f6e:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   24f72:	2203      	movs	r2, #3
   24f74:	f362 1307 	bfi	r3, r2, #4, #4
   24f78:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   24f7a:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->payload.single.args[2] = arg3;
   24f7e:	61c5      	str	r5, [r0, #28]
		msg_finalize(msg, src_level);
   24f80:	4649      	mov	r1, r9
}
   24f82:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   24f86:	f7df baa1 	b.w	44cc <msg_finalize>
}
   24f8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00024f8e <log_n>:
{
   24f8e:	b510      	push	{r4, lr}
   24f90:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   24f92:	f000 f8e6 	bl	25162 <log_msg_create_n>
		if (msg == NULL) {
   24f96:	b120      	cbz	r0, 24fa2 <log_n+0x14>
		msg_finalize(msg, src_level);
   24f98:	4621      	mov	r1, r4
}
   24f9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   24f9e:	f7df ba95 	b.w	44cc <msg_finalize>
}
   24fa2:	bd10      	pop	{r4, pc}

00024fa4 <log_hexdump>:
{
   24fa4:	b510      	push	{r4, lr}
   24fa6:	461c      	mov	r4, r3
			log_msg_hexdump_create(str, (const uint8_t *)data, length);
   24fa8:	f000 f937 	bl	2521a <log_msg_hexdump_create>
		if (msg == NULL) {
   24fac:	b120      	cbz	r0, 24fb8 <log_hexdump+0x14>
		msg_finalize(msg, src_level);
   24fae:	4621      	mov	r1, r4
}
   24fb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   24fb4:	f7df ba8a 	b.w	44cc <msg_finalize>
}
   24fb8:	bd10      	pop	{r4, pc}

00024fba <log_printk>:
{
   24fba:	e92d 4150 	stmdb	sp!, {r4, r6, r8, lr}
   24fbe:	b0a2      	sub	sp, #136	; 0x88
   24fc0:	4602      	mov	r2, r0
	return arch_is_user_context();
   24fc2:	f7ff ff36 	bl	24e32 <arch_is_user_context>
		if (k_is_user_context()) {
   24fc6:	4604      	mov	r4, r0
			vsnprintk(str, sizeof(str), fmt, ap);
   24fc8:	460b      	mov	r3, r1
   24fca:	a801      	add	r0, sp, #4
   24fcc:	2181      	movs	r1, #129	; 0x81
		if (k_is_user_context()) {
   24fce:	b16c      	cbz	r4, 24fec <log_printk+0x32>
			vsnprintk(str, sizeof(str), fmt, ap);
   24fd0:	f7de fa44 	bl	345c <vsnprintk>
	ret = arch_is_user_context();
   24fd4:	f7ff ff2d 	bl	24e32 <arch_is_user_context>
   24fd8:	b138      	cbz	r0, 24fea <log_printk+0x30>
	register uint32_t ret __asm__("r0") = arg1;
   24fda:	2000      	movs	r0, #0
	register uint32_t r1 __asm__("r1") = arg2;
   24fdc:	a901      	add	r1, sp, #4
	register uint32_t r6 __asm__("r6") = call_id;
   24fde:	f240 162d 	movw	r6, #301	; 0x12d
	__asm__ volatile("svc %[svid]\n"
   24fe2:	df03      	svc	3
}
   24fe4:	b022      	add	sp, #136	; 0x88
   24fe6:	e8bd 8150 	ldmia.w	sp!, {r4, r6, r8, pc}
}
   24fea:	e7fb      	b.n	24fe4 <log_printk+0x2a>
			length = vsnprintk(str, sizeof(str), fmt, ap);
   24fec:	f7de fa36 	bl	345c <vsnprintk>
			msg = log_msg_hexdump_create(NULL, str, length);
   24ff0:	2881      	cmp	r0, #129	; 0x81
   24ff2:	4602      	mov	r2, r0
   24ff4:	a901      	add	r1, sp, #4
   24ff6:	bf28      	it	cs
   24ff8:	2281      	movcs	r2, #129	; 0x81
   24ffa:	4620      	mov	r0, r4
   24ffc:	f000 f90d 	bl	2521a <log_msg_hexdump_create>
			if (msg == NULL) {
   25000:	2800      	cmp	r0, #0
   25002:	d0ef      	beq.n	24fe4 <log_printk+0x2a>
			msg_finalize(msg, src_level_union.structure);
   25004:	4621      	mov	r1, r4
   25006:	f7df fa61 	bl	44cc <msg_finalize>
   2500a:	e7eb      	b.n	24fe4 <log_printk+0x2a>

0002500c <log_hexdump_from_user>:
{
   2500c:	e92d 4178 	stmdb	sp!, {r3, r4, r5, r6, r8, lr}
	src_level_union.structure = src_level;
   25010:	2500      	movs	r5, #0
{
   25012:	461c      	mov	r4, r3
	src_level_union.structure = src_level;
   25014:	f360 050f 	bfi	r5, r0, #0, #16
   25018:	f7ff ff0b 	bl	24e32 <arch_is_user_context>

extern void z_impl_z_log_hexdump_from_user(uint32_t src_level_val, const char * metadata, const uint8_t * data, uint32_t len);
static inline void z_log_hexdump_from_user(uint32_t src_level_val, const char * metadata, const uint8_t * data, uint32_t len)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
   2501c:	b130      	cbz	r0, 2502c <log_hexdump_from_user+0x20>
	register uint32_t ret __asm__("r0") = arg1;
   2501e:	4628      	mov	r0, r5
	register uint32_t r3 __asm__("r3") = arg4;
   25020:	4623      	mov	r3, r4
	register uint32_t r6 __asm__("r6") = call_id;
   25022:	f44f 7696 	mov.w	r6, #300	; 0x12c
	__asm__ volatile("svc %[svid]\n"
   25026:	df03      	svc	3
}
   25028:	e8bd 8178 	ldmia.w	sp!, {r3, r4, r5, r6, r8, pc}
   2502c:	e7fc      	b.n	25028 <log_hexdump_from_user+0x1c>

0002502e <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   2502e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25032:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   25034:	8903      	ldrh	r3, [r0, #8]
{
   25036:	f89d 8020 	ldrb.w	r8, [sp, #32]
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   2503a:	ebb4 0f93 	cmp.w	r4, r3, lsr #2
{
   2503e:	460e      	mov	r6, r1
   25040:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
   25042:	ea4f 0293 	mov.w	r2, r3, lsr #2
	if (offset >= available_len) {
   25046:	d303      	bcc.n	25050 <log_msg_hexdump_data_op+0x22>
		*length = 0;
   25048:	2300      	movs	r3, #0
   2504a:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   2504c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   25050:	680b      	ldr	r3, [r1, #0]
   25052:	4423      	add	r3, r4
   25054:	4293      	cmp	r3, r2
		*length = available_len - offset;
   25056:	bf84      	itt	hi
   25058:	1b13      	subhi	r3, r2, r4
   2505a:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   2505c:	2a0c      	cmp	r2, #12
	req_len = *length;
   2505e:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   25062:	d92b      	bls.n	250bc <log_msg_hexdump_data_op+0x8e>
	if (offset < chunk_len) {
   25064:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   25066:	6947      	ldr	r7, [r0, #20]
	if (offset < chunk_len) {
   25068:	d82e      	bhi.n	250c8 <log_msg_hexdump_data_op+0x9a>
		head_data = msg->payload.ext.data.bytes;
   2506a:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   2506c:	2208      	movs	r2, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   2506e:	454a      	cmp	r2, r9
   25070:	bf28      	it	cs
   25072:	464a      	movcs	r2, r9
   25074:	4615      	mov	r5, r2
		if (put_op) {
   25076:	4420      	add	r0, r4
   25078:	f1b8 0f00 	cmp.w	r8, #0
   2507c:	d021      	beq.n	250c2 <log_msg_hexdump_data_op+0x94>
   2507e:	4631      	mov	r1, r6
   25080:	f005 f9ae 	bl	2a3e0 <memcpy>
		req_len -= cpy_len;
   25084:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   25088:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   2508a:	f1b9 0f00 	cmp.w	r9, #0
   2508e:	d0dd      	beq.n	2504c <log_msg_hexdump_data_op+0x1e>
   25090:	2f00      	cmp	r7, #0
   25092:	d0db      	beq.n	2504c <log_msg_hexdump_data_op+0x1e>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   25094:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   25098:	454d      	cmp	r5, r9
   2509a:	bf28      	it	cs
   2509c:	464d      	movcs	r5, r9
		if (put_op) {
   2509e:	1d20      	adds	r0, r4, #4
   250a0:	4438      	add	r0, r7
   250a2:	462a      	mov	r2, r5
   250a4:	f1b8 0f00 	cmp.w	r8, #0
   250a8:	d014      	beq.n	250d4 <log_msg_hexdump_data_op+0xa6>
   250aa:	4631      	mov	r1, r6
   250ac:	f005 f998 	bl	2a3e0 <memcpy>
		req_len -= cpy_len;
   250b0:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   250b4:	683f      	ldr	r7, [r7, #0]
		data += cpy_len;
   250b6:	442e      	add	r6, r5
		offset = 0;
   250b8:	2400      	movs	r4, #0
   250ba:	e7e6      	b.n	2508a <log_msg_hexdump_data_op+0x5c>
		head_data = msg->payload.single.bytes;
   250bc:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   250be:	2700      	movs	r7, #0
   250c0:	e7d5      	b.n	2506e <log_msg_hexdump_data_op+0x40>
   250c2:	4601      	mov	r1, r0
   250c4:	4630      	mov	r0, r6
   250c6:	e7db      	b.n	25080 <log_msg_hexdump_data_op+0x52>
		offset -= chunk_len;
   250c8:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   250ca:	2c1b      	cmp	r4, #27
   250cc:	d9dd      	bls.n	2508a <log_msg_hexdump_data_op+0x5c>
			cont = cont->next;
   250ce:	683f      	ldr	r7, [r7, #0]
			offset -= chunk_len;
   250d0:	3c1c      	subs	r4, #28
   250d2:	e7fa      	b.n	250ca <log_msg_hexdump_data_op+0x9c>
   250d4:	4601      	mov	r1, r0
   250d6:	4630      	mov	r0, r6
   250d8:	e7e8      	b.n	250ac <log_msg_hexdump_data_op+0x7e>

000250da <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   250da:	3004      	adds	r0, #4
   250dc:	f3bf 8f5b 	dmb	ish
   250e0:	e850 3f00 	ldrex	r3, [r0]
   250e4:	3301      	adds	r3, #1
   250e6:	e840 3200 	strex	r2, r3, [r0]
   250ea:	2a00      	cmp	r2, #0
   250ec:	d1f8      	bne.n	250e0 <log_msg_get+0x6>
   250ee:	f3bf 8f5b 	dmb	ish
}
   250f2:	4770      	bx	lr

000250f4 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   250f4:	7a40      	ldrb	r0, [r0, #9]
}
   250f6:	0900      	lsrs	r0, r0, #4
   250f8:	4770      	bx	lr

000250fa <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   250fa:	7a43      	ldrb	r3, [r0, #9]
   250fc:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   25100:	ea4f 1213 	mov.w	r2, r3, lsr #4
   25104:	d216      	bcs.n	25134 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   25106:	2a03      	cmp	r2, #3
   25108:	d803      	bhi.n	25112 <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   2510a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   2510e:	6948      	ldr	r0, [r1, #20]
   25110:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   25112:	2901      	cmp	r1, #1
   25114:	d803      	bhi.n	2511e <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   25116:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   2511a:	6988      	ldr	r0, [r1, #24]
   2511c:	4770      	bx	lr
	cont = msg->payload.ext.next;
   2511e:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   25120:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   25122:	2906      	cmp	r1, #6
   25124:	d803      	bhi.n	2512e <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   25126:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   2512a:	6848      	ldr	r0, [r1, #4]
   2512c:	4770      	bx	lr
		cont = cont->next;
   2512e:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   25130:	3907      	subs	r1, #7
		cont = cont->next;
   25132:	e7f6      	b.n	25122 <log_msg_arg_get+0x28>
		return 0;
   25134:	2000      	movs	r0, #0
}
   25136:	4770      	bx	lr

00025138 <log_msg_put>:
{
   25138:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   2513a:	1d02      	adds	r2, r0, #4
   2513c:	f3bf 8f5b 	dmb	ish
   25140:	e852 1f00 	ldrex	r1, [r2]
   25144:	3901      	subs	r1, #1
   25146:	e842 1c00 	strex	ip, r1, [r2]
   2514a:	f1bc 0f00 	cmp.w	ip, #0
   2514e:	d1f7      	bne.n	25140 <log_msg_put+0x8>
   25150:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   25154:	685b      	ldr	r3, [r3, #4]
   25156:	b90b      	cbnz	r3, 2515c <log_msg_put+0x24>
		msg_free(msg);
   25158:	f7df bc8c 	b.w	4a74 <msg_free>
}
   2515c:	4770      	bx	lr

0002515e <log_msg_str_get>:
}
   2515e:	6900      	ldr	r0, [r0, #16]
   25160:	4770      	bx	lr

00025162 <log_msg_create_n>:
{
   25162:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25166:	4681      	mov	r9, r0
   25168:	460e      	mov	r6, r1
   2516a:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   2516c:	f7df fc6e 	bl	4a4c <log_msg_chunk_alloc>
	if (msg != NULL) {
   25170:	4604      	mov	r4, r0
   25172:	b368      	cbz	r0, 251d0 <log_msg_create_n+0x6e>
		msg->hdr.params.raw = 0U;
   25174:	2201      	movs	r2, #1
   25176:	2300      	movs	r3, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   25178:	2d03      	cmp	r5, #3
   2517a:	e9c0 2301 	strd	r2, r3, [r0, #4]
   2517e:	d910      	bls.n	251a2 <log_msg_create_n+0x40>
	msg->hdr.params.generic.ext = 1;
   25180:	8902      	ldrh	r2, [r0, #8]
	*next = NULL;
   25182:	6143      	str	r3, [r0, #20]
	msg->hdr.params.generic.ext = 1;
   25184:	f022 0202 	bic.w	r2, r2, #2
   25188:	0512      	lsls	r2, r2, #20
   2518a:	0d12      	lsrs	r2, r2, #20
   2518c:	f042 0202 	orr.w	r2, r2, #2
   25190:	8102      	strh	r2, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   25192:	f1a5 0a02 	sub.w	sl, r5, #2
	next = &msg->payload.ext.next;
   25196:	f100 0b14 	add.w	fp, r0, #20
	while (n > 0) {
   2519a:	4698      	mov	r8, r3
   2519c:	f1ba 0f00 	cmp.w	sl, #0
   251a0:	dc0e      	bgt.n	251c0 <log_msg_create_n+0x5e>
		msg->hdr.params.std.nargs = nargs;
   251a2:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
   251a4:	f8c4 9010 	str.w	r9, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   251a8:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   251ac:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   251ae:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   251b0:	d819      	bhi.n	251e6 <log_msg_create_n+0x84>
   251b2:	00aa      	lsls	r2, r5, #2
   251b4:	4631      	mov	r1, r6
   251b6:	f104 0014 	add.w	r0, r4, #20
   251ba:	f005 f911 	bl	2a3e0 <memcpy>
	while (nargs != 0U) {
   251be:	e007      	b.n	251d0 <log_msg_create_n+0x6e>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   251c0:	f7df fc44 	bl	4a4c <log_msg_chunk_alloc>
		if (cont == NULL) {
   251c4:	4607      	mov	r7, r0
   251c6:	b930      	cbnz	r0, 251d6 <log_msg_create_n+0x74>
			msg_free(msg);
   251c8:	4620      	mov	r0, r4
   251ca:	f7df fc53 	bl	4a74 <msg_free>
			return NULL;
   251ce:	463c      	mov	r4, r7
}
   251d0:	4620      	mov	r0, r4
   251d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   251d6:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   251da:	f1aa 0a07 	sub.w	sl, sl, #7
   251de:	f8c0 8000 	str.w	r8, [r0]
		next = &cont->next;
   251e2:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
   251e4:	e7da      	b.n	2519c <log_msg_create_n+0x3a>
   251e6:	6833      	ldr	r3, [r6, #0]
   251e8:	61a3      	str	r3, [r4, #24]
   251ea:	6873      	ldr	r3, [r6, #4]
	struct log_msg_cont *cont = msg->payload.ext.next;
   251ec:	f8d4 8014 	ldr.w	r8, [r4, #20]
   251f0:	61e3      	str	r3, [r4, #28]
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   251f2:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   251f4:	3608      	adds	r6, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   251f6:	2d07      	cmp	r5, #7
   251f8:	462f      	mov	r7, r5
   251fa:	bf28      	it	cs
   251fc:	2707      	movcs	r7, #7
		(void)memcpy(cont->payload.args, args,
   251fe:	ea4f 0987 	mov.w	r9, r7, lsl #2
   25202:	4631      	mov	r1, r6
   25204:	f108 0004 	add.w	r0, r8, #4
   25208:	464a      	mov	r2, r9
   2520a:	f005 f8e9 	bl	2a3e0 <memcpy>
	while (nargs != 0U) {
   2520e:	1bed      	subs	r5, r5, r7
		cont = cont->next;
   25210:	f8d8 8000 	ldr.w	r8, [r8]
		args += cpy_args;
   25214:	444e      	add	r6, r9
	while (nargs != 0U) {
   25216:	d1ee      	bne.n	251f6 <log_msg_create_n+0x94>
   25218:	e7da      	b.n	251d0 <log_msg_create_n+0x6e>

0002521a <log_msg_hexdump_create>:
{
   2521a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   2521e:	f643 75ff 	movw	r5, #16383	; 0x3fff
   25222:	4295      	cmp	r5, r2
{
   25224:	4680      	mov	r8, r0
   25226:	460e      	mov	r6, r1
   25228:	4617      	mov	r7, r2
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   2522a:	bf28      	it	cs
   2522c:	4615      	movcs	r5, r2
	msg = (struct log_msg *)log_msg_chunk_alloc();
   2522e:	f7df fc0d 	bl	4a4c <log_msg_chunk_alloc>
	if (msg == NULL) {
   25232:	4604      	mov	r4, r0
   25234:	b378      	cbz	r0, 25296 <log_msg_hexdump_create+0x7c>
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   25236:	8902      	ldrh	r2, [r0, #8]
	msg->str = str;
   25238:	f8c0 8010 	str.w	r8, [r0, #16]
	msg->hdr.ref_cnt = 1;
   2523c:	2301      	movs	r3, #1
   2523e:	6043      	str	r3, [r0, #4]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   25240:	00ab      	lsls	r3, r5, #2
   25242:	f043 0301 	orr.w	r3, r3, #1
   25246:	f002 0202 	and.w	r2, r2, #2
   2524a:	4313      	orrs	r3, r2
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   2524c:	2f0c      	cmp	r7, #12
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   2524e:	8103      	strh	r3, [r0, #8]
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   25250:	f100 0814 	add.w	r8, r0, #20
   25254:	d916      	bls.n	25284 <log_msg_hexdump_create+0x6a>
   25256:	6833      	ldr	r3, [r6, #0]
		msg->hdr.params.generic.ext = 1;
   25258:	7a02      	ldrb	r2, [r0, #8]
   2525a:	6183      	str	r3, [r0, #24]
   2525c:	6873      	ldr	r3, [r6, #4]
   2525e:	61c3      	str	r3, [r0, #28]
   25260:	f042 0202 	orr.w	r2, r2, #2
		msg->payload.ext.next = NULL;
   25264:	2300      	movs	r3, #0
   25266:	6143      	str	r3, [r0, #20]
		msg->hdr.params.generic.ext = 1;
   25268:	7202      	strb	r2, [r0, #8]
		data += LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   2526a:	3608      	adds	r6, #8
		length -= LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   2526c:	3d08      	subs	r5, #8
	while (length > 0) {
   2526e:	4699      	mov	r9, r3
   25270:	b18d      	cbz	r5, 25296 <log_msg_hexdump_create+0x7c>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   25272:	f7df fbeb 	bl	4a4c <log_msg_chunk_alloc>
		if (cont == NULL) {
   25276:	4607      	mov	r7, r0
   25278:	b980      	cbnz	r0, 2529c <log_msg_hexdump_create+0x82>
			msg_free(msg);
   2527a:	4620      	mov	r0, r4
   2527c:	f7df fbfa 	bl	4a74 <msg_free>
			return NULL;
   25280:	463c      	mov	r4, r7
   25282:	e008      	b.n	25296 <log_msg_hexdump_create+0x7c>
   25284:	462a      	mov	r2, r5
   25286:	4631      	mov	r1, r6
   25288:	4640      	mov	r0, r8
   2528a:	f005 f8a9 	bl	2a3e0 <memcpy>
		msg->hdr.params.generic.ext = 0;
   2528e:	7a23      	ldrb	r3, [r4, #8]
   25290:	f36f 0341 	bfc	r3, #1, #1
   25294:	7223      	strb	r3, [r4, #8]
}
   25296:	4620      	mov	r0, r4
   25298:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		chunk_length = (length > HEXDUMP_BYTES_CONT_MSG) ?
   2529c:	2d1c      	cmp	r5, #28
   2529e:	462f      	mov	r7, r5
   252a0:	bf28      	it	cs
   252a2:	271c      	movcs	r7, #28
		*prev_cont = cont;
   252a4:	f8c8 0000 	str.w	r0, [r8]
   252a8:	4631      	mov	r1, r6
		cont->next = NULL;
   252aa:	f8c0 9000 	str.w	r9, [r0]
		prev_cont = &cont->next;
   252ae:	4680      	mov	r8, r0
   252b0:	463a      	mov	r2, r7
   252b2:	3004      	adds	r0, #4
   252b4:	f005 f894 	bl	2a3e0 <memcpy>
		data += chunk_length;
   252b8:	443e      	add	r6, r7
		length -= chunk_length;
   252ba:	1bed      	subs	r5, r5, r7
   252bc:	e7d8      	b.n	25270 <log_msg_hexdump_create+0x56>

000252be <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   252be:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   252c0:	2400      	movs	r4, #0
   252c2:	9400      	str	r4, [sp, #0]
   252c4:	f7ff feb3 	bl	2502e <log_msg_hexdump_data_op>
}
   252c8:	b002      	add	sp, #8
   252ca:	bd10      	pop	{r4, pc}

000252cc <buffer_write>:
{
   252cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   252ce:	4606      	mov	r6, r0
   252d0:	460d      	mov	r5, r1
   252d2:	4614      	mov	r4, r2
   252d4:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   252d6:	4621      	mov	r1, r4
   252d8:	4628      	mov	r0, r5
   252da:	463a      	mov	r2, r7
   252dc:	47b0      	blx	r6
	} while (len != 0);
   252de:	1a24      	subs	r4, r4, r0
		buf += processed;
   252e0:	4405      	add	r5, r0
	} while (len != 0);
   252e2:	d1f8      	bne.n	252d6 <buffer_write+0xa>
}
   252e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000252e6 <std_print>:
{
   252e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   252ea:	b08e      	sub	sp, #56	; 0x38
   252ec:	af0e      	add	r7, sp, #56	; 0x38
   252ee:	4680      	mov	r8, r0
   252f0:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   252f2:	f7ff ff34 	bl	2515e <log_msg_str_get>
   252f6:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   252f8:	4640      	mov	r0, r8
   252fa:	f7ff fefb 	bl	250f4 <log_msg_nargs_get>
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   252fe:	0083      	lsls	r3, r0, #2
   25300:	3307      	adds	r3, #7
   25302:	f023 0307 	bic.w	r3, r3, #7
   25306:	ebad 0d03 	sub.w	sp, sp, r3
	uint32_t nargs = log_msg_nargs_get(msg);
   2530a:	4682      	mov	sl, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   2530c:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   2530e:	f04f 0900 	mov.w	r9, #0
   25312:	45d1      	cmp	r9, sl
   25314:	d116      	bne.n	25344 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   25316:	4640      	mov	r0, r8
   25318:	f7ff feec 	bl	250f4 <log_msg_nargs_get>
   2531c:	280f      	cmp	r0, #15
   2531e:	d81e      	bhi.n	2535e <std_print+0x78>
   25320:	e8df f010 	tbh	[pc, r0, lsl #1]
   25324:	00200019 	.word	0x00200019
   25328:	002d0026 	.word	0x002d0026
   2532c:	00410036 	.word	0x00410036
   25330:	005d004e 	.word	0x005d004e
   25334:	0081006e 	.word	0x0081006e
   25338:	00ad0096 	.word	0x00ad0096
   2533c:	00e100c6 	.word	0x00e100c6
   25340:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
   25344:	4649      	mov	r1, r9
   25346:	4640      	mov	r0, r8
   25348:	f7ff fed7 	bl	250fa <log_msg_arg_get>
   2534c:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   25350:	f109 0901 	add.w	r9, r9, #1
   25354:	e7dd      	b.n	25312 <std_print+0x2c>
		print_formatted(output, str);
   25356:	4631      	mov	r1, r6
   25358:	4628      	mov	r0, r5
   2535a:	f7df fbd7 	bl	4b0c <print_formatted>
}
   2535e:	46bd      	mov	sp, r7
   25360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
   25364:	6822      	ldr	r2, [r4, #0]
   25366:	4631      	mov	r1, r6
   25368:	4628      	mov	r0, r5
   2536a:	f7df fbcf 	bl	4b0c <print_formatted>
		break;
   2536e:	e7f6      	b.n	2535e <std_print+0x78>
		print_formatted(output, str, args[0], args[1]);
   25370:	e9d4 2300 	ldrd	r2, r3, [r4]
   25374:	4631      	mov	r1, r6
   25376:	4628      	mov	r0, r5
   25378:	f7df fbc8 	bl	4b0c <print_formatted>
		break;
   2537c:	e7ef      	b.n	2535e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2]);
   2537e:	68a3      	ldr	r3, [r4, #8]
   25380:	9300      	str	r3, [sp, #0]
   25382:	e9d4 2300 	ldrd	r2, r3, [r4]
   25386:	4631      	mov	r1, r6
   25388:	4628      	mov	r0, r5
   2538a:	f7df fbbf 	bl	4b0c <print_formatted>
		break;
   2538e:	e7e6      	b.n	2535e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   25390:	68e3      	ldr	r3, [r4, #12]
   25392:	9301      	str	r3, [sp, #4]
   25394:	68a3      	ldr	r3, [r4, #8]
   25396:	9300      	str	r3, [sp, #0]
   25398:	e9d4 2300 	ldrd	r2, r3, [r4]
   2539c:	4631      	mov	r1, r6
   2539e:	4628      	mov	r0, r5
   253a0:	f7df fbb4 	bl	4b0c <print_formatted>
		break;
   253a4:	e7db      	b.n	2535e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   253a6:	6923      	ldr	r3, [r4, #16]
   253a8:	9302      	str	r3, [sp, #8]
   253aa:	68e3      	ldr	r3, [r4, #12]
   253ac:	9301      	str	r3, [sp, #4]
   253ae:	68a3      	ldr	r3, [r4, #8]
   253b0:	9300      	str	r3, [sp, #0]
   253b2:	e9d4 2300 	ldrd	r2, r3, [r4]
   253b6:	4631      	mov	r1, r6
   253b8:	4628      	mov	r0, r5
   253ba:	f7df fba7 	bl	4b0c <print_formatted>
		break;
   253be:	e7ce      	b.n	2535e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   253c0:	6963      	ldr	r3, [r4, #20]
   253c2:	9303      	str	r3, [sp, #12]
   253c4:	6923      	ldr	r3, [r4, #16]
   253c6:	9302      	str	r3, [sp, #8]
   253c8:	68e3      	ldr	r3, [r4, #12]
   253ca:	9301      	str	r3, [sp, #4]
   253cc:	68a3      	ldr	r3, [r4, #8]
   253ce:	9300      	str	r3, [sp, #0]
   253d0:	e9d4 2300 	ldrd	r2, r3, [r4]
   253d4:	4631      	mov	r1, r6
   253d6:	4628      	mov	r0, r5
   253d8:	f7df fb98 	bl	4b0c <print_formatted>
		break;
   253dc:	e7bf      	b.n	2535e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   253de:	69a3      	ldr	r3, [r4, #24]
   253e0:	9304      	str	r3, [sp, #16]
   253e2:	6963      	ldr	r3, [r4, #20]
   253e4:	9303      	str	r3, [sp, #12]
   253e6:	6923      	ldr	r3, [r4, #16]
   253e8:	9302      	str	r3, [sp, #8]
   253ea:	68e3      	ldr	r3, [r4, #12]
   253ec:	9301      	str	r3, [sp, #4]
   253ee:	68a3      	ldr	r3, [r4, #8]
   253f0:	9300      	str	r3, [sp, #0]
   253f2:	e9d4 2300 	ldrd	r2, r3, [r4]
   253f6:	4631      	mov	r1, r6
   253f8:	4628      	mov	r0, r5
   253fa:	f7df fb87 	bl	4b0c <print_formatted>
		break;
   253fe:	e7ae      	b.n	2535e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   25400:	69e3      	ldr	r3, [r4, #28]
   25402:	9305      	str	r3, [sp, #20]
   25404:	69a3      	ldr	r3, [r4, #24]
   25406:	9304      	str	r3, [sp, #16]
   25408:	6963      	ldr	r3, [r4, #20]
   2540a:	9303      	str	r3, [sp, #12]
   2540c:	6923      	ldr	r3, [r4, #16]
   2540e:	9302      	str	r3, [sp, #8]
   25410:	68e3      	ldr	r3, [r4, #12]
   25412:	9301      	str	r3, [sp, #4]
   25414:	68a3      	ldr	r3, [r4, #8]
   25416:	9300      	str	r3, [sp, #0]
   25418:	e9d4 2300 	ldrd	r2, r3, [r4]
   2541c:	4631      	mov	r1, r6
   2541e:	4628      	mov	r0, r5
   25420:	f7df fb74 	bl	4b0c <print_formatted>
		break;
   25424:	e79b      	b.n	2535e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   25426:	6a23      	ldr	r3, [r4, #32]
   25428:	9306      	str	r3, [sp, #24]
   2542a:	69e3      	ldr	r3, [r4, #28]
   2542c:	9305      	str	r3, [sp, #20]
   2542e:	69a3      	ldr	r3, [r4, #24]
   25430:	9304      	str	r3, [sp, #16]
   25432:	6963      	ldr	r3, [r4, #20]
   25434:	9303      	str	r3, [sp, #12]
   25436:	6923      	ldr	r3, [r4, #16]
   25438:	9302      	str	r3, [sp, #8]
   2543a:	68e3      	ldr	r3, [r4, #12]
   2543c:	9301      	str	r3, [sp, #4]
   2543e:	68a3      	ldr	r3, [r4, #8]
   25440:	9300      	str	r3, [sp, #0]
   25442:	e9d4 2300 	ldrd	r2, r3, [r4]
   25446:	4631      	mov	r1, r6
   25448:	4628      	mov	r0, r5
   2544a:	f7df fb5f 	bl	4b0c <print_formatted>
		break;
   2544e:	e786      	b.n	2535e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   25450:	6a63      	ldr	r3, [r4, #36]	; 0x24
   25452:	9307      	str	r3, [sp, #28]
   25454:	6a23      	ldr	r3, [r4, #32]
   25456:	9306      	str	r3, [sp, #24]
   25458:	69e3      	ldr	r3, [r4, #28]
   2545a:	9305      	str	r3, [sp, #20]
   2545c:	69a3      	ldr	r3, [r4, #24]
   2545e:	9304      	str	r3, [sp, #16]
   25460:	6963      	ldr	r3, [r4, #20]
   25462:	9303      	str	r3, [sp, #12]
   25464:	6923      	ldr	r3, [r4, #16]
   25466:	9302      	str	r3, [sp, #8]
   25468:	68e3      	ldr	r3, [r4, #12]
   2546a:	9301      	str	r3, [sp, #4]
   2546c:	68a3      	ldr	r3, [r4, #8]
   2546e:	9300      	str	r3, [sp, #0]
   25470:	e9d4 2300 	ldrd	r2, r3, [r4]
   25474:	4631      	mov	r1, r6
   25476:	4628      	mov	r0, r5
   25478:	f7df fb48 	bl	4b0c <print_formatted>
		break;
   2547c:	e76f      	b.n	2535e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   2547e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   25480:	9308      	str	r3, [sp, #32]
   25482:	6a63      	ldr	r3, [r4, #36]	; 0x24
   25484:	9307      	str	r3, [sp, #28]
   25486:	6a23      	ldr	r3, [r4, #32]
   25488:	9306      	str	r3, [sp, #24]
   2548a:	69e3      	ldr	r3, [r4, #28]
   2548c:	9305      	str	r3, [sp, #20]
   2548e:	69a3      	ldr	r3, [r4, #24]
   25490:	9304      	str	r3, [sp, #16]
   25492:	6963      	ldr	r3, [r4, #20]
   25494:	9303      	str	r3, [sp, #12]
   25496:	6923      	ldr	r3, [r4, #16]
   25498:	9302      	str	r3, [sp, #8]
   2549a:	68e3      	ldr	r3, [r4, #12]
   2549c:	9301      	str	r3, [sp, #4]
   2549e:	68a3      	ldr	r3, [r4, #8]
   254a0:	9300      	str	r3, [sp, #0]
   254a2:	e9d4 2300 	ldrd	r2, r3, [r4]
   254a6:	4631      	mov	r1, r6
   254a8:	4628      	mov	r0, r5
   254aa:	f7df fb2f 	bl	4b0c <print_formatted>
		break;
   254ae:	e756      	b.n	2535e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   254b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   254b2:	9309      	str	r3, [sp, #36]	; 0x24
   254b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   254b6:	9308      	str	r3, [sp, #32]
   254b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   254ba:	9307      	str	r3, [sp, #28]
   254bc:	6a23      	ldr	r3, [r4, #32]
   254be:	9306      	str	r3, [sp, #24]
   254c0:	69e3      	ldr	r3, [r4, #28]
   254c2:	9305      	str	r3, [sp, #20]
   254c4:	69a3      	ldr	r3, [r4, #24]
   254c6:	9304      	str	r3, [sp, #16]
   254c8:	6963      	ldr	r3, [r4, #20]
   254ca:	9303      	str	r3, [sp, #12]
   254cc:	6923      	ldr	r3, [r4, #16]
   254ce:	9302      	str	r3, [sp, #8]
   254d0:	68e3      	ldr	r3, [r4, #12]
   254d2:	9301      	str	r3, [sp, #4]
   254d4:	68a3      	ldr	r3, [r4, #8]
   254d6:	9300      	str	r3, [sp, #0]
   254d8:	e9d4 2300 	ldrd	r2, r3, [r4]
   254dc:	4631      	mov	r1, r6
   254de:	4628      	mov	r0, r5
   254e0:	f7df fb14 	bl	4b0c <print_formatted>
		break;
   254e4:	e73b      	b.n	2535e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   254e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   254e8:	930a      	str	r3, [sp, #40]	; 0x28
   254ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   254ec:	9309      	str	r3, [sp, #36]	; 0x24
   254ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   254f0:	9308      	str	r3, [sp, #32]
   254f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   254f4:	9307      	str	r3, [sp, #28]
   254f6:	6a23      	ldr	r3, [r4, #32]
   254f8:	9306      	str	r3, [sp, #24]
   254fa:	69e3      	ldr	r3, [r4, #28]
   254fc:	9305      	str	r3, [sp, #20]
   254fe:	69a3      	ldr	r3, [r4, #24]
   25500:	9304      	str	r3, [sp, #16]
   25502:	6963      	ldr	r3, [r4, #20]
   25504:	9303      	str	r3, [sp, #12]
   25506:	6923      	ldr	r3, [r4, #16]
   25508:	9302      	str	r3, [sp, #8]
   2550a:	68e3      	ldr	r3, [r4, #12]
   2550c:	9301      	str	r3, [sp, #4]
   2550e:	68a3      	ldr	r3, [r4, #8]
   25510:	9300      	str	r3, [sp, #0]
   25512:	e9d4 2300 	ldrd	r2, r3, [r4]
   25516:	4631      	mov	r1, r6
   25518:	4628      	mov	r0, r5
   2551a:	f7df faf7 	bl	4b0c <print_formatted>
		break;
   2551e:	e71e      	b.n	2535e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   25520:	6b63      	ldr	r3, [r4, #52]	; 0x34
   25522:	930b      	str	r3, [sp, #44]	; 0x2c
   25524:	6b23      	ldr	r3, [r4, #48]	; 0x30
   25526:	930a      	str	r3, [sp, #40]	; 0x28
   25528:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2552a:	9309      	str	r3, [sp, #36]	; 0x24
   2552c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2552e:	9308      	str	r3, [sp, #32]
   25530:	6a63      	ldr	r3, [r4, #36]	; 0x24
   25532:	9307      	str	r3, [sp, #28]
   25534:	6a23      	ldr	r3, [r4, #32]
   25536:	9306      	str	r3, [sp, #24]
   25538:	69e3      	ldr	r3, [r4, #28]
   2553a:	9305      	str	r3, [sp, #20]
   2553c:	69a3      	ldr	r3, [r4, #24]
   2553e:	9304      	str	r3, [sp, #16]
   25540:	6963      	ldr	r3, [r4, #20]
   25542:	9303      	str	r3, [sp, #12]
   25544:	6923      	ldr	r3, [r4, #16]
   25546:	9302      	str	r3, [sp, #8]
   25548:	68e3      	ldr	r3, [r4, #12]
   2554a:	9301      	str	r3, [sp, #4]
   2554c:	68a3      	ldr	r3, [r4, #8]
   2554e:	9300      	str	r3, [sp, #0]
   25550:	e9d4 2300 	ldrd	r2, r3, [r4]
   25554:	4631      	mov	r1, r6
   25556:	4628      	mov	r0, r5
   25558:	f7df fad8 	bl	4b0c <print_formatted>
		break;
   2555c:	e6ff      	b.n	2535e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   2555e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   25560:	930c      	str	r3, [sp, #48]	; 0x30
   25562:	6b63      	ldr	r3, [r4, #52]	; 0x34
   25564:	930b      	str	r3, [sp, #44]	; 0x2c
   25566:	6b23      	ldr	r3, [r4, #48]	; 0x30
   25568:	930a      	str	r3, [sp, #40]	; 0x28
   2556a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2556c:	9309      	str	r3, [sp, #36]	; 0x24
   2556e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   25570:	9308      	str	r3, [sp, #32]
   25572:	6a63      	ldr	r3, [r4, #36]	; 0x24
   25574:	9307      	str	r3, [sp, #28]
   25576:	6a23      	ldr	r3, [r4, #32]
   25578:	9306      	str	r3, [sp, #24]
   2557a:	69e3      	ldr	r3, [r4, #28]
   2557c:	9305      	str	r3, [sp, #20]
   2557e:	69a3      	ldr	r3, [r4, #24]
   25580:	9304      	str	r3, [sp, #16]
   25582:	6963      	ldr	r3, [r4, #20]
   25584:	9303      	str	r3, [sp, #12]
   25586:	6923      	ldr	r3, [r4, #16]
   25588:	9302      	str	r3, [sp, #8]
   2558a:	68e3      	ldr	r3, [r4, #12]
   2558c:	9301      	str	r3, [sp, #4]
   2558e:	68a3      	ldr	r3, [r4, #8]
   25590:	9300      	str	r3, [sp, #0]
   25592:	e9d4 2300 	ldrd	r2, r3, [r4]
   25596:	4631      	mov	r1, r6
   25598:	4628      	mov	r0, r5
   2559a:	f7df fab7 	bl	4b0c <print_formatted>
}
   2559e:	e6de      	b.n	2535e <std_print+0x78>

000255a0 <log_output_flush>:
		     output->control_block->offset,
   255a0:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   255a2:	6881      	ldr	r1, [r0, #8]
{
   255a4:	b510      	push	{r4, lr}
   255a6:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   255a8:	e9d2 2300 	ldrd	r2, r3, [r2]
   255ac:	6800      	ldr	r0, [r0, #0]
   255ae:	f7ff fe8d 	bl	252cc <buffer_write>
	output->control_block->offset = 0;
   255b2:	6863      	ldr	r3, [r4, #4]
   255b4:	2200      	movs	r2, #0
   255b6:	601a      	str	r2, [r3, #0]
}
   255b8:	bd10      	pop	{r4, pc}

000255ba <out_func>:
{
   255ba:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   255bc:	684b      	ldr	r3, [r1, #4]
   255be:	681a      	ldr	r2, [r3, #0]
   255c0:	68cb      	ldr	r3, [r1, #12]
   255c2:	429a      	cmp	r2, r3
{
   255c4:	4605      	mov	r5, r0
   255c6:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   255c8:	d102      	bne.n	255d0 <out_func+0x16>
		log_output_flush(out_ctx);
   255ca:	4608      	mov	r0, r1
   255cc:	f7ff ffe8 	bl	255a0 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   255d0:	6863      	ldr	r3, [r4, #4]
   255d2:	f3bf 8f5b 	dmb	ish
   255d6:	e853 2f00 	ldrex	r2, [r3]
   255da:	1c51      	adds	r1, r2, #1
   255dc:	e843 1000 	strex	r0, r1, [r3]
   255e0:	2800      	cmp	r0, #0
   255e2:	d1f8      	bne.n	255d6 <out_func+0x1c>
   255e4:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   255e8:	68a3      	ldr	r3, [r4, #8]
   255ea:	549d      	strb	r5, [r3, r2]
}
   255ec:	2000      	movs	r0, #0
   255ee:	bd38      	pop	{r3, r4, r5, pc}

000255f0 <arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   255f0:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   255f4:	b923      	cbnz	r3, 25600 <arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   255f6:	f3ef 8014 	mrs	r0, CONTROL
	return (value & CONTROL_nPRIV_Msk) ? true : false;
   255fa:	f000 0001 	and.w	r0, r0, #1
   255fe:	4770      	bx	lr
		return false;
   25600:	2000      	movs	r0, #0
}
   25602:	4770      	bx	lr

00025604 <read_str>:
#endif /* CONFIG_BT_DIS_SETTINGS */

static ssize_t read_str(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  uint16_t len, uint16_t offset)
{
   25604:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   25608:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   2560c:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   2560e:	4640      	mov	r0, r8
{
   25610:	461f      	mov	r7, r3
   25612:	460c      	mov	r4, r1
   25614:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   25616:	f7db fc17 	bl	e48 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   2561a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   2561e:	9300      	str	r3, [sp, #0]
   25620:	b280      	uxth	r0, r0
   25622:	e9cd 8001 	strd	r8, r0, [sp, #4]
   25626:	463b      	mov	r3, r7
   25628:	4632      	mov	r2, r6
   2562a:	4621      	mov	r1, r4
   2562c:	4628      	mov	r0, r5
   2562e:	f002 fdf0 	bl	28212 <bt_gatt_attr_read>
}
   25632:	b004      	add	sp, #16
   25634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00025638 <arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   25638:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   2563c:	b923      	cbnz	r3, 25648 <arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   2563e:	f3ef 8014 	mrs	r0, CONTROL
	return (value & CONTROL_nPRIV_Msk) ? true : false;
   25642:	f000 0001 	and.w	r0, r0, #1
   25646:	4770      	bx	lr
		return false;
   25648:	2000      	movs	r0, #0
}
   2564a:	4770      	bx	lr

0002564c <lres_init>:
}
   2564c:	2000      	movs	r0, #0
   2564e:	4770      	bx	lr

00025650 <change_config_cb>:
{
   25650:	b507      	push	{r0, r1, r2, lr}
	change_config(pu, false);
   25652:	4610      	mov	r0, r2
   25654:	2100      	movs	r1, #0
   25656:	f7df fd6d 	bl	5134 <change_config>
	int8_t bt_data[1] = {-2};
   2565a:	23fe      	movs	r3, #254	; 0xfe
	bt_lres_notify(bt_data, 2);
   2565c:	2102      	movs	r1, #2
   2565e:	a801      	add	r0, sp, #4
	int8_t bt_data[1] = {-2};
   25660:	f88d 3004 	strb.w	r3, [sp, #4]
	bt_lres_notify(bt_data, 2);
   25664:	f7df fdf6 	bl	5254 <bt_lres_notify>
}
   25668:	2000      	movs	r0, #0
   2566a:	b003      	add	sp, #12
   2566c:	f85d fb04 	ldr.w	pc, [sp], #4

00025670 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   25670:	2200      	movs	r2, #0
   25672:	8002      	strh	r2, [r0, #0]
   25674:	6042      	str	r2, [r0, #4]
}
   25676:	4770      	bx	lr

00025678 <arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   25678:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   2567c:	b923      	cbnz	r3, 25688 <arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   2567e:	f3ef 8014 	mrs	r0, CONTROL
	return (value & CONTROL_nPRIV_Msk) ? true : false;
   25682:	f000 0001 	and.w	r0, r0, #1
   25686:	4770      	bx	lr
		return false;
   25688:	2000      	movs	r0, #0
}
   2568a:	4770      	bx	lr

0002568c <arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   2568c:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   25690:	b923      	cbnz	r3, 2569c <arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   25692:	f3ef 8014 	mrs	r0, CONTROL
	return (value & CONTROL_nPRIV_Msk) ? true : false;
   25696:	f000 0001 	and.w	r0, r0, #1
   2569a:	4770      	bx	lr
		return false;
   2569c:	2000      	movs	r0, #0
}
   2569e:	4770      	bx	lr

000256a0 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   256a0:	6902      	ldr	r2, [r0, #16]
   256a2:	b2cb      	uxtb	r3, r1
   256a4:	210c      	movs	r1, #12
   256a6:	fb03 2101 	mla	r1, r3, r1, r2
   256aa:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
   256ac:	f000 0007 	and.w	r0, r0, #7
   256b0:	4770      	bx	lr

000256b2 <set_off_state>:
	__asm__ volatile(
   256b2:	f04f 0320 	mov.w	r3, #32
   256b6:	f3ef 8211 	mrs	r2, BASEPRI
   256ba:	f383 8811 	msr	BASEPRI, r3
   256be:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   256c2:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   256c4:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   256c8:	d001      	beq.n	256ce <set_off_state+0x1c>
   256ca:	428b      	cmp	r3, r1
   256cc:	d107      	bne.n	256de <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   256ce:	2301      	movs	r3, #1
   256d0:	6003      	str	r3, [r0, #0]
	int err = 0;
   256d2:	2000      	movs	r0, #0
	__asm__ volatile(
   256d4:	f382 8811 	msr	BASEPRI, r2
   256d8:	f3bf 8f6f 	isb	sy
}
   256dc:	4770      	bx	lr
		err = -EPERM;
   256de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   256e2:	e7f7      	b.n	256d4 <set_off_state+0x22>

000256e4 <set_starting_state>:
{
   256e4:	b510      	push	{r4, lr}
	__asm__ volatile(
   256e6:	f04f 0320 	mov.w	r3, #32
   256ea:	f3ef 8211 	mrs	r2, BASEPRI
   256ee:	f383 8811 	msr	BASEPRI, r3
   256f2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   256f6:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   256f8:	f003 0407 	and.w	r4, r3, #7
   256fc:	2c01      	cmp	r4, #1
   256fe:	d106      	bne.n	2570e <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   25700:	6001      	str	r1, [r0, #0]
	int err = 0;
   25702:	2000      	movs	r0, #0
	__asm__ volatile(
   25704:	f382 8811 	msr	BASEPRI, r2
   25708:	f3bf 8f6f 	isb	sy
}
   2570c:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   2570e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   25712:	428b      	cmp	r3, r1
		err = -EALREADY;
   25714:	bf14      	ite	ne
   25716:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   2571a:	f06f 0077 	mvneq.w	r0, #119	; 0x77
   2571e:	e7f1      	b.n	25704 <set_starting_state+0x20>

00025720 <set_on_state>:
	__asm__ volatile(
   25720:	f04f 0320 	mov.w	r3, #32
   25724:	f3ef 8211 	mrs	r2, BASEPRI
   25728:	f383 8811 	msr	BASEPRI, r3
   2572c:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   25730:	6803      	ldr	r3, [r0, #0]
   25732:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   25736:	f043 0302 	orr.w	r3, r3, #2
   2573a:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2573c:	f382 8811 	msr	BASEPRI, r2
   25740:	f3bf 8f6f 	isb	sy
}
   25744:	4770      	bx	lr

00025746 <onoff_started_callback>:
	return &data->mgr[type];
   25746:	6900      	ldr	r0, [r0, #16]
{
   25748:	b410      	push	{r4}
	return &data->mgr[type];
   2574a:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   2574c:	241c      	movs	r4, #28
   2574e:	fb03 0004 	mla	r0, r3, r4, r0
   25752:	2100      	movs	r1, #0
}
   25754:	bc10      	pop	{r4}
	notify(mgr, 0);
   25756:	4710      	bx	r2

00025758 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   25758:	2000      	movs	r0, #0
   2575a:	f7fa bd13 	b.w	20184 <nrfx_clock_start>

0002575e <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2575e:	2000      	movs	r0, #0
   25760:	f7fa bd42 	b.w	201e8 <nrfx_clock_stop>

00025764 <blocking_start_callback>:
{
   25764:	e92d 4148 	stmdb	sp!, {r3, r6, r8, lr}
   25768:	f7ff ff90 	bl	2568c <arch_is_user_context>
	if (z_syscall_trap()) {
   2576c:	b120      	cbz	r0, 25778 <blocking_start_callback+0x14>
	register uint32_t ret __asm__("r0") = arg1;
   2576e:	4610      	mov	r0, r2
	register uint32_t r6 __asm__("r6") = call_id;
   25770:	26a0      	movs	r6, #160	; 0xa0
	__asm__ volatile("svc %[svid]\n"
   25772:	df03      	svc	3
}
   25774:	e8bd 8148 	ldmia.w	sp!, {r3, r6, r8, pc}
   25778:	e8bd 4148 	ldmia.w	sp!, {r3, r6, r8, lr}
	z_impl_k_sem_give(sem);
   2577c:	4610      	mov	r0, r2
   2577e:	f7fc bc41 	b.w	22004 <z_impl_k_sem_give>

00025782 <api_stop>:
{
   25782:	b538      	push	{r3, r4, r5, lr}
   25784:	b2c9      	uxtb	r1, r1
	err = set_off_state(&subdata->flags, ctx);
   25786:	240c      	movs	r4, #12
   25788:	434c      	muls	r4, r1
{
   2578a:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   2578c:	6900      	ldr	r0, [r0, #16]
   2578e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   25792:	2180      	movs	r1, #128	; 0x80
   25794:	4418      	add	r0, r3
   25796:	f7ff ff8c 	bl	256b2 <set_off_state>
	if (err < 0) {
   2579a:	2800      	cmp	r0, #0
   2579c:	db04      	blt.n	257a8 <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   2579e:	6869      	ldr	r1, [r5, #4]
   257a0:	440c      	add	r4, r1
   257a2:	6863      	ldr	r3, [r4, #4]
   257a4:	4798      	blx	r3
	return 0;
   257a6:	2000      	movs	r0, #0
}
   257a8:	bd38      	pop	{r3, r4, r5, pc}

000257aa <api_start>:
{
   257aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   257ae:	b2c9      	uxtb	r1, r1
	err = set_starting_state(&subdata->flags, ctx);
   257b0:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   257b2:	6905      	ldr	r5, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
   257b4:	434c      	muls	r4, r1
{
   257b6:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   257b8:	f104 0040 	add.w	r0, r4, #64	; 0x40
   257bc:	2180      	movs	r1, #128	; 0x80
   257be:	4428      	add	r0, r5
{
   257c0:	4690      	mov	r8, r2
   257c2:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
   257c4:	f7ff ff8e 	bl	256e4 <set_starting_state>
	if (err < 0) {
   257c8:	2800      	cmp	r0, #0
   257ca:	db06      	blt.n	257da <api_start+0x30>
	subdata->cb = cb;
   257cc:	4425      	add	r5, r4
	subdata->user_data = user_data;
   257ce:	e9c5 870e 	strd	r8, r7, [r5, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   257d2:	6873      	ldr	r3, [r6, #4]
   257d4:	591b      	ldr	r3, [r3, r4]
   257d6:	4798      	blx	r3
	return 0;
   257d8:	2000      	movs	r0, #0
}
   257da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000257de <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   257de:	4770      	bx	lr

000257e0 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   257e0:	4770      	bx	lr

000257e2 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   257e2:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   257e4:	68c1      	ldr	r1, [r0, #12]
  if (RdOff <= WrOff) {
   257e6:	428b      	cmp	r3, r1
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   257e8:	bf9d      	ittte	ls
   257ea:	6882      	ldrls	r2, [r0, #8]
   257ec:	18d2      	addls	r2, r2, r3
   257ee:	f102 32ff 	addls.w	r2, r2, #4294967295	; 0xffffffff
    r = RdOff - WrOff - 1u;
   257f2:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   257f6:	bf94      	ite	ls
   257f8:	1a50      	subls	r0, r2, r1
    r = RdOff - WrOff - 1u;
   257fa:	1a58      	subhi	r0, r3, r1
}
   257fc:	4770      	bx	lr

000257fe <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   257fe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
   25802:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   25806:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   25808:	eba9 0804 	sub.w	r8, r9, r4
   2580c:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
   2580e:	4590      	cmp	r8, r2
   25810:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   25812:	460f      	mov	r7, r1
  if (Rem > NumBytes) {
   25814:	4414      	add	r4, r2
   25816:	d904      	bls.n	25822 <_WriteNoCheck+0x24>
   25818:	f004 fde2 	bl	2a3e0 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   2581c:	60ec      	str	r4, [r5, #12]
}
   2581e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   25822:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
   25824:	eba4 0409 	sub.w	r4, r4, r9
   25828:	f004 fdda 	bl	2a3e0 <memcpy>
   2582c:	6868      	ldr	r0, [r5, #4]
   2582e:	4622      	mov	r2, r4
   25830:	eb07 0108 	add.w	r1, r7, r8
   25834:	e7f0      	b.n	25818 <_WriteNoCheck+0x1a>

00025836 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   25836:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
   2583a:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   2583c:	4606      	mov	r6, r0
   2583e:	4689      	mov	r9, r1
   25840:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   25842:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   25846:	6934      	ldr	r4, [r6, #16]
    if (RdOff > WrOff) {
   25848:	68b3      	ldr	r3, [r6, #8]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   2584a:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
   2584c:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   2584e:	bf28      	it	cs
   25850:	18e4      	addcs	r4, r4, r3
   25852:	3c01      	subs	r4, #1
   25854:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   25856:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   25858:	42bc      	cmp	r4, r7
   2585a:	bf28      	it	cs
   2585c:	463c      	movcs	r4, r7
   2585e:	4294      	cmp	r4, r2
   25860:	bf28      	it	cs
   25862:	4614      	movcs	r4, r2
   25864:	4649      	mov	r1, r9
   25866:	4428      	add	r0, r5
   25868:	4622      	mov	r2, r4
   2586a:	f004 fdb9 	bl	2a3e0 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   2586e:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   25870:	4425      	add	r5, r4
      WrOff = 0u;
   25872:	42ab      	cmp	r3, r5
   25874:	bf08      	it	eq
   25876:	2500      	moveq	r5, #0
  } while (NumBytes);
   25878:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
   2587a:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   2587c:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
   2587e:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   25880:	d1e1      	bne.n	25846 <_WriteBlocking+0x10>
}
   25882:	4640      	mov	r0, r8
   25884:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00025888 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   25888:	f7e0 b8d6 	b.w	5a38 <_DoInit>

0002588c <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   2588c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   2588e:	f7ff fffb 	bl	25888 <SEGGER_RTT_Init>

	return 0;
}
   25892:	2000      	movs	r0, #0
   25894:	bd08      	pop	{r3, pc}

00025896 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   25896:	b538      	push	{r3, r4, r5, lr}
   25898:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   2589a:	42ab      	cmp	r3, r5
{
   2589c:	4611      	mov	r1, r2
   2589e:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   258a0:	d804      	bhi.n	258ac <_copy+0x16>
   258a2:	461a      	mov	r2, r3
   258a4:	f004 fd9c 	bl	2a3e0 <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   258a8:	4620      	mov	r0, r4
   258aa:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   258ac:	2400      	movs	r4, #0
   258ae:	e7fb      	b.n	258a8 <_copy+0x12>

000258b0 <_set>:
__ssp_bos_icheck3(memset, void *, int)
   258b0:	f004 bda4 	b.w	2a3fc <memset>

000258b4 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   258b4:	09c3      	lsrs	r3, r0, #7
   258b6:	005a      	lsls	r2, r3, #1
   258b8:	4413      	add	r3, r2
   258ba:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   258be:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   258c2:	b2c0      	uxtb	r0, r0
   258c4:	4770      	bx	lr

000258c6 <_set_secure.constprop.0>:
 * @param len IN -- number of times the value will be copied
 */
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
   258c6:	b510      	push	{r4, lr}
   258c8:	460a      	mov	r2, r1
   258ca:	2100      	movs	r1, #0
   258cc:	4604      	mov	r4, r0
   258ce:	f004 fd95 	bl	2a3fc <memset>
{
  (void) memset(to, val, len);
#ifdef __GNUC__
  __asm__ __volatile__("" :: "g"(to) : "memory");
#endif /* __GNUC__ */
}
   258d2:	bd10      	pop	{r4, pc}

000258d4 <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   258d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   258d8:	4605      	mov	r5, r0
   258da:	b0a8      	sub	sp, #160	; 0xa0
   258dc:	460f      	mov	r7, r1
   258de:	4614      	mov	r4, r2
   258e0:	2640      	movs	r6, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   258e2:	f102 0824 	add.w	r8, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   258e6:	f7e0 f961 	bl	5bac <uECC_get_rng>
		if (!rng_function ||
   258ea:	4603      	mov	r3, r0
   258ec:	2800      	cmp	r0, #0
   258ee:	d03c      	beq.n	2596a <uECC_make_key+0x96>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   258f0:	2140      	movs	r1, #64	; 0x40
   258f2:	a808      	add	r0, sp, #32
   258f4:	4798      	blx	r3
		if (!rng_function ||
   258f6:	b3c0      	cbz	r0, 2596a <uECC_make_key+0x96>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   258f8:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   258fc:	f112 031f 	adds.w	r3, r2, #31
   25900:	bf48      	it	mi
   25902:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   25906:	a908      	add	r1, sp, #32
   25908:	4642      	mov	r2, r8
   2590a:	4668      	mov	r0, sp
   2590c:	f343 1347 	sbfx	r3, r3, #5, #8
   25910:	f000 f9ff 	bl	25d12 <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   25914:	4622      	mov	r2, r4
   25916:	4669      	mov	r1, sp
   25918:	a818      	add	r0, sp, #96	; 0x60
   2591a:	f000 fe15 	bl	26548 <EccPoint_compute_public_key>
   2591e:	b310      	cbz	r0, 25966 <uECC_make_key+0x92>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   25920:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   25924:	1dd9      	adds	r1, r3, #7
   25926:	bf48      	it	mi
   25928:	f103 010e 	addmi.w	r1, r3, #14
   2592c:	466a      	mov	r2, sp
   2592e:	10c9      	asrs	r1, r1, #3
   25930:	4638      	mov	r0, r7
   25932:	f000 fe31 	bl	26598 <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   25936:	f994 1001 	ldrsb.w	r1, [r4, #1]
   2593a:	aa18      	add	r2, sp, #96	; 0x60
   2593c:	4628      	mov	r0, r5
   2593e:	f000 fe2b 	bl	26598 <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   25942:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   25946:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   2594a:	ab18      	add	r3, sp, #96	; 0x60
   2594c:	1868      	adds	r0, r5, r1
   2594e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   25952:	f000 fe21 	bl	26598 <uECC_vli_nativeToBytes>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);
   25956:	4668      	mov	r0, sp
   25958:	2120      	movs	r1, #32
   2595a:	f7ff ffb4 	bl	258c6 <_set_secure.constprop.0>

      			return 1;
   2595e:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   25960:	b028      	add	sp, #160	; 0xa0
   25962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   25966:	3e01      	subs	r6, #1
   25968:	d1bd      	bne.n	258e6 <uECC_make_key+0x12>
        		return 0;
   2596a:	2000      	movs	r0, #0
   2596c:	e7f8      	b.n	25960 <uECC_make_key+0x8c>

0002596e <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   2596e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25972:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   25974:	f993 6001 	ldrsb.w	r6, [r3, #1]
	wordcount_t num_words = curve->num_words;
   25978:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   2597c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   25980:	b0a4      	sub	sp, #144	; 0x90
   25982:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   25984:	1dda      	adds	r2, r3, #7
   25986:	bf48      	it	mi
   25988:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   2598c:	ad04      	add	r5, sp, #16
{
   2598e:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   25990:	af0c      	add	r7, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   25992:	4628      	mov	r0, r5
   25994:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   25996:	9502      	str	r5, [sp, #8]
   25998:	9703      	str	r7, [sp, #12]
	uECC_vli_bytesToNative(_private,
   2599a:	f000 fe11 	bl	265c0 <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   2599e:	4632      	mov	r2, r6
   259a0:	4649      	mov	r1, r9
   259a2:	a814      	add	r0, sp, #80	; 0x50
   259a4:	f000 fe0c 	bl	265c0 <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   259a8:	ab14      	add	r3, sp, #80	; 0x50
   259aa:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   259ae:	4632      	mov	r2, r6
   259b0:	eb09 0106 	add.w	r1, r9, r6
   259b4:	f000 fe04 	bl	265c0 <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   259b8:	4623      	mov	r3, r4
   259ba:	463a      	mov	r2, r7
   259bc:	4629      	mov	r1, r5
   259be:	4628      	mov	r0, r5
   259c0:	f000 fd96 	bl	264f0 <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   259c4:	fab0 f080 	clz	r0, r0
   259c8:	9401      	str	r4, [sp, #4]
   259ca:	ab24      	add	r3, sp, #144	; 0x90
   259cc:	0940      	lsrs	r0, r0, #5
   259ce:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   259d2:	8863      	ldrh	r3, [r4, #2]
   259d4:	3301      	adds	r3, #1
   259d6:	b21b      	sxth	r3, r3
   259d8:	9300      	str	r3, [sp, #0]
   259da:	a914      	add	r1, sp, #80	; 0x50
   259dc:	2300      	movs	r3, #0
   259de:	f850 2c88 	ldr.w	r2, [r0, #-136]
   259e2:	4608      	mov	r0, r1
   259e4:	f000 fcb5 	bl	26352 <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   259e8:	aa14      	add	r2, sp, #80	; 0x50
   259ea:	4631      	mov	r1, r6
   259ec:	4640      	mov	r0, r8
   259ee:	f000 fdd3 	bl	26598 <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   259f2:	4621      	mov	r1, r4
   259f4:	a814      	add	r0, sp, #80	; 0x50
   259f6:	f000 fc21 	bl	2623c <EccPoint_isZero>

clear_and_out:
	/* erasing temporary buffer used to store secret: */
	_set_secure(p2, 0, sizeof(p2));
   259fa:	2108      	movs	r1, #8
	r = !EccPoint_isZero(_public, curve);
   259fc:	4604      	mov	r4, r0
	_set_secure(p2, 0, sizeof(p2));
   259fe:	eb0d 0001 	add.w	r0, sp, r1
   25a02:	f7ff ff60 	bl	258c6 <_set_secure.constprop.0>
	_set_secure(tmp, 0, sizeof(tmp));
   25a06:	4638      	mov	r0, r7
   25a08:	2120      	movs	r1, #32
   25a0a:	f7ff ff5c 	bl	258c6 <_set_secure.constprop.0>
	_set_secure(_private, 0, sizeof(_private));
   25a0e:	4628      	mov	r0, r5
   25a10:	2120      	movs	r1, #32
   25a12:	f7ff ff58 	bl	258c6 <_set_secure.constprop.0>

	return r;
}
   25a16:	fab4 f084 	clz	r0, r4
   25a1a:	0940      	lsrs	r0, r0, #5
   25a1c:	b024      	add	sp, #144	; 0x90
   25a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00025a22 <uECC_vli_add>:
{
   25a22:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   25a24:	2400      	movs	r4, #0
{
   25a26:	4606      	mov	r6, r0
	uECC_word_t carry = 0;
   25a28:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   25a2a:	b265      	sxtb	r5, r4
   25a2c:	42ab      	cmp	r3, r5
   25a2e:	dc00      	bgt.n	25a32 <uECC_vli_add+0x10>
}
   25a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   25a32:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   25a36:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   25a3a:	443d      	add	r5, r7
   25a3c:	4405      	add	r5, r0
		carry = cond_set(val, carry, (sum != left[i]));
   25a3e:	42af      	cmp	r7, r5
		uECC_word_t val = (sum < left[i]);
   25a40:	bf8c      	ite	hi
   25a42:	2701      	movhi	r7, #1
   25a44:	2700      	movls	r7, #0
		result[i] = sum;
   25a46:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   25a4a:	bf18      	it	ne
   25a4c:	4638      	movne	r0, r7
	for (i = 0; i < num_words; ++i) {
   25a4e:	3401      	adds	r4, #1
   25a50:	e7eb      	b.n	25a2a <uECC_vli_add+0x8>

00025a52 <uECC_vli_rshift1>:
	vli += num_words;
   25a52:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   25a56:	2300      	movs	r3, #0
	while (vli-- > end) {
   25a58:	4288      	cmp	r0, r1
   25a5a:	d300      	bcc.n	25a5e <uECC_vli_rshift1+0xc>
}
   25a5c:	4770      	bx	lr
		uECC_word_t temp = *vli;
   25a5e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   25a62:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   25a66:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   25a68:	07d3      	lsls	r3, r2, #31
   25a6a:	e7f5      	b.n	25a58 <uECC_vli_rshift1+0x6>

00025a6c <vli_modInv_update>:
	if (!EVEN(uv)) {
   25a6c:	6803      	ldr	r3, [r0, #0]
{
   25a6e:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   25a70:	f013 0601 	ands.w	r6, r3, #1
{
   25a74:	4605      	mov	r5, r0
   25a76:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   25a78:	d005      	beq.n	25a86 <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   25a7a:	4613      	mov	r3, r2
   25a7c:	460a      	mov	r2, r1
   25a7e:	4601      	mov	r1, r0
   25a80:	f7ff ffcf 	bl	25a22 <uECC_vli_add>
   25a84:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   25a86:	4621      	mov	r1, r4
   25a88:	4628      	mov	r0, r5
   25a8a:	f7ff ffe2 	bl	25a52 <uECC_vli_rshift1>
	if (carry) {
   25a8e:	b146      	cbz	r6, 25aa2 <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   25a90:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   25a94:	3a01      	subs	r2, #1
   25a96:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   25a9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   25a9e:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   25aa2:	bd70      	pop	{r4, r5, r6, pc}

00025aa4 <uECC_vli_mult>:
{
   25aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (k = 0; k < num_words; ++k) {
   25aa8:	2500      	movs	r5, #0
{
   25aaa:	b087      	sub	sp, #28
   25aac:	e9cd 1200 	strd	r1, r2, [sp]
	uECC_word_t r1 = 0;
   25ab0:	462c      	mov	r4, r5
	uECC_word_t r0 = 0;
   25ab2:	462a      	mov	r2, r5
	for (k = 0; k < num_words; ++k) {
   25ab4:	fa4f f885 	sxtb.w	r8, r5
   25ab8:	4543      	cmp	r3, r8
   25aba:	dc16      	bgt.n	25aea <uECC_vli_mult+0x46>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   25abc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   25ac0:	eb05 0543 	add.w	r5, r5, r3, lsl #1
   25ac4:	9502      	str	r5, [sp, #8]
   25ac6:	f04f 0a00 	mov.w	sl, #0
   25aca:	9e02      	ldr	r6, [sp, #8]
   25acc:	fa53 fe8a 	uxtab	lr, r3, sl
   25ad0:	fa4f fe8e 	sxtb.w	lr, lr
   25ad4:	45b6      	cmp	lr, r6
   25ad6:	fa5f f58a 	uxtb.w	r5, sl
   25ada:	db2d      	blt.n	25b38 <uECC_vli_mult+0x94>
	result[num_words * 2 - 1] = r0;
   25adc:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   25ae0:	f840 2c04 	str.w	r2, [r0, #-4]
}
   25ae4:	b007      	add	sp, #28
   25ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25aea:	9e01      	ldr	r6, [sp, #4]
	for (k = 0; k < num_words; ++k) {
   25aec:	f04f 0c00 	mov.w	ip, #0
   25af0:	eb06 0985 	add.w	r9, r6, r5, lsl #2
   25af4:	46e6      	mov	lr, ip
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   25af6:	e9cd 2402 	strd	r2, r4, [sp, #8]
	uECC_dword_t p = (uECC_dword_t)a * b;
   25afa:	9900      	ldr	r1, [sp, #0]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   25afc:	f859 7904 	ldr.w	r7, [r9], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   25b00:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
   25b04:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   25b08:	fba7 ab06 	umull	sl, fp, r7, r6
   25b0c:	eb1a 0601 	adds.w	r6, sl, r1
   25b10:	f10c 0c01 	add.w	ip, ip, #1
   25b14:	eb5b 0702 	adcs.w	r7, fp, r2
		for (i = 0; i <= k; ++i) {
   25b18:	fa4f fa8c 	sxtb.w	sl, ip
   25b1c:	bf2c      	ite	cs
   25b1e:	2201      	movcs	r2, #1
   25b20:	2200      	movcc	r2, #0
   25b22:	45c2      	cmp	sl, r8
	*r2 += (r01 < p);
   25b24:	4496      	add	lr, r2
	*r1 = r01 >> uECC_WORD_BITS;
   25b26:	463c      	mov	r4, r7
	*r0 = (uECC_word_t)r01;
   25b28:	4632      	mov	r2, r6
		for (i = 0; i <= k; ++i) {
   25b2a:	dde4      	ble.n	25af6 <uECC_vli_mult+0x52>
		result[k] = r0;
   25b2c:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   25b30:	463a      	mov	r2, r7
   25b32:	3501      	adds	r5, #1
	*r2 += (r01 < p);
   25b34:	4674      	mov	r4, lr
   25b36:	e7bd      	b.n	25ab4 <uECC_vli_mult+0x10>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   25b38:	3501      	adds	r5, #1
   25b3a:	9900      	ldr	r1, [sp, #0]
   25b3c:	9e01      	ldr	r6, [sp, #4]
   25b3e:	fa4f fc85 	sxtb.w	ip, r5
   25b42:	ebae 0b0c 	sub.w	fp, lr, ip
   25b46:	eb01 058c 	add.w	r5, r1, ip, lsl #2
   25b4a:	eb06 0b8b 	add.w	fp, r6, fp, lsl #2
   25b4e:	4621      	mov	r1, r4
   25b50:	2400      	movs	r4, #0
   25b52:	459c      	cmp	ip, r3
   25b54:	db05      	blt.n	25b62 <uECC_vli_mult+0xbe>
		result[k] = r0;
   25b56:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   25b5a:	f10a 0a01 	add.w	sl, sl, #1
		result[k] = r0;
   25b5e:	460a      	mov	r2, r1
   25b60:	e7b3      	b.n	25aca <uECC_vli_mult+0x26>
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   25b62:	e9cd 2104 	strd	r2, r1, [sp, #16]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   25b66:	f855 7b04 	ldr.w	r7, [r5], #4
   25b6a:	f85b 6904 	ldr.w	r6, [fp], #-4
	r01 += p;
   25b6e:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
	uECC_dword_t p = (uECC_dword_t)a * b;
   25b72:	fba7 6706 	umull	r6, r7, r7, r6
   25b76:	eb16 0801 	adds.w	r8, r6, r1
   25b7a:	eb57 0902 	adcs.w	r9, r7, r2
   25b7e:	bf2c      	ite	cs
   25b80:	2201      	movcs	r2, #1
   25b82:	2200      	movcc	r2, #0
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   25b84:	f10c 0c01 	add.w	ip, ip, #1
	*r2 += (r01 < p);
   25b88:	4414      	add	r4, r2
	*r1 = r01 >> uECC_WORD_BITS;
   25b8a:	4649      	mov	r1, r9
	*r0 = (uECC_word_t)r01;
   25b8c:	4642      	mov	r2, r8
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   25b8e:	fa4f fc8c 	sxtb.w	ip, ip
   25b92:	e7de      	b.n	25b52 <uECC_vli_mult+0xae>

00025b94 <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   25b94:	2300      	movs	r3, #0
{
   25b96:	b510      	push	{r4, lr}
		 vli[i] = 0;
   25b98:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   25b9a:	b25a      	sxtb	r2, r3
   25b9c:	4291      	cmp	r1, r2
   25b9e:	dc00      	bgt.n	25ba2 <uECC_vli_clear+0xe>
}
   25ba0:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   25ba2:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   25ba6:	3301      	adds	r3, #1
   25ba8:	e7f7      	b.n	25b9a <uECC_vli_clear+0x6>

00025baa <uECC_vli_isZero>:
{
   25baa:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   25bac:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   25bae:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   25bb0:	b25c      	sxtb	r4, r3
   25bb2:	42a1      	cmp	r1, r4
   25bb4:	dc03      	bgt.n	25bbe <uECC_vli_isZero+0x14>
}
   25bb6:	fab2 f082 	clz	r0, r2
   25bba:	0940      	lsrs	r0, r0, #5
   25bbc:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   25bbe:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   25bc2:	3301      	adds	r3, #1
   25bc4:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   25bc6:	e7f3      	b.n	25bb0 <uECC_vli_isZero+0x6>

00025bc8 <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   25bc8:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   25bca:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   25bcc:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   25bd0:	f001 011f 	and.w	r1, r1, #31
   25bd4:	fa03 f101 	lsl.w	r1, r3, r1
}
   25bd8:	4008      	ands	r0, r1
   25bda:	4770      	bx	lr

00025bdc <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   25bdc:	3901      	subs	r1, #1
   25bde:	b24b      	sxtb	r3, r1
{
   25be0:	4602      	mov	r2, r0
   25be2:	eb00 0183 	add.w	r1, r0, r3, lsl #2
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   25be6:	2b00      	cmp	r3, #0
   25be8:	da03      	bge.n	25bf2 <uECC_vli_numBits+0x16>
	return (i + 1);
   25bea:	3301      	adds	r3, #1
   25bec:	b258      	sxtb	r0, r3
	if (num_digits == 0) {
   25bee:	b938      	cbnz	r0, 25c00 <uECC_vli_numBits+0x24>
   25bf0:	4770      	bx	lr
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   25bf2:	f851 0904 	ldr.w	r0, [r1], #-4
   25bf6:	2800      	cmp	r0, #0
   25bf8:	d1f7      	bne.n	25bea <uECC_vli_numBits+0xe>
   25bfa:	3b01      	subs	r3, #1
   25bfc:	b25b      	sxtb	r3, r3
   25bfe:	e7f2      	b.n	25be6 <uECC_vli_numBits+0xa>
	digit = vli[num_digits - 1];
   25c00:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   25c04:	3b01      	subs	r3, #1
   25c06:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	for (i = 0; digit; ++i) {
   25c0a:	2300      	movs	r3, #0
   25c0c:	b922      	cbnz	r2, 25c18 <uECC_vli_numBits+0x3c>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   25c0e:	3801      	subs	r0, #1
   25c10:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   25c14:	b200      	sxth	r0, r0
}
   25c16:	4770      	bx	lr
		digit >>= 1;
   25c18:	0852      	lsrs	r2, r2, #1
	for (i = 0; digit; ++i) {
   25c1a:	3301      	adds	r3, #1
   25c1c:	e7f6      	b.n	25c0c <uECC_vli_numBits+0x30>

00025c1e <uECC_vli_set>:
{
   25c1e:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   25c20:	2300      	movs	r3, #0
   25c22:	b25c      	sxtb	r4, r3
   25c24:	42a2      	cmp	r2, r4
   25c26:	dc00      	bgt.n	25c2a <uECC_vli_set+0xc>
}
   25c28:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   25c2a:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   25c2e:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   25c32:	3301      	adds	r3, #1
   25c34:	e7f5      	b.n	25c22 <uECC_vli_set+0x4>

00025c36 <uECC_vli_cmp_unsafe>:
{
   25c36:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   25c38:	3a01      	subs	r2, #1
   25c3a:	b253      	sxtb	r3, r2
   25c3c:	009a      	lsls	r2, r3, #2
   25c3e:	2b00      	cmp	r3, #0
   25c40:	da01      	bge.n	25c46 <uECC_vli_cmp_unsafe+0x10>
	return 0;
   25c42:	2000      	movs	r0, #0
}
   25c44:	bd30      	pop	{r4, r5, pc}
		if (left[i] > right[i]) {
   25c46:	5885      	ldr	r5, [r0, r2]
   25c48:	588c      	ldr	r4, [r1, r2]
   25c4a:	42a5      	cmp	r5, r4
   25c4c:	d805      	bhi.n	25c5a <uECC_vli_cmp_unsafe+0x24>
		} else if (left[i] < right[i]) {
   25c4e:	f1a2 0204 	sub.w	r2, r2, #4
   25c52:	d304      	bcc.n	25c5e <uECC_vli_cmp_unsafe+0x28>
	for (i = num_words - 1; i >= 0; --i) {
   25c54:	3b01      	subs	r3, #1
   25c56:	b25b      	sxtb	r3, r3
   25c58:	e7f1      	b.n	25c3e <uECC_vli_cmp_unsafe+0x8>
			return 1;
   25c5a:	2001      	movs	r0, #1
   25c5c:	e7f2      	b.n	25c44 <uECC_vli_cmp_unsafe+0xe>
			return -1;
   25c5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25c62:	e7ef      	b.n	25c44 <uECC_vli_cmp_unsafe+0xe>

00025c64 <uECC_vli_equal>:
	for (i = num_words - 1; i >= 0; --i) {
   25c64:	3a01      	subs	r2, #1
   25c66:	b253      	sxtb	r3, r2
{
   25c68:	b570      	push	{r4, r5, r6, lr}
   25c6a:	009a      	lsls	r2, r3, #2
	uECC_word_t diff = 0;
   25c6c:	2400      	movs	r4, #0
	for (i = num_words - 1; i >= 0; --i) {
   25c6e:	2b00      	cmp	r3, #0
   25c70:	da03      	bge.n	25c7a <uECC_vli_equal+0x16>
}
   25c72:	1e20      	subs	r0, r4, #0
   25c74:	bf18      	it	ne
   25c76:	2001      	movne	r0, #1
   25c78:	bd70      	pop	{r4, r5, r6, pc}
		diff |= (left[i] ^ right[i]);
   25c7a:	5885      	ldr	r5, [r0, r2]
   25c7c:	588e      	ldr	r6, [r1, r2]
	for (i = num_words - 1; i >= 0; --i) {
   25c7e:	3b01      	subs	r3, #1
		diff |= (left[i] ^ right[i]);
   25c80:	4075      	eors	r5, r6
   25c82:	432c      	orrs	r4, r5
	for (i = num_words - 1; i >= 0; --i) {
   25c84:	b25b      	sxtb	r3, r3
   25c86:	3a04      	subs	r2, #4
   25c88:	e7f1      	b.n	25c6e <uECC_vli_equal+0xa>

00025c8a <uECC_vli_sub>:
{
   25c8a:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   25c8c:	2400      	movs	r4, #0
{
   25c8e:	4606      	mov	r6, r0
   25c90:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   25c92:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   25c94:	b265      	sxtb	r5, r4
   25c96:	45ac      	cmp	ip, r5
   25c98:	dc00      	bgt.n	25c9c <uECC_vli_sub+0x12>
}
   25c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   25c9c:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   25ca0:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   25ca4:	1a3d      	subs	r5, r7, r0
   25ca6:	1aed      	subs	r5, r5, r3
		borrow = cond_set(val, borrow, (diff != left[i]));
   25ca8:	42af      	cmp	r7, r5
		uECC_word_t val = (diff > left[i]);
   25caa:	bf34      	ite	cc
   25cac:	2701      	movcc	r7, #1
   25cae:	2700      	movcs	r7, #0
		result[i] = diff;
   25cb0:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   25cb4:	bf18      	it	ne
   25cb6:	4638      	movne	r0, r7
	for (i = 0; i < num_words; ++i) {
   25cb8:	3401      	adds	r4, #1
   25cba:	e7eb      	b.n	25c94 <uECC_vli_sub+0xa>

00025cbc <uECC_vli_modAdd>:
{
   25cbc:	b570      	push	{r4, r5, r6, lr}
   25cbe:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   25cc2:	461d      	mov	r5, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   25cc4:	4633      	mov	r3, r6
{
   25cc6:	4604      	mov	r4, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   25cc8:	f7ff feab 	bl	25a22 <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   25ccc:	b930      	cbnz	r0, 25cdc <uECC_vli_modAdd+0x20>
   25cce:	4632      	mov	r2, r6
   25cd0:	4621      	mov	r1, r4
   25cd2:	4628      	mov	r0, r5
   25cd4:	f7ff ffaf 	bl	25c36 <uECC_vli_cmp_unsafe>
   25cd8:	2801      	cmp	r0, #1
   25cda:	d007      	beq.n	25cec <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   25cdc:	4633      	mov	r3, r6
   25cde:	462a      	mov	r2, r5
   25ce0:	4621      	mov	r1, r4
   25ce2:	4620      	mov	r0, r4
}
   25ce4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   25ce8:	f7ff bfcf 	b.w	25c8a <uECC_vli_sub>
}
   25cec:	bd70      	pop	{r4, r5, r6, pc}

00025cee <uECC_vli_modSub>:
{
   25cee:	b570      	push	{r4, r5, r6, lr}
   25cf0:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   25cf4:	461d      	mov	r5, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   25cf6:	4633      	mov	r3, r6
{
   25cf8:	4604      	mov	r4, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   25cfa:	f7ff ffc6 	bl	25c8a <uECC_vli_sub>
	if (l_borrow) {
   25cfe:	b138      	cbz	r0, 25d10 <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   25d00:	4633      	mov	r3, r6
   25d02:	462a      	mov	r2, r5
   25d04:	4621      	mov	r1, r4
   25d06:	4620      	mov	r0, r4
}
   25d08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   25d0c:	f7ff be89 	b.w	25a22 <uECC_vli_add>
}
   25d10:	bd70      	pop	{r4, r5, r6, pc}

00025d12 <uECC_vli_mmod>:
{
   25d12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25d16:	b0a5      	sub	sp, #148	; 0x94
   25d18:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   25d1a:	ab14      	add	r3, sp, #80	; 0x50
   25d1c:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   25d20:	4680      	mov	r8, r0
			   uECC_vli_numBits(mod, num_words);
   25d22:	4629      	mov	r1, r5
   25d24:	4610      	mov	r0, r2
{
   25d26:	4616      	mov	r6, r2
			   uECC_vli_numBits(mod, num_words);
   25d28:	f7ff ff58 	bl	25bdc <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   25d2c:	ebc0 1485 	rsb	r4, r0, r5, lsl #6
   25d30:	b224      	sxth	r4, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   25d32:	2c00      	cmp	r4, #0
   25d34:	4621      	mov	r1, r4
   25d36:	bfb8      	it	lt
   25d38:	f104 011f 	addlt.w	r1, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   25d3c:	4263      	negs	r3, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   25d3e:	f341 1147 	sbfx	r1, r1, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   25d42:	f003 031f 	and.w	r3, r3, #31
	uECC_vli_clear(mod_multiple, word_shift);
   25d46:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   25d48:	f004 071f 	and.w	r7, r4, #31
   25d4c:	bf58      	it	pl
   25d4e:	425f      	negpl	r7, r3
	uECC_vli_clear(mod_multiple, word_shift);
   25d50:	f7ff ff20 	bl	25b94 <uECC_vli_clear>
	if (bit_shift > 0) {
   25d54:	2f00      	cmp	r7, #0
   25d56:	b208      	sxth	r0, r1
   25d58:	dd2b      	ble.n	25db2 <uECC_vli_mmod+0xa0>
   25d5a:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   25d5c:	2200      	movs	r2, #0
   25d5e:	eb03 0180 	add.w	r1, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   25d62:	f1c7 0e20 	rsb	lr, r7, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   25d66:	4613      	mov	r3, r2
   25d68:	429d      	cmp	r5, r3
   25d6a:	d817      	bhi.n	25d9c <uECC_vli_mmod+0x8a>
		for (i = 0; i < num_words * 2; ++i) {
   25d6c:	006b      	lsls	r3, r5, #1
   25d6e:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   25d70:	ab04      	add	r3, sp, #16
   25d72:	eb03 0985 	add.w	r9, r3, r5, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   25d76:	1e6f      	subs	r7, r5, #1
   25d78:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   25d7a:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   25d7c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	for (index = 1; shift >= 0; --shift) {
   25d80:	2c00      	cmp	r4, #0
   25d82:	da54      	bge.n	25e2e <uECC_vli_mmod+0x11c>
	uECC_vli_set(result, v[index], num_words);
   25d84:	ab24      	add	r3, sp, #144	; 0x90
   25d86:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   25d8a:	462a      	mov	r2, r5
   25d8c:	f856 1c88 	ldr.w	r1, [r6, #-136]
   25d90:	4640      	mov	r0, r8
   25d92:	f7ff ff44 	bl	25c1e <uECC_vli_set>
}
   25d96:	b025      	add	sp, #148	; 0x94
   25d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   25d9c:	f856 c023 	ldr.w	ip, [r6, r3, lsl #2]
   25da0:	fa0c f007 	lsl.w	r0, ip, r7
   25da4:	4302      	orrs	r2, r0
   25da6:	f841 2b04 	str.w	r2, [r1], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   25daa:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   25dac:	fa2c f20e 	lsr.w	r2, ip, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   25db0:	e7da      	b.n	25d68 <uECC_vli_mmod+0x56>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   25db2:	ab04      	add	r3, sp, #16
   25db4:	462a      	mov	r2, r5
   25db6:	4631      	mov	r1, r6
   25db8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   25dbc:	f7ff ff2f 	bl	25c1e <uECC_vli_set>
   25dc0:	e7d4      	b.n	25d6c <uECC_vli_mmod+0x5a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   25dc2:	fa0f fe82 	sxth.w	lr, r2
   25dc6:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   25dca:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   25dce:	ab24      	add	r3, sp, #144	; 0x90
   25dd0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   25dd4:	3001      	adds	r0, #1
   25dd6:	f852 3c80 	ldr.w	r3, [r2, #-128]
   25dda:	440b      	add	r3, r1
   25ddc:	ebbb 0303 	subs.w	r3, fp, r3
   25de0:	bf34      	ite	cc
   25de2:	2201      	movcc	r2, #1
   25de4:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   25de6:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   25de8:	bf18      	it	ne
   25dea:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   25dec:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   25df0:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   25df4:	9b01      	ldr	r3, [sp, #4]
   25df6:	b242      	sxtb	r2, r0
   25df8:	429a      	cmp	r2, r3
   25dfa:	dbe2      	blt.n	25dc2 <uECC_vli_mmod+0xb0>
		index = !(index ^ borrow);
   25dfc:	1a73      	subs	r3, r6, r1
   25dfe:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   25e00:	4629      	mov	r1, r5
   25e02:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   25e04:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   25e06:	f7ff fe24 	bl	25a52 <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   25e0a:	ab24      	add	r3, sp, #144	; 0x90
   25e0c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   25e10:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   25e12:	f853 2c80 	ldr.w	r2, [r3, #-128]
   25e16:	f857 3c80 	ldr.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   25e1a:	4648      	mov	r0, r9
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   25e1c:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
	for (index = 1; shift >= 0; --shift) {
   25e20:	3c01      	subs	r4, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   25e22:	f847 3c80 	str.w	r3, [r7, #-128]
	for (index = 1; shift >= 0; --shift) {
   25e26:	b224      	sxth	r4, r4
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   25e28:	f7ff fe13 	bl	25a52 <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   25e2c:	e7a8      	b.n	25d80 <uECC_vli_mmod+0x6e>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   25e2e:	ab24      	add	r3, sp, #144	; 0x90
   25e30:	2000      	movs	r0, #0
			v[1 - index][i] = diff;
   25e32:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   25e36:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   25e38:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   25e3c:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   25e40:	e7d8      	b.n	25df4 <uECC_vli_mmod+0xe2>

00025e42 <uECC_vli_modMult_fast>:
{
   25e42:	b530      	push	{r4, r5, lr}
   25e44:	461c      	mov	r4, r3
   25e46:	b091      	sub	sp, #68	; 0x44
   25e48:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   25e4a:	f993 3000 	ldrsb.w	r3, [r3]
   25e4e:	4668      	mov	r0, sp
   25e50:	f7ff fe28 	bl	25aa4 <uECC_vli_mult>
	curve->mmod_fast(result, product);
   25e54:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   25e58:	4669      	mov	r1, sp
   25e5a:	4628      	mov	r0, r5
   25e5c:	4798      	blx	r3
}
   25e5e:	b011      	add	sp, #68	; 0x44
   25e60:	bd30      	pop	{r4, r5, pc}

00025e62 <uECC_vli_modSquare_fast>:
{
   25e62:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   25e64:	460a      	mov	r2, r1
   25e66:	f7ff bfec 	b.w	25e42 <uECC_vli_modMult_fast>

00025e6a <double_jacobian_default>:
{
   25e6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   25e6e:	f993 6000 	ldrsb.w	r6, [r3]
{
   25e72:	b092      	sub	sp, #72	; 0x48
   25e74:	4604      	mov	r4, r0
   25e76:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   25e78:	4610      	mov	r0, r2
   25e7a:	4631      	mov	r1, r6
{
   25e7c:	4615      	mov	r5, r2
   25e7e:	461f      	mov	r7, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   25e80:	f7ff fe93 	bl	25baa <uECC_vli_isZero>
   25e84:	2800      	cmp	r0, #0
   25e86:	f040 8091 	bne.w	25fac <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   25e8a:	463a      	mov	r2, r7
   25e8c:	4649      	mov	r1, r9
   25e8e:	a802      	add	r0, sp, #8
   25e90:	f7ff ffe7 	bl	25e62 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   25e94:	463b      	mov	r3, r7
   25e96:	aa02      	add	r2, sp, #8
   25e98:	4621      	mov	r1, r4
   25e9a:	a80a      	add	r0, sp, #40	; 0x28
   25e9c:	f7ff ffd1 	bl	25e42 <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   25ea0:	a902      	add	r1, sp, #8
   25ea2:	4608      	mov	r0, r1
   25ea4:	463a      	mov	r2, r7
   25ea6:	f7ff ffdc 	bl	25e62 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   25eaa:	463b      	mov	r3, r7
   25eac:	462a      	mov	r2, r5
   25eae:	4649      	mov	r1, r9
   25eb0:	4648      	mov	r0, r9
   25eb2:	f7ff ffc6 	bl	25e42 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   25eb6:	f107 0804 	add.w	r8, r7, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   25eba:	463a      	mov	r2, r7
   25ebc:	4629      	mov	r1, r5
   25ebe:	4628      	mov	r0, r5
   25ec0:	f7ff ffcf 	bl	25e62 <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   25ec4:	4643      	mov	r3, r8
   25ec6:	462a      	mov	r2, r5
   25ec8:	4621      	mov	r1, r4
   25eca:	4620      	mov	r0, r4
   25ecc:	9600      	str	r6, [sp, #0]
   25ece:	f7ff fef5 	bl	25cbc <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   25ed2:	4643      	mov	r3, r8
   25ed4:	462a      	mov	r2, r5
   25ed6:	4629      	mov	r1, r5
   25ed8:	4628      	mov	r0, r5
   25eda:	9600      	str	r6, [sp, #0]
   25edc:	f7ff feee 	bl	25cbc <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   25ee0:	4643      	mov	r3, r8
   25ee2:	462a      	mov	r2, r5
   25ee4:	4621      	mov	r1, r4
   25ee6:	4628      	mov	r0, r5
   25ee8:	9600      	str	r6, [sp, #0]
   25eea:	f7ff ff00 	bl	25cee <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   25eee:	463b      	mov	r3, r7
   25ef0:	462a      	mov	r2, r5
   25ef2:	4621      	mov	r1, r4
   25ef4:	4620      	mov	r0, r4
   25ef6:	f7ff ffa4 	bl	25e42 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   25efa:	4643      	mov	r3, r8
   25efc:	4622      	mov	r2, r4
   25efe:	4621      	mov	r1, r4
   25f00:	4628      	mov	r0, r5
   25f02:	9600      	str	r6, [sp, #0]
   25f04:	f7ff feda 	bl	25cbc <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   25f08:	4643      	mov	r3, r8
   25f0a:	9600      	str	r6, [sp, #0]
   25f0c:	462a      	mov	r2, r5
   25f0e:	4621      	mov	r1, r4
   25f10:	4620      	mov	r0, r4
   25f12:	f7ff fed3 	bl	25cbc <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   25f16:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   25f18:	07db      	lsls	r3, r3, #31
   25f1a:	d54a      	bpl.n	25fb2 <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   25f1c:	4633      	mov	r3, r6
   25f1e:	4642      	mov	r2, r8
   25f20:	4621      	mov	r1, r4
   25f22:	4620      	mov	r0, r4
   25f24:	f7ff fd7d 	bl	25a22 <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   25f28:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   25f2a:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   25f2c:	4620      	mov	r0, r4
   25f2e:	f7ff fd90 	bl	25a52 <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   25f32:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   25f36:	3b01      	subs	r3, #1
   25f38:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   25f3c:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   25f40:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   25f44:	463a      	mov	r2, r7
   25f46:	4621      	mov	r1, r4
   25f48:	4628      	mov	r0, r5
   25f4a:	f7ff ff8a 	bl	25e62 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   25f4e:	4643      	mov	r3, r8
   25f50:	aa0a      	add	r2, sp, #40	; 0x28
   25f52:	4629      	mov	r1, r5
   25f54:	4628      	mov	r0, r5
   25f56:	9600      	str	r6, [sp, #0]
   25f58:	f7ff fec9 	bl	25cee <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   25f5c:	4643      	mov	r3, r8
   25f5e:	aa0a      	add	r2, sp, #40	; 0x28
   25f60:	4629      	mov	r1, r5
   25f62:	4628      	mov	r0, r5
   25f64:	9600      	str	r6, [sp, #0]
   25f66:	f7ff fec2 	bl	25cee <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   25f6a:	a90a      	add	r1, sp, #40	; 0x28
   25f6c:	4608      	mov	r0, r1
   25f6e:	4643      	mov	r3, r8
   25f70:	462a      	mov	r2, r5
   25f72:	9600      	str	r6, [sp, #0]
   25f74:	f7ff febb 	bl	25cee <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   25f78:	463b      	mov	r3, r7
   25f7a:	aa0a      	add	r2, sp, #40	; 0x28
   25f7c:	4621      	mov	r1, r4
   25f7e:	4620      	mov	r0, r4
   25f80:	f7ff ff5f 	bl	25e42 <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   25f84:	aa02      	add	r2, sp, #8
   25f86:	4643      	mov	r3, r8
   25f88:	4610      	mov	r0, r2
   25f8a:	4621      	mov	r1, r4
   25f8c:	9600      	str	r6, [sp, #0]
   25f8e:	f7ff feae 	bl	25cee <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   25f92:	4632      	mov	r2, r6
   25f94:	4629      	mov	r1, r5
   25f96:	4620      	mov	r0, r4
   25f98:	f7ff fe41 	bl	25c1e <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   25f9c:	4649      	mov	r1, r9
   25f9e:	4628      	mov	r0, r5
   25fa0:	f7ff fe3d 	bl	25c1e <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   25fa4:	a902      	add	r1, sp, #8
   25fa6:	4648      	mov	r0, r9
   25fa8:	f7ff fe39 	bl	25c1e <uECC_vli_set>
}
   25fac:	b012      	add	sp, #72	; 0x48
   25fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   25fb2:	4631      	mov	r1, r6
   25fb4:	4620      	mov	r0, r4
   25fb6:	f7ff fd4c 	bl	25a52 <uECC_vli_rshift1>
   25fba:	e7c3      	b.n	25f44 <double_jacobian_default+0xda>

00025fbc <x_side_default>:
{
   25fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25fc0:	4615      	mov	r5, r2
   25fc2:	b08a      	sub	sp, #40	; 0x28
   25fc4:	4604      	mov	r4, r0
   25fc6:	460e      	mov	r6, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   25fc8:	221c      	movs	r2, #28
   25fca:	2100      	movs	r1, #0
   25fcc:	a803      	add	r0, sp, #12
   25fce:	f004 fa15 	bl	2a3fc <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   25fd2:	1d2f      	adds	r7, r5, #4
	wordcount_t num_words = curve->num_words;
   25fd4:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   25fd8:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   25fda:	462a      	mov	r2, r5
   25fdc:	4631      	mov	r1, r6
   25fde:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   25fe0:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   25fe2:	f7ff ff3e 	bl	25e62 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   25fe6:	463b      	mov	r3, r7
   25fe8:	aa02      	add	r2, sp, #8
   25fea:	4621      	mov	r1, r4
   25fec:	4620      	mov	r0, r4
   25fee:	f8cd 8000 	str.w	r8, [sp]
   25ff2:	f7ff fe7c 	bl	25cee <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   25ff6:	462b      	mov	r3, r5
   25ff8:	4632      	mov	r2, r6
   25ffa:	4621      	mov	r1, r4
   25ffc:	4620      	mov	r0, r4
   25ffe:	f7ff ff20 	bl	25e42 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   26002:	f8cd 8000 	str.w	r8, [sp]
   26006:	463b      	mov	r3, r7
   26008:	f105 0284 	add.w	r2, r5, #132	; 0x84
   2600c:	4621      	mov	r1, r4
   2600e:	4620      	mov	r0, r4
   26010:	f7ff fe54 	bl	25cbc <uECC_vli_modAdd>
}
   26014:	b00a      	add	sp, #40	; 0x28
   26016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002601a <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   2601a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2601e:	b09a      	sub	sp, #104	; 0x68
   26020:	4616      	mov	r6, r2
   26022:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   26026:	4644      	mov	r4, r8
{
   26028:	4699      	mov	r9, r3
	wordcount_t num_words = curve->num_words;
   2602a:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   2602e:	9500      	str	r5, [sp, #0]
{
   26030:	4607      	mov	r7, r0
   26032:	468a      	mov	sl, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   26034:	4623      	mov	r3, r4
   26036:	4602      	mov	r2, r0
   26038:	4631      	mov	r1, r6
   2603a:	a802      	add	r0, sp, #8
   2603c:	f7ff fe57 	bl	25cee <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   26040:	a902      	add	r1, sp, #8
   26042:	4642      	mov	r2, r8
   26044:	4608      	mov	r0, r1
   26046:	f7ff ff0c 	bl	25e62 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   2604a:	4643      	mov	r3, r8
   2604c:	aa02      	add	r2, sp, #8
   2604e:	4639      	mov	r1, r7
   26050:	4638      	mov	r0, r7
   26052:	f7ff fef6 	bl	25e42 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   26056:	4643      	mov	r3, r8
   26058:	aa02      	add	r2, sp, #8
   2605a:	4631      	mov	r1, r6
   2605c:	4630      	mov	r0, r6
   2605e:	f7ff fef0 	bl	25e42 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   26062:	4623      	mov	r3, r4
   26064:	4652      	mov	r2, sl
   26066:	4649      	mov	r1, r9
   26068:	a802      	add	r0, sp, #8
   2606a:	9500      	str	r5, [sp, #0]
   2606c:	f7ff fe26 	bl	25cbc <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   26070:	4623      	mov	r3, r4
   26072:	4652      	mov	r2, sl
   26074:	4649      	mov	r1, r9
   26076:	4648      	mov	r0, r9
   26078:	9500      	str	r5, [sp, #0]
   2607a:	f7ff fe38 	bl	25cee <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   2607e:	4623      	mov	r3, r4
   26080:	463a      	mov	r2, r7
   26082:	4631      	mov	r1, r6
   26084:	a80a      	add	r0, sp, #40	; 0x28
   26086:	9500      	str	r5, [sp, #0]
   26088:	f7ff fe31 	bl	25cee <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   2608c:	4643      	mov	r3, r8
   2608e:	aa0a      	add	r2, sp, #40	; 0x28
   26090:	4651      	mov	r1, sl
   26092:	4650      	mov	r0, sl
   26094:	f7ff fed5 	bl	25e42 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   26098:	4623      	mov	r3, r4
   2609a:	4632      	mov	r2, r6
   2609c:	4639      	mov	r1, r7
   2609e:	a80a      	add	r0, sp, #40	; 0x28
   260a0:	9500      	str	r5, [sp, #0]
   260a2:	f7ff fe0b 	bl	25cbc <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   260a6:	4642      	mov	r2, r8
   260a8:	4649      	mov	r1, r9
   260aa:	4630      	mov	r0, r6
   260ac:	f7ff fed9 	bl	25e62 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   260b0:	4623      	mov	r3, r4
   260b2:	aa0a      	add	r2, sp, #40	; 0x28
   260b4:	4631      	mov	r1, r6
   260b6:	4630      	mov	r0, r6
   260b8:	9500      	str	r5, [sp, #0]
   260ba:	f7ff fe18 	bl	25cee <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   260be:	4623      	mov	r3, r4
   260c0:	4632      	mov	r2, r6
   260c2:	4639      	mov	r1, r7
   260c4:	a812      	add	r0, sp, #72	; 0x48
   260c6:	9500      	str	r5, [sp, #0]
   260c8:	f7ff fe11 	bl	25cee <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   260cc:	4643      	mov	r3, r8
   260ce:	aa12      	add	r2, sp, #72	; 0x48
   260d0:	4649      	mov	r1, r9
   260d2:	4648      	mov	r0, r9
   260d4:	f7ff feb5 	bl	25e42 <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   260d8:	4623      	mov	r3, r4
   260da:	4652      	mov	r2, sl
   260dc:	4649      	mov	r1, r9
   260de:	4648      	mov	r0, r9
   260e0:	9500      	str	r5, [sp, #0]
   260e2:	f7ff fe04 	bl	25cee <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   260e6:	4642      	mov	r2, r8
   260e8:	a902      	add	r1, sp, #8
   260ea:	a812      	add	r0, sp, #72	; 0x48
   260ec:	f7ff feb9 	bl	25e62 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   260f0:	a912      	add	r1, sp, #72	; 0x48
   260f2:	4623      	mov	r3, r4
   260f4:	aa0a      	add	r2, sp, #40	; 0x28
   260f6:	4608      	mov	r0, r1
   260f8:	9500      	str	r5, [sp, #0]
   260fa:	f7ff fdf8 	bl	25cee <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   260fe:	4623      	mov	r3, r4
   26100:	463a      	mov	r2, r7
   26102:	a912      	add	r1, sp, #72	; 0x48
   26104:	a80a      	add	r0, sp, #40	; 0x28
   26106:	9500      	str	r5, [sp, #0]
   26108:	f7ff fdf1 	bl	25cee <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   2610c:	a90a      	add	r1, sp, #40	; 0x28
   2610e:	4643      	mov	r3, r8
   26110:	aa02      	add	r2, sp, #8
   26112:	4608      	mov	r0, r1
   26114:	f7ff fe95 	bl	25e42 <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   26118:	4623      	mov	r3, r4
   2611a:	4652      	mov	r2, sl
   2611c:	a90a      	add	r1, sp, #40	; 0x28
   2611e:	4650      	mov	r0, sl
   26120:	9500      	str	r5, [sp, #0]
   26122:	f7ff fde4 	bl	25cee <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   26126:	462a      	mov	r2, r5
   26128:	a912      	add	r1, sp, #72	; 0x48
   2612a:	4638      	mov	r0, r7
   2612c:	f7ff fd77 	bl	25c1e <uECC_vli_set>
}
   26130:	b01a      	add	sp, #104	; 0x68
   26132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00026136 <uECC_vli_modInv>:
{
   26136:	b5f0      	push	{r4, r5, r6, r7, lr}
   26138:	460f      	mov	r7, r1
   2613a:	b0a1      	sub	sp, #132	; 0x84
   2613c:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   2613e:	4619      	mov	r1, r3
   26140:	4638      	mov	r0, r7
{
   26142:	4615      	mov	r5, r2
   26144:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   26146:	f7ff fd30 	bl	25baa <uECC_vli_isZero>
   2614a:	b120      	cbz	r0, 26156 <uECC_vli_modInv+0x20>
		uECC_vli_clear(result, num_words);
   2614c:	4630      	mov	r0, r6
   2614e:	f7ff fd21 	bl	25b94 <uECC_vli_clear>
}
   26152:	b021      	add	sp, #132	; 0x84
   26154:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uECC_vli_set(a, input, num_words);
   26156:	4622      	mov	r2, r4
   26158:	4639      	mov	r1, r7
   2615a:	4668      	mov	r0, sp
   2615c:	f7ff fd5f 	bl	25c1e <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   26160:	4629      	mov	r1, r5
   26162:	a808      	add	r0, sp, #32
   26164:	f7ff fd5b 	bl	25c1e <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   26168:	a810      	add	r0, sp, #64	; 0x40
   2616a:	4621      	mov	r1, r4
   2616c:	f7ff fd12 	bl	25b94 <uECC_vli_clear>
	u[0] = 1;
   26170:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   26172:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   26174:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   26176:	f7ff fd0d 	bl	25b94 <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   2617a:	4622      	mov	r2, r4
   2617c:	a908      	add	r1, sp, #32
   2617e:	4668      	mov	r0, sp
   26180:	f7ff fd59 	bl	25c36 <uECC_vli_cmp_unsafe>
   26184:	b928      	cbnz	r0, 26192 <uECC_vli_modInv+0x5c>
  	uECC_vli_set(result, u, num_words);
   26186:	4622      	mov	r2, r4
   26188:	a910      	add	r1, sp, #64	; 0x40
   2618a:	4630      	mov	r0, r6
   2618c:	f7ff fd47 	bl	25c1e <uECC_vli_set>
   26190:	e7df      	b.n	26152 <uECC_vli_modInv+0x1c>
		if (EVEN(a)) {
   26192:	9b00      	ldr	r3, [sp, #0]
   26194:	07da      	lsls	r2, r3, #31
   26196:	d409      	bmi.n	261ac <uECC_vli_modInv+0x76>
			uECC_vli_rshift1(a, num_words);
   26198:	4621      	mov	r1, r4
   2619a:	4668      	mov	r0, sp
   2619c:	f7ff fc59 	bl	25a52 <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   261a0:	4622      	mov	r2, r4
   261a2:	4629      	mov	r1, r5
   261a4:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   261a6:	f7ff fc61 	bl	25a6c <vli_modInv_update>
   261aa:	e7e6      	b.n	2617a <uECC_vli_modInv+0x44>
    		} else if (EVEN(b)) {
   261ac:	9b08      	ldr	r3, [sp, #32]
   261ae:	07db      	lsls	r3, r3, #31
   261b0:	d407      	bmi.n	261c2 <uECC_vli_modInv+0x8c>
			uECC_vli_rshift1(b, num_words);
   261b2:	4621      	mov	r1, r4
   261b4:	a808      	add	r0, sp, #32
   261b6:	f7ff fc4c 	bl	25a52 <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   261ba:	4622      	mov	r2, r4
   261bc:	4629      	mov	r1, r5
   261be:	a818      	add	r0, sp, #96	; 0x60
   261c0:	e7f1      	b.n	261a6 <uECC_vli_modInv+0x70>
		} else if (cmpResult > 0) {
   261c2:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   261c4:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   261c6:	dd1c      	ble.n	26202 <uECC_vli_modInv+0xcc>
			uECC_vli_sub(a, a, b, num_words);
   261c8:	aa08      	add	r2, sp, #32
   261ca:	4669      	mov	r1, sp
   261cc:	4668      	mov	r0, sp
   261ce:	f7ff fd5c 	bl	25c8a <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   261d2:	4621      	mov	r1, r4
   261d4:	4668      	mov	r0, sp
   261d6:	f7ff fc3c 	bl	25a52 <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   261da:	4622      	mov	r2, r4
   261dc:	a918      	add	r1, sp, #96	; 0x60
   261de:	a810      	add	r0, sp, #64	; 0x40
   261e0:	f7ff fd29 	bl	25c36 <uECC_vli_cmp_unsafe>
   261e4:	2800      	cmp	r0, #0
   261e6:	da05      	bge.n	261f4 <uECC_vli_modInv+0xbe>
        			uECC_vli_add(u, u, mod, num_words);
   261e8:	a910      	add	r1, sp, #64	; 0x40
   261ea:	4623      	mov	r3, r4
   261ec:	462a      	mov	r2, r5
   261ee:	4608      	mov	r0, r1
   261f0:	f7ff fc17 	bl	25a22 <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   261f4:	a910      	add	r1, sp, #64	; 0x40
   261f6:	4623      	mov	r3, r4
   261f8:	aa18      	add	r2, sp, #96	; 0x60
   261fa:	4608      	mov	r0, r1
   261fc:	f7ff fd45 	bl	25c8a <uECC_vli_sub>
   26200:	e7ce      	b.n	261a0 <uECC_vli_modInv+0x6a>
      			uECC_vli_sub(b, b, a, num_words);
   26202:	a908      	add	r1, sp, #32
   26204:	466a      	mov	r2, sp
   26206:	4608      	mov	r0, r1
   26208:	f7ff fd3f 	bl	25c8a <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   2620c:	4621      	mov	r1, r4
   2620e:	a808      	add	r0, sp, #32
   26210:	f7ff fc1f 	bl	25a52 <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   26214:	4622      	mov	r2, r4
   26216:	a910      	add	r1, sp, #64	; 0x40
   26218:	a818      	add	r0, sp, #96	; 0x60
   2621a:	f7ff fd0c 	bl	25c36 <uECC_vli_cmp_unsafe>
   2621e:	2800      	cmp	r0, #0
   26220:	da05      	bge.n	2622e <uECC_vli_modInv+0xf8>
        			uECC_vli_add(v, v, mod, num_words);
   26222:	a918      	add	r1, sp, #96	; 0x60
   26224:	4623      	mov	r3, r4
   26226:	462a      	mov	r2, r5
   26228:	4608      	mov	r0, r1
   2622a:	f7ff fbfa 	bl	25a22 <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   2622e:	a918      	add	r1, sp, #96	; 0x60
   26230:	4623      	mov	r3, r4
   26232:	aa10      	add	r2, sp, #64	; 0x40
   26234:	4608      	mov	r0, r1
   26236:	f7ff fd28 	bl	25c8a <uECC_vli_sub>
   2623a:	e7be      	b.n	261ba <uECC_vli_modInv+0x84>

0002623c <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   2623c:	7809      	ldrb	r1, [r1, #0]
   2623e:	0049      	lsls	r1, r1, #1
   26240:	b249      	sxtb	r1, r1
   26242:	f7ff bcb2 	b.w	25baa <uECC_vli_isZero>

00026246 <apply_z>:
{
   26246:	b5f0      	push	{r4, r5, r6, r7, lr}
   26248:	4615      	mov	r5, r2
   2624a:	b089      	sub	sp, #36	; 0x24
   2624c:	461c      	mov	r4, r3
   2624e:	4607      	mov	r7, r0
   26250:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   26252:	461a      	mov	r2, r3
   26254:	4629      	mov	r1, r5
   26256:	4668      	mov	r0, sp
   26258:	f7ff fe03 	bl	25e62 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   2625c:	4623      	mov	r3, r4
   2625e:	466a      	mov	r2, sp
   26260:	4639      	mov	r1, r7
   26262:	4638      	mov	r0, r7
   26264:	f7ff fded 	bl	25e42 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   26268:	4623      	mov	r3, r4
   2626a:	462a      	mov	r2, r5
   2626c:	4669      	mov	r1, sp
   2626e:	4668      	mov	r0, sp
   26270:	f7ff fde7 	bl	25e42 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   26274:	4623      	mov	r3, r4
   26276:	466a      	mov	r2, sp
   26278:	4631      	mov	r1, r6
   2627a:	4630      	mov	r0, r6
   2627c:	f7ff fde1 	bl	25e42 <uECC_vli_modMult_fast>
}
   26280:	b009      	add	sp, #36	; 0x24
   26282:	bdf0      	pop	{r4, r5, r6, r7, pc}

00026284 <XYcZ_add>:
{
   26284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26288:	b08a      	sub	sp, #40	; 0x28
   2628a:	4614      	mov	r4, r2
   2628c:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	wordcount_t num_words = curve->num_words;
   26290:	4655      	mov	r5, sl
{
   26292:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   26294:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   26298:	9600      	str	r6, [sp, #0]
{
   2629a:	4680      	mov	r8, r0
   2629c:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   2629e:	462b      	mov	r3, r5
   262a0:	4602      	mov	r2, r0
   262a2:	4621      	mov	r1, r4
   262a4:	a802      	add	r0, sp, #8
   262a6:	f7ff fd22 	bl	25cee <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   262aa:	a902      	add	r1, sp, #8
   262ac:	4652      	mov	r2, sl
   262ae:	4608      	mov	r0, r1
   262b0:	f7ff fdd7 	bl	25e62 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   262b4:	4653      	mov	r3, sl
   262b6:	aa02      	add	r2, sp, #8
   262b8:	4641      	mov	r1, r8
   262ba:	4640      	mov	r0, r8
   262bc:	f7ff fdc1 	bl	25e42 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   262c0:	4653      	mov	r3, sl
   262c2:	aa02      	add	r2, sp, #8
   262c4:	4621      	mov	r1, r4
   262c6:	4620      	mov	r0, r4
   262c8:	f7ff fdbb 	bl	25e42 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   262cc:	462b      	mov	r3, r5
   262ce:	464a      	mov	r2, r9
   262d0:	4639      	mov	r1, r7
   262d2:	4638      	mov	r0, r7
   262d4:	9600      	str	r6, [sp, #0]
   262d6:	f7ff fd0a 	bl	25cee <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   262da:	4652      	mov	r2, sl
   262dc:	4639      	mov	r1, r7
   262de:	a802      	add	r0, sp, #8
   262e0:	f7ff fdbf 	bl	25e62 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   262e4:	a902      	add	r1, sp, #8
   262e6:	462b      	mov	r3, r5
   262e8:	4642      	mov	r2, r8
   262ea:	4608      	mov	r0, r1
   262ec:	9600      	str	r6, [sp, #0]
   262ee:	f7ff fcfe 	bl	25cee <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   262f2:	a902      	add	r1, sp, #8
   262f4:	462b      	mov	r3, r5
   262f6:	4622      	mov	r2, r4
   262f8:	4608      	mov	r0, r1
   262fa:	9600      	str	r6, [sp, #0]
   262fc:	f7ff fcf7 	bl	25cee <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   26300:	462b      	mov	r3, r5
   26302:	4642      	mov	r2, r8
   26304:	4621      	mov	r1, r4
   26306:	4620      	mov	r0, r4
   26308:	9600      	str	r6, [sp, #0]
   2630a:	f7ff fcf0 	bl	25cee <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   2630e:	4653      	mov	r3, sl
   26310:	4622      	mov	r2, r4
   26312:	4649      	mov	r1, r9
   26314:	4648      	mov	r0, r9
   26316:	f7ff fd94 	bl	25e42 <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   2631a:	462b      	mov	r3, r5
   2631c:	aa02      	add	r2, sp, #8
   2631e:	4641      	mov	r1, r8
   26320:	4620      	mov	r0, r4
   26322:	9600      	str	r6, [sp, #0]
   26324:	f7ff fce3 	bl	25cee <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   26328:	4653      	mov	r3, sl
   2632a:	4622      	mov	r2, r4
   2632c:	4639      	mov	r1, r7
   2632e:	4638      	mov	r0, r7
   26330:	f7ff fd87 	bl	25e42 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   26334:	462b      	mov	r3, r5
   26336:	464a      	mov	r2, r9
   26338:	4639      	mov	r1, r7
   2633a:	4638      	mov	r0, r7
   2633c:	9600      	str	r6, [sp, #0]
   2633e:	f7ff fcd6 	bl	25cee <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   26342:	4632      	mov	r2, r6
   26344:	a902      	add	r1, sp, #8
   26346:	4620      	mov	r0, r4
   26348:	f7ff fc69 	bl	25c1e <uECC_vli_set>
}
   2634c:	b00a      	add	sp, #40	; 0x28
   2634e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00026352 <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   26352:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26356:	b0b1      	sub	sp, #196	; 0xc4
   26358:	e9cd 0103 	strd	r0, r1, [sp, #12]
   2635c:	9c3b      	ldr	r4, [sp, #236]	; 0xec
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   2635e:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   26362:	a818      	add	r0, sp, #96	; 0x60
{
   26364:	4692      	mov	sl, r2
	uECC_vli_set(Rx[1], point, num_words);
   26366:	463a      	mov	r2, r7
{
   26368:	461e      	mov	r6, r3
	uECC_vli_set(Rx[1], point, num_words);
   2636a:	f7ff fc58 	bl	25c1e <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   2636e:	00bb      	lsls	r3, r7, #2
   26370:	9305      	str	r3, [sp, #20]
   26372:	9b04      	ldr	r3, [sp, #16]
   26374:	eb03 0387 	add.w	r3, r3, r7, lsl #2
   26378:	4619      	mov	r1, r3
   2637a:	a828      	add	r0, sp, #160	; 0xa0
   2637c:	9302      	str	r3, [sp, #8]
   2637e:	f7ff fc4e 	bl	25c1e <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   26382:	f994 5000 	ldrsb.w	r5, [r4]
	if (initial_Z) {
   26386:	2e00      	cmp	r6, #0
   26388:	f000 8088 	beq.w	2649c <EccPoint_mult+0x14a>
		uECC_vli_set(z, initial_Z, num_words);
   2638c:	462a      	mov	r2, r5
   2638e:	4631      	mov	r1, r6
   26390:	a808      	add	r0, sp, #32
   26392:	f7ff fc44 	bl	25c1e <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   26396:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   2639a:	462a      	mov	r2, r5
   2639c:	a918      	add	r1, sp, #96	; 0x60
   2639e:	4640      	mov	r0, r8
	uECC_vli_set(Y2, Y1, num_words);
   263a0:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   263a4:	f7ff fc3b 	bl	25c1e <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   263a8:	a928      	add	r1, sp, #160	; 0xa0
   263aa:	4648      	mov	r0, r9
   263ac:	f7ff fc37 	bl	25c1e <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   263b0:	4623      	mov	r3, r4
   263b2:	aa08      	add	r2, sp, #32
   263b4:	a928      	add	r1, sp, #160	; 0xa0
   263b6:	a818      	add	r0, sp, #96	; 0x60
   263b8:	f7ff ff45 	bl	26246 <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   263bc:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   263c0:	4623      	mov	r3, r4
   263c2:	aa08      	add	r2, sp, #32
   263c4:	a928      	add	r1, sp, #160	; 0xa0
   263c6:	a818      	add	r0, sp, #96	; 0x60
   263c8:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   263ca:	4623      	mov	r3, r4
   263cc:	aa08      	add	r2, sp, #32
   263ce:	4649      	mov	r1, r9
   263d0:	4640      	mov	r0, r8
   263d2:	f7ff ff38 	bl	26246 <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   263d6:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   263da:	3d02      	subs	r5, #2
   263dc:	b22d      	sxth	r5, r5
   263de:	2d00      	cmp	r5, #0
   263e0:	dc63      	bgt.n	264aa <EccPoint_mult+0x158>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   263e2:	f8da 5000 	ldr.w	r5, [sl]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   263e6:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   263e8:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   263ec:	ab10      	add	r3, sp, #64	; 0x40
   263ee:	eb03 1846 	add.w	r8, r3, r6, lsl #5
   263f2:	43ed      	mvns	r5, r5
   263f4:	ab20      	add	r3, sp, #128	; 0x80
   263f6:	eb03 1646 	add.w	r6, r3, r6, lsl #5
   263fa:	f005 0501 	and.w	r5, r5, #1
   263fe:	ab10      	add	r3, sp, #64	; 0x40
   26400:	eb03 1945 	add.w	r9, r3, r5, lsl #5
   26404:	ab20      	add	r3, sp, #128	; 0x80
   26406:	eb03 1545 	add.w	r5, r3, r5, lsl #5

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   2640a:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   2640e:	462b      	mov	r3, r5
   26410:	464a      	mov	r2, r9
   26412:	4631      	mov	r1, r6
   26414:	4640      	mov	r0, r8
   26416:	f7ff fe00 	bl	2601a <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   2641a:	4653      	mov	r3, sl
   2641c:	aa10      	add	r2, sp, #64	; 0x40
   2641e:	a918      	add	r1, sp, #96	; 0x60
   26420:	a808      	add	r0, sp, #32
   26422:	9700      	str	r7, [sp, #0]
   26424:	f7ff fc63 	bl	25cee <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   26428:	a908      	add	r1, sp, #32
   2642a:	4623      	mov	r3, r4
   2642c:	4632      	mov	r2, r6
   2642e:	4608      	mov	r0, r1
   26430:	f7ff fd07 	bl	25e42 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   26434:	a908      	add	r1, sp, #32
   26436:	9a04      	ldr	r2, [sp, #16]
   26438:	4623      	mov	r3, r4
   2643a:	4608      	mov	r0, r1
   2643c:	f7ff fd01 	bl	25e42 <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   26440:	a908      	add	r1, sp, #32
   26442:	463b      	mov	r3, r7
   26444:	4652      	mov	r2, sl
   26446:	4608      	mov	r0, r1
   26448:	f7ff fe75 	bl	26136 <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   2644c:	a908      	add	r1, sp, #32
   2644e:	9a02      	ldr	r2, [sp, #8]
   26450:	4623      	mov	r3, r4
   26452:	4608      	mov	r0, r1
   26454:	f7ff fcf5 	bl	25e42 <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   26458:	a908      	add	r1, sp, #32
   2645a:	4623      	mov	r3, r4
   2645c:	4642      	mov	r2, r8
   2645e:	4608      	mov	r0, r1
   26460:	f7ff fcef 	bl	25e42 <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   26464:	9400      	str	r4, [sp, #0]
   26466:	4633      	mov	r3, r6
   26468:	4642      	mov	r2, r8
   2646a:	4629      	mov	r1, r5
   2646c:	4648      	mov	r0, r9
   2646e:	f7ff ff09 	bl	26284 <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   26472:	4623      	mov	r3, r4
   26474:	aa08      	add	r2, sp, #32
   26476:	a920      	add	r1, sp, #128	; 0x80
   26478:	a810      	add	r0, sp, #64	; 0x40
   2647a:	f7ff fee4 	bl	26246 <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   2647e:	9803      	ldr	r0, [sp, #12]
   26480:	463a      	mov	r2, r7
   26482:	a910      	add	r1, sp, #64	; 0x40
   26484:	f7ff fbcb 	bl	25c1e <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   26488:	9b03      	ldr	r3, [sp, #12]
   2648a:	9c05      	ldr	r4, [sp, #20]
   2648c:	4423      	add	r3, r4
   2648e:	a920      	add	r1, sp, #128	; 0x80
   26490:	4618      	mov	r0, r3
   26492:	f7ff fbc4 	bl	25c1e <uECC_vli_set>
}
   26496:	b031      	add	sp, #196	; 0xc4
   26498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   2649c:	4629      	mov	r1, r5
   2649e:	a808      	add	r0, sp, #32
   264a0:	f7ff fb78 	bl	25b94 <uECC_vli_clear>
		z[0] = 1;
   264a4:	2301      	movs	r3, #1
   264a6:	9308      	str	r3, [sp, #32]
   264a8:	e775      	b.n	26396 <EccPoint_mult+0x44>
		nb = !uECC_vli_testBit(scalar, i);
   264aa:	4629      	mov	r1, r5
   264ac:	4650      	mov	r0, sl
   264ae:	f7ff fb8b 	bl	25bc8 <uECC_vli_testBit>
   264b2:	fab0 f680 	clz	r6, r0
   264b6:	0976      	lsrs	r6, r6, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   264b8:	f1c6 0101 	rsb	r1, r6, #1
   264bc:	eb08 1b46 	add.w	fp, r8, r6, lsl #5
   264c0:	eb09 1646 	add.w	r6, r9, r6, lsl #5
   264c4:	eb08 1041 	add.w	r0, r8, r1, lsl #5
   264c8:	4633      	mov	r3, r6
   264ca:	eb09 1141 	add.w	r1, r9, r1, lsl #5
   264ce:	465a      	mov	r2, fp
   264d0:	9400      	str	r4, [sp, #0]
   264d2:	e9cd 0106 	strd	r0, r1, [sp, #24]
   264d6:	f7ff fda0 	bl	2601a <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   264da:	9907      	ldr	r1, [sp, #28]
   264dc:	9806      	ldr	r0, [sp, #24]
   264de:	9400      	str	r4, [sp, #0]
   264e0:	460b      	mov	r3, r1
   264e2:	4602      	mov	r2, r0
   264e4:	4631      	mov	r1, r6
   264e6:	4658      	mov	r0, fp
   264e8:	f7ff fecc 	bl	26284 <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   264ec:	3d01      	subs	r5, #1
   264ee:	e775      	b.n	263dc <EccPoint_mult+0x8a>

000264f0 <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   264f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   264f4:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
   264f8:	f119 081f 	adds.w	r8, r9, #31
{
   264fc:	461d      	mov	r5, r3
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   264fe:	bf48      	it	mi
   26500:	f109 083e 	addmi.w	r8, r9, #62	; 0x3e
{
   26504:	460e      	mov	r6, r1
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   26506:	f348 1847 	sbfx	r8, r8, #5, #8

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   2650a:	3524      	adds	r5, #36	; 0x24
   2650c:	4601      	mov	r1, r0
{
   2650e:	4617      	mov	r7, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   26510:	4643      	mov	r3, r8
   26512:	462a      	mov	r2, r5
   26514:	4630      	mov	r0, r6
   26516:	f7ff fa84 	bl	25a22 <uECC_vli_add>
   2651a:	4604      	mov	r4, r0
   2651c:	b990      	cbnz	r0, 26544 <regularize_k+0x54>
   2651e:	ebb9 1f48 	cmp.w	r9, r8, lsl #5
   26522:	da06      	bge.n	26532 <regularize_k+0x42>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   26524:	4649      	mov	r1, r9
   26526:	4630      	mov	r0, r6
   26528:	f7ff fb4e 	bl	25bc8 <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   2652c:	1e04      	subs	r4, r0, #0
   2652e:	bf18      	it	ne
   26530:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   26532:	4643      	mov	r3, r8
   26534:	462a      	mov	r2, r5
   26536:	4631      	mov	r1, r6
   26538:	4638      	mov	r0, r7
   2653a:	f7ff fa72 	bl	25a22 <uECC_vli_add>

	return carry;
}
   2653e:	4620      	mov	r0, r4
   26540:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   26544:	2401      	movs	r4, #1
   26546:	e7f4      	b.n	26532 <regularize_k+0x42>

00026548 <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   26548:	b530      	push	{r4, r5, lr}
   2654a:	4614      	mov	r4, r2
   2654c:	b095      	sub	sp, #84	; 0x54
   2654e:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   26550:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   26552:	4623      	mov	r3, r4
{
   26554:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   26556:	a904      	add	r1, sp, #16
   26558:	9102      	str	r1, [sp, #8]
   2655a:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   2655c:	f7ff ffc8 	bl	264f0 <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   26560:	fab0 f380 	clz	r3, r0
   26564:	095b      	lsrs	r3, r3, #5
   26566:	aa14      	add	r2, sp, #80	; 0x50
   26568:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   2656c:	8863      	ldrh	r3, [r4, #2]
   2656e:	9401      	str	r4, [sp, #4]
   26570:	3301      	adds	r3, #1
   26572:	b21b      	sxth	r3, r3
   26574:	9300      	str	r3, [sp, #0]
   26576:	f852 2c48 	ldr.w	r2, [r2, #-72]
   2657a:	2300      	movs	r3, #0
   2657c:	f104 0144 	add.w	r1, r4, #68	; 0x44
   26580:	4628      	mov	r0, r5
   26582:	f7ff fee6 	bl	26352 <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   26586:	4621      	mov	r1, r4
   26588:	4628      	mov	r0, r5
   2658a:	f7ff fe57 	bl	2623c <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   2658e:	fab0 f080 	clz	r0, r0
   26592:	0940      	lsrs	r0, r0, #5
   26594:	b015      	add	sp, #84	; 0x54
   26596:	bd30      	pop	{r4, r5, pc}

00026598 <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   26598:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   2659a:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   2659c:	1e4f      	subs	r7, r1, #1
   2659e:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   265a0:	428c      	cmp	r4, r1
   265a2:	f105 0501 	add.w	r5, r5, #1
   265a6:	db00      	blt.n	265aa <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   265a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   265aa:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   265ac:	f023 0603 	bic.w	r6, r3, #3
   265b0:	f003 0303 	and.w	r3, r3, #3
   265b4:	5996      	ldr	r6, [r2, r6]
   265b6:	00db      	lsls	r3, r3, #3
   265b8:	fa26 f303 	lsr.w	r3, r6, r3
   265bc:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   265be:	e7ee      	b.n	2659e <uECC_vli_nativeToBytes+0x6>

000265c0 <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   265c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   265c2:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   265c4:	1cd1      	adds	r1, r2, #3
   265c6:	bf48      	it	mi
   265c8:	1d91      	addmi	r1, r2, #6
   265ca:	f341 0187 	sbfx	r1, r1, #2, #8
{
   265ce:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   265d0:	f7ff fae0 	bl	25b94 <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   265d4:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   265d6:	1e67      	subs	r7, r4, #1
   265d8:	b26a      	sxtb	r2, r5
	for (i = 0; i < num_bytes; ++i) {
   265da:	42a2      	cmp	r2, r4
   265dc:	f105 0501 	add.w	r5, r5, #1
   265e0:	db00      	blt.n	265e4 <uECC_vli_bytesToNative+0x24>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   265e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   265e4:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   265e6:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   265ea:	5cb2      	ldrb	r2, [r6, r2]
   265ec:	f003 0303 	and.w	r3, r3, #3
   265f0:	00db      	lsls	r3, r3, #3
   265f2:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   265f6:	5842      	ldr	r2, [r0, r1]
   265f8:	431a      	orrs	r2, r3
   265fa:	5042      	str	r2, [r0, r1]
	for (i = 0; i < num_bytes; ++i) {
   265fc:	e7ec      	b.n	265d8 <uECC_vli_bytesToNative+0x18>

000265fe <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   265fe:	b5f0      	push	{r4, r5, r6, r7, lr}
   26600:	b091      	sub	sp, #68	; 0x44
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   26602:	f991 6000 	ldrsb.w	r6, [r1]
{
   26606:	4605      	mov	r5, r0
   26608:	460c      	mov	r4, r1

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   2660a:	f7ff fe17 	bl	2623c <EccPoint_isZero>
   2660e:	bb28      	cbnz	r0, 2665c <uECC_valid_point+0x5e>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   26610:	1d27      	adds	r7, r4, #4
   26612:	4632      	mov	r2, r6
   26614:	4629      	mov	r1, r5
   26616:	4638      	mov	r0, r7
   26618:	f7ff fb0d 	bl	25c36 <uECC_vli_cmp_unsafe>
   2661c:	2801      	cmp	r0, #1
   2661e:	d120      	bne.n	26662 <uECC_valid_point+0x64>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   26620:	eb05 0186 	add.w	r1, r5, r6, lsl #2
   26624:	4632      	mov	r2, r6
   26626:	4638      	mov	r0, r7
   26628:	f7ff fb05 	bl	25c36 <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   2662c:	2801      	cmp	r0, #1
   2662e:	d118      	bne.n	26662 <uECC_valid_point+0x64>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   26630:	4622      	mov	r2, r4
   26632:	4668      	mov	r0, sp
   26634:	f7ff fc15 	bl	25e62 <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   26638:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   2663c:	4622      	mov	r2, r4
   2663e:	4629      	mov	r1, r5
   26640:	a808      	add	r0, sp, #32
   26642:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   26644:	4632      	mov	r2, r6
   26646:	a908      	add	r1, sp, #32
   26648:	4668      	mov	r0, sp
   2664a:	f7ff fb0b 	bl	25c64 <uECC_vli_equal>
   2664e:	2800      	cmp	r0, #0
		return -3;
   26650:	bf0c      	ite	eq
   26652:	2000      	moveq	r0, #0
   26654:	f06f 0002 	mvnne.w	r0, #2

	return 0;
}
   26658:	b011      	add	sp, #68	; 0x44
   2665a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   2665c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26660:	e7fa      	b.n	26658 <uECC_valid_point+0x5a>
		return -2;
   26662:	f06f 0001 	mvn.w	r0, #1
   26666:	e7f7      	b.n	26658 <uECC_valid_point+0x5a>

00026668 <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   26668:	b570      	push	{r4, r5, r6, lr}
   2666a:	460c      	mov	r4, r1
   2666c:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   2666e:	4626      	mov	r6, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   26670:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   26674:	4605      	mov	r5, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   26676:	4601      	mov	r1, r0
   26678:	4668      	mov	r0, sp
   2667a:	f7ff ffa1 	bl	265c0 <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   2667e:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   26682:	f916 0b44 	ldrsb.w	r0, [r6], #68
	uECC_vli_bytesToNative(
   26686:	18a9      	adds	r1, r5, r2
   26688:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   2668c:	f7ff ff98 	bl	265c0 <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   26690:	2210      	movs	r2, #16
   26692:	4631      	mov	r1, r6
   26694:	4668      	mov	r0, sp
   26696:	f7ff face 	bl	25c36 <uECC_vli_cmp_unsafe>
   2669a:	b128      	cbz	r0, 266a8 <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   2669c:	4621      	mov	r1, r4
   2669e:	4668      	mov	r0, sp
   266a0:	f7ff ffad 	bl	265fe <uECC_valid_point>
}
   266a4:	b010      	add	sp, #64	; 0x40
   266a6:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   266a8:	f06f 0003 	mvn.w	r0, #3
   266ac:	e7fa      	b.n	266a4 <uECC_valid_public_key+0x3c>

000266ae <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   266ae:	78cb      	ldrb	r3, [r1, #3]
   266b0:	7802      	ldrb	r2, [r0, #0]
   266b2:	4053      	eors	r3, r2
   266b4:	7003      	strb	r3, [r0, #0]
   266b6:	884b      	ldrh	r3, [r1, #2]
   266b8:	7842      	ldrb	r2, [r0, #1]
   266ba:	4053      	eors	r3, r2
   266bc:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   266be:	680a      	ldr	r2, [r1, #0]
   266c0:	7883      	ldrb	r3, [r0, #2]
   266c2:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   266c6:	7083      	strb	r3, [r0, #2]
   266c8:	680a      	ldr	r2, [r1, #0]
   266ca:	78c3      	ldrb	r3, [r0, #3]
   266cc:	4053      	eors	r3, r2
   266ce:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   266d0:	79cb      	ldrb	r3, [r1, #7]
   266d2:	7902      	ldrb	r2, [r0, #4]
   266d4:	4053      	eors	r3, r2
   266d6:	7103      	strb	r3, [r0, #4]
   266d8:	88cb      	ldrh	r3, [r1, #6]
   266da:	7942      	ldrb	r2, [r0, #5]
   266dc:	4053      	eors	r3, r2
   266de:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   266e0:	684a      	ldr	r2, [r1, #4]
   266e2:	7983      	ldrb	r3, [r0, #6]
   266e4:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   266e8:	7183      	strb	r3, [r0, #6]
   266ea:	684a      	ldr	r2, [r1, #4]
   266ec:	79c3      	ldrb	r3, [r0, #7]
   266ee:	4053      	eors	r3, r2
   266f0:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   266f2:	7acb      	ldrb	r3, [r1, #11]
   266f4:	7a02      	ldrb	r2, [r0, #8]
   266f6:	4053      	eors	r3, r2
   266f8:	7203      	strb	r3, [r0, #8]
   266fa:	7a42      	ldrb	r2, [r0, #9]
   266fc:	894b      	ldrh	r3, [r1, #10]
   266fe:	4053      	eors	r3, r2
   26700:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   26702:	688a      	ldr	r2, [r1, #8]
   26704:	7a83      	ldrb	r3, [r0, #10]
   26706:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2670a:	7283      	strb	r3, [r0, #10]
   2670c:	688a      	ldr	r2, [r1, #8]
   2670e:	7ac3      	ldrb	r3, [r0, #11]
   26710:	4053      	eors	r3, r2
   26712:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   26714:	7bcb      	ldrb	r3, [r1, #15]
   26716:	7b02      	ldrb	r2, [r0, #12]
   26718:	4053      	eors	r3, r2
   2671a:	7303      	strb	r3, [r0, #12]
   2671c:	89cb      	ldrh	r3, [r1, #14]
   2671e:	7b42      	ldrb	r2, [r0, #13]
   26720:	4053      	eors	r3, r2
   26722:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   26724:	68ca      	ldr	r2, [r1, #12]
   26726:	7b83      	ldrb	r3, [r0, #14]
   26728:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2672c:	7383      	strb	r3, [r0, #14]
   2672e:	68ca      	ldr	r2, [r1, #12]
   26730:	7bc3      	ldrb	r3, [r0, #15]
   26732:	4053      	eors	r3, r2
   26734:	73c3      	strb	r3, [r0, #15]
}
   26736:	4770      	bx	lr

00026738 <shift_rows>:
{
   26738:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   2673a:	7802      	ldrb	r2, [r0, #0]
   2673c:	f88d 2000 	strb.w	r2, [sp]
   26740:	7942      	ldrb	r2, [r0, #5]
   26742:	f88d 2001 	strb.w	r2, [sp, #1]
   26746:	7a82      	ldrb	r2, [r0, #10]
   26748:	f88d 2002 	strb.w	r2, [sp, #2]
   2674c:	7bc2      	ldrb	r2, [r0, #15]
   2674e:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   26752:	7902      	ldrb	r2, [r0, #4]
   26754:	f88d 2004 	strb.w	r2, [sp, #4]
   26758:	7a42      	ldrb	r2, [r0, #9]
   2675a:	f88d 2005 	strb.w	r2, [sp, #5]
   2675e:	7b82      	ldrb	r2, [r0, #14]
   26760:	f88d 2006 	strb.w	r2, [sp, #6]
   26764:	78c2      	ldrb	r2, [r0, #3]
   26766:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   2676a:	7a02      	ldrb	r2, [r0, #8]
   2676c:	f88d 2008 	strb.w	r2, [sp, #8]
   26770:	7b42      	ldrb	r2, [r0, #13]
   26772:	f88d 2009 	strb.w	r2, [sp, #9]
   26776:	7882      	ldrb	r2, [r0, #2]
   26778:	f88d 200a 	strb.w	r2, [sp, #10]
   2677c:	79c2      	ldrb	r2, [r0, #7]
   2677e:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   26782:	7b02      	ldrb	r2, [r0, #12]
   26784:	f88d 200c 	strb.w	r2, [sp, #12]
   26788:	7842      	ldrb	r2, [r0, #1]
   2678a:	7ac3      	ldrb	r3, [r0, #11]
   2678c:	f88d 200d 	strb.w	r2, [sp, #13]
   26790:	7982      	ldrb	r2, [r0, #6]
   26792:	f88d 200e 	strb.w	r2, [sp, #14]
   26796:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2679a:	2310      	movs	r3, #16
   2679c:	466a      	mov	r2, sp
   2679e:	4619      	mov	r1, r3
   267a0:	f7ff f879 	bl	25896 <_copy>
}
   267a4:	b005      	add	sp, #20
   267a6:	f85d fb04 	ldr.w	pc, [sp], #4

000267aa <mult_row_column>:
{
   267aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   267ac:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   267ae:	7808      	ldrb	r0, [r1, #0]
{
   267b0:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   267b2:	f7ff f87f 	bl	258b4 <_double_byte>
   267b6:	4605      	mov	r5, r0
   267b8:	7860      	ldrb	r0, [r4, #1]
   267ba:	f7ff f87b 	bl	258b4 <_double_byte>
   267be:	78a2      	ldrb	r2, [r4, #2]
   267c0:	7863      	ldrb	r3, [r4, #1]
   267c2:	4053      	eors	r3, r2
   267c4:	78e2      	ldrb	r2, [r4, #3]
   267c6:	4053      	eors	r3, r2
   267c8:	405d      	eors	r5, r3
   267ca:	4045      	eors	r5, r0
   267cc:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   267ce:	7860      	ldrb	r0, [r4, #1]
   267d0:	7827      	ldrb	r7, [r4, #0]
   267d2:	f7ff f86f 	bl	258b4 <_double_byte>
   267d6:	4605      	mov	r5, r0
   267d8:	78a0      	ldrb	r0, [r4, #2]
   267da:	f7ff f86b 	bl	258b4 <_double_byte>
   267de:	78a3      	ldrb	r3, [r4, #2]
   267e0:	405f      	eors	r7, r3
   267e2:	78e3      	ldrb	r3, [r4, #3]
   267e4:	405f      	eors	r7, r3
   267e6:	407d      	eors	r5, r7
   267e8:	4045      	eors	r5, r0
   267ea:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   267ec:	78a0      	ldrb	r0, [r4, #2]
   267ee:	7865      	ldrb	r5, [r4, #1]
   267f0:	7827      	ldrb	r7, [r4, #0]
   267f2:	f7ff f85f 	bl	258b4 <_double_byte>
   267f6:	406f      	eors	r7, r5
   267f8:	4605      	mov	r5, r0
   267fa:	78e0      	ldrb	r0, [r4, #3]
   267fc:	f7ff f85a 	bl	258b4 <_double_byte>
   26800:	78e3      	ldrb	r3, [r4, #3]
   26802:	405f      	eors	r7, r3
   26804:	407d      	eors	r5, r7
   26806:	4045      	eors	r5, r0
   26808:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   2680a:	7820      	ldrb	r0, [r4, #0]
   2680c:	f7ff f852 	bl	258b4 <_double_byte>
   26810:	7863      	ldrb	r3, [r4, #1]
   26812:	7825      	ldrb	r5, [r4, #0]
   26814:	405d      	eors	r5, r3
   26816:	78a3      	ldrb	r3, [r4, #2]
   26818:	405d      	eors	r5, r3
   2681a:	4045      	eors	r5, r0
   2681c:	78e0      	ldrb	r0, [r4, #3]
   2681e:	f7ff f849 	bl	258b4 <_double_byte>
   26822:	b2ed      	uxtb	r5, r5
   26824:	4045      	eors	r5, r0
   26826:	70f5      	strb	r5, [r6, #3]
}
   26828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002682a <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   2682a:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2682c:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   2682e:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   26830:	f912 3b10 	ldrsb.w	r3, [r2], #16
   26834:	2b00      	cmp	r3, #0
   26836:	bfb4      	ite	lt
   26838:	2387      	movlt	r3, #135	; 0x87
   2683a:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   2683c:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   26840:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   26844:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   26846:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   2684a:	d002      	beq.n	26852 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   2684c:	7813      	ldrb	r3, [r2, #0]
   2684e:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   26850:	e7f4      	b.n	2683c <gf_double+0x12>
	}
}
   26852:	bd10      	pop	{r4, pc}

00026854 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   26854:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   26856:	b120      	cbz	r0, 26862 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   26858:	2258      	movs	r2, #88	; 0x58
   2685a:	2100      	movs	r1, #0
   2685c:	f7ff f828 	bl	258b0 <_set>
   26860:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   26862:	bd08      	pop	{r3, pc}

00026864 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   26864:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   26866:	4604      	mov	r4, r0
   26868:	b188      	cbz	r0, 2688e <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2686a:	2210      	movs	r2, #16
   2686c:	2100      	movs	r1, #0
   2686e:	f7ff f81f 	bl	258b0 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   26872:	2210      	movs	r2, #16
   26874:	f104 0030 	add.w	r0, r4, #48	; 0x30
   26878:	2100      	movs	r1, #0
   2687a:	f7ff f819 	bl	258b0 <_set>
	s->leftover_offset = 0;
   2687e:	2300      	movs	r3, #0
   26880:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   26882:	2200      	movs	r2, #0
   26884:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   26888:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   2688c:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   2688e:	bd10      	pop	{r4, pc}

00026890 <tc_cmac_setup>:
{
   26890:	b570      	push	{r4, r5, r6, lr}
   26892:	460d      	mov	r5, r1
   26894:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   26896:	4604      	mov	r4, r0
   26898:	b310      	cbz	r0, 268e0 <tc_cmac_setup+0x50>
   2689a:	b311      	cbz	r1, 268e2 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   2689c:	2258      	movs	r2, #88	; 0x58
   2689e:	2100      	movs	r1, #0
   268a0:	f7ff f806 	bl	258b0 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   268a4:	4629      	mov	r1, r5
	s->sched = sched;
   268a6:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   268a8:	4630      	mov	r0, r6
   268aa:	f7df fa55 	bl	5d58 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   268ae:	2210      	movs	r2, #16
   268b0:	2100      	movs	r1, #0
   268b2:	4620      	mov	r0, r4
   268b4:	f7fe fffc 	bl	258b0 <_set>
	gf_double (s->K1, s->iv);
   268b8:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   268bc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   268be:	4621      	mov	r1, r4
   268c0:	4620      	mov	r0, r4
   268c2:	f7df fa9b 	bl	5dfc <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   268c6:	4621      	mov	r1, r4
   268c8:	4628      	mov	r0, r5
   268ca:	f7ff ffae 	bl	2682a <gf_double>
	gf_double (s->K2, s->K1);
   268ce:	4629      	mov	r1, r5
   268d0:	f104 0020 	add.w	r0, r4, #32
   268d4:	f7ff ffa9 	bl	2682a <gf_double>
	tc_cmac_init(s);
   268d8:	4620      	mov	r0, r4
   268da:	f7ff ffc3 	bl	26864 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   268de:	2001      	movs	r0, #1
}
   268e0:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   268e2:	4608      	mov	r0, r1
   268e4:	e7fc      	b.n	268e0 <tc_cmac_setup+0x50>

000268e6 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   268e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   268ea:	460d      	mov	r5, r1
   268ec:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   268ee:	4604      	mov	r4, r0
   268f0:	2800      	cmp	r0, #0
   268f2:	d062      	beq.n	269ba <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   268f4:	b912      	cbnz	r2, 268fc <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   268f6:	2001      	movs	r0, #1
}
   268f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   268fc:	2900      	cmp	r1, #0
   268fe:	d05c      	beq.n	269ba <tc_cmac_update+0xd4>
	if (s->countdown == 0) {
   26900:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   26904:	ea50 0301 	orrs.w	r3, r0, r1
   26908:	d057      	beq.n	269ba <tc_cmac_update+0xd4>
	s->countdown--;
   2690a:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
	if (s->leftover_offset > 0) {
   2690e:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   26912:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
   26916:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   2691a:	f1b8 0f00 	cmp.w	r8, #0
   2691e:	d02a      	beq.n	26976 <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   26920:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   26924:	f108 0030 	add.w	r0, r8, #48	; 0x30
   26928:	42be      	cmp	r6, r7
   2692a:	4420      	add	r0, r4
   2692c:	d208      	bcs.n	26940 <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2692e:	462a      	mov	r2, r5
   26930:	4633      	mov	r3, r6
   26932:	4631      	mov	r1, r6
   26934:	f7fe ffaf 	bl	25896 <_copy>
			s->leftover_offset += data_length;
   26938:	6c62      	ldr	r2, [r4, #68]	; 0x44
   2693a:	4432      	add	r2, r6
   2693c:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   2693e:	e7da      	b.n	268f6 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   26940:	463b      	mov	r3, r7
   26942:	462a      	mov	r2, r5
   26944:	4639      	mov	r1, r7
   26946:	f7fe ffa6 	bl	25896 <_copy>
		data_length -= remaining_space;
   2694a:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   2694c:	2300      	movs	r3, #0
   2694e:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   26950:	4446      	add	r6, r8
		data += remaining_space;
   26952:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26954:	1e63      	subs	r3, r4, #1
   26956:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   2695a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2695e:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26962:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   26964:	ea82 0200 	eor.w	r2, r2, r0
   26968:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2696a:	d1f6      	bne.n	2695a <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2696c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2696e:	4621      	mov	r1, r4
   26970:	4620      	mov	r0, r4
   26972:	f7df fa43 	bl	5dfc <tc_aes_encrypt>
   26976:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   2697a:	2e10      	cmp	r6, #16
   2697c:	d80a      	bhi.n	26994 <tc_cmac_update+0xae>
	if (data_length > 0) {
   2697e:	2e00      	cmp	r6, #0
   26980:	d0b9      	beq.n	268f6 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   26982:	4633      	mov	r3, r6
   26984:	462a      	mov	r2, r5
   26986:	4631      	mov	r1, r6
   26988:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2698c:	f7fe ff83 	bl	25896 <_copy>
		s->leftover_offset = data_length;
   26990:	6466      	str	r6, [r4, #68]	; 0x44
   26992:	e7b0      	b.n	268f6 <tc_cmac_update+0x10>
   26994:	1e63      	subs	r3, r4, #1
   26996:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   26998:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2699c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   269a0:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   269a2:	ea82 0200 	eor.w	r2, r2, r0
   269a6:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   269a8:	d1f6      	bne.n	26998 <tc_cmac_update+0xb2>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   269aa:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   269ac:	4621      	mov	r1, r4
   269ae:	4620      	mov	r0, r4
   269b0:	f7df fa24 	bl	5dfc <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   269b4:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   269b6:	3e10      	subs	r6, #16
   269b8:	e7df      	b.n	2697a <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   269ba:	2000      	movs	r0, #0
   269bc:	e79c      	b.n	268f8 <tc_cmac_update+0x12>

000269be <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   269be:	b570      	push	{r4, r5, r6, lr}
   269c0:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   269c2:	4605      	mov	r5, r0
   269c4:	b1e8      	cbz	r0, 26a02 <tc_cmac_final+0x44>
   269c6:	b369      	cbz	r1, 26a24 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   269c8:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   269ca:	2a10      	cmp	r2, #16
   269cc:	d11a      	bne.n	26a04 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   269ce:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   269d0:	1e63      	subs	r3, r4, #1
   269d2:	3901      	subs	r1, #1
   269d4:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   269d8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   269dc:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   269e0:	4072      	eors	r2, r6
   269e2:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   269e6:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   269e8:	ea82 0206 	eor.w	r2, r2, r6
   269ec:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   269ee:	d1f3      	bne.n	269d8 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   269f0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   269f2:	4621      	mov	r1, r4
   269f4:	4628      	mov	r0, r5
   269f6:	f7df fa01 	bl	5dfc <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   269fa:	4620      	mov	r0, r4
   269fc:	f7ff ff2a 	bl	26854 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   26a00:	2001      	movs	r0, #1
}
   26a02:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   26a04:	f102 0030 	add.w	r0, r2, #48	; 0x30
   26a08:	2100      	movs	r1, #0
   26a0a:	f1c2 0210 	rsb	r2, r2, #16
   26a0e:	4420      	add	r0, r4
   26a10:	f7fe ff4e 	bl	258b0 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   26a14:	6c63      	ldr	r3, [r4, #68]	; 0x44
   26a16:	4423      	add	r3, r4
   26a18:	2280      	movs	r2, #128	; 0x80
   26a1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   26a1e:	f104 0120 	add.w	r1, r4, #32
   26a22:	e7d5      	b.n	269d0 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   26a24:	4608      	mov	r0, r1
   26a26:	e7ec      	b.n	26a02 <tc_cmac_final+0x44>

00026a28 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   26a28:	2100      	movs	r1, #0
   26a2a:	2001      	movs	r0, #1
   26a2c:	f7df bbd4 	b.w	61d8 <z_arm_fatal_error>

00026a30 <arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   26a30:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   26a34:	b923      	cbnz	r3, 26a40 <arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   26a36:	f3ef 8014 	mrs	r0, CONTROL
	return (value & CONTROL_nPRIV_Msk) ? true : false;
   26a3a:	f000 0001 	and.w	r0, r0, #1
   26a3e:	4770      	bx	lr
		return false;
   26a40:	2000      	movs	r0, #0
}
   26a42:	4770      	bx	lr

00026a44 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   26a44:	4601      	mov	r1, r0
	/* Stacked R0 holds the exception reason. */
	unsigned int reason = esf->basic.r0;
   26a46:	6800      	ldr	r0, [r0, #0]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   26a48:	f3ef 8314 	mrs	r3, CONTROL

#if defined(CONFIG_USERSPACE)
	if ((__get_CONTROL() & CONTROL_nPRIV_Msk) == CONTROL_nPRIV_Msk) {
   26a4c:	07db      	lsls	r3, r3, #31
   26a4e:	d503      	bpl.n	26a58 <z_do_kernel_oops+0x14>
		 * Exception triggered from nPRIV mode.
		 *
		 * User mode is only allowed to induce oopses and stack check
		 * failures via software-triggered system fatal exceptions.
		 */
		if (!((esf->basic.r0 == K_ERR_KERNEL_OOPS) ||
   26a50:	1e83      	subs	r3, r0, #2
			(esf->basic.r0 == K_ERR_STACK_CHK_FAIL))) {

			reason = K_ERR_KERNEL_OOPS;
   26a52:	2b02      	cmp	r3, #2
   26a54:	bf28      	it	cs
   26a56:	2003      	movcs	r0, #3
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   26a58:	f7df bbbe 	b.w	61d8 <z_arm_fatal_error>

00026a5c <arch_syscall_oops>:
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}

FUNC_NORETURN void arch_syscall_oops(void *ssf_ptr)
{
   26a5c:	b500      	push	{lr}
   26a5e:	4604      	mov	r4, r0
   26a60:	b089      	sub	sp, #36	; 0x24
	uint32_t *ssf_contents = ssf_ptr;
	z_arch_esf_t oops_esf = { 0 };
   26a62:	2100      	movs	r1, #0
   26a64:	2220      	movs	r2, #32
   26a66:	4668      	mov	r0, sp
   26a68:	f003 fcc8 	bl	2a3fc <memset>

	/* TODO: Copy the rest of the register set out of ssf_ptr */
	oops_esf.basic.pc = ssf_contents[3];
   26a6c:	68e3      	ldr	r3, [r4, #12]
   26a6e:	9306      	str	r3, [sp, #24]

	z_arm_fatal_error(K_ERR_KERNEL_OOPS, &oops_esf);
   26a70:	4669      	mov	r1, sp
   26a72:	2003      	movs	r0, #3
   26a74:	f7df fbb0 	bl	61d8 <z_arm_fatal_error>

00026a78 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   26a78:	b508      	push	{r3, lr}
	handler();
   26a7a:	f7df fc15 	bl	62a8 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   26a7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   26a82:	f7e0 b887 	b.w	6b94 <z_arm_exc_exit>

00026a86 <arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   26a86:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   26a8a:	b923      	cbnz	r3, 26a96 <arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   26a8c:	f3ef 8014 	mrs	r0, CONTROL
	return (value & CONTROL_nPRIV_Msk) ? true : false;
   26a90:	f000 0001 	and.w	r0, r0, #1
   26a94:	4770      	bx	lr
		return false;
   26a96:	2000      	movs	r0, #0
}
   26a98:	4770      	bx	lr

00026a9a <arch_mem_domain_max_partitions_get>:

#if defined(CONFIG_USERSPACE)
int arch_mem_domain_max_partitions_get(void)
{
   26a9a:	b508      	push	{r3, lr}
	int available_regions = arm_core_mpu_get_max_available_dyn_regions();
   26a9c:	f7e0 f98e 	bl	6dbc <arm_core_mpu_get_max_available_dyn_regions>
		available_regions -=
			ARM_CORE_MPU_NUM_MPU_REGIONS_FOR_MPU_STACK_GUARD;
	}

	return ARM_CORE_MPU_MAX_DOMAIN_PARTITIONS_GET(available_regions);
}
   26aa0:	3801      	subs	r0, #1
   26aa2:	bd08      	pop	{r3, pc}

00026aa4 <arch_buffer_validate>:

int arch_buffer_validate(void *addr, size_t size, int write)
{
	return arm_core_mpu_buffer_validate(addr, size, write);
   26aa4:	f7e0 b992 	b.w	6dcc <arm_core_mpu_buffer_validate>

00026aa8 <arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   26aa8:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   26aac:	b923      	cbnz	r3, 26ab8 <arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   26aae:	f3ef 8014 	mrs	r0, CONTROL
	return (value & CONTROL_nPRIV_Msk) ? true : false;
   26ab2:	f000 0001 	and.w	r0, r0, #1
   26ab6:	4770      	bx	lr
		return false;
   26ab8:	2000      	movs	r0, #0
}
   26aba:	4770      	bx	lr

00026abc <_stdout_hook_default>:
}
   26abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26ac0:	4770      	bx	lr

00026ac2 <_stdin_hook_default>:
}
   26ac2:	2000      	movs	r0, #0
   26ac4:	4770      	bx	lr

00026ac6 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   26ac6:	f7f9 ba7d 	b.w	1ffc4 <SystemInit>

00026aca <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
void pm_power_state_set(struct pm_state_info info)
{
   26aca:	b082      	sub	sp, #8
   26acc:	ab02      	add	r3, sp, #8
   26ace:	e903 0003 	stmdb	r3, {r0, r1}
	switch (info.state) {
   26ad2:	f89d 3000 	ldrb.w	r3, [sp]
   26ad6:	2b06      	cmp	r3, #6
   26ad8:	d108      	bne.n	26aec <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   26ada:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   26ade:	2201      	movs	r2, #1
   26ae0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   26ae4:	f3bf 8f4f 	dsb	sy
        __WFE();
   26ae8:	bf20      	wfe
    while (true)
   26aea:	e7fd      	b.n	26ae8 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   26aec:	b002      	add	sp, #8
   26aee:	4770      	bx	lr

00026af0 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   26af0:	b082      	sub	sp, #8
   26af2:	ab02      	add	r3, sp, #8
   26af4:	e903 0003 	stmdb	r3, {r0, r1}
   26af8:	2300      	movs	r3, #0
   26afa:	f383 8811 	msr	BASEPRI, r3
   26afe:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   26b02:	b002      	add	sp, #8
   26b04:	4770      	bx	lr

00026b06 <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   26b06:	b530      	push	{r4, r5, lr}
   26b08:	b085      	sub	sp, #20
   26b0a:	4614      	mov	r4, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   26b0c:	880a      	ldrh	r2, [r1, #0]
   26b0e:	788b      	ldrb	r3, [r1, #2]
   26b10:	f8ad 2000 	strh.w	r2, [sp]
{
   26b14:	4605      	mov	r5, r0
	(void)memset(res + 3, 0, 13);
   26b16:	220d      	movs	r2, #13
   26b18:	2100      	movs	r1, #0
   26b1a:	f10d 0003 	add.w	r0, sp, #3
	memcpy(res, r, 3);
   26b1e:	f88d 3002 	strb.w	r3, [sp, #2]
	(void)memset(res + 3, 0, 13);
   26b22:	f003 fc6b 	bl	2a3fc <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   26b26:	466a      	mov	r2, sp
   26b28:	4669      	mov	r1, sp
   26b2a:	4628      	mov	r0, r5
   26b2c:	f7eb f960 	bl	11df0 <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   26b30:	b928      	cbnz	r0, 26b3e <ah+0x38>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   26b32:	f8bd 2000 	ldrh.w	r2, [sp]
   26b36:	f89d 3002 	ldrb.w	r3, [sp, #2]
   26b3a:	8022      	strh	r2, [r4, #0]
   26b3c:	70a3      	strb	r3, [r4, #2]
	 * result of ah.
	 */
	memcpy(out, res, 3);

	return 0;
}
   26b3e:	b005      	add	sp, #20
   26b40:	bd30      	pop	{r4, r5, pc}

00026b42 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   26b42:	b513      	push	{r0, r1, r4, lr}
   26b44:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   26b46:	aa01      	add	r2, sp, #4
   26b48:	3103      	adds	r1, #3
   26b4a:	f7ff ffdc 	bl	26b06 <ah>
	if (err) {
   26b4e:	b948      	cbnz	r0, 26b64 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   26b50:	2203      	movs	r2, #3
   26b52:	a901      	add	r1, sp, #4
   26b54:	4620      	mov	r0, r4
   26b56:	f003 fc35 	bl	2a3c4 <memcmp>
   26b5a:	fab0 f080 	clz	r0, r0
   26b5e:	0940      	lsrs	r0, r0, #5
}
   26b60:	b002      	add	sp, #8
   26b62:	bd10      	pop	{r4, pc}
		return false;
   26b64:	2000      	movs	r0, #0
   26b66:	e7fb      	b.n	26b60 <bt_rpa_irk_matches+0x1e>

00026b68 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   26b68:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   26b6a:	1cce      	adds	r6, r1, #3
{
   26b6c:	4605      	mov	r5, r0
   26b6e:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   26b70:	4630      	mov	r0, r6
   26b72:	2103      	movs	r1, #3
   26b74:	f7eb f93a 	bl	11dec <bt_rand>
	if (err) {
   26b78:	b960      	cbnz	r0, 26b94 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   26b7a:	7963      	ldrb	r3, [r4, #5]
   26b7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   26b80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   26b84:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   26b86:	4622      	mov	r2, r4
   26b88:	4631      	mov	r1, r6
   26b8a:	4628      	mov	r0, r5
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   26b8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   26b90:	f7ff bfb9 	b.w	26b06 <ah>
}
   26b94:	bd70      	pop	{r4, r5, r6, pc}

00026b96 <arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   26b96:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   26b9a:	b923      	cbnz	r3, 26ba6 <arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   26b9c:	f3ef 8014 	mrs	r0, CONTROL
	return (value & CONTROL_nPRIV_Msk) ? true : false;
   26ba0:	f000 0001 	and.w	r0, r0, #1
   26ba4:	4770      	bx	lr
		return false;
   26ba6:	2000      	movs	r0, #0
}
   26ba8:	4770      	bx	lr

00026baa <send_cmd_status>:
{
   26baa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   26bae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   26bb2:	4606      	mov	r6, r0
   26bb4:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   26bb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26bba:	2100      	movs	r1, #0
   26bbc:	200f      	movs	r0, #15
   26bbe:	f7e0 fd9f 	bl	7700 <bt_buf_get_evt>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   26bc2:	2701      	movs	r7, #1
	return net_buf_simple_add(&buf->b, len);
   26bc4:	f100 0808 	add.w	r8, r0, #8
   26bc8:	4604      	mov	r4, r0
   26bca:	7507      	strb	r7, [r0, #20]
   26bcc:	2102      	movs	r1, #2
   26bce:	4640      	mov	r0, r8
   26bd0:	f002 f868 	bl	28ca4 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   26bd4:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   26bd6:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   26bd8:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   26bda:	7041      	strb	r1, [r0, #1]
   26bdc:	4640      	mov	r0, r8
   26bde:	f002 f861 	bl	28ca4 <net_buf_simple_add>
	evt->ncmd = 1U;
   26be2:	7047      	strb	r7, [r0, #1]
	evt->status = status;
   26be4:	7005      	strb	r5, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   26be6:	8046      	strh	r6, [r0, #2]
		bt_recv_prio(buf);
   26be8:	4620      	mov	r0, r4
}
   26bea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv_prio(buf);
   26bee:	f7e2 b8b3 	b.w	8d58 <bt_recv_prio>

00026bf2 <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   26bf2:	f101 0320 	add.w	r3, r1, #32
   26bf6:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   26bf8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   26bfc:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   26c00:	428b      	cmp	r3, r1
   26c02:	d1f9      	bne.n	26bf8 <sys_memcpy_swap.constprop.0+0x6>
}
   26c04:	4770      	bx	lr

00026c06 <bt_hci_ecc_supported_commands>:
	supported_commands[34] |= BIT(2);
   26c06:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   26c0a:	f043 0306 	orr.w	r3, r3, #6
   26c0e:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
	supported_commands[41] |= BIT(2);
   26c12:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   26c16:	f043 0304 	orr.w	r3, r3, #4
   26c1a:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
}
   26c1e:	4770      	bx	lr

00026c20 <default_CSPRNG>:
{
   26c20:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   26c22:	f7eb f8e3 	bl	11dec <bt_rand>
}
   26c26:	fab0 f080 	clz	r0, r0
   26c2a:	0940      	lsrs	r0, r0, #5
   26c2c:	bd08      	pop	{r3, pc}

00026c2e <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   26c2e:	b510      	push	{r4, lr}
   26c30:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   26c32:	7801      	ldrb	r1, [r0, #0]
   26c34:	7822      	ldrb	r2, [r4, #0]
   26c36:	428a      	cmp	r2, r1
{
   26c38:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   26c3a:	d00e      	beq.n	26c5a <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   26c3c:	4669      	mov	r1, sp
   26c3e:	f7e0 fce5 	bl	760c <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   26c42:	a905      	add	r1, sp, #20
   26c44:	4620      	mov	r0, r4
   26c46:	f7e0 fce1 	bl	760c <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   26c4a:	2210      	movs	r2, #16
   26c4c:	f10d 0115 	add.w	r1, sp, #21
   26c50:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   26c54:	f003 fbb6 	bl	2a3c4 <memcmp>
   26c58:	e007      	b.n	26c6a <bt_uuid_cmp+0x3c>
	switch (u1->type) {
   26c5a:	2a01      	cmp	r2, #1
   26c5c:	d007      	beq.n	26c6e <bt_uuid_cmp+0x40>
   26c5e:	2a02      	cmp	r2, #2
   26c60:	d008      	beq.n	26c74 <bt_uuid_cmp+0x46>
   26c62:	b95a      	cbnz	r2, 26c7c <bt_uuid_cmp+0x4e>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   26c64:	8840      	ldrh	r0, [r0, #2]
   26c66:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   26c68:	1ac0      	subs	r0, r0, r3
	}

	return -EINVAL;
}
   26c6a:	b00a      	add	sp, #40	; 0x28
   26c6c:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   26c6e:	6840      	ldr	r0, [r0, #4]
   26c70:	6863      	ldr	r3, [r4, #4]
   26c72:	e7f9      	b.n	26c68 <bt_uuid_cmp+0x3a>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   26c74:	2210      	movs	r2, #16
   26c76:	1c61      	adds	r1, r4, #1
   26c78:	3001      	adds	r0, #1
   26c7a:	e7eb      	b.n	26c54 <bt_uuid_cmp+0x26>
	switch (u1->type) {
   26c7c:	f06f 0015 	mvn.w	r0, #21
   26c80:	e7f3      	b.n	26c6a <bt_uuid_cmp+0x3c>

00026c82 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   26c82:	2a04      	cmp	r2, #4
{
   26c84:	b530      	push	{r4, r5, lr}
	switch (data_len) {
   26c86:	d00d      	beq.n	26ca4 <bt_uuid_create+0x22>
   26c88:	2a10      	cmp	r2, #16
   26c8a:	d019      	beq.n	26cc0 <bt_uuid_create+0x3e>
   26c8c:	2a02      	cmp	r2, #2
   26c8e:	f04f 0300 	mov.w	r3, #0
   26c92:	d121      	bne.n	26cd8 <bt_uuid_create+0x56>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   26c94:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   26c96:	784a      	ldrb	r2, [r1, #1]
   26c98:	780b      	ldrb	r3, [r1, #0]
   26c9a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   26c9e:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   26ca0:	2001      	movs	r0, #1
}
   26ca2:	bd30      	pop	{r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   26ca4:	2301      	movs	r3, #1
   26ca6:	7003      	strb	r3, [r0, #0]
   26ca8:	788a      	ldrb	r2, [r1, #2]
   26caa:	78cc      	ldrb	r4, [r1, #3]
   26cac:	784d      	ldrb	r5, [r1, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   26cae:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   26cb2:	780a      	ldrb	r2, [r1, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   26cb4:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   26cb8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   26cbc:	6042      	str	r2, [r0, #4]
		break;
   26cbe:	e7ef      	b.n	26ca0 <bt_uuid_create+0x1e>
		uuid->type = BT_UUID_TYPE_128;
   26cc0:	2302      	movs	r3, #2
   26cc2:	f800 3b01 	strb.w	r3, [r0], #1
   26cc6:	f101 0310 	add.w	r3, r1, #16
   26cca:	f851 2b04 	ldr.w	r2, [r1], #4
   26cce:	f840 2b04 	str.w	r2, [r0], #4
   26cd2:	4299      	cmp	r1, r3
   26cd4:	d1f9      	bne.n	26cca <bt_uuid_create+0x48>
   26cd6:	e7e3      	b.n	26ca0 <bt_uuid_create+0x1e>
	switch (data_len) {
   26cd8:	4618      	mov	r0, r3
   26cda:	e7e2      	b.n	26ca2 <bt_uuid_create+0x20>

00026cdc <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   26cdc:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   26cde:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   26ce0:	2106      	movs	r1, #6
{
   26ce2:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   26ce4:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   26ce8:	f7eb f880 	bl	11dec <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   26cec:	b918      	cbnz	r0, 26cf6 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   26cee:	79a3      	ldrb	r3, [r4, #6]
   26cf0:	f063 033f 	orn	r3, r3, #63	; 0x3f
   26cf4:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   26cf6:	bd10      	pop	{r4, pc}

00026cf8 <arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   26cf8:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   26cfc:	b923      	cbnz	r3, 26d08 <arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   26cfe:	f3ef 8014 	mrs	r0, CONTROL
	return (value & CONTROL_nPRIV_Msk) ? true : false;
   26d02:	f000 0001 	and.w	r0, r0, #1
   26d06:	4770      	bx	lr
		return false;
   26d08:	2000      	movs	r0, #0
}
   26d0a:	4770      	bx	lr

00026d0c <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   26d0c:	280f      	cmp	r0, #15
   26d0e:	d806      	bhi.n	26d1e <bt_hci_evt_get_flags+0x12>
   26d10:	280d      	cmp	r0, #13
   26d12:	d80b      	bhi.n	26d2c <bt_hci_evt_get_flags+0x20>
   26d14:	2805      	cmp	r0, #5
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   26d16:	bf14      	ite	ne
   26d18:	2002      	movne	r0, #2
   26d1a:	2003      	moveq	r0, #3
   26d1c:	4770      	bx	lr
	switch (evt) {
   26d1e:	2813      	cmp	r0, #19
   26d20:	d004      	beq.n	26d2c <bt_hci_evt_get_flags+0x20>
   26d22:	281a      	cmp	r0, #26
   26d24:	bf14      	ite	ne
   26d26:	2002      	movne	r0, #2
   26d28:	2001      	moveq	r0, #1
   26d2a:	4770      	bx	lr
   26d2c:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   26d2e:	4770      	bx	lr

00026d30 <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   26d30:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   26d34:	b193      	cbz	r3, 26d5c <update_sec_level+0x2c>
   26d36:	7b5a      	ldrb	r2, [r3, #13]
   26d38:	07d1      	lsls	r1, r2, #31
   26d3a:	d50f      	bpl.n	26d5c <update_sec_level+0x2c>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   26d3c:	06d2      	lsls	r2, r2, #27
   26d3e:	d50b      	bpl.n	26d58 <update_sec_level+0x28>
   26d40:	7b1b      	ldrb	r3, [r3, #12]
   26d42:	2b10      	cmp	r3, #16
   26d44:	d108      	bne.n	26d58 <update_sec_level+0x28>
			conn->sec_level = BT_SECURITY_L4;
   26d46:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
   26d48:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   26d4a:	7a82      	ldrb	r2, [r0, #10]
   26d4c:	7a40      	ldrb	r0, [r0, #9]
}
   26d4e:	4282      	cmp	r2, r0
   26d50:	bf8c      	ite	hi
   26d52:	2000      	movhi	r0, #0
   26d54:	2001      	movls	r0, #1
   26d56:	4770      	bx	lr
			conn->sec_level = BT_SECURITY_L3;
   26d58:	2303      	movs	r3, #3
   26d5a:	e7f5      	b.n	26d48 <update_sec_level+0x18>
		conn->sec_level = BT_SECURITY_L2;
   26d5c:	2302      	movs	r3, #2
   26d5e:	e7f3      	b.n	26d48 <update_sec_level+0x18>

00026d60 <k_sem_take>:
{
   26d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26d64:	4604      	mov	r4, r0
   26d66:	461d      	mov	r5, r3
   26d68:	f7ff ffc6 	bl	26cf8 <arch_is_user_context>
	if (z_syscall_trap()) {
   26d6c:	b130      	cbz	r0, 26d7c <k_sem_take+0x1c>
	register uint32_t r1 __asm__("r1") = arg2;
   26d6e:	4611      	mov	r1, r2
	register uint32_t ret __asm__("r0") = arg1;
   26d70:	4620      	mov	r0, r4
	register uint32_t r2 __asm__("r2") = arg3;
   26d72:	462a      	mov	r2, r5
	register uint32_t r6 __asm__("r6") = call_id;
   26d74:	26a3      	movs	r6, #163	; 0xa3
	__asm__ volatile("svc %[svid]\n"
   26d76:	df03      	svc	3
}
   26d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_sem_take(sem, timeout);
   26d7c:	462b      	mov	r3, r5
   26d7e:	4620      	mov	r0, r4
}
   26d80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   26d84:	f7fb b9a0 	b.w	220c8 <z_impl_k_sem_take>

00026d88 <bt_addr_copy>:
   26d88:	680b      	ldr	r3, [r1, #0]
   26d8a:	6003      	str	r3, [r0, #0]
   26d8c:	888b      	ldrh	r3, [r1, #4]
   26d8e:	8083      	strh	r3, [r0, #4]
}
   26d90:	4770      	bx	lr

00026d92 <bt_addr_le_copy>:
   26d92:	680b      	ldr	r3, [r1, #0]
   26d94:	6003      	str	r3, [r0, #0]
   26d96:	888b      	ldrh	r3, [r1, #4]
   26d98:	8083      	strh	r3, [r0, #4]
   26d9a:	798b      	ldrb	r3, [r1, #6]
   26d9c:	7183      	strb	r3, [r0, #6]
}
   26d9e:	4770      	bx	lr

00026da0 <k_sem_give>:
{
   26da0:	e92d 4148 	stmdb	sp!, {r3, r6, r8, lr}
   26da4:	4602      	mov	r2, r0
   26da6:	f7ff ffa7 	bl	26cf8 <arch_is_user_context>
	if (z_syscall_trap()) {
   26daa:	b120      	cbz	r0, 26db6 <k_sem_give+0x16>
	register uint32_t ret __asm__("r0") = arg1;
   26dac:	4610      	mov	r0, r2
	register uint32_t r6 __asm__("r6") = call_id;
   26dae:	26a0      	movs	r6, #160	; 0xa0
	__asm__ volatile("svc %[svid]\n"
   26db0:	df03      	svc	3
}
   26db2:	e8bd 8148 	ldmia.w	sp!, {r3, r6, r8, pc}
   26db6:	e8bd 4148 	ldmia.w	sp!, {r3, r6, r8, lr}
	z_impl_k_sem_give(sem);
   26dba:	4610      	mov	r0, r2
   26dbc:	f7fb b922 	b.w	22004 <z_impl_k_sem_give>

00026dc0 <k_sem_init>:
{
   26dc0:	e92d 4150 	stmdb	sp!, {r4, r6, r8, lr}
   26dc4:	4604      	mov	r4, r0
   26dc6:	f7ff ff97 	bl	26cf8 <arch_is_user_context>
	if (z_syscall_trap()) {
   26dca:	b120      	cbz	r0, 26dd6 <k_sem_init+0x16>
	register uint32_t ret __asm__("r0") = arg1;
   26dcc:	4620      	mov	r0, r4
	register uint32_t r6 __asm__("r6") = call_id;
   26dce:	26a1      	movs	r6, #161	; 0xa1
	__asm__ volatile("svc %[svid]\n"
   26dd0:	df03      	svc	3
}
   26dd2:	e8bd 8150 	ldmia.w	sp!, {r4, r6, r8, pc}
	return z_impl_k_sem_init(sem, initial_count, limit);
   26dd6:	4620      	mov	r0, r4
}
   26dd8:	e8bd 4150 	ldmia.w	sp!, {r4, r6, r8, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   26ddc:	f002 be37 	b.w	29a4e <z_impl_k_sem_init>

00026de0 <sys_put_le64>:
	dst[1] = val >> 8;
   26de0:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   26de4:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   26de6:	0e00      	lsrs	r0, r0, #24
   26de8:	7053      	strb	r3, [r2, #1]
   26dea:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   26dec:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   26dee:	f3c1 2007 	ubfx	r0, r1, #8, #8
   26df2:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   26df4:	7093      	strb	r3, [r2, #2]
   26df6:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   26df8:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   26dfa:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   26dfc:	71d1      	strb	r1, [r2, #7]
}
   26dfe:	4770      	bx	lr

00026e00 <bt_hci_disconnect>:
{
   26e00:	b570      	push	{r4, r5, r6, lr}
   26e02:	4606      	mov	r6, r0
   26e04:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   26e06:	f240 4006 	movw	r0, #1030	; 0x406
   26e0a:	2103      	movs	r1, #3
   26e0c:	f7e1 fa04 	bl	8218 <bt_hci_cmd_create>
	if (!buf) {
   26e10:	4604      	mov	r4, r0
   26e12:	b168      	cbz	r0, 26e30 <bt_hci_disconnect+0x30>
   26e14:	2103      	movs	r1, #3
   26e16:	3008      	adds	r0, #8
   26e18:	f001 ff44 	bl	28ca4 <net_buf_simple_add>
	disconn->reason = reason;
   26e1c:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   26e1e:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   26e20:	4621      	mov	r1, r4
   26e22:	2200      	movs	r2, #0
}
   26e24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   26e28:	f240 4006 	movw	r0, #1030	; 0x406
   26e2c:	f7e1 bb8a 	b.w	8544 <bt_hci_cmd_send_sync>
}
   26e30:	f06f 0068 	mvn.w	r0, #104	; 0x68
   26e34:	bd70      	pop	{r4, r5, r6, pc}

00026e36 <bt_le_set_data_len>:
{
   26e36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26e38:	4607      	mov	r7, r0
   26e3a:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   26e3c:	f242 0022 	movw	r0, #8226	; 0x2022
   26e40:	2106      	movs	r1, #6
{
   26e42:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   26e44:	f7e1 f9e8 	bl	8218 <bt_hci_cmd_create>
	if (!buf) {
   26e48:	4604      	mov	r4, r0
   26e4a:	b170      	cbz	r0, 26e6a <bt_le_set_data_len+0x34>
   26e4c:	2106      	movs	r1, #6
   26e4e:	3008      	adds	r0, #8
   26e50:	f001 ff28 	bl	28ca4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   26e54:	883b      	ldrh	r3, [r7, #0]
   26e56:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   26e58:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   26e5a:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   26e5c:	4621      	mov	r1, r4
   26e5e:	f242 0022 	movw	r0, #8226	; 0x2022
}
   26e62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   26e66:	f7e1 ba0f 	b.w	8288 <bt_hci_cmd_send>
}
   26e6a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   26e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00026e70 <bt_le_set_phy>:
{
   26e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26e74:	4680      	mov	r8, r0
   26e76:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   26e78:	f242 0032 	movw	r0, #8242	; 0x2032
   26e7c:	2107      	movs	r1, #7
{
   26e7e:	f89d 9020 	ldrb.w	r9, [sp, #32]
   26e82:	4616      	mov	r6, r2
   26e84:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   26e86:	f7e1 f9c7 	bl	8218 <bt_hci_cmd_create>
	if (!buf) {
   26e8a:	4604      	mov	r4, r0
   26e8c:	b190      	cbz	r0, 26eb4 <bt_le_set_phy+0x44>
   26e8e:	2107      	movs	r1, #7
   26e90:	3008      	adds	r0, #8
   26e92:	f001 ff07 	bl	28ca4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   26e96:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   26e9a:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   26e9c:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   26e9e:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   26ea0:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   26ea2:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   26ea6:	4621      	mov	r1, r4
   26ea8:	f242 0032 	movw	r0, #8242	; 0x2032
}
   26eac:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   26eb0:	f7e1 b9ea 	b.w	8288 <bt_hci_cmd_send>
}
   26eb4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   26eb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00026ebc <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   26ebc:	6880      	ldr	r0, [r0, #8]
   26ebe:	f7e1 bd1f 	b.w	8900 <enh_conn_complete>

00026ec2 <le_legacy_conn_complete>:
{
   26ec2:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   26ec4:	6881      	ldr	r1, [r0, #8]
{
   26ec6:	b08b      	sub	sp, #44	; 0x2c
	enh.status         = evt->status;
   26ec8:	780b      	ldrb	r3, [r1, #0]
   26eca:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   26ece:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   26ed2:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   26ed6:	78cb      	ldrb	r3, [r1, #3]
   26ed8:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   26edc:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   26ee0:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   26ee4:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   26ee8:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   26eec:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   26ef0:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   26ef4:	7c4b      	ldrb	r3, [r1, #17]
   26ef6:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   26efa:	a803      	add	r0, sp, #12
   26efc:	3104      	adds	r1, #4
   26efe:	f7ff ff48 	bl	26d92 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   26f02:	2200      	movs	r2, #0
   26f04:	4669      	mov	r1, sp
   26f06:	f10d 0013 	add.w	r0, sp, #19
   26f0a:	9200      	str	r2, [sp, #0]
   26f0c:	f8ad 2004 	strh.w	r2, [sp, #4]
   26f10:	f7ff ff3a 	bl	26d88 <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   26f14:	4669      	mov	r1, sp
   26f16:	f10d 0019 	add.w	r0, sp, #25
   26f1a:	9200      	str	r2, [sp, #0]
   26f1c:	f8ad 2004 	strh.w	r2, [sp, #4]
   26f20:	f7ff ff32 	bl	26d88 <bt_addr_copy>
	enh_conn_complete(&enh);
   26f24:	a802      	add	r0, sp, #8
   26f26:	f7e1 fceb 	bl	8900 <enh_conn_complete>
}
   26f2a:	b00b      	add	sp, #44	; 0x2c
   26f2c:	f85d fb04 	ldr.w	pc, [sp], #4

00026f30 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   26f30:	8802      	ldrh	r2, [r0, #0]
   26f32:	8843      	ldrh	r3, [r0, #2]
   26f34:	429a      	cmp	r2, r3
{
   26f36:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   26f38:	d818      	bhi.n	26f6c <bt_le_conn_params_valid+0x3c>
   26f3a:	2a05      	cmp	r2, #5
   26f3c:	d916      	bls.n	26f6c <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   26f3e:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   26f42:	d813      	bhi.n	26f6c <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   26f44:	8884      	ldrh	r4, [r0, #4]
   26f46:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   26f4a:	d20f      	bcs.n	26f6c <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   26f4c:	88c1      	ldrh	r1, [r0, #6]
   26f4e:	f1a1 020a 	sub.w	r2, r1, #10
   26f52:	b292      	uxth	r2, r2
   26f54:	f640 4076 	movw	r0, #3190	; 0xc76
   26f58:	4282      	cmp	r2, r0
   26f5a:	d807      	bhi.n	26f6c <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
   26f5c:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   26f60:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   26f64:	bf34      	ite	cc
   26f66:	2001      	movcc	r0, #1
   26f68:	2000      	movcs	r0, #0
}
   26f6a:	bd10      	pop	{r4, pc}
		return false;
   26f6c:	2000      	movs	r0, #0
   26f6e:	e7fc      	b.n	26f6a <bt_le_conn_params_valid+0x3a>

00026f70 <bt_send>:
		return bt_hci_ecc_send(buf);
   26f70:	f7e0 baa2 	b.w	74b8 <bt_hci_ecc_send>

00026f74 <bt_addr_le_is_bonded>:

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   26f74:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   26f76:	f7e7 fed9 	bl	ed2c <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   26f7a:	b118      	cbz	r0, 26f84 <bt_addr_le_is_bonded+0x10>
   26f7c:	89c0      	ldrh	r0, [r0, #14]
   26f7e:	3800      	subs	r0, #0
   26f80:	bf18      	it	ne
   26f82:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   26f84:	bd08      	pop	{r3, pc}

00026f86 <bt_hci_evt_create>:
#include <stdint.h>
#include <sys/byteorder.h>
#include <drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   26f86:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   26f88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   26f8c:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   26f8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26f92:	2100      	movs	r1, #0
{
   26f94:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   26f96:	f7e0 fbb3 	bl	7700 <bt_buf_get_evt>
   26f9a:	2102      	movs	r1, #2
   26f9c:	4604      	mov	r4, r0
   26f9e:	3008      	adds	r0, #8
   26fa0:	f001 fe80 	bl	28ca4 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = evt;
   26fa4:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   26fa6:	7045      	strb	r5, [r0, #1]

	return buf;
}
   26fa8:	4620      	mov	r0, r4
   26faa:	bd70      	pop	{r4, r5, r6, pc}

00026fac <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   26fac:	3103      	adds	r1, #3
{
   26fae:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   26fb0:	b2c9      	uxtb	r1, r1
{
   26fb2:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   26fb4:	200e      	movs	r0, #14
   26fb6:	f7ff ffe6 	bl	26f86 <bt_hci_evt_create>
   26fba:	2103      	movs	r1, #3
   26fbc:	4604      	mov	r4, r0
   26fbe:	3008      	adds	r0, #8
   26fc0:	f001 fe70 	bl	28ca4 <net_buf_simple_add>

	cc = net_buf_add(buf, sizeof(*cc));
	cc->ncmd = 1U;
   26fc4:	2301      	movs	r3, #1
   26fc6:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   26fc8:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   26fcc:	4620      	mov	r0, r4
   26fce:	bd38      	pop	{r3, r4, r5, pc}

00026fd0 <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   26fd0:	b570      	push	{r4, r5, r6, lr}
   26fd2:	4605      	mov	r5, r0
   26fd4:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   26fd6:	200f      	movs	r0, #15
   26fd8:	2104      	movs	r1, #4
   26fda:	f7ff ffd4 	bl	26f86 <bt_hci_evt_create>
   26fde:	2104      	movs	r1, #4
   26fe0:	4604      	mov	r4, r0
   26fe2:	3008      	adds	r0, #8
   26fe4:	f001 fe5e 	bl	28ca4 <net_buf_simple_add>

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
	cs->ncmd = 1U;
   26fe8:	2201      	movs	r2, #1
	cs->status = status;
   26fea:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   26fec:	7042      	strb	r2, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   26fee:	8045      	strh	r5, [r0, #2]

	return buf;
}
   26ff0:	4620      	mov	r0, r4
   26ff2:	bd70      	pop	{r4, r5, r6, pc}

00026ff4 <arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   26ff4:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   26ff8:	b923      	cbnz	r3, 27004 <arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   26ffa:	f3ef 8014 	mrs	r0, CONTROL
	return (value & CONTROL_nPRIV_Msk) ? true : false;
   26ffe:	f000 0001 	and.w	r0, r0, #1
   27002:	4770      	bx	lr
		return false;
   27004:	2000      	movs	r0, #0
}
   27006:	4770      	bx	lr

00027008 <adv_unpause_enabled>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   27008:	f100 0310 	add.w	r3, r0, #16
   2700c:	f3bf 8f5b 	dmb	ish
   27010:	e853 2f00 	ldrex	r2, [r3]
   27014:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   27018:	e843 1c00 	strex	ip, r1, [r3]
   2701c:	f1bc 0f00 	cmp.w	ip, #0
   27020:	d1f6      	bne.n	27010 <adv_unpause_enabled+0x8>
   27022:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   27026:	0493      	lsls	r3, r2, #18
   27028:	d502      	bpl.n	27030 <adv_unpause_enabled+0x28>
		bt_le_adv_set_enable(adv, true);
   2702a:	2101      	movs	r1, #1
   2702c:	f000 b98d 	b.w	2734a <bt_le_adv_set_enable>
}
   27030:	4770      	bx	lr

00027032 <addr_res_enable>:
{
   27032:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   27034:	2101      	movs	r1, #1
{
   27036:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   27038:	f242 002d 	movw	r0, #8237	; 0x202d
   2703c:	f7e1 f8ec 	bl	8218 <bt_hci_cmd_create>
	if (!buf) {
   27040:	4604      	mov	r4, r0
   27042:	b158      	cbz	r0, 2705c <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   27044:	4629      	mov	r1, r5
   27046:	3008      	adds	r0, #8
   27048:	f001 fe3c 	bl	28cc4 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   2704c:	4621      	mov	r1, r4
   2704e:	2200      	movs	r2, #0
}
   27050:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   27054:	f242 002d 	movw	r0, #8237	; 0x202d
   27058:	f7e1 ba74 	b.w	8544 <bt_hci_cmd_send_sync>
}
   2705c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   27060:	bd38      	pop	{r3, r4, r5, pc}

00027062 <bt_addr_copy>:
   27062:	680b      	ldr	r3, [r1, #0]
   27064:	6003      	str	r3, [r0, #0]
   27066:	888b      	ldrh	r3, [r1, #4]
   27068:	8083      	strh	r3, [r0, #4]
}
   2706a:	4770      	bx	lr

0002706c <bt_addr_le_copy>:
   2706c:	680b      	ldr	r3, [r1, #0]
   2706e:	6003      	str	r3, [r0, #0]
   27070:	888b      	ldrh	r3, [r1, #4]
   27072:	8083      	strh	r3, [r0, #4]
   27074:	798b      	ldrb	r3, [r1, #6]
   27076:	7183      	strb	r3, [r0, #6]
}
   27078:	4770      	bx	lr

0002707a <hci_id_add.isra.0>:
static int hci_id_add(uint8_t id, const bt_addr_le_t *addr, uint8_t peer_irk[16])
   2707a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2707c:	4607      	mov	r7, r0
   2707e:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   27080:	f242 0027 	movw	r0, #8231	; 0x2027
   27084:	2127      	movs	r1, #39	; 0x27
   27086:	f7e1 f8c7 	bl	8218 <bt_hci_cmd_create>
	if (!buf) {
   2708a:	4605      	mov	r5, r0
   2708c:	b1f8      	cbz	r0, 270ce <hci_id_add.isra.0+0x54>
	return net_buf_simple_add(&buf->b, len);
   2708e:	2127      	movs	r1, #39	; 0x27
   27090:	3008      	adds	r0, #8
   27092:	f001 fe07 	bl	28ca4 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   27096:	4639      	mov	r1, r7
   27098:	4606      	mov	r6, r0
   2709a:	f7ff ffe7 	bl	2706c <bt_addr_le_copy>
   2709e:	4621      	mov	r1, r4
   270a0:	1dc3      	adds	r3, r0, #7
   270a2:	f104 0210 	add.w	r2, r4, #16
   270a6:	f851 0b04 	ldr.w	r0, [r1], #4
   270aa:	f843 0b04 	str.w	r0, [r3], #4
   270ae:	4291      	cmp	r1, r2
   270b0:	d1f9      	bne.n	270a6 <hci_id_add.isra.0+0x2c>
__ssp_bos_icheck3(memset, void *, int)
   270b2:	2210      	movs	r2, #16
   270b4:	2100      	movs	r1, #0
   270b6:	f106 0017 	add.w	r0, r6, #23
   270ba:	f003 f99f 	bl	2a3fc <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   270be:	4629      	mov	r1, r5
   270c0:	2200      	movs	r2, #0
}
   270c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   270c6:	f242 0027 	movw	r0, #8231	; 0x2027
   270ca:	f7e1 ba3b 	b.w	8544 <bt_hci_cmd_send_sync>
}
   270ce:	f06f 0068 	mvn.w	r0, #104	; 0x68
   270d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000270d4 <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   270d4:	7a03      	ldrb	r3, [r0, #8]
   270d6:	075b      	lsls	r3, r3, #29
   270d8:	d504      	bpl.n	270e4 <keys_add_id+0x10>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   270da:	f100 012a 	add.w	r1, r0, #42	; 0x2a
   270de:	3001      	adds	r0, #1
   270e0:	f7ff bfcb 	b.w	2707a <hci_id_add.isra.0>
}
   270e4:	4770      	bx	lr

000270e6 <adv_pause_enabled>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   270e6:	f3bf 8f5b 	dmb	ish
   270ea:	6903      	ldr	r3, [r0, #16]
   270ec:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   270f0:	065b      	lsls	r3, r3, #25
   270f2:	f100 0210 	add.w	r2, r0, #16
   270f6:	d50e      	bpl.n	27116 <adv_pause_enabled+0x30>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   270f8:	f3bf 8f5b 	dmb	ish
   270fc:	e852 3f00 	ldrex	r3, [r2]
   27100:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   27104:	e842 3100 	strex	r1, r3, [r2]
   27108:	2900      	cmp	r1, #0
   2710a:	d1f7      	bne.n	270fc <adv_pause_enabled+0x16>
   2710c:	f3bf 8f5b 	dmb	ish
		bt_le_adv_set_enable(adv, false);
   27110:	2100      	movs	r1, #0
   27112:	f000 b91a 	b.w	2734a <bt_le_adv_set_enable>
}
   27116:	4770      	bx	lr

00027118 <bt_lookup_id_addr>:
{
   27118:	b510      	push	{r4, lr}
   2711a:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   2711c:	f7e7 fdcc 	bl	ecb8 <bt_keys_find_irk>
		if (keys) {
   27120:	b100      	cbz	r0, 27124 <bt_lookup_id_addr+0xc>
			return &keys->addr;
   27122:	1c44      	adds	r4, r0, #1
}
   27124:	4620      	mov	r0, r4
   27126:	bd10      	pop	{r4, pc}

00027128 <bt_id_set_adv_private_addr>:
{
   27128:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   2712a:	2106      	movs	r1, #6
   2712c:	4668      	mov	r0, sp
   2712e:	f7ea fe5d 	bl	11dec <bt_rand>
	if (err) {
   27132:	b940      	cbnz	r0, 27146 <bt_id_set_adv_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   27134:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   27138:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   2713a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2713e:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   27142:	f7e2 f809 	bl	9158 <set_random_address>
}
   27146:	b003      	add	sp, #12
   27148:	f85d fb04 	ldr.w	pc, [sp], #4

0002714c <bt_id_adv_random_addr_check>:
}
   2714c:	2001      	movs	r0, #1
   2714e:	4770      	bx	lr

00027150 <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   27150:	7a03      	ldrb	r3, [r0, #8]
   27152:	07d9      	lsls	r1, r3, #31
   27154:	d504      	bpl.n	27160 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   27156:	f023 0301 	bic.w	r3, r3, #1
   2715a:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   2715c:	f7e2 b844 	b.w	91e8 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   27160:	0799      	lsls	r1, r3, #30
   27162:	d504      	bpl.n	2716e <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   27164:	f023 0302 	bic.w	r3, r3, #2
   27168:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   2716a:	f7e2 b93b 	b.w	93e4 <bt_id_del>
}
   2716e:	4770      	bx	lr

00027170 <arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   27170:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   27174:	b923      	cbnz	r3, 27180 <arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   27176:	f3ef 8014 	mrs	r0, CONTROL
	return (value & CONTROL_nPRIV_Msk) ? true : false;
   2717a:	f000 0001 	and.w	r0, r0, #1
   2717e:	4770      	bx	lr
		return false;
   27180:	2000      	movs	r0, #0
}
   27182:	4770      	bx	lr

00027184 <get_adv_channel_map>:
{
   27184:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   27186:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   2718a:	bf0c      	ite	eq
   2718c:	2007      	moveq	r0, #7
   2718e:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   27190:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   27192:	bf48      	it	mi
   27194:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   27198:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   2719a:	bf48      	it	mi
   2719c:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   271a0:	4770      	bx	lr

000271a2 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   271a2:	f3bf 8f5b 	dmb	ish
   271a6:	6800      	ldr	r0, [r0, #0]
   271a8:	f3bf 8f5b 	dmb	ish
}
   271ac:	4770      	bx	lr

000271ae <atomic_and>:
{
   271ae:	4603      	mov	r3, r0
}
   271b0:	f3bf 8f5b 	dmb	ish
   271b4:	e853 0f00 	ldrex	r0, [r3]
   271b8:	ea00 0201 	and.w	r2, r0, r1
   271bc:	e843 2c00 	strex	ip, r2, [r3]
   271c0:	f1bc 0f00 	cmp.w	ip, #0
   271c4:	d1f6      	bne.n	271b4 <atomic_and+0x6>
   271c6:	f3bf 8f5b 	dmb	ish
   271ca:	4770      	bx	lr

000271cc <bt_addr_le_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   271cc:	680b      	ldr	r3, [r1, #0]
   271ce:	6003      	str	r3, [r0, #0]
   271d0:	888b      	ldrh	r3, [r1, #4]
   271d2:	8083      	strh	r3, [r0, #4]
   271d4:	798b      	ldrb	r3, [r1, #6]
   271d6:	7183      	strb	r3, [r0, #6]
   271d8:	4770      	bx	lr

000271da <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   271da:	2301      	movs	r3, #1
{
   271dc:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   271de:	fa03 f101 	lsl.w	r1, r3, r1
{
   271e2:	4604      	mov	r4, r0
	if (val) {
   271e4:	b162      	cbz	r2, 27200 <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   271e6:	f3bf 8f5b 	dmb	ish
   271ea:	e854 3f00 	ldrex	r3, [r4]
   271ee:	430b      	orrs	r3, r1
   271f0:	e844 3200 	strex	r2, r3, [r4]
   271f4:	2a00      	cmp	r2, #0
   271f6:	d1f8      	bne.n	271ea <atomic_set_bit_to+0x10>
   271f8:	f3bf 8f5b 	dmb	ish
	}
}
   271fc:	bc10      	pop	{r4}
   271fe:	4770      	bx	lr
   27200:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   27202:	43c9      	mvns	r1, r1
   27204:	f7ff bfd3 	b.w	271ae <atomic_and>

00027208 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   27208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2720c:	b087      	sub	sp, #28
   2720e:	4605      	mov	r5, r0
   27210:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
   27214:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   27218:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   2721c:	460c      	mov	r4, r1
   2721e:	4617      	mov	r7, r2
	struct bt_ad d[2] = {};
   27220:	2100      	movs	r1, #0
   27222:	2210      	movs	r2, #16
   27224:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   27226:	461e      	mov	r6, r3
	struct bt_ad d[2] = {};
   27228:	f003 f8e8 	bl	2a3fc <memset>
	if (use_name) {
   2722c:	f1b8 0f00 	cmp.w	r8, #0
   27230:	d010      	beq.n	27254 <le_adv_update.constprop.0+0x4c>
		const char *name = bt_get_name();
   27232:	f7e1 ff47 	bl	90c4 <bt_get_name>
   27236:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   27238:	2c00      	cmp	r4, #0
   2723a:	d13c      	bne.n	272b6 <le_adv_update.constprop.0+0xae>
   2723c:	2e00      	cmp	r6, #0
   2723e:	d145      	bne.n	272cc <le_adv_update.constprop.0+0xc4>
		data = (struct bt_data)BT_DATA(
   27240:	4658      	mov	r0, fp
   27242:	f7d9 fe01 	bl	e48 <strlen>
   27246:	2309      	movs	r3, #9
   27248:	f88d 3000 	strb.w	r3, [sp]
   2724c:	f88d 0001 	strb.w	r0, [sp, #1]
   27250:	f8cd b004 	str.w	fp, [sp, #4]
		d[0].len = ad_len;
   27254:	e9cd 4702 	strd	r4, r7, [sp, #8]
		if (use_name && !scannable) {
   27258:	f1b8 0f00 	cmp.w	r8, #0
   2725c:	d038      	beq.n	272d0 <le_adv_update.constprop.0+0xc8>
   2725e:	f1ba 0f00 	cmp.w	sl, #0
   27262:	d135      	bne.n	272d0 <le_adv_update.constprop.0+0xc8>
			d[1].len = 1;
   27264:	2301      	movs	r3, #1
			d[1].data = &data;
   27266:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   2726a:	9305      	str	r3, [sp, #20]
			d_len = 2;
   2726c:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   2726e:	a902      	add	r1, sp, #8
   27270:	f242 0008 	movw	r0, #8200	; 0x2008
   27274:	f7e2 fba4 	bl	99c0 <hci_set_ad>
		if (err) {
   27278:	4604      	mov	r4, r0
   2727a:	b978      	cbnz	r0, 2729c <le_adv_update.constprop.0+0x94>
	if (scannable) {
   2727c:	f1ba 0f00 	cmp.w	sl, #0
   27280:	d128      	bne.n	272d4 <le_adv_update.constprop.0+0xcc>
   27282:	3510      	adds	r5, #16
   27284:	f3bf 8f5b 	dmb	ish
   27288:	e855 3f00 	ldrex	r3, [r5]
   2728c:	f043 0304 	orr.w	r3, r3, #4
   27290:	e845 3200 	strex	r2, r3, [r5]
   27294:	2a00      	cmp	r2, #0
   27296:	d1f7      	bne.n	27288 <le_adv_update.constprop.0+0x80>
   27298:	f3bf 8f5b 	dmb	ish
}
   2729c:	4620      	mov	r0, r4
   2729e:	b007      	add	sp, #28
   272a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   272a4:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   272a8:	3a08      	subs	r2, #8
   272aa:	2a01      	cmp	r2, #1
   272ac:	d925      	bls.n	272fa <le_adv_update.constprop.0+0xf2>
	for (i = 0; i < ad_len; i++) {
   272ae:	3301      	adds	r3, #1
   272b0:	429f      	cmp	r7, r3
   272b2:	d1f7      	bne.n	272a4 <le_adv_update.constprop.0+0x9c>
   272b4:	e7c2      	b.n	2723c <le_adv_update.constprop.0+0x34>
   272b6:	2300      	movs	r3, #0
   272b8:	e7fa      	b.n	272b0 <le_adv_update.constprop.0+0xa8>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   272ba:	f816 2033 	ldrb.w	r2, [r6, r3, lsl #3]
   272be:	3a08      	subs	r2, #8
   272c0:	2a01      	cmp	r2, #1
   272c2:	d91a      	bls.n	272fa <le_adv_update.constprop.0+0xf2>
	for (i = 0; i < ad_len; i++) {
   272c4:	3301      	adds	r3, #1
   272c6:	4599      	cmp	r9, r3
   272c8:	d1f7      	bne.n	272ba <le_adv_update.constprop.0+0xb2>
   272ca:	e7b9      	b.n	27240 <le_adv_update.constprop.0+0x38>
   272cc:	2300      	movs	r3, #0
   272ce:	e7fa      	b.n	272c6 <le_adv_update.constprop.0+0xbe>
		d_len = 1;
   272d0:	2201      	movs	r2, #1
   272d2:	e7cc      	b.n	2726e <le_adv_update.constprop.0+0x66>
		d[0].len = sd_len;
   272d4:	e9cd 6902 	strd	r6, r9, [sp, #8]
		if (use_name) {
   272d8:	2201      	movs	r2, #1
   272da:	f1b8 0f00 	cmp.w	r8, #0
   272de:	d003      	beq.n	272e8 <le_adv_update.constprop.0+0xe0>
			d[1].len = 1;
   272e0:	9205      	str	r2, [sp, #20]
			d[1].data = &data;
   272e2:	f8cd d010 	str.w	sp, [sp, #16]
			d_len = 2;
   272e6:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   272e8:	a902      	add	r1, sp, #8
   272ea:	f242 0009 	movw	r0, #8201	; 0x2009
   272ee:	f7e2 fb67 	bl	99c0 <hci_set_ad>
		if (err) {
   272f2:	2800      	cmp	r0, #0
   272f4:	d0c5      	beq.n	27282 <le_adv_update.constprop.0+0x7a>
   272f6:	4604      	mov	r4, r0
   272f8:	e7d0      	b.n	2729c <le_adv_update.constprop.0+0x94>
			return -EINVAL;
   272fa:	f06f 0415 	mvn.w	r4, #21
   272fe:	e7cd      	b.n	2729c <le_adv_update.constprop.0+0x94>

00027300 <bt_le_adv_set_enable_legacy>:
{
   27300:	b570      	push	{r4, r5, r6, lr}
   27302:	4606      	mov	r6, r0
   27304:	b086      	sub	sp, #24
   27306:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   27308:	f242 000a 	movw	r0, #8202	; 0x200a
   2730c:	2101      	movs	r1, #1
   2730e:	f7e0 ff83 	bl	8218 <bt_hci_cmd_create>
	if (!buf) {
   27312:	4604      	mov	r4, r0
   27314:	b1b0      	cbz	r0, 27344 <bt_le_adv_set_enable_legacy+0x44>
	if (enable) {
   27316:	3008      	adds	r0, #8
   27318:	b195      	cbz	r5, 27340 <bt_le_adv_set_enable_legacy+0x40>
	return net_buf_simple_add_u8(&buf->b, val);
   2731a:	2101      	movs	r1, #1
   2731c:	f001 fcd2 	bl	28cc4 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   27320:	f106 0210 	add.w	r2, r6, #16
   27324:	a903      	add	r1, sp, #12
   27326:	4620      	mov	r0, r4
   27328:	9500      	str	r5, [sp, #0]
   2732a:	2306      	movs	r3, #6
   2732c:	f7e0 ff62 	bl	81f4 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   27330:	2200      	movs	r2, #0
   27332:	4621      	mov	r1, r4
   27334:	f242 000a 	movw	r0, #8202	; 0x200a
   27338:	f7e1 f904 	bl	8544 <bt_hci_cmd_send_sync>
}
   2733c:	b006      	add	sp, #24
   2733e:	bd70      	pop	{r4, r5, r6, pc}
   27340:	4629      	mov	r1, r5
   27342:	e7eb      	b.n	2731c <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   27344:	f06f 0068 	mvn.w	r0, #104	; 0x68
   27348:	e7f8      	b.n	2733c <bt_le_adv_set_enable_legacy+0x3c>

0002734a <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   2734a:	f7ff bfd9 	b.w	27300 <bt_le_adv_set_enable_legacy>

0002734e <arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   2734e:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   27352:	b923      	cbnz	r3, 2735e <arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   27354:	f3ef 8014 	mrs	r0, CONTROL
	return (value & CONTROL_nPRIV_Msk) ? true : false;
   27358:	f000 0001 	and.w	r0, r0, #1
   2735c:	4770      	bx	lr
		return false;
   2735e:	2000      	movs	r0, #0
}
   27360:	4770      	bx	lr

00027362 <arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   27362:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   27366:	b923      	cbnz	r3, 27372 <arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   27368:	f3ef 8014 	mrs	r0, CONTROL
	return (value & CONTROL_nPRIV_Msk) ? true : false;
   2736c:	f000 0001 	and.w	r0, r0, #1
   27370:	4770      	bx	lr
		return false;
   27372:	2000      	movs	r0, #0
}
   27374:	4770      	bx	lr

00027376 <tx_notify>:
{
   27376:	b570      	push	{r4, r5, r6, lr}
   27378:	4604      	mov	r4, r0
	__asm__ volatile(
   2737a:	f04f 0220 	mov.w	r2, #32
   2737e:	f3ef 8311 	mrs	r3, BASEPRI
   27382:	f382 8811 	msr	BASEPRI, r2
   27386:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   2738a:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   2738c:	b920      	cbnz	r0, 27398 <tx_notify+0x22>
	__asm__ volatile(
   2738e:	f383 8811 	msr	BASEPRI, r3
   27392:	f3bf 8f6f 	isb	sy
}
   27396:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   27398:	6a61      	ldr	r1, [r4, #36]	; 0x24
   2739a:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2739c:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2739e:	4288      	cmp	r0, r1
	list->tail = node;
   273a0:	bf08      	it	eq
   273a2:	6262      	streq	r2, [r4, #36]	; 0x24
   273a4:	f383 8811 	msr	BASEPRI, r3
   273a8:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   273ac:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   273b0:	f7e2 fee2 	bl	a178 <tx_free>
		cb(conn, user_data);
   273b4:	4631      	mov	r1, r6
   273b6:	4620      	mov	r0, r4
   273b8:	47a8      	blx	r5
	while (1) {
   273ba:	e7de      	b.n	2737a <tx_notify+0x4>

000273bc <tx_complete_work>:
	tx_notify(conn);
   273bc:	3828      	subs	r0, #40	; 0x28
   273be:	f7ff bfda 	b.w	27376 <tx_notify>

000273c2 <bt_conn_new>:
{
   273c2:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   273c4:	2200      	movs	r2, #0
   273c6:	4603      	mov	r3, r0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   273c8:	2401      	movs	r4, #1
   273ca:	428a      	cmp	r2, r1
   273cc:	d102      	bne.n	273d4 <bt_conn_new+0x12>
		return NULL;
   273ce:	2300      	movs	r3, #0
}
   273d0:	4618      	mov	r0, r3
   273d2:	bd38      	pop	{r3, r4, r5, pc}
   273d4:	f103 00b8 	add.w	r0, r3, #184	; 0xb8
   273d8:	f3bf 8f5b 	dmb	ish
   273dc:	e850 5f00 	ldrex	r5, [r0]
   273e0:	2d00      	cmp	r5, #0
   273e2:	d104      	bne.n	273ee <bt_conn_new+0x2c>
   273e4:	e840 4c00 	strex	ip, r4, [r0]
   273e8:	f1bc 0f00 	cmp.w	ip, #0
   273ec:	d1f6      	bne.n	273dc <bt_conn_new+0x1a>
   273ee:	f3bf 8f5b 	dmb	ish
   273f2:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   273f6:	d002      	beq.n	273fe <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
   273f8:	3201      	adds	r2, #1
   273fa:	4603      	mov	r3, r0
   273fc:	e7e5      	b.n	273ca <bt_conn_new+0x8>
	if (!conn) {
   273fe:	2b00      	cmp	r3, #0
   27400:	d0e6      	beq.n	273d0 <bt_conn_new+0xe>
__ssp_bos_icheck3(memset, void *, int)
   27402:	4618      	mov	r0, r3
   27404:	22b8      	movs	r2, #184	; 0xb8
   27406:	2100      	movs	r1, #0
   27408:	f002 fff8 	bl	2a3fc <memset>
   2740c:	4603      	mov	r3, r0
   2740e:	e7df      	b.n	273d0 <bt_conn_new+0xe>

00027410 <bt_conn_set_security>:
{
   27410:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   27412:	7b43      	ldrb	r3, [r0, #13]
   27414:	2b07      	cmp	r3, #7
{
   27416:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   27418:	d128      	bne.n	2746c <bt_conn_set_security+0x5c>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   2741a:	7a43      	ldrb	r3, [r0, #9]
   2741c:	428b      	cmp	r3, r1
   2741e:	d228      	bcs.n	27472 <bt_conn_set_security+0x62>
   27420:	7a83      	ldrb	r3, [r0, #10]
   27422:	428b      	cmp	r3, r1
   27424:	d225      	bcs.n	27472 <bt_conn_set_security+0x62>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   27426:	f3bf 8f5b 	dmb	ish
	if (val) {
   2742a:	060a      	lsls	r2, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   2742c:	f100 0304 	add.w	r3, r0, #4
   27430:	d513      	bpl.n	2745a <bt_conn_set_security+0x4a>
   27432:	e853 2f00 	ldrex	r2, [r3]
   27436:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   2743a:	e843 2000 	strex	r0, r2, [r3]
   2743e:	2800      	cmp	r0, #0
   27440:	d1f7      	bne.n	27432 <bt_conn_set_security+0x22>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   27442:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   27446:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   2744a:	72a1      	strb	r1, [r4, #10]
		return bt_smp_start_security(conn);
   2744c:	4620      	mov	r0, r4
   2744e:	f7e6 fe35 	bl	e0bc <bt_smp_start_security>
	if (err) {
   27452:	b108      	cbz	r0, 27458 <bt_conn_set_security+0x48>
		conn->required_sec_level = conn->sec_level;
   27454:	7a63      	ldrb	r3, [r4, #9]
   27456:	72a3      	strb	r3, [r4, #10]
}
   27458:	bd10      	pop	{r4, pc}
   2745a:	e853 2f00 	ldrex	r2, [r3]
   2745e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   27462:	e843 2000 	strex	r0, r2, [r3]
   27466:	2800      	cmp	r0, #0
   27468:	d0eb      	beq.n	27442 <bt_conn_set_security+0x32>
   2746a:	e7f6      	b.n	2745a <bt_conn_set_security+0x4a>
		return -ENOTCONN;
   2746c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   27470:	e7f2      	b.n	27458 <bt_conn_set_security+0x48>
		return 0;
   27472:	2000      	movs	r0, #0
   27474:	e7f0      	b.n	27458 <bt_conn_set_security+0x48>

00027476 <bt_conn_get_security>:
}
   27476:	7a40      	ldrb	r0, [r0, #9]
   27478:	4770      	bx	lr

0002747a <bt_conn_reset_rx_state>:
{
   2747a:	b510      	push	{r4, lr}
   2747c:	4604      	mov	r4, r0
	if (!conn->rx) {
   2747e:	6900      	ldr	r0, [r0, #16]
   27480:	b118      	cbz	r0, 2748a <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   27482:	f7f5 f9b9 	bl	1c7f8 <net_buf_unref>
	conn->rx = NULL;
   27486:	2300      	movs	r3, #0
   27488:	6123      	str	r3, [r4, #16]
}
   2748a:	bd10      	pop	{r4, pc}

0002748c <bt_conn_is_peer_addr_le>:
{
   2748c:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   2748e:	7a03      	ldrb	r3, [r0, #8]
   27490:	428b      	cmp	r3, r1
{
   27492:	4604      	mov	r4, r0
   27494:	4615      	mov	r5, r2
	if (id != conn->id) {
   27496:	d115      	bne.n	274c4 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   27498:	f100 0188 	add.w	r1, r0, #136	; 0x88
   2749c:	2207      	movs	r2, #7
   2749e:	4628      	mov	r0, r5
   274a0:	f002 ff90 	bl	2a3c4 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   274a4:	b180      	cbz	r0, 274c8 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   274a6:	78e3      	ldrb	r3, [r4, #3]
   274a8:	2207      	movs	r2, #7
   274aa:	b943      	cbnz	r3, 274be <bt_conn_is_peer_addr_le+0x32>
   274ac:	f104 0196 	add.w	r1, r4, #150	; 0x96
   274b0:	4628      	mov	r0, r5
   274b2:	f002 ff87 	bl	2a3c4 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   274b6:	fab0 f080 	clz	r0, r0
   274ba:	0940      	lsrs	r0, r0, #5
}
   274bc:	bd38      	pop	{r3, r4, r5, pc}
   274be:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   274c2:	e7f5      	b.n	274b0 <bt_conn_is_peer_addr_le+0x24>
		return false;
   274c4:	2000      	movs	r0, #0
   274c6:	e7f9      	b.n	274bc <bt_conn_is_peer_addr_le+0x30>
		return true;
   274c8:	2001      	movs	r0, #1
   274ca:	e7f7      	b.n	274bc <bt_conn_is_peer_addr_le+0x30>

000274cc <bt_conn_ref>:
{
   274cc:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   274ce:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   274d2:	f3bf 8f5b 	dmb	ish
   274d6:	6813      	ldr	r3, [r2, #0]
   274d8:	f3bf 8f5b 	dmb	ish
		if (!old) {
   274dc:	b17b      	cbz	r3, 274fe <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   274de:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   274e2:	1c59      	adds	r1, r3, #1
   274e4:	e852 4f00 	ldrex	r4, [r2]
   274e8:	429c      	cmp	r4, r3
   274ea:	d104      	bne.n	274f6 <bt_conn_ref+0x2a>
   274ec:	e842 1c00 	strex	ip, r1, [r2]
   274f0:	f1bc 0f00 	cmp.w	ip, #0
   274f4:	d1f6      	bne.n	274e4 <bt_conn_ref+0x18>
   274f6:	f3bf 8f5b 	dmb	ish
   274fa:	d1ea      	bne.n	274d2 <bt_conn_ref+0x6>
}
   274fc:	bd10      	pop	{r4, pc}
			return NULL;
   274fe:	4618      	mov	r0, r3
   27500:	e7fc      	b.n	274fc <bt_conn_ref+0x30>

00027502 <bt_conn_unref>:
	atomic_val_t old = atomic_dec(&conn->ref);
   27502:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   27506:	f3bf 8f5b 	dmb	ish
   2750a:	e853 2f00 	ldrex	r2, [r3]
   2750e:	3a01      	subs	r2, #1
   27510:	e843 2100 	strex	r1, r2, [r3]
   27514:	2900      	cmp	r1, #0
   27516:	d1f8      	bne.n	2750a <bt_conn_unref+0x8>
   27518:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2751c:	f3bf 8f5b 	dmb	ish
   27520:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   27524:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   27528:	b90b      	cbnz	r3, 2752e <bt_conn_unref+0x2c>
		bt_le_adv_resume();
   2752a:	f7e2 bc5b 	b.w	9de4 <bt_le_adv_resume>
}
   2752e:	4770      	bx	lr

00027530 <conn_lookup_handle>:
{
   27530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27534:	4607      	mov	r7, r0
   27536:	460e      	mov	r6, r1
   27538:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   2753a:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2753c:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   27540:	42b4      	cmp	r4, r6
   27542:	d103      	bne.n	2754c <conn_lookup_handle+0x1c>
	return NULL;
   27544:	2300      	movs	r3, #0
}
   27546:	4618      	mov	r0, r3
   27548:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2754c:	fb09 7004 	mla	r0, r9, r4, r7
   27550:	f7ff ffbc 	bl	274cc <bt_conn_ref>
   27554:	4603      	mov	r3, r0
		if (!conn) {
   27556:	b158      	cbz	r0, 27570 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   27558:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   2755a:	2d01      	cmp	r5, #1
   2755c:	d002      	beq.n	27564 <conn_lookup_handle+0x34>
   2755e:	3d07      	subs	r5, #7
   27560:	2d01      	cmp	r5, #1
   27562:	d803      	bhi.n	2756c <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   27564:	881a      	ldrh	r2, [r3, #0]
   27566:	4542      	cmp	r2, r8
   27568:	d0ed      	beq.n	27546 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   2756a:	4618      	mov	r0, r3
   2756c:	f7ff ffc9 	bl	27502 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   27570:	3401      	adds	r4, #1
   27572:	e7e5      	b.n	27540 <conn_lookup_handle+0x10>

00027574 <bt_conn_get_dst>:
}
   27574:	3088      	adds	r0, #136	; 0x88
   27576:	4770      	bx	lr

00027578 <bt_conn_disconnect>:
{
   27578:	b538      	push	{r3, r4, r5, lr}
   2757a:	7b43      	ldrb	r3, [r0, #13]
   2757c:	3b02      	subs	r3, #2
   2757e:	4604      	mov	r4, r0
   27580:	2b06      	cmp	r3, #6
   27582:	d805      	bhi.n	27590 <bt_conn_disconnect+0x18>
   27584:	e8df f003 	tbb	[pc, r3]
   27588:	04040408 	.word	0x04040408
   2758c:	0e0c      	.short	0x0e0c
   2758e:	0c          	.byte	0x0c
   2758f:	00          	.byte	0x00
	switch (conn->state) {
   27590:	f06f 057f 	mvn.w	r5, #127	; 0x7f
}
   27594:	4628      	mov	r0, r5
   27596:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
   27598:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2759a:	2100      	movs	r1, #0
   2759c:	f7e3 f970 	bl	a880 <bt_conn_set_state>
		return 0;
   275a0:	2500      	movs	r5, #0
   275a2:	e7f7      	b.n	27594 <bt_conn_disconnect+0x1c>
	err = bt_hci_disconnect(conn->handle, reason);
   275a4:	8800      	ldrh	r0, [r0, #0]
   275a6:	f7ff fc2b 	bl	26e00 <bt_hci_disconnect>
	if (err) {
   275aa:	4605      	mov	r5, r0
   275ac:	2800      	cmp	r0, #0
   275ae:	d1f1      	bne.n	27594 <bt_conn_disconnect+0x1c>
	if (conn->state == BT_CONN_CONNECTED) {
   275b0:	7b63      	ldrb	r3, [r4, #13]
   275b2:	2b07      	cmp	r3, #7
   275b4:	d1ee      	bne.n	27594 <bt_conn_disconnect+0x1c>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   275b6:	2108      	movs	r1, #8
   275b8:	4620      	mov	r0, r4
   275ba:	f7e3 f961 	bl	a880 <bt_conn_set_state>
   275be:	e7e9      	b.n	27594 <bt_conn_disconnect+0x1c>

000275c0 <bt_conn_le_conn_update>:
{
   275c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   275c2:	4607      	mov	r7, r0
   275c4:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   275c6:	f242 0013 	movw	r0, #8211	; 0x2013
   275ca:	210e      	movs	r1, #14
   275cc:	f7e0 fe24 	bl	8218 <bt_hci_cmd_create>
	if (!buf) {
   275d0:	4606      	mov	r6, r0
   275d2:	b1d0      	cbz	r0, 2760a <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   275d4:	210e      	movs	r1, #14
   275d6:	3008      	adds	r0, #8
   275d8:	f001 fb64 	bl	28ca4 <net_buf_simple_add>
   275dc:	220e      	movs	r2, #14
   275de:	4604      	mov	r4, r0
   275e0:	2100      	movs	r1, #0
   275e2:	f002 ff0b 	bl	2a3fc <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   275e6:	883b      	ldrh	r3, [r7, #0]
   275e8:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   275ea:	882b      	ldrh	r3, [r5, #0]
   275ec:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   275ee:	886b      	ldrh	r3, [r5, #2]
   275f0:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   275f2:	88ab      	ldrh	r3, [r5, #4]
   275f4:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   275f6:	88eb      	ldrh	r3, [r5, #6]
   275f8:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   275fa:	4631      	mov	r1, r6
   275fc:	2200      	movs	r2, #0
}
   275fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   27602:	f242 0013 	movw	r0, #8211	; 0x2013
   27606:	f7e0 bf9d 	b.w	8544 <bt_hci_cmd_send_sync>
}
   2760a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2760e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00027610 <arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   27610:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   27614:	b923      	cbnz	r3, 27620 <arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   27616:	f3ef 8014 	mrs	r0, CONTROL
	return (value & CONTROL_nPRIV_Msk) ? true : false;
   2761a:	f000 0001 	and.w	r0, r0, #1
   2761e:	4770      	bx	lr
		return false;
   27620:	2000      	movs	r0, #0
}
   27622:	4770      	bx	lr

00027624 <l2cap_connected>:
}
   27624:	4770      	bx	lr

00027626 <l2cap_disconnected>:
   27626:	4770      	bx	lr

00027628 <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   27628:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   2762a:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2762c:	b17b      	cbz	r3, 2764e <bt_l2cap_chan_remove+0x26>
   2762e:	3b08      	subs	r3, #8
   27630:	2200      	movs	r2, #0
   27632:	b163      	cbz	r3, 2764e <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   27634:	428b      	cmp	r3, r1
   27636:	f103 0408 	add.w	r4, r3, #8
   2763a:	d10f      	bne.n	2765c <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   2763c:	688b      	ldr	r3, [r1, #8]
   2763e:	b93a      	cbnz	r2, 27650 <bt_l2cap_chan_remove+0x28>
   27640:	6d42      	ldr	r2, [r0, #84]	; 0x54
	list->head = node;
   27642:	6503      	str	r3, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   27644:	4294      	cmp	r4, r2
   27646:	d100      	bne.n	2764a <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   27648:	6543      	str	r3, [r0, #84]	; 0x54
	parent->next = child;
   2764a:	2300      	movs	r3, #0
   2764c:	608b      	str	r3, [r1, #8]
}
   2764e:	bd10      	pop	{r4, pc}
   27650:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   27652:	6d43      	ldr	r3, [r0, #84]	; 0x54
   27654:	429c      	cmp	r4, r3
	list->tail = node;
   27656:	bf08      	it	eq
   27658:	6542      	streq	r2, [r0, #84]	; 0x54
}
   2765a:	e7f6      	b.n	2764a <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2765c:	2c00      	cmp	r4, #0
   2765e:	d0f6      	beq.n	2764e <bt_l2cap_chan_remove+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   27660:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   27662:	2b00      	cmp	r3, #0
   27664:	d0f3      	beq.n	2764e <bt_l2cap_chan_remove+0x26>
   27666:	3b08      	subs	r3, #8
   27668:	4622      	mov	r2, r4
   2766a:	e7e2      	b.n	27632 <bt_l2cap_chan_remove+0xa>

0002766c <bt_l2cap_chan_del>:
{
   2766c:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   2766e:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   27672:	4604      	mov	r4, r0
	if (!chan->conn) {
   27674:	b123      	cbz	r3, 27680 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   27676:	686b      	ldr	r3, [r5, #4]
   27678:	b103      	cbz	r3, 2767c <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   2767a:	4798      	blx	r3
	chan->conn = NULL;
   2767c:	2300      	movs	r3, #0
   2767e:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   27680:	68e3      	ldr	r3, [r4, #12]
   27682:	b10b      	cbz	r3, 27688 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   27684:	4620      	mov	r0, r4
   27686:	4798      	blx	r3
	if (ops->released) {
   27688:	69eb      	ldr	r3, [r5, #28]
   2768a:	b11b      	cbz	r3, 27694 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   2768c:	4620      	mov	r0, r4
}
   2768e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   27692:	4718      	bx	r3
}
   27694:	bd70      	pop	{r4, r5, r6, pc}

00027696 <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   27696:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   27698:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2769a:	b18b      	cbz	r3, 276c0 <bt_l2cap_disconnected+0x2a>
   2769c:	f1b3 0008 	subs.w	r0, r3, #8
   276a0:	d00e      	beq.n	276c0 <bt_l2cap_disconnected+0x2a>
   276a2:	681c      	ldr	r4, [r3, #0]
   276a4:	b104      	cbz	r4, 276a8 <bt_l2cap_disconnected+0x12>
   276a6:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   276a8:	f7ff ffe0 	bl	2766c <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   276ac:	b144      	cbz	r4, 276c0 <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   276ae:	f114 0308 	adds.w	r3, r4, #8
   276b2:	d002      	beq.n	276ba <bt_l2cap_disconnected+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   276b4:	68a3      	ldr	r3, [r4, #8]
   276b6:	b103      	cbz	r3, 276ba <bt_l2cap_disconnected+0x24>
   276b8:	3b08      	subs	r3, #8
{
   276ba:	4620      	mov	r0, r4
   276bc:	461c      	mov	r4, r3
   276be:	e7f3      	b.n	276a8 <bt_l2cap_disconnected+0x12>
}
   276c0:	bd10      	pop	{r4, pc}

000276c2 <bt_l2cap_security_changed>:
{
   276c2:	b538      	push	{r3, r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   276c4:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   276c6:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   276c8:	b1a3      	cbz	r3, 276f4 <bt_l2cap_security_changed+0x32>
   276ca:	f1b3 0008 	subs.w	r0, r3, #8
   276ce:	d011      	beq.n	276f4 <bt_l2cap_security_changed+0x32>
   276d0:	681c      	ldr	r4, [r3, #0]
   276d2:	b104      	cbz	r4, 276d6 <bt_l2cap_security_changed+0x14>
   276d4:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   276d6:	6843      	ldr	r3, [r0, #4]
   276d8:	689b      	ldr	r3, [r3, #8]
   276da:	b10b      	cbz	r3, 276e0 <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   276dc:	4629      	mov	r1, r5
   276de:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   276e0:	b144      	cbz	r4, 276f4 <bt_l2cap_security_changed+0x32>
Z_GENLIST_PEEK_NEXT(slist, snode)
   276e2:	f114 0308 	adds.w	r3, r4, #8
   276e6:	d002      	beq.n	276ee <bt_l2cap_security_changed+0x2c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   276e8:	68a3      	ldr	r3, [r4, #8]
   276ea:	b103      	cbz	r3, 276ee <bt_l2cap_security_changed+0x2c>
   276ec:	3b08      	subs	r3, #8
{
   276ee:	4620      	mov	r0, r4
   276f0:	461c      	mov	r4, r3
   276f2:	e7f0      	b.n	276d6 <bt_l2cap_security_changed+0x14>
}
   276f4:	bd38      	pop	{r3, r4, r5, pc}

000276f6 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   276f6:	3104      	adds	r1, #4
   276f8:	f7e3 bac8 	b.w	ac8c <bt_conn_create_pdu_timeout>

000276fc <bt_l2cap_send_cb>:
{
   276fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27700:	4614      	mov	r4, r2
   27702:	4605      	mov	r5, r0
   27704:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   27706:	f102 0008 	add.w	r0, r2, #8
   2770a:	2104      	movs	r1, #4
   2770c:	461e      	mov	r6, r3
   2770e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   27712:	f001 fadf 	bl	28cd4 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   27716:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   27718:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2771a:	3a04      	subs	r2, #4
   2771c:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2771e:	4643      	mov	r3, r8
   27720:	4632      	mov	r2, r6
   27722:	4621      	mov	r1, r4
   27724:	4628      	mov	r0, r5
}
   27726:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2772a:	f7e2 bfa7 	b.w	a67c <bt_conn_send_cb>

0002772e <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2772e:	6d00      	ldr	r0, [r0, #80]	; 0x50
   27730:	b160      	cbz	r0, 2774c <bt_l2cap_le_lookup_tx_cid+0x1e>
   27732:	3808      	subs	r0, #8
   27734:	b900      	cbnz	r0, 27738 <bt_l2cap_le_lookup_tx_cid+0xa>
   27736:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   27738:	f8b0 3054 	ldrh.w	r3, [r0, #84]	; 0x54
   2773c:	428b      	cmp	r3, r1
   2773e:	d005      	beq.n	2774c <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   27740:	f110 0308 	adds.w	r3, r0, #8
   27744:	d001      	beq.n	2774a <bt_l2cap_le_lookup_tx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   27746:	6880      	ldr	r0, [r0, #8]
   27748:	e7f2      	b.n	27730 <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   2774a:	4618      	mov	r0, r3
}
   2774c:	4770      	bx	lr

0002774e <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2774e:	6d00      	ldr	r0, [r0, #80]	; 0x50
   27750:	b160      	cbz	r0, 2776c <bt_l2cap_le_lookup_rx_cid+0x1e>
   27752:	3808      	subs	r0, #8
   27754:	b900      	cbnz	r0, 27758 <bt_l2cap_le_lookup_rx_cid+0xa>
   27756:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   27758:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   2775c:	428b      	cmp	r3, r1
   2775e:	d005      	beq.n	2776c <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   27760:	f110 0308 	adds.w	r3, r0, #8
   27764:	d001      	beq.n	2776a <bt_l2cap_le_lookup_rx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   27766:	6880      	ldr	r0, [r0, #8]
   27768:	e7f2      	b.n	27750 <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   2776a:	4618      	mov	r0, r3
}
   2776c:	4770      	bx	lr

0002776e <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   2776e:	4770      	bx	lr

00027770 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   27770:	4603      	mov	r3, r0
Z_GENLIST_IS_EMPTY(slist)
   27772:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   27774:	b128      	cbz	r0, 27782 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   27776:	6859      	ldr	r1, [r3, #4]
   27778:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2777a:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2777c:	4288      	cmp	r0, r1
	list->tail = node;
   2777e:	bf08      	it	eq
   27780:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   27782:	4770      	bx	lr

00027784 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   27784:	4603      	mov	r3, r0
   27786:	6800      	ldr	r0, [r0, #0]
   27788:	2200      	movs	r2, #0
   2778a:	b900      	cbnz	r0, 2778e <sys_slist_find_and_remove+0xa>
   2778c:	4770      	bx	lr
   2778e:	4288      	cmp	r0, r1
   27790:	d110      	bne.n	277b4 <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   27792:	6808      	ldr	r0, [r1, #0]
   27794:	b942      	cbnz	r2, 277a8 <sys_slist_find_and_remove+0x24>
   27796:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   27798:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   2779a:	4291      	cmp	r1, r2
   2779c:	d100      	bne.n	277a0 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   2779e:	6058      	str	r0, [r3, #4]
	parent->next = child;
   277a0:	2300      	movs	r3, #0
   277a2:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   277a4:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   277a6:	4770      	bx	lr
	parent->next = child;
   277a8:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   277aa:	6858      	ldr	r0, [r3, #4]
   277ac:	4281      	cmp	r1, r0
	list->tail = node;
   277ae:	bf08      	it	eq
   277b0:	605a      	streq	r2, [r3, #4]
}
   277b2:	e7f5      	b.n	277a0 <sys_slist_find_and_remove+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   277b4:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   277b6:	6800      	ldr	r0, [r0, #0]
   277b8:	e7e7      	b.n	2778a <sys_slist_find_and_remove+0x6>

000277ba <arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   277ba:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   277be:	b923      	cbnz	r3, 277ca <arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   277c0:	f3ef 8014 	mrs	r0, CONTROL
	return (value & CONTROL_nPRIV_Msk) ? true : false;
   277c4:	f000 0001 	and.w	r0, r0, #1
   277c8:	4770      	bx	lr
		return false;
   277ca:	2000      	movs	r0, #0
}
   277cc:	4770      	bx	lr

000277ce <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   277ce:	4603      	mov	r3, r0
	size_t bytes = 0;
   277d0:	2000      	movs	r0, #0

	while (buf) {
   277d2:	b903      	cbnz	r3, 277d6 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   277d4:	4770      	bx	lr
		bytes += buf->len;
   277d6:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   277d8:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   277da:	4410      	add	r0, r2
		buf = buf->frags;
   277dc:	e7f9      	b.n	277d2 <net_buf_frags_len+0x4>

000277de <att_sent>:
	if (chan->ops->sent) {
   277de:	684b      	ldr	r3, [r1, #4]
   277e0:	695b      	ldr	r3, [r3, #20]
{
   277e2:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   277e4:	b103      	cbz	r3, 277e8 <att_sent+0xa>
		chan->ops->sent(chan);
   277e6:	4718      	bx	r3
}
   277e8:	4770      	bx	lr

000277ea <attr_read_type_cb>:
{
   277ea:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   277ec:	68d4      	ldr	r4, [r2, #12]
   277ee:	7823      	ldrb	r3, [r4, #0]
   277f0:	3102      	adds	r1, #2
   277f2:	b913      	cbnz	r3, 277fa <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   277f4:	7021      	strb	r1, [r4, #0]
	return true;
   277f6:	2001      	movs	r0, #1
   277f8:	e006      	b.n	27808 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   277fa:	428b      	cmp	r3, r1
   277fc:	d0fb      	beq.n	277f6 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   277fe:	8983      	ldrh	r3, [r0, #12]
   27800:	3b02      	subs	r3, #2
   27802:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   27804:	2000      	movs	r0, #0
   27806:	6110      	str	r0, [r2, #16]
}
   27808:	bd10      	pop	{r4, pc}

0002780a <att_prepare_write_req>:
}
   2780a:	2006      	movs	r0, #6
   2780c:	4770      	bx	lr

0002780e <att_op_get_type>:
	switch (op) {
   2780e:	281e      	cmp	r0, #30
   27810:	d816      	bhi.n	27840 <att_op_get_type+0x32>
   27812:	b308      	cbz	r0, 27858 <att_op_get_type+0x4a>
   27814:	1e43      	subs	r3, r0, #1
   27816:	2b1d      	cmp	r3, #29
   27818:	d81e      	bhi.n	27858 <att_op_get_type+0x4a>
   2781a:	e8df f003 	tbb	[pc, r3]
   2781e:	2317      	.short	0x2317
   27820:	23172317 	.word	0x23172317
   27824:	23172317 	.word	0x23172317
   27828:	23172317 	.word	0x23172317
   2782c:	23172317 	.word	0x23172317
   27830:	231d1d17 	.word	0x231d1d17
   27834:	1d172317 	.word	0x1d172317
   27838:	0f1b1d19 	.word	0x0f1b1d19
   2783c:	2004      	movs	r0, #4
   2783e:	4770      	bx	lr
   27840:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   27844:	2b52      	cmp	r3, #82	; 0x52
   27846:	d107      	bne.n	27858 <att_op_get_type+0x4a>
		return ATT_COMMAND;
   27848:	2000      	movs	r0, #0
}
   2784a:	4770      	bx	lr
		return ATT_RESPONSE;
   2784c:	2002      	movs	r0, #2
   2784e:	4770      	bx	lr
		return ATT_NOTIFICATION;
   27850:	2003      	movs	r0, #3
   27852:	4770      	bx	lr
		return ATT_INDICATION;
   27854:	2005      	movs	r0, #5
   27856:	4770      	bx	lr
		return ATT_COMMAND;
   27858:	f010 0f40 	tst.w	r0, #64	; 0x40
   2785c:	bf0c      	ite	eq
   2785e:	2006      	moveq	r0, #6
   27860:	2000      	movne	r0, #0
   27862:	4770      	bx	lr
		return ATT_REQUEST;
   27864:	2001      	movs	r0, #1
   27866:	4770      	bx	lr

00027868 <bt_gatt_foreach_attr>:
{
   27868:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2786a:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2786e:	2300      	movs	r3, #0
   27870:	9300      	str	r3, [sp, #0]
   27872:	461a      	mov	r2, r3
   27874:	f7e5 f900 	bl	ca78 <bt_gatt_foreach_attr_type>
}
   27878:	b005      	add	sp, #20
   2787a:	f85d fb04 	ldr.w	pc, [sp], #4

0002787e <att_chan_read>:
{
   2787e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27882:	4680      	mov	r8, r0
   27884:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   27886:	4610      	mov	r0, r2
{
   27888:	4699      	mov	r9, r3
   2788a:	468b      	mov	fp, r1
   2788c:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2788e:	f7ff ff9e 	bl	277ce <net_buf_frags_len>
   27892:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
   27896:	4283      	cmp	r3, r0
   27898:	d97a      	bls.n	27990 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   2789a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2789e:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   278a0:	4630      	mov	r0, r6
   278a2:	f001 f9dd 	bl	28c60 <net_buf_frag_last>
	size_t len, total = 0;
   278a6:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   278aa:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   278ac:	4630      	mov	r0, r6
   278ae:	f7ff ff8e 	bl	277ce <net_buf_frags_len>
   278b2:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
   278b6:	f105 0708 	add.w	r7, r5, #8
   278ba:	1a24      	subs	r4, r4, r0
   278bc:	4638      	mov	r0, r7
   278be:	f001 fa2d 	bl	28d1c <net_buf_simple_tailroom>
   278c2:	4284      	cmp	r4, r0
   278c4:	d211      	bcs.n	278ea <att_chan_read+0x6c>
   278c6:	4630      	mov	r0, r6
   278c8:	f7ff ff81 	bl	277ce <net_buf_frags_len>
   278cc:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   278d0:	1a24      	subs	r4, r4, r0
		if (!len) {
   278d2:	bb34      	cbnz	r4, 27922 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   278d4:	79b0      	ldrb	r0, [r6, #6]
   278d6:	f7f4 fed3 	bl	1c680 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   278da:	2200      	movs	r2, #0
   278dc:	2300      	movs	r3, #0
   278de:	f001 f98b 	bl	28bf8 <net_buf_alloc_fixed>
			if (!frag) {
   278e2:	4605      	mov	r5, r0
   278e4:	b930      	cbnz	r0, 278f4 <att_chan_read+0x76>
	return total;
   278e6:	4657      	mov	r7, sl
   278e8:	e02c      	b.n	27944 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   278ea:	4638      	mov	r0, r7
   278ec:	f001 fa16 	bl	28d1c <net_buf_simple_tailroom>
   278f0:	4604      	mov	r4, r0
   278f2:	e7ee      	b.n	278d2 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   278f4:	4601      	mov	r1, r0
   278f6:	4630      	mov	r0, r6
   278f8:	f001 f9c3 	bl	28c82 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   278fc:	4630      	mov	r0, r6
   278fe:	f7ff ff66 	bl	277ce <net_buf_frags_len>
   27902:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   27906:	f105 0708 	add.w	r7, r5, #8
   2790a:	1a24      	subs	r4, r4, r0
   2790c:	4638      	mov	r0, r7
   2790e:	f001 fa05 	bl	28d1c <net_buf_simple_tailroom>
   27912:	4284      	cmp	r4, r0
   27914:	d21a      	bcs.n	2794c <att_chan_read+0xce>
   27916:	4630      	mov	r0, r6
   27918:	f7ff ff59 	bl	277ce <net_buf_frags_len>
   2791c:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   27920:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   27922:	68a9      	ldr	r1, [r5, #8]
   27924:	89aa      	ldrh	r2, [r5, #12]
   27926:	f8db 7004 	ldr.w	r7, [fp, #4]
   2792a:	9803      	ldr	r0, [sp, #12]
   2792c:	f8cd 9000 	str.w	r9, [sp]
   27930:	440a      	add	r2, r1
   27932:	b2a3      	uxth	r3, r4
   27934:	4659      	mov	r1, fp
   27936:	47b8      	blx	r7
		if (read < 0) {
   27938:	1e07      	subs	r7, r0, #0
   2793a:	da0c      	bge.n	27956 <att_chan_read+0xd8>
				return total;
   2793c:	f1ba 0f00 	cmp.w	sl, #0
   27940:	bf18      	it	ne
   27942:	4657      	movne	r7, sl
}
   27944:	4638      	mov	r0, r7
   27946:	b005      	add	sp, #20
   27948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2794c:	4638      	mov	r0, r7
   2794e:	f001 f9e5 	bl	28d1c <net_buf_simple_tailroom>
   27952:	4604      	mov	r4, r0
   27954:	e7e5      	b.n	27922 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   27956:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   27958:	b993      	cbnz	r3, 27980 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   2795a:	4639      	mov	r1, r7
   2795c:	f105 0008 	add.w	r0, r5, #8
   27960:	f001 f9a0 	bl	28ca4 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   27964:	4630      	mov	r0, r6
   27966:	f7ff ff32 	bl	277ce <net_buf_frags_len>
   2796a:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
		offset += read;
   2796e:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   27970:	4283      	cmp	r3, r0
		total += read;
   27972:	44ba      	add	sl, r7
		offset += read;
   27974:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   27978:	d9b5      	bls.n	278e6 <att_chan_read+0x68>
   2797a:	42a7      	cmp	r7, r4
   2797c:	d096      	beq.n	278ac <att_chan_read+0x2e>
   2797e:	e7b2      	b.n	278e6 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   27980:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   27982:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   27984:	4639      	mov	r1, r7
   27986:	4628      	mov	r0, r5
   27988:	4798      	blx	r3
   2798a:	2800      	cmp	r0, #0
   2798c:	d1e5      	bne.n	2795a <att_chan_read+0xdc>
   2798e:	e7aa      	b.n	278e6 <att_chan_read+0x68>
		return 0;
   27990:	2700      	movs	r7, #0
   27992:	e7d7      	b.n	27944 <att_chan_read+0xc6>

00027994 <attr_read_group_cb>:
	if (!data->rsp->len) {
   27994:	68d0      	ldr	r0, [r2, #12]
   27996:	7803      	ldrb	r3, [r0, #0]
   27998:	3104      	adds	r1, #4
   2799a:	b913      	cbnz	r3, 279a2 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   2799c:	7001      	strb	r1, [r0, #0]
	return true;
   2799e:	2001      	movs	r0, #1
}
   279a0:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   279a2:	428b      	cmp	r3, r1
   279a4:	d0fb      	beq.n	2799e <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   279a6:	6891      	ldr	r1, [r2, #8]
   279a8:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   279aa:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   279ac:	3b04      	subs	r3, #4
   279ae:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   279b0:	6110      	str	r0, [r2, #16]
		return false;
   279b2:	4770      	bx	lr

000279b4 <chan_req_send>:
{
   279b4:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   279b6:	688e      	ldr	r6, [r1, #8]
{
   279b8:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   279ba:	4630      	mov	r0, r6
{
   279bc:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   279be:	f7ff ff06 	bl	277ce <net_buf_frags_len>
   279c2:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
   279c6:	4283      	cmp	r3, r0
   279c8:	d30a      	bcc.n	279e0 <chan_req_send+0x2c>
	req->buf = NULL;
   279ca:	2200      	movs	r2, #0
	chan->req = req;
   279cc:	f8c5 10cc 	str.w	r1, [r5, #204]	; 0xcc
	err = chan_send(chan, buf, NULL);
   279d0:	4628      	mov	r0, r5
	req->buf = NULL;
   279d2:	608a      	str	r2, [r1, #8]
	err = chan_send(chan, buf, NULL);
   279d4:	4631      	mov	r1, r6
   279d6:	f7e3 fe55 	bl	b684 <chan_send>
	if (err) {
   279da:	b100      	cbz	r0, 279de <chan_req_send+0x2a>
		req->buf = buf;
   279dc:	60a6      	str	r6, [r4, #8]
}
   279de:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   279e0:	f06f 0079 	mvn.w	r0, #121	; 0x79
   279e4:	e7fb      	b.n	279de <chan_req_send+0x2a>

000279e6 <process_queue>:
{
   279e6:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   279e8:	2200      	movs	r2, #0
{
   279ea:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   279ec:	2300      	movs	r3, #0
   279ee:	4608      	mov	r0, r1
{
   279f0:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   279f2:	f001 f906 	bl	28c02 <net_buf_get>
	if (buf) {
   279f6:	4605      	mov	r5, r0
   279f8:	b160      	cbz	r0, 27a14 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   279fa:	4601      	mov	r1, r0
   279fc:	2200      	movs	r2, #0
   279fe:	4620      	mov	r0, r4
   27a00:	f7e3 fe40 	bl	b684 <chan_send>
		if (err) {
   27a04:	4604      	mov	r4, r0
   27a06:	b118      	cbz	r0, 27a10 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   27a08:	4629      	mov	r1, r5
   27a0a:	4630      	mov	r0, r6
   27a0c:	f001 fe49 	bl	296a2 <k_queue_prepend>
}
   27a10:	4620      	mov	r0, r4
   27a12:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   27a14:	f06f 0401 	mvn.w	r4, #1
   27a18:	e7fa      	b.n	27a10 <process_queue+0x2a>

00027a1a <find_info_cb>:
{
   27a1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   27a1c:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   27a1e:	6816      	ldr	r6, [r2, #0]
{
   27a20:	4605      	mov	r5, r0
   27a22:	460f      	mov	r7, r1
   27a24:	4614      	mov	r4, r2
	if (!data->rsp) {
   27a26:	b963      	cbnz	r3, 27a42 <find_info_cb+0x28>
   27a28:	6850      	ldr	r0, [r2, #4]
   27a2a:	2101      	movs	r1, #1
   27a2c:	3008      	adds	r0, #8
   27a2e:	f001 f939 	bl	28ca4 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   27a32:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   27a34:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   27a36:	781b      	ldrb	r3, [r3, #0]
   27a38:	2b00      	cmp	r3, #0
   27a3a:	bf0c      	ite	eq
   27a3c:	2301      	moveq	r3, #1
   27a3e:	2302      	movne	r3, #2
   27a40:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   27a42:	68a3      	ldr	r3, [r4, #8]
   27a44:	781b      	ldrb	r3, [r3, #0]
   27a46:	2b01      	cmp	r3, #1
   27a48:	d003      	beq.n	27a52 <find_info_cb+0x38>
   27a4a:	2b02      	cmp	r3, #2
   27a4c:	d019      	beq.n	27a82 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   27a4e:	2000      	movs	r0, #0
   27a50:	e016      	b.n	27a80 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   27a52:	682b      	ldr	r3, [r5, #0]
   27a54:	781b      	ldrb	r3, [r3, #0]
   27a56:	2b00      	cmp	r3, #0
   27a58:	d1f9      	bne.n	27a4e <find_info_cb+0x34>
   27a5a:	6860      	ldr	r0, [r4, #4]
   27a5c:	2104      	movs	r1, #4
   27a5e:	3008      	adds	r0, #8
   27a60:	f001 f920 	bl	28ca4 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   27a64:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   27a66:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   27a68:	885b      	ldrh	r3, [r3, #2]
   27a6a:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   27a6c:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   27a6e:	8007      	strh	r7, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   27a70:	899b      	ldrh	r3, [r3, #12]
   27a72:	f8b6 005e 	ldrh.w	r0, [r6, #94]	; 0x5e
   27a76:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   27a78:	2804      	cmp	r0, #4
   27a7a:	bf94      	ite	ls
   27a7c:	2000      	movls	r0, #0
   27a7e:	2001      	movhi	r0, #1
}
   27a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   27a82:	682b      	ldr	r3, [r5, #0]
   27a84:	781b      	ldrb	r3, [r3, #0]
   27a86:	2b02      	cmp	r3, #2
   27a88:	d1e1      	bne.n	27a4e <find_info_cb+0x34>
   27a8a:	6860      	ldr	r0, [r4, #4]
   27a8c:	2112      	movs	r1, #18
   27a8e:	3008      	adds	r0, #8
   27a90:	f001 f908 	bl	28ca4 <net_buf_simple_add>
   27a94:	4603      	mov	r3, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   27a96:	682a      	ldr	r2, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   27a98:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   27a9a:	f823 7b02 	strh.w	r7, [r3], #2
   27a9e:	1c51      	adds	r1, r2, #1
   27aa0:	3211      	adds	r2, #17
   27aa2:	f851 0b04 	ldr.w	r0, [r1], #4
   27aa6:	f843 0b04 	str.w	r0, [r3], #4
   27aaa:	4291      	cmp	r1, r2
   27aac:	d1f9      	bne.n	27aa2 <find_info_cb+0x88>
		if (chan->chan.tx.mtu - data->buf->len >
   27aae:	6863      	ldr	r3, [r4, #4]
   27ab0:	f8b6 005e 	ldrh.w	r0, [r6, #94]	; 0x5e
   27ab4:	899b      	ldrh	r3, [r3, #12]
   27ab6:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   27ab8:	2812      	cmp	r0, #18
   27aba:	e7de      	b.n	27a7a <find_info_cb+0x60>

00027abc <k_queue_init>:
{
   27abc:	e92d 4148 	stmdb	sp!, {r3, r6, r8, lr}
   27ac0:	4602      	mov	r2, r0
   27ac2:	f7ff fe7a 	bl	277ba <arch_is_user_context>
	if (z_syscall_trap()) {
   27ac6:	b120      	cbz	r0, 27ad2 <k_queue_init+0x16>
	register uint32_t ret __asm__("r0") = arg1;
   27ac8:	4610      	mov	r0, r2
	register uint32_t r6 __asm__("r6") = call_id;
   27aca:	269b      	movs	r6, #155	; 0x9b
	__asm__ volatile("svc %[svid]\n"
   27acc:	df03      	svc	3
}
   27ace:	e8bd 8148 	ldmia.w	sp!, {r3, r6, r8, pc}
   27ad2:	e8bd 4148 	ldmia.w	sp!, {r3, r6, r8, lr}
	z_impl_k_queue_init(queue);
   27ad6:	4610      	mov	r0, r2
   27ad8:	f001 bdaa 	b.w	29630 <z_impl_k_queue_init>

00027adc <att_exec_write_req>:
   27adc:	2006      	movs	r0, #6
   27ade:	4770      	bx	lr

00027ae0 <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   27ae0:	30c8      	adds	r0, #200	; 0xc8
   27ae2:	f3bf 8f5b 	dmb	ish
   27ae6:	e850 3f00 	ldrex	r3, [r0]
   27aea:	f023 0301 	bic.w	r3, r3, #1
   27aee:	e840 3200 	strex	r2, r3, [r0]
   27af2:	2a00      	cmp	r2, #0
   27af4:	d1f7      	bne.n	27ae6 <chan_rsp_sent+0x6>
   27af6:	f3bf 8f5b 	dmb	ish
}
   27afa:	4770      	bx	lr

00027afc <chan_cfm_sent>:
   27afc:	30c8      	adds	r0, #200	; 0xc8
   27afe:	f3bf 8f5b 	dmb	ish
   27b02:	e850 3f00 	ldrex	r3, [r0]
   27b06:	f023 0302 	bic.w	r3, r3, #2
   27b0a:	e840 3200 	strex	r2, r3, [r0]
   27b0e:	2a00      	cmp	r2, #0
   27b10:	d1f7      	bne.n	27b02 <chan_cfm_sent+0x6>
   27b12:	f3bf 8f5b 	dmb	ish
}
   27b16:	4770      	bx	lr

00027b18 <bt_att_status>:
{
   27b18:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   27b1a:	f3bf 8f5b 	dmb	ish
   27b1e:	680b      	ldr	r3, [r1, #0]
   27b20:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   27b24:	07db      	lsls	r3, r3, #31
{
   27b26:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   27b28:	d519      	bpl.n	27b5e <bt_att_status+0x46>
	if (!chan->att) {
   27b2a:	f850 0c08 	ldr.w	r0, [r0, #-8]
   27b2e:	b1b0      	cbz	r0, 27b5e <bt_att_status+0x46>
	if (chan->req) {
   27b30:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
   27b34:	b99b      	cbnz	r3, 27b5e <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   27b36:	3004      	adds	r0, #4
   27b38:	f7ff fe1a 	bl	27770 <sys_slist_get>
	if (!node) {
   27b3c:	4604      	mov	r4, r0
   27b3e:	b170      	cbz	r0, 27b5e <bt_att_status+0x46>
	return chan_req_send(chan, req);
   27b40:	4601      	mov	r1, r0
   27b42:	f1a5 0008 	sub.w	r0, r5, #8
   27b46:	f7ff ff35 	bl	279b4 <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   27b4a:	2800      	cmp	r0, #0
   27b4c:	da07      	bge.n	27b5e <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   27b4e:	f855 3c08 	ldr.w	r3, [r5, #-8]
Z_GENLIST_PREPEND(slist, snode)
   27b52:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   27b54:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   27b56:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   27b58:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   27b5a:	b902      	cbnz	r2, 27b5e <bt_att_status+0x46>
	list->tail = node;
   27b5c:	609c      	str	r4, [r3, #8]
}
   27b5e:	bd38      	pop	{r3, r4, r5, pc}

00027b60 <att_req_send_process>:
{
   27b60:	b570      	push	{r4, r5, r6, lr}
   27b62:	4605      	mov	r5, r0
	node = sys_slist_get(&att->reqs);
   27b64:	3004      	adds	r0, #4
   27b66:	f7ff fe03 	bl	27770 <sys_slist_get>
	if (!node) {
   27b6a:	4606      	mov	r6, r0
   27b6c:	b1c0      	cbz	r0, 27ba0 <att_req_send_process+0x40>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   27b6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   27b70:	b153      	cbz	r3, 27b88 <att_req_send_process+0x28>
   27b72:	f5b3 708e 	subs.w	r0, r3, #284	; 0x11c
   27b76:	d007      	beq.n	27b88 <att_req_send_process+0x28>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   27b78:	681c      	ldr	r4, [r3, #0]
   27b7a:	b10c      	cbz	r4, 27b80 <att_req_send_process+0x20>
   27b7c:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
		if (!chan->req) {
   27b80:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   27b84:	b13b      	cbz	r3, 27b96 <att_req_send_process+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   27b86:	b964      	cbnz	r4, 27ba2 <att_req_send_process+0x42>
Z_GENLIST_PREPEND(slist, snode)
   27b88:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   27b8a:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   27b8c:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   27b8e:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   27b90:	b933      	cbnz	r3, 27ba0 <att_req_send_process+0x40>
	list->tail = node;
   27b92:	60ae      	str	r6, [r5, #8]
}
   27b94:	e004      	b.n	27ba0 <att_req_send_process+0x40>
	return chan_req_send(chan, req);
   27b96:	4631      	mov	r1, r6
   27b98:	f7ff ff0c 	bl	279b4 <chan_req_send>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   27b9c:	2800      	cmp	r0, #0
   27b9e:	dbf2      	blt.n	27b86 <att_req_send_process+0x26>
}
   27ba0:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   27ba2:	f514 738e 	adds.w	r3, r4, #284	; 0x11c
   27ba6:	d004      	beq.n	27bb2 <att_req_send_process+0x52>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   27ba8:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   27bac:	b10b      	cbz	r3, 27bb2 <att_req_send_process+0x52>
   27bae:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
{
   27bb2:	4620      	mov	r0, r4
   27bb4:	461c      	mov	r4, r3
   27bb6:	e7e3      	b.n	27b80 <att_req_send_process+0x20>

00027bb8 <write_cb>:
{
   27bb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   27bba:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   27bbc:	4601      	mov	r1, r0
{
   27bbe:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   27bc0:	222a      	movs	r2, #42	; 0x2a
   27bc2:	6820      	ldr	r0, [r4, #0]
   27bc4:	f000 fb90 	bl	282e8 <bt_gatt_check_perm>
   27bc8:	4605      	mov	r5, r0
   27bca:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   27bcc:	bb00      	cbnz	r0, 27c10 <write_cb+0x58>
	if (!data->req) {
   27bce:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   27bd0:	68b7      	ldr	r7, [r6, #8]
   27bd2:	68e2      	ldr	r2, [r4, #12]
   27bd4:	6820      	ldr	r0, [r4, #0]
	if (!data->req) {
   27bd6:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
   27bd8:	bf14      	ite	ne
   27bda:	2300      	movne	r3, #0
   27bdc:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   27bde:	9301      	str	r3, [sp, #4]
   27be0:	8a63      	ldrh	r3, [r4, #18]
   27be2:	9300      	str	r3, [sp, #0]
   27be4:	4631      	mov	r1, r6
   27be6:	8a23      	ldrh	r3, [r4, #16]
   27be8:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   27bea:	1e03      	subs	r3, r0, #0
   27bec:	db05      	blt.n	27bfa <write_cb+0x42>
   27bee:	8a22      	ldrh	r2, [r4, #16]
   27bf0:	4293      	cmp	r3, r2
   27bf2:	d10b      	bne.n	27c0c <write_cb+0x54>
	data->err = 0U;
   27bf4:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   27bf6:	2501      	movs	r5, #1
   27bf8:	e005      	b.n	27c06 <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   27bfa:	f113 0fff 	cmn.w	r3, #255	; 0xff
   27bfe:	d305      	bcc.n	27c0c <write_cb+0x54>
		return -err;
   27c00:	425b      	negs	r3, r3
   27c02:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   27c04:	7523      	strb	r3, [r4, #20]
}
   27c06:	4628      	mov	r0, r5
   27c08:	b003      	add	sp, #12
   27c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   27c0c:	230e      	movs	r3, #14
   27c0e:	e7f9      	b.n	27c04 <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   27c10:	2500      	movs	r5, #0
   27c12:	e7f8      	b.n	27c06 <write_cb+0x4e>

00027c14 <bt_att_sent>:
{
   27c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   27c16:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
	struct bt_att *att = chan->att;
   27c1a:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   27c1e:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   27c20:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   27c24:	b10b      	cbz	r3, 27c2a <bt_att_sent+0x16>
		chan->sent(chan);
   27c26:	4638      	mov	r0, r7
   27c28:	4798      	blx	r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   27c2a:	f3bf 8f5b 	dmb	ish
   27c2e:	f105 03c0 	add.w	r3, r5, #192	; 0xc0
   27c32:	e853 2f00 	ldrex	r2, [r3]
   27c36:	f022 0210 	bic.w	r2, r2, #16
   27c3a:	e843 2100 	strex	r1, r2, [r3]
   27c3e:	2900      	cmp	r1, #0
   27c40:	d1f7      	bne.n	27c32 <bt_att_sent+0x1e>
   27c42:	f3bf 8f5b 	dmb	ish
	if (!att) {
   27c46:	b30c      	cbz	r4, 27c8c <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   27c48:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
   27c4c:	b98b      	cbnz	r3, 27c72 <bt_att_sent+0x5e>
   27c4e:	6863      	ldr	r3, [r4, #4]
   27c50:	b17b      	cbz	r3, 27c72 <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   27c52:	1d20      	adds	r0, r4, #4
   27c54:	f7ff fd8c 	bl	27770 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   27c58:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   27c5a:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   27c5c:	4638      	mov	r0, r7
   27c5e:	f7ff fea9 	bl	279b4 <chan_req_send>
   27c62:	2800      	cmp	r0, #0
   27c64:	da12      	bge.n	27c8c <bt_att_sent+0x78>
Z_GENLIST_PREPEND(slist, snode)
   27c66:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   27c68:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   27c6a:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   27c6c:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   27c6e:	b903      	cbnz	r3, 27c72 <bt_att_sent+0x5e>
	list->tail = node;
   27c70:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   27c72:	f105 01c8 	add.w	r1, r5, #200	; 0xc8
   27c76:	4638      	mov	r0, r7
   27c78:	f7ff feb5 	bl	279e6 <process_queue>
	if (!err) {
   27c7c:	b130      	cbz	r0, 27c8c <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   27c7e:	f104 010c 	add.w	r1, r4, #12
   27c82:	4638      	mov	r0, r7
}
   27c84:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   27c88:	f7ff bead 	b.w	279e6 <process_queue>
}
   27c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00027c8e <read_cb>:
{
   27c8e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   27c92:	f8d2 8000 	ldr.w	r8, [r2]
{
   27c96:	4606      	mov	r6, r0
	data->err = 0x00;
   27c98:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   27c9a:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   27c9e:	7317      	strb	r7, [r2, #12]
{
   27ca0:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   27ca2:	4631      	mov	r1, r6
   27ca4:	2215      	movs	r2, #21
   27ca6:	f000 fb1f 	bl	282e8 <bt_gatt_check_perm>
   27caa:	4604      	mov	r4, r0
   27cac:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   27cae:	b9a0      	cbnz	r0, 27cda <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   27cb0:	e9cd 0000 	strd	r0, r0, [sp]
   27cb4:	88ab      	ldrh	r3, [r5, #4]
   27cb6:	68aa      	ldr	r2, [r5, #8]
   27cb8:	4631      	mov	r1, r6
   27cba:	4640      	mov	r0, r8
   27cbc:	f7ff fddf 	bl	2787e <att_chan_read>
	if (ret < 0) {
   27cc0:	1e03      	subs	r3, r0, #0
   27cc2:	da0c      	bge.n	27cde <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   27cc4:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   27cc8:	bf26      	itte	cs
   27cca:	425b      	negcs	r3, r3
   27ccc:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   27cce:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   27cd0:	732b      	strb	r3, [r5, #12]
}
   27cd2:	4620      	mov	r0, r4
   27cd4:	b002      	add	sp, #8
   27cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   27cda:	463c      	mov	r4, r7
   27cdc:	e7f9      	b.n	27cd2 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   27cde:	2401      	movs	r4, #1
   27ce0:	e7f7      	b.n	27cd2 <read_cb+0x44>

00027ce2 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   27ce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27ce6:	4688      	mov	r8, r1
   27ce8:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   27cea:	2101      	movs	r1, #1
   27cec:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   27cee:	4605      	mov	r5, r0
   27cf0:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   27cf2:	f7e3 fe41 	bl	b978 <bt_att_chan_create_pdu>
	if (!buf) {
   27cf6:	4604      	mov	r4, r0
   27cf8:	b170      	cbz	r0, 27d18 <send_err_rsp.part.0+0x36>
   27cfa:	2104      	movs	r1, #4
   27cfc:	3008      	adds	r0, #8
   27cfe:	f000 ffd1 	bl	28ca4 <net_buf_simple_add>
	rsp->request = req;
   27d02:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   27d06:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   27d08:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   27d0c:	4621      	mov	r1, r4
   27d0e:	4628      	mov	r0, r5
}
   27d10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   27d14:	f7e3 bd34 	b.w	b780 <bt_att_chan_send_rsp.constprop.0>
}
   27d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00027d1c <att_read_blob_req>:
{
   27d1c:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   27d1e:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   27d20:	8813      	ldrh	r3, [r2, #0]
   27d22:	8852      	ldrh	r2, [r2, #2]
   27d24:	9200      	str	r2, [sp, #0]
   27d26:	210c      	movs	r1, #12
   27d28:	220d      	movs	r2, #13
   27d2a:	f7e4 f8c1 	bl	beb0 <att_read_rsp>
}
   27d2e:	b003      	add	sp, #12
   27d30:	f85d fb04 	ldr.w	pc, [sp], #4

00027d34 <att_read_req>:
{
   27d34:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   27d36:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   27d38:	2200      	movs	r2, #0
   27d3a:	881b      	ldrh	r3, [r3, #0]
   27d3c:	9200      	str	r2, [sp, #0]
   27d3e:	210a      	movs	r1, #10
   27d40:	220b      	movs	r2, #11
   27d42:	f7e4 f8b5 	bl	beb0 <att_read_rsp>
}
   27d46:	b003      	add	sp, #12
   27d48:	f85d fb04 	ldr.w	pc, [sp], #4

00027d4c <att_mtu_req>:
{
   27d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   27d4e:	6803      	ldr	r3, [r0, #0]
{
   27d50:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   27d52:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   27d54:	f3bf 8f5b 	dmb	ish
   27d58:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
   27d5c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   27d60:	f3c3 04c0 	ubfx	r4, r3, #3, #1
   27d64:	071b      	lsls	r3, r3, #28
   27d66:	d41d      	bmi.n	27da4 <att_mtu_req+0x58>
	mtu_client = sys_le16_to_cpu(req->mtu);
   27d68:	688b      	ldr	r3, [r1, #8]
   27d6a:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   27d6c:	2e16      	cmp	r6, #22
   27d6e:	d91b      	bls.n	27da8 <att_mtu_req+0x5c>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   27d70:	2202      	movs	r2, #2
   27d72:	2103      	movs	r1, #3
   27d74:	f7e3 ff96 	bl	bca4 <bt_att_create_pdu>
	if (!pdu) {
   27d78:	4607      	mov	r7, r0
   27d7a:	b1b8      	cbz	r0, 27dac <att_mtu_req+0x60>
   27d7c:	2102      	movs	r1, #2
   27d7e:	3008      	adds	r0, #8
   27d80:	f000 ff90 	bl	28ca4 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   27d84:	2341      	movs	r3, #65	; 0x41
   27d86:	7003      	strb	r3, [r0, #0]
   27d88:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   27d8a:	4639      	mov	r1, r7
   27d8c:	4628      	mov	r0, r5
   27d8e:	f7e3 fcf7 	bl	b780 <bt_att_chan_send_rsp.constprop.0>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   27d92:	2e41      	cmp	r6, #65	; 0x41
   27d94:	bf28      	it	cs
   27d96:	2641      	movcs	r6, #65	; 0x41
   27d98:	f8a5 6052 	strh.w	r6, [r5, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   27d9c:	f8a5 605e 	strh.w	r6, [r5, #94]	; 0x5e
	return 0;
   27da0:	4620      	mov	r0, r4
}
   27da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   27da4:	2006      	movs	r0, #6
   27da6:	e7fc      	b.n	27da2 <att_mtu_req+0x56>
		return BT_ATT_ERR_INVALID_PDU;
   27da8:	2004      	movs	r0, #4
   27daa:	e7fa      	b.n	27da2 <att_mtu_req+0x56>
		return BT_ATT_ERR_UNLIKELY;
   27dac:	200e      	movs	r0, #14
   27dae:	e7f8      	b.n	27da2 <att_mtu_req+0x56>

00027db0 <bt_att_init>:
	bt_gatt_init();
   27db0:	f7e4 bdde 	b.w	c970 <bt_gatt_init>

00027db4 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   27db4:	898a      	ldrh	r2, [r1, #12]
   27db6:	6889      	ldr	r1, [r1, #8]
   27db8:	2300      	movs	r3, #0
   27dba:	f7e4 b9eb 	b.w	c194 <att_handle_rsp>

00027dbe <bt_att_encrypt_change>:
	if (!att_chan->att) {
   27dbe:	f850 3c08 	ldr.w	r3, [r0, #-8]
{
   27dc2:	b570      	push	{r4, r5, r6, lr}
   27dc4:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   27dc6:	f1a0 0608 	sub.w	r6, r0, #8
	if (!att_chan->att) {
   27dca:	2b00      	cmp	r3, #0
   27dcc:	d037      	beq.n	27e3e <bt_att_encrypt_change+0x80>
	if (hci_status) {
   27dce:	b171      	cbz	r1, 27dee <bt_att_encrypt_change+0x30>
		if (att_chan->req && att_chan->req->retrying) {
   27dd0:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
   27dd4:	2b00      	cmp	r3, #0
   27dd6:	d032      	beq.n	27e3e <bt_att_encrypt_change+0x80>
   27dd8:	7c1b      	ldrb	r3, [r3, #16]
   27dda:	07da      	lsls	r2, r3, #31
   27ddc:	d52f      	bpl.n	27e3e <bt_att_encrypt_change+0x80>
		return BT_ATT_ERR_AUTHENTICATION;
   27dde:	2305      	movs	r3, #5
		att_handle_rsp(att_chan, NULL, 0, err);
   27de0:	2200      	movs	r2, #0
   27de2:	4630      	mov	r0, r6
   27de4:	4611      	mov	r1, r2
}
   27de6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   27dea:	f7e4 b9d3 	b.w	c194 <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
   27dee:	6805      	ldr	r5, [r0, #0]
	bt_gatt_encrypt_change(conn);
   27df0:	4628      	mov	r0, r5
   27df2:	f7e5 f8d9 	bl	cfa8 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   27df6:	7a6b      	ldrb	r3, [r5, #9]
   27df8:	2b01      	cmp	r3, #1
   27dfa:	d020      	beq.n	27e3e <bt_att_encrypt_change+0x80>
	if (!(att_chan->req && att_chan->req->retrying)) {
   27dfc:	f8d4 40c4 	ldr.w	r4, [r4, #196]	; 0xc4
   27e00:	b1ec      	cbz	r4, 27e3e <bt_att_encrypt_change+0x80>
   27e02:	7c23      	ldrb	r3, [r4, #16]
   27e04:	07db      	lsls	r3, r3, #31
   27e06:	d51a      	bpl.n	27e3e <bt_att_encrypt_change+0x80>
	if (!req->encode) {
   27e08:	68e3      	ldr	r3, [r4, #12]
   27e0a:	2b00      	cmp	r3, #0
   27e0c:	d0e7      	beq.n	27dde <bt_att_encrypt_change+0x20>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   27e0e:	6962      	ldr	r2, [r4, #20]
   27e10:	7c61      	ldrb	r1, [r4, #17]
   27e12:	4630      	mov	r0, r6
   27e14:	f7e3 fdb0 	bl	b978 <bt_att_chan_create_pdu>
	if (!buf) {
   27e18:	4605      	mov	r5, r0
   27e1a:	b140      	cbz	r0, 27e2e <bt_att_encrypt_change+0x70>
	if (req->encode(buf, req->len, req->user_data)) {
   27e1c:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
   27e20:	68e3      	ldr	r3, [r4, #12]
   27e22:	4798      	blx	r3
   27e24:	4602      	mov	r2, r0
   27e26:	b120      	cbz	r0, 27e32 <bt_att_encrypt_change+0x74>
		net_buf_unref(buf);
   27e28:	4628      	mov	r0, r5
   27e2a:	f7f4 fce5 	bl	1c7f8 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   27e2e:	230e      	movs	r3, #14
   27e30:	e7d6      	b.n	27de0 <bt_att_encrypt_change+0x22>
	if (chan_send(att_chan, buf, NULL)) {
   27e32:	4629      	mov	r1, r5
   27e34:	4630      	mov	r0, r6
   27e36:	f7e3 fc25 	bl	b684 <chan_send>
   27e3a:	2800      	cmp	r0, #0
   27e3c:	d1f4      	bne.n	27e28 <bt_att_encrypt_change+0x6a>
}
   27e3e:	bd70      	pop	{r4, r5, r6, pc}

00027e40 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   27e40:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   27e44:	4607      	mov	r7, r0
   27e46:	460d      	mov	r5, r1
   27e48:	4616      	mov	r6, r2
   27e4a:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   27e4c:	f7e3 fa48 	bl	b2e0 <att_get>
	if (!att) {
   27e50:	4604      	mov	r4, r0
   27e52:	b938      	cbnz	r0, 27e64 <bt_att_send+0x24>
		net_buf_unref(buf);
   27e54:	4628      	mov	r0, r5
   27e56:	f7f4 fccf 	bl	1c7f8 <net_buf_unref>
		return -ENOTCONN;
   27e5a:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   27e5e:	b002      	add	sp, #8
   27e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   27e64:	b146      	cbz	r6, 27e78 <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   27e66:	f8cd 8000 	str.w	r8, [sp]
   27e6a:	4633      	mov	r3, r6
   27e6c:	462a      	mov	r2, r5
   27e6e:	2104      	movs	r1, #4
   27e70:	4638      	mov	r0, r7
   27e72:	f7ff fc43 	bl	276fc <bt_l2cap_send_cb>
   27e76:	e7f2      	b.n	27e5e <bt_att_send+0x1e>
	net_buf_put(&att->tx_queue, buf);
   27e78:	f100 060c 	add.w	r6, r0, #12
   27e7c:	4629      	mov	r1, r5
   27e7e:	4630      	mov	r0, r6
   27e80:	f000 fedd 	bl	28c3e <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   27e84:	2200      	movs	r2, #0
   27e86:	2300      	movs	r3, #0
   27e88:	4630      	mov	r0, r6
   27e8a:	f000 feba 	bl	28c02 <net_buf_get>
	if (!buf) {
   27e8e:	4605      	mov	r5, r0
   27e90:	b908      	cbnz	r0, 27e96 <bt_att_send+0x56>
	return 0;
   27e92:	2000      	movs	r0, #0
   27e94:	e7e3      	b.n	27e5e <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   27e96:	6a63      	ldr	r3, [r4, #36]	; 0x24
   27e98:	b1c3      	cbz	r3, 27ecc <bt_att_send+0x8c>
   27e9a:	f5b3 708e 	subs.w	r0, r3, #284	; 0x11c
   27e9e:	d015      	beq.n	27ecc <bt_att_send+0x8c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   27ea0:	681c      	ldr	r4, [r3, #0]
   27ea2:	b10c      	cbz	r4, 27ea8 <bt_att_send+0x68>
   27ea4:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
	return chan_send(chan, buf, cb);
   27ea8:	2200      	movs	r2, #0
   27eaa:	4629      	mov	r1, r5
   27eac:	f7e3 fbea 	bl	b684 <chan_send>
		if (err >= 0) {
   27eb0:	2800      	cmp	r0, #0
   27eb2:	daee      	bge.n	27e92 <bt_att_send+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   27eb4:	b154      	cbz	r4, 27ecc <bt_att_send+0x8c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   27eb6:	f514 738e 	adds.w	r3, r4, #284	; 0x11c
   27eba:	d004      	beq.n	27ec6 <bt_att_send+0x86>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   27ebc:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   27ec0:	b10b      	cbz	r3, 27ec6 <bt_att_send+0x86>
   27ec2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
{
   27ec6:	4620      	mov	r0, r4
   27ec8:	461c      	mov	r4, r3
   27eca:	e7ed      	b.n	27ea8 <bt_att_send+0x68>
		k_queue_prepend(&att->tx_queue._queue, buf);
   27ecc:	4629      	mov	r1, r5
   27ece:	4630      	mov	r0, r6
   27ed0:	f001 fbe7 	bl	296a2 <k_queue_prepend>
   27ed4:	e7dd      	b.n	27e92 <bt_att_send+0x52>

00027ed6 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   27ed6:	b510      	push	{r4, lr}
   27ed8:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   27eda:	f7e3 fa01 	bl	b2e0 <att_get>
	if (!att) {
   27ede:	b160      	cbz	r0, 27efa <bt_att_req_send+0x24>
	parent->next = child;
   27ee0:	2300      	movs	r3, #0
   27ee2:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   27ee4:	6883      	ldr	r3, [r0, #8]
   27ee6:	b92b      	cbnz	r3, 27ef4 <bt_att_req_send+0x1e>
	list->head = node;
   27ee8:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   27eec:	f7ff fe38 	bl	27b60 <att_req_send_process>

	return 0;
   27ef0:	2000      	movs	r0, #0
}
   27ef2:	bd10      	pop	{r4, pc}
	parent->next = child;
   27ef4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   27ef6:	6084      	str	r4, [r0, #8]
}
   27ef8:	e7f8      	b.n	27eec <bt_att_req_send+0x16>
		return -ENOTCONN;
   27efa:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   27efe:	e7f8      	b.n	27ef2 <bt_att_req_send+0x1c>

00027f00 <arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   27f00:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   27f04:	b923      	cbnz	r3, 27f10 <arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   27f06:	f3ef 8014 	mrs	r0, CONTROL
	return (value & CONTROL_nPRIV_Msk) ? true : false;
   27f0a:	f000 0001 	and.w	r0, r0, #1
   27f0e:	4770      	bx	lr
		return false;
   27f10:	2000      	movs	r0, #0
}
   27f12:	4770      	bx	lr

00027f14 <gatt_ccc_changed>:
{
   27f14:	460b      	mov	r3, r1
   27f16:	8909      	ldrh	r1, [r1, #8]
   27f18:	8a5a      	ldrh	r2, [r3, #18]
   27f1a:	4291      	cmp	r1, r2
   27f1c:	bf38      	it	cc
   27f1e:	4611      	movcc	r1, r2
	if (value != ccc->value) {
   27f20:	8a9a      	ldrh	r2, [r3, #20]
   27f22:	428a      	cmp	r2, r1
   27f24:	d003      	beq.n	27f2e <gatt_ccc_changed+0x1a>
		ccc->value = value;
   27f26:	8299      	strh	r1, [r3, #20]
		if (ccc->cfg_changed) {
   27f28:	699b      	ldr	r3, [r3, #24]
   27f2a:	b103      	cbz	r3, 27f2e <gatt_ccc_changed+0x1a>
			ccc->cfg_changed(attr, value);
   27f2c:	4718      	bx	r3
}
   27f2e:	4770      	bx	lr

00027f30 <gatt_indicate_rsp>:
{
   27f30:	b510      	push	{r4, lr}
   27f32:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   27f34:	68a3      	ldr	r3, [r4, #8]
{
   27f36:	460a      	mov	r2, r1
	if (params->func) {
   27f38:	b10b      	cbz	r3, 27f3e <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   27f3a:	4621      	mov	r1, r4
   27f3c:	4798      	blx	r3
	params->_ref--;
   27f3e:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   27f40:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   27f42:	3b01      	subs	r3, #1
   27f44:	b2db      	uxtb	r3, r3
   27f46:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   27f48:	b122      	cbz	r2, 27f54 <gatt_indicate_rsp+0x24>
   27f4a:	b91b      	cbnz	r3, 27f54 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   27f4c:	4620      	mov	r0, r4
}
   27f4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   27f52:	4710      	bx	r2
}
   27f54:	bd10      	pop	{r4, pc}

00027f56 <match_uuid>:
	data->attr = attr;
   27f56:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   27f58:	8091      	strh	r1, [r2, #4]
}
   27f5a:	2000      	movs	r0, #0
   27f5c:	4770      	bx	lr

00027f5e <gen_hash_m>:
{
   27f5e:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   27f60:	6807      	ldr	r7, [r0, #0]
   27f62:	783d      	ldrb	r5, [r7, #0]
{
   27f64:	b089      	sub	sp, #36	; 0x24
   27f66:	4606      	mov	r6, r0
   27f68:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   27f6a:	b10d      	cbz	r5, 27f70 <gen_hash_m+0x12>
	switch (u16->val) {
   27f6c:	2501      	movs	r5, #1
   27f6e:	e014      	b.n	27f9a <gen_hash_m+0x3c>
   27f70:	887b      	ldrh	r3, [r7, #2]
   27f72:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   27f76:	d004      	beq.n	27f82 <gen_hash_m+0x24>
   27f78:	d812      	bhi.n	27fa0 <gen_hash_m+0x42>
   27f7a:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   27f7e:	2b03      	cmp	r3, #3
   27f80:	d8f4      	bhi.n	27f6c <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   27f82:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   27f86:	2202      	movs	r2, #2
   27f88:	f10d 010e 	add.w	r1, sp, #14
   27f8c:	4620      	mov	r0, r4
   27f8e:	f7fe fcaa 	bl	268e6 <tc_cmac_update>
   27f92:	b9e0      	cbnz	r0, 27fce <gen_hash_m+0x70>
			state->err = -EINVAL;
   27f94:	f06f 0315 	mvn.w	r3, #21
   27f98:	65a3      	str	r3, [r4, #88]	; 0x58
}
   27f9a:	4628      	mov	r0, r5
   27f9c:	b009      	add	sp, #36	; 0x24
   27f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   27fa0:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   27fa4:	33ff      	adds	r3, #255	; 0xff
   27fa6:	b29b      	uxth	r3, r3
   27fa8:	2b04      	cmp	r3, #4
   27faa:	d8df      	bhi.n	27f6c <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   27fac:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   27fb0:	2202      	movs	r2, #2
   27fb2:	f10d 010e 	add.w	r1, sp, #14
   27fb6:	4620      	mov	r0, r4
   27fb8:	f7fe fc95 	bl	268e6 <tc_cmac_update>
   27fbc:	2800      	cmp	r0, #0
   27fbe:	d0e9      	beq.n	27f94 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   27fc0:	887b      	ldrh	r3, [r7, #2]
   27fc2:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   27fc6:	2202      	movs	r2, #2
   27fc8:	f10d 010e 	add.w	r1, sp, #14
   27fcc:	e017      	b.n	27ffe <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   27fce:	887b      	ldrh	r3, [r7, #2]
   27fd0:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   27fd4:	2202      	movs	r2, #2
   27fd6:	f10d 010e 	add.w	r1, sp, #14
   27fda:	4620      	mov	r0, r4
   27fdc:	f7fe fc83 	bl	268e6 <tc_cmac_update>
   27fe0:	2800      	cmp	r0, #0
   27fe2:	d0d7      	beq.n	27f94 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   27fe4:	2000      	movs	r0, #0
   27fe6:	2310      	movs	r3, #16
   27fe8:	eb0d 0203 	add.w	r2, sp, r3
   27fec:	6877      	ldr	r7, [r6, #4]
   27fee:	9000      	str	r0, [sp, #0]
   27ff0:	4631      	mov	r1, r6
   27ff2:	47b8      	blx	r7
		if (len < 0) {
   27ff4:	1e02      	subs	r2, r0, #0
   27ff6:	da01      	bge.n	27ffc <gen_hash_m+0x9e>
			state->err = len;
   27ff8:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   27ffa:	e7ce      	b.n	27f9a <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   27ffc:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   27ffe:	4620      	mov	r0, r4
   28000:	f7fe fc71 	bl	268e6 <tc_cmac_update>
   28004:	2800      	cmp	r0, #0
   28006:	d1b1      	bne.n	27f6c <gen_hash_m+0xe>
   28008:	e7c4      	b.n	27f94 <gen_hash_m+0x36>

0002800a <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2800a:	2301      	movs	r3, #1
   2800c:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2800e:	f3bf 8f5b 	dmb	ish
   28012:	e850 2f00 	ldrex	r2, [r0]
   28016:	431a      	orrs	r2, r3
   28018:	e840 2100 	strex	r1, r2, [r0]
   2801c:	2900      	cmp	r1, #0
   2801e:	d1f8      	bne.n	28012 <atomic_set_bit+0x8>
   28020:	f3bf 8f5b 	dmb	ish
}
   28024:	4770      	bx	lr

00028026 <bt_addr_le_copy>:
   28026:	680b      	ldr	r3, [r1, #0]
   28028:	6003      	str	r3, [r0, #0]
   2802a:	888b      	ldrh	r3, [r1, #4]
   2802c:	8083      	strh	r3, [r0, #4]
   2802e:	798b      	ldrb	r3, [r1, #6]
   28030:	7183      	strb	r3, [r0, #6]
}
   28032:	4770      	bx	lr

00028034 <clear_sc_cfg>:
__ssp_bos_icheck3(memset, void *, int)
   28034:	2300      	movs	r3, #0
   28036:	6003      	str	r3, [r0, #0]
   28038:	6043      	str	r3, [r0, #4]
   2803a:	6083      	str	r3, [r0, #8]
}
   2803c:	4770      	bx	lr

0002803e <bt_gatt_attr_read.constprop.0>:
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   2803e:	b538      	push	{r3, r4, r5, lr}
   28040:	f8bd 5010 	ldrh.w	r5, [sp, #16]
	if (offset > value_len) {
   28044:	4295      	cmp	r5, r2
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   28046:	460c      	mov	r4, r1
   28048:	4611      	mov	r1, r2
	if (offset > value_len) {
   2804a:	d30a      	bcc.n	28062 <bt_gatt_attr_read.constprop.0+0x24>
	len = MIN(buf_len, value_len - offset);
   2804c:	1aad      	subs	r5, r5, r2
   2804e:	42a5      	cmp	r5, r4
   28050:	bfa8      	it	ge
   28052:	4625      	movge	r5, r4
   28054:	b2ad      	uxth	r5, r5
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   28056:	462a      	mov	r2, r5
   28058:	4419      	add	r1, r3
   2805a:	f002 f9c1 	bl	2a3e0 <memcpy>
}
   2805e:	4628      	mov	r0, r5
   28060:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   28062:	f06f 0506 	mvn.w	r5, #6
   28066:	e7fa      	b.n	2805e <bt_gatt_attr_read.constprop.0+0x20>

00028068 <bt_gatt_attr_read_service>:
{
   28068:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2806a:	460c      	mov	r4, r1
   2806c:	4619      	mov	r1, r3
	struct bt_uuid *uuid = attr->user_data;
   2806e:	68e3      	ldr	r3, [r4, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
   28070:	781c      	ldrb	r4, [r3, #0]
{
   28072:	4610      	mov	r0, r2
   28074:	f8bd 2018 	ldrh.w	r2, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   28078:	b954      	cbnz	r4, 28090 <bt_gatt_attr_read_service+0x28>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   2807a:	885b      	ldrh	r3, [r3, #2]
   2807c:	f8ad 300e 	strh.w	r3, [sp, #14]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   28080:	2302      	movs	r3, #2
   28082:	9300      	str	r3, [sp, #0]
   28084:	f10d 030e 	add.w	r3, sp, #14
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   28088:	f7ff ffd9 	bl	2803e <bt_gatt_attr_read.constprop.0>
}
   2808c:	b004      	add	sp, #16
   2808e:	bd10      	pop	{r4, pc}
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   28090:	2410      	movs	r4, #16
   28092:	9400      	str	r4, [sp, #0]
   28094:	3301      	adds	r3, #1
   28096:	e7f7      	b.n	28088 <bt_gatt_attr_read_service+0x20>

00028098 <read_name>:
{
   28098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2809c:	4614      	mov	r4, r2
   2809e:	461d      	mov	r5, r3
   280a0:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	const char *name = bt_get_name();
   280a4:	f7e1 f80e 	bl	90c4 <bt_get_name>
   280a8:	4606      	mov	r6, r0
				 strlen(name));
   280aa:	f7d8 fecd 	bl	e48 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   280ae:	b280      	uxth	r0, r0
   280b0:	9006      	str	r0, [sp, #24]
   280b2:	4633      	mov	r3, r6
   280b4:	463a      	mov	r2, r7
   280b6:	4629      	mov	r1, r5
   280b8:	4620      	mov	r0, r4
}
   280ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   280be:	f7ff bfbe 	b.w	2803e <bt_gatt_attr_read.constprop.0>

000280c2 <read_appearance>:
{
   280c2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   280c4:	4619      	mov	r1, r3
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   280c6:	f240 3341 	movw	r3, #833	; 0x341
   280ca:	f8ad 300e 	strh.w	r3, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   280ce:	2302      	movs	r3, #2
   280d0:	9300      	str	r3, [sp, #0]
{
   280d2:	4610      	mov	r0, r2
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   280d4:	f10d 030e 	add.w	r3, sp, #14
   280d8:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   280dc:	f7ff ffaf 	bl	2803e <bt_gatt_attr_read.constprop.0>
}
   280e0:	b005      	add	sp, #20
   280e2:	f85d fb04 	ldr.w	pc, [sp], #4

000280e6 <clear_cf_cfg>:
{
   280e6:	b513      	push	{r0, r1, r4, lr}
   280e8:	4602      	mov	r2, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   280ea:	2400      	movs	r4, #0
   280ec:	4669      	mov	r1, sp
   280ee:	3001      	adds	r0, #1
   280f0:	9400      	str	r4, [sp, #0]
   280f2:	f8cd 4003 	str.w	r4, [sp, #3]
   280f6:	f7ff ff96 	bl	28026 <bt_addr_le_copy>
__ssp_bos_icheck3(memset, void *, int)
   280fa:	7214      	strb	r4, [r2, #8]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   280fc:	320c      	adds	r2, #12
   280fe:	f3bf 8f5b 	dmb	ish
   28102:	e852 3f00 	ldrex	r3, [r2]
   28106:	e842 4100 	strex	r1, r4, [r2]
   2810a:	2900      	cmp	r1, #0
   2810c:	d1f9      	bne.n	28102 <clear_cf_cfg+0x1c>
   2810e:	f3bf 8f5b 	dmb	ish
}
   28112:	b002      	add	sp, #8
   28114:	bd10      	pop	{r4, pc}

00028116 <sc_clear>:
{
   28116:	b538      	push	{r3, r4, r5, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   28118:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
   2811c:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2811e:	4629      	mov	r1, r5
   28120:	7a00      	ldrb	r0, [r0, #8]
   28122:	f7fe ff27 	bl	26f74 <bt_addr_le_is_bonded>
   28126:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   28128:	4629      	mov	r1, r5
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2812a:	f7e4 f971 	bl	c410 <find_sc_cfg>
		if (cfg) {
   2812e:	b118      	cbz	r0, 28138 <sc_clear+0x22>
}
   28130:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			clear_sc_cfg(cfg);
   28134:	f7ff bf7e 	b.w	28034 <clear_sc_cfg>
}
   28138:	bd38      	pop	{r3, r4, r5, pc}

0002813a <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   2813a:	2a02      	cmp	r2, #2
{
   2813c:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   2813e:	d108      	bne.n	28152 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   28140:	2300      	movs	r3, #0
   28142:	f100 0188 	add.w	r1, r0, #136	; 0x88
   28146:	461a      	mov	r2, r3
   28148:	7a00      	ldrb	r0, [r0, #8]
   2814a:	f7e4 f983 	bl	c454 <sc_save>
}
   2814e:	2002      	movs	r0, #2
   28150:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   28152:	f7ff ffe0 	bl	28116 <sc_clear>
   28156:	e7fa      	b.n	2814e <sc_ccc_cfg_write+0x14>

00028158 <sc_restore_rsp>:
{
   28158:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   2815a:	f7e4 f9bd 	bl	c4d8 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   2815e:	b140      	cbz	r0, 28172 <sc_restore_rsp+0x1a>
   28160:	7a03      	ldrb	r3, [r0, #8]
   28162:	07db      	lsls	r3, r3, #31
   28164:	d505      	bpl.n	28172 <sc_restore_rsp+0x1a>
}
   28166:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   2816a:	2100      	movs	r1, #0
   2816c:	300c      	adds	r0, #12
   2816e:	f7ff bf4c 	b.w	2800a <atomic_set_bit>
}
   28172:	bd08      	pop	{r3, pc}

00028174 <cf_read>:
{
   28174:	b530      	push	{r4, r5, lr}
   28176:	b085      	sub	sp, #20
   28178:	461d      	mov	r5, r3
	uint8_t data[1] = {};
   2817a:	2300      	movs	r3, #0
{
   2817c:	4614      	mov	r4, r2
	uint8_t data[1] = {};
   2817e:	f88d 300c 	strb.w	r3, [sp, #12]
	cfg = find_cf_cfg(conn);
   28182:	f7e4 f9a9 	bl	c4d8 <find_cf_cfg>
	if (cfg) {
   28186:	b110      	cbz	r0, 2818e <cf_read+0x1a>
		memcpy(data, cfg->data, sizeof(data));
   28188:	7a03      	ldrb	r3, [r0, #8]
   2818a:	f88d 300c 	strb.w	r3, [sp, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   2818e:	2301      	movs	r3, #1
   28190:	9300      	str	r3, [sp, #0]
   28192:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   28196:	ab03      	add	r3, sp, #12
   28198:	4629      	mov	r1, r5
   2819a:	4620      	mov	r0, r4
   2819c:	f7ff ff4f 	bl	2803e <bt_gatt_attr_read.constprop.0>
}
   281a0:	b005      	add	sp, #20
   281a2:	bd30      	pop	{r4, r5, pc}

000281a4 <find_ccc_cfg>:
{
   281a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   281a6:	4606      	mov	r6, r0
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   281a8:	1c4c      	adds	r4, r1, #1
   281aa:	f101 0515 	add.w	r5, r1, #21
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   281ae:	1e67      	subs	r7, r4, #1
		if (conn) {
   281b0:	b14e      	cbz	r6, 281c6 <find_ccc_cfg+0x22>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   281b2:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   281b6:	4622      	mov	r2, r4
   281b8:	4630      	mov	r0, r6
   281ba:	f7ff f967 	bl	2748c <bt_conn_is_peer_addr_le>
   281be:	b160      	cbz	r0, 281da <find_ccc_cfg+0x36>
}
   281c0:	4638      	mov	r0, r7
   281c2:	b003      	add	sp, #12
   281c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return memcmp(a, b, sizeof(*a));
   281c6:	2207      	movs	r2, #7
   281c8:	4669      	mov	r1, sp
   281ca:	4620      	mov	r0, r4
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   281cc:	9600      	str	r6, [sp, #0]
   281ce:	f8cd 6003 	str.w	r6, [sp, #3]
   281d2:	f002 f8f7 	bl	2a3c4 <memcmp>
   281d6:	2800      	cmp	r0, #0
   281d8:	d0f2      	beq.n	281c0 <find_ccc_cfg+0x1c>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   281da:	340a      	adds	r4, #10
   281dc:	42ac      	cmp	r4, r5
   281de:	d1e6      	bne.n	281ae <find_ccc_cfg+0xa>
	return NULL;
   281e0:	2700      	movs	r7, #0
   281e2:	e7ed      	b.n	281c0 <find_ccc_cfg+0x1c>

000281e4 <bt_gatt_attr_read_ccc>:
{
   281e4:	b530      	push	{r4, r5, lr}
	cfg = find_ccc_cfg(conn, ccc);
   281e6:	68c9      	ldr	r1, [r1, #12]
{
   281e8:	b085      	sub	sp, #20
   281ea:	4614      	mov	r4, r2
   281ec:	461d      	mov	r5, r3
	cfg = find_ccc_cfg(conn, ccc);
   281ee:	f7ff ffd9 	bl	281a4 <find_ccc_cfg>
	if (cfg) {
   281f2:	b100      	cbz	r0, 281f6 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(cfg->value);
   281f4:	8900      	ldrh	r0, [r0, #8]
   281f6:	f8ad 000e 	strh.w	r0, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   281fa:	2302      	movs	r3, #2
   281fc:	9300      	str	r3, [sp, #0]
   281fe:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   28202:	f10d 030e 	add.w	r3, sp, #14
   28206:	4629      	mov	r1, r5
   28208:	4620      	mov	r0, r4
   2820a:	f7ff ff18 	bl	2803e <bt_gatt_attr_read.constprop.0>
}
   2820e:	b005      	add	sp, #20
   28210:	bd30      	pop	{r4, r5, pc}

00028212 <bt_gatt_attr_read>:
{
   28212:	b538      	push	{r3, r4, r5, lr}
   28214:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   28218:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (offset > value_len) {
   2821c:	428d      	cmp	r5, r1
{
   2821e:	4610      	mov	r0, r2
	if (offset > value_len) {
   28220:	d30b      	bcc.n	2823a <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   28222:	1a6d      	subs	r5, r5, r1
   28224:	429d      	cmp	r5, r3
   28226:	bfa8      	it	ge
   28228:	461d      	movge	r5, r3
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2822a:	9b05      	ldr	r3, [sp, #20]
   2822c:	b2ad      	uxth	r5, r5
   2822e:	462a      	mov	r2, r5
   28230:	4419      	add	r1, r3
   28232:	f002 f8d5 	bl	2a3e0 <memcpy>
}
   28236:	4628      	mov	r0, r5
   28238:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2823a:	f06f 0506 	mvn.w	r5, #6
   2823e:	e7fa      	b.n	28236 <bt_gatt_attr_read+0x24>

00028240 <bt_gatt_attr_value_handle>:
{
   28240:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   28242:	4604      	mov	r4, r0
   28244:	b910      	cbnz	r0, 2824c <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   28246:	2000      	movs	r0, #0
}
   28248:	b002      	add	sp, #8
   2824a:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2824c:	2300      	movs	r3, #0
   2824e:	f88d 3004 	strb.w	r3, [sp, #4]
   28252:	6800      	ldr	r0, [r0, #0]
   28254:	f642 0303 	movw	r3, #10243	; 0x2803
   28258:	a901      	add	r1, sp, #4
   2825a:	f8ad 3006 	strh.w	r3, [sp, #6]
   2825e:	f7fe fce6 	bl	26c2e <bt_uuid_cmp>
   28262:	2800      	cmp	r0, #0
   28264:	d1ef      	bne.n	28246 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   28266:	68e3      	ldr	r3, [r4, #12]
   28268:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   2826a:	2800      	cmp	r0, #0
   2826c:	d1ec      	bne.n	28248 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   2826e:	4620      	mov	r0, r4
   28270:	f7e4 fbd2 	bl	ca18 <bt_gatt_attr_get_handle>
   28274:	3001      	adds	r0, #1
   28276:	b280      	uxth	r0, r0
	return handle;
   28278:	e7e6      	b.n	28248 <bt_gatt_attr_value_handle+0x8>

0002827a <bt_gatt_attr_read_chrc>:
{
   2827a:	b570      	push	{r4, r5, r6, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   2827c:	68ce      	ldr	r6, [r1, #12]
{
   2827e:	b088      	sub	sp, #32
   28280:	4608      	mov	r0, r1
   28282:	461d      	mov	r5, r3
	pdu.properties = chrc->properties;
   28284:	79b3      	ldrb	r3, [r6, #6]
   28286:	f88d 300c 	strb.w	r3, [sp, #12]
{
   2828a:	4614      	mov	r4, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2828c:	f7ff ffd8 	bl	28240 <bt_gatt_attr_value_handle>
   28290:	f8ad 000d 	strh.w	r0, [sp, #13]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   28294:	6830      	ldr	r0, [r6, #0]
   28296:	7803      	ldrb	r3, [r0, #0]
   28298:	b96b      	cbnz	r3, 282b6 <bt_gatt_attr_read_chrc+0x3c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   2829a:	8843      	ldrh	r3, [r0, #2]
   2829c:	f8ad 300f 	strh.w	r3, [sp, #15]
		value_len += 2U;
   282a0:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   282a2:	9300      	str	r3, [sp, #0]
   282a4:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   282a8:	ab03      	add	r3, sp, #12
   282aa:	4629      	mov	r1, r5
   282ac:	4620      	mov	r0, r4
   282ae:	f7ff fec6 	bl	2803e <bt_gatt_attr_read.constprop.0>
}
   282b2:	b008      	add	sp, #32
   282b4:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   282b6:	1c43      	adds	r3, r0, #1
   282b8:	f10d 020f 	add.w	r2, sp, #15
   282bc:	3011      	adds	r0, #17
   282be:	f853 1b04 	ldr.w	r1, [r3], #4
   282c2:	f842 1b04 	str.w	r1, [r2], #4
   282c6:	4283      	cmp	r3, r0
   282c8:	d1f9      	bne.n	282be <bt_gatt_attr_read_chrc+0x44>
		value_len += 16U;
   282ca:	2313      	movs	r3, #19
   282cc:	e7e9      	b.n	282a2 <bt_gatt_attr_read_chrc+0x28>

000282ce <bt_gatt_foreach_attr>:
{
   282ce:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   282d0:	e9cd 2301 	strd	r2, r3, [sp, #4]
   282d4:	2300      	movs	r3, #0
   282d6:	9300      	str	r3, [sp, #0]
   282d8:	461a      	mov	r2, r3
   282da:	f7e4 fbcd 	bl	ca78 <bt_gatt_foreach_attr_type>
}
   282de:	b005      	add	sp, #20
   282e0:	f85d fb04 	ldr.w	pc, [sp], #4

000282e4 <db_hash_process>:
	db_hash_gen(true);
   282e4:	f7e4 bc22 	b.w	cb2c <db_hash_gen.isra.0>

000282e8 <bt_gatt_check_perm>:
{
   282e8:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   282ea:	07d4      	lsls	r4, r2, #31
{
   282ec:	4605      	mov	r5, r0
   282ee:	7c88      	ldrb	r0, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   282f0:	d504      	bpl.n	282fc <bt_gatt_check_perm+0x14>
   282f2:	f010 0f15 	tst.w	r0, #21
   282f6:	d01e      	beq.n	28336 <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   282f8:	684b      	ldr	r3, [r1, #4]
   282fa:	b1e3      	cbz	r3, 28336 <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   282fc:	0793      	lsls	r3, r2, #30
   282fe:	d504      	bpl.n	2830a <bt_gatt_check_perm+0x22>
   28300:	f010 0f2a 	tst.w	r0, #42	; 0x2a
   28304:	d019      	beq.n	2833a <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   28306:	688b      	ldr	r3, [r1, #8]
   28308:	b1bb      	cbz	r3, 2833a <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   2830a:	ea02 0400 	and.w	r4, r2, r0
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   2830e:	f014 0f30 	tst.w	r4, #48	; 0x30
   28312:	d103      	bne.n	2831c <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   28314:	f014 000c 	ands.w	r0, r4, #12
   28318:	d107      	bne.n	2832a <bt_gatt_check_perm+0x42>
}
   2831a:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   2831c:	4628      	mov	r0, r5
   2831e:	f7ff f8aa 	bl	27476 <bt_conn_get_security>
   28322:	2802      	cmp	r0, #2
   28324:	d8f6      	bhi.n	28314 <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   28326:	2005      	movs	r0, #5
   28328:	e7f7      	b.n	2831a <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   2832a:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   2832c:	2b00      	cmp	r3, #0
   2832e:	bf14      	ite	ne
   28330:	2000      	movne	r0, #0
   28332:	200f      	moveq	r0, #15
   28334:	e7f1      	b.n	2831a <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   28336:	2002      	movs	r0, #2
   28338:	e7ef      	b.n	2831a <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   2833a:	2003      	movs	r0, #3
   2833c:	e7ed      	b.n	2831a <bt_gatt_check_perm+0x32>

0002833e <bt_gatt_change_aware>:
{
   2833e:	b510      	push	{r4, lr}
   28340:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   28342:	f7e4 f8c9 	bl	c4d8 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   28346:	4603      	mov	r3, r0
   28348:	b910      	cbnz	r0, 28350 <bt_gatt_change_aware+0x12>
		return true;
   2834a:	2401      	movs	r4, #1
}
   2834c:	4620      	mov	r0, r4
   2834e:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   28350:	7a02      	ldrb	r2, [r0, #8]
   28352:	07d2      	lsls	r2, r2, #31
   28354:	d5f9      	bpl.n	2834a <bt_gatt_change_aware+0xc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   28356:	f3bf 8f5b 	dmb	ish
   2835a:	68d9      	ldr	r1, [r3, #12]
   2835c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   28360:	f011 0101 	ands.w	r1, r1, #1
   28364:	f100 000c 	add.w	r0, r0, #12
   28368:	d1ef      	bne.n	2834a <bt_gatt_change_aware+0xc>
	if (!req) {
   2836a:	2c00      	cmp	r4, #0
   2836c:	d0ee      	beq.n	2834c <bt_gatt_change_aware+0xe>
   2836e:	f3bf 8f5b 	dmb	ish
   28372:	68db      	ldr	r3, [r3, #12]
   28374:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   28378:	f3c3 0440 	ubfx	r4, r3, #1, #1
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   2837c:	079b      	lsls	r3, r3, #30
   2837e:	d50e      	bpl.n	2839e <bt_gatt_change_aware+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   28380:	f3bf 8f5b 	dmb	ish
   28384:	e850 3f00 	ldrex	r3, [r0]
   28388:	f023 0302 	bic.w	r3, r3, #2
   2838c:	e840 3200 	strex	r2, r3, [r0]
   28390:	2a00      	cmp	r2, #0
   28392:	d1f7      	bne.n	28384 <bt_gatt_change_aware+0x46>
   28394:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   28398:	f7ff fe37 	bl	2800a <atomic_set_bit>
	return false;
   2839c:	e7d6      	b.n	2834c <bt_gatt_change_aware+0xe>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   2839e:	2101      	movs	r1, #1
   283a0:	e7fa      	b.n	28398 <bt_gatt_change_aware+0x5a>

000283a2 <arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   283a2:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   283a6:	b923      	cbnz	r3, 283b2 <arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   283a8:	f3ef 8014 	mrs	r0, CONTROL
	return (value & CONTROL_nPRIV_Msk) ? true : false;
   283ac:	f000 0001 	and.w	r0, r0, #1
   283b0:	4770      	bx	lr
		return false;
   283b2:	2000      	movs	r0, #0
}
   283b4:	4770      	bx	lr

000283b6 <sys_memcpy_swap>:
	psrc += length - 1;
   283b6:	1e53      	subs	r3, r2, #1
   283b8:	4419      	add	r1, r3
	for (; length > 0; length--) {
   283ba:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   283bc:	f811 3901 	ldrb.w	r3, [r1], #-1
   283c0:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   283c4:	4290      	cmp	r0, r2
   283c6:	d1f9      	bne.n	283bc <sys_memcpy_swap+0x6>
}
   283c8:	4770      	bx	lr

000283ca <smp_pairing_rsp>:
}
   283ca:	2007      	movs	r0, #7
   283cc:	4770      	bx	lr

000283ce <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   283ce:	2301      	movs	r3, #1
   283d0:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   283d2:	f3bf 8f5b 	dmb	ish
   283d6:	e850 2f00 	ldrex	r2, [r0]
   283da:	431a      	orrs	r2, r3
   283dc:	e840 2100 	strex	r1, r2, [r0]
   283e0:	2900      	cmp	r1, #0
   283e2:	d1f8      	bne.n	283d6 <atomic_set_bit+0x8>
   283e4:	f3bf 8f5b 	dmb	ish
}
   283e8:	4770      	bx	lr

000283ea <smp_keypress_notif>:
{
   283ea:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   283ec:	210e      	movs	r1, #14
   283ee:	30c0      	adds	r0, #192	; 0xc0
   283f0:	f7ff ffed 	bl	283ce <atomic_set_bit>
}
   283f4:	2000      	movs	r0, #0
   283f6:	bd08      	pop	{r3, pc}

000283f8 <k_delayed_work_cancel>:
{
   283f8:	b538      	push	{r3, r4, r5, lr}
   283fa:	4605      	mov	r5, r0
	return k_work_delayable_busy_get(dwork) != 0;
   283fc:	f001 fc26 	bl	29c4c <k_work_delayable_busy_get>
   28400:	4604      	mov	r4, r0
	int rc = k_work_cancel_delayable(&work->work);
   28402:	4628      	mov	r0, r5
   28404:	f001 fc36 	bl	29c74 <k_work_cancel_delayable>
	if (pending) {
   28408:	b124      	cbz	r4, 28414 <k_delayed_work_cancel+0x1c>
		return (rc == 0) ? 0 : -EINVAL;
   2840a:	2800      	cmp	r0, #0
   2840c:	bf18      	it	ne
   2840e:	f06f 0015 	mvnne.w	r0, #21
}
   28412:	bd38      	pop	{r3, r4, r5, pc}
	return -EALREADY;
   28414:	f06f 0077 	mvn.w	r0, #119	; 0x77
   28418:	e7fb      	b.n	28412 <k_delayed_work_cancel+0x1a>

0002841a <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2841a:	2301      	movs	r3, #1
   2841c:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2841e:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   28420:	f3bf 8f5b 	dmb	ish
   28424:	e850 2f00 	ldrex	r2, [r0]
   28428:	401a      	ands	r2, r3
   2842a:	e840 2100 	strex	r1, r2, [r0]
   2842e:	2900      	cmp	r1, #0
   28430:	d1f8      	bne.n	28424 <atomic_clear_bit+0xa>
   28432:	f3bf 8f5b 	dmb	ish
}
   28436:	4770      	bx	lr

00028438 <bt_addr_le_copy>:
   28438:	680b      	ldr	r3, [r1, #0]
   2843a:	6003      	str	r3, [r0, #0]
   2843c:	888b      	ldrh	r3, [r1, #4]
   2843e:	8083      	strh	r3, [r0, #4]
   28440:	798b      	ldrb	r3, [r1, #6]
   28442:	7183      	strb	r3, [r0, #6]
}
   28444:	4770      	bx	lr

00028446 <bt_smp_aes_cmac>:
{
   28446:	b570      	push	{r4, r5, r6, lr}
   28448:	b0c2      	sub	sp, #264	; 0x108
   2844a:	460d      	mov	r5, r1
   2844c:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2844e:	4601      	mov	r1, r0
   28450:	aa16      	add	r2, sp, #88	; 0x58
   28452:	4668      	mov	r0, sp
{
   28454:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   28456:	f7fe fa1b 	bl	26890 <tc_cmac_setup>
   2845a:	b150      	cbz	r0, 28472 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   2845c:	4632      	mov	r2, r6
   2845e:	4629      	mov	r1, r5
   28460:	4668      	mov	r0, sp
   28462:	f7fe fa40 	bl	268e6 <tc_cmac_update>
   28466:	b120      	cbz	r0, 28472 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   28468:	4669      	mov	r1, sp
   2846a:	4620      	mov	r0, r4
   2846c:	f7fe faa7 	bl	269be <tc_cmac_final>
   28470:	b918      	cbnz	r0, 2847a <bt_smp_aes_cmac+0x34>
		return -EIO;
   28472:	f06f 0004 	mvn.w	r0, #4
}
   28476:	b042      	add	sp, #264	; 0x108
   28478:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   2847a:	2000      	movs	r0, #0
   2847c:	e7fb      	b.n	28476 <bt_smp_aes_cmac+0x30>

0002847e <smp_security_request>:
   2847e:	2007      	movs	r0, #7
   28480:	4770      	bx	lr

00028482 <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   28482:	b510      	push	{r4, lr}
   28484:	1e43      	subs	r3, r0, #1
   28486:	f100 0210 	add.w	r2, r0, #16
   2848a:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   2848c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   28490:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   28494:	701c      	strb	r4, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   28496:	4283      	cmp	r3, r0
		((uint8_t *)buf)[length - 1 - i] = tmp;
   28498:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   2849a:	d1f7      	bne.n	2848c <sys_mem_swap.constprop.0+0xa>
	}
}
   2849c:	bd10      	pop	{r4, pc}

0002849e <smp_f6>:
{
   2849e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   284a2:	b097      	sub	sp, #92	; 0x5c
   284a4:	4606      	mov	r6, r0
   284a6:	4691      	mov	r9, r2
	sys_memcpy_swap(m, n1, 16);
   284a8:	a805      	add	r0, sp, #20
   284aa:	2210      	movs	r2, #16
{
   284ac:	e9dd 541f 	ldrd	r5, r4, [sp, #124]	; 0x7c
   284b0:	4698      	mov	r8, r3
   284b2:	9f21      	ldr	r7, [sp, #132]	; 0x84
	sys_memcpy_swap(m, n1, 16);
   284b4:	f7ff ff7f 	bl	283b6 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   284b8:	2210      	movs	r2, #16
   284ba:	4649      	mov	r1, r9
   284bc:	a809      	add	r0, sp, #36	; 0x24
   284be:	f7ff ff7a 	bl	283b6 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   284c2:	2210      	movs	r2, #16
   284c4:	4641      	mov	r1, r8
   284c6:	a80d      	add	r0, sp, #52	; 0x34
   284c8:	f7ff ff75 	bl	283b6 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   284cc:	991e      	ldr	r1, [sp, #120]	; 0x78
   284ce:	2203      	movs	r2, #3
   284d0:	a811      	add	r0, sp, #68	; 0x44
   284d2:	f7ff ff70 	bl	283b6 <sys_memcpy_swap>
	memcpy(m + 52, a1->a.val, 6);
   284d6:	4629      	mov	r1, r5
	m[51] = a1->type;
   284d8:	782b      	ldrb	r3, [r5, #0]
	memcpy(m + 52, a1->a.val, 6);
   284da:	f851 0f01 	ldr.w	r0, [r1, #1]!
	m[51] = a1->type;
   284de:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   284e2:	9012      	str	r0, [sp, #72]	; 0x48
   284e4:	888b      	ldrh	r3, [r1, #4]
   284e6:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   284ea:	2206      	movs	r2, #6
   284ec:	a812      	add	r0, sp, #72	; 0x48
   284ee:	f7ff ff62 	bl	283b6 <sys_memcpy_swap>
	memcpy(m + 59, a2->a.val, 6);
   284f2:	4621      	mov	r1, r4
	m[58] = a2->type;
   284f4:	7823      	ldrb	r3, [r4, #0]
   284f6:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   284fa:	f851 3f01 	ldr.w	r3, [r1, #1]!
   284fe:	f8cd 304f 	str.w	r3, [sp, #79]	; 0x4f
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   28502:	2206      	movs	r2, #6
	memcpy(m + 59, a2->a.val, 6);
   28504:	888b      	ldrh	r3, [r1, #4]
   28506:	f8ad 3053 	strh.w	r3, [sp, #83]	; 0x53
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   2850a:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   2850e:	f7ff ff52 	bl	283b6 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   28512:	2210      	movs	r2, #16
   28514:	4631      	mov	r1, r6
   28516:	a801      	add	r0, sp, #4
   28518:	f7ff ff4d 	bl	283b6 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   2851c:	463b      	mov	r3, r7
   2851e:	2241      	movs	r2, #65	; 0x41
   28520:	a905      	add	r1, sp, #20
   28522:	a801      	add	r0, sp, #4
   28524:	f7ff ff8f 	bl	28446 <bt_smp_aes_cmac>
	if (err) {
   28528:	4604      	mov	r4, r0
   2852a:	b910      	cbnz	r0, 28532 <smp_f6+0x94>
	sys_mem_swap(check, 16);
   2852c:	4638      	mov	r0, r7
   2852e:	f7ff ffa8 	bl	28482 <sys_mem_swap.constprop.0>
}
   28532:	4620      	mov	r0, r4
   28534:	b017      	add	sp, #92	; 0x5c
   28536:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0002853a <smp_f4>:
{
   2853a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2853c:	b097      	sub	sp, #92	; 0x5c
   2853e:	4614      	mov	r4, r2
   28540:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   28542:	2220      	movs	r2, #32
   28544:	4601      	mov	r1, r0
   28546:	a805      	add	r0, sp, #20
{
   28548:	461d      	mov	r5, r3
   2854a:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   2854c:	f7ff ff33 	bl	283b6 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   28550:	2220      	movs	r2, #32
   28552:	4631      	mov	r1, r6
   28554:	a80d      	add	r0, sp, #52	; 0x34
   28556:	f7ff ff2e 	bl	283b6 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   2855a:	4621      	mov	r1, r4
   2855c:	2210      	movs	r2, #16
   2855e:	a801      	add	r0, sp, #4
	m[64] = z;
   28560:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   28564:	f7ff ff27 	bl	283b6 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   28568:	463b      	mov	r3, r7
   2856a:	2241      	movs	r2, #65	; 0x41
   2856c:	a905      	add	r1, sp, #20
   2856e:	a801      	add	r0, sp, #4
   28570:	f7ff ff69 	bl	28446 <bt_smp_aes_cmac>
	if (err) {
   28574:	4604      	mov	r4, r0
   28576:	b910      	cbnz	r0, 2857e <smp_f4+0x44>
	sys_mem_swap(res, 16);
   28578:	4638      	mov	r0, r7
   2857a:	f7ff ff82 	bl	28482 <sys_mem_swap.constprop.0>
}
   2857e:	4620      	mov	r0, r4
   28580:	b017      	add	sp, #92	; 0x5c
   28582:	bdf0      	pop	{r4, r5, r6, r7, pc}

00028584 <smp_signing_info>:
   28584:	2007      	movs	r0, #7
   28586:	4770      	bx	lr

00028588 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   28588:	f3bf 8f5b 	dmb	ish
   2858c:	6800      	ldr	r0, [r0, #0]
   2858e:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   28592:	4108      	asrs	r0, r1
}
   28594:	f000 0001 	and.w	r0, r0, #1
   28598:	4770      	bx	lr

0002859a <update_keys_check>:
{
   2859a:	b510      	push	{r4, lr}
   2859c:	4603      	mov	r3, r0
	if (!keys ||
   2859e:	b1f9      	cbz	r1, 285e0 <update_keys_check+0x46>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   285a0:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   285a2:	f010 0f24 	tst.w	r0, #36	; 0x24
   285a6:	d01b      	beq.n	285e0 <update_keys_check+0x46>
	return MIN(req->max_key_size, rsp->max_key_size);
   285a8:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
   285ac:	f893 40cd 	ldrb.w	r4, [r3, #205]	; 0xcd
	if (keys->enc_size > get_encryption_key_size(smp)) {
   285b0:	7b09      	ldrb	r1, [r1, #12]
   285b2:	42a2      	cmp	r2, r4
   285b4:	bf28      	it	cs
   285b6:	4622      	movcs	r2, r4
   285b8:	4291      	cmp	r1, r2
   285ba:	d901      	bls.n	285c0 <update_keys_check+0x26>
		return false;
   285bc:	2000      	movs	r0, #0
}
   285be:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   285c0:	0682      	lsls	r2, r0, #26
   285c2:	d405      	bmi.n	285d0 <update_keys_check+0x36>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   285c4:	f893 00c8 	ldrb.w	r0, [r3, #200]	; 0xc8
   285c8:	3800      	subs	r0, #0
   285ca:	bf18      	it	ne
   285cc:	2001      	movne	r0, #1
   285ce:	e7f6      	b.n	285be <update_keys_check+0x24>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   285d0:	2105      	movs	r1, #5
   285d2:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
   285d6:	f7ff ffd7 	bl	28588 <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   285da:	2800      	cmp	r0, #0
   285dc:	d1f2      	bne.n	285c4 <update_keys_check+0x2a>
   285de:	e7ed      	b.n	285bc <update_keys_check+0x22>
		return true;
   285e0:	2001      	movs	r0, #1
   285e2:	e7ec      	b.n	285be <update_keys_check+0x24>

000285e4 <smp_create_pdu.isra.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   285e4:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   285e6:	f100 05c4 	add.w	r5, r0, #196	; 0xc4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   285ea:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   285ec:	4628      	mov	r0, r5
   285ee:	2104      	movs	r1, #4
   285f0:	f7ff ffca 	bl	28588 <atomic_test_bit>
   285f4:	b168      	cbz	r0, 28612 <smp_create_pdu.isra.0+0x2e>
		timeout = K_NO_WAIT;
   285f6:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   285f8:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   285fa:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   285fc:	4608      	mov	r0, r1
   285fe:	f7ff f87a 	bl	276f6 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   28602:	4604      	mov	r4, r0
   28604:	b940      	cbnz	r0, 28618 <smp_create_pdu.isra.0+0x34>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   28606:	2104      	movs	r1, #4
   28608:	4628      	mov	r0, r5
   2860a:	f7ff fee0 	bl	283ce <atomic_set_bit>
}
   2860e:	4620      	mov	r0, r4
   28610:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   28612:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   28616:	e7ef      	b.n	285f8 <smp_create_pdu.isra.0+0x14>
   28618:	2101      	movs	r1, #1
   2861a:	3008      	adds	r0, #8
   2861c:	f000 fb42 	bl	28ca4 <net_buf_simple_add>
	hdr->code = op;
   28620:	7006      	strb	r6, [r0, #0]
	return buf;
   28622:	e7f4      	b.n	2860e <smp_create_pdu.isra.0+0x2a>

00028624 <smp_send_pairing_random>:
{
   28624:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   28626:	2104      	movs	r1, #4
{
   28628:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2862a:	f7ff ffdb 	bl	285e4 <smp_create_pdu.isra.0>
	if (!rsp_buf) {
   2862e:	4605      	mov	r5, r0
   28630:	b1a0      	cbz	r0, 2865c <smp_send_pairing_random+0x38>
   28632:	2110      	movs	r1, #16
   28634:	3008      	adds	r0, #8
   28636:	f000 fb35 	bl	28ca4 <net_buf_simple_add>
   2863a:	f104 03e7 	add.w	r3, r4, #231	; 0xe7
   2863e:	f104 02f7 	add.w	r2, r4, #247	; 0xf7
   28642:	f853 1b04 	ldr.w	r1, [r3], #4
   28646:	f840 1b04 	str.w	r1, [r0], #4
   2864a:	4293      	cmp	r3, r2
   2864c:	d1f9      	bne.n	28642 <smp_send_pairing_random+0x1e>
	smp_send(smp, rsp_buf, NULL, NULL);
   2864e:	4620      	mov	r0, r4
   28650:	2200      	movs	r2, #0
   28652:	4629      	mov	r1, r5
   28654:	f7e4 fdea 	bl	d22c <smp_send.isra.0>
	return 0;
   28658:	2000      	movs	r0, #0
}
   2865a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2865c:	2008      	movs	r0, #8
   2865e:	e7fc      	b.n	2865a <smp_send_pairing_random+0x36>

00028660 <send_pairing_rsp>:
{
   28660:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   28662:	2102      	movs	r1, #2
{
   28664:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   28666:	f7ff ffbd 	bl	285e4 <smp_create_pdu.isra.0>
	if (!rsp_buf) {
   2866a:	4604      	mov	r4, r0
   2866c:	b180      	cbz	r0, 28690 <send_pairing_rsp+0x30>
   2866e:	2106      	movs	r1, #6
   28670:	3008      	adds	r0, #8
   28672:	f000 fb17 	bl	28ca4 <net_buf_simple_add>
   28676:	462b      	mov	r3, r5
	smp_send(smp, rsp_buf, NULL, NULL);
   28678:	4621      	mov	r1, r4
   2867a:	f853 2fd1 	ldr.w	r2, [r3, #209]!
   2867e:	6002      	str	r2, [r0, #0]
   28680:	889b      	ldrh	r3, [r3, #4]
   28682:	8083      	strh	r3, [r0, #4]
   28684:	2200      	movs	r2, #0
   28686:	4628      	mov	r0, r5
   28688:	f7e4 fdd0 	bl	d22c <smp_send.isra.0>
	return 0;
   2868c:	2000      	movs	r0, #0
}
   2868e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   28690:	2008      	movs	r0, #8
   28692:	e7fc      	b.n	2868e <send_pairing_rsp+0x2e>

00028694 <smp_dhkey_check>:
{
   28694:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   28696:	6803      	ldr	r3, [r0, #0]
   28698:	78db      	ldrb	r3, [r3, #3]
   2869a:	2b01      	cmp	r3, #1
{
   2869c:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   2869e:	d11a      	bne.n	286d6 <smp_dhkey_check+0x42>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   286a0:	688d      	ldr	r5, [r1, #8]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   286a2:	f100 06c4 	add.w	r6, r0, #196	; 0xc4
   286a6:	2110      	movs	r1, #16
   286a8:	4630      	mov	r0, r6
   286aa:	f7ff feb6 	bl	2841a <atomic_clear_bit>
   286ae:	462b      	mov	r3, r5
   286b0:	f204 1277 	addw	r2, r4, #375	; 0x177
   286b4:	f105 0110 	add.w	r1, r5, #16
   286b8:	f853 0b04 	ldr.w	r0, [r3], #4
   286bc:	f842 0b04 	str.w	r0, [r2], #4
   286c0:	428b      	cmp	r3, r1
   286c2:	d1f9      	bne.n	286b8 <smp_dhkey_check+0x24>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   286c4:	2107      	movs	r1, #7
   286c6:	4630      	mov	r0, r6
   286c8:	f7ff ff5e 	bl	28588 <atomic_test_bit>
   286cc:	b128      	cbz	r0, 286da <smp_dhkey_check+0x46>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   286ce:	2109      	movs	r1, #9
   286d0:	4630      	mov	r0, r6
   286d2:	f7ff fe7c 	bl	283ce <atomic_set_bit>
}
   286d6:	2000      	movs	r0, #0
   286d8:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   286da:	210a      	movs	r1, #10
   286dc:	4630      	mov	r0, r6
   286de:	f7ff ff53 	bl	28588 <atomic_test_bit>
   286e2:	2800      	cmp	r0, #0
   286e4:	d1f3      	bne.n	286ce <smp_dhkey_check+0x3a>
		return compute_and_check_and_send_slave_dhcheck(smp);
   286e6:	4620      	mov	r0, r4
}
   286e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_slave_dhcheck(smp);
   286ec:	f7e4 bdc4 	b.w	d278 <compute_and_check_and_send_slave_dhcheck>

000286f0 <atomic_test_and_clear_bit>:
{
   286f0:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   286f2:	2301      	movs	r3, #1
   286f4:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   286f8:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   286fa:	f3bf 8f5b 	dmb	ish
   286fe:	e850 3f00 	ldrex	r3, [r0]
   28702:	ea03 0c02 	and.w	ip, r3, r2
   28706:	e840 ce00 	strex	lr, ip, [r0]
   2870a:	f1be 0f00 	cmp.w	lr, #0
   2870e:	d1f6      	bne.n	286fe <atomic_test_and_clear_bit+0xe>
   28710:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   28714:	420b      	tst	r3, r1
}
   28716:	bf14      	ite	ne
   28718:	2001      	movne	r0, #1
   2871a:	2000      	moveq	r0, #0
   2871c:	f85d fb04 	ldr.w	pc, [sp], #4

00028720 <smp_reset>:
{
   28720:	b510      	push	{r4, lr}
   28722:	4604      	mov	r4, r0
	k_delayed_work_cancel(&smp->work);
   28724:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
   28728:	f7ff fe66 	bl	283f8 <k_delayed_work_cancel>
	smp->method = JUST_WORKS;
   2872c:	2300      	movs	r3, #0
   2872e:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
	atomic_set(smp->allowed_cmds, 0);
   28732:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   28736:	f3bf 8f5b 	dmb	ish
   2873a:	e850 2f00 	ldrex	r2, [r0]
   2873e:	e840 3100 	strex	r1, r3, [r0]
   28742:	2900      	cmp	r1, #0
   28744:	d1f9      	bne.n	2873a <smp_reset+0x1a>
   28746:	f3bf 8f5b 	dmb	ish
   2874a:	f3bf 8f5b 	dmb	ish
   2874e:	34c4      	adds	r4, #196	; 0xc4
   28750:	e854 2f00 	ldrex	r2, [r4]
   28754:	e844 3100 	strex	r1, r3, [r4]
   28758:	2900      	cmp	r1, #0
   2875a:	d1f9      	bne.n	28750 <smp_reset+0x30>
   2875c:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   28760:	2101      	movs	r1, #1
}
   28762:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   28766:	f7ff be32 	b.w	283ce <atomic_set_bit>

0002876a <smp_c1>:
{
   2876a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2876c:	b089      	sub	sp, #36	; 0x24
   2876e:	e9dd 560e 	ldrd	r5, r6, [sp, #56]	; 0x38
   28772:	4607      	mov	r7, r0
	p1[0] = ia->type;
   28774:	7828      	ldrb	r0, [r5, #0]
   28776:	f88d 0000 	strb.w	r0, [sp]
	p1[1] = ra->type;
   2877a:	7830      	ldrb	r0, [r6, #0]
   2877c:	f88d 0001 	strb.w	r0, [sp, #1]
	memcpy(p1 + 2, preq, 7);
   28780:	6810      	ldr	r0, [r2, #0]
   28782:	f8cd 0002 	str.w	r0, [sp, #2]
   28786:	8890      	ldrh	r0, [r2, #4]
   28788:	7992      	ldrb	r2, [r2, #6]
{
   2878a:	9c10      	ldr	r4, [sp, #64]	; 0x40
	memcpy(p1 + 2, preq, 7);
   2878c:	f88d 2008 	strb.w	r2, [sp, #8]
	memcpy(p1 + 9, pres, 7);
   28790:	681a      	ldr	r2, [r3, #0]
   28792:	f8cd 2009 	str.w	r2, [sp, #9]
   28796:	889a      	ldrh	r2, [r3, #4]
   28798:	799b      	ldrb	r3, [r3, #6]
	memcpy(p1 + 2, preq, 7);
   2879a:	f8ad 0006 	strh.w	r0, [sp, #6]
	memcpy(p1 + 9, pres, 7);
   2879e:	f8ad 200d 	strh.w	r2, [sp, #13]
   287a2:	f88d 300f 	strb.w	r3, [sp, #15]
	while (len--) {
   287a6:	f101 0c10 	add.w	ip, r1, #16
   287aa:	4620      	mov	r0, r4
   287ac:	466a      	mov	r2, sp
   287ae:	4561      	cmp	r1, ip
   287b0:	d124      	bne.n	287fc <smp_c1+0x92>
	err = bt_encrypt_le(k, enc_data, enc_data);
   287b2:	4622      	mov	r2, r4
   287b4:	4621      	mov	r1, r4
   287b6:	4638      	mov	r0, r7
   287b8:	f7e9 fb1a 	bl	11df0 <bt_encrypt_le>
	if (err) {
   287bc:	4602      	mov	r2, r0
   287be:	bb70      	cbnz	r0, 2881e <smp_c1+0xb4>
	memcpy(p2, ra->a.val, 6);
   287c0:	4633      	mov	r3, r6
	(void)memset(p2 + 12, 0, 4);
   287c2:	9207      	str	r2, [sp, #28]
	memcpy(p2, ra->a.val, 6);
   287c4:	f853 0f01 	ldr.w	r0, [r3, #1]!
   287c8:	9004      	str	r0, [sp, #16]
   287ca:	889b      	ldrh	r3, [r3, #4]
   287cc:	f8ad 3014 	strh.w	r3, [sp, #20]
	memcpy(p2 + 6, ia->a.val, 6);
   287d0:	462b      	mov	r3, r5
   287d2:	f104 0010 	add.w	r0, r4, #16
   287d6:	f853 1f01 	ldr.w	r1, [r3, #1]!
   287da:	f8cd 1016 	str.w	r1, [sp, #22]
   287de:	889b      	ldrh	r3, [r3, #4]
   287e0:	f8ad 301a 	strh.w	r3, [sp, #26]
	while (len--) {
   287e4:	a904      	add	r1, sp, #16
   287e6:	4623      	mov	r3, r4
   287e8:	4283      	cmp	r3, r0
   287ea:	d110      	bne.n	2880e <smp_c1+0xa4>
	return bt_encrypt_le(k, enc_data, enc_data);
   287ec:	4622      	mov	r2, r4
   287ee:	4621      	mov	r1, r4
   287f0:	4638      	mov	r0, r7
}
   287f2:	b009      	add	sp, #36	; 0x24
   287f4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_encrypt_le(k, enc_data, enc_data);
   287f8:	f7e9 bafa 	b.w	11df0 <bt_encrypt_le>
		*r++ = *p++ ^ *q++;
   287fc:	f811 3b01 	ldrb.w	r3, [r1], #1
   28800:	f812 eb01 	ldrb.w	lr, [r2], #1
   28804:	ea83 030e 	eor.w	r3, r3, lr
   28808:	f800 3b01 	strb.w	r3, [r0], #1
   2880c:	e7cf      	b.n	287ae <smp_c1+0x44>
   2880e:	f813 2b01 	ldrb.w	r2, [r3], #1
   28812:	f811 5b01 	ldrb.w	r5, [r1], #1
   28816:	406a      	eors	r2, r5
   28818:	f803 2c01 	strb.w	r2, [r3, #-1]
   2881c:	e7e4      	b.n	287e8 <smp_c1+0x7e>
}
   2881e:	b009      	add	sp, #36	; 0x24
   28820:	bdf0      	pop	{r4, r5, r6, r7, pc}

00028822 <legacy_pairing_confirm>:
{
   28822:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   28824:	f100 07c4 	add.w	r7, r0, #196	; 0xc4
{
   28828:	b085      	sub	sp, #20
   2882a:	4605      	mov	r5, r0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2882c:	210a      	movs	r1, #10
   2882e:	4638      	mov	r0, r7
   28830:	f7ff feaa 	bl	28588 <atomic_test_bit>
   28834:	bb90      	cbnz	r0, 2889c <legacy_pairing_confirm+0x7a>
			atomic_set_bit(smp->allowed_cmds,
   28836:	2104      	movs	r1, #4
   28838:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
   2883c:	f7ff fdc7 	bl	283ce <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   28840:	2103      	movs	r1, #3
   28842:	4628      	mov	r0, r5
	struct bt_conn *conn = smp->chan.chan.conn;
   28844:	682c      	ldr	r4, [r5, #0]
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   28846:	f7ff fecd 	bl	285e4 <smp_create_pdu.isra.0>
	if (!buf) {
   2884a:	4606      	mov	r6, r0
   2884c:	b1c0      	cbz	r0, 28880 <legacy_pairing_confirm+0x5e>
   2884e:	2110      	movs	r1, #16
   28850:	3008      	adds	r0, #8
   28852:	f000 fa27 	bl	28ca4 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   28856:	f104 0396 	add.w	r3, r4, #150	; 0x96
   2885a:	348f      	adds	r4, #143	; 0x8f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   2885c:	9002      	str	r0, [sp, #8]
   2885e:	9301      	str	r3, [sp, #4]
   28860:	9400      	str	r4, [sp, #0]
   28862:	f105 03d0 	add.w	r3, r5, #208	; 0xd0
   28866:	f105 02c9 	add.w	r2, r5, #201	; 0xc9
   2886a:	f105 01e7 	add.w	r1, r5, #231	; 0xe7
   2886e:	f205 1007 	addw	r0, r5, #263	; 0x107
   28872:	f7ff ff7a 	bl	2876a <smp_c1>
   28876:	4604      	mov	r4, r0
   28878:	b120      	cbz	r0, 28884 <legacy_pairing_confirm+0x62>
		net_buf_unref(buf);
   2887a:	4630      	mov	r0, r6
   2887c:	f7f3 ffbc 	bl	1c7f8 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   28880:	2008      	movs	r0, #8
   28882:	e009      	b.n	28898 <legacy_pairing_confirm+0x76>
	smp_send(smp, buf, NULL, NULL);
   28884:	4602      	mov	r2, r0
   28886:	4631      	mov	r1, r6
   28888:	4628      	mov	r0, r5
   2888a:	f7e4 fccf 	bl	d22c <smp_send.isra.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2888e:	4621      	mov	r1, r4
   28890:	4638      	mov	r0, r7
   28892:	f7ff fdc2 	bl	2841a <atomic_clear_bit>
	return 0;
   28896:	2000      	movs	r0, #0
}
   28898:	b005      	add	sp, #20
   2889a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2889c:	2100      	movs	r1, #0
   2889e:	4638      	mov	r0, r7
   288a0:	f7ff fd95 	bl	283ce <atomic_set_bit>
   288a4:	e7f7      	b.n	28896 <legacy_pairing_confirm+0x74>

000288a6 <bt_smp_request_ltk>:
{
   288a6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   288aa:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   288ae:	e9cd 2300 	strd	r2, r3, [sp]
   288b2:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   288b4:	f7e4 fc4e 	bl	d154 <smp_chan_get>
	if (!smp) {
   288b8:	4605      	mov	r5, r0
   288ba:	2800      	cmp	r0, #0
   288bc:	f000 8093 	beq.w	289e6 <bt_smp_request_ltk+0x140>
	if (ediv == 0U && rand == 0U &&
   288c0:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   288c4:	f100 07c4 	add.w	r7, r0, #196	; 0xc4
   288c8:	f1b9 0f00 	cmp.w	r9, #0
   288cc:	d12c      	bne.n	28928 <bt_smp_request_ltk+0x82>
   288ce:	e9dd 2300 	ldrd	r2, r3, [sp]
   288d2:	4313      	orrs	r3, r2
   288d4:	d128      	bne.n	28928 <bt_smp_request_ltk+0x82>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   288d6:	2103      	movs	r1, #3
   288d8:	4638      	mov	r0, r7
   288da:	f7ff fe55 	bl	28588 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   288de:	b318      	cbz	r0, 28928 <bt_smp_request_ltk+0x82>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   288e0:	2101      	movs	r1, #1
   288e2:	4638      	mov	r0, r7
   288e4:	f7ff fe50 	bl	28588 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   288e8:	4606      	mov	r6, r0
   288ea:	b1e8      	cbz	r0, 28928 <bt_smp_request_ltk+0x82>
	return MIN(req->max_key_size, rsp->max_key_size);
   288ec:	f895 40d4 	ldrb.w	r4, [r5, #212]	; 0xd4
   288f0:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
   288f4:	429c      	cmp	r4, r3
   288f6:	bf28      	it	cs
   288f8:	461c      	movcs	r4, r3
   288fa:	4622      	mov	r2, r4
   288fc:	f205 1107 	addw	r1, r5, #263	; 0x107
   28900:	4640      	mov	r0, r8
   28902:	f001 fd6d 	bl	2a3e0 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   28906:	2c0f      	cmp	r4, #15
   28908:	d806      	bhi.n	28918 <bt_smp_request_ltk+0x72>
__ssp_bos_icheck3(memset, void *, int)
   2890a:	f1c4 0210 	rsb	r2, r4, #16
   2890e:	4649      	mov	r1, r9
   28910:	eb08 0004 	add.w	r0, r8, r4
   28914:	f001 fd72 	bl	2a3fc <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   28918:	2101      	movs	r1, #1
   2891a:	4638      	mov	r0, r7
   2891c:	f7ff fd57 	bl	283ce <atomic_set_bit>
}
   28920:	4630      	mov	r0, r6
   28922:	b003      	add	sp, #12
   28924:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   28928:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   2892c:	b983      	cbnz	r3, 28950 <bt_smp_request_ltk+0xaa>
					     &conn->le.dst);
   2892e:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   28932:	7a21      	ldrb	r1, [r4, #8]
   28934:	4632      	mov	r2, r6
   28936:	2020      	movs	r0, #32
   28938:	f7e6 f9a8 	bl	ec8c <bt_keys_find>
   2893c:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   28940:	b930      	cbnz	r0, 28950 <bt_smp_request_ltk+0xaa>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
   28942:	7a21      	ldrb	r1, [r4, #8]
   28944:	4632      	mov	r2, r6
   28946:	2001      	movs	r0, #1
   28948:	f7e6 f9a0 	bl	ec8c <bt_keys_find>
   2894c:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   28950:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
   28954:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   28958:	b9ee      	cbnz	r6, 28996 <bt_smp_request_ltk+0xf0>
   2895a:	e9dd 2300 	ldrd	r2, r3, [sp]
   2895e:	4313      	orrs	r3, r2
   28960:	d119      	bne.n	28996 <bt_smp_request_ltk+0xf0>
   28962:	b388      	cbz	r0, 289c8 <bt_smp_request_ltk+0x122>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   28964:	89c3      	ldrh	r3, [r0, #14]
   28966:	069a      	lsls	r2, r3, #26
   28968:	d516      	bpl.n	28998 <bt_smp_request_ltk+0xf2>
		enc_size = conn->le.keys->enc_size;
   2896a:	7b04      	ldrb	r4, [r0, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2896c:	f100 011a 	add.w	r1, r0, #26
   28970:	4622      	mov	r2, r4
   28972:	4640      	mov	r0, r8
   28974:	f001 fd34 	bl	2a3e0 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   28978:	2c0f      	cmp	r4, #15
   2897a:	d806      	bhi.n	2898a <bt_smp_request_ltk+0xe4>
__ssp_bos_icheck3(memset, void *, int)
   2897c:	f1c4 0210 	rsb	r2, r4, #16
   28980:	4631      	mov	r1, r6
   28982:	eb08 0004 	add.w	r0, r8, r4
   28986:	f001 fd39 	bl	2a3fc <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2898a:	2101      	movs	r1, #1
   2898c:	4638      	mov	r0, r7
   2898e:	f7ff fd1e 	bl	283ce <atomic_set_bit>
		return true;
   28992:	2601      	movs	r6, #1
   28994:	e7c4      	b.n	28920 <bt_smp_request_ltk+0x7a>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   28996:	b1b8      	cbz	r0, 289c8 <bt_smp_request_ltk+0x122>
   28998:	89c3      	ldrh	r3, [r0, #14]
   2899a:	07db      	lsls	r3, r3, #31
   2899c:	d514      	bpl.n	289c8 <bt_smp_request_ltk+0x122>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   2899e:	2208      	movs	r2, #8
   289a0:	4669      	mov	r1, sp
   289a2:	3040      	adds	r0, #64	; 0x40
   289a4:	f001 fd0e 	bl	2a3c4 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   289a8:	b970      	cbnz	r0, 289c8 <bt_smp_request_ltk+0x122>
	    !memcmp(conn->le.keys->slave_ltk.ediv, &ediv, 2)) {
   289aa:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   289ae:	2202      	movs	r2, #2
   289b0:	a90a      	add	r1, sp, #40	; 0x28
   289b2:	3048      	adds	r0, #72	; 0x48
   289b4:	f001 fd06 	bl	2a3c4 <memcmp>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   289b8:	4606      	mov	r6, r0
   289ba:	b928      	cbnz	r0, 289c8 <bt_smp_request_ltk+0x122>
		enc_size = conn->le.keys->enc_size;
   289bc:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   289c0:	7b0c      	ldrb	r4, [r1, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   289c2:	314a      	adds	r1, #74	; 0x4a
   289c4:	4622      	mov	r2, r4
   289c6:	e7d4      	b.n	28972 <bt_smp_request_ltk+0xcc>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   289c8:	210f      	movs	r1, #15
   289ca:	4638      	mov	r0, r7
   289cc:	f7ff fddc 	bl	28588 <atomic_test_bit>
   289d0:	b120      	cbz	r0, 289dc <bt_smp_request_ltk+0x136>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   289d2:	2202      	movs	r2, #2
   289d4:	2106      	movs	r1, #6
   289d6:	4620      	mov	r0, r4
   289d8:	f7e1 fd56 	bl	a488 <bt_conn_security_changed>
	smp_reset(smp);
   289dc:	4628      	mov	r0, r5
   289de:	f7ff fe9f 	bl	28720 <smp_reset>
	return false;
   289e2:	2600      	movs	r6, #0
   289e4:	e79c      	b.n	28920 <bt_smp_request_ltk+0x7a>
		return false;
   289e6:	4606      	mov	r6, r0
   289e8:	e79a      	b.n	28920 <bt_smp_request_ltk+0x7a>

000289ea <bt_smp_sign>:
   289ea:	f06f 0085 	mvn.w	r0, #133	; 0x85
   289ee:	4770      	bx	lr

000289f0 <smp_error>:
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   289f0:	f100 03c4 	add.w	r3, r0, #196	; 0xc4
{
   289f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   289f6:	4605      	mov	r5, r0
   289f8:	460c      	mov	r4, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   289fa:	4618      	mov	r0, r3
   289fc:	2103      	movs	r1, #3
   289fe:	f7ff fdc3 	bl	28588 <atomic_test_bit>
   28a02:	b1c8      	cbz	r0, 28a38 <smp_error+0x48>
		smp_pairing_complete(smp, reason);
   28a04:	4621      	mov	r1, r4
   28a06:	4628      	mov	r0, r5
   28a08:	f7e5 fc16 	bl	e238 <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   28a0c:	2105      	movs	r1, #5
   28a0e:	4628      	mov	r0, r5
   28a10:	f7ff fde8 	bl	285e4 <smp_create_pdu.isra.0>
	if (!buf) {
   28a14:	4606      	mov	r6, r0
   28a16:	b1e0      	cbz	r0, 28a52 <smp_error+0x62>
   28a18:	2101      	movs	r1, #1
   28a1a:	3008      	adds	r0, #8
   28a1c:	f000 f942 	bl	28ca4 <net_buf_simple_add>
	rsp->reason = reason;
   28a20:	7004      	strb	r4, [r0, #0]
   28a22:	2400      	movs	r4, #0
   28a24:	6828      	ldr	r0, [r5, #0]
   28a26:	9400      	str	r4, [sp, #0]
   28a28:	4623      	mov	r3, r4
   28a2a:	4632      	mov	r2, r6
   28a2c:	2106      	movs	r1, #6
   28a2e:	f7fe fe65 	bl	276fc <bt_l2cap_send_cb>
	return 0;
   28a32:	4620      	mov	r0, r4
}
   28a34:	b002      	add	sp, #8
   28a36:	bd70      	pop	{r4, r5, r6, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   28a38:	2101      	movs	r1, #1
   28a3a:	4618      	mov	r0, r3
   28a3c:	f7ff fda4 	bl	28588 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   28a40:	2800      	cmp	r0, #0
   28a42:	d1df      	bne.n	28a04 <smp_error+0x14>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   28a44:	210f      	movs	r1, #15
   28a46:	4618      	mov	r0, r3
   28a48:	f7ff fd9e 	bl	28588 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   28a4c:	2800      	cmp	r0, #0
   28a4e:	d1d9      	bne.n	28a04 <smp_error+0x14>
   28a50:	e7dc      	b.n	28a0c <smp_error+0x1c>
		return -ENOBUFS;
   28a52:	f06f 0068 	mvn.w	r0, #104	; 0x68
   28a56:	e7ed      	b.n	28a34 <smp_error+0x44>

00028a58 <bt_smp_dhkey_ready>:
{
   28a58:	b570      	push	{r4, r5, r6, lr}
   28a5a:	4604      	mov	r4, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   28a5c:	2008      	movs	r0, #8
   28a5e:	f7e4 fbfd 	bl	d25c <smp_find>
	if (smp) {
   28a62:	4605      	mov	r5, r0
   28a64:	b1e8      	cbz	r0, 28aa2 <bt_smp_dhkey_ready+0x4a>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   28a66:	f100 06c4 	add.w	r6, r0, #196	; 0xc4
   28a6a:	2108      	movs	r1, #8
   28a6c:	4630      	mov	r0, r6
   28a6e:	f7ff fcd4 	bl	2841a <atomic_clear_bit>
	if (!dhkey) {
   28a72:	b3bc      	cbz	r4, 28ae4 <bt_smp_dhkey_ready+0x8c>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   28a74:	2107      	movs	r1, #7
   28a76:	f7ff fcd0 	bl	2841a <atomic_clear_bit>
   28a7a:	4623      	mov	r3, r4
   28a7c:	f205 1257 	addw	r2, r5, #343	; 0x157
   28a80:	f104 0120 	add.w	r1, r4, #32
   28a84:	f853 0b04 	ldr.w	r0, [r3], #4
   28a88:	f842 0b04 	str.w	r0, [r2], #4
   28a8c:	428b      	cmp	r3, r1
   28a8e:	d1f9      	bne.n	28a84 <bt_smp_dhkey_ready+0x2c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   28a90:	210a      	movs	r1, #10
   28a92:	4630      	mov	r0, r6
   28a94:	f7ff fd78 	bl	28588 <atomic_test_bit>
   28a98:	b170      	cbz	r0, 28ab8 <bt_smp_dhkey_ready+0x60>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   28a9a:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   28a9c:	4630      	mov	r0, r6
   28a9e:	f7ff fc96 	bl	283ce <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   28aa2:	2007      	movs	r0, #7
   28aa4:	f7e4 fbda 	bl	d25c <smp_find>
		if (smp) {
   28aa8:	4604      	mov	r4, r0
   28aaa:	b1e8      	cbz	r0, 28ae8 <bt_smp_dhkey_ready+0x90>
			err = smp_dhkey_generate(smp);
   28aac:	f7e4 fb04 	bl	d0b8 <smp_dhkey_generate>
			if (err) {
   28ab0:	4601      	mov	r1, r0
   28ab2:	b1c8      	cbz	r0, 28ae8 <bt_smp_dhkey_ready+0x90>
				smp_error(smp, err);
   28ab4:	4620      	mov	r0, r4
   28ab6:	e012      	b.n	28ade <bt_smp_dhkey_ready+0x86>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   28ab8:	2110      	movs	r1, #16
   28aba:	4630      	mov	r0, r6
   28abc:	f7ff fd64 	bl	28588 <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   28ac0:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   28ac2:	2800      	cmp	r0, #0
   28ac4:	d1ea      	bne.n	28a9c <bt_smp_dhkey_ready+0x44>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   28ac6:	4630      	mov	r0, r6
   28ac8:	f7ff fd5e 	bl	28588 <atomic_test_bit>
   28acc:	2800      	cmp	r0, #0
   28ace:	d0e8      	beq.n	28aa2 <bt_smp_dhkey_ready+0x4a>
		return  compute_and_check_and_send_slave_dhcheck(smp);
   28ad0:	4628      	mov	r0, r5
   28ad2:	f7e4 fbd1 	bl	d278 <compute_and_check_and_send_slave_dhcheck>
		if (err) {
   28ad6:	4601      	mov	r1, r0
   28ad8:	2800      	cmp	r0, #0
   28ada:	d0e2      	beq.n	28aa2 <bt_smp_dhkey_ready+0x4a>
			smp_error(smp, err);
   28adc:	4628      	mov	r0, r5
   28ade:	f7ff ff87 	bl	289f0 <smp_error>
   28ae2:	e7de      	b.n	28aa2 <bt_smp_dhkey_ready+0x4a>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   28ae4:	210b      	movs	r1, #11
   28ae6:	e7f9      	b.n	28adc <bt_smp_dhkey_ready+0x84>
}
   28ae8:	bd70      	pop	{r4, r5, r6, pc}

00028aea <bt_smp_disconnected>:
{
   28aea:	b538      	push	{r3, r4, r5, lr}
	struct bt_keys *keys = chan->conn->le.keys;
   28aec:	6803      	ldr	r3, [r0, #0]
{
   28aee:	4604      	mov	r4, r0
	k_delayed_work_cancel(&smp->work);
   28af0:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
	struct bt_keys *keys = chan->conn->le.keys;
   28af4:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
	k_delayed_work_cancel(&smp->work);
   28af8:	f7ff fc7e 	bl	283f8 <k_delayed_work_cancel>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   28afc:	f104 03c4 	add.w	r3, r4, #196	; 0xc4
   28b00:	2103      	movs	r1, #3
   28b02:	4618      	mov	r0, r3
   28b04:	f7ff fd40 	bl	28588 <atomic_test_bit>
   28b08:	b1a0      	cbz	r0, 28b34 <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   28b0a:	2108      	movs	r1, #8
   28b0c:	4620      	mov	r0, r4
   28b0e:	f7e5 fb93 	bl	e238 <smp_pairing_complete>
	if (keys) {
   28b12:	b13d      	cbz	r5, 28b24 <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   28b14:	89eb      	ldrh	r3, [r5, #14]
   28b16:	b113      	cbz	r3, 28b1e <bt_smp_disconnected+0x34>
   28b18:	7b6b      	ldrb	r3, [r5, #13]
   28b1a:	079b      	lsls	r3, r3, #30
   28b1c:	d502      	bpl.n	28b24 <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   28b1e:	4628      	mov	r0, r5
   28b20:	f000 f845 	bl	28bae <bt_keys_clear>
__ssp_bos_icheck3(memset, void *, int)
   28b24:	4620      	mov	r0, r4
   28b26:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
}
   28b2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   28b2e:	2100      	movs	r1, #0
   28b30:	f001 bc64 	b.w	2a3fc <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   28b34:	2101      	movs	r1, #1
   28b36:	4618      	mov	r0, r3
   28b38:	f7ff fd26 	bl	28588 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   28b3c:	2800      	cmp	r0, #0
   28b3e:	d1e4      	bne.n	28b0a <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   28b40:	210f      	movs	r1, #15
   28b42:	4618      	mov	r0, r3
   28b44:	f7ff fd20 	bl	28588 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   28b48:	2800      	cmp	r0, #0
   28b4a:	d1de      	bne.n	28b0a <bt_smp_disconnected+0x20>
   28b4c:	e7e1      	b.n	28b12 <bt_smp_disconnected+0x28>

00028b4e <smp_ident_sent>:
{
   28b4e:	b508      	push	{r3, lr}
	if (conn->type == BT_CONN_TYPE_LE) {
   28b50:	7883      	ldrb	r3, [r0, #2]
   28b52:	2b01      	cmp	r3, #1
   28b54:	d10f      	bne.n	28b76 <smp_ident_sent+0x28>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   28b56:	2106      	movs	r1, #6
   28b58:	f7fe fde9 	bl	2772e <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   28b5c:	f890 21a8 	ldrb.w	r2, [r0, #424]	; 0x1a8
   28b60:	f022 0201 	bic.w	r2, r2, #1
   28b64:	f880 21a8 	strb.w	r2, [r0, #424]	; 0x1a8
		if (!smp->local_dist && !smp->remote_dist) {
   28b68:	f8b0 11a8 	ldrh.w	r1, [r0, #424]	; 0x1a8
   28b6c:	b919      	cbnz	r1, 28b76 <smp_ident_sent+0x28>
}
   28b6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			smp_pairing_complete(smp, 0);
   28b72:	f7e5 bb61 	b.w	e238 <smp_pairing_complete>
}
   28b76:	bd08      	pop	{r3, pc}

00028b78 <bt_addr_le_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   28b78:	680b      	ldr	r3, [r1, #0]
   28b7a:	6003      	str	r3, [r0, #0]
   28b7c:	888b      	ldrh	r3, [r1, #4]
   28b7e:	8083      	strh	r3, [r0, #4]
   28b80:	798b      	ldrb	r3, [r1, #6]
   28b82:	7183      	strb	r3, [r0, #6]
   28b84:	4770      	bx	lr

00028b86 <bt_keys_get_type>:
{
   28b86:	b570      	push	{r4, r5, r6, lr}
   28b88:	4604      	mov	r4, r0
   28b8a:	460d      	mov	r5, r1
   28b8c:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   28b8e:	f7e6 f87d 	bl	ec8c <bt_keys_find>
	if (keys) {
   28b92:	b938      	cbnz	r0, 28ba4 <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   28b94:	4631      	mov	r1, r6
   28b96:	4628      	mov	r0, r5
   28b98:	f7e6 f842 	bl	ec20 <bt_keys_get_addr>
	if (!keys) {
   28b9c:	b110      	cbz	r0, 28ba4 <bt_keys_get_type+0x1e>

void bt_keys_add_type(struct bt_keys *keys, int type)
{
	keys->keys |= type;
   28b9e:	89c3      	ldrh	r3, [r0, #14]
   28ba0:	431c      	orrs	r4, r3
   28ba2:	81c4      	strh	r4, [r0, #14]
}
   28ba4:	bd70      	pop	{r4, r5, r6, pc}

00028ba6 <bt_keys_add_type>:
	keys->keys |= type;
   28ba6:	89c3      	ldrh	r3, [r0, #14]
   28ba8:	4319      	orrs	r1, r3
   28baa:	81c1      	strh	r1, [r0, #14]
}
   28bac:	4770      	bx	lr

00028bae <bt_keys_clear>:

void bt_keys_clear(struct bt_keys *keys)
{
   28bae:	b510      	push	{r4, lr}
	BT_DBG("%s (keys 0x%04x)", bt_addr_le_str(&keys->addr), keys->keys);

	if (keys->state & BT_KEYS_ID_ADDED) {
   28bb0:	7a03      	ldrb	r3, [r0, #8]
   28bb2:	075b      	lsls	r3, r3, #29
{
   28bb4:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   28bb6:	d501      	bpl.n	28bbc <bt_keys_clear+0xe>
		bt_id_del(keys);
   28bb8:	f7e0 fc14 	bl	93e4 <bt_id_del>
__ssp_bos_icheck3(memset, void *, int)
   28bbc:	4620      	mov	r0, r4
   28bbe:	225c      	movs	r2, #92	; 0x5c
		BT_DBG("Deleting key %s", log_strdup(key));
		settings_delete(key);
	}

	(void)memset(keys, 0, sizeof(*keys));
}
   28bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   28bc4:	2100      	movs	r1, #0
   28bc6:	f001 bc19 	b.w	2a3fc <memset>

00028bca <fixed_data_unref>:
}
   28bca:	4770      	bx	lr

00028bcc <k_queue_get>:
{
   28bcc:	e92d 0150 	stmdb	sp!, {r4, r6, r8}
   28bd0:	4601      	mov	r1, r0
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   28bd2:	f3ef 8405 	mrs	r4, IPSR
	if (value) {
   28bd6:	b954      	cbnz	r4, 28bee <k_queue_get+0x22>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   28bd8:	f3ef 8414 	mrs	r4, CONTROL
	if (z_syscall_trap()) {
   28bdc:	07e4      	lsls	r4, r4, #31
   28bde:	d506      	bpl.n	28bee <k_queue_get+0x22>
	register uint32_t r1 __asm__("r1") = arg2;
   28be0:	4611      	mov	r1, r2
	register uint32_t r6 __asm__("r6") = call_id;
   28be2:	269a      	movs	r6, #154	; 0x9a
	register uint32_t r2 __asm__("r2") = arg3;
   28be4:	461a      	mov	r2, r3
	__asm__ volatile("svc %[svid]\n"
   28be6:	df03      	svc	3
}
   28be8:	e8bd 0150 	ldmia.w	sp!, {r4, r6, r8}
   28bec:	4770      	bx	lr
   28bee:	e8bd 0150 	ldmia.w	sp!, {r4, r6, r8}
	return z_impl_k_queue_get(queue, timeout);
   28bf2:	4608      	mov	r0, r1
   28bf4:	f7f8 ba60 	b.w	210b8 <z_impl_k_queue_get>

00028bf8 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   28bf8:	6a01      	ldr	r1, [r0, #32]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   28bfa:	6849      	ldr	r1, [r1, #4]
   28bfc:	6809      	ldr	r1, [r1, #0]
   28bfe:	f7f3 bd6f 	b.w	1c6e0 <net_buf_alloc_len>

00028c02 <net_buf_get>:
{
   28c02:	b570      	push	{r4, r5, r6, lr}
   28c04:	4606      	mov	r6, r0
	buf = k_fifo_get(fifo, timeout);
   28c06:	f7ff ffe1 	bl	28bcc <k_queue_get>
	if (!buf) {
   28c0a:	4605      	mov	r5, r0
   28c0c:	b128      	cbz	r0, 28c1a <net_buf_get+0x18>
   28c0e:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   28c10:	7963      	ldrb	r3, [r4, #5]
   28c12:	f013 0301 	ands.w	r3, r3, #1
   28c16:	d102      	bne.n	28c1e <net_buf_get+0x1c>
	frag->frags = NULL;
   28c18:	6023      	str	r3, [r4, #0]
}
   28c1a:	4628      	mov	r0, r5
   28c1c:	bd70      	pop	{r4, r5, r6, pc}
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   28c1e:	2300      	movs	r3, #0
   28c20:	2200      	movs	r2, #0
   28c22:	4630      	mov	r0, r6
   28c24:	f7ff ffd2 	bl	28bcc <k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   28c28:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   28c2a:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   28c2c:	f023 0301 	bic.w	r3, r3, #1
   28c30:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   28c32:	4604      	mov	r4, r0
   28c34:	e7ec      	b.n	28c10 <net_buf_get+0xe>

00028c36 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   28c36:	6883      	ldr	r3, [r0, #8]
   28c38:	440b      	add	r3, r1
   28c3a:	6003      	str	r3, [r0, #0]
}
   28c3c:	4770      	bx	lr

00028c3e <net_buf_put>:
{
   28c3e:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   28c40:	460a      	mov	r2, r1
   28c42:	6814      	ldr	r4, [r2, #0]
   28c44:	b914      	cbnz	r4, 28c4c <net_buf_put+0xe>
}
   28c46:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   28c48:	f000 bd49 	b.w	296de <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   28c4c:	7953      	ldrb	r3, [r2, #5]
   28c4e:	f043 0301 	orr.w	r3, r3, #1
   28c52:	7153      	strb	r3, [r2, #5]
   28c54:	4622      	mov	r2, r4
   28c56:	e7f4      	b.n	28c42 <net_buf_put+0x4>

00028c58 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   28c58:	7902      	ldrb	r2, [r0, #4]
   28c5a:	3201      	adds	r2, #1
   28c5c:	7102      	strb	r2, [r0, #4]
	return buf;
}
   28c5e:	4770      	bx	lr

00028c60 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   28c60:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   28c62:	4618      	mov	r0, r3
   28c64:	681b      	ldr	r3, [r3, #0]
   28c66:	2b00      	cmp	r3, #0
   28c68:	d1fb      	bne.n	28c62 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   28c6a:	4770      	bx	lr

00028c6c <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   28c6c:	6802      	ldr	r2, [r0, #0]
{
   28c6e:	b510      	push	{r4, lr}
	if (parent->frags) {
   28c70:	b12a      	cbz	r2, 28c7e <net_buf_frag_insert+0x12>
   28c72:	460b      	mov	r3, r1
	while (buf->frags) {
   28c74:	461c      	mov	r4, r3
   28c76:	681b      	ldr	r3, [r3, #0]
   28c78:	2b00      	cmp	r3, #0
   28c7a:	d1fb      	bne.n	28c74 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   28c7c:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   28c7e:	6001      	str	r1, [r0, #0]
}
   28c80:	bd10      	pop	{r4, pc}

00028c82 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   28c82:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   28c84:	4604      	mov	r4, r0
   28c86:	b920      	cbnz	r0, 28c92 <net_buf_frag_add+0x10>
	buf->ref++;
   28c88:	790b      	ldrb	r3, [r1, #4]
   28c8a:	3301      	adds	r3, #1
   28c8c:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   28c8e:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   28c90:	bd10      	pop	{r4, pc}
   28c92:	4603      	mov	r3, r0
	while (buf->frags) {
   28c94:	4618      	mov	r0, r3
   28c96:	681b      	ldr	r3, [r3, #0]
   28c98:	2b00      	cmp	r3, #0
   28c9a:	d1fb      	bne.n	28c94 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   28c9c:	f7ff ffe6 	bl	28c6c <net_buf_frag_insert>
   28ca0:	4620      	mov	r0, r4
   28ca2:	e7f5      	b.n	28c90 <net_buf_frag_add+0xe>

00028ca4 <net_buf_simple_add>:
	return buf->data + buf->len;
   28ca4:	8883      	ldrh	r3, [r0, #4]
   28ca6:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   28ca8:	4419      	add	r1, r3
   28caa:	8081      	strh	r1, [r0, #4]
	return tail;
}
   28cac:	18d0      	adds	r0, r2, r3
   28cae:	4770      	bx	lr

00028cb0 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   28cb0:	b510      	push	{r4, lr}
   28cb2:	6803      	ldr	r3, [r0, #0]
   28cb4:	8884      	ldrh	r4, [r0, #4]
   28cb6:	4423      	add	r3, r4
	buf->len += len;
   28cb8:	4414      	add	r4, r2
   28cba:	8084      	strh	r4, [r0, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   28cbc:	4618      	mov	r0, r3
   28cbe:	f001 fb8f 	bl	2a3e0 <memcpy>
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
}
   28cc2:	bd10      	pop	{r4, pc}

00028cc4 <net_buf_simple_add_u8>:
   28cc4:	8883      	ldrh	r3, [r0, #4]
   28cc6:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   28cc8:	b510      	push	{r4, lr}
	buf->len += len;
   28cca:	1c5c      	adds	r4, r3, #1
   28ccc:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   28cce:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   28cd0:	18d0      	adds	r0, r2, r3
   28cd2:	bd10      	pop	{r4, pc}

00028cd4 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   28cd4:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   28cd6:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   28cd8:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   28cda:	1a40      	subs	r0, r0, r1
	buf->len += len;
   28cdc:	4411      	add	r1, r2
	buf->data -= len;
   28cde:	6018      	str	r0, [r3, #0]
	buf->len += len;
   28ce0:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   28ce2:	4770      	bx	lr

00028ce4 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   28ce4:	8882      	ldrh	r2, [r0, #4]
   28ce6:	1a52      	subs	r2, r2, r1
{
   28ce8:	4603      	mov	r3, r0
	buf->len -= len;
   28cea:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   28cec:	6800      	ldr	r0, [r0, #0]
   28cee:	4408      	add	r0, r1
   28cf0:	6018      	str	r0, [r3, #0]
}
   28cf2:	4770      	bx	lr

00028cf4 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   28cf4:	4603      	mov	r3, r0
	void *data = buf->data;
   28cf6:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   28cf8:	889a      	ldrh	r2, [r3, #4]
   28cfa:	1a52      	subs	r2, r2, r1
	buf->data += len;
   28cfc:	4401      	add	r1, r0
	buf->len -= len;
   28cfe:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   28d00:	6019      	str	r1, [r3, #0]

	return data;
}
   28d02:	4770      	bx	lr

00028d04 <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   28d04:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   28d06:	6803      	ldr	r3, [r0, #0]
   28d08:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   28d0a:	2102      	movs	r1, #2
   28d0c:	f7ff ffea 	bl	28ce4 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   28d10:	4620      	mov	r0, r4
   28d12:	bd10      	pop	{r4, pc}

00028d14 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   28d14:	6802      	ldr	r2, [r0, #0]
   28d16:	6880      	ldr	r0, [r0, #8]
}
   28d18:	1a10      	subs	r0, r2, r0
   28d1a:	4770      	bx	lr

00028d1c <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   28d1c:	8883      	ldrh	r3, [r0, #4]
   28d1e:	88c2      	ldrh	r2, [r0, #6]
   28d20:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   28d22:	6803      	ldr	r3, [r0, #0]
   28d24:	6880      	ldr	r0, [r0, #8]
   28d26:	1a18      	subs	r0, r3, r0
}
   28d28:	1a10      	subs	r0, r2, r0
   28d2a:	4770      	bx	lr

00028d2c <entropy_get_entropy>:
{
   28d2c:	e92d 4177 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r8, lr}
   28d30:	4603      	mov	r3, r0
   28d32:	460c      	mov	r4, r1
   28d34:	f8ad 2006 	strh.w	r2, [sp, #6]
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   28d38:	f3ef 8205 	mrs	r2, IPSR
	if (value) {
   28d3c:	b952      	cbnz	r2, 28d54 <entropy_get_entropy+0x28>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   28d3e:	f3ef 8214 	mrs	r2, CONTROL
	if (z_syscall_trap()) {
   28d42:	07d2      	lsls	r2, r2, #31
   28d44:	d506      	bpl.n	28d54 <entropy_get_entropy+0x28>
	register uint32_t r2 __asm__("r2") = arg3;
   28d46:	f8dd 2006 	ldr.w	r2, [sp, #6]
	register uint32_t r6 __asm__("r6") = call_id;
   28d4a:	2631      	movs	r6, #49	; 0x31
	__asm__ volatile("svc %[svid]\n"
   28d4c:	df03      	svc	3
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&buffer, *(uintptr_t *)&length, K_SYSCALL_ENTROPY_GET_ENTROPY);
	}
#endif
	compiler_barrier();
	return z_impl_entropy_get_entropy(dev, buffer, length);
}
   28d4e:	b003      	add	sp, #12
   28d50:	e8bd 8170 	ldmia.w	sp!, {r4, r5, r6, r8, pc}
   28d54:	689a      	ldr	r2, [r3, #8]
   28d56:	4621      	mov	r1, r4
   28d58:	6815      	ldr	r5, [r2, #0]
   28d5a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   28d5e:	4618      	mov	r0, r3
   28d60:	47a8      	blx	r5
	return z_impl_entropy_get_entropy(dev, buffer, length);
   28d62:	e7f4      	b.n	28d4e <entropy_get_entropy+0x22>

00028d64 <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
   28d64:	b570      	push	{r4, r5, r6, lr}
   28d66:	460e      	mov	r6, r1
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   28d68:	6801      	ldr	r1, [r0, #0]
{
   28d6a:	4615      	mov	r5, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   28d6c:	b189      	cbz	r1, 28d92 <gpio_fire_callbacks+0x2e>
	return node->next;
   28d6e:	680c      	ldr	r4, [r1, #0]
   28d70:	2c00      	cmp	r4, #0
   28d72:	bf38      	it	cc
   28d74:	2400      	movcc	r4, #0
		if (cb->pin_mask & pins) {
   28d76:	688a      	ldr	r2, [r1, #8]
   28d78:	402a      	ands	r2, r5
   28d7a:	d002      	beq.n	28d82 <gpio_fire_callbacks+0x1e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   28d7c:	684b      	ldr	r3, [r1, #4]
   28d7e:	4630      	mov	r0, r6
   28d80:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   28d82:	b134      	cbz	r4, 28d92 <gpio_fire_callbacks+0x2e>
   28d84:	6823      	ldr	r3, [r4, #0]
   28d86:	2b00      	cmp	r3, #0
   28d88:	bf38      	it	cc
   28d8a:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   28d8c:	4621      	mov	r1, r4
   28d8e:	461c      	mov	r4, r3
   28d90:	e7f1      	b.n	28d76 <gpio_fire_callbacks+0x12>
		}
	}
}
   28d92:	bd70      	pop	{r4, r5, r6, pc}

00028d94 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   28d94:	6843      	ldr	r3, [r0, #4]
   28d96:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   28d98:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   28d9c:	600b      	str	r3, [r1, #0]
}
   28d9e:	2000      	movs	r0, #0
   28da0:	4770      	bx	lr

00028da2 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   28da2:	6843      	ldr	r3, [r0, #4]
   28da4:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   28da6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   28daa:	4042      	eors	r2, r0
   28dac:	400a      	ands	r2, r1
   28dae:	4042      	eors	r2, r0
    p_reg->OUT = value;
   28db0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   28db4:	2000      	movs	r0, #0
   28db6:	4770      	bx	lr

00028db8 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   28db8:	6843      	ldr	r3, [r0, #4]
   28dba:	685b      	ldr	r3, [r3, #4]
}
   28dbc:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   28dbe:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   28dc2:	4770      	bx	lr

00028dc4 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   28dc4:	6843      	ldr	r3, [r0, #4]
   28dc6:	685b      	ldr	r3, [r3, #4]
}
   28dc8:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   28dca:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   28dce:	4770      	bx	lr

00028dd0 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   28dd0:	6843      	ldr	r3, [r0, #4]
   28dd2:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   28dd4:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   28dd8:	404b      	eors	r3, r1
    p_reg->OUT = value;
   28dda:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   28dde:	2000      	movs	r0, #0
   28de0:	4770      	bx	lr

00028de2 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   28de2:	6903      	ldr	r3, [r0, #16]
Z_GENLIST_IS_EMPTY(slist)
   28de4:	6858      	ldr	r0, [r3, #4]
{
   28de6:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   28de8:	b158      	cbz	r0, 28e02 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   28dea:	2400      	movs	r4, #0
   28dec:	4281      	cmp	r1, r0
   28dee:	d113      	bne.n	28e18 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   28df0:	6808      	ldr	r0, [r1, #0]
   28df2:	b95c      	cbnz	r4, 28e0c <gpio_nrfx_manage_callback+0x2a>
   28df4:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   28df6:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   28df8:	42a1      	cmp	r1, r4
   28dfa:	d100      	bne.n	28dfe <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   28dfc:	6098      	str	r0, [r3, #8]
	parent->next = child;
   28dfe:	2000      	movs	r0, #0
   28e00:	6008      	str	r0, [r1, #0]
	if (set) {
   28e02:	b972      	cbnz	r2, 28e22 <gpio_nrfx_manage_callback+0x40>
	return 0;
   28e04:	2000      	movs	r0, #0
}
   28e06:	bd30      	pop	{r4, r5, pc}
   28e08:	4628      	mov	r0, r5
   28e0a:	e7ef      	b.n	28dec <gpio_nrfx_manage_callback+0xa>
   28e0c:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   28e0e:	6898      	ldr	r0, [r3, #8]
   28e10:	4281      	cmp	r1, r0
	list->tail = node;
   28e12:	bf08      	it	eq
   28e14:	609c      	streq	r4, [r3, #8]
}
   28e16:	e7f2      	b.n	28dfe <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   28e18:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   28e1a:	4604      	mov	r4, r0
   28e1c:	2d00      	cmp	r5, #0
   28e1e:	d1f3      	bne.n	28e08 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   28e20:	b13a      	cbz	r2, 28e32 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   28e22:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   28e24:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   28e26:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   28e28:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   28e2a:	2800      	cmp	r0, #0
   28e2c:	d1ea      	bne.n	28e04 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   28e2e:	6099      	str	r1, [r3, #8]
}
   28e30:	e7e9      	b.n	28e06 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   28e32:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   28e36:	e7e6      	b.n	28e06 <gpio_nrfx_manage_callback+0x24>

00028e38 <cfg_level_pins>:
{
   28e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct gpio_nrfx_data *data = get_port_data(port);
   28e3c:	6907      	ldr	r7, [r0, #16]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   28e3e:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   28e42:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   28e44:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
   28e48:	4313      	orrs	r3, r2
   28e4a:	ea24 0403 	bic.w	r4, r4, r3
	uint32_t bit = 1U << pin;
   28e4e:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   28e50:	2500      	movs	r5, #0
	while (level_pins) {
   28e52:	b90c      	cbnz	r4, 28e58 <cfg_level_pins+0x20>
}
   28e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   28e58:	4226      	tst	r6, r4
   28e5a:	d010      	beq.n	28e7e <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   28e5c:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   28e5e:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   28e62:	40e9      	lsrs	r1, r5
   28e64:	f001 0101 	and.w	r1, r1, #1
   28e68:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   28e6c:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   28e70:	b2c9      	uxtb	r1, r1
   28e72:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   28e76:	f7f3 fe1f 	bl	1cab8 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   28e7a:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   28e7e:	3501      	adds	r5, #1
		bit <<= 1;
   28e80:	0076      	lsls	r6, r6, #1
   28e82:	e7e6      	b.n	28e52 <cfg_level_pins+0x1a>

00028e84 <arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   28e84:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   28e88:	b923      	cbnz	r3, 28e94 <arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   28e8a:	f3ef 8014 	mrs	r0, CONTROL
	return (value & CONTROL_nPRIV_Msk) ? true : false;
   28e8e:	f000 0001 	and.w	r0, r0, #1
   28e92:	4770      	bx	lr
		return false;
   28e94:	2000      	movs	r0, #0
}
   28e96:	4770      	bx	lr

00028e98 <z_obj_validation_check.constprop.0>:
static inline int z_obj_validation_check(struct z_object *ko,
   28e98:	b570      	push	{r4, r5, r6, lr}
	ret = z_object_validate(ko, otype, init);
   28e9a:	2200      	movs	r2, #0
static inline int z_obj_validation_check(struct z_object *ko,
   28e9c:	460d      	mov	r5, r1
	ret = z_object_validate(ko, otype, init);
   28e9e:	211e      	movs	r1, #30
static inline int z_obj_validation_check(struct z_object *ko,
   28ea0:	4606      	mov	r6, r0
	ret = z_object_validate(ko, otype, init);
   28ea2:	f7fb f92b 	bl	240fc <z_object_validate>
	if (ret != 0) {
   28ea6:	4604      	mov	r4, r0
   28ea8:	b120      	cbz	r0, 28eb4 <z_obj_validation_check.constprop.0+0x1c>
		z_dump_object_error(ret, obj, ko, otype);
   28eaa:	231e      	movs	r3, #30
   28eac:	4632      	mov	r2, r6
   28eae:	4629      	mov	r1, r5
   28eb0:	f7fb f82c 	bl	23f0c <z_dump_object_error>
#else
	ARG_UNUSED(obj);
#endif

	return ret;
}
   28eb4:	4620      	mov	r0, r4
   28eb6:	bd70      	pop	{r4, r5, r6, pc}

00028eb8 <arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   28eb8:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   28ebc:	b923      	cbnz	r3, 28ec8 <arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   28ebe:	f3ef 8014 	mrs	r0, CONTROL
	return (value & CONTROL_nPRIV_Msk) ? true : false;
   28ec2:	f000 0001 	and.w	r0, r0, #1
   28ec6:	4770      	bx	lr
		return false;
   28ec8:	2000      	movs	r0, #0
}
   28eca:	4770      	bx	lr

00028ecc <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   28ecc:	2301      	movs	r3, #1
   28ece:	fa03 f101 	lsl.w	r1, r3, r1
   28ed2:	6903      	ldr	r3, [r0, #16]
   28ed4:	681b      	ldr	r3, [r3, #0]
   28ed6:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   28ed8:	bf18      	it	ne
   28eda:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   28ede:	b112      	cbz	r2, 28ee6 <gpio_pin_set+0x1a>
	return api->port_set_bits_raw(port, pins);
   28ee0:	6883      	ldr	r3, [r0, #8]
   28ee2:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   28ee4:	4718      	bx	r3
   28ee6:	6883      	ldr	r3, [r0, #8]
   28ee8:	691b      	ldr	r3, [r3, #16]
   28eea:	e7fb      	b.n	28ee4 <gpio_pin_set+0x18>

00028eec <_spi_context_cs_control.isra.0>:
static inline void _spi_context_cs_control(struct spi_context *ctx,
   28eec:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   28eee:	6805      	ldr	r5, [r0, #0]
static inline void _spi_context_cs_control(struct spi_context *ctx,
   28ef0:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   28ef2:	b1fd      	cbz	r5, 28f34 <_spi_context_cs_control.isra.0+0x48>
   28ef4:	68ab      	ldr	r3, [r5, #8]
   28ef6:	b1eb      	cbz	r3, 28f34 <_spi_context_cs_control.isra.0+0x48>
   28ef8:	6818      	ldr	r0, [r3, #0]
   28efa:	b1d8      	cbz	r0, 28f34 <_spi_context_cs_control.isra.0+0x48>
		if (on) {
   28efc:	b151      	cbz	r1, 28f14 <_spi_context_cs_control.isra.0+0x28>
			gpio_pin_set(ctx->config->cs->gpio_dev,
   28efe:	7a19      	ldrb	r1, [r3, #8]
   28f00:	2201      	movs	r2, #1
   28f02:	f7ff ffe3 	bl	28ecc <gpio_pin_set>
			k_busy_wait(ctx->config->cs->delay);
   28f06:	6823      	ldr	r3, [r4, #0]
   28f08:	689b      	ldr	r3, [r3, #8]
   28f0a:	6858      	ldr	r0, [r3, #4]
}
   28f0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   28f10:	f000 bdd1 	b.w	29ab6 <z_impl_k_busy_wait>
			if (!force_off &&
   28f14:	b912      	cbnz	r2, 28f1c <_spi_context_cs_control.isra.0+0x30>
   28f16:	88aa      	ldrh	r2, [r5, #4]
   28f18:	0492      	lsls	r2, r2, #18
   28f1a:	d40b      	bmi.n	28f34 <_spi_context_cs_control.isra.0+0x48>
			k_busy_wait(ctx->config->cs->delay);
   28f1c:	6858      	ldr	r0, [r3, #4]
   28f1e:	f000 fdca 	bl	29ab6 <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
   28f22:	6823      	ldr	r3, [r4, #0]
   28f24:	689b      	ldr	r3, [r3, #8]
   28f26:	2200      	movs	r2, #0
   28f28:	7a19      	ldrb	r1, [r3, #8]
   28f2a:	6818      	ldr	r0, [r3, #0]
}
   28f2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set(ctx->config->cs->gpio_dev,
   28f30:	f7ff bfcc 	b.w	28ecc <gpio_pin_set>
}
   28f34:	bd38      	pop	{r3, r4, r5, pc}

00028f36 <spi_context_unlock_unconditionally>:
{
   28f36:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   28f38:	2201      	movs	r2, #1
   28f3a:	2100      	movs	r1, #0
{
   28f3c:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   28f3e:	f7ff ffd5 	bl	28eec <_spi_context_cs_control.isra.0>
	if (!k_sem_count_get(&ctx->lock)) {
   28f42:	6923      	ldr	r3, [r4, #16]
   28f44:	b933      	cbnz	r3, 28f54 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   28f46:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   28f48:	f104 0008 	add.w	r0, r4, #8
}
   28f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   28f50:	f7f9 b858 	b.w	22004 <z_impl_k_sem_give>
   28f54:	bd10      	pop	{r4, pc}

00028f56 <spi_nrfx_release>:
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   28f56:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   28f58:	6803      	ldr	r3, [r0, #0]
   28f5a:	428b      	cmp	r3, r1
{
   28f5c:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   28f5e:	d106      	bne.n	28f6e <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   28f60:	f890 4064 	ldrb.w	r4, [r0, #100]	; 0x64
   28f64:	b934      	cbnz	r4, 28f74 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   28f66:	f7ff ffe6 	bl	28f36 <spi_context_unlock_unconditionally>
	return 0;
   28f6a:	4620      	mov	r0, r4
}
   28f6c:	bd10      	pop	{r4, pc}
		return -EINVAL;
   28f6e:	f06f 0015 	mvn.w	r0, #21
   28f72:	e7fb      	b.n	28f6c <spi_nrfx_release+0x16>
		return -EBUSY;
   28f74:	f06f 000f 	mvn.w	r0, #15
   28f78:	e7f8      	b.n	28f6c <spi_nrfx_release+0x16>

00028f7a <arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   28f7a:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   28f7e:	b923      	cbnz	r3, 28f8a <arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   28f80:	f3ef 8014 	mrs	r0, CONTROL
	return (value & CONTROL_nPRIV_Msk) ? true : false;
   28f84:	f000 0001 	and.w	r0, r0, #1
   28f88:	4770      	bx	lr
		return false;
   28f8a:	2000      	movs	r0, #0
}
   28f8c:	4770      	bx	lr

00028f8e <z_obj_validation_check.constprop.0>:
static inline int z_obj_validation_check(struct z_object *ko,
   28f8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28f90:	4615      	mov	r5, r2
   28f92:	460e      	mov	r6, r1
	ret = z_object_validate(ko, otype, init);
   28f94:	2200      	movs	r2, #0
   28f96:	4629      	mov	r1, r5
static inline int z_obj_validation_check(struct z_object *ko,
   28f98:	4607      	mov	r7, r0
	ret = z_object_validate(ko, otype, init);
   28f9a:	f7fb f8af 	bl	240fc <z_object_validate>
	if (ret != 0) {
   28f9e:	4604      	mov	r4, r0
   28fa0:	b120      	cbz	r0, 28fac <z_obj_validation_check.constprop.0+0x1e>
		z_dump_object_error(ret, obj, ko, otype);
   28fa2:	462b      	mov	r3, r5
   28fa4:	463a      	mov	r2, r7
   28fa6:	4631      	mov	r1, r6
   28fa8:	f7fa ffb0 	bl	23f0c <z_dump_object_error>
}
   28fac:	4620      	mov	r0, r4
   28fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00028fb0 <timer_work_handler>:
	TimerIrqHandler();
   28fb0:	f7f6 b9b0 	b.w	1f314 <TimerIrqHandler>

00028fb4 <k_uptime_get>:
{
   28fb4:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   28fb6:	f000 fec5 	bl	29d44 <z_impl_k_uptime_ticks>
   28fba:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   28fbe:	fba0 2304 	umull	r2, r3, r0, r4
   28fc2:	fb04 3301 	mla	r3, r4, r1, r3
   28fc6:	0bd0      	lsrs	r0, r2, #15
}
   28fc8:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   28fcc:	0bd9      	lsrs	r1, r3, #15
   28fce:	bd10      	pop	{r4, pc}

00028fd0 <RtcGetTimerValue>:
{
   28fd0:	b508      	push	{r3, lr}
	return (uint32_t)k_uptime_get();
   28fd2:	f7ff ffef 	bl	28fb4 <k_uptime_get>
}
   28fd6:	bd08      	pop	{r3, pc}

00028fd8 <RtcGetMinimumTimeout>:
}
   28fd8:	2001      	movs	r0, #1
   28fda:	4770      	bx	lr

00028fdc <DelayMsMcu>:

void DelayMsMcu(uint32_t ms)
{
   28fdc:	b538      	push	{r3, r4, r5, lr}
   28fde:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   28fe2:	f240 34e7 	movw	r4, #999	; 0x3e7
   28fe6:	2500      	movs	r5, #0
   28fe8:	fbe1 4500 	umlal	r4, r5, r1, r0
   28fec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   28ff0:	2300      	movs	r3, #0
   28ff2:	4620      	mov	r0, r4
   28ff4:	4629      	mov	r1, r5
   28ff6:	f7d7 fda1 	bl	b3c <__aeabi_uldivmod>
	k_sleep(K_MSEC(ms));
}
   28ffa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return z_impl_k_sleep(timeout);
   28ffe:	f7f8 bde3 	b.w	21bc8 <z_impl_k_sleep>

00029002 <RtcMs2Tick>:

uint32_t RtcMs2Tick(uint32_t milliseconds)
{
	return milliseconds;
}
   29002:	4770      	bx	lr

00029004 <RtcTick2Ms>:
   29004:	4770      	bx	lr

00029006 <BoardCriticalSectionBegin>:
	__asm__ volatile(
   29006:	f04f 0220 	mov.w	r2, #32
   2900a:	f3ef 8311 	mrs	r3, BASEPRI
   2900e:	f382 8811 	msr	BASEPRI, r2
   29012:	f3bf 8f6f 	isb	sy
	return tick;
}

void BoardCriticalSectionBegin(uint32_t *mask)
{
	*mask = irq_lock();
   29016:	6003      	str	r3, [r0, #0]
}
   29018:	4770      	bx	lr

0002901a <BoardCriticalSectionEnd>:
	__asm__ volatile(
   2901a:	6803      	ldr	r3, [r0, #0]
   2901c:	f383 8811 	msr	BASEPRI, r3
   29020:	f3bf 8f6f 	isb	sy

void BoardCriticalSectionEnd(uint32_t *mask)
{
	irq_unlock(*mask);
}
   29024:	4770      	bx	lr

00029026 <arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   29026:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   2902a:	b923      	cbnz	r3, 29036 <arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   2902c:	f3ef 8014 	mrs	r0, CONTROL
	return (value & CONTROL_nPRIV_Msk) ? true : false;
   29030:	f000 0001 	and.w	r0, r0, #1
   29034:	4770      	bx	lr
		return false;
   29036:	2000      	movs	r0, #0
}
   29038:	4770      	bx	lr

0002903a <arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   2903a:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   2903e:	b923      	cbnz	r3, 2904a <arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   29040:	f3ef 8014 	mrs	r0, CONTROL
	return (value & CONTROL_nPRIV_Msk) ? true : false;
   29044:	f000 0001 	and.w	r0, r0, #1
   29048:	4770      	bx	lr
		return false;
   2904a:	2000      	movs	r0, #0
}
   2904c:	4770      	bx	lr

0002904e <z_impl_gpio_pin_interrupt_configure>:
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   2904e:	0413      	lsls	r3, r2, #16
{
   29050:	b430      	push	{r4, r5}
	const struct gpio_driver_api *api =
   29052:	6884      	ldr	r4, [r0, #8]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   29054:	d507      	bpl.n	29066 <z_impl_gpio_pin_interrupt_configure+0x18>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   29056:	6905      	ldr	r5, [r0, #16]
   29058:	2301      	movs	r3, #1
   2905a:	682d      	ldr	r5, [r5, #0]
   2905c:	408b      	lsls	r3, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   2905e:	422b      	tst	r3, r5
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   29060:	bf18      	it	ne
   29062:	f482 22c0 	eorne.w	r2, r2, #393216	; 0x60000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   29066:	69a4      	ldr	r4, [r4, #24]
   29068:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
   2906c:	46a4      	mov	ip, r4
   2906e:	f402 32b0 	and.w	r2, r2, #90112	; 0x16000
}
   29072:	bc30      	pop	{r4, r5}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   29074:	4760      	bx	ip

00029076 <SX1276CheckRfFrequency>:
}
   29076:	2001      	movs	r0, #1
   29078:	4770      	bx	lr

0002907a <gpio_pin_set.constprop.0>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   2907a:	6903      	ldr	r3, [r0, #16]
   2907c:	681b      	ldr	r3, [r3, #0]
   2907e:	05db      	lsls	r3, r3, #23
		value = (value != 0) ? 0 : 1;
   29080:	bf48      	it	mi
   29082:	f081 0101 	eormi.w	r1, r1, #1
	if (value != 0)	{
   29086:	b121      	cbz	r1, 29092 <gpio_pin_set.constprop.0+0x18>
	return api->port_set_bits_raw(port, pins);
   29088:	6883      	ldr	r3, [r0, #8]
   2908a:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   2908c:	f44f 7180 	mov.w	r1, #256	; 0x100
   29090:	4718      	bx	r3
   29092:	6883      	ldr	r3, [r0, #8]
   29094:	691b      	ldr	r3, [r3, #16]
   29096:	e7f9      	b.n	2908c <gpio_pin_set.constprop.0+0x12>

00029098 <SX1276GetBoardTcxoWakeupTime>:
}
   29098:	2000      	movs	r0, #0
   2909a:	4770      	bx	lr

0002909c <SX1276SetAntSwLowPower>:
}
   2909c:	4770      	bx	lr

0002909e <SX1276SetBoardTcxo>:
}
   2909e:	4770      	bx	lr

000290a0 <SX1276SetAntSw>:
   290a0:	4770      	bx	lr

000290a2 <SX1276Write>:
{
   290a2:	b507      	push	{r0, r1, r2, lr}
    SX1276WriteBuffer( addr, &data, 1 );
   290a4:	2201      	movs	r2, #1
{
   290a6:	f88d 1007 	strb.w	r1, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
   290aa:	f10d 0107 	add.w	r1, sp, #7
   290ae:	f7f5 faaf 	bl	1e610 <SX1276WriteBuffer>
}
   290b2:	b003      	add	sp, #12
   290b4:	f85d fb04 	ldr.w	pc, [sp], #4

000290b8 <SX1276Read>:
{
   290b8:	b507      	push	{r0, r1, r2, lr}
    SX1276ReadBuffer( addr, &data, 1 );
   290ba:	2201      	movs	r2, #1
   290bc:	f10d 0107 	add.w	r1, sp, #7
   290c0:	f7f5 f9a6 	bl	1e410 <SX1276ReadBuffer>
}
   290c4:	f89d 0007 	ldrb.w	r0, [sp, #7]
   290c8:	b003      	add	sp, #12
   290ca:	f85d fb04 	ldr.w	pc, [sp], #4

000290ce <SX1276SetOpMode>:
{
   290ce:	b510      	push	{r4, lr}
    if( opMode == RF_OPMODE_SLEEP )
   290d0:	4604      	mov	r4, r0
        SX1276SetAntSwLowPower( true );
   290d2:	2001      	movs	r0, #1
    if( opMode == RF_OPMODE_SLEEP )
   290d4:	b964      	cbnz	r4, 290f0 <SX1276SetOpMode+0x22>
        SX1276SetAntSwLowPower( true );
   290d6:	f7ff ffe1 	bl	2909c <SX1276SetAntSwLowPower>
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
   290da:	2001      	movs	r0, #1
   290dc:	f7ff ffec 	bl	290b8 <SX1276Read>
   290e0:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
   290e4:	4321      	orrs	r1, r4
   290e6:	2001      	movs	r0, #1
}
   290e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
   290ec:	f7ff bfd9 	b.w	290a2 <SX1276Write>
        SX1276SetBoardTcxo( true );
   290f0:	f7ff ffd5 	bl	2909e <SX1276SetBoardTcxo>
        SX1276SetAntSwLowPower( false );
   290f4:	2000      	movs	r0, #0
   290f6:	f7ff ffd1 	bl	2909c <SX1276SetAntSwLowPower>
        SX1276SetAntSw( opMode );
   290fa:	4620      	mov	r0, r4
   290fc:	f7ff ffd0 	bl	290a0 <SX1276SetAntSw>
   29100:	e7eb      	b.n	290da <SX1276SetOpMode+0xc>

00029102 <SX1276IsChannelFree>:
{
   29102:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29104:	4604      	mov	r4, r0
   29106:	460e      	mov	r6, r1
   29108:	4617      	mov	r7, r2
   2910a:	461d      	mov	r5, r3
    SX1276SetSleep( );
   2910c:	f7f5 fb74 	bl	1e7f8 <SX1276SetSleep>
    SX1276SetModem( modem );
   29110:	4620      	mov	r0, r4
   29112:	f7f5 fd0d 	bl	1eb30 <SX1276SetModem>
    SX1276SetChannel( freq );
   29116:	4630      	mov	r0, r6
   29118:	f7d9 f94e 	bl	23b8 <SX1276SetChannel>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
   2911c:	2005      	movs	r0, #5
   2911e:	f7ff ffd6 	bl	290ce <SX1276SetOpMode>
    DelayMs( 1 );
   29122:	2001      	movs	r0, #1
   29124:	f000 f887 	bl	29236 <DelayMs>
    carrierSenseTime = TimerGetCurrentTime( );
   29128:	f000 f86f 	bl	2920a <TimerGetCurrentTime>
   2912c:	4606      	mov	r6, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
   2912e:	4630      	mov	r0, r6
   29130:	f000 f872 	bl	29218 <TimerGetElapsedTime>
   29134:	42a8      	cmp	r0, r5
   29136:	d304      	bcc.n	29142 <SX1276IsChannelFree+0x40>
    bool status = true;
   29138:	2401      	movs	r4, #1
    SX1276SetSleep( );
   2913a:	f7f5 fb5d 	bl	1e7f8 <SX1276SetSleep>
}
   2913e:	4620      	mov	r0, r4
   29140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rssi = SX1276ReadRssi( modem );
   29142:	4620      	mov	r0, r4
   29144:	f7f5 fb34 	bl	1e7b0 <SX1276ReadRssi>
        if( rssi > rssiThresh )
   29148:	42b8      	cmp	r0, r7
   2914a:	ddf0      	ble.n	2912e <SX1276IsChannelFree+0x2c>
            status = false;
   2914c:	2400      	movs	r4, #0
   2914e:	e7f4      	b.n	2913a <SX1276IsChannelFree+0x38>

00029150 <SX1276Random>:
{
   29150:	b538      	push	{r3, r4, r5, lr}
    SX1276SetModem( MODEM_LORA );
   29152:	2001      	movs	r0, #1
   29154:	f7f5 fcec 	bl	1eb30 <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
   29158:	21ff      	movs	r1, #255	; 0xff
   2915a:	2011      	movs	r0, #17
   2915c:	f7ff ffa1 	bl	290a2 <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
   29160:	2005      	movs	r0, #5
   29162:	f7ff ffb4 	bl	290ce <SX1276SetOpMode>
   29166:	2400      	movs	r4, #0
    uint32_t rnd = 0;
   29168:	4625      	mov	r5, r4
        DelayMs( 1 );
   2916a:	2001      	movs	r0, #1
   2916c:	f000 f863 	bl	29236 <DelayMs>
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
   29170:	202c      	movs	r0, #44	; 0x2c
   29172:	f7ff ffa1 	bl	290b8 <SX1276Read>
   29176:	f000 0001 	and.w	r0, r0, #1
   2917a:	40a0      	lsls	r0, r4
   2917c:	3401      	adds	r4, #1
    for( i = 0; i < 32; i++ )
   2917e:	2c20      	cmp	r4, #32
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
   29180:	ea45 0500 	orr.w	r5, r5, r0
    for( i = 0; i < 32; i++ )
   29184:	d1f1      	bne.n	2916a <SX1276Random+0x1a>
    SX1276SetSleep( );
   29186:	f7f5 fb37 	bl	1e7f8 <SX1276SetSleep>
}
   2918a:	4628      	mov	r0, r5
   2918c:	bd38      	pop	{r3, r4, r5, pc}

0002918e <SX1276WriteFifo>:
{
   2918e:	460a      	mov	r2, r1
    SX1276WriteBuffer( 0, buffer, size );
   29190:	4601      	mov	r1, r0
   29192:	2000      	movs	r0, #0
   29194:	f7f5 ba3c 	b.w	1e610 <SX1276WriteBuffer>

00029198 <SX1276ReadFifo>:
{
   29198:	460a      	mov	r2, r1
    SX1276ReadBuffer( 0, buffer, size );
   2919a:	4601      	mov	r1, r0
   2919c:	2000      	movs	r0, #0
   2919e:	f7f5 b937 	b.w	1e410 <SX1276ReadBuffer>

000291a2 <SX1276GetWakeupTime>:
{
   291a2:	b508      	push	{r3, lr}
    return SX1276GetBoardTcxoWakeupTime( ) + RADIO_WAKEUP_TIME;
   291a4:	f7ff ff78 	bl	29098 <SX1276GetBoardTcxoWakeupTime>
}
   291a8:	3001      	adds	r0, #1
   291aa:	bd08      	pop	{r3, pc}

000291ac <TimerSetTimeout>:
    // Intentional wrap around. Works Ok if tick duration below 1ms
    return RtcTick2Ms( nowInTicks - pastInTicks );
}

static void TimerSetTimeout( TimerEvent_t *obj )
{
   291ac:	b570      	push	{r4, r5, r6, lr}
   291ae:	4604      	mov	r4, r0
    int32_t minTicks= RtcGetMinimumTimeout( );
   291b0:	f7ff ff12 	bl	28fd8 <RtcGetMinimumTimeout>
    obj->IsNext2Expire = true;
   291b4:	2301      	movs	r3, #1
   291b6:	7263      	strb	r3, [r4, #9]

    // In case deadline too soon
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
   291b8:	6826      	ldr	r6, [r4, #0]
    int32_t minTicks= RtcGetMinimumTimeout( );
   291ba:	4605      	mov	r5, r0
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
   291bc:	f7f4 fe7c 	bl	1deb8 <RtcGetTimerElapsedTime>
   291c0:	4428      	add	r0, r5
   291c2:	4286      	cmp	r6, r0
   291c4:	d203      	bcs.n	291ce <TimerSetTimeout+0x22>
    {
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
   291c6:	f7f4 fe77 	bl	1deb8 <RtcGetTimerElapsedTime>
   291ca:	4405      	add	r5, r0
   291cc:	6025      	str	r5, [r4, #0]
    }
    RtcSetAlarm( obj->Timestamp );
   291ce:	6820      	ldr	r0, [r4, #0]
}
   291d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    RtcSetAlarm( obj->Timestamp );
   291d4:	f7f4 be80 	b.w	1ded8 <RtcSetAlarm>

000291d8 <TimerInit>:
    obj->Timestamp = 0;
   291d8:	2300      	movs	r3, #0
    obj->ReloadValue = 0;
   291da:	e9c0 3300 	strd	r3, r3, [r0]
    obj->Context = NULL;
   291de:	e9c0 1303 	strd	r1, r3, [r0, #12]
    obj->IsStarted = false;
   291e2:	8103      	strh	r3, [r0, #8]
    obj->Next = NULL;
   291e4:	6143      	str	r3, [r0, #20]
}
   291e6:	4770      	bx	lr

000291e8 <TimerSetValue>:
{
   291e8:	b538      	push	{r3, r4, r5, lr}
   291ea:	4605      	mov	r5, r0
    uint32_t ticks = RtcMs2Tick( value );
   291ec:	4608      	mov	r0, r1
   291ee:	f7ff ff08 	bl	29002 <RtcMs2Tick>
   291f2:	4604      	mov	r4, r0
    TimerStop( obj );
   291f4:	4628      	mov	r0, r5
   291f6:	f7f6 f8cb 	bl	1f390 <TimerStop>
    minValue = RtcGetMinimumTimeout( );
   291fa:	f7ff feed 	bl	28fd8 <RtcGetMinimumTimeout>
    if( ticks < minValue )
   291fe:	42a0      	cmp	r0, r4
   29200:	bf38      	it	cc
   29202:	4620      	movcc	r0, r4
    obj->ReloadValue = ticks;
   29204:	e9c5 0000 	strd	r0, r0, [r5]
}
   29208:	bd38      	pop	{r3, r4, r5, pc}

0002920a <TimerGetCurrentTime>:
{
   2920a:	b508      	push	{r3, lr}
    uint32_t now = RtcGetTimerValue( );
   2920c:	f7ff fee0 	bl	28fd0 <RtcGetTimerValue>
}
   29210:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return  RtcTick2Ms( now );
   29214:	f7ff bef6 	b.w	29004 <RtcTick2Ms>

00029218 <TimerGetElapsedTime>:
{
   29218:	b538      	push	{r3, r4, r5, lr}
    if ( past == 0 )
   2921a:	4604      	mov	r4, r0
   2921c:	b150      	cbz	r0, 29234 <TimerGetElapsedTime+0x1c>
    uint32_t nowInTicks = RtcGetTimerValue( );
   2921e:	f7ff fed7 	bl	28fd0 <RtcGetTimerValue>
   29222:	4605      	mov	r5, r0
    uint32_t pastInTicks = RtcMs2Tick( past );
   29224:	4620      	mov	r0, r4
   29226:	f7ff feec 	bl	29002 <RtcMs2Tick>
    return RtcTick2Ms( nowInTicks - pastInTicks );
   2922a:	1a28      	subs	r0, r5, r0
}
   2922c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return RtcTick2Ms( nowInTicks - pastInTicks );
   29230:	f7ff bee8 	b.w	29004 <RtcTick2Ms>
}
   29234:	bd38      	pop	{r3, r4, r5, pc}

00029236 <DelayMs>:
    DelayMs( s * 1000.0f );
}

void DelayMs( uint32_t ms )
{
    DelayMsMcu( ms );
   29236:	f7ff bed1 	b.w	28fdc <DelayMsMcu>

0002923a <memcpy1>:
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
}

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
   2923a:	3801      	subs	r0, #1
   2923c:	440a      	add	r2, r1
   2923e:	4291      	cmp	r1, r2
   29240:	d100      	bne.n	29244 <memcpy1+0xa>
    {
        *dst++ = *src++;
    }
}
   29242:	4770      	bx	lr
        *dst++ = *src++;
   29244:	f811 3b01 	ldrb.w	r3, [r1], #1
   29248:	f800 3f01 	strb.w	r3, [r0, #1]!
   2924c:	e7f7      	b.n	2923e <memcpy1+0x4>

0002924e <uart_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   2924e:	6902      	ldr	r2, [r0, #16]
{
   29250:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   29252:	e892 0003 	ldmia.w	r2, {r0, r1}
   29256:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2925a:	2000      	movs	r0, #0
   2925c:	4770      	bx	lr

0002925e <arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   2925e:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   29262:	b923      	cbnz	r3, 2926e <arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   29264:	f3ef 8014 	mrs	r0, CONTROL
	return (value & CONTROL_nPRIV_Msk) ? true : false;
   29268:	f000 0001 	and.w	r0, r0, #1
   2926c:	4770      	bx	lr
		return false;
   2926e:	2000      	movs	r0, #0
}
   29270:	4770      	bx	lr

00029272 <z_obj_validation_check.constprop.0>:
static inline int z_obj_validation_check(struct z_object *ko,
   29272:	b570      	push	{r4, r5, r6, lr}
	ret = z_object_validate(ko, otype, init);
   29274:	2200      	movs	r2, #0
static inline int z_obj_validation_check(struct z_object *ko,
   29276:	460d      	mov	r5, r1
	ret = z_object_validate(ko, otype, init);
   29278:	212b      	movs	r1, #43	; 0x2b
static inline int z_obj_validation_check(struct z_object *ko,
   2927a:	4606      	mov	r6, r0
	ret = z_object_validate(ko, otype, init);
   2927c:	f7fa ff3e 	bl	240fc <z_object_validate>
	if (ret != 0) {
   29280:	4604      	mov	r4, r0
   29282:	b120      	cbz	r0, 2928e <z_obj_validation_check.constprop.0+0x1c>
		z_dump_object_error(ret, obj, ko, otype);
   29284:	232b      	movs	r3, #43	; 0x2b
   29286:	4632      	mov	r2, r6
   29288:	4629      	mov	r1, r5
   2928a:	f7fa fe3f 	bl	23f0c <z_dump_object_error>
}
   2928e:	4620      	mov	r0, r4
   29290:	bd70      	pop	{r4, r5, r6, pc}

00029292 <arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   29292:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   29296:	b923      	cbnz	r3, 292a2 <arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   29298:	f3ef 8014 	mrs	r0, CONTROL
	return (value & CONTROL_nPRIV_Msk) ? true : false;
   2929c:	f000 0001 	and.w	r0, r0, #1
   292a0:	4770      	bx	lr
		return false;
   292a2:	2000      	movs	r0, #0
}
   292a4:	4770      	bx	lr

000292a6 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   292a6:	4700      	bx	r0

000292a8 <nrfx_busy_wait>:
}

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   292a8:	e92d 0140 	stmdb	sp!, {r6, r8}
   292ac:	4603      	mov	r3, r0
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   292ae:	f3ef 8205 	mrs	r2, IPSR
	if (value) {
   292b2:	b942      	cbnz	r2, 292c6 <nrfx_busy_wait+0x1e>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   292b4:	f3ef 8214 	mrs	r2, CONTROL
	if (z_syscall_trap()) {
   292b8:	07d2      	lsls	r2, r2, #31
   292ba:	d504      	bpl.n	292c6 <nrfx_busy_wait+0x1e>
	register uint32_t r6 __asm__("r6") = call_id;
   292bc:	266f      	movs	r6, #111	; 0x6f
	__asm__ volatile("svc %[svid]\n"
   292be:	df03      	svc	3
	k_busy_wait(usec_to_wait);
}
   292c0:	e8bd 0140 	ldmia.w	sp!, {r6, r8}
   292c4:	4770      	bx	lr
   292c6:	e8bd 0140 	ldmia.w	sp!, {r6, r8}
	z_impl_k_busy_wait(usec_to_wait);
   292ca:	4618      	mov	r0, r3
   292cc:	f000 bbf3 	b.w	29ab6 <z_impl_k_busy_wait>

000292d0 <nrfx_clock_enable>:
{
   292d0:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   292d2:	2000      	movs	r0, #0
   292d4:	f7dc feac 	bl	6030 <arch_irq_is_enabled>
   292d8:	b918      	cbnz	r0, 292e2 <nrfx_clock_enable+0x12>
}
   292da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   292de:	f7dc be83 	b.w	5fe8 <arch_irq_enable>
   292e2:	bd08      	pop	{r3, pc}

000292e4 <nrf_gpio_pin_set>:
{
   292e4:	b507      	push	{r0, r1, r2, lr}
   292e6:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   292e8:	a801      	add	r0, sp, #4
   292ea:	f7f7 f851 	bl	20390 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   292ee:	9a01      	ldr	r2, [sp, #4]
   292f0:	2301      	movs	r3, #1
   292f2:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   292f4:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   292f8:	b003      	add	sp, #12
   292fa:	f85d fb04 	ldr.w	pc, [sp], #4

000292fe <nrf_gpio_pin_clear>:
{
   292fe:	b507      	push	{r0, r1, r2, lr}
   29300:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   29302:	a801      	add	r0, sp, #4
   29304:	f7f7 f844 	bl	20390 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   29308:	9a01      	ldr	r2, [sp, #4]
   2930a:	2301      	movs	r3, #1
   2930c:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   2930e:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
   29312:	b003      	add	sp, #12
   29314:	f85d fb04 	ldr.w	pc, [sp], #4

00029318 <transfer_byte>:
{
   29318:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return p_reg->RXD;
   2931a:	f8d0 3518 	ldr.w	r3, [r0, #1304]	; 0x518
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   2931e:	698a      	ldr	r2, [r1, #24]
   29320:	b2db      	uxtb	r3, r3
    volatile uint8_t rx_data = nrf_spi_rxd_get(p_spi);
   29322:	f88d 3007 	strb.w	r3, [sp, #7]
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   29326:	6a0b      	ldr	r3, [r1, #32]
   29328:	4293      	cmp	r3, r2
        p_cb->evt.xfer_desc.p_rx_buffer[p_cb->bytes_transferred] = rx_data;
   2932a:	bf3e      	ittt	cc
   2932c:	694a      	ldrcc	r2, [r1, #20]
   2932e:	f89d 4007 	ldrbcc.w	r4, [sp, #7]
   29332:	54d4      	strbcc	r4, [r2, r3]
    ++p_cb->bytes_transferred;
   29334:	6a0a      	ldr	r2, [r1, #32]
    if (p_cb->abort)
   29336:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
    ++p_cb->bytes_transferred;
   2933a:	1c53      	adds	r3, r2, #1
   2933c:	620b      	str	r3, [r1, #32]
    size_t bytes_used = p_cb->bytes_transferred + 1;
   2933e:	3202      	adds	r2, #2
    if (p_cb->abort)
   29340:	b13c      	cbz	r4, 29352 <transfer_byte+0x3a>
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   29342:	690c      	ldr	r4, [r1, #16]
   29344:	42a2      	cmp	r2, r4
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   29346:	698c      	ldr	r4, [r1, #24]
            p_cb->evt.xfer_desc.tx_length = bytes_used;
   29348:	bf38      	it	cc
   2934a:	610a      	strcc	r2, [r1, #16]
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   2934c:	4294      	cmp	r4, r2
            p_cb->evt.xfer_desc.rx_length = bytes_used;
   2934e:	bf88      	it	hi
   29350:	618a      	strhi	r2, [r1, #24]
    if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   29352:	690d      	ldr	r5, [r1, #16]
   29354:	4295      	cmp	r5, r2
   29356:	d905      	bls.n	29364 <transfer_byte+0x4c>
        nrf_spi_txd_set(p_spi, p_cb->evt.xfer_desc.p_tx_buffer[bytes_used]);
   29358:	68cb      	ldr	r3, [r1, #12]
    p_reg->TXD = data;
   2935a:	5c9b      	ldrb	r3, [r3, r2]
   2935c:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   29360:	2001      	movs	r0, #1
   29362:	e00a      	b.n	2937a <transfer_byte+0x62>
    else if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   29364:	698c      	ldr	r4, [r1, #24]
   29366:	4294      	cmp	r4, r2
   29368:	d901      	bls.n	2936e <transfer_byte+0x56>
   2936a:	7fcb      	ldrb	r3, [r1, #31]
   2936c:	e7f6      	b.n	2935c <transfer_byte+0x44>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   2936e:	42ab      	cmp	r3, r5
   29370:	d3f6      	bcc.n	29360 <transfer_byte+0x48>
   29372:	42a3      	cmp	r3, r4
   29374:	bf2c      	ite	cs
   29376:	2000      	movcs	r0, #0
   29378:	2001      	movcc	r0, #1
}
   2937a:	b003      	add	sp, #12
   2937c:	bd30      	pop	{r4, r5, pc}

0002937e <z_device_ready>:
	return __device_end - __device_start;
}

bool z_device_ready(const struct device *dev)
{
	return dev->state->initialized && (dev->state->init_res == 0U);
   2937e:	68c3      	ldr	r3, [r0, #12]
   29380:	8818      	ldrh	r0, [r3, #0]
   29382:	f3c0 0008 	ubfx	r0, r0, #0, #9
}
   29386:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   2938a:	4258      	negs	r0, r3
   2938c:	4158      	adcs	r0, r3
   2938e:	4770      	bx	lr

00029390 <arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   29390:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   29394:	b923      	cbnz	r3, 293a0 <arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   29396:	f3ef 8014 	mrs	r0, CONTROL
	return (value & CONTROL_nPRIV_Msk) ? true : false;
   2939a:	f000 0001 	and.w	r0, r0, #1
   2939e:	4770      	bx	lr
		return false;
   293a0:	2000      	movs	r0, #0
}
   293a2:	4770      	bx	lr

000293a4 <arch_system_halt>:
	__asm__ volatile(
   293a4:	f04f 0220 	mov.w	r2, #32
   293a8:	f3ef 8311 	mrs	r3, BASEPRI
   293ac:	f382 8811 	msr	BASEPRI, r2
   293b0:	f3bf 8f6f 	isb	sy
	for (;;) {
   293b4:	e7fe      	b.n	293b4 <arch_system_halt+0x10>

000293b6 <z_pm_save_idle_exit>:
{
   293b6:	b508      	push	{r3, lr}
	pm_system_resume();
   293b8:	f7db ffa8 	bl	530c <pm_system_resume>
}
   293bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   293c0:	f7fc ba0e 	b.w	257e0 <sys_clock_idle_exit>

000293c4 <k_heap_init>:
{
   293c4:	b410      	push	{r4}
   293c6:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   293ca:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   293ce:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   293d0:	f7fb bc68 	b.w	24ca4 <sys_heap_init>

000293d4 <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   293d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   293d8:	b087      	sub	sp, #28
   293da:	4604      	mov	r4, r0
   293dc:	460e      	mov	r6, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   293de:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
{
   293e2:	4617      	mov	r7, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   293e4:	f000 fcb0 	bl	29d48 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   293e8:	f104 0914 	add.w	r9, r4, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   293ec:	4605      	mov	r5, r0
   293ee:	4688      	mov	r8, r1
   293f0:	f04f 0320 	mov.w	r3, #32
   293f4:	f3ef 8b11 	mrs	fp, BASEPRI
   293f8:	f383 8811 	msr	BASEPRI, r3
   293fc:	f3bf 8f6f 	isb	sy
		now = sys_clock_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   29400:	f104 0a0c 	add.w	sl, r4, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   29404:	463a      	mov	r2, r7
   29406:	4631      	mov	r1, r6
   29408:	4620      	mov	r0, r4
   2940a:	f7fb fbd0 	bl	24bae <sys_heap_aligned_alloc>
   2940e:	9005      	str	r0, [sp, #20]
		now = sys_clock_tick_get();
   29410:	f7f9 fe0c 	bl	2302c <sys_clock_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   29414:	9b05      	ldr	r3, [sp, #20]
   29416:	b13b      	cbz	r3, 29428 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   29418:	f38b 8811 	msr	BASEPRI, fp
   2941c:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   29420:	4618      	mov	r0, r3
   29422:	b007      	add	sp, #28
   29424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   29428:	1a2a      	subs	r2, r5, r0
   2942a:	9202      	str	r2, [sp, #8]
   2942c:	eb68 0201 	sbc.w	r2, r8, r1
   29430:	9203      	str	r2, [sp, #12]
   29432:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   29436:	2901      	cmp	r1, #1
   29438:	f172 0200 	sbcs.w	r2, r2, #0
   2943c:	dbec      	blt.n	29418 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2943e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   29442:	4659      	mov	r1, fp
   29444:	e9cd 2300 	strd	r2, r3, [sp]
   29448:	4648      	mov	r0, r9
   2944a:	4652      	mov	r2, sl
   2944c:	f7f8 f828 	bl	214a0 <z_pend_curr>
	__asm__ volatile(
   29450:	f04f 0320 	mov.w	r3, #32
   29454:	f3ef 8b11 	mrs	fp, BASEPRI
   29458:	f383 8811 	msr	BASEPRI, r3
   2945c:	f3bf 8f6f 	isb	sy
   29460:	e7d0      	b.n	29404 <k_heap_aligned_alloc+0x30>

00029462 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   29462:	b538      	push	{r3, r4, r5, lr}
   29464:	4604      	mov	r4, r0
   29466:	f04f 0320 	mov.w	r3, #32
   2946a:	f3ef 8511 	mrs	r5, BASEPRI
   2946e:	f383 8811 	msr	BASEPRI, r3
   29472:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   29476:	f7fb fb4d 	bl	24b14 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   2947a:	f104 000c 	add.w	r0, r4, #12
   2947e:	f000 fa83 	bl	29988 <z_unpend_all>
   29482:	b130      	cbz	r0, 29492 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   29484:	4629      	mov	r1, r5
   29486:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   2948a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   2948e:	f7f7 bf85 	b.w	2139c <z_reschedule>
	__asm__ volatile(
   29492:	f385 8811 	msr	BASEPRI, r5
   29496:	f3bf 8f6f 	isb	sy
}
   2949a:	bd38      	pop	{r3, r4, r5, pc}

0002949c <k_mem_slab_init>:
{
   2949c:	b538      	push	{r3, r4, r5, lr}
	slab->num_used = 0U;
   2949e:	2400      	movs	r4, #0
   294a0:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   294a2:	ea41 0402 	orr.w	r4, r1, r2
   294a6:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   294aa:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   294ae:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   294b0:	d10e      	bne.n	294d0 <k_mem_slab_init+0x34>
	slab->free_list = NULL;
   294b2:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   294b4:	42a3      	cmp	r3, r4
   294b6:	d105      	bne.n	294c4 <k_mem_slab_init+0x28>
   294b8:	e9c0 0000 	strd	r0, r0, [r0]
	z_object_init(slab);
   294bc:	f000 ff53 	bl	2a366 <z_object_init>
   294c0:	2000      	movs	r0, #0
}
   294c2:	bd38      	pop	{r3, r4, r5, pc}
		*(char **)p = slab->free_list;
   294c4:	6945      	ldr	r5, [r0, #20]
   294c6:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   294c8:	3401      	adds	r4, #1
		slab->free_list = p;
   294ca:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   294cc:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   294ce:	e7f1      	b.n	294b4 <k_mem_slab_init+0x18>
		return -EINVAL;
   294d0:	f06f 0015 	mvn.w	r0, #21
	return rc;
   294d4:	e7f5      	b.n	294c2 <k_mem_slab_init+0x26>

000294d6 <arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   294d6:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   294da:	b923      	cbnz	r3, 294e6 <arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   294dc:	f3ef 8014 	mrs	r0, CONTROL
	return (value & CONTROL_nPRIV_Msk) ? true : false;
   294e0:	f000 0001 	and.w	r0, r0, #1
   294e4:	4770      	bx	lr
		return false;
   294e6:	2000      	movs	r0, #0
}
   294e8:	4770      	bx	lr

000294ea <z_obj_validation_check.constprop.0>:
static inline int z_obj_validation_check(struct z_object *ko,
   294ea:	b570      	push	{r4, r5, r6, lr}
   294ec:	460d      	mov	r5, r1
	ret = z_object_validate(ko, otype, init);
   294ee:	2103      	movs	r1, #3
static inline int z_obj_validation_check(struct z_object *ko,
   294f0:	4606      	mov	r6, r0
	ret = z_object_validate(ko, otype, init);
   294f2:	f7fa fe03 	bl	240fc <z_object_validate>
	if (ret != 0) {
   294f6:	4604      	mov	r4, r0
   294f8:	b120      	cbz	r0, 29504 <z_obj_validation_check.constprop.0+0x1a>
		z_dump_object_error(ret, obj, ko, otype);
   294fa:	2303      	movs	r3, #3
   294fc:	4632      	mov	r2, r6
   294fe:	4629      	mov	r1, r5
   29500:	f7fa fd04 	bl	23f0c <z_dump_object_error>
}
   29504:	4620      	mov	r0, r4
   29506:	bd70      	pop	{r4, r5, r6, pc}

00029508 <z_impl_k_mutex_init>:
{
   29508:	b510      	push	{r4, lr}
	mutex->owner = NULL;
   2950a:	2400      	movs	r4, #0
	mutex->lock_count = 0U;
   2950c:	e9c0 4402 	strd	r4, r4, [r0, #8]
   29510:	e9c0 0000 	strd	r0, r0, [r0]
	z_object_init(mutex);
   29514:	f000 ff27 	bl	2a366 <z_object_init>
}
   29518:	4620      	mov	r0, r4
   2951a:	bd10      	pop	{r4, pc}

0002951c <arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   2951c:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   29520:	b923      	cbnz	r3, 2952c <arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   29522:	f3ef 8014 	mrs	r0, CONTROL
	return (value & CONTROL_nPRIV_Msk) ? true : false;
   29526:	f000 0001 	and.w	r0, r0, #1
   2952a:	4770      	bx	lr
		return false;
   2952c:	2000      	movs	r0, #0
}
   2952e:	4770      	bx	lr

00029530 <z_obj_validation_check.constprop.0>:
static inline int z_obj_validation_check(struct z_object *ko,
   29530:	b570      	push	{r4, r5, r6, lr}
   29532:	460d      	mov	r5, r1
	ret = z_object_validate(ko, otype, init);
   29534:	2105      	movs	r1, #5
static inline int z_obj_validation_check(struct z_object *ko,
   29536:	4606      	mov	r6, r0
	ret = z_object_validate(ko, otype, init);
   29538:	f7fa fde0 	bl	240fc <z_object_validate>
	if (ret != 0) {
   2953c:	4604      	mov	r4, r0
   2953e:	b120      	cbz	r0, 2954a <z_obj_validation_check.constprop.0+0x1a>
		z_dump_object_error(ret, obj, ko, otype);
   29540:	2305      	movs	r3, #5
   29542:	4632      	mov	r2, r6
   29544:	4629      	mov	r1, r5
   29546:	f7fa fce1 	bl	23f0c <z_dump_object_error>
}
   2954a:	4620      	mov	r0, r4
   2954c:	bd70      	pop	{r4, r5, r6, pc}

0002954e <queue_insert>:
{
   2954e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   29552:	4699      	mov	r9, r3
   29554:	4604      	mov	r4, r0
   29556:	f89d 3020 	ldrb.w	r3, [sp, #32]
   2955a:	460d      	mov	r5, r1
   2955c:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2955e:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   29562:	f04f 0220 	mov.w	r2, #32
   29566:	f3ef 8711 	mrs	r7, BASEPRI
   2956a:	f382 8811 	msr	BASEPRI, r2
   2956e:	f3bf 8f6f 	isb	sy
	if (is_append) {
   29572:	b103      	cbz	r3, 29576 <queue_insert+0x28>
		prev = sys_sflist_peek_tail(&queue->data_q);
   29574:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   29576:	4630      	mov	r0, r6
   29578:	f000 f9ee 	bl	29958 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   2957c:	b160      	cbz	r0, 29598 <queue_insert+0x4a>
   2957e:	2400      	movs	r4, #0
   29580:	f8c0 4090 	str.w	r4, [r0, #144]	; 0x90
	thread->base.swap_data = data;
   29584:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   29588:	f000 f99f 	bl	298ca <z_ready_thread>
	z_reschedule(&queue->lock, key);
   2958c:	4630      	mov	r0, r6
   2958e:	4639      	mov	r1, r7
   29590:	f7f7 ff04 	bl	2139c <z_reschedule>
	return 0;
   29594:	2000      	movs	r0, #0
   29596:	e00c      	b.n	295b2 <queue_insert+0x64>
	if (alloc) {
   29598:	f1b9 0f00 	cmp.w	r9, #0
   2959c:	d01b      	beq.n	295d6 <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
   2959e:	2108      	movs	r1, #8
   295a0:	f7fa fb16 	bl	23bd0 <z_thread_aligned_alloc>
		if (anode == NULL) {
   295a4:	b938      	cbnz	r0, 295b6 <queue_insert+0x68>
	__asm__ volatile(
   295a6:	f387 8811 	msr	BASEPRI, r7
   295aa:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   295ae:	f06f 000b 	mvn.w	r0, #11
}
   295b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   295b6:	2301      	movs	r3, #1
		anode->data = data;
   295b8:	f8c0 8004 	str.w	r8, [r0, #4]
   295bc:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   295be:	6803      	ldr	r3, [r0, #0]
   295c0:	f003 0203 	and.w	r2, r3, #3
   295c4:	b95d      	cbnz	r5, 295de <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
   295c6:	6823      	ldr	r3, [r4, #0]
   295c8:	4313      	orrs	r3, r2
   295ca:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   295cc:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   295ce:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   295d0:	b973      	cbnz	r3, 295f0 <queue_insert+0xa2>
	list->tail = node;
   295d2:	6060      	str	r0, [r4, #4]
}
   295d4:	e00c      	b.n	295f0 <queue_insert+0xa2>
	node->next_and_flags = flags;
   295d6:	f8c8 9000 	str.w	r9, [r8]
}
   295da:	4640      	mov	r0, r8
   295dc:	e7ef      	b.n	295be <queue_insert+0x70>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   295de:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   295e0:	f033 0303 	bics.w	r3, r3, #3
   295e4:	d110      	bne.n	29608 <queue_insert+0xba>
	parent->next_and_flags = cur_flags | (unative_t)child;
   295e6:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   295e8:	6862      	ldr	r2, [r4, #4]
   295ea:	b93a      	cbnz	r2, 295fc <queue_insert+0xae>
	list->head = node;
   295ec:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   295f0:	2104      	movs	r1, #4
   295f2:	f104 0010 	add.w	r0, r4, #16
   295f6:	f000 fd6c 	bl	2a0d2 <z_handle_obj_poll_events>
   295fa:	e7c7      	b.n	2958c <queue_insert+0x3e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   295fc:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   295fe:	f003 0303 	and.w	r3, r3, #3
   29602:	4303      	orrs	r3, r0
   29604:	6013      	str	r3, [r2, #0]
   29606:	e7e4      	b.n	295d2 <queue_insert+0x84>
   29608:	4313      	orrs	r3, r2
   2960a:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2960c:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2960e:	f003 0303 	and.w	r3, r3, #3
   29612:	4303      	orrs	r3, r0
   29614:	602b      	str	r3, [r5, #0]
}
   29616:	e7eb      	b.n	295f0 <queue_insert+0xa2>

00029618 <z_queue_node_peek>:
{
   29618:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2961a:	4604      	mov	r4, r0
   2961c:	b130      	cbz	r0, 2962c <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2961e:	6802      	ldr	r2, [r0, #0]
   29620:	0793      	lsls	r3, r2, #30
   29622:	d003      	beq.n	2962c <z_queue_node_peek+0x14>
		ret = anode->data;
   29624:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   29626:	b109      	cbz	r1, 2962c <z_queue_node_peek+0x14>
			k_free(anode);
   29628:	f000 fd67 	bl	2a0fa <k_free>
}
   2962c:	4620      	mov	r0, r4
   2962e:	bd10      	pop	{r4, pc}

00029630 <z_impl_k_queue_init>:
	list->head = NULL;
   29630:	2200      	movs	r2, #0
	list->tail = NULL;
   29632:	e9c0 2200 	strd	r2, r2, [r0]
   29636:	f100 0208 	add.w	r2, r0, #8
   2963a:	e9c0 2202 	strd	r2, r2, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   2963e:	f100 0210 	add.w	r2, r0, #16
   29642:	e9c0 2204 	strd	r2, r2, [r0, #16]
	z_object_init(queue);
   29646:	f000 be8e 	b.w	2a366 <z_object_init>

0002964a <z_impl_k_queue_cancel_wait>:
{
   2964a:	b570      	push	{r4, r5, r6, lr}
   2964c:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2964e:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   29652:	f04f 0320 	mov.w	r3, #32
   29656:	f3ef 8611 	mrs	r6, BASEPRI
   2965a:	f383 8811 	msr	BASEPRI, r3
   2965e:	f3bf 8f6f 	isb	sy
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   29662:	4628      	mov	r0, r5
   29664:	f000 f978 	bl	29958 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   29668:	b128      	cbz	r0, 29676 <z_impl_k_queue_cancel_wait+0x2c>
   2966a:	2200      	movs	r2, #0
   2966c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
	thread->base.swap_data = data;
   29670:	6142      	str	r2, [r0, #20]
	z_ready_thread(thread);
   29672:	f000 f92a 	bl	298ca <z_ready_thread>
	z_handle_obj_poll_events(&queue->poll_events, state);
   29676:	f104 0010 	add.w	r0, r4, #16
   2967a:	2108      	movs	r1, #8
   2967c:	f000 fd29 	bl	2a0d2 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   29680:	4631      	mov	r1, r6
   29682:	4628      	mov	r0, r5
}
   29684:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&queue->lock, key);
   29688:	f7f7 be88 	b.w	2139c <z_reschedule>

0002968c <k_queue_append>:
{
   2968c:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   2968e:	2301      	movs	r3, #1
   29690:	9300      	str	r3, [sp, #0]
   29692:	2300      	movs	r3, #0
{
   29694:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   29696:	4619      	mov	r1, r3
   29698:	f7ff ff59 	bl	2954e <queue_insert>
}
   2969c:	b003      	add	sp, #12
   2969e:	f85d fb04 	ldr.w	pc, [sp], #4

000296a2 <k_queue_prepend>:
{
   296a2:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   296a4:	2300      	movs	r3, #0
{
   296a6:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   296a8:	9300      	str	r3, [sp, #0]
   296aa:	4619      	mov	r1, r3
   296ac:	f7ff ff4f 	bl	2954e <queue_insert>
}
   296b0:	b003      	add	sp, #12
   296b2:	f85d fb04 	ldr.w	pc, [sp], #4

000296b6 <z_impl_k_queue_alloc_append>:
{
   296b6:	b507      	push	{r0, r1, r2, lr}
	return queue_insert(queue, NULL, data, true, true);
   296b8:	2301      	movs	r3, #1
{
   296ba:	460a      	mov	r2, r1
	return queue_insert(queue, NULL, data, true, true);
   296bc:	9300      	str	r3, [sp, #0]
   296be:	2100      	movs	r1, #0
   296c0:	f7ff ff45 	bl	2954e <queue_insert>
}
   296c4:	b003      	add	sp, #12
   296c6:	f85d fb04 	ldr.w	pc, [sp], #4

000296ca <z_impl_k_queue_alloc_prepend>:
{
   296ca:	b507      	push	{r0, r1, r2, lr}
   296cc:	460a      	mov	r2, r1
	return queue_insert(queue, NULL, data, true, false);
   296ce:	2100      	movs	r1, #0
   296d0:	9100      	str	r1, [sp, #0]
   296d2:	2301      	movs	r3, #1
   296d4:	f7ff ff3b 	bl	2954e <queue_insert>
}
   296d8:	b003      	add	sp, #12
   296da:	f85d fb04 	ldr.w	pc, [sp], #4

000296de <k_queue_append_list>:
{
   296de:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   296e2:	4605      	mov	r5, r0
   296e4:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   296e6:	460c      	mov	r4, r1
   296e8:	b391      	cbz	r1, 29750 <k_queue_append_list+0x72>
   296ea:	b38a      	cbz	r2, 29750 <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   296ec:	f100 0708 	add.w	r7, r0, #8
   296f0:	f04f 0320 	mov.w	r3, #32
   296f4:	f3ef 8811 	mrs	r8, BASEPRI
   296f8:	f383 8811 	msr	BASEPRI, r3
   296fc:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   29700:	4638      	mov	r0, r7
   29702:	f000 f929 	bl	29958 <z_unpend_first_thread>
   29706:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   2970a:	b920      	cbnz	r0, 29716 <k_queue_append_list+0x38>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2970c:	686b      	ldr	r3, [r5, #4]
   2970e:	b9cb      	cbnz	r3, 29744 <k_queue_append_list+0x66>
	list->head = node;
   29710:	602c      	str	r4, [r5, #0]
	list->tail = node;
   29712:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   29714:	e00a      	b.n	2972c <k_queue_append_list+0x4e>
   29716:	6144      	str	r4, [r0, #20]
   29718:	f8c0 9090 	str.w	r9, [r0, #144]	; 0x90
	z_ready_thread(thread);
   2971c:	f000 f8d5 	bl	298ca <z_ready_thread>
		head = *(void **)head;
   29720:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   29722:	4638      	mov	r0, r7
   29724:	f000 f918 	bl	29958 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   29728:	2c00      	cmp	r4, #0
   2972a:	d1ee      	bne.n	2970a <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   2972c:	2104      	movs	r1, #4
   2972e:	f105 0010 	add.w	r0, r5, #16
   29732:	f000 fcce 	bl	2a0d2 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   29736:	4638      	mov	r0, r7
   29738:	4641      	mov	r1, r8
   2973a:	f7f7 fe2f 	bl	2139c <z_reschedule>
	return 0;
   2973e:	2000      	movs	r0, #0
}
   29740:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   29744:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   29746:	f001 0103 	and.w	r1, r1, #3
   2974a:	430c      	orrs	r4, r1
   2974c:	601c      	str	r4, [r3, #0]
}
   2974e:	e7e0      	b.n	29712 <k_queue_append_list+0x34>
		return -EINVAL;
   29750:	f06f 0015 	mvn.w	r0, #21
   29754:	e7f4      	b.n	29740 <k_queue_append_list+0x62>

00029756 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   29756:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2975a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2975c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2975e:	2300      	movs	r3, #0
	node->prev = NULL;
   29760:	e9c0 3300 	strd	r3, r3, [r0]
}
   29764:	4770      	bx	lr

00029766 <arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   29766:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   2976a:	b923      	cbnz	r3, 29776 <arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   2976c:	f3ef 8014 	mrs	r0, CONTROL
	return (value & CONTROL_nPRIV_Msk) ? true : false;
   29770:	f000 0001 	and.w	r0, r0, #1
   29774:	4770      	bx	lr
		return false;
   29776:	2000      	movs	r0, #0
}
   29778:	4770      	bx	lr

0002977a <unpend_thread_no_timeout>:
{
   2977a:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   2977c:	f7ff ffeb 	bl	29756 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   29780:	7b43      	ldrb	r3, [r0, #13]
   29782:	f023 0302 	bic.w	r3, r3, #2
   29786:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   29788:	2300      	movs	r3, #0
   2978a:	6083      	str	r3, [r0, #8]
}
   2978c:	bd08      	pop	{r3, pc}

0002978e <thread_obj_validate>:
{
   2978e:	b538      	push	{r3, r4, r5, lr}
   29790:	4604      	mov	r4, r0
	struct z_object *ko = z_object_find(thread);
   29792:	f7d6 fcb5 	bl	100 <z_object_find>
	int ret = z_object_validate(ko, K_OBJ_THREAD, _OBJ_INIT_TRUE);
   29796:	2200      	movs	r2, #0
   29798:	2109      	movs	r1, #9
	struct z_object *ko = z_object_find(thread);
   2979a:	4605      	mov	r5, r0
	int ret = z_object_validate(ko, K_OBJ_THREAD, _OBJ_INIT_TRUE);
   2979c:	f7fa fcae 	bl	240fc <z_object_validate>
	switch (ret) {
   297a0:	f110 0f16 	cmn.w	r0, #22
   297a4:	d005      	beq.n	297b2 <thread_obj_validate+0x24>
   297a6:	b128      	cbz	r0, 297b4 <thread_obj_validate+0x26>
		z_dump_object_error(ret, thread, ko, K_OBJ_THREAD);
   297a8:	2309      	movs	r3, #9
   297aa:	462a      	mov	r2, r5
   297ac:	4621      	mov	r1, r4
   297ae:	f7fa fbad 	bl	23f0c <z_dump_object_error>
	switch (ret) {
   297b2:	2001      	movs	r0, #1
}
   297b4:	bd38      	pop	{r3, r4, r5, pc}

000297b6 <z_obj_validation_check.constprop.0>:
static inline int z_obj_validation_check(struct z_object *ko,
   297b6:	b570      	push	{r4, r5, r6, lr}
	ret = z_object_validate(ko, otype, init);
   297b8:	2200      	movs	r2, #0
static inline int z_obj_validation_check(struct z_object *ko,
   297ba:	460d      	mov	r5, r1
	ret = z_object_validate(ko, otype, init);
   297bc:	2109      	movs	r1, #9
static inline int z_obj_validation_check(struct z_object *ko,
   297be:	4606      	mov	r6, r0
	ret = z_object_validate(ko, otype, init);
   297c0:	f7fa fc9c 	bl	240fc <z_object_validate>
	if (ret != 0) {
   297c4:	4604      	mov	r4, r0
   297c6:	b120      	cbz	r0, 297d2 <z_obj_validation_check.constprop.0+0x1c>
		z_dump_object_error(ret, obj, ko, otype);
   297c8:	2309      	movs	r3, #9
   297ca:	4632      	mov	r2, r6
   297cc:	4629      	mov	r1, r5
   297ce:	f7fa fb9d 	bl	23f0c <z_dump_object_error>
}
   297d2:	4620      	mov	r0, r4
   297d4:	bd70      	pop	{r4, r5, r6, pc}

000297d6 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   297d6:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   297da:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   297de:	4283      	cmp	r3, r0
		return b2 - b1;
   297e0:	bf14      	ite	ne
   297e2:	1ac0      	subne	r0, r0, r3
	return 0;
   297e4:	2000      	moveq	r0, #0
}
   297e6:	4770      	bx	lr

000297e8 <z_unpend_thread_no_timeout>:
{
   297e8:	b508      	push	{r3, lr}
   297ea:	f04f 0320 	mov.w	r3, #32
   297ee:	f3ef 8111 	mrs	r1, BASEPRI
   297f2:	f383 8811 	msr	BASEPRI, r3
   297f6:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   297fa:	f7ff ffbe 	bl	2977a <unpend_thread_no_timeout>
	__asm__ volatile(
   297fe:	f381 8811 	msr	BASEPRI, r1
   29802:	f3bf 8f6f 	isb	sy
}
   29806:	bd08      	pop	{r3, pc}

00029808 <z_unpend_thread>:
{
   29808:	b510      	push	{r4, lr}
	__asm__ volatile(
   2980a:	f04f 0320 	mov.w	r3, #32
   2980e:	f3ef 8411 	mrs	r4, BASEPRI
   29812:	f383 8811 	msr	BASEPRI, r3
   29816:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   2981a:	f7ff ffae 	bl	2977a <unpend_thread_no_timeout>
	__asm__ volatile(
   2981e:	f384 8811 	msr	BASEPRI, r4
   29822:	f3bf 8f6f 	isb	sy
}
   29826:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_abort_timeout(&thread->base.timeout);
   2982a:	3018      	adds	r0, #24
   2982c:	f000 ba36 	b.w	29c9c <z_abort_timeout>

00029830 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   29830:	4603      	mov	r3, r0
   29832:	b920      	cbnz	r0, 2983e <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   29834:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   29838:	b90a      	cbnz	r2, 2983e <z_reschedule_irqlock+0xe>
   2983a:	f7dc bb49 	b.w	5ed0 <arch_swap>
   2983e:	f383 8811 	msr	BASEPRI, r3
   29842:	f3bf 8f6f 	isb	sy
}
   29846:	4770      	bx	lr

00029848 <z_reschedule_unlocked>:
	__asm__ volatile(
   29848:	f04f 0320 	mov.w	r3, #32
   2984c:	f3ef 8011 	mrs	r0, BASEPRI
   29850:	f383 8811 	msr	BASEPRI, r3
   29854:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   29858:	f7ff bfea 	b.w	29830 <z_reschedule_irqlock>

0002985c <z_priq_dumb_best>:
{
   2985c:	4603      	mov	r3, r0
	return list->head == list;
   2985e:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29860:	4283      	cmp	r3, r0
   29862:	d003      	beq.n	2986c <z_priq_dumb_best+0x10>
	if (n != NULL) {
   29864:	2800      	cmp	r0, #0
   29866:	bf38      	it	cc
   29868:	2000      	movcc	r0, #0
   2986a:	4770      	bx	lr
	struct k_thread *thread = NULL;
   2986c:	2000      	movs	r0, #0
}
   2986e:	4770      	bx	lr

00029870 <add_to_waitq_locked>:
{
   29870:	b538      	push	{r3, r4, r5, lr}
   29872:	4604      	mov	r4, r0
   29874:	460d      	mov	r5, r1
	unready_thread(thread);
   29876:	f7f7 fdd5 	bl	21424 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   2987a:	7b63      	ldrb	r3, [r4, #13]
   2987c:	f043 0302 	orr.w	r3, r3, #2
   29880:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   29882:	b1b5      	cbz	r5, 298b2 <add_to_waitq_locked+0x42>
	return list->head == list;
   29884:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   29886:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29888:	429d      	cmp	r5, r3
   2988a:	bf08      	it	eq
   2988c:	2300      	moveq	r3, #0
   2988e:	2b00      	cmp	r3, #0
   29890:	bf38      	it	cc
   29892:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   29894:	b19b      	cbz	r3, 298be <add_to_waitq_locked+0x4e>
	int32_t b1 = thread_1->base.prio;
   29896:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   2989a:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   2989e:	4291      	cmp	r1, r2
   298a0:	d008      	beq.n	298b4 <add_to_waitq_locked+0x44>
		return b2 - b1;
   298a2:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   298a4:	2a00      	cmp	r2, #0
   298a6:	dd05      	ble.n	298b4 <add_to_waitq_locked+0x44>
	sys_dnode_t *const prev = successor->prev;
   298a8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   298aa:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   298ae:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   298b0:	605c      	str	r4, [r3, #4]
}
   298b2:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   298b4:	686a      	ldr	r2, [r5, #4]
   298b6:	4293      	cmp	r3, r2
   298b8:	d001      	beq.n	298be <add_to_waitq_locked+0x4e>
   298ba:	681b      	ldr	r3, [r3, #0]
   298bc:	e7ea      	b.n	29894 <add_to_waitq_locked+0x24>
	sys_dnode_t *const tail = list->tail;
   298be:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   298c0:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   298c4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   298c6:	606c      	str	r4, [r5, #4]
   298c8:	e7f3      	b.n	298b2 <add_to_waitq_locked+0x42>

000298ca <z_ready_thread>:
{
   298ca:	b510      	push	{r4, lr}
   298cc:	f04f 0320 	mov.w	r3, #32
   298d0:	f3ef 8411 	mrs	r4, BASEPRI
   298d4:	f383 8811 	msr	BASEPRI, r3
   298d8:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   298dc:	f7f7 ff38 	bl	21750 <ready_thread>
	__asm__ volatile(
   298e0:	f384 8811 	msr	BASEPRI, r4
   298e4:	f3bf 8f6f 	isb	sy
}
   298e8:	bd10      	pop	{r4, pc}

000298ea <z_thread_timeout>:
{
   298ea:	b510      	push	{r4, lr}
   298ec:	4601      	mov	r1, r0
	__asm__ volatile(
   298ee:	f04f 0320 	mov.w	r3, #32
   298f2:	f3ef 8411 	mrs	r4, BASEPRI
   298f6:	f383 8811 	msr	BASEPRI, r3
   298fa:	f3bf 8f6f 	isb	sy
		if (!killed) {
   298fe:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   29902:	f013 0f28 	tst.w	r3, #40	; 0x28
   29906:	d10d      	bne.n	29924 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   29908:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   2990c:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   2990e:	b10b      	cbz	r3, 29914 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   29910:	f7ff ff33 	bl	2977a <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   29914:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   29918:	f023 0314 	bic.w	r3, r3, #20
   2991c:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   29920:	f7f7 ff16 	bl	21750 <ready_thread>
	__asm__ volatile(
   29924:	f384 8811 	msr	BASEPRI, r4
   29928:	f3bf 8f6f 	isb	sy
}
   2992c:	bd10      	pop	{r4, pc}

0002992e <z_unpend1_no_timeout>:
{
   2992e:	b510      	push	{r4, lr}
	__asm__ volatile(
   29930:	f04f 0320 	mov.w	r3, #32
   29934:	f3ef 8411 	mrs	r4, BASEPRI
   29938:	f383 8811 	msr	BASEPRI, r3
   2993c:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   29940:	f7ff ff8c 	bl	2985c <z_priq_dumb_best>
		if (thread != NULL) {
   29944:	4601      	mov	r1, r0
   29946:	b108      	cbz	r0, 2994c <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
   29948:	f7ff ff17 	bl	2977a <unpend_thread_no_timeout>
	__asm__ volatile(
   2994c:	f384 8811 	msr	BASEPRI, r4
   29950:	f3bf 8f6f 	isb	sy
}
   29954:	4608      	mov	r0, r1
   29956:	bd10      	pop	{r4, pc}

00029958 <z_unpend_first_thread>:
{
   29958:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2995a:	f04f 0320 	mov.w	r3, #32
   2995e:	f3ef 8511 	mrs	r5, BASEPRI
   29962:	f383 8811 	msr	BASEPRI, r3
   29966:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   2996a:	f7ff ff77 	bl	2985c <z_priq_dumb_best>
		if (thread != NULL) {
   2996e:	4604      	mov	r4, r0
   29970:	b120      	cbz	r0, 2997c <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   29972:	f7ff ff02 	bl	2977a <unpend_thread_no_timeout>
   29976:	3018      	adds	r0, #24
   29978:	f000 f990 	bl	29c9c <z_abort_timeout>
	__asm__ volatile(
   2997c:	f385 8811 	msr	BASEPRI, r5
   29980:	f3bf 8f6f 	isb	sy
}
   29984:	4620      	mov	r0, r4
   29986:	bd38      	pop	{r3, r4, r5, pc}

00029988 <z_unpend_all>:
{
   29988:	b538      	push	{r3, r4, r5, lr}
   2998a:	4605      	mov	r5, r0
	int need_sched = 0;
   2998c:	2000      	movs	r0, #0
	return list->head == list;
   2998e:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29990:	42a5      	cmp	r5, r4
   29992:	d000      	beq.n	29996 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   29994:	b904      	cbnz	r4, 29998 <z_unpend_all+0x10>
}
   29996:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   29998:	4620      	mov	r0, r4
   2999a:	f7ff ff35 	bl	29808 <z_unpend_thread>
		z_ready_thread(thread);
   2999e:	4620      	mov	r0, r4
   299a0:	f7ff ff93 	bl	298ca <z_ready_thread>
		need_sched = 1;
   299a4:	2001      	movs	r0, #1
   299a6:	e7f2      	b.n	2998e <z_unpend_all+0x6>

000299a8 <z_impl_k_wakeup>:
{
   299a8:	b510      	push	{r4, lr}
	if (z_is_thread_pending(thread)) {
   299aa:	7b43      	ldrb	r3, [r0, #13]
   299ac:	079b      	lsls	r3, r3, #30
{
   299ae:	4604      	mov	r4, r0
	if (z_is_thread_pending(thread)) {
   299b0:	d415      	bmi.n	299de <z_impl_k_wakeup+0x36>
   299b2:	3018      	adds	r0, #24
   299b4:	f000 f972 	bl	29c9c <z_abort_timeout>
	if (z_abort_thread_timeout(thread) < 0) {
   299b8:	2800      	cmp	r0, #0
   299ba:	da02      	bge.n	299c2 <z_impl_k_wakeup+0x1a>
		if (thread->base.thread_state != _THREAD_SUSPENDED) {
   299bc:	7b63      	ldrb	r3, [r4, #13]
   299be:	2b10      	cmp	r3, #16
   299c0:	d10d      	bne.n	299de <z_impl_k_wakeup+0x36>
   299c2:	7b63      	ldrb	r3, [r4, #13]
   299c4:	f023 0310 	bic.w	r3, r3, #16
   299c8:	7363      	strb	r3, [r4, #13]
	z_ready_thread(thread);
   299ca:	4620      	mov	r0, r4
   299cc:	f7ff ff7d 	bl	298ca <z_ready_thread>
   299d0:	f3ef 8305 	mrs	r3, IPSR
	if (!arch_is_in_isr()) {
   299d4:	b91b      	cbnz	r3, 299de <z_impl_k_wakeup+0x36>
}
   299d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_reschedule_unlocked();
   299da:	f7ff bf35 	b.w	29848 <z_reschedule_unlocked>
}
   299de:	bd10      	pop	{r4, pc}

000299e0 <z_sched_wake>:
{
   299e0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   299e2:	f04f 0320 	mov.w	r3, #32
   299e6:	f3ef 8511 	mrs	r5, BASEPRI
   299ea:	f383 8811 	msr	BASEPRI, r3
   299ee:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   299f2:	f7ff ff33 	bl	2985c <z_priq_dumb_best>
		if (thread != NULL) {
   299f6:	4604      	mov	r4, r0
   299f8:	b158      	cbz	r0, 29a12 <z_sched_wake+0x32>
   299fa:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
   299fe:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   29a00:	f7ff febb 	bl	2977a <unpend_thread_no_timeout>
   29a04:	3018      	adds	r0, #24
   29a06:	f000 f949 	bl	29c9c <z_abort_timeout>
			ready_thread(thread);
   29a0a:	4620      	mov	r0, r4
   29a0c:	f7f7 fea0 	bl	21750 <ready_thread>
			ret = true;
   29a10:	2001      	movs	r0, #1
	__asm__ volatile(
   29a12:	f385 8811 	msr	BASEPRI, r5
   29a16:	f3bf 8f6f 	isb	sy
}
   29a1a:	bd38      	pop	{r3, r4, r5, pc}

00029a1c <arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   29a1c:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   29a20:	b923      	cbnz	r3, 29a2c <arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   29a22:	f3ef 8014 	mrs	r0, CONTROL
	return (value & CONTROL_nPRIV_Msk) ? true : false;
   29a26:	f000 0001 	and.w	r0, r0, #1
   29a2a:	4770      	bx	lr
		return false;
   29a2c:	2000      	movs	r0, #0
}
   29a2e:	4770      	bx	lr

00029a30 <z_obj_validation_check.constprop.0>:
static inline int z_obj_validation_check(struct z_object *ko,
   29a30:	b570      	push	{r4, r5, r6, lr}
   29a32:	460d      	mov	r5, r1
	ret = z_object_validate(ko, otype, init);
   29a34:	2107      	movs	r1, #7
static inline int z_obj_validation_check(struct z_object *ko,
   29a36:	4606      	mov	r6, r0
	ret = z_object_validate(ko, otype, init);
   29a38:	f7fa fb60 	bl	240fc <z_object_validate>
	if (ret != 0) {
   29a3c:	4604      	mov	r4, r0
   29a3e:	b120      	cbz	r0, 29a4a <z_obj_validation_check.constprop.0+0x1a>
		z_dump_object_error(ret, obj, ko, otype);
   29a40:	2307      	movs	r3, #7
   29a42:	4632      	mov	r2, r6
   29a44:	4629      	mov	r1, r5
   29a46:	f7fa fa61 	bl	23f0c <z_dump_object_error>
}
   29a4a:	4620      	mov	r0, r4
   29a4c:	bd70      	pop	{r4, r5, r6, pc}

00029a4e <z_impl_k_sem_init>:
{
   29a4e:	b508      	push	{r3, lr}
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   29a50:	b16a      	cbz	r2, 29a6e <z_impl_k_sem_init+0x20>
   29a52:	428a      	cmp	r2, r1
   29a54:	d30b      	bcc.n	29a6e <z_impl_k_sem_init+0x20>
	sem->limit = limit;
   29a56:	e9c0 1202 	strd	r1, r2, [r0, #8]
	sys_dlist_init(&sem->poll_events);
   29a5a:	f100 0210 	add.w	r2, r0, #16
	list->tail = (sys_dnode_t *)list;
   29a5e:	e9c0 0000 	strd	r0, r0, [r0]
   29a62:	e9c0 2204 	strd	r2, r2, [r0, #16]
	z_object_init(sem);
   29a66:	f000 fc7e 	bl	2a366 <z_object_init>
	return 0;
   29a6a:	2000      	movs	r0, #0
}
   29a6c:	bd08      	pop	{r3, pc}
		return -EINVAL;
   29a6e:	f06f 0015 	mvn.w	r0, #21
   29a72:	e7fb      	b.n	29a6c <z_impl_k_sem_init+0x1e>

00029a74 <arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   29a74:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   29a78:	b923      	cbnz	r3, 29a84 <arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   29a7a:	f3ef 8014 	mrs	r0, CONTROL
	return (value & CONTROL_nPRIV_Msk) ? true : false;
   29a7e:	f000 0001 	and.w	r0, r0, #1
   29a82:	4770      	bx	lr
		return false;
   29a84:	2000      	movs	r0, #0
}
   29a86:	4770      	bx	lr

00029a88 <z_obj_validation_check>:
{
   29a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29a8a:	4615      	mov	r5, r2
   29a8c:	460e      	mov	r6, r1
	ret = z_object_validate(ko, otype, init);
   29a8e:	461a      	mov	r2, r3
   29a90:	4629      	mov	r1, r5
{
   29a92:	4607      	mov	r7, r0
	ret = z_object_validate(ko, otype, init);
   29a94:	f7fa fb32 	bl	240fc <z_object_validate>
	if (ret != 0) {
   29a98:	4604      	mov	r4, r0
   29a9a:	b120      	cbz	r0, 29aa6 <z_obj_validation_check+0x1e>
		z_dump_object_error(ret, obj, ko, otype);
   29a9c:	462b      	mov	r3, r5
   29a9e:	463a      	mov	r2, r7
   29aa0:	4631      	mov	r1, r6
   29aa2:	f7fa fa33 	bl	23f0c <z_dump_object_error>
}
   29aa6:	4620      	mov	r0, r4
   29aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00029aaa <k_is_in_isr>:
   29aaa:	f3ef 8005 	mrs	r0, IPSR
}
   29aae:	3800      	subs	r0, #0
   29ab0:	bf18      	it	ne
   29ab2:	2001      	movne	r0, #1
   29ab4:	4770      	bx	lr

00029ab6 <z_impl_k_busy_wait>:
	if (usec_to_wait == 0U) {
   29ab6:	b108      	cbz	r0, 29abc <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
   29ab8:	f7dd bb2e 	b.w	7118 <arch_busy_wait>
}
   29abc:	4770      	bx	lr

00029abe <z_impl_k_thread_name_set>:
}
   29abe:	f06f 0057 	mvn.w	r0, #87	; 0x57
   29ac2:	4770      	bx	lr

00029ac4 <k_thread_name_get>:
}
   29ac4:	2000      	movs	r0, #0
   29ac6:	4770      	bx	lr

00029ac8 <z_impl_k_thread_start>:
	z_sched_start(thread);
   29ac8:	f7f7 be7a 	b.w	217c0 <z_sched_start>

00029acc <z_stack_is_user_capable>:
{
   29acc:	b508      	push	{r3, lr}
	return z_object_find(stack) != NULL;
   29ace:	f7d6 fb17 	bl	100 <z_object_find>
}
   29ad2:	3800      	subs	r0, #0
   29ad4:	bf18      	it	ne
   29ad6:	2001      	movne	r0, #1
   29ad8:	bd08      	pop	{r3, pc}

00029ada <z_impl_k_thread_create>:
{
   29ada:	b5f0      	push	{r4, r5, r6, r7, lr}
   29adc:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   29ade:	2500      	movs	r5, #0
   29ae0:	9505      	str	r5, [sp, #20]
   29ae2:	9d10      	ldr	r5, [sp, #64]	; 0x40
   29ae4:	9504      	str	r5, [sp, #16]
   29ae6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   29ae8:	9503      	str	r5, [sp, #12]
   29aea:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   29aec:	9502      	str	r5, [sp, #8]
{
   29aee:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   29af2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   29af4:	9501      	str	r5, [sp, #4]
   29af6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   29af8:	9500      	str	r5, [sp, #0]
{
   29afa:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   29afc:	f7f8 fc76 	bl	223ec <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   29b00:	1c7b      	adds	r3, r7, #1
   29b02:	bf08      	it	eq
   29b04:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   29b08:	d004      	beq.n	29b14 <z_impl_k_thread_create+0x3a>
		schedule_new_thread(new_thread, delay);
   29b0a:	4632      	mov	r2, r6
   29b0c:	463b      	mov	r3, r7
   29b0e:	4620      	mov	r0, r4
   29b10:	f7f8 fbfa 	bl	22308 <schedule_new_thread>
}
   29b14:	4620      	mov	r0, r4
   29b16:	b007      	add	sp, #28
   29b18:	bdf0      	pop	{r4, r5, r6, r7, pc}

00029b1a <notify_queue_locked>:
	if (queue != NULL) {
   29b1a:	b120      	cbz	r0, 29b26 <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   29b1c:	2200      	movs	r2, #0
   29b1e:	4611      	mov	r1, r2
   29b20:	30a8      	adds	r0, #168	; 0xa8
   29b22:	f7ff bf5d 	b.w	299e0 <z_sched_wake>
}
   29b26:	4770      	bx	lr

00029b28 <unschedule_locked>:
	bool ret = flag_test(flagp, bit);
   29b28:	68c3      	ldr	r3, [r0, #12]
{
   29b2a:	b510      	push	{r4, lr}
	*flagp &= ~BIT(bit);
   29b2c:	f023 0208 	bic.w	r2, r3, #8
	return (*flagp & BIT(bit)) != 0U;
   29b30:	f3c3 04c0 	ubfx	r4, r3, #3, #1
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   29b34:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   29b36:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   29b38:	d502      	bpl.n	29b40 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   29b3a:	3010      	adds	r0, #16
   29b3c:	f000 f8ae 	bl	29c9c <z_abort_timeout>
}
   29b40:	4620      	mov	r0, r4
   29b42:	bd10      	pop	{r4, pc}

00029b44 <cancel_async_locked>:
{
   29b44:	4603      	mov	r3, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   29b46:	68c0      	ldr	r0, [r0, #12]
{
   29b48:	b510      	push	{r4, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   29b4a:	0784      	lsls	r4, r0, #30
   29b4c:	f3c0 0140 	ubfx	r1, r0, #1, #1
   29b50:	d416      	bmi.n	29b80 <cancel_async_locked+0x3c>
	*flagp &= ~BIT(bit);
   29b52:	f020 0404 	bic.w	r4, r0, #4
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   29b56:	0740      	lsls	r0, r0, #29
		queue_remove_locked(work->queue, work);
   29b58:	689a      	ldr	r2, [r3, #8]
	*flagp &= ~BIT(bit);
   29b5a:	60dc      	str	r4, [r3, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   29b5c:	d510      	bpl.n	29b80 <cancel_async_locked+0x3c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29b5e:	f8d2 00a0 	ldr.w	r0, [r2, #160]	; 0xa0
   29b62:	b168      	cbz	r0, 29b80 <cancel_async_locked+0x3c>
   29b64:	4283      	cmp	r3, r0
   29b66:	d11d      	bne.n	29ba4 <cancel_async_locked+0x60>
Z_GENLIST_REMOVE(slist, snode)
   29b68:	6818      	ldr	r0, [r3, #0]
   29b6a:	b999      	cbnz	r1, 29b94 <cancel_async_locked+0x50>
   29b6c:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
	list->head = node;
   29b70:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
Z_GENLIST_REMOVE(slist, snode)
   29b74:	428b      	cmp	r3, r1
   29b76:	d101      	bne.n	29b7c <cancel_async_locked+0x38>
	list->tail = node;
   29b78:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	parent->next = child;
   29b7c:	2200      	movs	r2, #0
   29b7e:	601a      	str	r2, [r3, #0]
	return flags_get(&work->flags) & K_WORK_MASK;
   29b80:	68da      	ldr	r2, [r3, #12]
	if (ret != 0) {
   29b82:	f012 000f 	ands.w	r0, r2, #15
	*flagp |= BIT(bit);
   29b86:	bf1e      	ittt	ne
   29b88:	f042 0202 	orrne.w	r2, r2, #2
   29b8c:	60da      	strne	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   29b8e:	f002 000f 	andne.w	r0, r2, #15
}
   29b92:	bd10      	pop	{r4, pc}
   29b94:	6008      	str	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   29b96:	f8d2 00a4 	ldr.w	r0, [r2, #164]	; 0xa4
   29b9a:	4283      	cmp	r3, r0
	list->tail = node;
   29b9c:	bf08      	it	eq
   29b9e:	f8c2 10a4 	streq.w	r1, [r2, #164]	; 0xa4
}
   29ba2:	e7eb      	b.n	29b7c <cancel_async_locked+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   29ba4:	4601      	mov	r1, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29ba6:	6800      	ldr	r0, [r0, #0]
   29ba8:	e7db      	b.n	29b62 <cancel_async_locked+0x1e>

00029baa <work_timeout>:
{
   29baa:	b513      	push	{r0, r1, r4, lr}
	__asm__ volatile(
   29bac:	f04f 0320 	mov.w	r3, #32
   29bb0:	f3ef 8411 	mrs	r4, BASEPRI
   29bb4:	f383 8811 	msr	BASEPRI, r3
   29bb8:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   29bbc:	2300      	movs	r3, #0
   29bbe:	9301      	str	r3, [sp, #4]
	bool ret = flag_test(flagp, bit);
   29bc0:	f850 3c04 	ldr.w	r3, [r0, #-4]
	*flagp &= ~BIT(bit);
   29bc4:	f023 0208 	bic.w	r2, r3, #8
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   29bc8:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   29bca:	f840 2c04 	str.w	r2, [r0, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   29bce:	d505      	bpl.n	29bdc <work_timeout+0x32>
		queue = dw->queue;
   29bd0:	6983      	ldr	r3, [r0, #24]
   29bd2:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   29bd4:	a901      	add	r1, sp, #4
   29bd6:	3810      	subs	r0, #16
   29bd8:	f7f8 feec 	bl	229b4 <submit_to_queue_locked>
	__asm__ volatile(
   29bdc:	f384 8811 	msr	BASEPRI, r4
   29be0:	f3bf 8f6f 	isb	sy
}
   29be4:	b002      	add	sp, #8
   29be6:	bd10      	pop	{r4, pc}

00029be8 <k_work_init>:
{
   29be8:	b538      	push	{r3, r4, r5, lr}
   29bea:	4604      	mov	r4, r0
   29bec:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   29bee:	2210      	movs	r2, #16
   29bf0:	2100      	movs	r1, #0
   29bf2:	f000 fc03 	bl	2a3fc <memset>
   29bf6:	6065      	str	r5, [r4, #4]
}
   29bf8:	bd38      	pop	{r3, r4, r5, pc}

00029bfa <k_work_submit_to_queue>:
{
   29bfa:	b537      	push	{r0, r1, r2, r4, r5, lr}
   29bfc:	9001      	str	r0, [sp, #4]
   29bfe:	4608      	mov	r0, r1
	__asm__ volatile(
   29c00:	f04f 0320 	mov.w	r3, #32
   29c04:	f3ef 8511 	mrs	r5, BASEPRI
   29c08:	f383 8811 	msr	BASEPRI, r3
   29c0c:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   29c10:	a901      	add	r1, sp, #4
   29c12:	f7f8 fecf 	bl	229b4 <submit_to_queue_locked>
   29c16:	4604      	mov	r4, r0
	__asm__ volatile(
   29c18:	f385 8811 	msr	BASEPRI, r5
   29c1c:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   29c20:	2800      	cmp	r0, #0
   29c22:	dd04      	ble.n	29c2e <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
   29c24:	f7f8 f87e 	bl	21d24 <z_impl_k_is_preempt_thread>
   29c28:	b108      	cbz	r0, 29c2e <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
   29c2a:	f7f7 ff6b 	bl	21b04 <z_impl_k_yield>
}
   29c2e:	4620      	mov	r0, r4
   29c30:	b003      	add	sp, #12
   29c32:	bd30      	pop	{r4, r5, pc}

00029c34 <k_work_init_delayable>:
{
   29c34:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   29c36:	2230      	movs	r2, #48	; 0x30
{
   29c38:	4604      	mov	r4, r0
   29c3a:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   29c3c:	2100      	movs	r1, #0
   29c3e:	f000 fbdd 	bl	2a3fc <memset>
   29c42:	f44f 7380 	mov.w	r3, #256	; 0x100
   29c46:	6065      	str	r5, [r4, #4]
   29c48:	60e3      	str	r3, [r4, #12]
}
   29c4a:	bd38      	pop	{r3, r4, r5, pc}

00029c4c <k_work_delayable_busy_get>:
	__asm__ volatile(
   29c4c:	f04f 0220 	mov.w	r2, #32
   29c50:	f3ef 8311 	mrs	r3, BASEPRI
   29c54:	f382 8811 	msr	BASEPRI, r2
   29c58:	f3bf 8f6f 	isb	sy
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   29c5c:	f3bf 8f5b 	dmb	ish
   29c60:	68c0      	ldr	r0, [r0, #12]
   29c62:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
   29c66:	f383 8811 	msr	BASEPRI, r3
   29c6a:	f3bf 8f6f 	isb	sy
}
   29c6e:	f000 000f 	and.w	r0, r0, #15
   29c72:	4770      	bx	lr

00029c74 <k_work_cancel_delayable>:

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   29c74:	b538      	push	{r3, r4, r5, lr}
   29c76:	4604      	mov	r4, r0
	__asm__ volatile(
   29c78:	f04f 0320 	mov.w	r3, #32
   29c7c:	f3ef 8511 	mrs	r5, BASEPRI
   29c80:	f383 8811 	msr	BASEPRI, r3
   29c84:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   29c88:	f7ff ff4e 	bl	29b28 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   29c8c:	4620      	mov	r0, r4
   29c8e:	f7ff ff59 	bl	29b44 <cancel_async_locked>
	__asm__ volatile(
   29c92:	f385 8811 	msr	BASEPRI, r5
   29c96:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = cancel_delayable_async_locked(dwork);

	k_spin_unlock(&lock, key);
	return ret;
}
   29c9a:	bd38      	pop	{r3, r4, r5, pc}

00029c9c <z_abort_timeout>:
{
   29c9c:	b510      	push	{r4, lr}
	__asm__ volatile(
   29c9e:	f04f 0220 	mov.w	r2, #32
   29ca2:	f3ef 8411 	mrs	r4, BASEPRI
   29ca6:	f382 8811 	msr	BASEPRI, r2
   29caa:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   29cae:	6803      	ldr	r3, [r0, #0]
   29cb0:	b13b      	cbz	r3, 29cc2 <z_abort_timeout+0x26>
			remove_timeout(to);
   29cb2:	f7f9 f83b 	bl	22d2c <remove_timeout>
			ret = 0;
   29cb6:	2000      	movs	r0, #0
	__asm__ volatile(
   29cb8:	f384 8811 	msr	BASEPRI, r4
   29cbc:	f3bf 8f6f 	isb	sy
}
   29cc0:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   29cc2:	f06f 0015 	mvn.w	r0, #21
   29cc6:	e7f7      	b.n	29cb8 <z_abort_timeout+0x1c>

00029cc8 <z_timeout_remaining>:
{
   29cc8:	b510      	push	{r4, lr}
	__asm__ volatile(
   29cca:	f04f 0320 	mov.w	r3, #32
   29cce:	f3ef 8411 	mrs	r4, BASEPRI
   29cd2:	f383 8811 	msr	BASEPRI, r3
   29cd6:	f3bf 8f6f 	isb	sy
		ticks = timeout_rem(timeout);
   29cda:	f7f9 f86d 	bl	22db8 <timeout_rem>
	__asm__ volatile(
   29cde:	f384 8811 	msr	BASEPRI, r4
   29ce2:	f3bf 8f6f 	isb	sy
}
   29ce6:	bd10      	pop	{r4, pc}

00029ce8 <z_get_next_timeout_expiry>:
{
   29ce8:	b510      	push	{r4, lr}
	__asm__ volatile(
   29cea:	f04f 0320 	mov.w	r3, #32
   29cee:	f3ef 8411 	mrs	r4, BASEPRI
   29cf2:	f383 8811 	msr	BASEPRI, r3
   29cf6:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   29cfa:	f7f9 f831 	bl	22d60 <next_timeout>
	__asm__ volatile(
   29cfe:	f384 8811 	msr	BASEPRI, r4
   29d02:	f3bf 8f6f 	isb	sy
}
   29d06:	bd10      	pop	{r4, pc}

00029d08 <z_set_timeout_expiry>:
{
   29d08:	b570      	push	{r4, r5, r6, lr}
   29d0a:	4604      	mov	r4, r0
   29d0c:	460d      	mov	r5, r1
	__asm__ volatile(
   29d0e:	f04f 0320 	mov.w	r3, #32
   29d12:	f3ef 8611 	mrs	r6, BASEPRI
   29d16:	f383 8811 	msr	BASEPRI, r3
   29d1a:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   29d1e:	f7f9 f81f 	bl	22d60 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   29d22:	2801      	cmp	r0, #1
   29d24:	dd05      	ble.n	29d32 <z_set_timeout_expiry+0x2a>
   29d26:	42a0      	cmp	r0, r4
   29d28:	db03      	blt.n	29d32 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   29d2a:	4629      	mov	r1, r5
   29d2c:	4620      	mov	r0, r4
   29d2e:	f7db fe1d 	bl	596c <sys_clock_set_timeout>
	__asm__ volatile(
   29d32:	f386 8811 	msr	BASEPRI, r6
   29d36:	f3bf 8f6f 	isb	sy
}
   29d3a:	bd70      	pop	{r4, r5, r6, pc}

00029d3c <sys_clock_tick_get_32>:
{
   29d3c:	b508      	push	{r3, lr}
	return (uint32_t)sys_clock_tick_get();
   29d3e:	f7f9 f975 	bl	2302c <sys_clock_tick_get>
}
   29d42:	bd08      	pop	{r3, pc}

00029d44 <z_impl_k_uptime_ticks>:
	return sys_clock_tick_get();
   29d44:	f7f9 b972 	b.w	2302c <sys_clock_tick_get>

00029d48 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   29d48:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   29d4a:	1c4b      	adds	r3, r1, #1
   29d4c:	bf08      	it	eq
   29d4e:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   29d52:	4604      	mov	r4, r0
   29d54:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   29d56:	d013      	beq.n	29d80 <sys_clock_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   29d58:	ea54 0105 	orrs.w	r1, r4, r5
   29d5c:	d103      	bne.n	29d66 <sys_clock_timeout_end_calc+0x1e>

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
	return sys_clock_tick_get() + MAX(1, dt);
}
   29d5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   29d62:	f7f9 b963 	b.w	2302c <sys_clock_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   29d66:	f06f 0101 	mvn.w	r1, #1
   29d6a:	1a0a      	subs	r2, r1, r0
   29d6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   29d70:	eb61 0305 	sbc.w	r3, r1, r5
   29d74:	2a00      	cmp	r2, #0
   29d76:	f173 0100 	sbcs.w	r1, r3, #0
   29d7a:	db02      	blt.n	29d82 <sys_clock_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
   29d7c:	4610      	mov	r0, r2
   29d7e:	4619      	mov	r1, r3
}
   29d80:	bd38      	pop	{r3, r4, r5, pc}
	return sys_clock_tick_get() + MAX(1, dt);
   29d82:	f7f9 f953 	bl	2302c <sys_clock_tick_get>
   29d86:	2c01      	cmp	r4, #1
   29d88:	f175 0300 	sbcs.w	r3, r5, #0
   29d8c:	bfbc      	itt	lt
   29d8e:	2401      	movlt	r4, #1
   29d90:	2500      	movlt	r5, #0
   29d92:	1820      	adds	r0, r4, r0
   29d94:	eb45 0101 	adc.w	r1, r5, r1
   29d98:	e7f2      	b.n	29d80 <sys_clock_timeout_end_calc+0x38>

00029d9a <arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   29d9a:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   29d9e:	b923      	cbnz	r3, 29daa <arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   29da0:	f3ef 8014 	mrs	r0, CONTROL
	return (value & CONTROL_nPRIV_Msk) ? true : false;
   29da4:	f000 0001 	and.w	r0, r0, #1
   29da8:	4770      	bx	lr
		return false;
   29daa:	2000      	movs	r0, #0
}
   29dac:	4770      	bx	lr

00029dae <z_obj_validation_check.constprop.0>:
static inline int z_obj_validation_check(struct z_object *ko,
   29dae:	b570      	push	{r4, r5, r6, lr}
	ret = z_object_validate(ko, otype, init);
   29db0:	2200      	movs	r2, #0
static inline int z_obj_validation_check(struct z_object *ko,
   29db2:	460d      	mov	r5, r1
	ret = z_object_validate(ko, otype, init);
   29db4:	210a      	movs	r1, #10
static inline int z_obj_validation_check(struct z_object *ko,
   29db6:	4606      	mov	r6, r0
	ret = z_object_validate(ko, otype, init);
   29db8:	f7fa f9a0 	bl	240fc <z_object_validate>
	if (ret != 0) {
   29dbc:	4604      	mov	r4, r0
   29dbe:	b120      	cbz	r0, 29dca <z_obj_validation_check.constprop.0+0x1c>
		z_dump_object_error(ret, obj, ko, otype);
   29dc0:	230a      	movs	r3, #10
   29dc2:	4632      	mov	r2, r6
   29dc4:	4629      	mov	r1, r5
   29dc6:	f7fa f8a1 	bl	23f0c <z_dump_object_error>
}
   29dca:	4620      	mov	r0, r4
   29dcc:	bd70      	pop	{r4, r5, r6, pc}

00029dce <k_timer_init>:
	timer->stop_fn = stop_fn;
   29dce:	e9c0 1208 	strd	r1, r2, [r0, #32]
	timer->status = 0U;
   29dd2:	2200      	movs	r2, #0
   29dd4:	f100 0118 	add.w	r1, r0, #24
   29dd8:	e9c0 1106 	strd	r1, r1, [r0, #24]
	node->prev = NULL;
   29ddc:	e9c0 2200 	strd	r2, r2, [r0]
   29de0:	6302      	str	r2, [r0, #48]	; 0x30
	timer->user_data = NULL;
   29de2:	6342      	str	r2, [r0, #52]	; 0x34
	z_object_init(timer);
   29de4:	f000 babf 	b.w	2a366 <z_object_init>

00029de8 <z_impl_k_timer_stop>:
{
   29de8:	b510      	push	{r4, lr}
   29dea:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   29dec:	f7ff ff56 	bl	29c9c <z_abort_timeout>
	if (inactive) {
   29df0:	b9b0      	cbnz	r0, 29e20 <z_impl_k_timer_stop+0x38>
	if (timer->stop_fn != NULL) {
   29df2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   29df4:	b10b      	cbz	r3, 29dfa <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   29df6:	4620      	mov	r0, r4
   29df8:	4798      	blx	r3
	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   29dfa:	f104 0018 	add.w	r0, r4, #24
   29dfe:	f7ff fd96 	bl	2992e <z_unpend1_no_timeout>
	if (pending_thread != NULL) {
   29e02:	b168      	cbz	r0, 29e20 <z_impl_k_timer_stop+0x38>
		z_ready_thread(pending_thread);
   29e04:	f7ff fd61 	bl	298ca <z_ready_thread>
	__asm__ volatile(
   29e08:	f04f 0320 	mov.w	r3, #32
   29e0c:	f3ef 8011 	mrs	r0, BASEPRI
   29e10:	f383 8811 	msr	BASEPRI, r3
   29e14:	f3bf 8f6f 	isb	sy
}
   29e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   29e1c:	f7ff bd08 	b.w	29830 <z_reschedule_irqlock>
   29e20:	bd10      	pop	{r4, pc}

00029e22 <z_impl_k_timer_status_get>:
{
   29e22:	4603      	mov	r3, r0
   29e24:	f04f 0120 	mov.w	r1, #32
   29e28:	f3ef 8211 	mrs	r2, BASEPRI
   29e2c:	f381 8811 	msr	BASEPRI, r1
   29e30:	f3bf 8f6f 	isb	sy
	timer->status = 0U;
   29e34:	2100      	movs	r1, #0
	uint32_t result = timer->status;
   29e36:	6b00      	ldr	r0, [r0, #48]	; 0x30
	timer->status = 0U;
   29e38:	6319      	str	r1, [r3, #48]	; 0x30
	__asm__ volatile(
   29e3a:	f382 8811 	msr	BASEPRI, r2
   29e3e:	f3bf 8f6f 	isb	sy
}
   29e42:	4770      	bx	lr

00029e44 <arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   29e44:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   29e48:	b923      	cbnz	r3, 29e54 <arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   29e4a:	f3ef 8014 	mrs	r0, CONTROL
	return (value & CONTROL_nPRIV_Msk) ? true : false;
   29e4e:	f000 0001 	and.w	r0, r0, #1
   29e52:	4770      	bx	lr
		return false;
   29e54:	2000      	movs	r0, #0
}
   29e56:	4770      	bx	lr

00029e58 <clear_event_registrations>:
	while (num_events--) {
   29e58:	2314      	movs	r3, #20
{
   29e5a:	b530      	push	{r4, r5, lr}
   29e5c:	fb03 0101 	mla	r1, r3, r1, r0
	event->poller = NULL;
   29e60:	2400      	movs	r4, #0
	while (num_events--) {
   29e62:	4281      	cmp	r1, r0
   29e64:	d100      	bne.n	29e68 <clear_event_registrations+0x10>
}
   29e66:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   29e68:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   29e6c:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   29e70:	f003 030f 	and.w	r3, r3, #15
   29e74:	2b02      	cmp	r3, #2
   29e76:	d80a      	bhi.n	29e8e <clear_event_registrations+0x36>
   29e78:	b15b      	cbz	r3, 29e92 <clear_event_registrations+0x3a>
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   29e7a:	f851 3c14 	ldr.w	r3, [r1, #-20]
   29e7e:	b143      	cbz	r3, 29e92 <clear_event_registrations+0x3a>
	sys_dnode_t *const prev = node->prev;
   29e80:	f851 5c10 	ldr.w	r5, [r1, #-16]
	prev->next = next;
   29e84:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   29e86:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   29e88:	e941 4405 	strd	r4, r4, [r1, #-20]
}
   29e8c:	e001      	b.n	29e92 <clear_event_registrations+0x3a>
	switch (event->type) {
   29e8e:	2b04      	cmp	r3, #4
   29e90:	d0f3      	beq.n	29e7a <clear_event_registrations+0x22>
   29e92:	f382 8811 	msr	BASEPRI, r2
   29e96:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   29e9a:	f04f 0320 	mov.w	r3, #32
   29e9e:	f3ef 8211 	mrs	r2, BASEPRI
   29ea2:	f383 8811 	msr	BASEPRI, r3
   29ea6:	f3bf 8f6f 	isb	sy
   29eaa:	3914      	subs	r1, #20
   29eac:	e7d9      	b.n	29e62 <clear_event_registrations+0xa>

00029eae <z_obj_validation_check>:
{
   29eae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29eb0:	4615      	mov	r5, r2
   29eb2:	460e      	mov	r6, r1
	ret = z_object_validate(ko, otype, init);
   29eb4:	461a      	mov	r2, r3
   29eb6:	4629      	mov	r1, r5
{
   29eb8:	4607      	mov	r7, r0
	ret = z_object_validate(ko, otype, init);
   29eba:	f7fa f91f 	bl	240fc <z_object_validate>
	if (ret != 0) {
   29ebe:	4604      	mov	r4, r0
   29ec0:	b120      	cbz	r0, 29ecc <z_obj_validation_check+0x1e>
		z_dump_object_error(ret, obj, ko, otype);
   29ec2:	462b      	mov	r3, r5
   29ec4:	463a      	mov	r2, r7
   29ec6:	4631      	mov	r1, r6
   29ec8:	f7fa f820 	bl	23f0c <z_dump_object_error>
}
   29ecc:	4620      	mov	r0, r4
   29ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00029ed0 <add_event>:
{
   29ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29ed2:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   29ed4:	e9d0 2300 	ldrd	r2, r3, [r0]
   29ed8:	4290      	cmp	r0, r2
   29eda:	4604      	mov	r4, r0
   29edc:	460d      	mov	r5, r1
   29ede:	d105      	bne.n	29eec <add_event+0x1c>
	sys_dnode_t *const tail = list->tail;
   29ee0:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   29ee2:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   29ee6:	601d      	str	r5, [r3, #0]
	list->tail = node;
   29ee8:	6065      	str	r5, [r4, #4]
}
   29eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   29eec:	2b00      	cmp	r3, #0
   29eee:	d0f7      	beq.n	29ee0 <add_event+0x10>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   29ef0:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   29ef2:	b100      	cbz	r0, 29ef6 <add_event+0x26>
   29ef4:	3860      	subs	r0, #96	; 0x60
   29ef6:	b107      	cbz	r7, 29efa <add_event+0x2a>
   29ef8:	3f60      	subs	r7, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   29efa:	4639      	mov	r1, r7
   29efc:	f7ff fc6b 	bl	297d6 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   29f00:	2800      	cmp	r0, #0
   29f02:	dced      	bgt.n	29ee0 <add_event+0x10>
	return list->head == list;
   29f04:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29f06:	42b4      	cmp	r4, r6
   29f08:	d0ea      	beq.n	29ee0 <add_event+0x10>
   29f0a:	2e00      	cmp	r6, #0
   29f0c:	bf38      	it	cc
   29f0e:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   29f10:	2e00      	cmp	r6, #0
   29f12:	d0e5      	beq.n	29ee0 <add_event+0x10>
		if (z_sched_prio_cmp(poller_thread(poller),
   29f14:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   29f16:	b101      	cbz	r1, 29f1a <add_event+0x4a>
   29f18:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   29f1a:	4638      	mov	r0, r7
   29f1c:	f7ff fc5b 	bl	297d6 <z_sched_prio_cmp>
   29f20:	2800      	cmp	r0, #0
   29f22:	dd05      	ble.n	29f30 <add_event+0x60>
	sys_dnode_t *const prev = successor->prev;
   29f24:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   29f26:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   29f2a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   29f2c:	6075      	str	r5, [r6, #4]
			return;
   29f2e:	e7dc      	b.n	29eea <add_event+0x1a>
	return (node == list->tail) ? NULL : node->next;
   29f30:	6863      	ldr	r3, [r4, #4]
   29f32:	42b3      	cmp	r3, r6
   29f34:	d0d4      	beq.n	29ee0 <add_event+0x10>
   29f36:	6836      	ldr	r6, [r6, #0]
   29f38:	e7ea      	b.n	29f10 <add_event+0x40>

00029f3a <register_events>:
{
   29f3a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   29f3e:	f04f 0a00 	mov.w	sl, #0
{
   29f42:	460e      	mov	r6, r1
   29f44:	4614      	mov	r4, r2
   29f46:	461f      	mov	r7, r3
   29f48:	4683      	mov	fp, r0
	int events_registered = 0;
   29f4a:	4655      	mov	r5, sl
	event->poller = NULL;
   29f4c:	46d0      	mov	r8, sl
	for (int ii = 0; ii < num_events; ii++) {
   29f4e:	45b2      	cmp	sl, r6
   29f50:	db02      	blt.n	29f58 <register_events+0x1e>
}
   29f52:	4628      	mov	r0, r5
   29f54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29f58:	f04f 0320 	mov.w	r3, #32
   29f5c:	f3ef 8911 	mrs	r9, BASEPRI
   29f60:	f383 8811 	msr	BASEPRI, r3
   29f64:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   29f68:	f89b 200d 	ldrb.w	r2, [fp, #13]
   29f6c:	f002 020f 	and.w	r2, r2, #15
   29f70:	2a02      	cmp	r2, #2
   29f72:	d006      	beq.n	29f82 <register_events+0x48>
   29f74:	2a04      	cmp	r2, #4
   29f76:	d008      	beq.n	29f8a <register_events+0x50>
   29f78:	2a01      	cmp	r2, #1
   29f7a:	d120      	bne.n	29fbe <register_events+0x84>
		if (event->signal->signaled != 0U) {
   29f7c:	f8db 3010 	ldr.w	r3, [fp, #16]
   29f80:	e001      	b.n	29f86 <register_events+0x4c>
		if (k_sem_count_get(event->sem) > 0U) {
   29f82:	f8db 3010 	ldr.w	r3, [fp, #16]
		if (event->signal->signaled != 0U) {
   29f86:	689b      	ldr	r3, [r3, #8]
   29f88:	e002      	b.n	29f90 <register_events+0x56>
		if (!k_queue_is_empty(event->queue)) {
   29f8a:	f8db 3010 	ldr.w	r3, [fp, #16]
   29f8e:	681b      	ldr	r3, [r3, #0]
		if (event->signal->signaled != 0U) {
   29f90:	b1ab      	cbz	r3, 29fbe <register_events+0x84>
	event->state |= state;
   29f92:	f8db 300c 	ldr.w	r3, [fp, #12]
	event->poller = NULL;
   29f96:	f8cb 8008 	str.w	r8, [fp, #8]
	event->state |= state;
   29f9a:	f3c3 3104 	ubfx	r1, r3, #12, #5
   29f9e:	430a      	orrs	r2, r1
   29fa0:	f362 3310 	bfi	r3, r2, #12, #5
   29fa4:	f8cb 300c 	str.w	r3, [fp, #12]
			poller->is_polling = false;
   29fa8:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   29fac:	f389 8811 	msr	BASEPRI, r9
   29fb0:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   29fb4:	f10a 0a01 	add.w	sl, sl, #1
   29fb8:	f10b 0b14 	add.w	fp, fp, #20
   29fbc:	e7c7      	b.n	29f4e <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   29fbe:	2f00      	cmp	r7, #0
   29fc0:	d1f4      	bne.n	29fac <register_events+0x72>
   29fc2:	7823      	ldrb	r3, [r4, #0]
   29fc4:	2b00      	cmp	r3, #0
   29fc6:	d0f1      	beq.n	29fac <register_events+0x72>
	switch (event->type) {
   29fc8:	f89b 300d 	ldrb.w	r3, [fp, #13]
   29fcc:	f003 030f 	and.w	r3, r3, #15
   29fd0:	2b02      	cmp	r3, #2
   29fd2:	d008      	beq.n	29fe6 <register_events+0xac>
   29fd4:	2b04      	cmp	r3, #4
   29fd6:	d006      	beq.n	29fe6 <register_events+0xac>
   29fd8:	2b01      	cmp	r3, #1
   29fda:	d10b      	bne.n	29ff4 <register_events+0xba>
		add_event(&event->signal->poll_events, event, poller);
   29fdc:	f8db 0010 	ldr.w	r0, [fp, #16]
   29fe0:	4622      	mov	r2, r4
   29fe2:	4659      	mov	r1, fp
   29fe4:	e004      	b.n	29ff0 <register_events+0xb6>
		add_event(&event->queue->poll_events, event, poller);
   29fe6:	f8db 0010 	ldr.w	r0, [fp, #16]
   29fea:	4622      	mov	r2, r4
   29fec:	4659      	mov	r1, fp
   29fee:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   29ff0:	f7ff ff6e 	bl	29ed0 <add_event>
	event->poller = poller;
   29ff4:	f8cb 4008 	str.w	r4, [fp, #8]
			events_registered += 1;
   29ff8:	3501      	adds	r5, #1
   29ffa:	e7d7      	b.n	29fac <register_events+0x72>

00029ffc <signal_poll_event>:
{
   29ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   2a000:	6884      	ldr	r4, [r0, #8]
{
   2a002:	4605      	mov	r5, r0
   2a004:	460e      	mov	r6, r1
	if (poller != NULL) {
   2a006:	b144      	cbz	r4, 2a01a <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   2a008:	7863      	ldrb	r3, [r4, #1]
   2a00a:	2b01      	cmp	r3, #1
   2a00c:	d138      	bne.n	2a080 <signal_poll_event+0x84>
	if (!z_is_thread_pending(thread)) {
   2a00e:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2a012:	f013 0302 	ands.w	r3, r3, #2
   2a016:	d10a      	bne.n	2a02e <signal_poll_event+0x32>
		poller->is_polling = false;
   2a018:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   2a01a:	68eb      	ldr	r3, [r5, #12]
   2a01c:	f3c3 3104 	ubfx	r1, r3, #12, #5
   2a020:	430e      	orrs	r6, r1
	event->poller = NULL;
   2a022:	2000      	movs	r0, #0
	event->state |= state;
   2a024:	f366 3310 	bfi	r3, r6, #12, #5
	event->poller = NULL;
   2a028:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   2a02a:	60eb      	str	r3, [r5, #12]
	return retcode;
   2a02c:	e00d      	b.n	2a04a <signal_poll_event+0x4e>
	if (z_is_thread_timeout_expired(thread)) {
   2a02e:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   2a032:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2a036:	f06f 0001 	mvn.w	r0, #1
   2a03a:	428b      	cmp	r3, r1
   2a03c:	bf08      	it	eq
   2a03e:	4282      	cmpeq	r2, r0
   2a040:	d105      	bne.n	2a04e <signal_poll_event+0x52>
		poller->is_polling = false;
   2a042:	2300      	movs	r3, #0
   2a044:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   2a046:	f06f 000a 	mvn.w	r0, #10
}
   2a04a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2a04e:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   2a052:	4640      	mov	r0, r8
   2a054:	f7ff fbd8 	bl	29808 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2a058:	2e08      	cmp	r6, #8
   2a05a:	bf0c      	ite	eq
   2a05c:	f06f 0303 	mvneq.w	r3, #3
   2a060:	2300      	movne	r3, #0
   2a062:	6323      	str	r3, [r4, #48]	; 0x30
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2a064:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2a068:	06db      	lsls	r3, r3, #27
   2a06a:	d102      	bne.n	2a072 <signal_poll_event+0x76>
	if (!z_is_thread_ready(thread)) {
   2a06c:	f854 7c48 	ldr.w	r7, [r4, #-72]
   2a070:	b10f      	cbz	r7, 2a076 <signal_poll_event+0x7a>
		poller->is_polling = false;
   2a072:	2300      	movs	r3, #0
   2a074:	e7d0      	b.n	2a018 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   2a076:	4640      	mov	r0, r8
   2a078:	f7ff fc27 	bl	298ca <z_ready_thread>
		poller->is_polling = false;
   2a07c:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   2a07e:	e7cc      	b.n	2a01a <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   2a080:	2b02      	cmp	r3, #2
   2a082:	d1f6      	bne.n	2a072 <signal_poll_event+0x76>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   2a084:	7823      	ldrb	r3, [r4, #0]
   2a086:	2b00      	cmp	r3, #0
   2a088:	d0c7      	beq.n	2a01a <signal_poll_event+0x1e>
   2a08a:	f854 7c04 	ldr.w	r7, [r4, #-4]
   2a08e:	2f00      	cmp	r7, #0
   2a090:	d0f4      	beq.n	2a07c <signal_poll_event+0x80>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   2a092:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   2a096:	f1a4 0914 	sub.w	r9, r4, #20
   2a09a:	f104 0014 	add.w	r0, r4, #20
   2a09e:	f7ff fdfd 	bl	29c9c <z_abort_timeout>
		twork->poll_result = 0;
   2a0a2:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   2a0a6:	4649      	mov	r1, r9
   2a0a8:	4638      	mov	r0, r7
   2a0aa:	f7ff fda6 	bl	29bfa <k_work_submit_to_queue>
		poller->is_polling = false;
   2a0ae:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   2a0b2:	e7b2      	b.n	2a01a <signal_poll_event+0x1e>

0002a0b4 <k_poll_event_init>:
{
   2a0b4:	b510      	push	{r4, lr}
	event->type = type;
   2a0b6:	0452      	lsls	r2, r2, #17
   2a0b8:	0209      	lsls	r1, r1, #8
   2a0ba:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
   2a0be:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
   2a0c2:	430a      	orrs	r2, r1
   2a0c4:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   2a0c6:	2400      	movs	r4, #0
	event->type = type;
   2a0c8:	430a      	orrs	r2, r1
	event->obj = obj;
   2a0ca:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   2a0ce:	6084      	str	r4, [r0, #8]
}
   2a0d0:	bd10      	pop	{r4, pc}

0002a0d2 <z_handle_obj_poll_events>:
{
   2a0d2:	4603      	mov	r3, r0
	return list->head == list;
   2a0d4:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2a0d6:	4283      	cmp	r3, r0
   2a0d8:	d008      	beq.n	2a0ec <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   2a0da:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2a0de:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2a0e0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2a0e2:	2300      	movs	r3, #0
	node->prev = NULL;
   2a0e4:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   2a0e8:	f7ff bf88 	b.w	29ffc <signal_poll_event>
}
   2a0ec:	4770      	bx	lr

0002a0ee <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   2a0ee:	2200      	movs	r2, #0
	list->tail = (sys_dnode_t *)list;
   2a0f0:	e9c0 0000 	strd	r0, r0, [r0]
   2a0f4:	6082      	str	r2, [r0, #8]
	z_object_init(sig);
   2a0f6:	f000 b936 	b.w	2a366 <z_object_init>

0002a0fa <k_free>:
	if (ptr != NULL) {
   2a0fa:	b120      	cbz	r0, 2a106 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   2a0fc:	1f01      	subs	r1, r0, #4
   2a0fe:	f850 0c04 	ldr.w	r0, [r0, #-4]
   2a102:	f7ff b9ae 	b.w	29462 <k_heap_free>
}
   2a106:	4770      	bx	lr

0002a108 <z_impl_k_futex_wake>:
{
   2a108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a10c:	460d      	mov	r5, r1
	obj = z_object_find(futex);
   2a10e:	f7d5 fff7 	bl	100 <z_object_find>
	if (obj == NULL || obj->type != K_OBJ_FUTEX) {
   2a112:	b310      	cbz	r0, 2a15a <z_impl_k_futex_wake+0x52>
   2a114:	7983      	ldrb	r3, [r0, #6]
   2a116:	2b0f      	cmp	r3, #15
   2a118:	d11f      	bne.n	2a15a <z_impl_k_futex_wake+0x52>
	return obj->data.futex_data;
   2a11a:	6886      	ldr	r6, [r0, #8]
	if (futex_data == NULL) {
   2a11c:	b1ee      	cbz	r6, 2a15a <z_impl_k_futex_wake+0x52>
	key = k_spin_lock(&futex_data->lock);
   2a11e:	f106 0708 	add.w	r7, r6, #8
	__asm__ volatile(
   2a122:	f04f 0320 	mov.w	r3, #32
   2a126:	f3ef 8811 	mrs	r8, BASEPRI
   2a12a:	f383 8811 	msr	BASEPRI, r3
   2a12e:	f3bf 8f6f 	isb	sy
	unsigned int woken = 0U;
   2a132:	2400      	movs	r4, #0
   2a134:	46a1      	mov	r9, r4
		thread = z_unpend_first_thread(&futex_data->wait_q);
   2a136:	4630      	mov	r0, r6
   2a138:	f7ff fc0e 	bl	29958 <z_unpend_first_thread>
		if (thread != NULL) {
   2a13c:	b130      	cbz	r0, 2a14c <z_impl_k_futex_wake+0x44>
   2a13e:	f8c0 9090 	str.w	r9, [r0, #144]	; 0x90
			woken++;
   2a142:	3401      	adds	r4, #1
			z_ready_thread(thread);
   2a144:	f7ff fbc1 	bl	298ca <z_ready_thread>
	} while (thread && wake_all);
   2a148:	2d00      	cmp	r5, #0
   2a14a:	d1f4      	bne.n	2a136 <z_impl_k_futex_wake+0x2e>
	z_reschedule(&futex_data->lock, key);
   2a14c:	4638      	mov	r0, r7
   2a14e:	4641      	mov	r1, r8
   2a150:	f7f7 f924 	bl	2139c <z_reschedule>
	return woken;
   2a154:	4620      	mov	r0, r4
}
   2a156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
   2a15a:	f06f 0015 	mvn.w	r0, #21
   2a15e:	e7fa      	b.n	2a156 <z_impl_k_futex_wake+0x4e>

0002a160 <z_impl_k_futex_wait>:
{
   2a160:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2a162:	4607      	mov	r7, r0
   2a164:	460e      	mov	r6, r1
   2a166:	4615      	mov	r5, r2
   2a168:	461c      	mov	r4, r3
	obj = z_object_find(futex);
   2a16a:	f7d5 ffc9 	bl	100 <z_object_find>
	if (obj == NULL || obj->type != K_OBJ_FUTEX) {
   2a16e:	b338      	cbz	r0, 2a1c0 <z_impl_k_futex_wait+0x60>
   2a170:	7983      	ldrb	r3, [r0, #6]
   2a172:	2b0f      	cmp	r3, #15
   2a174:	d124      	bne.n	2a1c0 <z_impl_k_futex_wait+0x60>
	return obj->data.futex_data;
   2a176:	6882      	ldr	r2, [r0, #8]
	if (futex_data == NULL) {
   2a178:	b312      	cbz	r2, 2a1c0 <z_impl_k_futex_wait+0x60>
	key = k_spin_lock(&futex_data->lock);
   2a17a:	f102 0008 	add.w	r0, r2, #8
   2a17e:	f04f 0320 	mov.w	r3, #32
   2a182:	f3ef 8111 	mrs	r1, BASEPRI
   2a186:	f383 8811 	msr	BASEPRI, r3
   2a18a:	f3bf 8f6f 	isb	sy
   2a18e:	f3bf 8f5b 	dmb	ish
   2a192:	683b      	ldr	r3, [r7, #0]
   2a194:	f3bf 8f5b 	dmb	ish
	if (atomic_get(&futex->val) != (atomic_val_t)expected) {
   2a198:	429e      	cmp	r6, r3
   2a19a:	d007      	beq.n	2a1ac <z_impl_k_futex_wait+0x4c>
	__asm__ volatile(
   2a19c:	f381 8811 	msr	BASEPRI, r1
   2a1a0:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   2a1a4:	f06f 000a 	mvn.w	r0, #10
}
   2a1a8:	b003      	add	sp, #12
   2a1aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = z_pend_curr(&futex_data->lock,
   2a1ac:	e9cd 5400 	strd	r5, r4, [sp]
   2a1b0:	f7f7 f976 	bl	214a0 <z_pend_curr>
	if (ret == -EAGAIN) {
   2a1b4:	f110 0f0b 	cmn.w	r0, #11
		ret = -ETIMEDOUT;
   2a1b8:	bf08      	it	eq
   2a1ba:	f06f 0073 	mvneq.w	r0, #115	; 0x73
   2a1be:	e7f3      	b.n	2a1a8 <z_impl_k_futex_wait+0x48>
		return -EINVAL;
   2a1c0:	f06f 0015 	mvn.w	r0, #21
   2a1c4:	e7f0      	b.n	2a1a8 <z_impl_k_futex_wait+0x48>

0002a1c6 <k_mem_domain_init>:
{
   2a1c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a1ca:	4605      	mov	r5, r0
   2a1cc:	460e      	mov	r6, r1
   2a1ce:	4617      	mov	r7, r2
	__asm__ volatile(
   2a1d0:	f04f 0320 	mov.w	r3, #32
   2a1d4:	f3ef 8811 	mrs	r8, BASEPRI
   2a1d8:	f383 8811 	msr	BASEPRI, r3
   2a1dc:	f3bf 8f6f 	isb	sy
	domain->num_partitions = 0U;
   2a1e0:	2400      	movs	r4, #0
   2a1e2:	f880 40c8 	strb.w	r4, [r0, #200]	; 0xc8
__ssp_bos_icheck3(memset, void *, int)
   2a1e6:	22c0      	movs	r2, #192	; 0xc0
   2a1e8:	4621      	mov	r1, r4
   2a1ea:	f000 f907 	bl	2a3fc <memset>
	sys_dlist_init(&domain->mem_domain_q);
   2a1ee:	f105 03c0 	add.w	r3, r5, #192	; 0xc0
   2a1f2:	e9c5 3330 	strd	r3, r3, [r5, #192]	; 0xc0
	if (num_parts != 0U) {
   2a1f6:	b18e      	cbz	r6, 2a21c <k_mem_domain_init+0x56>
		for (i = 0U; i < num_parts; i++) {
   2a1f8:	4623      	mov	r3, r4
			domain->partitions[i] = *parts[i];
   2a1fa:	f04f 0c0c 	mov.w	ip, #12
   2a1fe:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
   2a202:	ca07      	ldmia	r2, {r0, r1, r2}
   2a204:	fb0c 5403 	mla	r4, ip, r3, r5
   2a208:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			domain->num_partitions++;
   2a20c:	f895 10c8 	ldrb.w	r1, [r5, #200]	; 0xc8
		for (i = 0U; i < num_parts; i++) {
   2a210:	3301      	adds	r3, #1
			domain->num_partitions++;
   2a212:	3101      	adds	r1, #1
		for (i = 0U; i < num_parts; i++) {
   2a214:	429e      	cmp	r6, r3
			domain->num_partitions++;
   2a216:	f885 10c8 	strb.w	r1, [r5, #200]	; 0xc8
		for (i = 0U; i < num_parts; i++) {
   2a21a:	d8f0      	bhi.n	2a1fe <k_mem_domain_init+0x38>
	__asm__ volatile(
   2a21c:	f388 8811 	msr	BASEPRI, r8
   2a220:	f3bf 8f6f 	isb	sy
}
   2a224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002a228 <z_mem_domain_exit_thread>:
	__asm__ volatile(
   2a228:	f04f 0320 	mov.w	r3, #32
   2a22c:	f3ef 8111 	mrs	r1, BASEPRI
   2a230:	f383 8811 	msr	BASEPRI, r3
   2a234:	f3bf 8f6f 	isb	sy
	sys_dnode_t *const next = node->next;
   2a238:	e9d0 321d 	ldrd	r3, r2, [r0, #116]	; 0x74
	prev->next = next;
   2a23c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2a23e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2a240:	2300      	movs	r3, #0
	node->prev = NULL;
   2a242:	e9c0 331d 	strd	r3, r3, [r0, #116]	; 0x74
	__asm__ volatile(
   2a246:	f381 8811 	msr	BASEPRI, r1
   2a24a:	f3bf 8f6f 	isb	sy
}
   2a24e:	4770      	bx	lr

0002a250 <arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   2a250:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   2a254:	b923      	cbnz	r3, 2a260 <arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   2a256:	f3ef 8014 	mrs	r0, CONTROL
	return (value & CONTROL_nPRIV_Msk) ? true : false;
   2a25a:	f000 0001 	and.w	r0, r0, #1
   2a25e:	4770      	bx	lr
		return false;
   2a260:	2000      	movs	r0, #0
}
   2a262:	4770      	bx	lr

0002a264 <unref_check>:
{
   2a264:	b530      	push	{r4, r5, lr}
	__asm__ volatile(
   2a266:	f04f 0320 	mov.w	r3, #32
   2a26a:	f3ef 8511 	mrs	r5, BASEPRI
   2a26e:	f383 8811 	msr	BASEPRI, r3
   2a272:	f3bf 8f6f 	isb	sy
	sys_clear_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   2a276:	094c      	lsrs	r4, r1, #5
	sys_bitfield_clear_bit((mem_addr_t)&ko->perms, index);
   2a278:	3004      	adds	r0, #4
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
   2a27a:	2201      	movs	r2, #1
	uint32_t temp = *(volatile uint32_t *)addr;
   2a27c:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
	sys_clear_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   2a280:	f001 011f 	and.w	r1, r1, #31
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
   2a284:	fa02 f101 	lsl.w	r1, r2, r1
   2a288:	ea23 0101 	bic.w	r1, r3, r1
   2a28c:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
	__asm__ volatile(
   2a290:	f385 8811 	msr	BASEPRI, r5
   2a294:	f3bf 8f6f 	isb	sy
}
   2a298:	bd30      	pop	{r4, r5, pc}

0002a29a <wordlist_cb>:
	if (sys_bitfield_test_bit((mem_addr_t)&ko->perms, ctx->parent_id) &&
   2a29a:	680b      	ldr	r3, [r1, #0]
{
   2a29c:	b530      	push	{r4, r5, lr}
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   2a29e:	095a      	lsrs	r2, r3, #5
	if (sys_bitfield_test_bit((mem_addr_t)&ko->perms, ctx->parent_id) &&
   2a2a0:	1d04      	adds	r4, r0, #4
	uint32_t temp = *(volatile uint32_t *)addr;
   2a2a2:	f854 5022 	ldr.w	r5, [r4, r2, lsl #2]
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   2a2a6:	f003 021f 	and.w	r2, r3, #31
	return temp & (1 << bit);
   2a2aa:	2301      	movs	r3, #1
   2a2ac:	fa03 f202 	lsl.w	r2, r3, r2
   2a2b0:	422a      	tst	r2, r5
   2a2b2:	d00d      	beq.n	2a2d0 <wordlist_cb+0x36>
   2a2b4:	6800      	ldr	r0, [r0, #0]
   2a2b6:	688a      	ldr	r2, [r1, #8]
   2a2b8:	4290      	cmp	r0, r2
   2a2ba:	d009      	beq.n	2a2d0 <wordlist_cb+0x36>
		sys_bitfield_set_bit((mem_addr_t)&ko->perms, ctx->child_id);
   2a2bc:	684a      	ldr	r2, [r1, #4]
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   2a2be:	0951      	lsrs	r1, r2, #5
   2a2c0:	f002 021f 	and.w	r2, r2, #31
	uint32_t temp = *(volatile uint32_t *)addr;
   2a2c4:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
	*(volatile uint32_t *)addr = temp | (1 << bit);
   2a2c8:	4093      	lsls	r3, r2
   2a2ca:	4303      	orrs	r3, r0
   2a2cc:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
}
   2a2d0:	bd30      	pop	{r4, r5, pc}

0002a2d2 <clear_perms_cb>:
	unref_check(ko, id);
   2a2d2:	f7ff bfc7 	b.w	2a264 <unref_check>

0002a2d6 <thread_index_get>:
{
   2a2d6:	b508      	push	{r3, lr}
	ko = z_object_find(thread);
   2a2d8:	f7d5 ff12 	bl	100 <z_object_find>
	if (ko == NULL) {
   2a2dc:	b108      	cbz	r0, 2a2e2 <thread_index_get+0xc>
	return ko->data.thread_id;
   2a2de:	6880      	ldr	r0, [r0, #8]
}
   2a2e0:	bd08      	pop	{r3, pc}
		return -1;
   2a2e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a2e6:	e7fb      	b.n	2a2e0 <thread_index_get+0xa>

0002a2e8 <z_priv_stack_find>:
{
   2a2e8:	b508      	push	{r3, lr}
	struct z_object *obj = z_object_find(stack);
   2a2ea:	f7d5 ff09 	bl	100 <z_object_find>
	return obj->data.stack_data->priv;
   2a2ee:	6883      	ldr	r3, [r0, #8]
}
   2a2f0:	6858      	ldr	r0, [r3, #4]
   2a2f2:	bd08      	pop	{r3, pc}

0002a2f4 <z_thread_perms_set>:
{
   2a2f4:	b510      	push	{r4, lr}
   2a2f6:	4604      	mov	r4, r0
	int index = thread_index_get(thread);
   2a2f8:	4608      	mov	r0, r1
   2a2fa:	f7ff ffec 	bl	2a2d6 <thread_index_get>
	if (index != -1) {
   2a2fe:	1c43      	adds	r3, r0, #1
   2a300:	d00b      	beq.n	2a31a <z_thread_perms_set+0x26>
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   2a302:	0941      	lsrs	r1, r0, #5
		sys_bitfield_set_bit((mem_addr_t)&ko->perms, index);
   2a304:	1d23      	adds	r3, r4, #4
   2a306:	f000 001f 	and.w	r0, r0, #31
	uint32_t temp = *(volatile uint32_t *)addr;
   2a30a:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
	*(volatile uint32_t *)addr = temp | (1 << bit);
   2a30e:	2201      	movs	r2, #1
   2a310:	fa02 f000 	lsl.w	r0, r2, r0
   2a314:	4320      	orrs	r0, r4
   2a316:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
}
   2a31a:	bd10      	pop	{r4, pc}

0002a31c <z_thread_perms_clear>:
{
   2a31c:	b570      	push	{r4, r5, r6, lr}
   2a31e:	4604      	mov	r4, r0
	int index = thread_index_get(thread);
   2a320:	4608      	mov	r0, r1
   2a322:	f7ff ffd8 	bl	2a2d6 <thread_index_get>
	if (index != -1) {
   2a326:	1c43      	adds	r3, r0, #1
	int index = thread_index_get(thread);
   2a328:	4601      	mov	r1, r0
	if (index != -1) {
   2a32a:	d010      	beq.n	2a34e <z_thread_perms_clear+0x32>
	sys_clear_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   2a32c:	0945      	lsrs	r5, r0, #5
		sys_bitfield_clear_bit((mem_addr_t)&ko->perms, index);
   2a32e:	1d20      	adds	r0, r4, #4
   2a330:	f001 061f 	and.w	r6, r1, #31
	uint32_t temp = *(volatile uint32_t *)addr;
   2a334:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
   2a338:	2201      	movs	r2, #1
   2a33a:	40b2      	lsls	r2, r6
   2a33c:	ea23 0302 	bic.w	r3, r3, r2
   2a340:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
		unref_check(ko, index);
   2a344:	4620      	mov	r0, r4
}
   2a346:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		unref_check(ko, index);
   2a34a:	f7ff bf8b 	b.w	2a264 <unref_check>
}
   2a34e:	bd70      	pop	{r4, r5, r6, pc}

0002a350 <z_impl_k_object_access_grant>:
{
   2a350:	b510      	push	{r4, lr}
   2a352:	460c      	mov	r4, r1
	struct z_object *ko = z_object_find(object);
   2a354:	f7d5 fed4 	bl	100 <z_object_find>
	if (ko != NULL) {
   2a358:	b120      	cbz	r0, 2a364 <z_impl_k_object_access_grant+0x14>
		z_thread_perms_set(ko, thread);
   2a35a:	4621      	mov	r1, r4
}
   2a35c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_thread_perms_set(ko, thread);
   2a360:	f7ff bfc8 	b.w	2a2f4 <z_thread_perms_set>
}
   2a364:	bd10      	pop	{r4, pc}

0002a366 <z_object_init>:
{
   2a366:	b508      	push	{r3, lr}
	ko = z_object_find(obj);
   2a368:	f7d5 feca 	bl	100 <z_object_find>
	if (ko == NULL) {
   2a36c:	b118      	cbz	r0, 2a376 <z_object_init+0x10>
	ko->flags |= K_OBJ_FLAG_INITIALIZED;
   2a36e:	79c3      	ldrb	r3, [r0, #7]
   2a370:	f043 0301 	orr.w	r3, r3, #1
   2a374:	71c3      	strb	r3, [r0, #7]
}
   2a376:	bd08      	pop	{r3, pc}

0002a378 <z_object_uninit>:
{
   2a378:	b508      	push	{r3, lr}
	ko = z_object_find(obj);
   2a37a:	f7d5 fec1 	bl	100 <z_object_find>
	if (ko == NULL) {
   2a37e:	b118      	cbz	r0, 2a388 <z_object_uninit+0x10>
	ko->flags &= ~K_OBJ_FLAG_INITIALIZED;
   2a380:	79c3      	ldrb	r3, [r0, #7]
   2a382:	f023 0301 	bic.w	r3, r3, #1
   2a386:	71c3      	strb	r3, [r0, #7]
}
   2a388:	bd08      	pop	{r3, pc}

0002a38a <arch_is_user_context>:
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(value));
   2a38a:	f3ef 8305 	mrs	r3, IPSR
	if (value) {
   2a38e:	b923      	cbnz	r3, 2a39a <arch_is_user_context+0x10>
	__asm__ volatile("mrs %0, CONTROL\n\t" : "=r"(value));
   2a390:	f3ef 8014 	mrs	r0, CONTROL
	return (value & CONTROL_nPRIV_Msk) ? true : false;
   2a394:	f000 0001 	and.w	r0, r0, #1
   2a398:	4770      	bx	lr
		return false;
   2a39a:	2000      	movs	r0, #0
}
   2a39c:	4770      	bx	lr

0002a39e <validate_any_object>:
{
   2a39e:	b538      	push	{r3, r4, r5, lr}
   2a3a0:	4605      	mov	r5, r0
	ko = z_object_find(obj);
   2a3a2:	f7d5 fead 	bl	100 <z_object_find>
	ret = z_object_validate(ko, K_OBJ_ANY, _OBJ_INIT_ANY);
   2a3a6:	2201      	movs	r2, #1
   2a3a8:	2100      	movs	r1, #0
	ko = z_object_find(obj);
   2a3aa:	4604      	mov	r4, r0
	ret = z_object_validate(ko, K_OBJ_ANY, _OBJ_INIT_ANY);
   2a3ac:	f7f9 fea6 	bl	240fc <z_object_validate>
	if (ret != 0) {
   2a3b0:	b128      	cbz	r0, 2a3be <validate_any_object+0x20>
		z_dump_object_error(ret, obj, ko, K_OBJ_ANY);
   2a3b2:	4622      	mov	r2, r4
   2a3b4:	2300      	movs	r3, #0
   2a3b6:	4629      	mov	r1, r5
   2a3b8:	f7f9 fda8 	bl	23f0c <z_dump_object_error>
		return NULL;
   2a3bc:	2400      	movs	r4, #0
}
   2a3be:	4620      	mov	r0, r4
   2a3c0:	bd38      	pop	{r3, r4, r5, pc}

0002a3c2 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   2a3c2:	4770      	bx	lr

0002a3c4 <memcmp>:
   2a3c4:	b530      	push	{r4, r5, lr}
   2a3c6:	3901      	subs	r1, #1
   2a3c8:	2400      	movs	r4, #0
   2a3ca:	42a2      	cmp	r2, r4
   2a3cc:	d101      	bne.n	2a3d2 <memcmp+0xe>
   2a3ce:	2000      	movs	r0, #0
   2a3d0:	e005      	b.n	2a3de <memcmp+0x1a>
   2a3d2:	5d03      	ldrb	r3, [r0, r4]
   2a3d4:	3401      	adds	r4, #1
   2a3d6:	5d0d      	ldrb	r5, [r1, r4]
   2a3d8:	42ab      	cmp	r3, r5
   2a3da:	d0f6      	beq.n	2a3ca <memcmp+0x6>
   2a3dc:	1b58      	subs	r0, r3, r5
   2a3de:	bd30      	pop	{r4, r5, pc}

0002a3e0 <memcpy>:
   2a3e0:	440a      	add	r2, r1
   2a3e2:	4291      	cmp	r1, r2
   2a3e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   2a3e8:	d100      	bne.n	2a3ec <memcpy+0xc>
   2a3ea:	4770      	bx	lr
   2a3ec:	b510      	push	{r4, lr}
   2a3ee:	f811 4b01 	ldrb.w	r4, [r1], #1
   2a3f2:	f803 4f01 	strb.w	r4, [r3, #1]!
   2a3f6:	4291      	cmp	r1, r2
   2a3f8:	d1f9      	bne.n	2a3ee <memcpy+0xe>
   2a3fa:	bd10      	pop	{r4, pc}

0002a3fc <memset>:
   2a3fc:	4402      	add	r2, r0
   2a3fe:	4603      	mov	r3, r0
   2a400:	4293      	cmp	r3, r2
   2a402:	d100      	bne.n	2a406 <memset+0xa>
   2a404:	4770      	bx	lr
   2a406:	f803 1b01 	strb.w	r1, [r3], #1
   2a40a:	e7f9      	b.n	2a400 <memset+0x4>

0002a40c <strcpy>:
   2a40c:	4603      	mov	r3, r0
   2a40e:	f811 2b01 	ldrb.w	r2, [r1], #1
   2a412:	f803 2b01 	strb.w	r2, [r3], #1
   2a416:	2a00      	cmp	r2, #0
   2a418:	d1f9      	bne.n	2a40e <strcpy+0x2>
   2a41a:	4770      	bx	lr

0002a41c <strncpy>:
   2a41c:	b510      	push	{r4, lr}
   2a41e:	3901      	subs	r1, #1
   2a420:	4603      	mov	r3, r0
   2a422:	b132      	cbz	r2, 2a432 <strncpy+0x16>
   2a424:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2a428:	f803 4b01 	strb.w	r4, [r3], #1
   2a42c:	3a01      	subs	r2, #1
   2a42e:	2c00      	cmp	r4, #0
   2a430:	d1f7      	bne.n	2a422 <strncpy+0x6>
   2a432:	441a      	add	r2, r3
   2a434:	2100      	movs	r1, #0
   2a436:	4293      	cmp	r3, r2
   2a438:	d100      	bne.n	2a43c <strncpy+0x20>
   2a43a:	bd10      	pop	{r4, pc}
   2a43c:	f803 1b01 	strb.w	r1, [r3], #1
   2a440:	e7f9      	b.n	2a436 <strncpy+0x1a>

0002a442 <strnlen>:
   2a442:	b510      	push	{r4, lr}
   2a444:	4602      	mov	r2, r0
   2a446:	4401      	add	r1, r0
   2a448:	428a      	cmp	r2, r1
   2a44a:	4613      	mov	r3, r2
   2a44c:	d101      	bne.n	2a452 <strnlen+0x10>
   2a44e:	1a18      	subs	r0, r3, r0
   2a450:	bd10      	pop	{r4, pc}
   2a452:	781c      	ldrb	r4, [r3, #0]
   2a454:	3201      	adds	r2, #1
   2a456:	2c00      	cmp	r4, #0
   2a458:	d1f6      	bne.n	2a448 <strnlen+0x6>
   2a45a:	e7f8      	b.n	2a44e <strnlen+0xc>
